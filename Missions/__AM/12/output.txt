// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 14942 0 0
// PrepareDifficulty ;
  43: CALL 12315 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3776 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3914 0 0
// Action ;
  87: CALL 5557 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 38849 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 38849 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 38849 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 38849 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 38849 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 38849 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 38849 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 38849 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 38849 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 38849 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 38849 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 38849 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 38849 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 76250 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 6
3434: PPUSH
3435: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 112
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 47
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 4
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 129
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 135
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12634 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: LD_INT 22
3582: PUSH
3583: LD_INT 3
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 30
3592: PUSH
3593: LD_INT 32
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: CALL_OW 69
3608: PUSH
3609: FOR_IN
3610: IFFALSE 3650
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3612: LD_INT 3
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_EXP 29
3627: PPUSH
3628: LD_EXP 30
3632: PPUSH
3633: CALL_OW 12
3637: PPUSH
3638: LD_INT 1
3640: PPUSH
3641: LD_INT 1
3643: PPUSH
3644: CALL 12634 0 6
3648: GO 3609
3650: POP
3651: POP
// for i := 1 to 5 do
3652: LD_ADDR_VAR 0 2
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 5
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3769
// begin uc_side := 3 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 3
3675: ST_TO_ADDR
// uc_nation := 3 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 3
3683: ST_TO_ADDR
// hc_gallery :=  ;
3684: LD_ADDR_OWVAR 33
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_name :=  ;
3692: LD_ADDR_OWVAR 26
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3700: LD_INT 0
3702: PPUSH
3703: LD_INT 4
3705: PPUSH
3706: LD_EXP 29
3710: PPUSH
3711: LD_EXP 30
3715: PPUSH
3716: CALL_OW 12
3720: PPUSH
3721: CALL_OW 380
// un := CreateHuman ;
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: CALL_OW 44
3734: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3735: LD_VAR 0 3
3739: PPUSH
3740: LD_INT 3
3742: PPUSH
3743: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3747: LD_ADDR_EXP 27
3751: PUSH
3752: LD_EXP 27
3756: PPUSH
3757: LD_VAR 0 3
3761: PPUSH
3762: CALL 76250 0 2
3766: ST_TO_ADDR
// end ;
3767: GO 3665
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function PrepareWestBase ; var i , un ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3781: LD_INT 10
3783: PPUSH
3784: LD_INT 122
3786: PPUSH
3787: LD_INT 145
3789: PPUSH
3790: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3794: LD_INT 137
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 61
3802: PPUSH
3803: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3807: LD_INT 3
3809: PPUSH
3810: LD_INT 3
3812: PPUSH
3813: LD_INT 6
3815: PPUSH
3816: LD_EXP 29
3820: PPUSH
3821: LD_EXP 30
3825: PPUSH
3826: CALL_OW 12
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_INT 3
3836: PPUSH
3837: CALL 12634 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 91
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 4
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12634 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 21
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 3
3901: PPUSH
3902: LD_INT 6
3904: PPUSH
3905: CALL 12634 0 6
// end ;
3909: LD_VAR 0 1
3913: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
3919: PPUSH
// uc_side := 3 ;
3920: LD_ADDR_OWVAR 20
3924: PUSH
3925: LD_INT 3
3927: ST_TO_ADDR
// uc_nation := 3 ;
3928: LD_ADDR_OWVAR 21
3932: PUSH
3933: LD_INT 3
3935: ST_TO_ADDR
// for i := 1 to 5 do
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: DOUBLE
3942: LD_INT 1
3944: DEC
3945: ST_TO_ADDR
3946: LD_INT 5
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4020
// begin hc_gallery :=  ;
3952: LD_ADDR_OWVAR 33
3956: PUSH
3957: LD_STRING 
3959: ST_TO_ADDR
// hc_name :=  ;
3960: LD_ADDR_OWVAR 26
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 9
3973: PPUSH
3974: LD_EXP 29
3978: PPUSH
3979: LD_EXP 30
3983: PPUSH
3984: CALL_OW 12
3988: PPUSH
3989: CALL_OW 380
// un := CreateHuman ;
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: CALL_OW 44
4002: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4003: LD_VAR 0 3
4007: PPUSH
4008: LD_INT 8
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// end ;
4018: GO 3949
4020: POP
4021: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: DOUBLE
4028: LD_INT 1
4030: DEC
4031: ST_TO_ADDR
4032: LD_INT 2
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: LD_OWVAR 67
4054: ARRAY
4055: PUSH
4056: FOR_TO
4057: IFFALSE 4127
// begin hc_gallery :=  ;
4059: LD_ADDR_OWVAR 33
4063: PUSH
4064: LD_STRING 
4066: ST_TO_ADDR
// hc_name :=  ;
4067: LD_ADDR_OWVAR 26
4071: PUSH
4072: LD_STRING 
4074: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4075: LD_INT 0
4077: PPUSH
4078: LD_INT 4
4080: PPUSH
4081: LD_EXP 29
4085: PPUSH
4086: LD_EXP 30
4090: PPUSH
4091: CALL_OW 12
4095: PPUSH
4096: CALL_OW 380
// un := CreateHuman ;
4100: LD_ADDR_VAR 0 3
4104: PUSH
4105: CALL_OW 44
4109: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4110: LD_VAR 0 3
4114: PPUSH
4115: LD_INT 8
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 4056
4127: POP
4128: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: DOUBLE
4135: LD_INT 1
4137: DEC
4138: ST_TO_ADDR
4139: LD_INT 3
4141: PUSH
4142: LD_INT 4
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: LD_INT 5
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: PUSH
4157: LD_OWVAR 67
4161: ARRAY
4162: PUSH
4163: FOR_TO
4164: IFFALSE 4360
// begin vc_engine = 3 ;
4166: LD_ADDR_OWVAR 39
4170: PUSH
4171: LD_INT 3
4173: ST_TO_ADDR
// vc_control = 1 ;
4174: LD_ADDR_OWVAR 38
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4182: LD_ADDR_OWVAR 40
4186: PUSH
4187: LD_INT 42
4189: PUSH
4190: LD_INT 43
4192: PUSH
4193: LD_INT 44
4195: PUSH
4196: LD_INT 45
4198: PUSH
4199: LD_INT 46
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 5
4214: PPUSH
4215: CALL_OW 12
4219: ARRAY
4220: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4221: LD_OWVAR 40
4225: PUSH
4226: LD_INT 46
4228: EQUAL
4229: IFFALSE 4241
// vc_chassis := ru_heavy_tracked else
4231: LD_ADDR_OWVAR 37
4235: PUSH
4236: LD_INT 24
4238: ST_TO_ADDR
4239: GO 4268
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4241: LD_ADDR_OWVAR 37
4245: PUSH
4246: LD_INT 22
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 2
4261: PPUSH
4262: CALL_OW 12
4266: ARRAY
4267: ST_TO_ADDR
// veh := CreateVehicle ;
4268: LD_ADDR_VAR 0 4
4272: PUSH
4273: CALL_OW 45
4277: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4278: LD_VAR 0 4
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4290: LD_VAR 0 4
4294: PPUSH
4295: LD_INT 5
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// hc_gallery :=  ;
4305: LD_ADDR_OWVAR 33
4309: PUSH
4310: LD_STRING 
4312: ST_TO_ADDR
// hc_name :=  ;
4313: LD_ADDR_OWVAR 26
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4321: LD_INT 0
4323: PPUSH
4324: LD_INT 3
4326: PPUSH
4327: LD_INT 10
4329: PPUSH
4330: CALL_OW 380
// un = CreateHuman ;
4334: LD_ADDR_VAR 0 3
4338: PUSH
4339: CALL_OW 44
4343: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4344: LD_VAR 0 3
4348: PPUSH
4349: LD_VAR 0 4
4353: PPUSH
4354: CALL_OW 52
// end ;
4358: GO 4163
4360: POP
4361: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: DOUBLE
4368: LD_INT 1
4370: DEC
4371: ST_TO_ADDR
4372: LD_INT 3
4374: PUSH
4375: LD_INT 4
4377: PUSH
4378: LD_INT 5
4380: PUSH
4381: LD_INT 5
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: PUSH
4390: LD_OWVAR 67
4394: ARRAY
4395: PUSH
4396: FOR_TO
4397: IFFALSE 4544
// begin vc_engine := 3 ;
4399: LD_ADDR_OWVAR 39
4403: PUSH
4404: LD_INT 3
4406: ST_TO_ADDR
// vc_control := 3 ;
4407: LD_ADDR_OWVAR 38
4411: PUSH
4412: LD_INT 3
4414: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4415: LD_ADDR_OWVAR 40
4419: PUSH
4420: LD_INT 42
4422: PUSH
4423: LD_INT 43
4425: PUSH
4426: LD_INT 44
4428: PUSH
4429: LD_INT 45
4431: PUSH
4432: LD_INT 46
4434: PUSH
4435: LD_INT 49
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 1
4448: PPUSH
4449: LD_INT 5
4451: PPUSH
4452: CALL_OW 12
4456: ARRAY
4457: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4458: LD_OWVAR 40
4462: PUSH
4463: LD_INT 46
4465: EQUAL
4466: IFFALSE 4478
// vc_chassis := ru_heavy_tracked else
4468: LD_ADDR_OWVAR 37
4472: PUSH
4473: LD_INT 24
4475: ST_TO_ADDR
4476: GO 4505
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4478: LD_ADDR_OWVAR 37
4482: PUSH
4483: LD_INT 22
4485: PUSH
4486: LD_INT 21
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 1
4495: PPUSH
4496: LD_INT 2
4498: PPUSH
4499: CALL_OW 12
4503: ARRAY
4504: ST_TO_ADDR
// veh := CreateVehicle ;
4505: LD_ADDR_VAR 0 4
4509: PUSH
4510: CALL_OW 45
4514: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4515: LD_VAR 0 4
4519: PPUSH
4520: LD_INT 3
4522: PPUSH
4523: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4527: LD_VAR 0 4
4531: PPUSH
4532: LD_INT 6
4534: PPUSH
4535: LD_INT 0
4537: PPUSH
4538: CALL_OW 49
// end ;
4542: GO 4396
4544: POP
4545: POP
// end ; end_of_file
4546: LD_VAR 0 1
4550: RET
// export function PrepareKurt ; begin
4551: LD_INT 0
4553: PPUSH
// uc_side := 8 ;
4554: LD_ADDR_OWVAR 20
4558: PUSH
4559: LD_INT 8
4561: ST_TO_ADDR
// uc_nation := 2 ;
4562: LD_ADDR_OWVAR 21
4566: PUSH
4567: LD_INT 2
4569: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4570: LD_ADDR_OWVAR 37
4574: PUSH
4575: LD_INT 13
4577: ST_TO_ADDR
// vc_engine := 1 ;
4578: LD_ADDR_OWVAR 39
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// vc_control := 1 ;
4586: LD_ADDR_OWVAR 38
4590: PUSH
4591: LD_INT 1
4593: ST_TO_ADDR
// vc_weapon := 24 ;
4594: LD_ADDR_OWVAR 40
4598: PUSH
4599: LD_INT 24
4601: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
4602: LD_ADDR_EXP 18
4606: PUSH
4607: CALL_OW 45
4611: ST_TO_ADDR
// if kurtStatus > 0 then
4612: LD_EXP 19
4616: PUSH
4617: LD_INT 0
4619: GREATER
4620: IFFALSE 4672
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
4622: LD_ADDR_EXP 17
4626: PUSH
4627: LD_STRING Kurt
4629: PPUSH
4630: LD_INT 0
4632: PPUSH
4633: LD_STRING 
4635: PPUSH
4636: CALL 38849 0 3
4640: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4641: LD_EXP 18
4645: PPUSH
4646: LD_INT 4
4648: PPUSH
4649: LD_INT 0
4651: PPUSH
4652: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4656: LD_EXP 17
4660: PPUSH
4661: LD_EXP 18
4665: PPUSH
4666: CALL_OW 52
// end else
4670: GO 4749
// begin hc_name :=  ;
4672: LD_ADDR_OWVAR 26
4676: PUSH
4677: LD_STRING 
4679: ST_TO_ADDR
// hc_gallery :=  ;
4680: LD_ADDR_OWVAR 33
4684: PUSH
4685: LD_STRING 
4687: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4688: LD_INT 1
4690: PPUSH
4691: LD_INT 10
4693: PPUSH
4694: CALL_OW 381
// Kurt := CreateHuman ;
4698: LD_ADDR_EXP 17
4702: PUSH
4703: CALL_OW 44
4707: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4708: LD_EXP 18
4712: PPUSH
4713: LD_INT 4
4715: PPUSH
4716: LD_INT 0
4718: PPUSH
4719: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4723: LD_EXP 17
4727: PPUSH
4728: LD_EXP 18
4732: PPUSH
4733: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4737: LD_EXP 17
4741: PPUSH
4742: LD_STRING AltKurt
4744: PPUSH
4745: CALL_OW 38
// end ; end ;
4749: LD_VAR 0 1
4753: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4754: LD_INT 0
4756: PPUSH
4757: PPUSH
4758: PPUSH
4759: PPUSH
// for i := 1 to 3 do
4760: LD_ADDR_VAR 0 2
4764: PUSH
4765: DOUBLE
4766: LD_INT 1
4768: DEC
4769: ST_TO_ADDR
4770: LD_INT 3
4772: PUSH
4773: FOR_TO
4774: IFFALSE 4895
// begin uc_side := 1 ;
4776: LD_ADDR_OWVAR 20
4780: PUSH
4781: LD_INT 1
4783: ST_TO_ADDR
// uc_nation := 2 ;
4784: LD_ADDR_OWVAR 21
4788: PUSH
4789: LD_INT 2
4791: ST_TO_ADDR
// hc_gallery =  ;
4792: LD_ADDR_OWVAR 33
4796: PUSH
4797: LD_STRING 
4799: ST_TO_ADDR
// hc_name =  ;
4800: LD_ADDR_OWVAR 26
4804: PUSH
4805: LD_STRING 
4807: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4808: LD_EXP 19
4812: PUSH
4813: LD_INT 0
4815: EQUAL
4816: PUSH
4817: LD_EXP 19
4821: PUSH
4822: LD_INT 2
4824: EQUAL
4825: OR
4826: IFFALSE 4843
// PrepareHuman ( false , 1 , 6 ) else
4828: LD_INT 0
4830: PPUSH
4831: LD_INT 1
4833: PPUSH
4834: LD_INT 6
4836: PPUSH
4837: CALL_OW 380
4841: GO 4856
// PrepareHuman ( false , 1 , 8 ) ;
4843: LD_INT 0
4845: PPUSH
4846: LD_INT 1
4848: PPUSH
4849: LD_INT 8
4851: PPUSH
4852: CALL_OW 380
// un := CreateHuman ;
4856: LD_ADDR_VAR 0 3
4860: PUSH
4861: CALL_OW 44
4865: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4866: LD_VAR 0 3
4870: PPUSH
4871: LD_INT 4
4873: PPUSH
4874: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4878: LD_VAR 0 3
4882: PPUSH
4883: LD_INT 4
4885: PPUSH
4886: LD_INT 0
4888: PPUSH
4889: CALL_OW 49
// end ;
4893: GO 4773
4895: POP
4896: POP
// vc_chassis := 14 ;
4897: LD_ADDR_OWVAR 37
4901: PUSH
4902: LD_INT 14
4904: ST_TO_ADDR
// vc_engine := 3 ;
4905: LD_ADDR_OWVAR 39
4909: PUSH
4910: LD_INT 3
4912: ST_TO_ADDR
// vc_control := 1 ;
4913: LD_ADDR_OWVAR 38
4917: PUSH
4918: LD_INT 1
4920: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4921: LD_ADDR_OWVAR 40
4925: PUSH
4926: LD_INT 27
4928: PUSH
4929: LD_INT 26
4931: PUSH
4932: LD_INT 28
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 3
4945: PPUSH
4946: CALL_OW 12
4950: ARRAY
4951: ST_TO_ADDR
// veh := CreateVehicle ;
4952: LD_ADDR_VAR 0 4
4956: PUSH
4957: CALL_OW 45
4961: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4962: LD_VAR 0 4
4966: PPUSH
4967: LD_INT 4
4969: PPUSH
4970: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4974: LD_VAR 0 4
4978: PPUSH
4979: LD_INT 4
4981: PPUSH
4982: LD_INT 0
4984: PPUSH
4985: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4989: LD_EXP 19
4993: PUSH
4994: LD_INT 0
4996: EQUAL
4997: PUSH
4998: LD_EXP 19
5002: PUSH
5003: LD_INT 2
5005: EQUAL
5006: OR
5007: IFFALSE 5024
// PrepareHuman ( false , 3 , 6 ) else
5009: LD_INT 0
5011: PPUSH
5012: LD_INT 3
5014: PPUSH
5015: LD_INT 6
5017: PPUSH
5018: CALL_OW 380
5022: GO 5037
// PrepareHuman ( false , 3 , 8 ) ;
5024: LD_INT 0
5026: PPUSH
5027: LD_INT 3
5029: PPUSH
5030: LD_INT 8
5032: PPUSH
5033: CALL_OW 380
// un := CreateHuman ;
5037: LD_ADDR_VAR 0 3
5041: PUSH
5042: CALL_OW 44
5046: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5047: LD_VAR 0 3
5051: PPUSH
5052: LD_VAR 0 4
5056: PPUSH
5057: CALL_OW 52
// vc_chassis := 14 ;
5061: LD_ADDR_OWVAR 37
5065: PUSH
5066: LD_INT 14
5068: ST_TO_ADDR
// vc_engine := 3 ;
5069: LD_ADDR_OWVAR 39
5073: PUSH
5074: LD_INT 3
5076: ST_TO_ADDR
// vc_control := 1 ;
5077: LD_ADDR_OWVAR 38
5081: PUSH
5082: LD_INT 1
5084: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5085: LD_ADDR_OWVAR 40
5089: PUSH
5090: LD_INT 27
5092: PUSH
5093: LD_INT 26
5095: PUSH
5096: LD_INT 28
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 1
5106: PPUSH
5107: LD_INT 3
5109: PPUSH
5110: CALL_OW 12
5114: ARRAY
5115: ST_TO_ADDR
// veh := CreateVehicle ;
5116: LD_ADDR_VAR 0 4
5120: PUSH
5121: CALL_OW 45
5125: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5126: LD_VAR 0 4
5130: PPUSH
5131: LD_INT 4
5133: PPUSH
5134: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5138: LD_VAR 0 4
5142: PPUSH
5143: LD_INT 4
5145: PPUSH
5146: LD_INT 0
5148: PPUSH
5149: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5153: LD_EXP 19
5157: PUSH
5158: LD_INT 0
5160: EQUAL
5161: PUSH
5162: LD_EXP 19
5166: PUSH
5167: LD_INT 2
5169: EQUAL
5170: OR
5171: IFFALSE 5188
// PrepareHuman ( false , 4 , 6 ) else
5173: LD_INT 0
5175: PPUSH
5176: LD_INT 4
5178: PPUSH
5179: LD_INT 6
5181: PPUSH
5182: CALL_OW 380
5186: GO 5201
// PrepareHuman ( false , 4 , 8 ) ;
5188: LD_INT 0
5190: PPUSH
5191: LD_INT 4
5193: PPUSH
5194: LD_INT 8
5196: PPUSH
5197: CALL_OW 380
// un := CreateHuman ;
5201: LD_ADDR_VAR 0 3
5205: PUSH
5206: CALL_OW 44
5210: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_INT 4
5218: PPUSH
5219: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5223: LD_VAR 0 3
5227: PPUSH
5228: LD_VAR 0 4
5232: PPUSH
5233: CALL_OW 52
// vc_chassis := 14 ;
5237: LD_ADDR_OWVAR 37
5241: PUSH
5242: LD_INT 14
5244: ST_TO_ADDR
// vc_engine := 3 ;
5245: LD_ADDR_OWVAR 39
5249: PUSH
5250: LD_INT 3
5252: ST_TO_ADDR
// vc_control := 1 ;
5253: LD_ADDR_OWVAR 38
5257: PUSH
5258: LD_INT 1
5260: ST_TO_ADDR
// vc_weapon := 26 ;
5261: LD_ADDR_OWVAR 40
5265: PUSH
5266: LD_INT 26
5268: ST_TO_ADDR
// veh := CreateVehicle ;
5269: LD_ADDR_VAR 0 4
5273: PUSH
5274: CALL_OW 45
5278: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5279: LD_VAR 0 4
5283: PPUSH
5284: LD_INT 4
5286: PPUSH
5287: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5291: LD_VAR 0 4
5295: PPUSH
5296: LD_INT 4
5298: PPUSH
5299: LD_INT 0
5301: PPUSH
5302: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5306: LD_EXP 19
5310: PUSH
5311: LD_INT 0
5313: EQUAL
5314: PUSH
5315: LD_EXP 19
5319: PUSH
5320: LD_INT 2
5322: EQUAL
5323: OR
5324: IFFALSE 5341
// PrepareHuman ( false , 2 , 4 ) else
5326: LD_INT 0
5328: PPUSH
5329: LD_INT 2
5331: PPUSH
5332: LD_INT 4
5334: PPUSH
5335: CALL_OW 380
5339: GO 5354
// PrepareHuman ( false , 2 , 8 ) ;
5341: LD_INT 0
5343: PPUSH
5344: LD_INT 2
5346: PPUSH
5347: LD_INT 8
5349: PPUSH
5350: CALL_OW 380
// un := CreateHuman ;
5354: LD_ADDR_VAR 0 3
5358: PUSH
5359: CALL_OW 44
5363: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5364: LD_VAR 0 3
5368: PPUSH
5369: LD_INT 4
5371: PPUSH
5372: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5376: LD_VAR 0 3
5380: PPUSH
5381: LD_VAR 0 4
5385: PPUSH
5386: CALL_OW 52
// end ;
5390: LD_VAR 0 1
5394: RET
// export function PrepareAttackLegion ; var i , un ; begin
5395: LD_INT 0
5397: PPUSH
5398: PPUSH
5399: PPUSH
// for i := 1 to 4 do
5400: LD_ADDR_VAR 0 2
5404: PUSH
5405: DOUBLE
5406: LD_INT 1
5408: DEC
5409: ST_TO_ADDR
5410: LD_INT 4
5412: PUSH
5413: FOR_TO
5414: IFFALSE 5524
// begin uc_side := 8 ;
5416: LD_ADDR_OWVAR 20
5420: PUSH
5421: LD_INT 8
5423: ST_TO_ADDR
// uc_nation := 2 ;
5424: LD_ADDR_OWVAR 21
5428: PUSH
5429: LD_INT 2
5431: ST_TO_ADDR
// hc_gallery :=  ;
5432: LD_ADDR_OWVAR 33
5436: PUSH
5437: LD_STRING 
5439: ST_TO_ADDR
// hc_name :=  ;
5440: LD_ADDR_OWVAR 26
5444: PUSH
5445: LD_STRING 
5447: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5448: LD_INT 0
5450: PPUSH
5451: LD_INT 1
5453: PUSH
5454: LD_INT 8
5456: PUSH
5457: EMPTY
5458: LIST
5459: LIST
5460: PUSH
5461: LD_INT 1
5463: PPUSH
5464: LD_INT 2
5466: PPUSH
5467: CALL_OW 12
5471: ARRAY
5472: PPUSH
5473: LD_INT 6
5475: PPUSH
5476: LD_INT 8
5478: PPUSH
5479: CALL_OW 12
5483: PPUSH
5484: CALL_OW 380
// un := CreateHuman ;
5488: LD_ADDR_VAR 0 3
5492: PUSH
5493: CALL_OW 44
5497: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5498: LD_VAR 0 3
5502: PPUSH
5503: LD_INT 19
5505: PPUSH
5506: LD_INT 0
5508: PPUSH
5509: CALL_OW 49
// ComCrawl ( un ) ;
5513: LD_VAR 0 3
5517: PPUSH
5518: CALL_OW 137
// end ;
5522: GO 5413
5524: POP
5525: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5526: LD_INT 1
5528: PPUSH
5529: LD_INT 8
5531: PPUSH
5532: LD_INT 2
5534: PPUSH
5535: LD_INT 1
5537: PPUSH
5538: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5542: LD_INT 20
5544: PPUSH
5545: LD_INT 3
5547: PPUSH
5548: CALL 14469 0 2
// end ; end_of_file
5552: LD_VAR 0 1
5556: RET
// export function Action ; var i , tmp , group ; begin
5557: LD_INT 0
5559: PPUSH
5560: PPUSH
5561: PPUSH
5562: PPUSH
// InGameOn ;
5563: CALL_OW 8
// music_nat := 1 ;
5567: LD_ADDR_OWVAR 71
5571: PUSH
5572: LD_INT 1
5574: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5575: LD_ADDR_VAR 0 4
5579: PUSH
5580: LD_INT 22
5582: PUSH
5583: LD_INT 1
5585: PUSH
5586: EMPTY
5587: LIST
5588: LIST
5589: PPUSH
5590: CALL_OW 69
5594: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5595: LD_ADDR_VAR 0 3
5599: PUSH
5600: LD_EXP 1
5604: PPUSH
5605: CALL_OW 310
5609: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5610: LD_VAR 0 3
5614: PPUSH
5615: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5619: LD_VAR 0 4
5623: PPUSH
5624: LD_INT 130
5626: PPUSH
5627: LD_INT 103
5629: PPUSH
5630: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5634: LD_VAR 0 3
5638: PPUSH
5639: LD_INT 114
5641: PPUSH
5642: LD_INT 102
5644: PPUSH
5645: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5649: LD_EXP 1
5653: PPUSH
5654: LD_STRING D1-JMM-1
5656: PPUSH
5657: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5661: LD_VAR 0 3
5665: PPUSH
5666: CALL_OW 87
// if IsOk ( Donaldson ) then
5670: LD_EXP 3
5674: PPUSH
5675: CALL_OW 302
5679: IFFALSE 5744
// begin Say ( Donaldson , D1-Don-1 ) ;
5681: LD_EXP 3
5685: PPUSH
5686: LD_STRING D1-Don-1
5688: PPUSH
5689: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5693: LD_VAR 0 3
5697: PPUSH
5698: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5702: LD_EXP 1
5706: PPUSH
5707: LD_STRING D1-JMM-2
5709: PPUSH
5710: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5714: LD_VAR 0 3
5718: PPUSH
5719: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5723: LD_EXP 3
5727: PPUSH
5728: LD_STRING D1-Don-2
5730: PPUSH
5731: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5744: LD_VAR 0 4
5748: PPUSH
5749: LD_INT 110
5751: PPUSH
5752: LD_INT 101
5754: PPUSH
5755: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5759: LD_INT 35
5761: PPUSH
5762: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5766: LD_VAR 0 3
5770: PPUSH
5771: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5775: LD_INT 1
5777: PPUSH
5778: LD_INT 102
5780: PPUSH
5781: LD_INT 94
5783: PPUSH
5784: CALL_OW 293
5788: IFFALSE 5759
// CenterOnXY ( 102 , 94 ) ;
5790: LD_INT 102
5792: PPUSH
5793: LD_INT 94
5795: PPUSH
5796: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5800: LD_VAR 0 4
5804: PPUSH
5805: LD_INT 26
5807: PUSH
5808: LD_INT 1
5810: PUSH
5811: EMPTY
5812: LIST
5813: LIST
5814: PPUSH
5815: CALL_OW 72
5819: PPUSH
5820: LD_STRING D1-Sol1-2
5822: PPUSH
5823: LD_STRING 
5825: PPUSH
5826: CALL 12129 0 3
// Say ( JMM , D1-JMM-3 ) ;
5830: LD_EXP 1
5834: PPUSH
5835: LD_STRING D1-JMM-3
5837: PPUSH
5838: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5842: LD_STRING M1
5844: PPUSH
5845: CALL_OW 337
// for i in group do
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_VAR 0 4
5858: PUSH
5859: FOR_IN
5860: IFFALSE 5879
// ComMoveXY ( i , 95 , 84 ) ;
5862: LD_VAR 0 2
5866: PPUSH
5867: LD_INT 95
5869: PPUSH
5870: LD_INT 84
5872: PPUSH
5873: CALL_OW 111
5877: GO 5859
5879: POP
5880: POP
// end ;
5881: LD_VAR 0 1
5885: RET
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5886: GO 5888
5888: DISABLE
5889: LD_INT 0
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// begin enable ;
5895: ENABLE
// bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5896: LD_ADDR_VAR 0 2
5900: PUSH
5901: LD_INT 8
5903: PPUSH
5904: LD_INT 22
5906: PUSH
5907: LD_INT 3
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: LD_INT 25
5916: PUSH
5917: LD_INT 9
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: PUSH
5924: EMPTY
5925: LIST
5926: LIST
5927: PPUSH
5928: CALL_OW 70
5932: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5933: LD_ADDR_VAR 0 3
5937: PUSH
5938: LD_INT 22
5940: PUSH
5941: LD_INT 1
5943: PUSH
5944: EMPTY
5945: LIST
5946: LIST
5947: PUSH
5948: EMPTY
5949: LIST
5950: PPUSH
5951: CALL_OW 69
5955: ST_TO_ADDR
// for i in your_units do
5956: LD_ADDR_VAR 0 1
5960: PUSH
5961: LD_VAR 0 3
5965: PUSH
5966: FOR_IN
5967: IFFALSE 6633
// begin if See ( 3 , i ) then
5969: LD_INT 3
5971: PPUSH
5972: LD_VAR 0 1
5976: PPUSH
5977: CALL_OW 292
5981: IFFALSE 6631
// begin disable ;
5983: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5984: LD_VAR 0 2
5988: PPUSH
5989: LD_INT 96
5991: PPUSH
5992: LD_INT 85
5994: PPUSH
5995: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5999: LD_VAR 0 2
6003: PPUSH
6004: LD_INT 96
6006: PPUSH
6007: LD_INT 85
6009: PPUSH
6010: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6014: LD_VAR 0 2
6018: PPUSH
6019: LD_INT 96
6021: PPUSH
6022: LD_INT 85
6024: PPUSH
6025: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_INT 96
6036: PPUSH
6037: LD_INT 85
6039: PPUSH
6040: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6044: LD_VAR 0 2
6048: PPUSH
6049: LD_INT 96
6051: PPUSH
6052: LD_INT 85
6054: PPUSH
6055: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_INT 96
6066: PPUSH
6067: LD_INT 85
6069: PPUSH
6070: CALL_OW 214
// wait ( 0 0$2 ) ;
6074: LD_INT 70
6076: PPUSH
6077: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6081: LD_EXP 1
6085: PPUSH
6086: LD_STRING D1a-JMM-1
6088: PPUSH
6089: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6093: LD_EXP 3
6097: PPUSH
6098: LD_STRING D1a-Don-1
6100: PPUSH
6101: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6105: LD_ADDR_VAR 0 1
6109: PUSH
6110: LD_INT 22
6112: PUSH
6113: LD_INT 1
6115: PUSH
6116: EMPTY
6117: LIST
6118: LIST
6119: PPUSH
6120: CALL_OW 69
6124: PUSH
6125: FOR_IN
6126: IFFALSE 6145
// ComMoveXY ( i , 109 , 102 ) ;
6128: LD_VAR 0 1
6132: PPUSH
6133: LD_INT 109
6135: PPUSH
6136: LD_INT 102
6138: PPUSH
6139: CALL_OW 111
6143: GO 6125
6145: POP
6146: POP
// Say ( JMM , D1a-JMM-2 ) ;
6147: LD_EXP 1
6151: PPUSH
6152: LD_STRING D1a-JMM-2
6154: PPUSH
6155: CALL_OW 88
// wait ( 0 0$10 ) ;
6159: LD_INT 350
6161: PPUSH
6162: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6166: LD_EXP 1
6170: PPUSH
6171: CALL_OW 310
6175: PPUSH
6176: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6180: LD_EXP 3
6184: PPUSH
6185: LD_STRING D1b-Don-1
6187: PPUSH
6188: CALL_OW 88
// if IsOk ( Donaldson ) then
6192: LD_EXP 3
6196: PPUSH
6197: CALL_OW 302
6201: IFFALSE 6215
// Say ( JMM , D1b-JMM-1 ) ;
6203: LD_EXP 1
6207: PPUSH
6208: LD_STRING D1b-JMM-1
6210: PPUSH
6211: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6215: LD_INT 22
6217: PUSH
6218: LD_INT 1
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 26
6227: PUSH
6228: LD_INT 1
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 2
6237: PUSH
6238: LD_INT 25
6240: PUSH
6241: LD_INT 1
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 25
6250: PUSH
6251: LD_INT 2
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 25
6260: PUSH
6261: LD_INT 3
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PUSH
6268: LD_INT 25
6270: PUSH
6271: LD_INT 4
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 25
6280: PUSH
6281: LD_INT 5
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 25
6290: PUSH
6291: LD_INT 8
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: LIST
6302: LIST
6303: LIST
6304: LIST
6305: LIST
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: LIST
6311: PPUSH
6312: CALL_OW 69
6316: PPUSH
6317: LD_STRING D1b-Sol1-1
6319: PPUSH
6320: LD_STRING 
6322: PPUSH
6323: CALL 12129 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6327: LD_EXP 3
6331: PPUSH
6332: LD_STRING D1b-Don-2
6334: PPUSH
6335: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6339: LD_EXP 1
6343: PPUSH
6344: LD_STRING D1b-JMM-2
6346: PPUSH
6347: CALL_OW 88
// dec = ShowQuery1 ;
6351: LD_ADDR_VAR 0 4
6355: PUSH
6356: CALL 12592 0 0
6360: ST_TO_ADDR
// if dec = 1 then
6361: LD_VAR 0 4
6365: PUSH
6366: LD_INT 1
6368: EQUAL
6369: IFFALSE 6475
// begin Say ( JMM , D2-JMM-1 ) ;
6371: LD_EXP 1
6375: PPUSH
6376: LD_STRING D2-JMM-1
6378: PPUSH
6379: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6383: LD_EXP 15
6387: PPUSH
6388: LD_STRING D2-Pow-1
6390: PPUSH
6391: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6395: LD_EXP 1
6399: PPUSH
6400: LD_STRING D2a-JMM-1
6402: PPUSH
6403: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6407: LD_EXP 15
6411: PPUSH
6412: LD_STRING D2a-Pow-1
6414: PPUSH
6415: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6419: LD_EXP 1
6423: PPUSH
6424: LD_STRING D2a-JMM-2
6426: PPUSH
6427: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6431: LD_EXP 15
6435: PPUSH
6436: LD_STRING D2a-Pow-2
6438: PPUSH
6439: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6443: LD_EXP 1
6447: PPUSH
6448: LD_STRING D2a-JMM-3
6450: PPUSH
6451: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6455: LD_EXP 15
6459: PPUSH
6460: LD_STRING D2a-Pow-3
6462: PPUSH
6463: CALL_OW 94
// secondPass = 2 ;
6467: LD_ADDR_EXP 20
6471: PUSH
6472: LD_INT 2
6474: ST_TO_ADDR
// end ; if dec = 2 then
6475: LD_VAR 0 4
6479: PUSH
6480: LD_INT 2
6482: EQUAL
6483: IFFALSE 6577
// begin Say ( JMM , D2-JMM-1 ) ;
6485: LD_EXP 1
6489: PPUSH
6490: LD_STRING D2-JMM-1
6492: PPUSH
6493: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6497: LD_EXP 15
6501: PPUSH
6502: LD_STRING D2-Pow-1
6504: PPUSH
6505: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6509: LD_EXP 1
6513: PPUSH
6514: LD_STRING D2b-JMM-1
6516: PPUSH
6517: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6521: LD_EXP 15
6525: PPUSH
6526: LD_STRING D2b-Pow-1
6528: PPUSH
6529: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6533: LD_EXP 1
6537: PPUSH
6538: LD_STRING D2c-JMM-1
6540: PPUSH
6541: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6545: LD_EXP 15
6549: PPUSH
6550: LD_STRING D2c-Pow-1
6552: PPUSH
6553: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6557: LD_EXP 1
6561: PPUSH
6562: LD_STRING D2c-JMM-2
6564: PPUSH
6565: CALL_OW 88
// secondPass = 2 ;
6569: LD_ADDR_EXP 20
6573: PUSH
6574: LD_INT 2
6576: ST_TO_ADDR
// end ; if dec = 3 then
6577: LD_VAR 0 4
6581: PUSH
6582: LD_INT 3
6584: EQUAL
6585: IFFALSE 6595
// secondPass = 1 ;
6587: LD_ADDR_EXP 20
6591: PUSH
6592: LD_INT 1
6594: ST_TO_ADDR
// InGameOff ;
6595: CALL_OW 9
// ruAI := 1 ;
6599: LD_ADDR_EXP 34
6603: PUSH
6604: LD_INT 1
6606: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6607: LD_INT 1
6609: PPUSH
6610: LD_INT 3
6612: PPUSH
6613: LD_INT 2
6615: PPUSH
6616: LD_INT 1
6618: PPUSH
6619: CALL_OW 80
// SaveForQuickRestart ;
6623: CALL_OW 22
// exit ;
6627: POP
6628: POP
6629: GO 6635
// end ; end ;
6631: GO 5966
6633: POP
6634: POP
// end ;
6635: PPOPN 4
6637: END
// every 1 1$0 trigger secondPass = 2 do
6638: LD_EXP 20
6642: PUSH
6643: LD_INT 2
6645: EQUAL
6646: IFFALSE 6866
6648: GO 6650
6650: DISABLE
// begin PowellSupport1 ;
6651: CALL 1985 0 0
// DialogueOn ;
6655: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6659: LD_EXP 1
6663: PPUSH
6664: LD_STRING DC1-JMM-1
6666: PPUSH
6667: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6671: LD_EXP 15
6675: PPUSH
6676: LD_STRING DC1-Pow-1
6678: PPUSH
6679: CALL_OW 94
// DialogueOff ;
6683: CALL_OW 7
// wait ( 3 3$0 ) ;
6687: LD_INT 6300
6689: PPUSH
6690: CALL_OW 67
// PowellSupport2 ;
6694: CALL 2466 0 0
// DialogueOn ;
6698: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6702: LD_EXP 1
6706: PPUSH
6707: LD_STRING DC2-JMM-1
6709: PPUSH
6710: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6714: LD_EXP 15
6718: PPUSH
6719: LD_STRING DC2-Pow-1
6721: PPUSH
6722: CALL_OW 94
// DialogueOff ;
6726: CALL_OW 7
// wait ( 3 3$00 ) ;
6730: LD_INT 6300
6732: PPUSH
6733: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6737: LD_INT 35
6739: PPUSH
6740: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6744: LD_INT 22
6746: PUSH
6747: LD_INT 1
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: PUSH
6754: LD_INT 2
6756: PUSH
6757: LD_INT 30
6759: PUSH
6760: LD_INT 0
6762: PUSH
6763: EMPTY
6764: LIST
6765: LIST
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 1
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: LIST
6781: PUSH
6782: EMPTY
6783: LIST
6784: LIST
6785: PPUSH
6786: CALL_OW 69
6790: PUSH
6791: LD_INT 11
6793: PPUSH
6794: LD_INT 22
6796: PUSH
6797: LD_INT 3
6799: PUSH
6800: EMPTY
6801: LIST
6802: LIST
6803: PPUSH
6804: CALL_OW 70
6808: NOT
6809: AND
6810: IFFALSE 6737
// wait ( 0 0$10 ) ;
6812: LD_INT 350
6814: PPUSH
6815: CALL_OW 67
// Legion ;
6819: CALL 6867 0 0
// wait ( 5 5$0 ) ;
6823: LD_INT 10500
6825: PPUSH
6826: CALL_OW 67
// PowellSupport3 ;
6830: CALL 3079 0 0
// DialogueOn ;
6834: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6838: LD_EXP 15
6842: PPUSH
6843: LD_STRING DC3-Pow-1
6845: PPUSH
6846: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6850: LD_EXP 1
6854: PPUSH
6855: LD_STRING DC3-JMM-1
6857: PPUSH
6858: CALL_OW 88
// DialogueOff ;
6862: CALL_OW 7
// end ;
6866: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6867: LD_INT 0
6869: PPUSH
6870: PPUSH
6871: PPUSH
6872: PPUSH
6873: PPUSH
6874: PPUSH
6875: PPUSH
6876: PPUSH
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
6882: PPUSH
6883: PPUSH
6884: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6885: LD_ADDR_VAR 0 5
6889: PUSH
6890: LD_INT 22
6892: PUSH
6893: LD_INT 1
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 21
6902: PUSH
6903: LD_INT 3
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: LD_INT 2
6912: PUSH
6913: LD_INT 30
6915: PUSH
6916: LD_INT 0
6918: PUSH
6919: EMPTY
6920: LIST
6921: LIST
6922: PUSH
6923: LD_INT 30
6925: PUSH
6926: LD_INT 1
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: LIST
6937: PUSH
6938: EMPTY
6939: LIST
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 69
6947: ST_TO_ADDR
// crates := 0 ;
6948: LD_ADDR_VAR 0 8
6952: PUSH
6953: LD_INT 0
6955: ST_TO_ADDR
// oil := 0 ;
6956: LD_ADDR_VAR 0 9
6960: PUSH
6961: LD_INT 0
6963: ST_TO_ADDR
// siberite := 0 ;
6964: LD_ADDR_VAR 0 10
6968: PUSH
6969: LD_INT 0
6971: ST_TO_ADDR
// payForNeutral := false ;
6972: LD_ADDR_VAR 0 13
6976: PUSH
6977: LD_INT 0
6979: ST_TO_ADDR
// payForHelp := false ;
6980: LD_ADDR_VAR 0 14
6984: PUSH
6985: LD_INT 0
6987: ST_TO_ADDR
// for i in tmp do
6988: LD_ADDR_VAR 0 2
6992: PUSH
6993: LD_VAR 0 5
6997: PUSH
6998: FOR_IN
6999: IFFALSE 7090
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7001: LD_ADDR_VAR 0 8
7005: PUSH
7006: LD_VAR 0 8
7010: PUSH
7011: LD_VAR 0 2
7015: PPUSH
7016: CALL_OW 274
7020: PPUSH
7021: LD_INT 1
7023: PPUSH
7024: CALL_OW 275
7028: PLUS
7029: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7030: LD_ADDR_VAR 0 9
7034: PUSH
7035: LD_VAR 0 9
7039: PUSH
7040: LD_VAR 0 2
7044: PPUSH
7045: CALL_OW 274
7049: PPUSH
7050: LD_INT 2
7052: PPUSH
7053: CALL_OW 275
7057: PLUS
7058: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7059: LD_ADDR_VAR 0 10
7063: PUSH
7064: LD_VAR 0 10
7068: PUSH
7069: LD_VAR 0 2
7073: PPUSH
7074: CALL_OW 274
7078: PPUSH
7079: LD_INT 3
7081: PPUSH
7082: CALL_OW 275
7086: PLUS
7087: ST_TO_ADDR
// end ;
7088: GO 6998
7090: POP
7091: POP
// PrepareKurt ;
7092: CALL 4551 0 0
// if not Kurt then
7096: LD_EXP 17
7100: NOT
7101: IFFALSE 7105
// exit ;
7103: GO 9224
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7105: LD_EXP 18
7109: PPUSH
7110: LD_INT 144
7112: PPUSH
7113: LD_INT 111
7115: PPUSH
7116: CALL_OW 111
// wait ( 0 0$2 ) ;
7120: LD_INT 70
7122: PPUSH
7123: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7127: LD_INT 167
7129: PPUSH
7130: LD_INT 121
7132: PPUSH
7133: LD_INT 1
7135: PPUSH
7136: LD_INT 10
7138: NEG
7139: PPUSH
7140: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7144: LD_EXP 17
7148: PPUSH
7149: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7153: LD_EXP 17
7157: PPUSH
7158: CALL_OW 87
// wait ( 0 0$1 ) ;
7162: LD_INT 35
7164: PPUSH
7165: CALL_OW 67
// DialogueOn ;
7169: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7173: LD_INT 22
7175: PUSH
7176: LD_INT 1
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 26
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 2
7195: PUSH
7196: LD_INT 25
7198: PUSH
7199: LD_INT 1
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: LD_INT 25
7208: PUSH
7209: LD_INT 2
7211: PUSH
7212: EMPTY
7213: LIST
7214: LIST
7215: PUSH
7216: LD_INT 25
7218: PUSH
7219: LD_INT 3
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: PUSH
7226: LD_INT 25
7228: PUSH
7229: LD_INT 4
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 25
7238: PUSH
7239: LD_INT 5
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 25
7248: PUSH
7249: LD_INT 8
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: EMPTY
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: LIST
7269: PPUSH
7270: CALL_OW 69
7274: PPUSH
7275: LD_STRING D3-Sol1-1
7277: PPUSH
7278: LD_STRING 
7280: PPUSH
7281: CALL 12129 0 3
// if KurtStatus then
7285: LD_EXP 19
7289: IFFALSE 7389
// begin Say ( Kurt , D3-Kurt-1 ) ;
7291: LD_EXP 17
7295: PPUSH
7296: LD_STRING D3-Kurt-1
7298: PPUSH
7299: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7303: LD_EXP 1
7307: PPUSH
7308: LD_STRING D3-JMM-1
7310: PPUSH
7311: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7315: LD_EXP 17
7319: PPUSH
7320: LD_STRING D3-Kurt-2
7322: PPUSH
7323: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7327: LD_EXP 1
7331: PPUSH
7332: LD_STRING D3-JMM-2
7334: PPUSH
7335: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7339: LD_EXP 17
7343: PPUSH
7344: LD_STRING D3-Kurt-4
7346: PPUSH
7347: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7351: LD_EXP 1
7355: PPUSH
7356: LD_STRING D3-JMM-4
7358: PPUSH
7359: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7363: LD_EXP 17
7367: PPUSH
7368: LD_STRING D3-Kurt-5
7370: PPUSH
7371: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7375: LD_EXP 17
7379: PPUSH
7380: LD_STRING D3-Kurt-5a
7382: PPUSH
7383: CALL_OW 88
// end else
7387: GO 7485
// begin Say ( Kurt , D3-Kurt-1 ) ;
7389: LD_EXP 17
7393: PPUSH
7394: LD_STRING D3-Kurt-1
7396: PPUSH
7397: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7401: LD_EXP 1
7405: PPUSH
7406: LD_STRING D3-JMM-1
7408: PPUSH
7409: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7413: LD_EXP 17
7417: PPUSH
7418: LD_STRING D3-Kurt-3
7420: PPUSH
7421: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7425: LD_EXP 1
7429: PPUSH
7430: LD_STRING D3-JMM-3
7432: PPUSH
7433: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7437: LD_EXP 17
7441: PPUSH
7442: LD_STRING D3-Kurt-4
7444: PPUSH
7445: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7449: LD_EXP 1
7453: PPUSH
7454: LD_STRING D3-JMM-4
7456: PPUSH
7457: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7461: LD_EXP 17
7465: PPUSH
7466: LD_STRING D3-Kurt-5
7468: PPUSH
7469: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7473: LD_EXP 17
7477: PPUSH
7478: LD_STRING D3-Kurt-5b
7480: PPUSH
7481: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7485: LD_VAR 0 8
7489: PUSH
7490: LD_INT 120
7492: PUSH
7493: LD_INT 60
7495: PUSH
7496: EMPTY
7497: LIST
7498: LIST
7499: PUSH
7500: LD_EXP 19
7504: PUSH
7505: LD_INT 1
7507: PLUS
7508: ARRAY
7509: GREATEREQUAL
7510: PUSH
7511: LD_VAR 0 10
7515: PUSH
7516: LD_INT 120
7518: PUSH
7519: LD_INT 60
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PUSH
7526: LD_EXP 19
7530: PUSH
7531: LD_INT 1
7533: PLUS
7534: ARRAY
7535: GREATEREQUAL
7536: AND
7537: IFFALSE 7589
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7539: LD_ADDR_VAR 0 3
7543: PUSH
7544: LD_STRING Q2
7546: PUSH
7547: LD_STRING Q2K
7549: PUSH
7550: EMPTY
7551: LIST
7552: LIST
7553: PUSH
7554: LD_EXP 19
7558: PUSH
7559: LD_INT 1
7561: PLUS
7562: ARRAY
7563: PPUSH
7564: LD_INT 1
7566: PUSH
7567: LD_INT 2
7569: PUSH
7570: LD_INT 3
7572: PUSH
7573: LD_INT 4
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: LIST
7580: LIST
7581: PPUSH
7582: CALL_OW 98
7586: ST_TO_ADDR
7587: GO 7633
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7589: LD_ADDR_VAR 0 3
7593: PUSH
7594: LD_STRING Q2
7596: PUSH
7597: LD_STRING Q2K
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: PUSH
7604: LD_EXP 19
7608: PUSH
7609: LD_INT 1
7611: PLUS
7612: ARRAY
7613: PPUSH
7614: LD_INT 1
7616: PUSH
7617: LD_INT 3
7619: PUSH
7620: LD_INT 4
7622: PUSH
7623: EMPTY
7624: LIST
7625: LIST
7626: LIST
7627: PPUSH
7628: CALL_OW 98
7632: ST_TO_ADDR
// if dec1 = 1 then
7633: LD_VAR 0 3
7637: PUSH
7638: LD_INT 1
7640: EQUAL
7641: IFFALSE 7675
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7643: LD_EXP 1
7647: PPUSH
7648: LD_STRING D3Ka-JMM-1
7650: PPUSH
7651: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7655: LD_EXP 17
7659: PPUSH
7660: LD_STRING D3Ka-Kurt-1
7662: PPUSH
7663: CALL_OW 88
// warWithLegion = 1 ;
7667: LD_ADDR_EXP 23
7671: PUSH
7672: LD_INT 1
7674: ST_TO_ADDR
// end ; if dec1 = 2 then
7675: LD_VAR 0 3
7679: PUSH
7680: LD_INT 2
7682: EQUAL
7683: IFFALSE 7767
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7685: LD_EXP 1
7689: PPUSH
7690: LD_STRING D3Kb-JMM-1
7692: PPUSH
7693: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7697: LD_EXP 17
7701: PPUSH
7702: LD_STRING D3Kb-Kurt-1
7704: PPUSH
7705: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7709: LD_ADDR_VAR 0 11
7713: PUSH
7714: LD_INT 120
7716: PUSH
7717: LD_INT 60
7719: PUSH
7720: EMPTY
7721: LIST
7722: LIST
7723: PUSH
7724: LD_EXP 19
7728: PUSH
7729: LD_INT 1
7731: PLUS
7732: ARRAY
7733: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7734: LD_ADDR_VAR 0 12
7738: PUSH
7739: LD_INT 120
7741: PUSH
7742: LD_INT 60
7744: PUSH
7745: EMPTY
7746: LIST
7747: LIST
7748: PUSH
7749: LD_EXP 19
7753: PUSH
7754: LD_INT 1
7756: PLUS
7757: ARRAY
7758: ST_TO_ADDR
// payForNeutral := true ;
7759: LD_ADDR_VAR 0 13
7763: PUSH
7764: LD_INT 1
7766: ST_TO_ADDR
// end ; if dec1 = 3 then
7767: LD_VAR 0 3
7771: PUSH
7772: LD_INT 3
7774: EQUAL
7775: IFFALSE 8010
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7777: LD_EXP 1
7781: PPUSH
7782: LD_STRING D3Kc1-JMM-1
7784: PPUSH
7785: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7789: LD_EXP 17
7793: PPUSH
7794: LD_STRING D3Kc1-Kurt-1
7796: PPUSH
7797: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7801: LD_EXP 1
7805: PPUSH
7806: LD_STRING D3Kc1-JMM-2
7808: PPUSH
7809: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7813: LD_EXP 17
7817: PPUSH
7818: LD_STRING D3Kc1-Kurt-2
7820: PPUSH
7821: CALL_OW 88
// askSiberite = 1 ;
7825: LD_ADDR_EXP 25
7829: PUSH
7830: LD_INT 1
7832: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7833: LD_ADDR_VAR 0 4
7837: PUSH
7838: LD_STRING Q2b
7840: PPUSH
7841: LD_INT 1
7843: PUSH
7844: LD_INT 2
7846: PUSH
7847: LD_INT 3
7849: PUSH
7850: EMPTY
7851: LIST
7852: LIST
7853: LIST
7854: PPUSH
7855: CALL_OW 98
7859: ST_TO_ADDR
// if dec2 = 1 then
7860: LD_VAR 0 4
7864: PUSH
7865: LD_INT 1
7867: EQUAL
7868: IFFALSE 7902
// begin Say ( JMM , D4a-JMM-1 ) ;
7870: LD_EXP 1
7874: PPUSH
7875: LD_STRING D4a-JMM-1
7877: PPUSH
7878: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7882: LD_EXP 17
7886: PPUSH
7887: LD_STRING D4b-Kurt-1
7889: PPUSH
7890: CALL_OW 88
// warWithLegion = 1 ;
7894: LD_ADDR_EXP 23
7898: PUSH
7899: LD_INT 1
7901: ST_TO_ADDR
// end ; if dec2 = 2 then
7902: LD_VAR 0 4
7906: PUSH
7907: LD_INT 2
7909: EQUAL
7910: IFFALSE 7944
// begin Say ( JMM , D4b-JMM-1 ) ;
7912: LD_EXP 1
7916: PPUSH
7917: LD_STRING D4b-JMM-1
7919: PPUSH
7920: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7924: LD_EXP 17
7928: PPUSH
7929: LD_STRING D4b-Kurt-1
7931: PPUSH
7932: CALL_OW 88
// warWithLegion = 1 ;
7936: LD_ADDR_EXP 23
7940: PUSH
7941: LD_INT 1
7943: ST_TO_ADDR
// end ; if dec2 = 3 then
7944: LD_VAR 0 4
7948: PUSH
7949: LD_INT 3
7951: EQUAL
7952: IFFALSE 8010
// begin Say ( JMM , D4c-JMM-1 ) ;
7954: LD_EXP 1
7958: PPUSH
7959: LD_STRING D4c-JMM-1
7961: PPUSH
7962: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7966: LD_EXP 17
7970: PPUSH
7971: LD_STRING D4c-Kurt-1
7973: PPUSH
7974: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7978: LD_EXP 1
7982: PPUSH
7983: LD_STRING D4c-JMM-2
7985: PPUSH
7986: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7990: LD_EXP 17
7994: PPUSH
7995: LD_STRING D4c-Kurt-2
7997: PPUSH
7998: CALL_OW 88
// fakeInfo = 1 ;
8002: LD_ADDR_EXP 24
8006: PUSH
8007: LD_INT 1
8009: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8010: LD_VAR 0 3
8014: PUSH
8015: LD_INT 4
8017: EQUAL
8018: IFFALSE 9080
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8020: LD_EXP 1
8024: PPUSH
8025: LD_STRING D3Kd-JMM-1
8027: PPUSH
8028: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8032: LD_VAR 0 8
8036: PUSH
8037: LD_INT 200
8039: PUSH
8040: LD_INT 120
8042: PUSH
8043: EMPTY
8044: LIST
8045: LIST
8046: PUSH
8047: LD_EXP 19
8051: PUSH
8052: LD_INT 1
8054: PLUS
8055: ARRAY
8056: GREATEREQUAL
8057: PUSH
8058: LD_VAR 0 10
8062: PUSH
8063: LD_INT 200
8065: PUSH
8066: LD_INT 120
8068: PUSH
8069: EMPTY
8070: LIST
8071: LIST
8072: PUSH
8073: LD_EXP 19
8077: PUSH
8078: LD_INT 1
8080: PLUS
8081: ARRAY
8082: GREATEREQUAL
8083: AND
8084: IFFALSE 8136
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8086: LD_ADDR_VAR 0 4
8090: PUSH
8091: LD_STRING Q2a
8093: PUSH
8094: LD_STRING Q2aK
8096: PUSH
8097: EMPTY
8098: LIST
8099: LIST
8100: PUSH
8101: LD_EXP 19
8105: PUSH
8106: LD_INT 1
8108: PLUS
8109: ARRAY
8110: PPUSH
8111: LD_INT 1
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 3
8119: PUSH
8120: LD_INT 4
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: PPUSH
8129: CALL_OW 98
8133: ST_TO_ADDR
8134: GO 8300
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8136: LD_VAR 0 8
8140: PUSH
8141: LD_INT 120
8143: PUSH
8144: LD_INT 60
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: PUSH
8151: LD_EXP 19
8155: PUSH
8156: LD_INT 1
8158: PLUS
8159: ARRAY
8160: GREATEREQUAL
8161: PUSH
8162: LD_VAR 0 10
8166: PUSH
8167: LD_INT 120
8169: PUSH
8170: LD_INT 60
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: LD_EXP 19
8181: PUSH
8182: LD_INT 1
8184: PLUS
8185: ARRAY
8186: GREATEREQUAL
8187: AND
8188: IFFALSE 8236
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8190: LD_ADDR_VAR 0 4
8194: PUSH
8195: LD_STRING Q2a
8197: PUSH
8198: LD_STRING Q2aK
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: PUSH
8205: LD_EXP 19
8209: PUSH
8210: LD_INT 1
8212: PLUS
8213: ARRAY
8214: PPUSH
8215: LD_INT 1
8217: PUSH
8218: LD_INT 2
8220: PUSH
8221: LD_INT 4
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: PPUSH
8229: CALL_OW 98
8233: ST_TO_ADDR
8234: GO 8300
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8236: LD_STRING Q2d
8238: PUSH
8239: LD_STRING Q2dK
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: PUSH
8246: LD_EXP 19
8250: PUSH
8251: LD_INT 1
8253: PLUS
8254: ARRAY
8255: PPUSH
8256: CALL_OW 97
// dec2 := 0 ;
8260: LD_ADDR_VAR 0 4
8264: PUSH
8265: LD_INT 0
8267: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8268: LD_EXP 1
8272: PPUSH
8273: LD_STRING D3Kc1-JMM-1
8275: PPUSH
8276: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8280: LD_EXP 17
8284: PPUSH
8285: LD_STRING D3Kc2-Kurt-1
8287: PPUSH
8288: CALL_OW 88
// warWithLegion := 1 ;
8292: LD_ADDR_EXP 23
8296: PUSH
8297: LD_INT 1
8299: ST_TO_ADDR
// end ; if dec2 = 1 then
8300: LD_VAR 0 4
8304: PUSH
8305: LD_INT 1
8307: EQUAL
8308: IFFALSE 8342
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8310: LD_EXP 1
8314: PPUSH
8315: LD_STRING D5Ka-JMM-1
8317: PPUSH
8318: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8322: LD_EXP 17
8326: PPUSH
8327: LD_STRING D5Ka-Kurt-1
8329: PPUSH
8330: CALL_OW 88
// warWithLegion = 1 ;
8334: LD_ADDR_EXP 23
8338: PUSH
8339: LD_INT 1
8341: ST_TO_ADDR
// end ; if dec2 = 2 then
8342: LD_VAR 0 4
8346: PUSH
8347: LD_INT 2
8349: EQUAL
8350: IFFALSE 8434
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8352: LD_EXP 1
8356: PPUSH
8357: LD_STRING D3Kb-JMM-1
8359: PPUSH
8360: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8364: LD_EXP 17
8368: PPUSH
8369: LD_STRING D3Kb-Kurt-1
8371: PPUSH
8372: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8376: LD_ADDR_VAR 0 11
8380: PUSH
8381: LD_INT 120
8383: PUSH
8384: LD_INT 60
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PUSH
8391: LD_EXP 19
8395: PUSH
8396: LD_INT 1
8398: PLUS
8399: ARRAY
8400: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8401: LD_ADDR_VAR 0 12
8405: PUSH
8406: LD_INT 120
8408: PUSH
8409: LD_INT 60
8411: PUSH
8412: EMPTY
8413: LIST
8414: LIST
8415: PUSH
8416: LD_EXP 19
8420: PUSH
8421: LD_INT 1
8423: PLUS
8424: ARRAY
8425: ST_TO_ADDR
// payForNeutral := true ;
8426: LD_ADDR_VAR 0 13
8430: PUSH
8431: LD_INT 1
8433: ST_TO_ADDR
// end ; if dec2 = 3 then
8434: LD_VAR 0 4
8438: PUSH
8439: LD_INT 3
8441: EQUAL
8442: IFFALSE 8526
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8444: LD_EXP 1
8448: PPUSH
8449: LD_STRING D3Ke-JMM-1
8451: PPUSH
8452: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8456: LD_EXP 17
8460: PPUSH
8461: LD_STRING D3Ke-Kurt-1
8463: PPUSH
8464: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8468: LD_ADDR_VAR 0 11
8472: PUSH
8473: LD_INT 200
8475: PUSH
8476: LD_INT 120
8478: PUSH
8479: EMPTY
8480: LIST
8481: LIST
8482: PUSH
8483: LD_EXP 19
8487: PUSH
8488: LD_INT 1
8490: PLUS
8491: ARRAY
8492: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8493: LD_ADDR_VAR 0 12
8497: PUSH
8498: LD_INT 200
8500: PUSH
8501: LD_INT 120
8503: PUSH
8504: EMPTY
8505: LIST
8506: LIST
8507: PUSH
8508: LD_EXP 19
8512: PUSH
8513: LD_INT 1
8515: PLUS
8516: ARRAY
8517: ST_TO_ADDR
// payForHelp := true ;
8518: LD_ADDR_VAR 0 14
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// end ; if dec2 = 4 then
8526: LD_VAR 0 4
8530: PUSH
8531: LD_INT 4
8533: EQUAL
8534: IFFALSE 8769
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8536: LD_EXP 1
8540: PPUSH
8541: LD_STRING D3Kc1-JMM-1
8543: PPUSH
8544: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8548: LD_EXP 17
8552: PPUSH
8553: LD_STRING D3Kc1-Kurt-1
8555: PPUSH
8556: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8560: LD_EXP 1
8564: PPUSH
8565: LD_STRING D3Kc1-JMM-2
8567: PPUSH
8568: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8572: LD_EXP 17
8576: PPUSH
8577: LD_STRING D3Kc1-Kurt-2
8579: PPUSH
8580: CALL_OW 88
// askSiberite = 1 ;
8584: LD_ADDR_EXP 25
8588: PUSH
8589: LD_INT 1
8591: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8592: LD_ADDR_VAR 0 4
8596: PUSH
8597: LD_STRING Q2b
8599: PPUSH
8600: LD_INT 1
8602: PUSH
8603: LD_INT 2
8605: PUSH
8606: LD_INT 3
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: PPUSH
8614: CALL_OW 98
8618: ST_TO_ADDR
// if dec2 = 1 then
8619: LD_VAR 0 4
8623: PUSH
8624: LD_INT 1
8626: EQUAL
8627: IFFALSE 8661
// begin Say ( JMM , D4a-JMM-1 ) ;
8629: LD_EXP 1
8633: PPUSH
8634: LD_STRING D4a-JMM-1
8636: PPUSH
8637: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8641: LD_EXP 17
8645: PPUSH
8646: LD_STRING D4b-Kurt-1
8648: PPUSH
8649: CALL_OW 88
// warWithLegion = 1 ;
8653: LD_ADDR_EXP 23
8657: PUSH
8658: LD_INT 1
8660: ST_TO_ADDR
// end ; if dec2 = 2 then
8661: LD_VAR 0 4
8665: PUSH
8666: LD_INT 2
8668: EQUAL
8669: IFFALSE 8703
// begin Say ( JMM , D4b-JMM-1 ) ;
8671: LD_EXP 1
8675: PPUSH
8676: LD_STRING D4b-JMM-1
8678: PPUSH
8679: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8683: LD_EXP 17
8687: PPUSH
8688: LD_STRING D4b-Kurt-1
8690: PPUSH
8691: CALL_OW 88
// warWithLegion = 1 ;
8695: LD_ADDR_EXP 23
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// end ; if dec2 = 3 then
8703: LD_VAR 0 4
8707: PUSH
8708: LD_INT 3
8710: EQUAL
8711: IFFALSE 8769
// begin Say ( JMM , D4c-JMM-1 ) ;
8713: LD_EXP 1
8717: PPUSH
8718: LD_STRING D4c-JMM-1
8720: PPUSH
8721: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8725: LD_EXP 17
8729: PPUSH
8730: LD_STRING D4c-Kurt-1
8732: PPUSH
8733: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8737: LD_EXP 1
8741: PPUSH
8742: LD_STRING D4c-JMM-2
8744: PPUSH
8745: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8749: LD_EXP 17
8753: PPUSH
8754: LD_STRING D4c-Kurt-2
8756: PPUSH
8757: CALL_OW 88
// fakeInfo = 1 ;
8761: LD_ADDR_EXP 24
8765: PUSH
8766: LD_INT 1
8768: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8769: LD_VAR 0 13
8773: PUSH
8774: LD_VAR 0 14
8778: OR
8779: IFFALSE 9080
// begin for i in tmp do
8781: LD_ADDR_VAR 0 2
8785: PUSH
8786: LD_VAR 0 5
8790: PUSH
8791: FOR_IN
8792: IFFALSE 9078
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8794: LD_ADDR_VAR 0 6
8798: PUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 274
8808: PPUSH
8809: LD_INT 1
8811: PPUSH
8812: CALL_OW 275
8816: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8817: LD_ADDR_VAR 0 7
8821: PUSH
8822: LD_VAR 0 2
8826: PPUSH
8827: CALL_OW 274
8831: PPUSH
8832: LD_INT 3
8834: PPUSH
8835: CALL_OW 275
8839: ST_TO_ADDR
// if cr then
8840: LD_VAR 0 11
8844: IFFALSE 8958
// begin if tmp2 and tmp2 < cr then
8846: LD_VAR 0 6
8850: PUSH
8851: LD_VAR 0 6
8855: PUSH
8856: LD_VAR 0 11
8860: LESS
8861: AND
8862: IFFALSE 8910
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8864: LD_VAR 0 2
8868: PPUSH
8869: CALL_OW 274
8873: PPUSH
8874: LD_INT 1
8876: PPUSH
8877: LD_VAR 0 11
8881: PUSH
8882: LD_VAR 0 6
8886: MINUS
8887: PPUSH
8888: CALL_OW 277
// cr := cr - tmp2 ;
8892: LD_ADDR_VAR 0 11
8896: PUSH
8897: LD_VAR 0 11
8901: PUSH
8902: LD_VAR 0 6
8906: MINUS
8907: ST_TO_ADDR
// end else
8908: GO 8958
// if tmp2 > cr then
8910: LD_VAR 0 6
8914: PUSH
8915: LD_VAR 0 11
8919: GREATER
8920: IFFALSE 8958
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8922: LD_VAR 0 2
8926: PPUSH
8927: CALL_OW 274
8931: PPUSH
8932: LD_INT 1
8934: PPUSH
8935: LD_VAR 0 6
8939: PUSH
8940: LD_VAR 0 11
8944: MINUS
8945: PPUSH
8946: CALL_OW 277
// cr := 0 ;
8950: LD_ADDR_VAR 0 11
8954: PUSH
8955: LD_INT 0
8957: ST_TO_ADDR
// end ; end ; if sb then
8958: LD_VAR 0 12
8962: IFFALSE 9076
// begin if tmp3 and tmp3 < sb then
8964: LD_VAR 0 7
8968: PUSH
8969: LD_VAR 0 7
8973: PUSH
8974: LD_VAR 0 12
8978: LESS
8979: AND
8980: IFFALSE 9028
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8982: LD_VAR 0 2
8986: PPUSH
8987: CALL_OW 274
8991: PPUSH
8992: LD_INT 3
8994: PPUSH
8995: LD_VAR 0 12
8999: PUSH
9000: LD_VAR 0 7
9004: MINUS
9005: PPUSH
9006: CALL_OW 277
// sb := sb - tmp3 ;
9010: LD_ADDR_VAR 0 12
9014: PUSH
9015: LD_VAR 0 12
9019: PUSH
9020: LD_VAR 0 7
9024: MINUS
9025: ST_TO_ADDR
// end else
9026: GO 9076
// if tmp3 > sb then
9028: LD_VAR 0 7
9032: PUSH
9033: LD_VAR 0 12
9037: GREATER
9038: IFFALSE 9076
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9040: LD_VAR 0 2
9044: PPUSH
9045: CALL_OW 274
9049: PPUSH
9050: LD_INT 3
9052: PPUSH
9053: LD_VAR 0 7
9057: PUSH
9058: LD_VAR 0 12
9062: MINUS
9063: PPUSH
9064: CALL_OW 277
// sb := 0 ;
9068: LD_ADDR_VAR 0 12
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// end ; end ; end ;
9076: GO 8791
9078: POP
9079: POP
// end ; end ; DialogueOff ;
9080: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9084: LD_INT 167
9086: PPUSH
9087: LD_INT 121
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9097: LD_EXP 17
9101: PPUSH
9102: LD_EXP 18
9106: PPUSH
9107: CALL_OW 120
// wait ( 0 0$1 ) ;
9111: LD_INT 35
9113: PPUSH
9114: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9118: LD_EXP 18
9122: PPUSH
9123: LD_INT 4
9125: PPUSH
9126: CALL_OW 113
// wait ( 0 0$3 ) ;
9130: LD_INT 105
9132: PPUSH
9133: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9137: LD_EXP 17
9141: PPUSH
9142: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9146: LD_EXP 18
9150: PPUSH
9151: CALL_OW 64
// wait ( 0 0$3 ) ;
9155: LD_INT 105
9157: PPUSH
9158: CALL_OW 67
// if payForHelp then
9162: LD_VAR 0 14
9166: IFFALSE 9224
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9168: LD_INT 36
9170: PPUSH
9171: LD_INT 57
9173: PPUSH
9174: LD_INT 1
9176: PPUSH
9177: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9181: LD_INT 51
9183: PPUSH
9184: LD_INT 63
9186: PPUSH
9187: LD_INT 1
9189: PPUSH
9190: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9194: LD_INT 93
9196: PPUSH
9197: LD_INT 65
9199: PPUSH
9200: LD_INT 1
9202: PPUSH
9203: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9207: LD_INT 42
9209: PPUSH
9210: LD_INT 12
9212: PPUSH
9213: LD_INT 1
9215: PPUSH
9216: CALL_OW 244
// PrepareLegionForPlayer ;
9220: CALL 4754 0 0
// end ; end ;
9224: LD_VAR 0 1
9228: RET
// every 0 0$10 trigger warWithLegion = 1 do
9229: LD_EXP 23
9233: PUSH
9234: LD_INT 1
9236: EQUAL
9237: IFFALSE 9253
9239: GO 9241
9241: DISABLE
// begin wait ( 0 0$30 ) ;
9242: LD_INT 1050
9244: PPUSH
9245: CALL_OW 67
// PrepareAttackLegion ;
9249: CALL 5395 0 0
// end ;
9253: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9254: LD_INT 120
9256: PUSH
9257: LD_INT 17
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: PUSH
9264: LD_INT 52
9266: PUSH
9267: EMPTY
9268: LIST
9269: PUSH
9270: EMPTY
9271: LIST
9272: LIST
9273: PPUSH
9274: CALL_OW 69
9278: IFFALSE 9423
9280: GO 9282
9282: DISABLE
9283: LD_INT 0
9285: PPUSH
// begin enable ;
9286: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9287: LD_ADDR_VAR 0 1
9291: PUSH
9292: LD_INT 120
9294: PUSH
9295: LD_INT 17
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: PUSH
9302: LD_INT 52
9304: PUSH
9305: EMPTY
9306: LIST
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 69
9316: PUSH
9317: FOR_IN
9318: IFFALSE 9421
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9320: LD_VAR 0 1
9324: PPUSH
9325: CALL 79819 0 1
9329: PUSH
9330: LD_INT 4
9332: ARRAY
9333: PUSH
9334: LD_INT 0
9336: EQUAL
9337: PUSH
9338: LD_VAR 0 1
9342: PPUSH
9343: CALL_OW 255
9347: PUSH
9348: LD_INT 1
9350: EQUAL
9351: AND
9352: IFFALSE 9366
// SetSide ( i , 4 ) ;
9354: LD_VAR 0 1
9358: PPUSH
9359: LD_INT 4
9361: PPUSH
9362: CALL_OW 235
// if GetSide ( i ) = 4 then
9366: LD_VAR 0 1
9370: PPUSH
9371: CALL_OW 255
9375: PUSH
9376: LD_INT 4
9378: EQUAL
9379: IFFALSE 9419
// if not IsInArea ( i , PlayerSpawn ) then
9381: LD_VAR 0 1
9385: PPUSH
9386: LD_INT 4
9388: PPUSH
9389: CALL_OW 308
9393: NOT
9394: IFFALSE 9410
// ComMoveToArea ( i , PlayerSpawn ) else
9396: LD_VAR 0 1
9400: PPUSH
9401: LD_INT 4
9403: PPUSH
9404: CALL_OW 113
9408: GO 9419
// RemoveUnit ( i ) ;
9410: LD_VAR 0 1
9414: PPUSH
9415: CALL_OW 64
// end ;
9419: GO 9317
9421: POP
9422: POP
// end ;
9423: PPOPN 1
9425: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9426: LD_EXP 20
9430: PUSH
9431: LD_INT 1
9433: EQUAL
9434: IFFALSE 9873
9436: GO 9438
9438: DISABLE
9439: LD_INT 0
9441: PPUSH
9442: PPUSH
9443: PPUSH
// begin enable ;
9444: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9445: LD_ADDR_VAR 0 2
9449: PUSH
9450: LD_INT 12
9452: PPUSH
9453: LD_INT 22
9455: PUSH
9456: LD_INT 3
9458: PUSH
9459: EMPTY
9460: LIST
9461: LIST
9462: PUSH
9463: LD_INT 21
9465: PUSH
9466: LD_INT 2
9468: PUSH
9469: EMPTY
9470: LIST
9471: LIST
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PPUSH
9477: CALL_OW 70
9481: ST_TO_ADDR
// for i in enemyVehs do
9482: LD_ADDR_VAR 0 1
9486: PUSH
9487: LD_VAR 0 2
9491: PUSH
9492: FOR_IN
9493: IFFALSE 9871
// begin if See ( 1 , i ) then
9495: LD_INT 1
9497: PPUSH
9498: LD_VAR 0 1
9502: PPUSH
9503: CALL_OW 292
9507: IFFALSE 9869
// begin disable ;
9509: DISABLE
// DialogueOn ;
9510: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9514: LD_VAR 0 1
9518: PPUSH
9519: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9523: LD_INT 22
9525: PUSH
9526: LD_INT 1
9528: PUSH
9529: EMPTY
9530: LIST
9531: LIST
9532: PUSH
9533: LD_INT 26
9535: PUSH
9536: LD_INT 1
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: LD_INT 2
9545: PUSH
9546: LD_INT 25
9548: PUSH
9549: LD_INT 1
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: PUSH
9556: LD_INT 25
9558: PUSH
9559: LD_INT 2
9561: PUSH
9562: EMPTY
9563: LIST
9564: LIST
9565: PUSH
9566: LD_INT 25
9568: PUSH
9569: LD_INT 3
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: PUSH
9576: LD_INT 25
9578: PUSH
9579: LD_INT 4
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PUSH
9586: LD_INT 25
9588: PUSH
9589: LD_INT 5
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: LD_INT 25
9598: PUSH
9599: LD_INT 8
9601: PUSH
9602: EMPTY
9603: LIST
9604: LIST
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: PPUSH
9620: CALL_OW 69
9624: PPUSH
9625: LD_STRING DT1-Sol1-1
9627: PPUSH
9628: LD_STRING DT1-FSol1-1
9630: PPUSH
9631: CALL 12129 0 3
// dec = ShowQuery2 ;
9635: LD_ADDR_VAR 0 3
9639: PUSH
9640: CALL 12613 0 0
9644: ST_TO_ADDR
// if dec = 1 then
9645: LD_VAR 0 3
9649: PUSH
9650: LD_INT 1
9652: EQUAL
9653: IFFALSE 9759
// begin Say ( JMM , D2-JMM-1 ) ;
9655: LD_EXP 1
9659: PPUSH
9660: LD_STRING D2-JMM-1
9662: PPUSH
9663: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9667: LD_EXP 15
9671: PPUSH
9672: LD_STRING D2-Pow-1
9674: PPUSH
9675: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9679: LD_EXP 1
9683: PPUSH
9684: LD_STRING D2a-JMM-1
9686: PPUSH
9687: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9691: LD_EXP 15
9695: PPUSH
9696: LD_STRING D2a-Pow-1
9698: PPUSH
9699: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9703: LD_EXP 1
9707: PPUSH
9708: LD_STRING D2a-JMM-2
9710: PPUSH
9711: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9715: LD_EXP 15
9719: PPUSH
9720: LD_STRING D2a-Pow-2
9722: PPUSH
9723: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9727: LD_EXP 1
9731: PPUSH
9732: LD_STRING D2a-JMM-3
9734: PPUSH
9735: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9739: LD_EXP 15
9743: PPUSH
9744: LD_STRING D2a-Pow-3
9746: PPUSH
9747: CALL_OW 94
// secondPass = 2 ;
9751: LD_ADDR_EXP 20
9755: PUSH
9756: LD_INT 2
9758: ST_TO_ADDR
// end ; if dec = 2 then
9759: LD_VAR 0 3
9763: PUSH
9764: LD_INT 2
9766: EQUAL
9767: IFFALSE 9861
// begin Say ( JMM , D2-JMM-1 ) ;
9769: LD_EXP 1
9773: PPUSH
9774: LD_STRING D2-JMM-1
9776: PPUSH
9777: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9781: LD_EXP 15
9785: PPUSH
9786: LD_STRING D2-Pow-1
9788: PPUSH
9789: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9793: LD_EXP 1
9797: PPUSH
9798: LD_STRING D2b-JMM-1
9800: PPUSH
9801: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9805: LD_EXP 15
9809: PPUSH
9810: LD_STRING D2b-Pow-1
9812: PPUSH
9813: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9817: LD_EXP 1
9821: PPUSH
9822: LD_STRING D2c-JMM-1
9824: PPUSH
9825: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9829: LD_EXP 15
9833: PPUSH
9834: LD_STRING D2c-Pow-1
9836: PPUSH
9837: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9841: LD_EXP 1
9845: PPUSH
9846: LD_STRING D2c-JMM-2
9848: PPUSH
9849: CALL_OW 88
// secondPass = 2 ;
9853: LD_ADDR_EXP 20
9857: PUSH
9858: LD_INT 2
9860: ST_TO_ADDR
// end ; DialogueOff ;
9861: CALL_OW 7
// exit ;
9865: POP
9866: POP
9867: GO 9873
// end ; end ;
9869: GO 9492
9871: POP
9872: POP
// end ;
9873: PPOPN 3
9875: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
9876: LD_EXP 21
9880: PUSH
9881: LD_INT 1
9883: EQUAL
9884: PUSH
9885: LD_INT 11
9887: PPUSH
9888: LD_INT 22
9890: PUSH
9891: LD_INT 3
9893: PUSH
9894: EMPTY
9895: LIST
9896: LIST
9897: PPUSH
9898: CALL_OW 70
9902: AND
9903: IFFALSE 10384
9905: GO 9907
9907: DISABLE
9908: LD_INT 0
9910: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
9911: LD_ADDR_VAR 0 1
9915: PUSH
9916: LD_INT 11
9918: PPUSH
9919: LD_INT 22
9921: PUSH
9922: LD_INT 3
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PPUSH
9929: CALL_OW 70
9933: ST_TO_ADDR
// if not vehicles then
9934: LD_VAR 0 1
9938: NOT
9939: IFFALSE 9943
// exit ;
9941: GO 10384
// repeat wait ( 0 0$1 ) ;
9943: LD_INT 35
9945: PPUSH
9946: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
9950: LD_VAR 0 1
9954: PPUSH
9955: LD_INT 101
9957: PUSH
9958: LD_INT 1
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PPUSH
9965: CALL_OW 72
9969: IFFALSE 9943
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
9971: LD_VAR 0 1
9975: PPUSH
9976: LD_INT 101
9978: PUSH
9979: LD_INT 1
9981: PUSH
9982: EMPTY
9983: LIST
9984: LIST
9985: PPUSH
9986: CALL_OW 72
9990: PUSH
9991: LD_INT 1
9993: ARRAY
9994: PPUSH
9995: CALL_OW 87
// DialogueOn ;
9999: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10003: LD_INT 22
10005: PUSH
10006: LD_INT 1
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: PUSH
10013: LD_INT 26
10015: PUSH
10016: LD_INT 1
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 23
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: LD_INT 2
10035: PUSH
10036: LD_INT 25
10038: PUSH
10039: LD_INT 1
10041: PUSH
10042: EMPTY
10043: LIST
10044: LIST
10045: PUSH
10046: LD_INT 25
10048: PUSH
10049: LD_INT 2
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: PUSH
10056: LD_INT 25
10058: PUSH
10059: LD_INT 3
10061: PUSH
10062: EMPTY
10063: LIST
10064: LIST
10065: PUSH
10066: LD_INT 25
10068: PUSH
10069: LD_INT 4
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 25
10078: PUSH
10079: LD_INT 5
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 25
10088: PUSH
10089: LD_INT 8
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: PUSH
10105: EMPTY
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: PPUSH
10111: CALL_OW 69
10115: PPUSH
10116: LD_STRING DT1-Sol1-1
10118: PPUSH
10119: LD_STRING DT1-FSol1-1
10121: PPUSH
10122: CALL 12129 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10126: LD_EXP 1
10130: PPUSH
10131: LD_STRING DT1-JMM-1
10133: PPUSH
10134: CALL_OW 88
// DialogueOff ;
10138: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10142: LD_INT 175
10144: PPUSH
10145: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10149: LD_INT 11
10151: PPUSH
10152: LD_INT 22
10154: PUSH
10155: LD_INT 3
10157: PUSH
10158: EMPTY
10159: LIST
10160: LIST
10161: PUSH
10162: LD_INT 50
10164: PUSH
10165: EMPTY
10166: LIST
10167: PUSH
10168: LD_INT 2
10170: PUSH
10171: LD_INT 21
10173: PUSH
10174: LD_INT 2
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 21
10183: PUSH
10184: LD_INT 1
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: PUSH
10191: EMPTY
10192: LIST
10193: LIST
10194: LIST
10195: PUSH
10196: EMPTY
10197: LIST
10198: LIST
10199: LIST
10200: PPUSH
10201: CALL_OW 70
10205: PUSH
10206: LD_INT 0
10208: EQUAL
10209: PUSH
10210: LD_EXP 22
10214: PUSH
10215: LD_INT 2
10217: GREATER
10218: AND
10219: IFFALSE 10142
// DialogueOn ;
10221: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10225: LD_EXP 1
10229: PPUSH
10230: LD_STRING DT1a-JMM-1
10232: PPUSH
10233: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10237: LD_INT 22
10239: PUSH
10240: LD_INT 1
10242: PUSH
10243: EMPTY
10244: LIST
10245: LIST
10246: PUSH
10247: LD_INT 26
10249: PUSH
10250: LD_INT 1
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 23
10259: PUSH
10260: LD_INT 1
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 2
10269: PUSH
10270: LD_INT 25
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 25
10282: PUSH
10283: LD_INT 2
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 25
10292: PUSH
10293: LD_INT 3
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: PUSH
10300: LD_INT 25
10302: PUSH
10303: LD_INT 4
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PUSH
10310: LD_INT 25
10312: PUSH
10313: LD_INT 5
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: PUSH
10320: LD_INT 25
10322: PUSH
10323: LD_INT 8
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: PPUSH
10345: CALL_OW 69
10349: PPUSH
10350: LD_STRING DT1a-Sol1-1
10352: PPUSH
10353: LD_STRING DT1a-FSol1-1
10355: PPUSH
10356: CALL 12129 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10360: LD_EXP 1
10364: PPUSH
10365: LD_STRING DT1a-JMM-2
10367: PPUSH
10368: CALL_OW 88
// DialogueOff ;
10372: CALL_OW 7
// vehicleTeleported := 2 ;
10376: LD_ADDR_EXP 21
10380: PUSH
10381: LD_INT 2
10383: ST_TO_ADDR
// end ;
10384: PPOPN 1
10386: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10387: LD_EXP 21
10391: PUSH
10392: LD_INT 3
10394: EQUAL
10395: PUSH
10396: LD_INT 11
10398: PPUSH
10399: LD_INT 22
10401: PUSH
10402: LD_INT 3
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: LD_INT 101
10411: PUSH
10412: LD_INT 1
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: EMPTY
10420: LIST
10421: LIST
10422: PPUSH
10423: CALL_OW 70
10427: AND
10428: IFFALSE 10713
10430: GO 10432
10432: DISABLE
10433: LD_INT 0
10435: PPUSH
10436: PPUSH
10437: PPUSH
// begin wait ( 0 0$0.3 ) ;
10438: LD_INT 10
10440: PPUSH
10441: CALL_OW 67
// DialogueOn ;
10445: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10449: LD_ADDR_VAR 0 3
10453: PUSH
10454: LD_INT 22
10456: PUSH
10457: LD_INT 1
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: LD_INT 23
10466: PUSH
10467: LD_INT 1
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 26
10476: PUSH
10477: LD_INT 1
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PUSH
10484: LD_INT 2
10486: PUSH
10487: LD_INT 25
10489: PUSH
10490: LD_INT 1
10492: PUSH
10493: EMPTY
10494: LIST
10495: LIST
10496: PUSH
10497: LD_INT 25
10499: PUSH
10500: LD_INT 2
10502: PUSH
10503: EMPTY
10504: LIST
10505: LIST
10506: PUSH
10507: LD_INT 25
10509: PUSH
10510: LD_INT 3
10512: PUSH
10513: EMPTY
10514: LIST
10515: LIST
10516: PUSH
10517: LD_INT 25
10519: PUSH
10520: LD_INT 4
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: PUSH
10527: LD_INT 25
10529: PUSH
10530: LD_INT 5
10532: PUSH
10533: EMPTY
10534: LIST
10535: LIST
10536: PUSH
10537: LD_INT 25
10539: PUSH
10540: LD_INT 8
10542: PUSH
10543: EMPTY
10544: LIST
10545: LIST
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: PUSH
10556: EMPTY
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: PPUSH
10562: CALL_OW 69
10566: PPUSH
10567: LD_STRING DT2-Sol1-1
10569: PPUSH
10570: LD_STRING DT2-FSol1-1
10572: PPUSH
10573: CALL 12129 0 3
10577: ST_TO_ADDR
// DialogueOff ;
10578: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10582: LD_INT 175
10584: PPUSH
10585: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10589: LD_INT 11
10591: PPUSH
10592: LD_INT 22
10594: PUSH
10595: LD_INT 3
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: LD_INT 50
10604: PUSH
10605: EMPTY
10606: LIST
10607: PUSH
10608: EMPTY
10609: LIST
10610: LIST
10611: PPUSH
10612: CALL_OW 70
10616: NOT
10617: IFFALSE 10582
// wait ( 0 0$2 ) ;
10619: LD_INT 70
10621: PPUSH
10622: CALL_OW 67
// vehicleTeleported := 4 ;
10626: LD_ADDR_EXP 21
10630: PUSH
10631: LD_INT 4
10633: ST_TO_ADDR
// DialogueOn ;
10634: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10638: LD_EXP 1
10642: PPUSH
10643: LD_STRING DT2a-JMM-1
10645: PPUSH
10646: CALL_OW 88
// if speaker then
10650: LD_VAR 0 3
10654: IFFALSE 10697
// if GetSex ( speaker ) = 1 then
10656: LD_VAR 0 3
10660: PPUSH
10661: CALL_OW 258
10665: PUSH
10666: LD_INT 1
10668: EQUAL
10669: IFFALSE 10685
// Say ( speaker , DT2a-Sol1-1 ) else
10671: LD_VAR 0 3
10675: PPUSH
10676: LD_STRING DT2a-Sol1-1
10678: PPUSH
10679: CALL_OW 88
10683: GO 10697
// Say ( speaker , DT2a-FSol1-1 ) ;
10685: LD_VAR 0 3
10689: PPUSH
10690: LD_STRING DT2a-FSol1-1
10692: PPUSH
10693: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10697: LD_EXP 3
10701: PPUSH
10702: LD_STRING DT2a-Don-1
10704: PPUSH
10705: CALL_OW 88
// DialogueOff ;
10709: CALL_OW 7
// end ;
10713: PPOPN 3
10715: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10716: LD_INT 1
10718: PPUSH
10719: LD_INT 45
10721: PPUSH
10722: LD_INT 74
10724: PPUSH
10725: CALL_OW 293
10729: IFFALSE 10904
10731: GO 10733
10733: DISABLE
// begin DialogueOn ;
10734: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10738: LD_INT 36
10740: PPUSH
10741: LD_INT 55
10743: PPUSH
10744: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10748: LD_INT 22
10750: PUSH
10751: LD_INT 1
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 23
10760: PUSH
10761: LD_INT 1
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 26
10770: PUSH
10771: LD_INT 1
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 2
10780: PUSH
10781: LD_INT 25
10783: PUSH
10784: LD_INT 1
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 25
10793: PUSH
10794: LD_INT 2
10796: PUSH
10797: EMPTY
10798: LIST
10799: LIST
10800: PUSH
10801: LD_INT 25
10803: PUSH
10804: LD_INT 3
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: PUSH
10811: LD_INT 25
10813: PUSH
10814: LD_INT 4
10816: PUSH
10817: EMPTY
10818: LIST
10819: LIST
10820: PUSH
10821: LD_INT 25
10823: PUSH
10824: LD_INT 5
10826: PUSH
10827: EMPTY
10828: LIST
10829: LIST
10830: PUSH
10831: LD_INT 25
10833: PUSH
10834: LD_INT 8
10836: PUSH
10837: EMPTY
10838: LIST
10839: LIST
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: PUSH
10850: EMPTY
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: PPUSH
10856: CALL_OW 69
10860: PPUSH
10861: LD_STRING D5-Sol1-1
10863: PPUSH
10864: LD_STRING D5-FSol1-
10866: PPUSH
10867: CALL 12129 0 3
// if warWithLegion and IsOk ( Donaldson ) then
10871: LD_EXP 23
10875: PUSH
10876: LD_EXP 3
10880: PPUSH
10881: CALL_OW 302
10885: AND
10886: IFFALSE 10900
// Say ( Donaldson , D5-Don-1 ) ;
10888: LD_EXP 3
10892: PPUSH
10893: LD_STRING D5-Don-1
10895: PPUSH
10896: CALL_OW 88
// DialogueOff ;
10900: CALL_OW 7
// end ;
10904: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
10905: LD_INT 1
10907: PPUSH
10908: LD_INT 10
10910: PPUSH
10911: CALL_OW 292
10915: PUSH
10916: LD_INT 1
10918: PPUSH
10919: LD_INT 137
10921: PPUSH
10922: CALL_OW 292
10926: OR
10927: IFFALSE 11082
10929: GO 10931
10931: DISABLE
// begin DialogueOn ;
10932: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
10936: LD_INT 22
10938: PUSH
10939: LD_INT 1
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 23
10948: PUSH
10949: LD_INT 1
10951: PUSH
10952: EMPTY
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 26
10958: PUSH
10959: LD_INT 1
10961: PUSH
10962: EMPTY
10963: LIST
10964: LIST
10965: PUSH
10966: LD_INT 2
10968: PUSH
10969: LD_INT 25
10971: PUSH
10972: LD_INT 1
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 25
10981: PUSH
10982: LD_INT 2
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 25
10991: PUSH
10992: LD_INT 3
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 25
11001: PUSH
11002: LD_INT 4
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: LD_INT 25
11011: PUSH
11012: LD_INT 5
11014: PUSH
11015: EMPTY
11016: LIST
11017: LIST
11018: PUSH
11019: LD_INT 25
11021: PUSH
11022: LD_INT 8
11024: PUSH
11025: EMPTY
11026: LIST
11027: LIST
11028: PUSH
11029: EMPTY
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: PPUSH
11044: CALL_OW 69
11048: PPUSH
11049: LD_STRING DT3-Sol1-1
11051: PPUSH
11052: LD_STRING DT3-FSol1-1
11054: PPUSH
11055: CALL 12129 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11059: LD_EXP 1
11063: PPUSH
11064: LD_STRING DT3-JMM-1
11066: PPUSH
11067: CALL_OW 88
// DialogueOff ;
11071: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11075: LD_STRING M2
11077: PPUSH
11078: CALL_OW 337
// end ;
11082: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11083: LD_EXP 35
11087: PUSH
11088: LD_INT 0
11090: EQUAL
11091: PUSH
11092: LD_INT 10
11094: PPUSH
11095: LD_INT 22
11097: PUSH
11098: LD_INT 1
11100: PUSH
11101: EMPTY
11102: LIST
11103: LIST
11104: PPUSH
11105: CALL_OW 70
11109: PUSH
11110: LD_INT 10
11112: PPUSH
11113: LD_INT 22
11115: PUSH
11116: LD_INT 3
11118: PUSH
11119: EMPTY
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 3
11125: PUSH
11126: LD_INT 24
11128: PUSH
11129: LD_INT 800
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 21
11142: PUSH
11143: LD_INT 2
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 58
11152: PUSH
11153: EMPTY
11154: LIST
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: PPUSH
11162: CALL_OW 70
11166: OR
11167: AND
11168: IFFALSE 11181
11170: GO 11172
11172: DISABLE
// ruEscape := 1 ;
11173: LD_ADDR_EXP 35
11177: PUSH
11178: LD_INT 1
11180: ST_TO_ADDR
11181: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11182: LD_INT 3
11184: PPUSH
11185: CALL_OW 303
11189: PUSH
11190: LD_INT 4
11192: PPUSH
11193: CALL_OW 303
11197: OR
11198: PUSH
11199: LD_EXP 35
11203: PUSH
11204: LD_INT 1
11206: EQUAL
11207: OR
11208: IFFALSE 11797
11210: GO 11212
11212: DISABLE
11213: LD_INT 0
11215: PPUSH
11216: PPUSH
11217: PPUSH
// begin ruAI := 0 ;
11218: LD_ADDR_EXP 34
11222: PUSH
11223: LD_INT 0
11225: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11226: LD_EXP 27
11230: PPUSH
11231: CALL_OW 122
// wait ( 0 0$1 ) ;
11235: LD_INT 35
11237: PPUSH
11238: CALL_OW 67
// DialogueOn ;
11242: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11246: LD_INT 75
11248: PPUSH
11249: LD_INT 21
11251: PPUSH
11252: LD_INT 1
11254: PPUSH
11255: LD_INT 12
11257: PPUSH
11258: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11262: LD_INT 75
11264: PPUSH
11265: LD_INT 21
11267: PPUSH
11268: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11272: LD_INT 10
11274: PPUSH
11275: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11279: LD_EXP 1
11283: PPUSH
11284: LD_STRING D6-JMM-1
11286: PPUSH
11287: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11291: LD_INT 75
11293: PPUSH
11294: LD_INT 21
11296: PPUSH
11297: LD_INT 1
11299: PPUSH
11300: CALL_OW 331
// DialogueOff ;
11304: CALL_OW 7
// for i in RuScientists do
11308: LD_ADDR_VAR 0 1
11312: PUSH
11313: LD_EXP 27
11317: PUSH
11318: FOR_IN
11319: IFFALSE 11355
// begin SetSide ( i , 6 ) ;
11321: LD_VAR 0 1
11325: PPUSH
11326: LD_INT 6
11328: PPUSH
11329: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11333: LD_VAR 0 1
11337: PPUSH
11338: LD_INT 1
11340: PPUSH
11341: LD_INT 3
11343: PPUSH
11344: CALL_OW 12
11348: PPUSH
11349: CALL_OW 109
// end ;
11353: GO 11318
11355: POP
11356: POP
// repeat wait ( 0 0$1 ) ;
11357: LD_INT 35
11359: PPUSH
11360: CALL_OW 67
// for i in RuScientists do
11364: LD_ADDR_VAR 0 1
11368: PUSH
11369: LD_EXP 27
11373: PUSH
11374: FOR_IN
11375: IFFALSE 11788
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11377: LD_ADDR_VAR 0 3
11381: PUSH
11382: LD_INT 22
11384: PUSH
11385: LD_INT 3
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 91
11394: PUSH
11395: LD_VAR 0 1
11399: PUSH
11400: LD_INT 10
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 21
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: PUSH
11418: LD_INT 58
11420: PUSH
11421: EMPTY
11422: LIST
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: PPUSH
11430: CALL_OW 69
11434: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11435: LD_VAR 0 3
11439: PUSH
11440: LD_VAR 0 1
11444: PPUSH
11445: CALL_OW 310
11449: NOT
11450: AND
11451: IFFALSE 11479
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11453: LD_VAR 0 1
11457: PPUSH
11458: LD_VAR 0 3
11462: PPUSH
11463: LD_VAR 0 1
11467: PPUSH
11468: CALL_OW 74
11472: PPUSH
11473: CALL_OW 120
// continue ;
11477: GO 11374
// end ; if IsInUnit ( i ) then
11479: LD_VAR 0 1
11483: PPUSH
11484: CALL_OW 310
11488: IFFALSE 11507
// unit := IsInUnit ( i ) else
11490: LD_ADDR_VAR 0 2
11494: PUSH
11495: LD_VAR 0 1
11499: PPUSH
11500: CALL_OW 310
11504: ST_TO_ADDR
11505: GO 11517
// unit := i ;
11507: LD_ADDR_VAR 0 2
11511: PUSH
11512: LD_VAR 0 1
11516: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11517: LD_VAR 0 1
11521: PPUSH
11522: CALL_OW 110
11526: PUSH
11527: LD_INT 1
11529: DOUBLE
11530: EQUAL
11531: IFTRUE 11535
11533: GO 11594
11535: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11536: LD_VAR 0 2
11540: PPUSH
11541: LD_INT 137
11543: PPUSH
11544: CALL_OW 296
11548: PUSH
11549: LD_INT 13
11551: LESS
11552: PUSH
11553: LD_INT 137
11555: PPUSH
11556: CALL_OW 302
11560: AND
11561: IFFALSE 11577
// ComEnterUnit ( unit , rutp ) else
11563: LD_VAR 0 2
11567: PPUSH
11568: LD_INT 137
11570: PPUSH
11571: CALL_OW 120
11575: GO 11592
// ComMoveXY ( unit , 16 , 28 ) ;
11577: LD_VAR 0 2
11581: PPUSH
11582: LD_INT 16
11584: PPUSH
11585: LD_INT 28
11587: PPUSH
11588: CALL_OW 111
// end ; 2 :
11592: GO 11786
11594: LD_INT 2
11596: DOUBLE
11597: EQUAL
11598: IFTRUE 11602
11600: GO 11620
11602: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11603: LD_VAR 0 2
11607: PPUSH
11608: LD_INT 97
11610: PPUSH
11611: LD_INT 2
11613: PPUSH
11614: CALL_OW 111
11618: GO 11786
11620: LD_INT 3
11622: DOUBLE
11623: EQUAL
11624: IFTRUE 11628
11626: GO 11687
11628: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11629: LD_VAR 0 2
11633: PPUSH
11634: LD_INT 137
11636: PPUSH
11637: CALL_OW 296
11641: PUSH
11642: LD_INT 13
11644: LESS
11645: PUSH
11646: LD_INT 137
11648: PPUSH
11649: CALL_OW 302
11653: AND
11654: IFFALSE 11670
// ComEnterUnit ( unit , rutp ) else
11656: LD_VAR 0 2
11660: PPUSH
11661: LD_INT 137
11663: PPUSH
11664: CALL_OW 120
11668: GO 11685
// ComMoveXY ( unit , 128 , 155 ) ;
11670: LD_VAR 0 2
11674: PPUSH
11675: LD_INT 128
11677: PPUSH
11678: LD_INT 155
11680: PPUSH
11681: CALL_OW 111
// end ; 11 :
11685: GO 11786
11687: LD_INT 11
11689: DOUBLE
11690: EQUAL
11691: IFTRUE 11695
11693: GO 11713
11695: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11696: LD_VAR 0 2
11700: PPUSH
11701: LD_INT 16
11703: PPUSH
11704: LD_INT 28
11706: PPUSH
11707: CALL_OW 111
11711: GO 11786
11713: LD_INT 13
11715: DOUBLE
11716: EQUAL
11717: IFTRUE 11721
11719: GO 11759
11721: POP
// begin if IsOk ( ruteleprt ) then
11722: LD_INT 10
11724: PPUSH
11725: CALL_OW 302
11729: IFFALSE 11745
// ComEnterUnit ( unit , ruteleprt ) else
11731: LD_VAR 0 2
11735: PPUSH
11736: LD_INT 10
11738: PPUSH
11739: CALL_OW 120
11743: GO 11757
// SetTag ( unit , 23 ) ;
11745: LD_VAR 0 2
11749: PPUSH
11750: LD_INT 23
11752: PPUSH
11753: CALL_OW 109
// end ; 23 :
11757: GO 11786
11759: LD_INT 23
11761: DOUBLE
11762: EQUAL
11763: IFTRUE 11767
11765: GO 11785
11767: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11768: LD_VAR 0 2
11772: PPUSH
11773: LD_INT 128
11775: PPUSH
11776: LD_INT 155
11778: PPUSH
11779: CALL_OW 111
11783: GO 11786
11785: POP
// end ;
11786: GO 11374
11788: POP
11789: POP
// until not RuScientists ;
11790: LD_EXP 27
11794: NOT
11795: IFFALSE 11357
// end ;
11797: PPOPN 3
11799: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11800: LD_EXP 34
11804: PUSH
11805: LD_INT 0
11807: EQUAL
11808: PUSH
11809: LD_EXP 27
11813: AND
11814: PUSH
11815: LD_INT 22
11817: PUSH
11818: LD_INT 6
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 2
11827: PUSH
11828: LD_INT 95
11830: PUSH
11831: LD_INT 13
11833: PUSH
11834: EMPTY
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 95
11840: PUSH
11841: LD_INT 14
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PUSH
11848: LD_INT 95
11850: PUSH
11851: LD_INT 25
11853: PUSH
11854: EMPTY
11855: LIST
11856: LIST
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: PUSH
11864: EMPTY
11865: LIST
11866: LIST
11867: PPUSH
11868: CALL_OW 69
11872: AND
11873: IFFALSE 12086
11875: GO 11877
11877: DISABLE
11878: LD_INT 0
11880: PPUSH
11881: PPUSH
11882: PPUSH
11883: PPUSH
// begin enable ;
11884: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
11885: LD_ADDR_VAR 0 1
11889: PUSH
11890: LD_INT 22
11892: PUSH
11893: LD_INT 6
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 2
11902: PUSH
11903: LD_INT 95
11905: PUSH
11906: LD_INT 13
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: PUSH
11913: LD_INT 95
11915: PUSH
11916: LD_INT 14
11918: PUSH
11919: EMPTY
11920: LIST
11921: LIST
11922: PUSH
11923: LD_INT 95
11925: PUSH
11926: LD_INT 25
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: PUSH
11939: EMPTY
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 69
11947: PUSH
11948: FOR_IN
11949: IFFALSE 12084
// begin if i in RuScientists then
11951: LD_VAR 0 1
11955: PUSH
11956: LD_EXP 27
11960: IN
11961: IFFALSE 11990
// begin RuScientists = RuScientists diff i ;
11963: LD_ADDR_EXP 27
11967: PUSH
11968: LD_EXP 27
11972: PUSH
11973: LD_VAR 0 1
11977: DIFF
11978: ST_TO_ADDR
// RemoveUnit ( i ) ;
11979: LD_VAR 0 1
11983: PPUSH
11984: CALL_OW 64
// continue ;
11988: GO 11948
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
11990: LD_VAR 0 1
11994: PUSH
11995: LD_INT 22
11997: PUSH
11998: LD_INT 6
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PUSH
12005: LD_INT 33
12007: PUSH
12008: LD_INT 1
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: PUSH
12015: EMPTY
12016: LIST
12017: LIST
12018: PPUSH
12019: CALL_OW 69
12023: IN
12024: IFFALSE 12082
// begin if IsDrivenBy ( i ) in RuScientists then
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 311
12035: PUSH
12036: LD_EXP 27
12040: IN
12041: IFFALSE 12059
// RuScientists = RuScientists diff i ;
12043: LD_ADDR_EXP 27
12047: PUSH
12048: LD_EXP 27
12052: PUSH
12053: LD_VAR 0 1
12057: DIFF
12058: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12059: LD_VAR 0 1
12063: PPUSH
12064: CALL_OW 311
12068: PPUSH
12069: CALL_OW 64
// RemoveUnit ( i ) ;
12073: LD_VAR 0 1
12077: PPUSH
12078: CALL_OW 64
// end ; end ;
12082: GO 11948
12084: POP
12085: POP
// end ; end_of_file
12086: PPOPN 4
12088: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12089: LD_INT 0
12091: PPUSH
12092: PPUSH
// for i in charactersList do
12093: LD_ADDR_VAR 0 4
12097: PUSH
12098: LD_VAR 0 1
12102: PUSH
12103: FOR_IN
12104: IFFALSE 12122
// SaveCharacters ( i , ident ) ;
12106: LD_VAR 0 4
12110: PPUSH
12111: LD_VAR 0 2
12115: PPUSH
12116: CALL_OW 38
12120: GO 12103
12122: POP
12123: POP
// end ;
12124: LD_VAR 0 3
12128: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12129: LD_INT 0
12131: PPUSH
12132: PPUSH
12133: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12134: LD_ADDR_VAR 0 1
12138: PUSH
12139: LD_VAR 0 1
12143: PUSH
12144: LD_EXP 1
12148: PUSH
12149: LD_EXP 7
12153: PUSH
12154: LD_EXP 3
12158: PUSH
12159: LD_EXP 4
12163: PUSH
12164: LD_EXP 5
12168: PUSH
12169: LD_EXP 2
12173: PUSH
12174: LD_EXP 12
12178: PUSH
12179: LD_EXP 13
12183: PUSH
12184: LD_EXP 9
12188: PUSH
12189: LD_EXP 11
12193: PUSH
12194: LD_EXP 6
12198: PUSH
12199: LD_EXP 8
12203: PUSH
12204: LD_EXP 10
12208: PUSH
12209: LD_EXP 15
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: DIFF
12230: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12231: LD_ADDR_VAR 0 6
12235: PUSH
12236: LD_VAR 0 1
12240: PUSH
12241: LD_INT 1
12243: PPUSH
12244: LD_VAR 0 1
12248: PPUSH
12249: CALL_OW 12
12253: ARRAY
12254: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12255: LD_VAR 0 6
12259: PPUSH
12260: CALL_OW 258
12264: PUSH
12265: LD_INT 1
12267: EQUAL
12268: IFFALSE 12286
// Say ( speaker , dialogMID ) else
12270: LD_VAR 0 6
12274: PPUSH
12275: LD_VAR 0 2
12279: PPUSH
12280: CALL_OW 88
12284: GO 12300
// Say ( speaker , dialogFID ) ;
12286: LD_VAR 0 6
12290: PPUSH
12291: LD_VAR 0 3
12295: PPUSH
12296: CALL_OW 88
// result := speaker ;
12300: LD_ADDR_VAR 0 4
12304: PUSH
12305: LD_VAR 0 6
12309: ST_TO_ADDR
// end ;
12310: LD_VAR 0 4
12314: RET
// export function PrepareDifficulty ; var tmp ; begin
12315: LD_INT 0
12317: PPUSH
12318: PPUSH
// if Difficulty = 1 then
12319: LD_OWVAR 67
12323: PUSH
12324: LD_INT 1
12326: EQUAL
12327: IFFALSE 12347
// begin RuSolMinLevel = 8 ;
12329: LD_ADDR_EXP 29
12333: PUSH
12334: LD_INT 8
12336: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12337: LD_ADDR_EXP 30
12341: PUSH
12342: LD_INT 10
12344: ST_TO_ADDR
// end else
12345: GO 12587
// if Difficulty = 2 then
12347: LD_OWVAR 67
12351: PUSH
12352: LD_INT 2
12354: EQUAL
12355: IFFALSE 12451
// begin RuSolMinLevel = 9 ;
12357: LD_ADDR_EXP 29
12361: PUSH
12362: LD_INT 9
12364: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12365: LD_ADDR_EXP 30
12369: PUSH
12370: LD_INT 10
12372: ST_TO_ADDR
// uc_nation = 3 ;
12373: LD_ADDR_OWVAR 21
12377: PUSH
12378: LD_INT 3
12380: ST_TO_ADDR
// uc_side = 3 ;
12381: LD_ADDR_OWVAR 20
12385: PUSH
12386: LD_INT 3
12388: ST_TO_ADDR
// bc_level = 10 ;
12389: LD_ADDR_OWVAR 43
12393: PUSH
12394: LD_INT 10
12396: ST_TO_ADDR
// bc_type = b_turret ;
12397: LD_ADDR_OWVAR 42
12401: PUSH
12402: LD_INT 33
12404: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12405: LD_ADDR_VAR 0 2
12409: PUSH
12410: LD_INT 86
12412: PPUSH
12413: LD_INT 34
12415: PPUSH
12416: LD_INT 2
12418: PPUSH
12419: CALL_OW 47
12423: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12424: LD_VAR 0 2
12428: PPUSH
12429: LD_INT 49
12431: PPUSH
12432: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12436: LD_INT 64
12438: PPUSH
12439: LD_INT 3
12441: PPUSH
12442: LD_INT 1
12444: PPUSH
12445: CALL_OW 322
// end else
12449: GO 12587
// begin RuSolMinLevel = 10 ;
12451: LD_ADDR_EXP 29
12455: PUSH
12456: LD_INT 10
12458: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12459: LD_ADDR_EXP 30
12463: PUSH
12464: LD_INT 10
12466: ST_TO_ADDR
// uc_nation = 3 ;
12467: LD_ADDR_OWVAR 21
12471: PUSH
12472: LD_INT 3
12474: ST_TO_ADDR
// uc_side = 3 ;
12475: LD_ADDR_OWVAR 20
12479: PUSH
12480: LD_INT 3
12482: ST_TO_ADDR
// bc_level = 10 ;
12483: LD_ADDR_OWVAR 43
12487: PUSH
12488: LD_INT 10
12490: ST_TO_ADDR
// bc_type = b_turret ;
12491: LD_ADDR_OWVAR 42
12495: PUSH
12496: LD_INT 33
12498: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12499: LD_ADDR_VAR 0 2
12503: PUSH
12504: LD_INT 86
12506: PPUSH
12507: LD_INT 34
12509: PPUSH
12510: LD_INT 2
12512: PPUSH
12513: CALL_OW 47
12517: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12518: LD_VAR 0 2
12522: PPUSH
12523: LD_INT 49
12525: PPUSH
12526: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12530: LD_ADDR_VAR 0 2
12534: PUSH
12535: LD_INT 93
12537: PPUSH
12538: LD_INT 31
12540: PPUSH
12541: LD_INT 2
12543: PPUSH
12544: CALL_OW 47
12548: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12549: LD_VAR 0 2
12553: PPUSH
12554: LD_INT 49
12556: PPUSH
12557: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12561: LD_INT 64
12563: PPUSH
12564: LD_INT 3
12566: PPUSH
12567: LD_INT 1
12569: PPUSH
12570: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12574: LD_INT 65
12576: PPUSH
12577: LD_INT 3
12579: PPUSH
12580: LD_INT 1
12582: PPUSH
12583: CALL_OW 322
// end ; end ;
12587: LD_VAR 0 1
12591: RET
// export function ShowQuery1 ; begin
12592: LD_INT 0
12594: PPUSH
// result := Query ( Q1 ) ;
12595: LD_ADDR_VAR 0 1
12599: PUSH
12600: LD_STRING Q1
12602: PPUSH
12603: CALL_OW 97
12607: ST_TO_ADDR
// end ;
12608: LD_VAR 0 1
12612: RET
// export function ShowQuery2 ; begin
12613: LD_INT 0
12615: PPUSH
// result := Query ( Q1a ) ;
12616: LD_ADDR_VAR 0 1
12620: PUSH
12621: LD_STRING Q1a
12623: PPUSH
12624: CALL_OW 97
12628: ST_TO_ADDR
// end ;
12629: LD_VAR 0 1
12633: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12634: LD_INT 0
12636: PPUSH
12637: PPUSH
12638: PPUSH
12639: PPUSH
// for i = 1 to count do
12640: LD_ADDR_VAR 0 8
12644: PUSH
12645: DOUBLE
12646: LD_INT 1
12648: DEC
12649: ST_TO_ADDR
12650: LD_VAR 0 6
12654: PUSH
12655: FOR_TO
12656: IFFALSE 12737
// begin uc_side = side ;
12658: LD_ADDR_OWVAR 20
12662: PUSH
12663: LD_VAR 0 1
12667: ST_TO_ADDR
// uc_nation = nation ;
12668: LD_ADDR_OWVAR 21
12672: PUSH
12673: LD_VAR 0 2
12677: ST_TO_ADDR
// hc_gallery =  ;
12678: LD_ADDR_OWVAR 33
12682: PUSH
12683: LD_STRING 
12685: ST_TO_ADDR
// hc_name =  ;
12686: LD_ADDR_OWVAR 26
12690: PUSH
12691: LD_STRING 
12693: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12694: LD_INT 0
12696: PPUSH
12697: LD_VAR 0 5
12701: PPUSH
12702: LD_VAR 0 4
12706: PPUSH
12707: CALL_OW 380
// un = CreateHuman ;
12711: LD_ADDR_VAR 0 10
12715: PUSH
12716: CALL_OW 44
12720: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12721: LD_VAR 0 10
12725: PPUSH
12726: LD_VAR 0 3
12730: PPUSH
12731: CALL_OW 52
// end ;
12735: GO 12655
12737: POP
12738: POP
// end ;
12739: LD_VAR 0 7
12743: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12744: LD_INT 0
12746: PPUSH
12747: PPUSH
12748: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12749: LD_ADDR_VAR 0 6
12753: PUSH
12754: LD_INT 48
12756: PUSH
12757: LD_INT 49
12759: PUSH
12760: LD_INT 50
12762: PUSH
12763: LD_INT 20
12765: PUSH
12766: LD_INT 1
12768: PUSH
12769: LD_INT 51
12771: PUSH
12772: LD_INT 52
12774: PUSH
12775: LD_INT 69
12777: PUSH
12778: LD_INT 39
12780: PUSH
12781: LD_INT 34
12783: PUSH
12784: LD_INT 40
12786: PUSH
12787: LD_INT 53
12789: PUSH
12790: LD_INT 71
12792: PUSH
12793: LD_INT 57
12795: PUSH
12796: LD_INT 58
12798: PUSH
12799: LD_INT 44
12801: PUSH
12802: LD_INT 32
12804: PUSH
12805: LD_INT 27
12807: PUSH
12808: LD_INT 23
12810: PUSH
12811: LD_INT 33
12813: PUSH
12814: LD_INT 59
12816: PUSH
12817: LD_INT 54
12819: PUSH
12820: LD_INT 55
12822: PUSH
12823: LD_INT 56
12825: PUSH
12826: LD_INT 63
12828: PUSH
12829: LD_INT 64
12831: PUSH
12832: LD_INT 65
12834: PUSH
12835: LD_INT 30
12837: PUSH
12838: LD_INT 31
12840: PUSH
12841: LD_INT 21
12843: PUSH
12844: LD_INT 22
12846: PUSH
12847: LD_INT 25
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: ST_TO_ADDR
// for i := 1 to list do
12884: LD_ADDR_VAR 0 5
12888: PUSH
12889: DOUBLE
12890: LD_INT 1
12892: DEC
12893: ST_TO_ADDR
12894: LD_VAR 0 6
12898: PUSH
12899: FOR_TO
12900: IFFALSE 12972
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
12902: LD_VAR 0 6
12906: PUSH
12907: LD_VAR 0 5
12911: ARRAY
12912: PPUSH
12913: LD_VAR 0 1
12917: PPUSH
12918: CALL_OW 321
12922: PUSH
12923: LD_INT 1
12925: EQUAL
12926: PUSH
12927: LD_VAR 0 6
12931: PUSH
12932: LD_VAR 0 5
12936: ARRAY
12937: PPUSH
12938: LD_VAR 0 3
12942: PPUSH
12943: CALL_OW 482
12947: AND
12948: IFFALSE 12970
// AddComResearch ( lab , list [ i ] ) ;
12950: LD_VAR 0 2
12954: PPUSH
12955: LD_VAR 0 6
12959: PUSH
12960: LD_VAR 0 5
12964: ARRAY
12965: PPUSH
12966: CALL_OW 184
12970: GO 12899
12972: POP
12973: POP
// end ;
12974: LD_VAR 0 4
12978: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
12979: LD_INT 0
12981: PPUSH
12982: PPUSH
12983: PPUSH
12984: PPUSH
12985: PPUSH
12986: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
12987: LD_ADDR_VAR 0 8
12991: PUSH
12992: LD_VAR 0 2
12996: PPUSH
12997: CALL_OW 313
13001: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13002: LD_ADDR_VAR 0 9
13006: PUSH
13007: LD_VAR 0 3
13011: PPUSH
13012: LD_INT 22
13014: PUSH
13015: LD_VAR 0 1
13019: PUSH
13020: EMPTY
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 25
13026: PUSH
13027: LD_INT 2
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 24
13036: PUSH
13037: LD_INT 750
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 3
13046: PUSH
13047: LD_INT 54
13049: PUSH
13050: EMPTY
13051: LIST
13052: PUSH
13053: EMPTY
13054: LIST
13055: LIST
13056: PUSH
13057: EMPTY
13058: LIST
13059: LIST
13060: LIST
13061: LIST
13062: PPUSH
13063: CALL_OW 70
13067: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13068: LD_ADDR_VAR 0 6
13072: PUSH
13073: LD_VAR 0 3
13077: PPUSH
13078: LD_INT 22
13080: PUSH
13081: LD_VAR 0 1
13085: PUSH
13086: EMPTY
13087: LIST
13088: LIST
13089: PUSH
13090: LD_INT 21
13092: PUSH
13093: LD_INT 3
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: LD_INT 3
13102: PUSH
13103: LD_INT 24
13105: PUSH
13106: LD_INT 1000
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: LIST
13121: PUSH
13122: EMPTY
13123: LIST
13124: PPUSH
13125: CALL_OW 70
13129: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13130: LD_VAR 0 6
13134: NOT
13135: PUSH
13136: LD_INT 22
13138: PUSH
13139: LD_VAR 0 1
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: PUSH
13148: LD_INT 25
13150: PUSH
13151: LD_INT 2
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 24
13160: PUSH
13161: LD_INT 250
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: EMPTY
13169: LIST
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: NOT
13178: AND
13179: IFFALSE 13183
// exit ;
13181: GO 13341
// if buildingsList and engineerOkInside then
13183: LD_VAR 0 6
13187: PUSH
13188: LD_VAR 0 8
13192: AND
13193: IFFALSE 13204
// ComExitBuilding ( engineerOkInside ) ;
13195: LD_VAR 0 8
13199: PPUSH
13200: CALL_OW 122
// if buildingsList and engineerOkOutside then
13204: LD_VAR 0 6
13208: PUSH
13209: LD_VAR 0 9
13213: AND
13214: IFFALSE 13234
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13216: LD_VAR 0 9
13220: PPUSH
13221: LD_VAR 0 6
13225: PUSH
13226: LD_INT 1
13228: ARRAY
13229: PPUSH
13230: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13234: LD_VAR 0 6
13238: PUSH
13239: LD_INT 0
13241: EQUAL
13242: PUSH
13243: LD_VAR 0 4
13247: PUSH
13248: LD_INT 0
13250: EQUAL
13251: AND
13252: PUSH
13253: LD_VAR 0 9
13257: AND
13258: IFFALSE 13274
// ComEnterUnit ( engineerOkOutside , depot ) ;
13260: LD_VAR 0 9
13264: PPUSH
13265: LD_VAR 0 2
13269: PPUSH
13270: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13274: LD_VAR 0 9
13278: PUSH
13279: LD_VAR 0 6
13283: PUSH
13284: LD_INT 0
13286: EQUAL
13287: AND
13288: PUSH
13289: LD_VAR 0 4
13293: AND
13294: IFFALSE 13341
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13296: LD_VAR 0 9
13300: PPUSH
13301: LD_VAR 0 4
13305: PUSH
13306: LD_INT 1
13308: ARRAY
13309: PPUSH
13310: LD_VAR 0 4
13314: PUSH
13315: LD_INT 2
13317: ARRAY
13318: PPUSH
13319: LD_VAR 0 4
13323: PUSH
13324: LD_INT 3
13326: ARRAY
13327: PPUSH
13328: LD_VAR 0 4
13332: PUSH
13333: LD_INT 4
13335: ARRAY
13336: PPUSH
13337: CALL_OW 145
// end ;
13341: LD_VAR 0 5
13345: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13346: LD_INT 0
13348: PPUSH
13349: PPUSH
13350: PPUSH
13351: PPUSH
13352: PPUSH
13353: PPUSH
13354: PPUSH
13355: PPUSH
13356: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13357: LD_ADDR_VAR 0 6
13361: PUSH
13362: LD_INT 22
13364: PUSH
13365: LD_VAR 0 1
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: PUSH
13374: LD_INT 25
13376: PUSH
13377: LD_INT 4
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 24
13386: PUSH
13387: LD_INT 251
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: LIST
13398: PPUSH
13399: CALL_OW 69
13403: PUSH
13404: LD_EXP 27
13408: PUSH
13409: EMPTY
13410: LIST
13411: DIFF
13412: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13413: LD_ADDR_VAR 0 7
13417: PUSH
13418: LD_VAR 0 3
13422: PPUSH
13423: LD_INT 22
13425: PUSH
13426: LD_VAR 0 1
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: PUSH
13435: LD_INT 56
13437: PUSH
13438: EMPTY
13439: LIST
13440: PUSH
13441: LD_INT 25
13443: PUSH
13444: LD_INT 4
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: LD_INT 50
13453: PUSH
13454: EMPTY
13455: LIST
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: PPUSH
13463: CALL_OW 70
13467: PUSH
13468: LD_EXP 27
13472: PUSH
13473: EMPTY
13474: LIST
13475: DIFF
13476: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13477: LD_ADDR_VAR 0 10
13481: PUSH
13482: LD_VAR 0 3
13486: PPUSH
13487: LD_INT 22
13489: PUSH
13490: LD_VAR 0 1
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: LD_INT 21
13501: PUSH
13502: LD_INT 1
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: PUSH
13509: LD_INT 3
13511: PUSH
13512: LD_INT 24
13514: PUSH
13515: LD_INT 750
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: PUSH
13522: EMPTY
13523: LIST
13524: LIST
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: LIST
13530: PPUSH
13531: CALL_OW 70
13535: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13536: LD_ADDR_VAR 0 11
13540: PUSH
13541: LD_VAR 0 2
13545: PPUSH
13546: LD_INT 22
13548: PUSH
13549: LD_VAR 0 1
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 21
13560: PUSH
13561: LD_INT 1
13563: PUSH
13564: EMPTY
13565: LIST
13566: LIST
13567: PUSH
13568: LD_INT 3
13570: PUSH
13571: LD_INT 24
13573: PUSH
13574: LD_INT 1000
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: PPUSH
13590: CALL_OW 70
13594: ST_TO_ADDR
// if damageUnits and sciList then
13595: LD_VAR 0 10
13599: PUSH
13600: LD_VAR 0 6
13604: AND
13605: IFFALSE 13621
// ComMoveToArea ( damageUnits , healArea ) ;
13607: LD_VAR 0 10
13611: PPUSH
13612: LD_VAR 0 2
13616: PPUSH
13617: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13621: LD_VAR 0 11
13625: PUSH
13626: LD_VAR 0 6
13630: AND
13631: PUSH
13632: LD_VAR 0 7
13636: PUSH
13637: LD_INT 0
13639: EQUAL
13640: AND
13641: IFFALSE 13687
// for i in buildings do
13643: LD_ADDR_VAR 0 8
13647: PUSH
13648: LD_VAR 0 4
13652: PUSH
13653: FOR_IN
13654: IFFALSE 13685
// begin if UnitsInside ( i ) then
13656: LD_VAR 0 8
13660: PPUSH
13661: CALL_OW 313
13665: IFFALSE 13683
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13667: LD_VAR 0 8
13671: PPUSH
13672: CALL_OW 313
13676: PPUSH
13677: CALL_OW 122
// break ;
13681: GO 13685
// end ; end ;
13683: GO 13653
13685: POP
13686: POP
// if unitsToHeal and sciListOutside then
13687: LD_VAR 0 11
13691: PUSH
13692: LD_VAR 0 7
13696: AND
13697: IFFALSE 13717
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13699: LD_VAR 0 7
13703: PPUSH
13704: LD_VAR 0 11
13708: PUSH
13709: LD_INT 1
13711: ARRAY
13712: PPUSH
13713: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13717: LD_VAR 0 10
13721: PUSH
13722: LD_INT 0
13724: EQUAL
13725: PUSH
13726: LD_VAR 0 11
13730: PUSH
13731: LD_INT 0
13733: EQUAL
13734: AND
13735: PUSH
13736: LD_VAR 0 7
13740: AND
13741: IFFALSE 13809
// begin tmp := buildings ;
13743: LD_ADDR_VAR 0 12
13747: PUSH
13748: LD_VAR 0 4
13752: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13753: LD_ADDR_VAR 0 13
13757: PUSH
13758: LD_INT 1
13760: PPUSH
13761: LD_VAR 0 12
13765: PPUSH
13766: CALL_OW 12
13770: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13771: LD_VAR 0 7
13775: PPUSH
13776: LD_INT 3
13778: PUSH
13779: LD_INT 60
13781: PUSH
13782: EMPTY
13783: LIST
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PPUSH
13789: CALL_OW 72
13793: PPUSH
13794: LD_VAR 0 12
13798: PUSH
13799: LD_VAR 0 13
13803: ARRAY
13804: PPUSH
13805: CALL_OW 120
// end ; end ;
13809: LD_VAR 0 5
13813: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13814: LD_INT 0
13816: PPUSH
13817: PPUSH
13818: PPUSH
13819: PPUSH
13820: PPUSH
13821: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13822: LD_ADDR_VAR 0 7
13826: PUSH
13827: LD_VAR 0 2
13831: PPUSH
13832: LD_INT 22
13834: PUSH
13835: LD_VAR 0 1
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 21
13846: PUSH
13847: LD_INT 2
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 34
13856: PUSH
13857: LD_INT 52
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: EMPTY
13865: LIST
13866: LIST
13867: LIST
13868: PPUSH
13869: CALL_OW 70
13873: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13874: LD_ADDR_VAR 0 8
13878: PUSH
13879: LD_VAR 0 2
13883: PPUSH
13884: LD_INT 22
13886: PUSH
13887: LD_VAR 0 1
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 21
13898: PUSH
13899: LD_INT 3
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 3
13908: PUSH
13909: LD_INT 24
13911: PUSH
13912: LD_INT 1000
13914: PUSH
13915: EMPTY
13916: LIST
13917: LIST
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: LIST
13927: PUSH
13928: EMPTY
13929: LIST
13930: PPUSH
13931: CALL_OW 70
13935: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
13936: LD_VAR 0 8
13940: PUSH
13941: LD_INT 0
13943: GREATER
13944: PUSH
13945: LD_VAR 0 7
13949: PPUSH
13950: LD_INT 24
13952: PUSH
13953: LD_INT 750
13955: PUSH
13956: EMPTY
13957: LIST
13958: LIST
13959: PPUSH
13960: CALL_OW 72
13964: PUSH
13965: LD_INT 0
13967: GREATER
13968: AND
13969: IFFALSE 13989
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
13971: LD_VAR 0 7
13975: PPUSH
13976: LD_VAR 0 8
13980: PUSH
13981: LD_INT 1
13983: ARRAY
13984: PPUSH
13985: CALL_OW 130
// end ;
13989: LD_VAR 0 3
13993: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
13994: LD_INT 0
13996: PPUSH
13997: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
13998: LD_INT 22
14000: PUSH
14001: LD_VAR 0 1
14005: PUSH
14006: EMPTY
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 21
14012: PUSH
14013: LD_INT 2
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PPUSH
14024: CALL_OW 69
14028: PUSH
14029: LD_INT 18
14031: PPUSH
14032: LD_INT 22
14034: PUSH
14035: LD_VAR 0 1
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 21
14046: PUSH
14047: LD_INT 2
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: PPUSH
14058: CALL_OW 70
14062: PUSH
14063: LD_VAR 0 3
14067: LESSEQUAL
14068: DIFF
14069: IFFALSE 14136
// for i := 1 to vehCount do
14071: LD_ADDR_VAR 0 9
14075: PUSH
14076: DOUBLE
14077: LD_INT 1
14079: DEC
14080: ST_TO_ADDR
14081: LD_VAR 0 3
14085: PUSH
14086: FOR_TO
14087: IFFALSE 14134
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14089: LD_VAR 0 2
14093: PPUSH
14094: LD_VAR 0 7
14098: PPUSH
14099: LD_VAR 0 5
14103: PPUSH
14104: LD_VAR 0 6
14108: PPUSH
14109: LD_VAR 0 4
14113: PUSH
14114: LD_INT 1
14116: PPUSH
14117: LD_VAR 0 4
14121: PPUSH
14122: CALL_OW 12
14126: ARRAY
14127: PPUSH
14128: CALL_OW 185
14132: GO 14086
14134: POP
14135: POP
// end ;
14136: LD_VAR 0 8
14140: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14141: LD_INT 0
14143: PPUSH
14144: PPUSH
14145: PPUSH
14146: PPUSH
14147: PPUSH
14148: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14149: LD_ADDR_VAR 0 6
14153: PUSH
14154: LD_INT 22
14156: PUSH
14157: LD_VAR 0 1
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 25
14168: PUSH
14169: LD_INT 9
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PPUSH
14180: CALL_OW 69
14184: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14185: LD_ADDR_VAR 0 7
14189: PUSH
14190: LD_INT 81
14192: PUSH
14193: LD_VAR 0 1
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PUSH
14202: LD_INT 3
14204: PUSH
14205: LD_INT 21
14207: PUSH
14208: LD_INT 3
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: PPUSH
14223: CALL_OW 69
14227: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14228: LD_ADDR_VAR 0 4
14232: PUSH
14233: LD_INT 1
14235: PPUSH
14236: LD_INT 3
14238: PPUSH
14239: CALL_OW 12
14243: ST_TO_ADDR
// for i := 1 to list do
14244: LD_ADDR_VAR 0 5
14248: PUSH
14249: DOUBLE
14250: LD_INT 1
14252: DEC
14253: ST_TO_ADDR
14254: LD_VAR 0 6
14258: PUSH
14259: FOR_TO
14260: IFFALSE 14462
// for ta in filter do
14262: LD_ADDR_VAR 0 3
14266: PUSH
14267: LD_VAR 0 7
14271: PUSH
14272: FOR_IN
14273: IFFALSE 14458
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14275: LD_VAR 0 6
14279: PUSH
14280: LD_VAR 0 5
14284: ARRAY
14285: PPUSH
14286: LD_VAR 0 3
14290: PPUSH
14291: CALL_OW 296
14295: PUSH
14296: LD_INT 15
14298: LESSEQUAL
14299: IFFALSE 14456
// begin case c of 1 :
14301: LD_VAR 0 4
14305: PUSH
14306: LD_INT 1
14308: DOUBLE
14309: EQUAL
14310: IFTRUE 14314
14312: GO 14352
14314: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14315: LD_VAR 0 6
14319: PUSH
14320: LD_VAR 0 5
14324: ARRAY
14325: PPUSH
14326: LD_VAR 0 3
14330: PPUSH
14331: CALL_OW 250
14335: PPUSH
14336: LD_VAR 0 3
14340: PPUSH
14341: CALL_OW 251
14345: PPUSH
14346: CALL_OW 154
14350: GO 14456
14352: LD_INT 2
14354: DOUBLE
14355: EQUAL
14356: IFTRUE 14360
14358: GO 14424
14360: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14361: LD_VAR 0 6
14365: PUSH
14366: LD_VAR 0 5
14370: ARRAY
14371: PPUSH
14372: LD_VAR 0 3
14376: PPUSH
14377: CALL_OW 250
14381: PUSH
14382: LD_INT 1
14384: NEG
14385: PPUSH
14386: LD_INT 1
14388: PPUSH
14389: CALL_OW 12
14393: PLUS
14394: PPUSH
14395: LD_VAR 0 3
14399: PPUSH
14400: CALL_OW 251
14404: PUSH
14405: LD_INT 1
14407: NEG
14408: PPUSH
14409: LD_INT 1
14411: PPUSH
14412: CALL_OW 12
14416: PLUS
14417: PPUSH
14418: CALL_OW 153
14422: GO 14456
14424: LD_INT 3
14426: DOUBLE
14427: EQUAL
14428: IFTRUE 14432
14430: GO 14455
14432: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14433: LD_VAR 0 6
14437: PUSH
14438: LD_VAR 0 5
14442: ARRAY
14443: PPUSH
14444: LD_VAR 0 3
14448: PPUSH
14449: CALL_OW 115
14453: GO 14456
14455: POP
// end ; end ;
14456: GO 14272
14458: POP
14459: POP
14460: GO 14259
14462: POP
14463: POP
// end ;
14464: LD_VAR 0 2
14468: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14469: LD_INT 0
14471: PPUSH
14472: PPUSH
14473: PPUSH
14474: PPUSH
// r := 100 ;
14475: LD_ADDR_VAR 0 5
14479: PUSH
14480: LD_INT 100
14482: ST_TO_ADDR
// x := 0 ;
14483: LD_ADDR_VAR 0 6
14487: PUSH
14488: LD_INT 0
14490: ST_TO_ADDR
// while ( x < n ) do
14491: LD_VAR 0 6
14495: PUSH
14496: LD_VAR 0 2
14500: LESS
14501: IFFALSE 14764
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14503: LD_ADDR_VAR 0 4
14507: PUSH
14508: DOUBLE
14509: LD_INT 1
14511: DEC
14512: ST_TO_ADDR
14513: LD_VAR 0 1
14517: PPUSH
14518: LD_INT 0
14520: PPUSH
14521: CALL_OW 517
14525: PUSH
14526: LD_INT 1
14528: ARRAY
14529: PUSH
14530: FOR_TO
14531: IFFALSE 14760
// begin if r > 50 then
14533: LD_VAR 0 5
14537: PUSH
14538: LD_INT 50
14540: GREATER
14541: IFFALSE 14744
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14543: LD_VAR 0 1
14547: PPUSH
14548: LD_INT 0
14550: PPUSH
14551: CALL_OW 517
14555: PUSH
14556: LD_INT 1
14558: ARRAY
14559: PUSH
14560: LD_VAR 0 4
14564: ARRAY
14565: PPUSH
14566: LD_VAR 0 1
14570: PPUSH
14571: LD_INT 0
14573: PPUSH
14574: CALL_OW 517
14578: PUSH
14579: LD_INT 2
14581: ARRAY
14582: PUSH
14583: LD_VAR 0 4
14587: ARRAY
14588: PPUSH
14589: CALL_OW 458
14593: NOT
14594: IFFALSE 14742
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14596: LD_VAR 0 1
14600: PPUSH
14601: LD_INT 0
14603: PPUSH
14604: CALL_OW 517
14608: PUSH
14609: LD_INT 1
14611: ARRAY
14612: PUSH
14613: LD_VAR 0 4
14617: ARRAY
14618: PPUSH
14619: LD_VAR 0 1
14623: PPUSH
14624: LD_INT 0
14626: PPUSH
14627: CALL_OW 517
14631: PUSH
14632: LD_INT 2
14634: ARRAY
14635: PUSH
14636: LD_VAR 0 4
14640: ARRAY
14641: PPUSH
14642: LD_INT 8
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14652: LD_ADDR_EXP 37
14656: PUSH
14657: LD_EXP 37
14661: PPUSH
14662: LD_INT 1
14664: PPUSH
14665: LD_VAR 0 1
14669: PPUSH
14670: LD_INT 0
14672: PPUSH
14673: CALL_OW 517
14677: PUSH
14678: LD_INT 1
14680: ARRAY
14681: PUSH
14682: LD_VAR 0 4
14686: ARRAY
14687: PUSH
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_INT 0
14695: PPUSH
14696: CALL_OW 517
14700: PUSH
14701: LD_INT 2
14703: ARRAY
14704: PUSH
14705: LD_VAR 0 4
14709: ARRAY
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PPUSH
14715: CALL_OW 2
14719: ST_TO_ADDR
// r := 0 ;
14720: LD_ADDR_VAR 0 5
14724: PUSH
14725: LD_INT 0
14727: ST_TO_ADDR
// x := x + 1 ;
14728: LD_ADDR_VAR 0 6
14732: PUSH
14733: LD_VAR 0 6
14737: PUSH
14738: LD_INT 1
14740: PLUS
14741: ST_TO_ADDR
// end end else
14742: GO 14758
// r := r + 35 ;
14744: LD_ADDR_VAR 0 5
14748: PUSH
14749: LD_VAR 0 5
14753: PUSH
14754: LD_INT 35
14756: PLUS
14757: ST_TO_ADDR
// end end ;
14758: GO 14530
14760: POP
14761: POP
14762: GO 14491
14764: LD_VAR 0 3
14768: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14769: LD_INT 0
14771: PPUSH
14772: PPUSH
14773: PPUSH
14774: PPUSH
14775: PPUSH
// tmp := [ ] ;
14776: LD_ADDR_VAR 0 6
14780: PUSH
14781: EMPTY
14782: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14783: LD_ADDR_VAR 0 7
14787: PUSH
14788: LD_INT 22
14790: PUSH
14791: LD_VAR 0 1
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 30
14802: PUSH
14803: LD_INT 32
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PPUSH
14814: CALL_OW 69
14818: ST_TO_ADDR
// if bunkers then
14819: LD_VAR 0 7
14823: IFFALSE 14893
// for i in bunkers do
14825: LD_ADDR_VAR 0 4
14829: PUSH
14830: LD_VAR 0 7
14834: PUSH
14835: FOR_IN
14836: IFFALSE 14891
// for j in UnitsInside ( i ) do
14838: LD_ADDR_VAR 0 5
14842: PUSH
14843: LD_VAR 0 4
14847: PPUSH
14848: CALL_OW 313
14852: PUSH
14853: FOR_IN
14854: IFFALSE 14887
// tmp := Replace ( tmp , tmp + 1 , j ) ;
14856: LD_ADDR_VAR 0 6
14860: PUSH
14861: LD_VAR 0 6
14865: PPUSH
14866: LD_VAR 0 6
14870: PUSH
14871: LD_INT 1
14873: PLUS
14874: PPUSH
14875: LD_VAR 0 5
14879: PPUSH
14880: CALL_OW 1
14884: ST_TO_ADDR
14885: GO 14853
14887: POP
14888: POP
14889: GO 14835
14891: POP
14892: POP
// if tmp then
14893: LD_VAR 0 6
14897: IFFALSE 14937
// begin ComExitBuilding ( tmp ) ;
14899: LD_VAR 0 6
14903: PPUSH
14904: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
14908: LD_VAR 0 6
14912: PPUSH
14913: LD_VAR 0 2
14917: PPUSH
14918: CALL_OW 250
14922: PPUSH
14923: LD_VAR 0 2
14927: PPUSH
14928: CALL_OW 251
14932: PPUSH
14933: CALL_OW 174
// end ; end ;
14937: LD_VAR 0 3
14941: RET
// export function CreateNature ; var i , un ; begin
14942: LD_INT 0
14944: PPUSH
14945: PPUSH
14946: PPUSH
// uc_side := 0 ;
14947: LD_ADDR_OWVAR 20
14951: PUSH
14952: LD_INT 0
14954: ST_TO_ADDR
// uc_nation := 0 ;
14955: LD_ADDR_OWVAR 21
14959: PUSH
14960: LD_INT 0
14962: ST_TO_ADDR
// InitHc ;
14963: CALL_OW 19
// hc_class := class_fish ;
14967: LD_ADDR_OWVAR 28
14971: PUSH
14972: LD_INT 20
14974: ST_TO_ADDR
// for i := 1 to 6 do
14975: LD_ADDR_VAR 0 2
14979: PUSH
14980: DOUBLE
14981: LD_INT 1
14983: DEC
14984: ST_TO_ADDR
14985: LD_INT 6
14987: PUSH
14988: FOR_TO
14989: IFFALSE 15008
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
14991: CALL_OW 44
14995: PPUSH
14996: LD_INT 22
14998: PPUSH
14999: LD_INT 0
15001: PPUSH
15002: CALL_OW 49
15006: GO 14988
15008: POP
15009: POP
// for i := 1 to Difficulty + 2 do
15010: LD_ADDR_VAR 0 2
15014: PUSH
15015: DOUBLE
15016: LD_INT 1
15018: DEC
15019: ST_TO_ADDR
15020: LD_OWVAR 67
15024: PUSH
15025: LD_INT 2
15027: PLUS
15028: PUSH
15029: FOR_TO
15030: IFFALSE 15139
// begin hc_sex := sex_male ;
15032: LD_ADDR_OWVAR 27
15036: PUSH
15037: LD_INT 1
15039: ST_TO_ADDR
// uc_side := 0 ;
15040: LD_ADDR_OWVAR 20
15044: PUSH
15045: LD_INT 0
15047: ST_TO_ADDR
// uc_nation := nation_nature ;
15048: LD_ADDR_OWVAR 21
15052: PUSH
15053: LD_INT 0
15055: ST_TO_ADDR
// hc_class := class_tiger ;
15056: LD_ADDR_OWVAR 28
15060: PUSH
15061: LD_INT 14
15063: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15064: LD_ADDR_OWVAR 31
15068: PUSH
15069: LD_EXP 30
15073: PUSH
15074: LD_INT 0
15076: PUSH
15077: LD_INT 0
15079: PUSH
15080: LD_INT 0
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15089: LD_ADDR_OWVAR 35
15093: PUSH
15094: LD_INT 5
15096: NEG
15097: PPUSH
15098: LD_INT 5
15100: PPUSH
15101: CALL_OW 12
15105: PUSH
15106: LD_OWVAR 67
15110: MUL
15111: ST_TO_ADDR
// un := CreateHuman ;
15112: LD_ADDR_VAR 0 3
15116: PUSH
15117: CALL_OW 44
15121: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15122: LD_VAR 0 3
15126: PPUSH
15127: LD_INT 23
15129: PPUSH
15130: LD_INT 0
15132: PPUSH
15133: CALL_OW 49
// end ;
15137: GO 15029
15139: POP
15140: POP
// for i := 1 to rand ( 3 , 4 ) do
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: DOUBLE
15147: LD_INT 1
15149: DEC
15150: ST_TO_ADDR
15151: LD_INT 3
15153: PPUSH
15154: LD_INT 4
15156: PPUSH
15157: CALL_OW 12
15161: PUSH
15162: FOR_TO
15163: IFFALSE 15255
// begin hc_sex := sex_male ;
15165: LD_ADDR_OWVAR 27
15169: PUSH
15170: LD_INT 1
15172: ST_TO_ADDR
// uc_side := 0 ;
15173: LD_ADDR_OWVAR 20
15177: PUSH
15178: LD_INT 0
15180: ST_TO_ADDR
// uc_nation := nation_nature ;
15181: LD_ADDR_OWVAR 21
15185: PUSH
15186: LD_INT 0
15188: ST_TO_ADDR
// hc_class := 18 ;
15189: LD_ADDR_OWVAR 28
15193: PUSH
15194: LD_INT 18
15196: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15197: LD_ADDR_OWVAR 31
15201: PUSH
15202: LD_INT 0
15204: PUSH
15205: LD_INT 0
15207: PUSH
15208: LD_INT 0
15210: PUSH
15211: LD_INT 0
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: ST_TO_ADDR
// hc_agressivity := 0 ;
15220: LD_ADDR_OWVAR 35
15224: PUSH
15225: LD_INT 0
15227: ST_TO_ADDR
// un := CreateHuman ;
15228: LD_ADDR_VAR 0 3
15232: PUSH
15233: CALL_OW 44
15237: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15238: LD_VAR 0 3
15242: PPUSH
15243: LD_INT 23
15245: PPUSH
15246: LD_INT 0
15248: PPUSH
15249: CALL_OW 49
// end ;
15253: GO 15162
15255: POP
15256: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15257: LD_ADDR_VAR 0 2
15261: PUSH
15262: DOUBLE
15263: LD_INT 1
15265: DEC
15266: ST_TO_ADDR
15267: LD_INT 4
15269: PUSH
15270: LD_INT 3
15272: PUSH
15273: LD_INT 3
15275: PUSH
15276: LD_INT 3
15278: PUSH
15279: EMPTY
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: PUSH
15285: LD_OWVAR 67
15289: ARRAY
15290: PUSH
15291: FOR_TO
15292: IFFALSE 15401
// begin hc_sex := sex_male ;
15294: LD_ADDR_OWVAR 27
15298: PUSH
15299: LD_INT 1
15301: ST_TO_ADDR
// uc_side := 0 ;
15302: LD_ADDR_OWVAR 20
15306: PUSH
15307: LD_INT 0
15309: ST_TO_ADDR
// uc_nation := nation_nature ;
15310: LD_ADDR_OWVAR 21
15314: PUSH
15315: LD_INT 0
15317: ST_TO_ADDR
// hc_class := class_apeman ;
15318: LD_ADDR_OWVAR 28
15322: PUSH
15323: LD_INT 12
15325: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15326: LD_ADDR_OWVAR 31
15330: PUSH
15331: LD_INT 0
15333: PPUSH
15334: LD_INT 2
15336: PPUSH
15337: CALL_OW 12
15341: PUSH
15342: LD_INT 0
15344: PUSH
15345: LD_INT 0
15347: PUSH
15348: LD_INT 0
15350: PUSH
15351: EMPTY
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15357: LD_ADDR_OWVAR 35
15361: PUSH
15362: LD_INT 10
15364: NEG
15365: PPUSH
15366: LD_INT 10
15368: PPUSH
15369: CALL_OW 12
15373: ST_TO_ADDR
// un := CreateHuman ;
15374: LD_ADDR_VAR 0 3
15378: PUSH
15379: CALL_OW 44
15383: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15384: LD_VAR 0 3
15388: PPUSH
15389: LD_INT 26
15391: PPUSH
15392: LD_INT 0
15394: PPUSH
15395: CALL_OW 49
// end ;
15399: GO 15291
15401: POP
15402: POP
// end ; end_of_file
15403: LD_VAR 0 1
15407: RET
// on UnitDestroyed ( unit ) do var i ;
15408: LD_INT 0
15410: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15411: LD_VAR 0 1
15415: PPUSH
15416: CALL 34538 0 1
// if unit = JMM then
15420: LD_VAR 0 1
15424: PUSH
15425: LD_EXP 1
15429: EQUAL
15430: IFFALSE 15439
// YouLost ( JMM ) ;
15432: LD_STRING JMM
15434: PPUSH
15435: CALL_OW 104
// if unit in russianTanks then
15439: LD_VAR 0 1
15443: PUSH
15444: LD_EXP 32
15448: IN
15449: IFFALSE 15467
// russianTanks := russianTanks diff unit ;
15451: LD_ADDR_EXP 32
15455: PUSH
15456: LD_EXP 32
15460: PUSH
15461: LD_VAR 0 1
15465: DIFF
15466: ST_TO_ADDR
// if unit in russianTimeLapsers then
15467: LD_VAR 0 1
15471: PUSH
15472: LD_EXP 33
15476: IN
15477: IFFALSE 15495
// russianTimeLapsers := russianTimeLapsers diff unit ;
15479: LD_ADDR_EXP 33
15483: PUSH
15484: LD_EXP 33
15488: PUSH
15489: LD_VAR 0 1
15493: DIFF
15494: ST_TO_ADDR
// if unit in RuScientists then
15495: LD_VAR 0 1
15499: PUSH
15500: LD_EXP 27
15504: IN
15505: IFFALSE 15537
// begin RuScientists := RuScientists diff unit ;
15507: LD_ADDR_EXP 27
15511: PUSH
15512: LD_EXP 27
15516: PUSH
15517: LD_VAR 0 1
15521: DIFF
15522: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15523: LD_ADDR_EXP 28
15527: PUSH
15528: LD_EXP 28
15532: PUSH
15533: LD_INT 1
15535: PLUS
15536: ST_TO_ADDR
// end ; end ;
15537: PPOPN 2
15539: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15540: LD_VAR 0 3
15544: PPUSH
15545: CALL_OW 264
15549: PUSH
15550: LD_INT 9
15552: EQUAL
15553: IFFALSE 15569
// laserCounterDestroy := laserCounterDestroy + 1 ;
15555: LD_ADDR_EXP 43
15559: PUSH
15560: LD_EXP 43
15564: PUSH
15565: LD_INT 1
15567: PLUS
15568: ST_TO_ADDR
// end ;
15569: PPOPN 3
15571: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15572: LD_VAR 0 2
15576: PUSH
15577: LD_INT 22
15579: PUSH
15580: LD_INT 6
15582: PUSH
15583: EMPTY
15584: LIST
15585: LIST
15586: PPUSH
15587: CALL_OW 69
15591: IN
15592: IFFALSE 15647
// begin if GetType ( human ) = unit_vehicle then
15594: LD_VAR 0 2
15598: PPUSH
15599: CALL_OW 247
15603: PUSH
15604: LD_INT 2
15606: EQUAL
15607: IFFALSE 15624
// human := IsDrivenBy ( human ) ;
15609: LD_ADDR_VAR 0 2
15613: PUSH
15614: LD_VAR 0 2
15618: PPUSH
15619: CALL_OW 311
15623: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15624: LD_VAR 0 2
15628: PPUSH
15629: LD_VAR 0 2
15633: PPUSH
15634: CALL_OW 110
15638: PUSH
15639: LD_INT 10
15641: PLUS
15642: PPUSH
15643: CALL_OW 109
// end ; if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
15647: LD_VAR 0 1
15651: PUSH
15652: LD_INT 10
15654: EQUAL
15655: PUSH
15656: LD_VAR 0 2
15660: PPUSH
15661: CALL_OW 255
15665: PUSH
15666: LD_INT 1
15668: EQUAL
15669: AND
15670: PUSH
15671: LD_EXP 40
15675: PUSH
15676: LD_INT 0
15678: EQUAL
15679: AND
15680: IFFALSE 15792
// begin eventVar1 = 1 ;
15682: LD_ADDR_EXP 40
15686: PUSH
15687: LD_INT 1
15689: ST_TO_ADDR
// teleportExplored = 1 ;
15690: LD_ADDR_EXP 26
15694: PUSH
15695: LD_INT 1
15697: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15698: LD_STRING M2a
15700: PPUSH
15701: CALL_OW 337
// wait ( 0 0$2 ) ;
15705: LD_INT 70
15707: PPUSH
15708: CALL_OW 67
// DialogueOn ;
15712: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15716: LD_INT 22
15718: PUSH
15719: LD_INT 1
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: PUSH
15726: LD_INT 21
15728: PUSH
15729: LD_INT 1
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PPUSH
15740: CALL_OW 69
15744: PPUSH
15745: LD_STRING DT3a-Sol1-1
15747: PPUSH
15748: LD_STRING DT3a-FSol1-1
15750: PPUSH
15751: CALL 12129 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15755: LD_EXP 1
15759: PPUSH
15760: LD_STRING DT3a-JMM-1
15762: PPUSH
15763: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15767: LD_VAR 0 2
15771: PPUSH
15772: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15776: LD_EXP 1
15780: PPUSH
15781: LD_STRING DT3a-JMM-1a
15783: PPUSH
15784: CALL_OW 88
// DialogueOff ;
15788: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15792: LD_VAR 0 1
15796: PUSH
15797: LD_INT 10
15799: EQUAL
15800: PUSH
15801: LD_VAR 0 2
15805: PPUSH
15806: CALL_OW 247
15810: PUSH
15811: LD_INT 2
15813: EQUAL
15814: AND
15815: PUSH
15816: LD_VAR 0 2
15820: PPUSH
15821: CALL_OW 255
15825: PUSH
15826: LD_INT 3
15828: EQUAL
15829: AND
15830: IFFALSE 15896
// begin if vehicleTeleported = 0 then
15832: LD_EXP 21
15836: PUSH
15837: LD_INT 0
15839: EQUAL
15840: IFFALSE 15857
// begin wait ( 0 0$03 ) ;
15842: LD_INT 105
15844: PPUSH
15845: CALL_OW 67
// vehicleTeleported := 1 ;
15849: LD_ADDR_EXP 21
15853: PUSH
15854: LD_INT 1
15856: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15857: LD_EXP 21
15861: PUSH
15862: LD_INT 2
15864: EQUAL
15865: IFFALSE 15882
// begin wait ( 0 0$03 ) ;
15867: LD_INT 105
15869: PPUSH
15870: CALL_OW 67
// vehicleTeleported := 3 ;
15874: LD_ADDR_EXP 21
15878: PUSH
15879: LD_INT 3
15881: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
15882: LD_ADDR_EXP 22
15886: PUSH
15887: LD_EXP 22
15891: PUSH
15892: LD_INT 1
15894: PLUS
15895: ST_TO_ADDR
// end ; end ;
15896: PPOPN 2
15898: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
15899: LD_VAR 0 1
15903: PPUSH
15904: LD_VAR 0 2
15908: PPUSH
15909: CALL 34660 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
15913: LD_VAR 0 1
15917: PPUSH
15918: CALL_OW 264
15922: PUSH
15923: LD_INT 7
15925: EQUAL
15926: IFFALSE 15936
// rocketBuilded := true ;
15928: LD_ADDR_EXP 44
15932: PUSH
15933: LD_INT 1
15935: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
15936: LD_VAR 0 1
15940: PPUSH
15941: CALL_OW 255
15945: PUSH
15946: LD_INT 3
15948: NONEQUAL
15949: IFFALSE 15953
// exit ;
15951: GO 16072
// if factory in [ ru_fact , rufab2 ] then
15953: LD_VAR 0 2
15957: PUSH
15958: LD_INT 21
15960: PUSH
15961: LD_INT 112
15963: PUSH
15964: EMPTY
15965: LIST
15966: LIST
15967: IN
15968: IFFALSE 16072
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
15970: LD_VAR 0 1
15974: PPUSH
15975: CALL_OW 264
15979: PUSH
15980: LD_INT 49
15982: EQUAL
15983: IFFALSE 16019
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
15985: LD_ADDR_EXP 33
15989: PUSH
15990: LD_EXP 33
15994: PPUSH
15995: LD_VAR 0 1
15999: PPUSH
16000: CALL 76250 0 2
16004: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16005: LD_VAR 0 1
16009: PPUSH
16010: LD_INT 137
16012: PPUSH
16013: CALL_OW 120
// end else
16017: GO 16072
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16019: LD_VAR 0 1
16023: PPUSH
16024: CALL_OW 264
16028: PUSH
16029: LD_INT 51
16031: PUSH
16032: LD_EXP 46
16036: PUSH
16037: LD_INT 52
16039: PUSH
16040: LD_INT 53
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: IN
16049: NOT
16050: IFFALSE 16072
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16052: LD_ADDR_EXP 32
16056: PUSH
16057: LD_EXP 32
16061: PPUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL 76250 0 2
16071: ST_TO_ADDR
// end ; end ; end ;
16072: PPOPN 2
16074: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16075: LD_INT 0
16077: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16078: LD_VAR 0 2
16082: PPUSH
16083: CALL_OW 255
16087: PUSH
16088: LD_INT 3
16090: EQUAL
16091: PUSH
16092: LD_VAR 0 2
16096: PPUSH
16097: CALL_OW 257
16101: PUSH
16102: LD_INT 3
16104: EQUAL
16105: AND
16106: PUSH
16107: LD_INT 21
16109: PPUSH
16110: CALL_OW 255
16114: PUSH
16115: LD_INT 3
16117: EQUAL
16118: AND
16119: PUSH
16120: LD_INT 21
16122: PPUSH
16123: CALL_OW 302
16127: AND
16128: IFFALSE 16142
// ComEnterUnit ( human , ru_fact ) ;
16130: LD_VAR 0 2
16134: PPUSH
16135: LD_INT 21
16137: PPUSH
16138: CALL_OW 120
// end ;
16142: PPOPN 3
16144: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16145: LD_VAR 0 1
16149: PPUSH
16150: CALL 34644 0 1
// end ; end_of_file
16154: PPOPN 1
16156: END
// every 0 0$1 trigger ruAI = 1 do
16157: LD_EXP 34
16161: PUSH
16162: LD_INT 1
16164: EQUAL
16165: IFFALSE 16277
16167: GO 16169
16169: DISABLE
// begin enable ;
16170: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16171: LD_INT 3
16173: PPUSH
16174: LD_INT 6
16176: PPUSH
16177: LD_INT 9
16179: PPUSH
16180: LD_EXP 31
16184: PPUSH
16185: CALL 12979 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16189: LD_INT 3
16191: PPUSH
16192: LD_INT 4
16194: PPUSH
16195: LD_INT 10
16197: PPUSH
16198: LD_EXP 31
16202: PPUSH
16203: CALL 12979 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16207: LD_INT 3
16209: PPUSH
16210: LD_INT 9
16212: PPUSH
16213: CALL 13814 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16217: LD_INT 3
16219: PPUSH
16220: LD_INT 10
16222: PPUSH
16223: CALL 13814 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16227: LD_INT 3
16229: PPUSH
16230: LD_INT 16
16232: PPUSH
16233: LD_INT 9
16235: PPUSH
16236: LD_INT 91
16238: PPUSH
16239: CALL 13346 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16243: LD_INT 3
16245: PPUSH
16246: LD_INT 17
16248: PPUSH
16249: LD_INT 10
16251: PPUSH
16252: LD_INT 47
16254: PUSH
16255: LD_INT 129
16257: PUSH
16258: LD_INT 135
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: LIST
16265: PPUSH
16266: CALL 13346 0 4
// IntBazooka ( 3 ) ;
16270: LD_INT 3
16272: PPUSH
16273: CALL 14141 0 1
// end ;
16277: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p ;
16278: LD_EXP 32
16282: PUSH
16283: LD_INT 3
16285: PUSH
16286: LD_INT 4
16288: PUSH
16289: LD_INT 5
16291: PUSH
16292: LD_INT 6
16294: PUSH
16295: EMPTY
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: PUSH
16301: LD_OWVAR 67
16305: ARRAY
16306: GREATEREQUAL
16307: IFFALSE 16586
16309: GO 16311
16311: DISABLE
16312: LD_INT 0
16314: PPUSH
16315: PPUSH
16316: PPUSH
// begin enable ;
16317: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16318: LD_ADDR_VAR 0 2
16322: PUSH
16323: LD_EXP 32
16327: PUSH
16328: LD_EXP 33
16332: UNION
16333: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16334: LD_ADDR_EXP 32
16338: PUSH
16339: LD_EXP 32
16343: PUSH
16344: LD_VAR 0 2
16348: DIFF
16349: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16350: LD_ADDR_EXP 33
16354: PUSH
16355: LD_EXP 33
16359: PUSH
16360: LD_VAR 0 2
16364: DIFF
16365: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16366: LD_EXP 21
16370: PUSH
16371: LD_INT 4
16373: GREATEREQUAL
16374: IFFALSE 16392
// attackTactic := rand ( 1 , 2 ) ;
16376: LD_ADDR_EXP 36
16380: PUSH
16381: LD_INT 1
16383: PPUSH
16384: LD_INT 2
16386: PPUSH
16387: CALL_OW 12
16391: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16392: LD_INT 10
16394: PPUSH
16395: CALL_OW 302
16399: IFFALSE 16508
// begin for i in tmp do
16401: LD_ADDR_VAR 0 1
16405: PUSH
16406: LD_VAR 0 2
16410: PUSH
16411: FOR_IN
16412: IFFALSE 16455
// if attackTactic < 2 then
16414: LD_EXP 36
16418: PUSH
16419: LD_INT 2
16421: LESS
16422: IFFALSE 16438
// ComEnterUnit ( i , ruteleprt ) else
16424: LD_VAR 0 1
16428: PPUSH
16429: LD_INT 10
16431: PPUSH
16432: CALL_OW 120
16436: GO 16453
// ComMoveXY ( i , 88 , 69 ) ;
16438: LD_VAR 0 1
16442: PPUSH
16443: LD_INT 88
16445: PPUSH
16446: LD_INT 69
16448: PPUSH
16449: CALL_OW 111
16453: GO 16411
16455: POP
16456: POP
// p := 0 ;
16457: LD_ADDR_VAR 0 3
16461: PUSH
16462: LD_INT 0
16464: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16465: LD_INT 70
16467: PPUSH
16468: CALL_OW 67
// p := 2 ;
16472: LD_ADDR_VAR 0 3
16476: PUSH
16477: LD_INT 2
16479: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
16480: LD_VAR 0 2
16484: PPUSH
16485: LD_INT 60
16487: PUSH
16488: EMPTY
16489: LIST
16490: PPUSH
16491: CALL_OW 72
16495: NOT
16496: PUSH
16497: LD_VAR 0 3
16501: PUSH
16502: LD_INT 30
16504: GREATER
16505: OR
16506: IFFALSE 16465
// end ; repeat wait ( 0 0$1 ) ;
16508: LD_INT 35
16510: PPUSH
16511: CALL_OW 67
// for i in tmp do
16515: LD_ADDR_VAR 0 1
16519: PUSH
16520: LD_VAR 0 2
16524: PUSH
16525: FOR_IN
16526: IFFALSE 16558
// if not IsOk ( i ) then
16528: LD_VAR 0 1
16532: PPUSH
16533: CALL_OW 302
16537: NOT
16538: IFFALSE 16556
// tmp := tmp diff i ;
16540: LD_ADDR_VAR 0 2
16544: PUSH
16545: LD_VAR 0 2
16549: PUSH
16550: LD_VAR 0 1
16554: DIFF
16555: ST_TO_ADDR
16556: GO 16525
16558: POP
16559: POP
// AgressiveMove ( tmp , [ 140 , 112 ] ) ;
16560: LD_VAR 0 2
16564: PPUSH
16565: LD_INT 140
16567: PUSH
16568: LD_INT 112
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: PPUSH
16575: CALL 78856 0 2
// until not tmp ;
16579: LD_VAR 0 2
16583: NOT
16584: IFFALSE 16508
// end ;
16586: PPOPN 3
16588: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16589: LD_INT 4
16591: PPUSH
16592: CALL_OW 303
16596: IFFALSE 16611
16598: GO 16600
16600: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16601: LD_INT 3
16603: PPUSH
16604: LD_INT 4
16606: PPUSH
16607: CALL 14769 0 2
16611: END
// every 0 0$1 do
16612: GO 16614
16614: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16615: LD_INT 3
16617: PPUSH
16618: LD_INT 91
16620: PPUSH
16621: LD_INT 3
16623: PPUSH
16624: CALL 12744 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16628: LD_INT 3
16630: PPUSH
16631: LD_INT 47
16633: PPUSH
16634: LD_INT 3
16636: PPUSH
16637: CALL 12744 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16641: LD_INT 3
16643: PPUSH
16644: LD_INT 129
16646: PPUSH
16647: LD_INT 3
16649: PPUSH
16650: CALL 12744 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16654: LD_INT 3
16656: PPUSH
16657: LD_INT 3
16659: PPUSH
16660: LD_INT 3
16662: PPUSH
16663: CALL 12744 0 3
// end ;
16667: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16668: LD_INT 22
16670: PUSH
16671: LD_INT 1
16673: PUSH
16674: EMPTY
16675: LIST
16676: LIST
16677: PUSH
16678: LD_INT 21
16680: PUSH
16681: LD_INT 3
16683: PUSH
16684: EMPTY
16685: LIST
16686: LIST
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: PPUSH
16692: CALL_OW 69
16696: IFFALSE 16765
16698: GO 16700
16700: DISABLE
// begin wait ( 0 0$40 ) ;
16701: LD_INT 1400
16703: PPUSH
16704: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16708: LD_INT 3
16710: PPUSH
16711: LD_INT 21
16713: PPUSH
16714: LD_INT 3
16716: PUSH
16717: LD_INT 4
16719: PUSH
16720: LD_INT 5
16722: PUSH
16723: LD_INT 6
16725: PUSH
16726: EMPTY
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: PUSH
16732: LD_OWVAR 67
16736: ARRAY
16737: PPUSH
16738: LD_INT 46
16740: PUSH
16741: LD_INT 45
16743: PUSH
16744: LD_INT 44
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: LIST
16751: PPUSH
16752: LD_INT 3
16754: PPUSH
16755: LD_INT 3
16757: PPUSH
16758: LD_INT 24
16760: PPUSH
16761: CALL 13994 0 7
// end ;
16765: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16766: LD_EXP 20
16770: PUSH
16771: LD_INT 2
16773: EQUAL
16774: PUSH
16775: LD_INT 21
16777: PPUSH
16778: CALL_OW 255
16782: PUSH
16783: LD_INT 3
16785: EQUAL
16786: AND
16787: PUSH
16788: LD_INT 112
16790: PPUSH
16791: CALL_OW 255
16795: PUSH
16796: LD_INT 3
16798: EQUAL
16799: AND
16800: PUSH
16801: LD_INT 21
16803: PPUSH
16804: CALL_OW 302
16808: AND
16809: PUSH
16810: LD_INT 112
16812: PPUSH
16813: CALL_OW 302
16817: AND
16818: PUSH
16819: LD_INT 22
16821: PUSH
16822: LD_INT 3
16824: PUSH
16825: EMPTY
16826: LIST
16827: LIST
16828: PUSH
16829: LD_INT 21
16831: PUSH
16832: LD_INT 2
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 50
16841: PUSH
16842: EMPTY
16843: LIST
16844: PUSH
16845: LD_INT 3
16847: PUSH
16848: LD_INT 58
16850: PUSH
16851: EMPTY
16852: LIST
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 69
16868: PUSH
16869: LD_INT 18
16871: PPUSH
16872: LD_INT 22
16874: PUSH
16875: LD_INT 3
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 21
16884: PUSH
16885: LD_INT 2
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PPUSH
16896: CALL_OW 70
16900: PUSH
16901: LD_INT 0
16903: EQUAL
16904: DIFF
16905: AND
16906: IFFALSE 17032
16908: GO 16910
16910: DISABLE
// begin enable ;
16911: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16912: LD_INT 3
16914: PPUSH
16915: LD_INT 21
16917: PPUSH
16918: LD_INT 3
16920: PUSH
16921: LD_INT 4
16923: PUSH
16924: LD_INT 5
16926: PUSH
16927: LD_INT 6
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: PUSH
16936: LD_OWVAR 67
16940: ARRAY
16941: PPUSH
16942: LD_INT 46
16944: PUSH
16945: LD_INT 45
16947: PUSH
16948: LD_INT 44
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: LIST
16955: PPUSH
16956: LD_INT 3
16958: PPUSH
16959: LD_INT 3
16961: PPUSH
16962: LD_INT 24
16964: PPUSH
16965: CALL 13994 0 7
// if russianTimeLapsers = 0 then
16969: LD_EXP 33
16973: PUSH
16974: LD_INT 0
16976: EQUAL
16977: IFFALSE 17032
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
16979: LD_INT 3
16981: PPUSH
16982: LD_INT 112
16984: PPUSH
16985: LD_INT 1
16987: PUSH
16988: LD_INT 2
16990: PUSH
16991: LD_INT 2
16993: PUSH
16994: LD_INT 2
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: PUSH
17003: LD_OWVAR 67
17007: ARRAY
17008: PPUSH
17009: LD_INT 49
17011: PUSH
17012: LD_INT 49
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: PPUSH
17019: LD_INT 3
17021: PPUSH
17022: LD_INT 3
17024: PPUSH
17025: LD_INT 24
17027: PPUSH
17028: CALL 13994 0 7
// end ;
17032: END
// every 0 0$1 trigger arabianMines do var i ;
17033: LD_EXP 37
17037: IFFALSE 17158
17039: GO 17041
17041: DISABLE
17042: LD_INT 0
17044: PPUSH
// begin enable ;
17045: ENABLE
// for i in arabianMines do
17046: LD_ADDR_VAR 0 1
17050: PUSH
17051: LD_EXP 37
17055: PUSH
17056: FOR_IN
17057: IFFALSE 17156
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17059: LD_INT 22
17061: PUSH
17062: LD_INT 1
17064: PUSH
17065: EMPTY
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 92
17071: PUSH
17072: LD_VAR 0 1
17076: PUSH
17077: LD_INT 1
17079: ARRAY
17080: PUSH
17081: LD_VAR 0 1
17085: PUSH
17086: LD_INT 2
17088: ARRAY
17089: PUSH
17090: LD_INT 3
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PPUSH
17103: CALL_OW 69
17107: IFFALSE 17154
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17109: LD_VAR 0 1
17113: PUSH
17114: LD_INT 1
17116: ARRAY
17117: PPUSH
17118: LD_VAR 0 1
17122: PUSH
17123: LD_INT 2
17125: ARRAY
17126: PPUSH
17127: LD_INT 5
17129: PPUSH
17130: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17134: LD_ADDR_EXP 37
17138: PUSH
17139: LD_EXP 37
17143: PPUSH
17144: LD_VAR 0 1
17148: PPUSH
17149: CALL_OW 3
17153: ST_TO_ADDR
// end ; end ;
17154: GO 17056
17156: POP
17157: POP
// end ;
17158: PPOPN 1
17160: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17161: LD_EXP 21
17165: PUSH
17166: LD_INT 4
17168: GREATEREQUAL
17169: PUSH
17170: LD_EXP 22
17174: PUSH
17175: LD_INT 12
17177: MOD
17178: PUSH
17179: LD_INT 0
17181: EQUAL
17182: AND
17183: IFFALSE 17297
17185: GO 17187
17187: DISABLE
17188: LD_INT 0
17190: PPUSH
17191: PPUSH
// begin enable ;
17192: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17193: LD_ADDR_VAR 0 2
17197: PUSH
17198: LD_INT 122
17200: PUSH
17201: LD_INT 142
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: LD_INT 101
17210: PUSH
17211: LD_INT 127
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 104
17220: PUSH
17221: LD_INT 104
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: LD_INT 46
17230: PUSH
17231: LD_INT 81
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17244: LD_ADDR_VAR 0 1
17248: PUSH
17249: LD_INT 1
17251: PPUSH
17252: LD_INT 4
17254: PPUSH
17255: CALL_OW 12
17259: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17260: LD_INT 10
17262: PPUSH
17263: LD_VAR 0 2
17267: PUSH
17268: LD_VAR 0 1
17272: ARRAY
17273: PUSH
17274: LD_INT 1
17276: ARRAY
17277: PPUSH
17278: LD_VAR 0 2
17282: PUSH
17283: LD_VAR 0 1
17287: ARRAY
17288: PUSH
17289: LD_INT 2
17291: ARRAY
17292: PPUSH
17293: CALL_OW 243
// end ; end_of_file
17297: PPOPN 2
17299: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17300: LD_INT 3
17302: PPUSH
17303: CALL_OW 301
17307: IFFALSE 17504
17309: GO 17311
17311: DISABLE
// begin DialogueOn ;
17312: CALL_OW 6
// if sciCounter = 0 then
17316: LD_EXP 28
17320: PUSH
17321: LD_INT 0
17323: EQUAL
17324: IFFALSE 17352
// begin Say ( JMM , D7a-JMM-1 ) ;
17326: LD_EXP 1
17330: PPUSH
17331: LD_STRING D7a-JMM-1
17333: PPUSH
17334: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17338: LD_EXP 15
17342: PPUSH
17343: LD_STRING D7a-Pow-1
17345: PPUSH
17346: CALL_OW 94
// end else
17350: GO 17496
// if sciCounter < 6 then
17352: LD_EXP 28
17356: PUSH
17357: LD_INT 6
17359: LESS
17360: IFFALSE 17388
// begin Say ( JMM , D7b-JMM-1 ) ;
17362: LD_EXP 1
17366: PPUSH
17367: LD_STRING D7b-JMM-1
17369: PPUSH
17370: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17374: LD_EXP 15
17378: PPUSH
17379: LD_STRING D7b-Pow-1
17381: PPUSH
17382: CALL_OW 94
// end else
17386: GO 17496
// begin Say ( JMM , D7c-JMM-1 ) ;
17388: LD_EXP 1
17392: PPUSH
17393: LD_STRING D7c-JMM-1
17395: PPUSH
17396: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17400: LD_EXP 15
17404: PPUSH
17405: LD_STRING D7c-Pow-1
17407: PPUSH
17408: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17412: LD_EXP 1
17416: PPUSH
17417: LD_STRING D7d-JMM-1
17419: PPUSH
17420: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17424: LD_EXP 15
17428: PPUSH
17429: LD_STRING D7d-Pow-1
17431: PPUSH
17432: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17436: LD_EXP 1
17440: PPUSH
17441: LD_STRING D7d-JMM-2
17443: PPUSH
17444: CALL_OW 88
// if askSiberite = 1 then
17448: LD_EXP 25
17452: PUSH
17453: LD_INT 1
17455: EQUAL
17456: IFFALSE 17472
// Say ( JMM , D7d-JMM-2a ) else
17458: LD_EXP 1
17462: PPUSH
17463: LD_STRING D7d-JMM-2a
17465: PPUSH
17466: CALL_OW 88
17470: GO 17484
// SayRadio ( Powell , D7d-Pow-2 ) ;
17472: LD_EXP 15
17476: PPUSH
17477: LD_STRING D7d-Pow-2
17479: PPUSH
17480: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17484: LD_EXP 15
17488: PPUSH
17489: LD_STRING D7d-Pow-2a
17491: PPUSH
17492: CALL_OW 94
// end ; DialogueOff ;
17496: CALL_OW 7
// FinishMission ;
17500: CALL 17505 0 0
// end ;
17504: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17505: LD_INT 0
17507: PPUSH
17508: PPUSH
17509: PPUSH
17510: PPUSH
// m1 := false ;
17511: LD_ADDR_VAR 0 2
17515: PUSH
17516: LD_INT 0
17518: ST_TO_ADDR
// m2 := false ;
17519: LD_ADDR_VAR 0 3
17523: PUSH
17524: LD_INT 0
17526: ST_TO_ADDR
// m3 := false ;
17527: LD_ADDR_VAR 0 4
17531: PUSH
17532: LD_INT 0
17534: ST_TO_ADDR
// if not westPathUsed then
17535: LD_EXP 42
17539: NOT
17540: IFFALSE 17549
// SetAchievement ( ACH_PATH ) ;
17542: LD_STRING ACH_PATH
17544: PPUSH
17545: CALL_OW 543
// if not rocketBuilded then
17549: LD_EXP 44
17553: NOT
17554: IFFALSE 17570
// begin wait ( 3 ) ;
17556: LD_INT 3
17558: PPUSH
17559: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17563: LD_STRING ACH_ROCKET
17565: PPUSH
17566: CALL_OW 543
// end ; if tick <= 40 40$00 then
17570: LD_OWVAR 1
17574: PUSH
17575: LD_INT 84000
17577: LESSEQUAL
17578: IFFALSE 17594
// begin wait ( 3 ) ;
17580: LD_INT 3
17582: PPUSH
17583: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17587: LD_STRING ACH_ASPEED_12
17589: PPUSH
17590: CALL_OW 543
// end ; if teleportExplored = 1 then
17594: LD_EXP 26
17598: PUSH
17599: LD_INT 1
17601: EQUAL
17602: IFFALSE 17624
// begin m1 := true ;
17604: LD_ADDR_VAR 0 2
17608: PUSH
17609: LD_INT 1
17611: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17612: LD_STRING Teleport
17614: PPUSH
17615: LD_INT 1
17617: PPUSH
17618: CALL_OW 101
// end else
17622: GO 17635
// AddMedal ( Teleport , - 1 ) ;
17624: LD_STRING Teleport
17626: PPUSH
17627: LD_INT 1
17629: NEG
17630: PPUSH
17631: CALL_OW 101
// if sciCounter > 2 then
17635: LD_EXP 28
17639: PUSH
17640: LD_INT 2
17642: GREATER
17643: IFFALSE 17665
// begin m2 := true ;
17645: LD_ADDR_VAR 0 3
17649: PUSH
17650: LD_INT 1
17652: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17653: LD_STRING Materials
17655: PPUSH
17656: LD_INT 1
17658: PPUSH
17659: CALL_OW 101
// end else
17663: GO 17676
// AddMedal ( Materials , - 1 ) ;
17665: LD_STRING Materials
17667: PPUSH
17668: LD_INT 1
17670: NEG
17671: PPUSH
17672: CALL_OW 101
// if sciCounter >= 6 then
17676: LD_EXP 28
17680: PUSH
17681: LD_INT 6
17683: GREATEREQUAL
17684: IFFALSE 17716
// begin m3 := true ;
17686: LD_ADDR_VAR 0 4
17690: PUSH
17691: LD_INT 1
17693: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17694: LD_STRING Scientists
17696: PPUSH
17697: LD_INT 1
17699: PPUSH
17700: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17704: LD_INT 1
17706: PPUSH
17707: LD_STRING 12_SciDed_1
17709: PPUSH
17710: CALL_OW 39
// end else
17714: GO 17737
// begin AddMedal ( Scientists , - 1 ) ;
17716: LD_STRING Scientists
17718: PPUSH
17719: LD_INT 1
17721: NEG
17722: PPUSH
17723: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17727: LD_INT 0
17729: PPUSH
17730: LD_STRING 12_SciDed_1
17732: PPUSH
17733: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17737: LD_EXP 24
17741: PPUSH
17742: LD_STRING 12_MainDepositFake_1
17744: PPUSH
17745: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
17749: LD_VAR 0 2
17753: PUSH
17754: LD_VAR 0 3
17758: AND
17759: PUSH
17760: LD_VAR 0 4
17764: AND
17765: PUSH
17766: LD_OWVAR 67
17770: PUSH
17771: LD_INT 3
17773: GREATEREQUAL
17774: AND
17775: IFFALSE 17787
// SetAchievementEX ( ACH_AMER , 12 ) ;
17777: LD_STRING ACH_AMER
17779: PPUSH
17780: LD_INT 12
17782: PPUSH
17783: CALL_OW 564
// GiveMedals ( MAIN ) ;
17787: LD_STRING MAIN
17789: PPUSH
17790: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
17794: LD_INT 22
17796: PUSH
17797: LD_INT 1
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: PUSH
17804: LD_INT 21
17806: PUSH
17807: LD_INT 1
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: PUSH
17814: LD_INT 2
17816: PUSH
17817: LD_INT 25
17819: PUSH
17820: LD_INT 1
17822: PUSH
17823: EMPTY
17824: LIST
17825: LIST
17826: PUSH
17827: LD_INT 25
17829: PUSH
17830: LD_INT 2
17832: PUSH
17833: EMPTY
17834: LIST
17835: LIST
17836: PUSH
17837: LD_INT 25
17839: PUSH
17840: LD_INT 3
17842: PUSH
17843: EMPTY
17844: LIST
17845: LIST
17846: PUSH
17847: LD_INT 25
17849: PUSH
17850: LD_INT 4
17852: PUSH
17853: EMPTY
17854: LIST
17855: LIST
17856: PUSH
17857: LD_INT 25
17859: PUSH
17860: LD_INT 5
17862: PUSH
17863: EMPTY
17864: LIST
17865: LIST
17866: PUSH
17867: LD_INT 25
17869: PUSH
17870: LD_INT 8
17872: PUSH
17873: EMPTY
17874: LIST
17875: LIST
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: PUSH
17886: EMPTY
17887: LIST
17888: LIST
17889: LIST
17890: PPUSH
17891: CALL_OW 69
17895: PPUSH
17896: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
17900: LD_EXP 1
17904: PPUSH
17905: LD_EXP 39
17909: PUSH
17910: LD_STRING JMM
17912: STR
17913: PPUSH
17914: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
17918: LD_EXP 7
17922: PPUSH
17923: LD_EXP 39
17927: PUSH
17928: LD_STRING Brown
17930: STR
17931: PPUSH
17932: CALL 12089 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
17936: LD_EXP 3
17940: PPUSH
17941: LD_EXP 39
17945: PUSH
17946: LD_STRING Donaldson
17948: STR
17949: PPUSH
17950: CALL 12089 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
17954: LD_EXP 4
17958: PPUSH
17959: LD_EXP 39
17963: PUSH
17964: LD_STRING Bobby
17966: STR
17967: PPUSH
17968: CALL 12089 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
17972: LD_EXP 5
17976: PPUSH
17977: LD_EXP 39
17981: PUSH
17982: LD_STRING Cyrus
17984: STR
17985: PPUSH
17986: CALL 12089 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
17990: LD_EXP 2
17994: PPUSH
17995: LD_EXP 39
17999: PUSH
18000: LD_STRING Lisa
18002: STR
18003: PPUSH
18004: CALL 12089 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18008: LD_EXP 12
18012: PPUSH
18013: LD_EXP 39
18017: PUSH
18018: LD_STRING Frank
18020: STR
18021: PPUSH
18022: CALL 12089 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18026: LD_EXP 13
18030: PPUSH
18031: LD_EXP 39
18035: PUSH
18036: LD_STRING Kikuchi
18038: STR
18039: PPUSH
18040: CALL 12089 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18044: LD_EXP 9
18048: PPUSH
18049: LD_EXP 39
18053: PUSH
18054: LD_STRING Houten
18056: STR
18057: PPUSH
18058: CALL 12089 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18062: LD_EXP 11
18066: PPUSH
18067: LD_EXP 39
18071: PUSH
18072: LD_STRING Gary
18074: STR
18075: PPUSH
18076: CALL 12089 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18080: LD_EXP 10
18084: PPUSH
18085: LD_EXP 39
18089: PUSH
18090: LD_STRING Cornell
18092: STR
18093: PPUSH
18094: CALL 12089 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18098: LD_EXP 6
18102: PPUSH
18103: LD_EXP 39
18107: PUSH
18108: LD_STRING Denis
18110: STR
18111: PPUSH
18112: CALL 12089 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18116: LD_EXP 8
18120: PPUSH
18121: LD_EXP 39
18125: PUSH
18126: LD_STRING Gladstone
18128: STR
18129: PPUSH
18130: CALL 12089 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18134: LD_INT 22
18136: PUSH
18137: LD_INT 1
18139: PUSH
18140: EMPTY
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 23
18146: PUSH
18147: LD_INT 1
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PUSH
18154: LD_INT 21
18156: PUSH
18157: LD_INT 1
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 2
18166: PUSH
18167: LD_INT 25
18169: PUSH
18170: LD_INT 1
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 25
18179: PUSH
18180: LD_INT 2
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 25
18189: PUSH
18190: LD_INT 3
18192: PUSH
18193: EMPTY
18194: LIST
18195: LIST
18196: PUSH
18197: LD_INT 25
18199: PUSH
18200: LD_INT 4
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 25
18209: PUSH
18210: LD_INT 5
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: LD_INT 25
18219: PUSH
18220: LD_INT 8
18222: PUSH
18223: EMPTY
18224: LIST
18225: LIST
18226: PUSH
18227: EMPTY
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: PPUSH
18242: CALL_OW 69
18246: PUSH
18247: LD_EXP 1
18251: PUSH
18252: LD_EXP 7
18256: PUSH
18257: LD_EXP 3
18261: PUSH
18262: LD_EXP 4
18266: PUSH
18267: LD_EXP 5
18271: PUSH
18272: LD_EXP 2
18276: PUSH
18277: LD_EXP 12
18281: PUSH
18282: LD_EXP 8
18286: PUSH
18287: LD_EXP 13
18291: PUSH
18292: LD_EXP 6
18296: PUSH
18297: LD_EXP 9
18301: PUSH
18302: LD_EXP 11
18306: PUSH
18307: LD_EXP 10
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: DIFF
18327: PPUSH
18328: LD_STRING 12_other_survivors
18330: PPUSH
18331: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18335: LD_INT 22
18337: PUSH
18338: LD_INT 1
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: PUSH
18345: LD_INT 23
18347: PUSH
18348: LD_INT 2
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 21
18357: PUSH
18358: LD_INT 1
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 2
18367: PUSH
18368: LD_INT 25
18370: PUSH
18371: LD_INT 1
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: PUSH
18378: LD_INT 25
18380: PUSH
18381: LD_INT 2
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: PUSH
18388: LD_INT 25
18390: PUSH
18391: LD_INT 3
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: PUSH
18398: LD_INT 25
18400: PUSH
18401: LD_INT 4
18403: PUSH
18404: EMPTY
18405: LIST
18406: LIST
18407: PUSH
18408: LD_INT 25
18410: PUSH
18411: LD_INT 5
18413: PUSH
18414: EMPTY
18415: LIST
18416: LIST
18417: PUSH
18418: LD_INT 25
18420: PUSH
18421: LD_INT 8
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: PUSH
18437: EMPTY
18438: LIST
18439: LIST
18440: LIST
18441: LIST
18442: PPUSH
18443: CALL_OW 69
18447: PPUSH
18448: LD_STRING 12_kurt_squad
18450: PPUSH
18451: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18455: LD_EXP 14
18459: PPUSH
18460: LD_STRING 12_others
18462: PPUSH
18463: CALL_OW 38
// YouWin ;
18467: CALL_OW 103
// end ; end_of_file
18471: LD_VAR 0 1
18475: RET
// every 0 0$01 trigger ruAI do
18476: LD_EXP 34
18480: IFFALSE 18790
18482: GO 18484
18484: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18485: LD_INT 280
18487: PPUSH
18488: CALL_OW 67
// if cratesSpawned < 12 then
18492: LD_EXP 38
18496: PUSH
18497: LD_INT 12
18499: LESS
18500: IFFALSE 18552
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18502: LD_INT 105
18504: PPUSH
18505: LD_INT 350
18507: PPUSH
18508: CALL_OW 12
18512: PPUSH
18513: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18517: LD_INT 3
18519: PPUSH
18520: LD_INT 5
18522: PPUSH
18523: CALL_OW 12
18527: PPUSH
18528: LD_INT 21
18530: PPUSH
18531: LD_INT 1
18533: PPUSH
18534: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18538: LD_ADDR_EXP 38
18542: PUSH
18543: LD_EXP 38
18547: PUSH
18548: LD_INT 1
18550: PLUS
18551: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18552: LD_EXP 38
18556: PUSH
18557: LD_INT 12
18559: GREATEREQUAL
18560: PUSH
18561: LD_EXP 38
18565: PUSH
18566: LD_INT 32
18568: LESS
18569: AND
18570: IFFALSE 18622
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18572: LD_INT 420
18574: PPUSH
18575: LD_INT 700
18577: PPUSH
18578: CALL_OW 12
18582: PPUSH
18583: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18587: LD_INT 3
18589: PPUSH
18590: LD_INT 5
18592: PPUSH
18593: CALL_OW 12
18597: PPUSH
18598: LD_INT 21
18600: PPUSH
18601: LD_INT 1
18603: PPUSH
18604: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18608: LD_ADDR_EXP 38
18612: PUSH
18613: LD_EXP 38
18617: PUSH
18618: LD_INT 1
18620: PLUS
18621: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18622: LD_EXP 38
18626: PUSH
18627: LD_INT 32
18629: GREATEREQUAL
18630: IFFALSE 18704
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18632: LD_INT 21
18634: PPUSH
18635: CALL_OW 435
18639: PUSH
18640: LD_INT 14
18642: LESS
18643: IFFALSE 18654
// wait ( 0 0$10 ) else
18645: LD_INT 350
18647: PPUSH
18648: CALL_OW 67
18652: GO 18669
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18654: LD_INT 1750
18656: PPUSH
18657: LD_INT 3150
18659: PPUSH
18660: CALL_OW 12
18664: PPUSH
18665: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18669: LD_INT 2
18671: PPUSH
18672: LD_INT 5
18674: PPUSH
18675: CALL_OW 12
18679: PPUSH
18680: LD_INT 21
18682: PPUSH
18683: LD_INT 1
18685: PPUSH
18686: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18690: LD_ADDR_EXP 38
18694: PUSH
18695: LD_EXP 38
18699: PUSH
18700: LD_INT 1
18702: PLUS
18703: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18704: LD_EXP 38
18708: PUSH
18709: LD_INT 110
18711: GREATEREQUAL
18712: IFFALSE 18786
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18714: LD_INT 21
18716: PPUSH
18717: CALL_OW 435
18721: PUSH
18722: LD_INT 14
18724: LESS
18725: IFFALSE 18736
// wait ( 0 0$20 ) else
18727: LD_INT 700
18729: PPUSH
18730: CALL_OW 67
18734: GO 18751
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18736: LD_INT 2450
18738: PPUSH
18739: LD_INT 3850
18741: PPUSH
18742: CALL_OW 12
18746: PPUSH
18747: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
18751: LD_INT 1
18753: PPUSH
18754: LD_INT 5
18756: PPUSH
18757: CALL_OW 12
18761: PPUSH
18762: LD_INT 21
18764: PPUSH
18765: LD_INT 1
18767: PPUSH
18768: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18772: LD_ADDR_EXP 38
18776: PUSH
18777: LD_EXP 38
18781: PUSH
18782: LD_INT 1
18784: PLUS
18785: ST_TO_ADDR
// end ; until false ;
18786: LD_INT 0
18788: IFFALSE 18485
// end ; end_of_file
18790: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont ; export function InitGlobalVariables ; begin
18791: LD_INT 0
18793: PPUSH
// ar_miner := 81 ;
18794: LD_ADDR_EXP 52
18798: PUSH
18799: LD_INT 81
18801: ST_TO_ADDR
// ar_crane := 88 ;
18802: LD_ADDR_EXP 51
18806: PUSH
18807: LD_INT 88
18809: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
18810: LD_ADDR_EXP 46
18814: PUSH
18815: LD_INT 89
18817: ST_TO_ADDR
// us_hack := 99 ;
18818: LD_ADDR_EXP 47
18822: PUSH
18823: LD_INT 99
18825: ST_TO_ADDR
// us_artillery := 97 ;
18826: LD_ADDR_EXP 48
18830: PUSH
18831: LD_INT 97
18833: ST_TO_ADDR
// ar_bio_bomb := 91 ;
18834: LD_ADDR_EXP 49
18838: PUSH
18839: LD_INT 91
18841: ST_TO_ADDR
// ar_mortar := 92 ;
18842: LD_ADDR_EXP 50
18846: PUSH
18847: LD_INT 92
18849: ST_TO_ADDR
// ru_flamethrower := 93 ;
18850: LD_ADDR_EXP 53
18854: PUSH
18855: LD_INT 93
18857: ST_TO_ADDR
// ru_radar := 98 ;
18858: LD_ADDR_EXP 45
18862: PUSH
18863: LD_INT 98
18865: ST_TO_ADDR
// tech_Artillery := 80 ;
18866: LD_ADDR_EXP 54
18870: PUSH
18871: LD_INT 80
18873: ST_TO_ADDR
// tech_RadMat := 81 ;
18874: LD_ADDR_EXP 55
18878: PUSH
18879: LD_INT 81
18881: ST_TO_ADDR
// tech_BasicTools := 82 ;
18882: LD_ADDR_EXP 56
18886: PUSH
18887: LD_INT 82
18889: ST_TO_ADDR
// tech_Cargo := 83 ;
18890: LD_ADDR_EXP 57
18894: PUSH
18895: LD_INT 83
18897: ST_TO_ADDR
// tech_Track := 84 ;
18898: LD_ADDR_EXP 58
18902: PUSH
18903: LD_INT 84
18905: ST_TO_ADDR
// tech_Crane := 85 ;
18906: LD_ADDR_EXP 59
18910: PUSH
18911: LD_INT 85
18913: ST_TO_ADDR
// tech_Bulldozer := 86 ;
18914: LD_ADDR_EXP 60
18918: PUSH
18919: LD_INT 86
18921: ST_TO_ADDR
// tech_Hovercraft := 87 ;
18922: LD_ADDR_EXP 61
18926: PUSH
18927: LD_INT 87
18929: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
18930: LD_ADDR_EXP 62
18934: PUSH
18935: LD_INT 88
18937: ST_TO_ADDR
// class_mastodont := 31 ;
18938: LD_ADDR_EXP 63
18942: PUSH
18943: LD_INT 31
18945: ST_TO_ADDR
// end ;
18946: LD_VAR 0 1
18950: RET
// every 1 do
18951: GO 18953
18953: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
18954: CALL 18791 0 0
18958: END
// every 0 0$1 do
18959: GO 18961
18961: DISABLE
// begin enable ;
18962: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18963: LD_STRING updateTimer(
18965: PUSH
18966: LD_OWVAR 1
18970: STR
18971: PUSH
18972: LD_STRING );
18974: STR
18975: PPUSH
18976: CALL_OW 559
// end ;
18980: END
// export function SOS_MapStart ( ) ; begin
18981: LD_INT 0
18983: PPUSH
// if streamModeActive then
18984: LD_EXP 64
18988: IFFALSE 18997
// DefineStreamItems ( true ) ;
18990: LD_INT 1
18992: PPUSH
18993: CALL 20651 0 1
// UpdateFactoryWaypoints ( ) ;
18997: CALL 33512 0 0
// UpdateWarhouseGatheringPoints ( ) ;
19001: CALL 33769 0 0
// end ;
19005: LD_VAR 0 1
19009: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19010: LD_INT 0
19012: PPUSH
// if p2 = 100 then
19013: LD_VAR 0 2
19017: PUSH
19018: LD_INT 100
19020: EQUAL
19021: IFFALSE 20024
// begin if not StreamModeActive then
19023: LD_EXP 64
19027: NOT
19028: IFFALSE 19038
// StreamModeActive := true ;
19030: LD_ADDR_EXP 64
19034: PUSH
19035: LD_INT 1
19037: ST_TO_ADDR
// if p3 = 0 then
19038: LD_VAR 0 3
19042: PUSH
19043: LD_INT 0
19045: EQUAL
19046: IFFALSE 19052
// InitStreamMode ;
19048: CALL 20187 0 0
// if p3 = 1 then
19052: LD_VAR 0 3
19056: PUSH
19057: LD_INT 1
19059: EQUAL
19060: IFFALSE 19070
// sRocket := true ;
19062: LD_ADDR_EXP 69
19066: PUSH
19067: LD_INT 1
19069: ST_TO_ADDR
// if p3 = 2 then
19070: LD_VAR 0 3
19074: PUSH
19075: LD_INT 2
19077: EQUAL
19078: IFFALSE 19088
// sSpeed := true ;
19080: LD_ADDR_EXP 68
19084: PUSH
19085: LD_INT 1
19087: ST_TO_ADDR
// if p3 = 3 then
19088: LD_VAR 0 3
19092: PUSH
19093: LD_INT 3
19095: EQUAL
19096: IFFALSE 19106
// sEngine := true ;
19098: LD_ADDR_EXP 70
19102: PUSH
19103: LD_INT 1
19105: ST_TO_ADDR
// if p3 = 4 then
19106: LD_VAR 0 3
19110: PUSH
19111: LD_INT 4
19113: EQUAL
19114: IFFALSE 19124
// sSpec := true ;
19116: LD_ADDR_EXP 67
19120: PUSH
19121: LD_INT 1
19123: ST_TO_ADDR
// if p3 = 5 then
19124: LD_VAR 0 3
19128: PUSH
19129: LD_INT 5
19131: EQUAL
19132: IFFALSE 19142
// sLevel := true ;
19134: LD_ADDR_EXP 71
19138: PUSH
19139: LD_INT 1
19141: ST_TO_ADDR
// if p3 = 6 then
19142: LD_VAR 0 3
19146: PUSH
19147: LD_INT 6
19149: EQUAL
19150: IFFALSE 19160
// sArmoury := true ;
19152: LD_ADDR_EXP 72
19156: PUSH
19157: LD_INT 1
19159: ST_TO_ADDR
// if p3 = 7 then
19160: LD_VAR 0 3
19164: PUSH
19165: LD_INT 7
19167: EQUAL
19168: IFFALSE 19178
// sRadar := true ;
19170: LD_ADDR_EXP 73
19174: PUSH
19175: LD_INT 1
19177: ST_TO_ADDR
// if p3 = 8 then
19178: LD_VAR 0 3
19182: PUSH
19183: LD_INT 8
19185: EQUAL
19186: IFFALSE 19196
// sBunker := true ;
19188: LD_ADDR_EXP 74
19192: PUSH
19193: LD_INT 1
19195: ST_TO_ADDR
// if p3 = 9 then
19196: LD_VAR 0 3
19200: PUSH
19201: LD_INT 9
19203: EQUAL
19204: IFFALSE 19214
// sHack := true ;
19206: LD_ADDR_EXP 75
19210: PUSH
19211: LD_INT 1
19213: ST_TO_ADDR
// if p3 = 10 then
19214: LD_VAR 0 3
19218: PUSH
19219: LD_INT 10
19221: EQUAL
19222: IFFALSE 19232
// sFire := true ;
19224: LD_ADDR_EXP 76
19228: PUSH
19229: LD_INT 1
19231: ST_TO_ADDR
// if p3 = 11 then
19232: LD_VAR 0 3
19236: PUSH
19237: LD_INT 11
19239: EQUAL
19240: IFFALSE 19250
// sRefresh := true ;
19242: LD_ADDR_EXP 77
19246: PUSH
19247: LD_INT 1
19249: ST_TO_ADDR
// if p3 = 12 then
19250: LD_VAR 0 3
19254: PUSH
19255: LD_INT 12
19257: EQUAL
19258: IFFALSE 19268
// sExp := true ;
19260: LD_ADDR_EXP 78
19264: PUSH
19265: LD_INT 1
19267: ST_TO_ADDR
// if p3 = 13 then
19268: LD_VAR 0 3
19272: PUSH
19273: LD_INT 13
19275: EQUAL
19276: IFFALSE 19286
// sDepot := true ;
19278: LD_ADDR_EXP 79
19282: PUSH
19283: LD_INT 1
19285: ST_TO_ADDR
// if p3 = 14 then
19286: LD_VAR 0 3
19290: PUSH
19291: LD_INT 14
19293: EQUAL
19294: IFFALSE 19304
// sFlag := true ;
19296: LD_ADDR_EXP 80
19300: PUSH
19301: LD_INT 1
19303: ST_TO_ADDR
// if p3 = 15 then
19304: LD_VAR 0 3
19308: PUSH
19309: LD_INT 15
19311: EQUAL
19312: IFFALSE 19322
// sKamikadze := true ;
19314: LD_ADDR_EXP 88
19318: PUSH
19319: LD_INT 1
19321: ST_TO_ADDR
// if p3 = 16 then
19322: LD_VAR 0 3
19326: PUSH
19327: LD_INT 16
19329: EQUAL
19330: IFFALSE 19340
// sTroll := true ;
19332: LD_ADDR_EXP 89
19336: PUSH
19337: LD_INT 1
19339: ST_TO_ADDR
// if p3 = 17 then
19340: LD_VAR 0 3
19344: PUSH
19345: LD_INT 17
19347: EQUAL
19348: IFFALSE 19358
// sSlow := true ;
19350: LD_ADDR_EXP 90
19354: PUSH
19355: LD_INT 1
19357: ST_TO_ADDR
// if p3 = 18 then
19358: LD_VAR 0 3
19362: PUSH
19363: LD_INT 18
19365: EQUAL
19366: IFFALSE 19376
// sLack := true ;
19368: LD_ADDR_EXP 91
19372: PUSH
19373: LD_INT 1
19375: ST_TO_ADDR
// if p3 = 19 then
19376: LD_VAR 0 3
19380: PUSH
19381: LD_INT 19
19383: EQUAL
19384: IFFALSE 19394
// sTank := true ;
19386: LD_ADDR_EXP 93
19390: PUSH
19391: LD_INT 1
19393: ST_TO_ADDR
// if p3 = 20 then
19394: LD_VAR 0 3
19398: PUSH
19399: LD_INT 20
19401: EQUAL
19402: IFFALSE 19412
// sRemote := true ;
19404: LD_ADDR_EXP 94
19408: PUSH
19409: LD_INT 1
19411: ST_TO_ADDR
// if p3 = 21 then
19412: LD_VAR 0 3
19416: PUSH
19417: LD_INT 21
19419: EQUAL
19420: IFFALSE 19430
// sPowell := true ;
19422: LD_ADDR_EXP 95
19426: PUSH
19427: LD_INT 1
19429: ST_TO_ADDR
// if p3 = 22 then
19430: LD_VAR 0 3
19434: PUSH
19435: LD_INT 22
19437: EQUAL
19438: IFFALSE 19448
// sTeleport := true ;
19440: LD_ADDR_EXP 98
19444: PUSH
19445: LD_INT 1
19447: ST_TO_ADDR
// if p3 = 23 then
19448: LD_VAR 0 3
19452: PUSH
19453: LD_INT 23
19455: EQUAL
19456: IFFALSE 19466
// sOilTower := true ;
19458: LD_ADDR_EXP 100
19462: PUSH
19463: LD_INT 1
19465: ST_TO_ADDR
// if p3 = 24 then
19466: LD_VAR 0 3
19470: PUSH
19471: LD_INT 24
19473: EQUAL
19474: IFFALSE 19484
// sShovel := true ;
19476: LD_ADDR_EXP 101
19480: PUSH
19481: LD_INT 1
19483: ST_TO_ADDR
// if p3 = 25 then
19484: LD_VAR 0 3
19488: PUSH
19489: LD_INT 25
19491: EQUAL
19492: IFFALSE 19502
// sSheik := true ;
19494: LD_ADDR_EXP 102
19498: PUSH
19499: LD_INT 1
19501: ST_TO_ADDR
// if p3 = 26 then
19502: LD_VAR 0 3
19506: PUSH
19507: LD_INT 26
19509: EQUAL
19510: IFFALSE 19520
// sEarthquake := true ;
19512: LD_ADDR_EXP 104
19516: PUSH
19517: LD_INT 1
19519: ST_TO_ADDR
// if p3 = 27 then
19520: LD_VAR 0 3
19524: PUSH
19525: LD_INT 27
19527: EQUAL
19528: IFFALSE 19538
// sAI := true ;
19530: LD_ADDR_EXP 105
19534: PUSH
19535: LD_INT 1
19537: ST_TO_ADDR
// if p3 = 28 then
19538: LD_VAR 0 3
19542: PUSH
19543: LD_INT 28
19545: EQUAL
19546: IFFALSE 19556
// sCargo := true ;
19548: LD_ADDR_EXP 108
19552: PUSH
19553: LD_INT 1
19555: ST_TO_ADDR
// if p3 = 29 then
19556: LD_VAR 0 3
19560: PUSH
19561: LD_INT 29
19563: EQUAL
19564: IFFALSE 19574
// sDLaser := true ;
19566: LD_ADDR_EXP 109
19570: PUSH
19571: LD_INT 1
19573: ST_TO_ADDR
// if p3 = 30 then
19574: LD_VAR 0 3
19578: PUSH
19579: LD_INT 30
19581: EQUAL
19582: IFFALSE 19592
// sExchange := true ;
19584: LD_ADDR_EXP 110
19588: PUSH
19589: LD_INT 1
19591: ST_TO_ADDR
// if p3 = 31 then
19592: LD_VAR 0 3
19596: PUSH
19597: LD_INT 31
19599: EQUAL
19600: IFFALSE 19610
// sFac := true ;
19602: LD_ADDR_EXP 111
19606: PUSH
19607: LD_INT 1
19609: ST_TO_ADDR
// if p3 = 32 then
19610: LD_VAR 0 3
19614: PUSH
19615: LD_INT 32
19617: EQUAL
19618: IFFALSE 19628
// sPower := true ;
19620: LD_ADDR_EXP 112
19624: PUSH
19625: LD_INT 1
19627: ST_TO_ADDR
// if p3 = 33 then
19628: LD_VAR 0 3
19632: PUSH
19633: LD_INT 33
19635: EQUAL
19636: IFFALSE 19646
// sRandom := true ;
19638: LD_ADDR_EXP 113
19642: PUSH
19643: LD_INT 1
19645: ST_TO_ADDR
// if p3 = 34 then
19646: LD_VAR 0 3
19650: PUSH
19651: LD_INT 34
19653: EQUAL
19654: IFFALSE 19664
// sShield := true ;
19656: LD_ADDR_EXP 114
19660: PUSH
19661: LD_INT 1
19663: ST_TO_ADDR
// if p3 = 35 then
19664: LD_VAR 0 3
19668: PUSH
19669: LD_INT 35
19671: EQUAL
19672: IFFALSE 19682
// sTime := true ;
19674: LD_ADDR_EXP 115
19678: PUSH
19679: LD_INT 1
19681: ST_TO_ADDR
// if p3 = 36 then
19682: LD_VAR 0 3
19686: PUSH
19687: LD_INT 36
19689: EQUAL
19690: IFFALSE 19700
// sTools := true ;
19692: LD_ADDR_EXP 116
19696: PUSH
19697: LD_INT 1
19699: ST_TO_ADDR
// if p3 = 101 then
19700: LD_VAR 0 3
19704: PUSH
19705: LD_INT 101
19707: EQUAL
19708: IFFALSE 19718
// sSold := true ;
19710: LD_ADDR_EXP 81
19714: PUSH
19715: LD_INT 1
19717: ST_TO_ADDR
// if p3 = 102 then
19718: LD_VAR 0 3
19722: PUSH
19723: LD_INT 102
19725: EQUAL
19726: IFFALSE 19736
// sDiff := true ;
19728: LD_ADDR_EXP 82
19732: PUSH
19733: LD_INT 1
19735: ST_TO_ADDR
// if p3 = 103 then
19736: LD_VAR 0 3
19740: PUSH
19741: LD_INT 103
19743: EQUAL
19744: IFFALSE 19754
// sFog := true ;
19746: LD_ADDR_EXP 85
19750: PUSH
19751: LD_INT 1
19753: ST_TO_ADDR
// if p3 = 104 then
19754: LD_VAR 0 3
19758: PUSH
19759: LD_INT 104
19761: EQUAL
19762: IFFALSE 19772
// sReset := true ;
19764: LD_ADDR_EXP 86
19768: PUSH
19769: LD_INT 1
19771: ST_TO_ADDR
// if p3 = 105 then
19772: LD_VAR 0 3
19776: PUSH
19777: LD_INT 105
19779: EQUAL
19780: IFFALSE 19790
// sSun := true ;
19782: LD_ADDR_EXP 87
19786: PUSH
19787: LD_INT 1
19789: ST_TO_ADDR
// if p3 = 106 then
19790: LD_VAR 0 3
19794: PUSH
19795: LD_INT 106
19797: EQUAL
19798: IFFALSE 19808
// sTiger := true ;
19800: LD_ADDR_EXP 83
19804: PUSH
19805: LD_INT 1
19807: ST_TO_ADDR
// if p3 = 107 then
19808: LD_VAR 0 3
19812: PUSH
19813: LD_INT 107
19815: EQUAL
19816: IFFALSE 19826
// sBomb := true ;
19818: LD_ADDR_EXP 84
19822: PUSH
19823: LD_INT 1
19825: ST_TO_ADDR
// if p3 = 108 then
19826: LD_VAR 0 3
19830: PUSH
19831: LD_INT 108
19833: EQUAL
19834: IFFALSE 19844
// sWound := true ;
19836: LD_ADDR_EXP 92
19840: PUSH
19841: LD_INT 1
19843: ST_TO_ADDR
// if p3 = 109 then
19844: LD_VAR 0 3
19848: PUSH
19849: LD_INT 109
19851: EQUAL
19852: IFFALSE 19862
// sBetray := true ;
19854: LD_ADDR_EXP 96
19858: PUSH
19859: LD_INT 1
19861: ST_TO_ADDR
// if p3 = 110 then
19862: LD_VAR 0 3
19866: PUSH
19867: LD_INT 110
19869: EQUAL
19870: IFFALSE 19880
// sContamin := true ;
19872: LD_ADDR_EXP 97
19876: PUSH
19877: LD_INT 1
19879: ST_TO_ADDR
// if p3 = 111 then
19880: LD_VAR 0 3
19884: PUSH
19885: LD_INT 111
19887: EQUAL
19888: IFFALSE 19898
// sOil := true ;
19890: LD_ADDR_EXP 99
19894: PUSH
19895: LD_INT 1
19897: ST_TO_ADDR
// if p3 = 112 then
19898: LD_VAR 0 3
19902: PUSH
19903: LD_INT 112
19905: EQUAL
19906: IFFALSE 19916
// sStu := true ;
19908: LD_ADDR_EXP 103
19912: PUSH
19913: LD_INT 1
19915: ST_TO_ADDR
// if p3 = 113 then
19916: LD_VAR 0 3
19920: PUSH
19921: LD_INT 113
19923: EQUAL
19924: IFFALSE 19934
// sBazooka := true ;
19926: LD_ADDR_EXP 106
19930: PUSH
19931: LD_INT 1
19933: ST_TO_ADDR
// if p3 = 114 then
19934: LD_VAR 0 3
19938: PUSH
19939: LD_INT 114
19941: EQUAL
19942: IFFALSE 19952
// sMortar := true ;
19944: LD_ADDR_EXP 107
19948: PUSH
19949: LD_INT 1
19951: ST_TO_ADDR
// if p3 = 115 then
19952: LD_VAR 0 3
19956: PUSH
19957: LD_INT 115
19959: EQUAL
19960: IFFALSE 19970
// sRanger := true ;
19962: LD_ADDR_EXP 117
19966: PUSH
19967: LD_INT 1
19969: ST_TO_ADDR
// if p3 = 116 then
19970: LD_VAR 0 3
19974: PUSH
19975: LD_INT 116
19977: EQUAL
19978: IFFALSE 19988
// sComputer := true ;
19980: LD_ADDR_EXP 118
19984: PUSH
19985: LD_INT 1
19987: ST_TO_ADDR
// if p3 = 117 then
19988: LD_VAR 0 3
19992: PUSH
19993: LD_INT 117
19995: EQUAL
19996: IFFALSE 20006
// s30 := true ;
19998: LD_ADDR_EXP 119
20002: PUSH
20003: LD_INT 1
20005: ST_TO_ADDR
// if p3 = 118 then
20006: LD_VAR 0 3
20010: PUSH
20011: LD_INT 118
20013: EQUAL
20014: IFFALSE 20024
// s60 := true ;
20016: LD_ADDR_EXP 120
20020: PUSH
20021: LD_INT 1
20023: ST_TO_ADDR
// end ; if p2 = 101 then
20024: LD_VAR 0 2
20028: PUSH
20029: LD_INT 101
20031: EQUAL
20032: IFFALSE 20160
// begin case p3 of 1 :
20034: LD_VAR 0 3
20038: PUSH
20039: LD_INT 1
20041: DOUBLE
20042: EQUAL
20043: IFTRUE 20047
20045: GO 20054
20047: POP
// hHackUnlimitedResources ; 2 :
20048: CALL 32258 0 0
20052: GO 20160
20054: LD_INT 2
20056: DOUBLE
20057: EQUAL
20058: IFTRUE 20062
20060: GO 20069
20062: POP
// hHackSetLevel10 ; 3 :
20063: CALL 32391 0 0
20067: GO 20160
20069: LD_INT 3
20071: DOUBLE
20072: EQUAL
20073: IFTRUE 20077
20075: GO 20084
20077: POP
// hHackSetLevel10YourUnits ; 4 :
20078: CALL 32476 0 0
20082: GO 20160
20084: LD_INT 4
20086: DOUBLE
20087: EQUAL
20088: IFTRUE 20092
20090: GO 20099
20092: POP
// hHackInvincible ; 5 :
20093: CALL 32924 0 0
20097: GO 20160
20099: LD_INT 5
20101: DOUBLE
20102: EQUAL
20103: IFTRUE 20107
20105: GO 20114
20107: POP
// hHackInvisible ; 6 :
20108: CALL 33035 0 0
20112: GO 20160
20114: LD_INT 6
20116: DOUBLE
20117: EQUAL
20118: IFTRUE 20122
20120: GO 20129
20122: POP
// hHackChangeYourSide ; 7 :
20123: CALL 33092 0 0
20127: GO 20160
20129: LD_INT 7
20131: DOUBLE
20132: EQUAL
20133: IFTRUE 20137
20135: GO 20144
20137: POP
// hHackChangeUnitSide ; 8 :
20138: CALL 33134 0 0
20142: GO 20160
20144: LD_INT 8
20146: DOUBLE
20147: EQUAL
20148: IFTRUE 20152
20150: GO 20159
20152: POP
// hHackFog ; end ;
20153: CALL 33235 0 0
20157: GO 20160
20159: POP
// end ; end ;
20160: LD_VAR 0 7
20164: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20165: GO 20167
20167: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20168: LD_STRING initStreamRollete();
20170: PPUSH
20171: CALL_OW 559
// InitStreamMode ;
20175: CALL 20187 0 0
// DefineStreamItems ( false ) ;
20179: LD_INT 0
20181: PPUSH
20182: CALL 20651 0 1
// end ;
20186: END
// function InitStreamMode ; begin
20187: LD_INT 0
20189: PPUSH
// streamModeActive := false ;
20190: LD_ADDR_EXP 64
20194: PUSH
20195: LD_INT 0
20197: ST_TO_ADDR
// normalCounter := 36 ;
20198: LD_ADDR_EXP 65
20202: PUSH
20203: LD_INT 36
20205: ST_TO_ADDR
// hardcoreCounter := 18 ;
20206: LD_ADDR_EXP 66
20210: PUSH
20211: LD_INT 18
20213: ST_TO_ADDR
// sRocket := false ;
20214: LD_ADDR_EXP 69
20218: PUSH
20219: LD_INT 0
20221: ST_TO_ADDR
// sSpeed := false ;
20222: LD_ADDR_EXP 68
20226: PUSH
20227: LD_INT 0
20229: ST_TO_ADDR
// sEngine := false ;
20230: LD_ADDR_EXP 70
20234: PUSH
20235: LD_INT 0
20237: ST_TO_ADDR
// sSpec := false ;
20238: LD_ADDR_EXP 67
20242: PUSH
20243: LD_INT 0
20245: ST_TO_ADDR
// sLevel := false ;
20246: LD_ADDR_EXP 71
20250: PUSH
20251: LD_INT 0
20253: ST_TO_ADDR
// sArmoury := false ;
20254: LD_ADDR_EXP 72
20258: PUSH
20259: LD_INT 0
20261: ST_TO_ADDR
// sRadar := false ;
20262: LD_ADDR_EXP 73
20266: PUSH
20267: LD_INT 0
20269: ST_TO_ADDR
// sBunker := false ;
20270: LD_ADDR_EXP 74
20274: PUSH
20275: LD_INT 0
20277: ST_TO_ADDR
// sHack := false ;
20278: LD_ADDR_EXP 75
20282: PUSH
20283: LD_INT 0
20285: ST_TO_ADDR
// sFire := false ;
20286: LD_ADDR_EXP 76
20290: PUSH
20291: LD_INT 0
20293: ST_TO_ADDR
// sRefresh := false ;
20294: LD_ADDR_EXP 77
20298: PUSH
20299: LD_INT 0
20301: ST_TO_ADDR
// sExp := false ;
20302: LD_ADDR_EXP 78
20306: PUSH
20307: LD_INT 0
20309: ST_TO_ADDR
// sDepot := false ;
20310: LD_ADDR_EXP 79
20314: PUSH
20315: LD_INT 0
20317: ST_TO_ADDR
// sFlag := false ;
20318: LD_ADDR_EXP 80
20322: PUSH
20323: LD_INT 0
20325: ST_TO_ADDR
// sKamikadze := false ;
20326: LD_ADDR_EXP 88
20330: PUSH
20331: LD_INT 0
20333: ST_TO_ADDR
// sTroll := false ;
20334: LD_ADDR_EXP 89
20338: PUSH
20339: LD_INT 0
20341: ST_TO_ADDR
// sSlow := false ;
20342: LD_ADDR_EXP 90
20346: PUSH
20347: LD_INT 0
20349: ST_TO_ADDR
// sLack := false ;
20350: LD_ADDR_EXP 91
20354: PUSH
20355: LD_INT 0
20357: ST_TO_ADDR
// sTank := false ;
20358: LD_ADDR_EXP 93
20362: PUSH
20363: LD_INT 0
20365: ST_TO_ADDR
// sRemote := false ;
20366: LD_ADDR_EXP 94
20370: PUSH
20371: LD_INT 0
20373: ST_TO_ADDR
// sPowell := false ;
20374: LD_ADDR_EXP 95
20378: PUSH
20379: LD_INT 0
20381: ST_TO_ADDR
// sTeleport := false ;
20382: LD_ADDR_EXP 98
20386: PUSH
20387: LD_INT 0
20389: ST_TO_ADDR
// sOilTower := false ;
20390: LD_ADDR_EXP 100
20394: PUSH
20395: LD_INT 0
20397: ST_TO_ADDR
// sShovel := false ;
20398: LD_ADDR_EXP 101
20402: PUSH
20403: LD_INT 0
20405: ST_TO_ADDR
// sSheik := false ;
20406: LD_ADDR_EXP 102
20410: PUSH
20411: LD_INT 0
20413: ST_TO_ADDR
// sEarthquake := false ;
20414: LD_ADDR_EXP 104
20418: PUSH
20419: LD_INT 0
20421: ST_TO_ADDR
// sAI := false ;
20422: LD_ADDR_EXP 105
20426: PUSH
20427: LD_INT 0
20429: ST_TO_ADDR
// sCargo := false ;
20430: LD_ADDR_EXP 108
20434: PUSH
20435: LD_INT 0
20437: ST_TO_ADDR
// sDLaser := false ;
20438: LD_ADDR_EXP 109
20442: PUSH
20443: LD_INT 0
20445: ST_TO_ADDR
// sExchange := false ;
20446: LD_ADDR_EXP 110
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
// sFac := false ;
20454: LD_ADDR_EXP 111
20458: PUSH
20459: LD_INT 0
20461: ST_TO_ADDR
// sPower := false ;
20462: LD_ADDR_EXP 112
20466: PUSH
20467: LD_INT 0
20469: ST_TO_ADDR
// sRandom := false ;
20470: LD_ADDR_EXP 113
20474: PUSH
20475: LD_INT 0
20477: ST_TO_ADDR
// sShield := false ;
20478: LD_ADDR_EXP 114
20482: PUSH
20483: LD_INT 0
20485: ST_TO_ADDR
// sTime := false ;
20486: LD_ADDR_EXP 115
20490: PUSH
20491: LD_INT 0
20493: ST_TO_ADDR
// sTools := false ;
20494: LD_ADDR_EXP 116
20498: PUSH
20499: LD_INT 0
20501: ST_TO_ADDR
// sSold := false ;
20502: LD_ADDR_EXP 81
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// sDiff := false ;
20510: LD_ADDR_EXP 82
20514: PUSH
20515: LD_INT 0
20517: ST_TO_ADDR
// sFog := false ;
20518: LD_ADDR_EXP 85
20522: PUSH
20523: LD_INT 0
20525: ST_TO_ADDR
// sReset := false ;
20526: LD_ADDR_EXP 86
20530: PUSH
20531: LD_INT 0
20533: ST_TO_ADDR
// sSun := false ;
20534: LD_ADDR_EXP 87
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
// sTiger := false ;
20542: LD_ADDR_EXP 83
20546: PUSH
20547: LD_INT 0
20549: ST_TO_ADDR
// sBomb := false ;
20550: LD_ADDR_EXP 84
20554: PUSH
20555: LD_INT 0
20557: ST_TO_ADDR
// sWound := false ;
20558: LD_ADDR_EXP 92
20562: PUSH
20563: LD_INT 0
20565: ST_TO_ADDR
// sBetray := false ;
20566: LD_ADDR_EXP 96
20570: PUSH
20571: LD_INT 0
20573: ST_TO_ADDR
// sContamin := false ;
20574: LD_ADDR_EXP 97
20578: PUSH
20579: LD_INT 0
20581: ST_TO_ADDR
// sOil := false ;
20582: LD_ADDR_EXP 99
20586: PUSH
20587: LD_INT 0
20589: ST_TO_ADDR
// sStu := false ;
20590: LD_ADDR_EXP 103
20594: PUSH
20595: LD_INT 0
20597: ST_TO_ADDR
// sBazooka := false ;
20598: LD_ADDR_EXP 106
20602: PUSH
20603: LD_INT 0
20605: ST_TO_ADDR
// sMortar := false ;
20606: LD_ADDR_EXP 107
20610: PUSH
20611: LD_INT 0
20613: ST_TO_ADDR
// sRanger := false ;
20614: LD_ADDR_EXP 117
20618: PUSH
20619: LD_INT 0
20621: ST_TO_ADDR
// sComputer := false ;
20622: LD_ADDR_EXP 118
20626: PUSH
20627: LD_INT 0
20629: ST_TO_ADDR
// s30 := false ;
20630: LD_ADDR_EXP 119
20634: PUSH
20635: LD_INT 0
20637: ST_TO_ADDR
// s60 := false ;
20638: LD_ADDR_EXP 120
20642: PUSH
20643: LD_INT 0
20645: ST_TO_ADDR
// end ;
20646: LD_VAR 0 1
20650: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20651: LD_INT 0
20653: PPUSH
20654: PPUSH
20655: PPUSH
20656: PPUSH
20657: PPUSH
20658: PPUSH
20659: PPUSH
// result := [ ] ;
20660: LD_ADDR_VAR 0 2
20664: PUSH
20665: EMPTY
20666: ST_TO_ADDR
// if campaign_id = 1 then
20667: LD_OWVAR 69
20671: PUSH
20672: LD_INT 1
20674: EQUAL
20675: IFFALSE 23841
// begin case mission_number of 1 :
20677: LD_OWVAR 70
20681: PUSH
20682: LD_INT 1
20684: DOUBLE
20685: EQUAL
20686: IFTRUE 20690
20688: GO 20766
20690: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20691: LD_ADDR_VAR 0 2
20695: PUSH
20696: LD_INT 2
20698: PUSH
20699: LD_INT 4
20701: PUSH
20702: LD_INT 11
20704: PUSH
20705: LD_INT 12
20707: PUSH
20708: LD_INT 15
20710: PUSH
20711: LD_INT 16
20713: PUSH
20714: LD_INT 22
20716: PUSH
20717: LD_INT 23
20719: PUSH
20720: LD_INT 26
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: LIST
20730: LIST
20731: LIST
20732: LIST
20733: PUSH
20734: LD_INT 101
20736: PUSH
20737: LD_INT 102
20739: PUSH
20740: LD_INT 106
20742: PUSH
20743: LD_INT 116
20745: PUSH
20746: LD_INT 117
20748: PUSH
20749: LD_INT 118
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: LIST
20756: LIST
20757: LIST
20758: LIST
20759: PUSH
20760: EMPTY
20761: LIST
20762: LIST
20763: ST_TO_ADDR
20764: GO 23839
20766: LD_INT 2
20768: DOUBLE
20769: EQUAL
20770: IFTRUE 20774
20772: GO 20858
20774: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20775: LD_ADDR_VAR 0 2
20779: PUSH
20780: LD_INT 2
20782: PUSH
20783: LD_INT 4
20785: PUSH
20786: LD_INT 11
20788: PUSH
20789: LD_INT 12
20791: PUSH
20792: LD_INT 15
20794: PUSH
20795: LD_INT 16
20797: PUSH
20798: LD_INT 22
20800: PUSH
20801: LD_INT 23
20803: PUSH
20804: LD_INT 26
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: LIST
20816: LIST
20817: PUSH
20818: LD_INT 101
20820: PUSH
20821: LD_INT 102
20823: PUSH
20824: LD_INT 105
20826: PUSH
20827: LD_INT 106
20829: PUSH
20830: LD_INT 108
20832: PUSH
20833: LD_INT 116
20835: PUSH
20836: LD_INT 117
20838: PUSH
20839: LD_INT 118
20841: PUSH
20842: EMPTY
20843: LIST
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: LIST
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: ST_TO_ADDR
20856: GO 23839
20858: LD_INT 3
20860: DOUBLE
20861: EQUAL
20862: IFTRUE 20866
20864: GO 20954
20866: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20867: LD_ADDR_VAR 0 2
20871: PUSH
20872: LD_INT 2
20874: PUSH
20875: LD_INT 4
20877: PUSH
20878: LD_INT 5
20880: PUSH
20881: LD_INT 11
20883: PUSH
20884: LD_INT 12
20886: PUSH
20887: LD_INT 15
20889: PUSH
20890: LD_INT 16
20892: PUSH
20893: LD_INT 22
20895: PUSH
20896: LD_INT 26
20898: PUSH
20899: LD_INT 36
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: LIST
20909: LIST
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: LD_INT 101
20916: PUSH
20917: LD_INT 102
20919: PUSH
20920: LD_INT 105
20922: PUSH
20923: LD_INT 106
20925: PUSH
20926: LD_INT 108
20928: PUSH
20929: LD_INT 116
20931: PUSH
20932: LD_INT 117
20934: PUSH
20935: LD_INT 118
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: LIST
20942: LIST
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: ST_TO_ADDR
20952: GO 23839
20954: LD_INT 4
20956: DOUBLE
20957: EQUAL
20958: IFTRUE 20962
20960: GO 21058
20962: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
20963: LD_ADDR_VAR 0 2
20967: PUSH
20968: LD_INT 2
20970: PUSH
20971: LD_INT 4
20973: PUSH
20974: LD_INT 5
20976: PUSH
20977: LD_INT 8
20979: PUSH
20980: LD_INT 11
20982: PUSH
20983: LD_INT 12
20985: PUSH
20986: LD_INT 15
20988: PUSH
20989: LD_INT 16
20991: PUSH
20992: LD_INT 22
20994: PUSH
20995: LD_INT 23
20997: PUSH
20998: LD_INT 26
21000: PUSH
21001: LD_INT 36
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 101
21020: PUSH
21021: LD_INT 102
21023: PUSH
21024: LD_INT 105
21026: PUSH
21027: LD_INT 106
21029: PUSH
21030: LD_INT 108
21032: PUSH
21033: LD_INT 116
21035: PUSH
21036: LD_INT 117
21038: PUSH
21039: LD_INT 118
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: ST_TO_ADDR
21056: GO 23839
21058: LD_INT 5
21060: DOUBLE
21061: EQUAL
21062: IFTRUE 21066
21064: GO 21178
21066: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21067: LD_ADDR_VAR 0 2
21071: PUSH
21072: LD_INT 2
21074: PUSH
21075: LD_INT 4
21077: PUSH
21078: LD_INT 5
21080: PUSH
21081: LD_INT 6
21083: PUSH
21084: LD_INT 8
21086: PUSH
21087: LD_INT 11
21089: PUSH
21090: LD_INT 12
21092: PUSH
21093: LD_INT 15
21095: PUSH
21096: LD_INT 16
21098: PUSH
21099: LD_INT 22
21101: PUSH
21102: LD_INT 23
21104: PUSH
21105: LD_INT 25
21107: PUSH
21108: LD_INT 26
21110: PUSH
21111: LD_INT 36
21113: PUSH
21114: EMPTY
21115: LIST
21116: LIST
21117: LIST
21118: LIST
21119: LIST
21120: LIST
21121: LIST
21122: LIST
21123: LIST
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 101
21132: PUSH
21133: LD_INT 102
21135: PUSH
21136: LD_INT 105
21138: PUSH
21139: LD_INT 106
21141: PUSH
21142: LD_INT 108
21144: PUSH
21145: LD_INT 109
21147: PUSH
21148: LD_INT 112
21150: PUSH
21151: LD_INT 116
21153: PUSH
21154: LD_INT 117
21156: PUSH
21157: LD_INT 118
21159: PUSH
21160: EMPTY
21161: LIST
21162: LIST
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: ST_TO_ADDR
21176: GO 23839
21178: LD_INT 6
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21318
21186: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21187: LD_ADDR_VAR 0 2
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: LD_INT 4
21197: PUSH
21198: LD_INT 5
21200: PUSH
21201: LD_INT 6
21203: PUSH
21204: LD_INT 8
21206: PUSH
21207: LD_INT 11
21209: PUSH
21210: LD_INT 12
21212: PUSH
21213: LD_INT 15
21215: PUSH
21216: LD_INT 16
21218: PUSH
21219: LD_INT 20
21221: PUSH
21222: LD_INT 21
21224: PUSH
21225: LD_INT 22
21227: PUSH
21228: LD_INT 23
21230: PUSH
21231: LD_INT 25
21233: PUSH
21234: LD_INT 26
21236: PUSH
21237: LD_INT 30
21239: PUSH
21240: LD_INT 31
21242: PUSH
21243: LD_INT 32
21245: PUSH
21246: LD_INT 36
21248: PUSH
21249: EMPTY
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 101
21272: PUSH
21273: LD_INT 102
21275: PUSH
21276: LD_INT 105
21278: PUSH
21279: LD_INT 106
21281: PUSH
21282: LD_INT 108
21284: PUSH
21285: LD_INT 109
21287: PUSH
21288: LD_INT 112
21290: PUSH
21291: LD_INT 116
21293: PUSH
21294: LD_INT 117
21296: PUSH
21297: LD_INT 118
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: PUSH
21312: EMPTY
21313: LIST
21314: LIST
21315: ST_TO_ADDR
21316: GO 23839
21318: LD_INT 7
21320: DOUBLE
21321: EQUAL
21322: IFTRUE 21326
21324: GO 21438
21326: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21327: LD_ADDR_VAR 0 2
21331: PUSH
21332: LD_INT 2
21334: PUSH
21335: LD_INT 4
21337: PUSH
21338: LD_INT 5
21340: PUSH
21341: LD_INT 7
21343: PUSH
21344: LD_INT 11
21346: PUSH
21347: LD_INT 12
21349: PUSH
21350: LD_INT 15
21352: PUSH
21353: LD_INT 16
21355: PUSH
21356: LD_INT 20
21358: PUSH
21359: LD_INT 21
21361: PUSH
21362: LD_INT 22
21364: PUSH
21365: LD_INT 23
21367: PUSH
21368: LD_INT 25
21370: PUSH
21371: LD_INT 26
21373: PUSH
21374: EMPTY
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: PUSH
21390: LD_INT 101
21392: PUSH
21393: LD_INT 102
21395: PUSH
21396: LD_INT 103
21398: PUSH
21399: LD_INT 105
21401: PUSH
21402: LD_INT 106
21404: PUSH
21405: LD_INT 108
21407: PUSH
21408: LD_INT 112
21410: PUSH
21411: LD_INT 116
21413: PUSH
21414: LD_INT 117
21416: PUSH
21417: LD_INT 118
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: ST_TO_ADDR
21436: GO 23839
21438: LD_INT 8
21440: DOUBLE
21441: EQUAL
21442: IFTRUE 21446
21444: GO 21586
21446: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21447: LD_ADDR_VAR 0 2
21451: PUSH
21452: LD_INT 2
21454: PUSH
21455: LD_INT 4
21457: PUSH
21458: LD_INT 5
21460: PUSH
21461: LD_INT 6
21463: PUSH
21464: LD_INT 7
21466: PUSH
21467: LD_INT 8
21469: PUSH
21470: LD_INT 11
21472: PUSH
21473: LD_INT 12
21475: PUSH
21476: LD_INT 15
21478: PUSH
21479: LD_INT 16
21481: PUSH
21482: LD_INT 20
21484: PUSH
21485: LD_INT 21
21487: PUSH
21488: LD_INT 22
21490: PUSH
21491: LD_INT 23
21493: PUSH
21494: LD_INT 25
21496: PUSH
21497: LD_INT 26
21499: PUSH
21500: LD_INT 30
21502: PUSH
21503: LD_INT 31
21505: PUSH
21506: LD_INT 32
21508: PUSH
21509: LD_INT 36
21511: PUSH
21512: EMPTY
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: PUSH
21534: LD_INT 101
21536: PUSH
21537: LD_INT 102
21539: PUSH
21540: LD_INT 103
21542: PUSH
21543: LD_INT 105
21545: PUSH
21546: LD_INT 106
21548: PUSH
21549: LD_INT 108
21551: PUSH
21552: LD_INT 109
21554: PUSH
21555: LD_INT 112
21557: PUSH
21558: LD_INT 116
21560: PUSH
21561: LD_INT 117
21563: PUSH
21564: LD_INT 118
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: ST_TO_ADDR
21584: GO 23839
21586: LD_INT 9
21588: DOUBLE
21589: EQUAL
21590: IFTRUE 21594
21592: GO 21742
21594: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21595: LD_ADDR_VAR 0 2
21599: PUSH
21600: LD_INT 2
21602: PUSH
21603: LD_INT 4
21605: PUSH
21606: LD_INT 5
21608: PUSH
21609: LD_INT 6
21611: PUSH
21612: LD_INT 7
21614: PUSH
21615: LD_INT 8
21617: PUSH
21618: LD_INT 11
21620: PUSH
21621: LD_INT 12
21623: PUSH
21624: LD_INT 15
21626: PUSH
21627: LD_INT 16
21629: PUSH
21630: LD_INT 20
21632: PUSH
21633: LD_INT 21
21635: PUSH
21636: LD_INT 22
21638: PUSH
21639: LD_INT 23
21641: PUSH
21642: LD_INT 25
21644: PUSH
21645: LD_INT 26
21647: PUSH
21648: LD_INT 28
21650: PUSH
21651: LD_INT 30
21653: PUSH
21654: LD_INT 31
21656: PUSH
21657: LD_INT 32
21659: PUSH
21660: LD_INT 36
21662: PUSH
21663: EMPTY
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 101
21688: PUSH
21689: LD_INT 102
21691: PUSH
21692: LD_INT 103
21694: PUSH
21695: LD_INT 105
21697: PUSH
21698: LD_INT 106
21700: PUSH
21701: LD_INT 108
21703: PUSH
21704: LD_INT 109
21706: PUSH
21707: LD_INT 112
21709: PUSH
21710: LD_INT 114
21712: PUSH
21713: LD_INT 116
21715: PUSH
21716: LD_INT 117
21718: PUSH
21719: LD_INT 118
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: LIST
21726: LIST
21727: LIST
21728: LIST
21729: LIST
21730: LIST
21731: LIST
21732: LIST
21733: LIST
21734: LIST
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: ST_TO_ADDR
21740: GO 23839
21742: LD_INT 10
21744: DOUBLE
21745: EQUAL
21746: IFTRUE 21750
21748: GO 21946
21750: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21751: LD_ADDR_VAR 0 2
21755: PUSH
21756: LD_INT 2
21758: PUSH
21759: LD_INT 4
21761: PUSH
21762: LD_INT 5
21764: PUSH
21765: LD_INT 6
21767: PUSH
21768: LD_INT 7
21770: PUSH
21771: LD_INT 8
21773: PUSH
21774: LD_INT 9
21776: PUSH
21777: LD_INT 10
21779: PUSH
21780: LD_INT 11
21782: PUSH
21783: LD_INT 12
21785: PUSH
21786: LD_INT 13
21788: PUSH
21789: LD_INT 14
21791: PUSH
21792: LD_INT 15
21794: PUSH
21795: LD_INT 16
21797: PUSH
21798: LD_INT 17
21800: PUSH
21801: LD_INT 18
21803: PUSH
21804: LD_INT 19
21806: PUSH
21807: LD_INT 20
21809: PUSH
21810: LD_INT 21
21812: PUSH
21813: LD_INT 22
21815: PUSH
21816: LD_INT 23
21818: PUSH
21819: LD_INT 24
21821: PUSH
21822: LD_INT 25
21824: PUSH
21825: LD_INT 26
21827: PUSH
21828: LD_INT 28
21830: PUSH
21831: LD_INT 30
21833: PUSH
21834: LD_INT 31
21836: PUSH
21837: LD_INT 32
21839: PUSH
21840: LD_INT 36
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: PUSH
21874: LD_INT 101
21876: PUSH
21877: LD_INT 102
21879: PUSH
21880: LD_INT 103
21882: PUSH
21883: LD_INT 104
21885: PUSH
21886: LD_INT 105
21888: PUSH
21889: LD_INT 106
21891: PUSH
21892: LD_INT 107
21894: PUSH
21895: LD_INT 108
21897: PUSH
21898: LD_INT 109
21900: PUSH
21901: LD_INT 110
21903: PUSH
21904: LD_INT 111
21906: PUSH
21907: LD_INT 112
21909: PUSH
21910: LD_INT 114
21912: PUSH
21913: LD_INT 116
21915: PUSH
21916: LD_INT 117
21918: PUSH
21919: LD_INT 118
21921: PUSH
21922: EMPTY
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: PUSH
21940: EMPTY
21941: LIST
21942: LIST
21943: ST_TO_ADDR
21944: GO 23839
21946: LD_INT 11
21948: DOUBLE
21949: EQUAL
21950: IFTRUE 21954
21952: GO 22158
21954: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
21955: LD_ADDR_VAR 0 2
21959: PUSH
21960: LD_INT 2
21962: PUSH
21963: LD_INT 3
21965: PUSH
21966: LD_INT 4
21968: PUSH
21969: LD_INT 5
21971: PUSH
21972: LD_INT 6
21974: PUSH
21975: LD_INT 7
21977: PUSH
21978: LD_INT 8
21980: PUSH
21981: LD_INT 9
21983: PUSH
21984: LD_INT 10
21986: PUSH
21987: LD_INT 11
21989: PUSH
21990: LD_INT 12
21992: PUSH
21993: LD_INT 13
21995: PUSH
21996: LD_INT 14
21998: PUSH
21999: LD_INT 15
22001: PUSH
22002: LD_INT 16
22004: PUSH
22005: LD_INT 17
22007: PUSH
22008: LD_INT 18
22010: PUSH
22011: LD_INT 19
22013: PUSH
22014: LD_INT 20
22016: PUSH
22017: LD_INT 21
22019: PUSH
22020: LD_INT 22
22022: PUSH
22023: LD_INT 23
22025: PUSH
22026: LD_INT 24
22028: PUSH
22029: LD_INT 25
22031: PUSH
22032: LD_INT 26
22034: PUSH
22035: LD_INT 28
22037: PUSH
22038: LD_INT 30
22040: PUSH
22041: LD_INT 31
22043: PUSH
22044: LD_INT 32
22046: PUSH
22047: LD_INT 34
22049: PUSH
22050: LD_INT 36
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: PUSH
22086: LD_INT 101
22088: PUSH
22089: LD_INT 102
22091: PUSH
22092: LD_INT 103
22094: PUSH
22095: LD_INT 104
22097: PUSH
22098: LD_INT 105
22100: PUSH
22101: LD_INT 106
22103: PUSH
22104: LD_INT 107
22106: PUSH
22107: LD_INT 108
22109: PUSH
22110: LD_INT 109
22112: PUSH
22113: LD_INT 110
22115: PUSH
22116: LD_INT 111
22118: PUSH
22119: LD_INT 112
22121: PUSH
22122: LD_INT 114
22124: PUSH
22125: LD_INT 116
22127: PUSH
22128: LD_INT 117
22130: PUSH
22131: LD_INT 118
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: PUSH
22152: EMPTY
22153: LIST
22154: LIST
22155: ST_TO_ADDR
22156: GO 23839
22158: LD_INT 12
22160: DOUBLE
22161: EQUAL
22162: IFTRUE 22166
22164: GO 22386
22166: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22167: LD_ADDR_VAR 0 2
22171: PUSH
22172: LD_INT 1
22174: PUSH
22175: LD_INT 2
22177: PUSH
22178: LD_INT 3
22180: PUSH
22181: LD_INT 4
22183: PUSH
22184: LD_INT 5
22186: PUSH
22187: LD_INT 6
22189: PUSH
22190: LD_INT 7
22192: PUSH
22193: LD_INT 8
22195: PUSH
22196: LD_INT 9
22198: PUSH
22199: LD_INT 10
22201: PUSH
22202: LD_INT 11
22204: PUSH
22205: LD_INT 12
22207: PUSH
22208: LD_INT 13
22210: PUSH
22211: LD_INT 14
22213: PUSH
22214: LD_INT 15
22216: PUSH
22217: LD_INT 16
22219: PUSH
22220: LD_INT 17
22222: PUSH
22223: LD_INT 18
22225: PUSH
22226: LD_INT 19
22228: PUSH
22229: LD_INT 20
22231: PUSH
22232: LD_INT 21
22234: PUSH
22235: LD_INT 22
22237: PUSH
22238: LD_INT 23
22240: PUSH
22241: LD_INT 24
22243: PUSH
22244: LD_INT 25
22246: PUSH
22247: LD_INT 26
22249: PUSH
22250: LD_INT 27
22252: PUSH
22253: LD_INT 28
22255: PUSH
22256: LD_INT 30
22258: PUSH
22259: LD_INT 31
22261: PUSH
22262: LD_INT 32
22264: PUSH
22265: LD_INT 33
22267: PUSH
22268: LD_INT 34
22270: PUSH
22271: LD_INT 36
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 101
22312: PUSH
22313: LD_INT 102
22315: PUSH
22316: LD_INT 103
22318: PUSH
22319: LD_INT 104
22321: PUSH
22322: LD_INT 105
22324: PUSH
22325: LD_INT 106
22327: PUSH
22328: LD_INT 107
22330: PUSH
22331: LD_INT 108
22333: PUSH
22334: LD_INT 109
22336: PUSH
22337: LD_INT 110
22339: PUSH
22340: LD_INT 111
22342: PUSH
22343: LD_INT 112
22345: PUSH
22346: LD_INT 113
22348: PUSH
22349: LD_INT 114
22351: PUSH
22352: LD_INT 116
22354: PUSH
22355: LD_INT 117
22357: PUSH
22358: LD_INT 118
22360: PUSH
22361: EMPTY
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: ST_TO_ADDR
22384: GO 23839
22386: LD_INT 13
22388: DOUBLE
22389: EQUAL
22390: IFTRUE 22394
22392: GO 22602
22394: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22395: LD_ADDR_VAR 0 2
22399: PUSH
22400: LD_INT 1
22402: PUSH
22403: LD_INT 2
22405: PUSH
22406: LD_INT 3
22408: PUSH
22409: LD_INT 4
22411: PUSH
22412: LD_INT 5
22414: PUSH
22415: LD_INT 8
22417: PUSH
22418: LD_INT 9
22420: PUSH
22421: LD_INT 10
22423: PUSH
22424: LD_INT 11
22426: PUSH
22427: LD_INT 12
22429: PUSH
22430: LD_INT 14
22432: PUSH
22433: LD_INT 15
22435: PUSH
22436: LD_INT 16
22438: PUSH
22439: LD_INT 17
22441: PUSH
22442: LD_INT 18
22444: PUSH
22445: LD_INT 19
22447: PUSH
22448: LD_INT 20
22450: PUSH
22451: LD_INT 21
22453: PUSH
22454: LD_INT 22
22456: PUSH
22457: LD_INT 23
22459: PUSH
22460: LD_INT 24
22462: PUSH
22463: LD_INT 25
22465: PUSH
22466: LD_INT 26
22468: PUSH
22469: LD_INT 27
22471: PUSH
22472: LD_INT 28
22474: PUSH
22475: LD_INT 30
22477: PUSH
22478: LD_INT 31
22480: PUSH
22481: LD_INT 32
22483: PUSH
22484: LD_INT 33
22486: PUSH
22487: LD_INT 34
22489: PUSH
22490: LD_INT 36
22492: PUSH
22493: EMPTY
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: PUSH
22526: LD_INT 101
22528: PUSH
22529: LD_INT 102
22531: PUSH
22532: LD_INT 103
22534: PUSH
22535: LD_INT 104
22537: PUSH
22538: LD_INT 105
22540: PUSH
22541: LD_INT 106
22543: PUSH
22544: LD_INT 107
22546: PUSH
22547: LD_INT 108
22549: PUSH
22550: LD_INT 109
22552: PUSH
22553: LD_INT 110
22555: PUSH
22556: LD_INT 111
22558: PUSH
22559: LD_INT 112
22561: PUSH
22562: LD_INT 113
22564: PUSH
22565: LD_INT 114
22567: PUSH
22568: LD_INT 116
22570: PUSH
22571: LD_INT 117
22573: PUSH
22574: LD_INT 118
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: ST_TO_ADDR
22600: GO 23839
22602: LD_INT 14
22604: DOUBLE
22605: EQUAL
22606: IFTRUE 22610
22608: GO 22834
22610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22611: LD_ADDR_VAR 0 2
22615: PUSH
22616: LD_INT 1
22618: PUSH
22619: LD_INT 2
22621: PUSH
22622: LD_INT 3
22624: PUSH
22625: LD_INT 4
22627: PUSH
22628: LD_INT 5
22630: PUSH
22631: LD_INT 6
22633: PUSH
22634: LD_INT 7
22636: PUSH
22637: LD_INT 8
22639: PUSH
22640: LD_INT 9
22642: PUSH
22643: LD_INT 10
22645: PUSH
22646: LD_INT 11
22648: PUSH
22649: LD_INT 12
22651: PUSH
22652: LD_INT 13
22654: PUSH
22655: LD_INT 14
22657: PUSH
22658: LD_INT 15
22660: PUSH
22661: LD_INT 16
22663: PUSH
22664: LD_INT 17
22666: PUSH
22667: LD_INT 18
22669: PUSH
22670: LD_INT 19
22672: PUSH
22673: LD_INT 20
22675: PUSH
22676: LD_INT 21
22678: PUSH
22679: LD_INT 22
22681: PUSH
22682: LD_INT 23
22684: PUSH
22685: LD_INT 24
22687: PUSH
22688: LD_INT 25
22690: PUSH
22691: LD_INT 26
22693: PUSH
22694: LD_INT 27
22696: PUSH
22697: LD_INT 28
22699: PUSH
22700: LD_INT 29
22702: PUSH
22703: LD_INT 30
22705: PUSH
22706: LD_INT 31
22708: PUSH
22709: LD_INT 32
22711: PUSH
22712: LD_INT 33
22714: PUSH
22715: LD_INT 34
22717: PUSH
22718: LD_INT 36
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: PUSH
22758: LD_INT 101
22760: PUSH
22761: LD_INT 102
22763: PUSH
22764: LD_INT 103
22766: PUSH
22767: LD_INT 104
22769: PUSH
22770: LD_INT 105
22772: PUSH
22773: LD_INT 106
22775: PUSH
22776: LD_INT 107
22778: PUSH
22779: LD_INT 108
22781: PUSH
22782: LD_INT 109
22784: PUSH
22785: LD_INT 110
22787: PUSH
22788: LD_INT 111
22790: PUSH
22791: LD_INT 112
22793: PUSH
22794: LD_INT 113
22796: PUSH
22797: LD_INT 114
22799: PUSH
22800: LD_INT 116
22802: PUSH
22803: LD_INT 117
22805: PUSH
22806: LD_INT 118
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: ST_TO_ADDR
22832: GO 23839
22834: LD_INT 15
22836: DOUBLE
22837: EQUAL
22838: IFTRUE 22842
22840: GO 23066
22842: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22843: LD_ADDR_VAR 0 2
22847: PUSH
22848: LD_INT 1
22850: PUSH
22851: LD_INT 2
22853: PUSH
22854: LD_INT 3
22856: PUSH
22857: LD_INT 4
22859: PUSH
22860: LD_INT 5
22862: PUSH
22863: LD_INT 6
22865: PUSH
22866: LD_INT 7
22868: PUSH
22869: LD_INT 8
22871: PUSH
22872: LD_INT 9
22874: PUSH
22875: LD_INT 10
22877: PUSH
22878: LD_INT 11
22880: PUSH
22881: LD_INT 12
22883: PUSH
22884: LD_INT 13
22886: PUSH
22887: LD_INT 14
22889: PUSH
22890: LD_INT 15
22892: PUSH
22893: LD_INT 16
22895: PUSH
22896: LD_INT 17
22898: PUSH
22899: LD_INT 18
22901: PUSH
22902: LD_INT 19
22904: PUSH
22905: LD_INT 20
22907: PUSH
22908: LD_INT 21
22910: PUSH
22911: LD_INT 22
22913: PUSH
22914: LD_INT 23
22916: PUSH
22917: LD_INT 24
22919: PUSH
22920: LD_INT 25
22922: PUSH
22923: LD_INT 26
22925: PUSH
22926: LD_INT 27
22928: PUSH
22929: LD_INT 28
22931: PUSH
22932: LD_INT 29
22934: PUSH
22935: LD_INT 30
22937: PUSH
22938: LD_INT 31
22940: PUSH
22941: LD_INT 32
22943: PUSH
22944: LD_INT 33
22946: PUSH
22947: LD_INT 34
22949: PUSH
22950: LD_INT 36
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: PUSH
22990: LD_INT 101
22992: PUSH
22993: LD_INT 102
22995: PUSH
22996: LD_INT 103
22998: PUSH
22999: LD_INT 104
23001: PUSH
23002: LD_INT 105
23004: PUSH
23005: LD_INT 106
23007: PUSH
23008: LD_INT 107
23010: PUSH
23011: LD_INT 108
23013: PUSH
23014: LD_INT 109
23016: PUSH
23017: LD_INT 110
23019: PUSH
23020: LD_INT 111
23022: PUSH
23023: LD_INT 112
23025: PUSH
23026: LD_INT 113
23028: PUSH
23029: LD_INT 114
23031: PUSH
23032: LD_INT 116
23034: PUSH
23035: LD_INT 117
23037: PUSH
23038: LD_INT 118
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: ST_TO_ADDR
23064: GO 23839
23066: LD_INT 16
23068: DOUBLE
23069: EQUAL
23070: IFTRUE 23074
23072: GO 23210
23074: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23075: LD_ADDR_VAR 0 2
23079: PUSH
23080: LD_INT 2
23082: PUSH
23083: LD_INT 4
23085: PUSH
23086: LD_INT 5
23088: PUSH
23089: LD_INT 7
23091: PUSH
23092: LD_INT 11
23094: PUSH
23095: LD_INT 12
23097: PUSH
23098: LD_INT 15
23100: PUSH
23101: LD_INT 16
23103: PUSH
23104: LD_INT 20
23106: PUSH
23107: LD_INT 21
23109: PUSH
23110: LD_INT 22
23112: PUSH
23113: LD_INT 23
23115: PUSH
23116: LD_INT 25
23118: PUSH
23119: LD_INT 26
23121: PUSH
23122: LD_INT 30
23124: PUSH
23125: LD_INT 31
23127: PUSH
23128: LD_INT 32
23130: PUSH
23131: LD_INT 33
23133: PUSH
23134: LD_INT 34
23136: PUSH
23137: EMPTY
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 101
23160: PUSH
23161: LD_INT 102
23163: PUSH
23164: LD_INT 103
23166: PUSH
23167: LD_INT 106
23169: PUSH
23170: LD_INT 108
23172: PUSH
23173: LD_INT 112
23175: PUSH
23176: LD_INT 113
23178: PUSH
23179: LD_INT 114
23181: PUSH
23182: LD_INT 116
23184: PUSH
23185: LD_INT 117
23187: PUSH
23188: LD_INT 118
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: ST_TO_ADDR
23208: GO 23839
23210: LD_INT 17
23212: DOUBLE
23213: EQUAL
23214: IFTRUE 23218
23216: GO 23442
23218: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23219: LD_ADDR_VAR 0 2
23223: PUSH
23224: LD_INT 1
23226: PUSH
23227: LD_INT 2
23229: PUSH
23230: LD_INT 3
23232: PUSH
23233: LD_INT 4
23235: PUSH
23236: LD_INT 5
23238: PUSH
23239: LD_INT 6
23241: PUSH
23242: LD_INT 7
23244: PUSH
23245: LD_INT 8
23247: PUSH
23248: LD_INT 9
23250: PUSH
23251: LD_INT 10
23253: PUSH
23254: LD_INT 11
23256: PUSH
23257: LD_INT 12
23259: PUSH
23260: LD_INT 13
23262: PUSH
23263: LD_INT 14
23265: PUSH
23266: LD_INT 15
23268: PUSH
23269: LD_INT 16
23271: PUSH
23272: LD_INT 17
23274: PUSH
23275: LD_INT 18
23277: PUSH
23278: LD_INT 19
23280: PUSH
23281: LD_INT 20
23283: PUSH
23284: LD_INT 21
23286: PUSH
23287: LD_INT 22
23289: PUSH
23290: LD_INT 23
23292: PUSH
23293: LD_INT 24
23295: PUSH
23296: LD_INT 25
23298: PUSH
23299: LD_INT 26
23301: PUSH
23302: LD_INT 27
23304: PUSH
23305: LD_INT 28
23307: PUSH
23308: LD_INT 29
23310: PUSH
23311: LD_INT 30
23313: PUSH
23314: LD_INT 31
23316: PUSH
23317: LD_INT 32
23319: PUSH
23320: LD_INT 33
23322: PUSH
23323: LD_INT 34
23325: PUSH
23326: LD_INT 36
23328: PUSH
23329: EMPTY
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: LIST
23348: LIST
23349: LIST
23350: LIST
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: PUSH
23366: LD_INT 101
23368: PUSH
23369: LD_INT 102
23371: PUSH
23372: LD_INT 103
23374: PUSH
23375: LD_INT 104
23377: PUSH
23378: LD_INT 105
23380: PUSH
23381: LD_INT 106
23383: PUSH
23384: LD_INT 107
23386: PUSH
23387: LD_INT 108
23389: PUSH
23390: LD_INT 109
23392: PUSH
23393: LD_INT 110
23395: PUSH
23396: LD_INT 111
23398: PUSH
23399: LD_INT 112
23401: PUSH
23402: LD_INT 113
23404: PUSH
23405: LD_INT 114
23407: PUSH
23408: LD_INT 116
23410: PUSH
23411: LD_INT 117
23413: PUSH
23414: LD_INT 118
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: ST_TO_ADDR
23440: GO 23839
23442: LD_INT 18
23444: DOUBLE
23445: EQUAL
23446: IFTRUE 23450
23448: GO 23598
23450: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23451: LD_ADDR_VAR 0 2
23455: PUSH
23456: LD_INT 2
23458: PUSH
23459: LD_INT 4
23461: PUSH
23462: LD_INT 5
23464: PUSH
23465: LD_INT 7
23467: PUSH
23468: LD_INT 11
23470: PUSH
23471: LD_INT 12
23473: PUSH
23474: LD_INT 15
23476: PUSH
23477: LD_INT 16
23479: PUSH
23480: LD_INT 20
23482: PUSH
23483: LD_INT 21
23485: PUSH
23486: LD_INT 22
23488: PUSH
23489: LD_INT 23
23491: PUSH
23492: LD_INT 25
23494: PUSH
23495: LD_INT 26
23497: PUSH
23498: LD_INT 30
23500: PUSH
23501: LD_INT 31
23503: PUSH
23504: LD_INT 32
23506: PUSH
23507: LD_INT 33
23509: PUSH
23510: LD_INT 34
23512: PUSH
23513: LD_INT 35
23515: PUSH
23516: LD_INT 36
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: PUSH
23542: LD_INT 101
23544: PUSH
23545: LD_INT 102
23547: PUSH
23548: LD_INT 103
23550: PUSH
23551: LD_INT 106
23553: PUSH
23554: LD_INT 108
23556: PUSH
23557: LD_INT 112
23559: PUSH
23560: LD_INT 113
23562: PUSH
23563: LD_INT 114
23565: PUSH
23566: LD_INT 115
23568: PUSH
23569: LD_INT 116
23571: PUSH
23572: LD_INT 117
23574: PUSH
23575: LD_INT 118
23577: PUSH
23578: EMPTY
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: ST_TO_ADDR
23596: GO 23839
23598: LD_INT 19
23600: DOUBLE
23601: EQUAL
23602: IFTRUE 23606
23604: GO 23838
23606: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23607: LD_ADDR_VAR 0 2
23611: PUSH
23612: LD_INT 1
23614: PUSH
23615: LD_INT 2
23617: PUSH
23618: LD_INT 3
23620: PUSH
23621: LD_INT 4
23623: PUSH
23624: LD_INT 5
23626: PUSH
23627: LD_INT 6
23629: PUSH
23630: LD_INT 7
23632: PUSH
23633: LD_INT 8
23635: PUSH
23636: LD_INT 9
23638: PUSH
23639: LD_INT 10
23641: PUSH
23642: LD_INT 11
23644: PUSH
23645: LD_INT 12
23647: PUSH
23648: LD_INT 13
23650: PUSH
23651: LD_INT 14
23653: PUSH
23654: LD_INT 15
23656: PUSH
23657: LD_INT 16
23659: PUSH
23660: LD_INT 17
23662: PUSH
23663: LD_INT 18
23665: PUSH
23666: LD_INT 19
23668: PUSH
23669: LD_INT 20
23671: PUSH
23672: LD_INT 21
23674: PUSH
23675: LD_INT 22
23677: PUSH
23678: LD_INT 23
23680: PUSH
23681: LD_INT 24
23683: PUSH
23684: LD_INT 25
23686: PUSH
23687: LD_INT 26
23689: PUSH
23690: LD_INT 27
23692: PUSH
23693: LD_INT 28
23695: PUSH
23696: LD_INT 29
23698: PUSH
23699: LD_INT 30
23701: PUSH
23702: LD_INT 31
23704: PUSH
23705: LD_INT 32
23707: PUSH
23708: LD_INT 33
23710: PUSH
23711: LD_INT 34
23713: PUSH
23714: LD_INT 35
23716: PUSH
23717: LD_INT 36
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: PUSH
23758: LD_INT 101
23760: PUSH
23761: LD_INT 102
23763: PUSH
23764: LD_INT 103
23766: PUSH
23767: LD_INT 104
23769: PUSH
23770: LD_INT 105
23772: PUSH
23773: LD_INT 106
23775: PUSH
23776: LD_INT 107
23778: PUSH
23779: LD_INT 108
23781: PUSH
23782: LD_INT 109
23784: PUSH
23785: LD_INT 110
23787: PUSH
23788: LD_INT 111
23790: PUSH
23791: LD_INT 112
23793: PUSH
23794: LD_INT 113
23796: PUSH
23797: LD_INT 114
23799: PUSH
23800: LD_INT 115
23802: PUSH
23803: LD_INT 116
23805: PUSH
23806: LD_INT 117
23808: PUSH
23809: LD_INT 118
23811: PUSH
23812: EMPTY
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: ST_TO_ADDR
23836: GO 23839
23838: POP
// end else
23839: GO 24070
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23841: LD_ADDR_VAR 0 2
23845: PUSH
23846: LD_INT 1
23848: PUSH
23849: LD_INT 2
23851: PUSH
23852: LD_INT 3
23854: PUSH
23855: LD_INT 4
23857: PUSH
23858: LD_INT 5
23860: PUSH
23861: LD_INT 6
23863: PUSH
23864: LD_INT 7
23866: PUSH
23867: LD_INT 8
23869: PUSH
23870: LD_INT 9
23872: PUSH
23873: LD_INT 10
23875: PUSH
23876: LD_INT 11
23878: PUSH
23879: LD_INT 12
23881: PUSH
23882: LD_INT 13
23884: PUSH
23885: LD_INT 14
23887: PUSH
23888: LD_INT 15
23890: PUSH
23891: LD_INT 16
23893: PUSH
23894: LD_INT 17
23896: PUSH
23897: LD_INT 18
23899: PUSH
23900: LD_INT 19
23902: PUSH
23903: LD_INT 20
23905: PUSH
23906: LD_INT 21
23908: PUSH
23909: LD_INT 22
23911: PUSH
23912: LD_INT 23
23914: PUSH
23915: LD_INT 24
23917: PUSH
23918: LD_INT 25
23920: PUSH
23921: LD_INT 26
23923: PUSH
23924: LD_INT 27
23926: PUSH
23927: LD_INT 28
23929: PUSH
23930: LD_INT 29
23932: PUSH
23933: LD_INT 30
23935: PUSH
23936: LD_INT 31
23938: PUSH
23939: LD_INT 32
23941: PUSH
23942: LD_INT 33
23944: PUSH
23945: LD_INT 34
23947: PUSH
23948: LD_INT 35
23950: PUSH
23951: LD_INT 36
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: PUSH
23992: LD_INT 101
23994: PUSH
23995: LD_INT 102
23997: PUSH
23998: LD_INT 103
24000: PUSH
24001: LD_INT 104
24003: PUSH
24004: LD_INT 105
24006: PUSH
24007: LD_INT 106
24009: PUSH
24010: LD_INT 107
24012: PUSH
24013: LD_INT 108
24015: PUSH
24016: LD_INT 109
24018: PUSH
24019: LD_INT 110
24021: PUSH
24022: LD_INT 111
24024: PUSH
24025: LD_INT 112
24027: PUSH
24028: LD_INT 113
24030: PUSH
24031: LD_INT 114
24033: PUSH
24034: LD_INT 115
24036: PUSH
24037: LD_INT 116
24039: PUSH
24040: LD_INT 117
24042: PUSH
24043: LD_INT 118
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: ST_TO_ADDR
// if result then
24070: LD_VAR 0 2
24074: IFFALSE 24860
// begin normal :=  ;
24076: LD_ADDR_VAR 0 5
24080: PUSH
24081: LD_STRING 
24083: ST_TO_ADDR
// hardcore :=  ;
24084: LD_ADDR_VAR 0 6
24088: PUSH
24089: LD_STRING 
24091: ST_TO_ADDR
// active :=  ;
24092: LD_ADDR_VAR 0 7
24096: PUSH
24097: LD_STRING 
24099: ST_TO_ADDR
// for i = 1 to normalCounter do
24100: LD_ADDR_VAR 0 8
24104: PUSH
24105: DOUBLE
24106: LD_INT 1
24108: DEC
24109: ST_TO_ADDR
24110: LD_EXP 65
24114: PUSH
24115: FOR_TO
24116: IFFALSE 24217
// begin tmp := 0 ;
24118: LD_ADDR_VAR 0 3
24122: PUSH
24123: LD_STRING 0
24125: ST_TO_ADDR
// if result [ 1 ] then
24126: LD_VAR 0 2
24130: PUSH
24131: LD_INT 1
24133: ARRAY
24134: IFFALSE 24199
// if result [ 1 ] [ 1 ] = i then
24136: LD_VAR 0 2
24140: PUSH
24141: LD_INT 1
24143: ARRAY
24144: PUSH
24145: LD_INT 1
24147: ARRAY
24148: PUSH
24149: LD_VAR 0 8
24153: EQUAL
24154: IFFALSE 24199
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24156: LD_ADDR_VAR 0 2
24160: PUSH
24161: LD_VAR 0 2
24165: PPUSH
24166: LD_INT 1
24168: PPUSH
24169: LD_VAR 0 2
24173: PUSH
24174: LD_INT 1
24176: ARRAY
24177: PPUSH
24178: LD_INT 1
24180: PPUSH
24181: CALL_OW 3
24185: PPUSH
24186: CALL_OW 1
24190: ST_TO_ADDR
// tmp := 1 ;
24191: LD_ADDR_VAR 0 3
24195: PUSH
24196: LD_STRING 1
24198: ST_TO_ADDR
// end ; normal := normal & tmp ;
24199: LD_ADDR_VAR 0 5
24203: PUSH
24204: LD_VAR 0 5
24208: PUSH
24209: LD_VAR 0 3
24213: STR
24214: ST_TO_ADDR
// end ;
24215: GO 24115
24217: POP
24218: POP
// for i = 1 to hardcoreCounter do
24219: LD_ADDR_VAR 0 8
24223: PUSH
24224: DOUBLE
24225: LD_INT 1
24227: DEC
24228: ST_TO_ADDR
24229: LD_EXP 66
24233: PUSH
24234: FOR_TO
24235: IFFALSE 24340
// begin tmp := 0 ;
24237: LD_ADDR_VAR 0 3
24241: PUSH
24242: LD_STRING 0
24244: ST_TO_ADDR
// if result [ 2 ] then
24245: LD_VAR 0 2
24249: PUSH
24250: LD_INT 2
24252: ARRAY
24253: IFFALSE 24322
// if result [ 2 ] [ 1 ] = 100 + i then
24255: LD_VAR 0 2
24259: PUSH
24260: LD_INT 2
24262: ARRAY
24263: PUSH
24264: LD_INT 1
24266: ARRAY
24267: PUSH
24268: LD_INT 100
24270: PUSH
24271: LD_VAR 0 8
24275: PLUS
24276: EQUAL
24277: IFFALSE 24322
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24279: LD_ADDR_VAR 0 2
24283: PUSH
24284: LD_VAR 0 2
24288: PPUSH
24289: LD_INT 2
24291: PPUSH
24292: LD_VAR 0 2
24296: PUSH
24297: LD_INT 2
24299: ARRAY
24300: PPUSH
24301: LD_INT 1
24303: PPUSH
24304: CALL_OW 3
24308: PPUSH
24309: CALL_OW 1
24313: ST_TO_ADDR
// tmp := 1 ;
24314: LD_ADDR_VAR 0 3
24318: PUSH
24319: LD_STRING 1
24321: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24322: LD_ADDR_VAR 0 6
24326: PUSH
24327: LD_VAR 0 6
24331: PUSH
24332: LD_VAR 0 3
24336: STR
24337: ST_TO_ADDR
// end ;
24338: GO 24234
24340: POP
24341: POP
// if isGameLoad then
24342: LD_VAR 0 1
24346: IFFALSE 24821
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24348: LD_ADDR_VAR 0 4
24352: PUSH
24353: LD_EXP 69
24357: PUSH
24358: LD_EXP 68
24362: PUSH
24363: LD_EXP 70
24367: PUSH
24368: LD_EXP 67
24372: PUSH
24373: LD_EXP 71
24377: PUSH
24378: LD_EXP 72
24382: PUSH
24383: LD_EXP 73
24387: PUSH
24388: LD_EXP 74
24392: PUSH
24393: LD_EXP 75
24397: PUSH
24398: LD_EXP 76
24402: PUSH
24403: LD_EXP 77
24407: PUSH
24408: LD_EXP 78
24412: PUSH
24413: LD_EXP 79
24417: PUSH
24418: LD_EXP 80
24422: PUSH
24423: LD_EXP 88
24427: PUSH
24428: LD_EXP 89
24432: PUSH
24433: LD_EXP 90
24437: PUSH
24438: LD_EXP 91
24442: PUSH
24443: LD_EXP 93
24447: PUSH
24448: LD_EXP 94
24452: PUSH
24453: LD_EXP 95
24457: PUSH
24458: LD_EXP 98
24462: PUSH
24463: LD_EXP 100
24467: PUSH
24468: LD_EXP 101
24472: PUSH
24473: LD_EXP 102
24477: PUSH
24478: LD_EXP 104
24482: PUSH
24483: LD_EXP 105
24487: PUSH
24488: LD_EXP 108
24492: PUSH
24493: LD_EXP 109
24497: PUSH
24498: LD_EXP 110
24502: PUSH
24503: LD_EXP 111
24507: PUSH
24508: LD_EXP 112
24512: PUSH
24513: LD_EXP 113
24517: PUSH
24518: LD_EXP 114
24522: PUSH
24523: LD_EXP 115
24527: PUSH
24528: LD_EXP 116
24532: PUSH
24533: LD_EXP 81
24537: PUSH
24538: LD_EXP 82
24542: PUSH
24543: LD_EXP 85
24547: PUSH
24548: LD_EXP 86
24552: PUSH
24553: LD_EXP 87
24557: PUSH
24558: LD_EXP 83
24562: PUSH
24563: LD_EXP 84
24567: PUSH
24568: LD_EXP 92
24572: PUSH
24573: LD_EXP 96
24577: PUSH
24578: LD_EXP 97
24582: PUSH
24583: LD_EXP 99
24587: PUSH
24588: LD_EXP 103
24592: PUSH
24593: LD_EXP 106
24597: PUSH
24598: LD_EXP 107
24602: PUSH
24603: LD_EXP 117
24607: PUSH
24608: LD_EXP 118
24612: PUSH
24613: LD_EXP 119
24617: PUSH
24618: LD_EXP 120
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: ST_TO_ADDR
// tmp :=  ;
24679: LD_ADDR_VAR 0 3
24683: PUSH
24684: LD_STRING 
24686: ST_TO_ADDR
// for i = 1 to normalCounter do
24687: LD_ADDR_VAR 0 8
24691: PUSH
24692: DOUBLE
24693: LD_INT 1
24695: DEC
24696: ST_TO_ADDR
24697: LD_EXP 65
24701: PUSH
24702: FOR_TO
24703: IFFALSE 24739
// begin if flags [ i ] then
24705: LD_VAR 0 4
24709: PUSH
24710: LD_VAR 0 8
24714: ARRAY
24715: IFFALSE 24737
// tmp := tmp & i & ; ;
24717: LD_ADDR_VAR 0 3
24721: PUSH
24722: LD_VAR 0 3
24726: PUSH
24727: LD_VAR 0 8
24731: STR
24732: PUSH
24733: LD_STRING ;
24735: STR
24736: ST_TO_ADDR
// end ;
24737: GO 24702
24739: POP
24740: POP
// for i = 1 to hardcoreCounter do
24741: LD_ADDR_VAR 0 8
24745: PUSH
24746: DOUBLE
24747: LD_INT 1
24749: DEC
24750: ST_TO_ADDR
24751: LD_EXP 66
24755: PUSH
24756: FOR_TO
24757: IFFALSE 24803
// begin if flags [ normalCounter + i ] then
24759: LD_VAR 0 4
24763: PUSH
24764: LD_EXP 65
24768: PUSH
24769: LD_VAR 0 8
24773: PLUS
24774: ARRAY
24775: IFFALSE 24801
// tmp := tmp & ( 100 + i ) & ; ;
24777: LD_ADDR_VAR 0 3
24781: PUSH
24782: LD_VAR 0 3
24786: PUSH
24787: LD_INT 100
24789: PUSH
24790: LD_VAR 0 8
24794: PLUS
24795: STR
24796: PUSH
24797: LD_STRING ;
24799: STR
24800: ST_TO_ADDR
// end ;
24801: GO 24756
24803: POP
24804: POP
// if tmp then
24805: LD_VAR 0 3
24809: IFFALSE 24821
// active := tmp ;
24811: LD_ADDR_VAR 0 7
24815: PUSH
24816: LD_VAR 0 3
24820: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24821: LD_STRING getStreamItemsFromMission("
24823: PUSH
24824: LD_VAR 0 5
24828: STR
24829: PUSH
24830: LD_STRING ","
24832: STR
24833: PUSH
24834: LD_VAR 0 6
24838: STR
24839: PUSH
24840: LD_STRING ","
24842: STR
24843: PUSH
24844: LD_VAR 0 7
24848: STR
24849: PUSH
24850: LD_STRING ")
24852: STR
24853: PPUSH
24854: CALL_OW 559
// end else
24858: GO 24867
// ToLua ( getStreamItemsFromMission("","","") ) ;
24860: LD_STRING getStreamItemsFromMission("","","")
24862: PPUSH
24863: CALL_OW 559
// end ;
24867: LD_VAR 0 2
24871: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24872: LD_EXP 64
24876: PUSH
24877: LD_EXP 69
24881: AND
24882: IFFALSE 25006
24884: GO 24886
24886: DISABLE
24887: LD_INT 0
24889: PPUSH
24890: PPUSH
// begin enable ;
24891: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24892: LD_ADDR_VAR 0 2
24896: PUSH
24897: LD_INT 22
24899: PUSH
24900: LD_OWVAR 2
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 2
24911: PUSH
24912: LD_INT 34
24914: PUSH
24915: LD_INT 7
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 34
24924: PUSH
24925: LD_INT 45
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 34
24934: PUSH
24935: LD_INT 28
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 34
24944: PUSH
24945: LD_INT 47
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: PUSH
24952: EMPTY
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: PUSH
24959: EMPTY
24960: LIST
24961: LIST
24962: PPUSH
24963: CALL_OW 69
24967: ST_TO_ADDR
// if not tmp then
24968: LD_VAR 0 2
24972: NOT
24973: IFFALSE 24977
// exit ;
24975: GO 25006
// for i in tmp do
24977: LD_ADDR_VAR 0 1
24981: PUSH
24982: LD_VAR 0 2
24986: PUSH
24987: FOR_IN
24988: IFFALSE 25004
// begin SetLives ( i , 0 ) ;
24990: LD_VAR 0 1
24994: PPUSH
24995: LD_INT 0
24997: PPUSH
24998: CALL_OW 234
// end ;
25002: GO 24987
25004: POP
25005: POP
// end ;
25006: PPOPN 2
25008: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25009: LD_EXP 64
25013: PUSH
25014: LD_EXP 70
25018: AND
25019: IFFALSE 25103
25021: GO 25023
25023: DISABLE
25024: LD_INT 0
25026: PPUSH
25027: PPUSH
// begin enable ;
25028: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25029: LD_ADDR_VAR 0 2
25033: PUSH
25034: LD_INT 22
25036: PUSH
25037: LD_OWVAR 2
25041: PUSH
25042: EMPTY
25043: LIST
25044: LIST
25045: PUSH
25046: LD_INT 32
25048: PUSH
25049: LD_INT 3
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PPUSH
25060: CALL_OW 69
25064: ST_TO_ADDR
// if not tmp then
25065: LD_VAR 0 2
25069: NOT
25070: IFFALSE 25074
// exit ;
25072: GO 25103
// for i in tmp do
25074: LD_ADDR_VAR 0 1
25078: PUSH
25079: LD_VAR 0 2
25083: PUSH
25084: FOR_IN
25085: IFFALSE 25101
// begin SetLives ( i , 0 ) ;
25087: LD_VAR 0 1
25091: PPUSH
25092: LD_INT 0
25094: PPUSH
25095: CALL_OW 234
// end ;
25099: GO 25084
25101: POP
25102: POP
// end ;
25103: PPOPN 2
25105: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25106: LD_EXP 64
25110: PUSH
25111: LD_EXP 67
25115: AND
25116: IFFALSE 25209
25118: GO 25120
25120: DISABLE
25121: LD_INT 0
25123: PPUSH
// begin enable ;
25124: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25125: LD_ADDR_VAR 0 1
25129: PUSH
25130: LD_INT 22
25132: PUSH
25133: LD_OWVAR 2
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: LD_INT 2
25144: PUSH
25145: LD_INT 25
25147: PUSH
25148: LD_INT 5
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 25
25157: PUSH
25158: LD_INT 9
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 25
25167: PUSH
25168: LD_INT 8
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PPUSH
25185: CALL_OW 69
25189: PUSH
25190: FOR_IN
25191: IFFALSE 25207
// begin SetClass ( i , 1 ) ;
25193: LD_VAR 0 1
25197: PPUSH
25198: LD_INT 1
25200: PPUSH
25201: CALL_OW 336
// end ;
25205: GO 25190
25207: POP
25208: POP
// end ;
25209: PPOPN 1
25211: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25212: LD_EXP 64
25216: PUSH
25217: LD_EXP 68
25221: AND
25222: PUSH
25223: LD_OWVAR 65
25227: PUSH
25228: LD_INT 7
25230: LESS
25231: AND
25232: IFFALSE 25246
25234: GO 25236
25236: DISABLE
// begin enable ;
25237: ENABLE
// game_speed := 7 ;
25238: LD_ADDR_OWVAR 65
25242: PUSH
25243: LD_INT 7
25245: ST_TO_ADDR
// end ;
25246: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25247: LD_EXP 64
25251: PUSH
25252: LD_EXP 71
25256: AND
25257: IFFALSE 25459
25259: GO 25261
25261: DISABLE
25262: LD_INT 0
25264: PPUSH
25265: PPUSH
25266: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25267: LD_ADDR_VAR 0 3
25271: PUSH
25272: LD_INT 81
25274: PUSH
25275: LD_OWVAR 2
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: LD_INT 21
25286: PUSH
25287: LD_INT 1
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PPUSH
25298: CALL_OW 69
25302: ST_TO_ADDR
// if not tmp then
25303: LD_VAR 0 3
25307: NOT
25308: IFFALSE 25312
// exit ;
25310: GO 25459
// if tmp > 5 then
25312: LD_VAR 0 3
25316: PUSH
25317: LD_INT 5
25319: GREATER
25320: IFFALSE 25332
// k := 5 else
25322: LD_ADDR_VAR 0 2
25326: PUSH
25327: LD_INT 5
25329: ST_TO_ADDR
25330: GO 25342
// k := tmp ;
25332: LD_ADDR_VAR 0 2
25336: PUSH
25337: LD_VAR 0 3
25341: ST_TO_ADDR
// for i := 1 to k do
25342: LD_ADDR_VAR 0 1
25346: PUSH
25347: DOUBLE
25348: LD_INT 1
25350: DEC
25351: ST_TO_ADDR
25352: LD_VAR 0 2
25356: PUSH
25357: FOR_TO
25358: IFFALSE 25457
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25360: LD_VAR 0 3
25364: PUSH
25365: LD_VAR 0 1
25369: ARRAY
25370: PPUSH
25371: LD_VAR 0 1
25375: PUSH
25376: LD_INT 4
25378: MOD
25379: PUSH
25380: LD_INT 1
25382: PLUS
25383: PPUSH
25384: CALL_OW 259
25388: PUSH
25389: LD_INT 10
25391: LESS
25392: IFFALSE 25455
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25394: LD_VAR 0 3
25398: PUSH
25399: LD_VAR 0 1
25403: ARRAY
25404: PPUSH
25405: LD_VAR 0 1
25409: PUSH
25410: LD_INT 4
25412: MOD
25413: PUSH
25414: LD_INT 1
25416: PLUS
25417: PPUSH
25418: LD_VAR 0 3
25422: PUSH
25423: LD_VAR 0 1
25427: ARRAY
25428: PPUSH
25429: LD_VAR 0 1
25433: PUSH
25434: LD_INT 4
25436: MOD
25437: PUSH
25438: LD_INT 1
25440: PLUS
25441: PPUSH
25442: CALL_OW 259
25446: PUSH
25447: LD_INT 1
25449: PLUS
25450: PPUSH
25451: CALL_OW 237
25455: GO 25357
25457: POP
25458: POP
// end ;
25459: PPOPN 3
25461: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25462: LD_EXP 64
25466: PUSH
25467: LD_EXP 72
25471: AND
25472: IFFALSE 25492
25474: GO 25476
25476: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25477: LD_INT 4
25479: PPUSH
25480: LD_OWVAR 2
25484: PPUSH
25485: LD_INT 0
25487: PPUSH
25488: CALL_OW 324
25492: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25493: LD_EXP 64
25497: PUSH
25498: LD_EXP 101
25502: AND
25503: IFFALSE 25523
25505: GO 25507
25507: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25508: LD_INT 19
25510: PPUSH
25511: LD_OWVAR 2
25515: PPUSH
25516: LD_INT 0
25518: PPUSH
25519: CALL_OW 324
25523: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25524: LD_EXP 64
25528: PUSH
25529: LD_EXP 73
25533: AND
25534: IFFALSE 25636
25536: GO 25538
25538: DISABLE
25539: LD_INT 0
25541: PPUSH
25542: PPUSH
// begin enable ;
25543: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25544: LD_ADDR_VAR 0 2
25548: PUSH
25549: LD_INT 22
25551: PUSH
25552: LD_OWVAR 2
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 2
25563: PUSH
25564: LD_INT 34
25566: PUSH
25567: LD_INT 11
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 34
25576: PUSH
25577: LD_INT 30
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: LIST
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PPUSH
25593: CALL_OW 69
25597: ST_TO_ADDR
// if not tmp then
25598: LD_VAR 0 2
25602: NOT
25603: IFFALSE 25607
// exit ;
25605: GO 25636
// for i in tmp do
25607: LD_ADDR_VAR 0 1
25611: PUSH
25612: LD_VAR 0 2
25616: PUSH
25617: FOR_IN
25618: IFFALSE 25634
// begin SetLives ( i , 0 ) ;
25620: LD_VAR 0 1
25624: PPUSH
25625: LD_INT 0
25627: PPUSH
25628: CALL_OW 234
// end ;
25632: GO 25617
25634: POP
25635: POP
// end ;
25636: PPOPN 2
25638: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25639: LD_EXP 64
25643: PUSH
25644: LD_EXP 74
25648: AND
25649: IFFALSE 25669
25651: GO 25653
25653: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25654: LD_INT 32
25656: PPUSH
25657: LD_OWVAR 2
25661: PPUSH
25662: LD_INT 0
25664: PPUSH
25665: CALL_OW 324
25669: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25670: LD_EXP 64
25674: PUSH
25675: LD_EXP 75
25679: AND
25680: IFFALSE 25861
25682: GO 25684
25684: DISABLE
25685: LD_INT 0
25687: PPUSH
25688: PPUSH
25689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25690: LD_ADDR_VAR 0 2
25694: PUSH
25695: LD_INT 22
25697: PUSH
25698: LD_OWVAR 2
25702: PUSH
25703: EMPTY
25704: LIST
25705: LIST
25706: PUSH
25707: LD_INT 33
25709: PUSH
25710: LD_INT 3
25712: PUSH
25713: EMPTY
25714: LIST
25715: LIST
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PPUSH
25721: CALL_OW 69
25725: ST_TO_ADDR
// if not tmp then
25726: LD_VAR 0 2
25730: NOT
25731: IFFALSE 25735
// exit ;
25733: GO 25861
// side := 0 ;
25735: LD_ADDR_VAR 0 3
25739: PUSH
25740: LD_INT 0
25742: ST_TO_ADDR
// for i := 1 to 8 do
25743: LD_ADDR_VAR 0 1
25747: PUSH
25748: DOUBLE
25749: LD_INT 1
25751: DEC
25752: ST_TO_ADDR
25753: LD_INT 8
25755: PUSH
25756: FOR_TO
25757: IFFALSE 25805
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25759: LD_OWVAR 2
25763: PUSH
25764: LD_VAR 0 1
25768: NONEQUAL
25769: PUSH
25770: LD_OWVAR 2
25774: PPUSH
25775: LD_VAR 0 1
25779: PPUSH
25780: CALL_OW 81
25784: PUSH
25785: LD_INT 2
25787: EQUAL
25788: AND
25789: IFFALSE 25803
// begin side := i ;
25791: LD_ADDR_VAR 0 3
25795: PUSH
25796: LD_VAR 0 1
25800: ST_TO_ADDR
// break ;
25801: GO 25805
// end ;
25803: GO 25756
25805: POP
25806: POP
// if not side then
25807: LD_VAR 0 3
25811: NOT
25812: IFFALSE 25816
// exit ;
25814: GO 25861
// for i := 1 to tmp do
25816: LD_ADDR_VAR 0 1
25820: PUSH
25821: DOUBLE
25822: LD_INT 1
25824: DEC
25825: ST_TO_ADDR
25826: LD_VAR 0 2
25830: PUSH
25831: FOR_TO
25832: IFFALSE 25859
// if Prob ( 60 ) then
25834: LD_INT 60
25836: PPUSH
25837: CALL_OW 13
25841: IFFALSE 25857
// SetSide ( i , side ) ;
25843: LD_VAR 0 1
25847: PPUSH
25848: LD_VAR 0 3
25852: PPUSH
25853: CALL_OW 235
25857: GO 25831
25859: POP
25860: POP
// end ;
25861: PPOPN 3
25863: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25864: LD_EXP 64
25868: PUSH
25869: LD_EXP 77
25873: AND
25874: IFFALSE 25993
25876: GO 25878
25878: DISABLE
25879: LD_INT 0
25881: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25882: LD_ADDR_VAR 0 1
25886: PUSH
25887: LD_INT 22
25889: PUSH
25890: LD_OWVAR 2
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 21
25901: PUSH
25902: LD_INT 1
25904: PUSH
25905: EMPTY
25906: LIST
25907: LIST
25908: PUSH
25909: LD_INT 3
25911: PUSH
25912: LD_INT 23
25914: PUSH
25915: LD_INT 0
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: EMPTY
25923: LIST
25924: LIST
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: LIST
25930: PPUSH
25931: CALL_OW 69
25935: PUSH
25936: FOR_IN
25937: IFFALSE 25991
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25939: LD_VAR 0 1
25943: PPUSH
25944: CALL_OW 257
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: LD_INT 2
25954: PUSH
25955: LD_INT 3
25957: PUSH
25958: LD_INT 4
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: IN
25967: IFFALSE 25989
// SetClass ( un , rand ( 1 , 4 ) ) ;
25969: LD_VAR 0 1
25973: PPUSH
25974: LD_INT 1
25976: PPUSH
25977: LD_INT 4
25979: PPUSH
25980: CALL_OW 12
25984: PPUSH
25985: CALL_OW 336
25989: GO 25936
25991: POP
25992: POP
// end ;
25993: PPOPN 1
25995: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25996: LD_EXP 64
26000: PUSH
26001: LD_EXP 76
26005: AND
26006: IFFALSE 26085
26008: GO 26010
26010: DISABLE
26011: LD_INT 0
26013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26014: LD_ADDR_VAR 0 1
26018: PUSH
26019: LD_INT 22
26021: PUSH
26022: LD_OWVAR 2
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PUSH
26031: LD_INT 21
26033: PUSH
26034: LD_INT 3
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: PPUSH
26045: CALL_OW 69
26049: ST_TO_ADDR
// if not tmp then
26050: LD_VAR 0 1
26054: NOT
26055: IFFALSE 26059
// exit ;
26057: GO 26085
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26059: LD_VAR 0 1
26063: PUSH
26064: LD_INT 1
26066: PPUSH
26067: LD_VAR 0 1
26071: PPUSH
26072: CALL_OW 12
26076: ARRAY
26077: PPUSH
26078: LD_INT 100
26080: PPUSH
26081: CALL_OW 234
// end ;
26085: PPOPN 1
26087: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26088: LD_EXP 64
26092: PUSH
26093: LD_EXP 78
26097: AND
26098: IFFALSE 26196
26100: GO 26102
26102: DISABLE
26103: LD_INT 0
26105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26106: LD_ADDR_VAR 0 1
26110: PUSH
26111: LD_INT 22
26113: PUSH
26114: LD_OWVAR 2
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 21
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: PPUSH
26137: CALL_OW 69
26141: ST_TO_ADDR
// if not tmp then
26142: LD_VAR 0 1
26146: NOT
26147: IFFALSE 26151
// exit ;
26149: GO 26196
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26151: LD_VAR 0 1
26155: PUSH
26156: LD_INT 1
26158: PPUSH
26159: LD_VAR 0 1
26163: PPUSH
26164: CALL_OW 12
26168: ARRAY
26169: PPUSH
26170: LD_INT 1
26172: PPUSH
26173: LD_INT 4
26175: PPUSH
26176: CALL_OW 12
26180: PPUSH
26181: LD_INT 3000
26183: PPUSH
26184: LD_INT 9000
26186: PPUSH
26187: CALL_OW 12
26191: PPUSH
26192: CALL_OW 492
// end ;
26196: PPOPN 1
26198: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26199: LD_EXP 64
26203: PUSH
26204: LD_EXP 79
26208: AND
26209: IFFALSE 26229
26211: GO 26213
26213: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26214: LD_INT 1
26216: PPUSH
26217: LD_OWVAR 2
26221: PPUSH
26222: LD_INT 0
26224: PPUSH
26225: CALL_OW 324
26229: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26230: LD_EXP 64
26234: PUSH
26235: LD_EXP 80
26239: AND
26240: IFFALSE 26323
26242: GO 26244
26244: DISABLE
26245: LD_INT 0
26247: PPUSH
26248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26249: LD_ADDR_VAR 0 2
26253: PUSH
26254: LD_INT 22
26256: PUSH
26257: LD_OWVAR 2
26261: PUSH
26262: EMPTY
26263: LIST
26264: LIST
26265: PUSH
26266: LD_INT 21
26268: PUSH
26269: LD_INT 3
26271: PUSH
26272: EMPTY
26273: LIST
26274: LIST
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PPUSH
26280: CALL_OW 69
26284: ST_TO_ADDR
// if not tmp then
26285: LD_VAR 0 2
26289: NOT
26290: IFFALSE 26294
// exit ;
26292: GO 26323
// for i in tmp do
26294: LD_ADDR_VAR 0 1
26298: PUSH
26299: LD_VAR 0 2
26303: PUSH
26304: FOR_IN
26305: IFFALSE 26321
// SetBLevel ( i , 10 ) ;
26307: LD_VAR 0 1
26311: PPUSH
26312: LD_INT 10
26314: PPUSH
26315: CALL_OW 241
26319: GO 26304
26321: POP
26322: POP
// end ;
26323: PPOPN 2
26325: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26326: LD_EXP 64
26330: PUSH
26331: LD_EXP 81
26335: AND
26336: IFFALSE 26447
26338: GO 26340
26340: DISABLE
26341: LD_INT 0
26343: PPUSH
26344: PPUSH
26345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26346: LD_ADDR_VAR 0 3
26350: PUSH
26351: LD_INT 22
26353: PUSH
26354: LD_OWVAR 2
26358: PUSH
26359: EMPTY
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 25
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PPUSH
26377: CALL_OW 69
26381: ST_TO_ADDR
// if not tmp then
26382: LD_VAR 0 3
26386: NOT
26387: IFFALSE 26391
// exit ;
26389: GO 26447
// un := tmp [ rand ( 1 , tmp ) ] ;
26391: LD_ADDR_VAR 0 2
26395: PUSH
26396: LD_VAR 0 3
26400: PUSH
26401: LD_INT 1
26403: PPUSH
26404: LD_VAR 0 3
26408: PPUSH
26409: CALL_OW 12
26413: ARRAY
26414: ST_TO_ADDR
// if Crawls ( un ) then
26415: LD_VAR 0 2
26419: PPUSH
26420: CALL_OW 318
26424: IFFALSE 26435
// ComWalk ( un ) ;
26426: LD_VAR 0 2
26430: PPUSH
26431: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26435: LD_VAR 0 2
26439: PPUSH
26440: LD_INT 5
26442: PPUSH
26443: CALL_OW 336
// end ;
26447: PPOPN 3
26449: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26450: LD_EXP 64
26454: PUSH
26455: LD_EXP 82
26459: AND
26460: PUSH
26461: LD_OWVAR 67
26465: PUSH
26466: LD_INT 4
26468: LESS
26469: AND
26470: IFFALSE 26489
26472: GO 26474
26474: DISABLE
// begin Difficulty := Difficulty + 1 ;
26475: LD_ADDR_OWVAR 67
26479: PUSH
26480: LD_OWVAR 67
26484: PUSH
26485: LD_INT 1
26487: PLUS
26488: ST_TO_ADDR
// end ;
26489: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26490: LD_EXP 64
26494: PUSH
26495: LD_EXP 83
26499: AND
26500: IFFALSE 26603
26502: GO 26504
26504: DISABLE
26505: LD_INT 0
26507: PPUSH
// begin for i := 1 to 5 do
26508: LD_ADDR_VAR 0 1
26512: PUSH
26513: DOUBLE
26514: LD_INT 1
26516: DEC
26517: ST_TO_ADDR
26518: LD_INT 5
26520: PUSH
26521: FOR_TO
26522: IFFALSE 26601
// begin uc_nation := nation_nature ;
26524: LD_ADDR_OWVAR 21
26528: PUSH
26529: LD_INT 0
26531: ST_TO_ADDR
// uc_side := 0 ;
26532: LD_ADDR_OWVAR 20
26536: PUSH
26537: LD_INT 0
26539: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26540: LD_ADDR_OWVAR 29
26544: PUSH
26545: LD_INT 12
26547: PUSH
26548: LD_INT 12
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: ST_TO_ADDR
// hc_agressivity := 20 ;
26555: LD_ADDR_OWVAR 35
26559: PUSH
26560: LD_INT 20
26562: ST_TO_ADDR
// hc_class := class_tiger ;
26563: LD_ADDR_OWVAR 28
26567: PUSH
26568: LD_INT 14
26570: ST_TO_ADDR
// hc_gallery :=  ;
26571: LD_ADDR_OWVAR 33
26575: PUSH
26576: LD_STRING 
26578: ST_TO_ADDR
// hc_name :=  ;
26579: LD_ADDR_OWVAR 26
26583: PUSH
26584: LD_STRING 
26586: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26587: CALL_OW 44
26591: PPUSH
26592: LD_INT 0
26594: PPUSH
26595: CALL_OW 51
// end ;
26599: GO 26521
26601: POP
26602: POP
// end ;
26603: PPOPN 1
26605: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26606: LD_EXP 64
26610: PUSH
26611: LD_EXP 84
26615: AND
26616: IFFALSE 26625
26618: GO 26620
26620: DISABLE
// StreamSibBomb ;
26621: CALL 26626 0 0
26625: END
// export function StreamSibBomb ; var i , x , y ; begin
26626: LD_INT 0
26628: PPUSH
26629: PPUSH
26630: PPUSH
26631: PPUSH
// result := false ;
26632: LD_ADDR_VAR 0 1
26636: PUSH
26637: LD_INT 0
26639: ST_TO_ADDR
// for i := 1 to 16 do
26640: LD_ADDR_VAR 0 2
26644: PUSH
26645: DOUBLE
26646: LD_INT 1
26648: DEC
26649: ST_TO_ADDR
26650: LD_INT 16
26652: PUSH
26653: FOR_TO
26654: IFFALSE 26853
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26656: LD_ADDR_VAR 0 3
26660: PUSH
26661: LD_INT 10
26663: PUSH
26664: LD_INT 20
26666: PUSH
26667: LD_INT 30
26669: PUSH
26670: LD_INT 40
26672: PUSH
26673: LD_INT 50
26675: PUSH
26676: LD_INT 60
26678: PUSH
26679: LD_INT 70
26681: PUSH
26682: LD_INT 80
26684: PUSH
26685: LD_INT 90
26687: PUSH
26688: LD_INT 100
26690: PUSH
26691: LD_INT 110
26693: PUSH
26694: LD_INT 120
26696: PUSH
26697: LD_INT 130
26699: PUSH
26700: LD_INT 140
26702: PUSH
26703: LD_INT 150
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: LIST
26713: LIST
26714: LIST
26715: LIST
26716: LIST
26717: LIST
26718: LIST
26719: LIST
26720: LIST
26721: LIST
26722: PUSH
26723: LD_INT 1
26725: PPUSH
26726: LD_INT 15
26728: PPUSH
26729: CALL_OW 12
26733: ARRAY
26734: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26735: LD_ADDR_VAR 0 4
26739: PUSH
26740: LD_INT 10
26742: PUSH
26743: LD_INT 20
26745: PUSH
26746: LD_INT 30
26748: PUSH
26749: LD_INT 40
26751: PUSH
26752: LD_INT 50
26754: PUSH
26755: LD_INT 60
26757: PUSH
26758: LD_INT 70
26760: PUSH
26761: LD_INT 80
26763: PUSH
26764: LD_INT 90
26766: PUSH
26767: LD_INT 100
26769: PUSH
26770: LD_INT 110
26772: PUSH
26773: LD_INT 120
26775: PUSH
26776: LD_INT 130
26778: PUSH
26779: LD_INT 140
26781: PUSH
26782: LD_INT 150
26784: PUSH
26785: EMPTY
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: LIST
26791: LIST
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: LIST
26798: LIST
26799: LIST
26800: LIST
26801: PUSH
26802: LD_INT 1
26804: PPUSH
26805: LD_INT 15
26807: PPUSH
26808: CALL_OW 12
26812: ARRAY
26813: ST_TO_ADDR
// if ValidHex ( x , y ) then
26814: LD_VAR 0 3
26818: PPUSH
26819: LD_VAR 0 4
26823: PPUSH
26824: CALL_OW 488
26828: IFFALSE 26851
// begin result := [ x , y ] ;
26830: LD_ADDR_VAR 0 1
26834: PUSH
26835: LD_VAR 0 3
26839: PUSH
26840: LD_VAR 0 4
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: ST_TO_ADDR
// break ;
26849: GO 26853
// end ; end ;
26851: GO 26653
26853: POP
26854: POP
// if result then
26855: LD_VAR 0 1
26859: IFFALSE 26919
// begin ToLua ( playSibBomb() ) ;
26861: LD_STRING playSibBomb()
26863: PPUSH
26864: CALL_OW 559
// wait ( 0 0$14 ) ;
26868: LD_INT 490
26870: PPUSH
26871: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26875: LD_VAR 0 1
26879: PUSH
26880: LD_INT 1
26882: ARRAY
26883: PPUSH
26884: LD_VAR 0 1
26888: PUSH
26889: LD_INT 2
26891: ARRAY
26892: PPUSH
26893: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26897: LD_VAR 0 1
26901: PUSH
26902: LD_INT 1
26904: ARRAY
26905: PPUSH
26906: LD_VAR 0 1
26910: PUSH
26911: LD_INT 2
26913: ARRAY
26914: PPUSH
26915: CALL_OW 429
// end ; end ;
26919: LD_VAR 0 1
26923: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26924: LD_EXP 64
26928: PUSH
26929: LD_EXP 86
26933: AND
26934: IFFALSE 26946
26936: GO 26938
26938: DISABLE
// YouLost (  ) ;
26939: LD_STRING 
26941: PPUSH
26942: CALL_OW 104
26946: END
// every 0 0$1 trigger StreamModeActive and sFog do
26947: LD_EXP 64
26951: PUSH
26952: LD_EXP 85
26956: AND
26957: IFFALSE 26971
26959: GO 26961
26961: DISABLE
// FogOff ( your_side ) ;
26962: LD_OWVAR 2
26966: PPUSH
26967: CALL_OW 344
26971: END
// every 0 0$1 trigger StreamModeActive and sSun do
26972: LD_EXP 64
26976: PUSH
26977: LD_EXP 87
26981: AND
26982: IFFALSE 27010
26984: GO 26986
26986: DISABLE
// begin solar_recharge_percent := 0 ;
26987: LD_ADDR_OWVAR 79
26991: PUSH
26992: LD_INT 0
26994: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26995: LD_INT 10500
26997: PPUSH
26998: CALL_OW 67
// solar_recharge_percent := 100 ;
27002: LD_ADDR_OWVAR 79
27006: PUSH
27007: LD_INT 100
27009: ST_TO_ADDR
// end ;
27010: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27011: LD_EXP 64
27015: PUSH
27016: LD_EXP 88
27020: AND
27021: IFFALSE 27260
27023: GO 27025
27025: DISABLE
27026: LD_INT 0
27028: PPUSH
27029: PPUSH
27030: PPUSH
// begin tmp := [ ] ;
27031: LD_ADDR_VAR 0 3
27035: PUSH
27036: EMPTY
27037: ST_TO_ADDR
// for i := 1 to 6 do
27038: LD_ADDR_VAR 0 1
27042: PUSH
27043: DOUBLE
27044: LD_INT 1
27046: DEC
27047: ST_TO_ADDR
27048: LD_INT 6
27050: PUSH
27051: FOR_TO
27052: IFFALSE 27157
// begin uc_nation := nation_nature ;
27054: LD_ADDR_OWVAR 21
27058: PUSH
27059: LD_INT 0
27061: ST_TO_ADDR
// uc_side := 0 ;
27062: LD_ADDR_OWVAR 20
27066: PUSH
27067: LD_INT 0
27069: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27070: LD_ADDR_OWVAR 29
27074: PUSH
27075: LD_INT 12
27077: PUSH
27078: LD_INT 12
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: ST_TO_ADDR
// hc_agressivity := 20 ;
27085: LD_ADDR_OWVAR 35
27089: PUSH
27090: LD_INT 20
27092: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27093: LD_ADDR_OWVAR 28
27097: PUSH
27098: LD_INT 17
27100: ST_TO_ADDR
// hc_gallery :=  ;
27101: LD_ADDR_OWVAR 33
27105: PUSH
27106: LD_STRING 
27108: ST_TO_ADDR
// hc_name :=  ;
27109: LD_ADDR_OWVAR 26
27113: PUSH
27114: LD_STRING 
27116: ST_TO_ADDR
// un := CreateHuman ;
27117: LD_ADDR_VAR 0 2
27121: PUSH
27122: CALL_OW 44
27126: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27127: LD_VAR 0 2
27131: PPUSH
27132: LD_INT 1
27134: PPUSH
27135: CALL_OW 51
// tmp := tmp ^ un ;
27139: LD_ADDR_VAR 0 3
27143: PUSH
27144: LD_VAR 0 3
27148: PUSH
27149: LD_VAR 0 2
27153: ADD
27154: ST_TO_ADDR
// end ;
27155: GO 27051
27157: POP
27158: POP
// repeat wait ( 0 0$1 ) ;
27159: LD_INT 35
27161: PPUSH
27162: CALL_OW 67
// for un in tmp do
27166: LD_ADDR_VAR 0 2
27170: PUSH
27171: LD_VAR 0 3
27175: PUSH
27176: FOR_IN
27177: IFFALSE 27251
// begin if IsDead ( un ) then
27179: LD_VAR 0 2
27183: PPUSH
27184: CALL_OW 301
27188: IFFALSE 27208
// begin tmp := tmp diff un ;
27190: LD_ADDR_VAR 0 3
27194: PUSH
27195: LD_VAR 0 3
27199: PUSH
27200: LD_VAR 0 2
27204: DIFF
27205: ST_TO_ADDR
// continue ;
27206: GO 27176
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27208: LD_VAR 0 2
27212: PPUSH
27213: LD_INT 3
27215: PUSH
27216: LD_INT 22
27218: PUSH
27219: LD_INT 0
27221: PUSH
27222: EMPTY
27223: LIST
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PPUSH
27230: CALL_OW 69
27234: PPUSH
27235: LD_VAR 0 2
27239: PPUSH
27240: CALL_OW 74
27244: PPUSH
27245: CALL_OW 115
// end ;
27249: GO 27176
27251: POP
27252: POP
// until not tmp ;
27253: LD_VAR 0 3
27257: NOT
27258: IFFALSE 27159
// end ;
27260: PPOPN 3
27262: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27263: LD_EXP 64
27267: PUSH
27268: LD_EXP 89
27272: AND
27273: IFFALSE 27327
27275: GO 27277
27277: DISABLE
// begin ToLua ( displayTroll(); ) ;
27278: LD_STRING displayTroll();
27280: PPUSH
27281: CALL_OW 559
// wait ( 3 3$00 ) ;
27285: LD_INT 6300
27287: PPUSH
27288: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27292: LD_STRING hideTroll();
27294: PPUSH
27295: CALL_OW 559
// wait ( 1 1$00 ) ;
27299: LD_INT 2100
27301: PPUSH
27302: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27306: LD_STRING displayTroll();
27308: PPUSH
27309: CALL_OW 559
// wait ( 1 1$00 ) ;
27313: LD_INT 2100
27315: PPUSH
27316: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27320: LD_STRING hideTroll();
27322: PPUSH
27323: CALL_OW 559
// end ;
27327: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27328: LD_EXP 64
27332: PUSH
27333: LD_EXP 90
27337: AND
27338: IFFALSE 27401
27340: GO 27342
27342: DISABLE
27343: LD_INT 0
27345: PPUSH
// begin p := 0 ;
27346: LD_ADDR_VAR 0 1
27350: PUSH
27351: LD_INT 0
27353: ST_TO_ADDR
// repeat game_speed := 1 ;
27354: LD_ADDR_OWVAR 65
27358: PUSH
27359: LD_INT 1
27361: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27362: LD_INT 35
27364: PPUSH
27365: CALL_OW 67
// p := p + 1 ;
27369: LD_ADDR_VAR 0 1
27373: PUSH
27374: LD_VAR 0 1
27378: PUSH
27379: LD_INT 1
27381: PLUS
27382: ST_TO_ADDR
// until p >= 60 ;
27383: LD_VAR 0 1
27387: PUSH
27388: LD_INT 60
27390: GREATEREQUAL
27391: IFFALSE 27354
// game_speed := 4 ;
27393: LD_ADDR_OWVAR 65
27397: PUSH
27398: LD_INT 4
27400: ST_TO_ADDR
// end ;
27401: PPOPN 1
27403: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27404: LD_EXP 64
27408: PUSH
27409: LD_EXP 91
27413: AND
27414: IFFALSE 27560
27416: GO 27418
27418: DISABLE
27419: LD_INT 0
27421: PPUSH
27422: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27423: LD_ADDR_VAR 0 1
27427: PUSH
27428: LD_INT 22
27430: PUSH
27431: LD_OWVAR 2
27435: PUSH
27436: EMPTY
27437: LIST
27438: LIST
27439: PUSH
27440: LD_INT 2
27442: PUSH
27443: LD_INT 30
27445: PUSH
27446: LD_INT 0
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: PUSH
27453: LD_INT 30
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: LIST
27467: PUSH
27468: EMPTY
27469: LIST
27470: LIST
27471: PPUSH
27472: CALL_OW 69
27476: ST_TO_ADDR
// if not depot then
27477: LD_VAR 0 1
27481: NOT
27482: IFFALSE 27486
// exit ;
27484: GO 27560
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27486: LD_ADDR_VAR 0 2
27490: PUSH
27491: LD_VAR 0 1
27495: PUSH
27496: LD_INT 1
27498: PPUSH
27499: LD_VAR 0 1
27503: PPUSH
27504: CALL_OW 12
27508: ARRAY
27509: PPUSH
27510: CALL_OW 274
27514: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27515: LD_VAR 0 2
27519: PPUSH
27520: LD_INT 1
27522: PPUSH
27523: LD_INT 0
27525: PPUSH
27526: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27530: LD_VAR 0 2
27534: PPUSH
27535: LD_INT 2
27537: PPUSH
27538: LD_INT 0
27540: PPUSH
27541: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27545: LD_VAR 0 2
27549: PPUSH
27550: LD_INT 3
27552: PPUSH
27553: LD_INT 0
27555: PPUSH
27556: CALL_OW 277
// end ;
27560: PPOPN 2
27562: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27563: LD_EXP 64
27567: PUSH
27568: LD_EXP 92
27572: AND
27573: IFFALSE 27670
27575: GO 27577
27577: DISABLE
27578: LD_INT 0
27580: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27581: LD_ADDR_VAR 0 1
27585: PUSH
27586: LD_INT 22
27588: PUSH
27589: LD_OWVAR 2
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 21
27600: PUSH
27601: LD_INT 1
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 3
27610: PUSH
27611: LD_INT 23
27613: PUSH
27614: LD_INT 0
27616: PUSH
27617: EMPTY
27618: LIST
27619: LIST
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: LIST
27629: PPUSH
27630: CALL_OW 69
27634: ST_TO_ADDR
// if not tmp then
27635: LD_VAR 0 1
27639: NOT
27640: IFFALSE 27644
// exit ;
27642: GO 27670
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27644: LD_VAR 0 1
27648: PUSH
27649: LD_INT 1
27651: PPUSH
27652: LD_VAR 0 1
27656: PPUSH
27657: CALL_OW 12
27661: ARRAY
27662: PPUSH
27663: LD_INT 200
27665: PPUSH
27666: CALL_OW 234
// end ;
27670: PPOPN 1
27672: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27673: LD_EXP 64
27677: PUSH
27678: LD_EXP 93
27682: AND
27683: IFFALSE 27762
27685: GO 27687
27687: DISABLE
27688: LD_INT 0
27690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27691: LD_ADDR_VAR 0 1
27695: PUSH
27696: LD_INT 22
27698: PUSH
27699: LD_OWVAR 2
27703: PUSH
27704: EMPTY
27705: LIST
27706: LIST
27707: PUSH
27708: LD_INT 21
27710: PUSH
27711: LD_INT 2
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: PPUSH
27722: CALL_OW 69
27726: ST_TO_ADDR
// if not tmp then
27727: LD_VAR 0 1
27731: NOT
27732: IFFALSE 27736
// exit ;
27734: GO 27762
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27736: LD_VAR 0 1
27740: PUSH
27741: LD_INT 1
27743: PPUSH
27744: LD_VAR 0 1
27748: PPUSH
27749: CALL_OW 12
27753: ARRAY
27754: PPUSH
27755: LD_INT 60
27757: PPUSH
27758: CALL_OW 234
// end ;
27762: PPOPN 1
27764: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27765: LD_EXP 64
27769: PUSH
27770: LD_EXP 94
27774: AND
27775: IFFALSE 27874
27777: GO 27779
27779: DISABLE
27780: LD_INT 0
27782: PPUSH
27783: PPUSH
// begin enable ;
27784: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27785: LD_ADDR_VAR 0 1
27789: PUSH
27790: LD_INT 22
27792: PUSH
27793: LD_OWVAR 2
27797: PUSH
27798: EMPTY
27799: LIST
27800: LIST
27801: PUSH
27802: LD_INT 61
27804: PUSH
27805: EMPTY
27806: LIST
27807: PUSH
27808: LD_INT 33
27810: PUSH
27811: LD_INT 2
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: LIST
27822: PPUSH
27823: CALL_OW 69
27827: ST_TO_ADDR
// if not tmp then
27828: LD_VAR 0 1
27832: NOT
27833: IFFALSE 27837
// exit ;
27835: GO 27874
// for i in tmp do
27837: LD_ADDR_VAR 0 2
27841: PUSH
27842: LD_VAR 0 1
27846: PUSH
27847: FOR_IN
27848: IFFALSE 27872
// if IsControledBy ( i ) then
27850: LD_VAR 0 2
27854: PPUSH
27855: CALL_OW 312
27859: IFFALSE 27870
// ComUnlink ( i ) ;
27861: LD_VAR 0 2
27865: PPUSH
27866: CALL_OW 136
27870: GO 27847
27872: POP
27873: POP
// end ;
27874: PPOPN 2
27876: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27877: LD_EXP 64
27881: PUSH
27882: LD_EXP 95
27886: AND
27887: IFFALSE 28027
27889: GO 27891
27891: DISABLE
27892: LD_INT 0
27894: PPUSH
27895: PPUSH
// begin ToLua ( displayPowell(); ) ;
27896: LD_STRING displayPowell();
27898: PPUSH
27899: CALL_OW 559
// uc_side := 0 ;
27903: LD_ADDR_OWVAR 20
27907: PUSH
27908: LD_INT 0
27910: ST_TO_ADDR
// uc_nation := 2 ;
27911: LD_ADDR_OWVAR 21
27915: PUSH
27916: LD_INT 2
27918: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27919: LD_ADDR_OWVAR 37
27923: PUSH
27924: LD_INT 14
27926: ST_TO_ADDR
// vc_engine := engine_siberite ;
27927: LD_ADDR_OWVAR 39
27931: PUSH
27932: LD_INT 3
27934: ST_TO_ADDR
// vc_control := control_apeman ;
27935: LD_ADDR_OWVAR 38
27939: PUSH
27940: LD_INT 5
27942: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27943: LD_ADDR_OWVAR 40
27947: PUSH
27948: LD_INT 29
27950: ST_TO_ADDR
// un := CreateVehicle ;
27951: LD_ADDR_VAR 0 2
27955: PUSH
27956: CALL_OW 45
27960: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27961: LD_VAR 0 2
27965: PPUSH
27966: LD_INT 1
27968: PPUSH
27969: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27973: LD_INT 35
27975: PPUSH
27976: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27980: LD_VAR 0 2
27984: PPUSH
27985: LD_INT 22
27987: PUSH
27988: LD_OWVAR 2
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PPUSH
27997: CALL_OW 69
28001: PPUSH
28002: LD_VAR 0 2
28006: PPUSH
28007: CALL_OW 74
28011: PPUSH
28012: CALL_OW 115
// until IsDead ( un ) ;
28016: LD_VAR 0 2
28020: PPUSH
28021: CALL_OW 301
28025: IFFALSE 27973
// end ;
28027: PPOPN 2
28029: END
// every 0 0$1 trigger StreamModeActive and sStu do
28030: LD_EXP 64
28034: PUSH
28035: LD_EXP 103
28039: AND
28040: IFFALSE 28056
28042: GO 28044
28044: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28045: LD_STRING displayStucuk();
28047: PPUSH
28048: CALL_OW 559
// ResetFog ;
28052: CALL_OW 335
// end ;
28056: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28057: LD_EXP 64
28061: PUSH
28062: LD_EXP 96
28066: AND
28067: IFFALSE 28208
28069: GO 28071
28071: DISABLE
28072: LD_INT 0
28074: PPUSH
28075: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28076: LD_ADDR_VAR 0 2
28080: PUSH
28081: LD_INT 22
28083: PUSH
28084: LD_OWVAR 2
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 21
28095: PUSH
28096: LD_INT 1
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: PPUSH
28107: CALL_OW 69
28111: ST_TO_ADDR
// if not tmp then
28112: LD_VAR 0 2
28116: NOT
28117: IFFALSE 28121
// exit ;
28119: GO 28208
// un := tmp [ rand ( 1 , tmp ) ] ;
28121: LD_ADDR_VAR 0 1
28125: PUSH
28126: LD_VAR 0 2
28130: PUSH
28131: LD_INT 1
28133: PPUSH
28134: LD_VAR 0 2
28138: PPUSH
28139: CALL_OW 12
28143: ARRAY
28144: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28145: LD_VAR 0 1
28149: PPUSH
28150: LD_INT 0
28152: PPUSH
28153: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28157: LD_VAR 0 1
28161: PPUSH
28162: LD_OWVAR 3
28166: PUSH
28167: LD_VAR 0 1
28171: DIFF
28172: PPUSH
28173: LD_VAR 0 1
28177: PPUSH
28178: CALL_OW 74
28182: PPUSH
28183: CALL_OW 115
// wait ( 0 0$20 ) ;
28187: LD_INT 700
28189: PPUSH
28190: CALL_OW 67
// SetSide ( un , your_side ) ;
28194: LD_VAR 0 1
28198: PPUSH
28199: LD_OWVAR 2
28203: PPUSH
28204: CALL_OW 235
// end ;
28208: PPOPN 2
28210: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28211: LD_EXP 64
28215: PUSH
28216: LD_EXP 97
28220: AND
28221: IFFALSE 28327
28223: GO 28225
28225: DISABLE
28226: LD_INT 0
28228: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28229: LD_ADDR_VAR 0 1
28233: PUSH
28234: LD_INT 22
28236: PUSH
28237: LD_OWVAR 2
28241: PUSH
28242: EMPTY
28243: LIST
28244: LIST
28245: PUSH
28246: LD_INT 2
28248: PUSH
28249: LD_INT 30
28251: PUSH
28252: LD_INT 0
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 30
28261: PUSH
28262: LD_INT 1
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: LIST
28273: PUSH
28274: EMPTY
28275: LIST
28276: LIST
28277: PPUSH
28278: CALL_OW 69
28282: ST_TO_ADDR
// if not depot then
28283: LD_VAR 0 1
28287: NOT
28288: IFFALSE 28292
// exit ;
28290: GO 28327
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28292: LD_VAR 0 1
28296: PUSH
28297: LD_INT 1
28299: ARRAY
28300: PPUSH
28301: CALL_OW 250
28305: PPUSH
28306: LD_VAR 0 1
28310: PUSH
28311: LD_INT 1
28313: ARRAY
28314: PPUSH
28315: CALL_OW 251
28319: PPUSH
28320: LD_INT 70
28322: PPUSH
28323: CALL_OW 495
// end ;
28327: PPOPN 1
28329: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28330: LD_EXP 64
28334: PUSH
28335: LD_EXP 98
28339: AND
28340: IFFALSE 28551
28342: GO 28344
28344: DISABLE
28345: LD_INT 0
28347: PPUSH
28348: PPUSH
28349: PPUSH
28350: PPUSH
28351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28352: LD_ADDR_VAR 0 5
28356: PUSH
28357: LD_INT 22
28359: PUSH
28360: LD_OWVAR 2
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 21
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PPUSH
28383: CALL_OW 69
28387: ST_TO_ADDR
// if not tmp then
28388: LD_VAR 0 5
28392: NOT
28393: IFFALSE 28397
// exit ;
28395: GO 28551
// for i in tmp do
28397: LD_ADDR_VAR 0 1
28401: PUSH
28402: LD_VAR 0 5
28406: PUSH
28407: FOR_IN
28408: IFFALSE 28549
// begin d := rand ( 0 , 5 ) ;
28410: LD_ADDR_VAR 0 4
28414: PUSH
28415: LD_INT 0
28417: PPUSH
28418: LD_INT 5
28420: PPUSH
28421: CALL_OW 12
28425: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28426: LD_ADDR_VAR 0 2
28430: PUSH
28431: LD_VAR 0 1
28435: PPUSH
28436: CALL_OW 250
28440: PPUSH
28441: LD_VAR 0 4
28445: PPUSH
28446: LD_INT 3
28448: PPUSH
28449: LD_INT 12
28451: PPUSH
28452: CALL_OW 12
28456: PPUSH
28457: CALL_OW 272
28461: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28462: LD_ADDR_VAR 0 3
28466: PUSH
28467: LD_VAR 0 1
28471: PPUSH
28472: CALL_OW 251
28476: PPUSH
28477: LD_VAR 0 4
28481: PPUSH
28482: LD_INT 3
28484: PPUSH
28485: LD_INT 12
28487: PPUSH
28488: CALL_OW 12
28492: PPUSH
28493: CALL_OW 273
28497: ST_TO_ADDR
// if ValidHex ( x , y ) then
28498: LD_VAR 0 2
28502: PPUSH
28503: LD_VAR 0 3
28507: PPUSH
28508: CALL_OW 488
28512: IFFALSE 28547
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28514: LD_VAR 0 1
28518: PPUSH
28519: LD_VAR 0 2
28523: PPUSH
28524: LD_VAR 0 3
28528: PPUSH
28529: LD_INT 3
28531: PPUSH
28532: LD_INT 6
28534: PPUSH
28535: CALL_OW 12
28539: PPUSH
28540: LD_INT 1
28542: PPUSH
28543: CALL_OW 483
// end ;
28547: GO 28407
28549: POP
28550: POP
// end ;
28551: PPOPN 5
28553: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28554: LD_EXP 64
28558: PUSH
28559: LD_EXP 99
28563: AND
28564: IFFALSE 28658
28566: GO 28568
28568: DISABLE
28569: LD_INT 0
28571: PPUSH
28572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28573: LD_ADDR_VAR 0 2
28577: PUSH
28578: LD_INT 22
28580: PUSH
28581: LD_OWVAR 2
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: PUSH
28590: LD_INT 32
28592: PUSH
28593: LD_INT 1
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 21
28602: PUSH
28603: LD_INT 2
28605: PUSH
28606: EMPTY
28607: LIST
28608: LIST
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: LIST
28614: PPUSH
28615: CALL_OW 69
28619: ST_TO_ADDR
// if not tmp then
28620: LD_VAR 0 2
28624: NOT
28625: IFFALSE 28629
// exit ;
28627: GO 28658
// for i in tmp do
28629: LD_ADDR_VAR 0 1
28633: PUSH
28634: LD_VAR 0 2
28638: PUSH
28639: FOR_IN
28640: IFFALSE 28656
// SetFuel ( i , 0 ) ;
28642: LD_VAR 0 1
28646: PPUSH
28647: LD_INT 0
28649: PPUSH
28650: CALL_OW 240
28654: GO 28639
28656: POP
28657: POP
// end ;
28658: PPOPN 2
28660: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28661: LD_EXP 64
28665: PUSH
28666: LD_EXP 100
28670: AND
28671: IFFALSE 28737
28673: GO 28675
28675: DISABLE
28676: LD_INT 0
28678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28679: LD_ADDR_VAR 0 1
28683: PUSH
28684: LD_INT 22
28686: PUSH
28687: LD_OWVAR 2
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 30
28698: PUSH
28699: LD_INT 29
28701: PUSH
28702: EMPTY
28703: LIST
28704: LIST
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PPUSH
28710: CALL_OW 69
28714: ST_TO_ADDR
// if not tmp then
28715: LD_VAR 0 1
28719: NOT
28720: IFFALSE 28724
// exit ;
28722: GO 28737
// DestroyUnit ( tmp [ 1 ] ) ;
28724: LD_VAR 0 1
28728: PUSH
28729: LD_INT 1
28731: ARRAY
28732: PPUSH
28733: CALL_OW 65
// end ;
28737: PPOPN 1
28739: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28740: LD_EXP 64
28744: PUSH
28745: LD_EXP 102
28749: AND
28750: IFFALSE 28879
28752: GO 28754
28754: DISABLE
28755: LD_INT 0
28757: PPUSH
// begin uc_side := 0 ;
28758: LD_ADDR_OWVAR 20
28762: PUSH
28763: LD_INT 0
28765: ST_TO_ADDR
// uc_nation := nation_arabian ;
28766: LD_ADDR_OWVAR 21
28770: PUSH
28771: LD_INT 2
28773: ST_TO_ADDR
// hc_gallery :=  ;
28774: LD_ADDR_OWVAR 33
28778: PUSH
28779: LD_STRING 
28781: ST_TO_ADDR
// hc_name :=  ;
28782: LD_ADDR_OWVAR 26
28786: PUSH
28787: LD_STRING 
28789: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28790: LD_INT 1
28792: PPUSH
28793: LD_INT 11
28795: PPUSH
28796: LD_INT 10
28798: PPUSH
28799: CALL_OW 380
// un := CreateHuman ;
28803: LD_ADDR_VAR 0 1
28807: PUSH
28808: CALL_OW 44
28812: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28813: LD_VAR 0 1
28817: PPUSH
28818: LD_INT 1
28820: PPUSH
28821: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28825: LD_INT 35
28827: PPUSH
28828: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28832: LD_VAR 0 1
28836: PPUSH
28837: LD_INT 22
28839: PUSH
28840: LD_OWVAR 2
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PPUSH
28849: CALL_OW 69
28853: PPUSH
28854: LD_VAR 0 1
28858: PPUSH
28859: CALL_OW 74
28863: PPUSH
28864: CALL_OW 115
// until IsDead ( un ) ;
28868: LD_VAR 0 1
28872: PPUSH
28873: CALL_OW 301
28877: IFFALSE 28825
// end ;
28879: PPOPN 1
28881: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28882: LD_EXP 64
28886: PUSH
28887: LD_EXP 104
28891: AND
28892: IFFALSE 28904
28894: GO 28896
28896: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28897: LD_STRING earthquake(getX(game), 0, 32)
28899: PPUSH
28900: CALL_OW 559
28904: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28905: LD_EXP 64
28909: PUSH
28910: LD_EXP 105
28914: AND
28915: IFFALSE 29006
28917: GO 28919
28919: DISABLE
28920: LD_INT 0
28922: PPUSH
// begin enable ;
28923: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28924: LD_ADDR_VAR 0 1
28928: PUSH
28929: LD_INT 22
28931: PUSH
28932: LD_OWVAR 2
28936: PUSH
28937: EMPTY
28938: LIST
28939: LIST
28940: PUSH
28941: LD_INT 21
28943: PUSH
28944: LD_INT 2
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: PUSH
28951: LD_INT 33
28953: PUSH
28954: LD_INT 3
28956: PUSH
28957: EMPTY
28958: LIST
28959: LIST
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: LIST
28965: PPUSH
28966: CALL_OW 69
28970: ST_TO_ADDR
// if not tmp then
28971: LD_VAR 0 1
28975: NOT
28976: IFFALSE 28980
// exit ;
28978: GO 29006
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28980: LD_VAR 0 1
28984: PUSH
28985: LD_INT 1
28987: PPUSH
28988: LD_VAR 0 1
28992: PPUSH
28993: CALL_OW 12
28997: ARRAY
28998: PPUSH
28999: LD_INT 1
29001: PPUSH
29002: CALL_OW 234
// end ;
29006: PPOPN 1
29008: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29009: LD_EXP 64
29013: PUSH
29014: LD_EXP 106
29018: AND
29019: IFFALSE 29160
29021: GO 29023
29023: DISABLE
29024: LD_INT 0
29026: PPUSH
29027: PPUSH
29028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29029: LD_ADDR_VAR 0 3
29033: PUSH
29034: LD_INT 22
29036: PUSH
29037: LD_OWVAR 2
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: PUSH
29046: LD_INT 25
29048: PUSH
29049: LD_INT 1
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PPUSH
29060: CALL_OW 69
29064: ST_TO_ADDR
// if not tmp then
29065: LD_VAR 0 3
29069: NOT
29070: IFFALSE 29074
// exit ;
29072: GO 29160
// un := tmp [ rand ( 1 , tmp ) ] ;
29074: LD_ADDR_VAR 0 2
29078: PUSH
29079: LD_VAR 0 3
29083: PUSH
29084: LD_INT 1
29086: PPUSH
29087: LD_VAR 0 3
29091: PPUSH
29092: CALL_OW 12
29096: ARRAY
29097: ST_TO_ADDR
// if Crawls ( un ) then
29098: LD_VAR 0 2
29102: PPUSH
29103: CALL_OW 318
29107: IFFALSE 29118
// ComWalk ( un ) ;
29109: LD_VAR 0 2
29113: PPUSH
29114: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29118: LD_VAR 0 2
29122: PPUSH
29123: LD_INT 9
29125: PPUSH
29126: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29130: LD_INT 28
29132: PPUSH
29133: LD_OWVAR 2
29137: PPUSH
29138: LD_INT 2
29140: PPUSH
29141: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29145: LD_INT 29
29147: PPUSH
29148: LD_OWVAR 2
29152: PPUSH
29153: LD_INT 2
29155: PPUSH
29156: CALL_OW 322
// end ;
29160: PPOPN 3
29162: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29163: LD_EXP 64
29167: PUSH
29168: LD_EXP 107
29172: AND
29173: IFFALSE 29284
29175: GO 29177
29177: DISABLE
29178: LD_INT 0
29180: PPUSH
29181: PPUSH
29182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29183: LD_ADDR_VAR 0 3
29187: PUSH
29188: LD_INT 22
29190: PUSH
29191: LD_OWVAR 2
29195: PUSH
29196: EMPTY
29197: LIST
29198: LIST
29199: PUSH
29200: LD_INT 25
29202: PUSH
29203: LD_INT 1
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PPUSH
29214: CALL_OW 69
29218: ST_TO_ADDR
// if not tmp then
29219: LD_VAR 0 3
29223: NOT
29224: IFFALSE 29228
// exit ;
29226: GO 29284
// un := tmp [ rand ( 1 , tmp ) ] ;
29228: LD_ADDR_VAR 0 2
29232: PUSH
29233: LD_VAR 0 3
29237: PUSH
29238: LD_INT 1
29240: PPUSH
29241: LD_VAR 0 3
29245: PPUSH
29246: CALL_OW 12
29250: ARRAY
29251: ST_TO_ADDR
// if Crawls ( un ) then
29252: LD_VAR 0 2
29256: PPUSH
29257: CALL_OW 318
29261: IFFALSE 29272
// ComWalk ( un ) ;
29263: LD_VAR 0 2
29267: PPUSH
29268: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29272: LD_VAR 0 2
29276: PPUSH
29277: LD_INT 8
29279: PPUSH
29280: CALL_OW 336
// end ;
29284: PPOPN 3
29286: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29287: LD_EXP 64
29291: PUSH
29292: LD_EXP 108
29296: AND
29297: IFFALSE 29441
29299: GO 29301
29301: DISABLE
29302: LD_INT 0
29304: PPUSH
29305: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29306: LD_ADDR_VAR 0 2
29310: PUSH
29311: LD_INT 22
29313: PUSH
29314: LD_OWVAR 2
29318: PUSH
29319: EMPTY
29320: LIST
29321: LIST
29322: PUSH
29323: LD_INT 21
29325: PUSH
29326: LD_INT 2
29328: PUSH
29329: EMPTY
29330: LIST
29331: LIST
29332: PUSH
29333: LD_INT 2
29335: PUSH
29336: LD_INT 34
29338: PUSH
29339: LD_INT 12
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 34
29348: PUSH
29349: LD_INT 51
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 34
29358: PUSH
29359: LD_INT 32
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: PPUSH
29377: CALL_OW 69
29381: ST_TO_ADDR
// if not tmp then
29382: LD_VAR 0 2
29386: NOT
29387: IFFALSE 29391
// exit ;
29389: GO 29441
// for i in tmp do
29391: LD_ADDR_VAR 0 1
29395: PUSH
29396: LD_VAR 0 2
29400: PUSH
29401: FOR_IN
29402: IFFALSE 29439
// if GetCargo ( i , mat_artifact ) = 0 then
29404: LD_VAR 0 1
29408: PPUSH
29409: LD_INT 4
29411: PPUSH
29412: CALL_OW 289
29416: PUSH
29417: LD_INT 0
29419: EQUAL
29420: IFFALSE 29437
// SetCargo ( i , mat_siberit , 100 ) ;
29422: LD_VAR 0 1
29426: PPUSH
29427: LD_INT 3
29429: PPUSH
29430: LD_INT 100
29432: PPUSH
29433: CALL_OW 290
29437: GO 29401
29439: POP
29440: POP
// end ;
29441: PPOPN 2
29443: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29444: LD_EXP 64
29448: PUSH
29449: LD_EXP 109
29453: AND
29454: IFFALSE 29637
29456: GO 29458
29458: DISABLE
29459: LD_INT 0
29461: PPUSH
29462: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29463: LD_ADDR_VAR 0 2
29467: PUSH
29468: LD_INT 22
29470: PUSH
29471: LD_OWVAR 2
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: PPUSH
29480: CALL_OW 69
29484: ST_TO_ADDR
// if not tmp then
29485: LD_VAR 0 2
29489: NOT
29490: IFFALSE 29494
// exit ;
29492: GO 29637
// for i := 1 to 2 do
29494: LD_ADDR_VAR 0 1
29498: PUSH
29499: DOUBLE
29500: LD_INT 1
29502: DEC
29503: ST_TO_ADDR
29504: LD_INT 2
29506: PUSH
29507: FOR_TO
29508: IFFALSE 29635
// begin uc_side := your_side ;
29510: LD_ADDR_OWVAR 20
29514: PUSH
29515: LD_OWVAR 2
29519: ST_TO_ADDR
// uc_nation := nation_american ;
29520: LD_ADDR_OWVAR 21
29524: PUSH
29525: LD_INT 1
29527: ST_TO_ADDR
// vc_chassis := us_morphling ;
29528: LD_ADDR_OWVAR 37
29532: PUSH
29533: LD_INT 5
29535: ST_TO_ADDR
// vc_engine := engine_siberite ;
29536: LD_ADDR_OWVAR 39
29540: PUSH
29541: LD_INT 3
29543: ST_TO_ADDR
// vc_control := control_computer ;
29544: LD_ADDR_OWVAR 38
29548: PUSH
29549: LD_INT 3
29551: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29552: LD_ADDR_OWVAR 40
29556: PUSH
29557: LD_INT 10
29559: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29560: LD_VAR 0 2
29564: PUSH
29565: LD_INT 1
29567: ARRAY
29568: PPUSH
29569: CALL_OW 310
29573: NOT
29574: IFFALSE 29621
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29576: CALL_OW 45
29580: PPUSH
29581: LD_VAR 0 2
29585: PUSH
29586: LD_INT 1
29588: ARRAY
29589: PPUSH
29590: CALL_OW 250
29594: PPUSH
29595: LD_VAR 0 2
29599: PUSH
29600: LD_INT 1
29602: ARRAY
29603: PPUSH
29604: CALL_OW 251
29608: PPUSH
29609: LD_INT 12
29611: PPUSH
29612: LD_INT 1
29614: PPUSH
29615: CALL_OW 50
29619: GO 29633
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29621: CALL_OW 45
29625: PPUSH
29626: LD_INT 1
29628: PPUSH
29629: CALL_OW 51
// end ;
29633: GO 29507
29635: POP
29636: POP
// end ;
29637: PPOPN 2
29639: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29640: LD_EXP 64
29644: PUSH
29645: LD_EXP 110
29649: AND
29650: IFFALSE 29872
29652: GO 29654
29654: DISABLE
29655: LD_INT 0
29657: PPUSH
29658: PPUSH
29659: PPUSH
29660: PPUSH
29661: PPUSH
29662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29663: LD_ADDR_VAR 0 6
29667: PUSH
29668: LD_INT 22
29670: PUSH
29671: LD_OWVAR 2
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 21
29682: PUSH
29683: LD_INT 1
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 3
29692: PUSH
29693: LD_INT 23
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: LIST
29711: PPUSH
29712: CALL_OW 69
29716: ST_TO_ADDR
// if not tmp then
29717: LD_VAR 0 6
29721: NOT
29722: IFFALSE 29726
// exit ;
29724: GO 29872
// s1 := rand ( 1 , 4 ) ;
29726: LD_ADDR_VAR 0 2
29730: PUSH
29731: LD_INT 1
29733: PPUSH
29734: LD_INT 4
29736: PPUSH
29737: CALL_OW 12
29741: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29742: LD_ADDR_VAR 0 4
29746: PUSH
29747: LD_VAR 0 6
29751: PUSH
29752: LD_INT 1
29754: ARRAY
29755: PPUSH
29756: LD_VAR 0 2
29760: PPUSH
29761: CALL_OW 259
29765: ST_TO_ADDR
// if s1 = 1 then
29766: LD_VAR 0 2
29770: PUSH
29771: LD_INT 1
29773: EQUAL
29774: IFFALSE 29794
// s2 := rand ( 2 , 4 ) else
29776: LD_ADDR_VAR 0 3
29780: PUSH
29781: LD_INT 2
29783: PPUSH
29784: LD_INT 4
29786: PPUSH
29787: CALL_OW 12
29791: ST_TO_ADDR
29792: GO 29802
// s2 := 1 ;
29794: LD_ADDR_VAR 0 3
29798: PUSH
29799: LD_INT 1
29801: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29802: LD_ADDR_VAR 0 5
29806: PUSH
29807: LD_VAR 0 6
29811: PUSH
29812: LD_INT 1
29814: ARRAY
29815: PPUSH
29816: LD_VAR 0 3
29820: PPUSH
29821: CALL_OW 259
29825: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29826: LD_VAR 0 6
29830: PUSH
29831: LD_INT 1
29833: ARRAY
29834: PPUSH
29835: LD_VAR 0 2
29839: PPUSH
29840: LD_VAR 0 5
29844: PPUSH
29845: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29849: LD_VAR 0 6
29853: PUSH
29854: LD_INT 1
29856: ARRAY
29857: PPUSH
29858: LD_VAR 0 3
29862: PPUSH
29863: LD_VAR 0 4
29867: PPUSH
29868: CALL_OW 237
// end ;
29872: PPOPN 6
29874: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29875: LD_EXP 64
29879: PUSH
29880: LD_EXP 111
29884: AND
29885: IFFALSE 29964
29887: GO 29889
29889: DISABLE
29890: LD_INT 0
29892: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29893: LD_ADDR_VAR 0 1
29897: PUSH
29898: LD_INT 22
29900: PUSH
29901: LD_OWVAR 2
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: PUSH
29910: LD_INT 30
29912: PUSH
29913: LD_INT 3
29915: PUSH
29916: EMPTY
29917: LIST
29918: LIST
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PPUSH
29924: CALL_OW 69
29928: ST_TO_ADDR
// if not tmp then
29929: LD_VAR 0 1
29933: NOT
29934: IFFALSE 29938
// exit ;
29936: GO 29964
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29938: LD_VAR 0 1
29942: PUSH
29943: LD_INT 1
29945: PPUSH
29946: LD_VAR 0 1
29950: PPUSH
29951: CALL_OW 12
29955: ARRAY
29956: PPUSH
29957: LD_INT 1
29959: PPUSH
29960: CALL_OW 234
// end ;
29964: PPOPN 1
29966: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29967: LD_EXP 64
29971: PUSH
29972: LD_EXP 112
29976: AND
29977: IFFALSE 30089
29979: GO 29981
29981: DISABLE
29982: LD_INT 0
29984: PPUSH
29985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29986: LD_ADDR_VAR 0 2
29990: PUSH
29991: LD_INT 22
29993: PUSH
29994: LD_OWVAR 2
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 2
30005: PUSH
30006: LD_INT 30
30008: PUSH
30009: LD_INT 27
30011: PUSH
30012: EMPTY
30013: LIST
30014: LIST
30015: PUSH
30016: LD_INT 30
30018: PUSH
30019: LD_INT 26
30021: PUSH
30022: EMPTY
30023: LIST
30024: LIST
30025: PUSH
30026: LD_INT 30
30028: PUSH
30029: LD_INT 28
30031: PUSH
30032: EMPTY
30033: LIST
30034: LIST
30035: PUSH
30036: EMPTY
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PPUSH
30046: CALL_OW 69
30050: ST_TO_ADDR
// if not tmp then
30051: LD_VAR 0 2
30055: NOT
30056: IFFALSE 30060
// exit ;
30058: GO 30089
// for i in tmp do
30060: LD_ADDR_VAR 0 1
30064: PUSH
30065: LD_VAR 0 2
30069: PUSH
30070: FOR_IN
30071: IFFALSE 30087
// SetLives ( i , 1 ) ;
30073: LD_VAR 0 1
30077: PPUSH
30078: LD_INT 1
30080: PPUSH
30081: CALL_OW 234
30085: GO 30070
30087: POP
30088: POP
// end ;
30089: PPOPN 2
30091: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30092: LD_EXP 64
30096: PUSH
30097: LD_EXP 113
30101: AND
30102: IFFALSE 30389
30104: GO 30106
30106: DISABLE
30107: LD_INT 0
30109: PPUSH
30110: PPUSH
30111: PPUSH
// begin i := rand ( 1 , 7 ) ;
30112: LD_ADDR_VAR 0 1
30116: PUSH
30117: LD_INT 1
30119: PPUSH
30120: LD_INT 7
30122: PPUSH
30123: CALL_OW 12
30127: ST_TO_ADDR
// case i of 1 :
30128: LD_VAR 0 1
30132: PUSH
30133: LD_INT 1
30135: DOUBLE
30136: EQUAL
30137: IFTRUE 30141
30139: GO 30151
30141: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30142: LD_STRING earthquake(getX(game), 0, 32)
30144: PPUSH
30145: CALL_OW 559
30149: GO 30389
30151: LD_INT 2
30153: DOUBLE
30154: EQUAL
30155: IFTRUE 30159
30157: GO 30173
30159: POP
// begin ToLua ( displayStucuk(); ) ;
30160: LD_STRING displayStucuk();
30162: PPUSH
30163: CALL_OW 559
// ResetFog ;
30167: CALL_OW 335
// end ; 3 :
30171: GO 30389
30173: LD_INT 3
30175: DOUBLE
30176: EQUAL
30177: IFTRUE 30181
30179: GO 30285
30181: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30182: LD_ADDR_VAR 0 2
30186: PUSH
30187: LD_INT 22
30189: PUSH
30190: LD_OWVAR 2
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 25
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PPUSH
30213: CALL_OW 69
30217: ST_TO_ADDR
// if not tmp then
30218: LD_VAR 0 2
30222: NOT
30223: IFFALSE 30227
// exit ;
30225: GO 30389
// un := tmp [ rand ( 1 , tmp ) ] ;
30227: LD_ADDR_VAR 0 3
30231: PUSH
30232: LD_VAR 0 2
30236: PUSH
30237: LD_INT 1
30239: PPUSH
30240: LD_VAR 0 2
30244: PPUSH
30245: CALL_OW 12
30249: ARRAY
30250: ST_TO_ADDR
// if Crawls ( un ) then
30251: LD_VAR 0 3
30255: PPUSH
30256: CALL_OW 318
30260: IFFALSE 30271
// ComWalk ( un ) ;
30262: LD_VAR 0 3
30266: PPUSH
30267: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30271: LD_VAR 0 3
30275: PPUSH
30276: LD_INT 8
30278: PPUSH
30279: CALL_OW 336
// end ; 4 :
30283: GO 30389
30285: LD_INT 4
30287: DOUBLE
30288: EQUAL
30289: IFTRUE 30293
30291: GO 30367
30293: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30294: LD_ADDR_VAR 0 2
30298: PUSH
30299: LD_INT 22
30301: PUSH
30302: LD_OWVAR 2
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: PUSH
30311: LD_INT 30
30313: PUSH
30314: LD_INT 29
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: PPUSH
30325: CALL_OW 69
30329: ST_TO_ADDR
// if not tmp then
30330: LD_VAR 0 2
30334: NOT
30335: IFFALSE 30339
// exit ;
30337: GO 30389
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30339: LD_VAR 0 2
30343: PUSH
30344: LD_INT 1
30346: ARRAY
30347: PPUSH
30348: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30352: LD_VAR 0 2
30356: PUSH
30357: LD_INT 1
30359: ARRAY
30360: PPUSH
30361: CALL_OW 65
// end ; 5 .. 7 :
30365: GO 30389
30367: LD_INT 5
30369: DOUBLE
30370: GREATEREQUAL
30371: IFFALSE 30379
30373: LD_INT 7
30375: DOUBLE
30376: LESSEQUAL
30377: IFTRUE 30381
30379: GO 30388
30381: POP
// StreamSibBomb ; end ;
30382: CALL 26626 0 0
30386: GO 30389
30388: POP
// end ;
30389: PPOPN 3
30391: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30392: LD_EXP 64
30396: PUSH
30397: LD_EXP 114
30401: AND
30402: IFFALSE 30558
30404: GO 30406
30406: DISABLE
30407: LD_INT 0
30409: PPUSH
30410: PPUSH
30411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30412: LD_ADDR_VAR 0 2
30416: PUSH
30417: LD_INT 81
30419: PUSH
30420: LD_OWVAR 2
30424: PUSH
30425: EMPTY
30426: LIST
30427: LIST
30428: PUSH
30429: LD_INT 2
30431: PUSH
30432: LD_INT 21
30434: PUSH
30435: LD_INT 1
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 21
30444: PUSH
30445: LD_INT 2
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: LIST
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: PPUSH
30461: CALL_OW 69
30465: ST_TO_ADDR
// if not tmp then
30466: LD_VAR 0 2
30470: NOT
30471: IFFALSE 30475
// exit ;
30473: GO 30558
// p := 0 ;
30475: LD_ADDR_VAR 0 3
30479: PUSH
30480: LD_INT 0
30482: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30483: LD_INT 35
30485: PPUSH
30486: CALL_OW 67
// p := p + 1 ;
30490: LD_ADDR_VAR 0 3
30494: PUSH
30495: LD_VAR 0 3
30499: PUSH
30500: LD_INT 1
30502: PLUS
30503: ST_TO_ADDR
// for i in tmp do
30504: LD_ADDR_VAR 0 1
30508: PUSH
30509: LD_VAR 0 2
30513: PUSH
30514: FOR_IN
30515: IFFALSE 30546
// if GetLives ( i ) < 1000 then
30517: LD_VAR 0 1
30521: PPUSH
30522: CALL_OW 256
30526: PUSH
30527: LD_INT 1000
30529: LESS
30530: IFFALSE 30544
// SetLives ( i , 1000 ) ;
30532: LD_VAR 0 1
30536: PPUSH
30537: LD_INT 1000
30539: PPUSH
30540: CALL_OW 234
30544: GO 30514
30546: POP
30547: POP
// until p > 20 ;
30548: LD_VAR 0 3
30552: PUSH
30553: LD_INT 20
30555: GREATER
30556: IFFALSE 30483
// end ;
30558: PPOPN 3
30560: END
// every 0 0$1 trigger StreamModeActive and sTime do
30561: LD_EXP 64
30565: PUSH
30566: LD_EXP 115
30570: AND
30571: IFFALSE 30606
30573: GO 30575
30575: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30576: LD_INT 28
30578: PPUSH
30579: LD_OWVAR 2
30583: PPUSH
30584: LD_INT 2
30586: PPUSH
30587: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30591: LD_INT 30
30593: PPUSH
30594: LD_OWVAR 2
30598: PPUSH
30599: LD_INT 2
30601: PPUSH
30602: CALL_OW 322
// end ;
30606: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30607: LD_EXP 64
30611: PUSH
30612: LD_EXP 116
30616: AND
30617: IFFALSE 30738
30619: GO 30621
30621: DISABLE
30622: LD_INT 0
30624: PPUSH
30625: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30626: LD_ADDR_VAR 0 2
30630: PUSH
30631: LD_INT 22
30633: PUSH
30634: LD_OWVAR 2
30638: PUSH
30639: EMPTY
30640: LIST
30641: LIST
30642: PUSH
30643: LD_INT 21
30645: PUSH
30646: LD_INT 1
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 3
30655: PUSH
30656: LD_INT 23
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: LIST
30674: PPUSH
30675: CALL_OW 69
30679: ST_TO_ADDR
// if not tmp then
30680: LD_VAR 0 2
30684: NOT
30685: IFFALSE 30689
// exit ;
30687: GO 30738
// for i in tmp do
30689: LD_ADDR_VAR 0 1
30693: PUSH
30694: LD_VAR 0 2
30698: PUSH
30699: FOR_IN
30700: IFFALSE 30736
// begin if Crawls ( i ) then
30702: LD_VAR 0 1
30706: PPUSH
30707: CALL_OW 318
30711: IFFALSE 30722
// ComWalk ( i ) ;
30713: LD_VAR 0 1
30717: PPUSH
30718: CALL_OW 138
// SetClass ( i , 2 ) ;
30722: LD_VAR 0 1
30726: PPUSH
30727: LD_INT 2
30729: PPUSH
30730: CALL_OW 336
// end ;
30734: GO 30699
30736: POP
30737: POP
// end ;
30738: PPOPN 2
30740: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30741: LD_EXP 64
30745: PUSH
30746: LD_EXP 117
30750: AND
30751: IFFALSE 31039
30753: GO 30755
30755: DISABLE
30756: LD_INT 0
30758: PPUSH
30759: PPUSH
30760: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30761: LD_OWVAR 2
30765: PPUSH
30766: LD_INT 9
30768: PPUSH
30769: LD_INT 1
30771: PPUSH
30772: LD_INT 1
30774: PPUSH
30775: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30779: LD_INT 9
30781: PPUSH
30782: LD_OWVAR 2
30786: PPUSH
30787: CALL_OW 343
// uc_side := 9 ;
30791: LD_ADDR_OWVAR 20
30795: PUSH
30796: LD_INT 9
30798: ST_TO_ADDR
// uc_nation := 2 ;
30799: LD_ADDR_OWVAR 21
30803: PUSH
30804: LD_INT 2
30806: ST_TO_ADDR
// hc_name := Dark Warrior ;
30807: LD_ADDR_OWVAR 26
30811: PUSH
30812: LD_STRING Dark Warrior
30814: ST_TO_ADDR
// hc_gallery :=  ;
30815: LD_ADDR_OWVAR 33
30819: PUSH
30820: LD_STRING 
30822: ST_TO_ADDR
// hc_noskilllimit := true ;
30823: LD_ADDR_OWVAR 76
30827: PUSH
30828: LD_INT 1
30830: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30831: LD_ADDR_OWVAR 31
30835: PUSH
30836: LD_INT 30
30838: PUSH
30839: LD_INT 30
30841: PUSH
30842: LD_INT 30
30844: PUSH
30845: LD_INT 30
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: ST_TO_ADDR
// un := CreateHuman ;
30854: LD_ADDR_VAR 0 3
30858: PUSH
30859: CALL_OW 44
30863: ST_TO_ADDR
// hc_noskilllimit := false ;
30864: LD_ADDR_OWVAR 76
30868: PUSH
30869: LD_INT 0
30871: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30872: LD_VAR 0 3
30876: PPUSH
30877: LD_INT 1
30879: PPUSH
30880: CALL_OW 51
// ToLua ( playRanger() ) ;
30884: LD_STRING playRanger()
30886: PPUSH
30887: CALL_OW 559
// p := 0 ;
30891: LD_ADDR_VAR 0 2
30895: PUSH
30896: LD_INT 0
30898: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30899: LD_INT 35
30901: PPUSH
30902: CALL_OW 67
// p := p + 1 ;
30906: LD_ADDR_VAR 0 2
30910: PUSH
30911: LD_VAR 0 2
30915: PUSH
30916: LD_INT 1
30918: PLUS
30919: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30920: LD_VAR 0 3
30924: PPUSH
30925: CALL_OW 256
30929: PUSH
30930: LD_INT 1000
30932: LESS
30933: IFFALSE 30947
// SetLives ( un , 1000 ) ;
30935: LD_VAR 0 3
30939: PPUSH
30940: LD_INT 1000
30942: PPUSH
30943: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30947: LD_VAR 0 3
30951: PPUSH
30952: LD_INT 81
30954: PUSH
30955: LD_OWVAR 2
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 91
30966: PUSH
30967: LD_VAR 0 3
30971: PUSH
30972: LD_INT 30
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: LIST
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PPUSH
30984: CALL_OW 69
30988: PPUSH
30989: LD_VAR 0 3
30993: PPUSH
30994: CALL_OW 74
30998: PPUSH
30999: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31003: LD_VAR 0 2
31007: PUSH
31008: LD_INT 80
31010: GREATER
31011: PUSH
31012: LD_VAR 0 3
31016: PPUSH
31017: CALL_OW 301
31021: OR
31022: IFFALSE 30899
// if un then
31024: LD_VAR 0 3
31028: IFFALSE 31039
// RemoveUnit ( un ) ;
31030: LD_VAR 0 3
31034: PPUSH
31035: CALL_OW 64
// end ;
31039: PPOPN 3
31041: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31042: LD_EXP 118
31046: IFFALSE 31162
31048: GO 31050
31050: DISABLE
31051: LD_INT 0
31053: PPUSH
31054: PPUSH
31055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31056: LD_ADDR_VAR 0 2
31060: PUSH
31061: LD_INT 81
31063: PUSH
31064: LD_OWVAR 2
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: PUSH
31073: LD_INT 21
31075: PUSH
31076: LD_INT 1
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: EMPTY
31084: LIST
31085: LIST
31086: PPUSH
31087: CALL_OW 69
31091: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31092: LD_STRING playComputer()
31094: PPUSH
31095: CALL_OW 559
// if not tmp then
31099: LD_VAR 0 2
31103: NOT
31104: IFFALSE 31108
// exit ;
31106: GO 31162
// for i in tmp do
31108: LD_ADDR_VAR 0 1
31112: PUSH
31113: LD_VAR 0 2
31117: PUSH
31118: FOR_IN
31119: IFFALSE 31160
// for j := 1 to 4 do
31121: LD_ADDR_VAR 0 3
31125: PUSH
31126: DOUBLE
31127: LD_INT 1
31129: DEC
31130: ST_TO_ADDR
31131: LD_INT 4
31133: PUSH
31134: FOR_TO
31135: IFFALSE 31156
// SetSkill ( i , j , 10 ) ;
31137: LD_VAR 0 1
31141: PPUSH
31142: LD_VAR 0 3
31146: PPUSH
31147: LD_INT 10
31149: PPUSH
31150: CALL_OW 237
31154: GO 31134
31156: POP
31157: POP
31158: GO 31118
31160: POP
31161: POP
// end ;
31162: PPOPN 3
31164: END
// every 0 0$1 trigger s30 do var i , tmp ;
31165: LD_EXP 119
31169: IFFALSE 31238
31171: GO 31173
31173: DISABLE
31174: LD_INT 0
31176: PPUSH
31177: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31178: LD_ADDR_VAR 0 2
31182: PUSH
31183: LD_INT 22
31185: PUSH
31186: LD_OWVAR 2
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: PPUSH
31195: CALL_OW 69
31199: ST_TO_ADDR
// if not tmp then
31200: LD_VAR 0 2
31204: NOT
31205: IFFALSE 31209
// exit ;
31207: GO 31238
// for i in tmp do
31209: LD_ADDR_VAR 0 1
31213: PUSH
31214: LD_VAR 0 2
31218: PUSH
31219: FOR_IN
31220: IFFALSE 31236
// SetLives ( i , 300 ) ;
31222: LD_VAR 0 1
31226: PPUSH
31227: LD_INT 300
31229: PPUSH
31230: CALL_OW 234
31234: GO 31219
31236: POP
31237: POP
// end ;
31238: PPOPN 2
31240: END
// every 0 0$1 trigger s60 do var i , tmp ;
31241: LD_EXP 120
31245: IFFALSE 31314
31247: GO 31249
31249: DISABLE
31250: LD_INT 0
31252: PPUSH
31253: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31254: LD_ADDR_VAR 0 2
31258: PUSH
31259: LD_INT 22
31261: PUSH
31262: LD_OWVAR 2
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PPUSH
31271: CALL_OW 69
31275: ST_TO_ADDR
// if not tmp then
31276: LD_VAR 0 2
31280: NOT
31281: IFFALSE 31285
// exit ;
31283: GO 31314
// for i in tmp do
31285: LD_ADDR_VAR 0 1
31289: PUSH
31290: LD_VAR 0 2
31294: PUSH
31295: FOR_IN
31296: IFFALSE 31312
// SetLives ( i , 600 ) ;
31298: LD_VAR 0 1
31302: PPUSH
31303: LD_INT 600
31305: PPUSH
31306: CALL_OW 234
31310: GO 31295
31312: POP
31313: POP
// end ;
31314: PPOPN 2
31316: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31317: LD_INT 0
31319: PPUSH
// case cmd of 301 :
31320: LD_VAR 0 1
31324: PUSH
31325: LD_INT 301
31327: DOUBLE
31328: EQUAL
31329: IFTRUE 31333
31331: GO 31365
31333: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31334: LD_VAR 0 6
31338: PPUSH
31339: LD_VAR 0 7
31343: PPUSH
31344: LD_VAR 0 8
31348: PPUSH
31349: LD_VAR 0 4
31353: PPUSH
31354: LD_VAR 0 5
31358: PPUSH
31359: CALL 32566 0 5
31363: GO 31486
31365: LD_INT 302
31367: DOUBLE
31368: EQUAL
31369: IFTRUE 31373
31371: GO 31410
31373: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31374: LD_VAR 0 6
31378: PPUSH
31379: LD_VAR 0 7
31383: PPUSH
31384: LD_VAR 0 8
31388: PPUSH
31389: LD_VAR 0 9
31393: PPUSH
31394: LD_VAR 0 4
31398: PPUSH
31399: LD_VAR 0 5
31403: PPUSH
31404: CALL 32657 0 6
31408: GO 31486
31410: LD_INT 303
31412: DOUBLE
31413: EQUAL
31414: IFTRUE 31418
31416: GO 31455
31418: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31419: LD_VAR 0 6
31423: PPUSH
31424: LD_VAR 0 7
31428: PPUSH
31429: LD_VAR 0 8
31433: PPUSH
31434: LD_VAR 0 9
31438: PPUSH
31439: LD_VAR 0 4
31443: PPUSH
31444: LD_VAR 0 5
31448: PPUSH
31449: CALL 31491 0 6
31453: GO 31486
31455: LD_INT 304
31457: DOUBLE
31458: EQUAL
31459: IFTRUE 31463
31461: GO 31485
31463: POP
// hHackTeleport ( unit , x , y ) ; end ;
31464: LD_VAR 0 2
31468: PPUSH
31469: LD_VAR 0 4
31473: PPUSH
31474: LD_VAR 0 5
31478: PPUSH
31479: CALL 33250 0 3
31483: GO 31486
31485: POP
// end ;
31486: LD_VAR 0 12
31490: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31491: LD_INT 0
31493: PPUSH
31494: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31495: LD_VAR 0 1
31499: PUSH
31500: LD_INT 1
31502: LESS
31503: PUSH
31504: LD_VAR 0 1
31508: PUSH
31509: LD_INT 3
31511: GREATER
31512: OR
31513: PUSH
31514: LD_VAR 0 5
31518: PPUSH
31519: LD_VAR 0 6
31523: PPUSH
31524: CALL_OW 428
31528: OR
31529: IFFALSE 31533
// exit ;
31531: GO 32253
// uc_side := your_side ;
31533: LD_ADDR_OWVAR 20
31537: PUSH
31538: LD_OWVAR 2
31542: ST_TO_ADDR
// uc_nation := nation ;
31543: LD_ADDR_OWVAR 21
31547: PUSH
31548: LD_VAR 0 1
31552: ST_TO_ADDR
// bc_level = 1 ;
31553: LD_ADDR_OWVAR 43
31557: PUSH
31558: LD_INT 1
31560: ST_TO_ADDR
// case btype of 1 :
31561: LD_VAR 0 2
31565: PUSH
31566: LD_INT 1
31568: DOUBLE
31569: EQUAL
31570: IFTRUE 31574
31572: GO 31585
31574: POP
// bc_type := b_depot ; 2 :
31575: LD_ADDR_OWVAR 42
31579: PUSH
31580: LD_INT 0
31582: ST_TO_ADDR
31583: GO 32197
31585: LD_INT 2
31587: DOUBLE
31588: EQUAL
31589: IFTRUE 31593
31591: GO 31604
31593: POP
// bc_type := b_warehouse ; 3 :
31594: LD_ADDR_OWVAR 42
31598: PUSH
31599: LD_INT 1
31601: ST_TO_ADDR
31602: GO 32197
31604: LD_INT 3
31606: DOUBLE
31607: EQUAL
31608: IFTRUE 31612
31610: GO 31623
31612: POP
// bc_type := b_lab ; 4 .. 9 :
31613: LD_ADDR_OWVAR 42
31617: PUSH
31618: LD_INT 6
31620: ST_TO_ADDR
31621: GO 32197
31623: LD_INT 4
31625: DOUBLE
31626: GREATEREQUAL
31627: IFFALSE 31635
31629: LD_INT 9
31631: DOUBLE
31632: LESSEQUAL
31633: IFTRUE 31637
31635: GO 31689
31637: POP
// begin bc_type := b_lab_half ;
31638: LD_ADDR_OWVAR 42
31642: PUSH
31643: LD_INT 7
31645: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31646: LD_ADDR_OWVAR 44
31650: PUSH
31651: LD_INT 10
31653: PUSH
31654: LD_INT 11
31656: PUSH
31657: LD_INT 12
31659: PUSH
31660: LD_INT 15
31662: PUSH
31663: LD_INT 14
31665: PUSH
31666: LD_INT 13
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: PUSH
31677: LD_VAR 0 2
31681: PUSH
31682: LD_INT 3
31684: MINUS
31685: ARRAY
31686: ST_TO_ADDR
// end ; 10 .. 13 :
31687: GO 32197
31689: LD_INT 10
31691: DOUBLE
31692: GREATEREQUAL
31693: IFFALSE 31701
31695: LD_INT 13
31697: DOUBLE
31698: LESSEQUAL
31699: IFTRUE 31703
31701: GO 31780
31703: POP
// begin bc_type := b_lab_full ;
31704: LD_ADDR_OWVAR 42
31708: PUSH
31709: LD_INT 8
31711: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31712: LD_ADDR_OWVAR 44
31716: PUSH
31717: LD_INT 10
31719: PUSH
31720: LD_INT 12
31722: PUSH
31723: LD_INT 14
31725: PUSH
31726: LD_INT 13
31728: PUSH
31729: EMPTY
31730: LIST
31731: LIST
31732: LIST
31733: LIST
31734: PUSH
31735: LD_VAR 0 2
31739: PUSH
31740: LD_INT 9
31742: MINUS
31743: ARRAY
31744: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31745: LD_ADDR_OWVAR 45
31749: PUSH
31750: LD_INT 11
31752: PUSH
31753: LD_INT 15
31755: PUSH
31756: LD_INT 12
31758: PUSH
31759: LD_INT 15
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: PUSH
31768: LD_VAR 0 2
31772: PUSH
31773: LD_INT 9
31775: MINUS
31776: ARRAY
31777: ST_TO_ADDR
// end ; 14 :
31778: GO 32197
31780: LD_INT 14
31782: DOUBLE
31783: EQUAL
31784: IFTRUE 31788
31786: GO 31799
31788: POP
// bc_type := b_workshop ; 15 :
31789: LD_ADDR_OWVAR 42
31793: PUSH
31794: LD_INT 2
31796: ST_TO_ADDR
31797: GO 32197
31799: LD_INT 15
31801: DOUBLE
31802: EQUAL
31803: IFTRUE 31807
31805: GO 31818
31807: POP
// bc_type := b_factory ; 16 :
31808: LD_ADDR_OWVAR 42
31812: PUSH
31813: LD_INT 3
31815: ST_TO_ADDR
31816: GO 32197
31818: LD_INT 16
31820: DOUBLE
31821: EQUAL
31822: IFTRUE 31826
31824: GO 31837
31826: POP
// bc_type := b_ext_gun ; 17 :
31827: LD_ADDR_OWVAR 42
31831: PUSH
31832: LD_INT 17
31834: ST_TO_ADDR
31835: GO 32197
31837: LD_INT 17
31839: DOUBLE
31840: EQUAL
31841: IFTRUE 31845
31843: GO 31873
31845: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31846: LD_ADDR_OWVAR 42
31850: PUSH
31851: LD_INT 19
31853: PUSH
31854: LD_INT 23
31856: PUSH
31857: LD_INT 19
31859: PUSH
31860: EMPTY
31861: LIST
31862: LIST
31863: LIST
31864: PUSH
31865: LD_VAR 0 1
31869: ARRAY
31870: ST_TO_ADDR
31871: GO 32197
31873: LD_INT 18
31875: DOUBLE
31876: EQUAL
31877: IFTRUE 31881
31879: GO 31892
31881: POP
// bc_type := b_ext_radar ; 19 :
31882: LD_ADDR_OWVAR 42
31886: PUSH
31887: LD_INT 20
31889: ST_TO_ADDR
31890: GO 32197
31892: LD_INT 19
31894: DOUBLE
31895: EQUAL
31896: IFTRUE 31900
31898: GO 31911
31900: POP
// bc_type := b_ext_radio ; 20 :
31901: LD_ADDR_OWVAR 42
31905: PUSH
31906: LD_INT 22
31908: ST_TO_ADDR
31909: GO 32197
31911: LD_INT 20
31913: DOUBLE
31914: EQUAL
31915: IFTRUE 31919
31917: GO 31930
31919: POP
// bc_type := b_ext_siberium ; 21 :
31920: LD_ADDR_OWVAR 42
31924: PUSH
31925: LD_INT 21
31927: ST_TO_ADDR
31928: GO 32197
31930: LD_INT 21
31932: DOUBLE
31933: EQUAL
31934: IFTRUE 31938
31936: GO 31949
31938: POP
// bc_type := b_ext_computer ; 22 :
31939: LD_ADDR_OWVAR 42
31943: PUSH
31944: LD_INT 24
31946: ST_TO_ADDR
31947: GO 32197
31949: LD_INT 22
31951: DOUBLE
31952: EQUAL
31953: IFTRUE 31957
31955: GO 31968
31957: POP
// bc_type := b_ext_track ; 23 :
31958: LD_ADDR_OWVAR 42
31962: PUSH
31963: LD_INT 16
31965: ST_TO_ADDR
31966: GO 32197
31968: LD_INT 23
31970: DOUBLE
31971: EQUAL
31972: IFTRUE 31976
31974: GO 31987
31976: POP
// bc_type := b_ext_laser ; 24 :
31977: LD_ADDR_OWVAR 42
31981: PUSH
31982: LD_INT 25
31984: ST_TO_ADDR
31985: GO 32197
31987: LD_INT 24
31989: DOUBLE
31990: EQUAL
31991: IFTRUE 31995
31993: GO 32006
31995: POP
// bc_type := b_control_tower ; 25 :
31996: LD_ADDR_OWVAR 42
32000: PUSH
32001: LD_INT 36
32003: ST_TO_ADDR
32004: GO 32197
32006: LD_INT 25
32008: DOUBLE
32009: EQUAL
32010: IFTRUE 32014
32012: GO 32025
32014: POP
// bc_type := b_breastwork ; 26 :
32015: LD_ADDR_OWVAR 42
32019: PUSH
32020: LD_INT 31
32022: ST_TO_ADDR
32023: GO 32197
32025: LD_INT 26
32027: DOUBLE
32028: EQUAL
32029: IFTRUE 32033
32031: GO 32044
32033: POP
// bc_type := b_bunker ; 27 :
32034: LD_ADDR_OWVAR 42
32038: PUSH
32039: LD_INT 32
32041: ST_TO_ADDR
32042: GO 32197
32044: LD_INT 27
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32063
32052: POP
// bc_type := b_turret ; 28 :
32053: LD_ADDR_OWVAR 42
32057: PUSH
32058: LD_INT 33
32060: ST_TO_ADDR
32061: GO 32197
32063: LD_INT 28
32065: DOUBLE
32066: EQUAL
32067: IFTRUE 32071
32069: GO 32082
32071: POP
// bc_type := b_armoury ; 29 :
32072: LD_ADDR_OWVAR 42
32076: PUSH
32077: LD_INT 4
32079: ST_TO_ADDR
32080: GO 32197
32082: LD_INT 29
32084: DOUBLE
32085: EQUAL
32086: IFTRUE 32090
32088: GO 32101
32090: POP
// bc_type := b_barracks ; 30 :
32091: LD_ADDR_OWVAR 42
32095: PUSH
32096: LD_INT 5
32098: ST_TO_ADDR
32099: GO 32197
32101: LD_INT 30
32103: DOUBLE
32104: EQUAL
32105: IFTRUE 32109
32107: GO 32120
32109: POP
// bc_type := b_solar_power ; 31 :
32110: LD_ADDR_OWVAR 42
32114: PUSH
32115: LD_INT 27
32117: ST_TO_ADDR
32118: GO 32197
32120: LD_INT 31
32122: DOUBLE
32123: EQUAL
32124: IFTRUE 32128
32126: GO 32139
32128: POP
// bc_type := b_oil_power ; 32 :
32129: LD_ADDR_OWVAR 42
32133: PUSH
32134: LD_INT 26
32136: ST_TO_ADDR
32137: GO 32197
32139: LD_INT 32
32141: DOUBLE
32142: EQUAL
32143: IFTRUE 32147
32145: GO 32158
32147: POP
// bc_type := b_siberite_power ; 33 :
32148: LD_ADDR_OWVAR 42
32152: PUSH
32153: LD_INT 28
32155: ST_TO_ADDR
32156: GO 32197
32158: LD_INT 33
32160: DOUBLE
32161: EQUAL
32162: IFTRUE 32166
32164: GO 32177
32166: POP
// bc_type := b_oil_mine ; 34 :
32167: LD_ADDR_OWVAR 42
32171: PUSH
32172: LD_INT 29
32174: ST_TO_ADDR
32175: GO 32197
32177: LD_INT 34
32179: DOUBLE
32180: EQUAL
32181: IFTRUE 32185
32183: GO 32196
32185: POP
// bc_type := b_siberite_mine ; end ;
32186: LD_ADDR_OWVAR 42
32190: PUSH
32191: LD_INT 30
32193: ST_TO_ADDR
32194: GO 32197
32196: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32197: LD_ADDR_VAR 0 8
32201: PUSH
32202: LD_VAR 0 5
32206: PPUSH
32207: LD_VAR 0 6
32211: PPUSH
32212: LD_VAR 0 3
32216: PPUSH
32217: CALL_OW 47
32221: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32222: LD_OWVAR 42
32226: PUSH
32227: LD_INT 32
32229: PUSH
32230: LD_INT 33
32232: PUSH
32233: EMPTY
32234: LIST
32235: LIST
32236: IN
32237: IFFALSE 32253
// PlaceWeaponTurret ( b , weapon ) ;
32239: LD_VAR 0 8
32243: PPUSH
32244: LD_VAR 0 4
32248: PPUSH
32249: CALL_OW 431
// end ;
32253: LD_VAR 0 7
32257: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32258: LD_INT 0
32260: PPUSH
32261: PPUSH
32262: PPUSH
32263: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32264: LD_ADDR_VAR 0 4
32268: PUSH
32269: LD_INT 22
32271: PUSH
32272: LD_OWVAR 2
32276: PUSH
32277: EMPTY
32278: LIST
32279: LIST
32280: PUSH
32281: LD_INT 2
32283: PUSH
32284: LD_INT 30
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 30
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: LIST
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PPUSH
32313: CALL_OW 69
32317: ST_TO_ADDR
// if not tmp then
32318: LD_VAR 0 4
32322: NOT
32323: IFFALSE 32327
// exit ;
32325: GO 32386
// for i in tmp do
32327: LD_ADDR_VAR 0 2
32331: PUSH
32332: LD_VAR 0 4
32336: PUSH
32337: FOR_IN
32338: IFFALSE 32384
// for j = 1 to 3 do
32340: LD_ADDR_VAR 0 3
32344: PUSH
32345: DOUBLE
32346: LD_INT 1
32348: DEC
32349: ST_TO_ADDR
32350: LD_INT 3
32352: PUSH
32353: FOR_TO
32354: IFFALSE 32380
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32356: LD_VAR 0 2
32360: PPUSH
32361: CALL_OW 274
32365: PPUSH
32366: LD_VAR 0 3
32370: PPUSH
32371: LD_INT 99999
32373: PPUSH
32374: CALL_OW 277
32378: GO 32353
32380: POP
32381: POP
32382: GO 32337
32384: POP
32385: POP
// end ;
32386: LD_VAR 0 1
32390: RET
// export function hHackSetLevel10 ; var i , j ; begin
32391: LD_INT 0
32393: PPUSH
32394: PPUSH
32395: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32396: LD_ADDR_VAR 0 2
32400: PUSH
32401: LD_INT 21
32403: PUSH
32404: LD_INT 1
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PPUSH
32411: CALL_OW 69
32415: PUSH
32416: FOR_IN
32417: IFFALSE 32469
// if IsSelected ( i ) then
32419: LD_VAR 0 2
32423: PPUSH
32424: CALL_OW 306
32428: IFFALSE 32467
// begin for j := 1 to 4 do
32430: LD_ADDR_VAR 0 3
32434: PUSH
32435: DOUBLE
32436: LD_INT 1
32438: DEC
32439: ST_TO_ADDR
32440: LD_INT 4
32442: PUSH
32443: FOR_TO
32444: IFFALSE 32465
// SetSkill ( i , j , 10 ) ;
32446: LD_VAR 0 2
32450: PPUSH
32451: LD_VAR 0 3
32455: PPUSH
32456: LD_INT 10
32458: PPUSH
32459: CALL_OW 237
32463: GO 32443
32465: POP
32466: POP
// end ;
32467: GO 32416
32469: POP
32470: POP
// end ;
32471: LD_VAR 0 1
32475: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32476: LD_INT 0
32478: PPUSH
32479: PPUSH
32480: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32481: LD_ADDR_VAR 0 2
32485: PUSH
32486: LD_INT 22
32488: PUSH
32489: LD_OWVAR 2
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 21
32500: PUSH
32501: LD_INT 1
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: PPUSH
32512: CALL_OW 69
32516: PUSH
32517: FOR_IN
32518: IFFALSE 32559
// begin for j := 1 to 4 do
32520: LD_ADDR_VAR 0 3
32524: PUSH
32525: DOUBLE
32526: LD_INT 1
32528: DEC
32529: ST_TO_ADDR
32530: LD_INT 4
32532: PUSH
32533: FOR_TO
32534: IFFALSE 32555
// SetSkill ( i , j , 10 ) ;
32536: LD_VAR 0 2
32540: PPUSH
32541: LD_VAR 0 3
32545: PPUSH
32546: LD_INT 10
32548: PPUSH
32549: CALL_OW 237
32553: GO 32533
32555: POP
32556: POP
// end ;
32557: GO 32517
32559: POP
32560: POP
// end ;
32561: LD_VAR 0 1
32565: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32566: LD_INT 0
32568: PPUSH
// uc_side := your_side ;
32569: LD_ADDR_OWVAR 20
32573: PUSH
32574: LD_OWVAR 2
32578: ST_TO_ADDR
// uc_nation := nation ;
32579: LD_ADDR_OWVAR 21
32583: PUSH
32584: LD_VAR 0 1
32588: ST_TO_ADDR
// InitHc ;
32589: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32593: LD_INT 0
32595: PPUSH
32596: LD_VAR 0 2
32600: PPUSH
32601: LD_VAR 0 3
32605: PPUSH
32606: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32610: LD_VAR 0 4
32614: PPUSH
32615: LD_VAR 0 5
32619: PPUSH
32620: CALL_OW 428
32624: PUSH
32625: LD_INT 0
32627: EQUAL
32628: IFFALSE 32652
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32630: CALL_OW 44
32634: PPUSH
32635: LD_VAR 0 4
32639: PPUSH
32640: LD_VAR 0 5
32644: PPUSH
32645: LD_INT 1
32647: PPUSH
32648: CALL_OW 48
// end ;
32652: LD_VAR 0 6
32656: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32657: LD_INT 0
32659: PPUSH
32660: PPUSH
// uc_side := your_side ;
32661: LD_ADDR_OWVAR 20
32665: PUSH
32666: LD_OWVAR 2
32670: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32671: LD_VAR 0 1
32675: PUSH
32676: LD_INT 1
32678: PUSH
32679: LD_INT 2
32681: PUSH
32682: LD_INT 3
32684: PUSH
32685: LD_INT 4
32687: PUSH
32688: LD_INT 5
32690: PUSH
32691: EMPTY
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: IN
32698: IFFALSE 32710
// uc_nation := nation_american else
32700: LD_ADDR_OWVAR 21
32704: PUSH
32705: LD_INT 1
32707: ST_TO_ADDR
32708: GO 32753
// if chassis in [ 11 , 12 , 13 , 14 ] then
32710: LD_VAR 0 1
32714: PUSH
32715: LD_INT 11
32717: PUSH
32718: LD_INT 12
32720: PUSH
32721: LD_INT 13
32723: PUSH
32724: LD_INT 14
32726: PUSH
32727: EMPTY
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: IN
32733: IFFALSE 32745
// uc_nation := nation_arabian else
32735: LD_ADDR_OWVAR 21
32739: PUSH
32740: LD_INT 2
32742: ST_TO_ADDR
32743: GO 32753
// uc_nation := nation_russian ;
32745: LD_ADDR_OWVAR 21
32749: PUSH
32750: LD_INT 3
32752: ST_TO_ADDR
// vc_chassis := chassis ;
32753: LD_ADDR_OWVAR 37
32757: PUSH
32758: LD_VAR 0 1
32762: ST_TO_ADDR
// vc_engine := engine ;
32763: LD_ADDR_OWVAR 39
32767: PUSH
32768: LD_VAR 0 2
32772: ST_TO_ADDR
// vc_control := control ;
32773: LD_ADDR_OWVAR 38
32777: PUSH
32778: LD_VAR 0 3
32782: ST_TO_ADDR
// vc_weapon := weapon ;
32783: LD_ADDR_OWVAR 40
32787: PUSH
32788: LD_VAR 0 4
32792: ST_TO_ADDR
// un := CreateVehicle ;
32793: LD_ADDR_VAR 0 8
32797: PUSH
32798: CALL_OW 45
32802: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32803: LD_VAR 0 8
32807: PPUSH
32808: LD_INT 0
32810: PPUSH
32811: LD_INT 5
32813: PPUSH
32814: CALL_OW 12
32818: PPUSH
32819: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32823: LD_VAR 0 8
32827: PPUSH
32828: LD_VAR 0 5
32832: PPUSH
32833: LD_VAR 0 6
32837: PPUSH
32838: LD_INT 1
32840: PPUSH
32841: CALL_OW 48
// end ;
32845: LD_VAR 0 7
32849: RET
// export hInvincible ; every 1 do
32850: GO 32852
32852: DISABLE
// hInvincible := [ ] ;
32853: LD_ADDR_EXP 121
32857: PUSH
32858: EMPTY
32859: ST_TO_ADDR
32860: END
// every 10 do var i ;
32861: GO 32863
32863: DISABLE
32864: LD_INT 0
32866: PPUSH
// begin enable ;
32867: ENABLE
// if not hInvincible then
32868: LD_EXP 121
32872: NOT
32873: IFFALSE 32877
// exit ;
32875: GO 32921
// for i in hInvincible do
32877: LD_ADDR_VAR 0 1
32881: PUSH
32882: LD_EXP 121
32886: PUSH
32887: FOR_IN
32888: IFFALSE 32919
// if GetLives ( i ) < 1000 then
32890: LD_VAR 0 1
32894: PPUSH
32895: CALL_OW 256
32899: PUSH
32900: LD_INT 1000
32902: LESS
32903: IFFALSE 32917
// SetLives ( i , 1000 ) ;
32905: LD_VAR 0 1
32909: PPUSH
32910: LD_INT 1000
32912: PPUSH
32913: CALL_OW 234
32917: GO 32887
32919: POP
32920: POP
// end ;
32921: PPOPN 1
32923: END
// export function hHackInvincible ; var i ; begin
32924: LD_INT 0
32926: PPUSH
32927: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
32928: LD_ADDR_VAR 0 2
32932: PUSH
32933: LD_INT 2
32935: PUSH
32936: LD_INT 21
32938: PUSH
32939: LD_INT 1
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 21
32948: PUSH
32949: LD_INT 2
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: PUSH
32956: EMPTY
32957: LIST
32958: LIST
32959: LIST
32960: PPUSH
32961: CALL_OW 69
32965: PUSH
32966: FOR_IN
32967: IFFALSE 33028
// if IsSelected ( i ) then
32969: LD_VAR 0 2
32973: PPUSH
32974: CALL_OW 306
32978: IFFALSE 33026
// begin if i in hInvincible then
32980: LD_VAR 0 2
32984: PUSH
32985: LD_EXP 121
32989: IN
32990: IFFALSE 33010
// hInvincible := hInvincible diff i else
32992: LD_ADDR_EXP 121
32996: PUSH
32997: LD_EXP 121
33001: PUSH
33002: LD_VAR 0 2
33006: DIFF
33007: ST_TO_ADDR
33008: GO 33026
// hInvincible := hInvincible union i ;
33010: LD_ADDR_EXP 121
33014: PUSH
33015: LD_EXP 121
33019: PUSH
33020: LD_VAR 0 2
33024: UNION
33025: ST_TO_ADDR
// end ;
33026: GO 32966
33028: POP
33029: POP
// end ;
33030: LD_VAR 0 1
33034: RET
// export function hHackInvisible ; var i , j ; begin
33035: LD_INT 0
33037: PPUSH
33038: PPUSH
33039: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33040: LD_ADDR_VAR 0 2
33044: PUSH
33045: LD_INT 21
33047: PUSH
33048: LD_INT 1
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: PPUSH
33055: CALL_OW 69
33059: PUSH
33060: FOR_IN
33061: IFFALSE 33085
// if IsSelected ( i ) then
33063: LD_VAR 0 2
33067: PPUSH
33068: CALL_OW 306
33072: IFFALSE 33083
// ComForceInvisible ( i ) ;
33074: LD_VAR 0 2
33078: PPUSH
33079: CALL_OW 496
33083: GO 33060
33085: POP
33086: POP
// end ;
33087: LD_VAR 0 1
33091: RET
// export function hHackChangeYourSide ; begin
33092: LD_INT 0
33094: PPUSH
// if your_side = 8 then
33095: LD_OWVAR 2
33099: PUSH
33100: LD_INT 8
33102: EQUAL
33103: IFFALSE 33115
// your_side := 0 else
33105: LD_ADDR_OWVAR 2
33109: PUSH
33110: LD_INT 0
33112: ST_TO_ADDR
33113: GO 33129
// your_side := your_side + 1 ;
33115: LD_ADDR_OWVAR 2
33119: PUSH
33120: LD_OWVAR 2
33124: PUSH
33125: LD_INT 1
33127: PLUS
33128: ST_TO_ADDR
// end ;
33129: LD_VAR 0 1
33133: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33134: LD_INT 0
33136: PPUSH
33137: PPUSH
33138: PPUSH
// for i in all_units do
33139: LD_ADDR_VAR 0 2
33143: PUSH
33144: LD_OWVAR 3
33148: PUSH
33149: FOR_IN
33150: IFFALSE 33228
// if IsSelected ( i ) then
33152: LD_VAR 0 2
33156: PPUSH
33157: CALL_OW 306
33161: IFFALSE 33226
// begin j := GetSide ( i ) ;
33163: LD_ADDR_VAR 0 3
33167: PUSH
33168: LD_VAR 0 2
33172: PPUSH
33173: CALL_OW 255
33177: ST_TO_ADDR
// if j = 8 then
33178: LD_VAR 0 3
33182: PUSH
33183: LD_INT 8
33185: EQUAL
33186: IFFALSE 33198
// j := 0 else
33188: LD_ADDR_VAR 0 3
33192: PUSH
33193: LD_INT 0
33195: ST_TO_ADDR
33196: GO 33212
// j := j + 1 ;
33198: LD_ADDR_VAR 0 3
33202: PUSH
33203: LD_VAR 0 3
33207: PUSH
33208: LD_INT 1
33210: PLUS
33211: ST_TO_ADDR
// SetSide ( i , j ) ;
33212: LD_VAR 0 2
33216: PPUSH
33217: LD_VAR 0 3
33221: PPUSH
33222: CALL_OW 235
// end ;
33226: GO 33149
33228: POP
33229: POP
// end ;
33230: LD_VAR 0 1
33234: RET
// export function hHackFog ; begin
33235: LD_INT 0
33237: PPUSH
// FogOff ( true ) ;
33238: LD_INT 1
33240: PPUSH
33241: CALL_OW 344
// end ;
33245: LD_VAR 0 1
33249: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33250: LD_INT 0
33252: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33253: LD_VAR 0 1
33257: PPUSH
33258: LD_VAR 0 2
33262: PPUSH
33263: LD_VAR 0 3
33267: PPUSH
33268: LD_INT 1
33270: PPUSH
33271: LD_INT 1
33273: PPUSH
33274: CALL_OW 483
// CenterOnXY ( x , y ) ;
33278: LD_VAR 0 2
33282: PPUSH
33283: LD_VAR 0 3
33287: PPUSH
33288: CALL_OW 84
// end ;
33292: LD_VAR 0 4
33296: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33297: LD_INT 0
33299: PPUSH
33300: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33301: LD_VAR 0 1
33305: NOT
33306: PUSH
33307: LD_VAR 0 2
33311: PPUSH
33312: LD_VAR 0 3
33316: PPUSH
33317: CALL_OW 488
33321: NOT
33322: OR
33323: PUSH
33324: LD_VAR 0 1
33328: PPUSH
33329: CALL_OW 266
33333: PUSH
33334: LD_INT 3
33336: NONEQUAL
33337: PUSH
33338: LD_VAR 0 1
33342: PPUSH
33343: CALL_OW 247
33347: PUSH
33348: LD_INT 1
33350: EQUAL
33351: NOT
33352: AND
33353: OR
33354: IFFALSE 33358
// exit ;
33356: GO 33507
// if GetType ( factory ) = unit_human then
33358: LD_VAR 0 1
33362: PPUSH
33363: CALL_OW 247
33367: PUSH
33368: LD_INT 1
33370: EQUAL
33371: IFFALSE 33388
// factory := IsInUnit ( factory ) ;
33373: LD_ADDR_VAR 0 1
33377: PUSH
33378: LD_VAR 0 1
33382: PPUSH
33383: CALL_OW 310
33387: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33388: LD_VAR 0 1
33392: PPUSH
33393: CALL_OW 266
33397: PUSH
33398: LD_INT 3
33400: NONEQUAL
33401: IFFALSE 33405
// exit ;
33403: GO 33507
// if HexInfo ( x , y ) = factory then
33405: LD_VAR 0 2
33409: PPUSH
33410: LD_VAR 0 3
33414: PPUSH
33415: CALL_OW 428
33419: PUSH
33420: LD_VAR 0 1
33424: EQUAL
33425: IFFALSE 33452
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33427: LD_ADDR_EXP 122
33431: PUSH
33432: LD_EXP 122
33436: PPUSH
33437: LD_VAR 0 1
33441: PPUSH
33442: LD_INT 0
33444: PPUSH
33445: CALL_OW 1
33449: ST_TO_ADDR
33450: GO 33503
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33452: LD_ADDR_EXP 122
33456: PUSH
33457: LD_EXP 122
33461: PPUSH
33462: LD_VAR 0 1
33466: PPUSH
33467: LD_VAR 0 1
33471: PPUSH
33472: CALL_OW 255
33476: PUSH
33477: LD_VAR 0 1
33481: PUSH
33482: LD_VAR 0 2
33486: PUSH
33487: LD_VAR 0 3
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: PPUSH
33498: CALL_OW 1
33502: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33503: CALL 33512 0 0
// end ;
33507: LD_VAR 0 4
33511: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33512: LD_INT 0
33514: PPUSH
33515: PPUSH
33516: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33517: LD_STRING resetFactoryWaypoint();
33519: PPUSH
33520: CALL_OW 559
// if factoryWaypoints then
33524: LD_EXP 122
33528: IFFALSE 33654
// begin list := PrepareArray ( factoryWaypoints ) ;
33530: LD_ADDR_VAR 0 3
33534: PUSH
33535: LD_EXP 122
33539: PPUSH
33540: CALL 80014 0 1
33544: ST_TO_ADDR
// for i := 1 to list do
33545: LD_ADDR_VAR 0 2
33549: PUSH
33550: DOUBLE
33551: LD_INT 1
33553: DEC
33554: ST_TO_ADDR
33555: LD_VAR 0 3
33559: PUSH
33560: FOR_TO
33561: IFFALSE 33652
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33563: LD_STRING setFactoryWaypointXY(
33565: PUSH
33566: LD_VAR 0 3
33570: PUSH
33571: LD_VAR 0 2
33575: ARRAY
33576: PUSH
33577: LD_INT 1
33579: ARRAY
33580: STR
33581: PUSH
33582: LD_STRING ,
33584: STR
33585: PUSH
33586: LD_VAR 0 3
33590: PUSH
33591: LD_VAR 0 2
33595: ARRAY
33596: PUSH
33597: LD_INT 2
33599: ARRAY
33600: STR
33601: PUSH
33602: LD_STRING ,
33604: STR
33605: PUSH
33606: LD_VAR 0 3
33610: PUSH
33611: LD_VAR 0 2
33615: ARRAY
33616: PUSH
33617: LD_INT 3
33619: ARRAY
33620: STR
33621: PUSH
33622: LD_STRING ,
33624: STR
33625: PUSH
33626: LD_VAR 0 3
33630: PUSH
33631: LD_VAR 0 2
33635: ARRAY
33636: PUSH
33637: LD_INT 4
33639: ARRAY
33640: STR
33641: PUSH
33642: LD_STRING )
33644: STR
33645: PPUSH
33646: CALL_OW 559
33650: GO 33560
33652: POP
33653: POP
// end ; end ;
33654: LD_VAR 0 1
33658: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarhouseGatheringPoint ( warehouse , x , y ) ; begin
33659: LD_INT 0
33661: PPUSH
// if HexInfo ( x , y ) = warehouse then
33662: LD_VAR 0 2
33666: PPUSH
33667: LD_VAR 0 3
33671: PPUSH
33672: CALL_OW 428
33676: PUSH
33677: LD_VAR 0 1
33681: EQUAL
33682: IFFALSE 33709
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33684: LD_ADDR_EXP 123
33688: PUSH
33689: LD_EXP 123
33693: PPUSH
33694: LD_VAR 0 1
33698: PPUSH
33699: LD_INT 0
33701: PPUSH
33702: CALL_OW 1
33706: ST_TO_ADDR
33707: GO 33760
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33709: LD_ADDR_EXP 123
33713: PUSH
33714: LD_EXP 123
33718: PPUSH
33719: LD_VAR 0 1
33723: PPUSH
33724: LD_VAR 0 1
33728: PPUSH
33729: CALL_OW 255
33733: PUSH
33734: LD_VAR 0 1
33738: PUSH
33739: LD_VAR 0 2
33743: PUSH
33744: LD_VAR 0 3
33748: PUSH
33749: EMPTY
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: PPUSH
33755: CALL_OW 1
33759: ST_TO_ADDR
// UpdateWarhouseGatheringPoints ;
33760: CALL 33769 0 0
// end ;
33764: LD_VAR 0 4
33768: RET
// export function UpdateWarhouseGatheringPoints ( ) ; var i , list ; begin
33769: LD_INT 0
33771: PPUSH
33772: PPUSH
33773: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33774: LD_STRING resetWarehouseGatheringPoints();
33776: PPUSH
33777: CALL_OW 559
// if warehouseGatheringPoints then
33781: LD_EXP 123
33785: IFFALSE 33911
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33787: LD_ADDR_VAR 0 3
33791: PUSH
33792: LD_EXP 123
33796: PPUSH
33797: CALL 80014 0 1
33801: ST_TO_ADDR
// for i := 1 to list do
33802: LD_ADDR_VAR 0 2
33806: PUSH
33807: DOUBLE
33808: LD_INT 1
33810: DEC
33811: ST_TO_ADDR
33812: LD_VAR 0 3
33816: PUSH
33817: FOR_TO
33818: IFFALSE 33909
// ToLua ( setWarhouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33820: LD_STRING setWarhouseGatheringPointXY(
33822: PUSH
33823: LD_VAR 0 3
33827: PUSH
33828: LD_VAR 0 2
33832: ARRAY
33833: PUSH
33834: LD_INT 1
33836: ARRAY
33837: STR
33838: PUSH
33839: LD_STRING ,
33841: STR
33842: PUSH
33843: LD_VAR 0 3
33847: PUSH
33848: LD_VAR 0 2
33852: ARRAY
33853: PUSH
33854: LD_INT 2
33856: ARRAY
33857: STR
33858: PUSH
33859: LD_STRING ,
33861: STR
33862: PUSH
33863: LD_VAR 0 3
33867: PUSH
33868: LD_VAR 0 2
33872: ARRAY
33873: PUSH
33874: LD_INT 3
33876: ARRAY
33877: STR
33878: PUSH
33879: LD_STRING ,
33881: STR
33882: PUSH
33883: LD_VAR 0 3
33887: PUSH
33888: LD_VAR 0 2
33892: ARRAY
33893: PUSH
33894: LD_INT 4
33896: ARRAY
33897: STR
33898: PUSH
33899: LD_STRING )
33901: STR
33902: PPUSH
33903: CALL_OW 559
33907: GO 33817
33909: POP
33910: POP
// end ; end ;
33911: LD_VAR 0 1
33915: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
33916: LD_EXP 123
33920: IFFALSE 34535
33922: GO 33924
33924: DISABLE
33925: LD_INT 0
33927: PPUSH
33928: PPUSH
33929: PPUSH
33930: PPUSH
33931: PPUSH
33932: PPUSH
33933: PPUSH
33934: PPUSH
33935: PPUSH
// begin enable ;
33936: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
33937: LD_ADDR_VAR 0 3
33941: PUSH
33942: LD_EXP 123
33946: PPUSH
33947: CALL 80014 0 1
33951: ST_TO_ADDR
// for i := 1 to list do
33952: LD_ADDR_VAR 0 1
33956: PUSH
33957: DOUBLE
33958: LD_INT 1
33960: DEC
33961: ST_TO_ADDR
33962: LD_VAR 0 3
33966: PUSH
33967: FOR_TO
33968: IFFALSE 34533
// begin depot := list [ i ] [ 2 ] ;
33970: LD_ADDR_VAR 0 8
33974: PUSH
33975: LD_VAR 0 3
33979: PUSH
33980: LD_VAR 0 1
33984: ARRAY
33985: PUSH
33986: LD_INT 2
33988: ARRAY
33989: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
33990: LD_ADDR_VAR 0 5
33994: PUSH
33995: LD_VAR 0 3
33999: PUSH
34000: LD_VAR 0 1
34004: ARRAY
34005: PUSH
34006: LD_INT 1
34008: ARRAY
34009: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34010: LD_VAR 0 8
34014: PPUSH
34015: CALL_OW 301
34019: PUSH
34020: LD_VAR 0 5
34024: PUSH
34025: LD_VAR 0 8
34029: PPUSH
34030: CALL_OW 255
34034: NONEQUAL
34035: OR
34036: IFFALSE 34065
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34038: LD_ADDR_EXP 123
34042: PUSH
34043: LD_EXP 123
34047: PPUSH
34048: LD_VAR 0 8
34052: PPUSH
34053: LD_INT 0
34055: PPUSH
34056: CALL_OW 1
34060: ST_TO_ADDR
// exit ;
34061: POP
34062: POP
34063: GO 34535
// end ; x := list [ i ] [ 3 ] ;
34065: LD_ADDR_VAR 0 6
34069: PUSH
34070: LD_VAR 0 3
34074: PUSH
34075: LD_VAR 0 1
34079: ARRAY
34080: PUSH
34081: LD_INT 3
34083: ARRAY
34084: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34085: LD_ADDR_VAR 0 7
34089: PUSH
34090: LD_VAR 0 3
34094: PUSH
34095: LD_VAR 0 1
34099: ARRAY
34100: PUSH
34101: LD_INT 4
34103: ARRAY
34104: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 12 ) ;
34105: LD_ADDR_VAR 0 9
34109: PUSH
34110: LD_VAR 0 6
34114: PPUSH
34115: LD_VAR 0 7
34119: PPUSH
34120: LD_INT 12
34122: PPUSH
34123: CALL 78598 0 3
34127: ST_TO_ADDR
// if not cratesNearbyPoint then
34128: LD_VAR 0 9
34132: NOT
34133: IFFALSE 34139
// exit ;
34135: POP
34136: POP
34137: GO 34535
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34139: LD_ADDR_VAR 0 4
34143: PUSH
34144: LD_INT 22
34146: PUSH
34147: LD_VAR 0 5
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 3
34158: PUSH
34159: LD_INT 60
34161: PUSH
34162: EMPTY
34163: LIST
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 2
34171: PUSH
34172: LD_INT 25
34174: PUSH
34175: LD_INT 2
34177: PUSH
34178: EMPTY
34179: LIST
34180: LIST
34181: PUSH
34182: LD_INT 25
34184: PUSH
34185: LD_INT 16
34187: PUSH
34188: EMPTY
34189: LIST
34190: LIST
34191: PUSH
34192: EMPTY
34193: LIST
34194: LIST
34195: LIST
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: LIST
34201: PPUSH
34202: CALL_OW 69
34206: PUSH
34207: LD_VAR 0 8
34211: PPUSH
34212: CALL_OW 313
34216: PPUSH
34217: LD_INT 3
34219: PUSH
34220: LD_INT 60
34222: PUSH
34223: EMPTY
34224: LIST
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 2
34232: PUSH
34233: LD_INT 25
34235: PUSH
34236: LD_INT 2
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: PUSH
34243: LD_INT 25
34245: PUSH
34246: LD_INT 16
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PPUSH
34262: CALL_OW 72
34266: UNION
34267: ST_TO_ADDR
// if tmp then
34268: LD_VAR 0 4
34272: IFFALSE 34352
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34274: LD_ADDR_VAR 0 4
34278: PUSH
34279: LD_VAR 0 4
34283: PPUSH
34284: LD_INT 3
34286: PPUSH
34287: CALL 76565 0 2
34291: ST_TO_ADDR
// for j in tmp do
34292: LD_ADDR_VAR 0 2
34296: PUSH
34297: LD_VAR 0 4
34301: PUSH
34302: FOR_IN
34303: IFFALSE 34346
// begin if IsInUnit ( j ) then
34305: LD_VAR 0 2
34309: PPUSH
34310: CALL_OW 310
34314: IFFALSE 34325
// ComExit ( j ) ;
34316: LD_VAR 0 2
34320: PPUSH
34321: CALL 76648 0 1
// AddComCollect ( j , x , y ) ;
34325: LD_VAR 0 2
34329: PPUSH
34330: LD_VAR 0 6
34334: PPUSH
34335: LD_VAR 0 7
34339: PPUSH
34340: CALL_OW 177
// end ;
34344: GO 34302
34346: POP
34347: POP
// exit ;
34348: POP
34349: POP
34350: GO 34535
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34352: LD_ADDR_VAR 0 4
34356: PUSH
34357: LD_INT 22
34359: PUSH
34360: LD_VAR 0 5
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: PUSH
34369: LD_INT 2
34371: PUSH
34372: LD_INT 34
34374: PUSH
34375: LD_INT 12
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 34
34384: PUSH
34385: LD_INT 51
34387: PUSH
34388: EMPTY
34389: LIST
34390: LIST
34391: PUSH
34392: LD_INT 34
34394: PUSH
34395: LD_INT 32
34397: PUSH
34398: EMPTY
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 34
34404: PUSH
34405: LD_EXP 46
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: EMPTY
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PPUSH
34425: CALL_OW 69
34429: ST_TO_ADDR
// if tmp then
34430: LD_VAR 0 4
34434: IFFALSE 34531
// begin for j in tmp do
34436: LD_ADDR_VAR 0 2
34440: PUSH
34441: LD_VAR 0 4
34445: PUSH
34446: FOR_IN
34447: IFFALSE 34529
// if GetFuel ( i ) > 20 and not HasTask ( i ) and ( GetControl ( i ) <> control_manual or IsDrivenBy ( i ) ) then
34449: LD_VAR 0 1
34453: PPUSH
34454: CALL_OW 261
34458: PUSH
34459: LD_INT 20
34461: GREATER
34462: PUSH
34463: LD_VAR 0 1
34467: PPUSH
34468: CALL_OW 314
34472: NOT
34473: AND
34474: PUSH
34475: LD_VAR 0 1
34479: PPUSH
34480: CALL_OW 263
34484: PUSH
34485: LD_INT 1
34487: NONEQUAL
34488: PUSH
34489: LD_VAR 0 1
34493: PPUSH
34494: CALL_OW 311
34498: OR
34499: AND
34500: IFFALSE 34527
// begin ComCollect ( j , x , y ) ;
34502: LD_VAR 0 2
34506: PPUSH
34507: LD_VAR 0 6
34511: PPUSH
34512: LD_VAR 0 7
34516: PPUSH
34517: CALL_OW 117
// exit ;
34521: POP
34522: POP
34523: POP
34524: POP
34525: GO 34535
// end ;
34527: GO 34446
34529: POP
34530: POP
// end ; end ;
34531: GO 33967
34533: POP
34534: POP
// end ; end_of_file
34535: PPOPN 9
34537: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34538: LD_INT 0
34540: PPUSH
34541: PPUSH
34542: PPUSH
34543: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34544: LD_VAR 0 1
34548: PPUSH
34549: CALL_OW 264
34553: PUSH
34554: LD_EXP 49
34558: EQUAL
34559: IFFALSE 34631
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34561: LD_INT 68
34563: PPUSH
34564: LD_VAR 0 1
34568: PPUSH
34569: CALL_OW 255
34573: PPUSH
34574: CALL_OW 321
34578: PUSH
34579: LD_INT 2
34581: EQUAL
34582: IFFALSE 34594
// eff := 70 else
34584: LD_ADDR_VAR 0 4
34588: PUSH
34589: LD_INT 70
34591: ST_TO_ADDR
34592: GO 34602
// eff := 30 ;
34594: LD_ADDR_VAR 0 4
34598: PUSH
34599: LD_INT 30
34601: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34602: LD_VAR 0 1
34606: PPUSH
34607: CALL_OW 250
34611: PPUSH
34612: LD_VAR 0 1
34616: PPUSH
34617: CALL_OW 251
34621: PPUSH
34622: LD_VAR 0 4
34626: PPUSH
34627: CALL_OW 495
// end ; end ;
34631: LD_VAR 0 2
34635: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34636: LD_INT 0
34638: PPUSH
// end ;
34639: LD_VAR 0 4
34643: RET
// export function SOS_Command ( cmd ) ; begin
34644: LD_INT 0
34646: PPUSH
// end ;
34647: LD_VAR 0 2
34651: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34652: LD_INT 0
34654: PPUSH
// end ;
34655: LD_VAR 0 6
34659: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34660: LD_INT 0
34662: PPUSH
34663: PPUSH
// if not vehicle or not factory then
34664: LD_VAR 0 1
34668: NOT
34669: PUSH
34670: LD_VAR 0 2
34674: NOT
34675: OR
34676: IFFALSE 34680
// exit ;
34678: GO 34911
// if factoryWaypoints >= factory then
34680: LD_EXP 122
34684: PUSH
34685: LD_VAR 0 2
34689: GREATEREQUAL
34690: IFFALSE 34911
// if factoryWaypoints [ factory ] then
34692: LD_EXP 122
34696: PUSH
34697: LD_VAR 0 2
34701: ARRAY
34702: IFFALSE 34911
// begin if GetControl ( vehicle ) = control_manual then
34704: LD_VAR 0 1
34708: PPUSH
34709: CALL_OW 263
34713: PUSH
34714: LD_INT 1
34716: EQUAL
34717: IFFALSE 34798
// begin driver := IsDrivenBy ( vehicle ) ;
34719: LD_ADDR_VAR 0 4
34723: PUSH
34724: LD_VAR 0 1
34728: PPUSH
34729: CALL_OW 311
34733: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34734: LD_VAR 0 4
34738: PPUSH
34739: LD_EXP 122
34743: PUSH
34744: LD_VAR 0 2
34748: ARRAY
34749: PUSH
34750: LD_INT 3
34752: ARRAY
34753: PPUSH
34754: LD_EXP 122
34758: PUSH
34759: LD_VAR 0 2
34763: ARRAY
34764: PUSH
34765: LD_INT 4
34767: ARRAY
34768: PPUSH
34769: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34773: LD_VAR 0 4
34777: PPUSH
34778: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34782: LD_VAR 0 4
34786: PPUSH
34787: LD_VAR 0 2
34791: PPUSH
34792: CALL_OW 180
// end else
34796: GO 34911
// if GetControl ( vehicle ) = control_remote then
34798: LD_VAR 0 1
34802: PPUSH
34803: CALL_OW 263
34807: PUSH
34808: LD_INT 2
34810: EQUAL
34811: IFFALSE 34872
// begin wait ( 0 0$2 ) ;
34813: LD_INT 70
34815: PPUSH
34816: CALL_OW 67
// if Connect ( vehicle ) then
34820: LD_VAR 0 1
34824: PPUSH
34825: CALL 46959 0 1
34829: IFFALSE 34870
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34831: LD_VAR 0 1
34835: PPUSH
34836: LD_EXP 122
34840: PUSH
34841: LD_VAR 0 2
34845: ARRAY
34846: PUSH
34847: LD_INT 3
34849: ARRAY
34850: PPUSH
34851: LD_EXP 122
34855: PUSH
34856: LD_VAR 0 2
34860: ARRAY
34861: PUSH
34862: LD_INT 4
34864: ARRAY
34865: PPUSH
34866: CALL_OW 171
// end else
34870: GO 34911
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34872: LD_VAR 0 1
34876: PPUSH
34877: LD_EXP 122
34881: PUSH
34882: LD_VAR 0 2
34886: ARRAY
34887: PUSH
34888: LD_INT 3
34890: ARRAY
34891: PPUSH
34892: LD_EXP 122
34896: PUSH
34897: LD_VAR 0 2
34901: ARRAY
34902: PUSH
34903: LD_INT 4
34905: ARRAY
34906: PPUSH
34907: CALL_OW 171
// end ; end ;
34911: LD_VAR 0 3
34915: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34916: LD_INT 0
34918: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34919: LD_VAR 0 1
34923: PUSH
34924: LD_INT 250
34926: EQUAL
34927: PUSH
34928: LD_VAR 0 2
34932: PPUSH
34933: CALL_OW 264
34937: PUSH
34938: LD_EXP 52
34942: EQUAL
34943: AND
34944: IFFALSE 34965
// MinerPlaceMine ( unit , x , y ) ;
34946: LD_VAR 0 2
34950: PPUSH
34951: LD_VAR 0 4
34955: PPUSH
34956: LD_VAR 0 5
34960: PPUSH
34961: CALL 37364 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34965: LD_VAR 0 1
34969: PUSH
34970: LD_INT 251
34972: EQUAL
34973: PUSH
34974: LD_VAR 0 2
34978: PPUSH
34979: CALL_OW 264
34983: PUSH
34984: LD_EXP 52
34988: EQUAL
34989: AND
34990: IFFALSE 35011
// MinerDetonateMine ( unit , x , y ) ;
34992: LD_VAR 0 2
34996: PPUSH
34997: LD_VAR 0 4
35001: PPUSH
35002: LD_VAR 0 5
35006: PPUSH
35007: CALL 37641 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35011: LD_VAR 0 1
35015: PUSH
35016: LD_INT 252
35018: EQUAL
35019: PUSH
35020: LD_VAR 0 2
35024: PPUSH
35025: CALL_OW 264
35029: PUSH
35030: LD_EXP 52
35034: EQUAL
35035: AND
35036: IFFALSE 35057
// MinerCreateMinefield ( unit , x , y ) ;
35038: LD_VAR 0 2
35042: PPUSH
35043: LD_VAR 0 4
35047: PPUSH
35048: LD_VAR 0 5
35052: PPUSH
35053: CALL 38058 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35057: LD_VAR 0 1
35061: PUSH
35062: LD_INT 253
35064: EQUAL
35065: PUSH
35066: LD_VAR 0 2
35070: PPUSH
35071: CALL_OW 257
35075: PUSH
35076: LD_INT 5
35078: EQUAL
35079: AND
35080: IFFALSE 35101
// ComBinocular ( unit , x , y ) ;
35082: LD_VAR 0 2
35086: PPUSH
35087: LD_VAR 0 4
35091: PPUSH
35092: LD_VAR 0 5
35096: PPUSH
35097: CALL 38429 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35101: LD_VAR 0 1
35105: PUSH
35106: LD_INT 254
35108: EQUAL
35109: PUSH
35110: LD_VAR 0 2
35114: PPUSH
35115: CALL_OW 264
35119: PUSH
35120: LD_EXP 47
35124: EQUAL
35125: AND
35126: PUSH
35127: LD_VAR 0 3
35131: PPUSH
35132: CALL_OW 263
35136: PUSH
35137: LD_INT 3
35139: EQUAL
35140: AND
35141: IFFALSE 35157
// HackDestroyVehicle ( unit , selectedUnit ) ;
35143: LD_VAR 0 2
35147: PPUSH
35148: LD_VAR 0 3
35152: PPUSH
35153: CALL 36724 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35157: LD_VAR 0 1
35161: PUSH
35162: LD_INT 255
35164: EQUAL
35165: PUSH
35166: LD_VAR 0 2
35170: PPUSH
35171: CALL_OW 264
35175: PUSH
35176: LD_INT 14
35178: PUSH
35179: LD_INT 53
35181: PUSH
35182: EMPTY
35183: LIST
35184: LIST
35185: IN
35186: AND
35187: PUSH
35188: LD_VAR 0 4
35192: PPUSH
35193: LD_VAR 0 5
35197: PPUSH
35198: CALL_OW 488
35202: AND
35203: IFFALSE 35227
// CutTreeXYR ( unit , x , y , 12 ) ;
35205: LD_VAR 0 2
35209: PPUSH
35210: LD_VAR 0 4
35214: PPUSH
35215: LD_VAR 0 5
35219: PPUSH
35220: LD_INT 12
35222: PPUSH
35223: CALL 35290 0 4
// if cmd = 256 then
35227: LD_VAR 0 1
35231: PUSH
35232: LD_INT 256
35234: EQUAL
35235: IFFALSE 35256
// SetFactoryWaypoint ( unit , x , y ) ;
35237: LD_VAR 0 2
35241: PPUSH
35242: LD_VAR 0 4
35246: PPUSH
35247: LD_VAR 0 5
35251: PPUSH
35252: CALL 33297 0 3
// if cmd = 257 then
35256: LD_VAR 0 1
35260: PUSH
35261: LD_INT 257
35263: EQUAL
35264: IFFALSE 35285
// SetWarhouseGatheringPoint ( unit , x , y ) ;
35266: LD_VAR 0 2
35270: PPUSH
35271: LD_VAR 0 4
35275: PPUSH
35276: LD_VAR 0 5
35280: PPUSH
35281: CALL 33659 0 3
// end ;
35285: LD_VAR 0 6
35289: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35290: LD_INT 0
35292: PPUSH
35293: PPUSH
35294: PPUSH
35295: PPUSH
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35301: LD_VAR 0 1
35305: NOT
35306: PUSH
35307: LD_VAR 0 2
35311: PPUSH
35312: LD_VAR 0 3
35316: PPUSH
35317: CALL_OW 488
35321: NOT
35322: OR
35323: PUSH
35324: LD_VAR 0 4
35328: NOT
35329: OR
35330: IFFALSE 35334
// exit ;
35332: GO 35674
// list := [ ] ;
35334: LD_ADDR_VAR 0 13
35338: PUSH
35339: EMPTY
35340: ST_TO_ADDR
// if x - r < 0 then
35341: LD_VAR 0 2
35345: PUSH
35346: LD_VAR 0 4
35350: MINUS
35351: PUSH
35352: LD_INT 0
35354: LESS
35355: IFFALSE 35367
// min_x := 0 else
35357: LD_ADDR_VAR 0 7
35361: PUSH
35362: LD_INT 0
35364: ST_TO_ADDR
35365: GO 35383
// min_x := x - r ;
35367: LD_ADDR_VAR 0 7
35371: PUSH
35372: LD_VAR 0 2
35376: PUSH
35377: LD_VAR 0 4
35381: MINUS
35382: ST_TO_ADDR
// if y - r < 0 then
35383: LD_VAR 0 3
35387: PUSH
35388: LD_VAR 0 4
35392: MINUS
35393: PUSH
35394: LD_INT 0
35396: LESS
35397: IFFALSE 35409
// min_y := 0 else
35399: LD_ADDR_VAR 0 8
35403: PUSH
35404: LD_INT 0
35406: ST_TO_ADDR
35407: GO 35425
// min_y := y - r ;
35409: LD_ADDR_VAR 0 8
35413: PUSH
35414: LD_VAR 0 3
35418: PUSH
35419: LD_VAR 0 4
35423: MINUS
35424: ST_TO_ADDR
// max_x := x + r ;
35425: LD_ADDR_VAR 0 9
35429: PUSH
35430: LD_VAR 0 2
35434: PUSH
35435: LD_VAR 0 4
35439: PLUS
35440: ST_TO_ADDR
// max_y := y + r ;
35441: LD_ADDR_VAR 0 10
35445: PUSH
35446: LD_VAR 0 3
35450: PUSH
35451: LD_VAR 0 4
35455: PLUS
35456: ST_TO_ADDR
// for _x = min_x to max_x do
35457: LD_ADDR_VAR 0 11
35461: PUSH
35462: DOUBLE
35463: LD_VAR 0 7
35467: DEC
35468: ST_TO_ADDR
35469: LD_VAR 0 9
35473: PUSH
35474: FOR_TO
35475: IFFALSE 35592
// for _y = min_y to max_y do
35477: LD_ADDR_VAR 0 12
35481: PUSH
35482: DOUBLE
35483: LD_VAR 0 8
35487: DEC
35488: ST_TO_ADDR
35489: LD_VAR 0 10
35493: PUSH
35494: FOR_TO
35495: IFFALSE 35588
// begin if not ValidHex ( _x , _y ) then
35497: LD_VAR 0 11
35501: PPUSH
35502: LD_VAR 0 12
35506: PPUSH
35507: CALL_OW 488
35511: NOT
35512: IFFALSE 35516
// continue ;
35514: GO 35494
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35516: LD_VAR 0 11
35520: PPUSH
35521: LD_VAR 0 12
35525: PPUSH
35526: CALL_OW 351
35530: PUSH
35531: LD_VAR 0 11
35535: PPUSH
35536: LD_VAR 0 12
35540: PPUSH
35541: CALL_OW 554
35545: AND
35546: IFFALSE 35586
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35548: LD_ADDR_VAR 0 13
35552: PUSH
35553: LD_VAR 0 13
35557: PPUSH
35558: LD_VAR 0 13
35562: PUSH
35563: LD_INT 1
35565: PLUS
35566: PPUSH
35567: LD_VAR 0 11
35571: PUSH
35572: LD_VAR 0 12
35576: PUSH
35577: EMPTY
35578: LIST
35579: LIST
35580: PPUSH
35581: CALL_OW 2
35585: ST_TO_ADDR
// end ;
35586: GO 35494
35588: POP
35589: POP
35590: GO 35474
35592: POP
35593: POP
// if not list then
35594: LD_VAR 0 13
35598: NOT
35599: IFFALSE 35603
// exit ;
35601: GO 35674
// for i in list do
35603: LD_ADDR_VAR 0 6
35607: PUSH
35608: LD_VAR 0 13
35612: PUSH
35613: FOR_IN
35614: IFFALSE 35672
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35616: LD_VAR 0 1
35620: PPUSH
35621: LD_STRING M
35623: PUSH
35624: LD_VAR 0 6
35628: PUSH
35629: LD_INT 1
35631: ARRAY
35632: PUSH
35633: LD_VAR 0 6
35637: PUSH
35638: LD_INT 2
35640: ARRAY
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: LD_INT 0
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: LIST
35661: LIST
35662: PUSH
35663: EMPTY
35664: LIST
35665: PPUSH
35666: CALL_OW 447
35670: GO 35613
35672: POP
35673: POP
// end ;
35674: LD_VAR 0 5
35678: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35679: LD_EXP 125
35683: NOT
35684: IFFALSE 35734
35686: GO 35688
35688: DISABLE
// begin initHack := true ;
35689: LD_ADDR_EXP 125
35693: PUSH
35694: LD_INT 1
35696: ST_TO_ADDR
// hackTanks := [ ] ;
35697: LD_ADDR_EXP 126
35701: PUSH
35702: EMPTY
35703: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35704: LD_ADDR_EXP 127
35708: PUSH
35709: EMPTY
35710: ST_TO_ADDR
// hackLimit := 3 ;
35711: LD_ADDR_EXP 128
35715: PUSH
35716: LD_INT 3
35718: ST_TO_ADDR
// hackDist := 12 ;
35719: LD_ADDR_EXP 129
35723: PUSH
35724: LD_INT 12
35726: ST_TO_ADDR
// hackCounter := [ ] ;
35727: LD_ADDR_EXP 130
35731: PUSH
35732: EMPTY
35733: ST_TO_ADDR
// end ;
35734: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35735: LD_EXP 125
35739: PUSH
35740: LD_INT 34
35742: PUSH
35743: LD_EXP 47
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PPUSH
35752: CALL_OW 69
35756: AND
35757: IFFALSE 36012
35759: GO 35761
35761: DISABLE
35762: LD_INT 0
35764: PPUSH
35765: PPUSH
// begin enable ;
35766: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35767: LD_ADDR_VAR 0 1
35771: PUSH
35772: LD_INT 34
35774: PUSH
35775: LD_EXP 47
35779: PUSH
35780: EMPTY
35781: LIST
35782: LIST
35783: PPUSH
35784: CALL_OW 69
35788: PUSH
35789: FOR_IN
35790: IFFALSE 36010
// begin if not i in hackTanks then
35792: LD_VAR 0 1
35796: PUSH
35797: LD_EXP 126
35801: IN
35802: NOT
35803: IFFALSE 35886
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35805: LD_ADDR_EXP 126
35809: PUSH
35810: LD_EXP 126
35814: PPUSH
35815: LD_EXP 126
35819: PUSH
35820: LD_INT 1
35822: PLUS
35823: PPUSH
35824: LD_VAR 0 1
35828: PPUSH
35829: CALL_OW 1
35833: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35834: LD_ADDR_EXP 127
35838: PUSH
35839: LD_EXP 127
35843: PPUSH
35844: LD_EXP 127
35848: PUSH
35849: LD_INT 1
35851: PLUS
35852: PPUSH
35853: EMPTY
35854: PPUSH
35855: CALL_OW 1
35859: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35860: LD_ADDR_EXP 130
35864: PUSH
35865: LD_EXP 130
35869: PPUSH
35870: LD_EXP 130
35874: PUSH
35875: LD_INT 1
35877: PLUS
35878: PPUSH
35879: EMPTY
35880: PPUSH
35881: CALL_OW 1
35885: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35886: LD_VAR 0 1
35890: PPUSH
35891: CALL_OW 302
35895: NOT
35896: IFFALSE 35909
// begin HackUnlinkAll ( i ) ;
35898: LD_VAR 0 1
35902: PPUSH
35903: CALL 36015 0 1
// continue ;
35907: GO 35789
// end ; HackCheckCapturedStatus ( i ) ;
35909: LD_VAR 0 1
35913: PPUSH
35914: CALL 36458 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35918: LD_ADDR_VAR 0 2
35922: PUSH
35923: LD_INT 81
35925: PUSH
35926: LD_VAR 0 1
35930: PPUSH
35931: CALL_OW 255
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 33
35942: PUSH
35943: LD_INT 3
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 91
35952: PUSH
35953: LD_VAR 0 1
35957: PUSH
35958: LD_EXP 129
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 50
35970: PUSH
35971: EMPTY
35972: LIST
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: PPUSH
35980: CALL_OW 69
35984: ST_TO_ADDR
// if not tmp then
35985: LD_VAR 0 2
35989: NOT
35990: IFFALSE 35994
// continue ;
35992: GO 35789
// HackLink ( i , tmp ) ;
35994: LD_VAR 0 1
35998: PPUSH
35999: LD_VAR 0 2
36003: PPUSH
36004: CALL 36151 0 2
// end ;
36008: GO 35789
36010: POP
36011: POP
// end ;
36012: PPOPN 2
36014: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36015: LD_INT 0
36017: PPUSH
36018: PPUSH
36019: PPUSH
// if not hack in hackTanks then
36020: LD_VAR 0 1
36024: PUSH
36025: LD_EXP 126
36029: IN
36030: NOT
36031: IFFALSE 36035
// exit ;
36033: GO 36146
// index := GetElementIndex ( hackTanks , hack ) ;
36035: LD_ADDR_VAR 0 4
36039: PUSH
36040: LD_EXP 126
36044: PPUSH
36045: LD_VAR 0 1
36049: PPUSH
36050: CALL 43773 0 2
36054: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36055: LD_EXP 127
36059: PUSH
36060: LD_VAR 0 4
36064: ARRAY
36065: IFFALSE 36146
// begin for i in hackTanksCaptured [ index ] do
36067: LD_ADDR_VAR 0 3
36071: PUSH
36072: LD_EXP 127
36076: PUSH
36077: LD_VAR 0 4
36081: ARRAY
36082: PUSH
36083: FOR_IN
36084: IFFALSE 36110
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36086: LD_VAR 0 3
36090: PUSH
36091: LD_INT 1
36093: ARRAY
36094: PPUSH
36095: LD_VAR 0 3
36099: PUSH
36100: LD_INT 2
36102: ARRAY
36103: PPUSH
36104: CALL_OW 235
36108: GO 36083
36110: POP
36111: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36112: LD_ADDR_EXP 127
36116: PUSH
36117: LD_EXP 127
36121: PPUSH
36122: LD_VAR 0 4
36126: PPUSH
36127: EMPTY
36128: PPUSH
36129: CALL_OW 1
36133: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36134: LD_VAR 0 1
36138: PPUSH
36139: LD_INT 0
36141: PPUSH
36142: CALL_OW 505
// end ; end ;
36146: LD_VAR 0 2
36150: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36151: LD_INT 0
36153: PPUSH
36154: PPUSH
36155: PPUSH
// if not hack in hackTanks or not vehicles then
36156: LD_VAR 0 1
36160: PUSH
36161: LD_EXP 126
36165: IN
36166: NOT
36167: PUSH
36168: LD_VAR 0 2
36172: NOT
36173: OR
36174: IFFALSE 36178
// exit ;
36176: GO 36453
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36178: LD_ADDR_VAR 0 2
36182: PUSH
36183: LD_VAR 0 1
36187: PPUSH
36188: LD_VAR 0 2
36192: PPUSH
36193: LD_INT 1
36195: PPUSH
36196: LD_INT 1
36198: PPUSH
36199: CALL 44423 0 4
36203: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36204: LD_ADDR_VAR 0 5
36208: PUSH
36209: LD_EXP 126
36213: PPUSH
36214: LD_VAR 0 1
36218: PPUSH
36219: CALL 43773 0 2
36223: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36224: LD_EXP 127
36228: PUSH
36229: LD_VAR 0 5
36233: ARRAY
36234: PUSH
36235: LD_EXP 128
36239: LESS
36240: IFFALSE 36429
// begin for i := 1 to vehicles do
36242: LD_ADDR_VAR 0 4
36246: PUSH
36247: DOUBLE
36248: LD_INT 1
36250: DEC
36251: ST_TO_ADDR
36252: LD_VAR 0 2
36256: PUSH
36257: FOR_TO
36258: IFFALSE 36427
// begin if hackTanksCaptured [ index ] = hackLimit then
36260: LD_EXP 127
36264: PUSH
36265: LD_VAR 0 5
36269: ARRAY
36270: PUSH
36271: LD_EXP 128
36275: EQUAL
36276: IFFALSE 36280
// break ;
36278: GO 36427
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36280: LD_ADDR_EXP 130
36284: PUSH
36285: LD_EXP 130
36289: PPUSH
36290: LD_VAR 0 5
36294: PPUSH
36295: LD_EXP 130
36299: PUSH
36300: LD_VAR 0 5
36304: ARRAY
36305: PUSH
36306: LD_INT 1
36308: PLUS
36309: PPUSH
36310: CALL_OW 1
36314: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36315: LD_ADDR_EXP 127
36319: PUSH
36320: LD_EXP 127
36324: PPUSH
36325: LD_VAR 0 5
36329: PUSH
36330: LD_EXP 127
36334: PUSH
36335: LD_VAR 0 5
36339: ARRAY
36340: PUSH
36341: LD_INT 1
36343: PLUS
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PPUSH
36349: LD_VAR 0 2
36353: PUSH
36354: LD_VAR 0 4
36358: ARRAY
36359: PUSH
36360: LD_VAR 0 2
36364: PUSH
36365: LD_VAR 0 4
36369: ARRAY
36370: PPUSH
36371: CALL_OW 255
36375: PUSH
36376: EMPTY
36377: LIST
36378: LIST
36379: PPUSH
36380: CALL 43988 0 3
36384: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36385: LD_VAR 0 2
36389: PUSH
36390: LD_VAR 0 4
36394: ARRAY
36395: PPUSH
36396: LD_VAR 0 1
36400: PPUSH
36401: CALL_OW 255
36405: PPUSH
36406: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36410: LD_VAR 0 2
36414: PUSH
36415: LD_VAR 0 4
36419: ARRAY
36420: PPUSH
36421: CALL_OW 141
// end ;
36425: GO 36257
36427: POP
36428: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36429: LD_VAR 0 1
36433: PPUSH
36434: LD_EXP 127
36438: PUSH
36439: LD_VAR 0 5
36443: ARRAY
36444: PUSH
36445: LD_INT 0
36447: PLUS
36448: PPUSH
36449: CALL_OW 505
// end ;
36453: LD_VAR 0 3
36457: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36458: LD_INT 0
36460: PPUSH
36461: PPUSH
36462: PPUSH
36463: PPUSH
// if not hack in hackTanks then
36464: LD_VAR 0 1
36468: PUSH
36469: LD_EXP 126
36473: IN
36474: NOT
36475: IFFALSE 36479
// exit ;
36477: GO 36719
// index := GetElementIndex ( hackTanks , hack ) ;
36479: LD_ADDR_VAR 0 4
36483: PUSH
36484: LD_EXP 126
36488: PPUSH
36489: LD_VAR 0 1
36493: PPUSH
36494: CALL 43773 0 2
36498: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36499: LD_ADDR_VAR 0 3
36503: PUSH
36504: DOUBLE
36505: LD_EXP 127
36509: PUSH
36510: LD_VAR 0 4
36514: ARRAY
36515: INC
36516: ST_TO_ADDR
36517: LD_INT 1
36519: PUSH
36520: FOR_DOWNTO
36521: IFFALSE 36693
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36523: LD_ADDR_VAR 0 5
36527: PUSH
36528: LD_EXP 127
36532: PUSH
36533: LD_VAR 0 4
36537: ARRAY
36538: PUSH
36539: LD_VAR 0 3
36543: ARRAY
36544: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36545: LD_VAR 0 5
36549: PUSH
36550: LD_INT 1
36552: ARRAY
36553: PPUSH
36554: CALL_OW 302
36558: NOT
36559: PUSH
36560: LD_VAR 0 5
36564: PUSH
36565: LD_INT 1
36567: ARRAY
36568: PPUSH
36569: CALL_OW 255
36573: PUSH
36574: LD_VAR 0 1
36578: PPUSH
36579: CALL_OW 255
36583: NONEQUAL
36584: OR
36585: IFFALSE 36691
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36587: LD_VAR 0 5
36591: PUSH
36592: LD_INT 1
36594: ARRAY
36595: PPUSH
36596: CALL_OW 305
36600: PUSH
36601: LD_VAR 0 5
36605: PUSH
36606: LD_INT 1
36608: ARRAY
36609: PPUSH
36610: CALL_OW 255
36614: PUSH
36615: LD_VAR 0 1
36619: PPUSH
36620: CALL_OW 255
36624: EQUAL
36625: AND
36626: IFFALSE 36650
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36628: LD_VAR 0 5
36632: PUSH
36633: LD_INT 1
36635: ARRAY
36636: PPUSH
36637: LD_VAR 0 5
36641: PUSH
36642: LD_INT 2
36644: ARRAY
36645: PPUSH
36646: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36650: LD_ADDR_EXP 127
36654: PUSH
36655: LD_EXP 127
36659: PPUSH
36660: LD_VAR 0 4
36664: PPUSH
36665: LD_EXP 127
36669: PUSH
36670: LD_VAR 0 4
36674: ARRAY
36675: PPUSH
36676: LD_VAR 0 3
36680: PPUSH
36681: CALL_OW 3
36685: PPUSH
36686: CALL_OW 1
36690: ST_TO_ADDR
// end ; end ;
36691: GO 36520
36693: POP
36694: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36695: LD_VAR 0 1
36699: PPUSH
36700: LD_EXP 127
36704: PUSH
36705: LD_VAR 0 4
36709: ARRAY
36710: PUSH
36711: LD_INT 0
36713: PLUS
36714: PPUSH
36715: CALL_OW 505
// end ;
36719: LD_VAR 0 2
36723: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36724: LD_INT 0
36726: PPUSH
36727: PPUSH
36728: PPUSH
36729: PPUSH
// if not hack in hackTanks then
36730: LD_VAR 0 1
36734: PUSH
36735: LD_EXP 126
36739: IN
36740: NOT
36741: IFFALSE 36745
// exit ;
36743: GO 36830
// index := GetElementIndex ( hackTanks , hack ) ;
36745: LD_ADDR_VAR 0 5
36749: PUSH
36750: LD_EXP 126
36754: PPUSH
36755: LD_VAR 0 1
36759: PPUSH
36760: CALL 43773 0 2
36764: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36765: LD_ADDR_VAR 0 4
36769: PUSH
36770: DOUBLE
36771: LD_INT 1
36773: DEC
36774: ST_TO_ADDR
36775: LD_EXP 127
36779: PUSH
36780: LD_VAR 0 5
36784: ARRAY
36785: PUSH
36786: FOR_TO
36787: IFFALSE 36828
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36789: LD_EXP 127
36793: PUSH
36794: LD_VAR 0 5
36798: ARRAY
36799: PUSH
36800: LD_VAR 0 4
36804: ARRAY
36805: PUSH
36806: LD_INT 1
36808: ARRAY
36809: PUSH
36810: LD_VAR 0 2
36814: EQUAL
36815: IFFALSE 36826
// KillUnit ( vehicle ) ;
36817: LD_VAR 0 2
36821: PPUSH
36822: CALL_OW 66
36826: GO 36786
36828: POP
36829: POP
// end ;
36830: LD_VAR 0 3
36834: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36835: LD_EXP 131
36839: NOT
36840: IFFALSE 36875
36842: GO 36844
36844: DISABLE
// begin initMiner := true ;
36845: LD_ADDR_EXP 131
36849: PUSH
36850: LD_INT 1
36852: ST_TO_ADDR
// minersList := [ ] ;
36853: LD_ADDR_EXP 132
36857: PUSH
36858: EMPTY
36859: ST_TO_ADDR
// minerMinesList := [ ] ;
36860: LD_ADDR_EXP 133
36864: PUSH
36865: EMPTY
36866: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36867: LD_ADDR_EXP 134
36871: PUSH
36872: LD_INT 5
36874: ST_TO_ADDR
// end ;
36875: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36876: LD_EXP 131
36880: PUSH
36881: LD_INT 34
36883: PUSH
36884: LD_EXP 52
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PPUSH
36893: CALL_OW 69
36897: AND
36898: IFFALSE 37361
36900: GO 36902
36902: DISABLE
36903: LD_INT 0
36905: PPUSH
36906: PPUSH
36907: PPUSH
36908: PPUSH
// begin enable ;
36909: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36910: LD_ADDR_VAR 0 1
36914: PUSH
36915: LD_INT 34
36917: PUSH
36918: LD_EXP 52
36922: PUSH
36923: EMPTY
36924: LIST
36925: LIST
36926: PPUSH
36927: CALL_OW 69
36931: PUSH
36932: FOR_IN
36933: IFFALSE 37005
// begin if not i in minersList then
36935: LD_VAR 0 1
36939: PUSH
36940: LD_EXP 132
36944: IN
36945: NOT
36946: IFFALSE 37003
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36948: LD_ADDR_EXP 132
36952: PUSH
36953: LD_EXP 132
36957: PPUSH
36958: LD_EXP 132
36962: PUSH
36963: LD_INT 1
36965: PLUS
36966: PPUSH
36967: LD_VAR 0 1
36971: PPUSH
36972: CALL_OW 1
36976: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36977: LD_ADDR_EXP 133
36981: PUSH
36982: LD_EXP 133
36986: PPUSH
36987: LD_EXP 133
36991: PUSH
36992: LD_INT 1
36994: PLUS
36995: PPUSH
36996: EMPTY
36997: PPUSH
36998: CALL_OW 1
37002: ST_TO_ADDR
// end end ;
37003: GO 36932
37005: POP
37006: POP
// for i := minerMinesList downto 1 do
37007: LD_ADDR_VAR 0 1
37011: PUSH
37012: DOUBLE
37013: LD_EXP 133
37017: INC
37018: ST_TO_ADDR
37019: LD_INT 1
37021: PUSH
37022: FOR_DOWNTO
37023: IFFALSE 37359
// begin if IsLive ( minersList [ i ] ) then
37025: LD_EXP 132
37029: PUSH
37030: LD_VAR 0 1
37034: ARRAY
37035: PPUSH
37036: CALL_OW 300
37040: IFFALSE 37068
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37042: LD_EXP 132
37046: PUSH
37047: LD_VAR 0 1
37051: ARRAY
37052: PPUSH
37053: LD_EXP 133
37057: PUSH
37058: LD_VAR 0 1
37062: ARRAY
37063: PPUSH
37064: CALL_OW 505
// if not minerMinesList [ i ] then
37068: LD_EXP 133
37072: PUSH
37073: LD_VAR 0 1
37077: ARRAY
37078: NOT
37079: IFFALSE 37083
// continue ;
37081: GO 37022
// for j := minerMinesList [ i ] downto 1 do
37083: LD_ADDR_VAR 0 2
37087: PUSH
37088: DOUBLE
37089: LD_EXP 133
37093: PUSH
37094: LD_VAR 0 1
37098: ARRAY
37099: INC
37100: ST_TO_ADDR
37101: LD_INT 1
37103: PUSH
37104: FOR_DOWNTO
37105: IFFALSE 37355
// begin side := GetSide ( minersList [ i ] ) ;
37107: LD_ADDR_VAR 0 3
37111: PUSH
37112: LD_EXP 132
37116: PUSH
37117: LD_VAR 0 1
37121: ARRAY
37122: PPUSH
37123: CALL_OW 255
37127: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37128: LD_ADDR_VAR 0 4
37132: PUSH
37133: LD_EXP 133
37137: PUSH
37138: LD_VAR 0 1
37142: ARRAY
37143: PUSH
37144: LD_VAR 0 2
37148: ARRAY
37149: PUSH
37150: LD_INT 1
37152: ARRAY
37153: PPUSH
37154: LD_EXP 133
37158: PUSH
37159: LD_VAR 0 1
37163: ARRAY
37164: PUSH
37165: LD_VAR 0 2
37169: ARRAY
37170: PUSH
37171: LD_INT 2
37173: ARRAY
37174: PPUSH
37175: CALL_OW 428
37179: ST_TO_ADDR
// if not tmp then
37180: LD_VAR 0 4
37184: NOT
37185: IFFALSE 37189
// continue ;
37187: GO 37104
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37189: LD_VAR 0 4
37193: PUSH
37194: LD_INT 81
37196: PUSH
37197: LD_VAR 0 3
37201: PUSH
37202: EMPTY
37203: LIST
37204: LIST
37205: PPUSH
37206: CALL_OW 69
37210: IN
37211: PUSH
37212: LD_EXP 133
37216: PUSH
37217: LD_VAR 0 1
37221: ARRAY
37222: PUSH
37223: LD_VAR 0 2
37227: ARRAY
37228: PUSH
37229: LD_INT 1
37231: ARRAY
37232: PPUSH
37233: LD_EXP 133
37237: PUSH
37238: LD_VAR 0 1
37242: ARRAY
37243: PUSH
37244: LD_VAR 0 2
37248: ARRAY
37249: PUSH
37250: LD_INT 2
37252: ARRAY
37253: PPUSH
37254: CALL_OW 458
37258: AND
37259: IFFALSE 37353
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37261: LD_EXP 133
37265: PUSH
37266: LD_VAR 0 1
37270: ARRAY
37271: PUSH
37272: LD_VAR 0 2
37276: ARRAY
37277: PUSH
37278: LD_INT 1
37280: ARRAY
37281: PPUSH
37282: LD_EXP 133
37286: PUSH
37287: LD_VAR 0 1
37291: ARRAY
37292: PUSH
37293: LD_VAR 0 2
37297: ARRAY
37298: PUSH
37299: LD_INT 2
37301: ARRAY
37302: PPUSH
37303: LD_VAR 0 3
37307: PPUSH
37308: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37312: LD_ADDR_EXP 133
37316: PUSH
37317: LD_EXP 133
37321: PPUSH
37322: LD_VAR 0 1
37326: PPUSH
37327: LD_EXP 133
37331: PUSH
37332: LD_VAR 0 1
37336: ARRAY
37337: PPUSH
37338: LD_VAR 0 2
37342: PPUSH
37343: CALL_OW 3
37347: PPUSH
37348: CALL_OW 1
37352: ST_TO_ADDR
// end ; end ;
37353: GO 37104
37355: POP
37356: POP
// end ;
37357: GO 37022
37359: POP
37360: POP
// end ;
37361: PPOPN 4
37363: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37364: LD_INT 0
37366: PPUSH
37367: PPUSH
// result := false ;
37368: LD_ADDR_VAR 0 4
37372: PUSH
37373: LD_INT 0
37375: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37376: LD_VAR 0 1
37380: PPUSH
37381: CALL_OW 264
37385: PUSH
37386: LD_EXP 52
37390: EQUAL
37391: NOT
37392: IFFALSE 37396
// exit ;
37394: GO 37636
// index := GetElementIndex ( minersList , unit ) ;
37396: LD_ADDR_VAR 0 5
37400: PUSH
37401: LD_EXP 132
37405: PPUSH
37406: LD_VAR 0 1
37410: PPUSH
37411: CALL 43773 0 2
37415: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37416: LD_EXP 133
37420: PUSH
37421: LD_VAR 0 5
37425: ARRAY
37426: PUSH
37427: LD_EXP 134
37431: GREATEREQUAL
37432: IFFALSE 37436
// exit ;
37434: GO 37636
// ComMoveXY ( unit , x , y ) ;
37436: LD_VAR 0 1
37440: PPUSH
37441: LD_VAR 0 2
37445: PPUSH
37446: LD_VAR 0 3
37450: PPUSH
37451: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37455: LD_INT 35
37457: PPUSH
37458: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37462: LD_VAR 0 1
37466: PPUSH
37467: LD_VAR 0 2
37471: PPUSH
37472: LD_VAR 0 3
37476: PPUSH
37477: CALL 75059 0 3
37481: NOT
37482: PUSH
37483: LD_VAR 0 1
37487: PPUSH
37488: CALL_OW 314
37492: AND
37493: IFFALSE 37497
// exit ;
37495: GO 37636
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37497: LD_VAR 0 2
37501: PPUSH
37502: LD_VAR 0 3
37506: PPUSH
37507: CALL_OW 428
37511: PUSH
37512: LD_VAR 0 1
37516: EQUAL
37517: PUSH
37518: LD_VAR 0 1
37522: PPUSH
37523: CALL_OW 314
37527: NOT
37528: AND
37529: IFFALSE 37455
// PlaySoundXY ( x , y , PlantMine ) ;
37531: LD_VAR 0 2
37535: PPUSH
37536: LD_VAR 0 3
37540: PPUSH
37541: LD_STRING PlantMine
37543: PPUSH
37544: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37548: LD_VAR 0 2
37552: PPUSH
37553: LD_VAR 0 3
37557: PPUSH
37558: LD_VAR 0 1
37562: PPUSH
37563: CALL_OW 255
37567: PPUSH
37568: LD_INT 0
37570: PPUSH
37571: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37575: LD_ADDR_EXP 133
37579: PUSH
37580: LD_EXP 133
37584: PPUSH
37585: LD_VAR 0 5
37589: PUSH
37590: LD_EXP 133
37594: PUSH
37595: LD_VAR 0 5
37599: ARRAY
37600: PUSH
37601: LD_INT 1
37603: PLUS
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: PPUSH
37609: LD_VAR 0 2
37613: PUSH
37614: LD_VAR 0 3
37618: PUSH
37619: EMPTY
37620: LIST
37621: LIST
37622: PPUSH
37623: CALL 43988 0 3
37627: ST_TO_ADDR
// result := true ;
37628: LD_ADDR_VAR 0 4
37632: PUSH
37633: LD_INT 1
37635: ST_TO_ADDR
// end ;
37636: LD_VAR 0 4
37640: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37641: LD_INT 0
37643: PPUSH
37644: PPUSH
37645: PPUSH
// if not unit in minersList then
37646: LD_VAR 0 1
37650: PUSH
37651: LD_EXP 132
37655: IN
37656: NOT
37657: IFFALSE 37661
// exit ;
37659: GO 38053
// index := GetElementIndex ( minersList , unit ) ;
37661: LD_ADDR_VAR 0 6
37665: PUSH
37666: LD_EXP 132
37670: PPUSH
37671: LD_VAR 0 1
37675: PPUSH
37676: CALL 43773 0 2
37680: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37681: LD_ADDR_VAR 0 5
37685: PUSH
37686: DOUBLE
37687: LD_EXP 133
37691: PUSH
37692: LD_VAR 0 6
37696: ARRAY
37697: INC
37698: ST_TO_ADDR
37699: LD_INT 1
37701: PUSH
37702: FOR_DOWNTO
37703: IFFALSE 37864
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37705: LD_EXP 133
37709: PUSH
37710: LD_VAR 0 6
37714: ARRAY
37715: PUSH
37716: LD_VAR 0 5
37720: ARRAY
37721: PUSH
37722: LD_INT 1
37724: ARRAY
37725: PUSH
37726: LD_VAR 0 2
37730: EQUAL
37731: PUSH
37732: LD_EXP 133
37736: PUSH
37737: LD_VAR 0 6
37741: ARRAY
37742: PUSH
37743: LD_VAR 0 5
37747: ARRAY
37748: PUSH
37749: LD_INT 2
37751: ARRAY
37752: PUSH
37753: LD_VAR 0 3
37757: EQUAL
37758: AND
37759: IFFALSE 37862
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37761: LD_EXP 133
37765: PUSH
37766: LD_VAR 0 6
37770: ARRAY
37771: PUSH
37772: LD_VAR 0 5
37776: ARRAY
37777: PUSH
37778: LD_INT 1
37780: ARRAY
37781: PPUSH
37782: LD_EXP 133
37786: PUSH
37787: LD_VAR 0 6
37791: ARRAY
37792: PUSH
37793: LD_VAR 0 5
37797: ARRAY
37798: PUSH
37799: LD_INT 2
37801: ARRAY
37802: PPUSH
37803: LD_VAR 0 1
37807: PPUSH
37808: CALL_OW 255
37812: PPUSH
37813: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37817: LD_ADDR_EXP 133
37821: PUSH
37822: LD_EXP 133
37826: PPUSH
37827: LD_VAR 0 6
37831: PPUSH
37832: LD_EXP 133
37836: PUSH
37837: LD_VAR 0 6
37841: ARRAY
37842: PPUSH
37843: LD_VAR 0 5
37847: PPUSH
37848: CALL_OW 3
37852: PPUSH
37853: CALL_OW 1
37857: ST_TO_ADDR
// exit ;
37858: POP
37859: POP
37860: GO 38053
// end ; end ;
37862: GO 37702
37864: POP
37865: POP
// for i := minerMinesList [ index ] downto 1 do
37866: LD_ADDR_VAR 0 5
37870: PUSH
37871: DOUBLE
37872: LD_EXP 133
37876: PUSH
37877: LD_VAR 0 6
37881: ARRAY
37882: INC
37883: ST_TO_ADDR
37884: LD_INT 1
37886: PUSH
37887: FOR_DOWNTO
37888: IFFALSE 38051
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37890: LD_EXP 133
37894: PUSH
37895: LD_VAR 0 6
37899: ARRAY
37900: PUSH
37901: LD_VAR 0 5
37905: ARRAY
37906: PUSH
37907: LD_INT 1
37909: ARRAY
37910: PPUSH
37911: LD_EXP 133
37915: PUSH
37916: LD_VAR 0 6
37920: ARRAY
37921: PUSH
37922: LD_VAR 0 5
37926: ARRAY
37927: PUSH
37928: LD_INT 2
37930: ARRAY
37931: PPUSH
37932: LD_VAR 0 2
37936: PPUSH
37937: LD_VAR 0 3
37941: PPUSH
37942: CALL_OW 298
37946: PUSH
37947: LD_INT 6
37949: LESS
37950: IFFALSE 38049
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37952: LD_EXP 133
37956: PUSH
37957: LD_VAR 0 6
37961: ARRAY
37962: PUSH
37963: LD_VAR 0 5
37967: ARRAY
37968: PUSH
37969: LD_INT 1
37971: ARRAY
37972: PPUSH
37973: LD_EXP 133
37977: PUSH
37978: LD_VAR 0 6
37982: ARRAY
37983: PUSH
37984: LD_VAR 0 5
37988: ARRAY
37989: PUSH
37990: LD_INT 2
37992: ARRAY
37993: PPUSH
37994: LD_VAR 0 1
37998: PPUSH
37999: CALL_OW 255
38003: PPUSH
38004: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38008: LD_ADDR_EXP 133
38012: PUSH
38013: LD_EXP 133
38017: PPUSH
38018: LD_VAR 0 6
38022: PPUSH
38023: LD_EXP 133
38027: PUSH
38028: LD_VAR 0 6
38032: ARRAY
38033: PPUSH
38034: LD_VAR 0 5
38038: PPUSH
38039: CALL_OW 3
38043: PPUSH
38044: CALL_OW 1
38048: ST_TO_ADDR
// end ; end ;
38049: GO 37887
38051: POP
38052: POP
// end ;
38053: LD_VAR 0 4
38057: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38058: LD_INT 0
38060: PPUSH
38061: PPUSH
38062: PPUSH
38063: PPUSH
38064: PPUSH
38065: PPUSH
38066: PPUSH
38067: PPUSH
38068: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38069: LD_VAR 0 1
38073: PPUSH
38074: CALL_OW 264
38078: PUSH
38079: LD_EXP 52
38083: EQUAL
38084: NOT
38085: PUSH
38086: LD_VAR 0 1
38090: PUSH
38091: LD_EXP 132
38095: IN
38096: NOT
38097: OR
38098: IFFALSE 38102
// exit ;
38100: GO 38424
// index := GetElementIndex ( minersList , unit ) ;
38102: LD_ADDR_VAR 0 6
38106: PUSH
38107: LD_EXP 132
38111: PPUSH
38112: LD_VAR 0 1
38116: PPUSH
38117: CALL 43773 0 2
38121: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38122: LD_ADDR_VAR 0 8
38126: PUSH
38127: LD_EXP 134
38131: PUSH
38132: LD_EXP 133
38136: PUSH
38137: LD_VAR 0 6
38141: ARRAY
38142: MINUS
38143: ST_TO_ADDR
// if not minesFreeAmount then
38144: LD_VAR 0 8
38148: NOT
38149: IFFALSE 38153
// exit ;
38151: GO 38424
// tmp := [ ] ;
38153: LD_ADDR_VAR 0 7
38157: PUSH
38158: EMPTY
38159: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38160: LD_ADDR_VAR 0 5
38164: PUSH
38165: DOUBLE
38166: LD_INT 1
38168: DEC
38169: ST_TO_ADDR
38170: LD_VAR 0 8
38174: PUSH
38175: FOR_TO
38176: IFFALSE 38371
// begin _d := rand ( 0 , 5 ) ;
38178: LD_ADDR_VAR 0 11
38182: PUSH
38183: LD_INT 0
38185: PPUSH
38186: LD_INT 5
38188: PPUSH
38189: CALL_OW 12
38193: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38194: LD_ADDR_VAR 0 12
38198: PUSH
38199: LD_INT 2
38201: PPUSH
38202: LD_INT 6
38204: PPUSH
38205: CALL_OW 12
38209: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38210: LD_ADDR_VAR 0 9
38214: PUSH
38215: LD_VAR 0 2
38219: PPUSH
38220: LD_VAR 0 11
38224: PPUSH
38225: LD_VAR 0 12
38229: PPUSH
38230: CALL_OW 272
38234: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38235: LD_ADDR_VAR 0 10
38239: PUSH
38240: LD_VAR 0 3
38244: PPUSH
38245: LD_VAR 0 11
38249: PPUSH
38250: LD_VAR 0 12
38254: PPUSH
38255: CALL_OW 273
38259: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38260: LD_VAR 0 9
38264: PPUSH
38265: LD_VAR 0 10
38269: PPUSH
38270: CALL_OW 488
38274: PUSH
38275: LD_VAR 0 9
38279: PUSH
38280: LD_VAR 0 10
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_VAR 0 7
38293: IN
38294: NOT
38295: AND
38296: PUSH
38297: LD_VAR 0 9
38301: PPUSH
38302: LD_VAR 0 10
38306: PPUSH
38307: CALL_OW 458
38311: NOT
38312: AND
38313: IFFALSE 38355
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38315: LD_ADDR_VAR 0 7
38319: PUSH
38320: LD_VAR 0 7
38324: PPUSH
38325: LD_VAR 0 7
38329: PUSH
38330: LD_INT 1
38332: PLUS
38333: PPUSH
38334: LD_VAR 0 9
38338: PUSH
38339: LD_VAR 0 10
38343: PUSH
38344: EMPTY
38345: LIST
38346: LIST
38347: PPUSH
38348: CALL_OW 1
38352: ST_TO_ADDR
38353: GO 38369
// i := i - 1 ;
38355: LD_ADDR_VAR 0 5
38359: PUSH
38360: LD_VAR 0 5
38364: PUSH
38365: LD_INT 1
38367: MINUS
38368: ST_TO_ADDR
// end ;
38369: GO 38175
38371: POP
38372: POP
// for i in tmp do
38373: LD_ADDR_VAR 0 5
38377: PUSH
38378: LD_VAR 0 7
38382: PUSH
38383: FOR_IN
38384: IFFALSE 38422
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38386: LD_VAR 0 1
38390: PPUSH
38391: LD_VAR 0 5
38395: PUSH
38396: LD_INT 1
38398: ARRAY
38399: PPUSH
38400: LD_VAR 0 5
38404: PUSH
38405: LD_INT 2
38407: ARRAY
38408: PPUSH
38409: CALL 37364 0 3
38413: NOT
38414: IFFALSE 38420
// exit ;
38416: POP
38417: POP
38418: GO 38424
38420: GO 38383
38422: POP
38423: POP
// end ;
38424: LD_VAR 0 4
38428: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38429: LD_INT 0
38431: PPUSH
38432: PPUSH
38433: PPUSH
38434: PPUSH
38435: PPUSH
38436: PPUSH
38437: PPUSH
// if not GetClass ( unit ) = class_sniper then
38438: LD_VAR 0 1
38442: PPUSH
38443: CALL_OW 257
38447: PUSH
38448: LD_INT 5
38450: EQUAL
38451: NOT
38452: IFFALSE 38456
// exit ;
38454: GO 38844
// dist := 8 ;
38456: LD_ADDR_VAR 0 5
38460: PUSH
38461: LD_INT 8
38463: ST_TO_ADDR
// viewRange := 12 ;
38464: LD_ADDR_VAR 0 7
38468: PUSH
38469: LD_INT 12
38471: ST_TO_ADDR
// side := GetSide ( unit ) ;
38472: LD_ADDR_VAR 0 6
38476: PUSH
38477: LD_VAR 0 1
38481: PPUSH
38482: CALL_OW 255
38486: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38487: LD_INT 61
38489: PPUSH
38490: LD_VAR 0 6
38494: PPUSH
38495: CALL_OW 321
38499: PUSH
38500: LD_INT 2
38502: EQUAL
38503: IFFALSE 38513
// viewRange := 16 ;
38505: LD_ADDR_VAR 0 7
38509: PUSH
38510: LD_INT 16
38512: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38513: LD_VAR 0 1
38517: PPUSH
38518: LD_VAR 0 2
38522: PPUSH
38523: LD_VAR 0 3
38527: PPUSH
38528: CALL_OW 297
38532: PUSH
38533: LD_VAR 0 5
38537: GREATER
38538: IFFALSE 38617
// begin ComMoveXY ( unit , x , y ) ;
38540: LD_VAR 0 1
38544: PPUSH
38545: LD_VAR 0 2
38549: PPUSH
38550: LD_VAR 0 3
38554: PPUSH
38555: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38559: LD_INT 35
38561: PPUSH
38562: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38566: LD_VAR 0 1
38570: PPUSH
38571: LD_VAR 0 2
38575: PPUSH
38576: LD_VAR 0 3
38580: PPUSH
38581: CALL 75059 0 3
38585: NOT
38586: IFFALSE 38590
// exit ;
38588: GO 38844
// until GetDistUnitXY ( unit , x , y ) < dist ;
38590: LD_VAR 0 1
38594: PPUSH
38595: LD_VAR 0 2
38599: PPUSH
38600: LD_VAR 0 3
38604: PPUSH
38605: CALL_OW 297
38609: PUSH
38610: LD_VAR 0 5
38614: LESS
38615: IFFALSE 38559
// end ; ComTurnXY ( unit , x , y ) ;
38617: LD_VAR 0 1
38621: PPUSH
38622: LD_VAR 0 2
38626: PPUSH
38627: LD_VAR 0 3
38631: PPUSH
38632: CALL_OW 118
// wait ( 5 ) ;
38636: LD_INT 5
38638: PPUSH
38639: CALL_OW 67
// _d := GetDir ( unit ) ;
38643: LD_ADDR_VAR 0 10
38647: PUSH
38648: LD_VAR 0 1
38652: PPUSH
38653: CALL_OW 254
38657: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38658: LD_ADDR_VAR 0 8
38662: PUSH
38663: LD_VAR 0 1
38667: PPUSH
38668: CALL_OW 250
38672: PPUSH
38673: LD_VAR 0 10
38677: PPUSH
38678: LD_VAR 0 5
38682: PPUSH
38683: CALL_OW 272
38687: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38688: LD_ADDR_VAR 0 9
38692: PUSH
38693: LD_VAR 0 1
38697: PPUSH
38698: CALL_OW 251
38702: PPUSH
38703: LD_VAR 0 10
38707: PPUSH
38708: LD_VAR 0 5
38712: PPUSH
38713: CALL_OW 273
38717: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38718: LD_VAR 0 8
38722: PPUSH
38723: LD_VAR 0 9
38727: PPUSH
38728: CALL_OW 488
38732: NOT
38733: IFFALSE 38737
// exit ;
38735: GO 38844
// ComAnimCustom ( unit , 1 ) ;
38737: LD_VAR 0 1
38741: PPUSH
38742: LD_INT 1
38744: PPUSH
38745: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38749: LD_VAR 0 8
38753: PPUSH
38754: LD_VAR 0 9
38758: PPUSH
38759: LD_VAR 0 6
38763: PPUSH
38764: LD_VAR 0 7
38768: PPUSH
38769: CALL_OW 330
// repeat wait ( 1 ) ;
38773: LD_INT 1
38775: PPUSH
38776: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38780: LD_VAR 0 1
38784: PPUSH
38785: CALL_OW 316
38789: PUSH
38790: LD_VAR 0 1
38794: PPUSH
38795: CALL_OW 314
38799: OR
38800: PUSH
38801: LD_VAR 0 1
38805: PPUSH
38806: CALL_OW 302
38810: NOT
38811: OR
38812: PUSH
38813: LD_VAR 0 1
38817: PPUSH
38818: CALL_OW 301
38822: OR
38823: IFFALSE 38773
// RemoveSeeing ( _x , _y , side ) ;
38825: LD_VAR 0 8
38829: PPUSH
38830: LD_VAR 0 9
38834: PPUSH
38835: LD_VAR 0 6
38839: PPUSH
38840: CALL_OW 331
// end ; end_of_file
38844: LD_VAR 0 4
38848: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38849: LD_INT 0
38851: PPUSH
38852: PPUSH
// if exist_mode then
38853: LD_VAR 0 2
38857: IFFALSE 38882
// unit := CreateCharacter ( prefix & ident ) else
38859: LD_ADDR_VAR 0 5
38863: PUSH
38864: LD_VAR 0 3
38868: PUSH
38869: LD_VAR 0 1
38873: STR
38874: PPUSH
38875: CALL_OW 34
38879: ST_TO_ADDR
38880: GO 38897
// unit := NewCharacter ( ident ) ;
38882: LD_ADDR_VAR 0 5
38886: PUSH
38887: LD_VAR 0 1
38891: PPUSH
38892: CALL_OW 25
38896: ST_TO_ADDR
// result := unit ;
38897: LD_ADDR_VAR 0 4
38901: PUSH
38902: LD_VAR 0 5
38906: ST_TO_ADDR
// end ;
38907: LD_VAR 0 4
38911: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38912: LD_INT 0
38914: PPUSH
38915: PPUSH
// if not side or not nation then
38916: LD_VAR 0 1
38920: NOT
38921: PUSH
38922: LD_VAR 0 2
38926: NOT
38927: OR
38928: IFFALSE 38932
// exit ;
38930: GO 39700
// case nation of nation_american :
38932: LD_VAR 0 2
38936: PUSH
38937: LD_INT 1
38939: DOUBLE
38940: EQUAL
38941: IFTRUE 38945
38943: GO 39159
38945: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38946: LD_ADDR_VAR 0 4
38950: PUSH
38951: LD_INT 35
38953: PUSH
38954: LD_INT 45
38956: PUSH
38957: LD_INT 46
38959: PUSH
38960: LD_INT 47
38962: PUSH
38963: LD_INT 82
38965: PUSH
38966: LD_INT 83
38968: PUSH
38969: LD_INT 84
38971: PUSH
38972: LD_INT 85
38974: PUSH
38975: LD_INT 86
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: LD_INT 2
38983: PUSH
38984: LD_INT 6
38986: PUSH
38987: LD_INT 15
38989: PUSH
38990: LD_INT 16
38992: PUSH
38993: LD_INT 7
38995: PUSH
38996: LD_INT 12
38998: PUSH
38999: LD_INT 13
39001: PUSH
39002: LD_INT 10
39004: PUSH
39005: LD_INT 14
39007: PUSH
39008: LD_INT 20
39010: PUSH
39011: LD_INT 21
39013: PUSH
39014: LD_INT 22
39016: PUSH
39017: LD_INT 25
39019: PUSH
39020: LD_INT 32
39022: PUSH
39023: LD_INT 27
39025: PUSH
39026: LD_INT 36
39028: PUSH
39029: LD_INT 69
39031: PUSH
39032: LD_INT 39
39034: PUSH
39035: LD_INT 34
39037: PUSH
39038: LD_INT 40
39040: PUSH
39041: LD_INT 48
39043: PUSH
39044: LD_INT 49
39046: PUSH
39047: LD_INT 50
39049: PUSH
39050: LD_INT 51
39052: PUSH
39053: LD_INT 52
39055: PUSH
39056: LD_INT 53
39058: PUSH
39059: LD_INT 54
39061: PUSH
39062: LD_INT 55
39064: PUSH
39065: LD_INT 56
39067: PUSH
39068: LD_INT 57
39070: PUSH
39071: LD_INT 58
39073: PUSH
39074: LD_INT 59
39076: PUSH
39077: LD_INT 60
39079: PUSH
39080: LD_INT 61
39082: PUSH
39083: LD_INT 62
39085: PUSH
39086: LD_INT 80
39088: PUSH
39089: LD_INT 82
39091: PUSH
39092: LD_INT 83
39094: PUSH
39095: LD_INT 84
39097: PUSH
39098: LD_INT 85
39100: PUSH
39101: LD_INT 86
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: ST_TO_ADDR
39157: GO 39624
39159: LD_INT 2
39161: DOUBLE
39162: EQUAL
39163: IFTRUE 39167
39165: GO 39393
39167: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39168: LD_ADDR_VAR 0 4
39172: PUSH
39173: LD_INT 35
39175: PUSH
39176: LD_INT 45
39178: PUSH
39179: LD_INT 46
39181: PUSH
39182: LD_INT 47
39184: PUSH
39185: LD_INT 82
39187: PUSH
39188: LD_INT 83
39190: PUSH
39191: LD_INT 84
39193: PUSH
39194: LD_INT 85
39196: PUSH
39197: LD_INT 87
39199: PUSH
39200: LD_INT 70
39202: PUSH
39203: LD_INT 1
39205: PUSH
39206: LD_INT 11
39208: PUSH
39209: LD_INT 3
39211: PUSH
39212: LD_INT 4
39214: PUSH
39215: LD_INT 5
39217: PUSH
39218: LD_INT 6
39220: PUSH
39221: LD_INT 15
39223: PUSH
39224: LD_INT 18
39226: PUSH
39227: LD_INT 7
39229: PUSH
39230: LD_INT 17
39232: PUSH
39233: LD_INT 8
39235: PUSH
39236: LD_INT 20
39238: PUSH
39239: LD_INT 21
39241: PUSH
39242: LD_INT 22
39244: PUSH
39245: LD_INT 72
39247: PUSH
39248: LD_INT 26
39250: PUSH
39251: LD_INT 69
39253: PUSH
39254: LD_INT 39
39256: PUSH
39257: LD_INT 40
39259: PUSH
39260: LD_INT 41
39262: PUSH
39263: LD_INT 42
39265: PUSH
39266: LD_INT 43
39268: PUSH
39269: LD_INT 48
39271: PUSH
39272: LD_INT 49
39274: PUSH
39275: LD_INT 50
39277: PUSH
39278: LD_INT 51
39280: PUSH
39281: LD_INT 52
39283: PUSH
39284: LD_INT 53
39286: PUSH
39287: LD_INT 54
39289: PUSH
39290: LD_INT 55
39292: PUSH
39293: LD_INT 56
39295: PUSH
39296: LD_INT 60
39298: PUSH
39299: LD_INT 61
39301: PUSH
39302: LD_INT 62
39304: PUSH
39305: LD_INT 66
39307: PUSH
39308: LD_INT 67
39310: PUSH
39311: LD_INT 68
39313: PUSH
39314: LD_INT 81
39316: PUSH
39317: LD_INT 82
39319: PUSH
39320: LD_INT 83
39322: PUSH
39323: LD_INT 84
39325: PUSH
39326: LD_INT 85
39328: PUSH
39329: LD_INT 87
39331: PUSH
39332: LD_INT 88
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: ST_TO_ADDR
39391: GO 39624
39393: LD_INT 3
39395: DOUBLE
39396: EQUAL
39397: IFTRUE 39401
39399: GO 39623
39401: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39402: LD_ADDR_VAR 0 4
39406: PUSH
39407: LD_INT 46
39409: PUSH
39410: LD_INT 47
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 2
39418: PUSH
39419: LD_INT 82
39421: PUSH
39422: LD_INT 83
39424: PUSH
39425: LD_INT 84
39427: PUSH
39428: LD_INT 85
39430: PUSH
39431: LD_INT 86
39433: PUSH
39434: LD_INT 11
39436: PUSH
39437: LD_INT 9
39439: PUSH
39440: LD_INT 20
39442: PUSH
39443: LD_INT 19
39445: PUSH
39446: LD_INT 21
39448: PUSH
39449: LD_INT 24
39451: PUSH
39452: LD_INT 22
39454: PUSH
39455: LD_INT 25
39457: PUSH
39458: LD_INT 28
39460: PUSH
39461: LD_INT 29
39463: PUSH
39464: LD_INT 30
39466: PUSH
39467: LD_INT 31
39469: PUSH
39470: LD_INT 37
39472: PUSH
39473: LD_INT 38
39475: PUSH
39476: LD_INT 32
39478: PUSH
39479: LD_INT 27
39481: PUSH
39482: LD_INT 33
39484: PUSH
39485: LD_INT 69
39487: PUSH
39488: LD_INT 39
39490: PUSH
39491: LD_INT 34
39493: PUSH
39494: LD_INT 40
39496: PUSH
39497: LD_INT 71
39499: PUSH
39500: LD_INT 23
39502: PUSH
39503: LD_INT 44
39505: PUSH
39506: LD_INT 48
39508: PUSH
39509: LD_INT 49
39511: PUSH
39512: LD_INT 50
39514: PUSH
39515: LD_INT 51
39517: PUSH
39518: LD_INT 52
39520: PUSH
39521: LD_INT 53
39523: PUSH
39524: LD_INT 54
39526: PUSH
39527: LD_INT 55
39529: PUSH
39530: LD_INT 56
39532: PUSH
39533: LD_INT 57
39535: PUSH
39536: LD_INT 58
39538: PUSH
39539: LD_INT 59
39541: PUSH
39542: LD_INT 63
39544: PUSH
39545: LD_INT 64
39547: PUSH
39548: LD_INT 65
39550: PUSH
39551: LD_INT 82
39553: PUSH
39554: LD_INT 83
39556: PUSH
39557: LD_INT 84
39559: PUSH
39560: LD_INT 85
39562: PUSH
39563: LD_INT 86
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: LIST
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: ST_TO_ADDR
39621: GO 39624
39623: POP
// if state > - 1 and state < 3 then
39624: LD_VAR 0 3
39628: PUSH
39629: LD_INT 1
39631: NEG
39632: GREATER
39633: PUSH
39634: LD_VAR 0 3
39638: PUSH
39639: LD_INT 3
39641: LESS
39642: AND
39643: IFFALSE 39700
// for i in result do
39645: LD_ADDR_VAR 0 5
39649: PUSH
39650: LD_VAR 0 4
39654: PUSH
39655: FOR_IN
39656: IFFALSE 39698
// if GetTech ( i , side ) <> state then
39658: LD_VAR 0 5
39662: PPUSH
39663: LD_VAR 0 1
39667: PPUSH
39668: CALL_OW 321
39672: PUSH
39673: LD_VAR 0 3
39677: NONEQUAL
39678: IFFALSE 39696
// result := result diff i ;
39680: LD_ADDR_VAR 0 4
39684: PUSH
39685: LD_VAR 0 4
39689: PUSH
39690: LD_VAR 0 5
39694: DIFF
39695: ST_TO_ADDR
39696: GO 39655
39698: POP
39699: POP
// end ;
39700: LD_VAR 0 4
39704: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39705: LD_INT 0
39707: PPUSH
39708: PPUSH
39709: PPUSH
// result := true ;
39710: LD_ADDR_VAR 0 3
39714: PUSH
39715: LD_INT 1
39717: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39718: LD_ADDR_VAR 0 5
39722: PUSH
39723: LD_VAR 0 2
39727: PPUSH
39728: CALL_OW 480
39732: ST_TO_ADDR
// if not tmp then
39733: LD_VAR 0 5
39737: NOT
39738: IFFALSE 39742
// exit ;
39740: GO 39791
// for i in tmp do
39742: LD_ADDR_VAR 0 4
39746: PUSH
39747: LD_VAR 0 5
39751: PUSH
39752: FOR_IN
39753: IFFALSE 39789
// if GetTech ( i , side ) <> state_researched then
39755: LD_VAR 0 4
39759: PPUSH
39760: LD_VAR 0 1
39764: PPUSH
39765: CALL_OW 321
39769: PUSH
39770: LD_INT 2
39772: NONEQUAL
39773: IFFALSE 39787
// begin result := false ;
39775: LD_ADDR_VAR 0 3
39779: PUSH
39780: LD_INT 0
39782: ST_TO_ADDR
// exit ;
39783: POP
39784: POP
39785: GO 39791
// end ;
39787: GO 39752
39789: POP
39790: POP
// end ;
39791: LD_VAR 0 3
39795: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39796: LD_INT 0
39798: PPUSH
39799: PPUSH
39800: PPUSH
39801: PPUSH
39802: PPUSH
39803: PPUSH
39804: PPUSH
39805: PPUSH
39806: PPUSH
39807: PPUSH
39808: PPUSH
39809: PPUSH
39810: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39811: LD_VAR 0 1
39815: NOT
39816: PUSH
39817: LD_VAR 0 1
39821: PPUSH
39822: CALL_OW 257
39826: PUSH
39827: LD_INT 9
39829: NONEQUAL
39830: OR
39831: IFFALSE 39835
// exit ;
39833: GO 40408
// side := GetSide ( unit ) ;
39835: LD_ADDR_VAR 0 9
39839: PUSH
39840: LD_VAR 0 1
39844: PPUSH
39845: CALL_OW 255
39849: ST_TO_ADDR
// tech_space := tech_spacanom ;
39850: LD_ADDR_VAR 0 12
39854: PUSH
39855: LD_INT 29
39857: ST_TO_ADDR
// tech_time := tech_taurad ;
39858: LD_ADDR_VAR 0 13
39862: PUSH
39863: LD_INT 28
39865: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39866: LD_ADDR_VAR 0 11
39870: PUSH
39871: LD_VAR 0 1
39875: PPUSH
39876: CALL_OW 310
39880: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39881: LD_VAR 0 11
39885: PPUSH
39886: CALL_OW 247
39890: PUSH
39891: LD_INT 2
39893: EQUAL
39894: IFFALSE 39898
// exit ;
39896: GO 40408
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39898: LD_ADDR_VAR 0 8
39902: PUSH
39903: LD_INT 81
39905: PUSH
39906: LD_VAR 0 9
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 3
39917: PUSH
39918: LD_INT 21
39920: PUSH
39921: LD_INT 3
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: EMPTY
39933: LIST
39934: LIST
39935: PPUSH
39936: CALL_OW 69
39940: ST_TO_ADDR
// if not tmp then
39941: LD_VAR 0 8
39945: NOT
39946: IFFALSE 39950
// exit ;
39948: GO 40408
// if in_unit then
39950: LD_VAR 0 11
39954: IFFALSE 39978
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39956: LD_ADDR_VAR 0 10
39960: PUSH
39961: LD_VAR 0 8
39965: PPUSH
39966: LD_VAR 0 11
39970: PPUSH
39971: CALL_OW 74
39975: ST_TO_ADDR
39976: GO 39998
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39978: LD_ADDR_VAR 0 10
39982: PUSH
39983: LD_VAR 0 8
39987: PPUSH
39988: LD_VAR 0 1
39992: PPUSH
39993: CALL_OW 74
39997: ST_TO_ADDR
// if not enemy then
39998: LD_VAR 0 10
40002: NOT
40003: IFFALSE 40007
// exit ;
40005: GO 40408
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40007: LD_VAR 0 11
40011: PUSH
40012: LD_VAR 0 11
40016: PPUSH
40017: LD_VAR 0 10
40021: PPUSH
40022: CALL_OW 296
40026: PUSH
40027: LD_INT 13
40029: GREATER
40030: AND
40031: PUSH
40032: LD_VAR 0 1
40036: PPUSH
40037: LD_VAR 0 10
40041: PPUSH
40042: CALL_OW 296
40046: PUSH
40047: LD_INT 12
40049: GREATER
40050: OR
40051: IFFALSE 40055
// exit ;
40053: GO 40408
// missile := [ 1 ] ;
40055: LD_ADDR_VAR 0 14
40059: PUSH
40060: LD_INT 1
40062: PUSH
40063: EMPTY
40064: LIST
40065: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40066: LD_VAR 0 9
40070: PPUSH
40071: LD_VAR 0 12
40075: PPUSH
40076: CALL_OW 325
40080: IFFALSE 40109
// missile := Replace ( missile , missile + 1 , 2 ) ;
40082: LD_ADDR_VAR 0 14
40086: PUSH
40087: LD_VAR 0 14
40091: PPUSH
40092: LD_VAR 0 14
40096: PUSH
40097: LD_INT 1
40099: PLUS
40100: PPUSH
40101: LD_INT 2
40103: PPUSH
40104: CALL_OW 1
40108: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40109: LD_VAR 0 9
40113: PPUSH
40114: LD_VAR 0 13
40118: PPUSH
40119: CALL_OW 325
40123: PUSH
40124: LD_VAR 0 10
40128: PPUSH
40129: CALL_OW 255
40133: PPUSH
40134: LD_VAR 0 13
40138: PPUSH
40139: CALL_OW 325
40143: NOT
40144: AND
40145: IFFALSE 40174
// missile := Replace ( missile , missile + 1 , 3 ) ;
40147: LD_ADDR_VAR 0 14
40151: PUSH
40152: LD_VAR 0 14
40156: PPUSH
40157: LD_VAR 0 14
40161: PUSH
40162: LD_INT 1
40164: PLUS
40165: PPUSH
40166: LD_INT 3
40168: PPUSH
40169: CALL_OW 1
40173: ST_TO_ADDR
// if missile < 2 then
40174: LD_VAR 0 14
40178: PUSH
40179: LD_INT 2
40181: LESS
40182: IFFALSE 40186
// exit ;
40184: GO 40408
// x := GetX ( enemy ) ;
40186: LD_ADDR_VAR 0 4
40190: PUSH
40191: LD_VAR 0 10
40195: PPUSH
40196: CALL_OW 250
40200: ST_TO_ADDR
// y := GetY ( enemy ) ;
40201: LD_ADDR_VAR 0 5
40205: PUSH
40206: LD_VAR 0 10
40210: PPUSH
40211: CALL_OW 251
40215: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40216: LD_ADDR_VAR 0 6
40220: PUSH
40221: LD_VAR 0 4
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PPUSH
40230: LD_INT 1
40232: PPUSH
40233: CALL_OW 12
40237: PLUS
40238: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40239: LD_ADDR_VAR 0 7
40243: PUSH
40244: LD_VAR 0 5
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PPUSH
40253: LD_INT 1
40255: PPUSH
40256: CALL_OW 12
40260: PLUS
40261: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40262: LD_VAR 0 6
40266: PPUSH
40267: LD_VAR 0 7
40271: PPUSH
40272: CALL_OW 488
40276: NOT
40277: IFFALSE 40299
// begin _x := x ;
40279: LD_ADDR_VAR 0 6
40283: PUSH
40284: LD_VAR 0 4
40288: ST_TO_ADDR
// _y := y ;
40289: LD_ADDR_VAR 0 7
40293: PUSH
40294: LD_VAR 0 5
40298: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40299: LD_ADDR_VAR 0 3
40303: PUSH
40304: LD_INT 1
40306: PPUSH
40307: LD_VAR 0 14
40311: PPUSH
40312: CALL_OW 12
40316: ST_TO_ADDR
// case i of 1 :
40317: LD_VAR 0 3
40321: PUSH
40322: LD_INT 1
40324: DOUBLE
40325: EQUAL
40326: IFTRUE 40330
40328: GO 40347
40330: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40331: LD_VAR 0 1
40335: PPUSH
40336: LD_VAR 0 10
40340: PPUSH
40341: CALL_OW 115
40345: GO 40408
40347: LD_INT 2
40349: DOUBLE
40350: EQUAL
40351: IFTRUE 40355
40353: GO 40377
40355: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40356: LD_VAR 0 1
40360: PPUSH
40361: LD_VAR 0 6
40365: PPUSH
40366: LD_VAR 0 7
40370: PPUSH
40371: CALL_OW 153
40375: GO 40408
40377: LD_INT 3
40379: DOUBLE
40380: EQUAL
40381: IFTRUE 40385
40383: GO 40407
40385: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40386: LD_VAR 0 1
40390: PPUSH
40391: LD_VAR 0 6
40395: PPUSH
40396: LD_VAR 0 7
40400: PPUSH
40401: CALL_OW 154
40405: GO 40408
40407: POP
// end ;
40408: LD_VAR 0 2
40412: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40413: LD_INT 0
40415: PPUSH
40416: PPUSH
40417: PPUSH
40418: PPUSH
40419: PPUSH
40420: PPUSH
// if not unit or not building then
40421: LD_VAR 0 1
40425: NOT
40426: PUSH
40427: LD_VAR 0 2
40431: NOT
40432: OR
40433: IFFALSE 40437
// exit ;
40435: GO 40595
// x := GetX ( building ) ;
40437: LD_ADDR_VAR 0 5
40441: PUSH
40442: LD_VAR 0 2
40446: PPUSH
40447: CALL_OW 250
40451: ST_TO_ADDR
// y := GetY ( building ) ;
40452: LD_ADDR_VAR 0 6
40456: PUSH
40457: LD_VAR 0 2
40461: PPUSH
40462: CALL_OW 251
40466: ST_TO_ADDR
// for i = 0 to 5 do
40467: LD_ADDR_VAR 0 4
40471: PUSH
40472: DOUBLE
40473: LD_INT 0
40475: DEC
40476: ST_TO_ADDR
40477: LD_INT 5
40479: PUSH
40480: FOR_TO
40481: IFFALSE 40593
// begin _x := ShiftX ( x , i , 3 ) ;
40483: LD_ADDR_VAR 0 7
40487: PUSH
40488: LD_VAR 0 5
40492: PPUSH
40493: LD_VAR 0 4
40497: PPUSH
40498: LD_INT 3
40500: PPUSH
40501: CALL_OW 272
40505: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40506: LD_ADDR_VAR 0 8
40510: PUSH
40511: LD_VAR 0 6
40515: PPUSH
40516: LD_VAR 0 4
40520: PPUSH
40521: LD_INT 3
40523: PPUSH
40524: CALL_OW 273
40528: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40529: LD_VAR 0 7
40533: PPUSH
40534: LD_VAR 0 8
40538: PPUSH
40539: CALL_OW 488
40543: NOT
40544: IFFALSE 40548
// continue ;
40546: GO 40480
// if HexInfo ( _x , _y ) = 0 then
40548: LD_VAR 0 7
40552: PPUSH
40553: LD_VAR 0 8
40557: PPUSH
40558: CALL_OW 428
40562: PUSH
40563: LD_INT 0
40565: EQUAL
40566: IFFALSE 40591
// begin ComMoveXY ( unit , _x , _y ) ;
40568: LD_VAR 0 1
40572: PPUSH
40573: LD_VAR 0 7
40577: PPUSH
40578: LD_VAR 0 8
40582: PPUSH
40583: CALL_OW 111
// exit ;
40587: POP
40588: POP
40589: GO 40595
// end ; end ;
40591: GO 40480
40593: POP
40594: POP
// end ;
40595: LD_VAR 0 3
40599: RET
// export function ScanBase ( side , base_area ) ; begin
40600: LD_INT 0
40602: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40603: LD_ADDR_VAR 0 3
40607: PUSH
40608: LD_VAR 0 2
40612: PPUSH
40613: LD_INT 81
40615: PUSH
40616: LD_VAR 0 1
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PPUSH
40625: CALL_OW 70
40629: ST_TO_ADDR
// end ;
40630: LD_VAR 0 3
40634: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40635: LD_INT 0
40637: PPUSH
40638: PPUSH
40639: PPUSH
40640: PPUSH
// result := false ;
40641: LD_ADDR_VAR 0 2
40645: PUSH
40646: LD_INT 0
40648: ST_TO_ADDR
// side := GetSide ( unit ) ;
40649: LD_ADDR_VAR 0 3
40653: PUSH
40654: LD_VAR 0 1
40658: PPUSH
40659: CALL_OW 255
40663: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40664: LD_ADDR_VAR 0 4
40668: PUSH
40669: LD_VAR 0 1
40673: PPUSH
40674: CALL_OW 248
40678: ST_TO_ADDR
// case nat of 1 :
40679: LD_VAR 0 4
40683: PUSH
40684: LD_INT 1
40686: DOUBLE
40687: EQUAL
40688: IFTRUE 40692
40690: GO 40703
40692: POP
// tech := tech_lassight ; 2 :
40693: LD_ADDR_VAR 0 5
40697: PUSH
40698: LD_INT 12
40700: ST_TO_ADDR
40701: GO 40742
40703: LD_INT 2
40705: DOUBLE
40706: EQUAL
40707: IFTRUE 40711
40709: GO 40722
40711: POP
// tech := tech_mortar ; 3 :
40712: LD_ADDR_VAR 0 5
40716: PUSH
40717: LD_INT 41
40719: ST_TO_ADDR
40720: GO 40742
40722: LD_INT 3
40724: DOUBLE
40725: EQUAL
40726: IFTRUE 40730
40728: GO 40741
40730: POP
// tech := tech_bazooka ; end ;
40731: LD_ADDR_VAR 0 5
40735: PUSH
40736: LD_INT 44
40738: ST_TO_ADDR
40739: GO 40742
40741: POP
// if Researched ( side , tech ) then
40742: LD_VAR 0 3
40746: PPUSH
40747: LD_VAR 0 5
40751: PPUSH
40752: CALL_OW 325
40756: IFFALSE 40783
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40758: LD_ADDR_VAR 0 2
40762: PUSH
40763: LD_INT 5
40765: PUSH
40766: LD_INT 8
40768: PUSH
40769: LD_INT 9
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: LIST
40776: PUSH
40777: LD_VAR 0 4
40781: ARRAY
40782: ST_TO_ADDR
// end ;
40783: LD_VAR 0 2
40787: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40788: LD_INT 0
40790: PPUSH
40791: PPUSH
40792: PPUSH
// if not mines then
40793: LD_VAR 0 2
40797: NOT
40798: IFFALSE 40802
// exit ;
40800: GO 40946
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40802: LD_ADDR_VAR 0 5
40806: PUSH
40807: LD_INT 81
40809: PUSH
40810: LD_VAR 0 1
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 3
40821: PUSH
40822: LD_INT 21
40824: PUSH
40825: LD_INT 3
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PPUSH
40840: CALL_OW 69
40844: ST_TO_ADDR
// for i in mines do
40845: LD_ADDR_VAR 0 4
40849: PUSH
40850: LD_VAR 0 2
40854: PUSH
40855: FOR_IN
40856: IFFALSE 40944
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40858: LD_VAR 0 4
40862: PUSH
40863: LD_INT 1
40865: ARRAY
40866: PPUSH
40867: LD_VAR 0 4
40871: PUSH
40872: LD_INT 2
40874: ARRAY
40875: PPUSH
40876: CALL_OW 458
40880: NOT
40881: IFFALSE 40885
// continue ;
40883: GO 40855
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40885: LD_VAR 0 4
40889: PUSH
40890: LD_INT 1
40892: ARRAY
40893: PPUSH
40894: LD_VAR 0 4
40898: PUSH
40899: LD_INT 2
40901: ARRAY
40902: PPUSH
40903: CALL_OW 428
40907: PUSH
40908: LD_VAR 0 5
40912: IN
40913: IFFALSE 40942
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40915: LD_VAR 0 4
40919: PUSH
40920: LD_INT 1
40922: ARRAY
40923: PPUSH
40924: LD_VAR 0 4
40928: PUSH
40929: LD_INT 2
40931: ARRAY
40932: PPUSH
40933: LD_VAR 0 1
40937: PPUSH
40938: CALL_OW 456
// end ;
40942: GO 40855
40944: POP
40945: POP
// end ;
40946: LD_VAR 0 3
40950: RET
// export function Count ( array ) ; var i ; begin
40951: LD_INT 0
40953: PPUSH
40954: PPUSH
// result := 0 ;
40955: LD_ADDR_VAR 0 2
40959: PUSH
40960: LD_INT 0
40962: ST_TO_ADDR
// for i in array do
40963: LD_ADDR_VAR 0 3
40967: PUSH
40968: LD_VAR 0 1
40972: PUSH
40973: FOR_IN
40974: IFFALSE 40998
// if i then
40976: LD_VAR 0 3
40980: IFFALSE 40996
// result := result + 1 ;
40982: LD_ADDR_VAR 0 2
40986: PUSH
40987: LD_VAR 0 2
40991: PUSH
40992: LD_INT 1
40994: PLUS
40995: ST_TO_ADDR
40996: GO 40973
40998: POP
40999: POP
// end ;
41000: LD_VAR 0 2
41004: RET
// export function IsEmpty ( building ) ; begin
41005: LD_INT 0
41007: PPUSH
// if not building then
41008: LD_VAR 0 1
41012: NOT
41013: IFFALSE 41017
// exit ;
41015: GO 41060
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41017: LD_ADDR_VAR 0 2
41021: PUSH
41022: LD_VAR 0 1
41026: PUSH
41027: LD_INT 22
41029: PUSH
41030: LD_VAR 0 1
41034: PPUSH
41035: CALL_OW 255
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 58
41046: PUSH
41047: EMPTY
41048: LIST
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PPUSH
41054: CALL_OW 69
41058: IN
41059: ST_TO_ADDR
// end ;
41060: LD_VAR 0 2
41064: RET
// export function IsNotFull ( building ) ; var places ; begin
41065: LD_INT 0
41067: PPUSH
41068: PPUSH
// if not building then
41069: LD_VAR 0 1
41073: NOT
41074: IFFALSE 41078
// exit ;
41076: GO 41249
// result := false ;
41078: LD_ADDR_VAR 0 2
41082: PUSH
41083: LD_INT 0
41085: ST_TO_ADDR
// places := 0 ;
41086: LD_ADDR_VAR 0 3
41090: PUSH
41091: LD_INT 0
41093: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41094: LD_VAR 0 1
41098: PPUSH
41099: CALL_OW 266
41103: PUSH
41104: LD_INT 0
41106: DOUBLE
41107: EQUAL
41108: IFTRUE 41166
41110: LD_INT 1
41112: DOUBLE
41113: EQUAL
41114: IFTRUE 41166
41116: LD_INT 6
41118: DOUBLE
41119: EQUAL
41120: IFTRUE 41166
41122: LD_INT 7
41124: DOUBLE
41125: EQUAL
41126: IFTRUE 41166
41128: LD_INT 8
41130: DOUBLE
41131: EQUAL
41132: IFTRUE 41166
41134: LD_INT 4
41136: DOUBLE
41137: EQUAL
41138: IFTRUE 41166
41140: LD_INT 5
41142: DOUBLE
41143: EQUAL
41144: IFTRUE 41166
41146: LD_INT 2
41148: DOUBLE
41149: EQUAL
41150: IFTRUE 41166
41152: LD_INT 3
41154: DOUBLE
41155: EQUAL
41156: IFTRUE 41166
41158: LD_INT 35
41160: DOUBLE
41161: EQUAL
41162: IFTRUE 41166
41164: GO 41177
41166: POP
// places := 6 ; b_bunker , b_breastwork :
41167: LD_ADDR_VAR 0 3
41171: PUSH
41172: LD_INT 6
41174: ST_TO_ADDR
41175: GO 41222
41177: LD_INT 32
41179: DOUBLE
41180: EQUAL
41181: IFTRUE 41191
41183: LD_INT 31
41185: DOUBLE
41186: EQUAL
41187: IFTRUE 41191
41189: GO 41202
41191: POP
// places := 1 ; b_control_tower :
41192: LD_ADDR_VAR 0 3
41196: PUSH
41197: LD_INT 1
41199: ST_TO_ADDR
41200: GO 41222
41202: LD_INT 36
41204: DOUBLE
41205: EQUAL
41206: IFTRUE 41210
41208: GO 41221
41210: POP
// places := 3 ; end ;
41211: LD_ADDR_VAR 0 3
41215: PUSH
41216: LD_INT 3
41218: ST_TO_ADDR
41219: GO 41222
41221: POP
// if places then
41222: LD_VAR 0 3
41226: IFFALSE 41249
// result := UnitsInside ( building ) < places ;
41228: LD_ADDR_VAR 0 2
41232: PUSH
41233: LD_VAR 0 1
41237: PPUSH
41238: CALL_OW 313
41242: PUSH
41243: LD_VAR 0 3
41247: LESS
41248: ST_TO_ADDR
// end ;
41249: LD_VAR 0 2
41253: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41254: LD_INT 0
41256: PPUSH
41257: PPUSH
41258: PPUSH
41259: PPUSH
// tmp := [ ] ;
41260: LD_ADDR_VAR 0 3
41264: PUSH
41265: EMPTY
41266: ST_TO_ADDR
// list := [ ] ;
41267: LD_ADDR_VAR 0 5
41271: PUSH
41272: EMPTY
41273: ST_TO_ADDR
// for i = 16 to 25 do
41274: LD_ADDR_VAR 0 4
41278: PUSH
41279: DOUBLE
41280: LD_INT 16
41282: DEC
41283: ST_TO_ADDR
41284: LD_INT 25
41286: PUSH
41287: FOR_TO
41288: IFFALSE 41361
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41290: LD_ADDR_VAR 0 3
41294: PUSH
41295: LD_VAR 0 3
41299: PUSH
41300: LD_INT 22
41302: PUSH
41303: LD_VAR 0 1
41307: PPUSH
41308: CALL_OW 255
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 91
41319: PUSH
41320: LD_VAR 0 1
41324: PUSH
41325: LD_INT 6
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 30
41335: PUSH
41336: LD_VAR 0 4
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: LIST
41349: PUSH
41350: EMPTY
41351: LIST
41352: PPUSH
41353: CALL_OW 69
41357: ADD
41358: ST_TO_ADDR
41359: GO 41287
41361: POP
41362: POP
// for i = 1 to tmp do
41363: LD_ADDR_VAR 0 4
41367: PUSH
41368: DOUBLE
41369: LD_INT 1
41371: DEC
41372: ST_TO_ADDR
41373: LD_VAR 0 3
41377: PUSH
41378: FOR_TO
41379: IFFALSE 41467
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41381: LD_ADDR_VAR 0 5
41385: PUSH
41386: LD_VAR 0 5
41390: PUSH
41391: LD_VAR 0 3
41395: PUSH
41396: LD_VAR 0 4
41400: ARRAY
41401: PPUSH
41402: CALL_OW 266
41406: PUSH
41407: LD_VAR 0 3
41411: PUSH
41412: LD_VAR 0 4
41416: ARRAY
41417: PPUSH
41418: CALL_OW 250
41422: PUSH
41423: LD_VAR 0 3
41427: PUSH
41428: LD_VAR 0 4
41432: ARRAY
41433: PPUSH
41434: CALL_OW 251
41438: PUSH
41439: LD_VAR 0 3
41443: PUSH
41444: LD_VAR 0 4
41448: ARRAY
41449: PPUSH
41450: CALL_OW 254
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: PUSH
41461: EMPTY
41462: LIST
41463: ADD
41464: ST_TO_ADDR
41465: GO 41378
41467: POP
41468: POP
// result := list ;
41469: LD_ADDR_VAR 0 2
41473: PUSH
41474: LD_VAR 0 5
41478: ST_TO_ADDR
// end ;
41479: LD_VAR 0 2
41483: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41484: LD_INT 0
41486: PPUSH
41487: PPUSH
41488: PPUSH
41489: PPUSH
41490: PPUSH
41491: PPUSH
41492: PPUSH
// if not factory then
41493: LD_VAR 0 1
41497: NOT
41498: IFFALSE 41502
// exit ;
41500: GO 42095
// if control = control_apeman then
41502: LD_VAR 0 4
41506: PUSH
41507: LD_INT 5
41509: EQUAL
41510: IFFALSE 41619
// begin tmp := UnitsInside ( factory ) ;
41512: LD_ADDR_VAR 0 8
41516: PUSH
41517: LD_VAR 0 1
41521: PPUSH
41522: CALL_OW 313
41526: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41527: LD_VAR 0 8
41531: PPUSH
41532: LD_INT 25
41534: PUSH
41535: LD_INT 12
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PPUSH
41542: CALL_OW 72
41546: NOT
41547: IFFALSE 41557
// control := control_manual ;
41549: LD_ADDR_VAR 0 4
41553: PUSH
41554: LD_INT 1
41556: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41557: LD_ADDR_VAR 0 8
41561: PUSH
41562: LD_VAR 0 1
41566: PPUSH
41567: CALL 41254 0 1
41571: ST_TO_ADDR
// if tmp then
41572: LD_VAR 0 8
41576: IFFALSE 41619
// begin for i in tmp do
41578: LD_ADDR_VAR 0 7
41582: PUSH
41583: LD_VAR 0 8
41587: PUSH
41588: FOR_IN
41589: IFFALSE 41617
// if i [ 1 ] = b_ext_radio then
41591: LD_VAR 0 7
41595: PUSH
41596: LD_INT 1
41598: ARRAY
41599: PUSH
41600: LD_INT 22
41602: EQUAL
41603: IFFALSE 41615
// begin control := control_remote ;
41605: LD_ADDR_VAR 0 4
41609: PUSH
41610: LD_INT 2
41612: ST_TO_ADDR
// break ;
41613: GO 41617
// end ;
41615: GO 41588
41617: POP
41618: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41619: LD_VAR 0 1
41623: PPUSH
41624: LD_VAR 0 2
41628: PPUSH
41629: LD_VAR 0 3
41633: PPUSH
41634: LD_VAR 0 4
41638: PPUSH
41639: LD_VAR 0 5
41643: PPUSH
41644: CALL_OW 448
41648: IFFALSE 41683
// begin result := [ chassis , engine , control , weapon ] ;
41650: LD_ADDR_VAR 0 6
41654: PUSH
41655: LD_VAR 0 2
41659: PUSH
41660: LD_VAR 0 3
41664: PUSH
41665: LD_VAR 0 4
41669: PUSH
41670: LD_VAR 0 5
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: ST_TO_ADDR
// exit ;
41681: GO 42095
// end ; _chassis := AvailableChassisList ( factory ) ;
41683: LD_ADDR_VAR 0 9
41687: PUSH
41688: LD_VAR 0 1
41692: PPUSH
41693: CALL_OW 475
41697: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41698: LD_ADDR_VAR 0 11
41702: PUSH
41703: LD_VAR 0 1
41707: PPUSH
41708: CALL_OW 476
41712: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41713: LD_ADDR_VAR 0 12
41717: PUSH
41718: LD_VAR 0 1
41722: PPUSH
41723: CALL_OW 477
41727: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41728: LD_ADDR_VAR 0 10
41732: PUSH
41733: LD_VAR 0 1
41737: PPUSH
41738: CALL_OW 478
41742: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41743: LD_VAR 0 9
41747: NOT
41748: PUSH
41749: LD_VAR 0 11
41753: NOT
41754: OR
41755: PUSH
41756: LD_VAR 0 12
41760: NOT
41761: OR
41762: PUSH
41763: LD_VAR 0 10
41767: NOT
41768: OR
41769: IFFALSE 41804
// begin result := [ chassis , engine , control , weapon ] ;
41771: LD_ADDR_VAR 0 6
41775: PUSH
41776: LD_VAR 0 2
41780: PUSH
41781: LD_VAR 0 3
41785: PUSH
41786: LD_VAR 0 4
41790: PUSH
41791: LD_VAR 0 5
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: ST_TO_ADDR
// exit ;
41802: GO 42095
// end ; if not chassis in _chassis then
41804: LD_VAR 0 2
41808: PUSH
41809: LD_VAR 0 9
41813: IN
41814: NOT
41815: IFFALSE 41841
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41817: LD_ADDR_VAR 0 2
41821: PUSH
41822: LD_VAR 0 9
41826: PUSH
41827: LD_INT 1
41829: PPUSH
41830: LD_VAR 0 9
41834: PPUSH
41835: CALL_OW 12
41839: ARRAY
41840: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41841: LD_VAR 0 2
41845: PPUSH
41846: LD_VAR 0 3
41850: PPUSH
41851: CALL 42100 0 2
41855: NOT
41856: IFFALSE 41915
// repeat engine := _engine [ 1 ] ;
41858: LD_ADDR_VAR 0 3
41862: PUSH
41863: LD_VAR 0 11
41867: PUSH
41868: LD_INT 1
41870: ARRAY
41871: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41872: LD_ADDR_VAR 0 11
41876: PUSH
41877: LD_VAR 0 11
41881: PPUSH
41882: LD_INT 1
41884: PPUSH
41885: CALL_OW 3
41889: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41890: LD_VAR 0 2
41894: PPUSH
41895: LD_VAR 0 3
41899: PPUSH
41900: CALL 42100 0 2
41904: PUSH
41905: LD_VAR 0 11
41909: PUSH
41910: EMPTY
41911: EQUAL
41912: OR
41913: IFFALSE 41858
// if not control in _control then
41915: LD_VAR 0 4
41919: PUSH
41920: LD_VAR 0 12
41924: IN
41925: NOT
41926: IFFALSE 41952
// control := _control [ rand ( 1 , _control ) ] ;
41928: LD_ADDR_VAR 0 4
41932: PUSH
41933: LD_VAR 0 12
41937: PUSH
41938: LD_INT 1
41940: PPUSH
41941: LD_VAR 0 12
41945: PPUSH
41946: CALL_OW 12
41950: ARRAY
41951: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41952: LD_VAR 0 2
41956: PPUSH
41957: LD_VAR 0 5
41961: PPUSH
41962: CALL 42320 0 2
41966: NOT
41967: IFFALSE 42026
// repeat weapon := _weapon [ 1 ] ;
41969: LD_ADDR_VAR 0 5
41973: PUSH
41974: LD_VAR 0 10
41978: PUSH
41979: LD_INT 1
41981: ARRAY
41982: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41983: LD_ADDR_VAR 0 10
41987: PUSH
41988: LD_VAR 0 10
41992: PPUSH
41993: LD_INT 1
41995: PPUSH
41996: CALL_OW 3
42000: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42001: LD_VAR 0 2
42005: PPUSH
42006: LD_VAR 0 5
42010: PPUSH
42011: CALL 42320 0 2
42015: PUSH
42016: LD_VAR 0 10
42020: PUSH
42021: EMPTY
42022: EQUAL
42023: OR
42024: IFFALSE 41969
// result := [ ] ;
42026: LD_ADDR_VAR 0 6
42030: PUSH
42031: EMPTY
42032: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42033: LD_VAR 0 1
42037: PPUSH
42038: LD_VAR 0 2
42042: PPUSH
42043: LD_VAR 0 3
42047: PPUSH
42048: LD_VAR 0 4
42052: PPUSH
42053: LD_VAR 0 5
42057: PPUSH
42058: CALL_OW 448
42062: IFFALSE 42095
// result := [ chassis , engine , control , weapon ] ;
42064: LD_ADDR_VAR 0 6
42068: PUSH
42069: LD_VAR 0 2
42073: PUSH
42074: LD_VAR 0 3
42078: PUSH
42079: LD_VAR 0 4
42083: PUSH
42084: LD_VAR 0 5
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: ST_TO_ADDR
// end ;
42095: LD_VAR 0 6
42099: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42100: LD_INT 0
42102: PPUSH
// if not chassis or not engine then
42103: LD_VAR 0 1
42107: NOT
42108: PUSH
42109: LD_VAR 0 2
42113: NOT
42114: OR
42115: IFFALSE 42119
// exit ;
42117: GO 42315
// case engine of engine_solar :
42119: LD_VAR 0 2
42123: PUSH
42124: LD_INT 2
42126: DOUBLE
42127: EQUAL
42128: IFTRUE 42132
42130: GO 42170
42132: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42133: LD_ADDR_VAR 0 3
42137: PUSH
42138: LD_INT 11
42140: PUSH
42141: LD_INT 12
42143: PUSH
42144: LD_INT 13
42146: PUSH
42147: LD_INT 14
42149: PUSH
42150: LD_INT 1
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: LD_INT 3
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: ST_TO_ADDR
42168: GO 42299
42170: LD_INT 1
42172: DOUBLE
42173: EQUAL
42174: IFTRUE 42178
42176: GO 42240
42178: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42179: LD_ADDR_VAR 0 3
42183: PUSH
42184: LD_INT 11
42186: PUSH
42187: LD_INT 12
42189: PUSH
42190: LD_INT 13
42192: PUSH
42193: LD_INT 14
42195: PUSH
42196: LD_INT 1
42198: PUSH
42199: LD_INT 2
42201: PUSH
42202: LD_INT 3
42204: PUSH
42205: LD_INT 4
42207: PUSH
42208: LD_INT 5
42210: PUSH
42211: LD_INT 21
42213: PUSH
42214: LD_INT 23
42216: PUSH
42217: LD_INT 22
42219: PUSH
42220: LD_INT 24
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: ST_TO_ADDR
42238: GO 42299
42240: LD_INT 3
42242: DOUBLE
42243: EQUAL
42244: IFTRUE 42248
42246: GO 42298
42248: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42249: LD_ADDR_VAR 0 3
42253: PUSH
42254: LD_INT 13
42256: PUSH
42257: LD_INT 14
42259: PUSH
42260: LD_INT 2
42262: PUSH
42263: LD_INT 3
42265: PUSH
42266: LD_INT 4
42268: PUSH
42269: LD_INT 5
42271: PUSH
42272: LD_INT 21
42274: PUSH
42275: LD_INT 22
42277: PUSH
42278: LD_INT 23
42280: PUSH
42281: LD_INT 24
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: LIST
42291: LIST
42292: LIST
42293: LIST
42294: LIST
42295: ST_TO_ADDR
42296: GO 42299
42298: POP
// result := ( chassis in result ) ;
42299: LD_ADDR_VAR 0 3
42303: PUSH
42304: LD_VAR 0 1
42308: PUSH
42309: LD_VAR 0 3
42313: IN
42314: ST_TO_ADDR
// end ;
42315: LD_VAR 0 3
42319: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42320: LD_INT 0
42322: PPUSH
// if not chassis or not weapon then
42323: LD_VAR 0 1
42327: NOT
42328: PUSH
42329: LD_VAR 0 2
42333: NOT
42334: OR
42335: IFFALSE 42339
// exit ;
42337: GO 43401
// case weapon of us_machine_gun :
42339: LD_VAR 0 2
42343: PUSH
42344: LD_INT 2
42346: DOUBLE
42347: EQUAL
42348: IFTRUE 42352
42350: GO 42382
42352: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42353: LD_ADDR_VAR 0 3
42357: PUSH
42358: LD_INT 1
42360: PUSH
42361: LD_INT 2
42363: PUSH
42364: LD_INT 3
42366: PUSH
42367: LD_INT 4
42369: PUSH
42370: LD_INT 5
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: ST_TO_ADDR
42380: GO 43385
42382: LD_INT 3
42384: DOUBLE
42385: EQUAL
42386: IFTRUE 42390
42388: GO 42420
42390: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42391: LD_ADDR_VAR 0 3
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: LD_INT 3
42404: PUSH
42405: LD_INT 4
42407: PUSH
42408: LD_INT 5
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: ST_TO_ADDR
42418: GO 43385
42420: LD_INT 11
42422: DOUBLE
42423: EQUAL
42424: IFTRUE 42428
42426: GO 42458
42428: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42429: LD_ADDR_VAR 0 3
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: LD_INT 2
42439: PUSH
42440: LD_INT 3
42442: PUSH
42443: LD_INT 4
42445: PUSH
42446: LD_INT 5
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: ST_TO_ADDR
42456: GO 43385
42458: LD_INT 4
42460: DOUBLE
42461: EQUAL
42462: IFTRUE 42466
42464: GO 42492
42466: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42467: LD_ADDR_VAR 0 3
42471: PUSH
42472: LD_INT 2
42474: PUSH
42475: LD_INT 3
42477: PUSH
42478: LD_INT 4
42480: PUSH
42481: LD_INT 5
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
42490: GO 43385
42492: LD_INT 5
42494: DOUBLE
42495: EQUAL
42496: IFTRUE 42500
42498: GO 42526
42500: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42501: LD_ADDR_VAR 0 3
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: LD_INT 3
42511: PUSH
42512: LD_INT 4
42514: PUSH
42515: LD_INT 5
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: ST_TO_ADDR
42524: GO 43385
42526: LD_INT 9
42528: DOUBLE
42529: EQUAL
42530: IFTRUE 42534
42532: GO 42560
42534: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42535: LD_ADDR_VAR 0 3
42539: PUSH
42540: LD_INT 2
42542: PUSH
42543: LD_INT 3
42545: PUSH
42546: LD_INT 4
42548: PUSH
42549: LD_INT 5
42551: PUSH
42552: EMPTY
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: ST_TO_ADDR
42558: GO 43385
42560: LD_INT 7
42562: DOUBLE
42563: EQUAL
42564: IFTRUE 42568
42566: GO 42594
42568: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42569: LD_ADDR_VAR 0 3
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: LD_INT 3
42579: PUSH
42580: LD_INT 4
42582: PUSH
42583: LD_INT 5
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: ST_TO_ADDR
42592: GO 43385
42594: LD_INT 12
42596: DOUBLE
42597: EQUAL
42598: IFTRUE 42602
42600: GO 42628
42602: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42603: LD_ADDR_VAR 0 3
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: LD_INT 3
42613: PUSH
42614: LD_INT 4
42616: PUSH
42617: LD_INT 5
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: LIST
42624: LIST
42625: ST_TO_ADDR
42626: GO 43385
42628: LD_INT 13
42630: DOUBLE
42631: EQUAL
42632: IFTRUE 42636
42634: GO 42662
42636: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42637: LD_ADDR_VAR 0 3
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: LD_INT 3
42647: PUSH
42648: LD_INT 4
42650: PUSH
42651: LD_INT 5
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: ST_TO_ADDR
42660: GO 43385
42662: LD_INT 14
42664: DOUBLE
42665: EQUAL
42666: IFTRUE 42670
42668: GO 42688
42670: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42671: LD_ADDR_VAR 0 3
42675: PUSH
42676: LD_INT 4
42678: PUSH
42679: LD_INT 5
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: ST_TO_ADDR
42686: GO 43385
42688: LD_INT 6
42690: DOUBLE
42691: EQUAL
42692: IFTRUE 42696
42694: GO 42714
42696: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42697: LD_ADDR_VAR 0 3
42701: PUSH
42702: LD_INT 4
42704: PUSH
42705: LD_INT 5
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: ST_TO_ADDR
42712: GO 43385
42714: LD_INT 10
42716: DOUBLE
42717: EQUAL
42718: IFTRUE 42722
42720: GO 42740
42722: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42723: LD_ADDR_VAR 0 3
42727: PUSH
42728: LD_INT 4
42730: PUSH
42731: LD_INT 5
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: ST_TO_ADDR
42738: GO 43385
42740: LD_INT 22
42742: DOUBLE
42743: EQUAL
42744: IFTRUE 42748
42746: GO 42774
42748: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42749: LD_ADDR_VAR 0 3
42753: PUSH
42754: LD_INT 11
42756: PUSH
42757: LD_INT 12
42759: PUSH
42760: LD_INT 13
42762: PUSH
42763: LD_INT 14
42765: PUSH
42766: EMPTY
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: ST_TO_ADDR
42772: GO 43385
42774: LD_INT 23
42776: DOUBLE
42777: EQUAL
42778: IFTRUE 42782
42780: GO 42808
42782: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42783: LD_ADDR_VAR 0 3
42787: PUSH
42788: LD_INT 11
42790: PUSH
42791: LD_INT 12
42793: PUSH
42794: LD_INT 13
42796: PUSH
42797: LD_INT 14
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: ST_TO_ADDR
42806: GO 43385
42808: LD_INT 24
42810: DOUBLE
42811: EQUAL
42812: IFTRUE 42816
42814: GO 42842
42816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42817: LD_ADDR_VAR 0 3
42821: PUSH
42822: LD_INT 11
42824: PUSH
42825: LD_INT 12
42827: PUSH
42828: LD_INT 13
42830: PUSH
42831: LD_INT 14
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
42840: GO 43385
42842: LD_INT 30
42844: DOUBLE
42845: EQUAL
42846: IFTRUE 42850
42848: GO 42876
42850: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42851: LD_ADDR_VAR 0 3
42855: PUSH
42856: LD_INT 11
42858: PUSH
42859: LD_INT 12
42861: PUSH
42862: LD_INT 13
42864: PUSH
42865: LD_INT 14
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: ST_TO_ADDR
42874: GO 43385
42876: LD_INT 25
42878: DOUBLE
42879: EQUAL
42880: IFTRUE 42884
42882: GO 42902
42884: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42885: LD_ADDR_VAR 0 3
42889: PUSH
42890: LD_INT 13
42892: PUSH
42893: LD_INT 14
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: ST_TO_ADDR
42900: GO 43385
42902: LD_INT 27
42904: DOUBLE
42905: EQUAL
42906: IFTRUE 42910
42908: GO 42928
42910: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42911: LD_ADDR_VAR 0 3
42915: PUSH
42916: LD_INT 13
42918: PUSH
42919: LD_INT 14
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: ST_TO_ADDR
42926: GO 43385
42928: LD_EXP 50
42932: DOUBLE
42933: EQUAL
42934: IFTRUE 42938
42936: GO 42964
42938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42939: LD_ADDR_VAR 0 3
42943: PUSH
42944: LD_INT 11
42946: PUSH
42947: LD_INT 12
42949: PUSH
42950: LD_INT 13
42952: PUSH
42953: LD_INT 14
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: ST_TO_ADDR
42962: GO 43385
42964: LD_INT 28
42966: DOUBLE
42967: EQUAL
42968: IFTRUE 42972
42970: GO 42990
42972: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42973: LD_ADDR_VAR 0 3
42977: PUSH
42978: LD_INT 13
42980: PUSH
42981: LD_INT 14
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: ST_TO_ADDR
42988: GO 43385
42990: LD_INT 29
42992: DOUBLE
42993: EQUAL
42994: IFTRUE 42998
42996: GO 43016
42998: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42999: LD_ADDR_VAR 0 3
43003: PUSH
43004: LD_INT 13
43006: PUSH
43007: LD_INT 14
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: ST_TO_ADDR
43014: GO 43385
43016: LD_INT 31
43018: DOUBLE
43019: EQUAL
43020: IFTRUE 43024
43022: GO 43042
43024: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43025: LD_ADDR_VAR 0 3
43029: PUSH
43030: LD_INT 13
43032: PUSH
43033: LD_INT 14
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: ST_TO_ADDR
43040: GO 43385
43042: LD_INT 26
43044: DOUBLE
43045: EQUAL
43046: IFTRUE 43050
43048: GO 43068
43050: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43051: LD_ADDR_VAR 0 3
43055: PUSH
43056: LD_INT 13
43058: PUSH
43059: LD_INT 14
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: ST_TO_ADDR
43066: GO 43385
43068: LD_INT 42
43070: DOUBLE
43071: EQUAL
43072: IFTRUE 43076
43074: GO 43102
43076: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43077: LD_ADDR_VAR 0 3
43081: PUSH
43082: LD_INT 21
43084: PUSH
43085: LD_INT 22
43087: PUSH
43088: LD_INT 23
43090: PUSH
43091: LD_INT 24
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: LIST
43098: LIST
43099: ST_TO_ADDR
43100: GO 43385
43102: LD_INT 43
43104: DOUBLE
43105: EQUAL
43106: IFTRUE 43110
43108: GO 43136
43110: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43111: LD_ADDR_VAR 0 3
43115: PUSH
43116: LD_INT 21
43118: PUSH
43119: LD_INT 22
43121: PUSH
43122: LD_INT 23
43124: PUSH
43125: LD_INT 24
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: ST_TO_ADDR
43134: GO 43385
43136: LD_INT 44
43138: DOUBLE
43139: EQUAL
43140: IFTRUE 43144
43142: GO 43170
43144: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43145: LD_ADDR_VAR 0 3
43149: PUSH
43150: LD_INT 21
43152: PUSH
43153: LD_INT 22
43155: PUSH
43156: LD_INT 23
43158: PUSH
43159: LD_INT 24
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: LIST
43166: LIST
43167: ST_TO_ADDR
43168: GO 43385
43170: LD_INT 45
43172: DOUBLE
43173: EQUAL
43174: IFTRUE 43178
43176: GO 43204
43178: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43179: LD_ADDR_VAR 0 3
43183: PUSH
43184: LD_INT 21
43186: PUSH
43187: LD_INT 22
43189: PUSH
43190: LD_INT 23
43192: PUSH
43193: LD_INT 24
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: ST_TO_ADDR
43202: GO 43385
43204: LD_INT 49
43206: DOUBLE
43207: EQUAL
43208: IFTRUE 43212
43210: GO 43238
43212: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43213: LD_ADDR_VAR 0 3
43217: PUSH
43218: LD_INT 21
43220: PUSH
43221: LD_INT 22
43223: PUSH
43224: LD_INT 23
43226: PUSH
43227: LD_INT 24
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: ST_TO_ADDR
43236: GO 43385
43238: LD_INT 51
43240: DOUBLE
43241: EQUAL
43242: IFTRUE 43246
43244: GO 43272
43246: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43247: LD_ADDR_VAR 0 3
43251: PUSH
43252: LD_INT 21
43254: PUSH
43255: LD_INT 22
43257: PUSH
43258: LD_INT 23
43260: PUSH
43261: LD_INT 24
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: ST_TO_ADDR
43270: GO 43385
43272: LD_INT 52
43274: DOUBLE
43275: EQUAL
43276: IFTRUE 43280
43278: GO 43306
43280: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43281: LD_ADDR_VAR 0 3
43285: PUSH
43286: LD_INT 21
43288: PUSH
43289: LD_INT 22
43291: PUSH
43292: LD_INT 23
43294: PUSH
43295: LD_INT 24
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: ST_TO_ADDR
43304: GO 43385
43306: LD_INT 53
43308: DOUBLE
43309: EQUAL
43310: IFTRUE 43314
43312: GO 43332
43314: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43315: LD_ADDR_VAR 0 3
43319: PUSH
43320: LD_INT 23
43322: PUSH
43323: LD_INT 24
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: ST_TO_ADDR
43330: GO 43385
43332: LD_INT 46
43334: DOUBLE
43335: EQUAL
43336: IFTRUE 43340
43338: GO 43358
43340: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43341: LD_ADDR_VAR 0 3
43345: PUSH
43346: LD_INT 23
43348: PUSH
43349: LD_INT 24
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: ST_TO_ADDR
43356: GO 43385
43358: LD_INT 47
43360: DOUBLE
43361: EQUAL
43362: IFTRUE 43366
43364: GO 43384
43366: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43367: LD_ADDR_VAR 0 3
43371: PUSH
43372: LD_INT 23
43374: PUSH
43375: LD_INT 24
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: ST_TO_ADDR
43382: GO 43385
43384: POP
// result := ( chassis in result ) ;
43385: LD_ADDR_VAR 0 3
43389: PUSH
43390: LD_VAR 0 1
43394: PUSH
43395: LD_VAR 0 3
43399: IN
43400: ST_TO_ADDR
// end ;
43401: LD_VAR 0 3
43405: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43406: LD_INT 0
43408: PPUSH
43409: PPUSH
43410: PPUSH
43411: PPUSH
43412: PPUSH
43413: PPUSH
43414: PPUSH
// result := array ;
43415: LD_ADDR_VAR 0 5
43419: PUSH
43420: LD_VAR 0 1
43424: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43425: LD_VAR 0 1
43429: NOT
43430: PUSH
43431: LD_VAR 0 2
43435: NOT
43436: OR
43437: PUSH
43438: LD_VAR 0 3
43442: NOT
43443: OR
43444: PUSH
43445: LD_VAR 0 2
43449: PUSH
43450: LD_VAR 0 1
43454: GREATER
43455: OR
43456: PUSH
43457: LD_VAR 0 3
43461: PUSH
43462: LD_VAR 0 1
43466: GREATER
43467: OR
43468: IFFALSE 43472
// exit ;
43470: GO 43768
// if direction then
43472: LD_VAR 0 4
43476: IFFALSE 43540
// begin d := 1 ;
43478: LD_ADDR_VAR 0 9
43482: PUSH
43483: LD_INT 1
43485: ST_TO_ADDR
// if i_from > i_to then
43486: LD_VAR 0 2
43490: PUSH
43491: LD_VAR 0 3
43495: GREATER
43496: IFFALSE 43522
// length := ( array - i_from ) + i_to else
43498: LD_ADDR_VAR 0 11
43502: PUSH
43503: LD_VAR 0 1
43507: PUSH
43508: LD_VAR 0 2
43512: MINUS
43513: PUSH
43514: LD_VAR 0 3
43518: PLUS
43519: ST_TO_ADDR
43520: GO 43538
// length := i_to - i_from ;
43522: LD_ADDR_VAR 0 11
43526: PUSH
43527: LD_VAR 0 3
43531: PUSH
43532: LD_VAR 0 2
43536: MINUS
43537: ST_TO_ADDR
// end else
43538: GO 43601
// begin d := - 1 ;
43540: LD_ADDR_VAR 0 9
43544: PUSH
43545: LD_INT 1
43547: NEG
43548: ST_TO_ADDR
// if i_from > i_to then
43549: LD_VAR 0 2
43553: PUSH
43554: LD_VAR 0 3
43558: GREATER
43559: IFFALSE 43579
// length := i_from - i_to else
43561: LD_ADDR_VAR 0 11
43565: PUSH
43566: LD_VAR 0 2
43570: PUSH
43571: LD_VAR 0 3
43575: MINUS
43576: ST_TO_ADDR
43577: GO 43601
// length := ( array - i_to ) + i_from ;
43579: LD_ADDR_VAR 0 11
43583: PUSH
43584: LD_VAR 0 1
43588: PUSH
43589: LD_VAR 0 3
43593: MINUS
43594: PUSH
43595: LD_VAR 0 2
43599: PLUS
43600: ST_TO_ADDR
// end ; if not length then
43601: LD_VAR 0 11
43605: NOT
43606: IFFALSE 43610
// exit ;
43608: GO 43768
// tmp := array ;
43610: LD_ADDR_VAR 0 10
43614: PUSH
43615: LD_VAR 0 1
43619: ST_TO_ADDR
// for i = 1 to length do
43620: LD_ADDR_VAR 0 6
43624: PUSH
43625: DOUBLE
43626: LD_INT 1
43628: DEC
43629: ST_TO_ADDR
43630: LD_VAR 0 11
43634: PUSH
43635: FOR_TO
43636: IFFALSE 43756
// begin for j = 1 to array do
43638: LD_ADDR_VAR 0 7
43642: PUSH
43643: DOUBLE
43644: LD_INT 1
43646: DEC
43647: ST_TO_ADDR
43648: LD_VAR 0 1
43652: PUSH
43653: FOR_TO
43654: IFFALSE 43742
// begin k := j + d ;
43656: LD_ADDR_VAR 0 8
43660: PUSH
43661: LD_VAR 0 7
43665: PUSH
43666: LD_VAR 0 9
43670: PLUS
43671: ST_TO_ADDR
// if k > array then
43672: LD_VAR 0 8
43676: PUSH
43677: LD_VAR 0 1
43681: GREATER
43682: IFFALSE 43692
// k := 1 ;
43684: LD_ADDR_VAR 0 8
43688: PUSH
43689: LD_INT 1
43691: ST_TO_ADDR
// if not k then
43692: LD_VAR 0 8
43696: NOT
43697: IFFALSE 43709
// k := array ;
43699: LD_ADDR_VAR 0 8
43703: PUSH
43704: LD_VAR 0 1
43708: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43709: LD_ADDR_VAR 0 10
43713: PUSH
43714: LD_VAR 0 10
43718: PPUSH
43719: LD_VAR 0 8
43723: PPUSH
43724: LD_VAR 0 1
43728: PUSH
43729: LD_VAR 0 7
43733: ARRAY
43734: PPUSH
43735: CALL_OW 1
43739: ST_TO_ADDR
// end ;
43740: GO 43653
43742: POP
43743: POP
// array := tmp ;
43744: LD_ADDR_VAR 0 1
43748: PUSH
43749: LD_VAR 0 10
43753: ST_TO_ADDR
// end ;
43754: GO 43635
43756: POP
43757: POP
// result := array ;
43758: LD_ADDR_VAR 0 5
43762: PUSH
43763: LD_VAR 0 1
43767: ST_TO_ADDR
// end ;
43768: LD_VAR 0 5
43772: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43773: LD_INT 0
43775: PPUSH
43776: PPUSH
// result := 0 ;
43777: LD_ADDR_VAR 0 3
43781: PUSH
43782: LD_INT 0
43784: ST_TO_ADDR
// if not array or not value in array then
43785: LD_VAR 0 1
43789: NOT
43790: PUSH
43791: LD_VAR 0 2
43795: PUSH
43796: LD_VAR 0 1
43800: IN
43801: NOT
43802: OR
43803: IFFALSE 43807
// exit ;
43805: GO 43861
// for i = 1 to array do
43807: LD_ADDR_VAR 0 4
43811: PUSH
43812: DOUBLE
43813: LD_INT 1
43815: DEC
43816: ST_TO_ADDR
43817: LD_VAR 0 1
43821: PUSH
43822: FOR_TO
43823: IFFALSE 43859
// if value = array [ i ] then
43825: LD_VAR 0 2
43829: PUSH
43830: LD_VAR 0 1
43834: PUSH
43835: LD_VAR 0 4
43839: ARRAY
43840: EQUAL
43841: IFFALSE 43857
// begin result := i ;
43843: LD_ADDR_VAR 0 3
43847: PUSH
43848: LD_VAR 0 4
43852: ST_TO_ADDR
// exit ;
43853: POP
43854: POP
43855: GO 43861
// end ;
43857: GO 43822
43859: POP
43860: POP
// end ;
43861: LD_VAR 0 3
43865: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43866: LD_INT 0
43868: PPUSH
// vc_chassis := chassis ;
43869: LD_ADDR_OWVAR 37
43873: PUSH
43874: LD_VAR 0 1
43878: ST_TO_ADDR
// vc_engine := engine ;
43879: LD_ADDR_OWVAR 39
43883: PUSH
43884: LD_VAR 0 2
43888: ST_TO_ADDR
// vc_control := control ;
43889: LD_ADDR_OWVAR 38
43893: PUSH
43894: LD_VAR 0 3
43898: ST_TO_ADDR
// vc_weapon := weapon ;
43899: LD_ADDR_OWVAR 40
43903: PUSH
43904: LD_VAR 0 4
43908: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43909: LD_ADDR_OWVAR 41
43913: PUSH
43914: LD_VAR 0 5
43918: ST_TO_ADDR
// end ;
43919: LD_VAR 0 6
43923: RET
// export function WantPlant ( unit ) ; var task ; begin
43924: LD_INT 0
43926: PPUSH
43927: PPUSH
// result := false ;
43928: LD_ADDR_VAR 0 2
43932: PUSH
43933: LD_INT 0
43935: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43936: LD_ADDR_VAR 0 3
43940: PUSH
43941: LD_VAR 0 1
43945: PPUSH
43946: CALL_OW 437
43950: ST_TO_ADDR
// if task then
43951: LD_VAR 0 3
43955: IFFALSE 43983
// if task [ 1 ] [ 1 ] = p then
43957: LD_VAR 0 3
43961: PUSH
43962: LD_INT 1
43964: ARRAY
43965: PUSH
43966: LD_INT 1
43968: ARRAY
43969: PUSH
43970: LD_STRING p
43972: EQUAL
43973: IFFALSE 43983
// result := true ;
43975: LD_ADDR_VAR 0 2
43979: PUSH
43980: LD_INT 1
43982: ST_TO_ADDR
// end ;
43983: LD_VAR 0 2
43987: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43988: LD_INT 0
43990: PPUSH
43991: PPUSH
43992: PPUSH
43993: PPUSH
// if pos < 1 then
43994: LD_VAR 0 2
43998: PUSH
43999: LD_INT 1
44001: LESS
44002: IFFALSE 44006
// exit ;
44004: GO 44309
// if pos = 1 then
44006: LD_VAR 0 2
44010: PUSH
44011: LD_INT 1
44013: EQUAL
44014: IFFALSE 44047
// result := Replace ( arr , pos [ 1 ] , value ) else
44016: LD_ADDR_VAR 0 4
44020: PUSH
44021: LD_VAR 0 1
44025: PPUSH
44026: LD_VAR 0 2
44030: PUSH
44031: LD_INT 1
44033: ARRAY
44034: PPUSH
44035: LD_VAR 0 3
44039: PPUSH
44040: CALL_OW 1
44044: ST_TO_ADDR
44045: GO 44309
// begin tmp := arr ;
44047: LD_ADDR_VAR 0 6
44051: PUSH
44052: LD_VAR 0 1
44056: ST_TO_ADDR
// s_arr := [ tmp ] ;
44057: LD_ADDR_VAR 0 7
44061: PUSH
44062: LD_VAR 0 6
44066: PUSH
44067: EMPTY
44068: LIST
44069: ST_TO_ADDR
// for i = 1 to pos - 1 do
44070: LD_ADDR_VAR 0 5
44074: PUSH
44075: DOUBLE
44076: LD_INT 1
44078: DEC
44079: ST_TO_ADDR
44080: LD_VAR 0 2
44084: PUSH
44085: LD_INT 1
44087: MINUS
44088: PUSH
44089: FOR_TO
44090: IFFALSE 44135
// begin tmp := tmp [ pos [ i ] ] ;
44092: LD_ADDR_VAR 0 6
44096: PUSH
44097: LD_VAR 0 6
44101: PUSH
44102: LD_VAR 0 2
44106: PUSH
44107: LD_VAR 0 5
44111: ARRAY
44112: ARRAY
44113: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44114: LD_ADDR_VAR 0 7
44118: PUSH
44119: LD_VAR 0 7
44123: PUSH
44124: LD_VAR 0 6
44128: PUSH
44129: EMPTY
44130: LIST
44131: ADD
44132: ST_TO_ADDR
// end ;
44133: GO 44089
44135: POP
44136: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44137: LD_ADDR_VAR 0 6
44141: PUSH
44142: LD_VAR 0 6
44146: PPUSH
44147: LD_VAR 0 2
44151: PUSH
44152: LD_VAR 0 2
44156: ARRAY
44157: PPUSH
44158: LD_VAR 0 3
44162: PPUSH
44163: CALL_OW 1
44167: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44168: LD_ADDR_VAR 0 7
44172: PUSH
44173: LD_VAR 0 7
44177: PPUSH
44178: LD_VAR 0 7
44182: PPUSH
44183: LD_VAR 0 6
44187: PPUSH
44188: CALL_OW 1
44192: ST_TO_ADDR
// for i = s_arr downto 2 do
44193: LD_ADDR_VAR 0 5
44197: PUSH
44198: DOUBLE
44199: LD_VAR 0 7
44203: INC
44204: ST_TO_ADDR
44205: LD_INT 2
44207: PUSH
44208: FOR_DOWNTO
44209: IFFALSE 44293
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44211: LD_ADDR_VAR 0 6
44215: PUSH
44216: LD_VAR 0 7
44220: PUSH
44221: LD_VAR 0 5
44225: PUSH
44226: LD_INT 1
44228: MINUS
44229: ARRAY
44230: PPUSH
44231: LD_VAR 0 2
44235: PUSH
44236: LD_VAR 0 5
44240: PUSH
44241: LD_INT 1
44243: MINUS
44244: ARRAY
44245: PPUSH
44246: LD_VAR 0 7
44250: PUSH
44251: LD_VAR 0 5
44255: ARRAY
44256: PPUSH
44257: CALL_OW 1
44261: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44262: LD_ADDR_VAR 0 7
44266: PUSH
44267: LD_VAR 0 7
44271: PPUSH
44272: LD_VAR 0 5
44276: PUSH
44277: LD_INT 1
44279: MINUS
44280: PPUSH
44281: LD_VAR 0 6
44285: PPUSH
44286: CALL_OW 1
44290: ST_TO_ADDR
// end ;
44291: GO 44208
44293: POP
44294: POP
// result := s_arr [ 1 ] ;
44295: LD_ADDR_VAR 0 4
44299: PUSH
44300: LD_VAR 0 7
44304: PUSH
44305: LD_INT 1
44307: ARRAY
44308: ST_TO_ADDR
// end ; end ;
44309: LD_VAR 0 4
44313: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44314: LD_INT 0
44316: PPUSH
44317: PPUSH
// if not list then
44318: LD_VAR 0 1
44322: NOT
44323: IFFALSE 44327
// exit ;
44325: GO 44418
// i := list [ pos1 ] ;
44327: LD_ADDR_VAR 0 5
44331: PUSH
44332: LD_VAR 0 1
44336: PUSH
44337: LD_VAR 0 2
44341: ARRAY
44342: ST_TO_ADDR
// if not i then
44343: LD_VAR 0 5
44347: NOT
44348: IFFALSE 44352
// exit ;
44350: GO 44418
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44352: LD_ADDR_VAR 0 1
44356: PUSH
44357: LD_VAR 0 1
44361: PPUSH
44362: LD_VAR 0 2
44366: PPUSH
44367: LD_VAR 0 1
44371: PUSH
44372: LD_VAR 0 3
44376: ARRAY
44377: PPUSH
44378: CALL_OW 1
44382: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44383: LD_ADDR_VAR 0 1
44387: PUSH
44388: LD_VAR 0 1
44392: PPUSH
44393: LD_VAR 0 3
44397: PPUSH
44398: LD_VAR 0 5
44402: PPUSH
44403: CALL_OW 1
44407: ST_TO_ADDR
// result := list ;
44408: LD_ADDR_VAR 0 4
44412: PUSH
44413: LD_VAR 0 1
44417: ST_TO_ADDR
// end ;
44418: LD_VAR 0 4
44422: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44423: LD_INT 0
44425: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44426: LD_ADDR_VAR 0 5
44430: PUSH
44431: LD_VAR 0 1
44435: PPUSH
44436: CALL_OW 250
44440: PPUSH
44441: LD_VAR 0 1
44445: PPUSH
44446: CALL_OW 251
44450: PPUSH
44451: LD_VAR 0 2
44455: PPUSH
44456: LD_VAR 0 3
44460: PPUSH
44461: LD_VAR 0 4
44465: PPUSH
44466: CALL 44476 0 5
44470: ST_TO_ADDR
// end ;
44471: LD_VAR 0 5
44475: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44476: LD_INT 0
44478: PPUSH
44479: PPUSH
44480: PPUSH
44481: PPUSH
// if not list then
44482: LD_VAR 0 3
44486: NOT
44487: IFFALSE 44491
// exit ;
44489: GO 44879
// result := [ ] ;
44491: LD_ADDR_VAR 0 6
44495: PUSH
44496: EMPTY
44497: ST_TO_ADDR
// for i in list do
44498: LD_ADDR_VAR 0 7
44502: PUSH
44503: LD_VAR 0 3
44507: PUSH
44508: FOR_IN
44509: IFFALSE 44711
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44511: LD_ADDR_VAR 0 9
44515: PUSH
44516: LD_VAR 0 7
44520: PPUSH
44521: LD_VAR 0 1
44525: PPUSH
44526: LD_VAR 0 2
44530: PPUSH
44531: CALL_OW 297
44535: ST_TO_ADDR
// if not result then
44536: LD_VAR 0 6
44540: NOT
44541: IFFALSE 44567
// result := [ [ i , tmp ] ] else
44543: LD_ADDR_VAR 0 6
44547: PUSH
44548: LD_VAR 0 7
44552: PUSH
44553: LD_VAR 0 9
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: EMPTY
44563: LIST
44564: ST_TO_ADDR
44565: GO 44709
// begin if result [ result ] [ 2 ] < tmp then
44567: LD_VAR 0 6
44571: PUSH
44572: LD_VAR 0 6
44576: ARRAY
44577: PUSH
44578: LD_INT 2
44580: ARRAY
44581: PUSH
44582: LD_VAR 0 9
44586: LESS
44587: IFFALSE 44629
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44589: LD_ADDR_VAR 0 6
44593: PUSH
44594: LD_VAR 0 6
44598: PPUSH
44599: LD_VAR 0 6
44603: PUSH
44604: LD_INT 1
44606: PLUS
44607: PPUSH
44608: LD_VAR 0 7
44612: PUSH
44613: LD_VAR 0 9
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PPUSH
44622: CALL_OW 2
44626: ST_TO_ADDR
44627: GO 44709
// for j = 1 to result do
44629: LD_ADDR_VAR 0 8
44633: PUSH
44634: DOUBLE
44635: LD_INT 1
44637: DEC
44638: ST_TO_ADDR
44639: LD_VAR 0 6
44643: PUSH
44644: FOR_TO
44645: IFFALSE 44707
// begin if tmp < result [ j ] [ 2 ] then
44647: LD_VAR 0 9
44651: PUSH
44652: LD_VAR 0 6
44656: PUSH
44657: LD_VAR 0 8
44661: ARRAY
44662: PUSH
44663: LD_INT 2
44665: ARRAY
44666: LESS
44667: IFFALSE 44705
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44669: LD_ADDR_VAR 0 6
44673: PUSH
44674: LD_VAR 0 6
44678: PPUSH
44679: LD_VAR 0 8
44683: PPUSH
44684: LD_VAR 0 7
44688: PUSH
44689: LD_VAR 0 9
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PPUSH
44698: CALL_OW 2
44702: ST_TO_ADDR
// break ;
44703: GO 44707
// end ; end ;
44705: GO 44644
44707: POP
44708: POP
// end ; end ;
44709: GO 44508
44711: POP
44712: POP
// if result and not asc then
44713: LD_VAR 0 6
44717: PUSH
44718: LD_VAR 0 4
44722: NOT
44723: AND
44724: IFFALSE 44799
// begin tmp := result ;
44726: LD_ADDR_VAR 0 9
44730: PUSH
44731: LD_VAR 0 6
44735: ST_TO_ADDR
// for i = tmp downto 1 do
44736: LD_ADDR_VAR 0 7
44740: PUSH
44741: DOUBLE
44742: LD_VAR 0 9
44746: INC
44747: ST_TO_ADDR
44748: LD_INT 1
44750: PUSH
44751: FOR_DOWNTO
44752: IFFALSE 44797
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44754: LD_ADDR_VAR 0 6
44758: PUSH
44759: LD_VAR 0 6
44763: PPUSH
44764: LD_VAR 0 9
44768: PUSH
44769: LD_VAR 0 7
44773: MINUS
44774: PUSH
44775: LD_INT 1
44777: PLUS
44778: PPUSH
44779: LD_VAR 0 9
44783: PUSH
44784: LD_VAR 0 7
44788: ARRAY
44789: PPUSH
44790: CALL_OW 1
44794: ST_TO_ADDR
44795: GO 44751
44797: POP
44798: POP
// end ; tmp := [ ] ;
44799: LD_ADDR_VAR 0 9
44803: PUSH
44804: EMPTY
44805: ST_TO_ADDR
// if mode then
44806: LD_VAR 0 5
44810: IFFALSE 44879
// begin for i = 1 to result do
44812: LD_ADDR_VAR 0 7
44816: PUSH
44817: DOUBLE
44818: LD_INT 1
44820: DEC
44821: ST_TO_ADDR
44822: LD_VAR 0 6
44826: PUSH
44827: FOR_TO
44828: IFFALSE 44867
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44830: LD_ADDR_VAR 0 9
44834: PUSH
44835: LD_VAR 0 9
44839: PPUSH
44840: LD_VAR 0 7
44844: PPUSH
44845: LD_VAR 0 6
44849: PUSH
44850: LD_VAR 0 7
44854: ARRAY
44855: PUSH
44856: LD_INT 1
44858: ARRAY
44859: PPUSH
44860: CALL_OW 1
44864: ST_TO_ADDR
44865: GO 44827
44867: POP
44868: POP
// result := tmp ;
44869: LD_ADDR_VAR 0 6
44873: PUSH
44874: LD_VAR 0 9
44878: ST_TO_ADDR
// end ; end ;
44879: LD_VAR 0 6
44883: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44884: LD_INT 0
44886: PPUSH
44887: PPUSH
44888: PPUSH
44889: PPUSH
44890: PPUSH
44891: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44892: LD_ADDR_VAR 0 5
44896: PUSH
44897: LD_INT 0
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: EMPTY
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: ST_TO_ADDR
// if not x or not y then
44914: LD_VAR 0 2
44918: NOT
44919: PUSH
44920: LD_VAR 0 3
44924: NOT
44925: OR
44926: IFFALSE 44930
// exit ;
44928: GO 46582
// if not range then
44930: LD_VAR 0 4
44934: NOT
44935: IFFALSE 44945
// range := 10 ;
44937: LD_ADDR_VAR 0 4
44941: PUSH
44942: LD_INT 10
44944: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44945: LD_ADDR_VAR 0 8
44949: PUSH
44950: LD_INT 81
44952: PUSH
44953: LD_VAR 0 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 92
44964: PUSH
44965: LD_VAR 0 2
44969: PUSH
44970: LD_VAR 0 3
44974: PUSH
44975: LD_VAR 0 4
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 3
44988: PUSH
44989: LD_INT 21
44991: PUSH
44992: LD_INT 3
44994: PUSH
44995: EMPTY
44996: LIST
44997: LIST
44998: PUSH
44999: EMPTY
45000: LIST
45001: LIST
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: LIST
45007: PPUSH
45008: CALL_OW 69
45012: ST_TO_ADDR
// if not tmp then
45013: LD_VAR 0 8
45017: NOT
45018: IFFALSE 45022
// exit ;
45020: GO 46582
// for i in tmp do
45022: LD_ADDR_VAR 0 6
45026: PUSH
45027: LD_VAR 0 8
45031: PUSH
45032: FOR_IN
45033: IFFALSE 46557
// begin points := [ 0 , 0 , 0 ] ;
45035: LD_ADDR_VAR 0 9
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: LD_INT 0
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: LIST
45053: ST_TO_ADDR
// bpoints := 1 ;
45054: LD_ADDR_VAR 0 10
45058: PUSH
45059: LD_INT 1
45061: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45062: LD_VAR 0 6
45066: PPUSH
45067: CALL_OW 247
45071: PUSH
45072: LD_INT 1
45074: DOUBLE
45075: EQUAL
45076: IFTRUE 45080
45078: GO 45658
45080: POP
// begin if GetClass ( i ) = 1 then
45081: LD_VAR 0 6
45085: PPUSH
45086: CALL_OW 257
45090: PUSH
45091: LD_INT 1
45093: EQUAL
45094: IFFALSE 45115
// points := [ 10 , 5 , 3 ] ;
45096: LD_ADDR_VAR 0 9
45100: PUSH
45101: LD_INT 10
45103: PUSH
45104: LD_INT 5
45106: PUSH
45107: LD_INT 3
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: LIST
45114: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45115: LD_VAR 0 6
45119: PPUSH
45120: CALL_OW 257
45124: PUSH
45125: LD_INT 2
45127: PUSH
45128: LD_INT 3
45130: PUSH
45131: LD_INT 4
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: LIST
45138: IN
45139: IFFALSE 45160
// points := [ 3 , 2 , 1 ] ;
45141: LD_ADDR_VAR 0 9
45145: PUSH
45146: LD_INT 3
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: LIST
45159: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45160: LD_VAR 0 6
45164: PPUSH
45165: CALL_OW 257
45169: PUSH
45170: LD_INT 5
45172: EQUAL
45173: IFFALSE 45194
// points := [ 130 , 5 , 2 ] ;
45175: LD_ADDR_VAR 0 9
45179: PUSH
45180: LD_INT 130
45182: PUSH
45183: LD_INT 5
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: LIST
45193: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45194: LD_VAR 0 6
45198: PPUSH
45199: CALL_OW 257
45203: PUSH
45204: LD_INT 8
45206: EQUAL
45207: IFFALSE 45228
// points := [ 35 , 35 , 30 ] ;
45209: LD_ADDR_VAR 0 9
45213: PUSH
45214: LD_INT 35
45216: PUSH
45217: LD_INT 35
45219: PUSH
45220: LD_INT 30
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: LIST
45227: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45228: LD_VAR 0 6
45232: PPUSH
45233: CALL_OW 257
45237: PUSH
45238: LD_INT 9
45240: EQUAL
45241: IFFALSE 45262
// points := [ 20 , 55 , 40 ] ;
45243: LD_ADDR_VAR 0 9
45247: PUSH
45248: LD_INT 20
45250: PUSH
45251: LD_INT 55
45253: PUSH
45254: LD_INT 40
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: LIST
45261: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45262: LD_VAR 0 6
45266: PPUSH
45267: CALL_OW 257
45271: PUSH
45272: LD_INT 12
45274: PUSH
45275: LD_INT 16
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: IN
45282: IFFALSE 45303
// points := [ 5 , 3 , 2 ] ;
45284: LD_ADDR_VAR 0 9
45288: PUSH
45289: LD_INT 5
45291: PUSH
45292: LD_INT 3
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: LIST
45302: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45303: LD_VAR 0 6
45307: PPUSH
45308: CALL_OW 257
45312: PUSH
45313: LD_INT 17
45315: EQUAL
45316: IFFALSE 45337
// points := [ 100 , 50 , 75 ] ;
45318: LD_ADDR_VAR 0 9
45322: PUSH
45323: LD_INT 100
45325: PUSH
45326: LD_INT 50
45328: PUSH
45329: LD_INT 75
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: LIST
45336: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45337: LD_VAR 0 6
45341: PPUSH
45342: CALL_OW 257
45346: PUSH
45347: LD_INT 15
45349: EQUAL
45350: IFFALSE 45371
// points := [ 10 , 5 , 3 ] ;
45352: LD_ADDR_VAR 0 9
45356: PUSH
45357: LD_INT 10
45359: PUSH
45360: LD_INT 5
45362: PUSH
45363: LD_INT 3
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45371: LD_VAR 0 6
45375: PPUSH
45376: CALL_OW 257
45380: PUSH
45381: LD_INT 14
45383: EQUAL
45384: IFFALSE 45405
// points := [ 10 , 0 , 0 ] ;
45386: LD_ADDR_VAR 0 9
45390: PUSH
45391: LD_INT 10
45393: PUSH
45394: LD_INT 0
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: LIST
45404: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45405: LD_VAR 0 6
45409: PPUSH
45410: CALL_OW 257
45414: PUSH
45415: LD_INT 11
45417: EQUAL
45418: IFFALSE 45439
// points := [ 30 , 10 , 5 ] ;
45420: LD_ADDR_VAR 0 9
45424: PUSH
45425: LD_INT 30
45427: PUSH
45428: LD_INT 10
45430: PUSH
45431: LD_INT 5
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: LIST
45438: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45439: LD_VAR 0 1
45443: PPUSH
45444: LD_INT 5
45446: PPUSH
45447: CALL_OW 321
45451: PUSH
45452: LD_INT 2
45454: EQUAL
45455: IFFALSE 45472
// bpoints := bpoints * 1.8 ;
45457: LD_ADDR_VAR 0 10
45461: PUSH
45462: LD_VAR 0 10
45466: PUSH
45467: LD_REAL  1.80000000000000E+0000
45470: MUL
45471: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45472: LD_VAR 0 6
45476: PPUSH
45477: CALL_OW 257
45481: PUSH
45482: LD_INT 1
45484: PUSH
45485: LD_INT 2
45487: PUSH
45488: LD_INT 3
45490: PUSH
45491: LD_INT 4
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: IN
45500: PUSH
45501: LD_VAR 0 1
45505: PPUSH
45506: LD_INT 51
45508: PPUSH
45509: CALL_OW 321
45513: PUSH
45514: LD_INT 2
45516: EQUAL
45517: AND
45518: IFFALSE 45535
// bpoints := bpoints * 1.2 ;
45520: LD_ADDR_VAR 0 10
45524: PUSH
45525: LD_VAR 0 10
45529: PUSH
45530: LD_REAL  1.20000000000000E+0000
45533: MUL
45534: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45535: LD_VAR 0 6
45539: PPUSH
45540: CALL_OW 257
45544: PUSH
45545: LD_INT 5
45547: PUSH
45548: LD_INT 7
45550: PUSH
45551: LD_INT 9
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: LIST
45558: IN
45559: PUSH
45560: LD_VAR 0 1
45564: PPUSH
45565: LD_INT 52
45567: PPUSH
45568: CALL_OW 321
45572: PUSH
45573: LD_INT 2
45575: EQUAL
45576: AND
45577: IFFALSE 45594
// bpoints := bpoints * 1.5 ;
45579: LD_ADDR_VAR 0 10
45583: PUSH
45584: LD_VAR 0 10
45588: PUSH
45589: LD_REAL  1.50000000000000E+0000
45592: MUL
45593: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45594: LD_VAR 0 1
45598: PPUSH
45599: LD_INT 66
45601: PPUSH
45602: CALL_OW 321
45606: PUSH
45607: LD_INT 2
45609: EQUAL
45610: IFFALSE 45627
// bpoints := bpoints * 1.1 ;
45612: LD_ADDR_VAR 0 10
45616: PUSH
45617: LD_VAR 0 10
45621: PUSH
45622: LD_REAL  1.10000000000000E+0000
45625: MUL
45626: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45627: LD_ADDR_VAR 0 10
45631: PUSH
45632: LD_VAR 0 10
45636: PUSH
45637: LD_VAR 0 6
45641: PPUSH
45642: LD_INT 1
45644: PPUSH
45645: CALL_OW 259
45649: PUSH
45650: LD_REAL  1.15000000000000E+0000
45653: MUL
45654: MUL
45655: ST_TO_ADDR
// end ; unit_vehicle :
45656: GO 46486
45658: LD_INT 2
45660: DOUBLE
45661: EQUAL
45662: IFTRUE 45666
45664: GO 46474
45666: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45667: LD_VAR 0 6
45671: PPUSH
45672: CALL_OW 264
45676: PUSH
45677: LD_INT 2
45679: PUSH
45680: LD_INT 42
45682: PUSH
45683: LD_INT 24
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: LIST
45690: IN
45691: IFFALSE 45712
// points := [ 25 , 5 , 3 ] ;
45693: LD_ADDR_VAR 0 9
45697: PUSH
45698: LD_INT 25
45700: PUSH
45701: LD_INT 5
45703: PUSH
45704: LD_INT 3
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: LIST
45711: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45712: LD_VAR 0 6
45716: PPUSH
45717: CALL_OW 264
45721: PUSH
45722: LD_INT 4
45724: PUSH
45725: LD_INT 43
45727: PUSH
45728: LD_INT 25
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: LIST
45735: IN
45736: IFFALSE 45757
// points := [ 40 , 15 , 5 ] ;
45738: LD_ADDR_VAR 0 9
45742: PUSH
45743: LD_INT 40
45745: PUSH
45746: LD_INT 15
45748: PUSH
45749: LD_INT 5
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: LIST
45756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45757: LD_VAR 0 6
45761: PPUSH
45762: CALL_OW 264
45766: PUSH
45767: LD_INT 3
45769: PUSH
45770: LD_INT 23
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: IN
45777: IFFALSE 45798
// points := [ 7 , 25 , 8 ] ;
45779: LD_ADDR_VAR 0 9
45783: PUSH
45784: LD_INT 7
45786: PUSH
45787: LD_INT 25
45789: PUSH
45790: LD_INT 8
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45798: LD_VAR 0 6
45802: PPUSH
45803: CALL_OW 264
45807: PUSH
45808: LD_INT 5
45810: PUSH
45811: LD_INT 27
45813: PUSH
45814: LD_INT 44
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: LIST
45821: IN
45822: IFFALSE 45843
// points := [ 14 , 50 , 16 ] ;
45824: LD_ADDR_VAR 0 9
45828: PUSH
45829: LD_INT 14
45831: PUSH
45832: LD_INT 50
45834: PUSH
45835: LD_INT 16
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45843: LD_VAR 0 6
45847: PPUSH
45848: CALL_OW 264
45852: PUSH
45853: LD_INT 6
45855: PUSH
45856: LD_INT 46
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: IN
45863: IFFALSE 45884
// points := [ 32 , 120 , 70 ] ;
45865: LD_ADDR_VAR 0 9
45869: PUSH
45870: LD_INT 32
45872: PUSH
45873: LD_INT 120
45875: PUSH
45876: LD_INT 70
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: LIST
45883: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45884: LD_VAR 0 6
45888: PPUSH
45889: CALL_OW 264
45893: PUSH
45894: LD_INT 7
45896: PUSH
45897: LD_INT 28
45899: PUSH
45900: LD_INT 45
45902: PUSH
45903: LD_EXP 50
45907: PUSH
45908: EMPTY
45909: LIST
45910: LIST
45911: LIST
45912: LIST
45913: IN
45914: IFFALSE 45935
// points := [ 35 , 20 , 45 ] ;
45916: LD_ADDR_VAR 0 9
45920: PUSH
45921: LD_INT 35
45923: PUSH
45924: LD_INT 20
45926: PUSH
45927: LD_INT 45
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: LIST
45934: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45935: LD_VAR 0 6
45939: PPUSH
45940: CALL_OW 264
45944: PUSH
45945: LD_INT 47
45947: PUSH
45948: EMPTY
45949: LIST
45950: IN
45951: IFFALSE 45972
// points := [ 67 , 45 , 75 ] ;
45953: LD_ADDR_VAR 0 9
45957: PUSH
45958: LD_INT 67
45960: PUSH
45961: LD_INT 45
45963: PUSH
45964: LD_INT 75
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: LIST
45971: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45972: LD_VAR 0 6
45976: PPUSH
45977: CALL_OW 264
45981: PUSH
45982: LD_INT 26
45984: PUSH
45985: EMPTY
45986: LIST
45987: IN
45988: IFFALSE 46009
// points := [ 120 , 30 , 80 ] ;
45990: LD_ADDR_VAR 0 9
45994: PUSH
45995: LD_INT 120
45997: PUSH
45998: LD_INT 30
46000: PUSH
46001: LD_INT 80
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: LIST
46008: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46009: LD_VAR 0 6
46013: PPUSH
46014: CALL_OW 264
46018: PUSH
46019: LD_INT 22
46021: PUSH
46022: EMPTY
46023: LIST
46024: IN
46025: IFFALSE 46046
// points := [ 40 , 1 , 1 ] ;
46027: LD_ADDR_VAR 0 9
46031: PUSH
46032: LD_INT 40
46034: PUSH
46035: LD_INT 1
46037: PUSH
46038: LD_INT 1
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: LIST
46045: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46046: LD_VAR 0 6
46050: PPUSH
46051: CALL_OW 264
46055: PUSH
46056: LD_INT 29
46058: PUSH
46059: EMPTY
46060: LIST
46061: IN
46062: IFFALSE 46083
// points := [ 70 , 200 , 400 ] ;
46064: LD_ADDR_VAR 0 9
46068: PUSH
46069: LD_INT 70
46071: PUSH
46072: LD_INT 200
46074: PUSH
46075: LD_INT 400
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: LIST
46082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46083: LD_VAR 0 6
46087: PPUSH
46088: CALL_OW 264
46092: PUSH
46093: LD_INT 14
46095: PUSH
46096: LD_INT 53
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: IN
46103: IFFALSE 46124
// points := [ 40 , 10 , 20 ] ;
46105: LD_ADDR_VAR 0 9
46109: PUSH
46110: LD_INT 40
46112: PUSH
46113: LD_INT 10
46115: PUSH
46116: LD_INT 20
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: LIST
46123: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46124: LD_VAR 0 6
46128: PPUSH
46129: CALL_OW 264
46133: PUSH
46134: LD_INT 9
46136: PUSH
46137: EMPTY
46138: LIST
46139: IN
46140: IFFALSE 46161
// points := [ 5 , 70 , 20 ] ;
46142: LD_ADDR_VAR 0 9
46146: PUSH
46147: LD_INT 5
46149: PUSH
46150: LD_INT 70
46152: PUSH
46153: LD_INT 20
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: LIST
46160: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46161: LD_VAR 0 6
46165: PPUSH
46166: CALL_OW 264
46170: PUSH
46171: LD_INT 10
46173: PUSH
46174: EMPTY
46175: LIST
46176: IN
46177: IFFALSE 46198
// points := [ 35 , 110 , 70 ] ;
46179: LD_ADDR_VAR 0 9
46183: PUSH
46184: LD_INT 35
46186: PUSH
46187: LD_INT 110
46189: PUSH
46190: LD_INT 70
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: LIST
46197: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46198: LD_VAR 0 6
46202: PPUSH
46203: CALL_OW 265
46207: PUSH
46208: LD_INT 25
46210: EQUAL
46211: IFFALSE 46232
// points := [ 80 , 65 , 100 ] ;
46213: LD_ADDR_VAR 0 9
46217: PUSH
46218: LD_INT 80
46220: PUSH
46221: LD_INT 65
46223: PUSH
46224: LD_INT 100
46226: PUSH
46227: EMPTY
46228: LIST
46229: LIST
46230: LIST
46231: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46232: LD_VAR 0 6
46236: PPUSH
46237: CALL_OW 263
46241: PUSH
46242: LD_INT 1
46244: EQUAL
46245: IFFALSE 46280
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46247: LD_ADDR_VAR 0 10
46251: PUSH
46252: LD_VAR 0 10
46256: PUSH
46257: LD_VAR 0 6
46261: PPUSH
46262: CALL_OW 311
46266: PPUSH
46267: LD_INT 3
46269: PPUSH
46270: CALL_OW 259
46274: PUSH
46275: LD_INT 4
46277: MUL
46278: MUL
46279: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46280: LD_VAR 0 6
46284: PPUSH
46285: CALL_OW 263
46289: PUSH
46290: LD_INT 2
46292: EQUAL
46293: IFFALSE 46344
// begin j := IsControledBy ( i ) ;
46295: LD_ADDR_VAR 0 7
46299: PUSH
46300: LD_VAR 0 6
46304: PPUSH
46305: CALL_OW 312
46309: ST_TO_ADDR
// if j then
46310: LD_VAR 0 7
46314: IFFALSE 46344
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46316: LD_ADDR_VAR 0 10
46320: PUSH
46321: LD_VAR 0 10
46325: PUSH
46326: LD_VAR 0 7
46330: PPUSH
46331: LD_INT 3
46333: PPUSH
46334: CALL_OW 259
46338: PUSH
46339: LD_INT 3
46341: MUL
46342: MUL
46343: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46344: LD_VAR 0 6
46348: PPUSH
46349: CALL_OW 264
46353: PUSH
46354: LD_INT 5
46356: PUSH
46357: LD_INT 6
46359: PUSH
46360: LD_INT 46
46362: PUSH
46363: LD_INT 44
46365: PUSH
46366: LD_INT 47
46368: PUSH
46369: LD_INT 45
46371: PUSH
46372: LD_INT 28
46374: PUSH
46375: LD_INT 7
46377: PUSH
46378: LD_INT 27
46380: PUSH
46381: LD_INT 29
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: IN
46396: PUSH
46397: LD_VAR 0 1
46401: PPUSH
46402: LD_INT 52
46404: PPUSH
46405: CALL_OW 321
46409: PUSH
46410: LD_INT 2
46412: EQUAL
46413: AND
46414: IFFALSE 46431
// bpoints := bpoints * 1.2 ;
46416: LD_ADDR_VAR 0 10
46420: PUSH
46421: LD_VAR 0 10
46425: PUSH
46426: LD_REAL  1.20000000000000E+0000
46429: MUL
46430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46431: LD_VAR 0 6
46435: PPUSH
46436: CALL_OW 264
46440: PUSH
46441: LD_INT 6
46443: PUSH
46444: LD_INT 46
46446: PUSH
46447: LD_INT 47
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: LIST
46454: IN
46455: IFFALSE 46472
// bpoints := bpoints * 1.2 ;
46457: LD_ADDR_VAR 0 10
46461: PUSH
46462: LD_VAR 0 10
46466: PUSH
46467: LD_REAL  1.20000000000000E+0000
46470: MUL
46471: ST_TO_ADDR
// end ; unit_building :
46472: GO 46486
46474: LD_INT 3
46476: DOUBLE
46477: EQUAL
46478: IFTRUE 46482
46480: GO 46485
46482: POP
// ; end ;
46483: GO 46486
46485: POP
// for j = 1 to 3 do
46486: LD_ADDR_VAR 0 7
46490: PUSH
46491: DOUBLE
46492: LD_INT 1
46494: DEC
46495: ST_TO_ADDR
46496: LD_INT 3
46498: PUSH
46499: FOR_TO
46500: IFFALSE 46553
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46502: LD_ADDR_VAR 0 5
46506: PUSH
46507: LD_VAR 0 5
46511: PPUSH
46512: LD_VAR 0 7
46516: PPUSH
46517: LD_VAR 0 5
46521: PUSH
46522: LD_VAR 0 7
46526: ARRAY
46527: PUSH
46528: LD_VAR 0 9
46532: PUSH
46533: LD_VAR 0 7
46537: ARRAY
46538: PUSH
46539: LD_VAR 0 10
46543: MUL
46544: PLUS
46545: PPUSH
46546: CALL_OW 1
46550: ST_TO_ADDR
46551: GO 46499
46553: POP
46554: POP
// end ;
46555: GO 45032
46557: POP
46558: POP
// result := Replace ( result , 4 , tmp ) ;
46559: LD_ADDR_VAR 0 5
46563: PUSH
46564: LD_VAR 0 5
46568: PPUSH
46569: LD_INT 4
46571: PPUSH
46572: LD_VAR 0 8
46576: PPUSH
46577: CALL_OW 1
46581: ST_TO_ADDR
// end ;
46582: LD_VAR 0 5
46586: RET
// export function DangerAtRange ( unit , range ) ; begin
46587: LD_INT 0
46589: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46590: LD_ADDR_VAR 0 3
46594: PUSH
46595: LD_VAR 0 1
46599: PPUSH
46600: CALL_OW 255
46604: PPUSH
46605: LD_VAR 0 1
46609: PPUSH
46610: CALL_OW 250
46614: PPUSH
46615: LD_VAR 0 1
46619: PPUSH
46620: CALL_OW 251
46624: PPUSH
46625: LD_VAR 0 2
46629: PPUSH
46630: CALL 44884 0 4
46634: ST_TO_ADDR
// end ;
46635: LD_VAR 0 3
46639: RET
// export function DangerInArea ( side , area ) ; begin
46640: LD_INT 0
46642: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46643: LD_ADDR_VAR 0 3
46647: PUSH
46648: LD_VAR 0 2
46652: PPUSH
46653: LD_INT 81
46655: PUSH
46656: LD_VAR 0 1
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PPUSH
46665: CALL_OW 70
46669: ST_TO_ADDR
// end ;
46670: LD_VAR 0 3
46674: RET
// export function IsExtension ( b ) ; begin
46675: LD_INT 0
46677: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46678: LD_ADDR_VAR 0 2
46682: PUSH
46683: LD_VAR 0 1
46687: PUSH
46688: LD_INT 23
46690: PUSH
46691: LD_INT 20
46693: PUSH
46694: LD_INT 22
46696: PUSH
46697: LD_INT 17
46699: PUSH
46700: LD_INT 24
46702: PUSH
46703: LD_INT 21
46705: PUSH
46706: LD_INT 19
46708: PUSH
46709: LD_INT 16
46711: PUSH
46712: LD_INT 25
46714: PUSH
46715: LD_INT 18
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: IN
46730: ST_TO_ADDR
// end ;
46731: LD_VAR 0 2
46735: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46736: LD_INT 0
46738: PPUSH
46739: PPUSH
46740: PPUSH
// result := [ ] ;
46741: LD_ADDR_VAR 0 4
46745: PUSH
46746: EMPTY
46747: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46748: LD_ADDR_VAR 0 5
46752: PUSH
46753: LD_VAR 0 2
46757: PPUSH
46758: LD_INT 21
46760: PUSH
46761: LD_INT 3
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PPUSH
46768: CALL_OW 70
46772: ST_TO_ADDR
// if not tmp then
46773: LD_VAR 0 5
46777: NOT
46778: IFFALSE 46782
// exit ;
46780: GO 46846
// if checkLink then
46782: LD_VAR 0 3
46786: IFFALSE 46836
// begin for i in tmp do
46788: LD_ADDR_VAR 0 6
46792: PUSH
46793: LD_VAR 0 5
46797: PUSH
46798: FOR_IN
46799: IFFALSE 46834
// if GetBase ( i ) <> base then
46801: LD_VAR 0 6
46805: PPUSH
46806: CALL_OW 274
46810: PUSH
46811: LD_VAR 0 1
46815: NONEQUAL
46816: IFFALSE 46832
// ComLinkToBase ( base , i ) ;
46818: LD_VAR 0 1
46822: PPUSH
46823: LD_VAR 0 6
46827: PPUSH
46828: CALL_OW 169
46832: GO 46798
46834: POP
46835: POP
// end ; result := tmp ;
46836: LD_ADDR_VAR 0 4
46840: PUSH
46841: LD_VAR 0 5
46845: ST_TO_ADDR
// end ;
46846: LD_VAR 0 4
46850: RET
// export function ComComplete ( units , b ) ; var i ; begin
46851: LD_INT 0
46853: PPUSH
46854: PPUSH
// if not units then
46855: LD_VAR 0 1
46859: NOT
46860: IFFALSE 46864
// exit ;
46862: GO 46954
// for i in units do
46864: LD_ADDR_VAR 0 4
46868: PUSH
46869: LD_VAR 0 1
46873: PUSH
46874: FOR_IN
46875: IFFALSE 46952
// if BuildingStatus ( b ) = bs_build then
46877: LD_VAR 0 2
46881: PPUSH
46882: CALL_OW 461
46886: PUSH
46887: LD_INT 1
46889: EQUAL
46890: IFFALSE 46950
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46892: LD_VAR 0 4
46896: PPUSH
46897: LD_STRING h
46899: PUSH
46900: LD_VAR 0 2
46904: PPUSH
46905: CALL_OW 250
46909: PUSH
46910: LD_VAR 0 2
46914: PPUSH
46915: CALL_OW 251
46919: PUSH
46920: LD_VAR 0 2
46924: PUSH
46925: LD_INT 0
46927: PUSH
46928: LD_INT 0
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: PUSH
46943: EMPTY
46944: LIST
46945: PPUSH
46946: CALL_OW 446
46950: GO 46874
46952: POP
46953: POP
// end ;
46954: LD_VAR 0 3
46958: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46959: LD_INT 0
46961: PPUSH
46962: PPUSH
46963: PPUSH
46964: PPUSH
46965: PPUSH
46966: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46967: LD_VAR 0 1
46971: NOT
46972: PUSH
46973: LD_VAR 0 1
46977: PPUSH
46978: CALL_OW 263
46982: PUSH
46983: LD_INT 2
46985: NONEQUAL
46986: OR
46987: IFFALSE 46991
// exit ;
46989: GO 47307
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46991: LD_ADDR_VAR 0 6
46995: PUSH
46996: LD_INT 22
46998: PUSH
46999: LD_VAR 0 1
47003: PPUSH
47004: CALL_OW 255
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: PUSH
47016: LD_INT 30
47018: PUSH
47019: LD_INT 36
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 34
47028: PUSH
47029: LD_INT 31
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: LIST
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PPUSH
47045: CALL_OW 69
47049: ST_TO_ADDR
// if not tmp then
47050: LD_VAR 0 6
47054: NOT
47055: IFFALSE 47059
// exit ;
47057: GO 47307
// result := [ ] ;
47059: LD_ADDR_VAR 0 2
47063: PUSH
47064: EMPTY
47065: ST_TO_ADDR
// for i in tmp do
47066: LD_ADDR_VAR 0 3
47070: PUSH
47071: LD_VAR 0 6
47075: PUSH
47076: FOR_IN
47077: IFFALSE 47148
// begin t := UnitsInside ( i ) ;
47079: LD_ADDR_VAR 0 4
47083: PUSH
47084: LD_VAR 0 3
47088: PPUSH
47089: CALL_OW 313
47093: ST_TO_ADDR
// if t then
47094: LD_VAR 0 4
47098: IFFALSE 47146
// for j in t do
47100: LD_ADDR_VAR 0 7
47104: PUSH
47105: LD_VAR 0 4
47109: PUSH
47110: FOR_IN
47111: IFFALSE 47144
// result := Replace ( result , result + 1 , j ) ;
47113: LD_ADDR_VAR 0 2
47117: PUSH
47118: LD_VAR 0 2
47122: PPUSH
47123: LD_VAR 0 2
47127: PUSH
47128: LD_INT 1
47130: PLUS
47131: PPUSH
47132: LD_VAR 0 7
47136: PPUSH
47137: CALL_OW 1
47141: ST_TO_ADDR
47142: GO 47110
47144: POP
47145: POP
// end ;
47146: GO 47076
47148: POP
47149: POP
// if not result then
47150: LD_VAR 0 2
47154: NOT
47155: IFFALSE 47159
// exit ;
47157: GO 47307
// mech := result [ 1 ] ;
47159: LD_ADDR_VAR 0 5
47163: PUSH
47164: LD_VAR 0 2
47168: PUSH
47169: LD_INT 1
47171: ARRAY
47172: ST_TO_ADDR
// if result > 1 then
47173: LD_VAR 0 2
47177: PUSH
47178: LD_INT 1
47180: GREATER
47181: IFFALSE 47293
// begin for i = 2 to result do
47183: LD_ADDR_VAR 0 3
47187: PUSH
47188: DOUBLE
47189: LD_INT 2
47191: DEC
47192: ST_TO_ADDR
47193: LD_VAR 0 2
47197: PUSH
47198: FOR_TO
47199: IFFALSE 47291
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47201: LD_ADDR_VAR 0 4
47205: PUSH
47206: LD_VAR 0 2
47210: PUSH
47211: LD_VAR 0 3
47215: ARRAY
47216: PPUSH
47217: LD_INT 3
47219: PPUSH
47220: CALL_OW 259
47224: PUSH
47225: LD_VAR 0 2
47229: PUSH
47230: LD_VAR 0 3
47234: ARRAY
47235: PPUSH
47236: CALL_OW 432
47240: MINUS
47241: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47242: LD_VAR 0 4
47246: PUSH
47247: LD_VAR 0 5
47251: PPUSH
47252: LD_INT 3
47254: PPUSH
47255: CALL_OW 259
47259: PUSH
47260: LD_VAR 0 5
47264: PPUSH
47265: CALL_OW 432
47269: MINUS
47270: GREATEREQUAL
47271: IFFALSE 47289
// mech := result [ i ] ;
47273: LD_ADDR_VAR 0 5
47277: PUSH
47278: LD_VAR 0 2
47282: PUSH
47283: LD_VAR 0 3
47287: ARRAY
47288: ST_TO_ADDR
// end ;
47289: GO 47198
47291: POP
47292: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47293: LD_VAR 0 1
47297: PPUSH
47298: LD_VAR 0 5
47302: PPUSH
47303: CALL_OW 135
// end ;
47307: LD_VAR 0 2
47311: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47312: LD_INT 0
47314: PPUSH
47315: PPUSH
47316: PPUSH
47317: PPUSH
47318: PPUSH
47319: PPUSH
47320: PPUSH
47321: PPUSH
47322: PPUSH
47323: PPUSH
47324: PPUSH
47325: PPUSH
47326: PPUSH
// result := [ ] ;
47327: LD_ADDR_VAR 0 7
47331: PUSH
47332: EMPTY
47333: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47334: LD_VAR 0 1
47338: PPUSH
47339: CALL_OW 266
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 1
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: IN
47354: NOT
47355: IFFALSE 47359
// exit ;
47357: GO 48993
// if name then
47359: LD_VAR 0 3
47363: IFFALSE 47379
// SetBName ( base_dep , name ) ;
47365: LD_VAR 0 1
47369: PPUSH
47370: LD_VAR 0 3
47374: PPUSH
47375: CALL_OW 500
// base := GetBase ( base_dep ) ;
47379: LD_ADDR_VAR 0 15
47383: PUSH
47384: LD_VAR 0 1
47388: PPUSH
47389: CALL_OW 274
47393: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47394: LD_ADDR_VAR 0 16
47398: PUSH
47399: LD_VAR 0 1
47403: PPUSH
47404: CALL_OW 255
47408: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47409: LD_ADDR_VAR 0 17
47413: PUSH
47414: LD_VAR 0 1
47418: PPUSH
47419: CALL_OW 248
47423: ST_TO_ADDR
// if sources then
47424: LD_VAR 0 5
47428: IFFALSE 47475
// for i = 1 to 3 do
47430: LD_ADDR_VAR 0 8
47434: PUSH
47435: DOUBLE
47436: LD_INT 1
47438: DEC
47439: ST_TO_ADDR
47440: LD_INT 3
47442: PUSH
47443: FOR_TO
47444: IFFALSE 47473
// AddResourceType ( base , i , sources [ i ] ) ;
47446: LD_VAR 0 15
47450: PPUSH
47451: LD_VAR 0 8
47455: PPUSH
47456: LD_VAR 0 5
47460: PUSH
47461: LD_VAR 0 8
47465: ARRAY
47466: PPUSH
47467: CALL_OW 276
47471: GO 47443
47473: POP
47474: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47475: LD_ADDR_VAR 0 18
47479: PUSH
47480: LD_VAR 0 15
47484: PPUSH
47485: LD_VAR 0 2
47489: PPUSH
47490: LD_INT 1
47492: PPUSH
47493: CALL 46736 0 3
47497: ST_TO_ADDR
// InitHc ;
47498: CALL_OW 19
// InitUc ;
47502: CALL_OW 18
// uc_side := side ;
47506: LD_ADDR_OWVAR 20
47510: PUSH
47511: LD_VAR 0 16
47515: ST_TO_ADDR
// uc_nation := nation ;
47516: LD_ADDR_OWVAR 21
47520: PUSH
47521: LD_VAR 0 17
47525: ST_TO_ADDR
// if buildings then
47526: LD_VAR 0 18
47530: IFFALSE 48852
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47532: LD_ADDR_VAR 0 19
47536: PUSH
47537: LD_VAR 0 18
47541: PPUSH
47542: LD_INT 2
47544: PUSH
47545: LD_INT 30
47547: PUSH
47548: LD_INT 29
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 30
47557: PUSH
47558: LD_INT 30
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: LIST
47569: PPUSH
47570: CALL_OW 72
47574: ST_TO_ADDR
// if tmp then
47575: LD_VAR 0 19
47579: IFFALSE 47627
// for i in tmp do
47581: LD_ADDR_VAR 0 8
47585: PUSH
47586: LD_VAR 0 19
47590: PUSH
47591: FOR_IN
47592: IFFALSE 47625
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47594: LD_VAR 0 8
47598: PPUSH
47599: CALL_OW 250
47603: PPUSH
47604: LD_VAR 0 8
47608: PPUSH
47609: CALL_OW 251
47613: PPUSH
47614: LD_VAR 0 16
47618: PPUSH
47619: CALL_OW 441
47623: GO 47591
47625: POP
47626: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47627: LD_VAR 0 18
47631: PPUSH
47632: LD_INT 2
47634: PUSH
47635: LD_INT 30
47637: PUSH
47638: LD_INT 32
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 30
47647: PUSH
47648: LD_INT 33
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: LIST
47659: PPUSH
47660: CALL_OW 72
47664: IFFALSE 47752
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47666: LD_ADDR_VAR 0 8
47670: PUSH
47671: LD_VAR 0 18
47675: PPUSH
47676: LD_INT 2
47678: PUSH
47679: LD_INT 30
47681: PUSH
47682: LD_INT 32
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 30
47691: PUSH
47692: LD_INT 33
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: LIST
47703: PPUSH
47704: CALL_OW 72
47708: PUSH
47709: FOR_IN
47710: IFFALSE 47750
// begin if not GetBWeapon ( i ) then
47712: LD_VAR 0 8
47716: PPUSH
47717: CALL_OW 269
47721: NOT
47722: IFFALSE 47748
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47724: LD_VAR 0 8
47728: PPUSH
47729: LD_VAR 0 8
47733: PPUSH
47734: LD_VAR 0 2
47738: PPUSH
47739: CALL 48998 0 2
47743: PPUSH
47744: CALL_OW 431
// end ;
47748: GO 47709
47750: POP
47751: POP
// end ; for i = 1 to personel do
47752: LD_ADDR_VAR 0 8
47756: PUSH
47757: DOUBLE
47758: LD_INT 1
47760: DEC
47761: ST_TO_ADDR
47762: LD_VAR 0 6
47766: PUSH
47767: FOR_TO
47768: IFFALSE 48832
// begin if i > 4 then
47770: LD_VAR 0 8
47774: PUSH
47775: LD_INT 4
47777: GREATER
47778: IFFALSE 47782
// break ;
47780: GO 48832
// case i of 1 :
47782: LD_VAR 0 8
47786: PUSH
47787: LD_INT 1
47789: DOUBLE
47790: EQUAL
47791: IFTRUE 47795
47793: GO 47875
47795: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47796: LD_ADDR_VAR 0 12
47800: PUSH
47801: LD_VAR 0 18
47805: PPUSH
47806: LD_INT 22
47808: PUSH
47809: LD_VAR 0 16
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: PUSH
47818: LD_INT 58
47820: PUSH
47821: EMPTY
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: LD_INT 30
47829: PUSH
47830: LD_INT 32
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 30
47839: PUSH
47840: LD_INT 4
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 30
47849: PUSH
47850: LD_INT 5
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: PPUSH
47868: CALL_OW 72
47872: ST_TO_ADDR
47873: GO 48097
47875: LD_INT 2
47877: DOUBLE
47878: EQUAL
47879: IFTRUE 47883
47881: GO 47945
47883: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47884: LD_ADDR_VAR 0 12
47888: PUSH
47889: LD_VAR 0 18
47893: PPUSH
47894: LD_INT 22
47896: PUSH
47897: LD_VAR 0 16
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 30
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 30
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: LIST
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PPUSH
47938: CALL_OW 72
47942: ST_TO_ADDR
47943: GO 48097
47945: LD_INT 3
47947: DOUBLE
47948: EQUAL
47949: IFTRUE 47953
47951: GO 48015
47953: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47954: LD_ADDR_VAR 0 12
47958: PUSH
47959: LD_VAR 0 18
47963: PPUSH
47964: LD_INT 22
47966: PUSH
47967: LD_VAR 0 16
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: LD_INT 30
47981: PUSH
47982: LD_INT 2
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 30
47991: PUSH
47992: LD_INT 3
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: LIST
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PPUSH
48008: CALL_OW 72
48012: ST_TO_ADDR
48013: GO 48097
48015: LD_INT 4
48017: DOUBLE
48018: EQUAL
48019: IFTRUE 48023
48021: GO 48096
48023: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48024: LD_ADDR_VAR 0 12
48028: PUSH
48029: LD_VAR 0 18
48033: PPUSH
48034: LD_INT 22
48036: PUSH
48037: LD_VAR 0 16
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: LD_INT 30
48051: PUSH
48052: LD_INT 6
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 30
48061: PUSH
48062: LD_INT 7
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 30
48071: PUSH
48072: LD_INT 8
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PPUSH
48089: CALL_OW 72
48093: ST_TO_ADDR
48094: GO 48097
48096: POP
// if i = 1 then
48097: LD_VAR 0 8
48101: PUSH
48102: LD_INT 1
48104: EQUAL
48105: IFFALSE 48216
// begin tmp := [ ] ;
48107: LD_ADDR_VAR 0 19
48111: PUSH
48112: EMPTY
48113: ST_TO_ADDR
// for j in f do
48114: LD_ADDR_VAR 0 9
48118: PUSH
48119: LD_VAR 0 12
48123: PUSH
48124: FOR_IN
48125: IFFALSE 48198
// if GetBType ( j ) = b_bunker then
48127: LD_VAR 0 9
48131: PPUSH
48132: CALL_OW 266
48136: PUSH
48137: LD_INT 32
48139: EQUAL
48140: IFFALSE 48167
// tmp := Insert ( tmp , 1 , j ) else
48142: LD_ADDR_VAR 0 19
48146: PUSH
48147: LD_VAR 0 19
48151: PPUSH
48152: LD_INT 1
48154: PPUSH
48155: LD_VAR 0 9
48159: PPUSH
48160: CALL_OW 2
48164: ST_TO_ADDR
48165: GO 48196
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48167: LD_ADDR_VAR 0 19
48171: PUSH
48172: LD_VAR 0 19
48176: PPUSH
48177: LD_VAR 0 19
48181: PUSH
48182: LD_INT 1
48184: PLUS
48185: PPUSH
48186: LD_VAR 0 9
48190: PPUSH
48191: CALL_OW 2
48195: ST_TO_ADDR
48196: GO 48124
48198: POP
48199: POP
// if tmp then
48200: LD_VAR 0 19
48204: IFFALSE 48216
// f := tmp ;
48206: LD_ADDR_VAR 0 12
48210: PUSH
48211: LD_VAR 0 19
48215: ST_TO_ADDR
// end ; x := personel [ i ] ;
48216: LD_ADDR_VAR 0 13
48220: PUSH
48221: LD_VAR 0 6
48225: PUSH
48226: LD_VAR 0 8
48230: ARRAY
48231: ST_TO_ADDR
// if x = - 1 then
48232: LD_VAR 0 13
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: EQUAL
48241: IFFALSE 48450
// begin for j in f do
48243: LD_ADDR_VAR 0 9
48247: PUSH
48248: LD_VAR 0 12
48252: PUSH
48253: FOR_IN
48254: IFFALSE 48446
// repeat InitHc ;
48256: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48260: LD_VAR 0 9
48264: PPUSH
48265: CALL_OW 266
48269: PUSH
48270: LD_INT 5
48272: EQUAL
48273: IFFALSE 48343
// begin if UnitsInside ( j ) < 3 then
48275: LD_VAR 0 9
48279: PPUSH
48280: CALL_OW 313
48284: PUSH
48285: LD_INT 3
48287: LESS
48288: IFFALSE 48324
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48290: LD_INT 0
48292: PPUSH
48293: LD_INT 5
48295: PUSH
48296: LD_INT 8
48298: PUSH
48299: LD_INT 9
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: LIST
48306: PUSH
48307: LD_VAR 0 17
48311: ARRAY
48312: PPUSH
48313: LD_VAR 0 4
48317: PPUSH
48318: CALL_OW 380
48322: GO 48341
// PrepareHuman ( false , i , skill ) ;
48324: LD_INT 0
48326: PPUSH
48327: LD_VAR 0 8
48331: PPUSH
48332: LD_VAR 0 4
48336: PPUSH
48337: CALL_OW 380
// end else
48341: GO 48360
// PrepareHuman ( false , i , skill ) ;
48343: LD_INT 0
48345: PPUSH
48346: LD_VAR 0 8
48350: PPUSH
48351: LD_VAR 0 4
48355: PPUSH
48356: CALL_OW 380
// un := CreateHuman ;
48360: LD_ADDR_VAR 0 14
48364: PUSH
48365: CALL_OW 44
48369: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48370: LD_ADDR_VAR 0 7
48374: PUSH
48375: LD_VAR 0 7
48379: PPUSH
48380: LD_INT 1
48382: PPUSH
48383: LD_VAR 0 14
48387: PPUSH
48388: CALL_OW 2
48392: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48393: LD_VAR 0 14
48397: PPUSH
48398: LD_VAR 0 9
48402: PPUSH
48403: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48407: LD_VAR 0 9
48411: PPUSH
48412: CALL_OW 313
48416: PUSH
48417: LD_INT 6
48419: EQUAL
48420: PUSH
48421: LD_VAR 0 9
48425: PPUSH
48426: CALL_OW 266
48430: PUSH
48431: LD_INT 32
48433: PUSH
48434: LD_INT 31
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: IN
48441: OR
48442: IFFALSE 48256
48444: GO 48253
48446: POP
48447: POP
// end else
48448: GO 48830
// for j = 1 to x do
48450: LD_ADDR_VAR 0 9
48454: PUSH
48455: DOUBLE
48456: LD_INT 1
48458: DEC
48459: ST_TO_ADDR
48460: LD_VAR 0 13
48464: PUSH
48465: FOR_TO
48466: IFFALSE 48828
// begin InitHc ;
48468: CALL_OW 19
// if not f then
48472: LD_VAR 0 12
48476: NOT
48477: IFFALSE 48566
// begin PrepareHuman ( false , i , skill ) ;
48479: LD_INT 0
48481: PPUSH
48482: LD_VAR 0 8
48486: PPUSH
48487: LD_VAR 0 4
48491: PPUSH
48492: CALL_OW 380
// un := CreateHuman ;
48496: LD_ADDR_VAR 0 14
48500: PUSH
48501: CALL_OW 44
48505: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48506: LD_ADDR_VAR 0 7
48510: PUSH
48511: LD_VAR 0 7
48515: PPUSH
48516: LD_INT 1
48518: PPUSH
48519: LD_VAR 0 14
48523: PPUSH
48524: CALL_OW 2
48528: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48529: LD_VAR 0 14
48533: PPUSH
48534: LD_VAR 0 1
48538: PPUSH
48539: CALL_OW 250
48543: PPUSH
48544: LD_VAR 0 1
48548: PPUSH
48549: CALL_OW 251
48553: PPUSH
48554: LD_INT 10
48556: PPUSH
48557: LD_INT 0
48559: PPUSH
48560: CALL_OW 50
// continue ;
48564: GO 48465
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48566: LD_VAR 0 12
48570: PUSH
48571: LD_INT 1
48573: ARRAY
48574: PPUSH
48575: CALL_OW 313
48579: PUSH
48580: LD_VAR 0 12
48584: PUSH
48585: LD_INT 1
48587: ARRAY
48588: PPUSH
48589: CALL_OW 266
48593: PUSH
48594: LD_INT 32
48596: PUSH
48597: LD_INT 31
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: IN
48604: AND
48605: PUSH
48606: LD_VAR 0 12
48610: PUSH
48611: LD_INT 1
48613: ARRAY
48614: PPUSH
48615: CALL_OW 313
48619: PUSH
48620: LD_INT 6
48622: EQUAL
48623: OR
48624: IFFALSE 48644
// f := Delete ( f , 1 ) ;
48626: LD_ADDR_VAR 0 12
48630: PUSH
48631: LD_VAR 0 12
48635: PPUSH
48636: LD_INT 1
48638: PPUSH
48639: CALL_OW 3
48643: ST_TO_ADDR
// if not f then
48644: LD_VAR 0 12
48648: NOT
48649: IFFALSE 48667
// begin x := x + 2 ;
48651: LD_ADDR_VAR 0 13
48655: PUSH
48656: LD_VAR 0 13
48660: PUSH
48661: LD_INT 2
48663: PLUS
48664: ST_TO_ADDR
// continue ;
48665: GO 48465
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48667: LD_VAR 0 12
48671: PUSH
48672: LD_INT 1
48674: ARRAY
48675: PPUSH
48676: CALL_OW 266
48680: PUSH
48681: LD_INT 5
48683: EQUAL
48684: IFFALSE 48758
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48686: LD_VAR 0 12
48690: PUSH
48691: LD_INT 1
48693: ARRAY
48694: PPUSH
48695: CALL_OW 313
48699: PUSH
48700: LD_INT 3
48702: LESS
48703: IFFALSE 48739
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48705: LD_INT 0
48707: PPUSH
48708: LD_INT 5
48710: PUSH
48711: LD_INT 8
48713: PUSH
48714: LD_INT 9
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: LIST
48721: PUSH
48722: LD_VAR 0 17
48726: ARRAY
48727: PPUSH
48728: LD_VAR 0 4
48732: PPUSH
48733: CALL_OW 380
48737: GO 48756
// PrepareHuman ( false , i , skill ) ;
48739: LD_INT 0
48741: PPUSH
48742: LD_VAR 0 8
48746: PPUSH
48747: LD_VAR 0 4
48751: PPUSH
48752: CALL_OW 380
// end else
48756: GO 48775
// PrepareHuman ( false , i , skill ) ;
48758: LD_INT 0
48760: PPUSH
48761: LD_VAR 0 8
48765: PPUSH
48766: LD_VAR 0 4
48770: PPUSH
48771: CALL_OW 380
// un := CreateHuman ;
48775: LD_ADDR_VAR 0 14
48779: PUSH
48780: CALL_OW 44
48784: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48785: LD_ADDR_VAR 0 7
48789: PUSH
48790: LD_VAR 0 7
48794: PPUSH
48795: LD_INT 1
48797: PPUSH
48798: LD_VAR 0 14
48802: PPUSH
48803: CALL_OW 2
48807: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48808: LD_VAR 0 14
48812: PPUSH
48813: LD_VAR 0 12
48817: PUSH
48818: LD_INT 1
48820: ARRAY
48821: PPUSH
48822: CALL_OW 52
// end ;
48826: GO 48465
48828: POP
48829: POP
// end ;
48830: GO 47767
48832: POP
48833: POP
// result := result ^ buildings ;
48834: LD_ADDR_VAR 0 7
48838: PUSH
48839: LD_VAR 0 7
48843: PUSH
48844: LD_VAR 0 18
48848: ADD
48849: ST_TO_ADDR
// end else
48850: GO 48993
// begin for i = 1 to personel do
48852: LD_ADDR_VAR 0 8
48856: PUSH
48857: DOUBLE
48858: LD_INT 1
48860: DEC
48861: ST_TO_ADDR
48862: LD_VAR 0 6
48866: PUSH
48867: FOR_TO
48868: IFFALSE 48991
// begin if i > 4 then
48870: LD_VAR 0 8
48874: PUSH
48875: LD_INT 4
48877: GREATER
48878: IFFALSE 48882
// break ;
48880: GO 48991
// x := personel [ i ] ;
48882: LD_ADDR_VAR 0 13
48886: PUSH
48887: LD_VAR 0 6
48891: PUSH
48892: LD_VAR 0 8
48896: ARRAY
48897: ST_TO_ADDR
// if x = - 1 then
48898: LD_VAR 0 13
48902: PUSH
48903: LD_INT 1
48905: NEG
48906: EQUAL
48907: IFFALSE 48911
// continue ;
48909: GO 48867
// PrepareHuman ( false , i , skill ) ;
48911: LD_INT 0
48913: PPUSH
48914: LD_VAR 0 8
48918: PPUSH
48919: LD_VAR 0 4
48923: PPUSH
48924: CALL_OW 380
// un := CreateHuman ;
48928: LD_ADDR_VAR 0 14
48932: PUSH
48933: CALL_OW 44
48937: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48938: LD_VAR 0 14
48942: PPUSH
48943: LD_VAR 0 1
48947: PPUSH
48948: CALL_OW 250
48952: PPUSH
48953: LD_VAR 0 1
48957: PPUSH
48958: CALL_OW 251
48962: PPUSH
48963: LD_INT 10
48965: PPUSH
48966: LD_INT 0
48968: PPUSH
48969: CALL_OW 50
// result := result ^ un ;
48973: LD_ADDR_VAR 0 7
48977: PUSH
48978: LD_VAR 0 7
48982: PUSH
48983: LD_VAR 0 14
48987: ADD
48988: ST_TO_ADDR
// end ;
48989: GO 48867
48991: POP
48992: POP
// end ; end ;
48993: LD_VAR 0 7
48997: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48998: LD_INT 0
49000: PPUSH
49001: PPUSH
49002: PPUSH
49003: PPUSH
49004: PPUSH
49005: PPUSH
49006: PPUSH
49007: PPUSH
49008: PPUSH
49009: PPUSH
49010: PPUSH
49011: PPUSH
49012: PPUSH
49013: PPUSH
49014: PPUSH
49015: PPUSH
// result := false ;
49016: LD_ADDR_VAR 0 3
49020: PUSH
49021: LD_INT 0
49023: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49024: LD_VAR 0 1
49028: NOT
49029: PUSH
49030: LD_VAR 0 1
49034: PPUSH
49035: CALL_OW 266
49039: PUSH
49040: LD_INT 32
49042: PUSH
49043: LD_INT 33
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: IN
49050: NOT
49051: OR
49052: IFFALSE 49056
// exit ;
49054: GO 50165
// nat := GetNation ( tower ) ;
49056: LD_ADDR_VAR 0 12
49060: PUSH
49061: LD_VAR 0 1
49065: PPUSH
49066: CALL_OW 248
49070: ST_TO_ADDR
// side := GetSide ( tower ) ;
49071: LD_ADDR_VAR 0 16
49075: PUSH
49076: LD_VAR 0 1
49080: PPUSH
49081: CALL_OW 255
49085: ST_TO_ADDR
// x := GetX ( tower ) ;
49086: LD_ADDR_VAR 0 10
49090: PUSH
49091: LD_VAR 0 1
49095: PPUSH
49096: CALL_OW 250
49100: ST_TO_ADDR
// y := GetY ( tower ) ;
49101: LD_ADDR_VAR 0 11
49105: PUSH
49106: LD_VAR 0 1
49110: PPUSH
49111: CALL_OW 251
49115: ST_TO_ADDR
// if not x or not y then
49116: LD_VAR 0 10
49120: NOT
49121: PUSH
49122: LD_VAR 0 11
49126: NOT
49127: OR
49128: IFFALSE 49132
// exit ;
49130: GO 50165
// weapon := 0 ;
49132: LD_ADDR_VAR 0 18
49136: PUSH
49137: LD_INT 0
49139: ST_TO_ADDR
// fac_list := [ ] ;
49140: LD_ADDR_VAR 0 17
49144: PUSH
49145: EMPTY
49146: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49147: LD_ADDR_VAR 0 6
49151: PUSH
49152: LD_VAR 0 1
49156: PPUSH
49157: CALL_OW 274
49161: PPUSH
49162: LD_VAR 0 2
49166: PPUSH
49167: LD_INT 0
49169: PPUSH
49170: CALL 46736 0 3
49174: PPUSH
49175: LD_INT 30
49177: PUSH
49178: LD_INT 3
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PPUSH
49185: CALL_OW 72
49189: ST_TO_ADDR
// if not factories then
49190: LD_VAR 0 6
49194: NOT
49195: IFFALSE 49199
// exit ;
49197: GO 50165
// for i in factories do
49199: LD_ADDR_VAR 0 8
49203: PUSH
49204: LD_VAR 0 6
49208: PUSH
49209: FOR_IN
49210: IFFALSE 49235
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49212: LD_ADDR_VAR 0 17
49216: PUSH
49217: LD_VAR 0 17
49221: PUSH
49222: LD_VAR 0 8
49226: PPUSH
49227: CALL_OW 478
49231: UNION
49232: ST_TO_ADDR
49233: GO 49209
49235: POP
49236: POP
// if not fac_list then
49237: LD_VAR 0 17
49241: NOT
49242: IFFALSE 49246
// exit ;
49244: GO 50165
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49246: LD_ADDR_VAR 0 5
49250: PUSH
49251: LD_INT 4
49253: PUSH
49254: LD_INT 5
49256: PUSH
49257: LD_INT 9
49259: PUSH
49260: LD_INT 10
49262: PUSH
49263: LD_INT 6
49265: PUSH
49266: LD_INT 7
49268: PUSH
49269: LD_INT 11
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 27
49283: PUSH
49284: LD_INT 28
49286: PUSH
49287: LD_INT 26
49289: PUSH
49290: LD_INT 30
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 43
49301: PUSH
49302: LD_INT 44
49304: PUSH
49305: LD_INT 46
49307: PUSH
49308: LD_INT 45
49310: PUSH
49311: LD_INT 47
49313: PUSH
49314: LD_INT 49
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: LIST
49329: PUSH
49330: LD_VAR 0 12
49334: ARRAY
49335: ST_TO_ADDR
// list := list isect fac_list ;
49336: LD_ADDR_VAR 0 5
49340: PUSH
49341: LD_VAR 0 5
49345: PUSH
49346: LD_VAR 0 17
49350: ISECT
49351: ST_TO_ADDR
// if not list then
49352: LD_VAR 0 5
49356: NOT
49357: IFFALSE 49361
// exit ;
49359: GO 50165
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49361: LD_VAR 0 12
49365: PUSH
49366: LD_INT 3
49368: EQUAL
49369: PUSH
49370: LD_INT 49
49372: PUSH
49373: LD_VAR 0 5
49377: IN
49378: AND
49379: PUSH
49380: LD_INT 31
49382: PPUSH
49383: LD_VAR 0 16
49387: PPUSH
49388: CALL_OW 321
49392: PUSH
49393: LD_INT 2
49395: EQUAL
49396: AND
49397: IFFALSE 49457
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49399: LD_INT 22
49401: PUSH
49402: LD_VAR 0 16
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 35
49413: PUSH
49414: LD_INT 49
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 91
49423: PUSH
49424: LD_VAR 0 1
49428: PUSH
49429: LD_INT 10
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: LIST
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: LIST
49441: PPUSH
49442: CALL_OW 69
49446: NOT
49447: IFFALSE 49457
// weapon := ru_time_lapser ;
49449: LD_ADDR_VAR 0 18
49453: PUSH
49454: LD_INT 49
49456: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49457: LD_VAR 0 12
49461: PUSH
49462: LD_INT 1
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: IN
49472: PUSH
49473: LD_INT 11
49475: PUSH
49476: LD_VAR 0 5
49480: IN
49481: PUSH
49482: LD_INT 30
49484: PUSH
49485: LD_VAR 0 5
49489: IN
49490: OR
49491: AND
49492: PUSH
49493: LD_INT 6
49495: PPUSH
49496: LD_VAR 0 16
49500: PPUSH
49501: CALL_OW 321
49505: PUSH
49506: LD_INT 2
49508: EQUAL
49509: AND
49510: IFFALSE 49675
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49512: LD_INT 22
49514: PUSH
49515: LD_VAR 0 16
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: LD_INT 35
49529: PUSH
49530: LD_INT 11
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 35
49539: PUSH
49540: LD_INT 30
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: LIST
49551: PUSH
49552: LD_INT 91
49554: PUSH
49555: LD_VAR 0 1
49559: PUSH
49560: LD_INT 18
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: LIST
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: LIST
49572: PPUSH
49573: CALL_OW 69
49577: NOT
49578: PUSH
49579: LD_INT 22
49581: PUSH
49582: LD_VAR 0 16
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 2
49593: PUSH
49594: LD_INT 30
49596: PUSH
49597: LD_INT 32
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 30
49606: PUSH
49607: LD_INT 33
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: LIST
49618: PUSH
49619: LD_INT 91
49621: PUSH
49622: LD_VAR 0 1
49626: PUSH
49627: LD_INT 12
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: LIST
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: LIST
49639: PUSH
49640: EMPTY
49641: LIST
49642: PPUSH
49643: CALL_OW 69
49647: PUSH
49648: LD_INT 2
49650: GREATER
49651: AND
49652: IFFALSE 49675
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49654: LD_ADDR_VAR 0 18
49658: PUSH
49659: LD_INT 11
49661: PUSH
49662: LD_INT 30
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_VAR 0 12
49673: ARRAY
49674: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49675: LD_VAR 0 18
49679: NOT
49680: PUSH
49681: LD_INT 40
49683: PPUSH
49684: LD_VAR 0 16
49688: PPUSH
49689: CALL_OW 321
49693: PUSH
49694: LD_INT 2
49696: EQUAL
49697: AND
49698: PUSH
49699: LD_INT 7
49701: PUSH
49702: LD_VAR 0 5
49706: IN
49707: PUSH
49708: LD_INT 28
49710: PUSH
49711: LD_VAR 0 5
49715: IN
49716: OR
49717: PUSH
49718: LD_INT 45
49720: PUSH
49721: LD_VAR 0 5
49725: IN
49726: OR
49727: AND
49728: IFFALSE 49982
// begin hex := GetHexInfo ( x , y ) ;
49730: LD_ADDR_VAR 0 4
49734: PUSH
49735: LD_VAR 0 10
49739: PPUSH
49740: LD_VAR 0 11
49744: PPUSH
49745: CALL_OW 546
49749: ST_TO_ADDR
// if hex [ 1 ] then
49750: LD_VAR 0 4
49754: PUSH
49755: LD_INT 1
49757: ARRAY
49758: IFFALSE 49762
// exit ;
49760: GO 50165
// height := hex [ 2 ] ;
49762: LD_ADDR_VAR 0 15
49766: PUSH
49767: LD_VAR 0 4
49771: PUSH
49772: LD_INT 2
49774: ARRAY
49775: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49776: LD_ADDR_VAR 0 14
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: LD_INT 2
49786: PUSH
49787: LD_INT 3
49789: PUSH
49790: LD_INT 5
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: ST_TO_ADDR
// for i in tmp do
49799: LD_ADDR_VAR 0 8
49803: PUSH
49804: LD_VAR 0 14
49808: PUSH
49809: FOR_IN
49810: IFFALSE 49980
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49812: LD_ADDR_VAR 0 9
49816: PUSH
49817: LD_VAR 0 10
49821: PPUSH
49822: LD_VAR 0 8
49826: PPUSH
49827: LD_INT 5
49829: PPUSH
49830: CALL_OW 272
49834: PUSH
49835: LD_VAR 0 11
49839: PPUSH
49840: LD_VAR 0 8
49844: PPUSH
49845: LD_INT 5
49847: PPUSH
49848: CALL_OW 273
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49857: LD_VAR 0 9
49861: PUSH
49862: LD_INT 1
49864: ARRAY
49865: PPUSH
49866: LD_VAR 0 9
49870: PUSH
49871: LD_INT 2
49873: ARRAY
49874: PPUSH
49875: CALL_OW 488
49879: IFFALSE 49978
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49881: LD_ADDR_VAR 0 4
49885: PUSH
49886: LD_VAR 0 9
49890: PUSH
49891: LD_INT 1
49893: ARRAY
49894: PPUSH
49895: LD_VAR 0 9
49899: PUSH
49900: LD_INT 2
49902: ARRAY
49903: PPUSH
49904: CALL_OW 546
49908: ST_TO_ADDR
// if hex [ 1 ] then
49909: LD_VAR 0 4
49913: PUSH
49914: LD_INT 1
49916: ARRAY
49917: IFFALSE 49921
// continue ;
49919: GO 49809
// h := hex [ 2 ] ;
49921: LD_ADDR_VAR 0 13
49925: PUSH
49926: LD_VAR 0 4
49930: PUSH
49931: LD_INT 2
49933: ARRAY
49934: ST_TO_ADDR
// if h + 7 < height then
49935: LD_VAR 0 13
49939: PUSH
49940: LD_INT 7
49942: PLUS
49943: PUSH
49944: LD_VAR 0 15
49948: LESS
49949: IFFALSE 49978
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49951: LD_ADDR_VAR 0 18
49955: PUSH
49956: LD_INT 7
49958: PUSH
49959: LD_INT 28
49961: PUSH
49962: LD_INT 45
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: LIST
49969: PUSH
49970: LD_VAR 0 12
49974: ARRAY
49975: ST_TO_ADDR
// break ;
49976: GO 49980
// end ; end ; end ;
49978: GO 49809
49980: POP
49981: POP
// end ; if not weapon then
49982: LD_VAR 0 18
49986: NOT
49987: IFFALSE 50047
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49989: LD_ADDR_VAR 0 5
49993: PUSH
49994: LD_VAR 0 5
49998: PUSH
49999: LD_INT 11
50001: PUSH
50002: LD_INT 30
50004: PUSH
50005: LD_INT 49
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: LIST
50012: DIFF
50013: ST_TO_ADDR
// if not list then
50014: LD_VAR 0 5
50018: NOT
50019: IFFALSE 50023
// exit ;
50021: GO 50165
// weapon := list [ rand ( 1 , list ) ] ;
50023: LD_ADDR_VAR 0 18
50027: PUSH
50028: LD_VAR 0 5
50032: PUSH
50033: LD_INT 1
50035: PPUSH
50036: LD_VAR 0 5
50040: PPUSH
50041: CALL_OW 12
50045: ARRAY
50046: ST_TO_ADDR
// end ; if weapon then
50047: LD_VAR 0 18
50051: IFFALSE 50165
// begin tmp := CostOfWeapon ( weapon ) ;
50053: LD_ADDR_VAR 0 14
50057: PUSH
50058: LD_VAR 0 18
50062: PPUSH
50063: CALL_OW 451
50067: ST_TO_ADDR
// j := GetBase ( tower ) ;
50068: LD_ADDR_VAR 0 9
50072: PUSH
50073: LD_VAR 0 1
50077: PPUSH
50078: CALL_OW 274
50082: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50083: LD_VAR 0 9
50087: PPUSH
50088: LD_INT 1
50090: PPUSH
50091: CALL_OW 275
50095: PUSH
50096: LD_VAR 0 14
50100: PUSH
50101: LD_INT 1
50103: ARRAY
50104: GREATEREQUAL
50105: PUSH
50106: LD_VAR 0 9
50110: PPUSH
50111: LD_INT 2
50113: PPUSH
50114: CALL_OW 275
50118: PUSH
50119: LD_VAR 0 14
50123: PUSH
50124: LD_INT 2
50126: ARRAY
50127: GREATEREQUAL
50128: AND
50129: PUSH
50130: LD_VAR 0 9
50134: PPUSH
50135: LD_INT 3
50137: PPUSH
50138: CALL_OW 275
50142: PUSH
50143: LD_VAR 0 14
50147: PUSH
50148: LD_INT 3
50150: ARRAY
50151: GREATEREQUAL
50152: AND
50153: IFFALSE 50165
// result := weapon ;
50155: LD_ADDR_VAR 0 3
50159: PUSH
50160: LD_VAR 0 18
50164: ST_TO_ADDR
// end ; end ;
50165: LD_VAR 0 3
50169: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50170: LD_INT 0
50172: PPUSH
50173: PPUSH
// result := true ;
50174: LD_ADDR_VAR 0 3
50178: PUSH
50179: LD_INT 1
50181: ST_TO_ADDR
// if array1 = array2 then
50182: LD_VAR 0 1
50186: PUSH
50187: LD_VAR 0 2
50191: EQUAL
50192: IFFALSE 50252
// begin for i = 1 to array1 do
50194: LD_ADDR_VAR 0 4
50198: PUSH
50199: DOUBLE
50200: LD_INT 1
50202: DEC
50203: ST_TO_ADDR
50204: LD_VAR 0 1
50208: PUSH
50209: FOR_TO
50210: IFFALSE 50248
// if array1 [ i ] <> array2 [ i ] then
50212: LD_VAR 0 1
50216: PUSH
50217: LD_VAR 0 4
50221: ARRAY
50222: PUSH
50223: LD_VAR 0 2
50227: PUSH
50228: LD_VAR 0 4
50232: ARRAY
50233: NONEQUAL
50234: IFFALSE 50246
// begin result := false ;
50236: LD_ADDR_VAR 0 3
50240: PUSH
50241: LD_INT 0
50243: ST_TO_ADDR
// break ;
50244: GO 50248
// end ;
50246: GO 50209
50248: POP
50249: POP
// end else
50250: GO 50260
// result := false ;
50252: LD_ADDR_VAR 0 3
50256: PUSH
50257: LD_INT 0
50259: ST_TO_ADDR
// end ;
50260: LD_VAR 0 3
50264: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50265: LD_INT 0
50267: PPUSH
50268: PPUSH
// if not array1 or not array2 then
50269: LD_VAR 0 1
50273: NOT
50274: PUSH
50275: LD_VAR 0 2
50279: NOT
50280: OR
50281: IFFALSE 50285
// exit ;
50283: GO 50349
// result := true ;
50285: LD_ADDR_VAR 0 3
50289: PUSH
50290: LD_INT 1
50292: ST_TO_ADDR
// for i = 1 to array1 do
50293: LD_ADDR_VAR 0 4
50297: PUSH
50298: DOUBLE
50299: LD_INT 1
50301: DEC
50302: ST_TO_ADDR
50303: LD_VAR 0 1
50307: PUSH
50308: FOR_TO
50309: IFFALSE 50347
// if array1 [ i ] <> array2 [ i ] then
50311: LD_VAR 0 1
50315: PUSH
50316: LD_VAR 0 4
50320: ARRAY
50321: PUSH
50322: LD_VAR 0 2
50326: PUSH
50327: LD_VAR 0 4
50331: ARRAY
50332: NONEQUAL
50333: IFFALSE 50345
// begin result := false ;
50335: LD_ADDR_VAR 0 3
50339: PUSH
50340: LD_INT 0
50342: ST_TO_ADDR
// break ;
50343: GO 50347
// end ;
50345: GO 50308
50347: POP
50348: POP
// end ;
50349: LD_VAR 0 3
50353: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50354: LD_INT 0
50356: PPUSH
50357: PPUSH
50358: PPUSH
// pom := GetBase ( fac ) ;
50359: LD_ADDR_VAR 0 5
50363: PUSH
50364: LD_VAR 0 1
50368: PPUSH
50369: CALL_OW 274
50373: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50374: LD_ADDR_VAR 0 4
50378: PUSH
50379: LD_VAR 0 2
50383: PUSH
50384: LD_INT 1
50386: ARRAY
50387: PPUSH
50388: LD_VAR 0 2
50392: PUSH
50393: LD_INT 2
50395: ARRAY
50396: PPUSH
50397: LD_VAR 0 2
50401: PUSH
50402: LD_INT 3
50404: ARRAY
50405: PPUSH
50406: LD_VAR 0 2
50410: PUSH
50411: LD_INT 4
50413: ARRAY
50414: PPUSH
50415: CALL_OW 449
50419: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50420: LD_ADDR_VAR 0 3
50424: PUSH
50425: LD_VAR 0 5
50429: PPUSH
50430: LD_INT 1
50432: PPUSH
50433: CALL_OW 275
50437: PUSH
50438: LD_VAR 0 4
50442: PUSH
50443: LD_INT 1
50445: ARRAY
50446: GREATEREQUAL
50447: PUSH
50448: LD_VAR 0 5
50452: PPUSH
50453: LD_INT 2
50455: PPUSH
50456: CALL_OW 275
50460: PUSH
50461: LD_VAR 0 4
50465: PUSH
50466: LD_INT 2
50468: ARRAY
50469: GREATEREQUAL
50470: AND
50471: PUSH
50472: LD_VAR 0 5
50476: PPUSH
50477: LD_INT 3
50479: PPUSH
50480: CALL_OW 275
50484: PUSH
50485: LD_VAR 0 4
50489: PUSH
50490: LD_INT 3
50492: ARRAY
50493: GREATEREQUAL
50494: AND
50495: ST_TO_ADDR
// end ;
50496: LD_VAR 0 3
50500: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50501: LD_INT 0
50503: PPUSH
50504: PPUSH
50505: PPUSH
50506: PPUSH
// pom := GetBase ( building ) ;
50507: LD_ADDR_VAR 0 3
50511: PUSH
50512: LD_VAR 0 1
50516: PPUSH
50517: CALL_OW 274
50521: ST_TO_ADDR
// if not pom then
50522: LD_VAR 0 3
50526: NOT
50527: IFFALSE 50531
// exit ;
50529: GO 50701
// btype := GetBType ( building ) ;
50531: LD_ADDR_VAR 0 5
50535: PUSH
50536: LD_VAR 0 1
50540: PPUSH
50541: CALL_OW 266
50545: ST_TO_ADDR
// if btype = b_armoury then
50546: LD_VAR 0 5
50550: PUSH
50551: LD_INT 4
50553: EQUAL
50554: IFFALSE 50564
// btype := b_barracks ;
50556: LD_ADDR_VAR 0 5
50560: PUSH
50561: LD_INT 5
50563: ST_TO_ADDR
// if btype = b_depot then
50564: LD_VAR 0 5
50568: PUSH
50569: LD_INT 0
50571: EQUAL
50572: IFFALSE 50582
// btype := b_warehouse ;
50574: LD_ADDR_VAR 0 5
50578: PUSH
50579: LD_INT 1
50581: ST_TO_ADDR
// if btype = b_workshop then
50582: LD_VAR 0 5
50586: PUSH
50587: LD_INT 2
50589: EQUAL
50590: IFFALSE 50600
// btype := b_factory ;
50592: LD_ADDR_VAR 0 5
50596: PUSH
50597: LD_INT 3
50599: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50600: LD_ADDR_VAR 0 4
50604: PUSH
50605: LD_VAR 0 5
50609: PPUSH
50610: LD_VAR 0 1
50614: PPUSH
50615: CALL_OW 248
50619: PPUSH
50620: CALL_OW 450
50624: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50625: LD_ADDR_VAR 0 2
50629: PUSH
50630: LD_VAR 0 3
50634: PPUSH
50635: LD_INT 1
50637: PPUSH
50638: CALL_OW 275
50642: PUSH
50643: LD_VAR 0 4
50647: PUSH
50648: LD_INT 1
50650: ARRAY
50651: GREATEREQUAL
50652: PUSH
50653: LD_VAR 0 3
50657: PPUSH
50658: LD_INT 2
50660: PPUSH
50661: CALL_OW 275
50665: PUSH
50666: LD_VAR 0 4
50670: PUSH
50671: LD_INT 2
50673: ARRAY
50674: GREATEREQUAL
50675: AND
50676: PUSH
50677: LD_VAR 0 3
50681: PPUSH
50682: LD_INT 3
50684: PPUSH
50685: CALL_OW 275
50689: PUSH
50690: LD_VAR 0 4
50694: PUSH
50695: LD_INT 3
50697: ARRAY
50698: GREATEREQUAL
50699: AND
50700: ST_TO_ADDR
// end ;
50701: LD_VAR 0 2
50705: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50706: LD_INT 0
50708: PPUSH
50709: PPUSH
50710: PPUSH
// pom := GetBase ( building ) ;
50711: LD_ADDR_VAR 0 4
50715: PUSH
50716: LD_VAR 0 1
50720: PPUSH
50721: CALL_OW 274
50725: ST_TO_ADDR
// if not pom then
50726: LD_VAR 0 4
50730: NOT
50731: IFFALSE 50735
// exit ;
50733: GO 50836
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50735: LD_ADDR_VAR 0 5
50739: PUSH
50740: LD_VAR 0 2
50744: PPUSH
50745: LD_VAR 0 1
50749: PPUSH
50750: CALL_OW 248
50754: PPUSH
50755: CALL_OW 450
50759: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50760: LD_ADDR_VAR 0 3
50764: PUSH
50765: LD_VAR 0 4
50769: PPUSH
50770: LD_INT 1
50772: PPUSH
50773: CALL_OW 275
50777: PUSH
50778: LD_VAR 0 5
50782: PUSH
50783: LD_INT 1
50785: ARRAY
50786: GREATEREQUAL
50787: PUSH
50788: LD_VAR 0 4
50792: PPUSH
50793: LD_INT 2
50795: PPUSH
50796: CALL_OW 275
50800: PUSH
50801: LD_VAR 0 5
50805: PUSH
50806: LD_INT 2
50808: ARRAY
50809: GREATEREQUAL
50810: AND
50811: PUSH
50812: LD_VAR 0 4
50816: PPUSH
50817: LD_INT 3
50819: PPUSH
50820: CALL_OW 275
50824: PUSH
50825: LD_VAR 0 5
50829: PUSH
50830: LD_INT 3
50832: ARRAY
50833: GREATEREQUAL
50834: AND
50835: ST_TO_ADDR
// end ;
50836: LD_VAR 0 3
50840: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50841: LD_INT 0
50843: PPUSH
50844: PPUSH
50845: PPUSH
50846: PPUSH
50847: PPUSH
50848: PPUSH
50849: PPUSH
50850: PPUSH
50851: PPUSH
50852: PPUSH
50853: PPUSH
// result := false ;
50854: LD_ADDR_VAR 0 8
50858: PUSH
50859: LD_INT 0
50861: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50862: LD_VAR 0 5
50866: NOT
50867: PUSH
50868: LD_VAR 0 1
50872: NOT
50873: OR
50874: PUSH
50875: LD_VAR 0 2
50879: NOT
50880: OR
50881: PUSH
50882: LD_VAR 0 3
50886: NOT
50887: OR
50888: IFFALSE 50892
// exit ;
50890: GO 51706
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50892: LD_ADDR_VAR 0 14
50896: PUSH
50897: LD_VAR 0 1
50901: PPUSH
50902: LD_VAR 0 2
50906: PPUSH
50907: LD_VAR 0 3
50911: PPUSH
50912: LD_VAR 0 4
50916: PPUSH
50917: LD_VAR 0 5
50921: PUSH
50922: LD_INT 1
50924: ARRAY
50925: PPUSH
50926: CALL_OW 248
50930: PPUSH
50931: LD_INT 0
50933: PPUSH
50934: CALL 52943 0 6
50938: ST_TO_ADDR
// if not hexes then
50939: LD_VAR 0 14
50943: NOT
50944: IFFALSE 50948
// exit ;
50946: GO 51706
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50948: LD_ADDR_VAR 0 17
50952: PUSH
50953: LD_VAR 0 5
50957: PPUSH
50958: LD_INT 22
50960: PUSH
50961: LD_VAR 0 13
50965: PPUSH
50966: CALL_OW 255
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 2
50977: PUSH
50978: LD_INT 30
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 30
50990: PUSH
50991: LD_INT 1
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: LIST
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PPUSH
51007: CALL_OW 72
51011: ST_TO_ADDR
// for i = 1 to hexes do
51012: LD_ADDR_VAR 0 9
51016: PUSH
51017: DOUBLE
51018: LD_INT 1
51020: DEC
51021: ST_TO_ADDR
51022: LD_VAR 0 14
51026: PUSH
51027: FOR_TO
51028: IFFALSE 51704
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51030: LD_ADDR_VAR 0 13
51034: PUSH
51035: LD_VAR 0 14
51039: PUSH
51040: LD_VAR 0 9
51044: ARRAY
51045: PUSH
51046: LD_INT 1
51048: ARRAY
51049: PPUSH
51050: LD_VAR 0 14
51054: PUSH
51055: LD_VAR 0 9
51059: ARRAY
51060: PUSH
51061: LD_INT 2
51063: ARRAY
51064: PPUSH
51065: CALL_OW 428
51069: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51070: LD_VAR 0 14
51074: PUSH
51075: LD_VAR 0 9
51079: ARRAY
51080: PUSH
51081: LD_INT 1
51083: ARRAY
51084: PPUSH
51085: LD_VAR 0 14
51089: PUSH
51090: LD_VAR 0 9
51094: ARRAY
51095: PUSH
51096: LD_INT 2
51098: ARRAY
51099: PPUSH
51100: CALL_OW 351
51104: PUSH
51105: LD_VAR 0 14
51109: PUSH
51110: LD_VAR 0 9
51114: ARRAY
51115: PUSH
51116: LD_INT 1
51118: ARRAY
51119: PPUSH
51120: LD_VAR 0 14
51124: PUSH
51125: LD_VAR 0 9
51129: ARRAY
51130: PUSH
51131: LD_INT 2
51133: ARRAY
51134: PPUSH
51135: CALL_OW 488
51139: NOT
51140: OR
51141: PUSH
51142: LD_VAR 0 13
51146: PPUSH
51147: CALL_OW 247
51151: PUSH
51152: LD_INT 3
51154: EQUAL
51155: OR
51156: IFFALSE 51162
// exit ;
51158: POP
51159: POP
51160: GO 51706
// if not tmp then
51162: LD_VAR 0 13
51166: NOT
51167: IFFALSE 51171
// continue ;
51169: GO 51027
// result := true ;
51171: LD_ADDR_VAR 0 8
51175: PUSH
51176: LD_INT 1
51178: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51179: LD_VAR 0 6
51183: PUSH
51184: LD_VAR 0 13
51188: PPUSH
51189: CALL_OW 247
51193: PUSH
51194: LD_INT 2
51196: EQUAL
51197: AND
51198: PUSH
51199: LD_VAR 0 13
51203: PPUSH
51204: CALL_OW 263
51208: PUSH
51209: LD_INT 1
51211: EQUAL
51212: AND
51213: IFFALSE 51377
// begin if IsDrivenBy ( tmp ) then
51215: LD_VAR 0 13
51219: PPUSH
51220: CALL_OW 311
51224: IFFALSE 51228
// continue ;
51226: GO 51027
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51228: LD_VAR 0 6
51232: PPUSH
51233: LD_INT 3
51235: PUSH
51236: LD_INT 60
51238: PUSH
51239: EMPTY
51240: LIST
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 3
51248: PUSH
51249: LD_INT 55
51251: PUSH
51252: EMPTY
51253: LIST
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PPUSH
51263: CALL_OW 72
51267: IFFALSE 51375
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51269: LD_ADDR_VAR 0 18
51273: PUSH
51274: LD_VAR 0 6
51278: PPUSH
51279: LD_INT 3
51281: PUSH
51282: LD_INT 60
51284: PUSH
51285: EMPTY
51286: LIST
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: PUSH
51295: LD_INT 55
51297: PUSH
51298: EMPTY
51299: LIST
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PPUSH
51309: CALL_OW 72
51313: PUSH
51314: LD_INT 1
51316: ARRAY
51317: ST_TO_ADDR
// if IsInUnit ( driver ) then
51318: LD_VAR 0 18
51322: PPUSH
51323: CALL_OW 310
51327: IFFALSE 51338
// ComExit ( driver ) ;
51329: LD_VAR 0 18
51333: PPUSH
51334: CALL 76648 0 1
// AddComEnterUnit ( driver , tmp ) ;
51338: LD_VAR 0 18
51342: PPUSH
51343: LD_VAR 0 13
51347: PPUSH
51348: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51352: LD_VAR 0 18
51356: PPUSH
51357: LD_VAR 0 7
51361: PPUSH
51362: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51366: LD_VAR 0 18
51370: PPUSH
51371: CALL_OW 181
// end ; continue ;
51375: GO 51027
// end ; if not cleaners or not tmp in cleaners then
51377: LD_VAR 0 6
51381: NOT
51382: PUSH
51383: LD_VAR 0 13
51387: PUSH
51388: LD_VAR 0 6
51392: IN
51393: NOT
51394: OR
51395: IFFALSE 51702
// begin if dep then
51397: LD_VAR 0 17
51401: IFFALSE 51537
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51403: LD_ADDR_VAR 0 16
51407: PUSH
51408: LD_VAR 0 17
51412: PUSH
51413: LD_INT 1
51415: ARRAY
51416: PPUSH
51417: CALL_OW 250
51421: PPUSH
51422: LD_VAR 0 17
51426: PUSH
51427: LD_INT 1
51429: ARRAY
51430: PPUSH
51431: CALL_OW 254
51435: PPUSH
51436: LD_INT 5
51438: PPUSH
51439: CALL_OW 272
51443: PUSH
51444: LD_VAR 0 17
51448: PUSH
51449: LD_INT 1
51451: ARRAY
51452: PPUSH
51453: CALL_OW 251
51457: PPUSH
51458: LD_VAR 0 17
51462: PUSH
51463: LD_INT 1
51465: ARRAY
51466: PPUSH
51467: CALL_OW 254
51471: PPUSH
51472: LD_INT 5
51474: PPUSH
51475: CALL_OW 273
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51484: LD_VAR 0 16
51488: PUSH
51489: LD_INT 1
51491: ARRAY
51492: PPUSH
51493: LD_VAR 0 16
51497: PUSH
51498: LD_INT 2
51500: ARRAY
51501: PPUSH
51502: CALL_OW 488
51506: IFFALSE 51537
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51508: LD_VAR 0 13
51512: PPUSH
51513: LD_VAR 0 16
51517: PUSH
51518: LD_INT 1
51520: ARRAY
51521: PPUSH
51522: LD_VAR 0 16
51526: PUSH
51527: LD_INT 2
51529: ARRAY
51530: PPUSH
51531: CALL_OW 111
// continue ;
51535: GO 51027
// end ; end ; r := GetDir ( tmp ) ;
51537: LD_ADDR_VAR 0 15
51541: PUSH
51542: LD_VAR 0 13
51546: PPUSH
51547: CALL_OW 254
51551: ST_TO_ADDR
// if r = 5 then
51552: LD_VAR 0 15
51556: PUSH
51557: LD_INT 5
51559: EQUAL
51560: IFFALSE 51570
// r := 0 ;
51562: LD_ADDR_VAR 0 15
51566: PUSH
51567: LD_INT 0
51569: ST_TO_ADDR
// for j = r to 5 do
51570: LD_ADDR_VAR 0 10
51574: PUSH
51575: DOUBLE
51576: LD_VAR 0 15
51580: DEC
51581: ST_TO_ADDR
51582: LD_INT 5
51584: PUSH
51585: FOR_TO
51586: IFFALSE 51700
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51588: LD_ADDR_VAR 0 11
51592: PUSH
51593: LD_VAR 0 13
51597: PPUSH
51598: CALL_OW 250
51602: PPUSH
51603: LD_VAR 0 10
51607: PPUSH
51608: LD_INT 2
51610: PPUSH
51611: CALL_OW 272
51615: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51616: LD_ADDR_VAR 0 12
51620: PUSH
51621: LD_VAR 0 13
51625: PPUSH
51626: CALL_OW 251
51630: PPUSH
51631: LD_VAR 0 10
51635: PPUSH
51636: LD_INT 2
51638: PPUSH
51639: CALL_OW 273
51643: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51644: LD_VAR 0 11
51648: PPUSH
51649: LD_VAR 0 12
51653: PPUSH
51654: CALL_OW 488
51658: PUSH
51659: LD_VAR 0 11
51663: PPUSH
51664: LD_VAR 0 12
51668: PPUSH
51669: CALL_OW 428
51673: NOT
51674: AND
51675: IFFALSE 51698
// begin ComMoveXY ( tmp , _x , _y ) ;
51677: LD_VAR 0 13
51681: PPUSH
51682: LD_VAR 0 11
51686: PPUSH
51687: LD_VAR 0 12
51691: PPUSH
51692: CALL_OW 111
// break ;
51696: GO 51700
// end ; end ;
51698: GO 51585
51700: POP
51701: POP
// end ; end ;
51702: GO 51027
51704: POP
51705: POP
// end ;
51706: LD_VAR 0 8
51710: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51711: LD_INT 0
51713: PPUSH
// result := true ;
51714: LD_ADDR_VAR 0 3
51718: PUSH
51719: LD_INT 1
51721: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51722: LD_VAR 0 2
51726: PUSH
51727: LD_INT 24
51729: DOUBLE
51730: EQUAL
51731: IFTRUE 51741
51733: LD_INT 33
51735: DOUBLE
51736: EQUAL
51737: IFTRUE 51741
51739: GO 51766
51741: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51742: LD_ADDR_VAR 0 3
51746: PUSH
51747: LD_INT 32
51749: PPUSH
51750: LD_VAR 0 1
51754: PPUSH
51755: CALL_OW 321
51759: PUSH
51760: LD_INT 2
51762: EQUAL
51763: ST_TO_ADDR
51764: GO 52086
51766: LD_INT 20
51768: DOUBLE
51769: EQUAL
51770: IFTRUE 51774
51772: GO 51799
51774: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51775: LD_ADDR_VAR 0 3
51779: PUSH
51780: LD_INT 6
51782: PPUSH
51783: LD_VAR 0 1
51787: PPUSH
51788: CALL_OW 321
51792: PUSH
51793: LD_INT 2
51795: EQUAL
51796: ST_TO_ADDR
51797: GO 52086
51799: LD_INT 22
51801: DOUBLE
51802: EQUAL
51803: IFTRUE 51813
51805: LD_INT 36
51807: DOUBLE
51808: EQUAL
51809: IFTRUE 51813
51811: GO 51838
51813: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51814: LD_ADDR_VAR 0 3
51818: PUSH
51819: LD_INT 15
51821: PPUSH
51822: LD_VAR 0 1
51826: PPUSH
51827: CALL_OW 321
51831: PUSH
51832: LD_INT 2
51834: EQUAL
51835: ST_TO_ADDR
51836: GO 52086
51838: LD_INT 30
51840: DOUBLE
51841: EQUAL
51842: IFTRUE 51846
51844: GO 51871
51846: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51847: LD_ADDR_VAR 0 3
51851: PUSH
51852: LD_INT 20
51854: PPUSH
51855: LD_VAR 0 1
51859: PPUSH
51860: CALL_OW 321
51864: PUSH
51865: LD_INT 2
51867: EQUAL
51868: ST_TO_ADDR
51869: GO 52086
51871: LD_INT 28
51873: DOUBLE
51874: EQUAL
51875: IFTRUE 51885
51877: LD_INT 21
51879: DOUBLE
51880: EQUAL
51881: IFTRUE 51885
51883: GO 51910
51885: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51886: LD_ADDR_VAR 0 3
51890: PUSH
51891: LD_INT 21
51893: PPUSH
51894: LD_VAR 0 1
51898: PPUSH
51899: CALL_OW 321
51903: PUSH
51904: LD_INT 2
51906: EQUAL
51907: ST_TO_ADDR
51908: GO 52086
51910: LD_INT 16
51912: DOUBLE
51913: EQUAL
51914: IFTRUE 51918
51916: GO 51945
51918: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51919: LD_ADDR_VAR 0 3
51923: PUSH
51924: LD_EXP 58
51928: PPUSH
51929: LD_VAR 0 1
51933: PPUSH
51934: CALL_OW 321
51938: PUSH
51939: LD_INT 2
51941: EQUAL
51942: ST_TO_ADDR
51943: GO 52086
51945: LD_INT 19
51947: DOUBLE
51948: EQUAL
51949: IFTRUE 51959
51951: LD_INT 23
51953: DOUBLE
51954: EQUAL
51955: IFTRUE 51959
51957: GO 51986
51959: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51960: LD_ADDR_VAR 0 3
51964: PUSH
51965: LD_EXP 57
51969: PPUSH
51970: LD_VAR 0 1
51974: PPUSH
51975: CALL_OW 321
51979: PUSH
51980: LD_INT 2
51982: EQUAL
51983: ST_TO_ADDR
51984: GO 52086
51986: LD_INT 17
51988: DOUBLE
51989: EQUAL
51990: IFTRUE 51994
51992: GO 52019
51994: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51995: LD_ADDR_VAR 0 3
51999: PUSH
52000: LD_INT 39
52002: PPUSH
52003: LD_VAR 0 1
52007: PPUSH
52008: CALL_OW 321
52012: PUSH
52013: LD_INT 2
52015: EQUAL
52016: ST_TO_ADDR
52017: GO 52086
52019: LD_INT 18
52021: DOUBLE
52022: EQUAL
52023: IFTRUE 52027
52025: GO 52052
52027: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52028: LD_ADDR_VAR 0 3
52032: PUSH
52033: LD_INT 40
52035: PPUSH
52036: LD_VAR 0 1
52040: PPUSH
52041: CALL_OW 321
52045: PUSH
52046: LD_INT 2
52048: EQUAL
52049: ST_TO_ADDR
52050: GO 52086
52052: LD_INT 27
52054: DOUBLE
52055: EQUAL
52056: IFTRUE 52060
52058: GO 52085
52060: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52061: LD_ADDR_VAR 0 3
52065: PUSH
52066: LD_INT 35
52068: PPUSH
52069: LD_VAR 0 1
52073: PPUSH
52074: CALL_OW 321
52078: PUSH
52079: LD_INT 2
52081: EQUAL
52082: ST_TO_ADDR
52083: GO 52086
52085: POP
// end ;
52086: LD_VAR 0 3
52090: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52091: LD_INT 0
52093: PPUSH
52094: PPUSH
52095: PPUSH
52096: PPUSH
52097: PPUSH
52098: PPUSH
52099: PPUSH
52100: PPUSH
52101: PPUSH
52102: PPUSH
52103: PPUSH
// result := false ;
52104: LD_ADDR_VAR 0 6
52108: PUSH
52109: LD_INT 0
52111: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52112: LD_VAR 0 1
52116: NOT
52117: PUSH
52118: LD_VAR 0 1
52122: PPUSH
52123: CALL_OW 266
52127: PUSH
52128: LD_INT 0
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: IN
52138: NOT
52139: OR
52140: PUSH
52141: LD_VAR 0 2
52145: NOT
52146: OR
52147: PUSH
52148: LD_VAR 0 5
52152: PUSH
52153: LD_INT 0
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: LD_INT 2
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: LD_INT 4
52167: PUSH
52168: LD_INT 5
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: IN
52179: NOT
52180: OR
52181: PUSH
52182: LD_VAR 0 3
52186: PPUSH
52187: LD_VAR 0 4
52191: PPUSH
52192: CALL_OW 488
52196: NOT
52197: OR
52198: IFFALSE 52202
// exit ;
52200: GO 52938
// side := GetSide ( depot ) ;
52202: LD_ADDR_VAR 0 9
52206: PUSH
52207: LD_VAR 0 1
52211: PPUSH
52212: CALL_OW 255
52216: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52217: LD_VAR 0 9
52221: PPUSH
52222: LD_VAR 0 2
52226: PPUSH
52227: CALL 51711 0 2
52231: NOT
52232: IFFALSE 52236
// exit ;
52234: GO 52938
// pom := GetBase ( depot ) ;
52236: LD_ADDR_VAR 0 10
52240: PUSH
52241: LD_VAR 0 1
52245: PPUSH
52246: CALL_OW 274
52250: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52251: LD_ADDR_VAR 0 11
52255: PUSH
52256: LD_VAR 0 2
52260: PPUSH
52261: LD_VAR 0 1
52265: PPUSH
52266: CALL_OW 248
52270: PPUSH
52271: CALL_OW 450
52275: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52276: LD_VAR 0 10
52280: PPUSH
52281: LD_INT 1
52283: PPUSH
52284: CALL_OW 275
52288: PUSH
52289: LD_VAR 0 11
52293: PUSH
52294: LD_INT 1
52296: ARRAY
52297: GREATEREQUAL
52298: PUSH
52299: LD_VAR 0 10
52303: PPUSH
52304: LD_INT 2
52306: PPUSH
52307: CALL_OW 275
52311: PUSH
52312: LD_VAR 0 11
52316: PUSH
52317: LD_INT 2
52319: ARRAY
52320: GREATEREQUAL
52321: AND
52322: PUSH
52323: LD_VAR 0 10
52327: PPUSH
52328: LD_INT 3
52330: PPUSH
52331: CALL_OW 275
52335: PUSH
52336: LD_VAR 0 11
52340: PUSH
52341: LD_INT 3
52343: ARRAY
52344: GREATEREQUAL
52345: AND
52346: NOT
52347: IFFALSE 52351
// exit ;
52349: GO 52938
// if GetBType ( depot ) = b_depot then
52351: LD_VAR 0 1
52355: PPUSH
52356: CALL_OW 266
52360: PUSH
52361: LD_INT 0
52363: EQUAL
52364: IFFALSE 52376
// dist := 28 else
52366: LD_ADDR_VAR 0 14
52370: PUSH
52371: LD_INT 28
52373: ST_TO_ADDR
52374: GO 52384
// dist := 36 ;
52376: LD_ADDR_VAR 0 14
52380: PUSH
52381: LD_INT 36
52383: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52384: LD_VAR 0 1
52388: PPUSH
52389: LD_VAR 0 3
52393: PPUSH
52394: LD_VAR 0 4
52398: PPUSH
52399: CALL_OW 297
52403: PUSH
52404: LD_VAR 0 14
52408: GREATER
52409: IFFALSE 52413
// exit ;
52411: GO 52938
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52413: LD_ADDR_VAR 0 12
52417: PUSH
52418: LD_VAR 0 2
52422: PPUSH
52423: LD_VAR 0 3
52427: PPUSH
52428: LD_VAR 0 4
52432: PPUSH
52433: LD_VAR 0 5
52437: PPUSH
52438: LD_VAR 0 1
52442: PPUSH
52443: CALL_OW 248
52447: PPUSH
52448: LD_INT 0
52450: PPUSH
52451: CALL 52943 0 6
52455: ST_TO_ADDR
// if not hexes then
52456: LD_VAR 0 12
52460: NOT
52461: IFFALSE 52465
// exit ;
52463: GO 52938
// hex := GetHexInfo ( x , y ) ;
52465: LD_ADDR_VAR 0 15
52469: PUSH
52470: LD_VAR 0 3
52474: PPUSH
52475: LD_VAR 0 4
52479: PPUSH
52480: CALL_OW 546
52484: ST_TO_ADDR
// if hex [ 1 ] then
52485: LD_VAR 0 15
52489: PUSH
52490: LD_INT 1
52492: ARRAY
52493: IFFALSE 52497
// exit ;
52495: GO 52938
// height := hex [ 2 ] ;
52497: LD_ADDR_VAR 0 13
52501: PUSH
52502: LD_VAR 0 15
52506: PUSH
52507: LD_INT 2
52509: ARRAY
52510: ST_TO_ADDR
// for i = 1 to hexes do
52511: LD_ADDR_VAR 0 7
52515: PUSH
52516: DOUBLE
52517: LD_INT 1
52519: DEC
52520: ST_TO_ADDR
52521: LD_VAR 0 12
52525: PUSH
52526: FOR_TO
52527: IFFALSE 52857
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52529: LD_VAR 0 12
52533: PUSH
52534: LD_VAR 0 7
52538: ARRAY
52539: PUSH
52540: LD_INT 1
52542: ARRAY
52543: PPUSH
52544: LD_VAR 0 12
52548: PUSH
52549: LD_VAR 0 7
52553: ARRAY
52554: PUSH
52555: LD_INT 2
52557: ARRAY
52558: PPUSH
52559: CALL_OW 488
52563: NOT
52564: PUSH
52565: LD_VAR 0 12
52569: PUSH
52570: LD_VAR 0 7
52574: ARRAY
52575: PUSH
52576: LD_INT 1
52578: ARRAY
52579: PPUSH
52580: LD_VAR 0 12
52584: PUSH
52585: LD_VAR 0 7
52589: ARRAY
52590: PUSH
52591: LD_INT 2
52593: ARRAY
52594: PPUSH
52595: CALL_OW 428
52599: PUSH
52600: LD_INT 0
52602: GREATER
52603: OR
52604: PUSH
52605: LD_VAR 0 12
52609: PUSH
52610: LD_VAR 0 7
52614: ARRAY
52615: PUSH
52616: LD_INT 1
52618: ARRAY
52619: PPUSH
52620: LD_VAR 0 12
52624: PUSH
52625: LD_VAR 0 7
52629: ARRAY
52630: PUSH
52631: LD_INT 2
52633: ARRAY
52634: PPUSH
52635: CALL_OW 351
52639: OR
52640: IFFALSE 52646
// exit ;
52642: POP
52643: POP
52644: GO 52938
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52646: LD_ADDR_VAR 0 8
52650: PUSH
52651: LD_VAR 0 12
52655: PUSH
52656: LD_VAR 0 7
52660: ARRAY
52661: PUSH
52662: LD_INT 1
52664: ARRAY
52665: PPUSH
52666: LD_VAR 0 12
52670: PUSH
52671: LD_VAR 0 7
52675: ARRAY
52676: PUSH
52677: LD_INT 2
52679: ARRAY
52680: PPUSH
52681: CALL_OW 546
52685: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52686: LD_VAR 0 8
52690: PUSH
52691: LD_INT 1
52693: ARRAY
52694: PUSH
52695: LD_VAR 0 8
52699: PUSH
52700: LD_INT 2
52702: ARRAY
52703: PUSH
52704: LD_VAR 0 13
52708: PUSH
52709: LD_INT 2
52711: PLUS
52712: GREATER
52713: OR
52714: PUSH
52715: LD_VAR 0 8
52719: PUSH
52720: LD_INT 2
52722: ARRAY
52723: PUSH
52724: LD_VAR 0 13
52728: PUSH
52729: LD_INT 2
52731: MINUS
52732: LESS
52733: OR
52734: PUSH
52735: LD_VAR 0 8
52739: PUSH
52740: LD_INT 3
52742: ARRAY
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: LD_INT 8
52749: PUSH
52750: LD_INT 9
52752: PUSH
52753: LD_INT 10
52755: PUSH
52756: LD_INT 11
52758: PUSH
52759: LD_INT 12
52761: PUSH
52762: LD_INT 13
52764: PUSH
52765: LD_INT 16
52767: PUSH
52768: LD_INT 17
52770: PUSH
52771: LD_INT 18
52773: PUSH
52774: LD_INT 19
52776: PUSH
52777: LD_INT 20
52779: PUSH
52780: LD_INT 21
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: LIST
52787: LIST
52788: LIST
52789: LIST
52790: LIST
52791: LIST
52792: LIST
52793: LIST
52794: LIST
52795: LIST
52796: LIST
52797: IN
52798: NOT
52799: OR
52800: PUSH
52801: LD_VAR 0 8
52805: PUSH
52806: LD_INT 5
52808: ARRAY
52809: NOT
52810: OR
52811: PUSH
52812: LD_VAR 0 8
52816: PUSH
52817: LD_INT 6
52819: ARRAY
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 2
52826: PUSH
52827: LD_INT 7
52829: PUSH
52830: LD_INT 9
52832: PUSH
52833: LD_INT 10
52835: PUSH
52836: LD_INT 11
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: IN
52847: NOT
52848: OR
52849: IFFALSE 52855
// exit ;
52851: POP
52852: POP
52853: GO 52938
// end ;
52855: GO 52526
52857: POP
52858: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52859: LD_VAR 0 9
52863: PPUSH
52864: LD_VAR 0 3
52868: PPUSH
52869: LD_VAR 0 4
52873: PPUSH
52874: LD_INT 20
52876: PPUSH
52877: CALL 44884 0 4
52881: PUSH
52882: LD_INT 4
52884: ARRAY
52885: IFFALSE 52889
// exit ;
52887: GO 52938
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52889: LD_VAR 0 2
52893: PUSH
52894: LD_INT 29
52896: PUSH
52897: LD_INT 30
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: IN
52904: PUSH
52905: LD_VAR 0 3
52909: PPUSH
52910: LD_VAR 0 4
52914: PPUSH
52915: LD_VAR 0 9
52919: PPUSH
52920: CALL_OW 440
52924: NOT
52925: AND
52926: IFFALSE 52930
// exit ;
52928: GO 52938
// result := true ;
52930: LD_ADDR_VAR 0 6
52934: PUSH
52935: LD_INT 1
52937: ST_TO_ADDR
// end ;
52938: LD_VAR 0 6
52942: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52943: LD_INT 0
52945: PPUSH
52946: PPUSH
52947: PPUSH
52948: PPUSH
52949: PPUSH
52950: PPUSH
52951: PPUSH
52952: PPUSH
52953: PPUSH
52954: PPUSH
52955: PPUSH
52956: PPUSH
52957: PPUSH
52958: PPUSH
52959: PPUSH
52960: PPUSH
52961: PPUSH
52962: PPUSH
52963: PPUSH
52964: PPUSH
52965: PPUSH
52966: PPUSH
52967: PPUSH
52968: PPUSH
52969: PPUSH
52970: PPUSH
52971: PPUSH
52972: PPUSH
52973: PPUSH
52974: PPUSH
52975: PPUSH
52976: PPUSH
52977: PPUSH
52978: PPUSH
52979: PPUSH
52980: PPUSH
52981: PPUSH
52982: PPUSH
52983: PPUSH
52984: PPUSH
52985: PPUSH
52986: PPUSH
52987: PPUSH
52988: PPUSH
52989: PPUSH
52990: PPUSH
52991: PPUSH
52992: PPUSH
52993: PPUSH
52994: PPUSH
52995: PPUSH
52996: PPUSH
52997: PPUSH
52998: PPUSH
52999: PPUSH
53000: PPUSH
53001: PPUSH
53002: PPUSH
// result = [ ] ;
53003: LD_ADDR_VAR 0 7
53007: PUSH
53008: EMPTY
53009: ST_TO_ADDR
// temp_list = [ ] ;
53010: LD_ADDR_VAR 0 9
53014: PUSH
53015: EMPTY
53016: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53017: LD_VAR 0 4
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: LD_INT 3
53033: PUSH
53034: LD_INT 4
53036: PUSH
53037: LD_INT 5
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: IN
53048: NOT
53049: PUSH
53050: LD_VAR 0 1
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: IN
53065: PUSH
53066: LD_VAR 0 5
53070: PUSH
53071: LD_INT 1
53073: PUSH
53074: LD_INT 2
53076: PUSH
53077: LD_INT 3
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: LIST
53084: IN
53085: NOT
53086: AND
53087: OR
53088: IFFALSE 53092
// exit ;
53090: GO 71483
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53092: LD_VAR 0 1
53096: PUSH
53097: LD_INT 6
53099: PUSH
53100: LD_INT 7
53102: PUSH
53103: LD_INT 8
53105: PUSH
53106: LD_INT 13
53108: PUSH
53109: LD_INT 12
53111: PUSH
53112: LD_INT 15
53114: PUSH
53115: LD_INT 11
53117: PUSH
53118: LD_INT 14
53120: PUSH
53121: LD_INT 10
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: IN
53135: IFFALSE 53145
// btype = b_lab ;
53137: LD_ADDR_VAR 0 1
53141: PUSH
53142: LD_INT 6
53144: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53145: LD_VAR 0 6
53149: PUSH
53150: LD_INT 0
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 2
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: IN
53164: NOT
53165: PUSH
53166: LD_VAR 0 1
53170: PUSH
53171: LD_INT 0
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 2
53179: PUSH
53180: LD_INT 3
53182: PUSH
53183: LD_INT 6
53185: PUSH
53186: LD_INT 36
53188: PUSH
53189: LD_INT 4
53191: PUSH
53192: LD_INT 5
53194: PUSH
53195: LD_INT 31
53197: PUSH
53198: LD_INT 32
53200: PUSH
53201: LD_INT 33
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: IN
53217: NOT
53218: PUSH
53219: LD_VAR 0 6
53223: PUSH
53224: LD_INT 1
53226: EQUAL
53227: AND
53228: OR
53229: PUSH
53230: LD_VAR 0 1
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: LD_INT 3
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: IN
53245: NOT
53246: PUSH
53247: LD_VAR 0 6
53251: PUSH
53252: LD_INT 2
53254: EQUAL
53255: AND
53256: OR
53257: IFFALSE 53267
// mode = 0 ;
53259: LD_ADDR_VAR 0 6
53263: PUSH
53264: LD_INT 0
53266: ST_TO_ADDR
// case mode of 0 :
53267: LD_VAR 0 6
53271: PUSH
53272: LD_INT 0
53274: DOUBLE
53275: EQUAL
53276: IFTRUE 53280
53278: GO 64733
53280: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53281: LD_ADDR_VAR 0 11
53285: PUSH
53286: LD_INT 0
53288: PUSH
53289: LD_INT 0
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: LD_INT 1
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: PUSH
53310: LD_INT 0
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 1
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: LD_INT 2
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 1
53388: NEG
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: PUSH
53394: LD_INT 1
53396: PUSH
53397: LD_INT 2
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 1
53427: PUSH
53428: LD_INT 3
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: LD_INT 3
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 1
53447: NEG
53448: PUSH
53449: LD_INT 2
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53474: LD_ADDR_VAR 0 12
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 0
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 0
53491: PUSH
53492: LD_INT 1
53494: NEG
53495: PUSH
53496: EMPTY
53497: LIST
53498: LIST
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: EMPTY
53507: LIST
53508: LIST
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: NEG
53533: PUSH
53534: LD_INT 0
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: PUSH
53556: LD_INT 1
53558: NEG
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: PUSH
53567: LD_INT 0
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 2
53576: PUSH
53577: LD_INT 1
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 1
53586: NEG
53587: PUSH
53588: LD_INT 1
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: PUSH
53595: LD_INT 2
53597: NEG
53598: PUSH
53599: LD_INT 0
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: LD_INT 1
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 3
53631: NEG
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 3
53642: NEG
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53670: LD_ADDR_VAR 0 13
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: PUSH
53699: LD_INT 0
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 1
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 1
53728: NEG
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: LD_INT 2
53755: NEG
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: LD_INT 1
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 2
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 1
53783: PUSH
53784: LD_INT 2
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: LD_INT 1
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: LD_INT 2
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: LD_INT 3
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 3
53829: NEG
53830: PUSH
53831: LD_INT 2
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 3
53841: NEG
53842: PUSH
53843: LD_INT 3
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53869: LD_ADDR_VAR 0 14
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 0
53886: PUSH
53887: LD_INT 1
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: LD_INT 0
53900: PUSH
53901: EMPTY
53902: LIST
53903: LIST
53904: PUSH
53905: LD_INT 1
53907: PUSH
53908: LD_INT 1
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 1
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: LD_INT 1
53942: NEG
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 1
53950: NEG
53951: PUSH
53952: LD_INT 2
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 1
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 1
53984: PUSH
53985: LD_INT 2
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 0
53994: PUSH
53995: LD_INT 2
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: NEG
54005: PUSH
54006: LD_INT 1
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: LD_INT 3
54019: NEG
54020: PUSH
54021: EMPTY
54022: LIST
54023: LIST
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: LD_INT 3
54030: NEG
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 2
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: LIST
54056: LIST
54057: LIST
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54065: LD_ADDR_VAR 0 15
54069: PUSH
54070: LD_INT 0
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 1
54093: PUSH
54094: LD_INT 0
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 1
54103: PUSH
54104: LD_INT 1
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: LD_INT 1
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: EMPTY
54129: LIST
54130: LIST
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: LD_INT 1
54138: NEG
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: LD_INT 1
54149: NEG
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: LD_INT 1
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: LD_INT 1
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: PUSH
54186: LD_INT 2
54188: NEG
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 2
54199: NEG
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 1
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 3
54222: PUSH
54223: LD_INT 0
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: LD_INT 3
54232: PUSH
54233: LD_INT 1
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54258: LD_ADDR_VAR 0 16
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: LD_INT 0
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 1
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 1
54286: PUSH
54287: LD_INT 0
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: LD_INT 1
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 0
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 1
54316: NEG
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: LD_INT 1
54331: NEG
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 2
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 1
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 2
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 1
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 2
54381: NEG
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 2
54393: NEG
54394: PUSH
54395: LD_INT 2
54397: NEG
54398: PUSH
54399: EMPTY
54400: LIST
54401: LIST
54402: PUSH
54403: LD_INT 3
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 3
54415: PUSH
54416: LD_INT 3
54418: PUSH
54419: EMPTY
54420: LIST
54421: LIST
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: LD_INT 3
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: LIST
54450: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54451: LD_ADDR_VAR 0 17
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_INT 1
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: LD_INT 1
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 0
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 1
54509: NEG
54510: PUSH
54511: LD_INT 0
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 1
54520: NEG
54521: PUSH
54522: LD_INT 1
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 2
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: LD_INT 2
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: PUSH
54556: LD_INT 1
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: LD_INT 0
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 2
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: EMPTY
54581: LIST
54582: LIST
54583: PUSH
54584: LD_INT 2
54586: PUSH
54587: LD_INT 2
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 1
54596: PUSH
54597: LD_INT 2
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 2
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: NEG
54639: PUSH
54640: LD_INT 1
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 2
54650: NEG
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54681: LD_ADDR_VAR 0 18
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54911: LD_ADDR_VAR 0 19
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55141: LD_ADDR_VAR 0 20
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55371: LD_ADDR_VAR 0 21
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55601: LD_ADDR_VAR 0 22
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55831: LD_ADDR_VAR 0 23
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: LD_INT 3
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: LD_INT 3
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: LD_INT 2
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56111: LD_ADDR_VAR 0 24
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 0
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: LD_INT 1
56131: NEG
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 1
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: LD_INT 1
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: LD_INT 2
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: LD_INT 2
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 1
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 2
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 2
56236: PUSH
56237: LD_INT 1
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 2
56246: PUSH
56247: LD_INT 2
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: LD_INT 2
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 2
56298: NEG
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 2
56310: NEG
56311: PUSH
56312: LD_INT 2
56314: NEG
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: LD_INT 2
56325: NEG
56326: PUSH
56327: EMPTY
56328: LIST
56329: LIST
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 3
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56387: LD_ADDR_VAR 0 25
56391: PUSH
56392: LD_INT 0
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 0
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: EMPTY
56410: LIST
56411: LIST
56412: PUSH
56413: LD_INT 1
56415: PUSH
56416: LD_INT 0
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: LD_INT 1
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: EMPTY
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 0
56435: PUSH
56436: LD_INT 1
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: NEG
56446: PUSH
56447: LD_INT 0
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 1
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 0
56480: PUSH
56481: LD_INT 2
56483: NEG
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 2
56502: PUSH
56503: LD_INT 0
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 2
56512: PUSH
56513: LD_INT 1
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 2
56522: PUSH
56523: LD_INT 2
56525: PUSH
56526: EMPTY
56527: LIST
56528: LIST
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: LD_INT 2
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 0
56542: PUSH
56543: LD_INT 2
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: NEG
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 2
56586: NEG
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 3
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 3
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 2
56618: PUSH
56619: LD_INT 3
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: LD_INT 3
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: LIST
56659: LIST
56660: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56661: LD_ADDR_VAR 0 26
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 0
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: LD_INT 1
56681: NEG
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 1
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 1
56719: NEG
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 1
56730: NEG
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: LD_INT 2
56746: NEG
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 0
56754: PUSH
56755: LD_INT 2
56757: NEG
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: LD_INT 1
56768: NEG
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 2
56776: PUSH
56777: LD_INT 0
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: PUSH
56787: LD_INT 1
56789: PUSH
56790: EMPTY
56791: LIST
56792: LIST
56793: PUSH
56794: LD_INT 2
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 0
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: PUSH
56824: LD_INT 1
56826: NEG
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 2
56837: NEG
56838: PUSH
56839: LD_INT 0
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: LD_INT 1
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 2
56860: NEG
56861: PUSH
56862: LD_INT 2
56864: NEG
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 2
56872: PUSH
56873: LD_INT 3
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: LD_INT 3
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 1
56892: NEG
56893: PUSH
56894: LD_INT 2
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56937: LD_ADDR_VAR 0 27
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: PUSH
56952: LD_INT 0
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: EMPTY
56960: LIST
56961: LIST
56962: PUSH
56963: LD_INT 1
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: LD_INT 1
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: LD_INT 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: NEG
56996: PUSH
56997: LD_INT 0
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: LD_INT 1
57010: NEG
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 2
57033: NEG
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 2
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: PUSH
57063: LD_INT 1
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 2
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: LD_INT 2
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 2
57113: NEG
57114: PUSH
57115: LD_INT 0
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 2
57124: NEG
57125: PUSH
57126: LD_INT 1
57128: NEG
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: NEG
57149: PUSH
57150: LD_INT 2
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: PUSH
57168: LD_INT 3
57170: NEG
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 3
57182: NEG
57183: PUSH
57184: LD_INT 2
57186: NEG
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57217: LD_ADDR_VAR 0 28
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: LD_INT 0
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 1
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 1
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 1
57286: NEG
57287: PUSH
57288: LD_INT 1
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: LD_INT 2
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 0
57310: PUSH
57311: LD_INT 2
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: PUSH
57322: LD_INT 1
57324: NEG
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 2
57332: PUSH
57333: LD_INT 0
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: LD_INT 1
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 1
57362: PUSH
57363: LD_INT 2
57365: PUSH
57366: EMPTY
57367: LIST
57368: LIST
57369: PUSH
57370: LD_INT 0
57372: PUSH
57373: LD_INT 2
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: NEG
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: NEG
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 2
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: LD_INT 2
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: LD_INT 3
57432: NEG
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: NEG
57441: PUSH
57442: LD_INT 3
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 3
57452: NEG
57453: PUSH
57454: LD_INT 1
57456: NEG
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: LD_INT 2
57468: NEG
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57499: LD_ADDR_VAR 0 29
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 2
57665: NEG
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: LD_INT 2
57681: NEG
57682: PUSH
57683: EMPTY
57684: LIST
57685: LIST
57686: PUSH
57687: LD_INT 2
57689: NEG
57690: PUSH
57691: LD_INT 3
57693: NEG
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 2
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 3
57712: PUSH
57713: LD_INT 1
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 3
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: LD_INT 2
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 3
57743: NEG
57744: PUSH
57745: LD_INT 2
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57778: LD_ADDR_VAR 0 30
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 1
57806: PUSH
57807: LD_INT 0
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 1
57816: PUSH
57817: LD_INT 1
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 1
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: LD_INT 1
57851: NEG
57852: PUSH
57853: EMPTY
57854: LIST
57855: LIST
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: LD_INT 2
57863: NEG
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: LD_INT 2
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 1
57882: PUSH
57883: LD_INT 1
57885: NEG
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 2
57893: PUSH
57894: LD_INT 0
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 2
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: PUSH
57914: LD_INT 2
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 1
57923: PUSH
57924: LD_INT 2
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: LD_INT 2
57944: NEG
57945: PUSH
57946: LD_INT 0
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: LD_INT 1
57959: NEG
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 3
57971: NEG
57972: PUSH
57973: EMPTY
57974: LIST
57975: LIST
57976: PUSH
57977: LD_INT 1
57979: PUSH
57980: LD_INT 2
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 3
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 2
58000: PUSH
58001: LD_INT 3
58003: PUSH
58004: EMPTY
58005: LIST
58006: LIST
58007: PUSH
58008: LD_INT 2
58010: NEG
58011: PUSH
58012: LD_INT 1
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 3
58021: NEG
58022: PUSH
58023: LD_INT 1
58025: NEG
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58056: LD_ADDR_VAR 0 31
58060: PUSH
58061: LD_INT 0
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 0
58073: PUSH
58074: LD_INT 1
58076: NEG
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 1
58084: PUSH
58085: LD_INT 0
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: LD_INT 1
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: NEG
58115: PUSH
58116: LD_INT 0
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 1
58129: NEG
58130: PUSH
58131: EMPTY
58132: LIST
58133: LIST
58134: PUSH
58135: LD_INT 1
58137: NEG
58138: PUSH
58139: LD_INT 2
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 1
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: LD_INT 0
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 2
58180: PUSH
58181: LD_INT 2
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: PUSH
58191: LD_INT 2
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 2
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: LD_INT 1
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 2
58221: NEG
58222: PUSH
58223: LD_INT 1
58225: NEG
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 2
58233: NEG
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 2
58245: NEG
58246: PUSH
58247: LD_INT 3
58249: NEG
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: LD_INT 1
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: LD_INT 3
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 1
58288: NEG
58289: PUSH
58290: LD_INT 2
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 3
58299: NEG
58300: PUSH
58301: LD_INT 2
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58334: LD_ADDR_VAR 0 32
58338: PUSH
58339: LD_INT 0
58341: PUSH
58342: LD_INT 0
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: LD_INT 1
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: LD_INT 0
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: LD_INT 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 1
58392: NEG
58393: PUSH
58394: LD_INT 0
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 1
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 2
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: LD_INT 2
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 1
58438: PUSH
58439: LD_INT 1
58441: NEG
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 2
58459: PUSH
58460: LD_INT 2
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: LD_INT 2
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 0
58479: PUSH
58480: LD_INT 2
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: EMPTY
58495: LIST
58496: LIST
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: LD_INT 1
58515: NEG
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: LD_INT 3
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: LD_INT 2
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 3
58546: PUSH
58547: LD_INT 2
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 2
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: NEG
58567: PUSH
58568: LD_INT 1
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 3
58577: NEG
58578: PUSH
58579: LD_INT 1
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58612: LD_ADDR_VAR 0 33
58616: PUSH
58617: LD_INT 0
58619: PUSH
58620: LD_INT 0
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 1
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: LD_INT 0
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: LD_INT 2
58767: NEG
58768: PUSH
58769: LD_INT 0
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: PUSH
58776: LD_INT 2
58778: NEG
58779: PUSH
58780: LD_INT 1
58782: NEG
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 2
58790: NEG
58791: PUSH
58792: LD_INT 2
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 2
58802: NEG
58803: PUSH
58804: LD_INT 3
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 2
58814: PUSH
58815: LD_INT 1
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 3
58825: PUSH
58826: LD_INT 1
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: LD_INT 1
58835: PUSH
58836: LD_INT 3
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: NEG
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 3
58856: NEG
58857: PUSH
58858: LD_INT 2
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58891: LD_ADDR_VAR 0 34
58895: PUSH
58896: LD_INT 0
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 1
58919: PUSH
58920: LD_INT 0
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 1
58929: PUSH
58930: LD_INT 1
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 1
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: NEG
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 0
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: PUSH
58996: LD_INT 1
58998: NEG
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: LD_INT 1
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: PUSH
59014: LD_INT 2
59016: PUSH
59017: LD_INT 2
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: PUSH
59024: LD_INT 1
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 1
59036: NEG
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 2
59047: NEG
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 2
59070: NEG
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: NEG
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 2
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 3
59105: PUSH
59106: LD_INT 2
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: PUSH
59116: LD_INT 3
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 2
59125: NEG
59126: PUSH
59127: LD_INT 1
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: LD_INT 1
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: LIST
59169: LIST
59170: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59171: LD_ADDR_VAR 0 35
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: LD_INT 0
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 0
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: LD_INT 1
59199: PUSH
59200: LD_INT 0
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: LD_INT 1
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 0
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: LD_INT 1
59229: NEG
59230: PUSH
59231: LD_INT 0
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 1
59240: NEG
59241: PUSH
59242: LD_INT 1
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 2
59262: NEG
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59283: LD_ADDR_VAR 0 36
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: LD_INT 0
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 1
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 1
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: NEG
59353: PUSH
59354: LD_INT 1
59356: NEG
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: PUSH
59362: LD_INT 1
59364: NEG
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: LD_INT 2
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59395: LD_ADDR_VAR 0 37
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: EMPTY
59438: LIST
59439: LIST
59440: PUSH
59441: LD_INT 0
59443: PUSH
59444: LD_INT 1
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 1
59453: NEG
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: LIST
59500: LIST
59501: LIST
59502: LIST
59503: LIST
59504: LIST
59505: LIST
59506: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59507: LD_ADDR_VAR 0 38
59511: PUSH
59512: LD_INT 0
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 0
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: PUSH
59533: LD_INT 1
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: LD_INT 1
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 2
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59619: LD_ADDR_VAR 0 39
59623: PUSH
59624: LD_INT 0
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: EMPTY
59631: LIST
59632: LIST
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: LD_INT 1
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: EMPTY
59683: LIST
59684: LIST
59685: PUSH
59686: LD_INT 1
59688: NEG
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: LD_INT 2
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: LD_INT 2
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59731: LD_ADDR_VAR 0 40
59735: PUSH
59736: LD_INT 0
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 0
59748: PUSH
59749: LD_INT 1
59751: NEG
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 1
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: LD_INT 1
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 0
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: NEG
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: LD_INT 1
59804: NEG
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: LD_INT 1
59812: PUSH
59813: LD_INT 1
59815: NEG
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: LD_INT 1
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: LIST
59842: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59843: LD_ADDR_VAR 0 41
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: LD_INT 0
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 1
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: EMPTY
59876: LIST
59877: LIST
59878: PUSH
59879: LD_INT 1
59881: PUSH
59882: LD_INT 1
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 0
59891: PUSH
59892: LD_INT 1
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PUSH
59899: LD_INT 1
59901: NEG
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: LD_INT 1
59916: NEG
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: PUSH
59922: LD_INT 1
59924: NEG
59925: PUSH
59926: LD_INT 2
59928: NEG
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: LD_INT 1
59939: NEG
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 2
59947: PUSH
59948: LD_INT 0
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: LD_INT 1
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: LD_INT 2
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 1
59977: PUSH
59978: LD_INT 2
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: NEG
59988: PUSH
59989: LD_INT 1
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 2
59998: NEG
59999: PUSH
60000: LD_INT 0
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 2
60009: NEG
60010: PUSH
60011: LD_INT 1
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 2
60021: NEG
60022: PUSH
60023: LD_INT 2
60025: NEG
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 2
60033: NEG
60034: PUSH
60035: LD_INT 3
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 2
60045: PUSH
60046: LD_INT 1
60048: NEG
60049: PUSH
60050: EMPTY
60051: LIST
60052: LIST
60053: PUSH
60054: LD_INT 3
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 3
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 3
60076: PUSH
60077: LD_INT 2
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 3
60086: PUSH
60087: LD_INT 3
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 2
60096: PUSH
60097: LD_INT 3
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: NEG
60107: PUSH
60108: LD_INT 1
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 3
60117: NEG
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 3
60128: NEG
60129: PUSH
60130: LD_INT 1
60132: NEG
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 3
60140: NEG
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 3
60152: NEG
60153: PUSH
60154: LD_INT 3
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: LIST
60170: LIST
60171: LIST
60172: LIST
60173: LIST
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: LIST
60187: LIST
60188: LIST
60189: LIST
60190: LIST
60191: LIST
60192: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60193: LD_ADDR_VAR 0 42
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: LD_INT 0
60203: PUSH
60204: EMPTY
60205: LIST
60206: LIST
60207: PUSH
60208: LD_INT 0
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: LD_INT 0
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PUSH
60229: LD_INT 1
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 0
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 1
60251: NEG
60252: PUSH
60253: LD_INT 0
60255: PUSH
60256: EMPTY
60257: LIST
60258: LIST
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 2
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 0
60286: PUSH
60287: LD_INT 2
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 1
60328: PUSH
60329: LD_INT 2
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 2
60359: NEG
60360: PUSH
60361: LD_INT 1
60363: NEG
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 2
60371: NEG
60372: PUSH
60373: LD_INT 2
60375: NEG
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 2
60383: NEG
60384: PUSH
60385: LD_INT 3
60387: NEG
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: NEG
60396: PUSH
60397: LD_INT 3
60399: NEG
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: LD_INT 3
60429: PUSH
60430: LD_INT 2
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 3
60439: PUSH
60440: LD_INT 3
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 3
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 3
60490: NEG
60491: PUSH
60492: LD_INT 2
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 3
60502: NEG
60503: PUSH
60504: LD_INT 3
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: LIST
60521: LIST
60522: LIST
60523: LIST
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60543: LD_ADDR_VAR 0 43
60547: PUSH
60548: LD_INT 0
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 0
60560: PUSH
60561: LD_INT 1
60563: NEG
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PUSH
60579: LD_INT 1
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 0
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 0
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: LD_INT 1
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: NEG
60625: PUSH
60626: LD_INT 2
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: LD_INT 1
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 2
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: PUSH
60676: LD_INT 1
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 2
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 2
60709: NEG
60710: PUSH
60711: LD_INT 0
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 2
60720: NEG
60721: PUSH
60722: LD_INT 1
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: LD_INT 3
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: LD_INT 3
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: LD_INT 2
60758: NEG
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 2
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 3
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 3
60787: PUSH
60788: LD_INT 1
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 3
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 3
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: LD_INT 2
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: NEG
60829: PUSH
60830: LD_INT 1
60832: PUSH
60833: EMPTY
60834: LIST
60835: LIST
60836: PUSH
60837: LD_INT 3
60839: NEG
60840: PUSH
60841: LD_INT 0
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: LD_INT 3
60850: NEG
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60891: LD_ADDR_VAR 0 44
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: LD_INT 0
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 1
60911: NEG
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: PUSH
60917: LD_INT 1
60919: PUSH
60920: LD_INT 0
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 0
60939: PUSH
60940: LD_INT 1
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: LD_INT 0
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 1
60984: PUSH
60985: LD_INT 1
60987: NEG
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: PUSH
60996: LD_INT 0
60998: PUSH
60999: EMPTY
61000: LIST
61001: LIST
61002: PUSH
61003: LD_INT 2
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 2
61015: PUSH
61016: LD_INT 2
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 1
61025: PUSH
61026: LD_INT 2
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: PUSH
61033: LD_INT 1
61035: NEG
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: LD_INT 0
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: LD_INT 1
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: LD_INT 2
61073: NEG
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: LD_INT 2
61081: NEG
61082: PUSH
61083: LD_INT 3
61085: NEG
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 1
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 3
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 3
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 3
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: LD_INT 3
61134: PUSH
61135: LD_INT 3
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: LD_INT 3
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 2
61154: NEG
61155: PUSH
61156: LD_INT 1
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PUSH
61163: LD_INT 3
61165: NEG
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 3
61176: NEG
61177: PUSH
61178: LD_INT 1
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 3
61188: NEG
61189: PUSH
61190: LD_INT 2
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: LD_INT 3
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61241: LD_ADDR_VAR 0 45
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 0
61258: PUSH
61259: LD_INT 1
61261: NEG
61262: PUSH
61263: EMPTY
61264: LIST
61265: LIST
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: LD_INT 0
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 1
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 0
61289: PUSH
61290: LD_INT 1
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 1
61299: NEG
61300: PUSH
61301: LD_INT 0
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: LD_INT 1
61314: NEG
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 1
61322: NEG
61323: PUSH
61324: LD_INT 2
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 0
61334: PUSH
61335: LD_INT 2
61337: NEG
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: PUSH
61343: LD_INT 1
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 2
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 2
61366: PUSH
61367: LD_INT 2
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: PUSH
61374: LD_INT 1
61376: PUSH
61377: LD_INT 2
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 0
61386: PUSH
61387: LD_INT 2
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: PUSH
61394: LD_INT 1
61396: NEG
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 2
61407: NEG
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: PUSH
61417: LD_INT 2
61419: NEG
61420: PUSH
61421: LD_INT 2
61423: NEG
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 2
61431: NEG
61432: PUSH
61433: LD_INT 3
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: LD_INT 3
61447: NEG
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 3
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 1
61466: PUSH
61467: LD_INT 2
61469: NEG
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 3
61477: PUSH
61478: LD_INT 2
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 3
61487: PUSH
61488: LD_INT 3
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: LD_INT 3
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 3
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 3
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: LD_INT 2
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 3
61538: NEG
61539: PUSH
61540: LD_INT 2
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 3
61550: NEG
61551: PUSH
61552: LD_INT 3
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: LIST
61583: LIST
61584: LIST
61585: LIST
61586: LIST
61587: LIST
61588: LIST
61589: LIST
61590: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61591: LD_ADDR_VAR 0 46
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 1
61611: NEG
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 0
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 1
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: LD_INT 1
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: NEG
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: LD_INT 1
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 1
61672: NEG
61673: PUSH
61674: LD_INT 2
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: LD_INT 2
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 1
61695: PUSH
61696: LD_INT 1
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 2
61706: PUSH
61707: LD_INT 0
61709: PUSH
61710: EMPTY
61711: LIST
61712: LIST
61713: PUSH
61714: LD_INT 2
61716: PUSH
61717: LD_INT 1
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 1
61726: PUSH
61727: LD_INT 2
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: LD_INT 2
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 1
61746: NEG
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: NEG
61758: PUSH
61759: LD_INT 0
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 2
61768: NEG
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: LD_INT 3
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 2
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: LD_INT 1
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 3
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: EMPTY
61830: LIST
61831: LIST
61832: PUSH
61833: LD_INT 3
61835: PUSH
61836: LD_INT 1
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: LD_INT 3
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: LD_INT 3
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: NEG
61866: PUSH
61867: LD_INT 2
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: LD_INT 1
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 3
61887: NEG
61888: PUSH
61889: LD_INT 0
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 3
61898: NEG
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: LIST
61931: LIST
61932: LIST
61933: LIST
61934: LIST
61935: LIST
61936: LIST
61937: LIST
61938: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61939: LD_ADDR_VAR 0 47
61943: PUSH
61944: LD_INT 0
61946: PUSH
61947: LD_INT 0
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 0
61956: PUSH
61957: LD_INT 1
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 1
61967: PUSH
61968: LD_INT 0
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: LD_INT 1
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 1
61997: NEG
61998: PUSH
61999: LD_INT 0
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 1
62012: NEG
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 1
62020: NEG
62021: PUSH
62022: LD_INT 2
62024: NEG
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: PUSH
62030: LD_INT 0
62032: PUSH
62033: LD_INT 2
62035: NEG
62036: PUSH
62037: EMPTY
62038: LIST
62039: LIST
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 2
62054: NEG
62055: PUSH
62056: LD_INT 1
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 2
62066: NEG
62067: PUSH
62068: LD_INT 2
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62090: LD_ADDR_VAR 0 48
62094: PUSH
62095: LD_INT 0
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 1
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: PUSH
62129: LD_INT 1
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 0
62138: PUSH
62139: LD_INT 1
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: NEG
62149: PUSH
62150: LD_INT 0
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: NEG
62160: PUSH
62161: LD_INT 1
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 1
62171: NEG
62172: PUSH
62173: LD_INT 2
62175: NEG
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 0
62183: PUSH
62184: LD_INT 2
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: PUSH
62195: LD_INT 1
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: LD_INT 0
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 2
62215: PUSH
62216: LD_INT 1
62218: PUSH
62219: EMPTY
62220: LIST
62221: LIST
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62237: LD_ADDR_VAR 0 49
62241: PUSH
62242: LD_INT 0
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: LD_INT 1
62257: NEG
62258: PUSH
62259: EMPTY
62260: LIST
62261: LIST
62262: PUSH
62263: LD_INT 1
62265: PUSH
62266: LD_INT 0
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 1
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 1
62295: NEG
62296: PUSH
62297: LD_INT 0
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 1
62306: NEG
62307: PUSH
62308: LD_INT 1
62310: NEG
62311: PUSH
62312: EMPTY
62313: LIST
62314: LIST
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 2
62329: PUSH
62330: LD_INT 0
62332: PUSH
62333: EMPTY
62334: LIST
62335: LIST
62336: PUSH
62337: LD_INT 2
62339: PUSH
62340: LD_INT 1
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 2
62349: PUSH
62350: LD_INT 2
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 1
62359: PUSH
62360: LD_INT 2
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62381: LD_ADDR_VAR 0 50
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: LD_INT 0
62391: PUSH
62392: EMPTY
62393: LIST
62394: LIST
62395: PUSH
62396: LD_INT 0
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: LD_INT 1
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 0
62429: PUSH
62430: LD_INT 1
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 1
62450: NEG
62451: PUSH
62452: LD_INT 1
62454: NEG
62455: PUSH
62456: EMPTY
62457: LIST
62458: LIST
62459: PUSH
62460: LD_INT 2
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 2
62472: PUSH
62473: LD_INT 2
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: LD_INT 2
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 2
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PUSH
62500: LD_INT 1
62502: NEG
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: LIST
62524: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62525: LD_ADDR_VAR 0 51
62529: PUSH
62530: LD_INT 0
62532: PUSH
62533: LD_INT 0
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: LD_INT 1
62545: NEG
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: LD_INT 0
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: LD_INT 1
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 1
62583: NEG
62584: PUSH
62585: LD_INT 0
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 1
62594: NEG
62595: PUSH
62596: LD_INT 1
62598: NEG
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 1
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 0
62616: PUSH
62617: LD_INT 2
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 1
62626: NEG
62627: PUSH
62628: LD_INT 1
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 2
62637: NEG
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 2
62648: NEG
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: LIST
62662: LIST
62663: LIST
62664: LIST
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62672: LD_ADDR_VAR 0 52
62676: PUSH
62677: LD_INT 0
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: NEG
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: LD_INT 2
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: NEG
62766: PUSH
62767: LD_INT 1
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: PUSH
62774: LD_INT 2
62776: NEG
62777: PUSH
62778: LD_INT 0
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 2
62787: NEG
62788: PUSH
62789: LD_INT 1
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 2
62799: NEG
62800: PUSH
62801: LD_INT 2
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62823: LD_ADDR_VAR 0 53
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: LD_INT 1
62843: NEG
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 1
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 1
62881: NEG
62882: PUSH
62883: LD_INT 0
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 1
62904: NEG
62905: PUSH
62906: LD_INT 2
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 0
62916: PUSH
62917: LD_INT 2
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 1
62927: PUSH
62928: LD_INT 1
62930: NEG
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 2
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 2
62948: PUSH
62949: LD_INT 1
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: PUSH
62956: LD_INT 2
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 1
62968: PUSH
62969: LD_INT 2
62971: PUSH
62972: EMPTY
62973: LIST
62974: LIST
62975: PUSH
62976: LD_INT 0
62978: PUSH
62979: LD_INT 2
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 2
62999: NEG
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 2
63010: NEG
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: LD_INT 2
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63053: LD_ADDR_VAR 0 54
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: LD_INT 1
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: LD_INT 2
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 2
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 2
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: LD_INT 2
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: LD_INT 2
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: NEG
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 2
63240: NEG
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 2
63252: NEG
63253: PUSH
63254: LD_INT 2
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63283: LD_ADDR_VAR 0 55
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: LD_INT 1
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: LD_INT 1
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 1
63352: NEG
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: LD_INT 2
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 2
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 2
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 2
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: LD_INT 2
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 2
63459: NEG
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 2
63470: NEG
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 2
63482: NEG
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63513: LD_ADDR_VAR 0 56
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 1
63533: NEG
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: LD_INT 1
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: LD_INT 2
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: LD_INT 2
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 1
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 2
63638: PUSH
63639: LD_INT 1
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: LD_INT 2
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: LD_INT 2
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 2
63689: NEG
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 2
63700: NEG
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 2
63712: NEG
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63743: LD_ADDR_VAR 0 57
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: LD_INT 1
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 1
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: NEG
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: NEG
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: LD_INT 2
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 2
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: PUSH
63879: LD_INT 2
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: LD_INT 2
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 2
63930: NEG
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 2
63942: NEG
63943: PUSH
63944: LD_INT 2
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63973: LD_ADDR_VAR 0 58
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: LD_INT 1
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: NEG
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: NEG
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: LD_INT 2
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 2
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 2
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 2
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 2
64108: PUSH
64109: LD_INT 2
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: LD_INT 2
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 1
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: NEG
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 2
64160: NEG
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 2
64172: NEG
64173: PUSH
64174: LD_INT 2
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64203: LD_ADDR_VAR 0 59
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 0
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 1
64241: PUSH
64242: LD_INT 1
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 1
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: EMPTY
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64291: LD_ADDR_VAR 0 60
64295: PUSH
64296: LD_INT 0
64298: PUSH
64299: LD_INT 0
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 0
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 1
64319: PUSH
64320: LD_INT 0
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: LD_INT 1
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: LD_INT 0
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64379: LD_ADDR_VAR 0 61
64383: PUSH
64384: LD_INT 0
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 1
64407: PUSH
64408: LD_INT 0
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: LD_INT 1
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: LD_INT 1
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PUSH
64446: LD_INT 1
64448: NEG
64449: PUSH
64450: LD_INT 1
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64467: LD_ADDR_VAR 0 62
64471: PUSH
64472: LD_INT 0
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 1
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 1
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: LD_INT 1
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 1
64525: NEG
64526: PUSH
64527: LD_INT 0
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 1
64536: NEG
64537: PUSH
64538: LD_INT 1
64540: NEG
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64555: LD_ADDR_VAR 0 63
64559: PUSH
64560: LD_INT 0
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: LD_INT 1
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 1
64583: PUSH
64584: LD_INT 0
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: PUSH
64591: LD_INT 1
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: LD_INT 1
64606: PUSH
64607: EMPTY
64608: LIST
64609: LIST
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: EMPTY
64619: LIST
64620: LIST
64621: PUSH
64622: LD_INT 1
64624: NEG
64625: PUSH
64626: LD_INT 1
64628: NEG
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: EMPTY
64635: LIST
64636: LIST
64637: LIST
64638: LIST
64639: LIST
64640: LIST
64641: LIST
64642: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64643: LD_ADDR_VAR 0 64
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: LD_INT 0
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: LD_INT 1
64663: NEG
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: PUSH
64669: LD_INT 1
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: EMPTY
64676: LIST
64677: LIST
64678: PUSH
64679: LD_INT 1
64681: PUSH
64682: LD_INT 1
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: LD_INT 1
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 1
64712: NEG
64713: PUSH
64714: LD_INT 1
64716: NEG
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: ST_TO_ADDR
// end ; 1 :
64731: GO 70628
64733: LD_INT 1
64735: DOUBLE
64736: EQUAL
64737: IFTRUE 64741
64739: GO 67364
64741: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64742: LD_ADDR_VAR 0 11
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: LD_INT 3
64753: NEG
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: LD_INT 3
64764: NEG
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 1
64772: PUSH
64773: LD_INT 2
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: EMPTY
64782: LIST
64783: LIST
64784: LIST
64785: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64786: LD_ADDR_VAR 0 12
64790: PUSH
64791: LD_INT 2
64793: PUSH
64794: LD_INT 1
64796: NEG
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 3
64804: PUSH
64805: LD_INT 0
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 3
64814: PUSH
64815: LD_INT 1
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: LIST
64826: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64827: LD_ADDR_VAR 0 13
64831: PUSH
64832: LD_INT 3
64834: PUSH
64835: LD_INT 2
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 3
64844: PUSH
64845: LD_INT 3
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 2
64854: PUSH
64855: LD_INT 3
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: LIST
64866: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64867: LD_ADDR_VAR 0 14
64871: PUSH
64872: LD_INT 1
64874: PUSH
64875: LD_INT 3
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: LD_INT 3
64887: PUSH
64888: EMPTY
64889: LIST
64890: LIST
64891: PUSH
64892: LD_INT 1
64894: NEG
64895: PUSH
64896: LD_INT 2
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: LIST
64907: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64908: LD_ADDR_VAR 0 15
64912: PUSH
64913: LD_INT 2
64915: NEG
64916: PUSH
64917: LD_INT 1
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 3
64926: NEG
64927: PUSH
64928: LD_INT 0
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 3
64937: NEG
64938: PUSH
64939: LD_INT 1
64941: NEG
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: LIST
64951: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64952: LD_ADDR_VAR 0 16
64956: PUSH
64957: LD_INT 2
64959: NEG
64960: PUSH
64961: LD_INT 3
64963: NEG
64964: PUSH
64965: EMPTY
64966: LIST
64967: LIST
64968: PUSH
64969: LD_INT 3
64971: NEG
64972: PUSH
64973: LD_INT 2
64975: NEG
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 3
64983: NEG
64984: PUSH
64985: LD_INT 3
64987: NEG
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: LIST
64997: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64998: LD_ADDR_VAR 0 17
65002: PUSH
65003: LD_INT 1
65005: NEG
65006: PUSH
65007: LD_INT 3
65009: NEG
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: LD_INT 3
65020: NEG
65021: PUSH
65022: EMPTY
65023: LIST
65024: LIST
65025: PUSH
65026: LD_INT 1
65028: PUSH
65029: LD_INT 2
65031: NEG
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: LIST
65041: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65042: LD_ADDR_VAR 0 18
65046: PUSH
65047: LD_INT 2
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 3
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 3
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65083: LD_ADDR_VAR 0 19
65087: PUSH
65088: LD_INT 3
65090: PUSH
65091: LD_INT 2
65093: PUSH
65094: EMPTY
65095: LIST
65096: LIST
65097: PUSH
65098: LD_INT 3
65100: PUSH
65101: LD_INT 3
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 2
65110: PUSH
65111: LD_INT 3
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: LIST
65122: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65123: LD_ADDR_VAR 0 20
65127: PUSH
65128: LD_INT 1
65130: PUSH
65131: LD_INT 3
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 0
65140: PUSH
65141: LD_INT 3
65143: PUSH
65144: EMPTY
65145: LIST
65146: LIST
65147: PUSH
65148: LD_INT 1
65150: NEG
65151: PUSH
65152: LD_INT 2
65154: PUSH
65155: EMPTY
65156: LIST
65157: LIST
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: LIST
65163: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65164: LD_ADDR_VAR 0 21
65168: PUSH
65169: LD_INT 2
65171: NEG
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 3
65182: NEG
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 3
65193: NEG
65194: PUSH
65195: LD_INT 1
65197: NEG
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: EMPTY
65204: LIST
65205: LIST
65206: LIST
65207: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65208: LD_ADDR_VAR 0 22
65212: PUSH
65213: LD_INT 2
65215: NEG
65216: PUSH
65217: LD_INT 3
65219: NEG
65220: PUSH
65221: EMPTY
65222: LIST
65223: LIST
65224: PUSH
65225: LD_INT 3
65227: NEG
65228: PUSH
65229: LD_INT 2
65231: NEG
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: LD_INT 3
65239: NEG
65240: PUSH
65241: LD_INT 3
65243: NEG
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: LIST
65253: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65254: LD_ADDR_VAR 0 23
65258: PUSH
65259: LD_INT 0
65261: PUSH
65262: LD_INT 3
65264: NEG
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 1
65272: NEG
65273: PUSH
65274: LD_INT 4
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 1
65284: PUSH
65285: LD_INT 3
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65298: LD_ADDR_VAR 0 24
65302: PUSH
65303: LD_INT 3
65305: PUSH
65306: LD_INT 0
65308: PUSH
65309: EMPTY
65310: LIST
65311: LIST
65312: PUSH
65313: LD_INT 3
65315: PUSH
65316: LD_INT 1
65318: NEG
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: PUSH
65324: LD_INT 4
65326: PUSH
65327: LD_INT 1
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65339: LD_ADDR_VAR 0 25
65343: PUSH
65344: LD_INT 3
65346: PUSH
65347: LD_INT 3
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 4
65356: PUSH
65357: LD_INT 3
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 3
65366: PUSH
65367: LD_INT 4
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: LIST
65378: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65379: LD_ADDR_VAR 0 26
65383: PUSH
65384: LD_INT 0
65386: PUSH
65387: LD_INT 3
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 1
65396: PUSH
65397: LD_INT 4
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 1
65406: NEG
65407: PUSH
65408: LD_INT 3
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: LIST
65419: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65420: LD_ADDR_VAR 0 27
65424: PUSH
65425: LD_INT 3
65427: NEG
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 3
65438: NEG
65439: PUSH
65440: LD_INT 1
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 4
65449: NEG
65450: PUSH
65451: LD_INT 1
65453: NEG
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: LIST
65463: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65464: LD_ADDR_VAR 0 28
65468: PUSH
65469: LD_INT 3
65471: NEG
65472: PUSH
65473: LD_INT 3
65475: NEG
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 3
65483: NEG
65484: PUSH
65485: LD_INT 4
65487: NEG
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 4
65495: NEG
65496: PUSH
65497: LD_INT 3
65499: NEG
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65510: LD_ADDR_VAR 0 29
65514: PUSH
65515: LD_INT 1
65517: NEG
65518: PUSH
65519: LD_INT 3
65521: NEG
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 0
65529: PUSH
65530: LD_INT 3
65532: NEG
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_INT 1
65540: PUSH
65541: LD_INT 2
65543: NEG
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 1
65551: NEG
65552: PUSH
65553: LD_INT 4
65555: NEG
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_INT 0
65563: PUSH
65564: LD_INT 4
65566: NEG
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: PUSH
65575: LD_INT 3
65577: NEG
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 1
65585: NEG
65586: PUSH
65587: LD_INT 5
65589: NEG
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 0
65597: PUSH
65598: LD_INT 5
65600: NEG
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 1
65608: PUSH
65609: LD_INT 4
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 1
65619: NEG
65620: PUSH
65621: LD_INT 6
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 0
65631: PUSH
65632: LD_INT 6
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 1
65642: PUSH
65643: LD_INT 5
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65665: LD_ADDR_VAR 0 30
65669: PUSH
65670: LD_INT 2
65672: PUSH
65673: LD_INT 1
65675: NEG
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 3
65683: PUSH
65684: LD_INT 0
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 3
65693: PUSH
65694: LD_INT 1
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 3
65703: PUSH
65704: LD_INT 1
65706: NEG
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 4
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 4
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 4
65734: PUSH
65735: LD_INT 1
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 5
65745: PUSH
65746: LD_INT 0
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 5
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 5
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 6
65776: PUSH
65777: LD_INT 0
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 6
65786: PUSH
65787: LD_INT 1
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65808: LD_ADDR_VAR 0 31
65812: PUSH
65813: LD_INT 3
65815: PUSH
65816: LD_INT 2
65818: PUSH
65819: EMPTY
65820: LIST
65821: LIST
65822: PUSH
65823: LD_INT 3
65825: PUSH
65826: LD_INT 3
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: PUSH
65833: LD_INT 2
65835: PUSH
65836: LD_INT 3
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 4
65845: PUSH
65846: LD_INT 3
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 4
65855: PUSH
65856: LD_INT 4
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 3
65865: PUSH
65866: LD_INT 4
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 5
65875: PUSH
65876: LD_INT 4
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 5
65885: PUSH
65886: LD_INT 5
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 4
65895: PUSH
65896: LD_INT 5
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: PUSH
65903: LD_INT 6
65905: PUSH
65906: LD_INT 5
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 6
65915: PUSH
65916: LD_INT 6
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 5
65925: PUSH
65926: LD_INT 6
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65947: LD_ADDR_VAR 0 32
65951: PUSH
65952: LD_INT 1
65954: PUSH
65955: LD_INT 3
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 0
65964: PUSH
65965: LD_INT 3
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 1
65974: NEG
65975: PUSH
65976: LD_INT 2
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: LD_INT 4
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 0
65995: PUSH
65996: LD_INT 4
65998: PUSH
65999: EMPTY
66000: LIST
66001: LIST
66002: PUSH
66003: LD_INT 1
66005: NEG
66006: PUSH
66007: LD_INT 3
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 1
66016: PUSH
66017: LD_INT 5
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 0
66026: PUSH
66027: LD_INT 5
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: LD_INT 4
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 1
66047: PUSH
66048: LD_INT 6
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 0
66057: PUSH
66058: LD_INT 6
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 1
66067: NEG
66068: PUSH
66069: LD_INT 5
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: LIST
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66090: LD_ADDR_VAR 0 33
66094: PUSH
66095: LD_INT 2
66097: NEG
66098: PUSH
66099: LD_INT 1
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 3
66108: NEG
66109: PUSH
66110: LD_INT 0
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 3
66119: NEG
66120: PUSH
66121: LD_INT 1
66123: NEG
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 3
66131: NEG
66132: PUSH
66133: LD_INT 1
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 4
66142: NEG
66143: PUSH
66144: LD_INT 0
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 4
66153: NEG
66154: PUSH
66155: LD_INT 1
66157: NEG
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 4
66165: NEG
66166: PUSH
66167: LD_INT 1
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 5
66176: NEG
66177: PUSH
66178: LD_INT 0
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 5
66187: NEG
66188: PUSH
66189: LD_INT 1
66191: NEG
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 5
66199: NEG
66200: PUSH
66201: LD_INT 1
66203: PUSH
66204: EMPTY
66205: LIST
66206: LIST
66207: PUSH
66208: LD_INT 6
66210: NEG
66211: PUSH
66212: LD_INT 0
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: PUSH
66219: LD_INT 6
66221: NEG
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: EMPTY
66228: LIST
66229: LIST
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: LIST
66235: LIST
66236: LIST
66237: LIST
66238: LIST
66239: LIST
66240: LIST
66241: LIST
66242: LIST
66243: LIST
66244: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66245: LD_ADDR_VAR 0 34
66249: PUSH
66250: LD_INT 2
66252: NEG
66253: PUSH
66254: LD_INT 3
66256: NEG
66257: PUSH
66258: EMPTY
66259: LIST
66260: LIST
66261: PUSH
66262: LD_INT 3
66264: NEG
66265: PUSH
66266: LD_INT 2
66268: NEG
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 3
66276: NEG
66277: PUSH
66278: LD_INT 3
66280: NEG
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 3
66288: NEG
66289: PUSH
66290: LD_INT 4
66292: NEG
66293: PUSH
66294: EMPTY
66295: LIST
66296: LIST
66297: PUSH
66298: LD_INT 4
66300: NEG
66301: PUSH
66302: LD_INT 3
66304: NEG
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 4
66312: NEG
66313: PUSH
66314: LD_INT 4
66316: NEG
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 4
66324: NEG
66325: PUSH
66326: LD_INT 5
66328: NEG
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 5
66336: NEG
66337: PUSH
66338: LD_INT 4
66340: NEG
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 5
66348: NEG
66349: PUSH
66350: LD_INT 5
66352: NEG
66353: PUSH
66354: EMPTY
66355: LIST
66356: LIST
66357: PUSH
66358: LD_INT 5
66360: NEG
66361: PUSH
66362: LD_INT 6
66364: NEG
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 6
66372: NEG
66373: PUSH
66374: LD_INT 5
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 6
66384: NEG
66385: PUSH
66386: LD_INT 6
66388: NEG
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66408: LD_ADDR_VAR 0 41
66412: PUSH
66413: LD_INT 0
66415: PUSH
66416: LD_INT 2
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 1
66426: NEG
66427: PUSH
66428: LD_INT 3
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 1
66438: PUSH
66439: LD_INT 2
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: LIST
66451: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66452: LD_ADDR_VAR 0 42
66456: PUSH
66457: LD_INT 2
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 2
66469: PUSH
66470: LD_INT 1
66472: NEG
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 3
66480: PUSH
66481: LD_INT 1
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: LIST
66492: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66493: LD_ADDR_VAR 0 43
66497: PUSH
66498: LD_INT 2
66500: PUSH
66501: LD_INT 2
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 3
66510: PUSH
66511: LD_INT 2
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 2
66520: PUSH
66521: LD_INT 3
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: LIST
66532: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66533: LD_ADDR_VAR 0 44
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: LD_INT 2
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 1
66550: PUSH
66551: LD_INT 3
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 1
66560: NEG
66561: PUSH
66562: LD_INT 2
66564: PUSH
66565: EMPTY
66566: LIST
66567: LIST
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: LIST
66573: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66574: LD_ADDR_VAR 0 45
66578: PUSH
66579: LD_INT 2
66581: NEG
66582: PUSH
66583: LD_INT 0
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 2
66592: NEG
66593: PUSH
66594: LD_INT 1
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 3
66603: NEG
66604: PUSH
66605: LD_INT 1
66607: NEG
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: LIST
66617: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66618: LD_ADDR_VAR 0 46
66622: PUSH
66623: LD_INT 2
66625: NEG
66626: PUSH
66627: LD_INT 2
66629: NEG
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 2
66637: NEG
66638: PUSH
66639: LD_INT 3
66641: NEG
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 3
66649: NEG
66650: PUSH
66651: LD_INT 2
66653: NEG
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: LIST
66663: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66664: LD_ADDR_VAR 0 47
66668: PUSH
66669: LD_INT 2
66671: NEG
66672: PUSH
66673: LD_INT 3
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 1
66683: NEG
66684: PUSH
66685: LD_INT 3
66687: NEG
66688: PUSH
66689: EMPTY
66690: LIST
66691: LIST
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66697: LD_ADDR_VAR 0 48
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: LD_INT 2
66707: NEG
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 2
66715: PUSH
66716: LD_INT 1
66718: NEG
66719: PUSH
66720: EMPTY
66721: LIST
66722: LIST
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66728: LD_ADDR_VAR 0 49
66732: PUSH
66733: LD_INT 3
66735: PUSH
66736: LD_INT 1
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: PUSH
66743: LD_INT 3
66745: PUSH
66746: LD_INT 2
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66757: LD_ADDR_VAR 0 50
66761: PUSH
66762: LD_INT 2
66764: PUSH
66765: LD_INT 3
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 1
66774: PUSH
66775: LD_INT 3
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66786: LD_ADDR_VAR 0 51
66790: PUSH
66791: LD_INT 1
66793: NEG
66794: PUSH
66795: LD_INT 2
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 2
66804: NEG
66805: PUSH
66806: LD_INT 1
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66817: LD_ADDR_VAR 0 52
66821: PUSH
66822: LD_INT 3
66824: NEG
66825: PUSH
66826: LD_INT 1
66828: NEG
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 3
66836: NEG
66837: PUSH
66838: LD_INT 2
66840: NEG
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66850: LD_ADDR_VAR 0 53
66854: PUSH
66855: LD_INT 1
66857: NEG
66858: PUSH
66859: LD_INT 3
66861: NEG
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 0
66869: PUSH
66870: LD_INT 3
66872: NEG
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: LD_INT 1
66880: PUSH
66881: LD_INT 2
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: LIST
66893: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66894: LD_ADDR_VAR 0 54
66898: PUSH
66899: LD_INT 2
66901: PUSH
66902: LD_INT 1
66904: NEG
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 3
66912: PUSH
66913: LD_INT 0
66915: PUSH
66916: EMPTY
66917: LIST
66918: LIST
66919: PUSH
66920: LD_INT 3
66922: PUSH
66923: LD_INT 1
66925: PUSH
66926: EMPTY
66927: LIST
66928: LIST
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: LIST
66934: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66935: LD_ADDR_VAR 0 55
66939: PUSH
66940: LD_INT 3
66942: PUSH
66943: LD_INT 2
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: PUSH
66950: LD_INT 3
66952: PUSH
66953: LD_INT 3
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 2
66962: PUSH
66963: LD_INT 3
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: LIST
66974: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66975: LD_ADDR_VAR 0 56
66979: PUSH
66980: LD_INT 1
66982: PUSH
66983: LD_INT 3
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: LD_INT 3
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: LD_INT 2
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: LIST
67015: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67016: LD_ADDR_VAR 0 57
67020: PUSH
67021: LD_INT 2
67023: NEG
67024: PUSH
67025: LD_INT 1
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 3
67034: NEG
67035: PUSH
67036: LD_INT 0
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 3
67045: NEG
67046: PUSH
67047: LD_INT 1
67049: NEG
67050: PUSH
67051: EMPTY
67052: LIST
67053: LIST
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: LIST
67059: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67060: LD_ADDR_VAR 0 58
67064: PUSH
67065: LD_INT 2
67067: NEG
67068: PUSH
67069: LD_INT 3
67071: NEG
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 3
67079: NEG
67080: PUSH
67081: LD_INT 2
67083: NEG
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: LD_INT 3
67091: NEG
67092: PUSH
67093: LD_INT 3
67095: NEG
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: LIST
67105: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67106: LD_ADDR_VAR 0 59
67110: PUSH
67111: LD_INT 1
67113: NEG
67114: PUSH
67115: LD_INT 2
67117: NEG
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 0
67125: PUSH
67126: LD_INT 2
67128: NEG
67129: PUSH
67130: EMPTY
67131: LIST
67132: LIST
67133: PUSH
67134: LD_INT 1
67136: PUSH
67137: LD_INT 1
67139: NEG
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67150: LD_ADDR_VAR 0 60
67154: PUSH
67155: LD_INT 1
67157: PUSH
67158: LD_INT 1
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 2
67168: PUSH
67169: LD_INT 0
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 2
67178: PUSH
67179: LD_INT 1
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: LIST
67190: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67191: LD_ADDR_VAR 0 61
67195: PUSH
67196: LD_INT 2
67198: PUSH
67199: LD_INT 1
67201: PUSH
67202: EMPTY
67203: LIST
67204: LIST
67205: PUSH
67206: LD_INT 2
67208: PUSH
67209: LD_INT 2
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 1
67218: PUSH
67219: LD_INT 2
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: LIST
67230: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67231: LD_ADDR_VAR 0 62
67235: PUSH
67236: LD_INT 1
67238: PUSH
67239: LD_INT 2
67241: PUSH
67242: EMPTY
67243: LIST
67244: LIST
67245: PUSH
67246: LD_INT 0
67248: PUSH
67249: LD_INT 2
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 1
67258: NEG
67259: PUSH
67260: LD_INT 1
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: LIST
67271: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67272: LD_ADDR_VAR 0 63
67276: PUSH
67277: LD_INT 1
67279: NEG
67280: PUSH
67281: LD_INT 1
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 2
67290: NEG
67291: PUSH
67292: LD_INT 0
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 2
67301: NEG
67302: PUSH
67303: LD_INT 1
67305: NEG
67306: PUSH
67307: EMPTY
67308: LIST
67309: LIST
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: LIST
67315: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67316: LD_ADDR_VAR 0 64
67320: PUSH
67321: LD_INT 1
67323: NEG
67324: PUSH
67325: LD_INT 2
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 2
67335: NEG
67336: PUSH
67337: LD_INT 1
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 2
67347: NEG
67348: PUSH
67349: LD_INT 2
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// end ; 2 :
67362: GO 70628
67364: LD_INT 2
67366: DOUBLE
67367: EQUAL
67368: IFTRUE 67372
67370: GO 70627
67372: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67373: LD_ADDR_VAR 0 29
67377: PUSH
67378: LD_INT 4
67380: PUSH
67381: LD_INT 0
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: LD_INT 4
67390: PUSH
67391: LD_INT 1
67393: NEG
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: LD_INT 5
67401: PUSH
67402: LD_INT 0
67404: PUSH
67405: EMPTY
67406: LIST
67407: LIST
67408: PUSH
67409: LD_INT 5
67411: PUSH
67412: LD_INT 1
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 4
67421: PUSH
67422: LD_INT 1
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: PUSH
67429: LD_INT 3
67431: PUSH
67432: LD_INT 0
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: PUSH
67439: LD_INT 3
67441: PUSH
67442: LD_INT 1
67444: NEG
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 3
67452: PUSH
67453: LD_INT 2
67455: NEG
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: LD_INT 5
67463: PUSH
67464: LD_INT 2
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 3
67473: PUSH
67474: LD_INT 3
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 3
67483: PUSH
67484: LD_INT 2
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 4
67493: PUSH
67494: LD_INT 3
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 4
67503: PUSH
67504: LD_INT 4
67506: PUSH
67507: EMPTY
67508: LIST
67509: LIST
67510: PUSH
67511: LD_INT 3
67513: PUSH
67514: LD_INT 4
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: PUSH
67521: LD_INT 2
67523: PUSH
67524: LD_INT 3
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 2
67533: PUSH
67534: LD_INT 2
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 4
67543: PUSH
67544: LD_INT 2
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 2
67553: PUSH
67554: LD_INT 4
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 0
67563: PUSH
67564: LD_INT 4
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 0
67573: PUSH
67574: LD_INT 3
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 1
67583: PUSH
67584: LD_INT 4
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: PUSH
67591: LD_INT 1
67593: PUSH
67594: LD_INT 5
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: LD_INT 0
67603: PUSH
67604: LD_INT 5
67606: PUSH
67607: EMPTY
67608: LIST
67609: LIST
67610: PUSH
67611: LD_INT 1
67613: NEG
67614: PUSH
67615: LD_INT 4
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 1
67624: NEG
67625: PUSH
67626: LD_INT 3
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 2
67635: PUSH
67636: LD_INT 5
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 2
67645: NEG
67646: PUSH
67647: LD_INT 3
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 3
67656: NEG
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 3
67667: NEG
67668: PUSH
67669: LD_INT 1
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 2
67679: NEG
67680: PUSH
67681: LD_INT 0
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 2
67690: NEG
67691: PUSH
67692: LD_INT 1
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 3
67701: NEG
67702: PUSH
67703: LD_INT 1
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 4
67712: NEG
67713: PUSH
67714: LD_INT 0
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 4
67723: NEG
67724: PUSH
67725: LD_INT 1
67727: NEG
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 4
67735: NEG
67736: PUSH
67737: LD_INT 2
67739: NEG
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 2
67747: NEG
67748: PUSH
67749: LD_INT 2
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 4
67758: NEG
67759: PUSH
67760: LD_INT 4
67762: NEG
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 4
67770: NEG
67771: PUSH
67772: LD_INT 5
67774: NEG
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 3
67782: NEG
67783: PUSH
67784: LD_INT 4
67786: NEG
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 3
67794: NEG
67795: PUSH
67796: LD_INT 3
67798: NEG
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 4
67806: NEG
67807: PUSH
67808: LD_INT 3
67810: NEG
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 5
67818: NEG
67819: PUSH
67820: LD_INT 4
67822: NEG
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 5
67830: NEG
67831: PUSH
67832: LD_INT 5
67834: NEG
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 3
67842: NEG
67843: PUSH
67844: LD_INT 5
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 5
67854: NEG
67855: PUSH
67856: LD_INT 3
67858: NEG
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: LIST
67877: LIST
67878: LIST
67879: LIST
67880: LIST
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: LIST
67890: LIST
67891: LIST
67892: LIST
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67911: LD_ADDR_VAR 0 30
67915: PUSH
67916: LD_INT 4
67918: PUSH
67919: LD_INT 4
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 4
67928: PUSH
67929: LD_INT 3
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 5
67938: PUSH
67939: LD_INT 4
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 5
67948: PUSH
67949: LD_INT 5
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 4
67958: PUSH
67959: LD_INT 5
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 3
67968: PUSH
67969: LD_INT 4
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 3
67978: PUSH
67979: LD_INT 3
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 5
67988: PUSH
67989: LD_INT 3
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 3
67998: PUSH
67999: LD_INT 5
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 0
68008: PUSH
68009: LD_INT 3
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 0
68018: PUSH
68019: LD_INT 2
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 1
68028: PUSH
68029: LD_INT 3
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: PUSH
68036: LD_INT 1
68038: PUSH
68039: LD_INT 4
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 0
68048: PUSH
68049: LD_INT 4
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 1
68058: NEG
68059: PUSH
68060: LD_INT 3
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: NEG
68070: PUSH
68071: LD_INT 2
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 2
68080: PUSH
68081: LD_INT 4
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 2
68090: NEG
68091: PUSH
68092: LD_INT 2
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 4
68101: NEG
68102: PUSH
68103: LD_INT 0
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 4
68112: NEG
68113: PUSH
68114: LD_INT 1
68116: NEG
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 3
68124: NEG
68125: PUSH
68126: LD_INT 0
68128: PUSH
68129: EMPTY
68130: LIST
68131: LIST
68132: PUSH
68133: LD_INT 3
68135: NEG
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 4
68146: NEG
68147: PUSH
68148: LD_INT 1
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 5
68157: NEG
68158: PUSH
68159: LD_INT 0
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 5
68168: NEG
68169: PUSH
68170: LD_INT 1
68172: NEG
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 5
68180: NEG
68181: PUSH
68182: LD_INT 2
68184: NEG
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 3
68192: NEG
68193: PUSH
68194: LD_INT 2
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 3
68203: NEG
68204: PUSH
68205: LD_INT 3
68207: NEG
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: LD_INT 3
68215: NEG
68216: PUSH
68217: LD_INT 4
68219: NEG
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 2
68227: NEG
68228: PUSH
68229: LD_INT 3
68231: NEG
68232: PUSH
68233: EMPTY
68234: LIST
68235: LIST
68236: PUSH
68237: LD_INT 2
68239: NEG
68240: PUSH
68241: LD_INT 2
68243: NEG
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 3
68251: NEG
68252: PUSH
68253: LD_INT 2
68255: NEG
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 4
68263: NEG
68264: PUSH
68265: LD_INT 3
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 4
68275: NEG
68276: PUSH
68277: LD_INT 4
68279: NEG
68280: PUSH
68281: EMPTY
68282: LIST
68283: LIST
68284: PUSH
68285: LD_INT 2
68287: NEG
68288: PUSH
68289: LD_INT 4
68291: NEG
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 4
68299: NEG
68300: PUSH
68301: LD_INT 2
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 0
68311: PUSH
68312: LD_INT 4
68314: NEG
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 0
68322: PUSH
68323: LD_INT 5
68325: NEG
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 1
68333: PUSH
68334: LD_INT 4
68336: NEG
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 1
68344: PUSH
68345: LD_INT 3
68347: NEG
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: LD_INT 0
68355: PUSH
68356: LD_INT 3
68358: NEG
68359: PUSH
68360: EMPTY
68361: LIST
68362: LIST
68363: PUSH
68364: LD_INT 1
68366: NEG
68367: PUSH
68368: LD_INT 4
68370: NEG
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 1
68378: NEG
68379: PUSH
68380: LD_INT 5
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 2
68390: PUSH
68391: LD_INT 3
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 2
68401: NEG
68402: PUSH
68403: LD_INT 5
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: LIST
68415: LIST
68416: LIST
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68458: LD_ADDR_VAR 0 31
68462: PUSH
68463: LD_INT 0
68465: PUSH
68466: LD_INT 4
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 0
68475: PUSH
68476: LD_INT 3
68478: PUSH
68479: EMPTY
68480: LIST
68481: LIST
68482: PUSH
68483: LD_INT 1
68485: PUSH
68486: LD_INT 4
68488: PUSH
68489: EMPTY
68490: LIST
68491: LIST
68492: PUSH
68493: LD_INT 1
68495: PUSH
68496: LD_INT 5
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: LD_INT 5
68508: PUSH
68509: EMPTY
68510: LIST
68511: LIST
68512: PUSH
68513: LD_INT 1
68515: NEG
68516: PUSH
68517: LD_INT 4
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 1
68526: NEG
68527: PUSH
68528: LD_INT 3
68530: PUSH
68531: EMPTY
68532: LIST
68533: LIST
68534: PUSH
68535: LD_INT 2
68537: PUSH
68538: LD_INT 5
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 2
68547: NEG
68548: PUSH
68549: LD_INT 3
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 3
68558: NEG
68559: PUSH
68560: LD_INT 0
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: PUSH
68567: LD_INT 3
68569: NEG
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 2
68581: NEG
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 2
68592: NEG
68593: PUSH
68594: LD_INT 1
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 3
68603: NEG
68604: PUSH
68605: LD_INT 1
68607: PUSH
68608: EMPTY
68609: LIST
68610: LIST
68611: PUSH
68612: LD_INT 4
68614: NEG
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 4
68625: NEG
68626: PUSH
68627: LD_INT 1
68629: NEG
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: PUSH
68635: LD_INT 4
68637: NEG
68638: PUSH
68639: LD_INT 2
68641: NEG
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 2
68649: NEG
68650: PUSH
68651: LD_INT 2
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 4
68660: NEG
68661: PUSH
68662: LD_INT 4
68664: NEG
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 4
68672: NEG
68673: PUSH
68674: LD_INT 5
68676: NEG
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 3
68684: NEG
68685: PUSH
68686: LD_INT 4
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 3
68696: NEG
68697: PUSH
68698: LD_INT 3
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 4
68708: NEG
68709: PUSH
68710: LD_INT 3
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 5
68720: NEG
68721: PUSH
68722: LD_INT 4
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 5
68732: NEG
68733: PUSH
68734: LD_INT 5
68736: NEG
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: LD_INT 3
68744: NEG
68745: PUSH
68746: LD_INT 5
68748: NEG
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 5
68756: NEG
68757: PUSH
68758: LD_INT 3
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 0
68768: PUSH
68769: LD_INT 3
68771: NEG
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 0
68779: PUSH
68780: LD_INT 4
68782: NEG
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: LD_INT 1
68790: PUSH
68791: LD_INT 3
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 1
68801: PUSH
68802: LD_INT 2
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 0
68812: PUSH
68813: LD_INT 2
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 1
68823: NEG
68824: PUSH
68825: LD_INT 3
68827: NEG
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 1
68835: NEG
68836: PUSH
68837: LD_INT 4
68839: NEG
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 2
68847: PUSH
68848: LD_INT 2
68850: NEG
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 2
68858: NEG
68859: PUSH
68860: LD_INT 4
68862: NEG
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 4
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 4
68880: PUSH
68881: LD_INT 1
68883: NEG
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 5
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 5
68901: PUSH
68902: LD_INT 1
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 4
68911: PUSH
68912: LD_INT 1
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 3
68921: PUSH
68922: LD_INT 0
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 3
68931: PUSH
68932: LD_INT 1
68934: NEG
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 3
68942: PUSH
68943: LD_INT 2
68945: NEG
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 5
68953: PUSH
68954: LD_INT 2
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: LIST
68965: LIST
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69008: LD_ADDR_VAR 0 32
69012: PUSH
69013: LD_INT 4
69015: NEG
69016: PUSH
69017: LD_INT 0
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: PUSH
69024: LD_INT 4
69026: NEG
69027: PUSH
69028: LD_INT 1
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 3
69038: NEG
69039: PUSH
69040: LD_INT 0
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 3
69049: NEG
69050: PUSH
69051: LD_INT 1
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 4
69060: NEG
69061: PUSH
69062: LD_INT 1
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 5
69071: NEG
69072: PUSH
69073: LD_INT 0
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 5
69082: NEG
69083: PUSH
69084: LD_INT 1
69086: NEG
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 5
69094: NEG
69095: PUSH
69096: LD_INT 2
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 3
69106: NEG
69107: PUSH
69108: LD_INT 2
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 3
69117: NEG
69118: PUSH
69119: LD_INT 3
69121: NEG
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 3
69129: NEG
69130: PUSH
69131: LD_INT 4
69133: NEG
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 2
69141: NEG
69142: PUSH
69143: LD_INT 3
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 2
69153: NEG
69154: PUSH
69155: LD_INT 2
69157: NEG
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: PUSH
69163: LD_INT 3
69165: NEG
69166: PUSH
69167: LD_INT 2
69169: NEG
69170: PUSH
69171: EMPTY
69172: LIST
69173: LIST
69174: PUSH
69175: LD_INT 4
69177: NEG
69178: PUSH
69179: LD_INT 3
69181: NEG
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 4
69189: NEG
69190: PUSH
69191: LD_INT 4
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 2
69201: NEG
69202: PUSH
69203: LD_INT 4
69205: NEG
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 4
69213: NEG
69214: PUSH
69215: LD_INT 2
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 0
69225: PUSH
69226: LD_INT 4
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 0
69236: PUSH
69237: LD_INT 5
69239: NEG
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: LD_INT 4
69250: NEG
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 1
69258: PUSH
69259: LD_INT 3
69261: NEG
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 0
69269: PUSH
69270: LD_INT 3
69272: NEG
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 1
69280: NEG
69281: PUSH
69282: LD_INT 4
69284: NEG
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 1
69292: NEG
69293: PUSH
69294: LD_INT 5
69296: NEG
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 2
69304: PUSH
69305: LD_INT 3
69307: NEG
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 2
69315: NEG
69316: PUSH
69317: LD_INT 5
69319: NEG
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 3
69327: PUSH
69328: LD_INT 0
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 3
69337: PUSH
69338: LD_INT 1
69340: NEG
69341: PUSH
69342: EMPTY
69343: LIST
69344: LIST
69345: PUSH
69346: LD_INT 4
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 4
69358: PUSH
69359: LD_INT 1
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PUSH
69366: LD_INT 3
69368: PUSH
69369: LD_INT 1
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 2
69378: PUSH
69379: LD_INT 0
69381: PUSH
69382: EMPTY
69383: LIST
69384: LIST
69385: PUSH
69386: LD_INT 2
69388: PUSH
69389: LD_INT 1
69391: NEG
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 2
69399: PUSH
69400: LD_INT 2
69402: NEG
69403: PUSH
69404: EMPTY
69405: LIST
69406: LIST
69407: PUSH
69408: LD_INT 4
69410: PUSH
69411: LD_INT 2
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 4
69420: PUSH
69421: LD_INT 4
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 4
69430: PUSH
69431: LD_INT 3
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 5
69440: PUSH
69441: LD_INT 4
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: LD_INT 5
69450: PUSH
69451: LD_INT 5
69453: PUSH
69454: EMPTY
69455: LIST
69456: LIST
69457: PUSH
69458: LD_INT 4
69460: PUSH
69461: LD_INT 5
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 3
69470: PUSH
69471: LD_INT 4
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 3
69480: PUSH
69481: LD_INT 3
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 5
69490: PUSH
69491: LD_INT 3
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 3
69500: PUSH
69501: LD_INT 5
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: LIST
69512: LIST
69513: LIST
69514: LIST
69515: LIST
69516: LIST
69517: LIST
69518: LIST
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: LIST
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69555: LD_ADDR_VAR 0 33
69559: PUSH
69560: LD_INT 4
69562: NEG
69563: PUSH
69564: LD_INT 4
69566: NEG
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 4
69574: NEG
69575: PUSH
69576: LD_INT 5
69578: NEG
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 3
69586: NEG
69587: PUSH
69588: LD_INT 4
69590: NEG
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 3
69598: NEG
69599: PUSH
69600: LD_INT 3
69602: NEG
69603: PUSH
69604: EMPTY
69605: LIST
69606: LIST
69607: PUSH
69608: LD_INT 4
69610: NEG
69611: PUSH
69612: LD_INT 3
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 5
69622: NEG
69623: PUSH
69624: LD_INT 4
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 5
69634: NEG
69635: PUSH
69636: LD_INT 5
69638: NEG
69639: PUSH
69640: EMPTY
69641: LIST
69642: LIST
69643: PUSH
69644: LD_INT 3
69646: NEG
69647: PUSH
69648: LD_INT 5
69650: NEG
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: PUSH
69656: LD_INT 5
69658: NEG
69659: PUSH
69660: LD_INT 3
69662: NEG
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 0
69670: PUSH
69671: LD_INT 3
69673: NEG
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 0
69681: PUSH
69682: LD_INT 4
69684: NEG
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 1
69692: PUSH
69693: LD_INT 3
69695: NEG
69696: PUSH
69697: EMPTY
69698: LIST
69699: LIST
69700: PUSH
69701: LD_INT 1
69703: PUSH
69704: LD_INT 2
69706: NEG
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 0
69714: PUSH
69715: LD_INT 2
69717: NEG
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 1
69725: NEG
69726: PUSH
69727: LD_INT 3
69729: NEG
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 1
69737: NEG
69738: PUSH
69739: LD_INT 4
69741: NEG
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 2
69749: PUSH
69750: LD_INT 2
69752: NEG
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 2
69760: NEG
69761: PUSH
69762: LD_INT 4
69764: NEG
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 4
69772: PUSH
69773: LD_INT 0
69775: PUSH
69776: EMPTY
69777: LIST
69778: LIST
69779: PUSH
69780: LD_INT 4
69782: PUSH
69783: LD_INT 1
69785: NEG
69786: PUSH
69787: EMPTY
69788: LIST
69789: LIST
69790: PUSH
69791: LD_INT 5
69793: PUSH
69794: LD_INT 0
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 5
69803: PUSH
69804: LD_INT 1
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 4
69813: PUSH
69814: LD_INT 1
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 3
69823: PUSH
69824: LD_INT 0
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 3
69833: PUSH
69834: LD_INT 1
69836: NEG
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 3
69844: PUSH
69845: LD_INT 2
69847: NEG
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: PUSH
69853: LD_INT 5
69855: PUSH
69856: LD_INT 2
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 3
69865: PUSH
69866: LD_INT 3
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 3
69875: PUSH
69876: LD_INT 2
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 4
69885: PUSH
69886: LD_INT 3
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 4
69895: PUSH
69896: LD_INT 4
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 3
69905: PUSH
69906: LD_INT 4
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 2
69915: PUSH
69916: LD_INT 3
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 2
69925: PUSH
69926: LD_INT 2
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 4
69935: PUSH
69936: LD_INT 2
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 2
69945: PUSH
69946: LD_INT 4
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 0
69955: PUSH
69956: LD_INT 4
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 0
69965: PUSH
69966: LD_INT 3
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 1
69975: PUSH
69976: LD_INT 4
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 1
69985: PUSH
69986: LD_INT 5
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 0
69995: PUSH
69996: LD_INT 5
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 1
70005: NEG
70006: PUSH
70007: LD_INT 4
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 1
70016: NEG
70017: PUSH
70018: LD_INT 3
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 2
70027: PUSH
70028: LD_INT 5
70030: PUSH
70031: EMPTY
70032: LIST
70033: LIST
70034: PUSH
70035: LD_INT 2
70037: NEG
70038: PUSH
70039: LD_INT 3
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70093: LD_ADDR_VAR 0 34
70097: PUSH
70098: LD_INT 0
70100: PUSH
70101: LD_INT 4
70103: NEG
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 0
70111: PUSH
70112: LD_INT 5
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 1
70122: PUSH
70123: LD_INT 4
70125: NEG
70126: PUSH
70127: EMPTY
70128: LIST
70129: LIST
70130: PUSH
70131: LD_INT 1
70133: PUSH
70134: LD_INT 3
70136: NEG
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 0
70144: PUSH
70145: LD_INT 3
70147: NEG
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 1
70155: NEG
70156: PUSH
70157: LD_INT 4
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 1
70167: NEG
70168: PUSH
70169: LD_INT 5
70171: NEG
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 2
70179: PUSH
70180: LD_INT 3
70182: NEG
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 2
70190: NEG
70191: PUSH
70192: LD_INT 5
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 3
70202: PUSH
70203: LD_INT 0
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 3
70212: PUSH
70213: LD_INT 1
70215: NEG
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 4
70223: PUSH
70224: LD_INT 0
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 4
70233: PUSH
70234: LD_INT 1
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 3
70243: PUSH
70244: LD_INT 1
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 2
70253: PUSH
70254: LD_INT 0
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 2
70263: PUSH
70264: LD_INT 1
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 2
70274: PUSH
70275: LD_INT 2
70277: NEG
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 4
70285: PUSH
70286: LD_INT 2
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 4
70295: PUSH
70296: LD_INT 4
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 4
70305: PUSH
70306: LD_INT 3
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 5
70315: PUSH
70316: LD_INT 4
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 5
70325: PUSH
70326: LD_INT 5
70328: PUSH
70329: EMPTY
70330: LIST
70331: LIST
70332: PUSH
70333: LD_INT 4
70335: PUSH
70336: LD_INT 5
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 3
70345: PUSH
70346: LD_INT 4
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 3
70355: PUSH
70356: LD_INT 3
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 5
70365: PUSH
70366: LD_INT 3
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 3
70375: PUSH
70376: LD_INT 5
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: LD_INT 3
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: LD_INT 2
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 1
70405: PUSH
70406: LD_INT 3
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 1
70415: PUSH
70416: LD_INT 4
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 0
70425: PUSH
70426: LD_INT 4
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 1
70435: NEG
70436: PUSH
70437: LD_INT 3
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 1
70446: NEG
70447: PUSH
70448: LD_INT 2
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 2
70457: PUSH
70458: LD_INT 4
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 2
70467: NEG
70468: PUSH
70469: LD_INT 2
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 4
70478: NEG
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 4
70489: NEG
70490: PUSH
70491: LD_INT 1
70493: NEG
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 3
70501: NEG
70502: PUSH
70503: LD_INT 0
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 3
70512: NEG
70513: PUSH
70514: LD_INT 1
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 4
70523: NEG
70524: PUSH
70525: LD_INT 1
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 5
70534: NEG
70535: PUSH
70536: LD_INT 0
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 5
70545: NEG
70546: PUSH
70547: LD_INT 1
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 5
70557: NEG
70558: PUSH
70559: LD_INT 2
70561: NEG
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 3
70569: NEG
70570: PUSH
70571: LD_INT 2
70573: PUSH
70574: EMPTY
70575: LIST
70576: LIST
70577: PUSH
70578: EMPTY
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: ST_TO_ADDR
// end ; end ;
70625: GO 70628
70627: POP
// case btype of b_depot , b_warehouse :
70628: LD_VAR 0 1
70632: PUSH
70633: LD_INT 0
70635: DOUBLE
70636: EQUAL
70637: IFTRUE 70647
70639: LD_INT 1
70641: DOUBLE
70642: EQUAL
70643: IFTRUE 70647
70645: GO 70848
70647: POP
// case nation of nation_american :
70648: LD_VAR 0 5
70652: PUSH
70653: LD_INT 1
70655: DOUBLE
70656: EQUAL
70657: IFTRUE 70661
70659: GO 70717
70661: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70662: LD_ADDR_VAR 0 9
70666: PUSH
70667: LD_VAR 0 11
70671: PUSH
70672: LD_VAR 0 12
70676: PUSH
70677: LD_VAR 0 13
70681: PUSH
70682: LD_VAR 0 14
70686: PUSH
70687: LD_VAR 0 15
70691: PUSH
70692: LD_VAR 0 16
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: PUSH
70705: LD_VAR 0 4
70709: PUSH
70710: LD_INT 1
70712: PLUS
70713: ARRAY
70714: ST_TO_ADDR
70715: GO 70846
70717: LD_INT 2
70719: DOUBLE
70720: EQUAL
70721: IFTRUE 70725
70723: GO 70781
70725: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70726: LD_ADDR_VAR 0 9
70730: PUSH
70731: LD_VAR 0 17
70735: PUSH
70736: LD_VAR 0 18
70740: PUSH
70741: LD_VAR 0 19
70745: PUSH
70746: LD_VAR 0 20
70750: PUSH
70751: LD_VAR 0 21
70755: PUSH
70756: LD_VAR 0 22
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: PUSH
70769: LD_VAR 0 4
70773: PUSH
70774: LD_INT 1
70776: PLUS
70777: ARRAY
70778: ST_TO_ADDR
70779: GO 70846
70781: LD_INT 3
70783: DOUBLE
70784: EQUAL
70785: IFTRUE 70789
70787: GO 70845
70789: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70790: LD_ADDR_VAR 0 9
70794: PUSH
70795: LD_VAR 0 23
70799: PUSH
70800: LD_VAR 0 24
70804: PUSH
70805: LD_VAR 0 25
70809: PUSH
70810: LD_VAR 0 26
70814: PUSH
70815: LD_VAR 0 27
70819: PUSH
70820: LD_VAR 0 28
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: PUSH
70833: LD_VAR 0 4
70837: PUSH
70838: LD_INT 1
70840: PLUS
70841: ARRAY
70842: ST_TO_ADDR
70843: GO 70846
70845: POP
70846: GO 71401
70848: LD_INT 2
70850: DOUBLE
70851: EQUAL
70852: IFTRUE 70862
70854: LD_INT 3
70856: DOUBLE
70857: EQUAL
70858: IFTRUE 70862
70860: GO 70918
70862: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70863: LD_ADDR_VAR 0 9
70867: PUSH
70868: LD_VAR 0 29
70872: PUSH
70873: LD_VAR 0 30
70877: PUSH
70878: LD_VAR 0 31
70882: PUSH
70883: LD_VAR 0 32
70887: PUSH
70888: LD_VAR 0 33
70892: PUSH
70893: LD_VAR 0 34
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: LIST
70902: LIST
70903: LIST
70904: LIST
70905: PUSH
70906: LD_VAR 0 4
70910: PUSH
70911: LD_INT 1
70913: PLUS
70914: ARRAY
70915: ST_TO_ADDR
70916: GO 71401
70918: LD_INT 16
70920: DOUBLE
70921: EQUAL
70922: IFTRUE 70980
70924: LD_INT 17
70926: DOUBLE
70927: EQUAL
70928: IFTRUE 70980
70930: LD_INT 18
70932: DOUBLE
70933: EQUAL
70934: IFTRUE 70980
70936: LD_INT 19
70938: DOUBLE
70939: EQUAL
70940: IFTRUE 70980
70942: LD_INT 22
70944: DOUBLE
70945: EQUAL
70946: IFTRUE 70980
70948: LD_INT 20
70950: DOUBLE
70951: EQUAL
70952: IFTRUE 70980
70954: LD_INT 21
70956: DOUBLE
70957: EQUAL
70958: IFTRUE 70980
70960: LD_INT 23
70962: DOUBLE
70963: EQUAL
70964: IFTRUE 70980
70966: LD_INT 24
70968: DOUBLE
70969: EQUAL
70970: IFTRUE 70980
70972: LD_INT 25
70974: DOUBLE
70975: EQUAL
70976: IFTRUE 70980
70978: GO 71036
70980: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70981: LD_ADDR_VAR 0 9
70985: PUSH
70986: LD_VAR 0 35
70990: PUSH
70991: LD_VAR 0 36
70995: PUSH
70996: LD_VAR 0 37
71000: PUSH
71001: LD_VAR 0 38
71005: PUSH
71006: LD_VAR 0 39
71010: PUSH
71011: LD_VAR 0 40
71015: PUSH
71016: EMPTY
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: PUSH
71024: LD_VAR 0 4
71028: PUSH
71029: LD_INT 1
71031: PLUS
71032: ARRAY
71033: ST_TO_ADDR
71034: GO 71401
71036: LD_INT 6
71038: DOUBLE
71039: EQUAL
71040: IFTRUE 71092
71042: LD_INT 7
71044: DOUBLE
71045: EQUAL
71046: IFTRUE 71092
71048: LD_INT 8
71050: DOUBLE
71051: EQUAL
71052: IFTRUE 71092
71054: LD_INT 13
71056: DOUBLE
71057: EQUAL
71058: IFTRUE 71092
71060: LD_INT 12
71062: DOUBLE
71063: EQUAL
71064: IFTRUE 71092
71066: LD_INT 15
71068: DOUBLE
71069: EQUAL
71070: IFTRUE 71092
71072: LD_INT 11
71074: DOUBLE
71075: EQUAL
71076: IFTRUE 71092
71078: LD_INT 14
71080: DOUBLE
71081: EQUAL
71082: IFTRUE 71092
71084: LD_INT 10
71086: DOUBLE
71087: EQUAL
71088: IFTRUE 71092
71090: GO 71148
71092: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71093: LD_ADDR_VAR 0 9
71097: PUSH
71098: LD_VAR 0 41
71102: PUSH
71103: LD_VAR 0 42
71107: PUSH
71108: LD_VAR 0 43
71112: PUSH
71113: LD_VAR 0 44
71117: PUSH
71118: LD_VAR 0 45
71122: PUSH
71123: LD_VAR 0 46
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: PUSH
71136: LD_VAR 0 4
71140: PUSH
71141: LD_INT 1
71143: PLUS
71144: ARRAY
71145: ST_TO_ADDR
71146: GO 71401
71148: LD_INT 36
71150: DOUBLE
71151: EQUAL
71152: IFTRUE 71156
71154: GO 71212
71156: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71157: LD_ADDR_VAR 0 9
71161: PUSH
71162: LD_VAR 0 47
71166: PUSH
71167: LD_VAR 0 48
71171: PUSH
71172: LD_VAR 0 49
71176: PUSH
71177: LD_VAR 0 50
71181: PUSH
71182: LD_VAR 0 51
71186: PUSH
71187: LD_VAR 0 52
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: PUSH
71200: LD_VAR 0 4
71204: PUSH
71205: LD_INT 1
71207: PLUS
71208: ARRAY
71209: ST_TO_ADDR
71210: GO 71401
71212: LD_INT 4
71214: DOUBLE
71215: EQUAL
71216: IFTRUE 71238
71218: LD_INT 5
71220: DOUBLE
71221: EQUAL
71222: IFTRUE 71238
71224: LD_INT 34
71226: DOUBLE
71227: EQUAL
71228: IFTRUE 71238
71230: LD_INT 37
71232: DOUBLE
71233: EQUAL
71234: IFTRUE 71238
71236: GO 71294
71238: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71239: LD_ADDR_VAR 0 9
71243: PUSH
71244: LD_VAR 0 53
71248: PUSH
71249: LD_VAR 0 54
71253: PUSH
71254: LD_VAR 0 55
71258: PUSH
71259: LD_VAR 0 56
71263: PUSH
71264: LD_VAR 0 57
71268: PUSH
71269: LD_VAR 0 58
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: PUSH
71282: LD_VAR 0 4
71286: PUSH
71287: LD_INT 1
71289: PLUS
71290: ARRAY
71291: ST_TO_ADDR
71292: GO 71401
71294: LD_INT 31
71296: DOUBLE
71297: EQUAL
71298: IFTRUE 71344
71300: LD_INT 32
71302: DOUBLE
71303: EQUAL
71304: IFTRUE 71344
71306: LD_INT 33
71308: DOUBLE
71309: EQUAL
71310: IFTRUE 71344
71312: LD_INT 27
71314: DOUBLE
71315: EQUAL
71316: IFTRUE 71344
71318: LD_INT 26
71320: DOUBLE
71321: EQUAL
71322: IFTRUE 71344
71324: LD_INT 28
71326: DOUBLE
71327: EQUAL
71328: IFTRUE 71344
71330: LD_INT 29
71332: DOUBLE
71333: EQUAL
71334: IFTRUE 71344
71336: LD_INT 30
71338: DOUBLE
71339: EQUAL
71340: IFTRUE 71344
71342: GO 71400
71344: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71345: LD_ADDR_VAR 0 9
71349: PUSH
71350: LD_VAR 0 59
71354: PUSH
71355: LD_VAR 0 60
71359: PUSH
71360: LD_VAR 0 61
71364: PUSH
71365: LD_VAR 0 62
71369: PUSH
71370: LD_VAR 0 63
71374: PUSH
71375: LD_VAR 0 64
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: PUSH
71388: LD_VAR 0 4
71392: PUSH
71393: LD_INT 1
71395: PLUS
71396: ARRAY
71397: ST_TO_ADDR
71398: GO 71401
71400: POP
// temp_list2 = [ ] ;
71401: LD_ADDR_VAR 0 10
71405: PUSH
71406: EMPTY
71407: ST_TO_ADDR
// for i in temp_list do
71408: LD_ADDR_VAR 0 8
71412: PUSH
71413: LD_VAR 0 9
71417: PUSH
71418: FOR_IN
71419: IFFALSE 71471
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71421: LD_ADDR_VAR 0 10
71425: PUSH
71426: LD_VAR 0 10
71430: PUSH
71431: LD_VAR 0 8
71435: PUSH
71436: LD_INT 1
71438: ARRAY
71439: PUSH
71440: LD_VAR 0 2
71444: PLUS
71445: PUSH
71446: LD_VAR 0 8
71450: PUSH
71451: LD_INT 2
71453: ARRAY
71454: PUSH
71455: LD_VAR 0 3
71459: PLUS
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: EMPTY
71466: LIST
71467: ADD
71468: ST_TO_ADDR
71469: GO 71418
71471: POP
71472: POP
// result = temp_list2 ;
71473: LD_ADDR_VAR 0 7
71477: PUSH
71478: LD_VAR 0 10
71482: ST_TO_ADDR
// end ;
71483: LD_VAR 0 7
71487: RET
// export function EnemyInRange ( unit , dist ) ; begin
71488: LD_INT 0
71490: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71491: LD_ADDR_VAR 0 3
71495: PUSH
71496: LD_VAR 0 1
71500: PPUSH
71501: CALL_OW 255
71505: PPUSH
71506: LD_VAR 0 1
71510: PPUSH
71511: CALL_OW 250
71515: PPUSH
71516: LD_VAR 0 1
71520: PPUSH
71521: CALL_OW 251
71525: PPUSH
71526: LD_VAR 0 2
71530: PPUSH
71531: CALL 44884 0 4
71535: PUSH
71536: LD_INT 4
71538: ARRAY
71539: ST_TO_ADDR
// end ;
71540: LD_VAR 0 3
71544: RET
// export function PlayerSeeMe ( unit ) ; begin
71545: LD_INT 0
71547: PPUSH
// result := See ( your_side , unit ) ;
71548: LD_ADDR_VAR 0 2
71552: PUSH
71553: LD_OWVAR 2
71557: PPUSH
71558: LD_VAR 0 1
71562: PPUSH
71563: CALL_OW 292
71567: ST_TO_ADDR
// end ;
71568: LD_VAR 0 2
71572: RET
// export function ReverseDir ( unit ) ; begin
71573: LD_INT 0
71575: PPUSH
// if not unit then
71576: LD_VAR 0 1
71580: NOT
71581: IFFALSE 71585
// exit ;
71583: GO 71608
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71585: LD_ADDR_VAR 0 2
71589: PUSH
71590: LD_VAR 0 1
71594: PPUSH
71595: CALL_OW 254
71599: PUSH
71600: LD_INT 3
71602: PLUS
71603: PUSH
71604: LD_INT 6
71606: MOD
71607: ST_TO_ADDR
// end ;
71608: LD_VAR 0 2
71612: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71613: LD_INT 0
71615: PPUSH
71616: PPUSH
71617: PPUSH
71618: PPUSH
71619: PPUSH
// if not hexes then
71620: LD_VAR 0 2
71624: NOT
71625: IFFALSE 71629
// exit ;
71627: GO 71777
// dist := 9999 ;
71629: LD_ADDR_VAR 0 5
71633: PUSH
71634: LD_INT 9999
71636: ST_TO_ADDR
// for i = 1 to hexes do
71637: LD_ADDR_VAR 0 4
71641: PUSH
71642: DOUBLE
71643: LD_INT 1
71645: DEC
71646: ST_TO_ADDR
71647: LD_VAR 0 2
71651: PUSH
71652: FOR_TO
71653: IFFALSE 71765
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71655: LD_VAR 0 1
71659: PPUSH
71660: LD_VAR 0 2
71664: PUSH
71665: LD_VAR 0 4
71669: ARRAY
71670: PUSH
71671: LD_INT 1
71673: ARRAY
71674: PPUSH
71675: LD_VAR 0 2
71679: PUSH
71680: LD_VAR 0 4
71684: ARRAY
71685: PUSH
71686: LD_INT 2
71688: ARRAY
71689: PPUSH
71690: CALL_OW 297
71694: PUSH
71695: LD_VAR 0 5
71699: LESS
71700: IFFALSE 71763
// begin hex := hexes [ i ] ;
71702: LD_ADDR_VAR 0 7
71706: PUSH
71707: LD_VAR 0 2
71711: PUSH
71712: LD_VAR 0 4
71716: ARRAY
71717: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71718: LD_ADDR_VAR 0 5
71722: PUSH
71723: LD_VAR 0 1
71727: PPUSH
71728: LD_VAR 0 2
71732: PUSH
71733: LD_VAR 0 4
71737: ARRAY
71738: PUSH
71739: LD_INT 1
71741: ARRAY
71742: PPUSH
71743: LD_VAR 0 2
71747: PUSH
71748: LD_VAR 0 4
71752: ARRAY
71753: PUSH
71754: LD_INT 2
71756: ARRAY
71757: PPUSH
71758: CALL_OW 297
71762: ST_TO_ADDR
// end ; end ;
71763: GO 71652
71765: POP
71766: POP
// result := hex ;
71767: LD_ADDR_VAR 0 3
71771: PUSH
71772: LD_VAR 0 7
71776: ST_TO_ADDR
// end ;
71777: LD_VAR 0 3
71781: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71782: LD_INT 0
71784: PPUSH
71785: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71786: LD_VAR 0 1
71790: NOT
71791: PUSH
71792: LD_VAR 0 1
71796: PUSH
71797: LD_INT 21
71799: PUSH
71800: LD_INT 2
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 23
71809: PUSH
71810: LD_INT 2
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PPUSH
71821: CALL_OW 69
71825: IN
71826: NOT
71827: OR
71828: IFFALSE 71832
// exit ;
71830: GO 71879
// for i = 1 to 3 do
71832: LD_ADDR_VAR 0 3
71836: PUSH
71837: DOUBLE
71838: LD_INT 1
71840: DEC
71841: ST_TO_ADDR
71842: LD_INT 3
71844: PUSH
71845: FOR_TO
71846: IFFALSE 71877
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71848: LD_VAR 0 1
71852: PPUSH
71853: CALL_OW 250
71857: PPUSH
71858: LD_VAR 0 1
71862: PPUSH
71863: CALL_OW 251
71867: PPUSH
71868: LD_INT 1
71870: PPUSH
71871: CALL_OW 453
71875: GO 71845
71877: POP
71878: POP
// end ;
71879: LD_VAR 0 2
71883: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71884: LD_INT 0
71886: PPUSH
71887: PPUSH
71888: PPUSH
71889: PPUSH
71890: PPUSH
71891: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71892: LD_VAR 0 1
71896: NOT
71897: PUSH
71898: LD_VAR 0 2
71902: NOT
71903: OR
71904: PUSH
71905: LD_VAR 0 1
71909: PPUSH
71910: CALL_OW 314
71914: OR
71915: IFFALSE 71919
// exit ;
71917: GO 72360
// x := GetX ( enemy_unit ) ;
71919: LD_ADDR_VAR 0 7
71923: PUSH
71924: LD_VAR 0 2
71928: PPUSH
71929: CALL_OW 250
71933: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71934: LD_ADDR_VAR 0 8
71938: PUSH
71939: LD_VAR 0 2
71943: PPUSH
71944: CALL_OW 251
71948: ST_TO_ADDR
// if not x or not y then
71949: LD_VAR 0 7
71953: NOT
71954: PUSH
71955: LD_VAR 0 8
71959: NOT
71960: OR
71961: IFFALSE 71965
// exit ;
71963: GO 72360
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71965: LD_ADDR_VAR 0 6
71969: PUSH
71970: LD_VAR 0 7
71974: PPUSH
71975: LD_INT 0
71977: PPUSH
71978: LD_INT 4
71980: PPUSH
71981: CALL_OW 272
71985: PUSH
71986: LD_VAR 0 8
71990: PPUSH
71991: LD_INT 0
71993: PPUSH
71994: LD_INT 4
71996: PPUSH
71997: CALL_OW 273
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: LD_VAR 0 7
72010: PPUSH
72011: LD_INT 1
72013: PPUSH
72014: LD_INT 4
72016: PPUSH
72017: CALL_OW 272
72021: PUSH
72022: LD_VAR 0 8
72026: PPUSH
72027: LD_INT 1
72029: PPUSH
72030: LD_INT 4
72032: PPUSH
72033: CALL_OW 273
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_VAR 0 7
72046: PPUSH
72047: LD_INT 2
72049: PPUSH
72050: LD_INT 4
72052: PPUSH
72053: CALL_OW 272
72057: PUSH
72058: LD_VAR 0 8
72062: PPUSH
72063: LD_INT 2
72065: PPUSH
72066: LD_INT 4
72068: PPUSH
72069: CALL_OW 273
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PUSH
72078: LD_VAR 0 7
72082: PPUSH
72083: LD_INT 3
72085: PPUSH
72086: LD_INT 4
72088: PPUSH
72089: CALL_OW 272
72093: PUSH
72094: LD_VAR 0 8
72098: PPUSH
72099: LD_INT 3
72101: PPUSH
72102: LD_INT 4
72104: PPUSH
72105: CALL_OW 273
72109: PUSH
72110: EMPTY
72111: LIST
72112: LIST
72113: PUSH
72114: LD_VAR 0 7
72118: PPUSH
72119: LD_INT 4
72121: PPUSH
72122: LD_INT 4
72124: PPUSH
72125: CALL_OW 272
72129: PUSH
72130: LD_VAR 0 8
72134: PPUSH
72135: LD_INT 4
72137: PPUSH
72138: LD_INT 4
72140: PPUSH
72141: CALL_OW 273
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_VAR 0 7
72154: PPUSH
72155: LD_INT 5
72157: PPUSH
72158: LD_INT 4
72160: PPUSH
72161: CALL_OW 272
72165: PUSH
72166: LD_VAR 0 8
72170: PPUSH
72171: LD_INT 5
72173: PPUSH
72174: LD_INT 4
72176: PPUSH
72177: CALL_OW 273
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: ST_TO_ADDR
// for i = tmp downto 1 do
72194: LD_ADDR_VAR 0 4
72198: PUSH
72199: DOUBLE
72200: LD_VAR 0 6
72204: INC
72205: ST_TO_ADDR
72206: LD_INT 1
72208: PUSH
72209: FOR_DOWNTO
72210: IFFALSE 72311
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72212: LD_VAR 0 6
72216: PUSH
72217: LD_VAR 0 4
72221: ARRAY
72222: PUSH
72223: LD_INT 1
72225: ARRAY
72226: PPUSH
72227: LD_VAR 0 6
72231: PUSH
72232: LD_VAR 0 4
72236: ARRAY
72237: PUSH
72238: LD_INT 2
72240: ARRAY
72241: PPUSH
72242: CALL_OW 488
72246: NOT
72247: PUSH
72248: LD_VAR 0 6
72252: PUSH
72253: LD_VAR 0 4
72257: ARRAY
72258: PUSH
72259: LD_INT 1
72261: ARRAY
72262: PPUSH
72263: LD_VAR 0 6
72267: PUSH
72268: LD_VAR 0 4
72272: ARRAY
72273: PUSH
72274: LD_INT 2
72276: ARRAY
72277: PPUSH
72278: CALL_OW 428
72282: PUSH
72283: LD_INT 0
72285: NONEQUAL
72286: OR
72287: IFFALSE 72309
// tmp := Delete ( tmp , i ) ;
72289: LD_ADDR_VAR 0 6
72293: PUSH
72294: LD_VAR 0 6
72298: PPUSH
72299: LD_VAR 0 4
72303: PPUSH
72304: CALL_OW 3
72308: ST_TO_ADDR
72309: GO 72209
72311: POP
72312: POP
// j := GetClosestHex ( unit , tmp ) ;
72313: LD_ADDR_VAR 0 5
72317: PUSH
72318: LD_VAR 0 1
72322: PPUSH
72323: LD_VAR 0 6
72327: PPUSH
72328: CALL 71613 0 2
72332: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72333: LD_VAR 0 1
72337: PPUSH
72338: LD_VAR 0 5
72342: PUSH
72343: LD_INT 1
72345: ARRAY
72346: PPUSH
72347: LD_VAR 0 5
72351: PUSH
72352: LD_INT 2
72354: ARRAY
72355: PPUSH
72356: CALL_OW 111
// end ;
72360: LD_VAR 0 3
72364: RET
// export function PrepareApemanSoldier ( ) ; begin
72365: LD_INT 0
72367: PPUSH
// uc_nation := 0 ;
72368: LD_ADDR_OWVAR 21
72372: PUSH
72373: LD_INT 0
72375: ST_TO_ADDR
// hc_sex := sex_male ;
72376: LD_ADDR_OWVAR 27
72380: PUSH
72381: LD_INT 1
72383: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72384: LD_ADDR_OWVAR 28
72388: PUSH
72389: LD_INT 15
72391: ST_TO_ADDR
// hc_gallery :=  ;
72392: LD_ADDR_OWVAR 33
72396: PUSH
72397: LD_STRING 
72399: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72400: LD_ADDR_OWVAR 31
72404: PUSH
72405: LD_INT 0
72407: PPUSH
72408: LD_INT 3
72410: PPUSH
72411: CALL_OW 12
72415: PUSH
72416: LD_INT 0
72418: PPUSH
72419: LD_INT 3
72421: PPUSH
72422: CALL_OW 12
72426: PUSH
72427: LD_INT 0
72429: PUSH
72430: LD_INT 0
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: LIST
72437: LIST
72438: ST_TO_ADDR
// end ;
72439: LD_VAR 0 1
72443: RET
// export function PrepareApemanEngineer ( ) ; begin
72444: LD_INT 0
72446: PPUSH
// uc_nation := 0 ;
72447: LD_ADDR_OWVAR 21
72451: PUSH
72452: LD_INT 0
72454: ST_TO_ADDR
// hc_sex := sex_male ;
72455: LD_ADDR_OWVAR 27
72459: PUSH
72460: LD_INT 1
72462: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72463: LD_ADDR_OWVAR 28
72467: PUSH
72468: LD_INT 16
72470: ST_TO_ADDR
// hc_gallery :=  ;
72471: LD_ADDR_OWVAR 33
72475: PUSH
72476: LD_STRING 
72478: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72479: LD_ADDR_OWVAR 31
72483: PUSH
72484: LD_INT 0
72486: PPUSH
72487: LD_INT 3
72489: PPUSH
72490: CALL_OW 12
72494: PUSH
72495: LD_INT 0
72497: PPUSH
72498: LD_INT 3
72500: PPUSH
72501: CALL_OW 12
72505: PUSH
72506: LD_INT 0
72508: PUSH
72509: LD_INT 0
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: ST_TO_ADDR
// end ;
72518: LD_VAR 0 1
72522: RET
// export function PrepareApeman ( agressivity ) ; begin
72523: LD_INT 0
72525: PPUSH
// uc_side := 0 ;
72526: LD_ADDR_OWVAR 20
72530: PUSH
72531: LD_INT 0
72533: ST_TO_ADDR
// uc_nation := 0 ;
72534: LD_ADDR_OWVAR 21
72538: PUSH
72539: LD_INT 0
72541: ST_TO_ADDR
// hc_sex := sex_male ;
72542: LD_ADDR_OWVAR 27
72546: PUSH
72547: LD_INT 1
72549: ST_TO_ADDR
// hc_class := class_apeman ;
72550: LD_ADDR_OWVAR 28
72554: PUSH
72555: LD_INT 12
72557: ST_TO_ADDR
// hc_gallery :=  ;
72558: LD_ADDR_OWVAR 33
72562: PUSH
72563: LD_STRING 
72565: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72566: LD_ADDR_OWVAR 35
72570: PUSH
72571: LD_VAR 0 1
72575: NEG
72576: PPUSH
72577: LD_VAR 0 1
72581: PPUSH
72582: CALL_OW 12
72586: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72587: LD_ADDR_OWVAR 31
72591: PUSH
72592: LD_INT 0
72594: PPUSH
72595: LD_INT 3
72597: PPUSH
72598: CALL_OW 12
72602: PUSH
72603: LD_INT 0
72605: PPUSH
72606: LD_INT 3
72608: PPUSH
72609: CALL_OW 12
72613: PUSH
72614: LD_INT 0
72616: PUSH
72617: LD_INT 0
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: ST_TO_ADDR
// end ;
72626: LD_VAR 0 2
72630: RET
// export function PrepareTiger ( agressivity ) ; begin
72631: LD_INT 0
72633: PPUSH
// uc_side := 0 ;
72634: LD_ADDR_OWVAR 20
72638: PUSH
72639: LD_INT 0
72641: ST_TO_ADDR
// uc_nation := 0 ;
72642: LD_ADDR_OWVAR 21
72646: PUSH
72647: LD_INT 0
72649: ST_TO_ADDR
// hc_class := class_tiger ;
72650: LD_ADDR_OWVAR 28
72654: PUSH
72655: LD_INT 14
72657: ST_TO_ADDR
// hc_gallery :=  ;
72658: LD_ADDR_OWVAR 33
72662: PUSH
72663: LD_STRING 
72665: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72666: LD_ADDR_OWVAR 35
72670: PUSH
72671: LD_VAR 0 1
72675: NEG
72676: PPUSH
72677: LD_VAR 0 1
72681: PPUSH
72682: CALL_OW 12
72686: ST_TO_ADDR
// end ;
72687: LD_VAR 0 2
72691: RET
// export function PrepareEnchidna ( ) ; begin
72692: LD_INT 0
72694: PPUSH
// uc_side := 0 ;
72695: LD_ADDR_OWVAR 20
72699: PUSH
72700: LD_INT 0
72702: ST_TO_ADDR
// uc_nation := 0 ;
72703: LD_ADDR_OWVAR 21
72707: PUSH
72708: LD_INT 0
72710: ST_TO_ADDR
// hc_class := class_baggie ;
72711: LD_ADDR_OWVAR 28
72715: PUSH
72716: LD_INT 13
72718: ST_TO_ADDR
// hc_gallery :=  ;
72719: LD_ADDR_OWVAR 33
72723: PUSH
72724: LD_STRING 
72726: ST_TO_ADDR
// end ;
72727: LD_VAR 0 1
72731: RET
// export function PrepareFrog ( ) ; begin
72732: LD_INT 0
72734: PPUSH
// uc_side := 0 ;
72735: LD_ADDR_OWVAR 20
72739: PUSH
72740: LD_INT 0
72742: ST_TO_ADDR
// uc_nation := 0 ;
72743: LD_ADDR_OWVAR 21
72747: PUSH
72748: LD_INT 0
72750: ST_TO_ADDR
// hc_class := class_frog ;
72751: LD_ADDR_OWVAR 28
72755: PUSH
72756: LD_INT 19
72758: ST_TO_ADDR
// hc_gallery :=  ;
72759: LD_ADDR_OWVAR 33
72763: PUSH
72764: LD_STRING 
72766: ST_TO_ADDR
// end ;
72767: LD_VAR 0 1
72771: RET
// export function PrepareFish ( ) ; begin
72772: LD_INT 0
72774: PPUSH
// uc_side := 0 ;
72775: LD_ADDR_OWVAR 20
72779: PUSH
72780: LD_INT 0
72782: ST_TO_ADDR
// uc_nation := 0 ;
72783: LD_ADDR_OWVAR 21
72787: PUSH
72788: LD_INT 0
72790: ST_TO_ADDR
// hc_class := class_fish ;
72791: LD_ADDR_OWVAR 28
72795: PUSH
72796: LD_INT 20
72798: ST_TO_ADDR
// hc_gallery :=  ;
72799: LD_ADDR_OWVAR 33
72803: PUSH
72804: LD_STRING 
72806: ST_TO_ADDR
// end ;
72807: LD_VAR 0 1
72811: RET
// export function PrepareBird ( ) ; begin
72812: LD_INT 0
72814: PPUSH
// uc_side := 0 ;
72815: LD_ADDR_OWVAR 20
72819: PUSH
72820: LD_INT 0
72822: ST_TO_ADDR
// uc_nation := 0 ;
72823: LD_ADDR_OWVAR 21
72827: PUSH
72828: LD_INT 0
72830: ST_TO_ADDR
// hc_class := class_phororhacos ;
72831: LD_ADDR_OWVAR 28
72835: PUSH
72836: LD_INT 18
72838: ST_TO_ADDR
// hc_gallery :=  ;
72839: LD_ADDR_OWVAR 33
72843: PUSH
72844: LD_STRING 
72846: ST_TO_ADDR
// end ;
72847: LD_VAR 0 1
72851: RET
// export function PrepareHorse ( ) ; begin
72852: LD_INT 0
72854: PPUSH
// uc_side := 0 ;
72855: LD_ADDR_OWVAR 20
72859: PUSH
72860: LD_INT 0
72862: ST_TO_ADDR
// uc_nation := 0 ;
72863: LD_ADDR_OWVAR 21
72867: PUSH
72868: LD_INT 0
72870: ST_TO_ADDR
// hc_class := 21 ;
72871: LD_ADDR_OWVAR 28
72875: PUSH
72876: LD_INT 21
72878: ST_TO_ADDR
// hc_gallery :=  ;
72879: LD_ADDR_OWVAR 33
72883: PUSH
72884: LD_STRING 
72886: ST_TO_ADDR
// end ;
72887: LD_VAR 0 1
72891: RET
// export function PrepareMastodont ( ) ; begin
72892: LD_INT 0
72894: PPUSH
// uc_side := 0 ;
72895: LD_ADDR_OWVAR 20
72899: PUSH
72900: LD_INT 0
72902: ST_TO_ADDR
// uc_nation := 0 ;
72903: LD_ADDR_OWVAR 21
72907: PUSH
72908: LD_INT 0
72910: ST_TO_ADDR
// vc_chassis := 31 ;
72911: LD_ADDR_OWVAR 37
72915: PUSH
72916: LD_INT 31
72918: ST_TO_ADDR
// vc_control := control_rider ;
72919: LD_ADDR_OWVAR 38
72923: PUSH
72924: LD_INT 4
72926: ST_TO_ADDR
// end ;
72927: LD_VAR 0 1
72931: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
72932: LD_INT 0
72934: PPUSH
72935: PPUSH
72936: PPUSH
// uc_side = 0 ;
72937: LD_ADDR_OWVAR 20
72941: PUSH
72942: LD_INT 0
72944: ST_TO_ADDR
// uc_nation = 0 ;
72945: LD_ADDR_OWVAR 21
72949: PUSH
72950: LD_INT 0
72952: ST_TO_ADDR
// InitHc_All ( ) ;
72953: CALL_OW 584
// InitVc ;
72957: CALL_OW 20
// if mastodonts then
72961: LD_VAR 0 6
72965: IFFALSE 73032
// for i = 1 to mastodonts do
72967: LD_ADDR_VAR 0 11
72971: PUSH
72972: DOUBLE
72973: LD_INT 1
72975: DEC
72976: ST_TO_ADDR
72977: LD_VAR 0 6
72981: PUSH
72982: FOR_TO
72983: IFFALSE 73030
// begin vc_chassis := 31 ;
72985: LD_ADDR_OWVAR 37
72989: PUSH
72990: LD_INT 31
72992: ST_TO_ADDR
// vc_control := control_rider ;
72993: LD_ADDR_OWVAR 38
72997: PUSH
72998: LD_INT 4
73000: ST_TO_ADDR
// animal := CreateVehicle ;
73001: LD_ADDR_VAR 0 12
73005: PUSH
73006: CALL_OW 45
73010: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73011: LD_VAR 0 12
73015: PPUSH
73016: LD_VAR 0 8
73020: PPUSH
73021: LD_INT 0
73023: PPUSH
73024: CALL 75167 0 3
// end ;
73028: GO 72982
73030: POP
73031: POP
// if horses then
73032: LD_VAR 0 5
73036: IFFALSE 73103
// for i = 1 to horses do
73038: LD_ADDR_VAR 0 11
73042: PUSH
73043: DOUBLE
73044: LD_INT 1
73046: DEC
73047: ST_TO_ADDR
73048: LD_VAR 0 5
73052: PUSH
73053: FOR_TO
73054: IFFALSE 73101
// begin hc_class := 21 ;
73056: LD_ADDR_OWVAR 28
73060: PUSH
73061: LD_INT 21
73063: ST_TO_ADDR
// hc_gallery :=  ;
73064: LD_ADDR_OWVAR 33
73068: PUSH
73069: LD_STRING 
73071: ST_TO_ADDR
// animal := CreateHuman ;
73072: LD_ADDR_VAR 0 12
73076: PUSH
73077: CALL_OW 44
73081: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73082: LD_VAR 0 12
73086: PPUSH
73087: LD_VAR 0 8
73091: PPUSH
73092: LD_INT 0
73094: PPUSH
73095: CALL 75167 0 3
// end ;
73099: GO 73053
73101: POP
73102: POP
// if birds then
73103: LD_VAR 0 1
73107: IFFALSE 73174
// for i = 1 to birds do
73109: LD_ADDR_VAR 0 11
73113: PUSH
73114: DOUBLE
73115: LD_INT 1
73117: DEC
73118: ST_TO_ADDR
73119: LD_VAR 0 1
73123: PUSH
73124: FOR_TO
73125: IFFALSE 73172
// begin hc_class = 18 ;
73127: LD_ADDR_OWVAR 28
73131: PUSH
73132: LD_INT 18
73134: ST_TO_ADDR
// hc_gallery =  ;
73135: LD_ADDR_OWVAR 33
73139: PUSH
73140: LD_STRING 
73142: ST_TO_ADDR
// animal := CreateHuman ;
73143: LD_ADDR_VAR 0 12
73147: PUSH
73148: CALL_OW 44
73152: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73153: LD_VAR 0 12
73157: PPUSH
73158: LD_VAR 0 8
73162: PPUSH
73163: LD_INT 0
73165: PPUSH
73166: CALL 75167 0 3
// end ;
73170: GO 73124
73172: POP
73173: POP
// if tigers then
73174: LD_VAR 0 2
73178: IFFALSE 73262
// for i = 1 to tigers do
73180: LD_ADDR_VAR 0 11
73184: PUSH
73185: DOUBLE
73186: LD_INT 1
73188: DEC
73189: ST_TO_ADDR
73190: LD_VAR 0 2
73194: PUSH
73195: FOR_TO
73196: IFFALSE 73260
// begin hc_class = class_tiger ;
73198: LD_ADDR_OWVAR 28
73202: PUSH
73203: LD_INT 14
73205: ST_TO_ADDR
// hc_gallery =  ;
73206: LD_ADDR_OWVAR 33
73210: PUSH
73211: LD_STRING 
73213: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73214: LD_ADDR_OWVAR 35
73218: PUSH
73219: LD_INT 7
73221: NEG
73222: PPUSH
73223: LD_INT 7
73225: PPUSH
73226: CALL_OW 12
73230: ST_TO_ADDR
// animal := CreateHuman ;
73231: LD_ADDR_VAR 0 12
73235: PUSH
73236: CALL_OW 44
73240: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73241: LD_VAR 0 12
73245: PPUSH
73246: LD_VAR 0 8
73250: PPUSH
73251: LD_INT 0
73253: PPUSH
73254: CALL 75167 0 3
// end ;
73258: GO 73195
73260: POP
73261: POP
// if apemans then
73262: LD_VAR 0 3
73266: IFFALSE 73389
// for i = 1 to apemans do
73268: LD_ADDR_VAR 0 11
73272: PUSH
73273: DOUBLE
73274: LD_INT 1
73276: DEC
73277: ST_TO_ADDR
73278: LD_VAR 0 3
73282: PUSH
73283: FOR_TO
73284: IFFALSE 73387
// begin hc_class = class_apeman ;
73286: LD_ADDR_OWVAR 28
73290: PUSH
73291: LD_INT 12
73293: ST_TO_ADDR
// hc_gallery =  ;
73294: LD_ADDR_OWVAR 33
73298: PUSH
73299: LD_STRING 
73301: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73302: LD_ADDR_OWVAR 35
73306: PUSH
73307: LD_INT 2
73309: NEG
73310: PPUSH
73311: LD_INT 2
73313: PPUSH
73314: CALL_OW 12
73318: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73319: LD_ADDR_OWVAR 31
73323: PUSH
73324: LD_INT 1
73326: PPUSH
73327: LD_INT 3
73329: PPUSH
73330: CALL_OW 12
73334: PUSH
73335: LD_INT 1
73337: PPUSH
73338: LD_INT 3
73340: PPUSH
73341: CALL_OW 12
73345: PUSH
73346: LD_INT 0
73348: PUSH
73349: LD_INT 0
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: ST_TO_ADDR
// animal := CreateHuman ;
73358: LD_ADDR_VAR 0 12
73362: PUSH
73363: CALL_OW 44
73367: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73368: LD_VAR 0 12
73372: PPUSH
73373: LD_VAR 0 8
73377: PPUSH
73378: LD_INT 0
73380: PPUSH
73381: CALL 75167 0 3
// end ;
73385: GO 73283
73387: POP
73388: POP
// if enchidnas then
73389: LD_VAR 0 4
73393: IFFALSE 73460
// for i = 1 to enchidnas do
73395: LD_ADDR_VAR 0 11
73399: PUSH
73400: DOUBLE
73401: LD_INT 1
73403: DEC
73404: ST_TO_ADDR
73405: LD_VAR 0 4
73409: PUSH
73410: FOR_TO
73411: IFFALSE 73458
// begin hc_class = 13 ;
73413: LD_ADDR_OWVAR 28
73417: PUSH
73418: LD_INT 13
73420: ST_TO_ADDR
// hc_gallery =  ;
73421: LD_ADDR_OWVAR 33
73425: PUSH
73426: LD_STRING 
73428: ST_TO_ADDR
// animal := CreateHuman ;
73429: LD_ADDR_VAR 0 12
73433: PUSH
73434: CALL_OW 44
73438: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73439: LD_VAR 0 12
73443: PPUSH
73444: LD_VAR 0 8
73448: PPUSH
73449: LD_INT 0
73451: PPUSH
73452: CALL 75167 0 3
// end ;
73456: GO 73410
73458: POP
73459: POP
// if fishes then
73460: LD_VAR 0 7
73464: IFFALSE 73531
// for i = 1 to fishes do
73466: LD_ADDR_VAR 0 11
73470: PUSH
73471: DOUBLE
73472: LD_INT 1
73474: DEC
73475: ST_TO_ADDR
73476: LD_VAR 0 7
73480: PUSH
73481: FOR_TO
73482: IFFALSE 73529
// begin hc_class = 20 ;
73484: LD_ADDR_OWVAR 28
73488: PUSH
73489: LD_INT 20
73491: ST_TO_ADDR
// hc_gallery =  ;
73492: LD_ADDR_OWVAR 33
73496: PUSH
73497: LD_STRING 
73499: ST_TO_ADDR
// animal := CreateHuman ;
73500: LD_ADDR_VAR 0 12
73504: PUSH
73505: CALL_OW 44
73509: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73510: LD_VAR 0 12
73514: PPUSH
73515: LD_VAR 0 9
73519: PPUSH
73520: LD_INT 0
73522: PPUSH
73523: CALL 75167 0 3
// end ;
73527: GO 73481
73529: POP
73530: POP
// end ;
73531: LD_VAR 0 10
73535: RET
// export function WantHeal ( sci , unit ) ; begin
73536: LD_INT 0
73538: PPUSH
// if GetTaskList ( sci ) > 0 then
73539: LD_VAR 0 1
73543: PPUSH
73544: CALL_OW 437
73548: PUSH
73549: LD_INT 0
73551: GREATER
73552: IFFALSE 73622
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73554: LD_VAR 0 1
73558: PPUSH
73559: CALL_OW 437
73563: PUSH
73564: LD_INT 1
73566: ARRAY
73567: PUSH
73568: LD_INT 1
73570: ARRAY
73571: PUSH
73572: LD_STRING l
73574: EQUAL
73575: PUSH
73576: LD_VAR 0 1
73580: PPUSH
73581: CALL_OW 437
73585: PUSH
73586: LD_INT 1
73588: ARRAY
73589: PUSH
73590: LD_INT 4
73592: ARRAY
73593: PUSH
73594: LD_VAR 0 2
73598: EQUAL
73599: AND
73600: IFFALSE 73612
// result := true else
73602: LD_ADDR_VAR 0 3
73606: PUSH
73607: LD_INT 1
73609: ST_TO_ADDR
73610: GO 73620
// result := false ;
73612: LD_ADDR_VAR 0 3
73616: PUSH
73617: LD_INT 0
73619: ST_TO_ADDR
// end else
73620: GO 73630
// result := false ;
73622: LD_ADDR_VAR 0 3
73626: PUSH
73627: LD_INT 0
73629: ST_TO_ADDR
// end ;
73630: LD_VAR 0 3
73634: RET
// export function HealTarget ( sci ) ; begin
73635: LD_INT 0
73637: PPUSH
// if not sci then
73638: LD_VAR 0 1
73642: NOT
73643: IFFALSE 73647
// exit ;
73645: GO 73712
// result := 0 ;
73647: LD_ADDR_VAR 0 2
73651: PUSH
73652: LD_INT 0
73654: ST_TO_ADDR
// if GetTaskList ( sci ) then
73655: LD_VAR 0 1
73659: PPUSH
73660: CALL_OW 437
73664: IFFALSE 73712
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73666: LD_VAR 0 1
73670: PPUSH
73671: CALL_OW 437
73675: PUSH
73676: LD_INT 1
73678: ARRAY
73679: PUSH
73680: LD_INT 1
73682: ARRAY
73683: PUSH
73684: LD_STRING l
73686: EQUAL
73687: IFFALSE 73712
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73689: LD_ADDR_VAR 0 2
73693: PUSH
73694: LD_VAR 0 1
73698: PPUSH
73699: CALL_OW 437
73703: PUSH
73704: LD_INT 1
73706: ARRAY
73707: PUSH
73708: LD_INT 4
73710: ARRAY
73711: ST_TO_ADDR
// end ;
73712: LD_VAR 0 2
73716: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73717: LD_INT 0
73719: PPUSH
73720: PPUSH
73721: PPUSH
73722: PPUSH
// if not base_units then
73723: LD_VAR 0 1
73727: NOT
73728: IFFALSE 73732
// exit ;
73730: GO 73819
// result := false ;
73732: LD_ADDR_VAR 0 2
73736: PUSH
73737: LD_INT 0
73739: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73740: LD_ADDR_VAR 0 5
73744: PUSH
73745: LD_VAR 0 1
73749: PPUSH
73750: LD_INT 21
73752: PUSH
73753: LD_INT 3
73755: PUSH
73756: EMPTY
73757: LIST
73758: LIST
73759: PPUSH
73760: CALL_OW 72
73764: ST_TO_ADDR
// if not tmp then
73765: LD_VAR 0 5
73769: NOT
73770: IFFALSE 73774
// exit ;
73772: GO 73819
// for i in tmp do
73774: LD_ADDR_VAR 0 3
73778: PUSH
73779: LD_VAR 0 5
73783: PUSH
73784: FOR_IN
73785: IFFALSE 73817
// begin result := EnemyInRange ( i , 22 ) ;
73787: LD_ADDR_VAR 0 2
73791: PUSH
73792: LD_VAR 0 3
73796: PPUSH
73797: LD_INT 22
73799: PPUSH
73800: CALL 71488 0 2
73804: ST_TO_ADDR
// if result then
73805: LD_VAR 0 2
73809: IFFALSE 73815
// exit ;
73811: POP
73812: POP
73813: GO 73819
// end ;
73815: GO 73784
73817: POP
73818: POP
// end ;
73819: LD_VAR 0 2
73823: RET
// export function FilterByTag ( units , tag ) ; begin
73824: LD_INT 0
73826: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
73827: LD_ADDR_VAR 0 3
73831: PUSH
73832: LD_VAR 0 1
73836: PPUSH
73837: LD_INT 120
73839: PUSH
73840: LD_VAR 0 2
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PPUSH
73849: CALL_OW 72
73853: ST_TO_ADDR
// end ;
73854: LD_VAR 0 3
73858: RET
// export function IsDriver ( un ) ; begin
73859: LD_INT 0
73861: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
73862: LD_ADDR_VAR 0 2
73866: PUSH
73867: LD_VAR 0 1
73871: PUSH
73872: LD_INT 55
73874: PUSH
73875: EMPTY
73876: LIST
73877: PPUSH
73878: CALL_OW 69
73882: IN
73883: ST_TO_ADDR
// end ;
73884: LD_VAR 0 2
73888: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
73889: LD_INT 0
73891: PPUSH
73892: PPUSH
// list := [ ] ;
73893: LD_ADDR_VAR 0 5
73897: PUSH
73898: EMPTY
73899: ST_TO_ADDR
// case d of 0 :
73900: LD_VAR 0 3
73904: PUSH
73905: LD_INT 0
73907: DOUBLE
73908: EQUAL
73909: IFTRUE 73913
73911: GO 74046
73913: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
73914: LD_ADDR_VAR 0 5
73918: PUSH
73919: LD_VAR 0 1
73923: PUSH
73924: LD_INT 4
73926: MINUS
73927: PUSH
73928: LD_VAR 0 2
73932: PUSH
73933: LD_INT 4
73935: MINUS
73936: PUSH
73937: LD_INT 2
73939: PUSH
73940: EMPTY
73941: LIST
73942: LIST
73943: LIST
73944: PUSH
73945: LD_VAR 0 1
73949: PUSH
73950: LD_INT 3
73952: MINUS
73953: PUSH
73954: LD_VAR 0 2
73958: PUSH
73959: LD_INT 1
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: LIST
73966: PUSH
73967: LD_VAR 0 1
73971: PUSH
73972: LD_INT 4
73974: PLUS
73975: PUSH
73976: LD_VAR 0 2
73980: PUSH
73981: LD_INT 4
73983: PUSH
73984: EMPTY
73985: LIST
73986: LIST
73987: LIST
73988: PUSH
73989: LD_VAR 0 1
73993: PUSH
73994: LD_INT 3
73996: PLUS
73997: PUSH
73998: LD_VAR 0 2
74002: PUSH
74003: LD_INT 3
74005: PLUS
74006: PUSH
74007: LD_INT 5
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: LIST
74014: PUSH
74015: LD_VAR 0 1
74019: PUSH
74020: LD_VAR 0 2
74024: PUSH
74025: LD_INT 4
74027: PLUS
74028: PUSH
74029: LD_INT 0
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: LIST
74036: PUSH
74037: EMPTY
74038: LIST
74039: LIST
74040: LIST
74041: LIST
74042: LIST
74043: ST_TO_ADDR
// end ; 1 :
74044: GO 74744
74046: LD_INT 1
74048: DOUBLE
74049: EQUAL
74050: IFTRUE 74054
74052: GO 74187
74054: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74055: LD_ADDR_VAR 0 5
74059: PUSH
74060: LD_VAR 0 1
74064: PUSH
74065: LD_VAR 0 2
74069: PUSH
74070: LD_INT 4
74072: MINUS
74073: PUSH
74074: LD_INT 3
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: LIST
74081: PUSH
74082: LD_VAR 0 1
74086: PUSH
74087: LD_INT 3
74089: MINUS
74090: PUSH
74091: LD_VAR 0 2
74095: PUSH
74096: LD_INT 3
74098: MINUS
74099: PUSH
74100: LD_INT 2
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: LIST
74107: PUSH
74108: LD_VAR 0 1
74112: PUSH
74113: LD_INT 4
74115: MINUS
74116: PUSH
74117: LD_VAR 0 2
74121: PUSH
74122: LD_INT 1
74124: PUSH
74125: EMPTY
74126: LIST
74127: LIST
74128: LIST
74129: PUSH
74130: LD_VAR 0 1
74134: PUSH
74135: LD_VAR 0 2
74139: PUSH
74140: LD_INT 3
74142: PLUS
74143: PUSH
74144: LD_INT 0
74146: PUSH
74147: EMPTY
74148: LIST
74149: LIST
74150: LIST
74151: PUSH
74152: LD_VAR 0 1
74156: PUSH
74157: LD_INT 4
74159: PLUS
74160: PUSH
74161: LD_VAR 0 2
74165: PUSH
74166: LD_INT 4
74168: PLUS
74169: PUSH
74170: LD_INT 5
74172: PUSH
74173: EMPTY
74174: LIST
74175: LIST
74176: LIST
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: LIST
74182: LIST
74183: LIST
74184: ST_TO_ADDR
// end ; 2 :
74185: GO 74744
74187: LD_INT 2
74189: DOUBLE
74190: EQUAL
74191: IFTRUE 74195
74193: GO 74324
74195: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74196: LD_ADDR_VAR 0 5
74200: PUSH
74201: LD_VAR 0 1
74205: PUSH
74206: LD_VAR 0 2
74210: PUSH
74211: LD_INT 3
74213: MINUS
74214: PUSH
74215: LD_INT 3
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: LIST
74222: PUSH
74223: LD_VAR 0 1
74227: PUSH
74228: LD_INT 4
74230: PLUS
74231: PUSH
74232: LD_VAR 0 2
74236: PUSH
74237: LD_INT 4
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: LIST
74244: PUSH
74245: LD_VAR 0 1
74249: PUSH
74250: LD_VAR 0 2
74254: PUSH
74255: LD_INT 4
74257: PLUS
74258: PUSH
74259: LD_INT 0
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: LIST
74266: PUSH
74267: LD_VAR 0 1
74271: PUSH
74272: LD_INT 3
74274: MINUS
74275: PUSH
74276: LD_VAR 0 2
74280: PUSH
74281: LD_INT 1
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: LIST
74288: PUSH
74289: LD_VAR 0 1
74293: PUSH
74294: LD_INT 4
74296: MINUS
74297: PUSH
74298: LD_VAR 0 2
74302: PUSH
74303: LD_INT 4
74305: MINUS
74306: PUSH
74307: LD_INT 2
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: LIST
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: ST_TO_ADDR
// end ; 3 :
74322: GO 74744
74324: LD_INT 3
74326: DOUBLE
74327: EQUAL
74328: IFTRUE 74332
74330: GO 74465
74332: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74333: LD_ADDR_VAR 0 5
74337: PUSH
74338: LD_VAR 0 1
74342: PUSH
74343: LD_INT 3
74345: PLUS
74346: PUSH
74347: LD_VAR 0 2
74351: PUSH
74352: LD_INT 4
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: LIST
74359: PUSH
74360: LD_VAR 0 1
74364: PUSH
74365: LD_INT 4
74367: PLUS
74368: PUSH
74369: LD_VAR 0 2
74373: PUSH
74374: LD_INT 4
74376: PLUS
74377: PUSH
74378: LD_INT 5
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: LIST
74385: PUSH
74386: LD_VAR 0 1
74390: PUSH
74391: LD_INT 4
74393: MINUS
74394: PUSH
74395: LD_VAR 0 2
74399: PUSH
74400: LD_INT 1
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: LIST
74407: PUSH
74408: LD_VAR 0 1
74412: PUSH
74413: LD_VAR 0 2
74417: PUSH
74418: LD_INT 4
74420: MINUS
74421: PUSH
74422: LD_INT 3
74424: PUSH
74425: EMPTY
74426: LIST
74427: LIST
74428: LIST
74429: PUSH
74430: LD_VAR 0 1
74434: PUSH
74435: LD_INT 3
74437: MINUS
74438: PUSH
74439: LD_VAR 0 2
74443: PUSH
74444: LD_INT 3
74446: MINUS
74447: PUSH
74448: LD_INT 2
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: LIST
74455: PUSH
74456: EMPTY
74457: LIST
74458: LIST
74459: LIST
74460: LIST
74461: LIST
74462: ST_TO_ADDR
// end ; 4 :
74463: GO 74744
74465: LD_INT 4
74467: DOUBLE
74468: EQUAL
74469: IFTRUE 74473
74471: GO 74606
74473: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74474: LD_ADDR_VAR 0 5
74478: PUSH
74479: LD_VAR 0 1
74483: PUSH
74484: LD_VAR 0 2
74488: PUSH
74489: LD_INT 4
74491: PLUS
74492: PUSH
74493: LD_INT 0
74495: PUSH
74496: EMPTY
74497: LIST
74498: LIST
74499: LIST
74500: PUSH
74501: LD_VAR 0 1
74505: PUSH
74506: LD_INT 3
74508: PLUS
74509: PUSH
74510: LD_VAR 0 2
74514: PUSH
74515: LD_INT 3
74517: PLUS
74518: PUSH
74519: LD_INT 5
74521: PUSH
74522: EMPTY
74523: LIST
74524: LIST
74525: LIST
74526: PUSH
74527: LD_VAR 0 1
74531: PUSH
74532: LD_INT 4
74534: PLUS
74535: PUSH
74536: LD_VAR 0 2
74540: PUSH
74541: LD_INT 4
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: LIST
74548: PUSH
74549: LD_VAR 0 1
74553: PUSH
74554: LD_VAR 0 2
74558: PUSH
74559: LD_INT 3
74561: MINUS
74562: PUSH
74563: LD_INT 3
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: LIST
74570: PUSH
74571: LD_VAR 0 1
74575: PUSH
74576: LD_INT 4
74578: MINUS
74579: PUSH
74580: LD_VAR 0 2
74584: PUSH
74585: LD_INT 4
74587: MINUS
74588: PUSH
74589: LD_INT 2
74591: PUSH
74592: EMPTY
74593: LIST
74594: LIST
74595: LIST
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: LIST
74601: LIST
74602: LIST
74603: ST_TO_ADDR
// end ; 5 :
74604: GO 74744
74606: LD_INT 5
74608: DOUBLE
74609: EQUAL
74610: IFTRUE 74614
74612: GO 74743
74614: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74615: LD_ADDR_VAR 0 5
74619: PUSH
74620: LD_VAR 0 1
74624: PUSH
74625: LD_INT 4
74627: MINUS
74628: PUSH
74629: LD_VAR 0 2
74633: PUSH
74634: LD_INT 1
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: LIST
74641: PUSH
74642: LD_VAR 0 1
74646: PUSH
74647: LD_VAR 0 2
74651: PUSH
74652: LD_INT 4
74654: MINUS
74655: PUSH
74656: LD_INT 3
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: LIST
74663: PUSH
74664: LD_VAR 0 1
74668: PUSH
74669: LD_INT 4
74671: PLUS
74672: PUSH
74673: LD_VAR 0 2
74677: PUSH
74678: LD_INT 4
74680: PLUS
74681: PUSH
74682: LD_INT 5
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: LIST
74689: PUSH
74690: LD_VAR 0 1
74694: PUSH
74695: LD_INT 3
74697: PLUS
74698: PUSH
74699: LD_VAR 0 2
74703: PUSH
74704: LD_INT 4
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: LIST
74711: PUSH
74712: LD_VAR 0 1
74716: PUSH
74717: LD_VAR 0 2
74721: PUSH
74722: LD_INT 3
74724: PLUS
74725: PUSH
74726: LD_INT 0
74728: PUSH
74729: EMPTY
74730: LIST
74731: LIST
74732: LIST
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: LIST
74738: LIST
74739: LIST
74740: ST_TO_ADDR
// end ; end ;
74741: GO 74744
74743: POP
// result := list ;
74744: LD_ADDR_VAR 0 4
74748: PUSH
74749: LD_VAR 0 5
74753: ST_TO_ADDR
// end ;
74754: LD_VAR 0 4
74758: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74759: LD_INT 0
74761: PPUSH
74762: PPUSH
74763: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74764: LD_VAR 0 1
74768: NOT
74769: PUSH
74770: LD_VAR 0 2
74774: PUSH
74775: LD_INT 1
74777: PUSH
74778: LD_INT 2
74780: PUSH
74781: LD_INT 3
74783: PUSH
74784: LD_INT 4
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: LIST
74791: LIST
74792: IN
74793: NOT
74794: OR
74795: IFFALSE 74799
// exit ;
74797: GO 74891
// tmp := [ ] ;
74799: LD_ADDR_VAR 0 5
74803: PUSH
74804: EMPTY
74805: ST_TO_ADDR
// for i in units do
74806: LD_ADDR_VAR 0 4
74810: PUSH
74811: LD_VAR 0 1
74815: PUSH
74816: FOR_IN
74817: IFFALSE 74860
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
74819: LD_ADDR_VAR 0 5
74823: PUSH
74824: LD_VAR 0 5
74828: PPUSH
74829: LD_VAR 0 5
74833: PUSH
74834: LD_INT 1
74836: PLUS
74837: PPUSH
74838: LD_VAR 0 4
74842: PPUSH
74843: LD_VAR 0 2
74847: PPUSH
74848: CALL_OW 259
74852: PPUSH
74853: CALL_OW 2
74857: ST_TO_ADDR
74858: GO 74816
74860: POP
74861: POP
// if not tmp then
74862: LD_VAR 0 5
74866: NOT
74867: IFFALSE 74871
// exit ;
74869: GO 74891
// result := SortListByListDesc ( units , tmp ) ;
74871: LD_ADDR_VAR 0 3
74875: PUSH
74876: LD_VAR 0 1
74880: PPUSH
74881: LD_VAR 0 5
74885: PPUSH
74886: CALL_OW 77
74890: ST_TO_ADDR
// end ;
74891: LD_VAR 0 3
74895: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
74896: LD_INT 0
74898: PPUSH
74899: PPUSH
74900: PPUSH
// result := false ;
74901: LD_ADDR_VAR 0 3
74905: PUSH
74906: LD_INT 0
74908: ST_TO_ADDR
// x := GetX ( building ) ;
74909: LD_ADDR_VAR 0 4
74913: PUSH
74914: LD_VAR 0 2
74918: PPUSH
74919: CALL_OW 250
74923: ST_TO_ADDR
// y := GetY ( building ) ;
74924: LD_ADDR_VAR 0 5
74928: PUSH
74929: LD_VAR 0 2
74933: PPUSH
74934: CALL_OW 251
74938: ST_TO_ADDR
// if not building or not x or not y then
74939: LD_VAR 0 2
74943: NOT
74944: PUSH
74945: LD_VAR 0 4
74949: NOT
74950: OR
74951: PUSH
74952: LD_VAR 0 5
74956: NOT
74957: OR
74958: IFFALSE 74962
// exit ;
74960: GO 75054
// if GetTaskList ( unit ) then
74962: LD_VAR 0 1
74966: PPUSH
74967: CALL_OW 437
74971: IFFALSE 75054
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74973: LD_STRING e
74975: PUSH
74976: LD_VAR 0 1
74980: PPUSH
74981: CALL_OW 437
74985: PUSH
74986: LD_INT 1
74988: ARRAY
74989: PUSH
74990: LD_INT 1
74992: ARRAY
74993: EQUAL
74994: PUSH
74995: LD_VAR 0 4
74999: PUSH
75000: LD_VAR 0 1
75004: PPUSH
75005: CALL_OW 437
75009: PUSH
75010: LD_INT 1
75012: ARRAY
75013: PUSH
75014: LD_INT 2
75016: ARRAY
75017: EQUAL
75018: AND
75019: PUSH
75020: LD_VAR 0 5
75024: PUSH
75025: LD_VAR 0 1
75029: PPUSH
75030: CALL_OW 437
75034: PUSH
75035: LD_INT 1
75037: ARRAY
75038: PUSH
75039: LD_INT 3
75041: ARRAY
75042: EQUAL
75043: AND
75044: IFFALSE 75054
// result := true end ;
75046: LD_ADDR_VAR 0 3
75050: PUSH
75051: LD_INT 1
75053: ST_TO_ADDR
// end ;
75054: LD_VAR 0 3
75058: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75059: LD_INT 0
75061: PPUSH
// result := false ;
75062: LD_ADDR_VAR 0 4
75066: PUSH
75067: LD_INT 0
75069: ST_TO_ADDR
// if GetTaskList ( unit ) then
75070: LD_VAR 0 1
75074: PPUSH
75075: CALL_OW 437
75079: IFFALSE 75162
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75081: LD_STRING M
75083: PUSH
75084: LD_VAR 0 1
75088: PPUSH
75089: CALL_OW 437
75093: PUSH
75094: LD_INT 1
75096: ARRAY
75097: PUSH
75098: LD_INT 1
75100: ARRAY
75101: EQUAL
75102: PUSH
75103: LD_VAR 0 2
75107: PUSH
75108: LD_VAR 0 1
75112: PPUSH
75113: CALL_OW 437
75117: PUSH
75118: LD_INT 1
75120: ARRAY
75121: PUSH
75122: LD_INT 2
75124: ARRAY
75125: EQUAL
75126: AND
75127: PUSH
75128: LD_VAR 0 3
75132: PUSH
75133: LD_VAR 0 1
75137: PPUSH
75138: CALL_OW 437
75142: PUSH
75143: LD_INT 1
75145: ARRAY
75146: PUSH
75147: LD_INT 3
75149: ARRAY
75150: EQUAL
75151: AND
75152: IFFALSE 75162
// result := true ;
75154: LD_ADDR_VAR 0 4
75158: PUSH
75159: LD_INT 1
75161: ST_TO_ADDR
// end ; end ;
75162: LD_VAR 0 4
75166: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75167: LD_INT 0
75169: PPUSH
75170: PPUSH
75171: PPUSH
75172: PPUSH
// if not unit or not area then
75173: LD_VAR 0 1
75177: NOT
75178: PUSH
75179: LD_VAR 0 2
75183: NOT
75184: OR
75185: IFFALSE 75189
// exit ;
75187: GO 75353
// tmp := AreaToList ( area , i ) ;
75189: LD_ADDR_VAR 0 6
75193: PUSH
75194: LD_VAR 0 2
75198: PPUSH
75199: LD_VAR 0 5
75203: PPUSH
75204: CALL_OW 517
75208: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75209: LD_ADDR_VAR 0 5
75213: PUSH
75214: DOUBLE
75215: LD_INT 1
75217: DEC
75218: ST_TO_ADDR
75219: LD_VAR 0 6
75223: PUSH
75224: LD_INT 1
75226: ARRAY
75227: PUSH
75228: FOR_TO
75229: IFFALSE 75351
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75231: LD_ADDR_VAR 0 7
75235: PUSH
75236: LD_VAR 0 6
75240: PUSH
75241: LD_INT 1
75243: ARRAY
75244: PUSH
75245: LD_VAR 0 5
75249: ARRAY
75250: PUSH
75251: LD_VAR 0 6
75255: PUSH
75256: LD_INT 2
75258: ARRAY
75259: PUSH
75260: LD_VAR 0 5
75264: ARRAY
75265: PUSH
75266: EMPTY
75267: LIST
75268: LIST
75269: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75270: LD_VAR 0 7
75274: PUSH
75275: LD_INT 1
75277: ARRAY
75278: PPUSH
75279: LD_VAR 0 7
75283: PUSH
75284: LD_INT 2
75286: ARRAY
75287: PPUSH
75288: CALL_OW 428
75292: PUSH
75293: LD_INT 0
75295: EQUAL
75296: IFFALSE 75349
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75298: LD_VAR 0 1
75302: PPUSH
75303: LD_VAR 0 7
75307: PUSH
75308: LD_INT 1
75310: ARRAY
75311: PPUSH
75312: LD_VAR 0 7
75316: PUSH
75317: LD_INT 2
75319: ARRAY
75320: PPUSH
75321: LD_VAR 0 3
75325: PPUSH
75326: CALL_OW 48
// result := IsPlaced ( unit ) ;
75330: LD_ADDR_VAR 0 4
75334: PUSH
75335: LD_VAR 0 1
75339: PPUSH
75340: CALL_OW 305
75344: ST_TO_ADDR
// exit ;
75345: POP
75346: POP
75347: GO 75353
// end ; end ;
75349: GO 75228
75351: POP
75352: POP
// end ;
75353: LD_VAR 0 4
75357: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75358: LD_INT 0
75360: PPUSH
75361: PPUSH
75362: PPUSH
// if not side or side > 8 then
75363: LD_VAR 0 1
75367: NOT
75368: PUSH
75369: LD_VAR 0 1
75373: PUSH
75374: LD_INT 8
75376: GREATER
75377: OR
75378: IFFALSE 75382
// exit ;
75380: GO 75569
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75382: LD_ADDR_VAR 0 4
75386: PUSH
75387: LD_INT 22
75389: PUSH
75390: LD_VAR 0 1
75394: PUSH
75395: EMPTY
75396: LIST
75397: LIST
75398: PUSH
75399: LD_INT 21
75401: PUSH
75402: LD_INT 3
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: PPUSH
75413: CALL_OW 69
75417: ST_TO_ADDR
// if not tmp then
75418: LD_VAR 0 4
75422: NOT
75423: IFFALSE 75427
// exit ;
75425: GO 75569
// enable_addtolog := true ;
75427: LD_ADDR_OWVAR 81
75431: PUSH
75432: LD_INT 1
75434: ST_TO_ADDR
// AddToLog ( [ ) ;
75435: LD_STRING [
75437: PPUSH
75438: CALL_OW 561
// for i in tmp do
75442: LD_ADDR_VAR 0 3
75446: PUSH
75447: LD_VAR 0 4
75451: PUSH
75452: FOR_IN
75453: IFFALSE 75560
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75455: LD_STRING [
75457: PUSH
75458: LD_VAR 0 3
75462: PPUSH
75463: CALL_OW 266
75467: STR
75468: PUSH
75469: LD_STRING , 
75471: STR
75472: PUSH
75473: LD_VAR 0 3
75477: PPUSH
75478: CALL_OW 250
75482: STR
75483: PUSH
75484: LD_STRING , 
75486: STR
75487: PUSH
75488: LD_VAR 0 3
75492: PPUSH
75493: CALL_OW 251
75497: STR
75498: PUSH
75499: LD_STRING , 
75501: STR
75502: PUSH
75503: LD_VAR 0 3
75507: PPUSH
75508: CALL_OW 254
75512: STR
75513: PUSH
75514: LD_STRING , 
75516: STR
75517: PUSH
75518: LD_VAR 0 3
75522: PPUSH
75523: LD_INT 1
75525: PPUSH
75526: CALL_OW 268
75530: STR
75531: PUSH
75532: LD_STRING , 
75534: STR
75535: PUSH
75536: LD_VAR 0 3
75540: PPUSH
75541: LD_INT 2
75543: PPUSH
75544: CALL_OW 268
75548: STR
75549: PUSH
75550: LD_STRING ],
75552: STR
75553: PPUSH
75554: CALL_OW 561
// end ;
75558: GO 75452
75560: POP
75561: POP
// AddToLog ( ]; ) ;
75562: LD_STRING ];
75564: PPUSH
75565: CALL_OW 561
// end ;
75569: LD_VAR 0 2
75573: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75574: LD_INT 0
75576: PPUSH
75577: PPUSH
75578: PPUSH
75579: PPUSH
75580: PPUSH
// if not area or not rate or not max then
75581: LD_VAR 0 1
75585: NOT
75586: PUSH
75587: LD_VAR 0 2
75591: NOT
75592: OR
75593: PUSH
75594: LD_VAR 0 4
75598: NOT
75599: OR
75600: IFFALSE 75604
// exit ;
75602: GO 75793
// while 1 do
75604: LD_INT 1
75606: IFFALSE 75793
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75608: LD_ADDR_VAR 0 9
75612: PUSH
75613: LD_VAR 0 1
75617: PPUSH
75618: LD_INT 1
75620: PPUSH
75621: CALL_OW 287
75625: PUSH
75626: LD_INT 10
75628: MUL
75629: ST_TO_ADDR
// r := rate / 10 ;
75630: LD_ADDR_VAR 0 7
75634: PUSH
75635: LD_VAR 0 2
75639: PUSH
75640: LD_INT 10
75642: DIVREAL
75643: ST_TO_ADDR
// time := 1 1$00 ;
75644: LD_ADDR_VAR 0 8
75648: PUSH
75649: LD_INT 2100
75651: ST_TO_ADDR
// if amount < min then
75652: LD_VAR 0 9
75656: PUSH
75657: LD_VAR 0 3
75661: LESS
75662: IFFALSE 75680
// r := r * 2 else
75664: LD_ADDR_VAR 0 7
75668: PUSH
75669: LD_VAR 0 7
75673: PUSH
75674: LD_INT 2
75676: MUL
75677: ST_TO_ADDR
75678: GO 75706
// if amount > max then
75680: LD_VAR 0 9
75684: PUSH
75685: LD_VAR 0 4
75689: GREATER
75690: IFFALSE 75706
// r := r / 2 ;
75692: LD_ADDR_VAR 0 7
75696: PUSH
75697: LD_VAR 0 7
75701: PUSH
75702: LD_INT 2
75704: DIVREAL
75705: ST_TO_ADDR
// time := time / r ;
75706: LD_ADDR_VAR 0 8
75710: PUSH
75711: LD_VAR 0 8
75715: PUSH
75716: LD_VAR 0 7
75720: DIVREAL
75721: ST_TO_ADDR
// if time < 0 then
75722: LD_VAR 0 8
75726: PUSH
75727: LD_INT 0
75729: LESS
75730: IFFALSE 75747
// time := time * - 1 ;
75732: LD_ADDR_VAR 0 8
75736: PUSH
75737: LD_VAR 0 8
75741: PUSH
75742: LD_INT 1
75744: NEG
75745: MUL
75746: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75747: LD_VAR 0 8
75751: PUSH
75752: LD_INT 35
75754: PPUSH
75755: LD_INT 875
75757: PPUSH
75758: CALL_OW 12
75762: PLUS
75763: PPUSH
75764: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75768: LD_INT 1
75770: PPUSH
75771: LD_INT 5
75773: PPUSH
75774: CALL_OW 12
75778: PPUSH
75779: LD_VAR 0 1
75783: PPUSH
75784: LD_INT 1
75786: PPUSH
75787: CALL_OW 55
// end ;
75791: GO 75604
// end ;
75793: LD_VAR 0 5
75797: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75798: LD_INT 0
75800: PPUSH
75801: PPUSH
75802: PPUSH
75803: PPUSH
75804: PPUSH
75805: PPUSH
75806: PPUSH
75807: PPUSH
// if not turrets or not factories then
75808: LD_VAR 0 1
75812: NOT
75813: PUSH
75814: LD_VAR 0 2
75818: NOT
75819: OR
75820: IFFALSE 75824
// exit ;
75822: GO 76131
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
75824: LD_ADDR_VAR 0 10
75828: PUSH
75829: LD_INT 5
75831: PUSH
75832: LD_INT 6
75834: PUSH
75835: EMPTY
75836: LIST
75837: LIST
75838: PUSH
75839: LD_INT 2
75841: PUSH
75842: LD_INT 4
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: PUSH
75849: LD_INT 3
75851: PUSH
75852: LD_INT 5
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: LIST
75863: PUSH
75864: LD_INT 24
75866: PUSH
75867: LD_INT 25
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: PUSH
75874: LD_INT 23
75876: PUSH
75877: LD_INT 27
75879: PUSH
75880: EMPTY
75881: LIST
75882: LIST
75883: PUSH
75884: EMPTY
75885: LIST
75886: LIST
75887: PUSH
75888: LD_INT 42
75890: PUSH
75891: LD_INT 43
75893: PUSH
75894: EMPTY
75895: LIST
75896: LIST
75897: PUSH
75898: LD_INT 44
75900: PUSH
75901: LD_INT 46
75903: PUSH
75904: EMPTY
75905: LIST
75906: LIST
75907: PUSH
75908: LD_INT 45
75910: PUSH
75911: LD_INT 47
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: PUSH
75918: EMPTY
75919: LIST
75920: LIST
75921: LIST
75922: PUSH
75923: EMPTY
75924: LIST
75925: LIST
75926: LIST
75927: ST_TO_ADDR
// result := [ ] ;
75928: LD_ADDR_VAR 0 3
75932: PUSH
75933: EMPTY
75934: ST_TO_ADDR
// for i in turrets do
75935: LD_ADDR_VAR 0 4
75939: PUSH
75940: LD_VAR 0 1
75944: PUSH
75945: FOR_IN
75946: IFFALSE 76129
// begin nat := GetNation ( i ) ;
75948: LD_ADDR_VAR 0 7
75952: PUSH
75953: LD_VAR 0 4
75957: PPUSH
75958: CALL_OW 248
75962: ST_TO_ADDR
// weapon := 0 ;
75963: LD_ADDR_VAR 0 8
75967: PUSH
75968: LD_INT 0
75970: ST_TO_ADDR
// if not nat then
75971: LD_VAR 0 7
75975: NOT
75976: IFFALSE 75980
// continue ;
75978: GO 75945
// for j in list [ nat ] do
75980: LD_ADDR_VAR 0 5
75984: PUSH
75985: LD_VAR 0 10
75989: PUSH
75990: LD_VAR 0 7
75994: ARRAY
75995: PUSH
75996: FOR_IN
75997: IFFALSE 76038
// if GetBWeapon ( i ) = j [ 1 ] then
75999: LD_VAR 0 4
76003: PPUSH
76004: CALL_OW 269
76008: PUSH
76009: LD_VAR 0 5
76013: PUSH
76014: LD_INT 1
76016: ARRAY
76017: EQUAL
76018: IFFALSE 76036
// begin weapon := j [ 2 ] ;
76020: LD_ADDR_VAR 0 8
76024: PUSH
76025: LD_VAR 0 5
76029: PUSH
76030: LD_INT 2
76032: ARRAY
76033: ST_TO_ADDR
// break ;
76034: GO 76038
// end ;
76036: GO 75996
76038: POP
76039: POP
// if not weapon then
76040: LD_VAR 0 8
76044: NOT
76045: IFFALSE 76049
// continue ;
76047: GO 75945
// for k in factories do
76049: LD_ADDR_VAR 0 6
76053: PUSH
76054: LD_VAR 0 2
76058: PUSH
76059: FOR_IN
76060: IFFALSE 76125
// begin weapons := AvailableWeaponList ( k ) ;
76062: LD_ADDR_VAR 0 9
76066: PUSH
76067: LD_VAR 0 6
76071: PPUSH
76072: CALL_OW 478
76076: ST_TO_ADDR
// if not weapons then
76077: LD_VAR 0 9
76081: NOT
76082: IFFALSE 76086
// continue ;
76084: GO 76059
// if weapon in weapons then
76086: LD_VAR 0 8
76090: PUSH
76091: LD_VAR 0 9
76095: IN
76096: IFFALSE 76123
// begin result := [ i , weapon ] ;
76098: LD_ADDR_VAR 0 3
76102: PUSH
76103: LD_VAR 0 4
76107: PUSH
76108: LD_VAR 0 8
76112: PUSH
76113: EMPTY
76114: LIST
76115: LIST
76116: ST_TO_ADDR
// exit ;
76117: POP
76118: POP
76119: POP
76120: POP
76121: GO 76131
// end ; end ;
76123: GO 76059
76125: POP
76126: POP
// end ;
76127: GO 75945
76129: POP
76130: POP
// end ;
76131: LD_VAR 0 3
76135: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76136: LD_INT 0
76138: PPUSH
// if not side or side > 8 then
76139: LD_VAR 0 3
76143: NOT
76144: PUSH
76145: LD_VAR 0 3
76149: PUSH
76150: LD_INT 8
76152: GREATER
76153: OR
76154: IFFALSE 76158
// exit ;
76156: GO 76217
// if not range then
76158: LD_VAR 0 4
76162: NOT
76163: IFFALSE 76174
// range := - 12 ;
76165: LD_ADDR_VAR 0 4
76169: PUSH
76170: LD_INT 12
76172: NEG
76173: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76174: LD_VAR 0 1
76178: PPUSH
76179: LD_VAR 0 2
76183: PPUSH
76184: LD_VAR 0 3
76188: PPUSH
76189: LD_VAR 0 4
76193: PPUSH
76194: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76198: LD_VAR 0 1
76202: PPUSH
76203: LD_VAR 0 2
76207: PPUSH
76208: LD_VAR 0 3
76212: PPUSH
76213: CALL_OW 331
// end ;
76217: LD_VAR 0 5
76221: RET
// export function Video ( mode ) ; begin
76222: LD_INT 0
76224: PPUSH
// ingame_video = mode ;
76225: LD_ADDR_OWVAR 52
76229: PUSH
76230: LD_VAR 0 1
76234: ST_TO_ADDR
// interface_hidden = mode ;
76235: LD_ADDR_OWVAR 54
76239: PUSH
76240: LD_VAR 0 1
76244: ST_TO_ADDR
// end ;
76245: LD_VAR 0 2
76249: RET
// export function Join ( array , element ) ; begin
76250: LD_INT 0
76252: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76253: LD_ADDR_VAR 0 3
76257: PUSH
76258: LD_VAR 0 1
76262: PPUSH
76263: LD_VAR 0 1
76267: PUSH
76268: LD_INT 1
76270: PLUS
76271: PPUSH
76272: LD_VAR 0 2
76276: PPUSH
76277: CALL_OW 1
76281: ST_TO_ADDR
// end ;
76282: LD_VAR 0 3
76286: RET
// export function JoinUnion ( array , element ) ; begin
76287: LD_INT 0
76289: PPUSH
// result := array union element ;
76290: LD_ADDR_VAR 0 3
76294: PUSH
76295: LD_VAR 0 1
76299: PUSH
76300: LD_VAR 0 2
76304: UNION
76305: ST_TO_ADDR
// end ;
76306: LD_VAR 0 3
76310: RET
// export function GetBehemoths ( side ) ; begin
76311: LD_INT 0
76313: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
76314: LD_ADDR_VAR 0 2
76318: PUSH
76319: LD_INT 22
76321: PUSH
76322: LD_VAR 0 1
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: PUSH
76331: LD_INT 31
76333: PUSH
76334: LD_INT 25
76336: PUSH
76337: EMPTY
76338: LIST
76339: LIST
76340: PUSH
76341: EMPTY
76342: LIST
76343: LIST
76344: PPUSH
76345: CALL_OW 69
76349: ST_TO_ADDR
// end ;
76350: LD_VAR 0 2
76354: RET
// export function Shuffle ( array ) ; var i , index ; begin
76355: LD_INT 0
76357: PPUSH
76358: PPUSH
76359: PPUSH
// result := [ ] ;
76360: LD_ADDR_VAR 0 2
76364: PUSH
76365: EMPTY
76366: ST_TO_ADDR
// if not array then
76367: LD_VAR 0 1
76371: NOT
76372: IFFALSE 76376
// exit ;
76374: GO 76475
// Randomize ;
76376: CALL_OW 10
// for i = array downto 1 do
76380: LD_ADDR_VAR 0 3
76384: PUSH
76385: DOUBLE
76386: LD_VAR 0 1
76390: INC
76391: ST_TO_ADDR
76392: LD_INT 1
76394: PUSH
76395: FOR_DOWNTO
76396: IFFALSE 76473
// begin index := rand ( 1 , array ) ;
76398: LD_ADDR_VAR 0 4
76402: PUSH
76403: LD_INT 1
76405: PPUSH
76406: LD_VAR 0 1
76410: PPUSH
76411: CALL_OW 12
76415: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76416: LD_ADDR_VAR 0 2
76420: PUSH
76421: LD_VAR 0 2
76425: PPUSH
76426: LD_VAR 0 2
76430: PUSH
76431: LD_INT 1
76433: PLUS
76434: PPUSH
76435: LD_VAR 0 1
76439: PUSH
76440: LD_VAR 0 4
76444: ARRAY
76445: PPUSH
76446: CALL_OW 2
76450: ST_TO_ADDR
// array := Delete ( array , index ) ;
76451: LD_ADDR_VAR 0 1
76455: PUSH
76456: LD_VAR 0 1
76460: PPUSH
76461: LD_VAR 0 4
76465: PPUSH
76466: CALL_OW 3
76470: ST_TO_ADDR
// end ;
76471: GO 76395
76473: POP
76474: POP
// end ;
76475: LD_VAR 0 2
76479: RET
// export function GetBaseMaterials ( base ) ; begin
76480: LD_INT 0
76482: PPUSH
// result := [ 0 , 0 , 0 ] ;
76483: LD_ADDR_VAR 0 2
76487: PUSH
76488: LD_INT 0
76490: PUSH
76491: LD_INT 0
76493: PUSH
76494: LD_INT 0
76496: PUSH
76497: EMPTY
76498: LIST
76499: LIST
76500: LIST
76501: ST_TO_ADDR
// if not base then
76502: LD_VAR 0 1
76506: NOT
76507: IFFALSE 76511
// exit ;
76509: GO 76560
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76511: LD_ADDR_VAR 0 2
76515: PUSH
76516: LD_VAR 0 1
76520: PPUSH
76521: LD_INT 1
76523: PPUSH
76524: CALL_OW 275
76528: PUSH
76529: LD_VAR 0 1
76533: PPUSH
76534: LD_INT 2
76536: PPUSH
76537: CALL_OW 275
76541: PUSH
76542: LD_VAR 0 1
76546: PPUSH
76547: LD_INT 3
76549: PPUSH
76550: CALL_OW 275
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: LIST
76559: ST_TO_ADDR
// end ;
76560: LD_VAR 0 2
76564: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76565: LD_INT 0
76567: PPUSH
76568: PPUSH
// result := array ;
76569: LD_ADDR_VAR 0 3
76573: PUSH
76574: LD_VAR 0 1
76578: ST_TO_ADDR
// if size >= result then
76579: LD_VAR 0 2
76583: PUSH
76584: LD_VAR 0 3
76588: GREATEREQUAL
76589: IFFALSE 76593
// exit ;
76591: GO 76643
// if size then
76593: LD_VAR 0 2
76597: IFFALSE 76643
// for i := array downto size do
76599: LD_ADDR_VAR 0 4
76603: PUSH
76604: DOUBLE
76605: LD_VAR 0 1
76609: INC
76610: ST_TO_ADDR
76611: LD_VAR 0 2
76615: PUSH
76616: FOR_DOWNTO
76617: IFFALSE 76641
// result := Delete ( result , result ) ;
76619: LD_ADDR_VAR 0 3
76623: PUSH
76624: LD_VAR 0 3
76628: PPUSH
76629: LD_VAR 0 3
76633: PPUSH
76634: CALL_OW 3
76638: ST_TO_ADDR
76639: GO 76616
76641: POP
76642: POP
// end ;
76643: LD_VAR 0 3
76647: RET
// export function ComExit ( unit ) ; var tmp ; begin
76648: LD_INT 0
76650: PPUSH
76651: PPUSH
// if not IsInUnit ( unit ) then
76652: LD_VAR 0 1
76656: PPUSH
76657: CALL_OW 310
76661: NOT
76662: IFFALSE 76666
// exit ;
76664: GO 76726
// tmp := IsInUnit ( unit ) ;
76666: LD_ADDR_VAR 0 3
76670: PUSH
76671: LD_VAR 0 1
76675: PPUSH
76676: CALL_OW 310
76680: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76681: LD_VAR 0 3
76685: PPUSH
76686: CALL_OW 247
76690: PUSH
76691: LD_INT 2
76693: EQUAL
76694: IFFALSE 76707
// ComExitVehicle ( unit ) else
76696: LD_VAR 0 1
76700: PPUSH
76701: CALL_OW 121
76705: GO 76716
// ComExitBuilding ( unit ) ;
76707: LD_VAR 0 1
76711: PPUSH
76712: CALL_OW 122
// result := tmp ;
76716: LD_ADDR_VAR 0 2
76720: PUSH
76721: LD_VAR 0 3
76725: ST_TO_ADDR
// end ;
76726: LD_VAR 0 2
76730: RET
// export function ComExitAll ( units ) ; var i ; begin
76731: LD_INT 0
76733: PPUSH
76734: PPUSH
// if not units then
76735: LD_VAR 0 1
76739: NOT
76740: IFFALSE 76744
// exit ;
76742: GO 76770
// for i in units do
76744: LD_ADDR_VAR 0 3
76748: PUSH
76749: LD_VAR 0 1
76753: PUSH
76754: FOR_IN
76755: IFFALSE 76768
// ComExit ( i ) ;
76757: LD_VAR 0 3
76761: PPUSH
76762: CALL 76648 0 1
76766: GO 76754
76768: POP
76769: POP
// end ;
76770: LD_VAR 0 2
76774: RET
// export function ResetHc ; begin
76775: LD_INT 0
76777: PPUSH
// InitHc ;
76778: CALL_OW 19
// hc_importance := 0 ;
76782: LD_ADDR_OWVAR 32
76786: PUSH
76787: LD_INT 0
76789: ST_TO_ADDR
// end ;
76790: LD_VAR 0 1
76794: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76795: LD_INT 0
76797: PPUSH
76798: PPUSH
76799: PPUSH
// _x := ( x1 + x2 ) div 2 ;
76800: LD_ADDR_VAR 0 6
76804: PUSH
76805: LD_VAR 0 1
76809: PUSH
76810: LD_VAR 0 3
76814: PLUS
76815: PUSH
76816: LD_INT 2
76818: DIV
76819: ST_TO_ADDR
// if _x < 0 then
76820: LD_VAR 0 6
76824: PUSH
76825: LD_INT 0
76827: LESS
76828: IFFALSE 76845
// _x := _x * - 1 ;
76830: LD_ADDR_VAR 0 6
76834: PUSH
76835: LD_VAR 0 6
76839: PUSH
76840: LD_INT 1
76842: NEG
76843: MUL
76844: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
76845: LD_ADDR_VAR 0 7
76849: PUSH
76850: LD_VAR 0 2
76854: PUSH
76855: LD_VAR 0 4
76859: PLUS
76860: PUSH
76861: LD_INT 2
76863: DIV
76864: ST_TO_ADDR
// if _y < 0 then
76865: LD_VAR 0 7
76869: PUSH
76870: LD_INT 0
76872: LESS
76873: IFFALSE 76890
// _y := _y * - 1 ;
76875: LD_ADDR_VAR 0 7
76879: PUSH
76880: LD_VAR 0 7
76884: PUSH
76885: LD_INT 1
76887: NEG
76888: MUL
76889: ST_TO_ADDR
// result := [ _x , _y ] ;
76890: LD_ADDR_VAR 0 5
76894: PUSH
76895: LD_VAR 0 6
76899: PUSH
76900: LD_VAR 0 7
76904: PUSH
76905: EMPTY
76906: LIST
76907: LIST
76908: ST_TO_ADDR
// end ;
76909: LD_VAR 0 5
76913: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
76914: LD_INT 0
76916: PPUSH
76917: PPUSH
76918: PPUSH
76919: PPUSH
// task := GetTaskList ( unit ) ;
76920: LD_ADDR_VAR 0 7
76924: PUSH
76925: LD_VAR 0 1
76929: PPUSH
76930: CALL_OW 437
76934: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
76935: LD_VAR 0 7
76939: NOT
76940: PUSH
76941: LD_VAR 0 1
76945: PPUSH
76946: LD_VAR 0 2
76950: PPUSH
76951: CALL_OW 308
76955: NOT
76956: AND
76957: IFFALSE 76961
// exit ;
76959: GO 77079
// if IsInArea ( unit , area ) then
76961: LD_VAR 0 1
76965: PPUSH
76966: LD_VAR 0 2
76970: PPUSH
76971: CALL_OW 308
76975: IFFALSE 76993
// begin ComMoveToArea ( unit , goAway ) ;
76977: LD_VAR 0 1
76981: PPUSH
76982: LD_VAR 0 3
76986: PPUSH
76987: CALL_OW 113
// exit ;
76991: GO 77079
// end ; if task [ 1 ] [ 1 ] <> M then
76993: LD_VAR 0 7
76997: PUSH
76998: LD_INT 1
77000: ARRAY
77001: PUSH
77002: LD_INT 1
77004: ARRAY
77005: PUSH
77006: LD_STRING M
77008: NONEQUAL
77009: IFFALSE 77013
// exit ;
77011: GO 77079
// x := task [ 1 ] [ 2 ] ;
77013: LD_ADDR_VAR 0 5
77017: PUSH
77018: LD_VAR 0 7
77022: PUSH
77023: LD_INT 1
77025: ARRAY
77026: PUSH
77027: LD_INT 2
77029: ARRAY
77030: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77031: LD_ADDR_VAR 0 6
77035: PUSH
77036: LD_VAR 0 7
77040: PUSH
77041: LD_INT 1
77043: ARRAY
77044: PUSH
77045: LD_INT 3
77047: ARRAY
77048: ST_TO_ADDR
// if InArea ( x , y , area ) then
77049: LD_VAR 0 5
77053: PPUSH
77054: LD_VAR 0 6
77058: PPUSH
77059: LD_VAR 0 2
77063: PPUSH
77064: CALL_OW 309
77068: IFFALSE 77079
// ComStop ( unit ) ;
77070: LD_VAR 0 1
77074: PPUSH
77075: CALL_OW 141
// end ;
77079: LD_VAR 0 4
77083: RET
// export function Abs ( value ) ; begin
77084: LD_INT 0
77086: PPUSH
// result := value ;
77087: LD_ADDR_VAR 0 2
77091: PUSH
77092: LD_VAR 0 1
77096: ST_TO_ADDR
// if value < 0 then
77097: LD_VAR 0 1
77101: PUSH
77102: LD_INT 0
77104: LESS
77105: IFFALSE 77122
// result := value * - 1 ;
77107: LD_ADDR_VAR 0 2
77111: PUSH
77112: LD_VAR 0 1
77116: PUSH
77117: LD_INT 1
77119: NEG
77120: MUL
77121: ST_TO_ADDR
// end ;
77122: LD_VAR 0 2
77126: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77127: LD_INT 0
77129: PPUSH
77130: PPUSH
77131: PPUSH
77132: PPUSH
77133: PPUSH
77134: PPUSH
77135: PPUSH
77136: PPUSH
// if not unit or not building then
77137: LD_VAR 0 1
77141: NOT
77142: PUSH
77143: LD_VAR 0 2
77147: NOT
77148: OR
77149: IFFALSE 77153
// exit ;
77151: GO 77379
// x := GetX ( building ) ;
77153: LD_ADDR_VAR 0 4
77157: PUSH
77158: LD_VAR 0 2
77162: PPUSH
77163: CALL_OW 250
77167: ST_TO_ADDR
// y := GetY ( building ) ;
77168: LD_ADDR_VAR 0 6
77172: PUSH
77173: LD_VAR 0 2
77177: PPUSH
77178: CALL_OW 251
77182: ST_TO_ADDR
// d := GetDir ( building ) ;
77183: LD_ADDR_VAR 0 8
77187: PUSH
77188: LD_VAR 0 2
77192: PPUSH
77193: CALL_OW 254
77197: ST_TO_ADDR
// r := 4 ;
77198: LD_ADDR_VAR 0 9
77202: PUSH
77203: LD_INT 4
77205: ST_TO_ADDR
// for i := 1 to 5 do
77206: LD_ADDR_VAR 0 10
77210: PUSH
77211: DOUBLE
77212: LD_INT 1
77214: DEC
77215: ST_TO_ADDR
77216: LD_INT 5
77218: PUSH
77219: FOR_TO
77220: IFFALSE 77377
// begin _x := ShiftX ( x , d , r + i ) ;
77222: LD_ADDR_VAR 0 5
77226: PUSH
77227: LD_VAR 0 4
77231: PPUSH
77232: LD_VAR 0 8
77236: PPUSH
77237: LD_VAR 0 9
77241: PUSH
77242: LD_VAR 0 10
77246: PLUS
77247: PPUSH
77248: CALL_OW 272
77252: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77253: LD_ADDR_VAR 0 7
77257: PUSH
77258: LD_VAR 0 6
77262: PPUSH
77263: LD_VAR 0 8
77267: PPUSH
77268: LD_VAR 0 9
77272: PUSH
77273: LD_VAR 0 10
77277: PLUS
77278: PPUSH
77279: CALL_OW 273
77283: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77284: LD_VAR 0 5
77288: PPUSH
77289: LD_VAR 0 7
77293: PPUSH
77294: CALL_OW 488
77298: PUSH
77299: LD_VAR 0 5
77303: PPUSH
77304: LD_VAR 0 7
77308: PPUSH
77309: CALL_OW 428
77313: PPUSH
77314: CALL_OW 247
77318: PUSH
77319: LD_INT 3
77321: PUSH
77322: LD_INT 2
77324: PUSH
77325: EMPTY
77326: LIST
77327: LIST
77328: IN
77329: NOT
77330: AND
77331: IFFALSE 77375
// begin ComMoveXY ( unit , _x , _y ) ;
77333: LD_VAR 0 1
77337: PPUSH
77338: LD_VAR 0 5
77342: PPUSH
77343: LD_VAR 0 7
77347: PPUSH
77348: CALL_OW 111
// result := [ _x , _y ] ;
77352: LD_ADDR_VAR 0 3
77356: PUSH
77357: LD_VAR 0 5
77361: PUSH
77362: LD_VAR 0 7
77366: PUSH
77367: EMPTY
77368: LIST
77369: LIST
77370: ST_TO_ADDR
// exit ;
77371: POP
77372: POP
77373: GO 77379
// end ; end ;
77375: GO 77219
77377: POP
77378: POP
// end ;
77379: LD_VAR 0 3
77383: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77384: LD_INT 0
77386: PPUSH
77387: PPUSH
77388: PPUSH
// result := 0 ;
77389: LD_ADDR_VAR 0 3
77393: PUSH
77394: LD_INT 0
77396: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77397: LD_VAR 0 1
77401: PUSH
77402: LD_INT 0
77404: LESS
77405: PUSH
77406: LD_VAR 0 1
77410: PUSH
77411: LD_INT 8
77413: GREATER
77414: OR
77415: PUSH
77416: LD_VAR 0 2
77420: PUSH
77421: LD_INT 0
77423: LESS
77424: OR
77425: PUSH
77426: LD_VAR 0 2
77430: PUSH
77431: LD_INT 8
77433: GREATER
77434: OR
77435: IFFALSE 77439
// exit ;
77437: GO 77514
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77439: LD_ADDR_VAR 0 4
77443: PUSH
77444: LD_INT 22
77446: PUSH
77447: LD_VAR 0 2
77451: PUSH
77452: EMPTY
77453: LIST
77454: LIST
77455: PPUSH
77456: CALL_OW 69
77460: PUSH
77461: FOR_IN
77462: IFFALSE 77512
// begin un := UnitShoot ( i ) ;
77464: LD_ADDR_VAR 0 5
77468: PUSH
77469: LD_VAR 0 4
77473: PPUSH
77474: CALL_OW 504
77478: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77479: LD_VAR 0 5
77483: PPUSH
77484: CALL_OW 255
77488: PUSH
77489: LD_VAR 0 1
77493: EQUAL
77494: IFFALSE 77510
// begin result := un ;
77496: LD_ADDR_VAR 0 3
77500: PUSH
77501: LD_VAR 0 5
77505: ST_TO_ADDR
// exit ;
77506: POP
77507: POP
77508: GO 77514
// end ; end ;
77510: GO 77461
77512: POP
77513: POP
// end ;
77514: LD_VAR 0 3
77518: RET
// export function GetCargoBay ( units ) ; begin
77519: LD_INT 0
77521: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77522: LD_ADDR_VAR 0 2
77526: PUSH
77527: LD_VAR 0 1
77531: PPUSH
77532: LD_INT 2
77534: PUSH
77535: LD_INT 34
77537: PUSH
77538: LD_INT 12
77540: PUSH
77541: EMPTY
77542: LIST
77543: LIST
77544: PUSH
77545: LD_INT 34
77547: PUSH
77548: LD_INT 51
77550: PUSH
77551: EMPTY
77552: LIST
77553: LIST
77554: PUSH
77555: LD_INT 34
77557: PUSH
77558: LD_INT 32
77560: PUSH
77561: EMPTY
77562: LIST
77563: LIST
77564: PUSH
77565: LD_INT 34
77567: PUSH
77568: LD_EXP 46
77572: PUSH
77573: EMPTY
77574: LIST
77575: LIST
77576: PUSH
77577: EMPTY
77578: LIST
77579: LIST
77580: LIST
77581: LIST
77582: LIST
77583: PPUSH
77584: CALL_OW 72
77588: ST_TO_ADDR
// end ;
77589: LD_VAR 0 2
77593: RET
// export function Negate ( value ) ; begin
77594: LD_INT 0
77596: PPUSH
// result := not value ;
77597: LD_ADDR_VAR 0 2
77601: PUSH
77602: LD_VAR 0 1
77606: NOT
77607: ST_TO_ADDR
// end ;
77608: LD_VAR 0 2
77612: RET
// export function Inc ( value ) ; begin
77613: LD_INT 0
77615: PPUSH
// result := value + 1 ;
77616: LD_ADDR_VAR 0 2
77620: PUSH
77621: LD_VAR 0 1
77625: PUSH
77626: LD_INT 1
77628: PLUS
77629: ST_TO_ADDR
// end ;
77630: LD_VAR 0 2
77634: RET
// export function Dec ( value ) ; begin
77635: LD_INT 0
77637: PPUSH
// result := value - 1 ;
77638: LD_ADDR_VAR 0 2
77642: PUSH
77643: LD_VAR 0 1
77647: PUSH
77648: LD_INT 1
77650: MINUS
77651: ST_TO_ADDR
// end ;
77652: LD_VAR 0 2
77656: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77657: LD_INT 0
77659: PPUSH
77660: PPUSH
77661: PPUSH
77662: PPUSH
77663: PPUSH
77664: PPUSH
77665: PPUSH
77666: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77667: LD_VAR 0 1
77671: PPUSH
77672: LD_VAR 0 2
77676: PPUSH
77677: CALL_OW 488
77681: NOT
77682: PUSH
77683: LD_VAR 0 3
77687: PPUSH
77688: LD_VAR 0 4
77692: PPUSH
77693: CALL_OW 488
77697: NOT
77698: OR
77699: IFFALSE 77712
// begin result := - 1 ;
77701: LD_ADDR_VAR 0 5
77705: PUSH
77706: LD_INT 1
77708: NEG
77709: ST_TO_ADDR
// exit ;
77710: GO 77947
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77712: LD_ADDR_VAR 0 12
77716: PUSH
77717: LD_VAR 0 1
77721: PPUSH
77722: LD_VAR 0 2
77726: PPUSH
77727: LD_VAR 0 3
77731: PPUSH
77732: LD_VAR 0 4
77736: PPUSH
77737: CALL 76795 0 4
77741: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77742: LD_ADDR_VAR 0 11
77746: PUSH
77747: LD_VAR 0 1
77751: PPUSH
77752: LD_VAR 0 2
77756: PPUSH
77757: LD_VAR 0 12
77761: PUSH
77762: LD_INT 1
77764: ARRAY
77765: PPUSH
77766: LD_VAR 0 12
77770: PUSH
77771: LD_INT 2
77773: ARRAY
77774: PPUSH
77775: CALL_OW 298
77779: ST_TO_ADDR
// distance := 9999 ;
77780: LD_ADDR_VAR 0 10
77784: PUSH
77785: LD_INT 9999
77787: ST_TO_ADDR
// for i := 0 to 5 do
77788: LD_ADDR_VAR 0 6
77792: PUSH
77793: DOUBLE
77794: LD_INT 0
77796: DEC
77797: ST_TO_ADDR
77798: LD_INT 5
77800: PUSH
77801: FOR_TO
77802: IFFALSE 77945
// begin _x := ShiftX ( x1 , i , centerDist ) ;
77804: LD_ADDR_VAR 0 7
77808: PUSH
77809: LD_VAR 0 1
77813: PPUSH
77814: LD_VAR 0 6
77818: PPUSH
77819: LD_VAR 0 11
77823: PPUSH
77824: CALL_OW 272
77828: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
77829: LD_ADDR_VAR 0 8
77833: PUSH
77834: LD_VAR 0 2
77838: PPUSH
77839: LD_VAR 0 6
77843: PPUSH
77844: LD_VAR 0 11
77848: PPUSH
77849: CALL_OW 273
77853: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
77854: LD_VAR 0 7
77858: PPUSH
77859: LD_VAR 0 8
77863: PPUSH
77864: CALL_OW 488
77868: NOT
77869: IFFALSE 77873
// continue ;
77871: GO 77801
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
77873: LD_ADDR_VAR 0 9
77877: PUSH
77878: LD_VAR 0 12
77882: PUSH
77883: LD_INT 1
77885: ARRAY
77886: PPUSH
77887: LD_VAR 0 12
77891: PUSH
77892: LD_INT 2
77894: ARRAY
77895: PPUSH
77896: LD_VAR 0 7
77900: PPUSH
77901: LD_VAR 0 8
77905: PPUSH
77906: CALL_OW 298
77910: ST_TO_ADDR
// if tmp < distance then
77911: LD_VAR 0 9
77915: PUSH
77916: LD_VAR 0 10
77920: LESS
77921: IFFALSE 77943
// begin result := i ;
77923: LD_ADDR_VAR 0 5
77927: PUSH
77928: LD_VAR 0 6
77932: ST_TO_ADDR
// distance := tmp ;
77933: LD_ADDR_VAR 0 10
77937: PUSH
77938: LD_VAR 0 9
77942: ST_TO_ADDR
// end ; end ;
77943: GO 77801
77945: POP
77946: POP
// end ;
77947: LD_VAR 0 5
77951: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77952: LD_INT 0
77954: PPUSH
77955: PPUSH
// if not driver or not IsInUnit ( driver ) then
77956: LD_VAR 0 1
77960: NOT
77961: PUSH
77962: LD_VAR 0 1
77966: PPUSH
77967: CALL_OW 310
77971: NOT
77972: OR
77973: IFFALSE 77977
// exit ;
77975: GO 78067
// vehicle := IsInUnit ( driver ) ;
77977: LD_ADDR_VAR 0 3
77981: PUSH
77982: LD_VAR 0 1
77986: PPUSH
77987: CALL_OW 310
77991: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77992: LD_VAR 0 1
77996: PPUSH
77997: LD_STRING \
77999: PUSH
78000: LD_INT 0
78002: PUSH
78003: LD_INT 0
78005: PUSH
78006: LD_INT 0
78008: PUSH
78009: LD_INT 0
78011: PUSH
78012: LD_INT 0
78014: PUSH
78015: LD_INT 0
78017: PUSH
78018: EMPTY
78019: LIST
78020: LIST
78021: LIST
78022: LIST
78023: LIST
78024: LIST
78025: LIST
78026: PUSH
78027: LD_STRING E
78029: PUSH
78030: LD_INT 0
78032: PUSH
78033: LD_INT 0
78035: PUSH
78036: LD_VAR 0 3
78040: PUSH
78041: LD_INT 0
78043: PUSH
78044: LD_INT 0
78046: PUSH
78047: LD_INT 0
78049: PUSH
78050: EMPTY
78051: LIST
78052: LIST
78053: LIST
78054: LIST
78055: LIST
78056: LIST
78057: LIST
78058: PUSH
78059: EMPTY
78060: LIST
78061: LIST
78062: PPUSH
78063: CALL_OW 446
// end ;
78067: LD_VAR 0 2
78071: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78072: LD_INT 0
78074: PPUSH
78075: PPUSH
// if not driver or not IsInUnit ( driver ) then
78076: LD_VAR 0 1
78080: NOT
78081: PUSH
78082: LD_VAR 0 1
78086: PPUSH
78087: CALL_OW 310
78091: NOT
78092: OR
78093: IFFALSE 78097
// exit ;
78095: GO 78187
// vehicle := IsInUnit ( driver ) ;
78097: LD_ADDR_VAR 0 3
78101: PUSH
78102: LD_VAR 0 1
78106: PPUSH
78107: CALL_OW 310
78111: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78112: LD_VAR 0 1
78116: PPUSH
78117: LD_STRING \
78119: PUSH
78120: LD_INT 0
78122: PUSH
78123: LD_INT 0
78125: PUSH
78126: LD_INT 0
78128: PUSH
78129: LD_INT 0
78131: PUSH
78132: LD_INT 0
78134: PUSH
78135: LD_INT 0
78137: PUSH
78138: EMPTY
78139: LIST
78140: LIST
78141: LIST
78142: LIST
78143: LIST
78144: LIST
78145: LIST
78146: PUSH
78147: LD_STRING E
78149: PUSH
78150: LD_INT 0
78152: PUSH
78153: LD_INT 0
78155: PUSH
78156: LD_VAR 0 3
78160: PUSH
78161: LD_INT 0
78163: PUSH
78164: LD_INT 0
78166: PUSH
78167: LD_INT 0
78169: PUSH
78170: EMPTY
78171: LIST
78172: LIST
78173: LIST
78174: LIST
78175: LIST
78176: LIST
78177: LIST
78178: PUSH
78179: EMPTY
78180: LIST
78181: LIST
78182: PPUSH
78183: CALL_OW 447
// end ;
78187: LD_VAR 0 2
78191: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78192: LD_INT 0
78194: PPUSH
78195: PPUSH
78196: PPUSH
// tmp := [ ] ;
78197: LD_ADDR_VAR 0 5
78201: PUSH
78202: EMPTY
78203: ST_TO_ADDR
// for i in units do
78204: LD_ADDR_VAR 0 4
78208: PUSH
78209: LD_VAR 0 1
78213: PUSH
78214: FOR_IN
78215: IFFALSE 78253
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78217: LD_ADDR_VAR 0 5
78221: PUSH
78222: LD_VAR 0 5
78226: PPUSH
78227: LD_VAR 0 5
78231: PUSH
78232: LD_INT 1
78234: PLUS
78235: PPUSH
78236: LD_VAR 0 4
78240: PPUSH
78241: CALL_OW 256
78245: PPUSH
78246: CALL_OW 2
78250: ST_TO_ADDR
78251: GO 78214
78253: POP
78254: POP
// if not tmp then
78255: LD_VAR 0 5
78259: NOT
78260: IFFALSE 78264
// exit ;
78262: GO 78312
// if asc then
78264: LD_VAR 0 2
78268: IFFALSE 78292
// result := SortListByListAsc ( units , tmp ) else
78270: LD_ADDR_VAR 0 3
78274: PUSH
78275: LD_VAR 0 1
78279: PPUSH
78280: LD_VAR 0 5
78284: PPUSH
78285: CALL_OW 76
78289: ST_TO_ADDR
78290: GO 78312
// result := SortListByListDesc ( units , tmp ) ;
78292: LD_ADDR_VAR 0 3
78296: PUSH
78297: LD_VAR 0 1
78301: PPUSH
78302: LD_VAR 0 5
78306: PPUSH
78307: CALL_OW 77
78311: ST_TO_ADDR
// end ;
78312: LD_VAR 0 3
78316: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78317: LD_INT 0
78319: PPUSH
78320: PPUSH
// task := GetTaskList ( mech ) ;
78321: LD_ADDR_VAR 0 4
78325: PUSH
78326: LD_VAR 0 1
78330: PPUSH
78331: CALL_OW 437
78335: ST_TO_ADDR
// if not task then
78336: LD_VAR 0 4
78340: NOT
78341: IFFALSE 78345
// exit ;
78343: GO 78387
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78345: LD_ADDR_VAR 0 3
78349: PUSH
78350: LD_VAR 0 4
78354: PUSH
78355: LD_INT 1
78357: ARRAY
78358: PUSH
78359: LD_INT 1
78361: ARRAY
78362: PUSH
78363: LD_STRING r
78365: EQUAL
78366: PUSH
78367: LD_VAR 0 4
78371: PUSH
78372: LD_INT 1
78374: ARRAY
78375: PUSH
78376: LD_INT 4
78378: ARRAY
78379: PUSH
78380: LD_VAR 0 2
78384: EQUAL
78385: AND
78386: ST_TO_ADDR
// end ;
78387: LD_VAR 0 3
78391: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78392: LD_INT 0
78394: PPUSH
// SetDir ( unit , d ) ;
78395: LD_VAR 0 1
78399: PPUSH
78400: LD_VAR 0 4
78404: PPUSH
78405: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78409: LD_VAR 0 1
78413: PPUSH
78414: LD_VAR 0 2
78418: PPUSH
78419: LD_VAR 0 3
78423: PPUSH
78424: LD_VAR 0 5
78428: PPUSH
78429: CALL_OW 48
// end ;
78433: LD_VAR 0 6
78437: RET
// export function ToNaturalNumber ( number ) ; begin
78438: LD_INT 0
78440: PPUSH
// result := number div 1 ;
78441: LD_ADDR_VAR 0 2
78445: PUSH
78446: LD_VAR 0 1
78450: PUSH
78451: LD_INT 1
78453: DIV
78454: ST_TO_ADDR
// if number < 0 then
78455: LD_VAR 0 1
78459: PUSH
78460: LD_INT 0
78462: LESS
78463: IFFALSE 78473
// result := 0 ;
78465: LD_ADDR_VAR 0 2
78469: PUSH
78470: LD_INT 0
78472: ST_TO_ADDR
// end ;
78473: LD_VAR 0 2
78477: RET
// export function SortByClass ( units , class ) ; var un ; begin
78478: LD_INT 0
78480: PPUSH
78481: PPUSH
// if not units or not class then
78482: LD_VAR 0 1
78486: NOT
78487: PUSH
78488: LD_VAR 0 2
78492: NOT
78493: OR
78494: IFFALSE 78498
// exit ;
78496: GO 78593
// result := [ ] ;
78498: LD_ADDR_VAR 0 3
78502: PUSH
78503: EMPTY
78504: ST_TO_ADDR
// for un in units do
78505: LD_ADDR_VAR 0 4
78509: PUSH
78510: LD_VAR 0 1
78514: PUSH
78515: FOR_IN
78516: IFFALSE 78591
// if GetClass ( un ) = class then
78518: LD_VAR 0 4
78522: PPUSH
78523: CALL_OW 257
78527: PUSH
78528: LD_VAR 0 2
78532: EQUAL
78533: IFFALSE 78560
// result := Insert ( result , 1 , un ) else
78535: LD_ADDR_VAR 0 3
78539: PUSH
78540: LD_VAR 0 3
78544: PPUSH
78545: LD_INT 1
78547: PPUSH
78548: LD_VAR 0 4
78552: PPUSH
78553: CALL_OW 2
78557: ST_TO_ADDR
78558: GO 78589
// result := Replace ( result , result + 1 , un ) ;
78560: LD_ADDR_VAR 0 3
78564: PUSH
78565: LD_VAR 0 3
78569: PPUSH
78570: LD_VAR 0 3
78574: PUSH
78575: LD_INT 1
78577: PLUS
78578: PPUSH
78579: LD_VAR 0 4
78583: PPUSH
78584: CALL_OW 1
78588: ST_TO_ADDR
78589: GO 78515
78591: POP
78592: POP
// end ;
78593: LD_VAR 0 3
78597: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78598: LD_INT 0
78600: PPUSH
78601: PPUSH
78602: PPUSH
78603: PPUSH
78604: PPUSH
78605: PPUSH
78606: PPUSH
// result := [ ] ;
78607: LD_ADDR_VAR 0 4
78611: PUSH
78612: EMPTY
78613: ST_TO_ADDR
// if x - r < 0 then
78614: LD_VAR 0 1
78618: PUSH
78619: LD_VAR 0 3
78623: MINUS
78624: PUSH
78625: LD_INT 0
78627: LESS
78628: IFFALSE 78640
// min_x := 0 else
78630: LD_ADDR_VAR 0 8
78634: PUSH
78635: LD_INT 0
78637: ST_TO_ADDR
78638: GO 78656
// min_x := x - r ;
78640: LD_ADDR_VAR 0 8
78644: PUSH
78645: LD_VAR 0 1
78649: PUSH
78650: LD_VAR 0 3
78654: MINUS
78655: ST_TO_ADDR
// if y - r < 0 then
78656: LD_VAR 0 2
78660: PUSH
78661: LD_VAR 0 3
78665: MINUS
78666: PUSH
78667: LD_INT 0
78669: LESS
78670: IFFALSE 78682
// min_y := 0 else
78672: LD_ADDR_VAR 0 7
78676: PUSH
78677: LD_INT 0
78679: ST_TO_ADDR
78680: GO 78698
// min_y := y - r ;
78682: LD_ADDR_VAR 0 7
78686: PUSH
78687: LD_VAR 0 2
78691: PUSH
78692: LD_VAR 0 3
78696: MINUS
78697: ST_TO_ADDR
// max_x := x + r ;
78698: LD_ADDR_VAR 0 9
78702: PUSH
78703: LD_VAR 0 1
78707: PUSH
78708: LD_VAR 0 3
78712: PLUS
78713: ST_TO_ADDR
// max_y := y + r ;
78714: LD_ADDR_VAR 0 10
78718: PUSH
78719: LD_VAR 0 2
78723: PUSH
78724: LD_VAR 0 3
78728: PLUS
78729: ST_TO_ADDR
// for _x = min_x to max_x do
78730: LD_ADDR_VAR 0 5
78734: PUSH
78735: DOUBLE
78736: LD_VAR 0 8
78740: DEC
78741: ST_TO_ADDR
78742: LD_VAR 0 9
78746: PUSH
78747: FOR_TO
78748: IFFALSE 78849
// for _y = min_y to max_y do
78750: LD_ADDR_VAR 0 6
78754: PUSH
78755: DOUBLE
78756: LD_VAR 0 7
78760: DEC
78761: ST_TO_ADDR
78762: LD_VAR 0 10
78766: PUSH
78767: FOR_TO
78768: IFFALSE 78845
// begin if not ValidHex ( _x , _y ) then
78770: LD_VAR 0 5
78774: PPUSH
78775: LD_VAR 0 6
78779: PPUSH
78780: CALL_OW 488
78784: NOT
78785: IFFALSE 78789
// continue ;
78787: GO 78767
// if GetResourceTypeXY ( _x , _y ) then
78789: LD_VAR 0 5
78793: PPUSH
78794: LD_VAR 0 6
78798: PPUSH
78799: CALL_OW 283
78803: IFFALSE 78843
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
78805: LD_ADDR_VAR 0 4
78809: PUSH
78810: LD_VAR 0 4
78814: PPUSH
78815: LD_VAR 0 4
78819: PUSH
78820: LD_INT 1
78822: PLUS
78823: PPUSH
78824: LD_VAR 0 5
78828: PUSH
78829: LD_VAR 0 6
78833: PUSH
78834: EMPTY
78835: LIST
78836: LIST
78837: PPUSH
78838: CALL_OW 1
78842: ST_TO_ADDR
// end ;
78843: GO 78767
78845: POP
78846: POP
78847: GO 78747
78849: POP
78850: POP
// end ;
78851: LD_VAR 0 4
78855: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
78856: LD_INT 0
78858: PPUSH
78859: PPUSH
78860: PPUSH
78861: PPUSH
78862: PPUSH
78863: PPUSH
78864: PPUSH
78865: PPUSH
// if not units then
78866: LD_VAR 0 1
78870: NOT
78871: IFFALSE 78875
// exit ;
78873: GO 79401
// result := UnitFilter ( units , [ f_ok ] ) ;
78875: LD_ADDR_VAR 0 3
78879: PUSH
78880: LD_VAR 0 1
78884: PPUSH
78885: LD_INT 50
78887: PUSH
78888: EMPTY
78889: LIST
78890: PPUSH
78891: CALL_OW 72
78895: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
78896: LD_ADDR_VAR 0 8
78900: PUSH
78901: LD_VAR 0 1
78905: PUSH
78906: LD_INT 1
78908: ARRAY
78909: PPUSH
78910: CALL_OW 255
78914: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
78915: LD_ADDR_VAR 0 10
78919: PUSH
78920: LD_INT 29
78922: PUSH
78923: LD_EXP 49
78927: PUSH
78928: LD_INT 49
78930: PUSH
78931: EMPTY
78932: LIST
78933: LIST
78934: LIST
78935: ST_TO_ADDR
// if not result then
78936: LD_VAR 0 3
78940: NOT
78941: IFFALSE 78945
// exit ;
78943: GO 79401
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
78945: LD_ADDR_VAR 0 5
78949: PUSH
78950: LD_INT 81
78952: PUSH
78953: LD_VAR 0 8
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: PPUSH
78962: CALL_OW 69
78966: ST_TO_ADDR
// for i in result do
78967: LD_ADDR_VAR 0 4
78971: PUSH
78972: LD_VAR 0 3
78976: PUSH
78977: FOR_IN
78978: IFFALSE 79399
// begin tag := GetTag ( i ) + 1 ;
78980: LD_ADDR_VAR 0 9
78984: PUSH
78985: LD_VAR 0 4
78989: PPUSH
78990: CALL_OW 110
78994: PUSH
78995: LD_INT 1
78997: PLUS
78998: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78999: LD_ADDR_VAR 0 7
79003: PUSH
79004: LD_VAR 0 4
79008: PPUSH
79009: CALL_OW 250
79013: PPUSH
79014: LD_VAR 0 4
79018: PPUSH
79019: CALL_OW 251
79023: PPUSH
79024: LD_INT 6
79026: PPUSH
79027: CALL 78598 0 3
79031: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79032: LD_VAR 0 4
79036: PPUSH
79037: CALL_OW 247
79041: PUSH
79042: LD_INT 2
79044: EQUAL
79045: PUSH
79046: LD_VAR 0 7
79050: AND
79051: PUSH
79052: LD_VAR 0 4
79056: PPUSH
79057: CALL_OW 264
79061: PUSH
79062: LD_VAR 0 10
79066: IN
79067: NOT
79068: AND
79069: IFFALSE 79108
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79071: LD_VAR 0 4
79075: PPUSH
79076: LD_VAR 0 7
79080: PUSH
79081: LD_INT 1
79083: ARRAY
79084: PUSH
79085: LD_INT 1
79087: ARRAY
79088: PPUSH
79089: LD_VAR 0 7
79093: PUSH
79094: LD_INT 1
79096: ARRAY
79097: PUSH
79098: LD_INT 2
79100: ARRAY
79101: PPUSH
79102: CALL_OW 116
79106: GO 79397
// if path > tag then
79108: LD_VAR 0 2
79112: PUSH
79113: LD_VAR 0 9
79117: GREATER
79118: IFFALSE 79326
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79120: LD_ADDR_VAR 0 6
79124: PUSH
79125: LD_VAR 0 5
79129: PPUSH
79130: LD_INT 91
79132: PUSH
79133: LD_VAR 0 4
79137: PUSH
79138: LD_INT 8
79140: PUSH
79141: EMPTY
79142: LIST
79143: LIST
79144: LIST
79145: PPUSH
79146: CALL_OW 72
79150: ST_TO_ADDR
// if nearEnemy then
79151: LD_VAR 0 6
79155: IFFALSE 79224
// begin if GetWeapon ( i ) = ru_time_lapser then
79157: LD_VAR 0 4
79161: PPUSH
79162: CALL_OW 264
79166: PUSH
79167: LD_INT 49
79169: EQUAL
79170: IFFALSE 79198
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79172: LD_VAR 0 4
79176: PPUSH
79177: LD_VAR 0 6
79181: PPUSH
79182: LD_VAR 0 4
79186: PPUSH
79187: CALL_OW 74
79191: PPUSH
79192: CALL_OW 112
79196: GO 79222
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79198: LD_VAR 0 4
79202: PPUSH
79203: LD_VAR 0 6
79207: PPUSH
79208: LD_VAR 0 4
79212: PPUSH
79213: CALL_OW 74
79217: PPUSH
79218: CALL_OW 115
// end else
79222: GO 79324
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79224: LD_VAR 0 4
79228: PPUSH
79229: LD_VAR 0 2
79233: PUSH
79234: LD_VAR 0 9
79238: ARRAY
79239: PUSH
79240: LD_INT 1
79242: ARRAY
79243: PPUSH
79244: LD_VAR 0 2
79248: PUSH
79249: LD_VAR 0 9
79253: ARRAY
79254: PUSH
79255: LD_INT 2
79257: ARRAY
79258: PPUSH
79259: CALL_OW 297
79263: PUSH
79264: LD_INT 6
79266: GREATER
79267: IFFALSE 79310
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79269: LD_VAR 0 4
79273: PPUSH
79274: LD_VAR 0 2
79278: PUSH
79279: LD_VAR 0 9
79283: ARRAY
79284: PUSH
79285: LD_INT 1
79287: ARRAY
79288: PPUSH
79289: LD_VAR 0 2
79293: PUSH
79294: LD_VAR 0 9
79298: ARRAY
79299: PUSH
79300: LD_INT 2
79302: ARRAY
79303: PPUSH
79304: CALL_OW 114
79308: GO 79324
// SetTag ( i , tag ) ;
79310: LD_VAR 0 4
79314: PPUSH
79315: LD_VAR 0 9
79319: PPUSH
79320: CALL_OW 109
// end else
79324: GO 79397
// if enemy then
79326: LD_VAR 0 5
79330: IFFALSE 79397
// begin if GetWeapon ( i ) = ru_time_lapser then
79332: LD_VAR 0 4
79336: PPUSH
79337: CALL_OW 264
79341: PUSH
79342: LD_INT 49
79344: EQUAL
79345: IFFALSE 79373
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79347: LD_VAR 0 4
79351: PPUSH
79352: LD_VAR 0 5
79356: PPUSH
79357: LD_VAR 0 4
79361: PPUSH
79362: CALL_OW 74
79366: PPUSH
79367: CALL_OW 112
79371: GO 79397
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79373: LD_VAR 0 4
79377: PPUSH
79378: LD_VAR 0 5
79382: PPUSH
79383: LD_VAR 0 4
79387: PPUSH
79388: CALL_OW 74
79392: PPUSH
79393: CALL_OW 115
// end ; end ;
79397: GO 78977
79399: POP
79400: POP
// end ;
79401: LD_VAR 0 3
79405: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79406: LD_INT 0
79408: PPUSH
79409: PPUSH
79410: PPUSH
// if not unit or IsInUnit ( unit ) then
79411: LD_VAR 0 1
79415: NOT
79416: PUSH
79417: LD_VAR 0 1
79421: PPUSH
79422: CALL_OW 310
79426: OR
79427: IFFALSE 79431
// exit ;
79429: GO 79522
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79431: LD_ADDR_VAR 0 4
79435: PUSH
79436: LD_VAR 0 1
79440: PPUSH
79441: CALL_OW 250
79445: PPUSH
79446: LD_VAR 0 2
79450: PPUSH
79451: LD_INT 1
79453: PPUSH
79454: CALL_OW 272
79458: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79459: LD_ADDR_VAR 0 5
79463: PUSH
79464: LD_VAR 0 1
79468: PPUSH
79469: CALL_OW 251
79473: PPUSH
79474: LD_VAR 0 2
79478: PPUSH
79479: LD_INT 1
79481: PPUSH
79482: CALL_OW 273
79486: ST_TO_ADDR
// if ValidHex ( x , y ) then
79487: LD_VAR 0 4
79491: PPUSH
79492: LD_VAR 0 5
79496: PPUSH
79497: CALL_OW 488
79501: IFFALSE 79522
// ComTurnXY ( unit , x , y ) ;
79503: LD_VAR 0 1
79507: PPUSH
79508: LD_VAR 0 4
79512: PPUSH
79513: LD_VAR 0 5
79517: PPUSH
79518: CALL_OW 118
// end ;
79522: LD_VAR 0 3
79526: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79527: LD_INT 0
79529: PPUSH
79530: PPUSH
// result := false ;
79531: LD_ADDR_VAR 0 3
79535: PUSH
79536: LD_INT 0
79538: ST_TO_ADDR
// if not units then
79539: LD_VAR 0 2
79543: NOT
79544: IFFALSE 79548
// exit ;
79546: GO 79593
// for i in units do
79548: LD_ADDR_VAR 0 4
79552: PUSH
79553: LD_VAR 0 2
79557: PUSH
79558: FOR_IN
79559: IFFALSE 79591
// if See ( side , i ) then
79561: LD_VAR 0 1
79565: PPUSH
79566: LD_VAR 0 4
79570: PPUSH
79571: CALL_OW 292
79575: IFFALSE 79589
// begin result := true ;
79577: LD_ADDR_VAR 0 3
79581: PUSH
79582: LD_INT 1
79584: ST_TO_ADDR
// exit ;
79585: POP
79586: POP
79587: GO 79593
// end ;
79589: GO 79558
79591: POP
79592: POP
// end ;
79593: LD_VAR 0 3
79597: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79598: LD_INT 0
79600: PPUSH
79601: PPUSH
79602: PPUSH
79603: PPUSH
// if not unit or not points then
79604: LD_VAR 0 1
79608: NOT
79609: PUSH
79610: LD_VAR 0 2
79614: NOT
79615: OR
79616: IFFALSE 79620
// exit ;
79618: GO 79710
// dist := 99999 ;
79620: LD_ADDR_VAR 0 5
79624: PUSH
79625: LD_INT 99999
79627: ST_TO_ADDR
// for i in points do
79628: LD_ADDR_VAR 0 4
79632: PUSH
79633: LD_VAR 0 2
79637: PUSH
79638: FOR_IN
79639: IFFALSE 79708
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79641: LD_ADDR_VAR 0 6
79645: PUSH
79646: LD_VAR 0 1
79650: PPUSH
79651: LD_VAR 0 4
79655: PUSH
79656: LD_INT 1
79658: ARRAY
79659: PPUSH
79660: LD_VAR 0 4
79664: PUSH
79665: LD_INT 2
79667: ARRAY
79668: PPUSH
79669: CALL_OW 297
79673: ST_TO_ADDR
// if tmpDist < dist then
79674: LD_VAR 0 6
79678: PUSH
79679: LD_VAR 0 5
79683: LESS
79684: IFFALSE 79706
// begin result := i ;
79686: LD_ADDR_VAR 0 3
79690: PUSH
79691: LD_VAR 0 4
79695: ST_TO_ADDR
// dist := tmpDist ;
79696: LD_ADDR_VAR 0 5
79700: PUSH
79701: LD_VAR 0 6
79705: ST_TO_ADDR
// end ; end ;
79706: GO 79638
79708: POP
79709: POP
// end ;
79710: LD_VAR 0 3
79714: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79715: LD_INT 0
79717: PPUSH
// uc_side := side ;
79718: LD_ADDR_OWVAR 20
79722: PUSH
79723: LD_VAR 0 1
79727: ST_TO_ADDR
// uc_nation := 3 ;
79728: LD_ADDR_OWVAR 21
79732: PUSH
79733: LD_INT 3
79735: ST_TO_ADDR
// vc_chassis := 25 ;
79736: LD_ADDR_OWVAR 37
79740: PUSH
79741: LD_INT 25
79743: ST_TO_ADDR
// vc_engine := engine_siberite ;
79744: LD_ADDR_OWVAR 39
79748: PUSH
79749: LD_INT 3
79751: ST_TO_ADDR
// vc_control := control_computer ;
79752: LD_ADDR_OWVAR 38
79756: PUSH
79757: LD_INT 3
79759: ST_TO_ADDR
// vc_weapon := 59 ;
79760: LD_ADDR_OWVAR 40
79764: PUSH
79765: LD_INT 59
79767: ST_TO_ADDR
// result := CreateVehicle ;
79768: LD_ADDR_VAR 0 5
79772: PUSH
79773: CALL_OW 45
79777: ST_TO_ADDR
// SetDir ( result , d ) ;
79778: LD_VAR 0 5
79782: PPUSH
79783: LD_VAR 0 4
79787: PPUSH
79788: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79792: LD_VAR 0 5
79796: PPUSH
79797: LD_VAR 0 2
79801: PPUSH
79802: LD_VAR 0 3
79806: PPUSH
79807: LD_INT 0
79809: PPUSH
79810: CALL_OW 48
// end ;
79814: LD_VAR 0 5
79818: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
79819: LD_INT 0
79821: PPUSH
79822: PPUSH
79823: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
79824: LD_ADDR_VAR 0 2
79828: PUSH
79829: LD_INT 0
79831: PUSH
79832: LD_INT 0
79834: PUSH
79835: LD_INT 0
79837: PUSH
79838: LD_INT 0
79840: PUSH
79841: EMPTY
79842: LIST
79843: LIST
79844: LIST
79845: LIST
79846: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
79847: LD_VAR 0 1
79851: NOT
79852: PUSH
79853: LD_VAR 0 1
79857: PPUSH
79858: CALL_OW 264
79862: PUSH
79863: LD_INT 12
79865: PUSH
79866: LD_INT 51
79868: PUSH
79869: LD_INT 32
79871: PUSH
79872: LD_EXP 46
79876: PUSH
79877: EMPTY
79878: LIST
79879: LIST
79880: LIST
79881: LIST
79882: IN
79883: NOT
79884: OR
79885: IFFALSE 79889
// exit ;
79887: GO 79987
// for i := 1 to 3 do
79889: LD_ADDR_VAR 0 3
79893: PUSH
79894: DOUBLE
79895: LD_INT 1
79897: DEC
79898: ST_TO_ADDR
79899: LD_INT 3
79901: PUSH
79902: FOR_TO
79903: IFFALSE 79985
// begin tmp := GetCargo ( cargo , i ) ;
79905: LD_ADDR_VAR 0 4
79909: PUSH
79910: LD_VAR 0 1
79914: PPUSH
79915: LD_VAR 0 3
79919: PPUSH
79920: CALL_OW 289
79924: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
79925: LD_ADDR_VAR 0 2
79929: PUSH
79930: LD_VAR 0 2
79934: PPUSH
79935: LD_VAR 0 3
79939: PPUSH
79940: LD_VAR 0 4
79944: PPUSH
79945: CALL_OW 1
79949: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
79950: LD_ADDR_VAR 0 2
79954: PUSH
79955: LD_VAR 0 2
79959: PPUSH
79960: LD_INT 4
79962: PPUSH
79963: LD_VAR 0 2
79967: PUSH
79968: LD_INT 4
79970: ARRAY
79971: PUSH
79972: LD_VAR 0 4
79976: PLUS
79977: PPUSH
79978: CALL_OW 1
79982: ST_TO_ADDR
// end ;
79983: GO 79902
79985: POP
79986: POP
// end ;
79987: LD_VAR 0 2
79991: RET
// export function Length ( array ) ; begin
79992: LD_INT 0
79994: PPUSH
// result := array + 0 ;
79995: LD_ADDR_VAR 0 2
79999: PUSH
80000: LD_VAR 0 1
80004: PUSH
80005: LD_INT 0
80007: PLUS
80008: ST_TO_ADDR
// end ;
80009: LD_VAR 0 2
80013: RET
// export function PrepareArray ( array ) ; begin
80014: LD_INT 0
80016: PPUSH
// result := array diff 0 ;
80017: LD_ADDR_VAR 0 2
80021: PUSH
80022: LD_VAR 0 1
80026: PUSH
80027: LD_INT 0
80029: DIFF
80030: ST_TO_ADDR
// if not result [ 1 ] then
80031: LD_VAR 0 2
80035: PUSH
80036: LD_INT 1
80038: ARRAY
80039: NOT
80040: IFFALSE 80060
// result := Delete ( result , 1 ) ;
80042: LD_ADDR_VAR 0 2
80046: PUSH
80047: LD_VAR 0 2
80051: PPUSH
80052: LD_INT 1
80054: PPUSH
80055: CALL_OW 3
80059: ST_TO_ADDR
// end ; end_of_file
80060: LD_VAR 0 2
80064: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80065: LD_VAR 0 1
80069: PUSH
80070: LD_INT 200
80072: DOUBLE
80073: GREATEREQUAL
80074: IFFALSE 80082
80076: LD_INT 299
80078: DOUBLE
80079: LESSEQUAL
80080: IFTRUE 80084
80082: GO 80116
80084: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80085: LD_VAR 0 1
80089: PPUSH
80090: LD_VAR 0 2
80094: PPUSH
80095: LD_VAR 0 3
80099: PPUSH
80100: LD_VAR 0 4
80104: PPUSH
80105: LD_VAR 0 5
80109: PPUSH
80110: CALL 34916 0 5
80114: GO 80193
80116: LD_INT 300
80118: DOUBLE
80119: GREATEREQUAL
80120: IFFALSE 80128
80122: LD_INT 399
80124: DOUBLE
80125: LESSEQUAL
80126: IFTRUE 80130
80128: GO 80192
80130: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80131: LD_VAR 0 1
80135: PPUSH
80136: LD_VAR 0 2
80140: PPUSH
80141: LD_VAR 0 3
80145: PPUSH
80146: LD_VAR 0 4
80150: PPUSH
80151: LD_VAR 0 5
80155: PPUSH
80156: LD_VAR 0 6
80160: PPUSH
80161: LD_VAR 0 7
80165: PPUSH
80166: LD_VAR 0 8
80170: PPUSH
80171: LD_VAR 0 9
80175: PPUSH
80176: LD_VAR 0 10
80180: PPUSH
80181: LD_VAR 0 11
80185: PPUSH
80186: CALL 31317 0 11
80190: GO 80193
80192: POP
// end ;
80193: PPOPN 11
80195: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80196: LD_VAR 0 1
80200: PPUSH
80201: LD_VAR 0 2
80205: PPUSH
80206: LD_VAR 0 3
80210: PPUSH
80211: LD_VAR 0 4
80215: PPUSH
80216: LD_VAR 0 5
80220: PPUSH
80221: CALL 34652 0 5
// end ; end_of_file
80225: PPOPN 5
80227: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80228: LD_VAR 0 1
80232: PPUSH
80233: LD_VAR 0 2
80237: PPUSH
80238: LD_VAR 0 3
80242: PPUSH
80243: LD_VAR 0 4
80247: PPUSH
80248: LD_VAR 0 5
80252: PPUSH
80253: LD_VAR 0 6
80257: PPUSH
80258: CALL 19010 0 6
// end ;
80262: PPOPN 6
80264: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80265: LD_INT 0
80267: PPUSH
// begin if not units then
80268: LD_VAR 0 1
80272: NOT
80273: IFFALSE 80277
// exit ;
80275: GO 80277
// end ;
80277: PPOPN 7
80279: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80280: CALL 18981 0 0
// end ;
80284: PPOPN 1
80286: END
