// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded , cratesAllow ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15455 0 0
// PrepareDifficulty ;
  43: CALL 12828 0 0
// PrepareVehicles ;
  47: CALL 1800 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1370 0 4
// PrepareAmericanHeroes ;
  67: CALL 660 0 0
// PrepareRussianCommander ;
  71: CALL 3337 0 0
// PrepareWestBase ;
  75: CALL 4062 0 0
// PrepareEastBase ;
  79: CALL 3416 0 0
// PrepareOtherRussians ;
  83: CALL 4288 0 0
// Action ;
  87: CALL 5973 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// cratesAllow := false ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// end ;
 290: LD_VAR 0 1
 294: RET
// every 0 0$1 trigger debugMode do var i ;
 295: LD_EXP 41
 299: IFFALSE 605
 301: GO 303
 303: DISABLE
 304: LD_INT 0
 306: PPUSH
// begin enable ;
 307: ENABLE
// FogOff ( true ) ;
 308: LD_INT 1
 310: PPUSH
 311: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 315: LD_ADDR_VAR 0 1
 319: PUSH
 320: LD_INT 22
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: LD_INT 21
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PPUSH
 344: CALL_OW 69
 348: PUSH
 349: FOR_IN
 350: IFFALSE 366
// SetLives ( i , 1000 ) ;
 352: LD_VAR 0 1
 356: PPUSH
 357: LD_INT 1000
 359: PPUSH
 360: CALL_OW 234
 364: GO 349
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 2
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 526: LD_ADDR_VAR 0 1
 530: PUSH
 531: LD_INT 22
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: LD_INT 2
 543: PUSH
 544: LD_INT 30
 546: PUSH
 547: LD_INT 0
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: LD_INT 30
 556: PUSH
 557: LD_INT 1
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: FOR_IN
 579: IFFALSE 603
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 581: LD_VAR 0 1
 585: PPUSH
 586: CALL_OW 274
 590: PPUSH
 591: LD_INT 3
 593: PPUSH
 594: LD_INT 9999
 596: PPUSH
 597: CALL_OW 277
 601: GO 578
 603: POP
 604: POP
// end ;
 605: PPOPN 1
 607: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 608: LD_INT 24
 610: PPUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PPUSH
 621: CALL_OW 70
 625: IFFALSE 638
 627: GO 629
 629: DISABLE
// westPathUsed := true ;
 630: LD_ADDR_EXP 42
 634: PUSH
 635: LD_INT 1
 637: ST_TO_ADDR
 638: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 639: LD_EXP 43
 643: PUSH
 644: LD_INT 3
 646: GREATEREQUAL
 647: IFFALSE 659
 649: GO 651
 651: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 652: LD_STRING ACH_LASER
 654: PPUSH
 655: CALL_OW 543
 659: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 660: LD_INT 0
 662: PPUSH
 663: PPUSH
 664: PPUSH
// uc_side := 1 ;
 665: LD_ADDR_OWVAR 20
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 673: LD_ADDR_EXP 14
 677: PUSH
 678: LD_STRING 11c_others
 680: PPUSH
 681: CALL_OW 31
 685: PUSH
 686: LD_STRING 11_others
 688: PPUSH
 689: CALL_OW 31
 693: UNION
 694: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 695: LD_ADDR_EXP 1
 699: PUSH
 700: LD_STRING JMM
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: LD_STRING 11_
 708: PPUSH
 709: CALL 40139 0 3
 713: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 714: LD_EXP 1
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 726: LD_EXP 1
 730: PPUSH
 731: LD_INT 22
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PUSH
 741: LD_INT 21
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: LD_INT 58
 753: PUSH
 754: EMPTY
 755: LIST
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: PPUSH
 762: CALL_OW 69
 766: PUSH
 767: LD_INT 1
 769: ARRAY
 770: PPUSH
 771: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 775: LD_STRING 11_Lisa
 777: PPUSH
 778: CALL_OW 28
 782: IFFALSE 832
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 784: LD_ADDR_EXP 2
 788: PUSH
 789: LD_STRING Lisa
 791: PPUSH
 792: LD_INT 1
 794: PPUSH
 795: LD_STRING 11_
 797: PPUSH
 798: CALL 40139 0 3
 802: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 803: LD_EXP 2
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 815: LD_EXP 2
 819: PPUSH
 820: LD_INT 4
 822: PPUSH
 823: LD_INT 0
 825: PPUSH
 826: CALL_OW 49
// end else
 830: GO 848
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 832: LD_INT 4
 834: PPUSH
 835: LD_INT 0
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL 1370 0 4
// if TestCharacters ( 11_Donaldson ) then
 848: LD_STRING 11_Donaldson
 850: PPUSH
 851: CALL_OW 28
 855: IFFALSE 905
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 857: LD_ADDR_EXP 3
 861: PUSH
 862: LD_STRING Donaldson
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_STRING 11_
 870: PPUSH
 871: CALL 40139 0 3
 875: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 888: LD_EXP 3
 892: PPUSH
 893: LD_INT 4
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 49
// end else
 903: GO 921
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 905: LD_INT 4
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL 1370 0 4
// if TestCharacters ( 11_Cyrus ) then
 921: LD_STRING 11_Cyrus
 923: PPUSH
 924: CALL_OW 28
 928: IFFALSE 978
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 930: LD_ADDR_EXP 5
 934: PUSH
 935: LD_STRING Cyrus
 937: PPUSH
 938: LD_INT 1
 940: PPUSH
 941: LD_STRING 11_
 943: PPUSH
 944: CALL 40139 0 3
 948: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 949: LD_EXP 5
 953: PPUSH
 954: LD_INT 1
 956: PPUSH
 957: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 961: LD_EXP 5
 965: PPUSH
 966: LD_INT 4
 968: PPUSH
 969: LD_INT 0
 971: PPUSH
 972: CALL_OW 49
// end else
 976: GO 994
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 978: LD_INT 4
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL 1370 0 4
// if TestCharacters ( 11_Denis ) then
 994: LD_STRING 11_Denis
 996: PPUSH
 997: CALL_OW 28
1001: IFFALSE 1051
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
1003: LD_ADDR_EXP 6
1007: PUSH
1008: LD_STRING Denis
1010: PPUSH
1011: LD_INT 1
1013: PPUSH
1014: LD_STRING 11_
1016: PPUSH
1017: CALL 40139 0 3
1021: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1022: LD_EXP 6
1026: PPUSH
1027: LD_INT 4
1029: PPUSH
1030: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1034: LD_EXP 6
1038: PPUSH
1039: LD_INT 4
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// end else
1049: GO 1067
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1051: LD_INT 4
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: LD_INT 1
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL 1370 0 4
// if TestCharacters ( 11_Frank ) then
1067: LD_STRING 11_Frank
1069: PPUSH
1070: CALL_OW 28
1074: IFFALSE 1124
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1076: LD_ADDR_EXP 12
1080: PUSH
1081: LD_STRING Frank
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_STRING 11_
1089: PPUSH
1090: CALL 40139 0 3
1094: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1095: LD_EXP 12
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1107: LD_EXP 12
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end else
1122: GO 1140
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1124: LD_INT 4
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL 1370 0 4
// if TestCharacters ( 11_Cornell ) then
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: CALL_OW 28
1147: IFFALSE 1197
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1149: LD_ADDR_EXP 10
1153: PUSH
1154: LD_STRING Cornell
1156: PPUSH
1157: LD_INT 1
1159: PPUSH
1160: LD_STRING 11_
1162: PPUSH
1163: CALL 40139 0 3
1167: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1168: LD_EXP 10
1172: PPUSH
1173: LD_INT 1
1175: PPUSH
1176: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1180: LD_EXP 10
1184: PPUSH
1185: LD_INT 4
1187: PPUSH
1188: LD_INT 0
1190: PPUSH
1191: CALL_OW 49
// end else
1195: GO 1213
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1197: LD_INT 4
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: LD_INT 1
1205: PPUSH
1206: LD_INT 0
1208: PPUSH
1209: CALL 1370 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1213: LD_ADDR_VAR 0 2
1217: PUSH
1218: LD_EXP 14
1222: PPUSH
1223: LD_INT 26
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PPUSH
1233: CALL_OW 72
1237: ST_TO_ADDR
// if not tmp then
1238: LD_VAR 0 2
1242: NOT
1243: IFFALSE 1272
// begin PrepareSoldier ( sex_male , 8 ) ;
1245: LD_INT 1
1247: PPUSH
1248: LD_INT 8
1250: PPUSH
1251: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1255: CALL_OW 44
1259: PPUSH
1260: LD_INT 4
1262: PPUSH
1263: LD_INT 0
1265: PPUSH
1266: CALL_OW 49
// end else
1270: GO 1346
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1272: LD_VAR 0 2
1276: PUSH
1277: LD_INT 1
1279: ARRAY
1280: PPUSH
1281: CALL_OW 257
1285: PUSH
1286: LD_INT 1
1288: NONEQUAL
1289: IFFALSE 1307
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1291: LD_VAR 0 2
1295: PUSH
1296: LD_INT 1
1298: ARRAY
1299: PPUSH
1300: LD_INT 1
1302: PPUSH
1303: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1307: LD_VAR 0 2
1311: PUSH
1312: LD_INT 1
1314: ARRAY
1315: PPUSH
1316: LD_INT 4
1318: PPUSH
1319: LD_INT 0
1321: PPUSH
1322: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1326: LD_ADDR_EXP 14
1330: PUSH
1331: LD_EXP 14
1335: PUSH
1336: LD_VAR 0 2
1340: PUSH
1341: LD_INT 1
1343: ARRAY
1344: DIFF
1345: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1346: LD_ADDR_EXP 15
1350: PUSH
1351: LD_STRING Powell
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: LD_STRING 
1359: PPUSH
1360: CALL 40139 0 3
1364: ST_TO_ADDR
// end ;
1365: LD_VAR 0 1
1369: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1370: LD_INT 0
1372: PPUSH
1373: PPUSH
1374: PPUSH
1375: PPUSH
1376: PPUSH
// if mech = 1 then
1377: LD_VAR 0 4
1381: PUSH
1382: LD_INT 1
1384: EQUAL
1385: IFFALSE 1630
// begin if others11 then
1387: LD_EXP 14
1391: IFFALSE 1570
// begin for i := 1 to others11 - 1 do
1393: LD_ADDR_VAR 0 6
1397: PUSH
1398: DOUBLE
1399: LD_INT 1
1401: DEC
1402: ST_TO_ADDR
1403: LD_EXP 14
1407: PUSH
1408: LD_INT 1
1410: MINUS
1411: PUSH
1412: FOR_TO
1413: IFFALSE 1495
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1415: LD_EXP 14
1419: PUSH
1420: LD_VAR 0 6
1424: ARRAY
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL_OW 259
1433: PUSH
1434: LD_EXP 14
1438: PUSH
1439: LD_VAR 0 6
1443: PUSH
1444: LD_INT 1
1446: PLUS
1447: ARRAY
1448: PPUSH
1449: LD_INT 3
1451: PPUSH
1452: CALL_OW 259
1456: LESS
1457: IFFALSE 1493
// begin mecha = others11 [ i + 1 ] ;
1459: LD_ADDR_VAR 0 9
1463: PUSH
1464: LD_EXP 14
1468: PUSH
1469: LD_VAR 0 6
1473: PUSH
1474: LD_INT 1
1476: PLUS
1477: ARRAY
1478: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1479: LD_VAR 0 9
1483: PPUSH
1484: LD_INT 3
1486: PPUSH
1487: CALL_OW 336
// break ;
1491: GO 1495
// end ; end ;
1493: GO 1412
1495: POP
1496: POP
// if spawnMode = 1 then
1497: LD_VAR 0 3
1501: PUSH
1502: LD_INT 1
1504: EQUAL
1505: IFFALSE 1538
// begin SetClass ( mecha , class_soldier ) ;
1507: LD_VAR 0 9
1511: PPUSH
1512: LD_INT 1
1514: PPUSH
1515: CALL_OW 336
// PlaceUnitArea ( mecha , area , false ) ;
1519: LD_VAR 0 9
1523: PPUSH
1524: LD_VAR 0 1
1528: PPUSH
1529: LD_INT 0
1531: PPUSH
1532: CALL_OW 49
// end else
1536: GO 1552
// PlaceHumanInUnit ( mecha , veh ) ;
1538: LD_VAR 0 9
1542: PPUSH
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 52
// others11 := others11 diff mecha ;
1552: LD_ADDR_EXP 14
1556: PUSH
1557: LD_EXP 14
1561: PUSH
1562: LD_VAR 0 9
1566: DIFF
1567: ST_TO_ADDR
// end else
1568: GO 1628
// begin hc_name :=  ;
1570: LD_ADDR_OWVAR 26
1574: PUSH
1575: LD_STRING 
1577: ST_TO_ADDR
// hc_gallery :=  ;
1578: LD_ADDR_OWVAR 33
1582: PUSH
1583: LD_STRING 
1585: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1586: LD_INT 0
1588: PPUSH
1589: LD_INT 7
1591: PPUSH
1592: LD_INT 9
1594: PPUSH
1595: CALL_OW 12
1599: PPUSH
1600: CALL_OW 383
// un := CreateHuman ;
1604: LD_ADDR_VAR 0 7
1608: PUSH
1609: CALL_OW 44
1613: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1614: LD_VAR 0 7
1618: PPUSH
1619: LD_VAR 0 2
1623: PPUSH
1624: CALL_OW 52
// end ; end else
1628: GO 1795
// begin if others11 then
1630: LD_EXP 14
1634: IFFALSE 1707
// begin if spawnMode = 1 then
1636: LD_VAR 0 3
1640: PUSH
1641: LD_INT 1
1643: EQUAL
1644: IFFALSE 1669
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1646: LD_EXP 14
1650: PUSH
1651: LD_INT 1
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 1
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 49
1667: GO 1687
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1669: LD_EXP 14
1673: PUSH
1674: LD_INT 1
1676: ARRAY
1677: PPUSH
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1687: LD_ADDR_EXP 14
1691: PUSH
1692: LD_EXP 14
1696: PPUSH
1697: LD_INT 1
1699: PPUSH
1700: CALL_OW 3
1704: ST_TO_ADDR
// end else
1705: GO 1795
// begin hc_name :=  ;
1707: LD_ADDR_OWVAR 26
1711: PUSH
1712: LD_STRING 
1714: ST_TO_ADDR
// hc_gallery :=  ;
1715: LD_ADDR_OWVAR 33
1719: PUSH
1720: LD_STRING 
1722: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1723: LD_INT 0
1725: PPUSH
1726: LD_INT 1
1728: PUSH
1729: LD_INT 2
1731: PUSH
1732: LD_INT 3
1734: PUSH
1735: LD_INT 4
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 1
1746: PPUSH
1747: LD_INT 4
1749: PPUSH
1750: CALL_OW 12
1754: ARRAY
1755: PPUSH
1756: LD_INT 7
1758: PPUSH
1759: LD_INT 9
1761: PPUSH
1762: CALL_OW 12
1766: PPUSH
1767: CALL_OW 380
// un := CreateHuman ;
1771: LD_ADDR_VAR 0 7
1775: PUSH
1776: CALL_OW 44
1780: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1781: LD_VAR 0 7
1785: PPUSH
1786: LD_VAR 0 2
1790: PPUSH
1791: CALL_OW 52
// end ; end ; end ;
1795: LD_VAR 0 5
1799: RET
// export function PrepareVehicles ; var veh ; begin
1800: LD_INT 0
1802: PPUSH
1803: PPUSH
// uc_side := 1 ;
1804: LD_ADDR_OWVAR 20
1808: PUSH
1809: LD_INT 1
1811: ST_TO_ADDR
// uc_nation := 1 ;
1812: LD_ADDR_OWVAR 21
1816: PUSH
1817: LD_INT 1
1819: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1820: LD_ADDR_OWVAR 37
1824: PUSH
1825: LD_INT 3
1827: ST_TO_ADDR
// vc_engine := engine_siberite ;
1828: LD_ADDR_OWVAR 39
1832: PUSH
1833: LD_INT 3
1835: ST_TO_ADDR
// vc_control := control_computer ;
1836: LD_ADDR_OWVAR 38
1840: PUSH
1841: LD_INT 3
1843: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1844: LD_ADDR_OWVAR 40
1848: PUSH
1849: LD_INT 4
1851: ST_TO_ADDR
// veh := CreateVehicle ;
1852: LD_ADDR_VAR 0 2
1856: PUSH
1857: CALL_OW 45
1861: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1862: LD_VAR 0 2
1866: PPUSH
1867: LD_INT 4
1869: PPUSH
1870: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1874: LD_VAR 0 2
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 49
// vc_weapon := us_double_gun ;
1889: LD_ADDR_OWVAR 40
1893: PUSH
1894: LD_INT 5
1896: ST_TO_ADDR
// vc_control := control_manual ;
1897: LD_ADDR_OWVAR 38
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// veh := CreateVehicle ;
1905: LD_ADDR_VAR 0 2
1909: PUSH
1910: CALL_OW 45
1914: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1915: LD_VAR 0 2
1919: PPUSH
1920: LD_INT 4
1922: PPUSH
1923: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1927: LD_VAR 0 2
1931: PPUSH
1932: LD_INT 4
1934: PPUSH
1935: LD_INT 0
1937: PPUSH
1938: CALL_OW 49
// vc_weapon := us_radar ;
1942: LD_ADDR_OWVAR 40
1946: PUSH
1947: LD_INT 11
1949: ST_TO_ADDR
// vc_control := control_computer ;
1950: LD_ADDR_OWVAR 38
1954: PUSH
1955: LD_INT 3
1957: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// veh := CreateVehicle ;
1966: LD_ADDR_VAR 0 2
1970: PUSH
1971: CALL_OW 45
1975: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1976: LD_VAR 0 2
1980: PPUSH
1981: LD_INT 4
1983: PPUSH
1984: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: LD_INT 4
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 49
// vc_weapon := us_double_gun ;
2003: LD_ADDR_OWVAR 40
2007: PUSH
2008: LD_INT 5
2010: ST_TO_ADDR
// veh := CreateVehicle ;
2011: LD_ADDR_VAR 0 2
2015: PUSH
2016: CALL_OW 45
2020: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2021: LD_VAR 0 2
2025: PPUSH
2026: LD_INT 4
2028: PPUSH
2029: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2033: LD_VAR 0 2
2037: PPUSH
2038: LD_INT 4
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL_OW 49
// end ;
2048: LD_VAR 0 1
2052: RET
// export function PowellSupport1 ; var veh , un ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
// uc_side := 1 ;
2058: LD_ADDR_OWVAR 20
2062: PUSH
2063: LD_INT 1
2065: ST_TO_ADDR
// uc_nation := 1 ;
2066: LD_ADDR_OWVAR 21
2070: PUSH
2071: LD_INT 1
2073: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2074: LD_STRING 11_Brown
2076: PPUSH
2077: CALL_OW 28
2081: IFFALSE 2131
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2083: LD_ADDR_EXP 7
2087: PUSH
2088: LD_STRING Brown
2090: PPUSH
2091: LD_INT 1
2093: PPUSH
2094: LD_STRING 11_
2096: PPUSH
2097: CALL 40139 0 3
2101: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2102: LD_EXP 7
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2114: LD_EXP 7
2118: PPUSH
2119: LD_INT 4
2121: PPUSH
2122: LD_INT 0
2124: PPUSH
2125: CALL_OW 49
// end else
2129: GO 2147
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2131: LD_INT 4
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: LD_INT 1
2139: PPUSH
2140: LD_INT 0
2142: PPUSH
2143: CALL 1370 0 4
// if TestCharacters ( 11_Gary ) then
2147: LD_STRING 11_Gary
2149: PPUSH
2150: CALL_OW 28
2154: IFFALSE 2204
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2156: LD_ADDR_EXP 11
2160: PUSH
2161: LD_STRING Gary
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: LD_STRING 11_
2169: PPUSH
2170: CALL 40139 0 3
2174: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2175: LD_EXP 11
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2187: LD_EXP 11
2191: PPUSH
2192: LD_INT 4
2194: PPUSH
2195: LD_INT 0
2197: PPUSH
2198: CALL_OW 49
// end else
2202: GO 2220
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2204: LD_INT 4
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: LD_INT 0
2215: PPUSH
2216: CALL 1370 0 4
// vc_chassis := us_medium_tracked ;
2220: LD_ADDR_OWVAR 37
2224: PUSH
2225: LD_INT 3
2227: ST_TO_ADDR
// vc_engine := engine_siberite ;
2228: LD_ADDR_OWVAR 39
2232: PUSH
2233: LD_INT 3
2235: ST_TO_ADDR
// vc_control := control_manual ;
2236: LD_ADDR_OWVAR 38
2240: PUSH
2241: LD_INT 1
2243: ST_TO_ADDR
// vc_weapon := us_crane ;
2244: LD_ADDR_OWVAR 40
2248: PUSH
2249: LD_INT 13
2251: ST_TO_ADDR
// veh := CreateVehicle ;
2252: LD_ADDR_VAR 0 2
2256: PUSH
2257: CALL_OW 45
2261: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2274: LD_VAR 0 2
2278: PPUSH
2279: LD_INT 4
2281: PPUSH
2282: LD_INT 0
2284: PPUSH
2285: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2289: LD_INT 4
2291: PPUSH
2292: LD_VAR 0 2
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: LD_INT 1
2302: PPUSH
2303: CALL 1370 0 4
// vc_weapon := us_laser ;
2307: LD_ADDR_OWVAR 40
2311: PUSH
2312: LD_INT 9
2314: ST_TO_ADDR
// veh := CreateVehicle ;
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: CALL_OW 45
2324: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2325: LD_VAR 0 2
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2337: LD_VAR 0 2
2341: PPUSH
2342: LD_INT 4
2344: PPUSH
2345: LD_INT 0
2347: PPUSH
2348: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2352: LD_INT 4
2354: PPUSH
2355: LD_VAR 0 2
2359: PPUSH
2360: LD_INT 2
2362: PPUSH
2363: LD_INT 1
2365: PPUSH
2366: CALL 1370 0 4
// vc_control := control_computer ;
2370: LD_ADDR_OWVAR 38
2374: PUSH
2375: LD_INT 3
2377: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2378: LD_ADDR_OWVAR 40
2382: PUSH
2383: LD_INT 12
2385: ST_TO_ADDR
// veh := CreateVehicle ;
2386: LD_ADDR_VAR 0 2
2390: PUSH
2391: CALL_OW 45
2395: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2396: LD_VAR 0 2
2400: PPUSH
2401: LD_INT 17
2403: PPUSH
2404: CALL_OW 109
// SetDir ( veh , 4 ) ;
2408: LD_VAR 0 2
2412: PPUSH
2413: LD_INT 4
2415: PPUSH
2416: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2420: LD_VAR 0 2
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: LD_INT 0
2430: PPUSH
2431: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2435: LD_VAR 0 2
2439: PPUSH
2440: LD_INT 3
2442: PPUSH
2443: LD_INT 100
2445: PPUSH
2446: CALL_OW 291
// veh := CreateVehicle ;
2450: LD_ADDR_VAR 0 2
2454: PUSH
2455: CALL_OW 45
2459: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 17
2467: PPUSH
2468: CALL_OW 109
// SetDir ( veh , 4 ) ;
2472: LD_VAR 0 2
2476: PPUSH
2477: LD_INT 4
2479: PPUSH
2480: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2484: LD_VAR 0 2
2488: PPUSH
2489: LD_INT 4
2491: PPUSH
2492: LD_INT 0
2494: PPUSH
2495: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2499: LD_VAR 0 2
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 20
2509: PPUSH
2510: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2514: LD_VAR 0 2
2518: PPUSH
2519: LD_INT 1
2521: PPUSH
2522: LD_INT 80
2524: PPUSH
2525: CALL_OW 291
// end ;
2529: LD_VAR 0 1
2533: RET
// export function PowellSupport2 ; var veh , un ; begin
2534: LD_INT 0
2536: PPUSH
2537: PPUSH
2538: PPUSH
// uc_side := 1 ;
2539: LD_ADDR_OWVAR 20
2543: PUSH
2544: LD_INT 1
2546: ST_TO_ADDR
// uc_nation := 1 ;
2547: LD_ADDR_OWVAR 21
2551: PUSH
2552: LD_INT 1
2554: ST_TO_ADDR
// vc_engine := engine_siberite ;
2555: LD_ADDR_OWVAR 39
2559: PUSH
2560: LD_INT 3
2562: ST_TO_ADDR
// vc_control := control_computer ;
2563: LD_ADDR_OWVAR 38
2567: PUSH
2568: LD_INT 3
2570: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2571: LD_ADDR_OWVAR 37
2575: PUSH
2576: LD_INT 2
2578: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2579: LD_ADDR_OWVAR 40
2583: PUSH
2584: LD_INT 5
2586: ST_TO_ADDR
// veh := CreateVehicle ;
2587: LD_ADDR_VAR 0 2
2591: PUSH
2592: CALL_OW 45
2596: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2597: LD_VAR 0 2
2601: PPUSH
2602: LD_INT 4
2604: PPUSH
2605: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2609: LD_VAR 0 2
2613: PPUSH
2614: LD_INT 4
2616: PPUSH
2617: LD_INT 0
2619: PPUSH
2620: CALL_OW 49
// vc_chassis := us_heavy_tracked ;
2624: LD_ADDR_OWVAR 37
2628: PUSH
2629: LD_INT 4
2631: ST_TO_ADDR
// vc_engine := engine_siberite ;
2632: LD_ADDR_OWVAR 39
2636: PUSH
2637: LD_INT 3
2639: ST_TO_ADDR
// vc_control := control_manual ;
2640: LD_ADDR_OWVAR 38
2644: PUSH
2645: LD_INT 1
2647: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
2648: LD_ADDR_OWVAR 40
2652: PUSH
2653: LD_INT 6
2655: ST_TO_ADDR
// veh := CreateVehicle ;
2656: LD_ADDR_VAR 0 2
2660: PUSH
2661: CALL_OW 45
2665: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2666: LD_VAR 0 2
2670: PPUSH
2671: LD_INT 4
2673: PPUSH
2674: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2678: LD_VAR 0 2
2682: PPUSH
2683: LD_INT 4
2685: PPUSH
2686: LD_INT 0
2688: PPUSH
2689: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2693: LD_STRING 11_Bobby
2695: PPUSH
2696: CALL_OW 28
2700: IFFALSE 2749
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2702: LD_ADDR_EXP 4
2706: PUSH
2707: LD_STRING Bobby
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: LD_STRING 11_
2715: PPUSH
2716: CALL 40139 0 3
2720: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2721: LD_EXP 4
2725: PPUSH
2726: LD_INT 3
2728: PPUSH
2729: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2733: LD_EXP 4
2737: PPUSH
2738: LD_VAR 0 2
2742: PPUSH
2743: CALL_OW 52
// end else
2747: GO 2767
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2749: LD_INT 0
2751: PPUSH
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_INT 2
2759: PPUSH
2760: LD_INT 0
2762: PPUSH
2763: CALL 1370 0 4
// if TestCharacters ( 11_Houten ) then
2767: LD_STRING 11_Houten
2769: PPUSH
2770: CALL_OW 28
2774: IFFALSE 2824
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2776: LD_ADDR_EXP 9
2780: PUSH
2781: LD_STRING Houten
2783: PPUSH
2784: LD_INT 1
2786: PPUSH
2787: LD_STRING 11_
2789: PPUSH
2790: CALL 40139 0 3
2794: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2795: LD_EXP 9
2799: PPUSH
2800: LD_INT 1
2802: PPUSH
2803: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2807: LD_EXP 9
2811: PPUSH
2812: LD_INT 4
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 49
// end else
2822: GO 2840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2824: LD_INT 4
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: LD_INT 1
2832: PPUSH
2833: LD_INT 0
2835: PPUSH
2836: CALL 1370 0 4
// vc_chassis := us_medium_wheeled ;
2840: LD_ADDR_OWVAR 37
2844: PUSH
2845: LD_INT 2
2847: ST_TO_ADDR
// vc_control := control_computer ;
2848: LD_ADDR_OWVAR 38
2852: PUSH
2853: LD_INT 3
2855: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2856: LD_ADDR_OWVAR 40
2860: PUSH
2861: LD_INT 12
2863: ST_TO_ADDR
// veh := CreateVehicle ;
2864: LD_ADDR_VAR 0 2
2868: PUSH
2869: CALL_OW 45
2873: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_INT 4
2881: PPUSH
2882: CALL_OW 233
// SetTag ( veh , 17 ) ;
2886: LD_VAR 0 2
2890: PPUSH
2891: LD_INT 17
2893: PPUSH
2894: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2898: LD_VAR 0 2
2902: PPUSH
2903: LD_INT 1
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL_OW 291
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 2
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2923: LD_VAR 0 2
2927: PPUSH
2928: LD_INT 4
2930: PPUSH
2931: CALL_OW 233
// SetTag ( veh , 17 ) ;
2935: LD_VAR 0 2
2939: PPUSH
2940: LD_INT 17
2942: PPUSH
2943: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2947: LD_VAR 0 2
2951: PPUSH
2952: LD_INT 4
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2962: LD_VAR 0 2
2966: PPUSH
2967: LD_INT 1
2969: PPUSH
2970: LD_INT 100
2972: PPUSH
2973: CALL_OW 291
// veh := CreateVehicle ;
2977: LD_ADDR_VAR 0 2
2981: PUSH
2982: CALL_OW 45
2986: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2987: LD_VAR 0 2
2991: PPUSH
2992: LD_INT 4
2994: PPUSH
2995: CALL_OW 233
// SetTag ( veh , 17 ) ;
2999: LD_VAR 0 2
3003: PPUSH
3004: LD_INT 17
3006: PPUSH
3007: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3011: LD_VAR 0 2
3015: PPUSH
3016: LD_INT 4
3018: PPUSH
3019: LD_INT 0
3021: PPUSH
3022: CALL_OW 49
// if kurtStatus then
3026: LD_EXP 19
3030: IFFALSE 3064
// begin AddCargo ( veh , mat_siberit , 60 ) ;
3032: LD_VAR 0 2
3036: PPUSH
3037: LD_INT 3
3039: PPUSH
3040: LD_INT 60
3042: PPUSH
3043: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3047: LD_VAR 0 2
3051: PPUSH
3052: LD_INT 1
3054: PPUSH
3055: LD_INT 40
3057: PPUSH
3058: CALL_OW 291
// end else
3062: GO 3079
// AddCargo ( veh , mat_cans , 100 ) ;
3064: LD_VAR 0 2
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: LD_INT 100
3074: PPUSH
3075: CALL_OW 291
// veh := CreateVehicle ;
3079: LD_ADDR_VAR 0 2
3083: PUSH
3084: CALL_OW 45
3088: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_INT 4
3096: PPUSH
3097: CALL_OW 233
// SetTag ( veh , 17 ) ;
3101: LD_VAR 0 2
3105: PPUSH
3106: LD_INT 17
3108: PPUSH
3109: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3113: LD_VAR 0 2
3117: PPUSH
3118: LD_INT 4
3120: PPUSH
3121: LD_INT 0
3123: PPUSH
3124: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_INT 2
3135: PPUSH
3136: LD_INT 60
3138: PPUSH
3139: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3143: LD_VAR 0 2
3147: PPUSH
3148: LD_INT 1
3150: PPUSH
3151: LD_INT 40
3153: PPUSH
3154: CALL_OW 291
// end ;
3158: LD_VAR 0 1
3162: RET
// export function PowellSupport3 ; var i , cargo ; begin
3163: LD_INT 0
3165: PPUSH
3166: PPUSH
3167: PPUSH
// uc_side := 1 ;
3168: LD_ADDR_OWVAR 20
3172: PUSH
3173: LD_INT 1
3175: ST_TO_ADDR
// uc_nation := 1 ;
3176: LD_ADDR_OWVAR 21
3180: PUSH
3181: LD_INT 1
3183: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3184: LD_INT 4
3186: PPUSH
3187: LD_INT 0
3189: PPUSH
3190: LD_INT 1
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: CALL 1370 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3200: LD_INT 4
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: LD_INT 1
3208: PPUSH
3209: LD_INT 0
3211: PPUSH
3212: CALL 1370 0 4
// for i := 1 to 2 do
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: DOUBLE
3222: LD_INT 1
3224: DEC
3225: ST_TO_ADDR
3226: LD_INT 2
3228: PUSH
3229: FOR_TO
3230: IFFALSE 3330
// begin vc_chassis := us_medium_wheeled ;
3232: LD_ADDR_OWVAR 37
3236: PUSH
3237: LD_INT 2
3239: ST_TO_ADDR
// vc_engine := engine_siberite ;
3240: LD_ADDR_OWVAR 39
3244: PUSH
3245: LD_INT 3
3247: ST_TO_ADDR
// vc_control = control_computer ;
3248: LD_ADDR_OWVAR 38
3252: PUSH
3253: LD_INT 3
3255: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3256: LD_ADDR_OWVAR 40
3260: PUSH
3261: LD_INT 12
3263: ST_TO_ADDR
// cargo := CreateVehicle ;
3264: LD_ADDR_VAR 0 3
3268: PUSH
3269: CALL_OW 45
3273: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3274: LD_VAR 0 3
3278: PPUSH
3279: LD_INT 4
3281: PPUSH
3282: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3286: LD_VAR 0 3
3290: PPUSH
3291: LD_INT 17
3293: PPUSH
3294: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3298: LD_VAR 0 3
3302: PPUSH
3303: LD_INT 4
3305: PPUSH
3306: LD_INT 0
3308: PPUSH
3309: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3313: LD_VAR 0 3
3317: PPUSH
3318: LD_INT 1
3320: PPUSH
3321: LD_INT 100
3323: PPUSH
3324: CALL_OW 291
// end ;
3328: GO 3229
3330: POP
3331: POP
// end ; end_of_file
3332: LD_VAR 0 1
3336: RET
// export function PrepareRussianCommander ; begin
3337: LD_INT 0
3339: PPUSH
// uc_side := 3 ;
3340: LD_ADDR_OWVAR 20
3344: PUSH
3345: LD_INT 3
3347: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3348: LD_ADDR_EXP 16
3352: PUSH
3353: LD_STRING Davidov
3355: PPUSH
3356: LD_INT 0
3358: PPUSH
3359: LD_STRING 
3361: PPUSH
3362: CALL 40139 0 3
3366: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3367: LD_EXP 16
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3379: LD_ADDR_EXP 27
3383: PUSH
3384: LD_EXP 27
3388: PPUSH
3389: LD_EXP 16
3393: PPUSH
3394: CALL 77830 0 2
3398: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3399: LD_EXP 27
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL_OW 336
// end ;
3411: LD_VAR 0 1
3415: RET
// export function PrepareEastBase ; var i , un ; begin
3416: LD_INT 0
3418: PPUSH
3419: PPUSH
3420: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , [ 2 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3421: LD_INT 3
3423: PPUSH
3424: LD_INT 3
3426: PPUSH
3427: LD_INT 121
3429: PPUSH
3430: LD_EXP 29
3434: PPUSH
3435: LD_EXP 30
3439: PPUSH
3440: CALL_OW 12
3444: PPUSH
3445: LD_INT 1
3447: PPUSH
3448: LD_INT 2
3450: PUSH
3451: LD_INT 2
3453: PUSH
3454: LD_INT 3
3456: PUSH
3457: LD_INT 3
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: PUSH
3466: LD_OWVAR 67
3470: ARRAY
3471: PPUSH
3472: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 3
3481: PPUSH
3482: LD_INT 121
3484: PPUSH
3485: LD_EXP 29
3489: PPUSH
3490: LD_EXP 30
3494: PPUSH
3495: CALL_OW 12
3499: PPUSH
3500: LD_INT 9
3502: PPUSH
3503: LD_INT 1
3505: PUSH
3506: LD_INT 2
3508: PUSH
3509: LD_INT 3
3511: PUSH
3512: LD_INT 3
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: PUSH
3521: LD_OWVAR 67
3525: ARRAY
3526: PPUSH
3527: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rubar3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3531: LD_INT 3
3533: PPUSH
3534: LD_INT 3
3536: PPUSH
3537: LD_INT 226
3539: PPUSH
3540: LD_EXP 29
3544: PPUSH
3545: LD_EXP 30
3549: PPUSH
3550: CALL_OW 12
3554: PPUSH
3555: LD_INT 9
3557: PPUSH
3558: LD_INT 2
3560: PUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 4
3566: PUSH
3567: LD_INT 5
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: PUSH
3576: LD_OWVAR 67
3580: ARRAY
3581: PPUSH
3582: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3586: LD_INT 3
3588: PPUSH
3589: LD_INT 3
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: LD_EXP 29
3599: PPUSH
3600: LD_EXP 30
3604: PPUSH
3605: CALL_OW 12
3609: PPUSH
3610: LD_INT 2
3612: PPUSH
3613: LD_INT 3
3615: PUSH
3616: LD_INT 4
3618: PUSH
3619: LD_INT 5
3621: PUSH
3622: LD_INT 6
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: PUSH
3631: LD_OWVAR 67
3635: ARRAY
3636: PPUSH
3637: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3641: LD_INT 3
3643: PPUSH
3644: LD_INT 3
3646: PPUSH
3647: LD_INT 112
3649: PPUSH
3650: LD_EXP 29
3654: PPUSH
3655: LD_EXP 30
3659: PPUSH
3660: CALL_OW 12
3664: PPUSH
3665: LD_INT 3
3667: PPUSH
3668: LD_INT 4
3670: PUSH
3671: LD_INT 4
3673: PUSH
3674: LD_INT 5
3676: PUSH
3677: LD_INT 6
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: PUSH
3686: LD_OWVAR 67
3690: ARRAY
3691: PPUSH
3692: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3696: LD_INT 3
3698: PPUSH
3699: LD_INT 3
3701: PPUSH
3702: LD_INT 47
3704: PPUSH
3705: LD_EXP 29
3709: PPUSH
3710: LD_EXP 30
3714: PPUSH
3715: CALL_OW 12
3719: PPUSH
3720: LD_INT 4
3722: PPUSH
3723: LD_INT 2
3725: PUSH
3726: LD_INT 3
3728: PUSH
3729: LD_INT 4
3731: PUSH
3732: LD_INT 5
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: PUSH
3741: LD_OWVAR 67
3745: ARRAY
3746: PPUSH
3747: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3751: LD_INT 3
3753: PPUSH
3754: LD_INT 3
3756: PPUSH
3757: LD_INT 129
3759: PPUSH
3760: LD_EXP 29
3764: PPUSH
3765: LD_EXP 30
3769: PPUSH
3770: CALL_OW 12
3774: PPUSH
3775: LD_INT 4
3777: PPUSH
3778: LD_INT 2
3780: PUSH
3781: LD_INT 3
3783: PUSH
3784: LD_INT 4
3786: PUSH
3787: LD_INT 5
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_OWVAR 67
3800: ARRAY
3801: PPUSH
3802: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3806: LD_INT 3
3808: PPUSH
3809: LD_INT 3
3811: PPUSH
3812: LD_INT 135
3814: PPUSH
3815: LD_EXP 29
3819: PPUSH
3820: LD_EXP 30
3824: PPUSH
3825: CALL_OW 12
3829: PPUSH
3830: LD_INT 4
3832: PPUSH
3833: LD_INT 2
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: LD_INT 4
3841: PUSH
3842: LD_INT 5
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: LD_OWVAR 67
3855: ARRAY
3856: PPUSH
3857: CALL 13147 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3861: LD_ADDR_VAR 0 2
3865: PUSH
3866: LD_INT 22
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: PUSH
3876: LD_INT 30
3878: PUSH
3879: LD_INT 32
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PPUSH
3890: CALL_OW 69
3894: PUSH
3895: FOR_IN
3896: IFFALSE 3936
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3898: LD_INT 3
3900: PPUSH
3901: LD_INT 3
3903: PPUSH
3904: LD_VAR 0 2
3908: PPUSH
3909: LD_EXP 29
3913: PPUSH
3914: LD_EXP 30
3918: PPUSH
3919: CALL_OW 12
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 1
3929: PPUSH
3930: CALL 13147 0 6
3934: GO 3895
3936: POP
3937: POP
// for i := 1 to 5 do
3938: LD_ADDR_VAR 0 2
3942: PUSH
3943: DOUBLE
3944: LD_INT 1
3946: DEC
3947: ST_TO_ADDR
3948: LD_INT 5
3950: PUSH
3951: FOR_TO
3952: IFFALSE 4055
// begin uc_side := 3 ;
3954: LD_ADDR_OWVAR 20
3958: PUSH
3959: LD_INT 3
3961: ST_TO_ADDR
// uc_nation := 3 ;
3962: LD_ADDR_OWVAR 21
3966: PUSH
3967: LD_INT 3
3969: ST_TO_ADDR
// hc_gallery :=  ;
3970: LD_ADDR_OWVAR 33
3974: PUSH
3975: LD_STRING 
3977: ST_TO_ADDR
// hc_name :=  ;
3978: LD_ADDR_OWVAR 26
3982: PUSH
3983: LD_STRING 
3985: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3986: LD_INT 0
3988: PPUSH
3989: LD_INT 4
3991: PPUSH
3992: LD_EXP 29
3996: PPUSH
3997: LD_EXP 30
4001: PPUSH
4002: CALL_OW 12
4006: PPUSH
4007: CALL_OW 380
// un := CreateHuman ;
4011: LD_ADDR_VAR 0 3
4015: PUSH
4016: CALL_OW 44
4020: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
4021: LD_VAR 0 3
4025: PPUSH
4026: LD_INT 3
4028: PPUSH
4029: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
4033: LD_ADDR_EXP 27
4037: PUSH
4038: LD_EXP 27
4042: PPUSH
4043: LD_VAR 0 3
4047: PPUSH
4048: CALL 77830 0 2
4052: ST_TO_ADDR
// end ;
4053: GO 3951
4055: POP
4056: POP
// end ;
4057: LD_VAR 0 1
4061: RET
// export function PrepareWestBase ; var i , un ; begin
4062: LD_INT 0
4064: PPUSH
4065: PPUSH
4066: PPUSH
// if Difficulty = 1 then
4067: LD_OWVAR 67
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: IFFALSE 4113
// for i in FilterAllUnits ( [ f_inarea , delBuildingsArea ] ) do
4077: LD_ADDR_VAR 0 2
4081: PUSH
4082: LD_INT 95
4084: PUSH
4085: LD_INT 28
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PPUSH
4092: CALL_OW 69
4096: PUSH
4097: FOR_IN
4098: IFFALSE 4111
// RemoveUnit ( i ) ;
4100: LD_VAR 0 2
4104: PPUSH
4105: CALL_OW 64
4109: GO 4097
4111: POP
4112: POP
// TeleportExit ( ruteleprt , 122 , 145 ) ;
4113: LD_INT 10
4115: PPUSH
4116: LD_INT 122
4118: PPUSH
4119: LD_INT 145
4121: PPUSH
4122: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
4126: LD_INT 137
4128: PPUSH
4129: LD_INT 84
4131: PPUSH
4132: LD_INT 61
4134: PPUSH
4135: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ) ;
4139: LD_INT 3
4141: PPUSH
4142: LD_INT 3
4144: PPUSH
4145: LD_INT 6
4147: PPUSH
4148: LD_EXP 29
4152: PPUSH
4153: LD_EXP 30
4157: PPUSH
4158: CALL_OW 12
4162: PPUSH
4163: LD_INT 2
4165: PPUSH
4166: LD_INT 2
4168: PUSH
4169: LD_INT 3
4171: PUSH
4172: LD_INT 3
4174: PUSH
4175: LD_INT 3
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: PUSH
4184: LD_OWVAR 67
4188: ARRAY
4189: PPUSH
4190: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
4194: LD_INT 3
4196: PPUSH
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 91
4202: PPUSH
4203: LD_EXP 29
4207: PPUSH
4208: LD_EXP 30
4212: PPUSH
4213: CALL_OW 12
4217: PPUSH
4218: LD_INT 4
4220: PPUSH
4221: LD_INT 3
4223: PPUSH
4224: CALL 13147 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
4228: LD_INT 3
4230: PPUSH
4231: LD_INT 3
4233: PPUSH
4234: LD_INT 21
4236: PPUSH
4237: LD_EXP 29
4241: PPUSH
4242: LD_EXP 30
4246: PPUSH
4247: CALL_OW 12
4251: PPUSH
4252: LD_INT 3
4254: PPUSH
4255: LD_INT 4
4257: PUSH
4258: LD_INT 5
4260: PUSH
4261: LD_INT 6
4263: PUSH
4264: LD_INT 6
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: LD_OWVAR 67
4277: ARRAY
4278: PPUSH
4279: CALL 13147 0 6
// end ;
4283: LD_VAR 0 1
4287: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
4288: LD_INT 0
4290: PPUSH
4291: PPUSH
4292: PPUSH
4293: PPUSH
// uc_side := 3 ;
4294: LD_ADDR_OWVAR 20
4298: PUSH
4299: LD_INT 3
4301: ST_TO_ADDR
// uc_nation := 3 ;
4302: LD_ADDR_OWVAR 21
4306: PUSH
4307: LD_INT 3
4309: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
4310: LD_ADDR_VAR 0 2
4314: PUSH
4315: DOUBLE
4316: LD_INT 1
4318: DEC
4319: ST_TO_ADDR
4320: LD_INT 4
4322: PUSH
4323: LD_INT 5
4325: PUSH
4326: LD_INT 5
4328: PUSH
4329: LD_INT 5
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: PUSH
4338: LD_OWVAR 67
4342: ARRAY
4343: PUSH
4344: FOR_TO
4345: IFFALSE 4415
// begin hc_gallery :=  ;
4347: LD_ADDR_OWVAR 33
4351: PUSH
4352: LD_STRING 
4354: ST_TO_ADDR
// hc_name :=  ;
4355: LD_ADDR_OWVAR 26
4359: PUSH
4360: LD_STRING 
4362: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4363: LD_INT 0
4365: PPUSH
4366: LD_INT 9
4368: PPUSH
4369: LD_EXP 29
4373: PPUSH
4374: LD_EXP 30
4378: PPUSH
4379: CALL_OW 12
4383: PPUSH
4384: CALL_OW 380
// un := CreateHuman ;
4388: LD_ADDR_VAR 0 3
4392: PUSH
4393: CALL_OW 44
4397: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4398: LD_VAR 0 3
4402: PPUSH
4403: LD_INT 8
4405: PPUSH
4406: LD_INT 0
4408: PPUSH
4409: CALL_OW 49
// end ;
4413: GO 4344
4415: POP
4416: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: DOUBLE
4423: LD_INT 1
4425: DEC
4426: ST_TO_ADDR
4427: LD_INT 2
4429: PUSH
4430: LD_INT 3
4432: PUSH
4433: LD_INT 4
4435: PUSH
4436: LD_INT 4
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: LD_OWVAR 67
4449: ARRAY
4450: PUSH
4451: FOR_TO
4452: IFFALSE 4522
// begin hc_gallery :=  ;
4454: LD_ADDR_OWVAR 33
4458: PUSH
4459: LD_STRING 
4461: ST_TO_ADDR
// hc_name :=  ;
4462: LD_ADDR_OWVAR 26
4466: PUSH
4467: LD_STRING 
4469: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4470: LD_INT 0
4472: PPUSH
4473: LD_INT 4
4475: PPUSH
4476: LD_EXP 29
4480: PPUSH
4481: LD_EXP 30
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: CALL_OW 380
// un := CreateHuman ;
4495: LD_ADDR_VAR 0 3
4499: PUSH
4500: CALL_OW 44
4504: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4505: LD_VAR 0 3
4509: PPUSH
4510: LD_INT 8
4512: PPUSH
4513: LD_INT 0
4515: PPUSH
4516: CALL_OW 49
// end ;
4520: GO 4451
4522: POP
4523: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4524: LD_ADDR_VAR 0 2
4528: PUSH
4529: DOUBLE
4530: LD_INT 1
4532: DEC
4533: ST_TO_ADDR
4534: LD_INT 3
4536: PUSH
4537: LD_INT 4
4539: PUSH
4540: LD_INT 5
4542: PUSH
4543: LD_INT 5
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: PUSH
4552: LD_OWVAR 67
4556: ARRAY
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4776
// begin vc_engine = 3 ;
4561: LD_ADDR_OWVAR 39
4565: PUSH
4566: LD_INT 3
4568: ST_TO_ADDR
// vc_control = 1 ;
4569: LD_ADDR_OWVAR 38
4573: PUSH
4574: LD_INT 1
4576: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4577: LD_ADDR_OWVAR 40
4581: PUSH
4582: LD_INT 42
4584: PUSH
4585: LD_INT 43
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 45
4593: PUSH
4594: LD_INT 46
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: PUSH
4604: LD_INT 1
4606: PPUSH
4607: LD_INT 5
4609: PPUSH
4610: CALL_OW 12
4614: ARRAY
4615: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4616: LD_OWVAR 40
4620: PUSH
4621: LD_INT 46
4623: EQUAL
4624: IFFALSE 4636
// vc_chassis := ru_heavy_tracked else
4626: LD_ADDR_OWVAR 37
4630: PUSH
4631: LD_INT 24
4633: ST_TO_ADDR
4634: GO 4663
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4636: LD_ADDR_OWVAR 37
4640: PUSH
4641: LD_INT 22
4643: PUSH
4644: LD_INT 21
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 1
4653: PPUSH
4654: LD_INT 2
4656: PPUSH
4657: CALL_OW 12
4661: ARRAY
4662: ST_TO_ADDR
// veh := CreateVehicle ;
4663: LD_ADDR_VAR 0 4
4667: PUSH
4668: CALL_OW 45
4672: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4673: LD_VAR 0 4
4677: PPUSH
4678: LD_INT 3
4680: PPUSH
4681: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4685: LD_VAR 0 4
4689: PPUSH
4690: LD_INT 5
4692: PPUSH
4693: LD_INT 0
4695: PPUSH
4696: CALL_OW 49
// hc_gallery :=  ;
4700: LD_ADDR_OWVAR 33
4704: PUSH
4705: LD_STRING 
4707: ST_TO_ADDR
// hc_name :=  ;
4708: LD_ADDR_OWVAR 26
4712: PUSH
4713: LD_STRING 
4715: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
4716: LD_INT 0
4718: PPUSH
4719: LD_INT 3
4721: PPUSH
4722: LD_INT 6
4724: PUSH
4725: LD_INT 7
4727: PUSH
4728: LD_INT 8
4730: PUSH
4731: LD_INT 10
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: PUSH
4740: LD_OWVAR 67
4744: ARRAY
4745: PPUSH
4746: CALL_OW 380
// un = CreateHuman ;
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: CALL_OW 44
4759: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_VAR 0 4
4769: PPUSH
4770: CALL_OW 52
// end ;
4774: GO 4558
4776: POP
4777: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4778: LD_ADDR_VAR 0 2
4782: PUSH
4783: DOUBLE
4784: LD_INT 1
4786: DEC
4787: ST_TO_ADDR
4788: LD_INT 3
4790: PUSH
4791: LD_INT 4
4793: PUSH
4794: LD_INT 5
4796: PUSH
4797: LD_INT 5
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: LD_OWVAR 67
4810: ARRAY
4811: PUSH
4812: FOR_TO
4813: IFFALSE 4960
// begin vc_engine := 3 ;
4815: LD_ADDR_OWVAR 39
4819: PUSH
4820: LD_INT 3
4822: ST_TO_ADDR
// vc_control := 3 ;
4823: LD_ADDR_OWVAR 38
4827: PUSH
4828: LD_INT 3
4830: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4831: LD_ADDR_OWVAR 40
4835: PUSH
4836: LD_INT 42
4838: PUSH
4839: LD_INT 43
4841: PUSH
4842: LD_INT 44
4844: PUSH
4845: LD_INT 45
4847: PUSH
4848: LD_INT 46
4850: PUSH
4851: LD_INT 49
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 1
4864: PPUSH
4865: LD_INT 5
4867: PPUSH
4868: CALL_OW 12
4872: ARRAY
4873: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4874: LD_OWVAR 40
4878: PUSH
4879: LD_INT 46
4881: EQUAL
4882: IFFALSE 4894
// vc_chassis := ru_heavy_tracked else
4884: LD_ADDR_OWVAR 37
4888: PUSH
4889: LD_INT 24
4891: ST_TO_ADDR
4892: GO 4921
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4894: LD_ADDR_OWVAR 37
4898: PUSH
4899: LD_INT 22
4901: PUSH
4902: LD_INT 21
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 1
4911: PPUSH
4912: LD_INT 2
4914: PPUSH
4915: CALL_OW 12
4919: ARRAY
4920: ST_TO_ADDR
// veh := CreateVehicle ;
4921: LD_ADDR_VAR 0 4
4925: PUSH
4926: CALL_OW 45
4930: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4931: LD_VAR 0 4
4935: PPUSH
4936: LD_INT 3
4938: PPUSH
4939: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4943: LD_VAR 0 4
4947: PPUSH
4948: LD_INT 6
4950: PPUSH
4951: LD_INT 0
4953: PPUSH
4954: CALL_OW 49
// end ;
4958: GO 4812
4960: POP
4961: POP
// end ; end_of_file
4962: LD_VAR 0 1
4966: RET
// export function PrepareKurt ; begin
4967: LD_INT 0
4969: PPUSH
// uc_side := 8 ;
4970: LD_ADDR_OWVAR 20
4974: PUSH
4975: LD_INT 8
4977: ST_TO_ADDR
// uc_nation := 2 ;
4978: LD_ADDR_OWVAR 21
4982: PUSH
4983: LD_INT 2
4985: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4986: LD_ADDR_OWVAR 37
4990: PUSH
4991: LD_INT 13
4993: ST_TO_ADDR
// vc_engine := 1 ;
4994: LD_ADDR_OWVAR 39
4998: PUSH
4999: LD_INT 1
5001: ST_TO_ADDR
// vc_control := 1 ;
5002: LD_ADDR_OWVAR 38
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// vc_weapon := 24 ;
5010: LD_ADDR_OWVAR 40
5014: PUSH
5015: LD_INT 24
5017: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
5018: LD_ADDR_EXP 18
5022: PUSH
5023: CALL_OW 45
5027: ST_TO_ADDR
// if kurtStatus > 0 then
5028: LD_EXP 19
5032: PUSH
5033: LD_INT 0
5035: GREATER
5036: IFFALSE 5088
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
5038: LD_ADDR_EXP 17
5042: PUSH
5043: LD_STRING Kurt
5045: PPUSH
5046: LD_INT 0
5048: PPUSH
5049: LD_STRING 
5051: PPUSH
5052: CALL 40139 0 3
5056: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5057: LD_EXP 18
5061: PPUSH
5062: LD_INT 4
5064: PPUSH
5065: LD_INT 0
5067: PPUSH
5068: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5072: LD_EXP 17
5076: PPUSH
5077: LD_EXP 18
5081: PPUSH
5082: CALL_OW 52
// end else
5086: GO 5165
// begin hc_name :=  ;
5088: LD_ADDR_OWVAR 26
5092: PUSH
5093: LD_STRING 
5095: ST_TO_ADDR
// hc_gallery :=  ;
5096: LD_ADDR_OWVAR 33
5100: PUSH
5101: LD_STRING 
5103: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
5104: LD_INT 1
5106: PPUSH
5107: LD_INT 10
5109: PPUSH
5110: CALL_OW 381
// Kurt := CreateHuman ;
5114: LD_ADDR_EXP 17
5118: PUSH
5119: CALL_OW 44
5123: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5124: LD_EXP 18
5128: PPUSH
5129: LD_INT 4
5131: PPUSH
5132: LD_INT 0
5134: PPUSH
5135: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5139: LD_EXP 17
5143: PPUSH
5144: LD_EXP 18
5148: PPUSH
5149: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
5153: LD_EXP 17
5157: PPUSH
5158: LD_STRING AltKurt
5160: PPUSH
5161: CALL_OW 38
// end ; end ;
5165: LD_VAR 0 1
5169: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
5170: LD_INT 0
5172: PPUSH
5173: PPUSH
5174: PPUSH
5175: PPUSH
// for i := 1 to 3 do
5176: LD_ADDR_VAR 0 2
5180: PUSH
5181: DOUBLE
5182: LD_INT 1
5184: DEC
5185: ST_TO_ADDR
5186: LD_INT 3
5188: PUSH
5189: FOR_TO
5190: IFFALSE 5311
// begin uc_side := 1 ;
5192: LD_ADDR_OWVAR 20
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// hc_gallery =  ;
5208: LD_ADDR_OWVAR 33
5212: PUSH
5213: LD_STRING 
5215: ST_TO_ADDR
// hc_name =  ;
5216: LD_ADDR_OWVAR 26
5220: PUSH
5221: LD_STRING 
5223: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
5224: LD_EXP 19
5228: PUSH
5229: LD_INT 0
5231: EQUAL
5232: PUSH
5233: LD_EXP 19
5237: PUSH
5238: LD_INT 2
5240: EQUAL
5241: OR
5242: IFFALSE 5259
// PrepareHuman ( false , 1 , 6 ) else
5244: LD_INT 0
5246: PPUSH
5247: LD_INT 1
5249: PPUSH
5250: LD_INT 6
5252: PPUSH
5253: CALL_OW 380
5257: GO 5272
// PrepareHuman ( false , 1 , 8 ) ;
5259: LD_INT 0
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: LD_INT 8
5267: PPUSH
5268: CALL_OW 380
// un := CreateHuman ;
5272: LD_ADDR_VAR 0 3
5276: PUSH
5277: CALL_OW 44
5281: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5282: LD_VAR 0 3
5286: PPUSH
5287: LD_INT 4
5289: PPUSH
5290: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
5294: LD_VAR 0 3
5298: PPUSH
5299: LD_INT 4
5301: PPUSH
5302: LD_INT 0
5304: PPUSH
5305: CALL_OW 49
// end ;
5309: GO 5189
5311: POP
5312: POP
// vc_chassis := 14 ;
5313: LD_ADDR_OWVAR 37
5317: PUSH
5318: LD_INT 14
5320: ST_TO_ADDR
// vc_engine := 3 ;
5321: LD_ADDR_OWVAR 39
5325: PUSH
5326: LD_INT 3
5328: ST_TO_ADDR
// vc_control := 1 ;
5329: LD_ADDR_OWVAR 38
5333: PUSH
5334: LD_INT 1
5336: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5337: LD_ADDR_OWVAR 40
5341: PUSH
5342: LD_INT 27
5344: PUSH
5345: LD_INT 26
5347: PUSH
5348: LD_INT 28
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 1
5358: PPUSH
5359: LD_INT 3
5361: PPUSH
5362: CALL_OW 12
5366: ARRAY
5367: ST_TO_ADDR
// veh := CreateVehicle ;
5368: LD_ADDR_VAR 0 4
5372: PUSH
5373: CALL_OW 45
5377: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5378: LD_VAR 0 4
5382: PPUSH
5383: LD_INT 4
5385: PPUSH
5386: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5390: LD_VAR 0 4
5394: PPUSH
5395: LD_INT 4
5397: PPUSH
5398: LD_INT 0
5400: PPUSH
5401: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5405: LD_EXP 19
5409: PUSH
5410: LD_INT 0
5412: EQUAL
5413: PUSH
5414: LD_EXP 19
5418: PUSH
5419: LD_INT 2
5421: EQUAL
5422: OR
5423: IFFALSE 5440
// PrepareHuman ( false , 3 , 6 ) else
5425: LD_INT 0
5427: PPUSH
5428: LD_INT 3
5430: PPUSH
5431: LD_INT 6
5433: PPUSH
5434: CALL_OW 380
5438: GO 5453
// PrepareHuman ( false , 3 , 8 ) ;
5440: LD_INT 0
5442: PPUSH
5443: LD_INT 3
5445: PPUSH
5446: LD_INT 8
5448: PPUSH
5449: CALL_OW 380
// un := CreateHuman ;
5453: LD_ADDR_VAR 0 3
5457: PUSH
5458: CALL_OW 44
5462: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5463: LD_VAR 0 3
5467: PPUSH
5468: LD_VAR 0 4
5472: PPUSH
5473: CALL_OW 52
// vc_chassis := 14 ;
5477: LD_ADDR_OWVAR 37
5481: PUSH
5482: LD_INT 14
5484: ST_TO_ADDR
// vc_engine := 3 ;
5485: LD_ADDR_OWVAR 39
5489: PUSH
5490: LD_INT 3
5492: ST_TO_ADDR
// vc_control := 1 ;
5493: LD_ADDR_OWVAR 38
5497: PUSH
5498: LD_INT 1
5500: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5501: LD_ADDR_OWVAR 40
5505: PUSH
5506: LD_INT 27
5508: PUSH
5509: LD_INT 26
5511: PUSH
5512: LD_INT 28
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 1
5522: PPUSH
5523: LD_INT 3
5525: PPUSH
5526: CALL_OW 12
5530: ARRAY
5531: ST_TO_ADDR
// veh := CreateVehicle ;
5532: LD_ADDR_VAR 0 4
5536: PUSH
5537: CALL_OW 45
5541: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5542: LD_VAR 0 4
5546: PPUSH
5547: LD_INT 4
5549: PPUSH
5550: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5554: LD_VAR 0 4
5558: PPUSH
5559: LD_INT 4
5561: PPUSH
5562: LD_INT 0
5564: PPUSH
5565: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5569: LD_EXP 19
5573: PUSH
5574: LD_INT 0
5576: EQUAL
5577: PUSH
5578: LD_EXP 19
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: OR
5587: IFFALSE 5604
// PrepareHuman ( false , 4 , 6 ) else
5589: LD_INT 0
5591: PPUSH
5592: LD_INT 4
5594: PPUSH
5595: LD_INT 6
5597: PPUSH
5598: CALL_OW 380
5602: GO 5617
// PrepareHuman ( false , 4 , 8 ) ;
5604: LD_INT 0
5606: PPUSH
5607: LD_INT 4
5609: PPUSH
5610: LD_INT 8
5612: PPUSH
5613: CALL_OW 380
// un := CreateHuman ;
5617: LD_ADDR_VAR 0 3
5621: PUSH
5622: CALL_OW 44
5626: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5627: LD_VAR 0 3
5631: PPUSH
5632: LD_INT 4
5634: PPUSH
5635: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5639: LD_VAR 0 3
5643: PPUSH
5644: LD_VAR 0 4
5648: PPUSH
5649: CALL_OW 52
// vc_chassis := 14 ;
5653: LD_ADDR_OWVAR 37
5657: PUSH
5658: LD_INT 14
5660: ST_TO_ADDR
// vc_engine := 3 ;
5661: LD_ADDR_OWVAR 39
5665: PUSH
5666: LD_INT 3
5668: ST_TO_ADDR
// vc_control := 1 ;
5669: LD_ADDR_OWVAR 38
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// vc_weapon := 26 ;
5677: LD_ADDR_OWVAR 40
5681: PUSH
5682: LD_INT 26
5684: ST_TO_ADDR
// veh := CreateVehicle ;
5685: LD_ADDR_VAR 0 4
5689: PUSH
5690: CALL_OW 45
5694: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5695: LD_VAR 0 4
5699: PPUSH
5700: LD_INT 4
5702: PPUSH
5703: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5707: LD_VAR 0 4
5711: PPUSH
5712: LD_INT 4
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5722: LD_EXP 19
5726: PUSH
5727: LD_INT 0
5729: EQUAL
5730: PUSH
5731: LD_EXP 19
5735: PUSH
5736: LD_INT 2
5738: EQUAL
5739: OR
5740: IFFALSE 5757
// PrepareHuman ( false , 2 , 4 ) else
5742: LD_INT 0
5744: PPUSH
5745: LD_INT 2
5747: PPUSH
5748: LD_INT 4
5750: PPUSH
5751: CALL_OW 380
5755: GO 5770
// PrepareHuman ( false , 2 , 8 ) ;
5757: LD_INT 0
5759: PPUSH
5760: LD_INT 2
5762: PPUSH
5763: LD_INT 8
5765: PPUSH
5766: CALL_OW 380
// un := CreateHuman ;
5770: LD_ADDR_VAR 0 3
5774: PUSH
5775: CALL_OW 44
5779: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5780: LD_VAR 0 3
5784: PPUSH
5785: LD_INT 4
5787: PPUSH
5788: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5792: LD_VAR 0 3
5796: PPUSH
5797: LD_VAR 0 4
5801: PPUSH
5802: CALL_OW 52
// end ;
5806: LD_VAR 0 1
5810: RET
// export function PrepareAttackLegion ; var i , un ; begin
5811: LD_INT 0
5813: PPUSH
5814: PPUSH
5815: PPUSH
// for i := 1 to 4 do
5816: LD_ADDR_VAR 0 2
5820: PUSH
5821: DOUBLE
5822: LD_INT 1
5824: DEC
5825: ST_TO_ADDR
5826: LD_INT 4
5828: PUSH
5829: FOR_TO
5830: IFFALSE 5940
// begin uc_side := 8 ;
5832: LD_ADDR_OWVAR 20
5836: PUSH
5837: LD_INT 8
5839: ST_TO_ADDR
// uc_nation := 2 ;
5840: LD_ADDR_OWVAR 21
5844: PUSH
5845: LD_INT 2
5847: ST_TO_ADDR
// hc_gallery :=  ;
5848: LD_ADDR_OWVAR 33
5852: PUSH
5853: LD_STRING 
5855: ST_TO_ADDR
// hc_name :=  ;
5856: LD_ADDR_OWVAR 26
5860: PUSH
5861: LD_STRING 
5863: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5864: LD_INT 0
5866: PPUSH
5867: LD_INT 1
5869: PUSH
5870: LD_INT 8
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_INT 2
5882: PPUSH
5883: CALL_OW 12
5887: ARRAY
5888: PPUSH
5889: LD_INT 6
5891: PPUSH
5892: LD_INT 8
5894: PPUSH
5895: CALL_OW 12
5899: PPUSH
5900: CALL_OW 380
// un := CreateHuman ;
5904: LD_ADDR_VAR 0 3
5908: PUSH
5909: CALL_OW 44
5913: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5914: LD_VAR 0 3
5918: PPUSH
5919: LD_INT 19
5921: PPUSH
5922: LD_INT 0
5924: PPUSH
5925: CALL_OW 49
// ComCrawl ( un ) ;
5929: LD_VAR 0 3
5933: PPUSH
5934: CALL_OW 137
// end ;
5938: GO 5829
5940: POP
5941: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5942: LD_INT 1
5944: PPUSH
5945: LD_INT 8
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5958: LD_INT 20
5960: PPUSH
5961: LD_INT 3
5963: PPUSH
5964: CALL 14982 0 2
// end ; end_of_file
5968: LD_VAR 0 1
5972: RET
// export function Action ; var i , tmp , group ; begin
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
// InGameOn ;
5979: CALL_OW 8
// music_nat := 1 ;
5983: LD_ADDR_OWVAR 71
5987: PUSH
5988: LD_INT 1
5990: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5991: LD_ADDR_VAR 0 4
5995: PUSH
5996: LD_INT 22
5998: PUSH
5999: LD_INT 1
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PPUSH
6006: CALL_OW 69
6010: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
6011: LD_ADDR_VAR 0 3
6015: PUSH
6016: LD_EXP 1
6020: PPUSH
6021: CALL_OW 310
6025: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
6026: LD_VAR 0 3
6030: PPUSH
6031: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
6035: LD_VAR 0 4
6039: PPUSH
6040: LD_INT 130
6042: PPUSH
6043: LD_INT 103
6045: PPUSH
6046: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
6050: LD_VAR 0 3
6054: PPUSH
6055: LD_INT 114
6057: PPUSH
6058: LD_INT 102
6060: PPUSH
6061: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
6065: LD_EXP 1
6069: PPUSH
6070: LD_STRING D1-JMM-1
6072: PPUSH
6073: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6077: LD_VAR 0 3
6081: PPUSH
6082: CALL_OW 87
// if IsOk ( Donaldson ) then
6086: LD_EXP 3
6090: PPUSH
6091: CALL_OW 302
6095: IFFALSE 6160
// begin Say ( Donaldson , D1-Don-1 ) ;
6097: LD_EXP 3
6101: PPUSH
6102: LD_STRING D1-Don-1
6104: PPUSH
6105: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6109: LD_VAR 0 3
6113: PPUSH
6114: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
6118: LD_EXP 1
6122: PPUSH
6123: LD_STRING D1-JMM-2
6125: PPUSH
6126: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6130: LD_VAR 0 3
6134: PPUSH
6135: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
6139: LD_EXP 3
6143: PPUSH
6144: LD_STRING D1-Don-2
6146: PPUSH
6147: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6151: LD_VAR 0 3
6155: PPUSH
6156: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
6160: LD_VAR 0 4
6164: PPUSH
6165: LD_INT 110
6167: PPUSH
6168: LD_INT 101
6170: PPUSH
6171: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6175: LD_INT 35
6177: PPUSH
6178: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
6182: LD_VAR 0 3
6186: PPUSH
6187: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
6191: LD_INT 1
6193: PPUSH
6194: LD_INT 102
6196: PPUSH
6197: LD_INT 94
6199: PPUSH
6200: CALL_OW 293
6204: IFFALSE 6175
// CenterOnXY ( 102 , 94 ) ;
6206: LD_INT 102
6208: PPUSH
6209: LD_INT 94
6211: PPUSH
6212: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
6216: LD_VAR 0 4
6220: PPUSH
6221: LD_INT 26
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PPUSH
6231: CALL_OW 72
6235: PPUSH
6236: LD_STRING D1-Sol1-2
6238: PPUSH
6239: LD_STRING 
6241: PPUSH
6242: CALL 12642 0 3
// Say ( JMM , D1-JMM-3 ) ;
6246: LD_EXP 1
6250: PPUSH
6251: LD_STRING D1-JMM-3
6253: PPUSH
6254: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
6258: LD_STRING M1
6260: PPUSH
6261: CALL_OW 337
// for i in group do
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_VAR 0 4
6274: PUSH
6275: FOR_IN
6276: IFFALSE 6295
// ComMoveXY ( i , 95 , 84 ) ;
6278: LD_VAR 0 2
6282: PPUSH
6283: LD_INT 95
6285: PPUSH
6286: LD_INT 84
6288: PPUSH
6289: CALL_OW 111
6293: GO 6275
6295: POP
6296: POP
// end ;
6297: LD_VAR 0 1
6301: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
6302: LD_INT 7
6304: PPUSH
6305: LD_INT 22
6307: PUSH
6308: LD_INT 1
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PPUSH
6315: CALL_OW 70
6319: PUSH
6320: LD_INT 1
6322: GREATER
6323: IFFALSE 6973
6325: GO 6327
6327: DISABLE
6328: LD_INT 0
6330: PPUSH
6331: PPUSH
6332: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
6333: LD_ADDR_VAR 0 2
6337: PUSH
6338: LD_INT 8
6340: PPUSH
6341: LD_INT 22
6343: PUSH
6344: LD_INT 3
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 25
6353: PUSH
6354: LD_INT 9
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PPUSH
6365: CALL_OW 70
6369: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
6370: LD_VAR 0 2
6374: PPUSH
6375: LD_INT 96
6377: PPUSH
6378: LD_INT 85
6380: PPUSH
6381: CALL_OW 154
// for i := 1 to 5 do
6385: LD_ADDR_VAR 0 1
6389: PUSH
6390: DOUBLE
6391: LD_INT 1
6393: DEC
6394: ST_TO_ADDR
6395: LD_INT 5
6397: PUSH
6398: FOR_TO
6399: IFFALSE 6418
// AddComTimeShift ( tmp , 96 , 85 ) ;
6401: LD_VAR 0 2
6405: PPUSH
6406: LD_INT 96
6408: PPUSH
6409: LD_INT 85
6411: PPUSH
6412: CALL_OW 214
6416: GO 6398
6418: POP
6419: POP
// wait ( 0 0$2 ) ;
6420: LD_INT 70
6422: PPUSH
6423: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6427: LD_EXP 1
6431: PPUSH
6432: LD_STRING D1a-JMM-1
6434: PPUSH
6435: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6439: LD_EXP 3
6443: PPUSH
6444: LD_STRING D1a-Don-1
6446: PPUSH
6447: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_INT 22
6458: PUSH
6459: LD_INT 1
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PPUSH
6466: CALL_OW 69
6470: PUSH
6471: FOR_IN
6472: IFFALSE 6491
// ComMoveXY ( i , 109 , 102 ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: LD_INT 109
6481: PPUSH
6482: LD_INT 102
6484: PPUSH
6485: CALL_OW 111
6489: GO 6471
6491: POP
6492: POP
// Say ( JMM , D1a-JMM-2 ) ;
6493: LD_EXP 1
6497: PPUSH
6498: LD_STRING D1a-JMM-2
6500: PPUSH
6501: CALL_OW 88
// wait ( 0 0$10 ) ;
6505: LD_INT 350
6507: PPUSH
6508: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6512: LD_EXP 1
6516: PPUSH
6517: CALL_OW 310
6521: PPUSH
6522: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6526: LD_EXP 3
6530: PPUSH
6531: LD_STRING D1b-Don-1
6533: PPUSH
6534: CALL_OW 88
// if IsOk ( Donaldson ) then
6538: LD_EXP 3
6542: PPUSH
6543: CALL_OW 302
6547: IFFALSE 6561
// Say ( JMM , D1b-JMM-1 ) ;
6549: LD_EXP 1
6553: PPUSH
6554: LD_STRING D1b-JMM-1
6556: PPUSH
6557: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6561: LD_INT 22
6563: PUSH
6564: LD_INT 1
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 26
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 2
6583: PUSH
6584: LD_INT 25
6586: PUSH
6587: LD_INT 1
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 25
6596: PUSH
6597: LD_INT 2
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 25
6606: PUSH
6607: LD_INT 3
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 25
6616: PUSH
6617: LD_INT 4
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 25
6626: PUSH
6627: LD_INT 5
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 25
6636: PUSH
6637: LD_INT 8
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PPUSH
6658: CALL_OW 69
6662: PPUSH
6663: LD_STRING D1b-Sol1-1
6665: PPUSH
6666: LD_STRING 
6668: PPUSH
6669: CALL 12642 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6673: LD_EXP 3
6677: PPUSH
6678: LD_STRING D1b-Don-2
6680: PPUSH
6681: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6685: LD_EXP 1
6689: PPUSH
6690: LD_STRING D1b-JMM-2
6692: PPUSH
6693: CALL_OW 88
// dec := ShowQuery1 ;
6697: LD_ADDR_VAR 0 3
6701: PUSH
6702: CALL 13105 0 0
6706: ST_TO_ADDR
// if dec = 1 then
6707: LD_VAR 0 3
6711: PUSH
6712: LD_INT 1
6714: EQUAL
6715: IFFALSE 6821
// begin Say ( JMM , D2-JMM-1 ) ;
6717: LD_EXP 1
6721: PPUSH
6722: LD_STRING D2-JMM-1
6724: PPUSH
6725: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6729: LD_EXP 15
6733: PPUSH
6734: LD_STRING D2-Pow-1
6736: PPUSH
6737: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6741: LD_EXP 1
6745: PPUSH
6746: LD_STRING D2a-JMM-1
6748: PPUSH
6749: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6753: LD_EXP 15
6757: PPUSH
6758: LD_STRING D2a-Pow-1
6760: PPUSH
6761: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6765: LD_EXP 1
6769: PPUSH
6770: LD_STRING D2a-JMM-2
6772: PPUSH
6773: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6777: LD_EXP 15
6781: PPUSH
6782: LD_STRING D2a-Pow-2
6784: PPUSH
6785: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6789: LD_EXP 1
6793: PPUSH
6794: LD_STRING D2a-JMM-3
6796: PPUSH
6797: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6801: LD_EXP 15
6805: PPUSH
6806: LD_STRING D2a-Pow-3
6808: PPUSH
6809: CALL_OW 94
// secondPass := 2 ;
6813: LD_ADDR_EXP 20
6817: PUSH
6818: LD_INT 2
6820: ST_TO_ADDR
// end ; if dec = 2 then
6821: LD_VAR 0 3
6825: PUSH
6826: LD_INT 2
6828: EQUAL
6829: IFFALSE 6923
// begin Say ( JMM , D2-JMM-1 ) ;
6831: LD_EXP 1
6835: PPUSH
6836: LD_STRING D2-JMM-1
6838: PPUSH
6839: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6843: LD_EXP 15
6847: PPUSH
6848: LD_STRING D2-Pow-1
6850: PPUSH
6851: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6855: LD_EXP 1
6859: PPUSH
6860: LD_STRING D2b-JMM-1
6862: PPUSH
6863: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6867: LD_EXP 15
6871: PPUSH
6872: LD_STRING D2b-Pow-1
6874: PPUSH
6875: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6879: LD_EXP 1
6883: PPUSH
6884: LD_STRING D2c-JMM-1
6886: PPUSH
6887: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6891: LD_EXP 15
6895: PPUSH
6896: LD_STRING D2c-Pow-1
6898: PPUSH
6899: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6903: LD_EXP 1
6907: PPUSH
6908: LD_STRING D2c-JMM-2
6910: PPUSH
6911: CALL_OW 88
// secondPass := 2 ;
6915: LD_ADDR_EXP 20
6919: PUSH
6920: LD_INT 2
6922: ST_TO_ADDR
// end ; if dec = 3 then
6923: LD_VAR 0 3
6927: PUSH
6928: LD_INT 3
6930: EQUAL
6931: IFFALSE 6941
// secondPass := 1 ;
6933: LD_ADDR_EXP 20
6937: PUSH
6938: LD_INT 1
6940: ST_TO_ADDR
// InGameOff ;
6941: CALL_OW 9
// ruAI := true ;
6945: LD_ADDR_EXP 34
6949: PUSH
6950: LD_INT 1
6952: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6953: LD_INT 1
6955: PPUSH
6956: LD_INT 3
6958: PPUSH
6959: LD_INT 2
6961: PPUSH
6962: LD_INT 1
6964: PPUSH
6965: CALL_OW 80
// SaveForQuickRestart ;
6969: CALL_OW 22
// end ;
6973: PPOPN 3
6975: END
// every 1 1$0 trigger secondPass = 2 do
6976: LD_EXP 20
6980: PUSH
6981: LD_INT 2
6983: EQUAL
6984: IFFALSE 7212
6986: GO 6988
6988: DISABLE
// begin cratesAllow := true ;
6989: LD_ADDR_EXP 45
6993: PUSH
6994: LD_INT 1
6996: ST_TO_ADDR
// PowellSupport1 ;
6997: CALL 2053 0 0
// DialogueOn ;
7001: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
7005: LD_EXP 1
7009: PPUSH
7010: LD_STRING DC1-JMM-1
7012: PPUSH
7013: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
7017: LD_EXP 15
7021: PPUSH
7022: LD_STRING DC1-Pow-1
7024: PPUSH
7025: CALL_OW 94
// DialogueOff ;
7029: CALL_OW 7
// wait ( 3 3$0 ) ;
7033: LD_INT 6300
7035: PPUSH
7036: CALL_OW 67
// PowellSupport2 ;
7040: CALL 2534 0 0
// DialogueOn ;
7044: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
7048: LD_EXP 1
7052: PPUSH
7053: LD_STRING DC2-JMM-1
7055: PPUSH
7056: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
7060: LD_EXP 15
7064: PPUSH
7065: LD_STRING DC2-Pow-1
7067: PPUSH
7068: CALL_OW 94
// DialogueOff ;
7072: CALL_OW 7
// wait ( 3 3$00 ) ;
7076: LD_INT 6300
7078: PPUSH
7079: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7083: LD_INT 35
7085: PPUSH
7086: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
7090: LD_INT 22
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 2
7102: PUSH
7103: LD_INT 30
7105: PUSH
7106: LD_INT 0
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 30
7115: PUSH
7116: LD_INT 1
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PPUSH
7132: CALL_OW 69
7136: PUSH
7137: LD_INT 11
7139: PPUSH
7140: LD_INT 22
7142: PUSH
7143: LD_INT 3
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PPUSH
7150: CALL_OW 70
7154: NOT
7155: AND
7156: IFFALSE 7083
// wait ( 0 0$10 ) ;
7158: LD_INT 350
7160: PPUSH
7161: CALL_OW 67
// Legion ;
7165: CALL 7213 0 0
// wait ( 5 5$0 ) ;
7169: LD_INT 10500
7171: PPUSH
7172: CALL_OW 67
// PowellSupport3 ;
7176: CALL 3163 0 0
// DialogueOn ;
7180: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
7184: LD_EXP 15
7188: PPUSH
7189: LD_STRING DC3-Pow-1
7191: PPUSH
7192: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
7196: LD_EXP 1
7200: PPUSH
7201: LD_STRING DC3-JMM-1
7203: PPUSH
7204: CALL_OW 88
// DialogueOff ;
7208: CALL_OW 7
// end ;
7212: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
7213: LD_INT 0
7215: PPUSH
7216: PPUSH
7217: PPUSH
7218: PPUSH
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7231: LD_ADDR_VAR 0 5
7235: PUSH
7236: LD_INT 22
7238: PUSH
7239: LD_INT 1
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 21
7248: PUSH
7249: LD_INT 3
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 2
7258: PUSH
7259: LD_INT 30
7261: PUSH
7262: LD_INT 0
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 30
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: LIST
7288: PPUSH
7289: CALL_OW 69
7293: ST_TO_ADDR
// crates := 0 ;
7294: LD_ADDR_VAR 0 8
7298: PUSH
7299: LD_INT 0
7301: ST_TO_ADDR
// oil := 0 ;
7302: LD_ADDR_VAR 0 9
7306: PUSH
7307: LD_INT 0
7309: ST_TO_ADDR
// siberite := 0 ;
7310: LD_ADDR_VAR 0 10
7314: PUSH
7315: LD_INT 0
7317: ST_TO_ADDR
// payForNeutral := false ;
7318: LD_ADDR_VAR 0 13
7322: PUSH
7323: LD_INT 0
7325: ST_TO_ADDR
// payForHelp := false ;
7326: LD_ADDR_VAR 0 14
7330: PUSH
7331: LD_INT 0
7333: ST_TO_ADDR
// for i in tmp do
7334: LD_ADDR_VAR 0 2
7338: PUSH
7339: LD_VAR 0 5
7343: PUSH
7344: FOR_IN
7345: IFFALSE 7436
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7347: LD_ADDR_VAR 0 8
7351: PUSH
7352: LD_VAR 0 8
7356: PUSH
7357: LD_VAR 0 2
7361: PPUSH
7362: CALL_OW 274
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 275
7374: PLUS
7375: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7376: LD_ADDR_VAR 0 9
7380: PUSH
7381: LD_VAR 0 9
7385: PUSH
7386: LD_VAR 0 2
7390: PPUSH
7391: CALL_OW 274
7395: PPUSH
7396: LD_INT 2
7398: PPUSH
7399: CALL_OW 275
7403: PLUS
7404: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7405: LD_ADDR_VAR 0 10
7409: PUSH
7410: LD_VAR 0 10
7414: PUSH
7415: LD_VAR 0 2
7419: PPUSH
7420: CALL_OW 274
7424: PPUSH
7425: LD_INT 3
7427: PPUSH
7428: CALL_OW 275
7432: PLUS
7433: ST_TO_ADDR
// end ;
7434: GO 7344
7436: POP
7437: POP
// PrepareKurt ;
7438: CALL 4967 0 0
// if not Kurt then
7442: LD_EXP 17
7446: NOT
7447: IFFALSE 7451
// exit ;
7449: GO 9570
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7451: LD_EXP 18
7455: PPUSH
7456: LD_INT 144
7458: PPUSH
7459: LD_INT 111
7461: PPUSH
7462: CALL_OW 111
// wait ( 0 0$2 ) ;
7466: LD_INT 70
7468: PPUSH
7469: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7473: LD_INT 167
7475: PPUSH
7476: LD_INT 121
7478: PPUSH
7479: LD_INT 1
7481: PPUSH
7482: LD_INT 10
7484: NEG
7485: PPUSH
7486: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7490: LD_EXP 17
7494: PPUSH
7495: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7499: LD_EXP 17
7503: PPUSH
7504: CALL_OW 87
// wait ( 0 0$1 ) ;
7508: LD_INT 35
7510: PPUSH
7511: CALL_OW 67
// DialogueOn ;
7515: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7519: LD_INT 22
7521: PUSH
7522: LD_INT 1
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 26
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 25
7544: PUSH
7545: LD_INT 1
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: LD_INT 25
7554: PUSH
7555: LD_INT 2
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 25
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 25
7574: PUSH
7575: LD_INT 4
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 25
7584: PUSH
7585: LD_INT 5
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: LD_INT 25
7594: PUSH
7595: LD_INT 8
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: LIST
7615: PPUSH
7616: CALL_OW 69
7620: PPUSH
7621: LD_STRING D3-Sol1-1
7623: PPUSH
7624: LD_STRING 
7626: PPUSH
7627: CALL 12642 0 3
// if KurtStatus then
7631: LD_EXP 19
7635: IFFALSE 7735
// begin Say ( Kurt , D3-Kurt-1 ) ;
7637: LD_EXP 17
7641: PPUSH
7642: LD_STRING D3-Kurt-1
7644: PPUSH
7645: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7649: LD_EXP 1
7653: PPUSH
7654: LD_STRING D3-JMM-1
7656: PPUSH
7657: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7661: LD_EXP 17
7665: PPUSH
7666: LD_STRING D3-Kurt-2
7668: PPUSH
7669: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7673: LD_EXP 1
7677: PPUSH
7678: LD_STRING D3-JMM-2
7680: PPUSH
7681: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7685: LD_EXP 17
7689: PPUSH
7690: LD_STRING D3-Kurt-4
7692: PPUSH
7693: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7697: LD_EXP 1
7701: PPUSH
7702: LD_STRING D3-JMM-4
7704: PPUSH
7705: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7709: LD_EXP 17
7713: PPUSH
7714: LD_STRING D3-Kurt-5
7716: PPUSH
7717: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7721: LD_EXP 17
7725: PPUSH
7726: LD_STRING D3-Kurt-5a
7728: PPUSH
7729: CALL_OW 88
// end else
7733: GO 7831
// begin Say ( Kurt , D3-Kurt-1 ) ;
7735: LD_EXP 17
7739: PPUSH
7740: LD_STRING D3-Kurt-1
7742: PPUSH
7743: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7747: LD_EXP 1
7751: PPUSH
7752: LD_STRING D3-JMM-1
7754: PPUSH
7755: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7759: LD_EXP 17
7763: PPUSH
7764: LD_STRING D3-Kurt-3
7766: PPUSH
7767: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7771: LD_EXP 1
7775: PPUSH
7776: LD_STRING D3-JMM-3
7778: PPUSH
7779: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7783: LD_EXP 17
7787: PPUSH
7788: LD_STRING D3-Kurt-4
7790: PPUSH
7791: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7795: LD_EXP 1
7799: PPUSH
7800: LD_STRING D3-JMM-4
7802: PPUSH
7803: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7807: LD_EXP 17
7811: PPUSH
7812: LD_STRING D3-Kurt-5
7814: PPUSH
7815: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7819: LD_EXP 17
7823: PPUSH
7824: LD_STRING D3-Kurt-5b
7826: PPUSH
7827: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7831: LD_VAR 0 8
7835: PUSH
7836: LD_INT 120
7838: PUSH
7839: LD_INT 60
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: LD_EXP 19
7850: PUSH
7851: LD_INT 1
7853: PLUS
7854: ARRAY
7855: GREATEREQUAL
7856: PUSH
7857: LD_VAR 0 10
7861: PUSH
7862: LD_INT 120
7864: PUSH
7865: LD_INT 60
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_EXP 19
7876: PUSH
7877: LD_INT 1
7879: PLUS
7880: ARRAY
7881: GREATEREQUAL
7882: AND
7883: IFFALSE 7935
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7885: LD_ADDR_VAR 0 3
7889: PUSH
7890: LD_STRING Q2
7892: PUSH
7893: LD_STRING Q2K
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_EXP 19
7904: PUSH
7905: LD_INT 1
7907: PLUS
7908: ARRAY
7909: PPUSH
7910: LD_INT 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: LD_INT 4
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 98
7932: ST_TO_ADDR
7933: GO 7979
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7935: LD_ADDR_VAR 0 3
7939: PUSH
7940: LD_STRING Q2
7942: PUSH
7943: LD_STRING Q2K
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_EXP 19
7954: PUSH
7955: LD_INT 1
7957: PLUS
7958: ARRAY
7959: PPUSH
7960: LD_INT 1
7962: PUSH
7963: LD_INT 3
7965: PUSH
7966: LD_INT 4
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: LIST
7973: PPUSH
7974: CALL_OW 98
7978: ST_TO_ADDR
// if dec1 = 1 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 1
7986: EQUAL
7987: IFFALSE 8021
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7989: LD_EXP 1
7993: PPUSH
7994: LD_STRING D3Ka-JMM-1
7996: PPUSH
7997: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
8001: LD_EXP 17
8005: PPUSH
8006: LD_STRING D3Ka-Kurt-1
8008: PPUSH
8009: CALL_OW 88
// warWithLegion = 1 ;
8013: LD_ADDR_EXP 23
8017: PUSH
8018: LD_INT 1
8020: ST_TO_ADDR
// end ; if dec1 = 2 then
8021: LD_VAR 0 3
8025: PUSH
8026: LD_INT 2
8028: EQUAL
8029: IFFALSE 8113
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8031: LD_EXP 1
8035: PPUSH
8036: LD_STRING D3Kb-JMM-1
8038: PPUSH
8039: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8043: LD_EXP 17
8047: PPUSH
8048: LD_STRING D3Kb-Kurt-1
8050: PPUSH
8051: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8055: LD_ADDR_VAR 0 11
8059: PUSH
8060: LD_INT 120
8062: PUSH
8063: LD_INT 60
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: LD_EXP 19
8074: PUSH
8075: LD_INT 1
8077: PLUS
8078: ARRAY
8079: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8080: LD_ADDR_VAR 0 12
8084: PUSH
8085: LD_INT 120
8087: PUSH
8088: LD_INT 60
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: LD_EXP 19
8099: PUSH
8100: LD_INT 1
8102: PLUS
8103: ARRAY
8104: ST_TO_ADDR
// payForNeutral := true ;
8105: LD_ADDR_VAR 0 13
8109: PUSH
8110: LD_INT 1
8112: ST_TO_ADDR
// end ; if dec1 = 3 then
8113: LD_VAR 0 3
8117: PUSH
8118: LD_INT 3
8120: EQUAL
8121: IFFALSE 8356
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8123: LD_EXP 1
8127: PPUSH
8128: LD_STRING D3Kc1-JMM-1
8130: PPUSH
8131: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8135: LD_EXP 17
8139: PPUSH
8140: LD_STRING D3Kc1-Kurt-1
8142: PPUSH
8143: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8147: LD_EXP 1
8151: PPUSH
8152: LD_STRING D3Kc1-JMM-2
8154: PPUSH
8155: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8159: LD_EXP 17
8163: PPUSH
8164: LD_STRING D3Kc1-Kurt-2
8166: PPUSH
8167: CALL_OW 88
// askSiberite = 1 ;
8171: LD_ADDR_EXP 25
8175: PUSH
8176: LD_INT 1
8178: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8179: LD_ADDR_VAR 0 4
8183: PUSH
8184: LD_STRING Q2b
8186: PPUSH
8187: LD_INT 1
8189: PUSH
8190: LD_INT 2
8192: PUSH
8193: LD_INT 3
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 98
8205: ST_TO_ADDR
// if dec2 = 1 then
8206: LD_VAR 0 4
8210: PUSH
8211: LD_INT 1
8213: EQUAL
8214: IFFALSE 8248
// begin Say ( JMM , D4a-JMM-1 ) ;
8216: LD_EXP 1
8220: PPUSH
8221: LD_STRING D4a-JMM-1
8223: PPUSH
8224: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8228: LD_EXP 17
8232: PPUSH
8233: LD_STRING D4b-Kurt-1
8235: PPUSH
8236: CALL_OW 88
// warWithLegion = 1 ;
8240: LD_ADDR_EXP 23
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// end ; if dec2 = 2 then
8248: LD_VAR 0 4
8252: PUSH
8253: LD_INT 2
8255: EQUAL
8256: IFFALSE 8290
// begin Say ( JMM , D4b-JMM-1 ) ;
8258: LD_EXP 1
8262: PPUSH
8263: LD_STRING D4b-JMM-1
8265: PPUSH
8266: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8270: LD_EXP 17
8274: PPUSH
8275: LD_STRING D4b-Kurt-1
8277: PPUSH
8278: CALL_OW 88
// warWithLegion = 1 ;
8282: LD_ADDR_EXP 23
8286: PUSH
8287: LD_INT 1
8289: ST_TO_ADDR
// end ; if dec2 = 3 then
8290: LD_VAR 0 4
8294: PUSH
8295: LD_INT 3
8297: EQUAL
8298: IFFALSE 8356
// begin Say ( JMM , D4c-JMM-1 ) ;
8300: LD_EXP 1
8304: PPUSH
8305: LD_STRING D4c-JMM-1
8307: PPUSH
8308: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8312: LD_EXP 17
8316: PPUSH
8317: LD_STRING D4c-Kurt-1
8319: PPUSH
8320: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8324: LD_EXP 1
8328: PPUSH
8329: LD_STRING D4c-JMM-2
8331: PPUSH
8332: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8336: LD_EXP 17
8340: PPUSH
8341: LD_STRING D4c-Kurt-2
8343: PPUSH
8344: CALL_OW 88
// fakeInfo = 1 ;
8348: LD_ADDR_EXP 24
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 4
8363: EQUAL
8364: IFFALSE 9426
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8366: LD_EXP 1
8370: PPUSH
8371: LD_STRING D3Kd-JMM-1
8373: PPUSH
8374: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8378: LD_VAR 0 8
8382: PUSH
8383: LD_INT 200
8385: PUSH
8386: LD_INT 120
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_EXP 19
8397: PUSH
8398: LD_INT 1
8400: PLUS
8401: ARRAY
8402: GREATEREQUAL
8403: PUSH
8404: LD_VAR 0 10
8408: PUSH
8409: LD_INT 200
8411: PUSH
8412: LD_INT 120
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_EXP 19
8423: PUSH
8424: LD_INT 1
8426: PLUS
8427: ARRAY
8428: GREATEREQUAL
8429: AND
8430: IFFALSE 8482
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8432: LD_ADDR_VAR 0 4
8436: PUSH
8437: LD_STRING Q2a
8439: PUSH
8440: LD_STRING Q2aK
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: LD_EXP 19
8451: PUSH
8452: LD_INT 1
8454: PLUS
8455: ARRAY
8456: PPUSH
8457: LD_INT 1
8459: PUSH
8460: LD_INT 2
8462: PUSH
8463: LD_INT 3
8465: PUSH
8466: LD_INT 4
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: PPUSH
8475: CALL_OW 98
8479: ST_TO_ADDR
8480: GO 8646
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8482: LD_VAR 0 8
8486: PUSH
8487: LD_INT 120
8489: PUSH
8490: LD_INT 60
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: LD_EXP 19
8501: PUSH
8502: LD_INT 1
8504: PLUS
8505: ARRAY
8506: GREATEREQUAL
8507: PUSH
8508: LD_VAR 0 10
8512: PUSH
8513: LD_INT 120
8515: PUSH
8516: LD_INT 60
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_EXP 19
8527: PUSH
8528: LD_INT 1
8530: PLUS
8531: ARRAY
8532: GREATEREQUAL
8533: AND
8534: IFFALSE 8582
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8536: LD_ADDR_VAR 0 4
8540: PUSH
8541: LD_STRING Q2a
8543: PUSH
8544: LD_STRING Q2aK
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_EXP 19
8555: PUSH
8556: LD_INT 1
8558: PLUS
8559: ARRAY
8560: PPUSH
8561: LD_INT 1
8563: PUSH
8564: LD_INT 2
8566: PUSH
8567: LD_INT 4
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: PPUSH
8575: CALL_OW 98
8579: ST_TO_ADDR
8580: GO 8646
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8582: LD_STRING Q2d
8584: PUSH
8585: LD_STRING Q2dK
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: LD_EXP 19
8596: PUSH
8597: LD_INT 1
8599: PLUS
8600: ARRAY
8601: PPUSH
8602: CALL_OW 97
// dec2 := 0 ;
8606: LD_ADDR_VAR 0 4
8610: PUSH
8611: LD_INT 0
8613: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8614: LD_EXP 1
8618: PPUSH
8619: LD_STRING D3Kc1-JMM-1
8621: PPUSH
8622: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_STRING D3Kc2-Kurt-1
8633: PPUSH
8634: CALL_OW 88
// warWithLegion := 1 ;
8638: LD_ADDR_EXP 23
8642: PUSH
8643: LD_INT 1
8645: ST_TO_ADDR
// end ; if dec2 = 1 then
8646: LD_VAR 0 4
8650: PUSH
8651: LD_INT 1
8653: EQUAL
8654: IFFALSE 8688
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8656: LD_EXP 1
8660: PPUSH
8661: LD_STRING D5Ka-JMM-1
8663: PPUSH
8664: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8668: LD_EXP 17
8672: PPUSH
8673: LD_STRING D5Ka-Kurt-1
8675: PPUSH
8676: CALL_OW 88
// warWithLegion = 1 ;
8680: LD_ADDR_EXP 23
8684: PUSH
8685: LD_INT 1
8687: ST_TO_ADDR
// end ; if dec2 = 2 then
8688: LD_VAR 0 4
8692: PUSH
8693: LD_INT 2
8695: EQUAL
8696: IFFALSE 8780
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8698: LD_EXP 1
8702: PPUSH
8703: LD_STRING D3Kb-JMM-1
8705: PPUSH
8706: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8710: LD_EXP 17
8714: PPUSH
8715: LD_STRING D3Kb-Kurt-1
8717: PPUSH
8718: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8722: LD_ADDR_VAR 0 11
8726: PUSH
8727: LD_INT 120
8729: PUSH
8730: LD_INT 60
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: LD_EXP 19
8741: PUSH
8742: LD_INT 1
8744: PLUS
8745: ARRAY
8746: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8747: LD_ADDR_VAR 0 12
8751: PUSH
8752: LD_INT 120
8754: PUSH
8755: LD_INT 60
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_EXP 19
8766: PUSH
8767: LD_INT 1
8769: PLUS
8770: ARRAY
8771: ST_TO_ADDR
// payForNeutral := true ;
8772: LD_ADDR_VAR 0 13
8776: PUSH
8777: LD_INT 1
8779: ST_TO_ADDR
// end ; if dec2 = 3 then
8780: LD_VAR 0 4
8784: PUSH
8785: LD_INT 3
8787: EQUAL
8788: IFFALSE 8872
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8790: LD_EXP 1
8794: PPUSH
8795: LD_STRING D3Ke-JMM-1
8797: PPUSH
8798: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8802: LD_EXP 17
8806: PPUSH
8807: LD_STRING D3Ke-Kurt-1
8809: PPUSH
8810: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8814: LD_ADDR_VAR 0 11
8818: PUSH
8819: LD_INT 200
8821: PUSH
8822: LD_INT 120
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_EXP 19
8833: PUSH
8834: LD_INT 1
8836: PLUS
8837: ARRAY
8838: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8839: LD_ADDR_VAR 0 12
8843: PUSH
8844: LD_INT 200
8846: PUSH
8847: LD_INT 120
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: LD_EXP 19
8858: PUSH
8859: LD_INT 1
8861: PLUS
8862: ARRAY
8863: ST_TO_ADDR
// payForHelp := true ;
8864: LD_ADDR_VAR 0 14
8868: PUSH
8869: LD_INT 1
8871: ST_TO_ADDR
// end ; if dec2 = 4 then
8872: LD_VAR 0 4
8876: PUSH
8877: LD_INT 4
8879: EQUAL
8880: IFFALSE 9115
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8882: LD_EXP 1
8886: PPUSH
8887: LD_STRING D3Kc1-JMM-1
8889: PPUSH
8890: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8894: LD_EXP 17
8898: PPUSH
8899: LD_STRING D3Kc1-Kurt-1
8901: PPUSH
8902: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8906: LD_EXP 1
8910: PPUSH
8911: LD_STRING D3Kc1-JMM-2
8913: PPUSH
8914: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8918: LD_EXP 17
8922: PPUSH
8923: LD_STRING D3Kc1-Kurt-2
8925: PPUSH
8926: CALL_OW 88
// askSiberite = 1 ;
8930: LD_ADDR_EXP 25
8934: PUSH
8935: LD_INT 1
8937: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8938: LD_ADDR_VAR 0 4
8942: PUSH
8943: LD_STRING Q2b
8945: PPUSH
8946: LD_INT 1
8948: PUSH
8949: LD_INT 2
8951: PUSH
8952: LD_INT 3
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PPUSH
8960: CALL_OW 98
8964: ST_TO_ADDR
// if dec2 = 1 then
8965: LD_VAR 0 4
8969: PUSH
8970: LD_INT 1
8972: EQUAL
8973: IFFALSE 9007
// begin Say ( JMM , D4a-JMM-1 ) ;
8975: LD_EXP 1
8979: PPUSH
8980: LD_STRING D4a-JMM-1
8982: PPUSH
8983: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8987: LD_EXP 17
8991: PPUSH
8992: LD_STRING D4b-Kurt-1
8994: PPUSH
8995: CALL_OW 88
// warWithLegion = 1 ;
8999: LD_ADDR_EXP 23
9003: PUSH
9004: LD_INT 1
9006: ST_TO_ADDR
// end ; if dec2 = 2 then
9007: LD_VAR 0 4
9011: PUSH
9012: LD_INT 2
9014: EQUAL
9015: IFFALSE 9049
// begin Say ( JMM , D4b-JMM-1 ) ;
9017: LD_EXP 1
9021: PPUSH
9022: LD_STRING D4b-JMM-1
9024: PPUSH
9025: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
9029: LD_EXP 17
9033: PPUSH
9034: LD_STRING D4b-Kurt-1
9036: PPUSH
9037: CALL_OW 88
// warWithLegion = 1 ;
9041: LD_ADDR_EXP 23
9045: PUSH
9046: LD_INT 1
9048: ST_TO_ADDR
// end ; if dec2 = 3 then
9049: LD_VAR 0 4
9053: PUSH
9054: LD_INT 3
9056: EQUAL
9057: IFFALSE 9115
// begin Say ( JMM , D4c-JMM-1 ) ;
9059: LD_EXP 1
9063: PPUSH
9064: LD_STRING D4c-JMM-1
9066: PPUSH
9067: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
9071: LD_EXP 17
9075: PPUSH
9076: LD_STRING D4c-Kurt-1
9078: PPUSH
9079: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9083: LD_EXP 1
9087: PPUSH
9088: LD_STRING D4c-JMM-2
9090: PPUSH
9091: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
9095: LD_EXP 17
9099: PPUSH
9100: LD_STRING D4c-Kurt-2
9102: PPUSH
9103: CALL_OW 88
// fakeInfo = 1 ;
9107: LD_ADDR_EXP 24
9111: PUSH
9112: LD_INT 1
9114: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
9115: LD_VAR 0 13
9119: PUSH
9120: LD_VAR 0 14
9124: OR
9125: IFFALSE 9426
// begin for i in tmp do
9127: LD_ADDR_VAR 0 2
9131: PUSH
9132: LD_VAR 0 5
9136: PUSH
9137: FOR_IN
9138: IFFALSE 9424
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
9140: LD_ADDR_VAR 0 6
9144: PUSH
9145: LD_VAR 0 2
9149: PPUSH
9150: CALL_OW 274
9154: PPUSH
9155: LD_INT 1
9157: PPUSH
9158: CALL_OW 275
9162: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
9163: LD_ADDR_VAR 0 7
9167: PUSH
9168: LD_VAR 0 2
9172: PPUSH
9173: CALL_OW 274
9177: PPUSH
9178: LD_INT 3
9180: PPUSH
9181: CALL_OW 275
9185: ST_TO_ADDR
// if cr then
9186: LD_VAR 0 11
9190: IFFALSE 9304
// begin if tmp2 and tmp2 < cr then
9192: LD_VAR 0 6
9196: PUSH
9197: LD_VAR 0 6
9201: PUSH
9202: LD_VAR 0 11
9206: LESS
9207: AND
9208: IFFALSE 9256
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
9210: LD_VAR 0 2
9214: PPUSH
9215: CALL_OW 274
9219: PPUSH
9220: LD_INT 1
9222: PPUSH
9223: LD_VAR 0 11
9227: PUSH
9228: LD_VAR 0 6
9232: MINUS
9233: PPUSH
9234: CALL_OW 277
// cr := cr - tmp2 ;
9238: LD_ADDR_VAR 0 11
9242: PUSH
9243: LD_VAR 0 11
9247: PUSH
9248: LD_VAR 0 6
9252: MINUS
9253: ST_TO_ADDR
// end else
9254: GO 9304
// if tmp2 > cr then
9256: LD_VAR 0 6
9260: PUSH
9261: LD_VAR 0 11
9265: GREATER
9266: IFFALSE 9304
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9268: LD_VAR 0 2
9272: PPUSH
9273: CALL_OW 274
9277: PPUSH
9278: LD_INT 1
9280: PPUSH
9281: LD_VAR 0 6
9285: PUSH
9286: LD_VAR 0 11
9290: MINUS
9291: PPUSH
9292: CALL_OW 277
// cr := 0 ;
9296: LD_ADDR_VAR 0 11
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// end ; end ; if sb then
9304: LD_VAR 0 12
9308: IFFALSE 9422
// begin if tmp3 and tmp3 < sb then
9310: LD_VAR 0 7
9314: PUSH
9315: LD_VAR 0 7
9319: PUSH
9320: LD_VAR 0 12
9324: LESS
9325: AND
9326: IFFALSE 9374
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9328: LD_VAR 0 2
9332: PPUSH
9333: CALL_OW 274
9337: PPUSH
9338: LD_INT 3
9340: PPUSH
9341: LD_VAR 0 12
9345: PUSH
9346: LD_VAR 0 7
9350: MINUS
9351: PPUSH
9352: CALL_OW 277
// sb := sb - tmp3 ;
9356: LD_ADDR_VAR 0 12
9360: PUSH
9361: LD_VAR 0 12
9365: PUSH
9366: LD_VAR 0 7
9370: MINUS
9371: ST_TO_ADDR
// end else
9372: GO 9422
// if tmp3 > sb then
9374: LD_VAR 0 7
9378: PUSH
9379: LD_VAR 0 12
9383: GREATER
9384: IFFALSE 9422
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9386: LD_VAR 0 2
9390: PPUSH
9391: CALL_OW 274
9395: PPUSH
9396: LD_INT 3
9398: PPUSH
9399: LD_VAR 0 7
9403: PUSH
9404: LD_VAR 0 12
9408: MINUS
9409: PPUSH
9410: CALL_OW 277
// sb := 0 ;
9414: LD_ADDR_VAR 0 12
9418: PUSH
9419: LD_INT 0
9421: ST_TO_ADDR
// end ; end ; end ;
9422: GO 9137
9424: POP
9425: POP
// end ; end ; DialogueOff ;
9426: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9430: LD_INT 167
9432: PPUSH
9433: LD_INT 121
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9443: LD_EXP 17
9447: PPUSH
9448: LD_EXP 18
9452: PPUSH
9453: CALL_OW 120
// wait ( 0 0$1 ) ;
9457: LD_INT 35
9459: PPUSH
9460: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9464: LD_EXP 18
9468: PPUSH
9469: LD_INT 4
9471: PPUSH
9472: CALL_OW 113
// wait ( 0 0$3 ) ;
9476: LD_INT 105
9478: PPUSH
9479: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9483: LD_EXP 17
9487: PPUSH
9488: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9492: LD_EXP 18
9496: PPUSH
9497: CALL_OW 64
// wait ( 0 0$3 ) ;
9501: LD_INT 105
9503: PPUSH
9504: CALL_OW 67
// if payForHelp then
9508: LD_VAR 0 14
9512: IFFALSE 9570
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9514: LD_INT 36
9516: PPUSH
9517: LD_INT 57
9519: PPUSH
9520: LD_INT 1
9522: PPUSH
9523: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9527: LD_INT 51
9529: PPUSH
9530: LD_INT 63
9532: PPUSH
9533: LD_INT 1
9535: PPUSH
9536: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9540: LD_INT 93
9542: PPUSH
9543: LD_INT 65
9545: PPUSH
9546: LD_INT 1
9548: PPUSH
9549: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9553: LD_INT 42
9555: PPUSH
9556: LD_INT 12
9558: PPUSH
9559: LD_INT 1
9561: PPUSH
9562: CALL_OW 244
// PrepareLegionForPlayer ;
9566: CALL 5170 0 0
// end ; end ;
9570: LD_VAR 0 1
9574: RET
// every 0 0$10 trigger warWithLegion = 1 do
9575: LD_EXP 23
9579: PUSH
9580: LD_INT 1
9582: EQUAL
9583: IFFALSE 9599
9585: GO 9587
9587: DISABLE
// begin wait ( 0 0$30 ) ;
9588: LD_INT 1050
9590: PPUSH
9591: CALL_OW 67
// PrepareAttackLegion ;
9595: CALL 5811 0 0
// end ;
9599: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9600: LD_INT 120
9602: PUSH
9603: LD_INT 17
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 52
9612: PUSH
9613: EMPTY
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PPUSH
9620: CALL_OW 69
9624: IFFALSE 9769
9626: GO 9628
9628: DISABLE
9629: LD_INT 0
9631: PPUSH
// begin enable ;
9632: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9633: LD_ADDR_VAR 0 1
9637: PUSH
9638: LD_INT 120
9640: PUSH
9641: LD_INT 17
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 52
9650: PUSH
9651: EMPTY
9652: LIST
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PPUSH
9658: CALL_OW 69
9662: PUSH
9663: FOR_IN
9664: IFFALSE 9767
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9666: LD_VAR 0 1
9670: PPUSH
9671: CALL 81395 0 1
9675: PUSH
9676: LD_INT 4
9678: ARRAY
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: PUSH
9684: LD_VAR 0 1
9688: PPUSH
9689: CALL_OW 255
9693: PUSH
9694: LD_INT 1
9696: EQUAL
9697: AND
9698: IFFALSE 9712
// SetSide ( i , 4 ) ;
9700: LD_VAR 0 1
9704: PPUSH
9705: LD_INT 4
9707: PPUSH
9708: CALL_OW 235
// if GetSide ( i ) = 4 then
9712: LD_VAR 0 1
9716: PPUSH
9717: CALL_OW 255
9721: PUSH
9722: LD_INT 4
9724: EQUAL
9725: IFFALSE 9765
// if not IsInArea ( i , PlayerSpawn ) then
9727: LD_VAR 0 1
9731: PPUSH
9732: LD_INT 4
9734: PPUSH
9735: CALL_OW 308
9739: NOT
9740: IFFALSE 9756
// ComMoveToArea ( i , PlayerSpawn ) else
9742: LD_VAR 0 1
9746: PPUSH
9747: LD_INT 4
9749: PPUSH
9750: CALL_OW 113
9754: GO 9765
// RemoveUnit ( i ) ;
9756: LD_VAR 0 1
9760: PPUSH
9761: CALL_OW 64
// end ;
9765: GO 9663
9767: POP
9768: POP
// end ;
9769: PPOPN 1
9771: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
9772: LD_EXP 20
9776: PUSH
9777: LD_INT 1
9779: EQUAL
9780: PUSH
9781: LD_INT 12
9783: PPUSH
9784: LD_INT 22
9786: PUSH
9787: LD_INT 3
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 101
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 21
9806: PUSH
9807: LD_INT 2
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 70
9823: AND
9824: IFFALSE 10373
9826: GO 9828
9828: DISABLE
9829: LD_INT 0
9831: PPUSH
9832: PPUSH
9833: PPUSH
// begin DialogueOn ;
9834: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9838: LD_VAR 0 1
9842: PPUSH
9843: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 26
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 2
9869: PUSH
9870: LD_INT 25
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 25
9882: PUSH
9883: LD_INT 2
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 25
9892: PUSH
9893: LD_INT 3
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 25
9902: PUSH
9903: LD_INT 4
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 25
9912: PUSH
9913: LD_INT 5
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 25
9922: PUSH
9923: LD_INT 8
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: LIST
9943: PPUSH
9944: CALL_OW 69
9948: PPUSH
9949: LD_STRING DT1-Sol1-1
9951: PPUSH
9952: LD_STRING DT1-FSol1-1
9954: PPUSH
9955: CALL 12642 0 3
// dec := ShowQuery2 ;
9959: LD_ADDR_VAR 0 3
9963: PUSH
9964: CALL 13126 0 0
9968: ST_TO_ADDR
// if dec = 1 then
9969: LD_VAR 0 3
9973: PUSH
9974: LD_INT 1
9976: EQUAL
9977: IFFALSE 10083
// begin Say ( JMM , D2-JMM-1 ) ;
9979: LD_EXP 1
9983: PPUSH
9984: LD_STRING D2-JMM-1
9986: PPUSH
9987: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9991: LD_EXP 15
9995: PPUSH
9996: LD_STRING D2-Pow-1
9998: PPUSH
9999: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10003: LD_EXP 1
10007: PPUSH
10008: LD_STRING D2a-JMM-1
10010: PPUSH
10011: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10015: LD_EXP 15
10019: PPUSH
10020: LD_STRING D2a-Pow-1
10022: PPUSH
10023: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10027: LD_EXP 1
10031: PPUSH
10032: LD_STRING D2a-JMM-2
10034: PPUSH
10035: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10039: LD_EXP 15
10043: PPUSH
10044: LD_STRING D2a-Pow-2
10046: PPUSH
10047: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10051: LD_EXP 1
10055: PPUSH
10056: LD_STRING D2a-JMM-3
10058: PPUSH
10059: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10063: LD_EXP 15
10067: PPUSH
10068: LD_STRING D2a-Pow-3
10070: PPUSH
10071: CALL_OW 94
// secondPass := 2 ;
10075: LD_ADDR_EXP 20
10079: PUSH
10080: LD_INT 2
10082: ST_TO_ADDR
// end ; if dec = 2 then
10083: LD_VAR 0 3
10087: PUSH
10088: LD_INT 2
10090: EQUAL
10091: IFFALSE 10185
// begin Say ( JMM , D2-JMM-1 ) ;
10093: LD_EXP 1
10097: PPUSH
10098: LD_STRING D2-JMM-1
10100: PPUSH
10101: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10105: LD_EXP 15
10109: PPUSH
10110: LD_STRING D2-Pow-1
10112: PPUSH
10113: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10117: LD_EXP 1
10121: PPUSH
10122: LD_STRING D2b-JMM-1
10124: PPUSH
10125: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10129: LD_EXP 15
10133: PPUSH
10134: LD_STRING D2b-Pow-1
10136: PPUSH
10137: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10141: LD_EXP 1
10145: PPUSH
10146: LD_STRING D2c-JMM-1
10148: PPUSH
10149: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10153: LD_EXP 15
10157: PPUSH
10158: LD_STRING D2c-Pow-1
10160: PPUSH
10161: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10165: LD_EXP 1
10169: PPUSH
10170: LD_STRING D2c-JMM-2
10172: PPUSH
10173: CALL_OW 88
// secondPass := 2 ;
10177: LD_ADDR_EXP 20
10181: PUSH
10182: LD_INT 2
10184: ST_TO_ADDR
// end ; DialogueOff ;
10185: CALL_OW 7
// if secondPass = 2 then
10189: LD_EXP 20
10193: PUSH
10194: LD_INT 2
10196: EQUAL
10197: IFFALSE 10201
// exit ;
10199: GO 10373
// Query ( HelpRequest ) ;
10201: LD_STRING HelpRequest
10203: PPUSH
10204: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
10208: LD_INT 27
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
10218: LD_INT 35
10220: PPUSH
10221: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
10225: LD_EXP 1
10229: PPUSH
10230: LD_INT 27
10232: PPUSH
10233: CALL_OW 308
10237: IFFALSE 10218
// SetAreaMapShow ( helpRequestArea , 0 ) ;
10239: LD_INT 27
10241: PPUSH
10242: LD_INT 0
10244: PPUSH
10245: CALL_OW 424
// DialogueOn ;
10249: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
10253: LD_EXP 1
10257: PPUSH
10258: LD_STRING D2-JMM-1
10260: PPUSH
10261: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10265: LD_EXP 15
10269: PPUSH
10270: LD_STRING D2-Pow-1
10272: PPUSH
10273: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10277: LD_EXP 1
10281: PPUSH
10282: LD_STRING D2b-JMM-1
10284: PPUSH
10285: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10289: LD_EXP 15
10293: PPUSH
10294: LD_STRING D2a-Pow-2
10296: PPUSH
10297: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10301: LD_EXP 1
10305: PPUSH
10306: LD_STRING D2a-JMM-3
10308: PPUSH
10309: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10313: LD_EXP 15
10317: PPUSH
10318: LD_STRING D2a-Pow-3
10320: PPUSH
10321: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10325: LD_EXP 1
10329: PPUSH
10330: LD_STRING D2c-JMM-1
10332: PPUSH
10333: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10337: LD_EXP 15
10341: PPUSH
10342: LD_STRING D2c-Pow-1
10344: PPUSH
10345: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10349: LD_EXP 1
10353: PPUSH
10354: LD_STRING D2c-JMM-2
10356: PPUSH
10357: CALL_OW 88
// DialogueOff ;
10361: CALL_OW 7
// secondPass := 2 ;
10365: LD_ADDR_EXP 20
10369: PUSH
10370: LD_INT 2
10372: ST_TO_ADDR
// end ;
10373: PPOPN 3
10375: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10376: LD_EXP 21
10380: PUSH
10381: LD_INT 1
10383: EQUAL
10384: PUSH
10385: LD_INT 11
10387: PPUSH
10388: LD_INT 22
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PPUSH
10398: CALL_OW 70
10402: AND
10403: IFFALSE 10884
10405: GO 10407
10407: DISABLE
10408: LD_INT 0
10410: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10411: LD_ADDR_VAR 0 1
10415: PUSH
10416: LD_INT 11
10418: PPUSH
10419: LD_INT 22
10421: PUSH
10422: LD_INT 3
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PPUSH
10429: CALL_OW 70
10433: ST_TO_ADDR
// if not vehicles then
10434: LD_VAR 0 1
10438: NOT
10439: IFFALSE 10443
// exit ;
10441: GO 10884
// repeat wait ( 0 0$1 ) ;
10443: LD_INT 35
10445: PPUSH
10446: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_INT 101
10457: PUSH
10458: LD_INT 1
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 72
10469: IFFALSE 10443
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10471: LD_VAR 0 1
10475: PPUSH
10476: LD_INT 101
10478: PUSH
10479: LD_INT 1
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: CALL_OW 72
10490: PUSH
10491: LD_INT 1
10493: ARRAY
10494: PPUSH
10495: CALL_OW 87
// DialogueOn ;
10499: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10503: LD_INT 22
10505: PUSH
10506: LD_INT 1
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 26
10515: PUSH
10516: LD_INT 1
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 23
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 2
10535: PUSH
10536: LD_INT 25
10538: PUSH
10539: LD_INT 1
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 25
10548: PUSH
10549: LD_INT 2
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 25
10558: PUSH
10559: LD_INT 3
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 25
10568: PUSH
10569: LD_INT 4
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: LD_INT 25
10578: PUSH
10579: LD_INT 5
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 25
10588: PUSH
10589: LD_INT 8
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: PPUSH
10611: CALL_OW 69
10615: PPUSH
10616: LD_STRING DT1-Sol1-1
10618: PPUSH
10619: LD_STRING DT1-FSol1-1
10621: PPUSH
10622: CALL 12642 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10626: LD_EXP 1
10630: PPUSH
10631: LD_STRING DT1-JMM-1
10633: PPUSH
10634: CALL_OW 88
// DialogueOff ;
10638: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10642: LD_INT 175
10644: PPUSH
10645: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10649: LD_INT 11
10651: PPUSH
10652: LD_INT 22
10654: PUSH
10655: LD_INT 3
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 50
10664: PUSH
10665: EMPTY
10666: LIST
10667: PUSH
10668: LD_INT 2
10670: PUSH
10671: LD_INT 21
10673: PUSH
10674: LD_INT 2
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 21
10683: PUSH
10684: LD_INT 1
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: PPUSH
10701: CALL_OW 70
10705: PUSH
10706: LD_INT 0
10708: EQUAL
10709: PUSH
10710: LD_EXP 22
10714: PUSH
10715: LD_INT 2
10717: GREATER
10718: AND
10719: IFFALSE 10642
// DialogueOn ;
10721: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10725: LD_EXP 1
10729: PPUSH
10730: LD_STRING DT1a-JMM-1
10732: PPUSH
10733: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10737: LD_INT 22
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 26
10749: PUSH
10750: LD_INT 1
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 23
10759: PUSH
10760: LD_INT 1
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: LD_INT 25
10772: PUSH
10773: LD_INT 1
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 25
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 25
10792: PUSH
10793: LD_INT 3
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 25
10802: PUSH
10803: LD_INT 4
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 25
10812: PUSH
10813: LD_INT 5
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 25
10822: PUSH
10823: LD_INT 8
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: PPUSH
10850: LD_STRING DT1a-Sol1-1
10852: PPUSH
10853: LD_STRING DT1a-FSol1-1
10855: PPUSH
10856: CALL 12642 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10860: LD_EXP 1
10864: PPUSH
10865: LD_STRING DT1a-JMM-2
10867: PPUSH
10868: CALL_OW 88
// DialogueOff ;
10872: CALL_OW 7
// vehicleTeleported := 2 ;
10876: LD_ADDR_EXP 21
10880: PUSH
10881: LD_INT 2
10883: ST_TO_ADDR
// end ;
10884: PPOPN 1
10886: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10887: LD_EXP 21
10891: PUSH
10892: LD_INT 3
10894: EQUAL
10895: PUSH
10896: LD_INT 11
10898: PPUSH
10899: LD_INT 22
10901: PUSH
10902: LD_INT 3
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 101
10911: PUSH
10912: LD_INT 1
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PPUSH
10923: CALL_OW 70
10927: AND
10928: IFFALSE 11213
10930: GO 10932
10932: DISABLE
10933: LD_INT 0
10935: PPUSH
10936: PPUSH
10937: PPUSH
// begin wait ( 0 0$0.3 ) ;
10938: LD_INT 10
10940: PPUSH
10941: CALL_OW 67
// DialogueOn ;
10945: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10949: LD_ADDR_VAR 0 3
10953: PUSH
10954: LD_INT 22
10956: PUSH
10957: LD_INT 1
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 23
10966: PUSH
10967: LD_INT 1
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 26
10976: PUSH
10977: LD_INT 1
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 2
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 1
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 25
10999: PUSH
11000: LD_INT 2
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 25
11009: PUSH
11010: LD_INT 3
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 25
11019: PUSH
11020: LD_INT 4
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 25
11029: PUSH
11030: LD_INT 5
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 25
11039: PUSH
11040: LD_INT 8
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: PPUSH
11062: CALL_OW 69
11066: PPUSH
11067: LD_STRING DT2-Sol1-1
11069: PPUSH
11070: LD_STRING DT2-FSol1-1
11072: PPUSH
11073: CALL 12642 0 3
11077: ST_TO_ADDR
// DialogueOff ;
11078: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
11082: LD_INT 175
11084: PPUSH
11085: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11089: LD_INT 11
11091: PPUSH
11092: LD_INT 22
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 50
11104: PUSH
11105: EMPTY
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PPUSH
11112: CALL_OW 70
11116: NOT
11117: IFFALSE 11082
// wait ( 0 0$2 ) ;
11119: LD_INT 70
11121: PPUSH
11122: CALL_OW 67
// vehicleTeleported := 4 ;
11126: LD_ADDR_EXP 21
11130: PUSH
11131: LD_INT 4
11133: ST_TO_ADDR
// DialogueOn ;
11134: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11138: LD_EXP 1
11142: PPUSH
11143: LD_STRING DT2a-JMM-1
11145: PPUSH
11146: CALL_OW 88
// if speaker then
11150: LD_VAR 0 3
11154: IFFALSE 11197
// if GetSex ( speaker ) = 1 then
11156: LD_VAR 0 3
11160: PPUSH
11161: CALL_OW 258
11165: PUSH
11166: LD_INT 1
11168: EQUAL
11169: IFFALSE 11185
// Say ( speaker , DT2a-Sol1-1 ) else
11171: LD_VAR 0 3
11175: PPUSH
11176: LD_STRING DT2a-Sol1-1
11178: PPUSH
11179: CALL_OW 88
11183: GO 11197
// Say ( speaker , DT2a-FSol1-1 ) ;
11185: LD_VAR 0 3
11189: PPUSH
11190: LD_STRING DT2a-FSol1-1
11192: PPUSH
11193: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11197: LD_EXP 3
11201: PPUSH
11202: LD_STRING DT2a-Don-1
11204: PPUSH
11205: CALL_OW 88
// DialogueOff ;
11209: CALL_OW 7
// end ;
11213: PPOPN 3
11215: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11216: LD_INT 1
11218: PPUSH
11219: LD_INT 45
11221: PPUSH
11222: LD_INT 74
11224: PPUSH
11225: CALL_OW 293
11229: IFFALSE 11404
11231: GO 11233
11233: DISABLE
// begin DialogueOn ;
11234: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11238: LD_INT 36
11240: PPUSH
11241: LD_INT 55
11243: PPUSH
11244: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11248: LD_INT 22
11250: PUSH
11251: LD_INT 1
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 23
11260: PUSH
11261: LD_INT 1
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 26
11270: PUSH
11271: LD_INT 1
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 2
11280: PUSH
11281: LD_INT 25
11283: PUSH
11284: LD_INT 1
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 25
11293: PUSH
11294: LD_INT 2
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 25
11303: PUSH
11304: LD_INT 3
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 25
11313: PUSH
11314: LD_INT 4
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 25
11323: PUSH
11324: LD_INT 5
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 25
11333: PUSH
11334: LD_INT 8
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: PPUSH
11356: CALL_OW 69
11360: PPUSH
11361: LD_STRING D5-Sol1-1
11363: PPUSH
11364: LD_STRING D5-FSol1-
11366: PPUSH
11367: CALL 12642 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11371: LD_EXP 23
11375: PUSH
11376: LD_EXP 3
11380: PPUSH
11381: CALL_OW 302
11385: AND
11386: IFFALSE 11400
// Say ( Donaldson , D5-Don-1 ) ;
11388: LD_EXP 3
11392: PPUSH
11393: LD_STRING D5-Don-1
11395: PPUSH
11396: CALL_OW 88
// DialogueOff ;
11400: CALL_OW 7
// end ;
11404: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11405: LD_INT 1
11407: PPUSH
11408: LD_INT 10
11410: PPUSH
11411: CALL_OW 292
11415: PUSH
11416: LD_INT 1
11418: PPUSH
11419: LD_INT 137
11421: PPUSH
11422: CALL_OW 292
11426: OR
11427: IFFALSE 11582
11429: GO 11431
11431: DISABLE
// begin DialogueOn ;
11432: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11436: LD_INT 22
11438: PUSH
11439: LD_INT 1
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 23
11448: PUSH
11449: LD_INT 1
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 26
11458: PUSH
11459: LD_INT 1
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 2
11468: PUSH
11469: LD_INT 25
11471: PUSH
11472: LD_INT 1
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 25
11481: PUSH
11482: LD_INT 2
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 25
11491: PUSH
11492: LD_INT 3
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 25
11501: PUSH
11502: LD_INT 4
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 25
11511: PUSH
11512: LD_INT 5
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 25
11521: PUSH
11522: LD_INT 8
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: PPUSH
11544: CALL_OW 69
11548: PPUSH
11549: LD_STRING DT3-Sol1-1
11551: PPUSH
11552: LD_STRING DT3-FSol1-1
11554: PPUSH
11555: CALL 12642 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11559: LD_EXP 1
11563: PPUSH
11564: LD_STRING DT3-JMM-1
11566: PPUSH
11567: CALL_OW 88
// DialogueOff ;
11571: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11575: LD_STRING M2
11577: PPUSH
11578: CALL_OW 337
// end ;
11582: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) or GetLives ( rutp ) < 900 do
11583: LD_EXP 35
11587: PUSH
11588: LD_INT 0
11590: EQUAL
11591: PUSH
11592: LD_INT 10
11594: PPUSH
11595: LD_INT 22
11597: PUSH
11598: LD_INT 1
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PPUSH
11605: CALL_OW 70
11609: PUSH
11610: LD_INT 10
11612: PPUSH
11613: LD_INT 22
11615: PUSH
11616: LD_INT 3
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 3
11625: PUSH
11626: LD_INT 24
11628: PUSH
11629: LD_INT 800
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 21
11642: PUSH
11643: LD_INT 2
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 58
11652: PUSH
11653: EMPTY
11654: LIST
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 70
11666: OR
11667: AND
11668: PUSH
11669: LD_INT 137
11671: PPUSH
11672: CALL_OW 256
11676: PUSH
11677: LD_INT 900
11679: LESS
11680: OR
11681: IFFALSE 11694
11683: GO 11685
11685: DISABLE
// ruEscape := 1 ;
11686: LD_ADDR_EXP 35
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
11694: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11695: LD_INT 3
11697: PPUSH
11698: CALL_OW 303
11702: PUSH
11703: LD_INT 4
11705: PPUSH
11706: CALL_OW 303
11710: OR
11711: PUSH
11712: LD_EXP 35
11716: PUSH
11717: LD_INT 1
11719: EQUAL
11720: OR
11721: IFFALSE 12310
11723: GO 11725
11725: DISABLE
11726: LD_INT 0
11728: PPUSH
11729: PPUSH
11730: PPUSH
// begin ruAI := 0 ;
11731: LD_ADDR_EXP 34
11735: PUSH
11736: LD_INT 0
11738: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11739: LD_EXP 27
11743: PPUSH
11744: CALL_OW 122
// wait ( 0 0$1 ) ;
11748: LD_INT 35
11750: PPUSH
11751: CALL_OW 67
// DialogueOn ;
11755: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11759: LD_INT 75
11761: PPUSH
11762: LD_INT 21
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: LD_INT 12
11770: PPUSH
11771: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11775: LD_INT 75
11777: PPUSH
11778: LD_INT 21
11780: PPUSH
11781: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11785: LD_INT 10
11787: PPUSH
11788: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11792: LD_EXP 1
11796: PPUSH
11797: LD_STRING D6-JMM-1
11799: PPUSH
11800: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11804: LD_INT 75
11806: PPUSH
11807: LD_INT 21
11809: PPUSH
11810: LD_INT 1
11812: PPUSH
11813: CALL_OW 331
// DialogueOff ;
11817: CALL_OW 7
// for i in RuScientists do
11821: LD_ADDR_VAR 0 1
11825: PUSH
11826: LD_EXP 27
11830: PUSH
11831: FOR_IN
11832: IFFALSE 11868
// begin SetSide ( i , 6 ) ;
11834: LD_VAR 0 1
11838: PPUSH
11839: LD_INT 6
11841: PPUSH
11842: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11846: LD_VAR 0 1
11850: PPUSH
11851: LD_INT 1
11853: PPUSH
11854: LD_INT 3
11856: PPUSH
11857: CALL_OW 12
11861: PPUSH
11862: CALL_OW 109
// end ;
11866: GO 11831
11868: POP
11869: POP
// repeat wait ( 0 0$1 ) ;
11870: LD_INT 35
11872: PPUSH
11873: CALL_OW 67
// for i in RuScientists do
11877: LD_ADDR_VAR 0 1
11881: PUSH
11882: LD_EXP 27
11886: PUSH
11887: FOR_IN
11888: IFFALSE 12301
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11890: LD_ADDR_VAR 0 3
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_INT 3
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 91
11907: PUSH
11908: LD_VAR 0 1
11912: PUSH
11913: LD_INT 10
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 21
11923: PUSH
11924: LD_INT 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 58
11933: PUSH
11934: EMPTY
11935: LIST
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 69
11947: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11948: LD_VAR 0 3
11952: PUSH
11953: LD_VAR 0 1
11957: PPUSH
11958: CALL_OW 310
11962: NOT
11963: AND
11964: IFFALSE 11992
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11966: LD_VAR 0 1
11970: PPUSH
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_VAR 0 1
11980: PPUSH
11981: CALL_OW 74
11985: PPUSH
11986: CALL_OW 120
// continue ;
11990: GO 11887
// end ; if IsInUnit ( i ) then
11992: LD_VAR 0 1
11996: PPUSH
11997: CALL_OW 310
12001: IFFALSE 12020
// unit := IsInUnit ( i ) else
12003: LD_ADDR_VAR 0 2
12007: PUSH
12008: LD_VAR 0 1
12012: PPUSH
12013: CALL_OW 310
12017: ST_TO_ADDR
12018: GO 12030
// unit := i ;
12020: LD_ADDR_VAR 0 2
12024: PUSH
12025: LD_VAR 0 1
12029: ST_TO_ADDR
// case GetTag ( i ) of 1 :
12030: LD_VAR 0 1
12034: PPUSH
12035: CALL_OW 110
12039: PUSH
12040: LD_INT 1
12042: DOUBLE
12043: EQUAL
12044: IFTRUE 12048
12046: GO 12107
12048: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12049: LD_VAR 0 2
12053: PPUSH
12054: LD_INT 137
12056: PPUSH
12057: CALL_OW 296
12061: PUSH
12062: LD_INT 13
12064: LESS
12065: PUSH
12066: LD_INT 137
12068: PPUSH
12069: CALL_OW 302
12073: AND
12074: IFFALSE 12090
// ComEnterUnit ( unit , rutp ) else
12076: LD_VAR 0 2
12080: PPUSH
12081: LD_INT 137
12083: PPUSH
12084: CALL_OW 120
12088: GO 12105
// ComMoveXY ( unit , 16 , 28 ) ;
12090: LD_VAR 0 2
12094: PPUSH
12095: LD_INT 16
12097: PPUSH
12098: LD_INT 28
12100: PPUSH
12101: CALL_OW 111
// end ; 2 :
12105: GO 12299
12107: LD_INT 2
12109: DOUBLE
12110: EQUAL
12111: IFTRUE 12115
12113: GO 12133
12115: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
12116: LD_VAR 0 2
12120: PPUSH
12121: LD_INT 97
12123: PPUSH
12124: LD_INT 2
12126: PPUSH
12127: CALL_OW 111
12131: GO 12299
12133: LD_INT 3
12135: DOUBLE
12136: EQUAL
12137: IFTRUE 12141
12139: GO 12200
12141: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12142: LD_VAR 0 2
12146: PPUSH
12147: LD_INT 137
12149: PPUSH
12150: CALL_OW 296
12154: PUSH
12155: LD_INT 13
12157: LESS
12158: PUSH
12159: LD_INT 137
12161: PPUSH
12162: CALL_OW 302
12166: AND
12167: IFFALSE 12183
// ComEnterUnit ( unit , rutp ) else
12169: LD_VAR 0 2
12173: PPUSH
12174: LD_INT 137
12176: PPUSH
12177: CALL_OW 120
12181: GO 12198
// ComMoveXY ( unit , 128 , 155 ) ;
12183: LD_VAR 0 2
12187: PPUSH
12188: LD_INT 128
12190: PPUSH
12191: LD_INT 155
12193: PPUSH
12194: CALL_OW 111
// end ; 11 :
12198: GO 12299
12200: LD_INT 11
12202: DOUBLE
12203: EQUAL
12204: IFTRUE 12208
12206: GO 12226
12208: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
12209: LD_VAR 0 2
12213: PPUSH
12214: LD_INT 16
12216: PPUSH
12217: LD_INT 28
12219: PPUSH
12220: CALL_OW 111
12224: GO 12299
12226: LD_INT 13
12228: DOUBLE
12229: EQUAL
12230: IFTRUE 12234
12232: GO 12272
12234: POP
// begin if IsOk ( ruteleprt ) then
12235: LD_INT 10
12237: PPUSH
12238: CALL_OW 302
12242: IFFALSE 12258
// ComEnterUnit ( unit , ruteleprt ) else
12244: LD_VAR 0 2
12248: PPUSH
12249: LD_INT 10
12251: PPUSH
12252: CALL_OW 120
12256: GO 12270
// SetTag ( unit , 23 ) ;
12258: LD_VAR 0 2
12262: PPUSH
12263: LD_INT 23
12265: PPUSH
12266: CALL_OW 109
// end ; 23 :
12270: GO 12299
12272: LD_INT 23
12274: DOUBLE
12275: EQUAL
12276: IFTRUE 12280
12278: GO 12298
12280: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
12281: LD_VAR 0 2
12285: PPUSH
12286: LD_INT 128
12288: PPUSH
12289: LD_INT 155
12291: PPUSH
12292: CALL_OW 111
12296: GO 12299
12298: POP
// end ;
12299: GO 11887
12301: POP
12302: POP
// until not RuScientists ;
12303: LD_EXP 27
12307: NOT
12308: IFFALSE 11870
// end ;
12310: PPOPN 3
12312: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
12313: LD_EXP 34
12317: PUSH
12318: LD_INT 0
12320: EQUAL
12321: PUSH
12322: LD_EXP 27
12326: AND
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 6
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 2
12340: PUSH
12341: LD_INT 95
12343: PUSH
12344: LD_INT 13
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 95
12353: PUSH
12354: LD_INT 14
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 95
12363: PUSH
12364: LD_INT 25
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PPUSH
12381: CALL_OW 69
12385: AND
12386: IFFALSE 12599
12388: GO 12390
12390: DISABLE
12391: LD_INT 0
12393: PPUSH
12394: PPUSH
12395: PPUSH
12396: PPUSH
// begin enable ;
12397: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
12398: LD_ADDR_VAR 0 1
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 6
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: LD_INT 95
12418: PUSH
12419: LD_INT 13
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 95
12428: PUSH
12429: LD_INT 14
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 95
12438: PUSH
12439: LD_INT 25
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PPUSH
12456: CALL_OW 69
12460: PUSH
12461: FOR_IN
12462: IFFALSE 12597
// begin if i in RuScientists then
12464: LD_VAR 0 1
12468: PUSH
12469: LD_EXP 27
12473: IN
12474: IFFALSE 12503
// begin RuScientists = RuScientists diff i ;
12476: LD_ADDR_EXP 27
12480: PUSH
12481: LD_EXP 27
12485: PUSH
12486: LD_VAR 0 1
12490: DIFF
12491: ST_TO_ADDR
// RemoveUnit ( i ) ;
12492: LD_VAR 0 1
12496: PPUSH
12497: CALL_OW 64
// continue ;
12501: GO 12461
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12503: LD_VAR 0 1
12507: PUSH
12508: LD_INT 22
12510: PUSH
12511: LD_INT 6
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: LD_INT 33
12520: PUSH
12521: LD_INT 1
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PPUSH
12532: CALL_OW 69
12536: IN
12537: IFFALSE 12595
// begin if IsDrivenBy ( i ) in RuScientists then
12539: LD_VAR 0 1
12543: PPUSH
12544: CALL_OW 311
12548: PUSH
12549: LD_EXP 27
12553: IN
12554: IFFALSE 12572
// RuScientists = RuScientists diff i ;
12556: LD_ADDR_EXP 27
12560: PUSH
12561: LD_EXP 27
12565: PUSH
12566: LD_VAR 0 1
12570: DIFF
12571: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12572: LD_VAR 0 1
12576: PPUSH
12577: CALL_OW 311
12581: PPUSH
12582: CALL_OW 64
// RemoveUnit ( i ) ;
12586: LD_VAR 0 1
12590: PPUSH
12591: CALL_OW 64
// end ; end ;
12595: GO 12461
12597: POP
12598: POP
// end ; end_of_file
12599: PPOPN 4
12601: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12602: LD_INT 0
12604: PPUSH
12605: PPUSH
// for i in charactersList do
12606: LD_ADDR_VAR 0 4
12610: PUSH
12611: LD_VAR 0 1
12615: PUSH
12616: FOR_IN
12617: IFFALSE 12635
// SaveCharacters ( i , ident ) ;
12619: LD_VAR 0 4
12623: PPUSH
12624: LD_VAR 0 2
12628: PPUSH
12629: CALL_OW 38
12633: GO 12616
12635: POP
12636: POP
// end ;
12637: LD_VAR 0 3
12641: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12642: LD_INT 0
12644: PPUSH
12645: PPUSH
12646: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12647: LD_ADDR_VAR 0 1
12651: PUSH
12652: LD_VAR 0 1
12656: PUSH
12657: LD_EXP 1
12661: PUSH
12662: LD_EXP 7
12666: PUSH
12667: LD_EXP 3
12671: PUSH
12672: LD_EXP 4
12676: PUSH
12677: LD_EXP 5
12681: PUSH
12682: LD_EXP 2
12686: PUSH
12687: LD_EXP 12
12691: PUSH
12692: LD_EXP 13
12696: PUSH
12697: LD_EXP 9
12701: PUSH
12702: LD_EXP 11
12706: PUSH
12707: LD_EXP 6
12711: PUSH
12712: LD_EXP 8
12716: PUSH
12717: LD_EXP 10
12721: PUSH
12722: LD_EXP 15
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: DIFF
12743: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12744: LD_ADDR_VAR 0 6
12748: PUSH
12749: LD_VAR 0 1
12753: PUSH
12754: LD_INT 1
12756: PPUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 12
12766: ARRAY
12767: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12768: LD_VAR 0 6
12772: PPUSH
12773: CALL_OW 258
12777: PUSH
12778: LD_INT 1
12780: EQUAL
12781: IFFALSE 12799
// Say ( speaker , dialogMID ) else
12783: LD_VAR 0 6
12787: PPUSH
12788: LD_VAR 0 2
12792: PPUSH
12793: CALL_OW 88
12797: GO 12813
// Say ( speaker , dialogFID ) ;
12799: LD_VAR 0 6
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: CALL_OW 88
// result := speaker ;
12813: LD_ADDR_VAR 0 4
12817: PUSH
12818: LD_VAR 0 6
12822: ST_TO_ADDR
// end ;
12823: LD_VAR 0 4
12827: RET
// export function PrepareDifficulty ; var tmp ; begin
12828: LD_INT 0
12830: PPUSH
12831: PPUSH
// if Difficulty = 1 then
12832: LD_OWVAR 67
12836: PUSH
12837: LD_INT 1
12839: EQUAL
12840: IFFALSE 12860
// begin RuSolMinLevel = 6 ;
12842: LD_ADDR_EXP 29
12846: PUSH
12847: LD_INT 6
12849: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
12850: LD_ADDR_EXP 30
12854: PUSH
12855: LD_INT 8
12857: ST_TO_ADDR
// end else
12858: GO 13100
// if Difficulty = 2 then
12860: LD_OWVAR 67
12864: PUSH
12865: LD_INT 2
12867: EQUAL
12868: IFFALSE 12964
// begin RuSolMinLevel = 7 ;
12870: LD_ADDR_EXP 29
12874: PUSH
12875: LD_INT 7
12877: ST_TO_ADDR
// RuSolMaxLevel = 9 ;
12878: LD_ADDR_EXP 30
12882: PUSH
12883: LD_INT 9
12885: ST_TO_ADDR
// uc_nation = 3 ;
12886: LD_ADDR_OWVAR 21
12890: PUSH
12891: LD_INT 3
12893: ST_TO_ADDR
// uc_side = 3 ;
12894: LD_ADDR_OWVAR 20
12898: PUSH
12899: LD_INT 3
12901: ST_TO_ADDR
// bc_level = 10 ;
12902: LD_ADDR_OWVAR 43
12906: PUSH
12907: LD_INT 10
12909: ST_TO_ADDR
// bc_type = b_turret ;
12910: LD_ADDR_OWVAR 42
12914: PUSH
12915: LD_INT 33
12917: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12918: LD_ADDR_VAR 0 2
12922: PUSH
12923: LD_INT 86
12925: PPUSH
12926: LD_INT 34
12928: PPUSH
12929: LD_INT 2
12931: PPUSH
12932: CALL_OW 47
12936: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12937: LD_VAR 0 2
12941: PPUSH
12942: LD_INT 49
12944: PPUSH
12945: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12949: LD_INT 64
12951: PPUSH
12952: LD_INT 3
12954: PPUSH
12955: LD_INT 1
12957: PPUSH
12958: CALL_OW 322
// end else
12962: GO 13100
// begin RuSolMinLevel = 8 ;
12964: LD_ADDR_EXP 29
12968: PUSH
12969: LD_INT 8
12971: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12972: LD_ADDR_EXP 30
12976: PUSH
12977: LD_INT 10
12979: ST_TO_ADDR
// uc_nation = 3 ;
12980: LD_ADDR_OWVAR 21
12984: PUSH
12985: LD_INT 3
12987: ST_TO_ADDR
// uc_side = 3 ;
12988: LD_ADDR_OWVAR 20
12992: PUSH
12993: LD_INT 3
12995: ST_TO_ADDR
// bc_level = 10 ;
12996: LD_ADDR_OWVAR 43
13000: PUSH
13001: LD_INT 10
13003: ST_TO_ADDR
// bc_type = b_turret ;
13004: LD_ADDR_OWVAR 42
13008: PUSH
13009: LD_INT 33
13011: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13012: LD_ADDR_VAR 0 2
13016: PUSH
13017: LD_INT 86
13019: PPUSH
13020: LD_INT 34
13022: PPUSH
13023: LD_INT 2
13025: PPUSH
13026: CALL_OW 47
13030: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13031: LD_VAR 0 2
13035: PPUSH
13036: LD_INT 49
13038: PPUSH
13039: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: LD_INT 93
13050: PPUSH
13051: LD_INT 31
13053: PPUSH
13054: LD_INT 2
13056: PPUSH
13057: CALL_OW 47
13061: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13062: LD_VAR 0 2
13066: PPUSH
13067: LD_INT 49
13069: PPUSH
13070: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13074: LD_INT 64
13076: PPUSH
13077: LD_INT 3
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13087: LD_INT 65
13089: PPUSH
13090: LD_INT 3
13092: PPUSH
13093: LD_INT 1
13095: PPUSH
13096: CALL_OW 322
// end ; end ;
13100: LD_VAR 0 1
13104: RET
// export function ShowQuery1 ; begin
13105: LD_INT 0
13107: PPUSH
// result := Query ( Q1 ) ;
13108: LD_ADDR_VAR 0 1
13112: PUSH
13113: LD_STRING Q1
13115: PPUSH
13116: CALL_OW 97
13120: ST_TO_ADDR
// end ;
13121: LD_VAR 0 1
13125: RET
// export function ShowQuery2 ; begin
13126: LD_INT 0
13128: PPUSH
// result := Query ( Q1a ) ;
13129: LD_ADDR_VAR 0 1
13133: PUSH
13134: LD_STRING Q1a
13136: PPUSH
13137: CALL_OW 97
13141: ST_TO_ADDR
// end ;
13142: LD_VAR 0 1
13146: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
13147: LD_INT 0
13149: PPUSH
13150: PPUSH
13151: PPUSH
13152: PPUSH
// for i = 1 to count do
13153: LD_ADDR_VAR 0 8
13157: PUSH
13158: DOUBLE
13159: LD_INT 1
13161: DEC
13162: ST_TO_ADDR
13163: LD_VAR 0 6
13167: PUSH
13168: FOR_TO
13169: IFFALSE 13250
// begin uc_side = side ;
13171: LD_ADDR_OWVAR 20
13175: PUSH
13176: LD_VAR 0 1
13180: ST_TO_ADDR
// uc_nation = nation ;
13181: LD_ADDR_OWVAR 21
13185: PUSH
13186: LD_VAR 0 2
13190: ST_TO_ADDR
// hc_gallery =  ;
13191: LD_ADDR_OWVAR 33
13195: PUSH
13196: LD_STRING 
13198: ST_TO_ADDR
// hc_name =  ;
13199: LD_ADDR_OWVAR 26
13203: PUSH
13204: LD_STRING 
13206: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13207: LD_INT 0
13209: PPUSH
13210: LD_VAR 0 5
13214: PPUSH
13215: LD_VAR 0 4
13219: PPUSH
13220: CALL_OW 380
// un = CreateHuman ;
13224: LD_ADDR_VAR 0 10
13228: PUSH
13229: CALL_OW 44
13233: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13234: LD_VAR 0 10
13238: PPUSH
13239: LD_VAR 0 3
13243: PPUSH
13244: CALL_OW 52
// end ;
13248: GO 13168
13250: POP
13251: POP
// end ;
13252: LD_VAR 0 7
13256: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
13257: LD_INT 0
13259: PPUSH
13260: PPUSH
13261: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13262: LD_ADDR_VAR 0 6
13266: PUSH
13267: LD_INT 48
13269: PUSH
13270: LD_INT 49
13272: PUSH
13273: LD_INT 50
13275: PUSH
13276: LD_INT 20
13278: PUSH
13279: LD_INT 1
13281: PUSH
13282: LD_INT 51
13284: PUSH
13285: LD_INT 52
13287: PUSH
13288: LD_INT 69
13290: PUSH
13291: LD_INT 39
13293: PUSH
13294: LD_INT 34
13296: PUSH
13297: LD_INT 40
13299: PUSH
13300: LD_INT 53
13302: PUSH
13303: LD_INT 71
13305: PUSH
13306: LD_INT 57
13308: PUSH
13309: LD_INT 58
13311: PUSH
13312: LD_INT 44
13314: PUSH
13315: LD_INT 32
13317: PUSH
13318: LD_INT 27
13320: PUSH
13321: LD_INT 23
13323: PUSH
13324: LD_INT 33
13326: PUSH
13327: LD_INT 59
13329: PUSH
13330: LD_INT 54
13332: PUSH
13333: LD_INT 55
13335: PUSH
13336: LD_INT 56
13338: PUSH
13339: LD_INT 63
13341: PUSH
13342: LD_INT 64
13344: PUSH
13345: LD_INT 65
13347: PUSH
13348: LD_INT 30
13350: PUSH
13351: LD_INT 31
13353: PUSH
13354: LD_INT 21
13356: PUSH
13357: LD_INT 22
13359: PUSH
13360: LD_INT 25
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: ST_TO_ADDR
// for i := 1 to list do
13397: LD_ADDR_VAR 0 5
13401: PUSH
13402: DOUBLE
13403: LD_INT 1
13405: DEC
13406: ST_TO_ADDR
13407: LD_VAR 0 6
13411: PUSH
13412: FOR_TO
13413: IFFALSE 13485
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
13415: LD_VAR 0 6
13419: PUSH
13420: LD_VAR 0 5
13424: ARRAY
13425: PPUSH
13426: LD_VAR 0 1
13430: PPUSH
13431: CALL_OW 321
13435: PUSH
13436: LD_INT 1
13438: EQUAL
13439: PUSH
13440: LD_VAR 0 6
13444: PUSH
13445: LD_VAR 0 5
13449: ARRAY
13450: PPUSH
13451: LD_VAR 0 3
13455: PPUSH
13456: CALL_OW 482
13460: AND
13461: IFFALSE 13483
// AddComResearch ( lab , list [ i ] ) ;
13463: LD_VAR 0 2
13467: PPUSH
13468: LD_VAR 0 6
13472: PUSH
13473: LD_VAR 0 5
13477: ARRAY
13478: PPUSH
13479: CALL_OW 184
13483: GO 13412
13485: POP
13486: POP
// end ;
13487: LD_VAR 0 4
13491: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13492: LD_INT 0
13494: PPUSH
13495: PPUSH
13496: PPUSH
13497: PPUSH
13498: PPUSH
13499: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13500: LD_ADDR_VAR 0 8
13504: PUSH
13505: LD_VAR 0 2
13509: PPUSH
13510: CALL_OW 313
13514: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13515: LD_ADDR_VAR 0 9
13519: PUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: LD_INT 22
13527: PUSH
13528: LD_VAR 0 1
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 25
13539: PUSH
13540: LD_INT 2
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 24
13549: PUSH
13550: LD_INT 750
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 3
13559: PUSH
13560: LD_INT 54
13562: PUSH
13563: EMPTY
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: PPUSH
13576: CALL_OW 70
13580: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13581: LD_ADDR_VAR 0 6
13585: PUSH
13586: LD_VAR 0 3
13590: PPUSH
13591: LD_INT 22
13593: PUSH
13594: LD_VAR 0 1
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 21
13605: PUSH
13606: LD_INT 3
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 3
13615: PUSH
13616: LD_INT 24
13618: PUSH
13619: LD_INT 1000
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: PPUSH
13638: CALL_OW 70
13642: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13643: LD_VAR 0 6
13647: NOT
13648: PUSH
13649: LD_INT 22
13651: PUSH
13652: LD_VAR 0 1
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 25
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 24
13673: PUSH
13674: LD_INT 250
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: LIST
13685: PPUSH
13686: CALL_OW 69
13690: NOT
13691: AND
13692: IFFALSE 13696
// exit ;
13694: GO 13854
// if buildingsList and engineerOkInside then
13696: LD_VAR 0 6
13700: PUSH
13701: LD_VAR 0 8
13705: AND
13706: IFFALSE 13717
// ComExitBuilding ( engineerOkInside ) ;
13708: LD_VAR 0 8
13712: PPUSH
13713: CALL_OW 122
// if buildingsList and engineerOkOutside then
13717: LD_VAR 0 6
13721: PUSH
13722: LD_VAR 0 9
13726: AND
13727: IFFALSE 13747
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13729: LD_VAR 0 9
13733: PPUSH
13734: LD_VAR 0 6
13738: PUSH
13739: LD_INT 1
13741: ARRAY
13742: PPUSH
13743: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13747: LD_VAR 0 6
13751: PUSH
13752: LD_INT 0
13754: EQUAL
13755: PUSH
13756: LD_VAR 0 4
13760: PUSH
13761: LD_INT 0
13763: EQUAL
13764: AND
13765: PUSH
13766: LD_VAR 0 9
13770: AND
13771: IFFALSE 13787
// ComEnterUnit ( engineerOkOutside , depot ) ;
13773: LD_VAR 0 9
13777: PPUSH
13778: LD_VAR 0 2
13782: PPUSH
13783: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13787: LD_VAR 0 9
13791: PUSH
13792: LD_VAR 0 6
13796: PUSH
13797: LD_INT 0
13799: EQUAL
13800: AND
13801: PUSH
13802: LD_VAR 0 4
13806: AND
13807: IFFALSE 13854
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13809: LD_VAR 0 9
13813: PPUSH
13814: LD_VAR 0 4
13818: PUSH
13819: LD_INT 1
13821: ARRAY
13822: PPUSH
13823: LD_VAR 0 4
13827: PUSH
13828: LD_INT 2
13830: ARRAY
13831: PPUSH
13832: LD_VAR 0 4
13836: PUSH
13837: LD_INT 3
13839: ARRAY
13840: PPUSH
13841: LD_VAR 0 4
13845: PUSH
13846: LD_INT 4
13848: ARRAY
13849: PPUSH
13850: CALL_OW 145
// end ;
13854: LD_VAR 0 5
13858: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13859: LD_INT 0
13861: PPUSH
13862: PPUSH
13863: PPUSH
13864: PPUSH
13865: PPUSH
13866: PPUSH
13867: PPUSH
13868: PPUSH
13869: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13870: LD_ADDR_VAR 0 6
13874: PUSH
13875: LD_INT 22
13877: PUSH
13878: LD_VAR 0 1
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 25
13889: PUSH
13890: LD_INT 4
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 24
13899: PUSH
13900: LD_INT 251
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: LIST
13911: PPUSH
13912: CALL_OW 69
13916: PUSH
13917: LD_EXP 27
13921: PUSH
13922: EMPTY
13923: LIST
13924: DIFF
13925: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13926: LD_ADDR_VAR 0 7
13930: PUSH
13931: LD_VAR 0 3
13935: PPUSH
13936: LD_INT 22
13938: PUSH
13939: LD_VAR 0 1
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 56
13950: PUSH
13951: EMPTY
13952: LIST
13953: PUSH
13954: LD_INT 25
13956: PUSH
13957: LD_INT 4
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 50
13966: PUSH
13967: EMPTY
13968: LIST
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: PPUSH
13976: CALL_OW 70
13980: PUSH
13981: LD_EXP 27
13985: PUSH
13986: EMPTY
13987: LIST
13988: DIFF
13989: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13990: LD_ADDR_VAR 0 10
13994: PUSH
13995: LD_VAR 0 3
13999: PPUSH
14000: LD_INT 22
14002: PUSH
14003: LD_VAR 0 1
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 21
14014: PUSH
14015: LD_INT 1
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 3
14024: PUSH
14025: LD_INT 24
14027: PUSH
14028: LD_INT 750
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 70
14048: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14049: LD_ADDR_VAR 0 11
14053: PUSH
14054: LD_VAR 0 2
14058: PPUSH
14059: LD_INT 22
14061: PUSH
14062: LD_VAR 0 1
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 21
14073: PUSH
14074: LD_INT 1
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 3
14083: PUSH
14084: LD_INT 24
14086: PUSH
14087: LD_INT 1000
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: PPUSH
14103: CALL_OW 70
14107: ST_TO_ADDR
// if damageUnits and sciList then
14108: LD_VAR 0 10
14112: PUSH
14113: LD_VAR 0 6
14117: AND
14118: IFFALSE 14134
// ComMoveToArea ( damageUnits , healArea ) ;
14120: LD_VAR 0 10
14124: PPUSH
14125: LD_VAR 0 2
14129: PPUSH
14130: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
14134: LD_VAR 0 11
14138: PUSH
14139: LD_VAR 0 6
14143: AND
14144: PUSH
14145: LD_VAR 0 7
14149: PUSH
14150: LD_INT 0
14152: EQUAL
14153: AND
14154: IFFALSE 14200
// for i in buildings do
14156: LD_ADDR_VAR 0 8
14160: PUSH
14161: LD_VAR 0 4
14165: PUSH
14166: FOR_IN
14167: IFFALSE 14198
// begin if UnitsInside ( i ) then
14169: LD_VAR 0 8
14173: PPUSH
14174: CALL_OW 313
14178: IFFALSE 14196
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
14180: LD_VAR 0 8
14184: PPUSH
14185: CALL_OW 313
14189: PPUSH
14190: CALL_OW 122
// break ;
14194: GO 14198
// end ; end ;
14196: GO 14166
14198: POP
14199: POP
// if unitsToHeal and sciListOutside then
14200: LD_VAR 0 11
14204: PUSH
14205: LD_VAR 0 7
14209: AND
14210: IFFALSE 14230
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
14212: LD_VAR 0 7
14216: PPUSH
14217: LD_VAR 0 11
14221: PUSH
14222: LD_INT 1
14224: ARRAY
14225: PPUSH
14226: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
14230: LD_VAR 0 10
14234: PUSH
14235: LD_INT 0
14237: EQUAL
14238: PUSH
14239: LD_VAR 0 11
14243: PUSH
14244: LD_INT 0
14246: EQUAL
14247: AND
14248: PUSH
14249: LD_VAR 0 7
14253: AND
14254: IFFALSE 14322
// begin tmp := buildings ;
14256: LD_ADDR_VAR 0 12
14260: PUSH
14261: LD_VAR 0 4
14265: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
14266: LD_ADDR_VAR 0 13
14270: PUSH
14271: LD_INT 1
14273: PPUSH
14274: LD_VAR 0 12
14278: PPUSH
14279: CALL_OW 12
14283: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14284: LD_VAR 0 7
14288: PPUSH
14289: LD_INT 3
14291: PUSH
14292: LD_INT 60
14294: PUSH
14295: EMPTY
14296: LIST
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PPUSH
14302: CALL_OW 72
14306: PPUSH
14307: LD_VAR 0 12
14311: PUSH
14312: LD_VAR 0 13
14316: ARRAY
14317: PPUSH
14318: CALL_OW 120
// end ; end ;
14322: LD_VAR 0 5
14326: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
14334: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14335: LD_ADDR_VAR 0 7
14339: PUSH
14340: LD_VAR 0 2
14344: PPUSH
14345: LD_INT 22
14347: PUSH
14348: LD_VAR 0 1
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 21
14359: PUSH
14360: LD_INT 2
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 34
14369: PUSH
14370: LD_INT 52
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: PPUSH
14382: CALL_OW 70
14386: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14387: LD_ADDR_VAR 0 8
14391: PUSH
14392: LD_VAR 0 2
14396: PPUSH
14397: LD_INT 22
14399: PUSH
14400: LD_VAR 0 1
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 21
14411: PUSH
14412: LD_INT 3
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 3
14421: PUSH
14422: LD_INT 24
14424: PUSH
14425: LD_INT 1000
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: PUSH
14441: EMPTY
14442: LIST
14443: PPUSH
14444: CALL_OW 70
14448: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14449: LD_VAR 0 8
14453: PUSH
14454: LD_INT 0
14456: GREATER
14457: PUSH
14458: LD_VAR 0 7
14462: PPUSH
14463: LD_INT 24
14465: PUSH
14466: LD_INT 750
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PPUSH
14473: CALL_OW 72
14477: PUSH
14478: LD_INT 0
14480: GREATER
14481: AND
14482: IFFALSE 14502
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14484: LD_VAR 0 7
14488: PPUSH
14489: LD_VAR 0 8
14493: PUSH
14494: LD_INT 1
14496: ARRAY
14497: PPUSH
14498: CALL_OW 130
// end ;
14502: LD_VAR 0 3
14506: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14507: LD_INT 0
14509: PPUSH
14510: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14511: LD_INT 22
14513: PUSH
14514: LD_VAR 0 1
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: LD_INT 21
14525: PUSH
14526: LD_INT 2
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PPUSH
14537: CALL_OW 69
14541: PUSH
14542: LD_INT 18
14544: PPUSH
14545: LD_INT 22
14547: PUSH
14548: LD_VAR 0 1
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 2
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PPUSH
14571: CALL_OW 70
14575: PUSH
14576: LD_VAR 0 3
14580: LESSEQUAL
14581: DIFF
14582: IFFALSE 14649
// for i := 1 to vehCount do
14584: LD_ADDR_VAR 0 9
14588: PUSH
14589: DOUBLE
14590: LD_INT 1
14592: DEC
14593: ST_TO_ADDR
14594: LD_VAR 0 3
14598: PUSH
14599: FOR_TO
14600: IFFALSE 14647
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14602: LD_VAR 0 2
14606: PPUSH
14607: LD_VAR 0 7
14611: PPUSH
14612: LD_VAR 0 5
14616: PPUSH
14617: LD_VAR 0 6
14621: PPUSH
14622: LD_VAR 0 4
14626: PUSH
14627: LD_INT 1
14629: PPUSH
14630: LD_VAR 0 4
14634: PPUSH
14635: CALL_OW 12
14639: ARRAY
14640: PPUSH
14641: CALL_OW 185
14645: GO 14599
14647: POP
14648: POP
// end ;
14649: LD_VAR 0 8
14653: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14654: LD_INT 0
14656: PPUSH
14657: PPUSH
14658: PPUSH
14659: PPUSH
14660: PPUSH
14661: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14662: LD_ADDR_VAR 0 6
14666: PUSH
14667: LD_INT 22
14669: PUSH
14670: LD_VAR 0 1
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 25
14681: PUSH
14682: LD_INT 9
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 69
14697: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14698: LD_ADDR_VAR 0 7
14702: PUSH
14703: LD_INT 81
14705: PUSH
14706: LD_VAR 0 1
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 3
14717: PUSH
14718: LD_INT 21
14720: PUSH
14721: LD_INT 3
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PPUSH
14736: CALL_OW 69
14740: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14741: LD_ADDR_VAR 0 4
14745: PUSH
14746: LD_INT 1
14748: PPUSH
14749: LD_INT 3
14751: PPUSH
14752: CALL_OW 12
14756: ST_TO_ADDR
// for i := 1 to list do
14757: LD_ADDR_VAR 0 5
14761: PUSH
14762: DOUBLE
14763: LD_INT 1
14765: DEC
14766: ST_TO_ADDR
14767: LD_VAR 0 6
14771: PUSH
14772: FOR_TO
14773: IFFALSE 14975
// for ta in filter do
14775: LD_ADDR_VAR 0 3
14779: PUSH
14780: LD_VAR 0 7
14784: PUSH
14785: FOR_IN
14786: IFFALSE 14971
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14788: LD_VAR 0 6
14792: PUSH
14793: LD_VAR 0 5
14797: ARRAY
14798: PPUSH
14799: LD_VAR 0 3
14803: PPUSH
14804: CALL_OW 296
14808: PUSH
14809: LD_INT 15
14811: LESSEQUAL
14812: IFFALSE 14969
// begin case c of 1 :
14814: LD_VAR 0 4
14818: PUSH
14819: LD_INT 1
14821: DOUBLE
14822: EQUAL
14823: IFTRUE 14827
14825: GO 14865
14827: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14828: LD_VAR 0 6
14832: PUSH
14833: LD_VAR 0 5
14837: ARRAY
14838: PPUSH
14839: LD_VAR 0 3
14843: PPUSH
14844: CALL_OW 250
14848: PPUSH
14849: LD_VAR 0 3
14853: PPUSH
14854: CALL_OW 251
14858: PPUSH
14859: CALL_OW 154
14863: GO 14969
14865: LD_INT 2
14867: DOUBLE
14868: EQUAL
14869: IFTRUE 14873
14871: GO 14937
14873: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14874: LD_VAR 0 6
14878: PUSH
14879: LD_VAR 0 5
14883: ARRAY
14884: PPUSH
14885: LD_VAR 0 3
14889: PPUSH
14890: CALL_OW 250
14894: PUSH
14895: LD_INT 1
14897: NEG
14898: PPUSH
14899: LD_INT 1
14901: PPUSH
14902: CALL_OW 12
14906: PLUS
14907: PPUSH
14908: LD_VAR 0 3
14912: PPUSH
14913: CALL_OW 251
14917: PUSH
14918: LD_INT 1
14920: NEG
14921: PPUSH
14922: LD_INT 1
14924: PPUSH
14925: CALL_OW 12
14929: PLUS
14930: PPUSH
14931: CALL_OW 153
14935: GO 14969
14937: LD_INT 3
14939: DOUBLE
14940: EQUAL
14941: IFTRUE 14945
14943: GO 14968
14945: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14946: LD_VAR 0 6
14950: PUSH
14951: LD_VAR 0 5
14955: ARRAY
14956: PPUSH
14957: LD_VAR 0 3
14961: PPUSH
14962: CALL_OW 115
14966: GO 14969
14968: POP
// end ; end ;
14969: GO 14785
14971: POP
14972: POP
14973: GO 14772
14975: POP
14976: POP
// end ;
14977: LD_VAR 0 2
14981: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14982: LD_INT 0
14984: PPUSH
14985: PPUSH
14986: PPUSH
14987: PPUSH
// r := 100 ;
14988: LD_ADDR_VAR 0 5
14992: PUSH
14993: LD_INT 100
14995: ST_TO_ADDR
// x := 0 ;
14996: LD_ADDR_VAR 0 6
15000: PUSH
15001: LD_INT 0
15003: ST_TO_ADDR
// while ( x < n ) do
15004: LD_VAR 0 6
15008: PUSH
15009: LD_VAR 0 2
15013: LESS
15014: IFFALSE 15277
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15016: LD_ADDR_VAR 0 4
15020: PUSH
15021: DOUBLE
15022: LD_INT 1
15024: DEC
15025: ST_TO_ADDR
15026: LD_VAR 0 1
15030: PPUSH
15031: LD_INT 0
15033: PPUSH
15034: CALL_OW 517
15038: PUSH
15039: LD_INT 1
15041: ARRAY
15042: PUSH
15043: FOR_TO
15044: IFFALSE 15273
// begin if r > 50 then
15046: LD_VAR 0 5
15050: PUSH
15051: LD_INT 50
15053: GREATER
15054: IFFALSE 15257
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15056: LD_VAR 0 1
15060: PPUSH
15061: LD_INT 0
15063: PPUSH
15064: CALL_OW 517
15068: PUSH
15069: LD_INT 1
15071: ARRAY
15072: PUSH
15073: LD_VAR 0 4
15077: ARRAY
15078: PPUSH
15079: LD_VAR 0 1
15083: PPUSH
15084: LD_INT 0
15086: PPUSH
15087: CALL_OW 517
15091: PUSH
15092: LD_INT 2
15094: ARRAY
15095: PUSH
15096: LD_VAR 0 4
15100: ARRAY
15101: PPUSH
15102: CALL_OW 458
15106: NOT
15107: IFFALSE 15255
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15109: LD_VAR 0 1
15113: PPUSH
15114: LD_INT 0
15116: PPUSH
15117: CALL_OW 517
15121: PUSH
15122: LD_INT 1
15124: ARRAY
15125: PUSH
15126: LD_VAR 0 4
15130: ARRAY
15131: PPUSH
15132: LD_VAR 0 1
15136: PPUSH
15137: LD_INT 0
15139: PPUSH
15140: CALL_OW 517
15144: PUSH
15145: LD_INT 2
15147: ARRAY
15148: PUSH
15149: LD_VAR 0 4
15153: ARRAY
15154: PPUSH
15155: LD_INT 8
15157: PPUSH
15158: LD_INT 0
15160: PPUSH
15161: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15165: LD_ADDR_EXP 37
15169: PUSH
15170: LD_EXP 37
15174: PPUSH
15175: LD_INT 1
15177: PPUSH
15178: LD_VAR 0 1
15182: PPUSH
15183: LD_INT 0
15185: PPUSH
15186: CALL_OW 517
15190: PUSH
15191: LD_INT 1
15193: ARRAY
15194: PUSH
15195: LD_VAR 0 4
15199: ARRAY
15200: PUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: LD_INT 0
15208: PPUSH
15209: CALL_OW 517
15213: PUSH
15214: LD_INT 2
15216: ARRAY
15217: PUSH
15218: LD_VAR 0 4
15222: ARRAY
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PPUSH
15228: CALL_OW 2
15232: ST_TO_ADDR
// r := 0 ;
15233: LD_ADDR_VAR 0 5
15237: PUSH
15238: LD_INT 0
15240: ST_TO_ADDR
// x := x + 1 ;
15241: LD_ADDR_VAR 0 6
15245: PUSH
15246: LD_VAR 0 6
15250: PUSH
15251: LD_INT 1
15253: PLUS
15254: ST_TO_ADDR
// end end else
15255: GO 15271
// r := r + 35 ;
15257: LD_ADDR_VAR 0 5
15261: PUSH
15262: LD_VAR 0 5
15266: PUSH
15267: LD_INT 35
15269: PLUS
15270: ST_TO_ADDR
// end end ;
15271: GO 15043
15273: POP
15274: POP
15275: GO 15004
15277: LD_VAR 0 3
15281: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
15282: LD_INT 0
15284: PPUSH
15285: PPUSH
15286: PPUSH
15287: PPUSH
15288: PPUSH
// tmp := [ ] ;
15289: LD_ADDR_VAR 0 6
15293: PUSH
15294: EMPTY
15295: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
15296: LD_ADDR_VAR 0 7
15300: PUSH
15301: LD_INT 22
15303: PUSH
15304: LD_VAR 0 1
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 30
15315: PUSH
15316: LD_INT 32
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PPUSH
15327: CALL_OW 69
15331: ST_TO_ADDR
// if bunkers then
15332: LD_VAR 0 7
15336: IFFALSE 15406
// for i in bunkers do
15338: LD_ADDR_VAR 0 4
15342: PUSH
15343: LD_VAR 0 7
15347: PUSH
15348: FOR_IN
15349: IFFALSE 15404
// for j in UnitsInside ( i ) do
15351: LD_ADDR_VAR 0 5
15355: PUSH
15356: LD_VAR 0 4
15360: PPUSH
15361: CALL_OW 313
15365: PUSH
15366: FOR_IN
15367: IFFALSE 15400
// tmp := Replace ( tmp , tmp + 1 , j ) ;
15369: LD_ADDR_VAR 0 6
15373: PUSH
15374: LD_VAR 0 6
15378: PPUSH
15379: LD_VAR 0 6
15383: PUSH
15384: LD_INT 1
15386: PLUS
15387: PPUSH
15388: LD_VAR 0 5
15392: PPUSH
15393: CALL_OW 1
15397: ST_TO_ADDR
15398: GO 15366
15400: POP
15401: POP
15402: GO 15348
15404: POP
15405: POP
// if tmp then
15406: LD_VAR 0 6
15410: IFFALSE 15450
// begin ComExitBuilding ( tmp ) ;
15412: LD_VAR 0 6
15416: PPUSH
15417: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15421: LD_VAR 0 6
15425: PPUSH
15426: LD_VAR 0 2
15430: PPUSH
15431: CALL_OW 250
15435: PPUSH
15436: LD_VAR 0 2
15440: PPUSH
15441: CALL_OW 251
15445: PPUSH
15446: CALL_OW 174
// end ; end ;
15450: LD_VAR 0 3
15454: RET
// export function CreateNature ; var i , un ; begin
15455: LD_INT 0
15457: PPUSH
15458: PPUSH
15459: PPUSH
// uc_side := 0 ;
15460: LD_ADDR_OWVAR 20
15464: PUSH
15465: LD_INT 0
15467: ST_TO_ADDR
// uc_nation := 0 ;
15468: LD_ADDR_OWVAR 21
15472: PUSH
15473: LD_INT 0
15475: ST_TO_ADDR
// InitHc ;
15476: CALL_OW 19
// hc_class := class_fish ;
15480: LD_ADDR_OWVAR 28
15484: PUSH
15485: LD_INT 20
15487: ST_TO_ADDR
// for i := 1 to 6 do
15488: LD_ADDR_VAR 0 2
15492: PUSH
15493: DOUBLE
15494: LD_INT 1
15496: DEC
15497: ST_TO_ADDR
15498: LD_INT 6
15500: PUSH
15501: FOR_TO
15502: IFFALSE 15521
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15504: CALL_OW 44
15508: PPUSH
15509: LD_INT 22
15511: PPUSH
15512: LD_INT 0
15514: PPUSH
15515: CALL_OW 49
15519: GO 15501
15521: POP
15522: POP
// for i := 1 to Difficulty + 2 do
15523: LD_ADDR_VAR 0 2
15527: PUSH
15528: DOUBLE
15529: LD_INT 1
15531: DEC
15532: ST_TO_ADDR
15533: LD_OWVAR 67
15537: PUSH
15538: LD_INT 2
15540: PLUS
15541: PUSH
15542: FOR_TO
15543: IFFALSE 15652
// begin hc_sex := sex_male ;
15545: LD_ADDR_OWVAR 27
15549: PUSH
15550: LD_INT 1
15552: ST_TO_ADDR
// uc_side := 0 ;
15553: LD_ADDR_OWVAR 20
15557: PUSH
15558: LD_INT 0
15560: ST_TO_ADDR
// uc_nation := nation_nature ;
15561: LD_ADDR_OWVAR 21
15565: PUSH
15566: LD_INT 0
15568: ST_TO_ADDR
// hc_class := class_tiger ;
15569: LD_ADDR_OWVAR 28
15573: PUSH
15574: LD_INT 14
15576: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15577: LD_ADDR_OWVAR 31
15581: PUSH
15582: LD_EXP 30
15586: PUSH
15587: LD_INT 0
15589: PUSH
15590: LD_INT 0
15592: PUSH
15593: LD_INT 0
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15602: LD_ADDR_OWVAR 35
15606: PUSH
15607: LD_INT 5
15609: NEG
15610: PPUSH
15611: LD_INT 5
15613: PPUSH
15614: CALL_OW 12
15618: PUSH
15619: LD_OWVAR 67
15623: MUL
15624: ST_TO_ADDR
// un := CreateHuman ;
15625: LD_ADDR_VAR 0 3
15629: PUSH
15630: CALL_OW 44
15634: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15635: LD_VAR 0 3
15639: PPUSH
15640: LD_INT 23
15642: PPUSH
15643: LD_INT 0
15645: PPUSH
15646: CALL_OW 49
// end ;
15650: GO 15542
15652: POP
15653: POP
// for i := 1 to rand ( 3 , 4 ) do
15654: LD_ADDR_VAR 0 2
15658: PUSH
15659: DOUBLE
15660: LD_INT 1
15662: DEC
15663: ST_TO_ADDR
15664: LD_INT 3
15666: PPUSH
15667: LD_INT 4
15669: PPUSH
15670: CALL_OW 12
15674: PUSH
15675: FOR_TO
15676: IFFALSE 15768
// begin hc_sex := sex_male ;
15678: LD_ADDR_OWVAR 27
15682: PUSH
15683: LD_INT 1
15685: ST_TO_ADDR
// uc_side := 0 ;
15686: LD_ADDR_OWVAR 20
15690: PUSH
15691: LD_INT 0
15693: ST_TO_ADDR
// uc_nation := nation_nature ;
15694: LD_ADDR_OWVAR 21
15698: PUSH
15699: LD_INT 0
15701: ST_TO_ADDR
// hc_class := 18 ;
15702: LD_ADDR_OWVAR 28
15706: PUSH
15707: LD_INT 18
15709: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15710: LD_ADDR_OWVAR 31
15714: PUSH
15715: LD_INT 0
15717: PUSH
15718: LD_INT 0
15720: PUSH
15721: LD_INT 0
15723: PUSH
15724: LD_INT 0
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: ST_TO_ADDR
// hc_agressivity := 0 ;
15733: LD_ADDR_OWVAR 35
15737: PUSH
15738: LD_INT 0
15740: ST_TO_ADDR
// un := CreateHuman ;
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: CALL_OW 44
15750: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15751: LD_VAR 0 3
15755: PPUSH
15756: LD_INT 23
15758: PPUSH
15759: LD_INT 0
15761: PPUSH
15762: CALL_OW 49
// end ;
15766: GO 15675
15768: POP
15769: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15770: LD_ADDR_VAR 0 2
15774: PUSH
15775: DOUBLE
15776: LD_INT 1
15778: DEC
15779: ST_TO_ADDR
15780: LD_INT 4
15782: PUSH
15783: LD_INT 3
15785: PUSH
15786: LD_INT 3
15788: PUSH
15789: LD_INT 3
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: PUSH
15798: LD_OWVAR 67
15802: ARRAY
15803: PUSH
15804: FOR_TO
15805: IFFALSE 15914
// begin hc_sex := sex_male ;
15807: LD_ADDR_OWVAR 27
15811: PUSH
15812: LD_INT 1
15814: ST_TO_ADDR
// uc_side := 0 ;
15815: LD_ADDR_OWVAR 20
15819: PUSH
15820: LD_INT 0
15822: ST_TO_ADDR
// uc_nation := nation_nature ;
15823: LD_ADDR_OWVAR 21
15827: PUSH
15828: LD_INT 0
15830: ST_TO_ADDR
// hc_class := class_apeman ;
15831: LD_ADDR_OWVAR 28
15835: PUSH
15836: LD_INT 12
15838: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15839: LD_ADDR_OWVAR 31
15843: PUSH
15844: LD_INT 0
15846: PPUSH
15847: LD_INT 2
15849: PPUSH
15850: CALL_OW 12
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: LD_INT 0
15860: PUSH
15861: LD_INT 0
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15870: LD_ADDR_OWVAR 35
15874: PUSH
15875: LD_INT 10
15877: NEG
15878: PPUSH
15879: LD_INT 10
15881: PPUSH
15882: CALL_OW 12
15886: ST_TO_ADDR
// un := CreateHuman ;
15887: LD_ADDR_VAR 0 3
15891: PUSH
15892: CALL_OW 44
15896: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15897: LD_VAR 0 3
15901: PPUSH
15902: LD_INT 26
15904: PPUSH
15905: LD_INT 0
15907: PPUSH
15908: CALL_OW 49
// end ;
15912: GO 15804
15914: POP
15915: POP
// end ; end_of_file
15916: LD_VAR 0 1
15920: RET
// on UnitDestroyed ( unit ) do var i ;
15921: LD_INT 0
15923: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15924: LD_VAR 0 1
15928: PPUSH
15929: CALL 35245 0 1
// if unit = JMM then
15933: LD_VAR 0 1
15937: PUSH
15938: LD_EXP 1
15942: EQUAL
15943: IFFALSE 15952
// YouLost ( JMM ) ;
15945: LD_STRING JMM
15947: PPUSH
15948: CALL_OW 104
// if unit in russianTanks then
15952: LD_VAR 0 1
15956: PUSH
15957: LD_EXP 32
15961: IN
15962: IFFALSE 15980
// russianTanks := russianTanks diff unit ;
15964: LD_ADDR_EXP 32
15968: PUSH
15969: LD_EXP 32
15973: PUSH
15974: LD_VAR 0 1
15978: DIFF
15979: ST_TO_ADDR
// if unit in russianTimeLapsers then
15980: LD_VAR 0 1
15984: PUSH
15985: LD_EXP 33
15989: IN
15990: IFFALSE 16008
// russianTimeLapsers := russianTimeLapsers diff unit ;
15992: LD_ADDR_EXP 33
15996: PUSH
15997: LD_EXP 33
16001: PUSH
16002: LD_VAR 0 1
16006: DIFF
16007: ST_TO_ADDR
// if unit in RuScientists then
16008: LD_VAR 0 1
16012: PUSH
16013: LD_EXP 27
16017: IN
16018: IFFALSE 16050
// begin RuScientists := RuScientists diff unit ;
16020: LD_ADDR_EXP 27
16024: PUSH
16025: LD_EXP 27
16029: PUSH
16030: LD_VAR 0 1
16034: DIFF
16035: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
16036: LD_ADDR_EXP 28
16040: PUSH
16041: LD_EXP 28
16045: PUSH
16046: LD_INT 1
16048: PLUS
16049: ST_TO_ADDR
// end ; end ;
16050: PPOPN 2
16052: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16053: LD_VAR 0 3
16057: PPUSH
16058: CALL_OW 264
16062: PUSH
16063: LD_INT 9
16065: EQUAL
16066: IFFALSE 16082
// laserCounterDestroy := laserCounterDestroy + 1 ;
16068: LD_ADDR_EXP 43
16072: PUSH
16073: LD_EXP 43
16077: PUSH
16078: LD_INT 1
16080: PLUS
16081: ST_TO_ADDR
// end ;
16082: PPOPN 3
16084: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
16085: LD_VAR 0 2
16089: PUSH
16090: LD_INT 22
16092: PUSH
16093: LD_INT 6
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 69
16104: IN
16105: IFFALSE 16160
// begin if GetType ( human ) = unit_vehicle then
16107: LD_VAR 0 2
16111: PPUSH
16112: CALL_OW 247
16116: PUSH
16117: LD_INT 2
16119: EQUAL
16120: IFFALSE 16137
// human := IsDrivenBy ( human ) ;
16122: LD_ADDR_VAR 0 2
16126: PUSH
16127: LD_VAR 0 2
16131: PPUSH
16132: CALL_OW 311
16136: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
16137: LD_VAR 0 2
16141: PPUSH
16142: LD_VAR 0 2
16146: PPUSH
16147: CALL_OW 110
16151: PUSH
16152: LD_INT 10
16154: PLUS
16155: PPUSH
16156: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
16160: LD_VAR 0 2
16164: PPUSH
16165: CALL_OW 255
16169: PUSH
16170: LD_INT 1
16172: EQUAL
16173: PUSH
16174: LD_EXP 40
16178: PUSH
16179: LD_INT 0
16181: EQUAL
16182: AND
16183: IFFALSE 16295
// begin eventVar1 = 1 ;
16185: LD_ADDR_EXP 40
16189: PUSH
16190: LD_INT 1
16192: ST_TO_ADDR
// teleportExplored = 1 ;
16193: LD_ADDR_EXP 26
16197: PUSH
16198: LD_INT 1
16200: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16201: LD_STRING M2a
16203: PPUSH
16204: CALL_OW 337
// wait ( 0 0$2 ) ;
16208: LD_INT 70
16210: PPUSH
16211: CALL_OW 67
// DialogueOn ;
16215: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16219: LD_INT 22
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 21
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL_OW 69
16247: PPUSH
16248: LD_STRING DT3a-Sol1-1
16250: PPUSH
16251: LD_STRING DT3a-FSol1-1
16253: PPUSH
16254: CALL 12642 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16258: LD_EXP 1
16262: PPUSH
16263: LD_STRING DT3a-JMM-1
16265: PPUSH
16266: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16270: LD_VAR 0 2
16274: PPUSH
16275: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16279: LD_EXP 1
16283: PPUSH
16284: LD_STRING DT3a-JMM-1a
16286: PPUSH
16287: CALL_OW 88
// DialogueOff ;
16291: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16295: LD_VAR 0 1
16299: PUSH
16300: LD_INT 10
16302: EQUAL
16303: PUSH
16304: LD_VAR 0 2
16308: PPUSH
16309: CALL_OW 247
16313: PUSH
16314: LD_INT 2
16316: EQUAL
16317: AND
16318: PUSH
16319: LD_VAR 0 2
16323: PPUSH
16324: CALL_OW 255
16328: PUSH
16329: LD_INT 3
16331: EQUAL
16332: AND
16333: IFFALSE 16399
// begin if vehicleTeleported = 0 then
16335: LD_EXP 21
16339: PUSH
16340: LD_INT 0
16342: EQUAL
16343: IFFALSE 16360
// begin wait ( 0 0$03 ) ;
16345: LD_INT 105
16347: PPUSH
16348: CALL_OW 67
// vehicleTeleported := 1 ;
16352: LD_ADDR_EXP 21
16356: PUSH
16357: LD_INT 1
16359: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
16360: LD_EXP 21
16364: PUSH
16365: LD_INT 2
16367: EQUAL
16368: IFFALSE 16385
// begin wait ( 0 0$03 ) ;
16370: LD_INT 105
16372: PPUSH
16373: CALL_OW 67
// vehicleTeleported := 3 ;
16377: LD_ADDR_EXP 21
16381: PUSH
16382: LD_INT 3
16384: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16385: LD_ADDR_EXP 22
16389: PUSH
16390: LD_EXP 22
16394: PUSH
16395: LD_INT 1
16397: PLUS
16398: ST_TO_ADDR
// end ; end ;
16399: PPOPN 2
16401: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16402: LD_VAR 0 1
16406: PPUSH
16407: LD_VAR 0 2
16411: PPUSH
16412: CALL 35365 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL_OW 264
16425: PUSH
16426: LD_INT 7
16428: EQUAL
16429: IFFALSE 16439
// rocketBuilded := true ;
16431: LD_ADDR_EXP 44
16435: PUSH
16436: LD_INT 1
16438: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16439: LD_VAR 0 1
16443: PPUSH
16444: CALL_OW 255
16448: PUSH
16449: LD_INT 3
16451: NONEQUAL
16452: IFFALSE 16456
// exit ;
16454: GO 16573
// if factory in [ ru_fact , rufab2 ] then
16456: LD_VAR 0 2
16460: PUSH
16461: LD_INT 21
16463: PUSH
16464: LD_INT 112
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: IN
16471: IFFALSE 16573
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL_OW 264
16482: PUSH
16483: LD_INT 49
16485: EQUAL
16486: IFFALSE 16522
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16488: LD_ADDR_EXP 33
16492: PUSH
16493: LD_EXP 33
16497: PPUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL 77830 0 2
16507: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16508: LD_VAR 0 1
16512: PPUSH
16513: LD_INT 137
16515: PPUSH
16516: CALL_OW 120
// end else
16520: GO 16573
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16522: LD_VAR 0 1
16526: PPUSH
16527: CALL_OW 264
16531: PUSH
16532: LD_INT 51
16534: PUSH
16535: LD_INT 89
16537: PUSH
16538: LD_INT 52
16540: PUSH
16541: LD_INT 53
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: IN
16550: NOT
16551: IFFALSE 16573
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16553: LD_ADDR_EXP 32
16557: PUSH
16558: LD_EXP 32
16562: PPUSH
16563: LD_VAR 0 1
16567: PPUSH
16568: CALL 77830 0 2
16572: ST_TO_ADDR
// end ; end ; end ;
16573: PPOPN 2
16575: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16576: LD_INT 0
16578: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16579: LD_VAR 0 2
16583: PPUSH
16584: CALL_OW 255
16588: PUSH
16589: LD_INT 3
16591: EQUAL
16592: PUSH
16593: LD_VAR 0 2
16597: PPUSH
16598: CALL_OW 257
16602: PUSH
16603: LD_INT 3
16605: EQUAL
16606: AND
16607: PUSH
16608: LD_INT 21
16610: PPUSH
16611: CALL_OW 255
16615: PUSH
16616: LD_INT 3
16618: EQUAL
16619: AND
16620: PUSH
16621: LD_INT 21
16623: PPUSH
16624: CALL_OW 302
16628: AND
16629: IFFALSE 16643
// ComEnterUnit ( human , ru_fact ) ;
16631: LD_VAR 0 2
16635: PPUSH
16636: LD_INT 21
16638: PPUSH
16639: CALL_OW 120
// end ;
16643: PPOPN 3
16645: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16646: LD_VAR 0 1
16650: PPUSH
16651: CALL 35349 0 1
// end ; end_of_file
16655: PPOPN 1
16657: END
// every 0 0$1 trigger ruAI = 1 do
16658: LD_EXP 34
16662: PUSH
16663: LD_INT 1
16665: EQUAL
16666: IFFALSE 16778
16668: GO 16670
16670: DISABLE
// begin enable ;
16671: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16672: LD_INT 3
16674: PPUSH
16675: LD_INT 6
16677: PPUSH
16678: LD_INT 9
16680: PPUSH
16681: LD_EXP 31
16685: PPUSH
16686: CALL 13492 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16690: LD_INT 3
16692: PPUSH
16693: LD_INT 4
16695: PPUSH
16696: LD_INT 10
16698: PPUSH
16699: LD_EXP 31
16703: PPUSH
16704: CALL 13492 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16708: LD_INT 3
16710: PPUSH
16711: LD_INT 9
16713: PPUSH
16714: CALL 14327 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16718: LD_INT 3
16720: PPUSH
16721: LD_INT 10
16723: PPUSH
16724: CALL 14327 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16728: LD_INT 3
16730: PPUSH
16731: LD_INT 16
16733: PPUSH
16734: LD_INT 9
16736: PPUSH
16737: LD_INT 91
16739: PPUSH
16740: CALL 13859 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16744: LD_INT 3
16746: PPUSH
16747: LD_INT 17
16749: PPUSH
16750: LD_INT 10
16752: PPUSH
16753: LD_INT 47
16755: PUSH
16756: LD_INT 129
16758: PUSH
16759: LD_INT 135
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: LIST
16766: PPUSH
16767: CALL 13859 0 4
// IntBazooka ( 3 ) ;
16771: LD_INT 3
16773: PPUSH
16774: CALL 14654 0 1
// end ;
16778: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
16779: LD_EXP 32
16783: PUSH
16784: LD_INT 3
16786: PUSH
16787: LD_INT 4
16789: PUSH
16790: LD_INT 5
16792: PUSH
16793: LD_INT 6
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: PUSH
16802: LD_OWVAR 67
16806: ARRAY
16807: GREATEREQUAL
16808: IFFALSE 17180
16810: GO 16812
16812: DISABLE
16813: LD_INT 0
16815: PPUSH
16816: PPUSH
16817: PPUSH
16818: PPUSH
// begin enable ;
16819: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16820: LD_ADDR_VAR 0 2
16824: PUSH
16825: LD_EXP 32
16829: PUSH
16830: LD_EXP 33
16834: UNION
16835: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16836: LD_ADDR_EXP 32
16840: PUSH
16841: LD_EXP 32
16845: PUSH
16846: LD_VAR 0 2
16850: DIFF
16851: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16852: LD_ADDR_EXP 33
16856: PUSH
16857: LD_EXP 33
16861: PUSH
16862: LD_VAR 0 2
16866: DIFF
16867: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16868: LD_EXP 21
16872: PUSH
16873: LD_INT 4
16875: GREATEREQUAL
16876: IFFALSE 16894
// attackTactic := rand ( 1 , 2 ) ;
16878: LD_ADDR_EXP 36
16882: PUSH
16883: LD_INT 1
16885: PPUSH
16886: LD_INT 2
16888: PPUSH
16889: CALL_OW 12
16893: ST_TO_ADDR
// path := [ [ 93 , 77 ] , [ 107 , 99 ] , [ 123 , 112 ] , [ 140 , 112 ] ] ;
16894: LD_ADDR_VAR 0 4
16898: PUSH
16899: LD_INT 93
16901: PUSH
16902: LD_INT 77
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 107
16911: PUSH
16912: LD_INT 99
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 123
16921: PUSH
16922: LD_INT 112
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 140
16931: PUSH
16932: LD_INT 112
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: ST_TO_ADDR
// if attackTactic < 2 then
16945: LD_EXP 36
16949: PUSH
16950: LD_INT 2
16952: LESS
16953: IFFALSE 16984
// path := [ [ 131 , 136 ] , [ 140 , 112 ] ] ;
16955: LD_ADDR_VAR 0 4
16959: PUSH
16960: LD_INT 131
16962: PUSH
16963: LD_INT 136
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 140
16972: PUSH
16973: LD_INT 112
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16984: LD_INT 10
16986: PPUSH
16987: CALL_OW 302
16991: IFFALSE 17107
// begin for i in tmp do
16993: LD_ADDR_VAR 0 1
16997: PUSH
16998: LD_VAR 0 2
17002: PUSH
17003: FOR_IN
17004: IFFALSE 17047
// if attackTactic < 2 then
17006: LD_EXP 36
17010: PUSH
17011: LD_INT 2
17013: LESS
17014: IFFALSE 17030
// ComEnterUnit ( i , ruteleprt ) else
17016: LD_VAR 0 1
17020: PPUSH
17021: LD_INT 10
17023: PPUSH
17024: CALL_OW 120
17028: GO 17045
// ComMoveXY ( i , 88 , 69 ) ;
17030: LD_VAR 0 1
17034: PPUSH
17035: LD_INT 88
17037: PPUSH
17038: LD_INT 69
17040: PPUSH
17041: CALL_OW 111
17045: GO 17003
17047: POP
17048: POP
// p := 0 ;
17049: LD_ADDR_VAR 0 3
17053: PUSH
17054: LD_INT 0
17056: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
17057: LD_INT 70
17059: PPUSH
17060: CALL_OW 67
// p := Inc ( p ) ;
17064: LD_ADDR_VAR 0 3
17068: PUSH
17069: LD_VAR 0 3
17073: PPUSH
17074: CALL 79191 0 1
17078: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
17079: LD_VAR 0 2
17083: PPUSH
17084: LD_INT 60
17086: PUSH
17087: EMPTY
17088: LIST
17089: PPUSH
17090: CALL_OW 72
17094: NOT
17095: PUSH
17096: LD_VAR 0 3
17100: PUSH
17101: LD_INT 30
17103: GREATER
17104: OR
17105: IFFALSE 17057
// end ; repeat wait ( 0 0$1 ) ;
17107: LD_INT 35
17109: PPUSH
17110: CALL_OW 67
// for i in tmp do
17114: LD_ADDR_VAR 0 1
17118: PUSH
17119: LD_VAR 0 2
17123: PUSH
17124: FOR_IN
17125: IFFALSE 17157
// if not IsOk ( i ) then
17127: LD_VAR 0 1
17131: PPUSH
17132: CALL_OW 302
17136: NOT
17137: IFFALSE 17155
// tmp := tmp diff i ;
17139: LD_ADDR_VAR 0 2
17143: PUSH
17144: LD_VAR 0 2
17148: PUSH
17149: LD_VAR 0 1
17153: DIFF
17154: ST_TO_ADDR
17155: GO 17124
17157: POP
17158: POP
// AgressiveMove ( tmp , path ) ;
17159: LD_VAR 0 2
17163: PPUSH
17164: LD_VAR 0 4
17168: PPUSH
17169: CALL 80434 0 2
// until not tmp ;
17173: LD_VAR 0 2
17177: NOT
17178: IFFALSE 17107
// end ;
17180: PPOPN 4
17182: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17183: LD_INT 4
17185: PPUSH
17186: CALL_OW 303
17190: IFFALSE 17205
17192: GO 17194
17194: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17195: LD_INT 3
17197: PPUSH
17198: LD_INT 4
17200: PPUSH
17201: CALL 15282 0 2
17205: END
// every 0 0$1 do
17206: GO 17208
17208: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17209: LD_INT 3
17211: PPUSH
17212: LD_INT 91
17214: PPUSH
17215: LD_INT 3
17217: PPUSH
17218: CALL 13257 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17222: LD_INT 3
17224: PPUSH
17225: LD_INT 47
17227: PPUSH
17228: LD_INT 3
17230: PPUSH
17231: CALL 13257 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17235: LD_INT 3
17237: PPUSH
17238: LD_INT 129
17240: PPUSH
17241: LD_INT 3
17243: PPUSH
17244: CALL 13257 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17248: LD_INT 3
17250: PPUSH
17251: LD_INT 3
17253: PPUSH
17254: LD_INT 3
17256: PPUSH
17257: CALL 13257 0 3
// end ;
17261: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17262: LD_INT 22
17264: PUSH
17265: LD_INT 1
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 21
17274: PUSH
17275: LD_INT 3
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PPUSH
17286: CALL_OW 69
17290: IFFALSE 17359
17292: GO 17294
17294: DISABLE
// begin wait ( 0 0$40 ) ;
17295: LD_INT 1400
17297: PPUSH
17298: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17302: LD_INT 3
17304: PPUSH
17305: LD_INT 21
17307: PPUSH
17308: LD_INT 3
17310: PUSH
17311: LD_INT 4
17313: PUSH
17314: LD_INT 5
17316: PUSH
17317: LD_INT 6
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_OWVAR 67
17330: ARRAY
17331: PPUSH
17332: LD_INT 46
17334: PUSH
17335: LD_INT 45
17337: PUSH
17338: LD_INT 44
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: LIST
17345: PPUSH
17346: LD_INT 3
17348: PPUSH
17349: LD_INT 3
17351: PPUSH
17352: LD_INT 24
17354: PPUSH
17355: CALL 14507 0 7
// end ;
17359: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17360: LD_EXP 20
17364: PUSH
17365: LD_INT 2
17367: EQUAL
17368: PUSH
17369: LD_INT 21
17371: PPUSH
17372: CALL_OW 255
17376: PUSH
17377: LD_INT 3
17379: EQUAL
17380: AND
17381: PUSH
17382: LD_INT 112
17384: PPUSH
17385: CALL_OW 255
17389: PUSH
17390: LD_INT 3
17392: EQUAL
17393: AND
17394: PUSH
17395: LD_INT 21
17397: PPUSH
17398: CALL_OW 302
17402: AND
17403: PUSH
17404: LD_INT 112
17406: PPUSH
17407: CALL_OW 302
17411: AND
17412: PUSH
17413: LD_INT 22
17415: PUSH
17416: LD_INT 3
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 2
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 50
17435: PUSH
17436: EMPTY
17437: LIST
17438: PUSH
17439: LD_INT 3
17441: PUSH
17442: LD_INT 58
17444: PUSH
17445: EMPTY
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: PPUSH
17458: CALL_OW 69
17462: PUSH
17463: LD_INT 18
17465: PPUSH
17466: LD_INT 22
17468: PUSH
17469: LD_INT 3
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 21
17478: PUSH
17479: LD_INT 2
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PPUSH
17490: CALL_OW 70
17494: PUSH
17495: LD_INT 0
17497: EQUAL
17498: DIFF
17499: AND
17500: IFFALSE 17626
17502: GO 17504
17504: DISABLE
// begin enable ;
17505: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17506: LD_INT 3
17508: PPUSH
17509: LD_INT 21
17511: PPUSH
17512: LD_INT 3
17514: PUSH
17515: LD_INT 4
17517: PUSH
17518: LD_INT 5
17520: PUSH
17521: LD_INT 6
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: LD_OWVAR 67
17534: ARRAY
17535: PPUSH
17536: LD_INT 46
17538: PUSH
17539: LD_INT 45
17541: PUSH
17542: LD_INT 44
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: PPUSH
17550: LD_INT 3
17552: PPUSH
17553: LD_INT 3
17555: PPUSH
17556: LD_INT 24
17558: PPUSH
17559: CALL 14507 0 7
// if russianTimeLapsers = 0 then
17563: LD_EXP 33
17567: PUSH
17568: LD_INT 0
17570: EQUAL
17571: IFFALSE 17626
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17573: LD_INT 3
17575: PPUSH
17576: LD_INT 112
17578: PPUSH
17579: LD_INT 1
17581: PUSH
17582: LD_INT 2
17584: PUSH
17585: LD_INT 2
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: PUSH
17597: LD_OWVAR 67
17601: ARRAY
17602: PPUSH
17603: LD_INT 49
17605: PUSH
17606: LD_INT 49
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: LD_INT 3
17615: PPUSH
17616: LD_INT 3
17618: PPUSH
17619: LD_INT 24
17621: PPUSH
17622: CALL 14507 0 7
// end ;
17626: END
// every 0 0$1 trigger arabianMines do var i ;
17627: LD_EXP 37
17631: IFFALSE 17752
17633: GO 17635
17635: DISABLE
17636: LD_INT 0
17638: PPUSH
// begin enable ;
17639: ENABLE
// for i in arabianMines do
17640: LD_ADDR_VAR 0 1
17644: PUSH
17645: LD_EXP 37
17649: PUSH
17650: FOR_IN
17651: IFFALSE 17750
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17653: LD_INT 22
17655: PUSH
17656: LD_INT 1
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 92
17665: PUSH
17666: LD_VAR 0 1
17670: PUSH
17671: LD_INT 1
17673: ARRAY
17674: PUSH
17675: LD_VAR 0 1
17679: PUSH
17680: LD_INT 2
17682: ARRAY
17683: PUSH
17684: LD_INT 3
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PPUSH
17697: CALL_OW 69
17701: IFFALSE 17748
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17703: LD_VAR 0 1
17707: PUSH
17708: LD_INT 1
17710: ARRAY
17711: PPUSH
17712: LD_VAR 0 1
17716: PUSH
17717: LD_INT 2
17719: ARRAY
17720: PPUSH
17721: LD_INT 5
17723: PPUSH
17724: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17728: LD_ADDR_EXP 37
17732: PUSH
17733: LD_EXP 37
17737: PPUSH
17738: LD_VAR 0 1
17742: PPUSH
17743: CALL_OW 3
17747: ST_TO_ADDR
// end ; end ;
17748: GO 17650
17750: POP
17751: POP
// end ;
17752: PPOPN 1
17754: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17755: LD_EXP 21
17759: PUSH
17760: LD_INT 4
17762: GREATEREQUAL
17763: PUSH
17764: LD_EXP 22
17768: PUSH
17769: LD_INT 12
17771: MOD
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: AND
17777: IFFALSE 17891
17779: GO 17781
17781: DISABLE
17782: LD_INT 0
17784: PPUSH
17785: PPUSH
// begin enable ;
17786: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17787: LD_ADDR_VAR 0 2
17791: PUSH
17792: LD_INT 122
17794: PUSH
17795: LD_INT 142
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 101
17804: PUSH
17805: LD_INT 127
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 104
17814: PUSH
17815: LD_INT 104
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 46
17824: PUSH
17825: LD_INT 81
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17838: LD_ADDR_VAR 0 1
17842: PUSH
17843: LD_INT 1
17845: PPUSH
17846: LD_INT 4
17848: PPUSH
17849: CALL_OW 12
17853: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17854: LD_INT 10
17856: PPUSH
17857: LD_VAR 0 2
17861: PUSH
17862: LD_VAR 0 1
17866: ARRAY
17867: PUSH
17868: LD_INT 1
17870: ARRAY
17871: PPUSH
17872: LD_VAR 0 2
17876: PUSH
17877: LD_VAR 0 1
17881: ARRAY
17882: PUSH
17883: LD_INT 2
17885: ARRAY
17886: PPUSH
17887: CALL_OW 243
// end ; end_of_file
17891: PPOPN 2
17893: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17894: LD_INT 3
17896: PPUSH
17897: CALL_OW 301
17901: IFFALSE 18122
17903: GO 17905
17905: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
17906: LD_EXP 27
17910: PPUSH
17911: LD_INT 50
17913: PUSH
17914: EMPTY
17915: LIST
17916: PPUSH
17917: CALL_OW 72
17921: IFFALSE 17930
// wait ( 0 0$10 ) ;
17923: LD_INT 350
17925: PPUSH
17926: CALL_OW 67
// DialogueOn ;
17930: CALL_OW 6
// if sciCounter = 0 then
17934: LD_EXP 28
17938: PUSH
17939: LD_INT 0
17941: EQUAL
17942: IFFALSE 17970
// begin Say ( JMM , D7a-JMM-1 ) ;
17944: LD_EXP 1
17948: PPUSH
17949: LD_STRING D7a-JMM-1
17951: PPUSH
17952: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17956: LD_EXP 15
17960: PPUSH
17961: LD_STRING D7a-Pow-1
17963: PPUSH
17964: CALL_OW 94
// end else
17968: GO 18114
// if sciCounter < 6 then
17970: LD_EXP 28
17974: PUSH
17975: LD_INT 6
17977: LESS
17978: IFFALSE 18006
// begin Say ( JMM , D7b-JMM-1 ) ;
17980: LD_EXP 1
17984: PPUSH
17985: LD_STRING D7b-JMM-1
17987: PPUSH
17988: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17992: LD_EXP 15
17996: PPUSH
17997: LD_STRING D7b-Pow-1
17999: PPUSH
18000: CALL_OW 94
// end else
18004: GO 18114
// begin Say ( JMM , D7c-JMM-1 ) ;
18006: LD_EXP 1
18010: PPUSH
18011: LD_STRING D7c-JMM-1
18013: PPUSH
18014: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18018: LD_EXP 15
18022: PPUSH
18023: LD_STRING D7c-Pow-1
18025: PPUSH
18026: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18030: LD_EXP 1
18034: PPUSH
18035: LD_STRING D7d-JMM-1
18037: PPUSH
18038: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18042: LD_EXP 15
18046: PPUSH
18047: LD_STRING D7d-Pow-1
18049: PPUSH
18050: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18054: LD_EXP 1
18058: PPUSH
18059: LD_STRING D7d-JMM-2
18061: PPUSH
18062: CALL_OW 88
// if askSiberite = 1 then
18066: LD_EXP 25
18070: PUSH
18071: LD_INT 1
18073: EQUAL
18074: IFFALSE 18090
// Say ( JMM , D7d-JMM-2a ) else
18076: LD_EXP 1
18080: PPUSH
18081: LD_STRING D7d-JMM-2a
18083: PPUSH
18084: CALL_OW 88
18088: GO 18102
// SayRadio ( Powell , D7d-Pow-2 ) ;
18090: LD_EXP 15
18094: PPUSH
18095: LD_STRING D7d-Pow-2
18097: PPUSH
18098: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18102: LD_EXP 15
18106: PPUSH
18107: LD_STRING D7d-Pow-2a
18109: PPUSH
18110: CALL_OW 94
// end ; DialogueOff ;
18114: CALL_OW 7
// FinishMission ;
18118: CALL 18123 0 0
// end ;
18122: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18123: LD_INT 0
18125: PPUSH
18126: PPUSH
18127: PPUSH
18128: PPUSH
// m1 := false ;
18129: LD_ADDR_VAR 0 2
18133: PUSH
18134: LD_INT 0
18136: ST_TO_ADDR
// m2 := false ;
18137: LD_ADDR_VAR 0 3
18141: PUSH
18142: LD_INT 0
18144: ST_TO_ADDR
// m3 := false ;
18145: LD_ADDR_VAR 0 4
18149: PUSH
18150: LD_INT 0
18152: ST_TO_ADDR
// if not westPathUsed then
18153: LD_EXP 42
18157: NOT
18158: IFFALSE 18167
// SetAchievement ( ACH_PATH ) ;
18160: LD_STRING ACH_PATH
18162: PPUSH
18163: CALL_OW 543
// if not rocketBuilded then
18167: LD_EXP 44
18171: NOT
18172: IFFALSE 18188
// begin wait ( 3 ) ;
18174: LD_INT 3
18176: PPUSH
18177: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18181: LD_STRING ACH_ROCKET
18183: PPUSH
18184: CALL_OW 543
// end ; if tick <= 40 40$00 then
18188: LD_OWVAR 1
18192: PUSH
18193: LD_INT 84000
18195: LESSEQUAL
18196: IFFALSE 18212
// begin wait ( 3 ) ;
18198: LD_INT 3
18200: PPUSH
18201: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18205: LD_STRING ACH_ASPEED_12
18207: PPUSH
18208: CALL_OW 543
// end ; if teleportExplored = 1 then
18212: LD_EXP 26
18216: PUSH
18217: LD_INT 1
18219: EQUAL
18220: IFFALSE 18242
// begin m1 := true ;
18222: LD_ADDR_VAR 0 2
18226: PUSH
18227: LD_INT 1
18229: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18230: LD_STRING Teleport
18232: PPUSH
18233: LD_INT 1
18235: PPUSH
18236: CALL_OW 101
// end else
18240: GO 18253
// AddMedal ( Teleport , - 1 ) ;
18242: LD_STRING Teleport
18244: PPUSH
18245: LD_INT 1
18247: NEG
18248: PPUSH
18249: CALL_OW 101
// if sciCounter > 2 then
18253: LD_EXP 28
18257: PUSH
18258: LD_INT 2
18260: GREATER
18261: IFFALSE 18283
// begin m2 := true ;
18263: LD_ADDR_VAR 0 3
18267: PUSH
18268: LD_INT 1
18270: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18271: LD_STRING Materials
18273: PPUSH
18274: LD_INT 1
18276: PPUSH
18277: CALL_OW 101
// end else
18281: GO 18294
// AddMedal ( Materials , - 1 ) ;
18283: LD_STRING Materials
18285: PPUSH
18286: LD_INT 1
18288: NEG
18289: PPUSH
18290: CALL_OW 101
// if sciCounter >= 6 then
18294: LD_EXP 28
18298: PUSH
18299: LD_INT 6
18301: GREATEREQUAL
18302: IFFALSE 18334
// begin m3 := true ;
18304: LD_ADDR_VAR 0 4
18308: PUSH
18309: LD_INT 1
18311: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18312: LD_STRING Scientists
18314: PPUSH
18315: LD_INT 1
18317: PPUSH
18318: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18322: LD_INT 1
18324: PPUSH
18325: LD_STRING 12_SciDed_1
18327: PPUSH
18328: CALL_OW 39
// end else
18332: GO 18355
// begin AddMedal ( Scientists , - 1 ) ;
18334: LD_STRING Scientists
18336: PPUSH
18337: LD_INT 1
18339: NEG
18340: PPUSH
18341: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18345: LD_INT 0
18347: PPUSH
18348: LD_STRING 12_SciDed_1
18350: PPUSH
18351: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18355: LD_EXP 24
18359: PPUSH
18360: LD_STRING 12_MainDepositFake_1
18362: PPUSH
18363: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18367: LD_VAR 0 2
18371: PUSH
18372: LD_VAR 0 3
18376: AND
18377: PUSH
18378: LD_VAR 0 4
18382: AND
18383: PUSH
18384: LD_OWVAR 67
18388: PUSH
18389: LD_INT 3
18391: GREATEREQUAL
18392: AND
18393: IFFALSE 18405
// SetAchievementEX ( ACH_AMER , 12 ) ;
18395: LD_STRING ACH_AMER
18397: PPUSH
18398: LD_INT 12
18400: PPUSH
18401: CALL_OW 564
// GiveMedals ( MAIN ) ;
18405: LD_STRING MAIN
18407: PPUSH
18408: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18412: LD_INT 22
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 23
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 21
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 2
18444: PUSH
18445: LD_INT 25
18447: PUSH
18448: LD_INT 1
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 25
18457: PUSH
18458: LD_INT 2
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 25
18467: PUSH
18468: LD_INT 3
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 25
18477: PUSH
18478: LD_INT 4
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 25
18487: PUSH
18488: LD_INT 5
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 25
18497: PUSH
18498: LD_INT 8
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: PPUSH
18520: CALL_OW 69
18524: PPUSH
18525: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18529: LD_EXP 1
18533: PPUSH
18534: LD_EXP 39
18538: PUSH
18539: LD_STRING JMM
18541: STR
18542: PPUSH
18543: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18547: LD_EXP 7
18551: PPUSH
18552: LD_EXP 39
18556: PUSH
18557: LD_STRING Brown
18559: STR
18560: PPUSH
18561: CALL 12602 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18565: LD_EXP 3
18569: PPUSH
18570: LD_EXP 39
18574: PUSH
18575: LD_STRING Donaldson
18577: STR
18578: PPUSH
18579: CALL 12602 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18583: LD_EXP 4
18587: PPUSH
18588: LD_EXP 39
18592: PUSH
18593: LD_STRING Bobby
18595: STR
18596: PPUSH
18597: CALL 12602 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18601: LD_EXP 5
18605: PPUSH
18606: LD_EXP 39
18610: PUSH
18611: LD_STRING Cyrus
18613: STR
18614: PPUSH
18615: CALL 12602 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18619: LD_EXP 2
18623: PPUSH
18624: LD_EXP 39
18628: PUSH
18629: LD_STRING Lisa
18631: STR
18632: PPUSH
18633: CALL 12602 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18637: LD_EXP 12
18641: PPUSH
18642: LD_EXP 39
18646: PUSH
18647: LD_STRING Frank
18649: STR
18650: PPUSH
18651: CALL 12602 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18655: LD_EXP 13
18659: PPUSH
18660: LD_EXP 39
18664: PUSH
18665: LD_STRING Kikuchi
18667: STR
18668: PPUSH
18669: CALL 12602 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18673: LD_EXP 9
18677: PPUSH
18678: LD_EXP 39
18682: PUSH
18683: LD_STRING Houten
18685: STR
18686: PPUSH
18687: CALL 12602 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18691: LD_EXP 11
18695: PPUSH
18696: LD_EXP 39
18700: PUSH
18701: LD_STRING Gary
18703: STR
18704: PPUSH
18705: CALL 12602 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18709: LD_EXP 10
18713: PPUSH
18714: LD_EXP 39
18718: PUSH
18719: LD_STRING Cornell
18721: STR
18722: PPUSH
18723: CALL 12602 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18727: LD_EXP 6
18731: PPUSH
18732: LD_EXP 39
18736: PUSH
18737: LD_STRING Denis
18739: STR
18740: PPUSH
18741: CALL 12602 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18745: LD_EXP 8
18749: PPUSH
18750: LD_EXP 39
18754: PUSH
18755: LD_STRING Gladstone
18757: STR
18758: PPUSH
18759: CALL 12602 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18763: LD_INT 22
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 23
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 21
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 25
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 25
18808: PUSH
18809: LD_INT 2
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 25
18818: PUSH
18819: LD_INT 3
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 25
18828: PUSH
18829: LD_INT 4
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 25
18838: PUSH
18839: LD_INT 5
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 25
18848: PUSH
18849: LD_INT 8
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: PPUSH
18871: CALL_OW 69
18875: PUSH
18876: LD_EXP 1
18880: PUSH
18881: LD_EXP 7
18885: PUSH
18886: LD_EXP 3
18890: PUSH
18891: LD_EXP 4
18895: PUSH
18896: LD_EXP 5
18900: PUSH
18901: LD_EXP 2
18905: PUSH
18906: LD_EXP 12
18910: PUSH
18911: LD_EXP 8
18915: PUSH
18916: LD_EXP 13
18920: PUSH
18921: LD_EXP 6
18925: PUSH
18926: LD_EXP 9
18930: PUSH
18931: LD_EXP 11
18935: PUSH
18936: LD_EXP 10
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: DIFF
18956: PPUSH
18957: LD_STRING 12_other_survivors
18959: PPUSH
18960: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18964: LD_INT 22
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 23
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 21
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: LD_INT 25
18999: PUSH
19000: LD_INT 1
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 25
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 25
19019: PUSH
19020: LD_INT 3
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 25
19029: PUSH
19030: LD_INT 4
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 25
19039: PUSH
19040: LD_INT 5
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 25
19049: PUSH
19050: LD_INT 8
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: PPUSH
19072: CALL_OW 69
19076: PPUSH
19077: LD_STRING 12_kurt_squad
19079: PPUSH
19080: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19084: LD_EXP 14
19088: PPUSH
19089: LD_STRING 12_others
19091: PPUSH
19092: CALL_OW 38
// YouWin ;
19096: CALL_OW 103
// end ; end_of_file
19100: LD_VAR 0 1
19104: RET
// every 0 0$01 trigger ruAI and cratesAllow do
19105: LD_EXP 34
19109: PUSH
19110: LD_EXP 45
19114: AND
19115: IFFALSE 19425
19117: GO 19119
19119: DISABLE
// begin repeat wait ( 0 0$08 ) ;
19120: LD_INT 280
19122: PPUSH
19123: CALL_OW 67
// if cratesSpawned < 12 then
19127: LD_EXP 38
19131: PUSH
19132: LD_INT 12
19134: LESS
19135: IFFALSE 19187
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
19137: LD_INT 105
19139: PPUSH
19140: LD_INT 350
19142: PPUSH
19143: CALL_OW 12
19147: PPUSH
19148: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19152: LD_INT 3
19154: PPUSH
19155: LD_INT 5
19157: PPUSH
19158: CALL_OW 12
19162: PPUSH
19163: LD_INT 21
19165: PPUSH
19166: LD_INT 1
19168: PPUSH
19169: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19173: LD_ADDR_EXP 38
19177: PUSH
19178: LD_EXP 38
19182: PUSH
19183: LD_INT 1
19185: PLUS
19186: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
19187: LD_EXP 38
19191: PUSH
19192: LD_INT 12
19194: GREATEREQUAL
19195: PUSH
19196: LD_EXP 38
19200: PUSH
19201: LD_INT 32
19203: LESS
19204: AND
19205: IFFALSE 19257
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
19207: LD_INT 420
19209: PPUSH
19210: LD_INT 700
19212: PPUSH
19213: CALL_OW 12
19217: PPUSH
19218: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19222: LD_INT 3
19224: PPUSH
19225: LD_INT 5
19227: PPUSH
19228: CALL_OW 12
19232: PPUSH
19233: LD_INT 21
19235: PPUSH
19236: LD_INT 1
19238: PPUSH
19239: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19243: LD_ADDR_EXP 38
19247: PUSH
19248: LD_EXP 38
19252: PUSH
19253: LD_INT 1
19255: PLUS
19256: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
19257: LD_EXP 38
19261: PUSH
19262: LD_INT 32
19264: GREATEREQUAL
19265: IFFALSE 19339
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19267: LD_INT 21
19269: PPUSH
19270: CALL_OW 435
19274: PUSH
19275: LD_INT 14
19277: LESS
19278: IFFALSE 19289
// wait ( 0 0$10 ) else
19280: LD_INT 350
19282: PPUSH
19283: CALL_OW 67
19287: GO 19304
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
19289: LD_INT 1750
19291: PPUSH
19292: LD_INT 3150
19294: PPUSH
19295: CALL_OW 12
19299: PPUSH
19300: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
19304: LD_INT 2
19306: PPUSH
19307: LD_INT 5
19309: PPUSH
19310: CALL_OW 12
19314: PPUSH
19315: LD_INT 21
19317: PPUSH
19318: LD_INT 1
19320: PPUSH
19321: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19325: LD_ADDR_EXP 38
19329: PUSH
19330: LD_EXP 38
19334: PUSH
19335: LD_INT 1
19337: PLUS
19338: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
19339: LD_EXP 38
19343: PUSH
19344: LD_INT 110
19346: GREATEREQUAL
19347: IFFALSE 19421
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19349: LD_INT 21
19351: PPUSH
19352: CALL_OW 435
19356: PUSH
19357: LD_INT 14
19359: LESS
19360: IFFALSE 19371
// wait ( 0 0$20 ) else
19362: LD_INT 700
19364: PPUSH
19365: CALL_OW 67
19369: GO 19386
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
19371: LD_INT 2450
19373: PPUSH
19374: LD_INT 3850
19376: PPUSH
19377: CALL_OW 12
19381: PPUSH
19382: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
19386: LD_INT 1
19388: PPUSH
19389: LD_INT 5
19391: PPUSH
19392: CALL_OW 12
19396: PPUSH
19397: LD_INT 21
19399: PPUSH
19400: LD_INT 1
19402: PPUSH
19403: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19407: LD_ADDR_EXP 38
19411: PUSH
19412: LD_EXP 38
19416: PUSH
19417: LD_INT 1
19419: PLUS
19420: ST_TO_ADDR
// end ; until false ;
19421: LD_INT 0
19423: IFFALSE 19120
// end ; end_of_file end_of_file
19425: END
// export globalGameSaveCounter ; every 0 0$1 do
19426: GO 19428
19428: DISABLE
// begin enable ;
19429: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19430: LD_STRING updateTimer(
19432: PUSH
19433: LD_OWVAR 1
19437: STR
19438: PUSH
19439: LD_STRING );
19441: STR
19442: PPUSH
19443: CALL_OW 559
// end ;
19447: END
// every 0 0$1 do
19448: GO 19450
19450: DISABLE
// begin globalGameSaveCounter := 0 ;
19451: LD_ADDR_EXP 46
19455: PUSH
19456: LD_INT 0
19458: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19459: LD_STRING setGameSaveCounter(0)
19461: PPUSH
19462: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19466: LD_STRING initStreamRollete();
19468: PPUSH
19469: CALL_OW 559
// InitStreamMode ;
19473: CALL 20816 0 0
// DefineStreamItems ( false ) ;
19477: LD_INT 0
19479: PPUSH
19480: CALL 21280 0 1
// end ;
19484: END
// export function SOS_MapStart ( ) ; begin
19485: LD_INT 0
19487: PPUSH
// if streamModeActive then
19488: LD_EXP 47
19492: IFFALSE 19501
// DefineStreamItems ( true ) ;
19494: LD_INT 1
19496: PPUSH
19497: CALL 21280 0 1
// UpdateLuaVariables ( ) ;
19501: CALL 19518 0 0
// UpdateFactoryWaypoints ( ) ;
19505: CALL 34149 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19509: CALL 34406 0 0
// end ;
19513: LD_VAR 0 1
19517: RET
// function UpdateLuaVariables ( ) ; begin
19518: LD_INT 0
19520: PPUSH
// if globalGameSaveCounter then
19521: LD_EXP 46
19525: IFFALSE 19559
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19527: LD_ADDR_EXP 46
19531: PUSH
19532: LD_EXP 46
19536: PPUSH
19537: CALL 79191 0 1
19541: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19542: LD_STRING setGameSaveCounter(
19544: PUSH
19545: LD_EXP 46
19549: STR
19550: PUSH
19551: LD_STRING )
19553: STR
19554: PPUSH
19555: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19559: LD_STRING setGameDifficulty(
19561: PUSH
19562: LD_OWVAR 67
19566: STR
19567: PUSH
19568: LD_STRING )
19570: STR
19571: PPUSH
19572: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19576: LD_STRING displayDifficulty(
19578: PUSH
19579: LD_OWVAR 67
19583: STR
19584: PUSH
19585: LD_STRING )
19587: STR
19588: PPUSH
19589: CALL_OW 559
// end ;
19593: LD_VAR 0 1
19597: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19598: LD_INT 0
19600: PPUSH
// if p2 = stream_mode then
19601: LD_VAR 0 2
19605: PUSH
19606: LD_INT 100
19608: EQUAL
19609: IFFALSE 20612
// begin if not StreamModeActive then
19611: LD_EXP 47
19615: NOT
19616: IFFALSE 19626
// StreamModeActive := true ;
19618: LD_ADDR_EXP 47
19622: PUSH
19623: LD_INT 1
19625: ST_TO_ADDR
// if p3 = 0 then
19626: LD_VAR 0 3
19630: PUSH
19631: LD_INT 0
19633: EQUAL
19634: IFFALSE 19640
// InitStreamMode ;
19636: CALL 20816 0 0
// if p3 = 1 then
19640: LD_VAR 0 3
19644: PUSH
19645: LD_INT 1
19647: EQUAL
19648: IFFALSE 19658
// sRocket := true ;
19650: LD_ADDR_EXP 52
19654: PUSH
19655: LD_INT 1
19657: ST_TO_ADDR
// if p3 = 2 then
19658: LD_VAR 0 3
19662: PUSH
19663: LD_INT 2
19665: EQUAL
19666: IFFALSE 19676
// sSpeed := true ;
19668: LD_ADDR_EXP 51
19672: PUSH
19673: LD_INT 1
19675: ST_TO_ADDR
// if p3 = 3 then
19676: LD_VAR 0 3
19680: PUSH
19681: LD_INT 3
19683: EQUAL
19684: IFFALSE 19694
// sEngine := true ;
19686: LD_ADDR_EXP 53
19690: PUSH
19691: LD_INT 1
19693: ST_TO_ADDR
// if p3 = 4 then
19694: LD_VAR 0 3
19698: PUSH
19699: LD_INT 4
19701: EQUAL
19702: IFFALSE 19712
// sSpec := true ;
19704: LD_ADDR_EXP 50
19708: PUSH
19709: LD_INT 1
19711: ST_TO_ADDR
// if p3 = 5 then
19712: LD_VAR 0 3
19716: PUSH
19717: LD_INT 5
19719: EQUAL
19720: IFFALSE 19730
// sLevel := true ;
19722: LD_ADDR_EXP 54
19726: PUSH
19727: LD_INT 1
19729: ST_TO_ADDR
// if p3 = 6 then
19730: LD_VAR 0 3
19734: PUSH
19735: LD_INT 6
19737: EQUAL
19738: IFFALSE 19748
// sArmoury := true ;
19740: LD_ADDR_EXP 55
19744: PUSH
19745: LD_INT 1
19747: ST_TO_ADDR
// if p3 = 7 then
19748: LD_VAR 0 3
19752: PUSH
19753: LD_INT 7
19755: EQUAL
19756: IFFALSE 19766
// sRadar := true ;
19758: LD_ADDR_EXP 56
19762: PUSH
19763: LD_INT 1
19765: ST_TO_ADDR
// if p3 = 8 then
19766: LD_VAR 0 3
19770: PUSH
19771: LD_INT 8
19773: EQUAL
19774: IFFALSE 19784
// sBunker := true ;
19776: LD_ADDR_EXP 57
19780: PUSH
19781: LD_INT 1
19783: ST_TO_ADDR
// if p3 = 9 then
19784: LD_VAR 0 3
19788: PUSH
19789: LD_INT 9
19791: EQUAL
19792: IFFALSE 19802
// sHack := true ;
19794: LD_ADDR_EXP 58
19798: PUSH
19799: LD_INT 1
19801: ST_TO_ADDR
// if p3 = 10 then
19802: LD_VAR 0 3
19806: PUSH
19807: LD_INT 10
19809: EQUAL
19810: IFFALSE 19820
// sFire := true ;
19812: LD_ADDR_EXP 59
19816: PUSH
19817: LD_INT 1
19819: ST_TO_ADDR
// if p3 = 11 then
19820: LD_VAR 0 3
19824: PUSH
19825: LD_INT 11
19827: EQUAL
19828: IFFALSE 19838
// sRefresh := true ;
19830: LD_ADDR_EXP 60
19834: PUSH
19835: LD_INT 1
19837: ST_TO_ADDR
// if p3 = 12 then
19838: LD_VAR 0 3
19842: PUSH
19843: LD_INT 12
19845: EQUAL
19846: IFFALSE 19856
// sExp := true ;
19848: LD_ADDR_EXP 61
19852: PUSH
19853: LD_INT 1
19855: ST_TO_ADDR
// if p3 = 13 then
19856: LD_VAR 0 3
19860: PUSH
19861: LD_INT 13
19863: EQUAL
19864: IFFALSE 19874
// sDepot := true ;
19866: LD_ADDR_EXP 62
19870: PUSH
19871: LD_INT 1
19873: ST_TO_ADDR
// if p3 = 14 then
19874: LD_VAR 0 3
19878: PUSH
19879: LD_INT 14
19881: EQUAL
19882: IFFALSE 19892
// sFlag := true ;
19884: LD_ADDR_EXP 63
19888: PUSH
19889: LD_INT 1
19891: ST_TO_ADDR
// if p3 = 15 then
19892: LD_VAR 0 3
19896: PUSH
19897: LD_INT 15
19899: EQUAL
19900: IFFALSE 19910
// sKamikadze := true ;
19902: LD_ADDR_EXP 71
19906: PUSH
19907: LD_INT 1
19909: ST_TO_ADDR
// if p3 = 16 then
19910: LD_VAR 0 3
19914: PUSH
19915: LD_INT 16
19917: EQUAL
19918: IFFALSE 19928
// sTroll := true ;
19920: LD_ADDR_EXP 72
19924: PUSH
19925: LD_INT 1
19927: ST_TO_ADDR
// if p3 = 17 then
19928: LD_VAR 0 3
19932: PUSH
19933: LD_INT 17
19935: EQUAL
19936: IFFALSE 19946
// sSlow := true ;
19938: LD_ADDR_EXP 73
19942: PUSH
19943: LD_INT 1
19945: ST_TO_ADDR
// if p3 = 18 then
19946: LD_VAR 0 3
19950: PUSH
19951: LD_INT 18
19953: EQUAL
19954: IFFALSE 19964
// sLack := true ;
19956: LD_ADDR_EXP 74
19960: PUSH
19961: LD_INT 1
19963: ST_TO_ADDR
// if p3 = 19 then
19964: LD_VAR 0 3
19968: PUSH
19969: LD_INT 19
19971: EQUAL
19972: IFFALSE 19982
// sTank := true ;
19974: LD_ADDR_EXP 76
19978: PUSH
19979: LD_INT 1
19981: ST_TO_ADDR
// if p3 = 20 then
19982: LD_VAR 0 3
19986: PUSH
19987: LD_INT 20
19989: EQUAL
19990: IFFALSE 20000
// sRemote := true ;
19992: LD_ADDR_EXP 77
19996: PUSH
19997: LD_INT 1
19999: ST_TO_ADDR
// if p3 = 21 then
20000: LD_VAR 0 3
20004: PUSH
20005: LD_INT 21
20007: EQUAL
20008: IFFALSE 20018
// sPowell := true ;
20010: LD_ADDR_EXP 78
20014: PUSH
20015: LD_INT 1
20017: ST_TO_ADDR
// if p3 = 22 then
20018: LD_VAR 0 3
20022: PUSH
20023: LD_INT 22
20025: EQUAL
20026: IFFALSE 20036
// sTeleport := true ;
20028: LD_ADDR_EXP 81
20032: PUSH
20033: LD_INT 1
20035: ST_TO_ADDR
// if p3 = 23 then
20036: LD_VAR 0 3
20040: PUSH
20041: LD_INT 23
20043: EQUAL
20044: IFFALSE 20054
// sOilTower := true ;
20046: LD_ADDR_EXP 83
20050: PUSH
20051: LD_INT 1
20053: ST_TO_ADDR
// if p3 = 24 then
20054: LD_VAR 0 3
20058: PUSH
20059: LD_INT 24
20061: EQUAL
20062: IFFALSE 20072
// sShovel := true ;
20064: LD_ADDR_EXP 84
20068: PUSH
20069: LD_INT 1
20071: ST_TO_ADDR
// if p3 = 25 then
20072: LD_VAR 0 3
20076: PUSH
20077: LD_INT 25
20079: EQUAL
20080: IFFALSE 20090
// sSheik := true ;
20082: LD_ADDR_EXP 85
20086: PUSH
20087: LD_INT 1
20089: ST_TO_ADDR
// if p3 = 26 then
20090: LD_VAR 0 3
20094: PUSH
20095: LD_INT 26
20097: EQUAL
20098: IFFALSE 20108
// sEarthquake := true ;
20100: LD_ADDR_EXP 87
20104: PUSH
20105: LD_INT 1
20107: ST_TO_ADDR
// if p3 = 27 then
20108: LD_VAR 0 3
20112: PUSH
20113: LD_INT 27
20115: EQUAL
20116: IFFALSE 20126
// sAI := true ;
20118: LD_ADDR_EXP 88
20122: PUSH
20123: LD_INT 1
20125: ST_TO_ADDR
// if p3 = 28 then
20126: LD_VAR 0 3
20130: PUSH
20131: LD_INT 28
20133: EQUAL
20134: IFFALSE 20144
// sCargo := true ;
20136: LD_ADDR_EXP 91
20140: PUSH
20141: LD_INT 1
20143: ST_TO_ADDR
// if p3 = 29 then
20144: LD_VAR 0 3
20148: PUSH
20149: LD_INT 29
20151: EQUAL
20152: IFFALSE 20162
// sDLaser := true ;
20154: LD_ADDR_EXP 92
20158: PUSH
20159: LD_INT 1
20161: ST_TO_ADDR
// if p3 = 30 then
20162: LD_VAR 0 3
20166: PUSH
20167: LD_INT 30
20169: EQUAL
20170: IFFALSE 20180
// sExchange := true ;
20172: LD_ADDR_EXP 93
20176: PUSH
20177: LD_INT 1
20179: ST_TO_ADDR
// if p3 = 31 then
20180: LD_VAR 0 3
20184: PUSH
20185: LD_INT 31
20187: EQUAL
20188: IFFALSE 20198
// sFac := true ;
20190: LD_ADDR_EXP 94
20194: PUSH
20195: LD_INT 1
20197: ST_TO_ADDR
// if p3 = 32 then
20198: LD_VAR 0 3
20202: PUSH
20203: LD_INT 32
20205: EQUAL
20206: IFFALSE 20216
// sPower := true ;
20208: LD_ADDR_EXP 95
20212: PUSH
20213: LD_INT 1
20215: ST_TO_ADDR
// if p3 = 33 then
20216: LD_VAR 0 3
20220: PUSH
20221: LD_INT 33
20223: EQUAL
20224: IFFALSE 20234
// sRandom := true ;
20226: LD_ADDR_EXP 96
20230: PUSH
20231: LD_INT 1
20233: ST_TO_ADDR
// if p3 = 34 then
20234: LD_VAR 0 3
20238: PUSH
20239: LD_INT 34
20241: EQUAL
20242: IFFALSE 20252
// sShield := true ;
20244: LD_ADDR_EXP 97
20248: PUSH
20249: LD_INT 1
20251: ST_TO_ADDR
// if p3 = 35 then
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 35
20259: EQUAL
20260: IFFALSE 20270
// sTime := true ;
20262: LD_ADDR_EXP 98
20266: PUSH
20267: LD_INT 1
20269: ST_TO_ADDR
// if p3 = 36 then
20270: LD_VAR 0 3
20274: PUSH
20275: LD_INT 36
20277: EQUAL
20278: IFFALSE 20288
// sTools := true ;
20280: LD_ADDR_EXP 99
20284: PUSH
20285: LD_INT 1
20287: ST_TO_ADDR
// if p3 = 101 then
20288: LD_VAR 0 3
20292: PUSH
20293: LD_INT 101
20295: EQUAL
20296: IFFALSE 20306
// sSold := true ;
20298: LD_ADDR_EXP 64
20302: PUSH
20303: LD_INT 1
20305: ST_TO_ADDR
// if p3 = 102 then
20306: LD_VAR 0 3
20310: PUSH
20311: LD_INT 102
20313: EQUAL
20314: IFFALSE 20324
// sDiff := true ;
20316: LD_ADDR_EXP 65
20320: PUSH
20321: LD_INT 1
20323: ST_TO_ADDR
// if p3 = 103 then
20324: LD_VAR 0 3
20328: PUSH
20329: LD_INT 103
20331: EQUAL
20332: IFFALSE 20342
// sFog := true ;
20334: LD_ADDR_EXP 68
20338: PUSH
20339: LD_INT 1
20341: ST_TO_ADDR
// if p3 = 104 then
20342: LD_VAR 0 3
20346: PUSH
20347: LD_INT 104
20349: EQUAL
20350: IFFALSE 20360
// sReset := true ;
20352: LD_ADDR_EXP 69
20356: PUSH
20357: LD_INT 1
20359: ST_TO_ADDR
// if p3 = 105 then
20360: LD_VAR 0 3
20364: PUSH
20365: LD_INT 105
20367: EQUAL
20368: IFFALSE 20378
// sSun := true ;
20370: LD_ADDR_EXP 70
20374: PUSH
20375: LD_INT 1
20377: ST_TO_ADDR
// if p3 = 106 then
20378: LD_VAR 0 3
20382: PUSH
20383: LD_INT 106
20385: EQUAL
20386: IFFALSE 20396
// sTiger := true ;
20388: LD_ADDR_EXP 66
20392: PUSH
20393: LD_INT 1
20395: ST_TO_ADDR
// if p3 = 107 then
20396: LD_VAR 0 3
20400: PUSH
20401: LD_INT 107
20403: EQUAL
20404: IFFALSE 20414
// sBomb := true ;
20406: LD_ADDR_EXP 67
20410: PUSH
20411: LD_INT 1
20413: ST_TO_ADDR
// if p3 = 108 then
20414: LD_VAR 0 3
20418: PUSH
20419: LD_INT 108
20421: EQUAL
20422: IFFALSE 20432
// sWound := true ;
20424: LD_ADDR_EXP 75
20428: PUSH
20429: LD_INT 1
20431: ST_TO_ADDR
// if p3 = 109 then
20432: LD_VAR 0 3
20436: PUSH
20437: LD_INT 109
20439: EQUAL
20440: IFFALSE 20450
// sBetray := true ;
20442: LD_ADDR_EXP 79
20446: PUSH
20447: LD_INT 1
20449: ST_TO_ADDR
// if p3 = 110 then
20450: LD_VAR 0 3
20454: PUSH
20455: LD_INT 110
20457: EQUAL
20458: IFFALSE 20468
// sContamin := true ;
20460: LD_ADDR_EXP 80
20464: PUSH
20465: LD_INT 1
20467: ST_TO_ADDR
// if p3 = 111 then
20468: LD_VAR 0 3
20472: PUSH
20473: LD_INT 111
20475: EQUAL
20476: IFFALSE 20486
// sOil := true ;
20478: LD_ADDR_EXP 82
20482: PUSH
20483: LD_INT 1
20485: ST_TO_ADDR
// if p3 = 112 then
20486: LD_VAR 0 3
20490: PUSH
20491: LD_INT 112
20493: EQUAL
20494: IFFALSE 20504
// sStu := true ;
20496: LD_ADDR_EXP 86
20500: PUSH
20501: LD_INT 1
20503: ST_TO_ADDR
// if p3 = 113 then
20504: LD_VAR 0 3
20508: PUSH
20509: LD_INT 113
20511: EQUAL
20512: IFFALSE 20522
// sBazooka := true ;
20514: LD_ADDR_EXP 89
20518: PUSH
20519: LD_INT 1
20521: ST_TO_ADDR
// if p3 = 114 then
20522: LD_VAR 0 3
20526: PUSH
20527: LD_INT 114
20529: EQUAL
20530: IFFALSE 20540
// sMortar := true ;
20532: LD_ADDR_EXP 90
20536: PUSH
20537: LD_INT 1
20539: ST_TO_ADDR
// if p3 = 115 then
20540: LD_VAR 0 3
20544: PUSH
20545: LD_INT 115
20547: EQUAL
20548: IFFALSE 20558
// sRanger := true ;
20550: LD_ADDR_EXP 100
20554: PUSH
20555: LD_INT 1
20557: ST_TO_ADDR
// if p3 = 116 then
20558: LD_VAR 0 3
20562: PUSH
20563: LD_INT 116
20565: EQUAL
20566: IFFALSE 20576
// sComputer := true ;
20568: LD_ADDR_EXP 101
20572: PUSH
20573: LD_INT 1
20575: ST_TO_ADDR
// if p3 = 117 then
20576: LD_VAR 0 3
20580: PUSH
20581: LD_INT 117
20583: EQUAL
20584: IFFALSE 20594
// s30 := true ;
20586: LD_ADDR_EXP 102
20590: PUSH
20591: LD_INT 1
20593: ST_TO_ADDR
// if p3 = 118 then
20594: LD_VAR 0 3
20598: PUSH
20599: LD_INT 118
20601: EQUAL
20602: IFFALSE 20612
// s60 := true ;
20604: LD_ADDR_EXP 103
20608: PUSH
20609: LD_INT 1
20611: ST_TO_ADDR
// end ; if p2 = hack_mode then
20612: LD_VAR 0 2
20616: PUSH
20617: LD_INT 101
20619: EQUAL
20620: IFFALSE 20748
// begin case p3 of 1 :
20622: LD_VAR 0 3
20626: PUSH
20627: LD_INT 1
20629: DOUBLE
20630: EQUAL
20631: IFTRUE 20635
20633: GO 20642
20635: POP
// hHackUnlimitedResources ; 2 :
20636: CALL 32895 0 0
20640: GO 20748
20642: LD_INT 2
20644: DOUBLE
20645: EQUAL
20646: IFTRUE 20650
20648: GO 20657
20650: POP
// hHackSetLevel10 ; 3 :
20651: CALL 33028 0 0
20655: GO 20748
20657: LD_INT 3
20659: DOUBLE
20660: EQUAL
20661: IFTRUE 20665
20663: GO 20672
20665: POP
// hHackSetLevel10YourUnits ; 4 :
20666: CALL 33113 0 0
20670: GO 20748
20672: LD_INT 4
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20687
20680: POP
// hHackInvincible ; 5 :
20681: CALL 33561 0 0
20685: GO 20748
20687: LD_INT 5
20689: DOUBLE
20690: EQUAL
20691: IFTRUE 20695
20693: GO 20702
20695: POP
// hHackInvisible ; 6 :
20696: CALL 33672 0 0
20700: GO 20748
20702: LD_INT 6
20704: DOUBLE
20705: EQUAL
20706: IFTRUE 20710
20708: GO 20717
20710: POP
// hHackChangeYourSide ; 7 :
20711: CALL 33729 0 0
20715: GO 20748
20717: LD_INT 7
20719: DOUBLE
20720: EQUAL
20721: IFTRUE 20725
20723: GO 20732
20725: POP
// hHackChangeUnitSide ; 8 :
20726: CALL 33771 0 0
20730: GO 20748
20732: LD_INT 8
20734: DOUBLE
20735: EQUAL
20736: IFTRUE 20740
20738: GO 20747
20740: POP
// hHackFog ; end ;
20741: CALL 33872 0 0
20745: GO 20748
20747: POP
// end ; if p2 = game_save_mode then
20748: LD_VAR 0 2
20752: PUSH
20753: LD_INT 102
20755: EQUAL
20756: IFFALSE 20811
// begin if p3 = 1 then
20758: LD_VAR 0 3
20762: PUSH
20763: LD_INT 1
20765: EQUAL
20766: IFFALSE 20778
// globalGameSaveCounter := p4 ;
20768: LD_ADDR_EXP 46
20772: PUSH
20773: LD_VAR 0 4
20777: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20778: LD_VAR 0 3
20782: PUSH
20783: LD_INT 2
20785: EQUAL
20786: PUSH
20787: LD_EXP 46
20791: AND
20792: IFFALSE 20811
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20794: LD_STRING setGameSaveCounter(
20796: PUSH
20797: LD_EXP 46
20801: STR
20802: PUSH
20803: LD_STRING )
20805: STR
20806: PPUSH
20807: CALL_OW 559
// end ; end ;
20811: LD_VAR 0 7
20815: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20816: LD_INT 0
20818: PPUSH
// streamModeActive := false ;
20819: LD_ADDR_EXP 47
20823: PUSH
20824: LD_INT 0
20826: ST_TO_ADDR
// normalCounter := 36 ;
20827: LD_ADDR_EXP 48
20831: PUSH
20832: LD_INT 36
20834: ST_TO_ADDR
// hardcoreCounter := 18 ;
20835: LD_ADDR_EXP 49
20839: PUSH
20840: LD_INT 18
20842: ST_TO_ADDR
// sRocket := false ;
20843: LD_ADDR_EXP 52
20847: PUSH
20848: LD_INT 0
20850: ST_TO_ADDR
// sSpeed := false ;
20851: LD_ADDR_EXP 51
20855: PUSH
20856: LD_INT 0
20858: ST_TO_ADDR
// sEngine := false ;
20859: LD_ADDR_EXP 53
20863: PUSH
20864: LD_INT 0
20866: ST_TO_ADDR
// sSpec := false ;
20867: LD_ADDR_EXP 50
20871: PUSH
20872: LD_INT 0
20874: ST_TO_ADDR
// sLevel := false ;
20875: LD_ADDR_EXP 54
20879: PUSH
20880: LD_INT 0
20882: ST_TO_ADDR
// sArmoury := false ;
20883: LD_ADDR_EXP 55
20887: PUSH
20888: LD_INT 0
20890: ST_TO_ADDR
// sRadar := false ;
20891: LD_ADDR_EXP 56
20895: PUSH
20896: LD_INT 0
20898: ST_TO_ADDR
// sBunker := false ;
20899: LD_ADDR_EXP 57
20903: PUSH
20904: LD_INT 0
20906: ST_TO_ADDR
// sHack := false ;
20907: LD_ADDR_EXP 58
20911: PUSH
20912: LD_INT 0
20914: ST_TO_ADDR
// sFire := false ;
20915: LD_ADDR_EXP 59
20919: PUSH
20920: LD_INT 0
20922: ST_TO_ADDR
// sRefresh := false ;
20923: LD_ADDR_EXP 60
20927: PUSH
20928: LD_INT 0
20930: ST_TO_ADDR
// sExp := false ;
20931: LD_ADDR_EXP 61
20935: PUSH
20936: LD_INT 0
20938: ST_TO_ADDR
// sDepot := false ;
20939: LD_ADDR_EXP 62
20943: PUSH
20944: LD_INT 0
20946: ST_TO_ADDR
// sFlag := false ;
20947: LD_ADDR_EXP 63
20951: PUSH
20952: LD_INT 0
20954: ST_TO_ADDR
// sKamikadze := false ;
20955: LD_ADDR_EXP 71
20959: PUSH
20960: LD_INT 0
20962: ST_TO_ADDR
// sTroll := false ;
20963: LD_ADDR_EXP 72
20967: PUSH
20968: LD_INT 0
20970: ST_TO_ADDR
// sSlow := false ;
20971: LD_ADDR_EXP 73
20975: PUSH
20976: LD_INT 0
20978: ST_TO_ADDR
// sLack := false ;
20979: LD_ADDR_EXP 74
20983: PUSH
20984: LD_INT 0
20986: ST_TO_ADDR
// sTank := false ;
20987: LD_ADDR_EXP 76
20991: PUSH
20992: LD_INT 0
20994: ST_TO_ADDR
// sRemote := false ;
20995: LD_ADDR_EXP 77
20999: PUSH
21000: LD_INT 0
21002: ST_TO_ADDR
// sPowell := false ;
21003: LD_ADDR_EXP 78
21007: PUSH
21008: LD_INT 0
21010: ST_TO_ADDR
// sTeleport := false ;
21011: LD_ADDR_EXP 81
21015: PUSH
21016: LD_INT 0
21018: ST_TO_ADDR
// sOilTower := false ;
21019: LD_ADDR_EXP 83
21023: PUSH
21024: LD_INT 0
21026: ST_TO_ADDR
// sShovel := false ;
21027: LD_ADDR_EXP 84
21031: PUSH
21032: LD_INT 0
21034: ST_TO_ADDR
// sSheik := false ;
21035: LD_ADDR_EXP 85
21039: PUSH
21040: LD_INT 0
21042: ST_TO_ADDR
// sEarthquake := false ;
21043: LD_ADDR_EXP 87
21047: PUSH
21048: LD_INT 0
21050: ST_TO_ADDR
// sAI := false ;
21051: LD_ADDR_EXP 88
21055: PUSH
21056: LD_INT 0
21058: ST_TO_ADDR
// sCargo := false ;
21059: LD_ADDR_EXP 91
21063: PUSH
21064: LD_INT 0
21066: ST_TO_ADDR
// sDLaser := false ;
21067: LD_ADDR_EXP 92
21071: PUSH
21072: LD_INT 0
21074: ST_TO_ADDR
// sExchange := false ;
21075: LD_ADDR_EXP 93
21079: PUSH
21080: LD_INT 0
21082: ST_TO_ADDR
// sFac := false ;
21083: LD_ADDR_EXP 94
21087: PUSH
21088: LD_INT 0
21090: ST_TO_ADDR
// sPower := false ;
21091: LD_ADDR_EXP 95
21095: PUSH
21096: LD_INT 0
21098: ST_TO_ADDR
// sRandom := false ;
21099: LD_ADDR_EXP 96
21103: PUSH
21104: LD_INT 0
21106: ST_TO_ADDR
// sShield := false ;
21107: LD_ADDR_EXP 97
21111: PUSH
21112: LD_INT 0
21114: ST_TO_ADDR
// sTime := false ;
21115: LD_ADDR_EXP 98
21119: PUSH
21120: LD_INT 0
21122: ST_TO_ADDR
// sTools := false ;
21123: LD_ADDR_EXP 99
21127: PUSH
21128: LD_INT 0
21130: ST_TO_ADDR
// sSold := false ;
21131: LD_ADDR_EXP 64
21135: PUSH
21136: LD_INT 0
21138: ST_TO_ADDR
// sDiff := false ;
21139: LD_ADDR_EXP 65
21143: PUSH
21144: LD_INT 0
21146: ST_TO_ADDR
// sFog := false ;
21147: LD_ADDR_EXP 68
21151: PUSH
21152: LD_INT 0
21154: ST_TO_ADDR
// sReset := false ;
21155: LD_ADDR_EXP 69
21159: PUSH
21160: LD_INT 0
21162: ST_TO_ADDR
// sSun := false ;
21163: LD_ADDR_EXP 70
21167: PUSH
21168: LD_INT 0
21170: ST_TO_ADDR
// sTiger := false ;
21171: LD_ADDR_EXP 66
21175: PUSH
21176: LD_INT 0
21178: ST_TO_ADDR
// sBomb := false ;
21179: LD_ADDR_EXP 67
21183: PUSH
21184: LD_INT 0
21186: ST_TO_ADDR
// sWound := false ;
21187: LD_ADDR_EXP 75
21191: PUSH
21192: LD_INT 0
21194: ST_TO_ADDR
// sBetray := false ;
21195: LD_ADDR_EXP 79
21199: PUSH
21200: LD_INT 0
21202: ST_TO_ADDR
// sContamin := false ;
21203: LD_ADDR_EXP 80
21207: PUSH
21208: LD_INT 0
21210: ST_TO_ADDR
// sOil := false ;
21211: LD_ADDR_EXP 82
21215: PUSH
21216: LD_INT 0
21218: ST_TO_ADDR
// sStu := false ;
21219: LD_ADDR_EXP 86
21223: PUSH
21224: LD_INT 0
21226: ST_TO_ADDR
// sBazooka := false ;
21227: LD_ADDR_EXP 89
21231: PUSH
21232: LD_INT 0
21234: ST_TO_ADDR
// sMortar := false ;
21235: LD_ADDR_EXP 90
21239: PUSH
21240: LD_INT 0
21242: ST_TO_ADDR
// sRanger := false ;
21243: LD_ADDR_EXP 100
21247: PUSH
21248: LD_INT 0
21250: ST_TO_ADDR
// sComputer := false ;
21251: LD_ADDR_EXP 101
21255: PUSH
21256: LD_INT 0
21258: ST_TO_ADDR
// s30 := false ;
21259: LD_ADDR_EXP 102
21263: PUSH
21264: LD_INT 0
21266: ST_TO_ADDR
// s60 := false ;
21267: LD_ADDR_EXP 103
21271: PUSH
21272: LD_INT 0
21274: ST_TO_ADDR
// end ;
21275: LD_VAR 0 1
21279: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21280: LD_INT 0
21282: PPUSH
21283: PPUSH
21284: PPUSH
21285: PPUSH
21286: PPUSH
21287: PPUSH
21288: PPUSH
// result := [ ] ;
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: EMPTY
21295: ST_TO_ADDR
// if campaign_id = 1 then
21296: LD_OWVAR 69
21300: PUSH
21301: LD_INT 1
21303: EQUAL
21304: IFFALSE 24470
// begin case mission_number of 1 :
21306: LD_OWVAR 70
21310: PUSH
21311: LD_INT 1
21313: DOUBLE
21314: EQUAL
21315: IFTRUE 21319
21317: GO 21395
21319: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21320: LD_ADDR_VAR 0 2
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 4
21330: PUSH
21331: LD_INT 11
21333: PUSH
21334: LD_INT 12
21336: PUSH
21337: LD_INT 15
21339: PUSH
21340: LD_INT 16
21342: PUSH
21343: LD_INT 22
21345: PUSH
21346: LD_INT 23
21348: PUSH
21349: LD_INT 26
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 101
21365: PUSH
21366: LD_INT 102
21368: PUSH
21369: LD_INT 106
21371: PUSH
21372: LD_INT 116
21374: PUSH
21375: LD_INT 117
21377: PUSH
21378: LD_INT 118
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: ST_TO_ADDR
21393: GO 24468
21395: LD_INT 2
21397: DOUBLE
21398: EQUAL
21399: IFTRUE 21403
21401: GO 21487
21403: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21404: LD_ADDR_VAR 0 2
21408: PUSH
21409: LD_INT 2
21411: PUSH
21412: LD_INT 4
21414: PUSH
21415: LD_INT 11
21417: PUSH
21418: LD_INT 12
21420: PUSH
21421: LD_INT 15
21423: PUSH
21424: LD_INT 16
21426: PUSH
21427: LD_INT 22
21429: PUSH
21430: LD_INT 23
21432: PUSH
21433: LD_INT 26
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 101
21449: PUSH
21450: LD_INT 102
21452: PUSH
21453: LD_INT 105
21455: PUSH
21456: LD_INT 106
21458: PUSH
21459: LD_INT 108
21461: PUSH
21462: LD_INT 116
21464: PUSH
21465: LD_INT 117
21467: PUSH
21468: LD_INT 118
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: ST_TO_ADDR
21485: GO 24468
21487: LD_INT 3
21489: DOUBLE
21490: EQUAL
21491: IFTRUE 21495
21493: GO 21583
21495: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21496: LD_ADDR_VAR 0 2
21500: PUSH
21501: LD_INT 2
21503: PUSH
21504: LD_INT 4
21506: PUSH
21507: LD_INT 5
21509: PUSH
21510: LD_INT 11
21512: PUSH
21513: LD_INT 12
21515: PUSH
21516: LD_INT 15
21518: PUSH
21519: LD_INT 16
21521: PUSH
21522: LD_INT 22
21524: PUSH
21525: LD_INT 26
21527: PUSH
21528: LD_INT 36
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 101
21545: PUSH
21546: LD_INT 102
21548: PUSH
21549: LD_INT 105
21551: PUSH
21552: LD_INT 106
21554: PUSH
21555: LD_INT 108
21557: PUSH
21558: LD_INT 116
21560: PUSH
21561: LD_INT 117
21563: PUSH
21564: LD_INT 118
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: ST_TO_ADDR
21581: GO 24468
21583: LD_INT 4
21585: DOUBLE
21586: EQUAL
21587: IFTRUE 21591
21589: GO 21687
21591: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21592: LD_ADDR_VAR 0 2
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: LD_INT 4
21602: PUSH
21603: LD_INT 5
21605: PUSH
21606: LD_INT 8
21608: PUSH
21609: LD_INT 11
21611: PUSH
21612: LD_INT 12
21614: PUSH
21615: LD_INT 15
21617: PUSH
21618: LD_INT 16
21620: PUSH
21621: LD_INT 22
21623: PUSH
21624: LD_INT 23
21626: PUSH
21627: LD_INT 26
21629: PUSH
21630: LD_INT 36
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 101
21649: PUSH
21650: LD_INT 102
21652: PUSH
21653: LD_INT 105
21655: PUSH
21656: LD_INT 106
21658: PUSH
21659: LD_INT 108
21661: PUSH
21662: LD_INT 116
21664: PUSH
21665: LD_INT 117
21667: PUSH
21668: LD_INT 118
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: ST_TO_ADDR
21685: GO 24468
21687: LD_INT 5
21689: DOUBLE
21690: EQUAL
21691: IFTRUE 21695
21693: GO 21807
21695: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21696: LD_ADDR_VAR 0 2
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: LD_INT 4
21706: PUSH
21707: LD_INT 5
21709: PUSH
21710: LD_INT 6
21712: PUSH
21713: LD_INT 8
21715: PUSH
21716: LD_INT 11
21718: PUSH
21719: LD_INT 12
21721: PUSH
21722: LD_INT 15
21724: PUSH
21725: LD_INT 16
21727: PUSH
21728: LD_INT 22
21730: PUSH
21731: LD_INT 23
21733: PUSH
21734: LD_INT 25
21736: PUSH
21737: LD_INT 26
21739: PUSH
21740: LD_INT 36
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 101
21761: PUSH
21762: LD_INT 102
21764: PUSH
21765: LD_INT 105
21767: PUSH
21768: LD_INT 106
21770: PUSH
21771: LD_INT 108
21773: PUSH
21774: LD_INT 109
21776: PUSH
21777: LD_INT 112
21779: PUSH
21780: LD_INT 116
21782: PUSH
21783: LD_INT 117
21785: PUSH
21786: LD_INT 118
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: ST_TO_ADDR
21805: GO 24468
21807: LD_INT 6
21809: DOUBLE
21810: EQUAL
21811: IFTRUE 21815
21813: GO 21947
21815: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21816: LD_ADDR_VAR 0 2
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: LD_INT 4
21826: PUSH
21827: LD_INT 5
21829: PUSH
21830: LD_INT 6
21832: PUSH
21833: LD_INT 8
21835: PUSH
21836: LD_INT 11
21838: PUSH
21839: LD_INT 12
21841: PUSH
21842: LD_INT 15
21844: PUSH
21845: LD_INT 16
21847: PUSH
21848: LD_INT 20
21850: PUSH
21851: LD_INT 21
21853: PUSH
21854: LD_INT 22
21856: PUSH
21857: LD_INT 23
21859: PUSH
21860: LD_INT 25
21862: PUSH
21863: LD_INT 26
21865: PUSH
21866: LD_INT 30
21868: PUSH
21869: LD_INT 31
21871: PUSH
21872: LD_INT 32
21874: PUSH
21875: LD_INT 36
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 101
21901: PUSH
21902: LD_INT 102
21904: PUSH
21905: LD_INT 105
21907: PUSH
21908: LD_INT 106
21910: PUSH
21911: LD_INT 108
21913: PUSH
21914: LD_INT 109
21916: PUSH
21917: LD_INT 112
21919: PUSH
21920: LD_INT 116
21922: PUSH
21923: LD_INT 117
21925: PUSH
21926: LD_INT 118
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: ST_TO_ADDR
21945: GO 24468
21947: LD_INT 7
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 22067
21955: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21956: LD_ADDR_VAR 0 2
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: LD_INT 4
21966: PUSH
21967: LD_INT 5
21969: PUSH
21970: LD_INT 7
21972: PUSH
21973: LD_INT 11
21975: PUSH
21976: LD_INT 12
21978: PUSH
21979: LD_INT 15
21981: PUSH
21982: LD_INT 16
21984: PUSH
21985: LD_INT 20
21987: PUSH
21988: LD_INT 21
21990: PUSH
21991: LD_INT 22
21993: PUSH
21994: LD_INT 23
21996: PUSH
21997: LD_INT 25
21999: PUSH
22000: LD_INT 26
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 101
22021: PUSH
22022: LD_INT 102
22024: PUSH
22025: LD_INT 103
22027: PUSH
22028: LD_INT 105
22030: PUSH
22031: LD_INT 106
22033: PUSH
22034: LD_INT 108
22036: PUSH
22037: LD_INT 112
22039: PUSH
22040: LD_INT 116
22042: PUSH
22043: LD_INT 117
22045: PUSH
22046: LD_INT 118
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: ST_TO_ADDR
22065: GO 24468
22067: LD_INT 8
22069: DOUBLE
22070: EQUAL
22071: IFTRUE 22075
22073: GO 22215
22075: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 4
22086: PUSH
22087: LD_INT 5
22089: PUSH
22090: LD_INT 6
22092: PUSH
22093: LD_INT 7
22095: PUSH
22096: LD_INT 8
22098: PUSH
22099: LD_INT 11
22101: PUSH
22102: LD_INT 12
22104: PUSH
22105: LD_INT 15
22107: PUSH
22108: LD_INT 16
22110: PUSH
22111: LD_INT 20
22113: PUSH
22114: LD_INT 21
22116: PUSH
22117: LD_INT 22
22119: PUSH
22120: LD_INT 23
22122: PUSH
22123: LD_INT 25
22125: PUSH
22126: LD_INT 26
22128: PUSH
22129: LD_INT 30
22131: PUSH
22132: LD_INT 31
22134: PUSH
22135: LD_INT 32
22137: PUSH
22138: LD_INT 36
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 101
22165: PUSH
22166: LD_INT 102
22168: PUSH
22169: LD_INT 103
22171: PUSH
22172: LD_INT 105
22174: PUSH
22175: LD_INT 106
22177: PUSH
22178: LD_INT 108
22180: PUSH
22181: LD_INT 109
22183: PUSH
22184: LD_INT 112
22186: PUSH
22187: LD_INT 116
22189: PUSH
22190: LD_INT 117
22192: PUSH
22193: LD_INT 118
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: ST_TO_ADDR
22213: GO 24468
22215: LD_INT 9
22217: DOUBLE
22218: EQUAL
22219: IFTRUE 22223
22221: GO 22371
22223: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22224: LD_ADDR_VAR 0 2
22228: PUSH
22229: LD_INT 2
22231: PUSH
22232: LD_INT 4
22234: PUSH
22235: LD_INT 5
22237: PUSH
22238: LD_INT 6
22240: PUSH
22241: LD_INT 7
22243: PUSH
22244: LD_INT 8
22246: PUSH
22247: LD_INT 11
22249: PUSH
22250: LD_INT 12
22252: PUSH
22253: LD_INT 15
22255: PUSH
22256: LD_INT 16
22258: PUSH
22259: LD_INT 20
22261: PUSH
22262: LD_INT 21
22264: PUSH
22265: LD_INT 22
22267: PUSH
22268: LD_INT 23
22270: PUSH
22271: LD_INT 25
22273: PUSH
22274: LD_INT 26
22276: PUSH
22277: LD_INT 28
22279: PUSH
22280: LD_INT 30
22282: PUSH
22283: LD_INT 31
22285: PUSH
22286: LD_INT 32
22288: PUSH
22289: LD_INT 36
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 101
22317: PUSH
22318: LD_INT 102
22320: PUSH
22321: LD_INT 103
22323: PUSH
22324: LD_INT 105
22326: PUSH
22327: LD_INT 106
22329: PUSH
22330: LD_INT 108
22332: PUSH
22333: LD_INT 109
22335: PUSH
22336: LD_INT 112
22338: PUSH
22339: LD_INT 114
22341: PUSH
22342: LD_INT 116
22344: PUSH
22345: LD_INT 117
22347: PUSH
22348: LD_INT 118
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: ST_TO_ADDR
22369: GO 24468
22371: LD_INT 10
22373: DOUBLE
22374: EQUAL
22375: IFTRUE 22379
22377: GO 22575
22379: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22380: LD_ADDR_VAR 0 2
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: LD_INT 4
22390: PUSH
22391: LD_INT 5
22393: PUSH
22394: LD_INT 6
22396: PUSH
22397: LD_INT 7
22399: PUSH
22400: LD_INT 8
22402: PUSH
22403: LD_INT 9
22405: PUSH
22406: LD_INT 10
22408: PUSH
22409: LD_INT 11
22411: PUSH
22412: LD_INT 12
22414: PUSH
22415: LD_INT 13
22417: PUSH
22418: LD_INT 14
22420: PUSH
22421: LD_INT 15
22423: PUSH
22424: LD_INT 16
22426: PUSH
22427: LD_INT 17
22429: PUSH
22430: LD_INT 18
22432: PUSH
22433: LD_INT 19
22435: PUSH
22436: LD_INT 20
22438: PUSH
22439: LD_INT 21
22441: PUSH
22442: LD_INT 22
22444: PUSH
22445: LD_INT 23
22447: PUSH
22448: LD_INT 24
22450: PUSH
22451: LD_INT 25
22453: PUSH
22454: LD_INT 26
22456: PUSH
22457: LD_INT 28
22459: PUSH
22460: LD_INT 30
22462: PUSH
22463: LD_INT 31
22465: PUSH
22466: LD_INT 32
22468: PUSH
22469: LD_INT 36
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 101
22505: PUSH
22506: LD_INT 102
22508: PUSH
22509: LD_INT 103
22511: PUSH
22512: LD_INT 104
22514: PUSH
22515: LD_INT 105
22517: PUSH
22518: LD_INT 106
22520: PUSH
22521: LD_INT 107
22523: PUSH
22524: LD_INT 108
22526: PUSH
22527: LD_INT 109
22529: PUSH
22530: LD_INT 110
22532: PUSH
22533: LD_INT 111
22535: PUSH
22536: LD_INT 112
22538: PUSH
22539: LD_INT 114
22541: PUSH
22542: LD_INT 116
22544: PUSH
22545: LD_INT 117
22547: PUSH
22548: LD_INT 118
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: ST_TO_ADDR
22573: GO 24468
22575: LD_INT 11
22577: DOUBLE
22578: EQUAL
22579: IFTRUE 22583
22581: GO 22787
22583: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22584: LD_ADDR_VAR 0 2
22588: PUSH
22589: LD_INT 2
22591: PUSH
22592: LD_INT 3
22594: PUSH
22595: LD_INT 4
22597: PUSH
22598: LD_INT 5
22600: PUSH
22601: LD_INT 6
22603: PUSH
22604: LD_INT 7
22606: PUSH
22607: LD_INT 8
22609: PUSH
22610: LD_INT 9
22612: PUSH
22613: LD_INT 10
22615: PUSH
22616: LD_INT 11
22618: PUSH
22619: LD_INT 12
22621: PUSH
22622: LD_INT 13
22624: PUSH
22625: LD_INT 14
22627: PUSH
22628: LD_INT 15
22630: PUSH
22631: LD_INT 16
22633: PUSH
22634: LD_INT 17
22636: PUSH
22637: LD_INT 18
22639: PUSH
22640: LD_INT 19
22642: PUSH
22643: LD_INT 20
22645: PUSH
22646: LD_INT 21
22648: PUSH
22649: LD_INT 22
22651: PUSH
22652: LD_INT 23
22654: PUSH
22655: LD_INT 24
22657: PUSH
22658: LD_INT 25
22660: PUSH
22661: LD_INT 26
22663: PUSH
22664: LD_INT 28
22666: PUSH
22667: LD_INT 30
22669: PUSH
22670: LD_INT 31
22672: PUSH
22673: LD_INT 32
22675: PUSH
22676: LD_INT 34
22678: PUSH
22679: LD_INT 36
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 101
22717: PUSH
22718: LD_INT 102
22720: PUSH
22721: LD_INT 103
22723: PUSH
22724: LD_INT 104
22726: PUSH
22727: LD_INT 105
22729: PUSH
22730: LD_INT 106
22732: PUSH
22733: LD_INT 107
22735: PUSH
22736: LD_INT 108
22738: PUSH
22739: LD_INT 109
22741: PUSH
22742: LD_INT 110
22744: PUSH
22745: LD_INT 111
22747: PUSH
22748: LD_INT 112
22750: PUSH
22751: LD_INT 114
22753: PUSH
22754: LD_INT 116
22756: PUSH
22757: LD_INT 117
22759: PUSH
22760: LD_INT 118
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: ST_TO_ADDR
22785: GO 24468
22787: LD_INT 12
22789: DOUBLE
22790: EQUAL
22791: IFTRUE 22795
22793: GO 23015
22795: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22796: LD_ADDR_VAR 0 2
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 2
22806: PUSH
22807: LD_INT 3
22809: PUSH
22810: LD_INT 4
22812: PUSH
22813: LD_INT 5
22815: PUSH
22816: LD_INT 6
22818: PUSH
22819: LD_INT 7
22821: PUSH
22822: LD_INT 8
22824: PUSH
22825: LD_INT 9
22827: PUSH
22828: LD_INT 10
22830: PUSH
22831: LD_INT 11
22833: PUSH
22834: LD_INT 12
22836: PUSH
22837: LD_INT 13
22839: PUSH
22840: LD_INT 14
22842: PUSH
22843: LD_INT 15
22845: PUSH
22846: LD_INT 16
22848: PUSH
22849: LD_INT 17
22851: PUSH
22852: LD_INT 18
22854: PUSH
22855: LD_INT 19
22857: PUSH
22858: LD_INT 20
22860: PUSH
22861: LD_INT 21
22863: PUSH
22864: LD_INT 22
22866: PUSH
22867: LD_INT 23
22869: PUSH
22870: LD_INT 24
22872: PUSH
22873: LD_INT 25
22875: PUSH
22876: LD_INT 26
22878: PUSH
22879: LD_INT 27
22881: PUSH
22882: LD_INT 28
22884: PUSH
22885: LD_INT 30
22887: PUSH
22888: LD_INT 31
22890: PUSH
22891: LD_INT 32
22893: PUSH
22894: LD_INT 33
22896: PUSH
22897: LD_INT 34
22899: PUSH
22900: LD_INT 36
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 101
22941: PUSH
22942: LD_INT 102
22944: PUSH
22945: LD_INT 103
22947: PUSH
22948: LD_INT 104
22950: PUSH
22951: LD_INT 105
22953: PUSH
22954: LD_INT 106
22956: PUSH
22957: LD_INT 107
22959: PUSH
22960: LD_INT 108
22962: PUSH
22963: LD_INT 109
22965: PUSH
22966: LD_INT 110
22968: PUSH
22969: LD_INT 111
22971: PUSH
22972: LD_INT 112
22974: PUSH
22975: LD_INT 113
22977: PUSH
22978: LD_INT 114
22980: PUSH
22981: LD_INT 116
22983: PUSH
22984: LD_INT 117
22986: PUSH
22987: LD_INT 118
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: ST_TO_ADDR
23013: GO 24468
23015: LD_INT 13
23017: DOUBLE
23018: EQUAL
23019: IFTRUE 23023
23021: GO 23231
23023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23024: LD_ADDR_VAR 0 2
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: LD_INT 2
23034: PUSH
23035: LD_INT 3
23037: PUSH
23038: LD_INT 4
23040: PUSH
23041: LD_INT 5
23043: PUSH
23044: LD_INT 8
23046: PUSH
23047: LD_INT 9
23049: PUSH
23050: LD_INT 10
23052: PUSH
23053: LD_INT 11
23055: PUSH
23056: LD_INT 12
23058: PUSH
23059: LD_INT 14
23061: PUSH
23062: LD_INT 15
23064: PUSH
23065: LD_INT 16
23067: PUSH
23068: LD_INT 17
23070: PUSH
23071: LD_INT 18
23073: PUSH
23074: LD_INT 19
23076: PUSH
23077: LD_INT 20
23079: PUSH
23080: LD_INT 21
23082: PUSH
23083: LD_INT 22
23085: PUSH
23086: LD_INT 23
23088: PUSH
23089: LD_INT 24
23091: PUSH
23092: LD_INT 25
23094: PUSH
23095: LD_INT 26
23097: PUSH
23098: LD_INT 27
23100: PUSH
23101: LD_INT 28
23103: PUSH
23104: LD_INT 30
23106: PUSH
23107: LD_INT 31
23109: PUSH
23110: LD_INT 32
23112: PUSH
23113: LD_INT 33
23115: PUSH
23116: LD_INT 34
23118: PUSH
23119: LD_INT 36
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 101
23157: PUSH
23158: LD_INT 102
23160: PUSH
23161: LD_INT 103
23163: PUSH
23164: LD_INT 104
23166: PUSH
23167: LD_INT 105
23169: PUSH
23170: LD_INT 106
23172: PUSH
23173: LD_INT 107
23175: PUSH
23176: LD_INT 108
23178: PUSH
23179: LD_INT 109
23181: PUSH
23182: LD_INT 110
23184: PUSH
23185: LD_INT 111
23187: PUSH
23188: LD_INT 112
23190: PUSH
23191: LD_INT 113
23193: PUSH
23194: LD_INT 114
23196: PUSH
23197: LD_INT 116
23199: PUSH
23200: LD_INT 117
23202: PUSH
23203: LD_INT 118
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: ST_TO_ADDR
23229: GO 24468
23231: LD_INT 14
23233: DOUBLE
23234: EQUAL
23235: IFTRUE 23239
23237: GO 23463
23239: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23240: LD_ADDR_VAR 0 2
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 3
23253: PUSH
23254: LD_INT 4
23256: PUSH
23257: LD_INT 5
23259: PUSH
23260: LD_INT 6
23262: PUSH
23263: LD_INT 7
23265: PUSH
23266: LD_INT 8
23268: PUSH
23269: LD_INT 9
23271: PUSH
23272: LD_INT 10
23274: PUSH
23275: LD_INT 11
23277: PUSH
23278: LD_INT 12
23280: PUSH
23281: LD_INT 13
23283: PUSH
23284: LD_INT 14
23286: PUSH
23287: LD_INT 15
23289: PUSH
23290: LD_INT 16
23292: PUSH
23293: LD_INT 17
23295: PUSH
23296: LD_INT 18
23298: PUSH
23299: LD_INT 19
23301: PUSH
23302: LD_INT 20
23304: PUSH
23305: LD_INT 21
23307: PUSH
23308: LD_INT 22
23310: PUSH
23311: LD_INT 23
23313: PUSH
23314: LD_INT 24
23316: PUSH
23317: LD_INT 25
23319: PUSH
23320: LD_INT 26
23322: PUSH
23323: LD_INT 27
23325: PUSH
23326: LD_INT 28
23328: PUSH
23329: LD_INT 29
23331: PUSH
23332: LD_INT 30
23334: PUSH
23335: LD_INT 31
23337: PUSH
23338: LD_INT 32
23340: PUSH
23341: LD_INT 33
23343: PUSH
23344: LD_INT 34
23346: PUSH
23347: LD_INT 36
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 101
23389: PUSH
23390: LD_INT 102
23392: PUSH
23393: LD_INT 103
23395: PUSH
23396: LD_INT 104
23398: PUSH
23399: LD_INT 105
23401: PUSH
23402: LD_INT 106
23404: PUSH
23405: LD_INT 107
23407: PUSH
23408: LD_INT 108
23410: PUSH
23411: LD_INT 109
23413: PUSH
23414: LD_INT 110
23416: PUSH
23417: LD_INT 111
23419: PUSH
23420: LD_INT 112
23422: PUSH
23423: LD_INT 113
23425: PUSH
23426: LD_INT 114
23428: PUSH
23429: LD_INT 116
23431: PUSH
23432: LD_INT 117
23434: PUSH
23435: LD_INT 118
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: ST_TO_ADDR
23461: GO 24468
23463: LD_INT 15
23465: DOUBLE
23466: EQUAL
23467: IFTRUE 23471
23469: GO 23695
23471: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23472: LD_ADDR_VAR 0 2
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: LD_INT 2
23482: PUSH
23483: LD_INT 3
23485: PUSH
23486: LD_INT 4
23488: PUSH
23489: LD_INT 5
23491: PUSH
23492: LD_INT 6
23494: PUSH
23495: LD_INT 7
23497: PUSH
23498: LD_INT 8
23500: PUSH
23501: LD_INT 9
23503: PUSH
23504: LD_INT 10
23506: PUSH
23507: LD_INT 11
23509: PUSH
23510: LD_INT 12
23512: PUSH
23513: LD_INT 13
23515: PUSH
23516: LD_INT 14
23518: PUSH
23519: LD_INT 15
23521: PUSH
23522: LD_INT 16
23524: PUSH
23525: LD_INT 17
23527: PUSH
23528: LD_INT 18
23530: PUSH
23531: LD_INT 19
23533: PUSH
23534: LD_INT 20
23536: PUSH
23537: LD_INT 21
23539: PUSH
23540: LD_INT 22
23542: PUSH
23543: LD_INT 23
23545: PUSH
23546: LD_INT 24
23548: PUSH
23549: LD_INT 25
23551: PUSH
23552: LD_INT 26
23554: PUSH
23555: LD_INT 27
23557: PUSH
23558: LD_INT 28
23560: PUSH
23561: LD_INT 29
23563: PUSH
23564: LD_INT 30
23566: PUSH
23567: LD_INT 31
23569: PUSH
23570: LD_INT 32
23572: PUSH
23573: LD_INT 33
23575: PUSH
23576: LD_INT 34
23578: PUSH
23579: LD_INT 36
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 101
23621: PUSH
23622: LD_INT 102
23624: PUSH
23625: LD_INT 103
23627: PUSH
23628: LD_INT 104
23630: PUSH
23631: LD_INT 105
23633: PUSH
23634: LD_INT 106
23636: PUSH
23637: LD_INT 107
23639: PUSH
23640: LD_INT 108
23642: PUSH
23643: LD_INT 109
23645: PUSH
23646: LD_INT 110
23648: PUSH
23649: LD_INT 111
23651: PUSH
23652: LD_INT 112
23654: PUSH
23655: LD_INT 113
23657: PUSH
23658: LD_INT 114
23660: PUSH
23661: LD_INT 116
23663: PUSH
23664: LD_INT 117
23666: PUSH
23667: LD_INT 118
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: ST_TO_ADDR
23693: GO 24468
23695: LD_INT 16
23697: DOUBLE
23698: EQUAL
23699: IFTRUE 23703
23701: GO 23839
23703: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23704: LD_ADDR_VAR 0 2
23708: PUSH
23709: LD_INT 2
23711: PUSH
23712: LD_INT 4
23714: PUSH
23715: LD_INT 5
23717: PUSH
23718: LD_INT 7
23720: PUSH
23721: LD_INT 11
23723: PUSH
23724: LD_INT 12
23726: PUSH
23727: LD_INT 15
23729: PUSH
23730: LD_INT 16
23732: PUSH
23733: LD_INT 20
23735: PUSH
23736: LD_INT 21
23738: PUSH
23739: LD_INT 22
23741: PUSH
23742: LD_INT 23
23744: PUSH
23745: LD_INT 25
23747: PUSH
23748: LD_INT 26
23750: PUSH
23751: LD_INT 30
23753: PUSH
23754: LD_INT 31
23756: PUSH
23757: LD_INT 32
23759: PUSH
23760: LD_INT 33
23762: PUSH
23763: LD_INT 34
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 101
23789: PUSH
23790: LD_INT 102
23792: PUSH
23793: LD_INT 103
23795: PUSH
23796: LD_INT 106
23798: PUSH
23799: LD_INT 108
23801: PUSH
23802: LD_INT 112
23804: PUSH
23805: LD_INT 113
23807: PUSH
23808: LD_INT 114
23810: PUSH
23811: LD_INT 116
23813: PUSH
23814: LD_INT 117
23816: PUSH
23817: LD_INT 118
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: ST_TO_ADDR
23837: GO 24468
23839: LD_INT 17
23841: DOUBLE
23842: EQUAL
23843: IFTRUE 23847
23845: GO 24071
23847: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23848: LD_ADDR_VAR 0 2
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 2
23858: PUSH
23859: LD_INT 3
23861: PUSH
23862: LD_INT 4
23864: PUSH
23865: LD_INT 5
23867: PUSH
23868: LD_INT 6
23870: PUSH
23871: LD_INT 7
23873: PUSH
23874: LD_INT 8
23876: PUSH
23877: LD_INT 9
23879: PUSH
23880: LD_INT 10
23882: PUSH
23883: LD_INT 11
23885: PUSH
23886: LD_INT 12
23888: PUSH
23889: LD_INT 13
23891: PUSH
23892: LD_INT 14
23894: PUSH
23895: LD_INT 15
23897: PUSH
23898: LD_INT 16
23900: PUSH
23901: LD_INT 17
23903: PUSH
23904: LD_INT 18
23906: PUSH
23907: LD_INT 19
23909: PUSH
23910: LD_INT 20
23912: PUSH
23913: LD_INT 21
23915: PUSH
23916: LD_INT 22
23918: PUSH
23919: LD_INT 23
23921: PUSH
23922: LD_INT 24
23924: PUSH
23925: LD_INT 25
23927: PUSH
23928: LD_INT 26
23930: PUSH
23931: LD_INT 27
23933: PUSH
23934: LD_INT 28
23936: PUSH
23937: LD_INT 29
23939: PUSH
23940: LD_INT 30
23942: PUSH
23943: LD_INT 31
23945: PUSH
23946: LD_INT 32
23948: PUSH
23949: LD_INT 33
23951: PUSH
23952: LD_INT 34
23954: PUSH
23955: LD_INT 36
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 101
23997: PUSH
23998: LD_INT 102
24000: PUSH
24001: LD_INT 103
24003: PUSH
24004: LD_INT 104
24006: PUSH
24007: LD_INT 105
24009: PUSH
24010: LD_INT 106
24012: PUSH
24013: LD_INT 107
24015: PUSH
24016: LD_INT 108
24018: PUSH
24019: LD_INT 109
24021: PUSH
24022: LD_INT 110
24024: PUSH
24025: LD_INT 111
24027: PUSH
24028: LD_INT 112
24030: PUSH
24031: LD_INT 113
24033: PUSH
24034: LD_INT 114
24036: PUSH
24037: LD_INT 116
24039: PUSH
24040: LD_INT 117
24042: PUSH
24043: LD_INT 118
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: ST_TO_ADDR
24069: GO 24468
24071: LD_INT 18
24073: DOUBLE
24074: EQUAL
24075: IFTRUE 24079
24077: GO 24227
24079: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24080: LD_ADDR_VAR 0 2
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 4
24090: PUSH
24091: LD_INT 5
24093: PUSH
24094: LD_INT 7
24096: PUSH
24097: LD_INT 11
24099: PUSH
24100: LD_INT 12
24102: PUSH
24103: LD_INT 15
24105: PUSH
24106: LD_INT 16
24108: PUSH
24109: LD_INT 20
24111: PUSH
24112: LD_INT 21
24114: PUSH
24115: LD_INT 22
24117: PUSH
24118: LD_INT 23
24120: PUSH
24121: LD_INT 25
24123: PUSH
24124: LD_INT 26
24126: PUSH
24127: LD_INT 30
24129: PUSH
24130: LD_INT 31
24132: PUSH
24133: LD_INT 32
24135: PUSH
24136: LD_INT 33
24138: PUSH
24139: LD_INT 34
24141: PUSH
24142: LD_INT 35
24144: PUSH
24145: LD_INT 36
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 101
24173: PUSH
24174: LD_INT 102
24176: PUSH
24177: LD_INT 103
24179: PUSH
24180: LD_INT 106
24182: PUSH
24183: LD_INT 108
24185: PUSH
24186: LD_INT 112
24188: PUSH
24189: LD_INT 113
24191: PUSH
24192: LD_INT 114
24194: PUSH
24195: LD_INT 115
24197: PUSH
24198: LD_INT 116
24200: PUSH
24201: LD_INT 117
24203: PUSH
24204: LD_INT 118
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: ST_TO_ADDR
24225: GO 24468
24227: LD_INT 19
24229: DOUBLE
24230: EQUAL
24231: IFTRUE 24235
24233: GO 24467
24235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24236: LD_ADDR_VAR 0 2
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: LD_INT 2
24246: PUSH
24247: LD_INT 3
24249: PUSH
24250: LD_INT 4
24252: PUSH
24253: LD_INT 5
24255: PUSH
24256: LD_INT 6
24258: PUSH
24259: LD_INT 7
24261: PUSH
24262: LD_INT 8
24264: PUSH
24265: LD_INT 9
24267: PUSH
24268: LD_INT 10
24270: PUSH
24271: LD_INT 11
24273: PUSH
24274: LD_INT 12
24276: PUSH
24277: LD_INT 13
24279: PUSH
24280: LD_INT 14
24282: PUSH
24283: LD_INT 15
24285: PUSH
24286: LD_INT 16
24288: PUSH
24289: LD_INT 17
24291: PUSH
24292: LD_INT 18
24294: PUSH
24295: LD_INT 19
24297: PUSH
24298: LD_INT 20
24300: PUSH
24301: LD_INT 21
24303: PUSH
24304: LD_INT 22
24306: PUSH
24307: LD_INT 23
24309: PUSH
24310: LD_INT 24
24312: PUSH
24313: LD_INT 25
24315: PUSH
24316: LD_INT 26
24318: PUSH
24319: LD_INT 27
24321: PUSH
24322: LD_INT 28
24324: PUSH
24325: LD_INT 29
24327: PUSH
24328: LD_INT 30
24330: PUSH
24331: LD_INT 31
24333: PUSH
24334: LD_INT 32
24336: PUSH
24337: LD_INT 33
24339: PUSH
24340: LD_INT 34
24342: PUSH
24343: LD_INT 35
24345: PUSH
24346: LD_INT 36
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 101
24389: PUSH
24390: LD_INT 102
24392: PUSH
24393: LD_INT 103
24395: PUSH
24396: LD_INT 104
24398: PUSH
24399: LD_INT 105
24401: PUSH
24402: LD_INT 106
24404: PUSH
24405: LD_INT 107
24407: PUSH
24408: LD_INT 108
24410: PUSH
24411: LD_INT 109
24413: PUSH
24414: LD_INT 110
24416: PUSH
24417: LD_INT 111
24419: PUSH
24420: LD_INT 112
24422: PUSH
24423: LD_INT 113
24425: PUSH
24426: LD_INT 114
24428: PUSH
24429: LD_INT 115
24431: PUSH
24432: LD_INT 116
24434: PUSH
24435: LD_INT 117
24437: PUSH
24438: LD_INT 118
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: ST_TO_ADDR
24465: GO 24468
24467: POP
// end else
24468: GO 24699
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24470: LD_ADDR_VAR 0 2
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: LD_INT 2
24480: PUSH
24481: LD_INT 3
24483: PUSH
24484: LD_INT 4
24486: PUSH
24487: LD_INT 5
24489: PUSH
24490: LD_INT 6
24492: PUSH
24493: LD_INT 7
24495: PUSH
24496: LD_INT 8
24498: PUSH
24499: LD_INT 9
24501: PUSH
24502: LD_INT 10
24504: PUSH
24505: LD_INT 11
24507: PUSH
24508: LD_INT 12
24510: PUSH
24511: LD_INT 13
24513: PUSH
24514: LD_INT 14
24516: PUSH
24517: LD_INT 15
24519: PUSH
24520: LD_INT 16
24522: PUSH
24523: LD_INT 17
24525: PUSH
24526: LD_INT 18
24528: PUSH
24529: LD_INT 19
24531: PUSH
24532: LD_INT 20
24534: PUSH
24535: LD_INT 21
24537: PUSH
24538: LD_INT 22
24540: PUSH
24541: LD_INT 23
24543: PUSH
24544: LD_INT 24
24546: PUSH
24547: LD_INT 25
24549: PUSH
24550: LD_INT 26
24552: PUSH
24553: LD_INT 27
24555: PUSH
24556: LD_INT 28
24558: PUSH
24559: LD_INT 29
24561: PUSH
24562: LD_INT 30
24564: PUSH
24565: LD_INT 31
24567: PUSH
24568: LD_INT 32
24570: PUSH
24571: LD_INT 33
24573: PUSH
24574: LD_INT 34
24576: PUSH
24577: LD_INT 35
24579: PUSH
24580: LD_INT 36
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 101
24623: PUSH
24624: LD_INT 102
24626: PUSH
24627: LD_INT 103
24629: PUSH
24630: LD_INT 104
24632: PUSH
24633: LD_INT 105
24635: PUSH
24636: LD_INT 106
24638: PUSH
24639: LD_INT 107
24641: PUSH
24642: LD_INT 108
24644: PUSH
24645: LD_INT 109
24647: PUSH
24648: LD_INT 110
24650: PUSH
24651: LD_INT 111
24653: PUSH
24654: LD_INT 112
24656: PUSH
24657: LD_INT 113
24659: PUSH
24660: LD_INT 114
24662: PUSH
24663: LD_INT 115
24665: PUSH
24666: LD_INT 116
24668: PUSH
24669: LD_INT 117
24671: PUSH
24672: LD_INT 118
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: ST_TO_ADDR
// if result then
24699: LD_VAR 0 2
24703: IFFALSE 25489
// begin normal :=  ;
24705: LD_ADDR_VAR 0 5
24709: PUSH
24710: LD_STRING 
24712: ST_TO_ADDR
// hardcore :=  ;
24713: LD_ADDR_VAR 0 6
24717: PUSH
24718: LD_STRING 
24720: ST_TO_ADDR
// active :=  ;
24721: LD_ADDR_VAR 0 7
24725: PUSH
24726: LD_STRING 
24728: ST_TO_ADDR
// for i = 1 to normalCounter do
24729: LD_ADDR_VAR 0 8
24733: PUSH
24734: DOUBLE
24735: LD_INT 1
24737: DEC
24738: ST_TO_ADDR
24739: LD_EXP 48
24743: PUSH
24744: FOR_TO
24745: IFFALSE 24846
// begin tmp := 0 ;
24747: LD_ADDR_VAR 0 3
24751: PUSH
24752: LD_STRING 0
24754: ST_TO_ADDR
// if result [ 1 ] then
24755: LD_VAR 0 2
24759: PUSH
24760: LD_INT 1
24762: ARRAY
24763: IFFALSE 24828
// if result [ 1 ] [ 1 ] = i then
24765: LD_VAR 0 2
24769: PUSH
24770: LD_INT 1
24772: ARRAY
24773: PUSH
24774: LD_INT 1
24776: ARRAY
24777: PUSH
24778: LD_VAR 0 8
24782: EQUAL
24783: IFFALSE 24828
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24785: LD_ADDR_VAR 0 2
24789: PUSH
24790: LD_VAR 0 2
24794: PPUSH
24795: LD_INT 1
24797: PPUSH
24798: LD_VAR 0 2
24802: PUSH
24803: LD_INT 1
24805: ARRAY
24806: PPUSH
24807: LD_INT 1
24809: PPUSH
24810: CALL_OW 3
24814: PPUSH
24815: CALL_OW 1
24819: ST_TO_ADDR
// tmp := 1 ;
24820: LD_ADDR_VAR 0 3
24824: PUSH
24825: LD_STRING 1
24827: ST_TO_ADDR
// end ; normal := normal & tmp ;
24828: LD_ADDR_VAR 0 5
24832: PUSH
24833: LD_VAR 0 5
24837: PUSH
24838: LD_VAR 0 3
24842: STR
24843: ST_TO_ADDR
// end ;
24844: GO 24744
24846: POP
24847: POP
// for i = 1 to hardcoreCounter do
24848: LD_ADDR_VAR 0 8
24852: PUSH
24853: DOUBLE
24854: LD_INT 1
24856: DEC
24857: ST_TO_ADDR
24858: LD_EXP 49
24862: PUSH
24863: FOR_TO
24864: IFFALSE 24969
// begin tmp := 0 ;
24866: LD_ADDR_VAR 0 3
24870: PUSH
24871: LD_STRING 0
24873: ST_TO_ADDR
// if result [ 2 ] then
24874: LD_VAR 0 2
24878: PUSH
24879: LD_INT 2
24881: ARRAY
24882: IFFALSE 24951
// if result [ 2 ] [ 1 ] = 100 + i then
24884: LD_VAR 0 2
24888: PUSH
24889: LD_INT 2
24891: ARRAY
24892: PUSH
24893: LD_INT 1
24895: ARRAY
24896: PUSH
24897: LD_INT 100
24899: PUSH
24900: LD_VAR 0 8
24904: PLUS
24905: EQUAL
24906: IFFALSE 24951
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24908: LD_ADDR_VAR 0 2
24912: PUSH
24913: LD_VAR 0 2
24917: PPUSH
24918: LD_INT 2
24920: PPUSH
24921: LD_VAR 0 2
24925: PUSH
24926: LD_INT 2
24928: ARRAY
24929: PPUSH
24930: LD_INT 1
24932: PPUSH
24933: CALL_OW 3
24937: PPUSH
24938: CALL_OW 1
24942: ST_TO_ADDR
// tmp := 1 ;
24943: LD_ADDR_VAR 0 3
24947: PUSH
24948: LD_STRING 1
24950: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24951: LD_ADDR_VAR 0 6
24955: PUSH
24956: LD_VAR 0 6
24960: PUSH
24961: LD_VAR 0 3
24965: STR
24966: ST_TO_ADDR
// end ;
24967: GO 24863
24969: POP
24970: POP
// if isGameLoad then
24971: LD_VAR 0 1
24975: IFFALSE 25450
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24977: LD_ADDR_VAR 0 4
24981: PUSH
24982: LD_EXP 52
24986: PUSH
24987: LD_EXP 51
24991: PUSH
24992: LD_EXP 53
24996: PUSH
24997: LD_EXP 50
25001: PUSH
25002: LD_EXP 54
25006: PUSH
25007: LD_EXP 55
25011: PUSH
25012: LD_EXP 56
25016: PUSH
25017: LD_EXP 57
25021: PUSH
25022: LD_EXP 58
25026: PUSH
25027: LD_EXP 59
25031: PUSH
25032: LD_EXP 60
25036: PUSH
25037: LD_EXP 61
25041: PUSH
25042: LD_EXP 62
25046: PUSH
25047: LD_EXP 63
25051: PUSH
25052: LD_EXP 71
25056: PUSH
25057: LD_EXP 72
25061: PUSH
25062: LD_EXP 73
25066: PUSH
25067: LD_EXP 74
25071: PUSH
25072: LD_EXP 76
25076: PUSH
25077: LD_EXP 77
25081: PUSH
25082: LD_EXP 78
25086: PUSH
25087: LD_EXP 81
25091: PUSH
25092: LD_EXP 83
25096: PUSH
25097: LD_EXP 84
25101: PUSH
25102: LD_EXP 85
25106: PUSH
25107: LD_EXP 87
25111: PUSH
25112: LD_EXP 88
25116: PUSH
25117: LD_EXP 91
25121: PUSH
25122: LD_EXP 92
25126: PUSH
25127: LD_EXP 93
25131: PUSH
25132: LD_EXP 94
25136: PUSH
25137: LD_EXP 95
25141: PUSH
25142: LD_EXP 96
25146: PUSH
25147: LD_EXP 97
25151: PUSH
25152: LD_EXP 98
25156: PUSH
25157: LD_EXP 99
25161: PUSH
25162: LD_EXP 64
25166: PUSH
25167: LD_EXP 65
25171: PUSH
25172: LD_EXP 68
25176: PUSH
25177: LD_EXP 69
25181: PUSH
25182: LD_EXP 70
25186: PUSH
25187: LD_EXP 66
25191: PUSH
25192: LD_EXP 67
25196: PUSH
25197: LD_EXP 75
25201: PUSH
25202: LD_EXP 79
25206: PUSH
25207: LD_EXP 80
25211: PUSH
25212: LD_EXP 82
25216: PUSH
25217: LD_EXP 86
25221: PUSH
25222: LD_EXP 89
25226: PUSH
25227: LD_EXP 90
25231: PUSH
25232: LD_EXP 100
25236: PUSH
25237: LD_EXP 101
25241: PUSH
25242: LD_EXP 102
25246: PUSH
25247: LD_EXP 103
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: ST_TO_ADDR
// tmp :=  ;
25308: LD_ADDR_VAR 0 3
25312: PUSH
25313: LD_STRING 
25315: ST_TO_ADDR
// for i = 1 to normalCounter do
25316: LD_ADDR_VAR 0 8
25320: PUSH
25321: DOUBLE
25322: LD_INT 1
25324: DEC
25325: ST_TO_ADDR
25326: LD_EXP 48
25330: PUSH
25331: FOR_TO
25332: IFFALSE 25368
// begin if flags [ i ] then
25334: LD_VAR 0 4
25338: PUSH
25339: LD_VAR 0 8
25343: ARRAY
25344: IFFALSE 25366
// tmp := tmp & i & ; ;
25346: LD_ADDR_VAR 0 3
25350: PUSH
25351: LD_VAR 0 3
25355: PUSH
25356: LD_VAR 0 8
25360: STR
25361: PUSH
25362: LD_STRING ;
25364: STR
25365: ST_TO_ADDR
// end ;
25366: GO 25331
25368: POP
25369: POP
// for i = 1 to hardcoreCounter do
25370: LD_ADDR_VAR 0 8
25374: PUSH
25375: DOUBLE
25376: LD_INT 1
25378: DEC
25379: ST_TO_ADDR
25380: LD_EXP 49
25384: PUSH
25385: FOR_TO
25386: IFFALSE 25432
// begin if flags [ normalCounter + i ] then
25388: LD_VAR 0 4
25392: PUSH
25393: LD_EXP 48
25397: PUSH
25398: LD_VAR 0 8
25402: PLUS
25403: ARRAY
25404: IFFALSE 25430
// tmp := tmp & ( 100 + i ) & ; ;
25406: LD_ADDR_VAR 0 3
25410: PUSH
25411: LD_VAR 0 3
25415: PUSH
25416: LD_INT 100
25418: PUSH
25419: LD_VAR 0 8
25423: PLUS
25424: STR
25425: PUSH
25426: LD_STRING ;
25428: STR
25429: ST_TO_ADDR
// end ;
25430: GO 25385
25432: POP
25433: POP
// if tmp then
25434: LD_VAR 0 3
25438: IFFALSE 25450
// active := tmp ;
25440: LD_ADDR_VAR 0 7
25444: PUSH
25445: LD_VAR 0 3
25449: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25450: LD_STRING getStreamItemsFromMission("
25452: PUSH
25453: LD_VAR 0 5
25457: STR
25458: PUSH
25459: LD_STRING ","
25461: STR
25462: PUSH
25463: LD_VAR 0 6
25467: STR
25468: PUSH
25469: LD_STRING ","
25471: STR
25472: PUSH
25473: LD_VAR 0 7
25477: STR
25478: PUSH
25479: LD_STRING ")
25481: STR
25482: PPUSH
25483: CALL_OW 559
// end else
25487: GO 25496
// ToLua ( getStreamItemsFromMission("","","") ) ;
25489: LD_STRING getStreamItemsFromMission("","","")
25491: PPUSH
25492: CALL_OW 559
// end ;
25496: LD_VAR 0 2
25500: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25501: LD_EXP 47
25505: PUSH
25506: LD_EXP 52
25510: AND
25511: IFFALSE 25635
25513: GO 25515
25515: DISABLE
25516: LD_INT 0
25518: PPUSH
25519: PPUSH
// begin enable ;
25520: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25521: LD_ADDR_VAR 0 2
25525: PUSH
25526: LD_INT 22
25528: PUSH
25529: LD_OWVAR 2
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 2
25540: PUSH
25541: LD_INT 34
25543: PUSH
25544: LD_INT 7
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 34
25553: PUSH
25554: LD_INT 45
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 34
25563: PUSH
25564: LD_INT 28
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 34
25573: PUSH
25574: LD_INT 47
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PPUSH
25592: CALL_OW 69
25596: ST_TO_ADDR
// if not tmp then
25597: LD_VAR 0 2
25601: NOT
25602: IFFALSE 25606
// exit ;
25604: GO 25635
// for i in tmp do
25606: LD_ADDR_VAR 0 1
25610: PUSH
25611: LD_VAR 0 2
25615: PUSH
25616: FOR_IN
25617: IFFALSE 25633
// begin SetLives ( i , 0 ) ;
25619: LD_VAR 0 1
25623: PPUSH
25624: LD_INT 0
25626: PPUSH
25627: CALL_OW 234
// end ;
25631: GO 25616
25633: POP
25634: POP
// end ;
25635: PPOPN 2
25637: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25638: LD_EXP 47
25642: PUSH
25643: LD_EXP 53
25647: AND
25648: IFFALSE 25732
25650: GO 25652
25652: DISABLE
25653: LD_INT 0
25655: PPUSH
25656: PPUSH
// begin enable ;
25657: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25658: LD_ADDR_VAR 0 2
25662: PUSH
25663: LD_INT 22
25665: PUSH
25666: LD_OWVAR 2
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 32
25677: PUSH
25678: LD_INT 3
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PPUSH
25689: CALL_OW 69
25693: ST_TO_ADDR
// if not tmp then
25694: LD_VAR 0 2
25698: NOT
25699: IFFALSE 25703
// exit ;
25701: GO 25732
// for i in tmp do
25703: LD_ADDR_VAR 0 1
25707: PUSH
25708: LD_VAR 0 2
25712: PUSH
25713: FOR_IN
25714: IFFALSE 25730
// begin SetLives ( i , 0 ) ;
25716: LD_VAR 0 1
25720: PPUSH
25721: LD_INT 0
25723: PPUSH
25724: CALL_OW 234
// end ;
25728: GO 25713
25730: POP
25731: POP
// end ;
25732: PPOPN 2
25734: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25735: LD_EXP 47
25739: PUSH
25740: LD_EXP 50
25744: AND
25745: IFFALSE 25838
25747: GO 25749
25749: DISABLE
25750: LD_INT 0
25752: PPUSH
// begin enable ;
25753: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25754: LD_ADDR_VAR 0 1
25758: PUSH
25759: LD_INT 22
25761: PUSH
25762: LD_OWVAR 2
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: LD_INT 25
25776: PUSH
25777: LD_INT 5
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 25
25786: PUSH
25787: LD_INT 9
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 25
25796: PUSH
25797: LD_INT 8
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PPUSH
25814: CALL_OW 69
25818: PUSH
25819: FOR_IN
25820: IFFALSE 25836
// begin SetClass ( i , 1 ) ;
25822: LD_VAR 0 1
25826: PPUSH
25827: LD_INT 1
25829: PPUSH
25830: CALL_OW 336
// end ;
25834: GO 25819
25836: POP
25837: POP
// end ;
25838: PPOPN 1
25840: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25841: LD_EXP 47
25845: PUSH
25846: LD_EXP 51
25850: AND
25851: PUSH
25852: LD_OWVAR 65
25856: PUSH
25857: LD_INT 7
25859: LESS
25860: AND
25861: IFFALSE 25875
25863: GO 25865
25865: DISABLE
// begin enable ;
25866: ENABLE
// game_speed := 7 ;
25867: LD_ADDR_OWVAR 65
25871: PUSH
25872: LD_INT 7
25874: ST_TO_ADDR
// end ;
25875: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25876: LD_EXP 47
25880: PUSH
25881: LD_EXP 54
25885: AND
25886: IFFALSE 26088
25888: GO 25890
25890: DISABLE
25891: LD_INT 0
25893: PPUSH
25894: PPUSH
25895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25896: LD_ADDR_VAR 0 3
25900: PUSH
25901: LD_INT 81
25903: PUSH
25904: LD_OWVAR 2
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 21
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PPUSH
25927: CALL_OW 69
25931: ST_TO_ADDR
// if not tmp then
25932: LD_VAR 0 3
25936: NOT
25937: IFFALSE 25941
// exit ;
25939: GO 26088
// if tmp > 5 then
25941: LD_VAR 0 3
25945: PUSH
25946: LD_INT 5
25948: GREATER
25949: IFFALSE 25961
// k := 5 else
25951: LD_ADDR_VAR 0 2
25955: PUSH
25956: LD_INT 5
25958: ST_TO_ADDR
25959: GO 25971
// k := tmp ;
25961: LD_ADDR_VAR 0 2
25965: PUSH
25966: LD_VAR 0 3
25970: ST_TO_ADDR
// for i := 1 to k do
25971: LD_ADDR_VAR 0 1
25975: PUSH
25976: DOUBLE
25977: LD_INT 1
25979: DEC
25980: ST_TO_ADDR
25981: LD_VAR 0 2
25985: PUSH
25986: FOR_TO
25987: IFFALSE 26086
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25989: LD_VAR 0 3
25993: PUSH
25994: LD_VAR 0 1
25998: ARRAY
25999: PPUSH
26000: LD_VAR 0 1
26004: PUSH
26005: LD_INT 4
26007: MOD
26008: PUSH
26009: LD_INT 1
26011: PLUS
26012: PPUSH
26013: CALL_OW 259
26017: PUSH
26018: LD_INT 10
26020: LESS
26021: IFFALSE 26084
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26023: LD_VAR 0 3
26027: PUSH
26028: LD_VAR 0 1
26032: ARRAY
26033: PPUSH
26034: LD_VAR 0 1
26038: PUSH
26039: LD_INT 4
26041: MOD
26042: PUSH
26043: LD_INT 1
26045: PLUS
26046: PPUSH
26047: LD_VAR 0 3
26051: PUSH
26052: LD_VAR 0 1
26056: ARRAY
26057: PPUSH
26058: LD_VAR 0 1
26062: PUSH
26063: LD_INT 4
26065: MOD
26066: PUSH
26067: LD_INT 1
26069: PLUS
26070: PPUSH
26071: CALL_OW 259
26075: PUSH
26076: LD_INT 1
26078: PLUS
26079: PPUSH
26080: CALL_OW 237
26084: GO 25986
26086: POP
26087: POP
// end ;
26088: PPOPN 3
26090: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26091: LD_EXP 47
26095: PUSH
26096: LD_EXP 55
26100: AND
26101: IFFALSE 26121
26103: GO 26105
26105: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26106: LD_INT 4
26108: PPUSH
26109: LD_OWVAR 2
26113: PPUSH
26114: LD_INT 0
26116: PPUSH
26117: CALL_OW 324
26121: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26122: LD_EXP 47
26126: PUSH
26127: LD_EXP 84
26131: AND
26132: IFFALSE 26152
26134: GO 26136
26136: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26137: LD_INT 19
26139: PPUSH
26140: LD_OWVAR 2
26144: PPUSH
26145: LD_INT 0
26147: PPUSH
26148: CALL_OW 324
26152: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26153: LD_EXP 47
26157: PUSH
26158: LD_EXP 56
26162: AND
26163: IFFALSE 26265
26165: GO 26167
26167: DISABLE
26168: LD_INT 0
26170: PPUSH
26171: PPUSH
// begin enable ;
26172: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26173: LD_ADDR_VAR 0 2
26177: PUSH
26178: LD_INT 22
26180: PUSH
26181: LD_OWVAR 2
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: LD_INT 34
26195: PUSH
26196: LD_INT 11
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 34
26205: PUSH
26206: LD_INT 30
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: LIST
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PPUSH
26222: CALL_OW 69
26226: ST_TO_ADDR
// if not tmp then
26227: LD_VAR 0 2
26231: NOT
26232: IFFALSE 26236
// exit ;
26234: GO 26265
// for i in tmp do
26236: LD_ADDR_VAR 0 1
26240: PUSH
26241: LD_VAR 0 2
26245: PUSH
26246: FOR_IN
26247: IFFALSE 26263
// begin SetLives ( i , 0 ) ;
26249: LD_VAR 0 1
26253: PPUSH
26254: LD_INT 0
26256: PPUSH
26257: CALL_OW 234
// end ;
26261: GO 26246
26263: POP
26264: POP
// end ;
26265: PPOPN 2
26267: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26268: LD_EXP 47
26272: PUSH
26273: LD_EXP 57
26277: AND
26278: IFFALSE 26298
26280: GO 26282
26282: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26283: LD_INT 32
26285: PPUSH
26286: LD_OWVAR 2
26290: PPUSH
26291: LD_INT 0
26293: PPUSH
26294: CALL_OW 324
26298: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26299: LD_EXP 47
26303: PUSH
26304: LD_EXP 58
26308: AND
26309: IFFALSE 26490
26311: GO 26313
26313: DISABLE
26314: LD_INT 0
26316: PPUSH
26317: PPUSH
26318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26319: LD_ADDR_VAR 0 2
26323: PUSH
26324: LD_INT 22
26326: PUSH
26327: LD_OWVAR 2
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 33
26338: PUSH
26339: LD_INT 3
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PPUSH
26350: CALL_OW 69
26354: ST_TO_ADDR
// if not tmp then
26355: LD_VAR 0 2
26359: NOT
26360: IFFALSE 26364
// exit ;
26362: GO 26490
// side := 0 ;
26364: LD_ADDR_VAR 0 3
26368: PUSH
26369: LD_INT 0
26371: ST_TO_ADDR
// for i := 1 to 8 do
26372: LD_ADDR_VAR 0 1
26376: PUSH
26377: DOUBLE
26378: LD_INT 1
26380: DEC
26381: ST_TO_ADDR
26382: LD_INT 8
26384: PUSH
26385: FOR_TO
26386: IFFALSE 26434
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26388: LD_OWVAR 2
26392: PUSH
26393: LD_VAR 0 1
26397: NONEQUAL
26398: PUSH
26399: LD_OWVAR 2
26403: PPUSH
26404: LD_VAR 0 1
26408: PPUSH
26409: CALL_OW 81
26413: PUSH
26414: LD_INT 2
26416: EQUAL
26417: AND
26418: IFFALSE 26432
// begin side := i ;
26420: LD_ADDR_VAR 0 3
26424: PUSH
26425: LD_VAR 0 1
26429: ST_TO_ADDR
// break ;
26430: GO 26434
// end ;
26432: GO 26385
26434: POP
26435: POP
// if not side then
26436: LD_VAR 0 3
26440: NOT
26441: IFFALSE 26445
// exit ;
26443: GO 26490
// for i := 1 to tmp do
26445: LD_ADDR_VAR 0 1
26449: PUSH
26450: DOUBLE
26451: LD_INT 1
26453: DEC
26454: ST_TO_ADDR
26455: LD_VAR 0 2
26459: PUSH
26460: FOR_TO
26461: IFFALSE 26488
// if Prob ( 60 ) then
26463: LD_INT 60
26465: PPUSH
26466: CALL_OW 13
26470: IFFALSE 26486
// SetSide ( i , side ) ;
26472: LD_VAR 0 1
26476: PPUSH
26477: LD_VAR 0 3
26481: PPUSH
26482: CALL_OW 235
26486: GO 26460
26488: POP
26489: POP
// end ;
26490: PPOPN 3
26492: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26493: LD_EXP 47
26497: PUSH
26498: LD_EXP 60
26502: AND
26503: IFFALSE 26622
26505: GO 26507
26507: DISABLE
26508: LD_INT 0
26510: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26511: LD_ADDR_VAR 0 1
26515: PUSH
26516: LD_INT 22
26518: PUSH
26519: LD_OWVAR 2
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 21
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 3
26540: PUSH
26541: LD_INT 23
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: LIST
26559: PPUSH
26560: CALL_OW 69
26564: PUSH
26565: FOR_IN
26566: IFFALSE 26620
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26568: LD_VAR 0 1
26572: PPUSH
26573: CALL_OW 257
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: LD_INT 3
26586: PUSH
26587: LD_INT 4
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: IN
26596: IFFALSE 26618
// SetClass ( un , rand ( 1 , 4 ) ) ;
26598: LD_VAR 0 1
26602: PPUSH
26603: LD_INT 1
26605: PPUSH
26606: LD_INT 4
26608: PPUSH
26609: CALL_OW 12
26613: PPUSH
26614: CALL_OW 336
26618: GO 26565
26620: POP
26621: POP
// end ;
26622: PPOPN 1
26624: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26625: LD_EXP 47
26629: PUSH
26630: LD_EXP 59
26634: AND
26635: IFFALSE 26714
26637: GO 26639
26639: DISABLE
26640: LD_INT 0
26642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26643: LD_ADDR_VAR 0 1
26647: PUSH
26648: LD_INT 22
26650: PUSH
26651: LD_OWVAR 2
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 21
26662: PUSH
26663: LD_INT 3
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PPUSH
26674: CALL_OW 69
26678: ST_TO_ADDR
// if not tmp then
26679: LD_VAR 0 1
26683: NOT
26684: IFFALSE 26688
// exit ;
26686: GO 26714
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26688: LD_VAR 0 1
26692: PUSH
26693: LD_INT 1
26695: PPUSH
26696: LD_VAR 0 1
26700: PPUSH
26701: CALL_OW 12
26705: ARRAY
26706: PPUSH
26707: LD_INT 100
26709: PPUSH
26710: CALL_OW 234
// end ;
26714: PPOPN 1
26716: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26717: LD_EXP 47
26721: PUSH
26722: LD_EXP 61
26726: AND
26727: IFFALSE 26825
26729: GO 26731
26731: DISABLE
26732: LD_INT 0
26734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26735: LD_ADDR_VAR 0 1
26739: PUSH
26740: LD_INT 22
26742: PUSH
26743: LD_OWVAR 2
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 21
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PPUSH
26766: CALL_OW 69
26770: ST_TO_ADDR
// if not tmp then
26771: LD_VAR 0 1
26775: NOT
26776: IFFALSE 26780
// exit ;
26778: GO 26825
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26780: LD_VAR 0 1
26784: PUSH
26785: LD_INT 1
26787: PPUSH
26788: LD_VAR 0 1
26792: PPUSH
26793: CALL_OW 12
26797: ARRAY
26798: PPUSH
26799: LD_INT 1
26801: PPUSH
26802: LD_INT 4
26804: PPUSH
26805: CALL_OW 12
26809: PPUSH
26810: LD_INT 3000
26812: PPUSH
26813: LD_INT 9000
26815: PPUSH
26816: CALL_OW 12
26820: PPUSH
26821: CALL_OW 492
// end ;
26825: PPOPN 1
26827: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26828: LD_EXP 47
26832: PUSH
26833: LD_EXP 62
26837: AND
26838: IFFALSE 26858
26840: GO 26842
26842: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26843: LD_INT 1
26845: PPUSH
26846: LD_OWVAR 2
26850: PPUSH
26851: LD_INT 0
26853: PPUSH
26854: CALL_OW 324
26858: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26859: LD_EXP 47
26863: PUSH
26864: LD_EXP 63
26868: AND
26869: IFFALSE 26952
26871: GO 26873
26873: DISABLE
26874: LD_INT 0
26876: PPUSH
26877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26878: LD_ADDR_VAR 0 2
26882: PUSH
26883: LD_INT 22
26885: PUSH
26886: LD_OWVAR 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 21
26897: PUSH
26898: LD_INT 3
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PPUSH
26909: CALL_OW 69
26913: ST_TO_ADDR
// if not tmp then
26914: LD_VAR 0 2
26918: NOT
26919: IFFALSE 26923
// exit ;
26921: GO 26952
// for i in tmp do
26923: LD_ADDR_VAR 0 1
26927: PUSH
26928: LD_VAR 0 2
26932: PUSH
26933: FOR_IN
26934: IFFALSE 26950
// SetBLevel ( i , 10 ) ;
26936: LD_VAR 0 1
26940: PPUSH
26941: LD_INT 10
26943: PPUSH
26944: CALL_OW 241
26948: GO 26933
26950: POP
26951: POP
// end ;
26952: PPOPN 2
26954: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26955: LD_EXP 47
26959: PUSH
26960: LD_EXP 64
26964: AND
26965: IFFALSE 27076
26967: GO 26969
26969: DISABLE
26970: LD_INT 0
26972: PPUSH
26973: PPUSH
26974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26975: LD_ADDR_VAR 0 3
26979: PUSH
26980: LD_INT 22
26982: PUSH
26983: LD_OWVAR 2
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 25
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PPUSH
27006: CALL_OW 69
27010: ST_TO_ADDR
// if not tmp then
27011: LD_VAR 0 3
27015: NOT
27016: IFFALSE 27020
// exit ;
27018: GO 27076
// un := tmp [ rand ( 1 , tmp ) ] ;
27020: LD_ADDR_VAR 0 2
27024: PUSH
27025: LD_VAR 0 3
27029: PUSH
27030: LD_INT 1
27032: PPUSH
27033: LD_VAR 0 3
27037: PPUSH
27038: CALL_OW 12
27042: ARRAY
27043: ST_TO_ADDR
// if Crawls ( un ) then
27044: LD_VAR 0 2
27048: PPUSH
27049: CALL_OW 318
27053: IFFALSE 27064
// ComWalk ( un ) ;
27055: LD_VAR 0 2
27059: PPUSH
27060: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27064: LD_VAR 0 2
27068: PPUSH
27069: LD_INT 5
27071: PPUSH
27072: CALL_OW 336
// end ;
27076: PPOPN 3
27078: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27079: LD_EXP 47
27083: PUSH
27084: LD_EXP 65
27088: AND
27089: PUSH
27090: LD_OWVAR 67
27094: PUSH
27095: LD_INT 4
27097: LESS
27098: AND
27099: IFFALSE 27118
27101: GO 27103
27103: DISABLE
// begin Difficulty := Difficulty + 1 ;
27104: LD_ADDR_OWVAR 67
27108: PUSH
27109: LD_OWVAR 67
27113: PUSH
27114: LD_INT 1
27116: PLUS
27117: ST_TO_ADDR
// end ;
27118: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27119: LD_EXP 47
27123: PUSH
27124: LD_EXP 66
27128: AND
27129: IFFALSE 27232
27131: GO 27133
27133: DISABLE
27134: LD_INT 0
27136: PPUSH
// begin for i := 1 to 5 do
27137: LD_ADDR_VAR 0 1
27141: PUSH
27142: DOUBLE
27143: LD_INT 1
27145: DEC
27146: ST_TO_ADDR
27147: LD_INT 5
27149: PUSH
27150: FOR_TO
27151: IFFALSE 27230
// begin uc_nation := nation_nature ;
27153: LD_ADDR_OWVAR 21
27157: PUSH
27158: LD_INT 0
27160: ST_TO_ADDR
// uc_side := 0 ;
27161: LD_ADDR_OWVAR 20
27165: PUSH
27166: LD_INT 0
27168: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27169: LD_ADDR_OWVAR 29
27173: PUSH
27174: LD_INT 12
27176: PUSH
27177: LD_INT 12
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: ST_TO_ADDR
// hc_agressivity := 20 ;
27184: LD_ADDR_OWVAR 35
27188: PUSH
27189: LD_INT 20
27191: ST_TO_ADDR
// hc_class := class_tiger ;
27192: LD_ADDR_OWVAR 28
27196: PUSH
27197: LD_INT 14
27199: ST_TO_ADDR
// hc_gallery :=  ;
27200: LD_ADDR_OWVAR 33
27204: PUSH
27205: LD_STRING 
27207: ST_TO_ADDR
// hc_name :=  ;
27208: LD_ADDR_OWVAR 26
27212: PUSH
27213: LD_STRING 
27215: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27216: CALL_OW 44
27220: PPUSH
27221: LD_INT 0
27223: PPUSH
27224: CALL_OW 51
// end ;
27228: GO 27150
27230: POP
27231: POP
// end ;
27232: PPOPN 1
27234: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27235: LD_EXP 47
27239: PUSH
27240: LD_EXP 67
27244: AND
27245: IFFALSE 27254
27247: GO 27249
27249: DISABLE
// StreamSibBomb ;
27250: CALL 27255 0 0
27254: END
// export function StreamSibBomb ; var i , x , y ; begin
27255: LD_INT 0
27257: PPUSH
27258: PPUSH
27259: PPUSH
27260: PPUSH
// result := false ;
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_INT 0
27268: ST_TO_ADDR
// for i := 1 to 16 do
27269: LD_ADDR_VAR 0 2
27273: PUSH
27274: DOUBLE
27275: LD_INT 1
27277: DEC
27278: ST_TO_ADDR
27279: LD_INT 16
27281: PUSH
27282: FOR_TO
27283: IFFALSE 27482
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27285: LD_ADDR_VAR 0 3
27289: PUSH
27290: LD_INT 10
27292: PUSH
27293: LD_INT 20
27295: PUSH
27296: LD_INT 30
27298: PUSH
27299: LD_INT 40
27301: PUSH
27302: LD_INT 50
27304: PUSH
27305: LD_INT 60
27307: PUSH
27308: LD_INT 70
27310: PUSH
27311: LD_INT 80
27313: PUSH
27314: LD_INT 90
27316: PUSH
27317: LD_INT 100
27319: PUSH
27320: LD_INT 110
27322: PUSH
27323: LD_INT 120
27325: PUSH
27326: LD_INT 130
27328: PUSH
27329: LD_INT 140
27331: PUSH
27332: LD_INT 150
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PPUSH
27355: LD_INT 15
27357: PPUSH
27358: CALL_OW 12
27362: ARRAY
27363: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27364: LD_ADDR_VAR 0 4
27368: PUSH
27369: LD_INT 10
27371: PUSH
27372: LD_INT 20
27374: PUSH
27375: LD_INT 30
27377: PUSH
27378: LD_INT 40
27380: PUSH
27381: LD_INT 50
27383: PUSH
27384: LD_INT 60
27386: PUSH
27387: LD_INT 70
27389: PUSH
27390: LD_INT 80
27392: PUSH
27393: LD_INT 90
27395: PUSH
27396: LD_INT 100
27398: PUSH
27399: LD_INT 110
27401: PUSH
27402: LD_INT 120
27404: PUSH
27405: LD_INT 130
27407: PUSH
27408: LD_INT 140
27410: PUSH
27411: LD_INT 150
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: PPUSH
27434: LD_INT 15
27436: PPUSH
27437: CALL_OW 12
27441: ARRAY
27442: ST_TO_ADDR
// if ValidHex ( x , y ) then
27443: LD_VAR 0 3
27447: PPUSH
27448: LD_VAR 0 4
27452: PPUSH
27453: CALL_OW 488
27457: IFFALSE 27480
// begin result := [ x , y ] ;
27459: LD_ADDR_VAR 0 1
27463: PUSH
27464: LD_VAR 0 3
27468: PUSH
27469: LD_VAR 0 4
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: ST_TO_ADDR
// break ;
27478: GO 27482
// end ; end ;
27480: GO 27282
27482: POP
27483: POP
// if result then
27484: LD_VAR 0 1
27488: IFFALSE 27548
// begin ToLua ( playSibBomb() ) ;
27490: LD_STRING playSibBomb()
27492: PPUSH
27493: CALL_OW 559
// wait ( 0 0$14 ) ;
27497: LD_INT 490
27499: PPUSH
27500: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27504: LD_VAR 0 1
27508: PUSH
27509: LD_INT 1
27511: ARRAY
27512: PPUSH
27513: LD_VAR 0 1
27517: PUSH
27518: LD_INT 2
27520: ARRAY
27521: PPUSH
27522: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27526: LD_VAR 0 1
27530: PUSH
27531: LD_INT 1
27533: ARRAY
27534: PPUSH
27535: LD_VAR 0 1
27539: PUSH
27540: LD_INT 2
27542: ARRAY
27543: PPUSH
27544: CALL_OW 429
// end ; end ;
27548: LD_VAR 0 1
27552: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27553: LD_EXP 47
27557: PUSH
27558: LD_EXP 69
27562: AND
27563: IFFALSE 27575
27565: GO 27567
27567: DISABLE
// YouLost (  ) ;
27568: LD_STRING 
27570: PPUSH
27571: CALL_OW 104
27575: END
// every 0 0$1 trigger StreamModeActive and sFog do
27576: LD_EXP 47
27580: PUSH
27581: LD_EXP 68
27585: AND
27586: IFFALSE 27600
27588: GO 27590
27590: DISABLE
// FogOff ( your_side ) ;
27591: LD_OWVAR 2
27595: PPUSH
27596: CALL_OW 344
27600: END
// every 0 0$1 trigger StreamModeActive and sSun do
27601: LD_EXP 47
27605: PUSH
27606: LD_EXP 70
27610: AND
27611: IFFALSE 27639
27613: GO 27615
27615: DISABLE
// begin solar_recharge_percent := 0 ;
27616: LD_ADDR_OWVAR 79
27620: PUSH
27621: LD_INT 0
27623: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27624: LD_INT 10500
27626: PPUSH
27627: CALL_OW 67
// solar_recharge_percent := 100 ;
27631: LD_ADDR_OWVAR 79
27635: PUSH
27636: LD_INT 100
27638: ST_TO_ADDR
// end ;
27639: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27640: LD_EXP 47
27644: PUSH
27645: LD_EXP 71
27649: AND
27650: IFFALSE 27889
27652: GO 27654
27654: DISABLE
27655: LD_INT 0
27657: PPUSH
27658: PPUSH
27659: PPUSH
// begin tmp := [ ] ;
27660: LD_ADDR_VAR 0 3
27664: PUSH
27665: EMPTY
27666: ST_TO_ADDR
// for i := 1 to 6 do
27667: LD_ADDR_VAR 0 1
27671: PUSH
27672: DOUBLE
27673: LD_INT 1
27675: DEC
27676: ST_TO_ADDR
27677: LD_INT 6
27679: PUSH
27680: FOR_TO
27681: IFFALSE 27786
// begin uc_nation := nation_nature ;
27683: LD_ADDR_OWVAR 21
27687: PUSH
27688: LD_INT 0
27690: ST_TO_ADDR
// uc_side := 0 ;
27691: LD_ADDR_OWVAR 20
27695: PUSH
27696: LD_INT 0
27698: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27699: LD_ADDR_OWVAR 29
27703: PUSH
27704: LD_INT 12
27706: PUSH
27707: LD_INT 12
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: ST_TO_ADDR
// hc_agressivity := 20 ;
27714: LD_ADDR_OWVAR 35
27718: PUSH
27719: LD_INT 20
27721: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27722: LD_ADDR_OWVAR 28
27726: PUSH
27727: LD_INT 17
27729: ST_TO_ADDR
// hc_gallery :=  ;
27730: LD_ADDR_OWVAR 33
27734: PUSH
27735: LD_STRING 
27737: ST_TO_ADDR
// hc_name :=  ;
27738: LD_ADDR_OWVAR 26
27742: PUSH
27743: LD_STRING 
27745: ST_TO_ADDR
// un := CreateHuman ;
27746: LD_ADDR_VAR 0 2
27750: PUSH
27751: CALL_OW 44
27755: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27756: LD_VAR 0 2
27760: PPUSH
27761: LD_INT 1
27763: PPUSH
27764: CALL_OW 51
// tmp := tmp ^ un ;
27768: LD_ADDR_VAR 0 3
27772: PUSH
27773: LD_VAR 0 3
27777: PUSH
27778: LD_VAR 0 2
27782: ADD
27783: ST_TO_ADDR
// end ;
27784: GO 27680
27786: POP
27787: POP
// repeat wait ( 0 0$1 ) ;
27788: LD_INT 35
27790: PPUSH
27791: CALL_OW 67
// for un in tmp do
27795: LD_ADDR_VAR 0 2
27799: PUSH
27800: LD_VAR 0 3
27804: PUSH
27805: FOR_IN
27806: IFFALSE 27880
// begin if IsDead ( un ) then
27808: LD_VAR 0 2
27812: PPUSH
27813: CALL_OW 301
27817: IFFALSE 27837
// begin tmp := tmp diff un ;
27819: LD_ADDR_VAR 0 3
27823: PUSH
27824: LD_VAR 0 3
27828: PUSH
27829: LD_VAR 0 2
27833: DIFF
27834: ST_TO_ADDR
// continue ;
27835: GO 27805
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27837: LD_VAR 0 2
27841: PPUSH
27842: LD_INT 3
27844: PUSH
27845: LD_INT 22
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PPUSH
27859: CALL_OW 69
27863: PPUSH
27864: LD_VAR 0 2
27868: PPUSH
27869: CALL_OW 74
27873: PPUSH
27874: CALL_OW 115
// end ;
27878: GO 27805
27880: POP
27881: POP
// until not tmp ;
27882: LD_VAR 0 3
27886: NOT
27887: IFFALSE 27788
// end ;
27889: PPOPN 3
27891: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27892: LD_EXP 47
27896: PUSH
27897: LD_EXP 72
27901: AND
27902: IFFALSE 27956
27904: GO 27906
27906: DISABLE
// begin ToLua ( displayTroll(); ) ;
27907: LD_STRING displayTroll();
27909: PPUSH
27910: CALL_OW 559
// wait ( 3 3$00 ) ;
27914: LD_INT 6300
27916: PPUSH
27917: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27921: LD_STRING hideTroll();
27923: PPUSH
27924: CALL_OW 559
// wait ( 1 1$00 ) ;
27928: LD_INT 2100
27930: PPUSH
27931: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27935: LD_STRING displayTroll();
27937: PPUSH
27938: CALL_OW 559
// wait ( 1 1$00 ) ;
27942: LD_INT 2100
27944: PPUSH
27945: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27949: LD_STRING hideTroll();
27951: PPUSH
27952: CALL_OW 559
// end ;
27956: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27957: LD_EXP 47
27961: PUSH
27962: LD_EXP 73
27966: AND
27967: IFFALSE 28030
27969: GO 27971
27971: DISABLE
27972: LD_INT 0
27974: PPUSH
// begin p := 0 ;
27975: LD_ADDR_VAR 0 1
27979: PUSH
27980: LD_INT 0
27982: ST_TO_ADDR
// repeat game_speed := 1 ;
27983: LD_ADDR_OWVAR 65
27987: PUSH
27988: LD_INT 1
27990: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27991: LD_INT 35
27993: PPUSH
27994: CALL_OW 67
// p := p + 1 ;
27998: LD_ADDR_VAR 0 1
28002: PUSH
28003: LD_VAR 0 1
28007: PUSH
28008: LD_INT 1
28010: PLUS
28011: ST_TO_ADDR
// until p >= 60 ;
28012: LD_VAR 0 1
28016: PUSH
28017: LD_INT 60
28019: GREATEREQUAL
28020: IFFALSE 27983
// game_speed := 4 ;
28022: LD_ADDR_OWVAR 65
28026: PUSH
28027: LD_INT 4
28029: ST_TO_ADDR
// end ;
28030: PPOPN 1
28032: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28033: LD_EXP 47
28037: PUSH
28038: LD_EXP 74
28042: AND
28043: IFFALSE 28189
28045: GO 28047
28047: DISABLE
28048: LD_INT 0
28050: PPUSH
28051: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28052: LD_ADDR_VAR 0 1
28056: PUSH
28057: LD_INT 22
28059: PUSH
28060: LD_OWVAR 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: LD_INT 30
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 30
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: LIST
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PPUSH
28101: CALL_OW 69
28105: ST_TO_ADDR
// if not depot then
28106: LD_VAR 0 1
28110: NOT
28111: IFFALSE 28115
// exit ;
28113: GO 28189
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28115: LD_ADDR_VAR 0 2
28119: PUSH
28120: LD_VAR 0 1
28124: PUSH
28125: LD_INT 1
28127: PPUSH
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL_OW 12
28137: ARRAY
28138: PPUSH
28139: CALL_OW 274
28143: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28144: LD_VAR 0 2
28148: PPUSH
28149: LD_INT 1
28151: PPUSH
28152: LD_INT 0
28154: PPUSH
28155: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28159: LD_VAR 0 2
28163: PPUSH
28164: LD_INT 2
28166: PPUSH
28167: LD_INT 0
28169: PPUSH
28170: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28174: LD_VAR 0 2
28178: PPUSH
28179: LD_INT 3
28181: PPUSH
28182: LD_INT 0
28184: PPUSH
28185: CALL_OW 277
// end ;
28189: PPOPN 2
28191: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28192: LD_EXP 47
28196: PUSH
28197: LD_EXP 75
28201: AND
28202: IFFALSE 28299
28204: GO 28206
28206: DISABLE
28207: LD_INT 0
28209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28210: LD_ADDR_VAR 0 1
28214: PUSH
28215: LD_INT 22
28217: PUSH
28218: LD_OWVAR 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 21
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 3
28239: PUSH
28240: LD_INT 23
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: PPUSH
28259: CALL_OW 69
28263: ST_TO_ADDR
// if not tmp then
28264: LD_VAR 0 1
28268: NOT
28269: IFFALSE 28273
// exit ;
28271: GO 28299
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28273: LD_VAR 0 1
28277: PUSH
28278: LD_INT 1
28280: PPUSH
28281: LD_VAR 0 1
28285: PPUSH
28286: CALL_OW 12
28290: ARRAY
28291: PPUSH
28292: LD_INT 200
28294: PPUSH
28295: CALL_OW 234
// end ;
28299: PPOPN 1
28301: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28302: LD_EXP 47
28306: PUSH
28307: LD_EXP 76
28311: AND
28312: IFFALSE 28391
28314: GO 28316
28316: DISABLE
28317: LD_INT 0
28319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28320: LD_ADDR_VAR 0 1
28324: PUSH
28325: LD_INT 22
28327: PUSH
28328: LD_OWVAR 2
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 21
28339: PUSH
28340: LD_INT 2
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PPUSH
28351: CALL_OW 69
28355: ST_TO_ADDR
// if not tmp then
28356: LD_VAR 0 1
28360: NOT
28361: IFFALSE 28365
// exit ;
28363: GO 28391
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28365: LD_VAR 0 1
28369: PUSH
28370: LD_INT 1
28372: PPUSH
28373: LD_VAR 0 1
28377: PPUSH
28378: CALL_OW 12
28382: ARRAY
28383: PPUSH
28384: LD_INT 60
28386: PPUSH
28387: CALL_OW 234
// end ;
28391: PPOPN 1
28393: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28394: LD_EXP 47
28398: PUSH
28399: LD_EXP 77
28403: AND
28404: IFFALSE 28503
28406: GO 28408
28408: DISABLE
28409: LD_INT 0
28411: PPUSH
28412: PPUSH
// begin enable ;
28413: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28414: LD_ADDR_VAR 0 1
28418: PUSH
28419: LD_INT 22
28421: PUSH
28422: LD_OWVAR 2
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 61
28433: PUSH
28434: EMPTY
28435: LIST
28436: PUSH
28437: LD_INT 33
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: PPUSH
28452: CALL_OW 69
28456: ST_TO_ADDR
// if not tmp then
28457: LD_VAR 0 1
28461: NOT
28462: IFFALSE 28466
// exit ;
28464: GO 28503
// for i in tmp do
28466: LD_ADDR_VAR 0 2
28470: PUSH
28471: LD_VAR 0 1
28475: PUSH
28476: FOR_IN
28477: IFFALSE 28501
// if IsControledBy ( i ) then
28479: LD_VAR 0 2
28483: PPUSH
28484: CALL_OW 312
28488: IFFALSE 28499
// ComUnlink ( i ) ;
28490: LD_VAR 0 2
28494: PPUSH
28495: CALL_OW 136
28499: GO 28476
28501: POP
28502: POP
// end ;
28503: PPOPN 2
28505: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28506: LD_EXP 47
28510: PUSH
28511: LD_EXP 78
28515: AND
28516: IFFALSE 28656
28518: GO 28520
28520: DISABLE
28521: LD_INT 0
28523: PPUSH
28524: PPUSH
// begin ToLua ( displayPowell(); ) ;
28525: LD_STRING displayPowell();
28527: PPUSH
28528: CALL_OW 559
// uc_side := 0 ;
28532: LD_ADDR_OWVAR 20
28536: PUSH
28537: LD_INT 0
28539: ST_TO_ADDR
// uc_nation := 2 ;
28540: LD_ADDR_OWVAR 21
28544: PUSH
28545: LD_INT 2
28547: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28548: LD_ADDR_OWVAR 37
28552: PUSH
28553: LD_INT 14
28555: ST_TO_ADDR
// vc_engine := engine_siberite ;
28556: LD_ADDR_OWVAR 39
28560: PUSH
28561: LD_INT 3
28563: ST_TO_ADDR
// vc_control := control_apeman ;
28564: LD_ADDR_OWVAR 38
28568: PUSH
28569: LD_INT 5
28571: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28572: LD_ADDR_OWVAR 40
28576: PUSH
28577: LD_INT 29
28579: ST_TO_ADDR
// un := CreateVehicle ;
28580: LD_ADDR_VAR 0 2
28584: PUSH
28585: CALL_OW 45
28589: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28590: LD_VAR 0 2
28594: PPUSH
28595: LD_INT 1
28597: PPUSH
28598: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28602: LD_INT 35
28604: PPUSH
28605: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28609: LD_VAR 0 2
28613: PPUSH
28614: LD_INT 22
28616: PUSH
28617: LD_OWVAR 2
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PPUSH
28626: CALL_OW 69
28630: PPUSH
28631: LD_VAR 0 2
28635: PPUSH
28636: CALL_OW 74
28640: PPUSH
28641: CALL_OW 115
// until IsDead ( un ) ;
28645: LD_VAR 0 2
28649: PPUSH
28650: CALL_OW 301
28654: IFFALSE 28602
// end ;
28656: PPOPN 2
28658: END
// every 0 0$1 trigger StreamModeActive and sStu do
28659: LD_EXP 47
28663: PUSH
28664: LD_EXP 86
28668: AND
28669: IFFALSE 28685
28671: GO 28673
28673: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28674: LD_STRING displayStucuk();
28676: PPUSH
28677: CALL_OW 559
// ResetFog ;
28681: CALL_OW 335
// end ;
28685: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28686: LD_EXP 47
28690: PUSH
28691: LD_EXP 79
28695: AND
28696: IFFALSE 28837
28698: GO 28700
28700: DISABLE
28701: LD_INT 0
28703: PPUSH
28704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28705: LD_ADDR_VAR 0 2
28709: PUSH
28710: LD_INT 22
28712: PUSH
28713: LD_OWVAR 2
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 21
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PPUSH
28736: CALL_OW 69
28740: ST_TO_ADDR
// if not tmp then
28741: LD_VAR 0 2
28745: NOT
28746: IFFALSE 28750
// exit ;
28748: GO 28837
// un := tmp [ rand ( 1 , tmp ) ] ;
28750: LD_ADDR_VAR 0 1
28754: PUSH
28755: LD_VAR 0 2
28759: PUSH
28760: LD_INT 1
28762: PPUSH
28763: LD_VAR 0 2
28767: PPUSH
28768: CALL_OW 12
28772: ARRAY
28773: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28774: LD_VAR 0 1
28778: PPUSH
28779: LD_INT 0
28781: PPUSH
28782: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28786: LD_VAR 0 1
28790: PPUSH
28791: LD_OWVAR 3
28795: PUSH
28796: LD_VAR 0 1
28800: DIFF
28801: PPUSH
28802: LD_VAR 0 1
28806: PPUSH
28807: CALL_OW 74
28811: PPUSH
28812: CALL_OW 115
// wait ( 0 0$20 ) ;
28816: LD_INT 700
28818: PPUSH
28819: CALL_OW 67
// SetSide ( un , your_side ) ;
28823: LD_VAR 0 1
28827: PPUSH
28828: LD_OWVAR 2
28832: PPUSH
28833: CALL_OW 235
// end ;
28837: PPOPN 2
28839: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28840: LD_EXP 47
28844: PUSH
28845: LD_EXP 80
28849: AND
28850: IFFALSE 28956
28852: GO 28854
28854: DISABLE
28855: LD_INT 0
28857: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28858: LD_ADDR_VAR 0 1
28862: PUSH
28863: LD_INT 22
28865: PUSH
28866: LD_OWVAR 2
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: LD_INT 30
28880: PUSH
28881: LD_INT 0
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 30
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: LIST
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PPUSH
28907: CALL_OW 69
28911: ST_TO_ADDR
// if not depot then
28912: LD_VAR 0 1
28916: NOT
28917: IFFALSE 28921
// exit ;
28919: GO 28956
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28921: LD_VAR 0 1
28925: PUSH
28926: LD_INT 1
28928: ARRAY
28929: PPUSH
28930: CALL_OW 250
28934: PPUSH
28935: LD_VAR 0 1
28939: PUSH
28940: LD_INT 1
28942: ARRAY
28943: PPUSH
28944: CALL_OW 251
28948: PPUSH
28949: LD_INT 70
28951: PPUSH
28952: CALL_OW 495
// end ;
28956: PPOPN 1
28958: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28959: LD_EXP 47
28963: PUSH
28964: LD_EXP 81
28968: AND
28969: IFFALSE 29180
28971: GO 28973
28973: DISABLE
28974: LD_INT 0
28976: PPUSH
28977: PPUSH
28978: PPUSH
28979: PPUSH
28980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28981: LD_ADDR_VAR 0 5
28985: PUSH
28986: LD_INT 22
28988: PUSH
28989: LD_OWVAR 2
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 21
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PPUSH
29012: CALL_OW 69
29016: ST_TO_ADDR
// if not tmp then
29017: LD_VAR 0 5
29021: NOT
29022: IFFALSE 29026
// exit ;
29024: GO 29180
// for i in tmp do
29026: LD_ADDR_VAR 0 1
29030: PUSH
29031: LD_VAR 0 5
29035: PUSH
29036: FOR_IN
29037: IFFALSE 29178
// begin d := rand ( 0 , 5 ) ;
29039: LD_ADDR_VAR 0 4
29043: PUSH
29044: LD_INT 0
29046: PPUSH
29047: LD_INT 5
29049: PPUSH
29050: CALL_OW 12
29054: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29055: LD_ADDR_VAR 0 2
29059: PUSH
29060: LD_VAR 0 1
29064: PPUSH
29065: CALL_OW 250
29069: PPUSH
29070: LD_VAR 0 4
29074: PPUSH
29075: LD_INT 3
29077: PPUSH
29078: LD_INT 12
29080: PPUSH
29081: CALL_OW 12
29085: PPUSH
29086: CALL_OW 272
29090: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29091: LD_ADDR_VAR 0 3
29095: PUSH
29096: LD_VAR 0 1
29100: PPUSH
29101: CALL_OW 251
29105: PPUSH
29106: LD_VAR 0 4
29110: PPUSH
29111: LD_INT 3
29113: PPUSH
29114: LD_INT 12
29116: PPUSH
29117: CALL_OW 12
29121: PPUSH
29122: CALL_OW 273
29126: ST_TO_ADDR
// if ValidHex ( x , y ) then
29127: LD_VAR 0 2
29131: PPUSH
29132: LD_VAR 0 3
29136: PPUSH
29137: CALL_OW 488
29141: IFFALSE 29176
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29143: LD_VAR 0 1
29147: PPUSH
29148: LD_VAR 0 2
29152: PPUSH
29153: LD_VAR 0 3
29157: PPUSH
29158: LD_INT 3
29160: PPUSH
29161: LD_INT 6
29163: PPUSH
29164: CALL_OW 12
29168: PPUSH
29169: LD_INT 1
29171: PPUSH
29172: CALL_OW 483
// end ;
29176: GO 29036
29178: POP
29179: POP
// end ;
29180: PPOPN 5
29182: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29183: LD_EXP 47
29187: PUSH
29188: LD_EXP 82
29192: AND
29193: IFFALSE 29287
29195: GO 29197
29197: DISABLE
29198: LD_INT 0
29200: PPUSH
29201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29202: LD_ADDR_VAR 0 2
29206: PUSH
29207: LD_INT 22
29209: PUSH
29210: LD_OWVAR 2
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 32
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 21
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: PPUSH
29244: CALL_OW 69
29248: ST_TO_ADDR
// if not tmp then
29249: LD_VAR 0 2
29253: NOT
29254: IFFALSE 29258
// exit ;
29256: GO 29287
// for i in tmp do
29258: LD_ADDR_VAR 0 1
29262: PUSH
29263: LD_VAR 0 2
29267: PUSH
29268: FOR_IN
29269: IFFALSE 29285
// SetFuel ( i , 0 ) ;
29271: LD_VAR 0 1
29275: PPUSH
29276: LD_INT 0
29278: PPUSH
29279: CALL_OW 240
29283: GO 29268
29285: POP
29286: POP
// end ;
29287: PPOPN 2
29289: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29290: LD_EXP 47
29294: PUSH
29295: LD_EXP 83
29299: AND
29300: IFFALSE 29366
29302: GO 29304
29304: DISABLE
29305: LD_INT 0
29307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29308: LD_ADDR_VAR 0 1
29312: PUSH
29313: LD_INT 22
29315: PUSH
29316: LD_OWVAR 2
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 30
29327: PUSH
29328: LD_INT 29
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PPUSH
29339: CALL_OW 69
29343: ST_TO_ADDR
// if not tmp then
29344: LD_VAR 0 1
29348: NOT
29349: IFFALSE 29353
// exit ;
29351: GO 29366
// DestroyUnit ( tmp [ 1 ] ) ;
29353: LD_VAR 0 1
29357: PUSH
29358: LD_INT 1
29360: ARRAY
29361: PPUSH
29362: CALL_OW 65
// end ;
29366: PPOPN 1
29368: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29369: LD_EXP 47
29373: PUSH
29374: LD_EXP 85
29378: AND
29379: IFFALSE 29508
29381: GO 29383
29383: DISABLE
29384: LD_INT 0
29386: PPUSH
// begin uc_side := 0 ;
29387: LD_ADDR_OWVAR 20
29391: PUSH
29392: LD_INT 0
29394: ST_TO_ADDR
// uc_nation := nation_arabian ;
29395: LD_ADDR_OWVAR 21
29399: PUSH
29400: LD_INT 2
29402: ST_TO_ADDR
// hc_gallery :=  ;
29403: LD_ADDR_OWVAR 33
29407: PUSH
29408: LD_STRING 
29410: ST_TO_ADDR
// hc_name :=  ;
29411: LD_ADDR_OWVAR 26
29415: PUSH
29416: LD_STRING 
29418: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29419: LD_INT 1
29421: PPUSH
29422: LD_INT 11
29424: PPUSH
29425: LD_INT 10
29427: PPUSH
29428: CALL_OW 380
// un := CreateHuman ;
29432: LD_ADDR_VAR 0 1
29436: PUSH
29437: CALL_OW 44
29441: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29442: LD_VAR 0 1
29446: PPUSH
29447: LD_INT 1
29449: PPUSH
29450: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29454: LD_INT 35
29456: PPUSH
29457: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29461: LD_VAR 0 1
29465: PPUSH
29466: LD_INT 22
29468: PUSH
29469: LD_OWVAR 2
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PPUSH
29478: CALL_OW 69
29482: PPUSH
29483: LD_VAR 0 1
29487: PPUSH
29488: CALL_OW 74
29492: PPUSH
29493: CALL_OW 115
// until IsDead ( un ) ;
29497: LD_VAR 0 1
29501: PPUSH
29502: CALL_OW 301
29506: IFFALSE 29454
// end ;
29508: PPOPN 1
29510: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29511: LD_EXP 47
29515: PUSH
29516: LD_EXP 87
29520: AND
29521: IFFALSE 29533
29523: GO 29525
29525: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29526: LD_STRING earthquake(getX(game), 0, 32)
29528: PPUSH
29529: CALL_OW 559
29533: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29534: LD_EXP 47
29538: PUSH
29539: LD_EXP 88
29543: AND
29544: IFFALSE 29635
29546: GO 29548
29548: DISABLE
29549: LD_INT 0
29551: PPUSH
// begin enable ;
29552: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_INT 22
29560: PUSH
29561: LD_OWVAR 2
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 21
29572: PUSH
29573: LD_INT 2
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 33
29582: PUSH
29583: LD_INT 3
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: LIST
29594: PPUSH
29595: CALL_OW 69
29599: ST_TO_ADDR
// if not tmp then
29600: LD_VAR 0 1
29604: NOT
29605: IFFALSE 29609
// exit ;
29607: GO 29635
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29609: LD_VAR 0 1
29613: PUSH
29614: LD_INT 1
29616: PPUSH
29617: LD_VAR 0 1
29621: PPUSH
29622: CALL_OW 12
29626: ARRAY
29627: PPUSH
29628: LD_INT 1
29630: PPUSH
29631: CALL_OW 234
// end ;
29635: PPOPN 1
29637: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29638: LD_EXP 47
29642: PUSH
29643: LD_EXP 89
29647: AND
29648: IFFALSE 29789
29650: GO 29652
29652: DISABLE
29653: LD_INT 0
29655: PPUSH
29656: PPUSH
29657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29658: LD_ADDR_VAR 0 3
29662: PUSH
29663: LD_INT 22
29665: PUSH
29666: LD_OWVAR 2
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 25
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PPUSH
29689: CALL_OW 69
29693: ST_TO_ADDR
// if not tmp then
29694: LD_VAR 0 3
29698: NOT
29699: IFFALSE 29703
// exit ;
29701: GO 29789
// un := tmp [ rand ( 1 , tmp ) ] ;
29703: LD_ADDR_VAR 0 2
29707: PUSH
29708: LD_VAR 0 3
29712: PUSH
29713: LD_INT 1
29715: PPUSH
29716: LD_VAR 0 3
29720: PPUSH
29721: CALL_OW 12
29725: ARRAY
29726: ST_TO_ADDR
// if Crawls ( un ) then
29727: LD_VAR 0 2
29731: PPUSH
29732: CALL_OW 318
29736: IFFALSE 29747
// ComWalk ( un ) ;
29738: LD_VAR 0 2
29742: PPUSH
29743: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29747: LD_VAR 0 2
29751: PPUSH
29752: LD_INT 9
29754: PPUSH
29755: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29759: LD_INT 28
29761: PPUSH
29762: LD_OWVAR 2
29766: PPUSH
29767: LD_INT 2
29769: PPUSH
29770: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29774: LD_INT 29
29776: PPUSH
29777: LD_OWVAR 2
29781: PPUSH
29782: LD_INT 2
29784: PPUSH
29785: CALL_OW 322
// end ;
29789: PPOPN 3
29791: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29792: LD_EXP 47
29796: PUSH
29797: LD_EXP 90
29801: AND
29802: IFFALSE 29913
29804: GO 29806
29806: DISABLE
29807: LD_INT 0
29809: PPUSH
29810: PPUSH
29811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29812: LD_ADDR_VAR 0 3
29816: PUSH
29817: LD_INT 22
29819: PUSH
29820: LD_OWVAR 2
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 25
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PPUSH
29843: CALL_OW 69
29847: ST_TO_ADDR
// if not tmp then
29848: LD_VAR 0 3
29852: NOT
29853: IFFALSE 29857
// exit ;
29855: GO 29913
// un := tmp [ rand ( 1 , tmp ) ] ;
29857: LD_ADDR_VAR 0 2
29861: PUSH
29862: LD_VAR 0 3
29866: PUSH
29867: LD_INT 1
29869: PPUSH
29870: LD_VAR 0 3
29874: PPUSH
29875: CALL_OW 12
29879: ARRAY
29880: ST_TO_ADDR
// if Crawls ( un ) then
29881: LD_VAR 0 2
29885: PPUSH
29886: CALL_OW 318
29890: IFFALSE 29901
// ComWalk ( un ) ;
29892: LD_VAR 0 2
29896: PPUSH
29897: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29901: LD_VAR 0 2
29905: PPUSH
29906: LD_INT 8
29908: PPUSH
29909: CALL_OW 336
// end ;
29913: PPOPN 3
29915: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29916: LD_EXP 47
29920: PUSH
29921: LD_EXP 91
29925: AND
29926: IFFALSE 30070
29928: GO 29930
29930: DISABLE
29931: LD_INT 0
29933: PPUSH
29934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29935: LD_ADDR_VAR 0 2
29939: PUSH
29940: LD_INT 22
29942: PUSH
29943: LD_OWVAR 2
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 21
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: LD_INT 34
29967: PUSH
29968: LD_INT 12
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 34
29977: PUSH
29978: LD_INT 51
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 34
29987: PUSH
29988: LD_INT 32
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: PPUSH
30006: CALL_OW 69
30010: ST_TO_ADDR
// if not tmp then
30011: LD_VAR 0 2
30015: NOT
30016: IFFALSE 30020
// exit ;
30018: GO 30070
// for i in tmp do
30020: LD_ADDR_VAR 0 1
30024: PUSH
30025: LD_VAR 0 2
30029: PUSH
30030: FOR_IN
30031: IFFALSE 30068
// if GetCargo ( i , mat_artifact ) = 0 then
30033: LD_VAR 0 1
30037: PPUSH
30038: LD_INT 4
30040: PPUSH
30041: CALL_OW 289
30045: PUSH
30046: LD_INT 0
30048: EQUAL
30049: IFFALSE 30066
// SetCargo ( i , mat_siberit , 100 ) ;
30051: LD_VAR 0 1
30055: PPUSH
30056: LD_INT 3
30058: PPUSH
30059: LD_INT 100
30061: PPUSH
30062: CALL_OW 290
30066: GO 30030
30068: POP
30069: POP
// end ;
30070: PPOPN 2
30072: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30073: LD_EXP 47
30077: PUSH
30078: LD_EXP 92
30082: AND
30083: IFFALSE 30266
30085: GO 30087
30087: DISABLE
30088: LD_INT 0
30090: PPUSH
30091: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30092: LD_ADDR_VAR 0 2
30096: PUSH
30097: LD_INT 22
30099: PUSH
30100: LD_OWVAR 2
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PPUSH
30109: CALL_OW 69
30113: ST_TO_ADDR
// if not tmp then
30114: LD_VAR 0 2
30118: NOT
30119: IFFALSE 30123
// exit ;
30121: GO 30266
// for i := 1 to 2 do
30123: LD_ADDR_VAR 0 1
30127: PUSH
30128: DOUBLE
30129: LD_INT 1
30131: DEC
30132: ST_TO_ADDR
30133: LD_INT 2
30135: PUSH
30136: FOR_TO
30137: IFFALSE 30264
// begin uc_side := your_side ;
30139: LD_ADDR_OWVAR 20
30143: PUSH
30144: LD_OWVAR 2
30148: ST_TO_ADDR
// uc_nation := nation_american ;
30149: LD_ADDR_OWVAR 21
30153: PUSH
30154: LD_INT 1
30156: ST_TO_ADDR
// vc_chassis := us_morphling ;
30157: LD_ADDR_OWVAR 37
30161: PUSH
30162: LD_INT 5
30164: ST_TO_ADDR
// vc_engine := engine_siberite ;
30165: LD_ADDR_OWVAR 39
30169: PUSH
30170: LD_INT 3
30172: ST_TO_ADDR
// vc_control := control_computer ;
30173: LD_ADDR_OWVAR 38
30177: PUSH
30178: LD_INT 3
30180: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30181: LD_ADDR_OWVAR 40
30185: PUSH
30186: LD_INT 10
30188: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30189: LD_VAR 0 2
30193: PUSH
30194: LD_INT 1
30196: ARRAY
30197: PPUSH
30198: CALL_OW 310
30202: NOT
30203: IFFALSE 30250
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30205: CALL_OW 45
30209: PPUSH
30210: LD_VAR 0 2
30214: PUSH
30215: LD_INT 1
30217: ARRAY
30218: PPUSH
30219: CALL_OW 250
30223: PPUSH
30224: LD_VAR 0 2
30228: PUSH
30229: LD_INT 1
30231: ARRAY
30232: PPUSH
30233: CALL_OW 251
30237: PPUSH
30238: LD_INT 12
30240: PPUSH
30241: LD_INT 1
30243: PPUSH
30244: CALL_OW 50
30248: GO 30262
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30250: CALL_OW 45
30254: PPUSH
30255: LD_INT 1
30257: PPUSH
30258: CALL_OW 51
// end ;
30262: GO 30136
30264: POP
30265: POP
// end ;
30266: PPOPN 2
30268: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30269: LD_EXP 47
30273: PUSH
30274: LD_EXP 93
30278: AND
30279: IFFALSE 30501
30281: GO 30283
30283: DISABLE
30284: LD_INT 0
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30292: LD_ADDR_VAR 0 6
30296: PUSH
30297: LD_INT 22
30299: PUSH
30300: LD_OWVAR 2
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 21
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 3
30321: PUSH
30322: LD_INT 23
30324: PUSH
30325: LD_INT 0
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: LIST
30340: PPUSH
30341: CALL_OW 69
30345: ST_TO_ADDR
// if not tmp then
30346: LD_VAR 0 6
30350: NOT
30351: IFFALSE 30355
// exit ;
30353: GO 30501
// s1 := rand ( 1 , 4 ) ;
30355: LD_ADDR_VAR 0 2
30359: PUSH
30360: LD_INT 1
30362: PPUSH
30363: LD_INT 4
30365: PPUSH
30366: CALL_OW 12
30370: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30371: LD_ADDR_VAR 0 4
30375: PUSH
30376: LD_VAR 0 6
30380: PUSH
30381: LD_INT 1
30383: ARRAY
30384: PPUSH
30385: LD_VAR 0 2
30389: PPUSH
30390: CALL_OW 259
30394: ST_TO_ADDR
// if s1 = 1 then
30395: LD_VAR 0 2
30399: PUSH
30400: LD_INT 1
30402: EQUAL
30403: IFFALSE 30423
// s2 := rand ( 2 , 4 ) else
30405: LD_ADDR_VAR 0 3
30409: PUSH
30410: LD_INT 2
30412: PPUSH
30413: LD_INT 4
30415: PPUSH
30416: CALL_OW 12
30420: ST_TO_ADDR
30421: GO 30431
// s2 := 1 ;
30423: LD_ADDR_VAR 0 3
30427: PUSH
30428: LD_INT 1
30430: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30431: LD_ADDR_VAR 0 5
30435: PUSH
30436: LD_VAR 0 6
30440: PUSH
30441: LD_INT 1
30443: ARRAY
30444: PPUSH
30445: LD_VAR 0 3
30449: PPUSH
30450: CALL_OW 259
30454: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30455: LD_VAR 0 6
30459: PUSH
30460: LD_INT 1
30462: ARRAY
30463: PPUSH
30464: LD_VAR 0 2
30468: PPUSH
30469: LD_VAR 0 5
30473: PPUSH
30474: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30478: LD_VAR 0 6
30482: PUSH
30483: LD_INT 1
30485: ARRAY
30486: PPUSH
30487: LD_VAR 0 3
30491: PPUSH
30492: LD_VAR 0 4
30496: PPUSH
30497: CALL_OW 237
// end ;
30501: PPOPN 6
30503: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30504: LD_EXP 47
30508: PUSH
30509: LD_EXP 94
30513: AND
30514: IFFALSE 30593
30516: GO 30518
30518: DISABLE
30519: LD_INT 0
30521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30522: LD_ADDR_VAR 0 1
30526: PUSH
30527: LD_INT 22
30529: PUSH
30530: LD_OWVAR 2
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 30
30541: PUSH
30542: LD_INT 3
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PPUSH
30553: CALL_OW 69
30557: ST_TO_ADDR
// if not tmp then
30558: LD_VAR 0 1
30562: NOT
30563: IFFALSE 30567
// exit ;
30565: GO 30593
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30567: LD_VAR 0 1
30571: PUSH
30572: LD_INT 1
30574: PPUSH
30575: LD_VAR 0 1
30579: PPUSH
30580: CALL_OW 12
30584: ARRAY
30585: PPUSH
30586: LD_INT 1
30588: PPUSH
30589: CALL_OW 234
// end ;
30593: PPOPN 1
30595: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30596: LD_EXP 47
30600: PUSH
30601: LD_EXP 95
30605: AND
30606: IFFALSE 30718
30608: GO 30610
30610: DISABLE
30611: LD_INT 0
30613: PPUSH
30614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30615: LD_ADDR_VAR 0 2
30619: PUSH
30620: LD_INT 22
30622: PUSH
30623: LD_OWVAR 2
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 2
30634: PUSH
30635: LD_INT 30
30637: PUSH
30638: LD_INT 27
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 30
30647: PUSH
30648: LD_INT 26
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 30
30657: PUSH
30658: LD_INT 28
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PPUSH
30675: CALL_OW 69
30679: ST_TO_ADDR
// if not tmp then
30680: LD_VAR 0 2
30684: NOT
30685: IFFALSE 30689
// exit ;
30687: GO 30718
// for i in tmp do
30689: LD_ADDR_VAR 0 1
30693: PUSH
30694: LD_VAR 0 2
30698: PUSH
30699: FOR_IN
30700: IFFALSE 30716
// SetLives ( i , 1 ) ;
30702: LD_VAR 0 1
30706: PPUSH
30707: LD_INT 1
30709: PPUSH
30710: CALL_OW 234
30714: GO 30699
30716: POP
30717: POP
// end ;
30718: PPOPN 2
30720: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30721: LD_EXP 47
30725: PUSH
30726: LD_EXP 96
30730: AND
30731: IFFALSE 31018
30733: GO 30735
30735: DISABLE
30736: LD_INT 0
30738: PPUSH
30739: PPUSH
30740: PPUSH
// begin i := rand ( 1 , 7 ) ;
30741: LD_ADDR_VAR 0 1
30745: PUSH
30746: LD_INT 1
30748: PPUSH
30749: LD_INT 7
30751: PPUSH
30752: CALL_OW 12
30756: ST_TO_ADDR
// case i of 1 :
30757: LD_VAR 0 1
30761: PUSH
30762: LD_INT 1
30764: DOUBLE
30765: EQUAL
30766: IFTRUE 30770
30768: GO 30780
30770: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30771: LD_STRING earthquake(getX(game), 0, 32)
30773: PPUSH
30774: CALL_OW 559
30778: GO 31018
30780: LD_INT 2
30782: DOUBLE
30783: EQUAL
30784: IFTRUE 30788
30786: GO 30802
30788: POP
// begin ToLua ( displayStucuk(); ) ;
30789: LD_STRING displayStucuk();
30791: PPUSH
30792: CALL_OW 559
// ResetFog ;
30796: CALL_OW 335
// end ; 3 :
30800: GO 31018
30802: LD_INT 3
30804: DOUBLE
30805: EQUAL
30806: IFTRUE 30810
30808: GO 30914
30810: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30811: LD_ADDR_VAR 0 2
30815: PUSH
30816: LD_INT 22
30818: PUSH
30819: LD_OWVAR 2
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 25
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PPUSH
30842: CALL_OW 69
30846: ST_TO_ADDR
// if not tmp then
30847: LD_VAR 0 2
30851: NOT
30852: IFFALSE 30856
// exit ;
30854: GO 31018
// un := tmp [ rand ( 1 , tmp ) ] ;
30856: LD_ADDR_VAR 0 3
30860: PUSH
30861: LD_VAR 0 2
30865: PUSH
30866: LD_INT 1
30868: PPUSH
30869: LD_VAR 0 2
30873: PPUSH
30874: CALL_OW 12
30878: ARRAY
30879: ST_TO_ADDR
// if Crawls ( un ) then
30880: LD_VAR 0 3
30884: PPUSH
30885: CALL_OW 318
30889: IFFALSE 30900
// ComWalk ( un ) ;
30891: LD_VAR 0 3
30895: PPUSH
30896: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30900: LD_VAR 0 3
30904: PPUSH
30905: LD_INT 8
30907: PPUSH
30908: CALL_OW 336
// end ; 4 :
30912: GO 31018
30914: LD_INT 4
30916: DOUBLE
30917: EQUAL
30918: IFTRUE 30922
30920: GO 30996
30922: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30923: LD_ADDR_VAR 0 2
30927: PUSH
30928: LD_INT 22
30930: PUSH
30931: LD_OWVAR 2
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 30
30942: PUSH
30943: LD_INT 29
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PPUSH
30954: CALL_OW 69
30958: ST_TO_ADDR
// if not tmp then
30959: LD_VAR 0 2
30963: NOT
30964: IFFALSE 30968
// exit ;
30966: GO 31018
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30968: LD_VAR 0 2
30972: PUSH
30973: LD_INT 1
30975: ARRAY
30976: PPUSH
30977: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30981: LD_VAR 0 2
30985: PUSH
30986: LD_INT 1
30988: ARRAY
30989: PPUSH
30990: CALL_OW 65
// end ; 5 .. 7 :
30994: GO 31018
30996: LD_INT 5
30998: DOUBLE
30999: GREATEREQUAL
31000: IFFALSE 31008
31002: LD_INT 7
31004: DOUBLE
31005: LESSEQUAL
31006: IFTRUE 31010
31008: GO 31017
31010: POP
// StreamSibBomb ; end ;
31011: CALL 27255 0 0
31015: GO 31018
31017: POP
// end ;
31018: PPOPN 3
31020: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31021: LD_EXP 47
31025: PUSH
31026: LD_EXP 97
31030: AND
31031: IFFALSE 31187
31033: GO 31035
31035: DISABLE
31036: LD_INT 0
31038: PPUSH
31039: PPUSH
31040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31041: LD_ADDR_VAR 0 2
31045: PUSH
31046: LD_INT 81
31048: PUSH
31049: LD_OWVAR 2
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 2
31060: PUSH
31061: LD_INT 21
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 21
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PPUSH
31090: CALL_OW 69
31094: ST_TO_ADDR
// if not tmp then
31095: LD_VAR 0 2
31099: NOT
31100: IFFALSE 31104
// exit ;
31102: GO 31187
// p := 0 ;
31104: LD_ADDR_VAR 0 3
31108: PUSH
31109: LD_INT 0
31111: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31112: LD_INT 35
31114: PPUSH
31115: CALL_OW 67
// p := p + 1 ;
31119: LD_ADDR_VAR 0 3
31123: PUSH
31124: LD_VAR 0 3
31128: PUSH
31129: LD_INT 1
31131: PLUS
31132: ST_TO_ADDR
// for i in tmp do
31133: LD_ADDR_VAR 0 1
31137: PUSH
31138: LD_VAR 0 2
31142: PUSH
31143: FOR_IN
31144: IFFALSE 31175
// if GetLives ( i ) < 1000 then
31146: LD_VAR 0 1
31150: PPUSH
31151: CALL_OW 256
31155: PUSH
31156: LD_INT 1000
31158: LESS
31159: IFFALSE 31173
// SetLives ( i , 1000 ) ;
31161: LD_VAR 0 1
31165: PPUSH
31166: LD_INT 1000
31168: PPUSH
31169: CALL_OW 234
31173: GO 31143
31175: POP
31176: POP
// until p > 20 ;
31177: LD_VAR 0 3
31181: PUSH
31182: LD_INT 20
31184: GREATER
31185: IFFALSE 31112
// end ;
31187: PPOPN 3
31189: END
// every 0 0$1 trigger StreamModeActive and sTime do
31190: LD_EXP 47
31194: PUSH
31195: LD_EXP 98
31199: AND
31200: IFFALSE 31235
31202: GO 31204
31204: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31205: LD_INT 28
31207: PPUSH
31208: LD_OWVAR 2
31212: PPUSH
31213: LD_INT 2
31215: PPUSH
31216: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31220: LD_INT 30
31222: PPUSH
31223: LD_OWVAR 2
31227: PPUSH
31228: LD_INT 2
31230: PPUSH
31231: CALL_OW 322
// end ;
31235: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31236: LD_EXP 47
31240: PUSH
31241: LD_EXP 99
31245: AND
31246: IFFALSE 31367
31248: GO 31250
31250: DISABLE
31251: LD_INT 0
31253: PPUSH
31254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31255: LD_ADDR_VAR 0 2
31259: PUSH
31260: LD_INT 22
31262: PUSH
31263: LD_OWVAR 2
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 21
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: LD_INT 23
31287: PUSH
31288: LD_INT 0
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: PPUSH
31304: CALL_OW 69
31308: ST_TO_ADDR
// if not tmp then
31309: LD_VAR 0 2
31313: NOT
31314: IFFALSE 31318
// exit ;
31316: GO 31367
// for i in tmp do
31318: LD_ADDR_VAR 0 1
31322: PUSH
31323: LD_VAR 0 2
31327: PUSH
31328: FOR_IN
31329: IFFALSE 31365
// begin if Crawls ( i ) then
31331: LD_VAR 0 1
31335: PPUSH
31336: CALL_OW 318
31340: IFFALSE 31351
// ComWalk ( i ) ;
31342: LD_VAR 0 1
31346: PPUSH
31347: CALL_OW 138
// SetClass ( i , 2 ) ;
31351: LD_VAR 0 1
31355: PPUSH
31356: LD_INT 2
31358: PPUSH
31359: CALL_OW 336
// end ;
31363: GO 31328
31365: POP
31366: POP
// end ;
31367: PPOPN 2
31369: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31370: LD_EXP 47
31374: PUSH
31375: LD_EXP 100
31379: AND
31380: IFFALSE 31668
31382: GO 31384
31384: DISABLE
31385: LD_INT 0
31387: PPUSH
31388: PPUSH
31389: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31390: LD_OWVAR 2
31394: PPUSH
31395: LD_INT 9
31397: PPUSH
31398: LD_INT 1
31400: PPUSH
31401: LD_INT 1
31403: PPUSH
31404: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31408: LD_INT 9
31410: PPUSH
31411: LD_OWVAR 2
31415: PPUSH
31416: CALL_OW 343
// uc_side := 9 ;
31420: LD_ADDR_OWVAR 20
31424: PUSH
31425: LD_INT 9
31427: ST_TO_ADDR
// uc_nation := 2 ;
31428: LD_ADDR_OWVAR 21
31432: PUSH
31433: LD_INT 2
31435: ST_TO_ADDR
// hc_name := Dark Warrior ;
31436: LD_ADDR_OWVAR 26
31440: PUSH
31441: LD_STRING Dark Warrior
31443: ST_TO_ADDR
// hc_gallery :=  ;
31444: LD_ADDR_OWVAR 33
31448: PUSH
31449: LD_STRING 
31451: ST_TO_ADDR
// hc_noskilllimit := true ;
31452: LD_ADDR_OWVAR 76
31456: PUSH
31457: LD_INT 1
31459: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31460: LD_ADDR_OWVAR 31
31464: PUSH
31465: LD_INT 30
31467: PUSH
31468: LD_INT 30
31470: PUSH
31471: LD_INT 30
31473: PUSH
31474: LD_INT 30
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: ST_TO_ADDR
// un := CreateHuman ;
31483: LD_ADDR_VAR 0 3
31487: PUSH
31488: CALL_OW 44
31492: ST_TO_ADDR
// hc_noskilllimit := false ;
31493: LD_ADDR_OWVAR 76
31497: PUSH
31498: LD_INT 0
31500: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31501: LD_VAR 0 3
31505: PPUSH
31506: LD_INT 1
31508: PPUSH
31509: CALL_OW 51
// ToLua ( playRanger() ) ;
31513: LD_STRING playRanger()
31515: PPUSH
31516: CALL_OW 559
// p := 0 ;
31520: LD_ADDR_VAR 0 2
31524: PUSH
31525: LD_INT 0
31527: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31528: LD_INT 35
31530: PPUSH
31531: CALL_OW 67
// p := p + 1 ;
31535: LD_ADDR_VAR 0 2
31539: PUSH
31540: LD_VAR 0 2
31544: PUSH
31545: LD_INT 1
31547: PLUS
31548: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31549: LD_VAR 0 3
31553: PPUSH
31554: CALL_OW 256
31558: PUSH
31559: LD_INT 1000
31561: LESS
31562: IFFALSE 31576
// SetLives ( un , 1000 ) ;
31564: LD_VAR 0 3
31568: PPUSH
31569: LD_INT 1000
31571: PPUSH
31572: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31576: LD_VAR 0 3
31580: PPUSH
31581: LD_INT 81
31583: PUSH
31584: LD_OWVAR 2
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 91
31595: PUSH
31596: LD_VAR 0 3
31600: PUSH
31601: LD_INT 30
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: LIST
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PPUSH
31613: CALL_OW 69
31617: PPUSH
31618: LD_VAR 0 3
31622: PPUSH
31623: CALL_OW 74
31627: PPUSH
31628: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31632: LD_VAR 0 2
31636: PUSH
31637: LD_INT 80
31639: GREATER
31640: PUSH
31641: LD_VAR 0 3
31645: PPUSH
31646: CALL_OW 301
31650: OR
31651: IFFALSE 31528
// if un then
31653: LD_VAR 0 3
31657: IFFALSE 31668
// RemoveUnit ( un ) ;
31659: LD_VAR 0 3
31663: PPUSH
31664: CALL_OW 64
// end ;
31668: PPOPN 3
31670: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31671: LD_EXP 101
31675: IFFALSE 31791
31677: GO 31679
31679: DISABLE
31680: LD_INT 0
31682: PPUSH
31683: PPUSH
31684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31685: LD_ADDR_VAR 0 2
31689: PUSH
31690: LD_INT 81
31692: PUSH
31693: LD_OWVAR 2
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 21
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PPUSH
31716: CALL_OW 69
31720: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31721: LD_STRING playComputer()
31723: PPUSH
31724: CALL_OW 559
// if not tmp then
31728: LD_VAR 0 2
31732: NOT
31733: IFFALSE 31737
// exit ;
31735: GO 31791
// for i in tmp do
31737: LD_ADDR_VAR 0 1
31741: PUSH
31742: LD_VAR 0 2
31746: PUSH
31747: FOR_IN
31748: IFFALSE 31789
// for j := 1 to 4 do
31750: LD_ADDR_VAR 0 3
31754: PUSH
31755: DOUBLE
31756: LD_INT 1
31758: DEC
31759: ST_TO_ADDR
31760: LD_INT 4
31762: PUSH
31763: FOR_TO
31764: IFFALSE 31785
// SetSkill ( i , j , 10 ) ;
31766: LD_VAR 0 1
31770: PPUSH
31771: LD_VAR 0 3
31775: PPUSH
31776: LD_INT 10
31778: PPUSH
31779: CALL_OW 237
31783: GO 31763
31785: POP
31786: POP
31787: GO 31747
31789: POP
31790: POP
// end ;
31791: PPOPN 3
31793: END
// every 0 0$1 trigger s30 do var i , tmp ;
31794: LD_EXP 102
31798: IFFALSE 31867
31800: GO 31802
31802: DISABLE
31803: LD_INT 0
31805: PPUSH
31806: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31807: LD_ADDR_VAR 0 2
31811: PUSH
31812: LD_INT 22
31814: PUSH
31815: LD_OWVAR 2
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PPUSH
31824: CALL_OW 69
31828: ST_TO_ADDR
// if not tmp then
31829: LD_VAR 0 2
31833: NOT
31834: IFFALSE 31838
// exit ;
31836: GO 31867
// for i in tmp do
31838: LD_ADDR_VAR 0 1
31842: PUSH
31843: LD_VAR 0 2
31847: PUSH
31848: FOR_IN
31849: IFFALSE 31865
// SetLives ( i , 300 ) ;
31851: LD_VAR 0 1
31855: PPUSH
31856: LD_INT 300
31858: PPUSH
31859: CALL_OW 234
31863: GO 31848
31865: POP
31866: POP
// end ;
31867: PPOPN 2
31869: END
// every 0 0$1 trigger s60 do var i , tmp ;
31870: LD_EXP 103
31874: IFFALSE 31943
31876: GO 31878
31878: DISABLE
31879: LD_INT 0
31881: PPUSH
31882: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31883: LD_ADDR_VAR 0 2
31887: PUSH
31888: LD_INT 22
31890: PUSH
31891: LD_OWVAR 2
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PPUSH
31900: CALL_OW 69
31904: ST_TO_ADDR
// if not tmp then
31905: LD_VAR 0 2
31909: NOT
31910: IFFALSE 31914
// exit ;
31912: GO 31943
// for i in tmp do
31914: LD_ADDR_VAR 0 1
31918: PUSH
31919: LD_VAR 0 2
31923: PUSH
31924: FOR_IN
31925: IFFALSE 31941
// SetLives ( i , 600 ) ;
31927: LD_VAR 0 1
31931: PPUSH
31932: LD_INT 600
31934: PPUSH
31935: CALL_OW 234
31939: GO 31924
31941: POP
31942: POP
// end ;
31943: PPOPN 2
31945: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31946: LD_INT 0
31948: PPUSH
// case cmd of 301 :
31949: LD_VAR 0 1
31953: PUSH
31954: LD_INT 301
31956: DOUBLE
31957: EQUAL
31958: IFTRUE 31962
31960: GO 31994
31962: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31963: LD_VAR 0 6
31967: PPUSH
31968: LD_VAR 0 7
31972: PPUSH
31973: LD_VAR 0 8
31977: PPUSH
31978: LD_VAR 0 4
31982: PPUSH
31983: LD_VAR 0 5
31987: PPUSH
31988: CALL 33203 0 5
31992: GO 32115
31994: LD_INT 302
31996: DOUBLE
31997: EQUAL
31998: IFTRUE 32002
32000: GO 32039
32002: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32003: LD_VAR 0 6
32007: PPUSH
32008: LD_VAR 0 7
32012: PPUSH
32013: LD_VAR 0 8
32017: PPUSH
32018: LD_VAR 0 9
32022: PPUSH
32023: LD_VAR 0 4
32027: PPUSH
32028: LD_VAR 0 5
32032: PPUSH
32033: CALL 33294 0 6
32037: GO 32115
32039: LD_INT 303
32041: DOUBLE
32042: EQUAL
32043: IFTRUE 32047
32045: GO 32084
32047: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32048: LD_VAR 0 6
32052: PPUSH
32053: LD_VAR 0 7
32057: PPUSH
32058: LD_VAR 0 8
32062: PPUSH
32063: LD_VAR 0 9
32067: PPUSH
32068: LD_VAR 0 4
32072: PPUSH
32073: LD_VAR 0 5
32077: PPUSH
32078: CALL 32120 0 6
32082: GO 32115
32084: LD_INT 304
32086: DOUBLE
32087: EQUAL
32088: IFTRUE 32092
32090: GO 32114
32092: POP
// hHackTeleport ( unit , x , y ) ; end ;
32093: LD_VAR 0 2
32097: PPUSH
32098: LD_VAR 0 4
32102: PPUSH
32103: LD_VAR 0 5
32107: PPUSH
32108: CALL 33887 0 3
32112: GO 32115
32114: POP
// end ;
32115: LD_VAR 0 12
32119: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32120: LD_INT 0
32122: PPUSH
32123: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32124: LD_VAR 0 1
32128: PUSH
32129: LD_INT 1
32131: LESS
32132: PUSH
32133: LD_VAR 0 1
32137: PUSH
32138: LD_INT 3
32140: GREATER
32141: OR
32142: PUSH
32143: LD_VAR 0 5
32147: PPUSH
32148: LD_VAR 0 6
32152: PPUSH
32153: CALL_OW 428
32157: OR
32158: IFFALSE 32162
// exit ;
32160: GO 32890
// uc_side := your_side ;
32162: LD_ADDR_OWVAR 20
32166: PUSH
32167: LD_OWVAR 2
32171: ST_TO_ADDR
// uc_nation := nation ;
32172: LD_ADDR_OWVAR 21
32176: PUSH
32177: LD_VAR 0 1
32181: ST_TO_ADDR
// bc_level = 1 ;
32182: LD_ADDR_OWVAR 43
32186: PUSH
32187: LD_INT 1
32189: ST_TO_ADDR
// case btype of 1 :
32190: LD_VAR 0 2
32194: PUSH
32195: LD_INT 1
32197: DOUBLE
32198: EQUAL
32199: IFTRUE 32203
32201: GO 32214
32203: POP
// bc_type := b_depot ; 2 :
32204: LD_ADDR_OWVAR 42
32208: PUSH
32209: LD_INT 0
32211: ST_TO_ADDR
32212: GO 32834
32214: LD_INT 2
32216: DOUBLE
32217: EQUAL
32218: IFTRUE 32222
32220: GO 32233
32222: POP
// bc_type := b_warehouse ; 3 :
32223: LD_ADDR_OWVAR 42
32227: PUSH
32228: LD_INT 1
32230: ST_TO_ADDR
32231: GO 32834
32233: LD_INT 3
32235: DOUBLE
32236: EQUAL
32237: IFTRUE 32241
32239: GO 32252
32241: POP
// bc_type := b_lab ; 4 .. 9 :
32242: LD_ADDR_OWVAR 42
32246: PUSH
32247: LD_INT 6
32249: ST_TO_ADDR
32250: GO 32834
32252: LD_INT 4
32254: DOUBLE
32255: GREATEREQUAL
32256: IFFALSE 32264
32258: LD_INT 9
32260: DOUBLE
32261: LESSEQUAL
32262: IFTRUE 32266
32264: GO 32326
32266: POP
// begin bc_type := b_lab_half ;
32267: LD_ADDR_OWVAR 42
32271: PUSH
32272: LD_INT 7
32274: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32275: LD_ADDR_OWVAR 44
32279: PUSH
32280: LD_INT 10
32282: PUSH
32283: LD_INT 11
32285: PUSH
32286: LD_INT 12
32288: PUSH
32289: LD_INT 15
32291: PUSH
32292: LD_INT 14
32294: PUSH
32295: LD_INT 13
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: PUSH
32306: LD_VAR 0 2
32310: PUSH
32311: LD_INT 3
32313: MINUS
32314: ARRAY
32315: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32316: LD_ADDR_OWVAR 45
32320: PUSH
32321: LD_INT 9
32323: ST_TO_ADDR
// end ; 10 .. 13 :
32324: GO 32834
32326: LD_INT 10
32328: DOUBLE
32329: GREATEREQUAL
32330: IFFALSE 32338
32332: LD_INT 13
32334: DOUBLE
32335: LESSEQUAL
32336: IFTRUE 32340
32338: GO 32417
32340: POP
// begin bc_type := b_lab_full ;
32341: LD_ADDR_OWVAR 42
32345: PUSH
32346: LD_INT 8
32348: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32349: LD_ADDR_OWVAR 44
32353: PUSH
32354: LD_INT 10
32356: PUSH
32357: LD_INT 12
32359: PUSH
32360: LD_INT 14
32362: PUSH
32363: LD_INT 13
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: PUSH
32372: LD_VAR 0 2
32376: PUSH
32377: LD_INT 9
32379: MINUS
32380: ARRAY
32381: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32382: LD_ADDR_OWVAR 45
32386: PUSH
32387: LD_INT 11
32389: PUSH
32390: LD_INT 15
32392: PUSH
32393: LD_INT 12
32395: PUSH
32396: LD_INT 15
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: PUSH
32405: LD_VAR 0 2
32409: PUSH
32410: LD_INT 9
32412: MINUS
32413: ARRAY
32414: ST_TO_ADDR
// end ; 14 :
32415: GO 32834
32417: LD_INT 14
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32436
32425: POP
// bc_type := b_workshop ; 15 :
32426: LD_ADDR_OWVAR 42
32430: PUSH
32431: LD_INT 2
32433: ST_TO_ADDR
32434: GO 32834
32436: LD_INT 15
32438: DOUBLE
32439: EQUAL
32440: IFTRUE 32444
32442: GO 32455
32444: POP
// bc_type := b_factory ; 16 :
32445: LD_ADDR_OWVAR 42
32449: PUSH
32450: LD_INT 3
32452: ST_TO_ADDR
32453: GO 32834
32455: LD_INT 16
32457: DOUBLE
32458: EQUAL
32459: IFTRUE 32463
32461: GO 32474
32463: POP
// bc_type := b_ext_gun ; 17 :
32464: LD_ADDR_OWVAR 42
32468: PUSH
32469: LD_INT 17
32471: ST_TO_ADDR
32472: GO 32834
32474: LD_INT 17
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32510
32482: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32483: LD_ADDR_OWVAR 42
32487: PUSH
32488: LD_INT 19
32490: PUSH
32491: LD_INT 23
32493: PUSH
32494: LD_INT 19
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: LIST
32501: PUSH
32502: LD_VAR 0 1
32506: ARRAY
32507: ST_TO_ADDR
32508: GO 32834
32510: LD_INT 18
32512: DOUBLE
32513: EQUAL
32514: IFTRUE 32518
32516: GO 32529
32518: POP
// bc_type := b_ext_radar ; 19 :
32519: LD_ADDR_OWVAR 42
32523: PUSH
32524: LD_INT 20
32526: ST_TO_ADDR
32527: GO 32834
32529: LD_INT 19
32531: DOUBLE
32532: EQUAL
32533: IFTRUE 32537
32535: GO 32548
32537: POP
// bc_type := b_ext_radio ; 20 :
32538: LD_ADDR_OWVAR 42
32542: PUSH
32543: LD_INT 22
32545: ST_TO_ADDR
32546: GO 32834
32548: LD_INT 20
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 32567
32556: POP
// bc_type := b_ext_siberium ; 21 :
32557: LD_ADDR_OWVAR 42
32561: PUSH
32562: LD_INT 21
32564: ST_TO_ADDR
32565: GO 32834
32567: LD_INT 21
32569: DOUBLE
32570: EQUAL
32571: IFTRUE 32575
32573: GO 32586
32575: POP
// bc_type := b_ext_computer ; 22 :
32576: LD_ADDR_OWVAR 42
32580: PUSH
32581: LD_INT 24
32583: ST_TO_ADDR
32584: GO 32834
32586: LD_INT 22
32588: DOUBLE
32589: EQUAL
32590: IFTRUE 32594
32592: GO 32605
32594: POP
// bc_type := b_ext_track ; 23 :
32595: LD_ADDR_OWVAR 42
32599: PUSH
32600: LD_INT 16
32602: ST_TO_ADDR
32603: GO 32834
32605: LD_INT 23
32607: DOUBLE
32608: EQUAL
32609: IFTRUE 32613
32611: GO 32624
32613: POP
// bc_type := b_ext_laser ; 24 :
32614: LD_ADDR_OWVAR 42
32618: PUSH
32619: LD_INT 25
32621: ST_TO_ADDR
32622: GO 32834
32624: LD_INT 24
32626: DOUBLE
32627: EQUAL
32628: IFTRUE 32632
32630: GO 32643
32632: POP
// bc_type := b_control_tower ; 25 :
32633: LD_ADDR_OWVAR 42
32637: PUSH
32638: LD_INT 36
32640: ST_TO_ADDR
32641: GO 32834
32643: LD_INT 25
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32662
32651: POP
// bc_type := b_breastwork ; 26 :
32652: LD_ADDR_OWVAR 42
32656: PUSH
32657: LD_INT 31
32659: ST_TO_ADDR
32660: GO 32834
32662: LD_INT 26
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32681
32670: POP
// bc_type := b_bunker ; 27 :
32671: LD_ADDR_OWVAR 42
32675: PUSH
32676: LD_INT 32
32678: ST_TO_ADDR
32679: GO 32834
32681: LD_INT 27
32683: DOUBLE
32684: EQUAL
32685: IFTRUE 32689
32687: GO 32700
32689: POP
// bc_type := b_turret ; 28 :
32690: LD_ADDR_OWVAR 42
32694: PUSH
32695: LD_INT 33
32697: ST_TO_ADDR
32698: GO 32834
32700: LD_INT 28
32702: DOUBLE
32703: EQUAL
32704: IFTRUE 32708
32706: GO 32719
32708: POP
// bc_type := b_armoury ; 29 :
32709: LD_ADDR_OWVAR 42
32713: PUSH
32714: LD_INT 4
32716: ST_TO_ADDR
32717: GO 32834
32719: LD_INT 29
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32738
32727: POP
// bc_type := b_barracks ; 30 :
32728: LD_ADDR_OWVAR 42
32732: PUSH
32733: LD_INT 5
32735: ST_TO_ADDR
32736: GO 32834
32738: LD_INT 30
32740: DOUBLE
32741: EQUAL
32742: IFTRUE 32746
32744: GO 32757
32746: POP
// bc_type := b_solar_power ; 31 :
32747: LD_ADDR_OWVAR 42
32751: PUSH
32752: LD_INT 27
32754: ST_TO_ADDR
32755: GO 32834
32757: LD_INT 31
32759: DOUBLE
32760: EQUAL
32761: IFTRUE 32765
32763: GO 32776
32765: POP
// bc_type := b_oil_power ; 32 :
32766: LD_ADDR_OWVAR 42
32770: PUSH
32771: LD_INT 26
32773: ST_TO_ADDR
32774: GO 32834
32776: LD_INT 32
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32795
32784: POP
// bc_type := b_siberite_power ; 33 :
32785: LD_ADDR_OWVAR 42
32789: PUSH
32790: LD_INT 28
32792: ST_TO_ADDR
32793: GO 32834
32795: LD_INT 33
32797: DOUBLE
32798: EQUAL
32799: IFTRUE 32803
32801: GO 32814
32803: POP
// bc_type := b_oil_mine ; 34 :
32804: LD_ADDR_OWVAR 42
32808: PUSH
32809: LD_INT 29
32811: ST_TO_ADDR
32812: GO 32834
32814: LD_INT 34
32816: DOUBLE
32817: EQUAL
32818: IFTRUE 32822
32820: GO 32833
32822: POP
// bc_type := b_siberite_mine ; end ;
32823: LD_ADDR_OWVAR 42
32827: PUSH
32828: LD_INT 30
32830: ST_TO_ADDR
32831: GO 32834
32833: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32834: LD_ADDR_VAR 0 8
32838: PUSH
32839: LD_VAR 0 5
32843: PPUSH
32844: LD_VAR 0 6
32848: PPUSH
32849: LD_VAR 0 3
32853: PPUSH
32854: CALL_OW 47
32858: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32859: LD_OWVAR 42
32863: PUSH
32864: LD_INT 32
32866: PUSH
32867: LD_INT 33
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: IN
32874: IFFALSE 32890
// PlaceWeaponTurret ( b , weapon ) ;
32876: LD_VAR 0 8
32880: PPUSH
32881: LD_VAR 0 4
32885: PPUSH
32886: CALL_OW 431
// end ;
32890: LD_VAR 0 7
32894: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32895: LD_INT 0
32897: PPUSH
32898: PPUSH
32899: PPUSH
32900: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32901: LD_ADDR_VAR 0 4
32905: PUSH
32906: LD_INT 22
32908: PUSH
32909: LD_OWVAR 2
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: PUSH
32921: LD_INT 30
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 30
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: LIST
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PPUSH
32950: CALL_OW 69
32954: ST_TO_ADDR
// if not tmp then
32955: LD_VAR 0 4
32959: NOT
32960: IFFALSE 32964
// exit ;
32962: GO 33023
// for i in tmp do
32964: LD_ADDR_VAR 0 2
32968: PUSH
32969: LD_VAR 0 4
32973: PUSH
32974: FOR_IN
32975: IFFALSE 33021
// for j = 1 to 3 do
32977: LD_ADDR_VAR 0 3
32981: PUSH
32982: DOUBLE
32983: LD_INT 1
32985: DEC
32986: ST_TO_ADDR
32987: LD_INT 3
32989: PUSH
32990: FOR_TO
32991: IFFALSE 33017
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32993: LD_VAR 0 2
32997: PPUSH
32998: CALL_OW 274
33002: PPUSH
33003: LD_VAR 0 3
33007: PPUSH
33008: LD_INT 99999
33010: PPUSH
33011: CALL_OW 277
33015: GO 32990
33017: POP
33018: POP
33019: GO 32974
33021: POP
33022: POP
// end ;
33023: LD_VAR 0 1
33027: RET
// export function hHackSetLevel10 ; var i , j ; begin
33028: LD_INT 0
33030: PPUSH
33031: PPUSH
33032: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33033: LD_ADDR_VAR 0 2
33037: PUSH
33038: LD_INT 21
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PPUSH
33048: CALL_OW 69
33052: PUSH
33053: FOR_IN
33054: IFFALSE 33106
// if IsSelected ( i ) then
33056: LD_VAR 0 2
33060: PPUSH
33061: CALL_OW 306
33065: IFFALSE 33104
// begin for j := 1 to 4 do
33067: LD_ADDR_VAR 0 3
33071: PUSH
33072: DOUBLE
33073: LD_INT 1
33075: DEC
33076: ST_TO_ADDR
33077: LD_INT 4
33079: PUSH
33080: FOR_TO
33081: IFFALSE 33102
// SetSkill ( i , j , 10 ) ;
33083: LD_VAR 0 2
33087: PPUSH
33088: LD_VAR 0 3
33092: PPUSH
33093: LD_INT 10
33095: PPUSH
33096: CALL_OW 237
33100: GO 33080
33102: POP
33103: POP
// end ;
33104: GO 33053
33106: POP
33107: POP
// end ;
33108: LD_VAR 0 1
33112: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33113: LD_INT 0
33115: PPUSH
33116: PPUSH
33117: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33118: LD_ADDR_VAR 0 2
33122: PUSH
33123: LD_INT 22
33125: PUSH
33126: LD_OWVAR 2
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 21
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PPUSH
33149: CALL_OW 69
33153: PUSH
33154: FOR_IN
33155: IFFALSE 33196
// begin for j := 1 to 4 do
33157: LD_ADDR_VAR 0 3
33161: PUSH
33162: DOUBLE
33163: LD_INT 1
33165: DEC
33166: ST_TO_ADDR
33167: LD_INT 4
33169: PUSH
33170: FOR_TO
33171: IFFALSE 33192
// SetSkill ( i , j , 10 ) ;
33173: LD_VAR 0 2
33177: PPUSH
33178: LD_VAR 0 3
33182: PPUSH
33183: LD_INT 10
33185: PPUSH
33186: CALL_OW 237
33190: GO 33170
33192: POP
33193: POP
// end ;
33194: GO 33154
33196: POP
33197: POP
// end ;
33198: LD_VAR 0 1
33202: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33203: LD_INT 0
33205: PPUSH
// uc_side := your_side ;
33206: LD_ADDR_OWVAR 20
33210: PUSH
33211: LD_OWVAR 2
33215: ST_TO_ADDR
// uc_nation := nation ;
33216: LD_ADDR_OWVAR 21
33220: PUSH
33221: LD_VAR 0 1
33225: ST_TO_ADDR
// InitHc ;
33226: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33230: LD_INT 0
33232: PPUSH
33233: LD_VAR 0 2
33237: PPUSH
33238: LD_VAR 0 3
33242: PPUSH
33243: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33247: LD_VAR 0 4
33251: PPUSH
33252: LD_VAR 0 5
33256: PPUSH
33257: CALL_OW 428
33261: PUSH
33262: LD_INT 0
33264: EQUAL
33265: IFFALSE 33289
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33267: CALL_OW 44
33271: PPUSH
33272: LD_VAR 0 4
33276: PPUSH
33277: LD_VAR 0 5
33281: PPUSH
33282: LD_INT 1
33284: PPUSH
33285: CALL_OW 48
// end ;
33289: LD_VAR 0 6
33293: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33294: LD_INT 0
33296: PPUSH
33297: PPUSH
// uc_side := your_side ;
33298: LD_ADDR_OWVAR 20
33302: PUSH
33303: LD_OWVAR 2
33307: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33308: LD_VAR 0 1
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 4
33324: PUSH
33325: LD_INT 5
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: IN
33335: IFFALSE 33347
// uc_nation := nation_american else
33337: LD_ADDR_OWVAR 21
33341: PUSH
33342: LD_INT 1
33344: ST_TO_ADDR
33345: GO 33390
// if chassis in [ 11 , 12 , 13 , 14 ] then
33347: LD_VAR 0 1
33351: PUSH
33352: LD_INT 11
33354: PUSH
33355: LD_INT 12
33357: PUSH
33358: LD_INT 13
33360: PUSH
33361: LD_INT 14
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: IN
33370: IFFALSE 33382
// uc_nation := nation_arabian else
33372: LD_ADDR_OWVAR 21
33376: PUSH
33377: LD_INT 2
33379: ST_TO_ADDR
33380: GO 33390
// uc_nation := nation_russian ;
33382: LD_ADDR_OWVAR 21
33386: PUSH
33387: LD_INT 3
33389: ST_TO_ADDR
// vc_chassis := chassis ;
33390: LD_ADDR_OWVAR 37
33394: PUSH
33395: LD_VAR 0 1
33399: ST_TO_ADDR
// vc_engine := engine ;
33400: LD_ADDR_OWVAR 39
33404: PUSH
33405: LD_VAR 0 2
33409: ST_TO_ADDR
// vc_control := control ;
33410: LD_ADDR_OWVAR 38
33414: PUSH
33415: LD_VAR 0 3
33419: ST_TO_ADDR
// vc_weapon := weapon ;
33420: LD_ADDR_OWVAR 40
33424: PUSH
33425: LD_VAR 0 4
33429: ST_TO_ADDR
// un := CreateVehicle ;
33430: LD_ADDR_VAR 0 8
33434: PUSH
33435: CALL_OW 45
33439: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33440: LD_VAR 0 8
33444: PPUSH
33445: LD_INT 0
33447: PPUSH
33448: LD_INT 5
33450: PPUSH
33451: CALL_OW 12
33455: PPUSH
33456: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33460: LD_VAR 0 8
33464: PPUSH
33465: LD_VAR 0 5
33469: PPUSH
33470: LD_VAR 0 6
33474: PPUSH
33475: LD_INT 1
33477: PPUSH
33478: CALL_OW 48
// end ;
33482: LD_VAR 0 7
33486: RET
// export hInvincible ; every 1 do
33487: GO 33489
33489: DISABLE
// hInvincible := [ ] ;
33490: LD_ADDR_EXP 104
33494: PUSH
33495: EMPTY
33496: ST_TO_ADDR
33497: END
// every 10 do var i ;
33498: GO 33500
33500: DISABLE
33501: LD_INT 0
33503: PPUSH
// begin enable ;
33504: ENABLE
// if not hInvincible then
33505: LD_EXP 104
33509: NOT
33510: IFFALSE 33514
// exit ;
33512: GO 33558
// for i in hInvincible do
33514: LD_ADDR_VAR 0 1
33518: PUSH
33519: LD_EXP 104
33523: PUSH
33524: FOR_IN
33525: IFFALSE 33556
// if GetLives ( i ) < 1000 then
33527: LD_VAR 0 1
33531: PPUSH
33532: CALL_OW 256
33536: PUSH
33537: LD_INT 1000
33539: LESS
33540: IFFALSE 33554
// SetLives ( i , 1000 ) ;
33542: LD_VAR 0 1
33546: PPUSH
33547: LD_INT 1000
33549: PPUSH
33550: CALL_OW 234
33554: GO 33524
33556: POP
33557: POP
// end ;
33558: PPOPN 1
33560: END
// export function hHackInvincible ; var i ; begin
33561: LD_INT 0
33563: PPUSH
33564: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33565: LD_ADDR_VAR 0 2
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: LD_INT 21
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 21
33585: PUSH
33586: LD_INT 2
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: PPUSH
33598: CALL_OW 69
33602: PUSH
33603: FOR_IN
33604: IFFALSE 33665
// if IsSelected ( i ) then
33606: LD_VAR 0 2
33610: PPUSH
33611: CALL_OW 306
33615: IFFALSE 33663
// begin if i in hInvincible then
33617: LD_VAR 0 2
33621: PUSH
33622: LD_EXP 104
33626: IN
33627: IFFALSE 33647
// hInvincible := hInvincible diff i else
33629: LD_ADDR_EXP 104
33633: PUSH
33634: LD_EXP 104
33638: PUSH
33639: LD_VAR 0 2
33643: DIFF
33644: ST_TO_ADDR
33645: GO 33663
// hInvincible := hInvincible union i ;
33647: LD_ADDR_EXP 104
33651: PUSH
33652: LD_EXP 104
33656: PUSH
33657: LD_VAR 0 2
33661: UNION
33662: ST_TO_ADDR
// end ;
33663: GO 33603
33665: POP
33666: POP
// end ;
33667: LD_VAR 0 1
33671: RET
// export function hHackInvisible ; var i , j ; begin
33672: LD_INT 0
33674: PPUSH
33675: PPUSH
33676: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33677: LD_ADDR_VAR 0 2
33681: PUSH
33682: LD_INT 21
33684: PUSH
33685: LD_INT 1
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PPUSH
33692: CALL_OW 69
33696: PUSH
33697: FOR_IN
33698: IFFALSE 33722
// if IsSelected ( i ) then
33700: LD_VAR 0 2
33704: PPUSH
33705: CALL_OW 306
33709: IFFALSE 33720
// ComForceInvisible ( i ) ;
33711: LD_VAR 0 2
33715: PPUSH
33716: CALL_OW 496
33720: GO 33697
33722: POP
33723: POP
// end ;
33724: LD_VAR 0 1
33728: RET
// export function hHackChangeYourSide ; begin
33729: LD_INT 0
33731: PPUSH
// if your_side = 8 then
33732: LD_OWVAR 2
33736: PUSH
33737: LD_INT 8
33739: EQUAL
33740: IFFALSE 33752
// your_side := 0 else
33742: LD_ADDR_OWVAR 2
33746: PUSH
33747: LD_INT 0
33749: ST_TO_ADDR
33750: GO 33766
// your_side := your_side + 1 ;
33752: LD_ADDR_OWVAR 2
33756: PUSH
33757: LD_OWVAR 2
33761: PUSH
33762: LD_INT 1
33764: PLUS
33765: ST_TO_ADDR
// end ;
33766: LD_VAR 0 1
33770: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33771: LD_INT 0
33773: PPUSH
33774: PPUSH
33775: PPUSH
// for i in all_units do
33776: LD_ADDR_VAR 0 2
33780: PUSH
33781: LD_OWVAR 3
33785: PUSH
33786: FOR_IN
33787: IFFALSE 33865
// if IsSelected ( i ) then
33789: LD_VAR 0 2
33793: PPUSH
33794: CALL_OW 306
33798: IFFALSE 33863
// begin j := GetSide ( i ) ;
33800: LD_ADDR_VAR 0 3
33804: PUSH
33805: LD_VAR 0 2
33809: PPUSH
33810: CALL_OW 255
33814: ST_TO_ADDR
// if j = 8 then
33815: LD_VAR 0 3
33819: PUSH
33820: LD_INT 8
33822: EQUAL
33823: IFFALSE 33835
// j := 0 else
33825: LD_ADDR_VAR 0 3
33829: PUSH
33830: LD_INT 0
33832: ST_TO_ADDR
33833: GO 33849
// j := j + 1 ;
33835: LD_ADDR_VAR 0 3
33839: PUSH
33840: LD_VAR 0 3
33844: PUSH
33845: LD_INT 1
33847: PLUS
33848: ST_TO_ADDR
// SetSide ( i , j ) ;
33849: LD_VAR 0 2
33853: PPUSH
33854: LD_VAR 0 3
33858: PPUSH
33859: CALL_OW 235
// end ;
33863: GO 33786
33865: POP
33866: POP
// end ;
33867: LD_VAR 0 1
33871: RET
// export function hHackFog ; begin
33872: LD_INT 0
33874: PPUSH
// FogOff ( true ) ;
33875: LD_INT 1
33877: PPUSH
33878: CALL_OW 344
// end ;
33882: LD_VAR 0 1
33886: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33887: LD_INT 0
33889: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33890: LD_VAR 0 1
33894: PPUSH
33895: LD_VAR 0 2
33899: PPUSH
33900: LD_VAR 0 3
33904: PPUSH
33905: LD_INT 1
33907: PPUSH
33908: LD_INT 1
33910: PPUSH
33911: CALL_OW 483
// CenterOnXY ( x , y ) ;
33915: LD_VAR 0 2
33919: PPUSH
33920: LD_VAR 0 3
33924: PPUSH
33925: CALL_OW 84
// end ;
33929: LD_VAR 0 4
33933: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33934: LD_INT 0
33936: PPUSH
33937: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33938: LD_VAR 0 1
33942: NOT
33943: PUSH
33944: LD_VAR 0 2
33948: PPUSH
33949: LD_VAR 0 3
33953: PPUSH
33954: CALL_OW 488
33958: NOT
33959: OR
33960: PUSH
33961: LD_VAR 0 1
33965: PPUSH
33966: CALL_OW 266
33970: PUSH
33971: LD_INT 3
33973: NONEQUAL
33974: PUSH
33975: LD_VAR 0 1
33979: PPUSH
33980: CALL_OW 247
33984: PUSH
33985: LD_INT 1
33987: EQUAL
33988: NOT
33989: AND
33990: OR
33991: IFFALSE 33995
// exit ;
33993: GO 34144
// if GetType ( factory ) = unit_human then
33995: LD_VAR 0 1
33999: PPUSH
34000: CALL_OW 247
34004: PUSH
34005: LD_INT 1
34007: EQUAL
34008: IFFALSE 34025
// factory := IsInUnit ( factory ) ;
34010: LD_ADDR_VAR 0 1
34014: PUSH
34015: LD_VAR 0 1
34019: PPUSH
34020: CALL_OW 310
34024: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34025: LD_VAR 0 1
34029: PPUSH
34030: CALL_OW 266
34034: PUSH
34035: LD_INT 3
34037: NONEQUAL
34038: IFFALSE 34042
// exit ;
34040: GO 34144
// if HexInfo ( x , y ) = factory then
34042: LD_VAR 0 2
34046: PPUSH
34047: LD_VAR 0 3
34051: PPUSH
34052: CALL_OW 428
34056: PUSH
34057: LD_VAR 0 1
34061: EQUAL
34062: IFFALSE 34089
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34064: LD_ADDR_EXP 105
34068: PUSH
34069: LD_EXP 105
34073: PPUSH
34074: LD_VAR 0 1
34078: PPUSH
34079: LD_INT 0
34081: PPUSH
34082: CALL_OW 1
34086: ST_TO_ADDR
34087: GO 34140
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34089: LD_ADDR_EXP 105
34093: PUSH
34094: LD_EXP 105
34098: PPUSH
34099: LD_VAR 0 1
34103: PPUSH
34104: LD_VAR 0 1
34108: PPUSH
34109: CALL_OW 255
34113: PUSH
34114: LD_VAR 0 1
34118: PUSH
34119: LD_VAR 0 2
34123: PUSH
34124: LD_VAR 0 3
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: PPUSH
34135: CALL_OW 1
34139: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34140: CALL 34149 0 0
// end ;
34144: LD_VAR 0 4
34148: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34149: LD_INT 0
34151: PPUSH
34152: PPUSH
34153: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34154: LD_STRING resetFactoryWaypoint();
34156: PPUSH
34157: CALL_OW 559
// if factoryWaypoints then
34161: LD_EXP 105
34165: IFFALSE 34291
// begin list := PrepareArray ( factoryWaypoints ) ;
34167: LD_ADDR_VAR 0 3
34171: PUSH
34172: LD_EXP 105
34176: PPUSH
34177: CALL 81588 0 1
34181: ST_TO_ADDR
// for i := 1 to list do
34182: LD_ADDR_VAR 0 2
34186: PUSH
34187: DOUBLE
34188: LD_INT 1
34190: DEC
34191: ST_TO_ADDR
34192: LD_VAR 0 3
34196: PUSH
34197: FOR_TO
34198: IFFALSE 34289
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34200: LD_STRING setFactoryWaypointXY(
34202: PUSH
34203: LD_VAR 0 3
34207: PUSH
34208: LD_VAR 0 2
34212: ARRAY
34213: PUSH
34214: LD_INT 1
34216: ARRAY
34217: STR
34218: PUSH
34219: LD_STRING ,
34221: STR
34222: PUSH
34223: LD_VAR 0 3
34227: PUSH
34228: LD_VAR 0 2
34232: ARRAY
34233: PUSH
34234: LD_INT 2
34236: ARRAY
34237: STR
34238: PUSH
34239: LD_STRING ,
34241: STR
34242: PUSH
34243: LD_VAR 0 3
34247: PUSH
34248: LD_VAR 0 2
34252: ARRAY
34253: PUSH
34254: LD_INT 3
34256: ARRAY
34257: STR
34258: PUSH
34259: LD_STRING ,
34261: STR
34262: PUSH
34263: LD_VAR 0 3
34267: PUSH
34268: LD_VAR 0 2
34272: ARRAY
34273: PUSH
34274: LD_INT 4
34276: ARRAY
34277: STR
34278: PUSH
34279: LD_STRING )
34281: STR
34282: PPUSH
34283: CALL_OW 559
34287: GO 34197
34289: POP
34290: POP
// end ; end ;
34291: LD_VAR 0 1
34295: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34296: LD_INT 0
34298: PPUSH
// if HexInfo ( x , y ) = warehouse then
34299: LD_VAR 0 2
34303: PPUSH
34304: LD_VAR 0 3
34308: PPUSH
34309: CALL_OW 428
34313: PUSH
34314: LD_VAR 0 1
34318: EQUAL
34319: IFFALSE 34346
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34321: LD_ADDR_EXP 106
34325: PUSH
34326: LD_EXP 106
34330: PPUSH
34331: LD_VAR 0 1
34335: PPUSH
34336: LD_INT 0
34338: PPUSH
34339: CALL_OW 1
34343: ST_TO_ADDR
34344: GO 34397
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34346: LD_ADDR_EXP 106
34350: PUSH
34351: LD_EXP 106
34355: PPUSH
34356: LD_VAR 0 1
34360: PPUSH
34361: LD_VAR 0 1
34365: PPUSH
34366: CALL_OW 255
34370: PUSH
34371: LD_VAR 0 1
34375: PUSH
34376: LD_VAR 0 2
34380: PUSH
34381: LD_VAR 0 3
34385: PUSH
34386: EMPTY
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: PPUSH
34392: CALL_OW 1
34396: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34397: CALL 34406 0 0
// end ;
34401: LD_VAR 0 4
34405: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34406: LD_INT 0
34408: PPUSH
34409: PPUSH
34410: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34411: LD_STRING resetWarehouseGatheringPoints();
34413: PPUSH
34414: CALL_OW 559
// if warehouseGatheringPoints then
34418: LD_EXP 106
34422: IFFALSE 34548
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34424: LD_ADDR_VAR 0 3
34428: PUSH
34429: LD_EXP 106
34433: PPUSH
34434: CALL 81588 0 1
34438: ST_TO_ADDR
// for i := 1 to list do
34439: LD_ADDR_VAR 0 2
34443: PUSH
34444: DOUBLE
34445: LD_INT 1
34447: DEC
34448: ST_TO_ADDR
34449: LD_VAR 0 3
34453: PUSH
34454: FOR_TO
34455: IFFALSE 34546
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34457: LD_STRING setWarehouseGatheringPointXY(
34459: PUSH
34460: LD_VAR 0 3
34464: PUSH
34465: LD_VAR 0 2
34469: ARRAY
34470: PUSH
34471: LD_INT 1
34473: ARRAY
34474: STR
34475: PUSH
34476: LD_STRING ,
34478: STR
34479: PUSH
34480: LD_VAR 0 3
34484: PUSH
34485: LD_VAR 0 2
34489: ARRAY
34490: PUSH
34491: LD_INT 2
34493: ARRAY
34494: STR
34495: PUSH
34496: LD_STRING ,
34498: STR
34499: PUSH
34500: LD_VAR 0 3
34504: PUSH
34505: LD_VAR 0 2
34509: ARRAY
34510: PUSH
34511: LD_INT 3
34513: ARRAY
34514: STR
34515: PUSH
34516: LD_STRING ,
34518: STR
34519: PUSH
34520: LD_VAR 0 3
34524: PUSH
34525: LD_VAR 0 2
34529: ARRAY
34530: PUSH
34531: LD_INT 4
34533: ARRAY
34534: STR
34535: PUSH
34536: LD_STRING )
34538: STR
34539: PPUSH
34540: CALL_OW 559
34544: GO 34454
34546: POP
34547: POP
// end ; end ;
34548: LD_VAR 0 1
34552: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34553: LD_EXP 106
34557: IFFALSE 35242
34559: GO 34561
34561: DISABLE
34562: LD_INT 0
34564: PPUSH
34565: PPUSH
34566: PPUSH
34567: PPUSH
34568: PPUSH
34569: PPUSH
34570: PPUSH
34571: PPUSH
34572: PPUSH
// begin enable ;
34573: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34574: LD_ADDR_VAR 0 3
34578: PUSH
34579: LD_EXP 106
34583: PPUSH
34584: CALL 81588 0 1
34588: ST_TO_ADDR
// if not list then
34589: LD_VAR 0 3
34593: NOT
34594: IFFALSE 34598
// exit ;
34596: GO 35242
// for i := 1 to list do
34598: LD_ADDR_VAR 0 1
34602: PUSH
34603: DOUBLE
34604: LD_INT 1
34606: DEC
34607: ST_TO_ADDR
34608: LD_VAR 0 3
34612: PUSH
34613: FOR_TO
34614: IFFALSE 35240
// begin depot := list [ i ] [ 2 ] ;
34616: LD_ADDR_VAR 0 8
34620: PUSH
34621: LD_VAR 0 3
34625: PUSH
34626: LD_VAR 0 1
34630: ARRAY
34631: PUSH
34632: LD_INT 2
34634: ARRAY
34635: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34636: LD_ADDR_VAR 0 5
34640: PUSH
34641: LD_VAR 0 3
34645: PUSH
34646: LD_VAR 0 1
34650: ARRAY
34651: PUSH
34652: LD_INT 1
34654: ARRAY
34655: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34656: LD_VAR 0 8
34660: PPUSH
34661: CALL_OW 301
34665: PUSH
34666: LD_VAR 0 5
34670: PUSH
34671: LD_VAR 0 8
34675: PPUSH
34676: CALL_OW 255
34680: NONEQUAL
34681: OR
34682: IFFALSE 34711
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34684: LD_ADDR_EXP 106
34688: PUSH
34689: LD_EXP 106
34693: PPUSH
34694: LD_VAR 0 8
34698: PPUSH
34699: LD_INT 0
34701: PPUSH
34702: CALL_OW 1
34706: ST_TO_ADDR
// exit ;
34707: POP
34708: POP
34709: GO 35242
// end ; x := list [ i ] [ 3 ] ;
34711: LD_ADDR_VAR 0 6
34715: PUSH
34716: LD_VAR 0 3
34720: PUSH
34721: LD_VAR 0 1
34725: ARRAY
34726: PUSH
34727: LD_INT 3
34729: ARRAY
34730: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34731: LD_ADDR_VAR 0 7
34735: PUSH
34736: LD_VAR 0 3
34740: PUSH
34741: LD_VAR 0 1
34745: ARRAY
34746: PUSH
34747: LD_INT 4
34749: ARRAY
34750: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34751: LD_ADDR_VAR 0 9
34755: PUSH
34756: LD_VAR 0 6
34760: PPUSH
34761: LD_VAR 0 7
34765: PPUSH
34766: LD_INT 16
34768: PPUSH
34769: CALL 80176 0 3
34773: ST_TO_ADDR
// if not cratesNearbyPoint then
34774: LD_VAR 0 9
34778: NOT
34779: IFFALSE 34785
// exit ;
34781: POP
34782: POP
34783: GO 35242
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34785: LD_ADDR_VAR 0 4
34789: PUSH
34790: LD_INT 22
34792: PUSH
34793: LD_VAR 0 5
34797: PUSH
34798: EMPTY
34799: LIST
34800: LIST
34801: PUSH
34802: LD_INT 3
34804: PUSH
34805: LD_INT 60
34807: PUSH
34808: EMPTY
34809: LIST
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 91
34817: PUSH
34818: LD_VAR 0 8
34822: PUSH
34823: LD_INT 6
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 2
34833: PUSH
34834: LD_INT 25
34836: PUSH
34837: LD_INT 2
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 25
34846: PUSH
34847: LD_INT 16
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: EMPTY
34855: LIST
34856: LIST
34857: LIST
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: PPUSH
34865: CALL_OW 69
34869: PUSH
34870: LD_VAR 0 8
34874: PPUSH
34875: CALL_OW 313
34879: PPUSH
34880: LD_INT 3
34882: PUSH
34883: LD_INT 60
34885: PUSH
34886: EMPTY
34887: LIST
34888: PUSH
34889: EMPTY
34890: LIST
34891: LIST
34892: PUSH
34893: LD_INT 2
34895: PUSH
34896: LD_INT 25
34898: PUSH
34899: LD_INT 2
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 25
34908: PUSH
34909: LD_INT 16
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: LIST
34920: PUSH
34921: EMPTY
34922: LIST
34923: LIST
34924: PPUSH
34925: CALL_OW 72
34929: UNION
34930: ST_TO_ADDR
// if tmp then
34931: LD_VAR 0 4
34935: IFFALSE 35015
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34937: LD_ADDR_VAR 0 4
34941: PUSH
34942: LD_VAR 0 4
34946: PPUSH
34947: LD_INT 3
34949: PPUSH
34950: CALL 78145 0 2
34954: ST_TO_ADDR
// for j in tmp do
34955: LD_ADDR_VAR 0 2
34959: PUSH
34960: LD_VAR 0 4
34964: PUSH
34965: FOR_IN
34966: IFFALSE 35009
// begin if IsInUnit ( j ) then
34968: LD_VAR 0 2
34972: PPUSH
34973: CALL_OW 310
34977: IFFALSE 34988
// ComExit ( j ) ;
34979: LD_VAR 0 2
34983: PPUSH
34984: CALL 78228 0 1
// AddComCollect ( j , x , y ) ;
34988: LD_VAR 0 2
34992: PPUSH
34993: LD_VAR 0 6
34997: PPUSH
34998: LD_VAR 0 7
35002: PPUSH
35003: CALL_OW 177
// end ;
35007: GO 34965
35009: POP
35010: POP
// exit ;
35011: POP
35012: POP
35013: GO 35242
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35015: LD_ADDR_VAR 0 4
35019: PUSH
35020: LD_INT 22
35022: PUSH
35023: LD_VAR 0 5
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 91
35034: PUSH
35035: LD_VAR 0 8
35039: PUSH
35040: LD_INT 8
35042: PUSH
35043: EMPTY
35044: LIST
35045: LIST
35046: LIST
35047: PUSH
35048: LD_INT 2
35050: PUSH
35051: LD_INT 34
35053: PUSH
35054: LD_INT 12
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 34
35063: PUSH
35064: LD_INT 51
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 34
35073: PUSH
35074: LD_INT 32
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 34
35083: PUSH
35084: LD_INT 89
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: LIST
35102: PPUSH
35103: CALL_OW 69
35107: ST_TO_ADDR
// if tmp then
35108: LD_VAR 0 4
35112: IFFALSE 35238
// begin for j in tmp do
35114: LD_ADDR_VAR 0 2
35118: PUSH
35119: LD_VAR 0 4
35123: PUSH
35124: FOR_IN
35125: IFFALSE 35236
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35127: LD_VAR 0 2
35131: PPUSH
35132: CALL_OW 262
35136: PUSH
35137: LD_INT 3
35139: EQUAL
35140: PUSH
35141: LD_VAR 0 2
35145: PPUSH
35146: CALL_OW 261
35150: PUSH
35151: LD_INT 20
35153: GREATER
35154: OR
35155: PUSH
35156: LD_VAR 0 2
35160: PPUSH
35161: CALL_OW 314
35165: NOT
35166: AND
35167: PUSH
35168: LD_VAR 0 2
35172: PPUSH
35173: CALL_OW 263
35177: PUSH
35178: LD_INT 1
35180: NONEQUAL
35181: PUSH
35182: LD_VAR 0 2
35186: PPUSH
35187: CALL_OW 311
35191: OR
35192: AND
35193: IFFALSE 35234
// begin ComCollect ( j , x , y ) ;
35195: LD_VAR 0 2
35199: PPUSH
35200: LD_VAR 0 6
35204: PPUSH
35205: LD_VAR 0 7
35209: PPUSH
35210: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35214: LD_VAR 0 2
35218: PPUSH
35219: LD_VAR 0 8
35223: PPUSH
35224: CALL_OW 172
// exit ;
35228: POP
35229: POP
35230: POP
35231: POP
35232: GO 35242
// end ;
35234: GO 35124
35236: POP
35237: POP
// end ; end ;
35238: GO 34613
35240: POP
35241: POP
// end ; end_of_file
35242: PPOPN 9
35244: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
35245: LD_INT 0
35247: PPUSH
35248: PPUSH
35249: PPUSH
35250: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
35251: LD_VAR 0 1
35255: PPUSH
35256: CALL_OW 264
35260: PUSH
35261: LD_INT 91
35263: EQUAL
35264: IFFALSE 35336
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
35266: LD_INT 68
35268: PPUSH
35269: LD_VAR 0 1
35273: PPUSH
35274: CALL_OW 255
35278: PPUSH
35279: CALL_OW 321
35283: PUSH
35284: LD_INT 2
35286: EQUAL
35287: IFFALSE 35299
// eff := 70 else
35289: LD_ADDR_VAR 0 4
35293: PUSH
35294: LD_INT 70
35296: ST_TO_ADDR
35297: GO 35307
// eff := 30 ;
35299: LD_ADDR_VAR 0 4
35303: PUSH
35304: LD_INT 30
35306: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
35307: LD_VAR 0 1
35311: PPUSH
35312: CALL_OW 250
35316: PPUSH
35317: LD_VAR 0 1
35321: PPUSH
35322: CALL_OW 251
35326: PPUSH
35327: LD_VAR 0 4
35331: PPUSH
35332: CALL_OW 495
// end ; end ;
35336: LD_VAR 0 2
35340: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35341: LD_INT 0
35343: PPUSH
// end ;
35344: LD_VAR 0 4
35348: RET
// export function SOS_Command ( cmd ) ; begin
35349: LD_INT 0
35351: PPUSH
// end ;
35352: LD_VAR 0 2
35356: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35357: LD_INT 0
35359: PPUSH
// end ;
35360: LD_VAR 0 6
35364: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
35365: LD_INT 0
35367: PPUSH
35368: PPUSH
// if not vehicle or not factory then
35369: LD_VAR 0 1
35373: NOT
35374: PUSH
35375: LD_VAR 0 2
35379: NOT
35380: OR
35381: IFFALSE 35385
// exit ;
35383: GO 35616
// if factoryWaypoints >= factory then
35385: LD_EXP 105
35389: PUSH
35390: LD_VAR 0 2
35394: GREATEREQUAL
35395: IFFALSE 35616
// if factoryWaypoints [ factory ] then
35397: LD_EXP 105
35401: PUSH
35402: LD_VAR 0 2
35406: ARRAY
35407: IFFALSE 35616
// begin if GetControl ( vehicle ) = control_manual then
35409: LD_VAR 0 1
35413: PPUSH
35414: CALL_OW 263
35418: PUSH
35419: LD_INT 1
35421: EQUAL
35422: IFFALSE 35503
// begin driver := IsDrivenBy ( vehicle ) ;
35424: LD_ADDR_VAR 0 4
35428: PUSH
35429: LD_VAR 0 1
35433: PPUSH
35434: CALL_OW 311
35438: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35439: LD_VAR 0 4
35443: PPUSH
35444: LD_EXP 105
35448: PUSH
35449: LD_VAR 0 2
35453: ARRAY
35454: PUSH
35455: LD_INT 3
35457: ARRAY
35458: PPUSH
35459: LD_EXP 105
35463: PUSH
35464: LD_VAR 0 2
35468: ARRAY
35469: PUSH
35470: LD_INT 4
35472: ARRAY
35473: PPUSH
35474: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35478: LD_VAR 0 4
35482: PPUSH
35483: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35487: LD_VAR 0 4
35491: PPUSH
35492: LD_VAR 0 2
35496: PPUSH
35497: CALL_OW 180
// end else
35501: GO 35616
// if GetControl ( vehicle ) = control_remote then
35503: LD_VAR 0 1
35507: PPUSH
35508: CALL_OW 263
35512: PUSH
35513: LD_INT 2
35515: EQUAL
35516: IFFALSE 35577
// begin wait ( 0 0$2 ) ;
35518: LD_INT 70
35520: PPUSH
35521: CALL_OW 67
// if Connect ( vehicle ) then
35525: LD_VAR 0 1
35529: PPUSH
35530: CALL 48447 0 1
35534: IFFALSE 35575
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35536: LD_VAR 0 1
35540: PPUSH
35541: LD_EXP 105
35545: PUSH
35546: LD_VAR 0 2
35550: ARRAY
35551: PUSH
35552: LD_INT 3
35554: ARRAY
35555: PPUSH
35556: LD_EXP 105
35560: PUSH
35561: LD_VAR 0 2
35565: ARRAY
35566: PUSH
35567: LD_INT 4
35569: ARRAY
35570: PPUSH
35571: CALL_OW 171
// end else
35575: GO 35616
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35577: LD_VAR 0 1
35581: PPUSH
35582: LD_EXP 105
35586: PUSH
35587: LD_VAR 0 2
35591: ARRAY
35592: PUSH
35593: LD_INT 3
35595: ARRAY
35596: PPUSH
35597: LD_EXP 105
35601: PUSH
35602: LD_VAR 0 2
35606: ARRAY
35607: PUSH
35608: LD_INT 4
35610: ARRAY
35611: PPUSH
35612: CALL_OW 171
// end ; end ;
35616: LD_VAR 0 3
35620: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35621: LD_INT 0
35623: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35624: LD_VAR 0 1
35628: PUSH
35629: LD_INT 250
35631: EQUAL
35632: PUSH
35633: LD_VAR 0 2
35637: PPUSH
35638: CALL_OW 264
35642: PUSH
35643: LD_INT 81
35645: EQUAL
35646: AND
35647: IFFALSE 35668
// MinerPlaceMine ( unit , x , y ) ;
35649: LD_VAR 0 2
35653: PPUSH
35654: LD_VAR 0 4
35658: PPUSH
35659: LD_VAR 0 5
35663: PPUSH
35664: CALL 38658 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35668: LD_VAR 0 1
35672: PUSH
35673: LD_INT 251
35675: EQUAL
35676: PUSH
35677: LD_VAR 0 2
35681: PPUSH
35682: CALL_OW 264
35686: PUSH
35687: LD_INT 81
35689: EQUAL
35690: AND
35691: IFFALSE 35712
// MinerDetonateMine ( unit , x , y ) ;
35693: LD_VAR 0 2
35697: PPUSH
35698: LD_VAR 0 4
35702: PPUSH
35703: LD_VAR 0 5
35707: PPUSH
35708: CALL 38933 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35712: LD_VAR 0 1
35716: PUSH
35717: LD_INT 252
35719: EQUAL
35720: PUSH
35721: LD_VAR 0 2
35725: PPUSH
35726: CALL_OW 264
35730: PUSH
35731: LD_INT 81
35733: EQUAL
35734: AND
35735: IFFALSE 35756
// MinerCreateMinefield ( unit , x , y ) ;
35737: LD_VAR 0 2
35741: PPUSH
35742: LD_VAR 0 4
35746: PPUSH
35747: LD_VAR 0 5
35751: PPUSH
35752: CALL 39350 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35756: LD_VAR 0 1
35760: PUSH
35761: LD_INT 253
35763: EQUAL
35764: PUSH
35765: LD_VAR 0 2
35769: PPUSH
35770: CALL_OW 257
35774: PUSH
35775: LD_INT 5
35777: EQUAL
35778: AND
35779: IFFALSE 35800
// ComBinocular ( unit , x , y ) ;
35781: LD_VAR 0 2
35785: PPUSH
35786: LD_VAR 0 4
35790: PPUSH
35791: LD_VAR 0 5
35795: PPUSH
35796: CALL 39719 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35800: LD_VAR 0 1
35804: PUSH
35805: LD_INT 254
35807: EQUAL
35808: PUSH
35809: LD_VAR 0 2
35813: PPUSH
35814: CALL_OW 264
35818: PUSH
35819: LD_INT 99
35821: EQUAL
35822: AND
35823: PUSH
35824: LD_VAR 0 3
35828: PPUSH
35829: CALL_OW 263
35833: PUSH
35834: LD_INT 3
35836: EQUAL
35837: AND
35838: IFFALSE 35854
// HackDestroyVehicle ( unit , selectedUnit ) ;
35840: LD_VAR 0 2
35844: PPUSH
35845: LD_VAR 0 3
35849: PPUSH
35850: CALL 38022 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35854: LD_VAR 0 1
35858: PUSH
35859: LD_INT 255
35861: EQUAL
35862: PUSH
35863: LD_VAR 0 2
35867: PPUSH
35868: CALL_OW 264
35872: PUSH
35873: LD_INT 14
35875: PUSH
35876: LD_INT 53
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: IN
35883: AND
35884: PUSH
35885: LD_VAR 0 4
35889: PPUSH
35890: LD_VAR 0 5
35894: PPUSH
35895: CALL_OW 488
35899: AND
35900: IFFALSE 35924
// CutTreeXYR ( unit , x , y , 12 ) ;
35902: LD_VAR 0 2
35906: PPUSH
35907: LD_VAR 0 4
35911: PPUSH
35912: LD_VAR 0 5
35916: PPUSH
35917: LD_INT 12
35919: PPUSH
35920: CALL 36019 0 4
// if cmd = 256 then
35924: LD_VAR 0 1
35928: PUSH
35929: LD_INT 256
35931: EQUAL
35932: IFFALSE 35953
// SetFactoryWaypoint ( unit , x , y ) ;
35934: LD_VAR 0 2
35938: PPUSH
35939: LD_VAR 0 4
35943: PPUSH
35944: LD_VAR 0 5
35948: PPUSH
35949: CALL 33934 0 3
// if cmd = 257 then
35953: LD_VAR 0 1
35957: PUSH
35958: LD_INT 257
35960: EQUAL
35961: IFFALSE 35982
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35963: LD_VAR 0 2
35967: PPUSH
35968: LD_VAR 0 4
35972: PPUSH
35973: LD_VAR 0 5
35977: PPUSH
35978: CALL 34296 0 3
// if cmd = 258 then
35982: LD_VAR 0 1
35986: PUSH
35987: LD_INT 258
35989: EQUAL
35990: IFFALSE 36014
// BurnTreeXYR ( unit , x , y , 8 ) ;
35992: LD_VAR 0 2
35996: PPUSH
35997: LD_VAR 0 4
36001: PPUSH
36002: LD_VAR 0 5
36006: PPUSH
36007: LD_INT 8
36009: PPUSH
36010: CALL 36413 0 4
// end ;
36014: LD_VAR 0 6
36018: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36019: LD_INT 0
36021: PPUSH
36022: PPUSH
36023: PPUSH
36024: PPUSH
36025: PPUSH
36026: PPUSH
36027: PPUSH
36028: PPUSH
36029: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36030: LD_VAR 0 1
36034: PPUSH
36035: CALL_OW 302
36039: NOT
36040: PUSH
36041: LD_VAR 0 2
36045: PPUSH
36046: LD_VAR 0 3
36050: PPUSH
36051: CALL_OW 488
36055: NOT
36056: OR
36057: PUSH
36058: LD_VAR 0 4
36062: NOT
36063: OR
36064: IFFALSE 36068
// exit ;
36066: GO 36408
// list := [ ] ;
36068: LD_ADDR_VAR 0 13
36072: PUSH
36073: EMPTY
36074: ST_TO_ADDR
// if x - r < 0 then
36075: LD_VAR 0 2
36079: PUSH
36080: LD_VAR 0 4
36084: MINUS
36085: PUSH
36086: LD_INT 0
36088: LESS
36089: IFFALSE 36101
// min_x := 0 else
36091: LD_ADDR_VAR 0 7
36095: PUSH
36096: LD_INT 0
36098: ST_TO_ADDR
36099: GO 36117
// min_x := x - r ;
36101: LD_ADDR_VAR 0 7
36105: PUSH
36106: LD_VAR 0 2
36110: PUSH
36111: LD_VAR 0 4
36115: MINUS
36116: ST_TO_ADDR
// if y - r < 0 then
36117: LD_VAR 0 3
36121: PUSH
36122: LD_VAR 0 4
36126: MINUS
36127: PUSH
36128: LD_INT 0
36130: LESS
36131: IFFALSE 36143
// min_y := 0 else
36133: LD_ADDR_VAR 0 8
36137: PUSH
36138: LD_INT 0
36140: ST_TO_ADDR
36141: GO 36159
// min_y := y - r ;
36143: LD_ADDR_VAR 0 8
36147: PUSH
36148: LD_VAR 0 3
36152: PUSH
36153: LD_VAR 0 4
36157: MINUS
36158: ST_TO_ADDR
// max_x := x + r ;
36159: LD_ADDR_VAR 0 9
36163: PUSH
36164: LD_VAR 0 2
36168: PUSH
36169: LD_VAR 0 4
36173: PLUS
36174: ST_TO_ADDR
// max_y := y + r ;
36175: LD_ADDR_VAR 0 10
36179: PUSH
36180: LD_VAR 0 3
36184: PUSH
36185: LD_VAR 0 4
36189: PLUS
36190: ST_TO_ADDR
// for _x = min_x to max_x do
36191: LD_ADDR_VAR 0 11
36195: PUSH
36196: DOUBLE
36197: LD_VAR 0 7
36201: DEC
36202: ST_TO_ADDR
36203: LD_VAR 0 9
36207: PUSH
36208: FOR_TO
36209: IFFALSE 36326
// for _y = min_y to max_y do
36211: LD_ADDR_VAR 0 12
36215: PUSH
36216: DOUBLE
36217: LD_VAR 0 8
36221: DEC
36222: ST_TO_ADDR
36223: LD_VAR 0 10
36227: PUSH
36228: FOR_TO
36229: IFFALSE 36322
// begin if not ValidHex ( _x , _y ) then
36231: LD_VAR 0 11
36235: PPUSH
36236: LD_VAR 0 12
36240: PPUSH
36241: CALL_OW 488
36245: NOT
36246: IFFALSE 36250
// continue ;
36248: GO 36228
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36250: LD_VAR 0 11
36254: PPUSH
36255: LD_VAR 0 12
36259: PPUSH
36260: CALL_OW 351
36264: PUSH
36265: LD_VAR 0 11
36269: PPUSH
36270: LD_VAR 0 12
36274: PPUSH
36275: CALL_OW 554
36279: AND
36280: IFFALSE 36320
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36282: LD_ADDR_VAR 0 13
36286: PUSH
36287: LD_VAR 0 13
36291: PPUSH
36292: LD_VAR 0 13
36296: PUSH
36297: LD_INT 1
36299: PLUS
36300: PPUSH
36301: LD_VAR 0 11
36305: PUSH
36306: LD_VAR 0 12
36310: PUSH
36311: EMPTY
36312: LIST
36313: LIST
36314: PPUSH
36315: CALL_OW 2
36319: ST_TO_ADDR
// end ;
36320: GO 36228
36322: POP
36323: POP
36324: GO 36208
36326: POP
36327: POP
// if not list then
36328: LD_VAR 0 13
36332: NOT
36333: IFFALSE 36337
// exit ;
36335: GO 36408
// for i in list do
36337: LD_ADDR_VAR 0 6
36341: PUSH
36342: LD_VAR 0 13
36346: PUSH
36347: FOR_IN
36348: IFFALSE 36406
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36350: LD_VAR 0 1
36354: PPUSH
36355: LD_STRING M
36357: PUSH
36358: LD_VAR 0 6
36362: PUSH
36363: LD_INT 1
36365: ARRAY
36366: PUSH
36367: LD_VAR 0 6
36371: PUSH
36372: LD_INT 2
36374: ARRAY
36375: PUSH
36376: LD_INT 0
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: LD_INT 0
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: PUSH
36397: EMPTY
36398: LIST
36399: PPUSH
36400: CALL_OW 447
36404: GO 36347
36406: POP
36407: POP
// end ;
36408: LD_VAR 0 5
36412: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36413: LD_INT 0
36415: PPUSH
36416: PPUSH
36417: PPUSH
36418: PPUSH
36419: PPUSH
36420: PPUSH
36421: PPUSH
36422: PPUSH
36423: PPUSH
36424: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36425: LD_VAR 0 1
36429: PPUSH
36430: CALL_OW 302
36434: NOT
36435: PUSH
36436: LD_VAR 0 2
36440: PPUSH
36441: LD_VAR 0 3
36445: PPUSH
36446: CALL_OW 488
36450: NOT
36451: OR
36452: PUSH
36453: LD_VAR 0 4
36457: NOT
36458: OR
36459: IFFALSE 36463
// exit ;
36461: GO 36976
// list := [ ] ;
36463: LD_ADDR_VAR 0 13
36467: PUSH
36468: EMPTY
36469: ST_TO_ADDR
// if x - r < 0 then
36470: LD_VAR 0 2
36474: PUSH
36475: LD_VAR 0 4
36479: MINUS
36480: PUSH
36481: LD_INT 0
36483: LESS
36484: IFFALSE 36496
// min_x := 0 else
36486: LD_ADDR_VAR 0 7
36490: PUSH
36491: LD_INT 0
36493: ST_TO_ADDR
36494: GO 36512
// min_x := x - r ;
36496: LD_ADDR_VAR 0 7
36500: PUSH
36501: LD_VAR 0 2
36505: PUSH
36506: LD_VAR 0 4
36510: MINUS
36511: ST_TO_ADDR
// if y - r < 0 then
36512: LD_VAR 0 3
36516: PUSH
36517: LD_VAR 0 4
36521: MINUS
36522: PUSH
36523: LD_INT 0
36525: LESS
36526: IFFALSE 36538
// min_y := 0 else
36528: LD_ADDR_VAR 0 8
36532: PUSH
36533: LD_INT 0
36535: ST_TO_ADDR
36536: GO 36554
// min_y := y - r ;
36538: LD_ADDR_VAR 0 8
36542: PUSH
36543: LD_VAR 0 3
36547: PUSH
36548: LD_VAR 0 4
36552: MINUS
36553: ST_TO_ADDR
// max_x := x + r ;
36554: LD_ADDR_VAR 0 9
36558: PUSH
36559: LD_VAR 0 2
36563: PUSH
36564: LD_VAR 0 4
36568: PLUS
36569: ST_TO_ADDR
// max_y := y + r ;
36570: LD_ADDR_VAR 0 10
36574: PUSH
36575: LD_VAR 0 3
36579: PUSH
36580: LD_VAR 0 4
36584: PLUS
36585: ST_TO_ADDR
// for _x = min_x to max_x do
36586: LD_ADDR_VAR 0 11
36590: PUSH
36591: DOUBLE
36592: LD_VAR 0 7
36596: DEC
36597: ST_TO_ADDR
36598: LD_VAR 0 9
36602: PUSH
36603: FOR_TO
36604: IFFALSE 36721
// for _y = min_y to max_y do
36606: LD_ADDR_VAR 0 12
36610: PUSH
36611: DOUBLE
36612: LD_VAR 0 8
36616: DEC
36617: ST_TO_ADDR
36618: LD_VAR 0 10
36622: PUSH
36623: FOR_TO
36624: IFFALSE 36717
// begin if not ValidHex ( _x , _y ) then
36626: LD_VAR 0 11
36630: PPUSH
36631: LD_VAR 0 12
36635: PPUSH
36636: CALL_OW 488
36640: NOT
36641: IFFALSE 36645
// continue ;
36643: GO 36623
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36645: LD_VAR 0 11
36649: PPUSH
36650: LD_VAR 0 12
36654: PPUSH
36655: CALL_OW 351
36659: PUSH
36660: LD_VAR 0 11
36664: PPUSH
36665: LD_VAR 0 12
36669: PPUSH
36670: CALL_OW 554
36674: AND
36675: IFFALSE 36715
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36677: LD_ADDR_VAR 0 13
36681: PUSH
36682: LD_VAR 0 13
36686: PPUSH
36687: LD_VAR 0 13
36691: PUSH
36692: LD_INT 1
36694: PLUS
36695: PPUSH
36696: LD_VAR 0 11
36700: PUSH
36701: LD_VAR 0 12
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PPUSH
36710: CALL_OW 2
36714: ST_TO_ADDR
// end ;
36715: GO 36623
36717: POP
36718: POP
36719: GO 36603
36721: POP
36722: POP
// if not list then
36723: LD_VAR 0 13
36727: NOT
36728: IFFALSE 36732
// exit ;
36730: GO 36976
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36732: LD_ADDR_VAR 0 13
36736: PUSH
36737: LD_VAR 0 1
36741: PPUSH
36742: LD_VAR 0 13
36746: PPUSH
36747: LD_INT 1
36749: PPUSH
36750: LD_INT 1
36752: PPUSH
36753: CALL 45589 0 4
36757: ST_TO_ADDR
// ComStop ( flame ) ;
36758: LD_VAR 0 1
36762: PPUSH
36763: CALL_OW 141
// for i in list do
36767: LD_ADDR_VAR 0 6
36771: PUSH
36772: LD_VAR 0 13
36776: PUSH
36777: FOR_IN
36778: IFFALSE 36809
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36780: LD_VAR 0 1
36784: PPUSH
36785: LD_VAR 0 6
36789: PUSH
36790: LD_INT 1
36792: ARRAY
36793: PPUSH
36794: LD_VAR 0 6
36798: PUSH
36799: LD_INT 2
36801: ARRAY
36802: PPUSH
36803: CALL_OW 176
36807: GO 36777
36809: POP
36810: POP
// repeat wait ( 0 0$1 ) ;
36811: LD_INT 35
36813: PPUSH
36814: CALL_OW 67
// task := GetTaskList ( flame ) ;
36818: LD_ADDR_VAR 0 14
36822: PUSH
36823: LD_VAR 0 1
36827: PPUSH
36828: CALL_OW 437
36832: ST_TO_ADDR
// if not task then
36833: LD_VAR 0 14
36837: NOT
36838: IFFALSE 36842
// exit ;
36840: GO 36976
// if task [ 1 ] [ 1 ] <> | then
36842: LD_VAR 0 14
36846: PUSH
36847: LD_INT 1
36849: ARRAY
36850: PUSH
36851: LD_INT 1
36853: ARRAY
36854: PUSH
36855: LD_STRING |
36857: NONEQUAL
36858: IFFALSE 36862
// exit ;
36860: GO 36976
// _x := task [ 1 ] [ 2 ] ;
36862: LD_ADDR_VAR 0 11
36866: PUSH
36867: LD_VAR 0 14
36871: PUSH
36872: LD_INT 1
36874: ARRAY
36875: PUSH
36876: LD_INT 2
36878: ARRAY
36879: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
36880: LD_ADDR_VAR 0 12
36884: PUSH
36885: LD_VAR 0 14
36889: PUSH
36890: LD_INT 1
36892: ARRAY
36893: PUSH
36894: LD_INT 3
36896: ARRAY
36897: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
36898: LD_VAR 0 11
36902: PPUSH
36903: LD_VAR 0 12
36907: PPUSH
36908: CALL_OW 351
36912: NOT
36913: PUSH
36914: LD_VAR 0 11
36918: PPUSH
36919: LD_VAR 0 12
36923: PPUSH
36924: CALL_OW 554
36928: NOT
36929: OR
36930: IFFALSE 36964
// begin task := Delete ( task , 1 ) ;
36932: LD_ADDR_VAR 0 14
36936: PUSH
36937: LD_VAR 0 14
36941: PPUSH
36942: LD_INT 1
36944: PPUSH
36945: CALL_OW 3
36949: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
36950: LD_VAR 0 1
36954: PPUSH
36955: LD_VAR 0 14
36959: PPUSH
36960: CALL_OW 446
// end ; until not HasTask ( flame ) ;
36964: LD_VAR 0 1
36968: PPUSH
36969: CALL_OW 314
36973: NOT
36974: IFFALSE 36811
// end ;
36976: LD_VAR 0 5
36980: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36981: LD_EXP 108
36985: NOT
36986: IFFALSE 37036
36988: GO 36990
36990: DISABLE
// begin initHack := true ;
36991: LD_ADDR_EXP 108
36995: PUSH
36996: LD_INT 1
36998: ST_TO_ADDR
// hackTanks := [ ] ;
36999: LD_ADDR_EXP 109
37003: PUSH
37004: EMPTY
37005: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37006: LD_ADDR_EXP 110
37010: PUSH
37011: EMPTY
37012: ST_TO_ADDR
// hackLimit := 3 ;
37013: LD_ADDR_EXP 111
37017: PUSH
37018: LD_INT 3
37020: ST_TO_ADDR
// hackDist := 12 ;
37021: LD_ADDR_EXP 112
37025: PUSH
37026: LD_INT 12
37028: ST_TO_ADDR
// hackCounter := [ ] ;
37029: LD_ADDR_EXP 113
37033: PUSH
37034: EMPTY
37035: ST_TO_ADDR
// end ;
37036: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37037: LD_EXP 108
37041: PUSH
37042: LD_INT 34
37044: PUSH
37045: LD_INT 99
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: PPUSH
37052: CALL_OW 69
37056: AND
37057: IFFALSE 37310
37059: GO 37061
37061: DISABLE
37062: LD_INT 0
37064: PPUSH
37065: PPUSH
// begin enable ;
37066: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37067: LD_ADDR_VAR 0 1
37071: PUSH
37072: LD_INT 34
37074: PUSH
37075: LD_INT 99
37077: PUSH
37078: EMPTY
37079: LIST
37080: LIST
37081: PPUSH
37082: CALL_OW 69
37086: PUSH
37087: FOR_IN
37088: IFFALSE 37308
// begin if not i in hackTanks then
37090: LD_VAR 0 1
37094: PUSH
37095: LD_EXP 109
37099: IN
37100: NOT
37101: IFFALSE 37184
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37103: LD_ADDR_EXP 109
37107: PUSH
37108: LD_EXP 109
37112: PPUSH
37113: LD_EXP 109
37117: PUSH
37118: LD_INT 1
37120: PLUS
37121: PPUSH
37122: LD_VAR 0 1
37126: PPUSH
37127: CALL_OW 1
37131: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37132: LD_ADDR_EXP 110
37136: PUSH
37137: LD_EXP 110
37141: PPUSH
37142: LD_EXP 110
37146: PUSH
37147: LD_INT 1
37149: PLUS
37150: PPUSH
37151: EMPTY
37152: PPUSH
37153: CALL_OW 1
37157: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37158: LD_ADDR_EXP 113
37162: PUSH
37163: LD_EXP 113
37167: PPUSH
37168: LD_EXP 113
37172: PUSH
37173: LD_INT 1
37175: PLUS
37176: PPUSH
37177: EMPTY
37178: PPUSH
37179: CALL_OW 1
37183: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37184: LD_VAR 0 1
37188: PPUSH
37189: CALL_OW 302
37193: NOT
37194: IFFALSE 37207
// begin HackUnlinkAll ( i ) ;
37196: LD_VAR 0 1
37200: PPUSH
37201: CALL 37313 0 1
// continue ;
37205: GO 37087
// end ; HackCheckCapturedStatus ( i ) ;
37207: LD_VAR 0 1
37211: PPUSH
37212: CALL 37756 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37216: LD_ADDR_VAR 0 2
37220: PUSH
37221: LD_INT 81
37223: PUSH
37224: LD_VAR 0 1
37228: PPUSH
37229: CALL_OW 255
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 33
37240: PUSH
37241: LD_INT 3
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_INT 91
37250: PUSH
37251: LD_VAR 0 1
37255: PUSH
37256: LD_EXP 112
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: LIST
37265: PUSH
37266: LD_INT 50
37268: PUSH
37269: EMPTY
37270: LIST
37271: PUSH
37272: EMPTY
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: PPUSH
37278: CALL_OW 69
37282: ST_TO_ADDR
// if not tmp then
37283: LD_VAR 0 2
37287: NOT
37288: IFFALSE 37292
// continue ;
37290: GO 37087
// HackLink ( i , tmp ) ;
37292: LD_VAR 0 1
37296: PPUSH
37297: LD_VAR 0 2
37301: PPUSH
37302: CALL 37449 0 2
// end ;
37306: GO 37087
37308: POP
37309: POP
// end ;
37310: PPOPN 2
37312: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37313: LD_INT 0
37315: PPUSH
37316: PPUSH
37317: PPUSH
// if not hack in hackTanks then
37318: LD_VAR 0 1
37322: PUSH
37323: LD_EXP 109
37327: IN
37328: NOT
37329: IFFALSE 37333
// exit ;
37331: GO 37444
// index := GetElementIndex ( hackTanks , hack ) ;
37333: LD_ADDR_VAR 0 4
37337: PUSH
37338: LD_EXP 109
37342: PPUSH
37343: LD_VAR 0 1
37347: PPUSH
37348: CALL 44886 0 2
37352: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37353: LD_EXP 110
37357: PUSH
37358: LD_VAR 0 4
37362: ARRAY
37363: IFFALSE 37444
// begin for i in hackTanksCaptured [ index ] do
37365: LD_ADDR_VAR 0 3
37369: PUSH
37370: LD_EXP 110
37374: PUSH
37375: LD_VAR 0 4
37379: ARRAY
37380: PUSH
37381: FOR_IN
37382: IFFALSE 37408
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37384: LD_VAR 0 3
37388: PUSH
37389: LD_INT 1
37391: ARRAY
37392: PPUSH
37393: LD_VAR 0 3
37397: PUSH
37398: LD_INT 2
37400: ARRAY
37401: PPUSH
37402: CALL_OW 235
37406: GO 37381
37408: POP
37409: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37410: LD_ADDR_EXP 110
37414: PUSH
37415: LD_EXP 110
37419: PPUSH
37420: LD_VAR 0 4
37424: PPUSH
37425: EMPTY
37426: PPUSH
37427: CALL_OW 1
37431: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37432: LD_VAR 0 1
37436: PPUSH
37437: LD_INT 0
37439: PPUSH
37440: CALL_OW 505
// end ; end ;
37444: LD_VAR 0 2
37448: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37449: LD_INT 0
37451: PPUSH
37452: PPUSH
37453: PPUSH
// if not hack in hackTanks or not vehicles then
37454: LD_VAR 0 1
37458: PUSH
37459: LD_EXP 109
37463: IN
37464: NOT
37465: PUSH
37466: LD_VAR 0 2
37470: NOT
37471: OR
37472: IFFALSE 37476
// exit ;
37474: GO 37751
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37476: LD_ADDR_VAR 0 2
37480: PUSH
37481: LD_VAR 0 1
37485: PPUSH
37486: LD_VAR 0 2
37490: PPUSH
37491: LD_INT 1
37493: PPUSH
37494: LD_INT 1
37496: PPUSH
37497: CALL 45536 0 4
37501: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37502: LD_ADDR_VAR 0 5
37506: PUSH
37507: LD_EXP 109
37511: PPUSH
37512: LD_VAR 0 1
37516: PPUSH
37517: CALL 44886 0 2
37521: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37522: LD_EXP 110
37526: PUSH
37527: LD_VAR 0 5
37531: ARRAY
37532: PUSH
37533: LD_EXP 111
37537: LESS
37538: IFFALSE 37727
// begin for i := 1 to vehicles do
37540: LD_ADDR_VAR 0 4
37544: PUSH
37545: DOUBLE
37546: LD_INT 1
37548: DEC
37549: ST_TO_ADDR
37550: LD_VAR 0 2
37554: PUSH
37555: FOR_TO
37556: IFFALSE 37725
// begin if hackTanksCaptured [ index ] = hackLimit then
37558: LD_EXP 110
37562: PUSH
37563: LD_VAR 0 5
37567: ARRAY
37568: PUSH
37569: LD_EXP 111
37573: EQUAL
37574: IFFALSE 37578
// break ;
37576: GO 37725
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37578: LD_ADDR_EXP 113
37582: PUSH
37583: LD_EXP 113
37587: PPUSH
37588: LD_VAR 0 5
37592: PPUSH
37593: LD_EXP 113
37597: PUSH
37598: LD_VAR 0 5
37602: ARRAY
37603: PUSH
37604: LD_INT 1
37606: PLUS
37607: PPUSH
37608: CALL_OW 1
37612: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37613: LD_ADDR_EXP 110
37617: PUSH
37618: LD_EXP 110
37622: PPUSH
37623: LD_VAR 0 5
37627: PUSH
37628: LD_EXP 110
37632: PUSH
37633: LD_VAR 0 5
37637: ARRAY
37638: PUSH
37639: LD_INT 1
37641: PLUS
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PPUSH
37647: LD_VAR 0 2
37651: PUSH
37652: LD_VAR 0 4
37656: ARRAY
37657: PUSH
37658: LD_VAR 0 2
37662: PUSH
37663: LD_VAR 0 4
37667: ARRAY
37668: PPUSH
37669: CALL_OW 255
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PPUSH
37678: CALL 45101 0 3
37682: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37683: LD_VAR 0 2
37687: PUSH
37688: LD_VAR 0 4
37692: ARRAY
37693: PPUSH
37694: LD_VAR 0 1
37698: PPUSH
37699: CALL_OW 255
37703: PPUSH
37704: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37708: LD_VAR 0 2
37712: PUSH
37713: LD_VAR 0 4
37717: ARRAY
37718: PPUSH
37719: CALL_OW 141
// end ;
37723: GO 37555
37725: POP
37726: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37727: LD_VAR 0 1
37731: PPUSH
37732: LD_EXP 110
37736: PUSH
37737: LD_VAR 0 5
37741: ARRAY
37742: PUSH
37743: LD_INT 0
37745: PLUS
37746: PPUSH
37747: CALL_OW 505
// end ;
37751: LD_VAR 0 3
37755: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37756: LD_INT 0
37758: PPUSH
37759: PPUSH
37760: PPUSH
37761: PPUSH
// if not hack in hackTanks then
37762: LD_VAR 0 1
37766: PUSH
37767: LD_EXP 109
37771: IN
37772: NOT
37773: IFFALSE 37777
// exit ;
37775: GO 38017
// index := GetElementIndex ( hackTanks , hack ) ;
37777: LD_ADDR_VAR 0 4
37781: PUSH
37782: LD_EXP 109
37786: PPUSH
37787: LD_VAR 0 1
37791: PPUSH
37792: CALL 44886 0 2
37796: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37797: LD_ADDR_VAR 0 3
37801: PUSH
37802: DOUBLE
37803: LD_EXP 110
37807: PUSH
37808: LD_VAR 0 4
37812: ARRAY
37813: INC
37814: ST_TO_ADDR
37815: LD_INT 1
37817: PUSH
37818: FOR_DOWNTO
37819: IFFALSE 37991
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37821: LD_ADDR_VAR 0 5
37825: PUSH
37826: LD_EXP 110
37830: PUSH
37831: LD_VAR 0 4
37835: ARRAY
37836: PUSH
37837: LD_VAR 0 3
37841: ARRAY
37842: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37843: LD_VAR 0 5
37847: PUSH
37848: LD_INT 1
37850: ARRAY
37851: PPUSH
37852: CALL_OW 302
37856: NOT
37857: PUSH
37858: LD_VAR 0 5
37862: PUSH
37863: LD_INT 1
37865: ARRAY
37866: PPUSH
37867: CALL_OW 255
37871: PUSH
37872: LD_VAR 0 1
37876: PPUSH
37877: CALL_OW 255
37881: NONEQUAL
37882: OR
37883: IFFALSE 37989
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37885: LD_VAR 0 5
37889: PUSH
37890: LD_INT 1
37892: ARRAY
37893: PPUSH
37894: CALL_OW 305
37898: PUSH
37899: LD_VAR 0 5
37903: PUSH
37904: LD_INT 1
37906: ARRAY
37907: PPUSH
37908: CALL_OW 255
37912: PUSH
37913: LD_VAR 0 1
37917: PPUSH
37918: CALL_OW 255
37922: EQUAL
37923: AND
37924: IFFALSE 37948
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37926: LD_VAR 0 5
37930: PUSH
37931: LD_INT 1
37933: ARRAY
37934: PPUSH
37935: LD_VAR 0 5
37939: PUSH
37940: LD_INT 2
37942: ARRAY
37943: PPUSH
37944: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37948: LD_ADDR_EXP 110
37952: PUSH
37953: LD_EXP 110
37957: PPUSH
37958: LD_VAR 0 4
37962: PPUSH
37963: LD_EXP 110
37967: PUSH
37968: LD_VAR 0 4
37972: ARRAY
37973: PPUSH
37974: LD_VAR 0 3
37978: PPUSH
37979: CALL_OW 3
37983: PPUSH
37984: CALL_OW 1
37988: ST_TO_ADDR
// end ; end ;
37989: GO 37818
37991: POP
37992: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37993: LD_VAR 0 1
37997: PPUSH
37998: LD_EXP 110
38002: PUSH
38003: LD_VAR 0 4
38007: ARRAY
38008: PUSH
38009: LD_INT 0
38011: PLUS
38012: PPUSH
38013: CALL_OW 505
// end ;
38017: LD_VAR 0 2
38021: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38022: LD_INT 0
38024: PPUSH
38025: PPUSH
38026: PPUSH
38027: PPUSH
// if not hack in hackTanks then
38028: LD_VAR 0 1
38032: PUSH
38033: LD_EXP 109
38037: IN
38038: NOT
38039: IFFALSE 38043
// exit ;
38041: GO 38128
// index := GetElementIndex ( hackTanks , hack ) ;
38043: LD_ADDR_VAR 0 5
38047: PUSH
38048: LD_EXP 109
38052: PPUSH
38053: LD_VAR 0 1
38057: PPUSH
38058: CALL 44886 0 2
38062: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38063: LD_ADDR_VAR 0 4
38067: PUSH
38068: DOUBLE
38069: LD_INT 1
38071: DEC
38072: ST_TO_ADDR
38073: LD_EXP 110
38077: PUSH
38078: LD_VAR 0 5
38082: ARRAY
38083: PUSH
38084: FOR_TO
38085: IFFALSE 38126
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38087: LD_EXP 110
38091: PUSH
38092: LD_VAR 0 5
38096: ARRAY
38097: PUSH
38098: LD_VAR 0 4
38102: ARRAY
38103: PUSH
38104: LD_INT 1
38106: ARRAY
38107: PUSH
38108: LD_VAR 0 2
38112: EQUAL
38113: IFFALSE 38124
// KillUnit ( vehicle ) ;
38115: LD_VAR 0 2
38119: PPUSH
38120: CALL_OW 66
38124: GO 38084
38126: POP
38127: POP
// end ;
38128: LD_VAR 0 3
38132: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38133: LD_EXP 114
38137: NOT
38138: IFFALSE 38173
38140: GO 38142
38142: DISABLE
// begin initMiner := true ;
38143: LD_ADDR_EXP 114
38147: PUSH
38148: LD_INT 1
38150: ST_TO_ADDR
// minersList := [ ] ;
38151: LD_ADDR_EXP 115
38155: PUSH
38156: EMPTY
38157: ST_TO_ADDR
// minerMinesList := [ ] ;
38158: LD_ADDR_EXP 116
38162: PUSH
38163: EMPTY
38164: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38165: LD_ADDR_EXP 117
38169: PUSH
38170: LD_INT 5
38172: ST_TO_ADDR
// end ;
38173: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38174: LD_EXP 114
38178: PUSH
38179: LD_INT 34
38181: PUSH
38182: LD_INT 81
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PPUSH
38189: CALL_OW 69
38193: AND
38194: IFFALSE 38655
38196: GO 38198
38198: DISABLE
38199: LD_INT 0
38201: PPUSH
38202: PPUSH
38203: PPUSH
38204: PPUSH
// begin enable ;
38205: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38206: LD_ADDR_VAR 0 1
38210: PUSH
38211: LD_INT 34
38213: PUSH
38214: LD_INT 81
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PPUSH
38221: CALL_OW 69
38225: PUSH
38226: FOR_IN
38227: IFFALSE 38299
// begin if not i in minersList then
38229: LD_VAR 0 1
38233: PUSH
38234: LD_EXP 115
38238: IN
38239: NOT
38240: IFFALSE 38297
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38242: LD_ADDR_EXP 115
38246: PUSH
38247: LD_EXP 115
38251: PPUSH
38252: LD_EXP 115
38256: PUSH
38257: LD_INT 1
38259: PLUS
38260: PPUSH
38261: LD_VAR 0 1
38265: PPUSH
38266: CALL_OW 1
38270: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38271: LD_ADDR_EXP 116
38275: PUSH
38276: LD_EXP 116
38280: PPUSH
38281: LD_EXP 116
38285: PUSH
38286: LD_INT 1
38288: PLUS
38289: PPUSH
38290: EMPTY
38291: PPUSH
38292: CALL_OW 1
38296: ST_TO_ADDR
// end end ;
38297: GO 38226
38299: POP
38300: POP
// for i := minerMinesList downto 1 do
38301: LD_ADDR_VAR 0 1
38305: PUSH
38306: DOUBLE
38307: LD_EXP 116
38311: INC
38312: ST_TO_ADDR
38313: LD_INT 1
38315: PUSH
38316: FOR_DOWNTO
38317: IFFALSE 38653
// begin if IsLive ( minersList [ i ] ) then
38319: LD_EXP 115
38323: PUSH
38324: LD_VAR 0 1
38328: ARRAY
38329: PPUSH
38330: CALL_OW 300
38334: IFFALSE 38362
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38336: LD_EXP 115
38340: PUSH
38341: LD_VAR 0 1
38345: ARRAY
38346: PPUSH
38347: LD_EXP 116
38351: PUSH
38352: LD_VAR 0 1
38356: ARRAY
38357: PPUSH
38358: CALL_OW 505
// if not minerMinesList [ i ] then
38362: LD_EXP 116
38366: PUSH
38367: LD_VAR 0 1
38371: ARRAY
38372: NOT
38373: IFFALSE 38377
// continue ;
38375: GO 38316
// for j := minerMinesList [ i ] downto 1 do
38377: LD_ADDR_VAR 0 2
38381: PUSH
38382: DOUBLE
38383: LD_EXP 116
38387: PUSH
38388: LD_VAR 0 1
38392: ARRAY
38393: INC
38394: ST_TO_ADDR
38395: LD_INT 1
38397: PUSH
38398: FOR_DOWNTO
38399: IFFALSE 38649
// begin side := GetSide ( minersList [ i ] ) ;
38401: LD_ADDR_VAR 0 3
38405: PUSH
38406: LD_EXP 115
38410: PUSH
38411: LD_VAR 0 1
38415: ARRAY
38416: PPUSH
38417: CALL_OW 255
38421: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38422: LD_ADDR_VAR 0 4
38426: PUSH
38427: LD_EXP 116
38431: PUSH
38432: LD_VAR 0 1
38436: ARRAY
38437: PUSH
38438: LD_VAR 0 2
38442: ARRAY
38443: PUSH
38444: LD_INT 1
38446: ARRAY
38447: PPUSH
38448: LD_EXP 116
38452: PUSH
38453: LD_VAR 0 1
38457: ARRAY
38458: PUSH
38459: LD_VAR 0 2
38463: ARRAY
38464: PUSH
38465: LD_INT 2
38467: ARRAY
38468: PPUSH
38469: CALL_OW 428
38473: ST_TO_ADDR
// if not tmp then
38474: LD_VAR 0 4
38478: NOT
38479: IFFALSE 38483
// continue ;
38481: GO 38398
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38483: LD_VAR 0 4
38487: PUSH
38488: LD_INT 81
38490: PUSH
38491: LD_VAR 0 3
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PPUSH
38500: CALL_OW 69
38504: IN
38505: PUSH
38506: LD_EXP 116
38510: PUSH
38511: LD_VAR 0 1
38515: ARRAY
38516: PUSH
38517: LD_VAR 0 2
38521: ARRAY
38522: PUSH
38523: LD_INT 1
38525: ARRAY
38526: PPUSH
38527: LD_EXP 116
38531: PUSH
38532: LD_VAR 0 1
38536: ARRAY
38537: PUSH
38538: LD_VAR 0 2
38542: ARRAY
38543: PUSH
38544: LD_INT 2
38546: ARRAY
38547: PPUSH
38548: CALL_OW 458
38552: AND
38553: IFFALSE 38647
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38555: LD_EXP 116
38559: PUSH
38560: LD_VAR 0 1
38564: ARRAY
38565: PUSH
38566: LD_VAR 0 2
38570: ARRAY
38571: PUSH
38572: LD_INT 1
38574: ARRAY
38575: PPUSH
38576: LD_EXP 116
38580: PUSH
38581: LD_VAR 0 1
38585: ARRAY
38586: PUSH
38587: LD_VAR 0 2
38591: ARRAY
38592: PUSH
38593: LD_INT 2
38595: ARRAY
38596: PPUSH
38597: LD_VAR 0 3
38601: PPUSH
38602: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38606: LD_ADDR_EXP 116
38610: PUSH
38611: LD_EXP 116
38615: PPUSH
38616: LD_VAR 0 1
38620: PPUSH
38621: LD_EXP 116
38625: PUSH
38626: LD_VAR 0 1
38630: ARRAY
38631: PPUSH
38632: LD_VAR 0 2
38636: PPUSH
38637: CALL_OW 3
38641: PPUSH
38642: CALL_OW 1
38646: ST_TO_ADDR
// end ; end ;
38647: GO 38398
38649: POP
38650: POP
// end ;
38651: GO 38316
38653: POP
38654: POP
// end ;
38655: PPOPN 4
38657: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38658: LD_INT 0
38660: PPUSH
38661: PPUSH
// result := false ;
38662: LD_ADDR_VAR 0 4
38666: PUSH
38667: LD_INT 0
38669: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38670: LD_VAR 0 1
38674: PPUSH
38675: CALL_OW 264
38679: PUSH
38680: LD_INT 81
38682: EQUAL
38683: NOT
38684: IFFALSE 38688
// exit ;
38686: GO 38928
// index := GetElementIndex ( minersList , unit ) ;
38688: LD_ADDR_VAR 0 5
38692: PUSH
38693: LD_EXP 115
38697: PPUSH
38698: LD_VAR 0 1
38702: PPUSH
38703: CALL 44886 0 2
38707: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38708: LD_EXP 116
38712: PUSH
38713: LD_VAR 0 5
38717: ARRAY
38718: PUSH
38719: LD_EXP 117
38723: GREATEREQUAL
38724: IFFALSE 38728
// exit ;
38726: GO 38928
// ComMoveXY ( unit , x , y ) ;
38728: LD_VAR 0 1
38732: PPUSH
38733: LD_VAR 0 2
38737: PPUSH
38738: LD_VAR 0 3
38742: PPUSH
38743: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38747: LD_INT 35
38749: PPUSH
38750: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38754: LD_VAR 0 1
38758: PPUSH
38759: LD_VAR 0 2
38763: PPUSH
38764: LD_VAR 0 3
38768: PPUSH
38769: CALL 76627 0 3
38773: NOT
38774: PUSH
38775: LD_VAR 0 1
38779: PPUSH
38780: CALL_OW 314
38784: AND
38785: IFFALSE 38789
// exit ;
38787: GO 38928
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38789: LD_VAR 0 2
38793: PPUSH
38794: LD_VAR 0 3
38798: PPUSH
38799: CALL_OW 428
38803: PUSH
38804: LD_VAR 0 1
38808: EQUAL
38809: PUSH
38810: LD_VAR 0 1
38814: PPUSH
38815: CALL_OW 314
38819: NOT
38820: AND
38821: IFFALSE 38747
// PlaySoundXY ( x , y , PlantMine ) ;
38823: LD_VAR 0 2
38827: PPUSH
38828: LD_VAR 0 3
38832: PPUSH
38833: LD_STRING PlantMine
38835: PPUSH
38836: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38840: LD_VAR 0 2
38844: PPUSH
38845: LD_VAR 0 3
38849: PPUSH
38850: LD_VAR 0 1
38854: PPUSH
38855: CALL_OW 255
38859: PPUSH
38860: LD_INT 0
38862: PPUSH
38863: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38867: LD_ADDR_EXP 116
38871: PUSH
38872: LD_EXP 116
38876: PPUSH
38877: LD_VAR 0 5
38881: PUSH
38882: LD_EXP 116
38886: PUSH
38887: LD_VAR 0 5
38891: ARRAY
38892: PUSH
38893: LD_INT 1
38895: PLUS
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PPUSH
38901: LD_VAR 0 2
38905: PUSH
38906: LD_VAR 0 3
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PPUSH
38915: CALL 45101 0 3
38919: ST_TO_ADDR
// result := true ;
38920: LD_ADDR_VAR 0 4
38924: PUSH
38925: LD_INT 1
38927: ST_TO_ADDR
// end ;
38928: LD_VAR 0 4
38932: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38933: LD_INT 0
38935: PPUSH
38936: PPUSH
38937: PPUSH
// if not unit in minersList then
38938: LD_VAR 0 1
38942: PUSH
38943: LD_EXP 115
38947: IN
38948: NOT
38949: IFFALSE 38953
// exit ;
38951: GO 39345
// index := GetElementIndex ( minersList , unit ) ;
38953: LD_ADDR_VAR 0 6
38957: PUSH
38958: LD_EXP 115
38962: PPUSH
38963: LD_VAR 0 1
38967: PPUSH
38968: CALL 44886 0 2
38972: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38973: LD_ADDR_VAR 0 5
38977: PUSH
38978: DOUBLE
38979: LD_EXP 116
38983: PUSH
38984: LD_VAR 0 6
38988: ARRAY
38989: INC
38990: ST_TO_ADDR
38991: LD_INT 1
38993: PUSH
38994: FOR_DOWNTO
38995: IFFALSE 39156
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38997: LD_EXP 116
39001: PUSH
39002: LD_VAR 0 6
39006: ARRAY
39007: PUSH
39008: LD_VAR 0 5
39012: ARRAY
39013: PUSH
39014: LD_INT 1
39016: ARRAY
39017: PUSH
39018: LD_VAR 0 2
39022: EQUAL
39023: PUSH
39024: LD_EXP 116
39028: PUSH
39029: LD_VAR 0 6
39033: ARRAY
39034: PUSH
39035: LD_VAR 0 5
39039: ARRAY
39040: PUSH
39041: LD_INT 2
39043: ARRAY
39044: PUSH
39045: LD_VAR 0 3
39049: EQUAL
39050: AND
39051: IFFALSE 39154
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39053: LD_EXP 116
39057: PUSH
39058: LD_VAR 0 6
39062: ARRAY
39063: PUSH
39064: LD_VAR 0 5
39068: ARRAY
39069: PUSH
39070: LD_INT 1
39072: ARRAY
39073: PPUSH
39074: LD_EXP 116
39078: PUSH
39079: LD_VAR 0 6
39083: ARRAY
39084: PUSH
39085: LD_VAR 0 5
39089: ARRAY
39090: PUSH
39091: LD_INT 2
39093: ARRAY
39094: PPUSH
39095: LD_VAR 0 1
39099: PPUSH
39100: CALL_OW 255
39104: PPUSH
39105: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39109: LD_ADDR_EXP 116
39113: PUSH
39114: LD_EXP 116
39118: PPUSH
39119: LD_VAR 0 6
39123: PPUSH
39124: LD_EXP 116
39128: PUSH
39129: LD_VAR 0 6
39133: ARRAY
39134: PPUSH
39135: LD_VAR 0 5
39139: PPUSH
39140: CALL_OW 3
39144: PPUSH
39145: CALL_OW 1
39149: ST_TO_ADDR
// exit ;
39150: POP
39151: POP
39152: GO 39345
// end ; end ;
39154: GO 38994
39156: POP
39157: POP
// for i := minerMinesList [ index ] downto 1 do
39158: LD_ADDR_VAR 0 5
39162: PUSH
39163: DOUBLE
39164: LD_EXP 116
39168: PUSH
39169: LD_VAR 0 6
39173: ARRAY
39174: INC
39175: ST_TO_ADDR
39176: LD_INT 1
39178: PUSH
39179: FOR_DOWNTO
39180: IFFALSE 39343
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39182: LD_EXP 116
39186: PUSH
39187: LD_VAR 0 6
39191: ARRAY
39192: PUSH
39193: LD_VAR 0 5
39197: ARRAY
39198: PUSH
39199: LD_INT 1
39201: ARRAY
39202: PPUSH
39203: LD_EXP 116
39207: PUSH
39208: LD_VAR 0 6
39212: ARRAY
39213: PUSH
39214: LD_VAR 0 5
39218: ARRAY
39219: PUSH
39220: LD_INT 2
39222: ARRAY
39223: PPUSH
39224: LD_VAR 0 2
39228: PPUSH
39229: LD_VAR 0 3
39233: PPUSH
39234: CALL_OW 298
39238: PUSH
39239: LD_INT 6
39241: LESS
39242: IFFALSE 39341
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39244: LD_EXP 116
39248: PUSH
39249: LD_VAR 0 6
39253: ARRAY
39254: PUSH
39255: LD_VAR 0 5
39259: ARRAY
39260: PUSH
39261: LD_INT 1
39263: ARRAY
39264: PPUSH
39265: LD_EXP 116
39269: PUSH
39270: LD_VAR 0 6
39274: ARRAY
39275: PUSH
39276: LD_VAR 0 5
39280: ARRAY
39281: PUSH
39282: LD_INT 2
39284: ARRAY
39285: PPUSH
39286: LD_VAR 0 1
39290: PPUSH
39291: CALL_OW 255
39295: PPUSH
39296: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39300: LD_ADDR_EXP 116
39304: PUSH
39305: LD_EXP 116
39309: PPUSH
39310: LD_VAR 0 6
39314: PPUSH
39315: LD_EXP 116
39319: PUSH
39320: LD_VAR 0 6
39324: ARRAY
39325: PPUSH
39326: LD_VAR 0 5
39330: PPUSH
39331: CALL_OW 3
39335: PPUSH
39336: CALL_OW 1
39340: ST_TO_ADDR
// end ; end ;
39341: GO 39179
39343: POP
39344: POP
// end ;
39345: LD_VAR 0 4
39349: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39350: LD_INT 0
39352: PPUSH
39353: PPUSH
39354: PPUSH
39355: PPUSH
39356: PPUSH
39357: PPUSH
39358: PPUSH
39359: PPUSH
39360: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39361: LD_VAR 0 1
39365: PPUSH
39366: CALL_OW 264
39370: PUSH
39371: LD_INT 81
39373: EQUAL
39374: NOT
39375: PUSH
39376: LD_VAR 0 1
39380: PUSH
39381: LD_EXP 115
39385: IN
39386: NOT
39387: OR
39388: IFFALSE 39392
// exit ;
39390: GO 39714
// index := GetElementIndex ( minersList , unit ) ;
39392: LD_ADDR_VAR 0 6
39396: PUSH
39397: LD_EXP 115
39401: PPUSH
39402: LD_VAR 0 1
39406: PPUSH
39407: CALL 44886 0 2
39411: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39412: LD_ADDR_VAR 0 8
39416: PUSH
39417: LD_EXP 117
39421: PUSH
39422: LD_EXP 116
39426: PUSH
39427: LD_VAR 0 6
39431: ARRAY
39432: MINUS
39433: ST_TO_ADDR
// if not minesFreeAmount then
39434: LD_VAR 0 8
39438: NOT
39439: IFFALSE 39443
// exit ;
39441: GO 39714
// tmp := [ ] ;
39443: LD_ADDR_VAR 0 7
39447: PUSH
39448: EMPTY
39449: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39450: LD_ADDR_VAR 0 5
39454: PUSH
39455: DOUBLE
39456: LD_INT 1
39458: DEC
39459: ST_TO_ADDR
39460: LD_VAR 0 8
39464: PUSH
39465: FOR_TO
39466: IFFALSE 39661
// begin _d := rand ( 0 , 5 ) ;
39468: LD_ADDR_VAR 0 11
39472: PUSH
39473: LD_INT 0
39475: PPUSH
39476: LD_INT 5
39478: PPUSH
39479: CALL_OW 12
39483: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39484: LD_ADDR_VAR 0 12
39488: PUSH
39489: LD_INT 2
39491: PPUSH
39492: LD_INT 6
39494: PPUSH
39495: CALL_OW 12
39499: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39500: LD_ADDR_VAR 0 9
39504: PUSH
39505: LD_VAR 0 2
39509: PPUSH
39510: LD_VAR 0 11
39514: PPUSH
39515: LD_VAR 0 12
39519: PPUSH
39520: CALL_OW 272
39524: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39525: LD_ADDR_VAR 0 10
39529: PUSH
39530: LD_VAR 0 3
39534: PPUSH
39535: LD_VAR 0 11
39539: PPUSH
39540: LD_VAR 0 12
39544: PPUSH
39545: CALL_OW 273
39549: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39550: LD_VAR 0 9
39554: PPUSH
39555: LD_VAR 0 10
39559: PPUSH
39560: CALL_OW 488
39564: PUSH
39565: LD_VAR 0 9
39569: PUSH
39570: LD_VAR 0 10
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PUSH
39579: LD_VAR 0 7
39583: IN
39584: NOT
39585: AND
39586: PUSH
39587: LD_VAR 0 9
39591: PPUSH
39592: LD_VAR 0 10
39596: PPUSH
39597: CALL_OW 458
39601: NOT
39602: AND
39603: IFFALSE 39645
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39605: LD_ADDR_VAR 0 7
39609: PUSH
39610: LD_VAR 0 7
39614: PPUSH
39615: LD_VAR 0 7
39619: PUSH
39620: LD_INT 1
39622: PLUS
39623: PPUSH
39624: LD_VAR 0 9
39628: PUSH
39629: LD_VAR 0 10
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PPUSH
39638: CALL_OW 1
39642: ST_TO_ADDR
39643: GO 39659
// i := i - 1 ;
39645: LD_ADDR_VAR 0 5
39649: PUSH
39650: LD_VAR 0 5
39654: PUSH
39655: LD_INT 1
39657: MINUS
39658: ST_TO_ADDR
// end ;
39659: GO 39465
39661: POP
39662: POP
// for i in tmp do
39663: LD_ADDR_VAR 0 5
39667: PUSH
39668: LD_VAR 0 7
39672: PUSH
39673: FOR_IN
39674: IFFALSE 39712
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39676: LD_VAR 0 1
39680: PPUSH
39681: LD_VAR 0 5
39685: PUSH
39686: LD_INT 1
39688: ARRAY
39689: PPUSH
39690: LD_VAR 0 5
39694: PUSH
39695: LD_INT 2
39697: ARRAY
39698: PPUSH
39699: CALL 38658 0 3
39703: NOT
39704: IFFALSE 39710
// exit ;
39706: POP
39707: POP
39708: GO 39714
39710: GO 39673
39712: POP
39713: POP
// end ;
39714: LD_VAR 0 4
39718: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39719: LD_INT 0
39721: PPUSH
39722: PPUSH
39723: PPUSH
39724: PPUSH
39725: PPUSH
39726: PPUSH
39727: PPUSH
// if not GetClass ( unit ) = class_sniper then
39728: LD_VAR 0 1
39732: PPUSH
39733: CALL_OW 257
39737: PUSH
39738: LD_INT 5
39740: EQUAL
39741: NOT
39742: IFFALSE 39746
// exit ;
39744: GO 40134
// dist := 8 ;
39746: LD_ADDR_VAR 0 5
39750: PUSH
39751: LD_INT 8
39753: ST_TO_ADDR
// viewRange := 12 ;
39754: LD_ADDR_VAR 0 7
39758: PUSH
39759: LD_INT 12
39761: ST_TO_ADDR
// side := GetSide ( unit ) ;
39762: LD_ADDR_VAR 0 6
39766: PUSH
39767: LD_VAR 0 1
39771: PPUSH
39772: CALL_OW 255
39776: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39777: LD_INT 61
39779: PPUSH
39780: LD_VAR 0 6
39784: PPUSH
39785: CALL_OW 321
39789: PUSH
39790: LD_INT 2
39792: EQUAL
39793: IFFALSE 39803
// viewRange := 16 ;
39795: LD_ADDR_VAR 0 7
39799: PUSH
39800: LD_INT 16
39802: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39803: LD_VAR 0 1
39807: PPUSH
39808: LD_VAR 0 2
39812: PPUSH
39813: LD_VAR 0 3
39817: PPUSH
39818: CALL_OW 297
39822: PUSH
39823: LD_VAR 0 5
39827: GREATER
39828: IFFALSE 39907
// begin ComMoveXY ( unit , x , y ) ;
39830: LD_VAR 0 1
39834: PPUSH
39835: LD_VAR 0 2
39839: PPUSH
39840: LD_VAR 0 3
39844: PPUSH
39845: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39849: LD_INT 35
39851: PPUSH
39852: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39856: LD_VAR 0 1
39860: PPUSH
39861: LD_VAR 0 2
39865: PPUSH
39866: LD_VAR 0 3
39870: PPUSH
39871: CALL 76627 0 3
39875: NOT
39876: IFFALSE 39880
// exit ;
39878: GO 40134
// until GetDistUnitXY ( unit , x , y ) < dist ;
39880: LD_VAR 0 1
39884: PPUSH
39885: LD_VAR 0 2
39889: PPUSH
39890: LD_VAR 0 3
39894: PPUSH
39895: CALL_OW 297
39899: PUSH
39900: LD_VAR 0 5
39904: LESS
39905: IFFALSE 39849
// end ; ComTurnXY ( unit , x , y ) ;
39907: LD_VAR 0 1
39911: PPUSH
39912: LD_VAR 0 2
39916: PPUSH
39917: LD_VAR 0 3
39921: PPUSH
39922: CALL_OW 118
// wait ( 5 ) ;
39926: LD_INT 5
39928: PPUSH
39929: CALL_OW 67
// _d := GetDir ( unit ) ;
39933: LD_ADDR_VAR 0 10
39937: PUSH
39938: LD_VAR 0 1
39942: PPUSH
39943: CALL_OW 254
39947: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39948: LD_ADDR_VAR 0 8
39952: PUSH
39953: LD_VAR 0 1
39957: PPUSH
39958: CALL_OW 250
39962: PPUSH
39963: LD_VAR 0 10
39967: PPUSH
39968: LD_VAR 0 5
39972: PPUSH
39973: CALL_OW 272
39977: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39978: LD_ADDR_VAR 0 9
39982: PUSH
39983: LD_VAR 0 1
39987: PPUSH
39988: CALL_OW 251
39992: PPUSH
39993: LD_VAR 0 10
39997: PPUSH
39998: LD_VAR 0 5
40002: PPUSH
40003: CALL_OW 273
40007: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40008: LD_VAR 0 8
40012: PPUSH
40013: LD_VAR 0 9
40017: PPUSH
40018: CALL_OW 488
40022: NOT
40023: IFFALSE 40027
// exit ;
40025: GO 40134
// ComAnimCustom ( unit , 1 ) ;
40027: LD_VAR 0 1
40031: PPUSH
40032: LD_INT 1
40034: PPUSH
40035: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40039: LD_VAR 0 8
40043: PPUSH
40044: LD_VAR 0 9
40048: PPUSH
40049: LD_VAR 0 6
40053: PPUSH
40054: LD_VAR 0 7
40058: PPUSH
40059: CALL_OW 330
// repeat wait ( 1 ) ;
40063: LD_INT 1
40065: PPUSH
40066: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
40070: LD_VAR 0 1
40074: PPUSH
40075: CALL_OW 316
40079: PUSH
40080: LD_VAR 0 1
40084: PPUSH
40085: CALL_OW 314
40089: OR
40090: PUSH
40091: LD_VAR 0 1
40095: PPUSH
40096: CALL_OW 302
40100: NOT
40101: OR
40102: PUSH
40103: LD_VAR 0 1
40107: PPUSH
40108: CALL_OW 301
40112: OR
40113: IFFALSE 40063
// RemoveSeeing ( _x , _y , side ) ;
40115: LD_VAR 0 8
40119: PPUSH
40120: LD_VAR 0 9
40124: PPUSH
40125: LD_VAR 0 6
40129: PPUSH
40130: CALL_OW 331
// end ; end_of_file
40134: LD_VAR 0 4
40138: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40139: LD_INT 0
40141: PPUSH
40142: PPUSH
// if exist_mode then
40143: LD_VAR 0 2
40147: IFFALSE 40172
// unit := CreateCharacter ( prefix & ident ) else
40149: LD_ADDR_VAR 0 5
40153: PUSH
40154: LD_VAR 0 3
40158: PUSH
40159: LD_VAR 0 1
40163: STR
40164: PPUSH
40165: CALL_OW 34
40169: ST_TO_ADDR
40170: GO 40187
// unit := NewCharacter ( ident ) ;
40172: LD_ADDR_VAR 0 5
40176: PUSH
40177: LD_VAR 0 1
40181: PPUSH
40182: CALL_OW 25
40186: ST_TO_ADDR
// result := unit ;
40187: LD_ADDR_VAR 0 4
40191: PUSH
40192: LD_VAR 0 5
40196: ST_TO_ADDR
// end ;
40197: LD_VAR 0 4
40201: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40202: LD_INT 0
40204: PPUSH
40205: PPUSH
// if not side or not nation then
40206: LD_VAR 0 1
40210: NOT
40211: PUSH
40212: LD_VAR 0 2
40216: NOT
40217: OR
40218: IFFALSE 40222
// exit ;
40220: GO 40990
// case nation of nation_american :
40222: LD_VAR 0 2
40226: PUSH
40227: LD_INT 1
40229: DOUBLE
40230: EQUAL
40231: IFTRUE 40235
40233: GO 40449
40235: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40236: LD_ADDR_VAR 0 4
40240: PUSH
40241: LD_INT 35
40243: PUSH
40244: LD_INT 45
40246: PUSH
40247: LD_INT 46
40249: PUSH
40250: LD_INT 47
40252: PUSH
40253: LD_INT 82
40255: PUSH
40256: LD_INT 83
40258: PUSH
40259: LD_INT 84
40261: PUSH
40262: LD_INT 85
40264: PUSH
40265: LD_INT 86
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 2
40273: PUSH
40274: LD_INT 6
40276: PUSH
40277: LD_INT 15
40279: PUSH
40280: LD_INT 16
40282: PUSH
40283: LD_INT 7
40285: PUSH
40286: LD_INT 12
40288: PUSH
40289: LD_INT 13
40291: PUSH
40292: LD_INT 10
40294: PUSH
40295: LD_INT 14
40297: PUSH
40298: LD_INT 20
40300: PUSH
40301: LD_INT 21
40303: PUSH
40304: LD_INT 22
40306: PUSH
40307: LD_INT 25
40309: PUSH
40310: LD_INT 32
40312: PUSH
40313: LD_INT 27
40315: PUSH
40316: LD_INT 36
40318: PUSH
40319: LD_INT 69
40321: PUSH
40322: LD_INT 39
40324: PUSH
40325: LD_INT 34
40327: PUSH
40328: LD_INT 40
40330: PUSH
40331: LD_INT 48
40333: PUSH
40334: LD_INT 49
40336: PUSH
40337: LD_INT 50
40339: PUSH
40340: LD_INT 51
40342: PUSH
40343: LD_INT 52
40345: PUSH
40346: LD_INT 53
40348: PUSH
40349: LD_INT 54
40351: PUSH
40352: LD_INT 55
40354: PUSH
40355: LD_INT 56
40357: PUSH
40358: LD_INT 57
40360: PUSH
40361: LD_INT 58
40363: PUSH
40364: LD_INT 59
40366: PUSH
40367: LD_INT 60
40369: PUSH
40370: LD_INT 61
40372: PUSH
40373: LD_INT 62
40375: PUSH
40376: LD_INT 80
40378: PUSH
40379: LD_INT 82
40381: PUSH
40382: LD_INT 83
40384: PUSH
40385: LD_INT 84
40387: PUSH
40388: LD_INT 85
40390: PUSH
40391: LD_INT 86
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: ST_TO_ADDR
40447: GO 40914
40449: LD_INT 2
40451: DOUBLE
40452: EQUAL
40453: IFTRUE 40457
40455: GO 40683
40457: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40458: LD_ADDR_VAR 0 4
40462: PUSH
40463: LD_INT 35
40465: PUSH
40466: LD_INT 45
40468: PUSH
40469: LD_INT 46
40471: PUSH
40472: LD_INT 47
40474: PUSH
40475: LD_INT 82
40477: PUSH
40478: LD_INT 83
40480: PUSH
40481: LD_INT 84
40483: PUSH
40484: LD_INT 85
40486: PUSH
40487: LD_INT 87
40489: PUSH
40490: LD_INT 70
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: LD_INT 11
40498: PUSH
40499: LD_INT 3
40501: PUSH
40502: LD_INT 4
40504: PUSH
40505: LD_INT 5
40507: PUSH
40508: LD_INT 6
40510: PUSH
40511: LD_INT 15
40513: PUSH
40514: LD_INT 18
40516: PUSH
40517: LD_INT 7
40519: PUSH
40520: LD_INT 17
40522: PUSH
40523: LD_INT 8
40525: PUSH
40526: LD_INT 20
40528: PUSH
40529: LD_INT 21
40531: PUSH
40532: LD_INT 22
40534: PUSH
40535: LD_INT 72
40537: PUSH
40538: LD_INT 26
40540: PUSH
40541: LD_INT 69
40543: PUSH
40544: LD_INT 39
40546: PUSH
40547: LD_INT 40
40549: PUSH
40550: LD_INT 41
40552: PUSH
40553: LD_INT 42
40555: PUSH
40556: LD_INT 43
40558: PUSH
40559: LD_INT 48
40561: PUSH
40562: LD_INT 49
40564: PUSH
40565: LD_INT 50
40567: PUSH
40568: LD_INT 51
40570: PUSH
40571: LD_INT 52
40573: PUSH
40574: LD_INT 53
40576: PUSH
40577: LD_INT 54
40579: PUSH
40580: LD_INT 55
40582: PUSH
40583: LD_INT 56
40585: PUSH
40586: LD_INT 60
40588: PUSH
40589: LD_INT 61
40591: PUSH
40592: LD_INT 62
40594: PUSH
40595: LD_INT 66
40597: PUSH
40598: LD_INT 67
40600: PUSH
40601: LD_INT 68
40603: PUSH
40604: LD_INT 81
40606: PUSH
40607: LD_INT 82
40609: PUSH
40610: LD_INT 83
40612: PUSH
40613: LD_INT 84
40615: PUSH
40616: LD_INT 85
40618: PUSH
40619: LD_INT 87
40621: PUSH
40622: LD_INT 88
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: LIST
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: ST_TO_ADDR
40681: GO 40914
40683: LD_INT 3
40685: DOUBLE
40686: EQUAL
40687: IFTRUE 40691
40689: GO 40913
40691: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40692: LD_ADDR_VAR 0 4
40696: PUSH
40697: LD_INT 46
40699: PUSH
40700: LD_INT 47
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: LD_INT 82
40711: PUSH
40712: LD_INT 83
40714: PUSH
40715: LD_INT 84
40717: PUSH
40718: LD_INT 85
40720: PUSH
40721: LD_INT 86
40723: PUSH
40724: LD_INT 11
40726: PUSH
40727: LD_INT 9
40729: PUSH
40730: LD_INT 20
40732: PUSH
40733: LD_INT 19
40735: PUSH
40736: LD_INT 21
40738: PUSH
40739: LD_INT 24
40741: PUSH
40742: LD_INT 22
40744: PUSH
40745: LD_INT 25
40747: PUSH
40748: LD_INT 28
40750: PUSH
40751: LD_INT 29
40753: PUSH
40754: LD_INT 30
40756: PUSH
40757: LD_INT 31
40759: PUSH
40760: LD_INT 37
40762: PUSH
40763: LD_INT 38
40765: PUSH
40766: LD_INT 32
40768: PUSH
40769: LD_INT 27
40771: PUSH
40772: LD_INT 33
40774: PUSH
40775: LD_INT 69
40777: PUSH
40778: LD_INT 39
40780: PUSH
40781: LD_INT 34
40783: PUSH
40784: LD_INT 40
40786: PUSH
40787: LD_INT 71
40789: PUSH
40790: LD_INT 23
40792: PUSH
40793: LD_INT 44
40795: PUSH
40796: LD_INT 48
40798: PUSH
40799: LD_INT 49
40801: PUSH
40802: LD_INT 50
40804: PUSH
40805: LD_INT 51
40807: PUSH
40808: LD_INT 52
40810: PUSH
40811: LD_INT 53
40813: PUSH
40814: LD_INT 54
40816: PUSH
40817: LD_INT 55
40819: PUSH
40820: LD_INT 56
40822: PUSH
40823: LD_INT 57
40825: PUSH
40826: LD_INT 58
40828: PUSH
40829: LD_INT 59
40831: PUSH
40832: LD_INT 63
40834: PUSH
40835: LD_INT 64
40837: PUSH
40838: LD_INT 65
40840: PUSH
40841: LD_INT 82
40843: PUSH
40844: LD_INT 83
40846: PUSH
40847: LD_INT 84
40849: PUSH
40850: LD_INT 85
40852: PUSH
40853: LD_INT 86
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: LIST
40870: LIST
40871: LIST
40872: LIST
40873: LIST
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: ST_TO_ADDR
40911: GO 40914
40913: POP
// if state > - 1 and state < 3 then
40914: LD_VAR 0 3
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: GREATER
40923: PUSH
40924: LD_VAR 0 3
40928: PUSH
40929: LD_INT 3
40931: LESS
40932: AND
40933: IFFALSE 40990
// for i in result do
40935: LD_ADDR_VAR 0 5
40939: PUSH
40940: LD_VAR 0 4
40944: PUSH
40945: FOR_IN
40946: IFFALSE 40988
// if GetTech ( i , side ) <> state then
40948: LD_VAR 0 5
40952: PPUSH
40953: LD_VAR 0 1
40957: PPUSH
40958: CALL_OW 321
40962: PUSH
40963: LD_VAR 0 3
40967: NONEQUAL
40968: IFFALSE 40986
// result := result diff i ;
40970: LD_ADDR_VAR 0 4
40974: PUSH
40975: LD_VAR 0 4
40979: PUSH
40980: LD_VAR 0 5
40984: DIFF
40985: ST_TO_ADDR
40986: GO 40945
40988: POP
40989: POP
// end ;
40990: LD_VAR 0 4
40994: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40995: LD_INT 0
40997: PPUSH
40998: PPUSH
40999: PPUSH
// result := true ;
41000: LD_ADDR_VAR 0 3
41004: PUSH
41005: LD_INT 1
41007: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41008: LD_ADDR_VAR 0 5
41012: PUSH
41013: LD_VAR 0 2
41017: PPUSH
41018: CALL_OW 480
41022: ST_TO_ADDR
// if not tmp then
41023: LD_VAR 0 5
41027: NOT
41028: IFFALSE 41032
// exit ;
41030: GO 41081
// for i in tmp do
41032: LD_ADDR_VAR 0 4
41036: PUSH
41037: LD_VAR 0 5
41041: PUSH
41042: FOR_IN
41043: IFFALSE 41079
// if GetTech ( i , side ) <> state_researched then
41045: LD_VAR 0 4
41049: PPUSH
41050: LD_VAR 0 1
41054: PPUSH
41055: CALL_OW 321
41059: PUSH
41060: LD_INT 2
41062: NONEQUAL
41063: IFFALSE 41077
// begin result := false ;
41065: LD_ADDR_VAR 0 3
41069: PUSH
41070: LD_INT 0
41072: ST_TO_ADDR
// exit ;
41073: POP
41074: POP
41075: GO 41081
// end ;
41077: GO 41042
41079: POP
41080: POP
// end ;
41081: LD_VAR 0 3
41085: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41086: LD_INT 0
41088: PPUSH
41089: PPUSH
41090: PPUSH
41091: PPUSH
41092: PPUSH
41093: PPUSH
41094: PPUSH
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
41100: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41101: LD_VAR 0 1
41105: NOT
41106: PUSH
41107: LD_VAR 0 1
41111: PPUSH
41112: CALL_OW 257
41116: PUSH
41117: LD_INT 9
41119: NONEQUAL
41120: OR
41121: IFFALSE 41125
// exit ;
41123: GO 41698
// side := GetSide ( unit ) ;
41125: LD_ADDR_VAR 0 9
41129: PUSH
41130: LD_VAR 0 1
41134: PPUSH
41135: CALL_OW 255
41139: ST_TO_ADDR
// tech_space := tech_spacanom ;
41140: LD_ADDR_VAR 0 12
41144: PUSH
41145: LD_INT 29
41147: ST_TO_ADDR
// tech_time := tech_taurad ;
41148: LD_ADDR_VAR 0 13
41152: PUSH
41153: LD_INT 28
41155: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41156: LD_ADDR_VAR 0 11
41160: PUSH
41161: LD_VAR 0 1
41165: PPUSH
41166: CALL_OW 310
41170: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41171: LD_VAR 0 11
41175: PPUSH
41176: CALL_OW 247
41180: PUSH
41181: LD_INT 2
41183: EQUAL
41184: IFFALSE 41188
// exit ;
41186: GO 41698
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41188: LD_ADDR_VAR 0 8
41192: PUSH
41193: LD_INT 81
41195: PUSH
41196: LD_VAR 0 9
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 3
41207: PUSH
41208: LD_INT 21
41210: PUSH
41211: LD_INT 3
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PPUSH
41226: CALL_OW 69
41230: ST_TO_ADDR
// if not tmp then
41231: LD_VAR 0 8
41235: NOT
41236: IFFALSE 41240
// exit ;
41238: GO 41698
// if in_unit then
41240: LD_VAR 0 11
41244: IFFALSE 41268
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41246: LD_ADDR_VAR 0 10
41250: PUSH
41251: LD_VAR 0 8
41255: PPUSH
41256: LD_VAR 0 11
41260: PPUSH
41261: CALL_OW 74
41265: ST_TO_ADDR
41266: GO 41288
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41268: LD_ADDR_VAR 0 10
41272: PUSH
41273: LD_VAR 0 8
41277: PPUSH
41278: LD_VAR 0 1
41282: PPUSH
41283: CALL_OW 74
41287: ST_TO_ADDR
// if not enemy then
41288: LD_VAR 0 10
41292: NOT
41293: IFFALSE 41297
// exit ;
41295: GO 41698
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41297: LD_VAR 0 11
41301: PUSH
41302: LD_VAR 0 11
41306: PPUSH
41307: LD_VAR 0 10
41311: PPUSH
41312: CALL_OW 296
41316: PUSH
41317: LD_INT 13
41319: GREATER
41320: AND
41321: PUSH
41322: LD_VAR 0 1
41326: PPUSH
41327: LD_VAR 0 10
41331: PPUSH
41332: CALL_OW 296
41336: PUSH
41337: LD_INT 12
41339: GREATER
41340: OR
41341: IFFALSE 41345
// exit ;
41343: GO 41698
// missile := [ 1 ] ;
41345: LD_ADDR_VAR 0 14
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: EMPTY
41354: LIST
41355: ST_TO_ADDR
// if Researched ( side , tech_space ) then
41356: LD_VAR 0 9
41360: PPUSH
41361: LD_VAR 0 12
41365: PPUSH
41366: CALL_OW 325
41370: IFFALSE 41399
// missile := Replace ( missile , missile + 1 , 2 ) ;
41372: LD_ADDR_VAR 0 14
41376: PUSH
41377: LD_VAR 0 14
41381: PPUSH
41382: LD_VAR 0 14
41386: PUSH
41387: LD_INT 1
41389: PLUS
41390: PPUSH
41391: LD_INT 2
41393: PPUSH
41394: CALL_OW 1
41398: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41399: LD_VAR 0 9
41403: PPUSH
41404: LD_VAR 0 13
41408: PPUSH
41409: CALL_OW 325
41413: PUSH
41414: LD_VAR 0 10
41418: PPUSH
41419: CALL_OW 255
41423: PPUSH
41424: LD_VAR 0 13
41428: PPUSH
41429: CALL_OW 325
41433: NOT
41434: AND
41435: IFFALSE 41464
// missile := Replace ( missile , missile + 1 , 3 ) ;
41437: LD_ADDR_VAR 0 14
41441: PUSH
41442: LD_VAR 0 14
41446: PPUSH
41447: LD_VAR 0 14
41451: PUSH
41452: LD_INT 1
41454: PLUS
41455: PPUSH
41456: LD_INT 3
41458: PPUSH
41459: CALL_OW 1
41463: ST_TO_ADDR
// if missile < 2 then
41464: LD_VAR 0 14
41468: PUSH
41469: LD_INT 2
41471: LESS
41472: IFFALSE 41476
// exit ;
41474: GO 41698
// x := GetX ( enemy ) ;
41476: LD_ADDR_VAR 0 4
41480: PUSH
41481: LD_VAR 0 10
41485: PPUSH
41486: CALL_OW 250
41490: ST_TO_ADDR
// y := GetY ( enemy ) ;
41491: LD_ADDR_VAR 0 5
41495: PUSH
41496: LD_VAR 0 10
41500: PPUSH
41501: CALL_OW 251
41505: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41506: LD_ADDR_VAR 0 6
41510: PUSH
41511: LD_VAR 0 4
41515: PUSH
41516: LD_INT 1
41518: NEG
41519: PPUSH
41520: LD_INT 1
41522: PPUSH
41523: CALL_OW 12
41527: PLUS
41528: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41529: LD_ADDR_VAR 0 7
41533: PUSH
41534: LD_VAR 0 5
41538: PUSH
41539: LD_INT 1
41541: NEG
41542: PPUSH
41543: LD_INT 1
41545: PPUSH
41546: CALL_OW 12
41550: PLUS
41551: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41552: LD_VAR 0 6
41556: PPUSH
41557: LD_VAR 0 7
41561: PPUSH
41562: CALL_OW 488
41566: NOT
41567: IFFALSE 41589
// begin _x := x ;
41569: LD_ADDR_VAR 0 6
41573: PUSH
41574: LD_VAR 0 4
41578: ST_TO_ADDR
// _y := y ;
41579: LD_ADDR_VAR 0 7
41583: PUSH
41584: LD_VAR 0 5
41588: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41589: LD_ADDR_VAR 0 3
41593: PUSH
41594: LD_INT 1
41596: PPUSH
41597: LD_VAR 0 14
41601: PPUSH
41602: CALL_OW 12
41606: ST_TO_ADDR
// case i of 1 :
41607: LD_VAR 0 3
41611: PUSH
41612: LD_INT 1
41614: DOUBLE
41615: EQUAL
41616: IFTRUE 41620
41618: GO 41637
41620: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41621: LD_VAR 0 1
41625: PPUSH
41626: LD_VAR 0 10
41630: PPUSH
41631: CALL_OW 115
41635: GO 41698
41637: LD_INT 2
41639: DOUBLE
41640: EQUAL
41641: IFTRUE 41645
41643: GO 41667
41645: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41646: LD_VAR 0 1
41650: PPUSH
41651: LD_VAR 0 6
41655: PPUSH
41656: LD_VAR 0 7
41660: PPUSH
41661: CALL_OW 153
41665: GO 41698
41667: LD_INT 3
41669: DOUBLE
41670: EQUAL
41671: IFTRUE 41675
41673: GO 41697
41675: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41676: LD_VAR 0 1
41680: PPUSH
41681: LD_VAR 0 6
41685: PPUSH
41686: LD_VAR 0 7
41690: PPUSH
41691: CALL_OW 154
41695: GO 41698
41697: POP
// end ;
41698: LD_VAR 0 2
41702: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41703: LD_INT 0
41705: PPUSH
41706: PPUSH
41707: PPUSH
41708: PPUSH
41709: PPUSH
41710: PPUSH
// if not unit or not building then
41711: LD_VAR 0 1
41715: NOT
41716: PUSH
41717: LD_VAR 0 2
41721: NOT
41722: OR
41723: IFFALSE 41727
// exit ;
41725: GO 41885
// x := GetX ( building ) ;
41727: LD_ADDR_VAR 0 5
41731: PUSH
41732: LD_VAR 0 2
41736: PPUSH
41737: CALL_OW 250
41741: ST_TO_ADDR
// y := GetY ( building ) ;
41742: LD_ADDR_VAR 0 6
41746: PUSH
41747: LD_VAR 0 2
41751: PPUSH
41752: CALL_OW 251
41756: ST_TO_ADDR
// for i = 0 to 5 do
41757: LD_ADDR_VAR 0 4
41761: PUSH
41762: DOUBLE
41763: LD_INT 0
41765: DEC
41766: ST_TO_ADDR
41767: LD_INT 5
41769: PUSH
41770: FOR_TO
41771: IFFALSE 41883
// begin _x := ShiftX ( x , i , 3 ) ;
41773: LD_ADDR_VAR 0 7
41777: PUSH
41778: LD_VAR 0 5
41782: PPUSH
41783: LD_VAR 0 4
41787: PPUSH
41788: LD_INT 3
41790: PPUSH
41791: CALL_OW 272
41795: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41796: LD_ADDR_VAR 0 8
41800: PUSH
41801: LD_VAR 0 6
41805: PPUSH
41806: LD_VAR 0 4
41810: PPUSH
41811: LD_INT 3
41813: PPUSH
41814: CALL_OW 273
41818: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41819: LD_VAR 0 7
41823: PPUSH
41824: LD_VAR 0 8
41828: PPUSH
41829: CALL_OW 488
41833: NOT
41834: IFFALSE 41838
// continue ;
41836: GO 41770
// if HexInfo ( _x , _y ) = 0 then
41838: LD_VAR 0 7
41842: PPUSH
41843: LD_VAR 0 8
41847: PPUSH
41848: CALL_OW 428
41852: PUSH
41853: LD_INT 0
41855: EQUAL
41856: IFFALSE 41881
// begin ComMoveXY ( unit , _x , _y ) ;
41858: LD_VAR 0 1
41862: PPUSH
41863: LD_VAR 0 7
41867: PPUSH
41868: LD_VAR 0 8
41872: PPUSH
41873: CALL_OW 111
// exit ;
41877: POP
41878: POP
41879: GO 41885
// end ; end ;
41881: GO 41770
41883: POP
41884: POP
// end ;
41885: LD_VAR 0 3
41889: RET
// export function ScanBase ( side , base_area ) ; begin
41890: LD_INT 0
41892: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41893: LD_ADDR_VAR 0 3
41897: PUSH
41898: LD_VAR 0 2
41902: PPUSH
41903: LD_INT 81
41905: PUSH
41906: LD_VAR 0 1
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PPUSH
41915: CALL_OW 70
41919: ST_TO_ADDR
// end ;
41920: LD_VAR 0 3
41924: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41925: LD_INT 0
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
// result := false ;
41931: LD_ADDR_VAR 0 2
41935: PUSH
41936: LD_INT 0
41938: ST_TO_ADDR
// side := GetSide ( unit ) ;
41939: LD_ADDR_VAR 0 3
41943: PUSH
41944: LD_VAR 0 1
41948: PPUSH
41949: CALL_OW 255
41953: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41954: LD_ADDR_VAR 0 4
41958: PUSH
41959: LD_VAR 0 1
41963: PPUSH
41964: CALL_OW 248
41968: ST_TO_ADDR
// case nat of 1 :
41969: LD_VAR 0 4
41973: PUSH
41974: LD_INT 1
41976: DOUBLE
41977: EQUAL
41978: IFTRUE 41982
41980: GO 41993
41982: POP
// tech := tech_lassight ; 2 :
41983: LD_ADDR_VAR 0 5
41987: PUSH
41988: LD_INT 12
41990: ST_TO_ADDR
41991: GO 42032
41993: LD_INT 2
41995: DOUBLE
41996: EQUAL
41997: IFTRUE 42001
41999: GO 42012
42001: POP
// tech := tech_mortar ; 3 :
42002: LD_ADDR_VAR 0 5
42006: PUSH
42007: LD_INT 41
42009: ST_TO_ADDR
42010: GO 42032
42012: LD_INT 3
42014: DOUBLE
42015: EQUAL
42016: IFTRUE 42020
42018: GO 42031
42020: POP
// tech := tech_bazooka ; end ;
42021: LD_ADDR_VAR 0 5
42025: PUSH
42026: LD_INT 44
42028: ST_TO_ADDR
42029: GO 42032
42031: POP
// if Researched ( side , tech ) then
42032: LD_VAR 0 3
42036: PPUSH
42037: LD_VAR 0 5
42041: PPUSH
42042: CALL_OW 325
42046: IFFALSE 42073
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42048: LD_ADDR_VAR 0 2
42052: PUSH
42053: LD_INT 5
42055: PUSH
42056: LD_INT 8
42058: PUSH
42059: LD_INT 9
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: LIST
42066: PUSH
42067: LD_VAR 0 4
42071: ARRAY
42072: ST_TO_ADDR
// end ;
42073: LD_VAR 0 2
42077: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42078: LD_INT 0
42080: PPUSH
42081: PPUSH
42082: PPUSH
// if not mines then
42083: LD_VAR 0 2
42087: NOT
42088: IFFALSE 42092
// exit ;
42090: GO 42236
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42092: LD_ADDR_VAR 0 5
42096: PUSH
42097: LD_INT 81
42099: PUSH
42100: LD_VAR 0 1
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 3
42111: PUSH
42112: LD_INT 21
42114: PUSH
42115: LD_INT 3
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: EMPTY
42123: LIST
42124: LIST
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PPUSH
42130: CALL_OW 69
42134: ST_TO_ADDR
// for i in mines do
42135: LD_ADDR_VAR 0 4
42139: PUSH
42140: LD_VAR 0 2
42144: PUSH
42145: FOR_IN
42146: IFFALSE 42234
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42148: LD_VAR 0 4
42152: PUSH
42153: LD_INT 1
42155: ARRAY
42156: PPUSH
42157: LD_VAR 0 4
42161: PUSH
42162: LD_INT 2
42164: ARRAY
42165: PPUSH
42166: CALL_OW 458
42170: NOT
42171: IFFALSE 42175
// continue ;
42173: GO 42145
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42175: LD_VAR 0 4
42179: PUSH
42180: LD_INT 1
42182: ARRAY
42183: PPUSH
42184: LD_VAR 0 4
42188: PUSH
42189: LD_INT 2
42191: ARRAY
42192: PPUSH
42193: CALL_OW 428
42197: PUSH
42198: LD_VAR 0 5
42202: IN
42203: IFFALSE 42232
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42205: LD_VAR 0 4
42209: PUSH
42210: LD_INT 1
42212: ARRAY
42213: PPUSH
42214: LD_VAR 0 4
42218: PUSH
42219: LD_INT 2
42221: ARRAY
42222: PPUSH
42223: LD_VAR 0 1
42227: PPUSH
42228: CALL_OW 456
// end ;
42232: GO 42145
42234: POP
42235: POP
// end ;
42236: LD_VAR 0 3
42240: RET
// export function Count ( array ) ; begin
42241: LD_INT 0
42243: PPUSH
// result := array + 0 ;
42244: LD_ADDR_VAR 0 2
42248: PUSH
42249: LD_VAR 0 1
42253: PUSH
42254: LD_INT 0
42256: PLUS
42257: ST_TO_ADDR
// end ;
42258: LD_VAR 0 2
42262: RET
// export function IsEmpty ( building ) ; begin
42263: LD_INT 0
42265: PPUSH
// if not building then
42266: LD_VAR 0 1
42270: NOT
42271: IFFALSE 42275
// exit ;
42273: GO 42318
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42275: LD_ADDR_VAR 0 2
42279: PUSH
42280: LD_VAR 0 1
42284: PUSH
42285: LD_INT 22
42287: PUSH
42288: LD_VAR 0 1
42292: PPUSH
42293: CALL_OW 255
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: PUSH
42302: LD_INT 58
42304: PUSH
42305: EMPTY
42306: LIST
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PPUSH
42312: CALL_OW 69
42316: IN
42317: ST_TO_ADDR
// end ;
42318: LD_VAR 0 2
42322: RET
// export function IsNotFull ( building ) ; var places ; begin
42323: LD_INT 0
42325: PPUSH
42326: PPUSH
// if not building then
42327: LD_VAR 0 1
42331: NOT
42332: IFFALSE 42336
// exit ;
42334: GO 42364
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
42336: LD_ADDR_VAR 0 2
42340: PUSH
42341: LD_VAR 0 1
42345: PPUSH
42346: LD_INT 3
42348: PUSH
42349: LD_INT 62
42351: PUSH
42352: EMPTY
42353: LIST
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PPUSH
42359: CALL_OW 72
42363: ST_TO_ADDR
// end ;
42364: LD_VAR 0 2
42368: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
42369: LD_INT 0
42371: PPUSH
42372: PPUSH
42373: PPUSH
42374: PPUSH
// tmp := [ ] ;
42375: LD_ADDR_VAR 0 3
42379: PUSH
42380: EMPTY
42381: ST_TO_ADDR
// list := [ ] ;
42382: LD_ADDR_VAR 0 5
42386: PUSH
42387: EMPTY
42388: ST_TO_ADDR
// for i = 16 to 25 do
42389: LD_ADDR_VAR 0 4
42393: PUSH
42394: DOUBLE
42395: LD_INT 16
42397: DEC
42398: ST_TO_ADDR
42399: LD_INT 25
42401: PUSH
42402: FOR_TO
42403: IFFALSE 42476
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42405: LD_ADDR_VAR 0 3
42409: PUSH
42410: LD_VAR 0 3
42414: PUSH
42415: LD_INT 22
42417: PUSH
42418: LD_VAR 0 1
42422: PPUSH
42423: CALL_OW 255
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 91
42434: PUSH
42435: LD_VAR 0 1
42439: PUSH
42440: LD_INT 6
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: LIST
42447: PUSH
42448: LD_INT 30
42450: PUSH
42451: LD_VAR 0 4
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: LIST
42464: PUSH
42465: EMPTY
42466: LIST
42467: PPUSH
42468: CALL_OW 69
42472: ADD
42473: ST_TO_ADDR
42474: GO 42402
42476: POP
42477: POP
// for i = 1 to tmp do
42478: LD_ADDR_VAR 0 4
42482: PUSH
42483: DOUBLE
42484: LD_INT 1
42486: DEC
42487: ST_TO_ADDR
42488: LD_VAR 0 3
42492: PUSH
42493: FOR_TO
42494: IFFALSE 42582
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42496: LD_ADDR_VAR 0 5
42500: PUSH
42501: LD_VAR 0 5
42505: PUSH
42506: LD_VAR 0 3
42510: PUSH
42511: LD_VAR 0 4
42515: ARRAY
42516: PPUSH
42517: CALL_OW 266
42521: PUSH
42522: LD_VAR 0 3
42526: PUSH
42527: LD_VAR 0 4
42531: ARRAY
42532: PPUSH
42533: CALL_OW 250
42537: PUSH
42538: LD_VAR 0 3
42542: PUSH
42543: LD_VAR 0 4
42547: ARRAY
42548: PPUSH
42549: CALL_OW 251
42553: PUSH
42554: LD_VAR 0 3
42558: PUSH
42559: LD_VAR 0 4
42563: ARRAY
42564: PPUSH
42565: CALL_OW 254
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: PUSH
42576: EMPTY
42577: LIST
42578: ADD
42579: ST_TO_ADDR
42580: GO 42493
42582: POP
42583: POP
// result := list ;
42584: LD_ADDR_VAR 0 2
42588: PUSH
42589: LD_VAR 0 5
42593: ST_TO_ADDR
// end ;
42594: LD_VAR 0 2
42598: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42599: LD_INT 0
42601: PPUSH
42602: PPUSH
42603: PPUSH
42604: PPUSH
42605: PPUSH
42606: PPUSH
42607: PPUSH
// if not factory then
42608: LD_VAR 0 1
42612: NOT
42613: IFFALSE 42617
// exit ;
42615: GO 43210
// if control = control_apeman then
42617: LD_VAR 0 4
42621: PUSH
42622: LD_INT 5
42624: EQUAL
42625: IFFALSE 42734
// begin tmp := UnitsInside ( factory ) ;
42627: LD_ADDR_VAR 0 8
42631: PUSH
42632: LD_VAR 0 1
42636: PPUSH
42637: CALL_OW 313
42641: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42642: LD_VAR 0 8
42646: PPUSH
42647: LD_INT 25
42649: PUSH
42650: LD_INT 12
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PPUSH
42657: CALL_OW 72
42661: NOT
42662: IFFALSE 42672
// control := control_manual ;
42664: LD_ADDR_VAR 0 4
42668: PUSH
42669: LD_INT 1
42671: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42672: LD_ADDR_VAR 0 8
42676: PUSH
42677: LD_VAR 0 1
42681: PPUSH
42682: CALL 42369 0 1
42686: ST_TO_ADDR
// if tmp then
42687: LD_VAR 0 8
42691: IFFALSE 42734
// begin for i in tmp do
42693: LD_ADDR_VAR 0 7
42697: PUSH
42698: LD_VAR 0 8
42702: PUSH
42703: FOR_IN
42704: IFFALSE 42732
// if i [ 1 ] = b_ext_radio then
42706: LD_VAR 0 7
42710: PUSH
42711: LD_INT 1
42713: ARRAY
42714: PUSH
42715: LD_INT 22
42717: EQUAL
42718: IFFALSE 42730
// begin control := control_remote ;
42720: LD_ADDR_VAR 0 4
42724: PUSH
42725: LD_INT 2
42727: ST_TO_ADDR
// break ;
42728: GO 42732
// end ;
42730: GO 42703
42732: POP
42733: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42734: LD_VAR 0 1
42738: PPUSH
42739: LD_VAR 0 2
42743: PPUSH
42744: LD_VAR 0 3
42748: PPUSH
42749: LD_VAR 0 4
42753: PPUSH
42754: LD_VAR 0 5
42758: PPUSH
42759: CALL_OW 448
42763: IFFALSE 42798
// begin result := [ chassis , engine , control , weapon ] ;
42765: LD_ADDR_VAR 0 6
42769: PUSH
42770: LD_VAR 0 2
42774: PUSH
42775: LD_VAR 0 3
42779: PUSH
42780: LD_VAR 0 4
42784: PUSH
42785: LD_VAR 0 5
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: ST_TO_ADDR
// exit ;
42796: GO 43210
// end ; _chassis := AvailableChassisList ( factory ) ;
42798: LD_ADDR_VAR 0 9
42802: PUSH
42803: LD_VAR 0 1
42807: PPUSH
42808: CALL_OW 475
42812: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42813: LD_ADDR_VAR 0 11
42817: PUSH
42818: LD_VAR 0 1
42822: PPUSH
42823: CALL_OW 476
42827: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42828: LD_ADDR_VAR 0 12
42832: PUSH
42833: LD_VAR 0 1
42837: PPUSH
42838: CALL_OW 477
42842: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42843: LD_ADDR_VAR 0 10
42847: PUSH
42848: LD_VAR 0 1
42852: PPUSH
42853: CALL_OW 478
42857: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42858: LD_VAR 0 9
42862: NOT
42863: PUSH
42864: LD_VAR 0 11
42868: NOT
42869: OR
42870: PUSH
42871: LD_VAR 0 12
42875: NOT
42876: OR
42877: PUSH
42878: LD_VAR 0 10
42882: NOT
42883: OR
42884: IFFALSE 42919
// begin result := [ chassis , engine , control , weapon ] ;
42886: LD_ADDR_VAR 0 6
42890: PUSH
42891: LD_VAR 0 2
42895: PUSH
42896: LD_VAR 0 3
42900: PUSH
42901: LD_VAR 0 4
42905: PUSH
42906: LD_VAR 0 5
42910: PUSH
42911: EMPTY
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: ST_TO_ADDR
// exit ;
42917: GO 43210
// end ; if not chassis in _chassis then
42919: LD_VAR 0 2
42923: PUSH
42924: LD_VAR 0 9
42928: IN
42929: NOT
42930: IFFALSE 42956
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42932: LD_ADDR_VAR 0 2
42936: PUSH
42937: LD_VAR 0 9
42941: PUSH
42942: LD_INT 1
42944: PPUSH
42945: LD_VAR 0 9
42949: PPUSH
42950: CALL_OW 12
42954: ARRAY
42955: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42956: LD_VAR 0 2
42960: PPUSH
42961: LD_VAR 0 3
42965: PPUSH
42966: CALL 43215 0 2
42970: NOT
42971: IFFALSE 43030
// repeat engine := _engine [ 1 ] ;
42973: LD_ADDR_VAR 0 3
42977: PUSH
42978: LD_VAR 0 11
42982: PUSH
42983: LD_INT 1
42985: ARRAY
42986: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42987: LD_ADDR_VAR 0 11
42991: PUSH
42992: LD_VAR 0 11
42996: PPUSH
42997: LD_INT 1
42999: PPUSH
43000: CALL_OW 3
43004: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43005: LD_VAR 0 2
43009: PPUSH
43010: LD_VAR 0 3
43014: PPUSH
43015: CALL 43215 0 2
43019: PUSH
43020: LD_VAR 0 11
43024: PUSH
43025: EMPTY
43026: EQUAL
43027: OR
43028: IFFALSE 42973
// if not control in _control then
43030: LD_VAR 0 4
43034: PUSH
43035: LD_VAR 0 12
43039: IN
43040: NOT
43041: IFFALSE 43067
// control := _control [ rand ( 1 , _control ) ] ;
43043: LD_ADDR_VAR 0 4
43047: PUSH
43048: LD_VAR 0 12
43052: PUSH
43053: LD_INT 1
43055: PPUSH
43056: LD_VAR 0 12
43060: PPUSH
43061: CALL_OW 12
43065: ARRAY
43066: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43067: LD_VAR 0 2
43071: PPUSH
43072: LD_VAR 0 5
43076: PPUSH
43077: CALL 43435 0 2
43081: NOT
43082: IFFALSE 43141
// repeat weapon := _weapon [ 1 ] ;
43084: LD_ADDR_VAR 0 5
43088: PUSH
43089: LD_VAR 0 10
43093: PUSH
43094: LD_INT 1
43096: ARRAY
43097: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43098: LD_ADDR_VAR 0 10
43102: PUSH
43103: LD_VAR 0 10
43107: PPUSH
43108: LD_INT 1
43110: PPUSH
43111: CALL_OW 3
43115: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43116: LD_VAR 0 2
43120: PPUSH
43121: LD_VAR 0 5
43125: PPUSH
43126: CALL 43435 0 2
43130: PUSH
43131: LD_VAR 0 10
43135: PUSH
43136: EMPTY
43137: EQUAL
43138: OR
43139: IFFALSE 43084
// result := [ ] ;
43141: LD_ADDR_VAR 0 6
43145: PUSH
43146: EMPTY
43147: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43148: LD_VAR 0 1
43152: PPUSH
43153: LD_VAR 0 2
43157: PPUSH
43158: LD_VAR 0 3
43162: PPUSH
43163: LD_VAR 0 4
43167: PPUSH
43168: LD_VAR 0 5
43172: PPUSH
43173: CALL_OW 448
43177: IFFALSE 43210
// result := [ chassis , engine , control , weapon ] ;
43179: LD_ADDR_VAR 0 6
43183: PUSH
43184: LD_VAR 0 2
43188: PUSH
43189: LD_VAR 0 3
43193: PUSH
43194: LD_VAR 0 4
43198: PUSH
43199: LD_VAR 0 5
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: ST_TO_ADDR
// end ;
43210: LD_VAR 0 6
43214: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43215: LD_INT 0
43217: PPUSH
// if not chassis or not engine then
43218: LD_VAR 0 1
43222: NOT
43223: PUSH
43224: LD_VAR 0 2
43228: NOT
43229: OR
43230: IFFALSE 43234
// exit ;
43232: GO 43430
// case engine of engine_solar :
43234: LD_VAR 0 2
43238: PUSH
43239: LD_INT 2
43241: DOUBLE
43242: EQUAL
43243: IFTRUE 43247
43245: GO 43285
43247: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43248: LD_ADDR_VAR 0 3
43252: PUSH
43253: LD_INT 11
43255: PUSH
43256: LD_INT 12
43258: PUSH
43259: LD_INT 13
43261: PUSH
43262: LD_INT 14
43264: PUSH
43265: LD_INT 1
43267: PUSH
43268: LD_INT 2
43270: PUSH
43271: LD_INT 3
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: LIST
43281: LIST
43282: ST_TO_ADDR
43283: GO 43414
43285: LD_INT 1
43287: DOUBLE
43288: EQUAL
43289: IFTRUE 43293
43291: GO 43355
43293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43294: LD_ADDR_VAR 0 3
43298: PUSH
43299: LD_INT 11
43301: PUSH
43302: LD_INT 12
43304: PUSH
43305: LD_INT 13
43307: PUSH
43308: LD_INT 14
43310: PUSH
43311: LD_INT 1
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 3
43319: PUSH
43320: LD_INT 4
43322: PUSH
43323: LD_INT 5
43325: PUSH
43326: LD_INT 21
43328: PUSH
43329: LD_INT 23
43331: PUSH
43332: LD_INT 22
43334: PUSH
43335: LD_INT 24
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: ST_TO_ADDR
43353: GO 43414
43355: LD_INT 3
43357: DOUBLE
43358: EQUAL
43359: IFTRUE 43363
43361: GO 43413
43363: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43364: LD_ADDR_VAR 0 3
43368: PUSH
43369: LD_INT 13
43371: PUSH
43372: LD_INT 14
43374: PUSH
43375: LD_INT 2
43377: PUSH
43378: LD_INT 3
43380: PUSH
43381: LD_INT 4
43383: PUSH
43384: LD_INT 5
43386: PUSH
43387: LD_INT 21
43389: PUSH
43390: LD_INT 22
43392: PUSH
43393: LD_INT 23
43395: PUSH
43396: LD_INT 24
43398: PUSH
43399: EMPTY
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: ST_TO_ADDR
43411: GO 43414
43413: POP
// result := ( chassis in result ) ;
43414: LD_ADDR_VAR 0 3
43418: PUSH
43419: LD_VAR 0 1
43423: PUSH
43424: LD_VAR 0 3
43428: IN
43429: ST_TO_ADDR
// end ;
43430: LD_VAR 0 3
43434: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43435: LD_INT 0
43437: PPUSH
// if not chassis or not weapon then
43438: LD_VAR 0 1
43442: NOT
43443: PUSH
43444: LD_VAR 0 2
43448: NOT
43449: OR
43450: IFFALSE 43454
// exit ;
43452: GO 44514
// case weapon of us_machine_gun :
43454: LD_VAR 0 2
43458: PUSH
43459: LD_INT 2
43461: DOUBLE
43462: EQUAL
43463: IFTRUE 43467
43465: GO 43497
43467: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43468: LD_ADDR_VAR 0 3
43472: PUSH
43473: LD_INT 1
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: LD_INT 3
43481: PUSH
43482: LD_INT 4
43484: PUSH
43485: LD_INT 5
43487: PUSH
43488: EMPTY
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: ST_TO_ADDR
43495: GO 44498
43497: LD_INT 3
43499: DOUBLE
43500: EQUAL
43501: IFTRUE 43505
43503: GO 43535
43505: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43506: LD_ADDR_VAR 0 3
43510: PUSH
43511: LD_INT 1
43513: PUSH
43514: LD_INT 2
43516: PUSH
43517: LD_INT 3
43519: PUSH
43520: LD_INT 4
43522: PUSH
43523: LD_INT 5
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: ST_TO_ADDR
43533: GO 44498
43535: LD_INT 11
43537: DOUBLE
43538: EQUAL
43539: IFTRUE 43543
43541: GO 43573
43543: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43544: LD_ADDR_VAR 0 3
43548: PUSH
43549: LD_INT 1
43551: PUSH
43552: LD_INT 2
43554: PUSH
43555: LD_INT 3
43557: PUSH
43558: LD_INT 4
43560: PUSH
43561: LD_INT 5
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: ST_TO_ADDR
43571: GO 44498
43573: LD_INT 4
43575: DOUBLE
43576: EQUAL
43577: IFTRUE 43581
43579: GO 43607
43581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43582: LD_ADDR_VAR 0 3
43586: PUSH
43587: LD_INT 2
43589: PUSH
43590: LD_INT 3
43592: PUSH
43593: LD_INT 4
43595: PUSH
43596: LD_INT 5
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: ST_TO_ADDR
43605: GO 44498
43607: LD_INT 5
43609: DOUBLE
43610: EQUAL
43611: IFTRUE 43615
43613: GO 43641
43615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43616: LD_ADDR_VAR 0 3
43620: PUSH
43621: LD_INT 2
43623: PUSH
43624: LD_INT 3
43626: PUSH
43627: LD_INT 4
43629: PUSH
43630: LD_INT 5
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: LIST
43637: LIST
43638: ST_TO_ADDR
43639: GO 44498
43641: LD_INT 9
43643: DOUBLE
43644: EQUAL
43645: IFTRUE 43649
43647: GO 43675
43649: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43650: LD_ADDR_VAR 0 3
43654: PUSH
43655: LD_INT 2
43657: PUSH
43658: LD_INT 3
43660: PUSH
43661: LD_INT 4
43663: PUSH
43664: LD_INT 5
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: ST_TO_ADDR
43673: GO 44498
43675: LD_INT 7
43677: DOUBLE
43678: EQUAL
43679: IFTRUE 43683
43681: GO 43709
43683: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43684: LD_ADDR_VAR 0 3
43688: PUSH
43689: LD_INT 2
43691: PUSH
43692: LD_INT 3
43694: PUSH
43695: LD_INT 4
43697: PUSH
43698: LD_INT 5
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: ST_TO_ADDR
43707: GO 44498
43709: LD_INT 12
43711: DOUBLE
43712: EQUAL
43713: IFTRUE 43717
43715: GO 43743
43717: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43718: LD_ADDR_VAR 0 3
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: LD_INT 3
43728: PUSH
43729: LD_INT 4
43731: PUSH
43732: LD_INT 5
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: ST_TO_ADDR
43741: GO 44498
43743: LD_INT 13
43745: DOUBLE
43746: EQUAL
43747: IFTRUE 43751
43749: GO 43777
43751: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43752: LD_ADDR_VAR 0 3
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: LD_INT 3
43762: PUSH
43763: LD_INT 4
43765: PUSH
43766: LD_INT 5
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: ST_TO_ADDR
43775: GO 44498
43777: LD_INT 14
43779: DOUBLE
43780: EQUAL
43781: IFTRUE 43785
43783: GO 43803
43785: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43786: LD_ADDR_VAR 0 3
43790: PUSH
43791: LD_INT 4
43793: PUSH
43794: LD_INT 5
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: ST_TO_ADDR
43801: GO 44498
43803: LD_INT 6
43805: DOUBLE
43806: EQUAL
43807: IFTRUE 43811
43809: GO 43829
43811: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43812: LD_ADDR_VAR 0 3
43816: PUSH
43817: LD_INT 4
43819: PUSH
43820: LD_INT 5
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: ST_TO_ADDR
43827: GO 44498
43829: LD_INT 10
43831: DOUBLE
43832: EQUAL
43833: IFTRUE 43837
43835: GO 43855
43837: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43838: LD_ADDR_VAR 0 3
43842: PUSH
43843: LD_INT 4
43845: PUSH
43846: LD_INT 5
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: ST_TO_ADDR
43853: GO 44498
43855: LD_INT 22
43857: DOUBLE
43858: EQUAL
43859: IFTRUE 43863
43861: GO 43889
43863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43864: LD_ADDR_VAR 0 3
43868: PUSH
43869: LD_INT 11
43871: PUSH
43872: LD_INT 12
43874: PUSH
43875: LD_INT 13
43877: PUSH
43878: LD_INT 14
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: ST_TO_ADDR
43887: GO 44498
43889: LD_INT 23
43891: DOUBLE
43892: EQUAL
43893: IFTRUE 43897
43895: GO 43923
43897: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43898: LD_ADDR_VAR 0 3
43902: PUSH
43903: LD_INT 11
43905: PUSH
43906: LD_INT 12
43908: PUSH
43909: LD_INT 13
43911: PUSH
43912: LD_INT 14
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: ST_TO_ADDR
43921: GO 44498
43923: LD_INT 24
43925: DOUBLE
43926: EQUAL
43927: IFTRUE 43931
43929: GO 43957
43931: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43932: LD_ADDR_VAR 0 3
43936: PUSH
43937: LD_INT 11
43939: PUSH
43940: LD_INT 12
43942: PUSH
43943: LD_INT 13
43945: PUSH
43946: LD_INT 14
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: ST_TO_ADDR
43955: GO 44498
43957: LD_INT 30
43959: DOUBLE
43960: EQUAL
43961: IFTRUE 43965
43963: GO 43991
43965: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43966: LD_ADDR_VAR 0 3
43970: PUSH
43971: LD_INT 11
43973: PUSH
43974: LD_INT 12
43976: PUSH
43977: LD_INT 13
43979: PUSH
43980: LD_INT 14
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: LIST
43987: LIST
43988: ST_TO_ADDR
43989: GO 44498
43991: LD_INT 25
43993: DOUBLE
43994: EQUAL
43995: IFTRUE 43999
43997: GO 44017
43999: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44000: LD_ADDR_VAR 0 3
44004: PUSH
44005: LD_INT 13
44007: PUSH
44008: LD_INT 14
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: ST_TO_ADDR
44015: GO 44498
44017: LD_INT 27
44019: DOUBLE
44020: EQUAL
44021: IFTRUE 44025
44023: GO 44043
44025: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44026: LD_ADDR_VAR 0 3
44030: PUSH
44031: LD_INT 13
44033: PUSH
44034: LD_INT 14
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: ST_TO_ADDR
44041: GO 44498
44043: LD_INT 92
44045: DOUBLE
44046: EQUAL
44047: IFTRUE 44051
44049: GO 44077
44051: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44052: LD_ADDR_VAR 0 3
44056: PUSH
44057: LD_INT 11
44059: PUSH
44060: LD_INT 12
44062: PUSH
44063: LD_INT 13
44065: PUSH
44066: LD_INT 14
44068: PUSH
44069: EMPTY
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: ST_TO_ADDR
44075: GO 44498
44077: LD_INT 28
44079: DOUBLE
44080: EQUAL
44081: IFTRUE 44085
44083: GO 44103
44085: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44086: LD_ADDR_VAR 0 3
44090: PUSH
44091: LD_INT 13
44093: PUSH
44094: LD_INT 14
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: ST_TO_ADDR
44101: GO 44498
44103: LD_INT 29
44105: DOUBLE
44106: EQUAL
44107: IFTRUE 44111
44109: GO 44129
44111: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44112: LD_ADDR_VAR 0 3
44116: PUSH
44117: LD_INT 13
44119: PUSH
44120: LD_INT 14
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: ST_TO_ADDR
44127: GO 44498
44129: LD_INT 31
44131: DOUBLE
44132: EQUAL
44133: IFTRUE 44137
44135: GO 44155
44137: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44138: LD_ADDR_VAR 0 3
44142: PUSH
44143: LD_INT 13
44145: PUSH
44146: LD_INT 14
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: ST_TO_ADDR
44153: GO 44498
44155: LD_INT 26
44157: DOUBLE
44158: EQUAL
44159: IFTRUE 44163
44161: GO 44181
44163: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44164: LD_ADDR_VAR 0 3
44168: PUSH
44169: LD_INT 13
44171: PUSH
44172: LD_INT 14
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: ST_TO_ADDR
44179: GO 44498
44181: LD_INT 42
44183: DOUBLE
44184: EQUAL
44185: IFTRUE 44189
44187: GO 44215
44189: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44190: LD_ADDR_VAR 0 3
44194: PUSH
44195: LD_INT 21
44197: PUSH
44198: LD_INT 22
44200: PUSH
44201: LD_INT 23
44203: PUSH
44204: LD_INT 24
44206: PUSH
44207: EMPTY
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: ST_TO_ADDR
44213: GO 44498
44215: LD_INT 43
44217: DOUBLE
44218: EQUAL
44219: IFTRUE 44223
44221: GO 44249
44223: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44224: LD_ADDR_VAR 0 3
44228: PUSH
44229: LD_INT 21
44231: PUSH
44232: LD_INT 22
44234: PUSH
44235: LD_INT 23
44237: PUSH
44238: LD_INT 24
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: ST_TO_ADDR
44247: GO 44498
44249: LD_INT 44
44251: DOUBLE
44252: EQUAL
44253: IFTRUE 44257
44255: GO 44283
44257: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44258: LD_ADDR_VAR 0 3
44262: PUSH
44263: LD_INT 21
44265: PUSH
44266: LD_INT 22
44268: PUSH
44269: LD_INT 23
44271: PUSH
44272: LD_INT 24
44274: PUSH
44275: EMPTY
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: ST_TO_ADDR
44281: GO 44498
44283: LD_INT 45
44285: DOUBLE
44286: EQUAL
44287: IFTRUE 44291
44289: GO 44317
44291: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44292: LD_ADDR_VAR 0 3
44296: PUSH
44297: LD_INT 21
44299: PUSH
44300: LD_INT 22
44302: PUSH
44303: LD_INT 23
44305: PUSH
44306: LD_INT 24
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: ST_TO_ADDR
44315: GO 44498
44317: LD_INT 49
44319: DOUBLE
44320: EQUAL
44321: IFTRUE 44325
44323: GO 44351
44325: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
44326: LD_ADDR_VAR 0 3
44330: PUSH
44331: LD_INT 21
44333: PUSH
44334: LD_INT 22
44336: PUSH
44337: LD_INT 23
44339: PUSH
44340: LD_INT 24
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: ST_TO_ADDR
44349: GO 44498
44351: LD_INT 51
44353: DOUBLE
44354: EQUAL
44355: IFTRUE 44359
44357: GO 44385
44359: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
44360: LD_ADDR_VAR 0 3
44364: PUSH
44365: LD_INT 21
44367: PUSH
44368: LD_INT 22
44370: PUSH
44371: LD_INT 23
44373: PUSH
44374: LD_INT 24
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: ST_TO_ADDR
44383: GO 44498
44385: LD_INT 52
44387: DOUBLE
44388: EQUAL
44389: IFTRUE 44393
44391: GO 44419
44393: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44394: LD_ADDR_VAR 0 3
44398: PUSH
44399: LD_INT 21
44401: PUSH
44402: LD_INT 22
44404: PUSH
44405: LD_INT 23
44407: PUSH
44408: LD_INT 24
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: ST_TO_ADDR
44417: GO 44498
44419: LD_INT 53
44421: DOUBLE
44422: EQUAL
44423: IFTRUE 44427
44425: GO 44445
44427: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44428: LD_ADDR_VAR 0 3
44432: PUSH
44433: LD_INT 23
44435: PUSH
44436: LD_INT 24
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: ST_TO_ADDR
44443: GO 44498
44445: LD_INT 46
44447: DOUBLE
44448: EQUAL
44449: IFTRUE 44453
44451: GO 44471
44453: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44454: LD_ADDR_VAR 0 3
44458: PUSH
44459: LD_INT 23
44461: PUSH
44462: LD_INT 24
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: ST_TO_ADDR
44469: GO 44498
44471: LD_INT 47
44473: DOUBLE
44474: EQUAL
44475: IFTRUE 44479
44477: GO 44497
44479: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44480: LD_ADDR_VAR 0 3
44484: PUSH
44485: LD_INT 23
44487: PUSH
44488: LD_INT 24
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: ST_TO_ADDR
44495: GO 44498
44497: POP
// result := ( chassis in result ) ;
44498: LD_ADDR_VAR 0 3
44502: PUSH
44503: LD_VAR 0 1
44507: PUSH
44508: LD_VAR 0 3
44512: IN
44513: ST_TO_ADDR
// end ;
44514: LD_VAR 0 3
44518: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44519: LD_INT 0
44521: PPUSH
44522: PPUSH
44523: PPUSH
44524: PPUSH
44525: PPUSH
44526: PPUSH
44527: PPUSH
// result := array ;
44528: LD_ADDR_VAR 0 5
44532: PUSH
44533: LD_VAR 0 1
44537: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44538: LD_VAR 0 1
44542: NOT
44543: PUSH
44544: LD_VAR 0 2
44548: NOT
44549: OR
44550: PUSH
44551: LD_VAR 0 3
44555: NOT
44556: OR
44557: PUSH
44558: LD_VAR 0 2
44562: PUSH
44563: LD_VAR 0 1
44567: GREATER
44568: OR
44569: PUSH
44570: LD_VAR 0 3
44574: PUSH
44575: LD_VAR 0 1
44579: GREATER
44580: OR
44581: IFFALSE 44585
// exit ;
44583: GO 44881
// if direction then
44585: LD_VAR 0 4
44589: IFFALSE 44653
// begin d := 1 ;
44591: LD_ADDR_VAR 0 9
44595: PUSH
44596: LD_INT 1
44598: ST_TO_ADDR
// if i_from > i_to then
44599: LD_VAR 0 2
44603: PUSH
44604: LD_VAR 0 3
44608: GREATER
44609: IFFALSE 44635
// length := ( array - i_from ) + i_to else
44611: LD_ADDR_VAR 0 11
44615: PUSH
44616: LD_VAR 0 1
44620: PUSH
44621: LD_VAR 0 2
44625: MINUS
44626: PUSH
44627: LD_VAR 0 3
44631: PLUS
44632: ST_TO_ADDR
44633: GO 44651
// length := i_to - i_from ;
44635: LD_ADDR_VAR 0 11
44639: PUSH
44640: LD_VAR 0 3
44644: PUSH
44645: LD_VAR 0 2
44649: MINUS
44650: ST_TO_ADDR
// end else
44651: GO 44714
// begin d := - 1 ;
44653: LD_ADDR_VAR 0 9
44657: PUSH
44658: LD_INT 1
44660: NEG
44661: ST_TO_ADDR
// if i_from > i_to then
44662: LD_VAR 0 2
44666: PUSH
44667: LD_VAR 0 3
44671: GREATER
44672: IFFALSE 44692
// length := i_from - i_to else
44674: LD_ADDR_VAR 0 11
44678: PUSH
44679: LD_VAR 0 2
44683: PUSH
44684: LD_VAR 0 3
44688: MINUS
44689: ST_TO_ADDR
44690: GO 44714
// length := ( array - i_to ) + i_from ;
44692: LD_ADDR_VAR 0 11
44696: PUSH
44697: LD_VAR 0 1
44701: PUSH
44702: LD_VAR 0 3
44706: MINUS
44707: PUSH
44708: LD_VAR 0 2
44712: PLUS
44713: ST_TO_ADDR
// end ; if not length then
44714: LD_VAR 0 11
44718: NOT
44719: IFFALSE 44723
// exit ;
44721: GO 44881
// tmp := array ;
44723: LD_ADDR_VAR 0 10
44727: PUSH
44728: LD_VAR 0 1
44732: ST_TO_ADDR
// for i = 1 to length do
44733: LD_ADDR_VAR 0 6
44737: PUSH
44738: DOUBLE
44739: LD_INT 1
44741: DEC
44742: ST_TO_ADDR
44743: LD_VAR 0 11
44747: PUSH
44748: FOR_TO
44749: IFFALSE 44869
// begin for j = 1 to array do
44751: LD_ADDR_VAR 0 7
44755: PUSH
44756: DOUBLE
44757: LD_INT 1
44759: DEC
44760: ST_TO_ADDR
44761: LD_VAR 0 1
44765: PUSH
44766: FOR_TO
44767: IFFALSE 44855
// begin k := j + d ;
44769: LD_ADDR_VAR 0 8
44773: PUSH
44774: LD_VAR 0 7
44778: PUSH
44779: LD_VAR 0 9
44783: PLUS
44784: ST_TO_ADDR
// if k > array then
44785: LD_VAR 0 8
44789: PUSH
44790: LD_VAR 0 1
44794: GREATER
44795: IFFALSE 44805
// k := 1 ;
44797: LD_ADDR_VAR 0 8
44801: PUSH
44802: LD_INT 1
44804: ST_TO_ADDR
// if not k then
44805: LD_VAR 0 8
44809: NOT
44810: IFFALSE 44822
// k := array ;
44812: LD_ADDR_VAR 0 8
44816: PUSH
44817: LD_VAR 0 1
44821: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44822: LD_ADDR_VAR 0 10
44826: PUSH
44827: LD_VAR 0 10
44831: PPUSH
44832: LD_VAR 0 8
44836: PPUSH
44837: LD_VAR 0 1
44841: PUSH
44842: LD_VAR 0 7
44846: ARRAY
44847: PPUSH
44848: CALL_OW 1
44852: ST_TO_ADDR
// end ;
44853: GO 44766
44855: POP
44856: POP
// array := tmp ;
44857: LD_ADDR_VAR 0 1
44861: PUSH
44862: LD_VAR 0 10
44866: ST_TO_ADDR
// end ;
44867: GO 44748
44869: POP
44870: POP
// result := array ;
44871: LD_ADDR_VAR 0 5
44875: PUSH
44876: LD_VAR 0 1
44880: ST_TO_ADDR
// end ;
44881: LD_VAR 0 5
44885: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44886: LD_INT 0
44888: PPUSH
44889: PPUSH
// result := 0 ;
44890: LD_ADDR_VAR 0 3
44894: PUSH
44895: LD_INT 0
44897: ST_TO_ADDR
// if not array or not value in array then
44898: LD_VAR 0 1
44902: NOT
44903: PUSH
44904: LD_VAR 0 2
44908: PUSH
44909: LD_VAR 0 1
44913: IN
44914: NOT
44915: OR
44916: IFFALSE 44920
// exit ;
44918: GO 44974
// for i = 1 to array do
44920: LD_ADDR_VAR 0 4
44924: PUSH
44925: DOUBLE
44926: LD_INT 1
44928: DEC
44929: ST_TO_ADDR
44930: LD_VAR 0 1
44934: PUSH
44935: FOR_TO
44936: IFFALSE 44972
// if value = array [ i ] then
44938: LD_VAR 0 2
44942: PUSH
44943: LD_VAR 0 1
44947: PUSH
44948: LD_VAR 0 4
44952: ARRAY
44953: EQUAL
44954: IFFALSE 44970
// begin result := i ;
44956: LD_ADDR_VAR 0 3
44960: PUSH
44961: LD_VAR 0 4
44965: ST_TO_ADDR
// exit ;
44966: POP
44967: POP
44968: GO 44974
// end ;
44970: GO 44935
44972: POP
44973: POP
// end ;
44974: LD_VAR 0 3
44978: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44979: LD_INT 0
44981: PPUSH
// vc_chassis := chassis ;
44982: LD_ADDR_OWVAR 37
44986: PUSH
44987: LD_VAR 0 1
44991: ST_TO_ADDR
// vc_engine := engine ;
44992: LD_ADDR_OWVAR 39
44996: PUSH
44997: LD_VAR 0 2
45001: ST_TO_ADDR
// vc_control := control ;
45002: LD_ADDR_OWVAR 38
45006: PUSH
45007: LD_VAR 0 3
45011: ST_TO_ADDR
// vc_weapon := weapon ;
45012: LD_ADDR_OWVAR 40
45016: PUSH
45017: LD_VAR 0 4
45021: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45022: LD_ADDR_OWVAR 41
45026: PUSH
45027: LD_VAR 0 5
45031: ST_TO_ADDR
// end ;
45032: LD_VAR 0 6
45036: RET
// export function WantPlant ( unit ) ; var task ; begin
45037: LD_INT 0
45039: PPUSH
45040: PPUSH
// result := false ;
45041: LD_ADDR_VAR 0 2
45045: PUSH
45046: LD_INT 0
45048: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45049: LD_ADDR_VAR 0 3
45053: PUSH
45054: LD_VAR 0 1
45058: PPUSH
45059: CALL_OW 437
45063: ST_TO_ADDR
// if task then
45064: LD_VAR 0 3
45068: IFFALSE 45096
// if task [ 1 ] [ 1 ] = p then
45070: LD_VAR 0 3
45074: PUSH
45075: LD_INT 1
45077: ARRAY
45078: PUSH
45079: LD_INT 1
45081: ARRAY
45082: PUSH
45083: LD_STRING p
45085: EQUAL
45086: IFFALSE 45096
// result := true ;
45088: LD_ADDR_VAR 0 2
45092: PUSH
45093: LD_INT 1
45095: ST_TO_ADDR
// end ;
45096: LD_VAR 0 2
45100: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45101: LD_INT 0
45103: PPUSH
45104: PPUSH
45105: PPUSH
45106: PPUSH
// if pos < 1 then
45107: LD_VAR 0 2
45111: PUSH
45112: LD_INT 1
45114: LESS
45115: IFFALSE 45119
// exit ;
45117: GO 45422
// if pos = 1 then
45119: LD_VAR 0 2
45123: PUSH
45124: LD_INT 1
45126: EQUAL
45127: IFFALSE 45160
// result := Replace ( arr , pos [ 1 ] , value ) else
45129: LD_ADDR_VAR 0 4
45133: PUSH
45134: LD_VAR 0 1
45138: PPUSH
45139: LD_VAR 0 2
45143: PUSH
45144: LD_INT 1
45146: ARRAY
45147: PPUSH
45148: LD_VAR 0 3
45152: PPUSH
45153: CALL_OW 1
45157: ST_TO_ADDR
45158: GO 45422
// begin tmp := arr ;
45160: LD_ADDR_VAR 0 6
45164: PUSH
45165: LD_VAR 0 1
45169: ST_TO_ADDR
// s_arr := [ tmp ] ;
45170: LD_ADDR_VAR 0 7
45174: PUSH
45175: LD_VAR 0 6
45179: PUSH
45180: EMPTY
45181: LIST
45182: ST_TO_ADDR
// for i = 1 to pos - 1 do
45183: LD_ADDR_VAR 0 5
45187: PUSH
45188: DOUBLE
45189: LD_INT 1
45191: DEC
45192: ST_TO_ADDR
45193: LD_VAR 0 2
45197: PUSH
45198: LD_INT 1
45200: MINUS
45201: PUSH
45202: FOR_TO
45203: IFFALSE 45248
// begin tmp := tmp [ pos [ i ] ] ;
45205: LD_ADDR_VAR 0 6
45209: PUSH
45210: LD_VAR 0 6
45214: PUSH
45215: LD_VAR 0 2
45219: PUSH
45220: LD_VAR 0 5
45224: ARRAY
45225: ARRAY
45226: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45227: LD_ADDR_VAR 0 7
45231: PUSH
45232: LD_VAR 0 7
45236: PUSH
45237: LD_VAR 0 6
45241: PUSH
45242: EMPTY
45243: LIST
45244: ADD
45245: ST_TO_ADDR
// end ;
45246: GO 45202
45248: POP
45249: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45250: LD_ADDR_VAR 0 6
45254: PUSH
45255: LD_VAR 0 6
45259: PPUSH
45260: LD_VAR 0 2
45264: PUSH
45265: LD_VAR 0 2
45269: ARRAY
45270: PPUSH
45271: LD_VAR 0 3
45275: PPUSH
45276: CALL_OW 1
45280: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45281: LD_ADDR_VAR 0 7
45285: PUSH
45286: LD_VAR 0 7
45290: PPUSH
45291: LD_VAR 0 7
45295: PPUSH
45296: LD_VAR 0 6
45300: PPUSH
45301: CALL_OW 1
45305: ST_TO_ADDR
// for i = s_arr downto 2 do
45306: LD_ADDR_VAR 0 5
45310: PUSH
45311: DOUBLE
45312: LD_VAR 0 7
45316: INC
45317: ST_TO_ADDR
45318: LD_INT 2
45320: PUSH
45321: FOR_DOWNTO
45322: IFFALSE 45406
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
45324: LD_ADDR_VAR 0 6
45328: PUSH
45329: LD_VAR 0 7
45333: PUSH
45334: LD_VAR 0 5
45338: PUSH
45339: LD_INT 1
45341: MINUS
45342: ARRAY
45343: PPUSH
45344: LD_VAR 0 2
45348: PUSH
45349: LD_VAR 0 5
45353: PUSH
45354: LD_INT 1
45356: MINUS
45357: ARRAY
45358: PPUSH
45359: LD_VAR 0 7
45363: PUSH
45364: LD_VAR 0 5
45368: ARRAY
45369: PPUSH
45370: CALL_OW 1
45374: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
45375: LD_ADDR_VAR 0 7
45379: PUSH
45380: LD_VAR 0 7
45384: PPUSH
45385: LD_VAR 0 5
45389: PUSH
45390: LD_INT 1
45392: MINUS
45393: PPUSH
45394: LD_VAR 0 6
45398: PPUSH
45399: CALL_OW 1
45403: ST_TO_ADDR
// end ;
45404: GO 45321
45406: POP
45407: POP
// result := s_arr [ 1 ] ;
45408: LD_ADDR_VAR 0 4
45412: PUSH
45413: LD_VAR 0 7
45417: PUSH
45418: LD_INT 1
45420: ARRAY
45421: ST_TO_ADDR
// end ; end ;
45422: LD_VAR 0 4
45426: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45427: LD_INT 0
45429: PPUSH
45430: PPUSH
// if not list then
45431: LD_VAR 0 1
45435: NOT
45436: IFFALSE 45440
// exit ;
45438: GO 45531
// i := list [ pos1 ] ;
45440: LD_ADDR_VAR 0 5
45444: PUSH
45445: LD_VAR 0 1
45449: PUSH
45450: LD_VAR 0 2
45454: ARRAY
45455: ST_TO_ADDR
// if not i then
45456: LD_VAR 0 5
45460: NOT
45461: IFFALSE 45465
// exit ;
45463: GO 45531
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45465: LD_ADDR_VAR 0 1
45469: PUSH
45470: LD_VAR 0 1
45474: PPUSH
45475: LD_VAR 0 2
45479: PPUSH
45480: LD_VAR 0 1
45484: PUSH
45485: LD_VAR 0 3
45489: ARRAY
45490: PPUSH
45491: CALL_OW 1
45495: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45496: LD_ADDR_VAR 0 1
45500: PUSH
45501: LD_VAR 0 1
45505: PPUSH
45506: LD_VAR 0 3
45510: PPUSH
45511: LD_VAR 0 5
45515: PPUSH
45516: CALL_OW 1
45520: ST_TO_ADDR
// result := list ;
45521: LD_ADDR_VAR 0 4
45525: PUSH
45526: LD_VAR 0 1
45530: ST_TO_ADDR
// end ;
45531: LD_VAR 0 4
45535: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45536: LD_INT 0
45538: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45539: LD_ADDR_VAR 0 5
45543: PUSH
45544: LD_VAR 0 1
45548: PPUSH
45549: CALL_OW 250
45553: PPUSH
45554: LD_VAR 0 1
45558: PPUSH
45559: CALL_OW 251
45563: PPUSH
45564: LD_VAR 0 2
45568: PPUSH
45569: LD_VAR 0 3
45573: PPUSH
45574: LD_VAR 0 4
45578: PPUSH
45579: CALL 45957 0 5
45583: ST_TO_ADDR
// end ;
45584: LD_VAR 0 5
45588: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45589: LD_INT 0
45591: PPUSH
45592: PPUSH
45593: PPUSH
45594: PPUSH
// if not list or not unit then
45595: LD_VAR 0 2
45599: NOT
45600: PUSH
45601: LD_VAR 0 1
45605: NOT
45606: OR
45607: IFFALSE 45611
// exit ;
45609: GO 45952
// result := [ ] ;
45611: LD_ADDR_VAR 0 5
45615: PUSH
45616: EMPTY
45617: ST_TO_ADDR
// for i in list do
45618: LD_ADDR_VAR 0 6
45622: PUSH
45623: LD_VAR 0 2
45627: PUSH
45628: FOR_IN
45629: IFFALSE 45847
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45631: LD_ADDR_VAR 0 8
45635: PUSH
45636: LD_VAR 0 1
45640: PPUSH
45641: LD_VAR 0 6
45645: PUSH
45646: LD_INT 1
45648: ARRAY
45649: PPUSH
45650: LD_VAR 0 6
45654: PUSH
45655: LD_INT 2
45657: ARRAY
45658: PPUSH
45659: CALL_OW 297
45663: ST_TO_ADDR
// if not Count ( result ) then
45664: LD_VAR 0 5
45668: PPUSH
45669: CALL 42241 0 1
45673: NOT
45674: IFFALSE 45707
// begin result := Join ( result , [ i , tmp ] ) ;
45676: LD_ADDR_VAR 0 5
45680: PUSH
45681: LD_VAR 0 5
45685: PPUSH
45686: LD_VAR 0 6
45690: PUSH
45691: LD_VAR 0 8
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PPUSH
45700: CALL 77830 0 2
45704: ST_TO_ADDR
// continue ;
45705: GO 45628
// end ; if result [ result ] [ 2 ] <= tmp then
45707: LD_VAR 0 5
45711: PUSH
45712: LD_VAR 0 5
45716: ARRAY
45717: PUSH
45718: LD_INT 2
45720: ARRAY
45721: PUSH
45722: LD_VAR 0 8
45726: LESSEQUAL
45727: IFFALSE 45760
// result := Join ( result , [ i , tmp ] ) else
45729: LD_ADDR_VAR 0 5
45733: PUSH
45734: LD_VAR 0 5
45738: PPUSH
45739: LD_VAR 0 6
45743: PUSH
45744: LD_VAR 0 8
45748: PUSH
45749: EMPTY
45750: LIST
45751: LIST
45752: PPUSH
45753: CALL 77830 0 2
45757: ST_TO_ADDR
45758: GO 45845
// begin for j := 1 to Count ( result ) do
45760: LD_ADDR_VAR 0 7
45764: PUSH
45765: DOUBLE
45766: LD_INT 1
45768: DEC
45769: ST_TO_ADDR
45770: LD_VAR 0 5
45774: PPUSH
45775: CALL 42241 0 1
45779: PUSH
45780: FOR_TO
45781: IFFALSE 45843
// begin if tmp < result [ j ] [ 2 ] then
45783: LD_VAR 0 8
45787: PUSH
45788: LD_VAR 0 5
45792: PUSH
45793: LD_VAR 0 7
45797: ARRAY
45798: PUSH
45799: LD_INT 2
45801: ARRAY
45802: LESS
45803: IFFALSE 45841
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45805: LD_ADDR_VAR 0 5
45809: PUSH
45810: LD_VAR 0 5
45814: PPUSH
45815: LD_VAR 0 7
45819: PPUSH
45820: LD_VAR 0 6
45824: PUSH
45825: LD_VAR 0 8
45829: PUSH
45830: EMPTY
45831: LIST
45832: LIST
45833: PPUSH
45834: CALL_OW 2
45838: ST_TO_ADDR
// break ;
45839: GO 45843
// end ; end ;
45841: GO 45780
45843: POP
45844: POP
// end ; end ;
45845: GO 45628
45847: POP
45848: POP
// if result and not asc then
45849: LD_VAR 0 5
45853: PUSH
45854: LD_VAR 0 3
45858: NOT
45859: AND
45860: IFFALSE 45877
// result := ReverseArray ( result ) ;
45862: LD_ADDR_VAR 0 5
45866: PUSH
45867: LD_VAR 0 5
45871: PPUSH
45872: CALL 73117 0 1
45876: ST_TO_ADDR
// tmp := [ ] ;
45877: LD_ADDR_VAR 0 8
45881: PUSH
45882: EMPTY
45883: ST_TO_ADDR
// if mode then
45884: LD_VAR 0 4
45888: IFFALSE 45952
// begin for i := 1 to result do
45890: LD_ADDR_VAR 0 6
45894: PUSH
45895: DOUBLE
45896: LD_INT 1
45898: DEC
45899: ST_TO_ADDR
45900: LD_VAR 0 5
45904: PUSH
45905: FOR_TO
45906: IFFALSE 45940
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
45908: LD_ADDR_VAR 0 8
45912: PUSH
45913: LD_VAR 0 8
45917: PPUSH
45918: LD_VAR 0 5
45922: PUSH
45923: LD_VAR 0 6
45927: ARRAY
45928: PUSH
45929: LD_INT 1
45931: ARRAY
45932: PPUSH
45933: CALL 77830 0 2
45937: ST_TO_ADDR
45938: GO 45905
45940: POP
45941: POP
// result := tmp ;
45942: LD_ADDR_VAR 0 5
45946: PUSH
45947: LD_VAR 0 8
45951: ST_TO_ADDR
// end ; end ;
45952: LD_VAR 0 5
45956: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45957: LD_INT 0
45959: PPUSH
45960: PPUSH
45961: PPUSH
45962: PPUSH
// if not list then
45963: LD_VAR 0 3
45967: NOT
45968: IFFALSE 45972
// exit ;
45970: GO 46360
// result := [ ] ;
45972: LD_ADDR_VAR 0 6
45976: PUSH
45977: EMPTY
45978: ST_TO_ADDR
// for i in list do
45979: LD_ADDR_VAR 0 7
45983: PUSH
45984: LD_VAR 0 3
45988: PUSH
45989: FOR_IN
45990: IFFALSE 46192
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45992: LD_ADDR_VAR 0 9
45996: PUSH
45997: LD_VAR 0 7
46001: PPUSH
46002: LD_VAR 0 1
46006: PPUSH
46007: LD_VAR 0 2
46011: PPUSH
46012: CALL_OW 297
46016: ST_TO_ADDR
// if not result then
46017: LD_VAR 0 6
46021: NOT
46022: IFFALSE 46048
// result := [ [ i , tmp ] ] else
46024: LD_ADDR_VAR 0 6
46028: PUSH
46029: LD_VAR 0 7
46033: PUSH
46034: LD_VAR 0 9
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: EMPTY
46044: LIST
46045: ST_TO_ADDR
46046: GO 46190
// begin if result [ result ] [ 2 ] < tmp then
46048: LD_VAR 0 6
46052: PUSH
46053: LD_VAR 0 6
46057: ARRAY
46058: PUSH
46059: LD_INT 2
46061: ARRAY
46062: PUSH
46063: LD_VAR 0 9
46067: LESS
46068: IFFALSE 46110
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46070: LD_ADDR_VAR 0 6
46074: PUSH
46075: LD_VAR 0 6
46079: PPUSH
46080: LD_VAR 0 6
46084: PUSH
46085: LD_INT 1
46087: PLUS
46088: PPUSH
46089: LD_VAR 0 7
46093: PUSH
46094: LD_VAR 0 9
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: PPUSH
46103: CALL_OW 2
46107: ST_TO_ADDR
46108: GO 46190
// for j = 1 to result do
46110: LD_ADDR_VAR 0 8
46114: PUSH
46115: DOUBLE
46116: LD_INT 1
46118: DEC
46119: ST_TO_ADDR
46120: LD_VAR 0 6
46124: PUSH
46125: FOR_TO
46126: IFFALSE 46188
// begin if tmp < result [ j ] [ 2 ] then
46128: LD_VAR 0 9
46132: PUSH
46133: LD_VAR 0 6
46137: PUSH
46138: LD_VAR 0 8
46142: ARRAY
46143: PUSH
46144: LD_INT 2
46146: ARRAY
46147: LESS
46148: IFFALSE 46186
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46150: LD_ADDR_VAR 0 6
46154: PUSH
46155: LD_VAR 0 6
46159: PPUSH
46160: LD_VAR 0 8
46164: PPUSH
46165: LD_VAR 0 7
46169: PUSH
46170: LD_VAR 0 9
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PPUSH
46179: CALL_OW 2
46183: ST_TO_ADDR
// break ;
46184: GO 46188
// end ; end ;
46186: GO 46125
46188: POP
46189: POP
// end ; end ;
46190: GO 45989
46192: POP
46193: POP
// if result and not asc then
46194: LD_VAR 0 6
46198: PUSH
46199: LD_VAR 0 4
46203: NOT
46204: AND
46205: IFFALSE 46280
// begin tmp := result ;
46207: LD_ADDR_VAR 0 9
46211: PUSH
46212: LD_VAR 0 6
46216: ST_TO_ADDR
// for i = tmp downto 1 do
46217: LD_ADDR_VAR 0 7
46221: PUSH
46222: DOUBLE
46223: LD_VAR 0 9
46227: INC
46228: ST_TO_ADDR
46229: LD_INT 1
46231: PUSH
46232: FOR_DOWNTO
46233: IFFALSE 46278
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46235: LD_ADDR_VAR 0 6
46239: PUSH
46240: LD_VAR 0 6
46244: PPUSH
46245: LD_VAR 0 9
46249: PUSH
46250: LD_VAR 0 7
46254: MINUS
46255: PUSH
46256: LD_INT 1
46258: PLUS
46259: PPUSH
46260: LD_VAR 0 9
46264: PUSH
46265: LD_VAR 0 7
46269: ARRAY
46270: PPUSH
46271: CALL_OW 1
46275: ST_TO_ADDR
46276: GO 46232
46278: POP
46279: POP
// end ; tmp := [ ] ;
46280: LD_ADDR_VAR 0 9
46284: PUSH
46285: EMPTY
46286: ST_TO_ADDR
// if mode then
46287: LD_VAR 0 5
46291: IFFALSE 46360
// begin for i = 1 to result do
46293: LD_ADDR_VAR 0 7
46297: PUSH
46298: DOUBLE
46299: LD_INT 1
46301: DEC
46302: ST_TO_ADDR
46303: LD_VAR 0 6
46307: PUSH
46308: FOR_TO
46309: IFFALSE 46348
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46311: LD_ADDR_VAR 0 9
46315: PUSH
46316: LD_VAR 0 9
46320: PPUSH
46321: LD_VAR 0 7
46325: PPUSH
46326: LD_VAR 0 6
46330: PUSH
46331: LD_VAR 0 7
46335: ARRAY
46336: PUSH
46337: LD_INT 1
46339: ARRAY
46340: PPUSH
46341: CALL_OW 1
46345: ST_TO_ADDR
46346: GO 46308
46348: POP
46349: POP
// result := tmp ;
46350: LD_ADDR_VAR 0 6
46354: PUSH
46355: LD_VAR 0 9
46359: ST_TO_ADDR
// end ; end ;
46360: LD_VAR 0 6
46364: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
46365: LD_INT 0
46367: PPUSH
46368: PPUSH
46369: PPUSH
46370: PPUSH
46371: PPUSH
46372: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
46373: LD_ADDR_VAR 0 5
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 0
46383: PUSH
46384: LD_INT 0
46386: PUSH
46387: EMPTY
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: ST_TO_ADDR
// if not x or not y then
46395: LD_VAR 0 2
46399: NOT
46400: PUSH
46401: LD_VAR 0 3
46405: NOT
46406: OR
46407: IFFALSE 46411
// exit ;
46409: GO 48061
// if not range then
46411: LD_VAR 0 4
46415: NOT
46416: IFFALSE 46426
// range := 10 ;
46418: LD_ADDR_VAR 0 4
46422: PUSH
46423: LD_INT 10
46425: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46426: LD_ADDR_VAR 0 8
46430: PUSH
46431: LD_INT 81
46433: PUSH
46434: LD_VAR 0 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 92
46445: PUSH
46446: LD_VAR 0 2
46450: PUSH
46451: LD_VAR 0 3
46455: PUSH
46456: LD_VAR 0 4
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 3
46469: PUSH
46470: LD_INT 21
46472: PUSH
46473: LD_INT 3
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: LIST
46488: PPUSH
46489: CALL_OW 69
46493: ST_TO_ADDR
// if not tmp then
46494: LD_VAR 0 8
46498: NOT
46499: IFFALSE 46503
// exit ;
46501: GO 48061
// for i in tmp do
46503: LD_ADDR_VAR 0 6
46507: PUSH
46508: LD_VAR 0 8
46512: PUSH
46513: FOR_IN
46514: IFFALSE 48036
// begin points := [ 0 , 0 , 0 ] ;
46516: LD_ADDR_VAR 0 9
46520: PUSH
46521: LD_INT 0
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: LD_INT 0
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: LIST
46534: ST_TO_ADDR
// bpoints := 1 ;
46535: LD_ADDR_VAR 0 10
46539: PUSH
46540: LD_INT 1
46542: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46543: LD_VAR 0 6
46547: PPUSH
46548: CALL_OW 247
46552: PUSH
46553: LD_INT 1
46555: DOUBLE
46556: EQUAL
46557: IFTRUE 46561
46559: GO 47139
46561: POP
// begin if GetClass ( i ) = 1 then
46562: LD_VAR 0 6
46566: PPUSH
46567: CALL_OW 257
46571: PUSH
46572: LD_INT 1
46574: EQUAL
46575: IFFALSE 46596
// points := [ 10 , 5 , 3 ] ;
46577: LD_ADDR_VAR 0 9
46581: PUSH
46582: LD_INT 10
46584: PUSH
46585: LD_INT 5
46587: PUSH
46588: LD_INT 3
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: LIST
46595: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46596: LD_VAR 0 6
46600: PPUSH
46601: CALL_OW 257
46605: PUSH
46606: LD_INT 2
46608: PUSH
46609: LD_INT 3
46611: PUSH
46612: LD_INT 4
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: LIST
46619: IN
46620: IFFALSE 46641
// points := [ 3 , 2 , 1 ] ;
46622: LD_ADDR_VAR 0 9
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: LD_INT 2
46632: PUSH
46633: LD_INT 1
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46641: LD_VAR 0 6
46645: PPUSH
46646: CALL_OW 257
46650: PUSH
46651: LD_INT 5
46653: EQUAL
46654: IFFALSE 46675
// points := [ 130 , 5 , 2 ] ;
46656: LD_ADDR_VAR 0 9
46660: PUSH
46661: LD_INT 130
46663: PUSH
46664: LD_INT 5
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: LIST
46674: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46675: LD_VAR 0 6
46679: PPUSH
46680: CALL_OW 257
46684: PUSH
46685: LD_INT 8
46687: EQUAL
46688: IFFALSE 46709
// points := [ 35 , 35 , 30 ] ;
46690: LD_ADDR_VAR 0 9
46694: PUSH
46695: LD_INT 35
46697: PUSH
46698: LD_INT 35
46700: PUSH
46701: LD_INT 30
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: LIST
46708: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46709: LD_VAR 0 6
46713: PPUSH
46714: CALL_OW 257
46718: PUSH
46719: LD_INT 9
46721: EQUAL
46722: IFFALSE 46743
// points := [ 20 , 55 , 40 ] ;
46724: LD_ADDR_VAR 0 9
46728: PUSH
46729: LD_INT 20
46731: PUSH
46732: LD_INT 55
46734: PUSH
46735: LD_INT 40
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: LIST
46742: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46743: LD_VAR 0 6
46747: PPUSH
46748: CALL_OW 257
46752: PUSH
46753: LD_INT 12
46755: PUSH
46756: LD_INT 16
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: IN
46763: IFFALSE 46784
// points := [ 5 , 3 , 2 ] ;
46765: LD_ADDR_VAR 0 9
46769: PUSH
46770: LD_INT 5
46772: PUSH
46773: LD_INT 3
46775: PUSH
46776: LD_INT 2
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: LIST
46783: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46784: LD_VAR 0 6
46788: PPUSH
46789: CALL_OW 257
46793: PUSH
46794: LD_INT 17
46796: EQUAL
46797: IFFALSE 46818
// points := [ 100 , 50 , 75 ] ;
46799: LD_ADDR_VAR 0 9
46803: PUSH
46804: LD_INT 100
46806: PUSH
46807: LD_INT 50
46809: PUSH
46810: LD_INT 75
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: LIST
46817: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46818: LD_VAR 0 6
46822: PPUSH
46823: CALL_OW 257
46827: PUSH
46828: LD_INT 15
46830: EQUAL
46831: IFFALSE 46852
// points := [ 10 , 5 , 3 ] ;
46833: LD_ADDR_VAR 0 9
46837: PUSH
46838: LD_INT 10
46840: PUSH
46841: LD_INT 5
46843: PUSH
46844: LD_INT 3
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: LIST
46851: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46852: LD_VAR 0 6
46856: PPUSH
46857: CALL_OW 257
46861: PUSH
46862: LD_INT 14
46864: EQUAL
46865: IFFALSE 46886
// points := [ 10 , 0 , 0 ] ;
46867: LD_ADDR_VAR 0 9
46871: PUSH
46872: LD_INT 10
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: EMPTY
46882: LIST
46883: LIST
46884: LIST
46885: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46886: LD_VAR 0 6
46890: PPUSH
46891: CALL_OW 257
46895: PUSH
46896: LD_INT 11
46898: EQUAL
46899: IFFALSE 46920
// points := [ 30 , 10 , 5 ] ;
46901: LD_ADDR_VAR 0 9
46905: PUSH
46906: LD_INT 30
46908: PUSH
46909: LD_INT 10
46911: PUSH
46912: LD_INT 5
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46920: LD_VAR 0 1
46924: PPUSH
46925: LD_INT 5
46927: PPUSH
46928: CALL_OW 321
46932: PUSH
46933: LD_INT 2
46935: EQUAL
46936: IFFALSE 46953
// bpoints := bpoints * 1.8 ;
46938: LD_ADDR_VAR 0 10
46942: PUSH
46943: LD_VAR 0 10
46947: PUSH
46948: LD_REAL  1.80000000000000E+0000
46951: MUL
46952: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46953: LD_VAR 0 6
46957: PPUSH
46958: CALL_OW 257
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 2
46968: PUSH
46969: LD_INT 3
46971: PUSH
46972: LD_INT 4
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: IN
46981: PUSH
46982: LD_VAR 0 1
46986: PPUSH
46987: LD_INT 51
46989: PPUSH
46990: CALL_OW 321
46994: PUSH
46995: LD_INT 2
46997: EQUAL
46998: AND
46999: IFFALSE 47016
// bpoints := bpoints * 1.2 ;
47001: LD_ADDR_VAR 0 10
47005: PUSH
47006: LD_VAR 0 10
47010: PUSH
47011: LD_REAL  1.20000000000000E+0000
47014: MUL
47015: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47016: LD_VAR 0 6
47020: PPUSH
47021: CALL_OW 257
47025: PUSH
47026: LD_INT 5
47028: PUSH
47029: LD_INT 7
47031: PUSH
47032: LD_INT 9
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: LIST
47039: IN
47040: PUSH
47041: LD_VAR 0 1
47045: PPUSH
47046: LD_INT 52
47048: PPUSH
47049: CALL_OW 321
47053: PUSH
47054: LD_INT 2
47056: EQUAL
47057: AND
47058: IFFALSE 47075
// bpoints := bpoints * 1.5 ;
47060: LD_ADDR_VAR 0 10
47064: PUSH
47065: LD_VAR 0 10
47069: PUSH
47070: LD_REAL  1.50000000000000E+0000
47073: MUL
47074: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47075: LD_VAR 0 1
47079: PPUSH
47080: LD_INT 66
47082: PPUSH
47083: CALL_OW 321
47087: PUSH
47088: LD_INT 2
47090: EQUAL
47091: IFFALSE 47108
// bpoints := bpoints * 1.1 ;
47093: LD_ADDR_VAR 0 10
47097: PUSH
47098: LD_VAR 0 10
47102: PUSH
47103: LD_REAL  1.10000000000000E+0000
47106: MUL
47107: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47108: LD_ADDR_VAR 0 10
47112: PUSH
47113: LD_VAR 0 10
47117: PUSH
47118: LD_VAR 0 6
47122: PPUSH
47123: LD_INT 1
47125: PPUSH
47126: CALL_OW 259
47130: PUSH
47131: LD_REAL  1.15000000000000E+0000
47134: MUL
47135: MUL
47136: ST_TO_ADDR
// end ; unit_vehicle :
47137: GO 47965
47139: LD_INT 2
47141: DOUBLE
47142: EQUAL
47143: IFTRUE 47147
47145: GO 47953
47147: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47148: LD_VAR 0 6
47152: PPUSH
47153: CALL_OW 264
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: LD_INT 42
47163: PUSH
47164: LD_INT 24
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: LIST
47171: IN
47172: IFFALSE 47193
// points := [ 25 , 5 , 3 ] ;
47174: LD_ADDR_VAR 0 9
47178: PUSH
47179: LD_INT 25
47181: PUSH
47182: LD_INT 5
47184: PUSH
47185: LD_INT 3
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: LIST
47192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47193: LD_VAR 0 6
47197: PPUSH
47198: CALL_OW 264
47202: PUSH
47203: LD_INT 4
47205: PUSH
47206: LD_INT 43
47208: PUSH
47209: LD_INT 25
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: LIST
47216: IN
47217: IFFALSE 47238
// points := [ 40 , 15 , 5 ] ;
47219: LD_ADDR_VAR 0 9
47223: PUSH
47224: LD_INT 40
47226: PUSH
47227: LD_INT 15
47229: PUSH
47230: LD_INT 5
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: LIST
47237: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47238: LD_VAR 0 6
47242: PPUSH
47243: CALL_OW 264
47247: PUSH
47248: LD_INT 3
47250: PUSH
47251: LD_INT 23
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: IN
47258: IFFALSE 47279
// points := [ 7 , 25 , 8 ] ;
47260: LD_ADDR_VAR 0 9
47264: PUSH
47265: LD_INT 7
47267: PUSH
47268: LD_INT 25
47270: PUSH
47271: LD_INT 8
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: LIST
47278: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47279: LD_VAR 0 6
47283: PPUSH
47284: CALL_OW 264
47288: PUSH
47289: LD_INT 5
47291: PUSH
47292: LD_INT 27
47294: PUSH
47295: LD_INT 44
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: LIST
47302: IN
47303: IFFALSE 47324
// points := [ 14 , 50 , 16 ] ;
47305: LD_ADDR_VAR 0 9
47309: PUSH
47310: LD_INT 14
47312: PUSH
47313: LD_INT 50
47315: PUSH
47316: LD_INT 16
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: LIST
47323: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
47324: LD_VAR 0 6
47328: PPUSH
47329: CALL_OW 264
47333: PUSH
47334: LD_INT 6
47336: PUSH
47337: LD_INT 46
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: IN
47344: IFFALSE 47365
// points := [ 32 , 120 , 70 ] ;
47346: LD_ADDR_VAR 0 9
47350: PUSH
47351: LD_INT 32
47353: PUSH
47354: LD_INT 120
47356: PUSH
47357: LD_INT 70
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: LIST
47364: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
47365: LD_VAR 0 6
47369: PPUSH
47370: CALL_OW 264
47374: PUSH
47375: LD_INT 7
47377: PUSH
47378: LD_INT 28
47380: PUSH
47381: LD_INT 45
47383: PUSH
47384: LD_INT 92
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: IN
47393: IFFALSE 47414
// points := [ 35 , 20 , 45 ] ;
47395: LD_ADDR_VAR 0 9
47399: PUSH
47400: LD_INT 35
47402: PUSH
47403: LD_INT 20
47405: PUSH
47406: LD_INT 45
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47414: LD_VAR 0 6
47418: PPUSH
47419: CALL_OW 264
47423: PUSH
47424: LD_INT 47
47426: PUSH
47427: EMPTY
47428: LIST
47429: IN
47430: IFFALSE 47451
// points := [ 67 , 45 , 75 ] ;
47432: LD_ADDR_VAR 0 9
47436: PUSH
47437: LD_INT 67
47439: PUSH
47440: LD_INT 45
47442: PUSH
47443: LD_INT 75
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: LIST
47450: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47451: LD_VAR 0 6
47455: PPUSH
47456: CALL_OW 264
47460: PUSH
47461: LD_INT 26
47463: PUSH
47464: EMPTY
47465: LIST
47466: IN
47467: IFFALSE 47488
// points := [ 120 , 30 , 80 ] ;
47469: LD_ADDR_VAR 0 9
47473: PUSH
47474: LD_INT 120
47476: PUSH
47477: LD_INT 30
47479: PUSH
47480: LD_INT 80
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: LIST
47487: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47488: LD_VAR 0 6
47492: PPUSH
47493: CALL_OW 264
47497: PUSH
47498: LD_INT 22
47500: PUSH
47501: EMPTY
47502: LIST
47503: IN
47504: IFFALSE 47525
// points := [ 40 , 1 , 1 ] ;
47506: LD_ADDR_VAR 0 9
47510: PUSH
47511: LD_INT 40
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47525: LD_VAR 0 6
47529: PPUSH
47530: CALL_OW 264
47534: PUSH
47535: LD_INT 29
47537: PUSH
47538: EMPTY
47539: LIST
47540: IN
47541: IFFALSE 47562
// points := [ 70 , 200 , 400 ] ;
47543: LD_ADDR_VAR 0 9
47547: PUSH
47548: LD_INT 70
47550: PUSH
47551: LD_INT 200
47553: PUSH
47554: LD_INT 400
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: LIST
47561: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47562: LD_VAR 0 6
47566: PPUSH
47567: CALL_OW 264
47571: PUSH
47572: LD_INT 14
47574: PUSH
47575: LD_INT 53
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: IN
47582: IFFALSE 47603
// points := [ 40 , 10 , 20 ] ;
47584: LD_ADDR_VAR 0 9
47588: PUSH
47589: LD_INT 40
47591: PUSH
47592: LD_INT 10
47594: PUSH
47595: LD_INT 20
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: LIST
47602: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47603: LD_VAR 0 6
47607: PPUSH
47608: CALL_OW 264
47612: PUSH
47613: LD_INT 9
47615: PUSH
47616: EMPTY
47617: LIST
47618: IN
47619: IFFALSE 47640
// points := [ 5 , 70 , 20 ] ;
47621: LD_ADDR_VAR 0 9
47625: PUSH
47626: LD_INT 5
47628: PUSH
47629: LD_INT 70
47631: PUSH
47632: LD_INT 20
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: LIST
47639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47640: LD_VAR 0 6
47644: PPUSH
47645: CALL_OW 264
47649: PUSH
47650: LD_INT 10
47652: PUSH
47653: EMPTY
47654: LIST
47655: IN
47656: IFFALSE 47677
// points := [ 35 , 110 , 70 ] ;
47658: LD_ADDR_VAR 0 9
47662: PUSH
47663: LD_INT 35
47665: PUSH
47666: LD_INT 110
47668: PUSH
47669: LD_INT 70
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: LIST
47676: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47677: LD_VAR 0 6
47681: PPUSH
47682: CALL_OW 265
47686: PUSH
47687: LD_INT 25
47689: EQUAL
47690: IFFALSE 47711
// points := [ 80 , 65 , 100 ] ;
47692: LD_ADDR_VAR 0 9
47696: PUSH
47697: LD_INT 80
47699: PUSH
47700: LD_INT 65
47702: PUSH
47703: LD_INT 100
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: LIST
47710: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47711: LD_VAR 0 6
47715: PPUSH
47716: CALL_OW 263
47720: PUSH
47721: LD_INT 1
47723: EQUAL
47724: IFFALSE 47759
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47726: LD_ADDR_VAR 0 10
47730: PUSH
47731: LD_VAR 0 10
47735: PUSH
47736: LD_VAR 0 6
47740: PPUSH
47741: CALL_OW 311
47745: PPUSH
47746: LD_INT 3
47748: PPUSH
47749: CALL_OW 259
47753: PUSH
47754: LD_INT 4
47756: MUL
47757: MUL
47758: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47759: LD_VAR 0 6
47763: PPUSH
47764: CALL_OW 263
47768: PUSH
47769: LD_INT 2
47771: EQUAL
47772: IFFALSE 47823
// begin j := IsControledBy ( i ) ;
47774: LD_ADDR_VAR 0 7
47778: PUSH
47779: LD_VAR 0 6
47783: PPUSH
47784: CALL_OW 312
47788: ST_TO_ADDR
// if j then
47789: LD_VAR 0 7
47793: IFFALSE 47823
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47795: LD_ADDR_VAR 0 10
47799: PUSH
47800: LD_VAR 0 10
47804: PUSH
47805: LD_VAR 0 7
47809: PPUSH
47810: LD_INT 3
47812: PPUSH
47813: CALL_OW 259
47817: PUSH
47818: LD_INT 3
47820: MUL
47821: MUL
47822: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47823: LD_VAR 0 6
47827: PPUSH
47828: CALL_OW 264
47832: PUSH
47833: LD_INT 5
47835: PUSH
47836: LD_INT 6
47838: PUSH
47839: LD_INT 46
47841: PUSH
47842: LD_INT 44
47844: PUSH
47845: LD_INT 47
47847: PUSH
47848: LD_INT 45
47850: PUSH
47851: LD_INT 28
47853: PUSH
47854: LD_INT 7
47856: PUSH
47857: LD_INT 27
47859: PUSH
47860: LD_INT 29
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: IN
47875: PUSH
47876: LD_VAR 0 1
47880: PPUSH
47881: LD_INT 52
47883: PPUSH
47884: CALL_OW 321
47888: PUSH
47889: LD_INT 2
47891: EQUAL
47892: AND
47893: IFFALSE 47910
// bpoints := bpoints * 1.2 ;
47895: LD_ADDR_VAR 0 10
47899: PUSH
47900: LD_VAR 0 10
47904: PUSH
47905: LD_REAL  1.20000000000000E+0000
47908: MUL
47909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47910: LD_VAR 0 6
47914: PPUSH
47915: CALL_OW 264
47919: PUSH
47920: LD_INT 6
47922: PUSH
47923: LD_INT 46
47925: PUSH
47926: LD_INT 47
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: LIST
47933: IN
47934: IFFALSE 47951
// bpoints := bpoints * 1.2 ;
47936: LD_ADDR_VAR 0 10
47940: PUSH
47941: LD_VAR 0 10
47945: PUSH
47946: LD_REAL  1.20000000000000E+0000
47949: MUL
47950: ST_TO_ADDR
// end ; unit_building :
47951: GO 47965
47953: LD_INT 3
47955: DOUBLE
47956: EQUAL
47957: IFTRUE 47961
47959: GO 47964
47961: POP
// ; end ;
47962: GO 47965
47964: POP
// for j = 1 to 3 do
47965: LD_ADDR_VAR 0 7
47969: PUSH
47970: DOUBLE
47971: LD_INT 1
47973: DEC
47974: ST_TO_ADDR
47975: LD_INT 3
47977: PUSH
47978: FOR_TO
47979: IFFALSE 48032
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47981: LD_ADDR_VAR 0 5
47985: PUSH
47986: LD_VAR 0 5
47990: PPUSH
47991: LD_VAR 0 7
47995: PPUSH
47996: LD_VAR 0 5
48000: PUSH
48001: LD_VAR 0 7
48005: ARRAY
48006: PUSH
48007: LD_VAR 0 9
48011: PUSH
48012: LD_VAR 0 7
48016: ARRAY
48017: PUSH
48018: LD_VAR 0 10
48022: MUL
48023: PLUS
48024: PPUSH
48025: CALL_OW 1
48029: ST_TO_ADDR
48030: GO 47978
48032: POP
48033: POP
// end ;
48034: GO 46513
48036: POP
48037: POP
// result := Replace ( result , 4 , tmp ) ;
48038: LD_ADDR_VAR 0 5
48042: PUSH
48043: LD_VAR 0 5
48047: PPUSH
48048: LD_INT 4
48050: PPUSH
48051: LD_VAR 0 8
48055: PPUSH
48056: CALL_OW 1
48060: ST_TO_ADDR
// end ;
48061: LD_VAR 0 5
48065: RET
// export function DangerAtRange ( unit , range ) ; begin
48066: LD_INT 0
48068: PPUSH
// if not unit then
48069: LD_VAR 0 1
48073: NOT
48074: IFFALSE 48078
// exit ;
48076: GO 48123
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48078: LD_ADDR_VAR 0 3
48082: PUSH
48083: LD_VAR 0 1
48087: PPUSH
48088: CALL_OW 255
48092: PPUSH
48093: LD_VAR 0 1
48097: PPUSH
48098: CALL_OW 250
48102: PPUSH
48103: LD_VAR 0 1
48107: PPUSH
48108: CALL_OW 251
48112: PPUSH
48113: LD_VAR 0 2
48117: PPUSH
48118: CALL 46365 0 4
48122: ST_TO_ADDR
// end ;
48123: LD_VAR 0 3
48127: RET
// export function DangerInArea ( side , area ) ; begin
48128: LD_INT 0
48130: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48131: LD_ADDR_VAR 0 3
48135: PUSH
48136: LD_VAR 0 2
48140: PPUSH
48141: LD_INT 81
48143: PUSH
48144: LD_VAR 0 1
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PPUSH
48153: CALL_OW 70
48157: ST_TO_ADDR
// end ;
48158: LD_VAR 0 3
48162: RET
// export function IsExtension ( b ) ; begin
48163: LD_INT 0
48165: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48166: LD_ADDR_VAR 0 2
48170: PUSH
48171: LD_VAR 0 1
48175: PUSH
48176: LD_INT 23
48178: PUSH
48179: LD_INT 20
48181: PUSH
48182: LD_INT 22
48184: PUSH
48185: LD_INT 17
48187: PUSH
48188: LD_INT 24
48190: PUSH
48191: LD_INT 21
48193: PUSH
48194: LD_INT 19
48196: PUSH
48197: LD_INT 16
48199: PUSH
48200: LD_INT 25
48202: PUSH
48203: LD_INT 18
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: IN
48218: ST_TO_ADDR
// end ;
48219: LD_VAR 0 2
48223: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48224: LD_INT 0
48226: PPUSH
48227: PPUSH
48228: PPUSH
// result := [ ] ;
48229: LD_ADDR_VAR 0 4
48233: PUSH
48234: EMPTY
48235: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48236: LD_ADDR_VAR 0 5
48240: PUSH
48241: LD_VAR 0 2
48245: PPUSH
48246: LD_INT 21
48248: PUSH
48249: LD_INT 3
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PPUSH
48256: CALL_OW 70
48260: ST_TO_ADDR
// if not tmp then
48261: LD_VAR 0 5
48265: NOT
48266: IFFALSE 48270
// exit ;
48268: GO 48334
// if checkLink then
48270: LD_VAR 0 3
48274: IFFALSE 48324
// begin for i in tmp do
48276: LD_ADDR_VAR 0 6
48280: PUSH
48281: LD_VAR 0 5
48285: PUSH
48286: FOR_IN
48287: IFFALSE 48322
// if GetBase ( i ) <> base then
48289: LD_VAR 0 6
48293: PPUSH
48294: CALL_OW 274
48298: PUSH
48299: LD_VAR 0 1
48303: NONEQUAL
48304: IFFALSE 48320
// ComLinkToBase ( base , i ) ;
48306: LD_VAR 0 1
48310: PPUSH
48311: LD_VAR 0 6
48315: PPUSH
48316: CALL_OW 169
48320: GO 48286
48322: POP
48323: POP
// end ; result := tmp ;
48324: LD_ADDR_VAR 0 4
48328: PUSH
48329: LD_VAR 0 5
48333: ST_TO_ADDR
// end ;
48334: LD_VAR 0 4
48338: RET
// export function ComComplete ( units , b ) ; var i ; begin
48339: LD_INT 0
48341: PPUSH
48342: PPUSH
// if not units then
48343: LD_VAR 0 1
48347: NOT
48348: IFFALSE 48352
// exit ;
48350: GO 48442
// for i in units do
48352: LD_ADDR_VAR 0 4
48356: PUSH
48357: LD_VAR 0 1
48361: PUSH
48362: FOR_IN
48363: IFFALSE 48440
// if BuildingStatus ( b ) = bs_build then
48365: LD_VAR 0 2
48369: PPUSH
48370: CALL_OW 461
48374: PUSH
48375: LD_INT 1
48377: EQUAL
48378: IFFALSE 48438
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
48380: LD_VAR 0 4
48384: PPUSH
48385: LD_STRING h
48387: PUSH
48388: LD_VAR 0 2
48392: PPUSH
48393: CALL_OW 250
48397: PUSH
48398: LD_VAR 0 2
48402: PPUSH
48403: CALL_OW 251
48407: PUSH
48408: LD_VAR 0 2
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: LD_INT 0
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: PUSH
48431: EMPTY
48432: LIST
48433: PPUSH
48434: CALL_OW 446
48438: GO 48362
48440: POP
48441: POP
// end ;
48442: LD_VAR 0 3
48446: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48447: LD_INT 0
48449: PPUSH
48450: PPUSH
48451: PPUSH
48452: PPUSH
48453: PPUSH
48454: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48455: LD_VAR 0 1
48459: NOT
48460: PUSH
48461: LD_VAR 0 1
48465: PPUSH
48466: CALL_OW 263
48470: PUSH
48471: LD_INT 2
48473: NONEQUAL
48474: OR
48475: IFFALSE 48479
// exit ;
48477: GO 48795
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48479: LD_ADDR_VAR 0 6
48483: PUSH
48484: LD_INT 22
48486: PUSH
48487: LD_VAR 0 1
48491: PPUSH
48492: CALL_OW 255
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 2
48503: PUSH
48504: LD_INT 30
48506: PUSH
48507: LD_INT 36
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 34
48516: PUSH
48517: LD_INT 31
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: LIST
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PPUSH
48533: CALL_OW 69
48537: ST_TO_ADDR
// if not tmp then
48538: LD_VAR 0 6
48542: NOT
48543: IFFALSE 48547
// exit ;
48545: GO 48795
// result := [ ] ;
48547: LD_ADDR_VAR 0 2
48551: PUSH
48552: EMPTY
48553: ST_TO_ADDR
// for i in tmp do
48554: LD_ADDR_VAR 0 3
48558: PUSH
48559: LD_VAR 0 6
48563: PUSH
48564: FOR_IN
48565: IFFALSE 48636
// begin t := UnitsInside ( i ) ;
48567: LD_ADDR_VAR 0 4
48571: PUSH
48572: LD_VAR 0 3
48576: PPUSH
48577: CALL_OW 313
48581: ST_TO_ADDR
// if t then
48582: LD_VAR 0 4
48586: IFFALSE 48634
// for j in t do
48588: LD_ADDR_VAR 0 7
48592: PUSH
48593: LD_VAR 0 4
48597: PUSH
48598: FOR_IN
48599: IFFALSE 48632
// result := Replace ( result , result + 1 , j ) ;
48601: LD_ADDR_VAR 0 2
48605: PUSH
48606: LD_VAR 0 2
48610: PPUSH
48611: LD_VAR 0 2
48615: PUSH
48616: LD_INT 1
48618: PLUS
48619: PPUSH
48620: LD_VAR 0 7
48624: PPUSH
48625: CALL_OW 1
48629: ST_TO_ADDR
48630: GO 48598
48632: POP
48633: POP
// end ;
48634: GO 48564
48636: POP
48637: POP
// if not result then
48638: LD_VAR 0 2
48642: NOT
48643: IFFALSE 48647
// exit ;
48645: GO 48795
// mech := result [ 1 ] ;
48647: LD_ADDR_VAR 0 5
48651: PUSH
48652: LD_VAR 0 2
48656: PUSH
48657: LD_INT 1
48659: ARRAY
48660: ST_TO_ADDR
// if result > 1 then
48661: LD_VAR 0 2
48665: PUSH
48666: LD_INT 1
48668: GREATER
48669: IFFALSE 48781
// begin for i = 2 to result do
48671: LD_ADDR_VAR 0 3
48675: PUSH
48676: DOUBLE
48677: LD_INT 2
48679: DEC
48680: ST_TO_ADDR
48681: LD_VAR 0 2
48685: PUSH
48686: FOR_TO
48687: IFFALSE 48779
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48689: LD_ADDR_VAR 0 4
48693: PUSH
48694: LD_VAR 0 2
48698: PUSH
48699: LD_VAR 0 3
48703: ARRAY
48704: PPUSH
48705: LD_INT 3
48707: PPUSH
48708: CALL_OW 259
48712: PUSH
48713: LD_VAR 0 2
48717: PUSH
48718: LD_VAR 0 3
48722: ARRAY
48723: PPUSH
48724: CALL_OW 432
48728: MINUS
48729: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48730: LD_VAR 0 4
48734: PUSH
48735: LD_VAR 0 5
48739: PPUSH
48740: LD_INT 3
48742: PPUSH
48743: CALL_OW 259
48747: PUSH
48748: LD_VAR 0 5
48752: PPUSH
48753: CALL_OW 432
48757: MINUS
48758: GREATEREQUAL
48759: IFFALSE 48777
// mech := result [ i ] ;
48761: LD_ADDR_VAR 0 5
48765: PUSH
48766: LD_VAR 0 2
48770: PUSH
48771: LD_VAR 0 3
48775: ARRAY
48776: ST_TO_ADDR
// end ;
48777: GO 48686
48779: POP
48780: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48781: LD_VAR 0 1
48785: PPUSH
48786: LD_VAR 0 5
48790: PPUSH
48791: CALL_OW 135
// end ;
48795: LD_VAR 0 2
48799: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48800: LD_INT 0
48802: PPUSH
48803: PPUSH
48804: PPUSH
48805: PPUSH
48806: PPUSH
48807: PPUSH
48808: PPUSH
48809: PPUSH
48810: PPUSH
48811: PPUSH
48812: PPUSH
48813: PPUSH
48814: PPUSH
// result := [ ] ;
48815: LD_ADDR_VAR 0 7
48819: PUSH
48820: EMPTY
48821: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48822: LD_VAR 0 1
48826: PPUSH
48827: CALL_OW 266
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: LD_INT 1
48837: PUSH
48838: EMPTY
48839: LIST
48840: LIST
48841: IN
48842: NOT
48843: IFFALSE 48847
// exit ;
48845: GO 50481
// if name then
48847: LD_VAR 0 3
48851: IFFALSE 48867
// SetBName ( base_dep , name ) ;
48853: LD_VAR 0 1
48857: PPUSH
48858: LD_VAR 0 3
48862: PPUSH
48863: CALL_OW 500
// base := GetBase ( base_dep ) ;
48867: LD_ADDR_VAR 0 15
48871: PUSH
48872: LD_VAR 0 1
48876: PPUSH
48877: CALL_OW 274
48881: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48882: LD_ADDR_VAR 0 16
48886: PUSH
48887: LD_VAR 0 1
48891: PPUSH
48892: CALL_OW 255
48896: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48897: LD_ADDR_VAR 0 17
48901: PUSH
48902: LD_VAR 0 1
48906: PPUSH
48907: CALL_OW 248
48911: ST_TO_ADDR
// if sources then
48912: LD_VAR 0 5
48916: IFFALSE 48963
// for i = 1 to 3 do
48918: LD_ADDR_VAR 0 8
48922: PUSH
48923: DOUBLE
48924: LD_INT 1
48926: DEC
48927: ST_TO_ADDR
48928: LD_INT 3
48930: PUSH
48931: FOR_TO
48932: IFFALSE 48961
// AddResourceType ( base , i , sources [ i ] ) ;
48934: LD_VAR 0 15
48938: PPUSH
48939: LD_VAR 0 8
48943: PPUSH
48944: LD_VAR 0 5
48948: PUSH
48949: LD_VAR 0 8
48953: ARRAY
48954: PPUSH
48955: CALL_OW 276
48959: GO 48931
48961: POP
48962: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48963: LD_ADDR_VAR 0 18
48967: PUSH
48968: LD_VAR 0 15
48972: PPUSH
48973: LD_VAR 0 2
48977: PPUSH
48978: LD_INT 1
48980: PPUSH
48981: CALL 48224 0 3
48985: ST_TO_ADDR
// InitHc ;
48986: CALL_OW 19
// InitUc ;
48990: CALL_OW 18
// uc_side := side ;
48994: LD_ADDR_OWVAR 20
48998: PUSH
48999: LD_VAR 0 16
49003: ST_TO_ADDR
// uc_nation := nation ;
49004: LD_ADDR_OWVAR 21
49008: PUSH
49009: LD_VAR 0 17
49013: ST_TO_ADDR
// if buildings then
49014: LD_VAR 0 18
49018: IFFALSE 50340
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49020: LD_ADDR_VAR 0 19
49024: PUSH
49025: LD_VAR 0 18
49029: PPUSH
49030: LD_INT 2
49032: PUSH
49033: LD_INT 30
49035: PUSH
49036: LD_INT 29
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 30
49045: PUSH
49046: LD_INT 30
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: LIST
49057: PPUSH
49058: CALL_OW 72
49062: ST_TO_ADDR
// if tmp then
49063: LD_VAR 0 19
49067: IFFALSE 49115
// for i in tmp do
49069: LD_ADDR_VAR 0 8
49073: PUSH
49074: LD_VAR 0 19
49078: PUSH
49079: FOR_IN
49080: IFFALSE 49113
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49082: LD_VAR 0 8
49086: PPUSH
49087: CALL_OW 250
49091: PPUSH
49092: LD_VAR 0 8
49096: PPUSH
49097: CALL_OW 251
49101: PPUSH
49102: LD_VAR 0 16
49106: PPUSH
49107: CALL_OW 441
49111: GO 49079
49113: POP
49114: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49115: LD_VAR 0 18
49119: PPUSH
49120: LD_INT 2
49122: PUSH
49123: LD_INT 30
49125: PUSH
49126: LD_INT 32
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 30
49135: PUSH
49136: LD_INT 33
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: LIST
49147: PPUSH
49148: CALL_OW 72
49152: IFFALSE 49240
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49154: LD_ADDR_VAR 0 8
49158: PUSH
49159: LD_VAR 0 18
49163: PPUSH
49164: LD_INT 2
49166: PUSH
49167: LD_INT 30
49169: PUSH
49170: LD_INT 32
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 30
49179: PUSH
49180: LD_INT 33
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: LIST
49191: PPUSH
49192: CALL_OW 72
49196: PUSH
49197: FOR_IN
49198: IFFALSE 49238
// begin if not GetBWeapon ( i ) then
49200: LD_VAR 0 8
49204: PPUSH
49205: CALL_OW 269
49209: NOT
49210: IFFALSE 49236
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49212: LD_VAR 0 8
49216: PPUSH
49217: LD_VAR 0 8
49221: PPUSH
49222: LD_VAR 0 2
49226: PPUSH
49227: CALL 50486 0 2
49231: PPUSH
49232: CALL_OW 431
// end ;
49236: GO 49197
49238: POP
49239: POP
// end ; for i = 1 to personel do
49240: LD_ADDR_VAR 0 8
49244: PUSH
49245: DOUBLE
49246: LD_INT 1
49248: DEC
49249: ST_TO_ADDR
49250: LD_VAR 0 6
49254: PUSH
49255: FOR_TO
49256: IFFALSE 50320
// begin if i > 4 then
49258: LD_VAR 0 8
49262: PUSH
49263: LD_INT 4
49265: GREATER
49266: IFFALSE 49270
// break ;
49268: GO 50320
// case i of 1 :
49270: LD_VAR 0 8
49274: PUSH
49275: LD_INT 1
49277: DOUBLE
49278: EQUAL
49279: IFTRUE 49283
49281: GO 49363
49283: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49284: LD_ADDR_VAR 0 12
49288: PUSH
49289: LD_VAR 0 18
49293: PPUSH
49294: LD_INT 22
49296: PUSH
49297: LD_VAR 0 16
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 58
49308: PUSH
49309: EMPTY
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: LD_INT 30
49317: PUSH
49318: LD_INT 32
49320: PUSH
49321: EMPTY
49322: LIST
49323: LIST
49324: PUSH
49325: LD_INT 30
49327: PUSH
49328: LD_INT 4
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 30
49337: PUSH
49338: LD_INT 5
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: LIST
49355: PPUSH
49356: CALL_OW 72
49360: ST_TO_ADDR
49361: GO 49585
49363: LD_INT 2
49365: DOUBLE
49366: EQUAL
49367: IFTRUE 49371
49369: GO 49433
49371: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
49372: LD_ADDR_VAR 0 12
49376: PUSH
49377: LD_VAR 0 18
49381: PPUSH
49382: LD_INT 22
49384: PUSH
49385: LD_VAR 0 16
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 2
49396: PUSH
49397: LD_INT 30
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 30
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: LIST
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PPUSH
49426: CALL_OW 72
49430: ST_TO_ADDR
49431: GO 49585
49433: LD_INT 3
49435: DOUBLE
49436: EQUAL
49437: IFTRUE 49441
49439: GO 49503
49441: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49442: LD_ADDR_VAR 0 12
49446: PUSH
49447: LD_VAR 0 18
49451: PPUSH
49452: LD_INT 22
49454: PUSH
49455: LD_VAR 0 16
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: LD_INT 30
49469: PUSH
49470: LD_INT 2
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 30
49479: PUSH
49480: LD_INT 3
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: LIST
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PPUSH
49496: CALL_OW 72
49500: ST_TO_ADDR
49501: GO 49585
49503: LD_INT 4
49505: DOUBLE
49506: EQUAL
49507: IFTRUE 49511
49509: GO 49584
49511: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49512: LD_ADDR_VAR 0 12
49516: PUSH
49517: LD_VAR 0 18
49521: PPUSH
49522: LD_INT 22
49524: PUSH
49525: LD_VAR 0 16
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 2
49536: PUSH
49537: LD_INT 30
49539: PUSH
49540: LD_INT 6
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 30
49549: PUSH
49550: LD_INT 7
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 30
49559: PUSH
49560: LD_INT 8
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PPUSH
49577: CALL_OW 72
49581: ST_TO_ADDR
49582: GO 49585
49584: POP
// if i = 1 then
49585: LD_VAR 0 8
49589: PUSH
49590: LD_INT 1
49592: EQUAL
49593: IFFALSE 49704
// begin tmp := [ ] ;
49595: LD_ADDR_VAR 0 19
49599: PUSH
49600: EMPTY
49601: ST_TO_ADDR
// for j in f do
49602: LD_ADDR_VAR 0 9
49606: PUSH
49607: LD_VAR 0 12
49611: PUSH
49612: FOR_IN
49613: IFFALSE 49686
// if GetBType ( j ) = b_bunker then
49615: LD_VAR 0 9
49619: PPUSH
49620: CALL_OW 266
49624: PUSH
49625: LD_INT 32
49627: EQUAL
49628: IFFALSE 49655
// tmp := Insert ( tmp , 1 , j ) else
49630: LD_ADDR_VAR 0 19
49634: PUSH
49635: LD_VAR 0 19
49639: PPUSH
49640: LD_INT 1
49642: PPUSH
49643: LD_VAR 0 9
49647: PPUSH
49648: CALL_OW 2
49652: ST_TO_ADDR
49653: GO 49684
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49655: LD_ADDR_VAR 0 19
49659: PUSH
49660: LD_VAR 0 19
49664: PPUSH
49665: LD_VAR 0 19
49669: PUSH
49670: LD_INT 1
49672: PLUS
49673: PPUSH
49674: LD_VAR 0 9
49678: PPUSH
49679: CALL_OW 2
49683: ST_TO_ADDR
49684: GO 49612
49686: POP
49687: POP
// if tmp then
49688: LD_VAR 0 19
49692: IFFALSE 49704
// f := tmp ;
49694: LD_ADDR_VAR 0 12
49698: PUSH
49699: LD_VAR 0 19
49703: ST_TO_ADDR
// end ; x := personel [ i ] ;
49704: LD_ADDR_VAR 0 13
49708: PUSH
49709: LD_VAR 0 6
49713: PUSH
49714: LD_VAR 0 8
49718: ARRAY
49719: ST_TO_ADDR
// if x = - 1 then
49720: LD_VAR 0 13
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: EQUAL
49729: IFFALSE 49938
// begin for j in f do
49731: LD_ADDR_VAR 0 9
49735: PUSH
49736: LD_VAR 0 12
49740: PUSH
49741: FOR_IN
49742: IFFALSE 49934
// repeat InitHc ;
49744: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49748: LD_VAR 0 9
49752: PPUSH
49753: CALL_OW 266
49757: PUSH
49758: LD_INT 5
49760: EQUAL
49761: IFFALSE 49831
// begin if UnitsInside ( j ) < 3 then
49763: LD_VAR 0 9
49767: PPUSH
49768: CALL_OW 313
49772: PUSH
49773: LD_INT 3
49775: LESS
49776: IFFALSE 49812
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49778: LD_INT 0
49780: PPUSH
49781: LD_INT 5
49783: PUSH
49784: LD_INT 8
49786: PUSH
49787: LD_INT 9
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: LIST
49794: PUSH
49795: LD_VAR 0 17
49799: ARRAY
49800: PPUSH
49801: LD_VAR 0 4
49805: PPUSH
49806: CALL_OW 380
49810: GO 49829
// PrepareHuman ( false , i , skill ) ;
49812: LD_INT 0
49814: PPUSH
49815: LD_VAR 0 8
49819: PPUSH
49820: LD_VAR 0 4
49824: PPUSH
49825: CALL_OW 380
// end else
49829: GO 49848
// PrepareHuman ( false , i , skill ) ;
49831: LD_INT 0
49833: PPUSH
49834: LD_VAR 0 8
49838: PPUSH
49839: LD_VAR 0 4
49843: PPUSH
49844: CALL_OW 380
// un := CreateHuman ;
49848: LD_ADDR_VAR 0 14
49852: PUSH
49853: CALL_OW 44
49857: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49858: LD_ADDR_VAR 0 7
49862: PUSH
49863: LD_VAR 0 7
49867: PPUSH
49868: LD_INT 1
49870: PPUSH
49871: LD_VAR 0 14
49875: PPUSH
49876: CALL_OW 2
49880: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49881: LD_VAR 0 14
49885: PPUSH
49886: LD_VAR 0 9
49890: PPUSH
49891: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49895: LD_VAR 0 9
49899: PPUSH
49900: CALL_OW 313
49904: PUSH
49905: LD_INT 6
49907: EQUAL
49908: PUSH
49909: LD_VAR 0 9
49913: PPUSH
49914: CALL_OW 266
49918: PUSH
49919: LD_INT 32
49921: PUSH
49922: LD_INT 31
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: IN
49929: OR
49930: IFFALSE 49744
49932: GO 49741
49934: POP
49935: POP
// end else
49936: GO 50318
// for j = 1 to x do
49938: LD_ADDR_VAR 0 9
49942: PUSH
49943: DOUBLE
49944: LD_INT 1
49946: DEC
49947: ST_TO_ADDR
49948: LD_VAR 0 13
49952: PUSH
49953: FOR_TO
49954: IFFALSE 50316
// begin InitHc ;
49956: CALL_OW 19
// if not f then
49960: LD_VAR 0 12
49964: NOT
49965: IFFALSE 50054
// begin PrepareHuman ( false , i , skill ) ;
49967: LD_INT 0
49969: PPUSH
49970: LD_VAR 0 8
49974: PPUSH
49975: LD_VAR 0 4
49979: PPUSH
49980: CALL_OW 380
// un := CreateHuman ;
49984: LD_ADDR_VAR 0 14
49988: PUSH
49989: CALL_OW 44
49993: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49994: LD_ADDR_VAR 0 7
49998: PUSH
49999: LD_VAR 0 7
50003: PPUSH
50004: LD_INT 1
50006: PPUSH
50007: LD_VAR 0 14
50011: PPUSH
50012: CALL_OW 2
50016: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50017: LD_VAR 0 14
50021: PPUSH
50022: LD_VAR 0 1
50026: PPUSH
50027: CALL_OW 250
50031: PPUSH
50032: LD_VAR 0 1
50036: PPUSH
50037: CALL_OW 251
50041: PPUSH
50042: LD_INT 10
50044: PPUSH
50045: LD_INT 0
50047: PPUSH
50048: CALL_OW 50
// continue ;
50052: GO 49953
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50054: LD_VAR 0 12
50058: PUSH
50059: LD_INT 1
50061: ARRAY
50062: PPUSH
50063: CALL_OW 313
50067: PUSH
50068: LD_VAR 0 12
50072: PUSH
50073: LD_INT 1
50075: ARRAY
50076: PPUSH
50077: CALL_OW 266
50081: PUSH
50082: LD_INT 32
50084: PUSH
50085: LD_INT 31
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: IN
50092: AND
50093: PUSH
50094: LD_VAR 0 12
50098: PUSH
50099: LD_INT 1
50101: ARRAY
50102: PPUSH
50103: CALL_OW 313
50107: PUSH
50108: LD_INT 6
50110: EQUAL
50111: OR
50112: IFFALSE 50132
// f := Delete ( f , 1 ) ;
50114: LD_ADDR_VAR 0 12
50118: PUSH
50119: LD_VAR 0 12
50123: PPUSH
50124: LD_INT 1
50126: PPUSH
50127: CALL_OW 3
50131: ST_TO_ADDR
// if not f then
50132: LD_VAR 0 12
50136: NOT
50137: IFFALSE 50155
// begin x := x + 2 ;
50139: LD_ADDR_VAR 0 13
50143: PUSH
50144: LD_VAR 0 13
50148: PUSH
50149: LD_INT 2
50151: PLUS
50152: ST_TO_ADDR
// continue ;
50153: GO 49953
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50155: LD_VAR 0 12
50159: PUSH
50160: LD_INT 1
50162: ARRAY
50163: PPUSH
50164: CALL_OW 266
50168: PUSH
50169: LD_INT 5
50171: EQUAL
50172: IFFALSE 50246
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50174: LD_VAR 0 12
50178: PUSH
50179: LD_INT 1
50181: ARRAY
50182: PPUSH
50183: CALL_OW 313
50187: PUSH
50188: LD_INT 3
50190: LESS
50191: IFFALSE 50227
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50193: LD_INT 0
50195: PPUSH
50196: LD_INT 5
50198: PUSH
50199: LD_INT 8
50201: PUSH
50202: LD_INT 9
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: PUSH
50210: LD_VAR 0 17
50214: ARRAY
50215: PPUSH
50216: LD_VAR 0 4
50220: PPUSH
50221: CALL_OW 380
50225: GO 50244
// PrepareHuman ( false , i , skill ) ;
50227: LD_INT 0
50229: PPUSH
50230: LD_VAR 0 8
50234: PPUSH
50235: LD_VAR 0 4
50239: PPUSH
50240: CALL_OW 380
// end else
50244: GO 50263
// PrepareHuman ( false , i , skill ) ;
50246: LD_INT 0
50248: PPUSH
50249: LD_VAR 0 8
50253: PPUSH
50254: LD_VAR 0 4
50258: PPUSH
50259: CALL_OW 380
// un := CreateHuman ;
50263: LD_ADDR_VAR 0 14
50267: PUSH
50268: CALL_OW 44
50272: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50273: LD_ADDR_VAR 0 7
50277: PUSH
50278: LD_VAR 0 7
50282: PPUSH
50283: LD_INT 1
50285: PPUSH
50286: LD_VAR 0 14
50290: PPUSH
50291: CALL_OW 2
50295: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50296: LD_VAR 0 14
50300: PPUSH
50301: LD_VAR 0 12
50305: PUSH
50306: LD_INT 1
50308: ARRAY
50309: PPUSH
50310: CALL_OW 52
// end ;
50314: GO 49953
50316: POP
50317: POP
// end ;
50318: GO 49255
50320: POP
50321: POP
// result := result ^ buildings ;
50322: LD_ADDR_VAR 0 7
50326: PUSH
50327: LD_VAR 0 7
50331: PUSH
50332: LD_VAR 0 18
50336: ADD
50337: ST_TO_ADDR
// end else
50338: GO 50481
// begin for i = 1 to personel do
50340: LD_ADDR_VAR 0 8
50344: PUSH
50345: DOUBLE
50346: LD_INT 1
50348: DEC
50349: ST_TO_ADDR
50350: LD_VAR 0 6
50354: PUSH
50355: FOR_TO
50356: IFFALSE 50479
// begin if i > 4 then
50358: LD_VAR 0 8
50362: PUSH
50363: LD_INT 4
50365: GREATER
50366: IFFALSE 50370
// break ;
50368: GO 50479
// x := personel [ i ] ;
50370: LD_ADDR_VAR 0 13
50374: PUSH
50375: LD_VAR 0 6
50379: PUSH
50380: LD_VAR 0 8
50384: ARRAY
50385: ST_TO_ADDR
// if x = - 1 then
50386: LD_VAR 0 13
50390: PUSH
50391: LD_INT 1
50393: NEG
50394: EQUAL
50395: IFFALSE 50399
// continue ;
50397: GO 50355
// PrepareHuman ( false , i , skill ) ;
50399: LD_INT 0
50401: PPUSH
50402: LD_VAR 0 8
50406: PPUSH
50407: LD_VAR 0 4
50411: PPUSH
50412: CALL_OW 380
// un := CreateHuman ;
50416: LD_ADDR_VAR 0 14
50420: PUSH
50421: CALL_OW 44
50425: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50426: LD_VAR 0 14
50430: PPUSH
50431: LD_VAR 0 1
50435: PPUSH
50436: CALL_OW 250
50440: PPUSH
50441: LD_VAR 0 1
50445: PPUSH
50446: CALL_OW 251
50450: PPUSH
50451: LD_INT 10
50453: PPUSH
50454: LD_INT 0
50456: PPUSH
50457: CALL_OW 50
// result := result ^ un ;
50461: LD_ADDR_VAR 0 7
50465: PUSH
50466: LD_VAR 0 7
50470: PUSH
50471: LD_VAR 0 14
50475: ADD
50476: ST_TO_ADDR
// end ;
50477: GO 50355
50479: POP
50480: POP
// end ; end ;
50481: LD_VAR 0 7
50485: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50486: LD_INT 0
50488: PPUSH
50489: PPUSH
50490: PPUSH
50491: PPUSH
50492: PPUSH
50493: PPUSH
50494: PPUSH
50495: PPUSH
50496: PPUSH
50497: PPUSH
50498: PPUSH
50499: PPUSH
50500: PPUSH
50501: PPUSH
50502: PPUSH
50503: PPUSH
// result := false ;
50504: LD_ADDR_VAR 0 3
50508: PUSH
50509: LD_INT 0
50511: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50512: LD_VAR 0 1
50516: NOT
50517: PUSH
50518: LD_VAR 0 1
50522: PPUSH
50523: CALL_OW 266
50527: PUSH
50528: LD_INT 32
50530: PUSH
50531: LD_INT 33
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: IN
50538: NOT
50539: OR
50540: IFFALSE 50544
// exit ;
50542: GO 51653
// nat := GetNation ( tower ) ;
50544: LD_ADDR_VAR 0 12
50548: PUSH
50549: LD_VAR 0 1
50553: PPUSH
50554: CALL_OW 248
50558: ST_TO_ADDR
// side := GetSide ( tower ) ;
50559: LD_ADDR_VAR 0 16
50563: PUSH
50564: LD_VAR 0 1
50568: PPUSH
50569: CALL_OW 255
50573: ST_TO_ADDR
// x := GetX ( tower ) ;
50574: LD_ADDR_VAR 0 10
50578: PUSH
50579: LD_VAR 0 1
50583: PPUSH
50584: CALL_OW 250
50588: ST_TO_ADDR
// y := GetY ( tower ) ;
50589: LD_ADDR_VAR 0 11
50593: PUSH
50594: LD_VAR 0 1
50598: PPUSH
50599: CALL_OW 251
50603: ST_TO_ADDR
// if not x or not y then
50604: LD_VAR 0 10
50608: NOT
50609: PUSH
50610: LD_VAR 0 11
50614: NOT
50615: OR
50616: IFFALSE 50620
// exit ;
50618: GO 51653
// weapon := 0 ;
50620: LD_ADDR_VAR 0 18
50624: PUSH
50625: LD_INT 0
50627: ST_TO_ADDR
// fac_list := [ ] ;
50628: LD_ADDR_VAR 0 17
50632: PUSH
50633: EMPTY
50634: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50635: LD_ADDR_VAR 0 6
50639: PUSH
50640: LD_VAR 0 1
50644: PPUSH
50645: CALL_OW 274
50649: PPUSH
50650: LD_VAR 0 2
50654: PPUSH
50655: LD_INT 0
50657: PPUSH
50658: CALL 48224 0 3
50662: PPUSH
50663: LD_INT 30
50665: PUSH
50666: LD_INT 3
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PPUSH
50673: CALL_OW 72
50677: ST_TO_ADDR
// if not factories then
50678: LD_VAR 0 6
50682: NOT
50683: IFFALSE 50687
// exit ;
50685: GO 51653
// for i in factories do
50687: LD_ADDR_VAR 0 8
50691: PUSH
50692: LD_VAR 0 6
50696: PUSH
50697: FOR_IN
50698: IFFALSE 50723
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50700: LD_ADDR_VAR 0 17
50704: PUSH
50705: LD_VAR 0 17
50709: PUSH
50710: LD_VAR 0 8
50714: PPUSH
50715: CALL_OW 478
50719: UNION
50720: ST_TO_ADDR
50721: GO 50697
50723: POP
50724: POP
// if not fac_list then
50725: LD_VAR 0 17
50729: NOT
50730: IFFALSE 50734
// exit ;
50732: GO 51653
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50734: LD_ADDR_VAR 0 5
50738: PUSH
50739: LD_INT 4
50741: PUSH
50742: LD_INT 5
50744: PUSH
50745: LD_INT 9
50747: PUSH
50748: LD_INT 10
50750: PUSH
50751: LD_INT 6
50753: PUSH
50754: LD_INT 7
50756: PUSH
50757: LD_INT 11
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 27
50771: PUSH
50772: LD_INT 28
50774: PUSH
50775: LD_INT 26
50777: PUSH
50778: LD_INT 30
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 43
50789: PUSH
50790: LD_INT 44
50792: PUSH
50793: LD_INT 46
50795: PUSH
50796: LD_INT 45
50798: PUSH
50799: LD_INT 47
50801: PUSH
50802: LD_INT 49
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: LIST
50817: PUSH
50818: LD_VAR 0 12
50822: ARRAY
50823: ST_TO_ADDR
// list := list isect fac_list ;
50824: LD_ADDR_VAR 0 5
50828: PUSH
50829: LD_VAR 0 5
50833: PUSH
50834: LD_VAR 0 17
50838: ISECT
50839: ST_TO_ADDR
// if not list then
50840: LD_VAR 0 5
50844: NOT
50845: IFFALSE 50849
// exit ;
50847: GO 51653
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50849: LD_VAR 0 12
50853: PUSH
50854: LD_INT 3
50856: EQUAL
50857: PUSH
50858: LD_INT 49
50860: PUSH
50861: LD_VAR 0 5
50865: IN
50866: AND
50867: PUSH
50868: LD_INT 31
50870: PPUSH
50871: LD_VAR 0 16
50875: PPUSH
50876: CALL_OW 321
50880: PUSH
50881: LD_INT 2
50883: EQUAL
50884: AND
50885: IFFALSE 50945
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50887: LD_INT 22
50889: PUSH
50890: LD_VAR 0 16
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 35
50901: PUSH
50902: LD_INT 49
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 91
50911: PUSH
50912: LD_VAR 0 1
50916: PUSH
50917: LD_INT 10
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: LIST
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: LIST
50929: PPUSH
50930: CALL_OW 69
50934: NOT
50935: IFFALSE 50945
// weapon := ru_time_lapser ;
50937: LD_ADDR_VAR 0 18
50941: PUSH
50942: LD_INT 49
50944: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50945: LD_VAR 0 12
50949: PUSH
50950: LD_INT 1
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: IN
50960: PUSH
50961: LD_INT 11
50963: PUSH
50964: LD_VAR 0 5
50968: IN
50969: PUSH
50970: LD_INT 30
50972: PUSH
50973: LD_VAR 0 5
50977: IN
50978: OR
50979: AND
50980: PUSH
50981: LD_INT 6
50983: PPUSH
50984: LD_VAR 0 16
50988: PPUSH
50989: CALL_OW 321
50993: PUSH
50994: LD_INT 2
50996: EQUAL
50997: AND
50998: IFFALSE 51163
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51000: LD_INT 22
51002: PUSH
51003: LD_VAR 0 16
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: LD_INT 35
51017: PUSH
51018: LD_INT 11
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 35
51027: PUSH
51028: LD_INT 30
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 91
51042: PUSH
51043: LD_VAR 0 1
51047: PUSH
51048: LD_INT 18
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: LIST
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: LIST
51060: PPUSH
51061: CALL_OW 69
51065: NOT
51066: PUSH
51067: LD_INT 22
51069: PUSH
51070: LD_VAR 0 16
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 2
51081: PUSH
51082: LD_INT 30
51084: PUSH
51085: LD_INT 32
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 30
51094: PUSH
51095: LD_INT 33
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 91
51109: PUSH
51110: LD_VAR 0 1
51114: PUSH
51115: LD_INT 12
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: LIST
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: LIST
51127: PUSH
51128: EMPTY
51129: LIST
51130: PPUSH
51131: CALL_OW 69
51135: PUSH
51136: LD_INT 2
51138: GREATER
51139: AND
51140: IFFALSE 51163
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51142: LD_ADDR_VAR 0 18
51146: PUSH
51147: LD_INT 11
51149: PUSH
51150: LD_INT 30
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_VAR 0 12
51161: ARRAY
51162: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51163: LD_VAR 0 18
51167: NOT
51168: PUSH
51169: LD_INT 40
51171: PPUSH
51172: LD_VAR 0 16
51176: PPUSH
51177: CALL_OW 321
51181: PUSH
51182: LD_INT 2
51184: EQUAL
51185: AND
51186: PUSH
51187: LD_INT 7
51189: PUSH
51190: LD_VAR 0 5
51194: IN
51195: PUSH
51196: LD_INT 28
51198: PUSH
51199: LD_VAR 0 5
51203: IN
51204: OR
51205: PUSH
51206: LD_INT 45
51208: PUSH
51209: LD_VAR 0 5
51213: IN
51214: OR
51215: AND
51216: IFFALSE 51470
// begin hex := GetHexInfo ( x , y ) ;
51218: LD_ADDR_VAR 0 4
51222: PUSH
51223: LD_VAR 0 10
51227: PPUSH
51228: LD_VAR 0 11
51232: PPUSH
51233: CALL_OW 546
51237: ST_TO_ADDR
// if hex [ 1 ] then
51238: LD_VAR 0 4
51242: PUSH
51243: LD_INT 1
51245: ARRAY
51246: IFFALSE 51250
// exit ;
51248: GO 51653
// height := hex [ 2 ] ;
51250: LD_ADDR_VAR 0 15
51254: PUSH
51255: LD_VAR 0 4
51259: PUSH
51260: LD_INT 2
51262: ARRAY
51263: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51264: LD_ADDR_VAR 0 14
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: LD_INT 5
51280: PUSH
51281: EMPTY
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: ST_TO_ADDR
// for i in tmp do
51287: LD_ADDR_VAR 0 8
51291: PUSH
51292: LD_VAR 0 14
51296: PUSH
51297: FOR_IN
51298: IFFALSE 51468
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51300: LD_ADDR_VAR 0 9
51304: PUSH
51305: LD_VAR 0 10
51309: PPUSH
51310: LD_VAR 0 8
51314: PPUSH
51315: LD_INT 5
51317: PPUSH
51318: CALL_OW 272
51322: PUSH
51323: LD_VAR 0 11
51327: PPUSH
51328: LD_VAR 0 8
51332: PPUSH
51333: LD_INT 5
51335: PPUSH
51336: CALL_OW 273
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
51345: LD_VAR 0 9
51349: PUSH
51350: LD_INT 1
51352: ARRAY
51353: PPUSH
51354: LD_VAR 0 9
51358: PUSH
51359: LD_INT 2
51361: ARRAY
51362: PPUSH
51363: CALL_OW 488
51367: IFFALSE 51466
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
51369: LD_ADDR_VAR 0 4
51373: PUSH
51374: LD_VAR 0 9
51378: PUSH
51379: LD_INT 1
51381: ARRAY
51382: PPUSH
51383: LD_VAR 0 9
51387: PUSH
51388: LD_INT 2
51390: ARRAY
51391: PPUSH
51392: CALL_OW 546
51396: ST_TO_ADDR
// if hex [ 1 ] then
51397: LD_VAR 0 4
51401: PUSH
51402: LD_INT 1
51404: ARRAY
51405: IFFALSE 51409
// continue ;
51407: GO 51297
// h := hex [ 2 ] ;
51409: LD_ADDR_VAR 0 13
51413: PUSH
51414: LD_VAR 0 4
51418: PUSH
51419: LD_INT 2
51421: ARRAY
51422: ST_TO_ADDR
// if h + 7 < height then
51423: LD_VAR 0 13
51427: PUSH
51428: LD_INT 7
51430: PLUS
51431: PUSH
51432: LD_VAR 0 15
51436: LESS
51437: IFFALSE 51466
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51439: LD_ADDR_VAR 0 18
51443: PUSH
51444: LD_INT 7
51446: PUSH
51447: LD_INT 28
51449: PUSH
51450: LD_INT 45
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: LIST
51457: PUSH
51458: LD_VAR 0 12
51462: ARRAY
51463: ST_TO_ADDR
// break ;
51464: GO 51468
// end ; end ; end ;
51466: GO 51297
51468: POP
51469: POP
// end ; if not weapon then
51470: LD_VAR 0 18
51474: NOT
51475: IFFALSE 51535
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51477: LD_ADDR_VAR 0 5
51481: PUSH
51482: LD_VAR 0 5
51486: PUSH
51487: LD_INT 11
51489: PUSH
51490: LD_INT 30
51492: PUSH
51493: LD_INT 49
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: LIST
51500: DIFF
51501: ST_TO_ADDR
// if not list then
51502: LD_VAR 0 5
51506: NOT
51507: IFFALSE 51511
// exit ;
51509: GO 51653
// weapon := list [ rand ( 1 , list ) ] ;
51511: LD_ADDR_VAR 0 18
51515: PUSH
51516: LD_VAR 0 5
51520: PUSH
51521: LD_INT 1
51523: PPUSH
51524: LD_VAR 0 5
51528: PPUSH
51529: CALL_OW 12
51533: ARRAY
51534: ST_TO_ADDR
// end ; if weapon then
51535: LD_VAR 0 18
51539: IFFALSE 51653
// begin tmp := CostOfWeapon ( weapon ) ;
51541: LD_ADDR_VAR 0 14
51545: PUSH
51546: LD_VAR 0 18
51550: PPUSH
51551: CALL_OW 451
51555: ST_TO_ADDR
// j := GetBase ( tower ) ;
51556: LD_ADDR_VAR 0 9
51560: PUSH
51561: LD_VAR 0 1
51565: PPUSH
51566: CALL_OW 274
51570: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51571: LD_VAR 0 9
51575: PPUSH
51576: LD_INT 1
51578: PPUSH
51579: CALL_OW 275
51583: PUSH
51584: LD_VAR 0 14
51588: PUSH
51589: LD_INT 1
51591: ARRAY
51592: GREATEREQUAL
51593: PUSH
51594: LD_VAR 0 9
51598: PPUSH
51599: LD_INT 2
51601: PPUSH
51602: CALL_OW 275
51606: PUSH
51607: LD_VAR 0 14
51611: PUSH
51612: LD_INT 2
51614: ARRAY
51615: GREATEREQUAL
51616: AND
51617: PUSH
51618: LD_VAR 0 9
51622: PPUSH
51623: LD_INT 3
51625: PPUSH
51626: CALL_OW 275
51630: PUSH
51631: LD_VAR 0 14
51635: PUSH
51636: LD_INT 3
51638: ARRAY
51639: GREATEREQUAL
51640: AND
51641: IFFALSE 51653
// result := weapon ;
51643: LD_ADDR_VAR 0 3
51647: PUSH
51648: LD_VAR 0 18
51652: ST_TO_ADDR
// end ; end ;
51653: LD_VAR 0 3
51657: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51658: LD_INT 0
51660: PPUSH
51661: PPUSH
// result := true ;
51662: LD_ADDR_VAR 0 3
51666: PUSH
51667: LD_INT 1
51669: ST_TO_ADDR
// if array1 = array2 then
51670: LD_VAR 0 1
51674: PUSH
51675: LD_VAR 0 2
51679: EQUAL
51680: IFFALSE 51740
// begin for i = 1 to array1 do
51682: LD_ADDR_VAR 0 4
51686: PUSH
51687: DOUBLE
51688: LD_INT 1
51690: DEC
51691: ST_TO_ADDR
51692: LD_VAR 0 1
51696: PUSH
51697: FOR_TO
51698: IFFALSE 51736
// if array1 [ i ] <> array2 [ i ] then
51700: LD_VAR 0 1
51704: PUSH
51705: LD_VAR 0 4
51709: ARRAY
51710: PUSH
51711: LD_VAR 0 2
51715: PUSH
51716: LD_VAR 0 4
51720: ARRAY
51721: NONEQUAL
51722: IFFALSE 51734
// begin result := false ;
51724: LD_ADDR_VAR 0 3
51728: PUSH
51729: LD_INT 0
51731: ST_TO_ADDR
// break ;
51732: GO 51736
// end ;
51734: GO 51697
51736: POP
51737: POP
// end else
51738: GO 51748
// result := false ;
51740: LD_ADDR_VAR 0 3
51744: PUSH
51745: LD_INT 0
51747: ST_TO_ADDR
// end ;
51748: LD_VAR 0 3
51752: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51753: LD_INT 0
51755: PPUSH
51756: PPUSH
// if not array1 or not array2 then
51757: LD_VAR 0 1
51761: NOT
51762: PUSH
51763: LD_VAR 0 2
51767: NOT
51768: OR
51769: IFFALSE 51773
// exit ;
51771: GO 51837
// result := true ;
51773: LD_ADDR_VAR 0 3
51777: PUSH
51778: LD_INT 1
51780: ST_TO_ADDR
// for i = 1 to array1 do
51781: LD_ADDR_VAR 0 4
51785: PUSH
51786: DOUBLE
51787: LD_INT 1
51789: DEC
51790: ST_TO_ADDR
51791: LD_VAR 0 1
51795: PUSH
51796: FOR_TO
51797: IFFALSE 51835
// if array1 [ i ] <> array2 [ i ] then
51799: LD_VAR 0 1
51803: PUSH
51804: LD_VAR 0 4
51808: ARRAY
51809: PUSH
51810: LD_VAR 0 2
51814: PUSH
51815: LD_VAR 0 4
51819: ARRAY
51820: NONEQUAL
51821: IFFALSE 51833
// begin result := false ;
51823: LD_ADDR_VAR 0 3
51827: PUSH
51828: LD_INT 0
51830: ST_TO_ADDR
// break ;
51831: GO 51835
// end ;
51833: GO 51796
51835: POP
51836: POP
// end ;
51837: LD_VAR 0 3
51841: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51842: LD_INT 0
51844: PPUSH
51845: PPUSH
51846: PPUSH
// pom := GetBase ( fac ) ;
51847: LD_ADDR_VAR 0 5
51851: PUSH
51852: LD_VAR 0 1
51856: PPUSH
51857: CALL_OW 274
51861: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51862: LD_ADDR_VAR 0 4
51866: PUSH
51867: LD_VAR 0 2
51871: PUSH
51872: LD_INT 1
51874: ARRAY
51875: PPUSH
51876: LD_VAR 0 2
51880: PUSH
51881: LD_INT 2
51883: ARRAY
51884: PPUSH
51885: LD_VAR 0 2
51889: PUSH
51890: LD_INT 3
51892: ARRAY
51893: PPUSH
51894: LD_VAR 0 2
51898: PUSH
51899: LD_INT 4
51901: ARRAY
51902: PPUSH
51903: CALL_OW 449
51907: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51908: LD_ADDR_VAR 0 3
51912: PUSH
51913: LD_VAR 0 5
51917: PPUSH
51918: LD_INT 1
51920: PPUSH
51921: CALL_OW 275
51925: PUSH
51926: LD_VAR 0 4
51930: PUSH
51931: LD_INT 1
51933: ARRAY
51934: GREATEREQUAL
51935: PUSH
51936: LD_VAR 0 5
51940: PPUSH
51941: LD_INT 2
51943: PPUSH
51944: CALL_OW 275
51948: PUSH
51949: LD_VAR 0 4
51953: PUSH
51954: LD_INT 2
51956: ARRAY
51957: GREATEREQUAL
51958: AND
51959: PUSH
51960: LD_VAR 0 5
51964: PPUSH
51965: LD_INT 3
51967: PPUSH
51968: CALL_OW 275
51972: PUSH
51973: LD_VAR 0 4
51977: PUSH
51978: LD_INT 3
51980: ARRAY
51981: GREATEREQUAL
51982: AND
51983: ST_TO_ADDR
// end ;
51984: LD_VAR 0 3
51988: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51989: LD_INT 0
51991: PPUSH
51992: PPUSH
51993: PPUSH
51994: PPUSH
// pom := GetBase ( building ) ;
51995: LD_ADDR_VAR 0 3
51999: PUSH
52000: LD_VAR 0 1
52004: PPUSH
52005: CALL_OW 274
52009: ST_TO_ADDR
// if not pom then
52010: LD_VAR 0 3
52014: NOT
52015: IFFALSE 52019
// exit ;
52017: GO 52189
// btype := GetBType ( building ) ;
52019: LD_ADDR_VAR 0 5
52023: PUSH
52024: LD_VAR 0 1
52028: PPUSH
52029: CALL_OW 266
52033: ST_TO_ADDR
// if btype = b_armoury then
52034: LD_VAR 0 5
52038: PUSH
52039: LD_INT 4
52041: EQUAL
52042: IFFALSE 52052
// btype := b_barracks ;
52044: LD_ADDR_VAR 0 5
52048: PUSH
52049: LD_INT 5
52051: ST_TO_ADDR
// if btype = b_depot then
52052: LD_VAR 0 5
52056: PUSH
52057: LD_INT 0
52059: EQUAL
52060: IFFALSE 52070
// btype := b_warehouse ;
52062: LD_ADDR_VAR 0 5
52066: PUSH
52067: LD_INT 1
52069: ST_TO_ADDR
// if btype = b_workshop then
52070: LD_VAR 0 5
52074: PUSH
52075: LD_INT 2
52077: EQUAL
52078: IFFALSE 52088
// btype := b_factory ;
52080: LD_ADDR_VAR 0 5
52084: PUSH
52085: LD_INT 3
52087: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52088: LD_ADDR_VAR 0 4
52092: PUSH
52093: LD_VAR 0 5
52097: PPUSH
52098: LD_VAR 0 1
52102: PPUSH
52103: CALL_OW 248
52107: PPUSH
52108: CALL_OW 450
52112: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52113: LD_ADDR_VAR 0 2
52117: PUSH
52118: LD_VAR 0 3
52122: PPUSH
52123: LD_INT 1
52125: PPUSH
52126: CALL_OW 275
52130: PUSH
52131: LD_VAR 0 4
52135: PUSH
52136: LD_INT 1
52138: ARRAY
52139: GREATEREQUAL
52140: PUSH
52141: LD_VAR 0 3
52145: PPUSH
52146: LD_INT 2
52148: PPUSH
52149: CALL_OW 275
52153: PUSH
52154: LD_VAR 0 4
52158: PUSH
52159: LD_INT 2
52161: ARRAY
52162: GREATEREQUAL
52163: AND
52164: PUSH
52165: LD_VAR 0 3
52169: PPUSH
52170: LD_INT 3
52172: PPUSH
52173: CALL_OW 275
52177: PUSH
52178: LD_VAR 0 4
52182: PUSH
52183: LD_INT 3
52185: ARRAY
52186: GREATEREQUAL
52187: AND
52188: ST_TO_ADDR
// end ;
52189: LD_VAR 0 2
52193: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52194: LD_INT 0
52196: PPUSH
52197: PPUSH
52198: PPUSH
// pom := GetBase ( building ) ;
52199: LD_ADDR_VAR 0 4
52203: PUSH
52204: LD_VAR 0 1
52208: PPUSH
52209: CALL_OW 274
52213: ST_TO_ADDR
// if not pom then
52214: LD_VAR 0 4
52218: NOT
52219: IFFALSE 52223
// exit ;
52221: GO 52324
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52223: LD_ADDR_VAR 0 5
52227: PUSH
52228: LD_VAR 0 2
52232: PPUSH
52233: LD_VAR 0 1
52237: PPUSH
52238: CALL_OW 248
52242: PPUSH
52243: CALL_OW 450
52247: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52248: LD_ADDR_VAR 0 3
52252: PUSH
52253: LD_VAR 0 4
52257: PPUSH
52258: LD_INT 1
52260: PPUSH
52261: CALL_OW 275
52265: PUSH
52266: LD_VAR 0 5
52270: PUSH
52271: LD_INT 1
52273: ARRAY
52274: GREATEREQUAL
52275: PUSH
52276: LD_VAR 0 4
52280: PPUSH
52281: LD_INT 2
52283: PPUSH
52284: CALL_OW 275
52288: PUSH
52289: LD_VAR 0 5
52293: PUSH
52294: LD_INT 2
52296: ARRAY
52297: GREATEREQUAL
52298: AND
52299: PUSH
52300: LD_VAR 0 4
52304: PPUSH
52305: LD_INT 3
52307: PPUSH
52308: CALL_OW 275
52312: PUSH
52313: LD_VAR 0 5
52317: PUSH
52318: LD_INT 3
52320: ARRAY
52321: GREATEREQUAL
52322: AND
52323: ST_TO_ADDR
// end ;
52324: LD_VAR 0 3
52328: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
52329: LD_INT 0
52331: PPUSH
52332: PPUSH
52333: PPUSH
52334: PPUSH
52335: PPUSH
52336: PPUSH
52337: PPUSH
52338: PPUSH
52339: PPUSH
52340: PPUSH
52341: PPUSH
// result := false ;
52342: LD_ADDR_VAR 0 8
52346: PUSH
52347: LD_INT 0
52349: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
52350: LD_VAR 0 5
52354: NOT
52355: PUSH
52356: LD_VAR 0 1
52360: NOT
52361: OR
52362: PUSH
52363: LD_VAR 0 2
52367: NOT
52368: OR
52369: PUSH
52370: LD_VAR 0 3
52374: NOT
52375: OR
52376: IFFALSE 52380
// exit ;
52378: GO 53194
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
52380: LD_ADDR_VAR 0 14
52384: PUSH
52385: LD_VAR 0 1
52389: PPUSH
52390: LD_VAR 0 2
52394: PPUSH
52395: LD_VAR 0 3
52399: PPUSH
52400: LD_VAR 0 4
52404: PPUSH
52405: LD_VAR 0 5
52409: PUSH
52410: LD_INT 1
52412: ARRAY
52413: PPUSH
52414: CALL_OW 248
52418: PPUSH
52419: LD_INT 0
52421: PPUSH
52422: CALL 54447 0 6
52426: ST_TO_ADDR
// if not hexes then
52427: LD_VAR 0 14
52431: NOT
52432: IFFALSE 52436
// exit ;
52434: GO 53194
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52436: LD_ADDR_VAR 0 17
52440: PUSH
52441: LD_VAR 0 5
52445: PPUSH
52446: LD_INT 22
52448: PUSH
52449: LD_VAR 0 13
52453: PPUSH
52454: CALL_OW 255
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: LD_INT 30
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 30
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: LIST
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PPUSH
52495: CALL_OW 72
52499: ST_TO_ADDR
// for i = 1 to hexes do
52500: LD_ADDR_VAR 0 9
52504: PUSH
52505: DOUBLE
52506: LD_INT 1
52508: DEC
52509: ST_TO_ADDR
52510: LD_VAR 0 14
52514: PUSH
52515: FOR_TO
52516: IFFALSE 53192
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52518: LD_ADDR_VAR 0 13
52522: PUSH
52523: LD_VAR 0 14
52527: PUSH
52528: LD_VAR 0 9
52532: ARRAY
52533: PUSH
52534: LD_INT 1
52536: ARRAY
52537: PPUSH
52538: LD_VAR 0 14
52542: PUSH
52543: LD_VAR 0 9
52547: ARRAY
52548: PUSH
52549: LD_INT 2
52551: ARRAY
52552: PPUSH
52553: CALL_OW 428
52557: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52558: LD_VAR 0 14
52562: PUSH
52563: LD_VAR 0 9
52567: ARRAY
52568: PUSH
52569: LD_INT 1
52571: ARRAY
52572: PPUSH
52573: LD_VAR 0 14
52577: PUSH
52578: LD_VAR 0 9
52582: ARRAY
52583: PUSH
52584: LD_INT 2
52586: ARRAY
52587: PPUSH
52588: CALL_OW 351
52592: PUSH
52593: LD_VAR 0 14
52597: PUSH
52598: LD_VAR 0 9
52602: ARRAY
52603: PUSH
52604: LD_INT 1
52606: ARRAY
52607: PPUSH
52608: LD_VAR 0 14
52612: PUSH
52613: LD_VAR 0 9
52617: ARRAY
52618: PUSH
52619: LD_INT 2
52621: ARRAY
52622: PPUSH
52623: CALL_OW 488
52627: NOT
52628: OR
52629: PUSH
52630: LD_VAR 0 13
52634: PPUSH
52635: CALL_OW 247
52639: PUSH
52640: LD_INT 3
52642: EQUAL
52643: OR
52644: IFFALSE 52650
// exit ;
52646: POP
52647: POP
52648: GO 53194
// if not tmp then
52650: LD_VAR 0 13
52654: NOT
52655: IFFALSE 52659
// continue ;
52657: GO 52515
// result := true ;
52659: LD_ADDR_VAR 0 8
52663: PUSH
52664: LD_INT 1
52666: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52667: LD_VAR 0 6
52671: PUSH
52672: LD_VAR 0 13
52676: PPUSH
52677: CALL_OW 247
52681: PUSH
52682: LD_INT 2
52684: EQUAL
52685: AND
52686: PUSH
52687: LD_VAR 0 13
52691: PPUSH
52692: CALL_OW 263
52696: PUSH
52697: LD_INT 1
52699: EQUAL
52700: AND
52701: IFFALSE 52865
// begin if IsDrivenBy ( tmp ) then
52703: LD_VAR 0 13
52707: PPUSH
52708: CALL_OW 311
52712: IFFALSE 52716
// continue ;
52714: GO 52515
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52716: LD_VAR 0 6
52720: PPUSH
52721: LD_INT 3
52723: PUSH
52724: LD_INT 60
52726: PUSH
52727: EMPTY
52728: LIST
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 3
52736: PUSH
52737: LD_INT 55
52739: PUSH
52740: EMPTY
52741: LIST
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PPUSH
52751: CALL_OW 72
52755: IFFALSE 52863
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52757: LD_ADDR_VAR 0 18
52761: PUSH
52762: LD_VAR 0 6
52766: PPUSH
52767: LD_INT 3
52769: PUSH
52770: LD_INT 60
52772: PUSH
52773: EMPTY
52774: LIST
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 3
52782: PUSH
52783: LD_INT 55
52785: PUSH
52786: EMPTY
52787: LIST
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PPUSH
52797: CALL_OW 72
52801: PUSH
52802: LD_INT 1
52804: ARRAY
52805: ST_TO_ADDR
// if IsInUnit ( driver ) then
52806: LD_VAR 0 18
52810: PPUSH
52811: CALL_OW 310
52815: IFFALSE 52826
// ComExit ( driver ) ;
52817: LD_VAR 0 18
52821: PPUSH
52822: CALL 78228 0 1
// AddComEnterUnit ( driver , tmp ) ;
52826: LD_VAR 0 18
52830: PPUSH
52831: LD_VAR 0 13
52835: PPUSH
52836: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52840: LD_VAR 0 18
52844: PPUSH
52845: LD_VAR 0 7
52849: PPUSH
52850: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52854: LD_VAR 0 18
52858: PPUSH
52859: CALL_OW 181
// end ; continue ;
52863: GO 52515
// end ; if not cleaners or not tmp in cleaners then
52865: LD_VAR 0 6
52869: NOT
52870: PUSH
52871: LD_VAR 0 13
52875: PUSH
52876: LD_VAR 0 6
52880: IN
52881: NOT
52882: OR
52883: IFFALSE 53190
// begin if dep then
52885: LD_VAR 0 17
52889: IFFALSE 53025
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52891: LD_ADDR_VAR 0 16
52895: PUSH
52896: LD_VAR 0 17
52900: PUSH
52901: LD_INT 1
52903: ARRAY
52904: PPUSH
52905: CALL_OW 250
52909: PPUSH
52910: LD_VAR 0 17
52914: PUSH
52915: LD_INT 1
52917: ARRAY
52918: PPUSH
52919: CALL_OW 254
52923: PPUSH
52924: LD_INT 5
52926: PPUSH
52927: CALL_OW 272
52931: PUSH
52932: LD_VAR 0 17
52936: PUSH
52937: LD_INT 1
52939: ARRAY
52940: PPUSH
52941: CALL_OW 251
52945: PPUSH
52946: LD_VAR 0 17
52950: PUSH
52951: LD_INT 1
52953: ARRAY
52954: PPUSH
52955: CALL_OW 254
52959: PPUSH
52960: LD_INT 5
52962: PPUSH
52963: CALL_OW 273
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52972: LD_VAR 0 16
52976: PUSH
52977: LD_INT 1
52979: ARRAY
52980: PPUSH
52981: LD_VAR 0 16
52985: PUSH
52986: LD_INT 2
52988: ARRAY
52989: PPUSH
52990: CALL_OW 488
52994: IFFALSE 53025
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52996: LD_VAR 0 13
53000: PPUSH
53001: LD_VAR 0 16
53005: PUSH
53006: LD_INT 1
53008: ARRAY
53009: PPUSH
53010: LD_VAR 0 16
53014: PUSH
53015: LD_INT 2
53017: ARRAY
53018: PPUSH
53019: CALL_OW 111
// continue ;
53023: GO 52515
// end ; end ; r := GetDir ( tmp ) ;
53025: LD_ADDR_VAR 0 15
53029: PUSH
53030: LD_VAR 0 13
53034: PPUSH
53035: CALL_OW 254
53039: ST_TO_ADDR
// if r = 5 then
53040: LD_VAR 0 15
53044: PUSH
53045: LD_INT 5
53047: EQUAL
53048: IFFALSE 53058
// r := 0 ;
53050: LD_ADDR_VAR 0 15
53054: PUSH
53055: LD_INT 0
53057: ST_TO_ADDR
// for j = r to 5 do
53058: LD_ADDR_VAR 0 10
53062: PUSH
53063: DOUBLE
53064: LD_VAR 0 15
53068: DEC
53069: ST_TO_ADDR
53070: LD_INT 5
53072: PUSH
53073: FOR_TO
53074: IFFALSE 53188
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53076: LD_ADDR_VAR 0 11
53080: PUSH
53081: LD_VAR 0 13
53085: PPUSH
53086: CALL_OW 250
53090: PPUSH
53091: LD_VAR 0 10
53095: PPUSH
53096: LD_INT 2
53098: PPUSH
53099: CALL_OW 272
53103: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53104: LD_ADDR_VAR 0 12
53108: PUSH
53109: LD_VAR 0 13
53113: PPUSH
53114: CALL_OW 251
53118: PPUSH
53119: LD_VAR 0 10
53123: PPUSH
53124: LD_INT 2
53126: PPUSH
53127: CALL_OW 273
53131: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53132: LD_VAR 0 11
53136: PPUSH
53137: LD_VAR 0 12
53141: PPUSH
53142: CALL_OW 488
53146: PUSH
53147: LD_VAR 0 11
53151: PPUSH
53152: LD_VAR 0 12
53156: PPUSH
53157: CALL_OW 428
53161: NOT
53162: AND
53163: IFFALSE 53186
// begin ComMoveXY ( tmp , _x , _y ) ;
53165: LD_VAR 0 13
53169: PPUSH
53170: LD_VAR 0 11
53174: PPUSH
53175: LD_VAR 0 12
53179: PPUSH
53180: CALL_OW 111
// break ;
53184: GO 53188
// end ; end ;
53186: GO 53073
53188: POP
53189: POP
// end ; end ;
53190: GO 52515
53192: POP
53193: POP
// end ;
53194: LD_VAR 0 8
53198: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53199: LD_INT 0
53201: PPUSH
// result := true ;
53202: LD_ADDR_VAR 0 3
53206: PUSH
53207: LD_INT 1
53209: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53210: LD_VAR 0 2
53214: PUSH
53215: LD_INT 24
53217: DOUBLE
53218: EQUAL
53219: IFTRUE 53229
53221: LD_INT 33
53223: DOUBLE
53224: EQUAL
53225: IFTRUE 53229
53227: GO 53254
53229: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53230: LD_ADDR_VAR 0 3
53234: PUSH
53235: LD_INT 32
53237: PPUSH
53238: LD_VAR 0 1
53242: PPUSH
53243: CALL_OW 321
53247: PUSH
53248: LD_INT 2
53250: EQUAL
53251: ST_TO_ADDR
53252: GO 53570
53254: LD_INT 20
53256: DOUBLE
53257: EQUAL
53258: IFTRUE 53262
53260: GO 53287
53262: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53263: LD_ADDR_VAR 0 3
53267: PUSH
53268: LD_INT 6
53270: PPUSH
53271: LD_VAR 0 1
53275: PPUSH
53276: CALL_OW 321
53280: PUSH
53281: LD_INT 2
53283: EQUAL
53284: ST_TO_ADDR
53285: GO 53570
53287: LD_INT 22
53289: DOUBLE
53290: EQUAL
53291: IFTRUE 53301
53293: LD_INT 36
53295: DOUBLE
53296: EQUAL
53297: IFTRUE 53301
53299: GO 53326
53301: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53302: LD_ADDR_VAR 0 3
53306: PUSH
53307: LD_INT 15
53309: PPUSH
53310: LD_VAR 0 1
53314: PPUSH
53315: CALL_OW 321
53319: PUSH
53320: LD_INT 2
53322: EQUAL
53323: ST_TO_ADDR
53324: GO 53570
53326: LD_INT 30
53328: DOUBLE
53329: EQUAL
53330: IFTRUE 53334
53332: GO 53359
53334: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
53335: LD_ADDR_VAR 0 3
53339: PUSH
53340: LD_INT 20
53342: PPUSH
53343: LD_VAR 0 1
53347: PPUSH
53348: CALL_OW 321
53352: PUSH
53353: LD_INT 2
53355: EQUAL
53356: ST_TO_ADDR
53357: GO 53570
53359: LD_INT 28
53361: DOUBLE
53362: EQUAL
53363: IFTRUE 53373
53365: LD_INT 21
53367: DOUBLE
53368: EQUAL
53369: IFTRUE 53373
53371: GO 53398
53373: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
53374: LD_ADDR_VAR 0 3
53378: PUSH
53379: LD_INT 21
53381: PPUSH
53382: LD_VAR 0 1
53386: PPUSH
53387: CALL_OW 321
53391: PUSH
53392: LD_INT 2
53394: EQUAL
53395: ST_TO_ADDR
53396: GO 53570
53398: LD_INT 16
53400: DOUBLE
53401: EQUAL
53402: IFTRUE 53406
53404: GO 53431
53406: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53407: LD_ADDR_VAR 0 3
53411: PUSH
53412: LD_INT 84
53414: PPUSH
53415: LD_VAR 0 1
53419: PPUSH
53420: CALL_OW 321
53424: PUSH
53425: LD_INT 2
53427: EQUAL
53428: ST_TO_ADDR
53429: GO 53570
53431: LD_INT 19
53433: DOUBLE
53434: EQUAL
53435: IFTRUE 53445
53437: LD_INT 23
53439: DOUBLE
53440: EQUAL
53441: IFTRUE 53445
53443: GO 53470
53445: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53446: LD_ADDR_VAR 0 3
53450: PUSH
53451: LD_INT 83
53453: PPUSH
53454: LD_VAR 0 1
53458: PPUSH
53459: CALL_OW 321
53463: PUSH
53464: LD_INT 2
53466: EQUAL
53467: ST_TO_ADDR
53468: GO 53570
53470: LD_INT 17
53472: DOUBLE
53473: EQUAL
53474: IFTRUE 53478
53476: GO 53503
53478: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53479: LD_ADDR_VAR 0 3
53483: PUSH
53484: LD_INT 39
53486: PPUSH
53487: LD_VAR 0 1
53491: PPUSH
53492: CALL_OW 321
53496: PUSH
53497: LD_INT 2
53499: EQUAL
53500: ST_TO_ADDR
53501: GO 53570
53503: LD_INT 18
53505: DOUBLE
53506: EQUAL
53507: IFTRUE 53511
53509: GO 53536
53511: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53512: LD_ADDR_VAR 0 3
53516: PUSH
53517: LD_INT 40
53519: PPUSH
53520: LD_VAR 0 1
53524: PPUSH
53525: CALL_OW 321
53529: PUSH
53530: LD_INT 2
53532: EQUAL
53533: ST_TO_ADDR
53534: GO 53570
53536: LD_INT 27
53538: DOUBLE
53539: EQUAL
53540: IFTRUE 53544
53542: GO 53569
53544: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53545: LD_ADDR_VAR 0 3
53549: PUSH
53550: LD_INT 35
53552: PPUSH
53553: LD_VAR 0 1
53557: PPUSH
53558: CALL_OW 321
53562: PUSH
53563: LD_INT 2
53565: EQUAL
53566: ST_TO_ADDR
53567: GO 53570
53569: POP
// end ;
53570: LD_VAR 0 3
53574: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53575: LD_INT 0
53577: PPUSH
53578: PPUSH
53579: PPUSH
53580: PPUSH
53581: PPUSH
53582: PPUSH
53583: PPUSH
53584: PPUSH
53585: PPUSH
53586: PPUSH
53587: PPUSH
// result := false ;
53588: LD_ADDR_VAR 0 6
53592: PUSH
53593: LD_INT 0
53595: ST_TO_ADDR
// if btype = b_depot then
53596: LD_VAR 0 2
53600: PUSH
53601: LD_INT 0
53603: EQUAL
53604: IFFALSE 53616
// begin result := true ;
53606: LD_ADDR_VAR 0 6
53610: PUSH
53611: LD_INT 1
53613: ST_TO_ADDR
// exit ;
53614: GO 54442
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53616: LD_VAR 0 1
53620: NOT
53621: PUSH
53622: LD_VAR 0 1
53626: PPUSH
53627: CALL_OW 266
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: IN
53642: NOT
53643: OR
53644: PUSH
53645: LD_VAR 0 2
53649: NOT
53650: OR
53651: PUSH
53652: LD_VAR 0 5
53656: PUSH
53657: LD_INT 0
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: LD_INT 3
53668: PUSH
53669: LD_INT 4
53671: PUSH
53672: LD_INT 5
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: IN
53683: NOT
53684: OR
53685: PUSH
53686: LD_VAR 0 3
53690: PPUSH
53691: LD_VAR 0 4
53695: PPUSH
53696: CALL_OW 488
53700: NOT
53701: OR
53702: IFFALSE 53706
// exit ;
53704: GO 54442
// side := GetSide ( depot ) ;
53706: LD_ADDR_VAR 0 9
53710: PUSH
53711: LD_VAR 0 1
53715: PPUSH
53716: CALL_OW 255
53720: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53721: LD_VAR 0 9
53725: PPUSH
53726: LD_VAR 0 2
53730: PPUSH
53731: CALL 53199 0 2
53735: NOT
53736: IFFALSE 53740
// exit ;
53738: GO 54442
// pom := GetBase ( depot ) ;
53740: LD_ADDR_VAR 0 10
53744: PUSH
53745: LD_VAR 0 1
53749: PPUSH
53750: CALL_OW 274
53754: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53755: LD_ADDR_VAR 0 11
53759: PUSH
53760: LD_VAR 0 2
53764: PPUSH
53765: LD_VAR 0 1
53769: PPUSH
53770: CALL_OW 248
53774: PPUSH
53775: CALL_OW 450
53779: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53780: LD_VAR 0 10
53784: PPUSH
53785: LD_INT 1
53787: PPUSH
53788: CALL_OW 275
53792: PUSH
53793: LD_VAR 0 11
53797: PUSH
53798: LD_INT 1
53800: ARRAY
53801: GREATEREQUAL
53802: PUSH
53803: LD_VAR 0 10
53807: PPUSH
53808: LD_INT 2
53810: PPUSH
53811: CALL_OW 275
53815: PUSH
53816: LD_VAR 0 11
53820: PUSH
53821: LD_INT 2
53823: ARRAY
53824: GREATEREQUAL
53825: AND
53826: PUSH
53827: LD_VAR 0 10
53831: PPUSH
53832: LD_INT 3
53834: PPUSH
53835: CALL_OW 275
53839: PUSH
53840: LD_VAR 0 11
53844: PUSH
53845: LD_INT 3
53847: ARRAY
53848: GREATEREQUAL
53849: AND
53850: NOT
53851: IFFALSE 53855
// exit ;
53853: GO 54442
// if GetBType ( depot ) = b_depot then
53855: LD_VAR 0 1
53859: PPUSH
53860: CALL_OW 266
53864: PUSH
53865: LD_INT 0
53867: EQUAL
53868: IFFALSE 53880
// dist := 28 else
53870: LD_ADDR_VAR 0 14
53874: PUSH
53875: LD_INT 28
53877: ST_TO_ADDR
53878: GO 53888
// dist := 36 ;
53880: LD_ADDR_VAR 0 14
53884: PUSH
53885: LD_INT 36
53887: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53888: LD_VAR 0 1
53892: PPUSH
53893: LD_VAR 0 3
53897: PPUSH
53898: LD_VAR 0 4
53902: PPUSH
53903: CALL_OW 297
53907: PUSH
53908: LD_VAR 0 14
53912: GREATER
53913: IFFALSE 53917
// exit ;
53915: GO 54442
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53917: LD_ADDR_VAR 0 12
53921: PUSH
53922: LD_VAR 0 2
53926: PPUSH
53927: LD_VAR 0 3
53931: PPUSH
53932: LD_VAR 0 4
53936: PPUSH
53937: LD_VAR 0 5
53941: PPUSH
53942: LD_VAR 0 1
53946: PPUSH
53947: CALL_OW 248
53951: PPUSH
53952: LD_INT 0
53954: PPUSH
53955: CALL 54447 0 6
53959: ST_TO_ADDR
// if not hexes then
53960: LD_VAR 0 12
53964: NOT
53965: IFFALSE 53969
// exit ;
53967: GO 54442
// hex := GetHexInfo ( x , y ) ;
53969: LD_ADDR_VAR 0 15
53973: PUSH
53974: LD_VAR 0 3
53978: PPUSH
53979: LD_VAR 0 4
53983: PPUSH
53984: CALL_OW 546
53988: ST_TO_ADDR
// if hex [ 1 ] then
53989: LD_VAR 0 15
53993: PUSH
53994: LD_INT 1
53996: ARRAY
53997: IFFALSE 54001
// exit ;
53999: GO 54442
// height := hex [ 2 ] ;
54001: LD_ADDR_VAR 0 13
54005: PUSH
54006: LD_VAR 0 15
54010: PUSH
54011: LD_INT 2
54013: ARRAY
54014: ST_TO_ADDR
// for i = 1 to hexes do
54015: LD_ADDR_VAR 0 7
54019: PUSH
54020: DOUBLE
54021: LD_INT 1
54023: DEC
54024: ST_TO_ADDR
54025: LD_VAR 0 12
54029: PUSH
54030: FOR_TO
54031: IFFALSE 54361
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54033: LD_VAR 0 12
54037: PUSH
54038: LD_VAR 0 7
54042: ARRAY
54043: PUSH
54044: LD_INT 1
54046: ARRAY
54047: PPUSH
54048: LD_VAR 0 12
54052: PUSH
54053: LD_VAR 0 7
54057: ARRAY
54058: PUSH
54059: LD_INT 2
54061: ARRAY
54062: PPUSH
54063: CALL_OW 488
54067: NOT
54068: PUSH
54069: LD_VAR 0 12
54073: PUSH
54074: LD_VAR 0 7
54078: ARRAY
54079: PUSH
54080: LD_INT 1
54082: ARRAY
54083: PPUSH
54084: LD_VAR 0 12
54088: PUSH
54089: LD_VAR 0 7
54093: ARRAY
54094: PUSH
54095: LD_INT 2
54097: ARRAY
54098: PPUSH
54099: CALL_OW 428
54103: PUSH
54104: LD_INT 0
54106: GREATER
54107: OR
54108: PUSH
54109: LD_VAR 0 12
54113: PUSH
54114: LD_VAR 0 7
54118: ARRAY
54119: PUSH
54120: LD_INT 1
54122: ARRAY
54123: PPUSH
54124: LD_VAR 0 12
54128: PUSH
54129: LD_VAR 0 7
54133: ARRAY
54134: PUSH
54135: LD_INT 2
54137: ARRAY
54138: PPUSH
54139: CALL_OW 351
54143: OR
54144: IFFALSE 54150
// exit ;
54146: POP
54147: POP
54148: GO 54442
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54150: LD_ADDR_VAR 0 8
54154: PUSH
54155: LD_VAR 0 12
54159: PUSH
54160: LD_VAR 0 7
54164: ARRAY
54165: PUSH
54166: LD_INT 1
54168: ARRAY
54169: PPUSH
54170: LD_VAR 0 12
54174: PUSH
54175: LD_VAR 0 7
54179: ARRAY
54180: PUSH
54181: LD_INT 2
54183: ARRAY
54184: PPUSH
54185: CALL_OW 546
54189: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54190: LD_VAR 0 8
54194: PUSH
54195: LD_INT 1
54197: ARRAY
54198: PUSH
54199: LD_VAR 0 8
54203: PUSH
54204: LD_INT 2
54206: ARRAY
54207: PUSH
54208: LD_VAR 0 13
54212: PUSH
54213: LD_INT 2
54215: PLUS
54216: GREATER
54217: OR
54218: PUSH
54219: LD_VAR 0 8
54223: PUSH
54224: LD_INT 2
54226: ARRAY
54227: PUSH
54228: LD_VAR 0 13
54232: PUSH
54233: LD_INT 2
54235: MINUS
54236: LESS
54237: OR
54238: PUSH
54239: LD_VAR 0 8
54243: PUSH
54244: LD_INT 3
54246: ARRAY
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 8
54253: PUSH
54254: LD_INT 9
54256: PUSH
54257: LD_INT 10
54259: PUSH
54260: LD_INT 11
54262: PUSH
54263: LD_INT 12
54265: PUSH
54266: LD_INT 13
54268: PUSH
54269: LD_INT 16
54271: PUSH
54272: LD_INT 17
54274: PUSH
54275: LD_INT 18
54277: PUSH
54278: LD_INT 19
54280: PUSH
54281: LD_INT 20
54283: PUSH
54284: LD_INT 21
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: IN
54302: NOT
54303: OR
54304: PUSH
54305: LD_VAR 0 8
54309: PUSH
54310: LD_INT 5
54312: ARRAY
54313: NOT
54314: OR
54315: PUSH
54316: LD_VAR 0 8
54320: PUSH
54321: LD_INT 6
54323: ARRAY
54324: PUSH
54325: LD_INT 1
54327: PUSH
54328: LD_INT 2
54330: PUSH
54331: LD_INT 7
54333: PUSH
54334: LD_INT 9
54336: PUSH
54337: LD_INT 10
54339: PUSH
54340: LD_INT 11
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: IN
54351: NOT
54352: OR
54353: IFFALSE 54359
// exit ;
54355: POP
54356: POP
54357: GO 54442
// end ;
54359: GO 54030
54361: POP
54362: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
54363: LD_VAR 0 9
54367: PPUSH
54368: LD_VAR 0 3
54372: PPUSH
54373: LD_VAR 0 4
54377: PPUSH
54378: LD_INT 20
54380: PPUSH
54381: CALL 46365 0 4
54385: PUSH
54386: LD_INT 4
54388: ARRAY
54389: IFFALSE 54393
// exit ;
54391: GO 54442
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54393: LD_VAR 0 2
54397: PUSH
54398: LD_INT 29
54400: PUSH
54401: LD_INT 30
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: IN
54408: PUSH
54409: LD_VAR 0 3
54413: PPUSH
54414: LD_VAR 0 4
54418: PPUSH
54419: LD_VAR 0 9
54423: PPUSH
54424: CALL_OW 440
54428: NOT
54429: AND
54430: IFFALSE 54434
// exit ;
54432: GO 54442
// result := true ;
54434: LD_ADDR_VAR 0 6
54438: PUSH
54439: LD_INT 1
54441: ST_TO_ADDR
// end ;
54442: LD_VAR 0 6
54446: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54447: LD_INT 0
54449: PPUSH
54450: PPUSH
54451: PPUSH
54452: PPUSH
54453: PPUSH
54454: PPUSH
54455: PPUSH
54456: PPUSH
54457: PPUSH
54458: PPUSH
54459: PPUSH
54460: PPUSH
54461: PPUSH
54462: PPUSH
54463: PPUSH
54464: PPUSH
54465: PPUSH
54466: PPUSH
54467: PPUSH
54468: PPUSH
54469: PPUSH
54470: PPUSH
54471: PPUSH
54472: PPUSH
54473: PPUSH
54474: PPUSH
54475: PPUSH
54476: PPUSH
54477: PPUSH
54478: PPUSH
54479: PPUSH
54480: PPUSH
54481: PPUSH
54482: PPUSH
54483: PPUSH
54484: PPUSH
54485: PPUSH
54486: PPUSH
54487: PPUSH
54488: PPUSH
54489: PPUSH
54490: PPUSH
54491: PPUSH
54492: PPUSH
54493: PPUSH
54494: PPUSH
54495: PPUSH
54496: PPUSH
54497: PPUSH
54498: PPUSH
54499: PPUSH
54500: PPUSH
54501: PPUSH
54502: PPUSH
54503: PPUSH
54504: PPUSH
54505: PPUSH
54506: PPUSH
// result = [ ] ;
54507: LD_ADDR_VAR 0 7
54511: PUSH
54512: EMPTY
54513: ST_TO_ADDR
// temp_list = [ ] ;
54514: LD_ADDR_VAR 0 9
54518: PUSH
54519: EMPTY
54520: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54521: LD_VAR 0 4
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: LD_INT 3
54537: PUSH
54538: LD_INT 4
54540: PUSH
54541: LD_INT 5
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: IN
54552: NOT
54553: PUSH
54554: LD_VAR 0 1
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: IN
54569: PUSH
54570: LD_VAR 0 5
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 2
54580: PUSH
54581: LD_INT 3
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: LIST
54588: IN
54589: NOT
54590: AND
54591: OR
54592: IFFALSE 54596
// exit ;
54594: GO 72987
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54596: LD_VAR 0 1
54600: PUSH
54601: LD_INT 6
54603: PUSH
54604: LD_INT 7
54606: PUSH
54607: LD_INT 8
54609: PUSH
54610: LD_INT 13
54612: PUSH
54613: LD_INT 12
54615: PUSH
54616: LD_INT 15
54618: PUSH
54619: LD_INT 11
54621: PUSH
54622: LD_INT 14
54624: PUSH
54625: LD_INT 10
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: IN
54639: IFFALSE 54649
// btype = b_lab ;
54641: LD_ADDR_VAR 0 1
54645: PUSH
54646: LD_INT 6
54648: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54649: LD_VAR 0 6
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: LD_INT 2
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: LIST
54667: IN
54668: NOT
54669: PUSH
54670: LD_VAR 0 1
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: LD_INT 2
54683: PUSH
54684: LD_INT 3
54686: PUSH
54687: LD_INT 6
54689: PUSH
54690: LD_INT 36
54692: PUSH
54693: LD_INT 4
54695: PUSH
54696: LD_INT 5
54698: PUSH
54699: LD_INT 31
54701: PUSH
54702: LD_INT 32
54704: PUSH
54705: LD_INT 33
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: IN
54721: NOT
54722: PUSH
54723: LD_VAR 0 6
54727: PUSH
54728: LD_INT 1
54730: EQUAL
54731: AND
54732: OR
54733: PUSH
54734: LD_VAR 0 1
54738: PUSH
54739: LD_INT 2
54741: PUSH
54742: LD_INT 3
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: IN
54749: NOT
54750: PUSH
54751: LD_VAR 0 6
54755: PUSH
54756: LD_INT 2
54758: EQUAL
54759: AND
54760: OR
54761: IFFALSE 54771
// mode = 0 ;
54763: LD_ADDR_VAR 0 6
54767: PUSH
54768: LD_INT 0
54770: ST_TO_ADDR
// case mode of 0 :
54771: LD_VAR 0 6
54775: PUSH
54776: LD_INT 0
54778: DOUBLE
54779: EQUAL
54780: IFTRUE 54784
54782: GO 66237
54784: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54785: LD_ADDR_VAR 0 11
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: LD_INT 0
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 0
54802: PUSH
54803: LD_INT 1
54805: NEG
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 1
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 1
54843: NEG
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: EMPTY
54849: LIST
54850: LIST
54851: PUSH
54852: LD_INT 1
54854: NEG
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: LD_INT 2
54870: NEG
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 2
54881: NEG
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: PUSH
54890: LD_INT 1
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: LD_INT 2
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 0
54910: PUSH
54911: LD_INT 2
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 1
54920: NEG
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: PUSH
54932: LD_INT 3
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 0
54941: PUSH
54942: LD_INT 3
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: NEG
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54978: LD_ADDR_VAR 0 12
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 1
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 1
55047: NEG
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 1
55090: NEG
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 2
55112: NEG
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: NEG
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 3
55146: NEG
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55174: LD_ADDR_VAR 0 13
55178: PUSH
55179: LD_INT 0
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 0
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: LD_INT 0
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 1
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: LD_INT 1
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: LD_INT 0
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 1
55243: NEG
55244: PUSH
55245: LD_INT 1
55247: NEG
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 1
55255: NEG
55256: PUSH
55257: LD_INT 2
55259: NEG
55260: PUSH
55261: EMPTY
55262: LIST
55263: LIST
55264: PUSH
55265: LD_INT 2
55267: PUSH
55268: LD_INT 1
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 2
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 2
55309: NEG
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 2
55321: NEG
55322: PUSH
55323: LD_INT 3
55325: NEG
55326: PUSH
55327: EMPTY
55328: LIST
55329: LIST
55330: PUSH
55331: LD_INT 3
55333: NEG
55334: PUSH
55335: LD_INT 2
55337: NEG
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 3
55345: NEG
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55373: LD_ADDR_VAR 0 14
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 0
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: LD_INT 1
55393: NEG
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 1
55401: PUSH
55402: LD_INT 0
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: LD_INT 1
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: LD_INT 1
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 1
55446: NEG
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: NEG
55455: PUSH
55456: LD_INT 2
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 0
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 1
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 2
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: LD_INT 2
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: LD_INT 3
55523: NEG
55524: PUSH
55525: EMPTY
55526: LIST
55527: LIST
55528: PUSH
55529: LD_INT 0
55531: PUSH
55532: LD_INT 3
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: LD_INT 1
55542: PUSH
55543: LD_INT 2
55545: NEG
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55569: LD_ADDR_VAR 0 15
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: LD_INT 0
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 1
55589: NEG
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 0
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 0
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 1
55627: NEG
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 1
55638: NEG
55639: PUSH
55640: LD_INT 1
55642: NEG
55643: PUSH
55644: EMPTY
55645: LIST
55646: LIST
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 2
55692: NEG
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 3
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 3
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55762: LD_ADDR_VAR 0 16
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: PUSH
55791: LD_INT 0
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: LD_INT 1
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 1
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 1
55820: NEG
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: NEG
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 1
55843: NEG
55844: PUSH
55845: LD_INT 2
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 2
55885: NEG
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 2
55897: NEG
55898: PUSH
55899: LD_INT 2
55901: NEG
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 3
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 3
55919: PUSH
55920: LD_INT 3
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 2
55929: PUSH
55930: LD_INT 3
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55955: LD_ADDR_VAR 0 17
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 1
55993: PUSH
55994: LD_INT 1
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 0
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: NEG
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 1
56024: NEG
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: NEG
56037: PUSH
56038: LD_INT 2
56040: NEG
56041: PUSH
56042: EMPTY
56043: LIST
56044: LIST
56045: PUSH
56046: LD_INT 0
56048: PUSH
56049: LD_INT 2
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: LD_INT 1
56059: PUSH
56060: LD_INT 1
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 2
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 2
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 2
56090: PUSH
56091: LD_INT 2
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 1
56100: PUSH
56101: LD_INT 2
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 0
56110: PUSH
56111: LD_INT 2
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 1
56120: NEG
56121: PUSH
56122: LD_INT 1
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 2
56131: NEG
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: NEG
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: LD_INT 2
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56185: LD_ADDR_VAR 0 18
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: LD_INT 0
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 0
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 0
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 1
56254: NEG
56255: PUSH
56256: LD_INT 1
56258: NEG
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 1
56266: NEG
56267: PUSH
56268: LD_INT 2
56270: NEG
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: LD_INT 2
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: LD_INT 1
56292: NEG
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 2
56310: PUSH
56311: LD_INT 1
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 1
56350: NEG
56351: PUSH
56352: LD_INT 1
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: PUSH
56359: LD_INT 2
56361: NEG
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: NEG
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: LD_INT 2
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56415: LD_ADDR_VAR 0 19
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 0
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: PUSH
56430: LD_INT 0
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 0
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: LD_INT 1
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: NEG
56474: PUSH
56475: LD_INT 0
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 1
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 1
56496: NEG
56497: PUSH
56498: LD_INT 2
56500: NEG
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: LD_INT 2
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: LD_INT 1
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: LD_INT 2
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 2
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 1
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: NEG
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: LD_INT 2
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56645: LD_ADDR_VAR 0 20
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: LD_INT 1
56665: NEG
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 1
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: PUSH
56684: LD_INT 1
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: LD_INT 1
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 1
56703: NEG
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: PUSH
56712: LD_INT 1
56714: NEG
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_INT 1
56726: NEG
56727: PUSH
56728: LD_INT 2
56730: NEG
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: LD_INT 2
56741: NEG
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: LD_INT 1
56752: NEG
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 2
56770: PUSH
56771: LD_INT 1
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 2
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: PUSH
56791: LD_INT 2
56793: PUSH
56794: EMPTY
56795: LIST
56796: LIST
56797: PUSH
56798: LD_INT 0
56800: PUSH
56801: LD_INT 2
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 1
56810: NEG
56811: PUSH
56812: LD_INT 1
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 2
56821: NEG
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 2
56832: NEG
56833: PUSH
56834: LD_INT 1
56836: NEG
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: PUSH
56842: LD_INT 2
56844: NEG
56845: PUSH
56846: LD_INT 2
56848: NEG
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56875: LD_ADDR_VAR 0 21
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: LD_INT 0
56892: PUSH
56893: LD_INT 1
56895: NEG
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: PUSH
56904: LD_INT 0
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 1
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 1
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 0
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 1
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 1
56956: NEG
56957: PUSH
56958: LD_INT 2
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 2
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 2
57000: PUSH
57001: LD_INT 1
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: PUSH
57021: LD_INT 2
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 2
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 2
57051: NEG
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: PUSH
57060: LD_INT 2
57062: NEG
57063: PUSH
57064: LD_INT 1
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: NEG
57075: PUSH
57076: LD_INT 2
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57105: LD_ADDR_VAR 0 22
57109: PUSH
57110: LD_INT 0
57112: PUSH
57113: LD_INT 0
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 0
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 1
57133: PUSH
57134: LD_INT 0
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: PUSH
57144: LD_INT 1
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: PUSH
57151: LD_INT 0
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: LD_INT 0
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: PUSH
57172: LD_INT 1
57174: NEG
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: NEG
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 2
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 2
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: LD_INT 2
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 2
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 1
57270: NEG
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 2
57281: NEG
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: NEG
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 2
57304: NEG
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57335: LD_ADDR_VAR 0 23
57339: PUSH
57340: LD_INT 0
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 0
57352: PUSH
57353: LD_INT 1
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: PUSH
57381: LD_INT 0
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: LD_INT 0
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: LD_INT 2
57420: NEG
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 0
57428: PUSH
57429: LD_INT 2
57431: NEG
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 1
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: EMPTY
57495: LIST
57496: LIST
57497: PUSH
57498: LD_INT 1
57500: NEG
57501: PUSH
57502: LD_INT 1
57504: PUSH
57505: EMPTY
57506: LIST
57507: LIST
57508: PUSH
57509: LD_INT 2
57511: NEG
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: EMPTY
57517: LIST
57518: LIST
57519: PUSH
57520: LD_INT 2
57522: NEG
57523: PUSH
57524: LD_INT 1
57526: NEG
57527: PUSH
57528: EMPTY
57529: LIST
57530: LIST
57531: PUSH
57532: LD_INT 2
57534: NEG
57535: PUSH
57536: LD_INT 2
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: LD_INT 3
57550: NEG
57551: PUSH
57552: EMPTY
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 1
57558: NEG
57559: PUSH
57560: LD_INT 3
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: PUSH
57571: LD_INT 2
57573: NEG
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: LD_INT 1
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57615: LD_ADDR_VAR 0 24
57619: PUSH
57620: LD_INT 0
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 1
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: LD_INT 0
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: LD_INT 1
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 1
57673: NEG
57674: PUSH
57675: LD_INT 0
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: LD_INT 2
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 2
57711: NEG
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 1
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 2
57750: PUSH
57751: LD_INT 2
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 2
57791: NEG
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 2
57802: NEG
57803: PUSH
57804: LD_INT 1
57806: NEG
57807: PUSH
57808: EMPTY
57809: LIST
57810: LIST
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: LD_INT 2
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 1
57826: PUSH
57827: LD_INT 2
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 2
57837: PUSH
57838: LD_INT 1
57840: NEG
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 3
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 3
57858: PUSH
57859: LD_INT 2
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: EMPTY
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57891: LD_ADDR_VAR 0 25
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 2
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 3
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: LD_INT 2
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: LD_INT 3
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 1
58132: PUSH
58133: LD_INT 3
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: LIST
58153: LIST
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58165: LD_ADDR_VAR 0 26
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 0
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 0
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 1
58193: PUSH
58194: LD_INT 0
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: NEG
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: LD_INT 2
58250: NEG
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: LD_INT 2
58261: NEG
58262: PUSH
58263: EMPTY
58264: LIST
58265: LIST
58266: PUSH
58267: LD_INT 1
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 2
58290: PUSH
58291: LD_INT 1
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: LD_INT 2
58300: PUSH
58301: LD_INT 2
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: LD_INT 2
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 0
58320: PUSH
58321: LD_INT 2
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 1
58330: NEG
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 2
58341: NEG
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: PUSH
58377: LD_INT 3
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: LD_INT 3
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 1
58396: NEG
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 2
58407: NEG
58408: PUSH
58409: LD_INT 1
58411: PUSH
58412: EMPTY
58413: LIST
58414: LIST
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58441: LD_ADDR_VAR 0 27
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 0
58458: PUSH
58459: LD_INT 1
58461: NEG
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 1
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: LD_INT 1
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 0
58489: PUSH
58490: LD_INT 1
58492: PUSH
58493: EMPTY
58494: LIST
58495: LIST
58496: PUSH
58497: LD_INT 1
58499: NEG
58500: PUSH
58501: LD_INT 0
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: LD_INT 1
58510: NEG
58511: PUSH
58512: LD_INT 1
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: LD_INT 2
58526: NEG
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 2
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 2
58576: PUSH
58577: LD_INT 2
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: LD_INT 2
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 0
58596: PUSH
58597: LD_INT 2
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: NEG
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: LD_INT 2
58617: NEG
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: NEG
58629: PUSH
58630: LD_INT 1
58632: NEG
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 2
58640: NEG
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 1
58652: NEG
58653: PUSH
58654: LD_INT 2
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 2
58663: NEG
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 3
58674: NEG
58675: PUSH
58676: LD_INT 1
58678: NEG
58679: PUSH
58680: EMPTY
58681: LIST
58682: LIST
58683: PUSH
58684: LD_INT 3
58686: NEG
58687: PUSH
58688: LD_INT 2
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58721: LD_ADDR_VAR 0 28
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 0
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 0
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: LD_INT 1
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: NEG
58780: PUSH
58781: LD_INT 0
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: PUSH
58788: LD_INT 1
58790: NEG
58791: PUSH
58792: LD_INT 1
58794: NEG
58795: PUSH
58796: EMPTY
58797: LIST
58798: LIST
58799: PUSH
58800: LD_INT 1
58802: NEG
58803: PUSH
58804: LD_INT 2
58806: NEG
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 0
58814: PUSH
58815: LD_INT 2
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 1
58825: PUSH
58826: LD_INT 1
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 2
58836: PUSH
58837: LD_INT 0
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 2
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 2
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: PUSH
58867: LD_INT 2
58869: PUSH
58870: EMPTY
58871: LIST
58872: LIST
58873: PUSH
58874: LD_INT 0
58876: PUSH
58877: LD_INT 2
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: NEG
58887: PUSH
58888: LD_INT 1
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 2
58897: NEG
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 2
58908: NEG
58909: PUSH
58910: LD_INT 1
58912: NEG
58913: PUSH
58914: EMPTY
58915: LIST
58916: LIST
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: LD_INT 2
58932: NEG
58933: PUSH
58934: LD_INT 3
58936: NEG
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 1
58944: NEG
58945: PUSH
58946: LD_INT 3
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: NEG
58957: PUSH
58958: LD_INT 1
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 3
58968: NEG
58969: PUSH
58970: LD_INT 2
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59003: LD_ADDR_VAR 0 29
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: EMPTY
59026: LIST
59027: LIST
59028: PUSH
59029: LD_INT 1
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 1
59041: PUSH
59042: LD_INT 1
59044: PUSH
59045: EMPTY
59046: LIST
59047: LIST
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: LD_INT 1
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: LD_INT 1
59072: NEG
59073: PUSH
59074: LD_INT 1
59076: NEG
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: NEG
59085: PUSH
59086: LD_INT 2
59088: NEG
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: LD_INT 2
59099: NEG
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 1
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 2
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: LD_INT 2
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 0
59148: PUSH
59149: LD_INT 2
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 2
59169: NEG
59170: PUSH
59171: LD_INT 1
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 2
59181: NEG
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 2
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 3
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: PUSH
59227: LD_INT 3
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 1
59236: NEG
59237: PUSH
59238: LD_INT 2
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 3
59247: NEG
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59282: LD_ADDR_VAR 0 30
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: LD_INT 0
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 0
59299: PUSH
59300: LD_INT 1
59302: NEG
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: PUSH
59311: LD_INT 0
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 1
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: LD_INT 1
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 0
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PUSH
59361: LD_INT 1
59363: NEG
59364: PUSH
59365: LD_INT 2
59367: NEG
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: PUSH
59373: LD_INT 0
59375: PUSH
59376: LD_INT 2
59378: NEG
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 2
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 2
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 2
59417: PUSH
59418: LD_INT 2
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 2
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: NEG
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 2
59448: NEG
59449: PUSH
59450: LD_INT 0
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 2
59459: NEG
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: NEG
59472: PUSH
59473: LD_INT 3
59475: NEG
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 3
59494: PUSH
59495: LD_INT 2
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 2
59504: PUSH
59505: LD_INT 3
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: NEG
59515: PUSH
59516: LD_INT 1
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 3
59525: NEG
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: EMPTY
59532: LIST
59533: LIST
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: LIST
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59560: LD_ADDR_VAR 0 31
59564: PUSH
59565: LD_INT 0
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 1
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 1
59598: PUSH
59599: LD_INT 1
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 0
59608: PUSH
59609: LD_INT 1
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 1
59629: NEG
59630: PUSH
59631: LD_INT 1
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: LD_INT 2
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: LD_INT 1
59656: NEG
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: LD_INT 0
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 2
59674: PUSH
59675: LD_INT 1
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 2
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: PUSH
59695: LD_INT 2
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: LD_INT 2
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 1
59714: NEG
59715: PUSH
59716: LD_INT 1
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: LD_INT 1
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 2
59749: NEG
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 2
59761: PUSH
59762: LD_INT 1
59764: NEG
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 3
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: PUSH
59783: LD_INT 3
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 3
59803: NEG
59804: PUSH
59805: LD_INT 2
59807: NEG
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59838: LD_ADDR_VAR 0 32
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: LD_INT 1
59858: NEG
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 1
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: LD_INT 1
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 1
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: LD_INT 0
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 1
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: NEG
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 0
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 2
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 2
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: LD_INT 2
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: LD_INT 2
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: NEG
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 2
60004: NEG
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 2
60015: NEG
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: LD_INT 3
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 1
60039: PUSH
60040: LD_INT 2
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 2
60060: PUSH
60061: LD_INT 3
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 2
60070: NEG
60071: PUSH
60072: LD_INT 1
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 3
60081: NEG
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: LIST
60110: LIST
60111: LIST
60112: LIST
60113: LIST
60114: LIST
60115: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60116: LD_ADDR_VAR 0 33
60120: PUSH
60121: LD_INT 0
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: LD_INT 1
60136: NEG
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 1
60144: PUSH
60145: LD_INT 0
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: PUSH
60155: LD_INT 1
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 0
60164: PUSH
60165: LD_INT 1
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: LD_INT 0
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: NEG
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: NEG
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: EMPTY
60204: LIST
60205: LIST
60206: PUSH
60207: LD_INT 1
60209: PUSH
60210: LD_INT 1
60212: NEG
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: EMPTY
60225: LIST
60226: LIST
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: LD_INT 1
60233: PUSH
60234: EMPTY
60235: LIST
60236: LIST
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 0
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 1
60260: NEG
60261: PUSH
60262: LD_INT 1
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 2
60271: NEG
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: PUSH
60280: LD_INT 2
60282: NEG
60283: PUSH
60284: LD_INT 1
60286: NEG
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 2
60294: NEG
60295: PUSH
60296: LD_INT 2
60298: NEG
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 2
60306: NEG
60307: PUSH
60308: LD_INT 3
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 2
60318: PUSH
60319: LD_INT 1
60321: NEG
60322: PUSH
60323: EMPTY
60324: LIST
60325: LIST
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 1
60339: PUSH
60340: LD_INT 3
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: PUSH
60347: LD_INT 1
60349: NEG
60350: PUSH
60351: LD_INT 2
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: PUSH
60358: LD_INT 3
60360: NEG
60361: PUSH
60362: LD_INT 2
60364: NEG
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60395: LD_ADDR_VAR 0 34
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_INT 2
60491: NEG
60492: PUSH
60493: EMPTY
60494: LIST
60495: LIST
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: LD_INT 1
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: LD_INT 2
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 2
60551: NEG
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 2
60562: NEG
60563: PUSH
60564: LD_INT 1
60566: NEG
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 2
60574: NEG
60575: PUSH
60576: LD_INT 2
60578: NEG
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: LD_INT 3
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 1
60598: PUSH
60599: LD_INT 2
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 3
60609: PUSH
60610: LD_INT 2
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 2
60619: PUSH
60620: LD_INT 3
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 2
60629: NEG
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 3
60640: NEG
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: LIST
60674: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60675: LD_ADDR_VAR 0 35
60679: PUSH
60680: LD_INT 0
60682: PUSH
60683: LD_INT 0
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 0
60692: PUSH
60693: LD_INT 1
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 1
60713: PUSH
60714: LD_INT 1
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 0
60723: PUSH
60724: LD_INT 1
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: LD_INT 0
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 2
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 2
60766: NEG
60767: PUSH
60768: LD_INT 1
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60787: LD_ADDR_VAR 0 36
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: LD_INT 0
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: LD_INT 1
60807: NEG
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: LD_INT 0
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 1
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: LD_INT 1
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: LD_INT 1
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 1
60868: NEG
60869: PUSH
60870: LD_INT 2
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 1
60880: PUSH
60881: LD_INT 2
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: LIST
60897: LIST
60898: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60899: LD_ADDR_VAR 0 37
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: LD_INT 0
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: LD_INT 1
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 1
60927: PUSH
60928: LD_INT 0
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 1
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: LD_INT 1
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: LD_INT 0
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: LD_INT 1
60972: NEG
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: LD_INT 1
60980: PUSH
60981: LD_INT 1
60983: NEG
60984: PUSH
60985: EMPTY
60986: LIST
60987: LIST
60988: PUSH
60989: LD_INT 1
60991: NEG
60992: PUSH
60993: LD_INT 1
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61011: LD_ADDR_VAR 0 38
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 1
61039: PUSH
61040: LD_INT 0
61042: PUSH
61043: EMPTY
61044: LIST
61045: LIST
61046: PUSH
61047: LD_INT 1
61049: PUSH
61050: LD_INT 1
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 0
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: LD_INT 1
61095: PUSH
61096: EMPTY
61097: LIST
61098: LIST
61099: PUSH
61100: LD_INT 2
61102: NEG
61103: PUSH
61104: LD_INT 1
61106: NEG
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61123: LD_ADDR_VAR 0 39
61127: PUSH
61128: LD_INT 0
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 1
61143: NEG
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: LD_INT 1
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: LD_INT 1
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: NEG
61182: PUSH
61183: LD_INT 0
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 1
61192: NEG
61193: PUSH
61194: LD_INT 1
61196: NEG
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: LD_INT 2
61208: NEG
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 1
61216: PUSH
61217: LD_INT 2
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61235: LD_ADDR_VAR 0 40
61239: PUSH
61240: LD_INT 0
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: LD_INT 1
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: LD_INT 0
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: LD_INT 1
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: LD_INT 1
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 1
61304: NEG
61305: PUSH
61306: LD_INT 1
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 1
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 1
61327: NEG
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61347: LD_ADDR_VAR 0 41
61351: PUSH
61352: LD_INT 0
61354: PUSH
61355: LD_INT 0
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: LD_INT 1
61367: NEG
61368: PUSH
61369: EMPTY
61370: LIST
61371: LIST
61372: PUSH
61373: LD_INT 1
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: NEG
61406: PUSH
61407: LD_INT 0
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 1
61416: NEG
61417: PUSH
61418: LD_INT 1
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: LD_INT 1
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 2
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 2
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 2
61471: PUSH
61472: LD_INT 2
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: LD_INT 2
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: LD_INT 1
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 2
61502: NEG
61503: PUSH
61504: LD_INT 0
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 2
61513: NEG
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 2
61525: NEG
61526: PUSH
61527: LD_INT 2
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 2
61537: NEG
61538: PUSH
61539: LD_INT 3
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 2
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 3
61560: PUSH
61561: LD_INT 0
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 3
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 3
61580: PUSH
61581: LD_INT 2
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 3
61590: PUSH
61591: LD_INT 3
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 2
61610: NEG
61611: PUSH
61612: LD_INT 1
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 3
61621: NEG
61622: PUSH
61623: LD_INT 0
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: NEG
61633: PUSH
61634: LD_INT 1
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 3
61644: NEG
61645: PUSH
61646: LD_INT 2
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 3
61656: NEG
61657: PUSH
61658: LD_INT 3
61660: NEG
61661: PUSH
61662: EMPTY
61663: LIST
61664: LIST
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61697: LD_ADDR_VAR 0 42
61701: PUSH
61702: LD_INT 0
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 0
61714: PUSH
61715: LD_INT 1
61717: NEG
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: LD_INT 0
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: PUSH
61736: LD_INT 1
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 0
61745: PUSH
61746: LD_INT 1
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: LD_INT 0
61759: PUSH
61760: EMPTY
61761: LIST
61762: LIST
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: LD_INT 1
61770: NEG
61771: PUSH
61772: EMPTY
61773: LIST
61774: LIST
61775: PUSH
61776: LD_INT 1
61778: NEG
61779: PUSH
61780: LD_INT 2
61782: NEG
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 0
61790: PUSH
61791: LD_INT 2
61793: NEG
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 1
61801: PUSH
61802: LD_INT 1
61804: NEG
61805: PUSH
61806: EMPTY
61807: LIST
61808: LIST
61809: PUSH
61810: LD_INT 2
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 2
61822: PUSH
61823: LD_INT 2
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: LD_INT 2
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 0
61842: PUSH
61843: LD_INT 2
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: NEG
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 2
61863: NEG
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 2
61875: NEG
61876: PUSH
61877: LD_INT 2
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: LD_INT 2
61887: NEG
61888: PUSH
61889: LD_INT 3
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 1
61899: NEG
61900: PUSH
61901: LD_INT 3
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 0
61911: PUSH
61912: LD_INT 3
61914: NEG
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: LD_INT 2
61925: NEG
61926: PUSH
61927: EMPTY
61928: LIST
61929: LIST
61930: PUSH
61931: LD_INT 3
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 3
61943: PUSH
61944: LD_INT 3
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: LD_INT 2
61953: PUSH
61954: LD_INT 3
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: PUSH
61961: LD_INT 1
61963: PUSH
61964: LD_INT 3
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 0
61973: PUSH
61974: LD_INT 3
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 1
61983: NEG
61984: PUSH
61985: LD_INT 2
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 3
61994: NEG
61995: PUSH
61996: LD_INT 2
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 3
62006: NEG
62007: PUSH
62008: LD_INT 3
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62047: LD_ADDR_VAR 0 43
62051: PUSH
62052: LD_INT 0
62054: PUSH
62055: LD_INT 0
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 0
62064: PUSH
62065: LD_INT 1
62067: NEG
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: LD_INT 0
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 1
62085: PUSH
62086: LD_INT 1
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 1
62105: NEG
62106: PUSH
62107: LD_INT 0
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: PUSH
62114: LD_INT 1
62116: NEG
62117: PUSH
62118: LD_INT 1
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 2
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 0
62140: PUSH
62141: LD_INT 2
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: LD_INT 1
62154: NEG
62155: PUSH
62156: EMPTY
62157: LIST
62158: LIST
62159: PUSH
62160: LD_INT 2
62162: PUSH
62163: LD_INT 0
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 2
62172: PUSH
62173: LD_INT 1
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 1
62182: PUSH
62183: LD_INT 2
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 0
62192: PUSH
62193: LD_INT 2
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: NEG
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 2
62213: NEG
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 2
62224: NEG
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: LD_INT 3
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 0
62248: PUSH
62249: LD_INT 3
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: LD_INT 2
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 2
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 3
62281: PUSH
62282: LD_INT 0
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 3
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 3
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: LD_INT 3
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: LD_INT 2
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: LD_INT 2
62332: NEG
62333: PUSH
62334: LD_INT 1
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 3
62343: NEG
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 3
62354: NEG
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: EMPTY
62361: LIST
62362: LIST
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: LIST
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62395: LD_ADDR_VAR 0 44
62399: PUSH
62400: LD_INT 0
62402: PUSH
62403: LD_INT 0
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 0
62412: PUSH
62413: LD_INT 1
62415: NEG
62416: PUSH
62417: EMPTY
62418: LIST
62419: LIST
62420: PUSH
62421: LD_INT 1
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 1
62433: PUSH
62434: LD_INT 1
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: LD_INT 0
62443: PUSH
62444: LD_INT 1
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 1
62453: NEG
62454: PUSH
62455: LD_INT 0
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 1
62464: NEG
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: LD_INT 2
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: LD_INT 1
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 2
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 2
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 2
62519: PUSH
62520: LD_INT 2
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: LD_INT 2
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 1
62539: NEG
62540: PUSH
62541: LD_INT 1
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 2
62561: NEG
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: EMPTY
62568: LIST
62569: LIST
62570: PUSH
62571: LD_INT 2
62573: NEG
62574: PUSH
62575: LD_INT 2
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 2
62585: NEG
62586: PUSH
62587: LD_INT 3
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 2
62597: PUSH
62598: LD_INT 1
62600: NEG
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 3
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 3
62618: PUSH
62619: LD_INT 1
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 3
62628: PUSH
62629: LD_INT 2
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 3
62638: PUSH
62639: LD_INT 3
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 2
62648: PUSH
62649: LD_INT 3
62651: PUSH
62652: EMPTY
62653: LIST
62654: LIST
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 3
62669: NEG
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 3
62680: NEG
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: LD_INT 2
62696: NEG
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 3
62704: NEG
62705: PUSH
62706: LD_INT 3
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: LIST
62737: LIST
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62745: LD_ADDR_VAR 0 45
62749: PUSH
62750: LD_INT 0
62752: PUSH
62753: LD_INT 0
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: LD_INT 1
62765: NEG
62766: PUSH
62767: EMPTY
62768: LIST
62769: LIST
62770: PUSH
62771: LD_INT 1
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 1
62783: PUSH
62784: LD_INT 1
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 0
62793: PUSH
62794: LD_INT 1
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: LD_INT 1
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: NEG
62827: PUSH
62828: LD_INT 2
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 0
62838: PUSH
62839: LD_INT 2
62841: NEG
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: LD_INT 1
62852: NEG
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 2
62860: PUSH
62861: LD_INT 1
62863: PUSH
62864: EMPTY
62865: LIST
62866: LIST
62867: PUSH
62868: LD_INT 2
62870: PUSH
62871: LD_INT 2
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 1
62880: PUSH
62881: LD_INT 2
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 2
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: NEG
62901: PUSH
62902: LD_INT 1
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 2
62911: NEG
62912: PUSH
62913: LD_INT 1
62915: NEG
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 2
62923: NEG
62924: PUSH
62925: LD_INT 2
62927: NEG
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 2
62935: NEG
62936: PUSH
62937: LD_INT 3
62939: NEG
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 1
62947: NEG
62948: PUSH
62949: LD_INT 3
62951: NEG
62952: PUSH
62953: EMPTY
62954: LIST
62955: LIST
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: LD_INT 3
62962: NEG
62963: PUSH
62964: EMPTY
62965: LIST
62966: LIST
62967: PUSH
62968: LD_INT 1
62970: PUSH
62971: LD_INT 2
62973: NEG
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 3
62981: PUSH
62982: LD_INT 2
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 3
62991: PUSH
62992: LD_INT 3
62994: PUSH
62995: EMPTY
62996: LIST
62997: LIST
62998: PUSH
62999: LD_INT 2
63001: PUSH
63002: LD_INT 3
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: LD_INT 3
63014: PUSH
63015: EMPTY
63016: LIST
63017: LIST
63018: PUSH
63019: LD_INT 0
63021: PUSH
63022: LD_INT 3
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 1
63031: NEG
63032: PUSH
63033: LD_INT 2
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 3
63042: NEG
63043: PUSH
63044: LD_INT 2
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 3
63054: NEG
63055: PUSH
63056: LD_INT 3
63058: NEG
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63095: LD_ADDR_VAR 0 46
63099: PUSH
63100: LD_INT 0
63102: PUSH
63103: LD_INT 0
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: LD_INT 0
63112: PUSH
63113: LD_INT 1
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 1
63123: PUSH
63124: LD_INT 0
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 1
63133: PUSH
63134: LD_INT 1
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: LD_INT 1
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 1
63153: NEG
63154: PUSH
63155: LD_INT 0
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: PUSH
63162: LD_INT 1
63164: NEG
63165: PUSH
63166: LD_INT 1
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: NEG
63177: PUSH
63178: LD_INT 2
63180: NEG
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 0
63188: PUSH
63189: LD_INT 2
63191: NEG
63192: PUSH
63193: EMPTY
63194: LIST
63195: LIST
63196: PUSH
63197: LD_INT 1
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 2
63210: PUSH
63211: LD_INT 0
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: LD_INT 1
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 0
63240: PUSH
63241: LD_INT 2
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 1
63250: NEG
63251: PUSH
63252: LD_INT 1
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 2
63261: NEG
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 2
63272: NEG
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 1
63284: NEG
63285: PUSH
63286: LD_INT 3
63288: NEG
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 0
63296: PUSH
63297: LD_INT 3
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: LD_INT 2
63310: NEG
63311: PUSH
63312: EMPTY
63313: LIST
63314: LIST
63315: PUSH
63316: LD_INT 2
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 3
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 3
63339: PUSH
63340: LD_INT 1
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 1
63349: PUSH
63350: LD_INT 3
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: LD_INT 3
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: LD_INT 2
63373: PUSH
63374: EMPTY
63375: LIST
63376: LIST
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: LD_INT 1
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 3
63391: NEG
63392: PUSH
63393: LD_INT 0
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: PUSH
63400: LD_INT 3
63402: NEG
63403: PUSH
63404: LD_INT 1
63406: NEG
63407: PUSH
63408: EMPTY
63409: LIST
63410: LIST
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63443: LD_ADDR_VAR 0 47
63447: PUSH
63448: LD_INT 0
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 0
63460: PUSH
63461: LD_INT 1
63463: NEG
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: LD_INT 1
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: LD_INT 1
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: LD_INT 0
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: NEG
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 1
63524: NEG
63525: PUSH
63526: LD_INT 2
63528: NEG
63529: PUSH
63530: EMPTY
63531: LIST
63532: LIST
63533: PUSH
63534: LD_INT 0
63536: PUSH
63537: LD_INT 2
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: LD_INT 1
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: NEG
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 2
63570: NEG
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63594: LD_ADDR_VAR 0 48
63598: PUSH
63599: LD_INT 0
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: LD_INT 1
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 1
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: LD_INT 1
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: NEG
63676: PUSH
63677: LD_INT 2
63679: NEG
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: LD_INT 2
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 1
63698: PUSH
63699: LD_INT 1
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 2
63709: PUSH
63710: LD_INT 0
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 2
63719: PUSH
63720: LD_INT 1
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63741: LD_ADDR_VAR 0 49
63745: PUSH
63746: LD_INT 0
63748: PUSH
63749: LD_INT 0
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 0
63758: PUSH
63759: LD_INT 1
63761: NEG
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 1
63769: PUSH
63770: LD_INT 0
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 1
63779: PUSH
63780: LD_INT 1
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 0
63789: PUSH
63790: LD_INT 1
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 1
63799: NEG
63800: PUSH
63801: LD_INT 0
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: PUSH
63808: LD_INT 1
63810: NEG
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 1
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: PUSH
63844: LD_INT 1
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 2
63853: PUSH
63854: LD_INT 2
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: LD_INT 2
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63885: LD_ADDR_VAR 0 50
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 0
63902: PUSH
63903: LD_INT 1
63905: NEG
63906: PUSH
63907: EMPTY
63908: LIST
63909: LIST
63910: PUSH
63911: LD_INT 1
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: LD_INT 1
63923: PUSH
63924: LD_INT 1
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 0
63933: PUSH
63934: LD_INT 1
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 1
63943: NEG
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 1
63954: NEG
63955: PUSH
63956: LD_INT 1
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 2
63966: PUSH
63967: LD_INT 1
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: PUSH
63974: LD_INT 2
63976: PUSH
63977: LD_INT 2
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: LD_INT 2
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: LD_INT 1
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: LIST
64027: LIST
64028: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64029: LD_ADDR_VAR 0 51
64033: PUSH
64034: LD_INT 0
64036: PUSH
64037: LD_INT 0
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 0
64046: PUSH
64047: LD_INT 1
64049: NEG
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: PUSH
64055: LD_INT 1
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: EMPTY
64082: LIST
64083: LIST
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: LD_INT 1
64102: NEG
64103: PUSH
64104: EMPTY
64105: LIST
64106: LIST
64107: PUSH
64108: LD_INT 1
64110: PUSH
64111: LD_INT 2
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_INT 0
64120: PUSH
64121: LD_INT 2
64123: PUSH
64124: EMPTY
64125: LIST
64126: LIST
64127: PUSH
64128: LD_INT 1
64130: NEG
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 2
64141: NEG
64142: PUSH
64143: LD_INT 0
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 2
64152: NEG
64153: PUSH
64154: LD_INT 1
64156: NEG
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: LIST
64166: LIST
64167: LIST
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64176: LD_ADDR_VAR 0 52
64180: PUSH
64181: LD_INT 0
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: LD_INT 1
64196: NEG
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 1
64204: PUSH
64205: LD_INT 0
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 1
64214: PUSH
64215: LD_INT 1
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: LD_INT 1
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: LD_INT 0
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 1
64245: NEG
64246: PUSH
64247: LD_INT 1
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 1
64257: NEG
64258: PUSH
64259: LD_INT 2
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: LD_INT 1
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 2
64280: NEG
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: LD_INT 1
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 2
64303: NEG
64304: PUSH
64305: LD_INT 2
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64327: LD_ADDR_VAR 0 53
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: LD_INT 1
64347: NEG
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 1
64355: PUSH
64356: LD_INT 0
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 1
64365: PUSH
64366: LD_INT 1
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: LD_INT 1
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: NEG
64386: PUSH
64387: LD_INT 0
64389: PUSH
64390: EMPTY
64391: LIST
64392: LIST
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: LD_INT 1
64400: NEG
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: LD_INT 2
64412: NEG
64413: PUSH
64414: EMPTY
64415: LIST
64416: LIST
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: LD_INT 2
64423: NEG
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: PUSH
64429: LD_INT 1
64431: PUSH
64432: LD_INT 1
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 2
64442: PUSH
64443: LD_INT 0
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 2
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: PUSH
64460: LD_INT 2
64462: PUSH
64463: LD_INT 2
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: LD_INT 2
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: LD_INT 2
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 1
64492: NEG
64493: PUSH
64494: LD_INT 1
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 2
64503: NEG
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 2
64514: NEG
64515: PUSH
64516: LD_INT 1
64518: NEG
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 2
64526: NEG
64527: PUSH
64528: LD_INT 2
64530: NEG
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64557: LD_ADDR_VAR 0 54
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 1
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 1
64585: PUSH
64586: LD_INT 0
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: LD_INT 1
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 1
64615: NEG
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 1
64626: NEG
64627: PUSH
64628: LD_INT 1
64630: NEG
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 1
64638: NEG
64639: PUSH
64640: LD_INT 2
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 0
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 1
64661: PUSH
64662: LD_INT 1
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 2
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 2
64682: PUSH
64683: LD_INT 1
64685: PUSH
64686: EMPTY
64687: LIST
64688: LIST
64689: PUSH
64690: LD_INT 2
64692: PUSH
64693: LD_INT 2
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 1
64702: PUSH
64703: LD_INT 2
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: LD_INT 2
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: LD_INT 1
64722: NEG
64723: PUSH
64724: LD_INT 1
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: PUSH
64731: LD_INT 2
64733: NEG
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 2
64744: NEG
64745: PUSH
64746: LD_INT 1
64748: NEG
64749: PUSH
64750: EMPTY
64751: LIST
64752: LIST
64753: PUSH
64754: LD_INT 2
64756: NEG
64757: PUSH
64758: LD_INT 2
64760: NEG
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: LIST
64774: LIST
64775: LIST
64776: LIST
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: LIST
64785: LIST
64786: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64787: LD_ADDR_VAR 0 55
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: LD_INT 0
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: LD_INT 1
64807: NEG
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: LD_INT 1
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 0
64835: PUSH
64836: LD_INT 1
64838: PUSH
64839: EMPTY
64840: LIST
64841: LIST
64842: PUSH
64843: LD_INT 1
64845: NEG
64846: PUSH
64847: LD_INT 0
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 1
64856: NEG
64857: PUSH
64858: LD_INT 1
64860: NEG
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 1
64868: NEG
64869: PUSH
64870: LD_INT 2
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 2
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 1
64891: PUSH
64892: LD_INT 1
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 2
64902: PUSH
64903: LD_INT 0
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 2
64912: PUSH
64913: LD_INT 1
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: LD_INT 2
64922: PUSH
64923: LD_INT 2
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 1
64932: PUSH
64933: LD_INT 2
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 0
64942: PUSH
64943: LD_INT 2
64945: PUSH
64946: EMPTY
64947: LIST
64948: LIST
64949: PUSH
64950: LD_INT 1
64952: NEG
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 2
64963: NEG
64964: PUSH
64965: LD_INT 0
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 2
64974: NEG
64975: PUSH
64976: LD_INT 1
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 2
64986: NEG
64987: PUSH
64988: LD_INT 2
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: LIST
65014: LIST
65015: LIST
65016: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65017: LD_ADDR_VAR 0 56
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: LD_INT 0
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: LD_INT 1
65037: NEG
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: LD_INT 0
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: LD_INT 1
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: LD_INT 1
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: LD_INT 1
65075: NEG
65076: PUSH
65077: LD_INT 0
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 1
65086: NEG
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: PUSH
65096: LD_INT 1
65098: NEG
65099: PUSH
65100: LD_INT 2
65102: NEG
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: PUSH
65108: LD_INT 0
65110: PUSH
65111: LD_INT 2
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: LD_INT 1
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 2
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 2
65142: PUSH
65143: LD_INT 1
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 2
65152: PUSH
65153: LD_INT 2
65155: PUSH
65156: EMPTY
65157: LIST
65158: LIST
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: LD_INT 2
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: LD_INT 2
65175: PUSH
65176: EMPTY
65177: LIST
65178: LIST
65179: PUSH
65180: LD_INT 1
65182: NEG
65183: PUSH
65184: LD_INT 1
65186: PUSH
65187: EMPTY
65188: LIST
65189: LIST
65190: PUSH
65191: LD_INT 2
65193: NEG
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 2
65204: NEG
65205: PUSH
65206: LD_INT 1
65208: NEG
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PUSH
65214: LD_INT 2
65216: NEG
65217: PUSH
65218: LD_INT 2
65220: NEG
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: PUSH
65226: EMPTY
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65247: LD_ADDR_VAR 0 57
65251: PUSH
65252: LD_INT 0
65254: PUSH
65255: LD_INT 0
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 0
65264: PUSH
65265: LD_INT 1
65267: NEG
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 1
65275: PUSH
65276: LD_INT 0
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: PUSH
65283: LD_INT 1
65285: PUSH
65286: LD_INT 1
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: LD_INT 1
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 1
65305: NEG
65306: PUSH
65307: LD_INT 0
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 1
65316: NEG
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: EMPTY
65323: LIST
65324: LIST
65325: PUSH
65326: LD_INT 1
65328: NEG
65329: PUSH
65330: LD_INT 2
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: LD_INT 2
65343: NEG
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 1
65351: PUSH
65352: LD_INT 1
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 2
65362: PUSH
65363: LD_INT 0
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 2
65372: PUSH
65373: LD_INT 1
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 2
65382: PUSH
65383: LD_INT 2
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: LD_INT 2
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 0
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: LD_INT 1
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 2
65423: NEG
65424: PUSH
65425: LD_INT 0
65427: PUSH
65428: EMPTY
65429: LIST
65430: LIST
65431: PUSH
65432: LD_INT 2
65434: NEG
65435: PUSH
65436: LD_INT 1
65438: NEG
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 2
65446: NEG
65447: PUSH
65448: LD_INT 2
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: LIST
65469: LIST
65470: LIST
65471: LIST
65472: LIST
65473: LIST
65474: LIST
65475: LIST
65476: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65477: LD_ADDR_VAR 0 58
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: LD_INT 0
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 0
65494: PUSH
65495: LD_INT 1
65497: NEG
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 1
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: LD_INT 1
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 0
65525: PUSH
65526: LD_INT 1
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 1
65535: NEG
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: LD_INT 1
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 1
65558: NEG
65559: PUSH
65560: LD_INT 2
65562: NEG
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 0
65570: PUSH
65571: LD_INT 2
65573: NEG
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 1
65581: PUSH
65582: LD_INT 1
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 2
65592: PUSH
65593: LD_INT 0
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 2
65602: PUSH
65603: LD_INT 1
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 2
65612: PUSH
65613: LD_INT 2
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 1
65622: PUSH
65623: LD_INT 2
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 0
65632: PUSH
65633: LD_INT 2
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 1
65642: NEG
65643: PUSH
65644: LD_INT 1
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 2
65653: NEG
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 2
65664: NEG
65665: PUSH
65666: LD_INT 1
65668: NEG
65669: PUSH
65670: EMPTY
65671: LIST
65672: LIST
65673: PUSH
65674: LD_INT 2
65676: NEG
65677: PUSH
65678: LD_INT 2
65680: NEG
65681: PUSH
65682: EMPTY
65683: LIST
65684: LIST
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65707: LD_ADDR_VAR 0 59
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: LD_INT 1
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 1
65765: NEG
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 1
65776: NEG
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65795: LD_ADDR_VAR 0 60
65799: PUSH
65800: LD_INT 0
65802: PUSH
65803: LD_INT 0
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: LD_INT 1
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: LD_INT 0
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: LD_INT 1
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: LD_INT 1
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: LD_INT 0
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65883: LD_ADDR_VAR 0 61
65887: PUSH
65888: LD_INT 0
65890: PUSH
65891: LD_INT 0
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: LD_INT 1
65903: NEG
65904: PUSH
65905: EMPTY
65906: LIST
65907: LIST
65908: PUSH
65909: LD_INT 1
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: PUSH
65919: LD_INT 1
65921: PUSH
65922: LD_INT 1
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: LD_INT 1
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 1
65941: NEG
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: LD_INT 1
65956: NEG
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: LIST
65970: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65971: LD_ADDR_VAR 0 62
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: LD_INT 0
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_INT 0
65988: PUSH
65989: LD_INT 1
65991: NEG
65992: PUSH
65993: EMPTY
65994: LIST
65995: LIST
65996: PUSH
65997: LD_INT 1
65999: PUSH
66000: LD_INT 0
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: PUSH
66007: LD_INT 1
66009: PUSH
66010: LD_INT 1
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: LD_INT 1
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 1
66029: NEG
66030: PUSH
66031: LD_INT 0
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 1
66040: NEG
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66059: LD_ADDR_VAR 0 63
66063: PUSH
66064: LD_INT 0
66066: PUSH
66067: LD_INT 0
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: PUSH
66074: LD_INT 0
66076: PUSH
66077: LD_INT 1
66079: NEG
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 1
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: PUSH
66095: LD_INT 1
66097: PUSH
66098: LD_INT 1
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: LD_INT 0
66107: PUSH
66108: LD_INT 1
66110: PUSH
66111: EMPTY
66112: LIST
66113: LIST
66114: PUSH
66115: LD_INT 1
66117: NEG
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: LD_INT 1
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66147: LD_ADDR_VAR 0 64
66151: PUSH
66152: LD_INT 0
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: LD_INT 1
66167: NEG
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 1
66175: PUSH
66176: LD_INT 0
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 1
66185: PUSH
66186: LD_INT 1
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 0
66195: PUSH
66196: LD_INT 1
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 1
66205: NEG
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: EMPTY
66211: LIST
66212: LIST
66213: PUSH
66214: LD_INT 1
66216: NEG
66217: PUSH
66218: LD_INT 1
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: LIST
66230: LIST
66231: LIST
66232: LIST
66233: LIST
66234: ST_TO_ADDR
// end ; 1 :
66235: GO 72132
66237: LD_INT 1
66239: DOUBLE
66240: EQUAL
66241: IFTRUE 66245
66243: GO 68868
66245: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66246: LD_ADDR_VAR 0 11
66250: PUSH
66251: LD_INT 1
66253: NEG
66254: PUSH
66255: LD_INT 3
66257: NEG
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 0
66265: PUSH
66266: LD_INT 3
66268: NEG
66269: PUSH
66270: EMPTY
66271: LIST
66272: LIST
66273: PUSH
66274: LD_INT 1
66276: PUSH
66277: LD_INT 2
66279: NEG
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: LIST
66289: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66290: LD_ADDR_VAR 0 12
66294: PUSH
66295: LD_INT 2
66297: PUSH
66298: LD_INT 1
66300: NEG
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 3
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 3
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: LIST
66330: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66331: LD_ADDR_VAR 0 13
66335: PUSH
66336: LD_INT 3
66338: PUSH
66339: LD_INT 2
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 3
66348: PUSH
66349: LD_INT 3
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 2
66358: PUSH
66359: LD_INT 3
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: LIST
66370: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66371: LD_ADDR_VAR 0 14
66375: PUSH
66376: LD_INT 1
66378: PUSH
66379: LD_INT 3
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: PUSH
66386: LD_INT 0
66388: PUSH
66389: LD_INT 3
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 1
66398: NEG
66399: PUSH
66400: LD_INT 2
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: LIST
66411: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66412: LD_ADDR_VAR 0 15
66416: PUSH
66417: LD_INT 2
66419: NEG
66420: PUSH
66421: LD_INT 1
66423: PUSH
66424: EMPTY
66425: LIST
66426: LIST
66427: PUSH
66428: LD_INT 3
66430: NEG
66431: PUSH
66432: LD_INT 0
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 3
66441: NEG
66442: PUSH
66443: LD_INT 1
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: LIST
66455: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66456: LD_ADDR_VAR 0 16
66460: PUSH
66461: LD_INT 2
66463: NEG
66464: PUSH
66465: LD_INT 3
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 3
66475: NEG
66476: PUSH
66477: LD_INT 2
66479: NEG
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 3
66487: NEG
66488: PUSH
66489: LD_INT 3
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: LIST
66501: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66502: LD_ADDR_VAR 0 17
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: LD_INT 3
66513: NEG
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 0
66521: PUSH
66522: LD_INT 3
66524: NEG
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 1
66532: PUSH
66533: LD_INT 2
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: LIST
66545: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66546: LD_ADDR_VAR 0 18
66550: PUSH
66551: LD_INT 2
66553: PUSH
66554: LD_INT 1
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 3
66564: PUSH
66565: LD_INT 0
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 3
66574: PUSH
66575: LD_INT 1
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: EMPTY
66583: LIST
66584: LIST
66585: LIST
66586: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66587: LD_ADDR_VAR 0 19
66591: PUSH
66592: LD_INT 3
66594: PUSH
66595: LD_INT 2
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 3
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 2
66614: PUSH
66615: LD_INT 3
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: LIST
66626: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66627: LD_ADDR_VAR 0 20
66631: PUSH
66632: LD_INT 1
66634: PUSH
66635: LD_INT 3
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: LD_INT 3
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 1
66654: NEG
66655: PUSH
66656: LD_INT 2
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: LIST
66667: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66668: LD_ADDR_VAR 0 21
66672: PUSH
66673: LD_INT 2
66675: NEG
66676: PUSH
66677: LD_INT 1
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 3
66686: NEG
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 3
66697: NEG
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: LIST
66711: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66712: LD_ADDR_VAR 0 22
66716: PUSH
66717: LD_INT 2
66719: NEG
66720: PUSH
66721: LD_INT 3
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 3
66731: NEG
66732: PUSH
66733: LD_INT 2
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 3
66743: NEG
66744: PUSH
66745: LD_INT 3
66747: NEG
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: EMPTY
66754: LIST
66755: LIST
66756: LIST
66757: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66758: LD_ADDR_VAR 0 23
66762: PUSH
66763: LD_INT 0
66765: PUSH
66766: LD_INT 3
66768: NEG
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 1
66776: NEG
66777: PUSH
66778: LD_INT 4
66780: NEG
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 1
66788: PUSH
66789: LD_INT 3
66791: NEG
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: LIST
66801: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66802: LD_ADDR_VAR 0 24
66806: PUSH
66807: LD_INT 3
66809: PUSH
66810: LD_INT 0
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: LD_INT 1
66822: NEG
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: PUSH
66828: LD_INT 4
66830: PUSH
66831: LD_INT 1
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: EMPTY
66839: LIST
66840: LIST
66841: LIST
66842: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66843: LD_ADDR_VAR 0 25
66847: PUSH
66848: LD_INT 3
66850: PUSH
66851: LD_INT 3
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 4
66860: PUSH
66861: LD_INT 3
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 3
66870: PUSH
66871: LD_INT 4
66873: PUSH
66874: EMPTY
66875: LIST
66876: LIST
66877: PUSH
66878: EMPTY
66879: LIST
66880: LIST
66881: LIST
66882: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66883: LD_ADDR_VAR 0 26
66887: PUSH
66888: LD_INT 0
66890: PUSH
66891: LD_INT 3
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 1
66900: PUSH
66901: LD_INT 4
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: LD_INT 1
66910: NEG
66911: PUSH
66912: LD_INT 3
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: LIST
66923: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66924: LD_ADDR_VAR 0 27
66928: PUSH
66929: LD_INT 3
66931: NEG
66932: PUSH
66933: LD_INT 0
66935: PUSH
66936: EMPTY
66937: LIST
66938: LIST
66939: PUSH
66940: LD_INT 3
66942: NEG
66943: PUSH
66944: LD_INT 1
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 4
66953: NEG
66954: PUSH
66955: LD_INT 1
66957: NEG
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: LIST
66967: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66968: LD_ADDR_VAR 0 28
66972: PUSH
66973: LD_INT 3
66975: NEG
66976: PUSH
66977: LD_INT 3
66979: NEG
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 3
66987: NEG
66988: PUSH
66989: LD_INT 4
66991: NEG
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 4
66999: NEG
67000: PUSH
67001: LD_INT 3
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: LIST
67013: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67014: LD_ADDR_VAR 0 29
67018: PUSH
67019: LD_INT 1
67021: NEG
67022: PUSH
67023: LD_INT 3
67025: NEG
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 0
67033: PUSH
67034: LD_INT 3
67036: NEG
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: LD_INT 2
67047: NEG
67048: PUSH
67049: EMPTY
67050: LIST
67051: LIST
67052: PUSH
67053: LD_INT 1
67055: NEG
67056: PUSH
67057: LD_INT 4
67059: NEG
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: PUSH
67065: LD_INT 0
67067: PUSH
67068: LD_INT 4
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 1
67078: PUSH
67079: LD_INT 3
67081: NEG
67082: PUSH
67083: EMPTY
67084: LIST
67085: LIST
67086: PUSH
67087: LD_INT 1
67089: NEG
67090: PUSH
67091: LD_INT 5
67093: NEG
67094: PUSH
67095: EMPTY
67096: LIST
67097: LIST
67098: PUSH
67099: LD_INT 0
67101: PUSH
67102: LD_INT 5
67104: NEG
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 1
67112: PUSH
67113: LD_INT 4
67115: NEG
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 1
67123: NEG
67124: PUSH
67125: LD_INT 6
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 0
67135: PUSH
67136: LD_INT 6
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 1
67146: PUSH
67147: LD_INT 5
67149: NEG
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67169: LD_ADDR_VAR 0 30
67173: PUSH
67174: LD_INT 2
67176: PUSH
67177: LD_INT 1
67179: NEG
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 3
67187: PUSH
67188: LD_INT 0
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 3
67197: PUSH
67198: LD_INT 1
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 3
67207: PUSH
67208: LD_INT 1
67210: NEG
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 4
67218: PUSH
67219: LD_INT 0
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: PUSH
67226: LD_INT 4
67228: PUSH
67229: LD_INT 1
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PUSH
67236: LD_INT 4
67238: PUSH
67239: LD_INT 1
67241: NEG
67242: PUSH
67243: EMPTY
67244: LIST
67245: LIST
67246: PUSH
67247: LD_INT 5
67249: PUSH
67250: LD_INT 0
67252: PUSH
67253: EMPTY
67254: LIST
67255: LIST
67256: PUSH
67257: LD_INT 5
67259: PUSH
67260: LD_INT 1
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 5
67269: PUSH
67270: LD_INT 1
67272: NEG
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 6
67280: PUSH
67281: LD_INT 0
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 6
67290: PUSH
67291: LD_INT 1
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: LIST
67302: LIST
67303: LIST
67304: LIST
67305: LIST
67306: LIST
67307: LIST
67308: LIST
67309: LIST
67310: LIST
67311: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67312: LD_ADDR_VAR 0 31
67316: PUSH
67317: LD_INT 3
67319: PUSH
67320: LD_INT 2
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: LD_INT 3
67329: PUSH
67330: LD_INT 3
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 2
67339: PUSH
67340: LD_INT 3
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 4
67349: PUSH
67350: LD_INT 3
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 4
67359: PUSH
67360: LD_INT 4
67362: PUSH
67363: EMPTY
67364: LIST
67365: LIST
67366: PUSH
67367: LD_INT 3
67369: PUSH
67370: LD_INT 4
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 5
67379: PUSH
67380: LD_INT 4
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 5
67389: PUSH
67390: LD_INT 5
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: PUSH
67397: LD_INT 4
67399: PUSH
67400: LD_INT 5
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 6
67409: PUSH
67410: LD_INT 5
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 6
67419: PUSH
67420: LD_INT 6
67422: PUSH
67423: EMPTY
67424: LIST
67425: LIST
67426: PUSH
67427: LD_INT 5
67429: PUSH
67430: LD_INT 6
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67451: LD_ADDR_VAR 0 32
67455: PUSH
67456: LD_INT 1
67458: PUSH
67459: LD_INT 3
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 0
67468: PUSH
67469: LD_INT 3
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 1
67478: NEG
67479: PUSH
67480: LD_INT 2
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: PUSH
67487: LD_INT 1
67489: PUSH
67490: LD_INT 4
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 0
67499: PUSH
67500: LD_INT 4
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: PUSH
67507: LD_INT 1
67509: NEG
67510: PUSH
67511: LD_INT 3
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 1
67520: PUSH
67521: LD_INT 5
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 0
67530: PUSH
67531: LD_INT 5
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: PUSH
67538: LD_INT 1
67540: NEG
67541: PUSH
67542: LD_INT 4
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 1
67551: PUSH
67552: LD_INT 6
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 0
67561: PUSH
67562: LD_INT 6
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 1
67571: NEG
67572: PUSH
67573: LD_INT 5
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: EMPTY
67581: LIST
67582: LIST
67583: LIST
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67594: LD_ADDR_VAR 0 33
67598: PUSH
67599: LD_INT 2
67601: NEG
67602: PUSH
67603: LD_INT 1
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 3
67612: NEG
67613: PUSH
67614: LD_INT 0
67616: PUSH
67617: EMPTY
67618: LIST
67619: LIST
67620: PUSH
67621: LD_INT 3
67623: NEG
67624: PUSH
67625: LD_INT 1
67627: NEG
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 3
67635: NEG
67636: PUSH
67637: LD_INT 1
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: PUSH
67644: LD_INT 4
67646: NEG
67647: PUSH
67648: LD_INT 0
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 4
67657: NEG
67658: PUSH
67659: LD_INT 1
67661: NEG
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 4
67669: NEG
67670: PUSH
67671: LD_INT 1
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 5
67680: NEG
67681: PUSH
67682: LD_INT 0
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 5
67691: NEG
67692: PUSH
67693: LD_INT 1
67695: NEG
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 5
67703: NEG
67704: PUSH
67705: LD_INT 1
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 6
67714: NEG
67715: PUSH
67716: LD_INT 0
67718: PUSH
67719: EMPTY
67720: LIST
67721: LIST
67722: PUSH
67723: LD_INT 6
67725: NEG
67726: PUSH
67727: LD_INT 1
67729: NEG
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67749: LD_ADDR_VAR 0 34
67753: PUSH
67754: LD_INT 2
67756: NEG
67757: PUSH
67758: LD_INT 3
67760: NEG
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 3
67768: NEG
67769: PUSH
67770: LD_INT 2
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 3
67780: NEG
67781: PUSH
67782: LD_INT 3
67784: NEG
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 3
67792: NEG
67793: PUSH
67794: LD_INT 4
67796: NEG
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 4
67804: NEG
67805: PUSH
67806: LD_INT 3
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 4
67816: NEG
67817: PUSH
67818: LD_INT 4
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 4
67828: NEG
67829: PUSH
67830: LD_INT 5
67832: NEG
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: PUSH
67838: LD_INT 5
67840: NEG
67841: PUSH
67842: LD_INT 4
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 5
67852: NEG
67853: PUSH
67854: LD_INT 5
67856: NEG
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 5
67864: NEG
67865: PUSH
67866: LD_INT 6
67868: NEG
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 6
67876: NEG
67877: PUSH
67878: LD_INT 5
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 6
67888: NEG
67889: PUSH
67890: LD_INT 6
67892: NEG
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67912: LD_ADDR_VAR 0 41
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: LD_INT 2
67922: NEG
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 1
67930: NEG
67931: PUSH
67932: LD_INT 3
67934: NEG
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 1
67942: PUSH
67943: LD_INT 2
67945: NEG
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: LIST
67955: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67956: LD_ADDR_VAR 0 42
67960: PUSH
67961: LD_INT 2
67963: PUSH
67964: LD_INT 0
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 2
67973: PUSH
67974: LD_INT 1
67976: NEG
67977: PUSH
67978: EMPTY
67979: LIST
67980: LIST
67981: PUSH
67982: LD_INT 3
67984: PUSH
67985: LD_INT 1
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: LIST
67996: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67997: LD_ADDR_VAR 0 43
68001: PUSH
68002: LD_INT 2
68004: PUSH
68005: LD_INT 2
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 3
68014: PUSH
68015: LD_INT 2
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 2
68024: PUSH
68025: LD_INT 3
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: LIST
68036: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68037: LD_ADDR_VAR 0 44
68041: PUSH
68042: LD_INT 0
68044: PUSH
68045: LD_INT 2
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 1
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 1
68064: NEG
68065: PUSH
68066: LD_INT 2
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: LIST
68077: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68078: LD_ADDR_VAR 0 45
68082: PUSH
68083: LD_INT 2
68085: NEG
68086: PUSH
68087: LD_INT 0
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: LD_INT 2
68096: NEG
68097: PUSH
68098: LD_INT 1
68100: PUSH
68101: EMPTY
68102: LIST
68103: LIST
68104: PUSH
68105: LD_INT 3
68107: NEG
68108: PUSH
68109: LD_INT 1
68111: NEG
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: EMPTY
68118: LIST
68119: LIST
68120: LIST
68121: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68122: LD_ADDR_VAR 0 46
68126: PUSH
68127: LD_INT 2
68129: NEG
68130: PUSH
68131: LD_INT 2
68133: NEG
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 2
68141: NEG
68142: PUSH
68143: LD_INT 3
68145: NEG
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: PUSH
68151: LD_INT 3
68153: NEG
68154: PUSH
68155: LD_INT 2
68157: NEG
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: LIST
68167: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68168: LD_ADDR_VAR 0 47
68172: PUSH
68173: LD_INT 2
68175: NEG
68176: PUSH
68177: LD_INT 3
68179: NEG
68180: PUSH
68181: EMPTY
68182: LIST
68183: LIST
68184: PUSH
68185: LD_INT 1
68187: NEG
68188: PUSH
68189: LD_INT 3
68191: NEG
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68201: LD_ADDR_VAR 0 48
68205: PUSH
68206: LD_INT 1
68208: PUSH
68209: LD_INT 2
68211: NEG
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 2
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68232: LD_ADDR_VAR 0 49
68236: PUSH
68237: LD_INT 3
68239: PUSH
68240: LD_INT 1
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 3
68249: PUSH
68250: LD_INT 2
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68261: LD_ADDR_VAR 0 50
68265: PUSH
68266: LD_INT 2
68268: PUSH
68269: LD_INT 3
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 1
68278: PUSH
68279: LD_INT 3
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68290: LD_ADDR_VAR 0 51
68294: PUSH
68295: LD_INT 1
68297: NEG
68298: PUSH
68299: LD_INT 2
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 2
68308: NEG
68309: PUSH
68310: LD_INT 1
68312: PUSH
68313: EMPTY
68314: LIST
68315: LIST
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68321: LD_ADDR_VAR 0 52
68325: PUSH
68326: LD_INT 3
68328: NEG
68329: PUSH
68330: LD_INT 1
68332: NEG
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 3
68340: NEG
68341: PUSH
68342: LD_INT 2
68344: NEG
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
68354: LD_ADDR_VAR 0 53
68358: PUSH
68359: LD_INT 1
68361: NEG
68362: PUSH
68363: LD_INT 3
68365: NEG
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 0
68373: PUSH
68374: LD_INT 3
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 1
68384: PUSH
68385: LD_INT 2
68387: NEG
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: LIST
68397: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68398: LD_ADDR_VAR 0 54
68402: PUSH
68403: LD_INT 2
68405: PUSH
68406: LD_INT 1
68408: NEG
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 3
68416: PUSH
68417: LD_INT 0
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 3
68426: PUSH
68427: LD_INT 1
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: LIST
68438: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68439: LD_ADDR_VAR 0 55
68443: PUSH
68444: LD_INT 3
68446: PUSH
68447: LD_INT 2
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 3
68456: PUSH
68457: LD_INT 3
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 2
68466: PUSH
68467: LD_INT 3
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: LIST
68478: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68479: LD_ADDR_VAR 0 56
68483: PUSH
68484: LD_INT 1
68486: PUSH
68487: LD_INT 3
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 0
68496: PUSH
68497: LD_INT 3
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 1
68506: NEG
68507: PUSH
68508: LD_INT 2
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: LIST
68519: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68520: LD_ADDR_VAR 0 57
68524: PUSH
68525: LD_INT 2
68527: NEG
68528: PUSH
68529: LD_INT 1
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: PUSH
68536: LD_INT 3
68538: NEG
68539: PUSH
68540: LD_INT 0
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 3
68549: NEG
68550: PUSH
68551: LD_INT 1
68553: NEG
68554: PUSH
68555: EMPTY
68556: LIST
68557: LIST
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: LIST
68563: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68564: LD_ADDR_VAR 0 58
68568: PUSH
68569: LD_INT 2
68571: NEG
68572: PUSH
68573: LD_INT 3
68575: NEG
68576: PUSH
68577: EMPTY
68578: LIST
68579: LIST
68580: PUSH
68581: LD_INT 3
68583: NEG
68584: PUSH
68585: LD_INT 2
68587: NEG
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 3
68595: NEG
68596: PUSH
68597: LD_INT 3
68599: NEG
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: LIST
68609: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68610: LD_ADDR_VAR 0 59
68614: PUSH
68615: LD_INT 1
68617: NEG
68618: PUSH
68619: LD_INT 2
68621: NEG
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 0
68629: PUSH
68630: LD_INT 2
68632: NEG
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 1
68640: PUSH
68641: LD_INT 1
68643: NEG
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: LIST
68653: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68654: LD_ADDR_VAR 0 60
68658: PUSH
68659: LD_INT 1
68661: PUSH
68662: LD_INT 1
68664: NEG
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 2
68672: PUSH
68673: LD_INT 0
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 2
68682: PUSH
68683: LD_INT 1
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: LIST
68694: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68695: LD_ADDR_VAR 0 61
68699: PUSH
68700: LD_INT 2
68702: PUSH
68703: LD_INT 1
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 2
68712: PUSH
68713: LD_INT 2
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 1
68722: PUSH
68723: LD_INT 2
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: LIST
68734: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68735: LD_ADDR_VAR 0 62
68739: PUSH
68740: LD_INT 1
68742: PUSH
68743: LD_INT 2
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 0
68752: PUSH
68753: LD_INT 2
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 1
68762: NEG
68763: PUSH
68764: LD_INT 1
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: LIST
68775: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68776: LD_ADDR_VAR 0 63
68780: PUSH
68781: LD_INT 1
68783: NEG
68784: PUSH
68785: LD_INT 1
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PUSH
68792: LD_INT 2
68794: NEG
68795: PUSH
68796: LD_INT 0
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 2
68805: NEG
68806: PUSH
68807: LD_INT 1
68809: NEG
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: LIST
68819: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68820: LD_ADDR_VAR 0 64
68824: PUSH
68825: LD_INT 1
68827: NEG
68828: PUSH
68829: LD_INT 2
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 2
68839: NEG
68840: PUSH
68841: LD_INT 1
68843: NEG
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 2
68851: NEG
68852: PUSH
68853: LD_INT 2
68855: NEG
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: LIST
68865: ST_TO_ADDR
// end ; 2 :
68866: GO 72132
68868: LD_INT 2
68870: DOUBLE
68871: EQUAL
68872: IFTRUE 68876
68874: GO 72131
68876: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68877: LD_ADDR_VAR 0 29
68881: PUSH
68882: LD_INT 4
68884: PUSH
68885: LD_INT 0
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 4
68894: PUSH
68895: LD_INT 1
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 5
68905: PUSH
68906: LD_INT 0
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 5
68915: PUSH
68916: LD_INT 1
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 4
68925: PUSH
68926: LD_INT 1
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 3
68935: PUSH
68936: LD_INT 0
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 3
68945: PUSH
68946: LD_INT 1
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 3
68956: PUSH
68957: LD_INT 2
68959: NEG
68960: PUSH
68961: EMPTY
68962: LIST
68963: LIST
68964: PUSH
68965: LD_INT 5
68967: PUSH
68968: LD_INT 2
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 3
68977: PUSH
68978: LD_INT 3
68980: PUSH
68981: EMPTY
68982: LIST
68983: LIST
68984: PUSH
68985: LD_INT 3
68987: PUSH
68988: LD_INT 2
68990: PUSH
68991: EMPTY
68992: LIST
68993: LIST
68994: PUSH
68995: LD_INT 4
68997: PUSH
68998: LD_INT 3
69000: PUSH
69001: EMPTY
69002: LIST
69003: LIST
69004: PUSH
69005: LD_INT 4
69007: PUSH
69008: LD_INT 4
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 3
69017: PUSH
69018: LD_INT 4
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 2
69027: PUSH
69028: LD_INT 3
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 2
69037: PUSH
69038: LD_INT 2
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 4
69047: PUSH
69048: LD_INT 2
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 2
69057: PUSH
69058: LD_INT 4
69060: PUSH
69061: EMPTY
69062: LIST
69063: LIST
69064: PUSH
69065: LD_INT 0
69067: PUSH
69068: LD_INT 4
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 0
69077: PUSH
69078: LD_INT 3
69080: PUSH
69081: EMPTY
69082: LIST
69083: LIST
69084: PUSH
69085: LD_INT 1
69087: PUSH
69088: LD_INT 4
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 1
69097: PUSH
69098: LD_INT 5
69100: PUSH
69101: EMPTY
69102: LIST
69103: LIST
69104: PUSH
69105: LD_INT 0
69107: PUSH
69108: LD_INT 5
69110: PUSH
69111: EMPTY
69112: LIST
69113: LIST
69114: PUSH
69115: LD_INT 1
69117: NEG
69118: PUSH
69119: LD_INT 4
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 1
69128: NEG
69129: PUSH
69130: LD_INT 3
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 2
69139: PUSH
69140: LD_INT 5
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 2
69149: NEG
69150: PUSH
69151: LD_INT 3
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 3
69160: NEG
69161: PUSH
69162: LD_INT 0
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 3
69171: NEG
69172: PUSH
69173: LD_INT 1
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 2
69183: NEG
69184: PUSH
69185: LD_INT 0
69187: PUSH
69188: EMPTY
69189: LIST
69190: LIST
69191: PUSH
69192: LD_INT 2
69194: NEG
69195: PUSH
69196: LD_INT 1
69198: PUSH
69199: EMPTY
69200: LIST
69201: LIST
69202: PUSH
69203: LD_INT 3
69205: NEG
69206: PUSH
69207: LD_INT 1
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: LD_INT 4
69216: NEG
69217: PUSH
69218: LD_INT 0
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: PUSH
69225: LD_INT 4
69227: NEG
69228: PUSH
69229: LD_INT 1
69231: NEG
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: LD_INT 4
69239: NEG
69240: PUSH
69241: LD_INT 2
69243: NEG
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 2
69251: NEG
69252: PUSH
69253: LD_INT 2
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 4
69262: NEG
69263: PUSH
69264: LD_INT 4
69266: NEG
69267: PUSH
69268: EMPTY
69269: LIST
69270: LIST
69271: PUSH
69272: LD_INT 4
69274: NEG
69275: PUSH
69276: LD_INT 5
69278: NEG
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 3
69286: NEG
69287: PUSH
69288: LD_INT 4
69290: NEG
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: LD_INT 3
69298: NEG
69299: PUSH
69300: LD_INT 3
69302: NEG
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 4
69310: NEG
69311: PUSH
69312: LD_INT 3
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 5
69322: NEG
69323: PUSH
69324: LD_INT 4
69326: NEG
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 5
69334: NEG
69335: PUSH
69336: LD_INT 5
69338: NEG
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: LD_INT 3
69346: NEG
69347: PUSH
69348: LD_INT 5
69350: NEG
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: PUSH
69356: LD_INT 5
69358: NEG
69359: PUSH
69360: LD_INT 3
69362: NEG
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69415: LD_ADDR_VAR 0 30
69419: PUSH
69420: LD_INT 4
69422: PUSH
69423: LD_INT 4
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 4
69432: PUSH
69433: LD_INT 3
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: PUSH
69440: LD_INT 5
69442: PUSH
69443: LD_INT 4
69445: PUSH
69446: EMPTY
69447: LIST
69448: LIST
69449: PUSH
69450: LD_INT 5
69452: PUSH
69453: LD_INT 5
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 4
69462: PUSH
69463: LD_INT 5
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: PUSH
69470: LD_INT 3
69472: PUSH
69473: LD_INT 4
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 3
69482: PUSH
69483: LD_INT 3
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 5
69492: PUSH
69493: LD_INT 3
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 3
69502: PUSH
69503: LD_INT 5
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 0
69512: PUSH
69513: LD_INT 3
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 0
69522: PUSH
69523: LD_INT 2
69525: PUSH
69526: EMPTY
69527: LIST
69528: LIST
69529: PUSH
69530: LD_INT 1
69532: PUSH
69533: LD_INT 3
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 1
69542: PUSH
69543: LD_INT 4
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 0
69552: PUSH
69553: LD_INT 4
69555: PUSH
69556: EMPTY
69557: LIST
69558: LIST
69559: PUSH
69560: LD_INT 1
69562: NEG
69563: PUSH
69564: LD_INT 3
69566: PUSH
69567: EMPTY
69568: LIST
69569: LIST
69570: PUSH
69571: LD_INT 1
69573: NEG
69574: PUSH
69575: LD_INT 2
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 2
69584: PUSH
69585: LD_INT 4
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 2
69594: NEG
69595: PUSH
69596: LD_INT 2
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 4
69605: NEG
69606: PUSH
69607: LD_INT 0
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 4
69616: NEG
69617: PUSH
69618: LD_INT 1
69620: NEG
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 3
69628: NEG
69629: PUSH
69630: LD_INT 0
69632: PUSH
69633: EMPTY
69634: LIST
69635: LIST
69636: PUSH
69637: LD_INT 3
69639: NEG
69640: PUSH
69641: LD_INT 1
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 4
69650: NEG
69651: PUSH
69652: LD_INT 1
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 5
69661: NEG
69662: PUSH
69663: LD_INT 0
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 5
69672: NEG
69673: PUSH
69674: LD_INT 1
69676: NEG
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 5
69684: NEG
69685: PUSH
69686: LD_INT 2
69688: NEG
69689: PUSH
69690: EMPTY
69691: LIST
69692: LIST
69693: PUSH
69694: LD_INT 3
69696: NEG
69697: PUSH
69698: LD_INT 2
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 3
69707: NEG
69708: PUSH
69709: LD_INT 3
69711: NEG
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 3
69719: NEG
69720: PUSH
69721: LD_INT 4
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 2
69731: NEG
69732: PUSH
69733: LD_INT 3
69735: NEG
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 2
69743: NEG
69744: PUSH
69745: LD_INT 2
69747: NEG
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 3
69755: NEG
69756: PUSH
69757: LD_INT 2
69759: NEG
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 4
69767: NEG
69768: PUSH
69769: LD_INT 3
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 4
69779: NEG
69780: PUSH
69781: LD_INT 4
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 2
69791: NEG
69792: PUSH
69793: LD_INT 4
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 4
69803: NEG
69804: PUSH
69805: LD_INT 2
69807: NEG
69808: PUSH
69809: EMPTY
69810: LIST
69811: LIST
69812: PUSH
69813: LD_INT 0
69815: PUSH
69816: LD_INT 4
69818: NEG
69819: PUSH
69820: EMPTY
69821: LIST
69822: LIST
69823: PUSH
69824: LD_INT 0
69826: PUSH
69827: LD_INT 5
69829: NEG
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: PUSH
69835: LD_INT 1
69837: PUSH
69838: LD_INT 4
69840: NEG
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 1
69848: PUSH
69849: LD_INT 3
69851: NEG
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 0
69859: PUSH
69860: LD_INT 3
69862: NEG
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PUSH
69868: LD_INT 1
69870: NEG
69871: PUSH
69872: LD_INT 4
69874: NEG
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PUSH
69880: LD_INT 1
69882: NEG
69883: PUSH
69884: LD_INT 5
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 2
69894: PUSH
69895: LD_INT 3
69897: NEG
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 2
69905: NEG
69906: PUSH
69907: LD_INT 5
69909: NEG
69910: PUSH
69911: EMPTY
69912: LIST
69913: LIST
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69962: LD_ADDR_VAR 0 31
69966: PUSH
69967: LD_INT 0
69969: PUSH
69970: LD_INT 4
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 0
69979: PUSH
69980: LD_INT 3
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 1
69989: PUSH
69990: LD_INT 4
69992: PUSH
69993: EMPTY
69994: LIST
69995: LIST
69996: PUSH
69997: LD_INT 1
69999: PUSH
70000: LD_INT 5
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 0
70009: PUSH
70010: LD_INT 5
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 1
70019: NEG
70020: PUSH
70021: LD_INT 4
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: LD_INT 1
70030: NEG
70031: PUSH
70032: LD_INT 3
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 2
70041: PUSH
70042: LD_INT 5
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 2
70051: NEG
70052: PUSH
70053: LD_INT 3
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 3
70062: NEG
70063: PUSH
70064: LD_INT 0
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 3
70073: NEG
70074: PUSH
70075: LD_INT 1
70077: NEG
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 2
70085: NEG
70086: PUSH
70087: LD_INT 0
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 2
70096: NEG
70097: PUSH
70098: LD_INT 1
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 3
70107: NEG
70108: PUSH
70109: LD_INT 1
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: PUSH
70116: LD_INT 4
70118: NEG
70119: PUSH
70120: LD_INT 0
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 4
70129: NEG
70130: PUSH
70131: LD_INT 1
70133: NEG
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 4
70141: NEG
70142: PUSH
70143: LD_INT 2
70145: NEG
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 2
70153: NEG
70154: PUSH
70155: LD_INT 2
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 4
70164: NEG
70165: PUSH
70166: LD_INT 4
70168: NEG
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 4
70176: NEG
70177: PUSH
70178: LD_INT 5
70180: NEG
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 3
70188: NEG
70189: PUSH
70190: LD_INT 4
70192: NEG
70193: PUSH
70194: EMPTY
70195: LIST
70196: LIST
70197: PUSH
70198: LD_INT 3
70200: NEG
70201: PUSH
70202: LD_INT 3
70204: NEG
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 4
70212: NEG
70213: PUSH
70214: LD_INT 3
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 5
70224: NEG
70225: PUSH
70226: LD_INT 4
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: LD_INT 5
70236: NEG
70237: PUSH
70238: LD_INT 5
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 3
70248: NEG
70249: PUSH
70250: LD_INT 5
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 5
70260: NEG
70261: PUSH
70262: LD_INT 3
70264: NEG
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 0
70272: PUSH
70273: LD_INT 3
70275: NEG
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 0
70283: PUSH
70284: LD_INT 4
70286: NEG
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 1
70294: PUSH
70295: LD_INT 3
70297: NEG
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 1
70305: PUSH
70306: LD_INT 2
70308: NEG
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 0
70316: PUSH
70317: LD_INT 2
70319: NEG
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: PUSH
70325: LD_INT 1
70327: NEG
70328: PUSH
70329: LD_INT 3
70331: NEG
70332: PUSH
70333: EMPTY
70334: LIST
70335: LIST
70336: PUSH
70337: LD_INT 1
70339: NEG
70340: PUSH
70341: LD_INT 4
70343: NEG
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 2
70351: PUSH
70352: LD_INT 2
70354: NEG
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 2
70362: NEG
70363: PUSH
70364: LD_INT 4
70366: NEG
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 4
70374: PUSH
70375: LD_INT 0
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 4
70384: PUSH
70385: LD_INT 1
70387: NEG
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 5
70395: PUSH
70396: LD_INT 0
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 5
70405: PUSH
70406: LD_INT 1
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: LD_INT 4
70415: PUSH
70416: LD_INT 1
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 3
70425: PUSH
70426: LD_INT 0
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: LD_INT 3
70435: PUSH
70436: LD_INT 1
70438: NEG
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 3
70446: PUSH
70447: LD_INT 2
70449: NEG
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 5
70457: PUSH
70458: LD_INT 2
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: LIST
70508: LIST
70509: LIST
70510: LIST
70511: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70512: LD_ADDR_VAR 0 32
70516: PUSH
70517: LD_INT 4
70519: NEG
70520: PUSH
70521: LD_INT 0
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 4
70530: NEG
70531: PUSH
70532: LD_INT 1
70534: NEG
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 3
70542: NEG
70543: PUSH
70544: LD_INT 0
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 3
70553: NEG
70554: PUSH
70555: LD_INT 1
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 4
70564: NEG
70565: PUSH
70566: LD_INT 1
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 5
70575: NEG
70576: PUSH
70577: LD_INT 0
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 5
70586: NEG
70587: PUSH
70588: LD_INT 1
70590: NEG
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 5
70598: NEG
70599: PUSH
70600: LD_INT 2
70602: NEG
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 3
70610: NEG
70611: PUSH
70612: LD_INT 2
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 3
70621: NEG
70622: PUSH
70623: LD_INT 3
70625: NEG
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 3
70633: NEG
70634: PUSH
70635: LD_INT 4
70637: NEG
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 2
70645: NEG
70646: PUSH
70647: LD_INT 3
70649: NEG
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 2
70657: NEG
70658: PUSH
70659: LD_INT 2
70661: NEG
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 3
70669: NEG
70670: PUSH
70671: LD_INT 2
70673: NEG
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 4
70681: NEG
70682: PUSH
70683: LD_INT 3
70685: NEG
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 4
70693: NEG
70694: PUSH
70695: LD_INT 4
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 2
70705: NEG
70706: PUSH
70707: LD_INT 4
70709: NEG
70710: PUSH
70711: EMPTY
70712: LIST
70713: LIST
70714: PUSH
70715: LD_INT 4
70717: NEG
70718: PUSH
70719: LD_INT 2
70721: NEG
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: LD_INT 4
70732: NEG
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 0
70740: PUSH
70741: LD_INT 5
70743: NEG
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 1
70751: PUSH
70752: LD_INT 4
70754: NEG
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 1
70762: PUSH
70763: LD_INT 3
70765: NEG
70766: PUSH
70767: EMPTY
70768: LIST
70769: LIST
70770: PUSH
70771: LD_INT 0
70773: PUSH
70774: LD_INT 3
70776: NEG
70777: PUSH
70778: EMPTY
70779: LIST
70780: LIST
70781: PUSH
70782: LD_INT 1
70784: NEG
70785: PUSH
70786: LD_INT 4
70788: NEG
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 1
70796: NEG
70797: PUSH
70798: LD_INT 5
70800: NEG
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 2
70808: PUSH
70809: LD_INT 3
70811: NEG
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 2
70819: NEG
70820: PUSH
70821: LD_INT 5
70823: NEG
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 3
70831: PUSH
70832: LD_INT 0
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 3
70841: PUSH
70842: LD_INT 1
70844: NEG
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 4
70852: PUSH
70853: LD_INT 0
70855: PUSH
70856: EMPTY
70857: LIST
70858: LIST
70859: PUSH
70860: LD_INT 4
70862: PUSH
70863: LD_INT 1
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 3
70872: PUSH
70873: LD_INT 1
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 2
70882: PUSH
70883: LD_INT 0
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 2
70892: PUSH
70893: LD_INT 1
70895: NEG
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 2
70903: PUSH
70904: LD_INT 2
70906: NEG
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 4
70914: PUSH
70915: LD_INT 2
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 4
70924: PUSH
70925: LD_INT 4
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 4
70934: PUSH
70935: LD_INT 3
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 5
70944: PUSH
70945: LD_INT 4
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 5
70954: PUSH
70955: LD_INT 5
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 4
70964: PUSH
70965: LD_INT 5
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 3
70974: PUSH
70975: LD_INT 4
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 3
70984: PUSH
70985: LD_INT 3
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 5
70994: PUSH
70995: LD_INT 3
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 3
71004: PUSH
71005: LD_INT 5
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71059: LD_ADDR_VAR 0 33
71063: PUSH
71064: LD_INT 4
71066: NEG
71067: PUSH
71068: LD_INT 4
71070: NEG
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 4
71078: NEG
71079: PUSH
71080: LD_INT 5
71082: NEG
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 3
71090: NEG
71091: PUSH
71092: LD_INT 4
71094: NEG
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 3
71102: NEG
71103: PUSH
71104: LD_INT 3
71106: NEG
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 4
71114: NEG
71115: PUSH
71116: LD_INT 3
71118: NEG
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 5
71126: NEG
71127: PUSH
71128: LD_INT 4
71130: NEG
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 5
71138: NEG
71139: PUSH
71140: LD_INT 5
71142: NEG
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 3
71150: NEG
71151: PUSH
71152: LD_INT 5
71154: NEG
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 5
71162: NEG
71163: PUSH
71164: LD_INT 3
71166: NEG
71167: PUSH
71168: EMPTY
71169: LIST
71170: LIST
71171: PUSH
71172: LD_INT 0
71174: PUSH
71175: LD_INT 3
71177: NEG
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: PUSH
71183: LD_INT 0
71185: PUSH
71186: LD_INT 4
71188: NEG
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 1
71196: PUSH
71197: LD_INT 3
71199: NEG
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 1
71207: PUSH
71208: LD_INT 2
71210: NEG
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 0
71218: PUSH
71219: LD_INT 2
71221: NEG
71222: PUSH
71223: EMPTY
71224: LIST
71225: LIST
71226: PUSH
71227: LD_INT 1
71229: NEG
71230: PUSH
71231: LD_INT 3
71233: NEG
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 1
71241: NEG
71242: PUSH
71243: LD_INT 4
71245: NEG
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 2
71253: PUSH
71254: LD_INT 2
71256: NEG
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 2
71264: NEG
71265: PUSH
71266: LD_INT 4
71268: NEG
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 4
71276: PUSH
71277: LD_INT 0
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 4
71286: PUSH
71287: LD_INT 1
71289: NEG
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 5
71297: PUSH
71298: LD_INT 0
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 5
71307: PUSH
71308: LD_INT 1
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 4
71317: PUSH
71318: LD_INT 1
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 3
71327: PUSH
71328: LD_INT 0
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 3
71337: PUSH
71338: LD_INT 1
71340: NEG
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 3
71348: PUSH
71349: LD_INT 2
71351: NEG
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: PUSH
71357: LD_INT 5
71359: PUSH
71360: LD_INT 2
71362: PUSH
71363: EMPTY
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 3
71369: PUSH
71370: LD_INT 3
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 3
71379: PUSH
71380: LD_INT 2
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 4
71389: PUSH
71390: LD_INT 3
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 4
71399: PUSH
71400: LD_INT 4
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 3
71409: PUSH
71410: LD_INT 4
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 2
71419: PUSH
71420: LD_INT 3
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PUSH
71427: LD_INT 2
71429: PUSH
71430: LD_INT 2
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 4
71439: PUSH
71440: LD_INT 2
71442: PUSH
71443: EMPTY
71444: LIST
71445: LIST
71446: PUSH
71447: LD_INT 2
71449: PUSH
71450: LD_INT 4
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: LD_INT 4
71462: PUSH
71463: EMPTY
71464: LIST
71465: LIST
71466: PUSH
71467: LD_INT 0
71469: PUSH
71470: LD_INT 3
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PUSH
71477: LD_INT 1
71479: PUSH
71480: LD_INT 4
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 1
71489: PUSH
71490: LD_INT 5
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 0
71499: PUSH
71500: LD_INT 5
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 1
71509: NEG
71510: PUSH
71511: LD_INT 4
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 1
71520: NEG
71521: PUSH
71522: LD_INT 3
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 2
71531: PUSH
71532: LD_INT 5
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 2
71541: NEG
71542: PUSH
71543: LD_INT 3
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PUSH
71550: EMPTY
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: LIST
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71597: LD_ADDR_VAR 0 34
71601: PUSH
71602: LD_INT 0
71604: PUSH
71605: LD_INT 4
71607: NEG
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 0
71615: PUSH
71616: LD_INT 5
71618: NEG
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 1
71626: PUSH
71627: LD_INT 4
71629: NEG
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PUSH
71635: LD_INT 1
71637: PUSH
71638: LD_INT 3
71640: NEG
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 0
71648: PUSH
71649: LD_INT 3
71651: NEG
71652: PUSH
71653: EMPTY
71654: LIST
71655: LIST
71656: PUSH
71657: LD_INT 1
71659: NEG
71660: PUSH
71661: LD_INT 4
71663: NEG
71664: PUSH
71665: EMPTY
71666: LIST
71667: LIST
71668: PUSH
71669: LD_INT 1
71671: NEG
71672: PUSH
71673: LD_INT 5
71675: NEG
71676: PUSH
71677: EMPTY
71678: LIST
71679: LIST
71680: PUSH
71681: LD_INT 2
71683: PUSH
71684: LD_INT 3
71686: NEG
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PUSH
71692: LD_INT 2
71694: NEG
71695: PUSH
71696: LD_INT 5
71698: NEG
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: LD_INT 3
71706: PUSH
71707: LD_INT 0
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PUSH
71714: LD_INT 3
71716: PUSH
71717: LD_INT 1
71719: NEG
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: LD_INT 4
71727: PUSH
71728: LD_INT 0
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PUSH
71735: LD_INT 4
71737: PUSH
71738: LD_INT 1
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: PUSH
71745: LD_INT 3
71747: PUSH
71748: LD_INT 1
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 2
71757: PUSH
71758: LD_INT 0
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 2
71767: PUSH
71768: LD_INT 1
71770: NEG
71771: PUSH
71772: EMPTY
71773: LIST
71774: LIST
71775: PUSH
71776: LD_INT 2
71778: PUSH
71779: LD_INT 2
71781: NEG
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 4
71789: PUSH
71790: LD_INT 2
71792: PUSH
71793: EMPTY
71794: LIST
71795: LIST
71796: PUSH
71797: LD_INT 4
71799: PUSH
71800: LD_INT 4
71802: PUSH
71803: EMPTY
71804: LIST
71805: LIST
71806: PUSH
71807: LD_INT 4
71809: PUSH
71810: LD_INT 3
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 5
71819: PUSH
71820: LD_INT 4
71822: PUSH
71823: EMPTY
71824: LIST
71825: LIST
71826: PUSH
71827: LD_INT 5
71829: PUSH
71830: LD_INT 5
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 4
71839: PUSH
71840: LD_INT 5
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 3
71849: PUSH
71850: LD_INT 4
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 3
71859: PUSH
71860: LD_INT 3
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 5
71869: PUSH
71870: LD_INT 3
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 3
71879: PUSH
71880: LD_INT 5
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_INT 0
71889: PUSH
71890: LD_INT 3
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 0
71899: PUSH
71900: LD_INT 2
71902: PUSH
71903: EMPTY
71904: LIST
71905: LIST
71906: PUSH
71907: LD_INT 1
71909: PUSH
71910: LD_INT 3
71912: PUSH
71913: EMPTY
71914: LIST
71915: LIST
71916: PUSH
71917: LD_INT 1
71919: PUSH
71920: LD_INT 4
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 0
71929: PUSH
71930: LD_INT 4
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 1
71939: NEG
71940: PUSH
71941: LD_INT 3
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 1
71950: NEG
71951: PUSH
71952: LD_INT 2
71954: PUSH
71955: EMPTY
71956: LIST
71957: LIST
71958: PUSH
71959: LD_INT 2
71961: PUSH
71962: LD_INT 4
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: LD_INT 2
71971: NEG
71972: PUSH
71973: LD_INT 2
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 4
71982: NEG
71983: PUSH
71984: LD_INT 0
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 4
71993: NEG
71994: PUSH
71995: LD_INT 1
71997: NEG
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 3
72005: NEG
72006: PUSH
72007: LD_INT 0
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: LD_INT 3
72016: NEG
72017: PUSH
72018: LD_INT 1
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 4
72027: NEG
72028: PUSH
72029: LD_INT 1
72031: PUSH
72032: EMPTY
72033: LIST
72034: LIST
72035: PUSH
72036: LD_INT 5
72038: NEG
72039: PUSH
72040: LD_INT 0
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: LD_INT 5
72049: NEG
72050: PUSH
72051: LD_INT 1
72053: NEG
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 5
72061: NEG
72062: PUSH
72063: LD_INT 2
72065: NEG
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: PUSH
72071: LD_INT 3
72073: NEG
72074: PUSH
72075: LD_INT 2
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: LIST
72097: LIST
72098: LIST
72099: LIST
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: ST_TO_ADDR
// end ; end ;
72129: GO 72132
72131: POP
// case btype of b_depot , b_warehouse :
72132: LD_VAR 0 1
72136: PUSH
72137: LD_INT 0
72139: DOUBLE
72140: EQUAL
72141: IFTRUE 72151
72143: LD_INT 1
72145: DOUBLE
72146: EQUAL
72147: IFTRUE 72151
72149: GO 72352
72151: POP
// case nation of nation_american :
72152: LD_VAR 0 5
72156: PUSH
72157: LD_INT 1
72159: DOUBLE
72160: EQUAL
72161: IFTRUE 72165
72163: GO 72221
72165: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72166: LD_ADDR_VAR 0 9
72170: PUSH
72171: LD_VAR 0 11
72175: PUSH
72176: LD_VAR 0 12
72180: PUSH
72181: LD_VAR 0 13
72185: PUSH
72186: LD_VAR 0 14
72190: PUSH
72191: LD_VAR 0 15
72195: PUSH
72196: LD_VAR 0 16
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: LIST
72207: LIST
72208: PUSH
72209: LD_VAR 0 4
72213: PUSH
72214: LD_INT 1
72216: PLUS
72217: ARRAY
72218: ST_TO_ADDR
72219: GO 72350
72221: LD_INT 2
72223: DOUBLE
72224: EQUAL
72225: IFTRUE 72229
72227: GO 72285
72229: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72230: LD_ADDR_VAR 0 9
72234: PUSH
72235: LD_VAR 0 17
72239: PUSH
72240: LD_VAR 0 18
72244: PUSH
72245: LD_VAR 0 19
72249: PUSH
72250: LD_VAR 0 20
72254: PUSH
72255: LD_VAR 0 21
72259: PUSH
72260: LD_VAR 0 22
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: PUSH
72273: LD_VAR 0 4
72277: PUSH
72278: LD_INT 1
72280: PLUS
72281: ARRAY
72282: ST_TO_ADDR
72283: GO 72350
72285: LD_INT 3
72287: DOUBLE
72288: EQUAL
72289: IFTRUE 72293
72291: GO 72349
72293: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72294: LD_ADDR_VAR 0 9
72298: PUSH
72299: LD_VAR 0 23
72303: PUSH
72304: LD_VAR 0 24
72308: PUSH
72309: LD_VAR 0 25
72313: PUSH
72314: LD_VAR 0 26
72318: PUSH
72319: LD_VAR 0 27
72323: PUSH
72324: LD_VAR 0 28
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: PUSH
72337: LD_VAR 0 4
72341: PUSH
72342: LD_INT 1
72344: PLUS
72345: ARRAY
72346: ST_TO_ADDR
72347: GO 72350
72349: POP
72350: GO 72905
72352: LD_INT 2
72354: DOUBLE
72355: EQUAL
72356: IFTRUE 72366
72358: LD_INT 3
72360: DOUBLE
72361: EQUAL
72362: IFTRUE 72366
72364: GO 72422
72366: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
72367: LD_ADDR_VAR 0 9
72371: PUSH
72372: LD_VAR 0 29
72376: PUSH
72377: LD_VAR 0 30
72381: PUSH
72382: LD_VAR 0 31
72386: PUSH
72387: LD_VAR 0 32
72391: PUSH
72392: LD_VAR 0 33
72396: PUSH
72397: LD_VAR 0 34
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: PUSH
72410: LD_VAR 0 4
72414: PUSH
72415: LD_INT 1
72417: PLUS
72418: ARRAY
72419: ST_TO_ADDR
72420: GO 72905
72422: LD_INT 16
72424: DOUBLE
72425: EQUAL
72426: IFTRUE 72484
72428: LD_INT 17
72430: DOUBLE
72431: EQUAL
72432: IFTRUE 72484
72434: LD_INT 18
72436: DOUBLE
72437: EQUAL
72438: IFTRUE 72484
72440: LD_INT 19
72442: DOUBLE
72443: EQUAL
72444: IFTRUE 72484
72446: LD_INT 22
72448: DOUBLE
72449: EQUAL
72450: IFTRUE 72484
72452: LD_INT 20
72454: DOUBLE
72455: EQUAL
72456: IFTRUE 72484
72458: LD_INT 21
72460: DOUBLE
72461: EQUAL
72462: IFTRUE 72484
72464: LD_INT 23
72466: DOUBLE
72467: EQUAL
72468: IFTRUE 72484
72470: LD_INT 24
72472: DOUBLE
72473: EQUAL
72474: IFTRUE 72484
72476: LD_INT 25
72478: DOUBLE
72479: EQUAL
72480: IFTRUE 72484
72482: GO 72540
72484: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72485: LD_ADDR_VAR 0 9
72489: PUSH
72490: LD_VAR 0 35
72494: PUSH
72495: LD_VAR 0 36
72499: PUSH
72500: LD_VAR 0 37
72504: PUSH
72505: LD_VAR 0 38
72509: PUSH
72510: LD_VAR 0 39
72514: PUSH
72515: LD_VAR 0 40
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: PUSH
72528: LD_VAR 0 4
72532: PUSH
72533: LD_INT 1
72535: PLUS
72536: ARRAY
72537: ST_TO_ADDR
72538: GO 72905
72540: LD_INT 6
72542: DOUBLE
72543: EQUAL
72544: IFTRUE 72596
72546: LD_INT 7
72548: DOUBLE
72549: EQUAL
72550: IFTRUE 72596
72552: LD_INT 8
72554: DOUBLE
72555: EQUAL
72556: IFTRUE 72596
72558: LD_INT 13
72560: DOUBLE
72561: EQUAL
72562: IFTRUE 72596
72564: LD_INT 12
72566: DOUBLE
72567: EQUAL
72568: IFTRUE 72596
72570: LD_INT 15
72572: DOUBLE
72573: EQUAL
72574: IFTRUE 72596
72576: LD_INT 11
72578: DOUBLE
72579: EQUAL
72580: IFTRUE 72596
72582: LD_INT 14
72584: DOUBLE
72585: EQUAL
72586: IFTRUE 72596
72588: LD_INT 10
72590: DOUBLE
72591: EQUAL
72592: IFTRUE 72596
72594: GO 72652
72596: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72597: LD_ADDR_VAR 0 9
72601: PUSH
72602: LD_VAR 0 41
72606: PUSH
72607: LD_VAR 0 42
72611: PUSH
72612: LD_VAR 0 43
72616: PUSH
72617: LD_VAR 0 44
72621: PUSH
72622: LD_VAR 0 45
72626: PUSH
72627: LD_VAR 0 46
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: PUSH
72640: LD_VAR 0 4
72644: PUSH
72645: LD_INT 1
72647: PLUS
72648: ARRAY
72649: ST_TO_ADDR
72650: GO 72905
72652: LD_INT 36
72654: DOUBLE
72655: EQUAL
72656: IFTRUE 72660
72658: GO 72716
72660: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72661: LD_ADDR_VAR 0 9
72665: PUSH
72666: LD_VAR 0 47
72670: PUSH
72671: LD_VAR 0 48
72675: PUSH
72676: LD_VAR 0 49
72680: PUSH
72681: LD_VAR 0 50
72685: PUSH
72686: LD_VAR 0 51
72690: PUSH
72691: LD_VAR 0 52
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: LIST
72700: LIST
72701: LIST
72702: LIST
72703: PUSH
72704: LD_VAR 0 4
72708: PUSH
72709: LD_INT 1
72711: PLUS
72712: ARRAY
72713: ST_TO_ADDR
72714: GO 72905
72716: LD_INT 4
72718: DOUBLE
72719: EQUAL
72720: IFTRUE 72742
72722: LD_INT 5
72724: DOUBLE
72725: EQUAL
72726: IFTRUE 72742
72728: LD_INT 34
72730: DOUBLE
72731: EQUAL
72732: IFTRUE 72742
72734: LD_INT 37
72736: DOUBLE
72737: EQUAL
72738: IFTRUE 72742
72740: GO 72798
72742: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72743: LD_ADDR_VAR 0 9
72747: PUSH
72748: LD_VAR 0 53
72752: PUSH
72753: LD_VAR 0 54
72757: PUSH
72758: LD_VAR 0 55
72762: PUSH
72763: LD_VAR 0 56
72767: PUSH
72768: LD_VAR 0 57
72772: PUSH
72773: LD_VAR 0 58
72777: PUSH
72778: EMPTY
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: PUSH
72786: LD_VAR 0 4
72790: PUSH
72791: LD_INT 1
72793: PLUS
72794: ARRAY
72795: ST_TO_ADDR
72796: GO 72905
72798: LD_INT 31
72800: DOUBLE
72801: EQUAL
72802: IFTRUE 72848
72804: LD_INT 32
72806: DOUBLE
72807: EQUAL
72808: IFTRUE 72848
72810: LD_INT 33
72812: DOUBLE
72813: EQUAL
72814: IFTRUE 72848
72816: LD_INT 27
72818: DOUBLE
72819: EQUAL
72820: IFTRUE 72848
72822: LD_INT 26
72824: DOUBLE
72825: EQUAL
72826: IFTRUE 72848
72828: LD_INT 28
72830: DOUBLE
72831: EQUAL
72832: IFTRUE 72848
72834: LD_INT 29
72836: DOUBLE
72837: EQUAL
72838: IFTRUE 72848
72840: LD_INT 30
72842: DOUBLE
72843: EQUAL
72844: IFTRUE 72848
72846: GO 72904
72848: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72849: LD_ADDR_VAR 0 9
72853: PUSH
72854: LD_VAR 0 59
72858: PUSH
72859: LD_VAR 0 60
72863: PUSH
72864: LD_VAR 0 61
72868: PUSH
72869: LD_VAR 0 62
72873: PUSH
72874: LD_VAR 0 63
72878: PUSH
72879: LD_VAR 0 64
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: PUSH
72892: LD_VAR 0 4
72896: PUSH
72897: LD_INT 1
72899: PLUS
72900: ARRAY
72901: ST_TO_ADDR
72902: GO 72905
72904: POP
// temp_list2 = [ ] ;
72905: LD_ADDR_VAR 0 10
72909: PUSH
72910: EMPTY
72911: ST_TO_ADDR
// for i in temp_list do
72912: LD_ADDR_VAR 0 8
72916: PUSH
72917: LD_VAR 0 9
72921: PUSH
72922: FOR_IN
72923: IFFALSE 72975
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72925: LD_ADDR_VAR 0 10
72929: PUSH
72930: LD_VAR 0 10
72934: PUSH
72935: LD_VAR 0 8
72939: PUSH
72940: LD_INT 1
72942: ARRAY
72943: PUSH
72944: LD_VAR 0 2
72948: PLUS
72949: PUSH
72950: LD_VAR 0 8
72954: PUSH
72955: LD_INT 2
72957: ARRAY
72958: PUSH
72959: LD_VAR 0 3
72963: PLUS
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: EMPTY
72970: LIST
72971: ADD
72972: ST_TO_ADDR
72973: GO 72922
72975: POP
72976: POP
// result = temp_list2 ;
72977: LD_ADDR_VAR 0 7
72981: PUSH
72982: LD_VAR 0 10
72986: ST_TO_ADDR
// end ;
72987: LD_VAR 0 7
72991: RET
// export function EnemyInRange ( unit , dist ) ; begin
72992: LD_INT 0
72994: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72995: LD_ADDR_VAR 0 3
72999: PUSH
73000: LD_VAR 0 1
73004: PPUSH
73005: CALL_OW 255
73009: PPUSH
73010: LD_VAR 0 1
73014: PPUSH
73015: CALL_OW 250
73019: PPUSH
73020: LD_VAR 0 1
73024: PPUSH
73025: CALL_OW 251
73029: PPUSH
73030: LD_VAR 0 2
73034: PPUSH
73035: CALL 46365 0 4
73039: PUSH
73040: LD_INT 4
73042: ARRAY
73043: ST_TO_ADDR
// end ;
73044: LD_VAR 0 3
73048: RET
// export function PlayerSeeMe ( unit ) ; begin
73049: LD_INT 0
73051: PPUSH
// result := See ( your_side , unit ) ;
73052: LD_ADDR_VAR 0 2
73056: PUSH
73057: LD_OWVAR 2
73061: PPUSH
73062: LD_VAR 0 1
73066: PPUSH
73067: CALL_OW 292
73071: ST_TO_ADDR
// end ;
73072: LD_VAR 0 2
73076: RET
// export function ReverseDir ( unit ) ; begin
73077: LD_INT 0
73079: PPUSH
// if not unit then
73080: LD_VAR 0 1
73084: NOT
73085: IFFALSE 73089
// exit ;
73087: GO 73112
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73089: LD_ADDR_VAR 0 2
73093: PUSH
73094: LD_VAR 0 1
73098: PPUSH
73099: CALL_OW 254
73103: PUSH
73104: LD_INT 3
73106: PLUS
73107: PUSH
73108: LD_INT 6
73110: MOD
73111: ST_TO_ADDR
// end ;
73112: LD_VAR 0 2
73116: RET
// export function ReverseArray ( array ) ; var i ; begin
73117: LD_INT 0
73119: PPUSH
73120: PPUSH
// if not array then
73121: LD_VAR 0 1
73125: NOT
73126: IFFALSE 73130
// exit ;
73128: GO 73185
// result := [ ] ;
73130: LD_ADDR_VAR 0 2
73134: PUSH
73135: EMPTY
73136: ST_TO_ADDR
// for i := array downto 1 do
73137: LD_ADDR_VAR 0 3
73141: PUSH
73142: DOUBLE
73143: LD_VAR 0 1
73147: INC
73148: ST_TO_ADDR
73149: LD_INT 1
73151: PUSH
73152: FOR_DOWNTO
73153: IFFALSE 73183
// result := Join ( result , array [ i ] ) ;
73155: LD_ADDR_VAR 0 2
73159: PUSH
73160: LD_VAR 0 2
73164: PPUSH
73165: LD_VAR 0 1
73169: PUSH
73170: LD_VAR 0 3
73174: ARRAY
73175: PPUSH
73176: CALL 77830 0 2
73180: ST_TO_ADDR
73181: GO 73152
73183: POP
73184: POP
// end ;
73185: LD_VAR 0 2
73189: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73190: LD_INT 0
73192: PPUSH
73193: PPUSH
73194: PPUSH
73195: PPUSH
73196: PPUSH
73197: PPUSH
// if not unit or not hexes then
73198: LD_VAR 0 1
73202: NOT
73203: PUSH
73204: LD_VAR 0 2
73208: NOT
73209: OR
73210: IFFALSE 73214
// exit ;
73212: GO 73337
// dist := 9999 ;
73214: LD_ADDR_VAR 0 5
73218: PUSH
73219: LD_INT 9999
73221: ST_TO_ADDR
// for i = 1 to hexes do
73222: LD_ADDR_VAR 0 4
73226: PUSH
73227: DOUBLE
73228: LD_INT 1
73230: DEC
73231: ST_TO_ADDR
73232: LD_VAR 0 2
73236: PUSH
73237: FOR_TO
73238: IFFALSE 73325
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73240: LD_ADDR_VAR 0 6
73244: PUSH
73245: LD_VAR 0 1
73249: PPUSH
73250: LD_VAR 0 2
73254: PUSH
73255: LD_VAR 0 4
73259: ARRAY
73260: PUSH
73261: LD_INT 1
73263: ARRAY
73264: PPUSH
73265: LD_VAR 0 2
73269: PUSH
73270: LD_VAR 0 4
73274: ARRAY
73275: PUSH
73276: LD_INT 2
73278: ARRAY
73279: PPUSH
73280: CALL_OW 297
73284: ST_TO_ADDR
// if tdist < dist then
73285: LD_VAR 0 6
73289: PUSH
73290: LD_VAR 0 5
73294: LESS
73295: IFFALSE 73323
// begin hex := hexes [ i ] ;
73297: LD_ADDR_VAR 0 8
73301: PUSH
73302: LD_VAR 0 2
73306: PUSH
73307: LD_VAR 0 4
73311: ARRAY
73312: ST_TO_ADDR
// dist := tdist ;
73313: LD_ADDR_VAR 0 5
73317: PUSH
73318: LD_VAR 0 6
73322: ST_TO_ADDR
// end ; end ;
73323: GO 73237
73325: POP
73326: POP
// result := hex ;
73327: LD_ADDR_VAR 0 3
73331: PUSH
73332: LD_VAR 0 8
73336: ST_TO_ADDR
// end ;
73337: LD_VAR 0 3
73341: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
73342: LD_INT 0
73344: PPUSH
73345: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
73346: LD_VAR 0 1
73350: NOT
73351: PUSH
73352: LD_VAR 0 1
73356: PUSH
73357: LD_INT 21
73359: PUSH
73360: LD_INT 2
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: PUSH
73367: LD_INT 23
73369: PUSH
73370: LD_INT 2
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: PUSH
73377: EMPTY
73378: LIST
73379: LIST
73380: PPUSH
73381: CALL_OW 69
73385: IN
73386: NOT
73387: OR
73388: IFFALSE 73392
// exit ;
73390: GO 73439
// for i = 1 to 3 do
73392: LD_ADDR_VAR 0 3
73396: PUSH
73397: DOUBLE
73398: LD_INT 1
73400: DEC
73401: ST_TO_ADDR
73402: LD_INT 3
73404: PUSH
73405: FOR_TO
73406: IFFALSE 73437
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73408: LD_VAR 0 1
73412: PPUSH
73413: CALL_OW 250
73417: PPUSH
73418: LD_VAR 0 1
73422: PPUSH
73423: CALL_OW 251
73427: PPUSH
73428: LD_INT 1
73430: PPUSH
73431: CALL_OW 453
73435: GO 73405
73437: POP
73438: POP
// end ;
73439: LD_VAR 0 2
73443: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73444: LD_INT 0
73446: PPUSH
73447: PPUSH
73448: PPUSH
73449: PPUSH
73450: PPUSH
73451: PPUSH
// if not unit or not enemy_unit then
73452: LD_VAR 0 1
73456: NOT
73457: PUSH
73458: LD_VAR 0 2
73462: NOT
73463: OR
73464: IFFALSE 73468
// exit ;
73466: GO 73935
// if GetLives ( i ) < 250 then
73468: LD_VAR 0 4
73472: PPUSH
73473: CALL_OW 256
73477: PUSH
73478: LD_INT 250
73480: LESS
73481: IFFALSE 73494
// begin ComAutodestruct ( i ) ;
73483: LD_VAR 0 4
73487: PPUSH
73488: CALL 73342 0 1
// exit ;
73492: GO 73935
// end ; x := GetX ( enemy_unit ) ;
73494: LD_ADDR_VAR 0 7
73498: PUSH
73499: LD_VAR 0 2
73503: PPUSH
73504: CALL_OW 250
73508: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73509: LD_ADDR_VAR 0 8
73513: PUSH
73514: LD_VAR 0 2
73518: PPUSH
73519: CALL_OW 251
73523: ST_TO_ADDR
// if not x or not y then
73524: LD_VAR 0 7
73528: NOT
73529: PUSH
73530: LD_VAR 0 8
73534: NOT
73535: OR
73536: IFFALSE 73540
// exit ;
73538: GO 73935
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73540: LD_ADDR_VAR 0 6
73544: PUSH
73545: LD_VAR 0 7
73549: PPUSH
73550: LD_INT 0
73552: PPUSH
73553: LD_INT 4
73555: PPUSH
73556: CALL_OW 272
73560: PUSH
73561: LD_VAR 0 8
73565: PPUSH
73566: LD_INT 0
73568: PPUSH
73569: LD_INT 4
73571: PPUSH
73572: CALL_OW 273
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: PUSH
73581: LD_VAR 0 7
73585: PPUSH
73586: LD_INT 1
73588: PPUSH
73589: LD_INT 4
73591: PPUSH
73592: CALL_OW 272
73596: PUSH
73597: LD_VAR 0 8
73601: PPUSH
73602: LD_INT 1
73604: PPUSH
73605: LD_INT 4
73607: PPUSH
73608: CALL_OW 273
73612: PUSH
73613: EMPTY
73614: LIST
73615: LIST
73616: PUSH
73617: LD_VAR 0 7
73621: PPUSH
73622: LD_INT 2
73624: PPUSH
73625: LD_INT 4
73627: PPUSH
73628: CALL_OW 272
73632: PUSH
73633: LD_VAR 0 8
73637: PPUSH
73638: LD_INT 2
73640: PPUSH
73641: LD_INT 4
73643: PPUSH
73644: CALL_OW 273
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: PUSH
73653: LD_VAR 0 7
73657: PPUSH
73658: LD_INT 3
73660: PPUSH
73661: LD_INT 4
73663: PPUSH
73664: CALL_OW 272
73668: PUSH
73669: LD_VAR 0 8
73673: PPUSH
73674: LD_INT 3
73676: PPUSH
73677: LD_INT 4
73679: PPUSH
73680: CALL_OW 273
73684: PUSH
73685: EMPTY
73686: LIST
73687: LIST
73688: PUSH
73689: LD_VAR 0 7
73693: PPUSH
73694: LD_INT 4
73696: PPUSH
73697: LD_INT 4
73699: PPUSH
73700: CALL_OW 272
73704: PUSH
73705: LD_VAR 0 8
73709: PPUSH
73710: LD_INT 4
73712: PPUSH
73713: LD_INT 4
73715: PPUSH
73716: CALL_OW 273
73720: PUSH
73721: EMPTY
73722: LIST
73723: LIST
73724: PUSH
73725: LD_VAR 0 7
73729: PPUSH
73730: LD_INT 5
73732: PPUSH
73733: LD_INT 4
73735: PPUSH
73736: CALL_OW 272
73740: PUSH
73741: LD_VAR 0 8
73745: PPUSH
73746: LD_INT 5
73748: PPUSH
73749: LD_INT 4
73751: PPUSH
73752: CALL_OW 273
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: LIST
73765: LIST
73766: LIST
73767: LIST
73768: ST_TO_ADDR
// for i = tmp downto 1 do
73769: LD_ADDR_VAR 0 4
73773: PUSH
73774: DOUBLE
73775: LD_VAR 0 6
73779: INC
73780: ST_TO_ADDR
73781: LD_INT 1
73783: PUSH
73784: FOR_DOWNTO
73785: IFFALSE 73886
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73787: LD_VAR 0 6
73791: PUSH
73792: LD_VAR 0 4
73796: ARRAY
73797: PUSH
73798: LD_INT 1
73800: ARRAY
73801: PPUSH
73802: LD_VAR 0 6
73806: PUSH
73807: LD_VAR 0 4
73811: ARRAY
73812: PUSH
73813: LD_INT 2
73815: ARRAY
73816: PPUSH
73817: CALL_OW 488
73821: NOT
73822: PUSH
73823: LD_VAR 0 6
73827: PUSH
73828: LD_VAR 0 4
73832: ARRAY
73833: PUSH
73834: LD_INT 1
73836: ARRAY
73837: PPUSH
73838: LD_VAR 0 6
73842: PUSH
73843: LD_VAR 0 4
73847: ARRAY
73848: PUSH
73849: LD_INT 2
73851: ARRAY
73852: PPUSH
73853: CALL_OW 428
73857: PUSH
73858: LD_INT 0
73860: NONEQUAL
73861: OR
73862: IFFALSE 73884
// tmp := Delete ( tmp , i ) ;
73864: LD_ADDR_VAR 0 6
73868: PUSH
73869: LD_VAR 0 6
73873: PPUSH
73874: LD_VAR 0 4
73878: PPUSH
73879: CALL_OW 3
73883: ST_TO_ADDR
73884: GO 73784
73886: POP
73887: POP
// j := GetClosestHex ( unit , tmp ) ;
73888: LD_ADDR_VAR 0 5
73892: PUSH
73893: LD_VAR 0 1
73897: PPUSH
73898: LD_VAR 0 6
73902: PPUSH
73903: CALL 73190 0 2
73907: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73908: LD_VAR 0 1
73912: PPUSH
73913: LD_VAR 0 5
73917: PUSH
73918: LD_INT 1
73920: ARRAY
73921: PPUSH
73922: LD_VAR 0 5
73926: PUSH
73927: LD_INT 2
73929: ARRAY
73930: PPUSH
73931: CALL_OW 111
// end ;
73935: LD_VAR 0 3
73939: RET
// export function PrepareApemanSoldier ( ) ; begin
73940: LD_INT 0
73942: PPUSH
// uc_nation := 0 ;
73943: LD_ADDR_OWVAR 21
73947: PUSH
73948: LD_INT 0
73950: ST_TO_ADDR
// hc_sex := sex_male ;
73951: LD_ADDR_OWVAR 27
73955: PUSH
73956: LD_INT 1
73958: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73959: LD_ADDR_OWVAR 28
73963: PUSH
73964: LD_INT 15
73966: ST_TO_ADDR
// hc_gallery :=  ;
73967: LD_ADDR_OWVAR 33
73971: PUSH
73972: LD_STRING 
73974: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73975: LD_ADDR_OWVAR 31
73979: PUSH
73980: LD_INT 0
73982: PPUSH
73983: LD_INT 3
73985: PPUSH
73986: CALL_OW 12
73990: PUSH
73991: LD_INT 0
73993: PPUSH
73994: LD_INT 3
73996: PPUSH
73997: CALL_OW 12
74001: PUSH
74002: LD_INT 0
74004: PUSH
74005: LD_INT 0
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: ST_TO_ADDR
// end ;
74014: LD_VAR 0 1
74018: RET
// export function PrepareApemanEngineer ( ) ; begin
74019: LD_INT 0
74021: PPUSH
// uc_nation := 0 ;
74022: LD_ADDR_OWVAR 21
74026: PUSH
74027: LD_INT 0
74029: ST_TO_ADDR
// hc_sex := sex_male ;
74030: LD_ADDR_OWVAR 27
74034: PUSH
74035: LD_INT 1
74037: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74038: LD_ADDR_OWVAR 28
74042: PUSH
74043: LD_INT 16
74045: ST_TO_ADDR
// hc_gallery :=  ;
74046: LD_ADDR_OWVAR 33
74050: PUSH
74051: LD_STRING 
74053: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74054: LD_ADDR_OWVAR 31
74058: PUSH
74059: LD_INT 0
74061: PPUSH
74062: LD_INT 3
74064: PPUSH
74065: CALL_OW 12
74069: PUSH
74070: LD_INT 0
74072: PPUSH
74073: LD_INT 3
74075: PPUSH
74076: CALL_OW 12
74080: PUSH
74081: LD_INT 0
74083: PUSH
74084: LD_INT 0
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: LIST
74091: LIST
74092: ST_TO_ADDR
// end ;
74093: LD_VAR 0 1
74097: RET
// export function PrepareApeman ( agressivity ) ; begin
74098: LD_INT 0
74100: PPUSH
// uc_side := 0 ;
74101: LD_ADDR_OWVAR 20
74105: PUSH
74106: LD_INT 0
74108: ST_TO_ADDR
// uc_nation := 0 ;
74109: LD_ADDR_OWVAR 21
74113: PUSH
74114: LD_INT 0
74116: ST_TO_ADDR
// hc_sex := sex_male ;
74117: LD_ADDR_OWVAR 27
74121: PUSH
74122: LD_INT 1
74124: ST_TO_ADDR
// hc_class := class_apeman ;
74125: LD_ADDR_OWVAR 28
74129: PUSH
74130: LD_INT 12
74132: ST_TO_ADDR
// hc_gallery :=  ;
74133: LD_ADDR_OWVAR 33
74137: PUSH
74138: LD_STRING 
74140: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74141: LD_ADDR_OWVAR 35
74145: PUSH
74146: LD_VAR 0 1
74150: NEG
74151: PPUSH
74152: LD_VAR 0 1
74156: PPUSH
74157: CALL_OW 12
74161: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74162: LD_ADDR_OWVAR 31
74166: PUSH
74167: LD_INT 0
74169: PPUSH
74170: LD_INT 3
74172: PPUSH
74173: CALL_OW 12
74177: PUSH
74178: LD_INT 0
74180: PPUSH
74181: LD_INT 3
74183: PPUSH
74184: CALL_OW 12
74188: PUSH
74189: LD_INT 0
74191: PUSH
74192: LD_INT 0
74194: PUSH
74195: EMPTY
74196: LIST
74197: LIST
74198: LIST
74199: LIST
74200: ST_TO_ADDR
// end ;
74201: LD_VAR 0 2
74205: RET
// export function PrepareTiger ( agressivity ) ; begin
74206: LD_INT 0
74208: PPUSH
// uc_side := 0 ;
74209: LD_ADDR_OWVAR 20
74213: PUSH
74214: LD_INT 0
74216: ST_TO_ADDR
// uc_nation := 0 ;
74217: LD_ADDR_OWVAR 21
74221: PUSH
74222: LD_INT 0
74224: ST_TO_ADDR
// hc_class := class_tiger ;
74225: LD_ADDR_OWVAR 28
74229: PUSH
74230: LD_INT 14
74232: ST_TO_ADDR
// hc_gallery :=  ;
74233: LD_ADDR_OWVAR 33
74237: PUSH
74238: LD_STRING 
74240: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74241: LD_ADDR_OWVAR 35
74245: PUSH
74246: LD_VAR 0 1
74250: NEG
74251: PPUSH
74252: LD_VAR 0 1
74256: PPUSH
74257: CALL_OW 12
74261: ST_TO_ADDR
// end ;
74262: LD_VAR 0 2
74266: RET
// export function PrepareEnchidna ( ) ; begin
74267: LD_INT 0
74269: PPUSH
// uc_side := 0 ;
74270: LD_ADDR_OWVAR 20
74274: PUSH
74275: LD_INT 0
74277: ST_TO_ADDR
// uc_nation := 0 ;
74278: LD_ADDR_OWVAR 21
74282: PUSH
74283: LD_INT 0
74285: ST_TO_ADDR
// hc_class := class_baggie ;
74286: LD_ADDR_OWVAR 28
74290: PUSH
74291: LD_INT 13
74293: ST_TO_ADDR
// hc_gallery :=  ;
74294: LD_ADDR_OWVAR 33
74298: PUSH
74299: LD_STRING 
74301: ST_TO_ADDR
// end ;
74302: LD_VAR 0 1
74306: RET
// export function PrepareFrog ( ) ; begin
74307: LD_INT 0
74309: PPUSH
// uc_side := 0 ;
74310: LD_ADDR_OWVAR 20
74314: PUSH
74315: LD_INT 0
74317: ST_TO_ADDR
// uc_nation := 0 ;
74318: LD_ADDR_OWVAR 21
74322: PUSH
74323: LD_INT 0
74325: ST_TO_ADDR
// hc_class := class_frog ;
74326: LD_ADDR_OWVAR 28
74330: PUSH
74331: LD_INT 19
74333: ST_TO_ADDR
// hc_gallery :=  ;
74334: LD_ADDR_OWVAR 33
74338: PUSH
74339: LD_STRING 
74341: ST_TO_ADDR
// end ;
74342: LD_VAR 0 1
74346: RET
// export function PrepareFish ( ) ; begin
74347: LD_INT 0
74349: PPUSH
// uc_side := 0 ;
74350: LD_ADDR_OWVAR 20
74354: PUSH
74355: LD_INT 0
74357: ST_TO_ADDR
// uc_nation := 0 ;
74358: LD_ADDR_OWVAR 21
74362: PUSH
74363: LD_INT 0
74365: ST_TO_ADDR
// hc_class := class_fish ;
74366: LD_ADDR_OWVAR 28
74370: PUSH
74371: LD_INT 20
74373: ST_TO_ADDR
// hc_gallery :=  ;
74374: LD_ADDR_OWVAR 33
74378: PUSH
74379: LD_STRING 
74381: ST_TO_ADDR
// end ;
74382: LD_VAR 0 1
74386: RET
// export function PrepareBird ( ) ; begin
74387: LD_INT 0
74389: PPUSH
// uc_side := 0 ;
74390: LD_ADDR_OWVAR 20
74394: PUSH
74395: LD_INT 0
74397: ST_TO_ADDR
// uc_nation := 0 ;
74398: LD_ADDR_OWVAR 21
74402: PUSH
74403: LD_INT 0
74405: ST_TO_ADDR
// hc_class := class_phororhacos ;
74406: LD_ADDR_OWVAR 28
74410: PUSH
74411: LD_INT 18
74413: ST_TO_ADDR
// hc_gallery :=  ;
74414: LD_ADDR_OWVAR 33
74418: PUSH
74419: LD_STRING 
74421: ST_TO_ADDR
// end ;
74422: LD_VAR 0 1
74426: RET
// export function PrepareHorse ( ) ; begin
74427: LD_INT 0
74429: PPUSH
// uc_side := 0 ;
74430: LD_ADDR_OWVAR 20
74434: PUSH
74435: LD_INT 0
74437: ST_TO_ADDR
// uc_nation := 0 ;
74438: LD_ADDR_OWVAR 21
74442: PUSH
74443: LD_INT 0
74445: ST_TO_ADDR
// hc_class := class_horse ;
74446: LD_ADDR_OWVAR 28
74450: PUSH
74451: LD_INT 21
74453: ST_TO_ADDR
// hc_gallery :=  ;
74454: LD_ADDR_OWVAR 33
74458: PUSH
74459: LD_STRING 
74461: ST_TO_ADDR
// end ;
74462: LD_VAR 0 1
74466: RET
// export function PrepareMastodont ( ) ; begin
74467: LD_INT 0
74469: PPUSH
// uc_side := 0 ;
74470: LD_ADDR_OWVAR 20
74474: PUSH
74475: LD_INT 0
74477: ST_TO_ADDR
// uc_nation := 0 ;
74478: LD_ADDR_OWVAR 21
74482: PUSH
74483: LD_INT 0
74485: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74486: LD_ADDR_OWVAR 37
74490: PUSH
74491: LD_INT 31
74493: ST_TO_ADDR
// vc_control := control_rider ;
74494: LD_ADDR_OWVAR 38
74498: PUSH
74499: LD_INT 4
74501: ST_TO_ADDR
// end ;
74502: LD_VAR 0 1
74506: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74507: LD_INT 0
74509: PPUSH
74510: PPUSH
74511: PPUSH
// uc_side = 0 ;
74512: LD_ADDR_OWVAR 20
74516: PUSH
74517: LD_INT 0
74519: ST_TO_ADDR
// uc_nation = 0 ;
74520: LD_ADDR_OWVAR 21
74524: PUSH
74525: LD_INT 0
74527: ST_TO_ADDR
// InitHc_All ( ) ;
74528: CALL_OW 584
// InitVc ;
74532: CALL_OW 20
// if mastodonts then
74536: LD_VAR 0 6
74540: IFFALSE 74607
// for i = 1 to mastodonts do
74542: LD_ADDR_VAR 0 11
74546: PUSH
74547: DOUBLE
74548: LD_INT 1
74550: DEC
74551: ST_TO_ADDR
74552: LD_VAR 0 6
74556: PUSH
74557: FOR_TO
74558: IFFALSE 74605
// begin vc_chassis := 31 ;
74560: LD_ADDR_OWVAR 37
74564: PUSH
74565: LD_INT 31
74567: ST_TO_ADDR
// vc_control := control_rider ;
74568: LD_ADDR_OWVAR 38
74572: PUSH
74573: LD_INT 4
74575: ST_TO_ADDR
// animal := CreateVehicle ;
74576: LD_ADDR_VAR 0 12
74580: PUSH
74581: CALL_OW 45
74585: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74586: LD_VAR 0 12
74590: PPUSH
74591: LD_VAR 0 8
74595: PPUSH
74596: LD_INT 0
74598: PPUSH
74599: CALL 76735 0 3
// end ;
74603: GO 74557
74605: POP
74606: POP
// if horses then
74607: LD_VAR 0 5
74611: IFFALSE 74678
// for i = 1 to horses do
74613: LD_ADDR_VAR 0 11
74617: PUSH
74618: DOUBLE
74619: LD_INT 1
74621: DEC
74622: ST_TO_ADDR
74623: LD_VAR 0 5
74627: PUSH
74628: FOR_TO
74629: IFFALSE 74676
// begin hc_class := 21 ;
74631: LD_ADDR_OWVAR 28
74635: PUSH
74636: LD_INT 21
74638: ST_TO_ADDR
// hc_gallery :=  ;
74639: LD_ADDR_OWVAR 33
74643: PUSH
74644: LD_STRING 
74646: ST_TO_ADDR
// animal := CreateHuman ;
74647: LD_ADDR_VAR 0 12
74651: PUSH
74652: CALL_OW 44
74656: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74657: LD_VAR 0 12
74661: PPUSH
74662: LD_VAR 0 8
74666: PPUSH
74667: LD_INT 0
74669: PPUSH
74670: CALL 76735 0 3
// end ;
74674: GO 74628
74676: POP
74677: POP
// if birds then
74678: LD_VAR 0 1
74682: IFFALSE 74749
// for i = 1 to birds do
74684: LD_ADDR_VAR 0 11
74688: PUSH
74689: DOUBLE
74690: LD_INT 1
74692: DEC
74693: ST_TO_ADDR
74694: LD_VAR 0 1
74698: PUSH
74699: FOR_TO
74700: IFFALSE 74747
// begin hc_class := 18 ;
74702: LD_ADDR_OWVAR 28
74706: PUSH
74707: LD_INT 18
74709: ST_TO_ADDR
// hc_gallery =  ;
74710: LD_ADDR_OWVAR 33
74714: PUSH
74715: LD_STRING 
74717: ST_TO_ADDR
// animal := CreateHuman ;
74718: LD_ADDR_VAR 0 12
74722: PUSH
74723: CALL_OW 44
74727: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74728: LD_VAR 0 12
74732: PPUSH
74733: LD_VAR 0 8
74737: PPUSH
74738: LD_INT 0
74740: PPUSH
74741: CALL 76735 0 3
// end ;
74745: GO 74699
74747: POP
74748: POP
// if tigers then
74749: LD_VAR 0 2
74753: IFFALSE 74837
// for i = 1 to tigers do
74755: LD_ADDR_VAR 0 11
74759: PUSH
74760: DOUBLE
74761: LD_INT 1
74763: DEC
74764: ST_TO_ADDR
74765: LD_VAR 0 2
74769: PUSH
74770: FOR_TO
74771: IFFALSE 74835
// begin hc_class = class_tiger ;
74773: LD_ADDR_OWVAR 28
74777: PUSH
74778: LD_INT 14
74780: ST_TO_ADDR
// hc_gallery =  ;
74781: LD_ADDR_OWVAR 33
74785: PUSH
74786: LD_STRING 
74788: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74789: LD_ADDR_OWVAR 35
74793: PUSH
74794: LD_INT 7
74796: NEG
74797: PPUSH
74798: LD_INT 7
74800: PPUSH
74801: CALL_OW 12
74805: ST_TO_ADDR
// animal := CreateHuman ;
74806: LD_ADDR_VAR 0 12
74810: PUSH
74811: CALL_OW 44
74815: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74816: LD_VAR 0 12
74820: PPUSH
74821: LD_VAR 0 8
74825: PPUSH
74826: LD_INT 0
74828: PPUSH
74829: CALL 76735 0 3
// end ;
74833: GO 74770
74835: POP
74836: POP
// if apemans then
74837: LD_VAR 0 3
74841: IFFALSE 74964
// for i = 1 to apemans do
74843: LD_ADDR_VAR 0 11
74847: PUSH
74848: DOUBLE
74849: LD_INT 1
74851: DEC
74852: ST_TO_ADDR
74853: LD_VAR 0 3
74857: PUSH
74858: FOR_TO
74859: IFFALSE 74962
// begin hc_class = class_apeman ;
74861: LD_ADDR_OWVAR 28
74865: PUSH
74866: LD_INT 12
74868: ST_TO_ADDR
// hc_gallery =  ;
74869: LD_ADDR_OWVAR 33
74873: PUSH
74874: LD_STRING 
74876: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74877: LD_ADDR_OWVAR 35
74881: PUSH
74882: LD_INT 2
74884: NEG
74885: PPUSH
74886: LD_INT 2
74888: PPUSH
74889: CALL_OW 12
74893: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74894: LD_ADDR_OWVAR 31
74898: PUSH
74899: LD_INT 1
74901: PPUSH
74902: LD_INT 3
74904: PPUSH
74905: CALL_OW 12
74909: PUSH
74910: LD_INT 1
74912: PPUSH
74913: LD_INT 3
74915: PPUSH
74916: CALL_OW 12
74920: PUSH
74921: LD_INT 0
74923: PUSH
74924: LD_INT 0
74926: PUSH
74927: EMPTY
74928: LIST
74929: LIST
74930: LIST
74931: LIST
74932: ST_TO_ADDR
// animal := CreateHuman ;
74933: LD_ADDR_VAR 0 12
74937: PUSH
74938: CALL_OW 44
74942: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74943: LD_VAR 0 12
74947: PPUSH
74948: LD_VAR 0 8
74952: PPUSH
74953: LD_INT 0
74955: PPUSH
74956: CALL 76735 0 3
// end ;
74960: GO 74858
74962: POP
74963: POP
// if enchidnas then
74964: LD_VAR 0 4
74968: IFFALSE 75035
// for i = 1 to enchidnas do
74970: LD_ADDR_VAR 0 11
74974: PUSH
74975: DOUBLE
74976: LD_INT 1
74978: DEC
74979: ST_TO_ADDR
74980: LD_VAR 0 4
74984: PUSH
74985: FOR_TO
74986: IFFALSE 75033
// begin hc_class = 13 ;
74988: LD_ADDR_OWVAR 28
74992: PUSH
74993: LD_INT 13
74995: ST_TO_ADDR
// hc_gallery =  ;
74996: LD_ADDR_OWVAR 33
75000: PUSH
75001: LD_STRING 
75003: ST_TO_ADDR
// animal := CreateHuman ;
75004: LD_ADDR_VAR 0 12
75008: PUSH
75009: CALL_OW 44
75013: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75014: LD_VAR 0 12
75018: PPUSH
75019: LD_VAR 0 8
75023: PPUSH
75024: LD_INT 0
75026: PPUSH
75027: CALL 76735 0 3
// end ;
75031: GO 74985
75033: POP
75034: POP
// if fishes then
75035: LD_VAR 0 7
75039: IFFALSE 75106
// for i = 1 to fishes do
75041: LD_ADDR_VAR 0 11
75045: PUSH
75046: DOUBLE
75047: LD_INT 1
75049: DEC
75050: ST_TO_ADDR
75051: LD_VAR 0 7
75055: PUSH
75056: FOR_TO
75057: IFFALSE 75104
// begin hc_class = 20 ;
75059: LD_ADDR_OWVAR 28
75063: PUSH
75064: LD_INT 20
75066: ST_TO_ADDR
// hc_gallery =  ;
75067: LD_ADDR_OWVAR 33
75071: PUSH
75072: LD_STRING 
75074: ST_TO_ADDR
// animal := CreateHuman ;
75075: LD_ADDR_VAR 0 12
75079: PUSH
75080: CALL_OW 44
75084: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75085: LD_VAR 0 12
75089: PPUSH
75090: LD_VAR 0 9
75094: PPUSH
75095: LD_INT 0
75097: PPUSH
75098: CALL 76735 0 3
// end ;
75102: GO 75056
75104: POP
75105: POP
// end ;
75106: LD_VAR 0 10
75110: RET
// export function WantHeal ( sci , unit ) ; begin
75111: LD_INT 0
75113: PPUSH
// if GetTaskList ( sci ) > 0 then
75114: LD_VAR 0 1
75118: PPUSH
75119: CALL_OW 437
75123: PUSH
75124: LD_INT 0
75126: GREATER
75127: IFFALSE 75197
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75129: LD_VAR 0 1
75133: PPUSH
75134: CALL_OW 437
75138: PUSH
75139: LD_INT 1
75141: ARRAY
75142: PUSH
75143: LD_INT 1
75145: ARRAY
75146: PUSH
75147: LD_STRING l
75149: EQUAL
75150: PUSH
75151: LD_VAR 0 1
75155: PPUSH
75156: CALL_OW 437
75160: PUSH
75161: LD_INT 1
75163: ARRAY
75164: PUSH
75165: LD_INT 4
75167: ARRAY
75168: PUSH
75169: LD_VAR 0 2
75173: EQUAL
75174: AND
75175: IFFALSE 75187
// result := true else
75177: LD_ADDR_VAR 0 3
75181: PUSH
75182: LD_INT 1
75184: ST_TO_ADDR
75185: GO 75195
// result := false ;
75187: LD_ADDR_VAR 0 3
75191: PUSH
75192: LD_INT 0
75194: ST_TO_ADDR
// end else
75195: GO 75205
// result := false ;
75197: LD_ADDR_VAR 0 3
75201: PUSH
75202: LD_INT 0
75204: ST_TO_ADDR
// end ;
75205: LD_VAR 0 3
75209: RET
// export function HealTarget ( sci ) ; begin
75210: LD_INT 0
75212: PPUSH
// if not sci then
75213: LD_VAR 0 1
75217: NOT
75218: IFFALSE 75222
// exit ;
75220: GO 75287
// result := 0 ;
75222: LD_ADDR_VAR 0 2
75226: PUSH
75227: LD_INT 0
75229: ST_TO_ADDR
// if GetTaskList ( sci ) then
75230: LD_VAR 0 1
75234: PPUSH
75235: CALL_OW 437
75239: IFFALSE 75287
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75241: LD_VAR 0 1
75245: PPUSH
75246: CALL_OW 437
75250: PUSH
75251: LD_INT 1
75253: ARRAY
75254: PUSH
75255: LD_INT 1
75257: ARRAY
75258: PUSH
75259: LD_STRING l
75261: EQUAL
75262: IFFALSE 75287
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75264: LD_ADDR_VAR 0 2
75268: PUSH
75269: LD_VAR 0 1
75273: PPUSH
75274: CALL_OW 437
75278: PUSH
75279: LD_INT 1
75281: ARRAY
75282: PUSH
75283: LD_INT 4
75285: ARRAY
75286: ST_TO_ADDR
// end ;
75287: LD_VAR 0 2
75291: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75292: LD_INT 0
75294: PPUSH
75295: PPUSH
75296: PPUSH
75297: PPUSH
// if not base_units then
75298: LD_VAR 0 1
75302: NOT
75303: IFFALSE 75307
// exit ;
75305: GO 75394
// result := false ;
75307: LD_ADDR_VAR 0 2
75311: PUSH
75312: LD_INT 0
75314: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
75315: LD_ADDR_VAR 0 5
75319: PUSH
75320: LD_VAR 0 1
75324: PPUSH
75325: LD_INT 21
75327: PUSH
75328: LD_INT 3
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PPUSH
75335: CALL_OW 72
75339: ST_TO_ADDR
// if not tmp then
75340: LD_VAR 0 5
75344: NOT
75345: IFFALSE 75349
// exit ;
75347: GO 75394
// for i in tmp do
75349: LD_ADDR_VAR 0 3
75353: PUSH
75354: LD_VAR 0 5
75358: PUSH
75359: FOR_IN
75360: IFFALSE 75392
// begin result := EnemyInRange ( i , 22 ) ;
75362: LD_ADDR_VAR 0 2
75366: PUSH
75367: LD_VAR 0 3
75371: PPUSH
75372: LD_INT 22
75374: PPUSH
75375: CALL 72992 0 2
75379: ST_TO_ADDR
// if result then
75380: LD_VAR 0 2
75384: IFFALSE 75390
// exit ;
75386: POP
75387: POP
75388: GO 75394
// end ;
75390: GO 75359
75392: POP
75393: POP
// end ;
75394: LD_VAR 0 2
75398: RET
// export function FilterByTag ( units , tag ) ; begin
75399: LD_INT 0
75401: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75402: LD_ADDR_VAR 0 3
75406: PUSH
75407: LD_VAR 0 1
75411: PPUSH
75412: LD_INT 120
75414: PUSH
75415: LD_VAR 0 2
75419: PUSH
75420: EMPTY
75421: LIST
75422: LIST
75423: PPUSH
75424: CALL_OW 72
75428: ST_TO_ADDR
// end ;
75429: LD_VAR 0 3
75433: RET
// export function IsDriver ( un ) ; begin
75434: LD_INT 0
75436: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75437: LD_ADDR_VAR 0 2
75441: PUSH
75442: LD_VAR 0 1
75446: PUSH
75447: LD_INT 55
75449: PUSH
75450: EMPTY
75451: LIST
75452: PPUSH
75453: CALL_OW 69
75457: IN
75458: ST_TO_ADDR
// end ;
75459: LD_VAR 0 2
75463: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75464: LD_INT 0
75466: PPUSH
75467: PPUSH
// list := [ ] ;
75468: LD_ADDR_VAR 0 5
75472: PUSH
75473: EMPTY
75474: ST_TO_ADDR
// case d of 0 :
75475: LD_VAR 0 3
75479: PUSH
75480: LD_INT 0
75482: DOUBLE
75483: EQUAL
75484: IFTRUE 75488
75486: GO 75621
75488: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75489: LD_ADDR_VAR 0 5
75493: PUSH
75494: LD_VAR 0 1
75498: PUSH
75499: LD_INT 4
75501: MINUS
75502: PUSH
75503: LD_VAR 0 2
75507: PUSH
75508: LD_INT 4
75510: MINUS
75511: PUSH
75512: LD_INT 2
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: LIST
75519: PUSH
75520: LD_VAR 0 1
75524: PUSH
75525: LD_INT 3
75527: MINUS
75528: PUSH
75529: LD_VAR 0 2
75533: PUSH
75534: LD_INT 1
75536: PUSH
75537: EMPTY
75538: LIST
75539: LIST
75540: LIST
75541: PUSH
75542: LD_VAR 0 1
75546: PUSH
75547: LD_INT 4
75549: PLUS
75550: PUSH
75551: LD_VAR 0 2
75555: PUSH
75556: LD_INT 4
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: LIST
75563: PUSH
75564: LD_VAR 0 1
75568: PUSH
75569: LD_INT 3
75571: PLUS
75572: PUSH
75573: LD_VAR 0 2
75577: PUSH
75578: LD_INT 3
75580: PLUS
75581: PUSH
75582: LD_INT 5
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: LIST
75589: PUSH
75590: LD_VAR 0 1
75594: PUSH
75595: LD_VAR 0 2
75599: PUSH
75600: LD_INT 4
75602: PLUS
75603: PUSH
75604: LD_INT 0
75606: PUSH
75607: EMPTY
75608: LIST
75609: LIST
75610: LIST
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: LIST
75616: LIST
75617: LIST
75618: ST_TO_ADDR
// end ; 1 :
75619: GO 76319
75621: LD_INT 1
75623: DOUBLE
75624: EQUAL
75625: IFTRUE 75629
75627: GO 75762
75629: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75630: LD_ADDR_VAR 0 5
75634: PUSH
75635: LD_VAR 0 1
75639: PUSH
75640: LD_VAR 0 2
75644: PUSH
75645: LD_INT 4
75647: MINUS
75648: PUSH
75649: LD_INT 3
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: LIST
75656: PUSH
75657: LD_VAR 0 1
75661: PUSH
75662: LD_INT 3
75664: MINUS
75665: PUSH
75666: LD_VAR 0 2
75670: PUSH
75671: LD_INT 3
75673: MINUS
75674: PUSH
75675: LD_INT 2
75677: PUSH
75678: EMPTY
75679: LIST
75680: LIST
75681: LIST
75682: PUSH
75683: LD_VAR 0 1
75687: PUSH
75688: LD_INT 4
75690: MINUS
75691: PUSH
75692: LD_VAR 0 2
75696: PUSH
75697: LD_INT 1
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: LIST
75704: PUSH
75705: LD_VAR 0 1
75709: PUSH
75710: LD_VAR 0 2
75714: PUSH
75715: LD_INT 3
75717: PLUS
75718: PUSH
75719: LD_INT 0
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: LIST
75726: PUSH
75727: LD_VAR 0 1
75731: PUSH
75732: LD_INT 4
75734: PLUS
75735: PUSH
75736: LD_VAR 0 2
75740: PUSH
75741: LD_INT 4
75743: PLUS
75744: PUSH
75745: LD_INT 5
75747: PUSH
75748: EMPTY
75749: LIST
75750: LIST
75751: LIST
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: LIST
75757: LIST
75758: LIST
75759: ST_TO_ADDR
// end ; 2 :
75760: GO 76319
75762: LD_INT 2
75764: DOUBLE
75765: EQUAL
75766: IFTRUE 75770
75768: GO 75899
75770: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75771: LD_ADDR_VAR 0 5
75775: PUSH
75776: LD_VAR 0 1
75780: PUSH
75781: LD_VAR 0 2
75785: PUSH
75786: LD_INT 3
75788: MINUS
75789: PUSH
75790: LD_INT 3
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: LIST
75797: PUSH
75798: LD_VAR 0 1
75802: PUSH
75803: LD_INT 4
75805: PLUS
75806: PUSH
75807: LD_VAR 0 2
75811: PUSH
75812: LD_INT 4
75814: PUSH
75815: EMPTY
75816: LIST
75817: LIST
75818: LIST
75819: PUSH
75820: LD_VAR 0 1
75824: PUSH
75825: LD_VAR 0 2
75829: PUSH
75830: LD_INT 4
75832: PLUS
75833: PUSH
75834: LD_INT 0
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: LIST
75841: PUSH
75842: LD_VAR 0 1
75846: PUSH
75847: LD_INT 3
75849: MINUS
75850: PUSH
75851: LD_VAR 0 2
75855: PUSH
75856: LD_INT 1
75858: PUSH
75859: EMPTY
75860: LIST
75861: LIST
75862: LIST
75863: PUSH
75864: LD_VAR 0 1
75868: PUSH
75869: LD_INT 4
75871: MINUS
75872: PUSH
75873: LD_VAR 0 2
75877: PUSH
75878: LD_INT 4
75880: MINUS
75881: PUSH
75882: LD_INT 2
75884: PUSH
75885: EMPTY
75886: LIST
75887: LIST
75888: LIST
75889: PUSH
75890: EMPTY
75891: LIST
75892: LIST
75893: LIST
75894: LIST
75895: LIST
75896: ST_TO_ADDR
// end ; 3 :
75897: GO 76319
75899: LD_INT 3
75901: DOUBLE
75902: EQUAL
75903: IFTRUE 75907
75905: GO 76040
75907: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75908: LD_ADDR_VAR 0 5
75912: PUSH
75913: LD_VAR 0 1
75917: PUSH
75918: LD_INT 3
75920: PLUS
75921: PUSH
75922: LD_VAR 0 2
75926: PUSH
75927: LD_INT 4
75929: PUSH
75930: EMPTY
75931: LIST
75932: LIST
75933: LIST
75934: PUSH
75935: LD_VAR 0 1
75939: PUSH
75940: LD_INT 4
75942: PLUS
75943: PUSH
75944: LD_VAR 0 2
75948: PUSH
75949: LD_INT 4
75951: PLUS
75952: PUSH
75953: LD_INT 5
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: LIST
75960: PUSH
75961: LD_VAR 0 1
75965: PUSH
75966: LD_INT 4
75968: MINUS
75969: PUSH
75970: LD_VAR 0 2
75974: PUSH
75975: LD_INT 1
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: LIST
75982: PUSH
75983: LD_VAR 0 1
75987: PUSH
75988: LD_VAR 0 2
75992: PUSH
75993: LD_INT 4
75995: MINUS
75996: PUSH
75997: LD_INT 3
75999: PUSH
76000: EMPTY
76001: LIST
76002: LIST
76003: LIST
76004: PUSH
76005: LD_VAR 0 1
76009: PUSH
76010: LD_INT 3
76012: MINUS
76013: PUSH
76014: LD_VAR 0 2
76018: PUSH
76019: LD_INT 3
76021: MINUS
76022: PUSH
76023: LD_INT 2
76025: PUSH
76026: EMPTY
76027: LIST
76028: LIST
76029: LIST
76030: PUSH
76031: EMPTY
76032: LIST
76033: LIST
76034: LIST
76035: LIST
76036: LIST
76037: ST_TO_ADDR
// end ; 4 :
76038: GO 76319
76040: LD_INT 4
76042: DOUBLE
76043: EQUAL
76044: IFTRUE 76048
76046: GO 76181
76048: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76049: LD_ADDR_VAR 0 5
76053: PUSH
76054: LD_VAR 0 1
76058: PUSH
76059: LD_VAR 0 2
76063: PUSH
76064: LD_INT 4
76066: PLUS
76067: PUSH
76068: LD_INT 0
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: LIST
76075: PUSH
76076: LD_VAR 0 1
76080: PUSH
76081: LD_INT 3
76083: PLUS
76084: PUSH
76085: LD_VAR 0 2
76089: PUSH
76090: LD_INT 3
76092: PLUS
76093: PUSH
76094: LD_INT 5
76096: PUSH
76097: EMPTY
76098: LIST
76099: LIST
76100: LIST
76101: PUSH
76102: LD_VAR 0 1
76106: PUSH
76107: LD_INT 4
76109: PLUS
76110: PUSH
76111: LD_VAR 0 2
76115: PUSH
76116: LD_INT 4
76118: PUSH
76119: EMPTY
76120: LIST
76121: LIST
76122: LIST
76123: PUSH
76124: LD_VAR 0 1
76128: PUSH
76129: LD_VAR 0 2
76133: PUSH
76134: LD_INT 3
76136: MINUS
76137: PUSH
76138: LD_INT 3
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: LIST
76145: PUSH
76146: LD_VAR 0 1
76150: PUSH
76151: LD_INT 4
76153: MINUS
76154: PUSH
76155: LD_VAR 0 2
76159: PUSH
76160: LD_INT 4
76162: MINUS
76163: PUSH
76164: LD_INT 2
76166: PUSH
76167: EMPTY
76168: LIST
76169: LIST
76170: LIST
76171: PUSH
76172: EMPTY
76173: LIST
76174: LIST
76175: LIST
76176: LIST
76177: LIST
76178: ST_TO_ADDR
// end ; 5 :
76179: GO 76319
76181: LD_INT 5
76183: DOUBLE
76184: EQUAL
76185: IFTRUE 76189
76187: GO 76318
76189: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76190: LD_ADDR_VAR 0 5
76194: PUSH
76195: LD_VAR 0 1
76199: PUSH
76200: LD_INT 4
76202: MINUS
76203: PUSH
76204: LD_VAR 0 2
76208: PUSH
76209: LD_INT 1
76211: PUSH
76212: EMPTY
76213: LIST
76214: LIST
76215: LIST
76216: PUSH
76217: LD_VAR 0 1
76221: PUSH
76222: LD_VAR 0 2
76226: PUSH
76227: LD_INT 4
76229: MINUS
76230: PUSH
76231: LD_INT 3
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: LIST
76238: PUSH
76239: LD_VAR 0 1
76243: PUSH
76244: LD_INT 4
76246: PLUS
76247: PUSH
76248: LD_VAR 0 2
76252: PUSH
76253: LD_INT 4
76255: PLUS
76256: PUSH
76257: LD_INT 5
76259: PUSH
76260: EMPTY
76261: LIST
76262: LIST
76263: LIST
76264: PUSH
76265: LD_VAR 0 1
76269: PUSH
76270: LD_INT 3
76272: PLUS
76273: PUSH
76274: LD_VAR 0 2
76278: PUSH
76279: LD_INT 4
76281: PUSH
76282: EMPTY
76283: LIST
76284: LIST
76285: LIST
76286: PUSH
76287: LD_VAR 0 1
76291: PUSH
76292: LD_VAR 0 2
76296: PUSH
76297: LD_INT 3
76299: PLUS
76300: PUSH
76301: LD_INT 0
76303: PUSH
76304: EMPTY
76305: LIST
76306: LIST
76307: LIST
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: LIST
76313: LIST
76314: LIST
76315: ST_TO_ADDR
// end ; end ;
76316: GO 76319
76318: POP
// result := list ;
76319: LD_ADDR_VAR 0 4
76323: PUSH
76324: LD_VAR 0 5
76328: ST_TO_ADDR
// end ;
76329: LD_VAR 0 4
76333: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
76334: LD_INT 0
76336: PPUSH
76337: PPUSH
76338: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
76339: LD_VAR 0 1
76343: NOT
76344: PUSH
76345: LD_VAR 0 2
76349: PUSH
76350: LD_INT 1
76352: PUSH
76353: LD_INT 2
76355: PUSH
76356: LD_INT 3
76358: PUSH
76359: LD_INT 4
76361: PUSH
76362: EMPTY
76363: LIST
76364: LIST
76365: LIST
76366: LIST
76367: IN
76368: NOT
76369: OR
76370: IFFALSE 76374
// exit ;
76372: GO 76457
// tmp := [ ] ;
76374: LD_ADDR_VAR 0 5
76378: PUSH
76379: EMPTY
76380: ST_TO_ADDR
// for i in units do
76381: LD_ADDR_VAR 0 4
76385: PUSH
76386: LD_VAR 0 1
76390: PUSH
76391: FOR_IN
76392: IFFALSE 76426
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76394: LD_ADDR_VAR 0 5
76398: PUSH
76399: LD_VAR 0 5
76403: PPUSH
76404: LD_VAR 0 4
76408: PPUSH
76409: LD_VAR 0 2
76413: PPUSH
76414: CALL_OW 259
76418: PPUSH
76419: CALL 77830 0 2
76423: ST_TO_ADDR
76424: GO 76391
76426: POP
76427: POP
// if not tmp then
76428: LD_VAR 0 5
76432: NOT
76433: IFFALSE 76437
// exit ;
76435: GO 76457
// result := SortListByListDesc ( units , tmp ) ;
76437: LD_ADDR_VAR 0 3
76441: PUSH
76442: LD_VAR 0 1
76446: PPUSH
76447: LD_VAR 0 5
76451: PPUSH
76452: CALL_OW 77
76456: ST_TO_ADDR
// end ;
76457: LD_VAR 0 3
76461: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76462: LD_INT 0
76464: PPUSH
76465: PPUSH
76466: PPUSH
// result := false ;
76467: LD_ADDR_VAR 0 3
76471: PUSH
76472: LD_INT 0
76474: ST_TO_ADDR
// if not building then
76475: LD_VAR 0 2
76479: NOT
76480: IFFALSE 76484
// exit ;
76482: GO 76622
// x := GetX ( building ) ;
76484: LD_ADDR_VAR 0 4
76488: PUSH
76489: LD_VAR 0 2
76493: PPUSH
76494: CALL_OW 250
76498: ST_TO_ADDR
// y := GetY ( building ) ;
76499: LD_ADDR_VAR 0 5
76503: PUSH
76504: LD_VAR 0 2
76508: PPUSH
76509: CALL_OW 251
76513: ST_TO_ADDR
// if not x or not y then
76514: LD_VAR 0 4
76518: NOT
76519: PUSH
76520: LD_VAR 0 5
76524: NOT
76525: OR
76526: IFFALSE 76530
// exit ;
76528: GO 76622
// if GetTaskList ( unit ) then
76530: LD_VAR 0 1
76534: PPUSH
76535: CALL_OW 437
76539: IFFALSE 76622
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76541: LD_STRING e
76543: PUSH
76544: LD_VAR 0 1
76548: PPUSH
76549: CALL_OW 437
76553: PUSH
76554: LD_INT 1
76556: ARRAY
76557: PUSH
76558: LD_INT 1
76560: ARRAY
76561: EQUAL
76562: PUSH
76563: LD_VAR 0 4
76567: PUSH
76568: LD_VAR 0 1
76572: PPUSH
76573: CALL_OW 437
76577: PUSH
76578: LD_INT 1
76580: ARRAY
76581: PUSH
76582: LD_INT 2
76584: ARRAY
76585: EQUAL
76586: AND
76587: PUSH
76588: LD_VAR 0 5
76592: PUSH
76593: LD_VAR 0 1
76597: PPUSH
76598: CALL_OW 437
76602: PUSH
76603: LD_INT 1
76605: ARRAY
76606: PUSH
76607: LD_INT 3
76609: ARRAY
76610: EQUAL
76611: AND
76612: IFFALSE 76622
// result := true end ;
76614: LD_ADDR_VAR 0 3
76618: PUSH
76619: LD_INT 1
76621: ST_TO_ADDR
// end ;
76622: LD_VAR 0 3
76626: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76627: LD_INT 0
76629: PPUSH
// result := false ;
76630: LD_ADDR_VAR 0 4
76634: PUSH
76635: LD_INT 0
76637: ST_TO_ADDR
// if GetTaskList ( unit ) then
76638: LD_VAR 0 1
76642: PPUSH
76643: CALL_OW 437
76647: IFFALSE 76730
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76649: LD_STRING M
76651: PUSH
76652: LD_VAR 0 1
76656: PPUSH
76657: CALL_OW 437
76661: PUSH
76662: LD_INT 1
76664: ARRAY
76665: PUSH
76666: LD_INT 1
76668: ARRAY
76669: EQUAL
76670: PUSH
76671: LD_VAR 0 2
76675: PUSH
76676: LD_VAR 0 1
76680: PPUSH
76681: CALL_OW 437
76685: PUSH
76686: LD_INT 1
76688: ARRAY
76689: PUSH
76690: LD_INT 2
76692: ARRAY
76693: EQUAL
76694: AND
76695: PUSH
76696: LD_VAR 0 3
76700: PUSH
76701: LD_VAR 0 1
76705: PPUSH
76706: CALL_OW 437
76710: PUSH
76711: LD_INT 1
76713: ARRAY
76714: PUSH
76715: LD_INT 3
76717: ARRAY
76718: EQUAL
76719: AND
76720: IFFALSE 76730
// result := true ;
76722: LD_ADDR_VAR 0 4
76726: PUSH
76727: LD_INT 1
76729: ST_TO_ADDR
// end ; end ;
76730: LD_VAR 0 4
76734: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76735: LD_INT 0
76737: PPUSH
76738: PPUSH
76739: PPUSH
76740: PPUSH
// if not unit or not area then
76741: LD_VAR 0 1
76745: NOT
76746: PUSH
76747: LD_VAR 0 2
76751: NOT
76752: OR
76753: IFFALSE 76757
// exit ;
76755: GO 76933
// tmp := AreaToList ( area , i ) ;
76757: LD_ADDR_VAR 0 6
76761: PUSH
76762: LD_VAR 0 2
76766: PPUSH
76767: LD_VAR 0 5
76771: PPUSH
76772: CALL_OW 517
76776: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76777: LD_ADDR_VAR 0 5
76781: PUSH
76782: DOUBLE
76783: LD_INT 1
76785: DEC
76786: ST_TO_ADDR
76787: LD_VAR 0 6
76791: PUSH
76792: LD_INT 1
76794: ARRAY
76795: PUSH
76796: FOR_TO
76797: IFFALSE 76931
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76799: LD_ADDR_VAR 0 7
76803: PUSH
76804: LD_VAR 0 6
76808: PUSH
76809: LD_INT 1
76811: ARRAY
76812: PUSH
76813: LD_VAR 0 5
76817: ARRAY
76818: PUSH
76819: LD_VAR 0 6
76823: PUSH
76824: LD_INT 2
76826: ARRAY
76827: PUSH
76828: LD_VAR 0 5
76832: ARRAY
76833: PUSH
76834: EMPTY
76835: LIST
76836: LIST
76837: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
76838: LD_INT 92
76840: PUSH
76841: LD_VAR 0 7
76845: PUSH
76846: LD_INT 1
76848: ARRAY
76849: PUSH
76850: LD_VAR 0 7
76854: PUSH
76855: LD_INT 2
76857: ARRAY
76858: PUSH
76859: LD_INT 2
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: LIST
76866: LIST
76867: PPUSH
76868: CALL_OW 69
76872: PUSH
76873: LD_INT 0
76875: EQUAL
76876: IFFALSE 76929
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76878: LD_VAR 0 1
76882: PPUSH
76883: LD_VAR 0 7
76887: PUSH
76888: LD_INT 1
76890: ARRAY
76891: PPUSH
76892: LD_VAR 0 7
76896: PUSH
76897: LD_INT 2
76899: ARRAY
76900: PPUSH
76901: LD_VAR 0 3
76905: PPUSH
76906: CALL_OW 48
// result := IsPlaced ( unit ) ;
76910: LD_ADDR_VAR 0 4
76914: PUSH
76915: LD_VAR 0 1
76919: PPUSH
76920: CALL_OW 305
76924: ST_TO_ADDR
// exit ;
76925: POP
76926: POP
76927: GO 76933
// end ; end ;
76929: GO 76796
76931: POP
76932: POP
// end ;
76933: LD_VAR 0 4
76937: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76938: LD_INT 0
76940: PPUSH
76941: PPUSH
76942: PPUSH
// if not side or side > 8 then
76943: LD_VAR 0 1
76947: NOT
76948: PUSH
76949: LD_VAR 0 1
76953: PUSH
76954: LD_INT 8
76956: GREATER
76957: OR
76958: IFFALSE 76962
// exit ;
76960: GO 77149
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76962: LD_ADDR_VAR 0 4
76966: PUSH
76967: LD_INT 22
76969: PUSH
76970: LD_VAR 0 1
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: PUSH
76979: LD_INT 21
76981: PUSH
76982: LD_INT 3
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: PUSH
76989: EMPTY
76990: LIST
76991: LIST
76992: PPUSH
76993: CALL_OW 69
76997: ST_TO_ADDR
// if not tmp then
76998: LD_VAR 0 4
77002: NOT
77003: IFFALSE 77007
// exit ;
77005: GO 77149
// enable_addtolog := true ;
77007: LD_ADDR_OWVAR 81
77011: PUSH
77012: LD_INT 1
77014: ST_TO_ADDR
// AddToLog ( [ ) ;
77015: LD_STRING [
77017: PPUSH
77018: CALL_OW 561
// for i in tmp do
77022: LD_ADDR_VAR 0 3
77026: PUSH
77027: LD_VAR 0 4
77031: PUSH
77032: FOR_IN
77033: IFFALSE 77140
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77035: LD_STRING [
77037: PUSH
77038: LD_VAR 0 3
77042: PPUSH
77043: CALL_OW 266
77047: STR
77048: PUSH
77049: LD_STRING , 
77051: STR
77052: PUSH
77053: LD_VAR 0 3
77057: PPUSH
77058: CALL_OW 250
77062: STR
77063: PUSH
77064: LD_STRING , 
77066: STR
77067: PUSH
77068: LD_VAR 0 3
77072: PPUSH
77073: CALL_OW 251
77077: STR
77078: PUSH
77079: LD_STRING , 
77081: STR
77082: PUSH
77083: LD_VAR 0 3
77087: PPUSH
77088: CALL_OW 254
77092: STR
77093: PUSH
77094: LD_STRING , 
77096: STR
77097: PUSH
77098: LD_VAR 0 3
77102: PPUSH
77103: LD_INT 1
77105: PPUSH
77106: CALL_OW 268
77110: STR
77111: PUSH
77112: LD_STRING , 
77114: STR
77115: PUSH
77116: LD_VAR 0 3
77120: PPUSH
77121: LD_INT 2
77123: PPUSH
77124: CALL_OW 268
77128: STR
77129: PUSH
77130: LD_STRING ],
77132: STR
77133: PPUSH
77134: CALL_OW 561
// end ;
77138: GO 77032
77140: POP
77141: POP
// AddToLog ( ]; ) ;
77142: LD_STRING ];
77144: PPUSH
77145: CALL_OW 561
// end ;
77149: LD_VAR 0 2
77153: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77154: LD_INT 0
77156: PPUSH
77157: PPUSH
77158: PPUSH
77159: PPUSH
77160: PPUSH
// if not area or not rate or not max then
77161: LD_VAR 0 1
77165: NOT
77166: PUSH
77167: LD_VAR 0 2
77171: NOT
77172: OR
77173: PUSH
77174: LD_VAR 0 4
77178: NOT
77179: OR
77180: IFFALSE 77184
// exit ;
77182: GO 77373
// while 1 do
77184: LD_INT 1
77186: IFFALSE 77373
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77188: LD_ADDR_VAR 0 9
77192: PUSH
77193: LD_VAR 0 1
77197: PPUSH
77198: LD_INT 1
77200: PPUSH
77201: CALL_OW 287
77205: PUSH
77206: LD_INT 10
77208: MUL
77209: ST_TO_ADDR
// r := rate / 10 ;
77210: LD_ADDR_VAR 0 7
77214: PUSH
77215: LD_VAR 0 2
77219: PUSH
77220: LD_INT 10
77222: DIVREAL
77223: ST_TO_ADDR
// time := 1 1$00 ;
77224: LD_ADDR_VAR 0 8
77228: PUSH
77229: LD_INT 2100
77231: ST_TO_ADDR
// if amount < min then
77232: LD_VAR 0 9
77236: PUSH
77237: LD_VAR 0 3
77241: LESS
77242: IFFALSE 77260
// r := r * 2 else
77244: LD_ADDR_VAR 0 7
77248: PUSH
77249: LD_VAR 0 7
77253: PUSH
77254: LD_INT 2
77256: MUL
77257: ST_TO_ADDR
77258: GO 77286
// if amount > max then
77260: LD_VAR 0 9
77264: PUSH
77265: LD_VAR 0 4
77269: GREATER
77270: IFFALSE 77286
// r := r / 2 ;
77272: LD_ADDR_VAR 0 7
77276: PUSH
77277: LD_VAR 0 7
77281: PUSH
77282: LD_INT 2
77284: DIVREAL
77285: ST_TO_ADDR
// time := time / r ;
77286: LD_ADDR_VAR 0 8
77290: PUSH
77291: LD_VAR 0 8
77295: PUSH
77296: LD_VAR 0 7
77300: DIVREAL
77301: ST_TO_ADDR
// if time < 0 then
77302: LD_VAR 0 8
77306: PUSH
77307: LD_INT 0
77309: LESS
77310: IFFALSE 77327
// time := time * - 1 ;
77312: LD_ADDR_VAR 0 8
77316: PUSH
77317: LD_VAR 0 8
77321: PUSH
77322: LD_INT 1
77324: NEG
77325: MUL
77326: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
77327: LD_VAR 0 8
77331: PUSH
77332: LD_INT 35
77334: PPUSH
77335: LD_INT 875
77337: PPUSH
77338: CALL_OW 12
77342: PLUS
77343: PPUSH
77344: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
77348: LD_INT 1
77350: PPUSH
77351: LD_INT 5
77353: PPUSH
77354: CALL_OW 12
77358: PPUSH
77359: LD_VAR 0 1
77363: PPUSH
77364: LD_INT 1
77366: PPUSH
77367: CALL_OW 55
// end ;
77371: GO 77184
// end ;
77373: LD_VAR 0 5
77377: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
77378: LD_INT 0
77380: PPUSH
77381: PPUSH
77382: PPUSH
77383: PPUSH
77384: PPUSH
77385: PPUSH
77386: PPUSH
77387: PPUSH
// if not turrets or not factories then
77388: LD_VAR 0 1
77392: NOT
77393: PUSH
77394: LD_VAR 0 2
77398: NOT
77399: OR
77400: IFFALSE 77404
// exit ;
77402: GO 77711
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77404: LD_ADDR_VAR 0 10
77408: PUSH
77409: LD_INT 5
77411: PUSH
77412: LD_INT 6
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: PUSH
77419: LD_INT 2
77421: PUSH
77422: LD_INT 4
77424: PUSH
77425: EMPTY
77426: LIST
77427: LIST
77428: PUSH
77429: LD_INT 3
77431: PUSH
77432: LD_INT 5
77434: PUSH
77435: EMPTY
77436: LIST
77437: LIST
77438: PUSH
77439: EMPTY
77440: LIST
77441: LIST
77442: LIST
77443: PUSH
77444: LD_INT 24
77446: PUSH
77447: LD_INT 25
77449: PUSH
77450: EMPTY
77451: LIST
77452: LIST
77453: PUSH
77454: LD_INT 23
77456: PUSH
77457: LD_INT 27
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: PUSH
77464: EMPTY
77465: LIST
77466: LIST
77467: PUSH
77468: LD_INT 42
77470: PUSH
77471: LD_INT 43
77473: PUSH
77474: EMPTY
77475: LIST
77476: LIST
77477: PUSH
77478: LD_INT 44
77480: PUSH
77481: LD_INT 46
77483: PUSH
77484: EMPTY
77485: LIST
77486: LIST
77487: PUSH
77488: LD_INT 45
77490: PUSH
77491: LD_INT 47
77493: PUSH
77494: EMPTY
77495: LIST
77496: LIST
77497: PUSH
77498: EMPTY
77499: LIST
77500: LIST
77501: LIST
77502: PUSH
77503: EMPTY
77504: LIST
77505: LIST
77506: LIST
77507: ST_TO_ADDR
// result := [ ] ;
77508: LD_ADDR_VAR 0 3
77512: PUSH
77513: EMPTY
77514: ST_TO_ADDR
// for i in turrets do
77515: LD_ADDR_VAR 0 4
77519: PUSH
77520: LD_VAR 0 1
77524: PUSH
77525: FOR_IN
77526: IFFALSE 77709
// begin nat := GetNation ( i ) ;
77528: LD_ADDR_VAR 0 7
77532: PUSH
77533: LD_VAR 0 4
77537: PPUSH
77538: CALL_OW 248
77542: ST_TO_ADDR
// weapon := 0 ;
77543: LD_ADDR_VAR 0 8
77547: PUSH
77548: LD_INT 0
77550: ST_TO_ADDR
// if not nat then
77551: LD_VAR 0 7
77555: NOT
77556: IFFALSE 77560
// continue ;
77558: GO 77525
// for j in list [ nat ] do
77560: LD_ADDR_VAR 0 5
77564: PUSH
77565: LD_VAR 0 10
77569: PUSH
77570: LD_VAR 0 7
77574: ARRAY
77575: PUSH
77576: FOR_IN
77577: IFFALSE 77618
// if GetBWeapon ( i ) = j [ 1 ] then
77579: LD_VAR 0 4
77583: PPUSH
77584: CALL_OW 269
77588: PUSH
77589: LD_VAR 0 5
77593: PUSH
77594: LD_INT 1
77596: ARRAY
77597: EQUAL
77598: IFFALSE 77616
// begin weapon := j [ 2 ] ;
77600: LD_ADDR_VAR 0 8
77604: PUSH
77605: LD_VAR 0 5
77609: PUSH
77610: LD_INT 2
77612: ARRAY
77613: ST_TO_ADDR
// break ;
77614: GO 77618
// end ;
77616: GO 77576
77618: POP
77619: POP
// if not weapon then
77620: LD_VAR 0 8
77624: NOT
77625: IFFALSE 77629
// continue ;
77627: GO 77525
// for k in factories do
77629: LD_ADDR_VAR 0 6
77633: PUSH
77634: LD_VAR 0 2
77638: PUSH
77639: FOR_IN
77640: IFFALSE 77705
// begin weapons := AvailableWeaponList ( k ) ;
77642: LD_ADDR_VAR 0 9
77646: PUSH
77647: LD_VAR 0 6
77651: PPUSH
77652: CALL_OW 478
77656: ST_TO_ADDR
// if not weapons then
77657: LD_VAR 0 9
77661: NOT
77662: IFFALSE 77666
// continue ;
77664: GO 77639
// if weapon in weapons then
77666: LD_VAR 0 8
77670: PUSH
77671: LD_VAR 0 9
77675: IN
77676: IFFALSE 77703
// begin result := [ i , weapon ] ;
77678: LD_ADDR_VAR 0 3
77682: PUSH
77683: LD_VAR 0 4
77687: PUSH
77688: LD_VAR 0 8
77692: PUSH
77693: EMPTY
77694: LIST
77695: LIST
77696: ST_TO_ADDR
// exit ;
77697: POP
77698: POP
77699: POP
77700: POP
77701: GO 77711
// end ; end ;
77703: GO 77639
77705: POP
77706: POP
// end ;
77707: GO 77525
77709: POP
77710: POP
// end ;
77711: LD_VAR 0 3
77715: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77716: LD_INT 0
77718: PPUSH
// if not side or side > 8 then
77719: LD_VAR 0 3
77723: NOT
77724: PUSH
77725: LD_VAR 0 3
77729: PUSH
77730: LD_INT 8
77732: GREATER
77733: OR
77734: IFFALSE 77738
// exit ;
77736: GO 77797
// if not range then
77738: LD_VAR 0 4
77742: NOT
77743: IFFALSE 77754
// range := - 12 ;
77745: LD_ADDR_VAR 0 4
77749: PUSH
77750: LD_INT 12
77752: NEG
77753: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77754: LD_VAR 0 1
77758: PPUSH
77759: LD_VAR 0 2
77763: PPUSH
77764: LD_VAR 0 3
77768: PPUSH
77769: LD_VAR 0 4
77773: PPUSH
77774: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77778: LD_VAR 0 1
77782: PPUSH
77783: LD_VAR 0 2
77787: PPUSH
77788: LD_VAR 0 3
77792: PPUSH
77793: CALL_OW 331
// end ;
77797: LD_VAR 0 5
77801: RET
// export function Video ( mode ) ; begin
77802: LD_INT 0
77804: PPUSH
// ingame_video = mode ;
77805: LD_ADDR_OWVAR 52
77809: PUSH
77810: LD_VAR 0 1
77814: ST_TO_ADDR
// interface_hidden = mode ;
77815: LD_ADDR_OWVAR 54
77819: PUSH
77820: LD_VAR 0 1
77824: ST_TO_ADDR
// end ;
77825: LD_VAR 0 2
77829: RET
// export function Join ( array , element ) ; begin
77830: LD_INT 0
77832: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77833: LD_ADDR_VAR 0 3
77837: PUSH
77838: LD_VAR 0 1
77842: PPUSH
77843: LD_VAR 0 1
77847: PUSH
77848: LD_INT 1
77850: PLUS
77851: PPUSH
77852: LD_VAR 0 2
77856: PPUSH
77857: CALL_OW 1
77861: ST_TO_ADDR
// end ;
77862: LD_VAR 0 3
77866: RET
// export function JoinUnion ( array , element ) ; begin
77867: LD_INT 0
77869: PPUSH
// result := array union element ;
77870: LD_ADDR_VAR 0 3
77874: PUSH
77875: LD_VAR 0 1
77879: PUSH
77880: LD_VAR 0 2
77884: UNION
77885: ST_TO_ADDR
// end ;
77886: LD_VAR 0 3
77890: RET
// export function GetBehemoths ( side ) ; begin
77891: LD_INT 0
77893: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77894: LD_ADDR_VAR 0 2
77898: PUSH
77899: LD_INT 22
77901: PUSH
77902: LD_VAR 0 1
77906: PUSH
77907: EMPTY
77908: LIST
77909: LIST
77910: PUSH
77911: LD_INT 31
77913: PUSH
77914: LD_INT 25
77916: PUSH
77917: EMPTY
77918: LIST
77919: LIST
77920: PUSH
77921: EMPTY
77922: LIST
77923: LIST
77924: PPUSH
77925: CALL_OW 69
77929: ST_TO_ADDR
// end ;
77930: LD_VAR 0 2
77934: RET
// export function Shuffle ( array ) ; var i , index ; begin
77935: LD_INT 0
77937: PPUSH
77938: PPUSH
77939: PPUSH
// result := [ ] ;
77940: LD_ADDR_VAR 0 2
77944: PUSH
77945: EMPTY
77946: ST_TO_ADDR
// if not array then
77947: LD_VAR 0 1
77951: NOT
77952: IFFALSE 77956
// exit ;
77954: GO 78055
// Randomize ;
77956: CALL_OW 10
// for i = array downto 1 do
77960: LD_ADDR_VAR 0 3
77964: PUSH
77965: DOUBLE
77966: LD_VAR 0 1
77970: INC
77971: ST_TO_ADDR
77972: LD_INT 1
77974: PUSH
77975: FOR_DOWNTO
77976: IFFALSE 78053
// begin index := rand ( 1 , array ) ;
77978: LD_ADDR_VAR 0 4
77982: PUSH
77983: LD_INT 1
77985: PPUSH
77986: LD_VAR 0 1
77990: PPUSH
77991: CALL_OW 12
77995: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77996: LD_ADDR_VAR 0 2
78000: PUSH
78001: LD_VAR 0 2
78005: PPUSH
78006: LD_VAR 0 2
78010: PUSH
78011: LD_INT 1
78013: PLUS
78014: PPUSH
78015: LD_VAR 0 1
78019: PUSH
78020: LD_VAR 0 4
78024: ARRAY
78025: PPUSH
78026: CALL_OW 2
78030: ST_TO_ADDR
// array := Delete ( array , index ) ;
78031: LD_ADDR_VAR 0 1
78035: PUSH
78036: LD_VAR 0 1
78040: PPUSH
78041: LD_VAR 0 4
78045: PPUSH
78046: CALL_OW 3
78050: ST_TO_ADDR
// end ;
78051: GO 77975
78053: POP
78054: POP
// end ;
78055: LD_VAR 0 2
78059: RET
// export function GetBaseMaterials ( base ) ; begin
78060: LD_INT 0
78062: PPUSH
// result := [ 0 , 0 , 0 ] ;
78063: LD_ADDR_VAR 0 2
78067: PUSH
78068: LD_INT 0
78070: PUSH
78071: LD_INT 0
78073: PUSH
78074: LD_INT 0
78076: PUSH
78077: EMPTY
78078: LIST
78079: LIST
78080: LIST
78081: ST_TO_ADDR
// if not base then
78082: LD_VAR 0 1
78086: NOT
78087: IFFALSE 78091
// exit ;
78089: GO 78140
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78091: LD_ADDR_VAR 0 2
78095: PUSH
78096: LD_VAR 0 1
78100: PPUSH
78101: LD_INT 1
78103: PPUSH
78104: CALL_OW 275
78108: PUSH
78109: LD_VAR 0 1
78113: PPUSH
78114: LD_INT 2
78116: PPUSH
78117: CALL_OW 275
78121: PUSH
78122: LD_VAR 0 1
78126: PPUSH
78127: LD_INT 3
78129: PPUSH
78130: CALL_OW 275
78134: PUSH
78135: EMPTY
78136: LIST
78137: LIST
78138: LIST
78139: ST_TO_ADDR
// end ;
78140: LD_VAR 0 2
78144: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78145: LD_INT 0
78147: PPUSH
78148: PPUSH
// result := array ;
78149: LD_ADDR_VAR 0 3
78153: PUSH
78154: LD_VAR 0 1
78158: ST_TO_ADDR
// if size >= result then
78159: LD_VAR 0 2
78163: PUSH
78164: LD_VAR 0 3
78168: GREATEREQUAL
78169: IFFALSE 78173
// exit ;
78171: GO 78223
// if size then
78173: LD_VAR 0 2
78177: IFFALSE 78223
// for i := array downto size do
78179: LD_ADDR_VAR 0 4
78183: PUSH
78184: DOUBLE
78185: LD_VAR 0 1
78189: INC
78190: ST_TO_ADDR
78191: LD_VAR 0 2
78195: PUSH
78196: FOR_DOWNTO
78197: IFFALSE 78221
// result := Delete ( result , result ) ;
78199: LD_ADDR_VAR 0 3
78203: PUSH
78204: LD_VAR 0 3
78208: PPUSH
78209: LD_VAR 0 3
78213: PPUSH
78214: CALL_OW 3
78218: ST_TO_ADDR
78219: GO 78196
78221: POP
78222: POP
// end ;
78223: LD_VAR 0 3
78227: RET
// export function ComExit ( unit ) ; var tmp ; begin
78228: LD_INT 0
78230: PPUSH
78231: PPUSH
// if not IsInUnit ( unit ) then
78232: LD_VAR 0 1
78236: PPUSH
78237: CALL_OW 310
78241: NOT
78242: IFFALSE 78246
// exit ;
78244: GO 78306
// tmp := IsInUnit ( unit ) ;
78246: LD_ADDR_VAR 0 3
78250: PUSH
78251: LD_VAR 0 1
78255: PPUSH
78256: CALL_OW 310
78260: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78261: LD_VAR 0 3
78265: PPUSH
78266: CALL_OW 247
78270: PUSH
78271: LD_INT 2
78273: EQUAL
78274: IFFALSE 78287
// ComExitVehicle ( unit ) else
78276: LD_VAR 0 1
78280: PPUSH
78281: CALL_OW 121
78285: GO 78296
// ComExitBuilding ( unit ) ;
78287: LD_VAR 0 1
78291: PPUSH
78292: CALL_OW 122
// result := tmp ;
78296: LD_ADDR_VAR 0 2
78300: PUSH
78301: LD_VAR 0 3
78305: ST_TO_ADDR
// end ;
78306: LD_VAR 0 2
78310: RET
// export function ComExitAll ( units ) ; var i ; begin
78311: LD_INT 0
78313: PPUSH
78314: PPUSH
// if not units then
78315: LD_VAR 0 1
78319: NOT
78320: IFFALSE 78324
// exit ;
78322: GO 78350
// for i in units do
78324: LD_ADDR_VAR 0 3
78328: PUSH
78329: LD_VAR 0 1
78333: PUSH
78334: FOR_IN
78335: IFFALSE 78348
// ComExit ( i ) ;
78337: LD_VAR 0 3
78341: PPUSH
78342: CALL 78228 0 1
78346: GO 78334
78348: POP
78349: POP
// end ;
78350: LD_VAR 0 2
78354: RET
// export function ResetHc ; begin
78355: LD_INT 0
78357: PPUSH
// InitHc ;
78358: CALL_OW 19
// hc_importance := 0 ;
78362: LD_ADDR_OWVAR 32
78366: PUSH
78367: LD_INT 0
78369: ST_TO_ADDR
// end ;
78370: LD_VAR 0 1
78374: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
78375: LD_INT 0
78377: PPUSH
78378: PPUSH
78379: PPUSH
// _x := ( x1 + x2 ) div 2 ;
78380: LD_ADDR_VAR 0 6
78384: PUSH
78385: LD_VAR 0 1
78389: PUSH
78390: LD_VAR 0 3
78394: PLUS
78395: PUSH
78396: LD_INT 2
78398: DIV
78399: ST_TO_ADDR
// if _x < 0 then
78400: LD_VAR 0 6
78404: PUSH
78405: LD_INT 0
78407: LESS
78408: IFFALSE 78425
// _x := _x * - 1 ;
78410: LD_ADDR_VAR 0 6
78414: PUSH
78415: LD_VAR 0 6
78419: PUSH
78420: LD_INT 1
78422: NEG
78423: MUL
78424: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78425: LD_ADDR_VAR 0 7
78429: PUSH
78430: LD_VAR 0 2
78434: PUSH
78435: LD_VAR 0 4
78439: PLUS
78440: PUSH
78441: LD_INT 2
78443: DIV
78444: ST_TO_ADDR
// if _y < 0 then
78445: LD_VAR 0 7
78449: PUSH
78450: LD_INT 0
78452: LESS
78453: IFFALSE 78470
// _y := _y * - 1 ;
78455: LD_ADDR_VAR 0 7
78459: PUSH
78460: LD_VAR 0 7
78464: PUSH
78465: LD_INT 1
78467: NEG
78468: MUL
78469: ST_TO_ADDR
// result := [ _x , _y ] ;
78470: LD_ADDR_VAR 0 5
78474: PUSH
78475: LD_VAR 0 6
78479: PUSH
78480: LD_VAR 0 7
78484: PUSH
78485: EMPTY
78486: LIST
78487: LIST
78488: ST_TO_ADDR
// end ;
78489: LD_VAR 0 5
78493: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78494: LD_INT 0
78496: PPUSH
78497: PPUSH
78498: PPUSH
78499: PPUSH
// task := GetTaskList ( unit ) ;
78500: LD_ADDR_VAR 0 7
78504: PUSH
78505: LD_VAR 0 1
78509: PPUSH
78510: CALL_OW 437
78514: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78515: LD_VAR 0 7
78519: NOT
78520: PUSH
78521: LD_VAR 0 1
78525: PPUSH
78526: LD_VAR 0 2
78530: PPUSH
78531: CALL_OW 308
78535: NOT
78536: AND
78537: IFFALSE 78541
// exit ;
78539: GO 78659
// if IsInArea ( unit , area ) then
78541: LD_VAR 0 1
78545: PPUSH
78546: LD_VAR 0 2
78550: PPUSH
78551: CALL_OW 308
78555: IFFALSE 78573
// begin ComMoveToArea ( unit , goAway ) ;
78557: LD_VAR 0 1
78561: PPUSH
78562: LD_VAR 0 3
78566: PPUSH
78567: CALL_OW 113
// exit ;
78571: GO 78659
// end ; if task [ 1 ] [ 1 ] <> M then
78573: LD_VAR 0 7
78577: PUSH
78578: LD_INT 1
78580: ARRAY
78581: PUSH
78582: LD_INT 1
78584: ARRAY
78585: PUSH
78586: LD_STRING M
78588: NONEQUAL
78589: IFFALSE 78593
// exit ;
78591: GO 78659
// x := task [ 1 ] [ 2 ] ;
78593: LD_ADDR_VAR 0 5
78597: PUSH
78598: LD_VAR 0 7
78602: PUSH
78603: LD_INT 1
78605: ARRAY
78606: PUSH
78607: LD_INT 2
78609: ARRAY
78610: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78611: LD_ADDR_VAR 0 6
78615: PUSH
78616: LD_VAR 0 7
78620: PUSH
78621: LD_INT 1
78623: ARRAY
78624: PUSH
78625: LD_INT 3
78627: ARRAY
78628: ST_TO_ADDR
// if InArea ( x , y , area ) then
78629: LD_VAR 0 5
78633: PPUSH
78634: LD_VAR 0 6
78638: PPUSH
78639: LD_VAR 0 2
78643: PPUSH
78644: CALL_OW 309
78648: IFFALSE 78659
// ComStop ( unit ) ;
78650: LD_VAR 0 1
78654: PPUSH
78655: CALL_OW 141
// end ;
78659: LD_VAR 0 4
78663: RET
// export function Abs ( value ) ; begin
78664: LD_INT 0
78666: PPUSH
// result := value ;
78667: LD_ADDR_VAR 0 2
78671: PUSH
78672: LD_VAR 0 1
78676: ST_TO_ADDR
// if value < 0 then
78677: LD_VAR 0 1
78681: PUSH
78682: LD_INT 0
78684: LESS
78685: IFFALSE 78702
// result := value * - 1 ;
78687: LD_ADDR_VAR 0 2
78691: PUSH
78692: LD_VAR 0 1
78696: PUSH
78697: LD_INT 1
78699: NEG
78700: MUL
78701: ST_TO_ADDR
// end ;
78702: LD_VAR 0 2
78706: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78707: LD_INT 0
78709: PPUSH
78710: PPUSH
78711: PPUSH
78712: PPUSH
78713: PPUSH
78714: PPUSH
78715: PPUSH
78716: PPUSH
// if not unit or not building then
78717: LD_VAR 0 1
78721: NOT
78722: PUSH
78723: LD_VAR 0 2
78727: NOT
78728: OR
78729: IFFALSE 78733
// exit ;
78731: GO 78959
// x := GetX ( building ) ;
78733: LD_ADDR_VAR 0 4
78737: PUSH
78738: LD_VAR 0 2
78742: PPUSH
78743: CALL_OW 250
78747: ST_TO_ADDR
// y := GetY ( building ) ;
78748: LD_ADDR_VAR 0 6
78752: PUSH
78753: LD_VAR 0 2
78757: PPUSH
78758: CALL_OW 251
78762: ST_TO_ADDR
// d := GetDir ( building ) ;
78763: LD_ADDR_VAR 0 8
78767: PUSH
78768: LD_VAR 0 2
78772: PPUSH
78773: CALL_OW 254
78777: ST_TO_ADDR
// r := 4 ;
78778: LD_ADDR_VAR 0 9
78782: PUSH
78783: LD_INT 4
78785: ST_TO_ADDR
// for i := 1 to 5 do
78786: LD_ADDR_VAR 0 10
78790: PUSH
78791: DOUBLE
78792: LD_INT 1
78794: DEC
78795: ST_TO_ADDR
78796: LD_INT 5
78798: PUSH
78799: FOR_TO
78800: IFFALSE 78957
// begin _x := ShiftX ( x , d , r + i ) ;
78802: LD_ADDR_VAR 0 5
78806: PUSH
78807: LD_VAR 0 4
78811: PPUSH
78812: LD_VAR 0 8
78816: PPUSH
78817: LD_VAR 0 9
78821: PUSH
78822: LD_VAR 0 10
78826: PLUS
78827: PPUSH
78828: CALL_OW 272
78832: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78833: LD_ADDR_VAR 0 7
78837: PUSH
78838: LD_VAR 0 6
78842: PPUSH
78843: LD_VAR 0 8
78847: PPUSH
78848: LD_VAR 0 9
78852: PUSH
78853: LD_VAR 0 10
78857: PLUS
78858: PPUSH
78859: CALL_OW 273
78863: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78864: LD_VAR 0 5
78868: PPUSH
78869: LD_VAR 0 7
78873: PPUSH
78874: CALL_OW 488
78878: PUSH
78879: LD_VAR 0 5
78883: PPUSH
78884: LD_VAR 0 7
78888: PPUSH
78889: CALL_OW 428
78893: PPUSH
78894: CALL_OW 247
78898: PUSH
78899: LD_INT 3
78901: PUSH
78902: LD_INT 2
78904: PUSH
78905: EMPTY
78906: LIST
78907: LIST
78908: IN
78909: NOT
78910: AND
78911: IFFALSE 78955
// begin ComMoveXY ( unit , _x , _y ) ;
78913: LD_VAR 0 1
78917: PPUSH
78918: LD_VAR 0 5
78922: PPUSH
78923: LD_VAR 0 7
78927: PPUSH
78928: CALL_OW 111
// result := [ _x , _y ] ;
78932: LD_ADDR_VAR 0 3
78936: PUSH
78937: LD_VAR 0 5
78941: PUSH
78942: LD_VAR 0 7
78946: PUSH
78947: EMPTY
78948: LIST
78949: LIST
78950: ST_TO_ADDR
// exit ;
78951: POP
78952: POP
78953: GO 78959
// end ; end ;
78955: GO 78799
78957: POP
78958: POP
// end ;
78959: LD_VAR 0 3
78963: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78964: LD_INT 0
78966: PPUSH
78967: PPUSH
78968: PPUSH
// result := 0 ;
78969: LD_ADDR_VAR 0 3
78973: PUSH
78974: LD_INT 0
78976: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78977: LD_VAR 0 1
78981: PUSH
78982: LD_INT 0
78984: LESS
78985: PUSH
78986: LD_VAR 0 1
78990: PUSH
78991: LD_INT 8
78993: GREATER
78994: OR
78995: PUSH
78996: LD_VAR 0 2
79000: PUSH
79001: LD_INT 0
79003: LESS
79004: OR
79005: PUSH
79006: LD_VAR 0 2
79010: PUSH
79011: LD_INT 8
79013: GREATER
79014: OR
79015: IFFALSE 79019
// exit ;
79017: GO 79094
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79019: LD_ADDR_VAR 0 4
79023: PUSH
79024: LD_INT 22
79026: PUSH
79027: LD_VAR 0 2
79031: PUSH
79032: EMPTY
79033: LIST
79034: LIST
79035: PPUSH
79036: CALL_OW 69
79040: PUSH
79041: FOR_IN
79042: IFFALSE 79092
// begin un := UnitShoot ( i ) ;
79044: LD_ADDR_VAR 0 5
79048: PUSH
79049: LD_VAR 0 4
79053: PPUSH
79054: CALL_OW 504
79058: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79059: LD_VAR 0 5
79063: PPUSH
79064: CALL_OW 255
79068: PUSH
79069: LD_VAR 0 1
79073: EQUAL
79074: IFFALSE 79090
// begin result := un ;
79076: LD_ADDR_VAR 0 3
79080: PUSH
79081: LD_VAR 0 5
79085: ST_TO_ADDR
// exit ;
79086: POP
79087: POP
79088: GO 79094
// end ; end ;
79090: GO 79041
79092: POP
79093: POP
// end ;
79094: LD_VAR 0 3
79098: RET
// export function GetCargoBay ( units ) ; begin
79099: LD_INT 0
79101: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79102: LD_ADDR_VAR 0 2
79106: PUSH
79107: LD_VAR 0 1
79111: PPUSH
79112: LD_INT 2
79114: PUSH
79115: LD_INT 34
79117: PUSH
79118: LD_INT 12
79120: PUSH
79121: EMPTY
79122: LIST
79123: LIST
79124: PUSH
79125: LD_INT 34
79127: PUSH
79128: LD_INT 51
79130: PUSH
79131: EMPTY
79132: LIST
79133: LIST
79134: PUSH
79135: LD_INT 34
79137: PUSH
79138: LD_INT 32
79140: PUSH
79141: EMPTY
79142: LIST
79143: LIST
79144: PUSH
79145: LD_INT 34
79147: PUSH
79148: LD_INT 89
79150: PUSH
79151: EMPTY
79152: LIST
79153: LIST
79154: PUSH
79155: EMPTY
79156: LIST
79157: LIST
79158: LIST
79159: LIST
79160: LIST
79161: PPUSH
79162: CALL_OW 72
79166: ST_TO_ADDR
// end ;
79167: LD_VAR 0 2
79171: RET
// export function Negate ( value ) ; begin
79172: LD_INT 0
79174: PPUSH
// result := not value ;
79175: LD_ADDR_VAR 0 2
79179: PUSH
79180: LD_VAR 0 1
79184: NOT
79185: ST_TO_ADDR
// end ;
79186: LD_VAR 0 2
79190: RET
// export function Inc ( value ) ; begin
79191: LD_INT 0
79193: PPUSH
// result := value + 1 ;
79194: LD_ADDR_VAR 0 2
79198: PUSH
79199: LD_VAR 0 1
79203: PUSH
79204: LD_INT 1
79206: PLUS
79207: ST_TO_ADDR
// end ;
79208: LD_VAR 0 2
79212: RET
// export function Dec ( value ) ; begin
79213: LD_INT 0
79215: PPUSH
// result := value - 1 ;
79216: LD_ADDR_VAR 0 2
79220: PUSH
79221: LD_VAR 0 1
79225: PUSH
79226: LD_INT 1
79228: MINUS
79229: ST_TO_ADDR
// end ;
79230: LD_VAR 0 2
79234: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79235: LD_INT 0
79237: PPUSH
79238: PPUSH
79239: PPUSH
79240: PPUSH
79241: PPUSH
79242: PPUSH
79243: PPUSH
79244: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79245: LD_VAR 0 1
79249: PPUSH
79250: LD_VAR 0 2
79254: PPUSH
79255: CALL_OW 488
79259: NOT
79260: PUSH
79261: LD_VAR 0 3
79265: PPUSH
79266: LD_VAR 0 4
79270: PPUSH
79271: CALL_OW 488
79275: NOT
79276: OR
79277: IFFALSE 79290
// begin result := - 1 ;
79279: LD_ADDR_VAR 0 5
79283: PUSH
79284: LD_INT 1
79286: NEG
79287: ST_TO_ADDR
// exit ;
79288: GO 79525
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79290: LD_ADDR_VAR 0 12
79294: PUSH
79295: LD_VAR 0 1
79299: PPUSH
79300: LD_VAR 0 2
79304: PPUSH
79305: LD_VAR 0 3
79309: PPUSH
79310: LD_VAR 0 4
79314: PPUSH
79315: CALL 78375 0 4
79319: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
79320: LD_ADDR_VAR 0 11
79324: PUSH
79325: LD_VAR 0 1
79329: PPUSH
79330: LD_VAR 0 2
79334: PPUSH
79335: LD_VAR 0 12
79339: PUSH
79340: LD_INT 1
79342: ARRAY
79343: PPUSH
79344: LD_VAR 0 12
79348: PUSH
79349: LD_INT 2
79351: ARRAY
79352: PPUSH
79353: CALL_OW 298
79357: ST_TO_ADDR
// distance := 9999 ;
79358: LD_ADDR_VAR 0 10
79362: PUSH
79363: LD_INT 9999
79365: ST_TO_ADDR
// for i := 0 to 5 do
79366: LD_ADDR_VAR 0 6
79370: PUSH
79371: DOUBLE
79372: LD_INT 0
79374: DEC
79375: ST_TO_ADDR
79376: LD_INT 5
79378: PUSH
79379: FOR_TO
79380: IFFALSE 79523
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79382: LD_ADDR_VAR 0 7
79386: PUSH
79387: LD_VAR 0 1
79391: PPUSH
79392: LD_VAR 0 6
79396: PPUSH
79397: LD_VAR 0 11
79401: PPUSH
79402: CALL_OW 272
79406: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79407: LD_ADDR_VAR 0 8
79411: PUSH
79412: LD_VAR 0 2
79416: PPUSH
79417: LD_VAR 0 6
79421: PPUSH
79422: LD_VAR 0 11
79426: PPUSH
79427: CALL_OW 273
79431: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79432: LD_VAR 0 7
79436: PPUSH
79437: LD_VAR 0 8
79441: PPUSH
79442: CALL_OW 488
79446: NOT
79447: IFFALSE 79451
// continue ;
79449: GO 79379
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79451: LD_ADDR_VAR 0 9
79455: PUSH
79456: LD_VAR 0 12
79460: PUSH
79461: LD_INT 1
79463: ARRAY
79464: PPUSH
79465: LD_VAR 0 12
79469: PUSH
79470: LD_INT 2
79472: ARRAY
79473: PPUSH
79474: LD_VAR 0 7
79478: PPUSH
79479: LD_VAR 0 8
79483: PPUSH
79484: CALL_OW 298
79488: ST_TO_ADDR
// if tmp < distance then
79489: LD_VAR 0 9
79493: PUSH
79494: LD_VAR 0 10
79498: LESS
79499: IFFALSE 79521
// begin result := i ;
79501: LD_ADDR_VAR 0 5
79505: PUSH
79506: LD_VAR 0 6
79510: ST_TO_ADDR
// distance := tmp ;
79511: LD_ADDR_VAR 0 10
79515: PUSH
79516: LD_VAR 0 9
79520: ST_TO_ADDR
// end ; end ;
79521: GO 79379
79523: POP
79524: POP
// end ;
79525: LD_VAR 0 5
79529: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79530: LD_INT 0
79532: PPUSH
79533: PPUSH
// if not driver or not IsInUnit ( driver ) then
79534: LD_VAR 0 1
79538: NOT
79539: PUSH
79540: LD_VAR 0 1
79544: PPUSH
79545: CALL_OW 310
79549: NOT
79550: OR
79551: IFFALSE 79555
// exit ;
79553: GO 79645
// vehicle := IsInUnit ( driver ) ;
79555: LD_ADDR_VAR 0 3
79559: PUSH
79560: LD_VAR 0 1
79564: PPUSH
79565: CALL_OW 310
79569: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79570: LD_VAR 0 1
79574: PPUSH
79575: LD_STRING \
79577: PUSH
79578: LD_INT 0
79580: PUSH
79581: LD_INT 0
79583: PUSH
79584: LD_INT 0
79586: PUSH
79587: LD_INT 0
79589: PUSH
79590: LD_INT 0
79592: PUSH
79593: LD_INT 0
79595: PUSH
79596: EMPTY
79597: LIST
79598: LIST
79599: LIST
79600: LIST
79601: LIST
79602: LIST
79603: LIST
79604: PUSH
79605: LD_STRING E
79607: PUSH
79608: LD_INT 0
79610: PUSH
79611: LD_INT 0
79613: PUSH
79614: LD_VAR 0 3
79618: PUSH
79619: LD_INT 0
79621: PUSH
79622: LD_INT 0
79624: PUSH
79625: LD_INT 0
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: LIST
79632: LIST
79633: LIST
79634: LIST
79635: LIST
79636: PUSH
79637: EMPTY
79638: LIST
79639: LIST
79640: PPUSH
79641: CALL_OW 446
// end ;
79645: LD_VAR 0 2
79649: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79650: LD_INT 0
79652: PPUSH
79653: PPUSH
// if not driver or not IsInUnit ( driver ) then
79654: LD_VAR 0 1
79658: NOT
79659: PUSH
79660: LD_VAR 0 1
79664: PPUSH
79665: CALL_OW 310
79669: NOT
79670: OR
79671: IFFALSE 79675
// exit ;
79673: GO 79765
// vehicle := IsInUnit ( driver ) ;
79675: LD_ADDR_VAR 0 3
79679: PUSH
79680: LD_VAR 0 1
79684: PPUSH
79685: CALL_OW 310
79689: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79690: LD_VAR 0 1
79694: PPUSH
79695: LD_STRING \
79697: PUSH
79698: LD_INT 0
79700: PUSH
79701: LD_INT 0
79703: PUSH
79704: LD_INT 0
79706: PUSH
79707: LD_INT 0
79709: PUSH
79710: LD_INT 0
79712: PUSH
79713: LD_INT 0
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: LIST
79720: LIST
79721: LIST
79722: LIST
79723: LIST
79724: PUSH
79725: LD_STRING E
79727: PUSH
79728: LD_INT 0
79730: PUSH
79731: LD_INT 0
79733: PUSH
79734: LD_VAR 0 3
79738: PUSH
79739: LD_INT 0
79741: PUSH
79742: LD_INT 0
79744: PUSH
79745: LD_INT 0
79747: PUSH
79748: EMPTY
79749: LIST
79750: LIST
79751: LIST
79752: LIST
79753: LIST
79754: LIST
79755: LIST
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: PPUSH
79761: CALL_OW 447
// end ;
79765: LD_VAR 0 2
79769: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79770: LD_INT 0
79772: PPUSH
79773: PPUSH
79774: PPUSH
// tmp := [ ] ;
79775: LD_ADDR_VAR 0 5
79779: PUSH
79780: EMPTY
79781: ST_TO_ADDR
// for i in units do
79782: LD_ADDR_VAR 0 4
79786: PUSH
79787: LD_VAR 0 1
79791: PUSH
79792: FOR_IN
79793: IFFALSE 79831
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79795: LD_ADDR_VAR 0 5
79799: PUSH
79800: LD_VAR 0 5
79804: PPUSH
79805: LD_VAR 0 5
79809: PUSH
79810: LD_INT 1
79812: PLUS
79813: PPUSH
79814: LD_VAR 0 4
79818: PPUSH
79819: CALL_OW 256
79823: PPUSH
79824: CALL_OW 2
79828: ST_TO_ADDR
79829: GO 79792
79831: POP
79832: POP
// if not tmp then
79833: LD_VAR 0 5
79837: NOT
79838: IFFALSE 79842
// exit ;
79840: GO 79890
// if asc then
79842: LD_VAR 0 2
79846: IFFALSE 79870
// result := SortListByListAsc ( units , tmp ) else
79848: LD_ADDR_VAR 0 3
79852: PUSH
79853: LD_VAR 0 1
79857: PPUSH
79858: LD_VAR 0 5
79862: PPUSH
79863: CALL_OW 76
79867: ST_TO_ADDR
79868: GO 79890
// result := SortListByListDesc ( units , tmp ) ;
79870: LD_ADDR_VAR 0 3
79874: PUSH
79875: LD_VAR 0 1
79879: PPUSH
79880: LD_VAR 0 5
79884: PPUSH
79885: CALL_OW 77
79889: ST_TO_ADDR
// end ;
79890: LD_VAR 0 3
79894: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79895: LD_INT 0
79897: PPUSH
79898: PPUSH
// task := GetTaskList ( mech ) ;
79899: LD_ADDR_VAR 0 4
79903: PUSH
79904: LD_VAR 0 1
79908: PPUSH
79909: CALL_OW 437
79913: ST_TO_ADDR
// if not task then
79914: LD_VAR 0 4
79918: NOT
79919: IFFALSE 79923
// exit ;
79921: GO 79965
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79923: LD_ADDR_VAR 0 3
79927: PUSH
79928: LD_VAR 0 4
79932: PUSH
79933: LD_INT 1
79935: ARRAY
79936: PUSH
79937: LD_INT 1
79939: ARRAY
79940: PUSH
79941: LD_STRING r
79943: EQUAL
79944: PUSH
79945: LD_VAR 0 4
79949: PUSH
79950: LD_INT 1
79952: ARRAY
79953: PUSH
79954: LD_INT 4
79956: ARRAY
79957: PUSH
79958: LD_VAR 0 2
79962: EQUAL
79963: AND
79964: ST_TO_ADDR
// end ;
79965: LD_VAR 0 3
79969: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79970: LD_INT 0
79972: PPUSH
// SetDir ( unit , d ) ;
79973: LD_VAR 0 1
79977: PPUSH
79978: LD_VAR 0 4
79982: PPUSH
79983: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79987: LD_VAR 0 1
79991: PPUSH
79992: LD_VAR 0 2
79996: PPUSH
79997: LD_VAR 0 3
80001: PPUSH
80002: LD_VAR 0 5
80006: PPUSH
80007: CALL_OW 48
// end ;
80011: LD_VAR 0 6
80015: RET
// export function ToNaturalNumber ( number ) ; begin
80016: LD_INT 0
80018: PPUSH
// result := number div 1 ;
80019: LD_ADDR_VAR 0 2
80023: PUSH
80024: LD_VAR 0 1
80028: PUSH
80029: LD_INT 1
80031: DIV
80032: ST_TO_ADDR
// if number < 0 then
80033: LD_VAR 0 1
80037: PUSH
80038: LD_INT 0
80040: LESS
80041: IFFALSE 80051
// result := 0 ;
80043: LD_ADDR_VAR 0 2
80047: PUSH
80048: LD_INT 0
80050: ST_TO_ADDR
// end ;
80051: LD_VAR 0 2
80055: RET
// export function SortByClass ( units , class ) ; var un ; begin
80056: LD_INT 0
80058: PPUSH
80059: PPUSH
// if not units or not class then
80060: LD_VAR 0 1
80064: NOT
80065: PUSH
80066: LD_VAR 0 2
80070: NOT
80071: OR
80072: IFFALSE 80076
// exit ;
80074: GO 80171
// result := [ ] ;
80076: LD_ADDR_VAR 0 3
80080: PUSH
80081: EMPTY
80082: ST_TO_ADDR
// for un in units do
80083: LD_ADDR_VAR 0 4
80087: PUSH
80088: LD_VAR 0 1
80092: PUSH
80093: FOR_IN
80094: IFFALSE 80169
// if GetClass ( un ) = class then
80096: LD_VAR 0 4
80100: PPUSH
80101: CALL_OW 257
80105: PUSH
80106: LD_VAR 0 2
80110: EQUAL
80111: IFFALSE 80138
// result := Insert ( result , 1 , un ) else
80113: LD_ADDR_VAR 0 3
80117: PUSH
80118: LD_VAR 0 3
80122: PPUSH
80123: LD_INT 1
80125: PPUSH
80126: LD_VAR 0 4
80130: PPUSH
80131: CALL_OW 2
80135: ST_TO_ADDR
80136: GO 80167
// result := Replace ( result , result + 1 , un ) ;
80138: LD_ADDR_VAR 0 3
80142: PUSH
80143: LD_VAR 0 3
80147: PPUSH
80148: LD_VAR 0 3
80152: PUSH
80153: LD_INT 1
80155: PLUS
80156: PPUSH
80157: LD_VAR 0 4
80161: PPUSH
80162: CALL_OW 1
80166: ST_TO_ADDR
80167: GO 80093
80169: POP
80170: POP
// end ;
80171: LD_VAR 0 3
80175: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80176: LD_INT 0
80178: PPUSH
80179: PPUSH
80180: PPUSH
80181: PPUSH
80182: PPUSH
80183: PPUSH
80184: PPUSH
// result := [ ] ;
80185: LD_ADDR_VAR 0 4
80189: PUSH
80190: EMPTY
80191: ST_TO_ADDR
// if x - r < 0 then
80192: LD_VAR 0 1
80196: PUSH
80197: LD_VAR 0 3
80201: MINUS
80202: PUSH
80203: LD_INT 0
80205: LESS
80206: IFFALSE 80218
// min_x := 0 else
80208: LD_ADDR_VAR 0 8
80212: PUSH
80213: LD_INT 0
80215: ST_TO_ADDR
80216: GO 80234
// min_x := x - r ;
80218: LD_ADDR_VAR 0 8
80222: PUSH
80223: LD_VAR 0 1
80227: PUSH
80228: LD_VAR 0 3
80232: MINUS
80233: ST_TO_ADDR
// if y - r < 0 then
80234: LD_VAR 0 2
80238: PUSH
80239: LD_VAR 0 3
80243: MINUS
80244: PUSH
80245: LD_INT 0
80247: LESS
80248: IFFALSE 80260
// min_y := 0 else
80250: LD_ADDR_VAR 0 7
80254: PUSH
80255: LD_INT 0
80257: ST_TO_ADDR
80258: GO 80276
// min_y := y - r ;
80260: LD_ADDR_VAR 0 7
80264: PUSH
80265: LD_VAR 0 2
80269: PUSH
80270: LD_VAR 0 3
80274: MINUS
80275: ST_TO_ADDR
// max_x := x + r ;
80276: LD_ADDR_VAR 0 9
80280: PUSH
80281: LD_VAR 0 1
80285: PUSH
80286: LD_VAR 0 3
80290: PLUS
80291: ST_TO_ADDR
// max_y := y + r ;
80292: LD_ADDR_VAR 0 10
80296: PUSH
80297: LD_VAR 0 2
80301: PUSH
80302: LD_VAR 0 3
80306: PLUS
80307: ST_TO_ADDR
// for _x = min_x to max_x do
80308: LD_ADDR_VAR 0 5
80312: PUSH
80313: DOUBLE
80314: LD_VAR 0 8
80318: DEC
80319: ST_TO_ADDR
80320: LD_VAR 0 9
80324: PUSH
80325: FOR_TO
80326: IFFALSE 80427
// for _y = min_y to max_y do
80328: LD_ADDR_VAR 0 6
80332: PUSH
80333: DOUBLE
80334: LD_VAR 0 7
80338: DEC
80339: ST_TO_ADDR
80340: LD_VAR 0 10
80344: PUSH
80345: FOR_TO
80346: IFFALSE 80423
// begin if not ValidHex ( _x , _y ) then
80348: LD_VAR 0 5
80352: PPUSH
80353: LD_VAR 0 6
80357: PPUSH
80358: CALL_OW 488
80362: NOT
80363: IFFALSE 80367
// continue ;
80365: GO 80345
// if GetResourceTypeXY ( _x , _y ) then
80367: LD_VAR 0 5
80371: PPUSH
80372: LD_VAR 0 6
80376: PPUSH
80377: CALL_OW 283
80381: IFFALSE 80421
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80383: LD_ADDR_VAR 0 4
80387: PUSH
80388: LD_VAR 0 4
80392: PPUSH
80393: LD_VAR 0 4
80397: PUSH
80398: LD_INT 1
80400: PLUS
80401: PPUSH
80402: LD_VAR 0 5
80406: PUSH
80407: LD_VAR 0 6
80411: PUSH
80412: EMPTY
80413: LIST
80414: LIST
80415: PPUSH
80416: CALL_OW 1
80420: ST_TO_ADDR
// end ;
80421: GO 80345
80423: POP
80424: POP
80425: GO 80325
80427: POP
80428: POP
// end ;
80429: LD_VAR 0 4
80433: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80434: LD_INT 0
80436: PPUSH
80437: PPUSH
80438: PPUSH
80439: PPUSH
80440: PPUSH
80441: PPUSH
80442: PPUSH
80443: PPUSH
// if not units then
80444: LD_VAR 0 1
80448: NOT
80449: IFFALSE 80453
// exit ;
80451: GO 80977
// result := UnitFilter ( units , [ f_ok ] ) ;
80453: LD_ADDR_VAR 0 3
80457: PUSH
80458: LD_VAR 0 1
80462: PPUSH
80463: LD_INT 50
80465: PUSH
80466: EMPTY
80467: LIST
80468: PPUSH
80469: CALL_OW 72
80473: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80474: LD_ADDR_VAR 0 8
80478: PUSH
80479: LD_VAR 0 1
80483: PUSH
80484: LD_INT 1
80486: ARRAY
80487: PPUSH
80488: CALL_OW 255
80492: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80493: LD_ADDR_VAR 0 10
80497: PUSH
80498: LD_INT 29
80500: PUSH
80501: LD_INT 91
80503: PUSH
80504: LD_INT 49
80506: PUSH
80507: EMPTY
80508: LIST
80509: LIST
80510: LIST
80511: ST_TO_ADDR
// if not result then
80512: LD_VAR 0 3
80516: NOT
80517: IFFALSE 80521
// exit ;
80519: GO 80977
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80521: LD_ADDR_VAR 0 5
80525: PUSH
80526: LD_INT 81
80528: PUSH
80529: LD_VAR 0 8
80533: PUSH
80534: EMPTY
80535: LIST
80536: LIST
80537: PPUSH
80538: CALL_OW 69
80542: ST_TO_ADDR
// for i in result do
80543: LD_ADDR_VAR 0 4
80547: PUSH
80548: LD_VAR 0 3
80552: PUSH
80553: FOR_IN
80554: IFFALSE 80975
// begin tag := GetTag ( i ) + 1 ;
80556: LD_ADDR_VAR 0 9
80560: PUSH
80561: LD_VAR 0 4
80565: PPUSH
80566: CALL_OW 110
80570: PUSH
80571: LD_INT 1
80573: PLUS
80574: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80575: LD_ADDR_VAR 0 7
80579: PUSH
80580: LD_VAR 0 4
80584: PPUSH
80585: CALL_OW 250
80589: PPUSH
80590: LD_VAR 0 4
80594: PPUSH
80595: CALL_OW 251
80599: PPUSH
80600: LD_INT 6
80602: PPUSH
80603: CALL 80176 0 3
80607: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80608: LD_VAR 0 4
80612: PPUSH
80613: CALL_OW 247
80617: PUSH
80618: LD_INT 2
80620: EQUAL
80621: PUSH
80622: LD_VAR 0 7
80626: AND
80627: PUSH
80628: LD_VAR 0 4
80632: PPUSH
80633: CALL_OW 264
80637: PUSH
80638: LD_VAR 0 10
80642: IN
80643: NOT
80644: AND
80645: IFFALSE 80684
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80647: LD_VAR 0 4
80651: PPUSH
80652: LD_VAR 0 7
80656: PUSH
80657: LD_INT 1
80659: ARRAY
80660: PUSH
80661: LD_INT 1
80663: ARRAY
80664: PPUSH
80665: LD_VAR 0 7
80669: PUSH
80670: LD_INT 1
80672: ARRAY
80673: PUSH
80674: LD_INT 2
80676: ARRAY
80677: PPUSH
80678: CALL_OW 116
80682: GO 80973
// if path > tag then
80684: LD_VAR 0 2
80688: PUSH
80689: LD_VAR 0 9
80693: GREATER
80694: IFFALSE 80902
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80696: LD_ADDR_VAR 0 6
80700: PUSH
80701: LD_VAR 0 5
80705: PPUSH
80706: LD_INT 91
80708: PUSH
80709: LD_VAR 0 4
80713: PUSH
80714: LD_INT 8
80716: PUSH
80717: EMPTY
80718: LIST
80719: LIST
80720: LIST
80721: PPUSH
80722: CALL_OW 72
80726: ST_TO_ADDR
// if nearEnemy then
80727: LD_VAR 0 6
80731: IFFALSE 80800
// begin if GetWeapon ( i ) = ru_time_lapser then
80733: LD_VAR 0 4
80737: PPUSH
80738: CALL_OW 264
80742: PUSH
80743: LD_INT 49
80745: EQUAL
80746: IFFALSE 80774
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80748: LD_VAR 0 4
80752: PPUSH
80753: LD_VAR 0 6
80757: PPUSH
80758: LD_VAR 0 4
80762: PPUSH
80763: CALL_OW 74
80767: PPUSH
80768: CALL_OW 112
80772: GO 80798
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80774: LD_VAR 0 4
80778: PPUSH
80779: LD_VAR 0 6
80783: PPUSH
80784: LD_VAR 0 4
80788: PPUSH
80789: CALL_OW 74
80793: PPUSH
80794: CALL 82048 0 2
// end else
80798: GO 80900
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80800: LD_VAR 0 4
80804: PPUSH
80805: LD_VAR 0 2
80809: PUSH
80810: LD_VAR 0 9
80814: ARRAY
80815: PUSH
80816: LD_INT 1
80818: ARRAY
80819: PPUSH
80820: LD_VAR 0 2
80824: PUSH
80825: LD_VAR 0 9
80829: ARRAY
80830: PUSH
80831: LD_INT 2
80833: ARRAY
80834: PPUSH
80835: CALL_OW 297
80839: PUSH
80840: LD_INT 6
80842: GREATER
80843: IFFALSE 80886
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80845: LD_VAR 0 4
80849: PPUSH
80850: LD_VAR 0 2
80854: PUSH
80855: LD_VAR 0 9
80859: ARRAY
80860: PUSH
80861: LD_INT 1
80863: ARRAY
80864: PPUSH
80865: LD_VAR 0 2
80869: PUSH
80870: LD_VAR 0 9
80874: ARRAY
80875: PUSH
80876: LD_INT 2
80878: ARRAY
80879: PPUSH
80880: CALL_OW 114
80884: GO 80900
// SetTag ( i , tag ) ;
80886: LD_VAR 0 4
80890: PPUSH
80891: LD_VAR 0 9
80895: PPUSH
80896: CALL_OW 109
// end else
80900: GO 80973
// if enemy then
80902: LD_VAR 0 5
80906: IFFALSE 80973
// begin if GetWeapon ( i ) = ru_time_lapser then
80908: LD_VAR 0 4
80912: PPUSH
80913: CALL_OW 264
80917: PUSH
80918: LD_INT 49
80920: EQUAL
80921: IFFALSE 80949
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80923: LD_VAR 0 4
80927: PPUSH
80928: LD_VAR 0 5
80932: PPUSH
80933: LD_VAR 0 4
80937: PPUSH
80938: CALL_OW 74
80942: PPUSH
80943: CALL_OW 112
80947: GO 80973
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80949: LD_VAR 0 4
80953: PPUSH
80954: LD_VAR 0 5
80958: PPUSH
80959: LD_VAR 0 4
80963: PPUSH
80964: CALL_OW 74
80968: PPUSH
80969: CALL 82048 0 2
// end ; end ;
80973: GO 80553
80975: POP
80976: POP
// end ;
80977: LD_VAR 0 3
80981: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80982: LD_INT 0
80984: PPUSH
80985: PPUSH
80986: PPUSH
// if not unit or IsInUnit ( unit ) then
80987: LD_VAR 0 1
80991: NOT
80992: PUSH
80993: LD_VAR 0 1
80997: PPUSH
80998: CALL_OW 310
81002: OR
81003: IFFALSE 81007
// exit ;
81005: GO 81098
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81007: LD_ADDR_VAR 0 4
81011: PUSH
81012: LD_VAR 0 1
81016: PPUSH
81017: CALL_OW 250
81021: PPUSH
81022: LD_VAR 0 2
81026: PPUSH
81027: LD_INT 1
81029: PPUSH
81030: CALL_OW 272
81034: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81035: LD_ADDR_VAR 0 5
81039: PUSH
81040: LD_VAR 0 1
81044: PPUSH
81045: CALL_OW 251
81049: PPUSH
81050: LD_VAR 0 2
81054: PPUSH
81055: LD_INT 1
81057: PPUSH
81058: CALL_OW 273
81062: ST_TO_ADDR
// if ValidHex ( x , y ) then
81063: LD_VAR 0 4
81067: PPUSH
81068: LD_VAR 0 5
81072: PPUSH
81073: CALL_OW 488
81077: IFFALSE 81098
// ComTurnXY ( unit , x , y ) ;
81079: LD_VAR 0 1
81083: PPUSH
81084: LD_VAR 0 4
81088: PPUSH
81089: LD_VAR 0 5
81093: PPUSH
81094: CALL_OW 118
// end ;
81098: LD_VAR 0 3
81102: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81103: LD_INT 0
81105: PPUSH
81106: PPUSH
// result := false ;
81107: LD_ADDR_VAR 0 3
81111: PUSH
81112: LD_INT 0
81114: ST_TO_ADDR
// if not units then
81115: LD_VAR 0 2
81119: NOT
81120: IFFALSE 81124
// exit ;
81122: GO 81169
// for i in units do
81124: LD_ADDR_VAR 0 4
81128: PUSH
81129: LD_VAR 0 2
81133: PUSH
81134: FOR_IN
81135: IFFALSE 81167
// if See ( side , i ) then
81137: LD_VAR 0 1
81141: PPUSH
81142: LD_VAR 0 4
81146: PPUSH
81147: CALL_OW 292
81151: IFFALSE 81165
// begin result := true ;
81153: LD_ADDR_VAR 0 3
81157: PUSH
81158: LD_INT 1
81160: ST_TO_ADDR
// exit ;
81161: POP
81162: POP
81163: GO 81169
// end ;
81165: GO 81134
81167: POP
81168: POP
// end ;
81169: LD_VAR 0 3
81173: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81174: LD_INT 0
81176: PPUSH
81177: PPUSH
81178: PPUSH
81179: PPUSH
// if not unit or not points then
81180: LD_VAR 0 1
81184: NOT
81185: PUSH
81186: LD_VAR 0 2
81190: NOT
81191: OR
81192: IFFALSE 81196
// exit ;
81194: GO 81286
// dist := 99999 ;
81196: LD_ADDR_VAR 0 5
81200: PUSH
81201: LD_INT 99999
81203: ST_TO_ADDR
// for i in points do
81204: LD_ADDR_VAR 0 4
81208: PUSH
81209: LD_VAR 0 2
81213: PUSH
81214: FOR_IN
81215: IFFALSE 81284
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81217: LD_ADDR_VAR 0 6
81221: PUSH
81222: LD_VAR 0 1
81226: PPUSH
81227: LD_VAR 0 4
81231: PUSH
81232: LD_INT 1
81234: ARRAY
81235: PPUSH
81236: LD_VAR 0 4
81240: PUSH
81241: LD_INT 2
81243: ARRAY
81244: PPUSH
81245: CALL_OW 297
81249: ST_TO_ADDR
// if tmpDist < dist then
81250: LD_VAR 0 6
81254: PUSH
81255: LD_VAR 0 5
81259: LESS
81260: IFFALSE 81282
// begin result := i ;
81262: LD_ADDR_VAR 0 3
81266: PUSH
81267: LD_VAR 0 4
81271: ST_TO_ADDR
// dist := tmpDist ;
81272: LD_ADDR_VAR 0 5
81276: PUSH
81277: LD_VAR 0 6
81281: ST_TO_ADDR
// end ; end ;
81282: GO 81214
81284: POP
81285: POP
// end ;
81286: LD_VAR 0 3
81290: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
81291: LD_INT 0
81293: PPUSH
// uc_side := side ;
81294: LD_ADDR_OWVAR 20
81298: PUSH
81299: LD_VAR 0 1
81303: ST_TO_ADDR
// uc_nation := 3 ;
81304: LD_ADDR_OWVAR 21
81308: PUSH
81309: LD_INT 3
81311: ST_TO_ADDR
// vc_chassis := 25 ;
81312: LD_ADDR_OWVAR 37
81316: PUSH
81317: LD_INT 25
81319: ST_TO_ADDR
// vc_engine := engine_siberite ;
81320: LD_ADDR_OWVAR 39
81324: PUSH
81325: LD_INT 3
81327: ST_TO_ADDR
// vc_control := control_computer ;
81328: LD_ADDR_OWVAR 38
81332: PUSH
81333: LD_INT 3
81335: ST_TO_ADDR
// vc_weapon := 59 ;
81336: LD_ADDR_OWVAR 40
81340: PUSH
81341: LD_INT 59
81343: ST_TO_ADDR
// result := CreateVehicle ;
81344: LD_ADDR_VAR 0 5
81348: PUSH
81349: CALL_OW 45
81353: ST_TO_ADDR
// SetDir ( result , d ) ;
81354: LD_VAR 0 5
81358: PPUSH
81359: LD_VAR 0 4
81363: PPUSH
81364: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
81368: LD_VAR 0 5
81372: PPUSH
81373: LD_VAR 0 2
81377: PPUSH
81378: LD_VAR 0 3
81382: PPUSH
81383: LD_INT 0
81385: PPUSH
81386: CALL_OW 48
// end ;
81390: LD_VAR 0 5
81394: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81395: LD_INT 0
81397: PPUSH
81398: PPUSH
81399: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81400: LD_ADDR_VAR 0 2
81404: PUSH
81405: LD_INT 0
81407: PUSH
81408: LD_INT 0
81410: PUSH
81411: LD_INT 0
81413: PUSH
81414: LD_INT 0
81416: PUSH
81417: EMPTY
81418: LIST
81419: LIST
81420: LIST
81421: LIST
81422: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81423: LD_VAR 0 1
81427: NOT
81428: PUSH
81429: LD_VAR 0 1
81433: PPUSH
81434: CALL_OW 264
81438: PUSH
81439: LD_INT 12
81441: PUSH
81442: LD_INT 51
81444: PUSH
81445: LD_INT 32
81447: PUSH
81448: LD_INT 89
81450: PUSH
81451: EMPTY
81452: LIST
81453: LIST
81454: LIST
81455: LIST
81456: IN
81457: NOT
81458: OR
81459: IFFALSE 81463
// exit ;
81461: GO 81561
// for i := 1 to 3 do
81463: LD_ADDR_VAR 0 3
81467: PUSH
81468: DOUBLE
81469: LD_INT 1
81471: DEC
81472: ST_TO_ADDR
81473: LD_INT 3
81475: PUSH
81476: FOR_TO
81477: IFFALSE 81559
// begin tmp := GetCargo ( cargo , i ) ;
81479: LD_ADDR_VAR 0 4
81483: PUSH
81484: LD_VAR 0 1
81488: PPUSH
81489: LD_VAR 0 3
81493: PPUSH
81494: CALL_OW 289
81498: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81499: LD_ADDR_VAR 0 2
81503: PUSH
81504: LD_VAR 0 2
81508: PPUSH
81509: LD_VAR 0 3
81513: PPUSH
81514: LD_VAR 0 4
81518: PPUSH
81519: CALL_OW 1
81523: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81524: LD_ADDR_VAR 0 2
81528: PUSH
81529: LD_VAR 0 2
81533: PPUSH
81534: LD_INT 4
81536: PPUSH
81537: LD_VAR 0 2
81541: PUSH
81542: LD_INT 4
81544: ARRAY
81545: PUSH
81546: LD_VAR 0 4
81550: PLUS
81551: PPUSH
81552: CALL_OW 1
81556: ST_TO_ADDR
// end ;
81557: GO 81476
81559: POP
81560: POP
// end ;
81561: LD_VAR 0 2
81565: RET
// export function Length ( array ) ; begin
81566: LD_INT 0
81568: PPUSH
// result := array + 0 ;
81569: LD_ADDR_VAR 0 2
81573: PUSH
81574: LD_VAR 0 1
81578: PUSH
81579: LD_INT 0
81581: PLUS
81582: ST_TO_ADDR
// end ;
81583: LD_VAR 0 2
81587: RET
// export function PrepareArray ( array ) ; begin
81588: LD_INT 0
81590: PPUSH
// result := array diff 0 ;
81591: LD_ADDR_VAR 0 2
81595: PUSH
81596: LD_VAR 0 1
81600: PUSH
81601: LD_INT 0
81603: DIFF
81604: ST_TO_ADDR
// if not result [ 1 ] then
81605: LD_VAR 0 2
81609: PUSH
81610: LD_INT 1
81612: ARRAY
81613: NOT
81614: IFFALSE 81634
// result := Delete ( result , 1 ) ;
81616: LD_ADDR_VAR 0 2
81620: PUSH
81621: LD_VAR 0 2
81625: PPUSH
81626: LD_INT 1
81628: PPUSH
81629: CALL_OW 3
81633: ST_TO_ADDR
// end ;
81634: LD_VAR 0 2
81638: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81639: LD_INT 0
81641: PPUSH
81642: PPUSH
81643: PPUSH
81644: PPUSH
// sibRocketRange := 25 ;
81645: LD_ADDR_VAR 0 6
81649: PUSH
81650: LD_INT 25
81652: ST_TO_ADDR
// result := false ;
81653: LD_ADDR_VAR 0 4
81657: PUSH
81658: LD_INT 0
81660: ST_TO_ADDR
// for i := 0 to 5 do
81661: LD_ADDR_VAR 0 5
81665: PUSH
81666: DOUBLE
81667: LD_INT 0
81669: DEC
81670: ST_TO_ADDR
81671: LD_INT 5
81673: PUSH
81674: FOR_TO
81675: IFFALSE 81742
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81677: LD_VAR 0 1
81681: PPUSH
81682: LD_VAR 0 5
81686: PPUSH
81687: LD_VAR 0 6
81691: PPUSH
81692: CALL_OW 272
81696: PPUSH
81697: LD_VAR 0 2
81701: PPUSH
81702: LD_VAR 0 5
81706: PPUSH
81707: LD_VAR 0 6
81711: PPUSH
81712: CALL_OW 273
81716: PPUSH
81717: LD_VAR 0 3
81721: PPUSH
81722: CALL_OW 309
81726: IFFALSE 81740
// begin result := true ;
81728: LD_ADDR_VAR 0 4
81732: PUSH
81733: LD_INT 1
81735: ST_TO_ADDR
// exit ;
81736: POP
81737: POP
81738: GO 81744
// end ;
81740: GO 81674
81742: POP
81743: POP
// end ;
81744: LD_VAR 0 4
81748: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
81749: LD_INT 0
81751: PPUSH
81752: PPUSH
81753: PPUSH
// if btype = b_depot then
81754: LD_VAR 0 2
81758: PUSH
81759: LD_INT 0
81761: EQUAL
81762: IFFALSE 81774
// begin result := true ;
81764: LD_ADDR_VAR 0 3
81768: PUSH
81769: LD_INT 1
81771: ST_TO_ADDR
// exit ;
81772: GO 81890
// end ; pom := GetBase ( depot ) ;
81774: LD_ADDR_VAR 0 4
81778: PUSH
81779: LD_VAR 0 1
81783: PPUSH
81784: CALL_OW 274
81788: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
81789: LD_ADDR_VAR 0 5
81793: PUSH
81794: LD_VAR 0 2
81798: PPUSH
81799: LD_VAR 0 1
81803: PPUSH
81804: CALL_OW 248
81808: PPUSH
81809: CALL_OW 450
81813: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
81814: LD_ADDR_VAR 0 3
81818: PUSH
81819: LD_VAR 0 4
81823: PPUSH
81824: LD_INT 1
81826: PPUSH
81827: CALL_OW 275
81831: PUSH
81832: LD_VAR 0 5
81836: PUSH
81837: LD_INT 1
81839: ARRAY
81840: GREATEREQUAL
81841: PUSH
81842: LD_VAR 0 4
81846: PPUSH
81847: LD_INT 2
81849: PPUSH
81850: CALL_OW 275
81854: PUSH
81855: LD_VAR 0 5
81859: PUSH
81860: LD_INT 2
81862: ARRAY
81863: GREATEREQUAL
81864: AND
81865: PUSH
81866: LD_VAR 0 4
81870: PPUSH
81871: LD_INT 3
81873: PPUSH
81874: CALL_OW 275
81878: PUSH
81879: LD_VAR 0 5
81883: PUSH
81884: LD_INT 3
81886: ARRAY
81887: GREATEREQUAL
81888: AND
81889: ST_TO_ADDR
// end ;
81890: LD_VAR 0 3
81894: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81895: LD_INT 0
81897: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81898: LD_VAR 0 1
81902: PPUSH
81903: LD_VAR 0 2
81907: PPUSH
81908: LD_INT 0
81910: PPUSH
81911: LD_INT 0
81913: PPUSH
81914: LD_INT 1
81916: PPUSH
81917: LD_INT 0
81919: PPUSH
81920: CALL_OW 587
// end ;
81924: LD_VAR 0 3
81928: RET
// export function CenterOnNow ( unit ) ; begin
81929: LD_INT 0
81931: PPUSH
// result := IsInUnit ( unit ) ;
81932: LD_ADDR_VAR 0 2
81936: PUSH
81937: LD_VAR 0 1
81941: PPUSH
81942: CALL_OW 310
81946: ST_TO_ADDR
// if not result then
81947: LD_VAR 0 2
81951: NOT
81952: IFFALSE 81964
// result := unit ;
81954: LD_ADDR_VAR 0 2
81958: PUSH
81959: LD_VAR 0 1
81963: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81964: LD_VAR 0 1
81968: PPUSH
81969: CALL_OW 87
// end ;
81973: LD_VAR 0 2
81977: RET
// export function ComMoveHex ( unit , hex ) ; begin
81978: LD_INT 0
81980: PPUSH
// if not hex then
81981: LD_VAR 0 2
81985: NOT
81986: IFFALSE 81990
// exit ;
81988: GO 82043
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81990: LD_VAR 0 2
81994: PUSH
81995: LD_INT 1
81997: ARRAY
81998: PPUSH
81999: LD_VAR 0 2
82003: PUSH
82004: LD_INT 2
82006: ARRAY
82007: PPUSH
82008: CALL_OW 428
82012: IFFALSE 82016
// exit ;
82014: GO 82043
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82016: LD_VAR 0 1
82020: PPUSH
82021: LD_VAR 0 2
82025: PUSH
82026: LD_INT 1
82028: ARRAY
82029: PPUSH
82030: LD_VAR 0 2
82034: PUSH
82035: LD_INT 2
82037: ARRAY
82038: PPUSH
82039: CALL_OW 111
// end ;
82043: LD_VAR 0 3
82047: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82048: LD_INT 0
82050: PPUSH
82051: PPUSH
82052: PPUSH
// if not unit or not enemy then
82053: LD_VAR 0 1
82057: NOT
82058: PUSH
82059: LD_VAR 0 2
82063: NOT
82064: OR
82065: IFFALSE 82069
// exit ;
82067: GO 82193
// x := GetX ( enemy ) ;
82069: LD_ADDR_VAR 0 4
82073: PUSH
82074: LD_VAR 0 2
82078: PPUSH
82079: CALL_OW 250
82083: ST_TO_ADDR
// y := GetY ( enemy ) ;
82084: LD_ADDR_VAR 0 5
82088: PUSH
82089: LD_VAR 0 2
82093: PPUSH
82094: CALL_OW 251
82098: ST_TO_ADDR
// if ValidHex ( x , y ) then
82099: LD_VAR 0 4
82103: PPUSH
82104: LD_VAR 0 5
82108: PPUSH
82109: CALL_OW 488
82113: IFFALSE 82193
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82115: LD_VAR 0 2
82119: PPUSH
82120: CALL_OW 247
82124: PUSH
82125: LD_INT 3
82127: PUSH
82128: LD_INT 2
82130: PUSH
82131: EMPTY
82132: LIST
82133: LIST
82134: IN
82135: PUSH
82136: LD_VAR 0 1
82140: PPUSH
82141: CALL_OW 255
82145: PPUSH
82146: LD_VAR 0 2
82150: PPUSH
82151: CALL_OW 292
82155: OR
82156: IFFALSE 82174
// ComAttackUnit ( unit , enemy ) else
82158: LD_VAR 0 1
82162: PPUSH
82163: LD_VAR 0 2
82167: PPUSH
82168: CALL_OW 115
82172: GO 82193
// ComAgressiveMove ( unit , x , y ) ;
82174: LD_VAR 0 1
82178: PPUSH
82179: LD_VAR 0 4
82183: PPUSH
82184: LD_VAR 0 5
82188: PPUSH
82189: CALL_OW 114
// end ;
82193: LD_VAR 0 3
82197: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82198: LD_INT 0
82200: PPUSH
82201: PPUSH
82202: PPUSH
// list := AreaToList ( area , 0 ) ;
82203: LD_ADDR_VAR 0 5
82207: PUSH
82208: LD_VAR 0 1
82212: PPUSH
82213: LD_INT 0
82215: PPUSH
82216: CALL_OW 517
82220: ST_TO_ADDR
// if not list then
82221: LD_VAR 0 5
82225: NOT
82226: IFFALSE 82230
// exit ;
82228: GO 82360
// if all then
82230: LD_VAR 0 2
82234: IFFALSE 82322
// begin for i := 1 to list [ 1 ] do
82236: LD_ADDR_VAR 0 4
82240: PUSH
82241: DOUBLE
82242: LD_INT 1
82244: DEC
82245: ST_TO_ADDR
82246: LD_VAR 0 5
82250: PUSH
82251: LD_INT 1
82253: ARRAY
82254: PUSH
82255: FOR_TO
82256: IFFALSE 82318
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82258: LD_ADDR_VAR 0 3
82262: PUSH
82263: LD_VAR 0 3
82267: PPUSH
82268: LD_VAR 0 3
82272: PUSH
82273: LD_INT 1
82275: PLUS
82276: PPUSH
82277: LD_VAR 0 5
82281: PUSH
82282: LD_INT 1
82284: ARRAY
82285: PUSH
82286: LD_VAR 0 4
82290: ARRAY
82291: PUSH
82292: LD_VAR 0 5
82296: PUSH
82297: LD_INT 2
82299: ARRAY
82300: PUSH
82301: LD_VAR 0 4
82305: ARRAY
82306: PUSH
82307: EMPTY
82308: LIST
82309: LIST
82310: PPUSH
82311: CALL_OW 1
82315: ST_TO_ADDR
82316: GO 82255
82318: POP
82319: POP
// exit ;
82320: GO 82360
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
82322: LD_ADDR_VAR 0 3
82326: PUSH
82327: LD_VAR 0 5
82331: PUSH
82332: LD_INT 1
82334: ARRAY
82335: PUSH
82336: LD_INT 1
82338: ARRAY
82339: PUSH
82340: LD_VAR 0 5
82344: PUSH
82345: LD_INT 2
82347: ARRAY
82348: PUSH
82349: LD_INT 1
82351: ARRAY
82352: PUSH
82353: EMPTY
82354: LIST
82355: LIST
82356: PUSH
82357: EMPTY
82358: LIST
82359: ST_TO_ADDR
// end ;
82360: LD_VAR 0 3
82364: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
82365: LD_INT 0
82367: PPUSH
82368: PPUSH
// list := AreaToList ( area , 0 ) ;
82369: LD_ADDR_VAR 0 4
82373: PUSH
82374: LD_VAR 0 1
82378: PPUSH
82379: LD_INT 0
82381: PPUSH
82382: CALL_OW 517
82386: ST_TO_ADDR
// if not list then
82387: LD_VAR 0 4
82391: NOT
82392: IFFALSE 82396
// exit ;
82394: GO 82437
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
82396: LD_ADDR_VAR 0 3
82400: PUSH
82401: LD_VAR 0 4
82405: PUSH
82406: LD_INT 1
82408: ARRAY
82409: PUSH
82410: LD_INT 1
82412: ARRAY
82413: PUSH
82414: LD_VAR 0 4
82418: PUSH
82419: LD_INT 2
82421: ARRAY
82422: PUSH
82423: LD_INT 1
82425: ARRAY
82426: PUSH
82427: LD_VAR 0 2
82431: PUSH
82432: EMPTY
82433: LIST
82434: LIST
82435: LIST
82436: ST_TO_ADDR
// end ;
82437: LD_VAR 0 3
82441: RET
// export function First ( array ) ; begin
82442: LD_INT 0
82444: PPUSH
// if not array then
82445: LD_VAR 0 1
82449: NOT
82450: IFFALSE 82454
// exit ;
82452: GO 82468
// result := array [ 1 ] ;
82454: LD_ADDR_VAR 0 2
82458: PUSH
82459: LD_VAR 0 1
82463: PUSH
82464: LD_INT 1
82466: ARRAY
82467: ST_TO_ADDR
// end ;
82468: LD_VAR 0 2
82472: RET
// export function Last ( array ) ; begin
82473: LD_INT 0
82475: PPUSH
// if not array then
82476: LD_VAR 0 1
82480: NOT
82481: IFFALSE 82485
// exit ;
82483: GO 82501
// result := array [ array ] ;
82485: LD_ADDR_VAR 0 2
82489: PUSH
82490: LD_VAR 0 1
82494: PUSH
82495: LD_VAR 0 1
82499: ARRAY
82500: ST_TO_ADDR
// end ;
82501: LD_VAR 0 2
82505: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
82506: LD_INT 0
82508: PPUSH
82509: PPUSH
// result := [ ] ;
82510: LD_ADDR_VAR 0 5
82514: PUSH
82515: EMPTY
82516: ST_TO_ADDR
// if not array then
82517: LD_VAR 0 1
82521: NOT
82522: IFFALSE 82526
// exit ;
82524: GO 82638
// for i := 1 to array do
82526: LD_ADDR_VAR 0 6
82530: PUSH
82531: DOUBLE
82532: LD_INT 1
82534: DEC
82535: ST_TO_ADDR
82536: LD_VAR 0 1
82540: PUSH
82541: FOR_TO
82542: IFFALSE 82636
// if array [ i ] [ index ] = value then
82544: LD_VAR 0 1
82548: PUSH
82549: LD_VAR 0 6
82553: ARRAY
82554: PUSH
82555: LD_VAR 0 2
82559: ARRAY
82560: PUSH
82561: LD_VAR 0 3
82565: EQUAL
82566: IFFALSE 82634
// begin if indexColumn then
82568: LD_VAR 0 4
82572: IFFALSE 82608
// result := Join ( result , array [ i ] [ indexColumn ] ) else
82574: LD_ADDR_VAR 0 5
82578: PUSH
82579: LD_VAR 0 5
82583: PPUSH
82584: LD_VAR 0 1
82588: PUSH
82589: LD_VAR 0 6
82593: ARRAY
82594: PUSH
82595: LD_VAR 0 4
82599: ARRAY
82600: PPUSH
82601: CALL 77830 0 2
82605: ST_TO_ADDR
82606: GO 82634
// result := Join ( result , array [ i ] ) ;
82608: LD_ADDR_VAR 0 5
82612: PUSH
82613: LD_VAR 0 5
82617: PPUSH
82618: LD_VAR 0 1
82622: PUSH
82623: LD_VAR 0 6
82627: ARRAY
82628: PPUSH
82629: CALL 77830 0 2
82633: ST_TO_ADDR
// end ;
82634: GO 82541
82636: POP
82637: POP
// end ;
82638: LD_VAR 0 5
82642: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
82643: LD_INT 0
82645: PPUSH
// if not vehicles or not parkingPoint then
82646: LD_VAR 0 1
82650: NOT
82651: PUSH
82652: LD_VAR 0 2
82656: NOT
82657: OR
82658: IFFALSE 82662
// exit ;
82660: GO 82760
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
82662: LD_ADDR_VAR 0 1
82666: PUSH
82667: LD_VAR 0 1
82671: PPUSH
82672: LD_INT 50
82674: PUSH
82675: EMPTY
82676: LIST
82677: PUSH
82678: LD_INT 3
82680: PUSH
82681: LD_INT 92
82683: PUSH
82684: LD_VAR 0 2
82688: PUSH
82689: LD_INT 1
82691: ARRAY
82692: PUSH
82693: LD_VAR 0 2
82697: PUSH
82698: LD_INT 2
82700: ARRAY
82701: PUSH
82702: LD_INT 8
82704: PUSH
82705: EMPTY
82706: LIST
82707: LIST
82708: LIST
82709: LIST
82710: PUSH
82711: EMPTY
82712: LIST
82713: LIST
82714: PUSH
82715: EMPTY
82716: LIST
82717: LIST
82718: PPUSH
82719: CALL_OW 72
82723: ST_TO_ADDR
// if not vehicles then
82724: LD_VAR 0 1
82728: NOT
82729: IFFALSE 82733
// exit ;
82731: GO 82760
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
82733: LD_VAR 0 1
82737: PPUSH
82738: LD_VAR 0 2
82742: PUSH
82743: LD_INT 1
82745: ARRAY
82746: PPUSH
82747: LD_VAR 0 2
82751: PUSH
82752: LD_INT 2
82754: ARRAY
82755: PPUSH
82756: CALL_OW 111
// end ;
82760: LD_VAR 0 3
82764: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
82765: LD_INT 0
82767: PPUSH
82768: PPUSH
82769: PPUSH
// if not side or not area then
82770: LD_VAR 0 1
82774: NOT
82775: PUSH
82776: LD_VAR 0 2
82780: NOT
82781: OR
82782: IFFALSE 82786
// exit ;
82784: GO 82905
// tmp := AreaToList ( area , 0 ) ;
82786: LD_ADDR_VAR 0 5
82790: PUSH
82791: LD_VAR 0 2
82795: PPUSH
82796: LD_INT 0
82798: PPUSH
82799: CALL_OW 517
82803: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
82804: LD_ADDR_VAR 0 4
82808: PUSH
82809: DOUBLE
82810: LD_INT 1
82812: DEC
82813: ST_TO_ADDR
82814: LD_VAR 0 5
82818: PUSH
82819: LD_INT 1
82821: ARRAY
82822: PUSH
82823: FOR_TO
82824: IFFALSE 82903
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
82826: LD_VAR 0 5
82830: PUSH
82831: LD_INT 1
82833: ARRAY
82834: PUSH
82835: LD_VAR 0 4
82839: ARRAY
82840: PPUSH
82841: LD_VAR 0 5
82845: PUSH
82846: LD_INT 2
82848: ARRAY
82849: PUSH
82850: LD_VAR 0 4
82854: ARRAY
82855: PPUSH
82856: CALL_OW 351
82860: IFFALSE 82901
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
82862: LD_VAR 0 5
82866: PUSH
82867: LD_INT 1
82869: ARRAY
82870: PUSH
82871: LD_VAR 0 4
82875: ARRAY
82876: PPUSH
82877: LD_VAR 0 5
82881: PUSH
82882: LD_INT 2
82884: ARRAY
82885: PUSH
82886: LD_VAR 0 4
82890: ARRAY
82891: PPUSH
82892: LD_VAR 0 1
82896: PPUSH
82897: CALL_OW 244
// end ;
82901: GO 82823
82903: POP
82904: POP
// end ; end_of_file
82905: LD_VAR 0 3
82909: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82910: LD_VAR 0 1
82914: PUSH
82915: LD_INT 200
82917: DOUBLE
82918: GREATEREQUAL
82919: IFFALSE 82927
82921: LD_INT 299
82923: DOUBLE
82924: LESSEQUAL
82925: IFTRUE 82929
82927: GO 82961
82929: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82930: LD_VAR 0 1
82934: PPUSH
82935: LD_VAR 0 2
82939: PPUSH
82940: LD_VAR 0 3
82944: PPUSH
82945: LD_VAR 0 4
82949: PPUSH
82950: LD_VAR 0 5
82954: PPUSH
82955: CALL 35621 0 5
82959: GO 83038
82961: LD_INT 300
82963: DOUBLE
82964: GREATEREQUAL
82965: IFFALSE 82973
82967: LD_INT 399
82969: DOUBLE
82970: LESSEQUAL
82971: IFTRUE 82975
82973: GO 83037
82975: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82976: LD_VAR 0 1
82980: PPUSH
82981: LD_VAR 0 2
82985: PPUSH
82986: LD_VAR 0 3
82990: PPUSH
82991: LD_VAR 0 4
82995: PPUSH
82996: LD_VAR 0 5
83000: PPUSH
83001: LD_VAR 0 6
83005: PPUSH
83006: LD_VAR 0 7
83010: PPUSH
83011: LD_VAR 0 8
83015: PPUSH
83016: LD_VAR 0 9
83020: PPUSH
83021: LD_VAR 0 10
83025: PPUSH
83026: LD_VAR 0 11
83030: PPUSH
83031: CALL 31946 0 11
83035: GO 83038
83037: POP
// end ;
83038: PPOPN 11
83040: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83041: LD_VAR 0 1
83045: PPUSH
83046: LD_VAR 0 2
83050: PPUSH
83051: LD_VAR 0 3
83055: PPUSH
83056: LD_VAR 0 4
83060: PPUSH
83061: LD_VAR 0 5
83065: PPUSH
83066: CALL 35357 0 5
// end ; end_of_file
83070: PPOPN 5
83072: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83073: LD_VAR 0 1
83077: PPUSH
83078: LD_VAR 0 2
83082: PPUSH
83083: LD_VAR 0 3
83087: PPUSH
83088: LD_VAR 0 4
83092: PPUSH
83093: LD_VAR 0 5
83097: PPUSH
83098: LD_VAR 0 6
83102: PPUSH
83103: CALL 19598 0 6
// end ;
83107: PPOPN 6
83109: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83110: LD_INT 0
83112: PPUSH
// begin if not units then
83113: LD_VAR 0 1
83117: NOT
83118: IFFALSE 83122
// exit ;
83120: GO 83122
// end ;
83122: PPOPN 7
83124: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83125: CALL 19485 0 0
// end ;
83129: PPOPN 1
83131: END
