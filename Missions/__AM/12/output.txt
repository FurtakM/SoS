// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 49
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 50
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 51
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// PrepareNature ;
 222: CALL 15426 0 0
// PrepareDifficulty ;
 226: CALL 12529 0 0
// PrepareVehicles ;
 230: CALL 1741 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1315 0 4
// PrepareAmericanHeroes ;
 250: CALL 640 0 0
// PrepareRussianCommander ;
 254: CALL 3117 0 0
// PrepareWestBase ;
 258: CALL 3629 0 0
// PrepareEastBase ;
 262: CALL 3189 0 0
// PrepareOtherRussians ;
 266: CALL 3741 0 0
// end ;
 270: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 271: LD_EXP 48
 275: PUSH
 276: LD_INT 1
 278: EQUAL
 279: IFFALSE 585
 281: GO 283
 283: DISABLE
 284: LD_INT 0
 286: PPUSH
// begin enable ;
 287: ENABLE
// fogoff ( true ) ;
 288: LD_INT 1
 290: PPUSH
 291: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 295: LD_ADDR_VAR 0 1
 299: PUSH
 300: LD_INT 22
 302: PUSH
 303: LD_INT 1
 305: PUSH
 306: EMPTY
 307: LIST
 308: LIST
 309: PUSH
 310: LD_INT 21
 312: PUSH
 313: LD_INT 1
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PPUSH
 324: CALL_OW 69
 328: PUSH
 329: FOR_IN
 330: IFFALSE 346
// SetLives ( i , 1000 ) ;
 332: LD_VAR 0 1
 336: PPUSH
 337: LD_INT 1000
 339: PPUSH
 340: CALL_OW 234
 344: GO 329
 346: POP
 347: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 348: LD_ADDR_VAR 0 1
 352: PUSH
 353: LD_INT 22
 355: PUSH
 356: LD_INT 1
 358: PUSH
 359: EMPTY
 360: LIST
 361: LIST
 362: PUSH
 363: LD_INT 2
 365: PUSH
 366: LD_INT 30
 368: PUSH
 369: LD_INT 0
 371: PUSH
 372: EMPTY
 373: LIST
 374: LIST
 375: PUSH
 376: LD_INT 30
 378: PUSH
 379: LD_INT 1
 381: PUSH
 382: EMPTY
 383: LIST
 384: LIST
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: LIST
 390: PUSH
 391: EMPTY
 392: LIST
 393: LIST
 394: PPUSH
 395: CALL_OW 69
 399: PUSH
 400: FOR_IN
 401: IFFALSE 425
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 403: LD_VAR 0 1
 407: PPUSH
 408: CALL_OW 274
 412: PPUSH
 413: LD_INT 1
 415: PPUSH
 416: LD_INT 9999
 418: PPUSH
 419: CALL_OW 277
 423: GO 400
 425: POP
 426: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 427: LD_ADDR_VAR 0 1
 431: PUSH
 432: LD_INT 22
 434: PUSH
 435: LD_INT 1
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PUSH
 442: LD_INT 2
 444: PUSH
 445: LD_INT 30
 447: PUSH
 448: LD_INT 0
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PUSH
 455: LD_INT 30
 457: PUSH
 458: LD_INT 1
 460: PUSH
 461: EMPTY
 462: LIST
 463: LIST
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PPUSH
 474: CALL_OW 69
 478: PUSH
 479: FOR_IN
 480: IFFALSE 504
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 482: LD_VAR 0 1
 486: PPUSH
 487: CALL_OW 274
 491: PPUSH
 492: LD_INT 2
 494: PPUSH
 495: LD_INT 9999
 497: PPUSH
 498: CALL_OW 277
 502: GO 479
 504: POP
 505: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 506: LD_ADDR_VAR 0 1
 510: PUSH
 511: LD_INT 22
 513: PUSH
 514: LD_INT 1
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: LD_INT 2
 523: PUSH
 524: LD_INT 30
 526: PUSH
 527: LD_INT 0
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 30
 536: PUSH
 537: LD_INT 1
 539: PUSH
 540: EMPTY
 541: LIST
 542: LIST
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: LIST
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PPUSH
 553: CALL_OW 69
 557: PUSH
 558: FOR_IN
 559: IFFALSE 583
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 561: LD_VAR 0 1
 565: PPUSH
 566: CALL_OW 274
 570: PPUSH
 571: LD_INT 3
 573: PPUSH
 574: LD_INT 9999
 576: PPUSH
 577: CALL_OW 277
 581: GO 558
 583: POP
 584: POP
// end ;
 585: PPOPN 1
 587: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 588: LD_INT 25
 590: PPUSH
 591: LD_INT 22
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PPUSH
 601: CALL_OW 70
 605: IFFALSE 618
 607: GO 609
 609: DISABLE
// westPathUsed := true ;
 610: LD_ADDR_EXP 49
 614: PUSH
 615: LD_INT 1
 617: ST_TO_ADDR
 618: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 619: LD_EXP 50
 623: PUSH
 624: LD_INT 3
 626: GREATEREQUAL
 627: IFFALSE 639
 629: GO 631
 631: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 632: LD_STRING ACH_LASER
 634: PPUSH
 635: CALL_OW 543
 639: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 640: LD_INT 0
 642: PPUSH
 643: PPUSH
 644: PPUSH
// uc_side = 1 ;
 645: LD_ADDR_OWVAR 20
 649: PUSH
 650: LD_INT 1
 652: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 653: LD_ADDR_EXP 14
 657: PUSH
 658: LD_STRING 11c_others
 660: PPUSH
 661: CALL_OW 31
 665: PUSH
 666: LD_STRING 11_others
 668: PPUSH
 669: CALL_OW 31
 673: UNION
 674: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 675: LD_ADDR_EXP 1
 679: PUSH
 680: LD_STRING 11_JMM
 682: PPUSH
 683: LD_INT 1
 685: PPUSH
 686: CALL 12246 0 2
 690: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 691: LD_EXP 1
 695: PPUSH
 696: LD_INT 1
 698: PPUSH
 699: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 703: LD_EXP 1
 707: PPUSH
 708: LD_INT 22
 710: PUSH
 711: LD_INT 1
 713: PUSH
 714: EMPTY
 715: LIST
 716: LIST
 717: PUSH
 718: LD_INT 21
 720: PUSH
 721: LD_INT 2
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PUSH
 728: LD_INT 58
 730: PUSH
 731: EMPTY
 732: LIST
 733: PUSH
 734: EMPTY
 735: LIST
 736: LIST
 737: LIST
 738: PPUSH
 739: CALL_OW 69
 743: PUSH
 744: LD_INT 1
 746: ARRAY
 747: PPUSH
 748: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 752: LD_STRING 11_Lisa
 754: PPUSH
 755: CALL_OW 28
 759: PUSH
 760: LD_INT 1
 762: EQUAL
 763: IFFALSE 810
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 765: LD_ADDR_EXP 2
 769: PUSH
 770: LD_STRING 11_Lisa
 772: PPUSH
 773: LD_INT 1
 775: PPUSH
 776: CALL 12246 0 2
 780: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 781: LD_EXP 2
 785: PPUSH
 786: LD_INT 1
 788: PPUSH
 789: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 793: LD_EXP 2
 797: PPUSH
 798: LD_INT 4
 800: PPUSH
 801: LD_INT 0
 803: PPUSH
 804: CALL_OW 49
// end else
 808: GO 826
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 810: LD_INT 4
 812: PPUSH
 813: LD_INT 0
 815: PPUSH
 816: LD_INT 1
 818: PPUSH
 819: LD_INT 0
 821: PPUSH
 822: CALL 1315 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 826: LD_STRING 11_Donaldson
 828: PPUSH
 829: CALL_OW 28
 833: PUSH
 834: LD_INT 1
 836: EQUAL
 837: IFFALSE 884
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 839: LD_ADDR_EXP 3
 843: PUSH
 844: LD_STRING 11_Donaldson
 846: PPUSH
 847: LD_INT 1
 849: PPUSH
 850: CALL 12246 0 2
 854: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 855: LD_EXP 3
 859: PPUSH
 860: LD_INT 1
 862: PPUSH
 863: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 867: LD_EXP 3
 871: PPUSH
 872: LD_INT 4
 874: PPUSH
 875: LD_INT 0
 877: PPUSH
 878: CALL_OW 49
// end else
 882: GO 900
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 884: LD_INT 4
 886: PPUSH
 887: LD_INT 0
 889: PPUSH
 890: LD_INT 1
 892: PPUSH
 893: LD_INT 0
 895: PPUSH
 896: CALL 1315 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 900: LD_STRING 11_Cyrus
 902: PPUSH
 903: CALL_OW 28
 907: PUSH
 908: LD_INT 1
 910: EQUAL
 911: IFFALSE 958
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 913: LD_ADDR_EXP 5
 917: PUSH
 918: LD_STRING 11_Cyrus
 920: PPUSH
 921: LD_INT 1
 923: PPUSH
 924: CALL 12246 0 2
 928: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 929: LD_EXP 5
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 4
 948: PPUSH
 949: LD_INT 0
 951: PPUSH
 952: CALL_OW 49
// end else
 956: GO 974
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: LD_INT 1
 966: PPUSH
 967: LD_INT 0
 969: PPUSH
 970: CALL 1315 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 974: LD_STRING 11_Denis
 976: PPUSH
 977: CALL_OW 28
 981: PUSH
 982: LD_INT 1
 984: EQUAL
 985: IFFALSE 1032
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 987: LD_ADDR_EXP 6
 991: PUSH
 992: LD_STRING 11_Denis
 994: PPUSH
 995: LD_INT 1
 997: PPUSH
 998: CALL 12246 0 2
1002: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1003: LD_EXP 6
1007: PPUSH
1008: LD_INT 4
1010: PPUSH
1011: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1015: LD_EXP 6
1019: PPUSH
1020: LD_INT 4
1022: PPUSH
1023: LD_INT 0
1025: PPUSH
1026: CALL_OW 49
// end else
1030: GO 1048
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1032: LD_INT 4
1034: PPUSH
1035: LD_INT 0
1037: PPUSH
1038: LD_INT 1
1040: PPUSH
1041: LD_INT 0
1043: PPUSH
1044: CALL 1315 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1048: LD_STRING 11_Frank
1050: PPUSH
1051: CALL_OW 28
1055: PUSH
1056: LD_INT 1
1058: EQUAL
1059: IFFALSE 1106
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
1061: LD_ADDR_EXP 12
1065: PUSH
1066: LD_STRING 11_Frank
1068: PPUSH
1069: LD_INT 1
1071: PPUSH
1072: CALL 12246 0 2
1076: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1077: LD_EXP 12
1081: PPUSH
1082: LD_INT 1
1084: PPUSH
1085: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1089: LD_EXP 12
1093: PPUSH
1094: LD_INT 4
1096: PPUSH
1097: LD_INT 0
1099: PPUSH
1100: CALL_OW 49
// end else
1104: GO 1122
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1106: LD_INT 4
1108: PPUSH
1109: LD_INT 0
1111: PPUSH
1112: LD_INT 1
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL 1315 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1122: LD_STRING 11_Cornell
1124: PPUSH
1125: CALL_OW 28
1129: PUSH
1130: LD_INT 1
1132: EQUAL
1133: IFFALSE 1180
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1135: LD_ADDR_EXP 10
1139: PUSH
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: LD_INT 1
1145: PPUSH
1146: CALL 12246 0 2
1150: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1151: LD_EXP 10
1155: PPUSH
1156: LD_INT 1
1158: PPUSH
1159: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1163: LD_EXP 10
1167: PPUSH
1168: LD_INT 4
1170: PPUSH
1171: LD_INT 0
1173: PPUSH
1174: CALL_OW 49
// end else
1178: GO 1196
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1180: LD_INT 4
1182: PPUSH
1183: LD_INT 0
1185: PPUSH
1186: LD_INT 1
1188: PPUSH
1189: LD_INT 0
1191: PPUSH
1192: CALL 1315 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1196: LD_ADDR_VAR 0 2
1200: PUSH
1201: LD_EXP 14
1205: PPUSH
1206: LD_INT 26
1208: PUSH
1209: LD_INT 1
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PPUSH
1216: CALL_OW 72
1220: ST_TO_ADDR
// if not tmp then
1221: LD_VAR 0 2
1225: NOT
1226: IFFALSE 1255
// begin PrepareSoldier ( sex_male , 8 ) ;
1228: LD_INT 1
1230: PPUSH
1231: LD_INT 8
1233: PPUSH
1234: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1238: CALL_OW 44
1242: PPUSH
1243: LD_INT 4
1245: PPUSH
1246: LD_INT 0
1248: PPUSH
1249: CALL_OW 49
// end else
1253: GO 1294
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1255: LD_VAR 0 2
1259: PUSH
1260: LD_INT 1
1262: ARRAY
1263: PPUSH
1264: LD_INT 4
1266: PPUSH
1267: LD_INT 0
1269: PPUSH
1270: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1274: LD_ADDR_EXP 14
1278: PUSH
1279: LD_EXP 14
1283: PUSH
1284: LD_VAR 0 2
1288: PUSH
1289: LD_INT 1
1291: ARRAY
1292: DIFF
1293: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ) ;
1294: LD_ADDR_EXP 22
1298: PUSH
1299: LD_STRING Powell
1301: PPUSH
1302: LD_INT 0
1304: PPUSH
1305: CALL 12246 0 2
1309: ST_TO_ADDR
// end ;
1310: LD_VAR 0 1
1314: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1315: LD_INT 0
1317: PPUSH
1318: PPUSH
1319: PPUSH
1320: PPUSH
1321: PPUSH
// if mech = 1 then
1322: LD_VAR 0 4
1326: PUSH
1327: LD_INT 1
1329: EQUAL
1330: IFFALSE 1567
// begin if others11 > 0 then
1332: LD_EXP 14
1336: PUSH
1337: LD_INT 0
1339: GREATER
1340: IFFALSE 1507
// begin for i := 1 to others11 - 1 do
1342: LD_ADDR_VAR 0 6
1346: PUSH
1347: DOUBLE
1348: LD_INT 1
1350: DEC
1351: ST_TO_ADDR
1352: LD_EXP 14
1356: PUSH
1357: LD_INT 1
1359: MINUS
1360: PUSH
1361: FOR_TO
1362: IFFALSE 1444
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1364: LD_EXP 14
1368: PUSH
1369: LD_VAR 0 6
1373: ARRAY
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: CALL_OW 259
1382: PUSH
1383: LD_EXP 14
1387: PUSH
1388: LD_VAR 0 6
1392: PUSH
1393: LD_INT 1
1395: PLUS
1396: ARRAY
1397: PPUSH
1398: LD_INT 3
1400: PPUSH
1401: CALL_OW 259
1405: LESS
1406: IFFALSE 1442
// begin mecha = others11 [ i + 1 ] ;
1408: LD_ADDR_VAR 0 9
1412: PUSH
1413: LD_EXP 14
1417: PUSH
1418: LD_VAR 0 6
1422: PUSH
1423: LD_INT 1
1425: PLUS
1426: ARRAY
1427: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1428: LD_VAR 0 9
1432: PPUSH
1433: LD_INT 3
1435: PPUSH
1436: CALL_OW 336
// break ;
1440: GO 1444
// end ; end ;
1442: GO 1361
1444: POP
1445: POP
// if spawnMode = 1 then
1446: LD_VAR 0 3
1450: PUSH
1451: LD_INT 1
1453: EQUAL
1454: IFFALSE 1475
// PlaceUnitArea ( mecha , area , false ) else
1456: LD_VAR 0 9
1460: PPUSH
1461: LD_VAR 0 1
1465: PPUSH
1466: LD_INT 0
1468: PPUSH
1469: CALL_OW 49
1473: GO 1489
// PlaceHumanInUnit ( mecha , veh ) ;
1475: LD_VAR 0 9
1479: PPUSH
1480: LD_VAR 0 2
1484: PPUSH
1485: CALL_OW 52
// others11 = others11 diff mecha ;
1489: LD_ADDR_EXP 14
1493: PUSH
1494: LD_EXP 14
1498: PUSH
1499: LD_VAR 0 9
1503: DIFF
1504: ST_TO_ADDR
// end else
1505: GO 1565
// begin hc_name =  ;
1507: LD_ADDR_OWVAR 26
1511: PUSH
1512: LD_STRING 
1514: ST_TO_ADDR
// hc_gallery =  ;
1515: LD_ADDR_OWVAR 33
1519: PUSH
1520: LD_STRING 
1522: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1523: LD_INT 0
1525: PPUSH
1526: LD_INT 7
1528: PPUSH
1529: LD_INT 9
1531: PPUSH
1532: CALL_OW 12
1536: PPUSH
1537: CALL_OW 383
// un = CreateHuman ;
1541: LD_ADDR_VAR 0 7
1545: PUSH
1546: CALL_OW 44
1550: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1551: LD_VAR 0 7
1555: PPUSH
1556: LD_VAR 0 2
1560: PPUSH
1561: CALL_OW 52
// end ; end else
1565: GO 1736
// begin if others11 > 0 then
1567: LD_EXP 14
1571: PUSH
1572: LD_INT 0
1574: GREATER
1575: IFFALSE 1648
// begin if spawnMode = 1 then
1577: LD_VAR 0 3
1581: PUSH
1582: LD_INT 1
1584: EQUAL
1585: IFFALSE 1610
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1587: LD_EXP 14
1591: PUSH
1592: LD_INT 1
1594: ARRAY
1595: PPUSH
1596: LD_VAR 0 1
1600: PPUSH
1601: LD_INT 0
1603: PPUSH
1604: CALL_OW 49
1608: GO 1628
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1610: LD_EXP 14
1614: PUSH
1615: LD_INT 1
1617: ARRAY
1618: PPUSH
1619: LD_VAR 0 2
1623: PPUSH
1624: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1628: LD_ADDR_EXP 14
1632: PUSH
1633: LD_EXP 14
1637: PPUSH
1638: LD_INT 1
1640: PPUSH
1641: CALL_OW 3
1645: ST_TO_ADDR
// end else
1646: GO 1736
// begin hc_name =  ;
1648: LD_ADDR_OWVAR 26
1652: PUSH
1653: LD_STRING 
1655: ST_TO_ADDR
// hc_gallery =  ;
1656: LD_ADDR_OWVAR 33
1660: PUSH
1661: LD_STRING 
1663: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1664: LD_INT 0
1666: PPUSH
1667: LD_INT 1
1669: PUSH
1670: LD_INT 2
1672: PUSH
1673: LD_INT 3
1675: PUSH
1676: LD_INT 4
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: LIST
1683: LIST
1684: PUSH
1685: LD_INT 1
1687: PPUSH
1688: LD_INT 4
1690: PPUSH
1691: CALL_OW 12
1695: ARRAY
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: LD_INT 9
1702: PPUSH
1703: CALL_OW 12
1707: PPUSH
1708: CALL_OW 380
// un = CreateHuman ;
1712: LD_ADDR_VAR 0 7
1716: PUSH
1717: CALL_OW 44
1721: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1722: LD_VAR 0 7
1726: PPUSH
1727: LD_VAR 0 2
1731: PPUSH
1732: CALL_OW 52
// end ; end ; end ;
1736: LD_VAR 0 5
1740: RET
// export function PrepareVehicles ; var veh ; begin
1741: LD_INT 0
1743: PPUSH
1744: PPUSH
// uc_side = 1 ;
1745: LD_ADDR_OWVAR 20
1749: PUSH
1750: LD_INT 1
1752: ST_TO_ADDR
// uc_nation = 1 ;
1753: LD_ADDR_OWVAR 21
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1761: LD_ADDR_OWVAR 37
1765: PUSH
1766: LD_INT 3
1768: ST_TO_ADDR
// vc_engine = 3 ;
1769: LD_ADDR_OWVAR 39
1773: PUSH
1774: LD_INT 3
1776: ST_TO_ADDR
// vc_control = 3 ;
1777: LD_ADDR_OWVAR 38
1781: PUSH
1782: LD_INT 3
1784: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1785: LD_ADDR_OWVAR 40
1789: PUSH
1790: LD_INT 4
1792: ST_TO_ADDR
// veh = CreateVehicle ;
1793: LD_ADDR_VAR 0 2
1797: PUSH
1798: CALL_OW 45
1802: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1803: LD_VAR 0 2
1807: PPUSH
1808: LD_INT 4
1810: PPUSH
1811: LD_INT 0
1813: PPUSH
1814: CALL_OW 49
// vc_weapon = us_double_gun ;
1818: LD_ADDR_OWVAR 40
1822: PUSH
1823: LD_INT 5
1825: ST_TO_ADDR
// vc_control = 1 ;
1826: LD_ADDR_OWVAR 38
1830: PUSH
1831: LD_INT 1
1833: ST_TO_ADDR
// veh = CreateVehicle ;
1834: LD_ADDR_VAR 0 2
1838: PUSH
1839: CALL_OW 45
1843: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1844: LD_VAR 0 2
1848: PPUSH
1849: LD_INT 4
1851: PPUSH
1852: LD_INT 0
1854: PPUSH
1855: CALL_OW 49
// vc_weapon = us_light_gun ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 3
1866: ST_TO_ADDR
// vc_control = 3 ;
1867: LD_ADDR_OWVAR 38
1871: PUSH
1872: LD_INT 3
1874: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1875: LD_ADDR_OWVAR 37
1879: PUSH
1880: LD_INT 2
1882: ST_TO_ADDR
// veh = CreateVehicle ;
1883: LD_ADDR_VAR 0 2
1887: PUSH
1888: CALL_OW 45
1892: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1893: LD_VAR 0 2
1897: PPUSH
1898: LD_INT 4
1900: PPUSH
1901: LD_INT 0
1903: PPUSH
1904: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1908: LD_ADDR_OWVAR 40
1912: PUSH
1913: LD_INT 4
1915: ST_TO_ADDR
// veh = CreateVehicle ;
1916: LD_ADDR_VAR 0 2
1920: PUSH
1921: CALL_OW 45
1925: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1926: LD_VAR 0 2
1930: PPUSH
1931: LD_INT 4
1933: PPUSH
1934: LD_INT 0
1936: PPUSH
1937: CALL_OW 49
// end ;
1941: LD_VAR 0 1
1945: RET
// export function PowellSupport1 ; var veh , un ; begin
1946: LD_INT 0
1948: PPUSH
1949: PPUSH
1950: PPUSH
// uc_side = 1 ;
1951: LD_ADDR_OWVAR 20
1955: PUSH
1956: LD_INT 1
1958: ST_TO_ADDR
// uc_nation = 1 ;
1959: LD_ADDR_OWVAR 21
1963: PUSH
1964: LD_INT 1
1966: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1967: LD_STRING 11_Brown
1969: PPUSH
1970: CALL_OW 28
1974: PUSH
1975: LD_INT 1
1977: EQUAL
1978: IFFALSE 2025
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1980: LD_ADDR_EXP 7
1984: PUSH
1985: LD_STRING 11_Brown
1987: PPUSH
1988: LD_INT 1
1990: PPUSH
1991: CALL 12246 0 2
1995: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1996: LD_EXP 7
2000: PPUSH
2001: LD_INT 2
2003: PPUSH
2004: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2008: LD_EXP 7
2012: PPUSH
2013: LD_INT 4
2015: PPUSH
2016: LD_INT 0
2018: PPUSH
2019: CALL_OW 49
// end else
2023: GO 2041
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2025: LD_INT 4
2027: PPUSH
2028: LD_INT 0
2030: PPUSH
2031: LD_INT 1
2033: PPUSH
2034: LD_INT 0
2036: PPUSH
2037: CALL 1315 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
2041: LD_STRING 11_Gary
2043: PPUSH
2044: CALL_OW 28
2048: PUSH
2049: LD_INT 1
2051: EQUAL
2052: IFFALSE 2099
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
2054: LD_ADDR_EXP 11
2058: PUSH
2059: LD_STRING 11_Gary
2061: PPUSH
2062: LD_INT 1
2064: PPUSH
2065: CALL 12246 0 2
2069: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2070: LD_EXP 11
2074: PPUSH
2075: LD_INT 2
2077: PPUSH
2078: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2082: LD_EXP 11
2086: PPUSH
2087: LD_INT 4
2089: PPUSH
2090: LD_INT 0
2092: PPUSH
2093: CALL_OW 49
// end else
2097: GO 2115
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2099: LD_INT 4
2101: PPUSH
2102: LD_INT 0
2104: PPUSH
2105: LD_INT 1
2107: PPUSH
2108: LD_INT 0
2110: PPUSH
2111: CALL 1315 0 4
// end ; vc_chassis = us_medium_tracked ;
2115: LD_ADDR_OWVAR 37
2119: PUSH
2120: LD_INT 3
2122: ST_TO_ADDR
// vc_engine = 3 ;
2123: LD_ADDR_OWVAR 39
2127: PUSH
2128: LD_INT 3
2130: ST_TO_ADDR
// vc_control = 1 ;
2131: LD_ADDR_OWVAR 38
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// vc_weapon = us_crane ;
2139: LD_ADDR_OWVAR 40
2143: PUSH
2144: LD_INT 13
2146: ST_TO_ADDR
// veh = CreateVehicle ;
2147: LD_ADDR_VAR 0 2
2151: PUSH
2152: CALL_OW 45
2156: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2157: LD_VAR 0 2
2161: PPUSH
2162: LD_INT 4
2164: PPUSH
2165: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2169: LD_VAR 0 2
2173: PPUSH
2174: LD_INT 4
2176: PPUSH
2177: LD_INT 0
2179: PPUSH
2180: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2184: LD_INT 4
2186: PPUSH
2187: LD_VAR 0 2
2191: PPUSH
2192: LD_INT 2
2194: PPUSH
2195: LD_INT 1
2197: PPUSH
2198: CALL 1315 0 4
// vc_weapon = 9 ;
2202: LD_ADDR_OWVAR 40
2206: PUSH
2207: LD_INT 9
2209: ST_TO_ADDR
// veh = CreateVehicle ;
2210: LD_ADDR_VAR 0 2
2214: PUSH
2215: CALL_OW 45
2219: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2220: LD_VAR 0 2
2224: PPUSH
2225: LD_INT 4
2227: PPUSH
2228: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2232: LD_VAR 0 2
2236: PPUSH
2237: LD_INT 4
2239: PPUSH
2240: LD_INT 0
2242: PPUSH
2243: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2247: LD_INT 4
2249: PPUSH
2250: LD_VAR 0 2
2254: PPUSH
2255: LD_INT 2
2257: PPUSH
2258: LD_INT 1
2260: PPUSH
2261: CALL 1315 0 4
// vc_control = 3 ;
2265: LD_ADDR_OWVAR 38
2269: PUSH
2270: LD_INT 3
2272: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2273: LD_ADDR_OWVAR 40
2277: PUSH
2278: LD_INT 12
2280: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2281: LD_ADDR_EXP 15
2285: PUSH
2286: CALL_OW 45
2290: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2291: LD_ADDR_EXP 16
2295: PUSH
2296: CALL_OW 45
2300: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2301: LD_EXP 15
2305: PPUSH
2306: LD_INT 4
2308: PPUSH
2309: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2313: LD_EXP 16
2317: PPUSH
2318: LD_INT 4
2320: PPUSH
2321: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2325: LD_EXP 15
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: LD_INT 0
2335: PPUSH
2336: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2340: LD_EXP 16
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: LD_INT 0
2350: PPUSH
2351: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2355: LD_EXP 15
2359: PPUSH
2360: LD_INT 3
2362: PPUSH
2363: LD_INT 100
2365: PPUSH
2366: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2370: LD_EXP 16
2374: PPUSH
2375: LD_INT 1
2377: PPUSH
2378: LD_INT 80
2380: PPUSH
2381: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2385: LD_EXP 16
2389: PPUSH
2390: LD_INT 3
2392: PPUSH
2393: LD_INT 20
2395: PPUSH
2396: CALL_OW 291
// end ;
2400: LD_VAR 0 1
2404: RET
// export function PowellSupport2 ; var veh , un ; begin
2405: LD_INT 0
2407: PPUSH
2408: PPUSH
2409: PPUSH
// uc_side = 1 ;
2410: LD_ADDR_OWVAR 20
2414: PUSH
2415: LD_INT 1
2417: ST_TO_ADDR
// uc_nation = 1 ;
2418: LD_ADDR_OWVAR 21
2422: PUSH
2423: LD_INT 1
2425: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2426: LD_ADDR_OWVAR 37
2430: PUSH
2431: LD_INT 2
2433: ST_TO_ADDR
// vc_engine = 3 ;
2434: LD_ADDR_OWVAR 39
2438: PUSH
2439: LD_INT 3
2441: ST_TO_ADDR
// vc_control = 3 ;
2442: LD_ADDR_OWVAR 38
2446: PUSH
2447: LD_INT 3
2449: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2450: LD_ADDR_OWVAR 40
2454: PUSH
2455: LD_INT 3
2457: ST_TO_ADDR
// veh = CreateVehicle ;
2458: LD_ADDR_VAR 0 2
2462: PUSH
2463: CALL_OW 45
2467: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2468: LD_VAR 0 2
2472: PPUSH
2473: LD_INT 4
2475: PPUSH
2476: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2480: LD_VAR 0 2
2484: PPUSH
2485: LD_INT 4
2487: PPUSH
2488: LD_INT 0
2490: PPUSH
2491: CALL_OW 49
// vc_control = 1 ;
2495: LD_ADDR_OWVAR 38
2499: PUSH
2500: LD_INT 1
2502: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2503: LD_ADDR_OWVAR 37
2507: PUSH
2508: LD_INT 2
2510: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 5
2518: ST_TO_ADDR
// veh = CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2556: LD_STRING 11_Bobby
2558: PPUSH
2559: CALL_OW 28
2563: PUSH
2564: LD_INT 1
2566: EQUAL
2567: IFFALSE 2613
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2569: LD_ADDR_EXP 4
2573: PUSH
2574: LD_STRING 11_Bobby
2576: PPUSH
2577: LD_INT 1
2579: PPUSH
2580: CALL 12246 0 2
2584: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2585: LD_EXP 4
2589: PPUSH
2590: LD_INT 3
2592: PPUSH
2593: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2597: LD_EXP 4
2601: PPUSH
2602: LD_VAR 0 2
2606: PPUSH
2607: CALL_OW 52
// end else
2611: GO 2631
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2613: LD_INT 0
2615: PPUSH
2616: LD_VAR 0 2
2620: PPUSH
2621: LD_INT 2
2623: PPUSH
2624: LD_INT 0
2626: PPUSH
2627: CALL 1315 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2631: LD_STRING 11_Houten
2633: PPUSH
2634: CALL_OW 28
2638: PUSH
2639: LD_INT 1
2641: EQUAL
2642: IFFALSE 2689
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2644: LD_ADDR_EXP 9
2648: PUSH
2649: LD_STRING 11_Houten
2651: PPUSH
2652: LD_INT 1
2654: PPUSH
2655: CALL 12246 0 2
2659: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2660: LD_EXP 9
2664: PPUSH
2665: LD_INT 1
2667: PPUSH
2668: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2672: LD_EXP 9
2676: PPUSH
2677: LD_INT 4
2679: PPUSH
2680: LD_INT 0
2682: PPUSH
2683: CALL_OW 49
// end else
2687: GO 2705
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2689: LD_INT 4
2691: PPUSH
2692: LD_INT 0
2694: PPUSH
2695: LD_INT 1
2697: PPUSH
2698: LD_INT 0
2700: PPUSH
2701: CALL 1315 0 4
// end ; vc_control = 3 ;
2705: LD_ADDR_OWVAR 38
2709: PUSH
2710: LD_INT 3
2712: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2713: LD_ADDR_OWVAR 40
2717: PUSH
2718: LD_INT 12
2720: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2721: LD_ADDR_EXP 17
2725: PUSH
2726: CALL_OW 45
2730: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2731: LD_EXP 17
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: CALL_OW 233
// amCargo4 = CreateVehicle ;
2743: LD_ADDR_EXP 18
2747: PUSH
2748: CALL_OW 45
2752: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2753: LD_EXP 18
2757: PPUSH
2758: LD_INT 4
2760: PPUSH
2761: CALL_OW 233
// amCargo5 = CreateVehicle ;
2765: LD_ADDR_EXP 19
2769: PUSH
2770: CALL_OW 45
2774: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2775: LD_EXP 19
2779: PPUSH
2780: LD_INT 4
2782: PPUSH
2783: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2787: LD_EXP 17
2791: PPUSH
2792: LD_INT 4
2794: PPUSH
2795: LD_INT 0
2797: PPUSH
2798: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2802: LD_EXP 18
2806: PPUSH
2807: LD_INT 4
2809: PPUSH
2810: LD_INT 0
2812: PPUSH
2813: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2817: LD_EXP 19
2821: PPUSH
2822: LD_INT 4
2824: PPUSH
2825: LD_INT 0
2827: PPUSH
2828: CALL_OW 49
// if kurtStatus > 0 then
2832: LD_EXP 26
2836: PUSH
2837: LD_INT 0
2839: GREATER
2840: IFFALSE 2889
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2842: LD_EXP 17
2846: PPUSH
2847: LD_INT 1
2849: PPUSH
2850: LD_INT 100
2852: PPUSH
2853: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2857: LD_EXP 18
2861: PPUSH
2862: LD_INT 1
2864: PPUSH
2865: LD_INT 100
2867: PPUSH
2868: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2872: LD_EXP 19
2876: PPUSH
2877: LD_INT 3
2879: PPUSH
2880: LD_INT 80
2882: PPUSH
2883: CALL_OW 291
// end else
2887: GO 2934
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2889: LD_EXP 17
2893: PPUSH
2894: LD_INT 1
2896: PPUSH
2897: LD_INT 100
2899: PPUSH
2900: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2904: LD_EXP 18
2908: PPUSH
2909: LD_INT 3
2911: PPUSH
2912: LD_INT 60
2914: PPUSH
2915: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2919: LD_EXP 19
2923: PPUSH
2924: LD_INT 3
2926: PPUSH
2927: LD_INT 100
2929: PPUSH
2930: CALL_OW 291
// end ; end ;
2934: LD_VAR 0 1
2938: RET
// export function PowellSupport3 ; var veh , un ; begin
2939: LD_INT 0
2941: PPUSH
2942: PPUSH
2943: PPUSH
// uc_side = 1 ;
2944: LD_ADDR_OWVAR 20
2948: PUSH
2949: LD_INT 1
2951: ST_TO_ADDR
// uc_nation = 1 ;
2952: LD_ADDR_OWVAR 21
2956: PUSH
2957: LD_INT 1
2959: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2960: LD_INT 4
2962: PPUSH
2963: LD_INT 0
2965: PPUSH
2966: LD_INT 1
2968: PPUSH
2969: LD_INT 0
2971: PPUSH
2972: CALL 1315 0 4
// vc_chassis = us_medium_wheeled ;
2976: LD_ADDR_OWVAR 37
2980: PUSH
2981: LD_INT 2
2983: ST_TO_ADDR
// vc_engine = 3 ;
2984: LD_ADDR_OWVAR 39
2988: PUSH
2989: LD_INT 3
2991: ST_TO_ADDR
// vc_control = 3 ;
2992: LD_ADDR_OWVAR 38
2996: PUSH
2997: LD_INT 3
2999: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3000: LD_ADDR_OWVAR 40
3004: PUSH
3005: LD_INT 12
3007: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3008: LD_ADDR_EXP 20
3012: PUSH
3013: CALL_OW 45
3017: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3018: LD_ADDR_EXP 21
3022: PUSH
3023: CALL_OW 45
3027: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3028: LD_EXP 20
3032: PPUSH
3033: LD_INT 4
3035: PPUSH
3036: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3040: LD_EXP 21
3044: PPUSH
3045: LD_INT 4
3047: PPUSH
3048: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3052: LD_EXP 20
3056: PPUSH
3057: LD_INT 4
3059: PPUSH
3060: LD_INT 0
3062: PPUSH
3063: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3067: LD_EXP 21
3071: PPUSH
3072: LD_INT 4
3074: PPUSH
3075: LD_INT 0
3077: PPUSH
3078: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3082: LD_EXP 20
3086: PPUSH
3087: LD_INT 1
3089: PPUSH
3090: LD_INT 100
3092: PPUSH
3093: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3097: LD_EXP 21
3101: PPUSH
3102: LD_INT 1
3104: PPUSH
3105: LD_INT 100
3107: PPUSH
3108: CALL_OW 291
// end ; end_of_file
3112: LD_VAR 0 1
3116: RET
// export function PrepareRussianCommander ; begin
3117: LD_INT 0
3119: PPUSH
// uc_side = 3 ;
3120: LD_ADDR_OWVAR 20
3124: PUSH
3125: LD_INT 3
3127: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
3128: LD_ADDR_EXP 23
3132: PUSH
3133: LD_STRING Davidov
3135: PPUSH
3136: LD_INT 0
3138: PPUSH
3139: CALL 12246 0 2
3143: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3144: LD_EXP 23
3148: PPUSH
3149: LD_INT 3
3151: PPUSH
3152: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3156: LD_ADDR_EXP 34
3160: PUSH
3161: LD_EXP 34
3165: PUSH
3166: LD_EXP 23
3170: ADD
3171: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3172: LD_EXP 34
3176: PPUSH
3177: LD_INT 4
3179: PPUSH
3180: CALL_OW 336
// end ;
3184: LD_VAR 0 1
3188: RET
// export function PrepareEastBase ; var i , un ; begin
3189: LD_INT 0
3191: PPUSH
3192: PPUSH
3193: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3194: LD_INT 3
3196: PPUSH
3197: LD_INT 3
3199: PPUSH
3200: LD_INT 121
3202: PPUSH
3203: LD_EXP 36
3207: PPUSH
3208: LD_EXP 37
3212: PPUSH
3213: CALL_OW 12
3217: PPUSH
3218: LD_INT 1
3220: PPUSH
3221: LD_INT 3
3223: PPUSH
3224: CALL 12960 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3228: LD_INT 3
3230: PPUSH
3231: LD_INT 3
3233: PPUSH
3234: LD_INT 121
3236: PPUSH
3237: LD_EXP 36
3241: PPUSH
3242: LD_EXP 37
3246: PPUSH
3247: CALL_OW 12
3251: PPUSH
3252: LD_INT 9
3254: PPUSH
3255: LD_INT 3
3257: PPUSH
3258: CALL 12960 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3262: LD_INT 3
3264: PPUSH
3265: LD_INT 3
3267: PPUSH
3268: LD_INT 4
3270: PPUSH
3271: LD_EXP 36
3275: PPUSH
3276: LD_EXP 37
3280: PPUSH
3281: CALL_OW 12
3285: PPUSH
3286: LD_INT 2
3288: PPUSH
3289: LD_INT 6
3291: PPUSH
3292: CALL 12960 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3296: LD_INT 3
3298: PPUSH
3299: LD_INT 3
3301: PPUSH
3302: LD_INT 112
3304: PPUSH
3305: LD_EXP 36
3309: PPUSH
3310: LD_EXP 37
3314: PPUSH
3315: CALL_OW 12
3319: PPUSH
3320: LD_INT 3
3322: PPUSH
3323: LD_INT 6
3325: PPUSH
3326: CALL 12960 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3330: LD_INT 3
3332: PPUSH
3333: LD_INT 3
3335: PPUSH
3336: LD_INT 47
3338: PPUSH
3339: LD_EXP 36
3343: PPUSH
3344: LD_EXP 37
3348: PPUSH
3349: CALL_OW 12
3353: PPUSH
3354: LD_INT 4
3356: PPUSH
3357: LD_INT 6
3359: PPUSH
3360: CALL 12960 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3364: LD_INT 3
3366: PPUSH
3367: LD_INT 3
3369: PPUSH
3370: LD_INT 129
3372: PPUSH
3373: LD_EXP 36
3377: PPUSH
3378: LD_EXP 37
3382: PPUSH
3383: CALL_OW 12
3387: PPUSH
3388: LD_INT 4
3390: PPUSH
3391: LD_INT 6
3393: PPUSH
3394: CALL 12960 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3398: LD_INT 3
3400: PPUSH
3401: LD_INT 3
3403: PPUSH
3404: LD_INT 135
3406: PPUSH
3407: LD_EXP 36
3411: PPUSH
3412: LD_EXP 37
3416: PPUSH
3417: CALL_OW 12
3421: PPUSH
3422: LD_INT 4
3424: PPUSH
3425: LD_INT 6
3427: PPUSH
3428: CALL 12960 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3432: LD_ADDR_VAR 0 2
3436: PUSH
3437: LD_INT 22
3439: PUSH
3440: LD_INT 3
3442: PUSH
3443: EMPTY
3444: LIST
3445: LIST
3446: PUSH
3447: LD_INT 30
3449: PUSH
3450: LD_INT 32
3452: PUSH
3453: EMPTY
3454: LIST
3455: LIST
3456: PUSH
3457: EMPTY
3458: LIST
3459: LIST
3460: PPUSH
3461: CALL_OW 69
3465: PUSH
3466: FOR_IN
3467: IFFALSE 3507
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3469: LD_INT 3
3471: PPUSH
3472: LD_INT 3
3474: PPUSH
3475: LD_VAR 0 2
3479: PPUSH
3480: LD_EXP 36
3484: PPUSH
3485: LD_EXP 37
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: LD_INT 1
3497: PPUSH
3498: LD_INT 1
3500: PPUSH
3501: CALL 12960 0 6
3505: GO 3466
3507: POP
3508: POP
// for i = 1 to 5 do
3509: LD_ADDR_VAR 0 2
3513: PUSH
3514: DOUBLE
3515: LD_INT 1
3517: DEC
3518: ST_TO_ADDR
3519: LD_INT 5
3521: PUSH
3522: FOR_TO
3523: IFFALSE 3622
// begin uc_side = 3 ;
3525: LD_ADDR_OWVAR 20
3529: PUSH
3530: LD_INT 3
3532: ST_TO_ADDR
// uc_nation = 3 ;
3533: LD_ADDR_OWVAR 21
3537: PUSH
3538: LD_INT 3
3540: ST_TO_ADDR
// hc_gallery =  ;
3541: LD_ADDR_OWVAR 33
3545: PUSH
3546: LD_STRING 
3548: ST_TO_ADDR
// hc_name =  ;
3549: LD_ADDR_OWVAR 26
3553: PUSH
3554: LD_STRING 
3556: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3557: LD_INT 0
3559: PPUSH
3560: LD_INT 4
3562: PPUSH
3563: LD_EXP 36
3567: PPUSH
3568: LD_EXP 37
3572: PPUSH
3573: CALL_OW 12
3577: PPUSH
3578: CALL_OW 380
// un = CreateHuman ;
3582: LD_ADDR_VAR 0 3
3586: PUSH
3587: CALL_OW 44
3591: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3592: LD_VAR 0 3
3596: PPUSH
3597: LD_INT 3
3599: PPUSH
3600: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3604: LD_ADDR_EXP 34
3608: PUSH
3609: LD_EXP 34
3613: PUSH
3614: LD_VAR 0 3
3618: ADD
3619: ST_TO_ADDR
// end ;
3620: GO 3522
3622: POP
3623: POP
// end ;
3624: LD_VAR 0 1
3628: RET
// export function PrepareWestBase ; var i , un ; begin
3629: LD_INT 0
3631: PPUSH
3632: PPUSH
3633: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3634: LD_INT 3
3636: PPUSH
3637: LD_INT 3
3639: PPUSH
3640: LD_INT 6
3642: PPUSH
3643: LD_EXP 36
3647: PPUSH
3648: LD_EXP 37
3652: PPUSH
3653: CALL_OW 12
3657: PPUSH
3658: LD_INT 2
3660: PPUSH
3661: LD_INT 3
3663: PPUSH
3664: CALL 12960 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3668: LD_INT 3
3670: PPUSH
3671: LD_INT 3
3673: PPUSH
3674: LD_INT 91
3676: PPUSH
3677: LD_EXP 36
3681: PPUSH
3682: LD_EXP 37
3686: PPUSH
3687: CALL_OW 12
3691: PPUSH
3692: LD_INT 4
3694: PPUSH
3695: LD_INT 3
3697: PPUSH
3698: CALL 12960 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3702: LD_INT 3
3704: PPUSH
3705: LD_INT 3
3707: PPUSH
3708: LD_INT 21
3710: PPUSH
3711: LD_EXP 36
3715: PPUSH
3716: LD_EXP 37
3720: PPUSH
3721: CALL_OW 12
3725: PPUSH
3726: LD_INT 3
3728: PPUSH
3729: LD_INT 6
3731: PPUSH
3732: CALL 12960 0 6
// end ;
3736: LD_VAR 0 1
3740: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3741: LD_INT 0
3743: PPUSH
3744: PPUSH
3745: PPUSH
3746: PPUSH
// uc_side = 3 ;
3747: LD_ADDR_OWVAR 20
3751: PUSH
3752: LD_INT 3
3754: ST_TO_ADDR
// uc_nation = 3 ;
3755: LD_ADDR_OWVAR 21
3759: PUSH
3760: LD_INT 3
3762: ST_TO_ADDR
// for i = 1 to 5 do
3763: LD_ADDR_VAR 0 2
3767: PUSH
3768: DOUBLE
3769: LD_INT 1
3771: DEC
3772: ST_TO_ADDR
3773: LD_INT 5
3775: PUSH
3776: FOR_TO
3777: IFFALSE 3847
// begin hc_gallery =  ;
3779: LD_ADDR_OWVAR 33
3783: PUSH
3784: LD_STRING 
3786: ST_TO_ADDR
// hc_name =  ;
3787: LD_ADDR_OWVAR 26
3791: PUSH
3792: LD_STRING 
3794: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3795: LD_INT 0
3797: PPUSH
3798: LD_INT 9
3800: PPUSH
3801: LD_EXP 36
3805: PPUSH
3806: LD_EXP 37
3810: PPUSH
3811: CALL_OW 12
3815: PPUSH
3816: CALL_OW 380
// un = CreateHuman ;
3820: LD_ADDR_VAR 0 3
3824: PUSH
3825: CALL_OW 44
3829: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3830: LD_VAR 0 3
3834: PPUSH
3835: LD_INT 8
3837: PPUSH
3838: LD_INT 0
3840: PPUSH
3841: CALL_OW 49
// end ;
3845: GO 3776
3847: POP
3848: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3849: LD_ADDR_VAR 0 2
3853: PUSH
3854: DOUBLE
3855: LD_INT 1
3857: DEC
3858: ST_TO_ADDR
3859: LD_INT 2
3861: PUSH
3862: LD_INT 3
3864: PUSH
3865: LD_INT 4
3867: PUSH
3868: EMPTY
3869: LIST
3870: LIST
3871: LIST
3872: PUSH
3873: LD_OWVAR 67
3877: ARRAY
3878: PUSH
3879: FOR_TO
3880: IFFALSE 3950
// begin hc_gallery =  ;
3882: LD_ADDR_OWVAR 33
3886: PUSH
3887: LD_STRING 
3889: ST_TO_ADDR
// hc_name =  ;
3890: LD_ADDR_OWVAR 26
3894: PUSH
3895: LD_STRING 
3897: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3898: LD_INT 0
3900: PPUSH
3901: LD_INT 4
3903: PPUSH
3904: LD_EXP 36
3908: PPUSH
3909: LD_EXP 37
3913: PPUSH
3914: CALL_OW 12
3918: PPUSH
3919: CALL_OW 380
// un = CreateHuman ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: CALL_OW 44
3932: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3933: LD_VAR 0 3
3937: PPUSH
3938: LD_INT 8
3940: PPUSH
3941: LD_INT 0
3943: PPUSH
3944: CALL_OW 49
// end ;
3948: GO 3879
3950: POP
3951: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3952: LD_ADDR_VAR 0 2
3956: PUSH
3957: DOUBLE
3958: LD_INT 1
3960: DEC
3961: ST_TO_ADDR
3962: LD_INT 3
3964: PUSH
3965: LD_INT 4
3967: PUSH
3968: LD_INT 5
3970: PUSH
3971: EMPTY
3972: LIST
3973: LIST
3974: LIST
3975: PUSH
3976: LD_OWVAR 67
3980: ARRAY
3981: PUSH
3982: FOR_TO
3983: IFFALSE 4179
// begin vc_engine = 3 ;
3985: LD_ADDR_OWVAR 39
3989: PUSH
3990: LD_INT 3
3992: ST_TO_ADDR
// vc_control = 1 ;
3993: LD_ADDR_OWVAR 38
3997: PUSH
3998: LD_INT 1
4000: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4001: LD_ADDR_OWVAR 40
4005: PUSH
4006: LD_INT 42
4008: PUSH
4009: LD_INT 43
4011: PUSH
4012: LD_INT 44
4014: PUSH
4015: LD_INT 45
4017: PUSH
4018: LD_INT 46
4020: PUSH
4021: EMPTY
4022: LIST
4023: LIST
4024: LIST
4025: LIST
4026: LIST
4027: PUSH
4028: LD_INT 1
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: CALL_OW 12
4038: ARRAY
4039: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4040: LD_OWVAR 40
4044: PUSH
4045: LD_INT 46
4047: EQUAL
4048: IFFALSE 4060
// vc_chassis = ru_heavy_tracked else
4050: LD_ADDR_OWVAR 37
4054: PUSH
4055: LD_INT 24
4057: ST_TO_ADDR
4058: GO 4087
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4060: LD_ADDR_OWVAR 37
4064: PUSH
4065: LD_INT 22
4067: PUSH
4068: LD_INT 21
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: PUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_INT 2
4080: PPUSH
4081: CALL_OW 12
4085: ARRAY
4086: ST_TO_ADDR
// veh = CreateVehicle ;
4087: LD_ADDR_VAR 0 4
4091: PUSH
4092: CALL_OW 45
4096: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_INT 3
4104: PPUSH
4105: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4109: LD_VAR 0 4
4113: PPUSH
4114: LD_INT 5
4116: PPUSH
4117: LD_INT 0
4119: PPUSH
4120: CALL_OW 49
// hc_gallery =  ;
4124: LD_ADDR_OWVAR 33
4128: PUSH
4129: LD_STRING 
4131: ST_TO_ADDR
// hc_name =  ;
4132: LD_ADDR_OWVAR 26
4136: PUSH
4137: LD_STRING 
4139: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4140: LD_INT 0
4142: PPUSH
4143: LD_INT 3
4145: PPUSH
4146: LD_INT 10
4148: PPUSH
4149: CALL_OW 380
// un = CreateHuman ;
4153: LD_ADDR_VAR 0 3
4157: PUSH
4158: CALL_OW 44
4162: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4163: LD_VAR 0 3
4167: PPUSH
4168: LD_VAR 0 4
4172: PPUSH
4173: CALL_OW 52
// end ;
4177: GO 3982
4179: POP
4180: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4181: LD_ADDR_VAR 0 2
4185: PUSH
4186: DOUBLE
4187: LD_INT 1
4189: DEC
4190: ST_TO_ADDR
4191: LD_INT 3
4193: PUSH
4194: LD_INT 4
4196: PUSH
4197: LD_INT 5
4199: PUSH
4200: EMPTY
4201: LIST
4202: LIST
4203: LIST
4204: PUSH
4205: LD_OWVAR 67
4209: ARRAY
4210: PUSH
4211: FOR_TO
4212: IFFALSE 4359
// begin vc_engine = 3 ;
4214: LD_ADDR_OWVAR 39
4218: PUSH
4219: LD_INT 3
4221: ST_TO_ADDR
// vc_control = 3 ;
4222: LD_ADDR_OWVAR 38
4226: PUSH
4227: LD_INT 3
4229: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4230: LD_ADDR_OWVAR 40
4234: PUSH
4235: LD_INT 42
4237: PUSH
4238: LD_INT 43
4240: PUSH
4241: LD_INT 44
4243: PUSH
4244: LD_INT 45
4246: PUSH
4247: LD_INT 46
4249: PUSH
4250: LD_INT 49
4252: PUSH
4253: EMPTY
4254: LIST
4255: LIST
4256: LIST
4257: LIST
4258: LIST
4259: LIST
4260: PUSH
4261: LD_INT 1
4263: PPUSH
4264: LD_INT 5
4266: PPUSH
4267: CALL_OW 12
4271: ARRAY
4272: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4273: LD_OWVAR 40
4277: PUSH
4278: LD_INT 46
4280: EQUAL
4281: IFFALSE 4293
// vc_chassis = ru_heavy_tracked else
4283: LD_ADDR_OWVAR 37
4287: PUSH
4288: LD_INT 24
4290: ST_TO_ADDR
4291: GO 4320
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4293: LD_ADDR_OWVAR 37
4297: PUSH
4298: LD_INT 22
4300: PUSH
4301: LD_INT 21
4303: PUSH
4304: EMPTY
4305: LIST
4306: LIST
4307: PUSH
4308: LD_INT 1
4310: PPUSH
4311: LD_INT 2
4313: PPUSH
4314: CALL_OW 12
4318: ARRAY
4319: ST_TO_ADDR
// veh = CreateVehicle ;
4320: LD_ADDR_VAR 0 4
4324: PUSH
4325: CALL_OW 45
4329: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4330: LD_VAR 0 4
4334: PPUSH
4335: LD_INT 3
4337: PPUSH
4338: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4342: LD_VAR 0 4
4346: PPUSH
4347: LD_INT 6
4349: PPUSH
4350: LD_INT 0
4352: PPUSH
4353: CALL_OW 49
// end ;
4357: GO 4211
4359: POP
4360: POP
// end ; end_of_file
4361: LD_VAR 0 1
4365: RET
// export function PrepareKurt ; begin
4366: LD_INT 0
4368: PPUSH
// uc_side = 8 ;
4369: LD_ADDR_OWVAR 20
4373: PUSH
4374: LD_INT 8
4376: ST_TO_ADDR
// uc_nation = 2 ;
4377: LD_ADDR_OWVAR 21
4381: PUSH
4382: LD_INT 2
4384: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4385: LD_ADDR_OWVAR 37
4389: PUSH
4390: LD_INT 13
4392: ST_TO_ADDR
// vc_engine = 1 ;
4393: LD_ADDR_OWVAR 39
4397: PUSH
4398: LD_INT 1
4400: ST_TO_ADDR
// vc_control = 1 ;
4401: LD_ADDR_OWVAR 38
4405: PUSH
4406: LD_INT 1
4408: ST_TO_ADDR
// vc_weapon = 24 ;
4409: LD_ADDR_OWVAR 40
4413: PUSH
4414: LD_INT 24
4416: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4417: LD_ADDR_EXP 25
4421: PUSH
4422: CALL_OW 45
4426: ST_TO_ADDR
// if kurtStatus > 0 then
4427: LD_EXP 26
4431: PUSH
4432: LD_INT 0
4434: GREATER
4435: IFFALSE 4484
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4437: LD_ADDR_EXP 24
4441: PUSH
4442: LD_STRING Kurt
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL 12246 0 2
4452: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4453: LD_EXP 25
4457: PPUSH
4458: LD_INT 4
4460: PPUSH
4461: LD_INT 0
4463: PPUSH
4464: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4468: LD_EXP 24
4472: PPUSH
4473: LD_EXP 25
4477: PPUSH
4478: CALL_OW 52
// end else
4482: GO 4561
// begin hc_name =  ;
4484: LD_ADDR_OWVAR 26
4488: PUSH
4489: LD_STRING 
4491: ST_TO_ADDR
// hc_gallery =  ;
4492: LD_ADDR_OWVAR 33
4496: PUSH
4497: LD_STRING 
4499: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4500: LD_INT 1
4502: PPUSH
4503: LD_INT 10
4505: PPUSH
4506: CALL_OW 381
// Kurt = CreateHuman ;
4510: LD_ADDR_EXP 24
4514: PUSH
4515: CALL_OW 44
4519: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4520: LD_EXP 25
4524: PPUSH
4525: LD_INT 4
4527: PPUSH
4528: LD_INT 0
4530: PPUSH
4531: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4535: LD_EXP 24
4539: PPUSH
4540: LD_EXP 25
4544: PPUSH
4545: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4549: LD_EXP 24
4553: PPUSH
4554: LD_STRING AltKurt
4556: PPUSH
4557: CALL_OW 38
// end ; end ;
4561: LD_VAR 0 1
4565: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4566: LD_INT 0
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
// for i = 1 to 3 do
4572: LD_ADDR_VAR 0 2
4576: PUSH
4577: DOUBLE
4578: LD_INT 1
4580: DEC
4581: ST_TO_ADDR
4582: LD_INT 3
4584: PUSH
4585: FOR_TO
4586: IFFALSE 4707
// begin uc_side = 1 ;
4588: LD_ADDR_OWVAR 20
4592: PUSH
4593: LD_INT 1
4595: ST_TO_ADDR
// uc_nation = 2 ;
4596: LD_ADDR_OWVAR 21
4600: PUSH
4601: LD_INT 2
4603: ST_TO_ADDR
// hc_gallery =  ;
4604: LD_ADDR_OWVAR 33
4608: PUSH
4609: LD_STRING 
4611: ST_TO_ADDR
// hc_name =  ;
4612: LD_ADDR_OWVAR 26
4616: PUSH
4617: LD_STRING 
4619: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4620: LD_EXP 26
4624: PUSH
4625: LD_INT 0
4627: EQUAL
4628: PUSH
4629: LD_EXP 26
4633: PUSH
4634: LD_INT 2
4636: EQUAL
4637: OR
4638: IFFALSE 4655
// PrepareHuman ( false , 1 , 6 ) else
4640: LD_INT 0
4642: PPUSH
4643: LD_INT 1
4645: PPUSH
4646: LD_INT 6
4648: PPUSH
4649: CALL_OW 380
4653: GO 4668
// PrepareHuman ( false , 1 , 8 ) ;
4655: LD_INT 0
4657: PPUSH
4658: LD_INT 1
4660: PPUSH
4661: LD_INT 8
4663: PPUSH
4664: CALL_OW 380
// un = CreateHuman ;
4668: LD_ADDR_VAR 0 3
4672: PUSH
4673: CALL_OW 44
4677: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4678: LD_VAR 0 3
4682: PPUSH
4683: LD_INT 4
4685: PPUSH
4686: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4690: LD_VAR 0 3
4694: PPUSH
4695: LD_INT 4
4697: PPUSH
4698: LD_INT 0
4700: PPUSH
4701: CALL_OW 49
// end ;
4705: GO 4585
4707: POP
4708: POP
// vc_chassis = 14 ;
4709: LD_ADDR_OWVAR 37
4713: PUSH
4714: LD_INT 14
4716: ST_TO_ADDR
// vc_engine = 3 ;
4717: LD_ADDR_OWVAR 39
4721: PUSH
4722: LD_INT 3
4724: ST_TO_ADDR
// vc_control = 1 ;
4725: LD_ADDR_OWVAR 38
4729: PUSH
4730: LD_INT 1
4732: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4733: LD_ADDR_OWVAR 40
4737: PUSH
4738: LD_INT 27
4740: PUSH
4741: LD_INT 26
4743: PUSH
4744: LD_INT 28
4746: PUSH
4747: EMPTY
4748: LIST
4749: LIST
4750: LIST
4751: PUSH
4752: LD_INT 1
4754: PPUSH
4755: LD_INT 3
4757: PPUSH
4758: CALL_OW 12
4762: ARRAY
4763: ST_TO_ADDR
// veh = CreateVehicle ;
4764: LD_ADDR_VAR 0 4
4768: PUSH
4769: CALL_OW 45
4773: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4774: LD_VAR 0 4
4778: PPUSH
4779: LD_INT 4
4781: PPUSH
4782: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4786: LD_VAR 0 4
4790: PPUSH
4791: LD_INT 4
4793: PPUSH
4794: LD_INT 0
4796: PPUSH
4797: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4801: LD_EXP 26
4805: PUSH
4806: LD_INT 0
4808: EQUAL
4809: PUSH
4810: LD_EXP 26
4814: PUSH
4815: LD_INT 2
4817: EQUAL
4818: OR
4819: IFFALSE 4836
// PrepareHuman ( false , 3 , 6 ) else
4821: LD_INT 0
4823: PPUSH
4824: LD_INT 3
4826: PPUSH
4827: LD_INT 6
4829: PPUSH
4830: CALL_OW 380
4834: GO 4849
// PrepareHuman ( false , 3 , 8 ) ;
4836: LD_INT 0
4838: PPUSH
4839: LD_INT 3
4841: PPUSH
4842: LD_INT 8
4844: PPUSH
4845: CALL_OW 380
// un = CreateHuman ;
4849: LD_ADDR_VAR 0 3
4853: PUSH
4854: CALL_OW 44
4858: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4859: LD_VAR 0 3
4863: PPUSH
4864: LD_VAR 0 4
4868: PPUSH
4869: CALL_OW 52
// vc_chassis = 14 ;
4873: LD_ADDR_OWVAR 37
4877: PUSH
4878: LD_INT 14
4880: ST_TO_ADDR
// vc_engine = 3 ;
4881: LD_ADDR_OWVAR 39
4885: PUSH
4886: LD_INT 3
4888: ST_TO_ADDR
// vc_control = 1 ;
4889: LD_ADDR_OWVAR 38
4893: PUSH
4894: LD_INT 1
4896: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4897: LD_ADDR_OWVAR 40
4901: PUSH
4902: LD_INT 27
4904: PUSH
4905: LD_INT 26
4907: PUSH
4908: LD_INT 28
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: LIST
4915: PUSH
4916: LD_INT 1
4918: PPUSH
4919: LD_INT 3
4921: PPUSH
4922: CALL_OW 12
4926: ARRAY
4927: ST_TO_ADDR
// veh = CreateVehicle ;
4928: LD_ADDR_VAR 0 4
4932: PUSH
4933: CALL_OW 45
4937: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4938: LD_VAR 0 4
4942: PPUSH
4943: LD_INT 4
4945: PPUSH
4946: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4950: LD_VAR 0 4
4954: PPUSH
4955: LD_INT 4
4957: PPUSH
4958: LD_INT 0
4960: PPUSH
4961: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4965: LD_EXP 26
4969: PUSH
4970: LD_INT 0
4972: EQUAL
4973: PUSH
4974: LD_EXP 26
4978: PUSH
4979: LD_INT 2
4981: EQUAL
4982: OR
4983: IFFALSE 5000
// PrepareHuman ( false , 4 , 6 ) else
4985: LD_INT 0
4987: PPUSH
4988: LD_INT 4
4990: PPUSH
4991: LD_INT 6
4993: PPUSH
4994: CALL_OW 380
4998: GO 5013
// PrepareHuman ( false , 4 , 8 ) ;
5000: LD_INT 0
5002: PPUSH
5003: LD_INT 4
5005: PPUSH
5006: LD_INT 8
5008: PPUSH
5009: CALL_OW 380
// un = CreateHuman ;
5013: LD_ADDR_VAR 0 3
5017: PUSH
5018: CALL_OW 44
5022: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5023: LD_VAR 0 3
5027: PPUSH
5028: LD_INT 4
5030: PPUSH
5031: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5035: LD_VAR 0 3
5039: PPUSH
5040: LD_VAR 0 4
5044: PPUSH
5045: CALL_OW 52
// vc_chassis = 14 ;
5049: LD_ADDR_OWVAR 37
5053: PUSH
5054: LD_INT 14
5056: ST_TO_ADDR
// vc_engine = 3 ;
5057: LD_ADDR_OWVAR 39
5061: PUSH
5062: LD_INT 3
5064: ST_TO_ADDR
// vc_control = 1 ;
5065: LD_ADDR_OWVAR 38
5069: PUSH
5070: LD_INT 1
5072: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5073: LD_ADDR_OWVAR 40
5077: PUSH
5078: LD_INT 27
5080: PUSH
5081: LD_INT 26
5083: PUSH
5084: LD_INT 28
5086: PUSH
5087: EMPTY
5088: LIST
5089: LIST
5090: LIST
5091: PUSH
5092: LD_INT 1
5094: PPUSH
5095: LD_INT 3
5097: PPUSH
5098: CALL_OW 12
5102: ARRAY
5103: ST_TO_ADDR
// veh = CreateVehicle ;
5104: LD_ADDR_VAR 0 4
5108: PUSH
5109: CALL_OW 45
5113: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5114: LD_VAR 0 4
5118: PPUSH
5119: LD_INT 4
5121: PPUSH
5122: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5126: LD_VAR 0 4
5130: PPUSH
5131: LD_INT 4
5133: PPUSH
5134: LD_INT 0
5136: PPUSH
5137: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5141: LD_EXP 26
5145: PUSH
5146: LD_INT 0
5148: EQUAL
5149: PUSH
5150: LD_EXP 26
5154: PUSH
5155: LD_INT 2
5157: EQUAL
5158: OR
5159: IFFALSE 5176
// PrepareHuman ( false , 2 , 4 ) else
5161: LD_INT 0
5163: PPUSH
5164: LD_INT 2
5166: PPUSH
5167: LD_INT 4
5169: PPUSH
5170: CALL_OW 380
5174: GO 5189
// PrepareHuman ( false , 2 , 8 ) ;
5176: LD_INT 0
5178: PPUSH
5179: LD_INT 2
5181: PPUSH
5182: LD_INT 8
5184: PPUSH
5185: CALL_OW 380
// un = CreateHuman ;
5189: LD_ADDR_VAR 0 3
5193: PUSH
5194: CALL_OW 44
5198: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5199: LD_VAR 0 3
5203: PPUSH
5204: LD_INT 4
5206: PPUSH
5207: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_VAR 0 4
5220: PPUSH
5221: CALL_OW 52
// end ;
5225: LD_VAR 0 1
5229: RET
// export function PrepareAttackLegion ; var i , un ; begin
5230: LD_INT 0
5232: PPUSH
5233: PPUSH
5234: PPUSH
// for i = 1 to 4 do
5235: LD_ADDR_VAR 0 2
5239: PUSH
5240: DOUBLE
5241: LD_INT 1
5243: DEC
5244: ST_TO_ADDR
5245: LD_INT 4
5247: PUSH
5248: FOR_TO
5249: IFFALSE 5359
// begin uc_side = 8 ;
5251: LD_ADDR_OWVAR 20
5255: PUSH
5256: LD_INT 8
5258: ST_TO_ADDR
// uc_nation = 2 ;
5259: LD_ADDR_OWVAR 21
5263: PUSH
5264: LD_INT 2
5266: ST_TO_ADDR
// hc_gallery =  ;
5267: LD_ADDR_OWVAR 33
5271: PUSH
5272: LD_STRING 
5274: ST_TO_ADDR
// hc_name =  ;
5275: LD_ADDR_OWVAR 26
5279: PUSH
5280: LD_STRING 
5282: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5283: LD_INT 0
5285: PPUSH
5286: LD_INT 1
5288: PUSH
5289: LD_INT 8
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PUSH
5296: LD_INT 1
5298: PPUSH
5299: LD_INT 2
5301: PPUSH
5302: CALL_OW 12
5306: ARRAY
5307: PPUSH
5308: LD_INT 6
5310: PPUSH
5311: LD_INT 8
5313: PPUSH
5314: CALL_OW 12
5318: PPUSH
5319: CALL_OW 380
// un = CreateHuman ;
5323: LD_ADDR_VAR 0 3
5327: PUSH
5328: CALL_OW 44
5332: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5333: LD_VAR 0 3
5337: PPUSH
5338: LD_INT 19
5340: PPUSH
5341: LD_INT 0
5343: PPUSH
5344: CALL_OW 49
// ComCrawl ( un ) ;
5348: LD_VAR 0 3
5352: PPUSH
5353: CALL_OW 137
// end ;
5357: GO 5248
5359: POP
5360: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5361: LD_INT 1
5363: PPUSH
5364: LD_INT 8
5366: PPUSH
5367: LD_INT 2
5369: PPUSH
5370: LD_INT 1
5372: PPUSH
5373: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5377: LD_INT 20
5379: PPUSH
5380: LD_INT 3
5382: PPUSH
5383: CALL 14938 0 2
// end ; end_of_file
5387: LD_VAR 0 1
5391: RET
// every 1 do var i ;
5392: GO 5394
5394: DISABLE
5395: LD_INT 0
5397: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5398: LD_INT 10
5400: PPUSH
5401: LD_INT 122
5403: PPUSH
5404: LD_INT 145
5406: PPUSH
5407: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5411: LD_INT 137
5413: PPUSH
5414: LD_INT 84
5416: PPUSH
5417: LD_INT 61
5419: PPUSH
5420: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5424: LD_EXP 1
5428: PPUSH
5429: CALL_OW 310
5433: PPUSH
5434: CALL_OW 87
// InGameOn ;
5438: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5442: LD_INT 22
5444: PUSH
5445: LD_INT 1
5447: PUSH
5448: EMPTY
5449: LIST
5450: LIST
5451: PPUSH
5452: CALL_OW 69
5456: PPUSH
5457: LD_INT 130
5459: PPUSH
5460: LD_INT 103
5462: PPUSH
5463: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5467: LD_VAR 0 1
5471: PPUSH
5472: LD_INT 114
5474: PPUSH
5475: LD_INT 102
5477: PPUSH
5478: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5482: LD_EXP 1
5486: PPUSH
5487: LD_STRING D1-JMM-1
5489: PPUSH
5490: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5494: LD_EXP 1
5498: PPUSH
5499: CALL_OW 310
5503: PPUSH
5504: CALL_OW 87
// if IsOk ( Donaldson ) then
5508: LD_EXP 3
5512: PPUSH
5513: CALL_OW 302
5517: IFFALSE 5597
// begin Say ( Donaldson , D1-Don-1 ) ;
5519: LD_EXP 3
5523: PPUSH
5524: LD_STRING D1-Don-1
5526: PPUSH
5527: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5531: LD_EXP 1
5535: PPUSH
5536: CALL_OW 310
5540: PPUSH
5541: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5545: LD_EXP 1
5549: PPUSH
5550: LD_STRING D1-JMM-2
5552: PPUSH
5553: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5557: LD_EXP 1
5561: PPUSH
5562: CALL_OW 310
5566: PPUSH
5567: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5571: LD_EXP 3
5575: PPUSH
5576: LD_STRING D1-Don-2
5578: PPUSH
5579: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5583: LD_EXP 1
5587: PPUSH
5588: CALL_OW 310
5592: PPUSH
5593: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5597: LD_INT 22
5599: PUSH
5600: LD_INT 1
5602: PUSH
5603: EMPTY
5604: LIST
5605: LIST
5606: PPUSH
5607: CALL_OW 69
5611: PPUSH
5612: LD_INT 110
5614: PPUSH
5615: LD_INT 101
5617: PPUSH
5618: CALL_OW 171
// wait ( 0 0$1 ) ;
5622: LD_INT 35
5624: PPUSH
5625: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5629: LD_EXP 1
5633: PPUSH
5634: CALL_OW 310
5638: PPUSH
5639: CALL_OW 87
// wait ( 0 0$1 ) ;
5643: LD_INT 35
5645: PPUSH
5646: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5650: LD_EXP 1
5654: PPUSH
5655: CALL_OW 310
5659: PPUSH
5660: CALL_OW 87
// wait ( 0 0$1 ) ;
5664: LD_INT 35
5666: PPUSH
5667: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5671: LD_EXP 1
5675: PPUSH
5676: CALL_OW 310
5680: PPUSH
5681: CALL_OW 87
// wait ( 0 0$1 ) ;
5685: LD_INT 35
5687: PPUSH
5688: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5692: LD_EXP 1
5696: PPUSH
5697: CALL_OW 310
5701: PPUSH
5702: CALL_OW 87
// end ;
5706: PPOPN 1
5708: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5709: LD_INT 1
5711: PPUSH
5712: LD_INT 102
5714: PPUSH
5715: LD_INT 94
5717: PPUSH
5718: CALL_OW 293
5722: IFFALSE 5913
5724: GO 5726
5726: DISABLE
5727: LD_INT 0
5729: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5730: LD_INT 102
5732: PPUSH
5733: LD_INT 94
5735: PPUSH
5736: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5740: LD_INT 22
5742: PUSH
5743: LD_INT 1
5745: PUSH
5746: EMPTY
5747: LIST
5748: LIST
5749: PUSH
5750: LD_INT 26
5752: PUSH
5753: LD_INT 1
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: PUSH
5760: LD_INT 2
5762: PUSH
5763: LD_INT 25
5765: PUSH
5766: LD_INT 1
5768: PUSH
5769: EMPTY
5770: LIST
5771: LIST
5772: PUSH
5773: LD_INT 25
5775: PUSH
5776: LD_INT 2
5778: PUSH
5779: EMPTY
5780: LIST
5781: LIST
5782: PUSH
5783: LD_INT 25
5785: PUSH
5786: LD_INT 3
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 25
5795: PUSH
5796: LD_INT 4
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 25
5805: PUSH
5806: LD_INT 5
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: PUSH
5813: LD_INT 25
5815: PUSH
5816: LD_INT 8
5818: PUSH
5819: EMPTY
5820: LIST
5821: LIST
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: LIST
5829: LIST
5830: LIST
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: LIST
5836: PPUSH
5837: CALL_OW 69
5841: PPUSH
5842: LD_STRING D1-Sol1-2
5844: PPUSH
5845: LD_STRING 
5847: PPUSH
5848: CALL 12343 0 3
// Say ( JMM , D1-JMM-3 ) ;
5852: LD_EXP 1
5856: PPUSH
5857: LD_STRING D1-JMM-3
5859: PPUSH
5860: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5864: LD_STRING M1
5866: PPUSH
5867: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5871: LD_ADDR_VAR 0 1
5875: PUSH
5876: LD_INT 22
5878: PUSH
5879: LD_INT 1
5881: PUSH
5882: EMPTY
5883: LIST
5884: LIST
5885: PPUSH
5886: CALL_OW 69
5890: PUSH
5891: FOR_IN
5892: IFFALSE 5911
// ComMoveXY ( i , 95 , 84 ) ;
5894: LD_VAR 0 1
5898: PPUSH
5899: LD_INT 95
5901: PPUSH
5902: LD_INT 84
5904: PPUSH
5905: CALL_OW 111
5909: GO 5891
5911: POP
5912: POP
// end ;
5913: PPOPN 1
5915: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5916: GO 5918
5918: DISABLE
5919: LD_INT 0
5921: PPUSH
5922: PPUSH
5923: PPUSH
5924: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5925: LD_ADDR_VAR 0 2
5929: PUSH
5930: LD_INT 8
5932: PPUSH
5933: LD_INT 22
5935: PUSH
5936: LD_INT 3
5938: PUSH
5939: EMPTY
5940: LIST
5941: LIST
5942: PUSH
5943: LD_INT 25
5945: PUSH
5946: LD_INT 9
5948: PUSH
5949: EMPTY
5950: LIST
5951: LIST
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PPUSH
5957: CALL_OW 70
5961: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5962: LD_ADDR_VAR 0 3
5966: PUSH
5967: LD_INT 22
5969: PUSH
5970: LD_INT 1
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: EMPTY
5978: LIST
5979: PPUSH
5980: CALL_OW 69
5984: ST_TO_ADDR
// enable ;
5985: ENABLE
// for i in your_units do
5986: LD_ADDR_VAR 0 1
5990: PUSH
5991: LD_VAR 0 3
5995: PUSH
5996: FOR_IN
5997: IFFALSE 6663
// begin if See ( 3 , i ) then
5999: LD_INT 3
6001: PPUSH
6002: LD_VAR 0 1
6006: PPUSH
6007: CALL_OW 292
6011: IFFALSE 6661
// begin disable ;
6013: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6014: LD_VAR 0 2
6018: PPUSH
6019: LD_INT 96
6021: PPUSH
6022: LD_INT 85
6024: PPUSH
6025: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6029: LD_VAR 0 2
6033: PPUSH
6034: LD_INT 96
6036: PPUSH
6037: LD_INT 85
6039: PPUSH
6040: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6044: LD_VAR 0 2
6048: PPUSH
6049: LD_INT 96
6051: PPUSH
6052: LD_INT 85
6054: PPUSH
6055: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6059: LD_VAR 0 2
6063: PPUSH
6064: LD_INT 96
6066: PPUSH
6067: LD_INT 85
6069: PPUSH
6070: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6074: LD_VAR 0 2
6078: PPUSH
6079: LD_INT 96
6081: PPUSH
6082: LD_INT 85
6084: PPUSH
6085: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6089: LD_VAR 0 2
6093: PPUSH
6094: LD_INT 96
6096: PPUSH
6097: LD_INT 85
6099: PPUSH
6100: CALL_OW 214
// wait ( 0 0$2 ) ;
6104: LD_INT 70
6106: PPUSH
6107: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6111: LD_EXP 1
6115: PPUSH
6116: LD_STRING D1a-JMM-1
6118: PPUSH
6119: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6123: LD_EXP 3
6127: PPUSH
6128: LD_STRING D1a-Don-1
6130: PPUSH
6131: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6135: LD_ADDR_VAR 0 1
6139: PUSH
6140: LD_INT 22
6142: PUSH
6143: LD_INT 1
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PPUSH
6150: CALL_OW 69
6154: PUSH
6155: FOR_IN
6156: IFFALSE 6175
// ComMoveXY ( i , 109 , 102 ) ;
6158: LD_VAR 0 1
6162: PPUSH
6163: LD_INT 109
6165: PPUSH
6166: LD_INT 102
6168: PPUSH
6169: CALL_OW 111
6173: GO 6155
6175: POP
6176: POP
// Say ( JMM , D1a-JMM-2 ) ;
6177: LD_EXP 1
6181: PPUSH
6182: LD_STRING D1a-JMM-2
6184: PPUSH
6185: CALL_OW 88
// wait ( 0 0$10 ) ;
6189: LD_INT 350
6191: PPUSH
6192: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6196: LD_EXP 1
6200: PPUSH
6201: CALL_OW 310
6205: PPUSH
6206: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6210: LD_EXP 3
6214: PPUSH
6215: LD_STRING D1b-Don-1
6217: PPUSH
6218: CALL_OW 88
// if IsOk ( Donaldson ) then
6222: LD_EXP 3
6226: PPUSH
6227: CALL_OW 302
6231: IFFALSE 6245
// Say ( JMM , D1b-JMM-1 ) ;
6233: LD_EXP 1
6237: PPUSH
6238: LD_STRING D1b-JMM-1
6240: PPUSH
6241: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6245: LD_INT 22
6247: PUSH
6248: LD_INT 1
6250: PUSH
6251: EMPTY
6252: LIST
6253: LIST
6254: PUSH
6255: LD_INT 26
6257: PUSH
6258: LD_INT 1
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: PUSH
6265: LD_INT 2
6267: PUSH
6268: LD_INT 25
6270: PUSH
6271: LD_INT 1
6273: PUSH
6274: EMPTY
6275: LIST
6276: LIST
6277: PUSH
6278: LD_INT 25
6280: PUSH
6281: LD_INT 2
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PUSH
6288: LD_INT 25
6290: PUSH
6291: LD_INT 3
6293: PUSH
6294: EMPTY
6295: LIST
6296: LIST
6297: PUSH
6298: LD_INT 25
6300: PUSH
6301: LD_INT 4
6303: PUSH
6304: EMPTY
6305: LIST
6306: LIST
6307: PUSH
6308: LD_INT 25
6310: PUSH
6311: LD_INT 5
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 25
6320: PUSH
6321: LD_INT 8
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: EMPTY
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: PPUSH
6342: CALL_OW 69
6346: PPUSH
6347: LD_STRING D1b-Sol1-1
6349: PPUSH
6350: LD_STRING 
6352: PPUSH
6353: CALL 12343 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6357: LD_EXP 3
6361: PPUSH
6362: LD_STRING D1b-Don-2
6364: PPUSH
6365: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6369: LD_EXP 1
6373: PPUSH
6374: LD_STRING D1b-JMM-2
6376: PPUSH
6377: CALL_OW 88
// dec = ShowQuery1 ;
6381: LD_ADDR_VAR 0 4
6385: PUSH
6386: CALL 12812 0 0
6390: ST_TO_ADDR
// if dec = 1 then
6391: LD_VAR 0 4
6395: PUSH
6396: LD_INT 1
6398: EQUAL
6399: IFFALSE 6505
// begin Say ( JMM , D2-JMM-1 ) ;
6401: LD_EXP 1
6405: PPUSH
6406: LD_STRING D2-JMM-1
6408: PPUSH
6409: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6413: LD_EXP 22
6417: PPUSH
6418: LD_STRING D2-Pow-1
6420: PPUSH
6421: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6425: LD_EXP 1
6429: PPUSH
6430: LD_STRING D2a-JMM-1
6432: PPUSH
6433: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6437: LD_EXP 22
6441: PPUSH
6442: LD_STRING D2a-Pow-1
6444: PPUSH
6445: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6449: LD_EXP 1
6453: PPUSH
6454: LD_STRING D2a-JMM-2
6456: PPUSH
6457: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6461: LD_EXP 22
6465: PPUSH
6466: LD_STRING D2a-Pow-2
6468: PPUSH
6469: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6473: LD_EXP 1
6477: PPUSH
6478: LD_STRING D2a-JMM-3
6480: PPUSH
6481: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6485: LD_EXP 22
6489: PPUSH
6490: LD_STRING D2a-Pow-3
6492: PPUSH
6493: CALL_OW 94
// secondPass = 2 ;
6497: LD_ADDR_EXP 27
6501: PUSH
6502: LD_INT 2
6504: ST_TO_ADDR
// end ; if dec = 2 then
6505: LD_VAR 0 4
6509: PUSH
6510: LD_INT 2
6512: EQUAL
6513: IFFALSE 6607
// begin Say ( JMM , D2-JMM-1 ) ;
6515: LD_EXP 1
6519: PPUSH
6520: LD_STRING D2-JMM-1
6522: PPUSH
6523: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6527: LD_EXP 22
6531: PPUSH
6532: LD_STRING D2-Pow-1
6534: PPUSH
6535: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6539: LD_EXP 1
6543: PPUSH
6544: LD_STRING D2b-JMM-1
6546: PPUSH
6547: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6551: LD_EXP 22
6555: PPUSH
6556: LD_STRING D2b-Pow-1
6558: PPUSH
6559: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6563: LD_EXP 1
6567: PPUSH
6568: LD_STRING D2c-JMM-1
6570: PPUSH
6571: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6575: LD_EXP 22
6579: PPUSH
6580: LD_STRING D2c-Pow-1
6582: PPUSH
6583: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6587: LD_EXP 1
6591: PPUSH
6592: LD_STRING D2c-JMM-2
6594: PPUSH
6595: CALL_OW 88
// secondPass = 2 ;
6599: LD_ADDR_EXP 27
6603: PUSH
6604: LD_INT 2
6606: ST_TO_ADDR
// end ; if dec = 3 then
6607: LD_VAR 0 4
6611: PUSH
6612: LD_INT 3
6614: EQUAL
6615: IFFALSE 6625
// secondPass = 1 ;
6617: LD_ADDR_EXP 27
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
// InGameOff ;
6625: CALL_OW 9
// ruAI = 1 ;
6629: LD_ADDR_EXP 41
6633: PUSH
6634: LD_INT 1
6636: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6637: LD_INT 1
6639: PPUSH
6640: LD_INT 3
6642: PPUSH
6643: LD_INT 2
6645: PPUSH
6646: LD_INT 1
6648: PPUSH
6649: CALL_OW 80
// SaveForQuickRestart ;
6653: CALL_OW 22
// exit ;
6657: POP
6658: POP
6659: GO 6665
// end ; end ;
6661: GO 5996
6663: POP
6664: POP
// end ;
6665: PPOPN 4
6667: END
// every 1 1$0 trigger secondPass = 2 do
6668: LD_EXP 27
6672: PUSH
6673: LD_INT 2
6675: EQUAL
6676: IFFALSE 6896
6678: GO 6680
6680: DISABLE
// begin PowellSupport1 ;
6681: CALL 1946 0 0
// DialogueOn ;
6685: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6689: LD_EXP 1
6693: PPUSH
6694: LD_STRING DC1-JMM-1
6696: PPUSH
6697: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6701: LD_EXP 22
6705: PPUSH
6706: LD_STRING DC1-Pow-1
6708: PPUSH
6709: CALL_OW 94
// DialogueOff ;
6713: CALL_OW 7
// wait ( 3 3$0 ) ;
6717: LD_INT 6300
6719: PPUSH
6720: CALL_OW 67
// PowellSupport2 ;
6724: CALL 2405 0 0
// DialogueOn ;
6728: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6732: LD_EXP 1
6736: PPUSH
6737: LD_STRING DC2-JMM-1
6739: PPUSH
6740: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6744: LD_EXP 22
6748: PPUSH
6749: LD_STRING DC2-Pow-1
6751: PPUSH
6752: CALL_OW 94
// DialogueOff ;
6756: CALL_OW 7
// wait ( 3 3$00 ) ;
6760: LD_INT 6300
6762: PPUSH
6763: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6767: LD_INT 35
6769: PPUSH
6770: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6774: LD_INT 22
6776: PUSH
6777: LD_INT 1
6779: PUSH
6780: EMPTY
6781: LIST
6782: LIST
6783: PUSH
6784: LD_INT 2
6786: PUSH
6787: LD_INT 30
6789: PUSH
6790: LD_INT 0
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 30
6799: PUSH
6800: LD_INT 1
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: PUSH
6812: EMPTY
6813: LIST
6814: LIST
6815: PPUSH
6816: CALL_OW 69
6820: PUSH
6821: LD_INT 11
6823: PPUSH
6824: LD_INT 22
6826: PUSH
6827: LD_INT 3
6829: PUSH
6830: EMPTY
6831: LIST
6832: LIST
6833: PPUSH
6834: CALL_OW 70
6838: NOT
6839: AND
6840: IFFALSE 6767
// wait ( 0 0$10 ) ;
6842: LD_INT 350
6844: PPUSH
6845: CALL_OW 67
// Legion ;
6849: CALL 6897 0 0
// wait ( 6 6$0 ) ;
6853: LD_INT 12600
6855: PPUSH
6856: CALL_OW 67
// PowellSupport3 ;
6860: CALL 2939 0 0
// DialogueOn ;
6864: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6868: LD_EXP 22
6872: PPUSH
6873: LD_STRING DC3-Pow-1
6875: PPUSH
6876: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6880: LD_EXP 1
6884: PPUSH
6885: LD_STRING DC3-JMM-1
6887: PPUSH
6888: CALL_OW 88
// DialogueOff ;
6892: CALL_OW 7
// end ;
6896: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6897: LD_INT 0
6899: PPUSH
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6915: LD_ADDR_VAR 0 5
6919: PUSH
6920: LD_INT 22
6922: PUSH
6923: LD_INT 1
6925: PUSH
6926: EMPTY
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 21
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: LD_INT 30
6945: PUSH
6946: LD_INT 0
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 30
6955: PUSH
6956: LD_INT 1
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: EMPTY
6964: LIST
6965: LIST
6966: LIST
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: LIST
6972: PPUSH
6973: CALL_OW 69
6977: ST_TO_ADDR
// crates := 0 ;
6978: LD_ADDR_VAR 0 8
6982: PUSH
6983: LD_INT 0
6985: ST_TO_ADDR
// oil := 0 ;
6986: LD_ADDR_VAR 0 9
6990: PUSH
6991: LD_INT 0
6993: ST_TO_ADDR
// siberite := 0 ;
6994: LD_ADDR_VAR 0 10
6998: PUSH
6999: LD_INT 0
7001: ST_TO_ADDR
// payForNeutral := false ;
7002: LD_ADDR_VAR 0 13
7006: PUSH
7007: LD_INT 0
7009: ST_TO_ADDR
// payForHelp := false ;
7010: LD_ADDR_VAR 0 14
7014: PUSH
7015: LD_INT 0
7017: ST_TO_ADDR
// for i in tmp do
7018: LD_ADDR_VAR 0 2
7022: PUSH
7023: LD_VAR 0 5
7027: PUSH
7028: FOR_IN
7029: IFFALSE 7120
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7031: LD_ADDR_VAR 0 8
7035: PUSH
7036: LD_VAR 0 8
7040: PUSH
7041: LD_VAR 0 2
7045: PPUSH
7046: CALL_OW 274
7050: PPUSH
7051: LD_INT 1
7053: PPUSH
7054: CALL_OW 275
7058: PLUS
7059: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7060: LD_ADDR_VAR 0 9
7064: PUSH
7065: LD_VAR 0 9
7069: PUSH
7070: LD_VAR 0 2
7074: PPUSH
7075: CALL_OW 274
7079: PPUSH
7080: LD_INT 2
7082: PPUSH
7083: CALL_OW 275
7087: PLUS
7088: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7089: LD_ADDR_VAR 0 10
7093: PUSH
7094: LD_VAR 0 10
7098: PUSH
7099: LD_VAR 0 2
7103: PPUSH
7104: CALL_OW 274
7108: PPUSH
7109: LD_INT 3
7111: PPUSH
7112: CALL_OW 275
7116: PLUS
7117: ST_TO_ADDR
// end ;
7118: GO 7028
7120: POP
7121: POP
// PrepareKurt ;
7122: CALL 4366 0 0
// if not Kurt then
7126: LD_EXP 24
7130: NOT
7131: IFFALSE 7135
// exit ;
7133: GO 9267
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7135: LD_EXP 25
7139: PPUSH
7140: LD_INT 144
7142: PPUSH
7143: LD_INT 111
7145: PPUSH
7146: CALL_OW 111
// wait ( 0 0$2 ) ;
7150: LD_INT 70
7152: PPUSH
7153: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7157: LD_INT 167
7159: PPUSH
7160: LD_INT 121
7162: PPUSH
7163: LD_INT 1
7165: PPUSH
7166: LD_INT 10
7168: NEG
7169: PPUSH
7170: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7174: LD_EXP 24
7178: PPUSH
7179: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7183: LD_EXP 24
7187: PPUSH
7188: CALL_OW 87
// wait ( 0 0$1 ) ;
7192: LD_INT 35
7194: PPUSH
7195: CALL_OW 67
// DialogueOn ;
7199: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7203: LD_INT 22
7205: PUSH
7206: LD_INT 1
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 26
7215: PUSH
7216: LD_INT 1
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 2
7225: PUSH
7226: LD_INT 25
7228: PUSH
7229: LD_INT 1
7231: PUSH
7232: EMPTY
7233: LIST
7234: LIST
7235: PUSH
7236: LD_INT 25
7238: PUSH
7239: LD_INT 2
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 25
7248: PUSH
7249: LD_INT 3
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 25
7258: PUSH
7259: LD_INT 4
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 5
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: LD_INT 25
7278: PUSH
7279: LD_INT 8
7281: PUSH
7282: EMPTY
7283: LIST
7284: LIST
7285: PUSH
7286: EMPTY
7287: LIST
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: LIST
7299: PPUSH
7300: CALL_OW 69
7304: PPUSH
7305: LD_STRING D3-Sol1-1
7307: PPUSH
7308: LD_STRING 
7310: PPUSH
7311: CALL 12343 0 3
// if KurtStatus then
7315: LD_EXP 26
7319: IFFALSE 7419
// begin Say ( Kurt , D3-Kurt-1 ) ;
7321: LD_EXP 24
7325: PPUSH
7326: LD_STRING D3-Kurt-1
7328: PPUSH
7329: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7333: LD_EXP 1
7337: PPUSH
7338: LD_STRING D3-JMM-1
7340: PPUSH
7341: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7345: LD_EXP 24
7349: PPUSH
7350: LD_STRING D3-Kurt-2
7352: PPUSH
7353: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7357: LD_EXP 1
7361: PPUSH
7362: LD_STRING D3-JMM-2
7364: PPUSH
7365: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7369: LD_EXP 24
7373: PPUSH
7374: LD_STRING D3-Kurt-4
7376: PPUSH
7377: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7381: LD_EXP 1
7385: PPUSH
7386: LD_STRING D3-JMM-4
7388: PPUSH
7389: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7393: LD_EXP 24
7397: PPUSH
7398: LD_STRING D3-Kurt-5
7400: PPUSH
7401: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7405: LD_EXP 24
7409: PPUSH
7410: LD_STRING D3-Kurt-5a
7412: PPUSH
7413: CALL_OW 88
// end else
7417: GO 7515
// begin Say ( Kurt , D3-Kurt-1 ) ;
7419: LD_EXP 24
7423: PPUSH
7424: LD_STRING D3-Kurt-1
7426: PPUSH
7427: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7431: LD_EXP 1
7435: PPUSH
7436: LD_STRING D3-JMM-1
7438: PPUSH
7439: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7443: LD_EXP 24
7447: PPUSH
7448: LD_STRING D3-Kurt-3
7450: PPUSH
7451: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7455: LD_EXP 1
7459: PPUSH
7460: LD_STRING D3-JMM-3
7462: PPUSH
7463: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7467: LD_EXP 24
7471: PPUSH
7472: LD_STRING D3-Kurt-4
7474: PPUSH
7475: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7479: LD_EXP 1
7483: PPUSH
7484: LD_STRING D3-JMM-4
7486: PPUSH
7487: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7491: LD_EXP 24
7495: PPUSH
7496: LD_STRING D3-Kurt-5
7498: PPUSH
7499: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7503: LD_EXP 24
7507: PPUSH
7508: LD_STRING D3-Kurt-5b
7510: PPUSH
7511: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7515: LD_VAR 0 8
7519: PUSH
7520: LD_INT 120
7522: PUSH
7523: LD_INT 60
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PUSH
7530: LD_EXP 26
7534: PUSH
7535: LD_INT 1
7537: PLUS
7538: ARRAY
7539: GREATEREQUAL
7540: PUSH
7541: LD_VAR 0 10
7545: PUSH
7546: LD_INT 120
7548: PUSH
7549: LD_INT 60
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: PUSH
7556: LD_EXP 26
7560: PUSH
7561: LD_INT 1
7563: PLUS
7564: ARRAY
7565: GREATEREQUAL
7566: AND
7567: IFFALSE 7619
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7569: LD_ADDR_VAR 0 3
7573: PUSH
7574: LD_STRING Q2
7576: PUSH
7577: LD_STRING Q2K
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PUSH
7584: LD_EXP 26
7588: PUSH
7589: LD_INT 1
7591: PLUS
7592: ARRAY
7593: PPUSH
7594: LD_INT 1
7596: PUSH
7597: LD_INT 2
7599: PUSH
7600: LD_INT 3
7602: PUSH
7603: LD_INT 4
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: PPUSH
7612: CALL_OW 98
7616: ST_TO_ADDR
7617: GO 7663
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7619: LD_ADDR_VAR 0 3
7623: PUSH
7624: LD_STRING Q2
7626: PUSH
7627: LD_STRING Q2K
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PUSH
7634: LD_EXP 26
7638: PUSH
7639: LD_INT 1
7641: PLUS
7642: ARRAY
7643: PPUSH
7644: LD_INT 1
7646: PUSH
7647: LD_INT 3
7649: PUSH
7650: LD_INT 4
7652: PUSH
7653: EMPTY
7654: LIST
7655: LIST
7656: LIST
7657: PPUSH
7658: CALL_OW 98
7662: ST_TO_ADDR
// if dec1 = 1 then
7663: LD_VAR 0 3
7667: PUSH
7668: LD_INT 1
7670: EQUAL
7671: IFFALSE 7705
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7673: LD_EXP 1
7677: PPUSH
7678: LD_STRING D3Ka-JMM-1
7680: PPUSH
7681: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7685: LD_EXP 24
7689: PPUSH
7690: LD_STRING D3Ka-Kurt-1
7692: PPUSH
7693: CALL_OW 88
// warWithLegion = 1 ;
7697: LD_ADDR_EXP 30
7701: PUSH
7702: LD_INT 1
7704: ST_TO_ADDR
// end ; if dec1 = 2 then
7705: LD_VAR 0 3
7709: PUSH
7710: LD_INT 2
7712: EQUAL
7713: IFFALSE 7797
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7715: LD_EXP 1
7719: PPUSH
7720: LD_STRING D3Kb-JMM-1
7722: PPUSH
7723: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7727: LD_EXP 24
7731: PPUSH
7732: LD_STRING D3Kb-Kurt-1
7734: PPUSH
7735: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7739: LD_ADDR_VAR 0 11
7743: PUSH
7744: LD_INT 120
7746: PUSH
7747: LD_INT 60
7749: PUSH
7750: EMPTY
7751: LIST
7752: LIST
7753: PUSH
7754: LD_EXP 26
7758: PUSH
7759: LD_INT 1
7761: PLUS
7762: ARRAY
7763: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7764: LD_ADDR_VAR 0 12
7768: PUSH
7769: LD_INT 120
7771: PUSH
7772: LD_INT 60
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: PUSH
7779: LD_EXP 26
7783: PUSH
7784: LD_INT 1
7786: PLUS
7787: ARRAY
7788: ST_TO_ADDR
// payForNeutral := true ;
7789: LD_ADDR_VAR 0 13
7793: PUSH
7794: LD_INT 1
7796: ST_TO_ADDR
// end ; if dec1 = 3 then
7797: LD_VAR 0 3
7801: PUSH
7802: LD_INT 3
7804: EQUAL
7805: IFFALSE 8040
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7807: LD_EXP 1
7811: PPUSH
7812: LD_STRING D3Kc1-JMM-1
7814: PPUSH
7815: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7819: LD_EXP 24
7823: PPUSH
7824: LD_STRING D3Kc1-Kurt-1
7826: PPUSH
7827: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7831: LD_EXP 1
7835: PPUSH
7836: LD_STRING D3Kc1-JMM-2
7838: PPUSH
7839: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7843: LD_EXP 24
7847: PPUSH
7848: LD_STRING D3Kc1-Kurt-2
7850: PPUSH
7851: CALL_OW 88
// askSiberite = 1 ;
7855: LD_ADDR_EXP 32
7859: PUSH
7860: LD_INT 1
7862: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7863: LD_ADDR_VAR 0 4
7867: PUSH
7868: LD_STRING Q2b
7870: PPUSH
7871: LD_INT 1
7873: PUSH
7874: LD_INT 2
7876: PUSH
7877: LD_INT 3
7879: PUSH
7880: EMPTY
7881: LIST
7882: LIST
7883: LIST
7884: PPUSH
7885: CALL_OW 98
7889: ST_TO_ADDR
// if dec2 = 1 then
7890: LD_VAR 0 4
7894: PUSH
7895: LD_INT 1
7897: EQUAL
7898: IFFALSE 7932
// begin Say ( JMM , D4a-JMM-1 ) ;
7900: LD_EXP 1
7904: PPUSH
7905: LD_STRING D4a-JMM-1
7907: PPUSH
7908: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7912: LD_EXP 24
7916: PPUSH
7917: LD_STRING D4b-Kurt-1
7919: PPUSH
7920: CALL_OW 88
// warWithLegion = 1 ;
7924: LD_ADDR_EXP 30
7928: PUSH
7929: LD_INT 1
7931: ST_TO_ADDR
// end ; if dec2 = 2 then
7932: LD_VAR 0 4
7936: PUSH
7937: LD_INT 2
7939: EQUAL
7940: IFFALSE 7974
// begin Say ( JMM , D4b-JMM-1 ) ;
7942: LD_EXP 1
7946: PPUSH
7947: LD_STRING D4b-JMM-1
7949: PPUSH
7950: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7954: LD_EXP 24
7958: PPUSH
7959: LD_STRING D4b-Kurt-1
7961: PPUSH
7962: CALL_OW 88
// warWithLegion = 1 ;
7966: LD_ADDR_EXP 30
7970: PUSH
7971: LD_INT 1
7973: ST_TO_ADDR
// end ; if dec2 = 3 then
7974: LD_VAR 0 4
7978: PUSH
7979: LD_INT 3
7981: EQUAL
7982: IFFALSE 8040
// begin Say ( JMM , D4c-JMM-1 ) ;
7984: LD_EXP 1
7988: PPUSH
7989: LD_STRING D4c-JMM-1
7991: PPUSH
7992: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7996: LD_EXP 24
8000: PPUSH
8001: LD_STRING D4c-Kurt-1
8003: PPUSH
8004: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8008: LD_EXP 1
8012: PPUSH
8013: LD_STRING D4c-JMM-2
8015: PPUSH
8016: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8020: LD_EXP 24
8024: PPUSH
8025: LD_STRING D4c-Kurt-2
8027: PPUSH
8028: CALL_OW 88
// fakeInfo = 1 ;
8032: LD_ADDR_EXP 31
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8040: LD_VAR 0 3
8044: PUSH
8045: LD_INT 4
8047: EQUAL
8048: IFFALSE 9123
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8050: LD_EXP 1
8054: PPUSH
8055: LD_STRING D3Kd-JMM-1
8057: PPUSH
8058: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8062: LD_VAR 0 8
8066: PUSH
8067: LD_INT 200
8069: PUSH
8070: LD_INT 120
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: LD_EXP 26
8081: PUSH
8082: LD_INT 1
8084: PLUS
8085: ARRAY
8086: GREATEREQUAL
8087: PUSH
8088: LD_VAR 0 10
8092: PUSH
8093: LD_INT 200
8095: PUSH
8096: LD_INT 120
8098: PUSH
8099: EMPTY
8100: LIST
8101: LIST
8102: PUSH
8103: LD_EXP 26
8107: PUSH
8108: LD_INT 1
8110: PLUS
8111: ARRAY
8112: GREATEREQUAL
8113: AND
8114: IFFALSE 8166
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8116: LD_ADDR_VAR 0 4
8120: PUSH
8121: LD_STRING Q2a
8123: PUSH
8124: LD_STRING Q2aK
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_EXP 26
8135: PUSH
8136: LD_INT 1
8138: PLUS
8139: ARRAY
8140: PPUSH
8141: LD_INT 1
8143: PUSH
8144: LD_INT 2
8146: PUSH
8147: LD_INT 3
8149: PUSH
8150: LD_INT 4
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: PPUSH
8159: CALL_OW 98
8163: ST_TO_ADDR
8164: GO 8343
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8166: LD_VAR 0 8
8170: PUSH
8171: LD_INT 120
8173: PUSH
8174: LD_INT 60
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: LD_EXP 26
8185: PUSH
8186: LD_INT 1
8188: PLUS
8189: ARRAY
8190: GREATEREQUAL
8191: PUSH
8192: LD_VAR 0 10
8196: PUSH
8197: LD_INT 120
8199: PUSH
8200: LD_INT 60
8202: PUSH
8203: EMPTY
8204: LIST
8205: LIST
8206: PUSH
8207: LD_EXP 26
8211: PUSH
8212: LD_INT 1
8214: PLUS
8215: ARRAY
8216: GREATEREQUAL
8217: AND
8218: IFFALSE 8266
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8220: LD_ADDR_VAR 0 4
8224: PUSH
8225: LD_STRING Q2a
8227: PUSH
8228: LD_STRING Q2aK
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PUSH
8235: LD_EXP 26
8239: PUSH
8240: LD_INT 1
8242: PLUS
8243: ARRAY
8244: PPUSH
8245: LD_INT 1
8247: PUSH
8248: LD_INT 2
8250: PUSH
8251: LD_INT 4
8253: PUSH
8254: EMPTY
8255: LIST
8256: LIST
8257: LIST
8258: PPUSH
8259: CALL_OW 98
8263: ST_TO_ADDR
8264: GO 8343
// begin case Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) of 1 :
8266: LD_STRING Q2d
8268: PUSH
8269: LD_STRING Q2dK
8271: PUSH
8272: EMPTY
8273: LIST
8274: LIST
8275: PUSH
8276: LD_EXP 26
8280: PUSH
8281: LD_INT 1
8283: PLUS
8284: ARRAY
8285: PPUSH
8286: CALL_OW 97
8290: PUSH
8291: LD_INT 1
8293: DOUBLE
8294: EQUAL
8295: IFTRUE 8299
8297: GO 8302
8299: POP
// ; end ;
8300: GO 8303
8302: POP
// dec2 := 0 ;
8303: LD_ADDR_VAR 0 4
8307: PUSH
8308: LD_INT 0
8310: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8311: LD_EXP 1
8315: PPUSH
8316: LD_STRING D3Kc1-JMM-1
8318: PPUSH
8319: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8323: LD_EXP 24
8327: PPUSH
8328: LD_STRING D3Kc2-Kurt-1
8330: PPUSH
8331: CALL_OW 88
// warWithLegion := 1 ;
8335: LD_ADDR_EXP 30
8339: PUSH
8340: LD_INT 1
8342: ST_TO_ADDR
// end ; if dec2 = 1 then
8343: LD_VAR 0 4
8347: PUSH
8348: LD_INT 1
8350: EQUAL
8351: IFFALSE 8385
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8353: LD_EXP 1
8357: PPUSH
8358: LD_STRING D5Ka-JMM-1
8360: PPUSH
8361: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8365: LD_EXP 24
8369: PPUSH
8370: LD_STRING D5Ka-Kurt-1
8372: PPUSH
8373: CALL_OW 88
// warWithLegion = 1 ;
8377: LD_ADDR_EXP 30
8381: PUSH
8382: LD_INT 1
8384: ST_TO_ADDR
// end ; if dec2 = 2 then
8385: LD_VAR 0 4
8389: PUSH
8390: LD_INT 2
8392: EQUAL
8393: IFFALSE 8477
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8395: LD_EXP 1
8399: PPUSH
8400: LD_STRING D3Kb-JMM-1
8402: PPUSH
8403: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8407: LD_EXP 24
8411: PPUSH
8412: LD_STRING D3Kb-Kurt-1
8414: PPUSH
8415: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8419: LD_ADDR_VAR 0 11
8423: PUSH
8424: LD_INT 120
8426: PUSH
8427: LD_INT 60
8429: PUSH
8430: EMPTY
8431: LIST
8432: LIST
8433: PUSH
8434: LD_EXP 26
8438: PUSH
8439: LD_INT 1
8441: PLUS
8442: ARRAY
8443: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8444: LD_ADDR_VAR 0 12
8448: PUSH
8449: LD_INT 120
8451: PUSH
8452: LD_INT 60
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: LD_EXP 26
8463: PUSH
8464: LD_INT 1
8466: PLUS
8467: ARRAY
8468: ST_TO_ADDR
// payForNeutral := true ;
8469: LD_ADDR_VAR 0 13
8473: PUSH
8474: LD_INT 1
8476: ST_TO_ADDR
// end ; if dec2 = 3 then
8477: LD_VAR 0 4
8481: PUSH
8482: LD_INT 3
8484: EQUAL
8485: IFFALSE 8569
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8487: LD_EXP 1
8491: PPUSH
8492: LD_STRING D3Ke-JMM-1
8494: PPUSH
8495: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8499: LD_EXP 24
8503: PPUSH
8504: LD_STRING D3Ke-Kurt-1
8506: PPUSH
8507: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8511: LD_ADDR_VAR 0 11
8515: PUSH
8516: LD_INT 200
8518: PUSH
8519: LD_INT 120
8521: PUSH
8522: EMPTY
8523: LIST
8524: LIST
8525: PUSH
8526: LD_EXP 26
8530: PUSH
8531: LD_INT 1
8533: PLUS
8534: ARRAY
8535: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8536: LD_ADDR_VAR 0 12
8540: PUSH
8541: LD_INT 200
8543: PUSH
8544: LD_INT 120
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_EXP 26
8555: PUSH
8556: LD_INT 1
8558: PLUS
8559: ARRAY
8560: ST_TO_ADDR
// payForHelp := true ;
8561: LD_ADDR_VAR 0 14
8565: PUSH
8566: LD_INT 1
8568: ST_TO_ADDR
// end ; if dec2 = 4 then
8569: LD_VAR 0 4
8573: PUSH
8574: LD_INT 4
8576: EQUAL
8577: IFFALSE 8812
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8579: LD_EXP 1
8583: PPUSH
8584: LD_STRING D3Kc1-JMM-1
8586: PPUSH
8587: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8591: LD_EXP 24
8595: PPUSH
8596: LD_STRING D3Kc1-Kurt-1
8598: PPUSH
8599: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8603: LD_EXP 1
8607: PPUSH
8608: LD_STRING D3Kc1-JMM-2
8610: PPUSH
8611: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8615: LD_EXP 24
8619: PPUSH
8620: LD_STRING D3Kc1-Kurt-2
8622: PPUSH
8623: CALL_OW 88
// askSiberite = 1 ;
8627: LD_ADDR_EXP 32
8631: PUSH
8632: LD_INT 1
8634: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8635: LD_ADDR_VAR 0 4
8639: PUSH
8640: LD_STRING Q2b
8642: PPUSH
8643: LD_INT 1
8645: PUSH
8646: LD_INT 2
8648: PUSH
8649: LD_INT 3
8651: PUSH
8652: EMPTY
8653: LIST
8654: LIST
8655: LIST
8656: PPUSH
8657: CALL_OW 98
8661: ST_TO_ADDR
// if dec2 = 1 then
8662: LD_VAR 0 4
8666: PUSH
8667: LD_INT 1
8669: EQUAL
8670: IFFALSE 8704
// begin Say ( JMM , D4a-JMM-1 ) ;
8672: LD_EXP 1
8676: PPUSH
8677: LD_STRING D4a-JMM-1
8679: PPUSH
8680: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8684: LD_EXP 24
8688: PPUSH
8689: LD_STRING D4b-Kurt-1
8691: PPUSH
8692: CALL_OW 88
// warWithLegion = 1 ;
8696: LD_ADDR_EXP 30
8700: PUSH
8701: LD_INT 1
8703: ST_TO_ADDR
// end ; if dec2 = 2 then
8704: LD_VAR 0 4
8708: PUSH
8709: LD_INT 2
8711: EQUAL
8712: IFFALSE 8746
// begin Say ( JMM , D4b-JMM-1 ) ;
8714: LD_EXP 1
8718: PPUSH
8719: LD_STRING D4b-JMM-1
8721: PPUSH
8722: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8726: LD_EXP 24
8730: PPUSH
8731: LD_STRING D4b-Kurt-1
8733: PPUSH
8734: CALL_OW 88
// warWithLegion = 1 ;
8738: LD_ADDR_EXP 30
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// end ; if dec2 = 3 then
8746: LD_VAR 0 4
8750: PUSH
8751: LD_INT 3
8753: EQUAL
8754: IFFALSE 8812
// begin Say ( JMM , D4c-JMM-1 ) ;
8756: LD_EXP 1
8760: PPUSH
8761: LD_STRING D4c-JMM-1
8763: PPUSH
8764: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8768: LD_EXP 24
8772: PPUSH
8773: LD_STRING D4c-Kurt-1
8775: PPUSH
8776: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8780: LD_EXP 1
8784: PPUSH
8785: LD_STRING D4c-JMM-2
8787: PPUSH
8788: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8792: LD_EXP 24
8796: PPUSH
8797: LD_STRING D4c-Kurt-2
8799: PPUSH
8800: CALL_OW 88
// fakeInfo = 1 ;
8804: LD_ADDR_EXP 31
8808: PUSH
8809: LD_INT 1
8811: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8812: LD_VAR 0 13
8816: PUSH
8817: LD_VAR 0 14
8821: OR
8822: IFFALSE 9123
// begin for i in tmp do
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: LD_VAR 0 5
8833: PUSH
8834: FOR_IN
8835: IFFALSE 9121
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8837: LD_ADDR_VAR 0 6
8841: PUSH
8842: LD_VAR 0 2
8846: PPUSH
8847: CALL_OW 274
8851: PPUSH
8852: LD_INT 1
8854: PPUSH
8855: CALL_OW 275
8859: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8860: LD_ADDR_VAR 0 7
8864: PUSH
8865: LD_VAR 0 2
8869: PPUSH
8870: CALL_OW 274
8874: PPUSH
8875: LD_INT 3
8877: PPUSH
8878: CALL_OW 275
8882: ST_TO_ADDR
// if cr then
8883: LD_VAR 0 11
8887: IFFALSE 9001
// begin if tmp2 and tmp2 < cr then
8889: LD_VAR 0 6
8893: PUSH
8894: LD_VAR 0 6
8898: PUSH
8899: LD_VAR 0 11
8903: LESS
8904: AND
8905: IFFALSE 8953
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8907: LD_VAR 0 2
8911: PPUSH
8912: CALL_OW 274
8916: PPUSH
8917: LD_INT 1
8919: PPUSH
8920: LD_VAR 0 11
8924: PUSH
8925: LD_VAR 0 6
8929: MINUS
8930: PPUSH
8931: CALL_OW 277
// cr := cr - tmp2 ;
8935: LD_ADDR_VAR 0 11
8939: PUSH
8940: LD_VAR 0 11
8944: PUSH
8945: LD_VAR 0 6
8949: MINUS
8950: ST_TO_ADDR
// end else
8951: GO 9001
// if tmp2 > cr then
8953: LD_VAR 0 6
8957: PUSH
8958: LD_VAR 0 11
8962: GREATER
8963: IFFALSE 9001
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8965: LD_VAR 0 2
8969: PPUSH
8970: CALL_OW 274
8974: PPUSH
8975: LD_INT 1
8977: PPUSH
8978: LD_VAR 0 6
8982: PUSH
8983: LD_VAR 0 11
8987: MINUS
8988: PPUSH
8989: CALL_OW 277
// cr := 0 ;
8993: LD_ADDR_VAR 0 11
8997: PUSH
8998: LD_INT 0
9000: ST_TO_ADDR
// end ; end ; if sb then
9001: LD_VAR 0 12
9005: IFFALSE 9119
// begin if tmp3 and tmp3 < sb then
9007: LD_VAR 0 7
9011: PUSH
9012: LD_VAR 0 7
9016: PUSH
9017: LD_VAR 0 12
9021: LESS
9022: AND
9023: IFFALSE 9071
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9025: LD_VAR 0 2
9029: PPUSH
9030: CALL_OW 274
9034: PPUSH
9035: LD_INT 3
9037: PPUSH
9038: LD_VAR 0 12
9042: PUSH
9043: LD_VAR 0 7
9047: MINUS
9048: PPUSH
9049: CALL_OW 277
// sb := sb - tmp3 ;
9053: LD_ADDR_VAR 0 12
9057: PUSH
9058: LD_VAR 0 12
9062: PUSH
9063: LD_VAR 0 7
9067: MINUS
9068: ST_TO_ADDR
// end else
9069: GO 9119
// if tmp3 > sb then
9071: LD_VAR 0 7
9075: PUSH
9076: LD_VAR 0 12
9080: GREATER
9081: IFFALSE 9119
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 274
9092: PPUSH
9093: LD_INT 3
9095: PPUSH
9096: LD_VAR 0 7
9100: PUSH
9101: LD_VAR 0 12
9105: MINUS
9106: PPUSH
9107: CALL_OW 277
// sb := 0 ;
9111: LD_ADDR_VAR 0 12
9115: PUSH
9116: LD_INT 0
9118: ST_TO_ADDR
// end ; end ; end ;
9119: GO 8834
9121: POP
9122: POP
// end ; end ; DialogueOff ;
9123: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9127: LD_INT 167
9129: PPUSH
9130: LD_INT 121
9132: PPUSH
9133: LD_INT 1
9135: PPUSH
9136: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9140: LD_EXP 24
9144: PPUSH
9145: LD_EXP 25
9149: PPUSH
9150: CALL_OW 120
// wait ( 0 0$1 ) ;
9154: LD_INT 35
9156: PPUSH
9157: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9161: LD_EXP 25
9165: PPUSH
9166: LD_INT 4
9168: PPUSH
9169: CALL_OW 113
// wait ( 0 0$3 ) ;
9173: LD_INT 105
9175: PPUSH
9176: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9180: LD_EXP 24
9184: PPUSH
9185: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9189: LD_EXP 25
9193: PPUSH
9194: CALL_OW 64
// wait ( 0 0$3 ) ;
9198: LD_INT 105
9200: PPUSH
9201: CALL_OW 67
// if payForHelp then
9205: LD_VAR 0 14
9209: IFFALSE 9267
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9211: LD_INT 36
9213: PPUSH
9214: LD_INT 57
9216: PPUSH
9217: LD_INT 1
9219: PPUSH
9220: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9224: LD_INT 51
9226: PPUSH
9227: LD_INT 63
9229: PPUSH
9230: LD_INT 1
9232: PPUSH
9233: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9237: LD_INT 93
9239: PPUSH
9240: LD_INT 65
9242: PPUSH
9243: LD_INT 1
9245: PPUSH
9246: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9250: LD_INT 42
9252: PPUSH
9253: LD_INT 12
9255: PPUSH
9256: LD_INT 1
9258: PPUSH
9259: CALL_OW 244
// PrepareLegionForPlayer ;
9263: CALL 4566 0 0
// end ; end ;
9267: LD_VAR 0 1
9271: RET
// every 0 0$10 trigger warWithLegion = 1 do
9272: LD_EXP 30
9276: PUSH
9277: LD_INT 1
9279: EQUAL
9280: IFFALSE 9289
9282: GO 9284
9284: DISABLE
// PrepareAttackLegion ;
9285: CALL 5230 0 0
9289: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9290: LD_EXP 15
9294: PPUSH
9295: CALL_OW 305
9299: PUSH
9300: LD_EXP 15
9304: PPUSH
9305: LD_INT 1
9307: PPUSH
9308: CALL_OW 289
9312: NOT
9313: AND
9314: PUSH
9315: LD_EXP 15
9319: PPUSH
9320: LD_INT 2
9322: PPUSH
9323: CALL_OW 289
9327: NOT
9328: AND
9329: PUSH
9330: LD_EXP 15
9334: PPUSH
9335: LD_INT 3
9337: PPUSH
9338: CALL_OW 289
9342: NOT
9343: AND
9344: IFFALSE 9361
9346: GO 9348
9348: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9349: LD_EXP 15
9353: PPUSH
9354: LD_INT 4
9356: PPUSH
9357: CALL_OW 235
9361: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9362: LD_EXP 16
9366: PPUSH
9367: CALL_OW 305
9371: PUSH
9372: LD_EXP 16
9376: PPUSH
9377: LD_INT 1
9379: PPUSH
9380: CALL_OW 289
9384: NOT
9385: AND
9386: PUSH
9387: LD_EXP 16
9391: PPUSH
9392: LD_INT 2
9394: PPUSH
9395: CALL_OW 289
9399: NOT
9400: AND
9401: PUSH
9402: LD_EXP 16
9406: PPUSH
9407: LD_INT 3
9409: PPUSH
9410: CALL_OW 289
9414: NOT
9415: AND
9416: IFFALSE 9433
9418: GO 9420
9420: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9421: LD_EXP 16
9425: PPUSH
9426: LD_INT 4
9428: PPUSH
9429: CALL_OW 235
9433: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9434: LD_EXP 17
9438: PPUSH
9439: CALL_OW 305
9443: PUSH
9444: LD_EXP 17
9448: PPUSH
9449: LD_INT 1
9451: PPUSH
9452: CALL_OW 289
9456: NOT
9457: AND
9458: PUSH
9459: LD_EXP 17
9463: PPUSH
9464: LD_INT 2
9466: PPUSH
9467: CALL_OW 289
9471: NOT
9472: AND
9473: PUSH
9474: LD_EXP 17
9478: PPUSH
9479: LD_INT 3
9481: PPUSH
9482: CALL_OW 289
9486: NOT
9487: AND
9488: IFFALSE 9505
9490: GO 9492
9492: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9493: LD_EXP 17
9497: PPUSH
9498: LD_INT 4
9500: PPUSH
9501: CALL_OW 235
9505: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9506: LD_EXP 18
9510: PPUSH
9511: CALL_OW 305
9515: PUSH
9516: LD_EXP 18
9520: PPUSH
9521: LD_INT 1
9523: PPUSH
9524: CALL_OW 289
9528: NOT
9529: AND
9530: PUSH
9531: LD_EXP 18
9535: PPUSH
9536: LD_INT 2
9538: PPUSH
9539: CALL_OW 289
9543: NOT
9544: AND
9545: PUSH
9546: LD_EXP 18
9550: PPUSH
9551: LD_INT 3
9553: PPUSH
9554: CALL_OW 289
9558: NOT
9559: AND
9560: IFFALSE 9577
9562: GO 9564
9564: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9565: LD_EXP 18
9569: PPUSH
9570: LD_INT 4
9572: PPUSH
9573: CALL_OW 235
9577: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9578: LD_EXP 19
9582: PPUSH
9583: CALL_OW 305
9587: PUSH
9588: LD_EXP 19
9592: PPUSH
9593: LD_INT 1
9595: PPUSH
9596: CALL_OW 289
9600: NOT
9601: AND
9602: PUSH
9603: LD_EXP 19
9607: PPUSH
9608: LD_INT 2
9610: PPUSH
9611: CALL_OW 289
9615: NOT
9616: AND
9617: PUSH
9618: LD_EXP 19
9622: PPUSH
9623: LD_INT 3
9625: PPUSH
9626: CALL_OW 289
9630: NOT
9631: AND
9632: PUSH
9633: LD_EXP 19
9637: PPUSH
9638: LD_INT 2
9640: PPUSH
9641: CALL_OW 289
9645: NOT
9646: AND
9647: IFFALSE 9664
9649: GO 9651
9651: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9652: LD_EXP 19
9656: PPUSH
9657: LD_INT 4
9659: PPUSH
9660: CALL_OW 235
9664: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9665: LD_EXP 20
9669: PPUSH
9670: CALL_OW 305
9674: PUSH
9675: LD_EXP 20
9679: PPUSH
9680: LD_INT 1
9682: PPUSH
9683: CALL_OW 289
9687: NOT
9688: AND
9689: PUSH
9690: LD_EXP 20
9694: PPUSH
9695: LD_INT 2
9697: PPUSH
9698: CALL_OW 289
9702: NOT
9703: AND
9704: PUSH
9705: LD_EXP 20
9709: PPUSH
9710: LD_INT 3
9712: PPUSH
9713: CALL_OW 289
9717: NOT
9718: AND
9719: IFFALSE 9736
9721: GO 9723
9723: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9724: LD_EXP 20
9728: PPUSH
9729: LD_INT 4
9731: PPUSH
9732: CALL_OW 235
9736: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9737: LD_EXP 21
9741: PPUSH
9742: CALL_OW 305
9746: PUSH
9747: LD_EXP 21
9751: PPUSH
9752: LD_INT 1
9754: PPUSH
9755: CALL_OW 289
9759: NOT
9760: AND
9761: PUSH
9762: LD_EXP 21
9766: PPUSH
9767: LD_INT 2
9769: PPUSH
9770: CALL_OW 289
9774: NOT
9775: AND
9776: PUSH
9777: LD_EXP 21
9781: PPUSH
9782: LD_INT 3
9784: PPUSH
9785: CALL_OW 289
9789: NOT
9790: AND
9791: IFFALSE 9808
9793: GO 9795
9795: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9796: LD_EXP 21
9800: PPUSH
9801: LD_INT 4
9803: PPUSH
9804: CALL_OW 235
9808: END
// every 0 0$1 do var i ;
9809: GO 9811
9811: DISABLE
9812: LD_INT 0
9814: PPUSH
// begin enable ;
9815: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9816: LD_ADDR_VAR 0 1
9820: PUSH
9821: LD_INT 22
9823: PUSH
9824: LD_INT 4
9826: PUSH
9827: EMPTY
9828: LIST
9829: LIST
9830: PPUSH
9831: CALL_OW 69
9835: PUSH
9836: FOR_IN
9837: IFFALSE 9876
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9839: LD_VAR 0 1
9843: PPUSH
9844: LD_INT 4
9846: PPUSH
9847: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9851: LD_VAR 0 1
9855: PPUSH
9856: LD_INT 4
9858: PPUSH
9859: CALL_OW 308
9863: IFFALSE 9874
// RemoveUnit ( i ) ;
9865: LD_VAR 0 1
9869: PPUSH
9870: CALL_OW 64
// end ;
9874: GO 9836
9876: POP
9877: POP
// end ;
9878: PPOPN 1
9880: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9881: LD_EXP 27
9885: PUSH
9886: LD_INT 1
9888: EQUAL
9889: IFFALSE 10328
9891: GO 9893
9893: DISABLE
9894: LD_INT 0
9896: PPUSH
9897: PPUSH
9898: PPUSH
// begin enable ;
9899: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9900: LD_ADDR_VAR 0 2
9904: PUSH
9905: LD_INT 12
9907: PPUSH
9908: LD_INT 22
9910: PUSH
9911: LD_INT 3
9913: PUSH
9914: EMPTY
9915: LIST
9916: LIST
9917: PUSH
9918: LD_INT 21
9920: PUSH
9921: LD_INT 2
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PPUSH
9932: CALL_OW 70
9936: ST_TO_ADDR
// for i in enemyVehs do
9937: LD_ADDR_VAR 0 1
9941: PUSH
9942: LD_VAR 0 2
9946: PUSH
9947: FOR_IN
9948: IFFALSE 10326
// begin if See ( 1 , i ) then
9950: LD_INT 1
9952: PPUSH
9953: LD_VAR 0 1
9957: PPUSH
9958: CALL_OW 292
9962: IFFALSE 10324
// begin disable ;
9964: DISABLE
// DialogueOn ;
9965: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9969: LD_VAR 0 1
9973: PPUSH
9974: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9978: LD_INT 22
9980: PUSH
9981: LD_INT 1
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: PUSH
9988: LD_INT 26
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 2
10000: PUSH
10001: LD_INT 25
10003: PUSH
10004: LD_INT 1
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: LD_INT 25
10013: PUSH
10014: LD_INT 2
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PUSH
10021: LD_INT 25
10023: PUSH
10024: LD_INT 3
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 25
10033: PUSH
10034: LD_INT 4
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: LD_INT 25
10043: PUSH
10044: LD_INT 5
10046: PUSH
10047: EMPTY
10048: LIST
10049: LIST
10050: PUSH
10051: LD_INT 25
10053: PUSH
10054: LD_INT 8
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: PUSH
10070: EMPTY
10071: LIST
10072: LIST
10073: LIST
10074: PPUSH
10075: CALL_OW 69
10079: PPUSH
10080: LD_STRING DT1-Sol1-1
10082: PPUSH
10083: LD_STRING DT1-FSol1-1
10085: PPUSH
10086: CALL 12343 0 3
// dec = ShowQuery2 ;
10090: LD_ADDR_VAR 0 3
10094: PUSH
10095: CALL 12886 0 0
10099: ST_TO_ADDR
// if dec = 1 then
10100: LD_VAR 0 3
10104: PUSH
10105: LD_INT 1
10107: EQUAL
10108: IFFALSE 10214
// begin Say ( JMM , D2-JMM-1 ) ;
10110: LD_EXP 1
10114: PPUSH
10115: LD_STRING D2-JMM-1
10117: PPUSH
10118: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10122: LD_EXP 22
10126: PPUSH
10127: LD_STRING D2-Pow-1
10129: PPUSH
10130: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10134: LD_EXP 1
10138: PPUSH
10139: LD_STRING D2a-JMM-1
10141: PPUSH
10142: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10146: LD_EXP 22
10150: PPUSH
10151: LD_STRING D2a-Pow-1
10153: PPUSH
10154: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10158: LD_EXP 1
10162: PPUSH
10163: LD_STRING D2a-JMM-2
10165: PPUSH
10166: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10170: LD_EXP 22
10174: PPUSH
10175: LD_STRING D2a-Pow-2
10177: PPUSH
10178: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10182: LD_EXP 1
10186: PPUSH
10187: LD_STRING D2a-JMM-3
10189: PPUSH
10190: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10194: LD_EXP 22
10198: PPUSH
10199: LD_STRING D2a-Pow-3
10201: PPUSH
10202: CALL_OW 94
// secondPass = 2 ;
10206: LD_ADDR_EXP 27
10210: PUSH
10211: LD_INT 2
10213: ST_TO_ADDR
// end ; if dec = 2 then
10214: LD_VAR 0 3
10218: PUSH
10219: LD_INT 2
10221: EQUAL
10222: IFFALSE 10316
// begin Say ( JMM , D2-JMM-1 ) ;
10224: LD_EXP 1
10228: PPUSH
10229: LD_STRING D2-JMM-1
10231: PPUSH
10232: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10236: LD_EXP 22
10240: PPUSH
10241: LD_STRING D2-Pow-1
10243: PPUSH
10244: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10248: LD_EXP 1
10252: PPUSH
10253: LD_STRING D2b-JMM-1
10255: PPUSH
10256: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10260: LD_EXP 22
10264: PPUSH
10265: LD_STRING D2b-Pow-1
10267: PPUSH
10268: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10272: LD_EXP 1
10276: PPUSH
10277: LD_STRING D2c-JMM-1
10279: PPUSH
10280: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10284: LD_EXP 22
10288: PPUSH
10289: LD_STRING D2c-Pow-1
10291: PPUSH
10292: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10296: LD_EXP 1
10300: PPUSH
10301: LD_STRING D2c-JMM-2
10303: PPUSH
10304: CALL_OW 88
// secondPass = 2 ;
10308: LD_ADDR_EXP 27
10312: PUSH
10313: LD_INT 2
10315: ST_TO_ADDR
// end ; DialogueOff ;
10316: CALL_OW 7
// exit ;
10320: POP
10321: POP
10322: GO 10328
// end ; end ;
10324: GO 9947
10326: POP
10327: POP
// end ;
10328: PPOPN 3
10330: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10331: LD_EXP 28
10335: PUSH
10336: LD_INT 1
10338: EQUAL
10339: PUSH
10340: LD_INT 11
10342: PPUSH
10343: LD_INT 22
10345: PUSH
10346: LD_INT 3
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PPUSH
10353: CALL_OW 70
10357: AND
10358: IFFALSE 10586
10360: GO 10362
10362: DISABLE
10363: LD_INT 0
10365: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10366: LD_ADDR_VAR 0 1
10370: PUSH
10371: LD_INT 11
10373: PPUSH
10374: LD_INT 22
10376: PUSH
10377: LD_INT 3
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PPUSH
10384: CALL_OW 70
10388: ST_TO_ADDR
// if not vehicles then
10389: LD_VAR 0 1
10393: NOT
10394: IFFALSE 10398
// exit ;
10396: GO 10586
// repeat wait ( 0 0$1 ) ;
10398: LD_INT 35
10400: PPUSH
10401: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10405: LD_VAR 0 1
10409: PPUSH
10410: LD_INT 101
10412: PUSH
10413: LD_INT 1
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: PPUSH
10420: CALL_OW 72
10424: IFFALSE 10398
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10426: LD_VAR 0 1
10430: PPUSH
10431: LD_INT 101
10433: PUSH
10434: LD_INT 1
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PPUSH
10441: CALL_OW 72
10445: PUSH
10446: LD_INT 1
10448: ARRAY
10449: PPUSH
10450: CALL_OW 87
// DialogueOn ;
10454: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10458: LD_INT 22
10460: PUSH
10461: LD_INT 1
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PUSH
10468: LD_INT 26
10470: PUSH
10471: LD_INT 1
10473: PUSH
10474: EMPTY
10475: LIST
10476: LIST
10477: PUSH
10478: LD_INT 2
10480: PUSH
10481: LD_INT 25
10483: PUSH
10484: LD_INT 1
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 25
10493: PUSH
10494: LD_INT 2
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 25
10503: PUSH
10504: LD_INT 3
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 25
10513: PUSH
10514: LD_INT 4
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 5
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: PUSH
10531: LD_INT 25
10533: PUSH
10534: LD_INT 8
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: LIST
10554: PPUSH
10555: CALL_OW 69
10559: PPUSH
10560: LD_STRING DT1-Sol1-1
10562: PPUSH
10563: LD_STRING DT1-FSol1-1
10565: PPUSH
10566: CALL 12343 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10570: LD_EXP 1
10574: PPUSH
10575: LD_STRING DT1-JMM-1
10577: PPUSH
10578: CALL_OW 88
// DialogueOff ;
10582: CALL_OW 7
// end ;
10586: PPOPN 1
10588: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10589: LD_EXP 28
10593: PUSH
10594: LD_INT 1
10596: EQUAL
10597: PUSH
10598: LD_INT 11
10600: PPUSH
10601: LD_INT 22
10603: PUSH
10604: LD_INT 3
10606: PUSH
10607: EMPTY
10608: LIST
10609: LIST
10610: PUSH
10611: LD_INT 50
10613: PUSH
10614: EMPTY
10615: LIST
10616: PUSH
10617: LD_INT 2
10619: PUSH
10620: LD_INT 21
10622: PUSH
10623: LD_INT 2
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: PUSH
10630: LD_INT 21
10632: PUSH
10633: LD_INT 1
10635: PUSH
10636: EMPTY
10637: LIST
10638: LIST
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: LIST
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: PPUSH
10650: CALL_OW 70
10654: PUSH
10655: LD_INT 0
10657: EQUAL
10658: AND
10659: PUSH
10660: LD_EXP 29
10664: AND
10665: IFFALSE 10822
10667: GO 10669
10669: DISABLE
// begin vehicleTeleported = 2 ;
10670: LD_ADDR_EXP 28
10674: PUSH
10675: LD_INT 2
10677: ST_TO_ADDR
// DialogueOn ;
10678: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10682: LD_EXP 1
10686: PPUSH
10687: LD_STRING DT1a-JMM-1
10689: PPUSH
10690: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10694: LD_INT 22
10696: PUSH
10697: LD_INT 1
10699: PUSH
10700: EMPTY
10701: LIST
10702: LIST
10703: PUSH
10704: LD_INT 26
10706: PUSH
10707: LD_INT 1
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: PUSH
10714: LD_INT 2
10716: PUSH
10717: LD_INT 25
10719: PUSH
10720: LD_INT 1
10722: PUSH
10723: EMPTY
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 25
10729: PUSH
10730: LD_INT 2
10732: PUSH
10733: EMPTY
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 25
10739: PUSH
10740: LD_INT 3
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 25
10749: PUSH
10750: LD_INT 4
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 25
10759: PUSH
10760: LD_INT 5
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 25
10769: PUSH
10770: LD_INT 8
10772: PUSH
10773: EMPTY
10774: LIST
10775: LIST
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: LIST
10790: PPUSH
10791: CALL_OW 69
10795: PPUSH
10796: LD_STRING DT1a-Sol1-1
10798: PPUSH
10799: LD_STRING DT1a-FSol1-1
10801: PPUSH
10802: CALL 12343 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10806: LD_EXP 1
10810: PPUSH
10811: LD_STRING DT1a-JMM-2
10813: PPUSH
10814: CALL_OW 88
// DialogueOff ;
10818: CALL_OW 7
// end ;
10822: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10823: LD_EXP 28
10827: PUSH
10828: LD_INT 3
10830: EQUAL
10831: PUSH
10832: LD_INT 11
10834: PPUSH
10835: LD_INT 22
10837: PUSH
10838: LD_INT 3
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 101
10847: PUSH
10848: LD_INT 1
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PPUSH
10859: CALL_OW 70
10863: AND
10864: IFFALSE 11138
10866: GO 10868
10868: DISABLE
10869: LD_INT 0
10871: PPUSH
10872: PPUSH
10873: PPUSH
// begin wait ( 0 0$0.3 ) ;
10874: LD_INT 10
10876: PPUSH
10877: CALL_OW 67
// DialogueOn ;
10881: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10885: LD_ADDR_VAR 0 3
10889: PUSH
10890: LD_INT 22
10892: PUSH
10893: LD_INT 1
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PUSH
10900: LD_INT 26
10902: PUSH
10903: LD_INT 1
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: PUSH
10910: LD_INT 2
10912: PUSH
10913: LD_INT 25
10915: PUSH
10916: LD_INT 1
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PUSH
10923: LD_INT 25
10925: PUSH
10926: LD_INT 2
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 25
10935: PUSH
10936: LD_INT 3
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: LD_INT 25
10945: PUSH
10946: LD_INT 4
10948: PUSH
10949: EMPTY
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 25
10955: PUSH
10956: LD_INT 5
10958: PUSH
10959: EMPTY
10960: LIST
10961: LIST
10962: PUSH
10963: LD_INT 25
10965: PUSH
10966: LD_INT 8
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: LIST
10986: PPUSH
10987: CALL_OW 69
10991: PPUSH
10992: LD_STRING DT2-Sol1-1
10994: PPUSH
10995: LD_STRING DT2-FSol1-1
10997: PPUSH
10998: CALL 12343 0 3
11002: ST_TO_ADDR
// DialogueOff ;
11003: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
11007: LD_INT 35
11009: PPUSH
11010: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11014: LD_INT 11
11016: PPUSH
11017: LD_INT 22
11019: PUSH
11020: LD_INT 3
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 50
11029: PUSH
11030: EMPTY
11031: LIST
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PPUSH
11037: CALL_OW 70
11041: NOT
11042: IFFALSE 11007
// wait ( 0 0$2 ) ;
11044: LD_INT 70
11046: PPUSH
11047: CALL_OW 67
// vehicleTeleported = 4 ;
11051: LD_ADDR_EXP 28
11055: PUSH
11056: LD_INT 4
11058: ST_TO_ADDR
// DialogueOn ;
11059: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11063: LD_EXP 1
11067: PPUSH
11068: LD_STRING DT2a-JMM-1
11070: PPUSH
11071: CALL_OW 88
// if speaker then
11075: LD_VAR 0 3
11079: IFFALSE 11122
// if GetSex ( speaker ) = 1 then
11081: LD_VAR 0 3
11085: PPUSH
11086: CALL_OW 258
11090: PUSH
11091: LD_INT 1
11093: EQUAL
11094: IFFALSE 11110
// Say ( speaker , DT2a-Sol1-1 ) else
11096: LD_VAR 0 3
11100: PPUSH
11101: LD_STRING DT2a-Sol1-1
11103: PPUSH
11104: CALL_OW 88
11108: GO 11122
// Say ( speaker , DT2a-FSol1-1 ) ;
11110: LD_VAR 0 3
11114: PPUSH
11115: LD_STRING DT2a-FSol1-1
11117: PPUSH
11118: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11122: LD_EXP 3
11126: PPUSH
11127: LD_STRING DT2a-Don-1
11129: PPUSH
11130: CALL_OW 88
// DialogueOff ;
11134: CALL_OW 7
// end ;
11138: PPOPN 3
11140: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11141: LD_INT 1
11143: PPUSH
11144: LD_INT 45
11146: PPUSH
11147: LD_INT 74
11149: PPUSH
11150: CALL_OW 293
11154: IFFALSE 11318
11156: GO 11158
11158: DISABLE
// begin DialogueOn ;
11159: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11163: LD_INT 36
11165: PPUSH
11166: LD_INT 55
11168: PPUSH
11169: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11173: LD_INT 22
11175: PUSH
11176: LD_INT 1
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: PUSH
11183: LD_INT 26
11185: PUSH
11186: LD_INT 1
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: PUSH
11193: LD_INT 2
11195: PUSH
11196: LD_INT 25
11198: PUSH
11199: LD_INT 1
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 25
11208: PUSH
11209: LD_INT 2
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 25
11218: PUSH
11219: LD_INT 3
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: PUSH
11226: LD_INT 25
11228: PUSH
11229: LD_INT 4
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: LD_INT 25
11238: PUSH
11239: LD_INT 5
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: LD_INT 25
11248: PUSH
11249: LD_INT 8
11251: PUSH
11252: EMPTY
11253: LIST
11254: LIST
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: PPUSH
11270: CALL_OW 69
11274: PPUSH
11275: LD_STRING D5-Sol1-1
11277: PPUSH
11278: LD_STRING D5-FSol1-
11280: PPUSH
11281: CALL 12343 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11285: LD_EXP 30
11289: PUSH
11290: LD_EXP 3
11294: PPUSH
11295: CALL_OW 302
11299: AND
11300: IFFALSE 11314
// Say ( Donaldson , D5-Don-1 ) ;
11302: LD_EXP 3
11306: PPUSH
11307: LD_STRING D5-Don-1
11309: PPUSH
11310: CALL_OW 88
// DialogueOff ;
11314: CALL_OW 7
// end ;
11318: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11319: LD_INT 1
11321: PPUSH
11322: LD_INT 10
11324: PPUSH
11325: CALL_OW 292
11329: PUSH
11330: LD_INT 1
11332: PPUSH
11333: LD_INT 137
11335: PPUSH
11336: CALL_OW 292
11340: OR
11341: IFFALSE 11485
11343: GO 11345
11345: DISABLE
// begin DialogueOn ;
11346: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11350: LD_INT 22
11352: PUSH
11353: LD_INT 1
11355: PUSH
11356: EMPTY
11357: LIST
11358: LIST
11359: PUSH
11360: LD_INT 26
11362: PUSH
11363: LD_INT 1
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: PUSH
11370: LD_INT 2
11372: PUSH
11373: LD_INT 25
11375: PUSH
11376: LD_INT 1
11378: PUSH
11379: EMPTY
11380: LIST
11381: LIST
11382: PUSH
11383: LD_INT 25
11385: PUSH
11386: LD_INT 2
11388: PUSH
11389: EMPTY
11390: LIST
11391: LIST
11392: PUSH
11393: LD_INT 25
11395: PUSH
11396: LD_INT 3
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: PUSH
11403: LD_INT 25
11405: PUSH
11406: LD_INT 4
11408: PUSH
11409: EMPTY
11410: LIST
11411: LIST
11412: PUSH
11413: LD_INT 25
11415: PUSH
11416: LD_INT 5
11418: PUSH
11419: EMPTY
11420: LIST
11421: LIST
11422: PUSH
11423: LD_INT 25
11425: PUSH
11426: LD_INT 8
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: LIST
11446: PPUSH
11447: CALL_OW 69
11451: PPUSH
11452: LD_STRING DT3-Sol1-1
11454: PPUSH
11455: LD_STRING DT3-FSol1-1
11457: PPUSH
11458: CALL 12343 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11462: LD_EXP 1
11466: PPUSH
11467: LD_STRING DT3-JMM-1
11469: PPUSH
11470: CALL_OW 88
// DialogueOff ;
11474: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11478: LD_STRING M2
11480: PPUSH
11481: CALL_OW 337
// end ;
11485: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11486: LD_EXP 42
11490: PUSH
11491: LD_INT 0
11493: EQUAL
11494: IFFALSE 11577
11496: GO 11498
11498: DISABLE
11499: LD_INT 0
11501: PPUSH
// begin enable ;
11502: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11503: LD_ADDR_VAR 0 1
11507: PUSH
11508: LD_INT 10
11510: PPUSH
11511: LD_INT 22
11513: PUSH
11514: LD_INT 3
11516: PUSH
11517: EMPTY
11518: LIST
11519: LIST
11520: PUSH
11521: LD_INT 21
11523: PUSH
11524: LD_INT 2
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: PUSH
11531: LD_INT 58
11533: PUSH
11534: EMPTY
11535: LIST
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: PPUSH
11542: CALL_OW 70
11546: PUSH
11547: FOR_IN
11548: IFFALSE 11575
// if GetLives ( i ) < 1000 then
11550: LD_VAR 0 1
11554: PPUSH
11555: CALL_OW 256
11559: PUSH
11560: LD_INT 1000
11562: LESS
11563: IFFALSE 11573
// ruEscape = 1 ;
11565: LD_ADDR_EXP 42
11569: PUSH
11570: LD_INT 1
11572: ST_TO_ADDR
11573: GO 11547
11575: POP
11576: POP
// end ;
11577: PPOPN 1
11579: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11580: LD_INT 3
11582: PPUSH
11583: CALL_OW 303
11587: PUSH
11588: LD_INT 4
11590: PPUSH
11591: CALL_OW 303
11595: OR
11596: PUSH
11597: LD_INT 22
11599: PPUSH
11600: LD_INT 22
11602: PUSH
11603: LD_INT 1
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: PPUSH
11610: CALL_OW 70
11614: PUSH
11615: LD_INT 0
11617: GREATER
11618: OR
11619: PUSH
11620: LD_EXP 42
11624: PUSH
11625: LD_INT 1
11627: EQUAL
11628: OR
11629: IFFALSE 11860
11631: GO 11633
11633: DISABLE
11634: LD_INT 0
11636: PPUSH
11637: PPUSH
11638: PPUSH
// begin ruAI = 0 ;
11639: LD_ADDR_EXP 41
11643: PUSH
11644: LD_INT 0
11646: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11647: LD_ADDR_VAR 0 3
11651: PUSH
11652: LD_INT 10
11654: PPUSH
11655: LD_INT 22
11657: PUSH
11658: LD_INT 3
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: PUSH
11665: LD_INT 21
11667: PUSH
11668: LD_INT 2
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: PUSH
11675: LD_INT 58
11677: PUSH
11678: EMPTY
11679: LIST
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: PPUSH
11686: CALL_OW 70
11690: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11691: LD_EXP 34
11695: PPUSH
11696: CALL_OW 122
// wait ( 0 0$1 ) ;
11700: LD_INT 35
11702: PPUSH
11703: CALL_OW 67
// DialogueOn ;
11707: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11711: LD_EXP 1
11715: PPUSH
11716: LD_STRING D6-JMM-1
11718: PPUSH
11719: CALL_OW 88
// DialogueOff ;
11723: CALL_OW 7
// if vehs > 0 then
11727: LD_VAR 0 3
11731: PUSH
11732: LD_INT 0
11734: GREATER
11735: IFFALSE 11805
// for i := 1 to RuScientists do
11737: LD_ADDR_VAR 0 1
11741: PUSH
11742: DOUBLE
11743: LD_INT 1
11745: DEC
11746: ST_TO_ADDR
11747: LD_EXP 34
11751: PUSH
11752: FOR_TO
11753: IFFALSE 11801
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11755: LD_EXP 34
11759: PUSH
11760: LD_VAR 0 1
11764: ARRAY
11765: PPUSH
11766: LD_INT 3
11768: PUSH
11769: LD_INT 60
11771: PUSH
11772: EMPTY
11773: LIST
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: PPUSH
11779: CALL_OW 72
11783: PPUSH
11784: LD_VAR 0 3
11788: PUSH
11789: LD_VAR 0 1
11793: ARRAY
11794: PPUSH
11795: CALL_OW 120
11799: GO 11752
11801: POP
11802: POP
11803: GO 11860
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11805: LD_EXP 34
11809: PUSH
11810: LD_VAR 0 1
11814: ARRAY
11815: PPUSH
11816: LD_INT 3
11818: PUSH
11819: LD_INT 60
11821: PUSH
11822: EMPTY
11823: LIST
11824: PUSH
11825: EMPTY
11826: LIST
11827: LIST
11828: PPUSH
11829: CALL_OW 72
11833: PPUSH
11834: LD_INT 13
11836: PUSH
11837: LD_INT 14
11839: PUSH
11840: EMPTY
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 1
11846: PPUSH
11847: LD_INT 2
11849: PPUSH
11850: CALL_OW 12
11854: ARRAY
11855: PPUSH
11856: CALL_OW 113
// end ;
11860: PPOPN 3
11862: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11863: LD_EXP 41
11867: PUSH
11868: LD_INT 0
11870: EQUAL
11871: IFFALSE 12243
11873: GO 11875
11875: DISABLE
11876: LD_INT 0
11878: PPUSH
11879: PPUSH
11880: PPUSH
11881: PPUSH
// begin enable ;
11882: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11883: LD_EXP 34
11887: PPUSH
11888: LD_INT 2
11890: PUSH
11891: LD_INT 95
11893: PUSH
11894: LD_INT 13
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 95
11903: PUSH
11904: LD_INT 14
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: LIST
11915: PPUSH
11916: CALL_OW 72
11920: PUSH
11921: LD_INT 33
11923: PUSH
11924: LD_INT 1
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 23
11933: PUSH
11934: LD_INT 3
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 2
11943: PUSH
11944: LD_INT 95
11946: PUSH
11947: LD_INT 13
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: PUSH
11954: LD_INT 95
11956: PUSH
11957: LD_INT 14
11959: PUSH
11960: EMPTY
11961: LIST
11962: LIST
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: LIST
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: LIST
11973: PPUSH
11974: CALL_OW 69
11978: OR
11979: IFFALSE 12168
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
11981: LD_ADDR_VAR 0 2
11985: PUSH
11986: LD_EXP 34
11990: PPUSH
11991: LD_INT 2
11993: PUSH
11994: LD_INT 95
11996: PUSH
11997: LD_INT 13
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: PUSH
12004: LD_INT 95
12006: PUSH
12007: LD_INT 14
12009: PUSH
12010: EMPTY
12011: LIST
12012: LIST
12013: PUSH
12014: EMPTY
12015: LIST
12016: LIST
12017: LIST
12018: PPUSH
12019: CALL_OW 72
12023: PUSH
12024: LD_INT 1
12026: ARRAY
12027: ST_TO_ADDR
// if not unit then
12028: LD_VAR 0 2
12032: NOT
12033: IFFALSE 12168
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
12035: LD_ADDR_VAR 0 4
12039: PUSH
12040: LD_INT 2
12042: PUSH
12043: LD_INT 95
12045: PUSH
12046: LD_INT 13
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 95
12055: PUSH
12056: LD_INT 14
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: LIST
12067: PUSH
12068: LD_INT 33
12070: PUSH
12071: LD_INT 1
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 23
12080: PUSH
12081: LD_INT 3
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: PUSH
12088: EMPTY
12089: LIST
12090: LIST
12091: LIST
12092: PPUSH
12093: CALL_OW 69
12097: ST_TO_ADDR
// if not tmp then
12098: LD_VAR 0 4
12102: NOT
12103: IFFALSE 12107
// exit ;
12105: GO 12243
// for i in tmp do
12107: LD_ADDR_VAR 0 1
12111: PUSH
12112: LD_VAR 0 4
12116: PUSH
12117: FOR_IN
12118: IFFALSE 12166
// if IsDrivenBy ( i ) in RuScientists then
12120: LD_VAR 0 1
12124: PPUSH
12125: CALL_OW 311
12129: PUSH
12130: LD_EXP 34
12134: IN
12135: IFFALSE 12164
// begin unit := IsDrivenBy ( i ) ;
12137: LD_ADDR_VAR 0 2
12141: PUSH
12142: LD_VAR 0 1
12146: PPUSH
12147: CALL_OW 311
12151: ST_TO_ADDR
// veh := i ;
12152: LD_ADDR_VAR 0 3
12156: PUSH
12157: LD_VAR 0 1
12161: ST_TO_ADDR
// break ;
12162: GO 12166
// end ;
12164: GO 12117
12166: POP
12167: POP
// end ; end ; if not unit then
12168: LD_VAR 0 2
12172: NOT
12173: IFFALSE 12177
// exit ;
12175: GO 12243
// RuScientists = RuScientists diff unit ;
12177: LD_ADDR_EXP 34
12181: PUSH
12182: LD_EXP 34
12186: PUSH
12187: LD_VAR 0 2
12191: DIFF
12192: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12193: LD_VAR 0 2
12197: PPUSH
12198: CALL_OW 64
// if veh then
12202: LD_VAR 0 3
12206: IFFALSE 12243
// begin if GetWeapon ( veh ) = 49 then
12208: LD_VAR 0 3
12212: PPUSH
12213: CALL_OW 264
12217: PUSH
12218: LD_INT 49
12220: EQUAL
12221: IFFALSE 12234
// KillUnit ( veh ) else
12223: LD_VAR 0 3
12227: PPUSH
12228: CALL_OW 66
12232: GO 12243
// RemoveUnit ( veh ) ;
12234: LD_VAR 0 3
12238: PPUSH
12239: CALL_OW 64
// end ; end ; end_of_file
12243: PPOPN 4
12245: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12246: LD_INT 0
12248: PPUSH
12249: PPUSH
// if exist_mode then
12250: LD_VAR 0 2
12254: IFFALSE 12273
// unit := CreateCharacter ( ident ) else
12256: LD_ADDR_VAR 0 4
12260: PUSH
12261: LD_VAR 0 1
12265: PPUSH
12266: CALL_OW 34
12270: ST_TO_ADDR
12271: GO 12288
// unit := NewCharacter ( ident ) ;
12273: LD_ADDR_VAR 0 4
12277: PUSH
12278: LD_VAR 0 1
12282: PPUSH
12283: CALL_OW 25
12287: ST_TO_ADDR
// result := unit ;
12288: LD_ADDR_VAR 0 3
12292: PUSH
12293: LD_VAR 0 4
12297: ST_TO_ADDR
// end ;
12298: LD_VAR 0 3
12302: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12303: LD_INT 0
12305: PPUSH
12306: PPUSH
// for i in charactersList do
12307: LD_ADDR_VAR 0 4
12311: PUSH
12312: LD_VAR 0 1
12316: PUSH
12317: FOR_IN
12318: IFFALSE 12336
// SaveCharacters ( i , ident ) ;
12320: LD_VAR 0 4
12324: PPUSH
12325: LD_VAR 0 2
12329: PPUSH
12330: CALL_OW 38
12334: GO 12317
12336: POP
12337: POP
// end ;
12338: LD_VAR 0 3
12342: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12343: LD_INT 0
12345: PPUSH
12346: PPUSH
12347: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12348: LD_ADDR_VAR 0 1
12352: PUSH
12353: LD_VAR 0 1
12357: PUSH
12358: LD_EXP 1
12362: PUSH
12363: LD_EXP 7
12367: PUSH
12368: LD_EXP 3
12372: PUSH
12373: LD_EXP 4
12377: PUSH
12378: LD_EXP 5
12382: PUSH
12383: LD_EXP 2
12387: PUSH
12388: LD_EXP 12
12392: PUSH
12393: LD_EXP 13
12397: PUSH
12398: LD_EXP 9
12402: PUSH
12403: LD_EXP 11
12407: PUSH
12408: LD_EXP 6
12412: PUSH
12413: LD_EXP 8
12417: PUSH
12418: LD_EXP 10
12422: PUSH
12423: LD_EXP 22
12427: PUSH
12428: EMPTY
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: DIFF
12444: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12445: LD_ADDR_VAR 0 6
12449: PUSH
12450: LD_VAR 0 1
12454: PUSH
12455: LD_INT 1
12457: PPUSH
12458: LD_VAR 0 1
12462: PPUSH
12463: CALL_OW 12
12467: ARRAY
12468: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12469: LD_VAR 0 6
12473: PPUSH
12474: CALL_OW 258
12478: PUSH
12479: LD_INT 1
12481: EQUAL
12482: IFFALSE 12500
// Say ( speaker , dialogMID ) else
12484: LD_VAR 0 6
12488: PPUSH
12489: LD_VAR 0 2
12493: PPUSH
12494: CALL_OW 88
12498: GO 12514
// Say ( speaker , dialogFID ) ;
12500: LD_VAR 0 6
12504: PPUSH
12505: LD_VAR 0 3
12509: PPUSH
12510: CALL_OW 88
// result := speaker ;
12514: LD_ADDR_VAR 0 4
12518: PUSH
12519: LD_VAR 0 6
12523: ST_TO_ADDR
// end ;
12524: LD_VAR 0 4
12528: RET
// export function PrepareDifficulty ; var tmp ; begin
12529: LD_INT 0
12531: PPUSH
12532: PPUSH
// if Difficulty = 1 then
12533: LD_OWVAR 67
12537: PUSH
12538: LD_INT 1
12540: EQUAL
12541: IFFALSE 12559
// begin RuSolMinLevel = 8 ;
12543: LD_ADDR_EXP 36
12547: PUSH
12548: LD_INT 8
12550: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12551: LD_ADDR_EXP 37
12555: PUSH
12556: LD_INT 10
12558: ST_TO_ADDR
// end ; if Difficulty = 2 then
12559: LD_OWVAR 67
12563: PUSH
12564: LD_INT 2
12566: EQUAL
12567: IFFALSE 12661
// begin RuSolMinLevel = 9 ;
12569: LD_ADDR_EXP 36
12573: PUSH
12574: LD_INT 9
12576: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12577: LD_ADDR_EXP 37
12581: PUSH
12582: LD_INT 10
12584: ST_TO_ADDR
// uc_nation = 3 ;
12585: LD_ADDR_OWVAR 21
12589: PUSH
12590: LD_INT 3
12592: ST_TO_ADDR
// uc_side = 3 ;
12593: LD_ADDR_OWVAR 20
12597: PUSH
12598: LD_INT 3
12600: ST_TO_ADDR
// bc_level = 10 ;
12601: LD_ADDR_OWVAR 43
12605: PUSH
12606: LD_INT 10
12608: ST_TO_ADDR
// bc_type = b_turret ;
12609: LD_ADDR_OWVAR 42
12613: PUSH
12614: LD_INT 33
12616: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12617: LD_ADDR_VAR 0 2
12621: PUSH
12622: LD_INT 86
12624: PPUSH
12625: LD_INT 34
12627: PPUSH
12628: LD_INT 2
12630: PPUSH
12631: CALL_OW 47
12635: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12636: LD_VAR 0 2
12640: PPUSH
12641: LD_INT 49
12643: PPUSH
12644: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12648: LD_INT 64
12650: PPUSH
12651: LD_INT 3
12653: PPUSH
12654: LD_INT 1
12656: PPUSH
12657: CALL_OW 322
// end ; if Difficulty = 3 then
12661: LD_OWVAR 67
12665: PUSH
12666: LD_INT 3
12668: EQUAL
12669: IFFALSE 12807
// begin RuSolMinLevel = 10 ;
12671: LD_ADDR_EXP 36
12675: PUSH
12676: LD_INT 10
12678: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12679: LD_ADDR_EXP 37
12683: PUSH
12684: LD_INT 10
12686: ST_TO_ADDR
// uc_nation = 3 ;
12687: LD_ADDR_OWVAR 21
12691: PUSH
12692: LD_INT 3
12694: ST_TO_ADDR
// uc_side = 3 ;
12695: LD_ADDR_OWVAR 20
12699: PUSH
12700: LD_INT 3
12702: ST_TO_ADDR
// bc_level = 10 ;
12703: LD_ADDR_OWVAR 43
12707: PUSH
12708: LD_INT 10
12710: ST_TO_ADDR
// bc_type = b_turret ;
12711: LD_ADDR_OWVAR 42
12715: PUSH
12716: LD_INT 33
12718: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12719: LD_ADDR_VAR 0 2
12723: PUSH
12724: LD_INT 86
12726: PPUSH
12727: LD_INT 34
12729: PPUSH
12730: LD_INT 2
12732: PPUSH
12733: CALL_OW 47
12737: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12738: LD_VAR 0 2
12742: PPUSH
12743: LD_INT 49
12745: PPUSH
12746: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12750: LD_ADDR_VAR 0 2
12754: PUSH
12755: LD_INT 93
12757: PPUSH
12758: LD_INT 31
12760: PPUSH
12761: LD_INT 2
12763: PPUSH
12764: CALL_OW 47
12768: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12769: LD_VAR 0 2
12773: PPUSH
12774: LD_INT 49
12776: PPUSH
12777: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12781: LD_INT 64
12783: PPUSH
12784: LD_INT 3
12786: PPUSH
12787: LD_INT 1
12789: PPUSH
12790: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12794: LD_INT 65
12796: PPUSH
12797: LD_INT 3
12799: PPUSH
12800: LD_INT 1
12802: PPUSH
12803: CALL_OW 322
// end ; end ;
12807: LD_VAR 0 1
12811: RET
// export function ShowQuery1 ; begin
12812: LD_INT 0
12814: PPUSH
// case query ( Q1 ) of 1 :
12815: LD_STRING Q1
12817: PPUSH
12818: CALL_OW 97
12822: PUSH
12823: LD_INT 1
12825: DOUBLE
12826: EQUAL
12827: IFTRUE 12831
12829: GO 12842
12831: POP
// result = 1 ; 2 :
12832: LD_ADDR_VAR 0 1
12836: PUSH
12837: LD_INT 1
12839: ST_TO_ADDR
12840: GO 12881
12842: LD_INT 2
12844: DOUBLE
12845: EQUAL
12846: IFTRUE 12850
12848: GO 12861
12850: POP
// result = 2 ; 3 :
12851: LD_ADDR_VAR 0 1
12855: PUSH
12856: LD_INT 2
12858: ST_TO_ADDR
12859: GO 12881
12861: LD_INT 3
12863: DOUBLE
12864: EQUAL
12865: IFTRUE 12869
12867: GO 12880
12869: POP
// result = 3 ; end ;
12870: LD_ADDR_VAR 0 1
12874: PUSH
12875: LD_INT 3
12877: ST_TO_ADDR
12878: GO 12881
12880: POP
// end ;
12881: LD_VAR 0 1
12885: RET
// export function ShowQuery2 ; begin
12886: LD_INT 0
12888: PPUSH
// case query ( Q1a ) of 1 :
12889: LD_STRING Q1a
12891: PPUSH
12892: CALL_OW 97
12896: PUSH
12897: LD_INT 1
12899: DOUBLE
12900: EQUAL
12901: IFTRUE 12905
12903: GO 12916
12905: POP
// result = 1 ; 2 :
12906: LD_ADDR_VAR 0 1
12910: PUSH
12911: LD_INT 1
12913: ST_TO_ADDR
12914: GO 12955
12916: LD_INT 2
12918: DOUBLE
12919: EQUAL
12920: IFTRUE 12924
12922: GO 12935
12924: POP
// result = 2 ; 3 :
12925: LD_ADDR_VAR 0 1
12929: PUSH
12930: LD_INT 2
12932: ST_TO_ADDR
12933: GO 12955
12935: LD_INT 3
12937: DOUBLE
12938: EQUAL
12939: IFTRUE 12943
12941: GO 12954
12943: POP
// result = 3 ; end ;
12944: LD_ADDR_VAR 0 1
12948: PUSH
12949: LD_INT 3
12951: ST_TO_ADDR
12952: GO 12955
12954: POP
// end ;
12955: LD_VAR 0 1
12959: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12960: LD_INT 0
12962: PPUSH
12963: PPUSH
12964: PPUSH
12965: PPUSH
12966: PPUSH
// for i = 1 to count do
12967: LD_ADDR_VAR 0 8
12971: PUSH
12972: DOUBLE
12973: LD_INT 1
12975: DEC
12976: ST_TO_ADDR
12977: LD_VAR 0 6
12981: PUSH
12982: FOR_TO
12983: IFFALSE 13064
// begin uc_side = side ;
12985: LD_ADDR_OWVAR 20
12989: PUSH
12990: LD_VAR 0 1
12994: ST_TO_ADDR
// uc_nation = nation ;
12995: LD_ADDR_OWVAR 21
12999: PUSH
13000: LD_VAR 0 2
13004: ST_TO_ADDR
// hc_gallery =  ;
13005: LD_ADDR_OWVAR 33
13009: PUSH
13010: LD_STRING 
13012: ST_TO_ADDR
// hc_name =  ;
13013: LD_ADDR_OWVAR 26
13017: PUSH
13018: LD_STRING 
13020: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13021: LD_INT 0
13023: PPUSH
13024: LD_VAR 0 5
13028: PPUSH
13029: LD_VAR 0 4
13033: PPUSH
13034: CALL_OW 380
// un = CreateHuman ;
13038: LD_ADDR_VAR 0 10
13042: PUSH
13043: CALL_OW 44
13047: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13048: LD_VAR 0 10
13052: PPUSH
13053: LD_VAR 0 3
13057: PPUSH
13058: CALL_OW 52
// end ;
13062: GO 12982
13064: POP
13065: POP
// end ;
13066: LD_VAR 0 7
13070: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
13071: LD_INT 0
13073: PPUSH
13074: PPUSH
13075: PPUSH
13076: PPUSH
13077: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13078: LD_ADDR_VAR 0 8
13082: PUSH
13083: LD_INT 48
13085: PUSH
13086: LD_INT 49
13088: PUSH
13089: LD_INT 50
13091: PUSH
13092: LD_INT 20
13094: PUSH
13095: LD_INT 1
13097: PUSH
13098: LD_INT 51
13100: PUSH
13101: LD_INT 52
13103: PUSH
13104: LD_INT 69
13106: PUSH
13107: LD_INT 39
13109: PUSH
13110: LD_INT 34
13112: PUSH
13113: LD_INT 40
13115: PUSH
13116: LD_INT 53
13118: PUSH
13119: LD_INT 71
13121: PUSH
13122: LD_INT 57
13124: PUSH
13125: LD_INT 58
13127: PUSH
13128: LD_INT 44
13130: PUSH
13131: LD_INT 32
13133: PUSH
13134: LD_INT 27
13136: PUSH
13137: LD_INT 23
13139: PUSH
13140: LD_INT 33
13142: PUSH
13143: LD_INT 59
13145: PUSH
13146: LD_INT 54
13148: PUSH
13149: LD_INT 55
13151: PUSH
13152: LD_INT 56
13154: PUSH
13155: LD_INT 63
13157: PUSH
13158: LD_INT 64
13160: PUSH
13161: LD_INT 65
13163: PUSH
13164: LD_INT 30
13166: PUSH
13167: LD_INT 31
13169: PUSH
13170: LD_INT 21
13172: PUSH
13173: LD_INT 22
13175: PUSH
13176: LD_INT 25
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: LIST
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: LIST
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13213: LD_ADDR_VAR 0 5
13217: PUSH
13218: DOUBLE
13219: LD_INT 1
13221: DEC
13222: ST_TO_ADDR
13223: LD_VAR 0 8
13227: PUSH
13228: FOR_TO
13229: IFFALSE 13305
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13231: LD_VAR 0 8
13235: PUSH
13236: LD_VAR 0 5
13240: ARRAY
13241: PPUSH
13242: LD_VAR 0 1
13246: PPUSH
13247: CALL_OW 321
13251: PUSH
13252: LD_INT 1
13254: EQUAL
13255: PUSH
13256: LD_VAR 0 8
13260: PUSH
13261: LD_VAR 0 5
13265: ARRAY
13266: PPUSH
13267: LD_VAR 0 3
13271: PPUSH
13272: CALL_OW 482
13276: PUSH
13277: LD_INT 1
13279: EQUAL
13280: AND
13281: IFFALSE 13303
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13283: LD_VAR 0 2
13287: PPUSH
13288: LD_VAR 0 8
13292: PUSH
13293: LD_VAR 0 5
13297: ARRAY
13298: PPUSH
13299: CALL_OW 184
13303: GO 13228
13305: POP
13306: POP
// end ;
13307: LD_VAR 0 4
13311: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13312: LD_INT 0
13314: PPUSH
13315: PPUSH
13316: PPUSH
13317: PPUSH
13318: PPUSH
13319: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13320: LD_ADDR_VAR 0 8
13324: PUSH
13325: LD_VAR 0 2
13329: PPUSH
13330: CALL_OW 313
13334: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13335: LD_ADDR_VAR 0 9
13339: PUSH
13340: LD_VAR 0 3
13344: PPUSH
13345: LD_INT 22
13347: PUSH
13348: LD_VAR 0 1
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 25
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 24
13369: PUSH
13370: LD_INT 750
13372: PUSH
13373: EMPTY
13374: LIST
13375: LIST
13376: PUSH
13377: LD_INT 3
13379: PUSH
13380: LD_INT 54
13382: PUSH
13383: EMPTY
13384: LIST
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: PPUSH
13396: CALL_OW 70
13400: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13401: LD_ADDR_VAR 0 6
13405: PUSH
13406: LD_VAR 0 3
13410: PPUSH
13411: LD_INT 22
13413: PUSH
13414: LD_VAR 0 1
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 21
13425: PUSH
13426: LD_INT 3
13428: PUSH
13429: EMPTY
13430: LIST
13431: LIST
13432: PUSH
13433: LD_INT 3
13435: PUSH
13436: LD_INT 24
13438: PUSH
13439: LD_INT 1000
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: LIST
13454: PUSH
13455: EMPTY
13456: LIST
13457: PPUSH
13458: CALL_OW 70
13462: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13463: LD_VAR 0 6
13467: NOT
13468: PUSH
13469: LD_INT 22
13471: PUSH
13472: LD_VAR 0 1
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 25
13483: PUSH
13484: LD_INT 2
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 24
13493: PUSH
13494: LD_INT 250
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: PPUSH
13506: CALL_OW 69
13510: NOT
13511: AND
13512: IFFALSE 13516
// exit ;
13514: GO 13698
// if buildings_list > 0 and engineerOkInside then
13516: LD_VAR 0 6
13520: PUSH
13521: LD_INT 0
13523: GREATER
13524: PUSH
13525: LD_VAR 0 8
13529: AND
13530: IFFALSE 13541
// ComExitBuilding ( engineerOkInside ) ;
13532: LD_VAR 0 8
13536: PPUSH
13537: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13541: LD_VAR 0 6
13545: PUSH
13546: LD_INT 0
13548: GREATER
13549: PUSH
13550: LD_VAR 0 9
13554: PUSH
13555: LD_INT 0
13557: GREATER
13558: AND
13559: IFFALSE 13579
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13561: LD_VAR 0 9
13565: PPUSH
13566: LD_VAR 0 6
13570: PUSH
13571: LD_INT 1
13573: ARRAY
13574: PPUSH
13575: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13579: LD_VAR 0 6
13583: PUSH
13584: LD_INT 0
13586: EQUAL
13587: PUSH
13588: LD_VAR 0 4
13592: PUSH
13593: LD_INT 0
13595: EQUAL
13596: AND
13597: PUSH
13598: LD_VAR 0 9
13602: PUSH
13603: LD_INT 0
13605: GREATER
13606: AND
13607: IFFALSE 13623
// ComEnterUnit ( engineerOkOutside , building ) ;
13609: LD_VAR 0 9
13613: PPUSH
13614: LD_VAR 0 2
13618: PPUSH
13619: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13623: LD_VAR 0 9
13627: PUSH
13628: LD_INT 0
13630: GREATER
13631: PUSH
13632: LD_VAR 0 6
13636: PUSH
13637: LD_INT 0
13639: EQUAL
13640: AND
13641: PUSH
13642: LD_VAR 0 4
13646: PUSH
13647: LD_INT 0
13649: GREATER
13650: AND
13651: IFFALSE 13698
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13653: LD_VAR 0 9
13657: PPUSH
13658: LD_VAR 0 4
13662: PUSH
13663: LD_INT 1
13665: ARRAY
13666: PPUSH
13667: LD_VAR 0 4
13671: PUSH
13672: LD_INT 2
13674: ARRAY
13675: PPUSH
13676: LD_VAR 0 4
13680: PUSH
13681: LD_INT 3
13683: ARRAY
13684: PPUSH
13685: LD_VAR 0 4
13689: PUSH
13690: LD_INT 4
13692: ARRAY
13693: PPUSH
13694: CALL_OW 145
// end ;
13698: LD_VAR 0 5
13702: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13703: LD_INT 0
13705: PPUSH
13706: PPUSH
13707: PPUSH
13708: PPUSH
13709: PPUSH
13710: PPUSH
13711: PPUSH
13712: PPUSH
13713: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13714: LD_ADDR_VAR 0 6
13718: PUSH
13719: LD_INT 22
13721: PUSH
13722: LD_VAR 0 1
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: PUSH
13731: LD_INT 25
13733: PUSH
13734: LD_INT 4
13736: PUSH
13737: EMPTY
13738: LIST
13739: LIST
13740: PUSH
13741: LD_INT 24
13743: PUSH
13744: LD_INT 251
13746: PUSH
13747: EMPTY
13748: LIST
13749: LIST
13750: PUSH
13751: EMPTY
13752: LIST
13753: LIST
13754: LIST
13755: PPUSH
13756: CALL_OW 69
13760: PUSH
13761: LD_EXP 34
13765: PUSH
13766: EMPTY
13767: LIST
13768: DIFF
13769: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13770: LD_ADDR_VAR 0 7
13774: PUSH
13775: LD_VAR 0 3
13779: PPUSH
13780: LD_INT 22
13782: PUSH
13783: LD_VAR 0 1
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: PUSH
13792: LD_INT 25
13794: PUSH
13795: LD_INT 4
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PUSH
13802: LD_INT 50
13804: PUSH
13805: EMPTY
13806: LIST
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: PPUSH
13813: CALL_OW 70
13817: PUSH
13818: LD_EXP 34
13822: PUSH
13823: EMPTY
13824: LIST
13825: DIFF
13826: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13827: LD_ADDR_VAR 0 10
13831: PUSH
13832: LD_VAR 0 3
13836: PPUSH
13837: LD_INT 22
13839: PUSH
13840: LD_VAR 0 1
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 21
13851: PUSH
13852: LD_INT 1
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 3
13861: PUSH
13862: LD_INT 24
13864: PUSH
13865: LD_INT 750
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: LIST
13880: PPUSH
13881: CALL_OW 70
13885: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13886: LD_ADDR_VAR 0 11
13890: PUSH
13891: LD_VAR 0 2
13895: PPUSH
13896: LD_INT 22
13898: PUSH
13899: LD_VAR 0 1
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: LD_INT 21
13910: PUSH
13911: LD_INT 1
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PUSH
13918: LD_INT 3
13920: PUSH
13921: LD_INT 24
13923: PUSH
13924: LD_INT 1000
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: EMPTY
13932: LIST
13933: LIST
13934: PUSH
13935: EMPTY
13936: LIST
13937: LIST
13938: LIST
13939: PPUSH
13940: CALL_OW 70
13944: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13945: LD_VAR 0 10
13949: PUSH
13950: LD_INT 0
13952: GREATER
13953: PUSH
13954: LD_VAR 0 6
13958: PUSH
13959: LD_INT 0
13961: GREATER
13962: AND
13963: IFFALSE 13979
// ComMoveToArea ( damageUnits , healArea ) ;
13965: LD_VAR 0 10
13969: PPUSH
13970: LD_VAR 0 2
13974: PPUSH
13975: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13979: LD_VAR 0 11
13983: PUSH
13984: LD_INT 0
13986: GREATER
13987: PUSH
13988: LD_VAR 0 7
13992: PUSH
13993: LD_INT 0
13995: GREATER
13996: AND
13997: IFFALSE 14017
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13999: LD_VAR 0 7
14003: PPUSH
14004: LD_VAR 0 11
14008: PUSH
14009: LD_INT 1
14011: ARRAY
14012: PPUSH
14013: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14017: LD_VAR 0 10
14021: PUSH
14022: LD_INT 0
14024: EQUAL
14025: PUSH
14026: LD_VAR 0 11
14030: PUSH
14031: LD_INT 0
14033: EQUAL
14034: AND
14035: PUSH
14036: LD_VAR 0 7
14040: PUSH
14041: LD_INT 0
14043: GREATER
14044: AND
14045: IFFALSE 14150
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14047: LD_ADDR_VAR 0 12
14051: PUSH
14052: LD_INT 22
14054: PUSH
14055: LD_VAR 0 1
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 21
14066: PUSH
14067: LD_INT 3
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: PUSH
14074: LD_INT 30
14076: PUSH
14077: LD_INT 8
14079: PUSH
14080: EMPTY
14081: LIST
14082: LIST
14083: PUSH
14084: EMPTY
14085: LIST
14086: LIST
14087: LIST
14088: PPUSH
14089: CALL_OW 69
14093: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14094: LD_ADDR_VAR 0 13
14098: PUSH
14099: LD_INT 1
14101: PPUSH
14102: LD_VAR 0 12
14106: PPUSH
14107: CALL_OW 12
14111: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14112: LD_VAR 0 7
14116: PPUSH
14117: LD_INT 3
14119: PUSH
14120: LD_INT 60
14122: PUSH
14123: EMPTY
14124: LIST
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: PPUSH
14130: CALL_OW 72
14134: PPUSH
14135: LD_VAR 0 12
14139: PUSH
14140: LD_VAR 0 13
14144: ARRAY
14145: PPUSH
14146: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14150: LD_VAR 0 3
14154: PPUSH
14155: LD_INT 22
14157: PUSH
14158: LD_VAR 0 1
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 25
14169: PUSH
14170: LD_INT 3
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: PUSH
14177: LD_INT 24
14179: PUSH
14180: LD_INT 751
14182: PUSH
14183: EMPTY
14184: LIST
14185: LIST
14186: PUSH
14187: EMPTY
14188: LIST
14189: LIST
14190: LIST
14191: PPUSH
14192: CALL_OW 70
14196: PUSH
14197: LD_INT 0
14199: GREATER
14200: PUSH
14201: LD_INT 21
14203: PPUSH
14204: CALL_OW 302
14208: AND
14209: PUSH
14210: LD_INT 21
14212: PPUSH
14213: CALL_OW 255
14217: PUSH
14218: LD_INT 3
14220: EQUAL
14221: AND
14222: IFFALSE 14278
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14224: LD_VAR 0 3
14228: PPUSH
14229: LD_INT 22
14231: PUSH
14232: LD_VAR 0 1
14236: PUSH
14237: EMPTY
14238: LIST
14239: LIST
14240: PUSH
14241: LD_INT 25
14243: PUSH
14244: LD_INT 3
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 24
14253: PUSH
14254: LD_INT 751
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: LIST
14265: PPUSH
14266: CALL_OW 70
14270: PPUSH
14271: LD_INT 21
14273: PPUSH
14274: CALL_OW 120
// end ;
14278: LD_VAR 0 5
14282: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14283: LD_INT 0
14285: PPUSH
14286: PPUSH
14287: PPUSH
14288: PPUSH
14289: PPUSH
14290: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14291: LD_ADDR_VAR 0 7
14295: PUSH
14296: LD_VAR 0 2
14300: PPUSH
14301: LD_INT 22
14303: PUSH
14304: LD_VAR 0 1
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: PUSH
14313: LD_INT 21
14315: PUSH
14316: LD_INT 2
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 34
14325: PUSH
14326: LD_INT 52
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: LIST
14337: PPUSH
14338: CALL_OW 70
14342: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14343: LD_ADDR_VAR 0 8
14347: PUSH
14348: LD_VAR 0 2
14352: PPUSH
14353: LD_INT 22
14355: PUSH
14356: LD_VAR 0 1
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: PUSH
14365: LD_INT 21
14367: PUSH
14368: LD_INT 3
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: LD_INT 3
14377: PUSH
14378: LD_INT 24
14380: PUSH
14381: LD_INT 1000
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: LIST
14396: PUSH
14397: EMPTY
14398: LIST
14399: PPUSH
14400: CALL_OW 70
14404: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14405: LD_VAR 0 8
14409: PUSH
14410: LD_INT 0
14412: GREATER
14413: PUSH
14414: LD_VAR 0 7
14418: PPUSH
14419: LD_INT 24
14421: PUSH
14422: LD_INT 750
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: PPUSH
14429: CALL_OW 72
14433: PUSH
14434: LD_INT 0
14436: GREATER
14437: AND
14438: IFFALSE 14458
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14440: LD_VAR 0 7
14444: PPUSH
14445: LD_VAR 0 8
14449: PUSH
14450: LD_INT 1
14452: ARRAY
14453: PPUSH
14454: CALL_OW 130
// end ;
14458: LD_VAR 0 3
14462: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14463: LD_INT 0
14465: PPUSH
14466: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14467: LD_INT 22
14469: PUSH
14470: LD_VAR 0 1
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 21
14481: PUSH
14482: LD_INT 2
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: PPUSH
14493: CALL_OW 69
14497: PUSH
14498: LD_INT 18
14500: PPUSH
14501: LD_INT 22
14503: PUSH
14504: LD_VAR 0 1
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 21
14515: PUSH
14516: LD_INT 2
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PPUSH
14527: CALL_OW 70
14531: PUSH
14532: LD_VAR 0 3
14536: LESSEQUAL
14537: DIFF
14538: IFFALSE 14605
// for i = 1 to vehCount do
14540: LD_ADDR_VAR 0 9
14544: PUSH
14545: DOUBLE
14546: LD_INT 1
14548: DEC
14549: ST_TO_ADDR
14550: LD_VAR 0 3
14554: PUSH
14555: FOR_TO
14556: IFFALSE 14603
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14558: LD_VAR 0 2
14562: PPUSH
14563: LD_VAR 0 7
14567: PPUSH
14568: LD_VAR 0 5
14572: PPUSH
14573: LD_VAR 0 6
14577: PPUSH
14578: LD_VAR 0 4
14582: PUSH
14583: LD_INT 1
14585: PPUSH
14586: LD_VAR 0 4
14590: PPUSH
14591: CALL_OW 12
14595: ARRAY
14596: PPUSH
14597: CALL_OW 185
14601: GO 14555
14603: POP
14604: POP
// end ;
14605: LD_VAR 0 8
14609: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14610: LD_INT 0
14612: PPUSH
14613: PPUSH
14614: PPUSH
14615: PPUSH
14616: PPUSH
14617: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14618: LD_ADDR_VAR 0 6
14622: PUSH
14623: LD_INT 22
14625: PUSH
14626: LD_VAR 0 1
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 25
14637: PUSH
14638: LD_INT 9
14640: PUSH
14641: EMPTY
14642: LIST
14643: LIST
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: PPUSH
14649: CALL_OW 69
14653: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14654: LD_ADDR_VAR 0 7
14658: PUSH
14659: LD_INT 81
14661: PUSH
14662: LD_VAR 0 1
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 3
14673: PUSH
14674: LD_INT 21
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: EMPTY
14685: LIST
14686: LIST
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PPUSH
14692: CALL_OW 69
14696: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14697: LD_ADDR_VAR 0 4
14701: PUSH
14702: LD_INT 1
14704: PPUSH
14705: LD_INT 3
14707: PPUSH
14708: CALL_OW 12
14712: ST_TO_ADDR
// for i = 1 to list do
14713: LD_ADDR_VAR 0 5
14717: PUSH
14718: DOUBLE
14719: LD_INT 1
14721: DEC
14722: ST_TO_ADDR
14723: LD_VAR 0 6
14727: PUSH
14728: FOR_TO
14729: IFFALSE 14931
// for ta in filter do
14731: LD_ADDR_VAR 0 3
14735: PUSH
14736: LD_VAR 0 7
14740: PUSH
14741: FOR_IN
14742: IFFALSE 14927
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14744: LD_VAR 0 6
14748: PUSH
14749: LD_VAR 0 5
14753: ARRAY
14754: PPUSH
14755: LD_VAR 0 3
14759: PPUSH
14760: CALL_OW 296
14764: PUSH
14765: LD_INT 15
14767: LESSEQUAL
14768: IFFALSE 14925
// begin case c of 1 :
14770: LD_VAR 0 4
14774: PUSH
14775: LD_INT 1
14777: DOUBLE
14778: EQUAL
14779: IFTRUE 14783
14781: GO 14821
14783: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14784: LD_VAR 0 6
14788: PUSH
14789: LD_VAR 0 5
14793: ARRAY
14794: PPUSH
14795: LD_VAR 0 3
14799: PPUSH
14800: CALL_OW 250
14804: PPUSH
14805: LD_VAR 0 3
14809: PPUSH
14810: CALL_OW 251
14814: PPUSH
14815: CALL_OW 154
14819: GO 14925
14821: LD_INT 2
14823: DOUBLE
14824: EQUAL
14825: IFTRUE 14829
14827: GO 14893
14829: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14830: LD_VAR 0 6
14834: PUSH
14835: LD_VAR 0 5
14839: ARRAY
14840: PPUSH
14841: LD_VAR 0 3
14845: PPUSH
14846: CALL_OW 250
14850: PUSH
14851: LD_INT 1
14853: NEG
14854: PPUSH
14855: LD_INT 1
14857: PPUSH
14858: CALL_OW 12
14862: PLUS
14863: PPUSH
14864: LD_VAR 0 3
14868: PPUSH
14869: CALL_OW 251
14873: PUSH
14874: LD_INT 1
14876: NEG
14877: PPUSH
14878: LD_INT 1
14880: PPUSH
14881: CALL_OW 12
14885: PLUS
14886: PPUSH
14887: CALL_OW 153
14891: GO 14925
14893: LD_INT 3
14895: DOUBLE
14896: EQUAL
14897: IFTRUE 14901
14899: GO 14924
14901: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14902: LD_VAR 0 6
14906: PUSH
14907: LD_VAR 0 5
14911: ARRAY
14912: PPUSH
14913: LD_VAR 0 3
14917: PPUSH
14918: CALL_OW 115
14922: GO 14925
14924: POP
// end ; end ;
14925: GO 14741
14927: POP
14928: POP
14929: GO 14728
14931: POP
14932: POP
// end ;
14933: LD_VAR 0 2
14937: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
// r := 100 ;
14944: LD_ADDR_VAR 0 5
14948: PUSH
14949: LD_INT 100
14951: ST_TO_ADDR
// x := 0 ;
14952: LD_ADDR_VAR 0 6
14956: PUSH
14957: LD_INT 0
14959: ST_TO_ADDR
// while ( x < n ) do
14960: LD_VAR 0 6
14964: PUSH
14965: LD_VAR 0 2
14969: LESS
14970: IFFALSE 15257
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14972: LD_ADDR_VAR 0 4
14976: PUSH
14977: DOUBLE
14978: LD_INT 1
14980: DEC
14981: ST_TO_ADDR
14982: LD_VAR 0 1
14986: PPUSH
14987: LD_INT 0
14989: PPUSH
14990: CALL_OW 517
14994: PUSH
14995: LD_INT 1
14997: ARRAY
14998: PUSH
14999: FOR_TO
15000: IFFALSE 15253
// begin if r > 50 then
15002: LD_VAR 0 5
15006: PUSH
15007: LD_INT 50
15009: GREATER
15010: IFFALSE 15229
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15012: LD_VAR 0 1
15016: PPUSH
15017: LD_INT 0
15019: PPUSH
15020: CALL_OW 517
15024: PUSH
15025: LD_INT 1
15027: ARRAY
15028: PUSH
15029: LD_VAR 0 4
15033: ARRAY
15034: PPUSH
15035: LD_VAR 0 1
15039: PPUSH
15040: LD_INT 0
15042: PPUSH
15043: CALL_OW 517
15047: PUSH
15048: LD_INT 2
15050: ARRAY
15051: PUSH
15052: LD_VAR 0 4
15056: ARRAY
15057: PPUSH
15058: CALL_OW 458
15062: NOT
15063: IFFALSE 15213
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15065: LD_VAR 0 1
15069: PPUSH
15070: LD_INT 0
15072: PPUSH
15073: CALL_OW 517
15077: PUSH
15078: LD_INT 1
15080: ARRAY
15081: PUSH
15082: LD_VAR 0 4
15086: ARRAY
15087: PPUSH
15088: LD_VAR 0 1
15092: PPUSH
15093: LD_INT 0
15095: PPUSH
15096: CALL_OW 517
15100: PUSH
15101: LD_INT 2
15103: ARRAY
15104: PUSH
15105: LD_VAR 0 4
15109: ARRAY
15110: PPUSH
15111: LD_INT 8
15113: PPUSH
15114: LD_INT 0
15116: PPUSH
15117: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15121: LD_ADDR_EXP 44
15125: PUSH
15126: LD_EXP 44
15130: PPUSH
15131: LD_INT 1
15133: PPUSH
15134: LD_VAR 0 1
15138: PPUSH
15139: LD_INT 0
15141: PPUSH
15142: CALL_OW 517
15146: PUSH
15147: LD_INT 1
15149: ARRAY
15150: PUSH
15151: LD_VAR 0 4
15155: ARRAY
15156: PUSH
15157: LD_VAR 0 1
15161: PPUSH
15162: LD_INT 0
15164: PPUSH
15165: CALL_OW 517
15169: PUSH
15170: LD_INT 2
15172: ARRAY
15173: PUSH
15174: LD_VAR 0 4
15178: ARRAY
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PPUSH
15184: CALL_OW 2
15188: ST_TO_ADDR
// r := 0 ;
15189: LD_ADDR_VAR 0 5
15193: PUSH
15194: LD_INT 0
15196: ST_TO_ADDR
// x := x + 1 ;
15197: LD_ADDR_VAR 0 6
15201: PUSH
15202: LD_VAR 0 6
15206: PUSH
15207: LD_INT 1
15209: PLUS
15210: ST_TO_ADDR
// end else
15211: GO 15227
// r := r + 35 ;
15213: LD_ADDR_VAR 0 5
15217: PUSH
15218: LD_VAR 0 5
15222: PUSH
15223: LD_INT 35
15225: PLUS
15226: ST_TO_ADDR
// end else
15227: GO 15251
// r := r + rand ( 10 , 25 ) ;
15229: LD_ADDR_VAR 0 5
15233: PUSH
15234: LD_VAR 0 5
15238: PUSH
15239: LD_INT 10
15241: PPUSH
15242: LD_INT 25
15244: PPUSH
15245: CALL_OW 12
15249: PLUS
15250: ST_TO_ADDR
// end ;
15251: GO 14999
15253: POP
15254: POP
15255: GO 14960
// end ;
15257: LD_VAR 0 3
15261: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15262: LD_INT 0
15264: PPUSH
15265: PPUSH
15266: PPUSH
15267: PPUSH
// tmpTab = [ ] ;
15268: LD_ADDR_VAR 0 6
15272: PUSH
15273: EMPTY
15274: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15275: LD_INT 22
15277: PUSH
15278: LD_VAR 0 1
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: LD_INT 30
15289: PUSH
15290: LD_INT 32
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PPUSH
15301: CALL_OW 69
15305: PUSH
15306: LD_INT 0
15308: GREATER
15309: IFFALSE 15392
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15311: LD_ADDR_VAR 0 4
15315: PUSH
15316: LD_INT 22
15318: PUSH
15319: LD_VAR 0 1
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 30
15330: PUSH
15331: LD_INT 32
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PPUSH
15342: CALL_OW 69
15346: PUSH
15347: FOR_IN
15348: IFFALSE 15390
// begin for j in UnitsInside ( i ) do
15350: LD_ADDR_VAR 0 5
15354: PUSH
15355: LD_VAR 0 4
15359: PPUSH
15360: CALL_OW 313
15364: PUSH
15365: FOR_IN
15366: IFFALSE 15386
// tmpTab = tmpTab ^ j ;
15368: LD_ADDR_VAR 0 6
15372: PUSH
15373: LD_VAR 0 6
15377: PUSH
15378: LD_VAR 0 5
15382: ADD
15383: ST_TO_ADDR
15384: GO 15365
15386: POP
15387: POP
// end ;
15388: GO 15347
15390: POP
15391: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15392: LD_VAR 0 6
15396: PPUSH
15397: LD_VAR 0 2
15401: PPUSH
15402: CALL_OW 250
15406: PPUSH
15407: LD_VAR 0 2
15411: PPUSH
15412: CALL_OW 251
15416: PPUSH
15417: CALL_OW 114
// end ;
15421: LD_VAR 0 3
15425: RET
// export function PrepareNature ; var i , un ; begin
15426: LD_INT 0
15428: PPUSH
15429: PPUSH
15430: PPUSH
// uc_side := 0 ;
15431: LD_ADDR_OWVAR 20
15435: PUSH
15436: LD_INT 0
15438: ST_TO_ADDR
// uc_nation := 0 ;
15439: LD_ADDR_OWVAR 21
15443: PUSH
15444: LD_INT 0
15446: ST_TO_ADDR
// InitHc ;
15447: CALL_OW 19
// hc_class := class_fish ;
15451: LD_ADDR_OWVAR 28
15455: PUSH
15456: LD_INT 20
15458: ST_TO_ADDR
// for i = 1 to 6 do
15459: LD_ADDR_VAR 0 2
15463: PUSH
15464: DOUBLE
15465: LD_INT 1
15467: DEC
15468: ST_TO_ADDR
15469: LD_INT 6
15471: PUSH
15472: FOR_TO
15473: IFFALSE 15492
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15475: CALL_OW 44
15479: PPUSH
15480: LD_INT 23
15482: PPUSH
15483: LD_INT 0
15485: PPUSH
15486: CALL_OW 49
15490: GO 15472
15492: POP
15493: POP
// for i = 1 to Difficulty + 2 do
15494: LD_ADDR_VAR 0 2
15498: PUSH
15499: DOUBLE
15500: LD_INT 1
15502: DEC
15503: ST_TO_ADDR
15504: LD_OWVAR 67
15508: PUSH
15509: LD_INT 2
15511: PLUS
15512: PUSH
15513: FOR_TO
15514: IFFALSE 15623
// begin hc_sex = sex_male ;
15516: LD_ADDR_OWVAR 27
15520: PUSH
15521: LD_INT 1
15523: ST_TO_ADDR
// uc_side = 0 ;
15524: LD_ADDR_OWVAR 20
15528: PUSH
15529: LD_INT 0
15531: ST_TO_ADDR
// uc_nation = nation_nature ;
15532: LD_ADDR_OWVAR 21
15536: PUSH
15537: LD_INT 0
15539: ST_TO_ADDR
// hc_class = class_tiger ;
15540: LD_ADDR_OWVAR 28
15544: PUSH
15545: LD_INT 14
15547: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15548: LD_ADDR_OWVAR 31
15552: PUSH
15553: LD_EXP 37
15557: PUSH
15558: LD_INT 0
15560: PUSH
15561: LD_INT 0
15563: PUSH
15564: LD_INT 0
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15573: LD_ADDR_OWVAR 35
15577: PUSH
15578: LD_INT 5
15580: NEG
15581: PPUSH
15582: LD_INT 5
15584: PPUSH
15585: CALL_OW 12
15589: PUSH
15590: LD_OWVAR 67
15594: MUL
15595: ST_TO_ADDR
// un = CreateHuman ;
15596: LD_ADDR_VAR 0 3
15600: PUSH
15601: CALL_OW 44
15605: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15606: LD_VAR 0 3
15610: PPUSH
15611: LD_INT 24
15613: PPUSH
15614: LD_INT 0
15616: PPUSH
15617: CALL_OW 49
// end ;
15621: GO 15513
15623: POP
15624: POP
// for i = 1 to rand ( 3 , 4 ) do
15625: LD_ADDR_VAR 0 2
15629: PUSH
15630: DOUBLE
15631: LD_INT 1
15633: DEC
15634: ST_TO_ADDR
15635: LD_INT 3
15637: PPUSH
15638: LD_INT 4
15640: PPUSH
15641: CALL_OW 12
15645: PUSH
15646: FOR_TO
15647: IFFALSE 15739
// begin hc_sex = sex_male ;
15649: LD_ADDR_OWVAR 27
15653: PUSH
15654: LD_INT 1
15656: ST_TO_ADDR
// uc_side = 0 ;
15657: LD_ADDR_OWVAR 20
15661: PUSH
15662: LD_INT 0
15664: ST_TO_ADDR
// uc_nation = nation_nature ;
15665: LD_ADDR_OWVAR 21
15669: PUSH
15670: LD_INT 0
15672: ST_TO_ADDR
// hc_class = 18 ;
15673: LD_ADDR_OWVAR 28
15677: PUSH
15678: LD_INT 18
15680: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15681: LD_ADDR_OWVAR 31
15685: PUSH
15686: LD_INT 0
15688: PUSH
15689: LD_INT 0
15691: PUSH
15692: LD_INT 0
15694: PUSH
15695: LD_INT 0
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: LIST
15703: ST_TO_ADDR
// hc_agressivity = 0 ;
15704: LD_ADDR_OWVAR 35
15708: PUSH
15709: LD_INT 0
15711: ST_TO_ADDR
// un = CreateHuman ;
15712: LD_ADDR_VAR 0 3
15716: PUSH
15717: CALL_OW 44
15721: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15722: LD_VAR 0 3
15726: PPUSH
15727: LD_INT 24
15729: PPUSH
15730: LD_INT 0
15732: PPUSH
15733: CALL_OW 49
// end ;
15737: GO 15646
15739: POP
15740: POP
// for i = 1 to rand ( 1 , 3 ) do
15741: LD_ADDR_VAR 0 2
15745: PUSH
15746: DOUBLE
15747: LD_INT 1
15749: DEC
15750: ST_TO_ADDR
15751: LD_INT 1
15753: PPUSH
15754: LD_INT 3
15756: PPUSH
15757: CALL_OW 12
15761: PUSH
15762: FOR_TO
15763: IFFALSE 15911
// begin hc_sex = sex_male ;
15765: LD_ADDR_OWVAR 27
15769: PUSH
15770: LD_INT 1
15772: ST_TO_ADDR
// uc_side = 0 ;
15773: LD_ADDR_OWVAR 20
15777: PUSH
15778: LD_INT 0
15780: ST_TO_ADDR
// uc_nation = nation_nature ;
15781: LD_ADDR_OWVAR 21
15785: PUSH
15786: LD_INT 0
15788: ST_TO_ADDR
// hc_class = class_apeman ;
15789: LD_ADDR_OWVAR 28
15793: PUSH
15794: LD_INT 12
15796: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
15797: LD_ADDR_OWVAR 31
15801: PUSH
15802: LD_EXP 36
15806: PPUSH
15807: LD_EXP 37
15811: PPUSH
15812: CALL_OW 12
15816: PUSH
15817: LD_EXP 36
15821: PPUSH
15822: LD_EXP 37
15826: PPUSH
15827: CALL_OW 12
15831: PUSH
15832: LD_EXP 36
15836: PPUSH
15837: LD_EXP 37
15841: PPUSH
15842: CALL_OW 12
15846: PUSH
15847: LD_EXP 36
15851: PPUSH
15852: LD_EXP 37
15856: PPUSH
15857: CALL_OW 12
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
15868: LD_ADDR_OWVAR 35
15872: PUSH
15873: LD_INT 1
15875: PPUSH
15876: LD_INT 20
15878: PPUSH
15879: CALL_OW 12
15883: ST_TO_ADDR
// un = CreateHuman ;
15884: LD_ADDR_VAR 0 3
15888: PUSH
15889: CALL_OW 44
15893: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15894: LD_VAR 0 3
15898: PPUSH
15899: LD_INT 24
15901: PPUSH
15902: LD_INT 0
15904: PPUSH
15905: CALL_OW 49
// end ;
15909: GO 15762
15911: POP
15912: POP
// end ; end_of_file
15913: LD_VAR 0 1
15917: RET
// on UnitDestroyed ( unit ) do var i ;
15918: LD_INT 0
15920: PPUSH
// begin if unit in russianTanks then
15921: LD_VAR 0 1
15925: PUSH
15926: LD_EXP 39
15930: IN
15931: IFFALSE 15949
// russianTanks := russianTanks diff unit ;
15933: LD_ADDR_EXP 39
15937: PUSH
15938: LD_EXP 39
15942: PUSH
15943: LD_VAR 0 1
15947: DIFF
15948: ST_TO_ADDR
// if unit in russianTimeLapsers then
15949: LD_VAR 0 1
15953: PUSH
15954: LD_EXP 40
15958: IN
15959: IFFALSE 15977
// russianTimeLapsers := russianTimeLapsers diff unit ;
15961: LD_ADDR_EXP 40
15965: PUSH
15966: LD_EXP 40
15970: PUSH
15971: LD_VAR 0 1
15975: DIFF
15976: ST_TO_ADDR
// if unit in RuScientists then
15977: LD_VAR 0 1
15981: PUSH
15982: LD_EXP 34
15986: IN
15987: IFFALSE 16019
// begin RuScientists = RuScientists diff unit ;
15989: LD_ADDR_EXP 34
15993: PUSH
15994: LD_EXP 34
15998: PUSH
15999: LD_VAR 0 1
16003: DIFF
16004: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16005: LD_ADDR_EXP 35
16009: PUSH
16010: LD_EXP 35
16014: PUSH
16015: LD_INT 1
16017: PLUS
16018: ST_TO_ADDR
// end ; end ;
16019: PPOPN 2
16021: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16022: LD_VAR 0 3
16026: PPUSH
16027: CALL_OW 264
16031: PUSH
16032: LD_INT 9
16034: EQUAL
16035: IFFALSE 16051
// laserCounterDestroy := laserCounterDestroy + 1 ;
16037: LD_ADDR_EXP 50
16041: PUSH
16042: LD_EXP 50
16046: PUSH
16047: LD_INT 1
16049: PLUS
16050: ST_TO_ADDR
// end ;
16051: PPOPN 3
16053: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16054: LD_VAR 0 1
16058: PUSH
16059: LD_INT 10
16061: EQUAL
16062: PUSH
16063: LD_VAR 0 2
16067: PPUSH
16068: CALL_OW 255
16072: PUSH
16073: LD_INT 1
16075: EQUAL
16076: AND
16077: PUSH
16078: LD_EXP 47
16082: PUSH
16083: LD_INT 0
16085: EQUAL
16086: AND
16087: IFFALSE 16199
// begin eventVar1 = 1 ;
16089: LD_ADDR_EXP 47
16093: PUSH
16094: LD_INT 1
16096: ST_TO_ADDR
// teleportExplored = 1 ;
16097: LD_ADDR_EXP 33
16101: PUSH
16102: LD_INT 1
16104: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16105: LD_STRING M2a
16107: PPUSH
16108: CALL_OW 337
// wait ( 0 0$2 ) ;
16112: LD_INT 70
16114: PPUSH
16115: CALL_OW 67
// DialogueOn ;
16119: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16123: LD_INT 22
16125: PUSH
16126: LD_INT 1
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: PUSH
16133: LD_INT 21
16135: PUSH
16136: LD_INT 1
16138: PUSH
16139: EMPTY
16140: LIST
16141: LIST
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PPUSH
16147: CALL_OW 69
16151: PPUSH
16152: LD_STRING DT3a-Sol1-1
16154: PPUSH
16155: LD_STRING DT3a-FSol1-1
16157: PPUSH
16158: CALL 12343 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16162: LD_EXP 1
16166: PPUSH
16167: LD_STRING DT3a-JMM-1
16169: PPUSH
16170: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16174: LD_VAR 0 2
16178: PPUSH
16179: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16183: LD_EXP 1
16187: PPUSH
16188: LD_STRING DT3a-JMM-1a
16190: PPUSH
16191: CALL_OW 88
// DialogueOff ;
16195: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16199: LD_VAR 0 1
16203: PUSH
16204: LD_INT 10
16206: EQUAL
16207: PUSH
16208: LD_VAR 0 2
16212: PPUSH
16213: CALL_OW 247
16217: PUSH
16218: LD_INT 2
16220: EQUAL
16221: AND
16222: PUSH
16223: LD_VAR 0 2
16227: PPUSH
16228: CALL_OW 255
16232: PUSH
16233: LD_INT 3
16235: EQUAL
16236: AND
16237: PUSH
16238: LD_EXP 28
16242: PUSH
16243: LD_INT 0
16245: EQUAL
16246: AND
16247: IFFALSE 16264
// begin wait ( 0 0$3 ) ;
16249: LD_INT 105
16251: PPUSH
16252: CALL_OW 67
// vehicleTeleported = 1 ;
16256: LD_ADDR_EXP 28
16260: PUSH
16261: LD_INT 1
16263: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16264: LD_VAR 0 1
16268: PUSH
16269: LD_INT 10
16271: EQUAL
16272: PUSH
16273: LD_VAR 0 2
16277: PPUSH
16278: CALL_OW 247
16282: PUSH
16283: LD_INT 2
16285: EQUAL
16286: AND
16287: PUSH
16288: LD_VAR 0 2
16292: PPUSH
16293: CALL_OW 255
16297: PUSH
16298: LD_INT 3
16300: EQUAL
16301: AND
16302: PUSH
16303: LD_EXP 28
16307: PUSH
16308: LD_INT 2
16310: EQUAL
16311: AND
16312: IFFALSE 16329
// begin wait ( 0 0$3 ) ;
16314: LD_INT 105
16316: PPUSH
16317: CALL_OW 67
// vehicleTeleported = 3 ;
16321: LD_ADDR_EXP 28
16325: PUSH
16326: LD_INT 3
16328: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16329: LD_VAR 0 1
16333: PUSH
16334: LD_INT 10
16336: EQUAL
16337: PUSH
16338: LD_VAR 0 2
16342: PPUSH
16343: CALL_OW 247
16347: PUSH
16348: LD_INT 2
16350: EQUAL
16351: AND
16352: PUSH
16353: LD_VAR 0 2
16357: PPUSH
16358: CALL_OW 255
16362: PUSH
16363: LD_INT 3
16365: EQUAL
16366: AND
16367: IFFALSE 16383
// tpCounter = tpCounter + 1 ;
16369: LD_ADDR_EXP 29
16373: PUSH
16374: LD_EXP 29
16378: PUSH
16379: LD_INT 1
16381: PLUS
16382: ST_TO_ADDR
// end ;
16383: PPOPN 2
16385: END
// on VehicleConstructed ( vehicle , factory ) do begin if GetWeapon ( vehicle ) = us_rocket_launcher then
16386: LD_VAR 0 1
16390: PPUSH
16391: CALL_OW 264
16395: PUSH
16396: LD_INT 7
16398: EQUAL
16399: IFFALSE 16409
// rocketBuilded := true ;
16401: LD_ADDR_EXP 51
16405: PUSH
16406: LD_INT 1
16408: ST_TO_ADDR
// if factory = ru_fact or factory = rufab2 then
16409: LD_VAR 0 2
16413: PUSH
16414: LD_INT 21
16416: EQUAL
16417: PUSH
16418: LD_VAR 0 2
16422: PUSH
16423: LD_INT 112
16425: EQUAL
16426: OR
16427: IFFALSE 16548
// if GetSide ( vehicle ) = 3 then
16429: LD_VAR 0 1
16433: PPUSH
16434: CALL_OW 255
16438: PUSH
16439: LD_INT 3
16441: EQUAL
16442: IFFALSE 16548
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16444: LD_VAR 0 1
16448: PPUSH
16449: CALL_OW 264
16453: PUSH
16454: LD_INT 46
16456: EQUAL
16457: PUSH
16458: LD_VAR 0 1
16462: PPUSH
16463: CALL_OW 264
16467: PUSH
16468: LD_INT 45
16470: EQUAL
16471: OR
16472: PUSH
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL_OW 264
16482: PUSH
16483: LD_INT 44
16485: EQUAL
16486: OR
16487: IFFALSE 16505
// begin russianTanks = russianTanks ^ vehicle ;
16489: LD_ADDR_EXP 39
16493: PUSH
16494: LD_EXP 39
16498: PUSH
16499: LD_VAR 0 1
16503: ADD
16504: ST_TO_ADDR
// end ; if GetWeapon ( vehicle ) = 49 then
16505: LD_VAR 0 1
16509: PPUSH
16510: CALL_OW 264
16514: PUSH
16515: LD_INT 49
16517: EQUAL
16518: IFFALSE 16548
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
16520: LD_ADDR_EXP 40
16524: PUSH
16525: LD_EXP 40
16529: PUSH
16530: LD_VAR 0 1
16534: ADD
16535: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16536: LD_VAR 0 1
16540: PPUSH
16541: LD_INT 137
16543: PPUSH
16544: CALL_OW 120
// end ; end ; end ;
16548: PPOPN 2
16550: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16551: LD_INT 0
16553: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16554: LD_VAR 0 2
16558: PPUSH
16559: CALL_OW 255
16563: PUSH
16564: LD_INT 3
16566: EQUAL
16567: PUSH
16568: LD_VAR 0 2
16572: PPUSH
16573: CALL_OW 257
16577: PUSH
16578: LD_INT 3
16580: EQUAL
16581: AND
16582: PUSH
16583: LD_INT 21
16585: PPUSH
16586: CALL_OW 255
16590: PUSH
16591: LD_INT 3
16593: EQUAL
16594: AND
16595: PUSH
16596: LD_INT 21
16598: PPUSH
16599: CALL_OW 302
16603: AND
16604: IFFALSE 16618
// ComEnterUnit ( human , ru_fact ) ;
16606: LD_VAR 0 2
16610: PPUSH
16611: LD_INT 21
16613: PPUSH
16614: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
16618: LD_VAR 0 2
16622: PPUSH
16623: CALL_OW 257
16627: PUSH
16628: LD_INT 4
16630: EQUAL
16631: PUSH
16632: LD_VAR 0 2
16636: PPUSH
16637: CALL_OW 255
16641: PUSH
16642: LD_INT 3
16644: EQUAL
16645: AND
16646: PUSH
16647: LD_EXP 41
16651: PUSH
16652: LD_INT 0
16654: EQUAL
16655: AND
16656: IFFALSE 16718
// for i in RuScientists do
16658: LD_ADDR_VAR 0 3
16662: PUSH
16663: LD_EXP 34
16667: PUSH
16668: FOR_IN
16669: IFFALSE 16716
// if i = human then
16671: LD_VAR 0 3
16675: PUSH
16676: LD_VAR 0 2
16680: EQUAL
16681: IFFALSE 16714
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16683: LD_VAR 0 3
16687: PPUSH
16688: LD_INT 13
16690: PUSH
16691: LD_INT 14
16693: PUSH
16694: EMPTY
16695: LIST
16696: LIST
16697: PUSH
16698: LD_INT 1
16700: PPUSH
16701: LD_INT 2
16703: PPUSH
16704: CALL_OW 12
16708: ARRAY
16709: PPUSH
16710: CALL_OW 113
16714: GO 16668
16716: POP
16717: POP
// end ;
16718: PPOPN 3
16720: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
16721: LD_INT 0
16723: PPUSH
16724: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
16725: LD_VAR 0 2
16729: PPUSH
16730: CALL_OW 255
16734: PUSH
16735: LD_INT 3
16737: EQUAL
16738: PUSH
16739: LD_VAR 0 2
16743: PPUSH
16744: CALL_OW 257
16748: PUSH
16749: LD_INT 4
16751: EQUAL
16752: AND
16753: IFFALSE 16895
// for i in RuScientists do
16755: LD_ADDR_VAR 0 3
16759: PUSH
16760: LD_EXP 34
16764: PUSH
16765: FOR_IN
16766: IFFALSE 16893
// if i = human then
16768: LD_VAR 0 3
16772: PUSH
16773: LD_VAR 0 2
16777: EQUAL
16778: IFFALSE 16891
// if IsOk ( rutp ) then
16780: LD_INT 137
16782: PPUSH
16783: CALL_OW 302
16787: IFFALSE 16860
// begin rnd = rand ( 1 , 2 ) ;
16789: LD_ADDR_VAR 0 4
16793: PUSH
16794: LD_INT 1
16796: PPUSH
16797: LD_INT 2
16799: PPUSH
16800: CALL_OW 12
16804: ST_TO_ADDR
// if rnd = 1 then
16805: LD_VAR 0 4
16809: PUSH
16810: LD_INT 1
16812: EQUAL
16813: IFFALSE 16827
// ComEnterUnit ( vehicle , rutp ) ;
16815: LD_VAR 0 1
16819: PPUSH
16820: LD_INT 137
16822: PPUSH
16823: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16827: LD_VAR 0 1
16831: PPUSH
16832: LD_INT 13
16834: PUSH
16835: LD_INT 14
16837: PUSH
16838: EMPTY
16839: LIST
16840: LIST
16841: PUSH
16842: LD_INT 1
16844: PPUSH
16845: LD_INT 2
16847: PPUSH
16848: CALL_OW 12
16852: ARRAY
16853: PPUSH
16854: CALL_OW 173
// end else
16858: GO 16891
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
16860: LD_VAR 0 1
16864: PPUSH
16865: LD_INT 13
16867: PUSH
16868: LD_INT 14
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 1
16877: PPUSH
16878: LD_INT 2
16880: PPUSH
16881: CALL_OW 12
16885: ARRAY
16886: PPUSH
16887: CALL_OW 113
// end ;
16891: GO 16765
16893: POP
16894: POP
// end ;
16895: PPOPN 4
16897: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16898: LD_VAR 0 1
16902: PPUSH
16903: CALL 30775 0 1
// end ; end_of_file
16907: PPOPN 1
16909: END
// every 0 0$1 trigger ruAI = 1 do
16910: LD_EXP 41
16914: PUSH
16915: LD_INT 1
16917: EQUAL
16918: IFFALSE 17030
16920: GO 16922
16922: DISABLE
// begin enable ;
16923: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16924: LD_INT 3
16926: PPUSH
16927: LD_INT 6
16929: PPUSH
16930: LD_INT 9
16932: PPUSH
16933: LD_EXP 38
16937: PPUSH
16938: CALL 13312 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16942: LD_INT 3
16944: PPUSH
16945: LD_INT 4
16947: PPUSH
16948: LD_INT 10
16950: PPUSH
16951: LD_EXP 38
16955: PPUSH
16956: CALL 13312 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16960: LD_INT 3
16962: PPUSH
16963: LD_INT 9
16965: PPUSH
16966: CALL 14283 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16970: LD_INT 3
16972: PPUSH
16973: LD_INT 10
16975: PPUSH
16976: CALL 14283 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16980: LD_INT 3
16982: PPUSH
16983: LD_INT 16
16985: PPUSH
16986: LD_INT 9
16988: PPUSH
16989: LD_INT 91
16991: PPUSH
16992: CALL 13703 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16996: LD_INT 3
16998: PPUSH
16999: LD_INT 17
17001: PPUSH
17002: LD_INT 10
17004: PPUSH
17005: LD_INT 47
17007: PUSH
17008: LD_INT 129
17010: PUSH
17011: LD_INT 135
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: LIST
17018: PPUSH
17019: CALL 13703 0 4
// IntBazooka ( 3 ) ;
17023: LD_INT 3
17025: PPUSH
17026: CALL 14610 0 1
// end ;
17030: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
17031: LD_EXP 39
17035: PUSH
17036: LD_INT 3
17038: PUSH
17039: LD_INT 4
17041: PUSH
17042: LD_INT 4
17044: PUSH
17045: EMPTY
17046: LIST
17047: LIST
17048: LIST
17049: PUSH
17050: LD_OWVAR 67
17054: ARRAY
17055: GREATEREQUAL
17056: IFFALSE 17528
17058: GO 17060
17060: DISABLE
17061: LD_INT 0
17063: PPUSH
17064: PPUSH
17065: PPUSH
17066: PPUSH
// begin enable ;
17067: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
17068: LD_ADDR_VAR 0 2
17072: PUSH
17073: LD_EXP 39
17077: PUSH
17078: LD_EXP 40
17082: UNION
17083: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
17084: LD_ADDR_EXP 39
17088: PUSH
17089: LD_EXP 39
17093: PUSH
17094: LD_VAR 0 2
17098: DIFF
17099: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
17100: LD_ADDR_EXP 40
17104: PUSH
17105: LD_EXP 40
17109: PUSH
17110: LD_VAR 0 2
17114: DIFF
17115: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17116: LD_INT 10
17118: PPUSH
17119: CALL_OW 302
17123: IFFALSE 17206
// begin for j in tmp do
17125: LD_ADDR_VAR 0 1
17129: PUSH
17130: LD_VAR 0 2
17134: PUSH
17135: FOR_IN
17136: IFFALSE 17179
// if attackTactic < 2 then
17138: LD_EXP 43
17142: PUSH
17143: LD_INT 2
17145: LESS
17146: IFFALSE 17162
// ComEnterUnit ( j , ruteleprt ) else
17148: LD_VAR 0 1
17152: PPUSH
17153: LD_INT 10
17155: PPUSH
17156: CALL_OW 120
17160: GO 17177
// ComMoveXY ( j , 88 , 69 ) ;
17162: LD_VAR 0 1
17166: PPUSH
17167: LD_INT 88
17169: PPUSH
17170: LD_INT 69
17172: PPUSH
17173: CALL_OW 111
17177: GO 17135
17179: POP
17180: POP
// repeat wait ( 0 0$1 ) ;
17181: LD_INT 35
17183: PPUSH
17184: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
17188: LD_VAR 0 2
17192: PPUSH
17193: LD_INT 60
17195: PUSH
17196: EMPTY
17197: LIST
17198: PPUSH
17199: CALL_OW 72
17203: NOT
17204: IFFALSE 17181
// end ; repeat wait ( 0 0$1 ) ;
17206: LD_INT 35
17208: PPUSH
17209: CALL_OW 67
// for j in tmp do
17213: LD_ADDR_VAR 0 1
17217: PUSH
17218: LD_VAR 0 2
17222: PUSH
17223: FOR_IN
17224: IFFALSE 17519
// begin if IsDead ( j ) then
17226: LD_VAR 0 1
17230: PPUSH
17231: CALL_OW 301
17235: IFFALSE 17253
// tmp := tmp diff j ;
17237: LD_ADDR_VAR 0 2
17241: PUSH
17242: LD_VAR 0 2
17246: PUSH
17247: LD_VAR 0 1
17251: DIFF
17252: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
17253: LD_ADDR_VAR 0 3
17257: PUSH
17258: LD_INT 81
17260: PUSH
17261: LD_INT 3
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PPUSH
17268: CALL_OW 69
17272: PPUSH
17273: LD_VAR 0 1
17277: PPUSH
17278: CALL_OW 74
17282: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
17283: LD_ADDR_VAR 0 4
17287: PUSH
17288: LD_INT 81
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: LD_INT 21
17300: PUSH
17301: LD_INT 1
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: EMPTY
17309: LIST
17310: LIST
17311: PUSH
17312: EMPTY
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: PPUSH
17320: LD_VAR 0 1
17324: PPUSH
17325: CALL_OW 74
17329: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
17330: LD_VAR 0 1
17334: PPUSH
17335: CALL_OW 264
17339: PUSH
17340: LD_INT 49
17342: EQUAL
17343: IFFALSE 17451
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 then
17345: LD_VAR 0 2
17349: PPUSH
17350: LD_INT 3
17352: PUSH
17353: LD_INT 34
17355: PUSH
17356: LD_INT 49
17358: PUSH
17359: EMPTY
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PPUSH
17367: CALL_OW 72
17371: PUSH
17372: LD_INT 1
17374: GREATER
17375: IFFALSE 17425
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
17377: LD_VAR 0 1
17381: PPUSH
17382: LD_VAR 0 2
17386: PPUSH
17387: LD_INT 3
17389: PUSH
17390: LD_INT 34
17392: PUSH
17393: LD_INT 49
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: EMPTY
17401: LIST
17402: LIST
17403: PPUSH
17404: CALL_OW 72
17408: PPUSH
17409: LD_VAR 0 1
17413: PPUSH
17414: CALL_OW 74
17418: PPUSH
17419: CALL_OW 112
17423: GO 17449
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
17425: LD_VAR 0 1
17429: PPUSH
17430: LD_VAR 0 3
17434: PPUSH
17435: LD_VAR 0 1
17439: PPUSH
17440: CALL_OW 74
17444: PPUSH
17445: CALL_OW 112
// end else
17449: GO 17517
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
17451: LD_VAR 0 1
17455: PPUSH
17456: LD_VAR 0 4
17460: PPUSH
17461: CALL_OW 296
17465: PUSH
17466: LD_VAR 0 1
17470: PPUSH
17471: LD_VAR 0 3
17475: PPUSH
17476: CALL_OW 296
17480: PUSH
17481: LD_INT 2
17483: PLUS
17484: LESS
17485: IFFALSE 17503
// ComAttackUnit ( j , target2 ) else
17487: LD_VAR 0 1
17491: PPUSH
17492: LD_VAR 0 4
17496: PPUSH
17497: CALL_OW 115
17501: GO 17517
// ComAttackUnit ( j , target1 ) ;
17503: LD_VAR 0 1
17507: PPUSH
17508: LD_VAR 0 3
17512: PPUSH
17513: CALL_OW 115
// end ; end ;
17517: GO 17223
17519: POP
17520: POP
// until not tmp ;
17521: LD_VAR 0 2
17525: NOT
17526: IFFALSE 17206
// end ;
17528: PPOPN 4
17530: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17531: LD_INT 4
17533: PPUSH
17534: CALL_OW 303
17538: IFFALSE 17553
17540: GO 17542
17542: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17543: LD_INT 3
17545: PPUSH
17546: LD_INT 4
17548: PPUSH
17549: CALL 15262 0 2
17553: END
// every 0 0$1 do
17554: GO 17556
17556: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17557: LD_INT 3
17559: PPUSH
17560: LD_INT 91
17562: PPUSH
17563: LD_INT 3
17565: PPUSH
17566: CALL 13071 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17570: LD_INT 3
17572: PPUSH
17573: LD_INT 47
17575: PPUSH
17576: LD_INT 3
17578: PPUSH
17579: CALL 13071 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17583: LD_INT 3
17585: PPUSH
17586: LD_INT 129
17588: PPUSH
17589: LD_INT 3
17591: PPUSH
17592: CALL 13071 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17596: LD_INT 3
17598: PPUSH
17599: LD_INT 3
17601: PPUSH
17602: LD_INT 3
17604: PPUSH
17605: CALL 13071 0 3
// end ;
17609: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17610: LD_INT 22
17612: PUSH
17613: LD_INT 1
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PUSH
17620: LD_INT 21
17622: PUSH
17623: LD_INT 3
17625: PUSH
17626: EMPTY
17627: LIST
17628: LIST
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PPUSH
17634: CALL_OW 69
17638: IFFALSE 17703
17640: GO 17642
17642: DISABLE
// begin wait ( 0 0$40 ) ;
17643: LD_INT 1400
17645: PPUSH
17646: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17650: LD_INT 3
17652: PPUSH
17653: LD_INT 21
17655: PPUSH
17656: LD_INT 3
17658: PUSH
17659: LD_INT 4
17661: PUSH
17662: LD_INT 4
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: LIST
17669: PUSH
17670: LD_OWVAR 67
17674: ARRAY
17675: PPUSH
17676: LD_INT 46
17678: PUSH
17679: LD_INT 45
17681: PUSH
17682: LD_INT 44
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: LIST
17689: PPUSH
17690: LD_INT 3
17692: PPUSH
17693: LD_INT 3
17695: PPUSH
17696: LD_INT 24
17698: PPUSH
17699: CALL 14463 0 7
// end ;
17703: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17704: LD_EXP 27
17708: PUSH
17709: LD_INT 2
17711: EQUAL
17712: PUSH
17713: LD_INT 21
17715: PPUSH
17716: CALL_OW 255
17720: PUSH
17721: LD_INT 3
17723: EQUAL
17724: AND
17725: PUSH
17726: LD_INT 112
17728: PPUSH
17729: CALL_OW 255
17733: PUSH
17734: LD_INT 3
17736: EQUAL
17737: AND
17738: PUSH
17739: LD_INT 21
17741: PPUSH
17742: CALL_OW 302
17746: AND
17747: PUSH
17748: LD_INT 112
17750: PPUSH
17751: CALL_OW 302
17755: AND
17756: PUSH
17757: LD_INT 22
17759: PUSH
17760: LD_INT 3
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 21
17769: PUSH
17770: LD_INT 2
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 50
17779: PUSH
17780: EMPTY
17781: LIST
17782: PUSH
17783: LD_INT 3
17785: PUSH
17786: LD_INT 58
17788: PUSH
17789: EMPTY
17790: LIST
17791: PUSH
17792: EMPTY
17793: LIST
17794: LIST
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 69
17806: PUSH
17807: LD_INT 18
17809: PPUSH
17810: LD_INT 22
17812: PUSH
17813: LD_INT 3
17815: PUSH
17816: EMPTY
17817: LIST
17818: LIST
17819: PUSH
17820: LD_INT 21
17822: PUSH
17823: LD_INT 2
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: PUSH
17830: EMPTY
17831: LIST
17832: LIST
17833: PPUSH
17834: CALL_OW 70
17838: PUSH
17839: LD_INT 0
17841: EQUAL
17842: DIFF
17843: AND
17844: IFFALSE 17962
17846: GO 17848
17848: DISABLE
// begin enable ;
17849: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17850: LD_INT 3
17852: PPUSH
17853: LD_INT 21
17855: PPUSH
17856: LD_INT 3
17858: PUSH
17859: LD_INT 4
17861: PUSH
17862: LD_INT 4
17864: PUSH
17865: EMPTY
17866: LIST
17867: LIST
17868: LIST
17869: PUSH
17870: LD_OWVAR 67
17874: ARRAY
17875: PPUSH
17876: LD_INT 46
17878: PUSH
17879: LD_INT 45
17881: PUSH
17882: LD_INT 44
17884: PUSH
17885: EMPTY
17886: LIST
17887: LIST
17888: LIST
17889: PPUSH
17890: LD_INT 3
17892: PPUSH
17893: LD_INT 3
17895: PPUSH
17896: LD_INT 24
17898: PPUSH
17899: CALL 14463 0 7
// if russianTimeLapsers = 0 then
17903: LD_EXP 40
17907: PUSH
17908: LD_INT 0
17910: EQUAL
17911: IFFALSE 17962
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17913: LD_INT 3
17915: PPUSH
17916: LD_INT 112
17918: PPUSH
17919: LD_INT 1
17921: PUSH
17922: LD_INT 2
17924: PUSH
17925: LD_INT 2
17927: PUSH
17928: EMPTY
17929: LIST
17930: LIST
17931: LIST
17932: PUSH
17933: LD_OWVAR 67
17937: ARRAY
17938: PPUSH
17939: LD_INT 49
17941: PUSH
17942: LD_INT 49
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PPUSH
17949: LD_INT 3
17951: PPUSH
17952: LD_INT 3
17954: PPUSH
17955: LD_INT 24
17957: PPUSH
17958: CALL 14463 0 7
// end ;
17962: END
// every 0 0$1 trigger arabianMines do var i ;
17963: LD_EXP 44
17967: IFFALSE 18088
17969: GO 17971
17971: DISABLE
17972: LD_INT 0
17974: PPUSH
// begin enable ;
17975: ENABLE
// for i in arabianMines do
17976: LD_ADDR_VAR 0 1
17980: PUSH
17981: LD_EXP 44
17985: PUSH
17986: FOR_IN
17987: IFFALSE 18086
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17989: LD_INT 22
17991: PUSH
17992: LD_INT 1
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: PUSH
17999: LD_INT 92
18001: PUSH
18002: LD_VAR 0 1
18006: PUSH
18007: LD_INT 1
18009: ARRAY
18010: PUSH
18011: LD_VAR 0 1
18015: PUSH
18016: LD_INT 2
18018: ARRAY
18019: PUSH
18020: LD_INT 3
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: PPUSH
18033: CALL_OW 69
18037: IFFALSE 18084
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18039: LD_VAR 0 1
18043: PUSH
18044: LD_INT 1
18046: ARRAY
18047: PPUSH
18048: LD_VAR 0 1
18052: PUSH
18053: LD_INT 2
18055: ARRAY
18056: PPUSH
18057: LD_INT 5
18059: PPUSH
18060: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18064: LD_ADDR_EXP 44
18068: PUSH
18069: LD_EXP 44
18073: PPUSH
18074: LD_VAR 0 1
18078: PPUSH
18079: CALL_OW 3
18083: ST_TO_ADDR
// end ; end ;
18084: GO 17986
18086: POP
18087: POP
// end ;
18088: PPOPN 1
18090: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
18091: LD_EXP 28
18095: PUSH
18096: LD_INT 4
18098: EQUAL
18099: PUSH
18100: LD_EXP 29
18104: PUSH
18105: LD_INT 6
18107: PUSH
18108: LD_INT 8
18110: PUSH
18111: LD_INT 8
18113: PUSH
18114: EMPTY
18115: LIST
18116: LIST
18117: LIST
18118: PUSH
18119: LD_OWVAR 67
18123: ARRAY
18124: EQUAL
18125: AND
18126: IFFALSE 18144
18128: GO 18130
18130: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18131: LD_INT 10
18133: PPUSH
18134: LD_INT 47
18136: PPUSH
18137: LD_INT 82
18139: PPUSH
18140: CALL_OW 243
18144: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18145: LD_EXP 28
18149: PUSH
18150: LD_INT 4
18152: EQUAL
18153: IFFALSE 18175
18155: GO 18157
18157: DISABLE
// begin enable ;
18158: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18159: LD_ADDR_EXP 43
18163: PUSH
18164: LD_INT 1
18166: PPUSH
18167: LD_INT 2
18169: PPUSH
18170: CALL_OW 12
18174: ST_TO_ADDR
// end ; end_of_file
18175: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18176: LD_INT 3
18178: PPUSH
18179: CALL_OW 301
18183: IFFALSE 18372
18185: GO 18187
18187: DISABLE
// begin if sciCounter = 0 then
18188: LD_EXP 35
18192: PUSH
18193: LD_INT 0
18195: EQUAL
18196: IFFALSE 18224
// begin Say ( JMM , D7a-JMM-1 ) ;
18198: LD_EXP 1
18202: PPUSH
18203: LD_STRING D7a-JMM-1
18205: PPUSH
18206: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18210: LD_EXP 22
18214: PPUSH
18215: LD_STRING D7a-Pow-1
18217: PPUSH
18218: CALL_OW 94
// end else
18222: GO 18368
// if sciCounter < 6 then
18224: LD_EXP 35
18228: PUSH
18229: LD_INT 6
18231: LESS
18232: IFFALSE 18260
// begin Say ( JMM , D7b-JMM-1 ) ;
18234: LD_EXP 1
18238: PPUSH
18239: LD_STRING D7b-JMM-1
18241: PPUSH
18242: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18246: LD_EXP 22
18250: PPUSH
18251: LD_STRING D7b-Pow-1
18253: PPUSH
18254: CALL_OW 94
// end else
18258: GO 18368
// begin Say ( JMM , D7c-JMM-1 ) ;
18260: LD_EXP 1
18264: PPUSH
18265: LD_STRING D7c-JMM-1
18267: PPUSH
18268: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18272: LD_EXP 22
18276: PPUSH
18277: LD_STRING D7c-Pow-1
18279: PPUSH
18280: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18284: LD_EXP 1
18288: PPUSH
18289: LD_STRING D7d-JMM-1
18291: PPUSH
18292: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18296: LD_EXP 22
18300: PPUSH
18301: LD_STRING D7d-Pow-1
18303: PPUSH
18304: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18308: LD_EXP 1
18312: PPUSH
18313: LD_STRING D7d-JMM-2
18315: PPUSH
18316: CALL_OW 88
// if askSiberite = 1 then
18320: LD_EXP 32
18324: PUSH
18325: LD_INT 1
18327: EQUAL
18328: IFFALSE 18344
// Say ( JMM , D7d-JMM-2a ) else
18330: LD_EXP 1
18334: PPUSH
18335: LD_STRING D7d-JMM-2a
18337: PPUSH
18338: CALL_OW 88
18342: GO 18356
// SayRadio ( Powell , D7d-Pow-2 ) ;
18344: LD_EXP 22
18348: PPUSH
18349: LD_STRING D7d-Pow-2
18351: PPUSH
18352: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18356: LD_EXP 22
18360: PPUSH
18361: LD_STRING D7d-Pow-2a
18363: PPUSH
18364: CALL_OW 94
// end ; FinishMission ;
18368: CALL 18373 0 0
// end ;
18372: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18373: LD_INT 0
18375: PPUSH
18376: PPUSH
18377: PPUSH
18378: PPUSH
// m1 := false ;
18379: LD_ADDR_VAR 0 2
18383: PUSH
18384: LD_INT 0
18386: ST_TO_ADDR
// m2 := false ;
18387: LD_ADDR_VAR 0 3
18391: PUSH
18392: LD_INT 0
18394: ST_TO_ADDR
// m3 := false ;
18395: LD_ADDR_VAR 0 4
18399: PUSH
18400: LD_INT 0
18402: ST_TO_ADDR
// if not westPathUsed then
18403: LD_EXP 49
18407: NOT
18408: IFFALSE 18417
// SetAchievement ( ACH_PATH ) ;
18410: LD_STRING ACH_PATH
18412: PPUSH
18413: CALL_OW 543
// if not rocketBuilded then
18417: LD_EXP 51
18421: NOT
18422: IFFALSE 18438
// begin wait ( 3 ) ;
18424: LD_INT 3
18426: PPUSH
18427: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18431: LD_STRING ACH_ROCKET
18433: PPUSH
18434: CALL_OW 543
// end ; if tick <= 40 40$00 then
18438: LD_OWVAR 1
18442: PUSH
18443: LD_INT 84000
18445: LESSEQUAL
18446: IFFALSE 18462
// begin wait ( 3 ) ;
18448: LD_INT 3
18450: PPUSH
18451: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18455: LD_STRING ACH_ASPEED_12
18457: PPUSH
18458: CALL_OW 543
// end ; if teleportExplored = 1 then
18462: LD_EXP 33
18466: PUSH
18467: LD_INT 1
18469: EQUAL
18470: IFFALSE 18492
// begin m1 := true ;
18472: LD_ADDR_VAR 0 2
18476: PUSH
18477: LD_INT 1
18479: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18480: LD_STRING Teleport
18482: PPUSH
18483: LD_INT 1
18485: PPUSH
18486: CALL_OW 101
// end else
18490: GO 18503
// AddMedal ( Teleport , - 1 ) ;
18492: LD_STRING Teleport
18494: PPUSH
18495: LD_INT 1
18497: NEG
18498: PPUSH
18499: CALL_OW 101
// if sciCounter > 2 then
18503: LD_EXP 35
18507: PUSH
18508: LD_INT 2
18510: GREATER
18511: IFFALSE 18533
// begin m2 := true ;
18513: LD_ADDR_VAR 0 3
18517: PUSH
18518: LD_INT 1
18520: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18521: LD_STRING Materials
18523: PPUSH
18524: LD_INT 1
18526: PPUSH
18527: CALL_OW 101
// end else
18531: GO 18544
// AddMedal ( Materials , - 1 ) ;
18533: LD_STRING Materials
18535: PPUSH
18536: LD_INT 1
18538: NEG
18539: PPUSH
18540: CALL_OW 101
// if sciCounter >= 6 then
18544: LD_EXP 35
18548: PUSH
18549: LD_INT 6
18551: GREATEREQUAL
18552: IFFALSE 18584
// begin m3 := true ;
18554: LD_ADDR_VAR 0 4
18558: PUSH
18559: LD_INT 1
18561: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18562: LD_STRING Scientists
18564: PPUSH
18565: LD_INT 1
18567: PPUSH
18568: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18572: LD_INT 1
18574: PPUSH
18575: LD_STRING 12_SciDed_1
18577: PPUSH
18578: CALL_OW 39
// end else
18582: GO 18605
// begin AddMedal ( Scientists , - 1 ) ;
18584: LD_STRING Scientists
18586: PPUSH
18587: LD_INT 1
18589: NEG
18590: PPUSH
18591: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18595: LD_INT 0
18597: PPUSH
18598: LD_STRING 12_SciDed_1
18600: PPUSH
18601: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18605: LD_EXP 31
18609: PPUSH
18610: LD_STRING 12_MainDepositFake_1
18612: PPUSH
18613: CALL_OW 39
// if m1 and m2 and m3 and Difficulty = 3 then
18617: LD_VAR 0 2
18621: PUSH
18622: LD_VAR 0 3
18626: AND
18627: PUSH
18628: LD_VAR 0 4
18632: AND
18633: PUSH
18634: LD_OWVAR 67
18638: PUSH
18639: LD_INT 3
18641: EQUAL
18642: AND
18643: IFFALSE 18655
// SetAchievementEX ( ACH_AMER , 12 ) ;
18645: LD_STRING ACH_AMER
18647: PPUSH
18648: LD_INT 12
18650: PPUSH
18651: CALL_OW 564
// GiveMedals ( MAIN ) ;
18655: LD_STRING MAIN
18657: PPUSH
18658: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18662: LD_INT 22
18664: PUSH
18665: LD_INT 1
18667: PUSH
18668: EMPTY
18669: LIST
18670: LIST
18671: PUSH
18672: LD_INT 21
18674: PUSH
18675: LD_INT 1
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: LD_INT 25
18687: PUSH
18688: LD_INT 1
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: LD_INT 25
18697: PUSH
18698: LD_INT 2
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 25
18707: PUSH
18708: LD_INT 3
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 25
18717: PUSH
18718: LD_INT 4
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 25
18727: PUSH
18728: LD_INT 5
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: LD_INT 25
18737: PUSH
18738: LD_INT 8
18740: PUSH
18741: EMPTY
18742: LIST
18743: LIST
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: LIST
18749: LIST
18750: LIST
18751: LIST
18752: LIST
18753: PUSH
18754: EMPTY
18755: LIST
18756: LIST
18757: LIST
18758: PPUSH
18759: CALL_OW 69
18763: PPUSH
18764: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18768: LD_EXP 1
18772: PPUSH
18773: LD_EXP 46
18777: PUSH
18778: LD_STRING JMM
18780: STR
18781: PPUSH
18782: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18786: LD_EXP 7
18790: PPUSH
18791: LD_EXP 46
18795: PUSH
18796: LD_STRING Brown
18798: STR
18799: PPUSH
18800: CALL 12303 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18804: LD_EXP 3
18808: PPUSH
18809: LD_EXP 46
18813: PUSH
18814: LD_STRING Donaldson
18816: STR
18817: PPUSH
18818: CALL 12303 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18822: LD_EXP 4
18826: PPUSH
18827: LD_EXP 46
18831: PUSH
18832: LD_STRING Bobby
18834: STR
18835: PPUSH
18836: CALL 12303 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18840: LD_EXP 5
18844: PPUSH
18845: LD_EXP 46
18849: PUSH
18850: LD_STRING Cyrus
18852: STR
18853: PPUSH
18854: CALL 12303 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18858: LD_EXP 2
18862: PPUSH
18863: LD_EXP 46
18867: PUSH
18868: LD_STRING Lisa
18870: STR
18871: PPUSH
18872: CALL 12303 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18876: LD_EXP 12
18880: PPUSH
18881: LD_EXP 46
18885: PUSH
18886: LD_STRING Frank
18888: STR
18889: PPUSH
18890: CALL 12303 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18894: LD_EXP 13
18898: PPUSH
18899: LD_EXP 46
18903: PUSH
18904: LD_STRING Kikuchi
18906: STR
18907: PPUSH
18908: CALL 12303 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18912: LD_EXP 9
18916: PPUSH
18917: LD_EXP 46
18921: PUSH
18922: LD_STRING Houten
18924: STR
18925: PPUSH
18926: CALL 12303 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18930: LD_EXP 11
18934: PPUSH
18935: LD_EXP 46
18939: PUSH
18940: LD_STRING Gary
18942: STR
18943: PPUSH
18944: CALL 12303 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18948: LD_EXP 10
18952: PPUSH
18953: LD_EXP 46
18957: PUSH
18958: LD_STRING Cornell
18960: STR
18961: PPUSH
18962: CALL 12303 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18966: LD_EXP 6
18970: PPUSH
18971: LD_EXP 46
18975: PUSH
18976: LD_STRING Denis
18978: STR
18979: PPUSH
18980: CALL 12303 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18984: LD_EXP 8
18988: PPUSH
18989: LD_EXP 46
18993: PUSH
18994: LD_STRING Gladstone
18996: STR
18997: PPUSH
18998: CALL 12303 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
19002: LD_INT 22
19004: PUSH
19005: LD_INT 1
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 23
19014: PUSH
19015: LD_INT 1
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: LD_INT 21
19024: PUSH
19025: LD_INT 1
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 2
19034: PUSH
19035: LD_INT 25
19037: PUSH
19038: LD_INT 1
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: PUSH
19045: LD_INT 25
19047: PUSH
19048: LD_INT 2
19050: PUSH
19051: EMPTY
19052: LIST
19053: LIST
19054: PUSH
19055: LD_INT 25
19057: PUSH
19058: LD_INT 3
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 25
19067: PUSH
19068: LD_INT 4
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: PUSH
19075: LD_INT 25
19077: PUSH
19078: LD_INT 5
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 25
19087: PUSH
19088: LD_INT 8
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: PUSH
19104: EMPTY
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: PPUSH
19110: CALL_OW 69
19114: PUSH
19115: LD_EXP 1
19119: PUSH
19120: LD_EXP 7
19124: PUSH
19125: LD_EXP 3
19129: PUSH
19130: LD_EXP 4
19134: PUSH
19135: LD_EXP 5
19139: PUSH
19140: LD_EXP 2
19144: PUSH
19145: LD_EXP 12
19149: PUSH
19150: LD_EXP 8
19154: PUSH
19155: LD_EXP 13
19159: PUSH
19160: LD_EXP 6
19164: PUSH
19165: LD_EXP 9
19169: PUSH
19170: LD_EXP 11
19174: PUSH
19175: LD_EXP 10
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: DIFF
19195: PPUSH
19196: LD_STRING 12_other_survivors
19198: PPUSH
19199: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19203: LD_INT 22
19205: PUSH
19206: LD_INT 1
19208: PUSH
19209: EMPTY
19210: LIST
19211: LIST
19212: PUSH
19213: LD_INT 23
19215: PUSH
19216: LD_INT 2
19218: PUSH
19219: EMPTY
19220: LIST
19221: LIST
19222: PUSH
19223: LD_INT 21
19225: PUSH
19226: LD_INT 1
19228: PUSH
19229: EMPTY
19230: LIST
19231: LIST
19232: PUSH
19233: LD_INT 2
19235: PUSH
19236: LD_INT 25
19238: PUSH
19239: LD_INT 1
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: PUSH
19246: LD_INT 25
19248: PUSH
19249: LD_INT 2
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PUSH
19256: LD_INT 25
19258: PUSH
19259: LD_INT 3
19261: PUSH
19262: EMPTY
19263: LIST
19264: LIST
19265: PUSH
19266: LD_INT 25
19268: PUSH
19269: LD_INT 4
19271: PUSH
19272: EMPTY
19273: LIST
19274: LIST
19275: PUSH
19276: LD_INT 25
19278: PUSH
19279: LD_INT 5
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: PUSH
19286: LD_INT 25
19288: PUSH
19289: LD_INT 8
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: PUSH
19305: EMPTY
19306: LIST
19307: LIST
19308: LIST
19309: LIST
19310: PPUSH
19311: CALL_OW 69
19315: PPUSH
19316: LD_STRING 12_kurt_squad
19318: PPUSH
19319: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19323: LD_EXP 14
19327: PPUSH
19328: LD_STRING 12_others
19330: PPUSH
19331: CALL_OW 38
// YouWin ;
19335: CALL_OW 103
// end ; end_of_file
19339: LD_VAR 0 1
19343: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19344: LD_EXP 1
19348: PPUSH
19349: CALL_OW 301
19353: IFFALSE 19365
19355: GO 19357
19357: DISABLE
// YouLost ( JMM ) ; end_of_file
19358: LD_STRING JMM
19360: PPUSH
19361: CALL_OW 104
19365: END
// every 0 0$01 do
19366: GO 19368
19368: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19369: LD_INT 1050
19371: PPUSH
19372: CALL_OW 67
// if cratesSpawned < 6 then
19376: LD_EXP 45
19380: PUSH
19381: LD_INT 6
19383: LESS
19384: IFFALSE 19421
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19386: LD_INT 3
19388: PPUSH
19389: LD_INT 5
19391: PPUSH
19392: CALL_OW 12
19396: PPUSH
19397: LD_INT 21
19399: PPUSH
19400: LD_INT 1
19402: PPUSH
19403: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19407: LD_ADDR_EXP 45
19411: PUSH
19412: LD_EXP 45
19416: PUSH
19417: LD_INT 1
19419: PLUS
19420: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19421: LD_EXP 45
19425: PUSH
19426: LD_INT 6
19428: GREATEREQUAL
19429: PUSH
19430: LD_EXP 45
19434: PUSH
19435: LD_INT 12
19437: LESS
19438: AND
19439: IFFALSE 19483
// begin wait ( 0 0$50 ) ;
19441: LD_INT 1750
19443: PPUSH
19444: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19448: LD_INT 3
19450: PPUSH
19451: LD_INT 5
19453: PPUSH
19454: CALL_OW 12
19458: PPUSH
19459: LD_INT 21
19461: PPUSH
19462: LD_INT 1
19464: PPUSH
19465: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19469: LD_ADDR_EXP 45
19473: PUSH
19474: LD_EXP 45
19478: PUSH
19479: LD_INT 1
19481: PLUS
19482: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19483: LD_EXP 45
19487: PUSH
19488: LD_INT 12
19490: GREATEREQUAL
19491: IFFALSE 19535
// begin wait ( 1 1$40 ) ;
19493: LD_INT 3500
19495: PPUSH
19496: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19500: LD_INT 3
19502: PPUSH
19503: LD_INT 5
19505: PPUSH
19506: CALL_OW 12
19510: PPUSH
19511: LD_INT 21
19513: PPUSH
19514: LD_INT 1
19516: PPUSH
19517: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19521: LD_ADDR_EXP 45
19525: PUSH
19526: LD_EXP 45
19530: PUSH
19531: LD_INT 1
19533: PLUS
19534: ST_TO_ADDR
// end ; until false ;
19535: LD_INT 0
19537: IFFALSE 19369
// end ; end_of_file
19539: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
19540: GO 19542
19542: DISABLE
// begin ru_radar := 98 ;
19543: LD_ADDR_EXP 52
19547: PUSH
19548: LD_INT 98
19550: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19551: LD_ADDR_EXP 53
19555: PUSH
19556: LD_INT 89
19558: ST_TO_ADDR
// us_hack := 99 ;
19559: LD_ADDR_EXP 54
19563: PUSH
19564: LD_INT 99
19566: ST_TO_ADDR
// us_artillery := 97 ;
19567: LD_ADDR_EXP 55
19571: PUSH
19572: LD_INT 97
19574: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19575: LD_ADDR_EXP 56
19579: PUSH
19580: LD_INT 91
19582: ST_TO_ADDR
// tech_Artillery := 80 ;
19583: LD_ADDR_EXP 57
19587: PUSH
19588: LD_INT 80
19590: ST_TO_ADDR
// tech_RadMat := 81 ;
19591: LD_ADDR_EXP 58
19595: PUSH
19596: LD_INT 81
19598: ST_TO_ADDR
// tech_BasicTools := 82 ;
19599: LD_ADDR_EXP 59
19603: PUSH
19604: LD_INT 82
19606: ST_TO_ADDR
// tech_Cargo := 83 ;
19607: LD_ADDR_EXP 60
19611: PUSH
19612: LD_INT 83
19614: ST_TO_ADDR
// tech_Track := 84 ;
19615: LD_ADDR_EXP 61
19619: PUSH
19620: LD_INT 84
19622: ST_TO_ADDR
// tech_Crane := 85 ;
19623: LD_ADDR_EXP 62
19627: PUSH
19628: LD_INT 85
19630: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19631: LD_ADDR_EXP 63
19635: PUSH
19636: LD_INT 86
19638: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19639: LD_ADDR_EXP 64
19643: PUSH
19644: LD_INT 87
19646: ST_TO_ADDR
// end ; end_of_file end_of_file
19647: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
19648: GO 19650
19650: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
19651: LD_STRING initStreamRollete();
19653: PPUSH
19654: CALL_OW 559
// InitStreamMode ;
19658: CALL 19667 0 0
// DefineStreamItems ( ) ;
19662: CALL 20107 0 0
// end ;
19666: END
// function InitStreamMode ; begin
19667: LD_INT 0
19669: PPUSH
// streamModeActive := false ;
19670: LD_ADDR_EXP 65
19674: PUSH
19675: LD_INT 0
19677: ST_TO_ADDR
// normalCounter := 36 ;
19678: LD_ADDR_EXP 66
19682: PUSH
19683: LD_INT 36
19685: ST_TO_ADDR
// hardcoreCounter := 16 ;
19686: LD_ADDR_EXP 67
19690: PUSH
19691: LD_INT 16
19693: ST_TO_ADDR
// sRocket := false ;
19694: LD_ADDR_EXP 70
19698: PUSH
19699: LD_INT 0
19701: ST_TO_ADDR
// sSpeed := false ;
19702: LD_ADDR_EXP 69
19706: PUSH
19707: LD_INT 0
19709: ST_TO_ADDR
// sEngine := false ;
19710: LD_ADDR_EXP 71
19714: PUSH
19715: LD_INT 0
19717: ST_TO_ADDR
// sSpec := false ;
19718: LD_ADDR_EXP 68
19722: PUSH
19723: LD_INT 0
19725: ST_TO_ADDR
// sLevel := false ;
19726: LD_ADDR_EXP 72
19730: PUSH
19731: LD_INT 0
19733: ST_TO_ADDR
// sArmoury := false ;
19734: LD_ADDR_EXP 73
19738: PUSH
19739: LD_INT 0
19741: ST_TO_ADDR
// sRadar := false ;
19742: LD_ADDR_EXP 74
19746: PUSH
19747: LD_INT 0
19749: ST_TO_ADDR
// sBunker := false ;
19750: LD_ADDR_EXP 75
19754: PUSH
19755: LD_INT 0
19757: ST_TO_ADDR
// sHack := false ;
19758: LD_ADDR_EXP 76
19762: PUSH
19763: LD_INT 0
19765: ST_TO_ADDR
// sFire := false ;
19766: LD_ADDR_EXP 77
19770: PUSH
19771: LD_INT 0
19773: ST_TO_ADDR
// sRefresh := false ;
19774: LD_ADDR_EXP 78
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// sExp := false ;
19782: LD_ADDR_EXP 79
19786: PUSH
19787: LD_INT 0
19789: ST_TO_ADDR
// sDepot := false ;
19790: LD_ADDR_EXP 80
19794: PUSH
19795: LD_INT 0
19797: ST_TO_ADDR
// sFlag := false ;
19798: LD_ADDR_EXP 81
19802: PUSH
19803: LD_INT 0
19805: ST_TO_ADDR
// sKamikadze := false ;
19806: LD_ADDR_EXP 89
19810: PUSH
19811: LD_INT 0
19813: ST_TO_ADDR
// sTroll := false ;
19814: LD_ADDR_EXP 90
19818: PUSH
19819: LD_INT 0
19821: ST_TO_ADDR
// sSlow := false ;
19822: LD_ADDR_EXP 91
19826: PUSH
19827: LD_INT 0
19829: ST_TO_ADDR
// sLack := false ;
19830: LD_ADDR_EXP 92
19834: PUSH
19835: LD_INT 0
19837: ST_TO_ADDR
// sTank := false ;
19838: LD_ADDR_EXP 94
19842: PUSH
19843: LD_INT 0
19845: ST_TO_ADDR
// sRemote := false ;
19846: LD_ADDR_EXP 95
19850: PUSH
19851: LD_INT 0
19853: ST_TO_ADDR
// sPowell := false ;
19854: LD_ADDR_EXP 96
19858: PUSH
19859: LD_INT 0
19861: ST_TO_ADDR
// sTeleport := false ;
19862: LD_ADDR_EXP 99
19866: PUSH
19867: LD_INT 0
19869: ST_TO_ADDR
// sOilTower := false ;
19870: LD_ADDR_EXP 101
19874: PUSH
19875: LD_INT 0
19877: ST_TO_ADDR
// sShovel := false ;
19878: LD_ADDR_EXP 102
19882: PUSH
19883: LD_INT 0
19885: ST_TO_ADDR
// sSheik := false ;
19886: LD_ADDR_EXP 103
19890: PUSH
19891: LD_INT 0
19893: ST_TO_ADDR
// sEarthquake := false ;
19894: LD_ADDR_EXP 105
19898: PUSH
19899: LD_INT 0
19901: ST_TO_ADDR
// sAI := false ;
19902: LD_ADDR_EXP 106
19906: PUSH
19907: LD_INT 0
19909: ST_TO_ADDR
// sCargo := false ;
19910: LD_ADDR_EXP 109
19914: PUSH
19915: LD_INT 0
19917: ST_TO_ADDR
// sDLaser := false ;
19918: LD_ADDR_EXP 110
19922: PUSH
19923: LD_INT 0
19925: ST_TO_ADDR
// sExchange := false ;
19926: LD_ADDR_EXP 111
19930: PUSH
19931: LD_INT 0
19933: ST_TO_ADDR
// sFac := false ;
19934: LD_ADDR_EXP 112
19938: PUSH
19939: LD_INT 0
19941: ST_TO_ADDR
// sPower := false ;
19942: LD_ADDR_EXP 113
19946: PUSH
19947: LD_INT 0
19949: ST_TO_ADDR
// sRandom := false ;
19950: LD_ADDR_EXP 114
19954: PUSH
19955: LD_INT 0
19957: ST_TO_ADDR
// sShield := false ;
19958: LD_ADDR_EXP 115
19962: PUSH
19963: LD_INT 0
19965: ST_TO_ADDR
// sTime := false ;
19966: LD_ADDR_EXP 116
19970: PUSH
19971: LD_INT 0
19973: ST_TO_ADDR
// sTools := false ;
19974: LD_ADDR_EXP 117
19978: PUSH
19979: LD_INT 0
19981: ST_TO_ADDR
// sSold := false ;
19982: LD_ADDR_EXP 82
19986: PUSH
19987: LD_INT 0
19989: ST_TO_ADDR
// sDiff := false ;
19990: LD_ADDR_EXP 83
19994: PUSH
19995: LD_INT 0
19997: ST_TO_ADDR
// sFog := false ;
19998: LD_ADDR_EXP 86
20002: PUSH
20003: LD_INT 0
20005: ST_TO_ADDR
// sReset := false ;
20006: LD_ADDR_EXP 87
20010: PUSH
20011: LD_INT 0
20013: ST_TO_ADDR
// sSun := false ;
20014: LD_ADDR_EXP 88
20018: PUSH
20019: LD_INT 0
20021: ST_TO_ADDR
// sTiger := false ;
20022: LD_ADDR_EXP 84
20026: PUSH
20027: LD_INT 0
20029: ST_TO_ADDR
// sBomb := false ;
20030: LD_ADDR_EXP 85
20034: PUSH
20035: LD_INT 0
20037: ST_TO_ADDR
// sWound := false ;
20038: LD_ADDR_EXP 93
20042: PUSH
20043: LD_INT 0
20045: ST_TO_ADDR
// sBetray := false ;
20046: LD_ADDR_EXP 97
20050: PUSH
20051: LD_INT 0
20053: ST_TO_ADDR
// sContamin := false ;
20054: LD_ADDR_EXP 98
20058: PUSH
20059: LD_INT 0
20061: ST_TO_ADDR
// sOil := false ;
20062: LD_ADDR_EXP 100
20066: PUSH
20067: LD_INT 0
20069: ST_TO_ADDR
// sStu := false ;
20070: LD_ADDR_EXP 104
20074: PUSH
20075: LD_INT 0
20077: ST_TO_ADDR
// sBazooka := false ;
20078: LD_ADDR_EXP 107
20082: PUSH
20083: LD_INT 0
20085: ST_TO_ADDR
// sMortar := false ;
20086: LD_ADDR_EXP 108
20090: PUSH
20091: LD_INT 0
20093: ST_TO_ADDR
// sRanger := false ;
20094: LD_ADDR_EXP 118
20098: PUSH
20099: LD_INT 0
20101: ST_TO_ADDR
// end ;
20102: LD_VAR 0 1
20106: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
20107: LD_INT 0
20109: PPUSH
20110: PPUSH
20111: PPUSH
20112: PPUSH
20113: PPUSH
// result := [ ] ;
20114: LD_ADDR_VAR 0 1
20118: PUSH
20119: EMPTY
20120: ST_TO_ADDR
// if campaign_id = 1 then
20121: LD_OWVAR 69
20125: PUSH
20126: LD_INT 1
20128: EQUAL
20129: IFFALSE 23067
// begin case mission_number of 1 :
20131: LD_OWVAR 70
20135: PUSH
20136: LD_INT 1
20138: DOUBLE
20139: EQUAL
20140: IFTRUE 20144
20142: GO 20208
20144: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
20145: LD_ADDR_VAR 0 1
20149: PUSH
20150: LD_INT 2
20152: PUSH
20153: LD_INT 4
20155: PUSH
20156: LD_INT 11
20158: PUSH
20159: LD_INT 12
20161: PUSH
20162: LD_INT 15
20164: PUSH
20165: LD_INT 16
20167: PUSH
20168: LD_INT 22
20170: PUSH
20171: LD_INT 23
20173: PUSH
20174: LD_INT 26
20176: PUSH
20177: EMPTY
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: PUSH
20188: LD_INT 101
20190: PUSH
20191: LD_INT 102
20193: PUSH
20194: LD_INT 106
20196: PUSH
20197: EMPTY
20198: LIST
20199: LIST
20200: LIST
20201: PUSH
20202: EMPTY
20203: LIST
20204: LIST
20205: ST_TO_ADDR
20206: GO 23065
20208: LD_INT 2
20210: DOUBLE
20211: EQUAL
20212: IFTRUE 20216
20214: GO 20288
20216: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
20217: LD_ADDR_VAR 0 1
20221: PUSH
20222: LD_INT 2
20224: PUSH
20225: LD_INT 4
20227: PUSH
20228: LD_INT 11
20230: PUSH
20231: LD_INT 12
20233: PUSH
20234: LD_INT 15
20236: PUSH
20237: LD_INT 16
20239: PUSH
20240: LD_INT 22
20242: PUSH
20243: LD_INT 23
20245: PUSH
20246: LD_INT 26
20248: PUSH
20249: EMPTY
20250: LIST
20251: LIST
20252: LIST
20253: LIST
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: PUSH
20260: LD_INT 101
20262: PUSH
20263: LD_INT 102
20265: PUSH
20266: LD_INT 105
20268: PUSH
20269: LD_INT 106
20271: PUSH
20272: LD_INT 108
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: LIST
20279: LIST
20280: LIST
20281: PUSH
20282: EMPTY
20283: LIST
20284: LIST
20285: ST_TO_ADDR
20286: GO 23065
20288: LD_INT 3
20290: DOUBLE
20291: EQUAL
20292: IFTRUE 20296
20294: GO 20372
20296: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
20297: LD_ADDR_VAR 0 1
20301: PUSH
20302: LD_INT 2
20304: PUSH
20305: LD_INT 4
20307: PUSH
20308: LD_INT 5
20310: PUSH
20311: LD_INT 11
20313: PUSH
20314: LD_INT 12
20316: PUSH
20317: LD_INT 15
20319: PUSH
20320: LD_INT 16
20322: PUSH
20323: LD_INT 22
20325: PUSH
20326: LD_INT 26
20328: PUSH
20329: LD_INT 36
20331: PUSH
20332: EMPTY
20333: LIST
20334: LIST
20335: LIST
20336: LIST
20337: LIST
20338: LIST
20339: LIST
20340: LIST
20341: LIST
20342: LIST
20343: PUSH
20344: LD_INT 101
20346: PUSH
20347: LD_INT 102
20349: PUSH
20350: LD_INT 105
20352: PUSH
20353: LD_INT 106
20355: PUSH
20356: LD_INT 108
20358: PUSH
20359: EMPTY
20360: LIST
20361: LIST
20362: LIST
20363: LIST
20364: LIST
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: ST_TO_ADDR
20370: GO 23065
20372: LD_INT 4
20374: DOUBLE
20375: EQUAL
20376: IFTRUE 20380
20378: GO 20464
20380: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
20381: LD_ADDR_VAR 0 1
20385: PUSH
20386: LD_INT 2
20388: PUSH
20389: LD_INT 4
20391: PUSH
20392: LD_INT 5
20394: PUSH
20395: LD_INT 8
20397: PUSH
20398: LD_INT 11
20400: PUSH
20401: LD_INT 12
20403: PUSH
20404: LD_INT 15
20406: PUSH
20407: LD_INT 16
20409: PUSH
20410: LD_INT 22
20412: PUSH
20413: LD_INT 23
20415: PUSH
20416: LD_INT 26
20418: PUSH
20419: LD_INT 36
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: LIST
20429: LIST
20430: LIST
20431: LIST
20432: LIST
20433: LIST
20434: LIST
20435: PUSH
20436: LD_INT 101
20438: PUSH
20439: LD_INT 102
20441: PUSH
20442: LD_INT 105
20444: PUSH
20445: LD_INT 106
20447: PUSH
20448: LD_INT 108
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: LIST
20456: LIST
20457: PUSH
20458: EMPTY
20459: LIST
20460: LIST
20461: ST_TO_ADDR
20462: GO 23065
20464: LD_INT 5
20466: DOUBLE
20467: EQUAL
20468: IFTRUE 20472
20470: GO 20572
20472: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
20473: LD_ADDR_VAR 0 1
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: LD_INT 4
20483: PUSH
20484: LD_INT 5
20486: PUSH
20487: LD_INT 6
20489: PUSH
20490: LD_INT 8
20492: PUSH
20493: LD_INT 11
20495: PUSH
20496: LD_INT 12
20498: PUSH
20499: LD_INT 15
20501: PUSH
20502: LD_INT 16
20504: PUSH
20505: LD_INT 22
20507: PUSH
20508: LD_INT 23
20510: PUSH
20511: LD_INT 25
20513: PUSH
20514: LD_INT 26
20516: PUSH
20517: LD_INT 36
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: PUSH
20536: LD_INT 101
20538: PUSH
20539: LD_INT 102
20541: PUSH
20542: LD_INT 105
20544: PUSH
20545: LD_INT 106
20547: PUSH
20548: LD_INT 108
20550: PUSH
20551: LD_INT 109
20553: PUSH
20554: LD_INT 112
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: ST_TO_ADDR
20570: GO 23065
20572: LD_INT 6
20574: DOUBLE
20575: EQUAL
20576: IFTRUE 20580
20578: GO 20700
20580: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
20581: LD_ADDR_VAR 0 1
20585: PUSH
20586: LD_INT 2
20588: PUSH
20589: LD_INT 4
20591: PUSH
20592: LD_INT 5
20594: PUSH
20595: LD_INT 6
20597: PUSH
20598: LD_INT 8
20600: PUSH
20601: LD_INT 11
20603: PUSH
20604: LD_INT 12
20606: PUSH
20607: LD_INT 15
20609: PUSH
20610: LD_INT 16
20612: PUSH
20613: LD_INT 20
20615: PUSH
20616: LD_INT 21
20618: PUSH
20619: LD_INT 22
20621: PUSH
20622: LD_INT 23
20624: PUSH
20625: LD_INT 25
20627: PUSH
20628: LD_INT 26
20630: PUSH
20631: LD_INT 30
20633: PUSH
20634: LD_INT 31
20636: PUSH
20637: LD_INT 32
20639: PUSH
20640: LD_INT 36
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: LIST
20658: LIST
20659: LIST
20660: LIST
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 101
20666: PUSH
20667: LD_INT 102
20669: PUSH
20670: LD_INT 105
20672: PUSH
20673: LD_INT 106
20675: PUSH
20676: LD_INT 108
20678: PUSH
20679: LD_INT 109
20681: PUSH
20682: LD_INT 112
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: PUSH
20694: EMPTY
20695: LIST
20696: LIST
20697: ST_TO_ADDR
20698: GO 23065
20700: LD_INT 7
20702: DOUBLE
20703: EQUAL
20704: IFTRUE 20708
20706: GO 20808
20708: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
20709: LD_ADDR_VAR 0 1
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: LD_INT 4
20719: PUSH
20720: LD_INT 5
20722: PUSH
20723: LD_INT 7
20725: PUSH
20726: LD_INT 11
20728: PUSH
20729: LD_INT 12
20731: PUSH
20732: LD_INT 15
20734: PUSH
20735: LD_INT 16
20737: PUSH
20738: LD_INT 20
20740: PUSH
20741: LD_INT 21
20743: PUSH
20744: LD_INT 22
20746: PUSH
20747: LD_INT 23
20749: PUSH
20750: LD_INT 25
20752: PUSH
20753: LD_INT 26
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: LIST
20762: LIST
20763: LIST
20764: LIST
20765: LIST
20766: LIST
20767: LIST
20768: LIST
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 101
20774: PUSH
20775: LD_INT 102
20777: PUSH
20778: LD_INT 103
20780: PUSH
20781: LD_INT 105
20783: PUSH
20784: LD_INT 106
20786: PUSH
20787: LD_INT 108
20789: PUSH
20790: LD_INT 112
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: LIST
20797: LIST
20798: LIST
20799: LIST
20800: LIST
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: ST_TO_ADDR
20806: GO 23065
20808: LD_INT 8
20810: DOUBLE
20811: EQUAL
20812: IFTRUE 20816
20814: GO 20944
20816: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
20817: LD_ADDR_VAR 0 1
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: LD_INT 4
20827: PUSH
20828: LD_INT 5
20830: PUSH
20831: LD_INT 6
20833: PUSH
20834: LD_INT 7
20836: PUSH
20837: LD_INT 8
20839: PUSH
20840: LD_INT 11
20842: PUSH
20843: LD_INT 12
20845: PUSH
20846: LD_INT 15
20848: PUSH
20849: LD_INT 16
20851: PUSH
20852: LD_INT 20
20854: PUSH
20855: LD_INT 21
20857: PUSH
20858: LD_INT 22
20860: PUSH
20861: LD_INT 23
20863: PUSH
20864: LD_INT 25
20866: PUSH
20867: LD_INT 26
20869: PUSH
20870: LD_INT 30
20872: PUSH
20873: LD_INT 31
20875: PUSH
20876: LD_INT 32
20878: PUSH
20879: LD_INT 36
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: LIST
20886: LIST
20887: LIST
20888: LIST
20889: LIST
20890: LIST
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: LIST
20896: LIST
20897: LIST
20898: LIST
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: PUSH
20904: LD_INT 101
20906: PUSH
20907: LD_INT 102
20909: PUSH
20910: LD_INT 103
20912: PUSH
20913: LD_INT 105
20915: PUSH
20916: LD_INT 106
20918: PUSH
20919: LD_INT 108
20921: PUSH
20922: LD_INT 109
20924: PUSH
20925: LD_INT 112
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: LIST
20936: LIST
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: ST_TO_ADDR
20942: GO 23065
20944: LD_INT 9
20946: DOUBLE
20947: EQUAL
20948: IFTRUE 20952
20950: GO 21088
20952: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
20953: LD_ADDR_VAR 0 1
20957: PUSH
20958: LD_INT 2
20960: PUSH
20961: LD_INT 4
20963: PUSH
20964: LD_INT 5
20966: PUSH
20967: LD_INT 6
20969: PUSH
20970: LD_INT 7
20972: PUSH
20973: LD_INT 8
20975: PUSH
20976: LD_INT 11
20978: PUSH
20979: LD_INT 12
20981: PUSH
20982: LD_INT 15
20984: PUSH
20985: LD_INT 16
20987: PUSH
20988: LD_INT 20
20990: PUSH
20991: LD_INT 21
20993: PUSH
20994: LD_INT 22
20996: PUSH
20997: LD_INT 23
20999: PUSH
21000: LD_INT 25
21002: PUSH
21003: LD_INT 26
21005: PUSH
21006: LD_INT 28
21008: PUSH
21009: LD_INT 30
21011: PUSH
21012: LD_INT 31
21014: PUSH
21015: LD_INT 32
21017: PUSH
21018: LD_INT 36
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: LIST
21043: PUSH
21044: LD_INT 101
21046: PUSH
21047: LD_INT 102
21049: PUSH
21050: LD_INT 103
21052: PUSH
21053: LD_INT 105
21055: PUSH
21056: LD_INT 106
21058: PUSH
21059: LD_INT 108
21061: PUSH
21062: LD_INT 109
21064: PUSH
21065: LD_INT 112
21067: PUSH
21068: LD_INT 114
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: LIST
21075: LIST
21076: LIST
21077: LIST
21078: LIST
21079: LIST
21080: LIST
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: ST_TO_ADDR
21086: GO 23065
21088: LD_INT 10
21090: DOUBLE
21091: EQUAL
21092: IFTRUE 21096
21094: GO 21280
21096: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
21097: LD_ADDR_VAR 0 1
21101: PUSH
21102: LD_INT 2
21104: PUSH
21105: LD_INT 4
21107: PUSH
21108: LD_INT 5
21110: PUSH
21111: LD_INT 6
21113: PUSH
21114: LD_INT 7
21116: PUSH
21117: LD_INT 8
21119: PUSH
21120: LD_INT 9
21122: PUSH
21123: LD_INT 10
21125: PUSH
21126: LD_INT 11
21128: PUSH
21129: LD_INT 12
21131: PUSH
21132: LD_INT 13
21134: PUSH
21135: LD_INT 14
21137: PUSH
21138: LD_INT 15
21140: PUSH
21141: LD_INT 16
21143: PUSH
21144: LD_INT 17
21146: PUSH
21147: LD_INT 18
21149: PUSH
21150: LD_INT 19
21152: PUSH
21153: LD_INT 20
21155: PUSH
21156: LD_INT 21
21158: PUSH
21159: LD_INT 22
21161: PUSH
21162: LD_INT 23
21164: PUSH
21165: LD_INT 24
21167: PUSH
21168: LD_INT 25
21170: PUSH
21171: LD_INT 26
21173: PUSH
21174: LD_INT 28
21176: PUSH
21177: LD_INT 30
21179: PUSH
21180: LD_INT 31
21182: PUSH
21183: LD_INT 32
21185: PUSH
21186: LD_INT 36
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 101
21222: PUSH
21223: LD_INT 102
21225: PUSH
21226: LD_INT 103
21228: PUSH
21229: LD_INT 104
21231: PUSH
21232: LD_INT 105
21234: PUSH
21235: LD_INT 106
21237: PUSH
21238: LD_INT 107
21240: PUSH
21241: LD_INT 108
21243: PUSH
21244: LD_INT 109
21246: PUSH
21247: LD_INT 110
21249: PUSH
21250: LD_INT 111
21252: PUSH
21253: LD_INT 112
21255: PUSH
21256: LD_INT 114
21258: PUSH
21259: EMPTY
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: PUSH
21274: EMPTY
21275: LIST
21276: LIST
21277: ST_TO_ADDR
21278: GO 23065
21280: LD_INT 11
21282: DOUBLE
21283: EQUAL
21284: IFTRUE 21288
21286: GO 21480
21288: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
21289: LD_ADDR_VAR 0 1
21293: PUSH
21294: LD_INT 2
21296: PUSH
21297: LD_INT 3
21299: PUSH
21300: LD_INT 4
21302: PUSH
21303: LD_INT 5
21305: PUSH
21306: LD_INT 6
21308: PUSH
21309: LD_INT 7
21311: PUSH
21312: LD_INT 8
21314: PUSH
21315: LD_INT 9
21317: PUSH
21318: LD_INT 10
21320: PUSH
21321: LD_INT 11
21323: PUSH
21324: LD_INT 12
21326: PUSH
21327: LD_INT 13
21329: PUSH
21330: LD_INT 14
21332: PUSH
21333: LD_INT 15
21335: PUSH
21336: LD_INT 16
21338: PUSH
21339: LD_INT 17
21341: PUSH
21342: LD_INT 18
21344: PUSH
21345: LD_INT 19
21347: PUSH
21348: LD_INT 20
21350: PUSH
21351: LD_INT 21
21353: PUSH
21354: LD_INT 22
21356: PUSH
21357: LD_INT 23
21359: PUSH
21360: LD_INT 24
21362: PUSH
21363: LD_INT 25
21365: PUSH
21366: LD_INT 26
21368: PUSH
21369: LD_INT 28
21371: PUSH
21372: LD_INT 30
21374: PUSH
21375: LD_INT 31
21377: PUSH
21378: LD_INT 32
21380: PUSH
21381: LD_INT 34
21383: PUSH
21384: LD_INT 36
21386: PUSH
21387: EMPTY
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: LIST
21409: LIST
21410: LIST
21411: LIST
21412: LIST
21413: LIST
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: PUSH
21420: LD_INT 101
21422: PUSH
21423: LD_INT 102
21425: PUSH
21426: LD_INT 103
21428: PUSH
21429: LD_INT 104
21431: PUSH
21432: LD_INT 105
21434: PUSH
21435: LD_INT 106
21437: PUSH
21438: LD_INT 107
21440: PUSH
21441: LD_INT 108
21443: PUSH
21444: LD_INT 109
21446: PUSH
21447: LD_INT 110
21449: PUSH
21450: LD_INT 111
21452: PUSH
21453: LD_INT 112
21455: PUSH
21456: LD_INT 114
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: ST_TO_ADDR
21478: GO 23065
21480: LD_INT 12
21482: DOUBLE
21483: EQUAL
21484: IFTRUE 21488
21486: GO 21696
21488: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
21489: LD_ADDR_VAR 0 1
21493: PUSH
21494: LD_INT 1
21496: PUSH
21497: LD_INT 2
21499: PUSH
21500: LD_INT 3
21502: PUSH
21503: LD_INT 4
21505: PUSH
21506: LD_INT 5
21508: PUSH
21509: LD_INT 6
21511: PUSH
21512: LD_INT 7
21514: PUSH
21515: LD_INT 8
21517: PUSH
21518: LD_INT 9
21520: PUSH
21521: LD_INT 10
21523: PUSH
21524: LD_INT 11
21526: PUSH
21527: LD_INT 12
21529: PUSH
21530: LD_INT 13
21532: PUSH
21533: LD_INT 14
21535: PUSH
21536: LD_INT 15
21538: PUSH
21539: LD_INT 16
21541: PUSH
21542: LD_INT 17
21544: PUSH
21545: LD_INT 18
21547: PUSH
21548: LD_INT 19
21550: PUSH
21551: LD_INT 20
21553: PUSH
21554: LD_INT 21
21556: PUSH
21557: LD_INT 22
21559: PUSH
21560: LD_INT 23
21562: PUSH
21563: LD_INT 24
21565: PUSH
21566: LD_INT 25
21568: PUSH
21569: LD_INT 26
21571: PUSH
21572: LD_INT 27
21574: PUSH
21575: LD_INT 28
21577: PUSH
21578: LD_INT 30
21580: PUSH
21581: LD_INT 31
21583: PUSH
21584: LD_INT 32
21586: PUSH
21587: LD_INT 33
21589: PUSH
21590: LD_INT 34
21592: PUSH
21593: LD_INT 36
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: PUSH
21632: LD_INT 101
21634: PUSH
21635: LD_INT 102
21637: PUSH
21638: LD_INT 103
21640: PUSH
21641: LD_INT 104
21643: PUSH
21644: LD_INT 105
21646: PUSH
21647: LD_INT 106
21649: PUSH
21650: LD_INT 107
21652: PUSH
21653: LD_INT 108
21655: PUSH
21656: LD_INT 109
21658: PUSH
21659: LD_INT 110
21661: PUSH
21662: LD_INT 111
21664: PUSH
21665: LD_INT 112
21667: PUSH
21668: LD_INT 113
21670: PUSH
21671: LD_INT 114
21673: PUSH
21674: EMPTY
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: LIST
21683: LIST
21684: LIST
21685: LIST
21686: LIST
21687: LIST
21688: LIST
21689: PUSH
21690: EMPTY
21691: LIST
21692: LIST
21693: ST_TO_ADDR
21694: GO 23065
21696: LD_INT 13
21698: DOUBLE
21699: EQUAL
21700: IFTRUE 21704
21702: GO 21900
21704: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
21705: LD_ADDR_VAR 0 1
21709: PUSH
21710: LD_INT 1
21712: PUSH
21713: LD_INT 2
21715: PUSH
21716: LD_INT 3
21718: PUSH
21719: LD_INT 4
21721: PUSH
21722: LD_INT 5
21724: PUSH
21725: LD_INT 8
21727: PUSH
21728: LD_INT 9
21730: PUSH
21731: LD_INT 10
21733: PUSH
21734: LD_INT 11
21736: PUSH
21737: LD_INT 12
21739: PUSH
21740: LD_INT 14
21742: PUSH
21743: LD_INT 15
21745: PUSH
21746: LD_INT 16
21748: PUSH
21749: LD_INT 17
21751: PUSH
21752: LD_INT 18
21754: PUSH
21755: LD_INT 19
21757: PUSH
21758: LD_INT 20
21760: PUSH
21761: LD_INT 21
21763: PUSH
21764: LD_INT 22
21766: PUSH
21767: LD_INT 23
21769: PUSH
21770: LD_INT 24
21772: PUSH
21773: LD_INT 25
21775: PUSH
21776: LD_INT 26
21778: PUSH
21779: LD_INT 27
21781: PUSH
21782: LD_INT 28
21784: PUSH
21785: LD_INT 30
21787: PUSH
21788: LD_INT 31
21790: PUSH
21791: LD_INT 32
21793: PUSH
21794: LD_INT 33
21796: PUSH
21797: LD_INT 34
21799: PUSH
21800: LD_INT 36
21802: PUSH
21803: EMPTY
21804: LIST
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: PUSH
21836: LD_INT 101
21838: PUSH
21839: LD_INT 102
21841: PUSH
21842: LD_INT 103
21844: PUSH
21845: LD_INT 104
21847: PUSH
21848: LD_INT 105
21850: PUSH
21851: LD_INT 106
21853: PUSH
21854: LD_INT 107
21856: PUSH
21857: LD_INT 108
21859: PUSH
21860: LD_INT 109
21862: PUSH
21863: LD_INT 110
21865: PUSH
21866: LD_INT 111
21868: PUSH
21869: LD_INT 112
21871: PUSH
21872: LD_INT 113
21874: PUSH
21875: LD_INT 114
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: ST_TO_ADDR
21898: GO 23065
21900: LD_INT 14
21902: DOUBLE
21903: EQUAL
21904: IFTRUE 21908
21906: GO 22120
21908: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
21909: LD_ADDR_VAR 0 1
21913: PUSH
21914: LD_INT 1
21916: PUSH
21917: LD_INT 2
21919: PUSH
21920: LD_INT 3
21922: PUSH
21923: LD_INT 4
21925: PUSH
21926: LD_INT 5
21928: PUSH
21929: LD_INT 6
21931: PUSH
21932: LD_INT 7
21934: PUSH
21935: LD_INT 8
21937: PUSH
21938: LD_INT 9
21940: PUSH
21941: LD_INT 10
21943: PUSH
21944: LD_INT 11
21946: PUSH
21947: LD_INT 12
21949: PUSH
21950: LD_INT 13
21952: PUSH
21953: LD_INT 14
21955: PUSH
21956: LD_INT 15
21958: PUSH
21959: LD_INT 16
21961: PUSH
21962: LD_INT 17
21964: PUSH
21965: LD_INT 18
21967: PUSH
21968: LD_INT 19
21970: PUSH
21971: LD_INT 20
21973: PUSH
21974: LD_INT 21
21976: PUSH
21977: LD_INT 22
21979: PUSH
21980: LD_INT 23
21982: PUSH
21983: LD_INT 24
21985: PUSH
21986: LD_INT 25
21988: PUSH
21989: LD_INT 26
21991: PUSH
21992: LD_INT 27
21994: PUSH
21995: LD_INT 28
21997: PUSH
21998: LD_INT 29
22000: PUSH
22001: LD_INT 30
22003: PUSH
22004: LD_INT 31
22006: PUSH
22007: LD_INT 32
22009: PUSH
22010: LD_INT 33
22012: PUSH
22013: LD_INT 34
22015: PUSH
22016: LD_INT 36
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: LIST
22031: LIST
22032: LIST
22033: LIST
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: PUSH
22056: LD_INT 101
22058: PUSH
22059: LD_INT 102
22061: PUSH
22062: LD_INT 103
22064: PUSH
22065: LD_INT 104
22067: PUSH
22068: LD_INT 105
22070: PUSH
22071: LD_INT 106
22073: PUSH
22074: LD_INT 107
22076: PUSH
22077: LD_INT 108
22079: PUSH
22080: LD_INT 109
22082: PUSH
22083: LD_INT 110
22085: PUSH
22086: LD_INT 111
22088: PUSH
22089: LD_INT 112
22091: PUSH
22092: LD_INT 113
22094: PUSH
22095: LD_INT 114
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: ST_TO_ADDR
22118: GO 23065
22120: LD_INT 15
22122: DOUBLE
22123: EQUAL
22124: IFTRUE 22128
22126: GO 22340
22128: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
22129: LD_ADDR_VAR 0 1
22133: PUSH
22134: LD_INT 1
22136: PUSH
22137: LD_INT 2
22139: PUSH
22140: LD_INT 3
22142: PUSH
22143: LD_INT 4
22145: PUSH
22146: LD_INT 5
22148: PUSH
22149: LD_INT 6
22151: PUSH
22152: LD_INT 7
22154: PUSH
22155: LD_INT 8
22157: PUSH
22158: LD_INT 9
22160: PUSH
22161: LD_INT 10
22163: PUSH
22164: LD_INT 11
22166: PUSH
22167: LD_INT 12
22169: PUSH
22170: LD_INT 13
22172: PUSH
22173: LD_INT 14
22175: PUSH
22176: LD_INT 15
22178: PUSH
22179: LD_INT 16
22181: PUSH
22182: LD_INT 17
22184: PUSH
22185: LD_INT 18
22187: PUSH
22188: LD_INT 19
22190: PUSH
22191: LD_INT 20
22193: PUSH
22194: LD_INT 21
22196: PUSH
22197: LD_INT 22
22199: PUSH
22200: LD_INT 23
22202: PUSH
22203: LD_INT 24
22205: PUSH
22206: LD_INT 25
22208: PUSH
22209: LD_INT 26
22211: PUSH
22212: LD_INT 27
22214: PUSH
22215: LD_INT 28
22217: PUSH
22218: LD_INT 29
22220: PUSH
22221: LD_INT 30
22223: PUSH
22224: LD_INT 31
22226: PUSH
22227: LD_INT 32
22229: PUSH
22230: LD_INT 33
22232: PUSH
22233: LD_INT 34
22235: PUSH
22236: LD_INT 36
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 101
22278: PUSH
22279: LD_INT 102
22281: PUSH
22282: LD_INT 103
22284: PUSH
22285: LD_INT 104
22287: PUSH
22288: LD_INT 105
22290: PUSH
22291: LD_INT 106
22293: PUSH
22294: LD_INT 107
22296: PUSH
22297: LD_INT 108
22299: PUSH
22300: LD_INT 109
22302: PUSH
22303: LD_INT 110
22305: PUSH
22306: LD_INT 111
22308: PUSH
22309: LD_INT 112
22311: PUSH
22312: LD_INT 113
22314: PUSH
22315: LD_INT 114
22317: PUSH
22318: EMPTY
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: ST_TO_ADDR
22338: GO 23065
22340: LD_INT 16
22342: DOUBLE
22343: EQUAL
22344: IFTRUE 22348
22346: GO 22472
22348: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
22349: LD_ADDR_VAR 0 1
22353: PUSH
22354: LD_INT 2
22356: PUSH
22357: LD_INT 4
22359: PUSH
22360: LD_INT 5
22362: PUSH
22363: LD_INT 7
22365: PUSH
22366: LD_INT 11
22368: PUSH
22369: LD_INT 12
22371: PUSH
22372: LD_INT 15
22374: PUSH
22375: LD_INT 16
22377: PUSH
22378: LD_INT 20
22380: PUSH
22381: LD_INT 21
22383: PUSH
22384: LD_INT 22
22386: PUSH
22387: LD_INT 23
22389: PUSH
22390: LD_INT 25
22392: PUSH
22393: LD_INT 26
22395: PUSH
22396: LD_INT 30
22398: PUSH
22399: LD_INT 31
22401: PUSH
22402: LD_INT 32
22404: PUSH
22405: LD_INT 33
22407: PUSH
22408: LD_INT 34
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: LIST
22415: LIST
22416: LIST
22417: LIST
22418: LIST
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: LIST
22424: LIST
22425: LIST
22426: LIST
22427: LIST
22428: LIST
22429: LIST
22430: LIST
22431: PUSH
22432: LD_INT 101
22434: PUSH
22435: LD_INT 102
22437: PUSH
22438: LD_INT 103
22440: PUSH
22441: LD_INT 106
22443: PUSH
22444: LD_INT 108
22446: PUSH
22447: LD_INT 112
22449: PUSH
22450: LD_INT 113
22452: PUSH
22453: LD_INT 114
22455: PUSH
22456: EMPTY
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: ST_TO_ADDR
22470: GO 23065
22472: LD_INT 17
22474: DOUBLE
22475: EQUAL
22476: IFTRUE 22480
22478: GO 22692
22480: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
22481: LD_ADDR_VAR 0 1
22485: PUSH
22486: LD_INT 1
22488: PUSH
22489: LD_INT 2
22491: PUSH
22492: LD_INT 3
22494: PUSH
22495: LD_INT 4
22497: PUSH
22498: LD_INT 5
22500: PUSH
22501: LD_INT 6
22503: PUSH
22504: LD_INT 7
22506: PUSH
22507: LD_INT 8
22509: PUSH
22510: LD_INT 9
22512: PUSH
22513: LD_INT 10
22515: PUSH
22516: LD_INT 11
22518: PUSH
22519: LD_INT 12
22521: PUSH
22522: LD_INT 13
22524: PUSH
22525: LD_INT 14
22527: PUSH
22528: LD_INT 15
22530: PUSH
22531: LD_INT 16
22533: PUSH
22534: LD_INT 17
22536: PUSH
22537: LD_INT 18
22539: PUSH
22540: LD_INT 19
22542: PUSH
22543: LD_INT 20
22545: PUSH
22546: LD_INT 21
22548: PUSH
22549: LD_INT 22
22551: PUSH
22552: LD_INT 23
22554: PUSH
22555: LD_INT 24
22557: PUSH
22558: LD_INT 25
22560: PUSH
22561: LD_INT 26
22563: PUSH
22564: LD_INT 27
22566: PUSH
22567: LD_INT 28
22569: PUSH
22570: LD_INT 29
22572: PUSH
22573: LD_INT 30
22575: PUSH
22576: LD_INT 31
22578: PUSH
22579: LD_INT 32
22581: PUSH
22582: LD_INT 33
22584: PUSH
22585: LD_INT 34
22587: PUSH
22588: LD_INT 36
22590: PUSH
22591: EMPTY
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: LIST
22617: LIST
22618: LIST
22619: LIST
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: LIST
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 101
22630: PUSH
22631: LD_INT 102
22633: PUSH
22634: LD_INT 103
22636: PUSH
22637: LD_INT 104
22639: PUSH
22640: LD_INT 105
22642: PUSH
22643: LD_INT 106
22645: PUSH
22646: LD_INT 107
22648: PUSH
22649: LD_INT 108
22651: PUSH
22652: LD_INT 109
22654: PUSH
22655: LD_INT 110
22657: PUSH
22658: LD_INT 111
22660: PUSH
22661: LD_INT 112
22663: PUSH
22664: LD_INT 113
22666: PUSH
22667: LD_INT 114
22669: PUSH
22670: EMPTY
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: ST_TO_ADDR
22690: GO 23065
22692: LD_INT 18
22694: DOUBLE
22695: EQUAL
22696: IFTRUE 22700
22698: GO 22836
22700: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
22701: LD_ADDR_VAR 0 1
22705: PUSH
22706: LD_INT 2
22708: PUSH
22709: LD_INT 4
22711: PUSH
22712: LD_INT 5
22714: PUSH
22715: LD_INT 7
22717: PUSH
22718: LD_INT 11
22720: PUSH
22721: LD_INT 12
22723: PUSH
22724: LD_INT 15
22726: PUSH
22727: LD_INT 16
22729: PUSH
22730: LD_INT 20
22732: PUSH
22733: LD_INT 21
22735: PUSH
22736: LD_INT 22
22738: PUSH
22739: LD_INT 23
22741: PUSH
22742: LD_INT 25
22744: PUSH
22745: LD_INT 26
22747: PUSH
22748: LD_INT 30
22750: PUSH
22751: LD_INT 31
22753: PUSH
22754: LD_INT 32
22756: PUSH
22757: LD_INT 33
22759: PUSH
22760: LD_INT 34
22762: PUSH
22763: LD_INT 35
22765: PUSH
22766: LD_INT 36
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: PUSH
22792: LD_INT 101
22794: PUSH
22795: LD_INT 102
22797: PUSH
22798: LD_INT 103
22800: PUSH
22801: LD_INT 106
22803: PUSH
22804: LD_INT 108
22806: PUSH
22807: LD_INT 112
22809: PUSH
22810: LD_INT 113
22812: PUSH
22813: LD_INT 114
22815: PUSH
22816: LD_INT 115
22818: PUSH
22819: EMPTY
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: ST_TO_ADDR
22834: GO 23065
22836: LD_INT 19
22838: DOUBLE
22839: EQUAL
22840: IFTRUE 22844
22842: GO 23064
22844: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
22845: LD_ADDR_VAR 0 1
22849: PUSH
22850: LD_INT 1
22852: PUSH
22853: LD_INT 2
22855: PUSH
22856: LD_INT 3
22858: PUSH
22859: LD_INT 4
22861: PUSH
22862: LD_INT 5
22864: PUSH
22865: LD_INT 6
22867: PUSH
22868: LD_INT 7
22870: PUSH
22871: LD_INT 8
22873: PUSH
22874: LD_INT 9
22876: PUSH
22877: LD_INT 10
22879: PUSH
22880: LD_INT 11
22882: PUSH
22883: LD_INT 12
22885: PUSH
22886: LD_INT 13
22888: PUSH
22889: LD_INT 14
22891: PUSH
22892: LD_INT 15
22894: PUSH
22895: LD_INT 16
22897: PUSH
22898: LD_INT 17
22900: PUSH
22901: LD_INT 18
22903: PUSH
22904: LD_INT 19
22906: PUSH
22907: LD_INT 20
22909: PUSH
22910: LD_INT 21
22912: PUSH
22913: LD_INT 22
22915: PUSH
22916: LD_INT 23
22918: PUSH
22919: LD_INT 24
22921: PUSH
22922: LD_INT 25
22924: PUSH
22925: LD_INT 26
22927: PUSH
22928: LD_INT 27
22930: PUSH
22931: LD_INT 28
22933: PUSH
22934: LD_INT 29
22936: PUSH
22937: LD_INT 30
22939: PUSH
22940: LD_INT 31
22942: PUSH
22943: LD_INT 32
22945: PUSH
22946: LD_INT 33
22948: PUSH
22949: LD_INT 34
22951: PUSH
22952: LD_INT 35
22954: PUSH
22955: LD_INT 36
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: PUSH
22996: LD_INT 101
22998: PUSH
22999: LD_INT 102
23001: PUSH
23002: LD_INT 103
23004: PUSH
23005: LD_INT 104
23007: PUSH
23008: LD_INT 105
23010: PUSH
23011: LD_INT 106
23013: PUSH
23014: LD_INT 107
23016: PUSH
23017: LD_INT 108
23019: PUSH
23020: LD_INT 109
23022: PUSH
23023: LD_INT 110
23025: PUSH
23026: LD_INT 111
23028: PUSH
23029: LD_INT 112
23031: PUSH
23032: LD_INT 113
23034: PUSH
23035: LD_INT 114
23037: PUSH
23038: LD_INT 115
23040: PUSH
23041: EMPTY
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: ST_TO_ADDR
23062: GO 23065
23064: POP
// end else
23065: GO 23284
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
23067: LD_ADDR_VAR 0 1
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: LD_INT 3
23080: PUSH
23081: LD_INT 4
23083: PUSH
23084: LD_INT 5
23086: PUSH
23087: LD_INT 6
23089: PUSH
23090: LD_INT 7
23092: PUSH
23093: LD_INT 8
23095: PUSH
23096: LD_INT 9
23098: PUSH
23099: LD_INT 10
23101: PUSH
23102: LD_INT 11
23104: PUSH
23105: LD_INT 12
23107: PUSH
23108: LD_INT 13
23110: PUSH
23111: LD_INT 14
23113: PUSH
23114: LD_INT 15
23116: PUSH
23117: LD_INT 16
23119: PUSH
23120: LD_INT 17
23122: PUSH
23123: LD_INT 18
23125: PUSH
23126: LD_INT 19
23128: PUSH
23129: LD_INT 20
23131: PUSH
23132: LD_INT 21
23134: PUSH
23135: LD_INT 22
23137: PUSH
23138: LD_INT 23
23140: PUSH
23141: LD_INT 24
23143: PUSH
23144: LD_INT 25
23146: PUSH
23147: LD_INT 26
23149: PUSH
23150: LD_INT 27
23152: PUSH
23153: LD_INT 28
23155: PUSH
23156: LD_INT 29
23158: PUSH
23159: LD_INT 30
23161: PUSH
23162: LD_INT 31
23164: PUSH
23165: LD_INT 32
23167: PUSH
23168: LD_INT 33
23170: PUSH
23171: LD_INT 34
23173: PUSH
23174: LD_INT 35
23176: PUSH
23177: LD_INT 36
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 101
23220: PUSH
23221: LD_INT 102
23223: PUSH
23224: LD_INT 103
23226: PUSH
23227: LD_INT 104
23229: PUSH
23230: LD_INT 105
23232: PUSH
23233: LD_INT 106
23235: PUSH
23236: LD_INT 107
23238: PUSH
23239: LD_INT 108
23241: PUSH
23242: LD_INT 109
23244: PUSH
23245: LD_INT 110
23247: PUSH
23248: LD_INT 111
23250: PUSH
23251: LD_INT 112
23253: PUSH
23254: LD_INT 113
23256: PUSH
23257: LD_INT 114
23259: PUSH
23260: LD_INT 115
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: ST_TO_ADDR
// if result then
23284: LD_VAR 0 1
23288: IFFALSE 23577
// begin normal :=  ;
23290: LD_ADDR_VAR 0 3
23294: PUSH
23295: LD_STRING 
23297: ST_TO_ADDR
// hardcore :=  ;
23298: LD_ADDR_VAR 0 4
23302: PUSH
23303: LD_STRING 
23305: ST_TO_ADDR
// for i = 1 to normalCounter do
23306: LD_ADDR_VAR 0 5
23310: PUSH
23311: DOUBLE
23312: LD_INT 1
23314: DEC
23315: ST_TO_ADDR
23316: LD_EXP 66
23320: PUSH
23321: FOR_TO
23322: IFFALSE 23423
// begin tmp := 0 ;
23324: LD_ADDR_VAR 0 2
23328: PUSH
23329: LD_STRING 0
23331: ST_TO_ADDR
// if result [ 1 ] then
23332: LD_VAR 0 1
23336: PUSH
23337: LD_INT 1
23339: ARRAY
23340: IFFALSE 23405
// if result [ 1 ] [ 1 ] = i then
23342: LD_VAR 0 1
23346: PUSH
23347: LD_INT 1
23349: ARRAY
23350: PUSH
23351: LD_INT 1
23353: ARRAY
23354: PUSH
23355: LD_VAR 0 5
23359: EQUAL
23360: IFFALSE 23405
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
23362: LD_ADDR_VAR 0 1
23366: PUSH
23367: LD_VAR 0 1
23371: PPUSH
23372: LD_INT 1
23374: PPUSH
23375: LD_VAR 0 1
23379: PUSH
23380: LD_INT 1
23382: ARRAY
23383: PPUSH
23384: LD_INT 1
23386: PPUSH
23387: CALL_OW 3
23391: PPUSH
23392: CALL_OW 1
23396: ST_TO_ADDR
// tmp := 1 ;
23397: LD_ADDR_VAR 0 2
23401: PUSH
23402: LD_STRING 1
23404: ST_TO_ADDR
// end ; normal := normal & tmp ;
23405: LD_ADDR_VAR 0 3
23409: PUSH
23410: LD_VAR 0 3
23414: PUSH
23415: LD_VAR 0 2
23419: STR
23420: ST_TO_ADDR
// end ;
23421: GO 23321
23423: POP
23424: POP
// for i = 1 to hardcoreCounter do
23425: LD_ADDR_VAR 0 5
23429: PUSH
23430: DOUBLE
23431: LD_INT 1
23433: DEC
23434: ST_TO_ADDR
23435: LD_EXP 67
23439: PUSH
23440: FOR_TO
23441: IFFALSE 23546
// begin tmp := 0 ;
23443: LD_ADDR_VAR 0 2
23447: PUSH
23448: LD_STRING 0
23450: ST_TO_ADDR
// if result [ 2 ] then
23451: LD_VAR 0 1
23455: PUSH
23456: LD_INT 2
23458: ARRAY
23459: IFFALSE 23528
// if result [ 2 ] [ 1 ] = 100 + i then
23461: LD_VAR 0 1
23465: PUSH
23466: LD_INT 2
23468: ARRAY
23469: PUSH
23470: LD_INT 1
23472: ARRAY
23473: PUSH
23474: LD_INT 100
23476: PUSH
23477: LD_VAR 0 5
23481: PLUS
23482: EQUAL
23483: IFFALSE 23528
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
23485: LD_ADDR_VAR 0 1
23489: PUSH
23490: LD_VAR 0 1
23494: PPUSH
23495: LD_INT 2
23497: PPUSH
23498: LD_VAR 0 1
23502: PUSH
23503: LD_INT 2
23505: ARRAY
23506: PPUSH
23507: LD_INT 1
23509: PPUSH
23510: CALL_OW 3
23514: PPUSH
23515: CALL_OW 1
23519: ST_TO_ADDR
// tmp := 1 ;
23520: LD_ADDR_VAR 0 2
23524: PUSH
23525: LD_STRING 1
23527: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
23528: LD_ADDR_VAR 0 4
23532: PUSH
23533: LD_VAR 0 4
23537: PUSH
23538: LD_VAR 0 2
23542: STR
23543: ST_TO_ADDR
// end ;
23544: GO 23440
23546: POP
23547: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
23548: LD_STRING getStreamItemsFromMission("
23550: PUSH
23551: LD_VAR 0 3
23555: STR
23556: PUSH
23557: LD_STRING ","
23559: STR
23560: PUSH
23561: LD_VAR 0 4
23565: STR
23566: PUSH
23567: LD_STRING ")
23569: STR
23570: PPUSH
23571: CALL_OW 559
// end else
23575: GO 23584
// ToLua ( getStreamItemsFromMission("","") ) ;
23577: LD_STRING getStreamItemsFromMission("","")
23579: PPUSH
23580: CALL_OW 559
// end ;
23584: LD_VAR 0 1
23588: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
23589: LD_VAR 0 2
23593: PUSH
23594: LD_INT 100
23596: EQUAL
23597: IFFALSE 24546
// begin if not StreamModeActive then
23599: LD_EXP 65
23603: NOT
23604: IFFALSE 23614
// StreamModeActive := true ;
23606: LD_ADDR_EXP 65
23610: PUSH
23611: LD_INT 1
23613: ST_TO_ADDR
// if p3 = 0 then
23614: LD_VAR 0 3
23618: PUSH
23619: LD_INT 0
23621: EQUAL
23622: IFFALSE 23628
// InitStreamMode ;
23624: CALL 19667 0 0
// if p3 = 1 then
23628: LD_VAR 0 3
23632: PUSH
23633: LD_INT 1
23635: EQUAL
23636: IFFALSE 23646
// sRocket := true ;
23638: LD_ADDR_EXP 70
23642: PUSH
23643: LD_INT 1
23645: ST_TO_ADDR
// if p3 = 2 then
23646: LD_VAR 0 3
23650: PUSH
23651: LD_INT 2
23653: EQUAL
23654: IFFALSE 23664
// sSpeed := true ;
23656: LD_ADDR_EXP 69
23660: PUSH
23661: LD_INT 1
23663: ST_TO_ADDR
// if p3 = 3 then
23664: LD_VAR 0 3
23668: PUSH
23669: LD_INT 3
23671: EQUAL
23672: IFFALSE 23682
// sEngine := true ;
23674: LD_ADDR_EXP 71
23678: PUSH
23679: LD_INT 1
23681: ST_TO_ADDR
// if p3 = 4 then
23682: LD_VAR 0 3
23686: PUSH
23687: LD_INT 4
23689: EQUAL
23690: IFFALSE 23700
// sSpec := true ;
23692: LD_ADDR_EXP 68
23696: PUSH
23697: LD_INT 1
23699: ST_TO_ADDR
// if p3 = 5 then
23700: LD_VAR 0 3
23704: PUSH
23705: LD_INT 5
23707: EQUAL
23708: IFFALSE 23718
// sLevel := true ;
23710: LD_ADDR_EXP 72
23714: PUSH
23715: LD_INT 1
23717: ST_TO_ADDR
// if p3 = 6 then
23718: LD_VAR 0 3
23722: PUSH
23723: LD_INT 6
23725: EQUAL
23726: IFFALSE 23736
// sArmoury := true ;
23728: LD_ADDR_EXP 73
23732: PUSH
23733: LD_INT 1
23735: ST_TO_ADDR
// if p3 = 7 then
23736: LD_VAR 0 3
23740: PUSH
23741: LD_INT 7
23743: EQUAL
23744: IFFALSE 23754
// sRadar := true ;
23746: LD_ADDR_EXP 74
23750: PUSH
23751: LD_INT 1
23753: ST_TO_ADDR
// if p3 = 8 then
23754: LD_VAR 0 3
23758: PUSH
23759: LD_INT 8
23761: EQUAL
23762: IFFALSE 23772
// sBunker := true ;
23764: LD_ADDR_EXP 75
23768: PUSH
23769: LD_INT 1
23771: ST_TO_ADDR
// if p3 = 9 then
23772: LD_VAR 0 3
23776: PUSH
23777: LD_INT 9
23779: EQUAL
23780: IFFALSE 23790
// sHack := true ;
23782: LD_ADDR_EXP 76
23786: PUSH
23787: LD_INT 1
23789: ST_TO_ADDR
// if p3 = 10 then
23790: LD_VAR 0 3
23794: PUSH
23795: LD_INT 10
23797: EQUAL
23798: IFFALSE 23808
// sFire := true ;
23800: LD_ADDR_EXP 77
23804: PUSH
23805: LD_INT 1
23807: ST_TO_ADDR
// if p3 = 11 then
23808: LD_VAR 0 3
23812: PUSH
23813: LD_INT 11
23815: EQUAL
23816: IFFALSE 23826
// sRefresh := true ;
23818: LD_ADDR_EXP 78
23822: PUSH
23823: LD_INT 1
23825: ST_TO_ADDR
// if p3 = 12 then
23826: LD_VAR 0 3
23830: PUSH
23831: LD_INT 12
23833: EQUAL
23834: IFFALSE 23844
// sExp := true ;
23836: LD_ADDR_EXP 79
23840: PUSH
23841: LD_INT 1
23843: ST_TO_ADDR
// if p3 = 13 then
23844: LD_VAR 0 3
23848: PUSH
23849: LD_INT 13
23851: EQUAL
23852: IFFALSE 23862
// sDepot := true ;
23854: LD_ADDR_EXP 80
23858: PUSH
23859: LD_INT 1
23861: ST_TO_ADDR
// if p3 = 14 then
23862: LD_VAR 0 3
23866: PUSH
23867: LD_INT 14
23869: EQUAL
23870: IFFALSE 23880
// sFlag := true ;
23872: LD_ADDR_EXP 81
23876: PUSH
23877: LD_INT 1
23879: ST_TO_ADDR
// if p3 = 15 then
23880: LD_VAR 0 3
23884: PUSH
23885: LD_INT 15
23887: EQUAL
23888: IFFALSE 23898
// sKamikadze := true ;
23890: LD_ADDR_EXP 89
23894: PUSH
23895: LD_INT 1
23897: ST_TO_ADDR
// if p3 = 16 then
23898: LD_VAR 0 3
23902: PUSH
23903: LD_INT 16
23905: EQUAL
23906: IFFALSE 23916
// sTroll := true ;
23908: LD_ADDR_EXP 90
23912: PUSH
23913: LD_INT 1
23915: ST_TO_ADDR
// if p3 = 17 then
23916: LD_VAR 0 3
23920: PUSH
23921: LD_INT 17
23923: EQUAL
23924: IFFALSE 23934
// sSlow := true ;
23926: LD_ADDR_EXP 91
23930: PUSH
23931: LD_INT 1
23933: ST_TO_ADDR
// if p3 = 18 then
23934: LD_VAR 0 3
23938: PUSH
23939: LD_INT 18
23941: EQUAL
23942: IFFALSE 23952
// sLack := true ;
23944: LD_ADDR_EXP 92
23948: PUSH
23949: LD_INT 1
23951: ST_TO_ADDR
// if p3 = 19 then
23952: LD_VAR 0 3
23956: PUSH
23957: LD_INT 19
23959: EQUAL
23960: IFFALSE 23970
// sTank := true ;
23962: LD_ADDR_EXP 94
23966: PUSH
23967: LD_INT 1
23969: ST_TO_ADDR
// if p3 = 20 then
23970: LD_VAR 0 3
23974: PUSH
23975: LD_INT 20
23977: EQUAL
23978: IFFALSE 23988
// sRemote := true ;
23980: LD_ADDR_EXP 95
23984: PUSH
23985: LD_INT 1
23987: ST_TO_ADDR
// if p3 = 21 then
23988: LD_VAR 0 3
23992: PUSH
23993: LD_INT 21
23995: EQUAL
23996: IFFALSE 24006
// sPowell := true ;
23998: LD_ADDR_EXP 96
24002: PUSH
24003: LD_INT 1
24005: ST_TO_ADDR
// if p3 = 22 then
24006: LD_VAR 0 3
24010: PUSH
24011: LD_INT 22
24013: EQUAL
24014: IFFALSE 24024
// sTeleport := true ;
24016: LD_ADDR_EXP 99
24020: PUSH
24021: LD_INT 1
24023: ST_TO_ADDR
// if p3 = 23 then
24024: LD_VAR 0 3
24028: PUSH
24029: LD_INT 23
24031: EQUAL
24032: IFFALSE 24042
// sOilTower := true ;
24034: LD_ADDR_EXP 101
24038: PUSH
24039: LD_INT 1
24041: ST_TO_ADDR
// if p3 = 24 then
24042: LD_VAR 0 3
24046: PUSH
24047: LD_INT 24
24049: EQUAL
24050: IFFALSE 24060
// sShovel := true ;
24052: LD_ADDR_EXP 102
24056: PUSH
24057: LD_INT 1
24059: ST_TO_ADDR
// if p3 = 25 then
24060: LD_VAR 0 3
24064: PUSH
24065: LD_INT 25
24067: EQUAL
24068: IFFALSE 24078
// sSheik := true ;
24070: LD_ADDR_EXP 103
24074: PUSH
24075: LD_INT 1
24077: ST_TO_ADDR
// if p3 = 26 then
24078: LD_VAR 0 3
24082: PUSH
24083: LD_INT 26
24085: EQUAL
24086: IFFALSE 24096
// sEarthquake := true ;
24088: LD_ADDR_EXP 105
24092: PUSH
24093: LD_INT 1
24095: ST_TO_ADDR
// if p3 = 27 then
24096: LD_VAR 0 3
24100: PUSH
24101: LD_INT 27
24103: EQUAL
24104: IFFALSE 24114
// sAI := true ;
24106: LD_ADDR_EXP 106
24110: PUSH
24111: LD_INT 1
24113: ST_TO_ADDR
// if p3 = 28 then
24114: LD_VAR 0 3
24118: PUSH
24119: LD_INT 28
24121: EQUAL
24122: IFFALSE 24132
// sCargo := true ;
24124: LD_ADDR_EXP 109
24128: PUSH
24129: LD_INT 1
24131: ST_TO_ADDR
// if p3 = 29 then
24132: LD_VAR 0 3
24136: PUSH
24137: LD_INT 29
24139: EQUAL
24140: IFFALSE 24150
// sDLaser := true ;
24142: LD_ADDR_EXP 110
24146: PUSH
24147: LD_INT 1
24149: ST_TO_ADDR
// if p3 = 30 then
24150: LD_VAR 0 3
24154: PUSH
24155: LD_INT 30
24157: EQUAL
24158: IFFALSE 24168
// sExchange := true ;
24160: LD_ADDR_EXP 111
24164: PUSH
24165: LD_INT 1
24167: ST_TO_ADDR
// if p3 = 31 then
24168: LD_VAR 0 3
24172: PUSH
24173: LD_INT 31
24175: EQUAL
24176: IFFALSE 24186
// sFac := true ;
24178: LD_ADDR_EXP 112
24182: PUSH
24183: LD_INT 1
24185: ST_TO_ADDR
// if p3 = 32 then
24186: LD_VAR 0 3
24190: PUSH
24191: LD_INT 32
24193: EQUAL
24194: IFFALSE 24204
// sPower := true ;
24196: LD_ADDR_EXP 113
24200: PUSH
24201: LD_INT 1
24203: ST_TO_ADDR
// if p3 = 33 then
24204: LD_VAR 0 3
24208: PUSH
24209: LD_INT 33
24211: EQUAL
24212: IFFALSE 24222
// sRandom := true ;
24214: LD_ADDR_EXP 114
24218: PUSH
24219: LD_INT 1
24221: ST_TO_ADDR
// if p3 = 34 then
24222: LD_VAR 0 3
24226: PUSH
24227: LD_INT 34
24229: EQUAL
24230: IFFALSE 24240
// sShield := true ;
24232: LD_ADDR_EXP 115
24236: PUSH
24237: LD_INT 1
24239: ST_TO_ADDR
// if p3 = 35 then
24240: LD_VAR 0 3
24244: PUSH
24245: LD_INT 35
24247: EQUAL
24248: IFFALSE 24258
// sTime := true ;
24250: LD_ADDR_EXP 116
24254: PUSH
24255: LD_INT 1
24257: ST_TO_ADDR
// if p3 = 36 then
24258: LD_VAR 0 3
24262: PUSH
24263: LD_INT 36
24265: EQUAL
24266: IFFALSE 24276
// sTools := true ;
24268: LD_ADDR_EXP 117
24272: PUSH
24273: LD_INT 1
24275: ST_TO_ADDR
// if p3 = 101 then
24276: LD_VAR 0 3
24280: PUSH
24281: LD_INT 101
24283: EQUAL
24284: IFFALSE 24294
// sSold := true ;
24286: LD_ADDR_EXP 82
24290: PUSH
24291: LD_INT 1
24293: ST_TO_ADDR
// if p3 = 102 then
24294: LD_VAR 0 3
24298: PUSH
24299: LD_INT 102
24301: EQUAL
24302: IFFALSE 24312
// sDiff := true ;
24304: LD_ADDR_EXP 83
24308: PUSH
24309: LD_INT 1
24311: ST_TO_ADDR
// if p3 = 103 then
24312: LD_VAR 0 3
24316: PUSH
24317: LD_INT 103
24319: EQUAL
24320: IFFALSE 24330
// sFog := true ;
24322: LD_ADDR_EXP 86
24326: PUSH
24327: LD_INT 1
24329: ST_TO_ADDR
// if p3 = 104 then
24330: LD_VAR 0 3
24334: PUSH
24335: LD_INT 104
24337: EQUAL
24338: IFFALSE 24348
// sReset := true ;
24340: LD_ADDR_EXP 87
24344: PUSH
24345: LD_INT 1
24347: ST_TO_ADDR
// if p3 = 105 then
24348: LD_VAR 0 3
24352: PUSH
24353: LD_INT 105
24355: EQUAL
24356: IFFALSE 24366
// sSun := true ;
24358: LD_ADDR_EXP 88
24362: PUSH
24363: LD_INT 1
24365: ST_TO_ADDR
// if p3 = 106 then
24366: LD_VAR 0 3
24370: PUSH
24371: LD_INT 106
24373: EQUAL
24374: IFFALSE 24384
// sTiger := true ;
24376: LD_ADDR_EXP 84
24380: PUSH
24381: LD_INT 1
24383: ST_TO_ADDR
// if p3 = 107 then
24384: LD_VAR 0 3
24388: PUSH
24389: LD_INT 107
24391: EQUAL
24392: IFFALSE 24402
// sBomb := true ;
24394: LD_ADDR_EXP 85
24398: PUSH
24399: LD_INT 1
24401: ST_TO_ADDR
// if p3 = 108 then
24402: LD_VAR 0 3
24406: PUSH
24407: LD_INT 108
24409: EQUAL
24410: IFFALSE 24420
// sWound := true ;
24412: LD_ADDR_EXP 93
24416: PUSH
24417: LD_INT 1
24419: ST_TO_ADDR
// if p3 = 109 then
24420: LD_VAR 0 3
24424: PUSH
24425: LD_INT 109
24427: EQUAL
24428: IFFALSE 24438
// sBetray := true ;
24430: LD_ADDR_EXP 97
24434: PUSH
24435: LD_INT 1
24437: ST_TO_ADDR
// if p3 = 110 then
24438: LD_VAR 0 3
24442: PUSH
24443: LD_INT 110
24445: EQUAL
24446: IFFALSE 24456
// sContamin := true ;
24448: LD_ADDR_EXP 98
24452: PUSH
24453: LD_INT 1
24455: ST_TO_ADDR
// if p3 = 111 then
24456: LD_VAR 0 3
24460: PUSH
24461: LD_INT 111
24463: EQUAL
24464: IFFALSE 24474
// sOil := true ;
24466: LD_ADDR_EXP 100
24470: PUSH
24471: LD_INT 1
24473: ST_TO_ADDR
// if p3 = 112 then
24474: LD_VAR 0 3
24478: PUSH
24479: LD_INT 112
24481: EQUAL
24482: IFFALSE 24492
// sStu := true ;
24484: LD_ADDR_EXP 104
24488: PUSH
24489: LD_INT 1
24491: ST_TO_ADDR
// if p3 = 113 then
24492: LD_VAR 0 3
24496: PUSH
24497: LD_INT 113
24499: EQUAL
24500: IFFALSE 24510
// sBazooka := true ;
24502: LD_ADDR_EXP 107
24506: PUSH
24507: LD_INT 1
24509: ST_TO_ADDR
// if p3 = 114 then
24510: LD_VAR 0 3
24514: PUSH
24515: LD_INT 114
24517: EQUAL
24518: IFFALSE 24528
// sMortar := true ;
24520: LD_ADDR_EXP 108
24524: PUSH
24525: LD_INT 1
24527: ST_TO_ADDR
// if p3 = 115 then
24528: LD_VAR 0 3
24532: PUSH
24533: LD_INT 115
24535: EQUAL
24536: IFFALSE 24546
// sRanger := true ;
24538: LD_ADDR_EXP 118
24542: PUSH
24543: LD_INT 1
24545: ST_TO_ADDR
// end ; end ;
24546: PPOPN 6
24548: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24549: LD_EXP 65
24553: PUSH
24554: LD_EXP 70
24558: AND
24559: IFFALSE 24683
24561: GO 24563
24563: DISABLE
24564: LD_INT 0
24566: PPUSH
24567: PPUSH
// begin enable ;
24568: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24569: LD_ADDR_VAR 0 2
24573: PUSH
24574: LD_INT 22
24576: PUSH
24577: LD_OWVAR 2
24581: PUSH
24582: EMPTY
24583: LIST
24584: LIST
24585: PUSH
24586: LD_INT 2
24588: PUSH
24589: LD_INT 34
24591: PUSH
24592: LD_INT 7
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 34
24601: PUSH
24602: LD_INT 45
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 34
24611: PUSH
24612: LD_INT 28
24614: PUSH
24615: EMPTY
24616: LIST
24617: LIST
24618: PUSH
24619: LD_INT 34
24621: PUSH
24622: LD_INT 47
24624: PUSH
24625: EMPTY
24626: LIST
24627: LIST
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PPUSH
24640: CALL_OW 69
24644: ST_TO_ADDR
// if not tmp then
24645: LD_VAR 0 2
24649: NOT
24650: IFFALSE 24654
// exit ;
24652: GO 24683
// for i in tmp do
24654: LD_ADDR_VAR 0 1
24658: PUSH
24659: LD_VAR 0 2
24663: PUSH
24664: FOR_IN
24665: IFFALSE 24681
// begin SetLives ( i , 0 ) ;
24667: LD_VAR 0 1
24671: PPUSH
24672: LD_INT 0
24674: PPUSH
24675: CALL_OW 234
// end ;
24679: GO 24664
24681: POP
24682: POP
// end ;
24683: PPOPN 2
24685: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
24686: LD_EXP 65
24690: PUSH
24691: LD_EXP 71
24695: AND
24696: IFFALSE 24780
24698: GO 24700
24700: DISABLE
24701: LD_INT 0
24703: PPUSH
24704: PPUSH
// begin enable ;
24705: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
24706: LD_ADDR_VAR 0 2
24710: PUSH
24711: LD_INT 22
24713: PUSH
24714: LD_OWVAR 2
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: LD_INT 32
24725: PUSH
24726: LD_INT 3
24728: PUSH
24729: EMPTY
24730: LIST
24731: LIST
24732: PUSH
24733: EMPTY
24734: LIST
24735: LIST
24736: PPUSH
24737: CALL_OW 69
24741: ST_TO_ADDR
// if not tmp then
24742: LD_VAR 0 2
24746: NOT
24747: IFFALSE 24751
// exit ;
24749: GO 24780
// for i in tmp do
24751: LD_ADDR_VAR 0 1
24755: PUSH
24756: LD_VAR 0 2
24760: PUSH
24761: FOR_IN
24762: IFFALSE 24778
// begin SetLives ( i , 0 ) ;
24764: LD_VAR 0 1
24768: PPUSH
24769: LD_INT 0
24771: PPUSH
24772: CALL_OW 234
// end ;
24776: GO 24761
24778: POP
24779: POP
// end ;
24780: PPOPN 2
24782: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
24783: LD_EXP 65
24787: PUSH
24788: LD_EXP 68
24792: AND
24793: IFFALSE 24886
24795: GO 24797
24797: DISABLE
24798: LD_INT 0
24800: PPUSH
// begin enable ;
24801: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
24802: LD_ADDR_VAR 0 1
24806: PUSH
24807: LD_INT 22
24809: PUSH
24810: LD_OWVAR 2
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PUSH
24819: LD_INT 2
24821: PUSH
24822: LD_INT 25
24824: PUSH
24825: LD_INT 5
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: LD_INT 25
24834: PUSH
24835: LD_INT 9
24837: PUSH
24838: EMPTY
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 25
24844: PUSH
24845: LD_INT 8
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: EMPTY
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PPUSH
24862: CALL_OW 69
24866: PUSH
24867: FOR_IN
24868: IFFALSE 24884
// begin SetClass ( i , 1 ) ;
24870: LD_VAR 0 1
24874: PPUSH
24875: LD_INT 1
24877: PPUSH
24878: CALL_OW 336
// end ;
24882: GO 24867
24884: POP
24885: POP
// end ;
24886: PPOPN 1
24888: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
24889: LD_EXP 65
24893: PUSH
24894: LD_EXP 69
24898: AND
24899: PUSH
24900: LD_OWVAR 65
24904: PUSH
24905: LD_INT 7
24907: LESS
24908: AND
24909: IFFALSE 24923
24911: GO 24913
24913: DISABLE
// begin enable ;
24914: ENABLE
// game_speed := 7 ;
24915: LD_ADDR_OWVAR 65
24919: PUSH
24920: LD_INT 7
24922: ST_TO_ADDR
// end ;
24923: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
24924: LD_EXP 65
24928: PUSH
24929: LD_EXP 72
24933: AND
24934: IFFALSE 25136
24936: GO 24938
24938: DISABLE
24939: LD_INT 0
24941: PPUSH
24942: PPUSH
24943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24944: LD_ADDR_VAR 0 3
24948: PUSH
24949: LD_INT 81
24951: PUSH
24952: LD_OWVAR 2
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: PUSH
24961: LD_INT 21
24963: PUSH
24964: LD_INT 1
24966: PUSH
24967: EMPTY
24968: LIST
24969: LIST
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PPUSH
24975: CALL_OW 69
24979: ST_TO_ADDR
// if not tmp then
24980: LD_VAR 0 3
24984: NOT
24985: IFFALSE 24989
// exit ;
24987: GO 25136
// if tmp > 5 then
24989: LD_VAR 0 3
24993: PUSH
24994: LD_INT 5
24996: GREATER
24997: IFFALSE 25009
// k := 5 else
24999: LD_ADDR_VAR 0 2
25003: PUSH
25004: LD_INT 5
25006: ST_TO_ADDR
25007: GO 25019
// k := tmp ;
25009: LD_ADDR_VAR 0 2
25013: PUSH
25014: LD_VAR 0 3
25018: ST_TO_ADDR
// for i := 1 to k do
25019: LD_ADDR_VAR 0 1
25023: PUSH
25024: DOUBLE
25025: LD_INT 1
25027: DEC
25028: ST_TO_ADDR
25029: LD_VAR 0 2
25033: PUSH
25034: FOR_TO
25035: IFFALSE 25134
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25037: LD_VAR 0 3
25041: PUSH
25042: LD_VAR 0 1
25046: ARRAY
25047: PPUSH
25048: LD_VAR 0 1
25052: PUSH
25053: LD_INT 4
25055: MOD
25056: PUSH
25057: LD_INT 1
25059: PLUS
25060: PPUSH
25061: CALL_OW 259
25065: PUSH
25066: LD_INT 10
25068: LESS
25069: IFFALSE 25132
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25071: LD_VAR 0 3
25075: PUSH
25076: LD_VAR 0 1
25080: ARRAY
25081: PPUSH
25082: LD_VAR 0 1
25086: PUSH
25087: LD_INT 4
25089: MOD
25090: PUSH
25091: LD_INT 1
25093: PLUS
25094: PPUSH
25095: LD_VAR 0 3
25099: PUSH
25100: LD_VAR 0 1
25104: ARRAY
25105: PPUSH
25106: LD_VAR 0 1
25110: PUSH
25111: LD_INT 4
25113: MOD
25114: PUSH
25115: LD_INT 1
25117: PLUS
25118: PPUSH
25119: CALL_OW 259
25123: PUSH
25124: LD_INT 1
25126: PLUS
25127: PPUSH
25128: CALL_OW 237
25132: GO 25034
25134: POP
25135: POP
// end ;
25136: PPOPN 3
25138: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25139: LD_EXP 65
25143: PUSH
25144: LD_EXP 73
25148: AND
25149: IFFALSE 25169
25151: GO 25153
25153: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25154: LD_INT 4
25156: PPUSH
25157: LD_OWVAR 2
25161: PPUSH
25162: LD_INT 0
25164: PPUSH
25165: CALL_OW 324
25169: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25170: LD_EXP 65
25174: PUSH
25175: LD_EXP 102
25179: AND
25180: IFFALSE 25200
25182: GO 25184
25184: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25185: LD_INT 19
25187: PPUSH
25188: LD_OWVAR 2
25192: PPUSH
25193: LD_INT 0
25195: PPUSH
25196: CALL_OW 324
25200: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25201: LD_EXP 65
25205: PUSH
25206: LD_EXP 74
25210: AND
25211: IFFALSE 25313
25213: GO 25215
25215: DISABLE
25216: LD_INT 0
25218: PPUSH
25219: PPUSH
// begin enable ;
25220: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25221: LD_ADDR_VAR 0 2
25225: PUSH
25226: LD_INT 22
25228: PUSH
25229: LD_OWVAR 2
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 2
25240: PUSH
25241: LD_INT 34
25243: PUSH
25244: LD_INT 11
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 34
25253: PUSH
25254: LD_INT 30
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: LIST
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PPUSH
25270: CALL_OW 69
25274: ST_TO_ADDR
// if not tmp then
25275: LD_VAR 0 2
25279: NOT
25280: IFFALSE 25284
// exit ;
25282: GO 25313
// for i in tmp do
25284: LD_ADDR_VAR 0 1
25288: PUSH
25289: LD_VAR 0 2
25293: PUSH
25294: FOR_IN
25295: IFFALSE 25311
// begin SetLives ( i , 0 ) ;
25297: LD_VAR 0 1
25301: PPUSH
25302: LD_INT 0
25304: PPUSH
25305: CALL_OW 234
// end ;
25309: GO 25294
25311: POP
25312: POP
// end ;
25313: PPOPN 2
25315: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25316: LD_EXP 65
25320: PUSH
25321: LD_EXP 75
25325: AND
25326: IFFALSE 25346
25328: GO 25330
25330: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25331: LD_INT 32
25333: PPUSH
25334: LD_OWVAR 2
25338: PPUSH
25339: LD_INT 0
25341: PPUSH
25342: CALL_OW 324
25346: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25347: LD_EXP 65
25351: PUSH
25352: LD_EXP 76
25356: AND
25357: IFFALSE 25538
25359: GO 25361
25361: DISABLE
25362: LD_INT 0
25364: PPUSH
25365: PPUSH
25366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25367: LD_ADDR_VAR 0 2
25371: PUSH
25372: LD_INT 22
25374: PUSH
25375: LD_OWVAR 2
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 33
25386: PUSH
25387: LD_INT 3
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PPUSH
25398: CALL_OW 69
25402: ST_TO_ADDR
// if not tmp then
25403: LD_VAR 0 2
25407: NOT
25408: IFFALSE 25412
// exit ;
25410: GO 25538
// side := 0 ;
25412: LD_ADDR_VAR 0 3
25416: PUSH
25417: LD_INT 0
25419: ST_TO_ADDR
// for i := 1 to 8 do
25420: LD_ADDR_VAR 0 1
25424: PUSH
25425: DOUBLE
25426: LD_INT 1
25428: DEC
25429: ST_TO_ADDR
25430: LD_INT 8
25432: PUSH
25433: FOR_TO
25434: IFFALSE 25482
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25436: LD_OWVAR 2
25440: PUSH
25441: LD_VAR 0 1
25445: NONEQUAL
25446: PUSH
25447: LD_OWVAR 2
25451: PPUSH
25452: LD_VAR 0 1
25456: PPUSH
25457: CALL_OW 81
25461: PUSH
25462: LD_INT 2
25464: EQUAL
25465: AND
25466: IFFALSE 25480
// begin side := i ;
25468: LD_ADDR_VAR 0 3
25472: PUSH
25473: LD_VAR 0 1
25477: ST_TO_ADDR
// break ;
25478: GO 25482
// end ;
25480: GO 25433
25482: POP
25483: POP
// if not side then
25484: LD_VAR 0 3
25488: NOT
25489: IFFALSE 25493
// exit ;
25491: GO 25538
// for i := 1 to tmp do
25493: LD_ADDR_VAR 0 1
25497: PUSH
25498: DOUBLE
25499: LD_INT 1
25501: DEC
25502: ST_TO_ADDR
25503: LD_VAR 0 2
25507: PUSH
25508: FOR_TO
25509: IFFALSE 25536
// if Prob ( 60 ) then
25511: LD_INT 60
25513: PPUSH
25514: CALL_OW 13
25518: IFFALSE 25534
// SetSide ( i , side ) ;
25520: LD_VAR 0 1
25524: PPUSH
25525: LD_VAR 0 3
25529: PPUSH
25530: CALL_OW 235
25534: GO 25508
25536: POP
25537: POP
// end ;
25538: PPOPN 3
25540: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25541: LD_EXP 65
25545: PUSH
25546: LD_EXP 78
25550: AND
25551: IFFALSE 25670
25553: GO 25555
25555: DISABLE
25556: LD_INT 0
25558: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25559: LD_ADDR_VAR 0 1
25563: PUSH
25564: LD_INT 22
25566: PUSH
25567: LD_OWVAR 2
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 21
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: LD_INT 3
25588: PUSH
25589: LD_INT 23
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: LIST
25607: PPUSH
25608: CALL_OW 69
25612: PUSH
25613: FOR_IN
25614: IFFALSE 25668
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
25616: LD_VAR 0 1
25620: PPUSH
25621: CALL_OW 257
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: LD_INT 2
25631: PUSH
25632: LD_INT 3
25634: PUSH
25635: LD_INT 4
25637: PUSH
25638: EMPTY
25639: LIST
25640: LIST
25641: LIST
25642: LIST
25643: IN
25644: IFFALSE 25666
// SetClass ( un , rand ( 1 , 4 ) ) ;
25646: LD_VAR 0 1
25650: PPUSH
25651: LD_INT 1
25653: PPUSH
25654: LD_INT 4
25656: PPUSH
25657: CALL_OW 12
25661: PPUSH
25662: CALL_OW 336
25666: GO 25613
25668: POP
25669: POP
// end ;
25670: PPOPN 1
25672: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
25673: LD_EXP 65
25677: PUSH
25678: LD_EXP 77
25682: AND
25683: IFFALSE 25762
25685: GO 25687
25687: DISABLE
25688: LD_INT 0
25690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25691: LD_ADDR_VAR 0 1
25695: PUSH
25696: LD_INT 22
25698: PUSH
25699: LD_OWVAR 2
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 21
25710: PUSH
25711: LD_INT 3
25713: PUSH
25714: EMPTY
25715: LIST
25716: LIST
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PPUSH
25722: CALL_OW 69
25726: ST_TO_ADDR
// if not tmp then
25727: LD_VAR 0 1
25731: NOT
25732: IFFALSE 25736
// exit ;
25734: GO 25762
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
25736: LD_VAR 0 1
25740: PUSH
25741: LD_INT 1
25743: PPUSH
25744: LD_VAR 0 1
25748: PPUSH
25749: CALL_OW 12
25753: ARRAY
25754: PPUSH
25755: LD_INT 100
25757: PPUSH
25758: CALL_OW 234
// end ;
25762: PPOPN 1
25764: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
25765: LD_EXP 65
25769: PUSH
25770: LD_EXP 79
25774: AND
25775: IFFALSE 25873
25777: GO 25779
25779: DISABLE
25780: LD_INT 0
25782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
25783: LD_ADDR_VAR 0 1
25787: PUSH
25788: LD_INT 22
25790: PUSH
25791: LD_OWVAR 2
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 21
25802: PUSH
25803: LD_INT 1
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PPUSH
25814: CALL_OW 69
25818: ST_TO_ADDR
// if not tmp then
25819: LD_VAR 0 1
25823: NOT
25824: IFFALSE 25828
// exit ;
25826: GO 25873
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
25828: LD_VAR 0 1
25832: PUSH
25833: LD_INT 1
25835: PPUSH
25836: LD_VAR 0 1
25840: PPUSH
25841: CALL_OW 12
25845: ARRAY
25846: PPUSH
25847: LD_INT 1
25849: PPUSH
25850: LD_INT 4
25852: PPUSH
25853: CALL_OW 12
25857: PPUSH
25858: LD_INT 3000
25860: PPUSH
25861: LD_INT 9000
25863: PPUSH
25864: CALL_OW 12
25868: PPUSH
25869: CALL_OW 492
// end ;
25873: PPOPN 1
25875: END
// every 0 0$1 trigger StreamModeActive and sDepot do
25876: LD_EXP 65
25880: PUSH
25881: LD_EXP 80
25885: AND
25886: IFFALSE 25906
25888: GO 25890
25890: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
25891: LD_INT 1
25893: PPUSH
25894: LD_OWVAR 2
25898: PPUSH
25899: LD_INT 0
25901: PPUSH
25902: CALL_OW 324
25906: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
25907: LD_EXP 65
25911: PUSH
25912: LD_EXP 81
25916: AND
25917: IFFALSE 26000
25919: GO 25921
25921: DISABLE
25922: LD_INT 0
25924: PPUSH
25925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
25926: LD_ADDR_VAR 0 2
25930: PUSH
25931: LD_INT 22
25933: PUSH
25934: LD_OWVAR 2
25938: PUSH
25939: EMPTY
25940: LIST
25941: LIST
25942: PUSH
25943: LD_INT 21
25945: PUSH
25946: LD_INT 3
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: PPUSH
25957: CALL_OW 69
25961: ST_TO_ADDR
// if not tmp then
25962: LD_VAR 0 2
25966: NOT
25967: IFFALSE 25971
// exit ;
25969: GO 26000
// for i in tmp do
25971: LD_ADDR_VAR 0 1
25975: PUSH
25976: LD_VAR 0 2
25980: PUSH
25981: FOR_IN
25982: IFFALSE 25998
// SetBLevel ( i , 10 ) ;
25984: LD_VAR 0 1
25988: PPUSH
25989: LD_INT 10
25991: PPUSH
25992: CALL_OW 241
25996: GO 25981
25998: POP
25999: POP
// end ;
26000: PPOPN 2
26002: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26003: LD_EXP 65
26007: PUSH
26008: LD_EXP 82
26012: AND
26013: IFFALSE 26124
26015: GO 26017
26017: DISABLE
26018: LD_INT 0
26020: PPUSH
26021: PPUSH
26022: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26023: LD_ADDR_VAR 0 3
26027: PUSH
26028: LD_INT 22
26030: PUSH
26031: LD_OWVAR 2
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 25
26042: PUSH
26043: LD_INT 1
26045: PUSH
26046: EMPTY
26047: LIST
26048: LIST
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PPUSH
26054: CALL_OW 69
26058: ST_TO_ADDR
// if not tmp then
26059: LD_VAR 0 3
26063: NOT
26064: IFFALSE 26068
// exit ;
26066: GO 26124
// un := tmp [ rand ( 1 , tmp ) ] ;
26068: LD_ADDR_VAR 0 2
26072: PUSH
26073: LD_VAR 0 3
26077: PUSH
26078: LD_INT 1
26080: PPUSH
26081: LD_VAR 0 3
26085: PPUSH
26086: CALL_OW 12
26090: ARRAY
26091: ST_TO_ADDR
// if Crawls ( un ) then
26092: LD_VAR 0 2
26096: PPUSH
26097: CALL_OW 318
26101: IFFALSE 26112
// ComWalk ( un ) ;
26103: LD_VAR 0 2
26107: PPUSH
26108: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26112: LD_VAR 0 2
26116: PPUSH
26117: LD_INT 5
26119: PPUSH
26120: CALL_OW 336
// end ;
26124: PPOPN 3
26126: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
26127: LD_EXP 65
26131: PUSH
26132: LD_EXP 83
26136: AND
26137: PUSH
26138: LD_OWVAR 67
26142: PUSH
26143: LD_INT 3
26145: LESS
26146: AND
26147: IFFALSE 26166
26149: GO 26151
26151: DISABLE
// Difficulty := Difficulty + 1 ;
26152: LD_ADDR_OWVAR 67
26156: PUSH
26157: LD_OWVAR 67
26161: PUSH
26162: LD_INT 1
26164: PLUS
26165: ST_TO_ADDR
26166: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26167: LD_EXP 65
26171: PUSH
26172: LD_EXP 84
26176: AND
26177: IFFALSE 26280
26179: GO 26181
26181: DISABLE
26182: LD_INT 0
26184: PPUSH
// begin for i := 1 to 5 do
26185: LD_ADDR_VAR 0 1
26189: PUSH
26190: DOUBLE
26191: LD_INT 1
26193: DEC
26194: ST_TO_ADDR
26195: LD_INT 5
26197: PUSH
26198: FOR_TO
26199: IFFALSE 26278
// begin uc_nation := nation_nature ;
26201: LD_ADDR_OWVAR 21
26205: PUSH
26206: LD_INT 0
26208: ST_TO_ADDR
// uc_side := 0 ;
26209: LD_ADDR_OWVAR 20
26213: PUSH
26214: LD_INT 0
26216: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26217: LD_ADDR_OWVAR 29
26221: PUSH
26222: LD_INT 12
26224: PUSH
26225: LD_INT 12
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: ST_TO_ADDR
// hc_agressivity := 20 ;
26232: LD_ADDR_OWVAR 35
26236: PUSH
26237: LD_INT 20
26239: ST_TO_ADDR
// hc_class := class_tiger ;
26240: LD_ADDR_OWVAR 28
26244: PUSH
26245: LD_INT 14
26247: ST_TO_ADDR
// hc_gallery :=  ;
26248: LD_ADDR_OWVAR 33
26252: PUSH
26253: LD_STRING 
26255: ST_TO_ADDR
// hc_name :=  ;
26256: LD_ADDR_OWVAR 26
26260: PUSH
26261: LD_STRING 
26263: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26264: CALL_OW 44
26268: PPUSH
26269: LD_INT 0
26271: PPUSH
26272: CALL_OW 51
// end ;
26276: GO 26198
26278: POP
26279: POP
// end ;
26280: PPOPN 1
26282: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26283: LD_EXP 65
26287: PUSH
26288: LD_EXP 85
26292: AND
26293: IFFALSE 26302
26295: GO 26297
26297: DISABLE
// StreamSibBomb ;
26298: CALL 26303 0 0
26302: END
// export function StreamSibBomb ; var i , x , y ; begin
26303: LD_INT 0
26305: PPUSH
26306: PPUSH
26307: PPUSH
26308: PPUSH
// result := false ;
26309: LD_ADDR_VAR 0 1
26313: PUSH
26314: LD_INT 0
26316: ST_TO_ADDR
// for i := 1 to 16 do
26317: LD_ADDR_VAR 0 2
26321: PUSH
26322: DOUBLE
26323: LD_INT 1
26325: DEC
26326: ST_TO_ADDR
26327: LD_INT 16
26329: PUSH
26330: FOR_TO
26331: IFFALSE 26530
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26333: LD_ADDR_VAR 0 3
26337: PUSH
26338: LD_INT 10
26340: PUSH
26341: LD_INT 20
26343: PUSH
26344: LD_INT 30
26346: PUSH
26347: LD_INT 40
26349: PUSH
26350: LD_INT 50
26352: PUSH
26353: LD_INT 60
26355: PUSH
26356: LD_INT 70
26358: PUSH
26359: LD_INT 80
26361: PUSH
26362: LD_INT 90
26364: PUSH
26365: LD_INT 100
26367: PUSH
26368: LD_INT 110
26370: PUSH
26371: LD_INT 120
26373: PUSH
26374: LD_INT 130
26376: PUSH
26377: LD_INT 140
26379: PUSH
26380: LD_INT 150
26382: PUSH
26383: EMPTY
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 1
26402: PPUSH
26403: LD_INT 15
26405: PPUSH
26406: CALL_OW 12
26410: ARRAY
26411: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26412: LD_ADDR_VAR 0 4
26416: PUSH
26417: LD_INT 10
26419: PUSH
26420: LD_INT 20
26422: PUSH
26423: LD_INT 30
26425: PUSH
26426: LD_INT 40
26428: PUSH
26429: LD_INT 50
26431: PUSH
26432: LD_INT 60
26434: PUSH
26435: LD_INT 70
26437: PUSH
26438: LD_INT 80
26440: PUSH
26441: LD_INT 90
26443: PUSH
26444: LD_INT 100
26446: PUSH
26447: LD_INT 110
26449: PUSH
26450: LD_INT 120
26452: PUSH
26453: LD_INT 130
26455: PUSH
26456: LD_INT 140
26458: PUSH
26459: LD_INT 150
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: LIST
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: LIST
26471: LIST
26472: LIST
26473: LIST
26474: LIST
26475: LIST
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 1
26481: PPUSH
26482: LD_INT 15
26484: PPUSH
26485: CALL_OW 12
26489: ARRAY
26490: ST_TO_ADDR
// if ValidHex ( x , y ) then
26491: LD_VAR 0 3
26495: PPUSH
26496: LD_VAR 0 4
26500: PPUSH
26501: CALL_OW 488
26505: IFFALSE 26528
// begin result := [ x , y ] ;
26507: LD_ADDR_VAR 0 1
26511: PUSH
26512: LD_VAR 0 3
26516: PUSH
26517: LD_VAR 0 4
26521: PUSH
26522: EMPTY
26523: LIST
26524: LIST
26525: ST_TO_ADDR
// break ;
26526: GO 26530
// end ; end ;
26528: GO 26330
26530: POP
26531: POP
// if result then
26532: LD_VAR 0 1
26536: IFFALSE 26596
// begin ToLua ( playSibBomb() ) ;
26538: LD_STRING playSibBomb()
26540: PPUSH
26541: CALL_OW 559
// wait ( 0 0$14 ) ;
26545: LD_INT 490
26547: PPUSH
26548: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26552: LD_VAR 0 1
26556: PUSH
26557: LD_INT 1
26559: ARRAY
26560: PPUSH
26561: LD_VAR 0 1
26565: PUSH
26566: LD_INT 2
26568: ARRAY
26569: PPUSH
26570: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26574: LD_VAR 0 1
26578: PUSH
26579: LD_INT 1
26581: ARRAY
26582: PPUSH
26583: LD_VAR 0 1
26587: PUSH
26588: LD_INT 2
26590: ARRAY
26591: PPUSH
26592: CALL_OW 429
// end ; end ;
26596: LD_VAR 0 1
26600: RET
// every 0 0$1 trigger StreamModeActive and sReset do
26601: LD_EXP 65
26605: PUSH
26606: LD_EXP 87
26610: AND
26611: IFFALSE 26623
26613: GO 26615
26615: DISABLE
// YouLost (  ) ;
26616: LD_STRING 
26618: PPUSH
26619: CALL_OW 104
26623: END
// every 0 0$1 trigger StreamModeActive and sFog do
26624: LD_EXP 65
26628: PUSH
26629: LD_EXP 86
26633: AND
26634: IFFALSE 26648
26636: GO 26638
26638: DISABLE
// FogOff ( your_side ) ;
26639: LD_OWVAR 2
26643: PPUSH
26644: CALL_OW 344
26648: END
// every 0 0$1 trigger StreamModeActive and sSun do
26649: LD_EXP 65
26653: PUSH
26654: LD_EXP 88
26658: AND
26659: IFFALSE 26687
26661: GO 26663
26663: DISABLE
// begin solar_recharge_percent := 0 ;
26664: LD_ADDR_OWVAR 79
26668: PUSH
26669: LD_INT 0
26671: ST_TO_ADDR
// wait ( 5 5$00 ) ;
26672: LD_INT 10500
26674: PPUSH
26675: CALL_OW 67
// solar_recharge_percent := 100 ;
26679: LD_ADDR_OWVAR 79
26683: PUSH
26684: LD_INT 100
26686: ST_TO_ADDR
// end ;
26687: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
26688: LD_EXP 65
26692: PUSH
26693: LD_EXP 89
26697: AND
26698: IFFALSE 26937
26700: GO 26702
26702: DISABLE
26703: LD_INT 0
26705: PPUSH
26706: PPUSH
26707: PPUSH
// begin tmp := [ ] ;
26708: LD_ADDR_VAR 0 3
26712: PUSH
26713: EMPTY
26714: ST_TO_ADDR
// for i := 1 to 6 do
26715: LD_ADDR_VAR 0 1
26719: PUSH
26720: DOUBLE
26721: LD_INT 1
26723: DEC
26724: ST_TO_ADDR
26725: LD_INT 6
26727: PUSH
26728: FOR_TO
26729: IFFALSE 26834
// begin uc_nation := nation_nature ;
26731: LD_ADDR_OWVAR 21
26735: PUSH
26736: LD_INT 0
26738: ST_TO_ADDR
// uc_side := 0 ;
26739: LD_ADDR_OWVAR 20
26743: PUSH
26744: LD_INT 0
26746: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26747: LD_ADDR_OWVAR 29
26751: PUSH
26752: LD_INT 12
26754: PUSH
26755: LD_INT 12
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: ST_TO_ADDR
// hc_agressivity := 20 ;
26762: LD_ADDR_OWVAR 35
26766: PUSH
26767: LD_INT 20
26769: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
26770: LD_ADDR_OWVAR 28
26774: PUSH
26775: LD_INT 17
26777: ST_TO_ADDR
// hc_gallery :=  ;
26778: LD_ADDR_OWVAR 33
26782: PUSH
26783: LD_STRING 
26785: ST_TO_ADDR
// hc_name :=  ;
26786: LD_ADDR_OWVAR 26
26790: PUSH
26791: LD_STRING 
26793: ST_TO_ADDR
// un := CreateHuman ;
26794: LD_ADDR_VAR 0 2
26798: PUSH
26799: CALL_OW 44
26803: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
26804: LD_VAR 0 2
26808: PPUSH
26809: LD_INT 1
26811: PPUSH
26812: CALL_OW 51
// tmp := tmp ^ un ;
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: LD_VAR 0 3
26825: PUSH
26826: LD_VAR 0 2
26830: ADD
26831: ST_TO_ADDR
// end ;
26832: GO 26728
26834: POP
26835: POP
// repeat wait ( 0 0$1 ) ;
26836: LD_INT 35
26838: PPUSH
26839: CALL_OW 67
// for un in tmp do
26843: LD_ADDR_VAR 0 2
26847: PUSH
26848: LD_VAR 0 3
26852: PUSH
26853: FOR_IN
26854: IFFALSE 26928
// begin if IsDead ( un ) then
26856: LD_VAR 0 2
26860: PPUSH
26861: CALL_OW 301
26865: IFFALSE 26885
// begin tmp := tmp diff un ;
26867: LD_ADDR_VAR 0 3
26871: PUSH
26872: LD_VAR 0 3
26876: PUSH
26877: LD_VAR 0 2
26881: DIFF
26882: ST_TO_ADDR
// continue ;
26883: GO 26853
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
26885: LD_VAR 0 2
26889: PPUSH
26890: LD_INT 3
26892: PUSH
26893: LD_INT 22
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: PPUSH
26907: CALL_OW 69
26911: PPUSH
26912: LD_VAR 0 2
26916: PPUSH
26917: CALL_OW 74
26921: PPUSH
26922: CALL_OW 115
// end ;
26926: GO 26853
26928: POP
26929: POP
// until not tmp ;
26930: LD_VAR 0 3
26934: NOT
26935: IFFALSE 26836
// end ;
26937: PPOPN 3
26939: END
// every 0 0$1 trigger StreamModeActive and sTroll do
26940: LD_EXP 65
26944: PUSH
26945: LD_EXP 90
26949: AND
26950: IFFALSE 27004
26952: GO 26954
26954: DISABLE
// begin ToLua ( displayTroll(); ) ;
26955: LD_STRING displayTroll();
26957: PPUSH
26958: CALL_OW 559
// wait ( 3 3$00 ) ;
26962: LD_INT 6300
26964: PPUSH
26965: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26969: LD_STRING hideTroll();
26971: PPUSH
26972: CALL_OW 559
// wait ( 1 1$00 ) ;
26976: LD_INT 2100
26978: PPUSH
26979: CALL_OW 67
// ToLua ( displayTroll(); ) ;
26983: LD_STRING displayTroll();
26985: PPUSH
26986: CALL_OW 559
// wait ( 1 1$00 ) ;
26990: LD_INT 2100
26992: PPUSH
26993: CALL_OW 67
// ToLua ( hideTroll(); ) ;
26997: LD_STRING hideTroll();
26999: PPUSH
27000: CALL_OW 559
// end ;
27004: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27005: LD_EXP 65
27009: PUSH
27010: LD_EXP 91
27014: AND
27015: IFFALSE 27078
27017: GO 27019
27019: DISABLE
27020: LD_INT 0
27022: PPUSH
// begin p := 0 ;
27023: LD_ADDR_VAR 0 1
27027: PUSH
27028: LD_INT 0
27030: ST_TO_ADDR
// repeat game_speed := 1 ;
27031: LD_ADDR_OWVAR 65
27035: PUSH
27036: LD_INT 1
27038: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27039: LD_INT 35
27041: PPUSH
27042: CALL_OW 67
// p := p + 1 ;
27046: LD_ADDR_VAR 0 1
27050: PUSH
27051: LD_VAR 0 1
27055: PUSH
27056: LD_INT 1
27058: PLUS
27059: ST_TO_ADDR
// until p >= 60 ;
27060: LD_VAR 0 1
27064: PUSH
27065: LD_INT 60
27067: GREATEREQUAL
27068: IFFALSE 27031
// game_speed := 4 ;
27070: LD_ADDR_OWVAR 65
27074: PUSH
27075: LD_INT 4
27077: ST_TO_ADDR
// end ;
27078: PPOPN 1
27080: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27081: LD_EXP 65
27085: PUSH
27086: LD_EXP 92
27090: AND
27091: IFFALSE 27237
27093: GO 27095
27095: DISABLE
27096: LD_INT 0
27098: PPUSH
27099: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27100: LD_ADDR_VAR 0 1
27104: PUSH
27105: LD_INT 22
27107: PUSH
27108: LD_OWVAR 2
27112: PUSH
27113: EMPTY
27114: LIST
27115: LIST
27116: PUSH
27117: LD_INT 2
27119: PUSH
27120: LD_INT 30
27122: PUSH
27123: LD_INT 0
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 30
27132: PUSH
27133: LD_INT 1
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PUSH
27140: EMPTY
27141: LIST
27142: LIST
27143: LIST
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PPUSH
27149: CALL_OW 69
27153: ST_TO_ADDR
// if not depot then
27154: LD_VAR 0 1
27158: NOT
27159: IFFALSE 27163
// exit ;
27161: GO 27237
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27163: LD_ADDR_VAR 0 2
27167: PUSH
27168: LD_VAR 0 1
27172: PUSH
27173: LD_INT 1
27175: PPUSH
27176: LD_VAR 0 1
27180: PPUSH
27181: CALL_OW 12
27185: ARRAY
27186: PPUSH
27187: CALL_OW 274
27191: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27192: LD_VAR 0 2
27196: PPUSH
27197: LD_INT 1
27199: PPUSH
27200: LD_INT 0
27202: PPUSH
27203: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27207: LD_VAR 0 2
27211: PPUSH
27212: LD_INT 2
27214: PPUSH
27215: LD_INT 0
27217: PPUSH
27218: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27222: LD_VAR 0 2
27226: PPUSH
27227: LD_INT 3
27229: PPUSH
27230: LD_INT 0
27232: PPUSH
27233: CALL_OW 277
// end ;
27237: PPOPN 2
27239: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27240: LD_EXP 65
27244: PUSH
27245: LD_EXP 93
27249: AND
27250: IFFALSE 27347
27252: GO 27254
27254: DISABLE
27255: LD_INT 0
27257: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27258: LD_ADDR_VAR 0 1
27262: PUSH
27263: LD_INT 22
27265: PUSH
27266: LD_OWVAR 2
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 21
27277: PUSH
27278: LD_INT 1
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 3
27287: PUSH
27288: LD_INT 23
27290: PUSH
27291: LD_INT 0
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: PUSH
27298: EMPTY
27299: LIST
27300: LIST
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: LIST
27306: PPUSH
27307: CALL_OW 69
27311: ST_TO_ADDR
// if not tmp then
27312: LD_VAR 0 1
27316: NOT
27317: IFFALSE 27321
// exit ;
27319: GO 27347
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27321: LD_VAR 0 1
27325: PUSH
27326: LD_INT 1
27328: PPUSH
27329: LD_VAR 0 1
27333: PPUSH
27334: CALL_OW 12
27338: ARRAY
27339: PPUSH
27340: LD_INT 200
27342: PPUSH
27343: CALL_OW 234
// end ;
27347: PPOPN 1
27349: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27350: LD_EXP 65
27354: PUSH
27355: LD_EXP 94
27359: AND
27360: IFFALSE 27439
27362: GO 27364
27364: DISABLE
27365: LD_INT 0
27367: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27368: LD_ADDR_VAR 0 1
27372: PUSH
27373: LD_INT 22
27375: PUSH
27376: LD_OWVAR 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 21
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PPUSH
27399: CALL_OW 69
27403: ST_TO_ADDR
// if not tmp then
27404: LD_VAR 0 1
27408: NOT
27409: IFFALSE 27413
// exit ;
27411: GO 27439
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27413: LD_VAR 0 1
27417: PUSH
27418: LD_INT 1
27420: PPUSH
27421: LD_VAR 0 1
27425: PPUSH
27426: CALL_OW 12
27430: ARRAY
27431: PPUSH
27432: LD_INT 60
27434: PPUSH
27435: CALL_OW 234
// end ;
27439: PPOPN 1
27441: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27442: LD_EXP 65
27446: PUSH
27447: LD_EXP 95
27451: AND
27452: IFFALSE 27551
27454: GO 27456
27456: DISABLE
27457: LD_INT 0
27459: PPUSH
27460: PPUSH
// begin enable ;
27461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27462: LD_ADDR_VAR 0 1
27466: PUSH
27467: LD_INT 22
27469: PUSH
27470: LD_OWVAR 2
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: PUSH
27479: LD_INT 61
27481: PUSH
27482: EMPTY
27483: LIST
27484: PUSH
27485: LD_INT 33
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: LIST
27499: PPUSH
27500: CALL_OW 69
27504: ST_TO_ADDR
// if not tmp then
27505: LD_VAR 0 1
27509: NOT
27510: IFFALSE 27514
// exit ;
27512: GO 27551
// for i in tmp do
27514: LD_ADDR_VAR 0 2
27518: PUSH
27519: LD_VAR 0 1
27523: PUSH
27524: FOR_IN
27525: IFFALSE 27549
// if IsControledBy ( i ) then
27527: LD_VAR 0 2
27531: PPUSH
27532: CALL_OW 312
27536: IFFALSE 27547
// ComUnlink ( i ) ;
27538: LD_VAR 0 2
27542: PPUSH
27543: CALL_OW 136
27547: GO 27524
27549: POP
27550: POP
// end ;
27551: PPOPN 2
27553: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27554: LD_EXP 65
27558: PUSH
27559: LD_EXP 96
27563: AND
27564: IFFALSE 27704
27566: GO 27568
27568: DISABLE
27569: LD_INT 0
27571: PPUSH
27572: PPUSH
// begin ToLua ( displayPowell(); ) ;
27573: LD_STRING displayPowell();
27575: PPUSH
27576: CALL_OW 559
// uc_side := 0 ;
27580: LD_ADDR_OWVAR 20
27584: PUSH
27585: LD_INT 0
27587: ST_TO_ADDR
// uc_nation := 2 ;
27588: LD_ADDR_OWVAR 21
27592: PUSH
27593: LD_INT 2
27595: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
27596: LD_ADDR_OWVAR 37
27600: PUSH
27601: LD_INT 14
27603: ST_TO_ADDR
// vc_engine := engine_siberite ;
27604: LD_ADDR_OWVAR 39
27608: PUSH
27609: LD_INT 3
27611: ST_TO_ADDR
// vc_control := control_apeman ;
27612: LD_ADDR_OWVAR 38
27616: PUSH
27617: LD_INT 5
27619: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
27620: LD_ADDR_OWVAR 40
27624: PUSH
27625: LD_INT 29
27627: ST_TO_ADDR
// un := CreateVehicle ;
27628: LD_ADDR_VAR 0 2
27632: PUSH
27633: CALL_OW 45
27637: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
27638: LD_VAR 0 2
27642: PPUSH
27643: LD_INT 1
27645: PPUSH
27646: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
27650: LD_INT 35
27652: PPUSH
27653: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
27657: LD_VAR 0 2
27661: PPUSH
27662: LD_INT 22
27664: PUSH
27665: LD_OWVAR 2
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PPUSH
27674: CALL_OW 69
27678: PPUSH
27679: LD_VAR 0 2
27683: PPUSH
27684: CALL_OW 74
27688: PPUSH
27689: CALL_OW 115
// until IsDead ( un ) ;
27693: LD_VAR 0 2
27697: PPUSH
27698: CALL_OW 301
27702: IFFALSE 27650
// end ;
27704: PPOPN 2
27706: END
// every 0 0$1 trigger StreamModeActive and sStu do
27707: LD_EXP 65
27711: PUSH
27712: LD_EXP 104
27716: AND
27717: IFFALSE 27733
27719: GO 27721
27721: DISABLE
// begin ToLua ( displayStucuk(); ) ;
27722: LD_STRING displayStucuk();
27724: PPUSH
27725: CALL_OW 559
// ResetFog ;
27729: CALL_OW 335
// end ;
27733: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
27734: LD_EXP 65
27738: PUSH
27739: LD_EXP 97
27743: AND
27744: IFFALSE 27885
27746: GO 27748
27748: DISABLE
27749: LD_INT 0
27751: PPUSH
27752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
27753: LD_ADDR_VAR 0 2
27757: PUSH
27758: LD_INT 22
27760: PUSH
27761: LD_OWVAR 2
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: PUSH
27770: LD_INT 21
27772: PUSH
27773: LD_INT 1
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: PPUSH
27784: CALL_OW 69
27788: ST_TO_ADDR
// if not tmp then
27789: LD_VAR 0 2
27793: NOT
27794: IFFALSE 27798
// exit ;
27796: GO 27885
// un := tmp [ rand ( 1 , tmp ) ] ;
27798: LD_ADDR_VAR 0 1
27802: PUSH
27803: LD_VAR 0 2
27807: PUSH
27808: LD_INT 1
27810: PPUSH
27811: LD_VAR 0 2
27815: PPUSH
27816: CALL_OW 12
27820: ARRAY
27821: ST_TO_ADDR
// SetSide ( un , 0 ) ;
27822: LD_VAR 0 1
27826: PPUSH
27827: LD_INT 0
27829: PPUSH
27830: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
27834: LD_VAR 0 1
27838: PPUSH
27839: LD_OWVAR 3
27843: PUSH
27844: LD_VAR 0 1
27848: DIFF
27849: PPUSH
27850: LD_VAR 0 1
27854: PPUSH
27855: CALL_OW 74
27859: PPUSH
27860: CALL_OW 115
// wait ( 0 0$20 ) ;
27864: LD_INT 700
27866: PPUSH
27867: CALL_OW 67
// SetSide ( un , your_side ) ;
27871: LD_VAR 0 1
27875: PPUSH
27876: LD_OWVAR 2
27880: PPUSH
27881: CALL_OW 235
// end ;
27885: PPOPN 2
27887: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
27888: LD_EXP 65
27892: PUSH
27893: LD_EXP 98
27897: AND
27898: IFFALSE 28004
27900: GO 27902
27902: DISABLE
27903: LD_INT 0
27905: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27906: LD_ADDR_VAR 0 1
27910: PUSH
27911: LD_INT 22
27913: PUSH
27914: LD_OWVAR 2
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 2
27925: PUSH
27926: LD_INT 30
27928: PUSH
27929: LD_INT 0
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 30
27938: PUSH
27939: LD_INT 1
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: LIST
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PPUSH
27955: CALL_OW 69
27959: ST_TO_ADDR
// if not depot then
27960: LD_VAR 0 1
27964: NOT
27965: IFFALSE 27969
// exit ;
27967: GO 28004
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
27969: LD_VAR 0 1
27973: PUSH
27974: LD_INT 1
27976: ARRAY
27977: PPUSH
27978: CALL_OW 250
27982: PPUSH
27983: LD_VAR 0 1
27987: PUSH
27988: LD_INT 1
27990: ARRAY
27991: PPUSH
27992: CALL_OW 251
27996: PPUSH
27997: LD_INT 70
27999: PPUSH
28000: CALL_OW 495
// end ;
28004: PPOPN 1
28006: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28007: LD_EXP 65
28011: PUSH
28012: LD_EXP 99
28016: AND
28017: IFFALSE 28228
28019: GO 28021
28021: DISABLE
28022: LD_INT 0
28024: PPUSH
28025: PPUSH
28026: PPUSH
28027: PPUSH
28028: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28029: LD_ADDR_VAR 0 5
28033: PUSH
28034: LD_INT 22
28036: PUSH
28037: LD_OWVAR 2
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 21
28048: PUSH
28049: LD_INT 1
28051: PUSH
28052: EMPTY
28053: LIST
28054: LIST
28055: PUSH
28056: EMPTY
28057: LIST
28058: LIST
28059: PPUSH
28060: CALL_OW 69
28064: ST_TO_ADDR
// if not tmp then
28065: LD_VAR 0 5
28069: NOT
28070: IFFALSE 28074
// exit ;
28072: GO 28228
// for i in tmp do
28074: LD_ADDR_VAR 0 1
28078: PUSH
28079: LD_VAR 0 5
28083: PUSH
28084: FOR_IN
28085: IFFALSE 28226
// begin d := rand ( 0 , 5 ) ;
28087: LD_ADDR_VAR 0 4
28091: PUSH
28092: LD_INT 0
28094: PPUSH
28095: LD_INT 5
28097: PPUSH
28098: CALL_OW 12
28102: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28103: LD_ADDR_VAR 0 2
28107: PUSH
28108: LD_VAR 0 1
28112: PPUSH
28113: CALL_OW 250
28117: PPUSH
28118: LD_VAR 0 4
28122: PPUSH
28123: LD_INT 3
28125: PPUSH
28126: LD_INT 12
28128: PPUSH
28129: CALL_OW 12
28133: PPUSH
28134: CALL_OW 272
28138: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28139: LD_ADDR_VAR 0 3
28143: PUSH
28144: LD_VAR 0 1
28148: PPUSH
28149: CALL_OW 251
28153: PPUSH
28154: LD_VAR 0 4
28158: PPUSH
28159: LD_INT 3
28161: PPUSH
28162: LD_INT 12
28164: PPUSH
28165: CALL_OW 12
28169: PPUSH
28170: CALL_OW 273
28174: ST_TO_ADDR
// if ValidHex ( x , y ) then
28175: LD_VAR 0 2
28179: PPUSH
28180: LD_VAR 0 3
28184: PPUSH
28185: CALL_OW 488
28189: IFFALSE 28224
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28191: LD_VAR 0 1
28195: PPUSH
28196: LD_VAR 0 2
28200: PPUSH
28201: LD_VAR 0 3
28205: PPUSH
28206: LD_INT 3
28208: PPUSH
28209: LD_INT 6
28211: PPUSH
28212: CALL_OW 12
28216: PPUSH
28217: LD_INT 1
28219: PPUSH
28220: CALL_OW 483
// end ;
28224: GO 28084
28226: POP
28227: POP
// end ;
28228: PPOPN 5
28230: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28231: LD_EXP 65
28235: PUSH
28236: LD_EXP 100
28240: AND
28241: IFFALSE 28335
28243: GO 28245
28245: DISABLE
28246: LD_INT 0
28248: PPUSH
28249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28250: LD_ADDR_VAR 0 2
28254: PUSH
28255: LD_INT 22
28257: PUSH
28258: LD_OWVAR 2
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 32
28269: PUSH
28270: LD_INT 1
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 21
28279: PUSH
28280: LD_INT 2
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: LIST
28291: PPUSH
28292: CALL_OW 69
28296: ST_TO_ADDR
// if not tmp then
28297: LD_VAR 0 2
28301: NOT
28302: IFFALSE 28306
// exit ;
28304: GO 28335
// for i in tmp do
28306: LD_ADDR_VAR 0 1
28310: PUSH
28311: LD_VAR 0 2
28315: PUSH
28316: FOR_IN
28317: IFFALSE 28333
// SetFuel ( i , 0 ) ;
28319: LD_VAR 0 1
28323: PPUSH
28324: LD_INT 0
28326: PPUSH
28327: CALL_OW 240
28331: GO 28316
28333: POP
28334: POP
// end ;
28335: PPOPN 2
28337: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28338: LD_EXP 65
28342: PUSH
28343: LD_EXP 101
28347: AND
28348: IFFALSE 28414
28350: GO 28352
28352: DISABLE
28353: LD_INT 0
28355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28356: LD_ADDR_VAR 0 1
28360: PUSH
28361: LD_INT 22
28363: PUSH
28364: LD_OWVAR 2
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 30
28375: PUSH
28376: LD_INT 29
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PPUSH
28387: CALL_OW 69
28391: ST_TO_ADDR
// if not tmp then
28392: LD_VAR 0 1
28396: NOT
28397: IFFALSE 28401
// exit ;
28399: GO 28414
// DestroyUnit ( tmp [ 1 ] ) ;
28401: LD_VAR 0 1
28405: PUSH
28406: LD_INT 1
28408: ARRAY
28409: PPUSH
28410: CALL_OW 65
// end ;
28414: PPOPN 1
28416: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28417: LD_EXP 65
28421: PUSH
28422: LD_EXP 103
28426: AND
28427: IFFALSE 28556
28429: GO 28431
28431: DISABLE
28432: LD_INT 0
28434: PPUSH
// begin uc_side := 0 ;
28435: LD_ADDR_OWVAR 20
28439: PUSH
28440: LD_INT 0
28442: ST_TO_ADDR
// uc_nation := nation_arabian ;
28443: LD_ADDR_OWVAR 21
28447: PUSH
28448: LD_INT 2
28450: ST_TO_ADDR
// hc_gallery :=  ;
28451: LD_ADDR_OWVAR 33
28455: PUSH
28456: LD_STRING 
28458: ST_TO_ADDR
// hc_name :=  ;
28459: LD_ADDR_OWVAR 26
28463: PUSH
28464: LD_STRING 
28466: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28467: LD_INT 1
28469: PPUSH
28470: LD_INT 11
28472: PPUSH
28473: LD_INT 10
28475: PPUSH
28476: CALL_OW 380
// un := CreateHuman ;
28480: LD_ADDR_VAR 0 1
28484: PUSH
28485: CALL_OW 44
28489: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28490: LD_VAR 0 1
28494: PPUSH
28495: LD_INT 1
28497: PPUSH
28498: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28502: LD_INT 35
28504: PPUSH
28505: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28509: LD_VAR 0 1
28513: PPUSH
28514: LD_INT 22
28516: PUSH
28517: LD_OWVAR 2
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PPUSH
28526: CALL_OW 69
28530: PPUSH
28531: LD_VAR 0 1
28535: PPUSH
28536: CALL_OW 74
28540: PPUSH
28541: CALL_OW 115
// until IsDead ( un ) ;
28545: LD_VAR 0 1
28549: PPUSH
28550: CALL_OW 301
28554: IFFALSE 28502
// end ;
28556: PPOPN 1
28558: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28559: LD_EXP 65
28563: PUSH
28564: LD_EXP 105
28568: AND
28569: IFFALSE 28581
28571: GO 28573
28573: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28574: LD_STRING earthquake(getX(game), 0, 32)
28576: PPUSH
28577: CALL_OW 559
28581: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28582: LD_EXP 65
28586: PUSH
28587: LD_EXP 106
28591: AND
28592: IFFALSE 28683
28594: GO 28596
28596: DISABLE
28597: LD_INT 0
28599: PPUSH
// begin enable ;
28600: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
28601: LD_ADDR_VAR 0 1
28605: PUSH
28606: LD_INT 22
28608: PUSH
28609: LD_OWVAR 2
28613: PUSH
28614: EMPTY
28615: LIST
28616: LIST
28617: PUSH
28618: LD_INT 21
28620: PUSH
28621: LD_INT 2
28623: PUSH
28624: EMPTY
28625: LIST
28626: LIST
28627: PUSH
28628: LD_INT 33
28630: PUSH
28631: LD_INT 3
28633: PUSH
28634: EMPTY
28635: LIST
28636: LIST
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: LIST
28642: PPUSH
28643: CALL_OW 69
28647: ST_TO_ADDR
// if not tmp then
28648: LD_VAR 0 1
28652: NOT
28653: IFFALSE 28657
// exit ;
28655: GO 28683
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
28657: LD_VAR 0 1
28661: PUSH
28662: LD_INT 1
28664: PPUSH
28665: LD_VAR 0 1
28669: PPUSH
28670: CALL_OW 12
28674: ARRAY
28675: PPUSH
28676: LD_INT 1
28678: PPUSH
28679: CALL_OW 234
// end ;
28683: PPOPN 1
28685: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
28686: LD_EXP 65
28690: PUSH
28691: LD_EXP 107
28695: AND
28696: IFFALSE 28837
28698: GO 28700
28700: DISABLE
28701: LD_INT 0
28703: PPUSH
28704: PPUSH
28705: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28706: LD_ADDR_VAR 0 3
28710: PUSH
28711: LD_INT 22
28713: PUSH
28714: LD_OWVAR 2
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 25
28725: PUSH
28726: LD_INT 1
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PPUSH
28737: CALL_OW 69
28741: ST_TO_ADDR
// if not tmp then
28742: LD_VAR 0 3
28746: NOT
28747: IFFALSE 28751
// exit ;
28749: GO 28837
// un := tmp [ rand ( 1 , tmp ) ] ;
28751: LD_ADDR_VAR 0 2
28755: PUSH
28756: LD_VAR 0 3
28760: PUSH
28761: LD_INT 1
28763: PPUSH
28764: LD_VAR 0 3
28768: PPUSH
28769: CALL_OW 12
28773: ARRAY
28774: ST_TO_ADDR
// if Crawls ( un ) then
28775: LD_VAR 0 2
28779: PPUSH
28780: CALL_OW 318
28784: IFFALSE 28795
// ComWalk ( un ) ;
28786: LD_VAR 0 2
28790: PPUSH
28791: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
28795: LD_VAR 0 2
28799: PPUSH
28800: LD_INT 9
28802: PPUSH
28803: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
28807: LD_INT 28
28809: PPUSH
28810: LD_OWVAR 2
28814: PPUSH
28815: LD_INT 2
28817: PPUSH
28818: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
28822: LD_INT 29
28824: PPUSH
28825: LD_OWVAR 2
28829: PPUSH
28830: LD_INT 2
28832: PPUSH
28833: CALL_OW 322
// end ;
28837: PPOPN 3
28839: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
28840: LD_EXP 65
28844: PUSH
28845: LD_EXP 108
28849: AND
28850: IFFALSE 28961
28852: GO 28854
28854: DISABLE
28855: LD_INT 0
28857: PPUSH
28858: PPUSH
28859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
28860: LD_ADDR_VAR 0 3
28864: PUSH
28865: LD_INT 22
28867: PUSH
28868: LD_OWVAR 2
28872: PUSH
28873: EMPTY
28874: LIST
28875: LIST
28876: PUSH
28877: LD_INT 25
28879: PUSH
28880: LD_INT 1
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: PUSH
28887: EMPTY
28888: LIST
28889: LIST
28890: PPUSH
28891: CALL_OW 69
28895: ST_TO_ADDR
// if not tmp then
28896: LD_VAR 0 3
28900: NOT
28901: IFFALSE 28905
// exit ;
28903: GO 28961
// un := tmp [ rand ( 1 , tmp ) ] ;
28905: LD_ADDR_VAR 0 2
28909: PUSH
28910: LD_VAR 0 3
28914: PUSH
28915: LD_INT 1
28917: PPUSH
28918: LD_VAR 0 3
28922: PPUSH
28923: CALL_OW 12
28927: ARRAY
28928: ST_TO_ADDR
// if Crawls ( un ) then
28929: LD_VAR 0 2
28933: PPUSH
28934: CALL_OW 318
28938: IFFALSE 28949
// ComWalk ( un ) ;
28940: LD_VAR 0 2
28944: PPUSH
28945: CALL_OW 138
// SetClass ( un , class_mortar ) ;
28949: LD_VAR 0 2
28953: PPUSH
28954: LD_INT 8
28956: PPUSH
28957: CALL_OW 336
// end ;
28961: PPOPN 3
28963: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
28964: LD_EXP 65
28968: PUSH
28969: LD_EXP 109
28973: AND
28974: IFFALSE 29118
28976: GO 28978
28978: DISABLE
28979: LD_INT 0
28981: PPUSH
28982: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
28983: LD_ADDR_VAR 0 2
28987: PUSH
28988: LD_INT 22
28990: PUSH
28991: LD_OWVAR 2
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: PUSH
29000: LD_INT 21
29002: PUSH
29003: LD_INT 2
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 2
29012: PUSH
29013: LD_INT 34
29015: PUSH
29016: LD_INT 12
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: LD_INT 34
29025: PUSH
29026: LD_INT 51
29028: PUSH
29029: EMPTY
29030: LIST
29031: LIST
29032: PUSH
29033: LD_INT 34
29035: PUSH
29036: LD_INT 32
29038: PUSH
29039: EMPTY
29040: LIST
29041: LIST
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: PUSH
29049: EMPTY
29050: LIST
29051: LIST
29052: LIST
29053: PPUSH
29054: CALL_OW 69
29058: ST_TO_ADDR
// if not tmp then
29059: LD_VAR 0 2
29063: NOT
29064: IFFALSE 29068
// exit ;
29066: GO 29118
// for i in tmp do
29068: LD_ADDR_VAR 0 1
29072: PUSH
29073: LD_VAR 0 2
29077: PUSH
29078: FOR_IN
29079: IFFALSE 29116
// if GetCargo ( i , mat_artifact ) = 0 then
29081: LD_VAR 0 1
29085: PPUSH
29086: LD_INT 4
29088: PPUSH
29089: CALL_OW 289
29093: PUSH
29094: LD_INT 0
29096: EQUAL
29097: IFFALSE 29114
// SetCargo ( i , mat_siberit , 100 ) ;
29099: LD_VAR 0 1
29103: PPUSH
29104: LD_INT 3
29106: PPUSH
29107: LD_INT 100
29109: PPUSH
29110: CALL_OW 290
29114: GO 29078
29116: POP
29117: POP
// end ;
29118: PPOPN 2
29120: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29121: LD_EXP 65
29125: PUSH
29126: LD_EXP 110
29130: AND
29131: IFFALSE 29284
29133: GO 29135
29135: DISABLE
29136: LD_INT 0
29138: PPUSH
29139: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29140: LD_ADDR_VAR 0 2
29144: PUSH
29145: LD_INT 22
29147: PUSH
29148: LD_OWVAR 2
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: PPUSH
29157: CALL_OW 69
29161: ST_TO_ADDR
// if not tmp then
29162: LD_VAR 0 2
29166: NOT
29167: IFFALSE 29171
// exit ;
29169: GO 29284
// for i := 1 to 2 do
29171: LD_ADDR_VAR 0 1
29175: PUSH
29176: DOUBLE
29177: LD_INT 1
29179: DEC
29180: ST_TO_ADDR
29181: LD_INT 2
29183: PUSH
29184: FOR_TO
29185: IFFALSE 29282
// begin uc_side := your_side ;
29187: LD_ADDR_OWVAR 20
29191: PUSH
29192: LD_OWVAR 2
29196: ST_TO_ADDR
// uc_nation := nation_american ;
29197: LD_ADDR_OWVAR 21
29201: PUSH
29202: LD_INT 1
29204: ST_TO_ADDR
// vc_chassis := us_morphling ;
29205: LD_ADDR_OWVAR 37
29209: PUSH
29210: LD_INT 5
29212: ST_TO_ADDR
// vc_engine := engine_siberite ;
29213: LD_ADDR_OWVAR 39
29217: PUSH
29218: LD_INT 3
29220: ST_TO_ADDR
// vc_control := control_computer ;
29221: LD_ADDR_OWVAR 38
29225: PUSH
29226: LD_INT 3
29228: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29229: LD_ADDR_OWVAR 40
29233: PUSH
29234: LD_INT 10
29236: ST_TO_ADDR
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) ;
29237: CALL_OW 45
29241: PPUSH
29242: LD_VAR 0 2
29246: PUSH
29247: LD_INT 1
29249: ARRAY
29250: PPUSH
29251: CALL_OW 250
29255: PPUSH
29256: LD_VAR 0 2
29260: PUSH
29261: LD_INT 1
29263: ARRAY
29264: PPUSH
29265: CALL_OW 251
29269: PPUSH
29270: LD_INT 12
29272: PPUSH
29273: LD_INT 1
29275: PPUSH
29276: CALL_OW 50
// end ;
29280: GO 29184
29282: POP
29283: POP
// end ;
29284: PPOPN 2
29286: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29287: LD_EXP 65
29291: PUSH
29292: LD_EXP 111
29296: AND
29297: IFFALSE 29519
29299: GO 29301
29301: DISABLE
29302: LD_INT 0
29304: PPUSH
29305: PPUSH
29306: PPUSH
29307: PPUSH
29308: PPUSH
29309: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29310: LD_ADDR_VAR 0 6
29314: PUSH
29315: LD_INT 22
29317: PUSH
29318: LD_OWVAR 2
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 21
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 3
29339: PUSH
29340: LD_INT 23
29342: PUSH
29343: LD_INT 0
29345: PUSH
29346: EMPTY
29347: LIST
29348: LIST
29349: PUSH
29350: EMPTY
29351: LIST
29352: LIST
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: LIST
29358: PPUSH
29359: CALL_OW 69
29363: ST_TO_ADDR
// if not tmp then
29364: LD_VAR 0 6
29368: NOT
29369: IFFALSE 29373
// exit ;
29371: GO 29519
// s1 := rand ( 1 , 4 ) ;
29373: LD_ADDR_VAR 0 2
29377: PUSH
29378: LD_INT 1
29380: PPUSH
29381: LD_INT 4
29383: PPUSH
29384: CALL_OW 12
29388: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29389: LD_ADDR_VAR 0 4
29393: PUSH
29394: LD_VAR 0 6
29398: PUSH
29399: LD_INT 1
29401: ARRAY
29402: PPUSH
29403: LD_VAR 0 2
29407: PPUSH
29408: CALL_OW 259
29412: ST_TO_ADDR
// if s1 = 1 then
29413: LD_VAR 0 2
29417: PUSH
29418: LD_INT 1
29420: EQUAL
29421: IFFALSE 29441
// s2 := rand ( 2 , 4 ) else
29423: LD_ADDR_VAR 0 3
29427: PUSH
29428: LD_INT 2
29430: PPUSH
29431: LD_INT 4
29433: PPUSH
29434: CALL_OW 12
29438: ST_TO_ADDR
29439: GO 29449
// s2 := 1 ;
29441: LD_ADDR_VAR 0 3
29445: PUSH
29446: LD_INT 1
29448: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29449: LD_ADDR_VAR 0 5
29453: PUSH
29454: LD_VAR 0 6
29458: PUSH
29459: LD_INT 1
29461: ARRAY
29462: PPUSH
29463: LD_VAR 0 3
29467: PPUSH
29468: CALL_OW 259
29472: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29473: LD_VAR 0 6
29477: PUSH
29478: LD_INT 1
29480: ARRAY
29481: PPUSH
29482: LD_VAR 0 2
29486: PPUSH
29487: LD_VAR 0 5
29491: PPUSH
29492: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29496: LD_VAR 0 6
29500: PUSH
29501: LD_INT 1
29503: ARRAY
29504: PPUSH
29505: LD_VAR 0 3
29509: PPUSH
29510: LD_VAR 0 4
29514: PPUSH
29515: CALL_OW 237
// end ;
29519: PPOPN 6
29521: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29522: LD_EXP 65
29526: PUSH
29527: LD_EXP 112
29531: AND
29532: IFFALSE 29611
29534: GO 29536
29536: DISABLE
29537: LD_INT 0
29539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29540: LD_ADDR_VAR 0 1
29544: PUSH
29545: LD_INT 22
29547: PUSH
29548: LD_OWVAR 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 30
29559: PUSH
29560: LD_INT 3
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PPUSH
29571: CALL_OW 69
29575: ST_TO_ADDR
// if not tmp then
29576: LD_VAR 0 1
29580: NOT
29581: IFFALSE 29585
// exit ;
29583: GO 29611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29585: LD_VAR 0 1
29589: PUSH
29590: LD_INT 1
29592: PPUSH
29593: LD_VAR 0 1
29597: PPUSH
29598: CALL_OW 12
29602: ARRAY
29603: PPUSH
29604: LD_INT 1
29606: PPUSH
29607: CALL_OW 234
// end ;
29611: PPOPN 1
29613: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
29614: LD_EXP 65
29618: PUSH
29619: LD_EXP 113
29623: AND
29624: IFFALSE 29736
29626: GO 29628
29628: DISABLE
29629: LD_INT 0
29631: PPUSH
29632: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
29633: LD_ADDR_VAR 0 2
29637: PUSH
29638: LD_INT 22
29640: PUSH
29641: LD_OWVAR 2
29645: PUSH
29646: EMPTY
29647: LIST
29648: LIST
29649: PUSH
29650: LD_INT 2
29652: PUSH
29653: LD_INT 30
29655: PUSH
29656: LD_INT 27
29658: PUSH
29659: EMPTY
29660: LIST
29661: LIST
29662: PUSH
29663: LD_INT 30
29665: PUSH
29666: LD_INT 26
29668: PUSH
29669: EMPTY
29670: LIST
29671: LIST
29672: PUSH
29673: LD_INT 30
29675: PUSH
29676: LD_INT 28
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: PPUSH
29693: CALL_OW 69
29697: ST_TO_ADDR
// if not tmp then
29698: LD_VAR 0 2
29702: NOT
29703: IFFALSE 29707
// exit ;
29705: GO 29736
// for i in tmp do
29707: LD_ADDR_VAR 0 1
29711: PUSH
29712: LD_VAR 0 2
29716: PUSH
29717: FOR_IN
29718: IFFALSE 29734
// SetLives ( i , 1 ) ;
29720: LD_VAR 0 1
29724: PPUSH
29725: LD_INT 1
29727: PPUSH
29728: CALL_OW 234
29732: GO 29717
29734: POP
29735: POP
// end ;
29736: PPOPN 2
29738: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
29739: LD_EXP 65
29743: PUSH
29744: LD_EXP 114
29748: AND
29749: IFFALSE 30023
29751: GO 29753
29753: DISABLE
29754: LD_INT 0
29756: PPUSH
29757: PPUSH
29758: PPUSH
// begin i := rand ( 1 , 7 ) ;
29759: LD_ADDR_VAR 0 1
29763: PUSH
29764: LD_INT 1
29766: PPUSH
29767: LD_INT 7
29769: PPUSH
29770: CALL_OW 12
29774: ST_TO_ADDR
// case i of 1 :
29775: LD_VAR 0 1
29779: PUSH
29780: LD_INT 1
29782: DOUBLE
29783: EQUAL
29784: IFTRUE 29788
29786: GO 29798
29788: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
29789: LD_STRING earthquake(getX(game), 0, 32)
29791: PPUSH
29792: CALL_OW 559
29796: GO 30023
29798: LD_INT 2
29800: DOUBLE
29801: EQUAL
29802: IFTRUE 29806
29804: GO 29820
29806: POP
// begin ToLua ( displayStucuk(); ) ;
29807: LD_STRING displayStucuk();
29809: PPUSH
29810: CALL_OW 559
// ResetFog ;
29814: CALL_OW 335
// end ; 3 :
29818: GO 30023
29820: LD_INT 3
29822: DOUBLE
29823: EQUAL
29824: IFTRUE 29828
29826: GO 29932
29828: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29829: LD_ADDR_VAR 0 2
29833: PUSH
29834: LD_INT 22
29836: PUSH
29837: LD_OWVAR 2
29841: PUSH
29842: EMPTY
29843: LIST
29844: LIST
29845: PUSH
29846: LD_INT 25
29848: PUSH
29849: LD_INT 1
29851: PUSH
29852: EMPTY
29853: LIST
29854: LIST
29855: PUSH
29856: EMPTY
29857: LIST
29858: LIST
29859: PPUSH
29860: CALL_OW 69
29864: ST_TO_ADDR
// if not tmp then
29865: LD_VAR 0 2
29869: NOT
29870: IFFALSE 29874
// exit ;
29872: GO 30023
// un := tmp [ rand ( 1 , tmp ) ] ;
29874: LD_ADDR_VAR 0 3
29878: PUSH
29879: LD_VAR 0 2
29883: PUSH
29884: LD_INT 1
29886: PPUSH
29887: LD_VAR 0 2
29891: PPUSH
29892: CALL_OW 12
29896: ARRAY
29897: ST_TO_ADDR
// if Crawls ( un ) then
29898: LD_VAR 0 3
29902: PPUSH
29903: CALL_OW 318
29907: IFFALSE 29918
// ComWalk ( un ) ;
29909: LD_VAR 0 3
29913: PPUSH
29914: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29918: LD_VAR 0 3
29922: PPUSH
29923: LD_INT 8
29925: PPUSH
29926: CALL_OW 336
// end ; 4 :
29930: GO 30023
29932: LD_INT 4
29934: DOUBLE
29935: EQUAL
29936: IFTRUE 29940
29938: GO 30001
29940: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29941: LD_ADDR_VAR 0 2
29945: PUSH
29946: LD_INT 22
29948: PUSH
29949: LD_OWVAR 2
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 30
29960: PUSH
29961: LD_INT 29
29963: PUSH
29964: EMPTY
29965: LIST
29966: LIST
29967: PUSH
29968: EMPTY
29969: LIST
29970: LIST
29971: PPUSH
29972: CALL_OW 69
29976: ST_TO_ADDR
// if not tmp then
29977: LD_VAR 0 2
29981: NOT
29982: IFFALSE 29986
// exit ;
29984: GO 30023
// DestroyUnit ( tmp [ 1 ] ) ;
29986: LD_VAR 0 2
29990: PUSH
29991: LD_INT 1
29993: ARRAY
29994: PPUSH
29995: CALL_OW 65
// end ; 5 .. 7 :
29999: GO 30023
30001: LD_INT 5
30003: DOUBLE
30004: GREATEREQUAL
30005: IFFALSE 30013
30007: LD_INT 7
30009: DOUBLE
30010: LESSEQUAL
30011: IFTRUE 30015
30013: GO 30022
30015: POP
// StreamSibBomb ; end ;
30016: CALL 26303 0 0
30020: GO 30023
30022: POP
// end ;
30023: PPOPN 3
30025: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30026: LD_EXP 65
30030: PUSH
30031: LD_EXP 115
30035: AND
30036: IFFALSE 30192
30038: GO 30040
30040: DISABLE
30041: LD_INT 0
30043: PPUSH
30044: PPUSH
30045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30046: LD_ADDR_VAR 0 2
30050: PUSH
30051: LD_INT 81
30053: PUSH
30054: LD_OWVAR 2
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 2
30065: PUSH
30066: LD_INT 21
30068: PUSH
30069: LD_INT 1
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 21
30078: PUSH
30079: LD_INT 2
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PPUSH
30095: CALL_OW 69
30099: ST_TO_ADDR
// if not tmp then
30100: LD_VAR 0 2
30104: NOT
30105: IFFALSE 30109
// exit ;
30107: GO 30192
// p := 0 ;
30109: LD_ADDR_VAR 0 3
30113: PUSH
30114: LD_INT 0
30116: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30117: LD_INT 35
30119: PPUSH
30120: CALL_OW 67
// p := p + 1 ;
30124: LD_ADDR_VAR 0 3
30128: PUSH
30129: LD_VAR 0 3
30133: PUSH
30134: LD_INT 1
30136: PLUS
30137: ST_TO_ADDR
// for i in tmp do
30138: LD_ADDR_VAR 0 1
30142: PUSH
30143: LD_VAR 0 2
30147: PUSH
30148: FOR_IN
30149: IFFALSE 30180
// if GetLives ( i ) < 1000 then
30151: LD_VAR 0 1
30155: PPUSH
30156: CALL_OW 256
30160: PUSH
30161: LD_INT 1000
30163: LESS
30164: IFFALSE 30178
// SetLives ( i , 1000 ) ;
30166: LD_VAR 0 1
30170: PPUSH
30171: LD_INT 1000
30173: PPUSH
30174: CALL_OW 234
30178: GO 30148
30180: POP
30181: POP
// until p > 20 ;
30182: LD_VAR 0 3
30186: PUSH
30187: LD_INT 20
30189: GREATER
30190: IFFALSE 30117
// end ;
30192: PPOPN 3
30194: END
// every 0 0$1 trigger StreamModeActive and sTime do
30195: LD_EXP 65
30199: PUSH
30200: LD_EXP 116
30204: AND
30205: IFFALSE 30240
30207: GO 30209
30209: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30210: LD_INT 28
30212: PPUSH
30213: LD_OWVAR 2
30217: PPUSH
30218: LD_INT 2
30220: PPUSH
30221: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30225: LD_INT 30
30227: PPUSH
30228: LD_OWVAR 2
30232: PPUSH
30233: LD_INT 2
30235: PPUSH
30236: CALL_OW 322
// end ;
30240: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30241: LD_EXP 65
30245: PUSH
30246: LD_EXP 117
30250: AND
30251: IFFALSE 30372
30253: GO 30255
30255: DISABLE
30256: LD_INT 0
30258: PPUSH
30259: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30260: LD_ADDR_VAR 0 2
30264: PUSH
30265: LD_INT 22
30267: PUSH
30268: LD_OWVAR 2
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PUSH
30277: LD_INT 21
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 3
30289: PUSH
30290: LD_INT 23
30292: PUSH
30293: LD_INT 0
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: LIST
30308: PPUSH
30309: CALL_OW 69
30313: ST_TO_ADDR
// if not tmp then
30314: LD_VAR 0 2
30318: NOT
30319: IFFALSE 30323
// exit ;
30321: GO 30372
// for i in tmp do
30323: LD_ADDR_VAR 0 1
30327: PUSH
30328: LD_VAR 0 2
30332: PUSH
30333: FOR_IN
30334: IFFALSE 30370
// begin if Crawls ( i ) then
30336: LD_VAR 0 1
30340: PPUSH
30341: CALL_OW 318
30345: IFFALSE 30356
// ComWalk ( i ) ;
30347: LD_VAR 0 1
30351: PPUSH
30352: CALL_OW 138
// SetClass ( i , 2 ) ;
30356: LD_VAR 0 1
30360: PPUSH
30361: LD_INT 2
30363: PPUSH
30364: CALL_OW 336
// end ;
30368: GO 30333
30370: POP
30371: POP
// end ;
30372: PPOPN 2
30374: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30375: LD_EXP 65
30379: PUSH
30380: LD_EXP 118
30384: AND
30385: IFFALSE 30666
30387: GO 30389
30389: DISABLE
30390: LD_INT 0
30392: PPUSH
30393: PPUSH
30394: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30395: LD_OWVAR 2
30399: PPUSH
30400: LD_INT 9
30402: PPUSH
30403: LD_INT 1
30405: PPUSH
30406: LD_INT 1
30408: PPUSH
30409: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30413: LD_INT 9
30415: PPUSH
30416: LD_OWVAR 2
30420: PPUSH
30421: CALL_OW 343
// uc_side := 9 ;
30425: LD_ADDR_OWVAR 20
30429: PUSH
30430: LD_INT 9
30432: ST_TO_ADDR
// uc_nation := 2 ;
30433: LD_ADDR_OWVAR 21
30437: PUSH
30438: LD_INT 2
30440: ST_TO_ADDR
// hc_name := Dark Warrior ;
30441: LD_ADDR_OWVAR 26
30445: PUSH
30446: LD_STRING Dark Warrior
30448: ST_TO_ADDR
// hc_gallery :=  ;
30449: LD_ADDR_OWVAR 33
30453: PUSH
30454: LD_STRING 
30456: ST_TO_ADDR
// hc_noskilllimit := true ;
30457: LD_ADDR_OWVAR 76
30461: PUSH
30462: LD_INT 1
30464: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30465: LD_ADDR_OWVAR 31
30469: PUSH
30470: LD_INT 30
30472: PUSH
30473: LD_INT 30
30475: PUSH
30476: LD_INT 30
30478: PUSH
30479: LD_INT 30
30481: PUSH
30482: EMPTY
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: ST_TO_ADDR
// un := CreateHuman ;
30488: LD_ADDR_VAR 0 3
30492: PUSH
30493: CALL_OW 44
30497: ST_TO_ADDR
// hc_noskilllimit := false ;
30498: LD_ADDR_OWVAR 76
30502: PUSH
30503: LD_INT 0
30505: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30506: LD_VAR 0 3
30510: PPUSH
30511: LD_INT 1
30513: PPUSH
30514: CALL_OW 51
// p := 0 ;
30518: LD_ADDR_VAR 0 2
30522: PUSH
30523: LD_INT 0
30525: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30526: LD_INT 35
30528: PPUSH
30529: CALL_OW 67
// p := p + 1 ;
30533: LD_ADDR_VAR 0 2
30537: PUSH
30538: LD_VAR 0 2
30542: PUSH
30543: LD_INT 1
30545: PLUS
30546: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
30547: LD_VAR 0 3
30551: PPUSH
30552: CALL_OW 256
30556: PUSH
30557: LD_INT 1000
30559: LESS
30560: IFFALSE 30574
// SetLives ( un , 1000 ) ;
30562: LD_VAR 0 3
30566: PPUSH
30567: LD_INT 1000
30569: PPUSH
30570: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
30574: LD_VAR 0 3
30578: PPUSH
30579: LD_INT 81
30581: PUSH
30582: LD_OWVAR 2
30586: PUSH
30587: EMPTY
30588: LIST
30589: LIST
30590: PUSH
30591: LD_INT 91
30593: PUSH
30594: LD_VAR 0 3
30598: PUSH
30599: LD_INT 30
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: LIST
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PPUSH
30611: CALL_OW 69
30615: PPUSH
30616: LD_VAR 0 3
30620: PPUSH
30621: CALL_OW 74
30625: PPUSH
30626: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
30630: LD_VAR 0 2
30634: PUSH
30635: LD_INT 60
30637: GREATER
30638: PUSH
30639: LD_VAR 0 3
30643: PPUSH
30644: CALL_OW 301
30648: OR
30649: IFFALSE 30526
// if un then
30651: LD_VAR 0 3
30655: IFFALSE 30666
// RemoveUnit ( un ) ;
30657: LD_VAR 0 3
30661: PPUSH
30662: CALL_OW 64
// end ; end_of_file
30666: PPOPN 3
30668: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30669: LD_INT 0
30671: PPUSH
30672: PPUSH
30673: PPUSH
30674: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30675: LD_VAR 0 1
30679: PPUSH
30680: CALL_OW 264
30684: PUSH
30685: LD_EXP 56
30689: EQUAL
30690: IFFALSE 30762
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30692: LD_INT 68
30694: PPUSH
30695: LD_VAR 0 1
30699: PPUSH
30700: CALL_OW 255
30704: PPUSH
30705: CALL_OW 321
30709: PUSH
30710: LD_INT 2
30712: EQUAL
30713: IFFALSE 30725
// eff := 70 else
30715: LD_ADDR_VAR 0 4
30719: PUSH
30720: LD_INT 70
30722: ST_TO_ADDR
30723: GO 30733
// eff := 30 ;
30725: LD_ADDR_VAR 0 4
30729: PUSH
30730: LD_INT 30
30732: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30733: LD_VAR 0 1
30737: PPUSH
30738: CALL_OW 250
30742: PPUSH
30743: LD_VAR 0 1
30747: PPUSH
30748: CALL_OW 251
30752: PPUSH
30753: LD_VAR 0 4
30757: PPUSH
30758: CALL_OW 495
// end ; end ;
30762: LD_VAR 0 2
30766: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30767: LD_INT 0
30769: PPUSH
// end ;
30770: LD_VAR 0 4
30774: RET
// export function SOS_Command ( cmd ) ; begin
30775: LD_INT 0
30777: PPUSH
// end ;
30778: LD_VAR 0 2
30782: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
30783: LD_VAR 0 1
30787: PUSH
30788: LD_INT 255
30790: EQUAL
30791: PUSH
30792: LD_VAR 0 2
30796: PPUSH
30797: CALL_OW 264
30801: PUSH
30802: LD_INT 14
30804: PUSH
30805: LD_INT 53
30807: PUSH
30808: EMPTY
30809: LIST
30810: LIST
30811: IN
30812: AND
30813: PUSH
30814: LD_VAR 0 4
30818: PPUSH
30819: LD_VAR 0 5
30823: PPUSH
30824: CALL_OW 488
30828: AND
30829: IFFALSE 30853
// CutTreeXYR ( unit , x , y , 12 ) ;
30831: LD_VAR 0 2
30835: PPUSH
30836: LD_VAR 0 4
30840: PPUSH
30841: LD_VAR 0 5
30845: PPUSH
30846: LD_INT 12
30848: PPUSH
30849: CALL 30856 0 4
// end ;
30853: PPOPN 5
30855: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30856: LD_INT 0
30858: PPUSH
30859: PPUSH
30860: PPUSH
30861: PPUSH
30862: PPUSH
30863: PPUSH
30864: PPUSH
30865: PPUSH
30866: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30867: LD_VAR 0 1
30871: NOT
30872: PUSH
30873: LD_VAR 0 2
30877: PPUSH
30878: LD_VAR 0 3
30882: PPUSH
30883: CALL_OW 488
30887: NOT
30888: OR
30889: PUSH
30890: LD_VAR 0 4
30894: NOT
30895: OR
30896: IFFALSE 30900
// exit ;
30898: GO 31240
// list := [ ] ;
30900: LD_ADDR_VAR 0 13
30904: PUSH
30905: EMPTY
30906: ST_TO_ADDR
// if x - r < 0 then
30907: LD_VAR 0 2
30911: PUSH
30912: LD_VAR 0 4
30916: MINUS
30917: PUSH
30918: LD_INT 0
30920: LESS
30921: IFFALSE 30933
// min_x := 0 else
30923: LD_ADDR_VAR 0 7
30927: PUSH
30928: LD_INT 0
30930: ST_TO_ADDR
30931: GO 30949
// min_x := x - r ;
30933: LD_ADDR_VAR 0 7
30937: PUSH
30938: LD_VAR 0 2
30942: PUSH
30943: LD_VAR 0 4
30947: MINUS
30948: ST_TO_ADDR
// if y - r < 0 then
30949: LD_VAR 0 3
30953: PUSH
30954: LD_VAR 0 4
30958: MINUS
30959: PUSH
30960: LD_INT 0
30962: LESS
30963: IFFALSE 30975
// min_y := 0 else
30965: LD_ADDR_VAR 0 8
30969: PUSH
30970: LD_INT 0
30972: ST_TO_ADDR
30973: GO 30991
// min_y := y - r ;
30975: LD_ADDR_VAR 0 8
30979: PUSH
30980: LD_VAR 0 3
30984: PUSH
30985: LD_VAR 0 4
30989: MINUS
30990: ST_TO_ADDR
// max_x := x + r ;
30991: LD_ADDR_VAR 0 9
30995: PUSH
30996: LD_VAR 0 2
31000: PUSH
31001: LD_VAR 0 4
31005: PLUS
31006: ST_TO_ADDR
// max_y := y + r ;
31007: LD_ADDR_VAR 0 10
31011: PUSH
31012: LD_VAR 0 3
31016: PUSH
31017: LD_VAR 0 4
31021: PLUS
31022: ST_TO_ADDR
// for _x = min_x to max_x do
31023: LD_ADDR_VAR 0 11
31027: PUSH
31028: DOUBLE
31029: LD_VAR 0 7
31033: DEC
31034: ST_TO_ADDR
31035: LD_VAR 0 9
31039: PUSH
31040: FOR_TO
31041: IFFALSE 31158
// for _y = min_y to max_y do
31043: LD_ADDR_VAR 0 12
31047: PUSH
31048: DOUBLE
31049: LD_VAR 0 8
31053: DEC
31054: ST_TO_ADDR
31055: LD_VAR 0 10
31059: PUSH
31060: FOR_TO
31061: IFFALSE 31154
// begin if not ValidHex ( _x , _y ) then
31063: LD_VAR 0 11
31067: PPUSH
31068: LD_VAR 0 12
31072: PPUSH
31073: CALL_OW 488
31077: NOT
31078: IFFALSE 31082
// continue ;
31080: GO 31060
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31082: LD_VAR 0 11
31086: PPUSH
31087: LD_VAR 0 12
31091: PPUSH
31092: CALL_OW 351
31096: PUSH
31097: LD_VAR 0 11
31101: PPUSH
31102: LD_VAR 0 12
31106: PPUSH
31107: CALL_OW 554
31111: AND
31112: IFFALSE 31152
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31114: LD_ADDR_VAR 0 13
31118: PUSH
31119: LD_VAR 0 13
31123: PPUSH
31124: LD_VAR 0 13
31128: PUSH
31129: LD_INT 1
31131: PLUS
31132: PPUSH
31133: LD_VAR 0 11
31137: PUSH
31138: LD_VAR 0 12
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PPUSH
31147: CALL_OW 2
31151: ST_TO_ADDR
// end ;
31152: GO 31060
31154: POP
31155: POP
31156: GO 31040
31158: POP
31159: POP
// if not list then
31160: LD_VAR 0 13
31164: NOT
31165: IFFALSE 31169
// exit ;
31167: GO 31240
// for i in list do
31169: LD_ADDR_VAR 0 6
31173: PUSH
31174: LD_VAR 0 13
31178: PUSH
31179: FOR_IN
31180: IFFALSE 31238
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31182: LD_VAR 0 1
31186: PPUSH
31187: LD_STRING M
31189: PUSH
31190: LD_VAR 0 6
31194: PUSH
31195: LD_INT 1
31197: ARRAY
31198: PUSH
31199: LD_VAR 0 6
31203: PUSH
31204: LD_INT 2
31206: ARRAY
31207: PUSH
31208: LD_INT 0
31210: PUSH
31211: LD_INT 0
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: LD_INT 0
31219: PUSH
31220: EMPTY
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: PUSH
31229: EMPTY
31230: LIST
31231: PPUSH
31232: CALL_OW 447
31236: GO 31179
31238: POP
31239: POP
// end ;
31240: LD_VAR 0 5
31244: RET
