// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// PrepareNature ;
 198: CALL 15947 0 0
// PrepareDifficulty ;
 202: CALL 12361 0 0
// PrepareVehicles ;
 206: CALL 1665 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 210: LD_INT 4
 212: PPUSH
 213: LD_INT 0
 215: PPUSH
 216: LD_INT 1
 218: PPUSH
 219: LD_INT 0
 221: PPUSH
 222: CALL 1239 0 4
// PrepareAmericanHeroes ;
 226: CALL 564 0 0
// PrepareRussianCommander ;
 230: CALL 3041 0 0
// PrepareWestBase ;
 234: CALL 3553 0 0
// PrepareEastBase ;
 238: CALL 3113 0 0
// PrepareOtherRussians ;
 242: CALL 3665 0 0
// end ;
 246: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 247: LD_EXP 48
 251: PUSH
 252: LD_INT 1
 254: EQUAL
 255: IFFALSE 561
 257: GO 259
 259: DISABLE
 260: LD_INT 0
 262: PPUSH
// begin enable ;
 263: ENABLE
// fogoff ( true ) ;
 264: LD_INT 1
 266: PPUSH
 267: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 271: LD_ADDR_VAR 0 1
 275: PUSH
 276: LD_INT 22
 278: PUSH
 279: LD_INT 1
 281: PUSH
 282: EMPTY
 283: LIST
 284: LIST
 285: PUSH
 286: LD_INT 21
 288: PUSH
 289: LD_INT 1
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: PUSH
 296: EMPTY
 297: LIST
 298: LIST
 299: PPUSH
 300: CALL_OW 69
 304: PUSH
 305: FOR_IN
 306: IFFALSE 322
// SetLives ( i , 1000 ) ;
 308: LD_VAR 0 1
 312: PPUSH
 313: LD_INT 1000
 315: PPUSH
 316: CALL_OW 234
 320: GO 305
 322: POP
 323: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 324: LD_ADDR_VAR 0 1
 328: PUSH
 329: LD_INT 22
 331: PUSH
 332: LD_INT 1
 334: PUSH
 335: EMPTY
 336: LIST
 337: LIST
 338: PUSH
 339: LD_INT 2
 341: PUSH
 342: LD_INT 30
 344: PUSH
 345: LD_INT 0
 347: PUSH
 348: EMPTY
 349: LIST
 350: LIST
 351: PUSH
 352: LD_INT 30
 354: PUSH
 355: LD_INT 1
 357: PUSH
 358: EMPTY
 359: LIST
 360: LIST
 361: PUSH
 362: EMPTY
 363: LIST
 364: LIST
 365: LIST
 366: PUSH
 367: EMPTY
 368: LIST
 369: LIST
 370: PPUSH
 371: CALL_OW 69
 375: PUSH
 376: FOR_IN
 377: IFFALSE 401
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 379: LD_VAR 0 1
 383: PPUSH
 384: CALL_OW 274
 388: PPUSH
 389: LD_INT 1
 391: PPUSH
 392: LD_INT 9999
 394: PPUSH
 395: CALL_OW 277
 399: GO 376
 401: POP
 402: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 403: LD_ADDR_VAR 0 1
 407: PUSH
 408: LD_INT 22
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: LD_INT 2
 420: PUSH
 421: LD_INT 30
 423: PUSH
 424: LD_INT 0
 426: PUSH
 427: EMPTY
 428: LIST
 429: LIST
 430: PUSH
 431: LD_INT 30
 433: PUSH
 434: LD_INT 1
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: LIST
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: FOR_IN
 456: IFFALSE 480
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 458: LD_VAR 0 1
 462: PPUSH
 463: CALL_OW 274
 467: PPUSH
 468: LD_INT 2
 470: PPUSH
 471: LD_INT 9999
 473: PPUSH
 474: CALL_OW 277
 478: GO 455
 480: POP
 481: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 482: LD_ADDR_VAR 0 1
 486: PUSH
 487: LD_INT 22
 489: PUSH
 490: LD_INT 1
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PUSH
 497: LD_INT 2
 499: PUSH
 500: LD_INT 30
 502: PUSH
 503: LD_INT 0
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PUSH
 510: LD_INT 30
 512: PUSH
 513: LD_INT 1
 515: PUSH
 516: EMPTY
 517: LIST
 518: LIST
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: LIST
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PPUSH
 529: CALL_OW 69
 533: PUSH
 534: FOR_IN
 535: IFFALSE 559
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 537: LD_VAR 0 1
 541: PPUSH
 542: CALL_OW 274
 546: PPUSH
 547: LD_INT 3
 549: PPUSH
 550: LD_INT 9999
 552: PPUSH
 553: CALL_OW 277
 557: GO 534
 559: POP
 560: POP
// end ; end_of_file
 561: PPOPN 1
 563: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 564: LD_INT 0
 566: PPUSH
 567: PPUSH
 568: PPUSH
// uc_side = 1 ;
 569: LD_ADDR_OWVAR 20
 573: PUSH
 574: LD_INT 1
 576: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 577: LD_ADDR_EXP 14
 581: PUSH
 582: LD_STRING 11c_others
 584: PPUSH
 585: CALL_OW 31
 589: PUSH
 590: LD_STRING 11_others
 592: PPUSH
 593: CALL_OW 31
 597: UNION
 598: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 599: LD_ADDR_EXP 1
 603: PUSH
 604: LD_STRING 11_JMM
 606: PPUSH
 607: LD_INT 1
 609: PPUSH
 610: CALL 12078 0 2
 614: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 615: LD_EXP 1
 619: PPUSH
 620: LD_INT 1
 622: PPUSH
 623: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 627: LD_EXP 1
 631: PPUSH
 632: LD_INT 22
 634: PUSH
 635: LD_INT 1
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PUSH
 642: LD_INT 21
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 58
 654: PUSH
 655: EMPTY
 656: LIST
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: LIST
 662: PPUSH
 663: CALL_OW 69
 667: PUSH
 668: LD_INT 1
 670: ARRAY
 671: PPUSH
 672: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 676: LD_STRING 11_Lisa
 678: PPUSH
 679: CALL_OW 28
 683: PUSH
 684: LD_INT 1
 686: EQUAL
 687: IFFALSE 734
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 689: LD_ADDR_EXP 2
 693: PUSH
 694: LD_STRING 11_Lisa
 696: PPUSH
 697: LD_INT 1
 699: PPUSH
 700: CALL 12078 0 2
 704: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 705: LD_EXP 2
 709: PPUSH
 710: LD_INT 1
 712: PPUSH
 713: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 717: LD_EXP 2
 721: PPUSH
 722: LD_INT 4
 724: PPUSH
 725: LD_INT 0
 727: PPUSH
 728: CALL_OW 49
// end else
 732: GO 750
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 734: LD_INT 4
 736: PPUSH
 737: LD_INT 0
 739: PPUSH
 740: LD_INT 1
 742: PPUSH
 743: LD_INT 0
 745: PPUSH
 746: CALL 1239 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 750: LD_STRING 11_Donaldson
 752: PPUSH
 753: CALL_OW 28
 757: PUSH
 758: LD_INT 1
 760: EQUAL
 761: IFFALSE 808
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 763: LD_ADDR_EXP 3
 767: PUSH
 768: LD_STRING 11_Donaldson
 770: PPUSH
 771: LD_INT 1
 773: PPUSH
 774: CALL 12078 0 2
 778: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 779: LD_EXP 3
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 791: LD_EXP 3
 795: PPUSH
 796: LD_INT 4
 798: PPUSH
 799: LD_INT 0
 801: PPUSH
 802: CALL_OW 49
// end else
 806: GO 824
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 808: LD_INT 4
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: LD_INT 1
 816: PPUSH
 817: LD_INT 0
 819: PPUSH
 820: CALL 1239 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 824: LD_STRING 11_Cyrus
 826: PPUSH
 827: CALL_OW 28
 831: PUSH
 832: LD_INT 1
 834: EQUAL
 835: IFFALSE 882
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 837: LD_ADDR_EXP 5
 841: PUSH
 842: LD_STRING 11_Cyrus
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: CALL 12078 0 2
 852: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 853: LD_EXP 5
 857: PPUSH
 858: LD_INT 1
 860: PPUSH
 861: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 865: LD_EXP 5
 869: PPUSH
 870: LD_INT 4
 872: PPUSH
 873: LD_INT 0
 875: PPUSH
 876: CALL_OW 49
// end else
 880: GO 898
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 882: LD_INT 4
 884: PPUSH
 885: LD_INT 0
 887: PPUSH
 888: LD_INT 1
 890: PPUSH
 891: LD_INT 0
 893: PPUSH
 894: CALL 1239 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 898: LD_STRING 11_Denis
 900: PPUSH
 901: CALL_OW 28
 905: PUSH
 906: LD_INT 1
 908: EQUAL
 909: IFFALSE 956
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 911: LD_ADDR_EXP 6
 915: PUSH
 916: LD_STRING 11_Denis
 918: PPUSH
 919: LD_INT 1
 921: PPUSH
 922: CALL 12078 0 2
 926: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 927: LD_EXP 6
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 939: LD_EXP 6
 943: PPUSH
 944: LD_INT 4
 946: PPUSH
 947: LD_INT 0
 949: PPUSH
 950: CALL_OW 49
// end else
 954: GO 972
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 956: LD_INT 4
 958: PPUSH
 959: LD_INT 0
 961: PPUSH
 962: LD_INT 1
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL 1239 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 972: LD_STRING 11_Frank
 974: PPUSH
 975: CALL_OW 28
 979: PUSH
 980: LD_INT 1
 982: EQUAL
 983: IFFALSE 1030
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 985: LD_ADDR_EXP 12
 989: PUSH
 990: LD_STRING 11_Frank
 992: PPUSH
 993: LD_INT 1
 995: PPUSH
 996: CALL 12078 0 2
1000: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1001: LD_EXP 12
1005: PPUSH
1006: LD_INT 1
1008: PPUSH
1009: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1013: LD_EXP 12
1017: PPUSH
1018: LD_INT 4
1020: PPUSH
1021: LD_INT 0
1023: PPUSH
1024: CALL_OW 49
// end else
1028: GO 1046
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1030: LD_INT 4
1032: PPUSH
1033: LD_INT 0
1035: PPUSH
1036: LD_INT 1
1038: PPUSH
1039: LD_INT 0
1041: PPUSH
1042: CALL 1239 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1046: LD_STRING 11_Cornell
1048: PPUSH
1049: CALL_OW 28
1053: PUSH
1054: LD_INT 1
1056: EQUAL
1057: IFFALSE 1104
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1059: LD_ADDR_EXP 10
1063: PUSH
1064: LD_STRING 11_Cornell
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: CALL 12078 0 2
1074: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1075: LD_EXP 10
1079: PPUSH
1080: LD_INT 1
1082: PPUSH
1083: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1087: LD_EXP 10
1091: PPUSH
1092: LD_INT 4
1094: PPUSH
1095: LD_INT 0
1097: PPUSH
1098: CALL_OW 49
// end else
1102: GO 1120
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: LD_INT 1
1112: PPUSH
1113: LD_INT 0
1115: PPUSH
1116: CALL 1239 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1120: LD_ADDR_VAR 0 2
1124: PUSH
1125: LD_EXP 14
1129: PPUSH
1130: LD_INT 26
1132: PUSH
1133: LD_INT 1
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PPUSH
1140: CALL_OW 72
1144: ST_TO_ADDR
// if not tmp then
1145: LD_VAR 0 2
1149: NOT
1150: IFFALSE 1179
// begin PrepareSoldier ( sex_male , 8 ) ;
1152: LD_INT 1
1154: PPUSH
1155: LD_INT 8
1157: PPUSH
1158: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1162: CALL_OW 44
1166: PPUSH
1167: LD_INT 4
1169: PPUSH
1170: LD_INT 0
1172: PPUSH
1173: CALL_OW 49
// end else
1177: GO 1218
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1179: LD_VAR 0 2
1183: PUSH
1184: LD_INT 1
1186: ARRAY
1187: PPUSH
1188: LD_INT 4
1190: PPUSH
1191: LD_INT 0
1193: PPUSH
1194: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1198: LD_ADDR_EXP 14
1202: PUSH
1203: LD_EXP 14
1207: PUSH
1208: LD_VAR 0 2
1212: PUSH
1213: LD_INT 1
1215: ARRAY
1216: DIFF
1217: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ) ;
1218: LD_ADDR_EXP 22
1222: PUSH
1223: LD_STRING Powell
1225: PPUSH
1226: LD_INT 0
1228: PPUSH
1229: CALL 12078 0 2
1233: ST_TO_ADDR
// end ;
1234: LD_VAR 0 1
1238: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1239: LD_INT 0
1241: PPUSH
1242: PPUSH
1243: PPUSH
1244: PPUSH
1245: PPUSH
// if mech = 1 then
1246: LD_VAR 0 4
1250: PUSH
1251: LD_INT 1
1253: EQUAL
1254: IFFALSE 1491
// begin if others11 > 0 then
1256: LD_EXP 14
1260: PUSH
1261: LD_INT 0
1263: GREATER
1264: IFFALSE 1431
// begin for i := 1 to others11 - 1 do
1266: LD_ADDR_VAR 0 6
1270: PUSH
1271: DOUBLE
1272: LD_INT 1
1274: DEC
1275: ST_TO_ADDR
1276: LD_EXP 14
1280: PUSH
1281: LD_INT 1
1283: MINUS
1284: PUSH
1285: FOR_TO
1286: IFFALSE 1368
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1288: LD_EXP 14
1292: PUSH
1293: LD_VAR 0 6
1297: ARRAY
1298: PPUSH
1299: LD_INT 3
1301: PPUSH
1302: CALL_OW 259
1306: PUSH
1307: LD_EXP 14
1311: PUSH
1312: LD_VAR 0 6
1316: PUSH
1317: LD_INT 1
1319: PLUS
1320: ARRAY
1321: PPUSH
1322: LD_INT 3
1324: PPUSH
1325: CALL_OW 259
1329: LESS
1330: IFFALSE 1366
// begin mecha = others11 [ i + 1 ] ;
1332: LD_ADDR_VAR 0 9
1336: PUSH
1337: LD_EXP 14
1341: PUSH
1342: LD_VAR 0 6
1346: PUSH
1347: LD_INT 1
1349: PLUS
1350: ARRAY
1351: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1352: LD_VAR 0 9
1356: PPUSH
1357: LD_INT 3
1359: PPUSH
1360: CALL_OW 336
// break ;
1364: GO 1368
// end ; end ;
1366: GO 1285
1368: POP
1369: POP
// if spawnMode = 1 then
1370: LD_VAR 0 3
1374: PUSH
1375: LD_INT 1
1377: EQUAL
1378: IFFALSE 1399
// PlaceUnitArea ( mecha , area , false ) else
1380: LD_VAR 0 9
1384: PPUSH
1385: LD_VAR 0 1
1389: PPUSH
1390: LD_INT 0
1392: PPUSH
1393: CALL_OW 49
1397: GO 1413
// PlaceHumanInUnit ( mecha , veh ) ;
1399: LD_VAR 0 9
1403: PPUSH
1404: LD_VAR 0 2
1408: PPUSH
1409: CALL_OW 52
// others11 = others11 diff mecha ;
1413: LD_ADDR_EXP 14
1417: PUSH
1418: LD_EXP 14
1422: PUSH
1423: LD_VAR 0 9
1427: DIFF
1428: ST_TO_ADDR
// end else
1429: GO 1489
// begin hc_name =  ;
1431: LD_ADDR_OWVAR 26
1435: PUSH
1436: LD_STRING 
1438: ST_TO_ADDR
// hc_gallery =  ;
1439: LD_ADDR_OWVAR 33
1443: PUSH
1444: LD_STRING 
1446: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1447: LD_INT 0
1449: PPUSH
1450: LD_INT 7
1452: PPUSH
1453: LD_INT 9
1455: PPUSH
1456: CALL_OW 12
1460: PPUSH
1461: CALL_OW 383
// un = CreateHuman ;
1465: LD_ADDR_VAR 0 7
1469: PUSH
1470: CALL_OW 44
1474: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1475: LD_VAR 0 7
1479: PPUSH
1480: LD_VAR 0 2
1484: PPUSH
1485: CALL_OW 52
// end ; end else
1489: GO 1660
// begin if others11 > 0 then
1491: LD_EXP 14
1495: PUSH
1496: LD_INT 0
1498: GREATER
1499: IFFALSE 1572
// begin if spawnMode = 1 then
1501: LD_VAR 0 3
1505: PUSH
1506: LD_INT 1
1508: EQUAL
1509: IFFALSE 1534
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1511: LD_EXP 14
1515: PUSH
1516: LD_INT 1
1518: ARRAY
1519: PPUSH
1520: LD_VAR 0 1
1524: PPUSH
1525: LD_INT 0
1527: PPUSH
1528: CALL_OW 49
1532: GO 1552
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1534: LD_EXP 14
1538: PUSH
1539: LD_INT 1
1541: ARRAY
1542: PPUSH
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1552: LD_ADDR_EXP 14
1556: PUSH
1557: LD_EXP 14
1561: PPUSH
1562: LD_INT 1
1564: PPUSH
1565: CALL_OW 3
1569: ST_TO_ADDR
// end else
1570: GO 1660
// begin hc_name =  ;
1572: LD_ADDR_OWVAR 26
1576: PUSH
1577: LD_STRING 
1579: ST_TO_ADDR
// hc_gallery =  ;
1580: LD_ADDR_OWVAR 33
1584: PUSH
1585: LD_STRING 
1587: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1588: LD_INT 0
1590: PPUSH
1591: LD_INT 1
1593: PUSH
1594: LD_INT 2
1596: PUSH
1597: LD_INT 3
1599: PUSH
1600: LD_INT 4
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: LD_INT 1
1611: PPUSH
1612: LD_INT 4
1614: PPUSH
1615: CALL_OW 12
1619: ARRAY
1620: PPUSH
1621: LD_INT 7
1623: PPUSH
1624: LD_INT 9
1626: PPUSH
1627: CALL_OW 12
1631: PPUSH
1632: CALL_OW 380
// un = CreateHuman ;
1636: LD_ADDR_VAR 0 7
1640: PUSH
1641: CALL_OW 44
1645: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1646: LD_VAR 0 7
1650: PPUSH
1651: LD_VAR 0 2
1655: PPUSH
1656: CALL_OW 52
// end ; end ; end ;
1660: LD_VAR 0 5
1664: RET
// export function PrepareVehicles ; var veh ; begin
1665: LD_INT 0
1667: PPUSH
1668: PPUSH
// uc_side = 1 ;
1669: LD_ADDR_OWVAR 20
1673: PUSH
1674: LD_INT 1
1676: ST_TO_ADDR
// uc_nation = 1 ;
1677: LD_ADDR_OWVAR 21
1681: PUSH
1682: LD_INT 1
1684: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1685: LD_ADDR_OWVAR 37
1689: PUSH
1690: LD_INT 3
1692: ST_TO_ADDR
// vc_engine = 3 ;
1693: LD_ADDR_OWVAR 39
1697: PUSH
1698: LD_INT 3
1700: ST_TO_ADDR
// vc_control = 3 ;
1701: LD_ADDR_OWVAR 38
1705: PUSH
1706: LD_INT 3
1708: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1709: LD_ADDR_OWVAR 40
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// veh = CreateVehicle ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: CALL_OW 45
1726: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1727: LD_VAR 0 2
1731: PPUSH
1732: LD_INT 4
1734: PPUSH
1735: LD_INT 0
1737: PPUSH
1738: CALL_OW 49
// vc_weapon = us_double_gun ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_INT 5
1749: ST_TO_ADDR
// vc_control = 1 ;
1750: LD_ADDR_OWVAR 38
1754: PUSH
1755: LD_INT 1
1757: ST_TO_ADDR
// veh = CreateVehicle ;
1758: LD_ADDR_VAR 0 2
1762: PUSH
1763: CALL_OW 45
1767: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1768: LD_VAR 0 2
1772: PPUSH
1773: LD_INT 4
1775: PPUSH
1776: LD_INT 0
1778: PPUSH
1779: CALL_OW 49
// vc_weapon = us_light_gun ;
1783: LD_ADDR_OWVAR 40
1787: PUSH
1788: LD_INT 3
1790: ST_TO_ADDR
// vc_control = 3 ;
1791: LD_ADDR_OWVAR 38
1795: PUSH
1796: LD_INT 3
1798: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1799: LD_ADDR_OWVAR 37
1803: PUSH
1804: LD_INT 2
1806: ST_TO_ADDR
// veh = CreateVehicle ;
1807: LD_ADDR_VAR 0 2
1811: PUSH
1812: CALL_OW 45
1816: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1817: LD_VAR 0 2
1821: PPUSH
1822: LD_INT 4
1824: PPUSH
1825: LD_INT 0
1827: PPUSH
1828: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1832: LD_ADDR_OWVAR 40
1836: PUSH
1837: LD_INT 4
1839: ST_TO_ADDR
// veh = CreateVehicle ;
1840: LD_ADDR_VAR 0 2
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1850: LD_VAR 0 2
1854: PPUSH
1855: LD_INT 4
1857: PPUSH
1858: LD_INT 0
1860: PPUSH
1861: CALL_OW 49
// end ;
1865: LD_VAR 0 1
1869: RET
// export function PowellSupport1 ; var veh , un ; begin
1870: LD_INT 0
1872: PPUSH
1873: PPUSH
1874: PPUSH
// uc_side = 1 ;
1875: LD_ADDR_OWVAR 20
1879: PUSH
1880: LD_INT 1
1882: ST_TO_ADDR
// uc_nation = 1 ;
1883: LD_ADDR_OWVAR 21
1887: PUSH
1888: LD_INT 1
1890: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1891: LD_STRING 11_Brown
1893: PPUSH
1894: CALL_OW 28
1898: PUSH
1899: LD_INT 1
1901: EQUAL
1902: IFFALSE 1949
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1904: LD_ADDR_EXP 7
1908: PUSH
1909: LD_STRING 11_Brown
1911: PPUSH
1912: LD_INT 1
1914: PPUSH
1915: CALL 12078 0 2
1919: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1920: LD_EXP 7
1924: PPUSH
1925: LD_INT 2
1927: PPUSH
1928: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1932: LD_EXP 7
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// end else
1947: GO 1965
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1949: LD_INT 4
1951: PPUSH
1952: LD_INT 0
1954: PPUSH
1955: LD_INT 1
1957: PPUSH
1958: LD_INT 0
1960: PPUSH
1961: CALL 1239 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1965: LD_STRING 11_Gary
1967: PPUSH
1968: CALL_OW 28
1972: PUSH
1973: LD_INT 1
1975: EQUAL
1976: IFFALSE 2023
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1978: LD_ADDR_EXP 11
1982: PUSH
1983: LD_STRING 11_Gary
1985: PPUSH
1986: LD_INT 1
1988: PPUSH
1989: CALL 12078 0 2
1993: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1994: LD_EXP 11
1998: PPUSH
1999: LD_INT 2
2001: PPUSH
2002: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2006: LD_EXP 11
2010: PPUSH
2011: LD_INT 4
2013: PPUSH
2014: LD_INT 0
2016: PPUSH
2017: CALL_OW 49
// end else
2021: GO 2039
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2023: LD_INT 4
2025: PPUSH
2026: LD_INT 0
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL 1239 0 4
// end ; vc_chassis = us_medium_tracked ;
2039: LD_ADDR_OWVAR 37
2043: PUSH
2044: LD_INT 3
2046: ST_TO_ADDR
// vc_engine = 3 ;
2047: LD_ADDR_OWVAR 39
2051: PUSH
2052: LD_INT 3
2054: ST_TO_ADDR
// vc_control = 1 ;
2055: LD_ADDR_OWVAR 38
2059: PUSH
2060: LD_INT 1
2062: ST_TO_ADDR
// vc_weapon = us_crane ;
2063: LD_ADDR_OWVAR 40
2067: PUSH
2068: LD_INT 13
2070: ST_TO_ADDR
// veh = CreateVehicle ;
2071: LD_ADDR_VAR 0 2
2075: PUSH
2076: CALL_OW 45
2080: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2081: LD_VAR 0 2
2085: PPUSH
2086: LD_INT 4
2088: PPUSH
2089: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2093: LD_VAR 0 2
2097: PPUSH
2098: LD_INT 4
2100: PPUSH
2101: LD_INT 0
2103: PPUSH
2104: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2108: LD_INT 4
2110: PPUSH
2111: LD_VAR 0 2
2115: PPUSH
2116: LD_INT 2
2118: PPUSH
2119: LD_INT 1
2121: PPUSH
2122: CALL 1239 0 4
// vc_weapon = 9 ;
2126: LD_ADDR_OWVAR 40
2130: PUSH
2131: LD_INT 9
2133: ST_TO_ADDR
// veh = CreateVehicle ;
2134: LD_ADDR_VAR 0 2
2138: PUSH
2139: CALL_OW 45
2143: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2144: LD_VAR 0 2
2148: PPUSH
2149: LD_INT 4
2151: PPUSH
2152: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2156: LD_VAR 0 2
2160: PPUSH
2161: LD_INT 4
2163: PPUSH
2164: LD_INT 0
2166: PPUSH
2167: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2171: LD_INT 4
2173: PPUSH
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_INT 2
2181: PPUSH
2182: LD_INT 1
2184: PPUSH
2185: CALL 1239 0 4
// vc_control = 3 ;
2189: LD_ADDR_OWVAR 38
2193: PUSH
2194: LD_INT 3
2196: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2197: LD_ADDR_OWVAR 40
2201: PUSH
2202: LD_INT 12
2204: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2205: LD_ADDR_EXP 15
2209: PUSH
2210: CALL_OW 45
2214: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2215: LD_ADDR_EXP 16
2219: PUSH
2220: CALL_OW 45
2224: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2225: LD_EXP 15
2229: PPUSH
2230: LD_INT 4
2232: PPUSH
2233: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2237: LD_EXP 16
2241: PPUSH
2242: LD_INT 4
2244: PPUSH
2245: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2249: LD_EXP 15
2253: PPUSH
2254: LD_INT 4
2256: PPUSH
2257: LD_INT 0
2259: PPUSH
2260: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2264: LD_EXP 16
2268: PPUSH
2269: LD_INT 4
2271: PPUSH
2272: LD_INT 0
2274: PPUSH
2275: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2279: LD_EXP 15
2283: PPUSH
2284: LD_INT 3
2286: PPUSH
2287: LD_INT 100
2289: PPUSH
2290: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2294: LD_EXP 16
2298: PPUSH
2299: LD_INT 1
2301: PPUSH
2302: LD_INT 80
2304: PPUSH
2305: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2309: LD_EXP 16
2313: PPUSH
2314: LD_INT 3
2316: PPUSH
2317: LD_INT 20
2319: PPUSH
2320: CALL_OW 291
// end ;
2324: LD_VAR 0 1
2328: RET
// export function PowellSupport2 ; var veh , un ; begin
2329: LD_INT 0
2331: PPUSH
2332: PPUSH
2333: PPUSH
// uc_side = 1 ;
2334: LD_ADDR_OWVAR 20
2338: PUSH
2339: LD_INT 1
2341: ST_TO_ADDR
// uc_nation = 1 ;
2342: LD_ADDR_OWVAR 21
2346: PUSH
2347: LD_INT 1
2349: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2350: LD_ADDR_OWVAR 37
2354: PUSH
2355: LD_INT 2
2357: ST_TO_ADDR
// vc_engine = 3 ;
2358: LD_ADDR_OWVAR 39
2362: PUSH
2363: LD_INT 3
2365: ST_TO_ADDR
// vc_control = 3 ;
2366: LD_ADDR_OWVAR 38
2370: PUSH
2371: LD_INT 3
2373: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2374: LD_ADDR_OWVAR 40
2378: PUSH
2379: LD_INT 3
2381: ST_TO_ADDR
// veh = CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 4
2399: PPUSH
2400: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: LD_INT 0
2414: PPUSH
2415: CALL_OW 49
// vc_control = 1 ;
2419: LD_ADDR_OWVAR 38
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2427: LD_ADDR_OWVAR 37
2431: PUSH
2432: LD_INT 2
2434: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2435: LD_ADDR_OWVAR 40
2439: PUSH
2440: LD_INT 5
2442: ST_TO_ADDR
// veh = CreateVehicle ;
2443: LD_ADDR_VAR 0 2
2447: PUSH
2448: CALL_OW 45
2452: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2453: LD_VAR 0 2
2457: PPUSH
2458: LD_INT 4
2460: PPUSH
2461: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2465: LD_VAR 0 2
2469: PPUSH
2470: LD_INT 4
2472: PPUSH
2473: LD_INT 0
2475: PPUSH
2476: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2480: LD_STRING 11_Bobby
2482: PPUSH
2483: CALL_OW 28
2487: PUSH
2488: LD_INT 1
2490: EQUAL
2491: IFFALSE 2537
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2493: LD_ADDR_EXP 4
2497: PUSH
2498: LD_STRING 11_Bobby
2500: PPUSH
2501: LD_INT 1
2503: PPUSH
2504: CALL 12078 0 2
2508: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2509: LD_EXP 4
2513: PPUSH
2514: LD_INT 3
2516: PPUSH
2517: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2521: LD_EXP 4
2525: PPUSH
2526: LD_VAR 0 2
2530: PPUSH
2531: CALL_OW 52
// end else
2535: GO 2555
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2537: LD_INT 0
2539: PPUSH
2540: LD_VAR 0 2
2544: PPUSH
2545: LD_INT 2
2547: PPUSH
2548: LD_INT 0
2550: PPUSH
2551: CALL 1239 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2555: LD_STRING 11_Houten
2557: PPUSH
2558: CALL_OW 28
2562: PUSH
2563: LD_INT 1
2565: EQUAL
2566: IFFALSE 2613
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2568: LD_ADDR_EXP 9
2572: PUSH
2573: LD_STRING 11_Houten
2575: PPUSH
2576: LD_INT 1
2578: PPUSH
2579: CALL 12078 0 2
2583: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2584: LD_EXP 9
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2596: LD_EXP 9
2600: PPUSH
2601: LD_INT 4
2603: PPUSH
2604: LD_INT 0
2606: PPUSH
2607: CALL_OW 49
// end else
2611: GO 2629
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2613: LD_INT 4
2615: PPUSH
2616: LD_INT 0
2618: PPUSH
2619: LD_INT 1
2621: PPUSH
2622: LD_INT 0
2624: PPUSH
2625: CALL 1239 0 4
// end ; vc_control = 3 ;
2629: LD_ADDR_OWVAR 38
2633: PUSH
2634: LD_INT 3
2636: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2637: LD_ADDR_OWVAR 40
2641: PUSH
2642: LD_INT 12
2644: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2645: LD_ADDR_EXP 17
2649: PUSH
2650: CALL_OW 45
2654: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2655: LD_EXP 17
2659: PPUSH
2660: LD_INT 4
2662: PPUSH
2663: CALL_OW 233
// amCargo4 = CreateVehicle ;
2667: LD_ADDR_EXP 18
2671: PUSH
2672: CALL_OW 45
2676: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2677: LD_EXP 18
2681: PPUSH
2682: LD_INT 4
2684: PPUSH
2685: CALL_OW 233
// amCargo5 = CreateVehicle ;
2689: LD_ADDR_EXP 19
2693: PUSH
2694: CALL_OW 45
2698: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2699: LD_EXP 19
2703: PPUSH
2704: LD_INT 4
2706: PPUSH
2707: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2711: LD_EXP 17
2715: PPUSH
2716: LD_INT 4
2718: PPUSH
2719: LD_INT 0
2721: PPUSH
2722: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2726: LD_EXP 18
2730: PPUSH
2731: LD_INT 4
2733: PPUSH
2734: LD_INT 0
2736: PPUSH
2737: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2741: LD_EXP 19
2745: PPUSH
2746: LD_INT 4
2748: PPUSH
2749: LD_INT 0
2751: PPUSH
2752: CALL_OW 49
// if kurtStatus > 0 then
2756: LD_EXP 26
2760: PUSH
2761: LD_INT 0
2763: GREATER
2764: IFFALSE 2813
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2766: LD_EXP 17
2770: PPUSH
2771: LD_INT 1
2773: PPUSH
2774: LD_INT 100
2776: PPUSH
2777: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2781: LD_EXP 18
2785: PPUSH
2786: LD_INT 1
2788: PPUSH
2789: LD_INT 100
2791: PPUSH
2792: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2796: LD_EXP 19
2800: PPUSH
2801: LD_INT 3
2803: PPUSH
2804: LD_INT 80
2806: PPUSH
2807: CALL_OW 291
// end else
2811: GO 2858
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2813: LD_EXP 17
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: LD_INT 100
2823: PPUSH
2824: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2828: LD_EXP 18
2832: PPUSH
2833: LD_INT 3
2835: PPUSH
2836: LD_INT 60
2838: PPUSH
2839: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2843: LD_EXP 19
2847: PPUSH
2848: LD_INT 3
2850: PPUSH
2851: LD_INT 100
2853: PPUSH
2854: CALL_OW 291
// end ; end ;
2858: LD_VAR 0 1
2862: RET
// export function PowellSupport3 ; var veh , un ; begin
2863: LD_INT 0
2865: PPUSH
2866: PPUSH
2867: PPUSH
// uc_side = 1 ;
2868: LD_ADDR_OWVAR 20
2872: PUSH
2873: LD_INT 1
2875: ST_TO_ADDR
// uc_nation = 1 ;
2876: LD_ADDR_OWVAR 21
2880: PUSH
2881: LD_INT 1
2883: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2884: LD_INT 4
2886: PPUSH
2887: LD_INT 0
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 0
2895: PPUSH
2896: CALL 1239 0 4
// vc_chassis = us_medium_wheeled ;
2900: LD_ADDR_OWVAR 37
2904: PUSH
2905: LD_INT 2
2907: ST_TO_ADDR
// vc_engine = 3 ;
2908: LD_ADDR_OWVAR 39
2912: PUSH
2913: LD_INT 3
2915: ST_TO_ADDR
// vc_control = 3 ;
2916: LD_ADDR_OWVAR 38
2920: PUSH
2921: LD_INT 3
2923: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2924: LD_ADDR_OWVAR 40
2928: PUSH
2929: LD_INT 12
2931: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2932: LD_ADDR_EXP 20
2936: PUSH
2937: CALL_OW 45
2941: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2942: LD_ADDR_EXP 21
2946: PUSH
2947: CALL_OW 45
2951: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2952: LD_EXP 20
2956: PPUSH
2957: LD_INT 4
2959: PPUSH
2960: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2964: LD_EXP 21
2968: PPUSH
2969: LD_INT 4
2971: PPUSH
2972: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2976: LD_EXP 20
2980: PPUSH
2981: LD_INT 4
2983: PPUSH
2984: LD_INT 0
2986: PPUSH
2987: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2991: LD_EXP 21
2995: PPUSH
2996: LD_INT 4
2998: PPUSH
2999: LD_INT 0
3001: PPUSH
3002: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3006: LD_EXP 20
3010: PPUSH
3011: LD_INT 1
3013: PPUSH
3014: LD_INT 100
3016: PPUSH
3017: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3021: LD_EXP 21
3025: PPUSH
3026: LD_INT 1
3028: PPUSH
3029: LD_INT 100
3031: PPUSH
3032: CALL_OW 291
// end ; end_of_file
3036: LD_VAR 0 1
3040: RET
// export function PrepareRussianCommander ; begin
3041: LD_INT 0
3043: PPUSH
// uc_side = 3 ;
3044: LD_ADDR_OWVAR 20
3048: PUSH
3049: LD_INT 3
3051: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
3052: LD_ADDR_EXP 23
3056: PUSH
3057: LD_STRING Davidov
3059: PPUSH
3060: LD_INT 0
3062: PPUSH
3063: CALL 12078 0 2
3067: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3068: LD_EXP 23
3072: PPUSH
3073: LD_INT 3
3075: PPUSH
3076: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3080: LD_ADDR_EXP 34
3084: PUSH
3085: LD_EXP 34
3089: PUSH
3090: LD_EXP 23
3094: ADD
3095: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3096: LD_EXP 34
3100: PPUSH
3101: LD_INT 4
3103: PPUSH
3104: CALL_OW 336
// end ;
3108: LD_VAR 0 1
3112: RET
// export function PrepareEastBase ; var i , un ; begin
3113: LD_INT 0
3115: PPUSH
3116: PPUSH
3117: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3118: LD_INT 3
3120: PPUSH
3121: LD_INT 3
3123: PPUSH
3124: LD_INT 121
3126: PPUSH
3127: LD_EXP 36
3131: PPUSH
3132: LD_EXP 37
3136: PPUSH
3137: CALL_OW 12
3141: PPUSH
3142: LD_INT 1
3144: PPUSH
3145: LD_INT 3
3147: PPUSH
3148: CALL 12792 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3152: LD_INT 3
3154: PPUSH
3155: LD_INT 3
3157: PPUSH
3158: LD_INT 121
3160: PPUSH
3161: LD_EXP 36
3165: PPUSH
3166: LD_EXP 37
3170: PPUSH
3171: CALL_OW 12
3175: PPUSH
3176: LD_INT 9
3178: PPUSH
3179: LD_INT 3
3181: PPUSH
3182: CALL 12792 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3186: LD_INT 3
3188: PPUSH
3189: LD_INT 3
3191: PPUSH
3192: LD_INT 4
3194: PPUSH
3195: LD_EXP 36
3199: PPUSH
3200: LD_EXP 37
3204: PPUSH
3205: CALL_OW 12
3209: PPUSH
3210: LD_INT 2
3212: PPUSH
3213: LD_INT 6
3215: PPUSH
3216: CALL 12792 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3220: LD_INT 3
3222: PPUSH
3223: LD_INT 3
3225: PPUSH
3226: LD_INT 112
3228: PPUSH
3229: LD_EXP 36
3233: PPUSH
3234: LD_EXP 37
3238: PPUSH
3239: CALL_OW 12
3243: PPUSH
3244: LD_INT 3
3246: PPUSH
3247: LD_INT 6
3249: PPUSH
3250: CALL 12792 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3254: LD_INT 3
3256: PPUSH
3257: LD_INT 3
3259: PPUSH
3260: LD_INT 47
3262: PPUSH
3263: LD_EXP 36
3267: PPUSH
3268: LD_EXP 37
3272: PPUSH
3273: CALL_OW 12
3277: PPUSH
3278: LD_INT 4
3280: PPUSH
3281: LD_INT 6
3283: PPUSH
3284: CALL 12792 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3288: LD_INT 3
3290: PPUSH
3291: LD_INT 3
3293: PPUSH
3294: LD_INT 129
3296: PPUSH
3297: LD_EXP 36
3301: PPUSH
3302: LD_EXP 37
3306: PPUSH
3307: CALL_OW 12
3311: PPUSH
3312: LD_INT 4
3314: PPUSH
3315: LD_INT 6
3317: PPUSH
3318: CALL 12792 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3322: LD_INT 3
3324: PPUSH
3325: LD_INT 3
3327: PPUSH
3328: LD_INT 135
3330: PPUSH
3331: LD_EXP 36
3335: PPUSH
3336: LD_EXP 37
3340: PPUSH
3341: CALL_OW 12
3345: PPUSH
3346: LD_INT 4
3348: PPUSH
3349: LD_INT 6
3351: PPUSH
3352: CALL 12792 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3356: LD_ADDR_VAR 0 2
3360: PUSH
3361: LD_INT 22
3363: PUSH
3364: LD_INT 3
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: LD_INT 30
3373: PUSH
3374: LD_INT 32
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: PUSH
3381: EMPTY
3382: LIST
3383: LIST
3384: PPUSH
3385: CALL_OW 69
3389: PUSH
3390: FOR_IN
3391: IFFALSE 3431
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3393: LD_INT 3
3395: PPUSH
3396: LD_INT 3
3398: PPUSH
3399: LD_VAR 0 2
3403: PPUSH
3404: LD_EXP 36
3408: PPUSH
3409: LD_EXP 37
3413: PPUSH
3414: CALL_OW 12
3418: PPUSH
3419: LD_INT 1
3421: PPUSH
3422: LD_INT 1
3424: PPUSH
3425: CALL 12792 0 6
3429: GO 3390
3431: POP
3432: POP
// for i = 1 to 5 do
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: DOUBLE
3439: LD_INT 1
3441: DEC
3442: ST_TO_ADDR
3443: LD_INT 5
3445: PUSH
3446: FOR_TO
3447: IFFALSE 3546
// begin uc_side = 3 ;
3449: LD_ADDR_OWVAR 20
3453: PUSH
3454: LD_INT 3
3456: ST_TO_ADDR
// uc_nation = 3 ;
3457: LD_ADDR_OWVAR 21
3461: PUSH
3462: LD_INT 3
3464: ST_TO_ADDR
// hc_gallery =  ;
3465: LD_ADDR_OWVAR 33
3469: PUSH
3470: LD_STRING 
3472: ST_TO_ADDR
// hc_name =  ;
3473: LD_ADDR_OWVAR 26
3477: PUSH
3478: LD_STRING 
3480: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3481: LD_INT 0
3483: PPUSH
3484: LD_INT 4
3486: PPUSH
3487: LD_EXP 36
3491: PPUSH
3492: LD_EXP 37
3496: PPUSH
3497: CALL_OW 12
3501: PPUSH
3502: CALL_OW 380
// un = CreateHuman ;
3506: LD_ADDR_VAR 0 3
3510: PUSH
3511: CALL_OW 44
3515: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3516: LD_VAR 0 3
3520: PPUSH
3521: LD_INT 3
3523: PPUSH
3524: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3528: LD_ADDR_EXP 34
3532: PUSH
3533: LD_EXP 34
3537: PUSH
3538: LD_VAR 0 3
3542: ADD
3543: ST_TO_ADDR
// end ;
3544: GO 3446
3546: POP
3547: POP
// end ;
3548: LD_VAR 0 1
3552: RET
// export function PrepareWestBase ; var i , un ; begin
3553: LD_INT 0
3555: PPUSH
3556: PPUSH
3557: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3558: LD_INT 3
3560: PPUSH
3561: LD_INT 3
3563: PPUSH
3564: LD_INT 6
3566: PPUSH
3567: LD_EXP 36
3571: PPUSH
3572: LD_EXP 37
3576: PPUSH
3577: CALL_OW 12
3581: PPUSH
3582: LD_INT 2
3584: PPUSH
3585: LD_INT 3
3587: PPUSH
3588: CALL 12792 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3592: LD_INT 3
3594: PPUSH
3595: LD_INT 3
3597: PPUSH
3598: LD_INT 91
3600: PPUSH
3601: LD_EXP 36
3605: PPUSH
3606: LD_EXP 37
3610: PPUSH
3611: CALL_OW 12
3615: PPUSH
3616: LD_INT 4
3618: PPUSH
3619: LD_INT 3
3621: PPUSH
3622: CALL 12792 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3626: LD_INT 3
3628: PPUSH
3629: LD_INT 3
3631: PPUSH
3632: LD_INT 21
3634: PPUSH
3635: LD_EXP 36
3639: PPUSH
3640: LD_EXP 37
3644: PPUSH
3645: CALL_OW 12
3649: PPUSH
3650: LD_INT 3
3652: PPUSH
3653: LD_INT 6
3655: PPUSH
3656: CALL 12792 0 6
// end ;
3660: LD_VAR 0 1
3664: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3665: LD_INT 0
3667: PPUSH
3668: PPUSH
3669: PPUSH
3670: PPUSH
// uc_side = 3 ;
3671: LD_ADDR_OWVAR 20
3675: PUSH
3676: LD_INT 3
3678: ST_TO_ADDR
// uc_nation = 3 ;
3679: LD_ADDR_OWVAR 21
3683: PUSH
3684: LD_INT 3
3686: ST_TO_ADDR
// for i = 1 to 5 do
3687: LD_ADDR_VAR 0 2
3691: PUSH
3692: DOUBLE
3693: LD_INT 1
3695: DEC
3696: ST_TO_ADDR
3697: LD_INT 5
3699: PUSH
3700: FOR_TO
3701: IFFALSE 3771
// begin hc_gallery =  ;
3703: LD_ADDR_OWVAR 33
3707: PUSH
3708: LD_STRING 
3710: ST_TO_ADDR
// hc_name =  ;
3711: LD_ADDR_OWVAR 26
3715: PUSH
3716: LD_STRING 
3718: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3719: LD_INT 0
3721: PPUSH
3722: LD_INT 9
3724: PPUSH
3725: LD_EXP 36
3729: PPUSH
3730: LD_EXP 37
3734: PPUSH
3735: CALL_OW 12
3739: PPUSH
3740: CALL_OW 380
// un = CreateHuman ;
3744: LD_ADDR_VAR 0 3
3748: PUSH
3749: CALL_OW 44
3753: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3754: LD_VAR 0 3
3758: PPUSH
3759: LD_INT 8
3761: PPUSH
3762: LD_INT 0
3764: PPUSH
3765: CALL_OW 49
// end ;
3769: GO 3700
3771: POP
3772: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3773: LD_ADDR_VAR 0 2
3777: PUSH
3778: DOUBLE
3779: LD_INT 1
3781: DEC
3782: ST_TO_ADDR
3783: LD_INT 2
3785: PUSH
3786: LD_INT 3
3788: PUSH
3789: LD_INT 4
3791: PUSH
3792: EMPTY
3793: LIST
3794: LIST
3795: LIST
3796: PUSH
3797: LD_OWVAR 67
3801: ARRAY
3802: PUSH
3803: FOR_TO
3804: IFFALSE 3874
// begin hc_gallery =  ;
3806: LD_ADDR_OWVAR 33
3810: PUSH
3811: LD_STRING 
3813: ST_TO_ADDR
// hc_name =  ;
3814: LD_ADDR_OWVAR 26
3818: PUSH
3819: LD_STRING 
3821: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3822: LD_INT 0
3824: PPUSH
3825: LD_INT 4
3827: PPUSH
3828: LD_EXP 36
3832: PPUSH
3833: LD_EXP 37
3837: PPUSH
3838: CALL_OW 12
3842: PPUSH
3843: CALL_OW 380
// un = CreateHuman ;
3847: LD_ADDR_VAR 0 3
3851: PUSH
3852: CALL_OW 44
3856: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3857: LD_VAR 0 3
3861: PPUSH
3862: LD_INT 8
3864: PPUSH
3865: LD_INT 0
3867: PPUSH
3868: CALL_OW 49
// end ;
3872: GO 3803
3874: POP
3875: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3876: LD_ADDR_VAR 0 2
3880: PUSH
3881: DOUBLE
3882: LD_INT 1
3884: DEC
3885: ST_TO_ADDR
3886: LD_INT 3
3888: PUSH
3889: LD_INT 4
3891: PUSH
3892: LD_INT 5
3894: PUSH
3895: EMPTY
3896: LIST
3897: LIST
3898: LIST
3899: PUSH
3900: LD_OWVAR 67
3904: ARRAY
3905: PUSH
3906: FOR_TO
3907: IFFALSE 4103
// begin vc_engine = 3 ;
3909: LD_ADDR_OWVAR 39
3913: PUSH
3914: LD_INT 3
3916: ST_TO_ADDR
// vc_control = 1 ;
3917: LD_ADDR_OWVAR 38
3921: PUSH
3922: LD_INT 1
3924: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3925: LD_ADDR_OWVAR 40
3929: PUSH
3930: LD_INT 42
3932: PUSH
3933: LD_INT 43
3935: PUSH
3936: LD_INT 44
3938: PUSH
3939: LD_INT 45
3941: PUSH
3942: LD_INT 46
3944: PUSH
3945: EMPTY
3946: LIST
3947: LIST
3948: LIST
3949: LIST
3950: LIST
3951: PUSH
3952: LD_INT 1
3954: PPUSH
3955: LD_INT 5
3957: PPUSH
3958: CALL_OW 12
3962: ARRAY
3963: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3964: LD_OWVAR 40
3968: PUSH
3969: LD_INT 46
3971: EQUAL
3972: IFFALSE 3984
// vc_chassis = ru_heavy_tracked else
3974: LD_ADDR_OWVAR 37
3978: PUSH
3979: LD_INT 24
3981: ST_TO_ADDR
3982: GO 4011
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3984: LD_ADDR_OWVAR 37
3988: PUSH
3989: LD_INT 22
3991: PUSH
3992: LD_INT 21
3994: PUSH
3995: EMPTY
3996: LIST
3997: LIST
3998: PUSH
3999: LD_INT 1
4001: PPUSH
4002: LD_INT 2
4004: PPUSH
4005: CALL_OW 12
4009: ARRAY
4010: ST_TO_ADDR
// veh = CreateVehicle ;
4011: LD_ADDR_VAR 0 4
4015: PUSH
4016: CALL_OW 45
4020: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4021: LD_VAR 0 4
4025: PPUSH
4026: LD_INT 3
4028: PPUSH
4029: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4033: LD_VAR 0 4
4037: PPUSH
4038: LD_INT 5
4040: PPUSH
4041: LD_INT 0
4043: PPUSH
4044: CALL_OW 49
// hc_gallery =  ;
4048: LD_ADDR_OWVAR 33
4052: PUSH
4053: LD_STRING 
4055: ST_TO_ADDR
// hc_name =  ;
4056: LD_ADDR_OWVAR 26
4060: PUSH
4061: LD_STRING 
4063: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4064: LD_INT 0
4066: PPUSH
4067: LD_INT 3
4069: PPUSH
4070: LD_INT 10
4072: PPUSH
4073: CALL_OW 380
// un = CreateHuman ;
4077: LD_ADDR_VAR 0 3
4081: PUSH
4082: CALL_OW 44
4086: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4087: LD_VAR 0 3
4091: PPUSH
4092: LD_VAR 0 4
4096: PPUSH
4097: CALL_OW 52
// end ;
4101: GO 3906
4103: POP
4104: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4105: LD_ADDR_VAR 0 2
4109: PUSH
4110: DOUBLE
4111: LD_INT 1
4113: DEC
4114: ST_TO_ADDR
4115: LD_INT 3
4117: PUSH
4118: LD_INT 4
4120: PUSH
4121: LD_INT 5
4123: PUSH
4124: EMPTY
4125: LIST
4126: LIST
4127: LIST
4128: PUSH
4129: LD_OWVAR 67
4133: ARRAY
4134: PUSH
4135: FOR_TO
4136: IFFALSE 4283
// begin vc_engine = 3 ;
4138: LD_ADDR_OWVAR 39
4142: PUSH
4143: LD_INT 3
4145: ST_TO_ADDR
// vc_control = 3 ;
4146: LD_ADDR_OWVAR 38
4150: PUSH
4151: LD_INT 3
4153: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4154: LD_ADDR_OWVAR 40
4158: PUSH
4159: LD_INT 42
4161: PUSH
4162: LD_INT 43
4164: PUSH
4165: LD_INT 44
4167: PUSH
4168: LD_INT 45
4170: PUSH
4171: LD_INT 46
4173: PUSH
4174: LD_INT 49
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: LIST
4184: PUSH
4185: LD_INT 1
4187: PPUSH
4188: LD_INT 5
4190: PPUSH
4191: CALL_OW 12
4195: ARRAY
4196: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4197: LD_OWVAR 40
4201: PUSH
4202: LD_INT 46
4204: EQUAL
4205: IFFALSE 4217
// vc_chassis = ru_heavy_tracked else
4207: LD_ADDR_OWVAR 37
4211: PUSH
4212: LD_INT 24
4214: ST_TO_ADDR
4215: GO 4244
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4217: LD_ADDR_OWVAR 37
4221: PUSH
4222: LD_INT 22
4224: PUSH
4225: LD_INT 21
4227: PUSH
4228: EMPTY
4229: LIST
4230: LIST
4231: PUSH
4232: LD_INT 1
4234: PPUSH
4235: LD_INT 2
4237: PPUSH
4238: CALL_OW 12
4242: ARRAY
4243: ST_TO_ADDR
// veh = CreateVehicle ;
4244: LD_ADDR_VAR 0 4
4248: PUSH
4249: CALL_OW 45
4253: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4254: LD_VAR 0 4
4258: PPUSH
4259: LD_INT 3
4261: PPUSH
4262: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4266: LD_VAR 0 4
4270: PPUSH
4271: LD_INT 6
4273: PPUSH
4274: LD_INT 0
4276: PPUSH
4277: CALL_OW 49
// end ;
4281: GO 4135
4283: POP
4284: POP
// end ; end_of_file
4285: LD_VAR 0 1
4289: RET
// export function PrepareKurt ; begin
4290: LD_INT 0
4292: PPUSH
// uc_side = 8 ;
4293: LD_ADDR_OWVAR 20
4297: PUSH
4298: LD_INT 8
4300: ST_TO_ADDR
// uc_nation = 2 ;
4301: LD_ADDR_OWVAR 21
4305: PUSH
4306: LD_INT 2
4308: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4309: LD_ADDR_OWVAR 37
4313: PUSH
4314: LD_INT 13
4316: ST_TO_ADDR
// vc_engine = 1 ;
4317: LD_ADDR_OWVAR 39
4321: PUSH
4322: LD_INT 1
4324: ST_TO_ADDR
// vc_control = 1 ;
4325: LD_ADDR_OWVAR 38
4329: PUSH
4330: LD_INT 1
4332: ST_TO_ADDR
// vc_weapon = 24 ;
4333: LD_ADDR_OWVAR 40
4337: PUSH
4338: LD_INT 24
4340: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4341: LD_ADDR_EXP 25
4345: PUSH
4346: CALL_OW 45
4350: ST_TO_ADDR
// if kurtStatus > 0 then
4351: LD_EXP 26
4355: PUSH
4356: LD_INT 0
4358: GREATER
4359: IFFALSE 4408
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4361: LD_ADDR_EXP 24
4365: PUSH
4366: LD_STRING Kurt
4368: PPUSH
4369: LD_INT 0
4371: PPUSH
4372: CALL 12078 0 2
4376: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4377: LD_EXP 25
4381: PPUSH
4382: LD_INT 4
4384: PPUSH
4385: LD_INT 0
4387: PPUSH
4388: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4392: LD_EXP 24
4396: PPUSH
4397: LD_EXP 25
4401: PPUSH
4402: CALL_OW 52
// end else
4406: GO 4485
// begin hc_name =  ;
4408: LD_ADDR_OWVAR 26
4412: PUSH
4413: LD_STRING 
4415: ST_TO_ADDR
// hc_gallery =  ;
4416: LD_ADDR_OWVAR 33
4420: PUSH
4421: LD_STRING 
4423: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4424: LD_INT 1
4426: PPUSH
4427: LD_INT 10
4429: PPUSH
4430: CALL_OW 381
// Kurt = CreateHuman ;
4434: LD_ADDR_EXP 24
4438: PUSH
4439: CALL_OW 44
4443: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4444: LD_EXP 25
4448: PPUSH
4449: LD_INT 4
4451: PPUSH
4452: LD_INT 0
4454: PPUSH
4455: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4459: LD_EXP 24
4463: PPUSH
4464: LD_EXP 25
4468: PPUSH
4469: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4473: LD_EXP 24
4477: PPUSH
4478: LD_STRING AltKurt
4480: PPUSH
4481: CALL_OW 38
// end ; end ;
4485: LD_VAR 0 1
4489: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4490: LD_INT 0
4492: PPUSH
4493: PPUSH
4494: PPUSH
4495: PPUSH
// for i = 1 to 3 do
4496: LD_ADDR_VAR 0 2
4500: PUSH
4501: DOUBLE
4502: LD_INT 1
4504: DEC
4505: ST_TO_ADDR
4506: LD_INT 3
4508: PUSH
4509: FOR_TO
4510: IFFALSE 4631
// begin uc_side = 1 ;
4512: LD_ADDR_OWVAR 20
4516: PUSH
4517: LD_INT 1
4519: ST_TO_ADDR
// uc_nation = 2 ;
4520: LD_ADDR_OWVAR 21
4524: PUSH
4525: LD_INT 2
4527: ST_TO_ADDR
// hc_gallery =  ;
4528: LD_ADDR_OWVAR 33
4532: PUSH
4533: LD_STRING 
4535: ST_TO_ADDR
// hc_name =  ;
4536: LD_ADDR_OWVAR 26
4540: PUSH
4541: LD_STRING 
4543: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4544: LD_EXP 26
4548: PUSH
4549: LD_INT 0
4551: EQUAL
4552: PUSH
4553: LD_EXP 26
4557: PUSH
4558: LD_INT 2
4560: EQUAL
4561: OR
4562: IFFALSE 4579
// PrepareHuman ( false , 1 , 6 ) else
4564: LD_INT 0
4566: PPUSH
4567: LD_INT 1
4569: PPUSH
4570: LD_INT 6
4572: PPUSH
4573: CALL_OW 380
4577: GO 4592
// PrepareHuman ( false , 1 , 8 ) ;
4579: LD_INT 0
4581: PPUSH
4582: LD_INT 1
4584: PPUSH
4585: LD_INT 8
4587: PPUSH
4588: CALL_OW 380
// un = CreateHuman ;
4592: LD_ADDR_VAR 0 3
4596: PUSH
4597: CALL_OW 44
4601: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4602: LD_VAR 0 3
4606: PPUSH
4607: LD_INT 4
4609: PPUSH
4610: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4614: LD_VAR 0 3
4618: PPUSH
4619: LD_INT 4
4621: PPUSH
4622: LD_INT 0
4624: PPUSH
4625: CALL_OW 49
// end ;
4629: GO 4509
4631: POP
4632: POP
// vc_chassis = 14 ;
4633: LD_ADDR_OWVAR 37
4637: PUSH
4638: LD_INT 14
4640: ST_TO_ADDR
// vc_engine = 3 ;
4641: LD_ADDR_OWVAR 39
4645: PUSH
4646: LD_INT 3
4648: ST_TO_ADDR
// vc_control = 1 ;
4649: LD_ADDR_OWVAR 38
4653: PUSH
4654: LD_INT 1
4656: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4657: LD_ADDR_OWVAR 40
4661: PUSH
4662: LD_INT 27
4664: PUSH
4665: LD_INT 26
4667: PUSH
4668: LD_INT 28
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: PUSH
4676: LD_INT 1
4678: PPUSH
4679: LD_INT 3
4681: PPUSH
4682: CALL_OW 12
4686: ARRAY
4687: ST_TO_ADDR
// veh = CreateVehicle ;
4688: LD_ADDR_VAR 0 4
4692: PUSH
4693: CALL_OW 45
4697: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4698: LD_VAR 0 4
4702: PPUSH
4703: LD_INT 4
4705: PPUSH
4706: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4710: LD_VAR 0 4
4714: PPUSH
4715: LD_INT 4
4717: PPUSH
4718: LD_INT 0
4720: PPUSH
4721: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4725: LD_EXP 26
4729: PUSH
4730: LD_INT 0
4732: EQUAL
4733: PUSH
4734: LD_EXP 26
4738: PUSH
4739: LD_INT 2
4741: EQUAL
4742: OR
4743: IFFALSE 4760
// PrepareHuman ( false , 3 , 6 ) else
4745: LD_INT 0
4747: PPUSH
4748: LD_INT 3
4750: PPUSH
4751: LD_INT 6
4753: PPUSH
4754: CALL_OW 380
4758: GO 4773
// PrepareHuman ( false , 3 , 8 ) ;
4760: LD_INT 0
4762: PPUSH
4763: LD_INT 3
4765: PPUSH
4766: LD_INT 8
4768: PPUSH
4769: CALL_OW 380
// un = CreateHuman ;
4773: LD_ADDR_VAR 0 3
4777: PUSH
4778: CALL_OW 44
4782: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4783: LD_VAR 0 3
4787: PPUSH
4788: LD_VAR 0 4
4792: PPUSH
4793: CALL_OW 52
// vc_chassis = 14 ;
4797: LD_ADDR_OWVAR 37
4801: PUSH
4802: LD_INT 14
4804: ST_TO_ADDR
// vc_engine = 3 ;
4805: LD_ADDR_OWVAR 39
4809: PUSH
4810: LD_INT 3
4812: ST_TO_ADDR
// vc_control = 1 ;
4813: LD_ADDR_OWVAR 38
4817: PUSH
4818: LD_INT 1
4820: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4821: LD_ADDR_OWVAR 40
4825: PUSH
4826: LD_INT 27
4828: PUSH
4829: LD_INT 26
4831: PUSH
4832: LD_INT 28
4834: PUSH
4835: EMPTY
4836: LIST
4837: LIST
4838: LIST
4839: PUSH
4840: LD_INT 1
4842: PPUSH
4843: LD_INT 3
4845: PPUSH
4846: CALL_OW 12
4850: ARRAY
4851: ST_TO_ADDR
// veh = CreateVehicle ;
4852: LD_ADDR_VAR 0 4
4856: PUSH
4857: CALL_OW 45
4861: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4862: LD_VAR 0 4
4866: PPUSH
4867: LD_INT 4
4869: PPUSH
4870: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4874: LD_VAR 0 4
4878: PPUSH
4879: LD_INT 4
4881: PPUSH
4882: LD_INT 0
4884: PPUSH
4885: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4889: LD_EXP 26
4893: PUSH
4894: LD_INT 0
4896: EQUAL
4897: PUSH
4898: LD_EXP 26
4902: PUSH
4903: LD_INT 2
4905: EQUAL
4906: OR
4907: IFFALSE 4924
// PrepareHuman ( false , 4 , 6 ) else
4909: LD_INT 0
4911: PPUSH
4912: LD_INT 4
4914: PPUSH
4915: LD_INT 6
4917: PPUSH
4918: CALL_OW 380
4922: GO 4937
// PrepareHuman ( false , 4 , 8 ) ;
4924: LD_INT 0
4926: PPUSH
4927: LD_INT 4
4929: PPUSH
4930: LD_INT 8
4932: PPUSH
4933: CALL_OW 380
// un = CreateHuman ;
4937: LD_ADDR_VAR 0 3
4941: PUSH
4942: CALL_OW 44
4946: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4947: LD_VAR 0 3
4951: PPUSH
4952: LD_INT 4
4954: PPUSH
4955: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4959: LD_VAR 0 3
4963: PPUSH
4964: LD_VAR 0 4
4968: PPUSH
4969: CALL_OW 52
// vc_chassis = 14 ;
4973: LD_ADDR_OWVAR 37
4977: PUSH
4978: LD_INT 14
4980: ST_TO_ADDR
// vc_engine = 3 ;
4981: LD_ADDR_OWVAR 39
4985: PUSH
4986: LD_INT 3
4988: ST_TO_ADDR
// vc_control = 1 ;
4989: LD_ADDR_OWVAR 38
4993: PUSH
4994: LD_INT 1
4996: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4997: LD_ADDR_OWVAR 40
5001: PUSH
5002: LD_INT 27
5004: PUSH
5005: LD_INT 26
5007: PUSH
5008: LD_INT 28
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: LIST
5015: PUSH
5016: LD_INT 1
5018: PPUSH
5019: LD_INT 3
5021: PPUSH
5022: CALL_OW 12
5026: ARRAY
5027: ST_TO_ADDR
// veh = CreateVehicle ;
5028: LD_ADDR_VAR 0 4
5032: PUSH
5033: CALL_OW 45
5037: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5038: LD_VAR 0 4
5042: PPUSH
5043: LD_INT 4
5045: PPUSH
5046: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5050: LD_VAR 0 4
5054: PPUSH
5055: LD_INT 4
5057: PPUSH
5058: LD_INT 0
5060: PPUSH
5061: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5065: LD_EXP 26
5069: PUSH
5070: LD_INT 0
5072: EQUAL
5073: PUSH
5074: LD_EXP 26
5078: PUSH
5079: LD_INT 2
5081: EQUAL
5082: OR
5083: IFFALSE 5100
// PrepareHuman ( false , 2 , 4 ) else
5085: LD_INT 0
5087: PPUSH
5088: LD_INT 2
5090: PPUSH
5091: LD_INT 4
5093: PPUSH
5094: CALL_OW 380
5098: GO 5113
// PrepareHuman ( false , 2 , 8 ) ;
5100: LD_INT 0
5102: PPUSH
5103: LD_INT 2
5105: PPUSH
5106: LD_INT 8
5108: PPUSH
5109: CALL_OW 380
// un = CreateHuman ;
5113: LD_ADDR_VAR 0 3
5117: PUSH
5118: CALL_OW 44
5122: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5123: LD_VAR 0 3
5127: PPUSH
5128: LD_INT 4
5130: PPUSH
5131: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5135: LD_VAR 0 3
5139: PPUSH
5140: LD_VAR 0 4
5144: PPUSH
5145: CALL_OW 52
// end ;
5149: LD_VAR 0 1
5153: RET
// export function PrepareAttackLegion ; var i , un ; begin
5154: LD_INT 0
5156: PPUSH
5157: PPUSH
5158: PPUSH
// for i = 1 to 4 do
5159: LD_ADDR_VAR 0 2
5163: PUSH
5164: DOUBLE
5165: LD_INT 1
5167: DEC
5168: ST_TO_ADDR
5169: LD_INT 4
5171: PUSH
5172: FOR_TO
5173: IFFALSE 5283
// begin uc_side = 8 ;
5175: LD_ADDR_OWVAR 20
5179: PUSH
5180: LD_INT 8
5182: ST_TO_ADDR
// uc_nation = 2 ;
5183: LD_ADDR_OWVAR 21
5187: PUSH
5188: LD_INT 2
5190: ST_TO_ADDR
// hc_gallery =  ;
5191: LD_ADDR_OWVAR 33
5195: PUSH
5196: LD_STRING 
5198: ST_TO_ADDR
// hc_name =  ;
5199: LD_ADDR_OWVAR 26
5203: PUSH
5204: LD_STRING 
5206: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5207: LD_INT 0
5209: PPUSH
5210: LD_INT 1
5212: PUSH
5213: LD_INT 8
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: PUSH
5220: LD_INT 1
5222: PPUSH
5223: LD_INT 2
5225: PPUSH
5226: CALL_OW 12
5230: ARRAY
5231: PPUSH
5232: LD_INT 6
5234: PPUSH
5235: LD_INT 8
5237: PPUSH
5238: CALL_OW 12
5242: PPUSH
5243: CALL_OW 380
// un = CreateHuman ;
5247: LD_ADDR_VAR 0 3
5251: PUSH
5252: CALL_OW 44
5256: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5257: LD_VAR 0 3
5261: PPUSH
5262: LD_INT 19
5264: PPUSH
5265: LD_INT 0
5267: PPUSH
5268: CALL_OW 49
// ComCrawl ( un ) ;
5272: LD_VAR 0 3
5276: PPUSH
5277: CALL_OW 137
// end ;
5281: GO 5172
5283: POP
5284: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5285: LD_INT 1
5287: PPUSH
5288: LD_INT 8
5290: PPUSH
5291: LD_INT 2
5293: PPUSH
5294: LD_INT 1
5296: PPUSH
5297: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5301: LD_INT 20
5303: PPUSH
5304: LD_INT 3
5306: PPUSH
5307: CALL 15459 0 2
// end ; end_of_file
5311: LD_VAR 0 1
5315: RET
// every 1 do var i ;
5316: GO 5318
5318: DISABLE
5319: LD_INT 0
5321: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5322: LD_INT 10
5324: PPUSH
5325: LD_INT 122
5327: PPUSH
5328: LD_INT 145
5330: PPUSH
5331: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5335: LD_INT 137
5337: PPUSH
5338: LD_INT 84
5340: PPUSH
5341: LD_INT 61
5343: PPUSH
5344: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5348: LD_EXP 1
5352: PPUSH
5353: CALL_OW 310
5357: PPUSH
5358: CALL_OW 87
// InGameOn ;
5362: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5366: LD_INT 22
5368: PUSH
5369: LD_INT 1
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: PPUSH
5376: CALL_OW 69
5380: PPUSH
5381: LD_INT 130
5383: PPUSH
5384: LD_INT 103
5386: PPUSH
5387: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5391: LD_VAR 0 1
5395: PPUSH
5396: LD_INT 114
5398: PPUSH
5399: LD_INT 102
5401: PPUSH
5402: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5406: LD_EXP 1
5410: PPUSH
5411: LD_STRING D1-JMM-1
5413: PPUSH
5414: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5418: LD_EXP 1
5422: PPUSH
5423: CALL_OW 310
5427: PPUSH
5428: CALL_OW 87
// if IsOk ( Donaldson ) then
5432: LD_EXP 3
5436: PPUSH
5437: CALL_OW 302
5441: IFFALSE 5521
// begin Say ( Donaldson , D1-Don-1 ) ;
5443: LD_EXP 3
5447: PPUSH
5448: LD_STRING D1-Don-1
5450: PPUSH
5451: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5455: LD_EXP 1
5459: PPUSH
5460: CALL_OW 310
5464: PPUSH
5465: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5469: LD_EXP 1
5473: PPUSH
5474: LD_STRING D1-JMM-2
5476: PPUSH
5477: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5481: LD_EXP 1
5485: PPUSH
5486: CALL_OW 310
5490: PPUSH
5491: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5495: LD_EXP 3
5499: PPUSH
5500: LD_STRING D1-Don-2
5502: PPUSH
5503: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5507: LD_EXP 1
5511: PPUSH
5512: CALL_OW 310
5516: PPUSH
5517: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5521: LD_INT 22
5523: PUSH
5524: LD_INT 1
5526: PUSH
5527: EMPTY
5528: LIST
5529: LIST
5530: PPUSH
5531: CALL_OW 69
5535: PPUSH
5536: LD_INT 110
5538: PPUSH
5539: LD_INT 101
5541: PPUSH
5542: CALL_OW 171
// wait ( 0 0$1 ) ;
5546: LD_INT 35
5548: PPUSH
5549: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5553: LD_EXP 1
5557: PPUSH
5558: CALL_OW 310
5562: PPUSH
5563: CALL_OW 87
// wait ( 0 0$1 ) ;
5567: LD_INT 35
5569: PPUSH
5570: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5574: LD_EXP 1
5578: PPUSH
5579: CALL_OW 310
5583: PPUSH
5584: CALL_OW 87
// wait ( 0 0$1 ) ;
5588: LD_INT 35
5590: PPUSH
5591: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5595: LD_EXP 1
5599: PPUSH
5600: CALL_OW 310
5604: PPUSH
5605: CALL_OW 87
// wait ( 0 0$1 ) ;
5609: LD_INT 35
5611: PPUSH
5612: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5616: LD_EXP 1
5620: PPUSH
5621: CALL_OW 310
5625: PPUSH
5626: CALL_OW 87
// end ;
5630: PPOPN 1
5632: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5633: LD_INT 1
5635: PPUSH
5636: LD_INT 102
5638: PPUSH
5639: LD_INT 94
5641: PPUSH
5642: CALL_OW 293
5646: IFFALSE 5837
5648: GO 5650
5650: DISABLE
5651: LD_INT 0
5653: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5654: LD_INT 102
5656: PPUSH
5657: LD_INT 94
5659: PPUSH
5660: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5664: LD_INT 22
5666: PUSH
5667: LD_INT 1
5669: PUSH
5670: EMPTY
5671: LIST
5672: LIST
5673: PUSH
5674: LD_INT 26
5676: PUSH
5677: LD_INT 1
5679: PUSH
5680: EMPTY
5681: LIST
5682: LIST
5683: PUSH
5684: LD_INT 2
5686: PUSH
5687: LD_INT 25
5689: PUSH
5690: LD_INT 1
5692: PUSH
5693: EMPTY
5694: LIST
5695: LIST
5696: PUSH
5697: LD_INT 25
5699: PUSH
5700: LD_INT 2
5702: PUSH
5703: EMPTY
5704: LIST
5705: LIST
5706: PUSH
5707: LD_INT 25
5709: PUSH
5710: LD_INT 3
5712: PUSH
5713: EMPTY
5714: LIST
5715: LIST
5716: PUSH
5717: LD_INT 25
5719: PUSH
5720: LD_INT 4
5722: PUSH
5723: EMPTY
5724: LIST
5725: LIST
5726: PUSH
5727: LD_INT 25
5729: PUSH
5730: LD_INT 5
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: PUSH
5737: LD_INT 25
5739: PUSH
5740: LD_INT 8
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PUSH
5747: EMPTY
5748: LIST
5749: LIST
5750: LIST
5751: LIST
5752: LIST
5753: LIST
5754: LIST
5755: PUSH
5756: EMPTY
5757: LIST
5758: LIST
5759: LIST
5760: PPUSH
5761: CALL_OW 69
5765: PPUSH
5766: LD_STRING D1-Sol1-2
5768: PPUSH
5769: LD_STRING 
5771: PPUSH
5772: CALL 12175 0 3
// Say ( JMM , D1-JMM-3 ) ;
5776: LD_EXP 1
5780: PPUSH
5781: LD_STRING D1-JMM-3
5783: PPUSH
5784: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5788: LD_STRING M1
5790: PPUSH
5791: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5795: LD_ADDR_VAR 0 1
5799: PUSH
5800: LD_INT 22
5802: PUSH
5803: LD_INT 1
5805: PUSH
5806: EMPTY
5807: LIST
5808: LIST
5809: PPUSH
5810: CALL_OW 69
5814: PUSH
5815: FOR_IN
5816: IFFALSE 5835
// ComMoveXY ( i , 95 , 84 ) ;
5818: LD_VAR 0 1
5822: PPUSH
5823: LD_INT 95
5825: PPUSH
5826: LD_INT 84
5828: PPUSH
5829: CALL_OW 111
5833: GO 5815
5835: POP
5836: POP
// end ;
5837: PPOPN 1
5839: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5840: GO 5842
5842: DISABLE
5843: LD_INT 0
5845: PPUSH
5846: PPUSH
5847: PPUSH
5848: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_INT 8
5856: PPUSH
5857: LD_INT 22
5859: PUSH
5860: LD_INT 3
5862: PUSH
5863: EMPTY
5864: LIST
5865: LIST
5866: PUSH
5867: LD_INT 25
5869: PUSH
5870: LD_INT 9
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PPUSH
5881: CALL_OW 70
5885: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5886: LD_ADDR_VAR 0 3
5890: PUSH
5891: LD_INT 22
5893: PUSH
5894: LD_INT 1
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: EMPTY
5902: LIST
5903: PPUSH
5904: CALL_OW 69
5908: ST_TO_ADDR
// enable ;
5909: ENABLE
// for i in your_units do
5910: LD_ADDR_VAR 0 1
5914: PUSH
5915: LD_VAR 0 3
5919: PUSH
5920: FOR_IN
5921: IFFALSE 6587
// begin if See ( 3 , i ) then
5923: LD_INT 3
5925: PPUSH
5926: LD_VAR 0 1
5930: PPUSH
5931: CALL_OW 292
5935: IFFALSE 6585
// begin disable ;
5937: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5938: LD_VAR 0 2
5942: PPUSH
5943: LD_INT 96
5945: PPUSH
5946: LD_INT 85
5948: PPUSH
5949: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5953: LD_VAR 0 2
5957: PPUSH
5958: LD_INT 96
5960: PPUSH
5961: LD_INT 85
5963: PPUSH
5964: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5968: LD_VAR 0 2
5972: PPUSH
5973: LD_INT 96
5975: PPUSH
5976: LD_INT 85
5978: PPUSH
5979: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5983: LD_VAR 0 2
5987: PPUSH
5988: LD_INT 96
5990: PPUSH
5991: LD_INT 85
5993: PPUSH
5994: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5998: LD_VAR 0 2
6002: PPUSH
6003: LD_INT 96
6005: PPUSH
6006: LD_INT 85
6008: PPUSH
6009: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6013: LD_VAR 0 2
6017: PPUSH
6018: LD_INT 96
6020: PPUSH
6021: LD_INT 85
6023: PPUSH
6024: CALL_OW 214
// wait ( 0 0$2 ) ;
6028: LD_INT 70
6030: PPUSH
6031: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6035: LD_EXP 1
6039: PPUSH
6040: LD_STRING D1a-JMM-1
6042: PPUSH
6043: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6047: LD_EXP 3
6051: PPUSH
6052: LD_STRING D1a-Don-1
6054: PPUSH
6055: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6059: LD_ADDR_VAR 0 1
6063: PUSH
6064: LD_INT 22
6066: PUSH
6067: LD_INT 1
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PPUSH
6074: CALL_OW 69
6078: PUSH
6079: FOR_IN
6080: IFFALSE 6099
// ComMoveXY ( i , 109 , 102 ) ;
6082: LD_VAR 0 1
6086: PPUSH
6087: LD_INT 109
6089: PPUSH
6090: LD_INT 102
6092: PPUSH
6093: CALL_OW 111
6097: GO 6079
6099: POP
6100: POP
// Say ( JMM , D1a-JMM-2 ) ;
6101: LD_EXP 1
6105: PPUSH
6106: LD_STRING D1a-JMM-2
6108: PPUSH
6109: CALL_OW 88
// wait ( 0 0$10 ) ;
6113: LD_INT 350
6115: PPUSH
6116: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6120: LD_EXP 1
6124: PPUSH
6125: CALL_OW 310
6129: PPUSH
6130: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6134: LD_EXP 3
6138: PPUSH
6139: LD_STRING D1b-Don-1
6141: PPUSH
6142: CALL_OW 88
// if IsOk ( Donaldson ) then
6146: LD_EXP 3
6150: PPUSH
6151: CALL_OW 302
6155: IFFALSE 6169
// Say ( JMM , D1b-JMM-1 ) ;
6157: LD_EXP 1
6161: PPUSH
6162: LD_STRING D1b-JMM-1
6164: PPUSH
6165: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6169: LD_INT 22
6171: PUSH
6172: LD_INT 1
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: LD_INT 26
6181: PUSH
6182: LD_INT 1
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 2
6191: PUSH
6192: LD_INT 25
6194: PUSH
6195: LD_INT 1
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PUSH
6202: LD_INT 25
6204: PUSH
6205: LD_INT 2
6207: PUSH
6208: EMPTY
6209: LIST
6210: LIST
6211: PUSH
6212: LD_INT 25
6214: PUSH
6215: LD_INT 3
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PUSH
6222: LD_INT 25
6224: PUSH
6225: LD_INT 4
6227: PUSH
6228: EMPTY
6229: LIST
6230: LIST
6231: PUSH
6232: LD_INT 25
6234: PUSH
6235: LD_INT 5
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 25
6244: PUSH
6245: LD_INT 8
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: PUSH
6261: EMPTY
6262: LIST
6263: LIST
6264: LIST
6265: PPUSH
6266: CALL_OW 69
6270: PPUSH
6271: LD_STRING D1b-Sol1-1
6273: PPUSH
6274: LD_STRING 
6276: PPUSH
6277: CALL 12175 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6281: LD_EXP 3
6285: PPUSH
6286: LD_STRING D1b-Don-2
6288: PPUSH
6289: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6293: LD_EXP 1
6297: PPUSH
6298: LD_STRING D1b-JMM-2
6300: PPUSH
6301: CALL_OW 88
// dec = ShowQuery1 ;
6305: LD_ADDR_VAR 0 4
6309: PUSH
6310: CALL 12644 0 0
6314: ST_TO_ADDR
// if dec = 1 then
6315: LD_VAR 0 4
6319: PUSH
6320: LD_INT 1
6322: EQUAL
6323: IFFALSE 6429
// begin Say ( JMM , D2-JMM-1 ) ;
6325: LD_EXP 1
6329: PPUSH
6330: LD_STRING D2-JMM-1
6332: PPUSH
6333: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6337: LD_EXP 22
6341: PPUSH
6342: LD_STRING D2-Pow-1
6344: PPUSH
6345: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6349: LD_EXP 1
6353: PPUSH
6354: LD_STRING D2a-JMM-1
6356: PPUSH
6357: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6361: LD_EXP 22
6365: PPUSH
6366: LD_STRING D2a-Pow-1
6368: PPUSH
6369: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6373: LD_EXP 1
6377: PPUSH
6378: LD_STRING D2a-JMM-2
6380: PPUSH
6381: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6385: LD_EXP 22
6389: PPUSH
6390: LD_STRING D2a-Pow-2
6392: PPUSH
6393: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6397: LD_EXP 1
6401: PPUSH
6402: LD_STRING D2a-JMM-3
6404: PPUSH
6405: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6409: LD_EXP 22
6413: PPUSH
6414: LD_STRING D2a-Pow-3
6416: PPUSH
6417: CALL_OW 94
// secondPass = 2 ;
6421: LD_ADDR_EXP 27
6425: PUSH
6426: LD_INT 2
6428: ST_TO_ADDR
// end ; if dec = 2 then
6429: LD_VAR 0 4
6433: PUSH
6434: LD_INT 2
6436: EQUAL
6437: IFFALSE 6531
// begin Say ( JMM , D2-JMM-1 ) ;
6439: LD_EXP 1
6443: PPUSH
6444: LD_STRING D2-JMM-1
6446: PPUSH
6447: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6451: LD_EXP 22
6455: PPUSH
6456: LD_STRING D2-Pow-1
6458: PPUSH
6459: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6463: LD_EXP 1
6467: PPUSH
6468: LD_STRING D2b-JMM-1
6470: PPUSH
6471: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6475: LD_EXP 22
6479: PPUSH
6480: LD_STRING D2b-Pow-1
6482: PPUSH
6483: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6487: LD_EXP 1
6491: PPUSH
6492: LD_STRING D2c-JMM-1
6494: PPUSH
6495: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6499: LD_EXP 22
6503: PPUSH
6504: LD_STRING D2c-Pow-1
6506: PPUSH
6507: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6511: LD_EXP 1
6515: PPUSH
6516: LD_STRING D2c-JMM-2
6518: PPUSH
6519: CALL_OW 88
// secondPass = 2 ;
6523: LD_ADDR_EXP 27
6527: PUSH
6528: LD_INT 2
6530: ST_TO_ADDR
// end ; if dec = 3 then
6531: LD_VAR 0 4
6535: PUSH
6536: LD_INT 3
6538: EQUAL
6539: IFFALSE 6549
// secondPass = 1 ;
6541: LD_ADDR_EXP 27
6545: PUSH
6546: LD_INT 1
6548: ST_TO_ADDR
// InGameOff ;
6549: CALL_OW 9
// ruAI = 1 ;
6553: LD_ADDR_EXP 41
6557: PUSH
6558: LD_INT 1
6560: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6561: LD_INT 1
6563: PPUSH
6564: LD_INT 3
6566: PPUSH
6567: LD_INT 2
6569: PPUSH
6570: LD_INT 1
6572: PPUSH
6573: CALL_OW 80
// SaveForQuickRestart ;
6577: CALL_OW 22
// exit ;
6581: POP
6582: POP
6583: GO 6589
// end ; end ;
6585: GO 5920
6587: POP
6588: POP
// end ;
6589: PPOPN 4
6591: END
// every 1 1$0 trigger secondPass = 2 do
6592: LD_EXP 27
6596: PUSH
6597: LD_INT 2
6599: EQUAL
6600: IFFALSE 6820
6602: GO 6604
6604: DISABLE
// begin PowellSupport1 ;
6605: CALL 1870 0 0
// DialogueOn ;
6609: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6613: LD_EXP 1
6617: PPUSH
6618: LD_STRING DC1-JMM-1
6620: PPUSH
6621: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6625: LD_EXP 22
6629: PPUSH
6630: LD_STRING DC1-Pow-1
6632: PPUSH
6633: CALL_OW 94
// DialogueOff ;
6637: CALL_OW 7
// wait ( 3 3$0 ) ;
6641: LD_INT 6300
6643: PPUSH
6644: CALL_OW 67
// PowellSupport2 ;
6648: CALL 2329 0 0
// DialogueOn ;
6652: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6656: LD_EXP 1
6660: PPUSH
6661: LD_STRING DC2-JMM-1
6663: PPUSH
6664: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6668: LD_EXP 22
6672: PPUSH
6673: LD_STRING DC2-Pow-1
6675: PPUSH
6676: CALL_OW 94
// DialogueOff ;
6680: CALL_OW 7
// wait ( 3 3$00 ) ;
6684: LD_INT 6300
6686: PPUSH
6687: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6691: LD_INT 35
6693: PPUSH
6694: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6698: LD_INT 22
6700: PUSH
6701: LD_INT 1
6703: PUSH
6704: EMPTY
6705: LIST
6706: LIST
6707: PUSH
6708: LD_INT 2
6710: PUSH
6711: LD_INT 30
6713: PUSH
6714: LD_INT 0
6716: PUSH
6717: EMPTY
6718: LIST
6719: LIST
6720: PUSH
6721: LD_INT 30
6723: PUSH
6724: LD_INT 1
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: LIST
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PPUSH
6740: CALL_OW 69
6744: PUSH
6745: LD_INT 11
6747: PPUSH
6748: LD_INT 22
6750: PUSH
6751: LD_INT 3
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: PPUSH
6758: CALL_OW 70
6762: NOT
6763: AND
6764: IFFALSE 6691
// wait ( 0 0$10 ) ;
6766: LD_INT 350
6768: PPUSH
6769: CALL_OW 67
// Legion ;
6773: CALL 6821 0 0
// wait ( 6 6$0 ) ;
6777: LD_INT 12600
6779: PPUSH
6780: CALL_OW 67
// PowellSupport3 ;
6784: CALL 2863 0 0
// DialogueOn ;
6788: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6792: LD_EXP 22
6796: PPUSH
6797: LD_STRING DC3-Pow-1
6799: PPUSH
6800: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6804: LD_EXP 1
6808: PPUSH
6809: LD_STRING DC3-JMM-1
6811: PPUSH
6812: CALL_OW 88
// DialogueOff ;
6816: CALL_OW 7
// end ;
6820: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6821: LD_INT 0
6823: PPUSH
6824: PPUSH
6825: PPUSH
6826: PPUSH
6827: PPUSH
6828: PPUSH
6829: PPUSH
6830: PPUSH
6831: PPUSH
6832: PPUSH
6833: PPUSH
6834: PPUSH
6835: PPUSH
6836: PPUSH
6837: PPUSH
6838: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6839: LD_ADDR_VAR 0 5
6843: PUSH
6844: LD_INT 22
6846: PUSH
6847: LD_INT 1
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: LD_INT 21
6856: PUSH
6857: LD_INT 3
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PUSH
6864: LD_INT 2
6866: PUSH
6867: LD_INT 30
6869: PUSH
6870: LD_INT 0
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: LD_INT 30
6879: PUSH
6880: LD_INT 1
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: LIST
6891: PUSH
6892: EMPTY
6893: LIST
6894: LIST
6895: LIST
6896: PPUSH
6897: CALL_OW 69
6901: ST_TO_ADDR
// crates := 0 ;
6902: LD_ADDR_VAR 0 8
6906: PUSH
6907: LD_INT 0
6909: ST_TO_ADDR
// oil := 0 ;
6910: LD_ADDR_VAR 0 9
6914: PUSH
6915: LD_INT 0
6917: ST_TO_ADDR
// siberite := 0 ;
6918: LD_ADDR_VAR 0 10
6922: PUSH
6923: LD_INT 0
6925: ST_TO_ADDR
// payForNeutral := false ;
6926: LD_ADDR_VAR 0 13
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// payForHelp := false ;
6934: LD_ADDR_VAR 0 14
6938: PUSH
6939: LD_INT 0
6941: ST_TO_ADDR
// for i in tmp do
6942: LD_ADDR_VAR 0 2
6946: PUSH
6947: LD_VAR 0 5
6951: PUSH
6952: FOR_IN
6953: IFFALSE 7044
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6955: LD_ADDR_VAR 0 8
6959: PUSH
6960: LD_VAR 0 8
6964: PUSH
6965: LD_VAR 0 2
6969: PPUSH
6970: CALL_OW 274
6974: PPUSH
6975: LD_INT 1
6977: PPUSH
6978: CALL_OW 275
6982: PLUS
6983: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6984: LD_ADDR_VAR 0 9
6988: PUSH
6989: LD_VAR 0 9
6993: PUSH
6994: LD_VAR 0 2
6998: PPUSH
6999: CALL_OW 274
7003: PPUSH
7004: LD_INT 2
7006: PPUSH
7007: CALL_OW 275
7011: PLUS
7012: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7013: LD_ADDR_VAR 0 10
7017: PUSH
7018: LD_VAR 0 10
7022: PUSH
7023: LD_VAR 0 2
7027: PPUSH
7028: CALL_OW 274
7032: PPUSH
7033: LD_INT 3
7035: PPUSH
7036: CALL_OW 275
7040: PLUS
7041: ST_TO_ADDR
// end ;
7042: GO 6952
7044: POP
7045: POP
// PrepareKurt ;
7046: CALL 4290 0 0
// if not Kurt then
7050: LD_EXP 24
7054: NOT
7055: IFFALSE 7059
// exit ;
7057: GO 9102
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7059: LD_EXP 25
7063: PPUSH
7064: LD_INT 144
7066: PPUSH
7067: LD_INT 111
7069: PPUSH
7070: CALL_OW 111
// wait ( 0 0$2 ) ;
7074: LD_INT 70
7076: PPUSH
7077: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7081: LD_INT 167
7083: PPUSH
7084: LD_INT 121
7086: PPUSH
7087: LD_INT 1
7089: PPUSH
7090: LD_INT 10
7092: NEG
7093: PPUSH
7094: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7098: LD_EXP 24
7102: PPUSH
7103: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7107: LD_EXP 24
7111: PPUSH
7112: CALL_OW 87
// wait ( 0 0$1 ) ;
7116: LD_INT 35
7118: PPUSH
7119: CALL_OW 67
// DialogueOn ;
7123: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7127: LD_INT 22
7129: PUSH
7130: LD_INT 1
7132: PUSH
7133: EMPTY
7134: LIST
7135: LIST
7136: PUSH
7137: LD_INT 26
7139: PUSH
7140: LD_INT 1
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: PUSH
7147: LD_INT 2
7149: PUSH
7150: LD_INT 25
7152: PUSH
7153: LD_INT 1
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 25
7162: PUSH
7163: LD_INT 2
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 25
7172: PUSH
7173: LD_INT 3
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 25
7182: PUSH
7183: LD_INT 4
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 25
7192: PUSH
7193: LD_INT 5
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 25
7202: PUSH
7203: LD_INT 8
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: LIST
7215: LIST
7216: LIST
7217: LIST
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: LIST
7223: PPUSH
7224: CALL_OW 69
7228: PPUSH
7229: LD_STRING D3-Sol1-1
7231: PPUSH
7232: LD_STRING 
7234: PPUSH
7235: CALL 12175 0 3
// if KurtStatus then
7239: LD_EXP 26
7243: IFFALSE 7343
// begin Say ( Kurt , D3-Kurt-1 ) ;
7245: LD_EXP 24
7249: PPUSH
7250: LD_STRING D3-Kurt-1
7252: PPUSH
7253: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7257: LD_EXP 1
7261: PPUSH
7262: LD_STRING D3-JMM-1
7264: PPUSH
7265: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7269: LD_EXP 24
7273: PPUSH
7274: LD_STRING D3-Kurt-2
7276: PPUSH
7277: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7281: LD_EXP 1
7285: PPUSH
7286: LD_STRING D3-JMM-2
7288: PPUSH
7289: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7293: LD_EXP 24
7297: PPUSH
7298: LD_STRING D3-Kurt-4
7300: PPUSH
7301: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7305: LD_EXP 1
7309: PPUSH
7310: LD_STRING D3-JMM-4
7312: PPUSH
7313: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7317: LD_EXP 24
7321: PPUSH
7322: LD_STRING D3-Kurt-5
7324: PPUSH
7325: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7329: LD_EXP 24
7333: PPUSH
7334: LD_STRING D3-Kurt-5a
7336: PPUSH
7337: CALL_OW 88
// end else
7341: GO 7439
// begin Say ( Kurt , D3-Kurt-1 ) ;
7343: LD_EXP 24
7347: PPUSH
7348: LD_STRING D3-Kurt-1
7350: PPUSH
7351: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7355: LD_EXP 1
7359: PPUSH
7360: LD_STRING D3-JMM-1
7362: PPUSH
7363: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7367: LD_EXP 24
7371: PPUSH
7372: LD_STRING D3-Kurt-3
7374: PPUSH
7375: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7379: LD_EXP 1
7383: PPUSH
7384: LD_STRING D3-JMM-3
7386: PPUSH
7387: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7391: LD_EXP 24
7395: PPUSH
7396: LD_STRING D3-Kurt-4
7398: PPUSH
7399: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7403: LD_EXP 1
7407: PPUSH
7408: LD_STRING D3-JMM-4
7410: PPUSH
7411: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7415: LD_EXP 24
7419: PPUSH
7420: LD_STRING D3-Kurt-5
7422: PPUSH
7423: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7427: LD_EXP 24
7431: PPUSH
7432: LD_STRING D3-Kurt-5b
7434: PPUSH
7435: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7439: LD_VAR 0 8
7443: PUSH
7444: LD_INT 120
7446: PUSH
7447: LD_INT 60
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_EXP 26
7458: PUSH
7459: LD_INT 1
7461: PLUS
7462: ARRAY
7463: GREATEREQUAL
7464: PUSH
7465: LD_VAR 0 10
7469: PUSH
7470: LD_INT 120
7472: PUSH
7473: LD_INT 60
7475: PUSH
7476: EMPTY
7477: LIST
7478: LIST
7479: PUSH
7480: LD_EXP 26
7484: PUSH
7485: LD_INT 1
7487: PLUS
7488: ARRAY
7489: GREATEREQUAL
7490: AND
7491: IFFALSE 7543
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7493: LD_ADDR_VAR 0 3
7497: PUSH
7498: LD_STRING Q2
7500: PUSH
7501: LD_STRING Q2K
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_EXP 26
7512: PUSH
7513: LD_INT 1
7515: PLUS
7516: ARRAY
7517: PPUSH
7518: LD_INT 1
7520: PUSH
7521: LD_INT 2
7523: PUSH
7524: LD_INT 3
7526: PUSH
7527: LD_INT 4
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: PPUSH
7536: CALL_OW 98
7540: ST_TO_ADDR
7541: GO 7587
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7543: LD_ADDR_VAR 0 3
7547: PUSH
7548: LD_STRING Q2
7550: PUSH
7551: LD_STRING Q2K
7553: PUSH
7554: EMPTY
7555: LIST
7556: LIST
7557: PUSH
7558: LD_EXP 26
7562: PUSH
7563: LD_INT 1
7565: PLUS
7566: ARRAY
7567: PPUSH
7568: LD_INT 1
7570: PUSH
7571: LD_INT 3
7573: PUSH
7574: LD_INT 4
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: LIST
7581: PPUSH
7582: CALL_OW 98
7586: ST_TO_ADDR
// if dec1 = 1 then
7587: LD_VAR 0 3
7591: PUSH
7592: LD_INT 1
7594: EQUAL
7595: IFFALSE 7629
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7597: LD_EXP 1
7601: PPUSH
7602: LD_STRING D3Ka-JMM-1
7604: PPUSH
7605: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7609: LD_EXP 24
7613: PPUSH
7614: LD_STRING D3Ka-Kurt-1
7616: PPUSH
7617: CALL_OW 88
// warWithLegion = 1 ;
7621: LD_ADDR_EXP 30
7625: PUSH
7626: LD_INT 1
7628: ST_TO_ADDR
// end ; if dec1 = 2 then
7629: LD_VAR 0 3
7633: PUSH
7634: LD_INT 2
7636: EQUAL
7637: IFFALSE 7721
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7639: LD_EXP 1
7643: PPUSH
7644: LD_STRING D3Kb-JMM-1
7646: PPUSH
7647: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7651: LD_EXP 24
7655: PPUSH
7656: LD_STRING D3Kb-Kurt-1
7658: PPUSH
7659: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7663: LD_ADDR_VAR 0 11
7667: PUSH
7668: LD_INT 120
7670: PUSH
7671: LD_INT 60
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: PUSH
7678: LD_EXP 26
7682: PUSH
7683: LD_INT 1
7685: PLUS
7686: ARRAY
7687: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7688: LD_ADDR_VAR 0 12
7692: PUSH
7693: LD_INT 120
7695: PUSH
7696: LD_INT 60
7698: PUSH
7699: EMPTY
7700: LIST
7701: LIST
7702: PUSH
7703: LD_EXP 26
7707: PUSH
7708: LD_INT 1
7710: PLUS
7711: ARRAY
7712: ST_TO_ADDR
// payForNeutral := true ;
7713: LD_ADDR_VAR 0 13
7717: PUSH
7718: LD_INT 1
7720: ST_TO_ADDR
// end ; if dec1 = 3 then
7721: LD_VAR 0 3
7725: PUSH
7726: LD_INT 3
7728: EQUAL
7729: IFFALSE 7964
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7731: LD_EXP 1
7735: PPUSH
7736: LD_STRING D3Kc1-JMM-1
7738: PPUSH
7739: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7743: LD_EXP 24
7747: PPUSH
7748: LD_STRING D3Kc1-Kurt-1
7750: PPUSH
7751: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7755: LD_EXP 1
7759: PPUSH
7760: LD_STRING D3Kc1-JMM-2
7762: PPUSH
7763: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7767: LD_EXP 24
7771: PPUSH
7772: LD_STRING D3Kc1-Kurt-2
7774: PPUSH
7775: CALL_OW 88
// askSiberite = 1 ;
7779: LD_ADDR_EXP 32
7783: PUSH
7784: LD_INT 1
7786: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7787: LD_ADDR_VAR 0 4
7791: PUSH
7792: LD_STRING Q2b
7794: PPUSH
7795: LD_INT 1
7797: PUSH
7798: LD_INT 2
7800: PUSH
7801: LD_INT 3
7803: PUSH
7804: EMPTY
7805: LIST
7806: LIST
7807: LIST
7808: PPUSH
7809: CALL_OW 98
7813: ST_TO_ADDR
// if dec2 = 1 then
7814: LD_VAR 0 4
7818: PUSH
7819: LD_INT 1
7821: EQUAL
7822: IFFALSE 7856
// begin Say ( JMM , D4a-JMM-1 ) ;
7824: LD_EXP 1
7828: PPUSH
7829: LD_STRING D4a-JMM-1
7831: PPUSH
7832: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7836: LD_EXP 24
7840: PPUSH
7841: LD_STRING D4b-Kurt-1
7843: PPUSH
7844: CALL_OW 88
// warWithLegion = 1 ;
7848: LD_ADDR_EXP 30
7852: PUSH
7853: LD_INT 1
7855: ST_TO_ADDR
// end ; if dec2 = 2 then
7856: LD_VAR 0 4
7860: PUSH
7861: LD_INT 2
7863: EQUAL
7864: IFFALSE 7898
// begin Say ( JMM , D4b-JMM-1 ) ;
7866: LD_EXP 1
7870: PPUSH
7871: LD_STRING D4b-JMM-1
7873: PPUSH
7874: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7878: LD_EXP 24
7882: PPUSH
7883: LD_STRING D4b-Kurt-1
7885: PPUSH
7886: CALL_OW 88
// warWithLegion = 1 ;
7890: LD_ADDR_EXP 30
7894: PUSH
7895: LD_INT 1
7897: ST_TO_ADDR
// end ; if dec2 = 3 then
7898: LD_VAR 0 4
7902: PUSH
7903: LD_INT 3
7905: EQUAL
7906: IFFALSE 7964
// begin Say ( JMM , D4c-JMM-1 ) ;
7908: LD_EXP 1
7912: PPUSH
7913: LD_STRING D4c-JMM-1
7915: PPUSH
7916: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7920: LD_EXP 24
7924: PPUSH
7925: LD_STRING D4c-Kurt-1
7927: PPUSH
7928: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7932: LD_EXP 1
7936: PPUSH
7937: LD_STRING D4c-JMM-2
7939: PPUSH
7940: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7944: LD_EXP 24
7948: PPUSH
7949: LD_STRING D4c-Kurt-2
7951: PPUSH
7952: CALL_OW 88
// fakeInfo = 1 ;
7956: LD_ADDR_EXP 31
7960: PUSH
7961: LD_INT 1
7963: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7964: LD_VAR 0 3
7968: PUSH
7969: LD_INT 4
7971: EQUAL
7972: IFFALSE 9010
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7974: LD_EXP 1
7978: PPUSH
7979: LD_STRING D3Kd-JMM-1
7981: PPUSH
7982: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
7986: LD_VAR 0 8
7990: PUSH
7991: LD_INT 200
7993: PUSH
7994: LD_INT 120
7996: PUSH
7997: EMPTY
7998: LIST
7999: LIST
8000: PUSH
8001: LD_EXP 26
8005: PUSH
8006: LD_INT 1
8008: PLUS
8009: ARRAY
8010: GREATEREQUAL
8011: PUSH
8012: LD_VAR 0 10
8016: PUSH
8017: LD_INT 200
8019: PUSH
8020: LD_INT 120
8022: PUSH
8023: EMPTY
8024: LIST
8025: LIST
8026: PUSH
8027: LD_EXP 26
8031: PUSH
8032: LD_INT 1
8034: PLUS
8035: ARRAY
8036: GREATEREQUAL
8037: AND
8038: IFFALSE 8090
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8040: LD_ADDR_VAR 0 4
8044: PUSH
8045: LD_STRING Q2a
8047: PUSH
8048: LD_STRING Q2aK
8050: PUSH
8051: EMPTY
8052: LIST
8053: LIST
8054: PUSH
8055: LD_EXP 26
8059: PUSH
8060: LD_INT 1
8062: PLUS
8063: ARRAY
8064: PPUSH
8065: LD_INT 1
8067: PUSH
8068: LD_INT 2
8070: PUSH
8071: LD_INT 3
8073: PUSH
8074: LD_INT 4
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: PPUSH
8083: CALL_OW 98
8087: ST_TO_ADDR
8088: GO 8230
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8090: LD_VAR 0 8
8094: PUSH
8095: LD_INT 120
8097: PUSH
8098: LD_INT 60
8100: PUSH
8101: EMPTY
8102: LIST
8103: LIST
8104: PUSH
8105: LD_EXP 26
8109: PUSH
8110: LD_INT 1
8112: PLUS
8113: ARRAY
8114: GREATEREQUAL
8115: PUSH
8116: LD_VAR 0 10
8120: PUSH
8121: LD_INT 120
8123: PUSH
8124: LD_INT 60
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: PUSH
8131: LD_EXP 26
8135: PUSH
8136: LD_INT 1
8138: PLUS
8139: ARRAY
8140: GREATEREQUAL
8141: AND
8142: IFFALSE 8190
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8144: LD_ADDR_VAR 0 4
8148: PUSH
8149: LD_STRING Q2a
8151: PUSH
8152: LD_STRING Q2aK
8154: PUSH
8155: EMPTY
8156: LIST
8157: LIST
8158: PUSH
8159: LD_EXP 26
8163: PUSH
8164: LD_INT 1
8166: PLUS
8167: ARRAY
8168: PPUSH
8169: LD_INT 1
8171: PUSH
8172: LD_INT 2
8174: PUSH
8175: LD_INT 4
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: LIST
8182: PPUSH
8183: CALL_OW 98
8187: ST_TO_ADDR
8188: GO 8230
// begin dec2 := 0 ;
8190: LD_ADDR_VAR 0 4
8194: PUSH
8195: LD_INT 0
8197: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8198: LD_EXP 1
8202: PPUSH
8203: LD_STRING D3Kc1-JMM-1
8205: PPUSH
8206: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8210: LD_EXP 24
8214: PPUSH
8215: LD_STRING D3Kc2-Kurt-1
8217: PPUSH
8218: CALL_OW 88
// warWithLegion := 1 ;
8222: LD_ADDR_EXP 30
8226: PUSH
8227: LD_INT 1
8229: ST_TO_ADDR
// end ; if dec2 = 1 then
8230: LD_VAR 0 4
8234: PUSH
8235: LD_INT 1
8237: EQUAL
8238: IFFALSE 8272
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8240: LD_EXP 1
8244: PPUSH
8245: LD_STRING D5Ka-JMM-1
8247: PPUSH
8248: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8252: LD_EXP 24
8256: PPUSH
8257: LD_STRING D5Ka-Kurt-1
8259: PPUSH
8260: CALL_OW 88
// warWithLegion = 1 ;
8264: LD_ADDR_EXP 30
8268: PUSH
8269: LD_INT 1
8271: ST_TO_ADDR
// end ; if dec2 = 2 then
8272: LD_VAR 0 4
8276: PUSH
8277: LD_INT 2
8279: EQUAL
8280: IFFALSE 8364
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8282: LD_EXP 1
8286: PPUSH
8287: LD_STRING D3Kb-JMM-1
8289: PPUSH
8290: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8294: LD_EXP 24
8298: PPUSH
8299: LD_STRING D3Kb-Kurt-1
8301: PPUSH
8302: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8306: LD_ADDR_VAR 0 11
8310: PUSH
8311: LD_INT 120
8313: PUSH
8314: LD_INT 60
8316: PUSH
8317: EMPTY
8318: LIST
8319: LIST
8320: PUSH
8321: LD_EXP 26
8325: PUSH
8326: LD_INT 1
8328: PLUS
8329: ARRAY
8330: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8331: LD_ADDR_VAR 0 12
8335: PUSH
8336: LD_INT 120
8338: PUSH
8339: LD_INT 60
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: PUSH
8346: LD_EXP 26
8350: PUSH
8351: LD_INT 1
8353: PLUS
8354: ARRAY
8355: ST_TO_ADDR
// payForNeutral := true ;
8356: LD_ADDR_VAR 0 13
8360: PUSH
8361: LD_INT 1
8363: ST_TO_ADDR
// end ; if dec2 = 3 then
8364: LD_VAR 0 4
8368: PUSH
8369: LD_INT 3
8371: EQUAL
8372: IFFALSE 8456
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8374: LD_EXP 1
8378: PPUSH
8379: LD_STRING D3Ke-JMM-1
8381: PPUSH
8382: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8386: LD_EXP 24
8390: PPUSH
8391: LD_STRING D3Ke-Kurt-1
8393: PPUSH
8394: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8398: LD_ADDR_VAR 0 11
8402: PUSH
8403: LD_INT 200
8405: PUSH
8406: LD_INT 120
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: LD_EXP 26
8417: PUSH
8418: LD_INT 1
8420: PLUS
8421: ARRAY
8422: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8423: LD_ADDR_VAR 0 12
8427: PUSH
8428: LD_INT 200
8430: PUSH
8431: LD_INT 120
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: LD_EXP 26
8442: PUSH
8443: LD_INT 1
8445: PLUS
8446: ARRAY
8447: ST_TO_ADDR
// payForHelp := true ;
8448: LD_ADDR_VAR 0 14
8452: PUSH
8453: LD_INT 1
8455: ST_TO_ADDR
// end ; if dec2 = 4 then
8456: LD_VAR 0 4
8460: PUSH
8461: LD_INT 4
8463: EQUAL
8464: IFFALSE 8699
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8466: LD_EXP 1
8470: PPUSH
8471: LD_STRING D3Kc1-JMM-1
8473: PPUSH
8474: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8478: LD_EXP 24
8482: PPUSH
8483: LD_STRING D3Kc1-Kurt-1
8485: PPUSH
8486: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8490: LD_EXP 1
8494: PPUSH
8495: LD_STRING D3Kc1-JMM-2
8497: PPUSH
8498: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8502: LD_EXP 24
8506: PPUSH
8507: LD_STRING D3Kc1-Kurt-2
8509: PPUSH
8510: CALL_OW 88
// askSiberite = 1 ;
8514: LD_ADDR_EXP 32
8518: PUSH
8519: LD_INT 1
8521: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8522: LD_ADDR_VAR 0 4
8526: PUSH
8527: LD_STRING Q2b
8529: PPUSH
8530: LD_INT 1
8532: PUSH
8533: LD_INT 2
8535: PUSH
8536: LD_INT 3
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: LIST
8543: PPUSH
8544: CALL_OW 98
8548: ST_TO_ADDR
// if dec2 = 1 then
8549: LD_VAR 0 4
8553: PUSH
8554: LD_INT 1
8556: EQUAL
8557: IFFALSE 8591
// begin Say ( JMM , D4a-JMM-1 ) ;
8559: LD_EXP 1
8563: PPUSH
8564: LD_STRING D4a-JMM-1
8566: PPUSH
8567: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8571: LD_EXP 24
8575: PPUSH
8576: LD_STRING D4b-Kurt-1
8578: PPUSH
8579: CALL_OW 88
// warWithLegion = 1 ;
8583: LD_ADDR_EXP 30
8587: PUSH
8588: LD_INT 1
8590: ST_TO_ADDR
// end ; if dec2 = 2 then
8591: LD_VAR 0 4
8595: PUSH
8596: LD_INT 2
8598: EQUAL
8599: IFFALSE 8633
// begin Say ( JMM , D4b-JMM-1 ) ;
8601: LD_EXP 1
8605: PPUSH
8606: LD_STRING D4b-JMM-1
8608: PPUSH
8609: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8613: LD_EXP 24
8617: PPUSH
8618: LD_STRING D4b-Kurt-1
8620: PPUSH
8621: CALL_OW 88
// warWithLegion = 1 ;
8625: LD_ADDR_EXP 30
8629: PUSH
8630: LD_INT 1
8632: ST_TO_ADDR
// end ; if dec2 = 3 then
8633: LD_VAR 0 4
8637: PUSH
8638: LD_INT 3
8640: EQUAL
8641: IFFALSE 8699
// begin Say ( JMM , D4c-JMM-1 ) ;
8643: LD_EXP 1
8647: PPUSH
8648: LD_STRING D4c-JMM-1
8650: PPUSH
8651: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8655: LD_EXP 24
8659: PPUSH
8660: LD_STRING D4c-Kurt-1
8662: PPUSH
8663: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8667: LD_EXP 1
8671: PPUSH
8672: LD_STRING D4c-JMM-2
8674: PPUSH
8675: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8679: LD_EXP 24
8683: PPUSH
8684: LD_STRING D4c-Kurt-2
8686: PPUSH
8687: CALL_OW 88
// fakeInfo = 1 ;
8691: LD_ADDR_EXP 31
8695: PUSH
8696: LD_INT 1
8698: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8699: LD_VAR 0 13
8703: PUSH
8704: LD_VAR 0 14
8708: OR
8709: IFFALSE 9010
// begin for i in tmp do
8711: LD_ADDR_VAR 0 2
8715: PUSH
8716: LD_VAR 0 5
8720: PUSH
8721: FOR_IN
8722: IFFALSE 9008
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8724: LD_ADDR_VAR 0 6
8728: PUSH
8729: LD_VAR 0 2
8733: PPUSH
8734: CALL_OW 274
8738: PPUSH
8739: LD_INT 1
8741: PPUSH
8742: CALL_OW 275
8746: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8747: LD_ADDR_VAR 0 7
8751: PUSH
8752: LD_VAR 0 2
8756: PPUSH
8757: CALL_OW 274
8761: PPUSH
8762: LD_INT 3
8764: PPUSH
8765: CALL_OW 275
8769: ST_TO_ADDR
// if cr then
8770: LD_VAR 0 11
8774: IFFALSE 8888
// begin if tmp2 and tmp2 < cr then
8776: LD_VAR 0 6
8780: PUSH
8781: LD_VAR 0 6
8785: PUSH
8786: LD_VAR 0 11
8790: LESS
8791: AND
8792: IFFALSE 8840
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8794: LD_VAR 0 2
8798: PPUSH
8799: CALL_OW 274
8803: PPUSH
8804: LD_INT 1
8806: PPUSH
8807: LD_VAR 0 11
8811: PUSH
8812: LD_VAR 0 6
8816: MINUS
8817: PPUSH
8818: CALL_OW 277
// cr := cr - tmp2 ;
8822: LD_ADDR_VAR 0 11
8826: PUSH
8827: LD_VAR 0 11
8831: PUSH
8832: LD_VAR 0 6
8836: MINUS
8837: ST_TO_ADDR
// end else
8838: GO 8888
// if tmp2 > cr then
8840: LD_VAR 0 6
8844: PUSH
8845: LD_VAR 0 11
8849: GREATER
8850: IFFALSE 8888
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8852: LD_VAR 0 2
8856: PPUSH
8857: CALL_OW 274
8861: PPUSH
8862: LD_INT 1
8864: PPUSH
8865: LD_VAR 0 6
8869: PUSH
8870: LD_VAR 0 11
8874: MINUS
8875: PPUSH
8876: CALL_OW 277
// cr := 0 ;
8880: LD_ADDR_VAR 0 11
8884: PUSH
8885: LD_INT 0
8887: ST_TO_ADDR
// end ; end ; if sb then
8888: LD_VAR 0 12
8892: IFFALSE 9006
// begin if tmp3 and tmp3 < sb then
8894: LD_VAR 0 7
8898: PUSH
8899: LD_VAR 0 7
8903: PUSH
8904: LD_VAR 0 12
8908: LESS
8909: AND
8910: IFFALSE 8958
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8912: LD_VAR 0 2
8916: PPUSH
8917: CALL_OW 274
8921: PPUSH
8922: LD_INT 3
8924: PPUSH
8925: LD_VAR 0 12
8929: PUSH
8930: LD_VAR 0 7
8934: MINUS
8935: PPUSH
8936: CALL_OW 277
// sb := sb - tmp3 ;
8940: LD_ADDR_VAR 0 12
8944: PUSH
8945: LD_VAR 0 12
8949: PUSH
8950: LD_VAR 0 7
8954: MINUS
8955: ST_TO_ADDR
// end else
8956: GO 9006
// if tmp3 > sb then
8958: LD_VAR 0 7
8962: PUSH
8963: LD_VAR 0 12
8967: GREATER
8968: IFFALSE 9006
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
8970: LD_VAR 0 2
8974: PPUSH
8975: CALL_OW 274
8979: PPUSH
8980: LD_INT 3
8982: PPUSH
8983: LD_VAR 0 7
8987: PUSH
8988: LD_VAR 0 12
8992: MINUS
8993: PPUSH
8994: CALL_OW 277
// sb := 0 ;
8998: LD_ADDR_VAR 0 12
9002: PUSH
9003: LD_INT 0
9005: ST_TO_ADDR
// end ; end ; end ;
9006: GO 8721
9008: POP
9009: POP
// end ; end ; DialogueOff ;
9010: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9014: LD_INT 167
9016: PPUSH
9017: LD_INT 121
9019: PPUSH
9020: LD_INT 1
9022: PPUSH
9023: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9027: LD_EXP 24
9031: PPUSH
9032: LD_EXP 25
9036: PPUSH
9037: CALL_OW 120
// wait ( 0 0$1 ) ;
9041: LD_INT 35
9043: PPUSH
9044: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9048: LD_EXP 25
9052: PPUSH
9053: LD_INT 4
9055: PPUSH
9056: CALL_OW 113
// wait ( 0 0$3 ) ;
9060: LD_INT 105
9062: PPUSH
9063: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9067: LD_EXP 24
9071: PPUSH
9072: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9076: LD_EXP 25
9080: PPUSH
9081: CALL_OW 64
// wait ( 0 0$3 ) ;
9085: LD_INT 105
9087: PPUSH
9088: CALL_OW 67
// if payForHelp then
9092: LD_VAR 0 14
9096: IFFALSE 9102
// PrepareLegionForPlayer ;
9098: CALL 4490 0 0
// end ;
9102: LD_VAR 0 1
9106: RET
// every 0 0$10 trigger warWithLegion = 1 do
9107: LD_EXP 30
9111: PUSH
9112: LD_INT 1
9114: EQUAL
9115: IFFALSE 9124
9117: GO 9119
9119: DISABLE
// PrepareAttackLegion ;
9120: CALL 5154 0 0
9124: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9125: LD_EXP 15
9129: PPUSH
9130: CALL_OW 305
9134: PUSH
9135: LD_EXP 15
9139: PPUSH
9140: LD_INT 1
9142: PPUSH
9143: CALL_OW 289
9147: NOT
9148: AND
9149: PUSH
9150: LD_EXP 15
9154: PPUSH
9155: LD_INT 2
9157: PPUSH
9158: CALL_OW 289
9162: NOT
9163: AND
9164: PUSH
9165: LD_EXP 15
9169: PPUSH
9170: LD_INT 3
9172: PPUSH
9173: CALL_OW 289
9177: NOT
9178: AND
9179: IFFALSE 9196
9181: GO 9183
9183: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9184: LD_EXP 15
9188: PPUSH
9189: LD_INT 4
9191: PPUSH
9192: CALL_OW 235
9196: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9197: LD_EXP 16
9201: PPUSH
9202: CALL_OW 305
9206: PUSH
9207: LD_EXP 16
9211: PPUSH
9212: LD_INT 1
9214: PPUSH
9215: CALL_OW 289
9219: NOT
9220: AND
9221: PUSH
9222: LD_EXP 16
9226: PPUSH
9227: LD_INT 2
9229: PPUSH
9230: CALL_OW 289
9234: NOT
9235: AND
9236: PUSH
9237: LD_EXP 16
9241: PPUSH
9242: LD_INT 3
9244: PPUSH
9245: CALL_OW 289
9249: NOT
9250: AND
9251: IFFALSE 9268
9253: GO 9255
9255: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9256: LD_EXP 16
9260: PPUSH
9261: LD_INT 4
9263: PPUSH
9264: CALL_OW 235
9268: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9269: LD_EXP 17
9273: PPUSH
9274: CALL_OW 305
9278: PUSH
9279: LD_EXP 17
9283: PPUSH
9284: LD_INT 1
9286: PPUSH
9287: CALL_OW 289
9291: NOT
9292: AND
9293: PUSH
9294: LD_EXP 17
9298: PPUSH
9299: LD_INT 2
9301: PPUSH
9302: CALL_OW 289
9306: NOT
9307: AND
9308: PUSH
9309: LD_EXP 17
9313: PPUSH
9314: LD_INT 3
9316: PPUSH
9317: CALL_OW 289
9321: NOT
9322: AND
9323: IFFALSE 9340
9325: GO 9327
9327: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9328: LD_EXP 17
9332: PPUSH
9333: LD_INT 4
9335: PPUSH
9336: CALL_OW 235
9340: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9341: LD_EXP 18
9345: PPUSH
9346: CALL_OW 305
9350: PUSH
9351: LD_EXP 18
9355: PPUSH
9356: LD_INT 1
9358: PPUSH
9359: CALL_OW 289
9363: NOT
9364: AND
9365: PUSH
9366: LD_EXP 18
9370: PPUSH
9371: LD_INT 2
9373: PPUSH
9374: CALL_OW 289
9378: NOT
9379: AND
9380: PUSH
9381: LD_EXP 18
9385: PPUSH
9386: LD_INT 3
9388: PPUSH
9389: CALL_OW 289
9393: NOT
9394: AND
9395: IFFALSE 9412
9397: GO 9399
9399: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9400: LD_EXP 18
9404: PPUSH
9405: LD_INT 4
9407: PPUSH
9408: CALL_OW 235
9412: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9413: LD_EXP 19
9417: PPUSH
9418: CALL_OW 305
9422: PUSH
9423: LD_EXP 19
9427: PPUSH
9428: LD_INT 1
9430: PPUSH
9431: CALL_OW 289
9435: NOT
9436: AND
9437: PUSH
9438: LD_EXP 19
9442: PPUSH
9443: LD_INT 2
9445: PPUSH
9446: CALL_OW 289
9450: NOT
9451: AND
9452: PUSH
9453: LD_EXP 19
9457: PPUSH
9458: LD_INT 3
9460: PPUSH
9461: CALL_OW 289
9465: NOT
9466: AND
9467: PUSH
9468: LD_EXP 19
9472: PPUSH
9473: LD_INT 2
9475: PPUSH
9476: CALL_OW 289
9480: NOT
9481: AND
9482: IFFALSE 9499
9484: GO 9486
9486: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9487: LD_EXP 19
9491: PPUSH
9492: LD_INT 4
9494: PPUSH
9495: CALL_OW 235
9499: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9500: LD_EXP 20
9504: PPUSH
9505: CALL_OW 305
9509: PUSH
9510: LD_EXP 20
9514: PPUSH
9515: LD_INT 1
9517: PPUSH
9518: CALL_OW 289
9522: NOT
9523: AND
9524: PUSH
9525: LD_EXP 20
9529: PPUSH
9530: LD_INT 2
9532: PPUSH
9533: CALL_OW 289
9537: NOT
9538: AND
9539: PUSH
9540: LD_EXP 20
9544: PPUSH
9545: LD_INT 3
9547: PPUSH
9548: CALL_OW 289
9552: NOT
9553: AND
9554: IFFALSE 9571
9556: GO 9558
9558: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9559: LD_EXP 20
9563: PPUSH
9564: LD_INT 4
9566: PPUSH
9567: CALL_OW 235
9571: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9572: LD_EXP 21
9576: PPUSH
9577: CALL_OW 305
9581: PUSH
9582: LD_EXP 21
9586: PPUSH
9587: LD_INT 1
9589: PPUSH
9590: CALL_OW 289
9594: NOT
9595: AND
9596: PUSH
9597: LD_EXP 21
9601: PPUSH
9602: LD_INT 2
9604: PPUSH
9605: CALL_OW 289
9609: NOT
9610: AND
9611: PUSH
9612: LD_EXP 21
9616: PPUSH
9617: LD_INT 3
9619: PPUSH
9620: CALL_OW 289
9624: NOT
9625: AND
9626: IFFALSE 9643
9628: GO 9630
9630: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9631: LD_EXP 21
9635: PPUSH
9636: LD_INT 4
9638: PPUSH
9639: CALL_OW 235
9643: END
// every 0 0$1 do var i ;
9644: GO 9646
9646: DISABLE
9647: LD_INT 0
9649: PPUSH
// begin enable ;
9650: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9651: LD_ADDR_VAR 0 1
9655: PUSH
9656: LD_INT 22
9658: PUSH
9659: LD_INT 4
9661: PUSH
9662: EMPTY
9663: LIST
9664: LIST
9665: PPUSH
9666: CALL_OW 69
9670: PUSH
9671: FOR_IN
9672: IFFALSE 9711
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9674: LD_VAR 0 1
9678: PPUSH
9679: LD_INT 4
9681: PPUSH
9682: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9686: LD_VAR 0 1
9690: PPUSH
9691: LD_INT 4
9693: PPUSH
9694: CALL_OW 308
9698: IFFALSE 9709
// RemoveUnit ( i ) ;
9700: LD_VAR 0 1
9704: PPUSH
9705: CALL_OW 64
// end ;
9709: GO 9671
9711: POP
9712: POP
// end ;
9713: PPOPN 1
9715: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9716: LD_EXP 27
9720: PUSH
9721: LD_INT 1
9723: EQUAL
9724: IFFALSE 10163
9726: GO 9728
9728: DISABLE
9729: LD_INT 0
9731: PPUSH
9732: PPUSH
9733: PPUSH
// begin enable ;
9734: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9735: LD_ADDR_VAR 0 2
9739: PUSH
9740: LD_INT 12
9742: PPUSH
9743: LD_INT 22
9745: PUSH
9746: LD_INT 3
9748: PUSH
9749: EMPTY
9750: LIST
9751: LIST
9752: PUSH
9753: LD_INT 21
9755: PUSH
9756: LD_INT 2
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: PPUSH
9767: CALL_OW 70
9771: ST_TO_ADDR
// for i in enemyVehs do
9772: LD_ADDR_VAR 0 1
9776: PUSH
9777: LD_VAR 0 2
9781: PUSH
9782: FOR_IN
9783: IFFALSE 10161
// begin if See ( 1 , i ) then
9785: LD_INT 1
9787: PPUSH
9788: LD_VAR 0 1
9792: PPUSH
9793: CALL_OW 292
9797: IFFALSE 10159
// begin disable ;
9799: DISABLE
// DialogueOn ;
9800: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9804: LD_VAR 0 1
9808: PPUSH
9809: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9813: LD_INT 22
9815: PUSH
9816: LD_INT 1
9818: PUSH
9819: EMPTY
9820: LIST
9821: LIST
9822: PUSH
9823: LD_INT 26
9825: PUSH
9826: LD_INT 1
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PUSH
9833: LD_INT 2
9835: PUSH
9836: LD_INT 25
9838: PUSH
9839: LD_INT 1
9841: PUSH
9842: EMPTY
9843: LIST
9844: LIST
9845: PUSH
9846: LD_INT 25
9848: PUSH
9849: LD_INT 2
9851: PUSH
9852: EMPTY
9853: LIST
9854: LIST
9855: PUSH
9856: LD_INT 25
9858: PUSH
9859: LD_INT 3
9861: PUSH
9862: EMPTY
9863: LIST
9864: LIST
9865: PUSH
9866: LD_INT 25
9868: PUSH
9869: LD_INT 4
9871: PUSH
9872: EMPTY
9873: LIST
9874: LIST
9875: PUSH
9876: LD_INT 25
9878: PUSH
9879: LD_INT 5
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 25
9888: PUSH
9889: LD_INT 8
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: PUSH
9905: EMPTY
9906: LIST
9907: LIST
9908: LIST
9909: PPUSH
9910: CALL_OW 69
9914: PPUSH
9915: LD_STRING DT1-Sol1-1
9917: PPUSH
9918: LD_STRING DT1-FSol1-1
9920: PPUSH
9921: CALL 12175 0 3
// dec = ShowQuery2 ;
9925: LD_ADDR_VAR 0 3
9929: PUSH
9930: CALL 12718 0 0
9934: ST_TO_ADDR
// if dec = 1 then
9935: LD_VAR 0 3
9939: PUSH
9940: LD_INT 1
9942: EQUAL
9943: IFFALSE 10049
// begin Say ( JMM , D2-JMM-1 ) ;
9945: LD_EXP 1
9949: PPUSH
9950: LD_STRING D2-JMM-1
9952: PPUSH
9953: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9957: LD_EXP 22
9961: PPUSH
9962: LD_STRING D2-Pow-1
9964: PPUSH
9965: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9969: LD_EXP 1
9973: PPUSH
9974: LD_STRING D2a-JMM-1
9976: PPUSH
9977: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9981: LD_EXP 22
9985: PPUSH
9986: LD_STRING D2a-Pow-1
9988: PPUSH
9989: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9993: LD_EXP 1
9997: PPUSH
9998: LD_STRING D2a-JMM-2
10000: PPUSH
10001: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10005: LD_EXP 22
10009: PPUSH
10010: LD_STRING D2a-Pow-2
10012: PPUSH
10013: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10017: LD_EXP 1
10021: PPUSH
10022: LD_STRING D2a-JMM-3
10024: PPUSH
10025: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10029: LD_EXP 22
10033: PPUSH
10034: LD_STRING D2a-Pow-3
10036: PPUSH
10037: CALL_OW 94
// secondPass = 2 ;
10041: LD_ADDR_EXP 27
10045: PUSH
10046: LD_INT 2
10048: ST_TO_ADDR
// end ; if dec = 2 then
10049: LD_VAR 0 3
10053: PUSH
10054: LD_INT 2
10056: EQUAL
10057: IFFALSE 10151
// begin Say ( JMM , D2-JMM-1 ) ;
10059: LD_EXP 1
10063: PPUSH
10064: LD_STRING D2-JMM-1
10066: PPUSH
10067: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10071: LD_EXP 22
10075: PPUSH
10076: LD_STRING D2-Pow-1
10078: PPUSH
10079: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10083: LD_EXP 1
10087: PPUSH
10088: LD_STRING D2b-JMM-1
10090: PPUSH
10091: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10095: LD_EXP 22
10099: PPUSH
10100: LD_STRING D2b-Pow-1
10102: PPUSH
10103: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10107: LD_EXP 1
10111: PPUSH
10112: LD_STRING D2c-JMM-1
10114: PPUSH
10115: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10119: LD_EXP 22
10123: PPUSH
10124: LD_STRING D2c-Pow-1
10126: PPUSH
10127: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10131: LD_EXP 1
10135: PPUSH
10136: LD_STRING D2c-JMM-2
10138: PPUSH
10139: CALL_OW 88
// secondPass = 2 ;
10143: LD_ADDR_EXP 27
10147: PUSH
10148: LD_INT 2
10150: ST_TO_ADDR
// end ; DialogueOff ;
10151: CALL_OW 7
// exit ;
10155: POP
10156: POP
10157: GO 10163
// end ; end ;
10159: GO 9782
10161: POP
10162: POP
// end ;
10163: PPOPN 3
10165: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10166: LD_EXP 28
10170: PUSH
10171: LD_INT 1
10173: EQUAL
10174: IFFALSE 10407
10176: GO 10178
10178: DISABLE
10179: LD_INT 0
10181: PPUSH
10182: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10183: LD_ADDR_VAR 0 2
10187: PUSH
10188: LD_INT 11
10190: PPUSH
10191: LD_INT 22
10193: PUSH
10194: LD_INT 3
10196: PUSH
10197: EMPTY
10198: LIST
10199: LIST
10200: PUSH
10201: LD_INT 24
10203: PUSH
10204: LD_INT 250
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: PPUSH
10215: CALL_OW 70
10219: ST_TO_ADDR
// enable ;
10220: ENABLE
// for i in vehicles do
10221: LD_ADDR_VAR 0 1
10225: PUSH
10226: LD_VAR 0 2
10230: PUSH
10231: FOR_IN
10232: IFFALSE 10405
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
10234: LD_INT 1
10236: PPUSH
10237: LD_VAR 0 1
10241: PPUSH
10242: CALL_OW 292
10246: PUSH
10247: LD_EXP 28
10251: PUSH
10252: LD_INT 1
10254: EQUAL
10255: AND
10256: PUSH
10257: LD_EXP 29
10261: PUSH
10262: LD_INT 4
10264: LESSEQUAL
10265: AND
10266: IFFALSE 10403
// begin disable ;
10268: DISABLE
// DialogueOn ;
10269: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10273: LD_INT 22
10275: PUSH
10276: LD_INT 1
10278: PUSH
10279: EMPTY
10280: LIST
10281: LIST
10282: PUSH
10283: LD_INT 26
10285: PUSH
10286: LD_INT 1
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 2
10295: PUSH
10296: LD_INT 25
10298: PUSH
10299: LD_INT 1
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 25
10308: PUSH
10309: LD_INT 2
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PUSH
10316: LD_INT 25
10318: PUSH
10319: LD_INT 3
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 25
10328: PUSH
10329: LD_INT 4
10331: PUSH
10332: EMPTY
10333: LIST
10334: LIST
10335: PUSH
10336: LD_INT 25
10338: PUSH
10339: LD_INT 5
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: PUSH
10346: LD_INT 25
10348: PUSH
10349: LD_INT 8
10351: PUSH
10352: EMPTY
10353: LIST
10354: LIST
10355: PUSH
10356: EMPTY
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: PPUSH
10370: CALL_OW 69
10374: PPUSH
10375: LD_STRING DT1-Sol1-1
10377: PPUSH
10378: LD_STRING DT1-FSol1-1
10380: PPUSH
10381: CALL 12175 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10385: LD_EXP 1
10389: PPUSH
10390: LD_STRING DT1-JMM-1
10392: PPUSH
10393: CALL_OW 88
// DialogueOff ;
10397: CALL_OW 7
// break ;
10401: GO 10405
// end ; end ;
10403: GO 10231
10405: POP
10406: POP
// end ;
10407: PPOPN 2
10409: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10410: LD_EXP 28
10414: PUSH
10415: LD_INT 1
10417: EQUAL
10418: PUSH
10419: LD_INT 11
10421: PPUSH
10422: LD_INT 22
10424: PUSH
10425: LD_INT 3
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 24
10434: PUSH
10435: LD_INT 251
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 2
10444: PUSH
10445: LD_INT 21
10447: PUSH
10448: LD_INT 2
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: PUSH
10455: LD_INT 21
10457: PUSH
10458: LD_INT 1
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: LIST
10474: PPUSH
10475: CALL_OW 70
10479: PUSH
10480: LD_INT 0
10482: EQUAL
10483: AND
10484: PUSH
10485: LD_EXP 29
10489: AND
10490: IFFALSE 10647
10492: GO 10494
10494: DISABLE
// begin vehicleTeleported = 2 ;
10495: LD_ADDR_EXP 28
10499: PUSH
10500: LD_INT 2
10502: ST_TO_ADDR
// DialogueOn ;
10503: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10507: LD_EXP 1
10511: PPUSH
10512: LD_STRING DT1a-JMM-1
10514: PPUSH
10515: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10519: LD_INT 22
10521: PUSH
10522: LD_INT 1
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 26
10531: PUSH
10532: LD_INT 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 2
10541: PUSH
10542: LD_INT 25
10544: PUSH
10545: LD_INT 1
10547: PUSH
10548: EMPTY
10549: LIST
10550: LIST
10551: PUSH
10552: LD_INT 25
10554: PUSH
10555: LD_INT 2
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: LD_INT 25
10564: PUSH
10565: LD_INT 3
10567: PUSH
10568: EMPTY
10569: LIST
10570: LIST
10571: PUSH
10572: LD_INT 25
10574: PUSH
10575: LD_INT 4
10577: PUSH
10578: EMPTY
10579: LIST
10580: LIST
10581: PUSH
10582: LD_INT 25
10584: PUSH
10585: LD_INT 5
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: PUSH
10592: LD_INT 25
10594: PUSH
10595: LD_INT 8
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: LIST
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: LIST
10615: PPUSH
10616: CALL_OW 69
10620: PPUSH
10621: LD_STRING DT1a-Sol1-1
10623: PPUSH
10624: LD_STRING DT1a-FSol1-1
10626: PPUSH
10627: CALL 12175 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10631: LD_EXP 1
10635: PPUSH
10636: LD_STRING DT1a-JMM-2
10638: PPUSH
10639: CALL_OW 88
// DialogueOff ;
10643: CALL_OW 7
// end ;
10647: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10648: LD_EXP 28
10652: PUSH
10653: LD_INT 3
10655: EQUAL
10656: PUSH
10657: LD_INT 11
10659: PPUSH
10660: LD_INT 22
10662: PUSH
10663: LD_INT 3
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 101
10672: PUSH
10673: LD_INT 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: EMPTY
10681: LIST
10682: LIST
10683: PPUSH
10684: CALL_OW 70
10688: AND
10689: IFFALSE 10970
10691: GO 10693
10693: DISABLE
10694: LD_INT 0
10696: PPUSH
10697: PPUSH
10698: PPUSH
// begin wait ( 0 0$0.3 ) ;
10699: LD_INT 10
10701: PPUSH
10702: CALL_OW 67
// DialogueOn ;
10706: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10710: LD_ADDR_VAR 0 3
10714: PUSH
10715: LD_INT 22
10717: PUSH
10718: LD_INT 1
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: PUSH
10725: LD_INT 26
10727: PUSH
10728: LD_INT 1
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: PUSH
10735: LD_INT 2
10737: PUSH
10738: LD_INT 25
10740: PUSH
10741: LD_INT 1
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: PUSH
10748: LD_INT 25
10750: PUSH
10751: LD_INT 2
10753: PUSH
10754: EMPTY
10755: LIST
10756: LIST
10757: PUSH
10758: LD_INT 25
10760: PUSH
10761: LD_INT 3
10763: PUSH
10764: EMPTY
10765: LIST
10766: LIST
10767: PUSH
10768: LD_INT 25
10770: PUSH
10771: LD_INT 4
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 25
10780: PUSH
10781: LD_INT 5
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: LD_INT 25
10790: PUSH
10791: LD_INT 8
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: PUSH
10807: EMPTY
10808: LIST
10809: LIST
10810: LIST
10811: PPUSH
10812: CALL_OW 69
10816: PPUSH
10817: LD_STRING DT2-Sol1-1
10819: PPUSH
10820: LD_STRING DT2-FSol1-1
10822: PPUSH
10823: CALL 12175 0 3
10827: ST_TO_ADDR
// DialogueOff ;
10828: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
10832: LD_INT 35
10834: PPUSH
10835: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) = 0 ;
10839: LD_INT 11
10841: PPUSH
10842: LD_INT 22
10844: PUSH
10845: LD_INT 3
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: LD_INT 24
10854: PUSH
10855: LD_INT 250
10857: PUSH
10858: EMPTY
10859: LIST
10860: LIST
10861: PUSH
10862: EMPTY
10863: LIST
10864: LIST
10865: PPUSH
10866: CALL_OW 70
10870: PUSH
10871: LD_INT 0
10873: EQUAL
10874: IFFALSE 10832
// wait ( 0 0$2 ) ;
10876: LD_INT 70
10878: PPUSH
10879: CALL_OW 67
// vehicleTeleported = 4 ;
10883: LD_ADDR_EXP 28
10887: PUSH
10888: LD_INT 4
10890: ST_TO_ADDR
// DialogueOn ;
10891: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10895: LD_EXP 1
10899: PPUSH
10900: LD_STRING DT2a-JMM-1
10902: PPUSH
10903: CALL_OW 88
// if speaker then
10907: LD_VAR 0 3
10911: IFFALSE 10954
// if GetSex ( speaker ) = 1 then
10913: LD_VAR 0 3
10917: PPUSH
10918: CALL_OW 258
10922: PUSH
10923: LD_INT 1
10925: EQUAL
10926: IFFALSE 10942
// Say ( speaker , DT2a-Sol1-1 ) else
10928: LD_VAR 0 3
10932: PPUSH
10933: LD_STRING DT2a-Sol1-1
10935: PPUSH
10936: CALL_OW 88
10940: GO 10954
// Say ( speaker , DT2a-FSol1-1 ) ;
10942: LD_VAR 0 3
10946: PPUSH
10947: LD_STRING DT2a-FSol1-1
10949: PPUSH
10950: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10954: LD_EXP 3
10958: PPUSH
10959: LD_STRING DT2a-Don-1
10961: PPUSH
10962: CALL_OW 88
// DialogueOff ;
10966: CALL_OW 7
// end ;
10970: PPOPN 3
10972: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10973: LD_INT 1
10975: PPUSH
10976: LD_INT 45
10978: PPUSH
10979: LD_INT 74
10981: PPUSH
10982: CALL_OW 293
10986: IFFALSE 11150
10988: GO 10990
10990: DISABLE
// begin DialogueOn ;
10991: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10995: LD_INT 36
10997: PPUSH
10998: LD_INT 55
11000: PPUSH
11001: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11005: LD_INT 22
11007: PUSH
11008: LD_INT 1
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: PUSH
11015: LD_INT 26
11017: PUSH
11018: LD_INT 1
11020: PUSH
11021: EMPTY
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 2
11027: PUSH
11028: LD_INT 25
11030: PUSH
11031: LD_INT 1
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: LD_INT 25
11040: PUSH
11041: LD_INT 2
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 25
11050: PUSH
11051: LD_INT 3
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: LD_INT 25
11060: PUSH
11061: LD_INT 4
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: PUSH
11068: LD_INT 25
11070: PUSH
11071: LD_INT 5
11073: PUSH
11074: EMPTY
11075: LIST
11076: LIST
11077: PUSH
11078: LD_INT 25
11080: PUSH
11081: LD_INT 8
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: LIST
11101: PPUSH
11102: CALL_OW 69
11106: PPUSH
11107: LD_STRING D5-Sol1-1
11109: PPUSH
11110: LD_STRING D5-FSol1-
11112: PPUSH
11113: CALL 12175 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11117: LD_EXP 30
11121: PUSH
11122: LD_EXP 3
11126: PPUSH
11127: CALL_OW 302
11131: AND
11132: IFFALSE 11146
// Say ( Donaldson , D5-Don-1 ) ;
11134: LD_EXP 3
11138: PPUSH
11139: LD_STRING D5-Don-1
11141: PPUSH
11142: CALL_OW 88
// DialogueOff ;
11146: CALL_OW 7
// end ;
11150: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11151: LD_INT 1
11153: PPUSH
11154: LD_INT 10
11156: PPUSH
11157: CALL_OW 292
11161: PUSH
11162: LD_INT 1
11164: PPUSH
11165: LD_INT 137
11167: PPUSH
11168: CALL_OW 292
11172: OR
11173: IFFALSE 11317
11175: GO 11177
11177: DISABLE
// begin DialogueOn ;
11178: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11182: LD_INT 22
11184: PUSH
11185: LD_INT 1
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: LD_INT 26
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PUSH
11202: LD_INT 2
11204: PUSH
11205: LD_INT 25
11207: PUSH
11208: LD_INT 1
11210: PUSH
11211: EMPTY
11212: LIST
11213: LIST
11214: PUSH
11215: LD_INT 25
11217: PUSH
11218: LD_INT 2
11220: PUSH
11221: EMPTY
11222: LIST
11223: LIST
11224: PUSH
11225: LD_INT 25
11227: PUSH
11228: LD_INT 3
11230: PUSH
11231: EMPTY
11232: LIST
11233: LIST
11234: PUSH
11235: LD_INT 25
11237: PUSH
11238: LD_INT 4
11240: PUSH
11241: EMPTY
11242: LIST
11243: LIST
11244: PUSH
11245: LD_INT 25
11247: PUSH
11248: LD_INT 5
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: PUSH
11255: LD_INT 25
11257: PUSH
11258: LD_INT 8
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: PUSH
11265: EMPTY
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: LIST
11278: PPUSH
11279: CALL_OW 69
11283: PPUSH
11284: LD_STRING DT3-Sol1-1
11286: PPUSH
11287: LD_STRING DT3-FSol1-1
11289: PPUSH
11290: CALL 12175 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11294: LD_EXP 1
11298: PPUSH
11299: LD_STRING DT3-JMM-1
11301: PPUSH
11302: CALL_OW 88
// DialogueOff ;
11306: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11310: LD_STRING M2
11312: PPUSH
11313: CALL_OW 337
// end ;
11317: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11318: LD_EXP 42
11322: PUSH
11323: LD_INT 0
11325: EQUAL
11326: IFFALSE 11409
11328: GO 11330
11330: DISABLE
11331: LD_INT 0
11333: PPUSH
// begin enable ;
11334: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11335: LD_ADDR_VAR 0 1
11339: PUSH
11340: LD_INT 10
11342: PPUSH
11343: LD_INT 22
11345: PUSH
11346: LD_INT 3
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PUSH
11353: LD_INT 21
11355: PUSH
11356: LD_INT 2
11358: PUSH
11359: EMPTY
11360: LIST
11361: LIST
11362: PUSH
11363: LD_INT 58
11365: PUSH
11366: EMPTY
11367: LIST
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: PPUSH
11374: CALL_OW 70
11378: PUSH
11379: FOR_IN
11380: IFFALSE 11407
// if GetLives ( i ) < 1000 then
11382: LD_VAR 0 1
11386: PPUSH
11387: CALL_OW 256
11391: PUSH
11392: LD_INT 1000
11394: LESS
11395: IFFALSE 11405
// ruEscape = 1 ;
11397: LD_ADDR_EXP 42
11401: PUSH
11402: LD_INT 1
11404: ST_TO_ADDR
11405: GO 11379
11407: POP
11408: POP
// end ;
11409: PPOPN 1
11411: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11412: LD_INT 3
11414: PPUSH
11415: CALL_OW 303
11419: PUSH
11420: LD_INT 4
11422: PPUSH
11423: CALL_OW 303
11427: OR
11428: PUSH
11429: LD_INT 22
11431: PPUSH
11432: LD_INT 22
11434: PUSH
11435: LD_INT 1
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: PPUSH
11442: CALL_OW 70
11446: PUSH
11447: LD_INT 0
11449: GREATER
11450: OR
11451: PUSH
11452: LD_EXP 42
11456: PUSH
11457: LD_INT 1
11459: EQUAL
11460: OR
11461: IFFALSE 11692
11463: GO 11465
11465: DISABLE
11466: LD_INT 0
11468: PPUSH
11469: PPUSH
11470: PPUSH
// begin ruAI = 0 ;
11471: LD_ADDR_EXP 41
11475: PUSH
11476: LD_INT 0
11478: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11479: LD_ADDR_VAR 0 3
11483: PUSH
11484: LD_INT 10
11486: PPUSH
11487: LD_INT 22
11489: PUSH
11490: LD_INT 3
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 21
11499: PUSH
11500: LD_INT 2
11502: PUSH
11503: EMPTY
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 58
11509: PUSH
11510: EMPTY
11511: LIST
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: PPUSH
11518: CALL_OW 70
11522: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11523: LD_EXP 34
11527: PPUSH
11528: CALL_OW 122
// wait ( 0 0$1 ) ;
11532: LD_INT 35
11534: PPUSH
11535: CALL_OW 67
// DialogueOn ;
11539: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11543: LD_EXP 1
11547: PPUSH
11548: LD_STRING D6-JMM-1
11550: PPUSH
11551: CALL_OW 88
// DialogueOff ;
11555: CALL_OW 7
// if vehs > 0 then
11559: LD_VAR 0 3
11563: PUSH
11564: LD_INT 0
11566: GREATER
11567: IFFALSE 11637
// for i := 1 to RuScientists do
11569: LD_ADDR_VAR 0 1
11573: PUSH
11574: DOUBLE
11575: LD_INT 1
11577: DEC
11578: ST_TO_ADDR
11579: LD_EXP 34
11583: PUSH
11584: FOR_TO
11585: IFFALSE 11633
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11587: LD_EXP 34
11591: PUSH
11592: LD_VAR 0 1
11596: ARRAY
11597: PPUSH
11598: LD_INT 3
11600: PUSH
11601: LD_INT 60
11603: PUSH
11604: EMPTY
11605: LIST
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: PPUSH
11611: CALL_OW 72
11615: PPUSH
11616: LD_VAR 0 3
11620: PUSH
11621: LD_VAR 0 1
11625: ARRAY
11626: PPUSH
11627: CALL_OW 120
11631: GO 11584
11633: POP
11634: POP
11635: GO 11692
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11637: LD_EXP 34
11641: PUSH
11642: LD_VAR 0 1
11646: ARRAY
11647: PPUSH
11648: LD_INT 3
11650: PUSH
11651: LD_INT 60
11653: PUSH
11654: EMPTY
11655: LIST
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: PPUSH
11661: CALL_OW 72
11665: PPUSH
11666: LD_INT 13
11668: PUSH
11669: LD_INT 14
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: PUSH
11676: LD_INT 1
11678: PPUSH
11679: LD_INT 2
11681: PPUSH
11682: CALL_OW 12
11686: ARRAY
11687: PPUSH
11688: CALL_OW 113
// end ;
11692: PPOPN 3
11694: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11695: LD_EXP 41
11699: PUSH
11700: LD_INT 0
11702: EQUAL
11703: IFFALSE 12075
11705: GO 11707
11707: DISABLE
11708: LD_INT 0
11710: PPUSH
11711: PPUSH
11712: PPUSH
11713: PPUSH
// begin enable ;
11714: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11715: LD_EXP 34
11719: PPUSH
11720: LD_INT 2
11722: PUSH
11723: LD_INT 95
11725: PUSH
11726: LD_INT 13
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: PUSH
11733: LD_INT 95
11735: PUSH
11736: LD_INT 14
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: PPUSH
11748: CALL_OW 72
11752: PUSH
11753: LD_INT 33
11755: PUSH
11756: LD_INT 1
11758: PUSH
11759: EMPTY
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 23
11765: PUSH
11766: LD_INT 3
11768: PUSH
11769: EMPTY
11770: LIST
11771: LIST
11772: PUSH
11773: LD_INT 2
11775: PUSH
11776: LD_INT 95
11778: PUSH
11779: LD_INT 13
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: PUSH
11786: LD_INT 95
11788: PUSH
11789: LD_INT 14
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: PUSH
11796: EMPTY
11797: LIST
11798: LIST
11799: LIST
11800: PUSH
11801: EMPTY
11802: LIST
11803: LIST
11804: LIST
11805: PPUSH
11806: CALL_OW 69
11810: OR
11811: IFFALSE 12000
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
11813: LD_ADDR_VAR 0 2
11817: PUSH
11818: LD_EXP 34
11822: PPUSH
11823: LD_INT 2
11825: PUSH
11826: LD_INT 95
11828: PUSH
11829: LD_INT 13
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: PUSH
11836: LD_INT 95
11838: PUSH
11839: LD_INT 14
11841: PUSH
11842: EMPTY
11843: LIST
11844: LIST
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: LIST
11850: PPUSH
11851: CALL_OW 72
11855: PUSH
11856: LD_INT 1
11858: ARRAY
11859: ST_TO_ADDR
// if not unit then
11860: LD_VAR 0 2
11864: NOT
11865: IFFALSE 12000
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
11867: LD_ADDR_VAR 0 4
11871: PUSH
11872: LD_INT 2
11874: PUSH
11875: LD_INT 95
11877: PUSH
11878: LD_INT 13
11880: PUSH
11881: EMPTY
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 95
11887: PUSH
11888: LD_INT 14
11890: PUSH
11891: EMPTY
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 33
11902: PUSH
11903: LD_INT 1
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 23
11912: PUSH
11913: LD_INT 3
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: LIST
11924: PPUSH
11925: CALL_OW 69
11929: ST_TO_ADDR
// if not tmp then
11930: LD_VAR 0 4
11934: NOT
11935: IFFALSE 11939
// exit ;
11937: GO 12075
// for i in tmp do
11939: LD_ADDR_VAR 0 1
11943: PUSH
11944: LD_VAR 0 4
11948: PUSH
11949: FOR_IN
11950: IFFALSE 11998
// if IsDrivenBy ( i ) in RuScientists then
11952: LD_VAR 0 1
11956: PPUSH
11957: CALL_OW 311
11961: PUSH
11962: LD_EXP 34
11966: IN
11967: IFFALSE 11996
// begin unit := IsDrivenBy ( i ) ;
11969: LD_ADDR_VAR 0 2
11973: PUSH
11974: LD_VAR 0 1
11978: PPUSH
11979: CALL_OW 311
11983: ST_TO_ADDR
// veh := i ;
11984: LD_ADDR_VAR 0 3
11988: PUSH
11989: LD_VAR 0 1
11993: ST_TO_ADDR
// break ;
11994: GO 11998
// end ;
11996: GO 11949
11998: POP
11999: POP
// end ; end ; if not unit then
12000: LD_VAR 0 2
12004: NOT
12005: IFFALSE 12009
// exit ;
12007: GO 12075
// RuScientists = RuScientists diff unit ;
12009: LD_ADDR_EXP 34
12013: PUSH
12014: LD_EXP 34
12018: PUSH
12019: LD_VAR 0 2
12023: DIFF
12024: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12025: LD_VAR 0 2
12029: PPUSH
12030: CALL_OW 64
// if veh then
12034: LD_VAR 0 3
12038: IFFALSE 12075
// begin if GetWeapon ( veh ) = 49 then
12040: LD_VAR 0 3
12044: PPUSH
12045: CALL_OW 264
12049: PUSH
12050: LD_INT 49
12052: EQUAL
12053: IFFALSE 12066
// KillUnit ( veh ) else
12055: LD_VAR 0 3
12059: PPUSH
12060: CALL_OW 66
12064: GO 12075
// RemoveUnit ( veh ) ;
12066: LD_VAR 0 3
12070: PPUSH
12071: CALL_OW 64
// end ; end ; end_of_file
12075: PPOPN 4
12077: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12078: LD_INT 0
12080: PPUSH
12081: PPUSH
// if exist_mode then
12082: LD_VAR 0 2
12086: IFFALSE 12105
// unit := CreateCharacter ( ident ) else
12088: LD_ADDR_VAR 0 4
12092: PUSH
12093: LD_VAR 0 1
12097: PPUSH
12098: CALL_OW 34
12102: ST_TO_ADDR
12103: GO 12120
// unit := NewCharacter ( ident ) ;
12105: LD_ADDR_VAR 0 4
12109: PUSH
12110: LD_VAR 0 1
12114: PPUSH
12115: CALL_OW 25
12119: ST_TO_ADDR
// result := unit ;
12120: LD_ADDR_VAR 0 3
12124: PUSH
12125: LD_VAR 0 4
12129: ST_TO_ADDR
// end ;
12130: LD_VAR 0 3
12134: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12135: LD_INT 0
12137: PPUSH
12138: PPUSH
// for i in charactersList do
12139: LD_ADDR_VAR 0 4
12143: PUSH
12144: LD_VAR 0 1
12148: PUSH
12149: FOR_IN
12150: IFFALSE 12168
// SaveCharacters ( i , ident ) ;
12152: LD_VAR 0 4
12156: PPUSH
12157: LD_VAR 0 2
12161: PPUSH
12162: CALL_OW 38
12166: GO 12149
12168: POP
12169: POP
// end ;
12170: LD_VAR 0 3
12174: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12175: LD_INT 0
12177: PPUSH
12178: PPUSH
12179: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12180: LD_ADDR_VAR 0 1
12184: PUSH
12185: LD_VAR 0 1
12189: PUSH
12190: LD_EXP 1
12194: PUSH
12195: LD_EXP 7
12199: PUSH
12200: LD_EXP 3
12204: PUSH
12205: LD_EXP 4
12209: PUSH
12210: LD_EXP 5
12214: PUSH
12215: LD_EXP 2
12219: PUSH
12220: LD_EXP 12
12224: PUSH
12225: LD_EXP 13
12229: PUSH
12230: LD_EXP 9
12234: PUSH
12235: LD_EXP 11
12239: PUSH
12240: LD_EXP 6
12244: PUSH
12245: LD_EXP 8
12249: PUSH
12250: LD_EXP 10
12254: PUSH
12255: LD_EXP 22
12259: PUSH
12260: EMPTY
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: DIFF
12276: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12277: LD_ADDR_VAR 0 6
12281: PUSH
12282: LD_VAR 0 1
12286: PUSH
12287: LD_INT 1
12289: PPUSH
12290: LD_VAR 0 1
12294: PPUSH
12295: CALL_OW 12
12299: ARRAY
12300: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12301: LD_VAR 0 6
12305: PPUSH
12306: CALL_OW 258
12310: PUSH
12311: LD_INT 1
12313: EQUAL
12314: IFFALSE 12332
// Say ( speaker , dialogMID ) else
12316: LD_VAR 0 6
12320: PPUSH
12321: LD_VAR 0 2
12325: PPUSH
12326: CALL_OW 88
12330: GO 12346
// Say ( speaker , dialogFID ) ;
12332: LD_VAR 0 6
12336: PPUSH
12337: LD_VAR 0 3
12341: PPUSH
12342: CALL_OW 88
// result := speaker ;
12346: LD_ADDR_VAR 0 4
12350: PUSH
12351: LD_VAR 0 6
12355: ST_TO_ADDR
// end ;
12356: LD_VAR 0 4
12360: RET
// export function PrepareDifficulty ; var tmp ; begin
12361: LD_INT 0
12363: PPUSH
12364: PPUSH
// if Difficulty = 1 then
12365: LD_OWVAR 67
12369: PUSH
12370: LD_INT 1
12372: EQUAL
12373: IFFALSE 12391
// begin RuSolMinLevel = 8 ;
12375: LD_ADDR_EXP 36
12379: PUSH
12380: LD_INT 8
12382: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12383: LD_ADDR_EXP 37
12387: PUSH
12388: LD_INT 10
12390: ST_TO_ADDR
// end ; if Difficulty = 2 then
12391: LD_OWVAR 67
12395: PUSH
12396: LD_INT 2
12398: EQUAL
12399: IFFALSE 12493
// begin RuSolMinLevel = 9 ;
12401: LD_ADDR_EXP 36
12405: PUSH
12406: LD_INT 9
12408: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12409: LD_ADDR_EXP 37
12413: PUSH
12414: LD_INT 10
12416: ST_TO_ADDR
// uc_nation = 3 ;
12417: LD_ADDR_OWVAR 21
12421: PUSH
12422: LD_INT 3
12424: ST_TO_ADDR
// uc_side = 3 ;
12425: LD_ADDR_OWVAR 20
12429: PUSH
12430: LD_INT 3
12432: ST_TO_ADDR
// bc_level = 10 ;
12433: LD_ADDR_OWVAR 43
12437: PUSH
12438: LD_INT 10
12440: ST_TO_ADDR
// bc_type = b_turret ;
12441: LD_ADDR_OWVAR 42
12445: PUSH
12446: LD_INT 33
12448: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12449: LD_ADDR_VAR 0 2
12453: PUSH
12454: LD_INT 86
12456: PPUSH
12457: LD_INT 34
12459: PPUSH
12460: LD_INT 2
12462: PPUSH
12463: CALL_OW 47
12467: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12468: LD_VAR 0 2
12472: PPUSH
12473: LD_INT 49
12475: PPUSH
12476: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12480: LD_INT 64
12482: PPUSH
12483: LD_INT 3
12485: PPUSH
12486: LD_INT 1
12488: PPUSH
12489: CALL_OW 322
// end ; if Difficulty = 3 then
12493: LD_OWVAR 67
12497: PUSH
12498: LD_INT 3
12500: EQUAL
12501: IFFALSE 12639
// begin RuSolMinLevel = 10 ;
12503: LD_ADDR_EXP 36
12507: PUSH
12508: LD_INT 10
12510: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12511: LD_ADDR_EXP 37
12515: PUSH
12516: LD_INT 10
12518: ST_TO_ADDR
// uc_nation = 3 ;
12519: LD_ADDR_OWVAR 21
12523: PUSH
12524: LD_INT 3
12526: ST_TO_ADDR
// uc_side = 3 ;
12527: LD_ADDR_OWVAR 20
12531: PUSH
12532: LD_INT 3
12534: ST_TO_ADDR
// bc_level = 10 ;
12535: LD_ADDR_OWVAR 43
12539: PUSH
12540: LD_INT 10
12542: ST_TO_ADDR
// bc_type = b_turret ;
12543: LD_ADDR_OWVAR 42
12547: PUSH
12548: LD_INT 33
12550: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12551: LD_ADDR_VAR 0 2
12555: PUSH
12556: LD_INT 86
12558: PPUSH
12559: LD_INT 34
12561: PPUSH
12562: LD_INT 2
12564: PPUSH
12565: CALL_OW 47
12569: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12570: LD_VAR 0 2
12574: PPUSH
12575: LD_INT 49
12577: PPUSH
12578: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12582: LD_ADDR_VAR 0 2
12586: PUSH
12587: LD_INT 93
12589: PPUSH
12590: LD_INT 31
12592: PPUSH
12593: LD_INT 2
12595: PPUSH
12596: CALL_OW 47
12600: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12601: LD_VAR 0 2
12605: PPUSH
12606: LD_INT 49
12608: PPUSH
12609: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12613: LD_INT 64
12615: PPUSH
12616: LD_INT 3
12618: PPUSH
12619: LD_INT 1
12621: PPUSH
12622: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12626: LD_INT 65
12628: PPUSH
12629: LD_INT 3
12631: PPUSH
12632: LD_INT 1
12634: PPUSH
12635: CALL_OW 322
// end ; end ;
12639: LD_VAR 0 1
12643: RET
// export function ShowQuery1 ; begin
12644: LD_INT 0
12646: PPUSH
// case query ( Q1 ) of 1 :
12647: LD_STRING Q1
12649: PPUSH
12650: CALL_OW 97
12654: PUSH
12655: LD_INT 1
12657: DOUBLE
12658: EQUAL
12659: IFTRUE 12663
12661: GO 12674
12663: POP
// result = 1 ; 2 :
12664: LD_ADDR_VAR 0 1
12668: PUSH
12669: LD_INT 1
12671: ST_TO_ADDR
12672: GO 12713
12674: LD_INT 2
12676: DOUBLE
12677: EQUAL
12678: IFTRUE 12682
12680: GO 12693
12682: POP
// result = 2 ; 3 :
12683: LD_ADDR_VAR 0 1
12687: PUSH
12688: LD_INT 2
12690: ST_TO_ADDR
12691: GO 12713
12693: LD_INT 3
12695: DOUBLE
12696: EQUAL
12697: IFTRUE 12701
12699: GO 12712
12701: POP
// result = 3 ; end ;
12702: LD_ADDR_VAR 0 1
12706: PUSH
12707: LD_INT 3
12709: ST_TO_ADDR
12710: GO 12713
12712: POP
// end ;
12713: LD_VAR 0 1
12717: RET
// export function ShowQuery2 ; begin
12718: LD_INT 0
12720: PPUSH
// case query ( Q1a ) of 1 :
12721: LD_STRING Q1a
12723: PPUSH
12724: CALL_OW 97
12728: PUSH
12729: LD_INT 1
12731: DOUBLE
12732: EQUAL
12733: IFTRUE 12737
12735: GO 12748
12737: POP
// result = 1 ; 2 :
12738: LD_ADDR_VAR 0 1
12742: PUSH
12743: LD_INT 1
12745: ST_TO_ADDR
12746: GO 12787
12748: LD_INT 2
12750: DOUBLE
12751: EQUAL
12752: IFTRUE 12756
12754: GO 12767
12756: POP
// result = 2 ; 3 :
12757: LD_ADDR_VAR 0 1
12761: PUSH
12762: LD_INT 2
12764: ST_TO_ADDR
12765: GO 12787
12767: LD_INT 3
12769: DOUBLE
12770: EQUAL
12771: IFTRUE 12775
12773: GO 12786
12775: POP
// result = 3 ; end ;
12776: LD_ADDR_VAR 0 1
12780: PUSH
12781: LD_INT 3
12783: ST_TO_ADDR
12784: GO 12787
12786: POP
// end ;
12787: LD_VAR 0 1
12791: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12792: LD_INT 0
12794: PPUSH
12795: PPUSH
12796: PPUSH
12797: PPUSH
12798: PPUSH
// for i = 1 to count do
12799: LD_ADDR_VAR 0 8
12803: PUSH
12804: DOUBLE
12805: LD_INT 1
12807: DEC
12808: ST_TO_ADDR
12809: LD_VAR 0 6
12813: PUSH
12814: FOR_TO
12815: IFFALSE 12896
// begin uc_side = side ;
12817: LD_ADDR_OWVAR 20
12821: PUSH
12822: LD_VAR 0 1
12826: ST_TO_ADDR
// uc_nation = nation ;
12827: LD_ADDR_OWVAR 21
12831: PUSH
12832: LD_VAR 0 2
12836: ST_TO_ADDR
// hc_gallery =  ;
12837: LD_ADDR_OWVAR 33
12841: PUSH
12842: LD_STRING 
12844: ST_TO_ADDR
// hc_name =  ;
12845: LD_ADDR_OWVAR 26
12849: PUSH
12850: LD_STRING 
12852: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12853: LD_INT 0
12855: PPUSH
12856: LD_VAR 0 5
12860: PPUSH
12861: LD_VAR 0 4
12865: PPUSH
12866: CALL_OW 380
// un = CreateHuman ;
12870: LD_ADDR_VAR 0 10
12874: PUSH
12875: CALL_OW 44
12879: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12880: LD_VAR 0 10
12884: PPUSH
12885: LD_VAR 0 3
12889: PPUSH
12890: CALL_OW 52
// end ;
12894: GO 12814
12896: POP
12897: POP
// end ;
12898: LD_VAR 0 7
12902: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
12903: LD_INT 0
12905: PPUSH
12906: PPUSH
12907: PPUSH
12908: PPUSH
12909: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12910: LD_ADDR_VAR 0 8
12914: PUSH
12915: LD_INT 48
12917: PUSH
12918: LD_INT 49
12920: PUSH
12921: LD_INT 50
12923: PUSH
12924: LD_INT 20
12926: PUSH
12927: LD_INT 1
12929: PUSH
12930: LD_INT 51
12932: PUSH
12933: LD_INT 52
12935: PUSH
12936: LD_INT 69
12938: PUSH
12939: LD_INT 39
12941: PUSH
12942: LD_INT 34
12944: PUSH
12945: LD_INT 40
12947: PUSH
12948: LD_INT 53
12950: PUSH
12951: LD_INT 71
12953: PUSH
12954: LD_INT 57
12956: PUSH
12957: LD_INT 58
12959: PUSH
12960: LD_INT 44
12962: PUSH
12963: LD_INT 32
12965: PUSH
12966: LD_INT 27
12968: PUSH
12969: LD_INT 23
12971: PUSH
12972: LD_INT 33
12974: PUSH
12975: LD_INT 59
12977: PUSH
12978: LD_INT 54
12980: PUSH
12981: LD_INT 55
12983: PUSH
12984: LD_INT 56
12986: PUSH
12987: LD_INT 63
12989: PUSH
12990: LD_INT 64
12992: PUSH
12993: LD_INT 65
12995: PUSH
12996: LD_INT 30
12998: PUSH
12999: LD_INT 31
13001: PUSH
13002: LD_INT 21
13004: PUSH
13005: LD_INT 22
13007: PUSH
13008: LD_INT 25
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13045: LD_ADDR_VAR 0 5
13049: PUSH
13050: DOUBLE
13051: LD_INT 1
13053: DEC
13054: ST_TO_ADDR
13055: LD_VAR 0 8
13059: PUSH
13060: FOR_TO
13061: IFFALSE 13137
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13063: LD_VAR 0 8
13067: PUSH
13068: LD_VAR 0 5
13072: ARRAY
13073: PPUSH
13074: LD_VAR 0 1
13078: PPUSH
13079: CALL_OW 321
13083: PUSH
13084: LD_INT 1
13086: EQUAL
13087: PUSH
13088: LD_VAR 0 8
13092: PUSH
13093: LD_VAR 0 5
13097: ARRAY
13098: PPUSH
13099: LD_VAR 0 3
13103: PPUSH
13104: CALL_OW 482
13108: PUSH
13109: LD_INT 1
13111: EQUAL
13112: AND
13113: IFFALSE 13135
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13115: LD_VAR 0 2
13119: PPUSH
13120: LD_VAR 0 8
13124: PUSH
13125: LD_VAR 0 5
13129: ARRAY
13130: PPUSH
13131: CALL_OW 184
13135: GO 13060
13137: POP
13138: POP
// end ;
13139: LD_VAR 0 4
13143: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13144: LD_INT 0
13146: PPUSH
13147: PPUSH
13148: PPUSH
13149: PPUSH
13150: PPUSH
13151: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13152: LD_ADDR_VAR 0 8
13156: PUSH
13157: LD_VAR 0 2
13161: PPUSH
13162: CALL_OW 313
13166: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13167: LD_ADDR_VAR 0 9
13171: PUSH
13172: LD_VAR 0 3
13176: PPUSH
13177: LD_INT 22
13179: PUSH
13180: LD_VAR 0 1
13184: PUSH
13185: EMPTY
13186: LIST
13187: LIST
13188: PUSH
13189: LD_INT 25
13191: PUSH
13192: LD_INT 2
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 24
13201: PUSH
13202: LD_INT 750
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PUSH
13209: LD_INT 3
13211: PUSH
13212: LD_INT 54
13214: PUSH
13215: EMPTY
13216: LIST
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: PPUSH
13228: CALL_OW 70
13232: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13233: LD_ADDR_VAR 0 6
13237: PUSH
13238: LD_VAR 0 3
13242: PPUSH
13243: LD_INT 22
13245: PUSH
13246: LD_VAR 0 1
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 21
13257: PUSH
13258: LD_INT 3
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: LD_INT 3
13267: PUSH
13268: LD_INT 24
13270: PUSH
13271: LD_INT 1000
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: EMPTY
13279: LIST
13280: LIST
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: PUSH
13287: EMPTY
13288: LIST
13289: PPUSH
13290: CALL_OW 70
13294: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13295: LD_VAR 0 6
13299: NOT
13300: PUSH
13301: LD_INT 22
13303: PUSH
13304: LD_VAR 0 1
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: PUSH
13313: LD_INT 25
13315: PUSH
13316: LD_INT 2
13318: PUSH
13319: EMPTY
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 24
13325: PUSH
13326: LD_INT 250
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: LIST
13337: PPUSH
13338: CALL_OW 69
13342: NOT
13343: AND
13344: IFFALSE 13348
// exit ;
13346: GO 13530
// if buildings_list > 0 and engineerOkInside then
13348: LD_VAR 0 6
13352: PUSH
13353: LD_INT 0
13355: GREATER
13356: PUSH
13357: LD_VAR 0 8
13361: AND
13362: IFFALSE 13373
// ComExitBuilding ( engineerOkInside ) ;
13364: LD_VAR 0 8
13368: PPUSH
13369: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13373: LD_VAR 0 6
13377: PUSH
13378: LD_INT 0
13380: GREATER
13381: PUSH
13382: LD_VAR 0 9
13386: PUSH
13387: LD_INT 0
13389: GREATER
13390: AND
13391: IFFALSE 13411
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13393: LD_VAR 0 9
13397: PPUSH
13398: LD_VAR 0 6
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13411: LD_VAR 0 6
13415: PUSH
13416: LD_INT 0
13418: EQUAL
13419: PUSH
13420: LD_VAR 0 4
13424: PUSH
13425: LD_INT 0
13427: EQUAL
13428: AND
13429: PUSH
13430: LD_VAR 0 9
13434: PUSH
13435: LD_INT 0
13437: GREATER
13438: AND
13439: IFFALSE 13455
// ComEnterUnit ( engineerOkOutside , building ) ;
13441: LD_VAR 0 9
13445: PPUSH
13446: LD_VAR 0 2
13450: PPUSH
13451: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13455: LD_VAR 0 9
13459: PUSH
13460: LD_INT 0
13462: GREATER
13463: PUSH
13464: LD_VAR 0 6
13468: PUSH
13469: LD_INT 0
13471: EQUAL
13472: AND
13473: PUSH
13474: LD_VAR 0 4
13478: PUSH
13479: LD_INT 0
13481: GREATER
13482: AND
13483: IFFALSE 13530
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13485: LD_VAR 0 9
13489: PPUSH
13490: LD_VAR 0 4
13494: PUSH
13495: LD_INT 1
13497: ARRAY
13498: PPUSH
13499: LD_VAR 0 4
13503: PUSH
13504: LD_INT 2
13506: ARRAY
13507: PPUSH
13508: LD_VAR 0 4
13512: PUSH
13513: LD_INT 3
13515: ARRAY
13516: PPUSH
13517: LD_VAR 0 4
13521: PUSH
13522: LD_INT 4
13524: ARRAY
13525: PPUSH
13526: CALL_OW 145
// end ;
13530: LD_VAR 0 5
13534: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13535: LD_INT 0
13537: PPUSH
13538: PPUSH
13539: PPUSH
13540: PPUSH
13541: PPUSH
13542: PPUSH
13543: PPUSH
13544: PPUSH
13545: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13546: LD_ADDR_VAR 0 6
13550: PUSH
13551: LD_INT 22
13553: PUSH
13554: LD_VAR 0 1
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PUSH
13563: LD_INT 25
13565: PUSH
13566: LD_INT 4
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: LD_INT 24
13575: PUSH
13576: LD_INT 251
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: PUSH
13583: EMPTY
13584: LIST
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: PUSH
13593: LD_EXP 34
13597: PUSH
13598: EMPTY
13599: LIST
13600: DIFF
13601: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13602: LD_ADDR_VAR 0 7
13606: PUSH
13607: LD_VAR 0 3
13611: PPUSH
13612: LD_INT 22
13614: PUSH
13615: LD_VAR 0 1
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 25
13626: PUSH
13627: LD_INT 4
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 50
13636: PUSH
13637: EMPTY
13638: LIST
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: PPUSH
13645: CALL_OW 70
13649: PUSH
13650: LD_EXP 34
13654: PUSH
13655: EMPTY
13656: LIST
13657: DIFF
13658: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13659: LD_ADDR_VAR 0 10
13663: PUSH
13664: LD_VAR 0 3
13668: PPUSH
13669: LD_INT 22
13671: PUSH
13672: LD_VAR 0 1
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: LD_INT 21
13683: PUSH
13684: LD_INT 1
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 3
13693: PUSH
13694: LD_INT 24
13696: PUSH
13697: LD_INT 750
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: LIST
13712: PPUSH
13713: CALL_OW 70
13717: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13718: LD_ADDR_VAR 0 11
13722: PUSH
13723: LD_VAR 0 2
13727: PPUSH
13728: LD_INT 22
13730: PUSH
13731: LD_VAR 0 1
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: LD_INT 21
13742: PUSH
13743: LD_INT 1
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 3
13752: PUSH
13753: LD_INT 24
13755: PUSH
13756: LD_INT 1000
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: EMPTY
13764: LIST
13765: LIST
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: LIST
13771: PPUSH
13772: CALL_OW 70
13776: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13777: LD_VAR 0 10
13781: PUSH
13782: LD_INT 0
13784: GREATER
13785: PUSH
13786: LD_VAR 0 6
13790: PUSH
13791: LD_INT 0
13793: GREATER
13794: AND
13795: IFFALSE 13811
// ComMoveToArea ( damageUnits , healArea ) ;
13797: LD_VAR 0 10
13801: PPUSH
13802: LD_VAR 0 2
13806: PPUSH
13807: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13811: LD_VAR 0 11
13815: PUSH
13816: LD_INT 0
13818: GREATER
13819: PUSH
13820: LD_VAR 0 7
13824: PUSH
13825: LD_INT 0
13827: GREATER
13828: AND
13829: IFFALSE 13849
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13831: LD_VAR 0 7
13835: PPUSH
13836: LD_VAR 0 11
13840: PUSH
13841: LD_INT 1
13843: ARRAY
13844: PPUSH
13845: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13849: LD_VAR 0 10
13853: PUSH
13854: LD_INT 0
13856: EQUAL
13857: PUSH
13858: LD_VAR 0 11
13862: PUSH
13863: LD_INT 0
13865: EQUAL
13866: AND
13867: PUSH
13868: LD_VAR 0 7
13872: PUSH
13873: LD_INT 0
13875: GREATER
13876: AND
13877: IFFALSE 13982
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13879: LD_ADDR_VAR 0 12
13883: PUSH
13884: LD_INT 22
13886: PUSH
13887: LD_VAR 0 1
13891: PUSH
13892: EMPTY
13893: LIST
13894: LIST
13895: PUSH
13896: LD_INT 21
13898: PUSH
13899: LD_INT 3
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: PUSH
13906: LD_INT 30
13908: PUSH
13909: LD_INT 8
13911: PUSH
13912: EMPTY
13913: LIST
13914: LIST
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: LIST
13920: PPUSH
13921: CALL_OW 69
13925: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13926: LD_ADDR_VAR 0 13
13930: PUSH
13931: LD_INT 1
13933: PPUSH
13934: LD_VAR 0 12
13938: PPUSH
13939: CALL_OW 12
13943: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13944: LD_VAR 0 7
13948: PPUSH
13949: LD_INT 3
13951: PUSH
13952: LD_INT 60
13954: PUSH
13955: EMPTY
13956: LIST
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PPUSH
13962: CALL_OW 72
13966: PPUSH
13967: LD_VAR 0 12
13971: PUSH
13972: LD_VAR 0 13
13976: ARRAY
13977: PPUSH
13978: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
13982: LD_VAR 0 3
13986: PPUSH
13987: LD_INT 22
13989: PUSH
13990: LD_VAR 0 1
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 25
14001: PUSH
14002: LD_INT 3
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 24
14011: PUSH
14012: LD_INT 751
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: LIST
14023: PPUSH
14024: CALL_OW 70
14028: PUSH
14029: LD_INT 0
14031: GREATER
14032: PUSH
14033: LD_INT 21
14035: PPUSH
14036: CALL_OW 302
14040: AND
14041: PUSH
14042: LD_INT 21
14044: PPUSH
14045: CALL_OW 255
14049: PUSH
14050: LD_INT 3
14052: EQUAL
14053: AND
14054: IFFALSE 14110
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14056: LD_VAR 0 3
14060: PPUSH
14061: LD_INT 22
14063: PUSH
14064: LD_VAR 0 1
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 25
14075: PUSH
14076: LD_INT 3
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: PUSH
14083: LD_INT 24
14085: PUSH
14086: LD_INT 751
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: EMPTY
14094: LIST
14095: LIST
14096: LIST
14097: PPUSH
14098: CALL_OW 70
14102: PPUSH
14103: LD_INT 21
14105: PPUSH
14106: CALL_OW 120
// end ;
14110: LD_VAR 0 5
14114: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
14115: LD_INT 0
14117: PPUSH
14118: PPUSH
14119: PPUSH
14120: PPUSH
14121: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
14122: LD_ADDR_VAR 0 6
14126: PUSH
14127: LD_INT 22
14129: PUSH
14130: LD_VAR 0 1
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 2
14141: PUSH
14142: LD_INT 30
14144: PUSH
14145: LD_INT 31
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: LD_INT 30
14154: PUSH
14155: LD_INT 32
14157: PUSH
14158: EMPTY
14159: LIST
14160: LIST
14161: PUSH
14162: LD_INT 30
14164: PUSH
14165: LD_INT 33
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 30
14174: PUSH
14175: LD_INT 4
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: PUSH
14182: LD_INT 30
14184: PUSH
14185: LD_INT 5
14187: PUSH
14188: EMPTY
14189: LIST
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: PPUSH
14204: CALL_OW 69
14208: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
14209: LD_ADDR_VAR 0 7
14213: PUSH
14214: LD_INT 22
14216: PUSH
14217: LD_VAR 0 2
14221: PUSH
14222: EMPTY
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 21
14228: PUSH
14229: LD_INT 3
14231: PUSH
14232: EMPTY
14233: LIST
14234: LIST
14235: PUSH
14236: LD_INT 58
14238: PUSH
14239: EMPTY
14240: LIST
14241: PUSH
14242: EMPTY
14243: LIST
14244: LIST
14245: LIST
14246: PPUSH
14247: CALL_OW 69
14251: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
14252: LD_VAR 0 6
14256: PUSH
14257: LD_INT 0
14259: GREATER
14260: PUSH
14261: LD_VAR 0 7
14265: PUSH
14266: LD_INT 0
14268: GREATER
14269: AND
14270: IFFALSE 14340
// begin for i in turretsList do
14272: LD_ADDR_VAR 0 4
14276: PUSH
14277: LD_VAR 0 6
14281: PUSH
14282: FOR_IN
14283: IFFALSE 14338
// begin for j in enemyBuildings do
14285: LD_ADDR_VAR 0 5
14289: PUSH
14290: LD_VAR 0 7
14294: PUSH
14295: FOR_IN
14296: IFFALSE 14334
// begin if GetDistUnits ( i , j ) < 20 then
14298: LD_VAR 0 4
14302: PPUSH
14303: LD_VAR 0 5
14307: PPUSH
14308: CALL_OW 296
14312: PUSH
14313: LD_INT 20
14315: LESS
14316: IFFALSE 14332
// begin ComAttackUnit ( i , j ) ;
14318: LD_VAR 0 4
14322: PPUSH
14323: LD_VAR 0 5
14327: PPUSH
14328: CALL_OW 115
// end ; end ;
14332: GO 14295
14334: POP
14335: POP
// end ;
14336: GO 14282
14338: POP
14339: POP
// end ; end ;
14340: LD_VAR 0 3
14344: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14345: LD_INT 0
14347: PPUSH
14348: PPUSH
14349: PPUSH
14350: PPUSH
14351: PPUSH
14352: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14353: LD_ADDR_VAR 0 7
14357: PUSH
14358: LD_VAR 0 2
14362: PPUSH
14363: LD_INT 22
14365: PUSH
14366: LD_VAR 0 1
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: PUSH
14375: LD_INT 21
14377: PUSH
14378: LD_INT 2
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PUSH
14385: LD_INT 34
14387: PUSH
14388: LD_INT 52
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: LIST
14399: PPUSH
14400: CALL_OW 70
14404: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14405: LD_ADDR_VAR 0 8
14409: PUSH
14410: LD_VAR 0 2
14414: PPUSH
14415: LD_INT 22
14417: PUSH
14418: LD_VAR 0 1
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 21
14429: PUSH
14430: LD_INT 3
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 3
14439: PUSH
14440: LD_INT 24
14442: PUSH
14443: LD_INT 1000
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: LIST
14458: PUSH
14459: EMPTY
14460: LIST
14461: PPUSH
14462: CALL_OW 70
14466: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14467: LD_VAR 0 8
14471: PUSH
14472: LD_INT 0
14474: GREATER
14475: PUSH
14476: LD_VAR 0 7
14480: PPUSH
14481: LD_INT 24
14483: PUSH
14484: LD_INT 750
14486: PUSH
14487: EMPTY
14488: LIST
14489: LIST
14490: PPUSH
14491: CALL_OW 72
14495: PUSH
14496: LD_INT 0
14498: GREATER
14499: AND
14500: IFFALSE 14520
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14502: LD_VAR 0 7
14506: PPUSH
14507: LD_VAR 0 8
14511: PUSH
14512: LD_INT 1
14514: ARRAY
14515: PPUSH
14516: CALL_OW 130
// end ;
14520: LD_VAR 0 3
14524: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14525: LD_INT 0
14527: PPUSH
14528: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14529: LD_INT 22
14531: PUSH
14532: LD_VAR 0 1
14536: PUSH
14537: EMPTY
14538: LIST
14539: LIST
14540: PUSH
14541: LD_INT 21
14543: PUSH
14544: LD_INT 2
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: PPUSH
14555: CALL_OW 69
14559: PUSH
14560: LD_INT 18
14562: PPUSH
14563: LD_INT 22
14565: PUSH
14566: LD_VAR 0 1
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PUSH
14575: LD_INT 21
14577: PUSH
14578: LD_INT 2
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PPUSH
14589: CALL_OW 70
14593: PUSH
14594: LD_VAR 0 3
14598: LESSEQUAL
14599: DIFF
14600: IFFALSE 14667
// for i = 1 to vehCount do
14602: LD_ADDR_VAR 0 9
14606: PUSH
14607: DOUBLE
14608: LD_INT 1
14610: DEC
14611: ST_TO_ADDR
14612: LD_VAR 0 3
14616: PUSH
14617: FOR_TO
14618: IFFALSE 14665
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14620: LD_VAR 0 2
14624: PPUSH
14625: LD_VAR 0 7
14629: PPUSH
14630: LD_VAR 0 5
14634: PPUSH
14635: LD_VAR 0 6
14639: PPUSH
14640: LD_VAR 0 4
14644: PUSH
14645: LD_INT 1
14647: PPUSH
14648: LD_VAR 0 4
14652: PPUSH
14653: CALL_OW 12
14657: ARRAY
14658: PPUSH
14659: CALL_OW 185
14663: GO 14617
14665: POP
14666: POP
// end ;
14667: LD_VAR 0 8
14671: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14672: LD_INT 0
14674: PPUSH
14675: PPUSH
14676: PPUSH
14677: PPUSH
14678: PPUSH
14679: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14680: LD_EXP 39
14684: PUSH
14685: LD_INT 3
14687: PUSH
14688: LD_INT 4
14690: PUSH
14691: LD_INT 4
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: LIST
14698: PUSH
14699: LD_OWVAR 67
14703: ARRAY
14704: GREATEREQUAL
14705: PUSH
14706: LD_EXP 40
14710: PUSH
14711: LD_INT 1
14713: PUSH
14714: LD_INT 2
14716: PUSH
14717: LD_INT 2
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: LIST
14724: PUSH
14725: LD_OWVAR 67
14729: ARRAY
14730: GREATEREQUAL
14731: AND
14732: IFFALSE 14965
// begin repeat wait ( 0 0$3 ) ;
14734: LD_INT 105
14736: PPUSH
14737: CALL_OW 67
// for j in russianTanks do
14741: LD_ADDR_VAR 0 4
14745: PUSH
14746: LD_EXP 39
14750: PUSH
14751: FOR_IN
14752: IFFALSE 14953
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14754: LD_ADDR_VAR 0 6
14758: PUSH
14759: LD_INT 81
14761: PUSH
14762: LD_VAR 0 1
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: LD_INT 101
14773: PUSH
14774: LD_INT 1
14776: PUSH
14777: EMPTY
14778: LIST
14779: LIST
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PPUSH
14785: CALL_OW 69
14789: PPUSH
14790: LD_VAR 0 4
14794: PPUSH
14795: CALL_OW 74
14799: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
14800: LD_ADDR_VAR 0 7
14804: PUSH
14805: LD_INT 81
14807: PUSH
14808: LD_VAR 0 1
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 101
14819: PUSH
14820: LD_INT 1
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 2
14829: PUSH
14830: LD_INT 59
14832: PUSH
14833: EMPTY
14834: LIST
14835: PUSH
14836: LD_INT 21
14838: PUSH
14839: LD_INT 1
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 21
14848: PUSH
14849: LD_INT 2
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: LIST
14866: PUSH
14867: EMPTY
14868: LIST
14869: PPUSH
14870: CALL_OW 69
14874: PPUSH
14875: LD_VAR 0 4
14879: PPUSH
14880: CALL_OW 74
14884: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
14885: LD_VAR 0 4
14889: PPUSH
14890: LD_VAR 0 6
14894: PPUSH
14895: CALL_OW 296
14899: PUSH
14900: LD_INT 8
14902: PLUS
14903: PUSH
14904: LD_VAR 0 4
14908: PPUSH
14909: LD_VAR 0 7
14913: PPUSH
14914: CALL_OW 296
14918: LESS
14919: IFFALSE 14937
// ComAttackUnit ( j , target1 ) else
14921: LD_VAR 0 4
14925: PPUSH
14926: LD_VAR 0 6
14930: PPUSH
14931: CALL_OW 115
14935: GO 14951
// ComAttackUnit ( j , target2 ) ;
14937: LD_VAR 0 4
14941: PPUSH
14942: LD_VAR 0 7
14946: PPUSH
14947: CALL_OW 115
// end ;
14951: GO 14751
14953: POP
14954: POP
// until russianTanks = 0 ;
14955: LD_EXP 39
14959: PUSH
14960: LD_INT 0
14962: EQUAL
14963: IFFALSE 14734
// end ; end ;
14965: LD_VAR 0 2
14969: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
14970: LD_INT 0
14972: PPUSH
14973: PPUSH
14974: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14975: LD_EXP 39
14979: PUSH
14980: LD_INT 1
14982: GREATEREQUAL
14983: PUSH
14984: LD_EXP 40
14988: PUSH
14989: LD_INT 1
14991: PUSH
14992: LD_INT 2
14994: PUSH
14995: LD_INT 2
14997: PUSH
14998: EMPTY
14999: LIST
15000: LIST
15001: LIST
15002: PUSH
15003: LD_OWVAR 67
15007: ARRAY
15008: GREATEREQUAL
15009: AND
15010: IFFALSE 15126
// repeat wait ( 0 0$3 ) ;
15012: LD_INT 105
15014: PPUSH
15015: CALL_OW 67
// if russianTimeLapsers > 0 then
15019: LD_EXP 40
15023: PUSH
15024: LD_INT 0
15026: GREATER
15027: IFFALSE 15116
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
15029: LD_ADDR_VAR 0 3
15033: PUSH
15034: LD_EXP 40
15038: PPUSH
15039: LD_INT 3
15041: PUSH
15042: LD_INT 60
15044: PUSH
15045: EMPTY
15046: LIST
15047: PUSH
15048: EMPTY
15049: LIST
15050: LIST
15051: PPUSH
15052: CALL_OW 72
15056: PUSH
15057: FOR_IN
15058: IFFALSE 15114
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , side ] ) , j ) ;
15060: LD_ADDR_VAR 0 4
15064: PUSH
15065: LD_INT 81
15067: PUSH
15068: LD_VAR 0 1
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PPUSH
15077: CALL_OW 69
15081: PPUSH
15082: LD_VAR 0 3
15086: PPUSH
15087: CALL_OW 74
15091: ST_TO_ADDR
// if nearUnit then
15092: LD_VAR 0 4
15096: IFFALSE 15112
// ComMoveUnit ( j , nearUnit ) ;
15098: LD_VAR 0 3
15102: PPUSH
15103: LD_VAR 0 4
15107: PPUSH
15108: CALL_OW 112
// end ;
15112: GO 15057
15114: POP
15115: POP
// until russianTimeLapsers = 0 ;
15116: LD_EXP 40
15120: PUSH
15121: LD_INT 0
15123: EQUAL
15124: IFFALSE 15012
// end ;
15126: LD_VAR 0 2
15130: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15131: LD_INT 0
15133: PPUSH
15134: PPUSH
15135: PPUSH
15136: PPUSH
15137: PPUSH
15138: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15139: LD_ADDR_VAR 0 6
15143: PUSH
15144: LD_INT 22
15146: PUSH
15147: LD_VAR 0 1
15151: PUSH
15152: EMPTY
15153: LIST
15154: LIST
15155: PUSH
15156: LD_INT 25
15158: PUSH
15159: LD_INT 9
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: PPUSH
15170: CALL_OW 69
15174: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15175: LD_ADDR_VAR 0 7
15179: PUSH
15180: LD_INT 81
15182: PUSH
15183: LD_VAR 0 1
15187: PUSH
15188: EMPTY
15189: LIST
15190: LIST
15191: PUSH
15192: LD_INT 3
15194: PUSH
15195: LD_INT 21
15197: PUSH
15198: LD_INT 3
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PPUSH
15213: CALL_OW 69
15217: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15218: LD_ADDR_VAR 0 4
15222: PUSH
15223: LD_INT 1
15225: PPUSH
15226: LD_INT 3
15228: PPUSH
15229: CALL_OW 12
15233: ST_TO_ADDR
// for i = 1 to list do
15234: LD_ADDR_VAR 0 5
15238: PUSH
15239: DOUBLE
15240: LD_INT 1
15242: DEC
15243: ST_TO_ADDR
15244: LD_VAR 0 6
15248: PUSH
15249: FOR_TO
15250: IFFALSE 15452
// for ta in filter do
15252: LD_ADDR_VAR 0 3
15256: PUSH
15257: LD_VAR 0 7
15261: PUSH
15262: FOR_IN
15263: IFFALSE 15448
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15265: LD_VAR 0 6
15269: PUSH
15270: LD_VAR 0 5
15274: ARRAY
15275: PPUSH
15276: LD_VAR 0 3
15280: PPUSH
15281: CALL_OW 296
15285: PUSH
15286: LD_INT 15
15288: LESSEQUAL
15289: IFFALSE 15446
// begin case c of 1 :
15291: LD_VAR 0 4
15295: PUSH
15296: LD_INT 1
15298: DOUBLE
15299: EQUAL
15300: IFTRUE 15304
15302: GO 15342
15304: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15305: LD_VAR 0 6
15309: PUSH
15310: LD_VAR 0 5
15314: ARRAY
15315: PPUSH
15316: LD_VAR 0 3
15320: PPUSH
15321: CALL_OW 250
15325: PPUSH
15326: LD_VAR 0 3
15330: PPUSH
15331: CALL_OW 251
15335: PPUSH
15336: CALL_OW 154
15340: GO 15446
15342: LD_INT 2
15344: DOUBLE
15345: EQUAL
15346: IFTRUE 15350
15348: GO 15414
15350: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15351: LD_VAR 0 6
15355: PUSH
15356: LD_VAR 0 5
15360: ARRAY
15361: PPUSH
15362: LD_VAR 0 3
15366: PPUSH
15367: CALL_OW 250
15371: PUSH
15372: LD_INT 1
15374: NEG
15375: PPUSH
15376: LD_INT 1
15378: PPUSH
15379: CALL_OW 12
15383: PLUS
15384: PPUSH
15385: LD_VAR 0 3
15389: PPUSH
15390: CALL_OW 251
15394: PUSH
15395: LD_INT 1
15397: NEG
15398: PPUSH
15399: LD_INT 1
15401: PPUSH
15402: CALL_OW 12
15406: PLUS
15407: PPUSH
15408: CALL_OW 153
15412: GO 15446
15414: LD_INT 3
15416: DOUBLE
15417: EQUAL
15418: IFTRUE 15422
15420: GO 15445
15422: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15423: LD_VAR 0 6
15427: PUSH
15428: LD_VAR 0 5
15432: ARRAY
15433: PPUSH
15434: LD_VAR 0 3
15438: PPUSH
15439: CALL_OW 115
15443: GO 15446
15445: POP
// end ; end ;
15446: GO 15262
15448: POP
15449: POP
15450: GO 15249
15452: POP
15453: POP
// end ;
15454: LD_VAR 0 2
15458: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15459: LD_INT 0
15461: PPUSH
15462: PPUSH
15463: PPUSH
15464: PPUSH
// r := 100 ;
15465: LD_ADDR_VAR 0 5
15469: PUSH
15470: LD_INT 100
15472: ST_TO_ADDR
// x := 0 ;
15473: LD_ADDR_VAR 0 6
15477: PUSH
15478: LD_INT 0
15480: ST_TO_ADDR
// while ( x < n ) do
15481: LD_VAR 0 6
15485: PUSH
15486: LD_VAR 0 2
15490: LESS
15491: IFFALSE 15778
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15493: LD_ADDR_VAR 0 4
15497: PUSH
15498: DOUBLE
15499: LD_INT 1
15501: DEC
15502: ST_TO_ADDR
15503: LD_VAR 0 1
15507: PPUSH
15508: LD_INT 0
15510: PPUSH
15511: CALL_OW 517
15515: PUSH
15516: LD_INT 1
15518: ARRAY
15519: PUSH
15520: FOR_TO
15521: IFFALSE 15774
// begin if r > 50 then
15523: LD_VAR 0 5
15527: PUSH
15528: LD_INT 50
15530: GREATER
15531: IFFALSE 15750
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15533: LD_VAR 0 1
15537: PPUSH
15538: LD_INT 0
15540: PPUSH
15541: CALL_OW 517
15545: PUSH
15546: LD_INT 1
15548: ARRAY
15549: PUSH
15550: LD_VAR 0 4
15554: ARRAY
15555: PPUSH
15556: LD_VAR 0 1
15560: PPUSH
15561: LD_INT 0
15563: PPUSH
15564: CALL_OW 517
15568: PUSH
15569: LD_INT 2
15571: ARRAY
15572: PUSH
15573: LD_VAR 0 4
15577: ARRAY
15578: PPUSH
15579: CALL_OW 458
15583: NOT
15584: IFFALSE 15734
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15586: LD_VAR 0 1
15590: PPUSH
15591: LD_INT 0
15593: PPUSH
15594: CALL_OW 517
15598: PUSH
15599: LD_INT 1
15601: ARRAY
15602: PUSH
15603: LD_VAR 0 4
15607: ARRAY
15608: PPUSH
15609: LD_VAR 0 1
15613: PPUSH
15614: LD_INT 0
15616: PPUSH
15617: CALL_OW 517
15621: PUSH
15622: LD_INT 2
15624: ARRAY
15625: PUSH
15626: LD_VAR 0 4
15630: ARRAY
15631: PPUSH
15632: LD_INT 8
15634: PPUSH
15635: LD_INT 0
15637: PPUSH
15638: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15642: LD_ADDR_EXP 44
15646: PUSH
15647: LD_EXP 44
15651: PPUSH
15652: LD_INT 1
15654: PPUSH
15655: LD_VAR 0 1
15659: PPUSH
15660: LD_INT 0
15662: PPUSH
15663: CALL_OW 517
15667: PUSH
15668: LD_INT 1
15670: ARRAY
15671: PUSH
15672: LD_VAR 0 4
15676: ARRAY
15677: PUSH
15678: LD_VAR 0 1
15682: PPUSH
15683: LD_INT 0
15685: PPUSH
15686: CALL_OW 517
15690: PUSH
15691: LD_INT 2
15693: ARRAY
15694: PUSH
15695: LD_VAR 0 4
15699: ARRAY
15700: PUSH
15701: EMPTY
15702: LIST
15703: LIST
15704: PPUSH
15705: CALL_OW 2
15709: ST_TO_ADDR
// r := 0 ;
15710: LD_ADDR_VAR 0 5
15714: PUSH
15715: LD_INT 0
15717: ST_TO_ADDR
// x := x + 1 ;
15718: LD_ADDR_VAR 0 6
15722: PUSH
15723: LD_VAR 0 6
15727: PUSH
15728: LD_INT 1
15730: PLUS
15731: ST_TO_ADDR
// end else
15732: GO 15748
// r := r + 35 ;
15734: LD_ADDR_VAR 0 5
15738: PUSH
15739: LD_VAR 0 5
15743: PUSH
15744: LD_INT 35
15746: PLUS
15747: ST_TO_ADDR
// end else
15748: GO 15772
// r := r + rand ( 10 , 25 ) ;
15750: LD_ADDR_VAR 0 5
15754: PUSH
15755: LD_VAR 0 5
15759: PUSH
15760: LD_INT 10
15762: PPUSH
15763: LD_INT 25
15765: PPUSH
15766: CALL_OW 12
15770: PLUS
15771: ST_TO_ADDR
// end ;
15772: GO 15520
15774: POP
15775: POP
15776: GO 15481
// end ;
15778: LD_VAR 0 3
15782: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15783: LD_INT 0
15785: PPUSH
15786: PPUSH
15787: PPUSH
15788: PPUSH
// tmpTab = [ ] ;
15789: LD_ADDR_VAR 0 6
15793: PUSH
15794: EMPTY
15795: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15796: LD_INT 22
15798: PUSH
15799: LD_VAR 0 1
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: LD_INT 30
15810: PUSH
15811: LD_INT 32
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: EMPTY
15819: LIST
15820: LIST
15821: PPUSH
15822: CALL_OW 69
15826: PUSH
15827: LD_INT 0
15829: GREATER
15830: IFFALSE 15913
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15832: LD_ADDR_VAR 0 4
15836: PUSH
15837: LD_INT 22
15839: PUSH
15840: LD_VAR 0 1
15844: PUSH
15845: EMPTY
15846: LIST
15847: LIST
15848: PUSH
15849: LD_INT 30
15851: PUSH
15852: LD_INT 32
15854: PUSH
15855: EMPTY
15856: LIST
15857: LIST
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: PPUSH
15863: CALL_OW 69
15867: PUSH
15868: FOR_IN
15869: IFFALSE 15911
// begin for j in UnitsInside ( i ) do
15871: LD_ADDR_VAR 0 5
15875: PUSH
15876: LD_VAR 0 4
15880: PPUSH
15881: CALL_OW 313
15885: PUSH
15886: FOR_IN
15887: IFFALSE 15907
// tmpTab = tmpTab ^ j ;
15889: LD_ADDR_VAR 0 6
15893: PUSH
15894: LD_VAR 0 6
15898: PUSH
15899: LD_VAR 0 5
15903: ADD
15904: ST_TO_ADDR
15905: GO 15886
15907: POP
15908: POP
// end ;
15909: GO 15868
15911: POP
15912: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15913: LD_VAR 0 6
15917: PPUSH
15918: LD_VAR 0 2
15922: PPUSH
15923: CALL_OW 250
15927: PPUSH
15928: LD_VAR 0 2
15932: PPUSH
15933: CALL_OW 251
15937: PPUSH
15938: CALL_OW 114
// end ;
15942: LD_VAR 0 3
15946: RET
// export function PrepareNature ; var i , un ; begin
15947: LD_INT 0
15949: PPUSH
15950: PPUSH
15951: PPUSH
// uc_side := 0 ;
15952: LD_ADDR_OWVAR 20
15956: PUSH
15957: LD_INT 0
15959: ST_TO_ADDR
// uc_nation := 0 ;
15960: LD_ADDR_OWVAR 21
15964: PUSH
15965: LD_INT 0
15967: ST_TO_ADDR
// InitHc ;
15968: CALL_OW 19
// hc_class := class_fish ;
15972: LD_ADDR_OWVAR 28
15976: PUSH
15977: LD_INT 20
15979: ST_TO_ADDR
// for i = 1 to 6 do
15980: LD_ADDR_VAR 0 2
15984: PUSH
15985: DOUBLE
15986: LD_INT 1
15988: DEC
15989: ST_TO_ADDR
15990: LD_INT 6
15992: PUSH
15993: FOR_TO
15994: IFFALSE 16013
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15996: CALL_OW 44
16000: PPUSH
16001: LD_INT 23
16003: PPUSH
16004: LD_INT 0
16006: PPUSH
16007: CALL_OW 49
16011: GO 15993
16013: POP
16014: POP
// for i = 1 to Difficulty + 2 do
16015: LD_ADDR_VAR 0 2
16019: PUSH
16020: DOUBLE
16021: LD_INT 1
16023: DEC
16024: ST_TO_ADDR
16025: LD_OWVAR 67
16029: PUSH
16030: LD_INT 2
16032: PLUS
16033: PUSH
16034: FOR_TO
16035: IFFALSE 16144
// begin hc_sex = sex_male ;
16037: LD_ADDR_OWVAR 27
16041: PUSH
16042: LD_INT 1
16044: ST_TO_ADDR
// uc_side = 0 ;
16045: LD_ADDR_OWVAR 20
16049: PUSH
16050: LD_INT 0
16052: ST_TO_ADDR
// uc_nation = nation_nature ;
16053: LD_ADDR_OWVAR 21
16057: PUSH
16058: LD_INT 0
16060: ST_TO_ADDR
// hc_class = class_tiger ;
16061: LD_ADDR_OWVAR 28
16065: PUSH
16066: LD_INT 14
16068: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16069: LD_ADDR_OWVAR 31
16073: PUSH
16074: LD_EXP 37
16078: PUSH
16079: LD_INT 0
16081: PUSH
16082: LD_INT 0
16084: PUSH
16085: LD_INT 0
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
16094: LD_ADDR_OWVAR 35
16098: PUSH
16099: LD_INT 5
16101: NEG
16102: PPUSH
16103: LD_INT 5
16105: PPUSH
16106: CALL_OW 12
16110: PUSH
16111: LD_OWVAR 67
16115: MUL
16116: ST_TO_ADDR
// un = CreateHuman ;
16117: LD_ADDR_VAR 0 3
16121: PUSH
16122: CALL_OW 44
16126: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16127: LD_VAR 0 3
16131: PPUSH
16132: LD_INT 24
16134: PPUSH
16135: LD_INT 0
16137: PPUSH
16138: CALL_OW 49
// end ;
16142: GO 16034
16144: POP
16145: POP
// for i = 1 to rand ( 3 , 4 ) do
16146: LD_ADDR_VAR 0 2
16150: PUSH
16151: DOUBLE
16152: LD_INT 1
16154: DEC
16155: ST_TO_ADDR
16156: LD_INT 3
16158: PPUSH
16159: LD_INT 4
16161: PPUSH
16162: CALL_OW 12
16166: PUSH
16167: FOR_TO
16168: IFFALSE 16260
// begin hc_sex = sex_male ;
16170: LD_ADDR_OWVAR 27
16174: PUSH
16175: LD_INT 1
16177: ST_TO_ADDR
// uc_side = 0 ;
16178: LD_ADDR_OWVAR 20
16182: PUSH
16183: LD_INT 0
16185: ST_TO_ADDR
// uc_nation = nation_nature ;
16186: LD_ADDR_OWVAR 21
16190: PUSH
16191: LD_INT 0
16193: ST_TO_ADDR
// hc_class = 18 ;
16194: LD_ADDR_OWVAR 28
16198: PUSH
16199: LD_INT 18
16201: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
16202: LD_ADDR_OWVAR 31
16206: PUSH
16207: LD_INT 0
16209: PUSH
16210: LD_INT 0
16212: PUSH
16213: LD_INT 0
16215: PUSH
16216: LD_INT 0
16218: PUSH
16219: EMPTY
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: ST_TO_ADDR
// hc_agressivity = 0 ;
16225: LD_ADDR_OWVAR 35
16229: PUSH
16230: LD_INT 0
16232: ST_TO_ADDR
// un = CreateHuman ;
16233: LD_ADDR_VAR 0 3
16237: PUSH
16238: CALL_OW 44
16242: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16243: LD_VAR 0 3
16247: PPUSH
16248: LD_INT 24
16250: PPUSH
16251: LD_INT 0
16253: PPUSH
16254: CALL_OW 49
// end ;
16258: GO 16167
16260: POP
16261: POP
// for i = 1 to rand ( 1 , 3 ) do
16262: LD_ADDR_VAR 0 2
16266: PUSH
16267: DOUBLE
16268: LD_INT 1
16270: DEC
16271: ST_TO_ADDR
16272: LD_INT 1
16274: PPUSH
16275: LD_INT 3
16277: PPUSH
16278: CALL_OW 12
16282: PUSH
16283: FOR_TO
16284: IFFALSE 16432
// begin hc_sex = sex_male ;
16286: LD_ADDR_OWVAR 27
16290: PUSH
16291: LD_INT 1
16293: ST_TO_ADDR
// uc_side = 0 ;
16294: LD_ADDR_OWVAR 20
16298: PUSH
16299: LD_INT 0
16301: ST_TO_ADDR
// uc_nation = nation_nature ;
16302: LD_ADDR_OWVAR 21
16306: PUSH
16307: LD_INT 0
16309: ST_TO_ADDR
// hc_class = class_apeman ;
16310: LD_ADDR_OWVAR 28
16314: PUSH
16315: LD_INT 12
16317: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
16318: LD_ADDR_OWVAR 31
16322: PUSH
16323: LD_EXP 36
16327: PPUSH
16328: LD_EXP 37
16332: PPUSH
16333: CALL_OW 12
16337: PUSH
16338: LD_EXP 36
16342: PPUSH
16343: LD_EXP 37
16347: PPUSH
16348: CALL_OW 12
16352: PUSH
16353: LD_EXP 36
16357: PPUSH
16358: LD_EXP 37
16362: PPUSH
16363: CALL_OW 12
16367: PUSH
16368: LD_EXP 36
16372: PPUSH
16373: LD_EXP 37
16377: PPUSH
16378: CALL_OW 12
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
16389: LD_ADDR_OWVAR 35
16393: PUSH
16394: LD_INT 1
16396: PPUSH
16397: LD_INT 20
16399: PPUSH
16400: CALL_OW 12
16404: ST_TO_ADDR
// un = CreateHuman ;
16405: LD_ADDR_VAR 0 3
16409: PUSH
16410: CALL_OW 44
16414: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16415: LD_VAR 0 3
16419: PPUSH
16420: LD_INT 24
16422: PPUSH
16423: LD_INT 0
16425: PPUSH
16426: CALL_OW 49
// end ;
16430: GO 16283
16432: POP
16433: POP
// end ; end_of_file
16434: LD_VAR 0 1
16438: RET
// on UnitDestroyed ( unit ) do var i ;
16439: LD_INT 0
16441: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16442: LD_VAR 0 1
16446: PPUSH
16447: CALL_OW 255
16451: PUSH
16452: LD_INT 3
16454: EQUAL
16455: PUSH
16456: LD_VAR 0 1
16460: PPUSH
16461: CALL_OW 247
16465: PUSH
16466: LD_INT 1
16468: EQUAL
16469: AND
16470: IFFALSE 16534
// begin for i in RuScientists do
16472: LD_ADDR_VAR 0 2
16476: PUSH
16477: LD_EXP 34
16481: PUSH
16482: FOR_IN
16483: IFFALSE 16532
// if i = unit then
16485: LD_VAR 0 2
16489: PUSH
16490: LD_VAR 0 1
16494: EQUAL
16495: IFFALSE 16530
// begin RuScientists = RuScientists diff [ unit ] ;
16497: LD_ADDR_EXP 34
16501: PUSH
16502: LD_EXP 34
16506: PUSH
16507: LD_VAR 0 1
16511: PUSH
16512: EMPTY
16513: LIST
16514: DIFF
16515: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16516: LD_ADDR_EXP 35
16520: PUSH
16521: LD_EXP 35
16525: PUSH
16526: LD_INT 1
16528: PLUS
16529: ST_TO_ADDR
// end ;
16530: GO 16482
16532: POP
16533: POP
// end ; end ;
16534: PPOPN 2
16536: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16537: LD_VAR 0 1
16541: PUSH
16542: LD_INT 10
16544: EQUAL
16545: PUSH
16546: LD_VAR 0 2
16550: PPUSH
16551: CALL_OW 255
16555: PUSH
16556: LD_INT 1
16558: EQUAL
16559: AND
16560: PUSH
16561: LD_EXP 47
16565: PUSH
16566: LD_INT 0
16568: EQUAL
16569: AND
16570: IFFALSE 16682
// begin eventVar1 = 1 ;
16572: LD_ADDR_EXP 47
16576: PUSH
16577: LD_INT 1
16579: ST_TO_ADDR
// teleportExplored = 1 ;
16580: LD_ADDR_EXP 33
16584: PUSH
16585: LD_INT 1
16587: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16588: LD_STRING M2a
16590: PPUSH
16591: CALL_OW 337
// wait ( 0 0$2 ) ;
16595: LD_INT 70
16597: PPUSH
16598: CALL_OW 67
// DialogueOn ;
16602: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16606: LD_INT 22
16608: PUSH
16609: LD_INT 1
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: LD_INT 21
16618: PUSH
16619: LD_INT 1
16621: PUSH
16622: EMPTY
16623: LIST
16624: LIST
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PPUSH
16630: CALL_OW 69
16634: PPUSH
16635: LD_STRING DT3a-Sol1-1
16637: PPUSH
16638: LD_STRING DT3a-FSol1-1
16640: PPUSH
16641: CALL 12175 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16645: LD_EXP 1
16649: PPUSH
16650: LD_STRING DT3a-JMM-1
16652: PPUSH
16653: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16657: LD_VAR 0 2
16661: PPUSH
16662: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16666: LD_EXP 1
16670: PPUSH
16671: LD_STRING DT3a-JMM-1a
16673: PPUSH
16674: CALL_OW 88
// DialogueOff ;
16678: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16682: LD_VAR 0 1
16686: PUSH
16687: LD_INT 10
16689: EQUAL
16690: PUSH
16691: LD_VAR 0 2
16695: PPUSH
16696: CALL_OW 247
16700: PUSH
16701: LD_INT 2
16703: EQUAL
16704: AND
16705: PUSH
16706: LD_VAR 0 2
16710: PPUSH
16711: CALL_OW 255
16715: PUSH
16716: LD_INT 3
16718: EQUAL
16719: AND
16720: PUSH
16721: LD_EXP 28
16725: PUSH
16726: LD_INT 0
16728: EQUAL
16729: AND
16730: IFFALSE 16747
// begin wait ( 0 0$3 ) ;
16732: LD_INT 105
16734: PPUSH
16735: CALL_OW 67
// vehicleTeleported = 1 ;
16739: LD_ADDR_EXP 28
16743: PUSH
16744: LD_INT 1
16746: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16747: LD_VAR 0 1
16751: PUSH
16752: LD_INT 10
16754: EQUAL
16755: PUSH
16756: LD_VAR 0 2
16760: PPUSH
16761: CALL_OW 247
16765: PUSH
16766: LD_INT 2
16768: EQUAL
16769: AND
16770: PUSH
16771: LD_VAR 0 2
16775: PPUSH
16776: CALL_OW 255
16780: PUSH
16781: LD_INT 3
16783: EQUAL
16784: AND
16785: PUSH
16786: LD_EXP 28
16790: PUSH
16791: LD_INT 2
16793: EQUAL
16794: AND
16795: IFFALSE 16812
// begin wait ( 0 0$3 ) ;
16797: LD_INT 105
16799: PPUSH
16800: CALL_OW 67
// vehicleTeleported = 3 ;
16804: LD_ADDR_EXP 28
16808: PUSH
16809: LD_INT 3
16811: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16812: LD_VAR 0 1
16816: PUSH
16817: LD_INT 10
16819: EQUAL
16820: PUSH
16821: LD_VAR 0 2
16825: PPUSH
16826: CALL_OW 247
16830: PUSH
16831: LD_INT 2
16833: EQUAL
16834: AND
16835: PUSH
16836: LD_VAR 0 2
16840: PPUSH
16841: CALL_OW 255
16845: PUSH
16846: LD_INT 3
16848: EQUAL
16849: AND
16850: IFFALSE 16866
// tpCounter = tpCounter + 1 ;
16852: LD_ADDR_EXP 29
16856: PUSH
16857: LD_EXP 29
16861: PUSH
16862: LD_INT 1
16864: PLUS
16865: ST_TO_ADDR
// end ;
16866: PPOPN 2
16868: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
16869: LD_VAR 0 2
16873: PUSH
16874: LD_INT 21
16876: EQUAL
16877: PUSH
16878: LD_VAR 0 2
16882: PUSH
16883: LD_INT 112
16885: EQUAL
16886: OR
16887: IFFALSE 17065
// if GetSide ( vehicle ) = 3 then
16889: LD_VAR 0 1
16893: PPUSH
16894: CALL_OW 255
16898: PUSH
16899: LD_INT 3
16901: EQUAL
16902: IFFALSE 17065
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16904: LD_VAR 0 1
16908: PPUSH
16909: CALL_OW 264
16913: PUSH
16914: LD_INT 46
16916: EQUAL
16917: PUSH
16918: LD_VAR 0 1
16922: PPUSH
16923: CALL_OW 264
16927: PUSH
16928: LD_INT 45
16930: EQUAL
16931: OR
16932: PUSH
16933: LD_VAR 0 1
16937: PPUSH
16938: CALL_OW 264
16942: PUSH
16943: LD_INT 44
16945: EQUAL
16946: OR
16947: IFFALSE 17022
// begin russianTanks = russianTanks ^ vehicle ;
16949: LD_ADDR_EXP 39
16953: PUSH
16954: LD_EXP 39
16958: PUSH
16959: LD_VAR 0 1
16963: ADD
16964: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
16965: LD_EXP 43
16969: PUSH
16970: LD_INT 1
16972: EQUAL
16973: PUSH
16974: LD_EXP 43
16978: PUSH
16979: LD_INT 0
16981: EQUAL
16982: OR
16983: IFFALSE 16997
// ComEnterUnit ( vehicle , ruteleprt ) ;
16985: LD_VAR 0 1
16989: PPUSH
16990: LD_INT 10
16992: PPUSH
16993: CALL_OW 120
// if attackTactic = 2 then
16997: LD_EXP 43
17001: PUSH
17002: LD_INT 2
17004: EQUAL
17005: IFFALSE 17022
// ComMoveXY ( vehicle , 88 , 69 ) ;
17007: LD_VAR 0 1
17011: PPUSH
17012: LD_INT 88
17014: PPUSH
17015: LD_INT 69
17017: PPUSH
17018: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
17022: LD_VAR 0 1
17026: PPUSH
17027: CALL_OW 264
17031: PUSH
17032: LD_INT 49
17034: EQUAL
17035: IFFALSE 17065
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
17037: LD_ADDR_EXP 40
17041: PUSH
17042: LD_EXP 40
17046: PUSH
17047: LD_VAR 0 1
17051: ADD
17052: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
17053: LD_VAR 0 1
17057: PPUSH
17058: LD_INT 137
17060: PPUSH
17061: CALL_OW 120
// end ; end ; end ;
17065: PPOPN 2
17067: END
// on UnitGoesToRed ( unit ) do var i ;
17068: LD_INT 0
17070: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17071: LD_VAR 0 1
17075: PPUSH
17076: CALL_OW 255
17080: PUSH
17081: LD_INT 3
17083: EQUAL
17084: PUSH
17085: LD_VAR 0 1
17089: PPUSH
17090: CALL_OW 247
17094: PUSH
17095: LD_INT 2
17097: EQUAL
17098: AND
17099: IFFALSE 17217
// begin if russianTanks > 0 then
17101: LD_EXP 39
17105: PUSH
17106: LD_INT 0
17108: GREATER
17109: IFFALSE 17159
// for i in russianTanks do
17111: LD_ADDR_VAR 0 2
17115: PUSH
17116: LD_EXP 39
17120: PUSH
17121: FOR_IN
17122: IFFALSE 17157
// if i = unit then
17124: LD_VAR 0 2
17128: PUSH
17129: LD_VAR 0 1
17133: EQUAL
17134: IFFALSE 17155
// russianTanks = russianTanks diff [ unit ] ;
17136: LD_ADDR_EXP 39
17140: PUSH
17141: LD_EXP 39
17145: PUSH
17146: LD_VAR 0 1
17150: PUSH
17151: EMPTY
17152: LIST
17153: DIFF
17154: ST_TO_ADDR
17155: GO 17121
17157: POP
17158: POP
// if russianTimeLapsers > 0 then
17159: LD_EXP 40
17163: PUSH
17164: LD_INT 0
17166: GREATER
17167: IFFALSE 17217
// for i in russianTimeLapsers do
17169: LD_ADDR_VAR 0 2
17173: PUSH
17174: LD_EXP 40
17178: PUSH
17179: FOR_IN
17180: IFFALSE 17215
// if i = unit then
17182: LD_VAR 0 2
17186: PUSH
17187: LD_VAR 0 1
17191: EQUAL
17192: IFFALSE 17213
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
17194: LD_ADDR_EXP 40
17198: PUSH
17199: LD_EXP 40
17203: PUSH
17204: LD_VAR 0 1
17208: PUSH
17209: EMPTY
17210: LIST
17211: DIFF
17212: ST_TO_ADDR
17213: GO 17179
17215: POP
17216: POP
// end ; end ;
17217: PPOPN 2
17219: END
// on LeaveVehicle ( vehicle , human ) do var i ;
17220: LD_INT 0
17222: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
17223: LD_VAR 0 2
17227: PPUSH
17228: CALL_OW 255
17232: PUSH
17233: LD_INT 3
17235: EQUAL
17236: PUSH
17237: LD_VAR 0 2
17241: PPUSH
17242: CALL_OW 257
17246: PUSH
17247: LD_INT 3
17249: EQUAL
17250: AND
17251: PUSH
17252: LD_INT 21
17254: PPUSH
17255: CALL_OW 255
17259: PUSH
17260: LD_INT 3
17262: EQUAL
17263: AND
17264: PUSH
17265: LD_INT 21
17267: PPUSH
17268: CALL_OW 302
17272: AND
17273: IFFALSE 17287
// ComEnterUnit ( human , ru_fact ) ;
17275: LD_VAR 0 2
17279: PPUSH
17280: LD_INT 21
17282: PPUSH
17283: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
17287: LD_VAR 0 2
17291: PPUSH
17292: CALL_OW 257
17296: PUSH
17297: LD_INT 4
17299: EQUAL
17300: PUSH
17301: LD_VAR 0 2
17305: PPUSH
17306: CALL_OW 255
17310: PUSH
17311: LD_INT 3
17313: EQUAL
17314: AND
17315: PUSH
17316: LD_EXP 41
17320: PUSH
17321: LD_INT 0
17323: EQUAL
17324: AND
17325: IFFALSE 17387
// for i in RuScientists do
17327: LD_ADDR_VAR 0 3
17331: PUSH
17332: LD_EXP 34
17336: PUSH
17337: FOR_IN
17338: IFFALSE 17385
// if i = human then
17340: LD_VAR 0 3
17344: PUSH
17345: LD_VAR 0 2
17349: EQUAL
17350: IFFALSE 17383
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17352: LD_VAR 0 3
17356: PPUSH
17357: LD_INT 13
17359: PUSH
17360: LD_INT 14
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: PUSH
17367: LD_INT 1
17369: PPUSH
17370: LD_INT 2
17372: PPUSH
17373: CALL_OW 12
17377: ARRAY
17378: PPUSH
17379: CALL_OW 113
17383: GO 17337
17385: POP
17386: POP
// end ;
17387: PPOPN 3
17389: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
17390: LD_INT 0
17392: PPUSH
17393: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
17394: LD_VAR 0 2
17398: PPUSH
17399: CALL_OW 255
17403: PUSH
17404: LD_INT 3
17406: EQUAL
17407: PUSH
17408: LD_VAR 0 2
17412: PPUSH
17413: CALL_OW 257
17417: PUSH
17418: LD_INT 4
17420: EQUAL
17421: AND
17422: IFFALSE 17564
// for i in RuScientists do
17424: LD_ADDR_VAR 0 3
17428: PUSH
17429: LD_EXP 34
17433: PUSH
17434: FOR_IN
17435: IFFALSE 17562
// if i = human then
17437: LD_VAR 0 3
17441: PUSH
17442: LD_VAR 0 2
17446: EQUAL
17447: IFFALSE 17560
// if IsOk ( rutp ) then
17449: LD_INT 137
17451: PPUSH
17452: CALL_OW 302
17456: IFFALSE 17529
// begin rnd = rand ( 1 , 2 ) ;
17458: LD_ADDR_VAR 0 4
17462: PUSH
17463: LD_INT 1
17465: PPUSH
17466: LD_INT 2
17468: PPUSH
17469: CALL_OW 12
17473: ST_TO_ADDR
// if rnd = 1 then
17474: LD_VAR 0 4
17478: PUSH
17479: LD_INT 1
17481: EQUAL
17482: IFFALSE 17496
// ComEnterUnit ( vehicle , rutp ) ;
17484: LD_VAR 0 1
17488: PPUSH
17489: LD_INT 137
17491: PPUSH
17492: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17496: LD_VAR 0 1
17500: PPUSH
17501: LD_INT 13
17503: PUSH
17504: LD_INT 14
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: LD_INT 1
17513: PPUSH
17514: LD_INT 2
17516: PPUSH
17517: CALL_OW 12
17521: ARRAY
17522: PPUSH
17523: CALL_OW 173
// end else
17527: GO 17560
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17529: LD_VAR 0 1
17533: PPUSH
17534: LD_INT 13
17536: PUSH
17537: LD_INT 14
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: PUSH
17544: LD_INT 1
17546: PPUSH
17547: LD_INT 2
17549: PPUSH
17550: CALL_OW 12
17554: ARRAY
17555: PPUSH
17556: CALL_OW 113
// end ;
17560: GO 17434
17562: POP
17563: POP
// end ;
17564: PPOPN 4
17566: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
17567: LD_VAR 0 1
17571: PPUSH
17572: CALL 19752 0 1
// end ; end_of_file
17576: PPOPN 1
17578: END
// every 0 0$1 trigger ruAI = 1 do
17579: LD_EXP 41
17583: PUSH
17584: LD_INT 1
17586: EQUAL
17587: IFFALSE 17716
17589: GO 17591
17591: DISABLE
// begin enable ;
17592: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17593: LD_INT 3
17595: PPUSH
17596: LD_INT 6
17598: PPUSH
17599: LD_INT 9
17601: PPUSH
17602: LD_EXP 38
17606: PPUSH
17607: CALL 13144 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17611: LD_INT 3
17613: PPUSH
17614: LD_INT 4
17616: PPUSH
17617: LD_INT 10
17619: PPUSH
17620: LD_EXP 38
17624: PPUSH
17625: CALL 13144 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
17629: LD_INT 3
17631: PPUSH
17632: LD_INT 9
17634: PPUSH
17635: CALL 14345 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
17639: LD_INT 3
17641: PPUSH
17642: LD_INT 10
17644: PPUSH
17645: CALL 14345 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17649: LD_INT 3
17651: PPUSH
17652: LD_INT 16
17654: PPUSH
17655: LD_INT 9
17657: PPUSH
17658: LD_INT 91
17660: PPUSH
17661: CALL 13535 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17665: LD_INT 3
17667: PPUSH
17668: LD_INT 17
17670: PPUSH
17671: LD_INT 10
17673: PPUSH
17674: LD_INT 47
17676: PUSH
17677: LD_INT 129
17679: PUSH
17680: LD_INT 135
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: LIST
17687: PPUSH
17688: CALL 13535 0 4
// AttackVehicles ( 3 ) ;
17692: LD_INT 3
17694: PPUSH
17695: CALL 14672 0 1
// IntBazooka ( 3 ) ;
17699: LD_INT 3
17701: PPUSH
17702: CALL 15131 0 1
// AttackNearBuildings ( 3 , 1 ) ;
17706: LD_INT 3
17708: PPUSH
17709: LD_INT 1
17711: PPUSH
17712: CALL 14115 0 2
// end ;
17716: END
// every 0 0$1 do
17717: GO 17719
17719: DISABLE
// begin enable ;
17720: ENABLE
// TimeLapsersAI ( 3 ) ;
17721: LD_INT 3
17723: PPUSH
17724: CALL 14970 0 1
// end ;
17728: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17729: LD_INT 4
17731: PPUSH
17732: CALL_OW 303
17736: IFFALSE 17751
17738: GO 17740
17740: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17741: LD_INT 3
17743: PPUSH
17744: LD_INT 4
17746: PPUSH
17747: CALL 15783 0 2
17751: END
// every 0 0$1 do
17752: GO 17754
17754: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17755: LD_INT 3
17757: PPUSH
17758: LD_INT 91
17760: PPUSH
17761: LD_INT 3
17763: PPUSH
17764: CALL 12903 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17768: LD_INT 3
17770: PPUSH
17771: LD_INT 47
17773: PPUSH
17774: LD_INT 3
17776: PPUSH
17777: CALL 12903 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17781: LD_INT 3
17783: PPUSH
17784: LD_INT 129
17786: PPUSH
17787: LD_INT 3
17789: PPUSH
17790: CALL 12903 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17794: LD_INT 3
17796: PPUSH
17797: LD_INT 3
17799: PPUSH
17800: LD_INT 3
17802: PPUSH
17803: CALL 12903 0 3
// end ;
17807: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17808: LD_EXP 27
17812: PUSH
17813: LD_INT 2
17815: EQUAL
17816: PUSH
17817: LD_INT 21
17819: PPUSH
17820: CALL_OW 255
17824: PUSH
17825: LD_INT 3
17827: EQUAL
17828: AND
17829: PUSH
17830: LD_INT 112
17832: PPUSH
17833: CALL_OW 255
17837: PUSH
17838: LD_INT 3
17840: EQUAL
17841: AND
17842: PUSH
17843: LD_INT 21
17845: PPUSH
17846: CALL_OW 302
17850: AND
17851: PUSH
17852: LD_INT 112
17854: PPUSH
17855: CALL_OW 302
17859: AND
17860: PUSH
17861: LD_INT 22
17863: PUSH
17864: LD_INT 3
17866: PUSH
17867: EMPTY
17868: LIST
17869: LIST
17870: PUSH
17871: LD_INT 21
17873: PUSH
17874: LD_INT 2
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: PUSH
17881: LD_INT 50
17883: PUSH
17884: EMPTY
17885: LIST
17886: PUSH
17887: LD_INT 3
17889: PUSH
17890: LD_INT 58
17892: PUSH
17893: EMPTY
17894: LIST
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: PPUSH
17906: CALL_OW 69
17910: PUSH
17911: LD_INT 18
17913: PPUSH
17914: LD_INT 22
17916: PUSH
17917: LD_INT 3
17919: PUSH
17920: EMPTY
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 21
17926: PUSH
17927: LD_INT 2
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: EMPTY
17935: LIST
17936: LIST
17937: PPUSH
17938: CALL_OW 70
17942: PUSH
17943: LD_INT 0
17945: EQUAL
17946: DIFF
17947: AND
17948: IFFALSE 18066
17950: GO 17952
17952: DISABLE
// begin enable ;
17953: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17954: LD_INT 3
17956: PPUSH
17957: LD_INT 21
17959: PPUSH
17960: LD_INT 3
17962: PUSH
17963: LD_INT 4
17965: PUSH
17966: LD_INT 4
17968: PUSH
17969: EMPTY
17970: LIST
17971: LIST
17972: LIST
17973: PUSH
17974: LD_OWVAR 67
17978: ARRAY
17979: PPUSH
17980: LD_INT 46
17982: PUSH
17983: LD_INT 45
17985: PUSH
17986: LD_INT 44
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: LIST
17993: PPUSH
17994: LD_INT 3
17996: PPUSH
17997: LD_INT 3
17999: PPUSH
18000: LD_INT 24
18002: PPUSH
18003: CALL 14525 0 7
// if russianTimeLapsers = 0 then
18007: LD_EXP 40
18011: PUSH
18012: LD_INT 0
18014: EQUAL
18015: IFFALSE 18066
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
18017: LD_INT 3
18019: PPUSH
18020: LD_INT 112
18022: PPUSH
18023: LD_INT 1
18025: PUSH
18026: LD_INT 2
18028: PUSH
18029: LD_INT 2
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: PUSH
18037: LD_OWVAR 67
18041: ARRAY
18042: PPUSH
18043: LD_INT 49
18045: PUSH
18046: LD_INT 49
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PPUSH
18053: LD_INT 3
18055: PPUSH
18056: LD_INT 3
18058: PPUSH
18059: LD_INT 24
18061: PPUSH
18062: CALL 14525 0 7
// end ;
18066: END
// every 0 0$1 trigger arabianMines do var i ;
18067: LD_EXP 44
18071: IFFALSE 18192
18073: GO 18075
18075: DISABLE
18076: LD_INT 0
18078: PPUSH
// begin enable ;
18079: ENABLE
// for i in arabianMines do
18080: LD_ADDR_VAR 0 1
18084: PUSH
18085: LD_EXP 44
18089: PUSH
18090: FOR_IN
18091: IFFALSE 18190
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18093: LD_INT 22
18095: PUSH
18096: LD_INT 1
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 92
18105: PUSH
18106: LD_VAR 0 1
18110: PUSH
18111: LD_INT 1
18113: ARRAY
18114: PUSH
18115: LD_VAR 0 1
18119: PUSH
18120: LD_INT 2
18122: ARRAY
18123: PUSH
18124: LD_INT 3
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: IFFALSE 18188
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18143: LD_VAR 0 1
18147: PUSH
18148: LD_INT 1
18150: ARRAY
18151: PPUSH
18152: LD_VAR 0 1
18156: PUSH
18157: LD_INT 2
18159: ARRAY
18160: PPUSH
18161: LD_INT 5
18163: PPUSH
18164: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18168: LD_ADDR_EXP 44
18172: PUSH
18173: LD_EXP 44
18177: PPUSH
18178: LD_VAR 0 1
18182: PPUSH
18183: CALL_OW 3
18187: ST_TO_ADDR
// end ; end ;
18188: GO 18090
18190: POP
18191: POP
// end ;
18192: PPOPN 1
18194: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
18195: LD_EXP 28
18199: PUSH
18200: LD_INT 4
18202: EQUAL
18203: PUSH
18204: LD_EXP 29
18208: PUSH
18209: LD_INT 6
18211: PUSH
18212: LD_INT 8
18214: PUSH
18215: LD_INT 8
18217: PUSH
18218: EMPTY
18219: LIST
18220: LIST
18221: LIST
18222: PUSH
18223: LD_OWVAR 67
18227: ARRAY
18228: EQUAL
18229: AND
18230: IFFALSE 18248
18232: GO 18234
18234: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18235: LD_INT 10
18237: PPUSH
18238: LD_INT 47
18240: PPUSH
18241: LD_INT 82
18243: PPUSH
18244: CALL_OW 243
18248: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18249: LD_EXP 28
18253: PUSH
18254: LD_INT 4
18256: EQUAL
18257: IFFALSE 18279
18259: GO 18261
18261: DISABLE
// begin enable ;
18262: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18263: LD_ADDR_EXP 43
18267: PUSH
18268: LD_INT 1
18270: PPUSH
18271: LD_INT 2
18273: PPUSH
18274: CALL_OW 12
18278: ST_TO_ADDR
// end ; end_of_file
18279: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
18280: LD_EXP 34
18284: PUSH
18285: EMPTY
18286: EQUAL
18287: PUSH
18288: LD_INT 3
18290: PPUSH
18291: CALL_OW 301
18295: AND
18296: IFFALSE 18501
18298: GO 18300
18300: DISABLE
// begin if sciCounter = 0 then
18301: LD_EXP 35
18305: PUSH
18306: LD_INT 0
18308: EQUAL
18309: IFFALSE 18335
// begin Say ( JMM , D7a-JMM-1 ) ;
18311: LD_EXP 1
18315: PPUSH
18316: LD_STRING D7a-JMM-1
18318: PPUSH
18319: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18323: LD_EXP 22
18327: PPUSH
18328: LD_STRING D7a-Pow-1
18330: PPUSH
18331: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
18335: LD_EXP 35
18339: PUSH
18340: LD_INT 0
18342: GREATER
18343: PUSH
18344: LD_EXP 35
18348: PUSH
18349: LD_INT 6
18351: LESS
18352: AND
18353: IFFALSE 18379
// begin Say ( JMM , D7b-JMM-1 ) ;
18355: LD_EXP 1
18359: PPUSH
18360: LD_STRING D7b-JMM-1
18362: PPUSH
18363: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18367: LD_EXP 22
18371: PPUSH
18372: LD_STRING D7b-Pow-1
18374: PPUSH
18375: CALL_OW 94
// end ; if sciCounter = 6 then
18379: LD_EXP 35
18383: PUSH
18384: LD_INT 6
18386: EQUAL
18387: IFFALSE 18497
// begin Say ( JMM , D7c-JMM-1 ) ;
18389: LD_EXP 1
18393: PPUSH
18394: LD_STRING D7c-JMM-1
18396: PPUSH
18397: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18401: LD_EXP 22
18405: PPUSH
18406: LD_STRING D7c-Pow-1
18408: PPUSH
18409: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18413: LD_EXP 1
18417: PPUSH
18418: LD_STRING D7d-JMM-1
18420: PPUSH
18421: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18425: LD_EXP 22
18429: PPUSH
18430: LD_STRING D7d-Pow-1
18432: PPUSH
18433: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18437: LD_EXP 1
18441: PPUSH
18442: LD_STRING D7d-JMM-2
18444: PPUSH
18445: CALL_OW 88
// if askSiberite = 1 then
18449: LD_EXP 32
18453: PUSH
18454: LD_INT 1
18456: EQUAL
18457: IFFALSE 18473
// begin Say ( JMM , D7d-JMM-2a ) ;
18459: LD_EXP 1
18463: PPUSH
18464: LD_STRING D7d-JMM-2a
18466: PPUSH
18467: CALL_OW 88
// end else
18471: GO 18485
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
18473: LD_EXP 22
18477: PPUSH
18478: LD_STRING D7d-Pow-2
18480: PPUSH
18481: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
18485: LD_EXP 22
18489: PPUSH
18490: LD_STRING D7d-Pow-2a
18492: PPUSH
18493: CALL_OW 94
// end ; FinishMission ;
18497: CALL 18502 0 0
// end ;
18501: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18502: LD_INT 0
18504: PPUSH
18505: PPUSH
18506: PPUSH
18507: PPUSH
// m1 := false ;
18508: LD_ADDR_VAR 0 2
18512: PUSH
18513: LD_INT 0
18515: ST_TO_ADDR
// m2 := false ;
18516: LD_ADDR_VAR 0 3
18520: PUSH
18521: LD_INT 0
18523: ST_TO_ADDR
// m3 := false ;
18524: LD_ADDR_VAR 0 4
18528: PUSH
18529: LD_INT 0
18531: ST_TO_ADDR
// if teleportExplored = 1 then
18532: LD_EXP 33
18536: PUSH
18537: LD_INT 1
18539: EQUAL
18540: IFFALSE 18562
// begin m1 := true ;
18542: LD_ADDR_VAR 0 2
18546: PUSH
18547: LD_INT 1
18549: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18550: LD_STRING Teleport
18552: PPUSH
18553: LD_INT 1
18555: PPUSH
18556: CALL_OW 101
// end else
18560: GO 18573
// AddMedal ( Teleport , - 1 ) ;
18562: LD_STRING Teleport
18564: PPUSH
18565: LD_INT 1
18567: NEG
18568: PPUSH
18569: CALL_OW 101
// if sciCounter > 2 then
18573: LD_EXP 35
18577: PUSH
18578: LD_INT 2
18580: GREATER
18581: IFFALSE 18603
// begin m2 := true ;
18583: LD_ADDR_VAR 0 3
18587: PUSH
18588: LD_INT 1
18590: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18591: LD_STRING Materials
18593: PPUSH
18594: LD_INT 1
18596: PPUSH
18597: CALL_OW 101
// end else
18601: GO 18614
// AddMedal ( Materials , - 1 ) ;
18603: LD_STRING Materials
18605: PPUSH
18606: LD_INT 1
18608: NEG
18609: PPUSH
18610: CALL_OW 101
// if sciCounter = 6 then
18614: LD_EXP 35
18618: PUSH
18619: LD_INT 6
18621: EQUAL
18622: IFFALSE 18654
// begin m3 := true ;
18624: LD_ADDR_VAR 0 4
18628: PUSH
18629: LD_INT 1
18631: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18632: LD_STRING Scientists
18634: PPUSH
18635: LD_INT 1
18637: PPUSH
18638: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18642: LD_INT 1
18644: PPUSH
18645: LD_STRING 12_SciDed_1
18647: PPUSH
18648: CALL_OW 39
// end else
18652: GO 18675
// begin AddMedal ( Scientists , - 1 ) ;
18654: LD_STRING Scientists
18656: PPUSH
18657: LD_INT 1
18659: NEG
18660: PPUSH
18661: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18665: LD_INT 0
18667: PPUSH
18668: LD_STRING 12_SciDed_1
18670: PPUSH
18671: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18675: LD_EXP 31
18679: PPUSH
18680: LD_STRING 12_MainDepositFake_1
18682: PPUSH
18683: CALL_OW 39
// if m1 and m2 and m3 and Difficulty = 3 then
18687: LD_VAR 0 2
18691: PUSH
18692: LD_VAR 0 3
18696: AND
18697: PUSH
18698: LD_VAR 0 4
18702: AND
18703: PUSH
18704: LD_OWVAR 67
18708: PUSH
18709: LD_INT 3
18711: EQUAL
18712: AND
18713: IFFALSE 18725
// SetAchievementEX ( ACH_AMER , 12 ) ;
18715: LD_STRING ACH_AMER
18717: PPUSH
18718: LD_INT 12
18720: PPUSH
18721: CALL_OW 564
// GiveMedals ( MAIN ) ;
18725: LD_STRING MAIN
18727: PPUSH
18728: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18732: LD_INT 22
18734: PUSH
18735: LD_INT 1
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PUSH
18742: LD_INT 21
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 2
18754: PUSH
18755: LD_INT 25
18757: PUSH
18758: LD_INT 1
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: PUSH
18765: LD_INT 25
18767: PUSH
18768: LD_INT 2
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: LD_INT 25
18777: PUSH
18778: LD_INT 3
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 25
18787: PUSH
18788: LD_INT 4
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 25
18797: PUSH
18798: LD_INT 5
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 25
18807: PUSH
18808: LD_INT 8
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: EMPTY
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: LIST
18828: PPUSH
18829: CALL_OW 69
18833: PPUSH
18834: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18838: LD_EXP 1
18842: PPUSH
18843: LD_EXP 46
18847: PUSH
18848: LD_STRING JMM
18850: STR
18851: PPUSH
18852: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18856: LD_EXP 7
18860: PPUSH
18861: LD_EXP 46
18865: PUSH
18866: LD_STRING Brown
18868: STR
18869: PPUSH
18870: CALL 12135 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18874: LD_EXP 3
18878: PPUSH
18879: LD_EXP 46
18883: PUSH
18884: LD_STRING Donaldson
18886: STR
18887: PPUSH
18888: CALL 12135 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18892: LD_EXP 4
18896: PPUSH
18897: LD_EXP 46
18901: PUSH
18902: LD_STRING Bobby
18904: STR
18905: PPUSH
18906: CALL 12135 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18910: LD_EXP 5
18914: PPUSH
18915: LD_EXP 46
18919: PUSH
18920: LD_STRING Cyrus
18922: STR
18923: PPUSH
18924: CALL 12135 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18928: LD_EXP 2
18932: PPUSH
18933: LD_EXP 46
18937: PUSH
18938: LD_STRING Lisa
18940: STR
18941: PPUSH
18942: CALL 12135 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18946: LD_EXP 12
18950: PPUSH
18951: LD_EXP 46
18955: PUSH
18956: LD_STRING Frank
18958: STR
18959: PPUSH
18960: CALL 12135 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18964: LD_EXP 13
18968: PPUSH
18969: LD_EXP 46
18973: PUSH
18974: LD_STRING Kikuchi
18976: STR
18977: PPUSH
18978: CALL 12135 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18982: LD_EXP 9
18986: PPUSH
18987: LD_EXP 46
18991: PUSH
18992: LD_STRING Houten
18994: STR
18995: PPUSH
18996: CALL 12135 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
19000: LD_EXP 11
19004: PPUSH
19005: LD_EXP 46
19009: PUSH
19010: LD_STRING Gary
19012: STR
19013: PPUSH
19014: CALL 12135 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
19018: LD_EXP 10
19022: PPUSH
19023: LD_EXP 46
19027: PUSH
19028: LD_STRING Cornell
19030: STR
19031: PPUSH
19032: CALL 12135 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
19036: LD_EXP 6
19040: PPUSH
19041: LD_EXP 46
19045: PUSH
19046: LD_STRING Denis
19048: STR
19049: PPUSH
19050: CALL 12135 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
19054: LD_EXP 8
19058: PPUSH
19059: LD_EXP 46
19063: PUSH
19064: LD_STRING Gladstone
19066: STR
19067: PPUSH
19068: CALL 12135 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
19072: LD_INT 22
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: LD_INT 23
19084: PUSH
19085: LD_INT 1
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PUSH
19092: LD_INT 21
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: EMPTY
19099: LIST
19100: LIST
19101: PUSH
19102: LD_INT 2
19104: PUSH
19105: LD_INT 25
19107: PUSH
19108: LD_INT 1
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: PUSH
19115: LD_INT 25
19117: PUSH
19118: LD_INT 2
19120: PUSH
19121: EMPTY
19122: LIST
19123: LIST
19124: PUSH
19125: LD_INT 25
19127: PUSH
19128: LD_INT 3
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: PUSH
19135: LD_INT 25
19137: PUSH
19138: LD_INT 4
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 25
19147: PUSH
19148: LD_INT 5
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: LD_INT 25
19157: PUSH
19158: LD_INT 8
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: EMPTY
19166: LIST
19167: LIST
19168: LIST
19169: LIST
19170: LIST
19171: LIST
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: PPUSH
19180: CALL_OW 69
19184: PUSH
19185: LD_EXP 1
19189: PUSH
19190: LD_EXP 7
19194: PUSH
19195: LD_EXP 3
19199: PUSH
19200: LD_EXP 4
19204: PUSH
19205: LD_EXP 5
19209: PUSH
19210: LD_EXP 2
19214: PUSH
19215: LD_EXP 12
19219: PUSH
19220: LD_EXP 8
19224: PUSH
19225: LD_EXP 13
19229: PUSH
19230: LD_EXP 6
19234: PUSH
19235: LD_EXP 9
19239: PUSH
19240: LD_EXP 11
19244: PUSH
19245: LD_EXP 10
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: LIST
19256: LIST
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: LIST
19262: LIST
19263: LIST
19264: DIFF
19265: PPUSH
19266: LD_STRING 12_other_survivors
19268: PPUSH
19269: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19273: LD_INT 22
19275: PUSH
19276: LD_INT 1
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 23
19285: PUSH
19286: LD_INT 2
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PUSH
19293: LD_INT 21
19295: PUSH
19296: LD_INT 1
19298: PUSH
19299: EMPTY
19300: LIST
19301: LIST
19302: PUSH
19303: LD_INT 2
19305: PUSH
19306: LD_INT 25
19308: PUSH
19309: LD_INT 1
19311: PUSH
19312: EMPTY
19313: LIST
19314: LIST
19315: PUSH
19316: LD_INT 25
19318: PUSH
19319: LD_INT 2
19321: PUSH
19322: EMPTY
19323: LIST
19324: LIST
19325: PUSH
19326: LD_INT 25
19328: PUSH
19329: LD_INT 3
19331: PUSH
19332: EMPTY
19333: LIST
19334: LIST
19335: PUSH
19336: LD_INT 25
19338: PUSH
19339: LD_INT 4
19341: PUSH
19342: EMPTY
19343: LIST
19344: LIST
19345: PUSH
19346: LD_INT 25
19348: PUSH
19349: LD_INT 5
19351: PUSH
19352: EMPTY
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 25
19358: PUSH
19359: LD_INT 8
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: PPUSH
19381: CALL_OW 69
19385: PPUSH
19386: LD_STRING 12_kurt_squad
19388: PPUSH
19389: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19393: LD_EXP 14
19397: PPUSH
19398: LD_STRING 12_others
19400: PPUSH
19401: CALL_OW 38
// YouWin ;
19405: CALL_OW 103
// end ; end_of_file
19409: LD_VAR 0 1
19413: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19414: LD_EXP 1
19418: PPUSH
19419: CALL_OW 301
19423: IFFALSE 19435
19425: GO 19427
19427: DISABLE
// YouLost ( JMM ) ; end_of_file
19428: LD_STRING JMM
19430: PPUSH
19431: CALL_OW 104
19435: END
// every 0 0$01 do
19436: GO 19438
19438: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19439: LD_INT 1050
19441: PPUSH
19442: CALL_OW 67
// if cratesSpawned < 6 then
19446: LD_EXP 45
19450: PUSH
19451: LD_INT 6
19453: LESS
19454: IFFALSE 19491
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19456: LD_INT 3
19458: PPUSH
19459: LD_INT 5
19461: PPUSH
19462: CALL_OW 12
19466: PPUSH
19467: LD_INT 21
19469: PPUSH
19470: LD_INT 1
19472: PPUSH
19473: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19477: LD_ADDR_EXP 45
19481: PUSH
19482: LD_EXP 45
19486: PUSH
19487: LD_INT 1
19489: PLUS
19490: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19491: LD_EXP 45
19495: PUSH
19496: LD_INT 6
19498: GREATEREQUAL
19499: PUSH
19500: LD_EXP 45
19504: PUSH
19505: LD_INT 12
19507: LESS
19508: AND
19509: IFFALSE 19553
// begin wait ( 0 0$50 ) ;
19511: LD_INT 1750
19513: PPUSH
19514: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19518: LD_INT 3
19520: PPUSH
19521: LD_INT 5
19523: PPUSH
19524: CALL_OW 12
19528: PPUSH
19529: LD_INT 21
19531: PPUSH
19532: LD_INT 1
19534: PPUSH
19535: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19539: LD_ADDR_EXP 45
19543: PUSH
19544: LD_EXP 45
19548: PUSH
19549: LD_INT 1
19551: PLUS
19552: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19553: LD_EXP 45
19557: PUSH
19558: LD_INT 12
19560: GREATEREQUAL
19561: IFFALSE 19605
// begin wait ( 1 1$40 ) ;
19563: LD_INT 3500
19565: PPUSH
19566: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19570: LD_INT 3
19572: PPUSH
19573: LD_INT 5
19575: PPUSH
19576: CALL_OW 12
19580: PPUSH
19581: LD_INT 21
19583: PPUSH
19584: LD_INT 1
19586: PPUSH
19587: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19591: LD_ADDR_EXP 45
19595: PUSH
19596: LD_EXP 45
19600: PUSH
19601: LD_INT 1
19603: PLUS
19604: ST_TO_ADDR
// end ; until false ;
19605: LD_INT 0
19607: IFFALSE 19439
// end ; end_of_file
19609: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
19610: GO 19612
19612: DISABLE
// begin ru_radar := 98 ;
19613: LD_ADDR_EXP 49
19617: PUSH
19618: LD_INT 98
19620: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19621: LD_ADDR_EXP 50
19625: PUSH
19626: LD_INT 89
19628: ST_TO_ADDR
// us_hack := 99 ;
19629: LD_ADDR_EXP 51
19633: PUSH
19634: LD_INT 99
19636: ST_TO_ADDR
// us_artillery := 97 ;
19637: LD_ADDR_EXP 52
19641: PUSH
19642: LD_INT 97
19644: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19645: LD_ADDR_EXP 53
19649: PUSH
19650: LD_INT 91
19652: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
19653: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
19654: LD_INT 0
19656: PPUSH
19657: PPUSH
19658: PPUSH
19659: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19660: LD_VAR 0 1
19664: PPUSH
19665: CALL_OW 264
19669: PUSH
19670: LD_EXP 53
19674: EQUAL
19675: IFFALSE 19747
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19677: LD_INT 68
19679: PPUSH
19680: LD_VAR 0 1
19684: PPUSH
19685: CALL_OW 255
19689: PPUSH
19690: CALL_OW 321
19694: PUSH
19695: LD_INT 2
19697: EQUAL
19698: IFFALSE 19710
// eff := 70 else
19700: LD_ADDR_VAR 0 6
19704: PUSH
19705: LD_INT 70
19707: ST_TO_ADDR
19708: GO 19718
// eff := 30 ;
19710: LD_ADDR_VAR 0 6
19714: PUSH
19715: LD_INT 30
19717: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19718: LD_VAR 0 1
19722: PPUSH
19723: CALL_OW 250
19727: PPUSH
19728: LD_VAR 0 1
19732: PPUSH
19733: CALL_OW 251
19737: PPUSH
19738: LD_VAR 0 6
19742: PPUSH
19743: CALL_OW 495
// end ; end ;
19747: LD_VAR 0 4
19751: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
19752: LD_INT 0
19754: PPUSH
19755: PPUSH
19756: PPUSH
19757: PPUSH
19758: PPUSH
19759: PPUSH
// if cmd = 124 then
19760: LD_VAR 0 1
19764: PUSH
19765: LD_INT 124
19767: EQUAL
19768: IFFALSE 19974
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
19770: LD_ADDR_VAR 0 5
19774: PUSH
19775: LD_INT 2
19777: PUSH
19778: LD_INT 34
19780: PUSH
19781: LD_INT 53
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: LD_INT 34
19790: PUSH
19791: LD_INT 14
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: LIST
19802: PPUSH
19803: CALL_OW 69
19807: ST_TO_ADDR
// if not tmp then
19808: LD_VAR 0 5
19812: NOT
19813: IFFALSE 19817
// exit ;
19815: GO 19974
// for i in tmp do
19817: LD_ADDR_VAR 0 3
19821: PUSH
19822: LD_VAR 0 5
19826: PUSH
19827: FOR_IN
19828: IFFALSE 19972
// begin taskList := GetTaskList ( i ) ;
19830: LD_ADDR_VAR 0 6
19834: PUSH
19835: LD_VAR 0 3
19839: PPUSH
19840: CALL_OW 437
19844: ST_TO_ADDR
// if not taskList then
19845: LD_VAR 0 6
19849: NOT
19850: IFFALSE 19854
// continue ;
19852: GO 19827
// for j = 1 to taskList do
19854: LD_ADDR_VAR 0 4
19858: PUSH
19859: DOUBLE
19860: LD_INT 1
19862: DEC
19863: ST_TO_ADDR
19864: LD_VAR 0 6
19868: PUSH
19869: FOR_TO
19870: IFFALSE 19968
// if taskList [ j ] [ 1 ] = | then
19872: LD_VAR 0 6
19876: PUSH
19877: LD_VAR 0 4
19881: ARRAY
19882: PUSH
19883: LD_INT 1
19885: ARRAY
19886: PUSH
19887: LD_STRING |
19889: EQUAL
19890: IFFALSE 19966
// begin _taskList := Delete ( taskList , 1 ) ;
19892: LD_ADDR_VAR 0 7
19896: PUSH
19897: LD_VAR 0 6
19901: PPUSH
19902: LD_INT 1
19904: PPUSH
19905: CALL_OW 3
19909: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
19910: LD_VAR 0 3
19914: PPUSH
19915: LD_VAR 0 7
19919: PPUSH
19920: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
19924: LD_VAR 0 3
19928: PPUSH
19929: LD_VAR 0 6
19933: PUSH
19934: LD_VAR 0 4
19938: ARRAY
19939: PUSH
19940: LD_INT 2
19942: ARRAY
19943: PPUSH
19944: LD_VAR 0 6
19948: PUSH
19949: LD_VAR 0 4
19953: ARRAY
19954: PUSH
19955: LD_INT 3
19957: ARRAY
19958: PPUSH
19959: LD_INT 8
19961: PPUSH
19962: CALL 19979 0 4
// end ;
19966: GO 19869
19968: POP
19969: POP
// end ;
19970: GO 19827
19972: POP
19973: POP
// end ; end ;
19974: LD_VAR 0 2
19978: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
19979: LD_INT 0
19981: PPUSH
19982: PPUSH
19983: PPUSH
19984: PPUSH
19985: PPUSH
19986: PPUSH
19987: PPUSH
19988: PPUSH
19989: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
19990: LD_VAR 0 1
19994: NOT
19995: PUSH
19996: LD_VAR 0 2
20000: PPUSH
20001: LD_VAR 0 3
20005: PPUSH
20006: CALL_OW 488
20010: NOT
20011: OR
20012: PUSH
20013: LD_VAR 0 4
20017: NOT
20018: OR
20019: IFFALSE 20023
// exit ;
20021: GO 20363
// list := [ ] ;
20023: LD_ADDR_VAR 0 13
20027: PUSH
20028: EMPTY
20029: ST_TO_ADDR
// if x - r < 0 then
20030: LD_VAR 0 2
20034: PUSH
20035: LD_VAR 0 4
20039: MINUS
20040: PUSH
20041: LD_INT 0
20043: LESS
20044: IFFALSE 20056
// min_x := 0 else
20046: LD_ADDR_VAR 0 7
20050: PUSH
20051: LD_INT 0
20053: ST_TO_ADDR
20054: GO 20072
// min_x := x - r ;
20056: LD_ADDR_VAR 0 7
20060: PUSH
20061: LD_VAR 0 2
20065: PUSH
20066: LD_VAR 0 4
20070: MINUS
20071: ST_TO_ADDR
// if y - r < 0 then
20072: LD_VAR 0 3
20076: PUSH
20077: LD_VAR 0 4
20081: MINUS
20082: PUSH
20083: LD_INT 0
20085: LESS
20086: IFFALSE 20098
// min_y := 0 else
20088: LD_ADDR_VAR 0 8
20092: PUSH
20093: LD_INT 0
20095: ST_TO_ADDR
20096: GO 20114
// min_y := y - r ;
20098: LD_ADDR_VAR 0 8
20102: PUSH
20103: LD_VAR 0 3
20107: PUSH
20108: LD_VAR 0 4
20112: MINUS
20113: ST_TO_ADDR
// max_x := x + r ;
20114: LD_ADDR_VAR 0 9
20118: PUSH
20119: LD_VAR 0 2
20123: PUSH
20124: LD_VAR 0 4
20128: PLUS
20129: ST_TO_ADDR
// max_y := y + r ;
20130: LD_ADDR_VAR 0 10
20134: PUSH
20135: LD_VAR 0 3
20139: PUSH
20140: LD_VAR 0 4
20144: PLUS
20145: ST_TO_ADDR
// for _x = min_x to max_x do
20146: LD_ADDR_VAR 0 11
20150: PUSH
20151: DOUBLE
20152: LD_VAR 0 7
20156: DEC
20157: ST_TO_ADDR
20158: LD_VAR 0 9
20162: PUSH
20163: FOR_TO
20164: IFFALSE 20281
// for _y = min_y to max_y do
20166: LD_ADDR_VAR 0 12
20170: PUSH
20171: DOUBLE
20172: LD_VAR 0 8
20176: DEC
20177: ST_TO_ADDR
20178: LD_VAR 0 10
20182: PUSH
20183: FOR_TO
20184: IFFALSE 20277
// begin if not ValidHex ( _x , _y ) then
20186: LD_VAR 0 11
20190: PPUSH
20191: LD_VAR 0 12
20195: PPUSH
20196: CALL_OW 488
20200: NOT
20201: IFFALSE 20205
// continue ;
20203: GO 20183
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20205: LD_VAR 0 11
20209: PPUSH
20210: LD_VAR 0 12
20214: PPUSH
20215: CALL_OW 351
20219: PUSH
20220: LD_VAR 0 11
20224: PPUSH
20225: LD_VAR 0 12
20229: PPUSH
20230: CALL_OW 554
20234: AND
20235: IFFALSE 20275
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20237: LD_ADDR_VAR 0 13
20241: PUSH
20242: LD_VAR 0 13
20246: PPUSH
20247: LD_VAR 0 13
20251: PUSH
20252: LD_INT 1
20254: PLUS
20255: PPUSH
20256: LD_VAR 0 11
20260: PUSH
20261: LD_VAR 0 12
20265: PUSH
20266: EMPTY
20267: LIST
20268: LIST
20269: PPUSH
20270: CALL_OW 2
20274: ST_TO_ADDR
// end ;
20275: GO 20183
20277: POP
20278: POP
20279: GO 20163
20281: POP
20282: POP
// if not list then
20283: LD_VAR 0 13
20287: NOT
20288: IFFALSE 20292
// exit ;
20290: GO 20363
// for i in list do
20292: LD_ADDR_VAR 0 6
20296: PUSH
20297: LD_VAR 0 13
20301: PUSH
20302: FOR_IN
20303: IFFALSE 20361
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20305: LD_VAR 0 1
20309: PPUSH
20310: LD_STRING M
20312: PUSH
20313: LD_VAR 0 6
20317: PUSH
20318: LD_INT 1
20320: ARRAY
20321: PUSH
20322: LD_VAR 0 6
20326: PUSH
20327: LD_INT 2
20329: ARRAY
20330: PUSH
20331: LD_INT 0
20333: PUSH
20334: LD_INT 0
20336: PUSH
20337: LD_INT 0
20339: PUSH
20340: LD_INT 0
20342: PUSH
20343: EMPTY
20344: LIST
20345: LIST
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: LIST
20351: PUSH
20352: EMPTY
20353: LIST
20354: PPUSH
20355: CALL_OW 447
20359: GO 20302
20361: POP
20362: POP
// end ;
20363: LD_VAR 0 5
20367: RET
