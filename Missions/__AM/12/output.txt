// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
  15: LD_INT 4
  17: PPUSH
  18: LD_STRING ryutin
  20: PPUSH
  21: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  25: LD_INT 6
  27: PPUSH
  28: LD_STRING yegorov
  30: PPUSH
  31: CALL_OW 500
// RuScientists = [ ] ;
  35: LD_ADDR_EXP 34
  39: PUSH
  40: EMPTY
  41: ST_TO_ADDR
// sciCounter = 0 ;
  42: LD_ADDR_EXP 35
  46: PUSH
  47: LD_INT 0
  49: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  50: LD_ADDR_EXP 38
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTanks = [ ] ;
  57: LD_ADDR_EXP 39
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  64: LD_ADDR_EXP 40
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// arabianMines = [ ] ;
  71: LD_ADDR_EXP 44
  75: PUSH
  76: EMPTY
  77: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  78: LD_ADDR_EXP 26
  82: PUSH
  83: LD_STRING 06_KurtStatus_1
  85: PPUSH
  86: LD_INT 0
  88: PPUSH
  89: CALL_OW 30
  93: ST_TO_ADDR
// secondPass = 0 ;
  94: LD_ADDR_EXP 27
  98: PUSH
  99: LD_INT 0
 101: ST_TO_ADDR
// teleportExplored = 0 ;
 102: LD_ADDR_EXP 33
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// attackTactic = 0 ;
 110: LD_ADDR_EXP 43
 114: PUSH
 115: LD_INT 0
 117: ST_TO_ADDR
// tpCounter = 0 ;
 118: LD_ADDR_EXP 29
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// askSiberite = 0 ;
 126: LD_ADDR_EXP 32
 130: PUSH
 131: LD_INT 0
 133: ST_TO_ADDR
// warWithLegion = 0 ;
 134: LD_ADDR_EXP 30
 138: PUSH
 139: LD_INT 0
 141: ST_TO_ADDR
// fakeInfo = 0 ;
 142: LD_ADDR_EXP 31
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// cratesSpawned = 0 ;
 150: LD_ADDR_EXP 45
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// ruAI = 0 ;
 158: LD_ADDR_EXP 41
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// ruEscape = 0 ;
 166: LD_ADDR_EXP 42
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// eventVar1 = 0 ;
 174: LD_ADDR_EXP 47
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// mission_prefix = 12_ ;
 182: LD_ADDR_EXP 46
 186: PUSH
 187: LD_STRING 12_
 189: ST_TO_ADDR
// debugMode = 0 ;
 190: LD_ADDR_EXP 48
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// westPathUsed := false ;
 198: LD_ADDR_EXP 49
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 206: LD_ADDR_EXP 50
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// rocketBuilded := false ;
 214: LD_ADDR_EXP 51
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// CreateNature ;
 222: CALL 15555 0 0
// PrepareDifficulty ;
 226: CALL 12770 0 0
// PrepareVehicles ;
 230: CALL 1769 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 234: LD_INT 4
 236: PPUSH
 237: LD_INT 0
 239: PPUSH
 240: LD_INT 1
 242: PPUSH
 243: LD_INT 0
 245: PPUSH
 246: CALL 1343 0 4
// PrepareAmericanHeroes ;
 250: CALL 644 0 0
// PrepareRussianCommander ;
 254: CALL 3157 0 0
// PrepareWestBase ;
 258: CALL 3672 0 0
// PrepareEastBase ;
 262: CALL 3232 0 0
// PrepareOtherRussians ;
 266: CALL 3810 0 0
// Action ;
 270: CALL 5476 0 0
// end ;
 274: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 275: LD_EXP 48
 279: PUSH
 280: LD_INT 1
 282: EQUAL
 283: IFFALSE 589
 285: GO 287
 287: DISABLE
 288: LD_INT 0
 290: PPUSH
// begin enable ;
 291: ENABLE
// fogoff ( true ) ;
 292: LD_INT 1
 294: PPUSH
 295: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 299: LD_ADDR_VAR 0 1
 303: PUSH
 304: LD_INT 22
 306: PUSH
 307: LD_INT 1
 309: PUSH
 310: EMPTY
 311: LIST
 312: LIST
 313: PUSH
 314: LD_INT 21
 316: PUSH
 317: LD_INT 1
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: PUSH
 333: FOR_IN
 334: IFFALSE 350
// SetLives ( i , 1000 ) ;
 336: LD_VAR 0 1
 340: PPUSH
 341: LD_INT 1000
 343: PPUSH
 344: CALL_OW 234
 348: GO 333
 350: POP
 351: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 352: LD_ADDR_VAR 0 1
 356: PUSH
 357: LD_INT 22
 359: PUSH
 360: LD_INT 1
 362: PUSH
 363: EMPTY
 364: LIST
 365: LIST
 366: PUSH
 367: LD_INT 2
 369: PUSH
 370: LD_INT 30
 372: PUSH
 373: LD_INT 0
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PUSH
 380: LD_INT 30
 382: PUSH
 383: LD_INT 1
 385: PUSH
 386: EMPTY
 387: LIST
 388: LIST
 389: PUSH
 390: EMPTY
 391: LIST
 392: LIST
 393: LIST
 394: PUSH
 395: EMPTY
 396: LIST
 397: LIST
 398: PPUSH
 399: CALL_OW 69
 403: PUSH
 404: FOR_IN
 405: IFFALSE 429
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 407: LD_VAR 0 1
 411: PPUSH
 412: CALL_OW 274
 416: PPUSH
 417: LD_INT 1
 419: PPUSH
 420: LD_INT 9999
 422: PPUSH
 423: CALL_OW 277
 427: GO 404
 429: POP
 430: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 431: LD_ADDR_VAR 0 1
 435: PUSH
 436: LD_INT 22
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: LD_INT 2
 448: PUSH
 449: LD_INT 30
 451: PUSH
 452: LD_INT 0
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: LD_INT 30
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 2
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 510: LD_ADDR_VAR 0 1
 514: PUSH
 515: LD_INT 22
 517: PUSH
 518: LD_INT 1
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: LD_INT 2
 527: PUSH
 528: LD_INT 30
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PUSH
 538: LD_INT 30
 540: PUSH
 541: LD_INT 1
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PPUSH
 557: CALL_OW 69
 561: PUSH
 562: FOR_IN
 563: IFFALSE 587
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 565: LD_VAR 0 1
 569: PPUSH
 570: CALL_OW 274
 574: PPUSH
 575: LD_INT 3
 577: PPUSH
 578: LD_INT 9999
 580: PPUSH
 581: CALL_OW 277
 585: GO 562
 587: POP
 588: POP
// end ;
 589: PPOPN 1
 591: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 592: LD_INT 25
 594: PPUSH
 595: LD_INT 22
 597: PUSH
 598: LD_INT 1
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: PPUSH
 605: CALL_OW 70
 609: IFFALSE 622
 611: GO 613
 613: DISABLE
// westPathUsed := true ;
 614: LD_ADDR_EXP 49
 618: PUSH
 619: LD_INT 1
 621: ST_TO_ADDR
 622: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 623: LD_EXP 50
 627: PUSH
 628: LD_INT 3
 630: GREATEREQUAL
 631: IFFALSE 643
 633: GO 635
 635: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 636: LD_STRING ACH_LASER
 638: PPUSH
 639: CALL_OW 543
 643: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 644: LD_INT 0
 646: PPUSH
 647: PPUSH
 648: PPUSH
// uc_side = 1 ;
 649: LD_ADDR_OWVAR 20
 653: PUSH
 654: LD_INT 1
 656: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 657: LD_ADDR_EXP 14
 661: PUSH
 662: LD_STRING 11c_others
 664: PPUSH
 665: CALL_OW 31
 669: PUSH
 670: LD_STRING 11_others
 672: PPUSH
 673: CALL_OW 31
 677: UNION
 678: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 11_ ) ;
 679: LD_ADDR_EXP 1
 683: PUSH
 684: LD_STRING JMM
 686: PPUSH
 687: LD_INT 1
 689: PPUSH
 690: LD_STRING 11_
 692: PPUSH
 693: CALL 38602 0 3
 697: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 698: LD_EXP 1
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 710: LD_EXP 1
 714: PPUSH
 715: LD_INT 22
 717: PUSH
 718: LD_INT 1
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: PUSH
 725: LD_INT 21
 727: PUSH
 728: LD_INT 2
 730: PUSH
 731: EMPTY
 732: LIST
 733: LIST
 734: PUSH
 735: LD_INT 58
 737: PUSH
 738: EMPTY
 739: LIST
 740: PUSH
 741: EMPTY
 742: LIST
 743: LIST
 744: LIST
 745: PPUSH
 746: CALL_OW 69
 750: PUSH
 751: LD_INT 1
 753: ARRAY
 754: PPUSH
 755: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 759: LD_STRING 11_Lisa
 761: PPUSH
 762: CALL_OW 28
 766: PUSH
 767: LD_INT 1
 769: EQUAL
 770: IFFALSE 820
// begin Lisa = PrepareUnit ( Lisa , true , 11_ ) ;
 772: LD_ADDR_EXP 2
 776: PUSH
 777: LD_STRING Lisa
 779: PPUSH
 780: LD_INT 1
 782: PPUSH
 783: LD_STRING 11_
 785: PPUSH
 786: CALL 38602 0 3
 790: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 791: LD_EXP 2
 795: PPUSH
 796: LD_INT 1
 798: PPUSH
 799: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 803: LD_EXP 2
 807: PPUSH
 808: LD_INT 4
 810: PPUSH
 811: LD_INT 0
 813: PPUSH
 814: CALL_OW 49
// end else
 818: GO 836
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 820: LD_INT 4
 822: PPUSH
 823: LD_INT 0
 825: PPUSH
 826: LD_INT 1
 828: PPUSH
 829: LD_INT 0
 831: PPUSH
 832: CALL 1343 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 836: LD_STRING 11_Donaldson
 838: PPUSH
 839: CALL_OW 28
 843: PUSH
 844: LD_INT 1
 846: EQUAL
 847: IFFALSE 897
// begin Donaldson = PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 38602 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1343 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: PUSH
 921: LD_INT 1
 923: EQUAL
 924: IFFALSE 974
// begin Cyrus = PrepareUnit ( Cyrus , true , 11_ ) ;
 926: LD_ADDR_EXP 5
 930: PUSH
 931: LD_STRING Cyrus
 933: PPUSH
 934: LD_INT 1
 936: PPUSH
 937: LD_STRING 11_
 939: PPUSH
 940: CALL 38602 0 3
 944: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 945: LD_EXP 5
 949: PPUSH
 950: LD_INT 1
 952: PPUSH
 953: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 957: LD_EXP 5
 961: PPUSH
 962: LD_INT 4
 964: PPUSH
 965: LD_INT 0
 967: PPUSH
 968: CALL_OW 49
// end else
 972: GO 990
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 974: LD_INT 4
 976: PPUSH
 977: LD_INT 0
 979: PPUSH
 980: LD_INT 1
 982: PPUSH
 983: LD_INT 0
 985: PPUSH
 986: CALL 1343 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 990: LD_STRING 11_Denis
 992: PPUSH
 993: CALL_OW 28
 997: PUSH
 998: LD_INT 1
1000: EQUAL
1001: IFFALSE 1051
// begin Denis = PrepareUnit ( Denis , true , 11_ ) ;
1003: LD_ADDR_EXP 6
1007: PUSH
1008: LD_STRING Denis
1010: PPUSH
1011: LD_INT 1
1013: PPUSH
1014: LD_STRING 11_
1016: PPUSH
1017: CALL 38602 0 3
1021: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1022: LD_EXP 6
1026: PPUSH
1027: LD_INT 4
1029: PPUSH
1030: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1034: LD_EXP 6
1038: PPUSH
1039: LD_INT 4
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// end else
1049: GO 1067
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1051: LD_INT 4
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: LD_INT 1
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL 1343 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
1067: LD_STRING 11_Frank
1069: PPUSH
1070: CALL_OW 28
1074: PUSH
1075: LD_INT 1
1077: EQUAL
1078: IFFALSE 1128
// begin Frank = PrepareUnit ( Frank , true , 11_ ) ;
1080: LD_ADDR_EXP 12
1084: PUSH
1085: LD_STRING Frank
1087: PPUSH
1088: LD_INT 1
1090: PPUSH
1091: LD_STRING 11_
1093: PPUSH
1094: CALL 38602 0 3
1098: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1111: LD_EXP 12
1115: PPUSH
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: CALL_OW 49
// end else
1126: GO 1144
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1128: LD_INT 4
1130: PPUSH
1131: LD_INT 0
1133: PPUSH
1134: LD_INT 1
1136: PPUSH
1137: LD_INT 0
1139: PPUSH
1140: CALL 1343 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1144: LD_STRING 11_Cornell
1146: PPUSH
1147: CALL_OW 28
1151: PUSH
1152: LD_INT 1
1154: EQUAL
1155: IFFALSE 1205
// begin Cornel = PrepareUnit ( Cornell , true , 11_ ) ;
1157: LD_ADDR_EXP 10
1161: PUSH
1162: LD_STRING Cornell
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_STRING 11_
1170: PPUSH
1171: CALL 38602 0 3
1175: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1176: LD_EXP 10
1180: PPUSH
1181: LD_INT 1
1183: PPUSH
1184: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1188: LD_EXP 10
1192: PPUSH
1193: LD_INT 4
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: CALL_OW 49
// end else
1203: GO 1221
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1205: LD_INT 4
1207: PPUSH
1208: LD_INT 0
1210: PPUSH
1211: LD_INT 1
1213: PPUSH
1214: LD_INT 0
1216: PPUSH
1217: CALL 1343 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_EXP 14
1230: PPUSH
1231: LD_INT 26
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PPUSH
1241: CALL_OW 72
1245: ST_TO_ADDR
// if not tmp then
1246: LD_VAR 0 2
1250: NOT
1251: IFFALSE 1280
// begin PrepareSoldier ( sex_male , 8 ) ;
1253: LD_INT 1
1255: PPUSH
1256: LD_INT 8
1258: PPUSH
1259: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1263: CALL_OW 44
1267: PPUSH
1268: LD_INT 4
1270: PPUSH
1271: LD_INT 0
1273: PPUSH
1274: CALL_OW 49
// end else
1278: GO 1319
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1280: LD_VAR 0 2
1284: PUSH
1285: LD_INT 1
1287: ARRAY
1288: PPUSH
1289: LD_INT 4
1291: PPUSH
1292: LD_INT 0
1294: PPUSH
1295: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1299: LD_ADDR_EXP 14
1303: PUSH
1304: LD_EXP 14
1308: PUSH
1309: LD_VAR 0 2
1313: PUSH
1314: LD_INT 1
1316: ARRAY
1317: DIFF
1318: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1319: LD_ADDR_EXP 22
1323: PUSH
1324: LD_STRING Powell
1326: PPUSH
1327: LD_INT 0
1329: PPUSH
1330: LD_STRING 
1332: PPUSH
1333: CALL 38602 0 3
1337: ST_TO_ADDR
// end ;
1338: LD_VAR 0 1
1342: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1343: LD_INT 0
1345: PPUSH
1346: PPUSH
1347: PPUSH
1348: PPUSH
1349: PPUSH
// if mech = 1 then
1350: LD_VAR 0 4
1354: PUSH
1355: LD_INT 1
1357: EQUAL
1358: IFFALSE 1595
// begin if others11 > 0 then
1360: LD_EXP 14
1364: PUSH
1365: LD_INT 0
1367: GREATER
1368: IFFALSE 1535
// begin for i := 1 to others11 - 1 do
1370: LD_ADDR_VAR 0 6
1374: PUSH
1375: DOUBLE
1376: LD_INT 1
1378: DEC
1379: ST_TO_ADDR
1380: LD_EXP 14
1384: PUSH
1385: LD_INT 1
1387: MINUS
1388: PUSH
1389: FOR_TO
1390: IFFALSE 1472
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1392: LD_EXP 14
1396: PUSH
1397: LD_VAR 0 6
1401: ARRAY
1402: PPUSH
1403: LD_INT 3
1405: PPUSH
1406: CALL_OW 259
1410: PUSH
1411: LD_EXP 14
1415: PUSH
1416: LD_VAR 0 6
1420: PUSH
1421: LD_INT 1
1423: PLUS
1424: ARRAY
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL_OW 259
1433: LESS
1434: IFFALSE 1470
// begin mecha = others11 [ i + 1 ] ;
1436: LD_ADDR_VAR 0 9
1440: PUSH
1441: LD_EXP 14
1445: PUSH
1446: LD_VAR 0 6
1450: PUSH
1451: LD_INT 1
1453: PLUS
1454: ARRAY
1455: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1456: LD_VAR 0 9
1460: PPUSH
1461: LD_INT 3
1463: PPUSH
1464: CALL_OW 336
// break ;
1468: GO 1472
// end ; end ;
1470: GO 1389
1472: POP
1473: POP
// if spawnMode = 1 then
1474: LD_VAR 0 3
1478: PUSH
1479: LD_INT 1
1481: EQUAL
1482: IFFALSE 1503
// PlaceUnitArea ( mecha , area , false ) else
1484: LD_VAR 0 9
1488: PPUSH
1489: LD_VAR 0 1
1493: PPUSH
1494: LD_INT 0
1496: PPUSH
1497: CALL_OW 49
1501: GO 1517
// PlaceHumanInUnit ( mecha , veh ) ;
1503: LD_VAR 0 9
1507: PPUSH
1508: LD_VAR 0 2
1512: PPUSH
1513: CALL_OW 52
// others11 = others11 diff mecha ;
1517: LD_ADDR_EXP 14
1521: PUSH
1522: LD_EXP 14
1526: PUSH
1527: LD_VAR 0 9
1531: DIFF
1532: ST_TO_ADDR
// end else
1533: GO 1593
// begin hc_name =  ;
1535: LD_ADDR_OWVAR 26
1539: PUSH
1540: LD_STRING 
1542: ST_TO_ADDR
// hc_gallery =  ;
1543: LD_ADDR_OWVAR 33
1547: PUSH
1548: LD_STRING 
1550: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1551: LD_INT 0
1553: PPUSH
1554: LD_INT 7
1556: PPUSH
1557: LD_INT 9
1559: PPUSH
1560: CALL_OW 12
1564: PPUSH
1565: CALL_OW 383
// un = CreateHuman ;
1569: LD_ADDR_VAR 0 7
1573: PUSH
1574: CALL_OW 44
1578: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1579: LD_VAR 0 7
1583: PPUSH
1584: LD_VAR 0 2
1588: PPUSH
1589: CALL_OW 52
// end ; end else
1593: GO 1764
// begin if others11 > 0 then
1595: LD_EXP 14
1599: PUSH
1600: LD_INT 0
1602: GREATER
1603: IFFALSE 1676
// begin if spawnMode = 1 then
1605: LD_VAR 0 3
1609: PUSH
1610: LD_INT 1
1612: EQUAL
1613: IFFALSE 1638
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1615: LD_EXP 14
1619: PUSH
1620: LD_INT 1
1622: ARRAY
1623: PPUSH
1624: LD_VAR 0 1
1628: PPUSH
1629: LD_INT 0
1631: PPUSH
1632: CALL_OW 49
1636: GO 1656
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1638: LD_EXP 14
1642: PUSH
1643: LD_INT 1
1645: ARRAY
1646: PPUSH
1647: LD_VAR 0 2
1651: PPUSH
1652: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1656: LD_ADDR_EXP 14
1660: PUSH
1661: LD_EXP 14
1665: PPUSH
1666: LD_INT 1
1668: PPUSH
1669: CALL_OW 3
1673: ST_TO_ADDR
// end else
1674: GO 1764
// begin hc_name =  ;
1676: LD_ADDR_OWVAR 26
1680: PUSH
1681: LD_STRING 
1683: ST_TO_ADDR
// hc_gallery =  ;
1684: LD_ADDR_OWVAR 33
1688: PUSH
1689: LD_STRING 
1691: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1692: LD_INT 0
1694: PPUSH
1695: LD_INT 1
1697: PUSH
1698: LD_INT 2
1700: PUSH
1701: LD_INT 3
1703: PUSH
1704: LD_INT 4
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: LIST
1711: LIST
1712: PUSH
1713: LD_INT 1
1715: PPUSH
1716: LD_INT 4
1718: PPUSH
1719: CALL_OW 12
1723: ARRAY
1724: PPUSH
1725: LD_INT 7
1727: PPUSH
1728: LD_INT 9
1730: PPUSH
1731: CALL_OW 12
1735: PPUSH
1736: CALL_OW 380
// un = CreateHuman ;
1740: LD_ADDR_VAR 0 7
1744: PUSH
1745: CALL_OW 44
1749: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1750: LD_VAR 0 7
1754: PPUSH
1755: LD_VAR 0 2
1759: PPUSH
1760: CALL_OW 52
// end ; end ; end ;
1764: LD_VAR 0 5
1768: RET
// export function PrepareVehicles ; var veh ; begin
1769: LD_INT 0
1771: PPUSH
1772: PPUSH
// uc_side = 1 ;
1773: LD_ADDR_OWVAR 20
1777: PUSH
1778: LD_INT 1
1780: ST_TO_ADDR
// uc_nation = 1 ;
1781: LD_ADDR_OWVAR 21
1785: PUSH
1786: LD_INT 1
1788: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1789: LD_ADDR_OWVAR 37
1793: PUSH
1794: LD_INT 3
1796: ST_TO_ADDR
// vc_engine = 3 ;
1797: LD_ADDR_OWVAR 39
1801: PUSH
1802: LD_INT 3
1804: ST_TO_ADDR
// vc_control = 3 ;
1805: LD_ADDR_OWVAR 38
1809: PUSH
1810: LD_INT 3
1812: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1813: LD_ADDR_OWVAR 40
1817: PUSH
1818: LD_INT 4
1820: ST_TO_ADDR
// veh = CreateVehicle ;
1821: LD_ADDR_VAR 0 2
1825: PUSH
1826: CALL_OW 45
1830: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1831: LD_VAR 0 2
1835: PPUSH
1836: LD_INT 4
1838: PPUSH
1839: LD_INT 0
1841: PPUSH
1842: CALL_OW 49
// vc_weapon = us_double_gun ;
1846: LD_ADDR_OWVAR 40
1850: PUSH
1851: LD_INT 5
1853: ST_TO_ADDR
// vc_control = 1 ;
1854: LD_ADDR_OWVAR 38
1858: PUSH
1859: LD_INT 1
1861: ST_TO_ADDR
// veh = CreateVehicle ;
1862: LD_ADDR_VAR 0 2
1866: PUSH
1867: CALL_OW 45
1871: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1872: LD_VAR 0 2
1876: PPUSH
1877: LD_INT 4
1879: PPUSH
1880: LD_INT 0
1882: PPUSH
1883: CALL_OW 49
// vc_weapon = us_light_gun ;
1887: LD_ADDR_OWVAR 40
1891: PUSH
1892: LD_INT 3
1894: ST_TO_ADDR
// vc_control = 3 ;
1895: LD_ADDR_OWVAR 38
1899: PUSH
1900: LD_INT 3
1902: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1903: LD_ADDR_OWVAR 37
1907: PUSH
1908: LD_INT 2
1910: ST_TO_ADDR
// veh = CreateVehicle ;
1911: LD_ADDR_VAR 0 2
1915: PUSH
1916: CALL_OW 45
1920: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1921: LD_VAR 0 2
1925: PPUSH
1926: LD_INT 4
1928: PPUSH
1929: LD_INT 0
1931: PPUSH
1932: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1936: LD_ADDR_OWVAR 40
1940: PUSH
1941: LD_INT 4
1943: ST_TO_ADDR
// veh = CreateVehicle ;
1944: LD_ADDR_VAR 0 2
1948: PUSH
1949: CALL_OW 45
1953: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1954: LD_VAR 0 2
1958: PPUSH
1959: LD_INT 4
1961: PPUSH
1962: LD_INT 0
1964: PPUSH
1965: CALL_OW 49
// end ;
1969: LD_VAR 0 1
1973: RET
// export function PowellSupport1 ; var veh , un ; begin
1974: LD_INT 0
1976: PPUSH
1977: PPUSH
1978: PPUSH
// uc_side = 1 ;
1979: LD_ADDR_OWVAR 20
1983: PUSH
1984: LD_INT 1
1986: ST_TO_ADDR
// uc_nation = 1 ;
1987: LD_ADDR_OWVAR 21
1991: PUSH
1992: LD_INT 1
1994: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1995: LD_STRING 11_Brown
1997: PPUSH
1998: CALL_OW 28
2002: PUSH
2003: LD_INT 1
2005: EQUAL
2006: IFFALSE 2056
// begin Brown = PrepareUnit ( Brown , true , 11_ ) ;
2008: LD_ADDR_EXP 7
2012: PUSH
2013: LD_STRING Brown
2015: PPUSH
2016: LD_INT 1
2018: PPUSH
2019: LD_STRING 11_
2021: PPUSH
2022: CALL 38602 0 3
2026: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
2027: LD_EXP 7
2031: PPUSH
2032: LD_INT 2
2034: PPUSH
2035: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2039: LD_EXP 7
2043: PPUSH
2044: LD_INT 4
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: CALL_OW 49
// end else
2054: GO 2072
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2056: LD_INT 4
2058: PPUSH
2059: LD_INT 0
2061: PPUSH
2062: LD_INT 1
2064: PPUSH
2065: LD_INT 0
2067: PPUSH
2068: CALL 1343 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
2072: LD_STRING 11_Gary
2074: PPUSH
2075: CALL_OW 28
2079: PUSH
2080: LD_INT 1
2082: EQUAL
2083: IFFALSE 2133
// begin Gary = PrepareUnit ( Gary , true , 11_ ) ;
2085: LD_ADDR_EXP 11
2089: PUSH
2090: LD_STRING Gary
2092: PPUSH
2093: LD_INT 1
2095: PPUSH
2096: LD_STRING 11_
2098: PPUSH
2099: CALL 38602 0 3
2103: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
2104: LD_EXP 11
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2116: LD_EXP 11
2120: PPUSH
2121: LD_INT 4
2123: PPUSH
2124: LD_INT 0
2126: PPUSH
2127: CALL_OW 49
// end else
2131: GO 2149
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2133: LD_INT 4
2135: PPUSH
2136: LD_INT 0
2138: PPUSH
2139: LD_INT 1
2141: PPUSH
2142: LD_INT 0
2144: PPUSH
2145: CALL 1343 0 4
// end ; vc_chassis = us_medium_tracked ;
2149: LD_ADDR_OWVAR 37
2153: PUSH
2154: LD_INT 3
2156: ST_TO_ADDR
// vc_engine = 3 ;
2157: LD_ADDR_OWVAR 39
2161: PUSH
2162: LD_INT 3
2164: ST_TO_ADDR
// vc_control = 1 ;
2165: LD_ADDR_OWVAR 38
2169: PUSH
2170: LD_INT 1
2172: ST_TO_ADDR
// vc_weapon = us_crane ;
2173: LD_ADDR_OWVAR 40
2177: PUSH
2178: LD_INT 13
2180: ST_TO_ADDR
// veh = CreateVehicle ;
2181: LD_ADDR_VAR 0 2
2185: PUSH
2186: CALL_OW 45
2190: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2191: LD_VAR 0 2
2195: PPUSH
2196: LD_INT 4
2198: PPUSH
2199: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2203: LD_VAR 0 2
2207: PPUSH
2208: LD_INT 4
2210: PPUSH
2211: LD_INT 0
2213: PPUSH
2214: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2218: LD_INT 4
2220: PPUSH
2221: LD_VAR 0 2
2225: PPUSH
2226: LD_INT 2
2228: PPUSH
2229: LD_INT 1
2231: PPUSH
2232: CALL 1343 0 4
// vc_weapon = 9 ;
2236: LD_ADDR_OWVAR 40
2240: PUSH
2241: LD_INT 9
2243: ST_TO_ADDR
// veh = CreateVehicle ;
2244: LD_ADDR_VAR 0 2
2248: PUSH
2249: CALL_OW 45
2253: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2254: LD_VAR 0 2
2258: PPUSH
2259: LD_INT 4
2261: PPUSH
2262: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2266: LD_VAR 0 2
2270: PPUSH
2271: LD_INT 4
2273: PPUSH
2274: LD_INT 0
2276: PPUSH
2277: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2281: LD_INT 4
2283: PPUSH
2284: LD_VAR 0 2
2288: PPUSH
2289: LD_INT 2
2291: PPUSH
2292: LD_INT 1
2294: PPUSH
2295: CALL 1343 0 4
// vc_control = 3 ;
2299: LD_ADDR_OWVAR 38
2303: PUSH
2304: LD_INT 3
2306: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2307: LD_ADDR_OWVAR 40
2311: PUSH
2312: LD_INT 12
2314: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2315: LD_ADDR_EXP 15
2319: PUSH
2320: CALL_OW 45
2324: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2325: LD_ADDR_EXP 16
2329: PUSH
2330: CALL_OW 45
2334: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2335: LD_EXP 15
2339: PPUSH
2340: LD_INT 4
2342: PPUSH
2343: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2347: LD_EXP 16
2351: PPUSH
2352: LD_INT 4
2354: PPUSH
2355: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2359: LD_EXP 15
2363: PPUSH
2364: LD_INT 4
2366: PPUSH
2367: LD_INT 0
2369: PPUSH
2370: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2374: LD_EXP 16
2378: PPUSH
2379: LD_INT 4
2381: PPUSH
2382: LD_INT 0
2384: PPUSH
2385: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2389: LD_EXP 15
2393: PPUSH
2394: LD_INT 3
2396: PPUSH
2397: LD_INT 100
2399: PPUSH
2400: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2404: LD_EXP 16
2408: PPUSH
2409: LD_INT 1
2411: PPUSH
2412: LD_INT 80
2414: PPUSH
2415: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2419: LD_EXP 16
2423: PPUSH
2424: LD_INT 3
2426: PPUSH
2427: LD_INT 20
2429: PPUSH
2430: CALL_OW 291
// end ;
2434: LD_VAR 0 1
2438: RET
// export function PowellSupport2 ; var veh , un ; begin
2439: LD_INT 0
2441: PPUSH
2442: PPUSH
2443: PPUSH
// uc_side = 1 ;
2444: LD_ADDR_OWVAR 20
2448: PUSH
2449: LD_INT 1
2451: ST_TO_ADDR
// uc_nation = 1 ;
2452: LD_ADDR_OWVAR 21
2456: PUSH
2457: LD_INT 1
2459: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2460: LD_ADDR_OWVAR 37
2464: PUSH
2465: LD_INT 2
2467: ST_TO_ADDR
// vc_engine = 3 ;
2468: LD_ADDR_OWVAR 39
2472: PUSH
2473: LD_INT 3
2475: ST_TO_ADDR
// vc_control = 3 ;
2476: LD_ADDR_OWVAR 38
2480: PUSH
2481: LD_INT 3
2483: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2484: LD_ADDR_OWVAR 40
2488: PUSH
2489: LD_INT 3
2491: ST_TO_ADDR
// veh = CreateVehicle ;
2492: LD_ADDR_VAR 0 2
2496: PUSH
2497: CALL_OW 45
2501: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2502: LD_VAR 0 2
2506: PPUSH
2507: LD_INT 4
2509: PPUSH
2510: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2514: LD_VAR 0 2
2518: PPUSH
2519: LD_INT 4
2521: PPUSH
2522: LD_INT 0
2524: PPUSH
2525: CALL_OW 49
// vc_control = 1 ;
2529: LD_ADDR_OWVAR 38
2533: PUSH
2534: LD_INT 1
2536: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2537: LD_ADDR_OWVAR 37
2541: PUSH
2542: LD_INT 2
2544: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2545: LD_ADDR_OWVAR 40
2549: PUSH
2550: LD_INT 5
2552: ST_TO_ADDR
// veh = CreateVehicle ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: CALL_OW 45
2562: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2563: LD_VAR 0 2
2567: PPUSH
2568: LD_INT 4
2570: PPUSH
2571: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2575: LD_VAR 0 2
2579: PPUSH
2580: LD_INT 4
2582: PPUSH
2583: LD_INT 0
2585: PPUSH
2586: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2590: LD_STRING 11_Bobby
2592: PPUSH
2593: CALL_OW 28
2597: PUSH
2598: LD_INT 1
2600: EQUAL
2601: IFFALSE 2650
// begin Bobby = PrepareUnit ( Bobby , true , 11_ ) ;
2603: LD_ADDR_EXP 4
2607: PUSH
2608: LD_STRING Bobby
2610: PPUSH
2611: LD_INT 1
2613: PPUSH
2614: LD_STRING 11_
2616: PPUSH
2617: CALL 38602 0 3
2621: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2622: LD_EXP 4
2626: PPUSH
2627: LD_INT 3
2629: PPUSH
2630: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2634: LD_EXP 4
2638: PPUSH
2639: LD_VAR 0 2
2643: PPUSH
2644: CALL_OW 52
// end else
2648: GO 2668
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2650: LD_INT 0
2652: PPUSH
2653: LD_VAR 0 2
2657: PPUSH
2658: LD_INT 2
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: CALL 1343 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2668: LD_STRING 11_Houten
2670: PPUSH
2671: CALL_OW 28
2675: PUSH
2676: LD_INT 1
2678: EQUAL
2679: IFFALSE 2729
// begin Houten = PrepareUnit ( Houten , true , 11_ ) ;
2681: LD_ADDR_EXP 9
2685: PUSH
2686: LD_STRING Houten
2688: PPUSH
2689: LD_INT 1
2691: PPUSH
2692: LD_STRING 11_
2694: PPUSH
2695: CALL 38602 0 3
2699: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2700: LD_EXP 9
2704: PPUSH
2705: LD_INT 1
2707: PPUSH
2708: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2712: LD_EXP 9
2716: PPUSH
2717: LD_INT 4
2719: PPUSH
2720: LD_INT 0
2722: PPUSH
2723: CALL_OW 49
// end else
2727: GO 2745
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2729: LD_INT 4
2731: PPUSH
2732: LD_INT 0
2734: PPUSH
2735: LD_INT 1
2737: PPUSH
2738: LD_INT 0
2740: PPUSH
2741: CALL 1343 0 4
// end ; vc_control = 3 ;
2745: LD_ADDR_OWVAR 38
2749: PUSH
2750: LD_INT 3
2752: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2753: LD_ADDR_OWVAR 40
2757: PUSH
2758: LD_INT 12
2760: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2761: LD_ADDR_EXP 17
2765: PUSH
2766: CALL_OW 45
2770: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2771: LD_EXP 17
2775: PPUSH
2776: LD_INT 4
2778: PPUSH
2779: CALL_OW 233
// amCargo4 = CreateVehicle ;
2783: LD_ADDR_EXP 18
2787: PUSH
2788: CALL_OW 45
2792: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2793: LD_EXP 18
2797: PPUSH
2798: LD_INT 4
2800: PPUSH
2801: CALL_OW 233
// amCargo5 = CreateVehicle ;
2805: LD_ADDR_EXP 19
2809: PUSH
2810: CALL_OW 45
2814: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2815: LD_EXP 19
2819: PPUSH
2820: LD_INT 4
2822: PPUSH
2823: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2827: LD_EXP 17
2831: PPUSH
2832: LD_INT 4
2834: PPUSH
2835: LD_INT 0
2837: PPUSH
2838: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2842: LD_EXP 18
2846: PPUSH
2847: LD_INT 4
2849: PPUSH
2850: LD_INT 0
2852: PPUSH
2853: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2857: LD_EXP 19
2861: PPUSH
2862: LD_INT 4
2864: PPUSH
2865: LD_INT 0
2867: PPUSH
2868: CALL_OW 49
// if kurtStatus > 0 then
2872: LD_EXP 26
2876: PUSH
2877: LD_INT 0
2879: GREATER
2880: IFFALSE 2929
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2882: LD_EXP 17
2886: PPUSH
2887: LD_INT 1
2889: PPUSH
2890: LD_INT 100
2892: PPUSH
2893: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2897: LD_EXP 18
2901: PPUSH
2902: LD_INT 1
2904: PPUSH
2905: LD_INT 100
2907: PPUSH
2908: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2912: LD_EXP 19
2916: PPUSH
2917: LD_INT 3
2919: PPUSH
2920: LD_INT 80
2922: PPUSH
2923: CALL_OW 291
// end else
2927: GO 2974
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2929: LD_EXP 17
2933: PPUSH
2934: LD_INT 1
2936: PPUSH
2937: LD_INT 100
2939: PPUSH
2940: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2944: LD_EXP 18
2948: PPUSH
2949: LD_INT 3
2951: PPUSH
2952: LD_INT 60
2954: PPUSH
2955: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2959: LD_EXP 19
2963: PPUSH
2964: LD_INT 3
2966: PPUSH
2967: LD_INT 100
2969: PPUSH
2970: CALL_OW 291
// end ; end ;
2974: LD_VAR 0 1
2978: RET
// export function PowellSupport3 ; var veh , un ; begin
2979: LD_INT 0
2981: PPUSH
2982: PPUSH
2983: PPUSH
// uc_side = 1 ;
2984: LD_ADDR_OWVAR 20
2988: PUSH
2989: LD_INT 1
2991: ST_TO_ADDR
// uc_nation = 1 ;
2992: LD_ADDR_OWVAR 21
2996: PUSH
2997: LD_INT 1
2999: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3000: LD_INT 4
3002: PPUSH
3003: LD_INT 0
3005: PPUSH
3006: LD_INT 1
3008: PPUSH
3009: LD_INT 0
3011: PPUSH
3012: CALL 1343 0 4
// vc_chassis = us_medium_wheeled ;
3016: LD_ADDR_OWVAR 37
3020: PUSH
3021: LD_INT 2
3023: ST_TO_ADDR
// vc_engine = 3 ;
3024: LD_ADDR_OWVAR 39
3028: PUSH
3029: LD_INT 3
3031: ST_TO_ADDR
// vc_control = 3 ;
3032: LD_ADDR_OWVAR 38
3036: PUSH
3037: LD_INT 3
3039: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
3040: LD_ADDR_OWVAR 40
3044: PUSH
3045: LD_INT 12
3047: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
3048: LD_ADDR_EXP 20
3052: PUSH
3053: CALL_OW 45
3057: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
3058: LD_ADDR_EXP 21
3062: PUSH
3063: CALL_OW 45
3067: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
3068: LD_EXP 20
3072: PPUSH
3073: LD_INT 4
3075: PPUSH
3076: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
3080: LD_EXP 21
3084: PPUSH
3085: LD_INT 4
3087: PPUSH
3088: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
3092: LD_EXP 20
3096: PPUSH
3097: LD_INT 4
3099: PPUSH
3100: LD_INT 0
3102: PPUSH
3103: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
3107: LD_EXP 21
3111: PPUSH
3112: LD_INT 4
3114: PPUSH
3115: LD_INT 0
3117: PPUSH
3118: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
3122: LD_EXP 20
3126: PPUSH
3127: LD_INT 1
3129: PPUSH
3130: LD_INT 100
3132: PPUSH
3133: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3137: LD_EXP 21
3141: PPUSH
3142: LD_INT 1
3144: PPUSH
3145: LD_INT 100
3147: PPUSH
3148: CALL_OW 291
// end ; end_of_file
3152: LD_VAR 0 1
3156: RET
// export function PrepareRussianCommander ; begin
3157: LD_INT 0
3159: PPUSH
// uc_side = 3 ;
3160: LD_ADDR_OWVAR 20
3164: PUSH
3165: LD_INT 3
3167: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ,  ) ;
3168: LD_ADDR_EXP 23
3172: PUSH
3173: LD_STRING Davidov
3175: PPUSH
3176: LD_INT 0
3178: PPUSH
3179: LD_STRING 
3181: PPUSH
3182: CALL 38602 0 3
3186: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3187: LD_EXP 23
3191: PPUSH
3192: LD_INT 3
3194: PPUSH
3195: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3199: LD_ADDR_EXP 34
3203: PUSH
3204: LD_EXP 34
3208: PUSH
3209: LD_EXP 23
3213: ADD
3214: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3215: LD_EXP 34
3219: PPUSH
3220: LD_INT 4
3222: PPUSH
3223: CALL_OW 336
// end ;
3227: LD_VAR 0 1
3231: RET
// export function PrepareEastBase ; var i , un ; begin
3232: LD_INT 0
3234: PPUSH
3235: PPUSH
3236: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3237: LD_INT 3
3239: PPUSH
3240: LD_INT 3
3242: PPUSH
3243: LD_INT 121
3245: PPUSH
3246: LD_EXP 36
3250: PPUSH
3251: LD_EXP 37
3255: PPUSH
3256: CALL_OW 12
3260: PPUSH
3261: LD_INT 1
3263: PPUSH
3264: LD_INT 3
3266: PPUSH
3267: CALL 13089 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3271: LD_INT 3
3273: PPUSH
3274: LD_INT 3
3276: PPUSH
3277: LD_INT 121
3279: PPUSH
3280: LD_EXP 36
3284: PPUSH
3285: LD_EXP 37
3289: PPUSH
3290: CALL_OW 12
3294: PPUSH
3295: LD_INT 9
3297: PPUSH
3298: LD_INT 3
3300: PPUSH
3301: CALL 13089 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3305: LD_INT 3
3307: PPUSH
3308: LD_INT 3
3310: PPUSH
3311: LD_INT 4
3313: PPUSH
3314: LD_EXP 36
3318: PPUSH
3319: LD_EXP 37
3323: PPUSH
3324: CALL_OW 12
3328: PPUSH
3329: LD_INT 2
3331: PPUSH
3332: LD_INT 6
3334: PPUSH
3335: CALL 13089 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3339: LD_INT 3
3341: PPUSH
3342: LD_INT 3
3344: PPUSH
3345: LD_INT 112
3347: PPUSH
3348: LD_EXP 36
3352: PPUSH
3353: LD_EXP 37
3357: PPUSH
3358: CALL_OW 12
3362: PPUSH
3363: LD_INT 3
3365: PPUSH
3366: LD_INT 6
3368: PPUSH
3369: CALL 13089 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3373: LD_INT 3
3375: PPUSH
3376: LD_INT 3
3378: PPUSH
3379: LD_INT 47
3381: PPUSH
3382: LD_EXP 36
3386: PPUSH
3387: LD_EXP 37
3391: PPUSH
3392: CALL_OW 12
3396: PPUSH
3397: LD_INT 4
3399: PPUSH
3400: LD_INT 6
3402: PPUSH
3403: CALL 13089 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3407: LD_INT 3
3409: PPUSH
3410: LD_INT 3
3412: PPUSH
3413: LD_INT 129
3415: PPUSH
3416: LD_EXP 36
3420: PPUSH
3421: LD_EXP 37
3425: PPUSH
3426: CALL_OW 12
3430: PPUSH
3431: LD_INT 4
3433: PPUSH
3434: LD_INT 6
3436: PPUSH
3437: CALL 13089 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3441: LD_INT 3
3443: PPUSH
3444: LD_INT 3
3446: PPUSH
3447: LD_INT 135
3449: PPUSH
3450: LD_EXP 36
3454: PPUSH
3455: LD_EXP 37
3459: PPUSH
3460: CALL_OW 12
3464: PPUSH
3465: LD_INT 4
3467: PPUSH
3468: LD_INT 6
3470: PPUSH
3471: CALL 13089 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3475: LD_ADDR_VAR 0 2
3479: PUSH
3480: LD_INT 22
3482: PUSH
3483: LD_INT 3
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 30
3492: PUSH
3493: LD_INT 32
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: EMPTY
3501: LIST
3502: LIST
3503: PPUSH
3504: CALL_OW 69
3508: PUSH
3509: FOR_IN
3510: IFFALSE 3550
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3512: LD_INT 3
3514: PPUSH
3515: LD_INT 3
3517: PPUSH
3518: LD_VAR 0 2
3522: PPUSH
3523: LD_EXP 36
3527: PPUSH
3528: LD_EXP 37
3532: PPUSH
3533: CALL_OW 12
3537: PPUSH
3538: LD_INT 1
3540: PPUSH
3541: LD_INT 1
3543: PPUSH
3544: CALL 13089 0 6
3548: GO 3509
3550: POP
3551: POP
// for i = 1 to 5 do
3552: LD_ADDR_VAR 0 2
3556: PUSH
3557: DOUBLE
3558: LD_INT 1
3560: DEC
3561: ST_TO_ADDR
3562: LD_INT 5
3564: PUSH
3565: FOR_TO
3566: IFFALSE 3665
// begin uc_side = 3 ;
3568: LD_ADDR_OWVAR 20
3572: PUSH
3573: LD_INT 3
3575: ST_TO_ADDR
// uc_nation = 3 ;
3576: LD_ADDR_OWVAR 21
3580: PUSH
3581: LD_INT 3
3583: ST_TO_ADDR
// hc_gallery =  ;
3584: LD_ADDR_OWVAR 33
3588: PUSH
3589: LD_STRING 
3591: ST_TO_ADDR
// hc_name =  ;
3592: LD_ADDR_OWVAR 26
3596: PUSH
3597: LD_STRING 
3599: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3600: LD_INT 0
3602: PPUSH
3603: LD_INT 4
3605: PPUSH
3606: LD_EXP 36
3610: PPUSH
3611: LD_EXP 37
3615: PPUSH
3616: CALL_OW 12
3620: PPUSH
3621: CALL_OW 380
// un = CreateHuman ;
3625: LD_ADDR_VAR 0 3
3629: PUSH
3630: CALL_OW 44
3634: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3635: LD_VAR 0 3
3639: PPUSH
3640: LD_INT 3
3642: PPUSH
3643: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3647: LD_ADDR_EXP 34
3651: PUSH
3652: LD_EXP 34
3656: PUSH
3657: LD_VAR 0 3
3661: ADD
3662: ST_TO_ADDR
// end ;
3663: GO 3565
3665: POP
3666: POP
// end ;
3667: LD_VAR 0 1
3671: RET
// export function PrepareWestBase ; var i , un ; begin
3672: LD_INT 0
3674: PPUSH
3675: PPUSH
3676: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3677: LD_INT 10
3679: PPUSH
3680: LD_INT 122
3682: PPUSH
3683: LD_INT 145
3685: PPUSH
3686: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3690: LD_INT 137
3692: PPUSH
3693: LD_INT 84
3695: PPUSH
3696: LD_INT 61
3698: PPUSH
3699: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3703: LD_INT 3
3705: PPUSH
3706: LD_INT 3
3708: PPUSH
3709: LD_INT 6
3711: PPUSH
3712: LD_EXP 36
3716: PPUSH
3717: LD_EXP 37
3721: PPUSH
3722: CALL_OW 12
3726: PPUSH
3727: LD_INT 2
3729: PPUSH
3730: LD_INT 3
3732: PPUSH
3733: CALL 13089 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3737: LD_INT 3
3739: PPUSH
3740: LD_INT 3
3742: PPUSH
3743: LD_INT 91
3745: PPUSH
3746: LD_EXP 36
3750: PPUSH
3751: LD_EXP 37
3755: PPUSH
3756: CALL_OW 12
3760: PPUSH
3761: LD_INT 4
3763: PPUSH
3764: LD_INT 3
3766: PPUSH
3767: CALL 13089 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3771: LD_INT 3
3773: PPUSH
3774: LD_INT 3
3776: PPUSH
3777: LD_INT 21
3779: PPUSH
3780: LD_EXP 36
3784: PPUSH
3785: LD_EXP 37
3789: PPUSH
3790: CALL_OW 12
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: LD_INT 6
3800: PPUSH
3801: CALL 13089 0 6
// end ;
3805: LD_VAR 0 1
3809: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3810: LD_INT 0
3812: PPUSH
3813: PPUSH
3814: PPUSH
3815: PPUSH
// uc_side = 3 ;
3816: LD_ADDR_OWVAR 20
3820: PUSH
3821: LD_INT 3
3823: ST_TO_ADDR
// uc_nation = 3 ;
3824: LD_ADDR_OWVAR 21
3828: PUSH
3829: LD_INT 3
3831: ST_TO_ADDR
// for i = 1 to 5 do
3832: LD_ADDR_VAR 0 2
3836: PUSH
3837: DOUBLE
3838: LD_INT 1
3840: DEC
3841: ST_TO_ADDR
3842: LD_INT 5
3844: PUSH
3845: FOR_TO
3846: IFFALSE 3916
// begin hc_gallery =  ;
3848: LD_ADDR_OWVAR 33
3852: PUSH
3853: LD_STRING 
3855: ST_TO_ADDR
// hc_name =  ;
3856: LD_ADDR_OWVAR 26
3860: PUSH
3861: LD_STRING 
3863: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3864: LD_INT 0
3866: PPUSH
3867: LD_INT 9
3869: PPUSH
3870: LD_EXP 36
3874: PPUSH
3875: LD_EXP 37
3879: PPUSH
3880: CALL_OW 12
3884: PPUSH
3885: CALL_OW 380
// un = CreateHuman ;
3889: LD_ADDR_VAR 0 3
3893: PUSH
3894: CALL_OW 44
3898: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3899: LD_VAR 0 3
3903: PPUSH
3904: LD_INT 8
3906: PPUSH
3907: LD_INT 0
3909: PPUSH
3910: CALL_OW 49
// end ;
3914: GO 3845
3916: POP
3917: POP
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
3918: LD_ADDR_VAR 0 2
3922: PUSH
3923: DOUBLE
3924: LD_INT 1
3926: DEC
3927: ST_TO_ADDR
3928: LD_INT 2
3930: PUSH
3931: LD_INT 3
3933: PUSH
3934: LD_INT 4
3936: PUSH
3937: LD_INT 4
3939: PUSH
3940: EMPTY
3941: LIST
3942: LIST
3943: LIST
3944: LIST
3945: PUSH
3946: LD_OWVAR 67
3950: ARRAY
3951: PUSH
3952: FOR_TO
3953: IFFALSE 4023
// begin hc_gallery =  ;
3955: LD_ADDR_OWVAR 33
3959: PUSH
3960: LD_STRING 
3962: ST_TO_ADDR
// hc_name =  ;
3963: LD_ADDR_OWVAR 26
3967: PUSH
3968: LD_STRING 
3970: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3971: LD_INT 0
3973: PPUSH
3974: LD_INT 4
3976: PPUSH
3977: LD_EXP 36
3981: PPUSH
3982: LD_EXP 37
3986: PPUSH
3987: CALL_OW 12
3991: PPUSH
3992: CALL_OW 380
// un = CreateHuman ;
3996: LD_ADDR_VAR 0 3
4000: PUSH
4001: CALL_OW 44
4005: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4006: LD_VAR 0 3
4010: PPUSH
4011: LD_INT 8
4013: PPUSH
4014: LD_INT 0
4016: PPUSH
4017: CALL_OW 49
// end ;
4021: GO 3952
4023: POP
4024: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4025: LD_ADDR_VAR 0 2
4029: PUSH
4030: DOUBLE
4031: LD_INT 1
4033: DEC
4034: ST_TO_ADDR
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 5
4043: PUSH
4044: LD_INT 5
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: LIST
4051: LIST
4052: PUSH
4053: LD_OWVAR 67
4057: ARRAY
4058: PUSH
4059: FOR_TO
4060: IFFALSE 4256
// begin vc_engine = 3 ;
4062: LD_ADDR_OWVAR 39
4066: PUSH
4067: LD_INT 3
4069: ST_TO_ADDR
// vc_control = 1 ;
4070: LD_ADDR_OWVAR 38
4074: PUSH
4075: LD_INT 1
4077: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4078: LD_ADDR_OWVAR 40
4082: PUSH
4083: LD_INT 42
4085: PUSH
4086: LD_INT 43
4088: PUSH
4089: LD_INT 44
4091: PUSH
4092: LD_INT 45
4094: PUSH
4095: LD_INT 46
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: LIST
4104: PUSH
4105: LD_INT 1
4107: PPUSH
4108: LD_INT 5
4110: PPUSH
4111: CALL_OW 12
4115: ARRAY
4116: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4117: LD_OWVAR 40
4121: PUSH
4122: LD_INT 46
4124: EQUAL
4125: IFFALSE 4137
// vc_chassis = ru_heavy_tracked else
4127: LD_ADDR_OWVAR 37
4131: PUSH
4132: LD_INT 24
4134: ST_TO_ADDR
4135: GO 4164
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4137: LD_ADDR_OWVAR 37
4141: PUSH
4142: LD_INT 22
4144: PUSH
4145: LD_INT 21
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PUSH
4152: LD_INT 1
4154: PPUSH
4155: LD_INT 2
4157: PPUSH
4158: CALL_OW 12
4162: ARRAY
4163: ST_TO_ADDR
// veh = CreateVehicle ;
4164: LD_ADDR_VAR 0 4
4168: PUSH
4169: CALL_OW 45
4173: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4174: LD_VAR 0 4
4178: PPUSH
4179: LD_INT 3
4181: PPUSH
4182: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4186: LD_VAR 0 4
4190: PPUSH
4191: LD_INT 5
4193: PPUSH
4194: LD_INT 0
4196: PPUSH
4197: CALL_OW 49
// hc_gallery =  ;
4201: LD_ADDR_OWVAR 33
4205: PUSH
4206: LD_STRING 
4208: ST_TO_ADDR
// hc_name =  ;
4209: LD_ADDR_OWVAR 26
4213: PUSH
4214: LD_STRING 
4216: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4217: LD_INT 0
4219: PPUSH
4220: LD_INT 3
4222: PPUSH
4223: LD_INT 10
4225: PPUSH
4226: CALL_OW 380
// un = CreateHuman ;
4230: LD_ADDR_VAR 0 3
4234: PUSH
4235: CALL_OW 44
4239: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4240: LD_VAR 0 3
4244: PPUSH
4245: LD_VAR 0 4
4249: PPUSH
4250: CALL_OW 52
// end ;
4254: GO 4059
4256: POP
4257: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4258: LD_ADDR_VAR 0 2
4262: PUSH
4263: DOUBLE
4264: LD_INT 1
4266: DEC
4267: ST_TO_ADDR
4268: LD_INT 3
4270: PUSH
4271: LD_INT 4
4273: PUSH
4274: LD_INT 5
4276: PUSH
4277: LD_INT 5
4279: PUSH
4280: EMPTY
4281: LIST
4282: LIST
4283: LIST
4284: LIST
4285: PUSH
4286: LD_OWVAR 67
4290: ARRAY
4291: PUSH
4292: FOR_TO
4293: IFFALSE 4440
// begin vc_engine = 3 ;
4295: LD_ADDR_OWVAR 39
4299: PUSH
4300: LD_INT 3
4302: ST_TO_ADDR
// vc_control = 3 ;
4303: LD_ADDR_OWVAR 38
4307: PUSH
4308: LD_INT 3
4310: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4311: LD_ADDR_OWVAR 40
4315: PUSH
4316: LD_INT 42
4318: PUSH
4319: LD_INT 43
4321: PUSH
4322: LD_INT 44
4324: PUSH
4325: LD_INT 45
4327: PUSH
4328: LD_INT 46
4330: PUSH
4331: LD_INT 49
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: LIST
4338: LIST
4339: LIST
4340: LIST
4341: PUSH
4342: LD_INT 1
4344: PPUSH
4345: LD_INT 5
4347: PPUSH
4348: CALL_OW 12
4352: ARRAY
4353: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4354: LD_OWVAR 40
4358: PUSH
4359: LD_INT 46
4361: EQUAL
4362: IFFALSE 4374
// vc_chassis = ru_heavy_tracked else
4364: LD_ADDR_OWVAR 37
4368: PUSH
4369: LD_INT 24
4371: ST_TO_ADDR
4372: GO 4401
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4374: LD_ADDR_OWVAR 37
4378: PUSH
4379: LD_INT 22
4381: PUSH
4382: LD_INT 21
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: PUSH
4389: LD_INT 1
4391: PPUSH
4392: LD_INT 2
4394: PPUSH
4395: CALL_OW 12
4399: ARRAY
4400: ST_TO_ADDR
// veh = CreateVehicle ;
4401: LD_ADDR_VAR 0 4
4405: PUSH
4406: CALL_OW 45
4410: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4411: LD_VAR 0 4
4415: PPUSH
4416: LD_INT 3
4418: PPUSH
4419: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4423: LD_VAR 0 4
4427: PPUSH
4428: LD_INT 6
4430: PPUSH
4431: LD_INT 0
4433: PPUSH
4434: CALL_OW 49
// end ;
4438: GO 4292
4440: POP
4441: POP
// end ; end_of_file
4442: LD_VAR 0 1
4446: RET
// export function PrepareKurt ; begin
4447: LD_INT 0
4449: PPUSH
// uc_side = 8 ;
4450: LD_ADDR_OWVAR 20
4454: PUSH
4455: LD_INT 8
4457: ST_TO_ADDR
// uc_nation = 2 ;
4458: LD_ADDR_OWVAR 21
4462: PUSH
4463: LD_INT 2
4465: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4466: LD_ADDR_OWVAR 37
4470: PUSH
4471: LD_INT 13
4473: ST_TO_ADDR
// vc_engine = 1 ;
4474: LD_ADDR_OWVAR 39
4478: PUSH
4479: LD_INT 1
4481: ST_TO_ADDR
// vc_control = 1 ;
4482: LD_ADDR_OWVAR 38
4486: PUSH
4487: LD_INT 1
4489: ST_TO_ADDR
// vc_weapon = 24 ;
4490: LD_ADDR_OWVAR 40
4494: PUSH
4495: LD_INT 24
4497: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4498: LD_ADDR_EXP 25
4502: PUSH
4503: CALL_OW 45
4507: ST_TO_ADDR
// if kurtStatus > 0 then
4508: LD_EXP 26
4512: PUSH
4513: LD_INT 0
4515: GREATER
4516: IFFALSE 4568
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4518: LD_ADDR_EXP 24
4522: PUSH
4523: LD_STRING Kurt
4525: PPUSH
4526: LD_INT 0
4528: PPUSH
4529: LD_STRING 
4531: PPUSH
4532: CALL 38602 0 3
4536: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4537: LD_EXP 25
4541: PPUSH
4542: LD_INT 4
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4552: LD_EXP 24
4556: PPUSH
4557: LD_EXP 25
4561: PPUSH
4562: CALL_OW 52
// end else
4566: GO 4645
// begin hc_name =  ;
4568: LD_ADDR_OWVAR 26
4572: PUSH
4573: LD_STRING 
4575: ST_TO_ADDR
// hc_gallery =  ;
4576: LD_ADDR_OWVAR 33
4580: PUSH
4581: LD_STRING 
4583: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4584: LD_INT 1
4586: PPUSH
4587: LD_INT 10
4589: PPUSH
4590: CALL_OW 381
// Kurt = CreateHuman ;
4594: LD_ADDR_EXP 24
4598: PUSH
4599: CALL_OW 44
4603: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4604: LD_EXP 25
4608: PPUSH
4609: LD_INT 4
4611: PPUSH
4612: LD_INT 0
4614: PPUSH
4615: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4619: LD_EXP 24
4623: PPUSH
4624: LD_EXP 25
4628: PPUSH
4629: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4633: LD_EXP 24
4637: PPUSH
4638: LD_STRING AltKurt
4640: PPUSH
4641: CALL_OW 38
// end ; end ;
4645: LD_VAR 0 1
4649: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4650: LD_INT 0
4652: PPUSH
4653: PPUSH
4654: PPUSH
4655: PPUSH
// for i = 1 to 3 do
4656: LD_ADDR_VAR 0 2
4660: PUSH
4661: DOUBLE
4662: LD_INT 1
4664: DEC
4665: ST_TO_ADDR
4666: LD_INT 3
4668: PUSH
4669: FOR_TO
4670: IFFALSE 4791
// begin uc_side = 1 ;
4672: LD_ADDR_OWVAR 20
4676: PUSH
4677: LD_INT 1
4679: ST_TO_ADDR
// uc_nation = 2 ;
4680: LD_ADDR_OWVAR 21
4684: PUSH
4685: LD_INT 2
4687: ST_TO_ADDR
// hc_gallery =  ;
4688: LD_ADDR_OWVAR 33
4692: PUSH
4693: LD_STRING 
4695: ST_TO_ADDR
// hc_name =  ;
4696: LD_ADDR_OWVAR 26
4700: PUSH
4701: LD_STRING 
4703: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4704: LD_EXP 26
4708: PUSH
4709: LD_INT 0
4711: EQUAL
4712: PUSH
4713: LD_EXP 26
4717: PUSH
4718: LD_INT 2
4720: EQUAL
4721: OR
4722: IFFALSE 4739
// PrepareHuman ( false , 1 , 6 ) else
4724: LD_INT 0
4726: PPUSH
4727: LD_INT 1
4729: PPUSH
4730: LD_INT 6
4732: PPUSH
4733: CALL_OW 380
4737: GO 4752
// PrepareHuman ( false , 1 , 8 ) ;
4739: LD_INT 0
4741: PPUSH
4742: LD_INT 1
4744: PPUSH
4745: LD_INT 8
4747: PPUSH
4748: CALL_OW 380
// un = CreateHuman ;
4752: LD_ADDR_VAR 0 3
4756: PUSH
4757: CALL_OW 44
4761: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4762: LD_VAR 0 3
4766: PPUSH
4767: LD_INT 4
4769: PPUSH
4770: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4774: LD_VAR 0 3
4778: PPUSH
4779: LD_INT 4
4781: PPUSH
4782: LD_INT 0
4784: PPUSH
4785: CALL_OW 49
// end ;
4789: GO 4669
4791: POP
4792: POP
// vc_chassis = 14 ;
4793: LD_ADDR_OWVAR 37
4797: PUSH
4798: LD_INT 14
4800: ST_TO_ADDR
// vc_engine = 3 ;
4801: LD_ADDR_OWVAR 39
4805: PUSH
4806: LD_INT 3
4808: ST_TO_ADDR
// vc_control = 1 ;
4809: LD_ADDR_OWVAR 38
4813: PUSH
4814: LD_INT 1
4816: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4817: LD_ADDR_OWVAR 40
4821: PUSH
4822: LD_INT 27
4824: PUSH
4825: LD_INT 26
4827: PUSH
4828: LD_INT 28
4830: PUSH
4831: EMPTY
4832: LIST
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 1
4838: PPUSH
4839: LD_INT 3
4841: PPUSH
4842: CALL_OW 12
4846: ARRAY
4847: ST_TO_ADDR
// veh = CreateVehicle ;
4848: LD_ADDR_VAR 0 4
4852: PUSH
4853: CALL_OW 45
4857: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4858: LD_VAR 0 4
4862: PPUSH
4863: LD_INT 4
4865: PPUSH
4866: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4870: LD_VAR 0 4
4874: PPUSH
4875: LD_INT 4
4877: PPUSH
4878: LD_INT 0
4880: PPUSH
4881: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4885: LD_EXP 26
4889: PUSH
4890: LD_INT 0
4892: EQUAL
4893: PUSH
4894: LD_EXP 26
4898: PUSH
4899: LD_INT 2
4901: EQUAL
4902: OR
4903: IFFALSE 4920
// PrepareHuman ( false , 3 , 6 ) else
4905: LD_INT 0
4907: PPUSH
4908: LD_INT 3
4910: PPUSH
4911: LD_INT 6
4913: PPUSH
4914: CALL_OW 380
4918: GO 4933
// PrepareHuman ( false , 3 , 8 ) ;
4920: LD_INT 0
4922: PPUSH
4923: LD_INT 3
4925: PPUSH
4926: LD_INT 8
4928: PPUSH
4929: CALL_OW 380
// un = CreateHuman ;
4933: LD_ADDR_VAR 0 3
4937: PUSH
4938: CALL_OW 44
4942: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4943: LD_VAR 0 3
4947: PPUSH
4948: LD_VAR 0 4
4952: PPUSH
4953: CALL_OW 52
// vc_chassis = 14 ;
4957: LD_ADDR_OWVAR 37
4961: PUSH
4962: LD_INT 14
4964: ST_TO_ADDR
// vc_engine = 3 ;
4965: LD_ADDR_OWVAR 39
4969: PUSH
4970: LD_INT 3
4972: ST_TO_ADDR
// vc_control = 1 ;
4973: LD_ADDR_OWVAR 38
4977: PUSH
4978: LD_INT 1
4980: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4981: LD_ADDR_OWVAR 40
4985: PUSH
4986: LD_INT 27
4988: PUSH
4989: LD_INT 26
4991: PUSH
4992: LD_INT 28
4994: PUSH
4995: EMPTY
4996: LIST
4997: LIST
4998: LIST
4999: PUSH
5000: LD_INT 1
5002: PPUSH
5003: LD_INT 3
5005: PPUSH
5006: CALL_OW 12
5010: ARRAY
5011: ST_TO_ADDR
// veh = CreateVehicle ;
5012: LD_ADDR_VAR 0 4
5016: PUSH
5017: CALL_OW 45
5021: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5022: LD_VAR 0 4
5026: PPUSH
5027: LD_INT 4
5029: PPUSH
5030: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5034: LD_VAR 0 4
5038: PPUSH
5039: LD_INT 4
5041: PPUSH
5042: LD_INT 0
5044: PPUSH
5045: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5049: LD_EXP 26
5053: PUSH
5054: LD_INT 0
5056: EQUAL
5057: PUSH
5058: LD_EXP 26
5062: PUSH
5063: LD_INT 2
5065: EQUAL
5066: OR
5067: IFFALSE 5084
// PrepareHuman ( false , 4 , 6 ) else
5069: LD_INT 0
5071: PPUSH
5072: LD_INT 4
5074: PPUSH
5075: LD_INT 6
5077: PPUSH
5078: CALL_OW 380
5082: GO 5097
// PrepareHuman ( false , 4 , 8 ) ;
5084: LD_INT 0
5086: PPUSH
5087: LD_INT 4
5089: PPUSH
5090: LD_INT 8
5092: PPUSH
5093: CALL_OW 380
// un = CreateHuman ;
5097: LD_ADDR_VAR 0 3
5101: PUSH
5102: CALL_OW 44
5106: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5107: LD_VAR 0 3
5111: PPUSH
5112: LD_INT 4
5114: PPUSH
5115: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5119: LD_VAR 0 3
5123: PPUSH
5124: LD_VAR 0 4
5128: PPUSH
5129: CALL_OW 52
// vc_chassis = 14 ;
5133: LD_ADDR_OWVAR 37
5137: PUSH
5138: LD_INT 14
5140: ST_TO_ADDR
// vc_engine = 3 ;
5141: LD_ADDR_OWVAR 39
5145: PUSH
5146: LD_INT 3
5148: ST_TO_ADDR
// vc_control = 1 ;
5149: LD_ADDR_OWVAR 38
5153: PUSH
5154: LD_INT 1
5156: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5157: LD_ADDR_OWVAR 40
5161: PUSH
5162: LD_INT 27
5164: PUSH
5165: LD_INT 26
5167: PUSH
5168: LD_INT 28
5170: PUSH
5171: EMPTY
5172: LIST
5173: LIST
5174: LIST
5175: PUSH
5176: LD_INT 1
5178: PPUSH
5179: LD_INT 3
5181: PPUSH
5182: CALL_OW 12
5186: ARRAY
5187: ST_TO_ADDR
// veh = CreateVehicle ;
5188: LD_ADDR_VAR 0 4
5192: PUSH
5193: CALL_OW 45
5197: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5198: LD_VAR 0 4
5202: PPUSH
5203: LD_INT 4
5205: PPUSH
5206: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5210: LD_VAR 0 4
5214: PPUSH
5215: LD_INT 4
5217: PPUSH
5218: LD_INT 0
5220: PPUSH
5221: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5225: LD_EXP 26
5229: PUSH
5230: LD_INT 0
5232: EQUAL
5233: PUSH
5234: LD_EXP 26
5238: PUSH
5239: LD_INT 2
5241: EQUAL
5242: OR
5243: IFFALSE 5260
// PrepareHuman ( false , 2 , 4 ) else
5245: LD_INT 0
5247: PPUSH
5248: LD_INT 2
5250: PPUSH
5251: LD_INT 4
5253: PPUSH
5254: CALL_OW 380
5258: GO 5273
// PrepareHuman ( false , 2 , 8 ) ;
5260: LD_INT 0
5262: PPUSH
5263: LD_INT 2
5265: PPUSH
5266: LD_INT 8
5268: PPUSH
5269: CALL_OW 380
// un = CreateHuman ;
5273: LD_ADDR_VAR 0 3
5277: PUSH
5278: CALL_OW 44
5282: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5283: LD_VAR 0 3
5287: PPUSH
5288: LD_INT 4
5290: PPUSH
5291: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5295: LD_VAR 0 3
5299: PPUSH
5300: LD_VAR 0 4
5304: PPUSH
5305: CALL_OW 52
// end ;
5309: LD_VAR 0 1
5313: RET
// export function PrepareAttackLegion ; var i , un ; begin
5314: LD_INT 0
5316: PPUSH
5317: PPUSH
5318: PPUSH
// for i = 1 to 4 do
5319: LD_ADDR_VAR 0 2
5323: PUSH
5324: DOUBLE
5325: LD_INT 1
5327: DEC
5328: ST_TO_ADDR
5329: LD_INT 4
5331: PUSH
5332: FOR_TO
5333: IFFALSE 5443
// begin uc_side = 8 ;
5335: LD_ADDR_OWVAR 20
5339: PUSH
5340: LD_INT 8
5342: ST_TO_ADDR
// uc_nation = 2 ;
5343: LD_ADDR_OWVAR 21
5347: PUSH
5348: LD_INT 2
5350: ST_TO_ADDR
// hc_gallery =  ;
5351: LD_ADDR_OWVAR 33
5355: PUSH
5356: LD_STRING 
5358: ST_TO_ADDR
// hc_name =  ;
5359: LD_ADDR_OWVAR 26
5363: PUSH
5364: LD_STRING 
5366: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5367: LD_INT 0
5369: PPUSH
5370: LD_INT 1
5372: PUSH
5373: LD_INT 8
5375: PUSH
5376: EMPTY
5377: LIST
5378: LIST
5379: PUSH
5380: LD_INT 1
5382: PPUSH
5383: LD_INT 2
5385: PPUSH
5386: CALL_OW 12
5390: ARRAY
5391: PPUSH
5392: LD_INT 6
5394: PPUSH
5395: LD_INT 8
5397: PPUSH
5398: CALL_OW 12
5402: PPUSH
5403: CALL_OW 380
// un = CreateHuman ;
5407: LD_ADDR_VAR 0 3
5411: PUSH
5412: CALL_OW 44
5416: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5417: LD_VAR 0 3
5421: PPUSH
5422: LD_INT 19
5424: PPUSH
5425: LD_INT 0
5427: PPUSH
5428: CALL_OW 49
// ComCrawl ( un ) ;
5432: LD_VAR 0 3
5436: PPUSH
5437: CALL_OW 137
// end ;
5441: GO 5332
5443: POP
5444: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5445: LD_INT 1
5447: PPUSH
5448: LD_INT 8
5450: PPUSH
5451: LD_INT 2
5453: PPUSH
5454: LD_INT 1
5456: PPUSH
5457: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5461: LD_INT 20
5463: PPUSH
5464: LD_INT 3
5466: PPUSH
5467: CALL 15067 0 2
// end ; end_of_file
5471: LD_VAR 0 1
5475: RET
// export function Action ; var i ; begin
5476: LD_INT 0
5478: PPUSH
5479: PPUSH
// InGameOn ;
5480: CALL_OW 8
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5484: LD_EXP 1
5488: PPUSH
5489: CALL_OW 310
5493: PPUSH
5494: CALL_OW 87
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5498: LD_INT 22
5500: PUSH
5501: LD_INT 1
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: PPUSH
5508: CALL_OW 69
5512: PPUSH
5513: LD_INT 130
5515: PPUSH
5516: LD_INT 103
5518: PPUSH
5519: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5523: LD_VAR 0 2
5527: PPUSH
5528: LD_INT 114
5530: PPUSH
5531: LD_INT 102
5533: PPUSH
5534: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5538: LD_EXP 1
5542: PPUSH
5543: LD_STRING D1-JMM-1
5545: PPUSH
5546: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5550: LD_EXP 1
5554: PPUSH
5555: CALL_OW 310
5559: PPUSH
5560: CALL_OW 87
// if IsOk ( Donaldson ) then
5564: LD_EXP 3
5568: PPUSH
5569: CALL_OW 302
5573: IFFALSE 5653
// begin Say ( Donaldson , D1-Don-1 ) ;
5575: LD_EXP 3
5579: PPUSH
5580: LD_STRING D1-Don-1
5582: PPUSH
5583: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5587: LD_EXP 1
5591: PPUSH
5592: CALL_OW 310
5596: PPUSH
5597: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5601: LD_EXP 1
5605: PPUSH
5606: LD_STRING D1-JMM-2
5608: PPUSH
5609: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5613: LD_EXP 1
5617: PPUSH
5618: CALL_OW 310
5622: PPUSH
5623: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5627: LD_EXP 3
5631: PPUSH
5632: LD_STRING D1-Don-2
5634: PPUSH
5635: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5639: LD_EXP 1
5643: PPUSH
5644: CALL_OW 310
5648: PPUSH
5649: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5653: LD_INT 22
5655: PUSH
5656: LD_INT 1
5658: PUSH
5659: EMPTY
5660: LIST
5661: LIST
5662: PPUSH
5663: CALL_OW 69
5667: PPUSH
5668: LD_INT 110
5670: PPUSH
5671: LD_INT 101
5673: PPUSH
5674: CALL_OW 171
// wait ( 0 0$1 ) ;
5678: LD_INT 35
5680: PPUSH
5681: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5685: LD_EXP 1
5689: PPUSH
5690: CALL_OW 310
5694: PPUSH
5695: CALL_OW 87
// wait ( 0 0$1 ) ;
5699: LD_INT 35
5701: PPUSH
5702: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5706: LD_EXP 1
5710: PPUSH
5711: CALL_OW 310
5715: PPUSH
5716: CALL_OW 87
// wait ( 0 0$1 ) ;
5720: LD_INT 35
5722: PPUSH
5723: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5727: LD_EXP 1
5731: PPUSH
5732: CALL_OW 310
5736: PPUSH
5737: CALL_OW 87
// wait ( 0 0$1 ) ;
5741: LD_INT 35
5743: PPUSH
5744: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5748: LD_EXP 1
5752: PPUSH
5753: CALL_OW 310
5757: PPUSH
5758: CALL_OW 87
// end ;
5762: LD_VAR 0 1
5766: RET
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5767: LD_INT 1
5769: PPUSH
5770: LD_INT 102
5772: PPUSH
5773: LD_INT 94
5775: PPUSH
5776: CALL_OW 293
5780: IFFALSE 5971
5782: GO 5784
5784: DISABLE
5785: LD_INT 0
5787: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5788: LD_INT 102
5790: PPUSH
5791: LD_INT 94
5793: PPUSH
5794: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5798: LD_INT 22
5800: PUSH
5801: LD_INT 1
5803: PUSH
5804: EMPTY
5805: LIST
5806: LIST
5807: PUSH
5808: LD_INT 26
5810: PUSH
5811: LD_INT 1
5813: PUSH
5814: EMPTY
5815: LIST
5816: LIST
5817: PUSH
5818: LD_INT 2
5820: PUSH
5821: LD_INT 25
5823: PUSH
5824: LD_INT 1
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: PUSH
5831: LD_INT 25
5833: PUSH
5834: LD_INT 2
5836: PUSH
5837: EMPTY
5838: LIST
5839: LIST
5840: PUSH
5841: LD_INT 25
5843: PUSH
5844: LD_INT 3
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: PUSH
5851: LD_INT 25
5853: PUSH
5854: LD_INT 4
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PUSH
5861: LD_INT 25
5863: PUSH
5864: LD_INT 5
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: PUSH
5871: LD_INT 25
5873: PUSH
5874: LD_INT 8
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: EMPTY
5882: LIST
5883: LIST
5884: LIST
5885: LIST
5886: LIST
5887: LIST
5888: LIST
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: LIST
5894: PPUSH
5895: CALL_OW 69
5899: PPUSH
5900: LD_STRING D1-Sol1-2
5902: PPUSH
5903: LD_STRING 
5905: PPUSH
5906: CALL 12584 0 3
// Say ( JMM , D1-JMM-3 ) ;
5910: LD_EXP 1
5914: PPUSH
5915: LD_STRING D1-JMM-3
5917: PPUSH
5918: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5922: LD_STRING M1
5924: PPUSH
5925: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5929: LD_ADDR_VAR 0 1
5933: PUSH
5934: LD_INT 22
5936: PUSH
5937: LD_INT 1
5939: PUSH
5940: EMPTY
5941: LIST
5942: LIST
5943: PPUSH
5944: CALL_OW 69
5948: PUSH
5949: FOR_IN
5950: IFFALSE 5969
// ComMoveXY ( i , 95 , 84 ) ;
5952: LD_VAR 0 1
5956: PPUSH
5957: LD_INT 95
5959: PPUSH
5960: LD_INT 84
5962: PPUSH
5963: CALL_OW 111
5967: GO 5949
5969: POP
5970: POP
// end ;
5971: PPOPN 1
5973: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5974: GO 5976
5976: DISABLE
5977: LD_INT 0
5979: PPUSH
5980: PPUSH
5981: PPUSH
5982: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5983: LD_ADDR_VAR 0 2
5987: PUSH
5988: LD_INT 8
5990: PPUSH
5991: LD_INT 22
5993: PUSH
5994: LD_INT 3
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: PUSH
6001: LD_INT 25
6003: PUSH
6004: LD_INT 9
6006: PUSH
6007: EMPTY
6008: LIST
6009: LIST
6010: PUSH
6011: EMPTY
6012: LIST
6013: LIST
6014: PPUSH
6015: CALL_OW 70
6019: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
6020: LD_ADDR_VAR 0 3
6024: PUSH
6025: LD_INT 22
6027: PUSH
6028: LD_INT 1
6030: PUSH
6031: EMPTY
6032: LIST
6033: LIST
6034: PUSH
6035: EMPTY
6036: LIST
6037: PPUSH
6038: CALL_OW 69
6042: ST_TO_ADDR
// enable ;
6043: ENABLE
// for i in your_units do
6044: LD_ADDR_VAR 0 1
6048: PUSH
6049: LD_VAR 0 3
6053: PUSH
6054: FOR_IN
6055: IFFALSE 6721
// begin if See ( 3 , i ) then
6057: LD_INT 3
6059: PPUSH
6060: LD_VAR 0 1
6064: PPUSH
6065: CALL_OW 292
6069: IFFALSE 6719
// begin disable ;
6071: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6072: LD_VAR 0 2
6076: PPUSH
6077: LD_INT 96
6079: PPUSH
6080: LD_INT 85
6082: PPUSH
6083: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6087: LD_VAR 0 2
6091: PPUSH
6092: LD_INT 96
6094: PPUSH
6095: LD_INT 85
6097: PPUSH
6098: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6102: LD_VAR 0 2
6106: PPUSH
6107: LD_INT 96
6109: PPUSH
6110: LD_INT 85
6112: PPUSH
6113: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6117: LD_VAR 0 2
6121: PPUSH
6122: LD_INT 96
6124: PPUSH
6125: LD_INT 85
6127: PPUSH
6128: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6132: LD_VAR 0 2
6136: PPUSH
6137: LD_INT 96
6139: PPUSH
6140: LD_INT 85
6142: PPUSH
6143: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6147: LD_VAR 0 2
6151: PPUSH
6152: LD_INT 96
6154: PPUSH
6155: LD_INT 85
6157: PPUSH
6158: CALL_OW 214
// wait ( 0 0$2 ) ;
6162: LD_INT 70
6164: PPUSH
6165: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6169: LD_EXP 1
6173: PPUSH
6174: LD_STRING D1a-JMM-1
6176: PPUSH
6177: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6181: LD_EXP 3
6185: PPUSH
6186: LD_STRING D1a-Don-1
6188: PPUSH
6189: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6193: LD_ADDR_VAR 0 1
6197: PUSH
6198: LD_INT 22
6200: PUSH
6201: LD_INT 1
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PPUSH
6208: CALL_OW 69
6212: PUSH
6213: FOR_IN
6214: IFFALSE 6233
// ComMoveXY ( i , 109 , 102 ) ;
6216: LD_VAR 0 1
6220: PPUSH
6221: LD_INT 109
6223: PPUSH
6224: LD_INT 102
6226: PPUSH
6227: CALL_OW 111
6231: GO 6213
6233: POP
6234: POP
// Say ( JMM , D1a-JMM-2 ) ;
6235: LD_EXP 1
6239: PPUSH
6240: LD_STRING D1a-JMM-2
6242: PPUSH
6243: CALL_OW 88
// wait ( 0 0$10 ) ;
6247: LD_INT 350
6249: PPUSH
6250: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6254: LD_EXP 1
6258: PPUSH
6259: CALL_OW 310
6263: PPUSH
6264: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6268: LD_EXP 3
6272: PPUSH
6273: LD_STRING D1b-Don-1
6275: PPUSH
6276: CALL_OW 88
// if IsOk ( Donaldson ) then
6280: LD_EXP 3
6284: PPUSH
6285: CALL_OW 302
6289: IFFALSE 6303
// Say ( JMM , D1b-JMM-1 ) ;
6291: LD_EXP 1
6295: PPUSH
6296: LD_STRING D1b-JMM-1
6298: PPUSH
6299: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6303: LD_INT 22
6305: PUSH
6306: LD_INT 1
6308: PUSH
6309: EMPTY
6310: LIST
6311: LIST
6312: PUSH
6313: LD_INT 26
6315: PUSH
6316: LD_INT 1
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: PUSH
6323: LD_INT 2
6325: PUSH
6326: LD_INT 25
6328: PUSH
6329: LD_INT 1
6331: PUSH
6332: EMPTY
6333: LIST
6334: LIST
6335: PUSH
6336: LD_INT 25
6338: PUSH
6339: LD_INT 2
6341: PUSH
6342: EMPTY
6343: LIST
6344: LIST
6345: PUSH
6346: LD_INT 25
6348: PUSH
6349: LD_INT 3
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PUSH
6356: LD_INT 25
6358: PUSH
6359: LD_INT 4
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: LD_INT 25
6368: PUSH
6369: LD_INT 5
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PUSH
6376: LD_INT 25
6378: PUSH
6379: LD_INT 8
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: LIST
6399: PPUSH
6400: CALL_OW 69
6404: PPUSH
6405: LD_STRING D1b-Sol1-1
6407: PPUSH
6408: LD_STRING 
6410: PPUSH
6411: CALL 12584 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6415: LD_EXP 3
6419: PPUSH
6420: LD_STRING D1b-Don-2
6422: PPUSH
6423: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6427: LD_EXP 1
6431: PPUSH
6432: LD_STRING D1b-JMM-2
6434: PPUSH
6435: CALL_OW 88
// dec = ShowQuery1 ;
6439: LD_ADDR_VAR 0 4
6443: PUSH
6444: CALL 13047 0 0
6448: ST_TO_ADDR
// if dec = 1 then
6449: LD_VAR 0 4
6453: PUSH
6454: LD_INT 1
6456: EQUAL
6457: IFFALSE 6563
// begin Say ( JMM , D2-JMM-1 ) ;
6459: LD_EXP 1
6463: PPUSH
6464: LD_STRING D2-JMM-1
6466: PPUSH
6467: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6471: LD_EXP 22
6475: PPUSH
6476: LD_STRING D2-Pow-1
6478: PPUSH
6479: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6483: LD_EXP 1
6487: PPUSH
6488: LD_STRING D2a-JMM-1
6490: PPUSH
6491: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6495: LD_EXP 22
6499: PPUSH
6500: LD_STRING D2a-Pow-1
6502: PPUSH
6503: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6507: LD_EXP 1
6511: PPUSH
6512: LD_STRING D2a-JMM-2
6514: PPUSH
6515: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6519: LD_EXP 22
6523: PPUSH
6524: LD_STRING D2a-Pow-2
6526: PPUSH
6527: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6531: LD_EXP 1
6535: PPUSH
6536: LD_STRING D2a-JMM-3
6538: PPUSH
6539: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6543: LD_EXP 22
6547: PPUSH
6548: LD_STRING D2a-Pow-3
6550: PPUSH
6551: CALL_OW 94
// secondPass = 2 ;
6555: LD_ADDR_EXP 27
6559: PUSH
6560: LD_INT 2
6562: ST_TO_ADDR
// end ; if dec = 2 then
6563: LD_VAR 0 4
6567: PUSH
6568: LD_INT 2
6570: EQUAL
6571: IFFALSE 6665
// begin Say ( JMM , D2-JMM-1 ) ;
6573: LD_EXP 1
6577: PPUSH
6578: LD_STRING D2-JMM-1
6580: PPUSH
6581: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6585: LD_EXP 22
6589: PPUSH
6590: LD_STRING D2-Pow-1
6592: PPUSH
6593: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6597: LD_EXP 1
6601: PPUSH
6602: LD_STRING D2b-JMM-1
6604: PPUSH
6605: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6609: LD_EXP 22
6613: PPUSH
6614: LD_STRING D2b-Pow-1
6616: PPUSH
6617: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6621: LD_EXP 1
6625: PPUSH
6626: LD_STRING D2c-JMM-1
6628: PPUSH
6629: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6633: LD_EXP 22
6637: PPUSH
6638: LD_STRING D2c-Pow-1
6640: PPUSH
6641: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6645: LD_EXP 1
6649: PPUSH
6650: LD_STRING D2c-JMM-2
6652: PPUSH
6653: CALL_OW 88
// secondPass = 2 ;
6657: LD_ADDR_EXP 27
6661: PUSH
6662: LD_INT 2
6664: ST_TO_ADDR
// end ; if dec = 3 then
6665: LD_VAR 0 4
6669: PUSH
6670: LD_INT 3
6672: EQUAL
6673: IFFALSE 6683
// secondPass = 1 ;
6675: LD_ADDR_EXP 27
6679: PUSH
6680: LD_INT 1
6682: ST_TO_ADDR
// InGameOff ;
6683: CALL_OW 9
// ruAI = 1 ;
6687: LD_ADDR_EXP 41
6691: PUSH
6692: LD_INT 1
6694: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6695: LD_INT 1
6697: PPUSH
6698: LD_INT 3
6700: PPUSH
6701: LD_INT 2
6703: PPUSH
6704: LD_INT 1
6706: PPUSH
6707: CALL_OW 80
// SaveForQuickRestart ;
6711: CALL_OW 22
// exit ;
6715: POP
6716: POP
6717: GO 6723
// end ; end ;
6719: GO 6054
6721: POP
6722: POP
// end ;
6723: PPOPN 4
6725: END
// every 1 1$0 trigger secondPass = 2 do
6726: LD_EXP 27
6730: PUSH
6731: LD_INT 2
6733: EQUAL
6734: IFFALSE 6954
6736: GO 6738
6738: DISABLE
// begin PowellSupport1 ;
6739: CALL 1974 0 0
// DialogueOn ;
6743: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6747: LD_EXP 1
6751: PPUSH
6752: LD_STRING DC1-JMM-1
6754: PPUSH
6755: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6759: LD_EXP 22
6763: PPUSH
6764: LD_STRING DC1-Pow-1
6766: PPUSH
6767: CALL_OW 94
// DialogueOff ;
6771: CALL_OW 7
// wait ( 3 3$0 ) ;
6775: LD_INT 6300
6777: PPUSH
6778: CALL_OW 67
// PowellSupport2 ;
6782: CALL 2439 0 0
// DialogueOn ;
6786: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6790: LD_EXP 1
6794: PPUSH
6795: LD_STRING DC2-JMM-1
6797: PPUSH
6798: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6802: LD_EXP 22
6806: PPUSH
6807: LD_STRING DC2-Pow-1
6809: PPUSH
6810: CALL_OW 94
// DialogueOff ;
6814: CALL_OW 7
// wait ( 3 3$00 ) ;
6818: LD_INT 6300
6820: PPUSH
6821: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6825: LD_INT 35
6827: PPUSH
6828: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6832: LD_INT 22
6834: PUSH
6835: LD_INT 1
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 2
6844: PUSH
6845: LD_INT 30
6847: PUSH
6848: LD_INT 0
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: PUSH
6855: LD_INT 30
6857: PUSH
6858: LD_INT 1
6860: PUSH
6861: EMPTY
6862: LIST
6863: LIST
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: LIST
6869: PUSH
6870: EMPTY
6871: LIST
6872: LIST
6873: PPUSH
6874: CALL_OW 69
6878: PUSH
6879: LD_INT 11
6881: PPUSH
6882: LD_INT 22
6884: PUSH
6885: LD_INT 3
6887: PUSH
6888: EMPTY
6889: LIST
6890: LIST
6891: PPUSH
6892: CALL_OW 70
6896: NOT
6897: AND
6898: IFFALSE 6825
// wait ( 0 0$10 ) ;
6900: LD_INT 350
6902: PPUSH
6903: CALL_OW 67
// Legion ;
6907: CALL 6955 0 0
// wait ( 6 6$0 ) ;
6911: LD_INT 12600
6913: PPUSH
6914: CALL_OW 67
// PowellSupport3 ;
6918: CALL 2979 0 0
// DialogueOn ;
6922: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6926: LD_EXP 22
6930: PPUSH
6931: LD_STRING DC3-Pow-1
6933: PPUSH
6934: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6938: LD_EXP 1
6942: PPUSH
6943: LD_STRING DC3-JMM-1
6945: PPUSH
6946: CALL_OW 88
// DialogueOff ;
6950: CALL_OW 7
// end ;
6954: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6955: LD_INT 0
6957: PPUSH
6958: PPUSH
6959: PPUSH
6960: PPUSH
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
6968: PPUSH
6969: PPUSH
6970: PPUSH
6971: PPUSH
6972: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6973: LD_ADDR_VAR 0 5
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_INT 1
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 21
6990: PUSH
6991: LD_INT 3
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 2
7000: PUSH
7001: LD_INT 30
7003: PUSH
7004: LD_INT 0
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 30
7013: PUSH
7014: LD_INT 1
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: PUSH
7026: EMPTY
7027: LIST
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: ST_TO_ADDR
// crates := 0 ;
7036: LD_ADDR_VAR 0 8
7040: PUSH
7041: LD_INT 0
7043: ST_TO_ADDR
// oil := 0 ;
7044: LD_ADDR_VAR 0 9
7048: PUSH
7049: LD_INT 0
7051: ST_TO_ADDR
// siberite := 0 ;
7052: LD_ADDR_VAR 0 10
7056: PUSH
7057: LD_INT 0
7059: ST_TO_ADDR
// payForNeutral := false ;
7060: LD_ADDR_VAR 0 13
7064: PUSH
7065: LD_INT 0
7067: ST_TO_ADDR
// payForHelp := false ;
7068: LD_ADDR_VAR 0 14
7072: PUSH
7073: LD_INT 0
7075: ST_TO_ADDR
// for i in tmp do
7076: LD_ADDR_VAR 0 2
7080: PUSH
7081: LD_VAR 0 5
7085: PUSH
7086: FOR_IN
7087: IFFALSE 7178
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7089: LD_ADDR_VAR 0 8
7093: PUSH
7094: LD_VAR 0 8
7098: PUSH
7099: LD_VAR 0 2
7103: PPUSH
7104: CALL_OW 274
7108: PPUSH
7109: LD_INT 1
7111: PPUSH
7112: CALL_OW 275
7116: PLUS
7117: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7118: LD_ADDR_VAR 0 9
7122: PUSH
7123: LD_VAR 0 9
7127: PUSH
7128: LD_VAR 0 2
7132: PPUSH
7133: CALL_OW 274
7137: PPUSH
7138: LD_INT 2
7140: PPUSH
7141: CALL_OW 275
7145: PLUS
7146: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7147: LD_ADDR_VAR 0 10
7151: PUSH
7152: LD_VAR 0 10
7156: PUSH
7157: LD_VAR 0 2
7161: PPUSH
7162: CALL_OW 274
7166: PPUSH
7167: LD_INT 3
7169: PPUSH
7170: CALL_OW 275
7174: PLUS
7175: ST_TO_ADDR
// end ;
7176: GO 7086
7178: POP
7179: POP
// PrepareKurt ;
7180: CALL 4447 0 0
// if not Kurt then
7184: LD_EXP 24
7188: NOT
7189: IFFALSE 7193
// exit ;
7191: GO 9325
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7193: LD_EXP 25
7197: PPUSH
7198: LD_INT 144
7200: PPUSH
7201: LD_INT 111
7203: PPUSH
7204: CALL_OW 111
// wait ( 0 0$2 ) ;
7208: LD_INT 70
7210: PPUSH
7211: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7215: LD_INT 167
7217: PPUSH
7218: LD_INT 121
7220: PPUSH
7221: LD_INT 1
7223: PPUSH
7224: LD_INT 10
7226: NEG
7227: PPUSH
7228: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7232: LD_EXP 24
7236: PPUSH
7237: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7241: LD_EXP 24
7245: PPUSH
7246: CALL_OW 87
// wait ( 0 0$1 ) ;
7250: LD_INT 35
7252: PPUSH
7253: CALL_OW 67
// DialogueOn ;
7257: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7261: LD_INT 22
7263: PUSH
7264: LD_INT 1
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: PUSH
7271: LD_INT 26
7273: PUSH
7274: LD_INT 1
7276: PUSH
7277: EMPTY
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 2
7283: PUSH
7284: LD_INT 25
7286: PUSH
7287: LD_INT 1
7289: PUSH
7290: EMPTY
7291: LIST
7292: LIST
7293: PUSH
7294: LD_INT 25
7296: PUSH
7297: LD_INT 2
7299: PUSH
7300: EMPTY
7301: LIST
7302: LIST
7303: PUSH
7304: LD_INT 25
7306: PUSH
7307: LD_INT 3
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 25
7316: PUSH
7317: LD_INT 4
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 25
7326: PUSH
7327: LD_INT 5
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 25
7336: PUSH
7337: LD_INT 8
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: LIST
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: LIST
7357: PPUSH
7358: CALL_OW 69
7362: PPUSH
7363: LD_STRING D3-Sol1-1
7365: PPUSH
7366: LD_STRING 
7368: PPUSH
7369: CALL 12584 0 3
// if KurtStatus then
7373: LD_EXP 26
7377: IFFALSE 7477
// begin Say ( Kurt , D3-Kurt-1 ) ;
7379: LD_EXP 24
7383: PPUSH
7384: LD_STRING D3-Kurt-1
7386: PPUSH
7387: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7391: LD_EXP 1
7395: PPUSH
7396: LD_STRING D3-JMM-1
7398: PPUSH
7399: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7403: LD_EXP 24
7407: PPUSH
7408: LD_STRING D3-Kurt-2
7410: PPUSH
7411: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7415: LD_EXP 1
7419: PPUSH
7420: LD_STRING D3-JMM-2
7422: PPUSH
7423: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7427: LD_EXP 24
7431: PPUSH
7432: LD_STRING D3-Kurt-4
7434: PPUSH
7435: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7439: LD_EXP 1
7443: PPUSH
7444: LD_STRING D3-JMM-4
7446: PPUSH
7447: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7451: LD_EXP 24
7455: PPUSH
7456: LD_STRING D3-Kurt-5
7458: PPUSH
7459: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7463: LD_EXP 24
7467: PPUSH
7468: LD_STRING D3-Kurt-5a
7470: PPUSH
7471: CALL_OW 88
// end else
7475: GO 7573
// begin Say ( Kurt , D3-Kurt-1 ) ;
7477: LD_EXP 24
7481: PPUSH
7482: LD_STRING D3-Kurt-1
7484: PPUSH
7485: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7489: LD_EXP 1
7493: PPUSH
7494: LD_STRING D3-JMM-1
7496: PPUSH
7497: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7501: LD_EXP 24
7505: PPUSH
7506: LD_STRING D3-Kurt-3
7508: PPUSH
7509: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7513: LD_EXP 1
7517: PPUSH
7518: LD_STRING D3-JMM-3
7520: PPUSH
7521: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7525: LD_EXP 24
7529: PPUSH
7530: LD_STRING D3-Kurt-4
7532: PPUSH
7533: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7537: LD_EXP 1
7541: PPUSH
7542: LD_STRING D3-JMM-4
7544: PPUSH
7545: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7549: LD_EXP 24
7553: PPUSH
7554: LD_STRING D3-Kurt-5
7556: PPUSH
7557: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7561: LD_EXP 24
7565: PPUSH
7566: LD_STRING D3-Kurt-5b
7568: PPUSH
7569: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7573: LD_VAR 0 8
7577: PUSH
7578: LD_INT 120
7580: PUSH
7581: LD_INT 60
7583: PUSH
7584: EMPTY
7585: LIST
7586: LIST
7587: PUSH
7588: LD_EXP 26
7592: PUSH
7593: LD_INT 1
7595: PLUS
7596: ARRAY
7597: GREATEREQUAL
7598: PUSH
7599: LD_VAR 0 10
7603: PUSH
7604: LD_INT 120
7606: PUSH
7607: LD_INT 60
7609: PUSH
7610: EMPTY
7611: LIST
7612: LIST
7613: PUSH
7614: LD_EXP 26
7618: PUSH
7619: LD_INT 1
7621: PLUS
7622: ARRAY
7623: GREATEREQUAL
7624: AND
7625: IFFALSE 7677
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7627: LD_ADDR_VAR 0 3
7631: PUSH
7632: LD_STRING Q2
7634: PUSH
7635: LD_STRING Q2K
7637: PUSH
7638: EMPTY
7639: LIST
7640: LIST
7641: PUSH
7642: LD_EXP 26
7646: PUSH
7647: LD_INT 1
7649: PLUS
7650: ARRAY
7651: PPUSH
7652: LD_INT 1
7654: PUSH
7655: LD_INT 2
7657: PUSH
7658: LD_INT 3
7660: PUSH
7661: LD_INT 4
7663: PUSH
7664: EMPTY
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: PPUSH
7670: CALL_OW 98
7674: ST_TO_ADDR
7675: GO 7721
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7677: LD_ADDR_VAR 0 3
7681: PUSH
7682: LD_STRING Q2
7684: PUSH
7685: LD_STRING Q2K
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_EXP 26
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: ARRAY
7701: PPUSH
7702: LD_INT 1
7704: PUSH
7705: LD_INT 3
7707: PUSH
7708: LD_INT 4
7710: PUSH
7711: EMPTY
7712: LIST
7713: LIST
7714: LIST
7715: PPUSH
7716: CALL_OW 98
7720: ST_TO_ADDR
// if dec1 = 1 then
7721: LD_VAR 0 3
7725: PUSH
7726: LD_INT 1
7728: EQUAL
7729: IFFALSE 7763
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7731: LD_EXP 1
7735: PPUSH
7736: LD_STRING D3Ka-JMM-1
7738: PPUSH
7739: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7743: LD_EXP 24
7747: PPUSH
7748: LD_STRING D3Ka-Kurt-1
7750: PPUSH
7751: CALL_OW 88
// warWithLegion = 1 ;
7755: LD_ADDR_EXP 30
7759: PUSH
7760: LD_INT 1
7762: ST_TO_ADDR
// end ; if dec1 = 2 then
7763: LD_VAR 0 3
7767: PUSH
7768: LD_INT 2
7770: EQUAL
7771: IFFALSE 7855
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7773: LD_EXP 1
7777: PPUSH
7778: LD_STRING D3Kb-JMM-1
7780: PPUSH
7781: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7785: LD_EXP 24
7789: PPUSH
7790: LD_STRING D3Kb-Kurt-1
7792: PPUSH
7793: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7797: LD_ADDR_VAR 0 11
7801: PUSH
7802: LD_INT 120
7804: PUSH
7805: LD_INT 60
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_EXP 26
7816: PUSH
7817: LD_INT 1
7819: PLUS
7820: ARRAY
7821: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7822: LD_ADDR_VAR 0 12
7826: PUSH
7827: LD_INT 120
7829: PUSH
7830: LD_INT 60
7832: PUSH
7833: EMPTY
7834: LIST
7835: LIST
7836: PUSH
7837: LD_EXP 26
7841: PUSH
7842: LD_INT 1
7844: PLUS
7845: ARRAY
7846: ST_TO_ADDR
// payForNeutral := true ;
7847: LD_ADDR_VAR 0 13
7851: PUSH
7852: LD_INT 1
7854: ST_TO_ADDR
// end ; if dec1 = 3 then
7855: LD_VAR 0 3
7859: PUSH
7860: LD_INT 3
7862: EQUAL
7863: IFFALSE 8098
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7865: LD_EXP 1
7869: PPUSH
7870: LD_STRING D3Kc1-JMM-1
7872: PPUSH
7873: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7877: LD_EXP 24
7881: PPUSH
7882: LD_STRING D3Kc1-Kurt-1
7884: PPUSH
7885: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7889: LD_EXP 1
7893: PPUSH
7894: LD_STRING D3Kc1-JMM-2
7896: PPUSH
7897: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7901: LD_EXP 24
7905: PPUSH
7906: LD_STRING D3Kc1-Kurt-2
7908: PPUSH
7909: CALL_OW 88
// askSiberite = 1 ;
7913: LD_ADDR_EXP 32
7917: PUSH
7918: LD_INT 1
7920: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7921: LD_ADDR_VAR 0 4
7925: PUSH
7926: LD_STRING Q2b
7928: PPUSH
7929: LD_INT 1
7931: PUSH
7932: LD_INT 2
7934: PUSH
7935: LD_INT 3
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: PPUSH
7943: CALL_OW 98
7947: ST_TO_ADDR
// if dec2 = 1 then
7948: LD_VAR 0 4
7952: PUSH
7953: LD_INT 1
7955: EQUAL
7956: IFFALSE 7990
// begin Say ( JMM , D4a-JMM-1 ) ;
7958: LD_EXP 1
7962: PPUSH
7963: LD_STRING D4a-JMM-1
7965: PPUSH
7966: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7970: LD_EXP 24
7974: PPUSH
7975: LD_STRING D4b-Kurt-1
7977: PPUSH
7978: CALL_OW 88
// warWithLegion = 1 ;
7982: LD_ADDR_EXP 30
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// end ; if dec2 = 2 then
7990: LD_VAR 0 4
7994: PUSH
7995: LD_INT 2
7997: EQUAL
7998: IFFALSE 8032
// begin Say ( JMM , D4b-JMM-1 ) ;
8000: LD_EXP 1
8004: PPUSH
8005: LD_STRING D4b-JMM-1
8007: PPUSH
8008: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8012: LD_EXP 24
8016: PPUSH
8017: LD_STRING D4b-Kurt-1
8019: PPUSH
8020: CALL_OW 88
// warWithLegion = 1 ;
8024: LD_ADDR_EXP 30
8028: PUSH
8029: LD_INT 1
8031: ST_TO_ADDR
// end ; if dec2 = 3 then
8032: LD_VAR 0 4
8036: PUSH
8037: LD_INT 3
8039: EQUAL
8040: IFFALSE 8098
// begin Say ( JMM , D4c-JMM-1 ) ;
8042: LD_EXP 1
8046: PPUSH
8047: LD_STRING D4c-JMM-1
8049: PPUSH
8050: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8054: LD_EXP 24
8058: PPUSH
8059: LD_STRING D4c-Kurt-1
8061: PPUSH
8062: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8066: LD_EXP 1
8070: PPUSH
8071: LD_STRING D4c-JMM-2
8073: PPUSH
8074: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8078: LD_EXP 24
8082: PPUSH
8083: LD_STRING D4c-Kurt-2
8085: PPUSH
8086: CALL_OW 88
// fakeInfo = 1 ;
8090: LD_ADDR_EXP 31
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8098: LD_VAR 0 3
8102: PUSH
8103: LD_INT 4
8105: EQUAL
8106: IFFALSE 9181
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8108: LD_EXP 1
8112: PPUSH
8113: LD_STRING D3Kd-JMM-1
8115: PPUSH
8116: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8120: LD_VAR 0 8
8124: PUSH
8125: LD_INT 200
8127: PUSH
8128: LD_INT 120
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PUSH
8135: LD_EXP 26
8139: PUSH
8140: LD_INT 1
8142: PLUS
8143: ARRAY
8144: GREATEREQUAL
8145: PUSH
8146: LD_VAR 0 10
8150: PUSH
8151: LD_INT 200
8153: PUSH
8154: LD_INT 120
8156: PUSH
8157: EMPTY
8158: LIST
8159: LIST
8160: PUSH
8161: LD_EXP 26
8165: PUSH
8166: LD_INT 1
8168: PLUS
8169: ARRAY
8170: GREATEREQUAL
8171: AND
8172: IFFALSE 8224
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8174: LD_ADDR_VAR 0 4
8178: PUSH
8179: LD_STRING Q2a
8181: PUSH
8182: LD_STRING Q2aK
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_EXP 26
8193: PUSH
8194: LD_INT 1
8196: PLUS
8197: ARRAY
8198: PPUSH
8199: LD_INT 1
8201: PUSH
8202: LD_INT 2
8204: PUSH
8205: LD_INT 3
8207: PUSH
8208: LD_INT 4
8210: PUSH
8211: EMPTY
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: PPUSH
8217: CALL_OW 98
8221: ST_TO_ADDR
8222: GO 8401
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8224: LD_VAR 0 8
8228: PUSH
8229: LD_INT 120
8231: PUSH
8232: LD_INT 60
8234: PUSH
8235: EMPTY
8236: LIST
8237: LIST
8238: PUSH
8239: LD_EXP 26
8243: PUSH
8244: LD_INT 1
8246: PLUS
8247: ARRAY
8248: GREATEREQUAL
8249: PUSH
8250: LD_VAR 0 10
8254: PUSH
8255: LD_INT 120
8257: PUSH
8258: LD_INT 60
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: PUSH
8265: LD_EXP 26
8269: PUSH
8270: LD_INT 1
8272: PLUS
8273: ARRAY
8274: GREATEREQUAL
8275: AND
8276: IFFALSE 8324
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8278: LD_ADDR_VAR 0 4
8282: PUSH
8283: LD_STRING Q2a
8285: PUSH
8286: LD_STRING Q2aK
8288: PUSH
8289: EMPTY
8290: LIST
8291: LIST
8292: PUSH
8293: LD_EXP 26
8297: PUSH
8298: LD_INT 1
8300: PLUS
8301: ARRAY
8302: PPUSH
8303: LD_INT 1
8305: PUSH
8306: LD_INT 2
8308: PUSH
8309: LD_INT 4
8311: PUSH
8312: EMPTY
8313: LIST
8314: LIST
8315: LIST
8316: PPUSH
8317: CALL_OW 98
8321: ST_TO_ADDR
8322: GO 8401
// begin case Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) of 1 :
8324: LD_STRING Q2d
8326: PUSH
8327: LD_STRING Q2dK
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_EXP 26
8338: PUSH
8339: LD_INT 1
8341: PLUS
8342: ARRAY
8343: PPUSH
8344: CALL_OW 97
8348: PUSH
8349: LD_INT 1
8351: DOUBLE
8352: EQUAL
8353: IFTRUE 8357
8355: GO 8360
8357: POP
// ; end ;
8358: GO 8361
8360: POP
// dec2 := 0 ;
8361: LD_ADDR_VAR 0 4
8365: PUSH
8366: LD_INT 0
8368: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8369: LD_EXP 1
8373: PPUSH
8374: LD_STRING D3Kc1-JMM-1
8376: PPUSH
8377: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8381: LD_EXP 24
8385: PPUSH
8386: LD_STRING D3Kc2-Kurt-1
8388: PPUSH
8389: CALL_OW 88
// warWithLegion := 1 ;
8393: LD_ADDR_EXP 30
8397: PUSH
8398: LD_INT 1
8400: ST_TO_ADDR
// end ; if dec2 = 1 then
8401: LD_VAR 0 4
8405: PUSH
8406: LD_INT 1
8408: EQUAL
8409: IFFALSE 8443
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8411: LD_EXP 1
8415: PPUSH
8416: LD_STRING D5Ka-JMM-1
8418: PPUSH
8419: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8423: LD_EXP 24
8427: PPUSH
8428: LD_STRING D5Ka-Kurt-1
8430: PPUSH
8431: CALL_OW 88
// warWithLegion = 1 ;
8435: LD_ADDR_EXP 30
8439: PUSH
8440: LD_INT 1
8442: ST_TO_ADDR
// end ; if dec2 = 2 then
8443: LD_VAR 0 4
8447: PUSH
8448: LD_INT 2
8450: EQUAL
8451: IFFALSE 8535
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8453: LD_EXP 1
8457: PPUSH
8458: LD_STRING D3Kb-JMM-1
8460: PPUSH
8461: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8465: LD_EXP 24
8469: PPUSH
8470: LD_STRING D3Kb-Kurt-1
8472: PPUSH
8473: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8477: LD_ADDR_VAR 0 11
8481: PUSH
8482: LD_INT 120
8484: PUSH
8485: LD_INT 60
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: PUSH
8492: LD_EXP 26
8496: PUSH
8497: LD_INT 1
8499: PLUS
8500: ARRAY
8501: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8502: LD_ADDR_VAR 0 12
8506: PUSH
8507: LD_INT 120
8509: PUSH
8510: LD_INT 60
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: LD_EXP 26
8521: PUSH
8522: LD_INT 1
8524: PLUS
8525: ARRAY
8526: ST_TO_ADDR
// payForNeutral := true ;
8527: LD_ADDR_VAR 0 13
8531: PUSH
8532: LD_INT 1
8534: ST_TO_ADDR
// end ; if dec2 = 3 then
8535: LD_VAR 0 4
8539: PUSH
8540: LD_INT 3
8542: EQUAL
8543: IFFALSE 8627
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8545: LD_EXP 1
8549: PPUSH
8550: LD_STRING D3Ke-JMM-1
8552: PPUSH
8553: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8557: LD_EXP 24
8561: PPUSH
8562: LD_STRING D3Ke-Kurt-1
8564: PPUSH
8565: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8569: LD_ADDR_VAR 0 11
8573: PUSH
8574: LD_INT 200
8576: PUSH
8577: LD_INT 120
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_EXP 26
8588: PUSH
8589: LD_INT 1
8591: PLUS
8592: ARRAY
8593: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8594: LD_ADDR_VAR 0 12
8598: PUSH
8599: LD_INT 200
8601: PUSH
8602: LD_INT 120
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: LD_EXP 26
8613: PUSH
8614: LD_INT 1
8616: PLUS
8617: ARRAY
8618: ST_TO_ADDR
// payForHelp := true ;
8619: LD_ADDR_VAR 0 14
8623: PUSH
8624: LD_INT 1
8626: ST_TO_ADDR
// end ; if dec2 = 4 then
8627: LD_VAR 0 4
8631: PUSH
8632: LD_INT 4
8634: EQUAL
8635: IFFALSE 8870
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8637: LD_EXP 1
8641: PPUSH
8642: LD_STRING D3Kc1-JMM-1
8644: PPUSH
8645: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8649: LD_EXP 24
8653: PPUSH
8654: LD_STRING D3Kc1-Kurt-1
8656: PPUSH
8657: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8661: LD_EXP 1
8665: PPUSH
8666: LD_STRING D3Kc1-JMM-2
8668: PPUSH
8669: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8673: LD_EXP 24
8677: PPUSH
8678: LD_STRING D3Kc1-Kurt-2
8680: PPUSH
8681: CALL_OW 88
// askSiberite = 1 ;
8685: LD_ADDR_EXP 32
8689: PUSH
8690: LD_INT 1
8692: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8693: LD_ADDR_VAR 0 4
8697: PUSH
8698: LD_STRING Q2b
8700: PPUSH
8701: LD_INT 1
8703: PUSH
8704: LD_INT 2
8706: PUSH
8707: LD_INT 3
8709: PUSH
8710: EMPTY
8711: LIST
8712: LIST
8713: LIST
8714: PPUSH
8715: CALL_OW 98
8719: ST_TO_ADDR
// if dec2 = 1 then
8720: LD_VAR 0 4
8724: PUSH
8725: LD_INT 1
8727: EQUAL
8728: IFFALSE 8762
// begin Say ( JMM , D4a-JMM-1 ) ;
8730: LD_EXP 1
8734: PPUSH
8735: LD_STRING D4a-JMM-1
8737: PPUSH
8738: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8742: LD_EXP 24
8746: PPUSH
8747: LD_STRING D4b-Kurt-1
8749: PPUSH
8750: CALL_OW 88
// warWithLegion = 1 ;
8754: LD_ADDR_EXP 30
8758: PUSH
8759: LD_INT 1
8761: ST_TO_ADDR
// end ; if dec2 = 2 then
8762: LD_VAR 0 4
8766: PUSH
8767: LD_INT 2
8769: EQUAL
8770: IFFALSE 8804
// begin Say ( JMM , D4b-JMM-1 ) ;
8772: LD_EXP 1
8776: PPUSH
8777: LD_STRING D4b-JMM-1
8779: PPUSH
8780: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8784: LD_EXP 24
8788: PPUSH
8789: LD_STRING D4b-Kurt-1
8791: PPUSH
8792: CALL_OW 88
// warWithLegion = 1 ;
8796: LD_ADDR_EXP 30
8800: PUSH
8801: LD_INT 1
8803: ST_TO_ADDR
// end ; if dec2 = 3 then
8804: LD_VAR 0 4
8808: PUSH
8809: LD_INT 3
8811: EQUAL
8812: IFFALSE 8870
// begin Say ( JMM , D4c-JMM-1 ) ;
8814: LD_EXP 1
8818: PPUSH
8819: LD_STRING D4c-JMM-1
8821: PPUSH
8822: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8826: LD_EXP 24
8830: PPUSH
8831: LD_STRING D4c-Kurt-1
8833: PPUSH
8834: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8838: LD_EXP 1
8842: PPUSH
8843: LD_STRING D4c-JMM-2
8845: PPUSH
8846: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8850: LD_EXP 24
8854: PPUSH
8855: LD_STRING D4c-Kurt-2
8857: PPUSH
8858: CALL_OW 88
// fakeInfo = 1 ;
8862: LD_ADDR_EXP 31
8866: PUSH
8867: LD_INT 1
8869: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8870: LD_VAR 0 13
8874: PUSH
8875: LD_VAR 0 14
8879: OR
8880: IFFALSE 9181
// begin for i in tmp do
8882: LD_ADDR_VAR 0 2
8886: PUSH
8887: LD_VAR 0 5
8891: PUSH
8892: FOR_IN
8893: IFFALSE 9179
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8895: LD_ADDR_VAR 0 6
8899: PUSH
8900: LD_VAR 0 2
8904: PPUSH
8905: CALL_OW 274
8909: PPUSH
8910: LD_INT 1
8912: PPUSH
8913: CALL_OW 275
8917: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8918: LD_ADDR_VAR 0 7
8922: PUSH
8923: LD_VAR 0 2
8927: PPUSH
8928: CALL_OW 274
8932: PPUSH
8933: LD_INT 3
8935: PPUSH
8936: CALL_OW 275
8940: ST_TO_ADDR
// if cr then
8941: LD_VAR 0 11
8945: IFFALSE 9059
// begin if tmp2 and tmp2 < cr then
8947: LD_VAR 0 6
8951: PUSH
8952: LD_VAR 0 6
8956: PUSH
8957: LD_VAR 0 11
8961: LESS
8962: AND
8963: IFFALSE 9011
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8965: LD_VAR 0 2
8969: PPUSH
8970: CALL_OW 274
8974: PPUSH
8975: LD_INT 1
8977: PPUSH
8978: LD_VAR 0 11
8982: PUSH
8983: LD_VAR 0 6
8987: MINUS
8988: PPUSH
8989: CALL_OW 277
// cr := cr - tmp2 ;
8993: LD_ADDR_VAR 0 11
8997: PUSH
8998: LD_VAR 0 11
9002: PUSH
9003: LD_VAR 0 6
9007: MINUS
9008: ST_TO_ADDR
// end else
9009: GO 9059
// if tmp2 > cr then
9011: LD_VAR 0 6
9015: PUSH
9016: LD_VAR 0 11
9020: GREATER
9021: IFFALSE 9059
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9023: LD_VAR 0 2
9027: PPUSH
9028: CALL_OW 274
9032: PPUSH
9033: LD_INT 1
9035: PPUSH
9036: LD_VAR 0 6
9040: PUSH
9041: LD_VAR 0 11
9045: MINUS
9046: PPUSH
9047: CALL_OW 277
// cr := 0 ;
9051: LD_ADDR_VAR 0 11
9055: PUSH
9056: LD_INT 0
9058: ST_TO_ADDR
// end ; end ; if sb then
9059: LD_VAR 0 12
9063: IFFALSE 9177
// begin if tmp3 and tmp3 < sb then
9065: LD_VAR 0 7
9069: PUSH
9070: LD_VAR 0 7
9074: PUSH
9075: LD_VAR 0 12
9079: LESS
9080: AND
9081: IFFALSE 9129
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9083: LD_VAR 0 2
9087: PPUSH
9088: CALL_OW 274
9092: PPUSH
9093: LD_INT 3
9095: PPUSH
9096: LD_VAR 0 12
9100: PUSH
9101: LD_VAR 0 7
9105: MINUS
9106: PPUSH
9107: CALL_OW 277
// sb := sb - tmp3 ;
9111: LD_ADDR_VAR 0 12
9115: PUSH
9116: LD_VAR 0 12
9120: PUSH
9121: LD_VAR 0 7
9125: MINUS
9126: ST_TO_ADDR
// end else
9127: GO 9177
// if tmp3 > sb then
9129: LD_VAR 0 7
9133: PUSH
9134: LD_VAR 0 12
9138: GREATER
9139: IFFALSE 9177
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9141: LD_VAR 0 2
9145: PPUSH
9146: CALL_OW 274
9150: PPUSH
9151: LD_INT 3
9153: PPUSH
9154: LD_VAR 0 7
9158: PUSH
9159: LD_VAR 0 12
9163: MINUS
9164: PPUSH
9165: CALL_OW 277
// sb := 0 ;
9169: LD_ADDR_VAR 0 12
9173: PUSH
9174: LD_INT 0
9176: ST_TO_ADDR
// end ; end ; end ;
9177: GO 8892
9179: POP
9180: POP
// end ; end ; DialogueOff ;
9181: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9185: LD_INT 167
9187: PPUSH
9188: LD_INT 121
9190: PPUSH
9191: LD_INT 1
9193: PPUSH
9194: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9198: LD_EXP 24
9202: PPUSH
9203: LD_EXP 25
9207: PPUSH
9208: CALL_OW 120
// wait ( 0 0$1 ) ;
9212: LD_INT 35
9214: PPUSH
9215: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9219: LD_EXP 25
9223: PPUSH
9224: LD_INT 4
9226: PPUSH
9227: CALL_OW 113
// wait ( 0 0$3 ) ;
9231: LD_INT 105
9233: PPUSH
9234: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9238: LD_EXP 24
9242: PPUSH
9243: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9247: LD_EXP 25
9251: PPUSH
9252: CALL_OW 64
// wait ( 0 0$3 ) ;
9256: LD_INT 105
9258: PPUSH
9259: CALL_OW 67
// if payForHelp then
9263: LD_VAR 0 14
9267: IFFALSE 9325
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9269: LD_INT 36
9271: PPUSH
9272: LD_INT 57
9274: PPUSH
9275: LD_INT 1
9277: PPUSH
9278: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9282: LD_INT 51
9284: PPUSH
9285: LD_INT 63
9287: PPUSH
9288: LD_INT 1
9290: PPUSH
9291: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9295: LD_INT 93
9297: PPUSH
9298: LD_INT 65
9300: PPUSH
9301: LD_INT 1
9303: PPUSH
9304: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9308: LD_INT 42
9310: PPUSH
9311: LD_INT 12
9313: PPUSH
9314: LD_INT 1
9316: PPUSH
9317: CALL_OW 244
// PrepareLegionForPlayer ;
9321: CALL 4650 0 0
// end ; end ;
9325: LD_VAR 0 1
9329: RET
// every 0 0$10 trigger warWithLegion = 1 do
9330: LD_EXP 30
9334: PUSH
9335: LD_INT 1
9337: EQUAL
9338: IFFALSE 9354
9340: GO 9342
9342: DISABLE
// begin wait ( 0 0$30 ) ;
9343: LD_INT 1050
9345: PPUSH
9346: CALL_OW 67
// PrepareAttackLegion ;
9350: CALL 5314 0 0
// end ;
9354: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9355: LD_EXP 15
9359: PPUSH
9360: CALL_OW 305
9364: PUSH
9365: LD_EXP 15
9369: PPUSH
9370: LD_INT 1
9372: PPUSH
9373: CALL_OW 289
9377: NOT
9378: AND
9379: PUSH
9380: LD_EXP 15
9384: PPUSH
9385: LD_INT 2
9387: PPUSH
9388: CALL_OW 289
9392: NOT
9393: AND
9394: PUSH
9395: LD_EXP 15
9399: PPUSH
9400: LD_INT 3
9402: PPUSH
9403: CALL_OW 289
9407: NOT
9408: AND
9409: IFFALSE 9426
9411: GO 9413
9413: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9414: LD_EXP 15
9418: PPUSH
9419: LD_INT 4
9421: PPUSH
9422: CALL_OW 235
9426: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9427: LD_EXP 16
9431: PPUSH
9432: CALL_OW 305
9436: PUSH
9437: LD_EXP 16
9441: PPUSH
9442: LD_INT 1
9444: PPUSH
9445: CALL_OW 289
9449: NOT
9450: AND
9451: PUSH
9452: LD_EXP 16
9456: PPUSH
9457: LD_INT 2
9459: PPUSH
9460: CALL_OW 289
9464: NOT
9465: AND
9466: PUSH
9467: LD_EXP 16
9471: PPUSH
9472: LD_INT 3
9474: PPUSH
9475: CALL_OW 289
9479: NOT
9480: AND
9481: IFFALSE 9498
9483: GO 9485
9485: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9486: LD_EXP 16
9490: PPUSH
9491: LD_INT 4
9493: PPUSH
9494: CALL_OW 235
9498: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9499: LD_EXP 17
9503: PPUSH
9504: CALL_OW 305
9508: PUSH
9509: LD_EXP 17
9513: PPUSH
9514: LD_INT 1
9516: PPUSH
9517: CALL_OW 289
9521: NOT
9522: AND
9523: PUSH
9524: LD_EXP 17
9528: PPUSH
9529: LD_INT 2
9531: PPUSH
9532: CALL_OW 289
9536: NOT
9537: AND
9538: PUSH
9539: LD_EXP 17
9543: PPUSH
9544: LD_INT 3
9546: PPUSH
9547: CALL_OW 289
9551: NOT
9552: AND
9553: IFFALSE 9570
9555: GO 9557
9557: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9558: LD_EXP 17
9562: PPUSH
9563: LD_INT 4
9565: PPUSH
9566: CALL_OW 235
9570: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9571: LD_EXP 18
9575: PPUSH
9576: CALL_OW 305
9580: PUSH
9581: LD_EXP 18
9585: PPUSH
9586: LD_INT 1
9588: PPUSH
9589: CALL_OW 289
9593: NOT
9594: AND
9595: PUSH
9596: LD_EXP 18
9600: PPUSH
9601: LD_INT 2
9603: PPUSH
9604: CALL_OW 289
9608: NOT
9609: AND
9610: PUSH
9611: LD_EXP 18
9615: PPUSH
9616: LD_INT 3
9618: PPUSH
9619: CALL_OW 289
9623: NOT
9624: AND
9625: IFFALSE 9642
9627: GO 9629
9629: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9630: LD_EXP 18
9634: PPUSH
9635: LD_INT 4
9637: PPUSH
9638: CALL_OW 235
9642: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9643: LD_EXP 19
9647: PPUSH
9648: CALL_OW 305
9652: PUSH
9653: LD_EXP 19
9657: PPUSH
9658: LD_INT 1
9660: PPUSH
9661: CALL_OW 289
9665: NOT
9666: AND
9667: PUSH
9668: LD_EXP 19
9672: PPUSH
9673: LD_INT 2
9675: PPUSH
9676: CALL_OW 289
9680: NOT
9681: AND
9682: PUSH
9683: LD_EXP 19
9687: PPUSH
9688: LD_INT 3
9690: PPUSH
9691: CALL_OW 289
9695: NOT
9696: AND
9697: PUSH
9698: LD_EXP 19
9702: PPUSH
9703: LD_INT 2
9705: PPUSH
9706: CALL_OW 289
9710: NOT
9711: AND
9712: IFFALSE 9729
9714: GO 9716
9716: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9717: LD_EXP 19
9721: PPUSH
9722: LD_INT 4
9724: PPUSH
9725: CALL_OW 235
9729: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9730: LD_EXP 20
9734: PPUSH
9735: CALL_OW 305
9739: PUSH
9740: LD_EXP 20
9744: PPUSH
9745: LD_INT 1
9747: PPUSH
9748: CALL_OW 289
9752: NOT
9753: AND
9754: PUSH
9755: LD_EXP 20
9759: PPUSH
9760: LD_INT 2
9762: PPUSH
9763: CALL_OW 289
9767: NOT
9768: AND
9769: PUSH
9770: LD_EXP 20
9774: PPUSH
9775: LD_INT 3
9777: PPUSH
9778: CALL_OW 289
9782: NOT
9783: AND
9784: IFFALSE 9801
9786: GO 9788
9788: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9789: LD_EXP 20
9793: PPUSH
9794: LD_INT 4
9796: PPUSH
9797: CALL_OW 235
9801: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9802: LD_EXP 21
9806: PPUSH
9807: CALL_OW 305
9811: PUSH
9812: LD_EXP 21
9816: PPUSH
9817: LD_INT 1
9819: PPUSH
9820: CALL_OW 289
9824: NOT
9825: AND
9826: PUSH
9827: LD_EXP 21
9831: PPUSH
9832: LD_INT 2
9834: PPUSH
9835: CALL_OW 289
9839: NOT
9840: AND
9841: PUSH
9842: LD_EXP 21
9846: PPUSH
9847: LD_INT 3
9849: PPUSH
9850: CALL_OW 289
9854: NOT
9855: AND
9856: IFFALSE 9873
9858: GO 9860
9860: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9861: LD_EXP 21
9865: PPUSH
9866: LD_INT 4
9868: PPUSH
9869: CALL_OW 235
9873: END
// every 0 0$1 do var i ;
9874: GO 9876
9876: DISABLE
9877: LD_INT 0
9879: PPUSH
// begin enable ;
9880: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9881: LD_ADDR_VAR 0 1
9885: PUSH
9886: LD_INT 22
9888: PUSH
9889: LD_INT 4
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: PPUSH
9896: CALL_OW 69
9900: PUSH
9901: FOR_IN
9902: IFFALSE 9941
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9904: LD_VAR 0 1
9908: PPUSH
9909: LD_INT 4
9911: PPUSH
9912: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9916: LD_VAR 0 1
9920: PPUSH
9921: LD_INT 4
9923: PPUSH
9924: CALL_OW 308
9928: IFFALSE 9939
// RemoveUnit ( i ) ;
9930: LD_VAR 0 1
9934: PPUSH
9935: CALL_OW 64
// end ;
9939: GO 9901
9941: POP
9942: POP
// end ;
9943: PPOPN 1
9945: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9946: LD_EXP 27
9950: PUSH
9951: LD_INT 1
9953: EQUAL
9954: IFFALSE 10393
9956: GO 9958
9958: DISABLE
9959: LD_INT 0
9961: PPUSH
9962: PPUSH
9963: PPUSH
// begin enable ;
9964: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9965: LD_ADDR_VAR 0 2
9969: PUSH
9970: LD_INT 12
9972: PPUSH
9973: LD_INT 22
9975: PUSH
9976: LD_INT 3
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 21
9985: PUSH
9986: LD_INT 2
9988: PUSH
9989: EMPTY
9990: LIST
9991: LIST
9992: PUSH
9993: EMPTY
9994: LIST
9995: LIST
9996: PPUSH
9997: CALL_OW 70
10001: ST_TO_ADDR
// for i in enemyVehs do
10002: LD_ADDR_VAR 0 1
10006: PUSH
10007: LD_VAR 0 2
10011: PUSH
10012: FOR_IN
10013: IFFALSE 10391
// begin if See ( 1 , i ) then
10015: LD_INT 1
10017: PPUSH
10018: LD_VAR 0 1
10022: PPUSH
10023: CALL_OW 292
10027: IFFALSE 10389
// begin disable ;
10029: DISABLE
// DialogueOn ;
10030: CALL_OW 6
// CenterNowOnUnits ( i ) ;
10034: LD_VAR 0 1
10038: PPUSH
10039: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10043: LD_INT 22
10045: PUSH
10046: LD_INT 1
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: PUSH
10053: LD_INT 26
10055: PUSH
10056: LD_INT 1
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 2
10065: PUSH
10066: LD_INT 25
10068: PUSH
10069: LD_INT 1
10071: PUSH
10072: EMPTY
10073: LIST
10074: LIST
10075: PUSH
10076: LD_INT 25
10078: PUSH
10079: LD_INT 2
10081: PUSH
10082: EMPTY
10083: LIST
10084: LIST
10085: PUSH
10086: LD_INT 25
10088: PUSH
10089: LD_INT 3
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PUSH
10096: LD_INT 25
10098: PUSH
10099: LD_INT 4
10101: PUSH
10102: EMPTY
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 25
10108: PUSH
10109: LD_INT 5
10111: PUSH
10112: EMPTY
10113: LIST
10114: LIST
10115: PUSH
10116: LD_INT 25
10118: PUSH
10119: LD_INT 8
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: LIST
10139: PPUSH
10140: CALL_OW 69
10144: PPUSH
10145: LD_STRING DT1-Sol1-1
10147: PPUSH
10148: LD_STRING DT1-FSol1-1
10150: PPUSH
10151: CALL 12584 0 3
// dec = ShowQuery2 ;
10155: LD_ADDR_VAR 0 3
10159: PUSH
10160: CALL 13068 0 0
10164: ST_TO_ADDR
// if dec = 1 then
10165: LD_VAR 0 3
10169: PUSH
10170: LD_INT 1
10172: EQUAL
10173: IFFALSE 10279
// begin Say ( JMM , D2-JMM-1 ) ;
10175: LD_EXP 1
10179: PPUSH
10180: LD_STRING D2-JMM-1
10182: PPUSH
10183: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10187: LD_EXP 22
10191: PPUSH
10192: LD_STRING D2-Pow-1
10194: PPUSH
10195: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10199: LD_EXP 1
10203: PPUSH
10204: LD_STRING D2a-JMM-1
10206: PPUSH
10207: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10211: LD_EXP 22
10215: PPUSH
10216: LD_STRING D2a-Pow-1
10218: PPUSH
10219: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10223: LD_EXP 1
10227: PPUSH
10228: LD_STRING D2a-JMM-2
10230: PPUSH
10231: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10235: LD_EXP 22
10239: PPUSH
10240: LD_STRING D2a-Pow-2
10242: PPUSH
10243: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10247: LD_EXP 1
10251: PPUSH
10252: LD_STRING D2a-JMM-3
10254: PPUSH
10255: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10259: LD_EXP 22
10263: PPUSH
10264: LD_STRING D2a-Pow-3
10266: PPUSH
10267: CALL_OW 94
// secondPass = 2 ;
10271: LD_ADDR_EXP 27
10275: PUSH
10276: LD_INT 2
10278: ST_TO_ADDR
// end ; if dec = 2 then
10279: LD_VAR 0 3
10283: PUSH
10284: LD_INT 2
10286: EQUAL
10287: IFFALSE 10381
// begin Say ( JMM , D2-JMM-1 ) ;
10289: LD_EXP 1
10293: PPUSH
10294: LD_STRING D2-JMM-1
10296: PPUSH
10297: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10301: LD_EXP 22
10305: PPUSH
10306: LD_STRING D2-Pow-1
10308: PPUSH
10309: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10313: LD_EXP 1
10317: PPUSH
10318: LD_STRING D2b-JMM-1
10320: PPUSH
10321: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10325: LD_EXP 22
10329: PPUSH
10330: LD_STRING D2b-Pow-1
10332: PPUSH
10333: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10337: LD_EXP 1
10341: PPUSH
10342: LD_STRING D2c-JMM-1
10344: PPUSH
10345: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10349: LD_EXP 22
10353: PPUSH
10354: LD_STRING D2c-Pow-1
10356: PPUSH
10357: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10361: LD_EXP 1
10365: PPUSH
10366: LD_STRING D2c-JMM-2
10368: PPUSH
10369: CALL_OW 88
// secondPass = 2 ;
10373: LD_ADDR_EXP 27
10377: PUSH
10378: LD_INT 2
10380: ST_TO_ADDR
// end ; DialogueOff ;
10381: CALL_OW 7
// exit ;
10385: POP
10386: POP
10387: GO 10393
// end ; end ;
10389: GO 10012
10391: POP
10392: POP
// end ;
10393: PPOPN 3
10395: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10396: LD_EXP 28
10400: PUSH
10401: LD_INT 1
10403: EQUAL
10404: PUSH
10405: LD_INT 11
10407: PPUSH
10408: LD_INT 22
10410: PUSH
10411: LD_INT 3
10413: PUSH
10414: EMPTY
10415: LIST
10416: LIST
10417: PPUSH
10418: CALL_OW 70
10422: AND
10423: IFFALSE 10651
10425: GO 10427
10427: DISABLE
10428: LD_INT 0
10430: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10431: LD_ADDR_VAR 0 1
10435: PUSH
10436: LD_INT 11
10438: PPUSH
10439: LD_INT 22
10441: PUSH
10442: LD_INT 3
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PPUSH
10449: CALL_OW 70
10453: ST_TO_ADDR
// if not vehicles then
10454: LD_VAR 0 1
10458: NOT
10459: IFFALSE 10463
// exit ;
10461: GO 10651
// repeat wait ( 0 0$1 ) ;
10463: LD_INT 35
10465: PPUSH
10466: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10470: LD_VAR 0 1
10474: PPUSH
10475: LD_INT 101
10477: PUSH
10478: LD_INT 1
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: PPUSH
10485: CALL_OW 72
10489: IFFALSE 10463
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10491: LD_VAR 0 1
10495: PPUSH
10496: LD_INT 101
10498: PUSH
10499: LD_INT 1
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PPUSH
10506: CALL_OW 72
10510: PUSH
10511: LD_INT 1
10513: ARRAY
10514: PPUSH
10515: CALL_OW 87
// DialogueOn ;
10519: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10523: LD_INT 22
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 26
10535: PUSH
10536: LD_INT 1
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 2
10545: PUSH
10546: LD_INT 25
10548: PUSH
10549: LD_INT 1
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 25
10558: PUSH
10559: LD_INT 2
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 25
10568: PUSH
10569: LD_INT 3
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: LD_INT 25
10578: PUSH
10579: LD_INT 4
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 25
10588: PUSH
10589: LD_INT 5
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: LD_INT 25
10598: PUSH
10599: LD_INT 8
10601: PUSH
10602: EMPTY
10603: LIST
10604: LIST
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: LIST
10610: LIST
10611: LIST
10612: LIST
10613: LIST
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: LIST
10619: PPUSH
10620: CALL_OW 69
10624: PPUSH
10625: LD_STRING DT1-Sol1-1
10627: PPUSH
10628: LD_STRING DT1-FSol1-1
10630: PPUSH
10631: CALL 12584 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10635: LD_EXP 1
10639: PPUSH
10640: LD_STRING DT1-JMM-1
10642: PPUSH
10643: CALL_OW 88
// DialogueOff ;
10647: CALL_OW 7
// end ;
10651: PPOPN 1
10653: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10654: LD_EXP 28
10658: PUSH
10659: LD_INT 1
10661: EQUAL
10662: PUSH
10663: LD_INT 11
10665: PPUSH
10666: LD_INT 22
10668: PUSH
10669: LD_INT 3
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: LD_INT 50
10678: PUSH
10679: EMPTY
10680: LIST
10681: PUSH
10682: LD_INT 2
10684: PUSH
10685: LD_INT 21
10687: PUSH
10688: LD_INT 2
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: PUSH
10695: LD_INT 21
10697: PUSH
10698: LD_INT 1
10700: PUSH
10701: EMPTY
10702: LIST
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: LIST
10709: PUSH
10710: EMPTY
10711: LIST
10712: LIST
10713: LIST
10714: PPUSH
10715: CALL_OW 70
10719: PUSH
10720: LD_INT 0
10722: EQUAL
10723: AND
10724: PUSH
10725: LD_EXP 29
10729: AND
10730: IFFALSE 10887
10732: GO 10734
10734: DISABLE
// begin vehicleTeleported = 2 ;
10735: LD_ADDR_EXP 28
10739: PUSH
10740: LD_INT 2
10742: ST_TO_ADDR
// DialogueOn ;
10743: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10747: LD_EXP 1
10751: PPUSH
10752: LD_STRING DT1a-JMM-1
10754: PPUSH
10755: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10759: LD_INT 22
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 26
10771: PUSH
10772: LD_INT 1
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: PUSH
10779: LD_INT 2
10781: PUSH
10782: LD_INT 25
10784: PUSH
10785: LD_INT 1
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 25
10794: PUSH
10795: LD_INT 2
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 25
10804: PUSH
10805: LD_INT 3
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 25
10814: PUSH
10815: LD_INT 4
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 5
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 25
10834: PUSH
10835: LD_INT 8
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: LIST
10855: PPUSH
10856: CALL_OW 69
10860: PPUSH
10861: LD_STRING DT1a-Sol1-1
10863: PPUSH
10864: LD_STRING DT1a-FSol1-1
10866: PPUSH
10867: CALL 12584 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10871: LD_EXP 1
10875: PPUSH
10876: LD_STRING DT1a-JMM-2
10878: PPUSH
10879: CALL_OW 88
// DialogueOff ;
10883: CALL_OW 7
// end ;
10887: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10888: LD_EXP 28
10892: PUSH
10893: LD_INT 3
10895: EQUAL
10896: PUSH
10897: LD_INT 11
10899: PPUSH
10900: LD_INT 22
10902: PUSH
10903: LD_INT 3
10905: PUSH
10906: EMPTY
10907: LIST
10908: LIST
10909: PUSH
10910: LD_INT 101
10912: PUSH
10913: LD_INT 1
10915: PUSH
10916: EMPTY
10917: LIST
10918: LIST
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: PPUSH
10924: CALL_OW 70
10928: AND
10929: IFFALSE 11203
10931: GO 10933
10933: DISABLE
10934: LD_INT 0
10936: PPUSH
10937: PPUSH
10938: PPUSH
// begin wait ( 0 0$0.3 ) ;
10939: LD_INT 10
10941: PPUSH
10942: CALL_OW 67
// DialogueOn ;
10946: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10950: LD_ADDR_VAR 0 3
10954: PUSH
10955: LD_INT 22
10957: PUSH
10958: LD_INT 1
10960: PUSH
10961: EMPTY
10962: LIST
10963: LIST
10964: PUSH
10965: LD_INT 26
10967: PUSH
10968: LD_INT 1
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: PUSH
10975: LD_INT 2
10977: PUSH
10978: LD_INT 25
10980: PUSH
10981: LD_INT 1
10983: PUSH
10984: EMPTY
10985: LIST
10986: LIST
10987: PUSH
10988: LD_INT 25
10990: PUSH
10991: LD_INT 2
10993: PUSH
10994: EMPTY
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 25
11000: PUSH
11001: LD_INT 3
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: PUSH
11008: LD_INT 25
11010: PUSH
11011: LD_INT 4
11013: PUSH
11014: EMPTY
11015: LIST
11016: LIST
11017: PUSH
11018: LD_INT 25
11020: PUSH
11021: LD_INT 5
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 25
11030: PUSH
11031: LD_INT 8
11033: PUSH
11034: EMPTY
11035: LIST
11036: LIST
11037: PUSH
11038: EMPTY
11039: LIST
11040: LIST
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: LIST
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: LIST
11051: PPUSH
11052: CALL_OW 69
11056: PPUSH
11057: LD_STRING DT2-Sol1-1
11059: PPUSH
11060: LD_STRING DT2-FSol1-1
11062: PPUSH
11063: CALL 12584 0 3
11067: ST_TO_ADDR
// DialogueOff ;
11068: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
11072: LD_INT 35
11074: PPUSH
11075: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11079: LD_INT 11
11081: PPUSH
11082: LD_INT 22
11084: PUSH
11085: LD_INT 3
11087: PUSH
11088: EMPTY
11089: LIST
11090: LIST
11091: PUSH
11092: LD_INT 50
11094: PUSH
11095: EMPTY
11096: LIST
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PPUSH
11102: CALL_OW 70
11106: NOT
11107: IFFALSE 11072
// wait ( 0 0$2 ) ;
11109: LD_INT 70
11111: PPUSH
11112: CALL_OW 67
// vehicleTeleported = 4 ;
11116: LD_ADDR_EXP 28
11120: PUSH
11121: LD_INT 4
11123: ST_TO_ADDR
// DialogueOn ;
11124: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11128: LD_EXP 1
11132: PPUSH
11133: LD_STRING DT2a-JMM-1
11135: PPUSH
11136: CALL_OW 88
// if speaker then
11140: LD_VAR 0 3
11144: IFFALSE 11187
// if GetSex ( speaker ) = 1 then
11146: LD_VAR 0 3
11150: PPUSH
11151: CALL_OW 258
11155: PUSH
11156: LD_INT 1
11158: EQUAL
11159: IFFALSE 11175
// Say ( speaker , DT2a-Sol1-1 ) else
11161: LD_VAR 0 3
11165: PPUSH
11166: LD_STRING DT2a-Sol1-1
11168: PPUSH
11169: CALL_OW 88
11173: GO 11187
// Say ( speaker , DT2a-FSol1-1 ) ;
11175: LD_VAR 0 3
11179: PPUSH
11180: LD_STRING DT2a-FSol1-1
11182: PPUSH
11183: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11187: LD_EXP 3
11191: PPUSH
11192: LD_STRING DT2a-Don-1
11194: PPUSH
11195: CALL_OW 88
// DialogueOff ;
11199: CALL_OW 7
// end ;
11203: PPOPN 3
11205: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11206: LD_INT 1
11208: PPUSH
11209: LD_INT 45
11211: PPUSH
11212: LD_INT 74
11214: PPUSH
11215: CALL_OW 293
11219: IFFALSE 11383
11221: GO 11223
11223: DISABLE
// begin DialogueOn ;
11224: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11228: LD_INT 36
11230: PPUSH
11231: LD_INT 55
11233: PPUSH
11234: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11238: LD_INT 22
11240: PUSH
11241: LD_INT 1
11243: PUSH
11244: EMPTY
11245: LIST
11246: LIST
11247: PUSH
11248: LD_INT 26
11250: PUSH
11251: LD_INT 1
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 2
11260: PUSH
11261: LD_INT 25
11263: PUSH
11264: LD_INT 1
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 25
11273: PUSH
11274: LD_INT 2
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 25
11283: PUSH
11284: LD_INT 3
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 25
11293: PUSH
11294: LD_INT 4
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 25
11303: PUSH
11304: LD_INT 5
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 25
11313: PUSH
11314: LD_INT 8
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: PPUSH
11335: CALL_OW 69
11339: PPUSH
11340: LD_STRING D5-Sol1-1
11342: PPUSH
11343: LD_STRING D5-FSol1-
11345: PPUSH
11346: CALL 12584 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11350: LD_EXP 30
11354: PUSH
11355: LD_EXP 3
11359: PPUSH
11360: CALL_OW 302
11364: AND
11365: IFFALSE 11379
// Say ( Donaldson , D5-Don-1 ) ;
11367: LD_EXP 3
11371: PPUSH
11372: LD_STRING D5-Don-1
11374: PPUSH
11375: CALL_OW 88
// DialogueOff ;
11379: CALL_OW 7
// end ;
11383: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11384: LD_INT 1
11386: PPUSH
11387: LD_INT 10
11389: PPUSH
11390: CALL_OW 292
11394: PUSH
11395: LD_INT 1
11397: PPUSH
11398: LD_INT 137
11400: PPUSH
11401: CALL_OW 292
11405: OR
11406: IFFALSE 11550
11408: GO 11410
11410: DISABLE
// begin DialogueOn ;
11411: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11415: LD_INT 22
11417: PUSH
11418: LD_INT 1
11420: PUSH
11421: EMPTY
11422: LIST
11423: LIST
11424: PUSH
11425: LD_INT 26
11427: PUSH
11428: LD_INT 1
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 2
11437: PUSH
11438: LD_INT 25
11440: PUSH
11441: LD_INT 1
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 25
11450: PUSH
11451: LD_INT 2
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: LD_INT 25
11460: PUSH
11461: LD_INT 3
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: PUSH
11468: LD_INT 25
11470: PUSH
11471: LD_INT 4
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: PUSH
11478: LD_INT 25
11480: PUSH
11481: LD_INT 5
11483: PUSH
11484: EMPTY
11485: LIST
11486: LIST
11487: PUSH
11488: LD_INT 25
11490: PUSH
11491: LD_INT 8
11493: PUSH
11494: EMPTY
11495: LIST
11496: LIST
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: LIST
11511: PPUSH
11512: CALL_OW 69
11516: PPUSH
11517: LD_STRING DT3-Sol1-1
11519: PPUSH
11520: LD_STRING DT3-FSol1-1
11522: PPUSH
11523: CALL 12584 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11527: LD_EXP 1
11531: PPUSH
11532: LD_STRING DT3-JMM-1
11534: PPUSH
11535: CALL_OW 88
// DialogueOff ;
11539: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11543: LD_STRING M2
11545: PPUSH
11546: CALL_OW 337
// end ;
11550: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do var i ;
11551: LD_EXP 42
11555: PUSH
11556: LD_INT 0
11558: EQUAL
11559: PUSH
11560: LD_INT 10
11562: PPUSH
11563: LD_INT 22
11565: PUSH
11566: LD_INT 1
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PPUSH
11573: CALL_OW 70
11577: PUSH
11578: LD_INT 10
11580: PPUSH
11581: LD_INT 22
11583: PUSH
11584: LD_INT 3
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: LD_INT 24
11596: PUSH
11597: LD_INT 1000
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: PUSH
11604: EMPTY
11605: LIST
11606: LIST
11607: PUSH
11608: LD_INT 21
11610: PUSH
11611: LD_INT 2
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 58
11620: PUSH
11621: EMPTY
11622: LIST
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: PPUSH
11630: CALL_OW 70
11634: OR
11635: AND
11636: IFFALSE 11652
11638: GO 11640
11640: DISABLE
11641: LD_INT 0
11643: PPUSH
// begin ruEscape := 1 ;
11644: LD_ADDR_EXP 42
11648: PUSH
11649: LD_INT 1
11651: ST_TO_ADDR
// end ;
11652: PPOPN 1
11654: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , unit , tmp ;
11655: LD_INT 3
11657: PPUSH
11658: CALL_OW 303
11662: PUSH
11663: LD_INT 4
11665: PPUSH
11666: CALL_OW 303
11670: OR
11671: PUSH
11672: LD_INT 22
11674: PPUSH
11675: LD_INT 22
11677: PUSH
11678: LD_INT 1
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PPUSH
11685: CALL_OW 70
11689: PUSH
11690: LD_INT 0
11692: GREATER
11693: OR
11694: PUSH
11695: LD_EXP 42
11699: PUSH
11700: LD_INT 1
11702: EQUAL
11703: OR
11704: IFFALSE 12252
11706: GO 11708
11708: DISABLE
11709: LD_INT 0
11711: PPUSH
11712: PPUSH
11713: PPUSH
// begin ruAI := 0 ;
11714: LD_ADDR_EXP 41
11718: PUSH
11719: LD_INT 0
11721: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11722: LD_EXP 34
11726: PPUSH
11727: CALL_OW 122
// wait ( 0 0$1 ) ;
11731: LD_INT 35
11733: PPUSH
11734: CALL_OW 67
// DialogueOn ;
11738: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11742: LD_INT 75
11744: PPUSH
11745: LD_INT 21
11747: PPUSH
11748: LD_INT 1
11750: PPUSH
11751: LD_INT 12
11753: PPUSH
11754: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11758: LD_INT 75
11760: PPUSH
11761: LD_INT 21
11763: PPUSH
11764: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11768: LD_INT 10
11770: PPUSH
11771: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11775: LD_EXP 1
11779: PPUSH
11780: LD_STRING D6-JMM-1
11782: PPUSH
11783: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11787: LD_INT 75
11789: PPUSH
11790: LD_INT 21
11792: PPUSH
11793: LD_INT 1
11795: PPUSH
11796: CALL_OW 331
// DialogueOff ;
11800: CALL_OW 7
// for i in RuScientists do
11804: LD_ADDR_VAR 0 1
11808: PUSH
11809: LD_EXP 34
11813: PUSH
11814: FOR_IN
11815: IFFALSE 11851
// begin SetSide ( i , 6 ) ;
11817: LD_VAR 0 1
11821: PPUSH
11822: LD_INT 6
11824: PPUSH
11825: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11829: LD_VAR 0 1
11833: PPUSH
11834: LD_INT 1
11836: PPUSH
11837: LD_INT 3
11839: PPUSH
11840: CALL_OW 12
11844: PPUSH
11845: CALL_OW 109
// end ;
11849: GO 11814
11851: POP
11852: POP
// repeat wait ( 0 0$1 ) ;
11853: LD_INT 35
11855: PPUSH
11856: CALL_OW 67
// for i in RuScientists do
11860: LD_ADDR_VAR 0 1
11864: PUSH
11865: LD_EXP 34
11869: PUSH
11870: FOR_IN
11871: IFFALSE 12243
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11873: LD_ADDR_VAR 0 3
11877: PUSH
11878: LD_INT 22
11880: PUSH
11881: LD_INT 3
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: PUSH
11888: LD_INT 91
11890: PUSH
11891: LD_VAR 0 1
11895: PUSH
11896: LD_INT 10
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 21
11906: PUSH
11907: LD_INT 2
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: PUSH
11914: LD_INT 58
11916: PUSH
11917: EMPTY
11918: LIST
11919: PUSH
11920: EMPTY
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: PPUSH
11926: CALL_OW 69
11930: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11931: LD_VAR 0 3
11935: PUSH
11936: LD_VAR 0 1
11940: PPUSH
11941: CALL_OW 310
11945: NOT
11946: AND
11947: IFFALSE 11975
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11949: LD_VAR 0 1
11953: PPUSH
11954: LD_VAR 0 3
11958: PPUSH
11959: LD_VAR 0 1
11963: PPUSH
11964: CALL_OW 74
11968: PPUSH
11969: CALL_OW 120
// continue ;
11973: GO 11870
// end ; if IsInUnit ( i ) then
11975: LD_VAR 0 1
11979: PPUSH
11980: CALL_OW 310
11984: IFFALSE 12003
// unit := IsInUnit ( i ) else
11986: LD_ADDR_VAR 0 2
11990: PUSH
11991: LD_VAR 0 1
11995: PPUSH
11996: CALL_OW 310
12000: ST_TO_ADDR
12001: GO 12013
// unit := i ;
12003: LD_ADDR_VAR 0 2
12007: PUSH
12008: LD_VAR 0 1
12012: ST_TO_ADDR
// case GetTag ( i ) of 1 :
12013: LD_VAR 0 1
12017: PPUSH
12018: CALL_OW 110
12022: PUSH
12023: LD_INT 1
12025: DOUBLE
12026: EQUAL
12027: IFTRUE 12031
12029: GO 12081
12031: POP
// begin if GetDistUnits ( unit , rutp ) < 13 then
12032: LD_VAR 0 2
12036: PPUSH
12037: LD_INT 137
12039: PPUSH
12040: CALL_OW 296
12044: PUSH
12045: LD_INT 13
12047: LESS
12048: IFFALSE 12064
// ComEnterUnit ( unit , rutp ) else
12050: LD_VAR 0 2
12054: PPUSH
12055: LD_INT 137
12057: PPUSH
12058: CALL_OW 120
12062: GO 12079
// ComMoveXY ( unit , 16 , 28 ) ;
12064: LD_VAR 0 2
12068: PPUSH
12069: LD_INT 16
12071: PPUSH
12072: LD_INT 28
12074: PPUSH
12075: CALL_OW 111
// end ; 2 :
12079: GO 12241
12081: LD_INT 2
12083: DOUBLE
12084: EQUAL
12085: IFTRUE 12089
12087: GO 12107
12089: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
12090: LD_VAR 0 2
12094: PPUSH
12095: LD_INT 97
12097: PPUSH
12098: LD_INT 2
12100: PPUSH
12101: CALL_OW 111
12105: GO 12241
12107: LD_INT 3
12109: DOUBLE
12110: EQUAL
12111: IFTRUE 12115
12113: GO 12165
12115: POP
// begin if GetDistUnits ( unit , rutp ) < 13 then
12116: LD_VAR 0 2
12120: PPUSH
12121: LD_INT 137
12123: PPUSH
12124: CALL_OW 296
12128: PUSH
12129: LD_INT 13
12131: LESS
12132: IFFALSE 12148
// ComEnterUnit ( unit , rutp ) else
12134: LD_VAR 0 2
12138: PPUSH
12139: LD_INT 137
12141: PPUSH
12142: CALL_OW 120
12146: GO 12163
// ComMoveXY ( unit , 128 , 155 ) ;
12148: LD_VAR 0 2
12152: PPUSH
12153: LD_INT 128
12155: PPUSH
12156: LD_INT 155
12158: PPUSH
12159: CALL_OW 111
// end ; 11 :
12163: GO 12241
12165: LD_INT 11
12167: DOUBLE
12168: EQUAL
12169: IFTRUE 12173
12171: GO 12191
12173: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
12174: LD_VAR 0 2
12178: PPUSH
12179: LD_INT 16
12181: PPUSH
12182: LD_INT 28
12184: PPUSH
12185: CALL_OW 111
12189: GO 12241
12191: LD_INT 13
12193: DOUBLE
12194: EQUAL
12195: IFTRUE 12199
12197: GO 12214
12199: POP
// ComEnterUnit ( unit , ruteleprt ) ; 23 :
12200: LD_VAR 0 2
12204: PPUSH
12205: LD_INT 10
12207: PPUSH
12208: CALL_OW 120
12212: GO 12241
12214: LD_INT 23
12216: DOUBLE
12217: EQUAL
12218: IFTRUE 12222
12220: GO 12240
12222: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
12223: LD_VAR 0 2
12227: PPUSH
12228: LD_INT 128
12230: PPUSH
12231: LD_INT 155
12233: PPUSH
12234: CALL_OW 111
12238: GO 12241
12240: POP
// end ;
12241: GO 11870
12243: POP
12244: POP
// until not RuScientists ;
12245: LD_EXP 34
12249: NOT
12250: IFFALSE 11853
// end ;
12252: PPOPN 3
12254: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
12255: LD_EXP 41
12259: PUSH
12260: LD_INT 0
12262: EQUAL
12263: PUSH
12264: LD_EXP 34
12268: AND
12269: PUSH
12270: LD_INT 22
12272: PUSH
12273: LD_INT 6
12275: PUSH
12276: EMPTY
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 2
12282: PUSH
12283: LD_INT 95
12285: PUSH
12286: LD_INT 13
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: PUSH
12293: LD_INT 95
12295: PUSH
12296: LD_INT 14
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: PUSH
12303: LD_INT 95
12305: PUSH
12306: LD_INT 27
12308: PUSH
12309: EMPTY
12310: LIST
12311: LIST
12312: PUSH
12313: EMPTY
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: PUSH
12319: EMPTY
12320: LIST
12321: LIST
12322: PPUSH
12323: CALL_OW 69
12327: AND
12328: IFFALSE 12541
12330: GO 12332
12332: DISABLE
12333: LD_INT 0
12335: PPUSH
12336: PPUSH
12337: PPUSH
12338: PPUSH
// begin enable ;
12339: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
12340: LD_ADDR_VAR 0 1
12344: PUSH
12345: LD_INT 22
12347: PUSH
12348: LD_INT 6
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 2
12357: PUSH
12358: LD_INT 95
12360: PUSH
12361: LD_INT 13
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: LD_INT 95
12370: PUSH
12371: LD_INT 14
12373: PUSH
12374: EMPTY
12375: LIST
12376: LIST
12377: PUSH
12378: LD_INT 95
12380: PUSH
12381: LD_INT 27
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: PUSH
12394: EMPTY
12395: LIST
12396: LIST
12397: PPUSH
12398: CALL_OW 69
12402: PUSH
12403: FOR_IN
12404: IFFALSE 12539
// begin if i in RuScientists then
12406: LD_VAR 0 1
12410: PUSH
12411: LD_EXP 34
12415: IN
12416: IFFALSE 12445
// begin RuScientists = RuScientists diff i ;
12418: LD_ADDR_EXP 34
12422: PUSH
12423: LD_EXP 34
12427: PUSH
12428: LD_VAR 0 1
12432: DIFF
12433: ST_TO_ADDR
// RemoveUnit ( i ) ;
12434: LD_VAR 0 1
12438: PPUSH
12439: CALL_OW 64
// continue ;
12443: GO 12403
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12445: LD_VAR 0 1
12449: PUSH
12450: LD_INT 22
12452: PUSH
12453: LD_INT 6
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: PUSH
12460: LD_INT 33
12462: PUSH
12463: LD_INT 1
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: PPUSH
12474: CALL_OW 69
12478: IN
12479: IFFALSE 12537
// begin if IsDrivenBy ( i ) in RuScientists then
12481: LD_VAR 0 1
12485: PPUSH
12486: CALL_OW 311
12490: PUSH
12491: LD_EXP 34
12495: IN
12496: IFFALSE 12514
// RuScientists = RuScientists diff i ;
12498: LD_ADDR_EXP 34
12502: PUSH
12503: LD_EXP 34
12507: PUSH
12508: LD_VAR 0 1
12512: DIFF
12513: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12514: LD_VAR 0 1
12518: PPUSH
12519: CALL_OW 311
12523: PPUSH
12524: CALL_OW 64
// RemoveUnit ( i ) ;
12528: LD_VAR 0 1
12532: PPUSH
12533: CALL_OW 64
// end ; end ;
12537: GO 12403
12539: POP
12540: POP
// end ; end_of_file
12541: PPOPN 4
12543: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12544: LD_INT 0
12546: PPUSH
12547: PPUSH
// for i in charactersList do
12548: LD_ADDR_VAR 0 4
12552: PUSH
12553: LD_VAR 0 1
12557: PUSH
12558: FOR_IN
12559: IFFALSE 12577
// SaveCharacters ( i , ident ) ;
12561: LD_VAR 0 4
12565: PPUSH
12566: LD_VAR 0 2
12570: PPUSH
12571: CALL_OW 38
12575: GO 12558
12577: POP
12578: POP
// end ;
12579: LD_VAR 0 3
12583: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12584: LD_INT 0
12586: PPUSH
12587: PPUSH
12588: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12589: LD_ADDR_VAR 0 1
12593: PUSH
12594: LD_VAR 0 1
12598: PUSH
12599: LD_EXP 1
12603: PUSH
12604: LD_EXP 7
12608: PUSH
12609: LD_EXP 3
12613: PUSH
12614: LD_EXP 4
12618: PUSH
12619: LD_EXP 5
12623: PUSH
12624: LD_EXP 2
12628: PUSH
12629: LD_EXP 12
12633: PUSH
12634: LD_EXP 13
12638: PUSH
12639: LD_EXP 9
12643: PUSH
12644: LD_EXP 11
12648: PUSH
12649: LD_EXP 6
12653: PUSH
12654: LD_EXP 8
12658: PUSH
12659: LD_EXP 10
12663: PUSH
12664: LD_EXP 22
12668: PUSH
12669: EMPTY
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: DIFF
12685: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12686: LD_ADDR_VAR 0 6
12690: PUSH
12691: LD_VAR 0 1
12695: PUSH
12696: LD_INT 1
12698: PPUSH
12699: LD_VAR 0 1
12703: PPUSH
12704: CALL_OW 12
12708: ARRAY
12709: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12710: LD_VAR 0 6
12714: PPUSH
12715: CALL_OW 258
12719: PUSH
12720: LD_INT 1
12722: EQUAL
12723: IFFALSE 12741
// Say ( speaker , dialogMID ) else
12725: LD_VAR 0 6
12729: PPUSH
12730: LD_VAR 0 2
12734: PPUSH
12735: CALL_OW 88
12739: GO 12755
// Say ( speaker , dialogFID ) ;
12741: LD_VAR 0 6
12745: PPUSH
12746: LD_VAR 0 3
12750: PPUSH
12751: CALL_OW 88
// result := speaker ;
12755: LD_ADDR_VAR 0 4
12759: PUSH
12760: LD_VAR 0 6
12764: ST_TO_ADDR
// end ;
12765: LD_VAR 0 4
12769: RET
// export function PrepareDifficulty ; var tmp ; begin
12770: LD_INT 0
12772: PPUSH
12773: PPUSH
// if Difficulty = 1 then
12774: LD_OWVAR 67
12778: PUSH
12779: LD_INT 1
12781: EQUAL
12782: IFFALSE 12802
// begin RuSolMinLevel = 8 ;
12784: LD_ADDR_EXP 36
12788: PUSH
12789: LD_INT 8
12791: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12792: LD_ADDR_EXP 37
12796: PUSH
12797: LD_INT 10
12799: ST_TO_ADDR
// end else
12800: GO 13042
// if Difficulty = 2 then
12802: LD_OWVAR 67
12806: PUSH
12807: LD_INT 2
12809: EQUAL
12810: IFFALSE 12906
// begin RuSolMinLevel = 9 ;
12812: LD_ADDR_EXP 36
12816: PUSH
12817: LD_INT 9
12819: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12820: LD_ADDR_EXP 37
12824: PUSH
12825: LD_INT 10
12827: ST_TO_ADDR
// uc_nation = 3 ;
12828: LD_ADDR_OWVAR 21
12832: PUSH
12833: LD_INT 3
12835: ST_TO_ADDR
// uc_side = 3 ;
12836: LD_ADDR_OWVAR 20
12840: PUSH
12841: LD_INT 3
12843: ST_TO_ADDR
// bc_level = 10 ;
12844: LD_ADDR_OWVAR 43
12848: PUSH
12849: LD_INT 10
12851: ST_TO_ADDR
// bc_type = b_turret ;
12852: LD_ADDR_OWVAR 42
12856: PUSH
12857: LD_INT 33
12859: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12860: LD_ADDR_VAR 0 2
12864: PUSH
12865: LD_INT 86
12867: PPUSH
12868: LD_INT 34
12870: PPUSH
12871: LD_INT 2
12873: PPUSH
12874: CALL_OW 47
12878: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12879: LD_VAR 0 2
12883: PPUSH
12884: LD_INT 49
12886: PPUSH
12887: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12891: LD_INT 64
12893: PPUSH
12894: LD_INT 3
12896: PPUSH
12897: LD_INT 1
12899: PPUSH
12900: CALL_OW 322
// end else
12904: GO 13042
// begin RuSolMinLevel = 10 ;
12906: LD_ADDR_EXP 36
12910: PUSH
12911: LD_INT 10
12913: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12914: LD_ADDR_EXP 37
12918: PUSH
12919: LD_INT 10
12921: ST_TO_ADDR
// uc_nation = 3 ;
12922: LD_ADDR_OWVAR 21
12926: PUSH
12927: LD_INT 3
12929: ST_TO_ADDR
// uc_side = 3 ;
12930: LD_ADDR_OWVAR 20
12934: PUSH
12935: LD_INT 3
12937: ST_TO_ADDR
// bc_level = 10 ;
12938: LD_ADDR_OWVAR 43
12942: PUSH
12943: LD_INT 10
12945: ST_TO_ADDR
// bc_type = b_turret ;
12946: LD_ADDR_OWVAR 42
12950: PUSH
12951: LD_INT 33
12953: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12954: LD_ADDR_VAR 0 2
12958: PUSH
12959: LD_INT 86
12961: PPUSH
12962: LD_INT 34
12964: PPUSH
12965: LD_INT 2
12967: PPUSH
12968: CALL_OW 47
12972: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12973: LD_VAR 0 2
12977: PPUSH
12978: LD_INT 49
12980: PPUSH
12981: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12985: LD_ADDR_VAR 0 2
12989: PUSH
12990: LD_INT 93
12992: PPUSH
12993: LD_INT 31
12995: PPUSH
12996: LD_INT 2
12998: PPUSH
12999: CALL_OW 47
13003: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13004: LD_VAR 0 2
13008: PPUSH
13009: LD_INT 49
13011: PPUSH
13012: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13016: LD_INT 64
13018: PPUSH
13019: LD_INT 3
13021: PPUSH
13022: LD_INT 1
13024: PPUSH
13025: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13029: LD_INT 65
13031: PPUSH
13032: LD_INT 3
13034: PPUSH
13035: LD_INT 1
13037: PPUSH
13038: CALL_OW 322
// end ; end ;
13042: LD_VAR 0 1
13046: RET
// export function ShowQuery1 ; begin
13047: LD_INT 0
13049: PPUSH
// result := Query ( Q1 ) ;
13050: LD_ADDR_VAR 0 1
13054: PUSH
13055: LD_STRING Q1
13057: PPUSH
13058: CALL_OW 97
13062: ST_TO_ADDR
// end ;
13063: LD_VAR 0 1
13067: RET
// export function ShowQuery2 ; begin
13068: LD_INT 0
13070: PPUSH
// result := Query ( Q1a ) ;
13071: LD_ADDR_VAR 0 1
13075: PUSH
13076: LD_STRING Q1a
13078: PPUSH
13079: CALL_OW 97
13083: ST_TO_ADDR
// end ;
13084: LD_VAR 0 1
13088: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
13089: LD_INT 0
13091: PPUSH
13092: PPUSH
13093: PPUSH
13094: PPUSH
13095: PPUSH
// for i = 1 to count do
13096: LD_ADDR_VAR 0 8
13100: PUSH
13101: DOUBLE
13102: LD_INT 1
13104: DEC
13105: ST_TO_ADDR
13106: LD_VAR 0 6
13110: PUSH
13111: FOR_TO
13112: IFFALSE 13193
// begin uc_side = side ;
13114: LD_ADDR_OWVAR 20
13118: PUSH
13119: LD_VAR 0 1
13123: ST_TO_ADDR
// uc_nation = nation ;
13124: LD_ADDR_OWVAR 21
13128: PUSH
13129: LD_VAR 0 2
13133: ST_TO_ADDR
// hc_gallery =  ;
13134: LD_ADDR_OWVAR 33
13138: PUSH
13139: LD_STRING 
13141: ST_TO_ADDR
// hc_name =  ;
13142: LD_ADDR_OWVAR 26
13146: PUSH
13147: LD_STRING 
13149: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13150: LD_INT 0
13152: PPUSH
13153: LD_VAR 0 5
13157: PPUSH
13158: LD_VAR 0 4
13162: PPUSH
13163: CALL_OW 380
// un = CreateHuman ;
13167: LD_ADDR_VAR 0 10
13171: PUSH
13172: CALL_OW 44
13176: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13177: LD_VAR 0 10
13181: PPUSH
13182: LD_VAR 0 3
13186: PPUSH
13187: CALL_OW 52
// end ;
13191: GO 13111
13193: POP
13194: POP
// end ;
13195: LD_VAR 0 7
13199: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
13200: LD_INT 0
13202: PPUSH
13203: PPUSH
13204: PPUSH
13205: PPUSH
13206: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13207: LD_ADDR_VAR 0 8
13211: PUSH
13212: LD_INT 48
13214: PUSH
13215: LD_INT 49
13217: PUSH
13218: LD_INT 50
13220: PUSH
13221: LD_INT 20
13223: PUSH
13224: LD_INT 1
13226: PUSH
13227: LD_INT 51
13229: PUSH
13230: LD_INT 52
13232: PUSH
13233: LD_INT 69
13235: PUSH
13236: LD_INT 39
13238: PUSH
13239: LD_INT 34
13241: PUSH
13242: LD_INT 40
13244: PUSH
13245: LD_INT 53
13247: PUSH
13248: LD_INT 71
13250: PUSH
13251: LD_INT 57
13253: PUSH
13254: LD_INT 58
13256: PUSH
13257: LD_INT 44
13259: PUSH
13260: LD_INT 32
13262: PUSH
13263: LD_INT 27
13265: PUSH
13266: LD_INT 23
13268: PUSH
13269: LD_INT 33
13271: PUSH
13272: LD_INT 59
13274: PUSH
13275: LD_INT 54
13277: PUSH
13278: LD_INT 55
13280: PUSH
13281: LD_INT 56
13283: PUSH
13284: LD_INT 63
13286: PUSH
13287: LD_INT 64
13289: PUSH
13290: LD_INT 65
13292: PUSH
13293: LD_INT 30
13295: PUSH
13296: LD_INT 31
13298: PUSH
13299: LD_INT 21
13301: PUSH
13302: LD_INT 22
13304: PUSH
13305: LD_INT 25
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: LIST
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: LIST
13324: LIST
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13342: LD_ADDR_VAR 0 5
13346: PUSH
13347: DOUBLE
13348: LD_INT 1
13350: DEC
13351: ST_TO_ADDR
13352: LD_VAR 0 8
13356: PUSH
13357: FOR_TO
13358: IFFALSE 13434
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13360: LD_VAR 0 8
13364: PUSH
13365: LD_VAR 0 5
13369: ARRAY
13370: PPUSH
13371: LD_VAR 0 1
13375: PPUSH
13376: CALL_OW 321
13380: PUSH
13381: LD_INT 1
13383: EQUAL
13384: PUSH
13385: LD_VAR 0 8
13389: PUSH
13390: LD_VAR 0 5
13394: ARRAY
13395: PPUSH
13396: LD_VAR 0 3
13400: PPUSH
13401: CALL_OW 482
13405: PUSH
13406: LD_INT 1
13408: EQUAL
13409: AND
13410: IFFALSE 13432
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13412: LD_VAR 0 2
13416: PPUSH
13417: LD_VAR 0 8
13421: PUSH
13422: LD_VAR 0 5
13426: ARRAY
13427: PPUSH
13428: CALL_OW 184
13432: GO 13357
13434: POP
13435: POP
// end ;
13436: LD_VAR 0 4
13440: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13441: LD_INT 0
13443: PPUSH
13444: PPUSH
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13449: LD_ADDR_VAR 0 8
13453: PUSH
13454: LD_VAR 0 2
13458: PPUSH
13459: CALL_OW 313
13463: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13464: LD_ADDR_VAR 0 9
13468: PUSH
13469: LD_VAR 0 3
13473: PPUSH
13474: LD_INT 22
13476: PUSH
13477: LD_VAR 0 1
13481: PUSH
13482: EMPTY
13483: LIST
13484: LIST
13485: PUSH
13486: LD_INT 25
13488: PUSH
13489: LD_INT 2
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: LD_INT 24
13498: PUSH
13499: LD_INT 750
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: LD_INT 3
13508: PUSH
13509: LD_INT 54
13511: PUSH
13512: EMPTY
13513: LIST
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: PPUSH
13525: CALL_OW 70
13529: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13530: LD_ADDR_VAR 0 6
13534: PUSH
13535: LD_VAR 0 3
13539: PPUSH
13540: LD_INT 22
13542: PUSH
13543: LD_VAR 0 1
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: LD_INT 21
13554: PUSH
13555: LD_INT 3
13557: PUSH
13558: EMPTY
13559: LIST
13560: LIST
13561: PUSH
13562: LD_INT 3
13564: PUSH
13565: LD_INT 24
13567: PUSH
13568: LD_INT 1000
13570: PUSH
13571: EMPTY
13572: LIST
13573: LIST
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: PPUSH
13587: CALL_OW 70
13591: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13592: LD_VAR 0 6
13596: NOT
13597: PUSH
13598: LD_INT 22
13600: PUSH
13601: LD_VAR 0 1
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 25
13612: PUSH
13613: LD_INT 2
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PUSH
13620: LD_INT 24
13622: PUSH
13623: LD_INT 250
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: PPUSH
13635: CALL_OW 69
13639: NOT
13640: AND
13641: IFFALSE 13645
// exit ;
13643: GO 13827
// if buildings_list > 0 and engineerOkInside then
13645: LD_VAR 0 6
13649: PUSH
13650: LD_INT 0
13652: GREATER
13653: PUSH
13654: LD_VAR 0 8
13658: AND
13659: IFFALSE 13670
// ComExitBuilding ( engineerOkInside ) ;
13661: LD_VAR 0 8
13665: PPUSH
13666: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13670: LD_VAR 0 6
13674: PUSH
13675: LD_INT 0
13677: GREATER
13678: PUSH
13679: LD_VAR 0 9
13683: PUSH
13684: LD_INT 0
13686: GREATER
13687: AND
13688: IFFALSE 13708
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13690: LD_VAR 0 9
13694: PPUSH
13695: LD_VAR 0 6
13699: PUSH
13700: LD_INT 1
13702: ARRAY
13703: PPUSH
13704: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13708: LD_VAR 0 6
13712: PUSH
13713: LD_INT 0
13715: EQUAL
13716: PUSH
13717: LD_VAR 0 4
13721: PUSH
13722: LD_INT 0
13724: EQUAL
13725: AND
13726: PUSH
13727: LD_VAR 0 9
13731: PUSH
13732: LD_INT 0
13734: GREATER
13735: AND
13736: IFFALSE 13752
// ComEnterUnit ( engineerOkOutside , building ) ;
13738: LD_VAR 0 9
13742: PPUSH
13743: LD_VAR 0 2
13747: PPUSH
13748: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13752: LD_VAR 0 9
13756: PUSH
13757: LD_INT 0
13759: GREATER
13760: PUSH
13761: LD_VAR 0 6
13765: PUSH
13766: LD_INT 0
13768: EQUAL
13769: AND
13770: PUSH
13771: LD_VAR 0 4
13775: PUSH
13776: LD_INT 0
13778: GREATER
13779: AND
13780: IFFALSE 13827
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13782: LD_VAR 0 9
13786: PPUSH
13787: LD_VAR 0 4
13791: PUSH
13792: LD_INT 1
13794: ARRAY
13795: PPUSH
13796: LD_VAR 0 4
13800: PUSH
13801: LD_INT 2
13803: ARRAY
13804: PPUSH
13805: LD_VAR 0 4
13809: PUSH
13810: LD_INT 3
13812: ARRAY
13813: PPUSH
13814: LD_VAR 0 4
13818: PUSH
13819: LD_INT 4
13821: ARRAY
13822: PPUSH
13823: CALL_OW 145
// end ;
13827: LD_VAR 0 5
13831: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13832: LD_INT 0
13834: PPUSH
13835: PPUSH
13836: PPUSH
13837: PPUSH
13838: PPUSH
13839: PPUSH
13840: PPUSH
13841: PPUSH
13842: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13843: LD_ADDR_VAR 0 6
13847: PUSH
13848: LD_INT 22
13850: PUSH
13851: LD_VAR 0 1
13855: PUSH
13856: EMPTY
13857: LIST
13858: LIST
13859: PUSH
13860: LD_INT 25
13862: PUSH
13863: LD_INT 4
13865: PUSH
13866: EMPTY
13867: LIST
13868: LIST
13869: PUSH
13870: LD_INT 24
13872: PUSH
13873: LD_INT 251
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: PUSH
13880: EMPTY
13881: LIST
13882: LIST
13883: LIST
13884: PPUSH
13885: CALL_OW 69
13889: PUSH
13890: LD_EXP 34
13894: PUSH
13895: EMPTY
13896: LIST
13897: DIFF
13898: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13899: LD_ADDR_VAR 0 7
13903: PUSH
13904: LD_VAR 0 3
13908: PPUSH
13909: LD_INT 22
13911: PUSH
13912: LD_VAR 0 1
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: LD_INT 25
13923: PUSH
13924: LD_INT 4
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PUSH
13931: LD_INT 50
13933: PUSH
13934: EMPTY
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: PPUSH
13942: CALL_OW 70
13946: PUSH
13947: LD_EXP 34
13951: PUSH
13952: EMPTY
13953: LIST
13954: DIFF
13955: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13956: LD_ADDR_VAR 0 10
13960: PUSH
13961: LD_VAR 0 3
13965: PPUSH
13966: LD_INT 22
13968: PUSH
13969: LD_VAR 0 1
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: LD_INT 21
13980: PUSH
13981: LD_INT 1
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 3
13990: PUSH
13991: LD_INT 24
13993: PUSH
13994: LD_INT 750
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: PPUSH
14010: CALL_OW 70
14014: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14015: LD_ADDR_VAR 0 11
14019: PUSH
14020: LD_VAR 0 2
14024: PPUSH
14025: LD_INT 22
14027: PUSH
14028: LD_VAR 0 1
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 21
14039: PUSH
14040: LD_INT 1
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 3
14049: PUSH
14050: LD_INT 24
14052: PUSH
14053: LD_INT 1000
14055: PUSH
14056: EMPTY
14057: LIST
14058: LIST
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: LIST
14068: PPUSH
14069: CALL_OW 70
14073: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
14074: LD_VAR 0 10
14078: PUSH
14079: LD_INT 0
14081: GREATER
14082: PUSH
14083: LD_VAR 0 6
14087: PUSH
14088: LD_INT 0
14090: GREATER
14091: AND
14092: IFFALSE 14108
// ComMoveToArea ( damageUnits , healArea ) ;
14094: LD_VAR 0 10
14098: PPUSH
14099: LD_VAR 0 2
14103: PPUSH
14104: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
14108: LD_VAR 0 11
14112: PUSH
14113: LD_INT 0
14115: GREATER
14116: PUSH
14117: LD_VAR 0 7
14121: PUSH
14122: LD_INT 0
14124: GREATER
14125: AND
14126: IFFALSE 14146
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
14128: LD_VAR 0 7
14132: PPUSH
14133: LD_VAR 0 11
14137: PUSH
14138: LD_INT 1
14140: ARRAY
14141: PPUSH
14142: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
14146: LD_VAR 0 10
14150: PUSH
14151: LD_INT 0
14153: EQUAL
14154: PUSH
14155: LD_VAR 0 11
14159: PUSH
14160: LD_INT 0
14162: EQUAL
14163: AND
14164: PUSH
14165: LD_VAR 0 7
14169: PUSH
14170: LD_INT 0
14172: GREATER
14173: AND
14174: IFFALSE 14279
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
14176: LD_ADDR_VAR 0 12
14180: PUSH
14181: LD_INT 22
14183: PUSH
14184: LD_VAR 0 1
14188: PUSH
14189: EMPTY
14190: LIST
14191: LIST
14192: PUSH
14193: LD_INT 21
14195: PUSH
14196: LD_INT 3
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PUSH
14203: LD_INT 30
14205: PUSH
14206: LD_INT 8
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: LIST
14217: PPUSH
14218: CALL_OW 69
14222: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
14223: LD_ADDR_VAR 0 13
14227: PUSH
14228: LD_INT 1
14230: PPUSH
14231: LD_VAR 0 12
14235: PPUSH
14236: CALL_OW 12
14240: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14241: LD_VAR 0 7
14245: PPUSH
14246: LD_INT 3
14248: PUSH
14249: LD_INT 60
14251: PUSH
14252: EMPTY
14253: LIST
14254: PUSH
14255: EMPTY
14256: LIST
14257: LIST
14258: PPUSH
14259: CALL_OW 72
14263: PPUSH
14264: LD_VAR 0 12
14268: PUSH
14269: LD_VAR 0 13
14273: ARRAY
14274: PPUSH
14275: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
14279: LD_VAR 0 3
14283: PPUSH
14284: LD_INT 22
14286: PUSH
14287: LD_VAR 0 1
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: PUSH
14296: LD_INT 25
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: PUSH
14306: LD_INT 24
14308: PUSH
14309: LD_INT 751
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: LIST
14320: PPUSH
14321: CALL_OW 70
14325: PUSH
14326: LD_INT 0
14328: GREATER
14329: PUSH
14330: LD_INT 21
14332: PPUSH
14333: CALL_OW 302
14337: AND
14338: PUSH
14339: LD_INT 21
14341: PPUSH
14342: CALL_OW 255
14346: PUSH
14347: LD_INT 3
14349: EQUAL
14350: AND
14351: IFFALSE 14407
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14353: LD_VAR 0 3
14357: PPUSH
14358: LD_INT 22
14360: PUSH
14361: LD_VAR 0 1
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: LD_INT 25
14372: PUSH
14373: LD_INT 3
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PUSH
14380: LD_INT 24
14382: PUSH
14383: LD_INT 751
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: EMPTY
14391: LIST
14392: LIST
14393: LIST
14394: PPUSH
14395: CALL_OW 70
14399: PPUSH
14400: LD_INT 21
14402: PPUSH
14403: CALL_OW 120
// end ;
14407: LD_VAR 0 5
14411: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14412: LD_INT 0
14414: PPUSH
14415: PPUSH
14416: PPUSH
14417: PPUSH
14418: PPUSH
14419: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14420: LD_ADDR_VAR 0 7
14424: PUSH
14425: LD_VAR 0 2
14429: PPUSH
14430: LD_INT 22
14432: PUSH
14433: LD_VAR 0 1
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PUSH
14442: LD_INT 21
14444: PUSH
14445: LD_INT 2
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: PUSH
14452: LD_INT 34
14454: PUSH
14455: LD_INT 52
14457: PUSH
14458: EMPTY
14459: LIST
14460: LIST
14461: PUSH
14462: EMPTY
14463: LIST
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 70
14471: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14472: LD_ADDR_VAR 0 8
14476: PUSH
14477: LD_VAR 0 2
14481: PPUSH
14482: LD_INT 22
14484: PUSH
14485: LD_VAR 0 1
14489: PUSH
14490: EMPTY
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 21
14496: PUSH
14497: LD_INT 3
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: PUSH
14504: LD_INT 3
14506: PUSH
14507: LD_INT 24
14509: PUSH
14510: LD_INT 1000
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PUSH
14521: EMPTY
14522: LIST
14523: LIST
14524: LIST
14525: PUSH
14526: EMPTY
14527: LIST
14528: PPUSH
14529: CALL_OW 70
14533: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14534: LD_VAR 0 8
14538: PUSH
14539: LD_INT 0
14541: GREATER
14542: PUSH
14543: LD_VAR 0 7
14547: PPUSH
14548: LD_INT 24
14550: PUSH
14551: LD_INT 750
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PPUSH
14558: CALL_OW 72
14562: PUSH
14563: LD_INT 0
14565: GREATER
14566: AND
14567: IFFALSE 14587
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14569: LD_VAR 0 7
14573: PPUSH
14574: LD_VAR 0 8
14578: PUSH
14579: LD_INT 1
14581: ARRAY
14582: PPUSH
14583: CALL_OW 130
// end ;
14587: LD_VAR 0 3
14591: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14592: LD_INT 0
14594: PPUSH
14595: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14596: LD_INT 22
14598: PUSH
14599: LD_VAR 0 1
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 21
14610: PUSH
14611: LD_INT 2
14613: PUSH
14614: EMPTY
14615: LIST
14616: LIST
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PPUSH
14622: CALL_OW 69
14626: PUSH
14627: LD_INT 18
14629: PPUSH
14630: LD_INT 22
14632: PUSH
14633: LD_VAR 0 1
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 21
14644: PUSH
14645: LD_INT 2
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: PPUSH
14656: CALL_OW 70
14660: PUSH
14661: LD_VAR 0 3
14665: LESSEQUAL
14666: DIFF
14667: IFFALSE 14734
// for i = 1 to vehCount do
14669: LD_ADDR_VAR 0 9
14673: PUSH
14674: DOUBLE
14675: LD_INT 1
14677: DEC
14678: ST_TO_ADDR
14679: LD_VAR 0 3
14683: PUSH
14684: FOR_TO
14685: IFFALSE 14732
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14687: LD_VAR 0 2
14691: PPUSH
14692: LD_VAR 0 7
14696: PPUSH
14697: LD_VAR 0 5
14701: PPUSH
14702: LD_VAR 0 6
14706: PPUSH
14707: LD_VAR 0 4
14711: PUSH
14712: LD_INT 1
14714: PPUSH
14715: LD_VAR 0 4
14719: PPUSH
14720: CALL_OW 12
14724: ARRAY
14725: PPUSH
14726: CALL_OW 185
14730: GO 14684
14732: POP
14733: POP
// end ;
14734: LD_VAR 0 8
14738: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14739: LD_INT 0
14741: PPUSH
14742: PPUSH
14743: PPUSH
14744: PPUSH
14745: PPUSH
14746: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14747: LD_ADDR_VAR 0 6
14751: PUSH
14752: LD_INT 22
14754: PUSH
14755: LD_VAR 0 1
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 25
14766: PUSH
14767: LD_INT 9
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PPUSH
14778: CALL_OW 69
14782: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14783: LD_ADDR_VAR 0 7
14787: PUSH
14788: LD_INT 81
14790: PUSH
14791: LD_VAR 0 1
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 3
14802: PUSH
14803: LD_INT 21
14805: PUSH
14806: LD_INT 3
14808: PUSH
14809: EMPTY
14810: LIST
14811: LIST
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PPUSH
14821: CALL_OW 69
14825: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14826: LD_ADDR_VAR 0 4
14830: PUSH
14831: LD_INT 1
14833: PPUSH
14834: LD_INT 3
14836: PPUSH
14837: CALL_OW 12
14841: ST_TO_ADDR
// for i = 1 to list do
14842: LD_ADDR_VAR 0 5
14846: PUSH
14847: DOUBLE
14848: LD_INT 1
14850: DEC
14851: ST_TO_ADDR
14852: LD_VAR 0 6
14856: PUSH
14857: FOR_TO
14858: IFFALSE 15060
// for ta in filter do
14860: LD_ADDR_VAR 0 3
14864: PUSH
14865: LD_VAR 0 7
14869: PUSH
14870: FOR_IN
14871: IFFALSE 15056
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14873: LD_VAR 0 6
14877: PUSH
14878: LD_VAR 0 5
14882: ARRAY
14883: PPUSH
14884: LD_VAR 0 3
14888: PPUSH
14889: CALL_OW 296
14893: PUSH
14894: LD_INT 15
14896: LESSEQUAL
14897: IFFALSE 15054
// begin case c of 1 :
14899: LD_VAR 0 4
14903: PUSH
14904: LD_INT 1
14906: DOUBLE
14907: EQUAL
14908: IFTRUE 14912
14910: GO 14950
14912: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14913: LD_VAR 0 6
14917: PUSH
14918: LD_VAR 0 5
14922: ARRAY
14923: PPUSH
14924: LD_VAR 0 3
14928: PPUSH
14929: CALL_OW 250
14933: PPUSH
14934: LD_VAR 0 3
14938: PPUSH
14939: CALL_OW 251
14943: PPUSH
14944: CALL_OW 154
14948: GO 15054
14950: LD_INT 2
14952: DOUBLE
14953: EQUAL
14954: IFTRUE 14958
14956: GO 15022
14958: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14959: LD_VAR 0 6
14963: PUSH
14964: LD_VAR 0 5
14968: ARRAY
14969: PPUSH
14970: LD_VAR 0 3
14974: PPUSH
14975: CALL_OW 250
14979: PUSH
14980: LD_INT 1
14982: NEG
14983: PPUSH
14984: LD_INT 1
14986: PPUSH
14987: CALL_OW 12
14991: PLUS
14992: PPUSH
14993: LD_VAR 0 3
14997: PPUSH
14998: CALL_OW 251
15002: PUSH
15003: LD_INT 1
15005: NEG
15006: PPUSH
15007: LD_INT 1
15009: PPUSH
15010: CALL_OW 12
15014: PLUS
15015: PPUSH
15016: CALL_OW 153
15020: GO 15054
15022: LD_INT 3
15024: DOUBLE
15025: EQUAL
15026: IFTRUE 15030
15028: GO 15053
15030: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15031: LD_VAR 0 6
15035: PUSH
15036: LD_VAR 0 5
15040: ARRAY
15041: PPUSH
15042: LD_VAR 0 3
15046: PPUSH
15047: CALL_OW 115
15051: GO 15054
15053: POP
// end ; end ;
15054: GO 14870
15056: POP
15057: POP
15058: GO 14857
15060: POP
15061: POP
// end ;
15062: LD_VAR 0 2
15066: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15067: LD_INT 0
15069: PPUSH
15070: PPUSH
15071: PPUSH
15072: PPUSH
// r := 100 ;
15073: LD_ADDR_VAR 0 5
15077: PUSH
15078: LD_INT 100
15080: ST_TO_ADDR
// x := 0 ;
15081: LD_ADDR_VAR 0 6
15085: PUSH
15086: LD_INT 0
15088: ST_TO_ADDR
// while ( x < n ) do
15089: LD_VAR 0 6
15093: PUSH
15094: LD_VAR 0 2
15098: LESS
15099: IFFALSE 15386
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15101: LD_ADDR_VAR 0 4
15105: PUSH
15106: DOUBLE
15107: LD_INT 1
15109: DEC
15110: ST_TO_ADDR
15111: LD_VAR 0 1
15115: PPUSH
15116: LD_INT 0
15118: PPUSH
15119: CALL_OW 517
15123: PUSH
15124: LD_INT 1
15126: ARRAY
15127: PUSH
15128: FOR_TO
15129: IFFALSE 15382
// begin if r > 50 then
15131: LD_VAR 0 5
15135: PUSH
15136: LD_INT 50
15138: GREATER
15139: IFFALSE 15358
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15141: LD_VAR 0 1
15145: PPUSH
15146: LD_INT 0
15148: PPUSH
15149: CALL_OW 517
15153: PUSH
15154: LD_INT 1
15156: ARRAY
15157: PUSH
15158: LD_VAR 0 4
15162: ARRAY
15163: PPUSH
15164: LD_VAR 0 1
15168: PPUSH
15169: LD_INT 0
15171: PPUSH
15172: CALL_OW 517
15176: PUSH
15177: LD_INT 2
15179: ARRAY
15180: PUSH
15181: LD_VAR 0 4
15185: ARRAY
15186: PPUSH
15187: CALL_OW 458
15191: NOT
15192: IFFALSE 15342
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15194: LD_VAR 0 1
15198: PPUSH
15199: LD_INT 0
15201: PPUSH
15202: CALL_OW 517
15206: PUSH
15207: LD_INT 1
15209: ARRAY
15210: PUSH
15211: LD_VAR 0 4
15215: ARRAY
15216: PPUSH
15217: LD_VAR 0 1
15221: PPUSH
15222: LD_INT 0
15224: PPUSH
15225: CALL_OW 517
15229: PUSH
15230: LD_INT 2
15232: ARRAY
15233: PUSH
15234: LD_VAR 0 4
15238: ARRAY
15239: PPUSH
15240: LD_INT 8
15242: PPUSH
15243: LD_INT 0
15245: PPUSH
15246: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15250: LD_ADDR_EXP 44
15254: PUSH
15255: LD_EXP 44
15259: PPUSH
15260: LD_INT 1
15262: PPUSH
15263: LD_VAR 0 1
15267: PPUSH
15268: LD_INT 0
15270: PPUSH
15271: CALL_OW 517
15275: PUSH
15276: LD_INT 1
15278: ARRAY
15279: PUSH
15280: LD_VAR 0 4
15284: ARRAY
15285: PUSH
15286: LD_VAR 0 1
15290: PPUSH
15291: LD_INT 0
15293: PPUSH
15294: CALL_OW 517
15298: PUSH
15299: LD_INT 2
15301: ARRAY
15302: PUSH
15303: LD_VAR 0 4
15307: ARRAY
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PPUSH
15313: CALL_OW 2
15317: ST_TO_ADDR
// r := 0 ;
15318: LD_ADDR_VAR 0 5
15322: PUSH
15323: LD_INT 0
15325: ST_TO_ADDR
// x := x + 1 ;
15326: LD_ADDR_VAR 0 6
15330: PUSH
15331: LD_VAR 0 6
15335: PUSH
15336: LD_INT 1
15338: PLUS
15339: ST_TO_ADDR
// end else
15340: GO 15356
// r := r + 35 ;
15342: LD_ADDR_VAR 0 5
15346: PUSH
15347: LD_VAR 0 5
15351: PUSH
15352: LD_INT 35
15354: PLUS
15355: ST_TO_ADDR
// end else
15356: GO 15380
// r := r + rand ( 10 , 25 ) ;
15358: LD_ADDR_VAR 0 5
15362: PUSH
15363: LD_VAR 0 5
15367: PUSH
15368: LD_INT 10
15370: PPUSH
15371: LD_INT 25
15373: PPUSH
15374: CALL_OW 12
15378: PLUS
15379: ST_TO_ADDR
// end ;
15380: GO 15128
15382: POP
15383: POP
15384: GO 15089
// end ;
15386: LD_VAR 0 3
15390: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15391: LD_INT 0
15393: PPUSH
15394: PPUSH
15395: PPUSH
15396: PPUSH
// tmpTab = [ ] ;
15397: LD_ADDR_VAR 0 6
15401: PUSH
15402: EMPTY
15403: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15404: LD_INT 22
15406: PUSH
15407: LD_VAR 0 1
15411: PUSH
15412: EMPTY
15413: LIST
15414: LIST
15415: PUSH
15416: LD_INT 30
15418: PUSH
15419: LD_INT 32
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: PPUSH
15430: CALL_OW 69
15434: PUSH
15435: LD_INT 0
15437: GREATER
15438: IFFALSE 15521
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15440: LD_ADDR_VAR 0 4
15444: PUSH
15445: LD_INT 22
15447: PUSH
15448: LD_VAR 0 1
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 30
15459: PUSH
15460: LD_INT 32
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: PPUSH
15471: CALL_OW 69
15475: PUSH
15476: FOR_IN
15477: IFFALSE 15519
// begin for j in UnitsInside ( i ) do
15479: LD_ADDR_VAR 0 5
15483: PUSH
15484: LD_VAR 0 4
15488: PPUSH
15489: CALL_OW 313
15493: PUSH
15494: FOR_IN
15495: IFFALSE 15515
// tmpTab = tmpTab ^ j ;
15497: LD_ADDR_VAR 0 6
15501: PUSH
15502: LD_VAR 0 6
15506: PUSH
15507: LD_VAR 0 5
15511: ADD
15512: ST_TO_ADDR
15513: GO 15494
15515: POP
15516: POP
// end ;
15517: GO 15476
15519: POP
15520: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15521: LD_VAR 0 6
15525: PPUSH
15526: LD_VAR 0 2
15530: PPUSH
15531: CALL_OW 250
15535: PPUSH
15536: LD_VAR 0 2
15540: PPUSH
15541: CALL_OW 251
15545: PPUSH
15546: CALL_OW 114
// end ;
15550: LD_VAR 0 3
15554: RET
// export function CreateNature ; var i , un ; begin
15555: LD_INT 0
15557: PPUSH
15558: PPUSH
15559: PPUSH
// uc_side := 0 ;
15560: LD_ADDR_OWVAR 20
15564: PUSH
15565: LD_INT 0
15567: ST_TO_ADDR
// uc_nation := 0 ;
15568: LD_ADDR_OWVAR 21
15572: PUSH
15573: LD_INT 0
15575: ST_TO_ADDR
// InitHc ;
15576: CALL_OW 19
// hc_class := class_fish ;
15580: LD_ADDR_OWVAR 28
15584: PUSH
15585: LD_INT 20
15587: ST_TO_ADDR
// for i = 1 to 6 do
15588: LD_ADDR_VAR 0 2
15592: PUSH
15593: DOUBLE
15594: LD_INT 1
15596: DEC
15597: ST_TO_ADDR
15598: LD_INT 6
15600: PUSH
15601: FOR_TO
15602: IFFALSE 15621
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15604: CALL_OW 44
15608: PPUSH
15609: LD_INT 23
15611: PPUSH
15612: LD_INT 0
15614: PPUSH
15615: CALL_OW 49
15619: GO 15601
15621: POP
15622: POP
// for i = 1 to Difficulty + 2 do
15623: LD_ADDR_VAR 0 2
15627: PUSH
15628: DOUBLE
15629: LD_INT 1
15631: DEC
15632: ST_TO_ADDR
15633: LD_OWVAR 67
15637: PUSH
15638: LD_INT 2
15640: PLUS
15641: PUSH
15642: FOR_TO
15643: IFFALSE 15752
// begin hc_sex = sex_male ;
15645: LD_ADDR_OWVAR 27
15649: PUSH
15650: LD_INT 1
15652: ST_TO_ADDR
// uc_side = 0 ;
15653: LD_ADDR_OWVAR 20
15657: PUSH
15658: LD_INT 0
15660: ST_TO_ADDR
// uc_nation = nation_nature ;
15661: LD_ADDR_OWVAR 21
15665: PUSH
15666: LD_INT 0
15668: ST_TO_ADDR
// hc_class = class_tiger ;
15669: LD_ADDR_OWVAR 28
15673: PUSH
15674: LD_INT 14
15676: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15677: LD_ADDR_OWVAR 31
15681: PUSH
15682: LD_EXP 37
15686: PUSH
15687: LD_INT 0
15689: PUSH
15690: LD_INT 0
15692: PUSH
15693: LD_INT 0
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15702: LD_ADDR_OWVAR 35
15706: PUSH
15707: LD_INT 5
15709: NEG
15710: PPUSH
15711: LD_INT 5
15713: PPUSH
15714: CALL_OW 12
15718: PUSH
15719: LD_OWVAR 67
15723: MUL
15724: ST_TO_ADDR
// un = CreateHuman ;
15725: LD_ADDR_VAR 0 3
15729: PUSH
15730: CALL_OW 44
15734: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15735: LD_VAR 0 3
15739: PPUSH
15740: LD_INT 24
15742: PPUSH
15743: LD_INT 0
15745: PPUSH
15746: CALL_OW 49
// end ;
15750: GO 15642
15752: POP
15753: POP
// for i = 1 to rand ( 3 , 4 ) do
15754: LD_ADDR_VAR 0 2
15758: PUSH
15759: DOUBLE
15760: LD_INT 1
15762: DEC
15763: ST_TO_ADDR
15764: LD_INT 3
15766: PPUSH
15767: LD_INT 4
15769: PPUSH
15770: CALL_OW 12
15774: PUSH
15775: FOR_TO
15776: IFFALSE 15868
// begin hc_sex = sex_male ;
15778: LD_ADDR_OWVAR 27
15782: PUSH
15783: LD_INT 1
15785: ST_TO_ADDR
// uc_side = 0 ;
15786: LD_ADDR_OWVAR 20
15790: PUSH
15791: LD_INT 0
15793: ST_TO_ADDR
// uc_nation = nation_nature ;
15794: LD_ADDR_OWVAR 21
15798: PUSH
15799: LD_INT 0
15801: ST_TO_ADDR
// hc_class = 18 ;
15802: LD_ADDR_OWVAR 28
15806: PUSH
15807: LD_INT 18
15809: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15810: LD_ADDR_OWVAR 31
15814: PUSH
15815: LD_INT 0
15817: PUSH
15818: LD_INT 0
15820: PUSH
15821: LD_INT 0
15823: PUSH
15824: LD_INT 0
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: LIST
15831: LIST
15832: ST_TO_ADDR
// hc_agressivity = 0 ;
15833: LD_ADDR_OWVAR 35
15837: PUSH
15838: LD_INT 0
15840: ST_TO_ADDR
// un = CreateHuman ;
15841: LD_ADDR_VAR 0 3
15845: PUSH
15846: CALL_OW 44
15850: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15851: LD_VAR 0 3
15855: PPUSH
15856: LD_INT 24
15858: PPUSH
15859: LD_INT 0
15861: PPUSH
15862: CALL_OW 49
// end ;
15866: GO 15775
15868: POP
15869: POP
// for i = 1 to rand ( 1 , 3 ) do
15870: LD_ADDR_VAR 0 2
15874: PUSH
15875: DOUBLE
15876: LD_INT 1
15878: DEC
15879: ST_TO_ADDR
15880: LD_INT 1
15882: PPUSH
15883: LD_INT 3
15885: PPUSH
15886: CALL_OW 12
15890: PUSH
15891: FOR_TO
15892: IFFALSE 16040
// begin hc_sex = sex_male ;
15894: LD_ADDR_OWVAR 27
15898: PUSH
15899: LD_INT 1
15901: ST_TO_ADDR
// uc_side = 0 ;
15902: LD_ADDR_OWVAR 20
15906: PUSH
15907: LD_INT 0
15909: ST_TO_ADDR
// uc_nation = nation_nature ;
15910: LD_ADDR_OWVAR 21
15914: PUSH
15915: LD_INT 0
15917: ST_TO_ADDR
// hc_class = class_apeman ;
15918: LD_ADDR_OWVAR 28
15922: PUSH
15923: LD_INT 12
15925: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
15926: LD_ADDR_OWVAR 31
15930: PUSH
15931: LD_EXP 36
15935: PPUSH
15936: LD_EXP 37
15940: PPUSH
15941: CALL_OW 12
15945: PUSH
15946: LD_EXP 36
15950: PPUSH
15951: LD_EXP 37
15955: PPUSH
15956: CALL_OW 12
15960: PUSH
15961: LD_EXP 36
15965: PPUSH
15966: LD_EXP 37
15970: PPUSH
15971: CALL_OW 12
15975: PUSH
15976: LD_EXP 36
15980: PPUSH
15981: LD_EXP 37
15985: PPUSH
15986: CALL_OW 12
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
15997: LD_ADDR_OWVAR 35
16001: PUSH
16002: LD_INT 1
16004: PPUSH
16005: LD_INT 20
16007: PPUSH
16008: CALL_OW 12
16012: ST_TO_ADDR
// un = CreateHuman ;
16013: LD_ADDR_VAR 0 3
16017: PUSH
16018: CALL_OW 44
16022: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16023: LD_VAR 0 3
16027: PPUSH
16028: LD_INT 24
16030: PPUSH
16031: LD_INT 0
16033: PPUSH
16034: CALL_OW 49
// end ;
16038: GO 15891
16040: POP
16041: POP
// end ; end_of_file
16042: LD_VAR 0 1
16046: RET
// on UnitDestroyed ( unit ) do var i ;
16047: LD_INT 0
16049: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
16050: LD_VAR 0 1
16054: PPUSH
16055: CALL 33962 0 1
// if unit = JMM then
16059: LD_VAR 0 1
16063: PUSH
16064: LD_EXP 1
16068: EQUAL
16069: IFFALSE 16078
// YouLost ( JMM ) ;
16071: LD_STRING JMM
16073: PPUSH
16074: CALL_OW 104
// if unit in russianTanks then
16078: LD_VAR 0 1
16082: PUSH
16083: LD_EXP 39
16087: IN
16088: IFFALSE 16106
// russianTanks := russianTanks diff unit ;
16090: LD_ADDR_EXP 39
16094: PUSH
16095: LD_EXP 39
16099: PUSH
16100: LD_VAR 0 1
16104: DIFF
16105: ST_TO_ADDR
// if unit in russianTimeLapsers then
16106: LD_VAR 0 1
16110: PUSH
16111: LD_EXP 40
16115: IN
16116: IFFALSE 16134
// russianTimeLapsers := russianTimeLapsers diff unit ;
16118: LD_ADDR_EXP 40
16122: PUSH
16123: LD_EXP 40
16127: PUSH
16128: LD_VAR 0 1
16132: DIFF
16133: ST_TO_ADDR
// if unit in RuScientists then
16134: LD_VAR 0 1
16138: PUSH
16139: LD_EXP 34
16143: IN
16144: IFFALSE 16176
// begin RuScientists := RuScientists diff unit ;
16146: LD_ADDR_EXP 34
16150: PUSH
16151: LD_EXP 34
16155: PUSH
16156: LD_VAR 0 1
16160: DIFF
16161: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
16162: LD_ADDR_EXP 35
16166: PUSH
16167: LD_EXP 35
16171: PUSH
16172: LD_INT 1
16174: PLUS
16175: ST_TO_ADDR
// end ; end ;
16176: PPOPN 2
16178: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16179: LD_VAR 0 3
16183: PPUSH
16184: CALL_OW 264
16188: PUSH
16189: LD_INT 9
16191: EQUAL
16192: IFFALSE 16208
// laserCounterDestroy := laserCounterDestroy + 1 ;
16194: LD_ADDR_EXP 50
16198: PUSH
16199: LD_EXP 50
16203: PUSH
16204: LD_INT 1
16206: PLUS
16207: ST_TO_ADDR
// end ;
16208: PPOPN 3
16210: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
16211: LD_VAR 0 2
16215: PUSH
16216: LD_INT 22
16218: PUSH
16219: LD_INT 6
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PPUSH
16226: CALL_OW 69
16230: IN
16231: IFFALSE 16286
// begin if GetType ( human ) = unit_vehicle then
16233: LD_VAR 0 2
16237: PPUSH
16238: CALL_OW 247
16242: PUSH
16243: LD_INT 2
16245: EQUAL
16246: IFFALSE 16263
// human := IsDrivenBy ( human ) ;
16248: LD_ADDR_VAR 0 2
16252: PUSH
16253: LD_VAR 0 2
16257: PPUSH
16258: CALL_OW 311
16262: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
16263: LD_VAR 0 2
16267: PPUSH
16268: LD_VAR 0 2
16272: PPUSH
16273: CALL_OW 110
16277: PUSH
16278: LD_INT 10
16280: PLUS
16281: PPUSH
16282: CALL_OW 109
// end ; if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16286: LD_VAR 0 1
16290: PUSH
16291: LD_INT 10
16293: EQUAL
16294: PUSH
16295: LD_VAR 0 2
16299: PPUSH
16300: CALL_OW 255
16304: PUSH
16305: LD_INT 1
16307: EQUAL
16308: AND
16309: PUSH
16310: LD_EXP 47
16314: PUSH
16315: LD_INT 0
16317: EQUAL
16318: AND
16319: IFFALSE 16431
// begin eventVar1 = 1 ;
16321: LD_ADDR_EXP 47
16325: PUSH
16326: LD_INT 1
16328: ST_TO_ADDR
// teleportExplored = 1 ;
16329: LD_ADDR_EXP 33
16333: PUSH
16334: LD_INT 1
16336: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16337: LD_STRING M2a
16339: PPUSH
16340: CALL_OW 337
// wait ( 0 0$2 ) ;
16344: LD_INT 70
16346: PPUSH
16347: CALL_OW 67
// DialogueOn ;
16351: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16355: LD_INT 22
16357: PUSH
16358: LD_INT 1
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: PUSH
16365: LD_INT 21
16367: PUSH
16368: LD_INT 1
16370: PUSH
16371: EMPTY
16372: LIST
16373: LIST
16374: PUSH
16375: EMPTY
16376: LIST
16377: LIST
16378: PPUSH
16379: CALL_OW 69
16383: PPUSH
16384: LD_STRING DT3a-Sol1-1
16386: PPUSH
16387: LD_STRING DT3a-FSol1-1
16389: PPUSH
16390: CALL 12584 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16394: LD_EXP 1
16398: PPUSH
16399: LD_STRING DT3a-JMM-1
16401: PPUSH
16402: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16406: LD_VAR 0 2
16410: PPUSH
16411: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16415: LD_EXP 1
16419: PPUSH
16420: LD_STRING DT3a-JMM-1a
16422: PPUSH
16423: CALL_OW 88
// DialogueOff ;
16427: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16431: LD_VAR 0 1
16435: PUSH
16436: LD_INT 10
16438: EQUAL
16439: PUSH
16440: LD_VAR 0 2
16444: PPUSH
16445: CALL_OW 247
16449: PUSH
16450: LD_INT 2
16452: EQUAL
16453: AND
16454: PUSH
16455: LD_VAR 0 2
16459: PPUSH
16460: CALL_OW 255
16464: PUSH
16465: LD_INT 3
16467: EQUAL
16468: AND
16469: IFFALSE 16535
// begin if vehicleTeleported = 0 then
16471: LD_EXP 28
16475: PUSH
16476: LD_INT 0
16478: EQUAL
16479: IFFALSE 16496
// begin wait ( 0 0$3 ) ;
16481: LD_INT 105
16483: PPUSH
16484: CALL_OW 67
// vehicleTeleported := 1 ;
16488: LD_ADDR_EXP 28
16492: PUSH
16493: LD_INT 1
16495: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
16496: LD_EXP 28
16500: PUSH
16501: LD_INT 2
16503: EQUAL
16504: IFFALSE 16521
// begin wait ( 0 0$3 ) ;
16506: LD_INT 105
16508: PPUSH
16509: CALL_OW 67
// vehicleTeleported := 3 ;
16513: LD_ADDR_EXP 28
16517: PUSH
16518: LD_INT 3
16520: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16521: LD_ADDR_EXP 29
16525: PUSH
16526: LD_EXP 29
16530: PUSH
16531: LD_INT 1
16533: PLUS
16534: ST_TO_ADDR
// end ; end ;
16535: PPOPN 2
16537: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16538: LD_VAR 0 1
16542: PPUSH
16543: LD_VAR 0 2
16547: PPUSH
16548: CALL 34084 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16552: LD_VAR 0 1
16556: PPUSH
16557: CALL_OW 264
16561: PUSH
16562: LD_INT 7
16564: EQUAL
16565: IFFALSE 16575
// rocketBuilded := true ;
16567: LD_ADDR_EXP 51
16571: PUSH
16572: LD_INT 1
16574: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16575: LD_VAR 0 1
16579: PPUSH
16580: CALL_OW 255
16584: PUSH
16585: LD_INT 3
16587: NONEQUAL
16588: IFFALSE 16592
// exit ;
16590: GO 16711
// if factory in [ ru_fact , rufab2 ] then
16592: LD_VAR 0 2
16596: PUSH
16597: LD_INT 21
16599: PUSH
16600: LD_INT 112
16602: PUSH
16603: EMPTY
16604: LIST
16605: LIST
16606: IN
16607: IFFALSE 16711
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16609: LD_VAR 0 1
16613: PPUSH
16614: CALL_OW 264
16618: PUSH
16619: LD_INT 49
16621: EQUAL
16622: IFFALSE 16658
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16624: LD_ADDR_EXP 40
16628: PUSH
16629: LD_EXP 40
16633: PPUSH
16634: LD_VAR 0 1
16638: PPUSH
16639: CALL 75283 0 2
16643: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16644: LD_VAR 0 1
16648: PPUSH
16649: LD_INT 137
16651: PPUSH
16652: CALL_OW 120
// end else
16656: GO 16711
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16658: LD_VAR 0 1
16662: PPUSH
16663: CALL_OW 264
16667: PUSH
16668: LD_INT 51
16670: PUSH
16671: LD_EXP 53
16675: PUSH
16676: LD_INT 52
16678: PUSH
16679: LD_INT 53
16681: PUSH
16682: EMPTY
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: IN
16688: NOT
16689: IFFALSE 16711
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16691: LD_ADDR_EXP 39
16695: PUSH
16696: LD_EXP 39
16700: PPUSH
16701: LD_VAR 0 1
16705: PPUSH
16706: CALL 75283 0 2
16710: ST_TO_ADDR
// end ; end ; end ;
16711: PPOPN 2
16713: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16714: LD_INT 0
16716: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16717: LD_VAR 0 2
16721: PPUSH
16722: CALL_OW 255
16726: PUSH
16727: LD_INT 3
16729: EQUAL
16730: PUSH
16731: LD_VAR 0 2
16735: PPUSH
16736: CALL_OW 257
16740: PUSH
16741: LD_INT 3
16743: EQUAL
16744: AND
16745: PUSH
16746: LD_INT 21
16748: PPUSH
16749: CALL_OW 255
16753: PUSH
16754: LD_INT 3
16756: EQUAL
16757: AND
16758: PUSH
16759: LD_INT 21
16761: PPUSH
16762: CALL_OW 302
16766: AND
16767: IFFALSE 16781
// ComEnterUnit ( human , ru_fact ) ;
16769: LD_VAR 0 2
16773: PPUSH
16774: LD_INT 21
16776: PPUSH
16777: CALL_OW 120
// end ;
16781: PPOPN 3
16783: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16784: LD_VAR 0 1
16788: PPUSH
16789: CALL 34068 0 1
// end ; end_of_file
16793: PPOPN 1
16795: END
// every 0 0$1 trigger ruAI = 1 do
16796: LD_EXP 41
16800: PUSH
16801: LD_INT 1
16803: EQUAL
16804: IFFALSE 16916
16806: GO 16808
16808: DISABLE
// begin enable ;
16809: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16810: LD_INT 3
16812: PPUSH
16813: LD_INT 6
16815: PPUSH
16816: LD_INT 9
16818: PPUSH
16819: LD_EXP 38
16823: PPUSH
16824: CALL 13441 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16828: LD_INT 3
16830: PPUSH
16831: LD_INT 4
16833: PPUSH
16834: LD_INT 10
16836: PPUSH
16837: LD_EXP 38
16841: PPUSH
16842: CALL 13441 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16846: LD_INT 3
16848: PPUSH
16849: LD_INT 9
16851: PPUSH
16852: CALL 14412 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16856: LD_INT 3
16858: PPUSH
16859: LD_INT 10
16861: PPUSH
16862: CALL 14412 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16866: LD_INT 3
16868: PPUSH
16869: LD_INT 16
16871: PPUSH
16872: LD_INT 9
16874: PPUSH
16875: LD_INT 91
16877: PPUSH
16878: CALL 13832 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16882: LD_INT 3
16884: PPUSH
16885: LD_INT 17
16887: PPUSH
16888: LD_INT 10
16890: PPUSH
16891: LD_INT 47
16893: PUSH
16894: LD_INT 129
16896: PUSH
16897: LD_INT 135
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: LIST
16904: PPUSH
16905: CALL 13832 0 4
// IntBazooka ( 3 ) ;
16909: LD_INT 3
16911: PPUSH
16912: CALL 14739 0 1
// end ;
16916: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 4 , 5 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
16917: LD_EXP 39
16921: PUSH
16922: LD_INT 3
16924: PUSH
16925: LD_INT 4
16927: PUSH
16928: LD_INT 4
16930: PUSH
16931: LD_INT 5
16933: PUSH
16934: EMPTY
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: PUSH
16940: LD_OWVAR 67
16944: ARRAY
16945: GREATEREQUAL
16946: IFFALSE 17446
16948: GO 16950
16950: DISABLE
16951: LD_INT 0
16953: PPUSH
16954: PPUSH
16955: PPUSH
16956: PPUSH
// begin enable ;
16957: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16958: LD_ADDR_VAR 0 2
16962: PUSH
16963: LD_EXP 39
16967: PUSH
16968: LD_EXP 40
16972: UNION
16973: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16974: LD_ADDR_EXP 39
16978: PUSH
16979: LD_EXP 39
16983: PUSH
16984: LD_VAR 0 2
16988: DIFF
16989: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16990: LD_ADDR_EXP 40
16994: PUSH
16995: LD_EXP 40
16999: PUSH
17000: LD_VAR 0 2
17004: DIFF
17005: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
17006: LD_INT 10
17008: PPUSH
17009: CALL_OW 302
17013: IFFALSE 17096
// begin for j in tmp do
17015: LD_ADDR_VAR 0 1
17019: PUSH
17020: LD_VAR 0 2
17024: PUSH
17025: FOR_IN
17026: IFFALSE 17069
// if attackTactic < 2 then
17028: LD_EXP 43
17032: PUSH
17033: LD_INT 2
17035: LESS
17036: IFFALSE 17052
// ComEnterUnit ( j , ruteleprt ) else
17038: LD_VAR 0 1
17042: PPUSH
17043: LD_INT 10
17045: PPUSH
17046: CALL_OW 120
17050: GO 17067
// ComMoveXY ( j , 88 , 69 ) ;
17052: LD_VAR 0 1
17056: PPUSH
17057: LD_INT 88
17059: PPUSH
17060: LD_INT 69
17062: PPUSH
17063: CALL_OW 111
17067: GO 17025
17069: POP
17070: POP
// repeat wait ( 0 0$1 ) ;
17071: LD_INT 35
17073: PPUSH
17074: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
17078: LD_VAR 0 2
17082: PPUSH
17083: LD_INT 60
17085: PUSH
17086: EMPTY
17087: LIST
17088: PPUSH
17089: CALL_OW 72
17093: NOT
17094: IFFALSE 17071
// end ; repeat wait ( 0 0$1 ) ;
17096: LD_INT 35
17098: PPUSH
17099: CALL_OW 67
// for j in tmp do
17103: LD_ADDR_VAR 0 1
17107: PUSH
17108: LD_VAR 0 2
17112: PUSH
17113: FOR_IN
17114: IFFALSE 17437
// begin if IsDead ( j ) then
17116: LD_VAR 0 1
17120: PPUSH
17121: CALL_OW 301
17125: IFFALSE 17143
// tmp := tmp diff j ;
17127: LD_ADDR_VAR 0 2
17131: PUSH
17132: LD_VAR 0 2
17136: PUSH
17137: LD_VAR 0 1
17141: DIFF
17142: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
17143: LD_ADDR_VAR 0 3
17147: PUSH
17148: LD_INT 81
17150: PUSH
17151: LD_INT 3
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PPUSH
17158: CALL_OW 69
17162: PPUSH
17163: LD_VAR 0 1
17167: PPUSH
17168: CALL_OW 74
17172: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
17173: LD_ADDR_VAR 0 4
17177: PUSH
17178: LD_INT 81
17180: PUSH
17181: LD_INT 3
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: LD_INT 21
17190: PUSH
17191: LD_INT 1
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: PUSH
17198: EMPTY
17199: LIST
17200: LIST
17201: PUSH
17202: EMPTY
17203: LIST
17204: PPUSH
17205: CALL_OW 69
17209: PPUSH
17210: LD_VAR 0 1
17214: PPUSH
17215: CALL_OW 74
17219: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
17220: LD_VAR 0 1
17224: PPUSH
17225: CALL_OW 264
17229: PUSH
17230: LD_INT 49
17232: EQUAL
17233: IFFALSE 17369
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
17235: LD_VAR 0 2
17239: PPUSH
17240: LD_INT 3
17242: PUSH
17243: LD_INT 34
17245: PUSH
17246: LD_INT 49
17248: PUSH
17249: EMPTY
17250: LIST
17251: LIST
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PPUSH
17257: CALL_OW 72
17261: PUSH
17262: LD_INT 1
17264: GREATER
17265: PUSH
17266: LD_VAR 0 2
17270: PPUSH
17271: LD_INT 3
17273: PUSH
17274: LD_INT 34
17276: PUSH
17277: LD_INT 49
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PPUSH
17288: CALL_OW 72
17292: AND
17293: IFFALSE 17343
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
17295: LD_VAR 0 1
17299: PPUSH
17300: LD_VAR 0 2
17304: PPUSH
17305: LD_INT 3
17307: PUSH
17308: LD_INT 34
17310: PUSH
17311: LD_INT 49
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: PPUSH
17322: CALL_OW 72
17326: PPUSH
17327: LD_VAR 0 1
17331: PPUSH
17332: CALL_OW 74
17336: PPUSH
17337: CALL_OW 112
17341: GO 17367
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
17343: LD_VAR 0 1
17347: PPUSH
17348: LD_VAR 0 3
17352: PPUSH
17353: LD_VAR 0 1
17357: PPUSH
17358: CALL_OW 74
17362: PPUSH
17363: CALL_OW 112
// end else
17367: GO 17435
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
17369: LD_VAR 0 1
17373: PPUSH
17374: LD_VAR 0 4
17378: PPUSH
17379: CALL_OW 296
17383: PUSH
17384: LD_VAR 0 1
17388: PPUSH
17389: LD_VAR 0 3
17393: PPUSH
17394: CALL_OW 296
17398: PUSH
17399: LD_INT 2
17401: PLUS
17402: LESS
17403: IFFALSE 17421
// ComAttackUnit ( j , target2 ) else
17405: LD_VAR 0 1
17409: PPUSH
17410: LD_VAR 0 4
17414: PPUSH
17415: CALL_OW 115
17419: GO 17435
// ComAttackUnit ( j , target1 ) ;
17421: LD_VAR 0 1
17425: PPUSH
17426: LD_VAR 0 3
17430: PPUSH
17431: CALL_OW 115
// end ; end ;
17435: GO 17113
17437: POP
17438: POP
// until not tmp ;
17439: LD_VAR 0 2
17443: NOT
17444: IFFALSE 17096
// end ;
17446: PPOPN 4
17448: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17449: LD_INT 4
17451: PPUSH
17452: CALL_OW 303
17456: IFFALSE 17471
17458: GO 17460
17460: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17461: LD_INT 3
17463: PPUSH
17464: LD_INT 4
17466: PPUSH
17467: CALL 15391 0 2
17471: END
// every 0 0$1 do
17472: GO 17474
17474: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17475: LD_INT 3
17477: PPUSH
17478: LD_INT 91
17480: PPUSH
17481: LD_INT 3
17483: PPUSH
17484: CALL 13200 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17488: LD_INT 3
17490: PPUSH
17491: LD_INT 47
17493: PPUSH
17494: LD_INT 3
17496: PPUSH
17497: CALL 13200 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17501: LD_INT 3
17503: PPUSH
17504: LD_INT 129
17506: PPUSH
17507: LD_INT 3
17509: PPUSH
17510: CALL 13200 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17514: LD_INT 3
17516: PPUSH
17517: LD_INT 3
17519: PPUSH
17520: LD_INT 3
17522: PPUSH
17523: CALL 13200 0 3
// end ;
17527: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17528: LD_INT 22
17530: PUSH
17531: LD_INT 1
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: PUSH
17538: LD_INT 21
17540: PUSH
17541: LD_INT 3
17543: PUSH
17544: EMPTY
17545: LIST
17546: LIST
17547: PUSH
17548: EMPTY
17549: LIST
17550: LIST
17551: PPUSH
17552: CALL_OW 69
17556: IFFALSE 17625
17558: GO 17560
17560: DISABLE
// begin wait ( 0 0$40 ) ;
17561: LD_INT 1400
17563: PPUSH
17564: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17568: LD_INT 3
17570: PPUSH
17571: LD_INT 21
17573: PPUSH
17574: LD_INT 3
17576: PUSH
17577: LD_INT 4
17579: PUSH
17580: LD_INT 4
17582: PUSH
17583: LD_INT 5
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: PUSH
17592: LD_OWVAR 67
17596: ARRAY
17597: PPUSH
17598: LD_INT 46
17600: PUSH
17601: LD_INT 45
17603: PUSH
17604: LD_INT 44
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: LIST
17611: PPUSH
17612: LD_INT 3
17614: PPUSH
17615: LD_INT 3
17617: PPUSH
17618: LD_INT 24
17620: PPUSH
17621: CALL 14592 0 7
// end ;
17625: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17626: LD_EXP 27
17630: PUSH
17631: LD_INT 2
17633: EQUAL
17634: PUSH
17635: LD_INT 21
17637: PPUSH
17638: CALL_OW 255
17642: PUSH
17643: LD_INT 3
17645: EQUAL
17646: AND
17647: PUSH
17648: LD_INT 112
17650: PPUSH
17651: CALL_OW 255
17655: PUSH
17656: LD_INT 3
17658: EQUAL
17659: AND
17660: PUSH
17661: LD_INT 21
17663: PPUSH
17664: CALL_OW 302
17668: AND
17669: PUSH
17670: LD_INT 112
17672: PPUSH
17673: CALL_OW 302
17677: AND
17678: PUSH
17679: LD_INT 22
17681: PUSH
17682: LD_INT 3
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: LD_INT 21
17691: PUSH
17692: LD_INT 2
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: PUSH
17699: LD_INT 50
17701: PUSH
17702: EMPTY
17703: LIST
17704: PUSH
17705: LD_INT 3
17707: PUSH
17708: LD_INT 58
17710: PUSH
17711: EMPTY
17712: LIST
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: PPUSH
17724: CALL_OW 69
17728: PUSH
17729: LD_INT 18
17731: PPUSH
17732: LD_INT 22
17734: PUSH
17735: LD_INT 3
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 21
17744: PUSH
17745: LD_INT 2
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PPUSH
17756: CALL_OW 70
17760: PUSH
17761: LD_INT 0
17763: EQUAL
17764: DIFF
17765: AND
17766: IFFALSE 17892
17768: GO 17770
17770: DISABLE
// begin enable ;
17771: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17772: LD_INT 3
17774: PPUSH
17775: LD_INT 21
17777: PPUSH
17778: LD_INT 3
17780: PUSH
17781: LD_INT 4
17783: PUSH
17784: LD_INT 4
17786: PUSH
17787: LD_INT 5
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: LIST
17794: LIST
17795: PUSH
17796: LD_OWVAR 67
17800: ARRAY
17801: PPUSH
17802: LD_INT 46
17804: PUSH
17805: LD_INT 45
17807: PUSH
17808: LD_INT 44
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: LIST
17815: PPUSH
17816: LD_INT 3
17818: PPUSH
17819: LD_INT 3
17821: PPUSH
17822: LD_INT 24
17824: PPUSH
17825: CALL 14592 0 7
// if russianTimeLapsers = 0 then
17829: LD_EXP 40
17833: PUSH
17834: LD_INT 0
17836: EQUAL
17837: IFFALSE 17892
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17839: LD_INT 3
17841: PPUSH
17842: LD_INT 112
17844: PPUSH
17845: LD_INT 1
17847: PUSH
17848: LD_INT 2
17850: PUSH
17851: LD_INT 2
17853: PUSH
17854: LD_INT 2
17856: PUSH
17857: EMPTY
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: PUSH
17863: LD_OWVAR 67
17867: ARRAY
17868: PPUSH
17869: LD_INT 49
17871: PUSH
17872: LD_INT 49
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PPUSH
17879: LD_INT 3
17881: PPUSH
17882: LD_INT 3
17884: PPUSH
17885: LD_INT 24
17887: PPUSH
17888: CALL 14592 0 7
// end ;
17892: END
// every 0 0$1 trigger arabianMines do var i ;
17893: LD_EXP 44
17897: IFFALSE 18018
17899: GO 17901
17901: DISABLE
17902: LD_INT 0
17904: PPUSH
// begin enable ;
17905: ENABLE
// for i in arabianMines do
17906: LD_ADDR_VAR 0 1
17910: PUSH
17911: LD_EXP 44
17915: PUSH
17916: FOR_IN
17917: IFFALSE 18016
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17919: LD_INT 22
17921: PUSH
17922: LD_INT 1
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: PUSH
17929: LD_INT 92
17931: PUSH
17932: LD_VAR 0 1
17936: PUSH
17937: LD_INT 1
17939: ARRAY
17940: PUSH
17941: LD_VAR 0 1
17945: PUSH
17946: LD_INT 2
17948: ARRAY
17949: PUSH
17950: LD_INT 3
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PPUSH
17963: CALL_OW 69
17967: IFFALSE 18014
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17969: LD_VAR 0 1
17973: PUSH
17974: LD_INT 1
17976: ARRAY
17977: PPUSH
17978: LD_VAR 0 1
17982: PUSH
17983: LD_INT 2
17985: ARRAY
17986: PPUSH
17987: LD_INT 5
17989: PPUSH
17990: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17994: LD_ADDR_EXP 44
17998: PUSH
17999: LD_EXP 44
18003: PPUSH
18004: LD_VAR 0 1
18008: PPUSH
18009: CALL_OW 3
18013: ST_TO_ADDR
// end ; end ;
18014: GO 17916
18016: POP
18017: POP
// end ;
18018: PPOPN 1
18020: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 , 8 ] [ Difficulty ] do
18021: LD_EXP 28
18025: PUSH
18026: LD_INT 4
18028: EQUAL
18029: PUSH
18030: LD_EXP 29
18034: PUSH
18035: LD_INT 6
18037: PUSH
18038: LD_INT 8
18040: PUSH
18041: LD_INT 8
18043: PUSH
18044: LD_INT 8
18046: PUSH
18047: EMPTY
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: PUSH
18053: LD_OWVAR 67
18057: ARRAY
18058: EQUAL
18059: AND
18060: IFFALSE 18078
18062: GO 18064
18064: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18065: LD_INT 10
18067: PPUSH
18068: LD_INT 47
18070: PPUSH
18071: LD_INT 82
18073: PPUSH
18074: CALL_OW 243
18078: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18079: LD_EXP 28
18083: PUSH
18084: LD_INT 4
18086: EQUAL
18087: IFFALSE 18109
18089: GO 18091
18091: DISABLE
// begin enable ;
18092: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18093: LD_ADDR_EXP 43
18097: PUSH
18098: LD_INT 1
18100: PPUSH
18101: LD_INT 2
18103: PPUSH
18104: CALL_OW 12
18108: ST_TO_ADDR
// end ; end_of_file
18109: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
18110: LD_INT 3
18112: PPUSH
18113: CALL_OW 301
18117: IFFALSE 18306
18119: GO 18121
18121: DISABLE
// begin if sciCounter = 0 then
18122: LD_EXP 35
18126: PUSH
18127: LD_INT 0
18129: EQUAL
18130: IFFALSE 18158
// begin Say ( JMM , D7a-JMM-1 ) ;
18132: LD_EXP 1
18136: PPUSH
18137: LD_STRING D7a-JMM-1
18139: PPUSH
18140: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18144: LD_EXP 22
18148: PPUSH
18149: LD_STRING D7a-Pow-1
18151: PPUSH
18152: CALL_OW 94
// end else
18156: GO 18302
// if sciCounter < 6 then
18158: LD_EXP 35
18162: PUSH
18163: LD_INT 6
18165: LESS
18166: IFFALSE 18194
// begin Say ( JMM , D7b-JMM-1 ) ;
18168: LD_EXP 1
18172: PPUSH
18173: LD_STRING D7b-JMM-1
18175: PPUSH
18176: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18180: LD_EXP 22
18184: PPUSH
18185: LD_STRING D7b-Pow-1
18187: PPUSH
18188: CALL_OW 94
// end else
18192: GO 18302
// begin Say ( JMM , D7c-JMM-1 ) ;
18194: LD_EXP 1
18198: PPUSH
18199: LD_STRING D7c-JMM-1
18201: PPUSH
18202: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18206: LD_EXP 22
18210: PPUSH
18211: LD_STRING D7c-Pow-1
18213: PPUSH
18214: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18218: LD_EXP 1
18222: PPUSH
18223: LD_STRING D7d-JMM-1
18225: PPUSH
18226: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18230: LD_EXP 22
18234: PPUSH
18235: LD_STRING D7d-Pow-1
18237: PPUSH
18238: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18242: LD_EXP 1
18246: PPUSH
18247: LD_STRING D7d-JMM-2
18249: PPUSH
18250: CALL_OW 88
// if askSiberite = 1 then
18254: LD_EXP 32
18258: PUSH
18259: LD_INT 1
18261: EQUAL
18262: IFFALSE 18278
// Say ( JMM , D7d-JMM-2a ) else
18264: LD_EXP 1
18268: PPUSH
18269: LD_STRING D7d-JMM-2a
18271: PPUSH
18272: CALL_OW 88
18276: GO 18290
// SayRadio ( Powell , D7d-Pow-2 ) ;
18278: LD_EXP 22
18282: PPUSH
18283: LD_STRING D7d-Pow-2
18285: PPUSH
18286: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18290: LD_EXP 22
18294: PPUSH
18295: LD_STRING D7d-Pow-2a
18297: PPUSH
18298: CALL_OW 94
// end ; FinishMission ;
18302: CALL 18307 0 0
// end ;
18306: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18307: LD_INT 0
18309: PPUSH
18310: PPUSH
18311: PPUSH
18312: PPUSH
// m1 := false ;
18313: LD_ADDR_VAR 0 2
18317: PUSH
18318: LD_INT 0
18320: ST_TO_ADDR
// m2 := false ;
18321: LD_ADDR_VAR 0 3
18325: PUSH
18326: LD_INT 0
18328: ST_TO_ADDR
// m3 := false ;
18329: LD_ADDR_VAR 0 4
18333: PUSH
18334: LD_INT 0
18336: ST_TO_ADDR
// if not westPathUsed then
18337: LD_EXP 49
18341: NOT
18342: IFFALSE 18351
// SetAchievement ( ACH_PATH ) ;
18344: LD_STRING ACH_PATH
18346: PPUSH
18347: CALL_OW 543
// if not rocketBuilded then
18351: LD_EXP 51
18355: NOT
18356: IFFALSE 18372
// begin wait ( 3 ) ;
18358: LD_INT 3
18360: PPUSH
18361: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18365: LD_STRING ACH_ROCKET
18367: PPUSH
18368: CALL_OW 543
// end ; if tick <= 40 40$00 then
18372: LD_OWVAR 1
18376: PUSH
18377: LD_INT 84000
18379: LESSEQUAL
18380: IFFALSE 18396
// begin wait ( 3 ) ;
18382: LD_INT 3
18384: PPUSH
18385: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18389: LD_STRING ACH_ASPEED_12
18391: PPUSH
18392: CALL_OW 543
// end ; if teleportExplored = 1 then
18396: LD_EXP 33
18400: PUSH
18401: LD_INT 1
18403: EQUAL
18404: IFFALSE 18426
// begin m1 := true ;
18406: LD_ADDR_VAR 0 2
18410: PUSH
18411: LD_INT 1
18413: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18414: LD_STRING Teleport
18416: PPUSH
18417: LD_INT 1
18419: PPUSH
18420: CALL_OW 101
// end else
18424: GO 18437
// AddMedal ( Teleport , - 1 ) ;
18426: LD_STRING Teleport
18428: PPUSH
18429: LD_INT 1
18431: NEG
18432: PPUSH
18433: CALL_OW 101
// if sciCounter > 2 then
18437: LD_EXP 35
18441: PUSH
18442: LD_INT 2
18444: GREATER
18445: IFFALSE 18467
// begin m2 := true ;
18447: LD_ADDR_VAR 0 3
18451: PUSH
18452: LD_INT 1
18454: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18455: LD_STRING Materials
18457: PPUSH
18458: LD_INT 1
18460: PPUSH
18461: CALL_OW 101
// end else
18465: GO 18478
// AddMedal ( Materials , - 1 ) ;
18467: LD_STRING Materials
18469: PPUSH
18470: LD_INT 1
18472: NEG
18473: PPUSH
18474: CALL_OW 101
// if sciCounter >= 6 then
18478: LD_EXP 35
18482: PUSH
18483: LD_INT 6
18485: GREATEREQUAL
18486: IFFALSE 18518
// begin m3 := true ;
18488: LD_ADDR_VAR 0 4
18492: PUSH
18493: LD_INT 1
18495: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18496: LD_STRING Scientists
18498: PPUSH
18499: LD_INT 1
18501: PPUSH
18502: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18506: LD_INT 1
18508: PPUSH
18509: LD_STRING 12_SciDed_1
18511: PPUSH
18512: CALL_OW 39
// end else
18516: GO 18539
// begin AddMedal ( Scientists , - 1 ) ;
18518: LD_STRING Scientists
18520: PPUSH
18521: LD_INT 1
18523: NEG
18524: PPUSH
18525: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18529: LD_INT 0
18531: PPUSH
18532: LD_STRING 12_SciDed_1
18534: PPUSH
18535: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18539: LD_EXP 31
18543: PPUSH
18544: LD_STRING 12_MainDepositFake_1
18546: PPUSH
18547: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18551: LD_VAR 0 2
18555: PUSH
18556: LD_VAR 0 3
18560: AND
18561: PUSH
18562: LD_VAR 0 4
18566: AND
18567: PUSH
18568: LD_OWVAR 67
18572: PUSH
18573: LD_INT 3
18575: GREATEREQUAL
18576: AND
18577: IFFALSE 18589
// SetAchievementEX ( ACH_AMER , 12 ) ;
18579: LD_STRING ACH_AMER
18581: PPUSH
18582: LD_INT 12
18584: PPUSH
18585: CALL_OW 564
// GiveMedals ( MAIN ) ;
18589: LD_STRING MAIN
18591: PPUSH
18592: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18596: LD_INT 22
18598: PUSH
18599: LD_INT 1
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: PUSH
18606: LD_INT 21
18608: PUSH
18609: LD_INT 1
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: PUSH
18616: LD_INT 2
18618: PUSH
18619: LD_INT 25
18621: PUSH
18622: LD_INT 1
18624: PUSH
18625: EMPTY
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 25
18631: PUSH
18632: LD_INT 2
18634: PUSH
18635: EMPTY
18636: LIST
18637: LIST
18638: PUSH
18639: LD_INT 25
18641: PUSH
18642: LD_INT 3
18644: PUSH
18645: EMPTY
18646: LIST
18647: LIST
18648: PUSH
18649: LD_INT 25
18651: PUSH
18652: LD_INT 4
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 25
18661: PUSH
18662: LD_INT 5
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 25
18671: PUSH
18672: LD_INT 8
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: PPUSH
18693: CALL_OW 69
18697: PPUSH
18698: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18702: LD_EXP 1
18706: PPUSH
18707: LD_EXP 46
18711: PUSH
18712: LD_STRING JMM
18714: STR
18715: PPUSH
18716: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18720: LD_EXP 7
18724: PPUSH
18725: LD_EXP 46
18729: PUSH
18730: LD_STRING Brown
18732: STR
18733: PPUSH
18734: CALL 12544 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18738: LD_EXP 3
18742: PPUSH
18743: LD_EXP 46
18747: PUSH
18748: LD_STRING Donaldson
18750: STR
18751: PPUSH
18752: CALL 12544 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18756: LD_EXP 4
18760: PPUSH
18761: LD_EXP 46
18765: PUSH
18766: LD_STRING Bobby
18768: STR
18769: PPUSH
18770: CALL 12544 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18774: LD_EXP 5
18778: PPUSH
18779: LD_EXP 46
18783: PUSH
18784: LD_STRING Cyrus
18786: STR
18787: PPUSH
18788: CALL 12544 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18792: LD_EXP 2
18796: PPUSH
18797: LD_EXP 46
18801: PUSH
18802: LD_STRING Lisa
18804: STR
18805: PPUSH
18806: CALL 12544 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18810: LD_EXP 12
18814: PPUSH
18815: LD_EXP 46
18819: PUSH
18820: LD_STRING Frank
18822: STR
18823: PPUSH
18824: CALL 12544 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18828: LD_EXP 13
18832: PPUSH
18833: LD_EXP 46
18837: PUSH
18838: LD_STRING Kikuchi
18840: STR
18841: PPUSH
18842: CALL 12544 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18846: LD_EXP 9
18850: PPUSH
18851: LD_EXP 46
18855: PUSH
18856: LD_STRING Houten
18858: STR
18859: PPUSH
18860: CALL 12544 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18864: LD_EXP 11
18868: PPUSH
18869: LD_EXP 46
18873: PUSH
18874: LD_STRING Gary
18876: STR
18877: PPUSH
18878: CALL 12544 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18882: LD_EXP 10
18886: PPUSH
18887: LD_EXP 46
18891: PUSH
18892: LD_STRING Cornell
18894: STR
18895: PPUSH
18896: CALL 12544 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18900: LD_EXP 6
18904: PPUSH
18905: LD_EXP 46
18909: PUSH
18910: LD_STRING Denis
18912: STR
18913: PPUSH
18914: CALL 12544 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18918: LD_EXP 8
18922: PPUSH
18923: LD_EXP 46
18927: PUSH
18928: LD_STRING Gladstone
18930: STR
18931: PPUSH
18932: CALL 12544 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18936: LD_INT 22
18938: PUSH
18939: LD_INT 1
18941: PUSH
18942: EMPTY
18943: LIST
18944: LIST
18945: PUSH
18946: LD_INT 23
18948: PUSH
18949: LD_INT 1
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 21
18958: PUSH
18959: LD_INT 1
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: LD_INT 2
18968: PUSH
18969: LD_INT 25
18971: PUSH
18972: LD_INT 1
18974: PUSH
18975: EMPTY
18976: LIST
18977: LIST
18978: PUSH
18979: LD_INT 25
18981: PUSH
18982: LD_INT 2
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 25
18991: PUSH
18992: LD_INT 3
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: LD_INT 25
19001: PUSH
19002: LD_INT 4
19004: PUSH
19005: EMPTY
19006: LIST
19007: LIST
19008: PUSH
19009: LD_INT 25
19011: PUSH
19012: LD_INT 5
19014: PUSH
19015: EMPTY
19016: LIST
19017: LIST
19018: PUSH
19019: LD_INT 25
19021: PUSH
19022: LD_INT 8
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: PPUSH
19044: CALL_OW 69
19048: PUSH
19049: LD_EXP 1
19053: PUSH
19054: LD_EXP 7
19058: PUSH
19059: LD_EXP 3
19063: PUSH
19064: LD_EXP 4
19068: PUSH
19069: LD_EXP 5
19073: PUSH
19074: LD_EXP 2
19078: PUSH
19079: LD_EXP 12
19083: PUSH
19084: LD_EXP 8
19088: PUSH
19089: LD_EXP 13
19093: PUSH
19094: LD_EXP 6
19098: PUSH
19099: LD_EXP 9
19103: PUSH
19104: LD_EXP 11
19108: PUSH
19109: LD_EXP 10
19113: PUSH
19114: EMPTY
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: DIFF
19129: PPUSH
19130: LD_STRING 12_other_survivors
19132: PPUSH
19133: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19137: LD_INT 22
19139: PUSH
19140: LD_INT 1
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 23
19149: PUSH
19150: LD_INT 2
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 21
19159: PUSH
19160: LD_INT 1
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 2
19169: PUSH
19170: LD_INT 25
19172: PUSH
19173: LD_INT 1
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 25
19182: PUSH
19183: LD_INT 2
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: LD_INT 25
19192: PUSH
19193: LD_INT 3
19195: PUSH
19196: EMPTY
19197: LIST
19198: LIST
19199: PUSH
19200: LD_INT 25
19202: PUSH
19203: LD_INT 4
19205: PUSH
19206: EMPTY
19207: LIST
19208: LIST
19209: PUSH
19210: LD_INT 25
19212: PUSH
19213: LD_INT 5
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 25
19222: PUSH
19223: LD_INT 8
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: LIST
19237: LIST
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: LIST
19243: LIST
19244: PPUSH
19245: CALL_OW 69
19249: PPUSH
19250: LD_STRING 12_kurt_squad
19252: PPUSH
19253: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19257: LD_EXP 14
19261: PPUSH
19262: LD_STRING 12_others
19264: PPUSH
19265: CALL_OW 38
// YouWin ;
19269: CALL_OW 103
// end ; end_of_file
19273: LD_VAR 0 1
19277: RET
// every 0 0$01 do
19278: GO 19280
19280: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19281: LD_INT 1050
19283: PPUSH
19284: CALL_OW 67
// if cratesSpawned < 6 then
19288: LD_EXP 45
19292: PUSH
19293: LD_INT 6
19295: LESS
19296: IFFALSE 19333
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19298: LD_INT 3
19300: PPUSH
19301: LD_INT 5
19303: PPUSH
19304: CALL_OW 12
19308: PPUSH
19309: LD_INT 21
19311: PPUSH
19312: LD_INT 1
19314: PPUSH
19315: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19319: LD_ADDR_EXP 45
19323: PUSH
19324: LD_EXP 45
19328: PUSH
19329: LD_INT 1
19331: PLUS
19332: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19333: LD_EXP 45
19337: PUSH
19338: LD_INT 6
19340: GREATEREQUAL
19341: PUSH
19342: LD_EXP 45
19346: PUSH
19347: LD_INT 12
19349: LESS
19350: AND
19351: IFFALSE 19395
// begin wait ( 0 0$50 ) ;
19353: LD_INT 1750
19355: PPUSH
19356: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19360: LD_INT 3
19362: PPUSH
19363: LD_INT 5
19365: PPUSH
19366: CALL_OW 12
19370: PPUSH
19371: LD_INT 21
19373: PPUSH
19374: LD_INT 1
19376: PPUSH
19377: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19381: LD_ADDR_EXP 45
19385: PUSH
19386: LD_EXP 45
19390: PUSH
19391: LD_INT 1
19393: PLUS
19394: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19395: LD_EXP 45
19399: PUSH
19400: LD_INT 12
19402: GREATEREQUAL
19403: IFFALSE 19447
// begin wait ( 1 1$40 ) ;
19405: LD_INT 3500
19407: PPUSH
19408: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19412: LD_INT 3
19414: PPUSH
19415: LD_INT 5
19417: PPUSH
19418: CALL_OW 12
19422: PPUSH
19423: LD_INT 21
19425: PPUSH
19426: LD_INT 1
19428: PPUSH
19429: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19433: LD_ADDR_EXP 45
19437: PUSH
19438: LD_EXP 45
19442: PUSH
19443: LD_INT 1
19445: PLUS
19446: ST_TO_ADDR
// end ; until false ;
19447: LD_INT 0
19449: IFFALSE 19281
// end ; end_of_file
19451: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19452: LD_INT 0
19454: PPUSH
// ar_miner := 81 ;
19455: LD_ADDR_EXP 59
19459: PUSH
19460: LD_INT 81
19462: ST_TO_ADDR
// ar_crane := 88 ;
19463: LD_ADDR_EXP 58
19467: PUSH
19468: LD_INT 88
19470: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19471: LD_ADDR_EXP 53
19475: PUSH
19476: LD_INT 89
19478: ST_TO_ADDR
// us_hack := 99 ;
19479: LD_ADDR_EXP 54
19483: PUSH
19484: LD_INT 99
19486: ST_TO_ADDR
// us_artillery := 97 ;
19487: LD_ADDR_EXP 55
19491: PUSH
19492: LD_INT 97
19494: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19495: LD_ADDR_EXP 56
19499: PUSH
19500: LD_INT 91
19502: ST_TO_ADDR
// ar_mortar := 92 ;
19503: LD_ADDR_EXP 57
19507: PUSH
19508: LD_INT 92
19510: ST_TO_ADDR
// ru_flamethrower := 93 ;
19511: LD_ADDR_EXP 60
19515: PUSH
19516: LD_INT 93
19518: ST_TO_ADDR
// ru_radar := 98 ;
19519: LD_ADDR_EXP 52
19523: PUSH
19524: LD_INT 98
19526: ST_TO_ADDR
// tech_Artillery := 80 ;
19527: LD_ADDR_EXP 61
19531: PUSH
19532: LD_INT 80
19534: ST_TO_ADDR
// tech_RadMat := 81 ;
19535: LD_ADDR_EXP 62
19539: PUSH
19540: LD_INT 81
19542: ST_TO_ADDR
// tech_BasicTools := 82 ;
19543: LD_ADDR_EXP 63
19547: PUSH
19548: LD_INT 82
19550: ST_TO_ADDR
// tech_Cargo := 83 ;
19551: LD_ADDR_EXP 64
19555: PUSH
19556: LD_INT 83
19558: ST_TO_ADDR
// tech_Track := 84 ;
19559: LD_ADDR_EXP 65
19563: PUSH
19564: LD_INT 84
19566: ST_TO_ADDR
// tech_Crane := 85 ;
19567: LD_ADDR_EXP 66
19571: PUSH
19572: LD_INT 85
19574: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19575: LD_ADDR_EXP 67
19579: PUSH
19580: LD_INT 86
19582: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19583: LD_ADDR_EXP 68
19587: PUSH
19588: LD_INT 87
19590: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19591: LD_ADDR_EXP 69
19595: PUSH
19596: LD_INT 88
19598: ST_TO_ADDR
// class_mastodont := 31 ;
19599: LD_ADDR_EXP 70
19603: PUSH
19604: LD_INT 31
19606: ST_TO_ADDR
// class_horse := 21 ;
19607: LD_ADDR_EXP 71
19611: PUSH
19612: LD_INT 21
19614: ST_TO_ADDR
// end ;
19615: LD_VAR 0 1
19619: RET
// every 1 do
19620: GO 19622
19622: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19623: CALL 19452 0 0
19627: END
// every 0 0$1 do
19628: GO 19630
19630: DISABLE
// begin enable ;
19631: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19632: LD_STRING updateTimer(
19634: PUSH
19635: LD_OWVAR 1
19639: STR
19640: PUSH
19641: LD_STRING );
19643: STR
19644: PPUSH
19645: CALL_OW 559
// end ;
19649: END
// export function SOS_MapStart ( ) ; begin
19650: LD_INT 0
19652: PPUSH
// if streamModeActive then
19653: LD_EXP 72
19657: IFFALSE 19666
// DefineStreamItems ( true ) ;
19659: LD_INT 1
19661: PPUSH
19662: CALL 21316 0 1
// UpdateFactoryWaypoints ( ) ;
19666: CALL 34900 0 0
// end ;
19670: LD_VAR 0 1
19674: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19675: LD_INT 0
19677: PPUSH
// if p2 = 100 then
19678: LD_VAR 0 2
19682: PUSH
19683: LD_INT 100
19685: EQUAL
19686: IFFALSE 20689
// begin if not StreamModeActive then
19688: LD_EXP 72
19692: NOT
19693: IFFALSE 19703
// StreamModeActive := true ;
19695: LD_ADDR_EXP 72
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// if p3 = 0 then
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 0
19710: EQUAL
19711: IFFALSE 19717
// InitStreamMode ;
19713: CALL 20852 0 0
// if p3 = 1 then
19717: LD_VAR 0 3
19721: PUSH
19722: LD_INT 1
19724: EQUAL
19725: IFFALSE 19735
// sRocket := true ;
19727: LD_ADDR_EXP 77
19731: PUSH
19732: LD_INT 1
19734: ST_TO_ADDR
// if p3 = 2 then
19735: LD_VAR 0 3
19739: PUSH
19740: LD_INT 2
19742: EQUAL
19743: IFFALSE 19753
// sSpeed := true ;
19745: LD_ADDR_EXP 76
19749: PUSH
19750: LD_INT 1
19752: ST_TO_ADDR
// if p3 = 3 then
19753: LD_VAR 0 3
19757: PUSH
19758: LD_INT 3
19760: EQUAL
19761: IFFALSE 19771
// sEngine := true ;
19763: LD_ADDR_EXP 78
19767: PUSH
19768: LD_INT 1
19770: ST_TO_ADDR
// if p3 = 4 then
19771: LD_VAR 0 3
19775: PUSH
19776: LD_INT 4
19778: EQUAL
19779: IFFALSE 19789
// sSpec := true ;
19781: LD_ADDR_EXP 75
19785: PUSH
19786: LD_INT 1
19788: ST_TO_ADDR
// if p3 = 5 then
19789: LD_VAR 0 3
19793: PUSH
19794: LD_INT 5
19796: EQUAL
19797: IFFALSE 19807
// sLevel := true ;
19799: LD_ADDR_EXP 79
19803: PUSH
19804: LD_INT 1
19806: ST_TO_ADDR
// if p3 = 6 then
19807: LD_VAR 0 3
19811: PUSH
19812: LD_INT 6
19814: EQUAL
19815: IFFALSE 19825
// sArmoury := true ;
19817: LD_ADDR_EXP 80
19821: PUSH
19822: LD_INT 1
19824: ST_TO_ADDR
// if p3 = 7 then
19825: LD_VAR 0 3
19829: PUSH
19830: LD_INT 7
19832: EQUAL
19833: IFFALSE 19843
// sRadar := true ;
19835: LD_ADDR_EXP 81
19839: PUSH
19840: LD_INT 1
19842: ST_TO_ADDR
// if p3 = 8 then
19843: LD_VAR 0 3
19847: PUSH
19848: LD_INT 8
19850: EQUAL
19851: IFFALSE 19861
// sBunker := true ;
19853: LD_ADDR_EXP 82
19857: PUSH
19858: LD_INT 1
19860: ST_TO_ADDR
// if p3 = 9 then
19861: LD_VAR 0 3
19865: PUSH
19866: LD_INT 9
19868: EQUAL
19869: IFFALSE 19879
// sHack := true ;
19871: LD_ADDR_EXP 83
19875: PUSH
19876: LD_INT 1
19878: ST_TO_ADDR
// if p3 = 10 then
19879: LD_VAR 0 3
19883: PUSH
19884: LD_INT 10
19886: EQUAL
19887: IFFALSE 19897
// sFire := true ;
19889: LD_ADDR_EXP 84
19893: PUSH
19894: LD_INT 1
19896: ST_TO_ADDR
// if p3 = 11 then
19897: LD_VAR 0 3
19901: PUSH
19902: LD_INT 11
19904: EQUAL
19905: IFFALSE 19915
// sRefresh := true ;
19907: LD_ADDR_EXP 85
19911: PUSH
19912: LD_INT 1
19914: ST_TO_ADDR
// if p3 = 12 then
19915: LD_VAR 0 3
19919: PUSH
19920: LD_INT 12
19922: EQUAL
19923: IFFALSE 19933
// sExp := true ;
19925: LD_ADDR_EXP 86
19929: PUSH
19930: LD_INT 1
19932: ST_TO_ADDR
// if p3 = 13 then
19933: LD_VAR 0 3
19937: PUSH
19938: LD_INT 13
19940: EQUAL
19941: IFFALSE 19951
// sDepot := true ;
19943: LD_ADDR_EXP 87
19947: PUSH
19948: LD_INT 1
19950: ST_TO_ADDR
// if p3 = 14 then
19951: LD_VAR 0 3
19955: PUSH
19956: LD_INT 14
19958: EQUAL
19959: IFFALSE 19969
// sFlag := true ;
19961: LD_ADDR_EXP 88
19965: PUSH
19966: LD_INT 1
19968: ST_TO_ADDR
// if p3 = 15 then
19969: LD_VAR 0 3
19973: PUSH
19974: LD_INT 15
19976: EQUAL
19977: IFFALSE 19987
// sKamikadze := true ;
19979: LD_ADDR_EXP 96
19983: PUSH
19984: LD_INT 1
19986: ST_TO_ADDR
// if p3 = 16 then
19987: LD_VAR 0 3
19991: PUSH
19992: LD_INT 16
19994: EQUAL
19995: IFFALSE 20005
// sTroll := true ;
19997: LD_ADDR_EXP 97
20001: PUSH
20002: LD_INT 1
20004: ST_TO_ADDR
// if p3 = 17 then
20005: LD_VAR 0 3
20009: PUSH
20010: LD_INT 17
20012: EQUAL
20013: IFFALSE 20023
// sSlow := true ;
20015: LD_ADDR_EXP 98
20019: PUSH
20020: LD_INT 1
20022: ST_TO_ADDR
// if p3 = 18 then
20023: LD_VAR 0 3
20027: PUSH
20028: LD_INT 18
20030: EQUAL
20031: IFFALSE 20041
// sLack := true ;
20033: LD_ADDR_EXP 99
20037: PUSH
20038: LD_INT 1
20040: ST_TO_ADDR
// if p3 = 19 then
20041: LD_VAR 0 3
20045: PUSH
20046: LD_INT 19
20048: EQUAL
20049: IFFALSE 20059
// sTank := true ;
20051: LD_ADDR_EXP 101
20055: PUSH
20056: LD_INT 1
20058: ST_TO_ADDR
// if p3 = 20 then
20059: LD_VAR 0 3
20063: PUSH
20064: LD_INT 20
20066: EQUAL
20067: IFFALSE 20077
// sRemote := true ;
20069: LD_ADDR_EXP 102
20073: PUSH
20074: LD_INT 1
20076: ST_TO_ADDR
// if p3 = 21 then
20077: LD_VAR 0 3
20081: PUSH
20082: LD_INT 21
20084: EQUAL
20085: IFFALSE 20095
// sPowell := true ;
20087: LD_ADDR_EXP 103
20091: PUSH
20092: LD_INT 1
20094: ST_TO_ADDR
// if p3 = 22 then
20095: LD_VAR 0 3
20099: PUSH
20100: LD_INT 22
20102: EQUAL
20103: IFFALSE 20113
// sTeleport := true ;
20105: LD_ADDR_EXP 106
20109: PUSH
20110: LD_INT 1
20112: ST_TO_ADDR
// if p3 = 23 then
20113: LD_VAR 0 3
20117: PUSH
20118: LD_INT 23
20120: EQUAL
20121: IFFALSE 20131
// sOilTower := true ;
20123: LD_ADDR_EXP 108
20127: PUSH
20128: LD_INT 1
20130: ST_TO_ADDR
// if p3 = 24 then
20131: LD_VAR 0 3
20135: PUSH
20136: LD_INT 24
20138: EQUAL
20139: IFFALSE 20149
// sShovel := true ;
20141: LD_ADDR_EXP 109
20145: PUSH
20146: LD_INT 1
20148: ST_TO_ADDR
// if p3 = 25 then
20149: LD_VAR 0 3
20153: PUSH
20154: LD_INT 25
20156: EQUAL
20157: IFFALSE 20167
// sSheik := true ;
20159: LD_ADDR_EXP 110
20163: PUSH
20164: LD_INT 1
20166: ST_TO_ADDR
// if p3 = 26 then
20167: LD_VAR 0 3
20171: PUSH
20172: LD_INT 26
20174: EQUAL
20175: IFFALSE 20185
// sEarthquake := true ;
20177: LD_ADDR_EXP 112
20181: PUSH
20182: LD_INT 1
20184: ST_TO_ADDR
// if p3 = 27 then
20185: LD_VAR 0 3
20189: PUSH
20190: LD_INT 27
20192: EQUAL
20193: IFFALSE 20203
// sAI := true ;
20195: LD_ADDR_EXP 113
20199: PUSH
20200: LD_INT 1
20202: ST_TO_ADDR
// if p3 = 28 then
20203: LD_VAR 0 3
20207: PUSH
20208: LD_INT 28
20210: EQUAL
20211: IFFALSE 20221
// sCargo := true ;
20213: LD_ADDR_EXP 116
20217: PUSH
20218: LD_INT 1
20220: ST_TO_ADDR
// if p3 = 29 then
20221: LD_VAR 0 3
20225: PUSH
20226: LD_INT 29
20228: EQUAL
20229: IFFALSE 20239
// sDLaser := true ;
20231: LD_ADDR_EXP 117
20235: PUSH
20236: LD_INT 1
20238: ST_TO_ADDR
// if p3 = 30 then
20239: LD_VAR 0 3
20243: PUSH
20244: LD_INT 30
20246: EQUAL
20247: IFFALSE 20257
// sExchange := true ;
20249: LD_ADDR_EXP 118
20253: PUSH
20254: LD_INT 1
20256: ST_TO_ADDR
// if p3 = 31 then
20257: LD_VAR 0 3
20261: PUSH
20262: LD_INT 31
20264: EQUAL
20265: IFFALSE 20275
// sFac := true ;
20267: LD_ADDR_EXP 119
20271: PUSH
20272: LD_INT 1
20274: ST_TO_ADDR
// if p3 = 32 then
20275: LD_VAR 0 3
20279: PUSH
20280: LD_INT 32
20282: EQUAL
20283: IFFALSE 20293
// sPower := true ;
20285: LD_ADDR_EXP 120
20289: PUSH
20290: LD_INT 1
20292: ST_TO_ADDR
// if p3 = 33 then
20293: LD_VAR 0 3
20297: PUSH
20298: LD_INT 33
20300: EQUAL
20301: IFFALSE 20311
// sRandom := true ;
20303: LD_ADDR_EXP 121
20307: PUSH
20308: LD_INT 1
20310: ST_TO_ADDR
// if p3 = 34 then
20311: LD_VAR 0 3
20315: PUSH
20316: LD_INT 34
20318: EQUAL
20319: IFFALSE 20329
// sShield := true ;
20321: LD_ADDR_EXP 122
20325: PUSH
20326: LD_INT 1
20328: ST_TO_ADDR
// if p3 = 35 then
20329: LD_VAR 0 3
20333: PUSH
20334: LD_INT 35
20336: EQUAL
20337: IFFALSE 20347
// sTime := true ;
20339: LD_ADDR_EXP 123
20343: PUSH
20344: LD_INT 1
20346: ST_TO_ADDR
// if p3 = 36 then
20347: LD_VAR 0 3
20351: PUSH
20352: LD_INT 36
20354: EQUAL
20355: IFFALSE 20365
// sTools := true ;
20357: LD_ADDR_EXP 124
20361: PUSH
20362: LD_INT 1
20364: ST_TO_ADDR
// if p3 = 101 then
20365: LD_VAR 0 3
20369: PUSH
20370: LD_INT 101
20372: EQUAL
20373: IFFALSE 20383
// sSold := true ;
20375: LD_ADDR_EXP 89
20379: PUSH
20380: LD_INT 1
20382: ST_TO_ADDR
// if p3 = 102 then
20383: LD_VAR 0 3
20387: PUSH
20388: LD_INT 102
20390: EQUAL
20391: IFFALSE 20401
// sDiff := true ;
20393: LD_ADDR_EXP 90
20397: PUSH
20398: LD_INT 1
20400: ST_TO_ADDR
// if p3 = 103 then
20401: LD_VAR 0 3
20405: PUSH
20406: LD_INT 103
20408: EQUAL
20409: IFFALSE 20419
// sFog := true ;
20411: LD_ADDR_EXP 93
20415: PUSH
20416: LD_INT 1
20418: ST_TO_ADDR
// if p3 = 104 then
20419: LD_VAR 0 3
20423: PUSH
20424: LD_INT 104
20426: EQUAL
20427: IFFALSE 20437
// sReset := true ;
20429: LD_ADDR_EXP 94
20433: PUSH
20434: LD_INT 1
20436: ST_TO_ADDR
// if p3 = 105 then
20437: LD_VAR 0 3
20441: PUSH
20442: LD_INT 105
20444: EQUAL
20445: IFFALSE 20455
// sSun := true ;
20447: LD_ADDR_EXP 95
20451: PUSH
20452: LD_INT 1
20454: ST_TO_ADDR
// if p3 = 106 then
20455: LD_VAR 0 3
20459: PUSH
20460: LD_INT 106
20462: EQUAL
20463: IFFALSE 20473
// sTiger := true ;
20465: LD_ADDR_EXP 91
20469: PUSH
20470: LD_INT 1
20472: ST_TO_ADDR
// if p3 = 107 then
20473: LD_VAR 0 3
20477: PUSH
20478: LD_INT 107
20480: EQUAL
20481: IFFALSE 20491
// sBomb := true ;
20483: LD_ADDR_EXP 92
20487: PUSH
20488: LD_INT 1
20490: ST_TO_ADDR
// if p3 = 108 then
20491: LD_VAR 0 3
20495: PUSH
20496: LD_INT 108
20498: EQUAL
20499: IFFALSE 20509
// sWound := true ;
20501: LD_ADDR_EXP 100
20505: PUSH
20506: LD_INT 1
20508: ST_TO_ADDR
// if p3 = 109 then
20509: LD_VAR 0 3
20513: PUSH
20514: LD_INT 109
20516: EQUAL
20517: IFFALSE 20527
// sBetray := true ;
20519: LD_ADDR_EXP 104
20523: PUSH
20524: LD_INT 1
20526: ST_TO_ADDR
// if p3 = 110 then
20527: LD_VAR 0 3
20531: PUSH
20532: LD_INT 110
20534: EQUAL
20535: IFFALSE 20545
// sContamin := true ;
20537: LD_ADDR_EXP 105
20541: PUSH
20542: LD_INT 1
20544: ST_TO_ADDR
// if p3 = 111 then
20545: LD_VAR 0 3
20549: PUSH
20550: LD_INT 111
20552: EQUAL
20553: IFFALSE 20563
// sOil := true ;
20555: LD_ADDR_EXP 107
20559: PUSH
20560: LD_INT 1
20562: ST_TO_ADDR
// if p3 = 112 then
20563: LD_VAR 0 3
20567: PUSH
20568: LD_INT 112
20570: EQUAL
20571: IFFALSE 20581
// sStu := true ;
20573: LD_ADDR_EXP 111
20577: PUSH
20578: LD_INT 1
20580: ST_TO_ADDR
// if p3 = 113 then
20581: LD_VAR 0 3
20585: PUSH
20586: LD_INT 113
20588: EQUAL
20589: IFFALSE 20599
// sBazooka := true ;
20591: LD_ADDR_EXP 114
20595: PUSH
20596: LD_INT 1
20598: ST_TO_ADDR
// if p3 = 114 then
20599: LD_VAR 0 3
20603: PUSH
20604: LD_INT 114
20606: EQUAL
20607: IFFALSE 20617
// sMortar := true ;
20609: LD_ADDR_EXP 115
20613: PUSH
20614: LD_INT 1
20616: ST_TO_ADDR
// if p3 = 115 then
20617: LD_VAR 0 3
20621: PUSH
20622: LD_INT 115
20624: EQUAL
20625: IFFALSE 20635
// sRanger := true ;
20627: LD_ADDR_EXP 125
20631: PUSH
20632: LD_INT 1
20634: ST_TO_ADDR
// if p3 = 116 then
20635: LD_VAR 0 3
20639: PUSH
20640: LD_INT 116
20642: EQUAL
20643: IFFALSE 20653
// sComputer := true ;
20645: LD_ADDR_EXP 126
20649: PUSH
20650: LD_INT 1
20652: ST_TO_ADDR
// if p3 = 117 then
20653: LD_VAR 0 3
20657: PUSH
20658: LD_INT 117
20660: EQUAL
20661: IFFALSE 20671
// s30 := true ;
20663: LD_ADDR_EXP 127
20667: PUSH
20668: LD_INT 1
20670: ST_TO_ADDR
// if p3 = 118 then
20671: LD_VAR 0 3
20675: PUSH
20676: LD_INT 118
20678: EQUAL
20679: IFFALSE 20689
// s60 := true ;
20681: LD_ADDR_EXP 128
20685: PUSH
20686: LD_INT 1
20688: ST_TO_ADDR
// end ; if p2 = 101 then
20689: LD_VAR 0 2
20693: PUSH
20694: LD_INT 101
20696: EQUAL
20697: IFFALSE 20825
// begin case p3 of 1 :
20699: LD_VAR 0 3
20703: PUSH
20704: LD_INT 1
20706: DOUBLE
20707: EQUAL
20708: IFTRUE 20712
20710: GO 20719
20712: POP
// hHackUnlimitedResources ; 2 :
20713: CALL 32923 0 0
20717: GO 20825
20719: LD_INT 2
20721: DOUBLE
20722: EQUAL
20723: IFTRUE 20727
20725: GO 20734
20727: POP
// hHackSetLevel10 ; 3 :
20728: CALL 33056 0 0
20732: GO 20825
20734: LD_INT 3
20736: DOUBLE
20737: EQUAL
20738: IFTRUE 20742
20740: GO 20749
20742: POP
// hHackSetLevel10YourUnits ; 4 :
20743: CALL 33141 0 0
20747: GO 20825
20749: LD_INT 4
20751: DOUBLE
20752: EQUAL
20753: IFTRUE 20757
20755: GO 20764
20757: POP
// hHackInvincible ; 5 :
20758: CALL 33589 0 0
20762: GO 20825
20764: LD_INT 5
20766: DOUBLE
20767: EQUAL
20768: IFTRUE 20772
20770: GO 20779
20772: POP
// hHackInvisible ; 6 :
20773: CALL 33700 0 0
20777: GO 20825
20779: LD_INT 6
20781: DOUBLE
20782: EQUAL
20783: IFTRUE 20787
20785: GO 20794
20787: POP
// hHackChangeYourSide ; 7 :
20788: CALL 33757 0 0
20792: GO 20825
20794: LD_INT 7
20796: DOUBLE
20797: EQUAL
20798: IFTRUE 20802
20800: GO 20809
20802: POP
// hHackChangeUnitSide ; 8 :
20803: CALL 33799 0 0
20807: GO 20825
20809: LD_INT 8
20811: DOUBLE
20812: EQUAL
20813: IFTRUE 20817
20815: GO 20824
20817: POP
// hHackFog ; end ;
20818: CALL 33900 0 0
20822: GO 20825
20824: POP
// end ; end ;
20825: LD_VAR 0 7
20829: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20830: GO 20832
20832: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20833: LD_STRING initStreamRollete();
20835: PPUSH
20836: CALL_OW 559
// InitStreamMode ;
20840: CALL 20852 0 0
// DefineStreamItems ( false ) ;
20844: LD_INT 0
20846: PPUSH
20847: CALL 21316 0 1
// end ;
20851: END
// function InitStreamMode ; begin
20852: LD_INT 0
20854: PPUSH
// streamModeActive := false ;
20855: LD_ADDR_EXP 72
20859: PUSH
20860: LD_INT 0
20862: ST_TO_ADDR
// normalCounter := 36 ;
20863: LD_ADDR_EXP 73
20867: PUSH
20868: LD_INT 36
20870: ST_TO_ADDR
// hardcoreCounter := 18 ;
20871: LD_ADDR_EXP 74
20875: PUSH
20876: LD_INT 18
20878: ST_TO_ADDR
// sRocket := false ;
20879: LD_ADDR_EXP 77
20883: PUSH
20884: LD_INT 0
20886: ST_TO_ADDR
// sSpeed := false ;
20887: LD_ADDR_EXP 76
20891: PUSH
20892: LD_INT 0
20894: ST_TO_ADDR
// sEngine := false ;
20895: LD_ADDR_EXP 78
20899: PUSH
20900: LD_INT 0
20902: ST_TO_ADDR
// sSpec := false ;
20903: LD_ADDR_EXP 75
20907: PUSH
20908: LD_INT 0
20910: ST_TO_ADDR
// sLevel := false ;
20911: LD_ADDR_EXP 79
20915: PUSH
20916: LD_INT 0
20918: ST_TO_ADDR
// sArmoury := false ;
20919: LD_ADDR_EXP 80
20923: PUSH
20924: LD_INT 0
20926: ST_TO_ADDR
// sRadar := false ;
20927: LD_ADDR_EXP 81
20931: PUSH
20932: LD_INT 0
20934: ST_TO_ADDR
// sBunker := false ;
20935: LD_ADDR_EXP 82
20939: PUSH
20940: LD_INT 0
20942: ST_TO_ADDR
// sHack := false ;
20943: LD_ADDR_EXP 83
20947: PUSH
20948: LD_INT 0
20950: ST_TO_ADDR
// sFire := false ;
20951: LD_ADDR_EXP 84
20955: PUSH
20956: LD_INT 0
20958: ST_TO_ADDR
// sRefresh := false ;
20959: LD_ADDR_EXP 85
20963: PUSH
20964: LD_INT 0
20966: ST_TO_ADDR
// sExp := false ;
20967: LD_ADDR_EXP 86
20971: PUSH
20972: LD_INT 0
20974: ST_TO_ADDR
// sDepot := false ;
20975: LD_ADDR_EXP 87
20979: PUSH
20980: LD_INT 0
20982: ST_TO_ADDR
// sFlag := false ;
20983: LD_ADDR_EXP 88
20987: PUSH
20988: LD_INT 0
20990: ST_TO_ADDR
// sKamikadze := false ;
20991: LD_ADDR_EXP 96
20995: PUSH
20996: LD_INT 0
20998: ST_TO_ADDR
// sTroll := false ;
20999: LD_ADDR_EXP 97
21003: PUSH
21004: LD_INT 0
21006: ST_TO_ADDR
// sSlow := false ;
21007: LD_ADDR_EXP 98
21011: PUSH
21012: LD_INT 0
21014: ST_TO_ADDR
// sLack := false ;
21015: LD_ADDR_EXP 99
21019: PUSH
21020: LD_INT 0
21022: ST_TO_ADDR
// sTank := false ;
21023: LD_ADDR_EXP 101
21027: PUSH
21028: LD_INT 0
21030: ST_TO_ADDR
// sRemote := false ;
21031: LD_ADDR_EXP 102
21035: PUSH
21036: LD_INT 0
21038: ST_TO_ADDR
// sPowell := false ;
21039: LD_ADDR_EXP 103
21043: PUSH
21044: LD_INT 0
21046: ST_TO_ADDR
// sTeleport := false ;
21047: LD_ADDR_EXP 106
21051: PUSH
21052: LD_INT 0
21054: ST_TO_ADDR
// sOilTower := false ;
21055: LD_ADDR_EXP 108
21059: PUSH
21060: LD_INT 0
21062: ST_TO_ADDR
// sShovel := false ;
21063: LD_ADDR_EXP 109
21067: PUSH
21068: LD_INT 0
21070: ST_TO_ADDR
// sSheik := false ;
21071: LD_ADDR_EXP 110
21075: PUSH
21076: LD_INT 0
21078: ST_TO_ADDR
// sEarthquake := false ;
21079: LD_ADDR_EXP 112
21083: PUSH
21084: LD_INT 0
21086: ST_TO_ADDR
// sAI := false ;
21087: LD_ADDR_EXP 113
21091: PUSH
21092: LD_INT 0
21094: ST_TO_ADDR
// sCargo := false ;
21095: LD_ADDR_EXP 116
21099: PUSH
21100: LD_INT 0
21102: ST_TO_ADDR
// sDLaser := false ;
21103: LD_ADDR_EXP 117
21107: PUSH
21108: LD_INT 0
21110: ST_TO_ADDR
// sExchange := false ;
21111: LD_ADDR_EXP 118
21115: PUSH
21116: LD_INT 0
21118: ST_TO_ADDR
// sFac := false ;
21119: LD_ADDR_EXP 119
21123: PUSH
21124: LD_INT 0
21126: ST_TO_ADDR
// sPower := false ;
21127: LD_ADDR_EXP 120
21131: PUSH
21132: LD_INT 0
21134: ST_TO_ADDR
// sRandom := false ;
21135: LD_ADDR_EXP 121
21139: PUSH
21140: LD_INT 0
21142: ST_TO_ADDR
// sShield := false ;
21143: LD_ADDR_EXP 122
21147: PUSH
21148: LD_INT 0
21150: ST_TO_ADDR
// sTime := false ;
21151: LD_ADDR_EXP 123
21155: PUSH
21156: LD_INT 0
21158: ST_TO_ADDR
// sTools := false ;
21159: LD_ADDR_EXP 124
21163: PUSH
21164: LD_INT 0
21166: ST_TO_ADDR
// sSold := false ;
21167: LD_ADDR_EXP 89
21171: PUSH
21172: LD_INT 0
21174: ST_TO_ADDR
// sDiff := false ;
21175: LD_ADDR_EXP 90
21179: PUSH
21180: LD_INT 0
21182: ST_TO_ADDR
// sFog := false ;
21183: LD_ADDR_EXP 93
21187: PUSH
21188: LD_INT 0
21190: ST_TO_ADDR
// sReset := false ;
21191: LD_ADDR_EXP 94
21195: PUSH
21196: LD_INT 0
21198: ST_TO_ADDR
// sSun := false ;
21199: LD_ADDR_EXP 95
21203: PUSH
21204: LD_INT 0
21206: ST_TO_ADDR
// sTiger := false ;
21207: LD_ADDR_EXP 91
21211: PUSH
21212: LD_INT 0
21214: ST_TO_ADDR
// sBomb := false ;
21215: LD_ADDR_EXP 92
21219: PUSH
21220: LD_INT 0
21222: ST_TO_ADDR
// sWound := false ;
21223: LD_ADDR_EXP 100
21227: PUSH
21228: LD_INT 0
21230: ST_TO_ADDR
// sBetray := false ;
21231: LD_ADDR_EXP 104
21235: PUSH
21236: LD_INT 0
21238: ST_TO_ADDR
// sContamin := false ;
21239: LD_ADDR_EXP 105
21243: PUSH
21244: LD_INT 0
21246: ST_TO_ADDR
// sOil := false ;
21247: LD_ADDR_EXP 107
21251: PUSH
21252: LD_INT 0
21254: ST_TO_ADDR
// sStu := false ;
21255: LD_ADDR_EXP 111
21259: PUSH
21260: LD_INT 0
21262: ST_TO_ADDR
// sBazooka := false ;
21263: LD_ADDR_EXP 114
21267: PUSH
21268: LD_INT 0
21270: ST_TO_ADDR
// sMortar := false ;
21271: LD_ADDR_EXP 115
21275: PUSH
21276: LD_INT 0
21278: ST_TO_ADDR
// sRanger := false ;
21279: LD_ADDR_EXP 125
21283: PUSH
21284: LD_INT 0
21286: ST_TO_ADDR
// sComputer := false ;
21287: LD_ADDR_EXP 126
21291: PUSH
21292: LD_INT 0
21294: ST_TO_ADDR
// s30 := false ;
21295: LD_ADDR_EXP 127
21299: PUSH
21300: LD_INT 0
21302: ST_TO_ADDR
// s60 := false ;
21303: LD_ADDR_EXP 128
21307: PUSH
21308: LD_INT 0
21310: ST_TO_ADDR
// end ;
21311: LD_VAR 0 1
21315: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21316: LD_INT 0
21318: PPUSH
21319: PPUSH
21320: PPUSH
21321: PPUSH
21322: PPUSH
21323: PPUSH
21324: PPUSH
// result := [ ] ;
21325: LD_ADDR_VAR 0 2
21329: PUSH
21330: EMPTY
21331: ST_TO_ADDR
// if campaign_id = 1 then
21332: LD_OWVAR 69
21336: PUSH
21337: LD_INT 1
21339: EQUAL
21340: IFFALSE 24506
// begin case mission_number of 1 :
21342: LD_OWVAR 70
21346: PUSH
21347: LD_INT 1
21349: DOUBLE
21350: EQUAL
21351: IFTRUE 21355
21353: GO 21431
21355: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21356: LD_ADDR_VAR 0 2
21360: PUSH
21361: LD_INT 2
21363: PUSH
21364: LD_INT 4
21366: PUSH
21367: LD_INT 11
21369: PUSH
21370: LD_INT 12
21372: PUSH
21373: LD_INT 15
21375: PUSH
21376: LD_INT 16
21378: PUSH
21379: LD_INT 22
21381: PUSH
21382: LD_INT 23
21384: PUSH
21385: LD_INT 26
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: PUSH
21399: LD_INT 101
21401: PUSH
21402: LD_INT 102
21404: PUSH
21405: LD_INT 106
21407: PUSH
21408: LD_INT 116
21410: PUSH
21411: LD_INT 117
21413: PUSH
21414: LD_INT 118
21416: PUSH
21417: EMPTY
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: PUSH
21425: EMPTY
21426: LIST
21427: LIST
21428: ST_TO_ADDR
21429: GO 24504
21431: LD_INT 2
21433: DOUBLE
21434: EQUAL
21435: IFTRUE 21439
21437: GO 21523
21439: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21440: LD_ADDR_VAR 0 2
21444: PUSH
21445: LD_INT 2
21447: PUSH
21448: LD_INT 4
21450: PUSH
21451: LD_INT 11
21453: PUSH
21454: LD_INT 12
21456: PUSH
21457: LD_INT 15
21459: PUSH
21460: LD_INT 16
21462: PUSH
21463: LD_INT 22
21465: PUSH
21466: LD_INT 23
21468: PUSH
21469: LD_INT 26
21471: PUSH
21472: EMPTY
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 101
21485: PUSH
21486: LD_INT 102
21488: PUSH
21489: LD_INT 105
21491: PUSH
21492: LD_INT 106
21494: PUSH
21495: LD_INT 108
21497: PUSH
21498: LD_INT 116
21500: PUSH
21501: LD_INT 117
21503: PUSH
21504: LD_INT 118
21506: PUSH
21507: EMPTY
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: ST_TO_ADDR
21521: GO 24504
21523: LD_INT 3
21525: DOUBLE
21526: EQUAL
21527: IFTRUE 21531
21529: GO 21619
21531: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21532: LD_ADDR_VAR 0 2
21536: PUSH
21537: LD_INT 2
21539: PUSH
21540: LD_INT 4
21542: PUSH
21543: LD_INT 5
21545: PUSH
21546: LD_INT 11
21548: PUSH
21549: LD_INT 12
21551: PUSH
21552: LD_INT 15
21554: PUSH
21555: LD_INT 16
21557: PUSH
21558: LD_INT 22
21560: PUSH
21561: LD_INT 26
21563: PUSH
21564: LD_INT 36
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: PUSH
21579: LD_INT 101
21581: PUSH
21582: LD_INT 102
21584: PUSH
21585: LD_INT 105
21587: PUSH
21588: LD_INT 106
21590: PUSH
21591: LD_INT 108
21593: PUSH
21594: LD_INT 116
21596: PUSH
21597: LD_INT 117
21599: PUSH
21600: LD_INT 118
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: ST_TO_ADDR
21617: GO 24504
21619: LD_INT 4
21621: DOUBLE
21622: EQUAL
21623: IFTRUE 21627
21625: GO 21723
21627: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21628: LD_ADDR_VAR 0 2
21632: PUSH
21633: LD_INT 2
21635: PUSH
21636: LD_INT 4
21638: PUSH
21639: LD_INT 5
21641: PUSH
21642: LD_INT 8
21644: PUSH
21645: LD_INT 11
21647: PUSH
21648: LD_INT 12
21650: PUSH
21651: LD_INT 15
21653: PUSH
21654: LD_INT 16
21656: PUSH
21657: LD_INT 22
21659: PUSH
21660: LD_INT 23
21662: PUSH
21663: LD_INT 26
21665: PUSH
21666: LD_INT 36
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: LIST
21681: LIST
21682: PUSH
21683: LD_INT 101
21685: PUSH
21686: LD_INT 102
21688: PUSH
21689: LD_INT 105
21691: PUSH
21692: LD_INT 106
21694: PUSH
21695: LD_INT 108
21697: PUSH
21698: LD_INT 116
21700: PUSH
21701: LD_INT 117
21703: PUSH
21704: LD_INT 118
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: PUSH
21717: EMPTY
21718: LIST
21719: LIST
21720: ST_TO_ADDR
21721: GO 24504
21723: LD_INT 5
21725: DOUBLE
21726: EQUAL
21727: IFTRUE 21731
21729: GO 21843
21731: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21732: LD_ADDR_VAR 0 2
21736: PUSH
21737: LD_INT 2
21739: PUSH
21740: LD_INT 4
21742: PUSH
21743: LD_INT 5
21745: PUSH
21746: LD_INT 6
21748: PUSH
21749: LD_INT 8
21751: PUSH
21752: LD_INT 11
21754: PUSH
21755: LD_INT 12
21757: PUSH
21758: LD_INT 15
21760: PUSH
21761: LD_INT 16
21763: PUSH
21764: LD_INT 22
21766: PUSH
21767: LD_INT 23
21769: PUSH
21770: LD_INT 25
21772: PUSH
21773: LD_INT 26
21775: PUSH
21776: LD_INT 36
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 101
21797: PUSH
21798: LD_INT 102
21800: PUSH
21801: LD_INT 105
21803: PUSH
21804: LD_INT 106
21806: PUSH
21807: LD_INT 108
21809: PUSH
21810: LD_INT 109
21812: PUSH
21813: LD_INT 112
21815: PUSH
21816: LD_INT 116
21818: PUSH
21819: LD_INT 117
21821: PUSH
21822: LD_INT 118
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: PUSH
21837: EMPTY
21838: LIST
21839: LIST
21840: ST_TO_ADDR
21841: GO 24504
21843: LD_INT 6
21845: DOUBLE
21846: EQUAL
21847: IFTRUE 21851
21849: GO 21983
21851: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21852: LD_ADDR_VAR 0 2
21856: PUSH
21857: LD_INT 2
21859: PUSH
21860: LD_INT 4
21862: PUSH
21863: LD_INT 5
21865: PUSH
21866: LD_INT 6
21868: PUSH
21869: LD_INT 8
21871: PUSH
21872: LD_INT 11
21874: PUSH
21875: LD_INT 12
21877: PUSH
21878: LD_INT 15
21880: PUSH
21881: LD_INT 16
21883: PUSH
21884: LD_INT 20
21886: PUSH
21887: LD_INT 21
21889: PUSH
21890: LD_INT 22
21892: PUSH
21893: LD_INT 23
21895: PUSH
21896: LD_INT 25
21898: PUSH
21899: LD_INT 26
21901: PUSH
21902: LD_INT 30
21904: PUSH
21905: LD_INT 31
21907: PUSH
21908: LD_INT 32
21910: PUSH
21911: LD_INT 36
21913: PUSH
21914: EMPTY
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: PUSH
21935: LD_INT 101
21937: PUSH
21938: LD_INT 102
21940: PUSH
21941: LD_INT 105
21943: PUSH
21944: LD_INT 106
21946: PUSH
21947: LD_INT 108
21949: PUSH
21950: LD_INT 109
21952: PUSH
21953: LD_INT 112
21955: PUSH
21956: LD_INT 116
21958: PUSH
21959: LD_INT 117
21961: PUSH
21962: LD_INT 118
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: ST_TO_ADDR
21981: GO 24504
21983: LD_INT 7
21985: DOUBLE
21986: EQUAL
21987: IFTRUE 21991
21989: GO 22103
21991: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21992: LD_ADDR_VAR 0 2
21996: PUSH
21997: LD_INT 2
21999: PUSH
22000: LD_INT 4
22002: PUSH
22003: LD_INT 5
22005: PUSH
22006: LD_INT 7
22008: PUSH
22009: LD_INT 11
22011: PUSH
22012: LD_INT 12
22014: PUSH
22015: LD_INT 15
22017: PUSH
22018: LD_INT 16
22020: PUSH
22021: LD_INT 20
22023: PUSH
22024: LD_INT 21
22026: PUSH
22027: LD_INT 22
22029: PUSH
22030: LD_INT 23
22032: PUSH
22033: LD_INT 25
22035: PUSH
22036: LD_INT 26
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: PUSH
22055: LD_INT 101
22057: PUSH
22058: LD_INT 102
22060: PUSH
22061: LD_INT 103
22063: PUSH
22064: LD_INT 105
22066: PUSH
22067: LD_INT 106
22069: PUSH
22070: LD_INT 108
22072: PUSH
22073: LD_INT 112
22075: PUSH
22076: LD_INT 116
22078: PUSH
22079: LD_INT 117
22081: PUSH
22082: LD_INT 118
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: ST_TO_ADDR
22101: GO 24504
22103: LD_INT 8
22105: DOUBLE
22106: EQUAL
22107: IFTRUE 22111
22109: GO 22251
22111: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22112: LD_ADDR_VAR 0 2
22116: PUSH
22117: LD_INT 2
22119: PUSH
22120: LD_INT 4
22122: PUSH
22123: LD_INT 5
22125: PUSH
22126: LD_INT 6
22128: PUSH
22129: LD_INT 7
22131: PUSH
22132: LD_INT 8
22134: PUSH
22135: LD_INT 11
22137: PUSH
22138: LD_INT 12
22140: PUSH
22141: LD_INT 15
22143: PUSH
22144: LD_INT 16
22146: PUSH
22147: LD_INT 20
22149: PUSH
22150: LD_INT 21
22152: PUSH
22153: LD_INT 22
22155: PUSH
22156: LD_INT 23
22158: PUSH
22159: LD_INT 25
22161: PUSH
22162: LD_INT 26
22164: PUSH
22165: LD_INT 30
22167: PUSH
22168: LD_INT 31
22170: PUSH
22171: LD_INT 32
22173: PUSH
22174: LD_INT 36
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: LIST
22181: LIST
22182: LIST
22183: LIST
22184: LIST
22185: LIST
22186: LIST
22187: LIST
22188: LIST
22189: LIST
22190: LIST
22191: LIST
22192: LIST
22193: LIST
22194: LIST
22195: LIST
22196: LIST
22197: LIST
22198: PUSH
22199: LD_INT 101
22201: PUSH
22202: LD_INT 102
22204: PUSH
22205: LD_INT 103
22207: PUSH
22208: LD_INT 105
22210: PUSH
22211: LD_INT 106
22213: PUSH
22214: LD_INT 108
22216: PUSH
22217: LD_INT 109
22219: PUSH
22220: LD_INT 112
22222: PUSH
22223: LD_INT 116
22225: PUSH
22226: LD_INT 117
22228: PUSH
22229: LD_INT 118
22231: PUSH
22232: EMPTY
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: LIST
22243: LIST
22244: PUSH
22245: EMPTY
22246: LIST
22247: LIST
22248: ST_TO_ADDR
22249: GO 24504
22251: LD_INT 9
22253: DOUBLE
22254: EQUAL
22255: IFTRUE 22259
22257: GO 22407
22259: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22260: LD_ADDR_VAR 0 2
22264: PUSH
22265: LD_INT 2
22267: PUSH
22268: LD_INT 4
22270: PUSH
22271: LD_INT 5
22273: PUSH
22274: LD_INT 6
22276: PUSH
22277: LD_INT 7
22279: PUSH
22280: LD_INT 8
22282: PUSH
22283: LD_INT 11
22285: PUSH
22286: LD_INT 12
22288: PUSH
22289: LD_INT 15
22291: PUSH
22292: LD_INT 16
22294: PUSH
22295: LD_INT 20
22297: PUSH
22298: LD_INT 21
22300: PUSH
22301: LD_INT 22
22303: PUSH
22304: LD_INT 23
22306: PUSH
22307: LD_INT 25
22309: PUSH
22310: LD_INT 26
22312: PUSH
22313: LD_INT 28
22315: PUSH
22316: LD_INT 30
22318: PUSH
22319: LD_INT 31
22321: PUSH
22322: LD_INT 32
22324: PUSH
22325: LD_INT 36
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: PUSH
22351: LD_INT 101
22353: PUSH
22354: LD_INT 102
22356: PUSH
22357: LD_INT 103
22359: PUSH
22360: LD_INT 105
22362: PUSH
22363: LD_INT 106
22365: PUSH
22366: LD_INT 108
22368: PUSH
22369: LD_INT 109
22371: PUSH
22372: LD_INT 112
22374: PUSH
22375: LD_INT 114
22377: PUSH
22378: LD_INT 116
22380: PUSH
22381: LD_INT 117
22383: PUSH
22384: LD_INT 118
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: ST_TO_ADDR
22405: GO 24504
22407: LD_INT 10
22409: DOUBLE
22410: EQUAL
22411: IFTRUE 22415
22413: GO 22611
22415: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22416: LD_ADDR_VAR 0 2
22420: PUSH
22421: LD_INT 2
22423: PUSH
22424: LD_INT 4
22426: PUSH
22427: LD_INT 5
22429: PUSH
22430: LD_INT 6
22432: PUSH
22433: LD_INT 7
22435: PUSH
22436: LD_INT 8
22438: PUSH
22439: LD_INT 9
22441: PUSH
22442: LD_INT 10
22444: PUSH
22445: LD_INT 11
22447: PUSH
22448: LD_INT 12
22450: PUSH
22451: LD_INT 13
22453: PUSH
22454: LD_INT 14
22456: PUSH
22457: LD_INT 15
22459: PUSH
22460: LD_INT 16
22462: PUSH
22463: LD_INT 17
22465: PUSH
22466: LD_INT 18
22468: PUSH
22469: LD_INT 19
22471: PUSH
22472: LD_INT 20
22474: PUSH
22475: LD_INT 21
22477: PUSH
22478: LD_INT 22
22480: PUSH
22481: LD_INT 23
22483: PUSH
22484: LD_INT 24
22486: PUSH
22487: LD_INT 25
22489: PUSH
22490: LD_INT 26
22492: PUSH
22493: LD_INT 28
22495: PUSH
22496: LD_INT 30
22498: PUSH
22499: LD_INT 31
22501: PUSH
22502: LD_INT 32
22504: PUSH
22505: LD_INT 36
22507: PUSH
22508: EMPTY
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: PUSH
22539: LD_INT 101
22541: PUSH
22542: LD_INT 102
22544: PUSH
22545: LD_INT 103
22547: PUSH
22548: LD_INT 104
22550: PUSH
22551: LD_INT 105
22553: PUSH
22554: LD_INT 106
22556: PUSH
22557: LD_INT 107
22559: PUSH
22560: LD_INT 108
22562: PUSH
22563: LD_INT 109
22565: PUSH
22566: LD_INT 110
22568: PUSH
22569: LD_INT 111
22571: PUSH
22572: LD_INT 112
22574: PUSH
22575: LD_INT 114
22577: PUSH
22578: LD_INT 116
22580: PUSH
22581: LD_INT 117
22583: PUSH
22584: LD_INT 118
22586: PUSH
22587: EMPTY
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: ST_TO_ADDR
22609: GO 24504
22611: LD_INT 11
22613: DOUBLE
22614: EQUAL
22615: IFTRUE 22619
22617: GO 22823
22619: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22620: LD_ADDR_VAR 0 2
22624: PUSH
22625: LD_INT 2
22627: PUSH
22628: LD_INT 3
22630: PUSH
22631: LD_INT 4
22633: PUSH
22634: LD_INT 5
22636: PUSH
22637: LD_INT 6
22639: PUSH
22640: LD_INT 7
22642: PUSH
22643: LD_INT 8
22645: PUSH
22646: LD_INT 9
22648: PUSH
22649: LD_INT 10
22651: PUSH
22652: LD_INT 11
22654: PUSH
22655: LD_INT 12
22657: PUSH
22658: LD_INT 13
22660: PUSH
22661: LD_INT 14
22663: PUSH
22664: LD_INT 15
22666: PUSH
22667: LD_INT 16
22669: PUSH
22670: LD_INT 17
22672: PUSH
22673: LD_INT 18
22675: PUSH
22676: LD_INT 19
22678: PUSH
22679: LD_INT 20
22681: PUSH
22682: LD_INT 21
22684: PUSH
22685: LD_INT 22
22687: PUSH
22688: LD_INT 23
22690: PUSH
22691: LD_INT 24
22693: PUSH
22694: LD_INT 25
22696: PUSH
22697: LD_INT 26
22699: PUSH
22700: LD_INT 28
22702: PUSH
22703: LD_INT 30
22705: PUSH
22706: LD_INT 31
22708: PUSH
22709: LD_INT 32
22711: PUSH
22712: LD_INT 34
22714: PUSH
22715: LD_INT 36
22717: PUSH
22718: EMPTY
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: PUSH
22751: LD_INT 101
22753: PUSH
22754: LD_INT 102
22756: PUSH
22757: LD_INT 103
22759: PUSH
22760: LD_INT 104
22762: PUSH
22763: LD_INT 105
22765: PUSH
22766: LD_INT 106
22768: PUSH
22769: LD_INT 107
22771: PUSH
22772: LD_INT 108
22774: PUSH
22775: LD_INT 109
22777: PUSH
22778: LD_INT 110
22780: PUSH
22781: LD_INT 111
22783: PUSH
22784: LD_INT 112
22786: PUSH
22787: LD_INT 114
22789: PUSH
22790: LD_INT 116
22792: PUSH
22793: LD_INT 117
22795: PUSH
22796: LD_INT 118
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: ST_TO_ADDR
22821: GO 24504
22823: LD_INT 12
22825: DOUBLE
22826: EQUAL
22827: IFTRUE 22831
22829: GO 23051
22831: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22832: LD_ADDR_VAR 0 2
22836: PUSH
22837: LD_INT 1
22839: PUSH
22840: LD_INT 2
22842: PUSH
22843: LD_INT 3
22845: PUSH
22846: LD_INT 4
22848: PUSH
22849: LD_INT 5
22851: PUSH
22852: LD_INT 6
22854: PUSH
22855: LD_INT 7
22857: PUSH
22858: LD_INT 8
22860: PUSH
22861: LD_INT 9
22863: PUSH
22864: LD_INT 10
22866: PUSH
22867: LD_INT 11
22869: PUSH
22870: LD_INT 12
22872: PUSH
22873: LD_INT 13
22875: PUSH
22876: LD_INT 14
22878: PUSH
22879: LD_INT 15
22881: PUSH
22882: LD_INT 16
22884: PUSH
22885: LD_INT 17
22887: PUSH
22888: LD_INT 18
22890: PUSH
22891: LD_INT 19
22893: PUSH
22894: LD_INT 20
22896: PUSH
22897: LD_INT 21
22899: PUSH
22900: LD_INT 22
22902: PUSH
22903: LD_INT 23
22905: PUSH
22906: LD_INT 24
22908: PUSH
22909: LD_INT 25
22911: PUSH
22912: LD_INT 26
22914: PUSH
22915: LD_INT 27
22917: PUSH
22918: LD_INT 28
22920: PUSH
22921: LD_INT 30
22923: PUSH
22924: LD_INT 31
22926: PUSH
22927: LD_INT 32
22929: PUSH
22930: LD_INT 33
22932: PUSH
22933: LD_INT 34
22935: PUSH
22936: LD_INT 36
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: PUSH
22975: LD_INT 101
22977: PUSH
22978: LD_INT 102
22980: PUSH
22981: LD_INT 103
22983: PUSH
22984: LD_INT 104
22986: PUSH
22987: LD_INT 105
22989: PUSH
22990: LD_INT 106
22992: PUSH
22993: LD_INT 107
22995: PUSH
22996: LD_INT 108
22998: PUSH
22999: LD_INT 109
23001: PUSH
23002: LD_INT 110
23004: PUSH
23005: LD_INT 111
23007: PUSH
23008: LD_INT 112
23010: PUSH
23011: LD_INT 113
23013: PUSH
23014: LD_INT 114
23016: PUSH
23017: LD_INT 116
23019: PUSH
23020: LD_INT 117
23022: PUSH
23023: LD_INT 118
23025: PUSH
23026: EMPTY
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: ST_TO_ADDR
23049: GO 24504
23051: LD_INT 13
23053: DOUBLE
23054: EQUAL
23055: IFTRUE 23059
23057: GO 23267
23059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23060: LD_ADDR_VAR 0 2
23064: PUSH
23065: LD_INT 1
23067: PUSH
23068: LD_INT 2
23070: PUSH
23071: LD_INT 3
23073: PUSH
23074: LD_INT 4
23076: PUSH
23077: LD_INT 5
23079: PUSH
23080: LD_INT 8
23082: PUSH
23083: LD_INT 9
23085: PUSH
23086: LD_INT 10
23088: PUSH
23089: LD_INT 11
23091: PUSH
23092: LD_INT 12
23094: PUSH
23095: LD_INT 14
23097: PUSH
23098: LD_INT 15
23100: PUSH
23101: LD_INT 16
23103: PUSH
23104: LD_INT 17
23106: PUSH
23107: LD_INT 18
23109: PUSH
23110: LD_INT 19
23112: PUSH
23113: LD_INT 20
23115: PUSH
23116: LD_INT 21
23118: PUSH
23119: LD_INT 22
23121: PUSH
23122: LD_INT 23
23124: PUSH
23125: LD_INT 24
23127: PUSH
23128: LD_INT 25
23130: PUSH
23131: LD_INT 26
23133: PUSH
23134: LD_INT 27
23136: PUSH
23137: LD_INT 28
23139: PUSH
23140: LD_INT 30
23142: PUSH
23143: LD_INT 31
23145: PUSH
23146: LD_INT 32
23148: PUSH
23149: LD_INT 33
23151: PUSH
23152: LD_INT 34
23154: PUSH
23155: LD_INT 36
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 101
23193: PUSH
23194: LD_INT 102
23196: PUSH
23197: LD_INT 103
23199: PUSH
23200: LD_INT 104
23202: PUSH
23203: LD_INT 105
23205: PUSH
23206: LD_INT 106
23208: PUSH
23209: LD_INT 107
23211: PUSH
23212: LD_INT 108
23214: PUSH
23215: LD_INT 109
23217: PUSH
23218: LD_INT 110
23220: PUSH
23221: LD_INT 111
23223: PUSH
23224: LD_INT 112
23226: PUSH
23227: LD_INT 113
23229: PUSH
23230: LD_INT 114
23232: PUSH
23233: LD_INT 116
23235: PUSH
23236: LD_INT 117
23238: PUSH
23239: LD_INT 118
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: ST_TO_ADDR
23265: GO 24504
23267: LD_INT 14
23269: DOUBLE
23270: EQUAL
23271: IFTRUE 23275
23273: GO 23499
23275: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23276: LD_ADDR_VAR 0 2
23280: PUSH
23281: LD_INT 1
23283: PUSH
23284: LD_INT 2
23286: PUSH
23287: LD_INT 3
23289: PUSH
23290: LD_INT 4
23292: PUSH
23293: LD_INT 5
23295: PUSH
23296: LD_INT 6
23298: PUSH
23299: LD_INT 7
23301: PUSH
23302: LD_INT 8
23304: PUSH
23305: LD_INT 9
23307: PUSH
23308: LD_INT 10
23310: PUSH
23311: LD_INT 11
23313: PUSH
23314: LD_INT 12
23316: PUSH
23317: LD_INT 13
23319: PUSH
23320: LD_INT 14
23322: PUSH
23323: LD_INT 15
23325: PUSH
23326: LD_INT 16
23328: PUSH
23329: LD_INT 17
23331: PUSH
23332: LD_INT 18
23334: PUSH
23335: LD_INT 19
23337: PUSH
23338: LD_INT 20
23340: PUSH
23341: LD_INT 21
23343: PUSH
23344: LD_INT 22
23346: PUSH
23347: LD_INT 23
23349: PUSH
23350: LD_INT 24
23352: PUSH
23353: LD_INT 25
23355: PUSH
23356: LD_INT 26
23358: PUSH
23359: LD_INT 27
23361: PUSH
23362: LD_INT 28
23364: PUSH
23365: LD_INT 29
23367: PUSH
23368: LD_INT 30
23370: PUSH
23371: LD_INT 31
23373: PUSH
23374: LD_INT 32
23376: PUSH
23377: LD_INT 33
23379: PUSH
23380: LD_INT 34
23382: PUSH
23383: LD_INT 36
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: LIST
23401: LIST
23402: LIST
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: LIST
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: LIST
23414: LIST
23415: LIST
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 101
23425: PUSH
23426: LD_INT 102
23428: PUSH
23429: LD_INT 103
23431: PUSH
23432: LD_INT 104
23434: PUSH
23435: LD_INT 105
23437: PUSH
23438: LD_INT 106
23440: PUSH
23441: LD_INT 107
23443: PUSH
23444: LD_INT 108
23446: PUSH
23447: LD_INT 109
23449: PUSH
23450: LD_INT 110
23452: PUSH
23453: LD_INT 111
23455: PUSH
23456: LD_INT 112
23458: PUSH
23459: LD_INT 113
23461: PUSH
23462: LD_INT 114
23464: PUSH
23465: LD_INT 116
23467: PUSH
23468: LD_INT 117
23470: PUSH
23471: LD_INT 118
23473: PUSH
23474: EMPTY
23475: LIST
23476: LIST
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: LIST
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: LIST
23487: LIST
23488: LIST
23489: LIST
23490: LIST
23491: LIST
23492: PUSH
23493: EMPTY
23494: LIST
23495: LIST
23496: ST_TO_ADDR
23497: GO 24504
23499: LD_INT 15
23501: DOUBLE
23502: EQUAL
23503: IFTRUE 23507
23505: GO 23731
23507: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23508: LD_ADDR_VAR 0 2
23512: PUSH
23513: LD_INT 1
23515: PUSH
23516: LD_INT 2
23518: PUSH
23519: LD_INT 3
23521: PUSH
23522: LD_INT 4
23524: PUSH
23525: LD_INT 5
23527: PUSH
23528: LD_INT 6
23530: PUSH
23531: LD_INT 7
23533: PUSH
23534: LD_INT 8
23536: PUSH
23537: LD_INT 9
23539: PUSH
23540: LD_INT 10
23542: PUSH
23543: LD_INT 11
23545: PUSH
23546: LD_INT 12
23548: PUSH
23549: LD_INT 13
23551: PUSH
23552: LD_INT 14
23554: PUSH
23555: LD_INT 15
23557: PUSH
23558: LD_INT 16
23560: PUSH
23561: LD_INT 17
23563: PUSH
23564: LD_INT 18
23566: PUSH
23567: LD_INT 19
23569: PUSH
23570: LD_INT 20
23572: PUSH
23573: LD_INT 21
23575: PUSH
23576: LD_INT 22
23578: PUSH
23579: LD_INT 23
23581: PUSH
23582: LD_INT 24
23584: PUSH
23585: LD_INT 25
23587: PUSH
23588: LD_INT 26
23590: PUSH
23591: LD_INT 27
23593: PUSH
23594: LD_INT 28
23596: PUSH
23597: LD_INT 29
23599: PUSH
23600: LD_INT 30
23602: PUSH
23603: LD_INT 31
23605: PUSH
23606: LD_INT 32
23608: PUSH
23609: LD_INT 33
23611: PUSH
23612: LD_INT 34
23614: PUSH
23615: LD_INT 36
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: LIST
23633: LIST
23634: LIST
23635: LIST
23636: LIST
23637: LIST
23638: LIST
23639: LIST
23640: LIST
23641: LIST
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 101
23657: PUSH
23658: LD_INT 102
23660: PUSH
23661: LD_INT 103
23663: PUSH
23664: LD_INT 104
23666: PUSH
23667: LD_INT 105
23669: PUSH
23670: LD_INT 106
23672: PUSH
23673: LD_INT 107
23675: PUSH
23676: LD_INT 108
23678: PUSH
23679: LD_INT 109
23681: PUSH
23682: LD_INT 110
23684: PUSH
23685: LD_INT 111
23687: PUSH
23688: LD_INT 112
23690: PUSH
23691: LD_INT 113
23693: PUSH
23694: LD_INT 114
23696: PUSH
23697: LD_INT 116
23699: PUSH
23700: LD_INT 117
23702: PUSH
23703: LD_INT 118
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: LIST
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: PUSH
23725: EMPTY
23726: LIST
23727: LIST
23728: ST_TO_ADDR
23729: GO 24504
23731: LD_INT 16
23733: DOUBLE
23734: EQUAL
23735: IFTRUE 23739
23737: GO 23875
23739: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23740: LD_ADDR_VAR 0 2
23744: PUSH
23745: LD_INT 2
23747: PUSH
23748: LD_INT 4
23750: PUSH
23751: LD_INT 5
23753: PUSH
23754: LD_INT 7
23756: PUSH
23757: LD_INT 11
23759: PUSH
23760: LD_INT 12
23762: PUSH
23763: LD_INT 15
23765: PUSH
23766: LD_INT 16
23768: PUSH
23769: LD_INT 20
23771: PUSH
23772: LD_INT 21
23774: PUSH
23775: LD_INT 22
23777: PUSH
23778: LD_INT 23
23780: PUSH
23781: LD_INT 25
23783: PUSH
23784: LD_INT 26
23786: PUSH
23787: LD_INT 30
23789: PUSH
23790: LD_INT 31
23792: PUSH
23793: LD_INT 32
23795: PUSH
23796: LD_INT 33
23798: PUSH
23799: LD_INT 34
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: PUSH
23823: LD_INT 101
23825: PUSH
23826: LD_INT 102
23828: PUSH
23829: LD_INT 103
23831: PUSH
23832: LD_INT 106
23834: PUSH
23835: LD_INT 108
23837: PUSH
23838: LD_INT 112
23840: PUSH
23841: LD_INT 113
23843: PUSH
23844: LD_INT 114
23846: PUSH
23847: LD_INT 116
23849: PUSH
23850: LD_INT 117
23852: PUSH
23853: LD_INT 118
23855: PUSH
23856: EMPTY
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: LIST
23862: LIST
23863: LIST
23864: LIST
23865: LIST
23866: LIST
23867: LIST
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: ST_TO_ADDR
23873: GO 24504
23875: LD_INT 17
23877: DOUBLE
23878: EQUAL
23879: IFTRUE 23883
23881: GO 24107
23883: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23884: LD_ADDR_VAR 0 2
23888: PUSH
23889: LD_INT 1
23891: PUSH
23892: LD_INT 2
23894: PUSH
23895: LD_INT 3
23897: PUSH
23898: LD_INT 4
23900: PUSH
23901: LD_INT 5
23903: PUSH
23904: LD_INT 6
23906: PUSH
23907: LD_INT 7
23909: PUSH
23910: LD_INT 8
23912: PUSH
23913: LD_INT 9
23915: PUSH
23916: LD_INT 10
23918: PUSH
23919: LD_INT 11
23921: PUSH
23922: LD_INT 12
23924: PUSH
23925: LD_INT 13
23927: PUSH
23928: LD_INT 14
23930: PUSH
23931: LD_INT 15
23933: PUSH
23934: LD_INT 16
23936: PUSH
23937: LD_INT 17
23939: PUSH
23940: LD_INT 18
23942: PUSH
23943: LD_INT 19
23945: PUSH
23946: LD_INT 20
23948: PUSH
23949: LD_INT 21
23951: PUSH
23952: LD_INT 22
23954: PUSH
23955: LD_INT 23
23957: PUSH
23958: LD_INT 24
23960: PUSH
23961: LD_INT 25
23963: PUSH
23964: LD_INT 26
23966: PUSH
23967: LD_INT 27
23969: PUSH
23970: LD_INT 28
23972: PUSH
23973: LD_INT 29
23975: PUSH
23976: LD_INT 30
23978: PUSH
23979: LD_INT 31
23981: PUSH
23982: LD_INT 32
23984: PUSH
23985: LD_INT 33
23987: PUSH
23988: LD_INT 34
23990: PUSH
23991: LD_INT 36
23993: PUSH
23994: EMPTY
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: LIST
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: PUSH
24031: LD_INT 101
24033: PUSH
24034: LD_INT 102
24036: PUSH
24037: LD_INT 103
24039: PUSH
24040: LD_INT 104
24042: PUSH
24043: LD_INT 105
24045: PUSH
24046: LD_INT 106
24048: PUSH
24049: LD_INT 107
24051: PUSH
24052: LD_INT 108
24054: PUSH
24055: LD_INT 109
24057: PUSH
24058: LD_INT 110
24060: PUSH
24061: LD_INT 111
24063: PUSH
24064: LD_INT 112
24066: PUSH
24067: LD_INT 113
24069: PUSH
24070: LD_INT 114
24072: PUSH
24073: LD_INT 116
24075: PUSH
24076: LD_INT 117
24078: PUSH
24079: LD_INT 118
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: LIST
24086: LIST
24087: LIST
24088: LIST
24089: LIST
24090: LIST
24091: LIST
24092: LIST
24093: LIST
24094: LIST
24095: LIST
24096: LIST
24097: LIST
24098: LIST
24099: LIST
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: ST_TO_ADDR
24105: GO 24504
24107: LD_INT 18
24109: DOUBLE
24110: EQUAL
24111: IFTRUE 24115
24113: GO 24263
24115: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24116: LD_ADDR_VAR 0 2
24120: PUSH
24121: LD_INT 2
24123: PUSH
24124: LD_INT 4
24126: PUSH
24127: LD_INT 5
24129: PUSH
24130: LD_INT 7
24132: PUSH
24133: LD_INT 11
24135: PUSH
24136: LD_INT 12
24138: PUSH
24139: LD_INT 15
24141: PUSH
24142: LD_INT 16
24144: PUSH
24145: LD_INT 20
24147: PUSH
24148: LD_INT 21
24150: PUSH
24151: LD_INT 22
24153: PUSH
24154: LD_INT 23
24156: PUSH
24157: LD_INT 25
24159: PUSH
24160: LD_INT 26
24162: PUSH
24163: LD_INT 30
24165: PUSH
24166: LD_INT 31
24168: PUSH
24169: LD_INT 32
24171: PUSH
24172: LD_INT 33
24174: PUSH
24175: LD_INT 34
24177: PUSH
24178: LD_INT 35
24180: PUSH
24181: LD_INT 36
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: PUSH
24207: LD_INT 101
24209: PUSH
24210: LD_INT 102
24212: PUSH
24213: LD_INT 103
24215: PUSH
24216: LD_INT 106
24218: PUSH
24219: LD_INT 108
24221: PUSH
24222: LD_INT 112
24224: PUSH
24225: LD_INT 113
24227: PUSH
24228: LD_INT 114
24230: PUSH
24231: LD_INT 115
24233: PUSH
24234: LD_INT 116
24236: PUSH
24237: LD_INT 117
24239: PUSH
24240: LD_INT 118
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: ST_TO_ADDR
24261: GO 24504
24263: LD_INT 19
24265: DOUBLE
24266: EQUAL
24267: IFTRUE 24271
24269: GO 24503
24271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24272: LD_ADDR_VAR 0 2
24276: PUSH
24277: LD_INT 1
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: LD_INT 3
24285: PUSH
24286: LD_INT 4
24288: PUSH
24289: LD_INT 5
24291: PUSH
24292: LD_INT 6
24294: PUSH
24295: LD_INT 7
24297: PUSH
24298: LD_INT 8
24300: PUSH
24301: LD_INT 9
24303: PUSH
24304: LD_INT 10
24306: PUSH
24307: LD_INT 11
24309: PUSH
24310: LD_INT 12
24312: PUSH
24313: LD_INT 13
24315: PUSH
24316: LD_INT 14
24318: PUSH
24319: LD_INT 15
24321: PUSH
24322: LD_INT 16
24324: PUSH
24325: LD_INT 17
24327: PUSH
24328: LD_INT 18
24330: PUSH
24331: LD_INT 19
24333: PUSH
24334: LD_INT 20
24336: PUSH
24337: LD_INT 21
24339: PUSH
24340: LD_INT 22
24342: PUSH
24343: LD_INT 23
24345: PUSH
24346: LD_INT 24
24348: PUSH
24349: LD_INT 25
24351: PUSH
24352: LD_INT 26
24354: PUSH
24355: LD_INT 27
24357: PUSH
24358: LD_INT 28
24360: PUSH
24361: LD_INT 29
24363: PUSH
24364: LD_INT 30
24366: PUSH
24367: LD_INT 31
24369: PUSH
24370: LD_INT 32
24372: PUSH
24373: LD_INT 33
24375: PUSH
24376: LD_INT 34
24378: PUSH
24379: LD_INT 35
24381: PUSH
24382: LD_INT 36
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: PUSH
24423: LD_INT 101
24425: PUSH
24426: LD_INT 102
24428: PUSH
24429: LD_INT 103
24431: PUSH
24432: LD_INT 104
24434: PUSH
24435: LD_INT 105
24437: PUSH
24438: LD_INT 106
24440: PUSH
24441: LD_INT 107
24443: PUSH
24444: LD_INT 108
24446: PUSH
24447: LD_INT 109
24449: PUSH
24450: LD_INT 110
24452: PUSH
24453: LD_INT 111
24455: PUSH
24456: LD_INT 112
24458: PUSH
24459: LD_INT 113
24461: PUSH
24462: LD_INT 114
24464: PUSH
24465: LD_INT 115
24467: PUSH
24468: LD_INT 116
24470: PUSH
24471: LD_INT 117
24473: PUSH
24474: LD_INT 118
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: PUSH
24497: EMPTY
24498: LIST
24499: LIST
24500: ST_TO_ADDR
24501: GO 24504
24503: POP
// end else
24504: GO 24735
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24506: LD_ADDR_VAR 0 2
24510: PUSH
24511: LD_INT 1
24513: PUSH
24514: LD_INT 2
24516: PUSH
24517: LD_INT 3
24519: PUSH
24520: LD_INT 4
24522: PUSH
24523: LD_INT 5
24525: PUSH
24526: LD_INT 6
24528: PUSH
24529: LD_INT 7
24531: PUSH
24532: LD_INT 8
24534: PUSH
24535: LD_INT 9
24537: PUSH
24538: LD_INT 10
24540: PUSH
24541: LD_INT 11
24543: PUSH
24544: LD_INT 12
24546: PUSH
24547: LD_INT 13
24549: PUSH
24550: LD_INT 14
24552: PUSH
24553: LD_INT 15
24555: PUSH
24556: LD_INT 16
24558: PUSH
24559: LD_INT 17
24561: PUSH
24562: LD_INT 18
24564: PUSH
24565: LD_INT 19
24567: PUSH
24568: LD_INT 20
24570: PUSH
24571: LD_INT 21
24573: PUSH
24574: LD_INT 22
24576: PUSH
24577: LD_INT 23
24579: PUSH
24580: LD_INT 24
24582: PUSH
24583: LD_INT 25
24585: PUSH
24586: LD_INT 26
24588: PUSH
24589: LD_INT 27
24591: PUSH
24592: LD_INT 28
24594: PUSH
24595: LD_INT 29
24597: PUSH
24598: LD_INT 30
24600: PUSH
24601: LD_INT 31
24603: PUSH
24604: LD_INT 32
24606: PUSH
24607: LD_INT 33
24609: PUSH
24610: LD_INT 34
24612: PUSH
24613: LD_INT 35
24615: PUSH
24616: LD_INT 36
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: PUSH
24657: LD_INT 101
24659: PUSH
24660: LD_INT 102
24662: PUSH
24663: LD_INT 103
24665: PUSH
24666: LD_INT 104
24668: PUSH
24669: LD_INT 105
24671: PUSH
24672: LD_INT 106
24674: PUSH
24675: LD_INT 107
24677: PUSH
24678: LD_INT 108
24680: PUSH
24681: LD_INT 109
24683: PUSH
24684: LD_INT 110
24686: PUSH
24687: LD_INT 111
24689: PUSH
24690: LD_INT 112
24692: PUSH
24693: LD_INT 113
24695: PUSH
24696: LD_INT 114
24698: PUSH
24699: LD_INT 115
24701: PUSH
24702: LD_INT 116
24704: PUSH
24705: LD_INT 117
24707: PUSH
24708: LD_INT 118
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: PUSH
24731: EMPTY
24732: LIST
24733: LIST
24734: ST_TO_ADDR
// if result then
24735: LD_VAR 0 2
24739: IFFALSE 25525
// begin normal :=  ;
24741: LD_ADDR_VAR 0 5
24745: PUSH
24746: LD_STRING 
24748: ST_TO_ADDR
// hardcore :=  ;
24749: LD_ADDR_VAR 0 6
24753: PUSH
24754: LD_STRING 
24756: ST_TO_ADDR
// active :=  ;
24757: LD_ADDR_VAR 0 7
24761: PUSH
24762: LD_STRING 
24764: ST_TO_ADDR
// for i = 1 to normalCounter do
24765: LD_ADDR_VAR 0 8
24769: PUSH
24770: DOUBLE
24771: LD_INT 1
24773: DEC
24774: ST_TO_ADDR
24775: LD_EXP 73
24779: PUSH
24780: FOR_TO
24781: IFFALSE 24882
// begin tmp := 0 ;
24783: LD_ADDR_VAR 0 3
24787: PUSH
24788: LD_STRING 0
24790: ST_TO_ADDR
// if result [ 1 ] then
24791: LD_VAR 0 2
24795: PUSH
24796: LD_INT 1
24798: ARRAY
24799: IFFALSE 24864
// if result [ 1 ] [ 1 ] = i then
24801: LD_VAR 0 2
24805: PUSH
24806: LD_INT 1
24808: ARRAY
24809: PUSH
24810: LD_INT 1
24812: ARRAY
24813: PUSH
24814: LD_VAR 0 8
24818: EQUAL
24819: IFFALSE 24864
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24821: LD_ADDR_VAR 0 2
24825: PUSH
24826: LD_VAR 0 2
24830: PPUSH
24831: LD_INT 1
24833: PPUSH
24834: LD_VAR 0 2
24838: PUSH
24839: LD_INT 1
24841: ARRAY
24842: PPUSH
24843: LD_INT 1
24845: PPUSH
24846: CALL_OW 3
24850: PPUSH
24851: CALL_OW 1
24855: ST_TO_ADDR
// tmp := 1 ;
24856: LD_ADDR_VAR 0 3
24860: PUSH
24861: LD_STRING 1
24863: ST_TO_ADDR
// end ; normal := normal & tmp ;
24864: LD_ADDR_VAR 0 5
24868: PUSH
24869: LD_VAR 0 5
24873: PUSH
24874: LD_VAR 0 3
24878: STR
24879: ST_TO_ADDR
// end ;
24880: GO 24780
24882: POP
24883: POP
// for i = 1 to hardcoreCounter do
24884: LD_ADDR_VAR 0 8
24888: PUSH
24889: DOUBLE
24890: LD_INT 1
24892: DEC
24893: ST_TO_ADDR
24894: LD_EXP 74
24898: PUSH
24899: FOR_TO
24900: IFFALSE 25005
// begin tmp := 0 ;
24902: LD_ADDR_VAR 0 3
24906: PUSH
24907: LD_STRING 0
24909: ST_TO_ADDR
// if result [ 2 ] then
24910: LD_VAR 0 2
24914: PUSH
24915: LD_INT 2
24917: ARRAY
24918: IFFALSE 24987
// if result [ 2 ] [ 1 ] = 100 + i then
24920: LD_VAR 0 2
24924: PUSH
24925: LD_INT 2
24927: ARRAY
24928: PUSH
24929: LD_INT 1
24931: ARRAY
24932: PUSH
24933: LD_INT 100
24935: PUSH
24936: LD_VAR 0 8
24940: PLUS
24941: EQUAL
24942: IFFALSE 24987
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24944: LD_ADDR_VAR 0 2
24948: PUSH
24949: LD_VAR 0 2
24953: PPUSH
24954: LD_INT 2
24956: PPUSH
24957: LD_VAR 0 2
24961: PUSH
24962: LD_INT 2
24964: ARRAY
24965: PPUSH
24966: LD_INT 1
24968: PPUSH
24969: CALL_OW 3
24973: PPUSH
24974: CALL_OW 1
24978: ST_TO_ADDR
// tmp := 1 ;
24979: LD_ADDR_VAR 0 3
24983: PUSH
24984: LD_STRING 1
24986: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24987: LD_ADDR_VAR 0 6
24991: PUSH
24992: LD_VAR 0 6
24996: PUSH
24997: LD_VAR 0 3
25001: STR
25002: ST_TO_ADDR
// end ;
25003: GO 24899
25005: POP
25006: POP
// if isGameLoad then
25007: LD_VAR 0 1
25011: IFFALSE 25486
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
25013: LD_ADDR_VAR 0 4
25017: PUSH
25018: LD_EXP 77
25022: PUSH
25023: LD_EXP 76
25027: PUSH
25028: LD_EXP 78
25032: PUSH
25033: LD_EXP 75
25037: PUSH
25038: LD_EXP 79
25042: PUSH
25043: LD_EXP 80
25047: PUSH
25048: LD_EXP 81
25052: PUSH
25053: LD_EXP 82
25057: PUSH
25058: LD_EXP 83
25062: PUSH
25063: LD_EXP 84
25067: PUSH
25068: LD_EXP 85
25072: PUSH
25073: LD_EXP 86
25077: PUSH
25078: LD_EXP 87
25082: PUSH
25083: LD_EXP 88
25087: PUSH
25088: LD_EXP 96
25092: PUSH
25093: LD_EXP 97
25097: PUSH
25098: LD_EXP 98
25102: PUSH
25103: LD_EXP 99
25107: PUSH
25108: LD_EXP 101
25112: PUSH
25113: LD_EXP 102
25117: PUSH
25118: LD_EXP 103
25122: PUSH
25123: LD_EXP 106
25127: PUSH
25128: LD_EXP 108
25132: PUSH
25133: LD_EXP 109
25137: PUSH
25138: LD_EXP 110
25142: PUSH
25143: LD_EXP 112
25147: PUSH
25148: LD_EXP 113
25152: PUSH
25153: LD_EXP 116
25157: PUSH
25158: LD_EXP 117
25162: PUSH
25163: LD_EXP 118
25167: PUSH
25168: LD_EXP 119
25172: PUSH
25173: LD_EXP 120
25177: PUSH
25178: LD_EXP 121
25182: PUSH
25183: LD_EXP 122
25187: PUSH
25188: LD_EXP 123
25192: PUSH
25193: LD_EXP 124
25197: PUSH
25198: LD_EXP 89
25202: PUSH
25203: LD_EXP 90
25207: PUSH
25208: LD_EXP 93
25212: PUSH
25213: LD_EXP 94
25217: PUSH
25218: LD_EXP 95
25222: PUSH
25223: LD_EXP 91
25227: PUSH
25228: LD_EXP 92
25232: PUSH
25233: LD_EXP 100
25237: PUSH
25238: LD_EXP 104
25242: PUSH
25243: LD_EXP 105
25247: PUSH
25248: LD_EXP 107
25252: PUSH
25253: LD_EXP 111
25257: PUSH
25258: LD_EXP 114
25262: PUSH
25263: LD_EXP 115
25267: PUSH
25268: LD_EXP 125
25272: PUSH
25273: LD_EXP 126
25277: PUSH
25278: LD_EXP 127
25282: PUSH
25283: LD_EXP 128
25287: PUSH
25288: EMPTY
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: LIST
25314: LIST
25315: LIST
25316: LIST
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: LIST
25323: LIST
25324: LIST
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: LIST
25331: LIST
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: LIST
25343: ST_TO_ADDR
// tmp :=  ;
25344: LD_ADDR_VAR 0 3
25348: PUSH
25349: LD_STRING 
25351: ST_TO_ADDR
// for i = 1 to normalCounter do
25352: LD_ADDR_VAR 0 8
25356: PUSH
25357: DOUBLE
25358: LD_INT 1
25360: DEC
25361: ST_TO_ADDR
25362: LD_EXP 73
25366: PUSH
25367: FOR_TO
25368: IFFALSE 25404
// begin if flags [ i ] then
25370: LD_VAR 0 4
25374: PUSH
25375: LD_VAR 0 8
25379: ARRAY
25380: IFFALSE 25402
// tmp := tmp & i & ; ;
25382: LD_ADDR_VAR 0 3
25386: PUSH
25387: LD_VAR 0 3
25391: PUSH
25392: LD_VAR 0 8
25396: STR
25397: PUSH
25398: LD_STRING ;
25400: STR
25401: ST_TO_ADDR
// end ;
25402: GO 25367
25404: POP
25405: POP
// for i = 1 to hardcoreCounter do
25406: LD_ADDR_VAR 0 8
25410: PUSH
25411: DOUBLE
25412: LD_INT 1
25414: DEC
25415: ST_TO_ADDR
25416: LD_EXP 74
25420: PUSH
25421: FOR_TO
25422: IFFALSE 25468
// begin if flags [ normalCounter + i ] then
25424: LD_VAR 0 4
25428: PUSH
25429: LD_EXP 73
25433: PUSH
25434: LD_VAR 0 8
25438: PLUS
25439: ARRAY
25440: IFFALSE 25466
// tmp := tmp & ( 100 + i ) & ; ;
25442: LD_ADDR_VAR 0 3
25446: PUSH
25447: LD_VAR 0 3
25451: PUSH
25452: LD_INT 100
25454: PUSH
25455: LD_VAR 0 8
25459: PLUS
25460: STR
25461: PUSH
25462: LD_STRING ;
25464: STR
25465: ST_TO_ADDR
// end ;
25466: GO 25421
25468: POP
25469: POP
// if tmp then
25470: LD_VAR 0 3
25474: IFFALSE 25486
// active := tmp ;
25476: LD_ADDR_VAR 0 7
25480: PUSH
25481: LD_VAR 0 3
25485: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25486: LD_STRING getStreamItemsFromMission("
25488: PUSH
25489: LD_VAR 0 5
25493: STR
25494: PUSH
25495: LD_STRING ","
25497: STR
25498: PUSH
25499: LD_VAR 0 6
25503: STR
25504: PUSH
25505: LD_STRING ","
25507: STR
25508: PUSH
25509: LD_VAR 0 7
25513: STR
25514: PUSH
25515: LD_STRING ")
25517: STR
25518: PPUSH
25519: CALL_OW 559
// end else
25523: GO 25532
// ToLua ( getStreamItemsFromMission("","","") ) ;
25525: LD_STRING getStreamItemsFromMission("","","")
25527: PPUSH
25528: CALL_OW 559
// end ;
25532: LD_VAR 0 2
25536: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25537: LD_EXP 72
25541: PUSH
25542: LD_EXP 77
25546: AND
25547: IFFALSE 25671
25549: GO 25551
25551: DISABLE
25552: LD_INT 0
25554: PPUSH
25555: PPUSH
// begin enable ;
25556: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25557: LD_ADDR_VAR 0 2
25561: PUSH
25562: LD_INT 22
25564: PUSH
25565: LD_OWVAR 2
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 2
25576: PUSH
25577: LD_INT 34
25579: PUSH
25580: LD_INT 7
25582: PUSH
25583: EMPTY
25584: LIST
25585: LIST
25586: PUSH
25587: LD_INT 34
25589: PUSH
25590: LD_INT 45
25592: PUSH
25593: EMPTY
25594: LIST
25595: LIST
25596: PUSH
25597: LD_INT 34
25599: PUSH
25600: LD_INT 28
25602: PUSH
25603: EMPTY
25604: LIST
25605: LIST
25606: PUSH
25607: LD_INT 34
25609: PUSH
25610: LD_INT 47
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: LIST
25621: LIST
25622: LIST
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PPUSH
25628: CALL_OW 69
25632: ST_TO_ADDR
// if not tmp then
25633: LD_VAR 0 2
25637: NOT
25638: IFFALSE 25642
// exit ;
25640: GO 25671
// for i in tmp do
25642: LD_ADDR_VAR 0 1
25646: PUSH
25647: LD_VAR 0 2
25651: PUSH
25652: FOR_IN
25653: IFFALSE 25669
// begin SetLives ( i , 0 ) ;
25655: LD_VAR 0 1
25659: PPUSH
25660: LD_INT 0
25662: PPUSH
25663: CALL_OW 234
// end ;
25667: GO 25652
25669: POP
25670: POP
// end ;
25671: PPOPN 2
25673: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25674: LD_EXP 72
25678: PUSH
25679: LD_EXP 78
25683: AND
25684: IFFALSE 25768
25686: GO 25688
25688: DISABLE
25689: LD_INT 0
25691: PPUSH
25692: PPUSH
// begin enable ;
25693: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25694: LD_ADDR_VAR 0 2
25698: PUSH
25699: LD_INT 22
25701: PUSH
25702: LD_OWVAR 2
25706: PUSH
25707: EMPTY
25708: LIST
25709: LIST
25710: PUSH
25711: LD_INT 32
25713: PUSH
25714: LD_INT 3
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PPUSH
25725: CALL_OW 69
25729: ST_TO_ADDR
// if not tmp then
25730: LD_VAR 0 2
25734: NOT
25735: IFFALSE 25739
// exit ;
25737: GO 25768
// for i in tmp do
25739: LD_ADDR_VAR 0 1
25743: PUSH
25744: LD_VAR 0 2
25748: PUSH
25749: FOR_IN
25750: IFFALSE 25766
// begin SetLives ( i , 0 ) ;
25752: LD_VAR 0 1
25756: PPUSH
25757: LD_INT 0
25759: PPUSH
25760: CALL_OW 234
// end ;
25764: GO 25749
25766: POP
25767: POP
// end ;
25768: PPOPN 2
25770: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25771: LD_EXP 72
25775: PUSH
25776: LD_EXP 75
25780: AND
25781: IFFALSE 25874
25783: GO 25785
25785: DISABLE
25786: LD_INT 0
25788: PPUSH
// begin enable ;
25789: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25790: LD_ADDR_VAR 0 1
25794: PUSH
25795: LD_INT 22
25797: PUSH
25798: LD_OWVAR 2
25802: PUSH
25803: EMPTY
25804: LIST
25805: LIST
25806: PUSH
25807: LD_INT 2
25809: PUSH
25810: LD_INT 25
25812: PUSH
25813: LD_INT 5
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: PUSH
25820: LD_INT 25
25822: PUSH
25823: LD_INT 9
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PUSH
25830: LD_INT 25
25832: PUSH
25833: LD_INT 8
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: LIST
25844: LIST
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PPUSH
25850: CALL_OW 69
25854: PUSH
25855: FOR_IN
25856: IFFALSE 25872
// begin SetClass ( i , 1 ) ;
25858: LD_VAR 0 1
25862: PPUSH
25863: LD_INT 1
25865: PPUSH
25866: CALL_OW 336
// end ;
25870: GO 25855
25872: POP
25873: POP
// end ;
25874: PPOPN 1
25876: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25877: LD_EXP 72
25881: PUSH
25882: LD_EXP 76
25886: AND
25887: PUSH
25888: LD_OWVAR 65
25892: PUSH
25893: LD_INT 7
25895: LESS
25896: AND
25897: IFFALSE 25911
25899: GO 25901
25901: DISABLE
// begin enable ;
25902: ENABLE
// game_speed := 7 ;
25903: LD_ADDR_OWVAR 65
25907: PUSH
25908: LD_INT 7
25910: ST_TO_ADDR
// end ;
25911: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25912: LD_EXP 72
25916: PUSH
25917: LD_EXP 79
25921: AND
25922: IFFALSE 26124
25924: GO 25926
25926: DISABLE
25927: LD_INT 0
25929: PPUSH
25930: PPUSH
25931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25932: LD_ADDR_VAR 0 3
25936: PUSH
25937: LD_INT 81
25939: PUSH
25940: LD_OWVAR 2
25944: PUSH
25945: EMPTY
25946: LIST
25947: LIST
25948: PUSH
25949: LD_INT 21
25951: PUSH
25952: LD_INT 1
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PPUSH
25963: CALL_OW 69
25967: ST_TO_ADDR
// if not tmp then
25968: LD_VAR 0 3
25972: NOT
25973: IFFALSE 25977
// exit ;
25975: GO 26124
// if tmp > 5 then
25977: LD_VAR 0 3
25981: PUSH
25982: LD_INT 5
25984: GREATER
25985: IFFALSE 25997
// k := 5 else
25987: LD_ADDR_VAR 0 2
25991: PUSH
25992: LD_INT 5
25994: ST_TO_ADDR
25995: GO 26007
// k := tmp ;
25997: LD_ADDR_VAR 0 2
26001: PUSH
26002: LD_VAR 0 3
26006: ST_TO_ADDR
// for i := 1 to k do
26007: LD_ADDR_VAR 0 1
26011: PUSH
26012: DOUBLE
26013: LD_INT 1
26015: DEC
26016: ST_TO_ADDR
26017: LD_VAR 0 2
26021: PUSH
26022: FOR_TO
26023: IFFALSE 26122
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
26025: LD_VAR 0 3
26029: PUSH
26030: LD_VAR 0 1
26034: ARRAY
26035: PPUSH
26036: LD_VAR 0 1
26040: PUSH
26041: LD_INT 4
26043: MOD
26044: PUSH
26045: LD_INT 1
26047: PLUS
26048: PPUSH
26049: CALL_OW 259
26053: PUSH
26054: LD_INT 10
26056: LESS
26057: IFFALSE 26120
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26059: LD_VAR 0 3
26063: PUSH
26064: LD_VAR 0 1
26068: ARRAY
26069: PPUSH
26070: LD_VAR 0 1
26074: PUSH
26075: LD_INT 4
26077: MOD
26078: PUSH
26079: LD_INT 1
26081: PLUS
26082: PPUSH
26083: LD_VAR 0 3
26087: PUSH
26088: LD_VAR 0 1
26092: ARRAY
26093: PPUSH
26094: LD_VAR 0 1
26098: PUSH
26099: LD_INT 4
26101: MOD
26102: PUSH
26103: LD_INT 1
26105: PLUS
26106: PPUSH
26107: CALL_OW 259
26111: PUSH
26112: LD_INT 1
26114: PLUS
26115: PPUSH
26116: CALL_OW 237
26120: GO 26022
26122: POP
26123: POP
// end ;
26124: PPOPN 3
26126: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26127: LD_EXP 72
26131: PUSH
26132: LD_EXP 80
26136: AND
26137: IFFALSE 26157
26139: GO 26141
26141: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26142: LD_INT 4
26144: PPUSH
26145: LD_OWVAR 2
26149: PPUSH
26150: LD_INT 0
26152: PPUSH
26153: CALL_OW 324
26157: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26158: LD_EXP 72
26162: PUSH
26163: LD_EXP 109
26167: AND
26168: IFFALSE 26188
26170: GO 26172
26172: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26173: LD_INT 19
26175: PPUSH
26176: LD_OWVAR 2
26180: PPUSH
26181: LD_INT 0
26183: PPUSH
26184: CALL_OW 324
26188: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26189: LD_EXP 72
26193: PUSH
26194: LD_EXP 81
26198: AND
26199: IFFALSE 26301
26201: GO 26203
26203: DISABLE
26204: LD_INT 0
26206: PPUSH
26207: PPUSH
// begin enable ;
26208: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26209: LD_ADDR_VAR 0 2
26213: PUSH
26214: LD_INT 22
26216: PUSH
26217: LD_OWVAR 2
26221: PUSH
26222: EMPTY
26223: LIST
26224: LIST
26225: PUSH
26226: LD_INT 2
26228: PUSH
26229: LD_INT 34
26231: PUSH
26232: LD_INT 11
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 34
26241: PUSH
26242: LD_INT 30
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: EMPTY
26250: LIST
26251: LIST
26252: LIST
26253: PUSH
26254: EMPTY
26255: LIST
26256: LIST
26257: PPUSH
26258: CALL_OW 69
26262: ST_TO_ADDR
// if not tmp then
26263: LD_VAR 0 2
26267: NOT
26268: IFFALSE 26272
// exit ;
26270: GO 26301
// for i in tmp do
26272: LD_ADDR_VAR 0 1
26276: PUSH
26277: LD_VAR 0 2
26281: PUSH
26282: FOR_IN
26283: IFFALSE 26299
// begin SetLives ( i , 0 ) ;
26285: LD_VAR 0 1
26289: PPUSH
26290: LD_INT 0
26292: PPUSH
26293: CALL_OW 234
// end ;
26297: GO 26282
26299: POP
26300: POP
// end ;
26301: PPOPN 2
26303: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26304: LD_EXP 72
26308: PUSH
26309: LD_EXP 82
26313: AND
26314: IFFALSE 26334
26316: GO 26318
26318: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26319: LD_INT 32
26321: PPUSH
26322: LD_OWVAR 2
26326: PPUSH
26327: LD_INT 0
26329: PPUSH
26330: CALL_OW 324
26334: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26335: LD_EXP 72
26339: PUSH
26340: LD_EXP 83
26344: AND
26345: IFFALSE 26526
26347: GO 26349
26349: DISABLE
26350: LD_INT 0
26352: PPUSH
26353: PPUSH
26354: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26355: LD_ADDR_VAR 0 2
26359: PUSH
26360: LD_INT 22
26362: PUSH
26363: LD_OWVAR 2
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: LD_INT 33
26374: PUSH
26375: LD_INT 3
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PPUSH
26386: CALL_OW 69
26390: ST_TO_ADDR
// if not tmp then
26391: LD_VAR 0 2
26395: NOT
26396: IFFALSE 26400
// exit ;
26398: GO 26526
// side := 0 ;
26400: LD_ADDR_VAR 0 3
26404: PUSH
26405: LD_INT 0
26407: ST_TO_ADDR
// for i := 1 to 8 do
26408: LD_ADDR_VAR 0 1
26412: PUSH
26413: DOUBLE
26414: LD_INT 1
26416: DEC
26417: ST_TO_ADDR
26418: LD_INT 8
26420: PUSH
26421: FOR_TO
26422: IFFALSE 26470
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26424: LD_OWVAR 2
26428: PUSH
26429: LD_VAR 0 1
26433: NONEQUAL
26434: PUSH
26435: LD_OWVAR 2
26439: PPUSH
26440: LD_VAR 0 1
26444: PPUSH
26445: CALL_OW 81
26449: PUSH
26450: LD_INT 2
26452: EQUAL
26453: AND
26454: IFFALSE 26468
// begin side := i ;
26456: LD_ADDR_VAR 0 3
26460: PUSH
26461: LD_VAR 0 1
26465: ST_TO_ADDR
// break ;
26466: GO 26470
// end ;
26468: GO 26421
26470: POP
26471: POP
// if not side then
26472: LD_VAR 0 3
26476: NOT
26477: IFFALSE 26481
// exit ;
26479: GO 26526
// for i := 1 to tmp do
26481: LD_ADDR_VAR 0 1
26485: PUSH
26486: DOUBLE
26487: LD_INT 1
26489: DEC
26490: ST_TO_ADDR
26491: LD_VAR 0 2
26495: PUSH
26496: FOR_TO
26497: IFFALSE 26524
// if Prob ( 60 ) then
26499: LD_INT 60
26501: PPUSH
26502: CALL_OW 13
26506: IFFALSE 26522
// SetSide ( i , side ) ;
26508: LD_VAR 0 1
26512: PPUSH
26513: LD_VAR 0 3
26517: PPUSH
26518: CALL_OW 235
26522: GO 26496
26524: POP
26525: POP
// end ;
26526: PPOPN 3
26528: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26529: LD_EXP 72
26533: PUSH
26534: LD_EXP 85
26538: AND
26539: IFFALSE 26658
26541: GO 26543
26543: DISABLE
26544: LD_INT 0
26546: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26547: LD_ADDR_VAR 0 1
26551: PUSH
26552: LD_INT 22
26554: PUSH
26555: LD_OWVAR 2
26559: PUSH
26560: EMPTY
26561: LIST
26562: LIST
26563: PUSH
26564: LD_INT 21
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PUSH
26574: LD_INT 3
26576: PUSH
26577: LD_INT 23
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: LIST
26595: PPUSH
26596: CALL_OW 69
26600: PUSH
26601: FOR_IN
26602: IFFALSE 26656
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26604: LD_VAR 0 1
26608: PPUSH
26609: CALL_OW 257
26613: PUSH
26614: LD_INT 1
26616: PUSH
26617: LD_INT 2
26619: PUSH
26620: LD_INT 3
26622: PUSH
26623: LD_INT 4
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: LIST
26630: LIST
26631: IN
26632: IFFALSE 26654
// SetClass ( un , rand ( 1 , 4 ) ) ;
26634: LD_VAR 0 1
26638: PPUSH
26639: LD_INT 1
26641: PPUSH
26642: LD_INT 4
26644: PPUSH
26645: CALL_OW 12
26649: PPUSH
26650: CALL_OW 336
26654: GO 26601
26656: POP
26657: POP
// end ;
26658: PPOPN 1
26660: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26661: LD_EXP 72
26665: PUSH
26666: LD_EXP 84
26670: AND
26671: IFFALSE 26750
26673: GO 26675
26675: DISABLE
26676: LD_INT 0
26678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26679: LD_ADDR_VAR 0 1
26683: PUSH
26684: LD_INT 22
26686: PUSH
26687: LD_OWVAR 2
26691: PUSH
26692: EMPTY
26693: LIST
26694: LIST
26695: PUSH
26696: LD_INT 21
26698: PUSH
26699: LD_INT 3
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PPUSH
26710: CALL_OW 69
26714: ST_TO_ADDR
// if not tmp then
26715: LD_VAR 0 1
26719: NOT
26720: IFFALSE 26724
// exit ;
26722: GO 26750
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26724: LD_VAR 0 1
26728: PUSH
26729: LD_INT 1
26731: PPUSH
26732: LD_VAR 0 1
26736: PPUSH
26737: CALL_OW 12
26741: ARRAY
26742: PPUSH
26743: LD_INT 100
26745: PPUSH
26746: CALL_OW 234
// end ;
26750: PPOPN 1
26752: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26753: LD_EXP 72
26757: PUSH
26758: LD_EXP 86
26762: AND
26763: IFFALSE 26861
26765: GO 26767
26767: DISABLE
26768: LD_INT 0
26770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26771: LD_ADDR_VAR 0 1
26775: PUSH
26776: LD_INT 22
26778: PUSH
26779: LD_OWVAR 2
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PUSH
26788: LD_INT 21
26790: PUSH
26791: LD_INT 1
26793: PUSH
26794: EMPTY
26795: LIST
26796: LIST
26797: PUSH
26798: EMPTY
26799: LIST
26800: LIST
26801: PPUSH
26802: CALL_OW 69
26806: ST_TO_ADDR
// if not tmp then
26807: LD_VAR 0 1
26811: NOT
26812: IFFALSE 26816
// exit ;
26814: GO 26861
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26816: LD_VAR 0 1
26820: PUSH
26821: LD_INT 1
26823: PPUSH
26824: LD_VAR 0 1
26828: PPUSH
26829: CALL_OW 12
26833: ARRAY
26834: PPUSH
26835: LD_INT 1
26837: PPUSH
26838: LD_INT 4
26840: PPUSH
26841: CALL_OW 12
26845: PPUSH
26846: LD_INT 3000
26848: PPUSH
26849: LD_INT 9000
26851: PPUSH
26852: CALL_OW 12
26856: PPUSH
26857: CALL_OW 492
// end ;
26861: PPOPN 1
26863: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26864: LD_EXP 72
26868: PUSH
26869: LD_EXP 87
26873: AND
26874: IFFALSE 26894
26876: GO 26878
26878: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26879: LD_INT 1
26881: PPUSH
26882: LD_OWVAR 2
26886: PPUSH
26887: LD_INT 0
26889: PPUSH
26890: CALL_OW 324
26894: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26895: LD_EXP 72
26899: PUSH
26900: LD_EXP 88
26904: AND
26905: IFFALSE 26988
26907: GO 26909
26909: DISABLE
26910: LD_INT 0
26912: PPUSH
26913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26914: LD_ADDR_VAR 0 2
26918: PUSH
26919: LD_INT 22
26921: PUSH
26922: LD_OWVAR 2
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: LD_INT 21
26933: PUSH
26934: LD_INT 3
26936: PUSH
26937: EMPTY
26938: LIST
26939: LIST
26940: PUSH
26941: EMPTY
26942: LIST
26943: LIST
26944: PPUSH
26945: CALL_OW 69
26949: ST_TO_ADDR
// if not tmp then
26950: LD_VAR 0 2
26954: NOT
26955: IFFALSE 26959
// exit ;
26957: GO 26988
// for i in tmp do
26959: LD_ADDR_VAR 0 1
26963: PUSH
26964: LD_VAR 0 2
26968: PUSH
26969: FOR_IN
26970: IFFALSE 26986
// SetBLevel ( i , 10 ) ;
26972: LD_VAR 0 1
26976: PPUSH
26977: LD_INT 10
26979: PPUSH
26980: CALL_OW 241
26984: GO 26969
26986: POP
26987: POP
// end ;
26988: PPOPN 2
26990: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26991: LD_EXP 72
26995: PUSH
26996: LD_EXP 89
27000: AND
27001: IFFALSE 27112
27003: GO 27005
27005: DISABLE
27006: LD_INT 0
27008: PPUSH
27009: PPUSH
27010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
27011: LD_ADDR_VAR 0 3
27015: PUSH
27016: LD_INT 22
27018: PUSH
27019: LD_OWVAR 2
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PUSH
27028: LD_INT 25
27030: PUSH
27031: LD_INT 1
27033: PUSH
27034: EMPTY
27035: LIST
27036: LIST
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PPUSH
27042: CALL_OW 69
27046: ST_TO_ADDR
// if not tmp then
27047: LD_VAR 0 3
27051: NOT
27052: IFFALSE 27056
// exit ;
27054: GO 27112
// un := tmp [ rand ( 1 , tmp ) ] ;
27056: LD_ADDR_VAR 0 2
27060: PUSH
27061: LD_VAR 0 3
27065: PUSH
27066: LD_INT 1
27068: PPUSH
27069: LD_VAR 0 3
27073: PPUSH
27074: CALL_OW 12
27078: ARRAY
27079: ST_TO_ADDR
// if Crawls ( un ) then
27080: LD_VAR 0 2
27084: PPUSH
27085: CALL_OW 318
27089: IFFALSE 27100
// ComWalk ( un ) ;
27091: LD_VAR 0 2
27095: PPUSH
27096: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27100: LD_VAR 0 2
27104: PPUSH
27105: LD_INT 5
27107: PPUSH
27108: CALL_OW 336
// end ;
27112: PPOPN 3
27114: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27115: LD_EXP 72
27119: PUSH
27120: LD_EXP 90
27124: AND
27125: PUSH
27126: LD_OWVAR 67
27130: PUSH
27131: LD_INT 4
27133: LESS
27134: AND
27135: IFFALSE 27154
27137: GO 27139
27139: DISABLE
// begin Difficulty := Difficulty + 1 ;
27140: LD_ADDR_OWVAR 67
27144: PUSH
27145: LD_OWVAR 67
27149: PUSH
27150: LD_INT 1
27152: PLUS
27153: ST_TO_ADDR
// end ;
27154: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27155: LD_EXP 72
27159: PUSH
27160: LD_EXP 91
27164: AND
27165: IFFALSE 27268
27167: GO 27169
27169: DISABLE
27170: LD_INT 0
27172: PPUSH
// begin for i := 1 to 5 do
27173: LD_ADDR_VAR 0 1
27177: PUSH
27178: DOUBLE
27179: LD_INT 1
27181: DEC
27182: ST_TO_ADDR
27183: LD_INT 5
27185: PUSH
27186: FOR_TO
27187: IFFALSE 27266
// begin uc_nation := nation_nature ;
27189: LD_ADDR_OWVAR 21
27193: PUSH
27194: LD_INT 0
27196: ST_TO_ADDR
// uc_side := 0 ;
27197: LD_ADDR_OWVAR 20
27201: PUSH
27202: LD_INT 0
27204: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27205: LD_ADDR_OWVAR 29
27209: PUSH
27210: LD_INT 12
27212: PUSH
27213: LD_INT 12
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: ST_TO_ADDR
// hc_agressivity := 20 ;
27220: LD_ADDR_OWVAR 35
27224: PUSH
27225: LD_INT 20
27227: ST_TO_ADDR
// hc_class := class_tiger ;
27228: LD_ADDR_OWVAR 28
27232: PUSH
27233: LD_INT 14
27235: ST_TO_ADDR
// hc_gallery :=  ;
27236: LD_ADDR_OWVAR 33
27240: PUSH
27241: LD_STRING 
27243: ST_TO_ADDR
// hc_name :=  ;
27244: LD_ADDR_OWVAR 26
27248: PUSH
27249: LD_STRING 
27251: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27252: CALL_OW 44
27256: PPUSH
27257: LD_INT 0
27259: PPUSH
27260: CALL_OW 51
// end ;
27264: GO 27186
27266: POP
27267: POP
// end ;
27268: PPOPN 1
27270: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27271: LD_EXP 72
27275: PUSH
27276: LD_EXP 92
27280: AND
27281: IFFALSE 27290
27283: GO 27285
27285: DISABLE
// StreamSibBomb ;
27286: CALL 27291 0 0
27290: END
// export function StreamSibBomb ; var i , x , y ; begin
27291: LD_INT 0
27293: PPUSH
27294: PPUSH
27295: PPUSH
27296: PPUSH
// result := false ;
27297: LD_ADDR_VAR 0 1
27301: PUSH
27302: LD_INT 0
27304: ST_TO_ADDR
// for i := 1 to 16 do
27305: LD_ADDR_VAR 0 2
27309: PUSH
27310: DOUBLE
27311: LD_INT 1
27313: DEC
27314: ST_TO_ADDR
27315: LD_INT 16
27317: PUSH
27318: FOR_TO
27319: IFFALSE 27518
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27321: LD_ADDR_VAR 0 3
27325: PUSH
27326: LD_INT 10
27328: PUSH
27329: LD_INT 20
27331: PUSH
27332: LD_INT 30
27334: PUSH
27335: LD_INT 40
27337: PUSH
27338: LD_INT 50
27340: PUSH
27341: LD_INT 60
27343: PUSH
27344: LD_INT 70
27346: PUSH
27347: LD_INT 80
27349: PUSH
27350: LD_INT 90
27352: PUSH
27353: LD_INT 100
27355: PUSH
27356: LD_INT 110
27358: PUSH
27359: LD_INT 120
27361: PUSH
27362: LD_INT 130
27364: PUSH
27365: LD_INT 140
27367: PUSH
27368: LD_INT 150
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 1
27390: PPUSH
27391: LD_INT 15
27393: PPUSH
27394: CALL_OW 12
27398: ARRAY
27399: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27400: LD_ADDR_VAR 0 4
27404: PUSH
27405: LD_INT 10
27407: PUSH
27408: LD_INT 20
27410: PUSH
27411: LD_INT 30
27413: PUSH
27414: LD_INT 40
27416: PUSH
27417: LD_INT 50
27419: PUSH
27420: LD_INT 60
27422: PUSH
27423: LD_INT 70
27425: PUSH
27426: LD_INT 80
27428: PUSH
27429: LD_INT 90
27431: PUSH
27432: LD_INT 100
27434: PUSH
27435: LD_INT 110
27437: PUSH
27438: LD_INT 120
27440: PUSH
27441: LD_INT 130
27443: PUSH
27444: LD_INT 140
27446: PUSH
27447: LD_INT 150
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: LIST
27465: LIST
27466: PUSH
27467: LD_INT 1
27469: PPUSH
27470: LD_INT 15
27472: PPUSH
27473: CALL_OW 12
27477: ARRAY
27478: ST_TO_ADDR
// if ValidHex ( x , y ) then
27479: LD_VAR 0 3
27483: PPUSH
27484: LD_VAR 0 4
27488: PPUSH
27489: CALL_OW 488
27493: IFFALSE 27516
// begin result := [ x , y ] ;
27495: LD_ADDR_VAR 0 1
27499: PUSH
27500: LD_VAR 0 3
27504: PUSH
27505: LD_VAR 0 4
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: ST_TO_ADDR
// break ;
27514: GO 27518
// end ; end ;
27516: GO 27318
27518: POP
27519: POP
// if result then
27520: LD_VAR 0 1
27524: IFFALSE 27584
// begin ToLua ( playSibBomb() ) ;
27526: LD_STRING playSibBomb()
27528: PPUSH
27529: CALL_OW 559
// wait ( 0 0$14 ) ;
27533: LD_INT 490
27535: PPUSH
27536: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27540: LD_VAR 0 1
27544: PUSH
27545: LD_INT 1
27547: ARRAY
27548: PPUSH
27549: LD_VAR 0 1
27553: PUSH
27554: LD_INT 2
27556: ARRAY
27557: PPUSH
27558: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27562: LD_VAR 0 1
27566: PUSH
27567: LD_INT 1
27569: ARRAY
27570: PPUSH
27571: LD_VAR 0 1
27575: PUSH
27576: LD_INT 2
27578: ARRAY
27579: PPUSH
27580: CALL_OW 429
// end ; end ;
27584: LD_VAR 0 1
27588: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27589: LD_EXP 72
27593: PUSH
27594: LD_EXP 94
27598: AND
27599: IFFALSE 27611
27601: GO 27603
27603: DISABLE
// YouLost (  ) ;
27604: LD_STRING 
27606: PPUSH
27607: CALL_OW 104
27611: END
// every 0 0$1 trigger StreamModeActive and sFog do
27612: LD_EXP 72
27616: PUSH
27617: LD_EXP 93
27621: AND
27622: IFFALSE 27636
27624: GO 27626
27626: DISABLE
// FogOff ( your_side ) ;
27627: LD_OWVAR 2
27631: PPUSH
27632: CALL_OW 344
27636: END
// every 0 0$1 trigger StreamModeActive and sSun do
27637: LD_EXP 72
27641: PUSH
27642: LD_EXP 95
27646: AND
27647: IFFALSE 27675
27649: GO 27651
27651: DISABLE
// begin solar_recharge_percent := 0 ;
27652: LD_ADDR_OWVAR 79
27656: PUSH
27657: LD_INT 0
27659: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27660: LD_INT 10500
27662: PPUSH
27663: CALL_OW 67
// solar_recharge_percent := 100 ;
27667: LD_ADDR_OWVAR 79
27671: PUSH
27672: LD_INT 100
27674: ST_TO_ADDR
// end ;
27675: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27676: LD_EXP 72
27680: PUSH
27681: LD_EXP 96
27685: AND
27686: IFFALSE 27925
27688: GO 27690
27690: DISABLE
27691: LD_INT 0
27693: PPUSH
27694: PPUSH
27695: PPUSH
// begin tmp := [ ] ;
27696: LD_ADDR_VAR 0 3
27700: PUSH
27701: EMPTY
27702: ST_TO_ADDR
// for i := 1 to 6 do
27703: LD_ADDR_VAR 0 1
27707: PUSH
27708: DOUBLE
27709: LD_INT 1
27711: DEC
27712: ST_TO_ADDR
27713: LD_INT 6
27715: PUSH
27716: FOR_TO
27717: IFFALSE 27822
// begin uc_nation := nation_nature ;
27719: LD_ADDR_OWVAR 21
27723: PUSH
27724: LD_INT 0
27726: ST_TO_ADDR
// uc_side := 0 ;
27727: LD_ADDR_OWVAR 20
27731: PUSH
27732: LD_INT 0
27734: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27735: LD_ADDR_OWVAR 29
27739: PUSH
27740: LD_INT 12
27742: PUSH
27743: LD_INT 12
27745: PUSH
27746: EMPTY
27747: LIST
27748: LIST
27749: ST_TO_ADDR
// hc_agressivity := 20 ;
27750: LD_ADDR_OWVAR 35
27754: PUSH
27755: LD_INT 20
27757: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27758: LD_ADDR_OWVAR 28
27762: PUSH
27763: LD_INT 17
27765: ST_TO_ADDR
// hc_gallery :=  ;
27766: LD_ADDR_OWVAR 33
27770: PUSH
27771: LD_STRING 
27773: ST_TO_ADDR
// hc_name :=  ;
27774: LD_ADDR_OWVAR 26
27778: PUSH
27779: LD_STRING 
27781: ST_TO_ADDR
// un := CreateHuman ;
27782: LD_ADDR_VAR 0 2
27786: PUSH
27787: CALL_OW 44
27791: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27792: LD_VAR 0 2
27796: PPUSH
27797: LD_INT 1
27799: PPUSH
27800: CALL_OW 51
// tmp := tmp ^ un ;
27804: LD_ADDR_VAR 0 3
27808: PUSH
27809: LD_VAR 0 3
27813: PUSH
27814: LD_VAR 0 2
27818: ADD
27819: ST_TO_ADDR
// end ;
27820: GO 27716
27822: POP
27823: POP
// repeat wait ( 0 0$1 ) ;
27824: LD_INT 35
27826: PPUSH
27827: CALL_OW 67
// for un in tmp do
27831: LD_ADDR_VAR 0 2
27835: PUSH
27836: LD_VAR 0 3
27840: PUSH
27841: FOR_IN
27842: IFFALSE 27916
// begin if IsDead ( un ) then
27844: LD_VAR 0 2
27848: PPUSH
27849: CALL_OW 301
27853: IFFALSE 27873
// begin tmp := tmp diff un ;
27855: LD_ADDR_VAR 0 3
27859: PUSH
27860: LD_VAR 0 3
27864: PUSH
27865: LD_VAR 0 2
27869: DIFF
27870: ST_TO_ADDR
// continue ;
27871: GO 27841
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27873: LD_VAR 0 2
27877: PPUSH
27878: LD_INT 3
27880: PUSH
27881: LD_INT 22
27883: PUSH
27884: LD_INT 0
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: PUSH
27891: EMPTY
27892: LIST
27893: LIST
27894: PPUSH
27895: CALL_OW 69
27899: PPUSH
27900: LD_VAR 0 2
27904: PPUSH
27905: CALL_OW 74
27909: PPUSH
27910: CALL_OW 115
// end ;
27914: GO 27841
27916: POP
27917: POP
// until not tmp ;
27918: LD_VAR 0 3
27922: NOT
27923: IFFALSE 27824
// end ;
27925: PPOPN 3
27927: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27928: LD_EXP 72
27932: PUSH
27933: LD_EXP 97
27937: AND
27938: IFFALSE 27992
27940: GO 27942
27942: DISABLE
// begin ToLua ( displayTroll(); ) ;
27943: LD_STRING displayTroll();
27945: PPUSH
27946: CALL_OW 559
// wait ( 3 3$00 ) ;
27950: LD_INT 6300
27952: PPUSH
27953: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27957: LD_STRING hideTroll();
27959: PPUSH
27960: CALL_OW 559
// wait ( 1 1$00 ) ;
27964: LD_INT 2100
27966: PPUSH
27967: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27971: LD_STRING displayTroll();
27973: PPUSH
27974: CALL_OW 559
// wait ( 1 1$00 ) ;
27978: LD_INT 2100
27980: PPUSH
27981: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27985: LD_STRING hideTroll();
27987: PPUSH
27988: CALL_OW 559
// end ;
27992: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27993: LD_EXP 72
27997: PUSH
27998: LD_EXP 98
28002: AND
28003: IFFALSE 28066
28005: GO 28007
28007: DISABLE
28008: LD_INT 0
28010: PPUSH
// begin p := 0 ;
28011: LD_ADDR_VAR 0 1
28015: PUSH
28016: LD_INT 0
28018: ST_TO_ADDR
// repeat game_speed := 1 ;
28019: LD_ADDR_OWVAR 65
28023: PUSH
28024: LD_INT 1
28026: ST_TO_ADDR
// wait ( 0 0$1 ) ;
28027: LD_INT 35
28029: PPUSH
28030: CALL_OW 67
// p := p + 1 ;
28034: LD_ADDR_VAR 0 1
28038: PUSH
28039: LD_VAR 0 1
28043: PUSH
28044: LD_INT 1
28046: PLUS
28047: ST_TO_ADDR
// until p >= 60 ;
28048: LD_VAR 0 1
28052: PUSH
28053: LD_INT 60
28055: GREATEREQUAL
28056: IFFALSE 28019
// game_speed := 4 ;
28058: LD_ADDR_OWVAR 65
28062: PUSH
28063: LD_INT 4
28065: ST_TO_ADDR
// end ;
28066: PPOPN 1
28068: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28069: LD_EXP 72
28073: PUSH
28074: LD_EXP 99
28078: AND
28079: IFFALSE 28225
28081: GO 28083
28083: DISABLE
28084: LD_INT 0
28086: PPUSH
28087: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28088: LD_ADDR_VAR 0 1
28092: PUSH
28093: LD_INT 22
28095: PUSH
28096: LD_OWVAR 2
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PUSH
28105: LD_INT 2
28107: PUSH
28108: LD_INT 30
28110: PUSH
28111: LD_INT 0
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 30
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: LIST
28132: PUSH
28133: EMPTY
28134: LIST
28135: LIST
28136: PPUSH
28137: CALL_OW 69
28141: ST_TO_ADDR
// if not depot then
28142: LD_VAR 0 1
28146: NOT
28147: IFFALSE 28151
// exit ;
28149: GO 28225
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28151: LD_ADDR_VAR 0 2
28155: PUSH
28156: LD_VAR 0 1
28160: PUSH
28161: LD_INT 1
28163: PPUSH
28164: LD_VAR 0 1
28168: PPUSH
28169: CALL_OW 12
28173: ARRAY
28174: PPUSH
28175: CALL_OW 274
28179: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28180: LD_VAR 0 2
28184: PPUSH
28185: LD_INT 1
28187: PPUSH
28188: LD_INT 0
28190: PPUSH
28191: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28195: LD_VAR 0 2
28199: PPUSH
28200: LD_INT 2
28202: PPUSH
28203: LD_INT 0
28205: PPUSH
28206: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28210: LD_VAR 0 2
28214: PPUSH
28215: LD_INT 3
28217: PPUSH
28218: LD_INT 0
28220: PPUSH
28221: CALL_OW 277
// end ;
28225: PPOPN 2
28227: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28228: LD_EXP 72
28232: PUSH
28233: LD_EXP 100
28237: AND
28238: IFFALSE 28335
28240: GO 28242
28242: DISABLE
28243: LD_INT 0
28245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28246: LD_ADDR_VAR 0 1
28250: PUSH
28251: LD_INT 22
28253: PUSH
28254: LD_OWVAR 2
28258: PUSH
28259: EMPTY
28260: LIST
28261: LIST
28262: PUSH
28263: LD_INT 21
28265: PUSH
28266: LD_INT 1
28268: PUSH
28269: EMPTY
28270: LIST
28271: LIST
28272: PUSH
28273: LD_INT 3
28275: PUSH
28276: LD_INT 23
28278: PUSH
28279: LD_INT 0
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: PUSH
28290: EMPTY
28291: LIST
28292: LIST
28293: LIST
28294: PPUSH
28295: CALL_OW 69
28299: ST_TO_ADDR
// if not tmp then
28300: LD_VAR 0 1
28304: NOT
28305: IFFALSE 28309
// exit ;
28307: GO 28335
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28309: LD_VAR 0 1
28313: PUSH
28314: LD_INT 1
28316: PPUSH
28317: LD_VAR 0 1
28321: PPUSH
28322: CALL_OW 12
28326: ARRAY
28327: PPUSH
28328: LD_INT 200
28330: PPUSH
28331: CALL_OW 234
// end ;
28335: PPOPN 1
28337: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28338: LD_EXP 72
28342: PUSH
28343: LD_EXP 101
28347: AND
28348: IFFALSE 28427
28350: GO 28352
28352: DISABLE
28353: LD_INT 0
28355: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28356: LD_ADDR_VAR 0 1
28360: PUSH
28361: LD_INT 22
28363: PUSH
28364: LD_OWVAR 2
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 21
28375: PUSH
28376: LD_INT 2
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PPUSH
28387: CALL_OW 69
28391: ST_TO_ADDR
// if not tmp then
28392: LD_VAR 0 1
28396: NOT
28397: IFFALSE 28401
// exit ;
28399: GO 28427
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28401: LD_VAR 0 1
28405: PUSH
28406: LD_INT 1
28408: PPUSH
28409: LD_VAR 0 1
28413: PPUSH
28414: CALL_OW 12
28418: ARRAY
28419: PPUSH
28420: LD_INT 60
28422: PPUSH
28423: CALL_OW 234
// end ;
28427: PPOPN 1
28429: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28430: LD_EXP 72
28434: PUSH
28435: LD_EXP 102
28439: AND
28440: IFFALSE 28539
28442: GO 28444
28444: DISABLE
28445: LD_INT 0
28447: PPUSH
28448: PPUSH
// begin enable ;
28449: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28450: LD_ADDR_VAR 0 1
28454: PUSH
28455: LD_INT 22
28457: PUSH
28458: LD_OWVAR 2
28462: PUSH
28463: EMPTY
28464: LIST
28465: LIST
28466: PUSH
28467: LD_INT 61
28469: PUSH
28470: EMPTY
28471: LIST
28472: PUSH
28473: LD_INT 33
28475: PUSH
28476: LD_INT 2
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: LIST
28487: PPUSH
28488: CALL_OW 69
28492: ST_TO_ADDR
// if not tmp then
28493: LD_VAR 0 1
28497: NOT
28498: IFFALSE 28502
// exit ;
28500: GO 28539
// for i in tmp do
28502: LD_ADDR_VAR 0 2
28506: PUSH
28507: LD_VAR 0 1
28511: PUSH
28512: FOR_IN
28513: IFFALSE 28537
// if IsControledBy ( i ) then
28515: LD_VAR 0 2
28519: PPUSH
28520: CALL_OW 312
28524: IFFALSE 28535
// ComUnlink ( i ) ;
28526: LD_VAR 0 2
28530: PPUSH
28531: CALL_OW 136
28535: GO 28512
28537: POP
28538: POP
// end ;
28539: PPOPN 2
28541: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28542: LD_EXP 72
28546: PUSH
28547: LD_EXP 103
28551: AND
28552: IFFALSE 28692
28554: GO 28556
28556: DISABLE
28557: LD_INT 0
28559: PPUSH
28560: PPUSH
// begin ToLua ( displayPowell(); ) ;
28561: LD_STRING displayPowell();
28563: PPUSH
28564: CALL_OW 559
// uc_side := 0 ;
28568: LD_ADDR_OWVAR 20
28572: PUSH
28573: LD_INT 0
28575: ST_TO_ADDR
// uc_nation := 2 ;
28576: LD_ADDR_OWVAR 21
28580: PUSH
28581: LD_INT 2
28583: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28584: LD_ADDR_OWVAR 37
28588: PUSH
28589: LD_INT 14
28591: ST_TO_ADDR
// vc_engine := engine_siberite ;
28592: LD_ADDR_OWVAR 39
28596: PUSH
28597: LD_INT 3
28599: ST_TO_ADDR
// vc_control := control_apeman ;
28600: LD_ADDR_OWVAR 38
28604: PUSH
28605: LD_INT 5
28607: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28608: LD_ADDR_OWVAR 40
28612: PUSH
28613: LD_INT 29
28615: ST_TO_ADDR
// un := CreateVehicle ;
28616: LD_ADDR_VAR 0 2
28620: PUSH
28621: CALL_OW 45
28625: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28626: LD_VAR 0 2
28630: PPUSH
28631: LD_INT 1
28633: PPUSH
28634: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28638: LD_INT 35
28640: PPUSH
28641: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28645: LD_VAR 0 2
28649: PPUSH
28650: LD_INT 22
28652: PUSH
28653: LD_OWVAR 2
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PPUSH
28662: CALL_OW 69
28666: PPUSH
28667: LD_VAR 0 2
28671: PPUSH
28672: CALL_OW 74
28676: PPUSH
28677: CALL_OW 115
// until IsDead ( un ) ;
28681: LD_VAR 0 2
28685: PPUSH
28686: CALL_OW 301
28690: IFFALSE 28638
// end ;
28692: PPOPN 2
28694: END
// every 0 0$1 trigger StreamModeActive and sStu do
28695: LD_EXP 72
28699: PUSH
28700: LD_EXP 111
28704: AND
28705: IFFALSE 28721
28707: GO 28709
28709: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28710: LD_STRING displayStucuk();
28712: PPUSH
28713: CALL_OW 559
// ResetFog ;
28717: CALL_OW 335
// end ;
28721: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28722: LD_EXP 72
28726: PUSH
28727: LD_EXP 104
28731: AND
28732: IFFALSE 28873
28734: GO 28736
28736: DISABLE
28737: LD_INT 0
28739: PPUSH
28740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28741: LD_ADDR_VAR 0 2
28745: PUSH
28746: LD_INT 22
28748: PUSH
28749: LD_OWVAR 2
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 21
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: EMPTY
28765: LIST
28766: LIST
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PPUSH
28772: CALL_OW 69
28776: ST_TO_ADDR
// if not tmp then
28777: LD_VAR 0 2
28781: NOT
28782: IFFALSE 28786
// exit ;
28784: GO 28873
// un := tmp [ rand ( 1 , tmp ) ] ;
28786: LD_ADDR_VAR 0 1
28790: PUSH
28791: LD_VAR 0 2
28795: PUSH
28796: LD_INT 1
28798: PPUSH
28799: LD_VAR 0 2
28803: PPUSH
28804: CALL_OW 12
28808: ARRAY
28809: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28810: LD_VAR 0 1
28814: PPUSH
28815: LD_INT 0
28817: PPUSH
28818: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28822: LD_VAR 0 1
28826: PPUSH
28827: LD_OWVAR 3
28831: PUSH
28832: LD_VAR 0 1
28836: DIFF
28837: PPUSH
28838: LD_VAR 0 1
28842: PPUSH
28843: CALL_OW 74
28847: PPUSH
28848: CALL_OW 115
// wait ( 0 0$20 ) ;
28852: LD_INT 700
28854: PPUSH
28855: CALL_OW 67
// SetSide ( un , your_side ) ;
28859: LD_VAR 0 1
28863: PPUSH
28864: LD_OWVAR 2
28868: PPUSH
28869: CALL_OW 235
// end ;
28873: PPOPN 2
28875: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28876: LD_EXP 72
28880: PUSH
28881: LD_EXP 105
28885: AND
28886: IFFALSE 28992
28888: GO 28890
28890: DISABLE
28891: LD_INT 0
28893: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28894: LD_ADDR_VAR 0 1
28898: PUSH
28899: LD_INT 22
28901: PUSH
28902: LD_OWVAR 2
28906: PUSH
28907: EMPTY
28908: LIST
28909: LIST
28910: PUSH
28911: LD_INT 2
28913: PUSH
28914: LD_INT 30
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 30
28926: PUSH
28927: LD_INT 1
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: LIST
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PPUSH
28943: CALL_OW 69
28947: ST_TO_ADDR
// if not depot then
28948: LD_VAR 0 1
28952: NOT
28953: IFFALSE 28957
// exit ;
28955: GO 28992
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28957: LD_VAR 0 1
28961: PUSH
28962: LD_INT 1
28964: ARRAY
28965: PPUSH
28966: CALL_OW 250
28970: PPUSH
28971: LD_VAR 0 1
28975: PUSH
28976: LD_INT 1
28978: ARRAY
28979: PPUSH
28980: CALL_OW 251
28984: PPUSH
28985: LD_INT 70
28987: PPUSH
28988: CALL_OW 495
// end ;
28992: PPOPN 1
28994: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28995: LD_EXP 72
28999: PUSH
29000: LD_EXP 106
29004: AND
29005: IFFALSE 29216
29007: GO 29009
29009: DISABLE
29010: LD_INT 0
29012: PPUSH
29013: PPUSH
29014: PPUSH
29015: PPUSH
29016: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
29017: LD_ADDR_VAR 0 5
29021: PUSH
29022: LD_INT 22
29024: PUSH
29025: LD_OWVAR 2
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 21
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PPUSH
29048: CALL_OW 69
29052: ST_TO_ADDR
// if not tmp then
29053: LD_VAR 0 5
29057: NOT
29058: IFFALSE 29062
// exit ;
29060: GO 29216
// for i in tmp do
29062: LD_ADDR_VAR 0 1
29066: PUSH
29067: LD_VAR 0 5
29071: PUSH
29072: FOR_IN
29073: IFFALSE 29214
// begin d := rand ( 0 , 5 ) ;
29075: LD_ADDR_VAR 0 4
29079: PUSH
29080: LD_INT 0
29082: PPUSH
29083: LD_INT 5
29085: PPUSH
29086: CALL_OW 12
29090: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29091: LD_ADDR_VAR 0 2
29095: PUSH
29096: LD_VAR 0 1
29100: PPUSH
29101: CALL_OW 250
29105: PPUSH
29106: LD_VAR 0 4
29110: PPUSH
29111: LD_INT 3
29113: PPUSH
29114: LD_INT 12
29116: PPUSH
29117: CALL_OW 12
29121: PPUSH
29122: CALL_OW 272
29126: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29127: LD_ADDR_VAR 0 3
29131: PUSH
29132: LD_VAR 0 1
29136: PPUSH
29137: CALL_OW 251
29141: PPUSH
29142: LD_VAR 0 4
29146: PPUSH
29147: LD_INT 3
29149: PPUSH
29150: LD_INT 12
29152: PPUSH
29153: CALL_OW 12
29157: PPUSH
29158: CALL_OW 273
29162: ST_TO_ADDR
// if ValidHex ( x , y ) then
29163: LD_VAR 0 2
29167: PPUSH
29168: LD_VAR 0 3
29172: PPUSH
29173: CALL_OW 488
29177: IFFALSE 29212
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29179: LD_VAR 0 1
29183: PPUSH
29184: LD_VAR 0 2
29188: PPUSH
29189: LD_VAR 0 3
29193: PPUSH
29194: LD_INT 3
29196: PPUSH
29197: LD_INT 6
29199: PPUSH
29200: CALL_OW 12
29204: PPUSH
29205: LD_INT 1
29207: PPUSH
29208: CALL_OW 483
// end ;
29212: GO 29072
29214: POP
29215: POP
// end ;
29216: PPOPN 5
29218: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29219: LD_EXP 72
29223: PUSH
29224: LD_EXP 107
29228: AND
29229: IFFALSE 29323
29231: GO 29233
29233: DISABLE
29234: LD_INT 0
29236: PPUSH
29237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29238: LD_ADDR_VAR 0 2
29242: PUSH
29243: LD_INT 22
29245: PUSH
29246: LD_OWVAR 2
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 32
29257: PUSH
29258: LD_INT 1
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 21
29267: PUSH
29268: LD_INT 2
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: LIST
29279: PPUSH
29280: CALL_OW 69
29284: ST_TO_ADDR
// if not tmp then
29285: LD_VAR 0 2
29289: NOT
29290: IFFALSE 29294
// exit ;
29292: GO 29323
// for i in tmp do
29294: LD_ADDR_VAR 0 1
29298: PUSH
29299: LD_VAR 0 2
29303: PUSH
29304: FOR_IN
29305: IFFALSE 29321
// SetFuel ( i , 0 ) ;
29307: LD_VAR 0 1
29311: PPUSH
29312: LD_INT 0
29314: PPUSH
29315: CALL_OW 240
29319: GO 29304
29321: POP
29322: POP
// end ;
29323: PPOPN 2
29325: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29326: LD_EXP 72
29330: PUSH
29331: LD_EXP 108
29335: AND
29336: IFFALSE 29402
29338: GO 29340
29340: DISABLE
29341: LD_INT 0
29343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29344: LD_ADDR_VAR 0 1
29348: PUSH
29349: LD_INT 22
29351: PUSH
29352: LD_OWVAR 2
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: PUSH
29361: LD_INT 30
29363: PUSH
29364: LD_INT 29
29366: PUSH
29367: EMPTY
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PPUSH
29375: CALL_OW 69
29379: ST_TO_ADDR
// if not tmp then
29380: LD_VAR 0 1
29384: NOT
29385: IFFALSE 29389
// exit ;
29387: GO 29402
// DestroyUnit ( tmp [ 1 ] ) ;
29389: LD_VAR 0 1
29393: PUSH
29394: LD_INT 1
29396: ARRAY
29397: PPUSH
29398: CALL_OW 65
// end ;
29402: PPOPN 1
29404: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29405: LD_EXP 72
29409: PUSH
29410: LD_EXP 110
29414: AND
29415: IFFALSE 29544
29417: GO 29419
29419: DISABLE
29420: LD_INT 0
29422: PPUSH
// begin uc_side := 0 ;
29423: LD_ADDR_OWVAR 20
29427: PUSH
29428: LD_INT 0
29430: ST_TO_ADDR
// uc_nation := nation_arabian ;
29431: LD_ADDR_OWVAR 21
29435: PUSH
29436: LD_INT 2
29438: ST_TO_ADDR
// hc_gallery :=  ;
29439: LD_ADDR_OWVAR 33
29443: PUSH
29444: LD_STRING 
29446: ST_TO_ADDR
// hc_name :=  ;
29447: LD_ADDR_OWVAR 26
29451: PUSH
29452: LD_STRING 
29454: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29455: LD_INT 1
29457: PPUSH
29458: LD_INT 11
29460: PPUSH
29461: LD_INT 10
29463: PPUSH
29464: CALL_OW 380
// un := CreateHuman ;
29468: LD_ADDR_VAR 0 1
29472: PUSH
29473: CALL_OW 44
29477: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29478: LD_VAR 0 1
29482: PPUSH
29483: LD_INT 1
29485: PPUSH
29486: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29490: LD_INT 35
29492: PPUSH
29493: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29497: LD_VAR 0 1
29501: PPUSH
29502: LD_INT 22
29504: PUSH
29505: LD_OWVAR 2
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PPUSH
29514: CALL_OW 69
29518: PPUSH
29519: LD_VAR 0 1
29523: PPUSH
29524: CALL_OW 74
29528: PPUSH
29529: CALL_OW 115
// until IsDead ( un ) ;
29533: LD_VAR 0 1
29537: PPUSH
29538: CALL_OW 301
29542: IFFALSE 29490
// end ;
29544: PPOPN 1
29546: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29547: LD_EXP 72
29551: PUSH
29552: LD_EXP 112
29556: AND
29557: IFFALSE 29569
29559: GO 29561
29561: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29562: LD_STRING earthquake(getX(game), 0, 32)
29564: PPUSH
29565: CALL_OW 559
29569: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29570: LD_EXP 72
29574: PUSH
29575: LD_EXP 113
29579: AND
29580: IFFALSE 29671
29582: GO 29584
29584: DISABLE
29585: LD_INT 0
29587: PPUSH
// begin enable ;
29588: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29589: LD_ADDR_VAR 0 1
29593: PUSH
29594: LD_INT 22
29596: PUSH
29597: LD_OWVAR 2
29601: PUSH
29602: EMPTY
29603: LIST
29604: LIST
29605: PUSH
29606: LD_INT 21
29608: PUSH
29609: LD_INT 2
29611: PUSH
29612: EMPTY
29613: LIST
29614: LIST
29615: PUSH
29616: LD_INT 33
29618: PUSH
29619: LD_INT 3
29621: PUSH
29622: EMPTY
29623: LIST
29624: LIST
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: LIST
29630: PPUSH
29631: CALL_OW 69
29635: ST_TO_ADDR
// if not tmp then
29636: LD_VAR 0 1
29640: NOT
29641: IFFALSE 29645
// exit ;
29643: GO 29671
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29645: LD_VAR 0 1
29649: PUSH
29650: LD_INT 1
29652: PPUSH
29653: LD_VAR 0 1
29657: PPUSH
29658: CALL_OW 12
29662: ARRAY
29663: PPUSH
29664: LD_INT 1
29666: PPUSH
29667: CALL_OW 234
// end ;
29671: PPOPN 1
29673: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29674: LD_EXP 72
29678: PUSH
29679: LD_EXP 114
29683: AND
29684: IFFALSE 29825
29686: GO 29688
29688: DISABLE
29689: LD_INT 0
29691: PPUSH
29692: PPUSH
29693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29694: LD_ADDR_VAR 0 3
29698: PUSH
29699: LD_INT 22
29701: PUSH
29702: LD_OWVAR 2
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 25
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: PPUSH
29725: CALL_OW 69
29729: ST_TO_ADDR
// if not tmp then
29730: LD_VAR 0 3
29734: NOT
29735: IFFALSE 29739
// exit ;
29737: GO 29825
// un := tmp [ rand ( 1 , tmp ) ] ;
29739: LD_ADDR_VAR 0 2
29743: PUSH
29744: LD_VAR 0 3
29748: PUSH
29749: LD_INT 1
29751: PPUSH
29752: LD_VAR 0 3
29756: PPUSH
29757: CALL_OW 12
29761: ARRAY
29762: ST_TO_ADDR
// if Crawls ( un ) then
29763: LD_VAR 0 2
29767: PPUSH
29768: CALL_OW 318
29772: IFFALSE 29783
// ComWalk ( un ) ;
29774: LD_VAR 0 2
29778: PPUSH
29779: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29783: LD_VAR 0 2
29787: PPUSH
29788: LD_INT 9
29790: PPUSH
29791: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29795: LD_INT 28
29797: PPUSH
29798: LD_OWVAR 2
29802: PPUSH
29803: LD_INT 2
29805: PPUSH
29806: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29810: LD_INT 29
29812: PPUSH
29813: LD_OWVAR 2
29817: PPUSH
29818: LD_INT 2
29820: PPUSH
29821: CALL_OW 322
// end ;
29825: PPOPN 3
29827: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29828: LD_EXP 72
29832: PUSH
29833: LD_EXP 115
29837: AND
29838: IFFALSE 29949
29840: GO 29842
29842: DISABLE
29843: LD_INT 0
29845: PPUSH
29846: PPUSH
29847: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29848: LD_ADDR_VAR 0 3
29852: PUSH
29853: LD_INT 22
29855: PUSH
29856: LD_OWVAR 2
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: PUSH
29865: LD_INT 25
29867: PUSH
29868: LD_INT 1
29870: PUSH
29871: EMPTY
29872: LIST
29873: LIST
29874: PUSH
29875: EMPTY
29876: LIST
29877: LIST
29878: PPUSH
29879: CALL_OW 69
29883: ST_TO_ADDR
// if not tmp then
29884: LD_VAR 0 3
29888: NOT
29889: IFFALSE 29893
// exit ;
29891: GO 29949
// un := tmp [ rand ( 1 , tmp ) ] ;
29893: LD_ADDR_VAR 0 2
29897: PUSH
29898: LD_VAR 0 3
29902: PUSH
29903: LD_INT 1
29905: PPUSH
29906: LD_VAR 0 3
29910: PPUSH
29911: CALL_OW 12
29915: ARRAY
29916: ST_TO_ADDR
// if Crawls ( un ) then
29917: LD_VAR 0 2
29921: PPUSH
29922: CALL_OW 318
29926: IFFALSE 29937
// ComWalk ( un ) ;
29928: LD_VAR 0 2
29932: PPUSH
29933: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29937: LD_VAR 0 2
29941: PPUSH
29942: LD_INT 8
29944: PPUSH
29945: CALL_OW 336
// end ;
29949: PPOPN 3
29951: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29952: LD_EXP 72
29956: PUSH
29957: LD_EXP 116
29961: AND
29962: IFFALSE 30106
29964: GO 29966
29966: DISABLE
29967: LD_INT 0
29969: PPUSH
29970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29971: LD_ADDR_VAR 0 2
29975: PUSH
29976: LD_INT 22
29978: PUSH
29979: LD_OWVAR 2
29983: PUSH
29984: EMPTY
29985: LIST
29986: LIST
29987: PUSH
29988: LD_INT 21
29990: PUSH
29991: LD_INT 2
29993: PUSH
29994: EMPTY
29995: LIST
29996: LIST
29997: PUSH
29998: LD_INT 2
30000: PUSH
30001: LD_INT 34
30003: PUSH
30004: LD_INT 12
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: LD_INT 34
30013: PUSH
30014: LD_INT 51
30016: PUSH
30017: EMPTY
30018: LIST
30019: LIST
30020: PUSH
30021: LD_INT 34
30023: PUSH
30024: LD_INT 32
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: LIST
30035: LIST
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: LIST
30041: PPUSH
30042: CALL_OW 69
30046: ST_TO_ADDR
// if not tmp then
30047: LD_VAR 0 2
30051: NOT
30052: IFFALSE 30056
// exit ;
30054: GO 30106
// for i in tmp do
30056: LD_ADDR_VAR 0 1
30060: PUSH
30061: LD_VAR 0 2
30065: PUSH
30066: FOR_IN
30067: IFFALSE 30104
// if GetCargo ( i , mat_artifact ) = 0 then
30069: LD_VAR 0 1
30073: PPUSH
30074: LD_INT 4
30076: PPUSH
30077: CALL_OW 289
30081: PUSH
30082: LD_INT 0
30084: EQUAL
30085: IFFALSE 30102
// SetCargo ( i , mat_siberit , 100 ) ;
30087: LD_VAR 0 1
30091: PPUSH
30092: LD_INT 3
30094: PPUSH
30095: LD_INT 100
30097: PPUSH
30098: CALL_OW 290
30102: GO 30066
30104: POP
30105: POP
// end ;
30106: PPOPN 2
30108: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30109: LD_EXP 72
30113: PUSH
30114: LD_EXP 117
30118: AND
30119: IFFALSE 30302
30121: GO 30123
30123: DISABLE
30124: LD_INT 0
30126: PPUSH
30127: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30128: LD_ADDR_VAR 0 2
30132: PUSH
30133: LD_INT 22
30135: PUSH
30136: LD_OWVAR 2
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PPUSH
30145: CALL_OW 69
30149: ST_TO_ADDR
// if not tmp then
30150: LD_VAR 0 2
30154: NOT
30155: IFFALSE 30159
// exit ;
30157: GO 30302
// for i := 1 to 2 do
30159: LD_ADDR_VAR 0 1
30163: PUSH
30164: DOUBLE
30165: LD_INT 1
30167: DEC
30168: ST_TO_ADDR
30169: LD_INT 2
30171: PUSH
30172: FOR_TO
30173: IFFALSE 30300
// begin uc_side := your_side ;
30175: LD_ADDR_OWVAR 20
30179: PUSH
30180: LD_OWVAR 2
30184: ST_TO_ADDR
// uc_nation := nation_american ;
30185: LD_ADDR_OWVAR 21
30189: PUSH
30190: LD_INT 1
30192: ST_TO_ADDR
// vc_chassis := us_morphling ;
30193: LD_ADDR_OWVAR 37
30197: PUSH
30198: LD_INT 5
30200: ST_TO_ADDR
// vc_engine := engine_siberite ;
30201: LD_ADDR_OWVAR 39
30205: PUSH
30206: LD_INT 3
30208: ST_TO_ADDR
// vc_control := control_computer ;
30209: LD_ADDR_OWVAR 38
30213: PUSH
30214: LD_INT 3
30216: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30217: LD_ADDR_OWVAR 40
30221: PUSH
30222: LD_INT 10
30224: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30225: LD_VAR 0 2
30229: PUSH
30230: LD_INT 1
30232: ARRAY
30233: PPUSH
30234: CALL_OW 310
30238: NOT
30239: IFFALSE 30286
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30241: CALL_OW 45
30245: PPUSH
30246: LD_VAR 0 2
30250: PUSH
30251: LD_INT 1
30253: ARRAY
30254: PPUSH
30255: CALL_OW 250
30259: PPUSH
30260: LD_VAR 0 2
30264: PUSH
30265: LD_INT 1
30267: ARRAY
30268: PPUSH
30269: CALL_OW 251
30273: PPUSH
30274: LD_INT 12
30276: PPUSH
30277: LD_INT 1
30279: PPUSH
30280: CALL_OW 50
30284: GO 30298
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30286: CALL_OW 45
30290: PPUSH
30291: LD_INT 1
30293: PPUSH
30294: CALL_OW 51
// end ;
30298: GO 30172
30300: POP
30301: POP
// end ;
30302: PPOPN 2
30304: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30305: LD_EXP 72
30309: PUSH
30310: LD_EXP 118
30314: AND
30315: IFFALSE 30537
30317: GO 30319
30319: DISABLE
30320: LD_INT 0
30322: PPUSH
30323: PPUSH
30324: PPUSH
30325: PPUSH
30326: PPUSH
30327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30328: LD_ADDR_VAR 0 6
30332: PUSH
30333: LD_INT 22
30335: PUSH
30336: LD_OWVAR 2
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 21
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 3
30357: PUSH
30358: LD_INT 23
30360: PUSH
30361: LD_INT 0
30363: PUSH
30364: EMPTY
30365: LIST
30366: LIST
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: LIST
30376: PPUSH
30377: CALL_OW 69
30381: ST_TO_ADDR
// if not tmp then
30382: LD_VAR 0 6
30386: NOT
30387: IFFALSE 30391
// exit ;
30389: GO 30537
// s1 := rand ( 1 , 4 ) ;
30391: LD_ADDR_VAR 0 2
30395: PUSH
30396: LD_INT 1
30398: PPUSH
30399: LD_INT 4
30401: PPUSH
30402: CALL_OW 12
30406: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30407: LD_ADDR_VAR 0 4
30411: PUSH
30412: LD_VAR 0 6
30416: PUSH
30417: LD_INT 1
30419: ARRAY
30420: PPUSH
30421: LD_VAR 0 2
30425: PPUSH
30426: CALL_OW 259
30430: ST_TO_ADDR
// if s1 = 1 then
30431: LD_VAR 0 2
30435: PUSH
30436: LD_INT 1
30438: EQUAL
30439: IFFALSE 30459
// s2 := rand ( 2 , 4 ) else
30441: LD_ADDR_VAR 0 3
30445: PUSH
30446: LD_INT 2
30448: PPUSH
30449: LD_INT 4
30451: PPUSH
30452: CALL_OW 12
30456: ST_TO_ADDR
30457: GO 30467
// s2 := 1 ;
30459: LD_ADDR_VAR 0 3
30463: PUSH
30464: LD_INT 1
30466: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30467: LD_ADDR_VAR 0 5
30471: PUSH
30472: LD_VAR 0 6
30476: PUSH
30477: LD_INT 1
30479: ARRAY
30480: PPUSH
30481: LD_VAR 0 3
30485: PPUSH
30486: CALL_OW 259
30490: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30491: LD_VAR 0 6
30495: PUSH
30496: LD_INT 1
30498: ARRAY
30499: PPUSH
30500: LD_VAR 0 2
30504: PPUSH
30505: LD_VAR 0 5
30509: PPUSH
30510: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30514: LD_VAR 0 6
30518: PUSH
30519: LD_INT 1
30521: ARRAY
30522: PPUSH
30523: LD_VAR 0 3
30527: PPUSH
30528: LD_VAR 0 4
30532: PPUSH
30533: CALL_OW 237
// end ;
30537: PPOPN 6
30539: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30540: LD_EXP 72
30544: PUSH
30545: LD_EXP 119
30549: AND
30550: IFFALSE 30629
30552: GO 30554
30554: DISABLE
30555: LD_INT 0
30557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30558: LD_ADDR_VAR 0 1
30562: PUSH
30563: LD_INT 22
30565: PUSH
30566: LD_OWVAR 2
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: PUSH
30575: LD_INT 30
30577: PUSH
30578: LD_INT 3
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: EMPTY
30586: LIST
30587: LIST
30588: PPUSH
30589: CALL_OW 69
30593: ST_TO_ADDR
// if not tmp then
30594: LD_VAR 0 1
30598: NOT
30599: IFFALSE 30603
// exit ;
30601: GO 30629
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30603: LD_VAR 0 1
30607: PUSH
30608: LD_INT 1
30610: PPUSH
30611: LD_VAR 0 1
30615: PPUSH
30616: CALL_OW 12
30620: ARRAY
30621: PPUSH
30622: LD_INT 1
30624: PPUSH
30625: CALL_OW 234
// end ;
30629: PPOPN 1
30631: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30632: LD_EXP 72
30636: PUSH
30637: LD_EXP 120
30641: AND
30642: IFFALSE 30754
30644: GO 30646
30646: DISABLE
30647: LD_INT 0
30649: PPUSH
30650: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30651: LD_ADDR_VAR 0 2
30655: PUSH
30656: LD_INT 22
30658: PUSH
30659: LD_OWVAR 2
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: LD_INT 30
30673: PUSH
30674: LD_INT 27
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 30
30683: PUSH
30684: LD_INT 26
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 30
30693: PUSH
30694: LD_INT 28
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PPUSH
30711: CALL_OW 69
30715: ST_TO_ADDR
// if not tmp then
30716: LD_VAR 0 2
30720: NOT
30721: IFFALSE 30725
// exit ;
30723: GO 30754
// for i in tmp do
30725: LD_ADDR_VAR 0 1
30729: PUSH
30730: LD_VAR 0 2
30734: PUSH
30735: FOR_IN
30736: IFFALSE 30752
// SetLives ( i , 1 ) ;
30738: LD_VAR 0 1
30742: PPUSH
30743: LD_INT 1
30745: PPUSH
30746: CALL_OW 234
30750: GO 30735
30752: POP
30753: POP
// end ;
30754: PPOPN 2
30756: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30757: LD_EXP 72
30761: PUSH
30762: LD_EXP 121
30766: AND
30767: IFFALSE 31054
30769: GO 30771
30771: DISABLE
30772: LD_INT 0
30774: PPUSH
30775: PPUSH
30776: PPUSH
// begin i := rand ( 1 , 7 ) ;
30777: LD_ADDR_VAR 0 1
30781: PUSH
30782: LD_INT 1
30784: PPUSH
30785: LD_INT 7
30787: PPUSH
30788: CALL_OW 12
30792: ST_TO_ADDR
// case i of 1 :
30793: LD_VAR 0 1
30797: PUSH
30798: LD_INT 1
30800: DOUBLE
30801: EQUAL
30802: IFTRUE 30806
30804: GO 30816
30806: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30807: LD_STRING earthquake(getX(game), 0, 32)
30809: PPUSH
30810: CALL_OW 559
30814: GO 31054
30816: LD_INT 2
30818: DOUBLE
30819: EQUAL
30820: IFTRUE 30824
30822: GO 30838
30824: POP
// begin ToLua ( displayStucuk(); ) ;
30825: LD_STRING displayStucuk();
30827: PPUSH
30828: CALL_OW 559
// ResetFog ;
30832: CALL_OW 335
// end ; 3 :
30836: GO 31054
30838: LD_INT 3
30840: DOUBLE
30841: EQUAL
30842: IFTRUE 30846
30844: GO 30950
30846: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30847: LD_ADDR_VAR 0 2
30851: PUSH
30852: LD_INT 22
30854: PUSH
30855: LD_OWVAR 2
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 25
30866: PUSH
30867: LD_INT 1
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PPUSH
30878: CALL_OW 69
30882: ST_TO_ADDR
// if not tmp then
30883: LD_VAR 0 2
30887: NOT
30888: IFFALSE 30892
// exit ;
30890: GO 31054
// un := tmp [ rand ( 1 , tmp ) ] ;
30892: LD_ADDR_VAR 0 3
30896: PUSH
30897: LD_VAR 0 2
30901: PUSH
30902: LD_INT 1
30904: PPUSH
30905: LD_VAR 0 2
30909: PPUSH
30910: CALL_OW 12
30914: ARRAY
30915: ST_TO_ADDR
// if Crawls ( un ) then
30916: LD_VAR 0 3
30920: PPUSH
30921: CALL_OW 318
30925: IFFALSE 30936
// ComWalk ( un ) ;
30927: LD_VAR 0 3
30931: PPUSH
30932: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30936: LD_VAR 0 3
30940: PPUSH
30941: LD_INT 8
30943: PPUSH
30944: CALL_OW 336
// end ; 4 :
30948: GO 31054
30950: LD_INT 4
30952: DOUBLE
30953: EQUAL
30954: IFTRUE 30958
30956: GO 31032
30958: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30959: LD_ADDR_VAR 0 2
30963: PUSH
30964: LD_INT 22
30966: PUSH
30967: LD_OWVAR 2
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: LD_INT 30
30978: PUSH
30979: LD_INT 29
30981: PUSH
30982: EMPTY
30983: LIST
30984: LIST
30985: PUSH
30986: EMPTY
30987: LIST
30988: LIST
30989: PPUSH
30990: CALL_OW 69
30994: ST_TO_ADDR
// if not tmp then
30995: LD_VAR 0 2
30999: NOT
31000: IFFALSE 31004
// exit ;
31002: GO 31054
// CenterNowOnUnits ( tmp [ 1 ] ) ;
31004: LD_VAR 0 2
31008: PUSH
31009: LD_INT 1
31011: ARRAY
31012: PPUSH
31013: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
31017: LD_VAR 0 2
31021: PUSH
31022: LD_INT 1
31024: ARRAY
31025: PPUSH
31026: CALL_OW 65
// end ; 5 .. 7 :
31030: GO 31054
31032: LD_INT 5
31034: DOUBLE
31035: GREATEREQUAL
31036: IFFALSE 31044
31038: LD_INT 7
31040: DOUBLE
31041: LESSEQUAL
31042: IFTRUE 31046
31044: GO 31053
31046: POP
// StreamSibBomb ; end ;
31047: CALL 27291 0 0
31051: GO 31054
31053: POP
// end ;
31054: PPOPN 3
31056: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31057: LD_EXP 72
31061: PUSH
31062: LD_EXP 122
31066: AND
31067: IFFALSE 31223
31069: GO 31071
31071: DISABLE
31072: LD_INT 0
31074: PPUSH
31075: PPUSH
31076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31077: LD_ADDR_VAR 0 2
31081: PUSH
31082: LD_INT 81
31084: PUSH
31085: LD_OWVAR 2
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 2
31096: PUSH
31097: LD_INT 21
31099: PUSH
31100: LD_INT 1
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PUSH
31107: LD_INT 21
31109: PUSH
31110: LD_INT 2
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: LIST
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PPUSH
31126: CALL_OW 69
31130: ST_TO_ADDR
// if not tmp then
31131: LD_VAR 0 2
31135: NOT
31136: IFFALSE 31140
// exit ;
31138: GO 31223
// p := 0 ;
31140: LD_ADDR_VAR 0 3
31144: PUSH
31145: LD_INT 0
31147: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31148: LD_INT 35
31150: PPUSH
31151: CALL_OW 67
// p := p + 1 ;
31155: LD_ADDR_VAR 0 3
31159: PUSH
31160: LD_VAR 0 3
31164: PUSH
31165: LD_INT 1
31167: PLUS
31168: ST_TO_ADDR
// for i in tmp do
31169: LD_ADDR_VAR 0 1
31173: PUSH
31174: LD_VAR 0 2
31178: PUSH
31179: FOR_IN
31180: IFFALSE 31211
// if GetLives ( i ) < 1000 then
31182: LD_VAR 0 1
31186: PPUSH
31187: CALL_OW 256
31191: PUSH
31192: LD_INT 1000
31194: LESS
31195: IFFALSE 31209
// SetLives ( i , 1000 ) ;
31197: LD_VAR 0 1
31201: PPUSH
31202: LD_INT 1000
31204: PPUSH
31205: CALL_OW 234
31209: GO 31179
31211: POP
31212: POP
// until p > 20 ;
31213: LD_VAR 0 3
31217: PUSH
31218: LD_INT 20
31220: GREATER
31221: IFFALSE 31148
// end ;
31223: PPOPN 3
31225: END
// every 0 0$1 trigger StreamModeActive and sTime do
31226: LD_EXP 72
31230: PUSH
31231: LD_EXP 123
31235: AND
31236: IFFALSE 31271
31238: GO 31240
31240: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31241: LD_INT 28
31243: PPUSH
31244: LD_OWVAR 2
31248: PPUSH
31249: LD_INT 2
31251: PPUSH
31252: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31256: LD_INT 30
31258: PPUSH
31259: LD_OWVAR 2
31263: PPUSH
31264: LD_INT 2
31266: PPUSH
31267: CALL_OW 322
// end ;
31271: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31272: LD_EXP 72
31276: PUSH
31277: LD_EXP 124
31281: AND
31282: IFFALSE 31403
31284: GO 31286
31286: DISABLE
31287: LD_INT 0
31289: PPUSH
31290: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31291: LD_ADDR_VAR 0 2
31295: PUSH
31296: LD_INT 22
31298: PUSH
31299: LD_OWVAR 2
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 21
31310: PUSH
31311: LD_INT 1
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 3
31320: PUSH
31321: LD_INT 23
31323: PUSH
31324: LD_INT 0
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: EMPTY
31332: LIST
31333: LIST
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: LIST
31339: PPUSH
31340: CALL_OW 69
31344: ST_TO_ADDR
// if not tmp then
31345: LD_VAR 0 2
31349: NOT
31350: IFFALSE 31354
// exit ;
31352: GO 31403
// for i in tmp do
31354: LD_ADDR_VAR 0 1
31358: PUSH
31359: LD_VAR 0 2
31363: PUSH
31364: FOR_IN
31365: IFFALSE 31401
// begin if Crawls ( i ) then
31367: LD_VAR 0 1
31371: PPUSH
31372: CALL_OW 318
31376: IFFALSE 31387
// ComWalk ( i ) ;
31378: LD_VAR 0 1
31382: PPUSH
31383: CALL_OW 138
// SetClass ( i , 2 ) ;
31387: LD_VAR 0 1
31391: PPUSH
31392: LD_INT 2
31394: PPUSH
31395: CALL_OW 336
// end ;
31399: GO 31364
31401: POP
31402: POP
// end ;
31403: PPOPN 2
31405: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31406: LD_EXP 72
31410: PUSH
31411: LD_EXP 125
31415: AND
31416: IFFALSE 31704
31418: GO 31420
31420: DISABLE
31421: LD_INT 0
31423: PPUSH
31424: PPUSH
31425: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31426: LD_OWVAR 2
31430: PPUSH
31431: LD_INT 9
31433: PPUSH
31434: LD_INT 1
31436: PPUSH
31437: LD_INT 1
31439: PPUSH
31440: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31444: LD_INT 9
31446: PPUSH
31447: LD_OWVAR 2
31451: PPUSH
31452: CALL_OW 343
// uc_side := 9 ;
31456: LD_ADDR_OWVAR 20
31460: PUSH
31461: LD_INT 9
31463: ST_TO_ADDR
// uc_nation := 2 ;
31464: LD_ADDR_OWVAR 21
31468: PUSH
31469: LD_INT 2
31471: ST_TO_ADDR
// hc_name := Dark Warrior ;
31472: LD_ADDR_OWVAR 26
31476: PUSH
31477: LD_STRING Dark Warrior
31479: ST_TO_ADDR
// hc_gallery :=  ;
31480: LD_ADDR_OWVAR 33
31484: PUSH
31485: LD_STRING 
31487: ST_TO_ADDR
// hc_noskilllimit := true ;
31488: LD_ADDR_OWVAR 76
31492: PUSH
31493: LD_INT 1
31495: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31496: LD_ADDR_OWVAR 31
31500: PUSH
31501: LD_INT 30
31503: PUSH
31504: LD_INT 30
31506: PUSH
31507: LD_INT 30
31509: PUSH
31510: LD_INT 30
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: ST_TO_ADDR
// un := CreateHuman ;
31519: LD_ADDR_VAR 0 3
31523: PUSH
31524: CALL_OW 44
31528: ST_TO_ADDR
// hc_noskilllimit := false ;
31529: LD_ADDR_OWVAR 76
31533: PUSH
31534: LD_INT 0
31536: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31537: LD_VAR 0 3
31541: PPUSH
31542: LD_INT 1
31544: PPUSH
31545: CALL_OW 51
// ToLua ( playRanger() ) ;
31549: LD_STRING playRanger()
31551: PPUSH
31552: CALL_OW 559
// p := 0 ;
31556: LD_ADDR_VAR 0 2
31560: PUSH
31561: LD_INT 0
31563: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31564: LD_INT 35
31566: PPUSH
31567: CALL_OW 67
// p := p + 1 ;
31571: LD_ADDR_VAR 0 2
31575: PUSH
31576: LD_VAR 0 2
31580: PUSH
31581: LD_INT 1
31583: PLUS
31584: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31585: LD_VAR 0 3
31589: PPUSH
31590: CALL_OW 256
31594: PUSH
31595: LD_INT 1000
31597: LESS
31598: IFFALSE 31612
// SetLives ( un , 1000 ) ;
31600: LD_VAR 0 3
31604: PPUSH
31605: LD_INT 1000
31607: PPUSH
31608: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31612: LD_VAR 0 3
31616: PPUSH
31617: LD_INT 81
31619: PUSH
31620: LD_OWVAR 2
31624: PUSH
31625: EMPTY
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 91
31631: PUSH
31632: LD_VAR 0 3
31636: PUSH
31637: LD_INT 30
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: LIST
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PPUSH
31649: CALL_OW 69
31653: PPUSH
31654: LD_VAR 0 3
31658: PPUSH
31659: CALL_OW 74
31663: PPUSH
31664: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31668: LD_VAR 0 2
31672: PUSH
31673: LD_INT 80
31675: GREATER
31676: PUSH
31677: LD_VAR 0 3
31681: PPUSH
31682: CALL_OW 301
31686: OR
31687: IFFALSE 31564
// if un then
31689: LD_VAR 0 3
31693: IFFALSE 31704
// RemoveUnit ( un ) ;
31695: LD_VAR 0 3
31699: PPUSH
31700: CALL_OW 64
// end ;
31704: PPOPN 3
31706: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31707: LD_EXP 126
31711: IFFALSE 31827
31713: GO 31715
31715: DISABLE
31716: LD_INT 0
31718: PPUSH
31719: PPUSH
31720: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31721: LD_ADDR_VAR 0 2
31725: PUSH
31726: LD_INT 81
31728: PUSH
31729: LD_OWVAR 2
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 21
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: EMPTY
31749: LIST
31750: LIST
31751: PPUSH
31752: CALL_OW 69
31756: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31757: LD_STRING playComputer()
31759: PPUSH
31760: CALL_OW 559
// if not tmp then
31764: LD_VAR 0 2
31768: NOT
31769: IFFALSE 31773
// exit ;
31771: GO 31827
// for i in tmp do
31773: LD_ADDR_VAR 0 1
31777: PUSH
31778: LD_VAR 0 2
31782: PUSH
31783: FOR_IN
31784: IFFALSE 31825
// for j := 1 to 4 do
31786: LD_ADDR_VAR 0 3
31790: PUSH
31791: DOUBLE
31792: LD_INT 1
31794: DEC
31795: ST_TO_ADDR
31796: LD_INT 4
31798: PUSH
31799: FOR_TO
31800: IFFALSE 31821
// SetSkill ( i , j , 10 ) ;
31802: LD_VAR 0 1
31806: PPUSH
31807: LD_VAR 0 3
31811: PPUSH
31812: LD_INT 10
31814: PPUSH
31815: CALL_OW 237
31819: GO 31799
31821: POP
31822: POP
31823: GO 31783
31825: POP
31826: POP
// end ;
31827: PPOPN 3
31829: END
// every 0 0$1 trigger s30 do var i , tmp ;
31830: LD_EXP 127
31834: IFFALSE 31903
31836: GO 31838
31838: DISABLE
31839: LD_INT 0
31841: PPUSH
31842: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31843: LD_ADDR_VAR 0 2
31847: PUSH
31848: LD_INT 22
31850: PUSH
31851: LD_OWVAR 2
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PPUSH
31860: CALL_OW 69
31864: ST_TO_ADDR
// if not tmp then
31865: LD_VAR 0 2
31869: NOT
31870: IFFALSE 31874
// exit ;
31872: GO 31903
// for i in tmp do
31874: LD_ADDR_VAR 0 1
31878: PUSH
31879: LD_VAR 0 2
31883: PUSH
31884: FOR_IN
31885: IFFALSE 31901
// SetLives ( i , 300 ) ;
31887: LD_VAR 0 1
31891: PPUSH
31892: LD_INT 300
31894: PPUSH
31895: CALL_OW 234
31899: GO 31884
31901: POP
31902: POP
// end ;
31903: PPOPN 2
31905: END
// every 0 0$1 trigger s60 do var i , tmp ;
31906: LD_EXP 128
31910: IFFALSE 31979
31912: GO 31914
31914: DISABLE
31915: LD_INT 0
31917: PPUSH
31918: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31919: LD_ADDR_VAR 0 2
31923: PUSH
31924: LD_INT 22
31926: PUSH
31927: LD_OWVAR 2
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PPUSH
31936: CALL_OW 69
31940: ST_TO_ADDR
// if not tmp then
31941: LD_VAR 0 2
31945: NOT
31946: IFFALSE 31950
// exit ;
31948: GO 31979
// for i in tmp do
31950: LD_ADDR_VAR 0 1
31954: PUSH
31955: LD_VAR 0 2
31959: PUSH
31960: FOR_IN
31961: IFFALSE 31977
// SetLives ( i , 600 ) ;
31963: LD_VAR 0 1
31967: PPUSH
31968: LD_INT 600
31970: PPUSH
31971: CALL_OW 234
31975: GO 31960
31977: POP
31978: POP
// end ;
31979: PPOPN 2
31981: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31982: LD_INT 0
31984: PPUSH
// case cmd of 301 :
31985: LD_VAR 0 1
31989: PUSH
31990: LD_INT 301
31992: DOUBLE
31993: EQUAL
31994: IFTRUE 31998
31996: GO 32030
31998: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31999: LD_VAR 0 6
32003: PPUSH
32004: LD_VAR 0 7
32008: PPUSH
32009: LD_VAR 0 8
32013: PPUSH
32014: LD_VAR 0 4
32018: PPUSH
32019: LD_VAR 0 5
32023: PPUSH
32024: CALL 33231 0 5
32028: GO 32151
32030: LD_INT 302
32032: DOUBLE
32033: EQUAL
32034: IFTRUE 32038
32036: GO 32075
32038: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32039: LD_VAR 0 6
32043: PPUSH
32044: LD_VAR 0 7
32048: PPUSH
32049: LD_VAR 0 8
32053: PPUSH
32054: LD_VAR 0 9
32058: PPUSH
32059: LD_VAR 0 4
32063: PPUSH
32064: LD_VAR 0 5
32068: PPUSH
32069: CALL 33322 0 6
32073: GO 32151
32075: LD_INT 303
32077: DOUBLE
32078: EQUAL
32079: IFTRUE 32083
32081: GO 32120
32083: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32084: LD_VAR 0 6
32088: PPUSH
32089: LD_VAR 0 7
32093: PPUSH
32094: LD_VAR 0 8
32098: PPUSH
32099: LD_VAR 0 9
32103: PPUSH
32104: LD_VAR 0 4
32108: PPUSH
32109: LD_VAR 0 5
32113: PPUSH
32114: CALL 32156 0 6
32118: GO 32151
32120: LD_INT 304
32122: DOUBLE
32123: EQUAL
32124: IFTRUE 32128
32126: GO 32150
32128: POP
// hHackTeleport ( unit , x , y ) ; end ;
32129: LD_VAR 0 2
32133: PPUSH
32134: LD_VAR 0 4
32138: PPUSH
32139: LD_VAR 0 5
32143: PPUSH
32144: CALL 33915 0 3
32148: GO 32151
32150: POP
// end ;
32151: LD_VAR 0 12
32155: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32156: LD_INT 0
32158: PPUSH
32159: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32160: LD_VAR 0 1
32164: PUSH
32165: LD_INT 1
32167: LESS
32168: PUSH
32169: LD_VAR 0 1
32173: PUSH
32174: LD_INT 3
32176: GREATER
32177: OR
32178: PUSH
32179: LD_VAR 0 5
32183: PPUSH
32184: LD_VAR 0 6
32188: PPUSH
32189: CALL_OW 428
32193: OR
32194: IFFALSE 32198
// exit ;
32196: GO 32918
// uc_side := your_side ;
32198: LD_ADDR_OWVAR 20
32202: PUSH
32203: LD_OWVAR 2
32207: ST_TO_ADDR
// uc_nation := nation ;
32208: LD_ADDR_OWVAR 21
32212: PUSH
32213: LD_VAR 0 1
32217: ST_TO_ADDR
// bc_level = 1 ;
32218: LD_ADDR_OWVAR 43
32222: PUSH
32223: LD_INT 1
32225: ST_TO_ADDR
// case btype of 1 :
32226: LD_VAR 0 2
32230: PUSH
32231: LD_INT 1
32233: DOUBLE
32234: EQUAL
32235: IFTRUE 32239
32237: GO 32250
32239: POP
// bc_type := b_depot ; 2 :
32240: LD_ADDR_OWVAR 42
32244: PUSH
32245: LD_INT 0
32247: ST_TO_ADDR
32248: GO 32862
32250: LD_INT 2
32252: DOUBLE
32253: EQUAL
32254: IFTRUE 32258
32256: GO 32269
32258: POP
// bc_type := b_warehouse ; 3 :
32259: LD_ADDR_OWVAR 42
32263: PUSH
32264: LD_INT 1
32266: ST_TO_ADDR
32267: GO 32862
32269: LD_INT 3
32271: DOUBLE
32272: EQUAL
32273: IFTRUE 32277
32275: GO 32288
32277: POP
// bc_type := b_lab ; 4 .. 9 :
32278: LD_ADDR_OWVAR 42
32282: PUSH
32283: LD_INT 6
32285: ST_TO_ADDR
32286: GO 32862
32288: LD_INT 4
32290: DOUBLE
32291: GREATEREQUAL
32292: IFFALSE 32300
32294: LD_INT 9
32296: DOUBLE
32297: LESSEQUAL
32298: IFTRUE 32302
32300: GO 32354
32302: POP
// begin bc_type := b_lab_half ;
32303: LD_ADDR_OWVAR 42
32307: PUSH
32308: LD_INT 7
32310: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32311: LD_ADDR_OWVAR 44
32315: PUSH
32316: LD_INT 10
32318: PUSH
32319: LD_INT 11
32321: PUSH
32322: LD_INT 12
32324: PUSH
32325: LD_INT 15
32327: PUSH
32328: LD_INT 14
32330: PUSH
32331: LD_INT 13
32333: PUSH
32334: EMPTY
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: PUSH
32342: LD_VAR 0 2
32346: PUSH
32347: LD_INT 3
32349: MINUS
32350: ARRAY
32351: ST_TO_ADDR
// end ; 10 .. 13 :
32352: GO 32862
32354: LD_INT 10
32356: DOUBLE
32357: GREATEREQUAL
32358: IFFALSE 32366
32360: LD_INT 13
32362: DOUBLE
32363: LESSEQUAL
32364: IFTRUE 32368
32366: GO 32445
32368: POP
// begin bc_type := b_lab_full ;
32369: LD_ADDR_OWVAR 42
32373: PUSH
32374: LD_INT 8
32376: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32377: LD_ADDR_OWVAR 44
32381: PUSH
32382: LD_INT 10
32384: PUSH
32385: LD_INT 12
32387: PUSH
32388: LD_INT 14
32390: PUSH
32391: LD_INT 13
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: PUSH
32400: LD_VAR 0 2
32404: PUSH
32405: LD_INT 9
32407: MINUS
32408: ARRAY
32409: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32410: LD_ADDR_OWVAR 45
32414: PUSH
32415: LD_INT 11
32417: PUSH
32418: LD_INT 15
32420: PUSH
32421: LD_INT 12
32423: PUSH
32424: LD_INT 15
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: PUSH
32433: LD_VAR 0 2
32437: PUSH
32438: LD_INT 9
32440: MINUS
32441: ARRAY
32442: ST_TO_ADDR
// end ; 14 :
32443: GO 32862
32445: LD_INT 14
32447: DOUBLE
32448: EQUAL
32449: IFTRUE 32453
32451: GO 32464
32453: POP
// bc_type := b_workshop ; 15 :
32454: LD_ADDR_OWVAR 42
32458: PUSH
32459: LD_INT 2
32461: ST_TO_ADDR
32462: GO 32862
32464: LD_INT 15
32466: DOUBLE
32467: EQUAL
32468: IFTRUE 32472
32470: GO 32483
32472: POP
// bc_type := b_factory ; 16 :
32473: LD_ADDR_OWVAR 42
32477: PUSH
32478: LD_INT 3
32480: ST_TO_ADDR
32481: GO 32862
32483: LD_INT 16
32485: DOUBLE
32486: EQUAL
32487: IFTRUE 32491
32489: GO 32502
32491: POP
// bc_type := b_ext_gun ; 17 :
32492: LD_ADDR_OWVAR 42
32496: PUSH
32497: LD_INT 17
32499: ST_TO_ADDR
32500: GO 32862
32502: LD_INT 17
32504: DOUBLE
32505: EQUAL
32506: IFTRUE 32510
32508: GO 32538
32510: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32511: LD_ADDR_OWVAR 42
32515: PUSH
32516: LD_INT 19
32518: PUSH
32519: LD_INT 23
32521: PUSH
32522: LD_INT 19
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: PUSH
32530: LD_VAR 0 1
32534: ARRAY
32535: ST_TO_ADDR
32536: GO 32862
32538: LD_INT 18
32540: DOUBLE
32541: EQUAL
32542: IFTRUE 32546
32544: GO 32557
32546: POP
// bc_type := b_ext_radar ; 19 :
32547: LD_ADDR_OWVAR 42
32551: PUSH
32552: LD_INT 20
32554: ST_TO_ADDR
32555: GO 32862
32557: LD_INT 19
32559: DOUBLE
32560: EQUAL
32561: IFTRUE 32565
32563: GO 32576
32565: POP
// bc_type := b_ext_radio ; 20 :
32566: LD_ADDR_OWVAR 42
32570: PUSH
32571: LD_INT 22
32573: ST_TO_ADDR
32574: GO 32862
32576: LD_INT 20
32578: DOUBLE
32579: EQUAL
32580: IFTRUE 32584
32582: GO 32595
32584: POP
// bc_type := b_ext_siberium ; 21 :
32585: LD_ADDR_OWVAR 42
32589: PUSH
32590: LD_INT 21
32592: ST_TO_ADDR
32593: GO 32862
32595: LD_INT 21
32597: DOUBLE
32598: EQUAL
32599: IFTRUE 32603
32601: GO 32614
32603: POP
// bc_type := b_ext_computer ; 22 :
32604: LD_ADDR_OWVAR 42
32608: PUSH
32609: LD_INT 24
32611: ST_TO_ADDR
32612: GO 32862
32614: LD_INT 22
32616: DOUBLE
32617: EQUAL
32618: IFTRUE 32622
32620: GO 32633
32622: POP
// bc_type := b_ext_track ; 23 :
32623: LD_ADDR_OWVAR 42
32627: PUSH
32628: LD_INT 16
32630: ST_TO_ADDR
32631: GO 32862
32633: LD_INT 23
32635: DOUBLE
32636: EQUAL
32637: IFTRUE 32641
32639: GO 32652
32641: POP
// bc_type := b_ext_laser ; 24 :
32642: LD_ADDR_OWVAR 42
32646: PUSH
32647: LD_INT 25
32649: ST_TO_ADDR
32650: GO 32862
32652: LD_INT 24
32654: DOUBLE
32655: EQUAL
32656: IFTRUE 32660
32658: GO 32671
32660: POP
// bc_type := b_control_tower ; 25 :
32661: LD_ADDR_OWVAR 42
32665: PUSH
32666: LD_INT 36
32668: ST_TO_ADDR
32669: GO 32862
32671: LD_INT 25
32673: DOUBLE
32674: EQUAL
32675: IFTRUE 32679
32677: GO 32690
32679: POP
// bc_type := b_breastwork ; 26 :
32680: LD_ADDR_OWVAR 42
32684: PUSH
32685: LD_INT 31
32687: ST_TO_ADDR
32688: GO 32862
32690: LD_INT 26
32692: DOUBLE
32693: EQUAL
32694: IFTRUE 32698
32696: GO 32709
32698: POP
// bc_type := b_bunker ; 27 :
32699: LD_ADDR_OWVAR 42
32703: PUSH
32704: LD_INT 32
32706: ST_TO_ADDR
32707: GO 32862
32709: LD_INT 27
32711: DOUBLE
32712: EQUAL
32713: IFTRUE 32717
32715: GO 32728
32717: POP
// bc_type := b_turret ; 28 :
32718: LD_ADDR_OWVAR 42
32722: PUSH
32723: LD_INT 33
32725: ST_TO_ADDR
32726: GO 32862
32728: LD_INT 28
32730: DOUBLE
32731: EQUAL
32732: IFTRUE 32736
32734: GO 32747
32736: POP
// bc_type := b_armoury ; 29 :
32737: LD_ADDR_OWVAR 42
32741: PUSH
32742: LD_INT 4
32744: ST_TO_ADDR
32745: GO 32862
32747: LD_INT 29
32749: DOUBLE
32750: EQUAL
32751: IFTRUE 32755
32753: GO 32766
32755: POP
// bc_type := b_barracks ; 30 :
32756: LD_ADDR_OWVAR 42
32760: PUSH
32761: LD_INT 5
32763: ST_TO_ADDR
32764: GO 32862
32766: LD_INT 30
32768: DOUBLE
32769: EQUAL
32770: IFTRUE 32774
32772: GO 32785
32774: POP
// bc_type := b_solar_power ; 31 :
32775: LD_ADDR_OWVAR 42
32779: PUSH
32780: LD_INT 27
32782: ST_TO_ADDR
32783: GO 32862
32785: LD_INT 31
32787: DOUBLE
32788: EQUAL
32789: IFTRUE 32793
32791: GO 32804
32793: POP
// bc_type := b_oil_power ; 32 :
32794: LD_ADDR_OWVAR 42
32798: PUSH
32799: LD_INT 26
32801: ST_TO_ADDR
32802: GO 32862
32804: LD_INT 32
32806: DOUBLE
32807: EQUAL
32808: IFTRUE 32812
32810: GO 32823
32812: POP
// bc_type := b_siberite_power ; 33 :
32813: LD_ADDR_OWVAR 42
32817: PUSH
32818: LD_INT 28
32820: ST_TO_ADDR
32821: GO 32862
32823: LD_INT 33
32825: DOUBLE
32826: EQUAL
32827: IFTRUE 32831
32829: GO 32842
32831: POP
// bc_type := b_oil_mine ; 34 :
32832: LD_ADDR_OWVAR 42
32836: PUSH
32837: LD_INT 29
32839: ST_TO_ADDR
32840: GO 32862
32842: LD_INT 34
32844: DOUBLE
32845: EQUAL
32846: IFTRUE 32850
32848: GO 32861
32850: POP
// bc_type := b_siberite_mine ; end ;
32851: LD_ADDR_OWVAR 42
32855: PUSH
32856: LD_INT 30
32858: ST_TO_ADDR
32859: GO 32862
32861: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32862: LD_ADDR_VAR 0 8
32866: PUSH
32867: LD_VAR 0 5
32871: PPUSH
32872: LD_VAR 0 6
32876: PPUSH
32877: LD_VAR 0 3
32881: PPUSH
32882: CALL_OW 47
32886: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32887: LD_OWVAR 42
32891: PUSH
32892: LD_INT 32
32894: PUSH
32895: LD_INT 33
32897: PUSH
32898: EMPTY
32899: LIST
32900: LIST
32901: IN
32902: IFFALSE 32918
// PlaceWeaponTurret ( b , weapon ) ;
32904: LD_VAR 0 8
32908: PPUSH
32909: LD_VAR 0 4
32913: PPUSH
32914: CALL_OW 431
// end ;
32918: LD_VAR 0 7
32922: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32923: LD_INT 0
32925: PPUSH
32926: PPUSH
32927: PPUSH
32928: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32929: LD_ADDR_VAR 0 4
32933: PUSH
32934: LD_INT 22
32936: PUSH
32937: LD_OWVAR 2
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PUSH
32946: LD_INT 2
32948: PUSH
32949: LD_INT 30
32951: PUSH
32952: LD_INT 0
32954: PUSH
32955: EMPTY
32956: LIST
32957: LIST
32958: PUSH
32959: LD_INT 30
32961: PUSH
32962: LD_INT 1
32964: PUSH
32965: EMPTY
32966: LIST
32967: LIST
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: LIST
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PPUSH
32978: CALL_OW 69
32982: ST_TO_ADDR
// if not tmp then
32983: LD_VAR 0 4
32987: NOT
32988: IFFALSE 32992
// exit ;
32990: GO 33051
// for i in tmp do
32992: LD_ADDR_VAR 0 2
32996: PUSH
32997: LD_VAR 0 4
33001: PUSH
33002: FOR_IN
33003: IFFALSE 33049
// for j = 1 to 3 do
33005: LD_ADDR_VAR 0 3
33009: PUSH
33010: DOUBLE
33011: LD_INT 1
33013: DEC
33014: ST_TO_ADDR
33015: LD_INT 3
33017: PUSH
33018: FOR_TO
33019: IFFALSE 33045
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
33021: LD_VAR 0 2
33025: PPUSH
33026: CALL_OW 274
33030: PPUSH
33031: LD_VAR 0 3
33035: PPUSH
33036: LD_INT 99999
33038: PPUSH
33039: CALL_OW 277
33043: GO 33018
33045: POP
33046: POP
33047: GO 33002
33049: POP
33050: POP
// end ;
33051: LD_VAR 0 1
33055: RET
// export function hHackSetLevel10 ; var i , j ; begin
33056: LD_INT 0
33058: PPUSH
33059: PPUSH
33060: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33061: LD_ADDR_VAR 0 2
33065: PUSH
33066: LD_INT 21
33068: PUSH
33069: LD_INT 1
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: PPUSH
33076: CALL_OW 69
33080: PUSH
33081: FOR_IN
33082: IFFALSE 33134
// if IsSelected ( i ) then
33084: LD_VAR 0 2
33088: PPUSH
33089: CALL_OW 306
33093: IFFALSE 33132
// begin for j := 1 to 4 do
33095: LD_ADDR_VAR 0 3
33099: PUSH
33100: DOUBLE
33101: LD_INT 1
33103: DEC
33104: ST_TO_ADDR
33105: LD_INT 4
33107: PUSH
33108: FOR_TO
33109: IFFALSE 33130
// SetSkill ( i , j , 10 ) ;
33111: LD_VAR 0 2
33115: PPUSH
33116: LD_VAR 0 3
33120: PPUSH
33121: LD_INT 10
33123: PPUSH
33124: CALL_OW 237
33128: GO 33108
33130: POP
33131: POP
// end ;
33132: GO 33081
33134: POP
33135: POP
// end ;
33136: LD_VAR 0 1
33140: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33141: LD_INT 0
33143: PPUSH
33144: PPUSH
33145: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33146: LD_ADDR_VAR 0 2
33150: PUSH
33151: LD_INT 22
33153: PUSH
33154: LD_OWVAR 2
33158: PUSH
33159: EMPTY
33160: LIST
33161: LIST
33162: PUSH
33163: LD_INT 21
33165: PUSH
33166: LD_INT 1
33168: PUSH
33169: EMPTY
33170: LIST
33171: LIST
33172: PUSH
33173: EMPTY
33174: LIST
33175: LIST
33176: PPUSH
33177: CALL_OW 69
33181: PUSH
33182: FOR_IN
33183: IFFALSE 33224
// begin for j := 1 to 4 do
33185: LD_ADDR_VAR 0 3
33189: PUSH
33190: DOUBLE
33191: LD_INT 1
33193: DEC
33194: ST_TO_ADDR
33195: LD_INT 4
33197: PUSH
33198: FOR_TO
33199: IFFALSE 33220
// SetSkill ( i , j , 10 ) ;
33201: LD_VAR 0 2
33205: PPUSH
33206: LD_VAR 0 3
33210: PPUSH
33211: LD_INT 10
33213: PPUSH
33214: CALL_OW 237
33218: GO 33198
33220: POP
33221: POP
// end ;
33222: GO 33182
33224: POP
33225: POP
// end ;
33226: LD_VAR 0 1
33230: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33231: LD_INT 0
33233: PPUSH
// uc_side := your_side ;
33234: LD_ADDR_OWVAR 20
33238: PUSH
33239: LD_OWVAR 2
33243: ST_TO_ADDR
// uc_nation := nation ;
33244: LD_ADDR_OWVAR 21
33248: PUSH
33249: LD_VAR 0 1
33253: ST_TO_ADDR
// InitHc ;
33254: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33258: LD_INT 0
33260: PPUSH
33261: LD_VAR 0 2
33265: PPUSH
33266: LD_VAR 0 3
33270: PPUSH
33271: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33275: LD_VAR 0 4
33279: PPUSH
33280: LD_VAR 0 5
33284: PPUSH
33285: CALL_OW 428
33289: PUSH
33290: LD_INT 0
33292: EQUAL
33293: IFFALSE 33317
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33295: CALL_OW 44
33299: PPUSH
33300: LD_VAR 0 4
33304: PPUSH
33305: LD_VAR 0 5
33309: PPUSH
33310: LD_INT 1
33312: PPUSH
33313: CALL_OW 48
// end ;
33317: LD_VAR 0 6
33321: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33322: LD_INT 0
33324: PPUSH
33325: PPUSH
// uc_side := your_side ;
33326: LD_ADDR_OWVAR 20
33330: PUSH
33331: LD_OWVAR 2
33335: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33336: LD_VAR 0 1
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 3
33349: PUSH
33350: LD_INT 4
33352: PUSH
33353: LD_INT 5
33355: PUSH
33356: EMPTY
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: IN
33363: IFFALSE 33375
// uc_nation := nation_american else
33365: LD_ADDR_OWVAR 21
33369: PUSH
33370: LD_INT 1
33372: ST_TO_ADDR
33373: GO 33418
// if chassis in [ 11 , 12 , 13 , 14 ] then
33375: LD_VAR 0 1
33379: PUSH
33380: LD_INT 11
33382: PUSH
33383: LD_INT 12
33385: PUSH
33386: LD_INT 13
33388: PUSH
33389: LD_INT 14
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: LIST
33396: LIST
33397: IN
33398: IFFALSE 33410
// uc_nation := nation_arabian else
33400: LD_ADDR_OWVAR 21
33404: PUSH
33405: LD_INT 2
33407: ST_TO_ADDR
33408: GO 33418
// uc_nation := nation_russian ;
33410: LD_ADDR_OWVAR 21
33414: PUSH
33415: LD_INT 3
33417: ST_TO_ADDR
// vc_chassis := chassis ;
33418: LD_ADDR_OWVAR 37
33422: PUSH
33423: LD_VAR 0 1
33427: ST_TO_ADDR
// vc_engine := engine ;
33428: LD_ADDR_OWVAR 39
33432: PUSH
33433: LD_VAR 0 2
33437: ST_TO_ADDR
// vc_control := control ;
33438: LD_ADDR_OWVAR 38
33442: PUSH
33443: LD_VAR 0 3
33447: ST_TO_ADDR
// vc_weapon := weapon ;
33448: LD_ADDR_OWVAR 40
33452: PUSH
33453: LD_VAR 0 4
33457: ST_TO_ADDR
// un := CreateVehicle ;
33458: LD_ADDR_VAR 0 8
33462: PUSH
33463: CALL_OW 45
33467: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33468: LD_VAR 0 8
33472: PPUSH
33473: LD_INT 0
33475: PPUSH
33476: LD_INT 5
33478: PPUSH
33479: CALL_OW 12
33483: PPUSH
33484: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33488: LD_VAR 0 8
33492: PPUSH
33493: LD_VAR 0 5
33497: PPUSH
33498: LD_VAR 0 6
33502: PPUSH
33503: LD_INT 1
33505: PPUSH
33506: CALL_OW 48
// end ;
33510: LD_VAR 0 7
33514: RET
// export hInvincible ; every 1 do
33515: GO 33517
33517: DISABLE
// hInvincible := [ ] ;
33518: LD_ADDR_EXP 129
33522: PUSH
33523: EMPTY
33524: ST_TO_ADDR
33525: END
// every 10 do var i ;
33526: GO 33528
33528: DISABLE
33529: LD_INT 0
33531: PPUSH
// begin enable ;
33532: ENABLE
// if not hInvincible then
33533: LD_EXP 129
33537: NOT
33538: IFFALSE 33542
// exit ;
33540: GO 33586
// for i in hInvincible do
33542: LD_ADDR_VAR 0 1
33546: PUSH
33547: LD_EXP 129
33551: PUSH
33552: FOR_IN
33553: IFFALSE 33584
// if GetLives ( i ) < 1000 then
33555: LD_VAR 0 1
33559: PPUSH
33560: CALL_OW 256
33564: PUSH
33565: LD_INT 1000
33567: LESS
33568: IFFALSE 33582
// SetLives ( i , 1000 ) ;
33570: LD_VAR 0 1
33574: PPUSH
33575: LD_INT 1000
33577: PPUSH
33578: CALL_OW 234
33582: GO 33552
33584: POP
33585: POP
// end ;
33586: PPOPN 1
33588: END
// export function hHackInvincible ; var i ; begin
33589: LD_INT 0
33591: PPUSH
33592: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33593: LD_ADDR_VAR 0 2
33597: PUSH
33598: LD_INT 2
33600: PUSH
33601: LD_INT 21
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: LD_INT 21
33613: PUSH
33614: LD_INT 2
33616: PUSH
33617: EMPTY
33618: LIST
33619: LIST
33620: PUSH
33621: EMPTY
33622: LIST
33623: LIST
33624: LIST
33625: PPUSH
33626: CALL_OW 69
33630: PUSH
33631: FOR_IN
33632: IFFALSE 33693
// if IsSelected ( i ) then
33634: LD_VAR 0 2
33638: PPUSH
33639: CALL_OW 306
33643: IFFALSE 33691
// begin if i in hInvincible then
33645: LD_VAR 0 2
33649: PUSH
33650: LD_EXP 129
33654: IN
33655: IFFALSE 33675
// hInvincible := hInvincible diff i else
33657: LD_ADDR_EXP 129
33661: PUSH
33662: LD_EXP 129
33666: PUSH
33667: LD_VAR 0 2
33671: DIFF
33672: ST_TO_ADDR
33673: GO 33691
// hInvincible := hInvincible union i ;
33675: LD_ADDR_EXP 129
33679: PUSH
33680: LD_EXP 129
33684: PUSH
33685: LD_VAR 0 2
33689: UNION
33690: ST_TO_ADDR
// end ;
33691: GO 33631
33693: POP
33694: POP
// end ;
33695: LD_VAR 0 1
33699: RET
// export function hHackInvisible ; var i , j ; begin
33700: LD_INT 0
33702: PPUSH
33703: PPUSH
33704: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33705: LD_ADDR_VAR 0 2
33709: PUSH
33710: LD_INT 21
33712: PUSH
33713: LD_INT 1
33715: PUSH
33716: EMPTY
33717: LIST
33718: LIST
33719: PPUSH
33720: CALL_OW 69
33724: PUSH
33725: FOR_IN
33726: IFFALSE 33750
// if IsSelected ( i ) then
33728: LD_VAR 0 2
33732: PPUSH
33733: CALL_OW 306
33737: IFFALSE 33748
// ComForceInvisible ( i ) ;
33739: LD_VAR 0 2
33743: PPUSH
33744: CALL_OW 496
33748: GO 33725
33750: POP
33751: POP
// end ;
33752: LD_VAR 0 1
33756: RET
// export function hHackChangeYourSide ; begin
33757: LD_INT 0
33759: PPUSH
// if your_side = 8 then
33760: LD_OWVAR 2
33764: PUSH
33765: LD_INT 8
33767: EQUAL
33768: IFFALSE 33780
// your_side := 0 else
33770: LD_ADDR_OWVAR 2
33774: PUSH
33775: LD_INT 0
33777: ST_TO_ADDR
33778: GO 33794
// your_side := your_side + 1 ;
33780: LD_ADDR_OWVAR 2
33784: PUSH
33785: LD_OWVAR 2
33789: PUSH
33790: LD_INT 1
33792: PLUS
33793: ST_TO_ADDR
// end ;
33794: LD_VAR 0 1
33798: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33799: LD_INT 0
33801: PPUSH
33802: PPUSH
33803: PPUSH
// for i in all_units do
33804: LD_ADDR_VAR 0 2
33808: PUSH
33809: LD_OWVAR 3
33813: PUSH
33814: FOR_IN
33815: IFFALSE 33893
// if IsSelected ( i ) then
33817: LD_VAR 0 2
33821: PPUSH
33822: CALL_OW 306
33826: IFFALSE 33891
// begin j := GetSide ( i ) ;
33828: LD_ADDR_VAR 0 3
33832: PUSH
33833: LD_VAR 0 2
33837: PPUSH
33838: CALL_OW 255
33842: ST_TO_ADDR
// if j = 8 then
33843: LD_VAR 0 3
33847: PUSH
33848: LD_INT 8
33850: EQUAL
33851: IFFALSE 33863
// j := 0 else
33853: LD_ADDR_VAR 0 3
33857: PUSH
33858: LD_INT 0
33860: ST_TO_ADDR
33861: GO 33877
// j := j + 1 ;
33863: LD_ADDR_VAR 0 3
33867: PUSH
33868: LD_VAR 0 3
33872: PUSH
33873: LD_INT 1
33875: PLUS
33876: ST_TO_ADDR
// SetSide ( i , j ) ;
33877: LD_VAR 0 2
33881: PPUSH
33882: LD_VAR 0 3
33886: PPUSH
33887: CALL_OW 235
// end ;
33891: GO 33814
33893: POP
33894: POP
// end ;
33895: LD_VAR 0 1
33899: RET
// export function hHackFog ; begin
33900: LD_INT 0
33902: PPUSH
// FogOff ( true ) ;
33903: LD_INT 1
33905: PPUSH
33906: CALL_OW 344
// end ;
33910: LD_VAR 0 1
33914: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33915: LD_INT 0
33917: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33918: LD_VAR 0 1
33922: PPUSH
33923: LD_VAR 0 2
33927: PPUSH
33928: LD_VAR 0 3
33932: PPUSH
33933: LD_INT 1
33935: PPUSH
33936: LD_INT 1
33938: PPUSH
33939: CALL_OW 483
// CenterOnXY ( x , y ) ;
33943: LD_VAR 0 2
33947: PPUSH
33948: LD_VAR 0 3
33952: PPUSH
33953: CALL_OW 84
// end ; end_of_file
33957: LD_VAR 0 4
33961: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33962: LD_INT 0
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33968: LD_VAR 0 1
33972: PPUSH
33973: CALL_OW 264
33977: PUSH
33978: LD_EXP 56
33982: EQUAL
33983: IFFALSE 34055
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33985: LD_INT 68
33987: PPUSH
33988: LD_VAR 0 1
33992: PPUSH
33993: CALL_OW 255
33997: PPUSH
33998: CALL_OW 321
34002: PUSH
34003: LD_INT 2
34005: EQUAL
34006: IFFALSE 34018
// eff := 70 else
34008: LD_ADDR_VAR 0 4
34012: PUSH
34013: LD_INT 70
34015: ST_TO_ADDR
34016: GO 34026
// eff := 30 ;
34018: LD_ADDR_VAR 0 4
34022: PUSH
34023: LD_INT 30
34025: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34026: LD_VAR 0 1
34030: PPUSH
34031: CALL_OW 250
34035: PPUSH
34036: LD_VAR 0 1
34040: PPUSH
34041: CALL_OW 251
34045: PPUSH
34046: LD_VAR 0 4
34050: PPUSH
34051: CALL_OW 495
// end ; end ;
34055: LD_VAR 0 2
34059: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34060: LD_INT 0
34062: PPUSH
// end ;
34063: LD_VAR 0 4
34067: RET
// export function SOS_Command ( cmd ) ; begin
34068: LD_INT 0
34070: PPUSH
// end ;
34071: LD_VAR 0 2
34075: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34076: LD_INT 0
34078: PPUSH
// end ;
34079: LD_VAR 0 6
34083: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34084: LD_INT 0
34086: PPUSH
34087: PPUSH
// if not vehicle or not factory then
34088: LD_VAR 0 1
34092: NOT
34093: PUSH
34094: LD_VAR 0 2
34098: NOT
34099: OR
34100: IFFALSE 34104
// exit ;
34102: GO 34335
// if factoryWaypoints >= factory then
34104: LD_EXP 130
34108: PUSH
34109: LD_VAR 0 2
34113: GREATEREQUAL
34114: IFFALSE 34335
// if factoryWaypoints [ factory ] then
34116: LD_EXP 130
34120: PUSH
34121: LD_VAR 0 2
34125: ARRAY
34126: IFFALSE 34335
// begin if GetControl ( vehicle ) = control_manual then
34128: LD_VAR 0 1
34132: PPUSH
34133: CALL_OW 263
34137: PUSH
34138: LD_INT 1
34140: EQUAL
34141: IFFALSE 34222
// begin driver := IsDrivenBy ( vehicle ) ;
34143: LD_ADDR_VAR 0 4
34147: PUSH
34148: LD_VAR 0 1
34152: PPUSH
34153: CALL_OW 311
34157: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34158: LD_VAR 0 4
34162: PPUSH
34163: LD_EXP 130
34167: PUSH
34168: LD_VAR 0 2
34172: ARRAY
34173: PUSH
34174: LD_INT 3
34176: ARRAY
34177: PPUSH
34178: LD_EXP 130
34182: PUSH
34183: LD_VAR 0 2
34187: ARRAY
34188: PUSH
34189: LD_INT 4
34191: ARRAY
34192: PPUSH
34193: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34197: LD_VAR 0 4
34201: PPUSH
34202: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34206: LD_VAR 0 4
34210: PPUSH
34211: LD_VAR 0 2
34215: PPUSH
34216: CALL_OW 180
// end else
34220: GO 34335
// if GetControl ( vehicle ) = control_remote then
34222: LD_VAR 0 1
34226: PPUSH
34227: CALL_OW 263
34231: PUSH
34232: LD_INT 2
34234: EQUAL
34235: IFFALSE 34296
// begin wait ( 0 0$2 ) ;
34237: LD_INT 70
34239: PPUSH
34240: CALL_OW 67
// if Connect ( vehicle ) then
34244: LD_VAR 0 1
34248: PPUSH
34249: CALL 46559 0 1
34253: IFFALSE 34294
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34255: LD_VAR 0 1
34259: PPUSH
34260: LD_EXP 130
34264: PUSH
34265: LD_VAR 0 2
34269: ARRAY
34270: PUSH
34271: LD_INT 3
34273: ARRAY
34274: PPUSH
34275: LD_EXP 130
34279: PUSH
34280: LD_VAR 0 2
34284: ARRAY
34285: PUSH
34286: LD_INT 4
34288: ARRAY
34289: PPUSH
34290: CALL_OW 171
// end else
34294: GO 34335
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34296: LD_VAR 0 1
34300: PPUSH
34301: LD_EXP 130
34305: PUSH
34306: LD_VAR 0 2
34310: ARRAY
34311: PUSH
34312: LD_INT 3
34314: ARRAY
34315: PPUSH
34316: LD_EXP 130
34320: PUSH
34321: LD_VAR 0 2
34325: ARRAY
34326: PUSH
34327: LD_INT 4
34329: ARRAY
34330: PPUSH
34331: CALL_OW 171
// end ; end ;
34335: LD_VAR 0 3
34339: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34340: LD_INT 0
34342: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34343: LD_VAR 0 1
34347: PUSH
34348: LD_INT 250
34350: EQUAL
34351: PUSH
34352: LD_VAR 0 2
34356: PPUSH
34357: CALL_OW 264
34361: PUSH
34362: LD_EXP 59
34366: EQUAL
34367: AND
34368: IFFALSE 34389
// MinerPlaceMine ( unit , x , y ) ;
34370: LD_VAR 0 2
34374: PPUSH
34375: LD_VAR 0 4
34379: PPUSH
34380: LD_VAR 0 5
34384: PPUSH
34385: CALL 37117 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34389: LD_VAR 0 1
34393: PUSH
34394: LD_INT 251
34396: EQUAL
34397: PUSH
34398: LD_VAR 0 2
34402: PPUSH
34403: CALL_OW 264
34407: PUSH
34408: LD_EXP 59
34412: EQUAL
34413: AND
34414: IFFALSE 34435
// MinerDetonateMine ( unit , x , y ) ;
34416: LD_VAR 0 2
34420: PPUSH
34421: LD_VAR 0 4
34425: PPUSH
34426: LD_VAR 0 5
34430: PPUSH
34431: CALL 37394 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34435: LD_VAR 0 1
34439: PUSH
34440: LD_INT 252
34442: EQUAL
34443: PUSH
34444: LD_VAR 0 2
34448: PPUSH
34449: CALL_OW 264
34453: PUSH
34454: LD_EXP 59
34458: EQUAL
34459: AND
34460: IFFALSE 34481
// MinerCreateMinefield ( unit , x , y ) ;
34462: LD_VAR 0 2
34466: PPUSH
34467: LD_VAR 0 4
34471: PPUSH
34472: LD_VAR 0 5
34476: PPUSH
34477: CALL 37811 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34481: LD_VAR 0 1
34485: PUSH
34486: LD_INT 253
34488: EQUAL
34489: PUSH
34490: LD_VAR 0 2
34494: PPUSH
34495: CALL_OW 257
34499: PUSH
34500: LD_INT 5
34502: EQUAL
34503: AND
34504: IFFALSE 34525
// ComBinocular ( unit , x , y ) ;
34506: LD_VAR 0 2
34510: PPUSH
34511: LD_VAR 0 4
34515: PPUSH
34516: LD_VAR 0 5
34520: PPUSH
34521: CALL 38182 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34525: LD_VAR 0 1
34529: PUSH
34530: LD_INT 254
34532: EQUAL
34533: PUSH
34534: LD_VAR 0 2
34538: PPUSH
34539: CALL_OW 264
34543: PUSH
34544: LD_EXP 54
34548: EQUAL
34549: AND
34550: PUSH
34551: LD_VAR 0 3
34555: PPUSH
34556: CALL_OW 263
34560: PUSH
34561: LD_INT 3
34563: EQUAL
34564: AND
34565: IFFALSE 34581
// HackDestroyVehicle ( unit , selectedUnit ) ;
34567: LD_VAR 0 2
34571: PPUSH
34572: LD_VAR 0 3
34576: PPUSH
34577: CALL 36477 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34581: LD_VAR 0 1
34585: PUSH
34586: LD_INT 255
34588: EQUAL
34589: PUSH
34590: LD_VAR 0 2
34594: PPUSH
34595: CALL_OW 264
34599: PUSH
34600: LD_INT 14
34602: PUSH
34603: LD_INT 53
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: IN
34610: AND
34611: PUSH
34612: LD_VAR 0 4
34616: PPUSH
34617: LD_VAR 0 5
34621: PPUSH
34622: CALL_OW 488
34626: AND
34627: IFFALSE 34651
// CutTreeXYR ( unit , x , y , 12 ) ;
34629: LD_VAR 0 2
34633: PPUSH
34634: LD_VAR 0 4
34638: PPUSH
34639: LD_VAR 0 5
34643: PPUSH
34644: LD_INT 12
34646: PPUSH
34647: CALL 35043 0 4
// if cmd = 256 then
34651: LD_VAR 0 1
34655: PUSH
34656: LD_INT 256
34658: EQUAL
34659: IFFALSE 34680
// SetFactoryWaypoint ( unit , x , y ) ;
34661: LD_VAR 0 2
34665: PPUSH
34666: LD_VAR 0 4
34670: PPUSH
34671: LD_VAR 0 5
34675: PPUSH
34676: CALL 34685 0 3
// end ;
34680: LD_VAR 0 6
34684: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34685: LD_INT 0
34687: PPUSH
34688: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34689: LD_VAR 0 1
34693: NOT
34694: PUSH
34695: LD_VAR 0 2
34699: PPUSH
34700: LD_VAR 0 3
34704: PPUSH
34705: CALL_OW 488
34709: NOT
34710: OR
34711: PUSH
34712: LD_VAR 0 1
34716: PPUSH
34717: CALL_OW 266
34721: PUSH
34722: LD_INT 3
34724: NONEQUAL
34725: PUSH
34726: LD_VAR 0 1
34730: PPUSH
34731: CALL_OW 247
34735: PUSH
34736: LD_INT 1
34738: EQUAL
34739: NOT
34740: AND
34741: OR
34742: IFFALSE 34746
// exit ;
34744: GO 34895
// if GetType ( factory ) = unit_human then
34746: LD_VAR 0 1
34750: PPUSH
34751: CALL_OW 247
34755: PUSH
34756: LD_INT 1
34758: EQUAL
34759: IFFALSE 34776
// factory := IsInUnit ( factory ) ;
34761: LD_ADDR_VAR 0 1
34765: PUSH
34766: LD_VAR 0 1
34770: PPUSH
34771: CALL_OW 310
34775: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34776: LD_VAR 0 1
34780: PPUSH
34781: CALL_OW 266
34785: PUSH
34786: LD_INT 3
34788: NONEQUAL
34789: IFFALSE 34793
// exit ;
34791: GO 34895
// if HexInfo ( x , y ) = factory then
34793: LD_VAR 0 2
34797: PPUSH
34798: LD_VAR 0 3
34802: PPUSH
34803: CALL_OW 428
34807: PUSH
34808: LD_VAR 0 1
34812: EQUAL
34813: IFFALSE 34840
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34815: LD_ADDR_EXP 130
34819: PUSH
34820: LD_EXP 130
34824: PPUSH
34825: LD_VAR 0 1
34829: PPUSH
34830: LD_INT 0
34832: PPUSH
34833: CALL_OW 1
34837: ST_TO_ADDR
34838: GO 34891
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34840: LD_ADDR_EXP 130
34844: PUSH
34845: LD_EXP 130
34849: PPUSH
34850: LD_VAR 0 1
34854: PPUSH
34855: LD_VAR 0 1
34859: PPUSH
34860: CALL_OW 255
34864: PUSH
34865: LD_VAR 0 1
34869: PUSH
34870: LD_VAR 0 2
34874: PUSH
34875: LD_VAR 0 3
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: PPUSH
34886: CALL_OW 1
34890: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34891: CALL 34900 0 0
// end ;
34895: LD_VAR 0 4
34899: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34900: LD_INT 0
34902: PPUSH
34903: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34904: LD_STRING resetFactoryWaypoint();
34906: PPUSH
34907: CALL_OW 559
// if factoryWaypoints then
34911: LD_EXP 130
34915: IFFALSE 35038
// begin for i := 1 to factoryWaypoints do
34917: LD_ADDR_VAR 0 2
34921: PUSH
34922: DOUBLE
34923: LD_INT 1
34925: DEC
34926: ST_TO_ADDR
34927: LD_EXP 130
34931: PUSH
34932: FOR_TO
34933: IFFALSE 35036
// if factoryWaypoints [ i ] then
34935: LD_EXP 130
34939: PUSH
34940: LD_VAR 0 2
34944: ARRAY
34945: IFFALSE 35034
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34947: LD_STRING setFactoryWaypointXY(
34949: PUSH
34950: LD_EXP 130
34954: PUSH
34955: LD_VAR 0 2
34959: ARRAY
34960: PUSH
34961: LD_INT 1
34963: ARRAY
34964: STR
34965: PUSH
34966: LD_STRING ,
34968: STR
34969: PUSH
34970: LD_EXP 130
34974: PUSH
34975: LD_VAR 0 2
34979: ARRAY
34980: PUSH
34981: LD_INT 2
34983: ARRAY
34984: STR
34985: PUSH
34986: LD_STRING ,
34988: STR
34989: PUSH
34990: LD_EXP 130
34994: PUSH
34995: LD_VAR 0 2
34999: ARRAY
35000: PUSH
35001: LD_INT 3
35003: ARRAY
35004: STR
35005: PUSH
35006: LD_STRING ,
35008: STR
35009: PUSH
35010: LD_EXP 130
35014: PUSH
35015: LD_VAR 0 2
35019: ARRAY
35020: PUSH
35021: LD_INT 4
35023: ARRAY
35024: STR
35025: PUSH
35026: LD_STRING )
35028: STR
35029: PPUSH
35030: CALL_OW 559
35034: GO 34932
35036: POP
35037: POP
// end ; end ;
35038: LD_VAR 0 1
35042: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35043: LD_INT 0
35045: PPUSH
35046: PPUSH
35047: PPUSH
35048: PPUSH
35049: PPUSH
35050: PPUSH
35051: PPUSH
35052: PPUSH
35053: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35054: LD_VAR 0 1
35058: NOT
35059: PUSH
35060: LD_VAR 0 2
35064: PPUSH
35065: LD_VAR 0 3
35069: PPUSH
35070: CALL_OW 488
35074: NOT
35075: OR
35076: PUSH
35077: LD_VAR 0 4
35081: NOT
35082: OR
35083: IFFALSE 35087
// exit ;
35085: GO 35427
// list := [ ] ;
35087: LD_ADDR_VAR 0 13
35091: PUSH
35092: EMPTY
35093: ST_TO_ADDR
// if x - r < 0 then
35094: LD_VAR 0 2
35098: PUSH
35099: LD_VAR 0 4
35103: MINUS
35104: PUSH
35105: LD_INT 0
35107: LESS
35108: IFFALSE 35120
// min_x := 0 else
35110: LD_ADDR_VAR 0 7
35114: PUSH
35115: LD_INT 0
35117: ST_TO_ADDR
35118: GO 35136
// min_x := x - r ;
35120: LD_ADDR_VAR 0 7
35124: PUSH
35125: LD_VAR 0 2
35129: PUSH
35130: LD_VAR 0 4
35134: MINUS
35135: ST_TO_ADDR
// if y - r < 0 then
35136: LD_VAR 0 3
35140: PUSH
35141: LD_VAR 0 4
35145: MINUS
35146: PUSH
35147: LD_INT 0
35149: LESS
35150: IFFALSE 35162
// min_y := 0 else
35152: LD_ADDR_VAR 0 8
35156: PUSH
35157: LD_INT 0
35159: ST_TO_ADDR
35160: GO 35178
// min_y := y - r ;
35162: LD_ADDR_VAR 0 8
35166: PUSH
35167: LD_VAR 0 3
35171: PUSH
35172: LD_VAR 0 4
35176: MINUS
35177: ST_TO_ADDR
// max_x := x + r ;
35178: LD_ADDR_VAR 0 9
35182: PUSH
35183: LD_VAR 0 2
35187: PUSH
35188: LD_VAR 0 4
35192: PLUS
35193: ST_TO_ADDR
// max_y := y + r ;
35194: LD_ADDR_VAR 0 10
35198: PUSH
35199: LD_VAR 0 3
35203: PUSH
35204: LD_VAR 0 4
35208: PLUS
35209: ST_TO_ADDR
// for _x = min_x to max_x do
35210: LD_ADDR_VAR 0 11
35214: PUSH
35215: DOUBLE
35216: LD_VAR 0 7
35220: DEC
35221: ST_TO_ADDR
35222: LD_VAR 0 9
35226: PUSH
35227: FOR_TO
35228: IFFALSE 35345
// for _y = min_y to max_y do
35230: LD_ADDR_VAR 0 12
35234: PUSH
35235: DOUBLE
35236: LD_VAR 0 8
35240: DEC
35241: ST_TO_ADDR
35242: LD_VAR 0 10
35246: PUSH
35247: FOR_TO
35248: IFFALSE 35341
// begin if not ValidHex ( _x , _y ) then
35250: LD_VAR 0 11
35254: PPUSH
35255: LD_VAR 0 12
35259: PPUSH
35260: CALL_OW 488
35264: NOT
35265: IFFALSE 35269
// continue ;
35267: GO 35247
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35269: LD_VAR 0 11
35273: PPUSH
35274: LD_VAR 0 12
35278: PPUSH
35279: CALL_OW 351
35283: PUSH
35284: LD_VAR 0 11
35288: PPUSH
35289: LD_VAR 0 12
35293: PPUSH
35294: CALL_OW 554
35298: AND
35299: IFFALSE 35339
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35301: LD_ADDR_VAR 0 13
35305: PUSH
35306: LD_VAR 0 13
35310: PPUSH
35311: LD_VAR 0 13
35315: PUSH
35316: LD_INT 1
35318: PLUS
35319: PPUSH
35320: LD_VAR 0 11
35324: PUSH
35325: LD_VAR 0 12
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PPUSH
35334: CALL_OW 2
35338: ST_TO_ADDR
// end ;
35339: GO 35247
35341: POP
35342: POP
35343: GO 35227
35345: POP
35346: POP
// if not list then
35347: LD_VAR 0 13
35351: NOT
35352: IFFALSE 35356
// exit ;
35354: GO 35427
// for i in list do
35356: LD_ADDR_VAR 0 6
35360: PUSH
35361: LD_VAR 0 13
35365: PUSH
35366: FOR_IN
35367: IFFALSE 35425
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35369: LD_VAR 0 1
35373: PPUSH
35374: LD_STRING M
35376: PUSH
35377: LD_VAR 0 6
35381: PUSH
35382: LD_INT 1
35384: ARRAY
35385: PUSH
35386: LD_VAR 0 6
35390: PUSH
35391: LD_INT 2
35393: ARRAY
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: LD_INT 0
35400: PUSH
35401: LD_INT 0
35403: PUSH
35404: LD_INT 0
35406: PUSH
35407: EMPTY
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: PUSH
35416: EMPTY
35417: LIST
35418: PPUSH
35419: CALL_OW 447
35423: GO 35366
35425: POP
35426: POP
// end ;
35427: LD_VAR 0 5
35431: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35432: LD_EXP 131
35436: NOT
35437: IFFALSE 35487
35439: GO 35441
35441: DISABLE
// begin initHack := true ;
35442: LD_ADDR_EXP 131
35446: PUSH
35447: LD_INT 1
35449: ST_TO_ADDR
// hackTanks := [ ] ;
35450: LD_ADDR_EXP 132
35454: PUSH
35455: EMPTY
35456: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35457: LD_ADDR_EXP 133
35461: PUSH
35462: EMPTY
35463: ST_TO_ADDR
// hackLimit := 3 ;
35464: LD_ADDR_EXP 134
35468: PUSH
35469: LD_INT 3
35471: ST_TO_ADDR
// hackDist := 12 ;
35472: LD_ADDR_EXP 135
35476: PUSH
35477: LD_INT 12
35479: ST_TO_ADDR
// hackCounter := [ ] ;
35480: LD_ADDR_EXP 136
35484: PUSH
35485: EMPTY
35486: ST_TO_ADDR
// end ;
35487: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35488: LD_EXP 131
35492: PUSH
35493: LD_INT 34
35495: PUSH
35496: LD_EXP 54
35500: PUSH
35501: EMPTY
35502: LIST
35503: LIST
35504: PPUSH
35505: CALL_OW 69
35509: AND
35510: IFFALSE 35765
35512: GO 35514
35514: DISABLE
35515: LD_INT 0
35517: PPUSH
35518: PPUSH
// begin enable ;
35519: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35520: LD_ADDR_VAR 0 1
35524: PUSH
35525: LD_INT 34
35527: PUSH
35528: LD_EXP 54
35532: PUSH
35533: EMPTY
35534: LIST
35535: LIST
35536: PPUSH
35537: CALL_OW 69
35541: PUSH
35542: FOR_IN
35543: IFFALSE 35763
// begin if not i in hackTanks then
35545: LD_VAR 0 1
35549: PUSH
35550: LD_EXP 132
35554: IN
35555: NOT
35556: IFFALSE 35639
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35558: LD_ADDR_EXP 132
35562: PUSH
35563: LD_EXP 132
35567: PPUSH
35568: LD_EXP 132
35572: PUSH
35573: LD_INT 1
35575: PLUS
35576: PPUSH
35577: LD_VAR 0 1
35581: PPUSH
35582: CALL_OW 1
35586: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35587: LD_ADDR_EXP 133
35591: PUSH
35592: LD_EXP 133
35596: PPUSH
35597: LD_EXP 133
35601: PUSH
35602: LD_INT 1
35604: PLUS
35605: PPUSH
35606: EMPTY
35607: PPUSH
35608: CALL_OW 1
35612: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35613: LD_ADDR_EXP 136
35617: PUSH
35618: LD_EXP 136
35622: PPUSH
35623: LD_EXP 136
35627: PUSH
35628: LD_INT 1
35630: PLUS
35631: PPUSH
35632: EMPTY
35633: PPUSH
35634: CALL_OW 1
35638: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35639: LD_VAR 0 1
35643: PPUSH
35644: CALL_OW 302
35648: NOT
35649: IFFALSE 35662
// begin HackUnlinkAll ( i ) ;
35651: LD_VAR 0 1
35655: PPUSH
35656: CALL 35768 0 1
// continue ;
35660: GO 35542
// end ; HackCheckCapturedStatus ( i ) ;
35662: LD_VAR 0 1
35666: PPUSH
35667: CALL 36211 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35671: LD_ADDR_VAR 0 2
35675: PUSH
35676: LD_INT 81
35678: PUSH
35679: LD_VAR 0 1
35683: PPUSH
35684: CALL_OW 255
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: LD_INT 33
35695: PUSH
35696: LD_INT 3
35698: PUSH
35699: EMPTY
35700: LIST
35701: LIST
35702: PUSH
35703: LD_INT 91
35705: PUSH
35706: LD_VAR 0 1
35710: PUSH
35711: LD_EXP 135
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: LIST
35720: PUSH
35721: LD_INT 50
35723: PUSH
35724: EMPTY
35725: LIST
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: PPUSH
35733: CALL_OW 69
35737: ST_TO_ADDR
// if not tmp then
35738: LD_VAR 0 2
35742: NOT
35743: IFFALSE 35747
// continue ;
35745: GO 35542
// HackLink ( i , tmp ) ;
35747: LD_VAR 0 1
35751: PPUSH
35752: LD_VAR 0 2
35756: PPUSH
35757: CALL 35904 0 2
// end ;
35761: GO 35542
35763: POP
35764: POP
// end ;
35765: PPOPN 2
35767: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35768: LD_INT 0
35770: PPUSH
35771: PPUSH
35772: PPUSH
// if not hack in hackTanks then
35773: LD_VAR 0 1
35777: PUSH
35778: LD_EXP 132
35782: IN
35783: NOT
35784: IFFALSE 35788
// exit ;
35786: GO 35899
// index := GetElementIndex ( hackTanks , hack ) ;
35788: LD_ADDR_VAR 0 4
35792: PUSH
35793: LD_EXP 132
35797: PPUSH
35798: LD_VAR 0 1
35802: PPUSH
35803: CALL 43373 0 2
35807: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35808: LD_EXP 133
35812: PUSH
35813: LD_VAR 0 4
35817: ARRAY
35818: IFFALSE 35899
// begin for i in hackTanksCaptured [ index ] do
35820: LD_ADDR_VAR 0 3
35824: PUSH
35825: LD_EXP 133
35829: PUSH
35830: LD_VAR 0 4
35834: ARRAY
35835: PUSH
35836: FOR_IN
35837: IFFALSE 35863
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35839: LD_VAR 0 3
35843: PUSH
35844: LD_INT 1
35846: ARRAY
35847: PPUSH
35848: LD_VAR 0 3
35852: PUSH
35853: LD_INT 2
35855: ARRAY
35856: PPUSH
35857: CALL_OW 235
35861: GO 35836
35863: POP
35864: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35865: LD_ADDR_EXP 133
35869: PUSH
35870: LD_EXP 133
35874: PPUSH
35875: LD_VAR 0 4
35879: PPUSH
35880: EMPTY
35881: PPUSH
35882: CALL_OW 1
35886: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35887: LD_VAR 0 1
35891: PPUSH
35892: LD_INT 0
35894: PPUSH
35895: CALL_OW 505
// end ; end ;
35899: LD_VAR 0 2
35903: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35904: LD_INT 0
35906: PPUSH
35907: PPUSH
35908: PPUSH
// if not hack in hackTanks or not vehicles then
35909: LD_VAR 0 1
35913: PUSH
35914: LD_EXP 132
35918: IN
35919: NOT
35920: PUSH
35921: LD_VAR 0 2
35925: NOT
35926: OR
35927: IFFALSE 35931
// exit ;
35929: GO 36206
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35931: LD_ADDR_VAR 0 2
35935: PUSH
35936: LD_VAR 0 1
35940: PPUSH
35941: LD_VAR 0 2
35945: PPUSH
35946: LD_INT 1
35948: PPUSH
35949: LD_INT 1
35951: PPUSH
35952: CALL 44023 0 4
35956: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35957: LD_ADDR_VAR 0 5
35961: PUSH
35962: LD_EXP 132
35966: PPUSH
35967: LD_VAR 0 1
35971: PPUSH
35972: CALL 43373 0 2
35976: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35977: LD_EXP 133
35981: PUSH
35982: LD_VAR 0 5
35986: ARRAY
35987: PUSH
35988: LD_EXP 134
35992: LESS
35993: IFFALSE 36182
// begin for i := 1 to vehicles do
35995: LD_ADDR_VAR 0 4
35999: PUSH
36000: DOUBLE
36001: LD_INT 1
36003: DEC
36004: ST_TO_ADDR
36005: LD_VAR 0 2
36009: PUSH
36010: FOR_TO
36011: IFFALSE 36180
// begin if hackTanksCaptured [ index ] = hackLimit then
36013: LD_EXP 133
36017: PUSH
36018: LD_VAR 0 5
36022: ARRAY
36023: PUSH
36024: LD_EXP 134
36028: EQUAL
36029: IFFALSE 36033
// break ;
36031: GO 36180
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36033: LD_ADDR_EXP 136
36037: PUSH
36038: LD_EXP 136
36042: PPUSH
36043: LD_VAR 0 5
36047: PPUSH
36048: LD_EXP 136
36052: PUSH
36053: LD_VAR 0 5
36057: ARRAY
36058: PUSH
36059: LD_INT 1
36061: PLUS
36062: PPUSH
36063: CALL_OW 1
36067: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36068: LD_ADDR_EXP 133
36072: PUSH
36073: LD_EXP 133
36077: PPUSH
36078: LD_VAR 0 5
36082: PUSH
36083: LD_EXP 133
36087: PUSH
36088: LD_VAR 0 5
36092: ARRAY
36093: PUSH
36094: LD_INT 1
36096: PLUS
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PPUSH
36102: LD_VAR 0 2
36106: PUSH
36107: LD_VAR 0 4
36111: ARRAY
36112: PUSH
36113: LD_VAR 0 2
36117: PUSH
36118: LD_VAR 0 4
36122: ARRAY
36123: PPUSH
36124: CALL_OW 255
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PPUSH
36133: CALL 43588 0 3
36137: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36138: LD_VAR 0 2
36142: PUSH
36143: LD_VAR 0 4
36147: ARRAY
36148: PPUSH
36149: LD_VAR 0 1
36153: PPUSH
36154: CALL_OW 255
36158: PPUSH
36159: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36163: LD_VAR 0 2
36167: PUSH
36168: LD_VAR 0 4
36172: ARRAY
36173: PPUSH
36174: CALL_OW 141
// end ;
36178: GO 36010
36180: POP
36181: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36182: LD_VAR 0 1
36186: PPUSH
36187: LD_EXP 133
36191: PUSH
36192: LD_VAR 0 5
36196: ARRAY
36197: PUSH
36198: LD_INT 0
36200: PLUS
36201: PPUSH
36202: CALL_OW 505
// end ;
36206: LD_VAR 0 3
36210: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36211: LD_INT 0
36213: PPUSH
36214: PPUSH
36215: PPUSH
36216: PPUSH
// if not hack in hackTanks then
36217: LD_VAR 0 1
36221: PUSH
36222: LD_EXP 132
36226: IN
36227: NOT
36228: IFFALSE 36232
// exit ;
36230: GO 36472
// index := GetElementIndex ( hackTanks , hack ) ;
36232: LD_ADDR_VAR 0 4
36236: PUSH
36237: LD_EXP 132
36241: PPUSH
36242: LD_VAR 0 1
36246: PPUSH
36247: CALL 43373 0 2
36251: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36252: LD_ADDR_VAR 0 3
36256: PUSH
36257: DOUBLE
36258: LD_EXP 133
36262: PUSH
36263: LD_VAR 0 4
36267: ARRAY
36268: INC
36269: ST_TO_ADDR
36270: LD_INT 1
36272: PUSH
36273: FOR_DOWNTO
36274: IFFALSE 36446
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36276: LD_ADDR_VAR 0 5
36280: PUSH
36281: LD_EXP 133
36285: PUSH
36286: LD_VAR 0 4
36290: ARRAY
36291: PUSH
36292: LD_VAR 0 3
36296: ARRAY
36297: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36298: LD_VAR 0 5
36302: PUSH
36303: LD_INT 1
36305: ARRAY
36306: PPUSH
36307: CALL_OW 302
36311: NOT
36312: PUSH
36313: LD_VAR 0 5
36317: PUSH
36318: LD_INT 1
36320: ARRAY
36321: PPUSH
36322: CALL_OW 255
36326: PUSH
36327: LD_VAR 0 1
36331: PPUSH
36332: CALL_OW 255
36336: NONEQUAL
36337: OR
36338: IFFALSE 36444
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36340: LD_VAR 0 5
36344: PUSH
36345: LD_INT 1
36347: ARRAY
36348: PPUSH
36349: CALL_OW 305
36353: PUSH
36354: LD_VAR 0 5
36358: PUSH
36359: LD_INT 1
36361: ARRAY
36362: PPUSH
36363: CALL_OW 255
36367: PUSH
36368: LD_VAR 0 1
36372: PPUSH
36373: CALL_OW 255
36377: EQUAL
36378: AND
36379: IFFALSE 36403
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36381: LD_VAR 0 5
36385: PUSH
36386: LD_INT 1
36388: ARRAY
36389: PPUSH
36390: LD_VAR 0 5
36394: PUSH
36395: LD_INT 2
36397: ARRAY
36398: PPUSH
36399: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36403: LD_ADDR_EXP 133
36407: PUSH
36408: LD_EXP 133
36412: PPUSH
36413: LD_VAR 0 4
36417: PPUSH
36418: LD_EXP 133
36422: PUSH
36423: LD_VAR 0 4
36427: ARRAY
36428: PPUSH
36429: LD_VAR 0 3
36433: PPUSH
36434: CALL_OW 3
36438: PPUSH
36439: CALL_OW 1
36443: ST_TO_ADDR
// end ; end ;
36444: GO 36273
36446: POP
36447: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36448: LD_VAR 0 1
36452: PPUSH
36453: LD_EXP 133
36457: PUSH
36458: LD_VAR 0 4
36462: ARRAY
36463: PUSH
36464: LD_INT 0
36466: PLUS
36467: PPUSH
36468: CALL_OW 505
// end ;
36472: LD_VAR 0 2
36476: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36477: LD_INT 0
36479: PPUSH
36480: PPUSH
36481: PPUSH
36482: PPUSH
// if not hack in hackTanks then
36483: LD_VAR 0 1
36487: PUSH
36488: LD_EXP 132
36492: IN
36493: NOT
36494: IFFALSE 36498
// exit ;
36496: GO 36583
// index := GetElementIndex ( hackTanks , hack ) ;
36498: LD_ADDR_VAR 0 5
36502: PUSH
36503: LD_EXP 132
36507: PPUSH
36508: LD_VAR 0 1
36512: PPUSH
36513: CALL 43373 0 2
36517: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36518: LD_ADDR_VAR 0 4
36522: PUSH
36523: DOUBLE
36524: LD_INT 1
36526: DEC
36527: ST_TO_ADDR
36528: LD_EXP 133
36532: PUSH
36533: LD_VAR 0 5
36537: ARRAY
36538: PUSH
36539: FOR_TO
36540: IFFALSE 36581
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36542: LD_EXP 133
36546: PUSH
36547: LD_VAR 0 5
36551: ARRAY
36552: PUSH
36553: LD_VAR 0 4
36557: ARRAY
36558: PUSH
36559: LD_INT 1
36561: ARRAY
36562: PUSH
36563: LD_VAR 0 2
36567: EQUAL
36568: IFFALSE 36579
// KillUnit ( vehicle ) ;
36570: LD_VAR 0 2
36574: PPUSH
36575: CALL_OW 66
36579: GO 36539
36581: POP
36582: POP
// end ;
36583: LD_VAR 0 3
36587: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36588: LD_EXP 137
36592: NOT
36593: IFFALSE 36628
36595: GO 36597
36597: DISABLE
// begin initMiner := true ;
36598: LD_ADDR_EXP 137
36602: PUSH
36603: LD_INT 1
36605: ST_TO_ADDR
// minersList := [ ] ;
36606: LD_ADDR_EXP 138
36610: PUSH
36611: EMPTY
36612: ST_TO_ADDR
// minerMinesList := [ ] ;
36613: LD_ADDR_EXP 139
36617: PUSH
36618: EMPTY
36619: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36620: LD_ADDR_EXP 140
36624: PUSH
36625: LD_INT 5
36627: ST_TO_ADDR
// end ;
36628: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36629: LD_EXP 137
36633: PUSH
36634: LD_INT 34
36636: PUSH
36637: LD_EXP 59
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PPUSH
36646: CALL_OW 69
36650: AND
36651: IFFALSE 37114
36653: GO 36655
36655: DISABLE
36656: LD_INT 0
36658: PPUSH
36659: PPUSH
36660: PPUSH
36661: PPUSH
// begin enable ;
36662: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36663: LD_ADDR_VAR 0 1
36667: PUSH
36668: LD_INT 34
36670: PUSH
36671: LD_EXP 59
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PPUSH
36680: CALL_OW 69
36684: PUSH
36685: FOR_IN
36686: IFFALSE 36758
// begin if not i in minersList then
36688: LD_VAR 0 1
36692: PUSH
36693: LD_EXP 138
36697: IN
36698: NOT
36699: IFFALSE 36756
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36701: LD_ADDR_EXP 138
36705: PUSH
36706: LD_EXP 138
36710: PPUSH
36711: LD_EXP 138
36715: PUSH
36716: LD_INT 1
36718: PLUS
36719: PPUSH
36720: LD_VAR 0 1
36724: PPUSH
36725: CALL_OW 1
36729: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36730: LD_ADDR_EXP 139
36734: PUSH
36735: LD_EXP 139
36739: PPUSH
36740: LD_EXP 139
36744: PUSH
36745: LD_INT 1
36747: PLUS
36748: PPUSH
36749: EMPTY
36750: PPUSH
36751: CALL_OW 1
36755: ST_TO_ADDR
// end end ;
36756: GO 36685
36758: POP
36759: POP
// for i := minerMinesList downto 1 do
36760: LD_ADDR_VAR 0 1
36764: PUSH
36765: DOUBLE
36766: LD_EXP 139
36770: INC
36771: ST_TO_ADDR
36772: LD_INT 1
36774: PUSH
36775: FOR_DOWNTO
36776: IFFALSE 37112
// begin if IsLive ( minersList [ i ] ) then
36778: LD_EXP 138
36782: PUSH
36783: LD_VAR 0 1
36787: ARRAY
36788: PPUSH
36789: CALL_OW 300
36793: IFFALSE 36821
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36795: LD_EXP 138
36799: PUSH
36800: LD_VAR 0 1
36804: ARRAY
36805: PPUSH
36806: LD_EXP 139
36810: PUSH
36811: LD_VAR 0 1
36815: ARRAY
36816: PPUSH
36817: CALL_OW 505
// if not minerMinesList [ i ] then
36821: LD_EXP 139
36825: PUSH
36826: LD_VAR 0 1
36830: ARRAY
36831: NOT
36832: IFFALSE 36836
// continue ;
36834: GO 36775
// for j := minerMinesList [ i ] downto 1 do
36836: LD_ADDR_VAR 0 2
36840: PUSH
36841: DOUBLE
36842: LD_EXP 139
36846: PUSH
36847: LD_VAR 0 1
36851: ARRAY
36852: INC
36853: ST_TO_ADDR
36854: LD_INT 1
36856: PUSH
36857: FOR_DOWNTO
36858: IFFALSE 37108
// begin side := GetSide ( minersList [ i ] ) ;
36860: LD_ADDR_VAR 0 3
36864: PUSH
36865: LD_EXP 138
36869: PUSH
36870: LD_VAR 0 1
36874: ARRAY
36875: PPUSH
36876: CALL_OW 255
36880: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36881: LD_ADDR_VAR 0 4
36885: PUSH
36886: LD_EXP 139
36890: PUSH
36891: LD_VAR 0 1
36895: ARRAY
36896: PUSH
36897: LD_VAR 0 2
36901: ARRAY
36902: PUSH
36903: LD_INT 1
36905: ARRAY
36906: PPUSH
36907: LD_EXP 139
36911: PUSH
36912: LD_VAR 0 1
36916: ARRAY
36917: PUSH
36918: LD_VAR 0 2
36922: ARRAY
36923: PUSH
36924: LD_INT 2
36926: ARRAY
36927: PPUSH
36928: CALL_OW 428
36932: ST_TO_ADDR
// if not tmp then
36933: LD_VAR 0 4
36937: NOT
36938: IFFALSE 36942
// continue ;
36940: GO 36857
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36942: LD_VAR 0 4
36946: PUSH
36947: LD_INT 81
36949: PUSH
36950: LD_VAR 0 3
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PPUSH
36959: CALL_OW 69
36963: IN
36964: PUSH
36965: LD_EXP 139
36969: PUSH
36970: LD_VAR 0 1
36974: ARRAY
36975: PUSH
36976: LD_VAR 0 2
36980: ARRAY
36981: PUSH
36982: LD_INT 1
36984: ARRAY
36985: PPUSH
36986: LD_EXP 139
36990: PUSH
36991: LD_VAR 0 1
36995: ARRAY
36996: PUSH
36997: LD_VAR 0 2
37001: ARRAY
37002: PUSH
37003: LD_INT 2
37005: ARRAY
37006: PPUSH
37007: CALL_OW 458
37011: AND
37012: IFFALSE 37106
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37014: LD_EXP 139
37018: PUSH
37019: LD_VAR 0 1
37023: ARRAY
37024: PUSH
37025: LD_VAR 0 2
37029: ARRAY
37030: PUSH
37031: LD_INT 1
37033: ARRAY
37034: PPUSH
37035: LD_EXP 139
37039: PUSH
37040: LD_VAR 0 1
37044: ARRAY
37045: PUSH
37046: LD_VAR 0 2
37050: ARRAY
37051: PUSH
37052: LD_INT 2
37054: ARRAY
37055: PPUSH
37056: LD_VAR 0 3
37060: PPUSH
37061: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37065: LD_ADDR_EXP 139
37069: PUSH
37070: LD_EXP 139
37074: PPUSH
37075: LD_VAR 0 1
37079: PPUSH
37080: LD_EXP 139
37084: PUSH
37085: LD_VAR 0 1
37089: ARRAY
37090: PPUSH
37091: LD_VAR 0 2
37095: PPUSH
37096: CALL_OW 3
37100: PPUSH
37101: CALL_OW 1
37105: ST_TO_ADDR
// end ; end ;
37106: GO 36857
37108: POP
37109: POP
// end ;
37110: GO 36775
37112: POP
37113: POP
// end ;
37114: PPOPN 4
37116: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37117: LD_INT 0
37119: PPUSH
37120: PPUSH
// result := false ;
37121: LD_ADDR_VAR 0 4
37125: PUSH
37126: LD_INT 0
37128: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37129: LD_VAR 0 1
37133: PPUSH
37134: CALL_OW 264
37138: PUSH
37139: LD_EXP 59
37143: EQUAL
37144: NOT
37145: IFFALSE 37149
// exit ;
37147: GO 37389
// index := GetElementIndex ( minersList , unit ) ;
37149: LD_ADDR_VAR 0 5
37153: PUSH
37154: LD_EXP 138
37158: PPUSH
37159: LD_VAR 0 1
37163: PPUSH
37164: CALL 43373 0 2
37168: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37169: LD_EXP 139
37173: PUSH
37174: LD_VAR 0 5
37178: ARRAY
37179: PUSH
37180: LD_EXP 140
37184: GREATEREQUAL
37185: IFFALSE 37189
// exit ;
37187: GO 37389
// ComMoveXY ( unit , x , y ) ;
37189: LD_VAR 0 1
37193: PPUSH
37194: LD_VAR 0 2
37198: PPUSH
37199: LD_VAR 0 3
37203: PPUSH
37204: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37208: LD_INT 35
37210: PPUSH
37211: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37215: LD_VAR 0 1
37219: PPUSH
37220: LD_VAR 0 2
37224: PPUSH
37225: LD_VAR 0 3
37229: PPUSH
37230: CALL 74092 0 3
37234: NOT
37235: PUSH
37236: LD_VAR 0 1
37240: PPUSH
37241: CALL_OW 314
37245: AND
37246: IFFALSE 37250
// exit ;
37248: GO 37389
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37250: LD_VAR 0 2
37254: PPUSH
37255: LD_VAR 0 3
37259: PPUSH
37260: CALL_OW 428
37264: PUSH
37265: LD_VAR 0 1
37269: EQUAL
37270: PUSH
37271: LD_VAR 0 1
37275: PPUSH
37276: CALL_OW 314
37280: NOT
37281: AND
37282: IFFALSE 37208
// PlaySoundXY ( x , y , PlantMine ) ;
37284: LD_VAR 0 2
37288: PPUSH
37289: LD_VAR 0 3
37293: PPUSH
37294: LD_STRING PlantMine
37296: PPUSH
37297: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37301: LD_VAR 0 2
37305: PPUSH
37306: LD_VAR 0 3
37310: PPUSH
37311: LD_VAR 0 1
37315: PPUSH
37316: CALL_OW 255
37320: PPUSH
37321: LD_INT 0
37323: PPUSH
37324: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37328: LD_ADDR_EXP 139
37332: PUSH
37333: LD_EXP 139
37337: PPUSH
37338: LD_VAR 0 5
37342: PUSH
37343: LD_EXP 139
37347: PUSH
37348: LD_VAR 0 5
37352: ARRAY
37353: PUSH
37354: LD_INT 1
37356: PLUS
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PPUSH
37362: LD_VAR 0 2
37366: PUSH
37367: LD_VAR 0 3
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PPUSH
37376: CALL 43588 0 3
37380: ST_TO_ADDR
// result := true ;
37381: LD_ADDR_VAR 0 4
37385: PUSH
37386: LD_INT 1
37388: ST_TO_ADDR
// end ;
37389: LD_VAR 0 4
37393: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37394: LD_INT 0
37396: PPUSH
37397: PPUSH
37398: PPUSH
// if not unit in minersList then
37399: LD_VAR 0 1
37403: PUSH
37404: LD_EXP 138
37408: IN
37409: NOT
37410: IFFALSE 37414
// exit ;
37412: GO 37806
// index := GetElementIndex ( minersList , unit ) ;
37414: LD_ADDR_VAR 0 6
37418: PUSH
37419: LD_EXP 138
37423: PPUSH
37424: LD_VAR 0 1
37428: PPUSH
37429: CALL 43373 0 2
37433: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37434: LD_ADDR_VAR 0 5
37438: PUSH
37439: DOUBLE
37440: LD_EXP 139
37444: PUSH
37445: LD_VAR 0 6
37449: ARRAY
37450: INC
37451: ST_TO_ADDR
37452: LD_INT 1
37454: PUSH
37455: FOR_DOWNTO
37456: IFFALSE 37617
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37458: LD_EXP 139
37462: PUSH
37463: LD_VAR 0 6
37467: ARRAY
37468: PUSH
37469: LD_VAR 0 5
37473: ARRAY
37474: PUSH
37475: LD_INT 1
37477: ARRAY
37478: PUSH
37479: LD_VAR 0 2
37483: EQUAL
37484: PUSH
37485: LD_EXP 139
37489: PUSH
37490: LD_VAR 0 6
37494: ARRAY
37495: PUSH
37496: LD_VAR 0 5
37500: ARRAY
37501: PUSH
37502: LD_INT 2
37504: ARRAY
37505: PUSH
37506: LD_VAR 0 3
37510: EQUAL
37511: AND
37512: IFFALSE 37615
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37514: LD_EXP 139
37518: PUSH
37519: LD_VAR 0 6
37523: ARRAY
37524: PUSH
37525: LD_VAR 0 5
37529: ARRAY
37530: PUSH
37531: LD_INT 1
37533: ARRAY
37534: PPUSH
37535: LD_EXP 139
37539: PUSH
37540: LD_VAR 0 6
37544: ARRAY
37545: PUSH
37546: LD_VAR 0 5
37550: ARRAY
37551: PUSH
37552: LD_INT 2
37554: ARRAY
37555: PPUSH
37556: LD_VAR 0 1
37560: PPUSH
37561: CALL_OW 255
37565: PPUSH
37566: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37570: LD_ADDR_EXP 139
37574: PUSH
37575: LD_EXP 139
37579: PPUSH
37580: LD_VAR 0 6
37584: PPUSH
37585: LD_EXP 139
37589: PUSH
37590: LD_VAR 0 6
37594: ARRAY
37595: PPUSH
37596: LD_VAR 0 5
37600: PPUSH
37601: CALL_OW 3
37605: PPUSH
37606: CALL_OW 1
37610: ST_TO_ADDR
// exit ;
37611: POP
37612: POP
37613: GO 37806
// end ; end ;
37615: GO 37455
37617: POP
37618: POP
// for i := minerMinesList [ index ] downto 1 do
37619: LD_ADDR_VAR 0 5
37623: PUSH
37624: DOUBLE
37625: LD_EXP 139
37629: PUSH
37630: LD_VAR 0 6
37634: ARRAY
37635: INC
37636: ST_TO_ADDR
37637: LD_INT 1
37639: PUSH
37640: FOR_DOWNTO
37641: IFFALSE 37804
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37643: LD_EXP 139
37647: PUSH
37648: LD_VAR 0 6
37652: ARRAY
37653: PUSH
37654: LD_VAR 0 5
37658: ARRAY
37659: PUSH
37660: LD_INT 1
37662: ARRAY
37663: PPUSH
37664: LD_EXP 139
37668: PUSH
37669: LD_VAR 0 6
37673: ARRAY
37674: PUSH
37675: LD_VAR 0 5
37679: ARRAY
37680: PUSH
37681: LD_INT 2
37683: ARRAY
37684: PPUSH
37685: LD_VAR 0 2
37689: PPUSH
37690: LD_VAR 0 3
37694: PPUSH
37695: CALL_OW 298
37699: PUSH
37700: LD_INT 6
37702: LESS
37703: IFFALSE 37802
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37705: LD_EXP 139
37709: PUSH
37710: LD_VAR 0 6
37714: ARRAY
37715: PUSH
37716: LD_VAR 0 5
37720: ARRAY
37721: PUSH
37722: LD_INT 1
37724: ARRAY
37725: PPUSH
37726: LD_EXP 139
37730: PUSH
37731: LD_VAR 0 6
37735: ARRAY
37736: PUSH
37737: LD_VAR 0 5
37741: ARRAY
37742: PUSH
37743: LD_INT 2
37745: ARRAY
37746: PPUSH
37747: LD_VAR 0 1
37751: PPUSH
37752: CALL_OW 255
37756: PPUSH
37757: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37761: LD_ADDR_EXP 139
37765: PUSH
37766: LD_EXP 139
37770: PPUSH
37771: LD_VAR 0 6
37775: PPUSH
37776: LD_EXP 139
37780: PUSH
37781: LD_VAR 0 6
37785: ARRAY
37786: PPUSH
37787: LD_VAR 0 5
37791: PPUSH
37792: CALL_OW 3
37796: PPUSH
37797: CALL_OW 1
37801: ST_TO_ADDR
// end ; end ;
37802: GO 37640
37804: POP
37805: POP
// end ;
37806: LD_VAR 0 4
37810: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37811: LD_INT 0
37813: PPUSH
37814: PPUSH
37815: PPUSH
37816: PPUSH
37817: PPUSH
37818: PPUSH
37819: PPUSH
37820: PPUSH
37821: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37822: LD_VAR 0 1
37826: PPUSH
37827: CALL_OW 264
37831: PUSH
37832: LD_EXP 59
37836: EQUAL
37837: NOT
37838: PUSH
37839: LD_VAR 0 1
37843: PUSH
37844: LD_EXP 138
37848: IN
37849: NOT
37850: OR
37851: IFFALSE 37855
// exit ;
37853: GO 38177
// index := GetElementIndex ( minersList , unit ) ;
37855: LD_ADDR_VAR 0 6
37859: PUSH
37860: LD_EXP 138
37864: PPUSH
37865: LD_VAR 0 1
37869: PPUSH
37870: CALL 43373 0 2
37874: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37875: LD_ADDR_VAR 0 8
37879: PUSH
37880: LD_EXP 140
37884: PUSH
37885: LD_EXP 139
37889: PUSH
37890: LD_VAR 0 6
37894: ARRAY
37895: MINUS
37896: ST_TO_ADDR
// if not minesFreeAmount then
37897: LD_VAR 0 8
37901: NOT
37902: IFFALSE 37906
// exit ;
37904: GO 38177
// tmp := [ ] ;
37906: LD_ADDR_VAR 0 7
37910: PUSH
37911: EMPTY
37912: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37913: LD_ADDR_VAR 0 5
37917: PUSH
37918: DOUBLE
37919: LD_INT 1
37921: DEC
37922: ST_TO_ADDR
37923: LD_VAR 0 8
37927: PUSH
37928: FOR_TO
37929: IFFALSE 38124
// begin _d := rand ( 0 , 5 ) ;
37931: LD_ADDR_VAR 0 11
37935: PUSH
37936: LD_INT 0
37938: PPUSH
37939: LD_INT 5
37941: PPUSH
37942: CALL_OW 12
37946: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37947: LD_ADDR_VAR 0 12
37951: PUSH
37952: LD_INT 2
37954: PPUSH
37955: LD_INT 6
37957: PPUSH
37958: CALL_OW 12
37962: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37963: LD_ADDR_VAR 0 9
37967: PUSH
37968: LD_VAR 0 2
37972: PPUSH
37973: LD_VAR 0 11
37977: PPUSH
37978: LD_VAR 0 12
37982: PPUSH
37983: CALL_OW 272
37987: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37988: LD_ADDR_VAR 0 10
37992: PUSH
37993: LD_VAR 0 3
37997: PPUSH
37998: LD_VAR 0 11
38002: PPUSH
38003: LD_VAR 0 12
38007: PPUSH
38008: CALL_OW 273
38012: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38013: LD_VAR 0 9
38017: PPUSH
38018: LD_VAR 0 10
38022: PPUSH
38023: CALL_OW 488
38027: PUSH
38028: LD_VAR 0 9
38032: PUSH
38033: LD_VAR 0 10
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_VAR 0 7
38046: IN
38047: NOT
38048: AND
38049: PUSH
38050: LD_VAR 0 9
38054: PPUSH
38055: LD_VAR 0 10
38059: PPUSH
38060: CALL_OW 458
38064: NOT
38065: AND
38066: IFFALSE 38108
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38068: LD_ADDR_VAR 0 7
38072: PUSH
38073: LD_VAR 0 7
38077: PPUSH
38078: LD_VAR 0 7
38082: PUSH
38083: LD_INT 1
38085: PLUS
38086: PPUSH
38087: LD_VAR 0 9
38091: PUSH
38092: LD_VAR 0 10
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PPUSH
38101: CALL_OW 1
38105: ST_TO_ADDR
38106: GO 38122
// i := i - 1 ;
38108: LD_ADDR_VAR 0 5
38112: PUSH
38113: LD_VAR 0 5
38117: PUSH
38118: LD_INT 1
38120: MINUS
38121: ST_TO_ADDR
// end ;
38122: GO 37928
38124: POP
38125: POP
// for i in tmp do
38126: LD_ADDR_VAR 0 5
38130: PUSH
38131: LD_VAR 0 7
38135: PUSH
38136: FOR_IN
38137: IFFALSE 38175
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38139: LD_VAR 0 1
38143: PPUSH
38144: LD_VAR 0 5
38148: PUSH
38149: LD_INT 1
38151: ARRAY
38152: PPUSH
38153: LD_VAR 0 5
38157: PUSH
38158: LD_INT 2
38160: ARRAY
38161: PPUSH
38162: CALL 37117 0 3
38166: NOT
38167: IFFALSE 38173
// exit ;
38169: POP
38170: POP
38171: GO 38177
38173: GO 38136
38175: POP
38176: POP
// end ;
38177: LD_VAR 0 4
38181: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38182: LD_INT 0
38184: PPUSH
38185: PPUSH
38186: PPUSH
38187: PPUSH
38188: PPUSH
38189: PPUSH
38190: PPUSH
// if not GetClass ( unit ) = class_sniper then
38191: LD_VAR 0 1
38195: PPUSH
38196: CALL_OW 257
38200: PUSH
38201: LD_INT 5
38203: EQUAL
38204: NOT
38205: IFFALSE 38209
// exit ;
38207: GO 38597
// dist := 8 ;
38209: LD_ADDR_VAR 0 5
38213: PUSH
38214: LD_INT 8
38216: ST_TO_ADDR
// viewRange := 12 ;
38217: LD_ADDR_VAR 0 7
38221: PUSH
38222: LD_INT 12
38224: ST_TO_ADDR
// side := GetSide ( unit ) ;
38225: LD_ADDR_VAR 0 6
38229: PUSH
38230: LD_VAR 0 1
38234: PPUSH
38235: CALL_OW 255
38239: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38240: LD_INT 61
38242: PPUSH
38243: LD_VAR 0 6
38247: PPUSH
38248: CALL_OW 321
38252: PUSH
38253: LD_INT 2
38255: EQUAL
38256: IFFALSE 38266
// viewRange := 16 ;
38258: LD_ADDR_VAR 0 7
38262: PUSH
38263: LD_INT 16
38265: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38266: LD_VAR 0 1
38270: PPUSH
38271: LD_VAR 0 2
38275: PPUSH
38276: LD_VAR 0 3
38280: PPUSH
38281: CALL_OW 297
38285: PUSH
38286: LD_VAR 0 5
38290: GREATER
38291: IFFALSE 38370
// begin ComMoveXY ( unit , x , y ) ;
38293: LD_VAR 0 1
38297: PPUSH
38298: LD_VAR 0 2
38302: PPUSH
38303: LD_VAR 0 3
38307: PPUSH
38308: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38312: LD_INT 35
38314: PPUSH
38315: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38319: LD_VAR 0 1
38323: PPUSH
38324: LD_VAR 0 2
38328: PPUSH
38329: LD_VAR 0 3
38333: PPUSH
38334: CALL 74092 0 3
38338: NOT
38339: IFFALSE 38343
// exit ;
38341: GO 38597
// until GetDistUnitXY ( unit , x , y ) < dist ;
38343: LD_VAR 0 1
38347: PPUSH
38348: LD_VAR 0 2
38352: PPUSH
38353: LD_VAR 0 3
38357: PPUSH
38358: CALL_OW 297
38362: PUSH
38363: LD_VAR 0 5
38367: LESS
38368: IFFALSE 38312
// end ; ComTurnXY ( unit , x , y ) ;
38370: LD_VAR 0 1
38374: PPUSH
38375: LD_VAR 0 2
38379: PPUSH
38380: LD_VAR 0 3
38384: PPUSH
38385: CALL_OW 118
// wait ( 5 ) ;
38389: LD_INT 5
38391: PPUSH
38392: CALL_OW 67
// _d := GetDir ( unit ) ;
38396: LD_ADDR_VAR 0 10
38400: PUSH
38401: LD_VAR 0 1
38405: PPUSH
38406: CALL_OW 254
38410: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38411: LD_ADDR_VAR 0 8
38415: PUSH
38416: LD_VAR 0 1
38420: PPUSH
38421: CALL_OW 250
38425: PPUSH
38426: LD_VAR 0 10
38430: PPUSH
38431: LD_VAR 0 5
38435: PPUSH
38436: CALL_OW 272
38440: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38441: LD_ADDR_VAR 0 9
38445: PUSH
38446: LD_VAR 0 1
38450: PPUSH
38451: CALL_OW 251
38455: PPUSH
38456: LD_VAR 0 10
38460: PPUSH
38461: LD_VAR 0 5
38465: PPUSH
38466: CALL_OW 273
38470: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38471: LD_VAR 0 8
38475: PPUSH
38476: LD_VAR 0 9
38480: PPUSH
38481: CALL_OW 488
38485: NOT
38486: IFFALSE 38490
// exit ;
38488: GO 38597
// ComAnimCustom ( unit , 1 ) ;
38490: LD_VAR 0 1
38494: PPUSH
38495: LD_INT 1
38497: PPUSH
38498: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38502: LD_VAR 0 8
38506: PPUSH
38507: LD_VAR 0 9
38511: PPUSH
38512: LD_VAR 0 6
38516: PPUSH
38517: LD_VAR 0 7
38521: PPUSH
38522: CALL_OW 330
// repeat wait ( 1 ) ;
38526: LD_INT 1
38528: PPUSH
38529: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38533: LD_VAR 0 1
38537: PPUSH
38538: CALL_OW 316
38542: PUSH
38543: LD_VAR 0 1
38547: PPUSH
38548: CALL_OW 314
38552: OR
38553: PUSH
38554: LD_VAR 0 1
38558: PPUSH
38559: CALL_OW 302
38563: NOT
38564: OR
38565: PUSH
38566: LD_VAR 0 1
38570: PPUSH
38571: CALL_OW 301
38575: OR
38576: IFFALSE 38526
// RemoveSeeing ( _x , _y , side ) ;
38578: LD_VAR 0 8
38582: PPUSH
38583: LD_VAR 0 9
38587: PPUSH
38588: LD_VAR 0 6
38592: PPUSH
38593: CALL_OW 331
// end ; end_of_file
38597: LD_VAR 0 4
38601: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38602: LD_INT 0
38604: PPUSH
38605: PPUSH
// if exist_mode then
38606: LD_VAR 0 2
38610: IFFALSE 38635
// unit := CreateCharacter ( prefix & ident ) else
38612: LD_ADDR_VAR 0 5
38616: PUSH
38617: LD_VAR 0 3
38621: PUSH
38622: LD_VAR 0 1
38626: STR
38627: PPUSH
38628: CALL_OW 34
38632: ST_TO_ADDR
38633: GO 38650
// unit := NewCharacter ( ident ) ;
38635: LD_ADDR_VAR 0 5
38639: PUSH
38640: LD_VAR 0 1
38644: PPUSH
38645: CALL_OW 25
38649: ST_TO_ADDR
// result := unit ;
38650: LD_ADDR_VAR 0 4
38654: PUSH
38655: LD_VAR 0 5
38659: ST_TO_ADDR
// end ;
38660: LD_VAR 0 4
38664: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38665: LD_INT 0
38667: PPUSH
38668: PPUSH
// if not side or not nation then
38669: LD_VAR 0 1
38673: NOT
38674: PUSH
38675: LD_VAR 0 2
38679: NOT
38680: OR
38681: IFFALSE 38685
// exit ;
38683: GO 39453
// case nation of nation_american :
38685: LD_VAR 0 2
38689: PUSH
38690: LD_INT 1
38692: DOUBLE
38693: EQUAL
38694: IFTRUE 38698
38696: GO 38912
38698: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38699: LD_ADDR_VAR 0 4
38703: PUSH
38704: LD_INT 35
38706: PUSH
38707: LD_INT 45
38709: PUSH
38710: LD_INT 46
38712: PUSH
38713: LD_INT 47
38715: PUSH
38716: LD_INT 82
38718: PUSH
38719: LD_INT 83
38721: PUSH
38722: LD_INT 84
38724: PUSH
38725: LD_INT 85
38727: PUSH
38728: LD_INT 86
38730: PUSH
38731: LD_INT 1
38733: PUSH
38734: LD_INT 2
38736: PUSH
38737: LD_INT 6
38739: PUSH
38740: LD_INT 15
38742: PUSH
38743: LD_INT 16
38745: PUSH
38746: LD_INT 7
38748: PUSH
38749: LD_INT 12
38751: PUSH
38752: LD_INT 13
38754: PUSH
38755: LD_INT 10
38757: PUSH
38758: LD_INT 14
38760: PUSH
38761: LD_INT 20
38763: PUSH
38764: LD_INT 21
38766: PUSH
38767: LD_INT 22
38769: PUSH
38770: LD_INT 25
38772: PUSH
38773: LD_INT 32
38775: PUSH
38776: LD_INT 27
38778: PUSH
38779: LD_INT 36
38781: PUSH
38782: LD_INT 69
38784: PUSH
38785: LD_INT 39
38787: PUSH
38788: LD_INT 34
38790: PUSH
38791: LD_INT 40
38793: PUSH
38794: LD_INT 48
38796: PUSH
38797: LD_INT 49
38799: PUSH
38800: LD_INT 50
38802: PUSH
38803: LD_INT 51
38805: PUSH
38806: LD_INT 52
38808: PUSH
38809: LD_INT 53
38811: PUSH
38812: LD_INT 54
38814: PUSH
38815: LD_INT 55
38817: PUSH
38818: LD_INT 56
38820: PUSH
38821: LD_INT 57
38823: PUSH
38824: LD_INT 58
38826: PUSH
38827: LD_INT 59
38829: PUSH
38830: LD_INT 60
38832: PUSH
38833: LD_INT 61
38835: PUSH
38836: LD_INT 62
38838: PUSH
38839: LD_INT 80
38841: PUSH
38842: LD_INT 82
38844: PUSH
38845: LD_INT 83
38847: PUSH
38848: LD_INT 84
38850: PUSH
38851: LD_INT 85
38853: PUSH
38854: LD_INT 86
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: ST_TO_ADDR
38910: GO 39377
38912: LD_INT 2
38914: DOUBLE
38915: EQUAL
38916: IFTRUE 38920
38918: GO 39146
38920: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38921: LD_ADDR_VAR 0 4
38925: PUSH
38926: LD_INT 35
38928: PUSH
38929: LD_INT 45
38931: PUSH
38932: LD_INT 46
38934: PUSH
38935: LD_INT 47
38937: PUSH
38938: LD_INT 82
38940: PUSH
38941: LD_INT 83
38943: PUSH
38944: LD_INT 84
38946: PUSH
38947: LD_INT 85
38949: PUSH
38950: LD_INT 87
38952: PUSH
38953: LD_INT 70
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: LD_INT 11
38961: PUSH
38962: LD_INT 3
38964: PUSH
38965: LD_INT 4
38967: PUSH
38968: LD_INT 5
38970: PUSH
38971: LD_INT 6
38973: PUSH
38974: LD_INT 15
38976: PUSH
38977: LD_INT 18
38979: PUSH
38980: LD_INT 7
38982: PUSH
38983: LD_INT 17
38985: PUSH
38986: LD_INT 8
38988: PUSH
38989: LD_INT 20
38991: PUSH
38992: LD_INT 21
38994: PUSH
38995: LD_INT 22
38997: PUSH
38998: LD_INT 72
39000: PUSH
39001: LD_INT 26
39003: PUSH
39004: LD_INT 69
39006: PUSH
39007: LD_INT 39
39009: PUSH
39010: LD_INT 40
39012: PUSH
39013: LD_INT 41
39015: PUSH
39016: LD_INT 42
39018: PUSH
39019: LD_INT 43
39021: PUSH
39022: LD_INT 48
39024: PUSH
39025: LD_INT 49
39027: PUSH
39028: LD_INT 50
39030: PUSH
39031: LD_INT 51
39033: PUSH
39034: LD_INT 52
39036: PUSH
39037: LD_INT 53
39039: PUSH
39040: LD_INT 54
39042: PUSH
39043: LD_INT 55
39045: PUSH
39046: LD_INT 56
39048: PUSH
39049: LD_INT 60
39051: PUSH
39052: LD_INT 61
39054: PUSH
39055: LD_INT 62
39057: PUSH
39058: LD_INT 66
39060: PUSH
39061: LD_INT 67
39063: PUSH
39064: LD_INT 68
39066: PUSH
39067: LD_INT 81
39069: PUSH
39070: LD_INT 82
39072: PUSH
39073: LD_INT 83
39075: PUSH
39076: LD_INT 84
39078: PUSH
39079: LD_INT 85
39081: PUSH
39082: LD_INT 87
39084: PUSH
39085: LD_INT 88
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: ST_TO_ADDR
39144: GO 39377
39146: LD_INT 3
39148: DOUBLE
39149: EQUAL
39150: IFTRUE 39154
39152: GO 39376
39154: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39155: LD_ADDR_VAR 0 4
39159: PUSH
39160: LD_INT 46
39162: PUSH
39163: LD_INT 47
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 82
39174: PUSH
39175: LD_INT 83
39177: PUSH
39178: LD_INT 84
39180: PUSH
39181: LD_INT 85
39183: PUSH
39184: LD_INT 86
39186: PUSH
39187: LD_INT 11
39189: PUSH
39190: LD_INT 9
39192: PUSH
39193: LD_INT 20
39195: PUSH
39196: LD_INT 19
39198: PUSH
39199: LD_INT 21
39201: PUSH
39202: LD_INT 24
39204: PUSH
39205: LD_INT 22
39207: PUSH
39208: LD_INT 25
39210: PUSH
39211: LD_INT 28
39213: PUSH
39214: LD_INT 29
39216: PUSH
39217: LD_INT 30
39219: PUSH
39220: LD_INT 31
39222: PUSH
39223: LD_INT 37
39225: PUSH
39226: LD_INT 38
39228: PUSH
39229: LD_INT 32
39231: PUSH
39232: LD_INT 27
39234: PUSH
39235: LD_INT 33
39237: PUSH
39238: LD_INT 69
39240: PUSH
39241: LD_INT 39
39243: PUSH
39244: LD_INT 34
39246: PUSH
39247: LD_INT 40
39249: PUSH
39250: LD_INT 71
39252: PUSH
39253: LD_INT 23
39255: PUSH
39256: LD_INT 44
39258: PUSH
39259: LD_INT 48
39261: PUSH
39262: LD_INT 49
39264: PUSH
39265: LD_INT 50
39267: PUSH
39268: LD_INT 51
39270: PUSH
39271: LD_INT 52
39273: PUSH
39274: LD_INT 53
39276: PUSH
39277: LD_INT 54
39279: PUSH
39280: LD_INT 55
39282: PUSH
39283: LD_INT 56
39285: PUSH
39286: LD_INT 57
39288: PUSH
39289: LD_INT 58
39291: PUSH
39292: LD_INT 59
39294: PUSH
39295: LD_INT 63
39297: PUSH
39298: LD_INT 64
39300: PUSH
39301: LD_INT 65
39303: PUSH
39304: LD_INT 82
39306: PUSH
39307: LD_INT 83
39309: PUSH
39310: LD_INT 84
39312: PUSH
39313: LD_INT 85
39315: PUSH
39316: LD_INT 86
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: LIST
39342: LIST
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: ST_TO_ADDR
39374: GO 39377
39376: POP
// if state > - 1 and state < 3 then
39377: LD_VAR 0 3
39381: PUSH
39382: LD_INT 1
39384: NEG
39385: GREATER
39386: PUSH
39387: LD_VAR 0 3
39391: PUSH
39392: LD_INT 3
39394: LESS
39395: AND
39396: IFFALSE 39453
// for i in result do
39398: LD_ADDR_VAR 0 5
39402: PUSH
39403: LD_VAR 0 4
39407: PUSH
39408: FOR_IN
39409: IFFALSE 39451
// if GetTech ( i , side ) <> state then
39411: LD_VAR 0 5
39415: PPUSH
39416: LD_VAR 0 1
39420: PPUSH
39421: CALL_OW 321
39425: PUSH
39426: LD_VAR 0 3
39430: NONEQUAL
39431: IFFALSE 39449
// result := result diff i ;
39433: LD_ADDR_VAR 0 4
39437: PUSH
39438: LD_VAR 0 4
39442: PUSH
39443: LD_VAR 0 5
39447: DIFF
39448: ST_TO_ADDR
39449: GO 39408
39451: POP
39452: POP
// end ;
39453: LD_VAR 0 4
39457: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39458: LD_INT 0
39460: PPUSH
39461: PPUSH
39462: PPUSH
// result := true ;
39463: LD_ADDR_VAR 0 3
39467: PUSH
39468: LD_INT 1
39470: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39471: LD_ADDR_VAR 0 5
39475: PUSH
39476: LD_VAR 0 2
39480: PPUSH
39481: CALL_OW 480
39485: ST_TO_ADDR
// if not tmp then
39486: LD_VAR 0 5
39490: NOT
39491: IFFALSE 39495
// exit ;
39493: GO 39544
// for i in tmp do
39495: LD_ADDR_VAR 0 4
39499: PUSH
39500: LD_VAR 0 5
39504: PUSH
39505: FOR_IN
39506: IFFALSE 39542
// if GetTech ( i , side ) <> state_researched then
39508: LD_VAR 0 4
39512: PPUSH
39513: LD_VAR 0 1
39517: PPUSH
39518: CALL_OW 321
39522: PUSH
39523: LD_INT 2
39525: NONEQUAL
39526: IFFALSE 39540
// begin result := false ;
39528: LD_ADDR_VAR 0 3
39532: PUSH
39533: LD_INT 0
39535: ST_TO_ADDR
// exit ;
39536: POP
39537: POP
39538: GO 39544
// end ;
39540: GO 39505
39542: POP
39543: POP
// end ;
39544: LD_VAR 0 3
39548: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39549: LD_INT 0
39551: PPUSH
39552: PPUSH
39553: PPUSH
39554: PPUSH
39555: PPUSH
39556: PPUSH
39557: PPUSH
39558: PPUSH
39559: PPUSH
39560: PPUSH
39561: PPUSH
39562: PPUSH
39563: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39564: LD_VAR 0 1
39568: NOT
39569: PUSH
39570: LD_VAR 0 1
39574: PPUSH
39575: CALL_OW 257
39579: PUSH
39580: LD_INT 9
39582: NONEQUAL
39583: OR
39584: IFFALSE 39588
// exit ;
39586: GO 40161
// side := GetSide ( unit ) ;
39588: LD_ADDR_VAR 0 9
39592: PUSH
39593: LD_VAR 0 1
39597: PPUSH
39598: CALL_OW 255
39602: ST_TO_ADDR
// tech_space := tech_spacanom ;
39603: LD_ADDR_VAR 0 12
39607: PUSH
39608: LD_INT 29
39610: ST_TO_ADDR
// tech_time := tech_taurad ;
39611: LD_ADDR_VAR 0 13
39615: PUSH
39616: LD_INT 28
39618: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39619: LD_ADDR_VAR 0 11
39623: PUSH
39624: LD_VAR 0 1
39628: PPUSH
39629: CALL_OW 310
39633: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39634: LD_VAR 0 11
39638: PPUSH
39639: CALL_OW 247
39643: PUSH
39644: LD_INT 2
39646: EQUAL
39647: IFFALSE 39651
// exit ;
39649: GO 40161
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39651: LD_ADDR_VAR 0 8
39655: PUSH
39656: LD_INT 81
39658: PUSH
39659: LD_VAR 0 9
39663: PUSH
39664: EMPTY
39665: LIST
39666: LIST
39667: PUSH
39668: LD_INT 3
39670: PUSH
39671: LD_INT 21
39673: PUSH
39674: LD_INT 3
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: EMPTY
39686: LIST
39687: LIST
39688: PPUSH
39689: CALL_OW 69
39693: ST_TO_ADDR
// if not tmp then
39694: LD_VAR 0 8
39698: NOT
39699: IFFALSE 39703
// exit ;
39701: GO 40161
// if in_unit then
39703: LD_VAR 0 11
39707: IFFALSE 39731
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39709: LD_ADDR_VAR 0 10
39713: PUSH
39714: LD_VAR 0 8
39718: PPUSH
39719: LD_VAR 0 11
39723: PPUSH
39724: CALL_OW 74
39728: ST_TO_ADDR
39729: GO 39751
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39731: LD_ADDR_VAR 0 10
39735: PUSH
39736: LD_VAR 0 8
39740: PPUSH
39741: LD_VAR 0 1
39745: PPUSH
39746: CALL_OW 74
39750: ST_TO_ADDR
// if not enemy then
39751: LD_VAR 0 10
39755: NOT
39756: IFFALSE 39760
// exit ;
39758: GO 40161
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39760: LD_VAR 0 11
39764: PUSH
39765: LD_VAR 0 11
39769: PPUSH
39770: LD_VAR 0 10
39774: PPUSH
39775: CALL_OW 296
39779: PUSH
39780: LD_INT 13
39782: GREATER
39783: AND
39784: PUSH
39785: LD_VAR 0 1
39789: PPUSH
39790: LD_VAR 0 10
39794: PPUSH
39795: CALL_OW 296
39799: PUSH
39800: LD_INT 12
39802: GREATER
39803: OR
39804: IFFALSE 39808
// exit ;
39806: GO 40161
// missile := [ 1 ] ;
39808: LD_ADDR_VAR 0 14
39812: PUSH
39813: LD_INT 1
39815: PUSH
39816: EMPTY
39817: LIST
39818: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39819: LD_VAR 0 9
39823: PPUSH
39824: LD_VAR 0 12
39828: PPUSH
39829: CALL_OW 325
39833: IFFALSE 39862
// missile := Replace ( missile , missile + 1 , 2 ) ;
39835: LD_ADDR_VAR 0 14
39839: PUSH
39840: LD_VAR 0 14
39844: PPUSH
39845: LD_VAR 0 14
39849: PUSH
39850: LD_INT 1
39852: PLUS
39853: PPUSH
39854: LD_INT 2
39856: PPUSH
39857: CALL_OW 1
39861: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39862: LD_VAR 0 9
39866: PPUSH
39867: LD_VAR 0 13
39871: PPUSH
39872: CALL_OW 325
39876: PUSH
39877: LD_VAR 0 10
39881: PPUSH
39882: CALL_OW 255
39886: PPUSH
39887: LD_VAR 0 13
39891: PPUSH
39892: CALL_OW 325
39896: NOT
39897: AND
39898: IFFALSE 39927
// missile := Replace ( missile , missile + 1 , 3 ) ;
39900: LD_ADDR_VAR 0 14
39904: PUSH
39905: LD_VAR 0 14
39909: PPUSH
39910: LD_VAR 0 14
39914: PUSH
39915: LD_INT 1
39917: PLUS
39918: PPUSH
39919: LD_INT 3
39921: PPUSH
39922: CALL_OW 1
39926: ST_TO_ADDR
// if missile < 2 then
39927: LD_VAR 0 14
39931: PUSH
39932: LD_INT 2
39934: LESS
39935: IFFALSE 39939
// exit ;
39937: GO 40161
// x := GetX ( enemy ) ;
39939: LD_ADDR_VAR 0 4
39943: PUSH
39944: LD_VAR 0 10
39948: PPUSH
39949: CALL_OW 250
39953: ST_TO_ADDR
// y := GetY ( enemy ) ;
39954: LD_ADDR_VAR 0 5
39958: PUSH
39959: LD_VAR 0 10
39963: PPUSH
39964: CALL_OW 251
39968: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39969: LD_ADDR_VAR 0 6
39973: PUSH
39974: LD_VAR 0 4
39978: PUSH
39979: LD_INT 1
39981: NEG
39982: PPUSH
39983: LD_INT 1
39985: PPUSH
39986: CALL_OW 12
39990: PLUS
39991: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39992: LD_ADDR_VAR 0 7
39996: PUSH
39997: LD_VAR 0 5
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PPUSH
40006: LD_INT 1
40008: PPUSH
40009: CALL_OW 12
40013: PLUS
40014: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40015: LD_VAR 0 6
40019: PPUSH
40020: LD_VAR 0 7
40024: PPUSH
40025: CALL_OW 488
40029: NOT
40030: IFFALSE 40052
// begin _x := x ;
40032: LD_ADDR_VAR 0 6
40036: PUSH
40037: LD_VAR 0 4
40041: ST_TO_ADDR
// _y := y ;
40042: LD_ADDR_VAR 0 7
40046: PUSH
40047: LD_VAR 0 5
40051: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40052: LD_ADDR_VAR 0 3
40056: PUSH
40057: LD_INT 1
40059: PPUSH
40060: LD_VAR 0 14
40064: PPUSH
40065: CALL_OW 12
40069: ST_TO_ADDR
// case i of 1 :
40070: LD_VAR 0 3
40074: PUSH
40075: LD_INT 1
40077: DOUBLE
40078: EQUAL
40079: IFTRUE 40083
40081: GO 40100
40083: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40084: LD_VAR 0 1
40088: PPUSH
40089: LD_VAR 0 10
40093: PPUSH
40094: CALL_OW 115
40098: GO 40161
40100: LD_INT 2
40102: DOUBLE
40103: EQUAL
40104: IFTRUE 40108
40106: GO 40130
40108: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40109: LD_VAR 0 1
40113: PPUSH
40114: LD_VAR 0 6
40118: PPUSH
40119: LD_VAR 0 7
40123: PPUSH
40124: CALL_OW 153
40128: GO 40161
40130: LD_INT 3
40132: DOUBLE
40133: EQUAL
40134: IFTRUE 40138
40136: GO 40160
40138: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40139: LD_VAR 0 1
40143: PPUSH
40144: LD_VAR 0 6
40148: PPUSH
40149: LD_VAR 0 7
40153: PPUSH
40154: CALL_OW 154
40158: GO 40161
40160: POP
// end ;
40161: LD_VAR 0 2
40165: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40166: LD_INT 0
40168: PPUSH
40169: PPUSH
40170: PPUSH
40171: PPUSH
40172: PPUSH
40173: PPUSH
// if not unit or not building then
40174: LD_VAR 0 1
40178: NOT
40179: PUSH
40180: LD_VAR 0 2
40184: NOT
40185: OR
40186: IFFALSE 40190
// exit ;
40188: GO 40348
// x := GetX ( building ) ;
40190: LD_ADDR_VAR 0 5
40194: PUSH
40195: LD_VAR 0 2
40199: PPUSH
40200: CALL_OW 250
40204: ST_TO_ADDR
// y := GetY ( building ) ;
40205: LD_ADDR_VAR 0 6
40209: PUSH
40210: LD_VAR 0 2
40214: PPUSH
40215: CALL_OW 251
40219: ST_TO_ADDR
// for i = 0 to 5 do
40220: LD_ADDR_VAR 0 4
40224: PUSH
40225: DOUBLE
40226: LD_INT 0
40228: DEC
40229: ST_TO_ADDR
40230: LD_INT 5
40232: PUSH
40233: FOR_TO
40234: IFFALSE 40346
// begin _x := ShiftX ( x , i , 3 ) ;
40236: LD_ADDR_VAR 0 7
40240: PUSH
40241: LD_VAR 0 5
40245: PPUSH
40246: LD_VAR 0 4
40250: PPUSH
40251: LD_INT 3
40253: PPUSH
40254: CALL_OW 272
40258: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40259: LD_ADDR_VAR 0 8
40263: PUSH
40264: LD_VAR 0 6
40268: PPUSH
40269: LD_VAR 0 4
40273: PPUSH
40274: LD_INT 3
40276: PPUSH
40277: CALL_OW 273
40281: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40282: LD_VAR 0 7
40286: PPUSH
40287: LD_VAR 0 8
40291: PPUSH
40292: CALL_OW 488
40296: NOT
40297: IFFALSE 40301
// continue ;
40299: GO 40233
// if HexInfo ( _x , _y ) = 0 then
40301: LD_VAR 0 7
40305: PPUSH
40306: LD_VAR 0 8
40310: PPUSH
40311: CALL_OW 428
40315: PUSH
40316: LD_INT 0
40318: EQUAL
40319: IFFALSE 40344
// begin ComMoveXY ( unit , _x , _y ) ;
40321: LD_VAR 0 1
40325: PPUSH
40326: LD_VAR 0 7
40330: PPUSH
40331: LD_VAR 0 8
40335: PPUSH
40336: CALL_OW 111
// exit ;
40340: POP
40341: POP
40342: GO 40348
// end ; end ;
40344: GO 40233
40346: POP
40347: POP
// end ;
40348: LD_VAR 0 3
40352: RET
// export function ScanBase ( side , base_area ) ; begin
40353: LD_INT 0
40355: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40356: LD_ADDR_VAR 0 3
40360: PUSH
40361: LD_VAR 0 2
40365: PPUSH
40366: LD_INT 81
40368: PUSH
40369: LD_VAR 0 1
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PPUSH
40378: CALL_OW 70
40382: ST_TO_ADDR
// end ;
40383: LD_VAR 0 3
40387: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40388: LD_INT 0
40390: PPUSH
40391: PPUSH
40392: PPUSH
40393: PPUSH
// result := false ;
40394: LD_ADDR_VAR 0 2
40398: PUSH
40399: LD_INT 0
40401: ST_TO_ADDR
// side := GetSide ( unit ) ;
40402: LD_ADDR_VAR 0 3
40406: PUSH
40407: LD_VAR 0 1
40411: PPUSH
40412: CALL_OW 255
40416: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40417: LD_ADDR_VAR 0 4
40421: PUSH
40422: LD_VAR 0 1
40426: PPUSH
40427: CALL_OW 248
40431: ST_TO_ADDR
// case nat of 1 :
40432: LD_VAR 0 4
40436: PUSH
40437: LD_INT 1
40439: DOUBLE
40440: EQUAL
40441: IFTRUE 40445
40443: GO 40456
40445: POP
// tech := tech_lassight ; 2 :
40446: LD_ADDR_VAR 0 5
40450: PUSH
40451: LD_INT 12
40453: ST_TO_ADDR
40454: GO 40495
40456: LD_INT 2
40458: DOUBLE
40459: EQUAL
40460: IFTRUE 40464
40462: GO 40475
40464: POP
// tech := tech_mortar ; 3 :
40465: LD_ADDR_VAR 0 5
40469: PUSH
40470: LD_INT 41
40472: ST_TO_ADDR
40473: GO 40495
40475: LD_INT 3
40477: DOUBLE
40478: EQUAL
40479: IFTRUE 40483
40481: GO 40494
40483: POP
// tech := tech_bazooka ; end ;
40484: LD_ADDR_VAR 0 5
40488: PUSH
40489: LD_INT 44
40491: ST_TO_ADDR
40492: GO 40495
40494: POP
// if Researched ( side , tech ) then
40495: LD_VAR 0 3
40499: PPUSH
40500: LD_VAR 0 5
40504: PPUSH
40505: CALL_OW 325
40509: IFFALSE 40536
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40511: LD_ADDR_VAR 0 2
40515: PUSH
40516: LD_INT 5
40518: PUSH
40519: LD_INT 8
40521: PUSH
40522: LD_INT 9
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: LIST
40529: PUSH
40530: LD_VAR 0 4
40534: ARRAY
40535: ST_TO_ADDR
// end ;
40536: LD_VAR 0 2
40540: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40541: LD_INT 0
40543: PPUSH
40544: PPUSH
40545: PPUSH
// if not mines then
40546: LD_VAR 0 2
40550: NOT
40551: IFFALSE 40555
// exit ;
40553: GO 40699
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40555: LD_ADDR_VAR 0 5
40559: PUSH
40560: LD_INT 81
40562: PUSH
40563: LD_VAR 0 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 3
40574: PUSH
40575: LD_INT 21
40577: PUSH
40578: LD_INT 3
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PPUSH
40593: CALL_OW 69
40597: ST_TO_ADDR
// for i in mines do
40598: LD_ADDR_VAR 0 4
40602: PUSH
40603: LD_VAR 0 2
40607: PUSH
40608: FOR_IN
40609: IFFALSE 40697
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40611: LD_VAR 0 4
40615: PUSH
40616: LD_INT 1
40618: ARRAY
40619: PPUSH
40620: LD_VAR 0 4
40624: PUSH
40625: LD_INT 2
40627: ARRAY
40628: PPUSH
40629: CALL_OW 458
40633: NOT
40634: IFFALSE 40638
// continue ;
40636: GO 40608
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40638: LD_VAR 0 4
40642: PUSH
40643: LD_INT 1
40645: ARRAY
40646: PPUSH
40647: LD_VAR 0 4
40651: PUSH
40652: LD_INT 2
40654: ARRAY
40655: PPUSH
40656: CALL_OW 428
40660: PUSH
40661: LD_VAR 0 5
40665: IN
40666: IFFALSE 40695
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40668: LD_VAR 0 4
40672: PUSH
40673: LD_INT 1
40675: ARRAY
40676: PPUSH
40677: LD_VAR 0 4
40681: PUSH
40682: LD_INT 2
40684: ARRAY
40685: PPUSH
40686: LD_VAR 0 1
40690: PPUSH
40691: CALL_OW 456
// end ;
40695: GO 40608
40697: POP
40698: POP
// end ;
40699: LD_VAR 0 3
40703: RET
// export function Count ( array ) ; var i ; begin
40704: LD_INT 0
40706: PPUSH
40707: PPUSH
// result := 0 ;
40708: LD_ADDR_VAR 0 2
40712: PUSH
40713: LD_INT 0
40715: ST_TO_ADDR
// for i in array do
40716: LD_ADDR_VAR 0 3
40720: PUSH
40721: LD_VAR 0 1
40725: PUSH
40726: FOR_IN
40727: IFFALSE 40751
// if i then
40729: LD_VAR 0 3
40733: IFFALSE 40749
// result := result + 1 ;
40735: LD_ADDR_VAR 0 2
40739: PUSH
40740: LD_VAR 0 2
40744: PUSH
40745: LD_INT 1
40747: PLUS
40748: ST_TO_ADDR
40749: GO 40726
40751: POP
40752: POP
// end ;
40753: LD_VAR 0 2
40757: RET
// export function IsEmpty ( building ) ; begin
40758: LD_INT 0
40760: PPUSH
// if not building then
40761: LD_VAR 0 1
40765: NOT
40766: IFFALSE 40770
// exit ;
40768: GO 40813
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40770: LD_ADDR_VAR 0 2
40774: PUSH
40775: LD_VAR 0 1
40779: PUSH
40780: LD_INT 22
40782: PUSH
40783: LD_VAR 0 1
40787: PPUSH
40788: CALL_OW 255
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 58
40799: PUSH
40800: EMPTY
40801: LIST
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PPUSH
40807: CALL_OW 69
40811: IN
40812: ST_TO_ADDR
// end ;
40813: LD_VAR 0 2
40817: RET
// export function IsNotFull ( building ) ; begin
40818: LD_INT 0
40820: PPUSH
// if not building then
40821: LD_VAR 0 1
40825: NOT
40826: IFFALSE 40830
// exit ;
40828: GO 40849
// result := UnitsInside ( building ) < 6 ;
40830: LD_ADDR_VAR 0 2
40834: PUSH
40835: LD_VAR 0 1
40839: PPUSH
40840: CALL_OW 313
40844: PUSH
40845: LD_INT 6
40847: LESS
40848: ST_TO_ADDR
// end ;
40849: LD_VAR 0 2
40853: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40854: LD_INT 0
40856: PPUSH
40857: PPUSH
40858: PPUSH
40859: PPUSH
// tmp := [ ] ;
40860: LD_ADDR_VAR 0 3
40864: PUSH
40865: EMPTY
40866: ST_TO_ADDR
// list := [ ] ;
40867: LD_ADDR_VAR 0 5
40871: PUSH
40872: EMPTY
40873: ST_TO_ADDR
// for i = 16 to 25 do
40874: LD_ADDR_VAR 0 4
40878: PUSH
40879: DOUBLE
40880: LD_INT 16
40882: DEC
40883: ST_TO_ADDR
40884: LD_INT 25
40886: PUSH
40887: FOR_TO
40888: IFFALSE 40961
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40890: LD_ADDR_VAR 0 3
40894: PUSH
40895: LD_VAR 0 3
40899: PUSH
40900: LD_INT 22
40902: PUSH
40903: LD_VAR 0 1
40907: PPUSH
40908: CALL_OW 255
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 91
40919: PUSH
40920: LD_VAR 0 1
40924: PUSH
40925: LD_INT 6
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 30
40935: PUSH
40936: LD_VAR 0 4
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: LIST
40949: PUSH
40950: EMPTY
40951: LIST
40952: PPUSH
40953: CALL_OW 69
40957: ADD
40958: ST_TO_ADDR
40959: GO 40887
40961: POP
40962: POP
// for i = 1 to tmp do
40963: LD_ADDR_VAR 0 4
40967: PUSH
40968: DOUBLE
40969: LD_INT 1
40971: DEC
40972: ST_TO_ADDR
40973: LD_VAR 0 3
40977: PUSH
40978: FOR_TO
40979: IFFALSE 41067
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40981: LD_ADDR_VAR 0 5
40985: PUSH
40986: LD_VAR 0 5
40990: PUSH
40991: LD_VAR 0 3
40995: PUSH
40996: LD_VAR 0 4
41000: ARRAY
41001: PPUSH
41002: CALL_OW 266
41006: PUSH
41007: LD_VAR 0 3
41011: PUSH
41012: LD_VAR 0 4
41016: ARRAY
41017: PPUSH
41018: CALL_OW 250
41022: PUSH
41023: LD_VAR 0 3
41027: PUSH
41028: LD_VAR 0 4
41032: ARRAY
41033: PPUSH
41034: CALL_OW 251
41038: PUSH
41039: LD_VAR 0 3
41043: PUSH
41044: LD_VAR 0 4
41048: ARRAY
41049: PPUSH
41050: CALL_OW 254
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: PUSH
41061: EMPTY
41062: LIST
41063: ADD
41064: ST_TO_ADDR
41065: GO 40978
41067: POP
41068: POP
// result := list ;
41069: LD_ADDR_VAR 0 2
41073: PUSH
41074: LD_VAR 0 5
41078: ST_TO_ADDR
// end ;
41079: LD_VAR 0 2
41083: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41084: LD_INT 0
41086: PPUSH
41087: PPUSH
41088: PPUSH
41089: PPUSH
41090: PPUSH
41091: PPUSH
41092: PPUSH
// if not factory then
41093: LD_VAR 0 1
41097: NOT
41098: IFFALSE 41102
// exit ;
41100: GO 41695
// if control = control_apeman then
41102: LD_VAR 0 4
41106: PUSH
41107: LD_INT 5
41109: EQUAL
41110: IFFALSE 41219
// begin tmp := UnitsInside ( factory ) ;
41112: LD_ADDR_VAR 0 8
41116: PUSH
41117: LD_VAR 0 1
41121: PPUSH
41122: CALL_OW 313
41126: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41127: LD_VAR 0 8
41131: PPUSH
41132: LD_INT 25
41134: PUSH
41135: LD_INT 12
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PPUSH
41142: CALL_OW 72
41146: NOT
41147: IFFALSE 41157
// control := control_manual ;
41149: LD_ADDR_VAR 0 4
41153: PUSH
41154: LD_INT 1
41156: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41157: LD_ADDR_VAR 0 8
41161: PUSH
41162: LD_VAR 0 1
41166: PPUSH
41167: CALL 40854 0 1
41171: ST_TO_ADDR
// if tmp then
41172: LD_VAR 0 8
41176: IFFALSE 41219
// begin for i in tmp do
41178: LD_ADDR_VAR 0 7
41182: PUSH
41183: LD_VAR 0 8
41187: PUSH
41188: FOR_IN
41189: IFFALSE 41217
// if i [ 1 ] = b_ext_radio then
41191: LD_VAR 0 7
41195: PUSH
41196: LD_INT 1
41198: ARRAY
41199: PUSH
41200: LD_INT 22
41202: EQUAL
41203: IFFALSE 41215
// begin control := control_remote ;
41205: LD_ADDR_VAR 0 4
41209: PUSH
41210: LD_INT 2
41212: ST_TO_ADDR
// break ;
41213: GO 41217
// end ;
41215: GO 41188
41217: POP
41218: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41219: LD_VAR 0 1
41223: PPUSH
41224: LD_VAR 0 2
41228: PPUSH
41229: LD_VAR 0 3
41233: PPUSH
41234: LD_VAR 0 4
41238: PPUSH
41239: LD_VAR 0 5
41243: PPUSH
41244: CALL_OW 448
41248: IFFALSE 41283
// begin result := [ chassis , engine , control , weapon ] ;
41250: LD_ADDR_VAR 0 6
41254: PUSH
41255: LD_VAR 0 2
41259: PUSH
41260: LD_VAR 0 3
41264: PUSH
41265: LD_VAR 0 4
41269: PUSH
41270: LD_VAR 0 5
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: ST_TO_ADDR
// exit ;
41281: GO 41695
// end ; _chassis := AvailableChassisList ( factory ) ;
41283: LD_ADDR_VAR 0 9
41287: PUSH
41288: LD_VAR 0 1
41292: PPUSH
41293: CALL_OW 475
41297: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41298: LD_ADDR_VAR 0 11
41302: PUSH
41303: LD_VAR 0 1
41307: PPUSH
41308: CALL_OW 476
41312: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41313: LD_ADDR_VAR 0 12
41317: PUSH
41318: LD_VAR 0 1
41322: PPUSH
41323: CALL_OW 477
41327: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41328: LD_ADDR_VAR 0 10
41332: PUSH
41333: LD_VAR 0 1
41337: PPUSH
41338: CALL_OW 478
41342: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41343: LD_VAR 0 9
41347: NOT
41348: PUSH
41349: LD_VAR 0 11
41353: NOT
41354: OR
41355: PUSH
41356: LD_VAR 0 12
41360: NOT
41361: OR
41362: PUSH
41363: LD_VAR 0 10
41367: NOT
41368: OR
41369: IFFALSE 41404
// begin result := [ chassis , engine , control , weapon ] ;
41371: LD_ADDR_VAR 0 6
41375: PUSH
41376: LD_VAR 0 2
41380: PUSH
41381: LD_VAR 0 3
41385: PUSH
41386: LD_VAR 0 4
41390: PUSH
41391: LD_VAR 0 5
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: ST_TO_ADDR
// exit ;
41402: GO 41695
// end ; if not chassis in _chassis then
41404: LD_VAR 0 2
41408: PUSH
41409: LD_VAR 0 9
41413: IN
41414: NOT
41415: IFFALSE 41441
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41417: LD_ADDR_VAR 0 2
41421: PUSH
41422: LD_VAR 0 9
41426: PUSH
41427: LD_INT 1
41429: PPUSH
41430: LD_VAR 0 9
41434: PPUSH
41435: CALL_OW 12
41439: ARRAY
41440: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41441: LD_VAR 0 2
41445: PPUSH
41446: LD_VAR 0 3
41450: PPUSH
41451: CALL 41700 0 2
41455: NOT
41456: IFFALSE 41515
// repeat engine := _engine [ 1 ] ;
41458: LD_ADDR_VAR 0 3
41462: PUSH
41463: LD_VAR 0 11
41467: PUSH
41468: LD_INT 1
41470: ARRAY
41471: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41472: LD_ADDR_VAR 0 11
41476: PUSH
41477: LD_VAR 0 11
41481: PPUSH
41482: LD_INT 1
41484: PPUSH
41485: CALL_OW 3
41489: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41490: LD_VAR 0 2
41494: PPUSH
41495: LD_VAR 0 3
41499: PPUSH
41500: CALL 41700 0 2
41504: PUSH
41505: LD_VAR 0 11
41509: PUSH
41510: EMPTY
41511: EQUAL
41512: OR
41513: IFFALSE 41458
// if not control in _control then
41515: LD_VAR 0 4
41519: PUSH
41520: LD_VAR 0 12
41524: IN
41525: NOT
41526: IFFALSE 41552
// control := _control [ rand ( 1 , _control ) ] ;
41528: LD_ADDR_VAR 0 4
41532: PUSH
41533: LD_VAR 0 12
41537: PUSH
41538: LD_INT 1
41540: PPUSH
41541: LD_VAR 0 12
41545: PPUSH
41546: CALL_OW 12
41550: ARRAY
41551: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41552: LD_VAR 0 2
41556: PPUSH
41557: LD_VAR 0 5
41561: PPUSH
41562: CALL 41920 0 2
41566: NOT
41567: IFFALSE 41626
// repeat weapon := _weapon [ 1 ] ;
41569: LD_ADDR_VAR 0 5
41573: PUSH
41574: LD_VAR 0 10
41578: PUSH
41579: LD_INT 1
41581: ARRAY
41582: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41583: LD_ADDR_VAR 0 10
41587: PUSH
41588: LD_VAR 0 10
41592: PPUSH
41593: LD_INT 1
41595: PPUSH
41596: CALL_OW 3
41600: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41601: LD_VAR 0 2
41605: PPUSH
41606: LD_VAR 0 5
41610: PPUSH
41611: CALL 41920 0 2
41615: PUSH
41616: LD_VAR 0 10
41620: PUSH
41621: EMPTY
41622: EQUAL
41623: OR
41624: IFFALSE 41569
// result := [ ] ;
41626: LD_ADDR_VAR 0 6
41630: PUSH
41631: EMPTY
41632: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41633: LD_VAR 0 1
41637: PPUSH
41638: LD_VAR 0 2
41642: PPUSH
41643: LD_VAR 0 3
41647: PPUSH
41648: LD_VAR 0 4
41652: PPUSH
41653: LD_VAR 0 5
41657: PPUSH
41658: CALL_OW 448
41662: IFFALSE 41695
// result := [ chassis , engine , control , weapon ] ;
41664: LD_ADDR_VAR 0 6
41668: PUSH
41669: LD_VAR 0 2
41673: PUSH
41674: LD_VAR 0 3
41678: PUSH
41679: LD_VAR 0 4
41683: PUSH
41684: LD_VAR 0 5
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: LIST
41693: LIST
41694: ST_TO_ADDR
// end ;
41695: LD_VAR 0 6
41699: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41700: LD_INT 0
41702: PPUSH
// if not chassis or not engine then
41703: LD_VAR 0 1
41707: NOT
41708: PUSH
41709: LD_VAR 0 2
41713: NOT
41714: OR
41715: IFFALSE 41719
// exit ;
41717: GO 41915
// case engine of engine_solar :
41719: LD_VAR 0 2
41723: PUSH
41724: LD_INT 2
41726: DOUBLE
41727: EQUAL
41728: IFTRUE 41732
41730: GO 41770
41732: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41733: LD_ADDR_VAR 0 3
41737: PUSH
41738: LD_INT 11
41740: PUSH
41741: LD_INT 12
41743: PUSH
41744: LD_INT 13
41746: PUSH
41747: LD_INT 14
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: LD_INT 2
41755: PUSH
41756: LD_INT 3
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: ST_TO_ADDR
41768: GO 41899
41770: LD_INT 1
41772: DOUBLE
41773: EQUAL
41774: IFTRUE 41778
41776: GO 41840
41778: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41779: LD_ADDR_VAR 0 3
41783: PUSH
41784: LD_INT 11
41786: PUSH
41787: LD_INT 12
41789: PUSH
41790: LD_INT 13
41792: PUSH
41793: LD_INT 14
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: LD_INT 3
41804: PUSH
41805: LD_INT 4
41807: PUSH
41808: LD_INT 5
41810: PUSH
41811: LD_INT 21
41813: PUSH
41814: LD_INT 23
41816: PUSH
41817: LD_INT 22
41819: PUSH
41820: LD_INT 24
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: ST_TO_ADDR
41838: GO 41899
41840: LD_INT 3
41842: DOUBLE
41843: EQUAL
41844: IFTRUE 41848
41846: GO 41898
41848: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41849: LD_ADDR_VAR 0 3
41853: PUSH
41854: LD_INT 13
41856: PUSH
41857: LD_INT 14
41859: PUSH
41860: LD_INT 2
41862: PUSH
41863: LD_INT 3
41865: PUSH
41866: LD_INT 4
41868: PUSH
41869: LD_INT 5
41871: PUSH
41872: LD_INT 21
41874: PUSH
41875: LD_INT 22
41877: PUSH
41878: LD_INT 23
41880: PUSH
41881: LD_INT 24
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: ST_TO_ADDR
41896: GO 41899
41898: POP
// result := ( chassis in result ) ;
41899: LD_ADDR_VAR 0 3
41903: PUSH
41904: LD_VAR 0 1
41908: PUSH
41909: LD_VAR 0 3
41913: IN
41914: ST_TO_ADDR
// end ;
41915: LD_VAR 0 3
41919: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41920: LD_INT 0
41922: PPUSH
// if not chassis or not weapon then
41923: LD_VAR 0 1
41927: NOT
41928: PUSH
41929: LD_VAR 0 2
41933: NOT
41934: OR
41935: IFFALSE 41939
// exit ;
41937: GO 43001
// case weapon of us_machine_gun :
41939: LD_VAR 0 2
41943: PUSH
41944: LD_INT 2
41946: DOUBLE
41947: EQUAL
41948: IFTRUE 41952
41950: GO 41982
41952: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41953: LD_ADDR_VAR 0 3
41957: PUSH
41958: LD_INT 1
41960: PUSH
41961: LD_INT 2
41963: PUSH
41964: LD_INT 3
41966: PUSH
41967: LD_INT 4
41969: PUSH
41970: LD_INT 5
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: LIST
41977: LIST
41978: LIST
41979: ST_TO_ADDR
41980: GO 42985
41982: LD_INT 3
41984: DOUBLE
41985: EQUAL
41986: IFTRUE 41990
41988: GO 42020
41990: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41991: LD_ADDR_VAR 0 3
41995: PUSH
41996: LD_INT 1
41998: PUSH
41999: LD_INT 2
42001: PUSH
42002: LD_INT 3
42004: PUSH
42005: LD_INT 4
42007: PUSH
42008: LD_INT 5
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: ST_TO_ADDR
42018: GO 42985
42020: LD_INT 11
42022: DOUBLE
42023: EQUAL
42024: IFTRUE 42028
42026: GO 42058
42028: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42029: LD_ADDR_VAR 0 3
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 2
42039: PUSH
42040: LD_INT 3
42042: PUSH
42043: LD_INT 4
42045: PUSH
42046: LD_INT 5
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: ST_TO_ADDR
42056: GO 42985
42058: LD_INT 4
42060: DOUBLE
42061: EQUAL
42062: IFTRUE 42066
42064: GO 42092
42066: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42067: LD_ADDR_VAR 0 3
42071: PUSH
42072: LD_INT 2
42074: PUSH
42075: LD_INT 3
42077: PUSH
42078: LD_INT 4
42080: PUSH
42081: LD_INT 5
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: ST_TO_ADDR
42090: GO 42985
42092: LD_INT 5
42094: DOUBLE
42095: EQUAL
42096: IFTRUE 42100
42098: GO 42126
42100: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42101: LD_ADDR_VAR 0 3
42105: PUSH
42106: LD_INT 2
42108: PUSH
42109: LD_INT 3
42111: PUSH
42112: LD_INT 4
42114: PUSH
42115: LD_INT 5
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: ST_TO_ADDR
42124: GO 42985
42126: LD_INT 9
42128: DOUBLE
42129: EQUAL
42130: IFTRUE 42134
42132: GO 42160
42134: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42135: LD_ADDR_VAR 0 3
42139: PUSH
42140: LD_INT 2
42142: PUSH
42143: LD_INT 3
42145: PUSH
42146: LD_INT 4
42148: PUSH
42149: LD_INT 5
42151: PUSH
42152: EMPTY
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: ST_TO_ADDR
42158: GO 42985
42160: LD_INT 7
42162: DOUBLE
42163: EQUAL
42164: IFTRUE 42168
42166: GO 42194
42168: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42169: LD_ADDR_VAR 0 3
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: LD_INT 3
42179: PUSH
42180: LD_INT 4
42182: PUSH
42183: LD_INT 5
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: ST_TO_ADDR
42192: GO 42985
42194: LD_INT 12
42196: DOUBLE
42197: EQUAL
42198: IFTRUE 42202
42200: GO 42228
42202: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42203: LD_ADDR_VAR 0 3
42207: PUSH
42208: LD_INT 2
42210: PUSH
42211: LD_INT 3
42213: PUSH
42214: LD_INT 4
42216: PUSH
42217: LD_INT 5
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: ST_TO_ADDR
42226: GO 42985
42228: LD_INT 13
42230: DOUBLE
42231: EQUAL
42232: IFTRUE 42236
42234: GO 42262
42236: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42237: LD_ADDR_VAR 0 3
42241: PUSH
42242: LD_INT 2
42244: PUSH
42245: LD_INT 3
42247: PUSH
42248: LD_INT 4
42250: PUSH
42251: LD_INT 5
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: ST_TO_ADDR
42260: GO 42985
42262: LD_INT 14
42264: DOUBLE
42265: EQUAL
42266: IFTRUE 42270
42268: GO 42288
42270: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42271: LD_ADDR_VAR 0 3
42275: PUSH
42276: LD_INT 4
42278: PUSH
42279: LD_INT 5
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: ST_TO_ADDR
42286: GO 42985
42288: LD_INT 6
42290: DOUBLE
42291: EQUAL
42292: IFTRUE 42296
42294: GO 42314
42296: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42297: LD_ADDR_VAR 0 3
42301: PUSH
42302: LD_INT 4
42304: PUSH
42305: LD_INT 5
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: ST_TO_ADDR
42312: GO 42985
42314: LD_INT 10
42316: DOUBLE
42317: EQUAL
42318: IFTRUE 42322
42320: GO 42340
42322: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42323: LD_ADDR_VAR 0 3
42327: PUSH
42328: LD_INT 4
42330: PUSH
42331: LD_INT 5
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: ST_TO_ADDR
42338: GO 42985
42340: LD_INT 22
42342: DOUBLE
42343: EQUAL
42344: IFTRUE 42348
42346: GO 42374
42348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42349: LD_ADDR_VAR 0 3
42353: PUSH
42354: LD_INT 11
42356: PUSH
42357: LD_INT 12
42359: PUSH
42360: LD_INT 13
42362: PUSH
42363: LD_INT 14
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: ST_TO_ADDR
42372: GO 42985
42374: LD_INT 23
42376: DOUBLE
42377: EQUAL
42378: IFTRUE 42382
42380: GO 42408
42382: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42383: LD_ADDR_VAR 0 3
42387: PUSH
42388: LD_INT 11
42390: PUSH
42391: LD_INT 12
42393: PUSH
42394: LD_INT 13
42396: PUSH
42397: LD_INT 14
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: ST_TO_ADDR
42406: GO 42985
42408: LD_INT 24
42410: DOUBLE
42411: EQUAL
42412: IFTRUE 42416
42414: GO 42442
42416: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42417: LD_ADDR_VAR 0 3
42421: PUSH
42422: LD_INT 11
42424: PUSH
42425: LD_INT 12
42427: PUSH
42428: LD_INT 13
42430: PUSH
42431: LD_INT 14
42433: PUSH
42434: EMPTY
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: ST_TO_ADDR
42440: GO 42985
42442: LD_INT 30
42444: DOUBLE
42445: EQUAL
42446: IFTRUE 42450
42448: GO 42476
42450: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42451: LD_ADDR_VAR 0 3
42455: PUSH
42456: LD_INT 11
42458: PUSH
42459: LD_INT 12
42461: PUSH
42462: LD_INT 13
42464: PUSH
42465: LD_INT 14
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: ST_TO_ADDR
42474: GO 42985
42476: LD_INT 25
42478: DOUBLE
42479: EQUAL
42480: IFTRUE 42484
42482: GO 42502
42484: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42485: LD_ADDR_VAR 0 3
42489: PUSH
42490: LD_INT 13
42492: PUSH
42493: LD_INT 14
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: ST_TO_ADDR
42500: GO 42985
42502: LD_INT 27
42504: DOUBLE
42505: EQUAL
42506: IFTRUE 42510
42508: GO 42528
42510: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42511: LD_ADDR_VAR 0 3
42515: PUSH
42516: LD_INT 13
42518: PUSH
42519: LD_INT 14
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: ST_TO_ADDR
42526: GO 42985
42528: LD_EXP 57
42532: DOUBLE
42533: EQUAL
42534: IFTRUE 42538
42536: GO 42564
42538: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42539: LD_ADDR_VAR 0 3
42543: PUSH
42544: LD_INT 11
42546: PUSH
42547: LD_INT 12
42549: PUSH
42550: LD_INT 13
42552: PUSH
42553: LD_INT 14
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: ST_TO_ADDR
42562: GO 42985
42564: LD_INT 28
42566: DOUBLE
42567: EQUAL
42568: IFTRUE 42572
42570: GO 42590
42572: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42573: LD_ADDR_VAR 0 3
42577: PUSH
42578: LD_INT 13
42580: PUSH
42581: LD_INT 14
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: ST_TO_ADDR
42588: GO 42985
42590: LD_INT 29
42592: DOUBLE
42593: EQUAL
42594: IFTRUE 42598
42596: GO 42616
42598: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42599: LD_ADDR_VAR 0 3
42603: PUSH
42604: LD_INT 13
42606: PUSH
42607: LD_INT 14
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: ST_TO_ADDR
42614: GO 42985
42616: LD_INT 31
42618: DOUBLE
42619: EQUAL
42620: IFTRUE 42624
42622: GO 42642
42624: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42625: LD_ADDR_VAR 0 3
42629: PUSH
42630: LD_INT 13
42632: PUSH
42633: LD_INT 14
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: ST_TO_ADDR
42640: GO 42985
42642: LD_INT 26
42644: DOUBLE
42645: EQUAL
42646: IFTRUE 42650
42648: GO 42668
42650: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42651: LD_ADDR_VAR 0 3
42655: PUSH
42656: LD_INT 13
42658: PUSH
42659: LD_INT 14
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: ST_TO_ADDR
42666: GO 42985
42668: LD_INT 42
42670: DOUBLE
42671: EQUAL
42672: IFTRUE 42676
42674: GO 42702
42676: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42677: LD_ADDR_VAR 0 3
42681: PUSH
42682: LD_INT 21
42684: PUSH
42685: LD_INT 22
42687: PUSH
42688: LD_INT 23
42690: PUSH
42691: LD_INT 24
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: ST_TO_ADDR
42700: GO 42985
42702: LD_INT 43
42704: DOUBLE
42705: EQUAL
42706: IFTRUE 42710
42708: GO 42736
42710: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42711: LD_ADDR_VAR 0 3
42715: PUSH
42716: LD_INT 21
42718: PUSH
42719: LD_INT 22
42721: PUSH
42722: LD_INT 23
42724: PUSH
42725: LD_INT 24
42727: PUSH
42728: EMPTY
42729: LIST
42730: LIST
42731: LIST
42732: LIST
42733: ST_TO_ADDR
42734: GO 42985
42736: LD_INT 44
42738: DOUBLE
42739: EQUAL
42740: IFTRUE 42744
42742: GO 42770
42744: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42745: LD_ADDR_VAR 0 3
42749: PUSH
42750: LD_INT 21
42752: PUSH
42753: LD_INT 22
42755: PUSH
42756: LD_INT 23
42758: PUSH
42759: LD_INT 24
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: ST_TO_ADDR
42768: GO 42985
42770: LD_INT 45
42772: DOUBLE
42773: EQUAL
42774: IFTRUE 42778
42776: GO 42804
42778: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42779: LD_ADDR_VAR 0 3
42783: PUSH
42784: LD_INT 21
42786: PUSH
42787: LD_INT 22
42789: PUSH
42790: LD_INT 23
42792: PUSH
42793: LD_INT 24
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: ST_TO_ADDR
42802: GO 42985
42804: LD_INT 49
42806: DOUBLE
42807: EQUAL
42808: IFTRUE 42812
42810: GO 42838
42812: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42813: LD_ADDR_VAR 0 3
42817: PUSH
42818: LD_INT 21
42820: PUSH
42821: LD_INT 22
42823: PUSH
42824: LD_INT 23
42826: PUSH
42827: LD_INT 24
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: ST_TO_ADDR
42836: GO 42985
42838: LD_INT 51
42840: DOUBLE
42841: EQUAL
42842: IFTRUE 42846
42844: GO 42872
42846: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42847: LD_ADDR_VAR 0 3
42851: PUSH
42852: LD_INT 21
42854: PUSH
42855: LD_INT 22
42857: PUSH
42858: LD_INT 23
42860: PUSH
42861: LD_INT 24
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: ST_TO_ADDR
42870: GO 42985
42872: LD_INT 52
42874: DOUBLE
42875: EQUAL
42876: IFTRUE 42880
42878: GO 42906
42880: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42881: LD_ADDR_VAR 0 3
42885: PUSH
42886: LD_INT 21
42888: PUSH
42889: LD_INT 22
42891: PUSH
42892: LD_INT 23
42894: PUSH
42895: LD_INT 24
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: ST_TO_ADDR
42904: GO 42985
42906: LD_INT 53
42908: DOUBLE
42909: EQUAL
42910: IFTRUE 42914
42912: GO 42932
42914: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42915: LD_ADDR_VAR 0 3
42919: PUSH
42920: LD_INT 23
42922: PUSH
42923: LD_INT 24
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: ST_TO_ADDR
42930: GO 42985
42932: LD_INT 46
42934: DOUBLE
42935: EQUAL
42936: IFTRUE 42940
42938: GO 42958
42940: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42941: LD_ADDR_VAR 0 3
42945: PUSH
42946: LD_INT 23
42948: PUSH
42949: LD_INT 24
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: ST_TO_ADDR
42956: GO 42985
42958: LD_INT 47
42960: DOUBLE
42961: EQUAL
42962: IFTRUE 42966
42964: GO 42984
42966: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42967: LD_ADDR_VAR 0 3
42971: PUSH
42972: LD_INT 23
42974: PUSH
42975: LD_INT 24
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: ST_TO_ADDR
42982: GO 42985
42984: POP
// result := ( chassis in result ) ;
42985: LD_ADDR_VAR 0 3
42989: PUSH
42990: LD_VAR 0 1
42994: PUSH
42995: LD_VAR 0 3
42999: IN
43000: ST_TO_ADDR
// end ;
43001: LD_VAR 0 3
43005: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43006: LD_INT 0
43008: PPUSH
43009: PPUSH
43010: PPUSH
43011: PPUSH
43012: PPUSH
43013: PPUSH
43014: PPUSH
// result := array ;
43015: LD_ADDR_VAR 0 5
43019: PUSH
43020: LD_VAR 0 1
43024: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43025: LD_VAR 0 1
43029: NOT
43030: PUSH
43031: LD_VAR 0 2
43035: NOT
43036: OR
43037: PUSH
43038: LD_VAR 0 3
43042: NOT
43043: OR
43044: PUSH
43045: LD_VAR 0 2
43049: PUSH
43050: LD_VAR 0 1
43054: GREATER
43055: OR
43056: PUSH
43057: LD_VAR 0 3
43061: PUSH
43062: LD_VAR 0 1
43066: GREATER
43067: OR
43068: IFFALSE 43072
// exit ;
43070: GO 43368
// if direction then
43072: LD_VAR 0 4
43076: IFFALSE 43140
// begin d := 1 ;
43078: LD_ADDR_VAR 0 9
43082: PUSH
43083: LD_INT 1
43085: ST_TO_ADDR
// if i_from > i_to then
43086: LD_VAR 0 2
43090: PUSH
43091: LD_VAR 0 3
43095: GREATER
43096: IFFALSE 43122
// length := ( array - i_from ) + i_to else
43098: LD_ADDR_VAR 0 11
43102: PUSH
43103: LD_VAR 0 1
43107: PUSH
43108: LD_VAR 0 2
43112: MINUS
43113: PUSH
43114: LD_VAR 0 3
43118: PLUS
43119: ST_TO_ADDR
43120: GO 43138
// length := i_to - i_from ;
43122: LD_ADDR_VAR 0 11
43126: PUSH
43127: LD_VAR 0 3
43131: PUSH
43132: LD_VAR 0 2
43136: MINUS
43137: ST_TO_ADDR
// end else
43138: GO 43201
// begin d := - 1 ;
43140: LD_ADDR_VAR 0 9
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: ST_TO_ADDR
// if i_from > i_to then
43149: LD_VAR 0 2
43153: PUSH
43154: LD_VAR 0 3
43158: GREATER
43159: IFFALSE 43179
// length := i_from - i_to else
43161: LD_ADDR_VAR 0 11
43165: PUSH
43166: LD_VAR 0 2
43170: PUSH
43171: LD_VAR 0 3
43175: MINUS
43176: ST_TO_ADDR
43177: GO 43201
// length := ( array - i_to ) + i_from ;
43179: LD_ADDR_VAR 0 11
43183: PUSH
43184: LD_VAR 0 1
43188: PUSH
43189: LD_VAR 0 3
43193: MINUS
43194: PUSH
43195: LD_VAR 0 2
43199: PLUS
43200: ST_TO_ADDR
// end ; if not length then
43201: LD_VAR 0 11
43205: NOT
43206: IFFALSE 43210
// exit ;
43208: GO 43368
// tmp := array ;
43210: LD_ADDR_VAR 0 10
43214: PUSH
43215: LD_VAR 0 1
43219: ST_TO_ADDR
// for i = 1 to length do
43220: LD_ADDR_VAR 0 6
43224: PUSH
43225: DOUBLE
43226: LD_INT 1
43228: DEC
43229: ST_TO_ADDR
43230: LD_VAR 0 11
43234: PUSH
43235: FOR_TO
43236: IFFALSE 43356
// begin for j = 1 to array do
43238: LD_ADDR_VAR 0 7
43242: PUSH
43243: DOUBLE
43244: LD_INT 1
43246: DEC
43247: ST_TO_ADDR
43248: LD_VAR 0 1
43252: PUSH
43253: FOR_TO
43254: IFFALSE 43342
// begin k := j + d ;
43256: LD_ADDR_VAR 0 8
43260: PUSH
43261: LD_VAR 0 7
43265: PUSH
43266: LD_VAR 0 9
43270: PLUS
43271: ST_TO_ADDR
// if k > array then
43272: LD_VAR 0 8
43276: PUSH
43277: LD_VAR 0 1
43281: GREATER
43282: IFFALSE 43292
// k := 1 ;
43284: LD_ADDR_VAR 0 8
43288: PUSH
43289: LD_INT 1
43291: ST_TO_ADDR
// if not k then
43292: LD_VAR 0 8
43296: NOT
43297: IFFALSE 43309
// k := array ;
43299: LD_ADDR_VAR 0 8
43303: PUSH
43304: LD_VAR 0 1
43308: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43309: LD_ADDR_VAR 0 10
43313: PUSH
43314: LD_VAR 0 10
43318: PPUSH
43319: LD_VAR 0 8
43323: PPUSH
43324: LD_VAR 0 1
43328: PUSH
43329: LD_VAR 0 7
43333: ARRAY
43334: PPUSH
43335: CALL_OW 1
43339: ST_TO_ADDR
// end ;
43340: GO 43253
43342: POP
43343: POP
// array := tmp ;
43344: LD_ADDR_VAR 0 1
43348: PUSH
43349: LD_VAR 0 10
43353: ST_TO_ADDR
// end ;
43354: GO 43235
43356: POP
43357: POP
// result := array ;
43358: LD_ADDR_VAR 0 5
43362: PUSH
43363: LD_VAR 0 1
43367: ST_TO_ADDR
// end ;
43368: LD_VAR 0 5
43372: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43373: LD_INT 0
43375: PPUSH
43376: PPUSH
// result := 0 ;
43377: LD_ADDR_VAR 0 3
43381: PUSH
43382: LD_INT 0
43384: ST_TO_ADDR
// if not array or not value in array then
43385: LD_VAR 0 1
43389: NOT
43390: PUSH
43391: LD_VAR 0 2
43395: PUSH
43396: LD_VAR 0 1
43400: IN
43401: NOT
43402: OR
43403: IFFALSE 43407
// exit ;
43405: GO 43461
// for i = 1 to array do
43407: LD_ADDR_VAR 0 4
43411: PUSH
43412: DOUBLE
43413: LD_INT 1
43415: DEC
43416: ST_TO_ADDR
43417: LD_VAR 0 1
43421: PUSH
43422: FOR_TO
43423: IFFALSE 43459
// if value = array [ i ] then
43425: LD_VAR 0 2
43429: PUSH
43430: LD_VAR 0 1
43434: PUSH
43435: LD_VAR 0 4
43439: ARRAY
43440: EQUAL
43441: IFFALSE 43457
// begin result := i ;
43443: LD_ADDR_VAR 0 3
43447: PUSH
43448: LD_VAR 0 4
43452: ST_TO_ADDR
// exit ;
43453: POP
43454: POP
43455: GO 43461
// end ;
43457: GO 43422
43459: POP
43460: POP
// end ;
43461: LD_VAR 0 3
43465: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43466: LD_INT 0
43468: PPUSH
// vc_chassis := chassis ;
43469: LD_ADDR_OWVAR 37
43473: PUSH
43474: LD_VAR 0 1
43478: ST_TO_ADDR
// vc_engine := engine ;
43479: LD_ADDR_OWVAR 39
43483: PUSH
43484: LD_VAR 0 2
43488: ST_TO_ADDR
// vc_control := control ;
43489: LD_ADDR_OWVAR 38
43493: PUSH
43494: LD_VAR 0 3
43498: ST_TO_ADDR
// vc_weapon := weapon ;
43499: LD_ADDR_OWVAR 40
43503: PUSH
43504: LD_VAR 0 4
43508: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43509: LD_ADDR_OWVAR 41
43513: PUSH
43514: LD_VAR 0 5
43518: ST_TO_ADDR
// end ;
43519: LD_VAR 0 6
43523: RET
// export function WantPlant ( unit ) ; var task ; begin
43524: LD_INT 0
43526: PPUSH
43527: PPUSH
// result := false ;
43528: LD_ADDR_VAR 0 2
43532: PUSH
43533: LD_INT 0
43535: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43536: LD_ADDR_VAR 0 3
43540: PUSH
43541: LD_VAR 0 1
43545: PPUSH
43546: CALL_OW 437
43550: ST_TO_ADDR
// if task then
43551: LD_VAR 0 3
43555: IFFALSE 43583
// if task [ 1 ] [ 1 ] = p then
43557: LD_VAR 0 3
43561: PUSH
43562: LD_INT 1
43564: ARRAY
43565: PUSH
43566: LD_INT 1
43568: ARRAY
43569: PUSH
43570: LD_STRING p
43572: EQUAL
43573: IFFALSE 43583
// result := true ;
43575: LD_ADDR_VAR 0 2
43579: PUSH
43580: LD_INT 1
43582: ST_TO_ADDR
// end ;
43583: LD_VAR 0 2
43587: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43588: LD_INT 0
43590: PPUSH
43591: PPUSH
43592: PPUSH
43593: PPUSH
// if pos < 1 then
43594: LD_VAR 0 2
43598: PUSH
43599: LD_INT 1
43601: LESS
43602: IFFALSE 43606
// exit ;
43604: GO 43909
// if pos = 1 then
43606: LD_VAR 0 2
43610: PUSH
43611: LD_INT 1
43613: EQUAL
43614: IFFALSE 43647
// result := Replace ( arr , pos [ 1 ] , value ) else
43616: LD_ADDR_VAR 0 4
43620: PUSH
43621: LD_VAR 0 1
43625: PPUSH
43626: LD_VAR 0 2
43630: PUSH
43631: LD_INT 1
43633: ARRAY
43634: PPUSH
43635: LD_VAR 0 3
43639: PPUSH
43640: CALL_OW 1
43644: ST_TO_ADDR
43645: GO 43909
// begin tmp := arr ;
43647: LD_ADDR_VAR 0 6
43651: PUSH
43652: LD_VAR 0 1
43656: ST_TO_ADDR
// s_arr := [ tmp ] ;
43657: LD_ADDR_VAR 0 7
43661: PUSH
43662: LD_VAR 0 6
43666: PUSH
43667: EMPTY
43668: LIST
43669: ST_TO_ADDR
// for i = 1 to pos - 1 do
43670: LD_ADDR_VAR 0 5
43674: PUSH
43675: DOUBLE
43676: LD_INT 1
43678: DEC
43679: ST_TO_ADDR
43680: LD_VAR 0 2
43684: PUSH
43685: LD_INT 1
43687: MINUS
43688: PUSH
43689: FOR_TO
43690: IFFALSE 43735
// begin tmp := tmp [ pos [ i ] ] ;
43692: LD_ADDR_VAR 0 6
43696: PUSH
43697: LD_VAR 0 6
43701: PUSH
43702: LD_VAR 0 2
43706: PUSH
43707: LD_VAR 0 5
43711: ARRAY
43712: ARRAY
43713: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43714: LD_ADDR_VAR 0 7
43718: PUSH
43719: LD_VAR 0 7
43723: PUSH
43724: LD_VAR 0 6
43728: PUSH
43729: EMPTY
43730: LIST
43731: ADD
43732: ST_TO_ADDR
// end ;
43733: GO 43689
43735: POP
43736: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43737: LD_ADDR_VAR 0 6
43741: PUSH
43742: LD_VAR 0 6
43746: PPUSH
43747: LD_VAR 0 2
43751: PUSH
43752: LD_VAR 0 2
43756: ARRAY
43757: PPUSH
43758: LD_VAR 0 3
43762: PPUSH
43763: CALL_OW 1
43767: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43768: LD_ADDR_VAR 0 7
43772: PUSH
43773: LD_VAR 0 7
43777: PPUSH
43778: LD_VAR 0 7
43782: PPUSH
43783: LD_VAR 0 6
43787: PPUSH
43788: CALL_OW 1
43792: ST_TO_ADDR
// for i = s_arr downto 2 do
43793: LD_ADDR_VAR 0 5
43797: PUSH
43798: DOUBLE
43799: LD_VAR 0 7
43803: INC
43804: ST_TO_ADDR
43805: LD_INT 2
43807: PUSH
43808: FOR_DOWNTO
43809: IFFALSE 43893
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43811: LD_ADDR_VAR 0 6
43815: PUSH
43816: LD_VAR 0 7
43820: PUSH
43821: LD_VAR 0 5
43825: PUSH
43826: LD_INT 1
43828: MINUS
43829: ARRAY
43830: PPUSH
43831: LD_VAR 0 2
43835: PUSH
43836: LD_VAR 0 5
43840: PUSH
43841: LD_INT 1
43843: MINUS
43844: ARRAY
43845: PPUSH
43846: LD_VAR 0 7
43850: PUSH
43851: LD_VAR 0 5
43855: ARRAY
43856: PPUSH
43857: CALL_OW 1
43861: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43862: LD_ADDR_VAR 0 7
43866: PUSH
43867: LD_VAR 0 7
43871: PPUSH
43872: LD_VAR 0 5
43876: PUSH
43877: LD_INT 1
43879: MINUS
43880: PPUSH
43881: LD_VAR 0 6
43885: PPUSH
43886: CALL_OW 1
43890: ST_TO_ADDR
// end ;
43891: GO 43808
43893: POP
43894: POP
// result := s_arr [ 1 ] ;
43895: LD_ADDR_VAR 0 4
43899: PUSH
43900: LD_VAR 0 7
43904: PUSH
43905: LD_INT 1
43907: ARRAY
43908: ST_TO_ADDR
// end ; end ;
43909: LD_VAR 0 4
43913: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43914: LD_INT 0
43916: PPUSH
43917: PPUSH
// if not list then
43918: LD_VAR 0 1
43922: NOT
43923: IFFALSE 43927
// exit ;
43925: GO 44018
// i := list [ pos1 ] ;
43927: LD_ADDR_VAR 0 5
43931: PUSH
43932: LD_VAR 0 1
43936: PUSH
43937: LD_VAR 0 2
43941: ARRAY
43942: ST_TO_ADDR
// if not i then
43943: LD_VAR 0 5
43947: NOT
43948: IFFALSE 43952
// exit ;
43950: GO 44018
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43952: LD_ADDR_VAR 0 1
43956: PUSH
43957: LD_VAR 0 1
43961: PPUSH
43962: LD_VAR 0 2
43966: PPUSH
43967: LD_VAR 0 1
43971: PUSH
43972: LD_VAR 0 3
43976: ARRAY
43977: PPUSH
43978: CALL_OW 1
43982: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43983: LD_ADDR_VAR 0 1
43987: PUSH
43988: LD_VAR 0 1
43992: PPUSH
43993: LD_VAR 0 3
43997: PPUSH
43998: LD_VAR 0 5
44002: PPUSH
44003: CALL_OW 1
44007: ST_TO_ADDR
// result := list ;
44008: LD_ADDR_VAR 0 4
44012: PUSH
44013: LD_VAR 0 1
44017: ST_TO_ADDR
// end ;
44018: LD_VAR 0 4
44022: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44023: LD_INT 0
44025: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44026: LD_ADDR_VAR 0 5
44030: PUSH
44031: LD_VAR 0 1
44035: PPUSH
44036: CALL_OW 250
44040: PPUSH
44041: LD_VAR 0 1
44045: PPUSH
44046: CALL_OW 251
44050: PPUSH
44051: LD_VAR 0 2
44055: PPUSH
44056: LD_VAR 0 3
44060: PPUSH
44061: LD_VAR 0 4
44065: PPUSH
44066: CALL 44076 0 5
44070: ST_TO_ADDR
// end ;
44071: LD_VAR 0 5
44075: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44076: LD_INT 0
44078: PPUSH
44079: PPUSH
44080: PPUSH
44081: PPUSH
// if not list then
44082: LD_VAR 0 3
44086: NOT
44087: IFFALSE 44091
// exit ;
44089: GO 44479
// result := [ ] ;
44091: LD_ADDR_VAR 0 6
44095: PUSH
44096: EMPTY
44097: ST_TO_ADDR
// for i in list do
44098: LD_ADDR_VAR 0 7
44102: PUSH
44103: LD_VAR 0 3
44107: PUSH
44108: FOR_IN
44109: IFFALSE 44311
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44111: LD_ADDR_VAR 0 9
44115: PUSH
44116: LD_VAR 0 7
44120: PPUSH
44121: LD_VAR 0 1
44125: PPUSH
44126: LD_VAR 0 2
44130: PPUSH
44131: CALL_OW 297
44135: ST_TO_ADDR
// if not result then
44136: LD_VAR 0 6
44140: NOT
44141: IFFALSE 44167
// result := [ [ i , tmp ] ] else
44143: LD_ADDR_VAR 0 6
44147: PUSH
44148: LD_VAR 0 7
44152: PUSH
44153: LD_VAR 0 9
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: EMPTY
44163: LIST
44164: ST_TO_ADDR
44165: GO 44309
// begin if result [ result ] [ 2 ] < tmp then
44167: LD_VAR 0 6
44171: PUSH
44172: LD_VAR 0 6
44176: ARRAY
44177: PUSH
44178: LD_INT 2
44180: ARRAY
44181: PUSH
44182: LD_VAR 0 9
44186: LESS
44187: IFFALSE 44229
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44189: LD_ADDR_VAR 0 6
44193: PUSH
44194: LD_VAR 0 6
44198: PPUSH
44199: LD_VAR 0 6
44203: PUSH
44204: LD_INT 1
44206: PLUS
44207: PPUSH
44208: LD_VAR 0 7
44212: PUSH
44213: LD_VAR 0 9
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PPUSH
44222: CALL_OW 2
44226: ST_TO_ADDR
44227: GO 44309
// for j = 1 to result do
44229: LD_ADDR_VAR 0 8
44233: PUSH
44234: DOUBLE
44235: LD_INT 1
44237: DEC
44238: ST_TO_ADDR
44239: LD_VAR 0 6
44243: PUSH
44244: FOR_TO
44245: IFFALSE 44307
// begin if tmp < result [ j ] [ 2 ] then
44247: LD_VAR 0 9
44251: PUSH
44252: LD_VAR 0 6
44256: PUSH
44257: LD_VAR 0 8
44261: ARRAY
44262: PUSH
44263: LD_INT 2
44265: ARRAY
44266: LESS
44267: IFFALSE 44305
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44269: LD_ADDR_VAR 0 6
44273: PUSH
44274: LD_VAR 0 6
44278: PPUSH
44279: LD_VAR 0 8
44283: PPUSH
44284: LD_VAR 0 7
44288: PUSH
44289: LD_VAR 0 9
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PPUSH
44298: CALL_OW 2
44302: ST_TO_ADDR
// break ;
44303: GO 44307
// end ; end ;
44305: GO 44244
44307: POP
44308: POP
// end ; end ;
44309: GO 44108
44311: POP
44312: POP
// if result and not asc then
44313: LD_VAR 0 6
44317: PUSH
44318: LD_VAR 0 4
44322: NOT
44323: AND
44324: IFFALSE 44399
// begin tmp := result ;
44326: LD_ADDR_VAR 0 9
44330: PUSH
44331: LD_VAR 0 6
44335: ST_TO_ADDR
// for i = tmp downto 1 do
44336: LD_ADDR_VAR 0 7
44340: PUSH
44341: DOUBLE
44342: LD_VAR 0 9
44346: INC
44347: ST_TO_ADDR
44348: LD_INT 1
44350: PUSH
44351: FOR_DOWNTO
44352: IFFALSE 44397
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44354: LD_ADDR_VAR 0 6
44358: PUSH
44359: LD_VAR 0 6
44363: PPUSH
44364: LD_VAR 0 9
44368: PUSH
44369: LD_VAR 0 7
44373: MINUS
44374: PUSH
44375: LD_INT 1
44377: PLUS
44378: PPUSH
44379: LD_VAR 0 9
44383: PUSH
44384: LD_VAR 0 7
44388: ARRAY
44389: PPUSH
44390: CALL_OW 1
44394: ST_TO_ADDR
44395: GO 44351
44397: POP
44398: POP
// end ; tmp := [ ] ;
44399: LD_ADDR_VAR 0 9
44403: PUSH
44404: EMPTY
44405: ST_TO_ADDR
// if mode then
44406: LD_VAR 0 5
44410: IFFALSE 44479
// begin for i = 1 to result do
44412: LD_ADDR_VAR 0 7
44416: PUSH
44417: DOUBLE
44418: LD_INT 1
44420: DEC
44421: ST_TO_ADDR
44422: LD_VAR 0 6
44426: PUSH
44427: FOR_TO
44428: IFFALSE 44467
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44430: LD_ADDR_VAR 0 9
44434: PUSH
44435: LD_VAR 0 9
44439: PPUSH
44440: LD_VAR 0 7
44444: PPUSH
44445: LD_VAR 0 6
44449: PUSH
44450: LD_VAR 0 7
44454: ARRAY
44455: PUSH
44456: LD_INT 1
44458: ARRAY
44459: PPUSH
44460: CALL_OW 1
44464: ST_TO_ADDR
44465: GO 44427
44467: POP
44468: POP
// result := tmp ;
44469: LD_ADDR_VAR 0 6
44473: PUSH
44474: LD_VAR 0 9
44478: ST_TO_ADDR
// end ; end ;
44479: LD_VAR 0 6
44483: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44484: LD_INT 0
44486: PPUSH
44487: PPUSH
44488: PPUSH
44489: PPUSH
44490: PPUSH
44491: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44492: LD_ADDR_VAR 0 5
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: ST_TO_ADDR
// if not x or not y then
44514: LD_VAR 0 2
44518: NOT
44519: PUSH
44520: LD_VAR 0 3
44524: NOT
44525: OR
44526: IFFALSE 44530
// exit ;
44528: GO 46182
// if not range then
44530: LD_VAR 0 4
44534: NOT
44535: IFFALSE 44545
// range := 10 ;
44537: LD_ADDR_VAR 0 4
44541: PUSH
44542: LD_INT 10
44544: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44545: LD_ADDR_VAR 0 8
44549: PUSH
44550: LD_INT 81
44552: PUSH
44553: LD_VAR 0 1
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 92
44564: PUSH
44565: LD_VAR 0 2
44569: PUSH
44570: LD_VAR 0 3
44574: PUSH
44575: LD_VAR 0 4
44579: PUSH
44580: EMPTY
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 3
44588: PUSH
44589: LD_INT 21
44591: PUSH
44592: LD_INT 3
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: PPUSH
44608: CALL_OW 69
44612: ST_TO_ADDR
// if not tmp then
44613: LD_VAR 0 8
44617: NOT
44618: IFFALSE 44622
// exit ;
44620: GO 46182
// for i in tmp do
44622: LD_ADDR_VAR 0 6
44626: PUSH
44627: LD_VAR 0 8
44631: PUSH
44632: FOR_IN
44633: IFFALSE 46157
// begin points := [ 0 , 0 , 0 ] ;
44635: LD_ADDR_VAR 0 9
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: LIST
44653: ST_TO_ADDR
// bpoints := 1 ;
44654: LD_ADDR_VAR 0 10
44658: PUSH
44659: LD_INT 1
44661: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44662: LD_VAR 0 6
44666: PPUSH
44667: CALL_OW 247
44671: PUSH
44672: LD_INT 1
44674: DOUBLE
44675: EQUAL
44676: IFTRUE 44680
44678: GO 45258
44680: POP
// begin if GetClass ( i ) = 1 then
44681: LD_VAR 0 6
44685: PPUSH
44686: CALL_OW 257
44690: PUSH
44691: LD_INT 1
44693: EQUAL
44694: IFFALSE 44715
// points := [ 10 , 5 , 3 ] ;
44696: LD_ADDR_VAR 0 9
44700: PUSH
44701: LD_INT 10
44703: PUSH
44704: LD_INT 5
44706: PUSH
44707: LD_INT 3
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: LIST
44714: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44715: LD_VAR 0 6
44719: PPUSH
44720: CALL_OW 257
44724: PUSH
44725: LD_INT 2
44727: PUSH
44728: LD_INT 3
44730: PUSH
44731: LD_INT 4
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: LIST
44738: IN
44739: IFFALSE 44760
// points := [ 3 , 2 , 1 ] ;
44741: LD_ADDR_VAR 0 9
44745: PUSH
44746: LD_INT 3
44748: PUSH
44749: LD_INT 2
44751: PUSH
44752: LD_INT 1
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: LIST
44759: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44760: LD_VAR 0 6
44764: PPUSH
44765: CALL_OW 257
44769: PUSH
44770: LD_INT 5
44772: EQUAL
44773: IFFALSE 44794
// points := [ 130 , 5 , 2 ] ;
44775: LD_ADDR_VAR 0 9
44779: PUSH
44780: LD_INT 130
44782: PUSH
44783: LD_INT 5
44785: PUSH
44786: LD_INT 2
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: LIST
44793: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44794: LD_VAR 0 6
44798: PPUSH
44799: CALL_OW 257
44803: PUSH
44804: LD_INT 8
44806: EQUAL
44807: IFFALSE 44828
// points := [ 35 , 35 , 30 ] ;
44809: LD_ADDR_VAR 0 9
44813: PUSH
44814: LD_INT 35
44816: PUSH
44817: LD_INT 35
44819: PUSH
44820: LD_INT 30
44822: PUSH
44823: EMPTY
44824: LIST
44825: LIST
44826: LIST
44827: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44828: LD_VAR 0 6
44832: PPUSH
44833: CALL_OW 257
44837: PUSH
44838: LD_INT 9
44840: EQUAL
44841: IFFALSE 44862
// points := [ 20 , 55 , 40 ] ;
44843: LD_ADDR_VAR 0 9
44847: PUSH
44848: LD_INT 20
44850: PUSH
44851: LD_INT 55
44853: PUSH
44854: LD_INT 40
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: LIST
44861: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44862: LD_VAR 0 6
44866: PPUSH
44867: CALL_OW 257
44871: PUSH
44872: LD_INT 12
44874: PUSH
44875: LD_INT 16
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: IN
44882: IFFALSE 44903
// points := [ 5 , 3 , 2 ] ;
44884: LD_ADDR_VAR 0 9
44888: PUSH
44889: LD_INT 5
44891: PUSH
44892: LD_INT 3
44894: PUSH
44895: LD_INT 2
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: LIST
44902: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44903: LD_VAR 0 6
44907: PPUSH
44908: CALL_OW 257
44912: PUSH
44913: LD_INT 17
44915: EQUAL
44916: IFFALSE 44937
// points := [ 100 , 50 , 75 ] ;
44918: LD_ADDR_VAR 0 9
44922: PUSH
44923: LD_INT 100
44925: PUSH
44926: LD_INT 50
44928: PUSH
44929: LD_INT 75
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: LIST
44936: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44937: LD_VAR 0 6
44941: PPUSH
44942: CALL_OW 257
44946: PUSH
44947: LD_INT 15
44949: EQUAL
44950: IFFALSE 44971
// points := [ 10 , 5 , 3 ] ;
44952: LD_ADDR_VAR 0 9
44956: PUSH
44957: LD_INT 10
44959: PUSH
44960: LD_INT 5
44962: PUSH
44963: LD_INT 3
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: LIST
44970: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44971: LD_VAR 0 6
44975: PPUSH
44976: CALL_OW 257
44980: PUSH
44981: LD_INT 14
44983: EQUAL
44984: IFFALSE 45005
// points := [ 10 , 0 , 0 ] ;
44986: LD_ADDR_VAR 0 9
44990: PUSH
44991: LD_INT 10
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: LD_INT 0
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: LIST
45004: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45005: LD_VAR 0 6
45009: PPUSH
45010: CALL_OW 257
45014: PUSH
45015: LD_INT 11
45017: EQUAL
45018: IFFALSE 45039
// points := [ 30 , 10 , 5 ] ;
45020: LD_ADDR_VAR 0 9
45024: PUSH
45025: LD_INT 30
45027: PUSH
45028: LD_INT 10
45030: PUSH
45031: LD_INT 5
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: LIST
45038: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45039: LD_VAR 0 1
45043: PPUSH
45044: LD_INT 5
45046: PPUSH
45047: CALL_OW 321
45051: PUSH
45052: LD_INT 2
45054: EQUAL
45055: IFFALSE 45072
// bpoints := bpoints * 1.8 ;
45057: LD_ADDR_VAR 0 10
45061: PUSH
45062: LD_VAR 0 10
45066: PUSH
45067: LD_REAL  1.80000000000000E+0000
45070: MUL
45071: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45072: LD_VAR 0 6
45076: PPUSH
45077: CALL_OW 257
45081: PUSH
45082: LD_INT 1
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: LD_INT 3
45090: PUSH
45091: LD_INT 4
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: IN
45100: PUSH
45101: LD_VAR 0 1
45105: PPUSH
45106: LD_INT 51
45108: PPUSH
45109: CALL_OW 321
45113: PUSH
45114: LD_INT 2
45116: EQUAL
45117: AND
45118: IFFALSE 45135
// bpoints := bpoints * 1.2 ;
45120: LD_ADDR_VAR 0 10
45124: PUSH
45125: LD_VAR 0 10
45129: PUSH
45130: LD_REAL  1.20000000000000E+0000
45133: MUL
45134: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45135: LD_VAR 0 6
45139: PPUSH
45140: CALL_OW 257
45144: PUSH
45145: LD_INT 5
45147: PUSH
45148: LD_INT 7
45150: PUSH
45151: LD_INT 9
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: LIST
45158: IN
45159: PUSH
45160: LD_VAR 0 1
45164: PPUSH
45165: LD_INT 52
45167: PPUSH
45168: CALL_OW 321
45172: PUSH
45173: LD_INT 2
45175: EQUAL
45176: AND
45177: IFFALSE 45194
// bpoints := bpoints * 1.5 ;
45179: LD_ADDR_VAR 0 10
45183: PUSH
45184: LD_VAR 0 10
45188: PUSH
45189: LD_REAL  1.50000000000000E+0000
45192: MUL
45193: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45194: LD_VAR 0 1
45198: PPUSH
45199: LD_INT 66
45201: PPUSH
45202: CALL_OW 321
45206: PUSH
45207: LD_INT 2
45209: EQUAL
45210: IFFALSE 45227
// bpoints := bpoints * 1.1 ;
45212: LD_ADDR_VAR 0 10
45216: PUSH
45217: LD_VAR 0 10
45221: PUSH
45222: LD_REAL  1.10000000000000E+0000
45225: MUL
45226: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45227: LD_ADDR_VAR 0 10
45231: PUSH
45232: LD_VAR 0 10
45236: PUSH
45237: LD_VAR 0 6
45241: PPUSH
45242: LD_INT 1
45244: PPUSH
45245: CALL_OW 259
45249: PUSH
45250: LD_REAL  1.15000000000000E+0000
45253: MUL
45254: MUL
45255: ST_TO_ADDR
// end ; unit_vehicle :
45256: GO 46086
45258: LD_INT 2
45260: DOUBLE
45261: EQUAL
45262: IFTRUE 45266
45264: GO 46074
45266: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45267: LD_VAR 0 6
45271: PPUSH
45272: CALL_OW 264
45276: PUSH
45277: LD_INT 2
45279: PUSH
45280: LD_INT 42
45282: PUSH
45283: LD_INT 24
45285: PUSH
45286: EMPTY
45287: LIST
45288: LIST
45289: LIST
45290: IN
45291: IFFALSE 45312
// points := [ 25 , 5 , 3 ] ;
45293: LD_ADDR_VAR 0 9
45297: PUSH
45298: LD_INT 25
45300: PUSH
45301: LD_INT 5
45303: PUSH
45304: LD_INT 3
45306: PUSH
45307: EMPTY
45308: LIST
45309: LIST
45310: LIST
45311: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45312: LD_VAR 0 6
45316: PPUSH
45317: CALL_OW 264
45321: PUSH
45322: LD_INT 4
45324: PUSH
45325: LD_INT 43
45327: PUSH
45328: LD_INT 25
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: LIST
45335: IN
45336: IFFALSE 45357
// points := [ 40 , 15 , 5 ] ;
45338: LD_ADDR_VAR 0 9
45342: PUSH
45343: LD_INT 40
45345: PUSH
45346: LD_INT 15
45348: PUSH
45349: LD_INT 5
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: LIST
45356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45357: LD_VAR 0 6
45361: PPUSH
45362: CALL_OW 264
45366: PUSH
45367: LD_INT 3
45369: PUSH
45370: LD_INT 23
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: IN
45377: IFFALSE 45398
// points := [ 7 , 25 , 8 ] ;
45379: LD_ADDR_VAR 0 9
45383: PUSH
45384: LD_INT 7
45386: PUSH
45387: LD_INT 25
45389: PUSH
45390: LD_INT 8
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: LIST
45397: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45398: LD_VAR 0 6
45402: PPUSH
45403: CALL_OW 264
45407: PUSH
45408: LD_INT 5
45410: PUSH
45411: LD_INT 27
45413: PUSH
45414: LD_INT 44
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: LIST
45421: IN
45422: IFFALSE 45443
// points := [ 14 , 50 , 16 ] ;
45424: LD_ADDR_VAR 0 9
45428: PUSH
45429: LD_INT 14
45431: PUSH
45432: LD_INT 50
45434: PUSH
45435: LD_INT 16
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45443: LD_VAR 0 6
45447: PPUSH
45448: CALL_OW 264
45452: PUSH
45453: LD_INT 6
45455: PUSH
45456: LD_INT 46
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: IN
45463: IFFALSE 45484
// points := [ 32 , 120 , 70 ] ;
45465: LD_ADDR_VAR 0 9
45469: PUSH
45470: LD_INT 32
45472: PUSH
45473: LD_INT 120
45475: PUSH
45476: LD_INT 70
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: LIST
45483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45484: LD_VAR 0 6
45488: PPUSH
45489: CALL_OW 264
45493: PUSH
45494: LD_INT 7
45496: PUSH
45497: LD_INT 28
45499: PUSH
45500: LD_INT 45
45502: PUSH
45503: LD_EXP 57
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: IN
45514: IFFALSE 45535
// points := [ 35 , 20 , 45 ] ;
45516: LD_ADDR_VAR 0 9
45520: PUSH
45521: LD_INT 35
45523: PUSH
45524: LD_INT 20
45526: PUSH
45527: LD_INT 45
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45535: LD_VAR 0 6
45539: PPUSH
45540: CALL_OW 264
45544: PUSH
45545: LD_INT 47
45547: PUSH
45548: EMPTY
45549: LIST
45550: IN
45551: IFFALSE 45572
// points := [ 67 , 45 , 75 ] ;
45553: LD_ADDR_VAR 0 9
45557: PUSH
45558: LD_INT 67
45560: PUSH
45561: LD_INT 45
45563: PUSH
45564: LD_INT 75
45566: PUSH
45567: EMPTY
45568: LIST
45569: LIST
45570: LIST
45571: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45572: LD_VAR 0 6
45576: PPUSH
45577: CALL_OW 264
45581: PUSH
45582: LD_INT 26
45584: PUSH
45585: EMPTY
45586: LIST
45587: IN
45588: IFFALSE 45609
// points := [ 120 , 30 , 80 ] ;
45590: LD_ADDR_VAR 0 9
45594: PUSH
45595: LD_INT 120
45597: PUSH
45598: LD_INT 30
45600: PUSH
45601: LD_INT 80
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: LIST
45608: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45609: LD_VAR 0 6
45613: PPUSH
45614: CALL_OW 264
45618: PUSH
45619: LD_INT 22
45621: PUSH
45622: EMPTY
45623: LIST
45624: IN
45625: IFFALSE 45646
// points := [ 40 , 1 , 1 ] ;
45627: LD_ADDR_VAR 0 9
45631: PUSH
45632: LD_INT 40
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: LIST
45645: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45646: LD_VAR 0 6
45650: PPUSH
45651: CALL_OW 264
45655: PUSH
45656: LD_INT 29
45658: PUSH
45659: EMPTY
45660: LIST
45661: IN
45662: IFFALSE 45683
// points := [ 70 , 200 , 400 ] ;
45664: LD_ADDR_VAR 0 9
45668: PUSH
45669: LD_INT 70
45671: PUSH
45672: LD_INT 200
45674: PUSH
45675: LD_INT 400
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: LIST
45682: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45683: LD_VAR 0 6
45687: PPUSH
45688: CALL_OW 264
45692: PUSH
45693: LD_INT 14
45695: PUSH
45696: LD_INT 53
45698: PUSH
45699: EMPTY
45700: LIST
45701: LIST
45702: IN
45703: IFFALSE 45724
// points := [ 40 , 10 , 20 ] ;
45705: LD_ADDR_VAR 0 9
45709: PUSH
45710: LD_INT 40
45712: PUSH
45713: LD_INT 10
45715: PUSH
45716: LD_INT 20
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: LIST
45723: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45724: LD_VAR 0 6
45728: PPUSH
45729: CALL_OW 264
45733: PUSH
45734: LD_INT 9
45736: PUSH
45737: EMPTY
45738: LIST
45739: IN
45740: IFFALSE 45761
// points := [ 5 , 70 , 20 ] ;
45742: LD_ADDR_VAR 0 9
45746: PUSH
45747: LD_INT 5
45749: PUSH
45750: LD_INT 70
45752: PUSH
45753: LD_INT 20
45755: PUSH
45756: EMPTY
45757: LIST
45758: LIST
45759: LIST
45760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45761: LD_VAR 0 6
45765: PPUSH
45766: CALL_OW 264
45770: PUSH
45771: LD_INT 10
45773: PUSH
45774: EMPTY
45775: LIST
45776: IN
45777: IFFALSE 45798
// points := [ 35 , 110 , 70 ] ;
45779: LD_ADDR_VAR 0 9
45783: PUSH
45784: LD_INT 35
45786: PUSH
45787: LD_INT 110
45789: PUSH
45790: LD_INT 70
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: LIST
45797: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45798: LD_VAR 0 6
45802: PPUSH
45803: CALL_OW 265
45807: PUSH
45808: LD_INT 25
45810: EQUAL
45811: IFFALSE 45832
// points := [ 80 , 65 , 100 ] ;
45813: LD_ADDR_VAR 0 9
45817: PUSH
45818: LD_INT 80
45820: PUSH
45821: LD_INT 65
45823: PUSH
45824: LD_INT 100
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: LIST
45831: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45832: LD_VAR 0 6
45836: PPUSH
45837: CALL_OW 263
45841: PUSH
45842: LD_INT 1
45844: EQUAL
45845: IFFALSE 45880
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45847: LD_ADDR_VAR 0 10
45851: PUSH
45852: LD_VAR 0 10
45856: PUSH
45857: LD_VAR 0 6
45861: PPUSH
45862: CALL_OW 311
45866: PPUSH
45867: LD_INT 3
45869: PPUSH
45870: CALL_OW 259
45874: PUSH
45875: LD_INT 4
45877: MUL
45878: MUL
45879: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45880: LD_VAR 0 6
45884: PPUSH
45885: CALL_OW 263
45889: PUSH
45890: LD_INT 2
45892: EQUAL
45893: IFFALSE 45944
// begin j := IsControledBy ( i ) ;
45895: LD_ADDR_VAR 0 7
45899: PUSH
45900: LD_VAR 0 6
45904: PPUSH
45905: CALL_OW 312
45909: ST_TO_ADDR
// if j then
45910: LD_VAR 0 7
45914: IFFALSE 45944
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45916: LD_ADDR_VAR 0 10
45920: PUSH
45921: LD_VAR 0 10
45925: PUSH
45926: LD_VAR 0 7
45930: PPUSH
45931: LD_INT 3
45933: PPUSH
45934: CALL_OW 259
45938: PUSH
45939: LD_INT 3
45941: MUL
45942: MUL
45943: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45944: LD_VAR 0 6
45948: PPUSH
45949: CALL_OW 264
45953: PUSH
45954: LD_INT 5
45956: PUSH
45957: LD_INT 6
45959: PUSH
45960: LD_INT 46
45962: PUSH
45963: LD_INT 44
45965: PUSH
45966: LD_INT 47
45968: PUSH
45969: LD_INT 45
45971: PUSH
45972: LD_INT 28
45974: PUSH
45975: LD_INT 7
45977: PUSH
45978: LD_INT 27
45980: PUSH
45981: LD_INT 29
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: LIST
45988: LIST
45989: LIST
45990: LIST
45991: LIST
45992: LIST
45993: LIST
45994: LIST
45995: IN
45996: PUSH
45997: LD_VAR 0 1
46001: PPUSH
46002: LD_INT 52
46004: PPUSH
46005: CALL_OW 321
46009: PUSH
46010: LD_INT 2
46012: EQUAL
46013: AND
46014: IFFALSE 46031
// bpoints := bpoints * 1.2 ;
46016: LD_ADDR_VAR 0 10
46020: PUSH
46021: LD_VAR 0 10
46025: PUSH
46026: LD_REAL  1.20000000000000E+0000
46029: MUL
46030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46031: LD_VAR 0 6
46035: PPUSH
46036: CALL_OW 264
46040: PUSH
46041: LD_INT 6
46043: PUSH
46044: LD_INT 46
46046: PUSH
46047: LD_INT 47
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: IN
46055: IFFALSE 46072
// bpoints := bpoints * 1.2 ;
46057: LD_ADDR_VAR 0 10
46061: PUSH
46062: LD_VAR 0 10
46066: PUSH
46067: LD_REAL  1.20000000000000E+0000
46070: MUL
46071: ST_TO_ADDR
// end ; unit_building :
46072: GO 46086
46074: LD_INT 3
46076: DOUBLE
46077: EQUAL
46078: IFTRUE 46082
46080: GO 46085
46082: POP
// ; end ;
46083: GO 46086
46085: POP
// for j = 1 to 3 do
46086: LD_ADDR_VAR 0 7
46090: PUSH
46091: DOUBLE
46092: LD_INT 1
46094: DEC
46095: ST_TO_ADDR
46096: LD_INT 3
46098: PUSH
46099: FOR_TO
46100: IFFALSE 46153
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46102: LD_ADDR_VAR 0 5
46106: PUSH
46107: LD_VAR 0 5
46111: PPUSH
46112: LD_VAR 0 7
46116: PPUSH
46117: LD_VAR 0 5
46121: PUSH
46122: LD_VAR 0 7
46126: ARRAY
46127: PUSH
46128: LD_VAR 0 9
46132: PUSH
46133: LD_VAR 0 7
46137: ARRAY
46138: PUSH
46139: LD_VAR 0 10
46143: MUL
46144: PLUS
46145: PPUSH
46146: CALL_OW 1
46150: ST_TO_ADDR
46151: GO 46099
46153: POP
46154: POP
// end ;
46155: GO 44632
46157: POP
46158: POP
// result := Replace ( result , 4 , tmp ) ;
46159: LD_ADDR_VAR 0 5
46163: PUSH
46164: LD_VAR 0 5
46168: PPUSH
46169: LD_INT 4
46171: PPUSH
46172: LD_VAR 0 8
46176: PPUSH
46177: CALL_OW 1
46181: ST_TO_ADDR
// end ;
46182: LD_VAR 0 5
46186: RET
// export function DangerAtRange ( unit , range ) ; begin
46187: LD_INT 0
46189: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46190: LD_ADDR_VAR 0 3
46194: PUSH
46195: LD_VAR 0 1
46199: PPUSH
46200: CALL_OW 255
46204: PPUSH
46205: LD_VAR 0 1
46209: PPUSH
46210: CALL_OW 250
46214: PPUSH
46215: LD_VAR 0 1
46219: PPUSH
46220: CALL_OW 251
46224: PPUSH
46225: LD_VAR 0 2
46229: PPUSH
46230: CALL 44484 0 4
46234: ST_TO_ADDR
// end ;
46235: LD_VAR 0 3
46239: RET
// export function DangerInArea ( side , area ) ; begin
46240: LD_INT 0
46242: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46243: LD_ADDR_VAR 0 3
46247: PUSH
46248: LD_VAR 0 2
46252: PPUSH
46253: LD_INT 81
46255: PUSH
46256: LD_VAR 0 1
46260: PUSH
46261: EMPTY
46262: LIST
46263: LIST
46264: PPUSH
46265: CALL_OW 70
46269: ST_TO_ADDR
// end ;
46270: LD_VAR 0 3
46274: RET
// export function IsExtension ( b ) ; begin
46275: LD_INT 0
46277: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46278: LD_ADDR_VAR 0 2
46282: PUSH
46283: LD_VAR 0 1
46287: PUSH
46288: LD_INT 23
46290: PUSH
46291: LD_INT 20
46293: PUSH
46294: LD_INT 22
46296: PUSH
46297: LD_INT 17
46299: PUSH
46300: LD_INT 24
46302: PUSH
46303: LD_INT 21
46305: PUSH
46306: LD_INT 19
46308: PUSH
46309: LD_INT 16
46311: PUSH
46312: LD_INT 25
46314: PUSH
46315: LD_INT 18
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: IN
46330: ST_TO_ADDR
// end ;
46331: LD_VAR 0 2
46335: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46336: LD_INT 0
46338: PPUSH
46339: PPUSH
46340: PPUSH
// result := [ ] ;
46341: LD_ADDR_VAR 0 4
46345: PUSH
46346: EMPTY
46347: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46348: LD_ADDR_VAR 0 5
46352: PUSH
46353: LD_VAR 0 2
46357: PPUSH
46358: LD_INT 21
46360: PUSH
46361: LD_INT 3
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PPUSH
46368: CALL_OW 70
46372: ST_TO_ADDR
// if not tmp then
46373: LD_VAR 0 5
46377: NOT
46378: IFFALSE 46382
// exit ;
46380: GO 46446
// if checkLink then
46382: LD_VAR 0 3
46386: IFFALSE 46436
// begin for i in tmp do
46388: LD_ADDR_VAR 0 6
46392: PUSH
46393: LD_VAR 0 5
46397: PUSH
46398: FOR_IN
46399: IFFALSE 46434
// if GetBase ( i ) <> base then
46401: LD_VAR 0 6
46405: PPUSH
46406: CALL_OW 274
46410: PUSH
46411: LD_VAR 0 1
46415: NONEQUAL
46416: IFFALSE 46432
// ComLinkToBase ( base , i ) ;
46418: LD_VAR 0 1
46422: PPUSH
46423: LD_VAR 0 6
46427: PPUSH
46428: CALL_OW 169
46432: GO 46398
46434: POP
46435: POP
// end ; result := tmp ;
46436: LD_ADDR_VAR 0 4
46440: PUSH
46441: LD_VAR 0 5
46445: ST_TO_ADDR
// end ;
46446: LD_VAR 0 4
46450: RET
// export function ComComplete ( units , b ) ; var i ; begin
46451: LD_INT 0
46453: PPUSH
46454: PPUSH
// if not units then
46455: LD_VAR 0 1
46459: NOT
46460: IFFALSE 46464
// exit ;
46462: GO 46554
// for i in units do
46464: LD_ADDR_VAR 0 4
46468: PUSH
46469: LD_VAR 0 1
46473: PUSH
46474: FOR_IN
46475: IFFALSE 46552
// if BuildingStatus ( b ) = bs_build then
46477: LD_VAR 0 2
46481: PPUSH
46482: CALL_OW 461
46486: PUSH
46487: LD_INT 1
46489: EQUAL
46490: IFFALSE 46550
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46492: LD_VAR 0 4
46496: PPUSH
46497: LD_STRING h
46499: PUSH
46500: LD_VAR 0 2
46504: PPUSH
46505: CALL_OW 250
46509: PUSH
46510: LD_VAR 0 2
46514: PPUSH
46515: CALL_OW 251
46519: PUSH
46520: LD_VAR 0 2
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 0
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: PUSH
46543: EMPTY
46544: LIST
46545: PPUSH
46546: CALL_OW 446
46550: GO 46474
46552: POP
46553: POP
// end ;
46554: LD_VAR 0 3
46558: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46559: LD_INT 0
46561: PPUSH
46562: PPUSH
46563: PPUSH
46564: PPUSH
46565: PPUSH
46566: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46567: LD_VAR 0 1
46571: NOT
46572: PUSH
46573: LD_VAR 0 1
46577: PPUSH
46578: CALL_OW 263
46582: PUSH
46583: LD_INT 2
46585: NONEQUAL
46586: OR
46587: IFFALSE 46591
// exit ;
46589: GO 46907
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46591: LD_ADDR_VAR 0 6
46595: PUSH
46596: LD_INT 22
46598: PUSH
46599: LD_VAR 0 1
46603: PPUSH
46604: CALL_OW 255
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: LD_INT 30
46618: PUSH
46619: LD_INT 36
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 34
46628: PUSH
46629: LD_INT 31
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: LIST
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PPUSH
46645: CALL_OW 69
46649: ST_TO_ADDR
// if not tmp then
46650: LD_VAR 0 6
46654: NOT
46655: IFFALSE 46659
// exit ;
46657: GO 46907
// result := [ ] ;
46659: LD_ADDR_VAR 0 2
46663: PUSH
46664: EMPTY
46665: ST_TO_ADDR
// for i in tmp do
46666: LD_ADDR_VAR 0 3
46670: PUSH
46671: LD_VAR 0 6
46675: PUSH
46676: FOR_IN
46677: IFFALSE 46748
// begin t := UnitsInside ( i ) ;
46679: LD_ADDR_VAR 0 4
46683: PUSH
46684: LD_VAR 0 3
46688: PPUSH
46689: CALL_OW 313
46693: ST_TO_ADDR
// if t then
46694: LD_VAR 0 4
46698: IFFALSE 46746
// for j in t do
46700: LD_ADDR_VAR 0 7
46704: PUSH
46705: LD_VAR 0 4
46709: PUSH
46710: FOR_IN
46711: IFFALSE 46744
// result := Replace ( result , result + 1 , j ) ;
46713: LD_ADDR_VAR 0 2
46717: PUSH
46718: LD_VAR 0 2
46722: PPUSH
46723: LD_VAR 0 2
46727: PUSH
46728: LD_INT 1
46730: PLUS
46731: PPUSH
46732: LD_VAR 0 7
46736: PPUSH
46737: CALL_OW 1
46741: ST_TO_ADDR
46742: GO 46710
46744: POP
46745: POP
// end ;
46746: GO 46676
46748: POP
46749: POP
// if not result then
46750: LD_VAR 0 2
46754: NOT
46755: IFFALSE 46759
// exit ;
46757: GO 46907
// mech := result [ 1 ] ;
46759: LD_ADDR_VAR 0 5
46763: PUSH
46764: LD_VAR 0 2
46768: PUSH
46769: LD_INT 1
46771: ARRAY
46772: ST_TO_ADDR
// if result > 1 then
46773: LD_VAR 0 2
46777: PUSH
46778: LD_INT 1
46780: GREATER
46781: IFFALSE 46893
// begin for i = 2 to result do
46783: LD_ADDR_VAR 0 3
46787: PUSH
46788: DOUBLE
46789: LD_INT 2
46791: DEC
46792: ST_TO_ADDR
46793: LD_VAR 0 2
46797: PUSH
46798: FOR_TO
46799: IFFALSE 46891
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46801: LD_ADDR_VAR 0 4
46805: PUSH
46806: LD_VAR 0 2
46810: PUSH
46811: LD_VAR 0 3
46815: ARRAY
46816: PPUSH
46817: LD_INT 3
46819: PPUSH
46820: CALL_OW 259
46824: PUSH
46825: LD_VAR 0 2
46829: PUSH
46830: LD_VAR 0 3
46834: ARRAY
46835: PPUSH
46836: CALL_OW 432
46840: MINUS
46841: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46842: LD_VAR 0 4
46846: PUSH
46847: LD_VAR 0 5
46851: PPUSH
46852: LD_INT 3
46854: PPUSH
46855: CALL_OW 259
46859: PUSH
46860: LD_VAR 0 5
46864: PPUSH
46865: CALL_OW 432
46869: MINUS
46870: GREATEREQUAL
46871: IFFALSE 46889
// mech := result [ i ] ;
46873: LD_ADDR_VAR 0 5
46877: PUSH
46878: LD_VAR 0 2
46882: PUSH
46883: LD_VAR 0 3
46887: ARRAY
46888: ST_TO_ADDR
// end ;
46889: GO 46798
46891: POP
46892: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46893: LD_VAR 0 1
46897: PPUSH
46898: LD_VAR 0 5
46902: PPUSH
46903: CALL_OW 135
// end ;
46907: LD_VAR 0 2
46911: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46912: LD_INT 0
46914: PPUSH
46915: PPUSH
46916: PPUSH
46917: PPUSH
46918: PPUSH
46919: PPUSH
46920: PPUSH
46921: PPUSH
46922: PPUSH
46923: PPUSH
46924: PPUSH
46925: PPUSH
46926: PPUSH
// result := [ ] ;
46927: LD_ADDR_VAR 0 7
46931: PUSH
46932: EMPTY
46933: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46934: LD_VAR 0 1
46938: PPUSH
46939: CALL_OW 266
46943: PUSH
46944: LD_INT 0
46946: PUSH
46947: LD_INT 1
46949: PUSH
46950: EMPTY
46951: LIST
46952: LIST
46953: IN
46954: NOT
46955: IFFALSE 46959
// exit ;
46957: GO 48593
// if name then
46959: LD_VAR 0 3
46963: IFFALSE 46979
// SetBName ( base_dep , name ) ;
46965: LD_VAR 0 1
46969: PPUSH
46970: LD_VAR 0 3
46974: PPUSH
46975: CALL_OW 500
// base := GetBase ( base_dep ) ;
46979: LD_ADDR_VAR 0 15
46983: PUSH
46984: LD_VAR 0 1
46988: PPUSH
46989: CALL_OW 274
46993: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46994: LD_ADDR_VAR 0 16
46998: PUSH
46999: LD_VAR 0 1
47003: PPUSH
47004: CALL_OW 255
47008: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47009: LD_ADDR_VAR 0 17
47013: PUSH
47014: LD_VAR 0 1
47018: PPUSH
47019: CALL_OW 248
47023: ST_TO_ADDR
// if sources then
47024: LD_VAR 0 5
47028: IFFALSE 47075
// for i = 1 to 3 do
47030: LD_ADDR_VAR 0 8
47034: PUSH
47035: DOUBLE
47036: LD_INT 1
47038: DEC
47039: ST_TO_ADDR
47040: LD_INT 3
47042: PUSH
47043: FOR_TO
47044: IFFALSE 47073
// AddResourceType ( base , i , sources [ i ] ) ;
47046: LD_VAR 0 15
47050: PPUSH
47051: LD_VAR 0 8
47055: PPUSH
47056: LD_VAR 0 5
47060: PUSH
47061: LD_VAR 0 8
47065: ARRAY
47066: PPUSH
47067: CALL_OW 276
47071: GO 47043
47073: POP
47074: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47075: LD_ADDR_VAR 0 18
47079: PUSH
47080: LD_VAR 0 15
47084: PPUSH
47085: LD_VAR 0 2
47089: PPUSH
47090: LD_INT 1
47092: PPUSH
47093: CALL 46336 0 3
47097: ST_TO_ADDR
// InitHc ;
47098: CALL_OW 19
// InitUc ;
47102: CALL_OW 18
// uc_side := side ;
47106: LD_ADDR_OWVAR 20
47110: PUSH
47111: LD_VAR 0 16
47115: ST_TO_ADDR
// uc_nation := nation ;
47116: LD_ADDR_OWVAR 21
47120: PUSH
47121: LD_VAR 0 17
47125: ST_TO_ADDR
// if buildings then
47126: LD_VAR 0 18
47130: IFFALSE 48452
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47132: LD_ADDR_VAR 0 19
47136: PUSH
47137: LD_VAR 0 18
47141: PPUSH
47142: LD_INT 2
47144: PUSH
47145: LD_INT 30
47147: PUSH
47148: LD_INT 29
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 30
47157: PUSH
47158: LD_INT 30
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: LIST
47169: PPUSH
47170: CALL_OW 72
47174: ST_TO_ADDR
// if tmp then
47175: LD_VAR 0 19
47179: IFFALSE 47227
// for i in tmp do
47181: LD_ADDR_VAR 0 8
47185: PUSH
47186: LD_VAR 0 19
47190: PUSH
47191: FOR_IN
47192: IFFALSE 47225
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47194: LD_VAR 0 8
47198: PPUSH
47199: CALL_OW 250
47203: PPUSH
47204: LD_VAR 0 8
47208: PPUSH
47209: CALL_OW 251
47213: PPUSH
47214: LD_VAR 0 16
47218: PPUSH
47219: CALL_OW 441
47223: GO 47191
47225: POP
47226: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47227: LD_VAR 0 18
47231: PPUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 30
47237: PUSH
47238: LD_INT 32
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 30
47247: PUSH
47248: LD_INT 33
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: LIST
47259: PPUSH
47260: CALL_OW 72
47264: IFFALSE 47352
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47266: LD_ADDR_VAR 0 8
47270: PUSH
47271: LD_VAR 0 18
47275: PPUSH
47276: LD_INT 2
47278: PUSH
47279: LD_INT 30
47281: PUSH
47282: LD_INT 32
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 30
47291: PUSH
47292: LD_INT 33
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: PPUSH
47304: CALL_OW 72
47308: PUSH
47309: FOR_IN
47310: IFFALSE 47350
// begin if not GetBWeapon ( i ) then
47312: LD_VAR 0 8
47316: PPUSH
47317: CALL_OW 269
47321: NOT
47322: IFFALSE 47348
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47324: LD_VAR 0 8
47328: PPUSH
47329: LD_VAR 0 8
47333: PPUSH
47334: LD_VAR 0 2
47338: PPUSH
47339: CALL 48598 0 2
47343: PPUSH
47344: CALL_OW 431
// end ;
47348: GO 47309
47350: POP
47351: POP
// end ; for i = 1 to personel do
47352: LD_ADDR_VAR 0 8
47356: PUSH
47357: DOUBLE
47358: LD_INT 1
47360: DEC
47361: ST_TO_ADDR
47362: LD_VAR 0 6
47366: PUSH
47367: FOR_TO
47368: IFFALSE 48432
// begin if i > 4 then
47370: LD_VAR 0 8
47374: PUSH
47375: LD_INT 4
47377: GREATER
47378: IFFALSE 47382
// break ;
47380: GO 48432
// case i of 1 :
47382: LD_VAR 0 8
47386: PUSH
47387: LD_INT 1
47389: DOUBLE
47390: EQUAL
47391: IFTRUE 47395
47393: GO 47475
47395: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47396: LD_ADDR_VAR 0 12
47400: PUSH
47401: LD_VAR 0 18
47405: PPUSH
47406: LD_INT 22
47408: PUSH
47409: LD_VAR 0 16
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 58
47420: PUSH
47421: EMPTY
47422: LIST
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: LD_INT 30
47429: PUSH
47430: LD_INT 32
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 30
47439: PUSH
47440: LD_INT 4
47442: PUSH
47443: EMPTY
47444: LIST
47445: LIST
47446: PUSH
47447: LD_INT 30
47449: PUSH
47450: LD_INT 5
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: PUSH
47463: EMPTY
47464: LIST
47465: LIST
47466: LIST
47467: PPUSH
47468: CALL_OW 72
47472: ST_TO_ADDR
47473: GO 47697
47475: LD_INT 2
47477: DOUBLE
47478: EQUAL
47479: IFTRUE 47483
47481: GO 47545
47483: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47484: LD_ADDR_VAR 0 12
47488: PUSH
47489: LD_VAR 0 18
47493: PPUSH
47494: LD_INT 22
47496: PUSH
47497: LD_VAR 0 16
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 2
47508: PUSH
47509: LD_INT 30
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 30
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PPUSH
47538: CALL_OW 72
47542: ST_TO_ADDR
47543: GO 47697
47545: LD_INT 3
47547: DOUBLE
47548: EQUAL
47549: IFTRUE 47553
47551: GO 47615
47553: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47554: LD_ADDR_VAR 0 12
47558: PUSH
47559: LD_VAR 0 18
47563: PPUSH
47564: LD_INT 22
47566: PUSH
47567: LD_VAR 0 16
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 2
47578: PUSH
47579: LD_INT 30
47581: PUSH
47582: LD_INT 2
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 30
47591: PUSH
47592: LD_INT 3
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: LIST
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PPUSH
47608: CALL_OW 72
47612: ST_TO_ADDR
47613: GO 47697
47615: LD_INT 4
47617: DOUBLE
47618: EQUAL
47619: IFTRUE 47623
47621: GO 47696
47623: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47624: LD_ADDR_VAR 0 12
47628: PUSH
47629: LD_VAR 0 18
47633: PPUSH
47634: LD_INT 22
47636: PUSH
47637: LD_VAR 0 16
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 2
47648: PUSH
47649: LD_INT 30
47651: PUSH
47652: LD_INT 6
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 30
47661: PUSH
47662: LD_INT 7
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 30
47671: PUSH
47672: LD_INT 8
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PPUSH
47689: CALL_OW 72
47693: ST_TO_ADDR
47694: GO 47697
47696: POP
// if i = 1 then
47697: LD_VAR 0 8
47701: PUSH
47702: LD_INT 1
47704: EQUAL
47705: IFFALSE 47816
// begin tmp := [ ] ;
47707: LD_ADDR_VAR 0 19
47711: PUSH
47712: EMPTY
47713: ST_TO_ADDR
// for j in f do
47714: LD_ADDR_VAR 0 9
47718: PUSH
47719: LD_VAR 0 12
47723: PUSH
47724: FOR_IN
47725: IFFALSE 47798
// if GetBType ( j ) = b_bunker then
47727: LD_VAR 0 9
47731: PPUSH
47732: CALL_OW 266
47736: PUSH
47737: LD_INT 32
47739: EQUAL
47740: IFFALSE 47767
// tmp := Insert ( tmp , 1 , j ) else
47742: LD_ADDR_VAR 0 19
47746: PUSH
47747: LD_VAR 0 19
47751: PPUSH
47752: LD_INT 1
47754: PPUSH
47755: LD_VAR 0 9
47759: PPUSH
47760: CALL_OW 2
47764: ST_TO_ADDR
47765: GO 47796
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47767: LD_ADDR_VAR 0 19
47771: PUSH
47772: LD_VAR 0 19
47776: PPUSH
47777: LD_VAR 0 19
47781: PUSH
47782: LD_INT 1
47784: PLUS
47785: PPUSH
47786: LD_VAR 0 9
47790: PPUSH
47791: CALL_OW 2
47795: ST_TO_ADDR
47796: GO 47724
47798: POP
47799: POP
// if tmp then
47800: LD_VAR 0 19
47804: IFFALSE 47816
// f := tmp ;
47806: LD_ADDR_VAR 0 12
47810: PUSH
47811: LD_VAR 0 19
47815: ST_TO_ADDR
// end ; x := personel [ i ] ;
47816: LD_ADDR_VAR 0 13
47820: PUSH
47821: LD_VAR 0 6
47825: PUSH
47826: LD_VAR 0 8
47830: ARRAY
47831: ST_TO_ADDR
// if x = - 1 then
47832: LD_VAR 0 13
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: EQUAL
47841: IFFALSE 48050
// begin for j in f do
47843: LD_ADDR_VAR 0 9
47847: PUSH
47848: LD_VAR 0 12
47852: PUSH
47853: FOR_IN
47854: IFFALSE 48046
// repeat InitHc ;
47856: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47860: LD_VAR 0 9
47864: PPUSH
47865: CALL_OW 266
47869: PUSH
47870: LD_INT 5
47872: EQUAL
47873: IFFALSE 47943
// begin if UnitsInside ( j ) < 3 then
47875: LD_VAR 0 9
47879: PPUSH
47880: CALL_OW 313
47884: PUSH
47885: LD_INT 3
47887: LESS
47888: IFFALSE 47924
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47890: LD_INT 0
47892: PPUSH
47893: LD_INT 5
47895: PUSH
47896: LD_INT 8
47898: PUSH
47899: LD_INT 9
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: LIST
47906: PUSH
47907: LD_VAR 0 17
47911: ARRAY
47912: PPUSH
47913: LD_VAR 0 4
47917: PPUSH
47918: CALL_OW 380
47922: GO 47941
// PrepareHuman ( false , i , skill ) ;
47924: LD_INT 0
47926: PPUSH
47927: LD_VAR 0 8
47931: PPUSH
47932: LD_VAR 0 4
47936: PPUSH
47937: CALL_OW 380
// end else
47941: GO 47960
// PrepareHuman ( false , i , skill ) ;
47943: LD_INT 0
47945: PPUSH
47946: LD_VAR 0 8
47950: PPUSH
47951: LD_VAR 0 4
47955: PPUSH
47956: CALL_OW 380
// un := CreateHuman ;
47960: LD_ADDR_VAR 0 14
47964: PUSH
47965: CALL_OW 44
47969: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47970: LD_ADDR_VAR 0 7
47974: PUSH
47975: LD_VAR 0 7
47979: PPUSH
47980: LD_INT 1
47982: PPUSH
47983: LD_VAR 0 14
47987: PPUSH
47988: CALL_OW 2
47992: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47993: LD_VAR 0 14
47997: PPUSH
47998: LD_VAR 0 9
48002: PPUSH
48003: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48007: LD_VAR 0 9
48011: PPUSH
48012: CALL_OW 313
48016: PUSH
48017: LD_INT 6
48019: EQUAL
48020: PUSH
48021: LD_VAR 0 9
48025: PPUSH
48026: CALL_OW 266
48030: PUSH
48031: LD_INT 32
48033: PUSH
48034: LD_INT 31
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: IN
48041: OR
48042: IFFALSE 47856
48044: GO 47853
48046: POP
48047: POP
// end else
48048: GO 48430
// for j = 1 to x do
48050: LD_ADDR_VAR 0 9
48054: PUSH
48055: DOUBLE
48056: LD_INT 1
48058: DEC
48059: ST_TO_ADDR
48060: LD_VAR 0 13
48064: PUSH
48065: FOR_TO
48066: IFFALSE 48428
// begin InitHc ;
48068: CALL_OW 19
// if not f then
48072: LD_VAR 0 12
48076: NOT
48077: IFFALSE 48166
// begin PrepareHuman ( false , i , skill ) ;
48079: LD_INT 0
48081: PPUSH
48082: LD_VAR 0 8
48086: PPUSH
48087: LD_VAR 0 4
48091: PPUSH
48092: CALL_OW 380
// un := CreateHuman ;
48096: LD_ADDR_VAR 0 14
48100: PUSH
48101: CALL_OW 44
48105: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48106: LD_ADDR_VAR 0 7
48110: PUSH
48111: LD_VAR 0 7
48115: PPUSH
48116: LD_INT 1
48118: PPUSH
48119: LD_VAR 0 14
48123: PPUSH
48124: CALL_OW 2
48128: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48129: LD_VAR 0 14
48133: PPUSH
48134: LD_VAR 0 1
48138: PPUSH
48139: CALL_OW 250
48143: PPUSH
48144: LD_VAR 0 1
48148: PPUSH
48149: CALL_OW 251
48153: PPUSH
48154: LD_INT 10
48156: PPUSH
48157: LD_INT 0
48159: PPUSH
48160: CALL_OW 50
// continue ;
48164: GO 48065
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48166: LD_VAR 0 12
48170: PUSH
48171: LD_INT 1
48173: ARRAY
48174: PPUSH
48175: CALL_OW 313
48179: PUSH
48180: LD_VAR 0 12
48184: PUSH
48185: LD_INT 1
48187: ARRAY
48188: PPUSH
48189: CALL_OW 266
48193: PUSH
48194: LD_INT 32
48196: PUSH
48197: LD_INT 31
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: IN
48204: AND
48205: PUSH
48206: LD_VAR 0 12
48210: PUSH
48211: LD_INT 1
48213: ARRAY
48214: PPUSH
48215: CALL_OW 313
48219: PUSH
48220: LD_INT 6
48222: EQUAL
48223: OR
48224: IFFALSE 48244
// f := Delete ( f , 1 ) ;
48226: LD_ADDR_VAR 0 12
48230: PUSH
48231: LD_VAR 0 12
48235: PPUSH
48236: LD_INT 1
48238: PPUSH
48239: CALL_OW 3
48243: ST_TO_ADDR
// if not f then
48244: LD_VAR 0 12
48248: NOT
48249: IFFALSE 48267
// begin x := x + 2 ;
48251: LD_ADDR_VAR 0 13
48255: PUSH
48256: LD_VAR 0 13
48260: PUSH
48261: LD_INT 2
48263: PLUS
48264: ST_TO_ADDR
// continue ;
48265: GO 48065
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48267: LD_VAR 0 12
48271: PUSH
48272: LD_INT 1
48274: ARRAY
48275: PPUSH
48276: CALL_OW 266
48280: PUSH
48281: LD_INT 5
48283: EQUAL
48284: IFFALSE 48358
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48286: LD_VAR 0 12
48290: PUSH
48291: LD_INT 1
48293: ARRAY
48294: PPUSH
48295: CALL_OW 313
48299: PUSH
48300: LD_INT 3
48302: LESS
48303: IFFALSE 48339
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48305: LD_INT 0
48307: PPUSH
48308: LD_INT 5
48310: PUSH
48311: LD_INT 8
48313: PUSH
48314: LD_INT 9
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: PUSH
48322: LD_VAR 0 17
48326: ARRAY
48327: PPUSH
48328: LD_VAR 0 4
48332: PPUSH
48333: CALL_OW 380
48337: GO 48356
// PrepareHuman ( false , i , skill ) ;
48339: LD_INT 0
48341: PPUSH
48342: LD_VAR 0 8
48346: PPUSH
48347: LD_VAR 0 4
48351: PPUSH
48352: CALL_OW 380
// end else
48356: GO 48375
// PrepareHuman ( false , i , skill ) ;
48358: LD_INT 0
48360: PPUSH
48361: LD_VAR 0 8
48365: PPUSH
48366: LD_VAR 0 4
48370: PPUSH
48371: CALL_OW 380
// un := CreateHuman ;
48375: LD_ADDR_VAR 0 14
48379: PUSH
48380: CALL_OW 44
48384: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48385: LD_ADDR_VAR 0 7
48389: PUSH
48390: LD_VAR 0 7
48394: PPUSH
48395: LD_INT 1
48397: PPUSH
48398: LD_VAR 0 14
48402: PPUSH
48403: CALL_OW 2
48407: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48408: LD_VAR 0 14
48412: PPUSH
48413: LD_VAR 0 12
48417: PUSH
48418: LD_INT 1
48420: ARRAY
48421: PPUSH
48422: CALL_OW 52
// end ;
48426: GO 48065
48428: POP
48429: POP
// end ;
48430: GO 47367
48432: POP
48433: POP
// result := result ^ buildings ;
48434: LD_ADDR_VAR 0 7
48438: PUSH
48439: LD_VAR 0 7
48443: PUSH
48444: LD_VAR 0 18
48448: ADD
48449: ST_TO_ADDR
// end else
48450: GO 48593
// begin for i = 1 to personel do
48452: LD_ADDR_VAR 0 8
48456: PUSH
48457: DOUBLE
48458: LD_INT 1
48460: DEC
48461: ST_TO_ADDR
48462: LD_VAR 0 6
48466: PUSH
48467: FOR_TO
48468: IFFALSE 48591
// begin if i > 4 then
48470: LD_VAR 0 8
48474: PUSH
48475: LD_INT 4
48477: GREATER
48478: IFFALSE 48482
// break ;
48480: GO 48591
// x := personel [ i ] ;
48482: LD_ADDR_VAR 0 13
48486: PUSH
48487: LD_VAR 0 6
48491: PUSH
48492: LD_VAR 0 8
48496: ARRAY
48497: ST_TO_ADDR
// if x = - 1 then
48498: LD_VAR 0 13
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: EQUAL
48507: IFFALSE 48511
// continue ;
48509: GO 48467
// PrepareHuman ( false , i , skill ) ;
48511: LD_INT 0
48513: PPUSH
48514: LD_VAR 0 8
48518: PPUSH
48519: LD_VAR 0 4
48523: PPUSH
48524: CALL_OW 380
// un := CreateHuman ;
48528: LD_ADDR_VAR 0 14
48532: PUSH
48533: CALL_OW 44
48537: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48538: LD_VAR 0 14
48542: PPUSH
48543: LD_VAR 0 1
48547: PPUSH
48548: CALL_OW 250
48552: PPUSH
48553: LD_VAR 0 1
48557: PPUSH
48558: CALL_OW 251
48562: PPUSH
48563: LD_INT 10
48565: PPUSH
48566: LD_INT 0
48568: PPUSH
48569: CALL_OW 50
// result := result ^ un ;
48573: LD_ADDR_VAR 0 7
48577: PUSH
48578: LD_VAR 0 7
48582: PUSH
48583: LD_VAR 0 14
48587: ADD
48588: ST_TO_ADDR
// end ;
48589: GO 48467
48591: POP
48592: POP
// end ; end ;
48593: LD_VAR 0 7
48597: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48598: LD_INT 0
48600: PPUSH
48601: PPUSH
48602: PPUSH
48603: PPUSH
48604: PPUSH
48605: PPUSH
48606: PPUSH
48607: PPUSH
48608: PPUSH
48609: PPUSH
48610: PPUSH
48611: PPUSH
48612: PPUSH
48613: PPUSH
48614: PPUSH
48615: PPUSH
// result := false ;
48616: LD_ADDR_VAR 0 3
48620: PUSH
48621: LD_INT 0
48623: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48624: LD_VAR 0 1
48628: NOT
48629: PUSH
48630: LD_VAR 0 1
48634: PPUSH
48635: CALL_OW 266
48639: PUSH
48640: LD_INT 32
48642: PUSH
48643: LD_INT 33
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: IN
48650: NOT
48651: OR
48652: IFFALSE 48656
// exit ;
48654: GO 49765
// nat := GetNation ( tower ) ;
48656: LD_ADDR_VAR 0 12
48660: PUSH
48661: LD_VAR 0 1
48665: PPUSH
48666: CALL_OW 248
48670: ST_TO_ADDR
// side := GetSide ( tower ) ;
48671: LD_ADDR_VAR 0 16
48675: PUSH
48676: LD_VAR 0 1
48680: PPUSH
48681: CALL_OW 255
48685: ST_TO_ADDR
// x := GetX ( tower ) ;
48686: LD_ADDR_VAR 0 10
48690: PUSH
48691: LD_VAR 0 1
48695: PPUSH
48696: CALL_OW 250
48700: ST_TO_ADDR
// y := GetY ( tower ) ;
48701: LD_ADDR_VAR 0 11
48705: PUSH
48706: LD_VAR 0 1
48710: PPUSH
48711: CALL_OW 251
48715: ST_TO_ADDR
// if not x or not y then
48716: LD_VAR 0 10
48720: NOT
48721: PUSH
48722: LD_VAR 0 11
48726: NOT
48727: OR
48728: IFFALSE 48732
// exit ;
48730: GO 49765
// weapon := 0 ;
48732: LD_ADDR_VAR 0 18
48736: PUSH
48737: LD_INT 0
48739: ST_TO_ADDR
// fac_list := [ ] ;
48740: LD_ADDR_VAR 0 17
48744: PUSH
48745: EMPTY
48746: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48747: LD_ADDR_VAR 0 6
48751: PUSH
48752: LD_VAR 0 1
48756: PPUSH
48757: CALL_OW 274
48761: PPUSH
48762: LD_VAR 0 2
48766: PPUSH
48767: LD_INT 0
48769: PPUSH
48770: CALL 46336 0 3
48774: PPUSH
48775: LD_INT 30
48777: PUSH
48778: LD_INT 3
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PPUSH
48785: CALL_OW 72
48789: ST_TO_ADDR
// if not factories then
48790: LD_VAR 0 6
48794: NOT
48795: IFFALSE 48799
// exit ;
48797: GO 49765
// for i in factories do
48799: LD_ADDR_VAR 0 8
48803: PUSH
48804: LD_VAR 0 6
48808: PUSH
48809: FOR_IN
48810: IFFALSE 48835
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48812: LD_ADDR_VAR 0 17
48816: PUSH
48817: LD_VAR 0 17
48821: PUSH
48822: LD_VAR 0 8
48826: PPUSH
48827: CALL_OW 478
48831: UNION
48832: ST_TO_ADDR
48833: GO 48809
48835: POP
48836: POP
// if not fac_list then
48837: LD_VAR 0 17
48841: NOT
48842: IFFALSE 48846
// exit ;
48844: GO 49765
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48846: LD_ADDR_VAR 0 5
48850: PUSH
48851: LD_INT 4
48853: PUSH
48854: LD_INT 5
48856: PUSH
48857: LD_INT 9
48859: PUSH
48860: LD_INT 10
48862: PUSH
48863: LD_INT 6
48865: PUSH
48866: LD_INT 7
48868: PUSH
48869: LD_INT 11
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: PUSH
48881: LD_INT 27
48883: PUSH
48884: LD_INT 28
48886: PUSH
48887: LD_INT 26
48889: PUSH
48890: LD_INT 30
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 43
48901: PUSH
48902: LD_INT 44
48904: PUSH
48905: LD_INT 46
48907: PUSH
48908: LD_INT 45
48910: PUSH
48911: LD_INT 47
48913: PUSH
48914: LD_INT 49
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: PUSH
48925: EMPTY
48926: LIST
48927: LIST
48928: LIST
48929: PUSH
48930: LD_VAR 0 12
48934: ARRAY
48935: ST_TO_ADDR
// list := list isect fac_list ;
48936: LD_ADDR_VAR 0 5
48940: PUSH
48941: LD_VAR 0 5
48945: PUSH
48946: LD_VAR 0 17
48950: ISECT
48951: ST_TO_ADDR
// if not list then
48952: LD_VAR 0 5
48956: NOT
48957: IFFALSE 48961
// exit ;
48959: GO 49765
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48961: LD_VAR 0 12
48965: PUSH
48966: LD_INT 3
48968: EQUAL
48969: PUSH
48970: LD_INT 49
48972: PUSH
48973: LD_VAR 0 5
48977: IN
48978: AND
48979: PUSH
48980: LD_INT 31
48982: PPUSH
48983: LD_VAR 0 16
48987: PPUSH
48988: CALL_OW 321
48992: PUSH
48993: LD_INT 2
48995: EQUAL
48996: AND
48997: IFFALSE 49057
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48999: LD_INT 22
49001: PUSH
49002: LD_VAR 0 16
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 35
49013: PUSH
49014: LD_INT 49
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 91
49023: PUSH
49024: LD_VAR 0 1
49028: PUSH
49029: LD_INT 10
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: LIST
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: LIST
49041: PPUSH
49042: CALL_OW 69
49046: NOT
49047: IFFALSE 49057
// weapon := ru_time_lapser ;
49049: LD_ADDR_VAR 0 18
49053: PUSH
49054: LD_INT 49
49056: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49057: LD_VAR 0 12
49061: PUSH
49062: LD_INT 1
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: IN
49072: PUSH
49073: LD_INT 11
49075: PUSH
49076: LD_VAR 0 5
49080: IN
49081: PUSH
49082: LD_INT 30
49084: PUSH
49085: LD_VAR 0 5
49089: IN
49090: OR
49091: AND
49092: PUSH
49093: LD_INT 6
49095: PPUSH
49096: LD_VAR 0 16
49100: PPUSH
49101: CALL_OW 321
49105: PUSH
49106: LD_INT 2
49108: EQUAL
49109: AND
49110: IFFALSE 49275
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49112: LD_INT 22
49114: PUSH
49115: LD_VAR 0 16
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: LD_INT 35
49129: PUSH
49130: LD_INT 11
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 35
49139: PUSH
49140: LD_INT 30
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 91
49154: PUSH
49155: LD_VAR 0 1
49159: PUSH
49160: LD_INT 18
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: LIST
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: LIST
49172: PPUSH
49173: CALL_OW 69
49177: NOT
49178: PUSH
49179: LD_INT 22
49181: PUSH
49182: LD_VAR 0 16
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 2
49193: PUSH
49194: LD_INT 30
49196: PUSH
49197: LD_INT 32
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 30
49206: PUSH
49207: LD_INT 33
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 91
49221: PUSH
49222: LD_VAR 0 1
49226: PUSH
49227: LD_INT 12
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: LIST
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: LIST
49239: PUSH
49240: EMPTY
49241: LIST
49242: PPUSH
49243: CALL_OW 69
49247: PUSH
49248: LD_INT 2
49250: GREATER
49251: AND
49252: IFFALSE 49275
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49254: LD_ADDR_VAR 0 18
49258: PUSH
49259: LD_INT 11
49261: PUSH
49262: LD_INT 30
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_VAR 0 12
49273: ARRAY
49274: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49275: LD_VAR 0 18
49279: NOT
49280: PUSH
49281: LD_INT 40
49283: PPUSH
49284: LD_VAR 0 16
49288: PPUSH
49289: CALL_OW 321
49293: PUSH
49294: LD_INT 2
49296: EQUAL
49297: AND
49298: PUSH
49299: LD_INT 7
49301: PUSH
49302: LD_VAR 0 5
49306: IN
49307: PUSH
49308: LD_INT 28
49310: PUSH
49311: LD_VAR 0 5
49315: IN
49316: OR
49317: PUSH
49318: LD_INT 45
49320: PUSH
49321: LD_VAR 0 5
49325: IN
49326: OR
49327: AND
49328: IFFALSE 49582
// begin hex := GetHexInfo ( x , y ) ;
49330: LD_ADDR_VAR 0 4
49334: PUSH
49335: LD_VAR 0 10
49339: PPUSH
49340: LD_VAR 0 11
49344: PPUSH
49345: CALL_OW 546
49349: ST_TO_ADDR
// if hex [ 1 ] then
49350: LD_VAR 0 4
49354: PUSH
49355: LD_INT 1
49357: ARRAY
49358: IFFALSE 49362
// exit ;
49360: GO 49765
// height := hex [ 2 ] ;
49362: LD_ADDR_VAR 0 15
49366: PUSH
49367: LD_VAR 0 4
49371: PUSH
49372: LD_INT 2
49374: ARRAY
49375: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49376: LD_ADDR_VAR 0 14
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 2
49386: PUSH
49387: LD_INT 3
49389: PUSH
49390: LD_INT 5
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: ST_TO_ADDR
// for i in tmp do
49399: LD_ADDR_VAR 0 8
49403: PUSH
49404: LD_VAR 0 14
49408: PUSH
49409: FOR_IN
49410: IFFALSE 49580
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49412: LD_ADDR_VAR 0 9
49416: PUSH
49417: LD_VAR 0 10
49421: PPUSH
49422: LD_VAR 0 8
49426: PPUSH
49427: LD_INT 5
49429: PPUSH
49430: CALL_OW 272
49434: PUSH
49435: LD_VAR 0 11
49439: PPUSH
49440: LD_VAR 0 8
49444: PPUSH
49445: LD_INT 5
49447: PPUSH
49448: CALL_OW 273
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49457: LD_VAR 0 9
49461: PUSH
49462: LD_INT 1
49464: ARRAY
49465: PPUSH
49466: LD_VAR 0 9
49470: PUSH
49471: LD_INT 2
49473: ARRAY
49474: PPUSH
49475: CALL_OW 488
49479: IFFALSE 49578
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49481: LD_ADDR_VAR 0 4
49485: PUSH
49486: LD_VAR 0 9
49490: PUSH
49491: LD_INT 1
49493: ARRAY
49494: PPUSH
49495: LD_VAR 0 9
49499: PUSH
49500: LD_INT 2
49502: ARRAY
49503: PPUSH
49504: CALL_OW 546
49508: ST_TO_ADDR
// if hex [ 1 ] then
49509: LD_VAR 0 4
49513: PUSH
49514: LD_INT 1
49516: ARRAY
49517: IFFALSE 49521
// continue ;
49519: GO 49409
// h := hex [ 2 ] ;
49521: LD_ADDR_VAR 0 13
49525: PUSH
49526: LD_VAR 0 4
49530: PUSH
49531: LD_INT 2
49533: ARRAY
49534: ST_TO_ADDR
// if h + 7 < height then
49535: LD_VAR 0 13
49539: PUSH
49540: LD_INT 7
49542: PLUS
49543: PUSH
49544: LD_VAR 0 15
49548: LESS
49549: IFFALSE 49578
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49551: LD_ADDR_VAR 0 18
49555: PUSH
49556: LD_INT 7
49558: PUSH
49559: LD_INT 28
49561: PUSH
49562: LD_INT 45
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: LIST
49569: PUSH
49570: LD_VAR 0 12
49574: ARRAY
49575: ST_TO_ADDR
// break ;
49576: GO 49580
// end ; end ; end ;
49578: GO 49409
49580: POP
49581: POP
// end ; if not weapon then
49582: LD_VAR 0 18
49586: NOT
49587: IFFALSE 49647
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49589: LD_ADDR_VAR 0 5
49593: PUSH
49594: LD_VAR 0 5
49598: PUSH
49599: LD_INT 11
49601: PUSH
49602: LD_INT 30
49604: PUSH
49605: LD_INT 49
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: LIST
49612: DIFF
49613: ST_TO_ADDR
// if not list then
49614: LD_VAR 0 5
49618: NOT
49619: IFFALSE 49623
// exit ;
49621: GO 49765
// weapon := list [ rand ( 1 , list ) ] ;
49623: LD_ADDR_VAR 0 18
49627: PUSH
49628: LD_VAR 0 5
49632: PUSH
49633: LD_INT 1
49635: PPUSH
49636: LD_VAR 0 5
49640: PPUSH
49641: CALL_OW 12
49645: ARRAY
49646: ST_TO_ADDR
// end ; if weapon then
49647: LD_VAR 0 18
49651: IFFALSE 49765
// begin tmp := CostOfWeapon ( weapon ) ;
49653: LD_ADDR_VAR 0 14
49657: PUSH
49658: LD_VAR 0 18
49662: PPUSH
49663: CALL_OW 451
49667: ST_TO_ADDR
// j := GetBase ( tower ) ;
49668: LD_ADDR_VAR 0 9
49672: PUSH
49673: LD_VAR 0 1
49677: PPUSH
49678: CALL_OW 274
49682: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49683: LD_VAR 0 9
49687: PPUSH
49688: LD_INT 1
49690: PPUSH
49691: CALL_OW 275
49695: PUSH
49696: LD_VAR 0 14
49700: PUSH
49701: LD_INT 1
49703: ARRAY
49704: GREATEREQUAL
49705: PUSH
49706: LD_VAR 0 9
49710: PPUSH
49711: LD_INT 2
49713: PPUSH
49714: CALL_OW 275
49718: PUSH
49719: LD_VAR 0 14
49723: PUSH
49724: LD_INT 2
49726: ARRAY
49727: GREATEREQUAL
49728: AND
49729: PUSH
49730: LD_VAR 0 9
49734: PPUSH
49735: LD_INT 3
49737: PPUSH
49738: CALL_OW 275
49742: PUSH
49743: LD_VAR 0 14
49747: PUSH
49748: LD_INT 3
49750: ARRAY
49751: GREATEREQUAL
49752: AND
49753: IFFALSE 49765
// result := weapon ;
49755: LD_ADDR_VAR 0 3
49759: PUSH
49760: LD_VAR 0 18
49764: ST_TO_ADDR
// end ; end ;
49765: LD_VAR 0 3
49769: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49770: LD_INT 0
49772: PPUSH
49773: PPUSH
// result := true ;
49774: LD_ADDR_VAR 0 3
49778: PUSH
49779: LD_INT 1
49781: ST_TO_ADDR
// if array1 = array2 then
49782: LD_VAR 0 1
49786: PUSH
49787: LD_VAR 0 2
49791: EQUAL
49792: IFFALSE 49852
// begin for i = 1 to array1 do
49794: LD_ADDR_VAR 0 4
49798: PUSH
49799: DOUBLE
49800: LD_INT 1
49802: DEC
49803: ST_TO_ADDR
49804: LD_VAR 0 1
49808: PUSH
49809: FOR_TO
49810: IFFALSE 49848
// if array1 [ i ] <> array2 [ i ] then
49812: LD_VAR 0 1
49816: PUSH
49817: LD_VAR 0 4
49821: ARRAY
49822: PUSH
49823: LD_VAR 0 2
49827: PUSH
49828: LD_VAR 0 4
49832: ARRAY
49833: NONEQUAL
49834: IFFALSE 49846
// begin result := false ;
49836: LD_ADDR_VAR 0 3
49840: PUSH
49841: LD_INT 0
49843: ST_TO_ADDR
// break ;
49844: GO 49848
// end ;
49846: GO 49809
49848: POP
49849: POP
// end else
49850: GO 49860
// result := false ;
49852: LD_ADDR_VAR 0 3
49856: PUSH
49857: LD_INT 0
49859: ST_TO_ADDR
// end ;
49860: LD_VAR 0 3
49864: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49865: LD_INT 0
49867: PPUSH
49868: PPUSH
// if not array1 or not array2 then
49869: LD_VAR 0 1
49873: NOT
49874: PUSH
49875: LD_VAR 0 2
49879: NOT
49880: OR
49881: IFFALSE 49885
// exit ;
49883: GO 49949
// result := true ;
49885: LD_ADDR_VAR 0 3
49889: PUSH
49890: LD_INT 1
49892: ST_TO_ADDR
// for i = 1 to array1 do
49893: LD_ADDR_VAR 0 4
49897: PUSH
49898: DOUBLE
49899: LD_INT 1
49901: DEC
49902: ST_TO_ADDR
49903: LD_VAR 0 1
49907: PUSH
49908: FOR_TO
49909: IFFALSE 49947
// if array1 [ i ] <> array2 [ i ] then
49911: LD_VAR 0 1
49915: PUSH
49916: LD_VAR 0 4
49920: ARRAY
49921: PUSH
49922: LD_VAR 0 2
49926: PUSH
49927: LD_VAR 0 4
49931: ARRAY
49932: NONEQUAL
49933: IFFALSE 49945
// begin result := false ;
49935: LD_ADDR_VAR 0 3
49939: PUSH
49940: LD_INT 0
49942: ST_TO_ADDR
// break ;
49943: GO 49947
// end ;
49945: GO 49908
49947: POP
49948: POP
// end ;
49949: LD_VAR 0 3
49953: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49954: LD_INT 0
49956: PPUSH
49957: PPUSH
49958: PPUSH
// pom := GetBase ( fac ) ;
49959: LD_ADDR_VAR 0 5
49963: PUSH
49964: LD_VAR 0 1
49968: PPUSH
49969: CALL_OW 274
49973: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49974: LD_ADDR_VAR 0 4
49978: PUSH
49979: LD_VAR 0 2
49983: PUSH
49984: LD_INT 1
49986: ARRAY
49987: PPUSH
49988: LD_VAR 0 2
49992: PUSH
49993: LD_INT 2
49995: ARRAY
49996: PPUSH
49997: LD_VAR 0 2
50001: PUSH
50002: LD_INT 3
50004: ARRAY
50005: PPUSH
50006: LD_VAR 0 2
50010: PUSH
50011: LD_INT 4
50013: ARRAY
50014: PPUSH
50015: CALL_OW 449
50019: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50020: LD_ADDR_VAR 0 3
50024: PUSH
50025: LD_VAR 0 5
50029: PPUSH
50030: LD_INT 1
50032: PPUSH
50033: CALL_OW 275
50037: PUSH
50038: LD_VAR 0 4
50042: PUSH
50043: LD_INT 1
50045: ARRAY
50046: GREATEREQUAL
50047: PUSH
50048: LD_VAR 0 5
50052: PPUSH
50053: LD_INT 2
50055: PPUSH
50056: CALL_OW 275
50060: PUSH
50061: LD_VAR 0 4
50065: PUSH
50066: LD_INT 2
50068: ARRAY
50069: GREATEREQUAL
50070: AND
50071: PUSH
50072: LD_VAR 0 5
50076: PPUSH
50077: LD_INT 3
50079: PPUSH
50080: CALL_OW 275
50084: PUSH
50085: LD_VAR 0 4
50089: PUSH
50090: LD_INT 3
50092: ARRAY
50093: GREATEREQUAL
50094: AND
50095: ST_TO_ADDR
// end ;
50096: LD_VAR 0 3
50100: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50101: LD_INT 0
50103: PPUSH
50104: PPUSH
50105: PPUSH
50106: PPUSH
// pom := GetBase ( building ) ;
50107: LD_ADDR_VAR 0 3
50111: PUSH
50112: LD_VAR 0 1
50116: PPUSH
50117: CALL_OW 274
50121: ST_TO_ADDR
// if not pom then
50122: LD_VAR 0 3
50126: NOT
50127: IFFALSE 50131
// exit ;
50129: GO 50301
// btype := GetBType ( building ) ;
50131: LD_ADDR_VAR 0 5
50135: PUSH
50136: LD_VAR 0 1
50140: PPUSH
50141: CALL_OW 266
50145: ST_TO_ADDR
// if btype = b_armoury then
50146: LD_VAR 0 5
50150: PUSH
50151: LD_INT 4
50153: EQUAL
50154: IFFALSE 50164
// btype := b_barracks ;
50156: LD_ADDR_VAR 0 5
50160: PUSH
50161: LD_INT 5
50163: ST_TO_ADDR
// if btype = b_depot then
50164: LD_VAR 0 5
50168: PUSH
50169: LD_INT 0
50171: EQUAL
50172: IFFALSE 50182
// btype := b_warehouse ;
50174: LD_ADDR_VAR 0 5
50178: PUSH
50179: LD_INT 1
50181: ST_TO_ADDR
// if btype = b_workshop then
50182: LD_VAR 0 5
50186: PUSH
50187: LD_INT 2
50189: EQUAL
50190: IFFALSE 50200
// btype := b_factory ;
50192: LD_ADDR_VAR 0 5
50196: PUSH
50197: LD_INT 3
50199: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50200: LD_ADDR_VAR 0 4
50204: PUSH
50205: LD_VAR 0 5
50209: PPUSH
50210: LD_VAR 0 1
50214: PPUSH
50215: CALL_OW 248
50219: PPUSH
50220: CALL_OW 450
50224: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50225: LD_ADDR_VAR 0 2
50229: PUSH
50230: LD_VAR 0 3
50234: PPUSH
50235: LD_INT 1
50237: PPUSH
50238: CALL_OW 275
50242: PUSH
50243: LD_VAR 0 4
50247: PUSH
50248: LD_INT 1
50250: ARRAY
50251: GREATEREQUAL
50252: PUSH
50253: LD_VAR 0 3
50257: PPUSH
50258: LD_INT 2
50260: PPUSH
50261: CALL_OW 275
50265: PUSH
50266: LD_VAR 0 4
50270: PUSH
50271: LD_INT 2
50273: ARRAY
50274: GREATEREQUAL
50275: AND
50276: PUSH
50277: LD_VAR 0 3
50281: PPUSH
50282: LD_INT 3
50284: PPUSH
50285: CALL_OW 275
50289: PUSH
50290: LD_VAR 0 4
50294: PUSH
50295: LD_INT 3
50297: ARRAY
50298: GREATEREQUAL
50299: AND
50300: ST_TO_ADDR
// end ;
50301: LD_VAR 0 2
50305: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50306: LD_INT 0
50308: PPUSH
50309: PPUSH
50310: PPUSH
// pom := GetBase ( building ) ;
50311: LD_ADDR_VAR 0 4
50315: PUSH
50316: LD_VAR 0 1
50320: PPUSH
50321: CALL_OW 274
50325: ST_TO_ADDR
// if not pom then
50326: LD_VAR 0 4
50330: NOT
50331: IFFALSE 50335
// exit ;
50333: GO 50436
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50335: LD_ADDR_VAR 0 5
50339: PUSH
50340: LD_VAR 0 2
50344: PPUSH
50345: LD_VAR 0 1
50349: PPUSH
50350: CALL_OW 248
50354: PPUSH
50355: CALL_OW 450
50359: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50360: LD_ADDR_VAR 0 3
50364: PUSH
50365: LD_VAR 0 4
50369: PPUSH
50370: LD_INT 1
50372: PPUSH
50373: CALL_OW 275
50377: PUSH
50378: LD_VAR 0 5
50382: PUSH
50383: LD_INT 1
50385: ARRAY
50386: GREATEREQUAL
50387: PUSH
50388: LD_VAR 0 4
50392: PPUSH
50393: LD_INT 2
50395: PPUSH
50396: CALL_OW 275
50400: PUSH
50401: LD_VAR 0 5
50405: PUSH
50406: LD_INT 2
50408: ARRAY
50409: GREATEREQUAL
50410: AND
50411: PUSH
50412: LD_VAR 0 4
50416: PPUSH
50417: LD_INT 3
50419: PPUSH
50420: CALL_OW 275
50424: PUSH
50425: LD_VAR 0 5
50429: PUSH
50430: LD_INT 3
50432: ARRAY
50433: GREATEREQUAL
50434: AND
50435: ST_TO_ADDR
// end ;
50436: LD_VAR 0 3
50440: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50441: LD_INT 0
50443: PPUSH
50444: PPUSH
50445: PPUSH
50446: PPUSH
50447: PPUSH
50448: PPUSH
50449: PPUSH
50450: PPUSH
50451: PPUSH
50452: PPUSH
50453: PPUSH
// result := false ;
50454: LD_ADDR_VAR 0 8
50458: PUSH
50459: LD_INT 0
50461: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50462: LD_VAR 0 5
50466: NOT
50467: PUSH
50468: LD_VAR 0 1
50472: NOT
50473: OR
50474: PUSH
50475: LD_VAR 0 2
50479: NOT
50480: OR
50481: PUSH
50482: LD_VAR 0 3
50486: NOT
50487: OR
50488: IFFALSE 50492
// exit ;
50490: GO 51306
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50492: LD_ADDR_VAR 0 14
50496: PUSH
50497: LD_VAR 0 1
50501: PPUSH
50502: LD_VAR 0 2
50506: PPUSH
50507: LD_VAR 0 3
50511: PPUSH
50512: LD_VAR 0 4
50516: PPUSH
50517: LD_VAR 0 5
50521: PUSH
50522: LD_INT 1
50524: ARRAY
50525: PPUSH
50526: CALL_OW 248
50530: PPUSH
50531: LD_INT 0
50533: PPUSH
50534: CALL 52543 0 6
50538: ST_TO_ADDR
// if not hexes then
50539: LD_VAR 0 14
50543: NOT
50544: IFFALSE 50548
// exit ;
50546: GO 51306
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50548: LD_ADDR_VAR 0 17
50552: PUSH
50553: LD_VAR 0 5
50557: PPUSH
50558: LD_INT 22
50560: PUSH
50561: LD_VAR 0 13
50565: PPUSH
50566: CALL_OW 255
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: LD_INT 30
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 30
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: LIST
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PPUSH
50607: CALL_OW 72
50611: ST_TO_ADDR
// for i = 1 to hexes do
50612: LD_ADDR_VAR 0 9
50616: PUSH
50617: DOUBLE
50618: LD_INT 1
50620: DEC
50621: ST_TO_ADDR
50622: LD_VAR 0 14
50626: PUSH
50627: FOR_TO
50628: IFFALSE 51304
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50630: LD_ADDR_VAR 0 13
50634: PUSH
50635: LD_VAR 0 14
50639: PUSH
50640: LD_VAR 0 9
50644: ARRAY
50645: PUSH
50646: LD_INT 1
50648: ARRAY
50649: PPUSH
50650: LD_VAR 0 14
50654: PUSH
50655: LD_VAR 0 9
50659: ARRAY
50660: PUSH
50661: LD_INT 2
50663: ARRAY
50664: PPUSH
50665: CALL_OW 428
50669: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50670: LD_VAR 0 14
50674: PUSH
50675: LD_VAR 0 9
50679: ARRAY
50680: PUSH
50681: LD_INT 1
50683: ARRAY
50684: PPUSH
50685: LD_VAR 0 14
50689: PUSH
50690: LD_VAR 0 9
50694: ARRAY
50695: PUSH
50696: LD_INT 2
50698: ARRAY
50699: PPUSH
50700: CALL_OW 351
50704: PUSH
50705: LD_VAR 0 14
50709: PUSH
50710: LD_VAR 0 9
50714: ARRAY
50715: PUSH
50716: LD_INT 1
50718: ARRAY
50719: PPUSH
50720: LD_VAR 0 14
50724: PUSH
50725: LD_VAR 0 9
50729: ARRAY
50730: PUSH
50731: LD_INT 2
50733: ARRAY
50734: PPUSH
50735: CALL_OW 488
50739: NOT
50740: OR
50741: PUSH
50742: LD_VAR 0 13
50746: PPUSH
50747: CALL_OW 247
50751: PUSH
50752: LD_INT 3
50754: EQUAL
50755: OR
50756: IFFALSE 50762
// exit ;
50758: POP
50759: POP
50760: GO 51306
// if not tmp then
50762: LD_VAR 0 13
50766: NOT
50767: IFFALSE 50771
// continue ;
50769: GO 50627
// result := true ;
50771: LD_ADDR_VAR 0 8
50775: PUSH
50776: LD_INT 1
50778: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50779: LD_VAR 0 6
50783: PUSH
50784: LD_VAR 0 13
50788: PPUSH
50789: CALL_OW 247
50793: PUSH
50794: LD_INT 2
50796: EQUAL
50797: AND
50798: PUSH
50799: LD_VAR 0 13
50803: PPUSH
50804: CALL_OW 263
50808: PUSH
50809: LD_INT 1
50811: EQUAL
50812: AND
50813: IFFALSE 50977
// begin if IsDrivenBy ( tmp ) then
50815: LD_VAR 0 13
50819: PPUSH
50820: CALL_OW 311
50824: IFFALSE 50828
// continue ;
50826: GO 50627
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50828: LD_VAR 0 6
50832: PPUSH
50833: LD_INT 3
50835: PUSH
50836: LD_INT 60
50838: PUSH
50839: EMPTY
50840: LIST
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 3
50848: PUSH
50849: LD_INT 55
50851: PUSH
50852: EMPTY
50853: LIST
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PPUSH
50863: CALL_OW 72
50867: IFFALSE 50975
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50869: LD_ADDR_VAR 0 18
50873: PUSH
50874: LD_VAR 0 6
50878: PPUSH
50879: LD_INT 3
50881: PUSH
50882: LD_INT 60
50884: PUSH
50885: EMPTY
50886: LIST
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 3
50894: PUSH
50895: LD_INT 55
50897: PUSH
50898: EMPTY
50899: LIST
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PPUSH
50909: CALL_OW 72
50913: PUSH
50914: LD_INT 1
50916: ARRAY
50917: ST_TO_ADDR
// if IsInUnit ( driver ) then
50918: LD_VAR 0 18
50922: PPUSH
50923: CALL_OW 310
50927: IFFALSE 50938
// ComExit ( driver ) ;
50929: LD_VAR 0 18
50933: PPUSH
50934: CALL 75671 0 1
// AddComEnterUnit ( driver , tmp ) ;
50938: LD_VAR 0 18
50942: PPUSH
50943: LD_VAR 0 13
50947: PPUSH
50948: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50952: LD_VAR 0 18
50956: PPUSH
50957: LD_VAR 0 7
50961: PPUSH
50962: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50966: LD_VAR 0 18
50970: PPUSH
50971: CALL_OW 181
// end ; continue ;
50975: GO 50627
// end ; if not cleaners or not tmp in cleaners then
50977: LD_VAR 0 6
50981: NOT
50982: PUSH
50983: LD_VAR 0 13
50987: PUSH
50988: LD_VAR 0 6
50992: IN
50993: NOT
50994: OR
50995: IFFALSE 51302
// begin if dep then
50997: LD_VAR 0 17
51001: IFFALSE 51137
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51003: LD_ADDR_VAR 0 16
51007: PUSH
51008: LD_VAR 0 17
51012: PUSH
51013: LD_INT 1
51015: ARRAY
51016: PPUSH
51017: CALL_OW 250
51021: PPUSH
51022: LD_VAR 0 17
51026: PUSH
51027: LD_INT 1
51029: ARRAY
51030: PPUSH
51031: CALL_OW 254
51035: PPUSH
51036: LD_INT 5
51038: PPUSH
51039: CALL_OW 272
51043: PUSH
51044: LD_VAR 0 17
51048: PUSH
51049: LD_INT 1
51051: ARRAY
51052: PPUSH
51053: CALL_OW 251
51057: PPUSH
51058: LD_VAR 0 17
51062: PUSH
51063: LD_INT 1
51065: ARRAY
51066: PPUSH
51067: CALL_OW 254
51071: PPUSH
51072: LD_INT 5
51074: PPUSH
51075: CALL_OW 273
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51084: LD_VAR 0 16
51088: PUSH
51089: LD_INT 1
51091: ARRAY
51092: PPUSH
51093: LD_VAR 0 16
51097: PUSH
51098: LD_INT 2
51100: ARRAY
51101: PPUSH
51102: CALL_OW 488
51106: IFFALSE 51137
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51108: LD_VAR 0 13
51112: PPUSH
51113: LD_VAR 0 16
51117: PUSH
51118: LD_INT 1
51120: ARRAY
51121: PPUSH
51122: LD_VAR 0 16
51126: PUSH
51127: LD_INT 2
51129: ARRAY
51130: PPUSH
51131: CALL_OW 111
// continue ;
51135: GO 50627
// end ; end ; r := GetDir ( tmp ) ;
51137: LD_ADDR_VAR 0 15
51141: PUSH
51142: LD_VAR 0 13
51146: PPUSH
51147: CALL_OW 254
51151: ST_TO_ADDR
// if r = 5 then
51152: LD_VAR 0 15
51156: PUSH
51157: LD_INT 5
51159: EQUAL
51160: IFFALSE 51170
// r := 0 ;
51162: LD_ADDR_VAR 0 15
51166: PUSH
51167: LD_INT 0
51169: ST_TO_ADDR
// for j = r to 5 do
51170: LD_ADDR_VAR 0 10
51174: PUSH
51175: DOUBLE
51176: LD_VAR 0 15
51180: DEC
51181: ST_TO_ADDR
51182: LD_INT 5
51184: PUSH
51185: FOR_TO
51186: IFFALSE 51300
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51188: LD_ADDR_VAR 0 11
51192: PUSH
51193: LD_VAR 0 13
51197: PPUSH
51198: CALL_OW 250
51202: PPUSH
51203: LD_VAR 0 10
51207: PPUSH
51208: LD_INT 2
51210: PPUSH
51211: CALL_OW 272
51215: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51216: LD_ADDR_VAR 0 12
51220: PUSH
51221: LD_VAR 0 13
51225: PPUSH
51226: CALL_OW 251
51230: PPUSH
51231: LD_VAR 0 10
51235: PPUSH
51236: LD_INT 2
51238: PPUSH
51239: CALL_OW 273
51243: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51244: LD_VAR 0 11
51248: PPUSH
51249: LD_VAR 0 12
51253: PPUSH
51254: CALL_OW 488
51258: PUSH
51259: LD_VAR 0 11
51263: PPUSH
51264: LD_VAR 0 12
51268: PPUSH
51269: CALL_OW 428
51273: NOT
51274: AND
51275: IFFALSE 51298
// begin ComMoveXY ( tmp , _x , _y ) ;
51277: LD_VAR 0 13
51281: PPUSH
51282: LD_VAR 0 11
51286: PPUSH
51287: LD_VAR 0 12
51291: PPUSH
51292: CALL_OW 111
// break ;
51296: GO 51300
// end ; end ;
51298: GO 51185
51300: POP
51301: POP
// end ; end ;
51302: GO 50627
51304: POP
51305: POP
// end ;
51306: LD_VAR 0 8
51310: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51311: LD_INT 0
51313: PPUSH
// result := true ;
51314: LD_ADDR_VAR 0 3
51318: PUSH
51319: LD_INT 1
51321: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51322: LD_VAR 0 2
51326: PUSH
51327: LD_INT 24
51329: DOUBLE
51330: EQUAL
51331: IFTRUE 51341
51333: LD_INT 33
51335: DOUBLE
51336: EQUAL
51337: IFTRUE 51341
51339: GO 51366
51341: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51342: LD_ADDR_VAR 0 3
51346: PUSH
51347: LD_INT 32
51349: PPUSH
51350: LD_VAR 0 1
51354: PPUSH
51355: CALL_OW 321
51359: PUSH
51360: LD_INT 2
51362: EQUAL
51363: ST_TO_ADDR
51364: GO 51686
51366: LD_INT 20
51368: DOUBLE
51369: EQUAL
51370: IFTRUE 51374
51372: GO 51399
51374: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51375: LD_ADDR_VAR 0 3
51379: PUSH
51380: LD_INT 6
51382: PPUSH
51383: LD_VAR 0 1
51387: PPUSH
51388: CALL_OW 321
51392: PUSH
51393: LD_INT 2
51395: EQUAL
51396: ST_TO_ADDR
51397: GO 51686
51399: LD_INT 22
51401: DOUBLE
51402: EQUAL
51403: IFTRUE 51413
51405: LD_INT 36
51407: DOUBLE
51408: EQUAL
51409: IFTRUE 51413
51411: GO 51438
51413: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51414: LD_ADDR_VAR 0 3
51418: PUSH
51419: LD_INT 15
51421: PPUSH
51422: LD_VAR 0 1
51426: PPUSH
51427: CALL_OW 321
51431: PUSH
51432: LD_INT 2
51434: EQUAL
51435: ST_TO_ADDR
51436: GO 51686
51438: LD_INT 30
51440: DOUBLE
51441: EQUAL
51442: IFTRUE 51446
51444: GO 51471
51446: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51447: LD_ADDR_VAR 0 3
51451: PUSH
51452: LD_INT 20
51454: PPUSH
51455: LD_VAR 0 1
51459: PPUSH
51460: CALL_OW 321
51464: PUSH
51465: LD_INT 2
51467: EQUAL
51468: ST_TO_ADDR
51469: GO 51686
51471: LD_INT 28
51473: DOUBLE
51474: EQUAL
51475: IFTRUE 51485
51477: LD_INT 21
51479: DOUBLE
51480: EQUAL
51481: IFTRUE 51485
51483: GO 51510
51485: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51486: LD_ADDR_VAR 0 3
51490: PUSH
51491: LD_INT 21
51493: PPUSH
51494: LD_VAR 0 1
51498: PPUSH
51499: CALL_OW 321
51503: PUSH
51504: LD_INT 2
51506: EQUAL
51507: ST_TO_ADDR
51508: GO 51686
51510: LD_INT 16
51512: DOUBLE
51513: EQUAL
51514: IFTRUE 51518
51516: GO 51545
51518: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51519: LD_ADDR_VAR 0 3
51523: PUSH
51524: LD_EXP 65
51528: PPUSH
51529: LD_VAR 0 1
51533: PPUSH
51534: CALL_OW 321
51538: PUSH
51539: LD_INT 2
51541: EQUAL
51542: ST_TO_ADDR
51543: GO 51686
51545: LD_INT 19
51547: DOUBLE
51548: EQUAL
51549: IFTRUE 51559
51551: LD_INT 23
51553: DOUBLE
51554: EQUAL
51555: IFTRUE 51559
51557: GO 51586
51559: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51560: LD_ADDR_VAR 0 3
51564: PUSH
51565: LD_EXP 64
51569: PPUSH
51570: LD_VAR 0 1
51574: PPUSH
51575: CALL_OW 321
51579: PUSH
51580: LD_INT 2
51582: EQUAL
51583: ST_TO_ADDR
51584: GO 51686
51586: LD_INT 17
51588: DOUBLE
51589: EQUAL
51590: IFTRUE 51594
51592: GO 51619
51594: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51595: LD_ADDR_VAR 0 3
51599: PUSH
51600: LD_INT 39
51602: PPUSH
51603: LD_VAR 0 1
51607: PPUSH
51608: CALL_OW 321
51612: PUSH
51613: LD_INT 2
51615: EQUAL
51616: ST_TO_ADDR
51617: GO 51686
51619: LD_INT 18
51621: DOUBLE
51622: EQUAL
51623: IFTRUE 51627
51625: GO 51652
51627: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51628: LD_ADDR_VAR 0 3
51632: PUSH
51633: LD_INT 40
51635: PPUSH
51636: LD_VAR 0 1
51640: PPUSH
51641: CALL_OW 321
51645: PUSH
51646: LD_INT 2
51648: EQUAL
51649: ST_TO_ADDR
51650: GO 51686
51652: LD_INT 27
51654: DOUBLE
51655: EQUAL
51656: IFTRUE 51660
51658: GO 51685
51660: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51661: LD_ADDR_VAR 0 3
51665: PUSH
51666: LD_INT 35
51668: PPUSH
51669: LD_VAR 0 1
51673: PPUSH
51674: CALL_OW 321
51678: PUSH
51679: LD_INT 2
51681: EQUAL
51682: ST_TO_ADDR
51683: GO 51686
51685: POP
// end ;
51686: LD_VAR 0 3
51690: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51691: LD_INT 0
51693: PPUSH
51694: PPUSH
51695: PPUSH
51696: PPUSH
51697: PPUSH
51698: PPUSH
51699: PPUSH
51700: PPUSH
51701: PPUSH
51702: PPUSH
51703: PPUSH
// result := false ;
51704: LD_ADDR_VAR 0 6
51708: PUSH
51709: LD_INT 0
51711: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51712: LD_VAR 0 1
51716: NOT
51717: PUSH
51718: LD_VAR 0 1
51722: PPUSH
51723: CALL_OW 266
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 1
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: IN
51738: NOT
51739: OR
51740: PUSH
51741: LD_VAR 0 2
51745: NOT
51746: OR
51747: PUSH
51748: LD_VAR 0 5
51752: PUSH
51753: LD_INT 0
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: LD_INT 2
51761: PUSH
51762: LD_INT 3
51764: PUSH
51765: LD_INT 4
51767: PUSH
51768: LD_INT 5
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: IN
51779: NOT
51780: OR
51781: PUSH
51782: LD_VAR 0 3
51786: PPUSH
51787: LD_VAR 0 4
51791: PPUSH
51792: CALL_OW 488
51796: NOT
51797: OR
51798: IFFALSE 51802
// exit ;
51800: GO 52538
// side := GetSide ( depot ) ;
51802: LD_ADDR_VAR 0 9
51806: PUSH
51807: LD_VAR 0 1
51811: PPUSH
51812: CALL_OW 255
51816: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51817: LD_VAR 0 9
51821: PPUSH
51822: LD_VAR 0 2
51826: PPUSH
51827: CALL 51311 0 2
51831: NOT
51832: IFFALSE 51836
// exit ;
51834: GO 52538
// pom := GetBase ( depot ) ;
51836: LD_ADDR_VAR 0 10
51840: PUSH
51841: LD_VAR 0 1
51845: PPUSH
51846: CALL_OW 274
51850: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51851: LD_ADDR_VAR 0 11
51855: PUSH
51856: LD_VAR 0 2
51860: PPUSH
51861: LD_VAR 0 1
51865: PPUSH
51866: CALL_OW 248
51870: PPUSH
51871: CALL_OW 450
51875: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51876: LD_VAR 0 10
51880: PPUSH
51881: LD_INT 1
51883: PPUSH
51884: CALL_OW 275
51888: PUSH
51889: LD_VAR 0 11
51893: PUSH
51894: LD_INT 1
51896: ARRAY
51897: GREATEREQUAL
51898: PUSH
51899: LD_VAR 0 10
51903: PPUSH
51904: LD_INT 2
51906: PPUSH
51907: CALL_OW 275
51911: PUSH
51912: LD_VAR 0 11
51916: PUSH
51917: LD_INT 2
51919: ARRAY
51920: GREATEREQUAL
51921: AND
51922: PUSH
51923: LD_VAR 0 10
51927: PPUSH
51928: LD_INT 3
51930: PPUSH
51931: CALL_OW 275
51935: PUSH
51936: LD_VAR 0 11
51940: PUSH
51941: LD_INT 3
51943: ARRAY
51944: GREATEREQUAL
51945: AND
51946: NOT
51947: IFFALSE 51951
// exit ;
51949: GO 52538
// if GetBType ( depot ) = b_depot then
51951: LD_VAR 0 1
51955: PPUSH
51956: CALL_OW 266
51960: PUSH
51961: LD_INT 0
51963: EQUAL
51964: IFFALSE 51976
// dist := 28 else
51966: LD_ADDR_VAR 0 14
51970: PUSH
51971: LD_INT 28
51973: ST_TO_ADDR
51974: GO 51984
// dist := 36 ;
51976: LD_ADDR_VAR 0 14
51980: PUSH
51981: LD_INT 36
51983: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51984: LD_VAR 0 1
51988: PPUSH
51989: LD_VAR 0 3
51993: PPUSH
51994: LD_VAR 0 4
51998: PPUSH
51999: CALL_OW 297
52003: PUSH
52004: LD_VAR 0 14
52008: GREATER
52009: IFFALSE 52013
// exit ;
52011: GO 52538
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52013: LD_ADDR_VAR 0 12
52017: PUSH
52018: LD_VAR 0 2
52022: PPUSH
52023: LD_VAR 0 3
52027: PPUSH
52028: LD_VAR 0 4
52032: PPUSH
52033: LD_VAR 0 5
52037: PPUSH
52038: LD_VAR 0 1
52042: PPUSH
52043: CALL_OW 248
52047: PPUSH
52048: LD_INT 0
52050: PPUSH
52051: CALL 52543 0 6
52055: ST_TO_ADDR
// if not hexes then
52056: LD_VAR 0 12
52060: NOT
52061: IFFALSE 52065
// exit ;
52063: GO 52538
// hex := GetHexInfo ( x , y ) ;
52065: LD_ADDR_VAR 0 15
52069: PUSH
52070: LD_VAR 0 3
52074: PPUSH
52075: LD_VAR 0 4
52079: PPUSH
52080: CALL_OW 546
52084: ST_TO_ADDR
// if hex [ 1 ] then
52085: LD_VAR 0 15
52089: PUSH
52090: LD_INT 1
52092: ARRAY
52093: IFFALSE 52097
// exit ;
52095: GO 52538
// height := hex [ 2 ] ;
52097: LD_ADDR_VAR 0 13
52101: PUSH
52102: LD_VAR 0 15
52106: PUSH
52107: LD_INT 2
52109: ARRAY
52110: ST_TO_ADDR
// for i = 1 to hexes do
52111: LD_ADDR_VAR 0 7
52115: PUSH
52116: DOUBLE
52117: LD_INT 1
52119: DEC
52120: ST_TO_ADDR
52121: LD_VAR 0 12
52125: PUSH
52126: FOR_TO
52127: IFFALSE 52457
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52129: LD_VAR 0 12
52133: PUSH
52134: LD_VAR 0 7
52138: ARRAY
52139: PUSH
52140: LD_INT 1
52142: ARRAY
52143: PPUSH
52144: LD_VAR 0 12
52148: PUSH
52149: LD_VAR 0 7
52153: ARRAY
52154: PUSH
52155: LD_INT 2
52157: ARRAY
52158: PPUSH
52159: CALL_OW 488
52163: NOT
52164: PUSH
52165: LD_VAR 0 12
52169: PUSH
52170: LD_VAR 0 7
52174: ARRAY
52175: PUSH
52176: LD_INT 1
52178: ARRAY
52179: PPUSH
52180: LD_VAR 0 12
52184: PUSH
52185: LD_VAR 0 7
52189: ARRAY
52190: PUSH
52191: LD_INT 2
52193: ARRAY
52194: PPUSH
52195: CALL_OW 428
52199: PUSH
52200: LD_INT 0
52202: GREATER
52203: OR
52204: PUSH
52205: LD_VAR 0 12
52209: PUSH
52210: LD_VAR 0 7
52214: ARRAY
52215: PUSH
52216: LD_INT 1
52218: ARRAY
52219: PPUSH
52220: LD_VAR 0 12
52224: PUSH
52225: LD_VAR 0 7
52229: ARRAY
52230: PUSH
52231: LD_INT 2
52233: ARRAY
52234: PPUSH
52235: CALL_OW 351
52239: OR
52240: IFFALSE 52246
// exit ;
52242: POP
52243: POP
52244: GO 52538
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52246: LD_ADDR_VAR 0 8
52250: PUSH
52251: LD_VAR 0 12
52255: PUSH
52256: LD_VAR 0 7
52260: ARRAY
52261: PUSH
52262: LD_INT 1
52264: ARRAY
52265: PPUSH
52266: LD_VAR 0 12
52270: PUSH
52271: LD_VAR 0 7
52275: ARRAY
52276: PUSH
52277: LD_INT 2
52279: ARRAY
52280: PPUSH
52281: CALL_OW 546
52285: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52286: LD_VAR 0 8
52290: PUSH
52291: LD_INT 1
52293: ARRAY
52294: PUSH
52295: LD_VAR 0 8
52299: PUSH
52300: LD_INT 2
52302: ARRAY
52303: PUSH
52304: LD_VAR 0 13
52308: PUSH
52309: LD_INT 2
52311: PLUS
52312: GREATER
52313: OR
52314: PUSH
52315: LD_VAR 0 8
52319: PUSH
52320: LD_INT 2
52322: ARRAY
52323: PUSH
52324: LD_VAR 0 13
52328: PUSH
52329: LD_INT 2
52331: MINUS
52332: LESS
52333: OR
52334: PUSH
52335: LD_VAR 0 8
52339: PUSH
52340: LD_INT 3
52342: ARRAY
52343: PUSH
52344: LD_INT 0
52346: PUSH
52347: LD_INT 8
52349: PUSH
52350: LD_INT 9
52352: PUSH
52353: LD_INT 10
52355: PUSH
52356: LD_INT 11
52358: PUSH
52359: LD_INT 12
52361: PUSH
52362: LD_INT 13
52364: PUSH
52365: LD_INT 16
52367: PUSH
52368: LD_INT 17
52370: PUSH
52371: LD_INT 18
52373: PUSH
52374: LD_INT 19
52376: PUSH
52377: LD_INT 20
52379: PUSH
52380: LD_INT 21
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: IN
52398: NOT
52399: OR
52400: PUSH
52401: LD_VAR 0 8
52405: PUSH
52406: LD_INT 5
52408: ARRAY
52409: NOT
52410: OR
52411: PUSH
52412: LD_VAR 0 8
52416: PUSH
52417: LD_INT 6
52419: ARRAY
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: LD_INT 2
52426: PUSH
52427: LD_INT 7
52429: PUSH
52430: LD_INT 9
52432: PUSH
52433: LD_INT 10
52435: PUSH
52436: LD_INT 11
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: IN
52447: NOT
52448: OR
52449: IFFALSE 52455
// exit ;
52451: POP
52452: POP
52453: GO 52538
// end ;
52455: GO 52126
52457: POP
52458: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52459: LD_VAR 0 9
52463: PPUSH
52464: LD_VAR 0 3
52468: PPUSH
52469: LD_VAR 0 4
52473: PPUSH
52474: LD_INT 20
52476: PPUSH
52477: CALL 44484 0 4
52481: PUSH
52482: LD_INT 4
52484: ARRAY
52485: IFFALSE 52489
// exit ;
52487: GO 52538
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52489: LD_VAR 0 2
52493: PUSH
52494: LD_INT 29
52496: PUSH
52497: LD_INT 30
52499: PUSH
52500: EMPTY
52501: LIST
52502: LIST
52503: IN
52504: PUSH
52505: LD_VAR 0 3
52509: PPUSH
52510: LD_VAR 0 4
52514: PPUSH
52515: LD_VAR 0 9
52519: PPUSH
52520: CALL_OW 440
52524: NOT
52525: AND
52526: IFFALSE 52530
// exit ;
52528: GO 52538
// result := true ;
52530: LD_ADDR_VAR 0 6
52534: PUSH
52535: LD_INT 1
52537: ST_TO_ADDR
// end ;
52538: LD_VAR 0 6
52542: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52543: LD_INT 0
52545: PPUSH
52546: PPUSH
52547: PPUSH
52548: PPUSH
52549: PPUSH
52550: PPUSH
52551: PPUSH
52552: PPUSH
52553: PPUSH
52554: PPUSH
52555: PPUSH
52556: PPUSH
52557: PPUSH
52558: PPUSH
52559: PPUSH
52560: PPUSH
52561: PPUSH
52562: PPUSH
52563: PPUSH
52564: PPUSH
52565: PPUSH
52566: PPUSH
52567: PPUSH
52568: PPUSH
52569: PPUSH
52570: PPUSH
52571: PPUSH
52572: PPUSH
52573: PPUSH
52574: PPUSH
52575: PPUSH
52576: PPUSH
52577: PPUSH
52578: PPUSH
52579: PPUSH
52580: PPUSH
52581: PPUSH
52582: PPUSH
52583: PPUSH
52584: PPUSH
52585: PPUSH
52586: PPUSH
52587: PPUSH
52588: PPUSH
52589: PPUSH
52590: PPUSH
52591: PPUSH
52592: PPUSH
52593: PPUSH
52594: PPUSH
52595: PPUSH
52596: PPUSH
52597: PPUSH
52598: PPUSH
52599: PPUSH
52600: PPUSH
52601: PPUSH
52602: PPUSH
// result = [ ] ;
52603: LD_ADDR_VAR 0 7
52607: PUSH
52608: EMPTY
52609: ST_TO_ADDR
// temp_list = [ ] ;
52610: LD_ADDR_VAR 0 9
52614: PUSH
52615: EMPTY
52616: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52617: LD_VAR 0 4
52621: PUSH
52622: LD_INT 0
52624: PUSH
52625: LD_INT 1
52627: PUSH
52628: LD_INT 2
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: LD_INT 4
52636: PUSH
52637: LD_INT 5
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: IN
52648: NOT
52649: PUSH
52650: LD_VAR 0 1
52654: PUSH
52655: LD_INT 0
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: IN
52665: PUSH
52666: LD_VAR 0 5
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 2
52676: PUSH
52677: LD_INT 3
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: LIST
52684: IN
52685: NOT
52686: AND
52687: OR
52688: IFFALSE 52692
// exit ;
52690: GO 71083
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52692: LD_VAR 0 1
52696: PUSH
52697: LD_INT 6
52699: PUSH
52700: LD_INT 7
52702: PUSH
52703: LD_INT 8
52705: PUSH
52706: LD_INT 13
52708: PUSH
52709: LD_INT 12
52711: PUSH
52712: LD_INT 15
52714: PUSH
52715: LD_INT 11
52717: PUSH
52718: LD_INT 14
52720: PUSH
52721: LD_INT 10
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: IN
52735: IFFALSE 52745
// btype = b_lab ;
52737: LD_ADDR_VAR 0 1
52741: PUSH
52742: LD_INT 6
52744: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52745: LD_VAR 0 6
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 2
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: LIST
52763: IN
52764: NOT
52765: PUSH
52766: LD_VAR 0 1
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 1
52776: PUSH
52777: LD_INT 2
52779: PUSH
52780: LD_INT 3
52782: PUSH
52783: LD_INT 6
52785: PUSH
52786: LD_INT 36
52788: PUSH
52789: LD_INT 4
52791: PUSH
52792: LD_INT 5
52794: PUSH
52795: LD_INT 31
52797: PUSH
52798: LD_INT 32
52800: PUSH
52801: LD_INT 33
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: IN
52817: NOT
52818: PUSH
52819: LD_VAR 0 6
52823: PUSH
52824: LD_INT 1
52826: EQUAL
52827: AND
52828: OR
52829: PUSH
52830: LD_VAR 0 1
52834: PUSH
52835: LD_INT 2
52837: PUSH
52838: LD_INT 3
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: IN
52845: NOT
52846: PUSH
52847: LD_VAR 0 6
52851: PUSH
52852: LD_INT 2
52854: EQUAL
52855: AND
52856: OR
52857: IFFALSE 52867
// mode = 0 ;
52859: LD_ADDR_VAR 0 6
52863: PUSH
52864: LD_INT 0
52866: ST_TO_ADDR
// case mode of 0 :
52867: LD_VAR 0 6
52871: PUSH
52872: LD_INT 0
52874: DOUBLE
52875: EQUAL
52876: IFTRUE 52880
52878: GO 64333
52880: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52881: LD_ADDR_VAR 0 11
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 0
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 1
52939: NEG
52940: PUSH
52941: LD_INT 0
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: NEG
52951: PUSH
52952: LD_INT 1
52954: NEG
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 0
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 0
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 1
53027: PUSH
53028: LD_INT 3
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 0
53037: PUSH
53038: LD_INT 3
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: NEG
53048: PUSH
53049: LD_INT 2
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53074: LD_ADDR_VAR 0 12
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 0
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 1
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 0
53122: PUSH
53123: LD_INT 1
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 1
53132: NEG
53133: PUSH
53134: LD_INT 0
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 1
53155: PUSH
53156: LD_INT 1
53158: NEG
53159: PUSH
53160: EMPTY
53161: LIST
53162: LIST
53163: PUSH
53164: LD_INT 2
53166: PUSH
53167: LD_INT 0
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 2
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: NEG
53187: PUSH
53188: LD_INT 1
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 2
53208: NEG
53209: PUSH
53210: LD_INT 1
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 2
53220: NEG
53221: PUSH
53222: LD_INT 1
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 3
53231: NEG
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 3
53242: NEG
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53270: LD_ADDR_VAR 0 13
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 2
53373: PUSH
53374: LD_INT 2
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: PUSH
53384: LD_INT 2
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 2
53393: NEG
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 2
53405: NEG
53406: PUSH
53407: LD_INT 2
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 2
53417: NEG
53418: PUSH
53419: LD_INT 3
53421: NEG
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 3
53429: NEG
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: LD_INT 3
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53469: LD_ADDR_VAR 0 14
53473: PUSH
53474: LD_INT 0
53476: PUSH
53477: LD_INT 0
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 0
53486: PUSH
53487: LD_INT 1
53489: NEG
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: EMPTY
53502: LIST
53503: LIST
53504: PUSH
53505: LD_INT 1
53507: PUSH
53508: LD_INT 1
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 0
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 0
53531: PUSH
53532: EMPTY
53533: LIST
53534: LIST
53535: PUSH
53536: LD_INT 1
53538: NEG
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 1
53550: NEG
53551: PUSH
53552: LD_INT 2
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 0
53562: PUSH
53563: LD_INT 2
53565: NEG
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: LD_INT 1
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: PUSH
53585: LD_INT 2
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: LD_INT 2
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: NEG
53616: PUSH
53617: LD_INT 3
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: LD_INT 3
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 2
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53665: LD_ADDR_VAR 0 15
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 0
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 1
53693: PUSH
53694: LD_INT 0
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: LD_INT 1
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 1
53734: NEG
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 1
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 2
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 2
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 2
53799: NEG
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 2
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 3
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53858: LD_ADDR_VAR 0 16
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 0
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 0
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: NEG
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 1
53927: NEG
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 2
53961: PUSH
53962: LD_INT 2
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: LD_INT 2
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: NEG
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: LD_INT 3
54005: PUSH
54006: LD_INT 2
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 3
54015: PUSH
54016: LD_INT 3
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54051: LD_ADDR_VAR 0 17
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 2
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: LD_INT 1
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 2
54186: PUSH
54187: LD_INT 2
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: LD_INT 2
54199: PUSH
54200: EMPTY
54201: LIST
54202: LIST
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: LD_INT 2
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 2
54227: NEG
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 2
54238: NEG
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 2
54250: NEG
54251: PUSH
54252: LD_INT 2
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: LIST
54278: LIST
54279: LIST
54280: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54281: LD_ADDR_VAR 0 18
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 0
54298: PUSH
54299: LD_INT 1
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 1
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 1
54339: NEG
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 1
54350: NEG
54351: PUSH
54352: LD_INT 1
54354: NEG
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: LD_INT 2
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 1
54388: NEG
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 2
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 2
54406: PUSH
54407: LD_INT 1
54409: PUSH
54410: EMPTY
54411: LIST
54412: LIST
54413: PUSH
54414: LD_INT 2
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 0
54436: PUSH
54437: LD_INT 2
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: NEG
54447: PUSH
54448: LD_INT 1
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 2
54457: NEG
54458: PUSH
54459: LD_INT 0
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 2
54468: NEG
54469: PUSH
54470: LD_INT 1
54472: NEG
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 2
54480: NEG
54481: PUSH
54482: LD_INT 2
54484: NEG
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54511: LD_ADDR_VAR 0 19
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 0
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 0
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: LD_INT 1
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 0
54559: PUSH
54560: LD_INT 1
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: NEG
54581: PUSH
54582: LD_INT 1
54584: NEG
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 2
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 2
54607: NEG
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 1
54618: NEG
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: LD_INT 0
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 2
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 2
54646: PUSH
54647: LD_INT 2
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: LD_INT 2
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 0
54666: PUSH
54667: LD_INT 2
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: LD_INT 1
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: NEG
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: NEG
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: EMPTY
54705: LIST
54706: LIST
54707: PUSH
54708: LD_INT 2
54710: NEG
54711: PUSH
54712: LD_INT 2
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54741: LD_ADDR_VAR 0 20
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: LD_INT 0
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: LD_INT 0
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: LD_INT 1
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: NEG
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: LD_INT 2
54826: NEG
54827: PUSH
54828: EMPTY
54829: LIST
54830: LIST
54831: PUSH
54832: LD_INT 0
54834: PUSH
54835: LD_INT 2
54837: NEG
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 1
54848: NEG
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 2
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 2
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 2
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: EMPTY
54881: LIST
54882: LIST
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: LD_INT 2
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 0
54896: PUSH
54897: LD_INT 2
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: NEG
54907: PUSH
54908: LD_INT 1
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: NEG
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 2
54928: NEG
54929: PUSH
54930: LD_INT 1
54932: NEG
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 2
54940: NEG
54941: PUSH
54942: LD_INT 2
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54971: LD_ADDR_VAR 0 21
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 1
54999: PUSH
55000: LD_INT 0
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: LD_INT 1
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 0
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: LD_INT 0
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: LD_INT 1
55044: NEG
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 1
55052: NEG
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 0
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 1
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 2
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: LD_INT 1
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 2
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: LD_INT 2
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: LD_INT 1
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 2
55147: NEG
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: LD_INT 1
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55201: LD_ADDR_VAR 0 22
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 0
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 0
55218: PUSH
55219: LD_INT 1
55221: NEG
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 0
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 1
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 0
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: NEG
55260: PUSH
55261: LD_INT 0
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: LD_INT 2
55286: NEG
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 1
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 2
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: PUSH
55327: LD_INT 1
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 2
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: LD_INT 2
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 0
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: LD_INT 1
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: LD_INT 1
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 2
55400: NEG
55401: PUSH
55402: LD_INT 2
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55431: LD_ADDR_VAR 0 23
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 1
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 0
55479: PUSH
55480: LD_INT 1
55482: PUSH
55483: EMPTY
55484: LIST
55485: LIST
55486: PUSH
55487: LD_INT 1
55489: NEG
55490: PUSH
55491: LD_INT 0
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 1
55504: NEG
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 1
55512: NEG
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 0
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 2
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: PUSH
55557: LD_INT 1
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 1
55576: PUSH
55577: LD_INT 2
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 2
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 2
55607: NEG
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 2
55630: NEG
55631: PUSH
55632: LD_INT 2
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 2
55642: NEG
55643: PUSH
55644: LD_INT 3
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 1
55654: NEG
55655: PUSH
55656: LD_INT 3
55658: NEG
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: LD_INT 2
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55711: LD_ADDR_VAR 0 24
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 0
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 1
55731: NEG
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 0
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 1
55769: NEG
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 1
55780: NEG
55781: PUSH
55782: LD_INT 1
55784: NEG
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 0
55804: PUSH
55805: LD_INT 2
55807: NEG
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 2
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 2
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 1
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: LD_INT 2
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 2
55887: NEG
55888: PUSH
55889: LD_INT 0
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 2
55898: NEG
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 2
55910: NEG
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 1
55922: PUSH
55923: LD_INT 2
55925: NEG
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 2
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 3
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55987: LD_ADDR_VAR 0 25
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 0
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 1
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 1
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: LD_INT 1
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: NEG
56046: PUSH
56047: LD_INT 0
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: LD_INT 1
56060: NEG
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: LD_INT 2
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: LD_INT 2
56083: NEG
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 2
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 2
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: PUSH
56133: LD_INT 2
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 2
56163: NEG
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 2
56174: NEG
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: LD_INT 2
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 3
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 3
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 3
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 3
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56261: LD_ADDR_VAR 0 26
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 0
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: PUSH
56276: LD_INT 0
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: LD_INT 0
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 1
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: LD_INT 1
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: LD_INT 0
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: NEG
56343: PUSH
56344: LD_INT 2
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 0
56354: PUSH
56355: LD_INT 2
56357: NEG
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 2
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 2
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 2
56396: PUSH
56397: LD_INT 2
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 2
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 0
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 1
56426: NEG
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: EMPTY
56432: LIST
56433: LIST
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: LD_INT 0
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 2
56448: NEG
56449: PUSH
56450: LD_INT 1
56452: NEG
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: LD_INT 2
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: LD_INT 3
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 1
56492: NEG
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56537: LD_ADDR_VAR 0 27
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: LD_INT 1
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: LD_INT 0
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: LD_INT 1
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: LD_INT 1
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 0
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 1
56618: NEG
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 0
56630: PUSH
56631: LD_INT 2
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: EMPTY
56647: LIST
56648: LIST
56649: PUSH
56650: LD_INT 2
56652: PUSH
56653: LD_INT 0
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 2
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: LD_INT 2
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 0
56692: PUSH
56693: LD_INT 2
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: NEG
56703: PUSH
56704: LD_INT 1
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: NEG
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 2
56724: NEG
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 2
56736: NEG
56737: PUSH
56738: LD_INT 2
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 2
56759: NEG
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 3
56770: NEG
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 3
56782: NEG
56783: PUSH
56784: LD_INT 2
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56817: LD_ADDR_VAR 0 28
56821: PUSH
56822: LD_INT 0
56824: PUSH
56825: LD_INT 0
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: PUSH
56846: LD_INT 0
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: EMPTY
56860: LIST
56861: LIST
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: EMPTY
56881: LIST
56882: LIST
56883: PUSH
56884: LD_INT 1
56886: NEG
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: EMPTY
56893: LIST
56894: LIST
56895: PUSH
56896: LD_INT 1
56898: NEG
56899: PUSH
56900: LD_INT 2
56902: NEG
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: LD_INT 2
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 2
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 2
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: LD_INT 2
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: PUSH
56963: LD_INT 2
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: LD_INT 2
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: NEG
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: LD_INT 2
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: LD_INT 3
57032: NEG
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 1
57040: NEG
57041: PUSH
57042: LD_INT 3
57044: NEG
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 3
57064: NEG
57065: PUSH
57066: LD_INT 2
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57099: LD_ADDR_VAR 0 29
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: LD_INT 0
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 1
57119: NEG
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 1
57168: NEG
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: LD_INT 2
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 0
57192: PUSH
57193: LD_INT 2
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: PUSH
57204: LD_INT 1
57206: NEG
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 2
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: EMPTY
57229: LIST
57230: LIST
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: LD_INT 2
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: LD_INT 1
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 2
57265: NEG
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 2
57277: NEG
57278: PUSH
57279: LD_INT 2
57281: NEG
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 2
57289: NEG
57290: PUSH
57291: LD_INT 3
57293: NEG
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 3
57312: PUSH
57313: LD_INT 1
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 1
57322: PUSH
57323: LD_INT 3
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 2
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 3
57343: NEG
57344: PUSH
57345: LD_INT 2
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57378: LD_ADDR_VAR 0 30
57382: PUSH
57383: LD_INT 0
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: LD_INT 1
57398: NEG
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: EMPTY
57411: LIST
57412: LIST
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 0
57426: PUSH
57427: LD_INT 1
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 1
57436: NEG
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: LD_INT 1
57451: NEG
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 1
57459: NEG
57460: PUSH
57461: LD_INT 2
57463: NEG
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 0
57471: PUSH
57472: LD_INT 2
57474: NEG
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 2
57493: PUSH
57494: LD_INT 0
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: PUSH
57514: LD_INT 2
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: NEG
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: PUSH
57542: LD_INT 2
57544: NEG
57545: PUSH
57546: LD_INT 0
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 2
57555: NEG
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 1
57567: NEG
57568: PUSH
57569: LD_INT 3
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 1
57579: PUSH
57580: LD_INT 2
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: PUSH
57591: LD_INT 2
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 2
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: NEG
57611: PUSH
57612: LD_INT 1
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 3
57621: NEG
57622: PUSH
57623: LD_INT 1
57625: NEG
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: EMPTY
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57656: LD_ADDR_VAR 0 31
57660: PUSH
57661: LD_INT 0
57663: PUSH
57664: LD_INT 0
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: PUSH
57695: LD_INT 1
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 0
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: NEG
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: EMPTY
57720: LIST
57721: LIST
57722: PUSH
57723: LD_INT 1
57725: NEG
57726: PUSH
57727: LD_INT 1
57729: NEG
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: LD_INT 2
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 1
57752: NEG
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 2
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: PUSH
57771: LD_INT 1
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 2
57780: PUSH
57781: LD_INT 2
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: LD_INT 2
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 2
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 2
57821: NEG
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 2
57833: NEG
57834: PUSH
57835: LD_INT 2
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 2
57845: NEG
57846: PUSH
57847: LD_INT 3
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 3
57868: PUSH
57869: LD_INT 1
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: PUSH
57879: LD_INT 3
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: LD_INT 2
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 3
57899: NEG
57900: PUSH
57901: LD_INT 2
57903: NEG
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: LIST
57921: LIST
57922: LIST
57923: LIST
57924: LIST
57925: LIST
57926: LIST
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: LIST
57932: LIST
57933: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57934: LD_ADDR_VAR 0 32
57938: PUSH
57939: LD_INT 0
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 0
57951: PUSH
57952: LD_INT 1
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: PUSH
57973: LD_INT 1
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 1
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 1
57992: NEG
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: NEG
58004: PUSH
58005: LD_INT 1
58007: NEG
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: PUSH
58017: LD_INT 2
58019: NEG
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: LD_INT 2
58030: NEG
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PUSH
58036: LD_INT 1
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: LD_INT 1
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 2
58059: PUSH
58060: LD_INT 2
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: LD_INT 2
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: LD_INT 2
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: PUSH
58098: LD_INT 2
58100: NEG
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: NEG
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 1
58123: NEG
58124: PUSH
58125: LD_INT 3
58127: NEG
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 1
58135: PUSH
58136: LD_INT 2
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: LD_INT 2
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: LD_INT 3
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 2
58166: NEG
58167: PUSH
58168: LD_INT 1
58170: PUSH
58171: EMPTY
58172: LIST
58173: LIST
58174: PUSH
58175: LD_INT 3
58177: NEG
58178: PUSH
58179: LD_INT 1
58181: NEG
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58212: LD_ADDR_VAR 0 33
58216: PUSH
58217: LD_INT 0
58219: PUSH
58220: LD_INT 0
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: LD_INT 1
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: LD_INT 1
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 0
58260: PUSH
58261: LD_INT 1
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 1
58270: NEG
58271: PUSH
58272: LD_INT 0
58274: PUSH
58275: EMPTY
58276: LIST
58277: LIST
58278: PUSH
58279: LD_INT 1
58281: NEG
58282: PUSH
58283: LD_INT 1
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 1
58305: PUSH
58306: LD_INT 1
58308: NEG
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 2
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: PUSH
58327: LD_INT 1
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: PUSH
58337: LD_INT 2
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: LD_INT 2
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: LD_INT 1
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 2
58367: NEG
58368: PUSH
58369: LD_INT 0
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 2
58378: NEG
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 2
58390: NEG
58391: PUSH
58392: LD_INT 2
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 2
58402: NEG
58403: PUSH
58404: LD_INT 3
58406: NEG
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 2
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: LD_INT 1
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 1
58445: NEG
58446: PUSH
58447: LD_INT 2
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 3
58456: NEG
58457: PUSH
58458: LD_INT 2
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: LIST
58470: LIST
58471: LIST
58472: LIST
58473: LIST
58474: LIST
58475: LIST
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58491: LD_ADDR_VAR 0 34
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: LD_INT 2
58576: NEG
58577: PUSH
58578: EMPTY
58579: LIST
58580: LIST
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: LD_INT 2
58587: NEG
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: LD_INT 1
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: LD_INT 2
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 2
58629: PUSH
58630: EMPTY
58631: LIST
58632: LIST
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: LD_INT 1
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: LD_INT 2
58647: NEG
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: EMPTY
58665: LIST
58666: LIST
58667: PUSH
58668: LD_INT 2
58670: NEG
58671: PUSH
58672: LD_INT 2
58674: NEG
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 1
58682: NEG
58683: PUSH
58684: LD_INT 3
58686: NEG
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 3
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 2
58715: PUSH
58716: LD_INT 3
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: PUSH
58723: LD_INT 2
58725: NEG
58726: PUSH
58727: LD_INT 1
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 3
58736: NEG
58737: PUSH
58738: LD_INT 1
58740: NEG
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: LIST
58760: LIST
58761: LIST
58762: LIST
58763: LIST
58764: LIST
58765: LIST
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58771: LD_ADDR_VAR 0 35
58775: PUSH
58776: LD_INT 0
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 0
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: LD_INT 1
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 1
58829: NEG
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 1
58840: NEG
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 2
58862: NEG
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58883: LD_ADDR_VAR 0 36
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 0
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: LD_INT 1
58903: NEG
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: PUSH
58912: LD_INT 0
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 1
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 0
58931: PUSH
58932: LD_INT 1
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: LD_INT 0
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 1
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: NEG
58965: PUSH
58966: LD_INT 2
58968: NEG
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58995: LD_ADDR_VAR 0 37
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: LD_INT 0
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 0
59012: PUSH
59013: LD_INT 1
59015: NEG
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 1
59033: PUSH
59034: LD_INT 1
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: LD_INT 1
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 1
59053: NEG
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 1
59064: NEG
59065: PUSH
59066: LD_INT 1
59068: NEG
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 1
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 1
59087: NEG
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59107: LD_ADDR_VAR 0 38
59111: PUSH
59112: LD_INT 0
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PUSH
59122: LD_INT 0
59124: PUSH
59125: LD_INT 1
59127: NEG
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: EMPTY
59150: LIST
59151: LIST
59152: PUSH
59153: LD_INT 0
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 1
59176: NEG
59177: PUSH
59178: LD_INT 1
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: LD_INT 2
59188: PUSH
59189: LD_INT 1
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PUSH
59196: LD_INT 2
59198: NEG
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59219: LD_ADDR_VAR 0 39
59223: PUSH
59224: LD_INT 0
59226: PUSH
59227: LD_INT 0
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 0
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: PUSH
59248: LD_INT 0
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 1
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 0
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: NEG
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 1
59300: NEG
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: EMPTY
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59331: LD_ADDR_VAR 0 40
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: LD_INT 0
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: LD_INT 1
59351: NEG
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: LD_INT 1
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 1
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 0
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 1
59404: NEG
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 1
59412: PUSH
59413: LD_INT 1
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59443: LD_ADDR_VAR 0 41
59447: PUSH
59448: LD_INT 0
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: LD_INT 1
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: LD_INT 1
59471: PUSH
59472: LD_INT 0
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: LD_INT 1
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: LD_INT 0
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: LD_INT 1
59512: NEG
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 1
59524: NEG
59525: PUSH
59526: LD_INT 2
59528: NEG
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 1
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: LD_INT 0
59550: PUSH
59551: EMPTY
59552: LIST
59553: LIST
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: LD_INT 1
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 2
59567: PUSH
59568: LD_INT 2
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: LD_INT 2
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 1
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: LD_INT 0
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 2
59609: NEG
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 2
59621: NEG
59622: PUSH
59623: LD_INT 2
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: LD_INT 3
59637: NEG
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: LD_INT 1
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: LD_INT 3
59656: PUSH
59657: LD_INT 0
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 3
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 3
59676: PUSH
59677: LD_INT 2
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 3
59686: PUSH
59687: LD_INT 3
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 2
59696: PUSH
59697: LD_INT 3
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 2
59706: NEG
59707: PUSH
59708: LD_INT 1
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 3
59717: NEG
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 3
59728: NEG
59729: PUSH
59730: LD_INT 1
59732: NEG
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 3
59740: NEG
59741: PUSH
59742: LD_INT 2
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 3
59752: NEG
59753: PUSH
59754: LD_INT 3
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: LIST
59766: LIST
59767: LIST
59768: LIST
59769: LIST
59770: LIST
59771: LIST
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59793: LD_ADDR_VAR 0 42
59797: PUSH
59798: LD_INT 0
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: LD_INT 1
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: LD_INT 0
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: LD_INT 1
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 1
59851: NEG
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: NEG
59863: PUSH
59864: LD_INT 1
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: LD_INT 2
59889: NEG
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: LD_INT 1
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 2
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 2
59918: PUSH
59919: LD_INT 2
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: LD_INT 2
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 0
59938: PUSH
59939: LD_INT 2
59941: PUSH
59942: EMPTY
59943: LIST
59944: LIST
59945: PUSH
59946: LD_INT 1
59948: NEG
59949: PUSH
59950: LD_INT 1
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: LD_INT 2
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: LD_INT 3
59987: NEG
59988: PUSH
59989: EMPTY
59990: LIST
59991: LIST
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: LD_INT 3
59999: NEG
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: LD_INT 3
60010: NEG
60011: PUSH
60012: EMPTY
60013: LIST
60014: LIST
60015: PUSH
60016: LD_INT 1
60018: PUSH
60019: LD_INT 2
60021: NEG
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 3
60029: PUSH
60030: LD_INT 2
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 3
60039: PUSH
60040: LD_INT 3
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 2
60049: PUSH
60050: LD_INT 3
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 1
60059: PUSH
60060: LD_INT 3
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 0
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: NEG
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 3
60090: NEG
60091: PUSH
60092: LD_INT 2
60094: NEG
60095: PUSH
60096: EMPTY
60097: LIST
60098: LIST
60099: PUSH
60100: LD_INT 3
60102: NEG
60103: PUSH
60104: LD_INT 3
60106: NEG
60107: PUSH
60108: EMPTY
60109: LIST
60110: LIST
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: LIST
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: LIST
60124: LIST
60125: LIST
60126: LIST
60127: LIST
60128: LIST
60129: LIST
60130: LIST
60131: LIST
60132: LIST
60133: LIST
60134: LIST
60135: LIST
60136: LIST
60137: LIST
60138: LIST
60139: LIST
60140: LIST
60141: LIST
60142: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60143: LD_ADDR_VAR 0 43
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 1
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 1
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 1
60201: NEG
60202: PUSH
60203: LD_INT 0
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 1
60212: NEG
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 1
60224: NEG
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 0
60236: PUSH
60237: LD_INT 2
60239: NEG
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: LD_INT 1
60250: NEG
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 2
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 2
60268: PUSH
60269: LD_INT 1
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: LD_INT 2
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 0
60288: PUSH
60289: LD_INT 2
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: LD_INT 1
60298: NEG
60299: PUSH
60300: LD_INT 1
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 2
60309: NEG
60310: PUSH
60311: LD_INT 0
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 2
60320: NEG
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 1
60332: NEG
60333: PUSH
60334: LD_INT 3
60336: NEG
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: LD_INT 3
60347: NEG
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: LD_INT 2
60358: NEG
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: PUSH
60367: LD_INT 1
60369: NEG
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 3
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 3
60387: PUSH
60388: LD_INT 1
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: LD_INT 3
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: LD_INT 3
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 1
60417: NEG
60418: PUSH
60419: LD_INT 2
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 2
60428: NEG
60429: PUSH
60430: LD_INT 1
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 3
60439: NEG
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 3
60450: NEG
60451: PUSH
60452: LD_INT 1
60454: NEG
60455: PUSH
60456: EMPTY
60457: LIST
60458: LIST
60459: PUSH
60460: EMPTY
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: LIST
60488: LIST
60489: LIST
60490: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60491: LD_ADDR_VAR 0 44
60495: PUSH
60496: LD_INT 0
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: EMPTY
60503: LIST
60504: LIST
60505: PUSH
60506: LD_INT 0
60508: PUSH
60509: LD_INT 1
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 1
60519: PUSH
60520: LD_INT 0
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: LD_INT 1
60529: PUSH
60530: LD_INT 1
60532: PUSH
60533: EMPTY
60534: LIST
60535: LIST
60536: PUSH
60537: LD_INT 0
60539: PUSH
60540: LD_INT 1
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: NEG
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: NEG
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: LD_INT 2
60576: NEG
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 2
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 2
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 2
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: LD_INT 2
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 1
60635: NEG
60636: PUSH
60637: LD_INT 1
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: NEG
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 2
60681: NEG
60682: PUSH
60683: LD_INT 3
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 2
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 3
60704: PUSH
60705: LD_INT 0
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: LD_INT 3
60714: PUSH
60715: LD_INT 1
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 3
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 3
60734: PUSH
60735: LD_INT 3
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 2
60744: PUSH
60745: LD_INT 3
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: LD_INT 1
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 3
60765: NEG
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 3
60776: NEG
60777: PUSH
60778: LD_INT 1
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: NEG
60789: PUSH
60790: LD_INT 2
60792: NEG
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 3
60800: NEG
60801: PUSH
60802: LD_INT 3
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: LIST
60817: LIST
60818: LIST
60819: LIST
60820: LIST
60821: LIST
60822: LIST
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60841: LD_ADDR_VAR 0 45
60845: PUSH
60846: LD_INT 0
60848: PUSH
60849: LD_INT 0
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 0
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: LD_INT 0
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: LD_INT 1
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 0
60889: PUSH
60890: LD_INT 1
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 1
60899: NEG
60900: PUSH
60901: LD_INT 0
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: NEG
60911: PUSH
60912: LD_INT 1
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: LD_INT 2
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: LD_INT 2
60937: NEG
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 1
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 2
60956: PUSH
60957: LD_INT 1
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: LD_INT 2
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: PUSH
60977: LD_INT 2
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: LD_INT 2
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 1
60996: NEG
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 2
61007: NEG
61008: PUSH
61009: LD_INT 1
61011: NEG
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 2
61019: NEG
61020: PUSH
61021: LD_INT 2
61023: NEG
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: LD_INT 3
61035: NEG
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 1
61043: NEG
61044: PUSH
61045: LD_INT 3
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: LD_INT 3
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 3
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 3
61087: PUSH
61088: LD_INT 3
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 2
61097: PUSH
61098: LD_INT 3
61100: PUSH
61101: EMPTY
61102: LIST
61103: LIST
61104: PUSH
61105: LD_INT 1
61107: PUSH
61108: LD_INT 3
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: LD_INT 0
61117: PUSH
61118: LD_INT 3
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: LD_INT 1
61127: NEG
61128: PUSH
61129: LD_INT 2
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 3
61138: NEG
61139: PUSH
61140: LD_INT 2
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 3
61150: NEG
61151: PUSH
61152: LD_INT 3
61154: NEG
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: LIST
61167: LIST
61168: LIST
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61191: LD_ADDR_VAR 0 46
61195: PUSH
61196: LD_INT 0
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 0
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 1
61219: PUSH
61220: LD_INT 0
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: PUSH
61230: LD_INT 1
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 0
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: LD_INT 1
61249: NEG
61250: PUSH
61251: LD_INT 0
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 1
61260: NEG
61261: PUSH
61262: LD_INT 1
61264: NEG
61265: PUSH
61266: EMPTY
61267: LIST
61268: LIST
61269: PUSH
61270: LD_INT 1
61272: NEG
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 0
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 1
61295: PUSH
61296: LD_INT 1
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 2
61306: PUSH
61307: LD_INT 0
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: PUSH
61317: LD_INT 1
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: LD_INT 2
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: LD_INT 2
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: NEG
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 2
61357: NEG
61358: PUSH
61359: LD_INT 0
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 2
61368: NEG
61369: PUSH
61370: LD_INT 1
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 3
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 0
61392: PUSH
61393: LD_INT 3
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 1
61403: PUSH
61404: LD_INT 2
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 3
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 3
61435: PUSH
61436: LD_INT 1
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: LD_INT 3
61448: PUSH
61449: EMPTY
61450: LIST
61451: LIST
61452: PUSH
61453: LD_INT 0
61455: PUSH
61456: LD_INT 3
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 1
61465: NEG
61466: PUSH
61467: LD_INT 2
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 2
61476: NEG
61477: PUSH
61478: LD_INT 1
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 3
61487: NEG
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: LD_INT 1
61502: NEG
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61539: LD_ADDR_VAR 0 47
61543: PUSH
61544: LD_INT 0
61546: PUSH
61547: LD_INT 0
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 0
61556: PUSH
61557: LD_INT 1
61559: NEG
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: LD_INT 0
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: LD_INT 1
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 0
61587: PUSH
61588: LD_INT 1
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: NEG
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 1
61608: NEG
61609: PUSH
61610: LD_INT 1
61612: NEG
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 1
61620: NEG
61621: PUSH
61622: LD_INT 2
61624: NEG
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 0
61632: PUSH
61633: LD_INT 2
61635: NEG
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 1
61643: PUSH
61644: LD_INT 1
61646: NEG
61647: PUSH
61648: EMPTY
61649: LIST
61650: LIST
61651: PUSH
61652: LD_INT 2
61654: NEG
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 2
61666: NEG
61667: PUSH
61668: LD_INT 2
61670: NEG
61671: PUSH
61672: EMPTY
61673: LIST
61674: LIST
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61690: LD_ADDR_VAR 0 48
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: LD_INT 1
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: LD_INT 0
61721: PUSH
61722: EMPTY
61723: LIST
61724: LIST
61725: PUSH
61726: LD_INT 1
61728: PUSH
61729: LD_INT 1
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: LD_INT 1
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 1
61748: NEG
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: NEG
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: EMPTY
61766: LIST
61767: LIST
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 2
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: LD_INT 1
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 2
61805: PUSH
61806: LD_INT 0
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 2
61815: PUSH
61816: LD_INT 1
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61837: LD_ADDR_VAR 0 49
61841: PUSH
61842: LD_INT 0
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: EMPTY
61849: LIST
61850: LIST
61851: PUSH
61852: LD_INT 0
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: LD_INT 0
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: LD_INT 1
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: LD_INT 1
61888: PUSH
61889: EMPTY
61890: LIST
61891: LIST
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: LD_INT 0
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: LD_INT 1
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: LD_INT 1
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 2
61929: PUSH
61930: LD_INT 0
61932: PUSH
61933: EMPTY
61934: LIST
61935: LIST
61936: PUSH
61937: LD_INT 2
61939: PUSH
61940: LD_INT 1
61942: PUSH
61943: EMPTY
61944: LIST
61945: LIST
61946: PUSH
61947: LD_INT 2
61949: PUSH
61950: LD_INT 2
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 1
61959: PUSH
61960: LD_INT 2
61962: PUSH
61963: EMPTY
61964: LIST
61965: LIST
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: LIST
61971: LIST
61972: LIST
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61981: LD_ADDR_VAR 0 50
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: PUSH
62010: LD_INT 0
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: PUSH
62020: LD_INT 1
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 0
62029: PUSH
62030: LD_INT 1
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: PUSH
62037: LD_INT 1
62039: NEG
62040: PUSH
62041: LD_INT 0
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 1
62050: NEG
62051: PUSH
62052: LD_INT 1
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 2
62062: PUSH
62063: LD_INT 1
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 2
62072: PUSH
62073: LD_INT 2
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 1
62082: PUSH
62083: LD_INT 2
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 0
62092: PUSH
62093: LD_INT 2
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62125: LD_ADDR_VAR 0 51
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: LD_INT 0
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 1
62153: PUSH
62154: LD_INT 0
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 1
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 1
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 0
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 1
62206: PUSH
62207: LD_INT 2
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: LD_INT 2
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 1
62226: NEG
62227: PUSH
62228: LD_INT 1
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: NEG
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 2
62248: NEG
62249: PUSH
62250: LD_INT 1
62252: NEG
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62272: LD_ADDR_VAR 0 52
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 0
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 1
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 0
62320: PUSH
62321: LD_INT 1
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: PUSH
62328: LD_INT 1
62330: NEG
62331: PUSH
62332: LD_INT 0
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: LD_INT 1
62345: NEG
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 1
62353: NEG
62354: PUSH
62355: LD_INT 2
62357: NEG
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 1
62365: NEG
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 2
62387: NEG
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 2
62399: NEG
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62423: LD_ADDR_VAR 0 53
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: LD_INT 0
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 0
62440: PUSH
62441: LD_INT 1
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 1
62451: PUSH
62452: LD_INT 0
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: PUSH
62462: LD_INT 1
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_INT 1
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 1
62481: NEG
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 1
62492: NEG
62493: PUSH
62494: LD_INT 1
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 1
62504: NEG
62505: PUSH
62506: LD_INT 2
62508: NEG
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 0
62516: PUSH
62517: LD_INT 2
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 2
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 2
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 2
62558: PUSH
62559: LD_INT 2
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: LD_INT 2
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: LD_INT 2
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 1
62588: NEG
62589: PUSH
62590: LD_INT 1
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 2
62599: NEG
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 2
62610: NEG
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: LD_INT 2
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62653: LD_ADDR_VAR 0 54
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 0
62670: PUSH
62671: LD_INT 1
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: PUSH
62689: LD_INT 1
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: LD_INT 1
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: NEG
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 1
62734: NEG
62735: PUSH
62736: LD_INT 2
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 2
62749: NEG
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: LD_INT 1
62760: NEG
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 2
62768: PUSH
62769: LD_INT 0
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 2
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 2
62788: PUSH
62789: LD_INT 2
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: LD_INT 2
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: LD_INT 2
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 1
62818: NEG
62819: PUSH
62820: LD_INT 1
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: PUSH
62827: LD_INT 2
62829: NEG
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 2
62840: NEG
62841: PUSH
62842: LD_INT 1
62844: NEG
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: LD_INT 2
62852: NEG
62853: PUSH
62854: LD_INT 2
62856: NEG
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: EMPTY
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62883: LD_ADDR_VAR 0 55
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: LD_INT 0
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 0
62900: PUSH
62901: LD_INT 1
62903: NEG
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 1
62911: PUSH
62912: LD_INT 0
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 1
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 0
62931: PUSH
62932: LD_INT 1
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 1
62941: NEG
62942: PUSH
62943: LD_INT 0
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 1
62952: NEG
62953: PUSH
62954: LD_INT 1
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 1
62964: NEG
62965: PUSH
62966: LD_INT 2
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 0
62976: PUSH
62977: LD_INT 2
62979: NEG
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: LD_INT 1
62990: NEG
62991: PUSH
62992: EMPTY
62993: LIST
62994: LIST
62995: PUSH
62996: LD_INT 2
62998: PUSH
62999: LD_INT 0
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 2
63008: PUSH
63009: LD_INT 1
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 2
63018: PUSH
63019: LD_INT 2
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: LD_INT 2
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: LD_INT 2
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: LD_INT 1
63048: NEG
63049: PUSH
63050: LD_INT 1
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 2
63059: NEG
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 2
63070: NEG
63071: PUSH
63072: LD_INT 1
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 2
63082: NEG
63083: PUSH
63084: LD_INT 2
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: LIST
63096: LIST
63097: LIST
63098: LIST
63099: LIST
63100: LIST
63101: LIST
63102: LIST
63103: LIST
63104: LIST
63105: LIST
63106: LIST
63107: LIST
63108: LIST
63109: LIST
63110: LIST
63111: LIST
63112: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63113: LD_ADDR_VAR 0 56
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 0
63130: PUSH
63131: LD_INT 1
63133: NEG
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 1
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: EMPTY
63146: LIST
63147: LIST
63148: PUSH
63149: LD_INT 1
63151: PUSH
63152: LD_INT 1
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 0
63161: PUSH
63162: LD_INT 1
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 1
63171: NEG
63172: PUSH
63173: LD_INT 0
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 1
63182: NEG
63183: PUSH
63184: LD_INT 1
63186: NEG
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: PUSH
63192: LD_INT 1
63194: NEG
63195: PUSH
63196: LD_INT 2
63198: NEG
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: LD_INT 2
63209: NEG
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: LD_INT 1
63220: NEG
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 2
63228: PUSH
63229: LD_INT 0
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 2
63238: PUSH
63239: LD_INT 1
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 2
63248: PUSH
63249: LD_INT 2
63251: PUSH
63252: EMPTY
63253: LIST
63254: LIST
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: LD_INT 2
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: PUSH
63266: LD_INT 0
63268: PUSH
63269: LD_INT 2
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 1
63278: NEG
63279: PUSH
63280: LD_INT 1
63282: PUSH
63283: EMPTY
63284: LIST
63285: LIST
63286: PUSH
63287: LD_INT 2
63289: NEG
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 2
63300: NEG
63301: PUSH
63302: LD_INT 1
63304: NEG
63305: PUSH
63306: EMPTY
63307: LIST
63308: LIST
63309: PUSH
63310: LD_INT 2
63312: NEG
63313: PUSH
63314: LD_INT 2
63316: NEG
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: LIST
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63343: LD_ADDR_VAR 0 57
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 0
63360: PUSH
63361: LD_INT 1
63363: NEG
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 1
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: EMPTY
63376: LIST
63377: LIST
63378: PUSH
63379: LD_INT 1
63381: PUSH
63382: LD_INT 1
63384: PUSH
63385: EMPTY
63386: LIST
63387: LIST
63388: PUSH
63389: LD_INT 0
63391: PUSH
63392: LD_INT 1
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 1
63401: NEG
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 1
63412: NEG
63413: PUSH
63414: LD_INT 1
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 1
63424: NEG
63425: PUSH
63426: LD_INT 2
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: LD_INT 2
63439: NEG
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: LD_INT 1
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 2
63458: PUSH
63459: LD_INT 0
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 2
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 2
63478: PUSH
63479: LD_INT 2
63481: PUSH
63482: EMPTY
63483: LIST
63484: LIST
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: LD_INT 2
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: PUSH
63496: LD_INT 0
63498: PUSH
63499: LD_INT 2
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: LD_INT 1
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: PUSH
63517: LD_INT 2
63519: NEG
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 2
63530: NEG
63531: PUSH
63532: LD_INT 1
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 2
63542: NEG
63543: PUSH
63544: LD_INT 2
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63573: LD_ADDR_VAR 0 58
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 0
63590: PUSH
63591: LD_INT 1
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 1
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: LD_INT 1
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: LD_INT 0
63621: PUSH
63622: LD_INT 1
63624: PUSH
63625: EMPTY
63626: LIST
63627: LIST
63628: PUSH
63629: LD_INT 1
63631: NEG
63632: PUSH
63633: LD_INT 0
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 1
63642: NEG
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 1
63654: NEG
63655: PUSH
63656: LD_INT 2
63658: NEG
63659: PUSH
63660: EMPTY
63661: LIST
63662: LIST
63663: PUSH
63664: LD_INT 0
63666: PUSH
63667: LD_INT 2
63669: NEG
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: LD_INT 1
63680: NEG
63681: PUSH
63682: EMPTY
63683: LIST
63684: LIST
63685: PUSH
63686: LD_INT 2
63688: PUSH
63689: LD_INT 0
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 2
63698: PUSH
63699: LD_INT 1
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 2
63708: PUSH
63709: LD_INT 2
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 2
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: LD_INT 2
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: LIST
63790: LIST
63791: LIST
63792: LIST
63793: LIST
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: LIST
63799: LIST
63800: LIST
63801: LIST
63802: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63803: LD_ADDR_VAR 0 59
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: LD_INT 0
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: LD_INT 1
63823: NEG
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 1
63831: PUSH
63832: LD_INT 0
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 1
63841: PUSH
63842: LD_INT 1
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 0
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 1
63861: NEG
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 1
63872: NEG
63873: PUSH
63874: LD_INT 1
63876: NEG
63877: PUSH
63878: EMPTY
63879: LIST
63880: LIST
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63891: LD_ADDR_VAR 0 60
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: LD_INT 0
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: LD_INT 1
63911: NEG
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 1
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: PUSH
63930: LD_INT 1
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 0
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 1
63949: NEG
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: LD_INT 1
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: EMPTY
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63979: LD_ADDR_VAR 0 61
63983: PUSH
63984: LD_INT 0
63986: PUSH
63987: LD_INT 0
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: LD_INT 1
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 1
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 0
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 1
64037: NEG
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 1
64048: NEG
64049: PUSH
64050: LD_INT 1
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64067: LD_ADDR_VAR 0 62
64071: PUSH
64072: LD_INT 0
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 0
64084: PUSH
64085: LD_INT 1
64087: NEG
64088: PUSH
64089: EMPTY
64090: LIST
64091: LIST
64092: PUSH
64093: LD_INT 1
64095: PUSH
64096: LD_INT 0
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: PUSH
64103: LD_INT 1
64105: PUSH
64106: LD_INT 1
64108: PUSH
64109: EMPTY
64110: LIST
64111: LIST
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 1
64125: NEG
64126: PUSH
64127: LD_INT 0
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: PUSH
64134: LD_INT 1
64136: NEG
64137: PUSH
64138: LD_INT 1
64140: NEG
64141: PUSH
64142: EMPTY
64143: LIST
64144: LIST
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64155: LD_ADDR_VAR 0 63
64159: PUSH
64160: LD_INT 0
64162: PUSH
64163: LD_INT 0
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: LD_INT 1
64175: NEG
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 1
64183: PUSH
64184: LD_INT 0
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: LD_INT 1
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 0
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 1
64213: NEG
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 1
64224: NEG
64225: PUSH
64226: LD_INT 1
64228: NEG
64229: PUSH
64230: EMPTY
64231: LIST
64232: LIST
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: LIST
64242: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64243: LD_ADDR_VAR 0 64
64247: PUSH
64248: LD_INT 0
64250: PUSH
64251: LD_INT 0
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 1
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 1
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 0
64291: PUSH
64292: LD_INT 1
64294: PUSH
64295: EMPTY
64296: LIST
64297: LIST
64298: PUSH
64299: LD_INT 1
64301: NEG
64302: PUSH
64303: LD_INT 0
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 1
64312: NEG
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: ST_TO_ADDR
// end ; 1 :
64331: GO 70228
64333: LD_INT 1
64335: DOUBLE
64336: EQUAL
64337: IFTRUE 64341
64339: GO 66964
64341: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64342: LD_ADDR_VAR 0 11
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: LD_INT 3
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 0
64361: PUSH
64362: LD_INT 3
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: PUSH
64373: LD_INT 2
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: LIST
64385: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64386: LD_ADDR_VAR 0 12
64390: PUSH
64391: LD_INT 2
64393: PUSH
64394: LD_INT 1
64396: NEG
64397: PUSH
64398: EMPTY
64399: LIST
64400: LIST
64401: PUSH
64402: LD_INT 3
64404: PUSH
64405: LD_INT 0
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: LD_INT 3
64414: PUSH
64415: LD_INT 1
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: EMPTY
64423: LIST
64424: LIST
64425: LIST
64426: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64427: LD_ADDR_VAR 0 13
64431: PUSH
64432: LD_INT 3
64434: PUSH
64435: LD_INT 2
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 3
64444: PUSH
64445: LD_INT 3
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 2
64454: PUSH
64455: LD_INT 3
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: EMPTY
64463: LIST
64464: LIST
64465: LIST
64466: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64467: LD_ADDR_VAR 0 14
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: LD_INT 3
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 3
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 1
64494: NEG
64495: PUSH
64496: LD_INT 2
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: LIST
64507: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64508: LD_ADDR_VAR 0 15
64512: PUSH
64513: LD_INT 2
64515: NEG
64516: PUSH
64517: LD_INT 1
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 3
64526: NEG
64527: PUSH
64528: LD_INT 0
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 3
64537: NEG
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: LIST
64551: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64552: LD_ADDR_VAR 0 16
64556: PUSH
64557: LD_INT 2
64559: NEG
64560: PUSH
64561: LD_INT 3
64563: NEG
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 3
64571: NEG
64572: PUSH
64573: LD_INT 2
64575: NEG
64576: PUSH
64577: EMPTY
64578: LIST
64579: LIST
64580: PUSH
64581: LD_INT 3
64583: NEG
64584: PUSH
64585: LD_INT 3
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: EMPTY
64594: LIST
64595: LIST
64596: LIST
64597: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64598: LD_ADDR_VAR 0 17
64602: PUSH
64603: LD_INT 1
64605: NEG
64606: PUSH
64607: LD_INT 3
64609: NEG
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 0
64617: PUSH
64618: LD_INT 3
64620: NEG
64621: PUSH
64622: EMPTY
64623: LIST
64624: LIST
64625: PUSH
64626: LD_INT 1
64628: PUSH
64629: LD_INT 2
64631: NEG
64632: PUSH
64633: EMPTY
64634: LIST
64635: LIST
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: LIST
64641: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64642: LD_ADDR_VAR 0 18
64646: PUSH
64647: LD_INT 2
64649: PUSH
64650: LD_INT 1
64652: NEG
64653: PUSH
64654: EMPTY
64655: LIST
64656: LIST
64657: PUSH
64658: LD_INT 3
64660: PUSH
64661: LD_INT 0
64663: PUSH
64664: EMPTY
64665: LIST
64666: LIST
64667: PUSH
64668: LD_INT 3
64670: PUSH
64671: LD_INT 1
64673: PUSH
64674: EMPTY
64675: LIST
64676: LIST
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: LIST
64682: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64683: LD_ADDR_VAR 0 19
64687: PUSH
64688: LD_INT 3
64690: PUSH
64691: LD_INT 2
64693: PUSH
64694: EMPTY
64695: LIST
64696: LIST
64697: PUSH
64698: LD_INT 3
64700: PUSH
64701: LD_INT 3
64703: PUSH
64704: EMPTY
64705: LIST
64706: LIST
64707: PUSH
64708: LD_INT 2
64710: PUSH
64711: LD_INT 3
64713: PUSH
64714: EMPTY
64715: LIST
64716: LIST
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: LIST
64722: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64723: LD_ADDR_VAR 0 20
64727: PUSH
64728: LD_INT 1
64730: PUSH
64731: LD_INT 3
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: LD_INT 3
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: LD_INT 2
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: LIST
64763: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64764: LD_ADDR_VAR 0 21
64768: PUSH
64769: LD_INT 2
64771: NEG
64772: PUSH
64773: LD_INT 1
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 3
64782: NEG
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 3
64793: NEG
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: LIST
64807: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64808: LD_ADDR_VAR 0 22
64812: PUSH
64813: LD_INT 2
64815: NEG
64816: PUSH
64817: LD_INT 3
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 3
64827: NEG
64828: PUSH
64829: LD_INT 2
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 3
64839: NEG
64840: PUSH
64841: LD_INT 3
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: LIST
64853: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64854: LD_ADDR_VAR 0 23
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: LD_INT 3
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: LD_INT 4
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 1
64884: PUSH
64885: LD_INT 3
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: LIST
64897: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64898: LD_ADDR_VAR 0 24
64902: PUSH
64903: LD_INT 3
64905: PUSH
64906: LD_INT 0
64908: PUSH
64909: EMPTY
64910: LIST
64911: LIST
64912: PUSH
64913: LD_INT 3
64915: PUSH
64916: LD_INT 1
64918: NEG
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 4
64926: PUSH
64927: LD_INT 1
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: LIST
64938: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64939: LD_ADDR_VAR 0 25
64943: PUSH
64944: LD_INT 3
64946: PUSH
64947: LD_INT 3
64949: PUSH
64950: EMPTY
64951: LIST
64952: LIST
64953: PUSH
64954: LD_INT 4
64956: PUSH
64957: LD_INT 3
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 3
64966: PUSH
64967: LD_INT 4
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: LIST
64978: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64979: LD_ADDR_VAR 0 26
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: LD_INT 3
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: LD_INT 4
64999: PUSH
65000: EMPTY
65001: LIST
65002: LIST
65003: PUSH
65004: LD_INT 1
65006: NEG
65007: PUSH
65008: LD_INT 3
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: LIST
65019: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65020: LD_ADDR_VAR 0 27
65024: PUSH
65025: LD_INT 3
65027: NEG
65028: PUSH
65029: LD_INT 0
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 3
65038: NEG
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 4
65049: NEG
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: EMPTY
65060: LIST
65061: LIST
65062: LIST
65063: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65064: LD_ADDR_VAR 0 28
65068: PUSH
65069: LD_INT 3
65071: NEG
65072: PUSH
65073: LD_INT 3
65075: NEG
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 3
65083: NEG
65084: PUSH
65085: LD_INT 4
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 4
65095: NEG
65096: PUSH
65097: LD_INT 3
65099: NEG
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: LIST
65109: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65110: LD_ADDR_VAR 0 29
65114: PUSH
65115: LD_INT 1
65117: NEG
65118: PUSH
65119: LD_INT 3
65121: NEG
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: LD_INT 0
65129: PUSH
65130: LD_INT 3
65132: NEG
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 1
65140: PUSH
65141: LD_INT 2
65143: NEG
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PUSH
65149: LD_INT 1
65151: NEG
65152: PUSH
65153: LD_INT 4
65155: NEG
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 0
65163: PUSH
65164: LD_INT 4
65166: NEG
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 1
65174: PUSH
65175: LD_INT 3
65177: NEG
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 1
65185: NEG
65186: PUSH
65187: LD_INT 5
65189: NEG
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: LD_INT 0
65197: PUSH
65198: LD_INT 5
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 1
65208: PUSH
65209: LD_INT 4
65211: NEG
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PUSH
65217: LD_INT 1
65219: NEG
65220: PUSH
65221: LD_INT 6
65223: NEG
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 0
65231: PUSH
65232: LD_INT 6
65234: NEG
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: PUSH
65240: LD_INT 1
65242: PUSH
65243: LD_INT 5
65245: NEG
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65265: LD_ADDR_VAR 0 30
65269: PUSH
65270: LD_INT 2
65272: PUSH
65273: LD_INT 1
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 3
65283: PUSH
65284: LD_INT 0
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 3
65293: PUSH
65294: LD_INT 1
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 3
65303: PUSH
65304: LD_INT 1
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 4
65314: PUSH
65315: LD_INT 0
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 4
65324: PUSH
65325: LD_INT 1
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: LD_INT 4
65334: PUSH
65335: LD_INT 1
65337: NEG
65338: PUSH
65339: EMPTY
65340: LIST
65341: LIST
65342: PUSH
65343: LD_INT 5
65345: PUSH
65346: LD_INT 0
65348: PUSH
65349: EMPTY
65350: LIST
65351: LIST
65352: PUSH
65353: LD_INT 5
65355: PUSH
65356: LD_INT 1
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 5
65365: PUSH
65366: LD_INT 1
65368: NEG
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 6
65376: PUSH
65377: LD_INT 0
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 6
65386: PUSH
65387: LD_INT 1
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: LIST
65403: LIST
65404: LIST
65405: LIST
65406: LIST
65407: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65408: LD_ADDR_VAR 0 31
65412: PUSH
65413: LD_INT 3
65415: PUSH
65416: LD_INT 2
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 3
65425: PUSH
65426: LD_INT 3
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 2
65435: PUSH
65436: LD_INT 3
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 4
65445: PUSH
65446: LD_INT 3
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 4
65455: PUSH
65456: LD_INT 4
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 3
65465: PUSH
65466: LD_INT 4
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 5
65475: PUSH
65476: LD_INT 4
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 5
65485: PUSH
65486: LD_INT 5
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 4
65495: PUSH
65496: LD_INT 5
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 6
65505: PUSH
65506: LD_INT 5
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 6
65515: PUSH
65516: LD_INT 6
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 5
65525: PUSH
65526: LD_INT 6
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65547: LD_ADDR_VAR 0 32
65551: PUSH
65552: LD_INT 1
65554: PUSH
65555: LD_INT 3
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 0
65564: PUSH
65565: LD_INT 3
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 1
65574: NEG
65575: PUSH
65576: LD_INT 2
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 1
65585: PUSH
65586: LD_INT 4
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 0
65595: PUSH
65596: LD_INT 4
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: PUSH
65603: LD_INT 1
65605: NEG
65606: PUSH
65607: LD_INT 3
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 1
65616: PUSH
65617: LD_INT 5
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 0
65626: PUSH
65627: LD_INT 5
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: PUSH
65638: LD_INT 4
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: LD_INT 1
65647: PUSH
65648: LD_INT 6
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: LD_INT 0
65657: PUSH
65658: LD_INT 6
65660: PUSH
65661: EMPTY
65662: LIST
65663: LIST
65664: PUSH
65665: LD_INT 1
65667: NEG
65668: PUSH
65669: LD_INT 5
65671: PUSH
65672: EMPTY
65673: LIST
65674: LIST
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65690: LD_ADDR_VAR 0 33
65694: PUSH
65695: LD_INT 2
65697: NEG
65698: PUSH
65699: LD_INT 1
65701: PUSH
65702: EMPTY
65703: LIST
65704: LIST
65705: PUSH
65706: LD_INT 3
65708: NEG
65709: PUSH
65710: LD_INT 0
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: LD_INT 3
65719: NEG
65720: PUSH
65721: LD_INT 1
65723: NEG
65724: PUSH
65725: EMPTY
65726: LIST
65727: LIST
65728: PUSH
65729: LD_INT 3
65731: NEG
65732: PUSH
65733: LD_INT 1
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: LD_INT 4
65742: NEG
65743: PUSH
65744: LD_INT 0
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 4
65753: NEG
65754: PUSH
65755: LD_INT 1
65757: NEG
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 4
65765: NEG
65766: PUSH
65767: LD_INT 1
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 5
65776: NEG
65777: PUSH
65778: LD_INT 0
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 5
65787: NEG
65788: PUSH
65789: LD_INT 1
65791: NEG
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 5
65799: NEG
65800: PUSH
65801: LD_INT 1
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 6
65810: NEG
65811: PUSH
65812: LD_INT 0
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 6
65821: NEG
65822: PUSH
65823: LD_INT 1
65825: NEG
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: PUSH
65831: EMPTY
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65845: LD_ADDR_VAR 0 34
65849: PUSH
65850: LD_INT 2
65852: NEG
65853: PUSH
65854: LD_INT 3
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 3
65864: NEG
65865: PUSH
65866: LD_INT 2
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 3
65876: NEG
65877: PUSH
65878: LD_INT 3
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 3
65888: NEG
65889: PUSH
65890: LD_INT 4
65892: NEG
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 4
65900: NEG
65901: PUSH
65902: LD_INT 3
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 4
65912: NEG
65913: PUSH
65914: LD_INT 4
65916: NEG
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 4
65924: NEG
65925: PUSH
65926: LD_INT 5
65928: NEG
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: LD_INT 5
65936: NEG
65937: PUSH
65938: LD_INT 4
65940: NEG
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 5
65948: NEG
65949: PUSH
65950: LD_INT 5
65952: NEG
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 5
65960: NEG
65961: PUSH
65962: LD_INT 6
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: LD_INT 6
65972: NEG
65973: PUSH
65974: LD_INT 5
65976: NEG
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 6
65984: NEG
65985: PUSH
65986: LD_INT 6
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: EMPTY
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: LIST
66004: LIST
66005: LIST
66006: LIST
66007: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66008: LD_ADDR_VAR 0 41
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: LD_INT 2
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 1
66026: NEG
66027: PUSH
66028: LD_INT 3
66030: NEG
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 1
66038: PUSH
66039: LD_INT 2
66041: NEG
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: LIST
66051: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66052: LD_ADDR_VAR 0 42
66056: PUSH
66057: LD_INT 2
66059: PUSH
66060: LD_INT 0
66062: PUSH
66063: EMPTY
66064: LIST
66065: LIST
66066: PUSH
66067: LD_INT 2
66069: PUSH
66070: LD_INT 1
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 3
66080: PUSH
66081: LD_INT 1
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: LIST
66092: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66093: LD_ADDR_VAR 0 43
66097: PUSH
66098: LD_INT 2
66100: PUSH
66101: LD_INT 2
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: LD_INT 3
66110: PUSH
66111: LD_INT 2
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 2
66120: PUSH
66121: LD_INT 3
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: LIST
66132: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66133: LD_ADDR_VAR 0 44
66137: PUSH
66138: LD_INT 0
66140: PUSH
66141: LD_INT 2
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 1
66150: PUSH
66151: LD_INT 3
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 1
66160: NEG
66161: PUSH
66162: LD_INT 2
66164: PUSH
66165: EMPTY
66166: LIST
66167: LIST
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: LIST
66173: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66174: LD_ADDR_VAR 0 45
66178: PUSH
66179: LD_INT 2
66181: NEG
66182: PUSH
66183: LD_INT 0
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: LD_INT 2
66192: NEG
66193: PUSH
66194: LD_INT 1
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 3
66203: NEG
66204: PUSH
66205: LD_INT 1
66207: NEG
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: LIST
66217: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66218: LD_ADDR_VAR 0 46
66222: PUSH
66223: LD_INT 2
66225: NEG
66226: PUSH
66227: LD_INT 2
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 2
66237: NEG
66238: PUSH
66239: LD_INT 3
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 3
66249: NEG
66250: PUSH
66251: LD_INT 2
66253: NEG
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: LIST
66263: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66264: LD_ADDR_VAR 0 47
66268: PUSH
66269: LD_INT 2
66271: NEG
66272: PUSH
66273: LD_INT 3
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: LD_INT 3
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66297: LD_ADDR_VAR 0 48
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: LD_INT 2
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: LD_INT 2
66315: PUSH
66316: LD_INT 1
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66328: LD_ADDR_VAR 0 49
66332: PUSH
66333: LD_INT 3
66335: PUSH
66336: LD_INT 1
66338: PUSH
66339: EMPTY
66340: LIST
66341: LIST
66342: PUSH
66343: LD_INT 3
66345: PUSH
66346: LD_INT 2
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66357: LD_ADDR_VAR 0 50
66361: PUSH
66362: LD_INT 2
66364: PUSH
66365: LD_INT 3
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: PUSH
66372: LD_INT 1
66374: PUSH
66375: LD_INT 3
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66386: LD_ADDR_VAR 0 51
66390: PUSH
66391: LD_INT 1
66393: NEG
66394: PUSH
66395: LD_INT 2
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 2
66404: NEG
66405: PUSH
66406: LD_INT 1
66408: PUSH
66409: EMPTY
66410: LIST
66411: LIST
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66417: LD_ADDR_VAR 0 52
66421: PUSH
66422: LD_INT 3
66424: NEG
66425: PUSH
66426: LD_INT 1
66428: NEG
66429: PUSH
66430: EMPTY
66431: LIST
66432: LIST
66433: PUSH
66434: LD_INT 3
66436: NEG
66437: PUSH
66438: LD_INT 2
66440: NEG
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66450: LD_ADDR_VAR 0 53
66454: PUSH
66455: LD_INT 1
66457: NEG
66458: PUSH
66459: LD_INT 3
66461: NEG
66462: PUSH
66463: EMPTY
66464: LIST
66465: LIST
66466: PUSH
66467: LD_INT 0
66469: PUSH
66470: LD_INT 3
66472: NEG
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: PUSH
66478: LD_INT 1
66480: PUSH
66481: LD_INT 2
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: LIST
66493: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66494: LD_ADDR_VAR 0 54
66498: PUSH
66499: LD_INT 2
66501: PUSH
66502: LD_INT 1
66504: NEG
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 3
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 3
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: LIST
66534: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66535: LD_ADDR_VAR 0 55
66539: PUSH
66540: LD_INT 3
66542: PUSH
66543: LD_INT 2
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 3
66552: PUSH
66553: LD_INT 3
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 2
66562: PUSH
66563: LD_INT 3
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: EMPTY
66571: LIST
66572: LIST
66573: LIST
66574: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66575: LD_ADDR_VAR 0 56
66579: PUSH
66580: LD_INT 1
66582: PUSH
66583: LD_INT 3
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 0
66592: PUSH
66593: LD_INT 3
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 1
66602: NEG
66603: PUSH
66604: LD_INT 2
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: LIST
66615: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66616: LD_ADDR_VAR 0 57
66620: PUSH
66621: LD_INT 2
66623: NEG
66624: PUSH
66625: LD_INT 1
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 3
66634: NEG
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: PUSH
66643: LD_INT 3
66645: NEG
66646: PUSH
66647: LD_INT 1
66649: NEG
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: LIST
66659: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66660: LD_ADDR_VAR 0 58
66664: PUSH
66665: LD_INT 2
66667: NEG
66668: PUSH
66669: LD_INT 3
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 3
66679: NEG
66680: PUSH
66681: LD_INT 2
66683: NEG
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 3
66691: NEG
66692: PUSH
66693: LD_INT 3
66695: NEG
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: LIST
66705: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66706: LD_ADDR_VAR 0 59
66710: PUSH
66711: LD_INT 1
66713: NEG
66714: PUSH
66715: LD_INT 2
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 0
66725: PUSH
66726: LD_INT 2
66728: NEG
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 1
66736: PUSH
66737: LD_INT 1
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: LIST
66749: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66750: LD_ADDR_VAR 0 60
66754: PUSH
66755: LD_INT 1
66757: PUSH
66758: LD_INT 1
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 2
66768: PUSH
66769: LD_INT 0
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 2
66778: PUSH
66779: LD_INT 1
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: LIST
66790: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66791: LD_ADDR_VAR 0 61
66795: PUSH
66796: LD_INT 2
66798: PUSH
66799: LD_INT 1
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 2
66808: PUSH
66809: LD_INT 2
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 1
66818: PUSH
66819: LD_INT 2
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: LIST
66830: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66831: LD_ADDR_VAR 0 62
66835: PUSH
66836: LD_INT 1
66838: PUSH
66839: LD_INT 2
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 0
66848: PUSH
66849: LD_INT 2
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 1
66858: NEG
66859: PUSH
66860: LD_INT 1
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: EMPTY
66868: LIST
66869: LIST
66870: LIST
66871: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66872: LD_ADDR_VAR 0 63
66876: PUSH
66877: LD_INT 1
66879: NEG
66880: PUSH
66881: LD_INT 1
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: PUSH
66888: LD_INT 2
66890: NEG
66891: PUSH
66892: LD_INT 0
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 2
66901: NEG
66902: PUSH
66903: LD_INT 1
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: LIST
66915: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66916: LD_ADDR_VAR 0 64
66920: PUSH
66921: LD_INT 1
66923: NEG
66924: PUSH
66925: LD_INT 2
66927: NEG
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 2
66935: NEG
66936: PUSH
66937: LD_INT 1
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 2
66947: NEG
66948: PUSH
66949: LD_INT 2
66951: NEG
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: EMPTY
66958: LIST
66959: LIST
66960: LIST
66961: ST_TO_ADDR
// end ; 2 :
66962: GO 70228
66964: LD_INT 2
66966: DOUBLE
66967: EQUAL
66968: IFTRUE 66972
66970: GO 70227
66972: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66973: LD_ADDR_VAR 0 29
66977: PUSH
66978: LD_INT 4
66980: PUSH
66981: LD_INT 0
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 4
66990: PUSH
66991: LD_INT 1
66993: NEG
66994: PUSH
66995: EMPTY
66996: LIST
66997: LIST
66998: PUSH
66999: LD_INT 5
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 5
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: PUSH
67019: LD_INT 4
67021: PUSH
67022: LD_INT 1
67024: PUSH
67025: EMPTY
67026: LIST
67027: LIST
67028: PUSH
67029: LD_INT 3
67031: PUSH
67032: LD_INT 0
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 3
67041: PUSH
67042: LD_INT 1
67044: NEG
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 3
67052: PUSH
67053: LD_INT 2
67055: NEG
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: LD_INT 5
67063: PUSH
67064: LD_INT 2
67066: PUSH
67067: EMPTY
67068: LIST
67069: LIST
67070: PUSH
67071: LD_INT 3
67073: PUSH
67074: LD_INT 3
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 3
67083: PUSH
67084: LD_INT 2
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 4
67093: PUSH
67094: LD_INT 3
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: LD_INT 4
67103: PUSH
67104: LD_INT 4
67106: PUSH
67107: EMPTY
67108: LIST
67109: LIST
67110: PUSH
67111: LD_INT 3
67113: PUSH
67114: LD_INT 4
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 2
67123: PUSH
67124: LD_INT 3
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 2
67133: PUSH
67134: LD_INT 2
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 4
67143: PUSH
67144: LD_INT 2
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 2
67153: PUSH
67154: LD_INT 4
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: LD_INT 0
67163: PUSH
67164: LD_INT 4
67166: PUSH
67167: EMPTY
67168: LIST
67169: LIST
67170: PUSH
67171: LD_INT 0
67173: PUSH
67174: LD_INT 3
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_INT 1
67183: PUSH
67184: LD_INT 4
67186: PUSH
67187: EMPTY
67188: LIST
67189: LIST
67190: PUSH
67191: LD_INT 1
67193: PUSH
67194: LD_INT 5
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 0
67203: PUSH
67204: LD_INT 5
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 1
67213: NEG
67214: PUSH
67215: LD_INT 4
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 1
67224: NEG
67225: PUSH
67226: LD_INT 3
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 2
67235: PUSH
67236: LD_INT 5
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 2
67245: NEG
67246: PUSH
67247: LD_INT 3
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 3
67256: NEG
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 3
67267: NEG
67268: PUSH
67269: LD_INT 1
67271: NEG
67272: PUSH
67273: EMPTY
67274: LIST
67275: LIST
67276: PUSH
67277: LD_INT 2
67279: NEG
67280: PUSH
67281: LD_INT 0
67283: PUSH
67284: EMPTY
67285: LIST
67286: LIST
67287: PUSH
67288: LD_INT 2
67290: NEG
67291: PUSH
67292: LD_INT 1
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 3
67301: NEG
67302: PUSH
67303: LD_INT 1
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 4
67312: NEG
67313: PUSH
67314: LD_INT 0
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: PUSH
67321: LD_INT 4
67323: NEG
67324: PUSH
67325: LD_INT 1
67327: NEG
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 4
67335: NEG
67336: PUSH
67337: LD_INT 2
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 2
67347: NEG
67348: PUSH
67349: LD_INT 2
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 4
67358: NEG
67359: PUSH
67360: LD_INT 4
67362: NEG
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: PUSH
67368: LD_INT 4
67370: NEG
67371: PUSH
67372: LD_INT 5
67374: NEG
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: LD_INT 3
67382: NEG
67383: PUSH
67384: LD_INT 4
67386: NEG
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 3
67394: NEG
67395: PUSH
67396: LD_INT 3
67398: NEG
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PUSH
67404: LD_INT 4
67406: NEG
67407: PUSH
67408: LD_INT 3
67410: NEG
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: LD_INT 5
67418: NEG
67419: PUSH
67420: LD_INT 4
67422: NEG
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 5
67430: NEG
67431: PUSH
67432: LD_INT 5
67434: NEG
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 3
67442: NEG
67443: PUSH
67444: LD_INT 5
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: LD_INT 5
67454: NEG
67455: PUSH
67456: LD_INT 3
67458: NEG
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: LIST
67473: LIST
67474: LIST
67475: LIST
67476: LIST
67477: LIST
67478: LIST
67479: LIST
67480: LIST
67481: LIST
67482: LIST
67483: LIST
67484: LIST
67485: LIST
67486: LIST
67487: LIST
67488: LIST
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67511: LD_ADDR_VAR 0 30
67515: PUSH
67516: LD_INT 4
67518: PUSH
67519: LD_INT 4
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 4
67528: PUSH
67529: LD_INT 3
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 5
67538: PUSH
67539: LD_INT 4
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: LD_INT 5
67548: PUSH
67549: LD_INT 5
67551: PUSH
67552: EMPTY
67553: LIST
67554: LIST
67555: PUSH
67556: LD_INT 4
67558: PUSH
67559: LD_INT 5
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 3
67568: PUSH
67569: LD_INT 4
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 3
67578: PUSH
67579: LD_INT 3
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 5
67588: PUSH
67589: LD_INT 3
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 3
67598: PUSH
67599: LD_INT 5
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 0
67608: PUSH
67609: LD_INT 3
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: LD_INT 2
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 1
67628: PUSH
67629: LD_INT 3
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 1
67638: PUSH
67639: LD_INT 4
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 0
67648: PUSH
67649: LD_INT 4
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 1
67658: NEG
67659: PUSH
67660: LD_INT 3
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 1
67669: NEG
67670: PUSH
67671: LD_INT 2
67673: PUSH
67674: EMPTY
67675: LIST
67676: LIST
67677: PUSH
67678: LD_INT 2
67680: PUSH
67681: LD_INT 4
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 2
67690: NEG
67691: PUSH
67692: LD_INT 2
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 4
67701: NEG
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 4
67712: NEG
67713: PUSH
67714: LD_INT 1
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 3
67724: NEG
67725: PUSH
67726: LD_INT 0
67728: PUSH
67729: EMPTY
67730: LIST
67731: LIST
67732: PUSH
67733: LD_INT 3
67735: NEG
67736: PUSH
67737: LD_INT 1
67739: PUSH
67740: EMPTY
67741: LIST
67742: LIST
67743: PUSH
67744: LD_INT 4
67746: NEG
67747: PUSH
67748: LD_INT 1
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: PUSH
67755: LD_INT 5
67757: NEG
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 5
67768: NEG
67769: PUSH
67770: LD_INT 1
67772: NEG
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 5
67780: NEG
67781: PUSH
67782: LD_INT 2
67784: NEG
67785: PUSH
67786: EMPTY
67787: LIST
67788: LIST
67789: PUSH
67790: LD_INT 3
67792: NEG
67793: PUSH
67794: LD_INT 2
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 3
67803: NEG
67804: PUSH
67805: LD_INT 3
67807: NEG
67808: PUSH
67809: EMPTY
67810: LIST
67811: LIST
67812: PUSH
67813: LD_INT 3
67815: NEG
67816: PUSH
67817: LD_INT 4
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 2
67827: NEG
67828: PUSH
67829: LD_INT 3
67831: NEG
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: LD_INT 2
67839: NEG
67840: PUSH
67841: LD_INT 2
67843: NEG
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 3
67851: NEG
67852: PUSH
67853: LD_INT 2
67855: NEG
67856: PUSH
67857: EMPTY
67858: LIST
67859: LIST
67860: PUSH
67861: LD_INT 4
67863: NEG
67864: PUSH
67865: LD_INT 3
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 4
67875: NEG
67876: PUSH
67877: LD_INT 4
67879: NEG
67880: PUSH
67881: EMPTY
67882: LIST
67883: LIST
67884: PUSH
67885: LD_INT 2
67887: NEG
67888: PUSH
67889: LD_INT 4
67891: NEG
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 4
67899: NEG
67900: PUSH
67901: LD_INT 2
67903: NEG
67904: PUSH
67905: EMPTY
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 0
67911: PUSH
67912: LD_INT 4
67914: NEG
67915: PUSH
67916: EMPTY
67917: LIST
67918: LIST
67919: PUSH
67920: LD_INT 0
67922: PUSH
67923: LD_INT 5
67925: NEG
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 1
67933: PUSH
67934: LD_INT 4
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 1
67944: PUSH
67945: LD_INT 3
67947: NEG
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 0
67955: PUSH
67956: LD_INT 3
67958: NEG
67959: PUSH
67960: EMPTY
67961: LIST
67962: LIST
67963: PUSH
67964: LD_INT 1
67966: NEG
67967: PUSH
67968: LD_INT 4
67970: NEG
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 1
67978: NEG
67979: PUSH
67980: LD_INT 5
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: LD_INT 2
67990: PUSH
67991: LD_INT 3
67993: NEG
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: PUSH
67999: LD_INT 2
68001: NEG
68002: PUSH
68003: LD_INT 5
68005: NEG
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: LIST
68042: LIST
68043: LIST
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68058: LD_ADDR_VAR 0 31
68062: PUSH
68063: LD_INT 0
68065: PUSH
68066: LD_INT 4
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: LD_INT 3
68078: PUSH
68079: EMPTY
68080: LIST
68081: LIST
68082: PUSH
68083: LD_INT 1
68085: PUSH
68086: LD_INT 4
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: PUSH
68093: LD_INT 1
68095: PUSH
68096: LD_INT 5
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 0
68105: PUSH
68106: LD_INT 5
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: PUSH
68113: LD_INT 1
68115: NEG
68116: PUSH
68117: LD_INT 4
68119: PUSH
68120: EMPTY
68121: LIST
68122: LIST
68123: PUSH
68124: LD_INT 1
68126: NEG
68127: PUSH
68128: LD_INT 3
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: PUSH
68135: LD_INT 2
68137: PUSH
68138: LD_INT 5
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 2
68147: NEG
68148: PUSH
68149: LD_INT 3
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 3
68158: NEG
68159: PUSH
68160: LD_INT 0
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 3
68169: NEG
68170: PUSH
68171: LD_INT 1
68173: NEG
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 2
68181: NEG
68182: PUSH
68183: LD_INT 0
68185: PUSH
68186: EMPTY
68187: LIST
68188: LIST
68189: PUSH
68190: LD_INT 2
68192: NEG
68193: PUSH
68194: LD_INT 1
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 3
68203: NEG
68204: PUSH
68205: LD_INT 1
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 4
68214: NEG
68215: PUSH
68216: LD_INT 0
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 4
68225: NEG
68226: PUSH
68227: LD_INT 1
68229: NEG
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 4
68237: NEG
68238: PUSH
68239: LD_INT 2
68241: NEG
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PUSH
68247: LD_INT 2
68249: NEG
68250: PUSH
68251: LD_INT 2
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 4
68260: NEG
68261: PUSH
68262: LD_INT 4
68264: NEG
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 4
68272: NEG
68273: PUSH
68274: LD_INT 5
68276: NEG
68277: PUSH
68278: EMPTY
68279: LIST
68280: LIST
68281: PUSH
68282: LD_INT 3
68284: NEG
68285: PUSH
68286: LD_INT 4
68288: NEG
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 3
68296: NEG
68297: PUSH
68298: LD_INT 3
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 4
68308: NEG
68309: PUSH
68310: LD_INT 3
68312: NEG
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 5
68320: NEG
68321: PUSH
68322: LD_INT 4
68324: NEG
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 5
68332: NEG
68333: PUSH
68334: LD_INT 5
68336: NEG
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 3
68344: NEG
68345: PUSH
68346: LD_INT 5
68348: NEG
68349: PUSH
68350: EMPTY
68351: LIST
68352: LIST
68353: PUSH
68354: LD_INT 5
68356: NEG
68357: PUSH
68358: LD_INT 3
68360: NEG
68361: PUSH
68362: EMPTY
68363: LIST
68364: LIST
68365: PUSH
68366: LD_INT 0
68368: PUSH
68369: LD_INT 3
68371: NEG
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 0
68379: PUSH
68380: LD_INT 4
68382: NEG
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 1
68390: PUSH
68391: LD_INT 3
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 1
68401: PUSH
68402: LD_INT 2
68404: NEG
68405: PUSH
68406: EMPTY
68407: LIST
68408: LIST
68409: PUSH
68410: LD_INT 0
68412: PUSH
68413: LD_INT 2
68415: NEG
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: PUSH
68421: LD_INT 1
68423: NEG
68424: PUSH
68425: LD_INT 3
68427: NEG
68428: PUSH
68429: EMPTY
68430: LIST
68431: LIST
68432: PUSH
68433: LD_INT 1
68435: NEG
68436: PUSH
68437: LD_INT 4
68439: NEG
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 2
68447: PUSH
68448: LD_INT 2
68450: NEG
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 2
68458: NEG
68459: PUSH
68460: LD_INT 4
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 4
68470: PUSH
68471: LD_INT 0
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 4
68480: PUSH
68481: LD_INT 1
68483: NEG
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 5
68491: PUSH
68492: LD_INT 0
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 5
68501: PUSH
68502: LD_INT 1
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 4
68511: PUSH
68512: LD_INT 1
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 3
68521: PUSH
68522: LD_INT 0
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 3
68531: PUSH
68532: LD_INT 1
68534: NEG
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 3
68542: PUSH
68543: LD_INT 2
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 5
68553: PUSH
68554: LD_INT 2
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: EMPTY
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: LIST
68599: LIST
68600: LIST
68601: LIST
68602: LIST
68603: LIST
68604: LIST
68605: LIST
68606: LIST
68607: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68608: LD_ADDR_VAR 0 32
68612: PUSH
68613: LD_INT 4
68615: NEG
68616: PUSH
68617: LD_INT 0
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 4
68626: NEG
68627: PUSH
68628: LD_INT 1
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 3
68638: NEG
68639: PUSH
68640: LD_INT 0
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 3
68649: NEG
68650: PUSH
68651: LD_INT 1
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 4
68660: NEG
68661: PUSH
68662: LD_INT 1
68664: PUSH
68665: EMPTY
68666: LIST
68667: LIST
68668: PUSH
68669: LD_INT 5
68671: NEG
68672: PUSH
68673: LD_INT 0
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 5
68682: NEG
68683: PUSH
68684: LD_INT 1
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 5
68694: NEG
68695: PUSH
68696: LD_INT 2
68698: NEG
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 3
68706: NEG
68707: PUSH
68708: LD_INT 2
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: PUSH
68715: LD_INT 3
68717: NEG
68718: PUSH
68719: LD_INT 3
68721: NEG
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 3
68729: NEG
68730: PUSH
68731: LD_INT 4
68733: NEG
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 2
68741: NEG
68742: PUSH
68743: LD_INT 3
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 2
68753: NEG
68754: PUSH
68755: LD_INT 2
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 3
68765: NEG
68766: PUSH
68767: LD_INT 2
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 4
68777: NEG
68778: PUSH
68779: LD_INT 3
68781: NEG
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 4
68789: NEG
68790: PUSH
68791: LD_INT 4
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 2
68801: NEG
68802: PUSH
68803: LD_INT 4
68805: NEG
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 4
68813: NEG
68814: PUSH
68815: LD_INT 2
68817: NEG
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 0
68825: PUSH
68826: LD_INT 4
68828: NEG
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 0
68836: PUSH
68837: LD_INT 5
68839: NEG
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 1
68847: PUSH
68848: LD_INT 4
68850: NEG
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 1
68858: PUSH
68859: LD_INT 3
68861: NEG
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 0
68869: PUSH
68870: LD_INT 3
68872: NEG
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 1
68880: NEG
68881: PUSH
68882: LD_INT 4
68884: NEG
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 1
68892: NEG
68893: PUSH
68894: LD_INT 5
68896: NEG
68897: PUSH
68898: EMPTY
68899: LIST
68900: LIST
68901: PUSH
68902: LD_INT 2
68904: PUSH
68905: LD_INT 3
68907: NEG
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: PUSH
68913: LD_INT 2
68915: NEG
68916: PUSH
68917: LD_INT 5
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 3
68927: PUSH
68928: LD_INT 0
68930: PUSH
68931: EMPTY
68932: LIST
68933: LIST
68934: PUSH
68935: LD_INT 3
68937: PUSH
68938: LD_INT 1
68940: NEG
68941: PUSH
68942: EMPTY
68943: LIST
68944: LIST
68945: PUSH
68946: LD_INT 4
68948: PUSH
68949: LD_INT 0
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 4
68958: PUSH
68959: LD_INT 1
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 3
68968: PUSH
68969: LD_INT 1
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 2
68978: PUSH
68979: LD_INT 0
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 2
68988: PUSH
68989: LD_INT 1
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 2
68999: PUSH
69000: LD_INT 2
69002: NEG
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 4
69010: PUSH
69011: LD_INT 2
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 4
69020: PUSH
69021: LD_INT 4
69023: PUSH
69024: EMPTY
69025: LIST
69026: LIST
69027: PUSH
69028: LD_INT 4
69030: PUSH
69031: LD_INT 3
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 5
69040: PUSH
69041: LD_INT 4
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 5
69050: PUSH
69051: LD_INT 5
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 4
69060: PUSH
69061: LD_INT 5
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 3
69070: PUSH
69071: LD_INT 4
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 3
69080: PUSH
69081: LD_INT 3
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 5
69090: PUSH
69091: LD_INT 3
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 3
69100: PUSH
69101: LD_INT 5
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: EMPTY
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69155: LD_ADDR_VAR 0 33
69159: PUSH
69160: LD_INT 4
69162: NEG
69163: PUSH
69164: LD_INT 4
69166: NEG
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: PUSH
69172: LD_INT 4
69174: NEG
69175: PUSH
69176: LD_INT 5
69178: NEG
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 3
69186: NEG
69187: PUSH
69188: LD_INT 4
69190: NEG
69191: PUSH
69192: EMPTY
69193: LIST
69194: LIST
69195: PUSH
69196: LD_INT 3
69198: NEG
69199: PUSH
69200: LD_INT 3
69202: NEG
69203: PUSH
69204: EMPTY
69205: LIST
69206: LIST
69207: PUSH
69208: LD_INT 4
69210: NEG
69211: PUSH
69212: LD_INT 3
69214: NEG
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 5
69222: NEG
69223: PUSH
69224: LD_INT 4
69226: NEG
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 5
69234: NEG
69235: PUSH
69236: LD_INT 5
69238: NEG
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 3
69246: NEG
69247: PUSH
69248: LD_INT 5
69250: NEG
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 5
69258: NEG
69259: PUSH
69260: LD_INT 3
69262: NEG
69263: PUSH
69264: EMPTY
69265: LIST
69266: LIST
69267: PUSH
69268: LD_INT 0
69270: PUSH
69271: LD_INT 3
69273: NEG
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 0
69281: PUSH
69282: LD_INT 4
69284: NEG
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: LD_INT 3
69295: NEG
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 1
69303: PUSH
69304: LD_INT 2
69306: NEG
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 0
69314: PUSH
69315: LD_INT 2
69317: NEG
69318: PUSH
69319: EMPTY
69320: LIST
69321: LIST
69322: PUSH
69323: LD_INT 1
69325: NEG
69326: PUSH
69327: LD_INT 3
69329: NEG
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: PUSH
69335: LD_INT 1
69337: NEG
69338: PUSH
69339: LD_INT 4
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 2
69349: PUSH
69350: LD_INT 2
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 2
69360: NEG
69361: PUSH
69362: LD_INT 4
69364: NEG
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 4
69372: PUSH
69373: LD_INT 0
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 4
69382: PUSH
69383: LD_INT 1
69385: NEG
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 5
69393: PUSH
69394: LD_INT 0
69396: PUSH
69397: EMPTY
69398: LIST
69399: LIST
69400: PUSH
69401: LD_INT 5
69403: PUSH
69404: LD_INT 1
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: PUSH
69411: LD_INT 4
69413: PUSH
69414: LD_INT 1
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 3
69423: PUSH
69424: LD_INT 0
69426: PUSH
69427: EMPTY
69428: LIST
69429: LIST
69430: PUSH
69431: LD_INT 3
69433: PUSH
69434: LD_INT 1
69436: NEG
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 3
69444: PUSH
69445: LD_INT 2
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 5
69455: PUSH
69456: LD_INT 2
69458: PUSH
69459: EMPTY
69460: LIST
69461: LIST
69462: PUSH
69463: LD_INT 3
69465: PUSH
69466: LD_INT 3
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: PUSH
69473: LD_INT 3
69475: PUSH
69476: LD_INT 2
69478: PUSH
69479: EMPTY
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 4
69485: PUSH
69486: LD_INT 3
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 4
69495: PUSH
69496: LD_INT 4
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 3
69505: PUSH
69506: LD_INT 4
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 2
69515: PUSH
69516: LD_INT 3
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 2
69525: PUSH
69526: LD_INT 2
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 4
69535: PUSH
69536: LD_INT 2
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 2
69545: PUSH
69546: LD_INT 4
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 0
69555: PUSH
69556: LD_INT 4
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 0
69565: PUSH
69566: LD_INT 3
69568: PUSH
69569: EMPTY
69570: LIST
69571: LIST
69572: PUSH
69573: LD_INT 1
69575: PUSH
69576: LD_INT 4
69578: PUSH
69579: EMPTY
69580: LIST
69581: LIST
69582: PUSH
69583: LD_INT 1
69585: PUSH
69586: LD_INT 5
69588: PUSH
69589: EMPTY
69590: LIST
69591: LIST
69592: PUSH
69593: LD_INT 0
69595: PUSH
69596: LD_INT 5
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 1
69605: NEG
69606: PUSH
69607: LD_INT 4
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 1
69616: NEG
69617: PUSH
69618: LD_INT 3
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 2
69627: PUSH
69628: LD_INT 5
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 2
69637: NEG
69638: PUSH
69639: LD_INT 3
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: EMPTY
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69693: LD_ADDR_VAR 0 34
69697: PUSH
69698: LD_INT 0
69700: PUSH
69701: LD_INT 4
69703: NEG
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 0
69711: PUSH
69712: LD_INT 5
69714: NEG
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: LD_INT 1
69722: PUSH
69723: LD_INT 4
69725: NEG
69726: PUSH
69727: EMPTY
69728: LIST
69729: LIST
69730: PUSH
69731: LD_INT 1
69733: PUSH
69734: LD_INT 3
69736: NEG
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: PUSH
69742: LD_INT 0
69744: PUSH
69745: LD_INT 3
69747: NEG
69748: PUSH
69749: EMPTY
69750: LIST
69751: LIST
69752: PUSH
69753: LD_INT 1
69755: NEG
69756: PUSH
69757: LD_INT 4
69759: NEG
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 1
69767: NEG
69768: PUSH
69769: LD_INT 5
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 2
69779: PUSH
69780: LD_INT 3
69782: NEG
69783: PUSH
69784: EMPTY
69785: LIST
69786: LIST
69787: PUSH
69788: LD_INT 2
69790: NEG
69791: PUSH
69792: LD_INT 5
69794: NEG
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 3
69802: PUSH
69803: LD_INT 0
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 3
69812: PUSH
69813: LD_INT 1
69815: NEG
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 4
69823: PUSH
69824: LD_INT 0
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 4
69833: PUSH
69834: LD_INT 1
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 3
69843: PUSH
69844: LD_INT 1
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 2
69853: PUSH
69854: LD_INT 0
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 2
69863: PUSH
69864: LD_INT 1
69866: NEG
69867: PUSH
69868: EMPTY
69869: LIST
69870: LIST
69871: PUSH
69872: LD_INT 2
69874: PUSH
69875: LD_INT 2
69877: NEG
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 4
69885: PUSH
69886: LD_INT 2
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PUSH
69893: LD_INT 4
69895: PUSH
69896: LD_INT 4
69898: PUSH
69899: EMPTY
69900: LIST
69901: LIST
69902: PUSH
69903: LD_INT 4
69905: PUSH
69906: LD_INT 3
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 5
69915: PUSH
69916: LD_INT 4
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 5
69925: PUSH
69926: LD_INT 5
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 4
69935: PUSH
69936: LD_INT 5
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 3
69945: PUSH
69946: LD_INT 4
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 3
69955: PUSH
69956: LD_INT 3
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 5
69965: PUSH
69966: LD_INT 3
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 3
69975: PUSH
69976: LD_INT 5
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 0
69985: PUSH
69986: LD_INT 3
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 0
69995: PUSH
69996: LD_INT 2
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 1
70005: PUSH
70006: LD_INT 3
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 1
70015: PUSH
70016: LD_INT 4
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 0
70025: PUSH
70026: LD_INT 4
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 1
70035: NEG
70036: PUSH
70037: LD_INT 3
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 1
70046: NEG
70047: PUSH
70048: LD_INT 2
70050: PUSH
70051: EMPTY
70052: LIST
70053: LIST
70054: PUSH
70055: LD_INT 2
70057: PUSH
70058: LD_INT 4
70060: PUSH
70061: EMPTY
70062: LIST
70063: LIST
70064: PUSH
70065: LD_INT 2
70067: NEG
70068: PUSH
70069: LD_INT 2
70071: PUSH
70072: EMPTY
70073: LIST
70074: LIST
70075: PUSH
70076: LD_INT 4
70078: NEG
70079: PUSH
70080: LD_INT 0
70082: PUSH
70083: EMPTY
70084: LIST
70085: LIST
70086: PUSH
70087: LD_INT 4
70089: NEG
70090: PUSH
70091: LD_INT 1
70093: NEG
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 3
70101: NEG
70102: PUSH
70103: LD_INT 0
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 3
70112: NEG
70113: PUSH
70114: LD_INT 1
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 4
70123: NEG
70124: PUSH
70125: LD_INT 1
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 5
70134: NEG
70135: PUSH
70136: LD_INT 0
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 5
70145: NEG
70146: PUSH
70147: LD_INT 1
70149: NEG
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 5
70157: NEG
70158: PUSH
70159: LD_INT 2
70161: NEG
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 3
70169: NEG
70170: PUSH
70171: LD_INT 2
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: LIST
70224: ST_TO_ADDR
// end ; end ;
70225: GO 70228
70227: POP
// case btype of b_depot , b_warehouse :
70228: LD_VAR 0 1
70232: PUSH
70233: LD_INT 0
70235: DOUBLE
70236: EQUAL
70237: IFTRUE 70247
70239: LD_INT 1
70241: DOUBLE
70242: EQUAL
70243: IFTRUE 70247
70245: GO 70448
70247: POP
// case nation of nation_american :
70248: LD_VAR 0 5
70252: PUSH
70253: LD_INT 1
70255: DOUBLE
70256: EQUAL
70257: IFTRUE 70261
70259: GO 70317
70261: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70262: LD_ADDR_VAR 0 9
70266: PUSH
70267: LD_VAR 0 11
70271: PUSH
70272: LD_VAR 0 12
70276: PUSH
70277: LD_VAR 0 13
70281: PUSH
70282: LD_VAR 0 14
70286: PUSH
70287: LD_VAR 0 15
70291: PUSH
70292: LD_VAR 0 16
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: PUSH
70305: LD_VAR 0 4
70309: PUSH
70310: LD_INT 1
70312: PLUS
70313: ARRAY
70314: ST_TO_ADDR
70315: GO 70446
70317: LD_INT 2
70319: DOUBLE
70320: EQUAL
70321: IFTRUE 70325
70323: GO 70381
70325: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70326: LD_ADDR_VAR 0 9
70330: PUSH
70331: LD_VAR 0 17
70335: PUSH
70336: LD_VAR 0 18
70340: PUSH
70341: LD_VAR 0 19
70345: PUSH
70346: LD_VAR 0 20
70350: PUSH
70351: LD_VAR 0 21
70355: PUSH
70356: LD_VAR 0 22
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: PUSH
70369: LD_VAR 0 4
70373: PUSH
70374: LD_INT 1
70376: PLUS
70377: ARRAY
70378: ST_TO_ADDR
70379: GO 70446
70381: LD_INT 3
70383: DOUBLE
70384: EQUAL
70385: IFTRUE 70389
70387: GO 70445
70389: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70390: LD_ADDR_VAR 0 9
70394: PUSH
70395: LD_VAR 0 23
70399: PUSH
70400: LD_VAR 0 24
70404: PUSH
70405: LD_VAR 0 25
70409: PUSH
70410: LD_VAR 0 26
70414: PUSH
70415: LD_VAR 0 27
70419: PUSH
70420: LD_VAR 0 28
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: PUSH
70433: LD_VAR 0 4
70437: PUSH
70438: LD_INT 1
70440: PLUS
70441: ARRAY
70442: ST_TO_ADDR
70443: GO 70446
70445: POP
70446: GO 71001
70448: LD_INT 2
70450: DOUBLE
70451: EQUAL
70452: IFTRUE 70462
70454: LD_INT 3
70456: DOUBLE
70457: EQUAL
70458: IFTRUE 70462
70460: GO 70518
70462: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70463: LD_ADDR_VAR 0 9
70467: PUSH
70468: LD_VAR 0 29
70472: PUSH
70473: LD_VAR 0 30
70477: PUSH
70478: LD_VAR 0 31
70482: PUSH
70483: LD_VAR 0 32
70487: PUSH
70488: LD_VAR 0 33
70492: PUSH
70493: LD_VAR 0 34
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: PUSH
70506: LD_VAR 0 4
70510: PUSH
70511: LD_INT 1
70513: PLUS
70514: ARRAY
70515: ST_TO_ADDR
70516: GO 71001
70518: LD_INT 16
70520: DOUBLE
70521: EQUAL
70522: IFTRUE 70580
70524: LD_INT 17
70526: DOUBLE
70527: EQUAL
70528: IFTRUE 70580
70530: LD_INT 18
70532: DOUBLE
70533: EQUAL
70534: IFTRUE 70580
70536: LD_INT 19
70538: DOUBLE
70539: EQUAL
70540: IFTRUE 70580
70542: LD_INT 22
70544: DOUBLE
70545: EQUAL
70546: IFTRUE 70580
70548: LD_INT 20
70550: DOUBLE
70551: EQUAL
70552: IFTRUE 70580
70554: LD_INT 21
70556: DOUBLE
70557: EQUAL
70558: IFTRUE 70580
70560: LD_INT 23
70562: DOUBLE
70563: EQUAL
70564: IFTRUE 70580
70566: LD_INT 24
70568: DOUBLE
70569: EQUAL
70570: IFTRUE 70580
70572: LD_INT 25
70574: DOUBLE
70575: EQUAL
70576: IFTRUE 70580
70578: GO 70636
70580: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70581: LD_ADDR_VAR 0 9
70585: PUSH
70586: LD_VAR 0 35
70590: PUSH
70591: LD_VAR 0 36
70595: PUSH
70596: LD_VAR 0 37
70600: PUSH
70601: LD_VAR 0 38
70605: PUSH
70606: LD_VAR 0 39
70610: PUSH
70611: LD_VAR 0 40
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: PUSH
70624: LD_VAR 0 4
70628: PUSH
70629: LD_INT 1
70631: PLUS
70632: ARRAY
70633: ST_TO_ADDR
70634: GO 71001
70636: LD_INT 6
70638: DOUBLE
70639: EQUAL
70640: IFTRUE 70692
70642: LD_INT 7
70644: DOUBLE
70645: EQUAL
70646: IFTRUE 70692
70648: LD_INT 8
70650: DOUBLE
70651: EQUAL
70652: IFTRUE 70692
70654: LD_INT 13
70656: DOUBLE
70657: EQUAL
70658: IFTRUE 70692
70660: LD_INT 12
70662: DOUBLE
70663: EQUAL
70664: IFTRUE 70692
70666: LD_INT 15
70668: DOUBLE
70669: EQUAL
70670: IFTRUE 70692
70672: LD_INT 11
70674: DOUBLE
70675: EQUAL
70676: IFTRUE 70692
70678: LD_INT 14
70680: DOUBLE
70681: EQUAL
70682: IFTRUE 70692
70684: LD_INT 10
70686: DOUBLE
70687: EQUAL
70688: IFTRUE 70692
70690: GO 70748
70692: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70693: LD_ADDR_VAR 0 9
70697: PUSH
70698: LD_VAR 0 41
70702: PUSH
70703: LD_VAR 0 42
70707: PUSH
70708: LD_VAR 0 43
70712: PUSH
70713: LD_VAR 0 44
70717: PUSH
70718: LD_VAR 0 45
70722: PUSH
70723: LD_VAR 0 46
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: PUSH
70736: LD_VAR 0 4
70740: PUSH
70741: LD_INT 1
70743: PLUS
70744: ARRAY
70745: ST_TO_ADDR
70746: GO 71001
70748: LD_INT 36
70750: DOUBLE
70751: EQUAL
70752: IFTRUE 70756
70754: GO 70812
70756: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70757: LD_ADDR_VAR 0 9
70761: PUSH
70762: LD_VAR 0 47
70766: PUSH
70767: LD_VAR 0 48
70771: PUSH
70772: LD_VAR 0 49
70776: PUSH
70777: LD_VAR 0 50
70781: PUSH
70782: LD_VAR 0 51
70786: PUSH
70787: LD_VAR 0 52
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: LIST
70799: PUSH
70800: LD_VAR 0 4
70804: PUSH
70805: LD_INT 1
70807: PLUS
70808: ARRAY
70809: ST_TO_ADDR
70810: GO 71001
70812: LD_INT 4
70814: DOUBLE
70815: EQUAL
70816: IFTRUE 70838
70818: LD_INT 5
70820: DOUBLE
70821: EQUAL
70822: IFTRUE 70838
70824: LD_INT 34
70826: DOUBLE
70827: EQUAL
70828: IFTRUE 70838
70830: LD_INT 37
70832: DOUBLE
70833: EQUAL
70834: IFTRUE 70838
70836: GO 70894
70838: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70839: LD_ADDR_VAR 0 9
70843: PUSH
70844: LD_VAR 0 53
70848: PUSH
70849: LD_VAR 0 54
70853: PUSH
70854: LD_VAR 0 55
70858: PUSH
70859: LD_VAR 0 56
70863: PUSH
70864: LD_VAR 0 57
70868: PUSH
70869: LD_VAR 0 58
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: PUSH
70882: LD_VAR 0 4
70886: PUSH
70887: LD_INT 1
70889: PLUS
70890: ARRAY
70891: ST_TO_ADDR
70892: GO 71001
70894: LD_INT 31
70896: DOUBLE
70897: EQUAL
70898: IFTRUE 70944
70900: LD_INT 32
70902: DOUBLE
70903: EQUAL
70904: IFTRUE 70944
70906: LD_INT 33
70908: DOUBLE
70909: EQUAL
70910: IFTRUE 70944
70912: LD_INT 27
70914: DOUBLE
70915: EQUAL
70916: IFTRUE 70944
70918: LD_INT 26
70920: DOUBLE
70921: EQUAL
70922: IFTRUE 70944
70924: LD_INT 28
70926: DOUBLE
70927: EQUAL
70928: IFTRUE 70944
70930: LD_INT 29
70932: DOUBLE
70933: EQUAL
70934: IFTRUE 70944
70936: LD_INT 30
70938: DOUBLE
70939: EQUAL
70940: IFTRUE 70944
70942: GO 71000
70944: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70945: LD_ADDR_VAR 0 9
70949: PUSH
70950: LD_VAR 0 59
70954: PUSH
70955: LD_VAR 0 60
70959: PUSH
70960: LD_VAR 0 61
70964: PUSH
70965: LD_VAR 0 62
70969: PUSH
70970: LD_VAR 0 63
70974: PUSH
70975: LD_VAR 0 64
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: PUSH
70988: LD_VAR 0 4
70992: PUSH
70993: LD_INT 1
70995: PLUS
70996: ARRAY
70997: ST_TO_ADDR
70998: GO 71001
71000: POP
// temp_list2 = [ ] ;
71001: LD_ADDR_VAR 0 10
71005: PUSH
71006: EMPTY
71007: ST_TO_ADDR
// for i in temp_list do
71008: LD_ADDR_VAR 0 8
71012: PUSH
71013: LD_VAR 0 9
71017: PUSH
71018: FOR_IN
71019: IFFALSE 71071
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71021: LD_ADDR_VAR 0 10
71025: PUSH
71026: LD_VAR 0 10
71030: PUSH
71031: LD_VAR 0 8
71035: PUSH
71036: LD_INT 1
71038: ARRAY
71039: PUSH
71040: LD_VAR 0 2
71044: PLUS
71045: PUSH
71046: LD_VAR 0 8
71050: PUSH
71051: LD_INT 2
71053: ARRAY
71054: PUSH
71055: LD_VAR 0 3
71059: PLUS
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: EMPTY
71066: LIST
71067: ADD
71068: ST_TO_ADDR
71069: GO 71018
71071: POP
71072: POP
// result = temp_list2 ;
71073: LD_ADDR_VAR 0 7
71077: PUSH
71078: LD_VAR 0 10
71082: ST_TO_ADDR
// end ;
71083: LD_VAR 0 7
71087: RET
// export function EnemyInRange ( unit , dist ) ; begin
71088: LD_INT 0
71090: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71091: LD_ADDR_VAR 0 3
71095: PUSH
71096: LD_VAR 0 1
71100: PPUSH
71101: CALL_OW 255
71105: PPUSH
71106: LD_VAR 0 1
71110: PPUSH
71111: CALL_OW 250
71115: PPUSH
71116: LD_VAR 0 1
71120: PPUSH
71121: CALL_OW 251
71125: PPUSH
71126: LD_VAR 0 2
71130: PPUSH
71131: CALL 44484 0 4
71135: PUSH
71136: LD_INT 4
71138: ARRAY
71139: ST_TO_ADDR
// end ;
71140: LD_VAR 0 3
71144: RET
// export function PlayerSeeMe ( unit ) ; begin
71145: LD_INT 0
71147: PPUSH
// result := See ( your_side , unit ) ;
71148: LD_ADDR_VAR 0 2
71152: PUSH
71153: LD_OWVAR 2
71157: PPUSH
71158: LD_VAR 0 1
71162: PPUSH
71163: CALL_OW 292
71167: ST_TO_ADDR
// end ;
71168: LD_VAR 0 2
71172: RET
// export function ReverseDir ( unit ) ; begin
71173: LD_INT 0
71175: PPUSH
// if not unit then
71176: LD_VAR 0 1
71180: NOT
71181: IFFALSE 71185
// exit ;
71183: GO 71208
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71185: LD_ADDR_VAR 0 2
71189: PUSH
71190: LD_VAR 0 1
71194: PPUSH
71195: CALL_OW 254
71199: PUSH
71200: LD_INT 3
71202: PLUS
71203: PUSH
71204: LD_INT 6
71206: MOD
71207: ST_TO_ADDR
// end ;
71208: LD_VAR 0 2
71212: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
71213: LD_INT 0
71215: PPUSH
71216: PPUSH
71217: PPUSH
71218: PPUSH
71219: PPUSH
// if not hexes then
71220: LD_VAR 0 2
71224: NOT
71225: IFFALSE 71229
// exit ;
71227: GO 71377
// dist := 9999 ;
71229: LD_ADDR_VAR 0 5
71233: PUSH
71234: LD_INT 9999
71236: ST_TO_ADDR
// for i = 1 to hexes do
71237: LD_ADDR_VAR 0 4
71241: PUSH
71242: DOUBLE
71243: LD_INT 1
71245: DEC
71246: ST_TO_ADDR
71247: LD_VAR 0 2
71251: PUSH
71252: FOR_TO
71253: IFFALSE 71365
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71255: LD_VAR 0 1
71259: PPUSH
71260: LD_VAR 0 2
71264: PUSH
71265: LD_VAR 0 4
71269: ARRAY
71270: PUSH
71271: LD_INT 1
71273: ARRAY
71274: PPUSH
71275: LD_VAR 0 2
71279: PUSH
71280: LD_VAR 0 4
71284: ARRAY
71285: PUSH
71286: LD_INT 2
71288: ARRAY
71289: PPUSH
71290: CALL_OW 297
71294: PUSH
71295: LD_VAR 0 5
71299: LESS
71300: IFFALSE 71363
// begin hex := hexes [ i ] ;
71302: LD_ADDR_VAR 0 7
71306: PUSH
71307: LD_VAR 0 2
71311: PUSH
71312: LD_VAR 0 4
71316: ARRAY
71317: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71318: LD_ADDR_VAR 0 5
71322: PUSH
71323: LD_VAR 0 1
71327: PPUSH
71328: LD_VAR 0 2
71332: PUSH
71333: LD_VAR 0 4
71337: ARRAY
71338: PUSH
71339: LD_INT 1
71341: ARRAY
71342: PPUSH
71343: LD_VAR 0 2
71347: PUSH
71348: LD_VAR 0 4
71352: ARRAY
71353: PUSH
71354: LD_INT 2
71356: ARRAY
71357: PPUSH
71358: CALL_OW 297
71362: ST_TO_ADDR
// end ; end ;
71363: GO 71252
71365: POP
71366: POP
// result := hex ;
71367: LD_ADDR_VAR 0 3
71371: PUSH
71372: LD_VAR 0 7
71376: ST_TO_ADDR
// end ;
71377: LD_VAR 0 3
71381: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71382: LD_INT 0
71384: PPUSH
71385: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71386: LD_VAR 0 1
71390: NOT
71391: PUSH
71392: LD_VAR 0 1
71396: PUSH
71397: LD_INT 21
71399: PUSH
71400: LD_INT 2
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 23
71409: PUSH
71410: LD_INT 2
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: EMPTY
71418: LIST
71419: LIST
71420: PPUSH
71421: CALL_OW 69
71425: IN
71426: NOT
71427: OR
71428: IFFALSE 71432
// exit ;
71430: GO 71479
// for i = 1 to 3 do
71432: LD_ADDR_VAR 0 3
71436: PUSH
71437: DOUBLE
71438: LD_INT 1
71440: DEC
71441: ST_TO_ADDR
71442: LD_INT 3
71444: PUSH
71445: FOR_TO
71446: IFFALSE 71477
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71448: LD_VAR 0 1
71452: PPUSH
71453: CALL_OW 250
71457: PPUSH
71458: LD_VAR 0 1
71462: PPUSH
71463: CALL_OW 251
71467: PPUSH
71468: LD_INT 1
71470: PPUSH
71471: CALL_OW 453
71475: GO 71445
71477: POP
71478: POP
// end ;
71479: LD_VAR 0 2
71483: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71484: LD_INT 0
71486: PPUSH
71487: PPUSH
71488: PPUSH
71489: PPUSH
71490: PPUSH
71491: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71492: LD_VAR 0 1
71496: NOT
71497: PUSH
71498: LD_VAR 0 2
71502: NOT
71503: OR
71504: PUSH
71505: LD_VAR 0 1
71509: PPUSH
71510: CALL_OW 314
71514: OR
71515: IFFALSE 71519
// exit ;
71517: GO 71960
// x := GetX ( enemy_unit ) ;
71519: LD_ADDR_VAR 0 7
71523: PUSH
71524: LD_VAR 0 2
71528: PPUSH
71529: CALL_OW 250
71533: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71534: LD_ADDR_VAR 0 8
71538: PUSH
71539: LD_VAR 0 2
71543: PPUSH
71544: CALL_OW 251
71548: ST_TO_ADDR
// if not x or not y then
71549: LD_VAR 0 7
71553: NOT
71554: PUSH
71555: LD_VAR 0 8
71559: NOT
71560: OR
71561: IFFALSE 71565
// exit ;
71563: GO 71960
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71565: LD_ADDR_VAR 0 6
71569: PUSH
71570: LD_VAR 0 7
71574: PPUSH
71575: LD_INT 0
71577: PPUSH
71578: LD_INT 4
71580: PPUSH
71581: CALL_OW 272
71585: PUSH
71586: LD_VAR 0 8
71590: PPUSH
71591: LD_INT 0
71593: PPUSH
71594: LD_INT 4
71596: PPUSH
71597: CALL_OW 273
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_VAR 0 7
71610: PPUSH
71611: LD_INT 1
71613: PPUSH
71614: LD_INT 4
71616: PPUSH
71617: CALL_OW 272
71621: PUSH
71622: LD_VAR 0 8
71626: PPUSH
71627: LD_INT 1
71629: PPUSH
71630: LD_INT 4
71632: PPUSH
71633: CALL_OW 273
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PUSH
71642: LD_VAR 0 7
71646: PPUSH
71647: LD_INT 2
71649: PPUSH
71650: LD_INT 4
71652: PPUSH
71653: CALL_OW 272
71657: PUSH
71658: LD_VAR 0 8
71662: PPUSH
71663: LD_INT 2
71665: PPUSH
71666: LD_INT 4
71668: PPUSH
71669: CALL_OW 273
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_VAR 0 7
71682: PPUSH
71683: LD_INT 3
71685: PPUSH
71686: LD_INT 4
71688: PPUSH
71689: CALL_OW 272
71693: PUSH
71694: LD_VAR 0 8
71698: PPUSH
71699: LD_INT 3
71701: PPUSH
71702: LD_INT 4
71704: PPUSH
71705: CALL_OW 273
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PUSH
71714: LD_VAR 0 7
71718: PPUSH
71719: LD_INT 4
71721: PPUSH
71722: LD_INT 4
71724: PPUSH
71725: CALL_OW 272
71729: PUSH
71730: LD_VAR 0 8
71734: PPUSH
71735: LD_INT 4
71737: PPUSH
71738: LD_INT 4
71740: PPUSH
71741: CALL_OW 273
71745: PUSH
71746: EMPTY
71747: LIST
71748: LIST
71749: PUSH
71750: LD_VAR 0 7
71754: PPUSH
71755: LD_INT 5
71757: PPUSH
71758: LD_INT 4
71760: PPUSH
71761: CALL_OW 272
71765: PUSH
71766: LD_VAR 0 8
71770: PPUSH
71771: LD_INT 5
71773: PPUSH
71774: LD_INT 4
71776: PPUSH
71777: CALL_OW 273
71781: PUSH
71782: EMPTY
71783: LIST
71784: LIST
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: ST_TO_ADDR
// for i = tmp downto 1 do
71794: LD_ADDR_VAR 0 4
71798: PUSH
71799: DOUBLE
71800: LD_VAR 0 6
71804: INC
71805: ST_TO_ADDR
71806: LD_INT 1
71808: PUSH
71809: FOR_DOWNTO
71810: IFFALSE 71911
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71812: LD_VAR 0 6
71816: PUSH
71817: LD_VAR 0 4
71821: ARRAY
71822: PUSH
71823: LD_INT 1
71825: ARRAY
71826: PPUSH
71827: LD_VAR 0 6
71831: PUSH
71832: LD_VAR 0 4
71836: ARRAY
71837: PUSH
71838: LD_INT 2
71840: ARRAY
71841: PPUSH
71842: CALL_OW 488
71846: NOT
71847: PUSH
71848: LD_VAR 0 6
71852: PUSH
71853: LD_VAR 0 4
71857: ARRAY
71858: PUSH
71859: LD_INT 1
71861: ARRAY
71862: PPUSH
71863: LD_VAR 0 6
71867: PUSH
71868: LD_VAR 0 4
71872: ARRAY
71873: PUSH
71874: LD_INT 2
71876: ARRAY
71877: PPUSH
71878: CALL_OW 428
71882: PUSH
71883: LD_INT 0
71885: NONEQUAL
71886: OR
71887: IFFALSE 71909
// tmp := Delete ( tmp , i ) ;
71889: LD_ADDR_VAR 0 6
71893: PUSH
71894: LD_VAR 0 6
71898: PPUSH
71899: LD_VAR 0 4
71903: PPUSH
71904: CALL_OW 3
71908: ST_TO_ADDR
71909: GO 71809
71911: POP
71912: POP
// j := GetClosestHex ( unit , tmp ) ;
71913: LD_ADDR_VAR 0 5
71917: PUSH
71918: LD_VAR 0 1
71922: PPUSH
71923: LD_VAR 0 6
71927: PPUSH
71928: CALL 71213 0 2
71932: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71933: LD_VAR 0 1
71937: PPUSH
71938: LD_VAR 0 5
71942: PUSH
71943: LD_INT 1
71945: ARRAY
71946: PPUSH
71947: LD_VAR 0 5
71951: PUSH
71952: LD_INT 2
71954: ARRAY
71955: PPUSH
71956: CALL_OW 111
// end ;
71960: LD_VAR 0 3
71964: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71965: LD_INT 0
71967: PPUSH
71968: PPUSH
71969: PPUSH
// uc_side = 0 ;
71970: LD_ADDR_OWVAR 20
71974: PUSH
71975: LD_INT 0
71977: ST_TO_ADDR
// uc_nation = 0 ;
71978: LD_ADDR_OWVAR 21
71982: PUSH
71983: LD_INT 0
71985: ST_TO_ADDR
// InitHc_All ( ) ;
71986: CALL_OW 584
// InitVc ;
71990: CALL_OW 20
// if mastodonts then
71994: LD_VAR 0 6
71998: IFFALSE 72065
// for i = 1 to mastodonts do
72000: LD_ADDR_VAR 0 11
72004: PUSH
72005: DOUBLE
72006: LD_INT 1
72008: DEC
72009: ST_TO_ADDR
72010: LD_VAR 0 6
72014: PUSH
72015: FOR_TO
72016: IFFALSE 72063
// begin vc_chassis := 31 ;
72018: LD_ADDR_OWVAR 37
72022: PUSH
72023: LD_INT 31
72025: ST_TO_ADDR
// vc_control := control_rider ;
72026: LD_ADDR_OWVAR 38
72030: PUSH
72031: LD_INT 4
72033: ST_TO_ADDR
// animal := CreateVehicle ;
72034: LD_ADDR_VAR 0 12
72038: PUSH
72039: CALL_OW 45
72043: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72044: LD_VAR 0 12
72048: PPUSH
72049: LD_VAR 0 8
72053: PPUSH
72054: LD_INT 0
72056: PPUSH
72057: CALL 74200 0 3
// end ;
72061: GO 72015
72063: POP
72064: POP
// if horses then
72065: LD_VAR 0 5
72069: IFFALSE 72136
// for i = 1 to horses do
72071: LD_ADDR_VAR 0 11
72075: PUSH
72076: DOUBLE
72077: LD_INT 1
72079: DEC
72080: ST_TO_ADDR
72081: LD_VAR 0 5
72085: PUSH
72086: FOR_TO
72087: IFFALSE 72134
// begin hc_class := 21 ;
72089: LD_ADDR_OWVAR 28
72093: PUSH
72094: LD_INT 21
72096: ST_TO_ADDR
// hc_gallery :=  ;
72097: LD_ADDR_OWVAR 33
72101: PUSH
72102: LD_STRING 
72104: ST_TO_ADDR
// animal := CreateHuman ;
72105: LD_ADDR_VAR 0 12
72109: PUSH
72110: CALL_OW 44
72114: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72115: LD_VAR 0 12
72119: PPUSH
72120: LD_VAR 0 8
72124: PPUSH
72125: LD_INT 0
72127: PPUSH
72128: CALL 74200 0 3
// end ;
72132: GO 72086
72134: POP
72135: POP
// if birds then
72136: LD_VAR 0 1
72140: IFFALSE 72207
// for i = 1 to birds do
72142: LD_ADDR_VAR 0 11
72146: PUSH
72147: DOUBLE
72148: LD_INT 1
72150: DEC
72151: ST_TO_ADDR
72152: LD_VAR 0 1
72156: PUSH
72157: FOR_TO
72158: IFFALSE 72205
// begin hc_class = 18 ;
72160: LD_ADDR_OWVAR 28
72164: PUSH
72165: LD_INT 18
72167: ST_TO_ADDR
// hc_gallery =  ;
72168: LD_ADDR_OWVAR 33
72172: PUSH
72173: LD_STRING 
72175: ST_TO_ADDR
// animal := CreateHuman ;
72176: LD_ADDR_VAR 0 12
72180: PUSH
72181: CALL_OW 44
72185: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72186: LD_VAR 0 12
72190: PPUSH
72191: LD_VAR 0 8
72195: PPUSH
72196: LD_INT 0
72198: PPUSH
72199: CALL 74200 0 3
// end ;
72203: GO 72157
72205: POP
72206: POP
// if tigers then
72207: LD_VAR 0 2
72211: IFFALSE 72295
// for i = 1 to tigers do
72213: LD_ADDR_VAR 0 11
72217: PUSH
72218: DOUBLE
72219: LD_INT 1
72221: DEC
72222: ST_TO_ADDR
72223: LD_VAR 0 2
72227: PUSH
72228: FOR_TO
72229: IFFALSE 72293
// begin hc_class = class_tiger ;
72231: LD_ADDR_OWVAR 28
72235: PUSH
72236: LD_INT 14
72238: ST_TO_ADDR
// hc_gallery =  ;
72239: LD_ADDR_OWVAR 33
72243: PUSH
72244: LD_STRING 
72246: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
72247: LD_ADDR_OWVAR 35
72251: PUSH
72252: LD_INT 7
72254: NEG
72255: PPUSH
72256: LD_INT 7
72258: PPUSH
72259: CALL_OW 12
72263: ST_TO_ADDR
// animal := CreateHuman ;
72264: LD_ADDR_VAR 0 12
72268: PUSH
72269: CALL_OW 44
72273: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72274: LD_VAR 0 12
72278: PPUSH
72279: LD_VAR 0 8
72283: PPUSH
72284: LD_INT 0
72286: PPUSH
72287: CALL 74200 0 3
// end ;
72291: GO 72228
72293: POP
72294: POP
// if apemans then
72295: LD_VAR 0 3
72299: IFFALSE 72422
// for i = 1 to apemans do
72301: LD_ADDR_VAR 0 11
72305: PUSH
72306: DOUBLE
72307: LD_INT 1
72309: DEC
72310: ST_TO_ADDR
72311: LD_VAR 0 3
72315: PUSH
72316: FOR_TO
72317: IFFALSE 72420
// begin hc_class = class_apeman ;
72319: LD_ADDR_OWVAR 28
72323: PUSH
72324: LD_INT 12
72326: ST_TO_ADDR
// hc_gallery =  ;
72327: LD_ADDR_OWVAR 33
72331: PUSH
72332: LD_STRING 
72334: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72335: LD_ADDR_OWVAR 35
72339: PUSH
72340: LD_INT 2
72342: NEG
72343: PPUSH
72344: LD_INT 2
72346: PPUSH
72347: CALL_OW 12
72351: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72352: LD_ADDR_OWVAR 31
72356: PUSH
72357: LD_INT 1
72359: PPUSH
72360: LD_INT 3
72362: PPUSH
72363: CALL_OW 12
72367: PUSH
72368: LD_INT 1
72370: PPUSH
72371: LD_INT 3
72373: PPUSH
72374: CALL_OW 12
72378: PUSH
72379: LD_INT 0
72381: PUSH
72382: LD_INT 0
72384: PUSH
72385: EMPTY
72386: LIST
72387: LIST
72388: LIST
72389: LIST
72390: ST_TO_ADDR
// animal := CreateHuman ;
72391: LD_ADDR_VAR 0 12
72395: PUSH
72396: CALL_OW 44
72400: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72401: LD_VAR 0 12
72405: PPUSH
72406: LD_VAR 0 8
72410: PPUSH
72411: LD_INT 0
72413: PPUSH
72414: CALL 74200 0 3
// end ;
72418: GO 72316
72420: POP
72421: POP
// if enchidnas then
72422: LD_VAR 0 4
72426: IFFALSE 72493
// for i = 1 to enchidnas do
72428: LD_ADDR_VAR 0 11
72432: PUSH
72433: DOUBLE
72434: LD_INT 1
72436: DEC
72437: ST_TO_ADDR
72438: LD_VAR 0 4
72442: PUSH
72443: FOR_TO
72444: IFFALSE 72491
// begin hc_class = 13 ;
72446: LD_ADDR_OWVAR 28
72450: PUSH
72451: LD_INT 13
72453: ST_TO_ADDR
// hc_gallery =  ;
72454: LD_ADDR_OWVAR 33
72458: PUSH
72459: LD_STRING 
72461: ST_TO_ADDR
// animal := CreateHuman ;
72462: LD_ADDR_VAR 0 12
72466: PUSH
72467: CALL_OW 44
72471: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72472: LD_VAR 0 12
72476: PPUSH
72477: LD_VAR 0 8
72481: PPUSH
72482: LD_INT 0
72484: PPUSH
72485: CALL 74200 0 3
// end ;
72489: GO 72443
72491: POP
72492: POP
// if fishes then
72493: LD_VAR 0 7
72497: IFFALSE 72564
// for i = 1 to fishes do
72499: LD_ADDR_VAR 0 11
72503: PUSH
72504: DOUBLE
72505: LD_INT 1
72507: DEC
72508: ST_TO_ADDR
72509: LD_VAR 0 7
72513: PUSH
72514: FOR_TO
72515: IFFALSE 72562
// begin hc_class = 20 ;
72517: LD_ADDR_OWVAR 28
72521: PUSH
72522: LD_INT 20
72524: ST_TO_ADDR
// hc_gallery =  ;
72525: LD_ADDR_OWVAR 33
72529: PUSH
72530: LD_STRING 
72532: ST_TO_ADDR
// animal := CreateHuman ;
72533: LD_ADDR_VAR 0 12
72537: PUSH
72538: CALL_OW 44
72542: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72543: LD_VAR 0 12
72547: PPUSH
72548: LD_VAR 0 9
72552: PPUSH
72553: LD_INT 0
72555: PPUSH
72556: CALL 74200 0 3
// end ;
72560: GO 72514
72562: POP
72563: POP
// end ;
72564: LD_VAR 0 10
72568: RET
// export function WantHeal ( sci , unit ) ; begin
72569: LD_INT 0
72571: PPUSH
// if GetTaskList ( sci ) > 0 then
72572: LD_VAR 0 1
72576: PPUSH
72577: CALL_OW 437
72581: PUSH
72582: LD_INT 0
72584: GREATER
72585: IFFALSE 72655
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72587: LD_VAR 0 1
72591: PPUSH
72592: CALL_OW 437
72596: PUSH
72597: LD_INT 1
72599: ARRAY
72600: PUSH
72601: LD_INT 1
72603: ARRAY
72604: PUSH
72605: LD_STRING l
72607: EQUAL
72608: PUSH
72609: LD_VAR 0 1
72613: PPUSH
72614: CALL_OW 437
72618: PUSH
72619: LD_INT 1
72621: ARRAY
72622: PUSH
72623: LD_INT 4
72625: ARRAY
72626: PUSH
72627: LD_VAR 0 2
72631: EQUAL
72632: AND
72633: IFFALSE 72645
// result := true else
72635: LD_ADDR_VAR 0 3
72639: PUSH
72640: LD_INT 1
72642: ST_TO_ADDR
72643: GO 72653
// result := false ;
72645: LD_ADDR_VAR 0 3
72649: PUSH
72650: LD_INT 0
72652: ST_TO_ADDR
// end else
72653: GO 72663
// result := false ;
72655: LD_ADDR_VAR 0 3
72659: PUSH
72660: LD_INT 0
72662: ST_TO_ADDR
// end ;
72663: LD_VAR 0 3
72667: RET
// export function HealTarget ( sci ) ; begin
72668: LD_INT 0
72670: PPUSH
// if not sci then
72671: LD_VAR 0 1
72675: NOT
72676: IFFALSE 72680
// exit ;
72678: GO 72745
// result := 0 ;
72680: LD_ADDR_VAR 0 2
72684: PUSH
72685: LD_INT 0
72687: ST_TO_ADDR
// if GetTaskList ( sci ) then
72688: LD_VAR 0 1
72692: PPUSH
72693: CALL_OW 437
72697: IFFALSE 72745
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72699: LD_VAR 0 1
72703: PPUSH
72704: CALL_OW 437
72708: PUSH
72709: LD_INT 1
72711: ARRAY
72712: PUSH
72713: LD_INT 1
72715: ARRAY
72716: PUSH
72717: LD_STRING l
72719: EQUAL
72720: IFFALSE 72745
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72722: LD_ADDR_VAR 0 2
72726: PUSH
72727: LD_VAR 0 1
72731: PPUSH
72732: CALL_OW 437
72736: PUSH
72737: LD_INT 1
72739: ARRAY
72740: PUSH
72741: LD_INT 4
72743: ARRAY
72744: ST_TO_ADDR
// end ;
72745: LD_VAR 0 2
72749: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72750: LD_INT 0
72752: PPUSH
72753: PPUSH
72754: PPUSH
72755: PPUSH
// if not base_units then
72756: LD_VAR 0 1
72760: NOT
72761: IFFALSE 72765
// exit ;
72763: GO 72852
// result := false ;
72765: LD_ADDR_VAR 0 2
72769: PUSH
72770: LD_INT 0
72772: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72773: LD_ADDR_VAR 0 5
72777: PUSH
72778: LD_VAR 0 1
72782: PPUSH
72783: LD_INT 21
72785: PUSH
72786: LD_INT 3
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PPUSH
72793: CALL_OW 72
72797: ST_TO_ADDR
// if not tmp then
72798: LD_VAR 0 5
72802: NOT
72803: IFFALSE 72807
// exit ;
72805: GO 72852
// for i in tmp do
72807: LD_ADDR_VAR 0 3
72811: PUSH
72812: LD_VAR 0 5
72816: PUSH
72817: FOR_IN
72818: IFFALSE 72850
// begin result := EnemyInRange ( i , 22 ) ;
72820: LD_ADDR_VAR 0 2
72824: PUSH
72825: LD_VAR 0 3
72829: PPUSH
72830: LD_INT 22
72832: PPUSH
72833: CALL 71088 0 2
72837: ST_TO_ADDR
// if result then
72838: LD_VAR 0 2
72842: IFFALSE 72848
// exit ;
72844: POP
72845: POP
72846: GO 72852
// end ;
72848: GO 72817
72850: POP
72851: POP
// end ;
72852: LD_VAR 0 2
72856: RET
// export function FilterByTag ( units , tag ) ; begin
72857: LD_INT 0
72859: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72860: LD_ADDR_VAR 0 3
72864: PUSH
72865: LD_VAR 0 1
72869: PPUSH
72870: LD_INT 120
72872: PUSH
72873: LD_VAR 0 2
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PPUSH
72882: CALL_OW 72
72886: ST_TO_ADDR
// end ;
72887: LD_VAR 0 3
72891: RET
// export function IsDriver ( un ) ; begin
72892: LD_INT 0
72894: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72895: LD_ADDR_VAR 0 2
72899: PUSH
72900: LD_VAR 0 1
72904: PUSH
72905: LD_INT 55
72907: PUSH
72908: EMPTY
72909: LIST
72910: PPUSH
72911: CALL_OW 69
72915: IN
72916: ST_TO_ADDR
// end ;
72917: LD_VAR 0 2
72921: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72922: LD_INT 0
72924: PPUSH
72925: PPUSH
// list := [ ] ;
72926: LD_ADDR_VAR 0 5
72930: PUSH
72931: EMPTY
72932: ST_TO_ADDR
// case d of 0 :
72933: LD_VAR 0 3
72937: PUSH
72938: LD_INT 0
72940: DOUBLE
72941: EQUAL
72942: IFTRUE 72946
72944: GO 73079
72946: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72947: LD_ADDR_VAR 0 5
72951: PUSH
72952: LD_VAR 0 1
72956: PUSH
72957: LD_INT 4
72959: MINUS
72960: PUSH
72961: LD_VAR 0 2
72965: PUSH
72966: LD_INT 4
72968: MINUS
72969: PUSH
72970: LD_INT 2
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: LIST
72977: PUSH
72978: LD_VAR 0 1
72982: PUSH
72983: LD_INT 3
72985: MINUS
72986: PUSH
72987: LD_VAR 0 2
72991: PUSH
72992: LD_INT 1
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: LIST
72999: PUSH
73000: LD_VAR 0 1
73004: PUSH
73005: LD_INT 4
73007: PLUS
73008: PUSH
73009: LD_VAR 0 2
73013: PUSH
73014: LD_INT 4
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: LIST
73021: PUSH
73022: LD_VAR 0 1
73026: PUSH
73027: LD_INT 3
73029: PLUS
73030: PUSH
73031: LD_VAR 0 2
73035: PUSH
73036: LD_INT 3
73038: PLUS
73039: PUSH
73040: LD_INT 5
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: LIST
73047: PUSH
73048: LD_VAR 0 1
73052: PUSH
73053: LD_VAR 0 2
73057: PUSH
73058: LD_INT 4
73060: PLUS
73061: PUSH
73062: LD_INT 0
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: LIST
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: ST_TO_ADDR
// end ; 1 :
73077: GO 73777
73079: LD_INT 1
73081: DOUBLE
73082: EQUAL
73083: IFTRUE 73087
73085: GO 73220
73087: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
73088: LD_ADDR_VAR 0 5
73092: PUSH
73093: LD_VAR 0 1
73097: PUSH
73098: LD_VAR 0 2
73102: PUSH
73103: LD_INT 4
73105: MINUS
73106: PUSH
73107: LD_INT 3
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: LIST
73114: PUSH
73115: LD_VAR 0 1
73119: PUSH
73120: LD_INT 3
73122: MINUS
73123: PUSH
73124: LD_VAR 0 2
73128: PUSH
73129: LD_INT 3
73131: MINUS
73132: PUSH
73133: LD_INT 2
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: LIST
73140: PUSH
73141: LD_VAR 0 1
73145: PUSH
73146: LD_INT 4
73148: MINUS
73149: PUSH
73150: LD_VAR 0 2
73154: PUSH
73155: LD_INT 1
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: LIST
73162: PUSH
73163: LD_VAR 0 1
73167: PUSH
73168: LD_VAR 0 2
73172: PUSH
73173: LD_INT 3
73175: PLUS
73176: PUSH
73177: LD_INT 0
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: LIST
73184: PUSH
73185: LD_VAR 0 1
73189: PUSH
73190: LD_INT 4
73192: PLUS
73193: PUSH
73194: LD_VAR 0 2
73198: PUSH
73199: LD_INT 4
73201: PLUS
73202: PUSH
73203: LD_INT 5
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: LIST
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: ST_TO_ADDR
// end ; 2 :
73218: GO 73777
73220: LD_INT 2
73222: DOUBLE
73223: EQUAL
73224: IFTRUE 73228
73226: GO 73357
73228: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
73229: LD_ADDR_VAR 0 5
73233: PUSH
73234: LD_VAR 0 1
73238: PUSH
73239: LD_VAR 0 2
73243: PUSH
73244: LD_INT 3
73246: MINUS
73247: PUSH
73248: LD_INT 3
73250: PUSH
73251: EMPTY
73252: LIST
73253: LIST
73254: LIST
73255: PUSH
73256: LD_VAR 0 1
73260: PUSH
73261: LD_INT 4
73263: PLUS
73264: PUSH
73265: LD_VAR 0 2
73269: PUSH
73270: LD_INT 4
73272: PUSH
73273: EMPTY
73274: LIST
73275: LIST
73276: LIST
73277: PUSH
73278: LD_VAR 0 1
73282: PUSH
73283: LD_VAR 0 2
73287: PUSH
73288: LD_INT 4
73290: PLUS
73291: PUSH
73292: LD_INT 0
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: LIST
73299: PUSH
73300: LD_VAR 0 1
73304: PUSH
73305: LD_INT 3
73307: MINUS
73308: PUSH
73309: LD_VAR 0 2
73313: PUSH
73314: LD_INT 1
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: LIST
73321: PUSH
73322: LD_VAR 0 1
73326: PUSH
73327: LD_INT 4
73329: MINUS
73330: PUSH
73331: LD_VAR 0 2
73335: PUSH
73336: LD_INT 4
73338: MINUS
73339: PUSH
73340: LD_INT 2
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: LIST
73347: PUSH
73348: EMPTY
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: ST_TO_ADDR
// end ; 3 :
73355: GO 73777
73357: LD_INT 3
73359: DOUBLE
73360: EQUAL
73361: IFTRUE 73365
73363: GO 73498
73365: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73366: LD_ADDR_VAR 0 5
73370: PUSH
73371: LD_VAR 0 1
73375: PUSH
73376: LD_INT 3
73378: PLUS
73379: PUSH
73380: LD_VAR 0 2
73384: PUSH
73385: LD_INT 4
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: LIST
73392: PUSH
73393: LD_VAR 0 1
73397: PUSH
73398: LD_INT 4
73400: PLUS
73401: PUSH
73402: LD_VAR 0 2
73406: PUSH
73407: LD_INT 4
73409: PLUS
73410: PUSH
73411: LD_INT 5
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: LIST
73418: PUSH
73419: LD_VAR 0 1
73423: PUSH
73424: LD_INT 4
73426: MINUS
73427: PUSH
73428: LD_VAR 0 2
73432: PUSH
73433: LD_INT 1
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: LIST
73440: PUSH
73441: LD_VAR 0 1
73445: PUSH
73446: LD_VAR 0 2
73450: PUSH
73451: LD_INT 4
73453: MINUS
73454: PUSH
73455: LD_INT 3
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: LIST
73462: PUSH
73463: LD_VAR 0 1
73467: PUSH
73468: LD_INT 3
73470: MINUS
73471: PUSH
73472: LD_VAR 0 2
73476: PUSH
73477: LD_INT 3
73479: MINUS
73480: PUSH
73481: LD_INT 2
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: LIST
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: LIST
73493: LIST
73494: LIST
73495: ST_TO_ADDR
// end ; 4 :
73496: GO 73777
73498: LD_INT 4
73500: DOUBLE
73501: EQUAL
73502: IFTRUE 73506
73504: GO 73639
73506: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73507: LD_ADDR_VAR 0 5
73511: PUSH
73512: LD_VAR 0 1
73516: PUSH
73517: LD_VAR 0 2
73521: PUSH
73522: LD_INT 4
73524: PLUS
73525: PUSH
73526: LD_INT 0
73528: PUSH
73529: EMPTY
73530: LIST
73531: LIST
73532: LIST
73533: PUSH
73534: LD_VAR 0 1
73538: PUSH
73539: LD_INT 3
73541: PLUS
73542: PUSH
73543: LD_VAR 0 2
73547: PUSH
73548: LD_INT 3
73550: PLUS
73551: PUSH
73552: LD_INT 5
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: LIST
73559: PUSH
73560: LD_VAR 0 1
73564: PUSH
73565: LD_INT 4
73567: PLUS
73568: PUSH
73569: LD_VAR 0 2
73573: PUSH
73574: LD_INT 4
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: LIST
73581: PUSH
73582: LD_VAR 0 1
73586: PUSH
73587: LD_VAR 0 2
73591: PUSH
73592: LD_INT 3
73594: MINUS
73595: PUSH
73596: LD_INT 3
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: LIST
73603: PUSH
73604: LD_VAR 0 1
73608: PUSH
73609: LD_INT 4
73611: MINUS
73612: PUSH
73613: LD_VAR 0 2
73617: PUSH
73618: LD_INT 4
73620: MINUS
73621: PUSH
73622: LD_INT 2
73624: PUSH
73625: EMPTY
73626: LIST
73627: LIST
73628: LIST
73629: PUSH
73630: EMPTY
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: ST_TO_ADDR
// end ; 5 :
73637: GO 73777
73639: LD_INT 5
73641: DOUBLE
73642: EQUAL
73643: IFTRUE 73647
73645: GO 73776
73647: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73648: LD_ADDR_VAR 0 5
73652: PUSH
73653: LD_VAR 0 1
73657: PUSH
73658: LD_INT 4
73660: MINUS
73661: PUSH
73662: LD_VAR 0 2
73666: PUSH
73667: LD_INT 1
73669: PUSH
73670: EMPTY
73671: LIST
73672: LIST
73673: LIST
73674: PUSH
73675: LD_VAR 0 1
73679: PUSH
73680: LD_VAR 0 2
73684: PUSH
73685: LD_INT 4
73687: MINUS
73688: PUSH
73689: LD_INT 3
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: LIST
73696: PUSH
73697: LD_VAR 0 1
73701: PUSH
73702: LD_INT 4
73704: PLUS
73705: PUSH
73706: LD_VAR 0 2
73710: PUSH
73711: LD_INT 4
73713: PLUS
73714: PUSH
73715: LD_INT 5
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: LIST
73722: PUSH
73723: LD_VAR 0 1
73727: PUSH
73728: LD_INT 3
73730: PLUS
73731: PUSH
73732: LD_VAR 0 2
73736: PUSH
73737: LD_INT 4
73739: PUSH
73740: EMPTY
73741: LIST
73742: LIST
73743: LIST
73744: PUSH
73745: LD_VAR 0 1
73749: PUSH
73750: LD_VAR 0 2
73754: PUSH
73755: LD_INT 3
73757: PLUS
73758: PUSH
73759: LD_INT 0
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: LIST
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: ST_TO_ADDR
// end ; end ;
73774: GO 73777
73776: POP
// result := list ;
73777: LD_ADDR_VAR 0 4
73781: PUSH
73782: LD_VAR 0 5
73786: ST_TO_ADDR
// end ;
73787: LD_VAR 0 4
73791: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73792: LD_INT 0
73794: PPUSH
73795: PPUSH
73796: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73797: LD_VAR 0 1
73801: NOT
73802: PUSH
73803: LD_VAR 0 2
73807: PUSH
73808: LD_INT 1
73810: PUSH
73811: LD_INT 2
73813: PUSH
73814: LD_INT 3
73816: PUSH
73817: LD_INT 4
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: LIST
73824: LIST
73825: IN
73826: NOT
73827: OR
73828: IFFALSE 73832
// exit ;
73830: GO 73924
// tmp := [ ] ;
73832: LD_ADDR_VAR 0 5
73836: PUSH
73837: EMPTY
73838: ST_TO_ADDR
// for i in units do
73839: LD_ADDR_VAR 0 4
73843: PUSH
73844: LD_VAR 0 1
73848: PUSH
73849: FOR_IN
73850: IFFALSE 73893
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73852: LD_ADDR_VAR 0 5
73856: PUSH
73857: LD_VAR 0 5
73861: PPUSH
73862: LD_VAR 0 5
73866: PUSH
73867: LD_INT 1
73869: PLUS
73870: PPUSH
73871: LD_VAR 0 4
73875: PPUSH
73876: LD_VAR 0 2
73880: PPUSH
73881: CALL_OW 259
73885: PPUSH
73886: CALL_OW 2
73890: ST_TO_ADDR
73891: GO 73849
73893: POP
73894: POP
// if not tmp then
73895: LD_VAR 0 5
73899: NOT
73900: IFFALSE 73904
// exit ;
73902: GO 73924
// result := SortListByListDesc ( units , tmp ) ;
73904: LD_ADDR_VAR 0 3
73908: PUSH
73909: LD_VAR 0 1
73913: PPUSH
73914: LD_VAR 0 5
73918: PPUSH
73919: CALL_OW 77
73923: ST_TO_ADDR
// end ;
73924: LD_VAR 0 3
73928: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73929: LD_INT 0
73931: PPUSH
73932: PPUSH
73933: PPUSH
// result := false ;
73934: LD_ADDR_VAR 0 3
73938: PUSH
73939: LD_INT 0
73941: ST_TO_ADDR
// x := GetX ( building ) ;
73942: LD_ADDR_VAR 0 4
73946: PUSH
73947: LD_VAR 0 2
73951: PPUSH
73952: CALL_OW 250
73956: ST_TO_ADDR
// y := GetY ( building ) ;
73957: LD_ADDR_VAR 0 5
73961: PUSH
73962: LD_VAR 0 2
73966: PPUSH
73967: CALL_OW 251
73971: ST_TO_ADDR
// if not building or not x or not y then
73972: LD_VAR 0 2
73976: NOT
73977: PUSH
73978: LD_VAR 0 4
73982: NOT
73983: OR
73984: PUSH
73985: LD_VAR 0 5
73989: NOT
73990: OR
73991: IFFALSE 73995
// exit ;
73993: GO 74087
// if GetTaskList ( unit ) then
73995: LD_VAR 0 1
73999: PPUSH
74000: CALL_OW 437
74004: IFFALSE 74087
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74006: LD_STRING e
74008: PUSH
74009: LD_VAR 0 1
74013: PPUSH
74014: CALL_OW 437
74018: PUSH
74019: LD_INT 1
74021: ARRAY
74022: PUSH
74023: LD_INT 1
74025: ARRAY
74026: EQUAL
74027: PUSH
74028: LD_VAR 0 4
74032: PUSH
74033: LD_VAR 0 1
74037: PPUSH
74038: CALL_OW 437
74042: PUSH
74043: LD_INT 1
74045: ARRAY
74046: PUSH
74047: LD_INT 2
74049: ARRAY
74050: EQUAL
74051: AND
74052: PUSH
74053: LD_VAR 0 5
74057: PUSH
74058: LD_VAR 0 1
74062: PPUSH
74063: CALL_OW 437
74067: PUSH
74068: LD_INT 1
74070: ARRAY
74071: PUSH
74072: LD_INT 3
74074: ARRAY
74075: EQUAL
74076: AND
74077: IFFALSE 74087
// result := true end ;
74079: LD_ADDR_VAR 0 3
74083: PUSH
74084: LD_INT 1
74086: ST_TO_ADDR
// end ;
74087: LD_VAR 0 3
74091: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
74092: LD_INT 0
74094: PPUSH
// result := false ;
74095: LD_ADDR_VAR 0 4
74099: PUSH
74100: LD_INT 0
74102: ST_TO_ADDR
// if GetTaskList ( unit ) then
74103: LD_VAR 0 1
74107: PPUSH
74108: CALL_OW 437
74112: IFFALSE 74195
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
74114: LD_STRING M
74116: PUSH
74117: LD_VAR 0 1
74121: PPUSH
74122: CALL_OW 437
74126: PUSH
74127: LD_INT 1
74129: ARRAY
74130: PUSH
74131: LD_INT 1
74133: ARRAY
74134: EQUAL
74135: PUSH
74136: LD_VAR 0 2
74140: PUSH
74141: LD_VAR 0 1
74145: PPUSH
74146: CALL_OW 437
74150: PUSH
74151: LD_INT 1
74153: ARRAY
74154: PUSH
74155: LD_INT 2
74157: ARRAY
74158: EQUAL
74159: AND
74160: PUSH
74161: LD_VAR 0 3
74165: PUSH
74166: LD_VAR 0 1
74170: PPUSH
74171: CALL_OW 437
74175: PUSH
74176: LD_INT 1
74178: ARRAY
74179: PUSH
74180: LD_INT 3
74182: ARRAY
74183: EQUAL
74184: AND
74185: IFFALSE 74195
// result := true ;
74187: LD_ADDR_VAR 0 4
74191: PUSH
74192: LD_INT 1
74194: ST_TO_ADDR
// end ; end ;
74195: LD_VAR 0 4
74199: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
74200: LD_INT 0
74202: PPUSH
74203: PPUSH
74204: PPUSH
74205: PPUSH
// if not unit or not area then
74206: LD_VAR 0 1
74210: NOT
74211: PUSH
74212: LD_VAR 0 2
74216: NOT
74217: OR
74218: IFFALSE 74222
// exit ;
74220: GO 74386
// tmp := AreaToList ( area , i ) ;
74222: LD_ADDR_VAR 0 6
74226: PUSH
74227: LD_VAR 0 2
74231: PPUSH
74232: LD_VAR 0 5
74236: PPUSH
74237: CALL_OW 517
74241: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
74242: LD_ADDR_VAR 0 5
74246: PUSH
74247: DOUBLE
74248: LD_INT 1
74250: DEC
74251: ST_TO_ADDR
74252: LD_VAR 0 6
74256: PUSH
74257: LD_INT 1
74259: ARRAY
74260: PUSH
74261: FOR_TO
74262: IFFALSE 74384
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74264: LD_ADDR_VAR 0 7
74268: PUSH
74269: LD_VAR 0 6
74273: PUSH
74274: LD_INT 1
74276: ARRAY
74277: PUSH
74278: LD_VAR 0 5
74282: ARRAY
74283: PUSH
74284: LD_VAR 0 6
74288: PUSH
74289: LD_INT 2
74291: ARRAY
74292: PUSH
74293: LD_VAR 0 5
74297: ARRAY
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74303: LD_VAR 0 7
74307: PUSH
74308: LD_INT 1
74310: ARRAY
74311: PPUSH
74312: LD_VAR 0 7
74316: PUSH
74317: LD_INT 2
74319: ARRAY
74320: PPUSH
74321: CALL_OW 428
74325: PUSH
74326: LD_INT 0
74328: EQUAL
74329: IFFALSE 74382
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74331: LD_VAR 0 1
74335: PPUSH
74336: LD_VAR 0 7
74340: PUSH
74341: LD_INT 1
74343: ARRAY
74344: PPUSH
74345: LD_VAR 0 7
74349: PUSH
74350: LD_INT 2
74352: ARRAY
74353: PPUSH
74354: LD_VAR 0 3
74358: PPUSH
74359: CALL_OW 48
// result := IsPlaced ( unit ) ;
74363: LD_ADDR_VAR 0 4
74367: PUSH
74368: LD_VAR 0 1
74372: PPUSH
74373: CALL_OW 305
74377: ST_TO_ADDR
// exit ;
74378: POP
74379: POP
74380: GO 74386
// end ; end ;
74382: GO 74261
74384: POP
74385: POP
// end ;
74386: LD_VAR 0 4
74390: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74391: LD_INT 0
74393: PPUSH
74394: PPUSH
74395: PPUSH
// if not side or side > 8 then
74396: LD_VAR 0 1
74400: NOT
74401: PUSH
74402: LD_VAR 0 1
74406: PUSH
74407: LD_INT 8
74409: GREATER
74410: OR
74411: IFFALSE 74415
// exit ;
74413: GO 74602
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74415: LD_ADDR_VAR 0 4
74419: PUSH
74420: LD_INT 22
74422: PUSH
74423: LD_VAR 0 1
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: PUSH
74432: LD_INT 21
74434: PUSH
74435: LD_INT 3
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: PPUSH
74446: CALL_OW 69
74450: ST_TO_ADDR
// if not tmp then
74451: LD_VAR 0 4
74455: NOT
74456: IFFALSE 74460
// exit ;
74458: GO 74602
// enable_addtolog := true ;
74460: LD_ADDR_OWVAR 81
74464: PUSH
74465: LD_INT 1
74467: ST_TO_ADDR
// AddToLog ( [ ) ;
74468: LD_STRING [
74470: PPUSH
74471: CALL_OW 561
// for i in tmp do
74475: LD_ADDR_VAR 0 3
74479: PUSH
74480: LD_VAR 0 4
74484: PUSH
74485: FOR_IN
74486: IFFALSE 74593
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74488: LD_STRING [
74490: PUSH
74491: LD_VAR 0 3
74495: PPUSH
74496: CALL_OW 266
74500: STR
74501: PUSH
74502: LD_STRING , 
74504: STR
74505: PUSH
74506: LD_VAR 0 3
74510: PPUSH
74511: CALL_OW 250
74515: STR
74516: PUSH
74517: LD_STRING , 
74519: STR
74520: PUSH
74521: LD_VAR 0 3
74525: PPUSH
74526: CALL_OW 251
74530: STR
74531: PUSH
74532: LD_STRING , 
74534: STR
74535: PUSH
74536: LD_VAR 0 3
74540: PPUSH
74541: CALL_OW 254
74545: STR
74546: PUSH
74547: LD_STRING , 
74549: STR
74550: PUSH
74551: LD_VAR 0 3
74555: PPUSH
74556: LD_INT 1
74558: PPUSH
74559: CALL_OW 268
74563: STR
74564: PUSH
74565: LD_STRING , 
74567: STR
74568: PUSH
74569: LD_VAR 0 3
74573: PPUSH
74574: LD_INT 2
74576: PPUSH
74577: CALL_OW 268
74581: STR
74582: PUSH
74583: LD_STRING ],
74585: STR
74586: PPUSH
74587: CALL_OW 561
// end ;
74591: GO 74485
74593: POP
74594: POP
// AddToLog ( ]; ) ;
74595: LD_STRING ];
74597: PPUSH
74598: CALL_OW 561
// end ;
74602: LD_VAR 0 2
74606: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74607: LD_INT 0
74609: PPUSH
74610: PPUSH
74611: PPUSH
74612: PPUSH
74613: PPUSH
// if not area or not rate or not max then
74614: LD_VAR 0 1
74618: NOT
74619: PUSH
74620: LD_VAR 0 2
74624: NOT
74625: OR
74626: PUSH
74627: LD_VAR 0 4
74631: NOT
74632: OR
74633: IFFALSE 74637
// exit ;
74635: GO 74826
// while 1 do
74637: LD_INT 1
74639: IFFALSE 74826
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74641: LD_ADDR_VAR 0 9
74645: PUSH
74646: LD_VAR 0 1
74650: PPUSH
74651: LD_INT 1
74653: PPUSH
74654: CALL_OW 287
74658: PUSH
74659: LD_INT 10
74661: MUL
74662: ST_TO_ADDR
// r := rate / 10 ;
74663: LD_ADDR_VAR 0 7
74667: PUSH
74668: LD_VAR 0 2
74672: PUSH
74673: LD_INT 10
74675: DIVREAL
74676: ST_TO_ADDR
// time := 1 1$00 ;
74677: LD_ADDR_VAR 0 8
74681: PUSH
74682: LD_INT 2100
74684: ST_TO_ADDR
// if amount < min then
74685: LD_VAR 0 9
74689: PUSH
74690: LD_VAR 0 3
74694: LESS
74695: IFFALSE 74713
// r := r * 2 else
74697: LD_ADDR_VAR 0 7
74701: PUSH
74702: LD_VAR 0 7
74706: PUSH
74707: LD_INT 2
74709: MUL
74710: ST_TO_ADDR
74711: GO 74739
// if amount > max then
74713: LD_VAR 0 9
74717: PUSH
74718: LD_VAR 0 4
74722: GREATER
74723: IFFALSE 74739
// r := r / 2 ;
74725: LD_ADDR_VAR 0 7
74729: PUSH
74730: LD_VAR 0 7
74734: PUSH
74735: LD_INT 2
74737: DIVREAL
74738: ST_TO_ADDR
// time := time / r ;
74739: LD_ADDR_VAR 0 8
74743: PUSH
74744: LD_VAR 0 8
74748: PUSH
74749: LD_VAR 0 7
74753: DIVREAL
74754: ST_TO_ADDR
// if time < 0 then
74755: LD_VAR 0 8
74759: PUSH
74760: LD_INT 0
74762: LESS
74763: IFFALSE 74780
// time := time * - 1 ;
74765: LD_ADDR_VAR 0 8
74769: PUSH
74770: LD_VAR 0 8
74774: PUSH
74775: LD_INT 1
74777: NEG
74778: MUL
74779: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74780: LD_VAR 0 8
74784: PUSH
74785: LD_INT 35
74787: PPUSH
74788: LD_INT 875
74790: PPUSH
74791: CALL_OW 12
74795: PLUS
74796: PPUSH
74797: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74801: LD_INT 1
74803: PPUSH
74804: LD_INT 5
74806: PPUSH
74807: CALL_OW 12
74811: PPUSH
74812: LD_VAR 0 1
74816: PPUSH
74817: LD_INT 1
74819: PPUSH
74820: CALL_OW 55
// end ;
74824: GO 74637
// end ;
74826: LD_VAR 0 5
74830: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74831: LD_INT 0
74833: PPUSH
74834: PPUSH
74835: PPUSH
74836: PPUSH
74837: PPUSH
74838: PPUSH
74839: PPUSH
74840: PPUSH
// if not turrets or not factories then
74841: LD_VAR 0 1
74845: NOT
74846: PUSH
74847: LD_VAR 0 2
74851: NOT
74852: OR
74853: IFFALSE 74857
// exit ;
74855: GO 75164
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74857: LD_ADDR_VAR 0 10
74861: PUSH
74862: LD_INT 5
74864: PUSH
74865: LD_INT 6
74867: PUSH
74868: EMPTY
74869: LIST
74870: LIST
74871: PUSH
74872: LD_INT 2
74874: PUSH
74875: LD_INT 4
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: PUSH
74882: LD_INT 3
74884: PUSH
74885: LD_INT 5
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: LIST
74896: PUSH
74897: LD_INT 24
74899: PUSH
74900: LD_INT 25
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: PUSH
74907: LD_INT 23
74909: PUSH
74910: LD_INT 27
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: PUSH
74917: EMPTY
74918: LIST
74919: LIST
74920: PUSH
74921: LD_INT 42
74923: PUSH
74924: LD_INT 43
74926: PUSH
74927: EMPTY
74928: LIST
74929: LIST
74930: PUSH
74931: LD_INT 44
74933: PUSH
74934: LD_INT 46
74936: PUSH
74937: EMPTY
74938: LIST
74939: LIST
74940: PUSH
74941: LD_INT 45
74943: PUSH
74944: LD_INT 47
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: LIST
74955: PUSH
74956: EMPTY
74957: LIST
74958: LIST
74959: LIST
74960: ST_TO_ADDR
// result := [ ] ;
74961: LD_ADDR_VAR 0 3
74965: PUSH
74966: EMPTY
74967: ST_TO_ADDR
// for i in turrets do
74968: LD_ADDR_VAR 0 4
74972: PUSH
74973: LD_VAR 0 1
74977: PUSH
74978: FOR_IN
74979: IFFALSE 75162
// begin nat := GetNation ( i ) ;
74981: LD_ADDR_VAR 0 7
74985: PUSH
74986: LD_VAR 0 4
74990: PPUSH
74991: CALL_OW 248
74995: ST_TO_ADDR
// weapon := 0 ;
74996: LD_ADDR_VAR 0 8
75000: PUSH
75001: LD_INT 0
75003: ST_TO_ADDR
// if not nat then
75004: LD_VAR 0 7
75008: NOT
75009: IFFALSE 75013
// continue ;
75011: GO 74978
// for j in list [ nat ] do
75013: LD_ADDR_VAR 0 5
75017: PUSH
75018: LD_VAR 0 10
75022: PUSH
75023: LD_VAR 0 7
75027: ARRAY
75028: PUSH
75029: FOR_IN
75030: IFFALSE 75071
// if GetBWeapon ( i ) = j [ 1 ] then
75032: LD_VAR 0 4
75036: PPUSH
75037: CALL_OW 269
75041: PUSH
75042: LD_VAR 0 5
75046: PUSH
75047: LD_INT 1
75049: ARRAY
75050: EQUAL
75051: IFFALSE 75069
// begin weapon := j [ 2 ] ;
75053: LD_ADDR_VAR 0 8
75057: PUSH
75058: LD_VAR 0 5
75062: PUSH
75063: LD_INT 2
75065: ARRAY
75066: ST_TO_ADDR
// break ;
75067: GO 75071
// end ;
75069: GO 75029
75071: POP
75072: POP
// if not weapon then
75073: LD_VAR 0 8
75077: NOT
75078: IFFALSE 75082
// continue ;
75080: GO 74978
// for k in factories do
75082: LD_ADDR_VAR 0 6
75086: PUSH
75087: LD_VAR 0 2
75091: PUSH
75092: FOR_IN
75093: IFFALSE 75158
// begin weapons := AvailableWeaponList ( k ) ;
75095: LD_ADDR_VAR 0 9
75099: PUSH
75100: LD_VAR 0 6
75104: PPUSH
75105: CALL_OW 478
75109: ST_TO_ADDR
// if not weapons then
75110: LD_VAR 0 9
75114: NOT
75115: IFFALSE 75119
// continue ;
75117: GO 75092
// if weapon in weapons then
75119: LD_VAR 0 8
75123: PUSH
75124: LD_VAR 0 9
75128: IN
75129: IFFALSE 75156
// begin result := [ i , weapon ] ;
75131: LD_ADDR_VAR 0 3
75135: PUSH
75136: LD_VAR 0 4
75140: PUSH
75141: LD_VAR 0 8
75145: PUSH
75146: EMPTY
75147: LIST
75148: LIST
75149: ST_TO_ADDR
// exit ;
75150: POP
75151: POP
75152: POP
75153: POP
75154: GO 75164
// end ; end ;
75156: GO 75092
75158: POP
75159: POP
// end ;
75160: GO 74978
75162: POP
75163: POP
// end ;
75164: LD_VAR 0 3
75168: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
75169: LD_INT 0
75171: PPUSH
// if not side or side > 8 then
75172: LD_VAR 0 3
75176: NOT
75177: PUSH
75178: LD_VAR 0 3
75182: PUSH
75183: LD_INT 8
75185: GREATER
75186: OR
75187: IFFALSE 75191
// exit ;
75189: GO 75250
// if not range then
75191: LD_VAR 0 4
75195: NOT
75196: IFFALSE 75207
// range := - 12 ;
75198: LD_ADDR_VAR 0 4
75202: PUSH
75203: LD_INT 12
75205: NEG
75206: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
75207: LD_VAR 0 1
75211: PPUSH
75212: LD_VAR 0 2
75216: PPUSH
75217: LD_VAR 0 3
75221: PPUSH
75222: LD_VAR 0 4
75226: PPUSH
75227: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
75231: LD_VAR 0 1
75235: PPUSH
75236: LD_VAR 0 2
75240: PPUSH
75241: LD_VAR 0 3
75245: PPUSH
75246: CALL_OW 331
// end ;
75250: LD_VAR 0 5
75254: RET
// export function Video ( mode ) ; begin
75255: LD_INT 0
75257: PPUSH
// ingame_video = mode ;
75258: LD_ADDR_OWVAR 52
75262: PUSH
75263: LD_VAR 0 1
75267: ST_TO_ADDR
// interface_hidden = mode ;
75268: LD_ADDR_OWVAR 54
75272: PUSH
75273: LD_VAR 0 1
75277: ST_TO_ADDR
// end ;
75278: LD_VAR 0 2
75282: RET
// export function Join ( array , element ) ; begin
75283: LD_INT 0
75285: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75286: LD_ADDR_VAR 0 3
75290: PUSH
75291: LD_VAR 0 1
75295: PPUSH
75296: LD_VAR 0 1
75300: PUSH
75301: LD_INT 1
75303: PLUS
75304: PPUSH
75305: LD_VAR 0 2
75309: PPUSH
75310: CALL_OW 1
75314: ST_TO_ADDR
// end ;
75315: LD_VAR 0 3
75319: RET
// export function JoinUnion ( array , element ) ; begin
75320: LD_INT 0
75322: PPUSH
// result := array union element ;
75323: LD_ADDR_VAR 0 3
75327: PUSH
75328: LD_VAR 0 1
75332: PUSH
75333: LD_VAR 0 2
75337: UNION
75338: ST_TO_ADDR
// end ;
75339: LD_VAR 0 3
75343: RET
// export function GetBehemoths ( side ) ; begin
75344: LD_INT 0
75346: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75347: LD_ADDR_VAR 0 2
75351: PUSH
75352: LD_INT 22
75354: PUSH
75355: LD_VAR 0 1
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 31
75366: PUSH
75367: LD_INT 25
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: PUSH
75374: EMPTY
75375: LIST
75376: LIST
75377: PPUSH
75378: CALL_OW 69
75382: ST_TO_ADDR
// end ;
75383: LD_VAR 0 2
75387: RET
// export function Shuffle ( array ) ; var i , index ; begin
75388: LD_INT 0
75390: PPUSH
75391: PPUSH
75392: PPUSH
// result := [ ] ;
75393: LD_ADDR_VAR 0 2
75397: PUSH
75398: EMPTY
75399: ST_TO_ADDR
// if not array then
75400: LD_VAR 0 1
75404: NOT
75405: IFFALSE 75409
// exit ;
75407: GO 75508
// Randomize ;
75409: CALL_OW 10
// for i = array downto 1 do
75413: LD_ADDR_VAR 0 3
75417: PUSH
75418: DOUBLE
75419: LD_VAR 0 1
75423: INC
75424: ST_TO_ADDR
75425: LD_INT 1
75427: PUSH
75428: FOR_DOWNTO
75429: IFFALSE 75506
// begin index := rand ( 1 , array ) ;
75431: LD_ADDR_VAR 0 4
75435: PUSH
75436: LD_INT 1
75438: PPUSH
75439: LD_VAR 0 1
75443: PPUSH
75444: CALL_OW 12
75448: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75449: LD_ADDR_VAR 0 2
75453: PUSH
75454: LD_VAR 0 2
75458: PPUSH
75459: LD_VAR 0 2
75463: PUSH
75464: LD_INT 1
75466: PLUS
75467: PPUSH
75468: LD_VAR 0 1
75472: PUSH
75473: LD_VAR 0 4
75477: ARRAY
75478: PPUSH
75479: CALL_OW 2
75483: ST_TO_ADDR
// array := Delete ( array , index ) ;
75484: LD_ADDR_VAR 0 1
75488: PUSH
75489: LD_VAR 0 1
75493: PPUSH
75494: LD_VAR 0 4
75498: PPUSH
75499: CALL_OW 3
75503: ST_TO_ADDR
// end ;
75504: GO 75428
75506: POP
75507: POP
// end ;
75508: LD_VAR 0 2
75512: RET
// export function GetBaseMaterials ( base ) ; begin
75513: LD_INT 0
75515: PPUSH
// result := [ 0 , 0 , 0 ] ;
75516: LD_ADDR_VAR 0 2
75520: PUSH
75521: LD_INT 0
75523: PUSH
75524: LD_INT 0
75526: PUSH
75527: LD_INT 0
75529: PUSH
75530: EMPTY
75531: LIST
75532: LIST
75533: LIST
75534: ST_TO_ADDR
// if not base then
75535: LD_VAR 0 1
75539: NOT
75540: IFFALSE 75544
// exit ;
75542: GO 75593
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75544: LD_ADDR_VAR 0 2
75548: PUSH
75549: LD_VAR 0 1
75553: PPUSH
75554: LD_INT 1
75556: PPUSH
75557: CALL_OW 275
75561: PUSH
75562: LD_VAR 0 1
75566: PPUSH
75567: LD_INT 2
75569: PPUSH
75570: CALL_OW 275
75574: PUSH
75575: LD_VAR 0 1
75579: PPUSH
75580: LD_INT 3
75582: PPUSH
75583: CALL_OW 275
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: LIST
75592: ST_TO_ADDR
// end ;
75593: LD_VAR 0 2
75597: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75598: LD_INT 0
75600: PPUSH
75601: PPUSH
// result := array ;
75602: LD_ADDR_VAR 0 3
75606: PUSH
75607: LD_VAR 0 1
75611: ST_TO_ADDR
// if size > 0 then
75612: LD_VAR 0 2
75616: PUSH
75617: LD_INT 0
75619: GREATER
75620: IFFALSE 75666
// for i := array downto size do
75622: LD_ADDR_VAR 0 4
75626: PUSH
75627: DOUBLE
75628: LD_VAR 0 1
75632: INC
75633: ST_TO_ADDR
75634: LD_VAR 0 2
75638: PUSH
75639: FOR_DOWNTO
75640: IFFALSE 75664
// result := Delete ( result , result ) ;
75642: LD_ADDR_VAR 0 3
75646: PUSH
75647: LD_VAR 0 3
75651: PPUSH
75652: LD_VAR 0 3
75656: PPUSH
75657: CALL_OW 3
75661: ST_TO_ADDR
75662: GO 75639
75664: POP
75665: POP
// end ;
75666: LD_VAR 0 3
75670: RET
// export function ComExit ( unit ) ; var tmp ; begin
75671: LD_INT 0
75673: PPUSH
75674: PPUSH
// if not IsInUnit ( unit ) then
75675: LD_VAR 0 1
75679: PPUSH
75680: CALL_OW 310
75684: NOT
75685: IFFALSE 75689
// exit ;
75687: GO 75749
// tmp := IsInUnit ( unit ) ;
75689: LD_ADDR_VAR 0 3
75693: PUSH
75694: LD_VAR 0 1
75698: PPUSH
75699: CALL_OW 310
75703: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75704: LD_VAR 0 3
75708: PPUSH
75709: CALL_OW 247
75713: PUSH
75714: LD_INT 2
75716: EQUAL
75717: IFFALSE 75730
// ComExitVehicle ( unit ) else
75719: LD_VAR 0 1
75723: PPUSH
75724: CALL_OW 121
75728: GO 75739
// ComExitBuilding ( unit ) ;
75730: LD_VAR 0 1
75734: PPUSH
75735: CALL_OW 122
// result := tmp ;
75739: LD_ADDR_VAR 0 2
75743: PUSH
75744: LD_VAR 0 3
75748: ST_TO_ADDR
// end ;
75749: LD_VAR 0 2
75753: RET
// export function ComExitAll ( units ) ; var i ; begin
75754: LD_INT 0
75756: PPUSH
75757: PPUSH
// if not units then
75758: LD_VAR 0 1
75762: NOT
75763: IFFALSE 75767
// exit ;
75765: GO 75793
// for i in units do
75767: LD_ADDR_VAR 0 3
75771: PUSH
75772: LD_VAR 0 1
75776: PUSH
75777: FOR_IN
75778: IFFALSE 75791
// ComExit ( i ) ;
75780: LD_VAR 0 3
75784: PPUSH
75785: CALL 75671 0 1
75789: GO 75777
75791: POP
75792: POP
// end ;
75793: LD_VAR 0 2
75797: RET
// export function ResetHc ; begin
75798: LD_INT 0
75800: PPUSH
// InitHc ;
75801: CALL_OW 19
// hc_importance := 0 ;
75805: LD_ADDR_OWVAR 32
75809: PUSH
75810: LD_INT 0
75812: ST_TO_ADDR
// end ;
75813: LD_VAR 0 1
75817: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75818: LD_INT 0
75820: PPUSH
75821: PPUSH
75822: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75823: LD_ADDR_VAR 0 6
75827: PUSH
75828: LD_VAR 0 1
75832: PUSH
75833: LD_VAR 0 3
75837: PLUS
75838: PUSH
75839: LD_INT 2
75841: DIV
75842: ST_TO_ADDR
// if _x < 0 then
75843: LD_VAR 0 6
75847: PUSH
75848: LD_INT 0
75850: LESS
75851: IFFALSE 75868
// _x := _x * - 1 ;
75853: LD_ADDR_VAR 0 6
75857: PUSH
75858: LD_VAR 0 6
75862: PUSH
75863: LD_INT 1
75865: NEG
75866: MUL
75867: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75868: LD_ADDR_VAR 0 7
75872: PUSH
75873: LD_VAR 0 2
75877: PUSH
75878: LD_VAR 0 4
75882: PLUS
75883: PUSH
75884: LD_INT 2
75886: DIV
75887: ST_TO_ADDR
// if _y < 0 then
75888: LD_VAR 0 7
75892: PUSH
75893: LD_INT 0
75895: LESS
75896: IFFALSE 75913
// _y := _y * - 1 ;
75898: LD_ADDR_VAR 0 7
75902: PUSH
75903: LD_VAR 0 7
75907: PUSH
75908: LD_INT 1
75910: NEG
75911: MUL
75912: ST_TO_ADDR
// result := [ _x , _y ] ;
75913: LD_ADDR_VAR 0 5
75917: PUSH
75918: LD_VAR 0 6
75922: PUSH
75923: LD_VAR 0 7
75927: PUSH
75928: EMPTY
75929: LIST
75930: LIST
75931: ST_TO_ADDR
// end ;
75932: LD_VAR 0 5
75936: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75937: LD_INT 0
75939: PPUSH
75940: PPUSH
75941: PPUSH
75942: PPUSH
// task := GetTaskList ( unit ) ;
75943: LD_ADDR_VAR 0 7
75947: PUSH
75948: LD_VAR 0 1
75952: PPUSH
75953: CALL_OW 437
75957: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75958: LD_VAR 0 7
75962: NOT
75963: PUSH
75964: LD_VAR 0 1
75968: PPUSH
75969: LD_VAR 0 2
75973: PPUSH
75974: CALL_OW 308
75978: NOT
75979: AND
75980: IFFALSE 75984
// exit ;
75982: GO 76102
// if IsInArea ( unit , area ) then
75984: LD_VAR 0 1
75988: PPUSH
75989: LD_VAR 0 2
75993: PPUSH
75994: CALL_OW 308
75998: IFFALSE 76016
// begin ComMoveToArea ( unit , goAway ) ;
76000: LD_VAR 0 1
76004: PPUSH
76005: LD_VAR 0 3
76009: PPUSH
76010: CALL_OW 113
// exit ;
76014: GO 76102
// end ; if task [ 1 ] [ 1 ] <> M then
76016: LD_VAR 0 7
76020: PUSH
76021: LD_INT 1
76023: ARRAY
76024: PUSH
76025: LD_INT 1
76027: ARRAY
76028: PUSH
76029: LD_STRING M
76031: NONEQUAL
76032: IFFALSE 76036
// exit ;
76034: GO 76102
// x := task [ 1 ] [ 2 ] ;
76036: LD_ADDR_VAR 0 5
76040: PUSH
76041: LD_VAR 0 7
76045: PUSH
76046: LD_INT 1
76048: ARRAY
76049: PUSH
76050: LD_INT 2
76052: ARRAY
76053: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
76054: LD_ADDR_VAR 0 6
76058: PUSH
76059: LD_VAR 0 7
76063: PUSH
76064: LD_INT 1
76066: ARRAY
76067: PUSH
76068: LD_INT 3
76070: ARRAY
76071: ST_TO_ADDR
// if InArea ( x , y , area ) then
76072: LD_VAR 0 5
76076: PPUSH
76077: LD_VAR 0 6
76081: PPUSH
76082: LD_VAR 0 2
76086: PPUSH
76087: CALL_OW 309
76091: IFFALSE 76102
// ComStop ( unit ) ;
76093: LD_VAR 0 1
76097: PPUSH
76098: CALL_OW 141
// end ;
76102: LD_VAR 0 4
76106: RET
// export function Abs ( value ) ; begin
76107: LD_INT 0
76109: PPUSH
// result := value ;
76110: LD_ADDR_VAR 0 2
76114: PUSH
76115: LD_VAR 0 1
76119: ST_TO_ADDR
// if value < 0 then
76120: LD_VAR 0 1
76124: PUSH
76125: LD_INT 0
76127: LESS
76128: IFFALSE 76145
// result := value * - 1 ;
76130: LD_ADDR_VAR 0 2
76134: PUSH
76135: LD_VAR 0 1
76139: PUSH
76140: LD_INT 1
76142: NEG
76143: MUL
76144: ST_TO_ADDR
// end ;
76145: LD_VAR 0 2
76149: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
76150: LD_INT 0
76152: PPUSH
76153: PPUSH
76154: PPUSH
76155: PPUSH
76156: PPUSH
76157: PPUSH
76158: PPUSH
76159: PPUSH
// if not unit or not building then
76160: LD_VAR 0 1
76164: NOT
76165: PUSH
76166: LD_VAR 0 2
76170: NOT
76171: OR
76172: IFFALSE 76176
// exit ;
76174: GO 76402
// x := GetX ( building ) ;
76176: LD_ADDR_VAR 0 4
76180: PUSH
76181: LD_VAR 0 2
76185: PPUSH
76186: CALL_OW 250
76190: ST_TO_ADDR
// y := GetY ( building ) ;
76191: LD_ADDR_VAR 0 6
76195: PUSH
76196: LD_VAR 0 2
76200: PPUSH
76201: CALL_OW 251
76205: ST_TO_ADDR
// d := GetDir ( building ) ;
76206: LD_ADDR_VAR 0 8
76210: PUSH
76211: LD_VAR 0 2
76215: PPUSH
76216: CALL_OW 254
76220: ST_TO_ADDR
// r := 4 ;
76221: LD_ADDR_VAR 0 9
76225: PUSH
76226: LD_INT 4
76228: ST_TO_ADDR
// for i := 1 to 5 do
76229: LD_ADDR_VAR 0 10
76233: PUSH
76234: DOUBLE
76235: LD_INT 1
76237: DEC
76238: ST_TO_ADDR
76239: LD_INT 5
76241: PUSH
76242: FOR_TO
76243: IFFALSE 76400
// begin _x := ShiftX ( x , d , r + i ) ;
76245: LD_ADDR_VAR 0 5
76249: PUSH
76250: LD_VAR 0 4
76254: PPUSH
76255: LD_VAR 0 8
76259: PPUSH
76260: LD_VAR 0 9
76264: PUSH
76265: LD_VAR 0 10
76269: PLUS
76270: PPUSH
76271: CALL_OW 272
76275: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76276: LD_ADDR_VAR 0 7
76280: PUSH
76281: LD_VAR 0 6
76285: PPUSH
76286: LD_VAR 0 8
76290: PPUSH
76291: LD_VAR 0 9
76295: PUSH
76296: LD_VAR 0 10
76300: PLUS
76301: PPUSH
76302: CALL_OW 273
76306: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76307: LD_VAR 0 5
76311: PPUSH
76312: LD_VAR 0 7
76316: PPUSH
76317: CALL_OW 488
76321: PUSH
76322: LD_VAR 0 5
76326: PPUSH
76327: LD_VAR 0 7
76331: PPUSH
76332: CALL_OW 428
76336: PPUSH
76337: CALL_OW 247
76341: PUSH
76342: LD_INT 3
76344: PUSH
76345: LD_INT 2
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: IN
76352: NOT
76353: AND
76354: IFFALSE 76398
// begin ComMoveXY ( unit , _x , _y ) ;
76356: LD_VAR 0 1
76360: PPUSH
76361: LD_VAR 0 5
76365: PPUSH
76366: LD_VAR 0 7
76370: PPUSH
76371: CALL_OW 111
// result := [ _x , _y ] ;
76375: LD_ADDR_VAR 0 3
76379: PUSH
76380: LD_VAR 0 5
76384: PUSH
76385: LD_VAR 0 7
76389: PUSH
76390: EMPTY
76391: LIST
76392: LIST
76393: ST_TO_ADDR
// exit ;
76394: POP
76395: POP
76396: GO 76402
// end ; end ;
76398: GO 76242
76400: POP
76401: POP
// end ;
76402: LD_VAR 0 3
76406: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76407: LD_INT 0
76409: PPUSH
76410: PPUSH
76411: PPUSH
// result := 0 ;
76412: LD_ADDR_VAR 0 3
76416: PUSH
76417: LD_INT 0
76419: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76420: LD_VAR 0 1
76424: PUSH
76425: LD_INT 0
76427: LESS
76428: PUSH
76429: LD_VAR 0 1
76433: PUSH
76434: LD_INT 8
76436: GREATER
76437: OR
76438: PUSH
76439: LD_VAR 0 2
76443: PUSH
76444: LD_INT 0
76446: LESS
76447: OR
76448: PUSH
76449: LD_VAR 0 2
76453: PUSH
76454: LD_INT 8
76456: GREATER
76457: OR
76458: IFFALSE 76462
// exit ;
76460: GO 76537
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76462: LD_ADDR_VAR 0 4
76466: PUSH
76467: LD_INT 22
76469: PUSH
76470: LD_VAR 0 2
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: PPUSH
76479: CALL_OW 69
76483: PUSH
76484: FOR_IN
76485: IFFALSE 76535
// begin un := UnitShoot ( i ) ;
76487: LD_ADDR_VAR 0 5
76491: PUSH
76492: LD_VAR 0 4
76496: PPUSH
76497: CALL_OW 504
76501: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76502: LD_VAR 0 5
76506: PPUSH
76507: CALL_OW 255
76511: PUSH
76512: LD_VAR 0 1
76516: EQUAL
76517: IFFALSE 76533
// begin result := un ;
76519: LD_ADDR_VAR 0 3
76523: PUSH
76524: LD_VAR 0 5
76528: ST_TO_ADDR
// exit ;
76529: POP
76530: POP
76531: GO 76537
// end ; end ;
76533: GO 76484
76535: POP
76536: POP
// end ;
76537: LD_VAR 0 3
76541: RET
// export function GetCargoBay ( units ) ; begin
76542: LD_INT 0
76544: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76545: LD_ADDR_VAR 0 2
76549: PUSH
76550: LD_VAR 0 1
76554: PPUSH
76555: LD_INT 2
76557: PUSH
76558: LD_INT 34
76560: PUSH
76561: LD_INT 12
76563: PUSH
76564: EMPTY
76565: LIST
76566: LIST
76567: PUSH
76568: LD_INT 34
76570: PUSH
76571: LD_INT 51
76573: PUSH
76574: EMPTY
76575: LIST
76576: LIST
76577: PUSH
76578: LD_INT 34
76580: PUSH
76581: LD_INT 32
76583: PUSH
76584: EMPTY
76585: LIST
76586: LIST
76587: PUSH
76588: LD_INT 34
76590: PUSH
76591: LD_EXP 53
76595: PUSH
76596: EMPTY
76597: LIST
76598: LIST
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: LIST
76604: LIST
76605: LIST
76606: PPUSH
76607: CALL_OW 72
76611: ST_TO_ADDR
// end ;
76612: LD_VAR 0 2
76616: RET
// export function Negate ( value ) ; begin
76617: LD_INT 0
76619: PPUSH
// result := not value ;
76620: LD_ADDR_VAR 0 2
76624: PUSH
76625: LD_VAR 0 1
76629: NOT
76630: ST_TO_ADDR
// end ;
76631: LD_VAR 0 2
76635: RET
// export function Inc ( value ) ; begin
76636: LD_INT 0
76638: PPUSH
// result := value + 1 ;
76639: LD_ADDR_VAR 0 2
76643: PUSH
76644: LD_VAR 0 1
76648: PUSH
76649: LD_INT 1
76651: PLUS
76652: ST_TO_ADDR
// end ;
76653: LD_VAR 0 2
76657: RET
// export function Dec ( value ) ; begin
76658: LD_INT 0
76660: PPUSH
// result := value - 1 ;
76661: LD_ADDR_VAR 0 2
76665: PUSH
76666: LD_VAR 0 1
76670: PUSH
76671: LD_INT 1
76673: MINUS
76674: ST_TO_ADDR
// end ;
76675: LD_VAR 0 2
76679: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76680: LD_INT 0
76682: PPUSH
76683: PPUSH
76684: PPUSH
76685: PPUSH
76686: PPUSH
76687: PPUSH
76688: PPUSH
76689: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76690: LD_VAR 0 1
76694: PPUSH
76695: LD_VAR 0 2
76699: PPUSH
76700: CALL_OW 488
76704: NOT
76705: PUSH
76706: LD_VAR 0 3
76710: PPUSH
76711: LD_VAR 0 4
76715: PPUSH
76716: CALL_OW 488
76720: NOT
76721: OR
76722: IFFALSE 76735
// begin result := - 1 ;
76724: LD_ADDR_VAR 0 5
76728: PUSH
76729: LD_INT 1
76731: NEG
76732: ST_TO_ADDR
// exit ;
76733: GO 76970
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76735: LD_ADDR_VAR 0 12
76739: PUSH
76740: LD_VAR 0 1
76744: PPUSH
76745: LD_VAR 0 2
76749: PPUSH
76750: LD_VAR 0 3
76754: PPUSH
76755: LD_VAR 0 4
76759: PPUSH
76760: CALL 75818 0 4
76764: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76765: LD_ADDR_VAR 0 11
76769: PUSH
76770: LD_VAR 0 1
76774: PPUSH
76775: LD_VAR 0 2
76779: PPUSH
76780: LD_VAR 0 12
76784: PUSH
76785: LD_INT 1
76787: ARRAY
76788: PPUSH
76789: LD_VAR 0 12
76793: PUSH
76794: LD_INT 2
76796: ARRAY
76797: PPUSH
76798: CALL_OW 298
76802: ST_TO_ADDR
// distance := 9999 ;
76803: LD_ADDR_VAR 0 10
76807: PUSH
76808: LD_INT 9999
76810: ST_TO_ADDR
// for i := 0 to 5 do
76811: LD_ADDR_VAR 0 6
76815: PUSH
76816: DOUBLE
76817: LD_INT 0
76819: DEC
76820: ST_TO_ADDR
76821: LD_INT 5
76823: PUSH
76824: FOR_TO
76825: IFFALSE 76968
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76827: LD_ADDR_VAR 0 7
76831: PUSH
76832: LD_VAR 0 1
76836: PPUSH
76837: LD_VAR 0 6
76841: PPUSH
76842: LD_VAR 0 11
76846: PPUSH
76847: CALL_OW 272
76851: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76852: LD_ADDR_VAR 0 8
76856: PUSH
76857: LD_VAR 0 2
76861: PPUSH
76862: LD_VAR 0 6
76866: PPUSH
76867: LD_VAR 0 11
76871: PPUSH
76872: CALL_OW 273
76876: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76877: LD_VAR 0 7
76881: PPUSH
76882: LD_VAR 0 8
76886: PPUSH
76887: CALL_OW 488
76891: NOT
76892: IFFALSE 76896
// continue ;
76894: GO 76824
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76896: LD_ADDR_VAR 0 9
76900: PUSH
76901: LD_VAR 0 12
76905: PUSH
76906: LD_INT 1
76908: ARRAY
76909: PPUSH
76910: LD_VAR 0 12
76914: PUSH
76915: LD_INT 2
76917: ARRAY
76918: PPUSH
76919: LD_VAR 0 7
76923: PPUSH
76924: LD_VAR 0 8
76928: PPUSH
76929: CALL_OW 298
76933: ST_TO_ADDR
// if tmp < distance then
76934: LD_VAR 0 9
76938: PUSH
76939: LD_VAR 0 10
76943: LESS
76944: IFFALSE 76966
// begin result := i ;
76946: LD_ADDR_VAR 0 5
76950: PUSH
76951: LD_VAR 0 6
76955: ST_TO_ADDR
// distance := tmp ;
76956: LD_ADDR_VAR 0 10
76960: PUSH
76961: LD_VAR 0 9
76965: ST_TO_ADDR
// end ; end ;
76966: GO 76824
76968: POP
76969: POP
// end ;
76970: LD_VAR 0 5
76974: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76975: LD_INT 0
76977: PPUSH
76978: PPUSH
// if not driver or not IsInUnit ( driver ) then
76979: LD_VAR 0 1
76983: NOT
76984: PUSH
76985: LD_VAR 0 1
76989: PPUSH
76990: CALL_OW 310
76994: NOT
76995: OR
76996: IFFALSE 77000
// exit ;
76998: GO 77090
// vehicle := IsInUnit ( driver ) ;
77000: LD_ADDR_VAR 0 3
77004: PUSH
77005: LD_VAR 0 1
77009: PPUSH
77010: CALL_OW 310
77014: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77015: LD_VAR 0 1
77019: PPUSH
77020: LD_STRING \
77022: PUSH
77023: LD_INT 0
77025: PUSH
77026: LD_INT 0
77028: PUSH
77029: LD_INT 0
77031: PUSH
77032: LD_INT 0
77034: PUSH
77035: LD_INT 0
77037: PUSH
77038: LD_INT 0
77040: PUSH
77041: EMPTY
77042: LIST
77043: LIST
77044: LIST
77045: LIST
77046: LIST
77047: LIST
77048: LIST
77049: PUSH
77050: LD_STRING E
77052: PUSH
77053: LD_INT 0
77055: PUSH
77056: LD_INT 0
77058: PUSH
77059: LD_VAR 0 3
77063: PUSH
77064: LD_INT 0
77066: PUSH
77067: LD_INT 0
77069: PUSH
77070: LD_INT 0
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: LIST
77077: LIST
77078: LIST
77079: LIST
77080: LIST
77081: PUSH
77082: EMPTY
77083: LIST
77084: LIST
77085: PPUSH
77086: CALL_OW 446
// end ;
77090: LD_VAR 0 2
77094: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
77095: LD_INT 0
77097: PPUSH
77098: PPUSH
// if not driver or not IsInUnit ( driver ) then
77099: LD_VAR 0 1
77103: NOT
77104: PUSH
77105: LD_VAR 0 1
77109: PPUSH
77110: CALL_OW 310
77114: NOT
77115: OR
77116: IFFALSE 77120
// exit ;
77118: GO 77210
// vehicle := IsInUnit ( driver ) ;
77120: LD_ADDR_VAR 0 3
77124: PUSH
77125: LD_VAR 0 1
77129: PPUSH
77130: CALL_OW 310
77134: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
77135: LD_VAR 0 1
77139: PPUSH
77140: LD_STRING \
77142: PUSH
77143: LD_INT 0
77145: PUSH
77146: LD_INT 0
77148: PUSH
77149: LD_INT 0
77151: PUSH
77152: LD_INT 0
77154: PUSH
77155: LD_INT 0
77157: PUSH
77158: LD_INT 0
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: LIST
77165: LIST
77166: LIST
77167: LIST
77168: LIST
77169: PUSH
77170: LD_STRING E
77172: PUSH
77173: LD_INT 0
77175: PUSH
77176: LD_INT 0
77178: PUSH
77179: LD_VAR 0 3
77183: PUSH
77184: LD_INT 0
77186: PUSH
77187: LD_INT 0
77189: PUSH
77190: LD_INT 0
77192: PUSH
77193: EMPTY
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PPUSH
77206: CALL_OW 447
// end ;
77210: LD_VAR 0 2
77214: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
77215: LD_INT 0
77217: PPUSH
77218: PPUSH
77219: PPUSH
// tmp := [ ] ;
77220: LD_ADDR_VAR 0 5
77224: PUSH
77225: EMPTY
77226: ST_TO_ADDR
// for i in units do
77227: LD_ADDR_VAR 0 4
77231: PUSH
77232: LD_VAR 0 1
77236: PUSH
77237: FOR_IN
77238: IFFALSE 77276
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
77240: LD_ADDR_VAR 0 5
77244: PUSH
77245: LD_VAR 0 5
77249: PPUSH
77250: LD_VAR 0 5
77254: PUSH
77255: LD_INT 1
77257: PLUS
77258: PPUSH
77259: LD_VAR 0 4
77263: PPUSH
77264: CALL_OW 256
77268: PPUSH
77269: CALL_OW 2
77273: ST_TO_ADDR
77274: GO 77237
77276: POP
77277: POP
// if not tmp then
77278: LD_VAR 0 5
77282: NOT
77283: IFFALSE 77287
// exit ;
77285: GO 77335
// if asc then
77287: LD_VAR 0 2
77291: IFFALSE 77315
// result := SortListByListAsc ( units , tmp ) else
77293: LD_ADDR_VAR 0 3
77297: PUSH
77298: LD_VAR 0 1
77302: PPUSH
77303: LD_VAR 0 5
77307: PPUSH
77308: CALL_OW 76
77312: ST_TO_ADDR
77313: GO 77335
// result := SortListByListDesc ( units , tmp ) ;
77315: LD_ADDR_VAR 0 3
77319: PUSH
77320: LD_VAR 0 1
77324: PPUSH
77325: LD_VAR 0 5
77329: PPUSH
77330: CALL_OW 77
77334: ST_TO_ADDR
// end ;
77335: LD_VAR 0 3
77339: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77340: LD_INT 0
77342: PPUSH
77343: PPUSH
// task := GetTaskList ( mech ) ;
77344: LD_ADDR_VAR 0 4
77348: PUSH
77349: LD_VAR 0 1
77353: PPUSH
77354: CALL_OW 437
77358: ST_TO_ADDR
// if not task then
77359: LD_VAR 0 4
77363: NOT
77364: IFFALSE 77368
// exit ;
77366: GO 77410
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77368: LD_ADDR_VAR 0 3
77372: PUSH
77373: LD_VAR 0 4
77377: PUSH
77378: LD_INT 1
77380: ARRAY
77381: PUSH
77382: LD_INT 1
77384: ARRAY
77385: PUSH
77386: LD_STRING r
77388: EQUAL
77389: PUSH
77390: LD_VAR 0 4
77394: PUSH
77395: LD_INT 1
77397: ARRAY
77398: PUSH
77399: LD_INT 4
77401: ARRAY
77402: PUSH
77403: LD_VAR 0 2
77407: EQUAL
77408: AND
77409: ST_TO_ADDR
// end ;
77410: LD_VAR 0 3
77414: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77415: LD_INT 0
77417: PPUSH
// SetDir ( unit , d ) ;
77418: LD_VAR 0 1
77422: PPUSH
77423: LD_VAR 0 4
77427: PPUSH
77428: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77432: LD_VAR 0 1
77436: PPUSH
77437: LD_VAR 0 2
77441: PPUSH
77442: LD_VAR 0 3
77446: PPUSH
77447: LD_VAR 0 5
77451: PPUSH
77452: CALL_OW 48
// end ;
77456: LD_VAR 0 6
77460: RET
// export function ToNaturalNumber ( number ) ; begin
77461: LD_INT 0
77463: PPUSH
// result := number div 1 ;
77464: LD_ADDR_VAR 0 2
77468: PUSH
77469: LD_VAR 0 1
77473: PUSH
77474: LD_INT 1
77476: DIV
77477: ST_TO_ADDR
// if number < 0 then
77478: LD_VAR 0 1
77482: PUSH
77483: LD_INT 0
77485: LESS
77486: IFFALSE 77496
// result := 0 ;
77488: LD_ADDR_VAR 0 2
77492: PUSH
77493: LD_INT 0
77495: ST_TO_ADDR
// end ;
77496: LD_VAR 0 2
77500: RET
// export function SortByClass ( units , class ) ; var un ; begin
77501: LD_INT 0
77503: PPUSH
77504: PPUSH
// if not units or not class then
77505: LD_VAR 0 1
77509: NOT
77510: PUSH
77511: LD_VAR 0 2
77515: NOT
77516: OR
77517: IFFALSE 77521
// exit ;
77519: GO 77616
// result := [ ] ;
77521: LD_ADDR_VAR 0 3
77525: PUSH
77526: EMPTY
77527: ST_TO_ADDR
// for un in units do
77528: LD_ADDR_VAR 0 4
77532: PUSH
77533: LD_VAR 0 1
77537: PUSH
77538: FOR_IN
77539: IFFALSE 77614
// if GetClass ( un ) = class then
77541: LD_VAR 0 4
77545: PPUSH
77546: CALL_OW 257
77550: PUSH
77551: LD_VAR 0 2
77555: EQUAL
77556: IFFALSE 77583
// result := Insert ( result , 1 , un ) else
77558: LD_ADDR_VAR 0 3
77562: PUSH
77563: LD_VAR 0 3
77567: PPUSH
77568: LD_INT 1
77570: PPUSH
77571: LD_VAR 0 4
77575: PPUSH
77576: CALL_OW 2
77580: ST_TO_ADDR
77581: GO 77612
// result := Replace ( result , result + 1 , un ) ;
77583: LD_ADDR_VAR 0 3
77587: PUSH
77588: LD_VAR 0 3
77592: PPUSH
77593: LD_VAR 0 3
77597: PUSH
77598: LD_INT 1
77600: PLUS
77601: PPUSH
77602: LD_VAR 0 4
77606: PPUSH
77607: CALL_OW 1
77611: ST_TO_ADDR
77612: GO 77538
77614: POP
77615: POP
// end ;
77616: LD_VAR 0 3
77620: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77621: LD_INT 0
77623: PPUSH
77624: PPUSH
77625: PPUSH
77626: PPUSH
77627: PPUSH
77628: PPUSH
77629: PPUSH
// result := [ ] ;
77630: LD_ADDR_VAR 0 4
77634: PUSH
77635: EMPTY
77636: ST_TO_ADDR
// if x - r < 0 then
77637: LD_VAR 0 1
77641: PUSH
77642: LD_VAR 0 3
77646: MINUS
77647: PUSH
77648: LD_INT 0
77650: LESS
77651: IFFALSE 77663
// min_x := 0 else
77653: LD_ADDR_VAR 0 8
77657: PUSH
77658: LD_INT 0
77660: ST_TO_ADDR
77661: GO 77679
// min_x := x - r ;
77663: LD_ADDR_VAR 0 8
77667: PUSH
77668: LD_VAR 0 1
77672: PUSH
77673: LD_VAR 0 3
77677: MINUS
77678: ST_TO_ADDR
// if y - r < 0 then
77679: LD_VAR 0 2
77683: PUSH
77684: LD_VAR 0 3
77688: MINUS
77689: PUSH
77690: LD_INT 0
77692: LESS
77693: IFFALSE 77705
// min_y := 0 else
77695: LD_ADDR_VAR 0 7
77699: PUSH
77700: LD_INT 0
77702: ST_TO_ADDR
77703: GO 77721
// min_y := y - r ;
77705: LD_ADDR_VAR 0 7
77709: PUSH
77710: LD_VAR 0 2
77714: PUSH
77715: LD_VAR 0 3
77719: MINUS
77720: ST_TO_ADDR
// max_x := x + r ;
77721: LD_ADDR_VAR 0 9
77725: PUSH
77726: LD_VAR 0 1
77730: PUSH
77731: LD_VAR 0 3
77735: PLUS
77736: ST_TO_ADDR
// max_y := y + r ;
77737: LD_ADDR_VAR 0 10
77741: PUSH
77742: LD_VAR 0 2
77746: PUSH
77747: LD_VAR 0 3
77751: PLUS
77752: ST_TO_ADDR
// for _x = min_x to max_x do
77753: LD_ADDR_VAR 0 5
77757: PUSH
77758: DOUBLE
77759: LD_VAR 0 8
77763: DEC
77764: ST_TO_ADDR
77765: LD_VAR 0 9
77769: PUSH
77770: FOR_TO
77771: IFFALSE 77872
// for _y = min_y to max_y do
77773: LD_ADDR_VAR 0 6
77777: PUSH
77778: DOUBLE
77779: LD_VAR 0 7
77783: DEC
77784: ST_TO_ADDR
77785: LD_VAR 0 10
77789: PUSH
77790: FOR_TO
77791: IFFALSE 77868
// begin if not ValidHex ( _x , _y ) then
77793: LD_VAR 0 5
77797: PPUSH
77798: LD_VAR 0 6
77802: PPUSH
77803: CALL_OW 488
77807: NOT
77808: IFFALSE 77812
// continue ;
77810: GO 77790
// if GetResourceTypeXY ( _x , _y ) then
77812: LD_VAR 0 5
77816: PPUSH
77817: LD_VAR 0 6
77821: PPUSH
77822: CALL_OW 283
77826: IFFALSE 77866
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77828: LD_ADDR_VAR 0 4
77832: PUSH
77833: LD_VAR 0 4
77837: PPUSH
77838: LD_VAR 0 4
77842: PUSH
77843: LD_INT 1
77845: PLUS
77846: PPUSH
77847: LD_VAR 0 5
77851: PUSH
77852: LD_VAR 0 6
77856: PUSH
77857: EMPTY
77858: LIST
77859: LIST
77860: PPUSH
77861: CALL_OW 1
77865: ST_TO_ADDR
// end ;
77866: GO 77790
77868: POP
77869: POP
77870: GO 77770
77872: POP
77873: POP
// end ;
77874: LD_VAR 0 4
77878: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77879: LD_INT 0
77881: PPUSH
77882: PPUSH
77883: PPUSH
77884: PPUSH
77885: PPUSH
77886: PPUSH
77887: PPUSH
77888: PPUSH
// if not units then
77889: LD_VAR 0 1
77893: NOT
77894: IFFALSE 77898
// exit ;
77896: GO 78323
// result := UnitFilter ( units , [ f_ok ] ) ;
77898: LD_ADDR_VAR 0 3
77902: PUSH
77903: LD_VAR 0 1
77907: PPUSH
77908: LD_INT 50
77910: PUSH
77911: EMPTY
77912: LIST
77913: PPUSH
77914: CALL_OW 72
77918: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77919: LD_ADDR_VAR 0 8
77923: PUSH
77924: LD_VAR 0 1
77928: PUSH
77929: LD_INT 1
77931: ARRAY
77932: PPUSH
77933: CALL_OW 255
77937: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
77938: LD_ADDR_VAR 0 10
77942: PUSH
77943: LD_INT 29
77945: PUSH
77946: LD_EXP 56
77950: PUSH
77951: EMPTY
77952: LIST
77953: LIST
77954: ST_TO_ADDR
// if not result then
77955: LD_VAR 0 3
77959: NOT
77960: IFFALSE 77964
// exit ;
77962: GO 78323
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77964: LD_ADDR_VAR 0 5
77968: PUSH
77969: LD_INT 81
77971: PUSH
77972: LD_VAR 0 8
77976: PUSH
77977: EMPTY
77978: LIST
77979: LIST
77980: PPUSH
77981: CALL_OW 69
77985: ST_TO_ADDR
// for i in result do
77986: LD_ADDR_VAR 0 4
77990: PUSH
77991: LD_VAR 0 3
77995: PUSH
77996: FOR_IN
77997: IFFALSE 78321
// begin tag := GetTag ( i ) + 1 ;
77999: LD_ADDR_VAR 0 9
78003: PUSH
78004: LD_VAR 0 4
78008: PPUSH
78009: CALL_OW 110
78013: PUSH
78014: LD_INT 1
78016: PLUS
78017: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
78018: LD_ADDR_VAR 0 7
78022: PUSH
78023: LD_VAR 0 4
78027: PPUSH
78028: CALL_OW 250
78032: PPUSH
78033: LD_VAR 0 4
78037: PPUSH
78038: CALL_OW 251
78042: PPUSH
78043: LD_INT 6
78045: PPUSH
78046: CALL 77621 0 3
78050: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
78051: LD_VAR 0 7
78055: PUSH
78056: LD_VAR 0 4
78060: PPUSH
78061: CALL_OW 264
78065: PUSH
78066: LD_VAR 0 10
78070: IN
78071: NOT
78072: AND
78073: IFFALSE 78112
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
78075: LD_VAR 0 4
78079: PPUSH
78080: LD_VAR 0 7
78084: PUSH
78085: LD_INT 1
78087: ARRAY
78088: PUSH
78089: LD_INT 1
78091: ARRAY
78092: PPUSH
78093: LD_VAR 0 7
78097: PUSH
78098: LD_INT 1
78100: ARRAY
78101: PUSH
78102: LD_INT 2
78104: ARRAY
78105: PPUSH
78106: CALL_OW 116
78110: GO 78319
// if path > tag then
78112: LD_VAR 0 2
78116: PUSH
78117: LD_VAR 0 9
78121: GREATER
78122: IFFALSE 78289
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
78124: LD_ADDR_VAR 0 6
78128: PUSH
78129: LD_VAR 0 5
78133: PPUSH
78134: LD_INT 91
78136: PUSH
78137: LD_VAR 0 4
78141: PUSH
78142: LD_INT 12
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: LIST
78149: PPUSH
78150: CALL_OW 72
78154: ST_TO_ADDR
// if nearEnemy then
78155: LD_VAR 0 6
78159: IFFALSE 78187
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
78161: LD_VAR 0 4
78165: PPUSH
78166: LD_VAR 0 6
78170: PPUSH
78171: LD_VAR 0 4
78175: PPUSH
78176: CALL_OW 74
78180: PPUSH
78181: CALL_OW 115
78185: GO 78287
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
78187: LD_VAR 0 4
78191: PPUSH
78192: LD_VAR 0 2
78196: PUSH
78197: LD_VAR 0 9
78201: ARRAY
78202: PUSH
78203: LD_INT 1
78205: ARRAY
78206: PPUSH
78207: LD_VAR 0 2
78211: PUSH
78212: LD_VAR 0 9
78216: ARRAY
78217: PUSH
78218: LD_INT 2
78220: ARRAY
78221: PPUSH
78222: CALL_OW 297
78226: PUSH
78227: LD_INT 6
78229: GREATER
78230: IFFALSE 78273
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78232: LD_VAR 0 4
78236: PPUSH
78237: LD_VAR 0 2
78241: PUSH
78242: LD_VAR 0 9
78246: ARRAY
78247: PUSH
78248: LD_INT 1
78250: ARRAY
78251: PPUSH
78252: LD_VAR 0 2
78256: PUSH
78257: LD_VAR 0 9
78261: ARRAY
78262: PUSH
78263: LD_INT 2
78265: ARRAY
78266: PPUSH
78267: CALL_OW 114
78271: GO 78287
// SetTag ( i , tag ) ;
78273: LD_VAR 0 4
78277: PPUSH
78278: LD_VAR 0 9
78282: PPUSH
78283: CALL_OW 109
// end else
78287: GO 78319
// if enemy then
78289: LD_VAR 0 5
78293: IFFALSE 78319
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78295: LD_VAR 0 4
78299: PPUSH
78300: LD_VAR 0 5
78304: PPUSH
78305: LD_VAR 0 4
78309: PPUSH
78310: CALL_OW 74
78314: PPUSH
78315: CALL_OW 115
// end ;
78319: GO 77996
78321: POP
78322: POP
// end ;
78323: LD_VAR 0 3
78327: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78328: LD_INT 0
78330: PPUSH
78331: PPUSH
78332: PPUSH
// if not unit or IsInUnit ( unit ) then
78333: LD_VAR 0 1
78337: NOT
78338: PUSH
78339: LD_VAR 0 1
78343: PPUSH
78344: CALL_OW 310
78348: OR
78349: IFFALSE 78353
// exit ;
78351: GO 78444
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78353: LD_ADDR_VAR 0 4
78357: PUSH
78358: LD_VAR 0 1
78362: PPUSH
78363: CALL_OW 250
78367: PPUSH
78368: LD_VAR 0 2
78372: PPUSH
78373: LD_INT 1
78375: PPUSH
78376: CALL_OW 272
78380: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78381: LD_ADDR_VAR 0 5
78385: PUSH
78386: LD_VAR 0 1
78390: PPUSH
78391: CALL_OW 251
78395: PPUSH
78396: LD_VAR 0 2
78400: PPUSH
78401: LD_INT 1
78403: PPUSH
78404: CALL_OW 273
78408: ST_TO_ADDR
// if ValidHex ( x , y ) then
78409: LD_VAR 0 4
78413: PPUSH
78414: LD_VAR 0 5
78418: PPUSH
78419: CALL_OW 488
78423: IFFALSE 78444
// ComTurnXY ( unit , x , y ) ;
78425: LD_VAR 0 1
78429: PPUSH
78430: LD_VAR 0 4
78434: PPUSH
78435: LD_VAR 0 5
78439: PPUSH
78440: CALL_OW 118
// end ;
78444: LD_VAR 0 3
78448: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78449: LD_INT 0
78451: PPUSH
78452: PPUSH
// result := false ;
78453: LD_ADDR_VAR 0 3
78457: PUSH
78458: LD_INT 0
78460: ST_TO_ADDR
// if not units then
78461: LD_VAR 0 2
78465: NOT
78466: IFFALSE 78470
// exit ;
78468: GO 78515
// for i in units do
78470: LD_ADDR_VAR 0 4
78474: PUSH
78475: LD_VAR 0 2
78479: PUSH
78480: FOR_IN
78481: IFFALSE 78513
// if See ( side , i ) then
78483: LD_VAR 0 1
78487: PPUSH
78488: LD_VAR 0 4
78492: PPUSH
78493: CALL_OW 292
78497: IFFALSE 78511
// begin result := true ;
78499: LD_ADDR_VAR 0 3
78503: PUSH
78504: LD_INT 1
78506: ST_TO_ADDR
// exit ;
78507: POP
78508: POP
78509: GO 78515
// end ;
78511: GO 78480
78513: POP
78514: POP
// end ;
78515: LD_VAR 0 3
78519: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78520: LD_INT 0
78522: PPUSH
78523: PPUSH
78524: PPUSH
78525: PPUSH
// if not unit or not points then
78526: LD_VAR 0 1
78530: NOT
78531: PUSH
78532: LD_VAR 0 2
78536: NOT
78537: OR
78538: IFFALSE 78542
// exit ;
78540: GO 78632
// dist := 99999 ;
78542: LD_ADDR_VAR 0 5
78546: PUSH
78547: LD_INT 99999
78549: ST_TO_ADDR
// for i in points do
78550: LD_ADDR_VAR 0 4
78554: PUSH
78555: LD_VAR 0 2
78559: PUSH
78560: FOR_IN
78561: IFFALSE 78630
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78563: LD_ADDR_VAR 0 6
78567: PUSH
78568: LD_VAR 0 1
78572: PPUSH
78573: LD_VAR 0 4
78577: PUSH
78578: LD_INT 1
78580: ARRAY
78581: PPUSH
78582: LD_VAR 0 4
78586: PUSH
78587: LD_INT 2
78589: ARRAY
78590: PPUSH
78591: CALL_OW 297
78595: ST_TO_ADDR
// if tmpDist < dist then
78596: LD_VAR 0 6
78600: PUSH
78601: LD_VAR 0 5
78605: LESS
78606: IFFALSE 78628
// begin result := i ;
78608: LD_ADDR_VAR 0 3
78612: PUSH
78613: LD_VAR 0 4
78617: ST_TO_ADDR
// dist := tmpDist ;
78618: LD_ADDR_VAR 0 5
78622: PUSH
78623: LD_VAR 0 6
78627: ST_TO_ADDR
// end ; end ;
78628: GO 78560
78630: POP
78631: POP
// end ;
78632: LD_VAR 0 3
78636: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78637: LD_INT 0
78639: PPUSH
// uc_side := side ;
78640: LD_ADDR_OWVAR 20
78644: PUSH
78645: LD_VAR 0 1
78649: ST_TO_ADDR
// uc_nation := 3 ;
78650: LD_ADDR_OWVAR 21
78654: PUSH
78655: LD_INT 3
78657: ST_TO_ADDR
// vc_chassis := 25 ;
78658: LD_ADDR_OWVAR 37
78662: PUSH
78663: LD_INT 25
78665: ST_TO_ADDR
// vc_engine := engine_siberite ;
78666: LD_ADDR_OWVAR 39
78670: PUSH
78671: LD_INT 3
78673: ST_TO_ADDR
// vc_control := control_computer ;
78674: LD_ADDR_OWVAR 38
78678: PUSH
78679: LD_INT 3
78681: ST_TO_ADDR
// vc_weapon := 59 ;
78682: LD_ADDR_OWVAR 40
78686: PUSH
78687: LD_INT 59
78689: ST_TO_ADDR
// result := CreateVehicle ;
78690: LD_ADDR_VAR 0 5
78694: PUSH
78695: CALL_OW 45
78699: ST_TO_ADDR
// SetDir ( result , d ) ;
78700: LD_VAR 0 5
78704: PPUSH
78705: LD_VAR 0 4
78709: PPUSH
78710: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78714: LD_VAR 0 5
78718: PPUSH
78719: LD_VAR 0 2
78723: PPUSH
78724: LD_VAR 0 3
78728: PPUSH
78729: LD_INT 0
78731: PPUSH
78732: CALL_OW 48
// end ; end_of_file
78736: LD_VAR 0 5
78740: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78741: LD_VAR 0 1
78745: PUSH
78746: LD_INT 200
78748: DOUBLE
78749: GREATEREQUAL
78750: IFFALSE 78758
78752: LD_INT 299
78754: DOUBLE
78755: LESSEQUAL
78756: IFTRUE 78760
78758: GO 78792
78760: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78761: LD_VAR 0 1
78765: PPUSH
78766: LD_VAR 0 2
78770: PPUSH
78771: LD_VAR 0 3
78775: PPUSH
78776: LD_VAR 0 4
78780: PPUSH
78781: LD_VAR 0 5
78785: PPUSH
78786: CALL 34340 0 5
78790: GO 78869
78792: LD_INT 300
78794: DOUBLE
78795: GREATEREQUAL
78796: IFFALSE 78804
78798: LD_INT 399
78800: DOUBLE
78801: LESSEQUAL
78802: IFTRUE 78806
78804: GO 78868
78806: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78807: LD_VAR 0 1
78811: PPUSH
78812: LD_VAR 0 2
78816: PPUSH
78817: LD_VAR 0 3
78821: PPUSH
78822: LD_VAR 0 4
78826: PPUSH
78827: LD_VAR 0 5
78831: PPUSH
78832: LD_VAR 0 6
78836: PPUSH
78837: LD_VAR 0 7
78841: PPUSH
78842: LD_VAR 0 8
78846: PPUSH
78847: LD_VAR 0 9
78851: PPUSH
78852: LD_VAR 0 10
78856: PPUSH
78857: LD_VAR 0 11
78861: PPUSH
78862: CALL 31982 0 11
78866: GO 78869
78868: POP
// end ;
78869: PPOPN 11
78871: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78872: LD_VAR 0 1
78876: PPUSH
78877: LD_VAR 0 2
78881: PPUSH
78882: LD_VAR 0 3
78886: PPUSH
78887: LD_VAR 0 4
78891: PPUSH
78892: LD_VAR 0 5
78896: PPUSH
78897: CALL 34076 0 5
// end ; end_of_file
78901: PPOPN 5
78903: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78904: LD_VAR 0 1
78908: PPUSH
78909: LD_VAR 0 2
78913: PPUSH
78914: LD_VAR 0 3
78918: PPUSH
78919: LD_VAR 0 4
78923: PPUSH
78924: LD_VAR 0 5
78928: PPUSH
78929: LD_VAR 0 6
78933: PPUSH
78934: CALL 19675 0 6
// end ;
78938: PPOPN 6
78940: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78941: CALL 19650 0 0
// end ;
78945: PPOPN 1
78947: END
