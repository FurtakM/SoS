// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15102 0 0
// PrepareDifficulty ;
  43: CALL 12317 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3776 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3914 0 0
// Action ;
  87: CALL 5580 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 25
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 38348 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 38348 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 38348 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 38348 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 38348 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 38348 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 38348 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 38348 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 38348 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 38348 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 38348 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 38348 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 38348 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 75029 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12636 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12636 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 6
3434: PPUSH
3435: CALL 12636 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 112
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12636 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 47
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 4
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12636 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 129
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12636 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 135
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12636 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: LD_INT 22
3582: PUSH
3583: LD_INT 3
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 30
3592: PUSH
3593: LD_INT 32
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: CALL_OW 69
3608: PUSH
3609: FOR_IN
3610: IFFALSE 3650
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3612: LD_INT 3
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_EXP 29
3627: PPUSH
3628: LD_EXP 30
3632: PPUSH
3633: CALL_OW 12
3637: PPUSH
3638: LD_INT 1
3640: PPUSH
3641: LD_INT 1
3643: PPUSH
3644: CALL 12636 0 6
3648: GO 3609
3650: POP
3651: POP
// for i := 1 to 5 do
3652: LD_ADDR_VAR 0 2
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 5
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3769
// begin uc_side := 3 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 3
3675: ST_TO_ADDR
// uc_nation := 3 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 3
3683: ST_TO_ADDR
// hc_gallery :=  ;
3684: LD_ADDR_OWVAR 33
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_name :=  ;
3692: LD_ADDR_OWVAR 26
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3700: LD_INT 0
3702: PPUSH
3703: LD_INT 4
3705: PPUSH
3706: LD_EXP 29
3710: PPUSH
3711: LD_EXP 30
3715: PPUSH
3716: CALL_OW 12
3720: PPUSH
3721: CALL_OW 380
// un := CreateHuman ;
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: CALL_OW 44
3734: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3735: LD_VAR 0 3
3739: PPUSH
3740: LD_INT 3
3742: PPUSH
3743: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3747: LD_ADDR_EXP 27
3751: PUSH
3752: LD_EXP 27
3756: PPUSH
3757: LD_VAR 0 3
3761: PPUSH
3762: CALL 75029 0 2
3766: ST_TO_ADDR
// end ;
3767: GO 3665
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function PrepareWestBase ; var i , un ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3781: LD_INT 10
3783: PPUSH
3784: LD_INT 122
3786: PPUSH
3787: LD_INT 145
3789: PPUSH
3790: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3794: LD_INT 137
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 61
3802: PPUSH
3803: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3807: LD_INT 3
3809: PPUSH
3810: LD_INT 3
3812: PPUSH
3813: LD_INT 6
3815: PPUSH
3816: LD_EXP 29
3820: PPUSH
3821: LD_EXP 30
3825: PPUSH
3826: CALL_OW 12
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_INT 3
3836: PPUSH
3837: CALL 12636 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 91
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 4
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12636 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 21
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 3
3901: PPUSH
3902: LD_INT 6
3904: PPUSH
3905: CALL 12636 0 6
// end ;
3909: LD_VAR 0 1
3913: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
3919: PPUSH
// uc_side = 3 ;
3920: LD_ADDR_OWVAR 20
3924: PUSH
3925: LD_INT 3
3927: ST_TO_ADDR
// uc_nation = 3 ;
3928: LD_ADDR_OWVAR 21
3932: PUSH
3933: LD_INT 3
3935: ST_TO_ADDR
// for i = 1 to 5 do
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: DOUBLE
3942: LD_INT 1
3944: DEC
3945: ST_TO_ADDR
3946: LD_INT 5
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4020
// begin hc_gallery =  ;
3952: LD_ADDR_OWVAR 33
3956: PUSH
3957: LD_STRING 
3959: ST_TO_ADDR
// hc_name =  ;
3960: LD_ADDR_OWVAR 26
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 9
3973: PPUSH
3974: LD_EXP 29
3978: PPUSH
3979: LD_EXP 30
3983: PPUSH
3984: CALL_OW 12
3988: PPUSH
3989: CALL_OW 380
// un = CreateHuman ;
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: CALL_OW 44
4002: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4003: LD_VAR 0 3
4007: PPUSH
4008: LD_INT 8
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// end ;
4018: GO 3949
4020: POP
4021: POP
// for i = 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: DOUBLE
4028: LD_INT 1
4030: DEC
4031: ST_TO_ADDR
4032: LD_INT 2
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: LD_OWVAR 67
4054: ARRAY
4055: PUSH
4056: FOR_TO
4057: IFFALSE 4127
// begin hc_gallery =  ;
4059: LD_ADDR_OWVAR 33
4063: PUSH
4064: LD_STRING 
4066: ST_TO_ADDR
// hc_name =  ;
4067: LD_ADDR_OWVAR 26
4071: PUSH
4072: LD_STRING 
4074: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4075: LD_INT 0
4077: PPUSH
4078: LD_INT 4
4080: PPUSH
4081: LD_EXP 29
4085: PPUSH
4086: LD_EXP 30
4090: PPUSH
4091: CALL_OW 12
4095: PPUSH
4096: CALL_OW 380
// un = CreateHuman ;
4100: LD_ADDR_VAR 0 3
4104: PUSH
4105: CALL_OW 44
4109: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4110: LD_VAR 0 3
4114: PPUSH
4115: LD_INT 8
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 4056
4127: POP
4128: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: DOUBLE
4135: LD_INT 1
4137: DEC
4138: ST_TO_ADDR
4139: LD_INT 3
4141: PUSH
4142: LD_INT 4
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: LD_INT 5
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: PUSH
4157: LD_OWVAR 67
4161: ARRAY
4162: PUSH
4163: FOR_TO
4164: IFFALSE 4360
// begin vc_engine = 3 ;
4166: LD_ADDR_OWVAR 39
4170: PUSH
4171: LD_INT 3
4173: ST_TO_ADDR
// vc_control = 1 ;
4174: LD_ADDR_OWVAR 38
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
4182: LD_ADDR_OWVAR 40
4186: PUSH
4187: LD_INT 42
4189: PUSH
4190: LD_INT 43
4192: PUSH
4193: LD_INT 44
4195: PUSH
4196: LD_INT 45
4198: PUSH
4199: LD_INT 46
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 5
4214: PPUSH
4215: CALL_OW 12
4219: ARRAY
4220: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4221: LD_OWVAR 40
4225: PUSH
4226: LD_INT 46
4228: EQUAL
4229: IFFALSE 4241
// vc_chassis = ru_heavy_tracked else
4231: LD_ADDR_OWVAR 37
4235: PUSH
4236: LD_INT 24
4238: ST_TO_ADDR
4239: GO 4268
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4241: LD_ADDR_OWVAR 37
4245: PUSH
4246: LD_INT 22
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 2
4261: PPUSH
4262: CALL_OW 12
4266: ARRAY
4267: ST_TO_ADDR
// veh = CreateVehicle ;
4268: LD_ADDR_VAR 0 4
4272: PUSH
4273: CALL_OW 45
4277: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4278: LD_VAR 0 4
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4290: LD_VAR 0 4
4294: PPUSH
4295: LD_INT 5
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// hc_gallery =  ;
4305: LD_ADDR_OWVAR 33
4309: PUSH
4310: LD_STRING 
4312: ST_TO_ADDR
// hc_name =  ;
4313: LD_ADDR_OWVAR 26
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4321: LD_INT 0
4323: PPUSH
4324: LD_INT 3
4326: PPUSH
4327: LD_INT 10
4329: PPUSH
4330: CALL_OW 380
// un = CreateHuman ;
4334: LD_ADDR_VAR 0 3
4338: PUSH
4339: CALL_OW 44
4343: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4344: LD_VAR 0 3
4348: PPUSH
4349: LD_VAR 0 4
4353: PPUSH
4354: CALL_OW 52
// end ;
4358: GO 4163
4360: POP
4361: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4362: LD_ADDR_VAR 0 2
4366: PUSH
4367: DOUBLE
4368: LD_INT 1
4370: DEC
4371: ST_TO_ADDR
4372: LD_INT 3
4374: PUSH
4375: LD_INT 4
4377: PUSH
4378: LD_INT 5
4380: PUSH
4381: LD_INT 5
4383: PUSH
4384: EMPTY
4385: LIST
4386: LIST
4387: LIST
4388: LIST
4389: PUSH
4390: LD_OWVAR 67
4394: ARRAY
4395: PUSH
4396: FOR_TO
4397: IFFALSE 4544
// begin vc_engine = 3 ;
4399: LD_ADDR_OWVAR 39
4403: PUSH
4404: LD_INT 3
4406: ST_TO_ADDR
// vc_control = 3 ;
4407: LD_ADDR_OWVAR 38
4411: PUSH
4412: LD_INT 3
4414: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4415: LD_ADDR_OWVAR 40
4419: PUSH
4420: LD_INT 42
4422: PUSH
4423: LD_INT 43
4425: PUSH
4426: LD_INT 44
4428: PUSH
4429: LD_INT 45
4431: PUSH
4432: LD_INT 46
4434: PUSH
4435: LD_INT 49
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: LIST
4445: PUSH
4446: LD_INT 1
4448: PPUSH
4449: LD_INT 5
4451: PPUSH
4452: CALL_OW 12
4456: ARRAY
4457: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4458: LD_OWVAR 40
4462: PUSH
4463: LD_INT 46
4465: EQUAL
4466: IFFALSE 4478
// vc_chassis = ru_heavy_tracked else
4468: LD_ADDR_OWVAR 37
4472: PUSH
4473: LD_INT 24
4475: ST_TO_ADDR
4476: GO 4505
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4478: LD_ADDR_OWVAR 37
4482: PUSH
4483: LD_INT 22
4485: PUSH
4486: LD_INT 21
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: LD_INT 1
4495: PPUSH
4496: LD_INT 2
4498: PPUSH
4499: CALL_OW 12
4503: ARRAY
4504: ST_TO_ADDR
// veh = CreateVehicle ;
4505: LD_ADDR_VAR 0 4
4509: PUSH
4510: CALL_OW 45
4514: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4515: LD_VAR 0 4
4519: PPUSH
4520: LD_INT 3
4522: PPUSH
4523: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4527: LD_VAR 0 4
4531: PPUSH
4532: LD_INT 6
4534: PPUSH
4535: LD_INT 0
4537: PPUSH
4538: CALL_OW 49
// end ;
4542: GO 4396
4544: POP
4545: POP
// end ; end_of_file
4546: LD_VAR 0 1
4550: RET
// export function PrepareKurt ; begin
4551: LD_INT 0
4553: PPUSH
// uc_side = 8 ;
4554: LD_ADDR_OWVAR 20
4558: PUSH
4559: LD_INT 8
4561: ST_TO_ADDR
// uc_nation = 2 ;
4562: LD_ADDR_OWVAR 21
4566: PUSH
4567: LD_INT 2
4569: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4570: LD_ADDR_OWVAR 37
4574: PUSH
4575: LD_INT 13
4577: ST_TO_ADDR
// vc_engine = 1 ;
4578: LD_ADDR_OWVAR 39
4582: PUSH
4583: LD_INT 1
4585: ST_TO_ADDR
// vc_control = 1 ;
4586: LD_ADDR_OWVAR 38
4590: PUSH
4591: LD_INT 1
4593: ST_TO_ADDR
// vc_weapon = 24 ;
4594: LD_ADDR_OWVAR 40
4598: PUSH
4599: LD_INT 24
4601: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4602: LD_ADDR_EXP 18
4606: PUSH
4607: CALL_OW 45
4611: ST_TO_ADDR
// if kurtStatus > 0 then
4612: LD_EXP 19
4616: PUSH
4617: LD_INT 0
4619: GREATER
4620: IFFALSE 4672
// begin Kurt = PrepareUnit ( Kurt , false ,  ) ;
4622: LD_ADDR_EXP 17
4626: PUSH
4627: LD_STRING Kurt
4629: PPUSH
4630: LD_INT 0
4632: PPUSH
4633: LD_STRING 
4635: PPUSH
4636: CALL 38348 0 3
4640: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4641: LD_EXP 18
4645: PPUSH
4646: LD_INT 4
4648: PPUSH
4649: LD_INT 0
4651: PPUSH
4652: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4656: LD_EXP 17
4660: PPUSH
4661: LD_EXP 18
4665: PPUSH
4666: CALL_OW 52
// end else
4670: GO 4749
// begin hc_name =  ;
4672: LD_ADDR_OWVAR 26
4676: PUSH
4677: LD_STRING 
4679: ST_TO_ADDR
// hc_gallery =  ;
4680: LD_ADDR_OWVAR 33
4684: PUSH
4685: LD_STRING 
4687: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4688: LD_INT 1
4690: PPUSH
4691: LD_INT 10
4693: PPUSH
4694: CALL_OW 381
// Kurt = CreateHuman ;
4698: LD_ADDR_EXP 17
4702: PUSH
4703: CALL_OW 44
4707: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4708: LD_EXP 18
4712: PPUSH
4713: LD_INT 4
4715: PPUSH
4716: LD_INT 0
4718: PPUSH
4719: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4723: LD_EXP 17
4727: PPUSH
4728: LD_EXP 18
4732: PPUSH
4733: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4737: LD_EXP 17
4741: PPUSH
4742: LD_STRING AltKurt
4744: PPUSH
4745: CALL_OW 38
// end ; end ;
4749: LD_VAR 0 1
4753: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4754: LD_INT 0
4756: PPUSH
4757: PPUSH
4758: PPUSH
4759: PPUSH
// for i = 1 to 3 do
4760: LD_ADDR_VAR 0 2
4764: PUSH
4765: DOUBLE
4766: LD_INT 1
4768: DEC
4769: ST_TO_ADDR
4770: LD_INT 3
4772: PUSH
4773: FOR_TO
4774: IFFALSE 4895
// begin uc_side = 1 ;
4776: LD_ADDR_OWVAR 20
4780: PUSH
4781: LD_INT 1
4783: ST_TO_ADDR
// uc_nation = 2 ;
4784: LD_ADDR_OWVAR 21
4788: PUSH
4789: LD_INT 2
4791: ST_TO_ADDR
// hc_gallery =  ;
4792: LD_ADDR_OWVAR 33
4796: PUSH
4797: LD_STRING 
4799: ST_TO_ADDR
// hc_name =  ;
4800: LD_ADDR_OWVAR 26
4804: PUSH
4805: LD_STRING 
4807: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4808: LD_EXP 19
4812: PUSH
4813: LD_INT 0
4815: EQUAL
4816: PUSH
4817: LD_EXP 19
4821: PUSH
4822: LD_INT 2
4824: EQUAL
4825: OR
4826: IFFALSE 4843
// PrepareHuman ( false , 1 , 6 ) else
4828: LD_INT 0
4830: PPUSH
4831: LD_INT 1
4833: PPUSH
4834: LD_INT 6
4836: PPUSH
4837: CALL_OW 380
4841: GO 4856
// PrepareHuman ( false , 1 , 8 ) ;
4843: LD_INT 0
4845: PPUSH
4846: LD_INT 1
4848: PPUSH
4849: LD_INT 8
4851: PPUSH
4852: CALL_OW 380
// un = CreateHuman ;
4856: LD_ADDR_VAR 0 3
4860: PUSH
4861: CALL_OW 44
4865: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4866: LD_VAR 0 3
4870: PPUSH
4871: LD_INT 4
4873: PPUSH
4874: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4878: LD_VAR 0 3
4882: PPUSH
4883: LD_INT 4
4885: PPUSH
4886: LD_INT 0
4888: PPUSH
4889: CALL_OW 49
// end ;
4893: GO 4773
4895: POP
4896: POP
// vc_chassis = 14 ;
4897: LD_ADDR_OWVAR 37
4901: PUSH
4902: LD_INT 14
4904: ST_TO_ADDR
// vc_engine = 3 ;
4905: LD_ADDR_OWVAR 39
4909: PUSH
4910: LD_INT 3
4912: ST_TO_ADDR
// vc_control = 1 ;
4913: LD_ADDR_OWVAR 38
4917: PUSH
4918: LD_INT 1
4920: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4921: LD_ADDR_OWVAR 40
4925: PUSH
4926: LD_INT 27
4928: PUSH
4929: LD_INT 26
4931: PUSH
4932: LD_INT 28
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: LIST
4939: PUSH
4940: LD_INT 1
4942: PPUSH
4943: LD_INT 3
4945: PPUSH
4946: CALL_OW 12
4950: ARRAY
4951: ST_TO_ADDR
// veh = CreateVehicle ;
4952: LD_ADDR_VAR 0 4
4956: PUSH
4957: CALL_OW 45
4961: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4962: LD_VAR 0 4
4966: PPUSH
4967: LD_INT 4
4969: PPUSH
4970: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4974: LD_VAR 0 4
4978: PPUSH
4979: LD_INT 4
4981: PPUSH
4982: LD_INT 0
4984: PPUSH
4985: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4989: LD_EXP 19
4993: PUSH
4994: LD_INT 0
4996: EQUAL
4997: PUSH
4998: LD_EXP 19
5002: PUSH
5003: LD_INT 2
5005: EQUAL
5006: OR
5007: IFFALSE 5024
// PrepareHuman ( false , 3 , 6 ) else
5009: LD_INT 0
5011: PPUSH
5012: LD_INT 3
5014: PPUSH
5015: LD_INT 6
5017: PPUSH
5018: CALL_OW 380
5022: GO 5037
// PrepareHuman ( false , 3 , 8 ) ;
5024: LD_INT 0
5026: PPUSH
5027: LD_INT 3
5029: PPUSH
5030: LD_INT 8
5032: PPUSH
5033: CALL_OW 380
// un = CreateHuman ;
5037: LD_ADDR_VAR 0 3
5041: PUSH
5042: CALL_OW 44
5046: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5047: LD_VAR 0 3
5051: PPUSH
5052: LD_VAR 0 4
5056: PPUSH
5057: CALL_OW 52
// vc_chassis = 14 ;
5061: LD_ADDR_OWVAR 37
5065: PUSH
5066: LD_INT 14
5068: ST_TO_ADDR
// vc_engine = 3 ;
5069: LD_ADDR_OWVAR 39
5073: PUSH
5074: LD_INT 3
5076: ST_TO_ADDR
// vc_control = 1 ;
5077: LD_ADDR_OWVAR 38
5081: PUSH
5082: LD_INT 1
5084: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5085: LD_ADDR_OWVAR 40
5089: PUSH
5090: LD_INT 27
5092: PUSH
5093: LD_INT 26
5095: PUSH
5096: LD_INT 28
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: PUSH
5104: LD_INT 1
5106: PPUSH
5107: LD_INT 3
5109: PPUSH
5110: CALL_OW 12
5114: ARRAY
5115: ST_TO_ADDR
// veh = CreateVehicle ;
5116: LD_ADDR_VAR 0 4
5120: PUSH
5121: CALL_OW 45
5125: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5126: LD_VAR 0 4
5130: PPUSH
5131: LD_INT 4
5133: PPUSH
5134: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5138: LD_VAR 0 4
5142: PPUSH
5143: LD_INT 4
5145: PPUSH
5146: LD_INT 0
5148: PPUSH
5149: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5153: LD_EXP 19
5157: PUSH
5158: LD_INT 0
5160: EQUAL
5161: PUSH
5162: LD_EXP 19
5166: PUSH
5167: LD_INT 2
5169: EQUAL
5170: OR
5171: IFFALSE 5188
// PrepareHuman ( false , 4 , 6 ) else
5173: LD_INT 0
5175: PPUSH
5176: LD_INT 4
5178: PPUSH
5179: LD_INT 6
5181: PPUSH
5182: CALL_OW 380
5186: GO 5201
// PrepareHuman ( false , 4 , 8 ) ;
5188: LD_INT 0
5190: PPUSH
5191: LD_INT 4
5193: PPUSH
5194: LD_INT 8
5196: PPUSH
5197: CALL_OW 380
// un = CreateHuman ;
5201: LD_ADDR_VAR 0 3
5205: PUSH
5206: CALL_OW 44
5210: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5211: LD_VAR 0 3
5215: PPUSH
5216: LD_INT 4
5218: PPUSH
5219: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5223: LD_VAR 0 3
5227: PPUSH
5228: LD_VAR 0 4
5232: PPUSH
5233: CALL_OW 52
// vc_chassis = 14 ;
5237: LD_ADDR_OWVAR 37
5241: PUSH
5242: LD_INT 14
5244: ST_TO_ADDR
// vc_engine = 3 ;
5245: LD_ADDR_OWVAR 39
5249: PUSH
5250: LD_INT 3
5252: ST_TO_ADDR
// vc_control = 1 ;
5253: LD_ADDR_OWVAR 38
5257: PUSH
5258: LD_INT 1
5260: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5261: LD_ADDR_OWVAR 40
5265: PUSH
5266: LD_INT 27
5268: PUSH
5269: LD_INT 26
5271: PUSH
5272: LD_INT 28
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: PUSH
5280: LD_INT 1
5282: PPUSH
5283: LD_INT 3
5285: PPUSH
5286: CALL_OW 12
5290: ARRAY
5291: ST_TO_ADDR
// veh = CreateVehicle ;
5292: LD_ADDR_VAR 0 4
5296: PUSH
5297: CALL_OW 45
5301: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5302: LD_VAR 0 4
5306: PPUSH
5307: LD_INT 4
5309: PPUSH
5310: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5314: LD_VAR 0 4
5318: PPUSH
5319: LD_INT 4
5321: PPUSH
5322: LD_INT 0
5324: PPUSH
5325: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5329: LD_EXP 19
5333: PUSH
5334: LD_INT 0
5336: EQUAL
5337: PUSH
5338: LD_EXP 19
5342: PUSH
5343: LD_INT 2
5345: EQUAL
5346: OR
5347: IFFALSE 5364
// PrepareHuman ( false , 2 , 4 ) else
5349: LD_INT 0
5351: PPUSH
5352: LD_INT 2
5354: PPUSH
5355: LD_INT 4
5357: PPUSH
5358: CALL_OW 380
5362: GO 5377
// PrepareHuman ( false , 2 , 8 ) ;
5364: LD_INT 0
5366: PPUSH
5367: LD_INT 2
5369: PPUSH
5370: LD_INT 8
5372: PPUSH
5373: CALL_OW 380
// un = CreateHuman ;
5377: LD_ADDR_VAR 0 3
5381: PUSH
5382: CALL_OW 44
5386: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5387: LD_VAR 0 3
5391: PPUSH
5392: LD_INT 4
5394: PPUSH
5395: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5399: LD_VAR 0 3
5403: PPUSH
5404: LD_VAR 0 4
5408: PPUSH
5409: CALL_OW 52
// end ;
5413: LD_VAR 0 1
5417: RET
// export function PrepareAttackLegion ; var i , un ; begin
5418: LD_INT 0
5420: PPUSH
5421: PPUSH
5422: PPUSH
// for i = 1 to 4 do
5423: LD_ADDR_VAR 0 2
5427: PUSH
5428: DOUBLE
5429: LD_INT 1
5431: DEC
5432: ST_TO_ADDR
5433: LD_INT 4
5435: PUSH
5436: FOR_TO
5437: IFFALSE 5547
// begin uc_side = 8 ;
5439: LD_ADDR_OWVAR 20
5443: PUSH
5444: LD_INT 8
5446: ST_TO_ADDR
// uc_nation = 2 ;
5447: LD_ADDR_OWVAR 21
5451: PUSH
5452: LD_INT 2
5454: ST_TO_ADDR
// hc_gallery =  ;
5455: LD_ADDR_OWVAR 33
5459: PUSH
5460: LD_STRING 
5462: ST_TO_ADDR
// hc_name =  ;
5463: LD_ADDR_OWVAR 26
5467: PUSH
5468: LD_STRING 
5470: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5471: LD_INT 0
5473: PPUSH
5474: LD_INT 1
5476: PUSH
5477: LD_INT 8
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 1
5486: PPUSH
5487: LD_INT 2
5489: PPUSH
5490: CALL_OW 12
5494: ARRAY
5495: PPUSH
5496: LD_INT 6
5498: PPUSH
5499: LD_INT 8
5501: PPUSH
5502: CALL_OW 12
5506: PPUSH
5507: CALL_OW 380
// un = CreateHuman ;
5511: LD_ADDR_VAR 0 3
5515: PUSH
5516: CALL_OW 44
5520: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5521: LD_VAR 0 3
5525: PPUSH
5526: LD_INT 19
5528: PPUSH
5529: LD_INT 0
5531: PPUSH
5532: CALL_OW 49
// ComCrawl ( un ) ;
5536: LD_VAR 0 3
5540: PPUSH
5541: CALL_OW 137
// end ;
5545: GO 5436
5547: POP
5548: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5549: LD_INT 1
5551: PPUSH
5552: LD_INT 8
5554: PPUSH
5555: LD_INT 2
5557: PPUSH
5558: LD_INT 1
5560: PPUSH
5561: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5565: LD_INT 20
5567: PPUSH
5568: LD_INT 3
5570: PPUSH
5571: CALL 14614 0 2
// end ; end_of_file
5575: LD_VAR 0 1
5579: RET
// export function Action ; var i , tmp , group ; begin
5580: LD_INT 0
5582: PPUSH
5583: PPUSH
5584: PPUSH
5585: PPUSH
// InGameOn ;
5586: CALL_OW 8
// music_nat := 1 ;
5590: LD_ADDR_OWVAR 71
5594: PUSH
5595: LD_INT 1
5597: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5598: LD_ADDR_VAR 0 4
5602: PUSH
5603: LD_INT 22
5605: PUSH
5606: LD_INT 1
5608: PUSH
5609: EMPTY
5610: LIST
5611: LIST
5612: PPUSH
5613: CALL_OW 69
5617: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5618: LD_ADDR_VAR 0 3
5622: PUSH
5623: LD_EXP 1
5627: PPUSH
5628: CALL_OW 310
5632: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5633: LD_VAR 0 3
5637: PPUSH
5638: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5642: LD_VAR 0 4
5646: PPUSH
5647: LD_INT 130
5649: PPUSH
5650: LD_INT 103
5652: PPUSH
5653: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5657: LD_VAR 0 3
5661: PPUSH
5662: LD_INT 114
5664: PPUSH
5665: LD_INT 102
5667: PPUSH
5668: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5672: LD_EXP 1
5676: PPUSH
5677: LD_STRING D1-JMM-1
5679: PPUSH
5680: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5684: LD_VAR 0 3
5688: PPUSH
5689: CALL_OW 87
// if IsOk ( Donaldson ) then
5693: LD_EXP 3
5697: PPUSH
5698: CALL_OW 302
5702: IFFALSE 5767
// begin Say ( Donaldson , D1-Don-1 ) ;
5704: LD_EXP 3
5708: PPUSH
5709: LD_STRING D1-Don-1
5711: PPUSH
5712: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5716: LD_VAR 0 3
5720: PPUSH
5721: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5725: LD_EXP 1
5729: PPUSH
5730: LD_STRING D1-JMM-2
5732: PPUSH
5733: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5737: LD_VAR 0 3
5741: PPUSH
5742: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5746: LD_EXP 3
5750: PPUSH
5751: LD_STRING D1-Don-2
5753: PPUSH
5754: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5758: LD_VAR 0 3
5762: PPUSH
5763: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5767: LD_VAR 0 4
5771: PPUSH
5772: LD_INT 110
5774: PPUSH
5775: LD_INT 101
5777: PPUSH
5778: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5782: LD_INT 35
5784: PPUSH
5785: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5789: LD_VAR 0 3
5793: PPUSH
5794: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5798: LD_INT 1
5800: PPUSH
5801: LD_INT 102
5803: PPUSH
5804: LD_INT 94
5806: PPUSH
5807: CALL_OW 293
5811: IFFALSE 5782
// CenterOnXY ( 102 , 94 ) ;
5813: LD_INT 102
5815: PPUSH
5816: LD_INT 94
5818: PPUSH
5819: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5823: LD_VAR 0 4
5827: PPUSH
5828: LD_INT 26
5830: PUSH
5831: LD_INT 1
5833: PUSH
5834: EMPTY
5835: LIST
5836: LIST
5837: PPUSH
5838: CALL_OW 72
5842: PPUSH
5843: LD_STRING D1-Sol1-2
5845: PPUSH
5846: LD_STRING 
5848: PPUSH
5849: CALL 12131 0 3
// Say ( JMM , D1-JMM-3 ) ;
5853: LD_EXP 1
5857: PPUSH
5858: LD_STRING D1-JMM-3
5860: PPUSH
5861: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5865: LD_STRING M1
5867: PPUSH
5868: CALL_OW 337
// for i in group do
5872: LD_ADDR_VAR 0 2
5876: PUSH
5877: LD_VAR 0 4
5881: PUSH
5882: FOR_IN
5883: IFFALSE 5902
// ComMoveXY ( i , 95 , 84 ) ;
5885: LD_VAR 0 2
5889: PPUSH
5890: LD_INT 95
5892: PPUSH
5893: LD_INT 84
5895: PPUSH
5896: CALL_OW 111
5900: GO 5882
5902: POP
5903: POP
// end ;
5904: LD_VAR 0 1
5908: RET
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5909: GO 5911
5911: DISABLE
5912: LD_INT 0
5914: PPUSH
5915: PPUSH
5916: PPUSH
5917: PPUSH
// begin enable ;
5918: ENABLE
// bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5919: LD_ADDR_VAR 0 2
5923: PUSH
5924: LD_INT 8
5926: PPUSH
5927: LD_INT 22
5929: PUSH
5930: LD_INT 3
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 25
5939: PUSH
5940: LD_INT 9
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: EMPTY
5948: LIST
5949: LIST
5950: PPUSH
5951: CALL_OW 70
5955: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5956: LD_ADDR_VAR 0 3
5960: PUSH
5961: LD_INT 22
5963: PUSH
5964: LD_INT 1
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PUSH
5971: EMPTY
5972: LIST
5973: PPUSH
5974: CALL_OW 69
5978: ST_TO_ADDR
// for i in your_units do
5979: LD_ADDR_VAR 0 1
5983: PUSH
5984: LD_VAR 0 3
5988: PUSH
5989: FOR_IN
5990: IFFALSE 6664
// begin if See ( 3 , i ) then
5992: LD_INT 3
5994: PPUSH
5995: LD_VAR 0 1
5999: PPUSH
6000: CALL_OW 292
6004: IFFALSE 6662
// begin disable ;
6006: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_INT 96
6014: PPUSH
6015: LD_INT 85
6017: PPUSH
6018: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6022: LD_VAR 0 2
6026: PPUSH
6027: LD_INT 96
6029: PPUSH
6030: LD_INT 85
6032: PPUSH
6033: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6037: LD_VAR 0 2
6041: PPUSH
6042: LD_INT 96
6044: PPUSH
6045: LD_INT 85
6047: PPUSH
6048: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6052: LD_VAR 0 2
6056: PPUSH
6057: LD_INT 96
6059: PPUSH
6060: LD_INT 85
6062: PPUSH
6063: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6067: LD_VAR 0 2
6071: PPUSH
6072: LD_INT 96
6074: PPUSH
6075: LD_INT 85
6077: PPUSH
6078: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6082: LD_VAR 0 2
6086: PPUSH
6087: LD_INT 96
6089: PPUSH
6090: LD_INT 85
6092: PPUSH
6093: CALL_OW 214
// wait ( 0 0$2 ) ;
6097: LD_INT 70
6099: PPUSH
6100: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6104: LD_EXP 1
6108: PPUSH
6109: LD_STRING D1a-JMM-1
6111: PPUSH
6112: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6116: LD_EXP 3
6120: PPUSH
6121: LD_STRING D1a-Don-1
6123: PPUSH
6124: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6128: LD_ADDR_VAR 0 1
6132: PUSH
6133: LD_INT 22
6135: PUSH
6136: LD_INT 1
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 69
6147: PUSH
6148: FOR_IN
6149: IFFALSE 6168
// ComMoveXY ( i , 109 , 102 ) ;
6151: LD_VAR 0 1
6155: PPUSH
6156: LD_INT 109
6158: PPUSH
6159: LD_INT 102
6161: PPUSH
6162: CALL_OW 111
6166: GO 6148
6168: POP
6169: POP
// Say ( JMM , D1a-JMM-2 ) ;
6170: LD_EXP 1
6174: PPUSH
6175: LD_STRING D1a-JMM-2
6177: PPUSH
6178: CALL_OW 88
// wait ( 0 0$10 ) ;
6182: LD_INT 350
6184: PPUSH
6185: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6189: LD_EXP 1
6193: PPUSH
6194: CALL_OW 310
6198: PPUSH
6199: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6203: LD_EXP 3
6207: PPUSH
6208: LD_STRING D1b-Don-1
6210: PPUSH
6211: CALL_OW 88
// if IsOk ( Donaldson ) then
6215: LD_EXP 3
6219: PPUSH
6220: CALL_OW 302
6224: IFFALSE 6238
// Say ( JMM , D1b-JMM-1 ) ;
6226: LD_EXP 1
6230: PPUSH
6231: LD_STRING D1b-JMM-1
6233: PPUSH
6234: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6238: LD_INT 22
6240: PUSH
6241: LD_INT 1
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PUSH
6248: LD_INT 26
6250: PUSH
6251: LD_INT 1
6253: PUSH
6254: EMPTY
6255: LIST
6256: LIST
6257: PUSH
6258: LD_INT 2
6260: PUSH
6261: LD_INT 25
6263: PUSH
6264: LD_INT 1
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 25
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: LD_INT 25
6283: PUSH
6284: LD_INT 3
6286: PUSH
6287: EMPTY
6288: LIST
6289: LIST
6290: PUSH
6291: LD_INT 25
6293: PUSH
6294: LD_INT 4
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PUSH
6301: LD_INT 25
6303: PUSH
6304: LD_INT 5
6306: PUSH
6307: EMPTY
6308: LIST
6309: LIST
6310: PUSH
6311: LD_INT 25
6313: PUSH
6314: LD_INT 8
6316: PUSH
6317: EMPTY
6318: LIST
6319: LIST
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: PUSH
6330: EMPTY
6331: LIST
6332: LIST
6333: LIST
6334: PPUSH
6335: CALL_OW 69
6339: PPUSH
6340: LD_STRING D1b-Sol1-1
6342: PPUSH
6343: LD_STRING 
6345: PPUSH
6346: CALL 12131 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6350: LD_EXP 3
6354: PPUSH
6355: LD_STRING D1b-Don-2
6357: PPUSH
6358: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6362: LD_EXP 1
6366: PPUSH
6367: LD_STRING D1b-JMM-2
6369: PPUSH
6370: CALL_OW 88
// dec = ShowQuery1 ;
6374: LD_ADDR_VAR 0 4
6378: PUSH
6379: CALL 12594 0 0
6383: ST_TO_ADDR
// if dec = 1 then
6384: LD_VAR 0 4
6388: PUSH
6389: LD_INT 1
6391: EQUAL
6392: IFFALSE 6498
// begin Say ( JMM , D2-JMM-1 ) ;
6394: LD_EXP 1
6398: PPUSH
6399: LD_STRING D2-JMM-1
6401: PPUSH
6402: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6406: LD_EXP 15
6410: PPUSH
6411: LD_STRING D2-Pow-1
6413: PPUSH
6414: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6418: LD_EXP 1
6422: PPUSH
6423: LD_STRING D2a-JMM-1
6425: PPUSH
6426: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6430: LD_EXP 15
6434: PPUSH
6435: LD_STRING D2a-Pow-1
6437: PPUSH
6438: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6442: LD_EXP 1
6446: PPUSH
6447: LD_STRING D2a-JMM-2
6449: PPUSH
6450: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6454: LD_EXP 15
6458: PPUSH
6459: LD_STRING D2a-Pow-2
6461: PPUSH
6462: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6466: LD_EXP 1
6470: PPUSH
6471: LD_STRING D2a-JMM-3
6473: PPUSH
6474: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6478: LD_EXP 15
6482: PPUSH
6483: LD_STRING D2a-Pow-3
6485: PPUSH
6486: CALL_OW 94
// secondPass = 2 ;
6490: LD_ADDR_EXP 20
6494: PUSH
6495: LD_INT 2
6497: ST_TO_ADDR
// end ; if dec = 2 then
6498: LD_VAR 0 4
6502: PUSH
6503: LD_INT 2
6505: EQUAL
6506: IFFALSE 6600
// begin Say ( JMM , D2-JMM-1 ) ;
6508: LD_EXP 1
6512: PPUSH
6513: LD_STRING D2-JMM-1
6515: PPUSH
6516: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6520: LD_EXP 15
6524: PPUSH
6525: LD_STRING D2-Pow-1
6527: PPUSH
6528: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6532: LD_EXP 1
6536: PPUSH
6537: LD_STRING D2b-JMM-1
6539: PPUSH
6540: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6544: LD_EXP 15
6548: PPUSH
6549: LD_STRING D2b-Pow-1
6551: PPUSH
6552: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6556: LD_EXP 1
6560: PPUSH
6561: LD_STRING D2c-JMM-1
6563: PPUSH
6564: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6568: LD_EXP 15
6572: PPUSH
6573: LD_STRING D2c-Pow-1
6575: PPUSH
6576: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6580: LD_EXP 1
6584: PPUSH
6585: LD_STRING D2c-JMM-2
6587: PPUSH
6588: CALL_OW 88
// secondPass = 2 ;
6592: LD_ADDR_EXP 20
6596: PUSH
6597: LD_INT 2
6599: ST_TO_ADDR
// end ; if dec = 3 then
6600: LD_VAR 0 4
6604: PUSH
6605: LD_INT 3
6607: EQUAL
6608: IFFALSE 6618
// secondPass = 1 ;
6610: LD_ADDR_EXP 20
6614: PUSH
6615: LD_INT 1
6617: ST_TO_ADDR
// InGameOff ;
6618: CALL_OW 9
// ruAI := 1 ;
6622: LD_ADDR_EXP 34
6626: PUSH
6627: LD_INT 1
6629: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6630: LD_INT 1
6632: PPUSH
6633: LD_INT 3
6635: PPUSH
6636: LD_INT 2
6638: PPUSH
6639: LD_INT 1
6641: PPUSH
6642: CALL_OW 80
// music_nat := music_auto ;
6646: LD_ADDR_OWVAR 71
6650: PUSH
6651: LD_INT 0
6653: ST_TO_ADDR
// SaveForQuickRestart ;
6654: CALL_OW 22
// exit ;
6658: POP
6659: POP
6660: GO 6666
// end ; end ;
6662: GO 5989
6664: POP
6665: POP
// end ;
6666: PPOPN 4
6668: END
// every 1 1$0 trigger secondPass = 2 do
6669: LD_EXP 20
6673: PUSH
6674: LD_INT 2
6676: EQUAL
6677: IFFALSE 6897
6679: GO 6681
6681: DISABLE
// begin PowellSupport1 ;
6682: CALL 1985 0 0
// DialogueOn ;
6686: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6690: LD_EXP 1
6694: PPUSH
6695: LD_STRING DC1-JMM-1
6697: PPUSH
6698: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6702: LD_EXP 15
6706: PPUSH
6707: LD_STRING DC1-Pow-1
6709: PPUSH
6710: CALL_OW 94
// DialogueOff ;
6714: CALL_OW 7
// wait ( 3 3$0 ) ;
6718: LD_INT 6300
6720: PPUSH
6721: CALL_OW 67
// PowellSupport2 ;
6725: CALL 2466 0 0
// DialogueOn ;
6729: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6733: LD_EXP 1
6737: PPUSH
6738: LD_STRING DC2-JMM-1
6740: PPUSH
6741: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6745: LD_EXP 15
6749: PPUSH
6750: LD_STRING DC2-Pow-1
6752: PPUSH
6753: CALL_OW 94
// DialogueOff ;
6757: CALL_OW 7
// wait ( 3 3$00 ) ;
6761: LD_INT 6300
6763: PPUSH
6764: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6768: LD_INT 35
6770: PPUSH
6771: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6775: LD_INT 22
6777: PUSH
6778: LD_INT 1
6780: PUSH
6781: EMPTY
6782: LIST
6783: LIST
6784: PUSH
6785: LD_INT 2
6787: PUSH
6788: LD_INT 30
6790: PUSH
6791: LD_INT 0
6793: PUSH
6794: EMPTY
6795: LIST
6796: LIST
6797: PUSH
6798: LD_INT 30
6800: PUSH
6801: LD_INT 1
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: PUSH
6808: EMPTY
6809: LIST
6810: LIST
6811: LIST
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PPUSH
6817: CALL_OW 69
6821: PUSH
6822: LD_INT 11
6824: PPUSH
6825: LD_INT 22
6827: PUSH
6828: LD_INT 3
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PPUSH
6835: CALL_OW 70
6839: NOT
6840: AND
6841: IFFALSE 6768
// wait ( 0 0$10 ) ;
6843: LD_INT 350
6845: PPUSH
6846: CALL_OW 67
// Legion ;
6850: CALL 6898 0 0
// wait ( 5 5$0 ) ;
6854: LD_INT 10500
6856: PPUSH
6857: CALL_OW 67
// PowellSupport3 ;
6861: CALL 3079 0 0
// DialogueOn ;
6865: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6869: LD_EXP 15
6873: PPUSH
6874: LD_STRING DC3-Pow-1
6876: PPUSH
6877: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6881: LD_EXP 1
6885: PPUSH
6886: LD_STRING DC3-JMM-1
6888: PPUSH
6889: CALL_OW 88
// DialogueOff ;
6893: CALL_OW 7
// end ;
6897: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6898: LD_INT 0
6900: PPUSH
6901: PPUSH
6902: PPUSH
6903: PPUSH
6904: PPUSH
6905: PPUSH
6906: PPUSH
6907: PPUSH
6908: PPUSH
6909: PPUSH
6910: PPUSH
6911: PPUSH
6912: PPUSH
6913: PPUSH
6914: PPUSH
6915: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6916: LD_ADDR_VAR 0 5
6920: PUSH
6921: LD_INT 22
6923: PUSH
6924: LD_INT 1
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: LD_INT 21
6933: PUSH
6934: LD_INT 3
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: LD_INT 2
6943: PUSH
6944: LD_INT 30
6946: PUSH
6947: LD_INT 0
6949: PUSH
6950: EMPTY
6951: LIST
6952: LIST
6953: PUSH
6954: LD_INT 30
6956: PUSH
6957: LD_INT 1
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PUSH
6964: EMPTY
6965: LIST
6966: LIST
6967: LIST
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: LIST
6973: PPUSH
6974: CALL_OW 69
6978: ST_TO_ADDR
// crates := 0 ;
6979: LD_ADDR_VAR 0 8
6983: PUSH
6984: LD_INT 0
6986: ST_TO_ADDR
// oil := 0 ;
6987: LD_ADDR_VAR 0 9
6991: PUSH
6992: LD_INT 0
6994: ST_TO_ADDR
// siberite := 0 ;
6995: LD_ADDR_VAR 0 10
6999: PUSH
7000: LD_INT 0
7002: ST_TO_ADDR
// payForNeutral := false ;
7003: LD_ADDR_VAR 0 13
7007: PUSH
7008: LD_INT 0
7010: ST_TO_ADDR
// payForHelp := false ;
7011: LD_ADDR_VAR 0 14
7015: PUSH
7016: LD_INT 0
7018: ST_TO_ADDR
// for i in tmp do
7019: LD_ADDR_VAR 0 2
7023: PUSH
7024: LD_VAR 0 5
7028: PUSH
7029: FOR_IN
7030: IFFALSE 7121
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7032: LD_ADDR_VAR 0 8
7036: PUSH
7037: LD_VAR 0 8
7041: PUSH
7042: LD_VAR 0 2
7046: PPUSH
7047: CALL_OW 274
7051: PPUSH
7052: LD_INT 1
7054: PPUSH
7055: CALL_OW 275
7059: PLUS
7060: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7061: LD_ADDR_VAR 0 9
7065: PUSH
7066: LD_VAR 0 9
7070: PUSH
7071: LD_VAR 0 2
7075: PPUSH
7076: CALL_OW 274
7080: PPUSH
7081: LD_INT 2
7083: PPUSH
7084: CALL_OW 275
7088: PLUS
7089: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7090: LD_ADDR_VAR 0 10
7094: PUSH
7095: LD_VAR 0 10
7099: PUSH
7100: LD_VAR 0 2
7104: PPUSH
7105: CALL_OW 274
7109: PPUSH
7110: LD_INT 3
7112: PPUSH
7113: CALL_OW 275
7117: PLUS
7118: ST_TO_ADDR
// end ;
7119: GO 7029
7121: POP
7122: POP
// PrepareKurt ;
7123: CALL 4551 0 0
// if not Kurt then
7127: LD_EXP 17
7131: NOT
7132: IFFALSE 7136
// exit ;
7134: GO 9255
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7136: LD_EXP 18
7140: PPUSH
7141: LD_INT 144
7143: PPUSH
7144: LD_INT 111
7146: PPUSH
7147: CALL_OW 111
// wait ( 0 0$2 ) ;
7151: LD_INT 70
7153: PPUSH
7154: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7158: LD_INT 167
7160: PPUSH
7161: LD_INT 121
7163: PPUSH
7164: LD_INT 1
7166: PPUSH
7167: LD_INT 10
7169: NEG
7170: PPUSH
7171: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7175: LD_EXP 17
7179: PPUSH
7180: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7184: LD_EXP 17
7188: PPUSH
7189: CALL_OW 87
// wait ( 0 0$1 ) ;
7193: LD_INT 35
7195: PPUSH
7196: CALL_OW 67
// DialogueOn ;
7200: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7204: LD_INT 22
7206: PUSH
7207: LD_INT 1
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 26
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 2
7226: PUSH
7227: LD_INT 25
7229: PUSH
7230: LD_INT 1
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: LD_INT 25
7239: PUSH
7240: LD_INT 2
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 25
7249: PUSH
7250: LD_INT 3
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: LD_INT 25
7259: PUSH
7260: LD_INT 4
7262: PUSH
7263: EMPTY
7264: LIST
7265: LIST
7266: PUSH
7267: LD_INT 25
7269: PUSH
7270: LD_INT 5
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 25
7279: PUSH
7280: LD_INT 8
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: LIST
7291: LIST
7292: LIST
7293: LIST
7294: LIST
7295: PUSH
7296: EMPTY
7297: LIST
7298: LIST
7299: LIST
7300: PPUSH
7301: CALL_OW 69
7305: PPUSH
7306: LD_STRING D3-Sol1-1
7308: PPUSH
7309: LD_STRING 
7311: PPUSH
7312: CALL 12131 0 3
// if KurtStatus then
7316: LD_EXP 19
7320: IFFALSE 7420
// begin Say ( Kurt , D3-Kurt-1 ) ;
7322: LD_EXP 17
7326: PPUSH
7327: LD_STRING D3-Kurt-1
7329: PPUSH
7330: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7334: LD_EXP 1
7338: PPUSH
7339: LD_STRING D3-JMM-1
7341: PPUSH
7342: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7346: LD_EXP 17
7350: PPUSH
7351: LD_STRING D3-Kurt-2
7353: PPUSH
7354: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7358: LD_EXP 1
7362: PPUSH
7363: LD_STRING D3-JMM-2
7365: PPUSH
7366: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7370: LD_EXP 17
7374: PPUSH
7375: LD_STRING D3-Kurt-4
7377: PPUSH
7378: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7382: LD_EXP 1
7386: PPUSH
7387: LD_STRING D3-JMM-4
7389: PPUSH
7390: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7394: LD_EXP 17
7398: PPUSH
7399: LD_STRING D3-Kurt-5
7401: PPUSH
7402: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7406: LD_EXP 17
7410: PPUSH
7411: LD_STRING D3-Kurt-5a
7413: PPUSH
7414: CALL_OW 88
// end else
7418: GO 7516
// begin Say ( Kurt , D3-Kurt-1 ) ;
7420: LD_EXP 17
7424: PPUSH
7425: LD_STRING D3-Kurt-1
7427: PPUSH
7428: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7432: LD_EXP 1
7436: PPUSH
7437: LD_STRING D3-JMM-1
7439: PPUSH
7440: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7444: LD_EXP 17
7448: PPUSH
7449: LD_STRING D3-Kurt-3
7451: PPUSH
7452: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7456: LD_EXP 1
7460: PPUSH
7461: LD_STRING D3-JMM-3
7463: PPUSH
7464: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7468: LD_EXP 17
7472: PPUSH
7473: LD_STRING D3-Kurt-4
7475: PPUSH
7476: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7480: LD_EXP 1
7484: PPUSH
7485: LD_STRING D3-JMM-4
7487: PPUSH
7488: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7492: LD_EXP 17
7496: PPUSH
7497: LD_STRING D3-Kurt-5
7499: PPUSH
7500: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7504: LD_EXP 17
7508: PPUSH
7509: LD_STRING D3-Kurt-5b
7511: PPUSH
7512: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7516: LD_VAR 0 8
7520: PUSH
7521: LD_INT 120
7523: PUSH
7524: LD_INT 60
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: LD_EXP 19
7535: PUSH
7536: LD_INT 1
7538: PLUS
7539: ARRAY
7540: GREATEREQUAL
7541: PUSH
7542: LD_VAR 0 10
7546: PUSH
7547: LD_INT 120
7549: PUSH
7550: LD_INT 60
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: PUSH
7557: LD_EXP 19
7561: PUSH
7562: LD_INT 1
7564: PLUS
7565: ARRAY
7566: GREATEREQUAL
7567: AND
7568: IFFALSE 7620
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7570: LD_ADDR_VAR 0 3
7574: PUSH
7575: LD_STRING Q2
7577: PUSH
7578: LD_STRING Q2K
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: PUSH
7585: LD_EXP 19
7589: PUSH
7590: LD_INT 1
7592: PLUS
7593: ARRAY
7594: PPUSH
7595: LD_INT 1
7597: PUSH
7598: LD_INT 2
7600: PUSH
7601: LD_INT 3
7603: PUSH
7604: LD_INT 4
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 98
7617: ST_TO_ADDR
7618: GO 7664
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7620: LD_ADDR_VAR 0 3
7624: PUSH
7625: LD_STRING Q2
7627: PUSH
7628: LD_STRING Q2K
7630: PUSH
7631: EMPTY
7632: LIST
7633: LIST
7634: PUSH
7635: LD_EXP 19
7639: PUSH
7640: LD_INT 1
7642: PLUS
7643: ARRAY
7644: PPUSH
7645: LD_INT 1
7647: PUSH
7648: LD_INT 3
7650: PUSH
7651: LD_INT 4
7653: PUSH
7654: EMPTY
7655: LIST
7656: LIST
7657: LIST
7658: PPUSH
7659: CALL_OW 98
7663: ST_TO_ADDR
// if dec1 = 1 then
7664: LD_VAR 0 3
7668: PUSH
7669: LD_INT 1
7671: EQUAL
7672: IFFALSE 7706
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7674: LD_EXP 1
7678: PPUSH
7679: LD_STRING D3Ka-JMM-1
7681: PPUSH
7682: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7686: LD_EXP 17
7690: PPUSH
7691: LD_STRING D3Ka-Kurt-1
7693: PPUSH
7694: CALL_OW 88
// warWithLegion = 1 ;
7698: LD_ADDR_EXP 23
7702: PUSH
7703: LD_INT 1
7705: ST_TO_ADDR
// end ; if dec1 = 2 then
7706: LD_VAR 0 3
7710: PUSH
7711: LD_INT 2
7713: EQUAL
7714: IFFALSE 7798
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7716: LD_EXP 1
7720: PPUSH
7721: LD_STRING D3Kb-JMM-1
7723: PPUSH
7724: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7728: LD_EXP 17
7732: PPUSH
7733: LD_STRING D3Kb-Kurt-1
7735: PPUSH
7736: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7740: LD_ADDR_VAR 0 11
7744: PUSH
7745: LD_INT 120
7747: PUSH
7748: LD_INT 60
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_EXP 19
7759: PUSH
7760: LD_INT 1
7762: PLUS
7763: ARRAY
7764: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7765: LD_ADDR_VAR 0 12
7769: PUSH
7770: LD_INT 120
7772: PUSH
7773: LD_INT 60
7775: PUSH
7776: EMPTY
7777: LIST
7778: LIST
7779: PUSH
7780: LD_EXP 19
7784: PUSH
7785: LD_INT 1
7787: PLUS
7788: ARRAY
7789: ST_TO_ADDR
// payForNeutral := true ;
7790: LD_ADDR_VAR 0 13
7794: PUSH
7795: LD_INT 1
7797: ST_TO_ADDR
// end ; if dec1 = 3 then
7798: LD_VAR 0 3
7802: PUSH
7803: LD_INT 3
7805: EQUAL
7806: IFFALSE 8041
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7808: LD_EXP 1
7812: PPUSH
7813: LD_STRING D3Kc1-JMM-1
7815: PPUSH
7816: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7820: LD_EXP 17
7824: PPUSH
7825: LD_STRING D3Kc1-Kurt-1
7827: PPUSH
7828: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7832: LD_EXP 1
7836: PPUSH
7837: LD_STRING D3Kc1-JMM-2
7839: PPUSH
7840: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7844: LD_EXP 17
7848: PPUSH
7849: LD_STRING D3Kc1-Kurt-2
7851: PPUSH
7852: CALL_OW 88
// askSiberite = 1 ;
7856: LD_ADDR_EXP 25
7860: PUSH
7861: LD_INT 1
7863: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7864: LD_ADDR_VAR 0 4
7868: PUSH
7869: LD_STRING Q2b
7871: PPUSH
7872: LD_INT 1
7874: PUSH
7875: LD_INT 2
7877: PUSH
7878: LD_INT 3
7880: PUSH
7881: EMPTY
7882: LIST
7883: LIST
7884: LIST
7885: PPUSH
7886: CALL_OW 98
7890: ST_TO_ADDR
// if dec2 = 1 then
7891: LD_VAR 0 4
7895: PUSH
7896: LD_INT 1
7898: EQUAL
7899: IFFALSE 7933
// begin Say ( JMM , D4a-JMM-1 ) ;
7901: LD_EXP 1
7905: PPUSH
7906: LD_STRING D4a-JMM-1
7908: PPUSH
7909: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7913: LD_EXP 17
7917: PPUSH
7918: LD_STRING D4b-Kurt-1
7920: PPUSH
7921: CALL_OW 88
// warWithLegion = 1 ;
7925: LD_ADDR_EXP 23
7929: PUSH
7930: LD_INT 1
7932: ST_TO_ADDR
// end ; if dec2 = 2 then
7933: LD_VAR 0 4
7937: PUSH
7938: LD_INT 2
7940: EQUAL
7941: IFFALSE 7975
// begin Say ( JMM , D4b-JMM-1 ) ;
7943: LD_EXP 1
7947: PPUSH
7948: LD_STRING D4b-JMM-1
7950: PPUSH
7951: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7955: LD_EXP 17
7959: PPUSH
7960: LD_STRING D4b-Kurt-1
7962: PPUSH
7963: CALL_OW 88
// warWithLegion = 1 ;
7967: LD_ADDR_EXP 23
7971: PUSH
7972: LD_INT 1
7974: ST_TO_ADDR
// end ; if dec2 = 3 then
7975: LD_VAR 0 4
7979: PUSH
7980: LD_INT 3
7982: EQUAL
7983: IFFALSE 8041
// begin Say ( JMM , D4c-JMM-1 ) ;
7985: LD_EXP 1
7989: PPUSH
7990: LD_STRING D4c-JMM-1
7992: PPUSH
7993: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7997: LD_EXP 17
8001: PPUSH
8002: LD_STRING D4c-Kurt-1
8004: PPUSH
8005: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8009: LD_EXP 1
8013: PPUSH
8014: LD_STRING D4c-JMM-2
8016: PPUSH
8017: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8021: LD_EXP 17
8025: PPUSH
8026: LD_STRING D4c-Kurt-2
8028: PPUSH
8029: CALL_OW 88
// fakeInfo = 1 ;
8033: LD_ADDR_EXP 24
8037: PUSH
8038: LD_INT 1
8040: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8041: LD_VAR 0 3
8045: PUSH
8046: LD_INT 4
8048: EQUAL
8049: IFFALSE 9111
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8051: LD_EXP 1
8055: PPUSH
8056: LD_STRING D3Kd-JMM-1
8058: PPUSH
8059: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8063: LD_VAR 0 8
8067: PUSH
8068: LD_INT 200
8070: PUSH
8071: LD_INT 120
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_EXP 19
8082: PUSH
8083: LD_INT 1
8085: PLUS
8086: ARRAY
8087: GREATEREQUAL
8088: PUSH
8089: LD_VAR 0 10
8093: PUSH
8094: LD_INT 200
8096: PUSH
8097: LD_INT 120
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PUSH
8104: LD_EXP 19
8108: PUSH
8109: LD_INT 1
8111: PLUS
8112: ARRAY
8113: GREATEREQUAL
8114: AND
8115: IFFALSE 8167
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8117: LD_ADDR_VAR 0 4
8121: PUSH
8122: LD_STRING Q2a
8124: PUSH
8125: LD_STRING Q2aK
8127: PUSH
8128: EMPTY
8129: LIST
8130: LIST
8131: PUSH
8132: LD_EXP 19
8136: PUSH
8137: LD_INT 1
8139: PLUS
8140: ARRAY
8141: PPUSH
8142: LD_INT 1
8144: PUSH
8145: LD_INT 2
8147: PUSH
8148: LD_INT 3
8150: PUSH
8151: LD_INT 4
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: PPUSH
8160: CALL_OW 98
8164: ST_TO_ADDR
8165: GO 8331
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8167: LD_VAR 0 8
8171: PUSH
8172: LD_INT 120
8174: PUSH
8175: LD_INT 60
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_EXP 19
8186: PUSH
8187: LD_INT 1
8189: PLUS
8190: ARRAY
8191: GREATEREQUAL
8192: PUSH
8193: LD_VAR 0 10
8197: PUSH
8198: LD_INT 120
8200: PUSH
8201: LD_INT 60
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: PUSH
8208: LD_EXP 19
8212: PUSH
8213: LD_INT 1
8215: PLUS
8216: ARRAY
8217: GREATEREQUAL
8218: AND
8219: IFFALSE 8267
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8221: LD_ADDR_VAR 0 4
8225: PUSH
8226: LD_STRING Q2a
8228: PUSH
8229: LD_STRING Q2aK
8231: PUSH
8232: EMPTY
8233: LIST
8234: LIST
8235: PUSH
8236: LD_EXP 19
8240: PUSH
8241: LD_INT 1
8243: PLUS
8244: ARRAY
8245: PPUSH
8246: LD_INT 1
8248: PUSH
8249: LD_INT 2
8251: PUSH
8252: LD_INT 4
8254: PUSH
8255: EMPTY
8256: LIST
8257: LIST
8258: LIST
8259: PPUSH
8260: CALL_OW 98
8264: ST_TO_ADDR
8265: GO 8331
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8267: LD_STRING Q2d
8269: PUSH
8270: LD_STRING Q2dK
8272: PUSH
8273: EMPTY
8274: LIST
8275: LIST
8276: PUSH
8277: LD_EXP 19
8281: PUSH
8282: LD_INT 1
8284: PLUS
8285: ARRAY
8286: PPUSH
8287: CALL_OW 97
// dec2 := 0 ;
8291: LD_ADDR_VAR 0 4
8295: PUSH
8296: LD_INT 0
8298: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8299: LD_EXP 1
8303: PPUSH
8304: LD_STRING D3Kc1-JMM-1
8306: PPUSH
8307: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8311: LD_EXP 17
8315: PPUSH
8316: LD_STRING D3Kc2-Kurt-1
8318: PPUSH
8319: CALL_OW 88
// warWithLegion := 1 ;
8323: LD_ADDR_EXP 23
8327: PUSH
8328: LD_INT 1
8330: ST_TO_ADDR
// end ; if dec2 = 1 then
8331: LD_VAR 0 4
8335: PUSH
8336: LD_INT 1
8338: EQUAL
8339: IFFALSE 8373
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8341: LD_EXP 1
8345: PPUSH
8346: LD_STRING D5Ka-JMM-1
8348: PPUSH
8349: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8353: LD_EXP 17
8357: PPUSH
8358: LD_STRING D5Ka-Kurt-1
8360: PPUSH
8361: CALL_OW 88
// warWithLegion = 1 ;
8365: LD_ADDR_EXP 23
8369: PUSH
8370: LD_INT 1
8372: ST_TO_ADDR
// end ; if dec2 = 2 then
8373: LD_VAR 0 4
8377: PUSH
8378: LD_INT 2
8380: EQUAL
8381: IFFALSE 8465
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8383: LD_EXP 1
8387: PPUSH
8388: LD_STRING D3Kb-JMM-1
8390: PPUSH
8391: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8395: LD_EXP 17
8399: PPUSH
8400: LD_STRING D3Kb-Kurt-1
8402: PPUSH
8403: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8407: LD_ADDR_VAR 0 11
8411: PUSH
8412: LD_INT 120
8414: PUSH
8415: LD_INT 60
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: PUSH
8422: LD_EXP 19
8426: PUSH
8427: LD_INT 1
8429: PLUS
8430: ARRAY
8431: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8432: LD_ADDR_VAR 0 12
8436: PUSH
8437: LD_INT 120
8439: PUSH
8440: LD_INT 60
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: LD_EXP 19
8451: PUSH
8452: LD_INT 1
8454: PLUS
8455: ARRAY
8456: ST_TO_ADDR
// payForNeutral := true ;
8457: LD_ADDR_VAR 0 13
8461: PUSH
8462: LD_INT 1
8464: ST_TO_ADDR
// end ; if dec2 = 3 then
8465: LD_VAR 0 4
8469: PUSH
8470: LD_INT 3
8472: EQUAL
8473: IFFALSE 8557
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8475: LD_EXP 1
8479: PPUSH
8480: LD_STRING D3Ke-JMM-1
8482: PPUSH
8483: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8487: LD_EXP 17
8491: PPUSH
8492: LD_STRING D3Ke-Kurt-1
8494: PPUSH
8495: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8499: LD_ADDR_VAR 0 11
8503: PUSH
8504: LD_INT 200
8506: PUSH
8507: LD_INT 120
8509: PUSH
8510: EMPTY
8511: LIST
8512: LIST
8513: PUSH
8514: LD_EXP 19
8518: PUSH
8519: LD_INT 1
8521: PLUS
8522: ARRAY
8523: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8524: LD_ADDR_VAR 0 12
8528: PUSH
8529: LD_INT 200
8531: PUSH
8532: LD_INT 120
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: LD_EXP 19
8543: PUSH
8544: LD_INT 1
8546: PLUS
8547: ARRAY
8548: ST_TO_ADDR
// payForHelp := true ;
8549: LD_ADDR_VAR 0 14
8553: PUSH
8554: LD_INT 1
8556: ST_TO_ADDR
// end ; if dec2 = 4 then
8557: LD_VAR 0 4
8561: PUSH
8562: LD_INT 4
8564: EQUAL
8565: IFFALSE 8800
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8567: LD_EXP 1
8571: PPUSH
8572: LD_STRING D3Kc1-JMM-1
8574: PPUSH
8575: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8579: LD_EXP 17
8583: PPUSH
8584: LD_STRING D3Kc1-Kurt-1
8586: PPUSH
8587: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8591: LD_EXP 1
8595: PPUSH
8596: LD_STRING D3Kc1-JMM-2
8598: PPUSH
8599: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8603: LD_EXP 17
8607: PPUSH
8608: LD_STRING D3Kc1-Kurt-2
8610: PPUSH
8611: CALL_OW 88
// askSiberite = 1 ;
8615: LD_ADDR_EXP 25
8619: PUSH
8620: LD_INT 1
8622: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8623: LD_ADDR_VAR 0 4
8627: PUSH
8628: LD_STRING Q2b
8630: PPUSH
8631: LD_INT 1
8633: PUSH
8634: LD_INT 2
8636: PUSH
8637: LD_INT 3
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: LIST
8644: PPUSH
8645: CALL_OW 98
8649: ST_TO_ADDR
// if dec2 = 1 then
8650: LD_VAR 0 4
8654: PUSH
8655: LD_INT 1
8657: EQUAL
8658: IFFALSE 8692
// begin Say ( JMM , D4a-JMM-1 ) ;
8660: LD_EXP 1
8664: PPUSH
8665: LD_STRING D4a-JMM-1
8667: PPUSH
8668: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8672: LD_EXP 17
8676: PPUSH
8677: LD_STRING D4b-Kurt-1
8679: PPUSH
8680: CALL_OW 88
// warWithLegion = 1 ;
8684: LD_ADDR_EXP 23
8688: PUSH
8689: LD_INT 1
8691: ST_TO_ADDR
// end ; if dec2 = 2 then
8692: LD_VAR 0 4
8696: PUSH
8697: LD_INT 2
8699: EQUAL
8700: IFFALSE 8734
// begin Say ( JMM , D4b-JMM-1 ) ;
8702: LD_EXP 1
8706: PPUSH
8707: LD_STRING D4b-JMM-1
8709: PPUSH
8710: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8714: LD_EXP 17
8718: PPUSH
8719: LD_STRING D4b-Kurt-1
8721: PPUSH
8722: CALL_OW 88
// warWithLegion = 1 ;
8726: LD_ADDR_EXP 23
8730: PUSH
8731: LD_INT 1
8733: ST_TO_ADDR
// end ; if dec2 = 3 then
8734: LD_VAR 0 4
8738: PUSH
8739: LD_INT 3
8741: EQUAL
8742: IFFALSE 8800
// begin Say ( JMM , D4c-JMM-1 ) ;
8744: LD_EXP 1
8748: PPUSH
8749: LD_STRING D4c-JMM-1
8751: PPUSH
8752: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8756: LD_EXP 17
8760: PPUSH
8761: LD_STRING D4c-Kurt-1
8763: PPUSH
8764: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8768: LD_EXP 1
8772: PPUSH
8773: LD_STRING D4c-JMM-2
8775: PPUSH
8776: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8780: LD_EXP 17
8784: PPUSH
8785: LD_STRING D4c-Kurt-2
8787: PPUSH
8788: CALL_OW 88
// fakeInfo = 1 ;
8792: LD_ADDR_EXP 24
8796: PUSH
8797: LD_INT 1
8799: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8800: LD_VAR 0 13
8804: PUSH
8805: LD_VAR 0 14
8809: OR
8810: IFFALSE 9111
// begin for i in tmp do
8812: LD_ADDR_VAR 0 2
8816: PUSH
8817: LD_VAR 0 5
8821: PUSH
8822: FOR_IN
8823: IFFALSE 9109
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8825: LD_ADDR_VAR 0 6
8829: PUSH
8830: LD_VAR 0 2
8834: PPUSH
8835: CALL_OW 274
8839: PPUSH
8840: LD_INT 1
8842: PPUSH
8843: CALL_OW 275
8847: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8848: LD_ADDR_VAR 0 7
8852: PUSH
8853: LD_VAR 0 2
8857: PPUSH
8858: CALL_OW 274
8862: PPUSH
8863: LD_INT 3
8865: PPUSH
8866: CALL_OW 275
8870: ST_TO_ADDR
// if cr then
8871: LD_VAR 0 11
8875: IFFALSE 8989
// begin if tmp2 and tmp2 < cr then
8877: LD_VAR 0 6
8881: PUSH
8882: LD_VAR 0 6
8886: PUSH
8887: LD_VAR 0 11
8891: LESS
8892: AND
8893: IFFALSE 8941
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8895: LD_VAR 0 2
8899: PPUSH
8900: CALL_OW 274
8904: PPUSH
8905: LD_INT 1
8907: PPUSH
8908: LD_VAR 0 11
8912: PUSH
8913: LD_VAR 0 6
8917: MINUS
8918: PPUSH
8919: CALL_OW 277
// cr := cr - tmp2 ;
8923: LD_ADDR_VAR 0 11
8927: PUSH
8928: LD_VAR 0 11
8932: PUSH
8933: LD_VAR 0 6
8937: MINUS
8938: ST_TO_ADDR
// end else
8939: GO 8989
// if tmp2 > cr then
8941: LD_VAR 0 6
8945: PUSH
8946: LD_VAR 0 11
8950: GREATER
8951: IFFALSE 8989
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8953: LD_VAR 0 2
8957: PPUSH
8958: CALL_OW 274
8962: PPUSH
8963: LD_INT 1
8965: PPUSH
8966: LD_VAR 0 6
8970: PUSH
8971: LD_VAR 0 11
8975: MINUS
8976: PPUSH
8977: CALL_OW 277
// cr := 0 ;
8981: LD_ADDR_VAR 0 11
8985: PUSH
8986: LD_INT 0
8988: ST_TO_ADDR
// end ; end ; if sb then
8989: LD_VAR 0 12
8993: IFFALSE 9107
// begin if tmp3 and tmp3 < sb then
8995: LD_VAR 0 7
8999: PUSH
9000: LD_VAR 0 7
9004: PUSH
9005: LD_VAR 0 12
9009: LESS
9010: AND
9011: IFFALSE 9059
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9013: LD_VAR 0 2
9017: PPUSH
9018: CALL_OW 274
9022: PPUSH
9023: LD_INT 3
9025: PPUSH
9026: LD_VAR 0 12
9030: PUSH
9031: LD_VAR 0 7
9035: MINUS
9036: PPUSH
9037: CALL_OW 277
// sb := sb - tmp3 ;
9041: LD_ADDR_VAR 0 12
9045: PUSH
9046: LD_VAR 0 12
9050: PUSH
9051: LD_VAR 0 7
9055: MINUS
9056: ST_TO_ADDR
// end else
9057: GO 9107
// if tmp3 > sb then
9059: LD_VAR 0 7
9063: PUSH
9064: LD_VAR 0 12
9068: GREATER
9069: IFFALSE 9107
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9071: LD_VAR 0 2
9075: PPUSH
9076: CALL_OW 274
9080: PPUSH
9081: LD_INT 3
9083: PPUSH
9084: LD_VAR 0 7
9088: PUSH
9089: LD_VAR 0 12
9093: MINUS
9094: PPUSH
9095: CALL_OW 277
// sb := 0 ;
9099: LD_ADDR_VAR 0 12
9103: PUSH
9104: LD_INT 0
9106: ST_TO_ADDR
// end ; end ; end ;
9107: GO 8822
9109: POP
9110: POP
// end ; end ; DialogueOff ;
9111: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9115: LD_INT 167
9117: PPUSH
9118: LD_INT 121
9120: PPUSH
9121: LD_INT 1
9123: PPUSH
9124: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9128: LD_EXP 17
9132: PPUSH
9133: LD_EXP 18
9137: PPUSH
9138: CALL_OW 120
// wait ( 0 0$1 ) ;
9142: LD_INT 35
9144: PPUSH
9145: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9149: LD_EXP 18
9153: PPUSH
9154: LD_INT 4
9156: PPUSH
9157: CALL_OW 113
// wait ( 0 0$3 ) ;
9161: LD_INT 105
9163: PPUSH
9164: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9168: LD_EXP 17
9172: PPUSH
9173: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9177: LD_EXP 18
9181: PPUSH
9182: CALL_OW 64
// wait ( 0 0$3 ) ;
9186: LD_INT 105
9188: PPUSH
9189: CALL_OW 67
// if payForHelp then
9193: LD_VAR 0 14
9197: IFFALSE 9255
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9199: LD_INT 36
9201: PPUSH
9202: LD_INT 57
9204: PPUSH
9205: LD_INT 1
9207: PPUSH
9208: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9212: LD_INT 51
9214: PPUSH
9215: LD_INT 63
9217: PPUSH
9218: LD_INT 1
9220: PPUSH
9221: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9225: LD_INT 93
9227: PPUSH
9228: LD_INT 65
9230: PPUSH
9231: LD_INT 1
9233: PPUSH
9234: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9238: LD_INT 42
9240: PPUSH
9241: LD_INT 12
9243: PPUSH
9244: LD_INT 1
9246: PPUSH
9247: CALL_OW 244
// PrepareLegionForPlayer ;
9251: CALL 4754 0 0
// end ; end ;
9255: LD_VAR 0 1
9259: RET
// every 0 0$10 trigger warWithLegion = 1 do
9260: LD_EXP 23
9264: PUSH
9265: LD_INT 1
9267: EQUAL
9268: IFFALSE 9284
9270: GO 9272
9272: DISABLE
// begin wait ( 0 0$30 ) ;
9273: LD_INT 1050
9275: PPUSH
9276: CALL_OW 67
// PrepareAttackLegion ;
9280: CALL 5418 0 0
// end ;
9284: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9285: LD_INT 120
9287: PUSH
9288: LD_INT 17
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: LD_INT 52
9297: PUSH
9298: EMPTY
9299: LIST
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: PPUSH
9305: CALL_OW 69
9309: IFFALSE 9454
9311: GO 9313
9313: DISABLE
9314: LD_INT 0
9316: PPUSH
// begin enable ;
9317: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9318: LD_ADDR_VAR 0 1
9322: PUSH
9323: LD_INT 120
9325: PUSH
9326: LD_INT 17
9328: PUSH
9329: EMPTY
9330: LIST
9331: LIST
9332: PUSH
9333: LD_INT 52
9335: PUSH
9336: EMPTY
9337: LIST
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: PPUSH
9343: CALL_OW 69
9347: PUSH
9348: FOR_IN
9349: IFFALSE 9452
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9351: LD_VAR 0 1
9355: PPUSH
9356: CALL 78573 0 1
9360: PUSH
9361: LD_INT 4
9363: ARRAY
9364: PUSH
9365: LD_INT 0
9367: EQUAL
9368: PUSH
9369: LD_VAR 0 1
9373: PPUSH
9374: CALL_OW 255
9378: PUSH
9379: LD_INT 1
9381: EQUAL
9382: AND
9383: IFFALSE 9397
// SetSide ( i , 4 ) ;
9385: LD_VAR 0 1
9389: PPUSH
9390: LD_INT 4
9392: PPUSH
9393: CALL_OW 235
// if GetSide ( i ) = 4 then
9397: LD_VAR 0 1
9401: PPUSH
9402: CALL_OW 255
9406: PUSH
9407: LD_INT 4
9409: EQUAL
9410: IFFALSE 9450
// if not IsInArea ( i , PlayerSpawn ) then
9412: LD_VAR 0 1
9416: PPUSH
9417: LD_INT 4
9419: PPUSH
9420: CALL_OW 308
9424: NOT
9425: IFFALSE 9441
// ComMoveToArea ( i , PlayerSpawn ) else
9427: LD_VAR 0 1
9431: PPUSH
9432: LD_INT 4
9434: PPUSH
9435: CALL_OW 113
9439: GO 9450
// RemoveUnit ( i ) ;
9441: LD_VAR 0 1
9445: PPUSH
9446: CALL_OW 64
// end ;
9450: GO 9348
9452: POP
9453: POP
// end ;
9454: PPOPN 1
9456: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9457: LD_EXP 20
9461: PUSH
9462: LD_INT 1
9464: EQUAL
9465: IFFALSE 9904
9467: GO 9469
9469: DISABLE
9470: LD_INT 0
9472: PPUSH
9473: PPUSH
9474: PPUSH
// begin enable ;
9475: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9476: LD_ADDR_VAR 0 2
9480: PUSH
9481: LD_INT 12
9483: PPUSH
9484: LD_INT 22
9486: PUSH
9487: LD_INT 3
9489: PUSH
9490: EMPTY
9491: LIST
9492: LIST
9493: PUSH
9494: LD_INT 21
9496: PUSH
9497: LD_INT 2
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PPUSH
9508: CALL_OW 70
9512: ST_TO_ADDR
// for i in enemyVehs do
9513: LD_ADDR_VAR 0 1
9517: PUSH
9518: LD_VAR 0 2
9522: PUSH
9523: FOR_IN
9524: IFFALSE 9902
// begin if See ( 1 , i ) then
9526: LD_INT 1
9528: PPUSH
9529: LD_VAR 0 1
9533: PPUSH
9534: CALL_OW 292
9538: IFFALSE 9900
// begin disable ;
9540: DISABLE
// DialogueOn ;
9541: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9545: LD_VAR 0 1
9549: PPUSH
9550: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9554: LD_INT 22
9556: PUSH
9557: LD_INT 1
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: LD_INT 26
9566: PUSH
9567: LD_INT 1
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: PUSH
9574: LD_INT 2
9576: PUSH
9577: LD_INT 25
9579: PUSH
9580: LD_INT 1
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 25
9589: PUSH
9590: LD_INT 2
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: PUSH
9597: LD_INT 25
9599: PUSH
9600: LD_INT 3
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PUSH
9607: LD_INT 25
9609: PUSH
9610: LD_INT 4
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: PUSH
9617: LD_INT 25
9619: PUSH
9620: LD_INT 5
9622: PUSH
9623: EMPTY
9624: LIST
9625: LIST
9626: PUSH
9627: LD_INT 25
9629: PUSH
9630: LD_INT 8
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: PUSH
9637: EMPTY
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: PUSH
9646: EMPTY
9647: LIST
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 69
9655: PPUSH
9656: LD_STRING DT1-Sol1-1
9658: PPUSH
9659: LD_STRING DT1-FSol1-1
9661: PPUSH
9662: CALL 12131 0 3
// dec = ShowQuery2 ;
9666: LD_ADDR_VAR 0 3
9670: PUSH
9671: CALL 12615 0 0
9675: ST_TO_ADDR
// if dec = 1 then
9676: LD_VAR 0 3
9680: PUSH
9681: LD_INT 1
9683: EQUAL
9684: IFFALSE 9790
// begin Say ( JMM , D2-JMM-1 ) ;
9686: LD_EXP 1
9690: PPUSH
9691: LD_STRING D2-JMM-1
9693: PPUSH
9694: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9698: LD_EXP 15
9702: PPUSH
9703: LD_STRING D2-Pow-1
9705: PPUSH
9706: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9710: LD_EXP 1
9714: PPUSH
9715: LD_STRING D2a-JMM-1
9717: PPUSH
9718: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9722: LD_EXP 15
9726: PPUSH
9727: LD_STRING D2a-Pow-1
9729: PPUSH
9730: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9734: LD_EXP 1
9738: PPUSH
9739: LD_STRING D2a-JMM-2
9741: PPUSH
9742: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9746: LD_EXP 15
9750: PPUSH
9751: LD_STRING D2a-Pow-2
9753: PPUSH
9754: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9758: LD_EXP 1
9762: PPUSH
9763: LD_STRING D2a-JMM-3
9765: PPUSH
9766: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9770: LD_EXP 15
9774: PPUSH
9775: LD_STRING D2a-Pow-3
9777: PPUSH
9778: CALL_OW 94
// secondPass = 2 ;
9782: LD_ADDR_EXP 20
9786: PUSH
9787: LD_INT 2
9789: ST_TO_ADDR
// end ; if dec = 2 then
9790: LD_VAR 0 3
9794: PUSH
9795: LD_INT 2
9797: EQUAL
9798: IFFALSE 9892
// begin Say ( JMM , D2-JMM-1 ) ;
9800: LD_EXP 1
9804: PPUSH
9805: LD_STRING D2-JMM-1
9807: PPUSH
9808: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9812: LD_EXP 15
9816: PPUSH
9817: LD_STRING D2-Pow-1
9819: PPUSH
9820: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9824: LD_EXP 1
9828: PPUSH
9829: LD_STRING D2b-JMM-1
9831: PPUSH
9832: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9836: LD_EXP 15
9840: PPUSH
9841: LD_STRING D2b-Pow-1
9843: PPUSH
9844: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9848: LD_EXP 1
9852: PPUSH
9853: LD_STRING D2c-JMM-1
9855: PPUSH
9856: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9860: LD_EXP 15
9864: PPUSH
9865: LD_STRING D2c-Pow-1
9867: PPUSH
9868: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9872: LD_EXP 1
9876: PPUSH
9877: LD_STRING D2c-JMM-2
9879: PPUSH
9880: CALL_OW 88
// secondPass = 2 ;
9884: LD_ADDR_EXP 20
9888: PUSH
9889: LD_INT 2
9891: ST_TO_ADDR
// end ; DialogueOff ;
9892: CALL_OW 7
// exit ;
9896: POP
9897: POP
9898: GO 9904
// end ; end ;
9900: GO 9523
9902: POP
9903: POP
// end ;
9904: PPOPN 3
9906: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
9907: LD_EXP 21
9911: PUSH
9912: LD_INT 1
9914: EQUAL
9915: PUSH
9916: LD_INT 11
9918: PPUSH
9919: LD_INT 22
9921: PUSH
9922: LD_INT 3
9924: PUSH
9925: EMPTY
9926: LIST
9927: LIST
9928: PPUSH
9929: CALL_OW 70
9933: AND
9934: IFFALSE 10162
9936: GO 9938
9938: DISABLE
9939: LD_INT 0
9941: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
9942: LD_ADDR_VAR 0 1
9946: PUSH
9947: LD_INT 11
9949: PPUSH
9950: LD_INT 22
9952: PUSH
9953: LD_INT 3
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: PPUSH
9960: CALL_OW 70
9964: ST_TO_ADDR
// if not vehicles then
9965: LD_VAR 0 1
9969: NOT
9970: IFFALSE 9974
// exit ;
9972: GO 10162
// repeat wait ( 0 0$1 ) ;
9974: LD_INT 35
9976: PPUSH
9977: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
9981: LD_VAR 0 1
9985: PPUSH
9986: LD_INT 101
9988: PUSH
9989: LD_INT 1
9991: PUSH
9992: EMPTY
9993: LIST
9994: LIST
9995: PPUSH
9996: CALL_OW 72
10000: IFFALSE 9974
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10002: LD_VAR 0 1
10006: PPUSH
10007: LD_INT 101
10009: PUSH
10010: LD_INT 1
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PPUSH
10017: CALL_OW 72
10021: PUSH
10022: LD_INT 1
10024: ARRAY
10025: PPUSH
10026: CALL_OW 87
// DialogueOn ;
10030: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10034: LD_INT 22
10036: PUSH
10037: LD_INT 1
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: PUSH
10044: LD_INT 26
10046: PUSH
10047: LD_INT 1
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: PUSH
10054: LD_INT 2
10056: PUSH
10057: LD_INT 25
10059: PUSH
10060: LD_INT 1
10062: PUSH
10063: EMPTY
10064: LIST
10065: LIST
10066: PUSH
10067: LD_INT 25
10069: PUSH
10070: LD_INT 2
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PUSH
10077: LD_INT 25
10079: PUSH
10080: LD_INT 3
10082: PUSH
10083: EMPTY
10084: LIST
10085: LIST
10086: PUSH
10087: LD_INT 25
10089: PUSH
10090: LD_INT 4
10092: PUSH
10093: EMPTY
10094: LIST
10095: LIST
10096: PUSH
10097: LD_INT 25
10099: PUSH
10100: LD_INT 5
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: PUSH
10107: LD_INT 25
10109: PUSH
10110: LD_INT 8
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PUSH
10117: EMPTY
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: LIST
10124: LIST
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: PPUSH
10131: CALL_OW 69
10135: PPUSH
10136: LD_STRING DT1-Sol1-1
10138: PPUSH
10139: LD_STRING DT1-FSol1-1
10141: PPUSH
10142: CALL 12131 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10146: LD_EXP 1
10150: PPUSH
10151: LD_STRING DT1-JMM-1
10153: PPUSH
10154: CALL_OW 88
// DialogueOff ;
10158: CALL_OW 7
// end ;
10162: PPOPN 1
10164: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10165: LD_EXP 21
10169: PUSH
10170: LD_INT 1
10172: EQUAL
10173: PUSH
10174: LD_INT 11
10176: PPUSH
10177: LD_INT 22
10179: PUSH
10180: LD_INT 3
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 50
10189: PUSH
10190: EMPTY
10191: LIST
10192: PUSH
10193: LD_INT 2
10195: PUSH
10196: LD_INT 21
10198: PUSH
10199: LD_INT 2
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: LD_INT 21
10208: PUSH
10209: LD_INT 1
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: PUSH
10221: EMPTY
10222: LIST
10223: LIST
10224: LIST
10225: PPUSH
10226: CALL_OW 70
10230: PUSH
10231: LD_INT 0
10233: EQUAL
10234: AND
10235: PUSH
10236: LD_EXP 22
10240: AND
10241: IFFALSE 10398
10243: GO 10245
10245: DISABLE
// begin vehicleTeleported = 2 ;
10246: LD_ADDR_EXP 21
10250: PUSH
10251: LD_INT 2
10253: ST_TO_ADDR
// DialogueOn ;
10254: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10258: LD_EXP 1
10262: PPUSH
10263: LD_STRING DT1a-JMM-1
10265: PPUSH
10266: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10270: LD_INT 22
10272: PUSH
10273: LD_INT 1
10275: PUSH
10276: EMPTY
10277: LIST
10278: LIST
10279: PUSH
10280: LD_INT 26
10282: PUSH
10283: LD_INT 1
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: PUSH
10290: LD_INT 2
10292: PUSH
10293: LD_INT 25
10295: PUSH
10296: LD_INT 1
10298: PUSH
10299: EMPTY
10300: LIST
10301: LIST
10302: PUSH
10303: LD_INT 25
10305: PUSH
10306: LD_INT 2
10308: PUSH
10309: EMPTY
10310: LIST
10311: LIST
10312: PUSH
10313: LD_INT 25
10315: PUSH
10316: LD_INT 3
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: PUSH
10323: LD_INT 25
10325: PUSH
10326: LD_INT 4
10328: PUSH
10329: EMPTY
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 25
10335: PUSH
10336: LD_INT 5
10338: PUSH
10339: EMPTY
10340: LIST
10341: LIST
10342: PUSH
10343: LD_INT 25
10345: PUSH
10346: LD_INT 8
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: EMPTY
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: PUSH
10362: EMPTY
10363: LIST
10364: LIST
10365: LIST
10366: PPUSH
10367: CALL_OW 69
10371: PPUSH
10372: LD_STRING DT1a-Sol1-1
10374: PPUSH
10375: LD_STRING DT1a-FSol1-1
10377: PPUSH
10378: CALL 12131 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10382: LD_EXP 1
10386: PPUSH
10387: LD_STRING DT1a-JMM-2
10389: PPUSH
10390: CALL_OW 88
// DialogueOff ;
10394: CALL_OW 7
// end ;
10398: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10399: LD_EXP 21
10403: PUSH
10404: LD_INT 3
10406: EQUAL
10407: PUSH
10408: LD_INT 11
10410: PPUSH
10411: LD_INT 22
10413: PUSH
10414: LD_INT 3
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 101
10423: PUSH
10424: LD_INT 1
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: EMPTY
10432: LIST
10433: LIST
10434: PPUSH
10435: CALL_OW 70
10439: AND
10440: IFFALSE 10714
10442: GO 10444
10444: DISABLE
10445: LD_INT 0
10447: PPUSH
10448: PPUSH
10449: PPUSH
// begin wait ( 0 0$0.3 ) ;
10450: LD_INT 10
10452: PPUSH
10453: CALL_OW 67
// DialogueOn ;
10457: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10461: LD_ADDR_VAR 0 3
10465: PUSH
10466: LD_INT 22
10468: PUSH
10469: LD_INT 1
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: PUSH
10476: LD_INT 26
10478: PUSH
10479: LD_INT 1
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PUSH
10486: LD_INT 2
10488: PUSH
10489: LD_INT 25
10491: PUSH
10492: LD_INT 1
10494: PUSH
10495: EMPTY
10496: LIST
10497: LIST
10498: PUSH
10499: LD_INT 25
10501: PUSH
10502: LD_INT 2
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: PUSH
10509: LD_INT 25
10511: PUSH
10512: LD_INT 3
10514: PUSH
10515: EMPTY
10516: LIST
10517: LIST
10518: PUSH
10519: LD_INT 25
10521: PUSH
10522: LD_INT 4
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 25
10531: PUSH
10532: LD_INT 5
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 25
10541: PUSH
10542: LD_INT 8
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: PPUSH
10563: CALL_OW 69
10567: PPUSH
10568: LD_STRING DT2-Sol1-1
10570: PPUSH
10571: LD_STRING DT2-FSol1-1
10573: PPUSH
10574: CALL 12131 0 3
10578: ST_TO_ADDR
// DialogueOff ;
10579: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
10583: LD_INT 35
10585: PPUSH
10586: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10590: LD_INT 11
10592: PPUSH
10593: LD_INT 22
10595: PUSH
10596: LD_INT 3
10598: PUSH
10599: EMPTY
10600: LIST
10601: LIST
10602: PUSH
10603: LD_INT 50
10605: PUSH
10606: EMPTY
10607: LIST
10608: PUSH
10609: EMPTY
10610: LIST
10611: LIST
10612: PPUSH
10613: CALL_OW 70
10617: NOT
10618: IFFALSE 10583
// wait ( 0 0$2 ) ;
10620: LD_INT 70
10622: PPUSH
10623: CALL_OW 67
// vehicleTeleported = 4 ;
10627: LD_ADDR_EXP 21
10631: PUSH
10632: LD_INT 4
10634: ST_TO_ADDR
// DialogueOn ;
10635: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10639: LD_EXP 1
10643: PPUSH
10644: LD_STRING DT2a-JMM-1
10646: PPUSH
10647: CALL_OW 88
// if speaker then
10651: LD_VAR 0 3
10655: IFFALSE 10698
// if GetSex ( speaker ) = 1 then
10657: LD_VAR 0 3
10661: PPUSH
10662: CALL_OW 258
10666: PUSH
10667: LD_INT 1
10669: EQUAL
10670: IFFALSE 10686
// Say ( speaker , DT2a-Sol1-1 ) else
10672: LD_VAR 0 3
10676: PPUSH
10677: LD_STRING DT2a-Sol1-1
10679: PPUSH
10680: CALL_OW 88
10684: GO 10698
// Say ( speaker , DT2a-FSol1-1 ) ;
10686: LD_VAR 0 3
10690: PPUSH
10691: LD_STRING DT2a-FSol1-1
10693: PPUSH
10694: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10698: LD_EXP 3
10702: PPUSH
10703: LD_STRING DT2a-Don-1
10705: PPUSH
10706: CALL_OW 88
// DialogueOff ;
10710: CALL_OW 7
// end ;
10714: PPOPN 3
10716: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10717: LD_INT 1
10719: PPUSH
10720: LD_INT 45
10722: PPUSH
10723: LD_INT 74
10725: PPUSH
10726: CALL_OW 293
10730: IFFALSE 10894
10732: GO 10734
10734: DISABLE
// begin DialogueOn ;
10735: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10739: LD_INT 36
10741: PPUSH
10742: LD_INT 55
10744: PPUSH
10745: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10749: LD_INT 22
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: EMPTY
10756: LIST
10757: LIST
10758: PUSH
10759: LD_INT 26
10761: PUSH
10762: LD_INT 1
10764: PUSH
10765: EMPTY
10766: LIST
10767: LIST
10768: PUSH
10769: LD_INT 2
10771: PUSH
10772: LD_INT 25
10774: PUSH
10775: LD_INT 1
10777: PUSH
10778: EMPTY
10779: LIST
10780: LIST
10781: PUSH
10782: LD_INT 25
10784: PUSH
10785: LD_INT 2
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PUSH
10792: LD_INT 25
10794: PUSH
10795: LD_INT 3
10797: PUSH
10798: EMPTY
10799: LIST
10800: LIST
10801: PUSH
10802: LD_INT 25
10804: PUSH
10805: LD_INT 4
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 25
10814: PUSH
10815: LD_INT 5
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 8
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: PUSH
10841: EMPTY
10842: LIST
10843: LIST
10844: LIST
10845: PPUSH
10846: CALL_OW 69
10850: PPUSH
10851: LD_STRING D5-Sol1-1
10853: PPUSH
10854: LD_STRING D5-FSol1-
10856: PPUSH
10857: CALL 12131 0 3
// if warWithLegion and IsOk ( Donaldson ) then
10861: LD_EXP 23
10865: PUSH
10866: LD_EXP 3
10870: PPUSH
10871: CALL_OW 302
10875: AND
10876: IFFALSE 10890
// Say ( Donaldson , D5-Don-1 ) ;
10878: LD_EXP 3
10882: PPUSH
10883: LD_STRING D5-Don-1
10885: PPUSH
10886: CALL_OW 88
// DialogueOff ;
10890: CALL_OW 7
// end ;
10894: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
10895: LD_INT 1
10897: PPUSH
10898: LD_INT 10
10900: PPUSH
10901: CALL_OW 292
10905: PUSH
10906: LD_INT 1
10908: PPUSH
10909: LD_INT 137
10911: PPUSH
10912: CALL_OW 292
10916: OR
10917: IFFALSE 11061
10919: GO 10921
10921: DISABLE
// begin DialogueOn ;
10922: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
10926: LD_INT 22
10928: PUSH
10929: LD_INT 1
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: PUSH
10936: LD_INT 26
10938: PUSH
10939: LD_INT 1
10941: PUSH
10942: EMPTY
10943: LIST
10944: LIST
10945: PUSH
10946: LD_INT 2
10948: PUSH
10949: LD_INT 25
10951: PUSH
10952: LD_INT 1
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: PUSH
10959: LD_INT 25
10961: PUSH
10962: LD_INT 2
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 25
10971: PUSH
10972: LD_INT 3
10974: PUSH
10975: EMPTY
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 25
10981: PUSH
10982: LD_INT 4
10984: PUSH
10985: EMPTY
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 25
10991: PUSH
10992: LD_INT 5
10994: PUSH
10995: EMPTY
10996: LIST
10997: LIST
10998: PUSH
10999: LD_INT 25
11001: PUSH
11002: LD_INT 8
11004: PUSH
11005: EMPTY
11006: LIST
11007: LIST
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: PUSH
11018: EMPTY
11019: LIST
11020: LIST
11021: LIST
11022: PPUSH
11023: CALL_OW 69
11027: PPUSH
11028: LD_STRING DT3-Sol1-1
11030: PPUSH
11031: LD_STRING DT3-FSol1-1
11033: PPUSH
11034: CALL 12131 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11038: LD_EXP 1
11042: PPUSH
11043: LD_STRING DT3-JMM-1
11045: PPUSH
11046: CALL_OW 88
// DialogueOff ;
11050: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11054: LD_STRING M2
11056: PPUSH
11057: CALL_OW 337
// end ;
11061: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11062: LD_EXP 35
11066: PUSH
11067: LD_INT 0
11069: EQUAL
11070: PUSH
11071: LD_INT 10
11073: PPUSH
11074: LD_INT 22
11076: PUSH
11077: LD_INT 1
11079: PUSH
11080: EMPTY
11081: LIST
11082: LIST
11083: PPUSH
11084: CALL_OW 70
11088: PUSH
11089: LD_INT 10
11091: PPUSH
11092: LD_INT 22
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 3
11104: PUSH
11105: LD_INT 24
11107: PUSH
11108: LD_INT 1000
11110: PUSH
11111: EMPTY
11112: LIST
11113: LIST
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: LD_INT 21
11121: PUSH
11122: LD_INT 2
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 58
11131: PUSH
11132: EMPTY
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PPUSH
11141: CALL_OW 70
11145: OR
11146: AND
11147: IFFALSE 11160
11149: GO 11151
11151: DISABLE
// ruEscape := 1 ;
11152: LD_ADDR_EXP 35
11156: PUSH
11157: LD_INT 1
11159: ST_TO_ADDR
11160: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , unit , tmp ;
11161: LD_INT 3
11163: PPUSH
11164: CALL_OW 303
11168: PUSH
11169: LD_INT 4
11171: PPUSH
11172: CALL_OW 303
11176: OR
11177: PUSH
11178: LD_INT 22
11180: PPUSH
11181: LD_INT 22
11183: PUSH
11184: LD_INT 1
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: PPUSH
11191: CALL_OW 70
11195: PUSH
11196: LD_INT 0
11198: GREATER
11199: OR
11200: PUSH
11201: LD_EXP 35
11205: PUSH
11206: LD_INT 1
11208: EQUAL
11209: OR
11210: IFFALSE 11799
11212: GO 11214
11214: DISABLE
11215: LD_INT 0
11217: PPUSH
11218: PPUSH
11219: PPUSH
// begin ruAI := 0 ;
11220: LD_ADDR_EXP 34
11224: PUSH
11225: LD_INT 0
11227: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11228: LD_EXP 27
11232: PPUSH
11233: CALL_OW 122
// wait ( 0 0$1 ) ;
11237: LD_INT 35
11239: PPUSH
11240: CALL_OW 67
// DialogueOn ;
11244: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11248: LD_INT 75
11250: PPUSH
11251: LD_INT 21
11253: PPUSH
11254: LD_INT 1
11256: PPUSH
11257: LD_INT 12
11259: PPUSH
11260: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11264: LD_INT 75
11266: PPUSH
11267: LD_INT 21
11269: PPUSH
11270: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11274: LD_INT 10
11276: PPUSH
11277: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11281: LD_EXP 1
11285: PPUSH
11286: LD_STRING D6-JMM-1
11288: PPUSH
11289: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11293: LD_INT 75
11295: PPUSH
11296: LD_INT 21
11298: PPUSH
11299: LD_INT 1
11301: PPUSH
11302: CALL_OW 331
// DialogueOff ;
11306: CALL_OW 7
// for i in RuScientists do
11310: LD_ADDR_VAR 0 1
11314: PUSH
11315: LD_EXP 27
11319: PUSH
11320: FOR_IN
11321: IFFALSE 11357
// begin SetSide ( i , 6 ) ;
11323: LD_VAR 0 1
11327: PPUSH
11328: LD_INT 6
11330: PPUSH
11331: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11335: LD_VAR 0 1
11339: PPUSH
11340: LD_INT 1
11342: PPUSH
11343: LD_INT 3
11345: PPUSH
11346: CALL_OW 12
11350: PPUSH
11351: CALL_OW 109
// end ;
11355: GO 11320
11357: POP
11358: POP
// repeat wait ( 0 0$1 ) ;
11359: LD_INT 35
11361: PPUSH
11362: CALL_OW 67
// for i in RuScientists do
11366: LD_ADDR_VAR 0 1
11370: PUSH
11371: LD_EXP 27
11375: PUSH
11376: FOR_IN
11377: IFFALSE 11790
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11379: LD_ADDR_VAR 0 3
11383: PUSH
11384: LD_INT 22
11386: PUSH
11387: LD_INT 3
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PUSH
11394: LD_INT 91
11396: PUSH
11397: LD_VAR 0 1
11401: PUSH
11402: LD_INT 10
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: PUSH
11410: LD_INT 21
11412: PUSH
11413: LD_INT 2
11415: PUSH
11416: EMPTY
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 58
11422: PUSH
11423: EMPTY
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: PPUSH
11432: CALL_OW 69
11436: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11437: LD_VAR 0 3
11441: PUSH
11442: LD_VAR 0 1
11446: PPUSH
11447: CALL_OW 310
11451: NOT
11452: AND
11453: IFFALSE 11481
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11455: LD_VAR 0 1
11459: PPUSH
11460: LD_VAR 0 3
11464: PPUSH
11465: LD_VAR 0 1
11469: PPUSH
11470: CALL_OW 74
11474: PPUSH
11475: CALL_OW 120
// continue ;
11479: GO 11376
// end ; if IsInUnit ( i ) then
11481: LD_VAR 0 1
11485: PPUSH
11486: CALL_OW 310
11490: IFFALSE 11509
// unit := IsInUnit ( i ) else
11492: LD_ADDR_VAR 0 2
11496: PUSH
11497: LD_VAR 0 1
11501: PPUSH
11502: CALL_OW 310
11506: ST_TO_ADDR
11507: GO 11519
// unit := i ;
11509: LD_ADDR_VAR 0 2
11513: PUSH
11514: LD_VAR 0 1
11518: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11519: LD_VAR 0 1
11523: PPUSH
11524: CALL_OW 110
11528: PUSH
11529: LD_INT 1
11531: DOUBLE
11532: EQUAL
11533: IFTRUE 11537
11535: GO 11596
11537: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11538: LD_VAR 0 2
11542: PPUSH
11543: LD_INT 137
11545: PPUSH
11546: CALL_OW 296
11550: PUSH
11551: LD_INT 13
11553: LESS
11554: PUSH
11555: LD_INT 137
11557: PPUSH
11558: CALL_OW 302
11562: AND
11563: IFFALSE 11579
// ComEnterUnit ( unit , rutp ) else
11565: LD_VAR 0 2
11569: PPUSH
11570: LD_INT 137
11572: PPUSH
11573: CALL_OW 120
11577: GO 11594
// ComMoveXY ( unit , 16 , 28 ) ;
11579: LD_VAR 0 2
11583: PPUSH
11584: LD_INT 16
11586: PPUSH
11587: LD_INT 28
11589: PPUSH
11590: CALL_OW 111
// end ; 2 :
11594: GO 11788
11596: LD_INT 2
11598: DOUBLE
11599: EQUAL
11600: IFTRUE 11604
11602: GO 11622
11604: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11605: LD_VAR 0 2
11609: PPUSH
11610: LD_INT 97
11612: PPUSH
11613: LD_INT 2
11615: PPUSH
11616: CALL_OW 111
11620: GO 11788
11622: LD_INT 3
11624: DOUBLE
11625: EQUAL
11626: IFTRUE 11630
11628: GO 11689
11630: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11631: LD_VAR 0 2
11635: PPUSH
11636: LD_INT 137
11638: PPUSH
11639: CALL_OW 296
11643: PUSH
11644: LD_INT 13
11646: LESS
11647: PUSH
11648: LD_INT 137
11650: PPUSH
11651: CALL_OW 302
11655: AND
11656: IFFALSE 11672
// ComEnterUnit ( unit , rutp ) else
11658: LD_VAR 0 2
11662: PPUSH
11663: LD_INT 137
11665: PPUSH
11666: CALL_OW 120
11670: GO 11687
// ComMoveXY ( unit , 128 , 155 ) ;
11672: LD_VAR 0 2
11676: PPUSH
11677: LD_INT 128
11679: PPUSH
11680: LD_INT 155
11682: PPUSH
11683: CALL_OW 111
// end ; 11 :
11687: GO 11788
11689: LD_INT 11
11691: DOUBLE
11692: EQUAL
11693: IFTRUE 11697
11695: GO 11715
11697: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11698: LD_VAR 0 2
11702: PPUSH
11703: LD_INT 16
11705: PPUSH
11706: LD_INT 28
11708: PPUSH
11709: CALL_OW 111
11713: GO 11788
11715: LD_INT 13
11717: DOUBLE
11718: EQUAL
11719: IFTRUE 11723
11721: GO 11761
11723: POP
// begin if IsOk ( ruteleprt ) then
11724: LD_INT 10
11726: PPUSH
11727: CALL_OW 302
11731: IFFALSE 11747
// ComEnterUnit ( unit , ruteleprt ) else
11733: LD_VAR 0 2
11737: PPUSH
11738: LD_INT 10
11740: PPUSH
11741: CALL_OW 120
11745: GO 11759
// SetTag ( unit , 23 ) ;
11747: LD_VAR 0 2
11751: PPUSH
11752: LD_INT 23
11754: PPUSH
11755: CALL_OW 109
// end ; 23 :
11759: GO 11788
11761: LD_INT 23
11763: DOUBLE
11764: EQUAL
11765: IFTRUE 11769
11767: GO 11787
11769: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11770: LD_VAR 0 2
11774: PPUSH
11775: LD_INT 128
11777: PPUSH
11778: LD_INT 155
11780: PPUSH
11781: CALL_OW 111
11785: GO 11788
11787: POP
// end ;
11788: GO 11376
11790: POP
11791: POP
// until not RuScientists ;
11792: LD_EXP 27
11796: NOT
11797: IFFALSE 11359
// end ;
11799: PPOPN 3
11801: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11802: LD_EXP 34
11806: PUSH
11807: LD_INT 0
11809: EQUAL
11810: PUSH
11811: LD_EXP 27
11815: AND
11816: PUSH
11817: LD_INT 22
11819: PUSH
11820: LD_INT 6
11822: PUSH
11823: EMPTY
11824: LIST
11825: LIST
11826: PUSH
11827: LD_INT 2
11829: PUSH
11830: LD_INT 95
11832: PUSH
11833: LD_INT 13
11835: PUSH
11836: EMPTY
11837: LIST
11838: LIST
11839: PUSH
11840: LD_INT 95
11842: PUSH
11843: LD_INT 14
11845: PUSH
11846: EMPTY
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 95
11852: PUSH
11853: LD_INT 26
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 69
11874: AND
11875: IFFALSE 12088
11877: GO 11879
11879: DISABLE
11880: LD_INT 0
11882: PPUSH
11883: PPUSH
11884: PPUSH
11885: PPUSH
// begin enable ;
11886: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
11887: LD_ADDR_VAR 0 1
11891: PUSH
11892: LD_INT 22
11894: PUSH
11895: LD_INT 6
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: LD_INT 2
11904: PUSH
11905: LD_INT 95
11907: PUSH
11908: LD_INT 13
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: LD_INT 95
11917: PUSH
11918: LD_INT 14
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: PUSH
11925: LD_INT 95
11927: PUSH
11928: LD_INT 26
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: LIST
11939: LIST
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PPUSH
11945: CALL_OW 69
11949: PUSH
11950: FOR_IN
11951: IFFALSE 12086
// begin if i in RuScientists then
11953: LD_VAR 0 1
11957: PUSH
11958: LD_EXP 27
11962: IN
11963: IFFALSE 11992
// begin RuScientists = RuScientists diff i ;
11965: LD_ADDR_EXP 27
11969: PUSH
11970: LD_EXP 27
11974: PUSH
11975: LD_VAR 0 1
11979: DIFF
11980: ST_TO_ADDR
// RemoveUnit ( i ) ;
11981: LD_VAR 0 1
11985: PPUSH
11986: CALL_OW 64
// continue ;
11990: GO 11950
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
11992: LD_VAR 0 1
11996: PUSH
11997: LD_INT 22
11999: PUSH
12000: LD_INT 6
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 33
12009: PUSH
12010: LD_INT 1
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: PPUSH
12021: CALL_OW 69
12025: IN
12026: IFFALSE 12084
// begin if IsDrivenBy ( i ) in RuScientists then
12028: LD_VAR 0 1
12032: PPUSH
12033: CALL_OW 311
12037: PUSH
12038: LD_EXP 27
12042: IN
12043: IFFALSE 12061
// RuScientists = RuScientists diff i ;
12045: LD_ADDR_EXP 27
12049: PUSH
12050: LD_EXP 27
12054: PUSH
12055: LD_VAR 0 1
12059: DIFF
12060: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12061: LD_VAR 0 1
12065: PPUSH
12066: CALL_OW 311
12070: PPUSH
12071: CALL_OW 64
// RemoveUnit ( i ) ;
12075: LD_VAR 0 1
12079: PPUSH
12080: CALL_OW 64
// end ; end ;
12084: GO 11950
12086: POP
12087: POP
// end ; end_of_file
12088: PPOPN 4
12090: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12091: LD_INT 0
12093: PPUSH
12094: PPUSH
// for i in charactersList do
12095: LD_ADDR_VAR 0 4
12099: PUSH
12100: LD_VAR 0 1
12104: PUSH
12105: FOR_IN
12106: IFFALSE 12124
// SaveCharacters ( i , ident ) ;
12108: LD_VAR 0 4
12112: PPUSH
12113: LD_VAR 0 2
12117: PPUSH
12118: CALL_OW 38
12122: GO 12105
12124: POP
12125: POP
// end ;
12126: LD_VAR 0 3
12130: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12131: LD_INT 0
12133: PPUSH
12134: PPUSH
12135: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12136: LD_ADDR_VAR 0 1
12140: PUSH
12141: LD_VAR 0 1
12145: PUSH
12146: LD_EXP 1
12150: PUSH
12151: LD_EXP 7
12155: PUSH
12156: LD_EXP 3
12160: PUSH
12161: LD_EXP 4
12165: PUSH
12166: LD_EXP 5
12170: PUSH
12171: LD_EXP 2
12175: PUSH
12176: LD_EXP 12
12180: PUSH
12181: LD_EXP 13
12185: PUSH
12186: LD_EXP 9
12190: PUSH
12191: LD_EXP 11
12195: PUSH
12196: LD_EXP 6
12200: PUSH
12201: LD_EXP 8
12205: PUSH
12206: LD_EXP 10
12210: PUSH
12211: LD_EXP 15
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: DIFF
12232: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12233: LD_ADDR_VAR 0 6
12237: PUSH
12238: LD_VAR 0 1
12242: PUSH
12243: LD_INT 1
12245: PPUSH
12246: LD_VAR 0 1
12250: PPUSH
12251: CALL_OW 12
12255: ARRAY
12256: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12257: LD_VAR 0 6
12261: PPUSH
12262: CALL_OW 258
12266: PUSH
12267: LD_INT 1
12269: EQUAL
12270: IFFALSE 12288
// Say ( speaker , dialogMID ) else
12272: LD_VAR 0 6
12276: PPUSH
12277: LD_VAR 0 2
12281: PPUSH
12282: CALL_OW 88
12286: GO 12302
// Say ( speaker , dialogFID ) ;
12288: LD_VAR 0 6
12292: PPUSH
12293: LD_VAR 0 3
12297: PPUSH
12298: CALL_OW 88
// result := speaker ;
12302: LD_ADDR_VAR 0 4
12306: PUSH
12307: LD_VAR 0 6
12311: ST_TO_ADDR
// end ;
12312: LD_VAR 0 4
12316: RET
// export function PrepareDifficulty ; var tmp ; begin
12317: LD_INT 0
12319: PPUSH
12320: PPUSH
// if Difficulty = 1 then
12321: LD_OWVAR 67
12325: PUSH
12326: LD_INT 1
12328: EQUAL
12329: IFFALSE 12349
// begin RuSolMinLevel = 8 ;
12331: LD_ADDR_EXP 29
12335: PUSH
12336: LD_INT 8
12338: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12339: LD_ADDR_EXP 30
12343: PUSH
12344: LD_INT 10
12346: ST_TO_ADDR
// end else
12347: GO 12589
// if Difficulty = 2 then
12349: LD_OWVAR 67
12353: PUSH
12354: LD_INT 2
12356: EQUAL
12357: IFFALSE 12453
// begin RuSolMinLevel = 9 ;
12359: LD_ADDR_EXP 29
12363: PUSH
12364: LD_INT 9
12366: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12367: LD_ADDR_EXP 30
12371: PUSH
12372: LD_INT 10
12374: ST_TO_ADDR
// uc_nation = 3 ;
12375: LD_ADDR_OWVAR 21
12379: PUSH
12380: LD_INT 3
12382: ST_TO_ADDR
// uc_side = 3 ;
12383: LD_ADDR_OWVAR 20
12387: PUSH
12388: LD_INT 3
12390: ST_TO_ADDR
// bc_level = 10 ;
12391: LD_ADDR_OWVAR 43
12395: PUSH
12396: LD_INT 10
12398: ST_TO_ADDR
// bc_type = b_turret ;
12399: LD_ADDR_OWVAR 42
12403: PUSH
12404: LD_INT 33
12406: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12407: LD_ADDR_VAR 0 2
12411: PUSH
12412: LD_INT 86
12414: PPUSH
12415: LD_INT 34
12417: PPUSH
12418: LD_INT 2
12420: PPUSH
12421: CALL_OW 47
12425: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12426: LD_VAR 0 2
12430: PPUSH
12431: LD_INT 49
12433: PPUSH
12434: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12438: LD_INT 64
12440: PPUSH
12441: LD_INT 3
12443: PPUSH
12444: LD_INT 1
12446: PPUSH
12447: CALL_OW 322
// end else
12451: GO 12589
// begin RuSolMinLevel = 10 ;
12453: LD_ADDR_EXP 29
12457: PUSH
12458: LD_INT 10
12460: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12461: LD_ADDR_EXP 30
12465: PUSH
12466: LD_INT 10
12468: ST_TO_ADDR
// uc_nation = 3 ;
12469: LD_ADDR_OWVAR 21
12473: PUSH
12474: LD_INT 3
12476: ST_TO_ADDR
// uc_side = 3 ;
12477: LD_ADDR_OWVAR 20
12481: PUSH
12482: LD_INT 3
12484: ST_TO_ADDR
// bc_level = 10 ;
12485: LD_ADDR_OWVAR 43
12489: PUSH
12490: LD_INT 10
12492: ST_TO_ADDR
// bc_type = b_turret ;
12493: LD_ADDR_OWVAR 42
12497: PUSH
12498: LD_INT 33
12500: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12501: LD_ADDR_VAR 0 2
12505: PUSH
12506: LD_INT 86
12508: PPUSH
12509: LD_INT 34
12511: PPUSH
12512: LD_INT 2
12514: PPUSH
12515: CALL_OW 47
12519: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12520: LD_VAR 0 2
12524: PPUSH
12525: LD_INT 49
12527: PPUSH
12528: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12532: LD_ADDR_VAR 0 2
12536: PUSH
12537: LD_INT 93
12539: PPUSH
12540: LD_INT 31
12542: PPUSH
12543: LD_INT 2
12545: PPUSH
12546: CALL_OW 47
12550: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12551: LD_VAR 0 2
12555: PPUSH
12556: LD_INT 49
12558: PPUSH
12559: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12563: LD_INT 64
12565: PPUSH
12566: LD_INT 3
12568: PPUSH
12569: LD_INT 1
12571: PPUSH
12572: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12576: LD_INT 65
12578: PPUSH
12579: LD_INT 3
12581: PPUSH
12582: LD_INT 1
12584: PPUSH
12585: CALL_OW 322
// end ; end ;
12589: LD_VAR 0 1
12593: RET
// export function ShowQuery1 ; begin
12594: LD_INT 0
12596: PPUSH
// result := Query ( Q1 ) ;
12597: LD_ADDR_VAR 0 1
12601: PUSH
12602: LD_STRING Q1
12604: PPUSH
12605: CALL_OW 97
12609: ST_TO_ADDR
// end ;
12610: LD_VAR 0 1
12614: RET
// export function ShowQuery2 ; begin
12615: LD_INT 0
12617: PPUSH
// result := Query ( Q1a ) ;
12618: LD_ADDR_VAR 0 1
12622: PUSH
12623: LD_STRING Q1a
12625: PPUSH
12626: CALL_OW 97
12630: ST_TO_ADDR
// end ;
12631: LD_VAR 0 1
12635: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12636: LD_INT 0
12638: PPUSH
12639: PPUSH
12640: PPUSH
12641: PPUSH
12642: PPUSH
// for i = 1 to count do
12643: LD_ADDR_VAR 0 8
12647: PUSH
12648: DOUBLE
12649: LD_INT 1
12651: DEC
12652: ST_TO_ADDR
12653: LD_VAR 0 6
12657: PUSH
12658: FOR_TO
12659: IFFALSE 12740
// begin uc_side = side ;
12661: LD_ADDR_OWVAR 20
12665: PUSH
12666: LD_VAR 0 1
12670: ST_TO_ADDR
// uc_nation = nation ;
12671: LD_ADDR_OWVAR 21
12675: PUSH
12676: LD_VAR 0 2
12680: ST_TO_ADDR
// hc_gallery =  ;
12681: LD_ADDR_OWVAR 33
12685: PUSH
12686: LD_STRING 
12688: ST_TO_ADDR
// hc_name =  ;
12689: LD_ADDR_OWVAR 26
12693: PUSH
12694: LD_STRING 
12696: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12697: LD_INT 0
12699: PPUSH
12700: LD_VAR 0 5
12704: PPUSH
12705: LD_VAR 0 4
12709: PPUSH
12710: CALL_OW 380
// un = CreateHuman ;
12714: LD_ADDR_VAR 0 10
12718: PUSH
12719: CALL_OW 44
12723: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12724: LD_VAR 0 10
12728: PPUSH
12729: LD_VAR 0 3
12733: PPUSH
12734: CALL_OW 52
// end ;
12738: GO 12658
12740: POP
12741: POP
// end ;
12742: LD_VAR 0 7
12746: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
12747: LD_INT 0
12749: PPUSH
12750: PPUSH
12751: PPUSH
12752: PPUSH
12753: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12754: LD_ADDR_VAR 0 8
12758: PUSH
12759: LD_INT 48
12761: PUSH
12762: LD_INT 49
12764: PUSH
12765: LD_INT 50
12767: PUSH
12768: LD_INT 20
12770: PUSH
12771: LD_INT 1
12773: PUSH
12774: LD_INT 51
12776: PUSH
12777: LD_INT 52
12779: PUSH
12780: LD_INT 69
12782: PUSH
12783: LD_INT 39
12785: PUSH
12786: LD_INT 34
12788: PUSH
12789: LD_INT 40
12791: PUSH
12792: LD_INT 53
12794: PUSH
12795: LD_INT 71
12797: PUSH
12798: LD_INT 57
12800: PUSH
12801: LD_INT 58
12803: PUSH
12804: LD_INT 44
12806: PUSH
12807: LD_INT 32
12809: PUSH
12810: LD_INT 27
12812: PUSH
12813: LD_INT 23
12815: PUSH
12816: LD_INT 33
12818: PUSH
12819: LD_INT 59
12821: PUSH
12822: LD_INT 54
12824: PUSH
12825: LD_INT 55
12827: PUSH
12828: LD_INT 56
12830: PUSH
12831: LD_INT 63
12833: PUSH
12834: LD_INT 64
12836: PUSH
12837: LD_INT 65
12839: PUSH
12840: LD_INT 30
12842: PUSH
12843: LD_INT 31
12845: PUSH
12846: LD_INT 21
12848: PUSH
12849: LD_INT 22
12851: PUSH
12852: LD_INT 25
12854: PUSH
12855: EMPTY
12856: LIST
12857: LIST
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: LIST
12888: ST_TO_ADDR
// for i = 1 to ru_tech_list do
12889: LD_ADDR_VAR 0 5
12893: PUSH
12894: DOUBLE
12895: LD_INT 1
12897: DEC
12898: ST_TO_ADDR
12899: LD_VAR 0 8
12903: PUSH
12904: FOR_TO
12905: IFFALSE 12981
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
12907: LD_VAR 0 8
12911: PUSH
12912: LD_VAR 0 5
12916: ARRAY
12917: PPUSH
12918: LD_VAR 0 1
12922: PPUSH
12923: CALL_OW 321
12927: PUSH
12928: LD_INT 1
12930: EQUAL
12931: PUSH
12932: LD_VAR 0 8
12936: PUSH
12937: LD_VAR 0 5
12941: ARRAY
12942: PPUSH
12943: LD_VAR 0 3
12947: PPUSH
12948: CALL_OW 482
12952: PUSH
12953: LD_INT 1
12955: EQUAL
12956: AND
12957: IFFALSE 12979
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
12959: LD_VAR 0 2
12963: PPUSH
12964: LD_VAR 0 8
12968: PUSH
12969: LD_VAR 0 5
12973: ARRAY
12974: PPUSH
12975: CALL_OW 184
12979: GO 12904
12981: POP
12982: POP
// end ;
12983: LD_VAR 0 4
12987: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
12988: LD_INT 0
12990: PPUSH
12991: PPUSH
12992: PPUSH
12993: PPUSH
12994: PPUSH
12995: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
12996: LD_ADDR_VAR 0 8
13000: PUSH
13001: LD_VAR 0 2
13005: PPUSH
13006: CALL_OW 313
13010: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13011: LD_ADDR_VAR 0 9
13015: PUSH
13016: LD_VAR 0 3
13020: PPUSH
13021: LD_INT 22
13023: PUSH
13024: LD_VAR 0 1
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: PUSH
13033: LD_INT 25
13035: PUSH
13036: LD_INT 2
13038: PUSH
13039: EMPTY
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 24
13045: PUSH
13046: LD_INT 750
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: PUSH
13053: LD_INT 3
13055: PUSH
13056: LD_INT 54
13058: PUSH
13059: EMPTY
13060: LIST
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: PPUSH
13072: CALL_OW 70
13076: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13077: LD_ADDR_VAR 0 6
13081: PUSH
13082: LD_VAR 0 3
13086: PPUSH
13087: LD_INT 22
13089: PUSH
13090: LD_VAR 0 1
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: PUSH
13099: LD_INT 21
13101: PUSH
13102: LD_INT 3
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 3
13111: PUSH
13112: LD_INT 24
13114: PUSH
13115: LD_INT 1000
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: PUSH
13131: EMPTY
13132: LIST
13133: PPUSH
13134: CALL_OW 70
13138: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13139: LD_VAR 0 6
13143: NOT
13144: PUSH
13145: LD_INT 22
13147: PUSH
13148: LD_VAR 0 1
13152: PUSH
13153: EMPTY
13154: LIST
13155: LIST
13156: PUSH
13157: LD_INT 25
13159: PUSH
13160: LD_INT 2
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: PUSH
13167: LD_INT 24
13169: PUSH
13170: LD_INT 250
13172: PUSH
13173: EMPTY
13174: LIST
13175: LIST
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: LIST
13181: PPUSH
13182: CALL_OW 69
13186: NOT
13187: AND
13188: IFFALSE 13192
// exit ;
13190: GO 13374
// if buildings_list > 0 and engineerOkInside then
13192: LD_VAR 0 6
13196: PUSH
13197: LD_INT 0
13199: GREATER
13200: PUSH
13201: LD_VAR 0 8
13205: AND
13206: IFFALSE 13217
// ComExitBuilding ( engineerOkInside ) ;
13208: LD_VAR 0 8
13212: PPUSH
13213: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13217: LD_VAR 0 6
13221: PUSH
13222: LD_INT 0
13224: GREATER
13225: PUSH
13226: LD_VAR 0 9
13230: PUSH
13231: LD_INT 0
13233: GREATER
13234: AND
13235: IFFALSE 13255
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13237: LD_VAR 0 9
13241: PPUSH
13242: LD_VAR 0 6
13246: PUSH
13247: LD_INT 1
13249: ARRAY
13250: PPUSH
13251: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13255: LD_VAR 0 6
13259: PUSH
13260: LD_INT 0
13262: EQUAL
13263: PUSH
13264: LD_VAR 0 4
13268: PUSH
13269: LD_INT 0
13271: EQUAL
13272: AND
13273: PUSH
13274: LD_VAR 0 9
13278: PUSH
13279: LD_INT 0
13281: GREATER
13282: AND
13283: IFFALSE 13299
// ComEnterUnit ( engineerOkOutside , building ) ;
13285: LD_VAR 0 9
13289: PPUSH
13290: LD_VAR 0 2
13294: PPUSH
13295: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13299: LD_VAR 0 9
13303: PUSH
13304: LD_INT 0
13306: GREATER
13307: PUSH
13308: LD_VAR 0 6
13312: PUSH
13313: LD_INT 0
13315: EQUAL
13316: AND
13317: PUSH
13318: LD_VAR 0 4
13322: PUSH
13323: LD_INT 0
13325: GREATER
13326: AND
13327: IFFALSE 13374
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13329: LD_VAR 0 9
13333: PPUSH
13334: LD_VAR 0 4
13338: PUSH
13339: LD_INT 1
13341: ARRAY
13342: PPUSH
13343: LD_VAR 0 4
13347: PUSH
13348: LD_INT 2
13350: ARRAY
13351: PPUSH
13352: LD_VAR 0 4
13356: PUSH
13357: LD_INT 3
13359: ARRAY
13360: PPUSH
13361: LD_VAR 0 4
13365: PUSH
13366: LD_INT 4
13368: ARRAY
13369: PPUSH
13370: CALL_OW 145
// end ;
13374: LD_VAR 0 5
13378: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13379: LD_INT 0
13381: PPUSH
13382: PPUSH
13383: PPUSH
13384: PPUSH
13385: PPUSH
13386: PPUSH
13387: PPUSH
13388: PPUSH
13389: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13390: LD_ADDR_VAR 0 6
13394: PUSH
13395: LD_INT 22
13397: PUSH
13398: LD_VAR 0 1
13402: PUSH
13403: EMPTY
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 25
13409: PUSH
13410: LD_INT 4
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: PUSH
13417: LD_INT 24
13419: PUSH
13420: LD_INT 251
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: LIST
13431: PPUSH
13432: CALL_OW 69
13436: PUSH
13437: LD_EXP 27
13441: PUSH
13442: EMPTY
13443: LIST
13444: DIFF
13445: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13446: LD_ADDR_VAR 0 7
13450: PUSH
13451: LD_VAR 0 3
13455: PPUSH
13456: LD_INT 22
13458: PUSH
13459: LD_VAR 0 1
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 25
13470: PUSH
13471: LD_INT 4
13473: PUSH
13474: EMPTY
13475: LIST
13476: LIST
13477: PUSH
13478: LD_INT 50
13480: PUSH
13481: EMPTY
13482: LIST
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: LIST
13488: PPUSH
13489: CALL_OW 70
13493: PUSH
13494: LD_EXP 27
13498: PUSH
13499: EMPTY
13500: LIST
13501: DIFF
13502: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13503: LD_ADDR_VAR 0 10
13507: PUSH
13508: LD_VAR 0 3
13512: PPUSH
13513: LD_INT 22
13515: PUSH
13516: LD_VAR 0 1
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: LD_INT 21
13527: PUSH
13528: LD_INT 1
13530: PUSH
13531: EMPTY
13532: LIST
13533: LIST
13534: PUSH
13535: LD_INT 3
13537: PUSH
13538: LD_INT 24
13540: PUSH
13541: LD_INT 750
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: LIST
13556: PPUSH
13557: CALL_OW 70
13561: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13562: LD_ADDR_VAR 0 11
13566: PUSH
13567: LD_VAR 0 2
13571: PPUSH
13572: LD_INT 22
13574: PUSH
13575: LD_VAR 0 1
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: LD_INT 21
13586: PUSH
13587: LD_INT 1
13589: PUSH
13590: EMPTY
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 3
13596: PUSH
13597: LD_INT 24
13599: PUSH
13600: LD_INT 1000
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: EMPTY
13608: LIST
13609: LIST
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: LIST
13615: PPUSH
13616: CALL_OW 70
13620: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13621: LD_VAR 0 10
13625: PUSH
13626: LD_INT 0
13628: GREATER
13629: PUSH
13630: LD_VAR 0 6
13634: PUSH
13635: LD_INT 0
13637: GREATER
13638: AND
13639: IFFALSE 13655
// ComMoveToArea ( damageUnits , healArea ) ;
13641: LD_VAR 0 10
13645: PPUSH
13646: LD_VAR 0 2
13650: PPUSH
13651: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13655: LD_VAR 0 11
13659: PUSH
13660: LD_INT 0
13662: GREATER
13663: PUSH
13664: LD_VAR 0 7
13668: PUSH
13669: LD_INT 0
13671: GREATER
13672: AND
13673: IFFALSE 13693
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13675: LD_VAR 0 7
13679: PPUSH
13680: LD_VAR 0 11
13684: PUSH
13685: LD_INT 1
13687: ARRAY
13688: PPUSH
13689: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13693: LD_VAR 0 10
13697: PUSH
13698: LD_INT 0
13700: EQUAL
13701: PUSH
13702: LD_VAR 0 11
13706: PUSH
13707: LD_INT 0
13709: EQUAL
13710: AND
13711: PUSH
13712: LD_VAR 0 7
13716: PUSH
13717: LD_INT 0
13719: GREATER
13720: AND
13721: IFFALSE 13826
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13723: LD_ADDR_VAR 0 12
13727: PUSH
13728: LD_INT 22
13730: PUSH
13731: LD_VAR 0 1
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: PUSH
13740: LD_INT 21
13742: PUSH
13743: LD_INT 3
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 30
13752: PUSH
13753: LD_INT 8
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: LIST
13764: PPUSH
13765: CALL_OW 69
13769: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13770: LD_ADDR_VAR 0 13
13774: PUSH
13775: LD_INT 1
13777: PPUSH
13778: LD_VAR 0 12
13782: PPUSH
13783: CALL_OW 12
13787: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13788: LD_VAR 0 7
13792: PPUSH
13793: LD_INT 3
13795: PUSH
13796: LD_INT 60
13798: PUSH
13799: EMPTY
13800: LIST
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PPUSH
13806: CALL_OW 72
13810: PPUSH
13811: LD_VAR 0 12
13815: PUSH
13816: LD_VAR 0 13
13820: ARRAY
13821: PPUSH
13822: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
13826: LD_VAR 0 3
13830: PPUSH
13831: LD_INT 22
13833: PUSH
13834: LD_VAR 0 1
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: LD_INT 25
13845: PUSH
13846: LD_INT 3
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: PUSH
13853: LD_INT 24
13855: PUSH
13856: LD_INT 751
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PUSH
13863: EMPTY
13864: LIST
13865: LIST
13866: LIST
13867: PPUSH
13868: CALL_OW 70
13872: PUSH
13873: LD_INT 0
13875: GREATER
13876: PUSH
13877: LD_INT 21
13879: PPUSH
13880: CALL_OW 302
13884: AND
13885: PUSH
13886: LD_INT 21
13888: PPUSH
13889: CALL_OW 255
13893: PUSH
13894: LD_INT 3
13896: EQUAL
13897: AND
13898: IFFALSE 13954
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
13900: LD_VAR 0 3
13904: PPUSH
13905: LD_INT 22
13907: PUSH
13908: LD_VAR 0 1
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 25
13919: PUSH
13920: LD_INT 3
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 24
13929: PUSH
13930: LD_INT 751
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: PPUSH
13942: CALL_OW 70
13946: PPUSH
13947: LD_INT 21
13949: PPUSH
13950: CALL_OW 120
// end ;
13954: LD_VAR 0 5
13958: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13959: LD_INT 0
13961: PPUSH
13962: PPUSH
13963: PPUSH
13964: PPUSH
13965: PPUSH
13966: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13967: LD_ADDR_VAR 0 7
13971: PUSH
13972: LD_VAR 0 2
13976: PPUSH
13977: LD_INT 22
13979: PUSH
13980: LD_VAR 0 1
13984: PUSH
13985: EMPTY
13986: LIST
13987: LIST
13988: PUSH
13989: LD_INT 21
13991: PUSH
13992: LD_INT 2
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 34
14001: PUSH
14002: LD_INT 52
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: PPUSH
14014: CALL_OW 70
14018: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14019: LD_ADDR_VAR 0 8
14023: PUSH
14024: LD_VAR 0 2
14028: PPUSH
14029: LD_INT 22
14031: PUSH
14032: LD_VAR 0 1
14036: PUSH
14037: EMPTY
14038: LIST
14039: LIST
14040: PUSH
14041: LD_INT 21
14043: PUSH
14044: LD_INT 3
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: PUSH
14051: LD_INT 3
14053: PUSH
14054: LD_INT 24
14056: PUSH
14057: LD_INT 1000
14059: PUSH
14060: EMPTY
14061: LIST
14062: LIST
14063: PUSH
14064: EMPTY
14065: LIST
14066: LIST
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: LIST
14072: PUSH
14073: EMPTY
14074: LIST
14075: PPUSH
14076: CALL_OW 70
14080: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14081: LD_VAR 0 8
14085: PUSH
14086: LD_INT 0
14088: GREATER
14089: PUSH
14090: LD_VAR 0 7
14094: PPUSH
14095: LD_INT 24
14097: PUSH
14098: LD_INT 750
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: PPUSH
14105: CALL_OW 72
14109: PUSH
14110: LD_INT 0
14112: GREATER
14113: AND
14114: IFFALSE 14134
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14116: LD_VAR 0 7
14120: PPUSH
14121: LD_VAR 0 8
14125: PUSH
14126: LD_INT 1
14128: ARRAY
14129: PPUSH
14130: CALL_OW 130
// end ;
14134: LD_VAR 0 3
14138: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14139: LD_INT 0
14141: PPUSH
14142: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14143: LD_INT 22
14145: PUSH
14146: LD_VAR 0 1
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 21
14157: PUSH
14158: LD_INT 2
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PPUSH
14169: CALL_OW 69
14173: PUSH
14174: LD_INT 18
14176: PPUSH
14177: LD_INT 22
14179: PUSH
14180: LD_VAR 0 1
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 21
14191: PUSH
14192: LD_INT 2
14194: PUSH
14195: EMPTY
14196: LIST
14197: LIST
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: PPUSH
14203: CALL_OW 70
14207: PUSH
14208: LD_VAR 0 3
14212: LESSEQUAL
14213: DIFF
14214: IFFALSE 14281
// for i = 1 to vehCount do
14216: LD_ADDR_VAR 0 9
14220: PUSH
14221: DOUBLE
14222: LD_INT 1
14224: DEC
14225: ST_TO_ADDR
14226: LD_VAR 0 3
14230: PUSH
14231: FOR_TO
14232: IFFALSE 14279
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14234: LD_VAR 0 2
14238: PPUSH
14239: LD_VAR 0 7
14243: PPUSH
14244: LD_VAR 0 5
14248: PPUSH
14249: LD_VAR 0 6
14253: PPUSH
14254: LD_VAR 0 4
14258: PUSH
14259: LD_INT 1
14261: PPUSH
14262: LD_VAR 0 4
14266: PPUSH
14267: CALL_OW 12
14271: ARRAY
14272: PPUSH
14273: CALL_OW 185
14277: GO 14231
14279: POP
14280: POP
// end ;
14281: LD_VAR 0 8
14285: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14286: LD_INT 0
14288: PPUSH
14289: PPUSH
14290: PPUSH
14291: PPUSH
14292: PPUSH
14293: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14294: LD_ADDR_VAR 0 6
14298: PUSH
14299: LD_INT 22
14301: PUSH
14302: LD_VAR 0 1
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PUSH
14311: LD_INT 25
14313: PUSH
14314: LD_INT 9
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: PPUSH
14325: CALL_OW 69
14329: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14330: LD_ADDR_VAR 0 7
14334: PUSH
14335: LD_INT 81
14337: PUSH
14338: LD_VAR 0 1
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 3
14349: PUSH
14350: LD_INT 21
14352: PUSH
14353: LD_INT 3
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PPUSH
14368: CALL_OW 69
14372: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14373: LD_ADDR_VAR 0 4
14377: PUSH
14378: LD_INT 1
14380: PPUSH
14381: LD_INT 3
14383: PPUSH
14384: CALL_OW 12
14388: ST_TO_ADDR
// for i = 1 to list do
14389: LD_ADDR_VAR 0 5
14393: PUSH
14394: DOUBLE
14395: LD_INT 1
14397: DEC
14398: ST_TO_ADDR
14399: LD_VAR 0 6
14403: PUSH
14404: FOR_TO
14405: IFFALSE 14607
// for ta in filter do
14407: LD_ADDR_VAR 0 3
14411: PUSH
14412: LD_VAR 0 7
14416: PUSH
14417: FOR_IN
14418: IFFALSE 14603
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14420: LD_VAR 0 6
14424: PUSH
14425: LD_VAR 0 5
14429: ARRAY
14430: PPUSH
14431: LD_VAR 0 3
14435: PPUSH
14436: CALL_OW 296
14440: PUSH
14441: LD_INT 15
14443: LESSEQUAL
14444: IFFALSE 14601
// begin case c of 1 :
14446: LD_VAR 0 4
14450: PUSH
14451: LD_INT 1
14453: DOUBLE
14454: EQUAL
14455: IFTRUE 14459
14457: GO 14497
14459: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14460: LD_VAR 0 6
14464: PUSH
14465: LD_VAR 0 5
14469: ARRAY
14470: PPUSH
14471: LD_VAR 0 3
14475: PPUSH
14476: CALL_OW 250
14480: PPUSH
14481: LD_VAR 0 3
14485: PPUSH
14486: CALL_OW 251
14490: PPUSH
14491: CALL_OW 154
14495: GO 14601
14497: LD_INT 2
14499: DOUBLE
14500: EQUAL
14501: IFTRUE 14505
14503: GO 14569
14505: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14506: LD_VAR 0 6
14510: PUSH
14511: LD_VAR 0 5
14515: ARRAY
14516: PPUSH
14517: LD_VAR 0 3
14521: PPUSH
14522: CALL_OW 250
14526: PUSH
14527: LD_INT 1
14529: NEG
14530: PPUSH
14531: LD_INT 1
14533: PPUSH
14534: CALL_OW 12
14538: PLUS
14539: PPUSH
14540: LD_VAR 0 3
14544: PPUSH
14545: CALL_OW 251
14549: PUSH
14550: LD_INT 1
14552: NEG
14553: PPUSH
14554: LD_INT 1
14556: PPUSH
14557: CALL_OW 12
14561: PLUS
14562: PPUSH
14563: CALL_OW 153
14567: GO 14601
14569: LD_INT 3
14571: DOUBLE
14572: EQUAL
14573: IFTRUE 14577
14575: GO 14600
14577: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14578: LD_VAR 0 6
14582: PUSH
14583: LD_VAR 0 5
14587: ARRAY
14588: PPUSH
14589: LD_VAR 0 3
14593: PPUSH
14594: CALL_OW 115
14598: GO 14601
14600: POP
// end ; end ;
14601: GO 14417
14603: POP
14604: POP
14605: GO 14404
14607: POP
14608: POP
// end ;
14609: LD_VAR 0 2
14613: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14614: LD_INT 0
14616: PPUSH
14617: PPUSH
14618: PPUSH
14619: PPUSH
// r := 100 ;
14620: LD_ADDR_VAR 0 5
14624: PUSH
14625: LD_INT 100
14627: ST_TO_ADDR
// x := 0 ;
14628: LD_ADDR_VAR 0 6
14632: PUSH
14633: LD_INT 0
14635: ST_TO_ADDR
// while ( x < n ) do
14636: LD_VAR 0 6
14640: PUSH
14641: LD_VAR 0 2
14645: LESS
14646: IFFALSE 14933
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14648: LD_ADDR_VAR 0 4
14652: PUSH
14653: DOUBLE
14654: LD_INT 1
14656: DEC
14657: ST_TO_ADDR
14658: LD_VAR 0 1
14662: PPUSH
14663: LD_INT 0
14665: PPUSH
14666: CALL_OW 517
14670: PUSH
14671: LD_INT 1
14673: ARRAY
14674: PUSH
14675: FOR_TO
14676: IFFALSE 14929
// begin if r > 50 then
14678: LD_VAR 0 5
14682: PUSH
14683: LD_INT 50
14685: GREATER
14686: IFFALSE 14905
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14688: LD_VAR 0 1
14692: PPUSH
14693: LD_INT 0
14695: PPUSH
14696: CALL_OW 517
14700: PUSH
14701: LD_INT 1
14703: ARRAY
14704: PUSH
14705: LD_VAR 0 4
14709: ARRAY
14710: PPUSH
14711: LD_VAR 0 1
14715: PPUSH
14716: LD_INT 0
14718: PPUSH
14719: CALL_OW 517
14723: PUSH
14724: LD_INT 2
14726: ARRAY
14727: PUSH
14728: LD_VAR 0 4
14732: ARRAY
14733: PPUSH
14734: CALL_OW 458
14738: NOT
14739: IFFALSE 14889
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14741: LD_VAR 0 1
14745: PPUSH
14746: LD_INT 0
14748: PPUSH
14749: CALL_OW 517
14753: PUSH
14754: LD_INT 1
14756: ARRAY
14757: PUSH
14758: LD_VAR 0 4
14762: ARRAY
14763: PPUSH
14764: LD_VAR 0 1
14768: PPUSH
14769: LD_INT 0
14771: PPUSH
14772: CALL_OW 517
14776: PUSH
14777: LD_INT 2
14779: ARRAY
14780: PUSH
14781: LD_VAR 0 4
14785: ARRAY
14786: PPUSH
14787: LD_INT 8
14789: PPUSH
14790: LD_INT 0
14792: PPUSH
14793: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14797: LD_ADDR_EXP 37
14801: PUSH
14802: LD_EXP 37
14806: PPUSH
14807: LD_INT 1
14809: PPUSH
14810: LD_VAR 0 1
14814: PPUSH
14815: LD_INT 0
14817: PPUSH
14818: CALL_OW 517
14822: PUSH
14823: LD_INT 1
14825: ARRAY
14826: PUSH
14827: LD_VAR 0 4
14831: ARRAY
14832: PUSH
14833: LD_VAR 0 1
14837: PPUSH
14838: LD_INT 0
14840: PPUSH
14841: CALL_OW 517
14845: PUSH
14846: LD_INT 2
14848: ARRAY
14849: PUSH
14850: LD_VAR 0 4
14854: ARRAY
14855: PUSH
14856: EMPTY
14857: LIST
14858: LIST
14859: PPUSH
14860: CALL_OW 2
14864: ST_TO_ADDR
// r := 0 ;
14865: LD_ADDR_VAR 0 5
14869: PUSH
14870: LD_INT 0
14872: ST_TO_ADDR
// x := x + 1 ;
14873: LD_ADDR_VAR 0 6
14877: PUSH
14878: LD_VAR 0 6
14882: PUSH
14883: LD_INT 1
14885: PLUS
14886: ST_TO_ADDR
// end else
14887: GO 14903
// r := r + 35 ;
14889: LD_ADDR_VAR 0 5
14893: PUSH
14894: LD_VAR 0 5
14898: PUSH
14899: LD_INT 35
14901: PLUS
14902: ST_TO_ADDR
// end else
14903: GO 14927
// r := r + rand ( 10 , 25 ) ;
14905: LD_ADDR_VAR 0 5
14909: PUSH
14910: LD_VAR 0 5
14914: PUSH
14915: LD_INT 10
14917: PPUSH
14918: LD_INT 25
14920: PPUSH
14921: CALL_OW 12
14925: PLUS
14926: ST_TO_ADDR
// end ;
14927: GO 14675
14929: POP
14930: POP
14931: GO 14636
// end ;
14933: LD_VAR 0 3
14937: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
14938: LD_INT 0
14940: PPUSH
14941: PPUSH
14942: PPUSH
14943: PPUSH
// tmpTab = [ ] ;
14944: LD_ADDR_VAR 0 6
14948: PUSH
14949: EMPTY
14950: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
14951: LD_INT 22
14953: PUSH
14954: LD_VAR 0 1
14958: PUSH
14959: EMPTY
14960: LIST
14961: LIST
14962: PUSH
14963: LD_INT 30
14965: PUSH
14966: LD_INT 32
14968: PUSH
14969: EMPTY
14970: LIST
14971: LIST
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 69
14981: PUSH
14982: LD_INT 0
14984: GREATER
14985: IFFALSE 15068
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
14987: LD_ADDR_VAR 0 4
14991: PUSH
14992: LD_INT 22
14994: PUSH
14995: LD_VAR 0 1
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 30
15006: PUSH
15007: LD_INT 32
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PPUSH
15018: CALL_OW 69
15022: PUSH
15023: FOR_IN
15024: IFFALSE 15066
// begin for j in UnitsInside ( i ) do
15026: LD_ADDR_VAR 0 5
15030: PUSH
15031: LD_VAR 0 4
15035: PPUSH
15036: CALL_OW 313
15040: PUSH
15041: FOR_IN
15042: IFFALSE 15062
// tmpTab = tmpTab ^ j ;
15044: LD_ADDR_VAR 0 6
15048: PUSH
15049: LD_VAR 0 6
15053: PUSH
15054: LD_VAR 0 5
15058: ADD
15059: ST_TO_ADDR
15060: GO 15041
15062: POP
15063: POP
// end ;
15064: GO 15023
15066: POP
15067: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15068: LD_VAR 0 6
15072: PPUSH
15073: LD_VAR 0 2
15077: PPUSH
15078: CALL_OW 250
15082: PPUSH
15083: LD_VAR 0 2
15087: PPUSH
15088: CALL_OW 251
15092: PPUSH
15093: CALL_OW 114
// end ;
15097: LD_VAR 0 3
15101: RET
// export function CreateNature ; var i , un ; begin
15102: LD_INT 0
15104: PPUSH
15105: PPUSH
15106: PPUSH
// uc_side := 0 ;
15107: LD_ADDR_OWVAR 20
15111: PUSH
15112: LD_INT 0
15114: ST_TO_ADDR
// uc_nation := 0 ;
15115: LD_ADDR_OWVAR 21
15119: PUSH
15120: LD_INT 0
15122: ST_TO_ADDR
// InitHc ;
15123: CALL_OW 19
// hc_class := class_fish ;
15127: LD_ADDR_OWVAR 28
15131: PUSH
15132: LD_INT 20
15134: ST_TO_ADDR
// for i = 1 to 6 do
15135: LD_ADDR_VAR 0 2
15139: PUSH
15140: DOUBLE
15141: LD_INT 1
15143: DEC
15144: ST_TO_ADDR
15145: LD_INT 6
15147: PUSH
15148: FOR_TO
15149: IFFALSE 15168
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15151: CALL_OW 44
15155: PPUSH
15156: LD_INT 23
15158: PPUSH
15159: LD_INT 0
15161: PPUSH
15162: CALL_OW 49
15166: GO 15148
15168: POP
15169: POP
// for i = 1 to Difficulty + 2 do
15170: LD_ADDR_VAR 0 2
15174: PUSH
15175: DOUBLE
15176: LD_INT 1
15178: DEC
15179: ST_TO_ADDR
15180: LD_OWVAR 67
15184: PUSH
15185: LD_INT 2
15187: PLUS
15188: PUSH
15189: FOR_TO
15190: IFFALSE 15299
// begin hc_sex = sex_male ;
15192: LD_ADDR_OWVAR 27
15196: PUSH
15197: LD_INT 1
15199: ST_TO_ADDR
// uc_side = 0 ;
15200: LD_ADDR_OWVAR 20
15204: PUSH
15205: LD_INT 0
15207: ST_TO_ADDR
// uc_nation = nation_nature ;
15208: LD_ADDR_OWVAR 21
15212: PUSH
15213: LD_INT 0
15215: ST_TO_ADDR
// hc_class = class_tiger ;
15216: LD_ADDR_OWVAR 28
15220: PUSH
15221: LD_INT 14
15223: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15224: LD_ADDR_OWVAR 31
15228: PUSH
15229: LD_EXP 30
15233: PUSH
15234: LD_INT 0
15236: PUSH
15237: LD_INT 0
15239: PUSH
15240: LD_INT 0
15242: PUSH
15243: EMPTY
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
15249: LD_ADDR_OWVAR 35
15253: PUSH
15254: LD_INT 5
15256: NEG
15257: PPUSH
15258: LD_INT 5
15260: PPUSH
15261: CALL_OW 12
15265: PUSH
15266: LD_OWVAR 67
15270: MUL
15271: ST_TO_ADDR
// un = CreateHuman ;
15272: LD_ADDR_VAR 0 3
15276: PUSH
15277: CALL_OW 44
15281: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15282: LD_VAR 0 3
15286: PPUSH
15287: LD_INT 24
15289: PPUSH
15290: LD_INT 0
15292: PPUSH
15293: CALL_OW 49
// end ;
15297: GO 15189
15299: POP
15300: POP
// for i = 1 to rand ( 3 , 4 ) do
15301: LD_ADDR_VAR 0 2
15305: PUSH
15306: DOUBLE
15307: LD_INT 1
15309: DEC
15310: ST_TO_ADDR
15311: LD_INT 3
15313: PPUSH
15314: LD_INT 4
15316: PPUSH
15317: CALL_OW 12
15321: PUSH
15322: FOR_TO
15323: IFFALSE 15415
// begin hc_sex = sex_male ;
15325: LD_ADDR_OWVAR 27
15329: PUSH
15330: LD_INT 1
15332: ST_TO_ADDR
// uc_side = 0 ;
15333: LD_ADDR_OWVAR 20
15337: PUSH
15338: LD_INT 0
15340: ST_TO_ADDR
// uc_nation = nation_nature ;
15341: LD_ADDR_OWVAR 21
15345: PUSH
15346: LD_INT 0
15348: ST_TO_ADDR
// hc_class = 18 ;
15349: LD_ADDR_OWVAR 28
15353: PUSH
15354: LD_INT 18
15356: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
15357: LD_ADDR_OWVAR 31
15361: PUSH
15362: LD_INT 0
15364: PUSH
15365: LD_INT 0
15367: PUSH
15368: LD_INT 0
15370: PUSH
15371: LD_INT 0
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: ST_TO_ADDR
// hc_agressivity = 0 ;
15380: LD_ADDR_OWVAR 35
15384: PUSH
15385: LD_INT 0
15387: ST_TO_ADDR
// un = CreateHuman ;
15388: LD_ADDR_VAR 0 3
15392: PUSH
15393: CALL_OW 44
15397: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15398: LD_VAR 0 3
15402: PPUSH
15403: LD_INT 24
15405: PPUSH
15406: LD_INT 0
15408: PPUSH
15409: CALL_OW 49
// end ;
15413: GO 15322
15415: POP
15416: POP
// for i = 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15417: LD_ADDR_VAR 0 2
15421: PUSH
15422: DOUBLE
15423: LD_INT 1
15425: DEC
15426: ST_TO_ADDR
15427: LD_INT 4
15429: PUSH
15430: LD_INT 3
15432: PUSH
15433: LD_INT 3
15435: PUSH
15436: LD_INT 3
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: PUSH
15445: LD_OWVAR 67
15449: ARRAY
15450: PUSH
15451: FOR_TO
15452: IFFALSE 15561
// begin hc_sex := sex_male ;
15454: LD_ADDR_OWVAR 27
15458: PUSH
15459: LD_INT 1
15461: ST_TO_ADDR
// uc_side := 0 ;
15462: LD_ADDR_OWVAR 20
15466: PUSH
15467: LD_INT 0
15469: ST_TO_ADDR
// uc_nation := nation_nature ;
15470: LD_ADDR_OWVAR 21
15474: PUSH
15475: LD_INT 0
15477: ST_TO_ADDR
// hc_class := class_apeman ;
15478: LD_ADDR_OWVAR 28
15482: PUSH
15483: LD_INT 12
15485: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15486: LD_ADDR_OWVAR 31
15490: PUSH
15491: LD_INT 0
15493: PPUSH
15494: LD_INT 2
15496: PPUSH
15497: CALL_OW 12
15501: PUSH
15502: LD_INT 0
15504: PUSH
15505: LD_INT 0
15507: PUSH
15508: LD_INT 0
15510: PUSH
15511: EMPTY
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15517: LD_ADDR_OWVAR 35
15521: PUSH
15522: LD_INT 10
15524: NEG
15525: PPUSH
15526: LD_INT 10
15528: PPUSH
15529: CALL_OW 12
15533: ST_TO_ADDR
// un := CreateHuman ;
15534: LD_ADDR_VAR 0 3
15538: PUSH
15539: CALL_OW 44
15543: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15544: LD_VAR 0 3
15548: PPUSH
15549: LD_INT 27
15551: PPUSH
15552: LD_INT 0
15554: PPUSH
15555: CALL_OW 49
// end ;
15559: GO 15451
15561: POP
15562: POP
// end ; end_of_file
15563: LD_VAR 0 1
15567: RET
// on UnitDestroyed ( unit ) do var i ;
15568: LD_INT 0
15570: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15571: LD_VAR 0 1
15575: PPUSH
15576: CALL 33708 0 1
// if unit = JMM then
15580: LD_VAR 0 1
15584: PUSH
15585: LD_EXP 1
15589: EQUAL
15590: IFFALSE 15599
// YouLost ( JMM ) ;
15592: LD_STRING JMM
15594: PPUSH
15595: CALL_OW 104
// if unit in russianTanks then
15599: LD_VAR 0 1
15603: PUSH
15604: LD_EXP 32
15608: IN
15609: IFFALSE 15627
// russianTanks := russianTanks diff unit ;
15611: LD_ADDR_EXP 32
15615: PUSH
15616: LD_EXP 32
15620: PUSH
15621: LD_VAR 0 1
15625: DIFF
15626: ST_TO_ADDR
// if unit in russianTimeLapsers then
15627: LD_VAR 0 1
15631: PUSH
15632: LD_EXP 33
15636: IN
15637: IFFALSE 15655
// russianTimeLapsers := russianTimeLapsers diff unit ;
15639: LD_ADDR_EXP 33
15643: PUSH
15644: LD_EXP 33
15648: PUSH
15649: LD_VAR 0 1
15653: DIFF
15654: ST_TO_ADDR
// if unit in RuScientists then
15655: LD_VAR 0 1
15659: PUSH
15660: LD_EXP 27
15664: IN
15665: IFFALSE 15697
// begin RuScientists := RuScientists diff unit ;
15667: LD_ADDR_EXP 27
15671: PUSH
15672: LD_EXP 27
15676: PUSH
15677: LD_VAR 0 1
15681: DIFF
15682: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15683: LD_ADDR_EXP 28
15687: PUSH
15688: LD_EXP 28
15692: PUSH
15693: LD_INT 1
15695: PLUS
15696: ST_TO_ADDR
// end ; end ;
15697: PPOPN 2
15699: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15700: LD_VAR 0 3
15704: PPUSH
15705: CALL_OW 264
15709: PUSH
15710: LD_INT 9
15712: EQUAL
15713: IFFALSE 15729
// laserCounterDestroy := laserCounterDestroy + 1 ;
15715: LD_ADDR_EXP 43
15719: PUSH
15720: LD_EXP 43
15724: PUSH
15725: LD_INT 1
15727: PLUS
15728: ST_TO_ADDR
// end ;
15729: PPOPN 3
15731: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15732: LD_VAR 0 2
15736: PUSH
15737: LD_INT 22
15739: PUSH
15740: LD_INT 6
15742: PUSH
15743: EMPTY
15744: LIST
15745: LIST
15746: PPUSH
15747: CALL_OW 69
15751: IN
15752: IFFALSE 15807
// begin if GetType ( human ) = unit_vehicle then
15754: LD_VAR 0 2
15758: PPUSH
15759: CALL_OW 247
15763: PUSH
15764: LD_INT 2
15766: EQUAL
15767: IFFALSE 15784
// human := IsDrivenBy ( human ) ;
15769: LD_ADDR_VAR 0 2
15773: PUSH
15774: LD_VAR 0 2
15778: PPUSH
15779: CALL_OW 311
15783: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15784: LD_VAR 0 2
15788: PPUSH
15789: LD_VAR 0 2
15793: PPUSH
15794: CALL_OW 110
15798: PUSH
15799: LD_INT 10
15801: PLUS
15802: PPUSH
15803: CALL_OW 109
// end ; if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
15807: LD_VAR 0 1
15811: PUSH
15812: LD_INT 10
15814: EQUAL
15815: PUSH
15816: LD_VAR 0 2
15820: PPUSH
15821: CALL_OW 255
15825: PUSH
15826: LD_INT 1
15828: EQUAL
15829: AND
15830: PUSH
15831: LD_EXP 40
15835: PUSH
15836: LD_INT 0
15838: EQUAL
15839: AND
15840: IFFALSE 15952
// begin eventVar1 = 1 ;
15842: LD_ADDR_EXP 40
15846: PUSH
15847: LD_INT 1
15849: ST_TO_ADDR
// teleportExplored = 1 ;
15850: LD_ADDR_EXP 26
15854: PUSH
15855: LD_INT 1
15857: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15858: LD_STRING M2a
15860: PPUSH
15861: CALL_OW 337
// wait ( 0 0$2 ) ;
15865: LD_INT 70
15867: PPUSH
15868: CALL_OW 67
// DialogueOn ;
15872: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15876: LD_INT 22
15878: PUSH
15879: LD_INT 1
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: LD_INT 21
15888: PUSH
15889: LD_INT 1
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: EMPTY
15897: LIST
15898: LIST
15899: PPUSH
15900: CALL_OW 69
15904: PPUSH
15905: LD_STRING DT3a-Sol1-1
15907: PPUSH
15908: LD_STRING DT3a-FSol1-1
15910: PPUSH
15911: CALL 12131 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15915: LD_EXP 1
15919: PPUSH
15920: LD_STRING DT3a-JMM-1
15922: PPUSH
15923: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15927: LD_VAR 0 2
15931: PPUSH
15932: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15936: LD_EXP 1
15940: PPUSH
15941: LD_STRING DT3a-JMM-1a
15943: PPUSH
15944: CALL_OW 88
// DialogueOff ;
15948: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15952: LD_VAR 0 1
15956: PUSH
15957: LD_INT 10
15959: EQUAL
15960: PUSH
15961: LD_VAR 0 2
15965: PPUSH
15966: CALL_OW 247
15970: PUSH
15971: LD_INT 2
15973: EQUAL
15974: AND
15975: PUSH
15976: LD_VAR 0 2
15980: PPUSH
15981: CALL_OW 255
15985: PUSH
15986: LD_INT 3
15988: EQUAL
15989: AND
15990: IFFALSE 16056
// begin if vehicleTeleported = 0 then
15992: LD_EXP 21
15996: PUSH
15997: LD_INT 0
15999: EQUAL
16000: IFFALSE 16017
// begin wait ( 0 0$3 ) ;
16002: LD_INT 105
16004: PPUSH
16005: CALL_OW 67
// vehicleTeleported := 1 ;
16009: LD_ADDR_EXP 21
16013: PUSH
16014: LD_INT 1
16016: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
16017: LD_EXP 21
16021: PUSH
16022: LD_INT 2
16024: EQUAL
16025: IFFALSE 16042
// begin wait ( 0 0$3 ) ;
16027: LD_INT 105
16029: PPUSH
16030: CALL_OW 67
// vehicleTeleported := 3 ;
16034: LD_ADDR_EXP 21
16038: PUSH
16039: LD_INT 3
16041: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16042: LD_ADDR_EXP 22
16046: PUSH
16047: LD_EXP 22
16051: PUSH
16052: LD_INT 1
16054: PLUS
16055: ST_TO_ADDR
// end ; end ;
16056: PPOPN 2
16058: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16059: LD_VAR 0 1
16063: PPUSH
16064: LD_VAR 0 2
16068: PPUSH
16069: CALL 33830 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16073: LD_VAR 0 1
16077: PPUSH
16078: CALL_OW 264
16082: PUSH
16083: LD_INT 7
16085: EQUAL
16086: IFFALSE 16096
// rocketBuilded := true ;
16088: LD_ADDR_EXP 44
16092: PUSH
16093: LD_INT 1
16095: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16096: LD_VAR 0 1
16100: PPUSH
16101: CALL_OW 255
16105: PUSH
16106: LD_INT 3
16108: NONEQUAL
16109: IFFALSE 16113
// exit ;
16111: GO 16232
// if factory in [ ru_fact , rufab2 ] then
16113: LD_VAR 0 2
16117: PUSH
16118: LD_INT 21
16120: PUSH
16121: LD_INT 112
16123: PUSH
16124: EMPTY
16125: LIST
16126: LIST
16127: IN
16128: IFFALSE 16232
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16130: LD_VAR 0 1
16134: PPUSH
16135: CALL_OW 264
16139: PUSH
16140: LD_INT 49
16142: EQUAL
16143: IFFALSE 16179
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16145: LD_ADDR_EXP 33
16149: PUSH
16150: LD_EXP 33
16154: PPUSH
16155: LD_VAR 0 1
16159: PPUSH
16160: CALL 75029 0 2
16164: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16165: LD_VAR 0 1
16169: PPUSH
16170: LD_INT 137
16172: PPUSH
16173: CALL_OW 120
// end else
16177: GO 16232
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16179: LD_VAR 0 1
16183: PPUSH
16184: CALL_OW 264
16188: PUSH
16189: LD_INT 51
16191: PUSH
16192: LD_EXP 46
16196: PUSH
16197: LD_INT 52
16199: PUSH
16200: LD_INT 53
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: IN
16209: NOT
16210: IFFALSE 16232
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16212: LD_ADDR_EXP 32
16216: PUSH
16217: LD_EXP 32
16221: PPUSH
16222: LD_VAR 0 1
16226: PPUSH
16227: CALL 75029 0 2
16231: ST_TO_ADDR
// end ; end ; end ;
16232: PPOPN 2
16234: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16235: LD_INT 0
16237: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16238: LD_VAR 0 2
16242: PPUSH
16243: CALL_OW 255
16247: PUSH
16248: LD_INT 3
16250: EQUAL
16251: PUSH
16252: LD_VAR 0 2
16256: PPUSH
16257: CALL_OW 257
16261: PUSH
16262: LD_INT 3
16264: EQUAL
16265: AND
16266: PUSH
16267: LD_INT 21
16269: PPUSH
16270: CALL_OW 255
16274: PUSH
16275: LD_INT 3
16277: EQUAL
16278: AND
16279: PUSH
16280: LD_INT 21
16282: PPUSH
16283: CALL_OW 302
16287: AND
16288: IFFALSE 16302
// ComEnterUnit ( human , ru_fact ) ;
16290: LD_VAR 0 2
16294: PPUSH
16295: LD_INT 21
16297: PPUSH
16298: CALL_OW 120
// end ;
16302: PPOPN 3
16304: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16305: LD_VAR 0 1
16309: PPUSH
16310: CALL 33814 0 1
// end ; end_of_file
16314: PPOPN 1
16316: END
// every 0 0$1 trigger ruAI = 1 do
16317: LD_EXP 34
16321: PUSH
16322: LD_INT 1
16324: EQUAL
16325: IFFALSE 16437
16327: GO 16329
16329: DISABLE
// begin enable ;
16330: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16331: LD_INT 3
16333: PPUSH
16334: LD_INT 6
16336: PPUSH
16337: LD_INT 9
16339: PPUSH
16340: LD_EXP 31
16344: PPUSH
16345: CALL 12988 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16349: LD_INT 3
16351: PPUSH
16352: LD_INT 4
16354: PPUSH
16355: LD_INT 10
16357: PPUSH
16358: LD_EXP 31
16362: PPUSH
16363: CALL 12988 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16367: LD_INT 3
16369: PPUSH
16370: LD_INT 9
16372: PPUSH
16373: CALL 13959 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16377: LD_INT 3
16379: PPUSH
16380: LD_INT 10
16382: PPUSH
16383: CALL 13959 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16387: LD_INT 3
16389: PPUSH
16390: LD_INT 16
16392: PPUSH
16393: LD_INT 9
16395: PPUSH
16396: LD_INT 91
16398: PPUSH
16399: CALL 13379 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16403: LD_INT 3
16405: PPUSH
16406: LD_INT 17
16408: PPUSH
16409: LD_INT 10
16411: PPUSH
16412: LD_INT 47
16414: PUSH
16415: LD_INT 129
16417: PUSH
16418: LD_INT 135
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: LIST
16425: PPUSH
16426: CALL 13379 0 4
// IntBazooka ( 3 ) ;
16430: LD_INT 3
16432: PPUSH
16433: CALL 14286 0 1
// end ;
16437: END
// every 0 0$30 trigger russianTanks >= [ 3 , 4 , 4 , 5 ] [ Difficulty ] do var j , tmp , target1 , target2 ;
16438: LD_EXP 32
16442: PUSH
16443: LD_INT 3
16445: PUSH
16446: LD_INT 4
16448: PUSH
16449: LD_INT 4
16451: PUSH
16452: LD_INT 5
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: PUSH
16461: LD_OWVAR 67
16465: ARRAY
16466: GREATEREQUAL
16467: IFFALSE 16993
16469: GO 16471
16471: DISABLE
16472: LD_INT 0
16474: PPUSH
16475: PPUSH
16476: PPUSH
16477: PPUSH
// begin enable ;
16478: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16479: LD_ADDR_VAR 0 2
16483: PUSH
16484: LD_EXP 32
16488: PUSH
16489: LD_EXP 33
16493: UNION
16494: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16495: LD_ADDR_EXP 32
16499: PUSH
16500: LD_EXP 32
16504: PUSH
16505: LD_VAR 0 2
16509: DIFF
16510: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16511: LD_ADDR_EXP 33
16515: PUSH
16516: LD_EXP 33
16520: PUSH
16521: LD_VAR 0 2
16525: DIFF
16526: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16527: LD_EXP 21
16531: PUSH
16532: LD_INT 4
16534: GREATEREQUAL
16535: IFFALSE 16553
// attackTactic := rand ( 1 , 2 ) ;
16537: LD_ADDR_EXP 36
16541: PUSH
16542: LD_INT 1
16544: PPUSH
16545: LD_INT 2
16547: PPUSH
16548: CALL_OW 12
16552: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16553: LD_INT 10
16555: PPUSH
16556: CALL_OW 302
16560: IFFALSE 16643
// begin for j in tmp do
16562: LD_ADDR_VAR 0 1
16566: PUSH
16567: LD_VAR 0 2
16571: PUSH
16572: FOR_IN
16573: IFFALSE 16616
// if attackTactic < 2 then
16575: LD_EXP 36
16579: PUSH
16580: LD_INT 2
16582: LESS
16583: IFFALSE 16599
// ComEnterUnit ( j , ruteleprt ) else
16585: LD_VAR 0 1
16589: PPUSH
16590: LD_INT 10
16592: PPUSH
16593: CALL_OW 120
16597: GO 16614
// ComMoveXY ( j , 88 , 69 ) ;
16599: LD_VAR 0 1
16603: PPUSH
16604: LD_INT 88
16606: PPUSH
16607: LD_INT 69
16609: PPUSH
16610: CALL_OW 111
16614: GO 16572
16616: POP
16617: POP
// repeat wait ( 0 0$1 ) ;
16618: LD_INT 35
16620: PPUSH
16621: CALL_OW 67
// until not UnitFilter ( tmp , [ f_hastask ] ) ;
16625: LD_VAR 0 2
16629: PPUSH
16630: LD_INT 60
16632: PUSH
16633: EMPTY
16634: LIST
16635: PPUSH
16636: CALL_OW 72
16640: NOT
16641: IFFALSE 16618
// end ; repeat wait ( 0 0$1 ) ;
16643: LD_INT 35
16645: PPUSH
16646: CALL_OW 67
// for j in tmp do
16650: LD_ADDR_VAR 0 1
16654: PUSH
16655: LD_VAR 0 2
16659: PUSH
16660: FOR_IN
16661: IFFALSE 16984
// begin if IsDead ( j ) then
16663: LD_VAR 0 1
16667: PPUSH
16668: CALL_OW 301
16672: IFFALSE 16690
// tmp := tmp diff j ;
16674: LD_ADDR_VAR 0 2
16678: PUSH
16679: LD_VAR 0 2
16683: PUSH
16684: LD_VAR 0 1
16688: DIFF
16689: ST_TO_ADDR
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , j ) ;
16690: LD_ADDR_VAR 0 3
16694: PUSH
16695: LD_INT 81
16697: PUSH
16698: LD_INT 3
16700: PUSH
16701: EMPTY
16702: LIST
16703: LIST
16704: PPUSH
16705: CALL_OW 69
16709: PPUSH
16710: LD_VAR 0 1
16714: PPUSH
16715: CALL_OW 74
16719: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 3 ] , [ f_type , unit_human ] ] ] ) , j ) ;
16720: LD_ADDR_VAR 0 4
16724: PUSH
16725: LD_INT 81
16727: PUSH
16728: LD_INT 3
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: PUSH
16735: LD_INT 21
16737: PUSH
16738: LD_INT 1
16740: PUSH
16741: EMPTY
16742: LIST
16743: LIST
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: PUSH
16749: EMPTY
16750: LIST
16751: PPUSH
16752: CALL_OW 69
16756: PPUSH
16757: LD_VAR 0 1
16761: PPUSH
16762: CALL_OW 74
16766: ST_TO_ADDR
// if GetWeapon ( j ) = ru_time_lapser then
16767: LD_VAR 0 1
16771: PPUSH
16772: CALL_OW 264
16776: PUSH
16777: LD_INT 49
16779: EQUAL
16780: IFFALSE 16916
// begin if UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) > 1 and UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) then
16782: LD_VAR 0 2
16786: PPUSH
16787: LD_INT 3
16789: PUSH
16790: LD_INT 34
16792: PUSH
16793: LD_INT 49
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PPUSH
16804: CALL_OW 72
16808: PUSH
16809: LD_INT 1
16811: GREATER
16812: PUSH
16813: LD_VAR 0 2
16817: PPUSH
16818: LD_INT 3
16820: PUSH
16821: LD_INT 34
16823: PUSH
16824: LD_INT 49
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: PPUSH
16835: CALL_OW 72
16839: AND
16840: IFFALSE 16890
// ComMoveUnit ( j , NearestUnitToUnit ( UnitFilter ( tmp , [ f_not , [ f_weapon , ru_time_lapser ] ] ) , j ) ) else
16842: LD_VAR 0 1
16846: PPUSH
16847: LD_VAR 0 2
16851: PPUSH
16852: LD_INT 3
16854: PUSH
16855: LD_INT 34
16857: PUSH
16858: LD_INT 49
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: PPUSH
16869: CALL_OW 72
16873: PPUSH
16874: LD_VAR 0 1
16878: PPUSH
16879: CALL_OW 74
16883: PPUSH
16884: CALL_OW 112
16888: GO 16914
// ComMoveUnit ( j , NearestUnitToUnit ( target1 , j ) ) ;
16890: LD_VAR 0 1
16894: PPUSH
16895: LD_VAR 0 3
16899: PPUSH
16900: LD_VAR 0 1
16904: PPUSH
16905: CALL_OW 74
16909: PPUSH
16910: CALL_OW 112
// end else
16914: GO 16982
// begin if GetDistUnits ( j , target2 ) < GetDistUnits ( j , target1 ) + 2 then
16916: LD_VAR 0 1
16920: PPUSH
16921: LD_VAR 0 4
16925: PPUSH
16926: CALL_OW 296
16930: PUSH
16931: LD_VAR 0 1
16935: PPUSH
16936: LD_VAR 0 3
16940: PPUSH
16941: CALL_OW 296
16945: PUSH
16946: LD_INT 2
16948: PLUS
16949: LESS
16950: IFFALSE 16968
// ComAttackUnit ( j , target2 ) else
16952: LD_VAR 0 1
16956: PPUSH
16957: LD_VAR 0 4
16961: PPUSH
16962: CALL_OW 115
16966: GO 16982
// ComAttackUnit ( j , target1 ) ;
16968: LD_VAR 0 1
16972: PPUSH
16973: LD_VAR 0 3
16977: PPUSH
16978: CALL_OW 115
// end ; end ;
16982: GO 16660
16984: POP
16985: POP
// until not tmp ;
16986: LD_VAR 0 2
16990: NOT
16991: IFFALSE 16643
// end ;
16993: PPOPN 4
16995: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16996: LD_INT 4
16998: PPUSH
16999: CALL_OW 303
17003: IFFALSE 17018
17005: GO 17007
17007: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17008: LD_INT 3
17010: PPUSH
17011: LD_INT 4
17013: PPUSH
17014: CALL 14938 0 2
17018: END
// every 0 0$1 do
17019: GO 17021
17021: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17022: LD_INT 3
17024: PPUSH
17025: LD_INT 91
17027: PPUSH
17028: LD_INT 3
17030: PPUSH
17031: CALL 12747 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17035: LD_INT 3
17037: PPUSH
17038: LD_INT 47
17040: PPUSH
17041: LD_INT 3
17043: PPUSH
17044: CALL 12747 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17048: LD_INT 3
17050: PPUSH
17051: LD_INT 129
17053: PPUSH
17054: LD_INT 3
17056: PPUSH
17057: CALL 12747 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17061: LD_INT 3
17063: PPUSH
17064: LD_INT 3
17066: PPUSH
17067: LD_INT 3
17069: PPUSH
17070: CALL 12747 0 3
// end ;
17074: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17075: LD_INT 22
17077: PUSH
17078: LD_INT 1
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: LD_INT 21
17087: PUSH
17088: LD_INT 3
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PPUSH
17099: CALL_OW 69
17103: IFFALSE 17172
17105: GO 17107
17107: DISABLE
// begin wait ( 0 0$40 ) ;
17108: LD_INT 1400
17110: PPUSH
17111: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17115: LD_INT 3
17117: PPUSH
17118: LD_INT 21
17120: PPUSH
17121: LD_INT 3
17123: PUSH
17124: LD_INT 4
17126: PUSH
17127: LD_INT 4
17129: PUSH
17130: LD_INT 5
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: PUSH
17139: LD_OWVAR 67
17143: ARRAY
17144: PPUSH
17145: LD_INT 46
17147: PUSH
17148: LD_INT 45
17150: PUSH
17151: LD_INT 44
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: LIST
17158: PPUSH
17159: LD_INT 3
17161: PPUSH
17162: LD_INT 3
17164: PPUSH
17165: LD_INT 24
17167: PPUSH
17168: CALL 14139 0 7
// end ;
17172: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17173: LD_EXP 20
17177: PUSH
17178: LD_INT 2
17180: EQUAL
17181: PUSH
17182: LD_INT 21
17184: PPUSH
17185: CALL_OW 255
17189: PUSH
17190: LD_INT 3
17192: EQUAL
17193: AND
17194: PUSH
17195: LD_INT 112
17197: PPUSH
17198: CALL_OW 255
17202: PUSH
17203: LD_INT 3
17205: EQUAL
17206: AND
17207: PUSH
17208: LD_INT 21
17210: PPUSH
17211: CALL_OW 302
17215: AND
17216: PUSH
17217: LD_INT 112
17219: PPUSH
17220: CALL_OW 302
17224: AND
17225: PUSH
17226: LD_INT 22
17228: PUSH
17229: LD_INT 3
17231: PUSH
17232: EMPTY
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 21
17238: PUSH
17239: LD_INT 2
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: LD_INT 50
17248: PUSH
17249: EMPTY
17250: LIST
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: LD_INT 58
17257: PUSH
17258: EMPTY
17259: LIST
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: PPUSH
17271: CALL_OW 69
17275: PUSH
17276: LD_INT 18
17278: PPUSH
17279: LD_INT 22
17281: PUSH
17282: LD_INT 3
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: PUSH
17289: LD_INT 21
17291: PUSH
17292: LD_INT 2
17294: PUSH
17295: EMPTY
17296: LIST
17297: LIST
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PPUSH
17303: CALL_OW 70
17307: PUSH
17308: LD_INT 0
17310: EQUAL
17311: DIFF
17312: AND
17313: IFFALSE 17439
17315: GO 17317
17317: DISABLE
// begin enable ;
17318: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 , 5 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17319: LD_INT 3
17321: PPUSH
17322: LD_INT 21
17324: PPUSH
17325: LD_INT 3
17327: PUSH
17328: LD_INT 4
17330: PUSH
17331: LD_INT 4
17333: PUSH
17334: LD_INT 5
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: LD_OWVAR 67
17347: ARRAY
17348: PPUSH
17349: LD_INT 46
17351: PUSH
17352: LD_INT 45
17354: PUSH
17355: LD_INT 44
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: PPUSH
17363: LD_INT 3
17365: PPUSH
17366: LD_INT 3
17368: PPUSH
17369: LD_INT 24
17371: PPUSH
17372: CALL 14139 0 7
// if russianTimeLapsers = 0 then
17376: LD_EXP 33
17380: PUSH
17381: LD_INT 0
17383: EQUAL
17384: IFFALSE 17439
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17386: LD_INT 3
17388: PPUSH
17389: LD_INT 112
17391: PPUSH
17392: LD_INT 1
17394: PUSH
17395: LD_INT 2
17397: PUSH
17398: LD_INT 2
17400: PUSH
17401: LD_INT 2
17403: PUSH
17404: EMPTY
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: PUSH
17410: LD_OWVAR 67
17414: ARRAY
17415: PPUSH
17416: LD_INT 49
17418: PUSH
17419: LD_INT 49
17421: PUSH
17422: EMPTY
17423: LIST
17424: LIST
17425: PPUSH
17426: LD_INT 3
17428: PPUSH
17429: LD_INT 3
17431: PPUSH
17432: LD_INT 24
17434: PPUSH
17435: CALL 14139 0 7
// end ;
17439: END
// every 0 0$1 trigger arabianMines do var i ;
17440: LD_EXP 37
17444: IFFALSE 17565
17446: GO 17448
17448: DISABLE
17449: LD_INT 0
17451: PPUSH
// begin enable ;
17452: ENABLE
// for i in arabianMines do
17453: LD_ADDR_VAR 0 1
17457: PUSH
17458: LD_EXP 37
17462: PUSH
17463: FOR_IN
17464: IFFALSE 17563
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17466: LD_INT 22
17468: PUSH
17469: LD_INT 1
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 92
17478: PUSH
17479: LD_VAR 0 1
17483: PUSH
17484: LD_INT 1
17486: ARRAY
17487: PUSH
17488: LD_VAR 0 1
17492: PUSH
17493: LD_INT 2
17495: ARRAY
17496: PUSH
17497: LD_INT 3
17499: PUSH
17500: EMPTY
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: PPUSH
17510: CALL_OW 69
17514: IFFALSE 17561
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17516: LD_VAR 0 1
17520: PUSH
17521: LD_INT 1
17523: ARRAY
17524: PPUSH
17525: LD_VAR 0 1
17529: PUSH
17530: LD_INT 2
17532: ARRAY
17533: PPUSH
17534: LD_INT 5
17536: PPUSH
17537: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17541: LD_ADDR_EXP 37
17545: PUSH
17546: LD_EXP 37
17550: PPUSH
17551: LD_VAR 0 1
17555: PPUSH
17556: CALL_OW 3
17560: ST_TO_ADDR
// end ; end ;
17561: GO 17463
17563: POP
17564: POP
// end ;
17565: PPOPN 1
17567: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17568: LD_EXP 21
17572: PUSH
17573: LD_INT 4
17575: GREATEREQUAL
17576: PUSH
17577: LD_EXP 22
17581: PUSH
17582: LD_INT 12
17584: MOD
17585: PUSH
17586: LD_INT 0
17588: EQUAL
17589: AND
17590: IFFALSE 17704
17592: GO 17594
17594: DISABLE
17595: LD_INT 0
17597: PPUSH
17598: PPUSH
// begin enable ;
17599: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 74 , 117 ] ] ;
17600: LD_ADDR_VAR 0 2
17604: PUSH
17605: LD_INT 122
17607: PUSH
17608: LD_INT 142
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: PUSH
17615: LD_INT 101
17617: PUSH
17618: LD_INT 127
17620: PUSH
17621: EMPTY
17622: LIST
17623: LIST
17624: PUSH
17625: LD_INT 104
17627: PUSH
17628: LD_INT 104
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: PUSH
17635: LD_INT 74
17637: PUSH
17638: LD_INT 117
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: LIST
17649: LIST
17650: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17651: LD_ADDR_VAR 0 1
17655: PUSH
17656: LD_INT 1
17658: PPUSH
17659: LD_INT 4
17661: PPUSH
17662: CALL_OW 12
17666: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17667: LD_INT 10
17669: PPUSH
17670: LD_VAR 0 2
17674: PUSH
17675: LD_VAR 0 1
17679: ARRAY
17680: PUSH
17681: LD_INT 1
17683: ARRAY
17684: PPUSH
17685: LD_VAR 0 2
17689: PUSH
17690: LD_VAR 0 1
17694: ARRAY
17695: PUSH
17696: LD_INT 2
17698: ARRAY
17699: PPUSH
17700: CALL_OW 243
// end ; end_of_file
17704: PPOPN 2
17706: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17707: LD_INT 3
17709: PPUSH
17710: CALL_OW 301
17714: IFFALSE 17911
17716: GO 17718
17718: DISABLE
// begin DialogueOn ;
17719: CALL_OW 6
// if sciCounter = 0 then
17723: LD_EXP 28
17727: PUSH
17728: LD_INT 0
17730: EQUAL
17731: IFFALSE 17759
// begin Say ( JMM , D7a-JMM-1 ) ;
17733: LD_EXP 1
17737: PPUSH
17738: LD_STRING D7a-JMM-1
17740: PPUSH
17741: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17745: LD_EXP 15
17749: PPUSH
17750: LD_STRING D7a-Pow-1
17752: PPUSH
17753: CALL_OW 94
// end else
17757: GO 17903
// if sciCounter < 6 then
17759: LD_EXP 28
17763: PUSH
17764: LD_INT 6
17766: LESS
17767: IFFALSE 17795
// begin Say ( JMM , D7b-JMM-1 ) ;
17769: LD_EXP 1
17773: PPUSH
17774: LD_STRING D7b-JMM-1
17776: PPUSH
17777: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17781: LD_EXP 15
17785: PPUSH
17786: LD_STRING D7b-Pow-1
17788: PPUSH
17789: CALL_OW 94
// end else
17793: GO 17903
// begin Say ( JMM , D7c-JMM-1 ) ;
17795: LD_EXP 1
17799: PPUSH
17800: LD_STRING D7c-JMM-1
17802: PPUSH
17803: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17807: LD_EXP 15
17811: PPUSH
17812: LD_STRING D7c-Pow-1
17814: PPUSH
17815: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17819: LD_EXP 1
17823: PPUSH
17824: LD_STRING D7d-JMM-1
17826: PPUSH
17827: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17831: LD_EXP 15
17835: PPUSH
17836: LD_STRING D7d-Pow-1
17838: PPUSH
17839: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17843: LD_EXP 1
17847: PPUSH
17848: LD_STRING D7d-JMM-2
17850: PPUSH
17851: CALL_OW 88
// if askSiberite = 1 then
17855: LD_EXP 25
17859: PUSH
17860: LD_INT 1
17862: EQUAL
17863: IFFALSE 17879
// Say ( JMM , D7d-JMM-2a ) else
17865: LD_EXP 1
17869: PPUSH
17870: LD_STRING D7d-JMM-2a
17872: PPUSH
17873: CALL_OW 88
17877: GO 17891
// SayRadio ( Powell , D7d-Pow-2 ) ;
17879: LD_EXP 15
17883: PPUSH
17884: LD_STRING D7d-Pow-2
17886: PPUSH
17887: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17891: LD_EXP 15
17895: PPUSH
17896: LD_STRING D7d-Pow-2a
17898: PPUSH
17899: CALL_OW 94
// end ; DialogueOff ;
17903: CALL_OW 7
// FinishMission ;
17907: CALL 17912 0 0
// end ;
17911: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17912: LD_INT 0
17914: PPUSH
17915: PPUSH
17916: PPUSH
17917: PPUSH
// m1 := false ;
17918: LD_ADDR_VAR 0 2
17922: PUSH
17923: LD_INT 0
17925: ST_TO_ADDR
// m2 := false ;
17926: LD_ADDR_VAR 0 3
17930: PUSH
17931: LD_INT 0
17933: ST_TO_ADDR
// m3 := false ;
17934: LD_ADDR_VAR 0 4
17938: PUSH
17939: LD_INT 0
17941: ST_TO_ADDR
// if not westPathUsed then
17942: LD_EXP 42
17946: NOT
17947: IFFALSE 17956
// SetAchievement ( ACH_PATH ) ;
17949: LD_STRING ACH_PATH
17951: PPUSH
17952: CALL_OW 543
// if not rocketBuilded then
17956: LD_EXP 44
17960: NOT
17961: IFFALSE 17977
// begin wait ( 3 ) ;
17963: LD_INT 3
17965: PPUSH
17966: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17970: LD_STRING ACH_ROCKET
17972: PPUSH
17973: CALL_OW 543
// end ; if tick <= 40 40$00 then
17977: LD_OWVAR 1
17981: PUSH
17982: LD_INT 84000
17984: LESSEQUAL
17985: IFFALSE 18001
// begin wait ( 3 ) ;
17987: LD_INT 3
17989: PPUSH
17990: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17994: LD_STRING ACH_ASPEED_12
17996: PPUSH
17997: CALL_OW 543
// end ; if teleportExplored = 1 then
18001: LD_EXP 26
18005: PUSH
18006: LD_INT 1
18008: EQUAL
18009: IFFALSE 18031
// begin m1 := true ;
18011: LD_ADDR_VAR 0 2
18015: PUSH
18016: LD_INT 1
18018: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18019: LD_STRING Teleport
18021: PPUSH
18022: LD_INT 1
18024: PPUSH
18025: CALL_OW 101
// end else
18029: GO 18042
// AddMedal ( Teleport , - 1 ) ;
18031: LD_STRING Teleport
18033: PPUSH
18034: LD_INT 1
18036: NEG
18037: PPUSH
18038: CALL_OW 101
// if sciCounter > 2 then
18042: LD_EXP 28
18046: PUSH
18047: LD_INT 2
18049: GREATER
18050: IFFALSE 18072
// begin m2 := true ;
18052: LD_ADDR_VAR 0 3
18056: PUSH
18057: LD_INT 1
18059: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18060: LD_STRING Materials
18062: PPUSH
18063: LD_INT 1
18065: PPUSH
18066: CALL_OW 101
// end else
18070: GO 18083
// AddMedal ( Materials , - 1 ) ;
18072: LD_STRING Materials
18074: PPUSH
18075: LD_INT 1
18077: NEG
18078: PPUSH
18079: CALL_OW 101
// if sciCounter >= 6 then
18083: LD_EXP 28
18087: PUSH
18088: LD_INT 6
18090: GREATEREQUAL
18091: IFFALSE 18123
// begin m3 := true ;
18093: LD_ADDR_VAR 0 4
18097: PUSH
18098: LD_INT 1
18100: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18101: LD_STRING Scientists
18103: PPUSH
18104: LD_INT 1
18106: PPUSH
18107: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18111: LD_INT 1
18113: PPUSH
18114: LD_STRING 12_SciDed_1
18116: PPUSH
18117: CALL_OW 39
// end else
18121: GO 18144
// begin AddMedal ( Scientists , - 1 ) ;
18123: LD_STRING Scientists
18125: PPUSH
18126: LD_INT 1
18128: NEG
18129: PPUSH
18130: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18134: LD_INT 0
18136: PPUSH
18137: LD_STRING 12_SciDed_1
18139: PPUSH
18140: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18144: LD_EXP 24
18148: PPUSH
18149: LD_STRING 12_MainDepositFake_1
18151: PPUSH
18152: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18156: LD_VAR 0 2
18160: PUSH
18161: LD_VAR 0 3
18165: AND
18166: PUSH
18167: LD_VAR 0 4
18171: AND
18172: PUSH
18173: LD_OWVAR 67
18177: PUSH
18178: LD_INT 3
18180: GREATEREQUAL
18181: AND
18182: IFFALSE 18194
// SetAchievementEX ( ACH_AMER , 12 ) ;
18184: LD_STRING ACH_AMER
18186: PPUSH
18187: LD_INT 12
18189: PPUSH
18190: CALL_OW 564
// GiveMedals ( MAIN ) ;
18194: LD_STRING MAIN
18196: PPUSH
18197: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18201: LD_INT 22
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 21
18213: PUSH
18214: LD_INT 1
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: PUSH
18221: LD_INT 2
18223: PUSH
18224: LD_INT 25
18226: PUSH
18227: LD_INT 1
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: LD_INT 25
18236: PUSH
18237: LD_INT 2
18239: PUSH
18240: EMPTY
18241: LIST
18242: LIST
18243: PUSH
18244: LD_INT 25
18246: PUSH
18247: LD_INT 3
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: PUSH
18254: LD_INT 25
18256: PUSH
18257: LD_INT 4
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: PUSH
18264: LD_INT 25
18266: PUSH
18267: LD_INT 5
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PUSH
18274: LD_INT 25
18276: PUSH
18277: LD_INT 8
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: EMPTY
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: PUSH
18293: EMPTY
18294: LIST
18295: LIST
18296: LIST
18297: PPUSH
18298: CALL_OW 69
18302: PPUSH
18303: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18307: LD_EXP 1
18311: PPUSH
18312: LD_EXP 39
18316: PUSH
18317: LD_STRING JMM
18319: STR
18320: PPUSH
18321: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18325: LD_EXP 7
18329: PPUSH
18330: LD_EXP 39
18334: PUSH
18335: LD_STRING Brown
18337: STR
18338: PPUSH
18339: CALL 12091 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18343: LD_EXP 3
18347: PPUSH
18348: LD_EXP 39
18352: PUSH
18353: LD_STRING Donaldson
18355: STR
18356: PPUSH
18357: CALL 12091 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18361: LD_EXP 4
18365: PPUSH
18366: LD_EXP 39
18370: PUSH
18371: LD_STRING Bobby
18373: STR
18374: PPUSH
18375: CALL 12091 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18379: LD_EXP 5
18383: PPUSH
18384: LD_EXP 39
18388: PUSH
18389: LD_STRING Cyrus
18391: STR
18392: PPUSH
18393: CALL 12091 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18397: LD_EXP 2
18401: PPUSH
18402: LD_EXP 39
18406: PUSH
18407: LD_STRING Lisa
18409: STR
18410: PPUSH
18411: CALL 12091 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18415: LD_EXP 12
18419: PPUSH
18420: LD_EXP 39
18424: PUSH
18425: LD_STRING Frank
18427: STR
18428: PPUSH
18429: CALL 12091 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18433: LD_EXP 13
18437: PPUSH
18438: LD_EXP 39
18442: PUSH
18443: LD_STRING Kikuchi
18445: STR
18446: PPUSH
18447: CALL 12091 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18451: LD_EXP 9
18455: PPUSH
18456: LD_EXP 39
18460: PUSH
18461: LD_STRING Houten
18463: STR
18464: PPUSH
18465: CALL 12091 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18469: LD_EXP 11
18473: PPUSH
18474: LD_EXP 39
18478: PUSH
18479: LD_STRING Gary
18481: STR
18482: PPUSH
18483: CALL 12091 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18487: LD_EXP 10
18491: PPUSH
18492: LD_EXP 39
18496: PUSH
18497: LD_STRING Cornell
18499: STR
18500: PPUSH
18501: CALL 12091 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18505: LD_EXP 6
18509: PPUSH
18510: LD_EXP 39
18514: PUSH
18515: LD_STRING Denis
18517: STR
18518: PPUSH
18519: CALL 12091 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18523: LD_EXP 8
18527: PPUSH
18528: LD_EXP 39
18532: PUSH
18533: LD_STRING Gladstone
18535: STR
18536: PPUSH
18537: CALL 12091 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18541: LD_INT 22
18543: PUSH
18544: LD_INT 1
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 23
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: LD_INT 21
18563: PUSH
18564: LD_INT 1
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PUSH
18571: LD_INT 2
18573: PUSH
18574: LD_INT 25
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 25
18586: PUSH
18587: LD_INT 2
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: LD_INT 25
18596: PUSH
18597: LD_INT 3
18599: PUSH
18600: EMPTY
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 25
18606: PUSH
18607: LD_INT 4
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 25
18616: PUSH
18617: LD_INT 5
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: LD_INT 25
18626: PUSH
18627: LD_INT 8
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: PUSH
18643: EMPTY
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: PPUSH
18649: CALL_OW 69
18653: PUSH
18654: LD_EXP 1
18658: PUSH
18659: LD_EXP 7
18663: PUSH
18664: LD_EXP 3
18668: PUSH
18669: LD_EXP 4
18673: PUSH
18674: LD_EXP 5
18678: PUSH
18679: LD_EXP 2
18683: PUSH
18684: LD_EXP 12
18688: PUSH
18689: LD_EXP 8
18693: PUSH
18694: LD_EXP 13
18698: PUSH
18699: LD_EXP 6
18703: PUSH
18704: LD_EXP 9
18708: PUSH
18709: LD_EXP 11
18713: PUSH
18714: LD_EXP 10
18718: PUSH
18719: EMPTY
18720: LIST
18721: LIST
18722: LIST
18723: LIST
18724: LIST
18725: LIST
18726: LIST
18727: LIST
18728: LIST
18729: LIST
18730: LIST
18731: LIST
18732: LIST
18733: DIFF
18734: PPUSH
18735: LD_STRING 12_other_survivors
18737: PPUSH
18738: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18742: LD_INT 22
18744: PUSH
18745: LD_INT 1
18747: PUSH
18748: EMPTY
18749: LIST
18750: LIST
18751: PUSH
18752: LD_INT 23
18754: PUSH
18755: LD_INT 2
18757: PUSH
18758: EMPTY
18759: LIST
18760: LIST
18761: PUSH
18762: LD_INT 21
18764: PUSH
18765: LD_INT 1
18767: PUSH
18768: EMPTY
18769: LIST
18770: LIST
18771: PUSH
18772: LD_INT 2
18774: PUSH
18775: LD_INT 25
18777: PUSH
18778: LD_INT 1
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 25
18787: PUSH
18788: LD_INT 2
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 25
18797: PUSH
18798: LD_INT 3
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 25
18807: PUSH
18808: LD_INT 4
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: PUSH
18815: LD_INT 25
18817: PUSH
18818: LD_INT 5
18820: PUSH
18821: EMPTY
18822: LIST
18823: LIST
18824: PUSH
18825: LD_INT 25
18827: PUSH
18828: LD_INT 8
18830: PUSH
18831: EMPTY
18832: LIST
18833: LIST
18834: PUSH
18835: EMPTY
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: PPUSH
18850: CALL_OW 69
18854: PPUSH
18855: LD_STRING 12_kurt_squad
18857: PPUSH
18858: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18862: LD_EXP 14
18866: PPUSH
18867: LD_STRING 12_others
18869: PPUSH
18870: CALL_OW 38
// YouWin ;
18874: CALL_OW 103
// end ; end_of_file
18878: LD_VAR 0 1
18882: RET
// every 0 0$01 trigger ruAI do
18883: LD_EXP 34
18887: IFFALSE 19197
18889: GO 18891
18891: DISABLE
// begin repeat wait ( 0 0$10 ) ;
18892: LD_INT 350
18894: PPUSH
18895: CALL_OW 67
// if cratesSpawned < 12 then
18899: LD_EXP 38
18903: PUSH
18904: LD_INT 12
18906: LESS
18907: IFFALSE 18959
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18909: LD_INT 105
18911: PPUSH
18912: LD_INT 350
18914: PPUSH
18915: CALL_OW 12
18919: PPUSH
18920: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18924: LD_INT 3
18926: PPUSH
18927: LD_INT 5
18929: PPUSH
18930: CALL_OW 12
18934: PPUSH
18935: LD_INT 21
18937: PPUSH
18938: LD_INT 1
18940: PPUSH
18941: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18945: LD_ADDR_EXP 38
18949: PUSH
18950: LD_EXP 38
18954: PUSH
18955: LD_INT 1
18957: PLUS
18958: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 22 then
18959: LD_EXP 38
18963: PUSH
18964: LD_INT 12
18966: GREATEREQUAL
18967: PUSH
18968: LD_EXP 38
18972: PUSH
18973: LD_INT 22
18975: LESS
18976: AND
18977: IFFALSE 19029
// begin wait ( rand ( 0 0$10 , 0 0$20 ) ) ;
18979: LD_INT 350
18981: PPUSH
18982: LD_INT 700
18984: PPUSH
18985: CALL_OW 12
18989: PPUSH
18990: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18994: LD_INT 3
18996: PPUSH
18997: LD_INT 5
18999: PPUSH
19000: CALL_OW 12
19004: PPUSH
19005: LD_INT 21
19007: PPUSH
19008: LD_INT 1
19010: PPUSH
19011: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19015: LD_ADDR_EXP 38
19019: PUSH
19020: LD_EXP 38
19024: PUSH
19025: LD_INT 1
19027: PLUS
19028: ST_TO_ADDR
// end ; if cratesSpawned >= 22 then
19029: LD_EXP 38
19033: PUSH
19034: LD_INT 22
19036: GREATEREQUAL
19037: IFFALSE 19111
// begin if GetListOfCratesInArea ( CratesArea ) < 10 then
19039: LD_INT 21
19041: PPUSH
19042: CALL_OW 435
19046: PUSH
19047: LD_INT 10
19049: LESS
19050: IFFALSE 19061
// wait ( 0 0$10 ) else
19052: LD_INT 350
19054: PPUSH
19055: CALL_OW 67
19059: GO 19076
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
19061: LD_INT 1750
19063: PPUSH
19064: LD_INT 3150
19066: PPUSH
19067: CALL_OW 12
19071: PPUSH
19072: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
19076: LD_INT 1
19078: PPUSH
19079: LD_INT 5
19081: PPUSH
19082: CALL_OW 12
19086: PPUSH
19087: LD_INT 21
19089: PPUSH
19090: LD_INT 1
19092: PPUSH
19093: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19097: LD_ADDR_EXP 38
19101: PUSH
19102: LD_EXP 38
19106: PUSH
19107: LD_INT 1
19109: PLUS
19110: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
19111: LD_EXP 38
19115: PUSH
19116: LD_INT 110
19118: GREATEREQUAL
19119: IFFALSE 19193
// begin if GetListOfCratesInArea ( CratesArea ) < 10 then
19121: LD_INT 21
19123: PPUSH
19124: CALL_OW 435
19128: PUSH
19129: LD_INT 10
19131: LESS
19132: IFFALSE 19143
// wait ( 0 0$20 ) else
19134: LD_INT 700
19136: PPUSH
19137: CALL_OW 67
19141: GO 19158
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
19143: LD_INT 2450
19145: PPUSH
19146: LD_INT 3850
19148: PPUSH
19149: CALL_OW 12
19153: PPUSH
19154: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
19158: LD_INT 1
19160: PPUSH
19161: LD_INT 5
19163: PPUSH
19164: CALL_OW 12
19168: PPUSH
19169: LD_INT 21
19171: PPUSH
19172: LD_INT 1
19174: PPUSH
19175: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19179: LD_ADDR_EXP 38
19183: PUSH
19184: LD_EXP 38
19188: PUSH
19189: LD_INT 1
19191: PLUS
19192: ST_TO_ADDR
// end ; until false ;
19193: LD_INT 0
19195: IFFALSE 18892
// end ; end_of_file
19197: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
19198: LD_INT 0
19200: PPUSH
// ar_miner := 81 ;
19201: LD_ADDR_EXP 52
19205: PUSH
19206: LD_INT 81
19208: ST_TO_ADDR
// ar_crane := 88 ;
19209: LD_ADDR_EXP 51
19213: PUSH
19214: LD_INT 88
19216: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
19217: LD_ADDR_EXP 46
19221: PUSH
19222: LD_INT 89
19224: ST_TO_ADDR
// us_hack := 99 ;
19225: LD_ADDR_EXP 47
19229: PUSH
19230: LD_INT 99
19232: ST_TO_ADDR
// us_artillery := 97 ;
19233: LD_ADDR_EXP 48
19237: PUSH
19238: LD_INT 97
19240: ST_TO_ADDR
// ar_bio_bomb := 91 ;
19241: LD_ADDR_EXP 49
19245: PUSH
19246: LD_INT 91
19248: ST_TO_ADDR
// ar_mortar := 92 ;
19249: LD_ADDR_EXP 50
19253: PUSH
19254: LD_INT 92
19256: ST_TO_ADDR
// ru_flamethrower := 93 ;
19257: LD_ADDR_EXP 53
19261: PUSH
19262: LD_INT 93
19264: ST_TO_ADDR
// ru_radar := 98 ;
19265: LD_ADDR_EXP 45
19269: PUSH
19270: LD_INT 98
19272: ST_TO_ADDR
// tech_Artillery := 80 ;
19273: LD_ADDR_EXP 54
19277: PUSH
19278: LD_INT 80
19280: ST_TO_ADDR
// tech_RadMat := 81 ;
19281: LD_ADDR_EXP 55
19285: PUSH
19286: LD_INT 81
19288: ST_TO_ADDR
// tech_BasicTools := 82 ;
19289: LD_ADDR_EXP 56
19293: PUSH
19294: LD_INT 82
19296: ST_TO_ADDR
// tech_Cargo := 83 ;
19297: LD_ADDR_EXP 57
19301: PUSH
19302: LD_INT 83
19304: ST_TO_ADDR
// tech_Track := 84 ;
19305: LD_ADDR_EXP 58
19309: PUSH
19310: LD_INT 84
19312: ST_TO_ADDR
// tech_Crane := 85 ;
19313: LD_ADDR_EXP 59
19317: PUSH
19318: LD_INT 85
19320: ST_TO_ADDR
// tech_Bulldozer := 86 ;
19321: LD_ADDR_EXP 60
19325: PUSH
19326: LD_INT 86
19328: ST_TO_ADDR
// tech_Hovercraft := 87 ;
19329: LD_ADDR_EXP 61
19333: PUSH
19334: LD_INT 87
19336: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
19337: LD_ADDR_EXP 62
19341: PUSH
19342: LD_INT 88
19344: ST_TO_ADDR
// class_mastodont := 31 ;
19345: LD_ADDR_EXP 63
19349: PUSH
19350: LD_INT 31
19352: ST_TO_ADDR
// class_horse := 21 ;
19353: LD_ADDR_EXP 64
19357: PUSH
19358: LD_INT 21
19360: ST_TO_ADDR
// end ;
19361: LD_VAR 0 1
19365: RET
// every 1 do
19366: GO 19368
19368: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
19369: CALL 19198 0 0
19373: END
// every 0 0$1 do
19374: GO 19376
19376: DISABLE
// begin enable ;
19377: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19378: LD_STRING updateTimer(
19380: PUSH
19381: LD_OWVAR 1
19385: STR
19386: PUSH
19387: LD_STRING );
19389: STR
19390: PPUSH
19391: CALL_OW 559
// end ;
19395: END
// export function SOS_MapStart ( ) ; begin
19396: LD_INT 0
19398: PPUSH
// if streamModeActive then
19399: LD_EXP 65
19403: IFFALSE 19412
// DefineStreamItems ( true ) ;
19405: LD_INT 1
19407: PPUSH
19408: CALL 21062 0 1
// UpdateFactoryWaypoints ( ) ;
19412: CALL 34646 0 0
// end ;
19416: LD_VAR 0 1
19420: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19421: LD_INT 0
19423: PPUSH
// if p2 = 100 then
19424: LD_VAR 0 2
19428: PUSH
19429: LD_INT 100
19431: EQUAL
19432: IFFALSE 20435
// begin if not StreamModeActive then
19434: LD_EXP 65
19438: NOT
19439: IFFALSE 19449
// StreamModeActive := true ;
19441: LD_ADDR_EXP 65
19445: PUSH
19446: LD_INT 1
19448: ST_TO_ADDR
// if p3 = 0 then
19449: LD_VAR 0 3
19453: PUSH
19454: LD_INT 0
19456: EQUAL
19457: IFFALSE 19463
// InitStreamMode ;
19459: CALL 20598 0 0
// if p3 = 1 then
19463: LD_VAR 0 3
19467: PUSH
19468: LD_INT 1
19470: EQUAL
19471: IFFALSE 19481
// sRocket := true ;
19473: LD_ADDR_EXP 70
19477: PUSH
19478: LD_INT 1
19480: ST_TO_ADDR
// if p3 = 2 then
19481: LD_VAR 0 3
19485: PUSH
19486: LD_INT 2
19488: EQUAL
19489: IFFALSE 19499
// sSpeed := true ;
19491: LD_ADDR_EXP 69
19495: PUSH
19496: LD_INT 1
19498: ST_TO_ADDR
// if p3 = 3 then
19499: LD_VAR 0 3
19503: PUSH
19504: LD_INT 3
19506: EQUAL
19507: IFFALSE 19517
// sEngine := true ;
19509: LD_ADDR_EXP 71
19513: PUSH
19514: LD_INT 1
19516: ST_TO_ADDR
// if p3 = 4 then
19517: LD_VAR 0 3
19521: PUSH
19522: LD_INT 4
19524: EQUAL
19525: IFFALSE 19535
// sSpec := true ;
19527: LD_ADDR_EXP 68
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// if p3 = 5 then
19535: LD_VAR 0 3
19539: PUSH
19540: LD_INT 5
19542: EQUAL
19543: IFFALSE 19553
// sLevel := true ;
19545: LD_ADDR_EXP 72
19549: PUSH
19550: LD_INT 1
19552: ST_TO_ADDR
// if p3 = 6 then
19553: LD_VAR 0 3
19557: PUSH
19558: LD_INT 6
19560: EQUAL
19561: IFFALSE 19571
// sArmoury := true ;
19563: LD_ADDR_EXP 73
19567: PUSH
19568: LD_INT 1
19570: ST_TO_ADDR
// if p3 = 7 then
19571: LD_VAR 0 3
19575: PUSH
19576: LD_INT 7
19578: EQUAL
19579: IFFALSE 19589
// sRadar := true ;
19581: LD_ADDR_EXP 74
19585: PUSH
19586: LD_INT 1
19588: ST_TO_ADDR
// if p3 = 8 then
19589: LD_VAR 0 3
19593: PUSH
19594: LD_INT 8
19596: EQUAL
19597: IFFALSE 19607
// sBunker := true ;
19599: LD_ADDR_EXP 75
19603: PUSH
19604: LD_INT 1
19606: ST_TO_ADDR
// if p3 = 9 then
19607: LD_VAR 0 3
19611: PUSH
19612: LD_INT 9
19614: EQUAL
19615: IFFALSE 19625
// sHack := true ;
19617: LD_ADDR_EXP 76
19621: PUSH
19622: LD_INT 1
19624: ST_TO_ADDR
// if p3 = 10 then
19625: LD_VAR 0 3
19629: PUSH
19630: LD_INT 10
19632: EQUAL
19633: IFFALSE 19643
// sFire := true ;
19635: LD_ADDR_EXP 77
19639: PUSH
19640: LD_INT 1
19642: ST_TO_ADDR
// if p3 = 11 then
19643: LD_VAR 0 3
19647: PUSH
19648: LD_INT 11
19650: EQUAL
19651: IFFALSE 19661
// sRefresh := true ;
19653: LD_ADDR_EXP 78
19657: PUSH
19658: LD_INT 1
19660: ST_TO_ADDR
// if p3 = 12 then
19661: LD_VAR 0 3
19665: PUSH
19666: LD_INT 12
19668: EQUAL
19669: IFFALSE 19679
// sExp := true ;
19671: LD_ADDR_EXP 79
19675: PUSH
19676: LD_INT 1
19678: ST_TO_ADDR
// if p3 = 13 then
19679: LD_VAR 0 3
19683: PUSH
19684: LD_INT 13
19686: EQUAL
19687: IFFALSE 19697
// sDepot := true ;
19689: LD_ADDR_EXP 80
19693: PUSH
19694: LD_INT 1
19696: ST_TO_ADDR
// if p3 = 14 then
19697: LD_VAR 0 3
19701: PUSH
19702: LD_INT 14
19704: EQUAL
19705: IFFALSE 19715
// sFlag := true ;
19707: LD_ADDR_EXP 81
19711: PUSH
19712: LD_INT 1
19714: ST_TO_ADDR
// if p3 = 15 then
19715: LD_VAR 0 3
19719: PUSH
19720: LD_INT 15
19722: EQUAL
19723: IFFALSE 19733
// sKamikadze := true ;
19725: LD_ADDR_EXP 89
19729: PUSH
19730: LD_INT 1
19732: ST_TO_ADDR
// if p3 = 16 then
19733: LD_VAR 0 3
19737: PUSH
19738: LD_INT 16
19740: EQUAL
19741: IFFALSE 19751
// sTroll := true ;
19743: LD_ADDR_EXP 90
19747: PUSH
19748: LD_INT 1
19750: ST_TO_ADDR
// if p3 = 17 then
19751: LD_VAR 0 3
19755: PUSH
19756: LD_INT 17
19758: EQUAL
19759: IFFALSE 19769
// sSlow := true ;
19761: LD_ADDR_EXP 91
19765: PUSH
19766: LD_INT 1
19768: ST_TO_ADDR
// if p3 = 18 then
19769: LD_VAR 0 3
19773: PUSH
19774: LD_INT 18
19776: EQUAL
19777: IFFALSE 19787
// sLack := true ;
19779: LD_ADDR_EXP 92
19783: PUSH
19784: LD_INT 1
19786: ST_TO_ADDR
// if p3 = 19 then
19787: LD_VAR 0 3
19791: PUSH
19792: LD_INT 19
19794: EQUAL
19795: IFFALSE 19805
// sTank := true ;
19797: LD_ADDR_EXP 94
19801: PUSH
19802: LD_INT 1
19804: ST_TO_ADDR
// if p3 = 20 then
19805: LD_VAR 0 3
19809: PUSH
19810: LD_INT 20
19812: EQUAL
19813: IFFALSE 19823
// sRemote := true ;
19815: LD_ADDR_EXP 95
19819: PUSH
19820: LD_INT 1
19822: ST_TO_ADDR
// if p3 = 21 then
19823: LD_VAR 0 3
19827: PUSH
19828: LD_INT 21
19830: EQUAL
19831: IFFALSE 19841
// sPowell := true ;
19833: LD_ADDR_EXP 96
19837: PUSH
19838: LD_INT 1
19840: ST_TO_ADDR
// if p3 = 22 then
19841: LD_VAR 0 3
19845: PUSH
19846: LD_INT 22
19848: EQUAL
19849: IFFALSE 19859
// sTeleport := true ;
19851: LD_ADDR_EXP 99
19855: PUSH
19856: LD_INT 1
19858: ST_TO_ADDR
// if p3 = 23 then
19859: LD_VAR 0 3
19863: PUSH
19864: LD_INT 23
19866: EQUAL
19867: IFFALSE 19877
// sOilTower := true ;
19869: LD_ADDR_EXP 101
19873: PUSH
19874: LD_INT 1
19876: ST_TO_ADDR
// if p3 = 24 then
19877: LD_VAR 0 3
19881: PUSH
19882: LD_INT 24
19884: EQUAL
19885: IFFALSE 19895
// sShovel := true ;
19887: LD_ADDR_EXP 102
19891: PUSH
19892: LD_INT 1
19894: ST_TO_ADDR
// if p3 = 25 then
19895: LD_VAR 0 3
19899: PUSH
19900: LD_INT 25
19902: EQUAL
19903: IFFALSE 19913
// sSheik := true ;
19905: LD_ADDR_EXP 103
19909: PUSH
19910: LD_INT 1
19912: ST_TO_ADDR
// if p3 = 26 then
19913: LD_VAR 0 3
19917: PUSH
19918: LD_INT 26
19920: EQUAL
19921: IFFALSE 19931
// sEarthquake := true ;
19923: LD_ADDR_EXP 105
19927: PUSH
19928: LD_INT 1
19930: ST_TO_ADDR
// if p3 = 27 then
19931: LD_VAR 0 3
19935: PUSH
19936: LD_INT 27
19938: EQUAL
19939: IFFALSE 19949
// sAI := true ;
19941: LD_ADDR_EXP 106
19945: PUSH
19946: LD_INT 1
19948: ST_TO_ADDR
// if p3 = 28 then
19949: LD_VAR 0 3
19953: PUSH
19954: LD_INT 28
19956: EQUAL
19957: IFFALSE 19967
// sCargo := true ;
19959: LD_ADDR_EXP 109
19963: PUSH
19964: LD_INT 1
19966: ST_TO_ADDR
// if p3 = 29 then
19967: LD_VAR 0 3
19971: PUSH
19972: LD_INT 29
19974: EQUAL
19975: IFFALSE 19985
// sDLaser := true ;
19977: LD_ADDR_EXP 110
19981: PUSH
19982: LD_INT 1
19984: ST_TO_ADDR
// if p3 = 30 then
19985: LD_VAR 0 3
19989: PUSH
19990: LD_INT 30
19992: EQUAL
19993: IFFALSE 20003
// sExchange := true ;
19995: LD_ADDR_EXP 111
19999: PUSH
20000: LD_INT 1
20002: ST_TO_ADDR
// if p3 = 31 then
20003: LD_VAR 0 3
20007: PUSH
20008: LD_INT 31
20010: EQUAL
20011: IFFALSE 20021
// sFac := true ;
20013: LD_ADDR_EXP 112
20017: PUSH
20018: LD_INT 1
20020: ST_TO_ADDR
// if p3 = 32 then
20021: LD_VAR 0 3
20025: PUSH
20026: LD_INT 32
20028: EQUAL
20029: IFFALSE 20039
// sPower := true ;
20031: LD_ADDR_EXP 113
20035: PUSH
20036: LD_INT 1
20038: ST_TO_ADDR
// if p3 = 33 then
20039: LD_VAR 0 3
20043: PUSH
20044: LD_INT 33
20046: EQUAL
20047: IFFALSE 20057
// sRandom := true ;
20049: LD_ADDR_EXP 114
20053: PUSH
20054: LD_INT 1
20056: ST_TO_ADDR
// if p3 = 34 then
20057: LD_VAR 0 3
20061: PUSH
20062: LD_INT 34
20064: EQUAL
20065: IFFALSE 20075
// sShield := true ;
20067: LD_ADDR_EXP 115
20071: PUSH
20072: LD_INT 1
20074: ST_TO_ADDR
// if p3 = 35 then
20075: LD_VAR 0 3
20079: PUSH
20080: LD_INT 35
20082: EQUAL
20083: IFFALSE 20093
// sTime := true ;
20085: LD_ADDR_EXP 116
20089: PUSH
20090: LD_INT 1
20092: ST_TO_ADDR
// if p3 = 36 then
20093: LD_VAR 0 3
20097: PUSH
20098: LD_INT 36
20100: EQUAL
20101: IFFALSE 20111
// sTools := true ;
20103: LD_ADDR_EXP 117
20107: PUSH
20108: LD_INT 1
20110: ST_TO_ADDR
// if p3 = 101 then
20111: LD_VAR 0 3
20115: PUSH
20116: LD_INT 101
20118: EQUAL
20119: IFFALSE 20129
// sSold := true ;
20121: LD_ADDR_EXP 82
20125: PUSH
20126: LD_INT 1
20128: ST_TO_ADDR
// if p3 = 102 then
20129: LD_VAR 0 3
20133: PUSH
20134: LD_INT 102
20136: EQUAL
20137: IFFALSE 20147
// sDiff := true ;
20139: LD_ADDR_EXP 83
20143: PUSH
20144: LD_INT 1
20146: ST_TO_ADDR
// if p3 = 103 then
20147: LD_VAR 0 3
20151: PUSH
20152: LD_INT 103
20154: EQUAL
20155: IFFALSE 20165
// sFog := true ;
20157: LD_ADDR_EXP 86
20161: PUSH
20162: LD_INT 1
20164: ST_TO_ADDR
// if p3 = 104 then
20165: LD_VAR 0 3
20169: PUSH
20170: LD_INT 104
20172: EQUAL
20173: IFFALSE 20183
// sReset := true ;
20175: LD_ADDR_EXP 87
20179: PUSH
20180: LD_INT 1
20182: ST_TO_ADDR
// if p3 = 105 then
20183: LD_VAR 0 3
20187: PUSH
20188: LD_INT 105
20190: EQUAL
20191: IFFALSE 20201
// sSun := true ;
20193: LD_ADDR_EXP 88
20197: PUSH
20198: LD_INT 1
20200: ST_TO_ADDR
// if p3 = 106 then
20201: LD_VAR 0 3
20205: PUSH
20206: LD_INT 106
20208: EQUAL
20209: IFFALSE 20219
// sTiger := true ;
20211: LD_ADDR_EXP 84
20215: PUSH
20216: LD_INT 1
20218: ST_TO_ADDR
// if p3 = 107 then
20219: LD_VAR 0 3
20223: PUSH
20224: LD_INT 107
20226: EQUAL
20227: IFFALSE 20237
// sBomb := true ;
20229: LD_ADDR_EXP 85
20233: PUSH
20234: LD_INT 1
20236: ST_TO_ADDR
// if p3 = 108 then
20237: LD_VAR 0 3
20241: PUSH
20242: LD_INT 108
20244: EQUAL
20245: IFFALSE 20255
// sWound := true ;
20247: LD_ADDR_EXP 93
20251: PUSH
20252: LD_INT 1
20254: ST_TO_ADDR
// if p3 = 109 then
20255: LD_VAR 0 3
20259: PUSH
20260: LD_INT 109
20262: EQUAL
20263: IFFALSE 20273
// sBetray := true ;
20265: LD_ADDR_EXP 97
20269: PUSH
20270: LD_INT 1
20272: ST_TO_ADDR
// if p3 = 110 then
20273: LD_VAR 0 3
20277: PUSH
20278: LD_INT 110
20280: EQUAL
20281: IFFALSE 20291
// sContamin := true ;
20283: LD_ADDR_EXP 98
20287: PUSH
20288: LD_INT 1
20290: ST_TO_ADDR
// if p3 = 111 then
20291: LD_VAR 0 3
20295: PUSH
20296: LD_INT 111
20298: EQUAL
20299: IFFALSE 20309
// sOil := true ;
20301: LD_ADDR_EXP 100
20305: PUSH
20306: LD_INT 1
20308: ST_TO_ADDR
// if p3 = 112 then
20309: LD_VAR 0 3
20313: PUSH
20314: LD_INT 112
20316: EQUAL
20317: IFFALSE 20327
// sStu := true ;
20319: LD_ADDR_EXP 104
20323: PUSH
20324: LD_INT 1
20326: ST_TO_ADDR
// if p3 = 113 then
20327: LD_VAR 0 3
20331: PUSH
20332: LD_INT 113
20334: EQUAL
20335: IFFALSE 20345
// sBazooka := true ;
20337: LD_ADDR_EXP 107
20341: PUSH
20342: LD_INT 1
20344: ST_TO_ADDR
// if p3 = 114 then
20345: LD_VAR 0 3
20349: PUSH
20350: LD_INT 114
20352: EQUAL
20353: IFFALSE 20363
// sMortar := true ;
20355: LD_ADDR_EXP 108
20359: PUSH
20360: LD_INT 1
20362: ST_TO_ADDR
// if p3 = 115 then
20363: LD_VAR 0 3
20367: PUSH
20368: LD_INT 115
20370: EQUAL
20371: IFFALSE 20381
// sRanger := true ;
20373: LD_ADDR_EXP 118
20377: PUSH
20378: LD_INT 1
20380: ST_TO_ADDR
// if p3 = 116 then
20381: LD_VAR 0 3
20385: PUSH
20386: LD_INT 116
20388: EQUAL
20389: IFFALSE 20399
// sComputer := true ;
20391: LD_ADDR_EXP 119
20395: PUSH
20396: LD_INT 1
20398: ST_TO_ADDR
// if p3 = 117 then
20399: LD_VAR 0 3
20403: PUSH
20404: LD_INT 117
20406: EQUAL
20407: IFFALSE 20417
// s30 := true ;
20409: LD_ADDR_EXP 120
20413: PUSH
20414: LD_INT 1
20416: ST_TO_ADDR
// if p3 = 118 then
20417: LD_VAR 0 3
20421: PUSH
20422: LD_INT 118
20424: EQUAL
20425: IFFALSE 20435
// s60 := true ;
20427: LD_ADDR_EXP 121
20431: PUSH
20432: LD_INT 1
20434: ST_TO_ADDR
// end ; if p2 = 101 then
20435: LD_VAR 0 2
20439: PUSH
20440: LD_INT 101
20442: EQUAL
20443: IFFALSE 20571
// begin case p3 of 1 :
20445: LD_VAR 0 3
20449: PUSH
20450: LD_INT 1
20452: DOUBLE
20453: EQUAL
20454: IFTRUE 20458
20456: GO 20465
20458: POP
// hHackUnlimitedResources ; 2 :
20459: CALL 32669 0 0
20463: GO 20571
20465: LD_INT 2
20467: DOUBLE
20468: EQUAL
20469: IFTRUE 20473
20471: GO 20480
20473: POP
// hHackSetLevel10 ; 3 :
20474: CALL 32802 0 0
20478: GO 20571
20480: LD_INT 3
20482: DOUBLE
20483: EQUAL
20484: IFTRUE 20488
20486: GO 20495
20488: POP
// hHackSetLevel10YourUnits ; 4 :
20489: CALL 32887 0 0
20493: GO 20571
20495: LD_INT 4
20497: DOUBLE
20498: EQUAL
20499: IFTRUE 20503
20501: GO 20510
20503: POP
// hHackInvincible ; 5 :
20504: CALL 33335 0 0
20508: GO 20571
20510: LD_INT 5
20512: DOUBLE
20513: EQUAL
20514: IFTRUE 20518
20516: GO 20525
20518: POP
// hHackInvisible ; 6 :
20519: CALL 33446 0 0
20523: GO 20571
20525: LD_INT 6
20527: DOUBLE
20528: EQUAL
20529: IFTRUE 20533
20531: GO 20540
20533: POP
// hHackChangeYourSide ; 7 :
20534: CALL 33503 0 0
20538: GO 20571
20540: LD_INT 7
20542: DOUBLE
20543: EQUAL
20544: IFTRUE 20548
20546: GO 20555
20548: POP
// hHackChangeUnitSide ; 8 :
20549: CALL 33545 0 0
20553: GO 20571
20555: LD_INT 8
20557: DOUBLE
20558: EQUAL
20559: IFTRUE 20563
20561: GO 20570
20563: POP
// hHackFog ; end ;
20564: CALL 33646 0 0
20568: GO 20571
20570: POP
// end ; end ;
20571: LD_VAR 0 7
20575: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20576: GO 20578
20578: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20579: LD_STRING initStreamRollete();
20581: PPUSH
20582: CALL_OW 559
// InitStreamMode ;
20586: CALL 20598 0 0
// DefineStreamItems ( false ) ;
20590: LD_INT 0
20592: PPUSH
20593: CALL 21062 0 1
// end ;
20597: END
// function InitStreamMode ; begin
20598: LD_INT 0
20600: PPUSH
// streamModeActive := false ;
20601: LD_ADDR_EXP 65
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// normalCounter := 36 ;
20609: LD_ADDR_EXP 66
20613: PUSH
20614: LD_INT 36
20616: ST_TO_ADDR
// hardcoreCounter := 18 ;
20617: LD_ADDR_EXP 67
20621: PUSH
20622: LD_INT 18
20624: ST_TO_ADDR
// sRocket := false ;
20625: LD_ADDR_EXP 70
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
// sSpeed := false ;
20633: LD_ADDR_EXP 69
20637: PUSH
20638: LD_INT 0
20640: ST_TO_ADDR
// sEngine := false ;
20641: LD_ADDR_EXP 71
20645: PUSH
20646: LD_INT 0
20648: ST_TO_ADDR
// sSpec := false ;
20649: LD_ADDR_EXP 68
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// sLevel := false ;
20657: LD_ADDR_EXP 72
20661: PUSH
20662: LD_INT 0
20664: ST_TO_ADDR
// sArmoury := false ;
20665: LD_ADDR_EXP 73
20669: PUSH
20670: LD_INT 0
20672: ST_TO_ADDR
// sRadar := false ;
20673: LD_ADDR_EXP 74
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// sBunker := false ;
20681: LD_ADDR_EXP 75
20685: PUSH
20686: LD_INT 0
20688: ST_TO_ADDR
// sHack := false ;
20689: LD_ADDR_EXP 76
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
// sFire := false ;
20697: LD_ADDR_EXP 77
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// sRefresh := false ;
20705: LD_ADDR_EXP 78
20709: PUSH
20710: LD_INT 0
20712: ST_TO_ADDR
// sExp := false ;
20713: LD_ADDR_EXP 79
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// sDepot := false ;
20721: LD_ADDR_EXP 80
20725: PUSH
20726: LD_INT 0
20728: ST_TO_ADDR
// sFlag := false ;
20729: LD_ADDR_EXP 81
20733: PUSH
20734: LD_INT 0
20736: ST_TO_ADDR
// sKamikadze := false ;
20737: LD_ADDR_EXP 89
20741: PUSH
20742: LD_INT 0
20744: ST_TO_ADDR
// sTroll := false ;
20745: LD_ADDR_EXP 90
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// sSlow := false ;
20753: LD_ADDR_EXP 91
20757: PUSH
20758: LD_INT 0
20760: ST_TO_ADDR
// sLack := false ;
20761: LD_ADDR_EXP 92
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// sTank := false ;
20769: LD_ADDR_EXP 94
20773: PUSH
20774: LD_INT 0
20776: ST_TO_ADDR
// sRemote := false ;
20777: LD_ADDR_EXP 95
20781: PUSH
20782: LD_INT 0
20784: ST_TO_ADDR
// sPowell := false ;
20785: LD_ADDR_EXP 96
20789: PUSH
20790: LD_INT 0
20792: ST_TO_ADDR
// sTeleport := false ;
20793: LD_ADDR_EXP 99
20797: PUSH
20798: LD_INT 0
20800: ST_TO_ADDR
// sOilTower := false ;
20801: LD_ADDR_EXP 101
20805: PUSH
20806: LD_INT 0
20808: ST_TO_ADDR
// sShovel := false ;
20809: LD_ADDR_EXP 102
20813: PUSH
20814: LD_INT 0
20816: ST_TO_ADDR
// sSheik := false ;
20817: LD_ADDR_EXP 103
20821: PUSH
20822: LD_INT 0
20824: ST_TO_ADDR
// sEarthquake := false ;
20825: LD_ADDR_EXP 105
20829: PUSH
20830: LD_INT 0
20832: ST_TO_ADDR
// sAI := false ;
20833: LD_ADDR_EXP 106
20837: PUSH
20838: LD_INT 0
20840: ST_TO_ADDR
// sCargo := false ;
20841: LD_ADDR_EXP 109
20845: PUSH
20846: LD_INT 0
20848: ST_TO_ADDR
// sDLaser := false ;
20849: LD_ADDR_EXP 110
20853: PUSH
20854: LD_INT 0
20856: ST_TO_ADDR
// sExchange := false ;
20857: LD_ADDR_EXP 111
20861: PUSH
20862: LD_INT 0
20864: ST_TO_ADDR
// sFac := false ;
20865: LD_ADDR_EXP 112
20869: PUSH
20870: LD_INT 0
20872: ST_TO_ADDR
// sPower := false ;
20873: LD_ADDR_EXP 113
20877: PUSH
20878: LD_INT 0
20880: ST_TO_ADDR
// sRandom := false ;
20881: LD_ADDR_EXP 114
20885: PUSH
20886: LD_INT 0
20888: ST_TO_ADDR
// sShield := false ;
20889: LD_ADDR_EXP 115
20893: PUSH
20894: LD_INT 0
20896: ST_TO_ADDR
// sTime := false ;
20897: LD_ADDR_EXP 116
20901: PUSH
20902: LD_INT 0
20904: ST_TO_ADDR
// sTools := false ;
20905: LD_ADDR_EXP 117
20909: PUSH
20910: LD_INT 0
20912: ST_TO_ADDR
// sSold := false ;
20913: LD_ADDR_EXP 82
20917: PUSH
20918: LD_INT 0
20920: ST_TO_ADDR
// sDiff := false ;
20921: LD_ADDR_EXP 83
20925: PUSH
20926: LD_INT 0
20928: ST_TO_ADDR
// sFog := false ;
20929: LD_ADDR_EXP 86
20933: PUSH
20934: LD_INT 0
20936: ST_TO_ADDR
// sReset := false ;
20937: LD_ADDR_EXP 87
20941: PUSH
20942: LD_INT 0
20944: ST_TO_ADDR
// sSun := false ;
20945: LD_ADDR_EXP 88
20949: PUSH
20950: LD_INT 0
20952: ST_TO_ADDR
// sTiger := false ;
20953: LD_ADDR_EXP 84
20957: PUSH
20958: LD_INT 0
20960: ST_TO_ADDR
// sBomb := false ;
20961: LD_ADDR_EXP 85
20965: PUSH
20966: LD_INT 0
20968: ST_TO_ADDR
// sWound := false ;
20969: LD_ADDR_EXP 93
20973: PUSH
20974: LD_INT 0
20976: ST_TO_ADDR
// sBetray := false ;
20977: LD_ADDR_EXP 97
20981: PUSH
20982: LD_INT 0
20984: ST_TO_ADDR
// sContamin := false ;
20985: LD_ADDR_EXP 98
20989: PUSH
20990: LD_INT 0
20992: ST_TO_ADDR
// sOil := false ;
20993: LD_ADDR_EXP 100
20997: PUSH
20998: LD_INT 0
21000: ST_TO_ADDR
// sStu := false ;
21001: LD_ADDR_EXP 104
21005: PUSH
21006: LD_INT 0
21008: ST_TO_ADDR
// sBazooka := false ;
21009: LD_ADDR_EXP 107
21013: PUSH
21014: LD_INT 0
21016: ST_TO_ADDR
// sMortar := false ;
21017: LD_ADDR_EXP 108
21021: PUSH
21022: LD_INT 0
21024: ST_TO_ADDR
// sRanger := false ;
21025: LD_ADDR_EXP 118
21029: PUSH
21030: LD_INT 0
21032: ST_TO_ADDR
// sComputer := false ;
21033: LD_ADDR_EXP 119
21037: PUSH
21038: LD_INT 0
21040: ST_TO_ADDR
// s30 := false ;
21041: LD_ADDR_EXP 120
21045: PUSH
21046: LD_INT 0
21048: ST_TO_ADDR
// s60 := false ;
21049: LD_ADDR_EXP 121
21053: PUSH
21054: LD_INT 0
21056: ST_TO_ADDR
// end ;
21057: LD_VAR 0 1
21061: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21062: LD_INT 0
21064: PPUSH
21065: PPUSH
21066: PPUSH
21067: PPUSH
21068: PPUSH
21069: PPUSH
21070: PPUSH
// result := [ ] ;
21071: LD_ADDR_VAR 0 2
21075: PUSH
21076: EMPTY
21077: ST_TO_ADDR
// if campaign_id = 1 then
21078: LD_OWVAR 69
21082: PUSH
21083: LD_INT 1
21085: EQUAL
21086: IFFALSE 24252
// begin case mission_number of 1 :
21088: LD_OWVAR 70
21092: PUSH
21093: LD_INT 1
21095: DOUBLE
21096: EQUAL
21097: IFTRUE 21101
21099: GO 21177
21101: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21102: LD_ADDR_VAR 0 2
21106: PUSH
21107: LD_INT 2
21109: PUSH
21110: LD_INT 4
21112: PUSH
21113: LD_INT 11
21115: PUSH
21116: LD_INT 12
21118: PUSH
21119: LD_INT 15
21121: PUSH
21122: LD_INT 16
21124: PUSH
21125: LD_INT 22
21127: PUSH
21128: LD_INT 23
21130: PUSH
21131: LD_INT 26
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 101
21147: PUSH
21148: LD_INT 102
21150: PUSH
21151: LD_INT 106
21153: PUSH
21154: LD_INT 116
21156: PUSH
21157: LD_INT 117
21159: PUSH
21160: LD_INT 118
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: ST_TO_ADDR
21175: GO 24250
21177: LD_INT 2
21179: DOUBLE
21180: EQUAL
21181: IFTRUE 21185
21183: GO 21269
21185: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21186: LD_ADDR_VAR 0 2
21190: PUSH
21191: LD_INT 2
21193: PUSH
21194: LD_INT 4
21196: PUSH
21197: LD_INT 11
21199: PUSH
21200: LD_INT 12
21202: PUSH
21203: LD_INT 15
21205: PUSH
21206: LD_INT 16
21208: PUSH
21209: LD_INT 22
21211: PUSH
21212: LD_INT 23
21214: PUSH
21215: LD_INT 26
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: PUSH
21229: LD_INT 101
21231: PUSH
21232: LD_INT 102
21234: PUSH
21235: LD_INT 105
21237: PUSH
21238: LD_INT 106
21240: PUSH
21241: LD_INT 108
21243: PUSH
21244: LD_INT 116
21246: PUSH
21247: LD_INT 117
21249: PUSH
21250: LD_INT 118
21252: PUSH
21253: EMPTY
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: ST_TO_ADDR
21267: GO 24250
21269: LD_INT 3
21271: DOUBLE
21272: EQUAL
21273: IFTRUE 21277
21275: GO 21365
21277: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21278: LD_ADDR_VAR 0 2
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: LD_INT 4
21288: PUSH
21289: LD_INT 5
21291: PUSH
21292: LD_INT 11
21294: PUSH
21295: LD_INT 12
21297: PUSH
21298: LD_INT 15
21300: PUSH
21301: LD_INT 16
21303: PUSH
21304: LD_INT 22
21306: PUSH
21307: LD_INT 26
21309: PUSH
21310: LD_INT 36
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: LIST
21320: LIST
21321: LIST
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 101
21327: PUSH
21328: LD_INT 102
21330: PUSH
21331: LD_INT 105
21333: PUSH
21334: LD_INT 106
21336: PUSH
21337: LD_INT 108
21339: PUSH
21340: LD_INT 116
21342: PUSH
21343: LD_INT 117
21345: PUSH
21346: LD_INT 118
21348: PUSH
21349: EMPTY
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: ST_TO_ADDR
21363: GO 24250
21365: LD_INT 4
21367: DOUBLE
21368: EQUAL
21369: IFTRUE 21373
21371: GO 21469
21373: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21374: LD_ADDR_VAR 0 2
21378: PUSH
21379: LD_INT 2
21381: PUSH
21382: LD_INT 4
21384: PUSH
21385: LD_INT 5
21387: PUSH
21388: LD_INT 8
21390: PUSH
21391: LD_INT 11
21393: PUSH
21394: LD_INT 12
21396: PUSH
21397: LD_INT 15
21399: PUSH
21400: LD_INT 16
21402: PUSH
21403: LD_INT 22
21405: PUSH
21406: LD_INT 23
21408: PUSH
21409: LD_INT 26
21411: PUSH
21412: LD_INT 36
21414: PUSH
21415: EMPTY
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: PUSH
21429: LD_INT 101
21431: PUSH
21432: LD_INT 102
21434: PUSH
21435: LD_INT 105
21437: PUSH
21438: LD_INT 106
21440: PUSH
21441: LD_INT 108
21443: PUSH
21444: LD_INT 116
21446: PUSH
21447: LD_INT 117
21449: PUSH
21450: LD_INT 118
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: PUSH
21463: EMPTY
21464: LIST
21465: LIST
21466: ST_TO_ADDR
21467: GO 24250
21469: LD_INT 5
21471: DOUBLE
21472: EQUAL
21473: IFTRUE 21477
21475: GO 21589
21477: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21478: LD_ADDR_VAR 0 2
21482: PUSH
21483: LD_INT 2
21485: PUSH
21486: LD_INT 4
21488: PUSH
21489: LD_INT 5
21491: PUSH
21492: LD_INT 6
21494: PUSH
21495: LD_INT 8
21497: PUSH
21498: LD_INT 11
21500: PUSH
21501: LD_INT 12
21503: PUSH
21504: LD_INT 15
21506: PUSH
21507: LD_INT 16
21509: PUSH
21510: LD_INT 22
21512: PUSH
21513: LD_INT 23
21515: PUSH
21516: LD_INT 25
21518: PUSH
21519: LD_INT 26
21521: PUSH
21522: LD_INT 36
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 101
21543: PUSH
21544: LD_INT 102
21546: PUSH
21547: LD_INT 105
21549: PUSH
21550: LD_INT 106
21552: PUSH
21553: LD_INT 108
21555: PUSH
21556: LD_INT 109
21558: PUSH
21559: LD_INT 112
21561: PUSH
21562: LD_INT 116
21564: PUSH
21565: LD_INT 117
21567: PUSH
21568: LD_INT 118
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: ST_TO_ADDR
21587: GO 24250
21589: LD_INT 6
21591: DOUBLE
21592: EQUAL
21593: IFTRUE 21597
21595: GO 21729
21597: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21598: LD_ADDR_VAR 0 2
21602: PUSH
21603: LD_INT 2
21605: PUSH
21606: LD_INT 4
21608: PUSH
21609: LD_INT 5
21611: PUSH
21612: LD_INT 6
21614: PUSH
21615: LD_INT 8
21617: PUSH
21618: LD_INT 11
21620: PUSH
21621: LD_INT 12
21623: PUSH
21624: LD_INT 15
21626: PUSH
21627: LD_INT 16
21629: PUSH
21630: LD_INT 20
21632: PUSH
21633: LD_INT 21
21635: PUSH
21636: LD_INT 22
21638: PUSH
21639: LD_INT 23
21641: PUSH
21642: LD_INT 25
21644: PUSH
21645: LD_INT 26
21647: PUSH
21648: LD_INT 30
21650: PUSH
21651: LD_INT 31
21653: PUSH
21654: LD_INT 32
21656: PUSH
21657: LD_INT 36
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: LIST
21671: LIST
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: PUSH
21681: LD_INT 101
21683: PUSH
21684: LD_INT 102
21686: PUSH
21687: LD_INT 105
21689: PUSH
21690: LD_INT 106
21692: PUSH
21693: LD_INT 108
21695: PUSH
21696: LD_INT 109
21698: PUSH
21699: LD_INT 112
21701: PUSH
21702: LD_INT 116
21704: PUSH
21705: LD_INT 117
21707: PUSH
21708: LD_INT 118
21710: PUSH
21711: EMPTY
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: PUSH
21723: EMPTY
21724: LIST
21725: LIST
21726: ST_TO_ADDR
21727: GO 24250
21729: LD_INT 7
21731: DOUBLE
21732: EQUAL
21733: IFTRUE 21737
21735: GO 21849
21737: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21738: LD_ADDR_VAR 0 2
21742: PUSH
21743: LD_INT 2
21745: PUSH
21746: LD_INT 4
21748: PUSH
21749: LD_INT 5
21751: PUSH
21752: LD_INT 7
21754: PUSH
21755: LD_INT 11
21757: PUSH
21758: LD_INT 12
21760: PUSH
21761: LD_INT 15
21763: PUSH
21764: LD_INT 16
21766: PUSH
21767: LD_INT 20
21769: PUSH
21770: LD_INT 21
21772: PUSH
21773: LD_INT 22
21775: PUSH
21776: LD_INT 23
21778: PUSH
21779: LD_INT 25
21781: PUSH
21782: LD_INT 26
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: LIST
21789: LIST
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: PUSH
21801: LD_INT 101
21803: PUSH
21804: LD_INT 102
21806: PUSH
21807: LD_INT 103
21809: PUSH
21810: LD_INT 105
21812: PUSH
21813: LD_INT 106
21815: PUSH
21816: LD_INT 108
21818: PUSH
21819: LD_INT 112
21821: PUSH
21822: LD_INT 116
21824: PUSH
21825: LD_INT 117
21827: PUSH
21828: LD_INT 118
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: ST_TO_ADDR
21847: GO 24250
21849: LD_INT 8
21851: DOUBLE
21852: EQUAL
21853: IFTRUE 21857
21855: GO 21997
21857: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21858: LD_ADDR_VAR 0 2
21862: PUSH
21863: LD_INT 2
21865: PUSH
21866: LD_INT 4
21868: PUSH
21869: LD_INT 5
21871: PUSH
21872: LD_INT 6
21874: PUSH
21875: LD_INT 7
21877: PUSH
21878: LD_INT 8
21880: PUSH
21881: LD_INT 11
21883: PUSH
21884: LD_INT 12
21886: PUSH
21887: LD_INT 15
21889: PUSH
21890: LD_INT 16
21892: PUSH
21893: LD_INT 20
21895: PUSH
21896: LD_INT 21
21898: PUSH
21899: LD_INT 22
21901: PUSH
21902: LD_INT 23
21904: PUSH
21905: LD_INT 25
21907: PUSH
21908: LD_INT 26
21910: PUSH
21911: LD_INT 30
21913: PUSH
21914: LD_INT 31
21916: PUSH
21917: LD_INT 32
21919: PUSH
21920: LD_INT 36
21922: PUSH
21923: EMPTY
21924: LIST
21925: LIST
21926: LIST
21927: LIST
21928: LIST
21929: LIST
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: PUSH
21945: LD_INT 101
21947: PUSH
21948: LD_INT 102
21950: PUSH
21951: LD_INT 103
21953: PUSH
21954: LD_INT 105
21956: PUSH
21957: LD_INT 106
21959: PUSH
21960: LD_INT 108
21962: PUSH
21963: LD_INT 109
21965: PUSH
21966: LD_INT 112
21968: PUSH
21969: LD_INT 116
21971: PUSH
21972: LD_INT 117
21974: PUSH
21975: LD_INT 118
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: PUSH
21991: EMPTY
21992: LIST
21993: LIST
21994: ST_TO_ADDR
21995: GO 24250
21997: LD_INT 9
21999: DOUBLE
22000: EQUAL
22001: IFTRUE 22005
22003: GO 22153
22005: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22006: LD_ADDR_VAR 0 2
22010: PUSH
22011: LD_INT 2
22013: PUSH
22014: LD_INT 4
22016: PUSH
22017: LD_INT 5
22019: PUSH
22020: LD_INT 6
22022: PUSH
22023: LD_INT 7
22025: PUSH
22026: LD_INT 8
22028: PUSH
22029: LD_INT 11
22031: PUSH
22032: LD_INT 12
22034: PUSH
22035: LD_INT 15
22037: PUSH
22038: LD_INT 16
22040: PUSH
22041: LD_INT 20
22043: PUSH
22044: LD_INT 21
22046: PUSH
22047: LD_INT 22
22049: PUSH
22050: LD_INT 23
22052: PUSH
22053: LD_INT 25
22055: PUSH
22056: LD_INT 26
22058: PUSH
22059: LD_INT 28
22061: PUSH
22062: LD_INT 30
22064: PUSH
22065: LD_INT 31
22067: PUSH
22068: LD_INT 32
22070: PUSH
22071: LD_INT 36
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: PUSH
22097: LD_INT 101
22099: PUSH
22100: LD_INT 102
22102: PUSH
22103: LD_INT 103
22105: PUSH
22106: LD_INT 105
22108: PUSH
22109: LD_INT 106
22111: PUSH
22112: LD_INT 108
22114: PUSH
22115: LD_INT 109
22117: PUSH
22118: LD_INT 112
22120: PUSH
22121: LD_INT 114
22123: PUSH
22124: LD_INT 116
22126: PUSH
22127: LD_INT 117
22129: PUSH
22130: LD_INT 118
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: ST_TO_ADDR
22151: GO 24250
22153: LD_INT 10
22155: DOUBLE
22156: EQUAL
22157: IFTRUE 22161
22159: GO 22357
22161: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22162: LD_ADDR_VAR 0 2
22166: PUSH
22167: LD_INT 2
22169: PUSH
22170: LD_INT 4
22172: PUSH
22173: LD_INT 5
22175: PUSH
22176: LD_INT 6
22178: PUSH
22179: LD_INT 7
22181: PUSH
22182: LD_INT 8
22184: PUSH
22185: LD_INT 9
22187: PUSH
22188: LD_INT 10
22190: PUSH
22191: LD_INT 11
22193: PUSH
22194: LD_INT 12
22196: PUSH
22197: LD_INT 13
22199: PUSH
22200: LD_INT 14
22202: PUSH
22203: LD_INT 15
22205: PUSH
22206: LD_INT 16
22208: PUSH
22209: LD_INT 17
22211: PUSH
22212: LD_INT 18
22214: PUSH
22215: LD_INT 19
22217: PUSH
22218: LD_INT 20
22220: PUSH
22221: LD_INT 21
22223: PUSH
22224: LD_INT 22
22226: PUSH
22227: LD_INT 23
22229: PUSH
22230: LD_INT 24
22232: PUSH
22233: LD_INT 25
22235: PUSH
22236: LD_INT 26
22238: PUSH
22239: LD_INT 28
22241: PUSH
22242: LD_INT 30
22244: PUSH
22245: LD_INT 31
22247: PUSH
22248: LD_INT 32
22250: PUSH
22251: LD_INT 36
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: LIST
22276: LIST
22277: LIST
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: PUSH
22285: LD_INT 101
22287: PUSH
22288: LD_INT 102
22290: PUSH
22291: LD_INT 103
22293: PUSH
22294: LD_INT 104
22296: PUSH
22297: LD_INT 105
22299: PUSH
22300: LD_INT 106
22302: PUSH
22303: LD_INT 107
22305: PUSH
22306: LD_INT 108
22308: PUSH
22309: LD_INT 109
22311: PUSH
22312: LD_INT 110
22314: PUSH
22315: LD_INT 111
22317: PUSH
22318: LD_INT 112
22320: PUSH
22321: LD_INT 114
22323: PUSH
22324: LD_INT 116
22326: PUSH
22327: LD_INT 117
22329: PUSH
22330: LD_INT 118
22332: PUSH
22333: EMPTY
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: ST_TO_ADDR
22355: GO 24250
22357: LD_INT 11
22359: DOUBLE
22360: EQUAL
22361: IFTRUE 22365
22363: GO 22569
22365: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22366: LD_ADDR_VAR 0 2
22370: PUSH
22371: LD_INT 2
22373: PUSH
22374: LD_INT 3
22376: PUSH
22377: LD_INT 4
22379: PUSH
22380: LD_INT 5
22382: PUSH
22383: LD_INT 6
22385: PUSH
22386: LD_INT 7
22388: PUSH
22389: LD_INT 8
22391: PUSH
22392: LD_INT 9
22394: PUSH
22395: LD_INT 10
22397: PUSH
22398: LD_INT 11
22400: PUSH
22401: LD_INT 12
22403: PUSH
22404: LD_INT 13
22406: PUSH
22407: LD_INT 14
22409: PUSH
22410: LD_INT 15
22412: PUSH
22413: LD_INT 16
22415: PUSH
22416: LD_INT 17
22418: PUSH
22419: LD_INT 18
22421: PUSH
22422: LD_INT 19
22424: PUSH
22425: LD_INT 20
22427: PUSH
22428: LD_INT 21
22430: PUSH
22431: LD_INT 22
22433: PUSH
22434: LD_INT 23
22436: PUSH
22437: LD_INT 24
22439: PUSH
22440: LD_INT 25
22442: PUSH
22443: LD_INT 26
22445: PUSH
22446: LD_INT 28
22448: PUSH
22449: LD_INT 30
22451: PUSH
22452: LD_INT 31
22454: PUSH
22455: LD_INT 32
22457: PUSH
22458: LD_INT 34
22460: PUSH
22461: LD_INT 36
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: PUSH
22497: LD_INT 101
22499: PUSH
22500: LD_INT 102
22502: PUSH
22503: LD_INT 103
22505: PUSH
22506: LD_INT 104
22508: PUSH
22509: LD_INT 105
22511: PUSH
22512: LD_INT 106
22514: PUSH
22515: LD_INT 107
22517: PUSH
22518: LD_INT 108
22520: PUSH
22521: LD_INT 109
22523: PUSH
22524: LD_INT 110
22526: PUSH
22527: LD_INT 111
22529: PUSH
22530: LD_INT 112
22532: PUSH
22533: LD_INT 114
22535: PUSH
22536: LD_INT 116
22538: PUSH
22539: LD_INT 117
22541: PUSH
22542: LD_INT 118
22544: PUSH
22545: EMPTY
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: ST_TO_ADDR
22567: GO 24250
22569: LD_INT 12
22571: DOUBLE
22572: EQUAL
22573: IFTRUE 22577
22575: GO 22797
22577: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22578: LD_ADDR_VAR 0 2
22582: PUSH
22583: LD_INT 1
22585: PUSH
22586: LD_INT 2
22588: PUSH
22589: LD_INT 3
22591: PUSH
22592: LD_INT 4
22594: PUSH
22595: LD_INT 5
22597: PUSH
22598: LD_INT 6
22600: PUSH
22601: LD_INT 7
22603: PUSH
22604: LD_INT 8
22606: PUSH
22607: LD_INT 9
22609: PUSH
22610: LD_INT 10
22612: PUSH
22613: LD_INT 11
22615: PUSH
22616: LD_INT 12
22618: PUSH
22619: LD_INT 13
22621: PUSH
22622: LD_INT 14
22624: PUSH
22625: LD_INT 15
22627: PUSH
22628: LD_INT 16
22630: PUSH
22631: LD_INT 17
22633: PUSH
22634: LD_INT 18
22636: PUSH
22637: LD_INT 19
22639: PUSH
22640: LD_INT 20
22642: PUSH
22643: LD_INT 21
22645: PUSH
22646: LD_INT 22
22648: PUSH
22649: LD_INT 23
22651: PUSH
22652: LD_INT 24
22654: PUSH
22655: LD_INT 25
22657: PUSH
22658: LD_INT 26
22660: PUSH
22661: LD_INT 27
22663: PUSH
22664: LD_INT 28
22666: PUSH
22667: LD_INT 30
22669: PUSH
22670: LD_INT 31
22672: PUSH
22673: LD_INT 32
22675: PUSH
22676: LD_INT 33
22678: PUSH
22679: LD_INT 34
22681: PUSH
22682: LD_INT 36
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: LIST
22716: LIST
22717: LIST
22718: LIST
22719: LIST
22720: PUSH
22721: LD_INT 101
22723: PUSH
22724: LD_INT 102
22726: PUSH
22727: LD_INT 103
22729: PUSH
22730: LD_INT 104
22732: PUSH
22733: LD_INT 105
22735: PUSH
22736: LD_INT 106
22738: PUSH
22739: LD_INT 107
22741: PUSH
22742: LD_INT 108
22744: PUSH
22745: LD_INT 109
22747: PUSH
22748: LD_INT 110
22750: PUSH
22751: LD_INT 111
22753: PUSH
22754: LD_INT 112
22756: PUSH
22757: LD_INT 113
22759: PUSH
22760: LD_INT 114
22762: PUSH
22763: LD_INT 116
22765: PUSH
22766: LD_INT 117
22768: PUSH
22769: LD_INT 118
22771: PUSH
22772: EMPTY
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: PUSH
22791: EMPTY
22792: LIST
22793: LIST
22794: ST_TO_ADDR
22795: GO 24250
22797: LD_INT 13
22799: DOUBLE
22800: EQUAL
22801: IFTRUE 22805
22803: GO 23013
22805: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22806: LD_ADDR_VAR 0 2
22810: PUSH
22811: LD_INT 1
22813: PUSH
22814: LD_INT 2
22816: PUSH
22817: LD_INT 3
22819: PUSH
22820: LD_INT 4
22822: PUSH
22823: LD_INT 5
22825: PUSH
22826: LD_INT 8
22828: PUSH
22829: LD_INT 9
22831: PUSH
22832: LD_INT 10
22834: PUSH
22835: LD_INT 11
22837: PUSH
22838: LD_INT 12
22840: PUSH
22841: LD_INT 14
22843: PUSH
22844: LD_INT 15
22846: PUSH
22847: LD_INT 16
22849: PUSH
22850: LD_INT 17
22852: PUSH
22853: LD_INT 18
22855: PUSH
22856: LD_INT 19
22858: PUSH
22859: LD_INT 20
22861: PUSH
22862: LD_INT 21
22864: PUSH
22865: LD_INT 22
22867: PUSH
22868: LD_INT 23
22870: PUSH
22871: LD_INT 24
22873: PUSH
22874: LD_INT 25
22876: PUSH
22877: LD_INT 26
22879: PUSH
22880: LD_INT 27
22882: PUSH
22883: LD_INT 28
22885: PUSH
22886: LD_INT 30
22888: PUSH
22889: LD_INT 31
22891: PUSH
22892: LD_INT 32
22894: PUSH
22895: LD_INT 33
22897: PUSH
22898: LD_INT 34
22900: PUSH
22901: LD_INT 36
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: PUSH
22937: LD_INT 101
22939: PUSH
22940: LD_INT 102
22942: PUSH
22943: LD_INT 103
22945: PUSH
22946: LD_INT 104
22948: PUSH
22949: LD_INT 105
22951: PUSH
22952: LD_INT 106
22954: PUSH
22955: LD_INT 107
22957: PUSH
22958: LD_INT 108
22960: PUSH
22961: LD_INT 109
22963: PUSH
22964: LD_INT 110
22966: PUSH
22967: LD_INT 111
22969: PUSH
22970: LD_INT 112
22972: PUSH
22973: LD_INT 113
22975: PUSH
22976: LD_INT 114
22978: PUSH
22979: LD_INT 116
22981: PUSH
22982: LD_INT 117
22984: PUSH
22985: LD_INT 118
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: ST_TO_ADDR
23011: GO 24250
23013: LD_INT 14
23015: DOUBLE
23016: EQUAL
23017: IFTRUE 23021
23019: GO 23245
23021: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23022: LD_ADDR_VAR 0 2
23026: PUSH
23027: LD_INT 1
23029: PUSH
23030: LD_INT 2
23032: PUSH
23033: LD_INT 3
23035: PUSH
23036: LD_INT 4
23038: PUSH
23039: LD_INT 5
23041: PUSH
23042: LD_INT 6
23044: PUSH
23045: LD_INT 7
23047: PUSH
23048: LD_INT 8
23050: PUSH
23051: LD_INT 9
23053: PUSH
23054: LD_INT 10
23056: PUSH
23057: LD_INT 11
23059: PUSH
23060: LD_INT 12
23062: PUSH
23063: LD_INT 13
23065: PUSH
23066: LD_INT 14
23068: PUSH
23069: LD_INT 15
23071: PUSH
23072: LD_INT 16
23074: PUSH
23075: LD_INT 17
23077: PUSH
23078: LD_INT 18
23080: PUSH
23081: LD_INT 19
23083: PUSH
23084: LD_INT 20
23086: PUSH
23087: LD_INT 21
23089: PUSH
23090: LD_INT 22
23092: PUSH
23093: LD_INT 23
23095: PUSH
23096: LD_INT 24
23098: PUSH
23099: LD_INT 25
23101: PUSH
23102: LD_INT 26
23104: PUSH
23105: LD_INT 27
23107: PUSH
23108: LD_INT 28
23110: PUSH
23111: LD_INT 29
23113: PUSH
23114: LD_INT 30
23116: PUSH
23117: LD_INT 31
23119: PUSH
23120: LD_INT 32
23122: PUSH
23123: LD_INT 33
23125: PUSH
23126: LD_INT 34
23128: PUSH
23129: LD_INT 36
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: PUSH
23169: LD_INT 101
23171: PUSH
23172: LD_INT 102
23174: PUSH
23175: LD_INT 103
23177: PUSH
23178: LD_INT 104
23180: PUSH
23181: LD_INT 105
23183: PUSH
23184: LD_INT 106
23186: PUSH
23187: LD_INT 107
23189: PUSH
23190: LD_INT 108
23192: PUSH
23193: LD_INT 109
23195: PUSH
23196: LD_INT 110
23198: PUSH
23199: LD_INT 111
23201: PUSH
23202: LD_INT 112
23204: PUSH
23205: LD_INT 113
23207: PUSH
23208: LD_INT 114
23210: PUSH
23211: LD_INT 116
23213: PUSH
23214: LD_INT 117
23216: PUSH
23217: LD_INT 118
23219: PUSH
23220: EMPTY
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: LIST
23227: LIST
23228: LIST
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: PUSH
23239: EMPTY
23240: LIST
23241: LIST
23242: ST_TO_ADDR
23243: GO 24250
23245: LD_INT 15
23247: DOUBLE
23248: EQUAL
23249: IFTRUE 23253
23251: GO 23477
23253: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23254: LD_ADDR_VAR 0 2
23258: PUSH
23259: LD_INT 1
23261: PUSH
23262: LD_INT 2
23264: PUSH
23265: LD_INT 3
23267: PUSH
23268: LD_INT 4
23270: PUSH
23271: LD_INT 5
23273: PUSH
23274: LD_INT 6
23276: PUSH
23277: LD_INT 7
23279: PUSH
23280: LD_INT 8
23282: PUSH
23283: LD_INT 9
23285: PUSH
23286: LD_INT 10
23288: PUSH
23289: LD_INT 11
23291: PUSH
23292: LD_INT 12
23294: PUSH
23295: LD_INT 13
23297: PUSH
23298: LD_INT 14
23300: PUSH
23301: LD_INT 15
23303: PUSH
23304: LD_INT 16
23306: PUSH
23307: LD_INT 17
23309: PUSH
23310: LD_INT 18
23312: PUSH
23313: LD_INT 19
23315: PUSH
23316: LD_INT 20
23318: PUSH
23319: LD_INT 21
23321: PUSH
23322: LD_INT 22
23324: PUSH
23325: LD_INT 23
23327: PUSH
23328: LD_INT 24
23330: PUSH
23331: LD_INT 25
23333: PUSH
23334: LD_INT 26
23336: PUSH
23337: LD_INT 27
23339: PUSH
23340: LD_INT 28
23342: PUSH
23343: LD_INT 29
23345: PUSH
23346: LD_INT 30
23348: PUSH
23349: LD_INT 31
23351: PUSH
23352: LD_INT 32
23354: PUSH
23355: LD_INT 33
23357: PUSH
23358: LD_INT 34
23360: PUSH
23361: LD_INT 36
23363: PUSH
23364: EMPTY
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: LIST
23395: LIST
23396: LIST
23397: LIST
23398: LIST
23399: LIST
23400: PUSH
23401: LD_INT 101
23403: PUSH
23404: LD_INT 102
23406: PUSH
23407: LD_INT 103
23409: PUSH
23410: LD_INT 104
23412: PUSH
23413: LD_INT 105
23415: PUSH
23416: LD_INT 106
23418: PUSH
23419: LD_INT 107
23421: PUSH
23422: LD_INT 108
23424: PUSH
23425: LD_INT 109
23427: PUSH
23428: LD_INT 110
23430: PUSH
23431: LD_INT 111
23433: PUSH
23434: LD_INT 112
23436: PUSH
23437: LD_INT 113
23439: PUSH
23440: LD_INT 114
23442: PUSH
23443: LD_INT 116
23445: PUSH
23446: LD_INT 117
23448: PUSH
23449: LD_INT 118
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: LIST
23456: LIST
23457: LIST
23458: LIST
23459: LIST
23460: LIST
23461: LIST
23462: LIST
23463: LIST
23464: LIST
23465: LIST
23466: LIST
23467: LIST
23468: LIST
23469: LIST
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: ST_TO_ADDR
23475: GO 24250
23477: LD_INT 16
23479: DOUBLE
23480: EQUAL
23481: IFTRUE 23485
23483: GO 23621
23485: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23486: LD_ADDR_VAR 0 2
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 4
23496: PUSH
23497: LD_INT 5
23499: PUSH
23500: LD_INT 7
23502: PUSH
23503: LD_INT 11
23505: PUSH
23506: LD_INT 12
23508: PUSH
23509: LD_INT 15
23511: PUSH
23512: LD_INT 16
23514: PUSH
23515: LD_INT 20
23517: PUSH
23518: LD_INT 21
23520: PUSH
23521: LD_INT 22
23523: PUSH
23524: LD_INT 23
23526: PUSH
23527: LD_INT 25
23529: PUSH
23530: LD_INT 26
23532: PUSH
23533: LD_INT 30
23535: PUSH
23536: LD_INT 31
23538: PUSH
23539: LD_INT 32
23541: PUSH
23542: LD_INT 33
23544: PUSH
23545: LD_INT 34
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: PUSH
23569: LD_INT 101
23571: PUSH
23572: LD_INT 102
23574: PUSH
23575: LD_INT 103
23577: PUSH
23578: LD_INT 106
23580: PUSH
23581: LD_INT 108
23583: PUSH
23584: LD_INT 112
23586: PUSH
23587: LD_INT 113
23589: PUSH
23590: LD_INT 114
23592: PUSH
23593: LD_INT 116
23595: PUSH
23596: LD_INT 117
23598: PUSH
23599: LD_INT 118
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: ST_TO_ADDR
23619: GO 24250
23621: LD_INT 17
23623: DOUBLE
23624: EQUAL
23625: IFTRUE 23629
23627: GO 23853
23629: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23630: LD_ADDR_VAR 0 2
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 3
23643: PUSH
23644: LD_INT 4
23646: PUSH
23647: LD_INT 5
23649: PUSH
23650: LD_INT 6
23652: PUSH
23653: LD_INT 7
23655: PUSH
23656: LD_INT 8
23658: PUSH
23659: LD_INT 9
23661: PUSH
23662: LD_INT 10
23664: PUSH
23665: LD_INT 11
23667: PUSH
23668: LD_INT 12
23670: PUSH
23671: LD_INT 13
23673: PUSH
23674: LD_INT 14
23676: PUSH
23677: LD_INT 15
23679: PUSH
23680: LD_INT 16
23682: PUSH
23683: LD_INT 17
23685: PUSH
23686: LD_INT 18
23688: PUSH
23689: LD_INT 19
23691: PUSH
23692: LD_INT 20
23694: PUSH
23695: LD_INT 21
23697: PUSH
23698: LD_INT 22
23700: PUSH
23701: LD_INT 23
23703: PUSH
23704: LD_INT 24
23706: PUSH
23707: LD_INT 25
23709: PUSH
23710: LD_INT 26
23712: PUSH
23713: LD_INT 27
23715: PUSH
23716: LD_INT 28
23718: PUSH
23719: LD_INT 29
23721: PUSH
23722: LD_INT 30
23724: PUSH
23725: LD_INT 31
23727: PUSH
23728: LD_INT 32
23730: PUSH
23731: LD_INT 33
23733: PUSH
23734: LD_INT 34
23736: PUSH
23737: LD_INT 36
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: PUSH
23777: LD_INT 101
23779: PUSH
23780: LD_INT 102
23782: PUSH
23783: LD_INT 103
23785: PUSH
23786: LD_INT 104
23788: PUSH
23789: LD_INT 105
23791: PUSH
23792: LD_INT 106
23794: PUSH
23795: LD_INT 107
23797: PUSH
23798: LD_INT 108
23800: PUSH
23801: LD_INT 109
23803: PUSH
23804: LD_INT 110
23806: PUSH
23807: LD_INT 111
23809: PUSH
23810: LD_INT 112
23812: PUSH
23813: LD_INT 113
23815: PUSH
23816: LD_INT 114
23818: PUSH
23819: LD_INT 116
23821: PUSH
23822: LD_INT 117
23824: PUSH
23825: LD_INT 118
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: ST_TO_ADDR
23851: GO 24250
23853: LD_INT 18
23855: DOUBLE
23856: EQUAL
23857: IFTRUE 23861
23859: GO 24009
23861: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23862: LD_ADDR_VAR 0 2
23866: PUSH
23867: LD_INT 2
23869: PUSH
23870: LD_INT 4
23872: PUSH
23873: LD_INT 5
23875: PUSH
23876: LD_INT 7
23878: PUSH
23879: LD_INT 11
23881: PUSH
23882: LD_INT 12
23884: PUSH
23885: LD_INT 15
23887: PUSH
23888: LD_INT 16
23890: PUSH
23891: LD_INT 20
23893: PUSH
23894: LD_INT 21
23896: PUSH
23897: LD_INT 22
23899: PUSH
23900: LD_INT 23
23902: PUSH
23903: LD_INT 25
23905: PUSH
23906: LD_INT 26
23908: PUSH
23909: LD_INT 30
23911: PUSH
23912: LD_INT 31
23914: PUSH
23915: LD_INT 32
23917: PUSH
23918: LD_INT 33
23920: PUSH
23921: LD_INT 34
23923: PUSH
23924: LD_INT 35
23926: PUSH
23927: LD_INT 36
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 101
23955: PUSH
23956: LD_INT 102
23958: PUSH
23959: LD_INT 103
23961: PUSH
23962: LD_INT 106
23964: PUSH
23965: LD_INT 108
23967: PUSH
23968: LD_INT 112
23970: PUSH
23971: LD_INT 113
23973: PUSH
23974: LD_INT 114
23976: PUSH
23977: LD_INT 115
23979: PUSH
23980: LD_INT 116
23982: PUSH
23983: LD_INT 117
23985: PUSH
23986: LD_INT 118
23988: PUSH
23989: EMPTY
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: PUSH
24003: EMPTY
24004: LIST
24005: LIST
24006: ST_TO_ADDR
24007: GO 24250
24009: LD_INT 19
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24249
24017: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24018: LD_ADDR_VAR 0 2
24022: PUSH
24023: LD_INT 1
24025: PUSH
24026: LD_INT 2
24028: PUSH
24029: LD_INT 3
24031: PUSH
24032: LD_INT 4
24034: PUSH
24035: LD_INT 5
24037: PUSH
24038: LD_INT 6
24040: PUSH
24041: LD_INT 7
24043: PUSH
24044: LD_INT 8
24046: PUSH
24047: LD_INT 9
24049: PUSH
24050: LD_INT 10
24052: PUSH
24053: LD_INT 11
24055: PUSH
24056: LD_INT 12
24058: PUSH
24059: LD_INT 13
24061: PUSH
24062: LD_INT 14
24064: PUSH
24065: LD_INT 15
24067: PUSH
24068: LD_INT 16
24070: PUSH
24071: LD_INT 17
24073: PUSH
24074: LD_INT 18
24076: PUSH
24077: LD_INT 19
24079: PUSH
24080: LD_INT 20
24082: PUSH
24083: LD_INT 21
24085: PUSH
24086: LD_INT 22
24088: PUSH
24089: LD_INT 23
24091: PUSH
24092: LD_INT 24
24094: PUSH
24095: LD_INT 25
24097: PUSH
24098: LD_INT 26
24100: PUSH
24101: LD_INT 27
24103: PUSH
24104: LD_INT 28
24106: PUSH
24107: LD_INT 29
24109: PUSH
24110: LD_INT 30
24112: PUSH
24113: LD_INT 31
24115: PUSH
24116: LD_INT 32
24118: PUSH
24119: LD_INT 33
24121: PUSH
24122: LD_INT 34
24124: PUSH
24125: LD_INT 35
24127: PUSH
24128: LD_INT 36
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: LIST
24135: LIST
24136: LIST
24137: LIST
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: PUSH
24169: LD_INT 101
24171: PUSH
24172: LD_INT 102
24174: PUSH
24175: LD_INT 103
24177: PUSH
24178: LD_INT 104
24180: PUSH
24181: LD_INT 105
24183: PUSH
24184: LD_INT 106
24186: PUSH
24187: LD_INT 107
24189: PUSH
24190: LD_INT 108
24192: PUSH
24193: LD_INT 109
24195: PUSH
24196: LD_INT 110
24198: PUSH
24199: LD_INT 111
24201: PUSH
24202: LD_INT 112
24204: PUSH
24205: LD_INT 113
24207: PUSH
24208: LD_INT 114
24210: PUSH
24211: LD_INT 115
24213: PUSH
24214: LD_INT 116
24216: PUSH
24217: LD_INT 117
24219: PUSH
24220: LD_INT 118
24222: PUSH
24223: EMPTY
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: LIST
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: ST_TO_ADDR
24247: GO 24250
24249: POP
// end else
24250: GO 24481
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_INT 1
24259: PUSH
24260: LD_INT 2
24262: PUSH
24263: LD_INT 3
24265: PUSH
24266: LD_INT 4
24268: PUSH
24269: LD_INT 5
24271: PUSH
24272: LD_INT 6
24274: PUSH
24275: LD_INT 7
24277: PUSH
24278: LD_INT 8
24280: PUSH
24281: LD_INT 9
24283: PUSH
24284: LD_INT 10
24286: PUSH
24287: LD_INT 11
24289: PUSH
24290: LD_INT 12
24292: PUSH
24293: LD_INT 13
24295: PUSH
24296: LD_INT 14
24298: PUSH
24299: LD_INT 15
24301: PUSH
24302: LD_INT 16
24304: PUSH
24305: LD_INT 17
24307: PUSH
24308: LD_INT 18
24310: PUSH
24311: LD_INT 19
24313: PUSH
24314: LD_INT 20
24316: PUSH
24317: LD_INT 21
24319: PUSH
24320: LD_INT 22
24322: PUSH
24323: LD_INT 23
24325: PUSH
24326: LD_INT 24
24328: PUSH
24329: LD_INT 25
24331: PUSH
24332: LD_INT 26
24334: PUSH
24335: LD_INT 27
24337: PUSH
24338: LD_INT 28
24340: PUSH
24341: LD_INT 29
24343: PUSH
24344: LD_INT 30
24346: PUSH
24347: LD_INT 31
24349: PUSH
24350: LD_INT 32
24352: PUSH
24353: LD_INT 33
24355: PUSH
24356: LD_INT 34
24358: PUSH
24359: LD_INT 35
24361: PUSH
24362: LD_INT 36
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: PUSH
24403: LD_INT 101
24405: PUSH
24406: LD_INT 102
24408: PUSH
24409: LD_INT 103
24411: PUSH
24412: LD_INT 104
24414: PUSH
24415: LD_INT 105
24417: PUSH
24418: LD_INT 106
24420: PUSH
24421: LD_INT 107
24423: PUSH
24424: LD_INT 108
24426: PUSH
24427: LD_INT 109
24429: PUSH
24430: LD_INT 110
24432: PUSH
24433: LD_INT 111
24435: PUSH
24436: LD_INT 112
24438: PUSH
24439: LD_INT 113
24441: PUSH
24442: LD_INT 114
24444: PUSH
24445: LD_INT 115
24447: PUSH
24448: LD_INT 116
24450: PUSH
24451: LD_INT 117
24453: PUSH
24454: LD_INT 118
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: ST_TO_ADDR
// if result then
24481: LD_VAR 0 2
24485: IFFALSE 25271
// begin normal :=  ;
24487: LD_ADDR_VAR 0 5
24491: PUSH
24492: LD_STRING 
24494: ST_TO_ADDR
// hardcore :=  ;
24495: LD_ADDR_VAR 0 6
24499: PUSH
24500: LD_STRING 
24502: ST_TO_ADDR
// active :=  ;
24503: LD_ADDR_VAR 0 7
24507: PUSH
24508: LD_STRING 
24510: ST_TO_ADDR
// for i = 1 to normalCounter do
24511: LD_ADDR_VAR 0 8
24515: PUSH
24516: DOUBLE
24517: LD_INT 1
24519: DEC
24520: ST_TO_ADDR
24521: LD_EXP 66
24525: PUSH
24526: FOR_TO
24527: IFFALSE 24628
// begin tmp := 0 ;
24529: LD_ADDR_VAR 0 3
24533: PUSH
24534: LD_STRING 0
24536: ST_TO_ADDR
// if result [ 1 ] then
24537: LD_VAR 0 2
24541: PUSH
24542: LD_INT 1
24544: ARRAY
24545: IFFALSE 24610
// if result [ 1 ] [ 1 ] = i then
24547: LD_VAR 0 2
24551: PUSH
24552: LD_INT 1
24554: ARRAY
24555: PUSH
24556: LD_INT 1
24558: ARRAY
24559: PUSH
24560: LD_VAR 0 8
24564: EQUAL
24565: IFFALSE 24610
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24567: LD_ADDR_VAR 0 2
24571: PUSH
24572: LD_VAR 0 2
24576: PPUSH
24577: LD_INT 1
24579: PPUSH
24580: LD_VAR 0 2
24584: PUSH
24585: LD_INT 1
24587: ARRAY
24588: PPUSH
24589: LD_INT 1
24591: PPUSH
24592: CALL_OW 3
24596: PPUSH
24597: CALL_OW 1
24601: ST_TO_ADDR
// tmp := 1 ;
24602: LD_ADDR_VAR 0 3
24606: PUSH
24607: LD_STRING 1
24609: ST_TO_ADDR
// end ; normal := normal & tmp ;
24610: LD_ADDR_VAR 0 5
24614: PUSH
24615: LD_VAR 0 5
24619: PUSH
24620: LD_VAR 0 3
24624: STR
24625: ST_TO_ADDR
// end ;
24626: GO 24526
24628: POP
24629: POP
// for i = 1 to hardcoreCounter do
24630: LD_ADDR_VAR 0 8
24634: PUSH
24635: DOUBLE
24636: LD_INT 1
24638: DEC
24639: ST_TO_ADDR
24640: LD_EXP 67
24644: PUSH
24645: FOR_TO
24646: IFFALSE 24751
// begin tmp := 0 ;
24648: LD_ADDR_VAR 0 3
24652: PUSH
24653: LD_STRING 0
24655: ST_TO_ADDR
// if result [ 2 ] then
24656: LD_VAR 0 2
24660: PUSH
24661: LD_INT 2
24663: ARRAY
24664: IFFALSE 24733
// if result [ 2 ] [ 1 ] = 100 + i then
24666: LD_VAR 0 2
24670: PUSH
24671: LD_INT 2
24673: ARRAY
24674: PUSH
24675: LD_INT 1
24677: ARRAY
24678: PUSH
24679: LD_INT 100
24681: PUSH
24682: LD_VAR 0 8
24686: PLUS
24687: EQUAL
24688: IFFALSE 24733
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24690: LD_ADDR_VAR 0 2
24694: PUSH
24695: LD_VAR 0 2
24699: PPUSH
24700: LD_INT 2
24702: PPUSH
24703: LD_VAR 0 2
24707: PUSH
24708: LD_INT 2
24710: ARRAY
24711: PPUSH
24712: LD_INT 1
24714: PPUSH
24715: CALL_OW 3
24719: PPUSH
24720: CALL_OW 1
24724: ST_TO_ADDR
// tmp := 1 ;
24725: LD_ADDR_VAR 0 3
24729: PUSH
24730: LD_STRING 1
24732: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24733: LD_ADDR_VAR 0 6
24737: PUSH
24738: LD_VAR 0 6
24742: PUSH
24743: LD_VAR 0 3
24747: STR
24748: ST_TO_ADDR
// end ;
24749: GO 24645
24751: POP
24752: POP
// if isGameLoad then
24753: LD_VAR 0 1
24757: IFFALSE 25232
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24759: LD_ADDR_VAR 0 4
24763: PUSH
24764: LD_EXP 70
24768: PUSH
24769: LD_EXP 69
24773: PUSH
24774: LD_EXP 71
24778: PUSH
24779: LD_EXP 68
24783: PUSH
24784: LD_EXP 72
24788: PUSH
24789: LD_EXP 73
24793: PUSH
24794: LD_EXP 74
24798: PUSH
24799: LD_EXP 75
24803: PUSH
24804: LD_EXP 76
24808: PUSH
24809: LD_EXP 77
24813: PUSH
24814: LD_EXP 78
24818: PUSH
24819: LD_EXP 79
24823: PUSH
24824: LD_EXP 80
24828: PUSH
24829: LD_EXP 81
24833: PUSH
24834: LD_EXP 89
24838: PUSH
24839: LD_EXP 90
24843: PUSH
24844: LD_EXP 91
24848: PUSH
24849: LD_EXP 92
24853: PUSH
24854: LD_EXP 94
24858: PUSH
24859: LD_EXP 95
24863: PUSH
24864: LD_EXP 96
24868: PUSH
24869: LD_EXP 99
24873: PUSH
24874: LD_EXP 101
24878: PUSH
24879: LD_EXP 102
24883: PUSH
24884: LD_EXP 103
24888: PUSH
24889: LD_EXP 105
24893: PUSH
24894: LD_EXP 106
24898: PUSH
24899: LD_EXP 109
24903: PUSH
24904: LD_EXP 110
24908: PUSH
24909: LD_EXP 111
24913: PUSH
24914: LD_EXP 112
24918: PUSH
24919: LD_EXP 113
24923: PUSH
24924: LD_EXP 114
24928: PUSH
24929: LD_EXP 115
24933: PUSH
24934: LD_EXP 116
24938: PUSH
24939: LD_EXP 117
24943: PUSH
24944: LD_EXP 82
24948: PUSH
24949: LD_EXP 83
24953: PUSH
24954: LD_EXP 86
24958: PUSH
24959: LD_EXP 87
24963: PUSH
24964: LD_EXP 88
24968: PUSH
24969: LD_EXP 84
24973: PUSH
24974: LD_EXP 85
24978: PUSH
24979: LD_EXP 93
24983: PUSH
24984: LD_EXP 97
24988: PUSH
24989: LD_EXP 98
24993: PUSH
24994: LD_EXP 100
24998: PUSH
24999: LD_EXP 104
25003: PUSH
25004: LD_EXP 107
25008: PUSH
25009: LD_EXP 108
25013: PUSH
25014: LD_EXP 118
25018: PUSH
25019: LD_EXP 119
25023: PUSH
25024: LD_EXP 120
25028: PUSH
25029: LD_EXP 121
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: LIST
25038: LIST
25039: LIST
25040: LIST
25041: LIST
25042: LIST
25043: LIST
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: LIST
25050: LIST
25051: LIST
25052: LIST
25053: LIST
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: LIST
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: LIST
25065: LIST
25066: LIST
25067: LIST
25068: LIST
25069: LIST
25070: LIST
25071: LIST
25072: LIST
25073: LIST
25074: LIST
25075: LIST
25076: LIST
25077: LIST
25078: LIST
25079: LIST
25080: LIST
25081: LIST
25082: LIST
25083: LIST
25084: LIST
25085: LIST
25086: LIST
25087: LIST
25088: LIST
25089: ST_TO_ADDR
// tmp :=  ;
25090: LD_ADDR_VAR 0 3
25094: PUSH
25095: LD_STRING 
25097: ST_TO_ADDR
// for i = 1 to normalCounter do
25098: LD_ADDR_VAR 0 8
25102: PUSH
25103: DOUBLE
25104: LD_INT 1
25106: DEC
25107: ST_TO_ADDR
25108: LD_EXP 66
25112: PUSH
25113: FOR_TO
25114: IFFALSE 25150
// begin if flags [ i ] then
25116: LD_VAR 0 4
25120: PUSH
25121: LD_VAR 0 8
25125: ARRAY
25126: IFFALSE 25148
// tmp := tmp & i & ; ;
25128: LD_ADDR_VAR 0 3
25132: PUSH
25133: LD_VAR 0 3
25137: PUSH
25138: LD_VAR 0 8
25142: STR
25143: PUSH
25144: LD_STRING ;
25146: STR
25147: ST_TO_ADDR
// end ;
25148: GO 25113
25150: POP
25151: POP
// for i = 1 to hardcoreCounter do
25152: LD_ADDR_VAR 0 8
25156: PUSH
25157: DOUBLE
25158: LD_INT 1
25160: DEC
25161: ST_TO_ADDR
25162: LD_EXP 67
25166: PUSH
25167: FOR_TO
25168: IFFALSE 25214
// begin if flags [ normalCounter + i ] then
25170: LD_VAR 0 4
25174: PUSH
25175: LD_EXP 66
25179: PUSH
25180: LD_VAR 0 8
25184: PLUS
25185: ARRAY
25186: IFFALSE 25212
// tmp := tmp & ( 100 + i ) & ; ;
25188: LD_ADDR_VAR 0 3
25192: PUSH
25193: LD_VAR 0 3
25197: PUSH
25198: LD_INT 100
25200: PUSH
25201: LD_VAR 0 8
25205: PLUS
25206: STR
25207: PUSH
25208: LD_STRING ;
25210: STR
25211: ST_TO_ADDR
// end ;
25212: GO 25167
25214: POP
25215: POP
// if tmp then
25216: LD_VAR 0 3
25220: IFFALSE 25232
// active := tmp ;
25222: LD_ADDR_VAR 0 7
25226: PUSH
25227: LD_VAR 0 3
25231: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25232: LD_STRING getStreamItemsFromMission("
25234: PUSH
25235: LD_VAR 0 5
25239: STR
25240: PUSH
25241: LD_STRING ","
25243: STR
25244: PUSH
25245: LD_VAR 0 6
25249: STR
25250: PUSH
25251: LD_STRING ","
25253: STR
25254: PUSH
25255: LD_VAR 0 7
25259: STR
25260: PUSH
25261: LD_STRING ")
25263: STR
25264: PPUSH
25265: CALL_OW 559
// end else
25269: GO 25278
// ToLua ( getStreamItemsFromMission("","","") ) ;
25271: LD_STRING getStreamItemsFromMission("","","")
25273: PPUSH
25274: CALL_OW 559
// end ;
25278: LD_VAR 0 2
25282: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25283: LD_EXP 65
25287: PUSH
25288: LD_EXP 70
25292: AND
25293: IFFALSE 25417
25295: GO 25297
25297: DISABLE
25298: LD_INT 0
25300: PPUSH
25301: PPUSH
// begin enable ;
25302: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25303: LD_ADDR_VAR 0 2
25307: PUSH
25308: LD_INT 22
25310: PUSH
25311: LD_OWVAR 2
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: PUSH
25320: LD_INT 2
25322: PUSH
25323: LD_INT 34
25325: PUSH
25326: LD_INT 7
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PUSH
25333: LD_INT 34
25335: PUSH
25336: LD_INT 45
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 34
25345: PUSH
25346: LD_INT 28
25348: PUSH
25349: EMPTY
25350: LIST
25351: LIST
25352: PUSH
25353: LD_INT 34
25355: PUSH
25356: LD_INT 47
25358: PUSH
25359: EMPTY
25360: LIST
25361: LIST
25362: PUSH
25363: EMPTY
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PPUSH
25374: CALL_OW 69
25378: ST_TO_ADDR
// if not tmp then
25379: LD_VAR 0 2
25383: NOT
25384: IFFALSE 25388
// exit ;
25386: GO 25417
// for i in tmp do
25388: LD_ADDR_VAR 0 1
25392: PUSH
25393: LD_VAR 0 2
25397: PUSH
25398: FOR_IN
25399: IFFALSE 25415
// begin SetLives ( i , 0 ) ;
25401: LD_VAR 0 1
25405: PPUSH
25406: LD_INT 0
25408: PPUSH
25409: CALL_OW 234
// end ;
25413: GO 25398
25415: POP
25416: POP
// end ;
25417: PPOPN 2
25419: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25420: LD_EXP 65
25424: PUSH
25425: LD_EXP 71
25429: AND
25430: IFFALSE 25514
25432: GO 25434
25434: DISABLE
25435: LD_INT 0
25437: PPUSH
25438: PPUSH
// begin enable ;
25439: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25440: LD_ADDR_VAR 0 2
25444: PUSH
25445: LD_INT 22
25447: PUSH
25448: LD_OWVAR 2
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: LD_INT 32
25459: PUSH
25460: LD_INT 3
25462: PUSH
25463: EMPTY
25464: LIST
25465: LIST
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PPUSH
25471: CALL_OW 69
25475: ST_TO_ADDR
// if not tmp then
25476: LD_VAR 0 2
25480: NOT
25481: IFFALSE 25485
// exit ;
25483: GO 25514
// for i in tmp do
25485: LD_ADDR_VAR 0 1
25489: PUSH
25490: LD_VAR 0 2
25494: PUSH
25495: FOR_IN
25496: IFFALSE 25512
// begin SetLives ( i , 0 ) ;
25498: LD_VAR 0 1
25502: PPUSH
25503: LD_INT 0
25505: PPUSH
25506: CALL_OW 234
// end ;
25510: GO 25495
25512: POP
25513: POP
// end ;
25514: PPOPN 2
25516: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25517: LD_EXP 65
25521: PUSH
25522: LD_EXP 68
25526: AND
25527: IFFALSE 25620
25529: GO 25531
25531: DISABLE
25532: LD_INT 0
25534: PPUSH
// begin enable ;
25535: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25536: LD_ADDR_VAR 0 1
25540: PUSH
25541: LD_INT 22
25543: PUSH
25544: LD_OWVAR 2
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: LD_INT 25
25558: PUSH
25559: LD_INT 5
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 25
25568: PUSH
25569: LD_INT 9
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 25
25578: PUSH
25579: LD_INT 8
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: PUSH
25592: EMPTY
25593: LIST
25594: LIST
25595: PPUSH
25596: CALL_OW 69
25600: PUSH
25601: FOR_IN
25602: IFFALSE 25618
// begin SetClass ( i , 1 ) ;
25604: LD_VAR 0 1
25608: PPUSH
25609: LD_INT 1
25611: PPUSH
25612: CALL_OW 336
// end ;
25616: GO 25601
25618: POP
25619: POP
// end ;
25620: PPOPN 1
25622: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25623: LD_EXP 65
25627: PUSH
25628: LD_EXP 69
25632: AND
25633: PUSH
25634: LD_OWVAR 65
25638: PUSH
25639: LD_INT 7
25641: LESS
25642: AND
25643: IFFALSE 25657
25645: GO 25647
25647: DISABLE
// begin enable ;
25648: ENABLE
// game_speed := 7 ;
25649: LD_ADDR_OWVAR 65
25653: PUSH
25654: LD_INT 7
25656: ST_TO_ADDR
// end ;
25657: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25658: LD_EXP 65
25662: PUSH
25663: LD_EXP 72
25667: AND
25668: IFFALSE 25870
25670: GO 25672
25672: DISABLE
25673: LD_INT 0
25675: PPUSH
25676: PPUSH
25677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25678: LD_ADDR_VAR 0 3
25682: PUSH
25683: LD_INT 81
25685: PUSH
25686: LD_OWVAR 2
25690: PUSH
25691: EMPTY
25692: LIST
25693: LIST
25694: PUSH
25695: LD_INT 21
25697: PUSH
25698: LD_INT 1
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: PUSH
25705: EMPTY
25706: LIST
25707: LIST
25708: PPUSH
25709: CALL_OW 69
25713: ST_TO_ADDR
// if not tmp then
25714: LD_VAR 0 3
25718: NOT
25719: IFFALSE 25723
// exit ;
25721: GO 25870
// if tmp > 5 then
25723: LD_VAR 0 3
25727: PUSH
25728: LD_INT 5
25730: GREATER
25731: IFFALSE 25743
// k := 5 else
25733: LD_ADDR_VAR 0 2
25737: PUSH
25738: LD_INT 5
25740: ST_TO_ADDR
25741: GO 25753
// k := tmp ;
25743: LD_ADDR_VAR 0 2
25747: PUSH
25748: LD_VAR 0 3
25752: ST_TO_ADDR
// for i := 1 to k do
25753: LD_ADDR_VAR 0 1
25757: PUSH
25758: DOUBLE
25759: LD_INT 1
25761: DEC
25762: ST_TO_ADDR
25763: LD_VAR 0 2
25767: PUSH
25768: FOR_TO
25769: IFFALSE 25868
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25771: LD_VAR 0 3
25775: PUSH
25776: LD_VAR 0 1
25780: ARRAY
25781: PPUSH
25782: LD_VAR 0 1
25786: PUSH
25787: LD_INT 4
25789: MOD
25790: PUSH
25791: LD_INT 1
25793: PLUS
25794: PPUSH
25795: CALL_OW 259
25799: PUSH
25800: LD_INT 10
25802: LESS
25803: IFFALSE 25866
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25805: LD_VAR 0 3
25809: PUSH
25810: LD_VAR 0 1
25814: ARRAY
25815: PPUSH
25816: LD_VAR 0 1
25820: PUSH
25821: LD_INT 4
25823: MOD
25824: PUSH
25825: LD_INT 1
25827: PLUS
25828: PPUSH
25829: LD_VAR 0 3
25833: PUSH
25834: LD_VAR 0 1
25838: ARRAY
25839: PPUSH
25840: LD_VAR 0 1
25844: PUSH
25845: LD_INT 4
25847: MOD
25848: PUSH
25849: LD_INT 1
25851: PLUS
25852: PPUSH
25853: CALL_OW 259
25857: PUSH
25858: LD_INT 1
25860: PLUS
25861: PPUSH
25862: CALL_OW 237
25866: GO 25768
25868: POP
25869: POP
// end ;
25870: PPOPN 3
25872: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25873: LD_EXP 65
25877: PUSH
25878: LD_EXP 73
25882: AND
25883: IFFALSE 25903
25885: GO 25887
25887: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25888: LD_INT 4
25890: PPUSH
25891: LD_OWVAR 2
25895: PPUSH
25896: LD_INT 0
25898: PPUSH
25899: CALL_OW 324
25903: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25904: LD_EXP 65
25908: PUSH
25909: LD_EXP 102
25913: AND
25914: IFFALSE 25934
25916: GO 25918
25918: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25919: LD_INT 19
25921: PPUSH
25922: LD_OWVAR 2
25926: PPUSH
25927: LD_INT 0
25929: PPUSH
25930: CALL_OW 324
25934: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25935: LD_EXP 65
25939: PUSH
25940: LD_EXP 74
25944: AND
25945: IFFALSE 26047
25947: GO 25949
25949: DISABLE
25950: LD_INT 0
25952: PPUSH
25953: PPUSH
// begin enable ;
25954: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25955: LD_ADDR_VAR 0 2
25959: PUSH
25960: LD_INT 22
25962: PUSH
25963: LD_OWVAR 2
25967: PUSH
25968: EMPTY
25969: LIST
25970: LIST
25971: PUSH
25972: LD_INT 2
25974: PUSH
25975: LD_INT 34
25977: PUSH
25978: LD_INT 11
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 34
25987: PUSH
25988: LD_INT 30
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: LIST
25999: PUSH
26000: EMPTY
26001: LIST
26002: LIST
26003: PPUSH
26004: CALL_OW 69
26008: ST_TO_ADDR
// if not tmp then
26009: LD_VAR 0 2
26013: NOT
26014: IFFALSE 26018
// exit ;
26016: GO 26047
// for i in tmp do
26018: LD_ADDR_VAR 0 1
26022: PUSH
26023: LD_VAR 0 2
26027: PUSH
26028: FOR_IN
26029: IFFALSE 26045
// begin SetLives ( i , 0 ) ;
26031: LD_VAR 0 1
26035: PPUSH
26036: LD_INT 0
26038: PPUSH
26039: CALL_OW 234
// end ;
26043: GO 26028
26045: POP
26046: POP
// end ;
26047: PPOPN 2
26049: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26050: LD_EXP 65
26054: PUSH
26055: LD_EXP 75
26059: AND
26060: IFFALSE 26080
26062: GO 26064
26064: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26065: LD_INT 32
26067: PPUSH
26068: LD_OWVAR 2
26072: PPUSH
26073: LD_INT 0
26075: PPUSH
26076: CALL_OW 324
26080: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26081: LD_EXP 65
26085: PUSH
26086: LD_EXP 76
26090: AND
26091: IFFALSE 26272
26093: GO 26095
26095: DISABLE
26096: LD_INT 0
26098: PPUSH
26099: PPUSH
26100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26101: LD_ADDR_VAR 0 2
26105: PUSH
26106: LD_INT 22
26108: PUSH
26109: LD_OWVAR 2
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 33
26120: PUSH
26121: LD_INT 3
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PPUSH
26132: CALL_OW 69
26136: ST_TO_ADDR
// if not tmp then
26137: LD_VAR 0 2
26141: NOT
26142: IFFALSE 26146
// exit ;
26144: GO 26272
// side := 0 ;
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_INT 0
26153: ST_TO_ADDR
// for i := 1 to 8 do
26154: LD_ADDR_VAR 0 1
26158: PUSH
26159: DOUBLE
26160: LD_INT 1
26162: DEC
26163: ST_TO_ADDR
26164: LD_INT 8
26166: PUSH
26167: FOR_TO
26168: IFFALSE 26216
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26170: LD_OWVAR 2
26174: PUSH
26175: LD_VAR 0 1
26179: NONEQUAL
26180: PUSH
26181: LD_OWVAR 2
26185: PPUSH
26186: LD_VAR 0 1
26190: PPUSH
26191: CALL_OW 81
26195: PUSH
26196: LD_INT 2
26198: EQUAL
26199: AND
26200: IFFALSE 26214
// begin side := i ;
26202: LD_ADDR_VAR 0 3
26206: PUSH
26207: LD_VAR 0 1
26211: ST_TO_ADDR
// break ;
26212: GO 26216
// end ;
26214: GO 26167
26216: POP
26217: POP
// if not side then
26218: LD_VAR 0 3
26222: NOT
26223: IFFALSE 26227
// exit ;
26225: GO 26272
// for i := 1 to tmp do
26227: LD_ADDR_VAR 0 1
26231: PUSH
26232: DOUBLE
26233: LD_INT 1
26235: DEC
26236: ST_TO_ADDR
26237: LD_VAR 0 2
26241: PUSH
26242: FOR_TO
26243: IFFALSE 26270
// if Prob ( 60 ) then
26245: LD_INT 60
26247: PPUSH
26248: CALL_OW 13
26252: IFFALSE 26268
// SetSide ( i , side ) ;
26254: LD_VAR 0 1
26258: PPUSH
26259: LD_VAR 0 3
26263: PPUSH
26264: CALL_OW 235
26268: GO 26242
26270: POP
26271: POP
// end ;
26272: PPOPN 3
26274: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26275: LD_EXP 65
26279: PUSH
26280: LD_EXP 78
26284: AND
26285: IFFALSE 26404
26287: GO 26289
26289: DISABLE
26290: LD_INT 0
26292: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26293: LD_ADDR_VAR 0 1
26297: PUSH
26298: LD_INT 22
26300: PUSH
26301: LD_OWVAR 2
26305: PUSH
26306: EMPTY
26307: LIST
26308: LIST
26309: PUSH
26310: LD_INT 21
26312: PUSH
26313: LD_INT 1
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 3
26322: PUSH
26323: LD_INT 23
26325: PUSH
26326: LD_INT 0
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: EMPTY
26338: LIST
26339: LIST
26340: LIST
26341: PPUSH
26342: CALL_OW 69
26346: PUSH
26347: FOR_IN
26348: IFFALSE 26402
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26350: LD_VAR 0 1
26354: PPUSH
26355: CALL_OW 257
26359: PUSH
26360: LD_INT 1
26362: PUSH
26363: LD_INT 2
26365: PUSH
26366: LD_INT 3
26368: PUSH
26369: LD_INT 4
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: IN
26378: IFFALSE 26400
// SetClass ( un , rand ( 1 , 4 ) ) ;
26380: LD_VAR 0 1
26384: PPUSH
26385: LD_INT 1
26387: PPUSH
26388: LD_INT 4
26390: PPUSH
26391: CALL_OW 12
26395: PPUSH
26396: CALL_OW 336
26400: GO 26347
26402: POP
26403: POP
// end ;
26404: PPOPN 1
26406: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26407: LD_EXP 65
26411: PUSH
26412: LD_EXP 77
26416: AND
26417: IFFALSE 26496
26419: GO 26421
26421: DISABLE
26422: LD_INT 0
26424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26425: LD_ADDR_VAR 0 1
26429: PUSH
26430: LD_INT 22
26432: PUSH
26433: LD_OWVAR 2
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 21
26444: PUSH
26445: LD_INT 3
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PPUSH
26456: CALL_OW 69
26460: ST_TO_ADDR
// if not tmp then
26461: LD_VAR 0 1
26465: NOT
26466: IFFALSE 26470
// exit ;
26468: GO 26496
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26470: LD_VAR 0 1
26474: PUSH
26475: LD_INT 1
26477: PPUSH
26478: LD_VAR 0 1
26482: PPUSH
26483: CALL_OW 12
26487: ARRAY
26488: PPUSH
26489: LD_INT 100
26491: PPUSH
26492: CALL_OW 234
// end ;
26496: PPOPN 1
26498: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26499: LD_EXP 65
26503: PUSH
26504: LD_EXP 79
26508: AND
26509: IFFALSE 26607
26511: GO 26513
26513: DISABLE
26514: LD_INT 0
26516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26517: LD_ADDR_VAR 0 1
26521: PUSH
26522: LD_INT 22
26524: PUSH
26525: LD_OWVAR 2
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: PUSH
26534: LD_INT 21
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: PPUSH
26548: CALL_OW 69
26552: ST_TO_ADDR
// if not tmp then
26553: LD_VAR 0 1
26557: NOT
26558: IFFALSE 26562
// exit ;
26560: GO 26607
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26562: LD_VAR 0 1
26566: PUSH
26567: LD_INT 1
26569: PPUSH
26570: LD_VAR 0 1
26574: PPUSH
26575: CALL_OW 12
26579: ARRAY
26580: PPUSH
26581: LD_INT 1
26583: PPUSH
26584: LD_INT 4
26586: PPUSH
26587: CALL_OW 12
26591: PPUSH
26592: LD_INT 3000
26594: PPUSH
26595: LD_INT 9000
26597: PPUSH
26598: CALL_OW 12
26602: PPUSH
26603: CALL_OW 492
// end ;
26607: PPOPN 1
26609: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26610: LD_EXP 65
26614: PUSH
26615: LD_EXP 80
26619: AND
26620: IFFALSE 26640
26622: GO 26624
26624: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26625: LD_INT 1
26627: PPUSH
26628: LD_OWVAR 2
26632: PPUSH
26633: LD_INT 0
26635: PPUSH
26636: CALL_OW 324
26640: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26641: LD_EXP 65
26645: PUSH
26646: LD_EXP 81
26650: AND
26651: IFFALSE 26734
26653: GO 26655
26655: DISABLE
26656: LD_INT 0
26658: PPUSH
26659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26660: LD_ADDR_VAR 0 2
26664: PUSH
26665: LD_INT 22
26667: PUSH
26668: LD_OWVAR 2
26672: PUSH
26673: EMPTY
26674: LIST
26675: LIST
26676: PUSH
26677: LD_INT 21
26679: PUSH
26680: LD_INT 3
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: PUSH
26687: EMPTY
26688: LIST
26689: LIST
26690: PPUSH
26691: CALL_OW 69
26695: ST_TO_ADDR
// if not tmp then
26696: LD_VAR 0 2
26700: NOT
26701: IFFALSE 26705
// exit ;
26703: GO 26734
// for i in tmp do
26705: LD_ADDR_VAR 0 1
26709: PUSH
26710: LD_VAR 0 2
26714: PUSH
26715: FOR_IN
26716: IFFALSE 26732
// SetBLevel ( i , 10 ) ;
26718: LD_VAR 0 1
26722: PPUSH
26723: LD_INT 10
26725: PPUSH
26726: CALL_OW 241
26730: GO 26715
26732: POP
26733: POP
// end ;
26734: PPOPN 2
26736: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26737: LD_EXP 65
26741: PUSH
26742: LD_EXP 82
26746: AND
26747: IFFALSE 26858
26749: GO 26751
26751: DISABLE
26752: LD_INT 0
26754: PPUSH
26755: PPUSH
26756: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26757: LD_ADDR_VAR 0 3
26761: PUSH
26762: LD_INT 22
26764: PUSH
26765: LD_OWVAR 2
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: PUSH
26774: LD_INT 25
26776: PUSH
26777: LD_INT 1
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: EMPTY
26785: LIST
26786: LIST
26787: PPUSH
26788: CALL_OW 69
26792: ST_TO_ADDR
// if not tmp then
26793: LD_VAR 0 3
26797: NOT
26798: IFFALSE 26802
// exit ;
26800: GO 26858
// un := tmp [ rand ( 1 , tmp ) ] ;
26802: LD_ADDR_VAR 0 2
26806: PUSH
26807: LD_VAR 0 3
26811: PUSH
26812: LD_INT 1
26814: PPUSH
26815: LD_VAR 0 3
26819: PPUSH
26820: CALL_OW 12
26824: ARRAY
26825: ST_TO_ADDR
// if Crawls ( un ) then
26826: LD_VAR 0 2
26830: PPUSH
26831: CALL_OW 318
26835: IFFALSE 26846
// ComWalk ( un ) ;
26837: LD_VAR 0 2
26841: PPUSH
26842: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26846: LD_VAR 0 2
26850: PPUSH
26851: LD_INT 5
26853: PPUSH
26854: CALL_OW 336
// end ;
26858: PPOPN 3
26860: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26861: LD_EXP 65
26865: PUSH
26866: LD_EXP 83
26870: AND
26871: PUSH
26872: LD_OWVAR 67
26876: PUSH
26877: LD_INT 4
26879: LESS
26880: AND
26881: IFFALSE 26900
26883: GO 26885
26885: DISABLE
// begin Difficulty := Difficulty + 1 ;
26886: LD_ADDR_OWVAR 67
26890: PUSH
26891: LD_OWVAR 67
26895: PUSH
26896: LD_INT 1
26898: PLUS
26899: ST_TO_ADDR
// end ;
26900: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26901: LD_EXP 65
26905: PUSH
26906: LD_EXP 84
26910: AND
26911: IFFALSE 27014
26913: GO 26915
26915: DISABLE
26916: LD_INT 0
26918: PPUSH
// begin for i := 1 to 5 do
26919: LD_ADDR_VAR 0 1
26923: PUSH
26924: DOUBLE
26925: LD_INT 1
26927: DEC
26928: ST_TO_ADDR
26929: LD_INT 5
26931: PUSH
26932: FOR_TO
26933: IFFALSE 27012
// begin uc_nation := nation_nature ;
26935: LD_ADDR_OWVAR 21
26939: PUSH
26940: LD_INT 0
26942: ST_TO_ADDR
// uc_side := 0 ;
26943: LD_ADDR_OWVAR 20
26947: PUSH
26948: LD_INT 0
26950: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26951: LD_ADDR_OWVAR 29
26955: PUSH
26956: LD_INT 12
26958: PUSH
26959: LD_INT 12
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: ST_TO_ADDR
// hc_agressivity := 20 ;
26966: LD_ADDR_OWVAR 35
26970: PUSH
26971: LD_INT 20
26973: ST_TO_ADDR
// hc_class := class_tiger ;
26974: LD_ADDR_OWVAR 28
26978: PUSH
26979: LD_INT 14
26981: ST_TO_ADDR
// hc_gallery :=  ;
26982: LD_ADDR_OWVAR 33
26986: PUSH
26987: LD_STRING 
26989: ST_TO_ADDR
// hc_name :=  ;
26990: LD_ADDR_OWVAR 26
26994: PUSH
26995: LD_STRING 
26997: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26998: CALL_OW 44
27002: PPUSH
27003: LD_INT 0
27005: PPUSH
27006: CALL_OW 51
// end ;
27010: GO 26932
27012: POP
27013: POP
// end ;
27014: PPOPN 1
27016: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27017: LD_EXP 65
27021: PUSH
27022: LD_EXP 85
27026: AND
27027: IFFALSE 27036
27029: GO 27031
27031: DISABLE
// StreamSibBomb ;
27032: CALL 27037 0 0
27036: END
// export function StreamSibBomb ; var i , x , y ; begin
27037: LD_INT 0
27039: PPUSH
27040: PPUSH
27041: PPUSH
27042: PPUSH
// result := false ;
27043: LD_ADDR_VAR 0 1
27047: PUSH
27048: LD_INT 0
27050: ST_TO_ADDR
// for i := 1 to 16 do
27051: LD_ADDR_VAR 0 2
27055: PUSH
27056: DOUBLE
27057: LD_INT 1
27059: DEC
27060: ST_TO_ADDR
27061: LD_INT 16
27063: PUSH
27064: FOR_TO
27065: IFFALSE 27264
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27067: LD_ADDR_VAR 0 3
27071: PUSH
27072: LD_INT 10
27074: PUSH
27075: LD_INT 20
27077: PUSH
27078: LD_INT 30
27080: PUSH
27081: LD_INT 40
27083: PUSH
27084: LD_INT 50
27086: PUSH
27087: LD_INT 60
27089: PUSH
27090: LD_INT 70
27092: PUSH
27093: LD_INT 80
27095: PUSH
27096: LD_INT 90
27098: PUSH
27099: LD_INT 100
27101: PUSH
27102: LD_INT 110
27104: PUSH
27105: LD_INT 120
27107: PUSH
27108: LD_INT 130
27110: PUSH
27111: LD_INT 140
27113: PUSH
27114: LD_INT 150
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: PUSH
27134: LD_INT 1
27136: PPUSH
27137: LD_INT 15
27139: PPUSH
27140: CALL_OW 12
27144: ARRAY
27145: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27146: LD_ADDR_VAR 0 4
27150: PUSH
27151: LD_INT 10
27153: PUSH
27154: LD_INT 20
27156: PUSH
27157: LD_INT 30
27159: PUSH
27160: LD_INT 40
27162: PUSH
27163: LD_INT 50
27165: PUSH
27166: LD_INT 60
27168: PUSH
27169: LD_INT 70
27171: PUSH
27172: LD_INT 80
27174: PUSH
27175: LD_INT 90
27177: PUSH
27178: LD_INT 100
27180: PUSH
27181: LD_INT 110
27183: PUSH
27184: LD_INT 120
27186: PUSH
27187: LD_INT 130
27189: PUSH
27190: LD_INT 140
27192: PUSH
27193: LD_INT 150
27195: PUSH
27196: EMPTY
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 1
27215: PPUSH
27216: LD_INT 15
27218: PPUSH
27219: CALL_OW 12
27223: ARRAY
27224: ST_TO_ADDR
// if ValidHex ( x , y ) then
27225: LD_VAR 0 3
27229: PPUSH
27230: LD_VAR 0 4
27234: PPUSH
27235: CALL_OW 488
27239: IFFALSE 27262
// begin result := [ x , y ] ;
27241: LD_ADDR_VAR 0 1
27245: PUSH
27246: LD_VAR 0 3
27250: PUSH
27251: LD_VAR 0 4
27255: PUSH
27256: EMPTY
27257: LIST
27258: LIST
27259: ST_TO_ADDR
// break ;
27260: GO 27264
// end ; end ;
27262: GO 27064
27264: POP
27265: POP
// if result then
27266: LD_VAR 0 1
27270: IFFALSE 27330
// begin ToLua ( playSibBomb() ) ;
27272: LD_STRING playSibBomb()
27274: PPUSH
27275: CALL_OW 559
// wait ( 0 0$14 ) ;
27279: LD_INT 490
27281: PPUSH
27282: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27286: LD_VAR 0 1
27290: PUSH
27291: LD_INT 1
27293: ARRAY
27294: PPUSH
27295: LD_VAR 0 1
27299: PUSH
27300: LD_INT 2
27302: ARRAY
27303: PPUSH
27304: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27308: LD_VAR 0 1
27312: PUSH
27313: LD_INT 1
27315: ARRAY
27316: PPUSH
27317: LD_VAR 0 1
27321: PUSH
27322: LD_INT 2
27324: ARRAY
27325: PPUSH
27326: CALL_OW 429
// end ; end ;
27330: LD_VAR 0 1
27334: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27335: LD_EXP 65
27339: PUSH
27340: LD_EXP 87
27344: AND
27345: IFFALSE 27357
27347: GO 27349
27349: DISABLE
// YouLost (  ) ;
27350: LD_STRING 
27352: PPUSH
27353: CALL_OW 104
27357: END
// every 0 0$1 trigger StreamModeActive and sFog do
27358: LD_EXP 65
27362: PUSH
27363: LD_EXP 86
27367: AND
27368: IFFALSE 27382
27370: GO 27372
27372: DISABLE
// FogOff ( your_side ) ;
27373: LD_OWVAR 2
27377: PPUSH
27378: CALL_OW 344
27382: END
// every 0 0$1 trigger StreamModeActive and sSun do
27383: LD_EXP 65
27387: PUSH
27388: LD_EXP 88
27392: AND
27393: IFFALSE 27421
27395: GO 27397
27397: DISABLE
// begin solar_recharge_percent := 0 ;
27398: LD_ADDR_OWVAR 79
27402: PUSH
27403: LD_INT 0
27405: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27406: LD_INT 10500
27408: PPUSH
27409: CALL_OW 67
// solar_recharge_percent := 100 ;
27413: LD_ADDR_OWVAR 79
27417: PUSH
27418: LD_INT 100
27420: ST_TO_ADDR
// end ;
27421: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27422: LD_EXP 65
27426: PUSH
27427: LD_EXP 89
27431: AND
27432: IFFALSE 27671
27434: GO 27436
27436: DISABLE
27437: LD_INT 0
27439: PPUSH
27440: PPUSH
27441: PPUSH
// begin tmp := [ ] ;
27442: LD_ADDR_VAR 0 3
27446: PUSH
27447: EMPTY
27448: ST_TO_ADDR
// for i := 1 to 6 do
27449: LD_ADDR_VAR 0 1
27453: PUSH
27454: DOUBLE
27455: LD_INT 1
27457: DEC
27458: ST_TO_ADDR
27459: LD_INT 6
27461: PUSH
27462: FOR_TO
27463: IFFALSE 27568
// begin uc_nation := nation_nature ;
27465: LD_ADDR_OWVAR 21
27469: PUSH
27470: LD_INT 0
27472: ST_TO_ADDR
// uc_side := 0 ;
27473: LD_ADDR_OWVAR 20
27477: PUSH
27478: LD_INT 0
27480: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27481: LD_ADDR_OWVAR 29
27485: PUSH
27486: LD_INT 12
27488: PUSH
27489: LD_INT 12
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: ST_TO_ADDR
// hc_agressivity := 20 ;
27496: LD_ADDR_OWVAR 35
27500: PUSH
27501: LD_INT 20
27503: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27504: LD_ADDR_OWVAR 28
27508: PUSH
27509: LD_INT 17
27511: ST_TO_ADDR
// hc_gallery :=  ;
27512: LD_ADDR_OWVAR 33
27516: PUSH
27517: LD_STRING 
27519: ST_TO_ADDR
// hc_name :=  ;
27520: LD_ADDR_OWVAR 26
27524: PUSH
27525: LD_STRING 
27527: ST_TO_ADDR
// un := CreateHuman ;
27528: LD_ADDR_VAR 0 2
27532: PUSH
27533: CALL_OW 44
27537: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27538: LD_VAR 0 2
27542: PPUSH
27543: LD_INT 1
27545: PPUSH
27546: CALL_OW 51
// tmp := tmp ^ un ;
27550: LD_ADDR_VAR 0 3
27554: PUSH
27555: LD_VAR 0 3
27559: PUSH
27560: LD_VAR 0 2
27564: ADD
27565: ST_TO_ADDR
// end ;
27566: GO 27462
27568: POP
27569: POP
// repeat wait ( 0 0$1 ) ;
27570: LD_INT 35
27572: PPUSH
27573: CALL_OW 67
// for un in tmp do
27577: LD_ADDR_VAR 0 2
27581: PUSH
27582: LD_VAR 0 3
27586: PUSH
27587: FOR_IN
27588: IFFALSE 27662
// begin if IsDead ( un ) then
27590: LD_VAR 0 2
27594: PPUSH
27595: CALL_OW 301
27599: IFFALSE 27619
// begin tmp := tmp diff un ;
27601: LD_ADDR_VAR 0 3
27605: PUSH
27606: LD_VAR 0 3
27610: PUSH
27611: LD_VAR 0 2
27615: DIFF
27616: ST_TO_ADDR
// continue ;
27617: GO 27587
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27619: LD_VAR 0 2
27623: PPUSH
27624: LD_INT 3
27626: PUSH
27627: LD_INT 22
27629: PUSH
27630: LD_INT 0
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PPUSH
27641: CALL_OW 69
27645: PPUSH
27646: LD_VAR 0 2
27650: PPUSH
27651: CALL_OW 74
27655: PPUSH
27656: CALL_OW 115
// end ;
27660: GO 27587
27662: POP
27663: POP
// until not tmp ;
27664: LD_VAR 0 3
27668: NOT
27669: IFFALSE 27570
// end ;
27671: PPOPN 3
27673: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27674: LD_EXP 65
27678: PUSH
27679: LD_EXP 90
27683: AND
27684: IFFALSE 27738
27686: GO 27688
27688: DISABLE
// begin ToLua ( displayTroll(); ) ;
27689: LD_STRING displayTroll();
27691: PPUSH
27692: CALL_OW 559
// wait ( 3 3$00 ) ;
27696: LD_INT 6300
27698: PPUSH
27699: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27703: LD_STRING hideTroll();
27705: PPUSH
27706: CALL_OW 559
// wait ( 1 1$00 ) ;
27710: LD_INT 2100
27712: PPUSH
27713: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27717: LD_STRING displayTroll();
27719: PPUSH
27720: CALL_OW 559
// wait ( 1 1$00 ) ;
27724: LD_INT 2100
27726: PPUSH
27727: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27731: LD_STRING hideTroll();
27733: PPUSH
27734: CALL_OW 559
// end ;
27738: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27739: LD_EXP 65
27743: PUSH
27744: LD_EXP 91
27748: AND
27749: IFFALSE 27812
27751: GO 27753
27753: DISABLE
27754: LD_INT 0
27756: PPUSH
// begin p := 0 ;
27757: LD_ADDR_VAR 0 1
27761: PUSH
27762: LD_INT 0
27764: ST_TO_ADDR
// repeat game_speed := 1 ;
27765: LD_ADDR_OWVAR 65
27769: PUSH
27770: LD_INT 1
27772: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27773: LD_INT 35
27775: PPUSH
27776: CALL_OW 67
// p := p + 1 ;
27780: LD_ADDR_VAR 0 1
27784: PUSH
27785: LD_VAR 0 1
27789: PUSH
27790: LD_INT 1
27792: PLUS
27793: ST_TO_ADDR
// until p >= 60 ;
27794: LD_VAR 0 1
27798: PUSH
27799: LD_INT 60
27801: GREATEREQUAL
27802: IFFALSE 27765
// game_speed := 4 ;
27804: LD_ADDR_OWVAR 65
27808: PUSH
27809: LD_INT 4
27811: ST_TO_ADDR
// end ;
27812: PPOPN 1
27814: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27815: LD_EXP 65
27819: PUSH
27820: LD_EXP 92
27824: AND
27825: IFFALSE 27971
27827: GO 27829
27829: DISABLE
27830: LD_INT 0
27832: PPUSH
27833: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27834: LD_ADDR_VAR 0 1
27838: PUSH
27839: LD_INT 22
27841: PUSH
27842: LD_OWVAR 2
27846: PUSH
27847: EMPTY
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 30
27856: PUSH
27857: LD_INT 0
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 30
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: LIST
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: PPUSH
27883: CALL_OW 69
27887: ST_TO_ADDR
// if not depot then
27888: LD_VAR 0 1
27892: NOT
27893: IFFALSE 27897
// exit ;
27895: GO 27971
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27897: LD_ADDR_VAR 0 2
27901: PUSH
27902: LD_VAR 0 1
27906: PUSH
27907: LD_INT 1
27909: PPUSH
27910: LD_VAR 0 1
27914: PPUSH
27915: CALL_OW 12
27919: ARRAY
27920: PPUSH
27921: CALL_OW 274
27925: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27926: LD_VAR 0 2
27930: PPUSH
27931: LD_INT 1
27933: PPUSH
27934: LD_INT 0
27936: PPUSH
27937: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27941: LD_VAR 0 2
27945: PPUSH
27946: LD_INT 2
27948: PPUSH
27949: LD_INT 0
27951: PPUSH
27952: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27956: LD_VAR 0 2
27960: PPUSH
27961: LD_INT 3
27963: PPUSH
27964: LD_INT 0
27966: PPUSH
27967: CALL_OW 277
// end ;
27971: PPOPN 2
27973: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27974: LD_EXP 65
27978: PUSH
27979: LD_EXP 93
27983: AND
27984: IFFALSE 28081
27986: GO 27988
27988: DISABLE
27989: LD_INT 0
27991: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27992: LD_ADDR_VAR 0 1
27996: PUSH
27997: LD_INT 22
27999: PUSH
28000: LD_OWVAR 2
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 21
28011: PUSH
28012: LD_INT 1
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: PUSH
28019: LD_INT 3
28021: PUSH
28022: LD_INT 23
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: LIST
28040: PPUSH
28041: CALL_OW 69
28045: ST_TO_ADDR
// if not tmp then
28046: LD_VAR 0 1
28050: NOT
28051: IFFALSE 28055
// exit ;
28053: GO 28081
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28055: LD_VAR 0 1
28059: PUSH
28060: LD_INT 1
28062: PPUSH
28063: LD_VAR 0 1
28067: PPUSH
28068: CALL_OW 12
28072: ARRAY
28073: PPUSH
28074: LD_INT 200
28076: PPUSH
28077: CALL_OW 234
// end ;
28081: PPOPN 1
28083: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28084: LD_EXP 65
28088: PUSH
28089: LD_EXP 94
28093: AND
28094: IFFALSE 28173
28096: GO 28098
28098: DISABLE
28099: LD_INT 0
28101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28102: LD_ADDR_VAR 0 1
28106: PUSH
28107: LD_INT 22
28109: PUSH
28110: LD_OWVAR 2
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 21
28121: PUSH
28122: LD_INT 2
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: EMPTY
28130: LIST
28131: LIST
28132: PPUSH
28133: CALL_OW 69
28137: ST_TO_ADDR
// if not tmp then
28138: LD_VAR 0 1
28142: NOT
28143: IFFALSE 28147
// exit ;
28145: GO 28173
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28147: LD_VAR 0 1
28151: PUSH
28152: LD_INT 1
28154: PPUSH
28155: LD_VAR 0 1
28159: PPUSH
28160: CALL_OW 12
28164: ARRAY
28165: PPUSH
28166: LD_INT 60
28168: PPUSH
28169: CALL_OW 234
// end ;
28173: PPOPN 1
28175: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28176: LD_EXP 65
28180: PUSH
28181: LD_EXP 95
28185: AND
28186: IFFALSE 28285
28188: GO 28190
28190: DISABLE
28191: LD_INT 0
28193: PPUSH
28194: PPUSH
// begin enable ;
28195: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28196: LD_ADDR_VAR 0 1
28200: PUSH
28201: LD_INT 22
28203: PUSH
28204: LD_OWVAR 2
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: PUSH
28213: LD_INT 61
28215: PUSH
28216: EMPTY
28217: LIST
28218: PUSH
28219: LD_INT 33
28221: PUSH
28222: LD_INT 2
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: LIST
28233: PPUSH
28234: CALL_OW 69
28238: ST_TO_ADDR
// if not tmp then
28239: LD_VAR 0 1
28243: NOT
28244: IFFALSE 28248
// exit ;
28246: GO 28285
// for i in tmp do
28248: LD_ADDR_VAR 0 2
28252: PUSH
28253: LD_VAR 0 1
28257: PUSH
28258: FOR_IN
28259: IFFALSE 28283
// if IsControledBy ( i ) then
28261: LD_VAR 0 2
28265: PPUSH
28266: CALL_OW 312
28270: IFFALSE 28281
// ComUnlink ( i ) ;
28272: LD_VAR 0 2
28276: PPUSH
28277: CALL_OW 136
28281: GO 28258
28283: POP
28284: POP
// end ;
28285: PPOPN 2
28287: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28288: LD_EXP 65
28292: PUSH
28293: LD_EXP 96
28297: AND
28298: IFFALSE 28438
28300: GO 28302
28302: DISABLE
28303: LD_INT 0
28305: PPUSH
28306: PPUSH
// begin ToLua ( displayPowell(); ) ;
28307: LD_STRING displayPowell();
28309: PPUSH
28310: CALL_OW 559
// uc_side := 0 ;
28314: LD_ADDR_OWVAR 20
28318: PUSH
28319: LD_INT 0
28321: ST_TO_ADDR
// uc_nation := 2 ;
28322: LD_ADDR_OWVAR 21
28326: PUSH
28327: LD_INT 2
28329: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28330: LD_ADDR_OWVAR 37
28334: PUSH
28335: LD_INT 14
28337: ST_TO_ADDR
// vc_engine := engine_siberite ;
28338: LD_ADDR_OWVAR 39
28342: PUSH
28343: LD_INT 3
28345: ST_TO_ADDR
// vc_control := control_apeman ;
28346: LD_ADDR_OWVAR 38
28350: PUSH
28351: LD_INT 5
28353: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28354: LD_ADDR_OWVAR 40
28358: PUSH
28359: LD_INT 29
28361: ST_TO_ADDR
// un := CreateVehicle ;
28362: LD_ADDR_VAR 0 2
28366: PUSH
28367: CALL_OW 45
28371: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28372: LD_VAR 0 2
28376: PPUSH
28377: LD_INT 1
28379: PPUSH
28380: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28384: LD_INT 35
28386: PPUSH
28387: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28391: LD_VAR 0 2
28395: PPUSH
28396: LD_INT 22
28398: PUSH
28399: LD_OWVAR 2
28403: PUSH
28404: EMPTY
28405: LIST
28406: LIST
28407: PPUSH
28408: CALL_OW 69
28412: PPUSH
28413: LD_VAR 0 2
28417: PPUSH
28418: CALL_OW 74
28422: PPUSH
28423: CALL_OW 115
// until IsDead ( un ) ;
28427: LD_VAR 0 2
28431: PPUSH
28432: CALL_OW 301
28436: IFFALSE 28384
// end ;
28438: PPOPN 2
28440: END
// every 0 0$1 trigger StreamModeActive and sStu do
28441: LD_EXP 65
28445: PUSH
28446: LD_EXP 104
28450: AND
28451: IFFALSE 28467
28453: GO 28455
28455: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28456: LD_STRING displayStucuk();
28458: PPUSH
28459: CALL_OW 559
// ResetFog ;
28463: CALL_OW 335
// end ;
28467: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28468: LD_EXP 65
28472: PUSH
28473: LD_EXP 97
28477: AND
28478: IFFALSE 28619
28480: GO 28482
28482: DISABLE
28483: LD_INT 0
28485: PPUSH
28486: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28487: LD_ADDR_VAR 0 2
28491: PUSH
28492: LD_INT 22
28494: PUSH
28495: LD_OWVAR 2
28499: PUSH
28500: EMPTY
28501: LIST
28502: LIST
28503: PUSH
28504: LD_INT 21
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PPUSH
28518: CALL_OW 69
28522: ST_TO_ADDR
// if not tmp then
28523: LD_VAR 0 2
28527: NOT
28528: IFFALSE 28532
// exit ;
28530: GO 28619
// un := tmp [ rand ( 1 , tmp ) ] ;
28532: LD_ADDR_VAR 0 1
28536: PUSH
28537: LD_VAR 0 2
28541: PUSH
28542: LD_INT 1
28544: PPUSH
28545: LD_VAR 0 2
28549: PPUSH
28550: CALL_OW 12
28554: ARRAY
28555: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28556: LD_VAR 0 1
28560: PPUSH
28561: LD_INT 0
28563: PPUSH
28564: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28568: LD_VAR 0 1
28572: PPUSH
28573: LD_OWVAR 3
28577: PUSH
28578: LD_VAR 0 1
28582: DIFF
28583: PPUSH
28584: LD_VAR 0 1
28588: PPUSH
28589: CALL_OW 74
28593: PPUSH
28594: CALL_OW 115
// wait ( 0 0$20 ) ;
28598: LD_INT 700
28600: PPUSH
28601: CALL_OW 67
// SetSide ( un , your_side ) ;
28605: LD_VAR 0 1
28609: PPUSH
28610: LD_OWVAR 2
28614: PPUSH
28615: CALL_OW 235
// end ;
28619: PPOPN 2
28621: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28622: LD_EXP 65
28626: PUSH
28627: LD_EXP 98
28631: AND
28632: IFFALSE 28738
28634: GO 28636
28636: DISABLE
28637: LD_INT 0
28639: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28640: LD_ADDR_VAR 0 1
28644: PUSH
28645: LD_INT 22
28647: PUSH
28648: LD_OWVAR 2
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: LD_INT 30
28662: PUSH
28663: LD_INT 0
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 30
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: EMPTY
28681: LIST
28682: LIST
28683: LIST
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PPUSH
28689: CALL_OW 69
28693: ST_TO_ADDR
// if not depot then
28694: LD_VAR 0 1
28698: NOT
28699: IFFALSE 28703
// exit ;
28701: GO 28738
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28703: LD_VAR 0 1
28707: PUSH
28708: LD_INT 1
28710: ARRAY
28711: PPUSH
28712: CALL_OW 250
28716: PPUSH
28717: LD_VAR 0 1
28721: PUSH
28722: LD_INT 1
28724: ARRAY
28725: PPUSH
28726: CALL_OW 251
28730: PPUSH
28731: LD_INT 70
28733: PPUSH
28734: CALL_OW 495
// end ;
28738: PPOPN 1
28740: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28741: LD_EXP 65
28745: PUSH
28746: LD_EXP 99
28750: AND
28751: IFFALSE 28962
28753: GO 28755
28755: DISABLE
28756: LD_INT 0
28758: PPUSH
28759: PPUSH
28760: PPUSH
28761: PPUSH
28762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28763: LD_ADDR_VAR 0 5
28767: PUSH
28768: LD_INT 22
28770: PUSH
28771: LD_OWVAR 2
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 21
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PPUSH
28794: CALL_OW 69
28798: ST_TO_ADDR
// if not tmp then
28799: LD_VAR 0 5
28803: NOT
28804: IFFALSE 28808
// exit ;
28806: GO 28962
// for i in tmp do
28808: LD_ADDR_VAR 0 1
28812: PUSH
28813: LD_VAR 0 5
28817: PUSH
28818: FOR_IN
28819: IFFALSE 28960
// begin d := rand ( 0 , 5 ) ;
28821: LD_ADDR_VAR 0 4
28825: PUSH
28826: LD_INT 0
28828: PPUSH
28829: LD_INT 5
28831: PPUSH
28832: CALL_OW 12
28836: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28837: LD_ADDR_VAR 0 2
28841: PUSH
28842: LD_VAR 0 1
28846: PPUSH
28847: CALL_OW 250
28851: PPUSH
28852: LD_VAR 0 4
28856: PPUSH
28857: LD_INT 3
28859: PPUSH
28860: LD_INT 12
28862: PPUSH
28863: CALL_OW 12
28867: PPUSH
28868: CALL_OW 272
28872: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28873: LD_ADDR_VAR 0 3
28877: PUSH
28878: LD_VAR 0 1
28882: PPUSH
28883: CALL_OW 251
28887: PPUSH
28888: LD_VAR 0 4
28892: PPUSH
28893: LD_INT 3
28895: PPUSH
28896: LD_INT 12
28898: PPUSH
28899: CALL_OW 12
28903: PPUSH
28904: CALL_OW 273
28908: ST_TO_ADDR
// if ValidHex ( x , y ) then
28909: LD_VAR 0 2
28913: PPUSH
28914: LD_VAR 0 3
28918: PPUSH
28919: CALL_OW 488
28923: IFFALSE 28958
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28925: LD_VAR 0 1
28929: PPUSH
28930: LD_VAR 0 2
28934: PPUSH
28935: LD_VAR 0 3
28939: PPUSH
28940: LD_INT 3
28942: PPUSH
28943: LD_INT 6
28945: PPUSH
28946: CALL_OW 12
28950: PPUSH
28951: LD_INT 1
28953: PPUSH
28954: CALL_OW 483
// end ;
28958: GO 28818
28960: POP
28961: POP
// end ;
28962: PPOPN 5
28964: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28965: LD_EXP 65
28969: PUSH
28970: LD_EXP 100
28974: AND
28975: IFFALSE 29069
28977: GO 28979
28979: DISABLE
28980: LD_INT 0
28982: PPUSH
28983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28984: LD_ADDR_VAR 0 2
28988: PUSH
28989: LD_INT 22
28991: PUSH
28992: LD_OWVAR 2
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 32
29003: PUSH
29004: LD_INT 1
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: PUSH
29011: LD_INT 21
29013: PUSH
29014: LD_INT 2
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: LIST
29025: PPUSH
29026: CALL_OW 69
29030: ST_TO_ADDR
// if not tmp then
29031: LD_VAR 0 2
29035: NOT
29036: IFFALSE 29040
// exit ;
29038: GO 29069
// for i in tmp do
29040: LD_ADDR_VAR 0 1
29044: PUSH
29045: LD_VAR 0 2
29049: PUSH
29050: FOR_IN
29051: IFFALSE 29067
// SetFuel ( i , 0 ) ;
29053: LD_VAR 0 1
29057: PPUSH
29058: LD_INT 0
29060: PPUSH
29061: CALL_OW 240
29065: GO 29050
29067: POP
29068: POP
// end ;
29069: PPOPN 2
29071: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29072: LD_EXP 65
29076: PUSH
29077: LD_EXP 101
29081: AND
29082: IFFALSE 29148
29084: GO 29086
29086: DISABLE
29087: LD_INT 0
29089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29090: LD_ADDR_VAR 0 1
29094: PUSH
29095: LD_INT 22
29097: PUSH
29098: LD_OWVAR 2
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 30
29109: PUSH
29110: LD_INT 29
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: EMPTY
29118: LIST
29119: LIST
29120: PPUSH
29121: CALL_OW 69
29125: ST_TO_ADDR
// if not tmp then
29126: LD_VAR 0 1
29130: NOT
29131: IFFALSE 29135
// exit ;
29133: GO 29148
// DestroyUnit ( tmp [ 1 ] ) ;
29135: LD_VAR 0 1
29139: PUSH
29140: LD_INT 1
29142: ARRAY
29143: PPUSH
29144: CALL_OW 65
// end ;
29148: PPOPN 1
29150: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29151: LD_EXP 65
29155: PUSH
29156: LD_EXP 103
29160: AND
29161: IFFALSE 29290
29163: GO 29165
29165: DISABLE
29166: LD_INT 0
29168: PPUSH
// begin uc_side := 0 ;
29169: LD_ADDR_OWVAR 20
29173: PUSH
29174: LD_INT 0
29176: ST_TO_ADDR
// uc_nation := nation_arabian ;
29177: LD_ADDR_OWVAR 21
29181: PUSH
29182: LD_INT 2
29184: ST_TO_ADDR
// hc_gallery :=  ;
29185: LD_ADDR_OWVAR 33
29189: PUSH
29190: LD_STRING 
29192: ST_TO_ADDR
// hc_name :=  ;
29193: LD_ADDR_OWVAR 26
29197: PUSH
29198: LD_STRING 
29200: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29201: LD_INT 1
29203: PPUSH
29204: LD_INT 11
29206: PPUSH
29207: LD_INT 10
29209: PPUSH
29210: CALL_OW 380
// un := CreateHuman ;
29214: LD_ADDR_VAR 0 1
29218: PUSH
29219: CALL_OW 44
29223: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29224: LD_VAR 0 1
29228: PPUSH
29229: LD_INT 1
29231: PPUSH
29232: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29236: LD_INT 35
29238: PPUSH
29239: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29243: LD_VAR 0 1
29247: PPUSH
29248: LD_INT 22
29250: PUSH
29251: LD_OWVAR 2
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: PPUSH
29260: CALL_OW 69
29264: PPUSH
29265: LD_VAR 0 1
29269: PPUSH
29270: CALL_OW 74
29274: PPUSH
29275: CALL_OW 115
// until IsDead ( un ) ;
29279: LD_VAR 0 1
29283: PPUSH
29284: CALL_OW 301
29288: IFFALSE 29236
// end ;
29290: PPOPN 1
29292: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29293: LD_EXP 65
29297: PUSH
29298: LD_EXP 105
29302: AND
29303: IFFALSE 29315
29305: GO 29307
29307: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29308: LD_STRING earthquake(getX(game), 0, 32)
29310: PPUSH
29311: CALL_OW 559
29315: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29316: LD_EXP 65
29320: PUSH
29321: LD_EXP 106
29325: AND
29326: IFFALSE 29417
29328: GO 29330
29330: DISABLE
29331: LD_INT 0
29333: PPUSH
// begin enable ;
29334: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29335: LD_ADDR_VAR 0 1
29339: PUSH
29340: LD_INT 22
29342: PUSH
29343: LD_OWVAR 2
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: LD_INT 21
29354: PUSH
29355: LD_INT 2
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 33
29364: PUSH
29365: LD_INT 3
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: LIST
29376: PPUSH
29377: CALL_OW 69
29381: ST_TO_ADDR
// if not tmp then
29382: LD_VAR 0 1
29386: NOT
29387: IFFALSE 29391
// exit ;
29389: GO 29417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29391: LD_VAR 0 1
29395: PUSH
29396: LD_INT 1
29398: PPUSH
29399: LD_VAR 0 1
29403: PPUSH
29404: CALL_OW 12
29408: ARRAY
29409: PPUSH
29410: LD_INT 1
29412: PPUSH
29413: CALL_OW 234
// end ;
29417: PPOPN 1
29419: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29420: LD_EXP 65
29424: PUSH
29425: LD_EXP 107
29429: AND
29430: IFFALSE 29571
29432: GO 29434
29434: DISABLE
29435: LD_INT 0
29437: PPUSH
29438: PPUSH
29439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29440: LD_ADDR_VAR 0 3
29444: PUSH
29445: LD_INT 22
29447: PUSH
29448: LD_OWVAR 2
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 25
29459: PUSH
29460: LD_INT 1
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PPUSH
29471: CALL_OW 69
29475: ST_TO_ADDR
// if not tmp then
29476: LD_VAR 0 3
29480: NOT
29481: IFFALSE 29485
// exit ;
29483: GO 29571
// un := tmp [ rand ( 1 , tmp ) ] ;
29485: LD_ADDR_VAR 0 2
29489: PUSH
29490: LD_VAR 0 3
29494: PUSH
29495: LD_INT 1
29497: PPUSH
29498: LD_VAR 0 3
29502: PPUSH
29503: CALL_OW 12
29507: ARRAY
29508: ST_TO_ADDR
// if Crawls ( un ) then
29509: LD_VAR 0 2
29513: PPUSH
29514: CALL_OW 318
29518: IFFALSE 29529
// ComWalk ( un ) ;
29520: LD_VAR 0 2
29524: PPUSH
29525: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29529: LD_VAR 0 2
29533: PPUSH
29534: LD_INT 9
29536: PPUSH
29537: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29541: LD_INT 28
29543: PPUSH
29544: LD_OWVAR 2
29548: PPUSH
29549: LD_INT 2
29551: PPUSH
29552: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29556: LD_INT 29
29558: PPUSH
29559: LD_OWVAR 2
29563: PPUSH
29564: LD_INT 2
29566: PPUSH
29567: CALL_OW 322
// end ;
29571: PPOPN 3
29573: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29574: LD_EXP 65
29578: PUSH
29579: LD_EXP 108
29583: AND
29584: IFFALSE 29695
29586: GO 29588
29588: DISABLE
29589: LD_INT 0
29591: PPUSH
29592: PPUSH
29593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29594: LD_ADDR_VAR 0 3
29598: PUSH
29599: LD_INT 22
29601: PUSH
29602: LD_OWVAR 2
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: PUSH
29611: LD_INT 25
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: EMPTY
29618: LIST
29619: LIST
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PPUSH
29625: CALL_OW 69
29629: ST_TO_ADDR
// if not tmp then
29630: LD_VAR 0 3
29634: NOT
29635: IFFALSE 29639
// exit ;
29637: GO 29695
// un := tmp [ rand ( 1 , tmp ) ] ;
29639: LD_ADDR_VAR 0 2
29643: PUSH
29644: LD_VAR 0 3
29648: PUSH
29649: LD_INT 1
29651: PPUSH
29652: LD_VAR 0 3
29656: PPUSH
29657: CALL_OW 12
29661: ARRAY
29662: ST_TO_ADDR
// if Crawls ( un ) then
29663: LD_VAR 0 2
29667: PPUSH
29668: CALL_OW 318
29672: IFFALSE 29683
// ComWalk ( un ) ;
29674: LD_VAR 0 2
29678: PPUSH
29679: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29683: LD_VAR 0 2
29687: PPUSH
29688: LD_INT 8
29690: PPUSH
29691: CALL_OW 336
// end ;
29695: PPOPN 3
29697: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29698: LD_EXP 65
29702: PUSH
29703: LD_EXP 109
29707: AND
29708: IFFALSE 29852
29710: GO 29712
29712: DISABLE
29713: LD_INT 0
29715: PPUSH
29716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29717: LD_ADDR_VAR 0 2
29721: PUSH
29722: LD_INT 22
29724: PUSH
29725: LD_OWVAR 2
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 21
29736: PUSH
29737: LD_INT 2
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: LD_INT 34
29749: PUSH
29750: LD_INT 12
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 34
29759: PUSH
29760: LD_INT 51
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 34
29769: PUSH
29770: LD_INT 32
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: LIST
29781: LIST
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: LIST
29787: PPUSH
29788: CALL_OW 69
29792: ST_TO_ADDR
// if not tmp then
29793: LD_VAR 0 2
29797: NOT
29798: IFFALSE 29802
// exit ;
29800: GO 29852
// for i in tmp do
29802: LD_ADDR_VAR 0 1
29806: PUSH
29807: LD_VAR 0 2
29811: PUSH
29812: FOR_IN
29813: IFFALSE 29850
// if GetCargo ( i , mat_artifact ) = 0 then
29815: LD_VAR 0 1
29819: PPUSH
29820: LD_INT 4
29822: PPUSH
29823: CALL_OW 289
29827: PUSH
29828: LD_INT 0
29830: EQUAL
29831: IFFALSE 29848
// SetCargo ( i , mat_siberit , 100 ) ;
29833: LD_VAR 0 1
29837: PPUSH
29838: LD_INT 3
29840: PPUSH
29841: LD_INT 100
29843: PPUSH
29844: CALL_OW 290
29848: GO 29812
29850: POP
29851: POP
// end ;
29852: PPOPN 2
29854: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29855: LD_EXP 65
29859: PUSH
29860: LD_EXP 110
29864: AND
29865: IFFALSE 30048
29867: GO 29869
29869: DISABLE
29870: LD_INT 0
29872: PPUSH
29873: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29874: LD_ADDR_VAR 0 2
29878: PUSH
29879: LD_INT 22
29881: PUSH
29882: LD_OWVAR 2
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PPUSH
29891: CALL_OW 69
29895: ST_TO_ADDR
// if not tmp then
29896: LD_VAR 0 2
29900: NOT
29901: IFFALSE 29905
// exit ;
29903: GO 30048
// for i := 1 to 2 do
29905: LD_ADDR_VAR 0 1
29909: PUSH
29910: DOUBLE
29911: LD_INT 1
29913: DEC
29914: ST_TO_ADDR
29915: LD_INT 2
29917: PUSH
29918: FOR_TO
29919: IFFALSE 30046
// begin uc_side := your_side ;
29921: LD_ADDR_OWVAR 20
29925: PUSH
29926: LD_OWVAR 2
29930: ST_TO_ADDR
// uc_nation := nation_american ;
29931: LD_ADDR_OWVAR 21
29935: PUSH
29936: LD_INT 1
29938: ST_TO_ADDR
// vc_chassis := us_morphling ;
29939: LD_ADDR_OWVAR 37
29943: PUSH
29944: LD_INT 5
29946: ST_TO_ADDR
// vc_engine := engine_siberite ;
29947: LD_ADDR_OWVAR 39
29951: PUSH
29952: LD_INT 3
29954: ST_TO_ADDR
// vc_control := control_computer ;
29955: LD_ADDR_OWVAR 38
29959: PUSH
29960: LD_INT 3
29962: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29963: LD_ADDR_OWVAR 40
29967: PUSH
29968: LD_INT 10
29970: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29971: LD_VAR 0 2
29975: PUSH
29976: LD_INT 1
29978: ARRAY
29979: PPUSH
29980: CALL_OW 310
29984: NOT
29985: IFFALSE 30032
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29987: CALL_OW 45
29991: PPUSH
29992: LD_VAR 0 2
29996: PUSH
29997: LD_INT 1
29999: ARRAY
30000: PPUSH
30001: CALL_OW 250
30005: PPUSH
30006: LD_VAR 0 2
30010: PUSH
30011: LD_INT 1
30013: ARRAY
30014: PPUSH
30015: CALL_OW 251
30019: PPUSH
30020: LD_INT 12
30022: PPUSH
30023: LD_INT 1
30025: PPUSH
30026: CALL_OW 50
30030: GO 30044
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30032: CALL_OW 45
30036: PPUSH
30037: LD_INT 1
30039: PPUSH
30040: CALL_OW 51
// end ;
30044: GO 29918
30046: POP
30047: POP
// end ;
30048: PPOPN 2
30050: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30051: LD_EXP 65
30055: PUSH
30056: LD_EXP 111
30060: AND
30061: IFFALSE 30283
30063: GO 30065
30065: DISABLE
30066: LD_INT 0
30068: PPUSH
30069: PPUSH
30070: PPUSH
30071: PPUSH
30072: PPUSH
30073: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30074: LD_ADDR_VAR 0 6
30078: PUSH
30079: LD_INT 22
30081: PUSH
30082: LD_OWVAR 2
30086: PUSH
30087: EMPTY
30088: LIST
30089: LIST
30090: PUSH
30091: LD_INT 21
30093: PUSH
30094: LD_INT 1
30096: PUSH
30097: EMPTY
30098: LIST
30099: LIST
30100: PUSH
30101: LD_INT 3
30103: PUSH
30104: LD_INT 23
30106: PUSH
30107: LD_INT 0
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: EMPTY
30119: LIST
30120: LIST
30121: LIST
30122: PPUSH
30123: CALL_OW 69
30127: ST_TO_ADDR
// if not tmp then
30128: LD_VAR 0 6
30132: NOT
30133: IFFALSE 30137
// exit ;
30135: GO 30283
// s1 := rand ( 1 , 4 ) ;
30137: LD_ADDR_VAR 0 2
30141: PUSH
30142: LD_INT 1
30144: PPUSH
30145: LD_INT 4
30147: PPUSH
30148: CALL_OW 12
30152: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30153: LD_ADDR_VAR 0 4
30157: PUSH
30158: LD_VAR 0 6
30162: PUSH
30163: LD_INT 1
30165: ARRAY
30166: PPUSH
30167: LD_VAR 0 2
30171: PPUSH
30172: CALL_OW 259
30176: ST_TO_ADDR
// if s1 = 1 then
30177: LD_VAR 0 2
30181: PUSH
30182: LD_INT 1
30184: EQUAL
30185: IFFALSE 30205
// s2 := rand ( 2 , 4 ) else
30187: LD_ADDR_VAR 0 3
30191: PUSH
30192: LD_INT 2
30194: PPUSH
30195: LD_INT 4
30197: PPUSH
30198: CALL_OW 12
30202: ST_TO_ADDR
30203: GO 30213
// s2 := 1 ;
30205: LD_ADDR_VAR 0 3
30209: PUSH
30210: LD_INT 1
30212: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30213: LD_ADDR_VAR 0 5
30217: PUSH
30218: LD_VAR 0 6
30222: PUSH
30223: LD_INT 1
30225: ARRAY
30226: PPUSH
30227: LD_VAR 0 3
30231: PPUSH
30232: CALL_OW 259
30236: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30237: LD_VAR 0 6
30241: PUSH
30242: LD_INT 1
30244: ARRAY
30245: PPUSH
30246: LD_VAR 0 2
30250: PPUSH
30251: LD_VAR 0 5
30255: PPUSH
30256: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30260: LD_VAR 0 6
30264: PUSH
30265: LD_INT 1
30267: ARRAY
30268: PPUSH
30269: LD_VAR 0 3
30273: PPUSH
30274: LD_VAR 0 4
30278: PPUSH
30279: CALL_OW 237
// end ;
30283: PPOPN 6
30285: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30286: LD_EXP 65
30290: PUSH
30291: LD_EXP 112
30295: AND
30296: IFFALSE 30375
30298: GO 30300
30300: DISABLE
30301: LD_INT 0
30303: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30304: LD_ADDR_VAR 0 1
30308: PUSH
30309: LD_INT 22
30311: PUSH
30312: LD_OWVAR 2
30316: PUSH
30317: EMPTY
30318: LIST
30319: LIST
30320: PUSH
30321: LD_INT 30
30323: PUSH
30324: LD_INT 3
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: EMPTY
30332: LIST
30333: LIST
30334: PPUSH
30335: CALL_OW 69
30339: ST_TO_ADDR
// if not tmp then
30340: LD_VAR 0 1
30344: NOT
30345: IFFALSE 30349
// exit ;
30347: GO 30375
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30349: LD_VAR 0 1
30353: PUSH
30354: LD_INT 1
30356: PPUSH
30357: LD_VAR 0 1
30361: PPUSH
30362: CALL_OW 12
30366: ARRAY
30367: PPUSH
30368: LD_INT 1
30370: PPUSH
30371: CALL_OW 234
// end ;
30375: PPOPN 1
30377: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30378: LD_EXP 65
30382: PUSH
30383: LD_EXP 113
30387: AND
30388: IFFALSE 30500
30390: GO 30392
30392: DISABLE
30393: LD_INT 0
30395: PPUSH
30396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30397: LD_ADDR_VAR 0 2
30401: PUSH
30402: LD_INT 22
30404: PUSH
30405: LD_OWVAR 2
30409: PUSH
30410: EMPTY
30411: LIST
30412: LIST
30413: PUSH
30414: LD_INT 2
30416: PUSH
30417: LD_INT 30
30419: PUSH
30420: LD_INT 27
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 30
30429: PUSH
30430: LD_INT 26
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 30
30439: PUSH
30440: LD_INT 28
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PPUSH
30457: CALL_OW 69
30461: ST_TO_ADDR
// if not tmp then
30462: LD_VAR 0 2
30466: NOT
30467: IFFALSE 30471
// exit ;
30469: GO 30500
// for i in tmp do
30471: LD_ADDR_VAR 0 1
30475: PUSH
30476: LD_VAR 0 2
30480: PUSH
30481: FOR_IN
30482: IFFALSE 30498
// SetLives ( i , 1 ) ;
30484: LD_VAR 0 1
30488: PPUSH
30489: LD_INT 1
30491: PPUSH
30492: CALL_OW 234
30496: GO 30481
30498: POP
30499: POP
// end ;
30500: PPOPN 2
30502: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30503: LD_EXP 65
30507: PUSH
30508: LD_EXP 114
30512: AND
30513: IFFALSE 30800
30515: GO 30517
30517: DISABLE
30518: LD_INT 0
30520: PPUSH
30521: PPUSH
30522: PPUSH
// begin i := rand ( 1 , 7 ) ;
30523: LD_ADDR_VAR 0 1
30527: PUSH
30528: LD_INT 1
30530: PPUSH
30531: LD_INT 7
30533: PPUSH
30534: CALL_OW 12
30538: ST_TO_ADDR
// case i of 1 :
30539: LD_VAR 0 1
30543: PUSH
30544: LD_INT 1
30546: DOUBLE
30547: EQUAL
30548: IFTRUE 30552
30550: GO 30562
30552: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30553: LD_STRING earthquake(getX(game), 0, 32)
30555: PPUSH
30556: CALL_OW 559
30560: GO 30800
30562: LD_INT 2
30564: DOUBLE
30565: EQUAL
30566: IFTRUE 30570
30568: GO 30584
30570: POP
// begin ToLua ( displayStucuk(); ) ;
30571: LD_STRING displayStucuk();
30573: PPUSH
30574: CALL_OW 559
// ResetFog ;
30578: CALL_OW 335
// end ; 3 :
30582: GO 30800
30584: LD_INT 3
30586: DOUBLE
30587: EQUAL
30588: IFTRUE 30592
30590: GO 30696
30592: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30593: LD_ADDR_VAR 0 2
30597: PUSH
30598: LD_INT 22
30600: PUSH
30601: LD_OWVAR 2
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 25
30612: PUSH
30613: LD_INT 1
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: EMPTY
30621: LIST
30622: LIST
30623: PPUSH
30624: CALL_OW 69
30628: ST_TO_ADDR
// if not tmp then
30629: LD_VAR 0 2
30633: NOT
30634: IFFALSE 30638
// exit ;
30636: GO 30800
// un := tmp [ rand ( 1 , tmp ) ] ;
30638: LD_ADDR_VAR 0 3
30642: PUSH
30643: LD_VAR 0 2
30647: PUSH
30648: LD_INT 1
30650: PPUSH
30651: LD_VAR 0 2
30655: PPUSH
30656: CALL_OW 12
30660: ARRAY
30661: ST_TO_ADDR
// if Crawls ( un ) then
30662: LD_VAR 0 3
30666: PPUSH
30667: CALL_OW 318
30671: IFFALSE 30682
// ComWalk ( un ) ;
30673: LD_VAR 0 3
30677: PPUSH
30678: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30682: LD_VAR 0 3
30686: PPUSH
30687: LD_INT 8
30689: PPUSH
30690: CALL_OW 336
// end ; 4 :
30694: GO 30800
30696: LD_INT 4
30698: DOUBLE
30699: EQUAL
30700: IFTRUE 30704
30702: GO 30778
30704: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30705: LD_ADDR_VAR 0 2
30709: PUSH
30710: LD_INT 22
30712: PUSH
30713: LD_OWVAR 2
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 30
30724: PUSH
30725: LD_INT 29
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PPUSH
30736: CALL_OW 69
30740: ST_TO_ADDR
// if not tmp then
30741: LD_VAR 0 2
30745: NOT
30746: IFFALSE 30750
// exit ;
30748: GO 30800
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30750: LD_VAR 0 2
30754: PUSH
30755: LD_INT 1
30757: ARRAY
30758: PPUSH
30759: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30763: LD_VAR 0 2
30767: PUSH
30768: LD_INT 1
30770: ARRAY
30771: PPUSH
30772: CALL_OW 65
// end ; 5 .. 7 :
30776: GO 30800
30778: LD_INT 5
30780: DOUBLE
30781: GREATEREQUAL
30782: IFFALSE 30790
30784: LD_INT 7
30786: DOUBLE
30787: LESSEQUAL
30788: IFTRUE 30792
30790: GO 30799
30792: POP
// StreamSibBomb ; end ;
30793: CALL 27037 0 0
30797: GO 30800
30799: POP
// end ;
30800: PPOPN 3
30802: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30803: LD_EXP 65
30807: PUSH
30808: LD_EXP 115
30812: AND
30813: IFFALSE 30969
30815: GO 30817
30817: DISABLE
30818: LD_INT 0
30820: PPUSH
30821: PPUSH
30822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30823: LD_ADDR_VAR 0 2
30827: PUSH
30828: LD_INT 81
30830: PUSH
30831: LD_OWVAR 2
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 2
30842: PUSH
30843: LD_INT 21
30845: PUSH
30846: LD_INT 1
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 21
30855: PUSH
30856: LD_INT 2
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: LIST
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PPUSH
30872: CALL_OW 69
30876: ST_TO_ADDR
// if not tmp then
30877: LD_VAR 0 2
30881: NOT
30882: IFFALSE 30886
// exit ;
30884: GO 30969
// p := 0 ;
30886: LD_ADDR_VAR 0 3
30890: PUSH
30891: LD_INT 0
30893: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30894: LD_INT 35
30896: PPUSH
30897: CALL_OW 67
// p := p + 1 ;
30901: LD_ADDR_VAR 0 3
30905: PUSH
30906: LD_VAR 0 3
30910: PUSH
30911: LD_INT 1
30913: PLUS
30914: ST_TO_ADDR
// for i in tmp do
30915: LD_ADDR_VAR 0 1
30919: PUSH
30920: LD_VAR 0 2
30924: PUSH
30925: FOR_IN
30926: IFFALSE 30957
// if GetLives ( i ) < 1000 then
30928: LD_VAR 0 1
30932: PPUSH
30933: CALL_OW 256
30937: PUSH
30938: LD_INT 1000
30940: LESS
30941: IFFALSE 30955
// SetLives ( i , 1000 ) ;
30943: LD_VAR 0 1
30947: PPUSH
30948: LD_INT 1000
30950: PPUSH
30951: CALL_OW 234
30955: GO 30925
30957: POP
30958: POP
// until p > 20 ;
30959: LD_VAR 0 3
30963: PUSH
30964: LD_INT 20
30966: GREATER
30967: IFFALSE 30894
// end ;
30969: PPOPN 3
30971: END
// every 0 0$1 trigger StreamModeActive and sTime do
30972: LD_EXP 65
30976: PUSH
30977: LD_EXP 116
30981: AND
30982: IFFALSE 31017
30984: GO 30986
30986: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30987: LD_INT 28
30989: PPUSH
30990: LD_OWVAR 2
30994: PPUSH
30995: LD_INT 2
30997: PPUSH
30998: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31002: LD_INT 30
31004: PPUSH
31005: LD_OWVAR 2
31009: PPUSH
31010: LD_INT 2
31012: PPUSH
31013: CALL_OW 322
// end ;
31017: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31018: LD_EXP 65
31022: PUSH
31023: LD_EXP 117
31027: AND
31028: IFFALSE 31149
31030: GO 31032
31032: DISABLE
31033: LD_INT 0
31035: PPUSH
31036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31037: LD_ADDR_VAR 0 2
31041: PUSH
31042: LD_INT 22
31044: PUSH
31045: LD_OWVAR 2
31049: PUSH
31050: EMPTY
31051: LIST
31052: LIST
31053: PUSH
31054: LD_INT 21
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 3
31066: PUSH
31067: LD_INT 23
31069: PUSH
31070: LD_INT 0
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: PPUSH
31086: CALL_OW 69
31090: ST_TO_ADDR
// if not tmp then
31091: LD_VAR 0 2
31095: NOT
31096: IFFALSE 31100
// exit ;
31098: GO 31149
// for i in tmp do
31100: LD_ADDR_VAR 0 1
31104: PUSH
31105: LD_VAR 0 2
31109: PUSH
31110: FOR_IN
31111: IFFALSE 31147
// begin if Crawls ( i ) then
31113: LD_VAR 0 1
31117: PPUSH
31118: CALL_OW 318
31122: IFFALSE 31133
// ComWalk ( i ) ;
31124: LD_VAR 0 1
31128: PPUSH
31129: CALL_OW 138
// SetClass ( i , 2 ) ;
31133: LD_VAR 0 1
31137: PPUSH
31138: LD_INT 2
31140: PPUSH
31141: CALL_OW 336
// end ;
31145: GO 31110
31147: POP
31148: POP
// end ;
31149: PPOPN 2
31151: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31152: LD_EXP 65
31156: PUSH
31157: LD_EXP 118
31161: AND
31162: IFFALSE 31450
31164: GO 31166
31166: DISABLE
31167: LD_INT 0
31169: PPUSH
31170: PPUSH
31171: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31172: LD_OWVAR 2
31176: PPUSH
31177: LD_INT 9
31179: PPUSH
31180: LD_INT 1
31182: PPUSH
31183: LD_INT 1
31185: PPUSH
31186: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31190: LD_INT 9
31192: PPUSH
31193: LD_OWVAR 2
31197: PPUSH
31198: CALL_OW 343
// uc_side := 9 ;
31202: LD_ADDR_OWVAR 20
31206: PUSH
31207: LD_INT 9
31209: ST_TO_ADDR
// uc_nation := 2 ;
31210: LD_ADDR_OWVAR 21
31214: PUSH
31215: LD_INT 2
31217: ST_TO_ADDR
// hc_name := Dark Warrior ;
31218: LD_ADDR_OWVAR 26
31222: PUSH
31223: LD_STRING Dark Warrior
31225: ST_TO_ADDR
// hc_gallery :=  ;
31226: LD_ADDR_OWVAR 33
31230: PUSH
31231: LD_STRING 
31233: ST_TO_ADDR
// hc_noskilllimit := true ;
31234: LD_ADDR_OWVAR 76
31238: PUSH
31239: LD_INT 1
31241: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31242: LD_ADDR_OWVAR 31
31246: PUSH
31247: LD_INT 30
31249: PUSH
31250: LD_INT 30
31252: PUSH
31253: LD_INT 30
31255: PUSH
31256: LD_INT 30
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: ST_TO_ADDR
// un := CreateHuman ;
31265: LD_ADDR_VAR 0 3
31269: PUSH
31270: CALL_OW 44
31274: ST_TO_ADDR
// hc_noskilllimit := false ;
31275: LD_ADDR_OWVAR 76
31279: PUSH
31280: LD_INT 0
31282: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31283: LD_VAR 0 3
31287: PPUSH
31288: LD_INT 1
31290: PPUSH
31291: CALL_OW 51
// ToLua ( playRanger() ) ;
31295: LD_STRING playRanger()
31297: PPUSH
31298: CALL_OW 559
// p := 0 ;
31302: LD_ADDR_VAR 0 2
31306: PUSH
31307: LD_INT 0
31309: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31310: LD_INT 35
31312: PPUSH
31313: CALL_OW 67
// p := p + 1 ;
31317: LD_ADDR_VAR 0 2
31321: PUSH
31322: LD_VAR 0 2
31326: PUSH
31327: LD_INT 1
31329: PLUS
31330: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31331: LD_VAR 0 3
31335: PPUSH
31336: CALL_OW 256
31340: PUSH
31341: LD_INT 1000
31343: LESS
31344: IFFALSE 31358
// SetLives ( un , 1000 ) ;
31346: LD_VAR 0 3
31350: PPUSH
31351: LD_INT 1000
31353: PPUSH
31354: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31358: LD_VAR 0 3
31362: PPUSH
31363: LD_INT 81
31365: PUSH
31366: LD_OWVAR 2
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PUSH
31375: LD_INT 91
31377: PUSH
31378: LD_VAR 0 3
31382: PUSH
31383: LD_INT 30
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: LIST
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PPUSH
31395: CALL_OW 69
31399: PPUSH
31400: LD_VAR 0 3
31404: PPUSH
31405: CALL_OW 74
31409: PPUSH
31410: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31414: LD_VAR 0 2
31418: PUSH
31419: LD_INT 80
31421: GREATER
31422: PUSH
31423: LD_VAR 0 3
31427: PPUSH
31428: CALL_OW 301
31432: OR
31433: IFFALSE 31310
// if un then
31435: LD_VAR 0 3
31439: IFFALSE 31450
// RemoveUnit ( un ) ;
31441: LD_VAR 0 3
31445: PPUSH
31446: CALL_OW 64
// end ;
31450: PPOPN 3
31452: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31453: LD_EXP 119
31457: IFFALSE 31573
31459: GO 31461
31461: DISABLE
31462: LD_INT 0
31464: PPUSH
31465: PPUSH
31466: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31467: LD_ADDR_VAR 0 2
31471: PUSH
31472: LD_INT 81
31474: PUSH
31475: LD_OWVAR 2
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 21
31486: PUSH
31487: LD_INT 1
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PPUSH
31498: CALL_OW 69
31502: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31503: LD_STRING playComputer()
31505: PPUSH
31506: CALL_OW 559
// if not tmp then
31510: LD_VAR 0 2
31514: NOT
31515: IFFALSE 31519
// exit ;
31517: GO 31573
// for i in tmp do
31519: LD_ADDR_VAR 0 1
31523: PUSH
31524: LD_VAR 0 2
31528: PUSH
31529: FOR_IN
31530: IFFALSE 31571
// for j := 1 to 4 do
31532: LD_ADDR_VAR 0 3
31536: PUSH
31537: DOUBLE
31538: LD_INT 1
31540: DEC
31541: ST_TO_ADDR
31542: LD_INT 4
31544: PUSH
31545: FOR_TO
31546: IFFALSE 31567
// SetSkill ( i , j , 10 ) ;
31548: LD_VAR 0 1
31552: PPUSH
31553: LD_VAR 0 3
31557: PPUSH
31558: LD_INT 10
31560: PPUSH
31561: CALL_OW 237
31565: GO 31545
31567: POP
31568: POP
31569: GO 31529
31571: POP
31572: POP
// end ;
31573: PPOPN 3
31575: END
// every 0 0$1 trigger s30 do var i , tmp ;
31576: LD_EXP 120
31580: IFFALSE 31649
31582: GO 31584
31584: DISABLE
31585: LD_INT 0
31587: PPUSH
31588: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31589: LD_ADDR_VAR 0 2
31593: PUSH
31594: LD_INT 22
31596: PUSH
31597: LD_OWVAR 2
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PPUSH
31606: CALL_OW 69
31610: ST_TO_ADDR
// if not tmp then
31611: LD_VAR 0 2
31615: NOT
31616: IFFALSE 31620
// exit ;
31618: GO 31649
// for i in tmp do
31620: LD_ADDR_VAR 0 1
31624: PUSH
31625: LD_VAR 0 2
31629: PUSH
31630: FOR_IN
31631: IFFALSE 31647
// SetLives ( i , 300 ) ;
31633: LD_VAR 0 1
31637: PPUSH
31638: LD_INT 300
31640: PPUSH
31641: CALL_OW 234
31645: GO 31630
31647: POP
31648: POP
// end ;
31649: PPOPN 2
31651: END
// every 0 0$1 trigger s60 do var i , tmp ;
31652: LD_EXP 121
31656: IFFALSE 31725
31658: GO 31660
31660: DISABLE
31661: LD_INT 0
31663: PPUSH
31664: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31665: LD_ADDR_VAR 0 2
31669: PUSH
31670: LD_INT 22
31672: PUSH
31673: LD_OWVAR 2
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PPUSH
31682: CALL_OW 69
31686: ST_TO_ADDR
// if not tmp then
31687: LD_VAR 0 2
31691: NOT
31692: IFFALSE 31696
// exit ;
31694: GO 31725
// for i in tmp do
31696: LD_ADDR_VAR 0 1
31700: PUSH
31701: LD_VAR 0 2
31705: PUSH
31706: FOR_IN
31707: IFFALSE 31723
// SetLives ( i , 600 ) ;
31709: LD_VAR 0 1
31713: PPUSH
31714: LD_INT 600
31716: PPUSH
31717: CALL_OW 234
31721: GO 31706
31723: POP
31724: POP
// end ;
31725: PPOPN 2
31727: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31728: LD_INT 0
31730: PPUSH
// case cmd of 301 :
31731: LD_VAR 0 1
31735: PUSH
31736: LD_INT 301
31738: DOUBLE
31739: EQUAL
31740: IFTRUE 31744
31742: GO 31776
31744: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31745: LD_VAR 0 6
31749: PPUSH
31750: LD_VAR 0 7
31754: PPUSH
31755: LD_VAR 0 8
31759: PPUSH
31760: LD_VAR 0 4
31764: PPUSH
31765: LD_VAR 0 5
31769: PPUSH
31770: CALL 32977 0 5
31774: GO 31897
31776: LD_INT 302
31778: DOUBLE
31779: EQUAL
31780: IFTRUE 31784
31782: GO 31821
31784: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31785: LD_VAR 0 6
31789: PPUSH
31790: LD_VAR 0 7
31794: PPUSH
31795: LD_VAR 0 8
31799: PPUSH
31800: LD_VAR 0 9
31804: PPUSH
31805: LD_VAR 0 4
31809: PPUSH
31810: LD_VAR 0 5
31814: PPUSH
31815: CALL 33068 0 6
31819: GO 31897
31821: LD_INT 303
31823: DOUBLE
31824: EQUAL
31825: IFTRUE 31829
31827: GO 31866
31829: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31830: LD_VAR 0 6
31834: PPUSH
31835: LD_VAR 0 7
31839: PPUSH
31840: LD_VAR 0 8
31844: PPUSH
31845: LD_VAR 0 9
31849: PPUSH
31850: LD_VAR 0 4
31854: PPUSH
31855: LD_VAR 0 5
31859: PPUSH
31860: CALL 31902 0 6
31864: GO 31897
31866: LD_INT 304
31868: DOUBLE
31869: EQUAL
31870: IFTRUE 31874
31872: GO 31896
31874: POP
// hHackTeleport ( unit , x , y ) ; end ;
31875: LD_VAR 0 2
31879: PPUSH
31880: LD_VAR 0 4
31884: PPUSH
31885: LD_VAR 0 5
31889: PPUSH
31890: CALL 33661 0 3
31894: GO 31897
31896: POP
// end ;
31897: LD_VAR 0 12
31901: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31902: LD_INT 0
31904: PPUSH
31905: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31906: LD_VAR 0 1
31910: PUSH
31911: LD_INT 1
31913: LESS
31914: PUSH
31915: LD_VAR 0 1
31919: PUSH
31920: LD_INT 3
31922: GREATER
31923: OR
31924: PUSH
31925: LD_VAR 0 5
31929: PPUSH
31930: LD_VAR 0 6
31934: PPUSH
31935: CALL_OW 428
31939: OR
31940: IFFALSE 31944
// exit ;
31942: GO 32664
// uc_side := your_side ;
31944: LD_ADDR_OWVAR 20
31948: PUSH
31949: LD_OWVAR 2
31953: ST_TO_ADDR
// uc_nation := nation ;
31954: LD_ADDR_OWVAR 21
31958: PUSH
31959: LD_VAR 0 1
31963: ST_TO_ADDR
// bc_level = 1 ;
31964: LD_ADDR_OWVAR 43
31968: PUSH
31969: LD_INT 1
31971: ST_TO_ADDR
// case btype of 1 :
31972: LD_VAR 0 2
31976: PUSH
31977: LD_INT 1
31979: DOUBLE
31980: EQUAL
31981: IFTRUE 31985
31983: GO 31996
31985: POP
// bc_type := b_depot ; 2 :
31986: LD_ADDR_OWVAR 42
31990: PUSH
31991: LD_INT 0
31993: ST_TO_ADDR
31994: GO 32608
31996: LD_INT 2
31998: DOUBLE
31999: EQUAL
32000: IFTRUE 32004
32002: GO 32015
32004: POP
// bc_type := b_warehouse ; 3 :
32005: LD_ADDR_OWVAR 42
32009: PUSH
32010: LD_INT 1
32012: ST_TO_ADDR
32013: GO 32608
32015: LD_INT 3
32017: DOUBLE
32018: EQUAL
32019: IFTRUE 32023
32021: GO 32034
32023: POP
// bc_type := b_lab ; 4 .. 9 :
32024: LD_ADDR_OWVAR 42
32028: PUSH
32029: LD_INT 6
32031: ST_TO_ADDR
32032: GO 32608
32034: LD_INT 4
32036: DOUBLE
32037: GREATEREQUAL
32038: IFFALSE 32046
32040: LD_INT 9
32042: DOUBLE
32043: LESSEQUAL
32044: IFTRUE 32048
32046: GO 32100
32048: POP
// begin bc_type := b_lab_half ;
32049: LD_ADDR_OWVAR 42
32053: PUSH
32054: LD_INT 7
32056: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32057: LD_ADDR_OWVAR 44
32061: PUSH
32062: LD_INT 10
32064: PUSH
32065: LD_INT 11
32067: PUSH
32068: LD_INT 12
32070: PUSH
32071: LD_INT 15
32073: PUSH
32074: LD_INT 14
32076: PUSH
32077: LD_INT 13
32079: PUSH
32080: EMPTY
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: PUSH
32088: LD_VAR 0 2
32092: PUSH
32093: LD_INT 3
32095: MINUS
32096: ARRAY
32097: ST_TO_ADDR
// end ; 10 .. 13 :
32098: GO 32608
32100: LD_INT 10
32102: DOUBLE
32103: GREATEREQUAL
32104: IFFALSE 32112
32106: LD_INT 13
32108: DOUBLE
32109: LESSEQUAL
32110: IFTRUE 32114
32112: GO 32191
32114: POP
// begin bc_type := b_lab_full ;
32115: LD_ADDR_OWVAR 42
32119: PUSH
32120: LD_INT 8
32122: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32123: LD_ADDR_OWVAR 44
32127: PUSH
32128: LD_INT 10
32130: PUSH
32131: LD_INT 12
32133: PUSH
32134: LD_INT 14
32136: PUSH
32137: LD_INT 13
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: PUSH
32146: LD_VAR 0 2
32150: PUSH
32151: LD_INT 9
32153: MINUS
32154: ARRAY
32155: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32156: LD_ADDR_OWVAR 45
32160: PUSH
32161: LD_INT 11
32163: PUSH
32164: LD_INT 15
32166: PUSH
32167: LD_INT 12
32169: PUSH
32170: LD_INT 15
32172: PUSH
32173: EMPTY
32174: LIST
32175: LIST
32176: LIST
32177: LIST
32178: PUSH
32179: LD_VAR 0 2
32183: PUSH
32184: LD_INT 9
32186: MINUS
32187: ARRAY
32188: ST_TO_ADDR
// end ; 14 :
32189: GO 32608
32191: LD_INT 14
32193: DOUBLE
32194: EQUAL
32195: IFTRUE 32199
32197: GO 32210
32199: POP
// bc_type := b_workshop ; 15 :
32200: LD_ADDR_OWVAR 42
32204: PUSH
32205: LD_INT 2
32207: ST_TO_ADDR
32208: GO 32608
32210: LD_INT 15
32212: DOUBLE
32213: EQUAL
32214: IFTRUE 32218
32216: GO 32229
32218: POP
// bc_type := b_factory ; 16 :
32219: LD_ADDR_OWVAR 42
32223: PUSH
32224: LD_INT 3
32226: ST_TO_ADDR
32227: GO 32608
32229: LD_INT 16
32231: DOUBLE
32232: EQUAL
32233: IFTRUE 32237
32235: GO 32248
32237: POP
// bc_type := b_ext_gun ; 17 :
32238: LD_ADDR_OWVAR 42
32242: PUSH
32243: LD_INT 17
32245: ST_TO_ADDR
32246: GO 32608
32248: LD_INT 17
32250: DOUBLE
32251: EQUAL
32252: IFTRUE 32256
32254: GO 32284
32256: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32257: LD_ADDR_OWVAR 42
32261: PUSH
32262: LD_INT 19
32264: PUSH
32265: LD_INT 23
32267: PUSH
32268: LD_INT 19
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: LIST
32275: PUSH
32276: LD_VAR 0 1
32280: ARRAY
32281: ST_TO_ADDR
32282: GO 32608
32284: LD_INT 18
32286: DOUBLE
32287: EQUAL
32288: IFTRUE 32292
32290: GO 32303
32292: POP
// bc_type := b_ext_radar ; 19 :
32293: LD_ADDR_OWVAR 42
32297: PUSH
32298: LD_INT 20
32300: ST_TO_ADDR
32301: GO 32608
32303: LD_INT 19
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32322
32311: POP
// bc_type := b_ext_radio ; 20 :
32312: LD_ADDR_OWVAR 42
32316: PUSH
32317: LD_INT 22
32319: ST_TO_ADDR
32320: GO 32608
32322: LD_INT 20
32324: DOUBLE
32325: EQUAL
32326: IFTRUE 32330
32328: GO 32341
32330: POP
// bc_type := b_ext_siberium ; 21 :
32331: LD_ADDR_OWVAR 42
32335: PUSH
32336: LD_INT 21
32338: ST_TO_ADDR
32339: GO 32608
32341: LD_INT 21
32343: DOUBLE
32344: EQUAL
32345: IFTRUE 32349
32347: GO 32360
32349: POP
// bc_type := b_ext_computer ; 22 :
32350: LD_ADDR_OWVAR 42
32354: PUSH
32355: LD_INT 24
32357: ST_TO_ADDR
32358: GO 32608
32360: LD_INT 22
32362: DOUBLE
32363: EQUAL
32364: IFTRUE 32368
32366: GO 32379
32368: POP
// bc_type := b_ext_track ; 23 :
32369: LD_ADDR_OWVAR 42
32373: PUSH
32374: LD_INT 16
32376: ST_TO_ADDR
32377: GO 32608
32379: LD_INT 23
32381: DOUBLE
32382: EQUAL
32383: IFTRUE 32387
32385: GO 32398
32387: POP
// bc_type := b_ext_laser ; 24 :
32388: LD_ADDR_OWVAR 42
32392: PUSH
32393: LD_INT 25
32395: ST_TO_ADDR
32396: GO 32608
32398: LD_INT 24
32400: DOUBLE
32401: EQUAL
32402: IFTRUE 32406
32404: GO 32417
32406: POP
// bc_type := b_control_tower ; 25 :
32407: LD_ADDR_OWVAR 42
32411: PUSH
32412: LD_INT 36
32414: ST_TO_ADDR
32415: GO 32608
32417: LD_INT 25
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32436
32425: POP
// bc_type := b_breastwork ; 26 :
32426: LD_ADDR_OWVAR 42
32430: PUSH
32431: LD_INT 31
32433: ST_TO_ADDR
32434: GO 32608
32436: LD_INT 26
32438: DOUBLE
32439: EQUAL
32440: IFTRUE 32444
32442: GO 32455
32444: POP
// bc_type := b_bunker ; 27 :
32445: LD_ADDR_OWVAR 42
32449: PUSH
32450: LD_INT 32
32452: ST_TO_ADDR
32453: GO 32608
32455: LD_INT 27
32457: DOUBLE
32458: EQUAL
32459: IFTRUE 32463
32461: GO 32474
32463: POP
// bc_type := b_turret ; 28 :
32464: LD_ADDR_OWVAR 42
32468: PUSH
32469: LD_INT 33
32471: ST_TO_ADDR
32472: GO 32608
32474: LD_INT 28
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32493
32482: POP
// bc_type := b_armoury ; 29 :
32483: LD_ADDR_OWVAR 42
32487: PUSH
32488: LD_INT 4
32490: ST_TO_ADDR
32491: GO 32608
32493: LD_INT 29
32495: DOUBLE
32496: EQUAL
32497: IFTRUE 32501
32499: GO 32512
32501: POP
// bc_type := b_barracks ; 30 :
32502: LD_ADDR_OWVAR 42
32506: PUSH
32507: LD_INT 5
32509: ST_TO_ADDR
32510: GO 32608
32512: LD_INT 30
32514: DOUBLE
32515: EQUAL
32516: IFTRUE 32520
32518: GO 32531
32520: POP
// bc_type := b_solar_power ; 31 :
32521: LD_ADDR_OWVAR 42
32525: PUSH
32526: LD_INT 27
32528: ST_TO_ADDR
32529: GO 32608
32531: LD_INT 31
32533: DOUBLE
32534: EQUAL
32535: IFTRUE 32539
32537: GO 32550
32539: POP
// bc_type := b_oil_power ; 32 :
32540: LD_ADDR_OWVAR 42
32544: PUSH
32545: LD_INT 26
32547: ST_TO_ADDR
32548: GO 32608
32550: LD_INT 32
32552: DOUBLE
32553: EQUAL
32554: IFTRUE 32558
32556: GO 32569
32558: POP
// bc_type := b_siberite_power ; 33 :
32559: LD_ADDR_OWVAR 42
32563: PUSH
32564: LD_INT 28
32566: ST_TO_ADDR
32567: GO 32608
32569: LD_INT 33
32571: DOUBLE
32572: EQUAL
32573: IFTRUE 32577
32575: GO 32588
32577: POP
// bc_type := b_oil_mine ; 34 :
32578: LD_ADDR_OWVAR 42
32582: PUSH
32583: LD_INT 29
32585: ST_TO_ADDR
32586: GO 32608
32588: LD_INT 34
32590: DOUBLE
32591: EQUAL
32592: IFTRUE 32596
32594: GO 32607
32596: POP
// bc_type := b_siberite_mine ; end ;
32597: LD_ADDR_OWVAR 42
32601: PUSH
32602: LD_INT 30
32604: ST_TO_ADDR
32605: GO 32608
32607: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32608: LD_ADDR_VAR 0 8
32612: PUSH
32613: LD_VAR 0 5
32617: PPUSH
32618: LD_VAR 0 6
32622: PPUSH
32623: LD_VAR 0 3
32627: PPUSH
32628: CALL_OW 47
32632: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32633: LD_OWVAR 42
32637: PUSH
32638: LD_INT 32
32640: PUSH
32641: LD_INT 33
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: IN
32648: IFFALSE 32664
// PlaceWeaponTurret ( b , weapon ) ;
32650: LD_VAR 0 8
32654: PPUSH
32655: LD_VAR 0 4
32659: PPUSH
32660: CALL_OW 431
// end ;
32664: LD_VAR 0 7
32668: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32669: LD_INT 0
32671: PPUSH
32672: PPUSH
32673: PPUSH
32674: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32675: LD_ADDR_VAR 0 4
32679: PUSH
32680: LD_INT 22
32682: PUSH
32683: LD_OWVAR 2
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 2
32694: PUSH
32695: LD_INT 30
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: PUSH
32705: LD_INT 30
32707: PUSH
32708: LD_INT 1
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: EMPTY
32716: LIST
32717: LIST
32718: LIST
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PPUSH
32724: CALL_OW 69
32728: ST_TO_ADDR
// if not tmp then
32729: LD_VAR 0 4
32733: NOT
32734: IFFALSE 32738
// exit ;
32736: GO 32797
// for i in tmp do
32738: LD_ADDR_VAR 0 2
32742: PUSH
32743: LD_VAR 0 4
32747: PUSH
32748: FOR_IN
32749: IFFALSE 32795
// for j = 1 to 3 do
32751: LD_ADDR_VAR 0 3
32755: PUSH
32756: DOUBLE
32757: LD_INT 1
32759: DEC
32760: ST_TO_ADDR
32761: LD_INT 3
32763: PUSH
32764: FOR_TO
32765: IFFALSE 32791
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32767: LD_VAR 0 2
32771: PPUSH
32772: CALL_OW 274
32776: PPUSH
32777: LD_VAR 0 3
32781: PPUSH
32782: LD_INT 99999
32784: PPUSH
32785: CALL_OW 277
32789: GO 32764
32791: POP
32792: POP
32793: GO 32748
32795: POP
32796: POP
// end ;
32797: LD_VAR 0 1
32801: RET
// export function hHackSetLevel10 ; var i , j ; begin
32802: LD_INT 0
32804: PPUSH
32805: PPUSH
32806: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32807: LD_ADDR_VAR 0 2
32811: PUSH
32812: LD_INT 21
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PPUSH
32822: CALL_OW 69
32826: PUSH
32827: FOR_IN
32828: IFFALSE 32880
// if IsSelected ( i ) then
32830: LD_VAR 0 2
32834: PPUSH
32835: CALL_OW 306
32839: IFFALSE 32878
// begin for j := 1 to 4 do
32841: LD_ADDR_VAR 0 3
32845: PUSH
32846: DOUBLE
32847: LD_INT 1
32849: DEC
32850: ST_TO_ADDR
32851: LD_INT 4
32853: PUSH
32854: FOR_TO
32855: IFFALSE 32876
// SetSkill ( i , j , 10 ) ;
32857: LD_VAR 0 2
32861: PPUSH
32862: LD_VAR 0 3
32866: PPUSH
32867: LD_INT 10
32869: PPUSH
32870: CALL_OW 237
32874: GO 32854
32876: POP
32877: POP
// end ;
32878: GO 32827
32880: POP
32881: POP
// end ;
32882: LD_VAR 0 1
32886: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32887: LD_INT 0
32889: PPUSH
32890: PPUSH
32891: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32892: LD_ADDR_VAR 0 2
32896: PUSH
32897: LD_INT 22
32899: PUSH
32900: LD_OWVAR 2
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 21
32911: PUSH
32912: LD_INT 1
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PPUSH
32923: CALL_OW 69
32927: PUSH
32928: FOR_IN
32929: IFFALSE 32970
// begin for j := 1 to 4 do
32931: LD_ADDR_VAR 0 3
32935: PUSH
32936: DOUBLE
32937: LD_INT 1
32939: DEC
32940: ST_TO_ADDR
32941: LD_INT 4
32943: PUSH
32944: FOR_TO
32945: IFFALSE 32966
// SetSkill ( i , j , 10 ) ;
32947: LD_VAR 0 2
32951: PPUSH
32952: LD_VAR 0 3
32956: PPUSH
32957: LD_INT 10
32959: PPUSH
32960: CALL_OW 237
32964: GO 32944
32966: POP
32967: POP
// end ;
32968: GO 32928
32970: POP
32971: POP
// end ;
32972: LD_VAR 0 1
32976: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32977: LD_INT 0
32979: PPUSH
// uc_side := your_side ;
32980: LD_ADDR_OWVAR 20
32984: PUSH
32985: LD_OWVAR 2
32989: ST_TO_ADDR
// uc_nation := nation ;
32990: LD_ADDR_OWVAR 21
32994: PUSH
32995: LD_VAR 0 1
32999: ST_TO_ADDR
// InitHc ;
33000: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33004: LD_INT 0
33006: PPUSH
33007: LD_VAR 0 2
33011: PPUSH
33012: LD_VAR 0 3
33016: PPUSH
33017: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33021: LD_VAR 0 4
33025: PPUSH
33026: LD_VAR 0 5
33030: PPUSH
33031: CALL_OW 428
33035: PUSH
33036: LD_INT 0
33038: EQUAL
33039: IFFALSE 33063
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33041: CALL_OW 44
33045: PPUSH
33046: LD_VAR 0 4
33050: PPUSH
33051: LD_VAR 0 5
33055: PPUSH
33056: LD_INT 1
33058: PPUSH
33059: CALL_OW 48
// end ;
33063: LD_VAR 0 6
33067: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33068: LD_INT 0
33070: PPUSH
33071: PPUSH
// uc_side := your_side ;
33072: LD_ADDR_OWVAR 20
33076: PUSH
33077: LD_OWVAR 2
33081: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33082: LD_VAR 0 1
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: LD_INT 2
33092: PUSH
33093: LD_INT 3
33095: PUSH
33096: LD_INT 4
33098: PUSH
33099: LD_INT 5
33101: PUSH
33102: EMPTY
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: IN
33109: IFFALSE 33121
// uc_nation := nation_american else
33111: LD_ADDR_OWVAR 21
33115: PUSH
33116: LD_INT 1
33118: ST_TO_ADDR
33119: GO 33164
// if chassis in [ 11 , 12 , 13 , 14 ] then
33121: LD_VAR 0 1
33125: PUSH
33126: LD_INT 11
33128: PUSH
33129: LD_INT 12
33131: PUSH
33132: LD_INT 13
33134: PUSH
33135: LD_INT 14
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: IN
33144: IFFALSE 33156
// uc_nation := nation_arabian else
33146: LD_ADDR_OWVAR 21
33150: PUSH
33151: LD_INT 2
33153: ST_TO_ADDR
33154: GO 33164
// uc_nation := nation_russian ;
33156: LD_ADDR_OWVAR 21
33160: PUSH
33161: LD_INT 3
33163: ST_TO_ADDR
// vc_chassis := chassis ;
33164: LD_ADDR_OWVAR 37
33168: PUSH
33169: LD_VAR 0 1
33173: ST_TO_ADDR
// vc_engine := engine ;
33174: LD_ADDR_OWVAR 39
33178: PUSH
33179: LD_VAR 0 2
33183: ST_TO_ADDR
// vc_control := control ;
33184: LD_ADDR_OWVAR 38
33188: PUSH
33189: LD_VAR 0 3
33193: ST_TO_ADDR
// vc_weapon := weapon ;
33194: LD_ADDR_OWVAR 40
33198: PUSH
33199: LD_VAR 0 4
33203: ST_TO_ADDR
// un := CreateVehicle ;
33204: LD_ADDR_VAR 0 8
33208: PUSH
33209: CALL_OW 45
33213: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33214: LD_VAR 0 8
33218: PPUSH
33219: LD_INT 0
33221: PPUSH
33222: LD_INT 5
33224: PPUSH
33225: CALL_OW 12
33229: PPUSH
33230: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33234: LD_VAR 0 8
33238: PPUSH
33239: LD_VAR 0 5
33243: PPUSH
33244: LD_VAR 0 6
33248: PPUSH
33249: LD_INT 1
33251: PPUSH
33252: CALL_OW 48
// end ;
33256: LD_VAR 0 7
33260: RET
// export hInvincible ; every 1 do
33261: GO 33263
33263: DISABLE
// hInvincible := [ ] ;
33264: LD_ADDR_EXP 122
33268: PUSH
33269: EMPTY
33270: ST_TO_ADDR
33271: END
// every 10 do var i ;
33272: GO 33274
33274: DISABLE
33275: LD_INT 0
33277: PPUSH
// begin enable ;
33278: ENABLE
// if not hInvincible then
33279: LD_EXP 122
33283: NOT
33284: IFFALSE 33288
// exit ;
33286: GO 33332
// for i in hInvincible do
33288: LD_ADDR_VAR 0 1
33292: PUSH
33293: LD_EXP 122
33297: PUSH
33298: FOR_IN
33299: IFFALSE 33330
// if GetLives ( i ) < 1000 then
33301: LD_VAR 0 1
33305: PPUSH
33306: CALL_OW 256
33310: PUSH
33311: LD_INT 1000
33313: LESS
33314: IFFALSE 33328
// SetLives ( i , 1000 ) ;
33316: LD_VAR 0 1
33320: PPUSH
33321: LD_INT 1000
33323: PPUSH
33324: CALL_OW 234
33328: GO 33298
33330: POP
33331: POP
// end ;
33332: PPOPN 1
33334: END
// export function hHackInvincible ; var i ; begin
33335: LD_INT 0
33337: PPUSH
33338: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33339: LD_ADDR_VAR 0 2
33343: PUSH
33344: LD_INT 2
33346: PUSH
33347: LD_INT 21
33349: PUSH
33350: LD_INT 1
33352: PUSH
33353: EMPTY
33354: LIST
33355: LIST
33356: PUSH
33357: LD_INT 21
33359: PUSH
33360: LD_INT 2
33362: PUSH
33363: EMPTY
33364: LIST
33365: LIST
33366: PUSH
33367: EMPTY
33368: LIST
33369: LIST
33370: LIST
33371: PPUSH
33372: CALL_OW 69
33376: PUSH
33377: FOR_IN
33378: IFFALSE 33439
// if IsSelected ( i ) then
33380: LD_VAR 0 2
33384: PPUSH
33385: CALL_OW 306
33389: IFFALSE 33437
// begin if i in hInvincible then
33391: LD_VAR 0 2
33395: PUSH
33396: LD_EXP 122
33400: IN
33401: IFFALSE 33421
// hInvincible := hInvincible diff i else
33403: LD_ADDR_EXP 122
33407: PUSH
33408: LD_EXP 122
33412: PUSH
33413: LD_VAR 0 2
33417: DIFF
33418: ST_TO_ADDR
33419: GO 33437
// hInvincible := hInvincible union i ;
33421: LD_ADDR_EXP 122
33425: PUSH
33426: LD_EXP 122
33430: PUSH
33431: LD_VAR 0 2
33435: UNION
33436: ST_TO_ADDR
// end ;
33437: GO 33377
33439: POP
33440: POP
// end ;
33441: LD_VAR 0 1
33445: RET
// export function hHackInvisible ; var i , j ; begin
33446: LD_INT 0
33448: PPUSH
33449: PPUSH
33450: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33451: LD_ADDR_VAR 0 2
33455: PUSH
33456: LD_INT 21
33458: PUSH
33459: LD_INT 1
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PPUSH
33466: CALL_OW 69
33470: PUSH
33471: FOR_IN
33472: IFFALSE 33496
// if IsSelected ( i ) then
33474: LD_VAR 0 2
33478: PPUSH
33479: CALL_OW 306
33483: IFFALSE 33494
// ComForceInvisible ( i ) ;
33485: LD_VAR 0 2
33489: PPUSH
33490: CALL_OW 496
33494: GO 33471
33496: POP
33497: POP
// end ;
33498: LD_VAR 0 1
33502: RET
// export function hHackChangeYourSide ; begin
33503: LD_INT 0
33505: PPUSH
// if your_side = 8 then
33506: LD_OWVAR 2
33510: PUSH
33511: LD_INT 8
33513: EQUAL
33514: IFFALSE 33526
// your_side := 0 else
33516: LD_ADDR_OWVAR 2
33520: PUSH
33521: LD_INT 0
33523: ST_TO_ADDR
33524: GO 33540
// your_side := your_side + 1 ;
33526: LD_ADDR_OWVAR 2
33530: PUSH
33531: LD_OWVAR 2
33535: PUSH
33536: LD_INT 1
33538: PLUS
33539: ST_TO_ADDR
// end ;
33540: LD_VAR 0 1
33544: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33545: LD_INT 0
33547: PPUSH
33548: PPUSH
33549: PPUSH
// for i in all_units do
33550: LD_ADDR_VAR 0 2
33554: PUSH
33555: LD_OWVAR 3
33559: PUSH
33560: FOR_IN
33561: IFFALSE 33639
// if IsSelected ( i ) then
33563: LD_VAR 0 2
33567: PPUSH
33568: CALL_OW 306
33572: IFFALSE 33637
// begin j := GetSide ( i ) ;
33574: LD_ADDR_VAR 0 3
33578: PUSH
33579: LD_VAR 0 2
33583: PPUSH
33584: CALL_OW 255
33588: ST_TO_ADDR
// if j = 8 then
33589: LD_VAR 0 3
33593: PUSH
33594: LD_INT 8
33596: EQUAL
33597: IFFALSE 33609
// j := 0 else
33599: LD_ADDR_VAR 0 3
33603: PUSH
33604: LD_INT 0
33606: ST_TO_ADDR
33607: GO 33623
// j := j + 1 ;
33609: LD_ADDR_VAR 0 3
33613: PUSH
33614: LD_VAR 0 3
33618: PUSH
33619: LD_INT 1
33621: PLUS
33622: ST_TO_ADDR
// SetSide ( i , j ) ;
33623: LD_VAR 0 2
33627: PPUSH
33628: LD_VAR 0 3
33632: PPUSH
33633: CALL_OW 235
// end ;
33637: GO 33560
33639: POP
33640: POP
// end ;
33641: LD_VAR 0 1
33645: RET
// export function hHackFog ; begin
33646: LD_INT 0
33648: PPUSH
// FogOff ( true ) ;
33649: LD_INT 1
33651: PPUSH
33652: CALL_OW 344
// end ;
33656: LD_VAR 0 1
33660: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33661: LD_INT 0
33663: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33664: LD_VAR 0 1
33668: PPUSH
33669: LD_VAR 0 2
33673: PPUSH
33674: LD_VAR 0 3
33678: PPUSH
33679: LD_INT 1
33681: PPUSH
33682: LD_INT 1
33684: PPUSH
33685: CALL_OW 483
// CenterOnXY ( x , y ) ;
33689: LD_VAR 0 2
33693: PPUSH
33694: LD_VAR 0 3
33698: PPUSH
33699: CALL_OW 84
// end ; end_of_file
33703: LD_VAR 0 4
33707: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
33708: LD_INT 0
33710: PPUSH
33711: PPUSH
33712: PPUSH
33713: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
33714: LD_VAR 0 1
33718: PPUSH
33719: CALL_OW 264
33723: PUSH
33724: LD_EXP 49
33728: EQUAL
33729: IFFALSE 33801
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
33731: LD_INT 68
33733: PPUSH
33734: LD_VAR 0 1
33738: PPUSH
33739: CALL_OW 255
33743: PPUSH
33744: CALL_OW 321
33748: PUSH
33749: LD_INT 2
33751: EQUAL
33752: IFFALSE 33764
// eff := 70 else
33754: LD_ADDR_VAR 0 4
33758: PUSH
33759: LD_INT 70
33761: ST_TO_ADDR
33762: GO 33772
// eff := 30 ;
33764: LD_ADDR_VAR 0 4
33768: PUSH
33769: LD_INT 30
33771: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
33772: LD_VAR 0 1
33776: PPUSH
33777: CALL_OW 250
33781: PPUSH
33782: LD_VAR 0 1
33786: PPUSH
33787: CALL_OW 251
33791: PPUSH
33792: LD_VAR 0 4
33796: PPUSH
33797: CALL_OW 495
// end ; end ;
33801: LD_VAR 0 2
33805: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
33806: LD_INT 0
33808: PPUSH
// end ;
33809: LD_VAR 0 4
33813: RET
// export function SOS_Command ( cmd ) ; begin
33814: LD_INT 0
33816: PPUSH
// end ;
33817: LD_VAR 0 2
33821: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
33822: LD_INT 0
33824: PPUSH
// end ;
33825: LD_VAR 0 6
33829: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
33830: LD_INT 0
33832: PPUSH
33833: PPUSH
// if not vehicle or not factory then
33834: LD_VAR 0 1
33838: NOT
33839: PUSH
33840: LD_VAR 0 2
33844: NOT
33845: OR
33846: IFFALSE 33850
// exit ;
33848: GO 34081
// if factoryWaypoints >= factory then
33850: LD_EXP 123
33854: PUSH
33855: LD_VAR 0 2
33859: GREATEREQUAL
33860: IFFALSE 34081
// if factoryWaypoints [ factory ] then
33862: LD_EXP 123
33866: PUSH
33867: LD_VAR 0 2
33871: ARRAY
33872: IFFALSE 34081
// begin if GetControl ( vehicle ) = control_manual then
33874: LD_VAR 0 1
33878: PPUSH
33879: CALL_OW 263
33883: PUSH
33884: LD_INT 1
33886: EQUAL
33887: IFFALSE 33968
// begin driver := IsDrivenBy ( vehicle ) ;
33889: LD_ADDR_VAR 0 4
33893: PUSH
33894: LD_VAR 0 1
33898: PPUSH
33899: CALL_OW 311
33903: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
33904: LD_VAR 0 4
33908: PPUSH
33909: LD_EXP 123
33913: PUSH
33914: LD_VAR 0 2
33918: ARRAY
33919: PUSH
33920: LD_INT 3
33922: ARRAY
33923: PPUSH
33924: LD_EXP 123
33928: PUSH
33929: LD_VAR 0 2
33933: ARRAY
33934: PUSH
33935: LD_INT 4
33937: ARRAY
33938: PPUSH
33939: CALL_OW 171
// AddComExitVehicle ( driver ) ;
33943: LD_VAR 0 4
33947: PPUSH
33948: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
33952: LD_VAR 0 4
33956: PPUSH
33957: LD_VAR 0 2
33961: PPUSH
33962: CALL_OW 180
// end else
33966: GO 34081
// if GetControl ( vehicle ) = control_remote then
33968: LD_VAR 0 1
33972: PPUSH
33973: CALL_OW 263
33977: PUSH
33978: LD_INT 2
33980: EQUAL
33981: IFFALSE 34042
// begin wait ( 0 0$2 ) ;
33983: LD_INT 70
33985: PPUSH
33986: CALL_OW 67
// if Connect ( vehicle ) then
33990: LD_VAR 0 1
33994: PPUSH
33995: CALL 46305 0 1
33999: IFFALSE 34040
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34001: LD_VAR 0 1
34005: PPUSH
34006: LD_EXP 123
34010: PUSH
34011: LD_VAR 0 2
34015: ARRAY
34016: PUSH
34017: LD_INT 3
34019: ARRAY
34020: PPUSH
34021: LD_EXP 123
34025: PUSH
34026: LD_VAR 0 2
34030: ARRAY
34031: PUSH
34032: LD_INT 4
34034: ARRAY
34035: PPUSH
34036: CALL_OW 171
// end else
34040: GO 34081
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34042: LD_VAR 0 1
34046: PPUSH
34047: LD_EXP 123
34051: PUSH
34052: LD_VAR 0 2
34056: ARRAY
34057: PUSH
34058: LD_INT 3
34060: ARRAY
34061: PPUSH
34062: LD_EXP 123
34066: PUSH
34067: LD_VAR 0 2
34071: ARRAY
34072: PUSH
34073: LD_INT 4
34075: ARRAY
34076: PPUSH
34077: CALL_OW 171
// end ; end ;
34081: LD_VAR 0 3
34085: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
34086: LD_INT 0
34088: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
34089: LD_VAR 0 1
34093: PUSH
34094: LD_INT 250
34096: EQUAL
34097: PUSH
34098: LD_VAR 0 2
34102: PPUSH
34103: CALL_OW 264
34107: PUSH
34108: LD_EXP 52
34112: EQUAL
34113: AND
34114: IFFALSE 34135
// MinerPlaceMine ( unit , x , y ) ;
34116: LD_VAR 0 2
34120: PPUSH
34121: LD_VAR 0 4
34125: PPUSH
34126: LD_VAR 0 5
34130: PPUSH
34131: CALL 36863 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
34135: LD_VAR 0 1
34139: PUSH
34140: LD_INT 251
34142: EQUAL
34143: PUSH
34144: LD_VAR 0 2
34148: PPUSH
34149: CALL_OW 264
34153: PUSH
34154: LD_EXP 52
34158: EQUAL
34159: AND
34160: IFFALSE 34181
// MinerDetonateMine ( unit , x , y ) ;
34162: LD_VAR 0 2
34166: PPUSH
34167: LD_VAR 0 4
34171: PPUSH
34172: LD_VAR 0 5
34176: PPUSH
34177: CALL 37140 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
34181: LD_VAR 0 1
34185: PUSH
34186: LD_INT 252
34188: EQUAL
34189: PUSH
34190: LD_VAR 0 2
34194: PPUSH
34195: CALL_OW 264
34199: PUSH
34200: LD_EXP 52
34204: EQUAL
34205: AND
34206: IFFALSE 34227
// MinerCreateMinefield ( unit , x , y ) ;
34208: LD_VAR 0 2
34212: PPUSH
34213: LD_VAR 0 4
34217: PPUSH
34218: LD_VAR 0 5
34222: PPUSH
34223: CALL 37557 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
34227: LD_VAR 0 1
34231: PUSH
34232: LD_INT 253
34234: EQUAL
34235: PUSH
34236: LD_VAR 0 2
34240: PPUSH
34241: CALL_OW 257
34245: PUSH
34246: LD_INT 5
34248: EQUAL
34249: AND
34250: IFFALSE 34271
// ComBinocular ( unit , x , y ) ;
34252: LD_VAR 0 2
34256: PPUSH
34257: LD_VAR 0 4
34261: PPUSH
34262: LD_VAR 0 5
34266: PPUSH
34267: CALL 37928 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
34271: LD_VAR 0 1
34275: PUSH
34276: LD_INT 254
34278: EQUAL
34279: PUSH
34280: LD_VAR 0 2
34284: PPUSH
34285: CALL_OW 264
34289: PUSH
34290: LD_EXP 47
34294: EQUAL
34295: AND
34296: PUSH
34297: LD_VAR 0 3
34301: PPUSH
34302: CALL_OW 263
34306: PUSH
34307: LD_INT 3
34309: EQUAL
34310: AND
34311: IFFALSE 34327
// HackDestroyVehicle ( unit , selectedUnit ) ;
34313: LD_VAR 0 2
34317: PPUSH
34318: LD_VAR 0 3
34322: PPUSH
34323: CALL 36223 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
34327: LD_VAR 0 1
34331: PUSH
34332: LD_INT 255
34334: EQUAL
34335: PUSH
34336: LD_VAR 0 2
34340: PPUSH
34341: CALL_OW 264
34345: PUSH
34346: LD_INT 14
34348: PUSH
34349: LD_INT 53
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: IN
34356: AND
34357: PUSH
34358: LD_VAR 0 4
34362: PPUSH
34363: LD_VAR 0 5
34367: PPUSH
34368: CALL_OW 488
34372: AND
34373: IFFALSE 34397
// CutTreeXYR ( unit , x , y , 12 ) ;
34375: LD_VAR 0 2
34379: PPUSH
34380: LD_VAR 0 4
34384: PPUSH
34385: LD_VAR 0 5
34389: PPUSH
34390: LD_INT 12
34392: PPUSH
34393: CALL 34789 0 4
// if cmd = 256 then
34397: LD_VAR 0 1
34401: PUSH
34402: LD_INT 256
34404: EQUAL
34405: IFFALSE 34426
// SetFactoryWaypoint ( unit , x , y ) ;
34407: LD_VAR 0 2
34411: PPUSH
34412: LD_VAR 0 4
34416: PPUSH
34417: LD_VAR 0 5
34421: PPUSH
34422: CALL 34431 0 3
// end ;
34426: LD_VAR 0 6
34430: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
34431: LD_INT 0
34433: PPUSH
34434: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
34435: LD_VAR 0 1
34439: NOT
34440: PUSH
34441: LD_VAR 0 2
34445: PPUSH
34446: LD_VAR 0 3
34450: PPUSH
34451: CALL_OW 488
34455: NOT
34456: OR
34457: PUSH
34458: LD_VAR 0 1
34462: PPUSH
34463: CALL_OW 266
34467: PUSH
34468: LD_INT 3
34470: NONEQUAL
34471: PUSH
34472: LD_VAR 0 1
34476: PPUSH
34477: CALL_OW 247
34481: PUSH
34482: LD_INT 1
34484: EQUAL
34485: NOT
34486: AND
34487: OR
34488: IFFALSE 34492
// exit ;
34490: GO 34641
// if GetType ( factory ) = unit_human then
34492: LD_VAR 0 1
34496: PPUSH
34497: CALL_OW 247
34501: PUSH
34502: LD_INT 1
34504: EQUAL
34505: IFFALSE 34522
// factory := IsInUnit ( factory ) ;
34507: LD_ADDR_VAR 0 1
34511: PUSH
34512: LD_VAR 0 1
34516: PPUSH
34517: CALL_OW 310
34521: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34522: LD_VAR 0 1
34526: PPUSH
34527: CALL_OW 266
34531: PUSH
34532: LD_INT 3
34534: NONEQUAL
34535: IFFALSE 34539
// exit ;
34537: GO 34641
// if HexInfo ( x , y ) = factory then
34539: LD_VAR 0 2
34543: PPUSH
34544: LD_VAR 0 3
34548: PPUSH
34549: CALL_OW 428
34553: PUSH
34554: LD_VAR 0 1
34558: EQUAL
34559: IFFALSE 34586
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
34561: LD_ADDR_EXP 123
34565: PUSH
34566: LD_EXP 123
34570: PPUSH
34571: LD_VAR 0 1
34575: PPUSH
34576: LD_INT 0
34578: PPUSH
34579: CALL_OW 1
34583: ST_TO_ADDR
34584: GO 34637
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
34586: LD_ADDR_EXP 123
34590: PUSH
34591: LD_EXP 123
34595: PPUSH
34596: LD_VAR 0 1
34600: PPUSH
34601: LD_VAR 0 1
34605: PPUSH
34606: CALL_OW 255
34610: PUSH
34611: LD_VAR 0 1
34615: PUSH
34616: LD_VAR 0 2
34620: PUSH
34621: LD_VAR 0 3
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: PPUSH
34632: CALL_OW 1
34636: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34637: CALL 34646 0 0
// end ;
34641: LD_VAR 0 4
34645: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
34646: LD_INT 0
34648: PPUSH
34649: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34650: LD_STRING resetFactoryWaypoint();
34652: PPUSH
34653: CALL_OW 559
// if factoryWaypoints then
34657: LD_EXP 123
34661: IFFALSE 34784
// begin for i := 1 to factoryWaypoints do
34663: LD_ADDR_VAR 0 2
34667: PUSH
34668: DOUBLE
34669: LD_INT 1
34671: DEC
34672: ST_TO_ADDR
34673: LD_EXP 123
34677: PUSH
34678: FOR_TO
34679: IFFALSE 34782
// if factoryWaypoints [ i ] then
34681: LD_EXP 123
34685: PUSH
34686: LD_VAR 0 2
34690: ARRAY
34691: IFFALSE 34780
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
34693: LD_STRING setFactoryWaypointXY(
34695: PUSH
34696: LD_EXP 123
34700: PUSH
34701: LD_VAR 0 2
34705: ARRAY
34706: PUSH
34707: LD_INT 1
34709: ARRAY
34710: STR
34711: PUSH
34712: LD_STRING ,
34714: STR
34715: PUSH
34716: LD_EXP 123
34720: PUSH
34721: LD_VAR 0 2
34725: ARRAY
34726: PUSH
34727: LD_INT 2
34729: ARRAY
34730: STR
34731: PUSH
34732: LD_STRING ,
34734: STR
34735: PUSH
34736: LD_EXP 123
34740: PUSH
34741: LD_VAR 0 2
34745: ARRAY
34746: PUSH
34747: LD_INT 3
34749: ARRAY
34750: STR
34751: PUSH
34752: LD_STRING ,
34754: STR
34755: PUSH
34756: LD_EXP 123
34760: PUSH
34761: LD_VAR 0 2
34765: ARRAY
34766: PUSH
34767: LD_INT 4
34769: ARRAY
34770: STR
34771: PUSH
34772: LD_STRING )
34774: STR
34775: PPUSH
34776: CALL_OW 559
34780: GO 34678
34782: POP
34783: POP
// end ; end ;
34784: LD_VAR 0 1
34788: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34789: LD_INT 0
34791: PPUSH
34792: PPUSH
34793: PPUSH
34794: PPUSH
34795: PPUSH
34796: PPUSH
34797: PPUSH
34798: PPUSH
34799: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34800: LD_VAR 0 1
34804: NOT
34805: PUSH
34806: LD_VAR 0 2
34810: PPUSH
34811: LD_VAR 0 3
34815: PPUSH
34816: CALL_OW 488
34820: NOT
34821: OR
34822: PUSH
34823: LD_VAR 0 4
34827: NOT
34828: OR
34829: IFFALSE 34833
// exit ;
34831: GO 35173
// list := [ ] ;
34833: LD_ADDR_VAR 0 13
34837: PUSH
34838: EMPTY
34839: ST_TO_ADDR
// if x - r < 0 then
34840: LD_VAR 0 2
34844: PUSH
34845: LD_VAR 0 4
34849: MINUS
34850: PUSH
34851: LD_INT 0
34853: LESS
34854: IFFALSE 34866
// min_x := 0 else
34856: LD_ADDR_VAR 0 7
34860: PUSH
34861: LD_INT 0
34863: ST_TO_ADDR
34864: GO 34882
// min_x := x - r ;
34866: LD_ADDR_VAR 0 7
34870: PUSH
34871: LD_VAR 0 2
34875: PUSH
34876: LD_VAR 0 4
34880: MINUS
34881: ST_TO_ADDR
// if y - r < 0 then
34882: LD_VAR 0 3
34886: PUSH
34887: LD_VAR 0 4
34891: MINUS
34892: PUSH
34893: LD_INT 0
34895: LESS
34896: IFFALSE 34908
// min_y := 0 else
34898: LD_ADDR_VAR 0 8
34902: PUSH
34903: LD_INT 0
34905: ST_TO_ADDR
34906: GO 34924
// min_y := y - r ;
34908: LD_ADDR_VAR 0 8
34912: PUSH
34913: LD_VAR 0 3
34917: PUSH
34918: LD_VAR 0 4
34922: MINUS
34923: ST_TO_ADDR
// max_x := x + r ;
34924: LD_ADDR_VAR 0 9
34928: PUSH
34929: LD_VAR 0 2
34933: PUSH
34934: LD_VAR 0 4
34938: PLUS
34939: ST_TO_ADDR
// max_y := y + r ;
34940: LD_ADDR_VAR 0 10
34944: PUSH
34945: LD_VAR 0 3
34949: PUSH
34950: LD_VAR 0 4
34954: PLUS
34955: ST_TO_ADDR
// for _x = min_x to max_x do
34956: LD_ADDR_VAR 0 11
34960: PUSH
34961: DOUBLE
34962: LD_VAR 0 7
34966: DEC
34967: ST_TO_ADDR
34968: LD_VAR 0 9
34972: PUSH
34973: FOR_TO
34974: IFFALSE 35091
// for _y = min_y to max_y do
34976: LD_ADDR_VAR 0 12
34980: PUSH
34981: DOUBLE
34982: LD_VAR 0 8
34986: DEC
34987: ST_TO_ADDR
34988: LD_VAR 0 10
34992: PUSH
34993: FOR_TO
34994: IFFALSE 35087
// begin if not ValidHex ( _x , _y ) then
34996: LD_VAR 0 11
35000: PPUSH
35001: LD_VAR 0 12
35005: PPUSH
35006: CALL_OW 488
35010: NOT
35011: IFFALSE 35015
// continue ;
35013: GO 34993
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35015: LD_VAR 0 11
35019: PPUSH
35020: LD_VAR 0 12
35024: PPUSH
35025: CALL_OW 351
35029: PUSH
35030: LD_VAR 0 11
35034: PPUSH
35035: LD_VAR 0 12
35039: PPUSH
35040: CALL_OW 554
35044: AND
35045: IFFALSE 35085
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35047: LD_ADDR_VAR 0 13
35051: PUSH
35052: LD_VAR 0 13
35056: PPUSH
35057: LD_VAR 0 13
35061: PUSH
35062: LD_INT 1
35064: PLUS
35065: PPUSH
35066: LD_VAR 0 11
35070: PUSH
35071: LD_VAR 0 12
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PPUSH
35080: CALL_OW 2
35084: ST_TO_ADDR
// end ;
35085: GO 34993
35087: POP
35088: POP
35089: GO 34973
35091: POP
35092: POP
// if not list then
35093: LD_VAR 0 13
35097: NOT
35098: IFFALSE 35102
// exit ;
35100: GO 35173
// for i in list do
35102: LD_ADDR_VAR 0 6
35106: PUSH
35107: LD_VAR 0 13
35111: PUSH
35112: FOR_IN
35113: IFFALSE 35171
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35115: LD_VAR 0 1
35119: PPUSH
35120: LD_STRING M
35122: PUSH
35123: LD_VAR 0 6
35127: PUSH
35128: LD_INT 1
35130: ARRAY
35131: PUSH
35132: LD_VAR 0 6
35136: PUSH
35137: LD_INT 2
35139: ARRAY
35140: PUSH
35141: LD_INT 0
35143: PUSH
35144: LD_INT 0
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: PUSH
35162: EMPTY
35163: LIST
35164: PPUSH
35165: CALL_OW 447
35169: GO 35112
35171: POP
35172: POP
// end ;
35173: LD_VAR 0 5
35177: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35178: LD_EXP 124
35182: NOT
35183: IFFALSE 35233
35185: GO 35187
35187: DISABLE
// begin initHack := true ;
35188: LD_ADDR_EXP 124
35192: PUSH
35193: LD_INT 1
35195: ST_TO_ADDR
// hackTanks := [ ] ;
35196: LD_ADDR_EXP 125
35200: PUSH
35201: EMPTY
35202: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35203: LD_ADDR_EXP 126
35207: PUSH
35208: EMPTY
35209: ST_TO_ADDR
// hackLimit := 3 ;
35210: LD_ADDR_EXP 127
35214: PUSH
35215: LD_INT 3
35217: ST_TO_ADDR
// hackDist := 12 ;
35218: LD_ADDR_EXP 128
35222: PUSH
35223: LD_INT 12
35225: ST_TO_ADDR
// hackCounter := [ ] ;
35226: LD_ADDR_EXP 129
35230: PUSH
35231: EMPTY
35232: ST_TO_ADDR
// end ;
35233: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35234: LD_EXP 124
35238: PUSH
35239: LD_INT 34
35241: PUSH
35242: LD_EXP 47
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PPUSH
35251: CALL_OW 69
35255: AND
35256: IFFALSE 35511
35258: GO 35260
35260: DISABLE
35261: LD_INT 0
35263: PPUSH
35264: PPUSH
// begin enable ;
35265: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35266: LD_ADDR_VAR 0 1
35270: PUSH
35271: LD_INT 34
35273: PUSH
35274: LD_EXP 47
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PPUSH
35283: CALL_OW 69
35287: PUSH
35288: FOR_IN
35289: IFFALSE 35509
// begin if not i in hackTanks then
35291: LD_VAR 0 1
35295: PUSH
35296: LD_EXP 125
35300: IN
35301: NOT
35302: IFFALSE 35385
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35304: LD_ADDR_EXP 125
35308: PUSH
35309: LD_EXP 125
35313: PPUSH
35314: LD_EXP 125
35318: PUSH
35319: LD_INT 1
35321: PLUS
35322: PPUSH
35323: LD_VAR 0 1
35327: PPUSH
35328: CALL_OW 1
35332: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35333: LD_ADDR_EXP 126
35337: PUSH
35338: LD_EXP 126
35342: PPUSH
35343: LD_EXP 126
35347: PUSH
35348: LD_INT 1
35350: PLUS
35351: PPUSH
35352: EMPTY
35353: PPUSH
35354: CALL_OW 1
35358: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
35359: LD_ADDR_EXP 129
35363: PUSH
35364: LD_EXP 129
35368: PPUSH
35369: LD_EXP 129
35373: PUSH
35374: LD_INT 1
35376: PLUS
35377: PPUSH
35378: EMPTY
35379: PPUSH
35380: CALL_OW 1
35384: ST_TO_ADDR
// end ; if not IsOk ( i ) then
35385: LD_VAR 0 1
35389: PPUSH
35390: CALL_OW 302
35394: NOT
35395: IFFALSE 35408
// begin HackUnlinkAll ( i ) ;
35397: LD_VAR 0 1
35401: PPUSH
35402: CALL 35514 0 1
// continue ;
35406: GO 35288
// end ; HackCheckCapturedStatus ( i ) ;
35408: LD_VAR 0 1
35412: PPUSH
35413: CALL 35957 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
35417: LD_ADDR_VAR 0 2
35421: PUSH
35422: LD_INT 81
35424: PUSH
35425: LD_VAR 0 1
35429: PPUSH
35430: CALL_OW 255
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 33
35441: PUSH
35442: LD_INT 3
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 91
35451: PUSH
35452: LD_VAR 0 1
35456: PUSH
35457: LD_EXP 128
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: LIST
35466: PUSH
35467: LD_INT 50
35469: PUSH
35470: EMPTY
35471: LIST
35472: PUSH
35473: EMPTY
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: PPUSH
35479: CALL_OW 69
35483: ST_TO_ADDR
// if not tmp then
35484: LD_VAR 0 2
35488: NOT
35489: IFFALSE 35493
// continue ;
35491: GO 35288
// HackLink ( i , tmp ) ;
35493: LD_VAR 0 1
35497: PPUSH
35498: LD_VAR 0 2
35502: PPUSH
35503: CALL 35650 0 2
// end ;
35507: GO 35288
35509: POP
35510: POP
// end ;
35511: PPOPN 2
35513: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
35514: LD_INT 0
35516: PPUSH
35517: PPUSH
35518: PPUSH
// if not hack in hackTanks then
35519: LD_VAR 0 1
35523: PUSH
35524: LD_EXP 125
35528: IN
35529: NOT
35530: IFFALSE 35534
// exit ;
35532: GO 35645
// index := GetElementIndex ( hackTanks , hack ) ;
35534: LD_ADDR_VAR 0 4
35538: PUSH
35539: LD_EXP 125
35543: PPUSH
35544: LD_VAR 0 1
35548: PPUSH
35549: CALL 43119 0 2
35553: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
35554: LD_EXP 126
35558: PUSH
35559: LD_VAR 0 4
35563: ARRAY
35564: IFFALSE 35645
// begin for i in hackTanksCaptured [ index ] do
35566: LD_ADDR_VAR 0 3
35570: PUSH
35571: LD_EXP 126
35575: PUSH
35576: LD_VAR 0 4
35580: ARRAY
35581: PUSH
35582: FOR_IN
35583: IFFALSE 35609
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
35585: LD_VAR 0 3
35589: PUSH
35590: LD_INT 1
35592: ARRAY
35593: PPUSH
35594: LD_VAR 0 3
35598: PUSH
35599: LD_INT 2
35601: ARRAY
35602: PPUSH
35603: CALL_OW 235
35607: GO 35582
35609: POP
35610: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
35611: LD_ADDR_EXP 126
35615: PUSH
35616: LD_EXP 126
35620: PPUSH
35621: LD_VAR 0 4
35625: PPUSH
35626: EMPTY
35627: PPUSH
35628: CALL_OW 1
35632: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
35633: LD_VAR 0 1
35637: PPUSH
35638: LD_INT 0
35640: PPUSH
35641: CALL_OW 505
// end ; end ;
35645: LD_VAR 0 2
35649: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
35650: LD_INT 0
35652: PPUSH
35653: PPUSH
35654: PPUSH
// if not hack in hackTanks or not vehicles then
35655: LD_VAR 0 1
35659: PUSH
35660: LD_EXP 125
35664: IN
35665: NOT
35666: PUSH
35667: LD_VAR 0 2
35671: NOT
35672: OR
35673: IFFALSE 35677
// exit ;
35675: GO 35952
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
35677: LD_ADDR_VAR 0 2
35681: PUSH
35682: LD_VAR 0 1
35686: PPUSH
35687: LD_VAR 0 2
35691: PPUSH
35692: LD_INT 1
35694: PPUSH
35695: LD_INT 1
35697: PPUSH
35698: CALL 43769 0 4
35702: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
35703: LD_ADDR_VAR 0 5
35707: PUSH
35708: LD_EXP 125
35712: PPUSH
35713: LD_VAR 0 1
35717: PPUSH
35718: CALL 43119 0 2
35722: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
35723: LD_EXP 126
35727: PUSH
35728: LD_VAR 0 5
35732: ARRAY
35733: PUSH
35734: LD_EXP 127
35738: LESS
35739: IFFALSE 35928
// begin for i := 1 to vehicles do
35741: LD_ADDR_VAR 0 4
35745: PUSH
35746: DOUBLE
35747: LD_INT 1
35749: DEC
35750: ST_TO_ADDR
35751: LD_VAR 0 2
35755: PUSH
35756: FOR_TO
35757: IFFALSE 35926
// begin if hackTanksCaptured [ index ] = hackLimit then
35759: LD_EXP 126
35763: PUSH
35764: LD_VAR 0 5
35768: ARRAY
35769: PUSH
35770: LD_EXP 127
35774: EQUAL
35775: IFFALSE 35779
// break ;
35777: GO 35926
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
35779: LD_ADDR_EXP 129
35783: PUSH
35784: LD_EXP 129
35788: PPUSH
35789: LD_VAR 0 5
35793: PPUSH
35794: LD_EXP 129
35798: PUSH
35799: LD_VAR 0 5
35803: ARRAY
35804: PUSH
35805: LD_INT 1
35807: PLUS
35808: PPUSH
35809: CALL_OW 1
35813: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
35814: LD_ADDR_EXP 126
35818: PUSH
35819: LD_EXP 126
35823: PPUSH
35824: LD_VAR 0 5
35828: PUSH
35829: LD_EXP 126
35833: PUSH
35834: LD_VAR 0 5
35838: ARRAY
35839: PUSH
35840: LD_INT 1
35842: PLUS
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PPUSH
35848: LD_VAR 0 2
35852: PUSH
35853: LD_VAR 0 4
35857: ARRAY
35858: PUSH
35859: LD_VAR 0 2
35863: PUSH
35864: LD_VAR 0 4
35868: ARRAY
35869: PPUSH
35870: CALL_OW 255
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PPUSH
35879: CALL 43334 0 3
35883: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
35884: LD_VAR 0 2
35888: PUSH
35889: LD_VAR 0 4
35893: ARRAY
35894: PPUSH
35895: LD_VAR 0 1
35899: PPUSH
35900: CALL_OW 255
35904: PPUSH
35905: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
35909: LD_VAR 0 2
35913: PUSH
35914: LD_VAR 0 4
35918: ARRAY
35919: PPUSH
35920: CALL_OW 141
// end ;
35924: GO 35756
35926: POP
35927: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
35928: LD_VAR 0 1
35932: PPUSH
35933: LD_EXP 126
35937: PUSH
35938: LD_VAR 0 5
35942: ARRAY
35943: PUSH
35944: LD_INT 0
35946: PLUS
35947: PPUSH
35948: CALL_OW 505
// end ;
35952: LD_VAR 0 3
35956: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
35957: LD_INT 0
35959: PPUSH
35960: PPUSH
35961: PPUSH
35962: PPUSH
// if not hack in hackTanks then
35963: LD_VAR 0 1
35967: PUSH
35968: LD_EXP 125
35972: IN
35973: NOT
35974: IFFALSE 35978
// exit ;
35976: GO 36218
// index := GetElementIndex ( hackTanks , hack ) ;
35978: LD_ADDR_VAR 0 4
35982: PUSH
35983: LD_EXP 125
35987: PPUSH
35988: LD_VAR 0 1
35992: PPUSH
35993: CALL 43119 0 2
35997: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
35998: LD_ADDR_VAR 0 3
36002: PUSH
36003: DOUBLE
36004: LD_EXP 126
36008: PUSH
36009: LD_VAR 0 4
36013: ARRAY
36014: INC
36015: ST_TO_ADDR
36016: LD_INT 1
36018: PUSH
36019: FOR_DOWNTO
36020: IFFALSE 36192
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36022: LD_ADDR_VAR 0 5
36026: PUSH
36027: LD_EXP 126
36031: PUSH
36032: LD_VAR 0 4
36036: ARRAY
36037: PUSH
36038: LD_VAR 0 3
36042: ARRAY
36043: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36044: LD_VAR 0 5
36048: PUSH
36049: LD_INT 1
36051: ARRAY
36052: PPUSH
36053: CALL_OW 302
36057: NOT
36058: PUSH
36059: LD_VAR 0 5
36063: PUSH
36064: LD_INT 1
36066: ARRAY
36067: PPUSH
36068: CALL_OW 255
36072: PUSH
36073: LD_VAR 0 1
36077: PPUSH
36078: CALL_OW 255
36082: NONEQUAL
36083: OR
36084: IFFALSE 36190
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36086: LD_VAR 0 5
36090: PUSH
36091: LD_INT 1
36093: ARRAY
36094: PPUSH
36095: CALL_OW 305
36099: PUSH
36100: LD_VAR 0 5
36104: PUSH
36105: LD_INT 1
36107: ARRAY
36108: PPUSH
36109: CALL_OW 255
36113: PUSH
36114: LD_VAR 0 1
36118: PPUSH
36119: CALL_OW 255
36123: EQUAL
36124: AND
36125: IFFALSE 36149
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36127: LD_VAR 0 5
36131: PUSH
36132: LD_INT 1
36134: ARRAY
36135: PPUSH
36136: LD_VAR 0 5
36140: PUSH
36141: LD_INT 2
36143: ARRAY
36144: PPUSH
36145: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36149: LD_ADDR_EXP 126
36153: PUSH
36154: LD_EXP 126
36158: PPUSH
36159: LD_VAR 0 4
36163: PPUSH
36164: LD_EXP 126
36168: PUSH
36169: LD_VAR 0 4
36173: ARRAY
36174: PPUSH
36175: LD_VAR 0 3
36179: PPUSH
36180: CALL_OW 3
36184: PPUSH
36185: CALL_OW 1
36189: ST_TO_ADDR
// end ; end ;
36190: GO 36019
36192: POP
36193: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36194: LD_VAR 0 1
36198: PPUSH
36199: LD_EXP 126
36203: PUSH
36204: LD_VAR 0 4
36208: ARRAY
36209: PUSH
36210: LD_INT 0
36212: PLUS
36213: PPUSH
36214: CALL_OW 505
// end ;
36218: LD_VAR 0 2
36222: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36223: LD_INT 0
36225: PPUSH
36226: PPUSH
36227: PPUSH
36228: PPUSH
// if not hack in hackTanks then
36229: LD_VAR 0 1
36233: PUSH
36234: LD_EXP 125
36238: IN
36239: NOT
36240: IFFALSE 36244
// exit ;
36242: GO 36329
// index := GetElementIndex ( hackTanks , hack ) ;
36244: LD_ADDR_VAR 0 5
36248: PUSH
36249: LD_EXP 125
36253: PPUSH
36254: LD_VAR 0 1
36258: PPUSH
36259: CALL 43119 0 2
36263: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36264: LD_ADDR_VAR 0 4
36268: PUSH
36269: DOUBLE
36270: LD_INT 1
36272: DEC
36273: ST_TO_ADDR
36274: LD_EXP 126
36278: PUSH
36279: LD_VAR 0 5
36283: ARRAY
36284: PUSH
36285: FOR_TO
36286: IFFALSE 36327
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36288: LD_EXP 126
36292: PUSH
36293: LD_VAR 0 5
36297: ARRAY
36298: PUSH
36299: LD_VAR 0 4
36303: ARRAY
36304: PUSH
36305: LD_INT 1
36307: ARRAY
36308: PUSH
36309: LD_VAR 0 2
36313: EQUAL
36314: IFFALSE 36325
// KillUnit ( vehicle ) ;
36316: LD_VAR 0 2
36320: PPUSH
36321: CALL_OW 66
36325: GO 36285
36327: POP
36328: POP
// end ;
36329: LD_VAR 0 3
36333: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36334: LD_EXP 130
36338: NOT
36339: IFFALSE 36374
36341: GO 36343
36343: DISABLE
// begin initMiner := true ;
36344: LD_ADDR_EXP 130
36348: PUSH
36349: LD_INT 1
36351: ST_TO_ADDR
// minersList := [ ] ;
36352: LD_ADDR_EXP 131
36356: PUSH
36357: EMPTY
36358: ST_TO_ADDR
// minerMinesList := [ ] ;
36359: LD_ADDR_EXP 132
36363: PUSH
36364: EMPTY
36365: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
36366: LD_ADDR_EXP 133
36370: PUSH
36371: LD_INT 5
36373: ST_TO_ADDR
// end ;
36374: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
36375: LD_EXP 130
36379: PUSH
36380: LD_INT 34
36382: PUSH
36383: LD_EXP 52
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PPUSH
36392: CALL_OW 69
36396: AND
36397: IFFALSE 36860
36399: GO 36401
36401: DISABLE
36402: LD_INT 0
36404: PPUSH
36405: PPUSH
36406: PPUSH
36407: PPUSH
// begin enable ;
36408: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
36409: LD_ADDR_VAR 0 1
36413: PUSH
36414: LD_INT 34
36416: PUSH
36417: LD_EXP 52
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: PPUSH
36426: CALL_OW 69
36430: PUSH
36431: FOR_IN
36432: IFFALSE 36504
// begin if not i in minersList then
36434: LD_VAR 0 1
36438: PUSH
36439: LD_EXP 131
36443: IN
36444: NOT
36445: IFFALSE 36502
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
36447: LD_ADDR_EXP 131
36451: PUSH
36452: LD_EXP 131
36456: PPUSH
36457: LD_EXP 131
36461: PUSH
36462: LD_INT 1
36464: PLUS
36465: PPUSH
36466: LD_VAR 0 1
36470: PPUSH
36471: CALL_OW 1
36475: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
36476: LD_ADDR_EXP 132
36480: PUSH
36481: LD_EXP 132
36485: PPUSH
36486: LD_EXP 132
36490: PUSH
36491: LD_INT 1
36493: PLUS
36494: PPUSH
36495: EMPTY
36496: PPUSH
36497: CALL_OW 1
36501: ST_TO_ADDR
// end end ;
36502: GO 36431
36504: POP
36505: POP
// for i := minerMinesList downto 1 do
36506: LD_ADDR_VAR 0 1
36510: PUSH
36511: DOUBLE
36512: LD_EXP 132
36516: INC
36517: ST_TO_ADDR
36518: LD_INT 1
36520: PUSH
36521: FOR_DOWNTO
36522: IFFALSE 36858
// begin if IsLive ( minersList [ i ] ) then
36524: LD_EXP 131
36528: PUSH
36529: LD_VAR 0 1
36533: ARRAY
36534: PPUSH
36535: CALL_OW 300
36539: IFFALSE 36567
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
36541: LD_EXP 131
36545: PUSH
36546: LD_VAR 0 1
36550: ARRAY
36551: PPUSH
36552: LD_EXP 132
36556: PUSH
36557: LD_VAR 0 1
36561: ARRAY
36562: PPUSH
36563: CALL_OW 505
// if not minerMinesList [ i ] then
36567: LD_EXP 132
36571: PUSH
36572: LD_VAR 0 1
36576: ARRAY
36577: NOT
36578: IFFALSE 36582
// continue ;
36580: GO 36521
// for j := minerMinesList [ i ] downto 1 do
36582: LD_ADDR_VAR 0 2
36586: PUSH
36587: DOUBLE
36588: LD_EXP 132
36592: PUSH
36593: LD_VAR 0 1
36597: ARRAY
36598: INC
36599: ST_TO_ADDR
36600: LD_INT 1
36602: PUSH
36603: FOR_DOWNTO
36604: IFFALSE 36854
// begin side := GetSide ( minersList [ i ] ) ;
36606: LD_ADDR_VAR 0 3
36610: PUSH
36611: LD_EXP 131
36615: PUSH
36616: LD_VAR 0 1
36620: ARRAY
36621: PPUSH
36622: CALL_OW 255
36626: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
36627: LD_ADDR_VAR 0 4
36631: PUSH
36632: LD_EXP 132
36636: PUSH
36637: LD_VAR 0 1
36641: ARRAY
36642: PUSH
36643: LD_VAR 0 2
36647: ARRAY
36648: PUSH
36649: LD_INT 1
36651: ARRAY
36652: PPUSH
36653: LD_EXP 132
36657: PUSH
36658: LD_VAR 0 1
36662: ARRAY
36663: PUSH
36664: LD_VAR 0 2
36668: ARRAY
36669: PUSH
36670: LD_INT 2
36672: ARRAY
36673: PPUSH
36674: CALL_OW 428
36678: ST_TO_ADDR
// if not tmp then
36679: LD_VAR 0 4
36683: NOT
36684: IFFALSE 36688
// continue ;
36686: GO 36603
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
36688: LD_VAR 0 4
36692: PUSH
36693: LD_INT 81
36695: PUSH
36696: LD_VAR 0 3
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PPUSH
36705: CALL_OW 69
36709: IN
36710: PUSH
36711: LD_EXP 132
36715: PUSH
36716: LD_VAR 0 1
36720: ARRAY
36721: PUSH
36722: LD_VAR 0 2
36726: ARRAY
36727: PUSH
36728: LD_INT 1
36730: ARRAY
36731: PPUSH
36732: LD_EXP 132
36736: PUSH
36737: LD_VAR 0 1
36741: ARRAY
36742: PUSH
36743: LD_VAR 0 2
36747: ARRAY
36748: PUSH
36749: LD_INT 2
36751: ARRAY
36752: PPUSH
36753: CALL_OW 458
36757: AND
36758: IFFALSE 36852
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
36760: LD_EXP 132
36764: PUSH
36765: LD_VAR 0 1
36769: ARRAY
36770: PUSH
36771: LD_VAR 0 2
36775: ARRAY
36776: PUSH
36777: LD_INT 1
36779: ARRAY
36780: PPUSH
36781: LD_EXP 132
36785: PUSH
36786: LD_VAR 0 1
36790: ARRAY
36791: PUSH
36792: LD_VAR 0 2
36796: ARRAY
36797: PUSH
36798: LD_INT 2
36800: ARRAY
36801: PPUSH
36802: LD_VAR 0 3
36806: PPUSH
36807: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
36811: LD_ADDR_EXP 132
36815: PUSH
36816: LD_EXP 132
36820: PPUSH
36821: LD_VAR 0 1
36825: PPUSH
36826: LD_EXP 132
36830: PUSH
36831: LD_VAR 0 1
36835: ARRAY
36836: PPUSH
36837: LD_VAR 0 2
36841: PPUSH
36842: CALL_OW 3
36846: PPUSH
36847: CALL_OW 1
36851: ST_TO_ADDR
// end ; end ;
36852: GO 36603
36854: POP
36855: POP
// end ;
36856: GO 36521
36858: POP
36859: POP
// end ;
36860: PPOPN 4
36862: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
36863: LD_INT 0
36865: PPUSH
36866: PPUSH
// result := false ;
36867: LD_ADDR_VAR 0 4
36871: PUSH
36872: LD_INT 0
36874: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
36875: LD_VAR 0 1
36879: PPUSH
36880: CALL_OW 264
36884: PUSH
36885: LD_EXP 52
36889: EQUAL
36890: NOT
36891: IFFALSE 36895
// exit ;
36893: GO 37135
// index := GetElementIndex ( minersList , unit ) ;
36895: LD_ADDR_VAR 0 5
36899: PUSH
36900: LD_EXP 131
36904: PPUSH
36905: LD_VAR 0 1
36909: PPUSH
36910: CALL 43119 0 2
36914: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
36915: LD_EXP 132
36919: PUSH
36920: LD_VAR 0 5
36924: ARRAY
36925: PUSH
36926: LD_EXP 133
36930: GREATEREQUAL
36931: IFFALSE 36935
// exit ;
36933: GO 37135
// ComMoveXY ( unit , x , y ) ;
36935: LD_VAR 0 1
36939: PPUSH
36940: LD_VAR 0 2
36944: PPUSH
36945: LD_VAR 0 3
36949: PPUSH
36950: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
36954: LD_INT 35
36956: PPUSH
36957: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
36961: LD_VAR 0 1
36965: PPUSH
36966: LD_VAR 0 2
36970: PPUSH
36971: LD_VAR 0 3
36975: PPUSH
36976: CALL 73838 0 3
36980: NOT
36981: PUSH
36982: LD_VAR 0 1
36986: PPUSH
36987: CALL_OW 314
36991: AND
36992: IFFALSE 36996
// exit ;
36994: GO 37135
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
36996: LD_VAR 0 2
37000: PPUSH
37001: LD_VAR 0 3
37005: PPUSH
37006: CALL_OW 428
37010: PUSH
37011: LD_VAR 0 1
37015: EQUAL
37016: PUSH
37017: LD_VAR 0 1
37021: PPUSH
37022: CALL_OW 314
37026: NOT
37027: AND
37028: IFFALSE 36954
// PlaySoundXY ( x , y , PlantMine ) ;
37030: LD_VAR 0 2
37034: PPUSH
37035: LD_VAR 0 3
37039: PPUSH
37040: LD_STRING PlantMine
37042: PPUSH
37043: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37047: LD_VAR 0 2
37051: PPUSH
37052: LD_VAR 0 3
37056: PPUSH
37057: LD_VAR 0 1
37061: PPUSH
37062: CALL_OW 255
37066: PPUSH
37067: LD_INT 0
37069: PPUSH
37070: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37074: LD_ADDR_EXP 132
37078: PUSH
37079: LD_EXP 132
37083: PPUSH
37084: LD_VAR 0 5
37088: PUSH
37089: LD_EXP 132
37093: PUSH
37094: LD_VAR 0 5
37098: ARRAY
37099: PUSH
37100: LD_INT 1
37102: PLUS
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PPUSH
37108: LD_VAR 0 2
37112: PUSH
37113: LD_VAR 0 3
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PPUSH
37122: CALL 43334 0 3
37126: ST_TO_ADDR
// result := true ;
37127: LD_ADDR_VAR 0 4
37131: PUSH
37132: LD_INT 1
37134: ST_TO_ADDR
// end ;
37135: LD_VAR 0 4
37139: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37140: LD_INT 0
37142: PPUSH
37143: PPUSH
37144: PPUSH
// if not unit in minersList then
37145: LD_VAR 0 1
37149: PUSH
37150: LD_EXP 131
37154: IN
37155: NOT
37156: IFFALSE 37160
// exit ;
37158: GO 37552
// index := GetElementIndex ( minersList , unit ) ;
37160: LD_ADDR_VAR 0 6
37164: PUSH
37165: LD_EXP 131
37169: PPUSH
37170: LD_VAR 0 1
37174: PPUSH
37175: CALL 43119 0 2
37179: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37180: LD_ADDR_VAR 0 5
37184: PUSH
37185: DOUBLE
37186: LD_EXP 132
37190: PUSH
37191: LD_VAR 0 6
37195: ARRAY
37196: INC
37197: ST_TO_ADDR
37198: LD_INT 1
37200: PUSH
37201: FOR_DOWNTO
37202: IFFALSE 37363
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37204: LD_EXP 132
37208: PUSH
37209: LD_VAR 0 6
37213: ARRAY
37214: PUSH
37215: LD_VAR 0 5
37219: ARRAY
37220: PUSH
37221: LD_INT 1
37223: ARRAY
37224: PUSH
37225: LD_VAR 0 2
37229: EQUAL
37230: PUSH
37231: LD_EXP 132
37235: PUSH
37236: LD_VAR 0 6
37240: ARRAY
37241: PUSH
37242: LD_VAR 0 5
37246: ARRAY
37247: PUSH
37248: LD_INT 2
37250: ARRAY
37251: PUSH
37252: LD_VAR 0 3
37256: EQUAL
37257: AND
37258: IFFALSE 37361
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37260: LD_EXP 132
37264: PUSH
37265: LD_VAR 0 6
37269: ARRAY
37270: PUSH
37271: LD_VAR 0 5
37275: ARRAY
37276: PUSH
37277: LD_INT 1
37279: ARRAY
37280: PPUSH
37281: LD_EXP 132
37285: PUSH
37286: LD_VAR 0 6
37290: ARRAY
37291: PUSH
37292: LD_VAR 0 5
37296: ARRAY
37297: PUSH
37298: LD_INT 2
37300: ARRAY
37301: PPUSH
37302: LD_VAR 0 1
37306: PPUSH
37307: CALL_OW 255
37311: PPUSH
37312: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37316: LD_ADDR_EXP 132
37320: PUSH
37321: LD_EXP 132
37325: PPUSH
37326: LD_VAR 0 6
37330: PPUSH
37331: LD_EXP 132
37335: PUSH
37336: LD_VAR 0 6
37340: ARRAY
37341: PPUSH
37342: LD_VAR 0 5
37346: PPUSH
37347: CALL_OW 3
37351: PPUSH
37352: CALL_OW 1
37356: ST_TO_ADDR
// exit ;
37357: POP
37358: POP
37359: GO 37552
// end ; end ;
37361: GO 37201
37363: POP
37364: POP
// for i := minerMinesList [ index ] downto 1 do
37365: LD_ADDR_VAR 0 5
37369: PUSH
37370: DOUBLE
37371: LD_EXP 132
37375: PUSH
37376: LD_VAR 0 6
37380: ARRAY
37381: INC
37382: ST_TO_ADDR
37383: LD_INT 1
37385: PUSH
37386: FOR_DOWNTO
37387: IFFALSE 37550
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
37389: LD_EXP 132
37393: PUSH
37394: LD_VAR 0 6
37398: ARRAY
37399: PUSH
37400: LD_VAR 0 5
37404: ARRAY
37405: PUSH
37406: LD_INT 1
37408: ARRAY
37409: PPUSH
37410: LD_EXP 132
37414: PUSH
37415: LD_VAR 0 6
37419: ARRAY
37420: PUSH
37421: LD_VAR 0 5
37425: ARRAY
37426: PUSH
37427: LD_INT 2
37429: ARRAY
37430: PPUSH
37431: LD_VAR 0 2
37435: PPUSH
37436: LD_VAR 0 3
37440: PPUSH
37441: CALL_OW 298
37445: PUSH
37446: LD_INT 6
37448: LESS
37449: IFFALSE 37548
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37451: LD_EXP 132
37455: PUSH
37456: LD_VAR 0 6
37460: ARRAY
37461: PUSH
37462: LD_VAR 0 5
37466: ARRAY
37467: PUSH
37468: LD_INT 1
37470: ARRAY
37471: PPUSH
37472: LD_EXP 132
37476: PUSH
37477: LD_VAR 0 6
37481: ARRAY
37482: PUSH
37483: LD_VAR 0 5
37487: ARRAY
37488: PUSH
37489: LD_INT 2
37491: ARRAY
37492: PPUSH
37493: LD_VAR 0 1
37497: PPUSH
37498: CALL_OW 255
37502: PPUSH
37503: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37507: LD_ADDR_EXP 132
37511: PUSH
37512: LD_EXP 132
37516: PPUSH
37517: LD_VAR 0 6
37521: PPUSH
37522: LD_EXP 132
37526: PUSH
37527: LD_VAR 0 6
37531: ARRAY
37532: PPUSH
37533: LD_VAR 0 5
37537: PPUSH
37538: CALL_OW 3
37542: PPUSH
37543: CALL_OW 1
37547: ST_TO_ADDR
// end ; end ;
37548: GO 37386
37550: POP
37551: POP
// end ;
37552: LD_VAR 0 4
37556: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
37557: LD_INT 0
37559: PPUSH
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
37564: PPUSH
37565: PPUSH
37566: PPUSH
37567: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
37568: LD_VAR 0 1
37572: PPUSH
37573: CALL_OW 264
37577: PUSH
37578: LD_EXP 52
37582: EQUAL
37583: NOT
37584: PUSH
37585: LD_VAR 0 1
37589: PUSH
37590: LD_EXP 131
37594: IN
37595: NOT
37596: OR
37597: IFFALSE 37601
// exit ;
37599: GO 37923
// index := GetElementIndex ( minersList , unit ) ;
37601: LD_ADDR_VAR 0 6
37605: PUSH
37606: LD_EXP 131
37610: PPUSH
37611: LD_VAR 0 1
37615: PPUSH
37616: CALL 43119 0 2
37620: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
37621: LD_ADDR_VAR 0 8
37625: PUSH
37626: LD_EXP 133
37630: PUSH
37631: LD_EXP 132
37635: PUSH
37636: LD_VAR 0 6
37640: ARRAY
37641: MINUS
37642: ST_TO_ADDR
// if not minesFreeAmount then
37643: LD_VAR 0 8
37647: NOT
37648: IFFALSE 37652
// exit ;
37650: GO 37923
// tmp := [ ] ;
37652: LD_ADDR_VAR 0 7
37656: PUSH
37657: EMPTY
37658: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
37659: LD_ADDR_VAR 0 5
37663: PUSH
37664: DOUBLE
37665: LD_INT 1
37667: DEC
37668: ST_TO_ADDR
37669: LD_VAR 0 8
37673: PUSH
37674: FOR_TO
37675: IFFALSE 37870
// begin _d := rand ( 0 , 5 ) ;
37677: LD_ADDR_VAR 0 11
37681: PUSH
37682: LD_INT 0
37684: PPUSH
37685: LD_INT 5
37687: PPUSH
37688: CALL_OW 12
37692: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
37693: LD_ADDR_VAR 0 12
37697: PUSH
37698: LD_INT 2
37700: PPUSH
37701: LD_INT 6
37703: PPUSH
37704: CALL_OW 12
37708: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
37709: LD_ADDR_VAR 0 9
37713: PUSH
37714: LD_VAR 0 2
37718: PPUSH
37719: LD_VAR 0 11
37723: PPUSH
37724: LD_VAR 0 12
37728: PPUSH
37729: CALL_OW 272
37733: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
37734: LD_ADDR_VAR 0 10
37738: PUSH
37739: LD_VAR 0 3
37743: PPUSH
37744: LD_VAR 0 11
37748: PPUSH
37749: LD_VAR 0 12
37753: PPUSH
37754: CALL_OW 273
37758: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
37759: LD_VAR 0 9
37763: PPUSH
37764: LD_VAR 0 10
37768: PPUSH
37769: CALL_OW 488
37773: PUSH
37774: LD_VAR 0 9
37778: PUSH
37779: LD_VAR 0 10
37783: PUSH
37784: EMPTY
37785: LIST
37786: LIST
37787: PUSH
37788: LD_VAR 0 7
37792: IN
37793: NOT
37794: AND
37795: PUSH
37796: LD_VAR 0 9
37800: PPUSH
37801: LD_VAR 0 10
37805: PPUSH
37806: CALL_OW 458
37810: NOT
37811: AND
37812: IFFALSE 37854
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
37814: LD_ADDR_VAR 0 7
37818: PUSH
37819: LD_VAR 0 7
37823: PPUSH
37824: LD_VAR 0 7
37828: PUSH
37829: LD_INT 1
37831: PLUS
37832: PPUSH
37833: LD_VAR 0 9
37837: PUSH
37838: LD_VAR 0 10
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PPUSH
37847: CALL_OW 1
37851: ST_TO_ADDR
37852: GO 37868
// i := i - 1 ;
37854: LD_ADDR_VAR 0 5
37858: PUSH
37859: LD_VAR 0 5
37863: PUSH
37864: LD_INT 1
37866: MINUS
37867: ST_TO_ADDR
// end ;
37868: GO 37674
37870: POP
37871: POP
// for i in tmp do
37872: LD_ADDR_VAR 0 5
37876: PUSH
37877: LD_VAR 0 7
37881: PUSH
37882: FOR_IN
37883: IFFALSE 37921
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
37885: LD_VAR 0 1
37889: PPUSH
37890: LD_VAR 0 5
37894: PUSH
37895: LD_INT 1
37897: ARRAY
37898: PPUSH
37899: LD_VAR 0 5
37903: PUSH
37904: LD_INT 2
37906: ARRAY
37907: PPUSH
37908: CALL 36863 0 3
37912: NOT
37913: IFFALSE 37919
// exit ;
37915: POP
37916: POP
37917: GO 37923
37919: GO 37882
37921: POP
37922: POP
// end ;
37923: LD_VAR 0 4
37927: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
37928: LD_INT 0
37930: PPUSH
37931: PPUSH
37932: PPUSH
37933: PPUSH
37934: PPUSH
37935: PPUSH
37936: PPUSH
// if not GetClass ( unit ) = class_sniper then
37937: LD_VAR 0 1
37941: PPUSH
37942: CALL_OW 257
37946: PUSH
37947: LD_INT 5
37949: EQUAL
37950: NOT
37951: IFFALSE 37955
// exit ;
37953: GO 38343
// dist := 8 ;
37955: LD_ADDR_VAR 0 5
37959: PUSH
37960: LD_INT 8
37962: ST_TO_ADDR
// viewRange := 12 ;
37963: LD_ADDR_VAR 0 7
37967: PUSH
37968: LD_INT 12
37970: ST_TO_ADDR
// side := GetSide ( unit ) ;
37971: LD_ADDR_VAR 0 6
37975: PUSH
37976: LD_VAR 0 1
37980: PPUSH
37981: CALL_OW 255
37985: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
37986: LD_INT 61
37988: PPUSH
37989: LD_VAR 0 6
37993: PPUSH
37994: CALL_OW 321
37998: PUSH
37999: LD_INT 2
38001: EQUAL
38002: IFFALSE 38012
// viewRange := 16 ;
38004: LD_ADDR_VAR 0 7
38008: PUSH
38009: LD_INT 16
38011: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38012: LD_VAR 0 1
38016: PPUSH
38017: LD_VAR 0 2
38021: PPUSH
38022: LD_VAR 0 3
38026: PPUSH
38027: CALL_OW 297
38031: PUSH
38032: LD_VAR 0 5
38036: GREATER
38037: IFFALSE 38116
// begin ComMoveXY ( unit , x , y ) ;
38039: LD_VAR 0 1
38043: PPUSH
38044: LD_VAR 0 2
38048: PPUSH
38049: LD_VAR 0 3
38053: PPUSH
38054: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38058: LD_INT 35
38060: PPUSH
38061: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38065: LD_VAR 0 1
38069: PPUSH
38070: LD_VAR 0 2
38074: PPUSH
38075: LD_VAR 0 3
38079: PPUSH
38080: CALL 73838 0 3
38084: NOT
38085: IFFALSE 38089
// exit ;
38087: GO 38343
// until GetDistUnitXY ( unit , x , y ) < dist ;
38089: LD_VAR 0 1
38093: PPUSH
38094: LD_VAR 0 2
38098: PPUSH
38099: LD_VAR 0 3
38103: PPUSH
38104: CALL_OW 297
38108: PUSH
38109: LD_VAR 0 5
38113: LESS
38114: IFFALSE 38058
// end ; ComTurnXY ( unit , x , y ) ;
38116: LD_VAR 0 1
38120: PPUSH
38121: LD_VAR 0 2
38125: PPUSH
38126: LD_VAR 0 3
38130: PPUSH
38131: CALL_OW 118
// wait ( 5 ) ;
38135: LD_INT 5
38137: PPUSH
38138: CALL_OW 67
// _d := GetDir ( unit ) ;
38142: LD_ADDR_VAR 0 10
38146: PUSH
38147: LD_VAR 0 1
38151: PPUSH
38152: CALL_OW 254
38156: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38157: LD_ADDR_VAR 0 8
38161: PUSH
38162: LD_VAR 0 1
38166: PPUSH
38167: CALL_OW 250
38171: PPUSH
38172: LD_VAR 0 10
38176: PPUSH
38177: LD_VAR 0 5
38181: PPUSH
38182: CALL_OW 272
38186: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38187: LD_ADDR_VAR 0 9
38191: PUSH
38192: LD_VAR 0 1
38196: PPUSH
38197: CALL_OW 251
38201: PPUSH
38202: LD_VAR 0 10
38206: PPUSH
38207: LD_VAR 0 5
38211: PPUSH
38212: CALL_OW 273
38216: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38217: LD_VAR 0 8
38221: PPUSH
38222: LD_VAR 0 9
38226: PPUSH
38227: CALL_OW 488
38231: NOT
38232: IFFALSE 38236
// exit ;
38234: GO 38343
// ComAnimCustom ( unit , 1 ) ;
38236: LD_VAR 0 1
38240: PPUSH
38241: LD_INT 1
38243: PPUSH
38244: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38248: LD_VAR 0 8
38252: PPUSH
38253: LD_VAR 0 9
38257: PPUSH
38258: LD_VAR 0 6
38262: PPUSH
38263: LD_VAR 0 7
38267: PPUSH
38268: CALL_OW 330
// repeat wait ( 1 ) ;
38272: LD_INT 1
38274: PPUSH
38275: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38279: LD_VAR 0 1
38283: PPUSH
38284: CALL_OW 316
38288: PUSH
38289: LD_VAR 0 1
38293: PPUSH
38294: CALL_OW 314
38298: OR
38299: PUSH
38300: LD_VAR 0 1
38304: PPUSH
38305: CALL_OW 302
38309: NOT
38310: OR
38311: PUSH
38312: LD_VAR 0 1
38316: PPUSH
38317: CALL_OW 301
38321: OR
38322: IFFALSE 38272
// RemoveSeeing ( _x , _y , side ) ;
38324: LD_VAR 0 8
38328: PPUSH
38329: LD_VAR 0 9
38333: PPUSH
38334: LD_VAR 0 6
38338: PPUSH
38339: CALL_OW 331
// end ; end_of_file
38343: LD_VAR 0 4
38347: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38348: LD_INT 0
38350: PPUSH
38351: PPUSH
// if exist_mode then
38352: LD_VAR 0 2
38356: IFFALSE 38381
// unit := CreateCharacter ( prefix & ident ) else
38358: LD_ADDR_VAR 0 5
38362: PUSH
38363: LD_VAR 0 3
38367: PUSH
38368: LD_VAR 0 1
38372: STR
38373: PPUSH
38374: CALL_OW 34
38378: ST_TO_ADDR
38379: GO 38396
// unit := NewCharacter ( ident ) ;
38381: LD_ADDR_VAR 0 5
38385: PUSH
38386: LD_VAR 0 1
38390: PPUSH
38391: CALL_OW 25
38395: ST_TO_ADDR
// result := unit ;
38396: LD_ADDR_VAR 0 4
38400: PUSH
38401: LD_VAR 0 5
38405: ST_TO_ADDR
// end ;
38406: LD_VAR 0 4
38410: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
38411: LD_INT 0
38413: PPUSH
38414: PPUSH
// if not side or not nation then
38415: LD_VAR 0 1
38419: NOT
38420: PUSH
38421: LD_VAR 0 2
38425: NOT
38426: OR
38427: IFFALSE 38431
// exit ;
38429: GO 39199
// case nation of nation_american :
38431: LD_VAR 0 2
38435: PUSH
38436: LD_INT 1
38438: DOUBLE
38439: EQUAL
38440: IFTRUE 38444
38442: GO 38658
38444: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
38445: LD_ADDR_VAR 0 4
38449: PUSH
38450: LD_INT 35
38452: PUSH
38453: LD_INT 45
38455: PUSH
38456: LD_INT 46
38458: PUSH
38459: LD_INT 47
38461: PUSH
38462: LD_INT 82
38464: PUSH
38465: LD_INT 83
38467: PUSH
38468: LD_INT 84
38470: PUSH
38471: LD_INT 85
38473: PUSH
38474: LD_INT 86
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: LD_INT 6
38485: PUSH
38486: LD_INT 15
38488: PUSH
38489: LD_INT 16
38491: PUSH
38492: LD_INT 7
38494: PUSH
38495: LD_INT 12
38497: PUSH
38498: LD_INT 13
38500: PUSH
38501: LD_INT 10
38503: PUSH
38504: LD_INT 14
38506: PUSH
38507: LD_INT 20
38509: PUSH
38510: LD_INT 21
38512: PUSH
38513: LD_INT 22
38515: PUSH
38516: LD_INT 25
38518: PUSH
38519: LD_INT 32
38521: PUSH
38522: LD_INT 27
38524: PUSH
38525: LD_INT 36
38527: PUSH
38528: LD_INT 69
38530: PUSH
38531: LD_INT 39
38533: PUSH
38534: LD_INT 34
38536: PUSH
38537: LD_INT 40
38539: PUSH
38540: LD_INT 48
38542: PUSH
38543: LD_INT 49
38545: PUSH
38546: LD_INT 50
38548: PUSH
38549: LD_INT 51
38551: PUSH
38552: LD_INT 52
38554: PUSH
38555: LD_INT 53
38557: PUSH
38558: LD_INT 54
38560: PUSH
38561: LD_INT 55
38563: PUSH
38564: LD_INT 56
38566: PUSH
38567: LD_INT 57
38569: PUSH
38570: LD_INT 58
38572: PUSH
38573: LD_INT 59
38575: PUSH
38576: LD_INT 60
38578: PUSH
38579: LD_INT 61
38581: PUSH
38582: LD_INT 62
38584: PUSH
38585: LD_INT 80
38587: PUSH
38588: LD_INT 82
38590: PUSH
38591: LD_INT 83
38593: PUSH
38594: LD_INT 84
38596: PUSH
38597: LD_INT 85
38599: PUSH
38600: LD_INT 86
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: ST_TO_ADDR
38656: GO 39123
38658: LD_INT 2
38660: DOUBLE
38661: EQUAL
38662: IFTRUE 38666
38664: GO 38892
38666: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
38667: LD_ADDR_VAR 0 4
38671: PUSH
38672: LD_INT 35
38674: PUSH
38675: LD_INT 45
38677: PUSH
38678: LD_INT 46
38680: PUSH
38681: LD_INT 47
38683: PUSH
38684: LD_INT 82
38686: PUSH
38687: LD_INT 83
38689: PUSH
38690: LD_INT 84
38692: PUSH
38693: LD_INT 85
38695: PUSH
38696: LD_INT 87
38698: PUSH
38699: LD_INT 70
38701: PUSH
38702: LD_INT 1
38704: PUSH
38705: LD_INT 11
38707: PUSH
38708: LD_INT 3
38710: PUSH
38711: LD_INT 4
38713: PUSH
38714: LD_INT 5
38716: PUSH
38717: LD_INT 6
38719: PUSH
38720: LD_INT 15
38722: PUSH
38723: LD_INT 18
38725: PUSH
38726: LD_INT 7
38728: PUSH
38729: LD_INT 17
38731: PUSH
38732: LD_INT 8
38734: PUSH
38735: LD_INT 20
38737: PUSH
38738: LD_INT 21
38740: PUSH
38741: LD_INT 22
38743: PUSH
38744: LD_INT 72
38746: PUSH
38747: LD_INT 26
38749: PUSH
38750: LD_INT 69
38752: PUSH
38753: LD_INT 39
38755: PUSH
38756: LD_INT 40
38758: PUSH
38759: LD_INT 41
38761: PUSH
38762: LD_INT 42
38764: PUSH
38765: LD_INT 43
38767: PUSH
38768: LD_INT 48
38770: PUSH
38771: LD_INT 49
38773: PUSH
38774: LD_INT 50
38776: PUSH
38777: LD_INT 51
38779: PUSH
38780: LD_INT 52
38782: PUSH
38783: LD_INT 53
38785: PUSH
38786: LD_INT 54
38788: PUSH
38789: LD_INT 55
38791: PUSH
38792: LD_INT 56
38794: PUSH
38795: LD_INT 60
38797: PUSH
38798: LD_INT 61
38800: PUSH
38801: LD_INT 62
38803: PUSH
38804: LD_INT 66
38806: PUSH
38807: LD_INT 67
38809: PUSH
38810: LD_INT 68
38812: PUSH
38813: LD_INT 81
38815: PUSH
38816: LD_INT 82
38818: PUSH
38819: LD_INT 83
38821: PUSH
38822: LD_INT 84
38824: PUSH
38825: LD_INT 85
38827: PUSH
38828: LD_INT 87
38830: PUSH
38831: LD_INT 88
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: ST_TO_ADDR
38890: GO 39123
38892: LD_INT 3
38894: DOUBLE
38895: EQUAL
38896: IFTRUE 38900
38898: GO 39122
38900: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
38901: LD_ADDR_VAR 0 4
38905: PUSH
38906: LD_INT 46
38908: PUSH
38909: LD_INT 47
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: LD_INT 82
38920: PUSH
38921: LD_INT 83
38923: PUSH
38924: LD_INT 84
38926: PUSH
38927: LD_INT 85
38929: PUSH
38930: LD_INT 86
38932: PUSH
38933: LD_INT 11
38935: PUSH
38936: LD_INT 9
38938: PUSH
38939: LD_INT 20
38941: PUSH
38942: LD_INT 19
38944: PUSH
38945: LD_INT 21
38947: PUSH
38948: LD_INT 24
38950: PUSH
38951: LD_INT 22
38953: PUSH
38954: LD_INT 25
38956: PUSH
38957: LD_INT 28
38959: PUSH
38960: LD_INT 29
38962: PUSH
38963: LD_INT 30
38965: PUSH
38966: LD_INT 31
38968: PUSH
38969: LD_INT 37
38971: PUSH
38972: LD_INT 38
38974: PUSH
38975: LD_INT 32
38977: PUSH
38978: LD_INT 27
38980: PUSH
38981: LD_INT 33
38983: PUSH
38984: LD_INT 69
38986: PUSH
38987: LD_INT 39
38989: PUSH
38990: LD_INT 34
38992: PUSH
38993: LD_INT 40
38995: PUSH
38996: LD_INT 71
38998: PUSH
38999: LD_INT 23
39001: PUSH
39002: LD_INT 44
39004: PUSH
39005: LD_INT 48
39007: PUSH
39008: LD_INT 49
39010: PUSH
39011: LD_INT 50
39013: PUSH
39014: LD_INT 51
39016: PUSH
39017: LD_INT 52
39019: PUSH
39020: LD_INT 53
39022: PUSH
39023: LD_INT 54
39025: PUSH
39026: LD_INT 55
39028: PUSH
39029: LD_INT 56
39031: PUSH
39032: LD_INT 57
39034: PUSH
39035: LD_INT 58
39037: PUSH
39038: LD_INT 59
39040: PUSH
39041: LD_INT 63
39043: PUSH
39044: LD_INT 64
39046: PUSH
39047: LD_INT 65
39049: PUSH
39050: LD_INT 82
39052: PUSH
39053: LD_INT 83
39055: PUSH
39056: LD_INT 84
39058: PUSH
39059: LD_INT 85
39061: PUSH
39062: LD_INT 86
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: LIST
39112: LIST
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: ST_TO_ADDR
39120: GO 39123
39122: POP
// if state > - 1 and state < 3 then
39123: LD_VAR 0 3
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: GREATER
39132: PUSH
39133: LD_VAR 0 3
39137: PUSH
39138: LD_INT 3
39140: LESS
39141: AND
39142: IFFALSE 39199
// for i in result do
39144: LD_ADDR_VAR 0 5
39148: PUSH
39149: LD_VAR 0 4
39153: PUSH
39154: FOR_IN
39155: IFFALSE 39197
// if GetTech ( i , side ) <> state then
39157: LD_VAR 0 5
39161: PPUSH
39162: LD_VAR 0 1
39166: PPUSH
39167: CALL_OW 321
39171: PUSH
39172: LD_VAR 0 3
39176: NONEQUAL
39177: IFFALSE 39195
// result := result diff i ;
39179: LD_ADDR_VAR 0 4
39183: PUSH
39184: LD_VAR 0 4
39188: PUSH
39189: LD_VAR 0 5
39193: DIFF
39194: ST_TO_ADDR
39195: GO 39154
39197: POP
39198: POP
// end ;
39199: LD_VAR 0 4
39203: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39204: LD_INT 0
39206: PPUSH
39207: PPUSH
39208: PPUSH
// result := true ;
39209: LD_ADDR_VAR 0 3
39213: PUSH
39214: LD_INT 1
39216: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39217: LD_ADDR_VAR 0 5
39221: PUSH
39222: LD_VAR 0 2
39226: PPUSH
39227: CALL_OW 480
39231: ST_TO_ADDR
// if not tmp then
39232: LD_VAR 0 5
39236: NOT
39237: IFFALSE 39241
// exit ;
39239: GO 39290
// for i in tmp do
39241: LD_ADDR_VAR 0 4
39245: PUSH
39246: LD_VAR 0 5
39250: PUSH
39251: FOR_IN
39252: IFFALSE 39288
// if GetTech ( i , side ) <> state_researched then
39254: LD_VAR 0 4
39258: PPUSH
39259: LD_VAR 0 1
39263: PPUSH
39264: CALL_OW 321
39268: PUSH
39269: LD_INT 2
39271: NONEQUAL
39272: IFFALSE 39286
// begin result := false ;
39274: LD_ADDR_VAR 0 3
39278: PUSH
39279: LD_INT 0
39281: ST_TO_ADDR
// exit ;
39282: POP
39283: POP
39284: GO 39290
// end ;
39286: GO 39251
39288: POP
39289: POP
// end ;
39290: LD_VAR 0 3
39294: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39295: LD_INT 0
39297: PPUSH
39298: PPUSH
39299: PPUSH
39300: PPUSH
39301: PPUSH
39302: PPUSH
39303: PPUSH
39304: PPUSH
39305: PPUSH
39306: PPUSH
39307: PPUSH
39308: PPUSH
39309: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39310: LD_VAR 0 1
39314: NOT
39315: PUSH
39316: LD_VAR 0 1
39320: PPUSH
39321: CALL_OW 257
39325: PUSH
39326: LD_INT 9
39328: NONEQUAL
39329: OR
39330: IFFALSE 39334
// exit ;
39332: GO 39907
// side := GetSide ( unit ) ;
39334: LD_ADDR_VAR 0 9
39338: PUSH
39339: LD_VAR 0 1
39343: PPUSH
39344: CALL_OW 255
39348: ST_TO_ADDR
// tech_space := tech_spacanom ;
39349: LD_ADDR_VAR 0 12
39353: PUSH
39354: LD_INT 29
39356: ST_TO_ADDR
// tech_time := tech_taurad ;
39357: LD_ADDR_VAR 0 13
39361: PUSH
39362: LD_INT 28
39364: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
39365: LD_ADDR_VAR 0 11
39369: PUSH
39370: LD_VAR 0 1
39374: PPUSH
39375: CALL_OW 310
39379: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
39380: LD_VAR 0 11
39384: PPUSH
39385: CALL_OW 247
39389: PUSH
39390: LD_INT 2
39392: EQUAL
39393: IFFALSE 39397
// exit ;
39395: GO 39907
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39397: LD_ADDR_VAR 0 8
39401: PUSH
39402: LD_INT 81
39404: PUSH
39405: LD_VAR 0 9
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 3
39416: PUSH
39417: LD_INT 21
39419: PUSH
39420: LD_INT 3
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: EMPTY
39432: LIST
39433: LIST
39434: PPUSH
39435: CALL_OW 69
39439: ST_TO_ADDR
// if not tmp then
39440: LD_VAR 0 8
39444: NOT
39445: IFFALSE 39449
// exit ;
39447: GO 39907
// if in_unit then
39449: LD_VAR 0 11
39453: IFFALSE 39477
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
39455: LD_ADDR_VAR 0 10
39459: PUSH
39460: LD_VAR 0 8
39464: PPUSH
39465: LD_VAR 0 11
39469: PPUSH
39470: CALL_OW 74
39474: ST_TO_ADDR
39475: GO 39497
// enemy := NearestUnitToUnit ( tmp , unit ) ;
39477: LD_ADDR_VAR 0 10
39481: PUSH
39482: LD_VAR 0 8
39486: PPUSH
39487: LD_VAR 0 1
39491: PPUSH
39492: CALL_OW 74
39496: ST_TO_ADDR
// if not enemy then
39497: LD_VAR 0 10
39501: NOT
39502: IFFALSE 39506
// exit ;
39504: GO 39907
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
39506: LD_VAR 0 11
39510: PUSH
39511: LD_VAR 0 11
39515: PPUSH
39516: LD_VAR 0 10
39520: PPUSH
39521: CALL_OW 296
39525: PUSH
39526: LD_INT 13
39528: GREATER
39529: AND
39530: PUSH
39531: LD_VAR 0 1
39535: PPUSH
39536: LD_VAR 0 10
39540: PPUSH
39541: CALL_OW 296
39545: PUSH
39546: LD_INT 12
39548: GREATER
39549: OR
39550: IFFALSE 39554
// exit ;
39552: GO 39907
// missile := [ 1 ] ;
39554: LD_ADDR_VAR 0 14
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: EMPTY
39563: LIST
39564: ST_TO_ADDR
// if Researched ( side , tech_space ) then
39565: LD_VAR 0 9
39569: PPUSH
39570: LD_VAR 0 12
39574: PPUSH
39575: CALL_OW 325
39579: IFFALSE 39608
// missile := Replace ( missile , missile + 1 , 2 ) ;
39581: LD_ADDR_VAR 0 14
39585: PUSH
39586: LD_VAR 0 14
39590: PPUSH
39591: LD_VAR 0 14
39595: PUSH
39596: LD_INT 1
39598: PLUS
39599: PPUSH
39600: LD_INT 2
39602: PPUSH
39603: CALL_OW 1
39607: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
39608: LD_VAR 0 9
39612: PPUSH
39613: LD_VAR 0 13
39617: PPUSH
39618: CALL_OW 325
39622: PUSH
39623: LD_VAR 0 10
39627: PPUSH
39628: CALL_OW 255
39632: PPUSH
39633: LD_VAR 0 13
39637: PPUSH
39638: CALL_OW 325
39642: NOT
39643: AND
39644: IFFALSE 39673
// missile := Replace ( missile , missile + 1 , 3 ) ;
39646: LD_ADDR_VAR 0 14
39650: PUSH
39651: LD_VAR 0 14
39655: PPUSH
39656: LD_VAR 0 14
39660: PUSH
39661: LD_INT 1
39663: PLUS
39664: PPUSH
39665: LD_INT 3
39667: PPUSH
39668: CALL_OW 1
39672: ST_TO_ADDR
// if missile < 2 then
39673: LD_VAR 0 14
39677: PUSH
39678: LD_INT 2
39680: LESS
39681: IFFALSE 39685
// exit ;
39683: GO 39907
// x := GetX ( enemy ) ;
39685: LD_ADDR_VAR 0 4
39689: PUSH
39690: LD_VAR 0 10
39694: PPUSH
39695: CALL_OW 250
39699: ST_TO_ADDR
// y := GetY ( enemy ) ;
39700: LD_ADDR_VAR 0 5
39704: PUSH
39705: LD_VAR 0 10
39709: PPUSH
39710: CALL_OW 251
39714: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
39715: LD_ADDR_VAR 0 6
39719: PUSH
39720: LD_VAR 0 4
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PPUSH
39729: LD_INT 1
39731: PPUSH
39732: CALL_OW 12
39736: PLUS
39737: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
39738: LD_ADDR_VAR 0 7
39742: PUSH
39743: LD_VAR 0 5
39747: PUSH
39748: LD_INT 1
39750: NEG
39751: PPUSH
39752: LD_INT 1
39754: PPUSH
39755: CALL_OW 12
39759: PLUS
39760: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39761: LD_VAR 0 6
39765: PPUSH
39766: LD_VAR 0 7
39770: PPUSH
39771: CALL_OW 488
39775: NOT
39776: IFFALSE 39798
// begin _x := x ;
39778: LD_ADDR_VAR 0 6
39782: PUSH
39783: LD_VAR 0 4
39787: ST_TO_ADDR
// _y := y ;
39788: LD_ADDR_VAR 0 7
39792: PUSH
39793: LD_VAR 0 5
39797: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
39798: LD_ADDR_VAR 0 3
39802: PUSH
39803: LD_INT 1
39805: PPUSH
39806: LD_VAR 0 14
39810: PPUSH
39811: CALL_OW 12
39815: ST_TO_ADDR
// case i of 1 :
39816: LD_VAR 0 3
39820: PUSH
39821: LD_INT 1
39823: DOUBLE
39824: EQUAL
39825: IFTRUE 39829
39827: GO 39846
39829: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
39830: LD_VAR 0 1
39834: PPUSH
39835: LD_VAR 0 10
39839: PPUSH
39840: CALL_OW 115
39844: GO 39907
39846: LD_INT 2
39848: DOUBLE
39849: EQUAL
39850: IFTRUE 39854
39852: GO 39876
39854: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
39855: LD_VAR 0 1
39859: PPUSH
39860: LD_VAR 0 6
39864: PPUSH
39865: LD_VAR 0 7
39869: PPUSH
39870: CALL_OW 153
39874: GO 39907
39876: LD_INT 3
39878: DOUBLE
39879: EQUAL
39880: IFTRUE 39884
39882: GO 39906
39884: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
39885: LD_VAR 0 1
39889: PPUSH
39890: LD_VAR 0 6
39894: PPUSH
39895: LD_VAR 0 7
39899: PPUSH
39900: CALL_OW 154
39904: GO 39907
39906: POP
// end ;
39907: LD_VAR 0 2
39911: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
39912: LD_INT 0
39914: PPUSH
39915: PPUSH
39916: PPUSH
39917: PPUSH
39918: PPUSH
39919: PPUSH
// if not unit or not building then
39920: LD_VAR 0 1
39924: NOT
39925: PUSH
39926: LD_VAR 0 2
39930: NOT
39931: OR
39932: IFFALSE 39936
// exit ;
39934: GO 40094
// x := GetX ( building ) ;
39936: LD_ADDR_VAR 0 5
39940: PUSH
39941: LD_VAR 0 2
39945: PPUSH
39946: CALL_OW 250
39950: ST_TO_ADDR
// y := GetY ( building ) ;
39951: LD_ADDR_VAR 0 6
39955: PUSH
39956: LD_VAR 0 2
39960: PPUSH
39961: CALL_OW 251
39965: ST_TO_ADDR
// for i = 0 to 5 do
39966: LD_ADDR_VAR 0 4
39970: PUSH
39971: DOUBLE
39972: LD_INT 0
39974: DEC
39975: ST_TO_ADDR
39976: LD_INT 5
39978: PUSH
39979: FOR_TO
39980: IFFALSE 40092
// begin _x := ShiftX ( x , i , 3 ) ;
39982: LD_ADDR_VAR 0 7
39986: PUSH
39987: LD_VAR 0 5
39991: PPUSH
39992: LD_VAR 0 4
39996: PPUSH
39997: LD_INT 3
39999: PPUSH
40000: CALL_OW 272
40004: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40005: LD_ADDR_VAR 0 8
40009: PUSH
40010: LD_VAR 0 6
40014: PPUSH
40015: LD_VAR 0 4
40019: PPUSH
40020: LD_INT 3
40022: PPUSH
40023: CALL_OW 273
40027: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40028: LD_VAR 0 7
40032: PPUSH
40033: LD_VAR 0 8
40037: PPUSH
40038: CALL_OW 488
40042: NOT
40043: IFFALSE 40047
// continue ;
40045: GO 39979
// if HexInfo ( _x , _y ) = 0 then
40047: LD_VAR 0 7
40051: PPUSH
40052: LD_VAR 0 8
40056: PPUSH
40057: CALL_OW 428
40061: PUSH
40062: LD_INT 0
40064: EQUAL
40065: IFFALSE 40090
// begin ComMoveXY ( unit , _x , _y ) ;
40067: LD_VAR 0 1
40071: PPUSH
40072: LD_VAR 0 7
40076: PPUSH
40077: LD_VAR 0 8
40081: PPUSH
40082: CALL_OW 111
// exit ;
40086: POP
40087: POP
40088: GO 40094
// end ; end ;
40090: GO 39979
40092: POP
40093: POP
// end ;
40094: LD_VAR 0 3
40098: RET
// export function ScanBase ( side , base_area ) ; begin
40099: LD_INT 0
40101: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40102: LD_ADDR_VAR 0 3
40106: PUSH
40107: LD_VAR 0 2
40111: PPUSH
40112: LD_INT 81
40114: PUSH
40115: LD_VAR 0 1
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PPUSH
40124: CALL_OW 70
40128: ST_TO_ADDR
// end ;
40129: LD_VAR 0 3
40133: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40134: LD_INT 0
40136: PPUSH
40137: PPUSH
40138: PPUSH
40139: PPUSH
// result := false ;
40140: LD_ADDR_VAR 0 2
40144: PUSH
40145: LD_INT 0
40147: ST_TO_ADDR
// side := GetSide ( unit ) ;
40148: LD_ADDR_VAR 0 3
40152: PUSH
40153: LD_VAR 0 1
40157: PPUSH
40158: CALL_OW 255
40162: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40163: LD_ADDR_VAR 0 4
40167: PUSH
40168: LD_VAR 0 1
40172: PPUSH
40173: CALL_OW 248
40177: ST_TO_ADDR
// case nat of 1 :
40178: LD_VAR 0 4
40182: PUSH
40183: LD_INT 1
40185: DOUBLE
40186: EQUAL
40187: IFTRUE 40191
40189: GO 40202
40191: POP
// tech := tech_lassight ; 2 :
40192: LD_ADDR_VAR 0 5
40196: PUSH
40197: LD_INT 12
40199: ST_TO_ADDR
40200: GO 40241
40202: LD_INT 2
40204: DOUBLE
40205: EQUAL
40206: IFTRUE 40210
40208: GO 40221
40210: POP
// tech := tech_mortar ; 3 :
40211: LD_ADDR_VAR 0 5
40215: PUSH
40216: LD_INT 41
40218: ST_TO_ADDR
40219: GO 40241
40221: LD_INT 3
40223: DOUBLE
40224: EQUAL
40225: IFTRUE 40229
40227: GO 40240
40229: POP
// tech := tech_bazooka ; end ;
40230: LD_ADDR_VAR 0 5
40234: PUSH
40235: LD_INT 44
40237: ST_TO_ADDR
40238: GO 40241
40240: POP
// if Researched ( side , tech ) then
40241: LD_VAR 0 3
40245: PPUSH
40246: LD_VAR 0 5
40250: PPUSH
40251: CALL_OW 325
40255: IFFALSE 40282
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40257: LD_ADDR_VAR 0 2
40261: PUSH
40262: LD_INT 5
40264: PUSH
40265: LD_INT 8
40267: PUSH
40268: LD_INT 9
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: PUSH
40276: LD_VAR 0 4
40280: ARRAY
40281: ST_TO_ADDR
// end ;
40282: LD_VAR 0 2
40286: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40287: LD_INT 0
40289: PPUSH
40290: PPUSH
40291: PPUSH
// if not mines then
40292: LD_VAR 0 2
40296: NOT
40297: IFFALSE 40301
// exit ;
40299: GO 40445
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40301: LD_ADDR_VAR 0 5
40305: PUSH
40306: LD_INT 81
40308: PUSH
40309: LD_VAR 0 1
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 3
40320: PUSH
40321: LD_INT 21
40323: PUSH
40324: LD_INT 3
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PPUSH
40339: CALL_OW 69
40343: ST_TO_ADDR
// for i in mines do
40344: LD_ADDR_VAR 0 4
40348: PUSH
40349: LD_VAR 0 2
40353: PUSH
40354: FOR_IN
40355: IFFALSE 40443
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40357: LD_VAR 0 4
40361: PUSH
40362: LD_INT 1
40364: ARRAY
40365: PPUSH
40366: LD_VAR 0 4
40370: PUSH
40371: LD_INT 2
40373: ARRAY
40374: PPUSH
40375: CALL_OW 458
40379: NOT
40380: IFFALSE 40384
// continue ;
40382: GO 40354
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
40384: LD_VAR 0 4
40388: PUSH
40389: LD_INT 1
40391: ARRAY
40392: PPUSH
40393: LD_VAR 0 4
40397: PUSH
40398: LD_INT 2
40400: ARRAY
40401: PPUSH
40402: CALL_OW 428
40406: PUSH
40407: LD_VAR 0 5
40411: IN
40412: IFFALSE 40441
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
40414: LD_VAR 0 4
40418: PUSH
40419: LD_INT 1
40421: ARRAY
40422: PPUSH
40423: LD_VAR 0 4
40427: PUSH
40428: LD_INT 2
40430: ARRAY
40431: PPUSH
40432: LD_VAR 0 1
40436: PPUSH
40437: CALL_OW 456
// end ;
40441: GO 40354
40443: POP
40444: POP
// end ;
40445: LD_VAR 0 3
40449: RET
// export function Count ( array ) ; var i ; begin
40450: LD_INT 0
40452: PPUSH
40453: PPUSH
// result := 0 ;
40454: LD_ADDR_VAR 0 2
40458: PUSH
40459: LD_INT 0
40461: ST_TO_ADDR
// for i in array do
40462: LD_ADDR_VAR 0 3
40466: PUSH
40467: LD_VAR 0 1
40471: PUSH
40472: FOR_IN
40473: IFFALSE 40497
// if i then
40475: LD_VAR 0 3
40479: IFFALSE 40495
// result := result + 1 ;
40481: LD_ADDR_VAR 0 2
40485: PUSH
40486: LD_VAR 0 2
40490: PUSH
40491: LD_INT 1
40493: PLUS
40494: ST_TO_ADDR
40495: GO 40472
40497: POP
40498: POP
// end ;
40499: LD_VAR 0 2
40503: RET
// export function IsEmpty ( building ) ; begin
40504: LD_INT 0
40506: PPUSH
// if not building then
40507: LD_VAR 0 1
40511: NOT
40512: IFFALSE 40516
// exit ;
40514: GO 40559
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
40516: LD_ADDR_VAR 0 2
40520: PUSH
40521: LD_VAR 0 1
40525: PUSH
40526: LD_INT 22
40528: PUSH
40529: LD_VAR 0 1
40533: PPUSH
40534: CALL_OW 255
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 58
40545: PUSH
40546: EMPTY
40547: LIST
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PPUSH
40553: CALL_OW 69
40557: IN
40558: ST_TO_ADDR
// end ;
40559: LD_VAR 0 2
40563: RET
// export function IsNotFull ( building ) ; begin
40564: LD_INT 0
40566: PPUSH
// if not building then
40567: LD_VAR 0 1
40571: NOT
40572: IFFALSE 40576
// exit ;
40574: GO 40595
// result := UnitsInside ( building ) < 6 ;
40576: LD_ADDR_VAR 0 2
40580: PUSH
40581: LD_VAR 0 1
40585: PPUSH
40586: CALL_OW 313
40590: PUSH
40591: LD_INT 6
40593: LESS
40594: ST_TO_ADDR
// end ;
40595: LD_VAR 0 2
40599: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
40600: LD_INT 0
40602: PPUSH
40603: PPUSH
40604: PPUSH
40605: PPUSH
// tmp := [ ] ;
40606: LD_ADDR_VAR 0 3
40610: PUSH
40611: EMPTY
40612: ST_TO_ADDR
// list := [ ] ;
40613: LD_ADDR_VAR 0 5
40617: PUSH
40618: EMPTY
40619: ST_TO_ADDR
// for i = 16 to 25 do
40620: LD_ADDR_VAR 0 4
40624: PUSH
40625: DOUBLE
40626: LD_INT 16
40628: DEC
40629: ST_TO_ADDR
40630: LD_INT 25
40632: PUSH
40633: FOR_TO
40634: IFFALSE 40707
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
40636: LD_ADDR_VAR 0 3
40640: PUSH
40641: LD_VAR 0 3
40645: PUSH
40646: LD_INT 22
40648: PUSH
40649: LD_VAR 0 1
40653: PPUSH
40654: CALL_OW 255
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: PUSH
40663: LD_INT 91
40665: PUSH
40666: LD_VAR 0 1
40670: PUSH
40671: LD_INT 6
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 30
40681: PUSH
40682: LD_VAR 0 4
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: LIST
40695: PUSH
40696: EMPTY
40697: LIST
40698: PPUSH
40699: CALL_OW 69
40703: ADD
40704: ST_TO_ADDR
40705: GO 40633
40707: POP
40708: POP
// for i = 1 to tmp do
40709: LD_ADDR_VAR 0 4
40713: PUSH
40714: DOUBLE
40715: LD_INT 1
40717: DEC
40718: ST_TO_ADDR
40719: LD_VAR 0 3
40723: PUSH
40724: FOR_TO
40725: IFFALSE 40813
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
40727: LD_ADDR_VAR 0 5
40731: PUSH
40732: LD_VAR 0 5
40736: PUSH
40737: LD_VAR 0 3
40741: PUSH
40742: LD_VAR 0 4
40746: ARRAY
40747: PPUSH
40748: CALL_OW 266
40752: PUSH
40753: LD_VAR 0 3
40757: PUSH
40758: LD_VAR 0 4
40762: ARRAY
40763: PPUSH
40764: CALL_OW 250
40768: PUSH
40769: LD_VAR 0 3
40773: PUSH
40774: LD_VAR 0 4
40778: ARRAY
40779: PPUSH
40780: CALL_OW 251
40784: PUSH
40785: LD_VAR 0 3
40789: PUSH
40790: LD_VAR 0 4
40794: ARRAY
40795: PPUSH
40796: CALL_OW 254
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: PUSH
40807: EMPTY
40808: LIST
40809: ADD
40810: ST_TO_ADDR
40811: GO 40724
40813: POP
40814: POP
// result := list ;
40815: LD_ADDR_VAR 0 2
40819: PUSH
40820: LD_VAR 0 5
40824: ST_TO_ADDR
// end ;
40825: LD_VAR 0 2
40829: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
40830: LD_INT 0
40832: PPUSH
40833: PPUSH
40834: PPUSH
40835: PPUSH
40836: PPUSH
40837: PPUSH
40838: PPUSH
// if not factory then
40839: LD_VAR 0 1
40843: NOT
40844: IFFALSE 40848
// exit ;
40846: GO 41441
// if control = control_apeman then
40848: LD_VAR 0 4
40852: PUSH
40853: LD_INT 5
40855: EQUAL
40856: IFFALSE 40965
// begin tmp := UnitsInside ( factory ) ;
40858: LD_ADDR_VAR 0 8
40862: PUSH
40863: LD_VAR 0 1
40867: PPUSH
40868: CALL_OW 313
40872: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
40873: LD_VAR 0 8
40877: PPUSH
40878: LD_INT 25
40880: PUSH
40881: LD_INT 12
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PPUSH
40888: CALL_OW 72
40892: NOT
40893: IFFALSE 40903
// control := control_manual ;
40895: LD_ADDR_VAR 0 4
40899: PUSH
40900: LD_INT 1
40902: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
40903: LD_ADDR_VAR 0 8
40907: PUSH
40908: LD_VAR 0 1
40912: PPUSH
40913: CALL 40600 0 1
40917: ST_TO_ADDR
// if tmp then
40918: LD_VAR 0 8
40922: IFFALSE 40965
// begin for i in tmp do
40924: LD_ADDR_VAR 0 7
40928: PUSH
40929: LD_VAR 0 8
40933: PUSH
40934: FOR_IN
40935: IFFALSE 40963
// if i [ 1 ] = b_ext_radio then
40937: LD_VAR 0 7
40941: PUSH
40942: LD_INT 1
40944: ARRAY
40945: PUSH
40946: LD_INT 22
40948: EQUAL
40949: IFFALSE 40961
// begin control := control_remote ;
40951: LD_ADDR_VAR 0 4
40955: PUSH
40956: LD_INT 2
40958: ST_TO_ADDR
// break ;
40959: GO 40963
// end ;
40961: GO 40934
40963: POP
40964: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
40965: LD_VAR 0 1
40969: PPUSH
40970: LD_VAR 0 2
40974: PPUSH
40975: LD_VAR 0 3
40979: PPUSH
40980: LD_VAR 0 4
40984: PPUSH
40985: LD_VAR 0 5
40989: PPUSH
40990: CALL_OW 448
40994: IFFALSE 41029
// begin result := [ chassis , engine , control , weapon ] ;
40996: LD_ADDR_VAR 0 6
41000: PUSH
41001: LD_VAR 0 2
41005: PUSH
41006: LD_VAR 0 3
41010: PUSH
41011: LD_VAR 0 4
41015: PUSH
41016: LD_VAR 0 5
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: ST_TO_ADDR
// exit ;
41027: GO 41441
// end ; _chassis := AvailableChassisList ( factory ) ;
41029: LD_ADDR_VAR 0 9
41033: PUSH
41034: LD_VAR 0 1
41038: PPUSH
41039: CALL_OW 475
41043: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41044: LD_ADDR_VAR 0 11
41048: PUSH
41049: LD_VAR 0 1
41053: PPUSH
41054: CALL_OW 476
41058: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41059: LD_ADDR_VAR 0 12
41063: PUSH
41064: LD_VAR 0 1
41068: PPUSH
41069: CALL_OW 477
41073: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41074: LD_ADDR_VAR 0 10
41078: PUSH
41079: LD_VAR 0 1
41083: PPUSH
41084: CALL_OW 478
41088: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41089: LD_VAR 0 9
41093: NOT
41094: PUSH
41095: LD_VAR 0 11
41099: NOT
41100: OR
41101: PUSH
41102: LD_VAR 0 12
41106: NOT
41107: OR
41108: PUSH
41109: LD_VAR 0 10
41113: NOT
41114: OR
41115: IFFALSE 41150
// begin result := [ chassis , engine , control , weapon ] ;
41117: LD_ADDR_VAR 0 6
41121: PUSH
41122: LD_VAR 0 2
41126: PUSH
41127: LD_VAR 0 3
41131: PUSH
41132: LD_VAR 0 4
41136: PUSH
41137: LD_VAR 0 5
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: ST_TO_ADDR
// exit ;
41148: GO 41441
// end ; if not chassis in _chassis then
41150: LD_VAR 0 2
41154: PUSH
41155: LD_VAR 0 9
41159: IN
41160: NOT
41161: IFFALSE 41187
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41163: LD_ADDR_VAR 0 2
41167: PUSH
41168: LD_VAR 0 9
41172: PUSH
41173: LD_INT 1
41175: PPUSH
41176: LD_VAR 0 9
41180: PPUSH
41181: CALL_OW 12
41185: ARRAY
41186: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41187: LD_VAR 0 2
41191: PPUSH
41192: LD_VAR 0 3
41196: PPUSH
41197: CALL 41446 0 2
41201: NOT
41202: IFFALSE 41261
// repeat engine := _engine [ 1 ] ;
41204: LD_ADDR_VAR 0 3
41208: PUSH
41209: LD_VAR 0 11
41213: PUSH
41214: LD_INT 1
41216: ARRAY
41217: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41218: LD_ADDR_VAR 0 11
41222: PUSH
41223: LD_VAR 0 11
41227: PPUSH
41228: LD_INT 1
41230: PPUSH
41231: CALL_OW 3
41235: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41236: LD_VAR 0 2
41240: PPUSH
41241: LD_VAR 0 3
41245: PPUSH
41246: CALL 41446 0 2
41250: PUSH
41251: LD_VAR 0 11
41255: PUSH
41256: EMPTY
41257: EQUAL
41258: OR
41259: IFFALSE 41204
// if not control in _control then
41261: LD_VAR 0 4
41265: PUSH
41266: LD_VAR 0 12
41270: IN
41271: NOT
41272: IFFALSE 41298
// control := _control [ rand ( 1 , _control ) ] ;
41274: LD_ADDR_VAR 0 4
41278: PUSH
41279: LD_VAR 0 12
41283: PUSH
41284: LD_INT 1
41286: PPUSH
41287: LD_VAR 0 12
41291: PPUSH
41292: CALL_OW 12
41296: ARRAY
41297: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
41298: LD_VAR 0 2
41302: PPUSH
41303: LD_VAR 0 5
41307: PPUSH
41308: CALL 41666 0 2
41312: NOT
41313: IFFALSE 41372
// repeat weapon := _weapon [ 1 ] ;
41315: LD_ADDR_VAR 0 5
41319: PUSH
41320: LD_VAR 0 10
41324: PUSH
41325: LD_INT 1
41327: ARRAY
41328: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
41329: LD_ADDR_VAR 0 10
41333: PUSH
41334: LD_VAR 0 10
41338: PPUSH
41339: LD_INT 1
41341: PPUSH
41342: CALL_OW 3
41346: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
41347: LD_VAR 0 2
41351: PPUSH
41352: LD_VAR 0 5
41356: PPUSH
41357: CALL 41666 0 2
41361: PUSH
41362: LD_VAR 0 10
41366: PUSH
41367: EMPTY
41368: EQUAL
41369: OR
41370: IFFALSE 41315
// result := [ ] ;
41372: LD_ADDR_VAR 0 6
41376: PUSH
41377: EMPTY
41378: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41379: LD_VAR 0 1
41383: PPUSH
41384: LD_VAR 0 2
41388: PPUSH
41389: LD_VAR 0 3
41393: PPUSH
41394: LD_VAR 0 4
41398: PPUSH
41399: LD_VAR 0 5
41403: PPUSH
41404: CALL_OW 448
41408: IFFALSE 41441
// result := [ chassis , engine , control , weapon ] ;
41410: LD_ADDR_VAR 0 6
41414: PUSH
41415: LD_VAR 0 2
41419: PUSH
41420: LD_VAR 0 3
41424: PUSH
41425: LD_VAR 0 4
41429: PUSH
41430: LD_VAR 0 5
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: ST_TO_ADDR
// end ;
41441: LD_VAR 0 6
41445: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
41446: LD_INT 0
41448: PPUSH
// if not chassis or not engine then
41449: LD_VAR 0 1
41453: NOT
41454: PUSH
41455: LD_VAR 0 2
41459: NOT
41460: OR
41461: IFFALSE 41465
// exit ;
41463: GO 41661
// case engine of engine_solar :
41465: LD_VAR 0 2
41469: PUSH
41470: LD_INT 2
41472: DOUBLE
41473: EQUAL
41474: IFTRUE 41478
41476: GO 41516
41478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
41479: LD_ADDR_VAR 0 3
41483: PUSH
41484: LD_INT 11
41486: PUSH
41487: LD_INT 12
41489: PUSH
41490: LD_INT 13
41492: PUSH
41493: LD_INT 14
41495: PUSH
41496: LD_INT 1
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: LD_INT 3
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: ST_TO_ADDR
41514: GO 41645
41516: LD_INT 1
41518: DOUBLE
41519: EQUAL
41520: IFTRUE 41524
41522: GO 41586
41524: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
41525: LD_ADDR_VAR 0 3
41529: PUSH
41530: LD_INT 11
41532: PUSH
41533: LD_INT 12
41535: PUSH
41536: LD_INT 13
41538: PUSH
41539: LD_INT 14
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: LD_INT 3
41550: PUSH
41551: LD_INT 4
41553: PUSH
41554: LD_INT 5
41556: PUSH
41557: LD_INT 21
41559: PUSH
41560: LD_INT 23
41562: PUSH
41563: LD_INT 22
41565: PUSH
41566: LD_INT 24
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: ST_TO_ADDR
41584: GO 41645
41586: LD_INT 3
41588: DOUBLE
41589: EQUAL
41590: IFTRUE 41594
41592: GO 41644
41594: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
41595: LD_ADDR_VAR 0 3
41599: PUSH
41600: LD_INT 13
41602: PUSH
41603: LD_INT 14
41605: PUSH
41606: LD_INT 2
41608: PUSH
41609: LD_INT 3
41611: PUSH
41612: LD_INT 4
41614: PUSH
41615: LD_INT 5
41617: PUSH
41618: LD_INT 21
41620: PUSH
41621: LD_INT 22
41623: PUSH
41624: LD_INT 23
41626: PUSH
41627: LD_INT 24
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: ST_TO_ADDR
41642: GO 41645
41644: POP
// result := ( chassis in result ) ;
41645: LD_ADDR_VAR 0 3
41649: PUSH
41650: LD_VAR 0 1
41654: PUSH
41655: LD_VAR 0 3
41659: IN
41660: ST_TO_ADDR
// end ;
41661: LD_VAR 0 3
41665: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
41666: LD_INT 0
41668: PPUSH
// if not chassis or not weapon then
41669: LD_VAR 0 1
41673: NOT
41674: PUSH
41675: LD_VAR 0 2
41679: NOT
41680: OR
41681: IFFALSE 41685
// exit ;
41683: GO 42747
// case weapon of us_machine_gun :
41685: LD_VAR 0 2
41689: PUSH
41690: LD_INT 2
41692: DOUBLE
41693: EQUAL
41694: IFTRUE 41698
41696: GO 41728
41698: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
41699: LD_ADDR_VAR 0 3
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: LD_INT 3
41712: PUSH
41713: LD_INT 4
41715: PUSH
41716: LD_INT 5
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: ST_TO_ADDR
41726: GO 42731
41728: LD_INT 3
41730: DOUBLE
41731: EQUAL
41732: IFTRUE 41736
41734: GO 41766
41736: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
41737: LD_ADDR_VAR 0 3
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: LD_INT 3
41750: PUSH
41751: LD_INT 4
41753: PUSH
41754: LD_INT 5
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: ST_TO_ADDR
41764: GO 42731
41766: LD_INT 11
41768: DOUBLE
41769: EQUAL
41770: IFTRUE 41774
41772: GO 41804
41774: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
41775: LD_ADDR_VAR 0 3
41779: PUSH
41780: LD_INT 1
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: LD_INT 3
41788: PUSH
41789: LD_INT 4
41791: PUSH
41792: LD_INT 5
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: ST_TO_ADDR
41802: GO 42731
41804: LD_INT 4
41806: DOUBLE
41807: EQUAL
41808: IFTRUE 41812
41810: GO 41838
41812: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
41813: LD_ADDR_VAR 0 3
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: LD_INT 3
41823: PUSH
41824: LD_INT 4
41826: PUSH
41827: LD_INT 5
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: ST_TO_ADDR
41836: GO 42731
41838: LD_INT 5
41840: DOUBLE
41841: EQUAL
41842: IFTRUE 41846
41844: GO 41872
41846: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
41847: LD_ADDR_VAR 0 3
41851: PUSH
41852: LD_INT 2
41854: PUSH
41855: LD_INT 3
41857: PUSH
41858: LD_INT 4
41860: PUSH
41861: LD_INT 5
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: LIST
41868: LIST
41869: ST_TO_ADDR
41870: GO 42731
41872: LD_INT 9
41874: DOUBLE
41875: EQUAL
41876: IFTRUE 41880
41878: GO 41906
41880: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
41881: LD_ADDR_VAR 0 3
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: LD_INT 3
41891: PUSH
41892: LD_INT 4
41894: PUSH
41895: LD_INT 5
41897: PUSH
41898: EMPTY
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: ST_TO_ADDR
41904: GO 42731
41906: LD_INT 7
41908: DOUBLE
41909: EQUAL
41910: IFTRUE 41914
41912: GO 41940
41914: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
41915: LD_ADDR_VAR 0 3
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: LD_INT 3
41925: PUSH
41926: LD_INT 4
41928: PUSH
41929: LD_INT 5
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: ST_TO_ADDR
41938: GO 42731
41940: LD_INT 12
41942: DOUBLE
41943: EQUAL
41944: IFTRUE 41948
41946: GO 41974
41948: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
41949: LD_ADDR_VAR 0 3
41953: PUSH
41954: LD_INT 2
41956: PUSH
41957: LD_INT 3
41959: PUSH
41960: LD_INT 4
41962: PUSH
41963: LD_INT 5
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: ST_TO_ADDR
41972: GO 42731
41974: LD_INT 13
41976: DOUBLE
41977: EQUAL
41978: IFTRUE 41982
41980: GO 42008
41982: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
41983: LD_ADDR_VAR 0 3
41987: PUSH
41988: LD_INT 2
41990: PUSH
41991: LD_INT 3
41993: PUSH
41994: LD_INT 4
41996: PUSH
41997: LD_INT 5
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: ST_TO_ADDR
42006: GO 42731
42008: LD_INT 14
42010: DOUBLE
42011: EQUAL
42012: IFTRUE 42016
42014: GO 42034
42016: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42017: LD_ADDR_VAR 0 3
42021: PUSH
42022: LD_INT 4
42024: PUSH
42025: LD_INT 5
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: ST_TO_ADDR
42032: GO 42731
42034: LD_INT 6
42036: DOUBLE
42037: EQUAL
42038: IFTRUE 42042
42040: GO 42060
42042: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42043: LD_ADDR_VAR 0 3
42047: PUSH
42048: LD_INT 4
42050: PUSH
42051: LD_INT 5
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: ST_TO_ADDR
42058: GO 42731
42060: LD_INT 10
42062: DOUBLE
42063: EQUAL
42064: IFTRUE 42068
42066: GO 42086
42068: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42069: LD_ADDR_VAR 0 3
42073: PUSH
42074: LD_INT 4
42076: PUSH
42077: LD_INT 5
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: ST_TO_ADDR
42084: GO 42731
42086: LD_INT 22
42088: DOUBLE
42089: EQUAL
42090: IFTRUE 42094
42092: GO 42120
42094: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42095: LD_ADDR_VAR 0 3
42099: PUSH
42100: LD_INT 11
42102: PUSH
42103: LD_INT 12
42105: PUSH
42106: LD_INT 13
42108: PUSH
42109: LD_INT 14
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: ST_TO_ADDR
42118: GO 42731
42120: LD_INT 23
42122: DOUBLE
42123: EQUAL
42124: IFTRUE 42128
42126: GO 42154
42128: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42129: LD_ADDR_VAR 0 3
42133: PUSH
42134: LD_INT 11
42136: PUSH
42137: LD_INT 12
42139: PUSH
42140: LD_INT 13
42142: PUSH
42143: LD_INT 14
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: ST_TO_ADDR
42152: GO 42731
42154: LD_INT 24
42156: DOUBLE
42157: EQUAL
42158: IFTRUE 42162
42160: GO 42188
42162: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42163: LD_ADDR_VAR 0 3
42167: PUSH
42168: LD_INT 11
42170: PUSH
42171: LD_INT 12
42173: PUSH
42174: LD_INT 13
42176: PUSH
42177: LD_INT 14
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: ST_TO_ADDR
42186: GO 42731
42188: LD_INT 30
42190: DOUBLE
42191: EQUAL
42192: IFTRUE 42196
42194: GO 42222
42196: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42197: LD_ADDR_VAR 0 3
42201: PUSH
42202: LD_INT 11
42204: PUSH
42205: LD_INT 12
42207: PUSH
42208: LD_INT 13
42210: PUSH
42211: LD_INT 14
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: ST_TO_ADDR
42220: GO 42731
42222: LD_INT 25
42224: DOUBLE
42225: EQUAL
42226: IFTRUE 42230
42228: GO 42248
42230: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42231: LD_ADDR_VAR 0 3
42235: PUSH
42236: LD_INT 13
42238: PUSH
42239: LD_INT 14
42241: PUSH
42242: EMPTY
42243: LIST
42244: LIST
42245: ST_TO_ADDR
42246: GO 42731
42248: LD_INT 27
42250: DOUBLE
42251: EQUAL
42252: IFTRUE 42256
42254: GO 42274
42256: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
42257: LD_ADDR_VAR 0 3
42261: PUSH
42262: LD_INT 13
42264: PUSH
42265: LD_INT 14
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: ST_TO_ADDR
42272: GO 42731
42274: LD_EXP 50
42278: DOUBLE
42279: EQUAL
42280: IFTRUE 42284
42282: GO 42310
42284: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
42285: LD_ADDR_VAR 0 3
42289: PUSH
42290: LD_INT 11
42292: PUSH
42293: LD_INT 12
42295: PUSH
42296: LD_INT 13
42298: PUSH
42299: LD_INT 14
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: ST_TO_ADDR
42308: GO 42731
42310: LD_INT 28
42312: DOUBLE
42313: EQUAL
42314: IFTRUE 42318
42316: GO 42336
42318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
42319: LD_ADDR_VAR 0 3
42323: PUSH
42324: LD_INT 13
42326: PUSH
42327: LD_INT 14
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: ST_TO_ADDR
42334: GO 42731
42336: LD_INT 29
42338: DOUBLE
42339: EQUAL
42340: IFTRUE 42344
42342: GO 42362
42344: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
42345: LD_ADDR_VAR 0 3
42349: PUSH
42350: LD_INT 13
42352: PUSH
42353: LD_INT 14
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: ST_TO_ADDR
42360: GO 42731
42362: LD_INT 31
42364: DOUBLE
42365: EQUAL
42366: IFTRUE 42370
42368: GO 42388
42370: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
42371: LD_ADDR_VAR 0 3
42375: PUSH
42376: LD_INT 13
42378: PUSH
42379: LD_INT 14
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: ST_TO_ADDR
42386: GO 42731
42388: LD_INT 26
42390: DOUBLE
42391: EQUAL
42392: IFTRUE 42396
42394: GO 42414
42396: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
42397: LD_ADDR_VAR 0 3
42401: PUSH
42402: LD_INT 13
42404: PUSH
42405: LD_INT 14
42407: PUSH
42408: EMPTY
42409: LIST
42410: LIST
42411: ST_TO_ADDR
42412: GO 42731
42414: LD_INT 42
42416: DOUBLE
42417: EQUAL
42418: IFTRUE 42422
42420: GO 42448
42422: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
42423: LD_ADDR_VAR 0 3
42427: PUSH
42428: LD_INT 21
42430: PUSH
42431: LD_INT 22
42433: PUSH
42434: LD_INT 23
42436: PUSH
42437: LD_INT 24
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: ST_TO_ADDR
42446: GO 42731
42448: LD_INT 43
42450: DOUBLE
42451: EQUAL
42452: IFTRUE 42456
42454: GO 42482
42456: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
42457: LD_ADDR_VAR 0 3
42461: PUSH
42462: LD_INT 21
42464: PUSH
42465: LD_INT 22
42467: PUSH
42468: LD_INT 23
42470: PUSH
42471: LD_INT 24
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: ST_TO_ADDR
42480: GO 42731
42482: LD_INT 44
42484: DOUBLE
42485: EQUAL
42486: IFTRUE 42490
42488: GO 42516
42490: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
42491: LD_ADDR_VAR 0 3
42495: PUSH
42496: LD_INT 21
42498: PUSH
42499: LD_INT 22
42501: PUSH
42502: LD_INT 23
42504: PUSH
42505: LD_INT 24
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: ST_TO_ADDR
42514: GO 42731
42516: LD_INT 45
42518: DOUBLE
42519: EQUAL
42520: IFTRUE 42524
42522: GO 42550
42524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
42525: LD_ADDR_VAR 0 3
42529: PUSH
42530: LD_INT 21
42532: PUSH
42533: LD_INT 22
42535: PUSH
42536: LD_INT 23
42538: PUSH
42539: LD_INT 24
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: ST_TO_ADDR
42548: GO 42731
42550: LD_INT 49
42552: DOUBLE
42553: EQUAL
42554: IFTRUE 42558
42556: GO 42584
42558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
42559: LD_ADDR_VAR 0 3
42563: PUSH
42564: LD_INT 21
42566: PUSH
42567: LD_INT 22
42569: PUSH
42570: LD_INT 23
42572: PUSH
42573: LD_INT 24
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: ST_TO_ADDR
42582: GO 42731
42584: LD_INT 51
42586: DOUBLE
42587: EQUAL
42588: IFTRUE 42592
42590: GO 42618
42592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
42593: LD_ADDR_VAR 0 3
42597: PUSH
42598: LD_INT 21
42600: PUSH
42601: LD_INT 22
42603: PUSH
42604: LD_INT 23
42606: PUSH
42607: LD_INT 24
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: ST_TO_ADDR
42616: GO 42731
42618: LD_INT 52
42620: DOUBLE
42621: EQUAL
42622: IFTRUE 42626
42624: GO 42652
42626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
42627: LD_ADDR_VAR 0 3
42631: PUSH
42632: LD_INT 21
42634: PUSH
42635: LD_INT 22
42637: PUSH
42638: LD_INT 23
42640: PUSH
42641: LD_INT 24
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: ST_TO_ADDR
42650: GO 42731
42652: LD_INT 53
42654: DOUBLE
42655: EQUAL
42656: IFTRUE 42660
42658: GO 42678
42660: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
42661: LD_ADDR_VAR 0 3
42665: PUSH
42666: LD_INT 23
42668: PUSH
42669: LD_INT 24
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: ST_TO_ADDR
42676: GO 42731
42678: LD_INT 46
42680: DOUBLE
42681: EQUAL
42682: IFTRUE 42686
42684: GO 42704
42686: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
42687: LD_ADDR_VAR 0 3
42691: PUSH
42692: LD_INT 23
42694: PUSH
42695: LD_INT 24
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: ST_TO_ADDR
42702: GO 42731
42704: LD_INT 47
42706: DOUBLE
42707: EQUAL
42708: IFTRUE 42712
42710: GO 42730
42712: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42713: LD_ADDR_VAR 0 3
42717: PUSH
42718: LD_INT 23
42720: PUSH
42721: LD_INT 24
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: ST_TO_ADDR
42728: GO 42731
42730: POP
// result := ( chassis in result ) ;
42731: LD_ADDR_VAR 0 3
42735: PUSH
42736: LD_VAR 0 1
42740: PUSH
42741: LD_VAR 0 3
42745: IN
42746: ST_TO_ADDR
// end ;
42747: LD_VAR 0 3
42751: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
42752: LD_INT 0
42754: PPUSH
42755: PPUSH
42756: PPUSH
42757: PPUSH
42758: PPUSH
42759: PPUSH
42760: PPUSH
// result := array ;
42761: LD_ADDR_VAR 0 5
42765: PUSH
42766: LD_VAR 0 1
42770: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
42771: LD_VAR 0 1
42775: NOT
42776: PUSH
42777: LD_VAR 0 2
42781: NOT
42782: OR
42783: PUSH
42784: LD_VAR 0 3
42788: NOT
42789: OR
42790: PUSH
42791: LD_VAR 0 2
42795: PUSH
42796: LD_VAR 0 1
42800: GREATER
42801: OR
42802: PUSH
42803: LD_VAR 0 3
42807: PUSH
42808: LD_VAR 0 1
42812: GREATER
42813: OR
42814: IFFALSE 42818
// exit ;
42816: GO 43114
// if direction then
42818: LD_VAR 0 4
42822: IFFALSE 42886
// begin d := 1 ;
42824: LD_ADDR_VAR 0 9
42828: PUSH
42829: LD_INT 1
42831: ST_TO_ADDR
// if i_from > i_to then
42832: LD_VAR 0 2
42836: PUSH
42837: LD_VAR 0 3
42841: GREATER
42842: IFFALSE 42868
// length := ( array - i_from ) + i_to else
42844: LD_ADDR_VAR 0 11
42848: PUSH
42849: LD_VAR 0 1
42853: PUSH
42854: LD_VAR 0 2
42858: MINUS
42859: PUSH
42860: LD_VAR 0 3
42864: PLUS
42865: ST_TO_ADDR
42866: GO 42884
// length := i_to - i_from ;
42868: LD_ADDR_VAR 0 11
42872: PUSH
42873: LD_VAR 0 3
42877: PUSH
42878: LD_VAR 0 2
42882: MINUS
42883: ST_TO_ADDR
// end else
42884: GO 42947
// begin d := - 1 ;
42886: LD_ADDR_VAR 0 9
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: ST_TO_ADDR
// if i_from > i_to then
42895: LD_VAR 0 2
42899: PUSH
42900: LD_VAR 0 3
42904: GREATER
42905: IFFALSE 42925
// length := i_from - i_to else
42907: LD_ADDR_VAR 0 11
42911: PUSH
42912: LD_VAR 0 2
42916: PUSH
42917: LD_VAR 0 3
42921: MINUS
42922: ST_TO_ADDR
42923: GO 42947
// length := ( array - i_to ) + i_from ;
42925: LD_ADDR_VAR 0 11
42929: PUSH
42930: LD_VAR 0 1
42934: PUSH
42935: LD_VAR 0 3
42939: MINUS
42940: PUSH
42941: LD_VAR 0 2
42945: PLUS
42946: ST_TO_ADDR
// end ; if not length then
42947: LD_VAR 0 11
42951: NOT
42952: IFFALSE 42956
// exit ;
42954: GO 43114
// tmp := array ;
42956: LD_ADDR_VAR 0 10
42960: PUSH
42961: LD_VAR 0 1
42965: ST_TO_ADDR
// for i = 1 to length do
42966: LD_ADDR_VAR 0 6
42970: PUSH
42971: DOUBLE
42972: LD_INT 1
42974: DEC
42975: ST_TO_ADDR
42976: LD_VAR 0 11
42980: PUSH
42981: FOR_TO
42982: IFFALSE 43102
// begin for j = 1 to array do
42984: LD_ADDR_VAR 0 7
42988: PUSH
42989: DOUBLE
42990: LD_INT 1
42992: DEC
42993: ST_TO_ADDR
42994: LD_VAR 0 1
42998: PUSH
42999: FOR_TO
43000: IFFALSE 43088
// begin k := j + d ;
43002: LD_ADDR_VAR 0 8
43006: PUSH
43007: LD_VAR 0 7
43011: PUSH
43012: LD_VAR 0 9
43016: PLUS
43017: ST_TO_ADDR
// if k > array then
43018: LD_VAR 0 8
43022: PUSH
43023: LD_VAR 0 1
43027: GREATER
43028: IFFALSE 43038
// k := 1 ;
43030: LD_ADDR_VAR 0 8
43034: PUSH
43035: LD_INT 1
43037: ST_TO_ADDR
// if not k then
43038: LD_VAR 0 8
43042: NOT
43043: IFFALSE 43055
// k := array ;
43045: LD_ADDR_VAR 0 8
43049: PUSH
43050: LD_VAR 0 1
43054: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43055: LD_ADDR_VAR 0 10
43059: PUSH
43060: LD_VAR 0 10
43064: PPUSH
43065: LD_VAR 0 8
43069: PPUSH
43070: LD_VAR 0 1
43074: PUSH
43075: LD_VAR 0 7
43079: ARRAY
43080: PPUSH
43081: CALL_OW 1
43085: ST_TO_ADDR
// end ;
43086: GO 42999
43088: POP
43089: POP
// array := tmp ;
43090: LD_ADDR_VAR 0 1
43094: PUSH
43095: LD_VAR 0 10
43099: ST_TO_ADDR
// end ;
43100: GO 42981
43102: POP
43103: POP
// result := array ;
43104: LD_ADDR_VAR 0 5
43108: PUSH
43109: LD_VAR 0 1
43113: ST_TO_ADDR
// end ;
43114: LD_VAR 0 5
43118: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43119: LD_INT 0
43121: PPUSH
43122: PPUSH
// result := 0 ;
43123: LD_ADDR_VAR 0 3
43127: PUSH
43128: LD_INT 0
43130: ST_TO_ADDR
// if not array or not value in array then
43131: LD_VAR 0 1
43135: NOT
43136: PUSH
43137: LD_VAR 0 2
43141: PUSH
43142: LD_VAR 0 1
43146: IN
43147: NOT
43148: OR
43149: IFFALSE 43153
// exit ;
43151: GO 43207
// for i = 1 to array do
43153: LD_ADDR_VAR 0 4
43157: PUSH
43158: DOUBLE
43159: LD_INT 1
43161: DEC
43162: ST_TO_ADDR
43163: LD_VAR 0 1
43167: PUSH
43168: FOR_TO
43169: IFFALSE 43205
// if value = array [ i ] then
43171: LD_VAR 0 2
43175: PUSH
43176: LD_VAR 0 1
43180: PUSH
43181: LD_VAR 0 4
43185: ARRAY
43186: EQUAL
43187: IFFALSE 43203
// begin result := i ;
43189: LD_ADDR_VAR 0 3
43193: PUSH
43194: LD_VAR 0 4
43198: ST_TO_ADDR
// exit ;
43199: POP
43200: POP
43201: GO 43207
// end ;
43203: GO 43168
43205: POP
43206: POP
// end ;
43207: LD_VAR 0 3
43211: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43212: LD_INT 0
43214: PPUSH
// vc_chassis := chassis ;
43215: LD_ADDR_OWVAR 37
43219: PUSH
43220: LD_VAR 0 1
43224: ST_TO_ADDR
// vc_engine := engine ;
43225: LD_ADDR_OWVAR 39
43229: PUSH
43230: LD_VAR 0 2
43234: ST_TO_ADDR
// vc_control := control ;
43235: LD_ADDR_OWVAR 38
43239: PUSH
43240: LD_VAR 0 3
43244: ST_TO_ADDR
// vc_weapon := weapon ;
43245: LD_ADDR_OWVAR 40
43249: PUSH
43250: LD_VAR 0 4
43254: ST_TO_ADDR
// vc_fuel_battery := fuel ;
43255: LD_ADDR_OWVAR 41
43259: PUSH
43260: LD_VAR 0 5
43264: ST_TO_ADDR
// end ;
43265: LD_VAR 0 6
43269: RET
// export function WantPlant ( unit ) ; var task ; begin
43270: LD_INT 0
43272: PPUSH
43273: PPUSH
// result := false ;
43274: LD_ADDR_VAR 0 2
43278: PUSH
43279: LD_INT 0
43281: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
43282: LD_ADDR_VAR 0 3
43286: PUSH
43287: LD_VAR 0 1
43291: PPUSH
43292: CALL_OW 437
43296: ST_TO_ADDR
// if task then
43297: LD_VAR 0 3
43301: IFFALSE 43329
// if task [ 1 ] [ 1 ] = p then
43303: LD_VAR 0 3
43307: PUSH
43308: LD_INT 1
43310: ARRAY
43311: PUSH
43312: LD_INT 1
43314: ARRAY
43315: PUSH
43316: LD_STRING p
43318: EQUAL
43319: IFFALSE 43329
// result := true ;
43321: LD_ADDR_VAR 0 2
43325: PUSH
43326: LD_INT 1
43328: ST_TO_ADDR
// end ;
43329: LD_VAR 0 2
43333: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
43334: LD_INT 0
43336: PPUSH
43337: PPUSH
43338: PPUSH
43339: PPUSH
// if pos < 1 then
43340: LD_VAR 0 2
43344: PUSH
43345: LD_INT 1
43347: LESS
43348: IFFALSE 43352
// exit ;
43350: GO 43655
// if pos = 1 then
43352: LD_VAR 0 2
43356: PUSH
43357: LD_INT 1
43359: EQUAL
43360: IFFALSE 43393
// result := Replace ( arr , pos [ 1 ] , value ) else
43362: LD_ADDR_VAR 0 4
43366: PUSH
43367: LD_VAR 0 1
43371: PPUSH
43372: LD_VAR 0 2
43376: PUSH
43377: LD_INT 1
43379: ARRAY
43380: PPUSH
43381: LD_VAR 0 3
43385: PPUSH
43386: CALL_OW 1
43390: ST_TO_ADDR
43391: GO 43655
// begin tmp := arr ;
43393: LD_ADDR_VAR 0 6
43397: PUSH
43398: LD_VAR 0 1
43402: ST_TO_ADDR
// s_arr := [ tmp ] ;
43403: LD_ADDR_VAR 0 7
43407: PUSH
43408: LD_VAR 0 6
43412: PUSH
43413: EMPTY
43414: LIST
43415: ST_TO_ADDR
// for i = 1 to pos - 1 do
43416: LD_ADDR_VAR 0 5
43420: PUSH
43421: DOUBLE
43422: LD_INT 1
43424: DEC
43425: ST_TO_ADDR
43426: LD_VAR 0 2
43430: PUSH
43431: LD_INT 1
43433: MINUS
43434: PUSH
43435: FOR_TO
43436: IFFALSE 43481
// begin tmp := tmp [ pos [ i ] ] ;
43438: LD_ADDR_VAR 0 6
43442: PUSH
43443: LD_VAR 0 6
43447: PUSH
43448: LD_VAR 0 2
43452: PUSH
43453: LD_VAR 0 5
43457: ARRAY
43458: ARRAY
43459: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
43460: LD_ADDR_VAR 0 7
43464: PUSH
43465: LD_VAR 0 7
43469: PUSH
43470: LD_VAR 0 6
43474: PUSH
43475: EMPTY
43476: LIST
43477: ADD
43478: ST_TO_ADDR
// end ;
43479: GO 43435
43481: POP
43482: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
43483: LD_ADDR_VAR 0 6
43487: PUSH
43488: LD_VAR 0 6
43492: PPUSH
43493: LD_VAR 0 2
43497: PUSH
43498: LD_VAR 0 2
43502: ARRAY
43503: PPUSH
43504: LD_VAR 0 3
43508: PPUSH
43509: CALL_OW 1
43513: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
43514: LD_ADDR_VAR 0 7
43518: PUSH
43519: LD_VAR 0 7
43523: PPUSH
43524: LD_VAR 0 7
43528: PPUSH
43529: LD_VAR 0 6
43533: PPUSH
43534: CALL_OW 1
43538: ST_TO_ADDR
// for i = s_arr downto 2 do
43539: LD_ADDR_VAR 0 5
43543: PUSH
43544: DOUBLE
43545: LD_VAR 0 7
43549: INC
43550: ST_TO_ADDR
43551: LD_INT 2
43553: PUSH
43554: FOR_DOWNTO
43555: IFFALSE 43639
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
43557: LD_ADDR_VAR 0 6
43561: PUSH
43562: LD_VAR 0 7
43566: PUSH
43567: LD_VAR 0 5
43571: PUSH
43572: LD_INT 1
43574: MINUS
43575: ARRAY
43576: PPUSH
43577: LD_VAR 0 2
43581: PUSH
43582: LD_VAR 0 5
43586: PUSH
43587: LD_INT 1
43589: MINUS
43590: ARRAY
43591: PPUSH
43592: LD_VAR 0 7
43596: PUSH
43597: LD_VAR 0 5
43601: ARRAY
43602: PPUSH
43603: CALL_OW 1
43607: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
43608: LD_ADDR_VAR 0 7
43612: PUSH
43613: LD_VAR 0 7
43617: PPUSH
43618: LD_VAR 0 5
43622: PUSH
43623: LD_INT 1
43625: MINUS
43626: PPUSH
43627: LD_VAR 0 6
43631: PPUSH
43632: CALL_OW 1
43636: ST_TO_ADDR
// end ;
43637: GO 43554
43639: POP
43640: POP
// result := s_arr [ 1 ] ;
43641: LD_ADDR_VAR 0 4
43645: PUSH
43646: LD_VAR 0 7
43650: PUSH
43651: LD_INT 1
43653: ARRAY
43654: ST_TO_ADDR
// end ; end ;
43655: LD_VAR 0 4
43659: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
43660: LD_INT 0
43662: PPUSH
43663: PPUSH
// if not list then
43664: LD_VAR 0 1
43668: NOT
43669: IFFALSE 43673
// exit ;
43671: GO 43764
// i := list [ pos1 ] ;
43673: LD_ADDR_VAR 0 5
43677: PUSH
43678: LD_VAR 0 1
43682: PUSH
43683: LD_VAR 0 2
43687: ARRAY
43688: ST_TO_ADDR
// if not i then
43689: LD_VAR 0 5
43693: NOT
43694: IFFALSE 43698
// exit ;
43696: GO 43764
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
43698: LD_ADDR_VAR 0 1
43702: PUSH
43703: LD_VAR 0 1
43707: PPUSH
43708: LD_VAR 0 2
43712: PPUSH
43713: LD_VAR 0 1
43717: PUSH
43718: LD_VAR 0 3
43722: ARRAY
43723: PPUSH
43724: CALL_OW 1
43728: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
43729: LD_ADDR_VAR 0 1
43733: PUSH
43734: LD_VAR 0 1
43738: PPUSH
43739: LD_VAR 0 3
43743: PPUSH
43744: LD_VAR 0 5
43748: PPUSH
43749: CALL_OW 1
43753: ST_TO_ADDR
// result := list ;
43754: LD_ADDR_VAR 0 4
43758: PUSH
43759: LD_VAR 0 1
43763: ST_TO_ADDR
// end ;
43764: LD_VAR 0 4
43768: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
43769: LD_INT 0
43771: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
43772: LD_ADDR_VAR 0 5
43776: PUSH
43777: LD_VAR 0 1
43781: PPUSH
43782: CALL_OW 250
43786: PPUSH
43787: LD_VAR 0 1
43791: PPUSH
43792: CALL_OW 251
43796: PPUSH
43797: LD_VAR 0 2
43801: PPUSH
43802: LD_VAR 0 3
43806: PPUSH
43807: LD_VAR 0 4
43811: PPUSH
43812: CALL 43822 0 5
43816: ST_TO_ADDR
// end ;
43817: LD_VAR 0 5
43821: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
43822: LD_INT 0
43824: PPUSH
43825: PPUSH
43826: PPUSH
43827: PPUSH
// if not list then
43828: LD_VAR 0 3
43832: NOT
43833: IFFALSE 43837
// exit ;
43835: GO 44225
// result := [ ] ;
43837: LD_ADDR_VAR 0 6
43841: PUSH
43842: EMPTY
43843: ST_TO_ADDR
// for i in list do
43844: LD_ADDR_VAR 0 7
43848: PUSH
43849: LD_VAR 0 3
43853: PUSH
43854: FOR_IN
43855: IFFALSE 44057
// begin tmp := GetDistUnitXY ( i , x , y ) ;
43857: LD_ADDR_VAR 0 9
43861: PUSH
43862: LD_VAR 0 7
43866: PPUSH
43867: LD_VAR 0 1
43871: PPUSH
43872: LD_VAR 0 2
43876: PPUSH
43877: CALL_OW 297
43881: ST_TO_ADDR
// if not result then
43882: LD_VAR 0 6
43886: NOT
43887: IFFALSE 43913
// result := [ [ i , tmp ] ] else
43889: LD_ADDR_VAR 0 6
43893: PUSH
43894: LD_VAR 0 7
43898: PUSH
43899: LD_VAR 0 9
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: EMPTY
43909: LIST
43910: ST_TO_ADDR
43911: GO 44055
// begin if result [ result ] [ 2 ] < tmp then
43913: LD_VAR 0 6
43917: PUSH
43918: LD_VAR 0 6
43922: ARRAY
43923: PUSH
43924: LD_INT 2
43926: ARRAY
43927: PUSH
43928: LD_VAR 0 9
43932: LESS
43933: IFFALSE 43975
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
43935: LD_ADDR_VAR 0 6
43939: PUSH
43940: LD_VAR 0 6
43944: PPUSH
43945: LD_VAR 0 6
43949: PUSH
43950: LD_INT 1
43952: PLUS
43953: PPUSH
43954: LD_VAR 0 7
43958: PUSH
43959: LD_VAR 0 9
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PPUSH
43968: CALL_OW 2
43972: ST_TO_ADDR
43973: GO 44055
// for j = 1 to result do
43975: LD_ADDR_VAR 0 8
43979: PUSH
43980: DOUBLE
43981: LD_INT 1
43983: DEC
43984: ST_TO_ADDR
43985: LD_VAR 0 6
43989: PUSH
43990: FOR_TO
43991: IFFALSE 44053
// begin if tmp < result [ j ] [ 2 ] then
43993: LD_VAR 0 9
43997: PUSH
43998: LD_VAR 0 6
44002: PUSH
44003: LD_VAR 0 8
44007: ARRAY
44008: PUSH
44009: LD_INT 2
44011: ARRAY
44012: LESS
44013: IFFALSE 44051
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44015: LD_ADDR_VAR 0 6
44019: PUSH
44020: LD_VAR 0 6
44024: PPUSH
44025: LD_VAR 0 8
44029: PPUSH
44030: LD_VAR 0 7
44034: PUSH
44035: LD_VAR 0 9
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PPUSH
44044: CALL_OW 2
44048: ST_TO_ADDR
// break ;
44049: GO 44053
// end ; end ;
44051: GO 43990
44053: POP
44054: POP
// end ; end ;
44055: GO 43854
44057: POP
44058: POP
// if result and not asc then
44059: LD_VAR 0 6
44063: PUSH
44064: LD_VAR 0 4
44068: NOT
44069: AND
44070: IFFALSE 44145
// begin tmp := result ;
44072: LD_ADDR_VAR 0 9
44076: PUSH
44077: LD_VAR 0 6
44081: ST_TO_ADDR
// for i = tmp downto 1 do
44082: LD_ADDR_VAR 0 7
44086: PUSH
44087: DOUBLE
44088: LD_VAR 0 9
44092: INC
44093: ST_TO_ADDR
44094: LD_INT 1
44096: PUSH
44097: FOR_DOWNTO
44098: IFFALSE 44143
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44100: LD_ADDR_VAR 0 6
44104: PUSH
44105: LD_VAR 0 6
44109: PPUSH
44110: LD_VAR 0 9
44114: PUSH
44115: LD_VAR 0 7
44119: MINUS
44120: PUSH
44121: LD_INT 1
44123: PLUS
44124: PPUSH
44125: LD_VAR 0 9
44129: PUSH
44130: LD_VAR 0 7
44134: ARRAY
44135: PPUSH
44136: CALL_OW 1
44140: ST_TO_ADDR
44141: GO 44097
44143: POP
44144: POP
// end ; tmp := [ ] ;
44145: LD_ADDR_VAR 0 9
44149: PUSH
44150: EMPTY
44151: ST_TO_ADDR
// if mode then
44152: LD_VAR 0 5
44156: IFFALSE 44225
// begin for i = 1 to result do
44158: LD_ADDR_VAR 0 7
44162: PUSH
44163: DOUBLE
44164: LD_INT 1
44166: DEC
44167: ST_TO_ADDR
44168: LD_VAR 0 6
44172: PUSH
44173: FOR_TO
44174: IFFALSE 44213
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44176: LD_ADDR_VAR 0 9
44180: PUSH
44181: LD_VAR 0 9
44185: PPUSH
44186: LD_VAR 0 7
44190: PPUSH
44191: LD_VAR 0 6
44195: PUSH
44196: LD_VAR 0 7
44200: ARRAY
44201: PUSH
44202: LD_INT 1
44204: ARRAY
44205: PPUSH
44206: CALL_OW 1
44210: ST_TO_ADDR
44211: GO 44173
44213: POP
44214: POP
// result := tmp ;
44215: LD_ADDR_VAR 0 6
44219: PUSH
44220: LD_VAR 0 9
44224: ST_TO_ADDR
// end ; end ;
44225: LD_VAR 0 6
44229: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44230: LD_INT 0
44232: PPUSH
44233: PPUSH
44234: PPUSH
44235: PPUSH
44236: PPUSH
44237: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44238: LD_ADDR_VAR 0 5
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: LD_INT 0
44251: PUSH
44252: EMPTY
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: ST_TO_ADDR
// if not x or not y then
44260: LD_VAR 0 2
44264: NOT
44265: PUSH
44266: LD_VAR 0 3
44270: NOT
44271: OR
44272: IFFALSE 44276
// exit ;
44274: GO 45928
// if not range then
44276: LD_VAR 0 4
44280: NOT
44281: IFFALSE 44291
// range := 10 ;
44283: LD_ADDR_VAR 0 4
44287: PUSH
44288: LD_INT 10
44290: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
44291: LD_ADDR_VAR 0 8
44295: PUSH
44296: LD_INT 81
44298: PUSH
44299: LD_VAR 0 1
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 92
44310: PUSH
44311: LD_VAR 0 2
44315: PUSH
44316: LD_VAR 0 3
44320: PUSH
44321: LD_VAR 0 4
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: PUSH
44332: LD_INT 3
44334: PUSH
44335: LD_INT 21
44337: PUSH
44338: LD_INT 3
44340: PUSH
44341: EMPTY
44342: LIST
44343: LIST
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: PPUSH
44354: CALL_OW 69
44358: ST_TO_ADDR
// if not tmp then
44359: LD_VAR 0 8
44363: NOT
44364: IFFALSE 44368
// exit ;
44366: GO 45928
// for i in tmp do
44368: LD_ADDR_VAR 0 6
44372: PUSH
44373: LD_VAR 0 8
44377: PUSH
44378: FOR_IN
44379: IFFALSE 45903
// begin points := [ 0 , 0 , 0 ] ;
44381: LD_ADDR_VAR 0 9
44385: PUSH
44386: LD_INT 0
44388: PUSH
44389: LD_INT 0
44391: PUSH
44392: LD_INT 0
44394: PUSH
44395: EMPTY
44396: LIST
44397: LIST
44398: LIST
44399: ST_TO_ADDR
// bpoints := 1 ;
44400: LD_ADDR_VAR 0 10
44404: PUSH
44405: LD_INT 1
44407: ST_TO_ADDR
// case GetType ( i ) of unit_human :
44408: LD_VAR 0 6
44412: PPUSH
44413: CALL_OW 247
44417: PUSH
44418: LD_INT 1
44420: DOUBLE
44421: EQUAL
44422: IFTRUE 44426
44424: GO 45004
44426: POP
// begin if GetClass ( i ) = 1 then
44427: LD_VAR 0 6
44431: PPUSH
44432: CALL_OW 257
44436: PUSH
44437: LD_INT 1
44439: EQUAL
44440: IFFALSE 44461
// points := [ 10 , 5 , 3 ] ;
44442: LD_ADDR_VAR 0 9
44446: PUSH
44447: LD_INT 10
44449: PUSH
44450: LD_INT 5
44452: PUSH
44453: LD_INT 3
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: LIST
44460: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
44461: LD_VAR 0 6
44465: PPUSH
44466: CALL_OW 257
44470: PUSH
44471: LD_INT 2
44473: PUSH
44474: LD_INT 3
44476: PUSH
44477: LD_INT 4
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: LIST
44484: IN
44485: IFFALSE 44506
// points := [ 3 , 2 , 1 ] ;
44487: LD_ADDR_VAR 0 9
44491: PUSH
44492: LD_INT 3
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: LD_INT 1
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: LIST
44505: ST_TO_ADDR
// if GetClass ( i ) = 5 then
44506: LD_VAR 0 6
44510: PPUSH
44511: CALL_OW 257
44515: PUSH
44516: LD_INT 5
44518: EQUAL
44519: IFFALSE 44540
// points := [ 130 , 5 , 2 ] ;
44521: LD_ADDR_VAR 0 9
44525: PUSH
44526: LD_INT 130
44528: PUSH
44529: LD_INT 5
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: LIST
44539: ST_TO_ADDR
// if GetClass ( i ) = 8 then
44540: LD_VAR 0 6
44544: PPUSH
44545: CALL_OW 257
44549: PUSH
44550: LD_INT 8
44552: EQUAL
44553: IFFALSE 44574
// points := [ 35 , 35 , 30 ] ;
44555: LD_ADDR_VAR 0 9
44559: PUSH
44560: LD_INT 35
44562: PUSH
44563: LD_INT 35
44565: PUSH
44566: LD_INT 30
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: LIST
44573: ST_TO_ADDR
// if GetClass ( i ) = 9 then
44574: LD_VAR 0 6
44578: PPUSH
44579: CALL_OW 257
44583: PUSH
44584: LD_INT 9
44586: EQUAL
44587: IFFALSE 44608
// points := [ 20 , 55 , 40 ] ;
44589: LD_ADDR_VAR 0 9
44593: PUSH
44594: LD_INT 20
44596: PUSH
44597: LD_INT 55
44599: PUSH
44600: LD_INT 40
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: LIST
44607: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
44608: LD_VAR 0 6
44612: PPUSH
44613: CALL_OW 257
44617: PUSH
44618: LD_INT 12
44620: PUSH
44621: LD_INT 16
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: IN
44628: IFFALSE 44649
// points := [ 5 , 3 , 2 ] ;
44630: LD_ADDR_VAR 0 9
44634: PUSH
44635: LD_INT 5
44637: PUSH
44638: LD_INT 3
44640: PUSH
44641: LD_INT 2
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: LIST
44648: ST_TO_ADDR
// if GetClass ( i ) = 17 then
44649: LD_VAR 0 6
44653: PPUSH
44654: CALL_OW 257
44658: PUSH
44659: LD_INT 17
44661: EQUAL
44662: IFFALSE 44683
// points := [ 100 , 50 , 75 ] ;
44664: LD_ADDR_VAR 0 9
44668: PUSH
44669: LD_INT 100
44671: PUSH
44672: LD_INT 50
44674: PUSH
44675: LD_INT 75
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: LIST
44682: ST_TO_ADDR
// if GetClass ( i ) = 15 then
44683: LD_VAR 0 6
44687: PPUSH
44688: CALL_OW 257
44692: PUSH
44693: LD_INT 15
44695: EQUAL
44696: IFFALSE 44717
// points := [ 10 , 5 , 3 ] ;
44698: LD_ADDR_VAR 0 9
44702: PUSH
44703: LD_INT 10
44705: PUSH
44706: LD_INT 5
44708: PUSH
44709: LD_INT 3
44711: PUSH
44712: EMPTY
44713: LIST
44714: LIST
44715: LIST
44716: ST_TO_ADDR
// if GetClass ( i ) = 14 then
44717: LD_VAR 0 6
44721: PPUSH
44722: CALL_OW 257
44726: PUSH
44727: LD_INT 14
44729: EQUAL
44730: IFFALSE 44751
// points := [ 10 , 0 , 0 ] ;
44732: LD_ADDR_VAR 0 9
44736: PUSH
44737: LD_INT 10
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: ST_TO_ADDR
// if GetClass ( i ) = 11 then
44751: LD_VAR 0 6
44755: PPUSH
44756: CALL_OW 257
44760: PUSH
44761: LD_INT 11
44763: EQUAL
44764: IFFALSE 44785
// points := [ 30 , 10 , 5 ] ;
44766: LD_ADDR_VAR 0 9
44770: PUSH
44771: LD_INT 30
44773: PUSH
44774: LD_INT 10
44776: PUSH
44777: LD_INT 5
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: LIST
44784: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
44785: LD_VAR 0 1
44789: PPUSH
44790: LD_INT 5
44792: PPUSH
44793: CALL_OW 321
44797: PUSH
44798: LD_INT 2
44800: EQUAL
44801: IFFALSE 44818
// bpoints := bpoints * 1.8 ;
44803: LD_ADDR_VAR 0 10
44807: PUSH
44808: LD_VAR 0 10
44812: PUSH
44813: LD_REAL  1.80000000000000E+0000
44816: MUL
44817: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
44818: LD_VAR 0 6
44822: PPUSH
44823: CALL_OW 257
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 2
44833: PUSH
44834: LD_INT 3
44836: PUSH
44837: LD_INT 4
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: IN
44846: PUSH
44847: LD_VAR 0 1
44851: PPUSH
44852: LD_INT 51
44854: PPUSH
44855: CALL_OW 321
44859: PUSH
44860: LD_INT 2
44862: EQUAL
44863: AND
44864: IFFALSE 44881
// bpoints := bpoints * 1.2 ;
44866: LD_ADDR_VAR 0 10
44870: PUSH
44871: LD_VAR 0 10
44875: PUSH
44876: LD_REAL  1.20000000000000E+0000
44879: MUL
44880: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
44881: LD_VAR 0 6
44885: PPUSH
44886: CALL_OW 257
44890: PUSH
44891: LD_INT 5
44893: PUSH
44894: LD_INT 7
44896: PUSH
44897: LD_INT 9
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: LIST
44904: IN
44905: PUSH
44906: LD_VAR 0 1
44910: PPUSH
44911: LD_INT 52
44913: PPUSH
44914: CALL_OW 321
44918: PUSH
44919: LD_INT 2
44921: EQUAL
44922: AND
44923: IFFALSE 44940
// bpoints := bpoints * 1.5 ;
44925: LD_ADDR_VAR 0 10
44929: PUSH
44930: LD_VAR 0 10
44934: PUSH
44935: LD_REAL  1.50000000000000E+0000
44938: MUL
44939: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
44940: LD_VAR 0 1
44944: PPUSH
44945: LD_INT 66
44947: PPUSH
44948: CALL_OW 321
44952: PUSH
44953: LD_INT 2
44955: EQUAL
44956: IFFALSE 44973
// bpoints := bpoints * 1.1 ;
44958: LD_ADDR_VAR 0 10
44962: PUSH
44963: LD_VAR 0 10
44967: PUSH
44968: LD_REAL  1.10000000000000E+0000
44971: MUL
44972: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
44973: LD_ADDR_VAR 0 10
44977: PUSH
44978: LD_VAR 0 10
44982: PUSH
44983: LD_VAR 0 6
44987: PPUSH
44988: LD_INT 1
44990: PPUSH
44991: CALL_OW 259
44995: PUSH
44996: LD_REAL  1.15000000000000E+0000
44999: MUL
45000: MUL
45001: ST_TO_ADDR
// end ; unit_vehicle :
45002: GO 45832
45004: LD_INT 2
45006: DOUBLE
45007: EQUAL
45008: IFTRUE 45012
45010: GO 45820
45012: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45013: LD_VAR 0 6
45017: PPUSH
45018: CALL_OW 264
45022: PUSH
45023: LD_INT 2
45025: PUSH
45026: LD_INT 42
45028: PUSH
45029: LD_INT 24
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: LIST
45036: IN
45037: IFFALSE 45058
// points := [ 25 , 5 , 3 ] ;
45039: LD_ADDR_VAR 0 9
45043: PUSH
45044: LD_INT 25
45046: PUSH
45047: LD_INT 5
45049: PUSH
45050: LD_INT 3
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: LIST
45057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45058: LD_VAR 0 6
45062: PPUSH
45063: CALL_OW 264
45067: PUSH
45068: LD_INT 4
45070: PUSH
45071: LD_INT 43
45073: PUSH
45074: LD_INT 25
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: LIST
45081: IN
45082: IFFALSE 45103
// points := [ 40 , 15 , 5 ] ;
45084: LD_ADDR_VAR 0 9
45088: PUSH
45089: LD_INT 40
45091: PUSH
45092: LD_INT 15
45094: PUSH
45095: LD_INT 5
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45103: LD_VAR 0 6
45107: PPUSH
45108: CALL_OW 264
45112: PUSH
45113: LD_INT 3
45115: PUSH
45116: LD_INT 23
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: IN
45123: IFFALSE 45144
// points := [ 7 , 25 , 8 ] ;
45125: LD_ADDR_VAR 0 9
45129: PUSH
45130: LD_INT 7
45132: PUSH
45133: LD_INT 25
45135: PUSH
45136: LD_INT 8
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45144: LD_VAR 0 6
45148: PPUSH
45149: CALL_OW 264
45153: PUSH
45154: LD_INT 5
45156: PUSH
45157: LD_INT 27
45159: PUSH
45160: LD_INT 44
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: LIST
45167: IN
45168: IFFALSE 45189
// points := [ 14 , 50 , 16 ] ;
45170: LD_ADDR_VAR 0 9
45174: PUSH
45175: LD_INT 14
45177: PUSH
45178: LD_INT 50
45180: PUSH
45181: LD_INT 16
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: LIST
45188: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45189: LD_VAR 0 6
45193: PPUSH
45194: CALL_OW 264
45198: PUSH
45199: LD_INT 6
45201: PUSH
45202: LD_INT 46
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: IN
45209: IFFALSE 45230
// points := [ 32 , 120 , 70 ] ;
45211: LD_ADDR_VAR 0 9
45215: PUSH
45216: LD_INT 32
45218: PUSH
45219: LD_INT 120
45221: PUSH
45222: LD_INT 70
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: LIST
45229: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45230: LD_VAR 0 6
45234: PPUSH
45235: CALL_OW 264
45239: PUSH
45240: LD_INT 7
45242: PUSH
45243: LD_INT 28
45245: PUSH
45246: LD_INT 45
45248: PUSH
45249: LD_EXP 50
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: IN
45260: IFFALSE 45281
// points := [ 35 , 20 , 45 ] ;
45262: LD_ADDR_VAR 0 9
45266: PUSH
45267: LD_INT 35
45269: PUSH
45270: LD_INT 20
45272: PUSH
45273: LD_INT 45
45275: PUSH
45276: EMPTY
45277: LIST
45278: LIST
45279: LIST
45280: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
45281: LD_VAR 0 6
45285: PPUSH
45286: CALL_OW 264
45290: PUSH
45291: LD_INT 47
45293: PUSH
45294: EMPTY
45295: LIST
45296: IN
45297: IFFALSE 45318
// points := [ 67 , 45 , 75 ] ;
45299: LD_ADDR_VAR 0 9
45303: PUSH
45304: LD_INT 67
45306: PUSH
45307: LD_INT 45
45309: PUSH
45310: LD_INT 75
45312: PUSH
45313: EMPTY
45314: LIST
45315: LIST
45316: LIST
45317: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
45318: LD_VAR 0 6
45322: PPUSH
45323: CALL_OW 264
45327: PUSH
45328: LD_INT 26
45330: PUSH
45331: EMPTY
45332: LIST
45333: IN
45334: IFFALSE 45355
// points := [ 120 , 30 , 80 ] ;
45336: LD_ADDR_VAR 0 9
45340: PUSH
45341: LD_INT 120
45343: PUSH
45344: LD_INT 30
45346: PUSH
45347: LD_INT 80
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: LIST
45354: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
45355: LD_VAR 0 6
45359: PPUSH
45360: CALL_OW 264
45364: PUSH
45365: LD_INT 22
45367: PUSH
45368: EMPTY
45369: LIST
45370: IN
45371: IFFALSE 45392
// points := [ 40 , 1 , 1 ] ;
45373: LD_ADDR_VAR 0 9
45377: PUSH
45378: LD_INT 40
45380: PUSH
45381: LD_INT 1
45383: PUSH
45384: LD_INT 1
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: LIST
45391: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
45392: LD_VAR 0 6
45396: PPUSH
45397: CALL_OW 264
45401: PUSH
45402: LD_INT 29
45404: PUSH
45405: EMPTY
45406: LIST
45407: IN
45408: IFFALSE 45429
// points := [ 70 , 200 , 400 ] ;
45410: LD_ADDR_VAR 0 9
45414: PUSH
45415: LD_INT 70
45417: PUSH
45418: LD_INT 200
45420: PUSH
45421: LD_INT 400
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: LIST
45428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
45429: LD_VAR 0 6
45433: PPUSH
45434: CALL_OW 264
45438: PUSH
45439: LD_INT 14
45441: PUSH
45442: LD_INT 53
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: IN
45449: IFFALSE 45470
// points := [ 40 , 10 , 20 ] ;
45451: LD_ADDR_VAR 0 9
45455: PUSH
45456: LD_INT 40
45458: PUSH
45459: LD_INT 10
45461: PUSH
45462: LD_INT 20
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
45470: LD_VAR 0 6
45474: PPUSH
45475: CALL_OW 264
45479: PUSH
45480: LD_INT 9
45482: PUSH
45483: EMPTY
45484: LIST
45485: IN
45486: IFFALSE 45507
// points := [ 5 , 70 , 20 ] ;
45488: LD_ADDR_VAR 0 9
45492: PUSH
45493: LD_INT 5
45495: PUSH
45496: LD_INT 70
45498: PUSH
45499: LD_INT 20
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: LIST
45506: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
45507: LD_VAR 0 6
45511: PPUSH
45512: CALL_OW 264
45516: PUSH
45517: LD_INT 10
45519: PUSH
45520: EMPTY
45521: LIST
45522: IN
45523: IFFALSE 45544
// points := [ 35 , 110 , 70 ] ;
45525: LD_ADDR_VAR 0 9
45529: PUSH
45530: LD_INT 35
45532: PUSH
45533: LD_INT 110
45535: PUSH
45536: LD_INT 70
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: LIST
45543: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
45544: LD_VAR 0 6
45548: PPUSH
45549: CALL_OW 265
45553: PUSH
45554: LD_INT 25
45556: EQUAL
45557: IFFALSE 45578
// points := [ 80 , 65 , 100 ] ;
45559: LD_ADDR_VAR 0 9
45563: PUSH
45564: LD_INT 80
45566: PUSH
45567: LD_INT 65
45569: PUSH
45570: LD_INT 100
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: LIST
45577: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
45578: LD_VAR 0 6
45582: PPUSH
45583: CALL_OW 263
45587: PUSH
45588: LD_INT 1
45590: EQUAL
45591: IFFALSE 45626
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
45593: LD_ADDR_VAR 0 10
45597: PUSH
45598: LD_VAR 0 10
45602: PUSH
45603: LD_VAR 0 6
45607: PPUSH
45608: CALL_OW 311
45612: PPUSH
45613: LD_INT 3
45615: PPUSH
45616: CALL_OW 259
45620: PUSH
45621: LD_INT 4
45623: MUL
45624: MUL
45625: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
45626: LD_VAR 0 6
45630: PPUSH
45631: CALL_OW 263
45635: PUSH
45636: LD_INT 2
45638: EQUAL
45639: IFFALSE 45690
// begin j := IsControledBy ( i ) ;
45641: LD_ADDR_VAR 0 7
45645: PUSH
45646: LD_VAR 0 6
45650: PPUSH
45651: CALL_OW 312
45655: ST_TO_ADDR
// if j then
45656: LD_VAR 0 7
45660: IFFALSE 45690
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
45662: LD_ADDR_VAR 0 10
45666: PUSH
45667: LD_VAR 0 10
45671: PUSH
45672: LD_VAR 0 7
45676: PPUSH
45677: LD_INT 3
45679: PPUSH
45680: CALL_OW 259
45684: PUSH
45685: LD_INT 3
45687: MUL
45688: MUL
45689: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
45690: LD_VAR 0 6
45694: PPUSH
45695: CALL_OW 264
45699: PUSH
45700: LD_INT 5
45702: PUSH
45703: LD_INT 6
45705: PUSH
45706: LD_INT 46
45708: PUSH
45709: LD_INT 44
45711: PUSH
45712: LD_INT 47
45714: PUSH
45715: LD_INT 45
45717: PUSH
45718: LD_INT 28
45720: PUSH
45721: LD_INT 7
45723: PUSH
45724: LD_INT 27
45726: PUSH
45727: LD_INT 29
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: IN
45742: PUSH
45743: LD_VAR 0 1
45747: PPUSH
45748: LD_INT 52
45750: PPUSH
45751: CALL_OW 321
45755: PUSH
45756: LD_INT 2
45758: EQUAL
45759: AND
45760: IFFALSE 45777
// bpoints := bpoints * 1.2 ;
45762: LD_ADDR_VAR 0 10
45766: PUSH
45767: LD_VAR 0 10
45771: PUSH
45772: LD_REAL  1.20000000000000E+0000
45775: MUL
45776: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
45777: LD_VAR 0 6
45781: PPUSH
45782: CALL_OW 264
45786: PUSH
45787: LD_INT 6
45789: PUSH
45790: LD_INT 46
45792: PUSH
45793: LD_INT 47
45795: PUSH
45796: EMPTY
45797: LIST
45798: LIST
45799: LIST
45800: IN
45801: IFFALSE 45818
// bpoints := bpoints * 1.2 ;
45803: LD_ADDR_VAR 0 10
45807: PUSH
45808: LD_VAR 0 10
45812: PUSH
45813: LD_REAL  1.20000000000000E+0000
45816: MUL
45817: ST_TO_ADDR
// end ; unit_building :
45818: GO 45832
45820: LD_INT 3
45822: DOUBLE
45823: EQUAL
45824: IFTRUE 45828
45826: GO 45831
45828: POP
// ; end ;
45829: GO 45832
45831: POP
// for j = 1 to 3 do
45832: LD_ADDR_VAR 0 7
45836: PUSH
45837: DOUBLE
45838: LD_INT 1
45840: DEC
45841: ST_TO_ADDR
45842: LD_INT 3
45844: PUSH
45845: FOR_TO
45846: IFFALSE 45899
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
45848: LD_ADDR_VAR 0 5
45852: PUSH
45853: LD_VAR 0 5
45857: PPUSH
45858: LD_VAR 0 7
45862: PPUSH
45863: LD_VAR 0 5
45867: PUSH
45868: LD_VAR 0 7
45872: ARRAY
45873: PUSH
45874: LD_VAR 0 9
45878: PUSH
45879: LD_VAR 0 7
45883: ARRAY
45884: PUSH
45885: LD_VAR 0 10
45889: MUL
45890: PLUS
45891: PPUSH
45892: CALL_OW 1
45896: ST_TO_ADDR
45897: GO 45845
45899: POP
45900: POP
// end ;
45901: GO 44378
45903: POP
45904: POP
// result := Replace ( result , 4 , tmp ) ;
45905: LD_ADDR_VAR 0 5
45909: PUSH
45910: LD_VAR 0 5
45914: PPUSH
45915: LD_INT 4
45917: PPUSH
45918: LD_VAR 0 8
45922: PPUSH
45923: CALL_OW 1
45927: ST_TO_ADDR
// end ;
45928: LD_VAR 0 5
45932: RET
// export function DangerAtRange ( unit , range ) ; begin
45933: LD_INT 0
45935: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
45936: LD_ADDR_VAR 0 3
45940: PUSH
45941: LD_VAR 0 1
45945: PPUSH
45946: CALL_OW 255
45950: PPUSH
45951: LD_VAR 0 1
45955: PPUSH
45956: CALL_OW 250
45960: PPUSH
45961: LD_VAR 0 1
45965: PPUSH
45966: CALL_OW 251
45970: PPUSH
45971: LD_VAR 0 2
45975: PPUSH
45976: CALL 44230 0 4
45980: ST_TO_ADDR
// end ;
45981: LD_VAR 0 3
45985: RET
// export function DangerInArea ( side , area ) ; begin
45986: LD_INT 0
45988: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
45989: LD_ADDR_VAR 0 3
45993: PUSH
45994: LD_VAR 0 2
45998: PPUSH
45999: LD_INT 81
46001: PUSH
46002: LD_VAR 0 1
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PPUSH
46011: CALL_OW 70
46015: ST_TO_ADDR
// end ;
46016: LD_VAR 0 3
46020: RET
// export function IsExtension ( b ) ; begin
46021: LD_INT 0
46023: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46024: LD_ADDR_VAR 0 2
46028: PUSH
46029: LD_VAR 0 1
46033: PUSH
46034: LD_INT 23
46036: PUSH
46037: LD_INT 20
46039: PUSH
46040: LD_INT 22
46042: PUSH
46043: LD_INT 17
46045: PUSH
46046: LD_INT 24
46048: PUSH
46049: LD_INT 21
46051: PUSH
46052: LD_INT 19
46054: PUSH
46055: LD_INT 16
46057: PUSH
46058: LD_INT 25
46060: PUSH
46061: LD_INT 18
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: LIST
46075: IN
46076: ST_TO_ADDR
// end ;
46077: LD_VAR 0 2
46081: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46082: LD_INT 0
46084: PPUSH
46085: PPUSH
46086: PPUSH
// result := [ ] ;
46087: LD_ADDR_VAR 0 4
46091: PUSH
46092: EMPTY
46093: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46094: LD_ADDR_VAR 0 5
46098: PUSH
46099: LD_VAR 0 2
46103: PPUSH
46104: LD_INT 21
46106: PUSH
46107: LD_INT 3
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PPUSH
46114: CALL_OW 70
46118: ST_TO_ADDR
// if not tmp then
46119: LD_VAR 0 5
46123: NOT
46124: IFFALSE 46128
// exit ;
46126: GO 46192
// if checkLink then
46128: LD_VAR 0 3
46132: IFFALSE 46182
// begin for i in tmp do
46134: LD_ADDR_VAR 0 6
46138: PUSH
46139: LD_VAR 0 5
46143: PUSH
46144: FOR_IN
46145: IFFALSE 46180
// if GetBase ( i ) <> base then
46147: LD_VAR 0 6
46151: PPUSH
46152: CALL_OW 274
46156: PUSH
46157: LD_VAR 0 1
46161: NONEQUAL
46162: IFFALSE 46178
// ComLinkToBase ( base , i ) ;
46164: LD_VAR 0 1
46168: PPUSH
46169: LD_VAR 0 6
46173: PPUSH
46174: CALL_OW 169
46178: GO 46144
46180: POP
46181: POP
// end ; result := tmp ;
46182: LD_ADDR_VAR 0 4
46186: PUSH
46187: LD_VAR 0 5
46191: ST_TO_ADDR
// end ;
46192: LD_VAR 0 4
46196: RET
// export function ComComplete ( units , b ) ; var i ; begin
46197: LD_INT 0
46199: PPUSH
46200: PPUSH
// if not units then
46201: LD_VAR 0 1
46205: NOT
46206: IFFALSE 46210
// exit ;
46208: GO 46300
// for i in units do
46210: LD_ADDR_VAR 0 4
46214: PUSH
46215: LD_VAR 0 1
46219: PUSH
46220: FOR_IN
46221: IFFALSE 46298
// if BuildingStatus ( b ) = bs_build then
46223: LD_VAR 0 2
46227: PPUSH
46228: CALL_OW 461
46232: PUSH
46233: LD_INT 1
46235: EQUAL
46236: IFFALSE 46296
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
46238: LD_VAR 0 4
46242: PPUSH
46243: LD_STRING h
46245: PUSH
46246: LD_VAR 0 2
46250: PPUSH
46251: CALL_OW 250
46255: PUSH
46256: LD_VAR 0 2
46260: PPUSH
46261: CALL_OW 251
46265: PUSH
46266: LD_VAR 0 2
46270: PUSH
46271: LD_INT 0
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: PUSH
46289: EMPTY
46290: LIST
46291: PPUSH
46292: CALL_OW 446
46296: GO 46220
46298: POP
46299: POP
// end ;
46300: LD_VAR 0 3
46304: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
46305: LD_INT 0
46307: PPUSH
46308: PPUSH
46309: PPUSH
46310: PPUSH
46311: PPUSH
46312: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
46313: LD_VAR 0 1
46317: NOT
46318: PUSH
46319: LD_VAR 0 1
46323: PPUSH
46324: CALL_OW 263
46328: PUSH
46329: LD_INT 2
46331: NONEQUAL
46332: OR
46333: IFFALSE 46337
// exit ;
46335: GO 46653
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
46337: LD_ADDR_VAR 0 6
46341: PUSH
46342: LD_INT 22
46344: PUSH
46345: LD_VAR 0 1
46349: PPUSH
46350: CALL_OW 255
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: PUSH
46362: LD_INT 30
46364: PUSH
46365: LD_INT 36
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: PUSH
46372: LD_INT 34
46374: PUSH
46375: LD_INT 31
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: LIST
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PPUSH
46391: CALL_OW 69
46395: ST_TO_ADDR
// if not tmp then
46396: LD_VAR 0 6
46400: NOT
46401: IFFALSE 46405
// exit ;
46403: GO 46653
// result := [ ] ;
46405: LD_ADDR_VAR 0 2
46409: PUSH
46410: EMPTY
46411: ST_TO_ADDR
// for i in tmp do
46412: LD_ADDR_VAR 0 3
46416: PUSH
46417: LD_VAR 0 6
46421: PUSH
46422: FOR_IN
46423: IFFALSE 46494
// begin t := UnitsInside ( i ) ;
46425: LD_ADDR_VAR 0 4
46429: PUSH
46430: LD_VAR 0 3
46434: PPUSH
46435: CALL_OW 313
46439: ST_TO_ADDR
// if t then
46440: LD_VAR 0 4
46444: IFFALSE 46492
// for j in t do
46446: LD_ADDR_VAR 0 7
46450: PUSH
46451: LD_VAR 0 4
46455: PUSH
46456: FOR_IN
46457: IFFALSE 46490
// result := Replace ( result , result + 1 , j ) ;
46459: LD_ADDR_VAR 0 2
46463: PUSH
46464: LD_VAR 0 2
46468: PPUSH
46469: LD_VAR 0 2
46473: PUSH
46474: LD_INT 1
46476: PLUS
46477: PPUSH
46478: LD_VAR 0 7
46482: PPUSH
46483: CALL_OW 1
46487: ST_TO_ADDR
46488: GO 46456
46490: POP
46491: POP
// end ;
46492: GO 46422
46494: POP
46495: POP
// if not result then
46496: LD_VAR 0 2
46500: NOT
46501: IFFALSE 46505
// exit ;
46503: GO 46653
// mech := result [ 1 ] ;
46505: LD_ADDR_VAR 0 5
46509: PUSH
46510: LD_VAR 0 2
46514: PUSH
46515: LD_INT 1
46517: ARRAY
46518: ST_TO_ADDR
// if result > 1 then
46519: LD_VAR 0 2
46523: PUSH
46524: LD_INT 1
46526: GREATER
46527: IFFALSE 46639
// begin for i = 2 to result do
46529: LD_ADDR_VAR 0 3
46533: PUSH
46534: DOUBLE
46535: LD_INT 2
46537: DEC
46538: ST_TO_ADDR
46539: LD_VAR 0 2
46543: PUSH
46544: FOR_TO
46545: IFFALSE 46637
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
46547: LD_ADDR_VAR 0 4
46551: PUSH
46552: LD_VAR 0 2
46556: PUSH
46557: LD_VAR 0 3
46561: ARRAY
46562: PPUSH
46563: LD_INT 3
46565: PPUSH
46566: CALL_OW 259
46570: PUSH
46571: LD_VAR 0 2
46575: PUSH
46576: LD_VAR 0 3
46580: ARRAY
46581: PPUSH
46582: CALL_OW 432
46586: MINUS
46587: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
46588: LD_VAR 0 4
46592: PUSH
46593: LD_VAR 0 5
46597: PPUSH
46598: LD_INT 3
46600: PPUSH
46601: CALL_OW 259
46605: PUSH
46606: LD_VAR 0 5
46610: PPUSH
46611: CALL_OW 432
46615: MINUS
46616: GREATEREQUAL
46617: IFFALSE 46635
// mech := result [ i ] ;
46619: LD_ADDR_VAR 0 5
46623: PUSH
46624: LD_VAR 0 2
46628: PUSH
46629: LD_VAR 0 3
46633: ARRAY
46634: ST_TO_ADDR
// end ;
46635: GO 46544
46637: POP
46638: POP
// end ; ComLinkTo ( vehicle , mech ) ;
46639: LD_VAR 0 1
46643: PPUSH
46644: LD_VAR 0 5
46648: PPUSH
46649: CALL_OW 135
// end ;
46653: LD_VAR 0 2
46657: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
46658: LD_INT 0
46660: PPUSH
46661: PPUSH
46662: PPUSH
46663: PPUSH
46664: PPUSH
46665: PPUSH
46666: PPUSH
46667: PPUSH
46668: PPUSH
46669: PPUSH
46670: PPUSH
46671: PPUSH
46672: PPUSH
// result := [ ] ;
46673: LD_ADDR_VAR 0 7
46677: PUSH
46678: EMPTY
46679: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
46680: LD_VAR 0 1
46684: PPUSH
46685: CALL_OW 266
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: IN
46700: NOT
46701: IFFALSE 46705
// exit ;
46703: GO 48339
// if name then
46705: LD_VAR 0 3
46709: IFFALSE 46725
// SetBName ( base_dep , name ) ;
46711: LD_VAR 0 1
46715: PPUSH
46716: LD_VAR 0 3
46720: PPUSH
46721: CALL_OW 500
// base := GetBase ( base_dep ) ;
46725: LD_ADDR_VAR 0 15
46729: PUSH
46730: LD_VAR 0 1
46734: PPUSH
46735: CALL_OW 274
46739: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
46740: LD_ADDR_VAR 0 16
46744: PUSH
46745: LD_VAR 0 1
46749: PPUSH
46750: CALL_OW 255
46754: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
46755: LD_ADDR_VAR 0 17
46759: PUSH
46760: LD_VAR 0 1
46764: PPUSH
46765: CALL_OW 248
46769: ST_TO_ADDR
// if sources then
46770: LD_VAR 0 5
46774: IFFALSE 46821
// for i = 1 to 3 do
46776: LD_ADDR_VAR 0 8
46780: PUSH
46781: DOUBLE
46782: LD_INT 1
46784: DEC
46785: ST_TO_ADDR
46786: LD_INT 3
46788: PUSH
46789: FOR_TO
46790: IFFALSE 46819
// AddResourceType ( base , i , sources [ i ] ) ;
46792: LD_VAR 0 15
46796: PPUSH
46797: LD_VAR 0 8
46801: PPUSH
46802: LD_VAR 0 5
46806: PUSH
46807: LD_VAR 0 8
46811: ARRAY
46812: PPUSH
46813: CALL_OW 276
46817: GO 46789
46819: POP
46820: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
46821: LD_ADDR_VAR 0 18
46825: PUSH
46826: LD_VAR 0 15
46830: PPUSH
46831: LD_VAR 0 2
46835: PPUSH
46836: LD_INT 1
46838: PPUSH
46839: CALL 46082 0 3
46843: ST_TO_ADDR
// InitHc ;
46844: CALL_OW 19
// InitUc ;
46848: CALL_OW 18
// uc_side := side ;
46852: LD_ADDR_OWVAR 20
46856: PUSH
46857: LD_VAR 0 16
46861: ST_TO_ADDR
// uc_nation := nation ;
46862: LD_ADDR_OWVAR 21
46866: PUSH
46867: LD_VAR 0 17
46871: ST_TO_ADDR
// if buildings then
46872: LD_VAR 0 18
46876: IFFALSE 48198
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
46878: LD_ADDR_VAR 0 19
46882: PUSH
46883: LD_VAR 0 18
46887: PPUSH
46888: LD_INT 2
46890: PUSH
46891: LD_INT 30
46893: PUSH
46894: LD_INT 29
46896: PUSH
46897: EMPTY
46898: LIST
46899: LIST
46900: PUSH
46901: LD_INT 30
46903: PUSH
46904: LD_INT 30
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: LIST
46915: PPUSH
46916: CALL_OW 72
46920: ST_TO_ADDR
// if tmp then
46921: LD_VAR 0 19
46925: IFFALSE 46973
// for i in tmp do
46927: LD_ADDR_VAR 0 8
46931: PUSH
46932: LD_VAR 0 19
46936: PUSH
46937: FOR_IN
46938: IFFALSE 46971
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
46940: LD_VAR 0 8
46944: PPUSH
46945: CALL_OW 250
46949: PPUSH
46950: LD_VAR 0 8
46954: PPUSH
46955: CALL_OW 251
46959: PPUSH
46960: LD_VAR 0 16
46964: PPUSH
46965: CALL_OW 441
46969: GO 46937
46971: POP
46972: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
46973: LD_VAR 0 18
46977: PPUSH
46978: LD_INT 2
46980: PUSH
46981: LD_INT 30
46983: PUSH
46984: LD_INT 32
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 30
46993: PUSH
46994: LD_INT 33
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: LIST
47005: PPUSH
47006: CALL_OW 72
47010: IFFALSE 47098
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47012: LD_ADDR_VAR 0 8
47016: PUSH
47017: LD_VAR 0 18
47021: PPUSH
47022: LD_INT 2
47024: PUSH
47025: LD_INT 30
47027: PUSH
47028: LD_INT 32
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 30
47037: PUSH
47038: LD_INT 33
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: LIST
47049: PPUSH
47050: CALL_OW 72
47054: PUSH
47055: FOR_IN
47056: IFFALSE 47096
// begin if not GetBWeapon ( i ) then
47058: LD_VAR 0 8
47062: PPUSH
47063: CALL_OW 269
47067: NOT
47068: IFFALSE 47094
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47070: LD_VAR 0 8
47074: PPUSH
47075: LD_VAR 0 8
47079: PPUSH
47080: LD_VAR 0 2
47084: PPUSH
47085: CALL 48344 0 2
47089: PPUSH
47090: CALL_OW 431
// end ;
47094: GO 47055
47096: POP
47097: POP
// end ; for i = 1 to personel do
47098: LD_ADDR_VAR 0 8
47102: PUSH
47103: DOUBLE
47104: LD_INT 1
47106: DEC
47107: ST_TO_ADDR
47108: LD_VAR 0 6
47112: PUSH
47113: FOR_TO
47114: IFFALSE 48178
// begin if i > 4 then
47116: LD_VAR 0 8
47120: PUSH
47121: LD_INT 4
47123: GREATER
47124: IFFALSE 47128
// break ;
47126: GO 48178
// case i of 1 :
47128: LD_VAR 0 8
47132: PUSH
47133: LD_INT 1
47135: DOUBLE
47136: EQUAL
47137: IFTRUE 47141
47139: GO 47221
47141: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47142: LD_ADDR_VAR 0 12
47146: PUSH
47147: LD_VAR 0 18
47151: PPUSH
47152: LD_INT 22
47154: PUSH
47155: LD_VAR 0 16
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 58
47166: PUSH
47167: EMPTY
47168: LIST
47169: PUSH
47170: LD_INT 2
47172: PUSH
47173: LD_INT 30
47175: PUSH
47176: LD_INT 32
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 30
47185: PUSH
47186: LD_INT 4
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 30
47195: PUSH
47196: LD_INT 5
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: LIST
47213: PPUSH
47214: CALL_OW 72
47218: ST_TO_ADDR
47219: GO 47443
47221: LD_INT 2
47223: DOUBLE
47224: EQUAL
47225: IFTRUE 47229
47227: GO 47291
47229: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47230: LD_ADDR_VAR 0 12
47234: PUSH
47235: LD_VAR 0 18
47239: PPUSH
47240: LD_INT 22
47242: PUSH
47243: LD_VAR 0 16
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 30
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 30
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: LIST
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: PPUSH
47284: CALL_OW 72
47288: ST_TO_ADDR
47289: GO 47443
47291: LD_INT 3
47293: DOUBLE
47294: EQUAL
47295: IFTRUE 47299
47297: GO 47361
47299: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
47300: LD_ADDR_VAR 0 12
47304: PUSH
47305: LD_VAR 0 18
47309: PPUSH
47310: LD_INT 22
47312: PUSH
47313: LD_VAR 0 16
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 2
47324: PUSH
47325: LD_INT 30
47327: PUSH
47328: LD_INT 2
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 30
47337: PUSH
47338: LD_INT 3
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: LIST
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PPUSH
47354: CALL_OW 72
47358: ST_TO_ADDR
47359: GO 47443
47361: LD_INT 4
47363: DOUBLE
47364: EQUAL
47365: IFTRUE 47369
47367: GO 47442
47369: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
47370: LD_ADDR_VAR 0 12
47374: PUSH
47375: LD_VAR 0 18
47379: PPUSH
47380: LD_INT 22
47382: PUSH
47383: LD_VAR 0 16
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 2
47394: PUSH
47395: LD_INT 30
47397: PUSH
47398: LD_INT 6
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 30
47407: PUSH
47408: LD_INT 7
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 30
47417: PUSH
47418: LD_INT 8
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: EMPTY
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: PPUSH
47435: CALL_OW 72
47439: ST_TO_ADDR
47440: GO 47443
47442: POP
// if i = 1 then
47443: LD_VAR 0 8
47447: PUSH
47448: LD_INT 1
47450: EQUAL
47451: IFFALSE 47562
// begin tmp := [ ] ;
47453: LD_ADDR_VAR 0 19
47457: PUSH
47458: EMPTY
47459: ST_TO_ADDR
// for j in f do
47460: LD_ADDR_VAR 0 9
47464: PUSH
47465: LD_VAR 0 12
47469: PUSH
47470: FOR_IN
47471: IFFALSE 47544
// if GetBType ( j ) = b_bunker then
47473: LD_VAR 0 9
47477: PPUSH
47478: CALL_OW 266
47482: PUSH
47483: LD_INT 32
47485: EQUAL
47486: IFFALSE 47513
// tmp := Insert ( tmp , 1 , j ) else
47488: LD_ADDR_VAR 0 19
47492: PUSH
47493: LD_VAR 0 19
47497: PPUSH
47498: LD_INT 1
47500: PPUSH
47501: LD_VAR 0 9
47505: PPUSH
47506: CALL_OW 2
47510: ST_TO_ADDR
47511: GO 47542
// tmp := Insert ( tmp , tmp + 1 , j ) ;
47513: LD_ADDR_VAR 0 19
47517: PUSH
47518: LD_VAR 0 19
47522: PPUSH
47523: LD_VAR 0 19
47527: PUSH
47528: LD_INT 1
47530: PLUS
47531: PPUSH
47532: LD_VAR 0 9
47536: PPUSH
47537: CALL_OW 2
47541: ST_TO_ADDR
47542: GO 47470
47544: POP
47545: POP
// if tmp then
47546: LD_VAR 0 19
47550: IFFALSE 47562
// f := tmp ;
47552: LD_ADDR_VAR 0 12
47556: PUSH
47557: LD_VAR 0 19
47561: ST_TO_ADDR
// end ; x := personel [ i ] ;
47562: LD_ADDR_VAR 0 13
47566: PUSH
47567: LD_VAR 0 6
47571: PUSH
47572: LD_VAR 0 8
47576: ARRAY
47577: ST_TO_ADDR
// if x = - 1 then
47578: LD_VAR 0 13
47582: PUSH
47583: LD_INT 1
47585: NEG
47586: EQUAL
47587: IFFALSE 47796
// begin for j in f do
47589: LD_ADDR_VAR 0 9
47593: PUSH
47594: LD_VAR 0 12
47598: PUSH
47599: FOR_IN
47600: IFFALSE 47792
// repeat InitHc ;
47602: CALL_OW 19
// if GetBType ( j ) = b_barracks then
47606: LD_VAR 0 9
47610: PPUSH
47611: CALL_OW 266
47615: PUSH
47616: LD_INT 5
47618: EQUAL
47619: IFFALSE 47689
// begin if UnitsInside ( j ) < 3 then
47621: LD_VAR 0 9
47625: PPUSH
47626: CALL_OW 313
47630: PUSH
47631: LD_INT 3
47633: LESS
47634: IFFALSE 47670
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
47636: LD_INT 0
47638: PPUSH
47639: LD_INT 5
47641: PUSH
47642: LD_INT 8
47644: PUSH
47645: LD_INT 9
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: LIST
47652: PUSH
47653: LD_VAR 0 17
47657: ARRAY
47658: PPUSH
47659: LD_VAR 0 4
47663: PPUSH
47664: CALL_OW 380
47668: GO 47687
// PrepareHuman ( false , i , skill ) ;
47670: LD_INT 0
47672: PPUSH
47673: LD_VAR 0 8
47677: PPUSH
47678: LD_VAR 0 4
47682: PPUSH
47683: CALL_OW 380
// end else
47687: GO 47706
// PrepareHuman ( false , i , skill ) ;
47689: LD_INT 0
47691: PPUSH
47692: LD_VAR 0 8
47696: PPUSH
47697: LD_VAR 0 4
47701: PPUSH
47702: CALL_OW 380
// un := CreateHuman ;
47706: LD_ADDR_VAR 0 14
47710: PUSH
47711: CALL_OW 44
47715: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47716: LD_ADDR_VAR 0 7
47720: PUSH
47721: LD_VAR 0 7
47725: PPUSH
47726: LD_INT 1
47728: PPUSH
47729: LD_VAR 0 14
47733: PPUSH
47734: CALL_OW 2
47738: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
47739: LD_VAR 0 14
47743: PPUSH
47744: LD_VAR 0 9
47748: PPUSH
47749: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
47753: LD_VAR 0 9
47757: PPUSH
47758: CALL_OW 313
47762: PUSH
47763: LD_INT 6
47765: EQUAL
47766: PUSH
47767: LD_VAR 0 9
47771: PPUSH
47772: CALL_OW 266
47776: PUSH
47777: LD_INT 32
47779: PUSH
47780: LD_INT 31
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: IN
47787: OR
47788: IFFALSE 47602
47790: GO 47599
47792: POP
47793: POP
// end else
47794: GO 48176
// for j = 1 to x do
47796: LD_ADDR_VAR 0 9
47800: PUSH
47801: DOUBLE
47802: LD_INT 1
47804: DEC
47805: ST_TO_ADDR
47806: LD_VAR 0 13
47810: PUSH
47811: FOR_TO
47812: IFFALSE 48174
// begin InitHc ;
47814: CALL_OW 19
// if not f then
47818: LD_VAR 0 12
47822: NOT
47823: IFFALSE 47912
// begin PrepareHuman ( false , i , skill ) ;
47825: LD_INT 0
47827: PPUSH
47828: LD_VAR 0 8
47832: PPUSH
47833: LD_VAR 0 4
47837: PPUSH
47838: CALL_OW 380
// un := CreateHuman ;
47842: LD_ADDR_VAR 0 14
47846: PUSH
47847: CALL_OW 44
47851: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
47852: LD_ADDR_VAR 0 7
47856: PUSH
47857: LD_VAR 0 7
47861: PPUSH
47862: LD_INT 1
47864: PPUSH
47865: LD_VAR 0 14
47869: PPUSH
47870: CALL_OW 2
47874: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
47875: LD_VAR 0 14
47879: PPUSH
47880: LD_VAR 0 1
47884: PPUSH
47885: CALL_OW 250
47889: PPUSH
47890: LD_VAR 0 1
47894: PPUSH
47895: CALL_OW 251
47899: PPUSH
47900: LD_INT 10
47902: PPUSH
47903: LD_INT 0
47905: PPUSH
47906: CALL_OW 50
// continue ;
47910: GO 47811
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
47912: LD_VAR 0 12
47916: PUSH
47917: LD_INT 1
47919: ARRAY
47920: PPUSH
47921: CALL_OW 313
47925: PUSH
47926: LD_VAR 0 12
47930: PUSH
47931: LD_INT 1
47933: ARRAY
47934: PPUSH
47935: CALL_OW 266
47939: PUSH
47940: LD_INT 32
47942: PUSH
47943: LD_INT 31
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: IN
47950: AND
47951: PUSH
47952: LD_VAR 0 12
47956: PUSH
47957: LD_INT 1
47959: ARRAY
47960: PPUSH
47961: CALL_OW 313
47965: PUSH
47966: LD_INT 6
47968: EQUAL
47969: OR
47970: IFFALSE 47990
// f := Delete ( f , 1 ) ;
47972: LD_ADDR_VAR 0 12
47976: PUSH
47977: LD_VAR 0 12
47981: PPUSH
47982: LD_INT 1
47984: PPUSH
47985: CALL_OW 3
47989: ST_TO_ADDR
// if not f then
47990: LD_VAR 0 12
47994: NOT
47995: IFFALSE 48013
// begin x := x + 2 ;
47997: LD_ADDR_VAR 0 13
48001: PUSH
48002: LD_VAR 0 13
48006: PUSH
48007: LD_INT 2
48009: PLUS
48010: ST_TO_ADDR
// continue ;
48011: GO 47811
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48013: LD_VAR 0 12
48017: PUSH
48018: LD_INT 1
48020: ARRAY
48021: PPUSH
48022: CALL_OW 266
48026: PUSH
48027: LD_INT 5
48029: EQUAL
48030: IFFALSE 48104
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48032: LD_VAR 0 12
48036: PUSH
48037: LD_INT 1
48039: ARRAY
48040: PPUSH
48041: CALL_OW 313
48045: PUSH
48046: LD_INT 3
48048: LESS
48049: IFFALSE 48085
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48051: LD_INT 0
48053: PPUSH
48054: LD_INT 5
48056: PUSH
48057: LD_INT 8
48059: PUSH
48060: LD_INT 9
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: LIST
48067: PUSH
48068: LD_VAR 0 17
48072: ARRAY
48073: PPUSH
48074: LD_VAR 0 4
48078: PPUSH
48079: CALL_OW 380
48083: GO 48102
// PrepareHuman ( false , i , skill ) ;
48085: LD_INT 0
48087: PPUSH
48088: LD_VAR 0 8
48092: PPUSH
48093: LD_VAR 0 4
48097: PPUSH
48098: CALL_OW 380
// end else
48102: GO 48121
// PrepareHuman ( false , i , skill ) ;
48104: LD_INT 0
48106: PPUSH
48107: LD_VAR 0 8
48111: PPUSH
48112: LD_VAR 0 4
48116: PPUSH
48117: CALL_OW 380
// un := CreateHuman ;
48121: LD_ADDR_VAR 0 14
48125: PUSH
48126: CALL_OW 44
48130: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48131: LD_ADDR_VAR 0 7
48135: PUSH
48136: LD_VAR 0 7
48140: PPUSH
48141: LD_INT 1
48143: PPUSH
48144: LD_VAR 0 14
48148: PPUSH
48149: CALL_OW 2
48153: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48154: LD_VAR 0 14
48158: PPUSH
48159: LD_VAR 0 12
48163: PUSH
48164: LD_INT 1
48166: ARRAY
48167: PPUSH
48168: CALL_OW 52
// end ;
48172: GO 47811
48174: POP
48175: POP
// end ;
48176: GO 47113
48178: POP
48179: POP
// result := result ^ buildings ;
48180: LD_ADDR_VAR 0 7
48184: PUSH
48185: LD_VAR 0 7
48189: PUSH
48190: LD_VAR 0 18
48194: ADD
48195: ST_TO_ADDR
// end else
48196: GO 48339
// begin for i = 1 to personel do
48198: LD_ADDR_VAR 0 8
48202: PUSH
48203: DOUBLE
48204: LD_INT 1
48206: DEC
48207: ST_TO_ADDR
48208: LD_VAR 0 6
48212: PUSH
48213: FOR_TO
48214: IFFALSE 48337
// begin if i > 4 then
48216: LD_VAR 0 8
48220: PUSH
48221: LD_INT 4
48223: GREATER
48224: IFFALSE 48228
// break ;
48226: GO 48337
// x := personel [ i ] ;
48228: LD_ADDR_VAR 0 13
48232: PUSH
48233: LD_VAR 0 6
48237: PUSH
48238: LD_VAR 0 8
48242: ARRAY
48243: ST_TO_ADDR
// if x = - 1 then
48244: LD_VAR 0 13
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: EQUAL
48253: IFFALSE 48257
// continue ;
48255: GO 48213
// PrepareHuman ( false , i , skill ) ;
48257: LD_INT 0
48259: PPUSH
48260: LD_VAR 0 8
48264: PPUSH
48265: LD_VAR 0 4
48269: PPUSH
48270: CALL_OW 380
// un := CreateHuman ;
48274: LD_ADDR_VAR 0 14
48278: PUSH
48279: CALL_OW 44
48283: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48284: LD_VAR 0 14
48288: PPUSH
48289: LD_VAR 0 1
48293: PPUSH
48294: CALL_OW 250
48298: PPUSH
48299: LD_VAR 0 1
48303: PPUSH
48304: CALL_OW 251
48308: PPUSH
48309: LD_INT 10
48311: PPUSH
48312: LD_INT 0
48314: PPUSH
48315: CALL_OW 50
// result := result ^ un ;
48319: LD_ADDR_VAR 0 7
48323: PUSH
48324: LD_VAR 0 7
48328: PUSH
48329: LD_VAR 0 14
48333: ADD
48334: ST_TO_ADDR
// end ;
48335: GO 48213
48337: POP
48338: POP
// end ; end ;
48339: LD_VAR 0 7
48343: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
48344: LD_INT 0
48346: PPUSH
48347: PPUSH
48348: PPUSH
48349: PPUSH
48350: PPUSH
48351: PPUSH
48352: PPUSH
48353: PPUSH
48354: PPUSH
48355: PPUSH
48356: PPUSH
48357: PPUSH
48358: PPUSH
48359: PPUSH
48360: PPUSH
48361: PPUSH
// result := false ;
48362: LD_ADDR_VAR 0 3
48366: PUSH
48367: LD_INT 0
48369: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
48370: LD_VAR 0 1
48374: NOT
48375: PUSH
48376: LD_VAR 0 1
48380: PPUSH
48381: CALL_OW 266
48385: PUSH
48386: LD_INT 32
48388: PUSH
48389: LD_INT 33
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: IN
48396: NOT
48397: OR
48398: IFFALSE 48402
// exit ;
48400: GO 49511
// nat := GetNation ( tower ) ;
48402: LD_ADDR_VAR 0 12
48406: PUSH
48407: LD_VAR 0 1
48411: PPUSH
48412: CALL_OW 248
48416: ST_TO_ADDR
// side := GetSide ( tower ) ;
48417: LD_ADDR_VAR 0 16
48421: PUSH
48422: LD_VAR 0 1
48426: PPUSH
48427: CALL_OW 255
48431: ST_TO_ADDR
// x := GetX ( tower ) ;
48432: LD_ADDR_VAR 0 10
48436: PUSH
48437: LD_VAR 0 1
48441: PPUSH
48442: CALL_OW 250
48446: ST_TO_ADDR
// y := GetY ( tower ) ;
48447: LD_ADDR_VAR 0 11
48451: PUSH
48452: LD_VAR 0 1
48456: PPUSH
48457: CALL_OW 251
48461: ST_TO_ADDR
// if not x or not y then
48462: LD_VAR 0 10
48466: NOT
48467: PUSH
48468: LD_VAR 0 11
48472: NOT
48473: OR
48474: IFFALSE 48478
// exit ;
48476: GO 49511
// weapon := 0 ;
48478: LD_ADDR_VAR 0 18
48482: PUSH
48483: LD_INT 0
48485: ST_TO_ADDR
// fac_list := [ ] ;
48486: LD_ADDR_VAR 0 17
48490: PUSH
48491: EMPTY
48492: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
48493: LD_ADDR_VAR 0 6
48497: PUSH
48498: LD_VAR 0 1
48502: PPUSH
48503: CALL_OW 274
48507: PPUSH
48508: LD_VAR 0 2
48512: PPUSH
48513: LD_INT 0
48515: PPUSH
48516: CALL 46082 0 3
48520: PPUSH
48521: LD_INT 30
48523: PUSH
48524: LD_INT 3
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PPUSH
48531: CALL_OW 72
48535: ST_TO_ADDR
// if not factories then
48536: LD_VAR 0 6
48540: NOT
48541: IFFALSE 48545
// exit ;
48543: GO 49511
// for i in factories do
48545: LD_ADDR_VAR 0 8
48549: PUSH
48550: LD_VAR 0 6
48554: PUSH
48555: FOR_IN
48556: IFFALSE 48581
// fac_list := fac_list union AvailableWeaponList ( i ) ;
48558: LD_ADDR_VAR 0 17
48562: PUSH
48563: LD_VAR 0 17
48567: PUSH
48568: LD_VAR 0 8
48572: PPUSH
48573: CALL_OW 478
48577: UNION
48578: ST_TO_ADDR
48579: GO 48555
48581: POP
48582: POP
// if not fac_list then
48583: LD_VAR 0 17
48587: NOT
48588: IFFALSE 48592
// exit ;
48590: GO 49511
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
48592: LD_ADDR_VAR 0 5
48596: PUSH
48597: LD_INT 4
48599: PUSH
48600: LD_INT 5
48602: PUSH
48603: LD_INT 9
48605: PUSH
48606: LD_INT 10
48608: PUSH
48609: LD_INT 6
48611: PUSH
48612: LD_INT 7
48614: PUSH
48615: LD_INT 11
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 27
48629: PUSH
48630: LD_INT 28
48632: PUSH
48633: LD_INT 26
48635: PUSH
48636: LD_INT 30
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 43
48647: PUSH
48648: LD_INT 44
48650: PUSH
48651: LD_INT 46
48653: PUSH
48654: LD_INT 45
48656: PUSH
48657: LD_INT 47
48659: PUSH
48660: LD_INT 49
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: LIST
48675: PUSH
48676: LD_VAR 0 12
48680: ARRAY
48681: ST_TO_ADDR
// list := list isect fac_list ;
48682: LD_ADDR_VAR 0 5
48686: PUSH
48687: LD_VAR 0 5
48691: PUSH
48692: LD_VAR 0 17
48696: ISECT
48697: ST_TO_ADDR
// if not list then
48698: LD_VAR 0 5
48702: NOT
48703: IFFALSE 48707
// exit ;
48705: GO 49511
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
48707: LD_VAR 0 12
48711: PUSH
48712: LD_INT 3
48714: EQUAL
48715: PUSH
48716: LD_INT 49
48718: PUSH
48719: LD_VAR 0 5
48723: IN
48724: AND
48725: PUSH
48726: LD_INT 31
48728: PPUSH
48729: LD_VAR 0 16
48733: PPUSH
48734: CALL_OW 321
48738: PUSH
48739: LD_INT 2
48741: EQUAL
48742: AND
48743: IFFALSE 48803
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
48745: LD_INT 22
48747: PUSH
48748: LD_VAR 0 16
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 35
48759: PUSH
48760: LD_INT 49
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 91
48769: PUSH
48770: LD_VAR 0 1
48774: PUSH
48775: LD_INT 10
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: LIST
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: LIST
48787: PPUSH
48788: CALL_OW 69
48792: NOT
48793: IFFALSE 48803
// weapon := ru_time_lapser ;
48795: LD_ADDR_VAR 0 18
48799: PUSH
48800: LD_INT 49
48802: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
48803: LD_VAR 0 12
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: LD_INT 2
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: IN
48818: PUSH
48819: LD_INT 11
48821: PUSH
48822: LD_VAR 0 5
48826: IN
48827: PUSH
48828: LD_INT 30
48830: PUSH
48831: LD_VAR 0 5
48835: IN
48836: OR
48837: AND
48838: PUSH
48839: LD_INT 6
48841: PPUSH
48842: LD_VAR 0 16
48846: PPUSH
48847: CALL_OW 321
48851: PUSH
48852: LD_INT 2
48854: EQUAL
48855: AND
48856: IFFALSE 49021
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
48858: LD_INT 22
48860: PUSH
48861: LD_VAR 0 16
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: LD_INT 35
48875: PUSH
48876: LD_INT 11
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 35
48885: PUSH
48886: LD_INT 30
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 91
48900: PUSH
48901: LD_VAR 0 1
48905: PUSH
48906: LD_INT 18
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: LIST
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: LIST
48918: PPUSH
48919: CALL_OW 69
48923: NOT
48924: PUSH
48925: LD_INT 22
48927: PUSH
48928: LD_VAR 0 16
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: LD_INT 30
48942: PUSH
48943: LD_INT 32
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 30
48952: PUSH
48953: LD_INT 33
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 91
48967: PUSH
48968: LD_VAR 0 1
48972: PUSH
48973: LD_INT 12
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: LIST
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: LIST
48985: PUSH
48986: EMPTY
48987: LIST
48988: PPUSH
48989: CALL_OW 69
48993: PUSH
48994: LD_INT 2
48996: GREATER
48997: AND
48998: IFFALSE 49021
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49000: LD_ADDR_VAR 0 18
49004: PUSH
49005: LD_INT 11
49007: PUSH
49008: LD_INT 30
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_VAR 0 12
49019: ARRAY
49020: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49021: LD_VAR 0 18
49025: NOT
49026: PUSH
49027: LD_INT 40
49029: PPUSH
49030: LD_VAR 0 16
49034: PPUSH
49035: CALL_OW 321
49039: PUSH
49040: LD_INT 2
49042: EQUAL
49043: AND
49044: PUSH
49045: LD_INT 7
49047: PUSH
49048: LD_VAR 0 5
49052: IN
49053: PUSH
49054: LD_INT 28
49056: PUSH
49057: LD_VAR 0 5
49061: IN
49062: OR
49063: PUSH
49064: LD_INT 45
49066: PUSH
49067: LD_VAR 0 5
49071: IN
49072: OR
49073: AND
49074: IFFALSE 49328
// begin hex := GetHexInfo ( x , y ) ;
49076: LD_ADDR_VAR 0 4
49080: PUSH
49081: LD_VAR 0 10
49085: PPUSH
49086: LD_VAR 0 11
49090: PPUSH
49091: CALL_OW 546
49095: ST_TO_ADDR
// if hex [ 1 ] then
49096: LD_VAR 0 4
49100: PUSH
49101: LD_INT 1
49103: ARRAY
49104: IFFALSE 49108
// exit ;
49106: GO 49511
// height := hex [ 2 ] ;
49108: LD_ADDR_VAR 0 15
49112: PUSH
49113: LD_VAR 0 4
49117: PUSH
49118: LD_INT 2
49120: ARRAY
49121: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49122: LD_ADDR_VAR 0 14
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: LD_INT 2
49132: PUSH
49133: LD_INT 3
49135: PUSH
49136: LD_INT 5
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: ST_TO_ADDR
// for i in tmp do
49145: LD_ADDR_VAR 0 8
49149: PUSH
49150: LD_VAR 0 14
49154: PUSH
49155: FOR_IN
49156: IFFALSE 49326
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49158: LD_ADDR_VAR 0 9
49162: PUSH
49163: LD_VAR 0 10
49167: PPUSH
49168: LD_VAR 0 8
49172: PPUSH
49173: LD_INT 5
49175: PPUSH
49176: CALL_OW 272
49180: PUSH
49181: LD_VAR 0 11
49185: PPUSH
49186: LD_VAR 0 8
49190: PPUSH
49191: LD_INT 5
49193: PPUSH
49194: CALL_OW 273
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49203: LD_VAR 0 9
49207: PUSH
49208: LD_INT 1
49210: ARRAY
49211: PPUSH
49212: LD_VAR 0 9
49216: PUSH
49217: LD_INT 2
49219: ARRAY
49220: PPUSH
49221: CALL_OW 488
49225: IFFALSE 49324
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49227: LD_ADDR_VAR 0 4
49231: PUSH
49232: LD_VAR 0 9
49236: PUSH
49237: LD_INT 1
49239: ARRAY
49240: PPUSH
49241: LD_VAR 0 9
49245: PUSH
49246: LD_INT 2
49248: ARRAY
49249: PPUSH
49250: CALL_OW 546
49254: ST_TO_ADDR
// if hex [ 1 ] then
49255: LD_VAR 0 4
49259: PUSH
49260: LD_INT 1
49262: ARRAY
49263: IFFALSE 49267
// continue ;
49265: GO 49155
// h := hex [ 2 ] ;
49267: LD_ADDR_VAR 0 13
49271: PUSH
49272: LD_VAR 0 4
49276: PUSH
49277: LD_INT 2
49279: ARRAY
49280: ST_TO_ADDR
// if h + 7 < height then
49281: LD_VAR 0 13
49285: PUSH
49286: LD_INT 7
49288: PLUS
49289: PUSH
49290: LD_VAR 0 15
49294: LESS
49295: IFFALSE 49324
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
49297: LD_ADDR_VAR 0 18
49301: PUSH
49302: LD_INT 7
49304: PUSH
49305: LD_INT 28
49307: PUSH
49308: LD_INT 45
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: LIST
49315: PUSH
49316: LD_VAR 0 12
49320: ARRAY
49321: ST_TO_ADDR
// break ;
49322: GO 49326
// end ; end ; end ;
49324: GO 49155
49326: POP
49327: POP
// end ; if not weapon then
49328: LD_VAR 0 18
49332: NOT
49333: IFFALSE 49393
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
49335: LD_ADDR_VAR 0 5
49339: PUSH
49340: LD_VAR 0 5
49344: PUSH
49345: LD_INT 11
49347: PUSH
49348: LD_INT 30
49350: PUSH
49351: LD_INT 49
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: LIST
49358: DIFF
49359: ST_TO_ADDR
// if not list then
49360: LD_VAR 0 5
49364: NOT
49365: IFFALSE 49369
// exit ;
49367: GO 49511
// weapon := list [ rand ( 1 , list ) ] ;
49369: LD_ADDR_VAR 0 18
49373: PUSH
49374: LD_VAR 0 5
49378: PUSH
49379: LD_INT 1
49381: PPUSH
49382: LD_VAR 0 5
49386: PPUSH
49387: CALL_OW 12
49391: ARRAY
49392: ST_TO_ADDR
// end ; if weapon then
49393: LD_VAR 0 18
49397: IFFALSE 49511
// begin tmp := CostOfWeapon ( weapon ) ;
49399: LD_ADDR_VAR 0 14
49403: PUSH
49404: LD_VAR 0 18
49408: PPUSH
49409: CALL_OW 451
49413: ST_TO_ADDR
// j := GetBase ( tower ) ;
49414: LD_ADDR_VAR 0 9
49418: PUSH
49419: LD_VAR 0 1
49423: PPUSH
49424: CALL_OW 274
49428: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
49429: LD_VAR 0 9
49433: PPUSH
49434: LD_INT 1
49436: PPUSH
49437: CALL_OW 275
49441: PUSH
49442: LD_VAR 0 14
49446: PUSH
49447: LD_INT 1
49449: ARRAY
49450: GREATEREQUAL
49451: PUSH
49452: LD_VAR 0 9
49456: PPUSH
49457: LD_INT 2
49459: PPUSH
49460: CALL_OW 275
49464: PUSH
49465: LD_VAR 0 14
49469: PUSH
49470: LD_INT 2
49472: ARRAY
49473: GREATEREQUAL
49474: AND
49475: PUSH
49476: LD_VAR 0 9
49480: PPUSH
49481: LD_INT 3
49483: PPUSH
49484: CALL_OW 275
49488: PUSH
49489: LD_VAR 0 14
49493: PUSH
49494: LD_INT 3
49496: ARRAY
49497: GREATEREQUAL
49498: AND
49499: IFFALSE 49511
// result := weapon ;
49501: LD_ADDR_VAR 0 3
49505: PUSH
49506: LD_VAR 0 18
49510: ST_TO_ADDR
// end ; end ;
49511: LD_VAR 0 3
49515: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
49516: LD_INT 0
49518: PPUSH
49519: PPUSH
// result := true ;
49520: LD_ADDR_VAR 0 3
49524: PUSH
49525: LD_INT 1
49527: ST_TO_ADDR
// if array1 = array2 then
49528: LD_VAR 0 1
49532: PUSH
49533: LD_VAR 0 2
49537: EQUAL
49538: IFFALSE 49598
// begin for i = 1 to array1 do
49540: LD_ADDR_VAR 0 4
49544: PUSH
49545: DOUBLE
49546: LD_INT 1
49548: DEC
49549: ST_TO_ADDR
49550: LD_VAR 0 1
49554: PUSH
49555: FOR_TO
49556: IFFALSE 49594
// if array1 [ i ] <> array2 [ i ] then
49558: LD_VAR 0 1
49562: PUSH
49563: LD_VAR 0 4
49567: ARRAY
49568: PUSH
49569: LD_VAR 0 2
49573: PUSH
49574: LD_VAR 0 4
49578: ARRAY
49579: NONEQUAL
49580: IFFALSE 49592
// begin result := false ;
49582: LD_ADDR_VAR 0 3
49586: PUSH
49587: LD_INT 0
49589: ST_TO_ADDR
// break ;
49590: GO 49594
// end ;
49592: GO 49555
49594: POP
49595: POP
// end else
49596: GO 49606
// result := false ;
49598: LD_ADDR_VAR 0 3
49602: PUSH
49603: LD_INT 0
49605: ST_TO_ADDR
// end ;
49606: LD_VAR 0 3
49610: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
49611: LD_INT 0
49613: PPUSH
49614: PPUSH
// if not array1 or not array2 then
49615: LD_VAR 0 1
49619: NOT
49620: PUSH
49621: LD_VAR 0 2
49625: NOT
49626: OR
49627: IFFALSE 49631
// exit ;
49629: GO 49695
// result := true ;
49631: LD_ADDR_VAR 0 3
49635: PUSH
49636: LD_INT 1
49638: ST_TO_ADDR
// for i = 1 to array1 do
49639: LD_ADDR_VAR 0 4
49643: PUSH
49644: DOUBLE
49645: LD_INT 1
49647: DEC
49648: ST_TO_ADDR
49649: LD_VAR 0 1
49653: PUSH
49654: FOR_TO
49655: IFFALSE 49693
// if array1 [ i ] <> array2 [ i ] then
49657: LD_VAR 0 1
49661: PUSH
49662: LD_VAR 0 4
49666: ARRAY
49667: PUSH
49668: LD_VAR 0 2
49672: PUSH
49673: LD_VAR 0 4
49677: ARRAY
49678: NONEQUAL
49679: IFFALSE 49691
// begin result := false ;
49681: LD_ADDR_VAR 0 3
49685: PUSH
49686: LD_INT 0
49688: ST_TO_ADDR
// break ;
49689: GO 49693
// end ;
49691: GO 49654
49693: POP
49694: POP
// end ;
49695: LD_VAR 0 3
49699: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
49700: LD_INT 0
49702: PPUSH
49703: PPUSH
49704: PPUSH
// pom := GetBase ( fac ) ;
49705: LD_ADDR_VAR 0 5
49709: PUSH
49710: LD_VAR 0 1
49714: PPUSH
49715: CALL_OW 274
49719: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
49720: LD_ADDR_VAR 0 4
49724: PUSH
49725: LD_VAR 0 2
49729: PUSH
49730: LD_INT 1
49732: ARRAY
49733: PPUSH
49734: LD_VAR 0 2
49738: PUSH
49739: LD_INT 2
49741: ARRAY
49742: PPUSH
49743: LD_VAR 0 2
49747: PUSH
49748: LD_INT 3
49750: ARRAY
49751: PPUSH
49752: LD_VAR 0 2
49756: PUSH
49757: LD_INT 4
49759: ARRAY
49760: PPUSH
49761: CALL_OW 449
49765: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49766: LD_ADDR_VAR 0 3
49770: PUSH
49771: LD_VAR 0 5
49775: PPUSH
49776: LD_INT 1
49778: PPUSH
49779: CALL_OW 275
49783: PUSH
49784: LD_VAR 0 4
49788: PUSH
49789: LD_INT 1
49791: ARRAY
49792: GREATEREQUAL
49793: PUSH
49794: LD_VAR 0 5
49798: PPUSH
49799: LD_INT 2
49801: PPUSH
49802: CALL_OW 275
49806: PUSH
49807: LD_VAR 0 4
49811: PUSH
49812: LD_INT 2
49814: ARRAY
49815: GREATEREQUAL
49816: AND
49817: PUSH
49818: LD_VAR 0 5
49822: PPUSH
49823: LD_INT 3
49825: PPUSH
49826: CALL_OW 275
49830: PUSH
49831: LD_VAR 0 4
49835: PUSH
49836: LD_INT 3
49838: ARRAY
49839: GREATEREQUAL
49840: AND
49841: ST_TO_ADDR
// end ;
49842: LD_VAR 0 3
49846: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
49847: LD_INT 0
49849: PPUSH
49850: PPUSH
49851: PPUSH
49852: PPUSH
// pom := GetBase ( building ) ;
49853: LD_ADDR_VAR 0 3
49857: PUSH
49858: LD_VAR 0 1
49862: PPUSH
49863: CALL_OW 274
49867: ST_TO_ADDR
// if not pom then
49868: LD_VAR 0 3
49872: NOT
49873: IFFALSE 49877
// exit ;
49875: GO 50047
// btype := GetBType ( building ) ;
49877: LD_ADDR_VAR 0 5
49881: PUSH
49882: LD_VAR 0 1
49886: PPUSH
49887: CALL_OW 266
49891: ST_TO_ADDR
// if btype = b_armoury then
49892: LD_VAR 0 5
49896: PUSH
49897: LD_INT 4
49899: EQUAL
49900: IFFALSE 49910
// btype := b_barracks ;
49902: LD_ADDR_VAR 0 5
49906: PUSH
49907: LD_INT 5
49909: ST_TO_ADDR
// if btype = b_depot then
49910: LD_VAR 0 5
49914: PUSH
49915: LD_INT 0
49917: EQUAL
49918: IFFALSE 49928
// btype := b_warehouse ;
49920: LD_ADDR_VAR 0 5
49924: PUSH
49925: LD_INT 1
49927: ST_TO_ADDR
// if btype = b_workshop then
49928: LD_VAR 0 5
49932: PUSH
49933: LD_INT 2
49935: EQUAL
49936: IFFALSE 49946
// btype := b_factory ;
49938: LD_ADDR_VAR 0 5
49942: PUSH
49943: LD_INT 3
49945: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
49946: LD_ADDR_VAR 0 4
49950: PUSH
49951: LD_VAR 0 5
49955: PPUSH
49956: LD_VAR 0 1
49960: PPUSH
49961: CALL_OW 248
49965: PPUSH
49966: CALL_OW 450
49970: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
49971: LD_ADDR_VAR 0 2
49975: PUSH
49976: LD_VAR 0 3
49980: PPUSH
49981: LD_INT 1
49983: PPUSH
49984: CALL_OW 275
49988: PUSH
49989: LD_VAR 0 4
49993: PUSH
49994: LD_INT 1
49996: ARRAY
49997: GREATEREQUAL
49998: PUSH
49999: LD_VAR 0 3
50003: PPUSH
50004: LD_INT 2
50006: PPUSH
50007: CALL_OW 275
50011: PUSH
50012: LD_VAR 0 4
50016: PUSH
50017: LD_INT 2
50019: ARRAY
50020: GREATEREQUAL
50021: AND
50022: PUSH
50023: LD_VAR 0 3
50027: PPUSH
50028: LD_INT 3
50030: PPUSH
50031: CALL_OW 275
50035: PUSH
50036: LD_VAR 0 4
50040: PUSH
50041: LD_INT 3
50043: ARRAY
50044: GREATEREQUAL
50045: AND
50046: ST_TO_ADDR
// end ;
50047: LD_VAR 0 2
50051: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50052: LD_INT 0
50054: PPUSH
50055: PPUSH
50056: PPUSH
// pom := GetBase ( building ) ;
50057: LD_ADDR_VAR 0 4
50061: PUSH
50062: LD_VAR 0 1
50066: PPUSH
50067: CALL_OW 274
50071: ST_TO_ADDR
// if not pom then
50072: LD_VAR 0 4
50076: NOT
50077: IFFALSE 50081
// exit ;
50079: GO 50182
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50081: LD_ADDR_VAR 0 5
50085: PUSH
50086: LD_VAR 0 2
50090: PPUSH
50091: LD_VAR 0 1
50095: PPUSH
50096: CALL_OW 248
50100: PPUSH
50101: CALL_OW 450
50105: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50106: LD_ADDR_VAR 0 3
50110: PUSH
50111: LD_VAR 0 4
50115: PPUSH
50116: LD_INT 1
50118: PPUSH
50119: CALL_OW 275
50123: PUSH
50124: LD_VAR 0 5
50128: PUSH
50129: LD_INT 1
50131: ARRAY
50132: GREATEREQUAL
50133: PUSH
50134: LD_VAR 0 4
50138: PPUSH
50139: LD_INT 2
50141: PPUSH
50142: CALL_OW 275
50146: PUSH
50147: LD_VAR 0 5
50151: PUSH
50152: LD_INT 2
50154: ARRAY
50155: GREATEREQUAL
50156: AND
50157: PUSH
50158: LD_VAR 0 4
50162: PPUSH
50163: LD_INT 3
50165: PPUSH
50166: CALL_OW 275
50170: PUSH
50171: LD_VAR 0 5
50175: PUSH
50176: LD_INT 3
50178: ARRAY
50179: GREATEREQUAL
50180: AND
50181: ST_TO_ADDR
// end ;
50182: LD_VAR 0 3
50186: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50187: LD_INT 0
50189: PPUSH
50190: PPUSH
50191: PPUSH
50192: PPUSH
50193: PPUSH
50194: PPUSH
50195: PPUSH
50196: PPUSH
50197: PPUSH
50198: PPUSH
50199: PPUSH
// result := false ;
50200: LD_ADDR_VAR 0 8
50204: PUSH
50205: LD_INT 0
50207: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50208: LD_VAR 0 5
50212: NOT
50213: PUSH
50214: LD_VAR 0 1
50218: NOT
50219: OR
50220: PUSH
50221: LD_VAR 0 2
50225: NOT
50226: OR
50227: PUSH
50228: LD_VAR 0 3
50232: NOT
50233: OR
50234: IFFALSE 50238
// exit ;
50236: GO 51052
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
50238: LD_ADDR_VAR 0 14
50242: PUSH
50243: LD_VAR 0 1
50247: PPUSH
50248: LD_VAR 0 2
50252: PPUSH
50253: LD_VAR 0 3
50257: PPUSH
50258: LD_VAR 0 4
50262: PPUSH
50263: LD_VAR 0 5
50267: PUSH
50268: LD_INT 1
50270: ARRAY
50271: PPUSH
50272: CALL_OW 248
50276: PPUSH
50277: LD_INT 0
50279: PPUSH
50280: CALL 52289 0 6
50284: ST_TO_ADDR
// if not hexes then
50285: LD_VAR 0 14
50289: NOT
50290: IFFALSE 50294
// exit ;
50292: GO 51052
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
50294: LD_ADDR_VAR 0 17
50298: PUSH
50299: LD_VAR 0 5
50303: PPUSH
50304: LD_INT 22
50306: PUSH
50307: LD_VAR 0 13
50311: PPUSH
50312: CALL_OW 255
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 2
50323: PUSH
50324: LD_INT 30
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 30
50336: PUSH
50337: LD_INT 1
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: LIST
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PPUSH
50353: CALL_OW 72
50357: ST_TO_ADDR
// for i = 1 to hexes do
50358: LD_ADDR_VAR 0 9
50362: PUSH
50363: DOUBLE
50364: LD_INT 1
50366: DEC
50367: ST_TO_ADDR
50368: LD_VAR 0 14
50372: PUSH
50373: FOR_TO
50374: IFFALSE 51050
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
50376: LD_ADDR_VAR 0 13
50380: PUSH
50381: LD_VAR 0 14
50385: PUSH
50386: LD_VAR 0 9
50390: ARRAY
50391: PUSH
50392: LD_INT 1
50394: ARRAY
50395: PPUSH
50396: LD_VAR 0 14
50400: PUSH
50401: LD_VAR 0 9
50405: ARRAY
50406: PUSH
50407: LD_INT 2
50409: ARRAY
50410: PPUSH
50411: CALL_OW 428
50415: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
50416: LD_VAR 0 14
50420: PUSH
50421: LD_VAR 0 9
50425: ARRAY
50426: PUSH
50427: LD_INT 1
50429: ARRAY
50430: PPUSH
50431: LD_VAR 0 14
50435: PUSH
50436: LD_VAR 0 9
50440: ARRAY
50441: PUSH
50442: LD_INT 2
50444: ARRAY
50445: PPUSH
50446: CALL_OW 351
50450: PUSH
50451: LD_VAR 0 14
50455: PUSH
50456: LD_VAR 0 9
50460: ARRAY
50461: PUSH
50462: LD_INT 1
50464: ARRAY
50465: PPUSH
50466: LD_VAR 0 14
50470: PUSH
50471: LD_VAR 0 9
50475: ARRAY
50476: PUSH
50477: LD_INT 2
50479: ARRAY
50480: PPUSH
50481: CALL_OW 488
50485: NOT
50486: OR
50487: PUSH
50488: LD_VAR 0 13
50492: PPUSH
50493: CALL_OW 247
50497: PUSH
50498: LD_INT 3
50500: EQUAL
50501: OR
50502: IFFALSE 50508
// exit ;
50504: POP
50505: POP
50506: GO 51052
// if not tmp then
50508: LD_VAR 0 13
50512: NOT
50513: IFFALSE 50517
// continue ;
50515: GO 50373
// result := true ;
50517: LD_ADDR_VAR 0 8
50521: PUSH
50522: LD_INT 1
50524: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
50525: LD_VAR 0 6
50529: PUSH
50530: LD_VAR 0 13
50534: PPUSH
50535: CALL_OW 247
50539: PUSH
50540: LD_INT 2
50542: EQUAL
50543: AND
50544: PUSH
50545: LD_VAR 0 13
50549: PPUSH
50550: CALL_OW 263
50554: PUSH
50555: LD_INT 1
50557: EQUAL
50558: AND
50559: IFFALSE 50723
// begin if IsDrivenBy ( tmp ) then
50561: LD_VAR 0 13
50565: PPUSH
50566: CALL_OW 311
50570: IFFALSE 50574
// continue ;
50572: GO 50373
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
50574: LD_VAR 0 6
50578: PPUSH
50579: LD_INT 3
50581: PUSH
50582: LD_INT 60
50584: PUSH
50585: EMPTY
50586: LIST
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 3
50594: PUSH
50595: LD_INT 55
50597: PUSH
50598: EMPTY
50599: LIST
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PPUSH
50609: CALL_OW 72
50613: IFFALSE 50721
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
50615: LD_ADDR_VAR 0 18
50619: PUSH
50620: LD_VAR 0 6
50624: PPUSH
50625: LD_INT 3
50627: PUSH
50628: LD_INT 60
50630: PUSH
50631: EMPTY
50632: LIST
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 3
50640: PUSH
50641: LD_INT 55
50643: PUSH
50644: EMPTY
50645: LIST
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PPUSH
50655: CALL_OW 72
50659: PUSH
50660: LD_INT 1
50662: ARRAY
50663: ST_TO_ADDR
// if IsInUnit ( driver ) then
50664: LD_VAR 0 18
50668: PPUSH
50669: CALL_OW 310
50673: IFFALSE 50684
// ComExit ( driver ) ;
50675: LD_VAR 0 18
50679: PPUSH
50680: CALL 75417 0 1
// AddComEnterUnit ( driver , tmp ) ;
50684: LD_VAR 0 18
50688: PPUSH
50689: LD_VAR 0 13
50693: PPUSH
50694: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
50698: LD_VAR 0 18
50702: PPUSH
50703: LD_VAR 0 7
50707: PPUSH
50708: CALL_OW 173
// AddComExitVehicle ( driver ) ;
50712: LD_VAR 0 18
50716: PPUSH
50717: CALL_OW 181
// end ; continue ;
50721: GO 50373
// end ; if not cleaners or not tmp in cleaners then
50723: LD_VAR 0 6
50727: NOT
50728: PUSH
50729: LD_VAR 0 13
50733: PUSH
50734: LD_VAR 0 6
50738: IN
50739: NOT
50740: OR
50741: IFFALSE 51048
// begin if dep then
50743: LD_VAR 0 17
50747: IFFALSE 50883
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
50749: LD_ADDR_VAR 0 16
50753: PUSH
50754: LD_VAR 0 17
50758: PUSH
50759: LD_INT 1
50761: ARRAY
50762: PPUSH
50763: CALL_OW 250
50767: PPUSH
50768: LD_VAR 0 17
50772: PUSH
50773: LD_INT 1
50775: ARRAY
50776: PPUSH
50777: CALL_OW 254
50781: PPUSH
50782: LD_INT 5
50784: PPUSH
50785: CALL_OW 272
50789: PUSH
50790: LD_VAR 0 17
50794: PUSH
50795: LD_INT 1
50797: ARRAY
50798: PPUSH
50799: CALL_OW 251
50803: PPUSH
50804: LD_VAR 0 17
50808: PUSH
50809: LD_INT 1
50811: ARRAY
50812: PPUSH
50813: CALL_OW 254
50817: PPUSH
50818: LD_INT 5
50820: PPUSH
50821: CALL_OW 273
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
50830: LD_VAR 0 16
50834: PUSH
50835: LD_INT 1
50837: ARRAY
50838: PPUSH
50839: LD_VAR 0 16
50843: PUSH
50844: LD_INT 2
50846: ARRAY
50847: PPUSH
50848: CALL_OW 488
50852: IFFALSE 50883
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
50854: LD_VAR 0 13
50858: PPUSH
50859: LD_VAR 0 16
50863: PUSH
50864: LD_INT 1
50866: ARRAY
50867: PPUSH
50868: LD_VAR 0 16
50872: PUSH
50873: LD_INT 2
50875: ARRAY
50876: PPUSH
50877: CALL_OW 111
// continue ;
50881: GO 50373
// end ; end ; r := GetDir ( tmp ) ;
50883: LD_ADDR_VAR 0 15
50887: PUSH
50888: LD_VAR 0 13
50892: PPUSH
50893: CALL_OW 254
50897: ST_TO_ADDR
// if r = 5 then
50898: LD_VAR 0 15
50902: PUSH
50903: LD_INT 5
50905: EQUAL
50906: IFFALSE 50916
// r := 0 ;
50908: LD_ADDR_VAR 0 15
50912: PUSH
50913: LD_INT 0
50915: ST_TO_ADDR
// for j = r to 5 do
50916: LD_ADDR_VAR 0 10
50920: PUSH
50921: DOUBLE
50922: LD_VAR 0 15
50926: DEC
50927: ST_TO_ADDR
50928: LD_INT 5
50930: PUSH
50931: FOR_TO
50932: IFFALSE 51046
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
50934: LD_ADDR_VAR 0 11
50938: PUSH
50939: LD_VAR 0 13
50943: PPUSH
50944: CALL_OW 250
50948: PPUSH
50949: LD_VAR 0 10
50953: PPUSH
50954: LD_INT 2
50956: PPUSH
50957: CALL_OW 272
50961: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
50962: LD_ADDR_VAR 0 12
50966: PUSH
50967: LD_VAR 0 13
50971: PPUSH
50972: CALL_OW 251
50976: PPUSH
50977: LD_VAR 0 10
50981: PPUSH
50982: LD_INT 2
50984: PPUSH
50985: CALL_OW 273
50989: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
50990: LD_VAR 0 11
50994: PPUSH
50995: LD_VAR 0 12
50999: PPUSH
51000: CALL_OW 488
51004: PUSH
51005: LD_VAR 0 11
51009: PPUSH
51010: LD_VAR 0 12
51014: PPUSH
51015: CALL_OW 428
51019: NOT
51020: AND
51021: IFFALSE 51044
// begin ComMoveXY ( tmp , _x , _y ) ;
51023: LD_VAR 0 13
51027: PPUSH
51028: LD_VAR 0 11
51032: PPUSH
51033: LD_VAR 0 12
51037: PPUSH
51038: CALL_OW 111
// break ;
51042: GO 51046
// end ; end ;
51044: GO 50931
51046: POP
51047: POP
// end ; end ;
51048: GO 50373
51050: POP
51051: POP
// end ;
51052: LD_VAR 0 8
51056: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51057: LD_INT 0
51059: PPUSH
// result := true ;
51060: LD_ADDR_VAR 0 3
51064: PUSH
51065: LD_INT 1
51067: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51068: LD_VAR 0 2
51072: PUSH
51073: LD_INT 24
51075: DOUBLE
51076: EQUAL
51077: IFTRUE 51087
51079: LD_INT 33
51081: DOUBLE
51082: EQUAL
51083: IFTRUE 51087
51085: GO 51112
51087: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51088: LD_ADDR_VAR 0 3
51092: PUSH
51093: LD_INT 32
51095: PPUSH
51096: LD_VAR 0 1
51100: PPUSH
51101: CALL_OW 321
51105: PUSH
51106: LD_INT 2
51108: EQUAL
51109: ST_TO_ADDR
51110: GO 51432
51112: LD_INT 20
51114: DOUBLE
51115: EQUAL
51116: IFTRUE 51120
51118: GO 51145
51120: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51121: LD_ADDR_VAR 0 3
51125: PUSH
51126: LD_INT 6
51128: PPUSH
51129: LD_VAR 0 1
51133: PPUSH
51134: CALL_OW 321
51138: PUSH
51139: LD_INT 2
51141: EQUAL
51142: ST_TO_ADDR
51143: GO 51432
51145: LD_INT 22
51147: DOUBLE
51148: EQUAL
51149: IFTRUE 51159
51151: LD_INT 36
51153: DOUBLE
51154: EQUAL
51155: IFTRUE 51159
51157: GO 51184
51159: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51160: LD_ADDR_VAR 0 3
51164: PUSH
51165: LD_INT 15
51167: PPUSH
51168: LD_VAR 0 1
51172: PPUSH
51173: CALL_OW 321
51177: PUSH
51178: LD_INT 2
51180: EQUAL
51181: ST_TO_ADDR
51182: GO 51432
51184: LD_INT 30
51186: DOUBLE
51187: EQUAL
51188: IFTRUE 51192
51190: GO 51217
51192: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51193: LD_ADDR_VAR 0 3
51197: PUSH
51198: LD_INT 20
51200: PPUSH
51201: LD_VAR 0 1
51205: PPUSH
51206: CALL_OW 321
51210: PUSH
51211: LD_INT 2
51213: EQUAL
51214: ST_TO_ADDR
51215: GO 51432
51217: LD_INT 28
51219: DOUBLE
51220: EQUAL
51221: IFTRUE 51231
51223: LD_INT 21
51225: DOUBLE
51226: EQUAL
51227: IFTRUE 51231
51229: GO 51256
51231: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51232: LD_ADDR_VAR 0 3
51236: PUSH
51237: LD_INT 21
51239: PPUSH
51240: LD_VAR 0 1
51244: PPUSH
51245: CALL_OW 321
51249: PUSH
51250: LD_INT 2
51252: EQUAL
51253: ST_TO_ADDR
51254: GO 51432
51256: LD_INT 16
51258: DOUBLE
51259: EQUAL
51260: IFTRUE 51264
51262: GO 51291
51264: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
51265: LD_ADDR_VAR 0 3
51269: PUSH
51270: LD_EXP 58
51274: PPUSH
51275: LD_VAR 0 1
51279: PPUSH
51280: CALL_OW 321
51284: PUSH
51285: LD_INT 2
51287: EQUAL
51288: ST_TO_ADDR
51289: GO 51432
51291: LD_INT 19
51293: DOUBLE
51294: EQUAL
51295: IFTRUE 51305
51297: LD_INT 23
51299: DOUBLE
51300: EQUAL
51301: IFTRUE 51305
51303: GO 51332
51305: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
51306: LD_ADDR_VAR 0 3
51310: PUSH
51311: LD_EXP 57
51315: PPUSH
51316: LD_VAR 0 1
51320: PPUSH
51321: CALL_OW 321
51325: PUSH
51326: LD_INT 2
51328: EQUAL
51329: ST_TO_ADDR
51330: GO 51432
51332: LD_INT 17
51334: DOUBLE
51335: EQUAL
51336: IFTRUE 51340
51338: GO 51365
51340: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
51341: LD_ADDR_VAR 0 3
51345: PUSH
51346: LD_INT 39
51348: PPUSH
51349: LD_VAR 0 1
51353: PPUSH
51354: CALL_OW 321
51358: PUSH
51359: LD_INT 2
51361: EQUAL
51362: ST_TO_ADDR
51363: GO 51432
51365: LD_INT 18
51367: DOUBLE
51368: EQUAL
51369: IFTRUE 51373
51371: GO 51398
51373: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
51374: LD_ADDR_VAR 0 3
51378: PUSH
51379: LD_INT 40
51381: PPUSH
51382: LD_VAR 0 1
51386: PPUSH
51387: CALL_OW 321
51391: PUSH
51392: LD_INT 2
51394: EQUAL
51395: ST_TO_ADDR
51396: GO 51432
51398: LD_INT 27
51400: DOUBLE
51401: EQUAL
51402: IFTRUE 51406
51404: GO 51431
51406: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
51407: LD_ADDR_VAR 0 3
51411: PUSH
51412: LD_INT 35
51414: PPUSH
51415: LD_VAR 0 1
51419: PPUSH
51420: CALL_OW 321
51424: PUSH
51425: LD_INT 2
51427: EQUAL
51428: ST_TO_ADDR
51429: GO 51432
51431: POP
// end ;
51432: LD_VAR 0 3
51436: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
51437: LD_INT 0
51439: PPUSH
51440: PPUSH
51441: PPUSH
51442: PPUSH
51443: PPUSH
51444: PPUSH
51445: PPUSH
51446: PPUSH
51447: PPUSH
51448: PPUSH
51449: PPUSH
// result := false ;
51450: LD_ADDR_VAR 0 6
51454: PUSH
51455: LD_INT 0
51457: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
51458: LD_VAR 0 1
51462: NOT
51463: PUSH
51464: LD_VAR 0 1
51468: PPUSH
51469: CALL_OW 266
51473: PUSH
51474: LD_INT 0
51476: PUSH
51477: LD_INT 1
51479: PUSH
51480: EMPTY
51481: LIST
51482: LIST
51483: IN
51484: NOT
51485: OR
51486: PUSH
51487: LD_VAR 0 2
51491: NOT
51492: OR
51493: PUSH
51494: LD_VAR 0 5
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: LD_INT 2
51507: PUSH
51508: LD_INT 3
51510: PUSH
51511: LD_INT 4
51513: PUSH
51514: LD_INT 5
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: IN
51525: NOT
51526: OR
51527: PUSH
51528: LD_VAR 0 3
51532: PPUSH
51533: LD_VAR 0 4
51537: PPUSH
51538: CALL_OW 488
51542: NOT
51543: OR
51544: IFFALSE 51548
// exit ;
51546: GO 52284
// side := GetSide ( depot ) ;
51548: LD_ADDR_VAR 0 9
51552: PUSH
51553: LD_VAR 0 1
51557: PPUSH
51558: CALL_OW 255
51562: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
51563: LD_VAR 0 9
51567: PPUSH
51568: LD_VAR 0 2
51572: PPUSH
51573: CALL 51057 0 2
51577: NOT
51578: IFFALSE 51582
// exit ;
51580: GO 52284
// pom := GetBase ( depot ) ;
51582: LD_ADDR_VAR 0 10
51586: PUSH
51587: LD_VAR 0 1
51591: PPUSH
51592: CALL_OW 274
51596: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51597: LD_ADDR_VAR 0 11
51601: PUSH
51602: LD_VAR 0 2
51606: PPUSH
51607: LD_VAR 0 1
51611: PPUSH
51612: CALL_OW 248
51616: PPUSH
51617: CALL_OW 450
51621: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
51622: LD_VAR 0 10
51626: PPUSH
51627: LD_INT 1
51629: PPUSH
51630: CALL_OW 275
51634: PUSH
51635: LD_VAR 0 11
51639: PUSH
51640: LD_INT 1
51642: ARRAY
51643: GREATEREQUAL
51644: PUSH
51645: LD_VAR 0 10
51649: PPUSH
51650: LD_INT 2
51652: PPUSH
51653: CALL_OW 275
51657: PUSH
51658: LD_VAR 0 11
51662: PUSH
51663: LD_INT 2
51665: ARRAY
51666: GREATEREQUAL
51667: AND
51668: PUSH
51669: LD_VAR 0 10
51673: PPUSH
51674: LD_INT 3
51676: PPUSH
51677: CALL_OW 275
51681: PUSH
51682: LD_VAR 0 11
51686: PUSH
51687: LD_INT 3
51689: ARRAY
51690: GREATEREQUAL
51691: AND
51692: NOT
51693: IFFALSE 51697
// exit ;
51695: GO 52284
// if GetBType ( depot ) = b_depot then
51697: LD_VAR 0 1
51701: PPUSH
51702: CALL_OW 266
51706: PUSH
51707: LD_INT 0
51709: EQUAL
51710: IFFALSE 51722
// dist := 28 else
51712: LD_ADDR_VAR 0 14
51716: PUSH
51717: LD_INT 28
51719: ST_TO_ADDR
51720: GO 51730
// dist := 36 ;
51722: LD_ADDR_VAR 0 14
51726: PUSH
51727: LD_INT 36
51729: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
51730: LD_VAR 0 1
51734: PPUSH
51735: LD_VAR 0 3
51739: PPUSH
51740: LD_VAR 0 4
51744: PPUSH
51745: CALL_OW 297
51749: PUSH
51750: LD_VAR 0 14
51754: GREATER
51755: IFFALSE 51759
// exit ;
51757: GO 52284
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
51759: LD_ADDR_VAR 0 12
51763: PUSH
51764: LD_VAR 0 2
51768: PPUSH
51769: LD_VAR 0 3
51773: PPUSH
51774: LD_VAR 0 4
51778: PPUSH
51779: LD_VAR 0 5
51783: PPUSH
51784: LD_VAR 0 1
51788: PPUSH
51789: CALL_OW 248
51793: PPUSH
51794: LD_INT 0
51796: PPUSH
51797: CALL 52289 0 6
51801: ST_TO_ADDR
// if not hexes then
51802: LD_VAR 0 12
51806: NOT
51807: IFFALSE 51811
// exit ;
51809: GO 52284
// hex := GetHexInfo ( x , y ) ;
51811: LD_ADDR_VAR 0 15
51815: PUSH
51816: LD_VAR 0 3
51820: PPUSH
51821: LD_VAR 0 4
51825: PPUSH
51826: CALL_OW 546
51830: ST_TO_ADDR
// if hex [ 1 ] then
51831: LD_VAR 0 15
51835: PUSH
51836: LD_INT 1
51838: ARRAY
51839: IFFALSE 51843
// exit ;
51841: GO 52284
// height := hex [ 2 ] ;
51843: LD_ADDR_VAR 0 13
51847: PUSH
51848: LD_VAR 0 15
51852: PUSH
51853: LD_INT 2
51855: ARRAY
51856: ST_TO_ADDR
// for i = 1 to hexes do
51857: LD_ADDR_VAR 0 7
51861: PUSH
51862: DOUBLE
51863: LD_INT 1
51865: DEC
51866: ST_TO_ADDR
51867: LD_VAR 0 12
51871: PUSH
51872: FOR_TO
51873: IFFALSE 52203
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
51875: LD_VAR 0 12
51879: PUSH
51880: LD_VAR 0 7
51884: ARRAY
51885: PUSH
51886: LD_INT 1
51888: ARRAY
51889: PPUSH
51890: LD_VAR 0 12
51894: PUSH
51895: LD_VAR 0 7
51899: ARRAY
51900: PUSH
51901: LD_INT 2
51903: ARRAY
51904: PPUSH
51905: CALL_OW 488
51909: NOT
51910: PUSH
51911: LD_VAR 0 12
51915: PUSH
51916: LD_VAR 0 7
51920: ARRAY
51921: PUSH
51922: LD_INT 1
51924: ARRAY
51925: PPUSH
51926: LD_VAR 0 12
51930: PUSH
51931: LD_VAR 0 7
51935: ARRAY
51936: PUSH
51937: LD_INT 2
51939: ARRAY
51940: PPUSH
51941: CALL_OW 428
51945: PUSH
51946: LD_INT 0
51948: GREATER
51949: OR
51950: PUSH
51951: LD_VAR 0 12
51955: PUSH
51956: LD_VAR 0 7
51960: ARRAY
51961: PUSH
51962: LD_INT 1
51964: ARRAY
51965: PPUSH
51966: LD_VAR 0 12
51970: PUSH
51971: LD_VAR 0 7
51975: ARRAY
51976: PUSH
51977: LD_INT 2
51979: ARRAY
51980: PPUSH
51981: CALL_OW 351
51985: OR
51986: IFFALSE 51992
// exit ;
51988: POP
51989: POP
51990: GO 52284
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51992: LD_ADDR_VAR 0 8
51996: PUSH
51997: LD_VAR 0 12
52001: PUSH
52002: LD_VAR 0 7
52006: ARRAY
52007: PUSH
52008: LD_INT 1
52010: ARRAY
52011: PPUSH
52012: LD_VAR 0 12
52016: PUSH
52017: LD_VAR 0 7
52021: ARRAY
52022: PUSH
52023: LD_INT 2
52025: ARRAY
52026: PPUSH
52027: CALL_OW 546
52031: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52032: LD_VAR 0 8
52036: PUSH
52037: LD_INT 1
52039: ARRAY
52040: PUSH
52041: LD_VAR 0 8
52045: PUSH
52046: LD_INT 2
52048: ARRAY
52049: PUSH
52050: LD_VAR 0 13
52054: PUSH
52055: LD_INT 2
52057: PLUS
52058: GREATER
52059: OR
52060: PUSH
52061: LD_VAR 0 8
52065: PUSH
52066: LD_INT 2
52068: ARRAY
52069: PUSH
52070: LD_VAR 0 13
52074: PUSH
52075: LD_INT 2
52077: MINUS
52078: LESS
52079: OR
52080: PUSH
52081: LD_VAR 0 8
52085: PUSH
52086: LD_INT 3
52088: ARRAY
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: LD_INT 8
52095: PUSH
52096: LD_INT 9
52098: PUSH
52099: LD_INT 10
52101: PUSH
52102: LD_INT 11
52104: PUSH
52105: LD_INT 12
52107: PUSH
52108: LD_INT 13
52110: PUSH
52111: LD_INT 16
52113: PUSH
52114: LD_INT 17
52116: PUSH
52117: LD_INT 18
52119: PUSH
52120: LD_INT 19
52122: PUSH
52123: LD_INT 20
52125: PUSH
52126: LD_INT 21
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: LIST
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: IN
52144: NOT
52145: OR
52146: PUSH
52147: LD_VAR 0 8
52151: PUSH
52152: LD_INT 5
52154: ARRAY
52155: NOT
52156: OR
52157: PUSH
52158: LD_VAR 0 8
52162: PUSH
52163: LD_INT 6
52165: ARRAY
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: LD_INT 2
52172: PUSH
52173: LD_INT 7
52175: PUSH
52176: LD_INT 9
52178: PUSH
52179: LD_INT 10
52181: PUSH
52182: LD_INT 11
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: IN
52193: NOT
52194: OR
52195: IFFALSE 52201
// exit ;
52197: POP
52198: POP
52199: GO 52284
// end ;
52201: GO 51872
52203: POP
52204: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52205: LD_VAR 0 9
52209: PPUSH
52210: LD_VAR 0 3
52214: PPUSH
52215: LD_VAR 0 4
52219: PPUSH
52220: LD_INT 20
52222: PPUSH
52223: CALL 44230 0 4
52227: PUSH
52228: LD_INT 4
52230: ARRAY
52231: IFFALSE 52235
// exit ;
52233: GO 52284
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
52235: LD_VAR 0 2
52239: PUSH
52240: LD_INT 29
52242: PUSH
52243: LD_INT 30
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: IN
52250: PUSH
52251: LD_VAR 0 3
52255: PPUSH
52256: LD_VAR 0 4
52260: PPUSH
52261: LD_VAR 0 9
52265: PPUSH
52266: CALL_OW 440
52270: NOT
52271: AND
52272: IFFALSE 52276
// exit ;
52274: GO 52284
// result := true ;
52276: LD_ADDR_VAR 0 6
52280: PUSH
52281: LD_INT 1
52283: ST_TO_ADDR
// end ;
52284: LD_VAR 0 6
52288: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
52289: LD_INT 0
52291: PPUSH
52292: PPUSH
52293: PPUSH
52294: PPUSH
52295: PPUSH
52296: PPUSH
52297: PPUSH
52298: PPUSH
52299: PPUSH
52300: PPUSH
52301: PPUSH
52302: PPUSH
52303: PPUSH
52304: PPUSH
52305: PPUSH
52306: PPUSH
52307: PPUSH
52308: PPUSH
52309: PPUSH
52310: PPUSH
52311: PPUSH
52312: PPUSH
52313: PPUSH
52314: PPUSH
52315: PPUSH
52316: PPUSH
52317: PPUSH
52318: PPUSH
52319: PPUSH
52320: PPUSH
52321: PPUSH
52322: PPUSH
52323: PPUSH
52324: PPUSH
52325: PPUSH
52326: PPUSH
52327: PPUSH
52328: PPUSH
52329: PPUSH
52330: PPUSH
52331: PPUSH
52332: PPUSH
52333: PPUSH
52334: PPUSH
52335: PPUSH
52336: PPUSH
52337: PPUSH
52338: PPUSH
52339: PPUSH
52340: PPUSH
52341: PPUSH
52342: PPUSH
52343: PPUSH
52344: PPUSH
52345: PPUSH
52346: PPUSH
52347: PPUSH
52348: PPUSH
// result = [ ] ;
52349: LD_ADDR_VAR 0 7
52353: PUSH
52354: EMPTY
52355: ST_TO_ADDR
// temp_list = [ ] ;
52356: LD_ADDR_VAR 0 9
52360: PUSH
52361: EMPTY
52362: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
52363: LD_VAR 0 4
52367: PUSH
52368: LD_INT 0
52370: PUSH
52371: LD_INT 1
52373: PUSH
52374: LD_INT 2
52376: PUSH
52377: LD_INT 3
52379: PUSH
52380: LD_INT 4
52382: PUSH
52383: LD_INT 5
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: IN
52394: NOT
52395: PUSH
52396: LD_VAR 0 1
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: IN
52411: PUSH
52412: LD_VAR 0 5
52416: PUSH
52417: LD_INT 1
52419: PUSH
52420: LD_INT 2
52422: PUSH
52423: LD_INT 3
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: LIST
52430: IN
52431: NOT
52432: AND
52433: OR
52434: IFFALSE 52438
// exit ;
52436: GO 70829
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
52438: LD_VAR 0 1
52442: PUSH
52443: LD_INT 6
52445: PUSH
52446: LD_INT 7
52448: PUSH
52449: LD_INT 8
52451: PUSH
52452: LD_INT 13
52454: PUSH
52455: LD_INT 12
52457: PUSH
52458: LD_INT 15
52460: PUSH
52461: LD_INT 11
52463: PUSH
52464: LD_INT 14
52466: PUSH
52467: LD_INT 10
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: IN
52481: IFFALSE 52491
// btype = b_lab ;
52483: LD_ADDR_VAR 0 1
52487: PUSH
52488: LD_INT 6
52490: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
52491: LD_VAR 0 6
52495: PUSH
52496: LD_INT 0
52498: PUSH
52499: LD_INT 1
52501: PUSH
52502: LD_INT 2
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: LIST
52509: IN
52510: NOT
52511: PUSH
52512: LD_VAR 0 1
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: LD_INT 1
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: LD_INT 3
52528: PUSH
52529: LD_INT 6
52531: PUSH
52532: LD_INT 36
52534: PUSH
52535: LD_INT 4
52537: PUSH
52538: LD_INT 5
52540: PUSH
52541: LD_INT 31
52543: PUSH
52544: LD_INT 32
52546: PUSH
52547: LD_INT 33
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: IN
52563: NOT
52564: PUSH
52565: LD_VAR 0 6
52569: PUSH
52570: LD_INT 1
52572: EQUAL
52573: AND
52574: OR
52575: PUSH
52576: LD_VAR 0 1
52580: PUSH
52581: LD_INT 2
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: IN
52591: NOT
52592: PUSH
52593: LD_VAR 0 6
52597: PUSH
52598: LD_INT 2
52600: EQUAL
52601: AND
52602: OR
52603: IFFALSE 52613
// mode = 0 ;
52605: LD_ADDR_VAR 0 6
52609: PUSH
52610: LD_INT 0
52612: ST_TO_ADDR
// case mode of 0 :
52613: LD_VAR 0 6
52617: PUSH
52618: LD_INT 0
52620: DOUBLE
52621: EQUAL
52622: IFTRUE 52626
52624: GO 64079
52626: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52627: LD_ADDR_VAR 0 11
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 1
52708: NEG
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 2
52723: NEG
52724: PUSH
52725: EMPTY
52726: LIST
52727: LIST
52728: PUSH
52729: LD_INT 1
52731: PUSH
52732: LD_INT 1
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 1
52742: PUSH
52743: LD_INT 2
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 0
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: PUSH
52774: LD_INT 3
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: LD_INT 3
52786: PUSH
52787: EMPTY
52788: LIST
52789: LIST
52790: PUSH
52791: LD_INT 1
52793: NEG
52794: PUSH
52795: LD_INT 2
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: LIST
52812: LIST
52813: LIST
52814: LIST
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52820: LD_ADDR_VAR 0 12
52824: PUSH
52825: LD_INT 0
52827: PUSH
52828: LD_INT 0
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 0
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: LD_INT 1
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 1
52878: NEG
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: EMPTY
52896: LIST
52897: LIST
52898: PUSH
52899: LD_INT 1
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: LD_INT 0
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: LD_INT 1
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 1
52932: NEG
52933: PUSH
52934: LD_INT 1
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: LD_INT 0
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: PUSH
52952: LD_INT 2
52954: NEG
52955: PUSH
52956: LD_INT 1
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 2
52966: NEG
52967: PUSH
52968: LD_INT 1
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 3
52977: NEG
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 3
52988: NEG
52989: PUSH
52990: LD_INT 1
52992: NEG
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: LIST
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53016: LD_ADDR_VAR 0 13
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: LD_INT 0
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: LD_INT 1
53036: NEG
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 1
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: LD_INT 1
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: LD_INT 0
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: NEG
53086: PUSH
53087: LD_INT 1
53089: NEG
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: PUSH
53095: LD_INT 1
53097: NEG
53098: PUSH
53099: LD_INT 2
53101: NEG
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 2
53109: PUSH
53110: LD_INT 1
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 1
53129: PUSH
53130: LD_INT 2
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 2
53139: NEG
53140: PUSH
53141: LD_INT 1
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 2
53151: NEG
53152: PUSH
53153: LD_INT 2
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: LD_INT 3
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 3
53175: NEG
53176: PUSH
53177: LD_INT 2
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 3
53187: NEG
53188: PUSH
53189: LD_INT 3
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: LIST
53204: LIST
53205: LIST
53206: LIST
53207: LIST
53208: LIST
53209: LIST
53210: LIST
53211: LIST
53212: LIST
53213: LIST
53214: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53215: LD_ADDR_VAR 0 14
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: LD_INT 0
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: LD_INT 1
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 0
53246: PUSH
53247: EMPTY
53248: LIST
53249: LIST
53250: PUSH
53251: LD_INT 1
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 0
53263: PUSH
53264: LD_INT 1
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 1
53284: NEG
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 2
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 0
53308: PUSH
53309: LD_INT 2
53311: NEG
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: LD_INT 1
53322: NEG
53323: PUSH
53324: EMPTY
53325: LIST
53326: LIST
53327: PUSH
53328: LD_INT 1
53330: PUSH
53331: LD_INT 2
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 1
53350: NEG
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: NEG
53362: PUSH
53363: LD_INT 3
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 3
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: LD_INT 2
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: LIST
53402: LIST
53403: LIST
53404: LIST
53405: LIST
53406: LIST
53407: LIST
53408: LIST
53409: LIST
53410: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53411: LD_ADDR_VAR 0 15
53415: PUSH
53416: LD_INT 0
53418: PUSH
53419: LD_INT 0
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 0
53428: PUSH
53429: LD_INT 1
53431: NEG
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 1
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 0
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: LD_INT 1
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: LD_INT 1
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 2
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 2
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: EMPTY
53529: LIST
53530: LIST
53531: PUSH
53532: LD_INT 2
53534: NEG
53535: PUSH
53536: LD_INT 0
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: LD_INT 1
53549: NEG
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: PUSH
53569: LD_INT 0
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 3
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53604: LD_ADDR_VAR 0 16
53608: PUSH
53609: LD_INT 0
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: EMPTY
53616: LIST
53617: LIST
53618: PUSH
53619: LD_INT 0
53621: PUSH
53622: LD_INT 1
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 1
53632: PUSH
53633: LD_INT 0
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: EMPTY
53647: LIST
53648: LIST
53649: PUSH
53650: LD_INT 0
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: LD_INT 2
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: LD_INT 2
53720: PUSH
53721: EMPTY
53722: LIST
53723: LIST
53724: PUSH
53725: LD_INT 2
53727: NEG
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 3
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 3
53761: PUSH
53762: LD_INT 3
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: LD_INT 3
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53797: LD_ADDR_VAR 0 17
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: LD_INT 0
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 1
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 0
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: NEG
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: NEG
53974: PUSH
53975: LD_INT 0
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 2
53984: NEG
53985: PUSH
53986: LD_INT 1
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: LD_INT 2
54000: NEG
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54027: LD_ADDR_VAR 0 18
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 0
54044: PUSH
54045: LD_INT 1
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: LD_INT 1
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 0
54075: PUSH
54076: LD_INT 1
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: LD_INT 0
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 1
54096: NEG
54097: PUSH
54098: LD_INT 1
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 1
54108: NEG
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 2
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: LD_INT 1
54134: NEG
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: LD_INT 0
54145: PUSH
54146: EMPTY
54147: LIST
54148: LIST
54149: PUSH
54150: LD_INT 2
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: PUSH
54163: LD_INT 2
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: LD_INT 2
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: LD_INT 2
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 2
54203: NEG
54204: PUSH
54205: LD_INT 0
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: LD_INT 1
54218: NEG
54219: PUSH
54220: EMPTY
54221: LIST
54222: LIST
54223: PUSH
54224: LD_INT 2
54226: NEG
54227: PUSH
54228: LD_INT 2
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54257: LD_ADDR_VAR 0 19
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: NEG
54339: PUSH
54340: LD_INT 2
54342: NEG
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 0
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 2
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 2
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 2
54392: PUSH
54393: LD_INT 2
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: LD_INT 2
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: LD_INT 1
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 2
54433: NEG
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 2
54444: NEG
54445: PUSH
54446: LD_INT 1
54448: NEG
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 2
54456: NEG
54457: PUSH
54458: LD_INT 2
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54487: LD_ADDR_VAR 0 20
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 0
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 0
54504: PUSH
54505: LD_INT 1
54507: NEG
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: LD_INT 1
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 1
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 1
54556: NEG
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: LD_INT 2
54572: NEG
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: LD_INT 2
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: LD_INT 1
54594: NEG
54595: PUSH
54596: EMPTY
54597: LIST
54598: LIST
54599: PUSH
54600: LD_INT 2
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: EMPTY
54607: LIST
54608: LIST
54609: PUSH
54610: LD_INT 2
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: PUSH
54623: LD_INT 2
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: NEG
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 2
54686: NEG
54687: PUSH
54688: LD_INT 2
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54717: LD_ADDR_VAR 0 21
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 0
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 0
54734: PUSH
54735: LD_INT 1
54737: NEG
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: PUSH
54746: LD_INT 0
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: LD_INT 1
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 0
54765: PUSH
54766: LD_INT 1
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 1
54775: NEG
54776: PUSH
54777: LD_INT 0
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 1
54790: NEG
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: NEG
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 0
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 1
54882: NEG
54883: PUSH
54884: LD_INT 1
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 2
54893: NEG
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: LD_INT 2
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54947: LD_ADDR_VAR 0 22
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 0
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 1
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 1
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: NEG
55006: PUSH
55007: LD_INT 0
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 1
55028: NEG
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: LD_INT 2
55043: NEG
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: PUSH
55083: LD_INT 2
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 2
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: LD_INT 2
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 1
55112: NEG
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 2
55134: NEG
55135: PUSH
55136: LD_INT 1
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: LD_INT 2
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55177: LD_ADDR_VAR 0 23
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: NEG
55259: PUSH
55260: LD_INT 2
55262: NEG
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 0
55270: PUSH
55271: LD_INT 2
55273: NEG
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: PUSH
55282: LD_INT 1
55284: NEG
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 2
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 2
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: LD_INT 2
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 1
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 2
55353: NEG
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: LD_INT 2
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: LD_INT 3
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: LD_INT 3
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: LD_INT 1
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
55457: LD_ADDR_VAR 0 24
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 0
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 1
55477: NEG
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 1
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: NEG
55527: PUSH
55528: LD_INT 1
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 1
55538: NEG
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: LD_INT 2
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 1
55561: PUSH
55562: LD_INT 1
55564: NEG
55565: PUSH
55566: EMPTY
55567: LIST
55568: LIST
55569: PUSH
55570: LD_INT 2
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: PUSH
55583: LD_INT 1
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 2
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: PUSH
55603: LD_INT 2
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 0
55612: PUSH
55613: LD_INT 2
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 1
55622: NEG
55623: PUSH
55624: LD_INT 1
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 2
55633: NEG
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: NEG
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: LD_INT 2
55660: NEG
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 1
55668: PUSH
55669: LD_INT 2
55671: NEG
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 2
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 3
55690: PUSH
55691: LD_INT 1
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 3
55700: PUSH
55701: LD_INT 2
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
55733: LD_ADDR_VAR 0 25
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 1
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: NEG
55792: PUSH
55793: LD_INT 0
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 1
55806: NEG
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 1
55814: NEG
55815: PUSH
55816: LD_INT 2
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 0
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 2
55858: PUSH
55859: LD_INT 1
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 1
55878: PUSH
55879: LD_INT 2
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 0
55888: PUSH
55889: LD_INT 2
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: PUSH
55896: LD_INT 1
55898: NEG
55899: PUSH
55900: LD_INT 1
55902: PUSH
55903: EMPTY
55904: LIST
55905: LIST
55906: PUSH
55907: LD_INT 2
55909: NEG
55910: PUSH
55911: LD_INT 0
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 2
55920: NEG
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 2
55932: NEG
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 3
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 3
55954: PUSH
55955: LD_INT 2
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 3
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 1
55974: PUSH
55975: LD_INT 3
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56007: LD_ADDR_VAR 0 26
56011: PUSH
56012: LD_INT 0
56014: PUSH
56015: LD_INT 0
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: LD_INT 1
56027: NEG
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: LD_INT 1
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 1
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 1
56065: NEG
56066: PUSH
56067: LD_INT 0
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 1
56076: NEG
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: NEG
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: LD_INT 2
56103: NEG
56104: PUSH
56105: EMPTY
56106: LIST
56107: LIST
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: LD_INT 1
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 2
56122: PUSH
56123: LD_INT 0
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: LD_INT 2
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 1
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: PUSH
56219: LD_INT 3
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: LD_INT 1
56228: PUSH
56229: LD_INT 3
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: LD_INT 2
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: LD_INT 1
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: EMPTY
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56283: LD_ADDR_VAR 0 27
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 1
56303: NEG
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 1
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 0
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: NEG
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 1
56352: NEG
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: LD_INT 2
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: LD_INT 2
56379: NEG
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 2
56398: PUSH
56399: LD_INT 0
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 2
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 2
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 1
56428: PUSH
56429: LD_INT 2
56431: PUSH
56432: EMPTY
56433: LIST
56434: LIST
56435: PUSH
56436: LD_INT 0
56438: PUSH
56439: LD_INT 2
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: NEG
56460: PUSH
56461: LD_INT 0
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 2
56470: NEG
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 2
56482: NEG
56483: PUSH
56484: LD_INT 2
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 1
56494: NEG
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 2
56505: NEG
56506: PUSH
56507: LD_INT 1
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 3
56516: NEG
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 3
56528: NEG
56529: PUSH
56530: LD_INT 2
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: LIST
56557: LIST
56558: LIST
56559: LIST
56560: LIST
56561: LIST
56562: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
56563: LD_ADDR_VAR 0 28
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 0
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: LD_INT 1
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 1
56591: PUSH
56592: LD_INT 0
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: LD_INT 1
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 0
56625: PUSH
56626: EMPTY
56627: LIST
56628: LIST
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: NEG
56645: PUSH
56646: LD_INT 2
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 2
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 2
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 2
56698: PUSH
56699: LD_INT 2
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: LD_INT 2
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: LD_INT 2
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 2
56739: NEG
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 2
56750: NEG
56751: PUSH
56752: LD_INT 1
56754: NEG
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 2
56762: NEG
56763: PUSH
56764: LD_INT 2
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: NEG
56775: PUSH
56776: LD_INT 3
56778: NEG
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 3
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 3
56798: NEG
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: EMPTY
56805: LIST
56806: LIST
56807: PUSH
56808: LD_INT 3
56810: NEG
56811: PUSH
56812: LD_INT 2
56814: NEG
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: EMPTY
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
56845: LD_ADDR_VAR 0 29
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 0
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 0
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 1
56903: NEG
56904: PUSH
56905: LD_INT 0
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: NEG
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 1
56926: NEG
56927: PUSH
56928: LD_INT 2
56930: NEG
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 0
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 0
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: LD_INT 1
57015: NEG
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 2
57023: NEG
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 2
57035: NEG
57036: PUSH
57037: LD_INT 3
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 3
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: LD_INT 2
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 3
57089: NEG
57090: PUSH
57091: LD_INT 2
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57124: LD_ADDR_VAR 0 30
57128: PUSH
57129: LD_INT 0
57131: PUSH
57132: LD_INT 0
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: LD_INT 1
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: LD_INT 1
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: NEG
57194: PUSH
57195: LD_INT 1
57197: NEG
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: NEG
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 0
57217: PUSH
57218: LD_INT 2
57220: NEG
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 2
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: LD_INT 1
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: LD_INT 2
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 1
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: LD_INT 1
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 2
57290: NEG
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 1
57313: NEG
57314: PUSH
57315: LD_INT 3
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: LD_INT 1
57325: PUSH
57326: LD_INT 2
57328: NEG
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 3
57336: PUSH
57337: LD_INT 2
57339: PUSH
57340: EMPTY
57341: LIST
57342: LIST
57343: PUSH
57344: LD_INT 2
57346: PUSH
57347: LD_INT 3
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 2
57356: NEG
57357: PUSH
57358: LD_INT 1
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 3
57367: NEG
57368: PUSH
57369: LD_INT 1
57371: NEG
57372: PUSH
57373: EMPTY
57374: LIST
57375: LIST
57376: PUSH
57377: EMPTY
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57402: LD_ADDR_VAR 0 31
57406: PUSH
57407: LD_INT 0
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 1
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 1
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: NEG
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: NEG
57484: PUSH
57485: LD_INT 2
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 1
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 2
57516: PUSH
57517: LD_INT 1
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: PUSH
57527: LD_INT 2
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 2
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 0
57546: PUSH
57547: LD_INT 2
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: NEG
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: NEG
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: EMPTY
57574: LIST
57575: LIST
57576: PUSH
57577: LD_INT 2
57579: NEG
57580: PUSH
57581: LD_INT 2
57583: NEG
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 2
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 3
57614: PUSH
57615: LD_INT 1
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 3
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: NEG
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 3
57645: NEG
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57680: LD_ADDR_VAR 0 32
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: LD_INT 0
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 0
57697: PUSH
57698: LD_INT 1
57700: NEG
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 1
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 1
57718: PUSH
57719: LD_INT 1
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 1
57738: NEG
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: LD_INT 2
57765: NEG
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: PUSH
57771: LD_INT 0
57773: PUSH
57774: LD_INT 2
57776: NEG
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 2
57795: PUSH
57796: LD_INT 1
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: LD_INT 2
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: LD_INT 2
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: LD_INT 2
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 2
57846: NEG
57847: PUSH
57848: LD_INT 0
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 2
57857: NEG
57858: PUSH
57859: LD_INT 1
57861: NEG
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 1
57869: NEG
57870: PUSH
57871: LD_INT 3
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: LD_INT 3
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 3
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 2
57912: NEG
57913: PUSH
57914: LD_INT 1
57916: PUSH
57917: EMPTY
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 3
57923: NEG
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57958: LD_ADDR_VAR 0 33
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 0
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 0
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 0
58006: PUSH
58007: LD_INT 1
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: LD_INT 0
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 1
58027: NEG
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 1
58039: NEG
58040: PUSH
58041: LD_INT 2
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 1
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 2
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 2
58072: PUSH
58073: LD_INT 1
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: PUSH
58080: LD_INT 1
58082: PUSH
58083: LD_INT 2
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 0
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: LD_INT 1
58102: NEG
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 2
58124: NEG
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 2
58148: NEG
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: LD_INT 3
58171: PUSH
58172: LD_INT 1
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 1
58181: PUSH
58182: LD_INT 3
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 2
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 3
58202: NEG
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58237: LD_ADDR_VAR 0 34
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: LD_INT 0
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 1
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 0
58285: PUSH
58286: LD_INT 1
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: NEG
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: EMPTY
58313: LIST
58314: LIST
58315: PUSH
58316: LD_INT 1
58318: NEG
58319: PUSH
58320: LD_INT 2
58322: NEG
58323: PUSH
58324: EMPTY
58325: LIST
58326: LIST
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: LD_INT 2
58333: NEG
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 2
58352: PUSH
58353: LD_INT 1
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 2
58362: PUSH
58363: LD_INT 2
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: LD_INT 2
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: LD_INT 1
58386: PUSH
58387: EMPTY
58388: LIST
58389: LIST
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: LD_INT 0
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 2
58404: NEG
58405: PUSH
58406: LD_INT 1
58408: NEG
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 2
58416: NEG
58417: PUSH
58418: LD_INT 2
58420: NEG
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 3
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: PUSH
58441: LD_INT 2
58443: NEG
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 3
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 2
58461: PUSH
58462: LD_INT 3
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 2
58471: NEG
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 3
58482: NEG
58483: PUSH
58484: LD_INT 1
58486: NEG
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58517: LD_ADDR_VAR 0 35
58521: PUSH
58522: LD_INT 0
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 0
58534: PUSH
58535: LD_INT 1
58537: NEG
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 1
58545: PUSH
58546: LD_INT 0
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: PUSH
58556: LD_INT 1
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 0
58565: PUSH
58566: LD_INT 1
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: LD_INT 0
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 1
58590: NEG
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 2
58608: NEG
58609: PUSH
58610: LD_INT 1
58612: NEG
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: LIST
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58629: LD_ADDR_VAR 0 36
58633: PUSH
58634: LD_INT 0
58636: PUSH
58637: LD_INT 0
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: PUSH
58644: LD_INT 0
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: LD_INT 1
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 1
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 1
58687: NEG
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: NEG
58699: PUSH
58700: LD_INT 1
58702: NEG
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 2
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
58741: LD_ADDR_VAR 0 37
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: LD_INT 0
58751: PUSH
58752: EMPTY
58753: LIST
58754: LIST
58755: PUSH
58756: LD_INT 0
58758: PUSH
58759: LD_INT 1
58761: NEG
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: PUSH
58770: LD_INT 0
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: LD_INT 1
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: LD_INT 1
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: LD_INT 0
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: LD_INT 1
58810: NEG
58811: PUSH
58812: LD_INT 1
58814: NEG
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: PUSH
58820: LD_INT 1
58822: PUSH
58823: LD_INT 1
58825: NEG
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: LD_INT 1
58833: NEG
58834: PUSH
58835: LD_INT 1
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
58853: LD_ADDR_VAR 0 38
58857: PUSH
58858: LD_INT 0
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: PUSH
58882: LD_INT 0
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: LD_INT 1
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 0
58901: PUSH
58902: LD_INT 1
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 0
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 1
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: LD_INT 2
58934: PUSH
58935: LD_INT 1
58937: PUSH
58938: EMPTY
58939: LIST
58940: LIST
58941: PUSH
58942: LD_INT 2
58944: NEG
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
58965: LD_ADDR_VAR 0 39
58969: PUSH
58970: LD_INT 0
58972: PUSH
58973: LD_INT 0
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 1
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: LD_INT 1
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 1
59023: NEG
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 1
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: LD_INT 2
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59077: LD_ADDR_VAR 0 40
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 1
59169: NEG
59170: PUSH
59171: LD_INT 1
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: LIST
59184: LIST
59185: LIST
59186: LIST
59187: LIST
59188: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59189: LD_ADDR_VAR 0 41
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 0
59206: PUSH
59207: LD_INT 1
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 1
59217: PUSH
59218: LD_INT 0
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 1
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 1
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 1
59247: NEG
59248: PUSH
59249: LD_INT 0
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 1
59258: NEG
59259: PUSH
59260: LD_INT 1
59262: NEG
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PUSH
59268: LD_INT 1
59270: NEG
59271: PUSH
59272: LD_INT 2
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 1
59282: PUSH
59283: LD_INT 1
59285: NEG
59286: PUSH
59287: EMPTY
59288: LIST
59289: LIST
59290: PUSH
59291: LD_INT 2
59293: PUSH
59294: LD_INT 0
59296: PUSH
59297: EMPTY
59298: LIST
59299: LIST
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: LD_INT 1
59306: PUSH
59307: EMPTY
59308: LIST
59309: LIST
59310: PUSH
59311: LD_INT 2
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: LD_INT 2
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 1
59333: NEG
59334: PUSH
59335: LD_INT 1
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 2
59344: NEG
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: NEG
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 2
59367: NEG
59368: PUSH
59369: LD_INT 2
59371: NEG
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 2
59379: NEG
59380: PUSH
59381: LD_INT 3
59383: NEG
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: PUSH
59389: LD_INT 2
59391: PUSH
59392: LD_INT 1
59394: NEG
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 3
59402: PUSH
59403: LD_INT 0
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 3
59412: PUSH
59413: LD_INT 1
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 3
59422: PUSH
59423: LD_INT 2
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 3
59432: PUSH
59433: LD_INT 3
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 3
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 2
59452: NEG
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: LD_INT 0
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 3
59474: NEG
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 3
59486: NEG
59487: PUSH
59488: LD_INT 2
59490: NEG
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 3
59498: NEG
59499: PUSH
59500: LD_INT 3
59502: NEG
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59539: LD_ADDR_VAR 0 42
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: LD_INT 0
59549: PUSH
59550: EMPTY
59551: LIST
59552: LIST
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: LD_INT 1
59559: NEG
59560: PUSH
59561: EMPTY
59562: LIST
59563: LIST
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: LD_INT 0
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: LD_INT 1
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 0
59587: PUSH
59588: LD_INT 1
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 1
59597: NEG
59598: PUSH
59599: LD_INT 0
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: LD_INT 1
59612: NEG
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: PUSH
59618: LD_INT 1
59620: NEG
59621: PUSH
59622: LD_INT 2
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 2
59635: NEG
59636: PUSH
59637: EMPTY
59638: LIST
59639: LIST
59640: PUSH
59641: LD_INT 1
59643: PUSH
59644: LD_INT 1
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 2
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: PUSH
59662: LD_INT 2
59664: PUSH
59665: LD_INT 2
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: LD_INT 2
59677: PUSH
59678: EMPTY
59679: LIST
59680: LIST
59681: PUSH
59682: LD_INT 0
59684: PUSH
59685: LD_INT 2
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: LD_INT 1
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 2
59717: NEG
59718: PUSH
59719: LD_INT 2
59721: NEG
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: LD_INT 3
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 1
59741: NEG
59742: PUSH
59743: LD_INT 3
59745: NEG
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: PUSH
59751: LD_INT 0
59753: PUSH
59754: LD_INT 3
59756: NEG
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 1
59764: PUSH
59765: LD_INT 2
59767: NEG
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 3
59775: PUSH
59776: LD_INT 2
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 3
59785: PUSH
59786: LD_INT 3
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 2
59795: PUSH
59796: LD_INT 3
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 3
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: LD_INT 3
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: LD_INT 2
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 3
59836: NEG
59837: PUSH
59838: LD_INT 2
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 3
59848: NEG
59849: PUSH
59850: LD_INT 3
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: LIST
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59889: LD_ADDR_VAR 0 43
59893: PUSH
59894: LD_INT 0
59896: PUSH
59897: LD_INT 0
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 0
59906: PUSH
59907: LD_INT 1
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: PUSH
59918: LD_INT 0
59920: PUSH
59921: EMPTY
59922: LIST
59923: LIST
59924: PUSH
59925: LD_INT 1
59927: PUSH
59928: LD_INT 1
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 0
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: NEG
59948: PUSH
59949: LD_INT 0
59951: PUSH
59952: EMPTY
59953: LIST
59954: LIST
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: PUSH
59968: LD_INT 1
59970: NEG
59971: PUSH
59972: LD_INT 2
59974: NEG
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 0
59982: PUSH
59983: LD_INT 2
59985: NEG
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 1
59993: PUSH
59994: LD_INT 1
59996: NEG
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 2
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 2
60014: PUSH
60015: LD_INT 1
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: PUSH
60025: LD_INT 2
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 1
60044: NEG
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 2
60055: NEG
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 2
60066: NEG
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: LD_INT 3
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: LD_INT 3
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: LD_INT 2
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 3
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 3
60133: PUSH
60134: LD_INT 1
60136: PUSH
60137: EMPTY
60138: LIST
60139: LIST
60140: PUSH
60141: LD_INT 1
60143: PUSH
60144: LD_INT 3
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 0
60153: PUSH
60154: LD_INT 3
60156: PUSH
60157: EMPTY
60158: LIST
60159: LIST
60160: PUSH
60161: LD_INT 1
60163: NEG
60164: PUSH
60165: LD_INT 2
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 2
60174: NEG
60175: PUSH
60176: LD_INT 1
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 3
60185: NEG
60186: PUSH
60187: LD_INT 0
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 3
60196: NEG
60197: PUSH
60198: LD_INT 1
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60237: LD_ADDR_VAR 0 44
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: LD_INT 1
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: LD_INT 0
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 1
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 0
60285: PUSH
60286: LD_INT 1
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 1
60295: NEG
60296: PUSH
60297: LD_INT 0
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: LD_INT 1
60310: NEG
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: LD_INT 1
60318: NEG
60319: PUSH
60320: LD_INT 2
60322: NEG
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 1
60330: PUSH
60331: LD_INT 1
60333: NEG
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 2
60341: PUSH
60342: LD_INT 0
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: PUSH
60352: LD_INT 1
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: PUSH
60359: LD_INT 2
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 1
60381: NEG
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 2
60392: NEG
60393: PUSH
60394: LD_INT 0
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 2
60403: NEG
60404: PUSH
60405: LD_INT 1
60407: NEG
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 2
60415: NEG
60416: PUSH
60417: LD_INT 2
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: LD_INT 3
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 2
60439: PUSH
60440: LD_INT 1
60442: NEG
60443: PUSH
60444: EMPTY
60445: LIST
60446: LIST
60447: PUSH
60448: LD_INT 3
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 3
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 3
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: EMPTY
60475: LIST
60476: LIST
60477: PUSH
60478: LD_INT 3
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 2
60490: PUSH
60491: LD_INT 3
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 2
60500: NEG
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 3
60511: NEG
60512: PUSH
60513: LD_INT 0
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: PUSH
60520: LD_INT 3
60522: NEG
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 3
60534: NEG
60535: PUSH
60536: LD_INT 2
60538: NEG
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 3
60546: NEG
60547: PUSH
60548: LD_INT 3
60550: NEG
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60587: LD_ADDR_VAR 0 45
60591: PUSH
60592: LD_INT 0
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: LD_INT 1
60607: NEG
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: PUSH
60613: LD_INT 1
60615: PUSH
60616: LD_INT 0
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: LD_INT 1
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 0
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: LD_INT 0
60649: PUSH
60650: EMPTY
60651: LIST
60652: LIST
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: LD_INT 1
60660: NEG
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 1
60668: NEG
60669: PUSH
60670: LD_INT 2
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: LD_INT 2
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 2
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 2
60712: PUSH
60713: LD_INT 2
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: LD_INT 2
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 0
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: LD_INT 2
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 2
60777: NEG
60778: PUSH
60779: LD_INT 3
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: LD_INT 3
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 0
60801: PUSH
60802: LD_INT 3
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 1
60812: PUSH
60813: LD_INT 2
60815: NEG
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 3
60823: PUSH
60824: LD_INT 2
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 3
60833: PUSH
60834: LD_INT 3
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: PUSH
60844: LD_INT 3
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 3
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: LD_INT 3
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 1
60873: NEG
60874: PUSH
60875: LD_INT 2
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 3
60884: NEG
60885: PUSH
60886: LD_INT 2
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 3
60896: NEG
60897: PUSH
60898: LD_INT 3
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: LIST
60910: LIST
60911: LIST
60912: LIST
60913: LIST
60914: LIST
60915: LIST
60916: LIST
60917: LIST
60918: LIST
60919: LIST
60920: LIST
60921: LIST
60922: LIST
60923: LIST
60924: LIST
60925: LIST
60926: LIST
60927: LIST
60928: LIST
60929: LIST
60930: LIST
60931: LIST
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60937: LD_ADDR_VAR 0 46
60941: PUSH
60942: LD_INT 0
60944: PUSH
60945: LD_INT 0
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 0
60954: PUSH
60955: LD_INT 1
60957: NEG
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 1
60965: PUSH
60966: LD_INT 0
60968: PUSH
60969: EMPTY
60970: LIST
60971: LIST
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: LD_INT 1
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: LD_INT 1
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 1
61018: NEG
61019: PUSH
61020: LD_INT 2
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 0
61030: PUSH
61031: LD_INT 2
61033: NEG
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 1
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: PUSH
61053: LD_INT 0
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 2
61062: PUSH
61063: LD_INT 1
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 0
61082: PUSH
61083: LD_INT 2
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 1
61092: NEG
61093: PUSH
61094: LD_INT 1
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: LD_INT 0
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 2
61114: NEG
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 1
61126: NEG
61127: PUSH
61128: LD_INT 3
61130: NEG
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 3
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: LD_INT 2
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 2
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: LD_INT 3
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 3
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 1
61191: PUSH
61192: LD_INT 3
61194: PUSH
61195: EMPTY
61196: LIST
61197: LIST
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: LD_INT 3
61204: PUSH
61205: EMPTY
61206: LIST
61207: LIST
61208: PUSH
61209: LD_INT 1
61211: NEG
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 2
61222: NEG
61223: PUSH
61224: LD_INT 1
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 3
61233: NEG
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 3
61244: NEG
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: LIST
61258: LIST
61259: LIST
61260: LIST
61261: LIST
61262: LIST
61263: LIST
61264: LIST
61265: LIST
61266: LIST
61267: LIST
61268: LIST
61269: LIST
61270: LIST
61271: LIST
61272: LIST
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61285: LD_ADDR_VAR 0 47
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: NEG
61401: PUSH
61402: LD_INT 1
61404: NEG
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 2
61412: NEG
61413: PUSH
61414: LD_INT 2
61416: NEG
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: LIST
61426: LIST
61427: LIST
61428: LIST
61429: LIST
61430: LIST
61431: LIST
61432: LIST
61433: LIST
61434: LIST
61435: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61436: LD_ADDR_VAR 0 48
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: LD_INT 0
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 0
61453: PUSH
61454: LD_INT 1
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: LD_INT 0
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 1
61474: PUSH
61475: LD_INT 1
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 0
61484: PUSH
61485: LD_INT 1
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: LD_INT 0
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: LD_INT 1
61505: NEG
61506: PUSH
61507: LD_INT 1
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: PUSH
61519: LD_INT 2
61521: NEG
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 0
61529: PUSH
61530: LD_INT 2
61532: NEG
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: PUSH
61541: LD_INT 1
61543: NEG
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 2
61551: PUSH
61552: LD_INT 0
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 2
61561: PUSH
61562: LD_INT 1
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: LIST
61581: LIST
61582: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61583: LD_ADDR_VAR 0 49
61587: PUSH
61588: LD_INT 0
61590: PUSH
61591: LD_INT 0
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 0
61600: PUSH
61601: LD_INT 1
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: LD_INT 0
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 1
61621: PUSH
61622: LD_INT 1
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: LD_INT 1
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 1
61652: NEG
61653: PUSH
61654: LD_INT 1
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 2
61675: PUSH
61676: LD_INT 0
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 2
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: LD_INT 2
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 1
61705: PUSH
61706: LD_INT 2
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61727: LD_ADDR_VAR 0 50
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: LD_INT 0
61737: PUSH
61738: EMPTY
61739: LIST
61740: LIST
61741: PUSH
61742: LD_INT 0
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: LD_INT 0
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 0
61775: PUSH
61776: LD_INT 1
61778: PUSH
61779: EMPTY
61780: LIST
61781: LIST
61782: PUSH
61783: LD_INT 1
61785: NEG
61786: PUSH
61787: LD_INT 0
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: LD_INT 1
61796: NEG
61797: PUSH
61798: LD_INT 1
61800: NEG
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 2
61808: PUSH
61809: LD_INT 1
61811: PUSH
61812: EMPTY
61813: LIST
61814: LIST
61815: PUSH
61816: LD_INT 2
61818: PUSH
61819: LD_INT 2
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 2
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 2
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61871: LD_ADDR_VAR 0 51
61875: PUSH
61876: LD_INT 0
61878: PUSH
61879: LD_INT 0
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 0
61888: PUSH
61889: LD_INT 1
61891: NEG
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 1
61899: PUSH
61900: LD_INT 0
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: LD_INT 1
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: LD_INT 0
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 1
61940: NEG
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 1
61952: PUSH
61953: LD_INT 2
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 0
61962: PUSH
61963: LD_INT 2
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: PUSH
61981: LD_INT 2
61983: NEG
61984: PUSH
61985: LD_INT 0
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 2
61994: NEG
61995: PUSH
61996: LD_INT 1
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: LIST
62008: LIST
62009: LIST
62010: LIST
62011: LIST
62012: LIST
62013: LIST
62014: LIST
62015: LIST
62016: LIST
62017: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62018: LD_ADDR_VAR 0 52
62022: PUSH
62023: LD_INT 0
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: LD_INT 1
62038: NEG
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 1
62046: PUSH
62047: LD_INT 0
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 1
62056: PUSH
62057: LD_INT 1
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 0
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: LD_INT 1
62091: NEG
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 1
62099: NEG
62100: PUSH
62101: LD_INT 2
62103: NEG
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 1
62111: NEG
62112: PUSH
62113: LD_INT 1
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 2
62122: NEG
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 2
62133: NEG
62134: PUSH
62135: LD_INT 1
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 2
62145: NEG
62146: PUSH
62147: LD_INT 2
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62169: LD_ADDR_VAR 0 53
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: LD_INT 2
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: LD_INT 0
62287: PUSH
62288: EMPTY
62289: LIST
62290: LIST
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: LD_INT 1
62297: PUSH
62298: EMPTY
62299: LIST
62300: LIST
62301: PUSH
62302: LD_INT 2
62304: PUSH
62305: LD_INT 2
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: PUSH
62315: LD_INT 2
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: LD_INT 2
62327: PUSH
62328: EMPTY
62329: LIST
62330: LIST
62331: PUSH
62332: LD_INT 1
62334: NEG
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 2
62345: NEG
62346: PUSH
62347: LD_INT 0
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: LD_INT 1
62360: NEG
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 2
62368: NEG
62369: PUSH
62370: LD_INT 2
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: LIST
62382: LIST
62383: LIST
62384: LIST
62385: LIST
62386: LIST
62387: LIST
62388: LIST
62389: LIST
62390: LIST
62391: LIST
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62399: LD_ADDR_VAR 0 54
62403: PUSH
62404: LD_INT 0
62406: PUSH
62407: LD_INT 0
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: LD_INT 1
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 1
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: LD_INT 1
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 1
62457: NEG
62458: PUSH
62459: LD_INT 0
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 1
62468: NEG
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 1
62480: NEG
62481: PUSH
62482: LD_INT 2
62484: NEG
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: LD_INT 2
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 1
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: LD_INT 2
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 1
62544: PUSH
62545: LD_INT 2
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: LD_INT 2
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: NEG
62565: PUSH
62566: LD_INT 1
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: LD_INT 2
62575: NEG
62576: PUSH
62577: LD_INT 0
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: PUSH
62584: LD_INT 2
62586: NEG
62587: PUSH
62588: LD_INT 1
62590: NEG
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: NEG
62599: PUSH
62600: LD_INT 2
62602: NEG
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62629: LD_ADDR_VAR 0 55
62633: PUSH
62634: LD_INT 0
62636: PUSH
62637: LD_INT 0
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 0
62646: PUSH
62647: LD_INT 1
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 1
62657: PUSH
62658: LD_INT 0
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 1
62667: PUSH
62668: LD_INT 1
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 0
62677: PUSH
62678: LD_INT 1
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: LD_INT 1
62687: NEG
62688: PUSH
62689: LD_INT 0
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 1
62698: NEG
62699: PUSH
62700: LD_INT 1
62702: NEG
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 1
62710: NEG
62711: PUSH
62712: LD_INT 2
62714: NEG
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 2
62725: NEG
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 1
62733: PUSH
62734: LD_INT 1
62736: NEG
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 2
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 2
62764: PUSH
62765: LD_INT 2
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 1
62774: PUSH
62775: LD_INT 2
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: LD_INT 2
62787: PUSH
62788: EMPTY
62789: LIST
62790: LIST
62791: PUSH
62792: LD_INT 1
62794: NEG
62795: PUSH
62796: LD_INT 1
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 2
62805: NEG
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 2
62816: NEG
62817: PUSH
62818: LD_INT 1
62820: NEG
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 2
62828: NEG
62829: PUSH
62830: LD_INT 2
62832: NEG
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62859: LD_ADDR_VAR 0 56
62863: PUSH
62864: LD_INT 0
62866: PUSH
62867: LD_INT 0
62869: PUSH
62870: EMPTY
62871: LIST
62872: LIST
62873: PUSH
62874: LD_INT 0
62876: PUSH
62877: LD_INT 1
62879: NEG
62880: PUSH
62881: EMPTY
62882: LIST
62883: LIST
62884: PUSH
62885: LD_INT 1
62887: PUSH
62888: LD_INT 0
62890: PUSH
62891: EMPTY
62892: LIST
62893: LIST
62894: PUSH
62895: LD_INT 1
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 0
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 1
62917: NEG
62918: PUSH
62919: LD_INT 0
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 1
62928: NEG
62929: PUSH
62930: LD_INT 1
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: NEG
62941: PUSH
62942: LD_INT 2
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 0
62952: PUSH
62953: LD_INT 2
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 1
62963: PUSH
62964: LD_INT 1
62966: NEG
62967: PUSH
62968: EMPTY
62969: LIST
62970: LIST
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 2
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: PUSH
62992: LD_INT 2
62994: PUSH
62995: LD_INT 2
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 1
63004: PUSH
63005: LD_INT 2
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 0
63014: PUSH
63015: LD_INT 2
63017: PUSH
63018: EMPTY
63019: LIST
63020: LIST
63021: PUSH
63022: LD_INT 1
63024: NEG
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 2
63035: NEG
63036: PUSH
63037: LD_INT 0
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 2
63046: NEG
63047: PUSH
63048: LD_INT 1
63050: NEG
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 2
63058: NEG
63059: PUSH
63060: LD_INT 2
63062: NEG
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: LIST
63077: LIST
63078: LIST
63079: LIST
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63089: LD_ADDR_VAR 0 57
63093: PUSH
63094: LD_INT 0
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 0
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: EMPTY
63112: LIST
63113: LIST
63114: PUSH
63115: LD_INT 1
63117: PUSH
63118: LD_INT 0
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: LD_INT 1
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 0
63137: PUSH
63138: LD_INT 1
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 1
63147: NEG
63148: PUSH
63149: LD_INT 0
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: LD_INT 1
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 1
63170: NEG
63171: PUSH
63172: LD_INT 2
63174: NEG
63175: PUSH
63176: EMPTY
63177: LIST
63178: LIST
63179: PUSH
63180: LD_INT 0
63182: PUSH
63183: LD_INT 2
63185: NEG
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 1
63193: PUSH
63194: LD_INT 1
63196: NEG
63197: PUSH
63198: EMPTY
63199: LIST
63200: LIST
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 2
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: PUSH
63222: LD_INT 2
63224: PUSH
63225: LD_INT 2
63227: PUSH
63228: EMPTY
63229: LIST
63230: LIST
63231: PUSH
63232: LD_INT 1
63234: PUSH
63235: LD_INT 2
63237: PUSH
63238: EMPTY
63239: LIST
63240: LIST
63241: PUSH
63242: LD_INT 0
63244: PUSH
63245: LD_INT 2
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: LD_INT 1
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 2
63265: NEG
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 2
63276: NEG
63277: PUSH
63278: LD_INT 1
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 2
63288: NEG
63289: PUSH
63290: LD_INT 2
63292: NEG
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63319: LD_ADDR_VAR 0 58
63323: PUSH
63324: LD_INT 0
63326: PUSH
63327: LD_INT 0
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PUSH
63334: LD_INT 0
63336: PUSH
63337: LD_INT 1
63339: NEG
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: PUSH
63348: LD_INT 0
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: LD_INT 1
63357: PUSH
63358: LD_INT 1
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: LD_INT 1
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: NEG
63378: PUSH
63379: LD_INT 0
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 1
63388: NEG
63389: PUSH
63390: LD_INT 1
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 1
63400: NEG
63401: PUSH
63402: LD_INT 2
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 0
63412: PUSH
63413: LD_INT 2
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 1
63423: PUSH
63424: LD_INT 1
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 2
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 2
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: EMPTY
63449: LIST
63450: LIST
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: LD_INT 2
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: LD_INT 2
63467: PUSH
63468: EMPTY
63469: LIST
63470: LIST
63471: PUSH
63472: LD_INT 0
63474: PUSH
63475: LD_INT 2
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 1
63484: NEG
63485: PUSH
63486: LD_INT 1
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 2
63495: NEG
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 2
63506: NEG
63507: PUSH
63508: LD_INT 1
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 2
63518: NEG
63519: PUSH
63520: LD_INT 2
63522: NEG
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63549: LD_ADDR_VAR 0 59
63553: PUSH
63554: LD_INT 0
63556: PUSH
63557: LD_INT 0
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 0
63566: PUSH
63567: LD_INT 1
63569: NEG
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: LD_INT 0
63580: PUSH
63581: EMPTY
63582: LIST
63583: LIST
63584: PUSH
63585: LD_INT 1
63587: PUSH
63588: LD_INT 1
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: PUSH
63595: LD_INT 0
63597: PUSH
63598: LD_INT 1
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 1
63607: NEG
63608: PUSH
63609: LD_INT 0
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: LD_INT 1
63618: NEG
63619: PUSH
63620: LD_INT 1
63622: NEG
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63637: LD_ADDR_VAR 0 60
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 1
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 1
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: NEG
63707: PUSH
63708: LD_INT 1
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: EMPTY
63717: LIST
63718: LIST
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: LIST
63724: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63725: LD_ADDR_VAR 0 61
63729: PUSH
63730: LD_INT 0
63732: PUSH
63733: LD_INT 0
63735: PUSH
63736: EMPTY
63737: LIST
63738: LIST
63739: PUSH
63740: LD_INT 0
63742: PUSH
63743: LD_INT 1
63745: NEG
63746: PUSH
63747: EMPTY
63748: LIST
63749: LIST
63750: PUSH
63751: LD_INT 1
63753: PUSH
63754: LD_INT 0
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 1
63763: PUSH
63764: LD_INT 1
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: LD_INT 1
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 1
63783: NEG
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 1
63794: NEG
63795: PUSH
63796: LD_INT 1
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: EMPTY
63805: LIST
63806: LIST
63807: LIST
63808: LIST
63809: LIST
63810: LIST
63811: LIST
63812: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63813: LD_ADDR_VAR 0 62
63817: PUSH
63818: LD_INT 0
63820: PUSH
63821: LD_INT 0
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: LD_INT 1
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 1
63841: PUSH
63842: LD_INT 0
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: LD_INT 1
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: LD_INT 1
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 1
63871: NEG
63872: PUSH
63873: LD_INT 0
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 1
63882: NEG
63883: PUSH
63884: LD_INT 1
63886: NEG
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63901: LD_ADDR_VAR 0 63
63905: PUSH
63906: LD_INT 0
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: EMPTY
63913: LIST
63914: LIST
63915: PUSH
63916: LD_INT 0
63918: PUSH
63919: LD_INT 1
63921: NEG
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PUSH
63927: LD_INT 1
63929: PUSH
63930: LD_INT 0
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: LD_INT 1
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: LD_INT 1
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: LD_INT 0
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 1
63970: NEG
63971: PUSH
63972: LD_INT 1
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
63989: LD_ADDR_VAR 0 64
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: LD_INT 0
63999: PUSH
64000: EMPTY
64001: LIST
64002: LIST
64003: PUSH
64004: LD_INT 0
64006: PUSH
64007: LD_INT 1
64009: NEG
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: LD_INT 0
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: LD_INT 1
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 0
64037: PUSH
64038: LD_INT 1
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: PUSH
64049: LD_INT 0
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: LD_INT 1
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: ST_TO_ADDR
// end ; 1 :
64077: GO 69974
64079: LD_INT 1
64081: DOUBLE
64082: EQUAL
64083: IFTRUE 64087
64085: GO 66710
64087: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64088: LD_ADDR_VAR 0 11
64092: PUSH
64093: LD_INT 1
64095: NEG
64096: PUSH
64097: LD_INT 3
64099: NEG
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 0
64107: PUSH
64108: LD_INT 3
64110: NEG
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: LD_INT 2
64121: NEG
64122: PUSH
64123: EMPTY
64124: LIST
64125: LIST
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: LIST
64131: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64132: LD_ADDR_VAR 0 12
64136: PUSH
64137: LD_INT 2
64139: PUSH
64140: LD_INT 1
64142: NEG
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 3
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 3
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: LIST
64172: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64173: LD_ADDR_VAR 0 13
64177: PUSH
64178: LD_INT 3
64180: PUSH
64181: LD_INT 2
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: LD_INT 3
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 2
64200: PUSH
64201: LD_INT 3
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: LIST
64212: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64213: LD_ADDR_VAR 0 14
64217: PUSH
64218: LD_INT 1
64220: PUSH
64221: LD_INT 3
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 0
64230: PUSH
64231: LD_INT 3
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 1
64240: NEG
64241: PUSH
64242: LD_INT 2
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: LIST
64253: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64254: LD_ADDR_VAR 0 15
64258: PUSH
64259: LD_INT 2
64261: NEG
64262: PUSH
64263: LD_INT 1
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 3
64272: NEG
64273: PUSH
64274: LD_INT 0
64276: PUSH
64277: EMPTY
64278: LIST
64279: LIST
64280: PUSH
64281: LD_INT 3
64283: NEG
64284: PUSH
64285: LD_INT 1
64287: NEG
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: LIST
64297: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64298: LD_ADDR_VAR 0 16
64302: PUSH
64303: LD_INT 2
64305: NEG
64306: PUSH
64307: LD_INT 3
64309: NEG
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 3
64317: NEG
64318: PUSH
64319: LD_INT 2
64321: NEG
64322: PUSH
64323: EMPTY
64324: LIST
64325: LIST
64326: PUSH
64327: LD_INT 3
64329: NEG
64330: PUSH
64331: LD_INT 3
64333: NEG
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: LIST
64343: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64344: LD_ADDR_VAR 0 17
64348: PUSH
64349: LD_INT 1
64351: NEG
64352: PUSH
64353: LD_INT 3
64355: NEG
64356: PUSH
64357: EMPTY
64358: LIST
64359: LIST
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: LD_INT 3
64366: NEG
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 1
64374: PUSH
64375: LD_INT 2
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: LIST
64387: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64388: LD_ADDR_VAR 0 18
64392: PUSH
64393: LD_INT 2
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 3
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 3
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: LIST
64428: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64429: LD_ADDR_VAR 0 19
64433: PUSH
64434: LD_INT 3
64436: PUSH
64437: LD_INT 2
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 3
64446: PUSH
64447: LD_INT 3
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 2
64456: PUSH
64457: LD_INT 3
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: LIST
64468: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64469: LD_ADDR_VAR 0 20
64473: PUSH
64474: LD_INT 1
64476: PUSH
64477: LD_INT 3
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 0
64486: PUSH
64487: LD_INT 3
64489: PUSH
64490: EMPTY
64491: LIST
64492: LIST
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: LD_INT 2
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: LIST
64509: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64510: LD_ADDR_VAR 0 21
64514: PUSH
64515: LD_INT 2
64517: NEG
64518: PUSH
64519: LD_INT 1
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 3
64528: NEG
64529: PUSH
64530: LD_INT 0
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 3
64539: NEG
64540: PUSH
64541: LD_INT 1
64543: NEG
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: LIST
64553: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64554: LD_ADDR_VAR 0 22
64558: PUSH
64559: LD_INT 2
64561: NEG
64562: PUSH
64563: LD_INT 3
64565: NEG
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PUSH
64571: LD_INT 3
64573: NEG
64574: PUSH
64575: LD_INT 2
64577: NEG
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 3
64585: NEG
64586: PUSH
64587: LD_INT 3
64589: NEG
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: LIST
64599: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
64600: LD_ADDR_VAR 0 23
64604: PUSH
64605: LD_INT 0
64607: PUSH
64608: LD_INT 3
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 1
64618: NEG
64619: PUSH
64620: LD_INT 4
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 1
64630: PUSH
64631: LD_INT 3
64633: NEG
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: LIST
64643: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
64644: LD_ADDR_VAR 0 24
64648: PUSH
64649: LD_INT 3
64651: PUSH
64652: LD_INT 0
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 3
64661: PUSH
64662: LD_INT 1
64664: NEG
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 4
64672: PUSH
64673: LD_INT 1
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: EMPTY
64681: LIST
64682: LIST
64683: LIST
64684: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
64685: LD_ADDR_VAR 0 25
64689: PUSH
64690: LD_INT 3
64692: PUSH
64693: LD_INT 3
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 4
64702: PUSH
64703: LD_INT 3
64705: PUSH
64706: EMPTY
64707: LIST
64708: LIST
64709: PUSH
64710: LD_INT 3
64712: PUSH
64713: LD_INT 4
64715: PUSH
64716: EMPTY
64717: LIST
64718: LIST
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: LIST
64724: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
64725: LD_ADDR_VAR 0 26
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: LD_INT 3
64735: PUSH
64736: EMPTY
64737: LIST
64738: LIST
64739: PUSH
64740: LD_INT 1
64742: PUSH
64743: LD_INT 4
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 1
64752: NEG
64753: PUSH
64754: LD_INT 3
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: LIST
64765: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
64766: LD_ADDR_VAR 0 27
64770: PUSH
64771: LD_INT 3
64773: NEG
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 3
64784: NEG
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 4
64795: NEG
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: LIST
64809: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
64810: LD_ADDR_VAR 0 28
64814: PUSH
64815: LD_INT 3
64817: NEG
64818: PUSH
64819: LD_INT 3
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 3
64829: NEG
64830: PUSH
64831: LD_INT 4
64833: NEG
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 4
64841: NEG
64842: PUSH
64843: LD_INT 3
64845: NEG
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: LIST
64855: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
64856: LD_ADDR_VAR 0 29
64860: PUSH
64861: LD_INT 1
64863: NEG
64864: PUSH
64865: LD_INT 3
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: LD_INT 3
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 1
64886: PUSH
64887: LD_INT 2
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 1
64897: NEG
64898: PUSH
64899: LD_INT 4
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 0
64909: PUSH
64910: LD_INT 4
64912: NEG
64913: PUSH
64914: EMPTY
64915: LIST
64916: LIST
64917: PUSH
64918: LD_INT 1
64920: PUSH
64921: LD_INT 3
64923: NEG
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: LD_INT 5
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 5
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 1
64954: PUSH
64955: LD_INT 4
64957: NEG
64958: PUSH
64959: EMPTY
64960: LIST
64961: LIST
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: LD_INT 6
64969: NEG
64970: PUSH
64971: EMPTY
64972: LIST
64973: LIST
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: LD_INT 6
64980: NEG
64981: PUSH
64982: EMPTY
64983: LIST
64984: LIST
64985: PUSH
64986: LD_INT 1
64988: PUSH
64989: LD_INT 5
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: LIST
65009: LIST
65010: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65011: LD_ADDR_VAR 0 30
65015: PUSH
65016: LD_INT 2
65018: PUSH
65019: LD_INT 1
65021: NEG
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 3
65029: PUSH
65030: LD_INT 0
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 3
65039: PUSH
65040: LD_INT 1
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 3
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 4
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 4
65070: PUSH
65071: LD_INT 1
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 4
65080: PUSH
65081: LD_INT 1
65083: NEG
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 5
65091: PUSH
65092: LD_INT 0
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 5
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: EMPTY
65106: LIST
65107: LIST
65108: PUSH
65109: LD_INT 5
65111: PUSH
65112: LD_INT 1
65114: NEG
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 6
65122: PUSH
65123: LD_INT 0
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 6
65132: PUSH
65133: LD_INT 1
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65154: LD_ADDR_VAR 0 31
65158: PUSH
65159: LD_INT 3
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 3
65171: PUSH
65172: LD_INT 3
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: LD_INT 2
65181: PUSH
65182: LD_INT 3
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 4
65191: PUSH
65192: LD_INT 3
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 4
65201: PUSH
65202: LD_INT 4
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: LD_INT 3
65211: PUSH
65212: LD_INT 4
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PUSH
65219: LD_INT 5
65221: PUSH
65222: LD_INT 4
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 5
65231: PUSH
65232: LD_INT 5
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 4
65241: PUSH
65242: LD_INT 5
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: LD_INT 6
65251: PUSH
65252: LD_INT 5
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 6
65261: PUSH
65262: LD_INT 6
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 5
65271: PUSH
65272: LD_INT 6
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: EMPTY
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: LIST
65289: LIST
65290: LIST
65291: LIST
65292: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
65293: LD_ADDR_VAR 0 32
65297: PUSH
65298: LD_INT 1
65300: PUSH
65301: LD_INT 3
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: LD_INT 0
65310: PUSH
65311: LD_INT 3
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: LD_INT 2
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 1
65331: PUSH
65332: LD_INT 4
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: LD_INT 4
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 1
65351: NEG
65352: PUSH
65353: LD_INT 3
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: LD_INT 5
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: LD_INT 5
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 1
65382: NEG
65383: PUSH
65384: LD_INT 4
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 1
65393: PUSH
65394: LD_INT 6
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: LD_INT 6
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 1
65413: NEG
65414: PUSH
65415: LD_INT 5
65417: PUSH
65418: EMPTY
65419: LIST
65420: LIST
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
65436: LD_ADDR_VAR 0 33
65440: PUSH
65441: LD_INT 2
65443: NEG
65444: PUSH
65445: LD_INT 1
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 3
65454: NEG
65455: PUSH
65456: LD_INT 0
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 3
65465: NEG
65466: PUSH
65467: LD_INT 1
65469: NEG
65470: PUSH
65471: EMPTY
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 3
65477: NEG
65478: PUSH
65479: LD_INT 1
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 4
65488: NEG
65489: PUSH
65490: LD_INT 0
65492: PUSH
65493: EMPTY
65494: LIST
65495: LIST
65496: PUSH
65497: LD_INT 4
65499: NEG
65500: PUSH
65501: LD_INT 1
65503: NEG
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: LD_INT 4
65511: NEG
65512: PUSH
65513: LD_INT 1
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 5
65522: NEG
65523: PUSH
65524: LD_INT 0
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: PUSH
65531: LD_INT 5
65533: NEG
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 5
65545: NEG
65546: PUSH
65547: LD_INT 1
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 6
65556: NEG
65557: PUSH
65558: LD_INT 0
65560: PUSH
65561: EMPTY
65562: LIST
65563: LIST
65564: PUSH
65565: LD_INT 6
65567: NEG
65568: PUSH
65569: LD_INT 1
65571: NEG
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: LIST
65584: LIST
65585: LIST
65586: LIST
65587: LIST
65588: LIST
65589: LIST
65590: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
65591: LD_ADDR_VAR 0 34
65595: PUSH
65596: LD_INT 2
65598: NEG
65599: PUSH
65600: LD_INT 3
65602: NEG
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: PUSH
65608: LD_INT 3
65610: NEG
65611: PUSH
65612: LD_INT 2
65614: NEG
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 3
65622: NEG
65623: PUSH
65624: LD_INT 3
65626: NEG
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 3
65634: NEG
65635: PUSH
65636: LD_INT 4
65638: NEG
65639: PUSH
65640: EMPTY
65641: LIST
65642: LIST
65643: PUSH
65644: LD_INT 4
65646: NEG
65647: PUSH
65648: LD_INT 3
65650: NEG
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 4
65658: NEG
65659: PUSH
65660: LD_INT 4
65662: NEG
65663: PUSH
65664: EMPTY
65665: LIST
65666: LIST
65667: PUSH
65668: LD_INT 4
65670: NEG
65671: PUSH
65672: LD_INT 5
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 5
65682: NEG
65683: PUSH
65684: LD_INT 4
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 5
65694: NEG
65695: PUSH
65696: LD_INT 5
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 5
65706: NEG
65707: PUSH
65708: LD_INT 6
65710: NEG
65711: PUSH
65712: EMPTY
65713: LIST
65714: LIST
65715: PUSH
65716: LD_INT 6
65718: NEG
65719: PUSH
65720: LD_INT 5
65722: NEG
65723: PUSH
65724: EMPTY
65725: LIST
65726: LIST
65727: PUSH
65728: LD_INT 6
65730: NEG
65731: PUSH
65732: LD_INT 6
65734: NEG
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: PUSH
65740: EMPTY
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
65754: LD_ADDR_VAR 0 41
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: LD_INT 2
65764: NEG
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 1
65772: NEG
65773: PUSH
65774: LD_INT 3
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: LD_INT 1
65784: PUSH
65785: LD_INT 2
65787: NEG
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: LIST
65797: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
65798: LD_ADDR_VAR 0 42
65802: PUSH
65803: LD_INT 2
65805: PUSH
65806: LD_INT 0
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 2
65815: PUSH
65816: LD_INT 1
65818: NEG
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 3
65826: PUSH
65827: LD_INT 1
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: LIST
65838: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
65839: LD_ADDR_VAR 0 43
65843: PUSH
65844: LD_INT 2
65846: PUSH
65847: LD_INT 2
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 3
65856: PUSH
65857: LD_INT 2
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 2
65866: PUSH
65867: LD_INT 3
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: LIST
65878: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
65879: LD_ADDR_VAR 0 44
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: LD_INT 2
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 1
65896: PUSH
65897: LD_INT 3
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: NEG
65907: PUSH
65908: LD_INT 2
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: LIST
65919: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65920: LD_ADDR_VAR 0 45
65924: PUSH
65925: LD_INT 2
65927: NEG
65928: PUSH
65929: LD_INT 0
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: LD_INT 2
65938: NEG
65939: PUSH
65940: LD_INT 1
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 3
65949: NEG
65950: PUSH
65951: LD_INT 1
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: LIST
65963: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
65964: LD_ADDR_VAR 0 46
65968: PUSH
65969: LD_INT 2
65971: NEG
65972: PUSH
65973: LD_INT 2
65975: NEG
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 2
65983: NEG
65984: PUSH
65985: LD_INT 3
65987: NEG
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 3
65995: NEG
65996: PUSH
65997: LD_INT 2
65999: NEG
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: LIST
66009: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66010: LD_ADDR_VAR 0 47
66014: PUSH
66015: LD_INT 2
66017: NEG
66018: PUSH
66019: LD_INT 3
66021: NEG
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 1
66029: NEG
66030: PUSH
66031: LD_INT 3
66033: NEG
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66043: LD_ADDR_VAR 0 48
66047: PUSH
66048: LD_INT 1
66050: PUSH
66051: LD_INT 2
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 2
66061: PUSH
66062: LD_INT 1
66064: NEG
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: EMPTY
66071: LIST
66072: LIST
66073: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66074: LD_ADDR_VAR 0 49
66078: PUSH
66079: LD_INT 3
66081: PUSH
66082: LD_INT 1
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 3
66091: PUSH
66092: LD_INT 2
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66103: LD_ADDR_VAR 0 50
66107: PUSH
66108: LD_INT 2
66110: PUSH
66111: LD_INT 3
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 1
66120: PUSH
66121: LD_INT 3
66123: PUSH
66124: EMPTY
66125: LIST
66126: LIST
66127: PUSH
66128: EMPTY
66129: LIST
66130: LIST
66131: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66132: LD_ADDR_VAR 0 51
66136: PUSH
66137: LD_INT 1
66139: NEG
66140: PUSH
66141: LD_INT 2
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 2
66150: NEG
66151: PUSH
66152: LD_INT 1
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66163: LD_ADDR_VAR 0 52
66167: PUSH
66168: LD_INT 3
66170: NEG
66171: PUSH
66172: LD_INT 1
66174: NEG
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 3
66182: NEG
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66196: LD_ADDR_VAR 0 53
66200: PUSH
66201: LD_INT 1
66203: NEG
66204: PUSH
66205: LD_INT 3
66207: NEG
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 0
66215: PUSH
66216: LD_INT 3
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 1
66226: PUSH
66227: LD_INT 2
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: LIST
66239: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66240: LD_ADDR_VAR 0 54
66244: PUSH
66245: LD_INT 2
66247: PUSH
66248: LD_INT 1
66250: NEG
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PUSH
66256: LD_INT 3
66258: PUSH
66259: LD_INT 0
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 3
66268: PUSH
66269: LD_INT 1
66271: PUSH
66272: EMPTY
66273: LIST
66274: LIST
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: LIST
66280: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66281: LD_ADDR_VAR 0 55
66285: PUSH
66286: LD_INT 3
66288: PUSH
66289: LD_INT 2
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 3
66298: PUSH
66299: LD_INT 3
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: LD_INT 2
66308: PUSH
66309: LD_INT 3
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: LIST
66320: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66321: LD_ADDR_VAR 0 56
66325: PUSH
66326: LD_INT 1
66328: PUSH
66329: LD_INT 3
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 0
66338: PUSH
66339: LD_INT 3
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 1
66348: NEG
66349: PUSH
66350: LD_INT 2
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: LIST
66361: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66362: LD_ADDR_VAR 0 57
66366: PUSH
66367: LD_INT 2
66369: NEG
66370: PUSH
66371: LD_INT 1
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 3
66380: NEG
66381: PUSH
66382: LD_INT 0
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: PUSH
66389: LD_INT 3
66391: NEG
66392: PUSH
66393: LD_INT 1
66395: NEG
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: LIST
66405: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66406: LD_ADDR_VAR 0 58
66410: PUSH
66411: LD_INT 2
66413: NEG
66414: PUSH
66415: LD_INT 3
66417: NEG
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 3
66425: NEG
66426: PUSH
66427: LD_INT 2
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 3
66437: NEG
66438: PUSH
66439: LD_INT 3
66441: NEG
66442: PUSH
66443: EMPTY
66444: LIST
66445: LIST
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: LIST
66451: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
66452: LD_ADDR_VAR 0 59
66456: PUSH
66457: LD_INT 1
66459: NEG
66460: PUSH
66461: LD_INT 2
66463: NEG
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: LD_INT 2
66474: NEG
66475: PUSH
66476: EMPTY
66477: LIST
66478: LIST
66479: PUSH
66480: LD_INT 1
66482: PUSH
66483: LD_INT 1
66485: NEG
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: LIST
66495: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
66496: LD_ADDR_VAR 0 60
66500: PUSH
66501: LD_INT 1
66503: PUSH
66504: LD_INT 1
66506: NEG
66507: PUSH
66508: EMPTY
66509: LIST
66510: LIST
66511: PUSH
66512: LD_INT 2
66514: PUSH
66515: LD_INT 0
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 2
66524: PUSH
66525: LD_INT 1
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: EMPTY
66533: LIST
66534: LIST
66535: LIST
66536: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
66537: LD_ADDR_VAR 0 61
66541: PUSH
66542: LD_INT 2
66544: PUSH
66545: LD_INT 1
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 2
66554: PUSH
66555: LD_INT 2
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 1
66564: PUSH
66565: LD_INT 2
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: LIST
66576: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
66577: LD_ADDR_VAR 0 62
66581: PUSH
66582: LD_INT 1
66584: PUSH
66585: LD_INT 2
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 0
66594: PUSH
66595: LD_INT 2
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: LD_INT 1
66604: NEG
66605: PUSH
66606: LD_INT 1
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: LIST
66617: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
66618: LD_ADDR_VAR 0 63
66622: PUSH
66623: LD_INT 1
66625: NEG
66626: PUSH
66627: LD_INT 1
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 2
66636: NEG
66637: PUSH
66638: LD_INT 0
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 2
66647: NEG
66648: PUSH
66649: LD_INT 1
66651: NEG
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: LIST
66661: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66662: LD_ADDR_VAR 0 64
66666: PUSH
66667: LD_INT 1
66669: NEG
66670: PUSH
66671: LD_INT 2
66673: NEG
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 2
66681: NEG
66682: PUSH
66683: LD_INT 1
66685: NEG
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 2
66693: NEG
66694: PUSH
66695: LD_INT 2
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: LIST
66707: ST_TO_ADDR
// end ; 2 :
66708: GO 69974
66710: LD_INT 2
66712: DOUBLE
66713: EQUAL
66714: IFTRUE 66718
66716: GO 69973
66718: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
66719: LD_ADDR_VAR 0 29
66723: PUSH
66724: LD_INT 4
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: PUSH
66734: LD_INT 4
66736: PUSH
66737: LD_INT 1
66739: NEG
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 5
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 5
66757: PUSH
66758: LD_INT 1
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: LD_INT 4
66767: PUSH
66768: LD_INT 1
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 3
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 3
66787: PUSH
66788: LD_INT 1
66790: NEG
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 3
66798: PUSH
66799: LD_INT 2
66801: NEG
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 5
66809: PUSH
66810: LD_INT 2
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: PUSH
66817: LD_INT 3
66819: PUSH
66820: LD_INT 3
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 3
66829: PUSH
66830: LD_INT 2
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 4
66839: PUSH
66840: LD_INT 3
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 4
66849: PUSH
66850: LD_INT 4
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 3
66859: PUSH
66860: LD_INT 4
66862: PUSH
66863: EMPTY
66864: LIST
66865: LIST
66866: PUSH
66867: LD_INT 2
66869: PUSH
66870: LD_INT 3
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 2
66879: PUSH
66880: LD_INT 2
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: PUSH
66887: LD_INT 4
66889: PUSH
66890: LD_INT 2
66892: PUSH
66893: EMPTY
66894: LIST
66895: LIST
66896: PUSH
66897: LD_INT 2
66899: PUSH
66900: LD_INT 4
66902: PUSH
66903: EMPTY
66904: LIST
66905: LIST
66906: PUSH
66907: LD_INT 0
66909: PUSH
66910: LD_INT 4
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: LD_INT 3
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: PUSH
66927: LD_INT 1
66929: PUSH
66930: LD_INT 4
66932: PUSH
66933: EMPTY
66934: LIST
66935: LIST
66936: PUSH
66937: LD_INT 1
66939: PUSH
66940: LD_INT 5
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 0
66949: PUSH
66950: LD_INT 5
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 1
66959: NEG
66960: PUSH
66961: LD_INT 4
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 1
66970: NEG
66971: PUSH
66972: LD_INT 3
66974: PUSH
66975: EMPTY
66976: LIST
66977: LIST
66978: PUSH
66979: LD_INT 2
66981: PUSH
66982: LD_INT 5
66984: PUSH
66985: EMPTY
66986: LIST
66987: LIST
66988: PUSH
66989: LD_INT 2
66991: NEG
66992: PUSH
66993: LD_INT 3
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 3
67002: NEG
67003: PUSH
67004: LD_INT 0
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PUSH
67011: LD_INT 3
67013: NEG
67014: PUSH
67015: LD_INT 1
67017: NEG
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 2
67025: NEG
67026: PUSH
67027: LD_INT 0
67029: PUSH
67030: EMPTY
67031: LIST
67032: LIST
67033: PUSH
67034: LD_INT 2
67036: NEG
67037: PUSH
67038: LD_INT 1
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: LD_INT 3
67047: NEG
67048: PUSH
67049: LD_INT 1
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: LD_INT 4
67058: NEG
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: EMPTY
67064: LIST
67065: LIST
67066: PUSH
67067: LD_INT 4
67069: NEG
67070: PUSH
67071: LD_INT 1
67073: NEG
67074: PUSH
67075: EMPTY
67076: LIST
67077: LIST
67078: PUSH
67079: LD_INT 4
67081: NEG
67082: PUSH
67083: LD_INT 2
67085: NEG
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 2
67093: NEG
67094: PUSH
67095: LD_INT 2
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 4
67104: NEG
67105: PUSH
67106: LD_INT 4
67108: NEG
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 4
67116: NEG
67117: PUSH
67118: LD_INT 5
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 3
67128: NEG
67129: PUSH
67130: LD_INT 4
67132: NEG
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 3
67140: NEG
67141: PUSH
67142: LD_INT 3
67144: NEG
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 4
67152: NEG
67153: PUSH
67154: LD_INT 3
67156: NEG
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: LD_INT 5
67164: NEG
67165: PUSH
67166: LD_INT 4
67168: NEG
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 5
67176: NEG
67177: PUSH
67178: LD_INT 5
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 3
67188: NEG
67189: PUSH
67190: LD_INT 5
67192: NEG
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 5
67200: NEG
67201: PUSH
67202: LD_INT 3
67204: NEG
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: EMPTY
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: LIST
67243: LIST
67244: LIST
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: LIST
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
67257: LD_ADDR_VAR 0 30
67261: PUSH
67262: LD_INT 4
67264: PUSH
67265: LD_INT 4
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 4
67274: PUSH
67275: LD_INT 3
67277: PUSH
67278: EMPTY
67279: LIST
67280: LIST
67281: PUSH
67282: LD_INT 5
67284: PUSH
67285: LD_INT 4
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 5
67294: PUSH
67295: LD_INT 5
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 4
67304: PUSH
67305: LD_INT 5
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 3
67314: PUSH
67315: LD_INT 4
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 3
67324: PUSH
67325: LD_INT 3
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 5
67334: PUSH
67335: LD_INT 3
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 3
67344: PUSH
67345: LD_INT 5
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: LD_INT 0
67354: PUSH
67355: LD_INT 3
67357: PUSH
67358: EMPTY
67359: LIST
67360: LIST
67361: PUSH
67362: LD_INT 0
67364: PUSH
67365: LD_INT 2
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 1
67374: PUSH
67375: LD_INT 3
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 1
67384: PUSH
67385: LD_INT 4
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: PUSH
67392: LD_INT 0
67394: PUSH
67395: LD_INT 4
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: PUSH
67402: LD_INT 1
67404: NEG
67405: PUSH
67406: LD_INT 3
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 1
67415: NEG
67416: PUSH
67417: LD_INT 2
67419: PUSH
67420: EMPTY
67421: LIST
67422: LIST
67423: PUSH
67424: LD_INT 2
67426: PUSH
67427: LD_INT 4
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 2
67436: NEG
67437: PUSH
67438: LD_INT 2
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 4
67447: NEG
67448: PUSH
67449: LD_INT 0
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 4
67458: NEG
67459: PUSH
67460: LD_INT 1
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 3
67470: NEG
67471: PUSH
67472: LD_INT 0
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: LD_INT 3
67481: NEG
67482: PUSH
67483: LD_INT 1
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 4
67492: NEG
67493: PUSH
67494: LD_INT 1
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: LD_INT 5
67503: NEG
67504: PUSH
67505: LD_INT 0
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 5
67514: NEG
67515: PUSH
67516: LD_INT 1
67518: NEG
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: PUSH
67524: LD_INT 5
67526: NEG
67527: PUSH
67528: LD_INT 2
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 3
67538: NEG
67539: PUSH
67540: LD_INT 2
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 3
67549: NEG
67550: PUSH
67551: LD_INT 3
67553: NEG
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 3
67561: NEG
67562: PUSH
67563: LD_INT 4
67565: NEG
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 2
67573: NEG
67574: PUSH
67575: LD_INT 3
67577: NEG
67578: PUSH
67579: EMPTY
67580: LIST
67581: LIST
67582: PUSH
67583: LD_INT 2
67585: NEG
67586: PUSH
67587: LD_INT 2
67589: NEG
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: PUSH
67595: LD_INT 3
67597: NEG
67598: PUSH
67599: LD_INT 2
67601: NEG
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 4
67609: NEG
67610: PUSH
67611: LD_INT 3
67613: NEG
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 4
67621: NEG
67622: PUSH
67623: LD_INT 4
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 2
67633: NEG
67634: PUSH
67635: LD_INT 4
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 4
67645: NEG
67646: PUSH
67647: LD_INT 2
67649: NEG
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: PUSH
67655: LD_INT 0
67657: PUSH
67658: LD_INT 4
67660: NEG
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 0
67668: PUSH
67669: LD_INT 5
67671: NEG
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 1
67679: PUSH
67680: LD_INT 4
67682: NEG
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: PUSH
67688: LD_INT 1
67690: PUSH
67691: LD_INT 3
67693: NEG
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 0
67701: PUSH
67702: LD_INT 3
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: LD_INT 4
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 1
67724: NEG
67725: PUSH
67726: LD_INT 5
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 2
67736: PUSH
67737: LD_INT 3
67739: NEG
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 2
67747: NEG
67748: PUSH
67749: LD_INT 5
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: LIST
67768: LIST
67769: LIST
67770: LIST
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: LIST
67795: LIST
67796: LIST
67797: LIST
67798: LIST
67799: LIST
67800: LIST
67801: LIST
67802: LIST
67803: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
67804: LD_ADDR_VAR 0 31
67808: PUSH
67809: LD_INT 0
67811: PUSH
67812: LD_INT 4
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 0
67821: PUSH
67822: LD_INT 3
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 1
67831: PUSH
67832: LD_INT 4
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 1
67841: PUSH
67842: LD_INT 5
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 0
67851: PUSH
67852: LD_INT 5
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 1
67861: NEG
67862: PUSH
67863: LD_INT 4
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 1
67872: NEG
67873: PUSH
67874: LD_INT 3
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 2
67883: PUSH
67884: LD_INT 5
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 2
67893: NEG
67894: PUSH
67895: LD_INT 3
67897: PUSH
67898: EMPTY
67899: LIST
67900: LIST
67901: PUSH
67902: LD_INT 3
67904: NEG
67905: PUSH
67906: LD_INT 0
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: PUSH
67913: LD_INT 3
67915: NEG
67916: PUSH
67917: LD_INT 1
67919: NEG
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: LD_INT 2
67927: NEG
67928: PUSH
67929: LD_INT 0
67931: PUSH
67932: EMPTY
67933: LIST
67934: LIST
67935: PUSH
67936: LD_INT 2
67938: NEG
67939: PUSH
67940: LD_INT 1
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 3
67949: NEG
67950: PUSH
67951: LD_INT 1
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: LD_INT 4
67960: NEG
67961: PUSH
67962: LD_INT 0
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 4
67971: NEG
67972: PUSH
67973: LD_INT 1
67975: NEG
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 4
67983: NEG
67984: PUSH
67985: LD_INT 2
67987: NEG
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PUSH
67993: LD_INT 2
67995: NEG
67996: PUSH
67997: LD_INT 2
67999: PUSH
68000: EMPTY
68001: LIST
68002: LIST
68003: PUSH
68004: LD_INT 4
68006: NEG
68007: PUSH
68008: LD_INT 4
68010: NEG
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 4
68018: NEG
68019: PUSH
68020: LD_INT 5
68022: NEG
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 3
68030: NEG
68031: PUSH
68032: LD_INT 4
68034: NEG
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 3
68042: NEG
68043: PUSH
68044: LD_INT 3
68046: NEG
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 4
68054: NEG
68055: PUSH
68056: LD_INT 3
68058: NEG
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 5
68066: NEG
68067: PUSH
68068: LD_INT 4
68070: NEG
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 5
68078: NEG
68079: PUSH
68080: LD_INT 5
68082: NEG
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 3
68090: NEG
68091: PUSH
68092: LD_INT 5
68094: NEG
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 5
68102: NEG
68103: PUSH
68104: LD_INT 3
68106: NEG
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 0
68114: PUSH
68115: LD_INT 3
68117: NEG
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: LD_INT 0
68125: PUSH
68126: LD_INT 4
68128: NEG
68129: PUSH
68130: EMPTY
68131: LIST
68132: LIST
68133: PUSH
68134: LD_INT 1
68136: PUSH
68137: LD_INT 3
68139: NEG
68140: PUSH
68141: EMPTY
68142: LIST
68143: LIST
68144: PUSH
68145: LD_INT 1
68147: PUSH
68148: LD_INT 2
68150: NEG
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 0
68158: PUSH
68159: LD_INT 2
68161: NEG
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 1
68169: NEG
68170: PUSH
68171: LD_INT 3
68173: NEG
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 1
68181: NEG
68182: PUSH
68183: LD_INT 4
68185: NEG
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: PUSH
68191: LD_INT 2
68193: PUSH
68194: LD_INT 2
68196: NEG
68197: PUSH
68198: EMPTY
68199: LIST
68200: LIST
68201: PUSH
68202: LD_INT 2
68204: NEG
68205: PUSH
68206: LD_INT 4
68208: NEG
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 4
68216: PUSH
68217: LD_INT 0
68219: PUSH
68220: EMPTY
68221: LIST
68222: LIST
68223: PUSH
68224: LD_INT 4
68226: PUSH
68227: LD_INT 1
68229: NEG
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 5
68237: PUSH
68238: LD_INT 0
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 5
68247: PUSH
68248: LD_INT 1
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 4
68257: PUSH
68258: LD_INT 1
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 3
68267: PUSH
68268: LD_INT 0
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 3
68277: PUSH
68278: LD_INT 1
68280: NEG
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 3
68288: PUSH
68289: LD_INT 2
68291: NEG
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 5
68299: PUSH
68300: LD_INT 2
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: LIST
68311: LIST
68312: LIST
68313: LIST
68314: LIST
68315: LIST
68316: LIST
68317: LIST
68318: LIST
68319: LIST
68320: LIST
68321: LIST
68322: LIST
68323: LIST
68324: LIST
68325: LIST
68326: LIST
68327: LIST
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: LIST
68352: LIST
68353: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
68354: LD_ADDR_VAR 0 32
68358: PUSH
68359: LD_INT 4
68361: NEG
68362: PUSH
68363: LD_INT 0
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: PUSH
68370: LD_INT 4
68372: NEG
68373: PUSH
68374: LD_INT 1
68376: NEG
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: PUSH
68382: LD_INT 3
68384: NEG
68385: PUSH
68386: LD_INT 0
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 3
68395: NEG
68396: PUSH
68397: LD_INT 1
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 4
68406: NEG
68407: PUSH
68408: LD_INT 1
68410: PUSH
68411: EMPTY
68412: LIST
68413: LIST
68414: PUSH
68415: LD_INT 5
68417: NEG
68418: PUSH
68419: LD_INT 0
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 5
68428: NEG
68429: PUSH
68430: LD_INT 1
68432: NEG
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: PUSH
68438: LD_INT 5
68440: NEG
68441: PUSH
68442: LD_INT 2
68444: NEG
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_INT 3
68452: NEG
68453: PUSH
68454: LD_INT 2
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 3
68463: NEG
68464: PUSH
68465: LD_INT 3
68467: NEG
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 3
68475: NEG
68476: PUSH
68477: LD_INT 4
68479: NEG
68480: PUSH
68481: EMPTY
68482: LIST
68483: LIST
68484: PUSH
68485: LD_INT 2
68487: NEG
68488: PUSH
68489: LD_INT 3
68491: NEG
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: PUSH
68497: LD_INT 2
68499: NEG
68500: PUSH
68501: LD_INT 2
68503: NEG
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 3
68511: NEG
68512: PUSH
68513: LD_INT 2
68515: NEG
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 4
68523: NEG
68524: PUSH
68525: LD_INT 3
68527: NEG
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 4
68535: NEG
68536: PUSH
68537: LD_INT 4
68539: NEG
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 2
68547: NEG
68548: PUSH
68549: LD_INT 4
68551: NEG
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 4
68559: NEG
68560: PUSH
68561: LD_INT 2
68563: NEG
68564: PUSH
68565: EMPTY
68566: LIST
68567: LIST
68568: PUSH
68569: LD_INT 0
68571: PUSH
68572: LD_INT 4
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: LD_INT 5
68585: NEG
68586: PUSH
68587: EMPTY
68588: LIST
68589: LIST
68590: PUSH
68591: LD_INT 1
68593: PUSH
68594: LD_INT 4
68596: NEG
68597: PUSH
68598: EMPTY
68599: LIST
68600: LIST
68601: PUSH
68602: LD_INT 1
68604: PUSH
68605: LD_INT 3
68607: NEG
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 0
68615: PUSH
68616: LD_INT 3
68618: NEG
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 1
68626: NEG
68627: PUSH
68628: LD_INT 4
68630: NEG
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 1
68638: NEG
68639: PUSH
68640: LD_INT 5
68642: NEG
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 2
68650: PUSH
68651: LD_INT 3
68653: NEG
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 2
68661: NEG
68662: PUSH
68663: LD_INT 5
68665: NEG
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 3
68673: PUSH
68674: LD_INT 0
68676: PUSH
68677: EMPTY
68678: LIST
68679: LIST
68680: PUSH
68681: LD_INT 3
68683: PUSH
68684: LD_INT 1
68686: NEG
68687: PUSH
68688: EMPTY
68689: LIST
68690: LIST
68691: PUSH
68692: LD_INT 4
68694: PUSH
68695: LD_INT 0
68697: PUSH
68698: EMPTY
68699: LIST
68700: LIST
68701: PUSH
68702: LD_INT 4
68704: PUSH
68705: LD_INT 1
68707: PUSH
68708: EMPTY
68709: LIST
68710: LIST
68711: PUSH
68712: LD_INT 3
68714: PUSH
68715: LD_INT 1
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 2
68724: PUSH
68725: LD_INT 0
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 2
68734: PUSH
68735: LD_INT 1
68737: NEG
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 2
68745: PUSH
68746: LD_INT 2
68748: NEG
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 4
68756: PUSH
68757: LD_INT 2
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 4
68766: PUSH
68767: LD_INT 4
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: PUSH
68774: LD_INT 4
68776: PUSH
68777: LD_INT 3
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 5
68786: PUSH
68787: LD_INT 4
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 5
68796: PUSH
68797: LD_INT 5
68799: PUSH
68800: EMPTY
68801: LIST
68802: LIST
68803: PUSH
68804: LD_INT 4
68806: PUSH
68807: LD_INT 5
68809: PUSH
68810: EMPTY
68811: LIST
68812: LIST
68813: PUSH
68814: LD_INT 3
68816: PUSH
68817: LD_INT 4
68819: PUSH
68820: EMPTY
68821: LIST
68822: LIST
68823: PUSH
68824: LD_INT 3
68826: PUSH
68827: LD_INT 3
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 5
68836: PUSH
68837: LD_INT 3
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 3
68846: PUSH
68847: LD_INT 5
68849: PUSH
68850: EMPTY
68851: LIST
68852: LIST
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: LIST
68858: LIST
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
68901: LD_ADDR_VAR 0 33
68905: PUSH
68906: LD_INT 4
68908: NEG
68909: PUSH
68910: LD_INT 4
68912: NEG
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 4
68920: NEG
68921: PUSH
68922: LD_INT 5
68924: NEG
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 3
68932: NEG
68933: PUSH
68934: LD_INT 4
68936: NEG
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: PUSH
68942: LD_INT 3
68944: NEG
68945: PUSH
68946: LD_INT 3
68948: NEG
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 4
68956: NEG
68957: PUSH
68958: LD_INT 3
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 5
68968: NEG
68969: PUSH
68970: LD_INT 4
68972: NEG
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 5
68980: NEG
68981: PUSH
68982: LD_INT 5
68984: NEG
68985: PUSH
68986: EMPTY
68987: LIST
68988: LIST
68989: PUSH
68990: LD_INT 3
68992: NEG
68993: PUSH
68994: LD_INT 5
68996: NEG
68997: PUSH
68998: EMPTY
68999: LIST
69000: LIST
69001: PUSH
69002: LD_INT 5
69004: NEG
69005: PUSH
69006: LD_INT 3
69008: NEG
69009: PUSH
69010: EMPTY
69011: LIST
69012: LIST
69013: PUSH
69014: LD_INT 0
69016: PUSH
69017: LD_INT 3
69019: NEG
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 0
69027: PUSH
69028: LD_INT 4
69030: NEG
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: PUSH
69036: LD_INT 1
69038: PUSH
69039: LD_INT 3
69041: NEG
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: LD_INT 1
69049: PUSH
69050: LD_INT 2
69052: NEG
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 0
69060: PUSH
69061: LD_INT 2
69063: NEG
69064: PUSH
69065: EMPTY
69066: LIST
69067: LIST
69068: PUSH
69069: LD_INT 1
69071: NEG
69072: PUSH
69073: LD_INT 3
69075: NEG
69076: PUSH
69077: EMPTY
69078: LIST
69079: LIST
69080: PUSH
69081: LD_INT 1
69083: NEG
69084: PUSH
69085: LD_INT 4
69087: NEG
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 2
69095: PUSH
69096: LD_INT 2
69098: NEG
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 2
69106: NEG
69107: PUSH
69108: LD_INT 4
69110: NEG
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 4
69118: PUSH
69119: LD_INT 0
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 4
69128: PUSH
69129: LD_INT 1
69131: NEG
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 5
69139: PUSH
69140: LD_INT 0
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 5
69149: PUSH
69150: LD_INT 1
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 4
69159: PUSH
69160: LD_INT 1
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 3
69169: PUSH
69170: LD_INT 0
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 3
69179: PUSH
69180: LD_INT 1
69182: NEG
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 3
69190: PUSH
69191: LD_INT 2
69193: NEG
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 5
69201: PUSH
69202: LD_INT 2
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 3
69211: PUSH
69212: LD_INT 3
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: PUSH
69219: LD_INT 3
69221: PUSH
69222: LD_INT 2
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 4
69231: PUSH
69232: LD_INT 3
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 4
69241: PUSH
69242: LD_INT 4
69244: PUSH
69245: EMPTY
69246: LIST
69247: LIST
69248: PUSH
69249: LD_INT 3
69251: PUSH
69252: LD_INT 4
69254: PUSH
69255: EMPTY
69256: LIST
69257: LIST
69258: PUSH
69259: LD_INT 2
69261: PUSH
69262: LD_INT 3
69264: PUSH
69265: EMPTY
69266: LIST
69267: LIST
69268: PUSH
69269: LD_INT 2
69271: PUSH
69272: LD_INT 2
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: PUSH
69279: LD_INT 4
69281: PUSH
69282: LD_INT 2
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 2
69291: PUSH
69292: LD_INT 4
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 0
69301: PUSH
69302: LD_INT 4
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: LD_INT 3
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 1
69321: PUSH
69322: LD_INT 4
69324: PUSH
69325: EMPTY
69326: LIST
69327: LIST
69328: PUSH
69329: LD_INT 1
69331: PUSH
69332: LD_INT 5
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 0
69341: PUSH
69342: LD_INT 5
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 1
69351: NEG
69352: PUSH
69353: LD_INT 4
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: NEG
69363: PUSH
69364: LD_INT 3
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 2
69373: PUSH
69374: LD_INT 5
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 2
69383: NEG
69384: PUSH
69385: LD_INT 3
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: LIST
69410: LIST
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: LIST
69416: LIST
69417: LIST
69418: LIST
69419: LIST
69420: LIST
69421: LIST
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: LIST
69429: LIST
69430: LIST
69431: LIST
69432: LIST
69433: LIST
69434: LIST
69435: LIST
69436: LIST
69437: LIST
69438: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
69439: LD_ADDR_VAR 0 34
69443: PUSH
69444: LD_INT 0
69446: PUSH
69447: LD_INT 4
69449: NEG
69450: PUSH
69451: EMPTY
69452: LIST
69453: LIST
69454: PUSH
69455: LD_INT 0
69457: PUSH
69458: LD_INT 5
69460: NEG
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 1
69468: PUSH
69469: LD_INT 4
69471: NEG
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 1
69479: PUSH
69480: LD_INT 3
69482: NEG
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 0
69490: PUSH
69491: LD_INT 3
69493: NEG
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 1
69501: NEG
69502: PUSH
69503: LD_INT 4
69505: NEG
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 1
69513: NEG
69514: PUSH
69515: LD_INT 5
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 2
69525: PUSH
69526: LD_INT 3
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 2
69536: NEG
69537: PUSH
69538: LD_INT 5
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 3
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 3
69558: PUSH
69559: LD_INT 1
69561: NEG
69562: PUSH
69563: EMPTY
69564: LIST
69565: LIST
69566: PUSH
69567: LD_INT 4
69569: PUSH
69570: LD_INT 0
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: LD_INT 4
69579: PUSH
69580: LD_INT 1
69582: PUSH
69583: EMPTY
69584: LIST
69585: LIST
69586: PUSH
69587: LD_INT 3
69589: PUSH
69590: LD_INT 1
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 2
69599: PUSH
69600: LD_INT 0
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: LD_INT 2
69609: PUSH
69610: LD_INT 1
69612: NEG
69613: PUSH
69614: EMPTY
69615: LIST
69616: LIST
69617: PUSH
69618: LD_INT 2
69620: PUSH
69621: LD_INT 2
69623: NEG
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 4
69631: PUSH
69632: LD_INT 2
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 4
69641: PUSH
69642: LD_INT 4
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 4
69651: PUSH
69652: LD_INT 3
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 5
69661: PUSH
69662: LD_INT 4
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 5
69671: PUSH
69672: LD_INT 5
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 4
69681: PUSH
69682: LD_INT 5
69684: PUSH
69685: EMPTY
69686: LIST
69687: LIST
69688: PUSH
69689: LD_INT 3
69691: PUSH
69692: LD_INT 4
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 3
69701: PUSH
69702: LD_INT 3
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 5
69711: PUSH
69712: LD_INT 3
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: LD_INT 3
69721: PUSH
69722: LD_INT 5
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 0
69731: PUSH
69732: LD_INT 3
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 0
69741: PUSH
69742: LD_INT 2
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 1
69751: PUSH
69752: LD_INT 3
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 1
69761: PUSH
69762: LD_INT 4
69764: PUSH
69765: EMPTY
69766: LIST
69767: LIST
69768: PUSH
69769: LD_INT 0
69771: PUSH
69772: LD_INT 4
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 1
69781: NEG
69782: PUSH
69783: LD_INT 3
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 1
69792: NEG
69793: PUSH
69794: LD_INT 2
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 2
69803: PUSH
69804: LD_INT 4
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 2
69813: NEG
69814: PUSH
69815: LD_INT 2
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 4
69824: NEG
69825: PUSH
69826: LD_INT 0
69828: PUSH
69829: EMPTY
69830: LIST
69831: LIST
69832: PUSH
69833: LD_INT 4
69835: NEG
69836: PUSH
69837: LD_INT 1
69839: NEG
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 3
69847: NEG
69848: PUSH
69849: LD_INT 0
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 3
69858: NEG
69859: PUSH
69860: LD_INT 1
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 4
69869: NEG
69870: PUSH
69871: LD_INT 1
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 5
69880: NEG
69881: PUSH
69882: LD_INT 0
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 5
69891: NEG
69892: PUSH
69893: LD_INT 1
69895: NEG
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 5
69903: NEG
69904: PUSH
69905: LD_INT 2
69907: NEG
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 3
69915: NEG
69916: PUSH
69917: LD_INT 2
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: LIST
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: LIST
69967: LIST
69968: LIST
69969: LIST
69970: ST_TO_ADDR
// end ; end ;
69971: GO 69974
69973: POP
// case btype of b_depot , b_warehouse :
69974: LD_VAR 0 1
69978: PUSH
69979: LD_INT 0
69981: DOUBLE
69982: EQUAL
69983: IFTRUE 69993
69985: LD_INT 1
69987: DOUBLE
69988: EQUAL
69989: IFTRUE 69993
69991: GO 70194
69993: POP
// case nation of nation_american :
69994: LD_VAR 0 5
69998: PUSH
69999: LD_INT 1
70001: DOUBLE
70002: EQUAL
70003: IFTRUE 70007
70005: GO 70063
70007: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70008: LD_ADDR_VAR 0 9
70012: PUSH
70013: LD_VAR 0 11
70017: PUSH
70018: LD_VAR 0 12
70022: PUSH
70023: LD_VAR 0 13
70027: PUSH
70028: LD_VAR 0 14
70032: PUSH
70033: LD_VAR 0 15
70037: PUSH
70038: LD_VAR 0 16
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: PUSH
70051: LD_VAR 0 4
70055: PUSH
70056: LD_INT 1
70058: PLUS
70059: ARRAY
70060: ST_TO_ADDR
70061: GO 70192
70063: LD_INT 2
70065: DOUBLE
70066: EQUAL
70067: IFTRUE 70071
70069: GO 70127
70071: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70072: LD_ADDR_VAR 0 9
70076: PUSH
70077: LD_VAR 0 17
70081: PUSH
70082: LD_VAR 0 18
70086: PUSH
70087: LD_VAR 0 19
70091: PUSH
70092: LD_VAR 0 20
70096: PUSH
70097: LD_VAR 0 21
70101: PUSH
70102: LD_VAR 0 22
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: PUSH
70115: LD_VAR 0 4
70119: PUSH
70120: LD_INT 1
70122: PLUS
70123: ARRAY
70124: ST_TO_ADDR
70125: GO 70192
70127: LD_INT 3
70129: DOUBLE
70130: EQUAL
70131: IFTRUE 70135
70133: GO 70191
70135: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70136: LD_ADDR_VAR 0 9
70140: PUSH
70141: LD_VAR 0 23
70145: PUSH
70146: LD_VAR 0 24
70150: PUSH
70151: LD_VAR 0 25
70155: PUSH
70156: LD_VAR 0 26
70160: PUSH
70161: LD_VAR 0 27
70165: PUSH
70166: LD_VAR 0 28
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: PUSH
70179: LD_VAR 0 4
70183: PUSH
70184: LD_INT 1
70186: PLUS
70187: ARRAY
70188: ST_TO_ADDR
70189: GO 70192
70191: POP
70192: GO 70747
70194: LD_INT 2
70196: DOUBLE
70197: EQUAL
70198: IFTRUE 70208
70200: LD_INT 3
70202: DOUBLE
70203: EQUAL
70204: IFTRUE 70208
70206: GO 70264
70208: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70209: LD_ADDR_VAR 0 9
70213: PUSH
70214: LD_VAR 0 29
70218: PUSH
70219: LD_VAR 0 30
70223: PUSH
70224: LD_VAR 0 31
70228: PUSH
70229: LD_VAR 0 32
70233: PUSH
70234: LD_VAR 0 33
70238: PUSH
70239: LD_VAR 0 34
70243: PUSH
70244: EMPTY
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: PUSH
70252: LD_VAR 0 4
70256: PUSH
70257: LD_INT 1
70259: PLUS
70260: ARRAY
70261: ST_TO_ADDR
70262: GO 70747
70264: LD_INT 16
70266: DOUBLE
70267: EQUAL
70268: IFTRUE 70326
70270: LD_INT 17
70272: DOUBLE
70273: EQUAL
70274: IFTRUE 70326
70276: LD_INT 18
70278: DOUBLE
70279: EQUAL
70280: IFTRUE 70326
70282: LD_INT 19
70284: DOUBLE
70285: EQUAL
70286: IFTRUE 70326
70288: LD_INT 22
70290: DOUBLE
70291: EQUAL
70292: IFTRUE 70326
70294: LD_INT 20
70296: DOUBLE
70297: EQUAL
70298: IFTRUE 70326
70300: LD_INT 21
70302: DOUBLE
70303: EQUAL
70304: IFTRUE 70326
70306: LD_INT 23
70308: DOUBLE
70309: EQUAL
70310: IFTRUE 70326
70312: LD_INT 24
70314: DOUBLE
70315: EQUAL
70316: IFTRUE 70326
70318: LD_INT 25
70320: DOUBLE
70321: EQUAL
70322: IFTRUE 70326
70324: GO 70382
70326: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
70327: LD_ADDR_VAR 0 9
70331: PUSH
70332: LD_VAR 0 35
70336: PUSH
70337: LD_VAR 0 36
70341: PUSH
70342: LD_VAR 0 37
70346: PUSH
70347: LD_VAR 0 38
70351: PUSH
70352: LD_VAR 0 39
70356: PUSH
70357: LD_VAR 0 40
70361: PUSH
70362: EMPTY
70363: LIST
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: PUSH
70370: LD_VAR 0 4
70374: PUSH
70375: LD_INT 1
70377: PLUS
70378: ARRAY
70379: ST_TO_ADDR
70380: GO 70747
70382: LD_INT 6
70384: DOUBLE
70385: EQUAL
70386: IFTRUE 70438
70388: LD_INT 7
70390: DOUBLE
70391: EQUAL
70392: IFTRUE 70438
70394: LD_INT 8
70396: DOUBLE
70397: EQUAL
70398: IFTRUE 70438
70400: LD_INT 13
70402: DOUBLE
70403: EQUAL
70404: IFTRUE 70438
70406: LD_INT 12
70408: DOUBLE
70409: EQUAL
70410: IFTRUE 70438
70412: LD_INT 15
70414: DOUBLE
70415: EQUAL
70416: IFTRUE 70438
70418: LD_INT 11
70420: DOUBLE
70421: EQUAL
70422: IFTRUE 70438
70424: LD_INT 14
70426: DOUBLE
70427: EQUAL
70428: IFTRUE 70438
70430: LD_INT 10
70432: DOUBLE
70433: EQUAL
70434: IFTRUE 70438
70436: GO 70494
70438: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
70439: LD_ADDR_VAR 0 9
70443: PUSH
70444: LD_VAR 0 41
70448: PUSH
70449: LD_VAR 0 42
70453: PUSH
70454: LD_VAR 0 43
70458: PUSH
70459: LD_VAR 0 44
70463: PUSH
70464: LD_VAR 0 45
70468: PUSH
70469: LD_VAR 0 46
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: PUSH
70482: LD_VAR 0 4
70486: PUSH
70487: LD_INT 1
70489: PLUS
70490: ARRAY
70491: ST_TO_ADDR
70492: GO 70747
70494: LD_INT 36
70496: DOUBLE
70497: EQUAL
70498: IFTRUE 70502
70500: GO 70558
70502: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
70503: LD_ADDR_VAR 0 9
70507: PUSH
70508: LD_VAR 0 47
70512: PUSH
70513: LD_VAR 0 48
70517: PUSH
70518: LD_VAR 0 49
70522: PUSH
70523: LD_VAR 0 50
70527: PUSH
70528: LD_VAR 0 51
70532: PUSH
70533: LD_VAR 0 52
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: PUSH
70546: LD_VAR 0 4
70550: PUSH
70551: LD_INT 1
70553: PLUS
70554: ARRAY
70555: ST_TO_ADDR
70556: GO 70747
70558: LD_INT 4
70560: DOUBLE
70561: EQUAL
70562: IFTRUE 70584
70564: LD_INT 5
70566: DOUBLE
70567: EQUAL
70568: IFTRUE 70584
70570: LD_INT 34
70572: DOUBLE
70573: EQUAL
70574: IFTRUE 70584
70576: LD_INT 37
70578: DOUBLE
70579: EQUAL
70580: IFTRUE 70584
70582: GO 70640
70584: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
70585: LD_ADDR_VAR 0 9
70589: PUSH
70590: LD_VAR 0 53
70594: PUSH
70595: LD_VAR 0 54
70599: PUSH
70600: LD_VAR 0 55
70604: PUSH
70605: LD_VAR 0 56
70609: PUSH
70610: LD_VAR 0 57
70614: PUSH
70615: LD_VAR 0 58
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: PUSH
70628: LD_VAR 0 4
70632: PUSH
70633: LD_INT 1
70635: PLUS
70636: ARRAY
70637: ST_TO_ADDR
70638: GO 70747
70640: LD_INT 31
70642: DOUBLE
70643: EQUAL
70644: IFTRUE 70690
70646: LD_INT 32
70648: DOUBLE
70649: EQUAL
70650: IFTRUE 70690
70652: LD_INT 33
70654: DOUBLE
70655: EQUAL
70656: IFTRUE 70690
70658: LD_INT 27
70660: DOUBLE
70661: EQUAL
70662: IFTRUE 70690
70664: LD_INT 26
70666: DOUBLE
70667: EQUAL
70668: IFTRUE 70690
70670: LD_INT 28
70672: DOUBLE
70673: EQUAL
70674: IFTRUE 70690
70676: LD_INT 29
70678: DOUBLE
70679: EQUAL
70680: IFTRUE 70690
70682: LD_INT 30
70684: DOUBLE
70685: EQUAL
70686: IFTRUE 70690
70688: GO 70746
70690: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
70691: LD_ADDR_VAR 0 9
70695: PUSH
70696: LD_VAR 0 59
70700: PUSH
70701: LD_VAR 0 60
70705: PUSH
70706: LD_VAR 0 61
70710: PUSH
70711: LD_VAR 0 62
70715: PUSH
70716: LD_VAR 0 63
70720: PUSH
70721: LD_VAR 0 64
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: PUSH
70734: LD_VAR 0 4
70738: PUSH
70739: LD_INT 1
70741: PLUS
70742: ARRAY
70743: ST_TO_ADDR
70744: GO 70747
70746: POP
// temp_list2 = [ ] ;
70747: LD_ADDR_VAR 0 10
70751: PUSH
70752: EMPTY
70753: ST_TO_ADDR
// for i in temp_list do
70754: LD_ADDR_VAR 0 8
70758: PUSH
70759: LD_VAR 0 9
70763: PUSH
70764: FOR_IN
70765: IFFALSE 70817
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
70767: LD_ADDR_VAR 0 10
70771: PUSH
70772: LD_VAR 0 10
70776: PUSH
70777: LD_VAR 0 8
70781: PUSH
70782: LD_INT 1
70784: ARRAY
70785: PUSH
70786: LD_VAR 0 2
70790: PLUS
70791: PUSH
70792: LD_VAR 0 8
70796: PUSH
70797: LD_INT 2
70799: ARRAY
70800: PUSH
70801: LD_VAR 0 3
70805: PLUS
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: EMPTY
70812: LIST
70813: ADD
70814: ST_TO_ADDR
70815: GO 70764
70817: POP
70818: POP
// result = temp_list2 ;
70819: LD_ADDR_VAR 0 7
70823: PUSH
70824: LD_VAR 0 10
70828: ST_TO_ADDR
// end ;
70829: LD_VAR 0 7
70833: RET
// export function EnemyInRange ( unit , dist ) ; begin
70834: LD_INT 0
70836: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
70837: LD_ADDR_VAR 0 3
70841: PUSH
70842: LD_VAR 0 1
70846: PPUSH
70847: CALL_OW 255
70851: PPUSH
70852: LD_VAR 0 1
70856: PPUSH
70857: CALL_OW 250
70861: PPUSH
70862: LD_VAR 0 1
70866: PPUSH
70867: CALL_OW 251
70871: PPUSH
70872: LD_VAR 0 2
70876: PPUSH
70877: CALL 44230 0 4
70881: PUSH
70882: LD_INT 4
70884: ARRAY
70885: ST_TO_ADDR
// end ;
70886: LD_VAR 0 3
70890: RET
// export function PlayerSeeMe ( unit ) ; begin
70891: LD_INT 0
70893: PPUSH
// result := See ( your_side , unit ) ;
70894: LD_ADDR_VAR 0 2
70898: PUSH
70899: LD_OWVAR 2
70903: PPUSH
70904: LD_VAR 0 1
70908: PPUSH
70909: CALL_OW 292
70913: ST_TO_ADDR
// end ;
70914: LD_VAR 0 2
70918: RET
// export function ReverseDir ( unit ) ; begin
70919: LD_INT 0
70921: PPUSH
// if not unit then
70922: LD_VAR 0 1
70926: NOT
70927: IFFALSE 70931
// exit ;
70929: GO 70954
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
70931: LD_ADDR_VAR 0 2
70935: PUSH
70936: LD_VAR 0 1
70940: PPUSH
70941: CALL_OW 254
70945: PUSH
70946: LD_INT 3
70948: PLUS
70949: PUSH
70950: LD_INT 6
70952: MOD
70953: ST_TO_ADDR
// end ;
70954: LD_VAR 0 2
70958: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
70959: LD_INT 0
70961: PPUSH
70962: PPUSH
70963: PPUSH
70964: PPUSH
70965: PPUSH
// if not hexes then
70966: LD_VAR 0 2
70970: NOT
70971: IFFALSE 70975
// exit ;
70973: GO 71123
// dist := 9999 ;
70975: LD_ADDR_VAR 0 5
70979: PUSH
70980: LD_INT 9999
70982: ST_TO_ADDR
// for i = 1 to hexes do
70983: LD_ADDR_VAR 0 4
70987: PUSH
70988: DOUBLE
70989: LD_INT 1
70991: DEC
70992: ST_TO_ADDR
70993: LD_VAR 0 2
70997: PUSH
70998: FOR_TO
70999: IFFALSE 71111
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
71001: LD_VAR 0 1
71005: PPUSH
71006: LD_VAR 0 2
71010: PUSH
71011: LD_VAR 0 4
71015: ARRAY
71016: PUSH
71017: LD_INT 1
71019: ARRAY
71020: PPUSH
71021: LD_VAR 0 2
71025: PUSH
71026: LD_VAR 0 4
71030: ARRAY
71031: PUSH
71032: LD_INT 2
71034: ARRAY
71035: PPUSH
71036: CALL_OW 297
71040: PUSH
71041: LD_VAR 0 5
71045: LESS
71046: IFFALSE 71109
// begin hex := hexes [ i ] ;
71048: LD_ADDR_VAR 0 7
71052: PUSH
71053: LD_VAR 0 2
71057: PUSH
71058: LD_VAR 0 4
71062: ARRAY
71063: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71064: LD_ADDR_VAR 0 5
71068: PUSH
71069: LD_VAR 0 1
71073: PPUSH
71074: LD_VAR 0 2
71078: PUSH
71079: LD_VAR 0 4
71083: ARRAY
71084: PUSH
71085: LD_INT 1
71087: ARRAY
71088: PPUSH
71089: LD_VAR 0 2
71093: PUSH
71094: LD_VAR 0 4
71098: ARRAY
71099: PUSH
71100: LD_INT 2
71102: ARRAY
71103: PPUSH
71104: CALL_OW 297
71108: ST_TO_ADDR
// end ; end ;
71109: GO 70998
71111: POP
71112: POP
// result := hex ;
71113: LD_ADDR_VAR 0 3
71117: PUSH
71118: LD_VAR 0 7
71122: ST_TO_ADDR
// end ;
71123: LD_VAR 0 3
71127: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71128: LD_INT 0
71130: PPUSH
71131: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71132: LD_VAR 0 1
71136: NOT
71137: PUSH
71138: LD_VAR 0 1
71142: PUSH
71143: LD_INT 21
71145: PUSH
71146: LD_INT 2
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 23
71155: PUSH
71156: LD_INT 2
71158: PUSH
71159: EMPTY
71160: LIST
71161: LIST
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PPUSH
71167: CALL_OW 69
71171: IN
71172: NOT
71173: OR
71174: IFFALSE 71178
// exit ;
71176: GO 71225
// for i = 1 to 3 do
71178: LD_ADDR_VAR 0 3
71182: PUSH
71183: DOUBLE
71184: LD_INT 1
71186: DEC
71187: ST_TO_ADDR
71188: LD_INT 3
71190: PUSH
71191: FOR_TO
71192: IFFALSE 71223
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
71194: LD_VAR 0 1
71198: PPUSH
71199: CALL_OW 250
71203: PPUSH
71204: LD_VAR 0 1
71208: PPUSH
71209: CALL_OW 251
71213: PPUSH
71214: LD_INT 1
71216: PPUSH
71217: CALL_OW 453
71221: GO 71191
71223: POP
71224: POP
// end ;
71225: LD_VAR 0 2
71229: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
71230: LD_INT 0
71232: PPUSH
71233: PPUSH
71234: PPUSH
71235: PPUSH
71236: PPUSH
71237: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
71238: LD_VAR 0 1
71242: NOT
71243: PUSH
71244: LD_VAR 0 2
71248: NOT
71249: OR
71250: PUSH
71251: LD_VAR 0 1
71255: PPUSH
71256: CALL_OW 314
71260: OR
71261: IFFALSE 71265
// exit ;
71263: GO 71706
// x := GetX ( enemy_unit ) ;
71265: LD_ADDR_VAR 0 7
71269: PUSH
71270: LD_VAR 0 2
71274: PPUSH
71275: CALL_OW 250
71279: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
71280: LD_ADDR_VAR 0 8
71284: PUSH
71285: LD_VAR 0 2
71289: PPUSH
71290: CALL_OW 251
71294: ST_TO_ADDR
// if not x or not y then
71295: LD_VAR 0 7
71299: NOT
71300: PUSH
71301: LD_VAR 0 8
71305: NOT
71306: OR
71307: IFFALSE 71311
// exit ;
71309: GO 71706
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
71311: LD_ADDR_VAR 0 6
71315: PUSH
71316: LD_VAR 0 7
71320: PPUSH
71321: LD_INT 0
71323: PPUSH
71324: LD_INT 4
71326: PPUSH
71327: CALL_OW 272
71331: PUSH
71332: LD_VAR 0 8
71336: PPUSH
71337: LD_INT 0
71339: PPUSH
71340: LD_INT 4
71342: PPUSH
71343: CALL_OW 273
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_VAR 0 7
71356: PPUSH
71357: LD_INT 1
71359: PPUSH
71360: LD_INT 4
71362: PPUSH
71363: CALL_OW 272
71367: PUSH
71368: LD_VAR 0 8
71372: PPUSH
71373: LD_INT 1
71375: PPUSH
71376: LD_INT 4
71378: PPUSH
71379: CALL_OW 273
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_VAR 0 7
71392: PPUSH
71393: LD_INT 2
71395: PPUSH
71396: LD_INT 4
71398: PPUSH
71399: CALL_OW 272
71403: PUSH
71404: LD_VAR 0 8
71408: PPUSH
71409: LD_INT 2
71411: PPUSH
71412: LD_INT 4
71414: PPUSH
71415: CALL_OW 273
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_VAR 0 7
71428: PPUSH
71429: LD_INT 3
71431: PPUSH
71432: LD_INT 4
71434: PPUSH
71435: CALL_OW 272
71439: PUSH
71440: LD_VAR 0 8
71444: PPUSH
71445: LD_INT 3
71447: PPUSH
71448: LD_INT 4
71450: PPUSH
71451: CALL_OW 273
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_VAR 0 7
71464: PPUSH
71465: LD_INT 4
71467: PPUSH
71468: LD_INT 4
71470: PPUSH
71471: CALL_OW 272
71475: PUSH
71476: LD_VAR 0 8
71480: PPUSH
71481: LD_INT 4
71483: PPUSH
71484: LD_INT 4
71486: PPUSH
71487: CALL_OW 273
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: LD_VAR 0 7
71500: PPUSH
71501: LD_INT 5
71503: PPUSH
71504: LD_INT 4
71506: PPUSH
71507: CALL_OW 272
71511: PUSH
71512: LD_VAR 0 8
71516: PPUSH
71517: LD_INT 5
71519: PPUSH
71520: LD_INT 4
71522: PPUSH
71523: CALL_OW 273
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: ST_TO_ADDR
// for i = tmp downto 1 do
71540: LD_ADDR_VAR 0 4
71544: PUSH
71545: DOUBLE
71546: LD_VAR 0 6
71550: INC
71551: ST_TO_ADDR
71552: LD_INT 1
71554: PUSH
71555: FOR_DOWNTO
71556: IFFALSE 71657
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
71558: LD_VAR 0 6
71562: PUSH
71563: LD_VAR 0 4
71567: ARRAY
71568: PUSH
71569: LD_INT 1
71571: ARRAY
71572: PPUSH
71573: LD_VAR 0 6
71577: PUSH
71578: LD_VAR 0 4
71582: ARRAY
71583: PUSH
71584: LD_INT 2
71586: ARRAY
71587: PPUSH
71588: CALL_OW 488
71592: NOT
71593: PUSH
71594: LD_VAR 0 6
71598: PUSH
71599: LD_VAR 0 4
71603: ARRAY
71604: PUSH
71605: LD_INT 1
71607: ARRAY
71608: PPUSH
71609: LD_VAR 0 6
71613: PUSH
71614: LD_VAR 0 4
71618: ARRAY
71619: PUSH
71620: LD_INT 2
71622: ARRAY
71623: PPUSH
71624: CALL_OW 428
71628: PUSH
71629: LD_INT 0
71631: NONEQUAL
71632: OR
71633: IFFALSE 71655
// tmp := Delete ( tmp , i ) ;
71635: LD_ADDR_VAR 0 6
71639: PUSH
71640: LD_VAR 0 6
71644: PPUSH
71645: LD_VAR 0 4
71649: PPUSH
71650: CALL_OW 3
71654: ST_TO_ADDR
71655: GO 71555
71657: POP
71658: POP
// j := GetClosestHex ( unit , tmp ) ;
71659: LD_ADDR_VAR 0 5
71663: PUSH
71664: LD_VAR 0 1
71668: PPUSH
71669: LD_VAR 0 6
71673: PPUSH
71674: CALL 70959 0 2
71678: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
71679: LD_VAR 0 1
71683: PPUSH
71684: LD_VAR 0 5
71688: PUSH
71689: LD_INT 1
71691: ARRAY
71692: PPUSH
71693: LD_VAR 0 5
71697: PUSH
71698: LD_INT 2
71700: ARRAY
71701: PPUSH
71702: CALL_OW 111
// end ;
71706: LD_VAR 0 3
71710: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
71711: LD_INT 0
71713: PPUSH
71714: PPUSH
71715: PPUSH
// uc_side = 0 ;
71716: LD_ADDR_OWVAR 20
71720: PUSH
71721: LD_INT 0
71723: ST_TO_ADDR
// uc_nation = 0 ;
71724: LD_ADDR_OWVAR 21
71728: PUSH
71729: LD_INT 0
71731: ST_TO_ADDR
// InitHc_All ( ) ;
71732: CALL_OW 584
// InitVc ;
71736: CALL_OW 20
// if mastodonts then
71740: LD_VAR 0 6
71744: IFFALSE 71811
// for i = 1 to mastodonts do
71746: LD_ADDR_VAR 0 11
71750: PUSH
71751: DOUBLE
71752: LD_INT 1
71754: DEC
71755: ST_TO_ADDR
71756: LD_VAR 0 6
71760: PUSH
71761: FOR_TO
71762: IFFALSE 71809
// begin vc_chassis := 31 ;
71764: LD_ADDR_OWVAR 37
71768: PUSH
71769: LD_INT 31
71771: ST_TO_ADDR
// vc_control := control_rider ;
71772: LD_ADDR_OWVAR 38
71776: PUSH
71777: LD_INT 4
71779: ST_TO_ADDR
// animal := CreateVehicle ;
71780: LD_ADDR_VAR 0 12
71784: PUSH
71785: CALL_OW 45
71789: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71790: LD_VAR 0 12
71794: PPUSH
71795: LD_VAR 0 8
71799: PPUSH
71800: LD_INT 0
71802: PPUSH
71803: CALL 73946 0 3
// end ;
71807: GO 71761
71809: POP
71810: POP
// if horses then
71811: LD_VAR 0 5
71815: IFFALSE 71882
// for i = 1 to horses do
71817: LD_ADDR_VAR 0 11
71821: PUSH
71822: DOUBLE
71823: LD_INT 1
71825: DEC
71826: ST_TO_ADDR
71827: LD_VAR 0 5
71831: PUSH
71832: FOR_TO
71833: IFFALSE 71880
// begin hc_class := 21 ;
71835: LD_ADDR_OWVAR 28
71839: PUSH
71840: LD_INT 21
71842: ST_TO_ADDR
// hc_gallery :=  ;
71843: LD_ADDR_OWVAR 33
71847: PUSH
71848: LD_STRING 
71850: ST_TO_ADDR
// animal := CreateHuman ;
71851: LD_ADDR_VAR 0 12
71855: PUSH
71856: CALL_OW 44
71860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71861: LD_VAR 0 12
71865: PPUSH
71866: LD_VAR 0 8
71870: PPUSH
71871: LD_INT 0
71873: PPUSH
71874: CALL 73946 0 3
// end ;
71878: GO 71832
71880: POP
71881: POP
// if birds then
71882: LD_VAR 0 1
71886: IFFALSE 71953
// for i = 1 to birds do
71888: LD_ADDR_VAR 0 11
71892: PUSH
71893: DOUBLE
71894: LD_INT 1
71896: DEC
71897: ST_TO_ADDR
71898: LD_VAR 0 1
71902: PUSH
71903: FOR_TO
71904: IFFALSE 71951
// begin hc_class = 18 ;
71906: LD_ADDR_OWVAR 28
71910: PUSH
71911: LD_INT 18
71913: ST_TO_ADDR
// hc_gallery =  ;
71914: LD_ADDR_OWVAR 33
71918: PUSH
71919: LD_STRING 
71921: ST_TO_ADDR
// animal := CreateHuman ;
71922: LD_ADDR_VAR 0 12
71926: PUSH
71927: CALL_OW 44
71931: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
71932: LD_VAR 0 12
71936: PPUSH
71937: LD_VAR 0 8
71941: PPUSH
71942: LD_INT 0
71944: PPUSH
71945: CALL 73946 0 3
// end ;
71949: GO 71903
71951: POP
71952: POP
// if tigers then
71953: LD_VAR 0 2
71957: IFFALSE 72041
// for i = 1 to tigers do
71959: LD_ADDR_VAR 0 11
71963: PUSH
71964: DOUBLE
71965: LD_INT 1
71967: DEC
71968: ST_TO_ADDR
71969: LD_VAR 0 2
71973: PUSH
71974: FOR_TO
71975: IFFALSE 72039
// begin hc_class = class_tiger ;
71977: LD_ADDR_OWVAR 28
71981: PUSH
71982: LD_INT 14
71984: ST_TO_ADDR
// hc_gallery =  ;
71985: LD_ADDR_OWVAR 33
71989: PUSH
71990: LD_STRING 
71992: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
71993: LD_ADDR_OWVAR 35
71997: PUSH
71998: LD_INT 7
72000: NEG
72001: PPUSH
72002: LD_INT 7
72004: PPUSH
72005: CALL_OW 12
72009: ST_TO_ADDR
// animal := CreateHuman ;
72010: LD_ADDR_VAR 0 12
72014: PUSH
72015: CALL_OW 44
72019: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72020: LD_VAR 0 12
72024: PPUSH
72025: LD_VAR 0 8
72029: PPUSH
72030: LD_INT 0
72032: PPUSH
72033: CALL 73946 0 3
// end ;
72037: GO 71974
72039: POP
72040: POP
// if apemans then
72041: LD_VAR 0 3
72045: IFFALSE 72168
// for i = 1 to apemans do
72047: LD_ADDR_VAR 0 11
72051: PUSH
72052: DOUBLE
72053: LD_INT 1
72055: DEC
72056: ST_TO_ADDR
72057: LD_VAR 0 3
72061: PUSH
72062: FOR_TO
72063: IFFALSE 72166
// begin hc_class = class_apeman ;
72065: LD_ADDR_OWVAR 28
72069: PUSH
72070: LD_INT 12
72072: ST_TO_ADDR
// hc_gallery =  ;
72073: LD_ADDR_OWVAR 33
72077: PUSH
72078: LD_STRING 
72080: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
72081: LD_ADDR_OWVAR 35
72085: PUSH
72086: LD_INT 2
72088: NEG
72089: PPUSH
72090: LD_INT 2
72092: PPUSH
72093: CALL_OW 12
72097: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
72098: LD_ADDR_OWVAR 31
72102: PUSH
72103: LD_INT 1
72105: PPUSH
72106: LD_INT 3
72108: PPUSH
72109: CALL_OW 12
72113: PUSH
72114: LD_INT 1
72116: PPUSH
72117: LD_INT 3
72119: PPUSH
72120: CALL_OW 12
72124: PUSH
72125: LD_INT 0
72127: PUSH
72128: LD_INT 0
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: ST_TO_ADDR
// animal := CreateHuman ;
72137: LD_ADDR_VAR 0 12
72141: PUSH
72142: CALL_OW 44
72146: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72147: LD_VAR 0 12
72151: PPUSH
72152: LD_VAR 0 8
72156: PPUSH
72157: LD_INT 0
72159: PPUSH
72160: CALL 73946 0 3
// end ;
72164: GO 72062
72166: POP
72167: POP
// if enchidnas then
72168: LD_VAR 0 4
72172: IFFALSE 72239
// for i = 1 to enchidnas do
72174: LD_ADDR_VAR 0 11
72178: PUSH
72179: DOUBLE
72180: LD_INT 1
72182: DEC
72183: ST_TO_ADDR
72184: LD_VAR 0 4
72188: PUSH
72189: FOR_TO
72190: IFFALSE 72237
// begin hc_class = 13 ;
72192: LD_ADDR_OWVAR 28
72196: PUSH
72197: LD_INT 13
72199: ST_TO_ADDR
// hc_gallery =  ;
72200: LD_ADDR_OWVAR 33
72204: PUSH
72205: LD_STRING 
72207: ST_TO_ADDR
// animal := CreateHuman ;
72208: LD_ADDR_VAR 0 12
72212: PUSH
72213: CALL_OW 44
72217: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
72218: LD_VAR 0 12
72222: PPUSH
72223: LD_VAR 0 8
72227: PPUSH
72228: LD_INT 0
72230: PPUSH
72231: CALL 73946 0 3
// end ;
72235: GO 72189
72237: POP
72238: POP
// if fishes then
72239: LD_VAR 0 7
72243: IFFALSE 72310
// for i = 1 to fishes do
72245: LD_ADDR_VAR 0 11
72249: PUSH
72250: DOUBLE
72251: LD_INT 1
72253: DEC
72254: ST_TO_ADDR
72255: LD_VAR 0 7
72259: PUSH
72260: FOR_TO
72261: IFFALSE 72308
// begin hc_class = 20 ;
72263: LD_ADDR_OWVAR 28
72267: PUSH
72268: LD_INT 20
72270: ST_TO_ADDR
// hc_gallery =  ;
72271: LD_ADDR_OWVAR 33
72275: PUSH
72276: LD_STRING 
72278: ST_TO_ADDR
// animal := CreateHuman ;
72279: LD_ADDR_VAR 0 12
72283: PUSH
72284: CALL_OW 44
72288: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
72289: LD_VAR 0 12
72293: PPUSH
72294: LD_VAR 0 9
72298: PPUSH
72299: LD_INT 0
72301: PPUSH
72302: CALL 73946 0 3
// end ;
72306: GO 72260
72308: POP
72309: POP
// end ;
72310: LD_VAR 0 10
72314: RET
// export function WantHeal ( sci , unit ) ; begin
72315: LD_INT 0
72317: PPUSH
// if GetTaskList ( sci ) > 0 then
72318: LD_VAR 0 1
72322: PPUSH
72323: CALL_OW 437
72327: PUSH
72328: LD_INT 0
72330: GREATER
72331: IFFALSE 72401
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
72333: LD_VAR 0 1
72337: PPUSH
72338: CALL_OW 437
72342: PUSH
72343: LD_INT 1
72345: ARRAY
72346: PUSH
72347: LD_INT 1
72349: ARRAY
72350: PUSH
72351: LD_STRING l
72353: EQUAL
72354: PUSH
72355: LD_VAR 0 1
72359: PPUSH
72360: CALL_OW 437
72364: PUSH
72365: LD_INT 1
72367: ARRAY
72368: PUSH
72369: LD_INT 4
72371: ARRAY
72372: PUSH
72373: LD_VAR 0 2
72377: EQUAL
72378: AND
72379: IFFALSE 72391
// result := true else
72381: LD_ADDR_VAR 0 3
72385: PUSH
72386: LD_INT 1
72388: ST_TO_ADDR
72389: GO 72399
// result := false ;
72391: LD_ADDR_VAR 0 3
72395: PUSH
72396: LD_INT 0
72398: ST_TO_ADDR
// end else
72399: GO 72409
// result := false ;
72401: LD_ADDR_VAR 0 3
72405: PUSH
72406: LD_INT 0
72408: ST_TO_ADDR
// end ;
72409: LD_VAR 0 3
72413: RET
// export function HealTarget ( sci ) ; begin
72414: LD_INT 0
72416: PPUSH
// if not sci then
72417: LD_VAR 0 1
72421: NOT
72422: IFFALSE 72426
// exit ;
72424: GO 72491
// result := 0 ;
72426: LD_ADDR_VAR 0 2
72430: PUSH
72431: LD_INT 0
72433: ST_TO_ADDR
// if GetTaskList ( sci ) then
72434: LD_VAR 0 1
72438: PPUSH
72439: CALL_OW 437
72443: IFFALSE 72491
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
72445: LD_VAR 0 1
72449: PPUSH
72450: CALL_OW 437
72454: PUSH
72455: LD_INT 1
72457: ARRAY
72458: PUSH
72459: LD_INT 1
72461: ARRAY
72462: PUSH
72463: LD_STRING l
72465: EQUAL
72466: IFFALSE 72491
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
72468: LD_ADDR_VAR 0 2
72472: PUSH
72473: LD_VAR 0 1
72477: PPUSH
72478: CALL_OW 437
72482: PUSH
72483: LD_INT 1
72485: ARRAY
72486: PUSH
72487: LD_INT 4
72489: ARRAY
72490: ST_TO_ADDR
// end ;
72491: LD_VAR 0 2
72495: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
72496: LD_INT 0
72498: PPUSH
72499: PPUSH
72500: PPUSH
72501: PPUSH
// if not base_units then
72502: LD_VAR 0 1
72506: NOT
72507: IFFALSE 72511
// exit ;
72509: GO 72598
// result := false ;
72511: LD_ADDR_VAR 0 2
72515: PUSH
72516: LD_INT 0
72518: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
72519: LD_ADDR_VAR 0 5
72523: PUSH
72524: LD_VAR 0 1
72528: PPUSH
72529: LD_INT 21
72531: PUSH
72532: LD_INT 3
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PPUSH
72539: CALL_OW 72
72543: ST_TO_ADDR
// if not tmp then
72544: LD_VAR 0 5
72548: NOT
72549: IFFALSE 72553
// exit ;
72551: GO 72598
// for i in tmp do
72553: LD_ADDR_VAR 0 3
72557: PUSH
72558: LD_VAR 0 5
72562: PUSH
72563: FOR_IN
72564: IFFALSE 72596
// begin result := EnemyInRange ( i , 22 ) ;
72566: LD_ADDR_VAR 0 2
72570: PUSH
72571: LD_VAR 0 3
72575: PPUSH
72576: LD_INT 22
72578: PPUSH
72579: CALL 70834 0 2
72583: ST_TO_ADDR
// if result then
72584: LD_VAR 0 2
72588: IFFALSE 72594
// exit ;
72590: POP
72591: POP
72592: GO 72598
// end ;
72594: GO 72563
72596: POP
72597: POP
// end ;
72598: LD_VAR 0 2
72602: RET
// export function FilterByTag ( units , tag ) ; begin
72603: LD_INT 0
72605: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
72606: LD_ADDR_VAR 0 3
72610: PUSH
72611: LD_VAR 0 1
72615: PPUSH
72616: LD_INT 120
72618: PUSH
72619: LD_VAR 0 2
72623: PUSH
72624: EMPTY
72625: LIST
72626: LIST
72627: PPUSH
72628: CALL_OW 72
72632: ST_TO_ADDR
// end ;
72633: LD_VAR 0 3
72637: RET
// export function IsDriver ( un ) ; begin
72638: LD_INT 0
72640: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
72641: LD_ADDR_VAR 0 2
72645: PUSH
72646: LD_VAR 0 1
72650: PUSH
72651: LD_INT 55
72653: PUSH
72654: EMPTY
72655: LIST
72656: PPUSH
72657: CALL_OW 69
72661: IN
72662: ST_TO_ADDR
// end ;
72663: LD_VAR 0 2
72667: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
72668: LD_INT 0
72670: PPUSH
72671: PPUSH
// list := [ ] ;
72672: LD_ADDR_VAR 0 5
72676: PUSH
72677: EMPTY
72678: ST_TO_ADDR
// case d of 0 :
72679: LD_VAR 0 3
72683: PUSH
72684: LD_INT 0
72686: DOUBLE
72687: EQUAL
72688: IFTRUE 72692
72690: GO 72825
72692: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
72693: LD_ADDR_VAR 0 5
72697: PUSH
72698: LD_VAR 0 1
72702: PUSH
72703: LD_INT 4
72705: MINUS
72706: PUSH
72707: LD_VAR 0 2
72711: PUSH
72712: LD_INT 4
72714: MINUS
72715: PUSH
72716: LD_INT 2
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: LIST
72723: PUSH
72724: LD_VAR 0 1
72728: PUSH
72729: LD_INT 3
72731: MINUS
72732: PUSH
72733: LD_VAR 0 2
72737: PUSH
72738: LD_INT 1
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: LIST
72745: PUSH
72746: LD_VAR 0 1
72750: PUSH
72751: LD_INT 4
72753: PLUS
72754: PUSH
72755: LD_VAR 0 2
72759: PUSH
72760: LD_INT 4
72762: PUSH
72763: EMPTY
72764: LIST
72765: LIST
72766: LIST
72767: PUSH
72768: LD_VAR 0 1
72772: PUSH
72773: LD_INT 3
72775: PLUS
72776: PUSH
72777: LD_VAR 0 2
72781: PUSH
72782: LD_INT 3
72784: PLUS
72785: PUSH
72786: LD_INT 5
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: LIST
72793: PUSH
72794: LD_VAR 0 1
72798: PUSH
72799: LD_VAR 0 2
72803: PUSH
72804: LD_INT 4
72806: PLUS
72807: PUSH
72808: LD_INT 0
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: LIST
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: ST_TO_ADDR
// end ; 1 :
72823: GO 73523
72825: LD_INT 1
72827: DOUBLE
72828: EQUAL
72829: IFTRUE 72833
72831: GO 72966
72833: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
72834: LD_ADDR_VAR 0 5
72838: PUSH
72839: LD_VAR 0 1
72843: PUSH
72844: LD_VAR 0 2
72848: PUSH
72849: LD_INT 4
72851: MINUS
72852: PUSH
72853: LD_INT 3
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: LIST
72860: PUSH
72861: LD_VAR 0 1
72865: PUSH
72866: LD_INT 3
72868: MINUS
72869: PUSH
72870: LD_VAR 0 2
72874: PUSH
72875: LD_INT 3
72877: MINUS
72878: PUSH
72879: LD_INT 2
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: LIST
72886: PUSH
72887: LD_VAR 0 1
72891: PUSH
72892: LD_INT 4
72894: MINUS
72895: PUSH
72896: LD_VAR 0 2
72900: PUSH
72901: LD_INT 1
72903: PUSH
72904: EMPTY
72905: LIST
72906: LIST
72907: LIST
72908: PUSH
72909: LD_VAR 0 1
72913: PUSH
72914: LD_VAR 0 2
72918: PUSH
72919: LD_INT 3
72921: PLUS
72922: PUSH
72923: LD_INT 0
72925: PUSH
72926: EMPTY
72927: LIST
72928: LIST
72929: LIST
72930: PUSH
72931: LD_VAR 0 1
72935: PUSH
72936: LD_INT 4
72938: PLUS
72939: PUSH
72940: LD_VAR 0 2
72944: PUSH
72945: LD_INT 4
72947: PLUS
72948: PUSH
72949: LD_INT 5
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: LIST
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: ST_TO_ADDR
// end ; 2 :
72964: GO 73523
72966: LD_INT 2
72968: DOUBLE
72969: EQUAL
72970: IFTRUE 72974
72972: GO 73103
72974: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
72975: LD_ADDR_VAR 0 5
72979: PUSH
72980: LD_VAR 0 1
72984: PUSH
72985: LD_VAR 0 2
72989: PUSH
72990: LD_INT 3
72992: MINUS
72993: PUSH
72994: LD_INT 3
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: LIST
73001: PUSH
73002: LD_VAR 0 1
73006: PUSH
73007: LD_INT 4
73009: PLUS
73010: PUSH
73011: LD_VAR 0 2
73015: PUSH
73016: LD_INT 4
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: LIST
73023: PUSH
73024: LD_VAR 0 1
73028: PUSH
73029: LD_VAR 0 2
73033: PUSH
73034: LD_INT 4
73036: PLUS
73037: PUSH
73038: LD_INT 0
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: LIST
73045: PUSH
73046: LD_VAR 0 1
73050: PUSH
73051: LD_INT 3
73053: MINUS
73054: PUSH
73055: LD_VAR 0 2
73059: PUSH
73060: LD_INT 1
73062: PUSH
73063: EMPTY
73064: LIST
73065: LIST
73066: LIST
73067: PUSH
73068: LD_VAR 0 1
73072: PUSH
73073: LD_INT 4
73075: MINUS
73076: PUSH
73077: LD_VAR 0 2
73081: PUSH
73082: LD_INT 4
73084: MINUS
73085: PUSH
73086: LD_INT 2
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: LIST
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: ST_TO_ADDR
// end ; 3 :
73101: GO 73523
73103: LD_INT 3
73105: DOUBLE
73106: EQUAL
73107: IFTRUE 73111
73109: GO 73244
73111: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
73112: LD_ADDR_VAR 0 5
73116: PUSH
73117: LD_VAR 0 1
73121: PUSH
73122: LD_INT 3
73124: PLUS
73125: PUSH
73126: LD_VAR 0 2
73130: PUSH
73131: LD_INT 4
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: LIST
73138: PUSH
73139: LD_VAR 0 1
73143: PUSH
73144: LD_INT 4
73146: PLUS
73147: PUSH
73148: LD_VAR 0 2
73152: PUSH
73153: LD_INT 4
73155: PLUS
73156: PUSH
73157: LD_INT 5
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: LIST
73164: PUSH
73165: LD_VAR 0 1
73169: PUSH
73170: LD_INT 4
73172: MINUS
73173: PUSH
73174: LD_VAR 0 2
73178: PUSH
73179: LD_INT 1
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: LIST
73186: PUSH
73187: LD_VAR 0 1
73191: PUSH
73192: LD_VAR 0 2
73196: PUSH
73197: LD_INT 4
73199: MINUS
73200: PUSH
73201: LD_INT 3
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: LIST
73208: PUSH
73209: LD_VAR 0 1
73213: PUSH
73214: LD_INT 3
73216: MINUS
73217: PUSH
73218: LD_VAR 0 2
73222: PUSH
73223: LD_INT 3
73225: MINUS
73226: PUSH
73227: LD_INT 2
73229: PUSH
73230: EMPTY
73231: LIST
73232: LIST
73233: LIST
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: ST_TO_ADDR
// end ; 4 :
73242: GO 73523
73244: LD_INT 4
73246: DOUBLE
73247: EQUAL
73248: IFTRUE 73252
73250: GO 73385
73252: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
73253: LD_ADDR_VAR 0 5
73257: PUSH
73258: LD_VAR 0 1
73262: PUSH
73263: LD_VAR 0 2
73267: PUSH
73268: LD_INT 4
73270: PLUS
73271: PUSH
73272: LD_INT 0
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: LIST
73279: PUSH
73280: LD_VAR 0 1
73284: PUSH
73285: LD_INT 3
73287: PLUS
73288: PUSH
73289: LD_VAR 0 2
73293: PUSH
73294: LD_INT 3
73296: PLUS
73297: PUSH
73298: LD_INT 5
73300: PUSH
73301: EMPTY
73302: LIST
73303: LIST
73304: LIST
73305: PUSH
73306: LD_VAR 0 1
73310: PUSH
73311: LD_INT 4
73313: PLUS
73314: PUSH
73315: LD_VAR 0 2
73319: PUSH
73320: LD_INT 4
73322: PUSH
73323: EMPTY
73324: LIST
73325: LIST
73326: LIST
73327: PUSH
73328: LD_VAR 0 1
73332: PUSH
73333: LD_VAR 0 2
73337: PUSH
73338: LD_INT 3
73340: MINUS
73341: PUSH
73342: LD_INT 3
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: LIST
73349: PUSH
73350: LD_VAR 0 1
73354: PUSH
73355: LD_INT 4
73357: MINUS
73358: PUSH
73359: LD_VAR 0 2
73363: PUSH
73364: LD_INT 4
73366: MINUS
73367: PUSH
73368: LD_INT 2
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: LIST
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: LIST
73380: LIST
73381: LIST
73382: ST_TO_ADDR
// end ; 5 :
73383: GO 73523
73385: LD_INT 5
73387: DOUBLE
73388: EQUAL
73389: IFTRUE 73393
73391: GO 73522
73393: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
73394: LD_ADDR_VAR 0 5
73398: PUSH
73399: LD_VAR 0 1
73403: PUSH
73404: LD_INT 4
73406: MINUS
73407: PUSH
73408: LD_VAR 0 2
73412: PUSH
73413: LD_INT 1
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: LIST
73420: PUSH
73421: LD_VAR 0 1
73425: PUSH
73426: LD_VAR 0 2
73430: PUSH
73431: LD_INT 4
73433: MINUS
73434: PUSH
73435: LD_INT 3
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: LIST
73442: PUSH
73443: LD_VAR 0 1
73447: PUSH
73448: LD_INT 4
73450: PLUS
73451: PUSH
73452: LD_VAR 0 2
73456: PUSH
73457: LD_INT 4
73459: PLUS
73460: PUSH
73461: LD_INT 5
73463: PUSH
73464: EMPTY
73465: LIST
73466: LIST
73467: LIST
73468: PUSH
73469: LD_VAR 0 1
73473: PUSH
73474: LD_INT 3
73476: PLUS
73477: PUSH
73478: LD_VAR 0 2
73482: PUSH
73483: LD_INT 4
73485: PUSH
73486: EMPTY
73487: LIST
73488: LIST
73489: LIST
73490: PUSH
73491: LD_VAR 0 1
73495: PUSH
73496: LD_VAR 0 2
73500: PUSH
73501: LD_INT 3
73503: PLUS
73504: PUSH
73505: LD_INT 0
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: LIST
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: LIST
73517: LIST
73518: LIST
73519: ST_TO_ADDR
// end ; end ;
73520: GO 73523
73522: POP
// result := list ;
73523: LD_ADDR_VAR 0 4
73527: PUSH
73528: LD_VAR 0 5
73532: ST_TO_ADDR
// end ;
73533: LD_VAR 0 4
73537: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
73538: LD_INT 0
73540: PPUSH
73541: PPUSH
73542: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
73543: LD_VAR 0 1
73547: NOT
73548: PUSH
73549: LD_VAR 0 2
73553: PUSH
73554: LD_INT 1
73556: PUSH
73557: LD_INT 2
73559: PUSH
73560: LD_INT 3
73562: PUSH
73563: LD_INT 4
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: IN
73572: NOT
73573: OR
73574: IFFALSE 73578
// exit ;
73576: GO 73670
// tmp := [ ] ;
73578: LD_ADDR_VAR 0 5
73582: PUSH
73583: EMPTY
73584: ST_TO_ADDR
// for i in units do
73585: LD_ADDR_VAR 0 4
73589: PUSH
73590: LD_VAR 0 1
73594: PUSH
73595: FOR_IN
73596: IFFALSE 73639
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
73598: LD_ADDR_VAR 0 5
73602: PUSH
73603: LD_VAR 0 5
73607: PPUSH
73608: LD_VAR 0 5
73612: PUSH
73613: LD_INT 1
73615: PLUS
73616: PPUSH
73617: LD_VAR 0 4
73621: PPUSH
73622: LD_VAR 0 2
73626: PPUSH
73627: CALL_OW 259
73631: PPUSH
73632: CALL_OW 2
73636: ST_TO_ADDR
73637: GO 73595
73639: POP
73640: POP
// if not tmp then
73641: LD_VAR 0 5
73645: NOT
73646: IFFALSE 73650
// exit ;
73648: GO 73670
// result := SortListByListDesc ( units , tmp ) ;
73650: LD_ADDR_VAR 0 3
73654: PUSH
73655: LD_VAR 0 1
73659: PPUSH
73660: LD_VAR 0 5
73664: PPUSH
73665: CALL_OW 77
73669: ST_TO_ADDR
// end ;
73670: LD_VAR 0 3
73674: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
73675: LD_INT 0
73677: PPUSH
73678: PPUSH
73679: PPUSH
// result := false ;
73680: LD_ADDR_VAR 0 3
73684: PUSH
73685: LD_INT 0
73687: ST_TO_ADDR
// x := GetX ( building ) ;
73688: LD_ADDR_VAR 0 4
73692: PUSH
73693: LD_VAR 0 2
73697: PPUSH
73698: CALL_OW 250
73702: ST_TO_ADDR
// y := GetY ( building ) ;
73703: LD_ADDR_VAR 0 5
73707: PUSH
73708: LD_VAR 0 2
73712: PPUSH
73713: CALL_OW 251
73717: ST_TO_ADDR
// if not building or not x or not y then
73718: LD_VAR 0 2
73722: NOT
73723: PUSH
73724: LD_VAR 0 4
73728: NOT
73729: OR
73730: PUSH
73731: LD_VAR 0 5
73735: NOT
73736: OR
73737: IFFALSE 73741
// exit ;
73739: GO 73833
// if GetTaskList ( unit ) then
73741: LD_VAR 0 1
73745: PPUSH
73746: CALL_OW 437
73750: IFFALSE 73833
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73752: LD_STRING e
73754: PUSH
73755: LD_VAR 0 1
73759: PPUSH
73760: CALL_OW 437
73764: PUSH
73765: LD_INT 1
73767: ARRAY
73768: PUSH
73769: LD_INT 1
73771: ARRAY
73772: EQUAL
73773: PUSH
73774: LD_VAR 0 4
73778: PUSH
73779: LD_VAR 0 1
73783: PPUSH
73784: CALL_OW 437
73788: PUSH
73789: LD_INT 1
73791: ARRAY
73792: PUSH
73793: LD_INT 2
73795: ARRAY
73796: EQUAL
73797: AND
73798: PUSH
73799: LD_VAR 0 5
73803: PUSH
73804: LD_VAR 0 1
73808: PPUSH
73809: CALL_OW 437
73813: PUSH
73814: LD_INT 1
73816: ARRAY
73817: PUSH
73818: LD_INT 3
73820: ARRAY
73821: EQUAL
73822: AND
73823: IFFALSE 73833
// result := true end ;
73825: LD_ADDR_VAR 0 3
73829: PUSH
73830: LD_INT 1
73832: ST_TO_ADDR
// end ;
73833: LD_VAR 0 3
73837: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
73838: LD_INT 0
73840: PPUSH
// result := false ;
73841: LD_ADDR_VAR 0 4
73845: PUSH
73846: LD_INT 0
73848: ST_TO_ADDR
// if GetTaskList ( unit ) then
73849: LD_VAR 0 1
73853: PPUSH
73854: CALL_OW 437
73858: IFFALSE 73941
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
73860: LD_STRING M
73862: PUSH
73863: LD_VAR 0 1
73867: PPUSH
73868: CALL_OW 437
73872: PUSH
73873: LD_INT 1
73875: ARRAY
73876: PUSH
73877: LD_INT 1
73879: ARRAY
73880: EQUAL
73881: PUSH
73882: LD_VAR 0 2
73886: PUSH
73887: LD_VAR 0 1
73891: PPUSH
73892: CALL_OW 437
73896: PUSH
73897: LD_INT 1
73899: ARRAY
73900: PUSH
73901: LD_INT 2
73903: ARRAY
73904: EQUAL
73905: AND
73906: PUSH
73907: LD_VAR 0 3
73911: PUSH
73912: LD_VAR 0 1
73916: PPUSH
73917: CALL_OW 437
73921: PUSH
73922: LD_INT 1
73924: ARRAY
73925: PUSH
73926: LD_INT 3
73928: ARRAY
73929: EQUAL
73930: AND
73931: IFFALSE 73941
// result := true ;
73933: LD_ADDR_VAR 0 4
73937: PUSH
73938: LD_INT 1
73940: ST_TO_ADDR
// end ; end ;
73941: LD_VAR 0 4
73945: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
73946: LD_INT 0
73948: PPUSH
73949: PPUSH
73950: PPUSH
73951: PPUSH
// if not unit or not area then
73952: LD_VAR 0 1
73956: NOT
73957: PUSH
73958: LD_VAR 0 2
73962: NOT
73963: OR
73964: IFFALSE 73968
// exit ;
73966: GO 74132
// tmp := AreaToList ( area , i ) ;
73968: LD_ADDR_VAR 0 6
73972: PUSH
73973: LD_VAR 0 2
73977: PPUSH
73978: LD_VAR 0 5
73982: PPUSH
73983: CALL_OW 517
73987: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
73988: LD_ADDR_VAR 0 5
73992: PUSH
73993: DOUBLE
73994: LD_INT 1
73996: DEC
73997: ST_TO_ADDR
73998: LD_VAR 0 6
74002: PUSH
74003: LD_INT 1
74005: ARRAY
74006: PUSH
74007: FOR_TO
74008: IFFALSE 74130
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
74010: LD_ADDR_VAR 0 7
74014: PUSH
74015: LD_VAR 0 6
74019: PUSH
74020: LD_INT 1
74022: ARRAY
74023: PUSH
74024: LD_VAR 0 5
74028: ARRAY
74029: PUSH
74030: LD_VAR 0 6
74034: PUSH
74035: LD_INT 2
74037: ARRAY
74038: PUSH
74039: LD_VAR 0 5
74043: ARRAY
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
74049: LD_VAR 0 7
74053: PUSH
74054: LD_INT 1
74056: ARRAY
74057: PPUSH
74058: LD_VAR 0 7
74062: PUSH
74063: LD_INT 2
74065: ARRAY
74066: PPUSH
74067: CALL_OW 428
74071: PUSH
74072: LD_INT 0
74074: EQUAL
74075: IFFALSE 74128
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
74077: LD_VAR 0 1
74081: PPUSH
74082: LD_VAR 0 7
74086: PUSH
74087: LD_INT 1
74089: ARRAY
74090: PPUSH
74091: LD_VAR 0 7
74095: PUSH
74096: LD_INT 2
74098: ARRAY
74099: PPUSH
74100: LD_VAR 0 3
74104: PPUSH
74105: CALL_OW 48
// result := IsPlaced ( unit ) ;
74109: LD_ADDR_VAR 0 4
74113: PUSH
74114: LD_VAR 0 1
74118: PPUSH
74119: CALL_OW 305
74123: ST_TO_ADDR
// exit ;
74124: POP
74125: POP
74126: GO 74132
// end ; end ;
74128: GO 74007
74130: POP
74131: POP
// end ;
74132: LD_VAR 0 4
74136: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
74137: LD_INT 0
74139: PPUSH
74140: PPUSH
74141: PPUSH
// if not side or side > 8 then
74142: LD_VAR 0 1
74146: NOT
74147: PUSH
74148: LD_VAR 0 1
74152: PUSH
74153: LD_INT 8
74155: GREATER
74156: OR
74157: IFFALSE 74161
// exit ;
74159: GO 74348
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
74161: LD_ADDR_VAR 0 4
74165: PUSH
74166: LD_INT 22
74168: PUSH
74169: LD_VAR 0 1
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: PUSH
74178: LD_INT 21
74180: PUSH
74181: LD_INT 3
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: PPUSH
74192: CALL_OW 69
74196: ST_TO_ADDR
// if not tmp then
74197: LD_VAR 0 4
74201: NOT
74202: IFFALSE 74206
// exit ;
74204: GO 74348
// enable_addtolog := true ;
74206: LD_ADDR_OWVAR 81
74210: PUSH
74211: LD_INT 1
74213: ST_TO_ADDR
// AddToLog ( [ ) ;
74214: LD_STRING [
74216: PPUSH
74217: CALL_OW 561
// for i in tmp do
74221: LD_ADDR_VAR 0 3
74225: PUSH
74226: LD_VAR 0 4
74230: PUSH
74231: FOR_IN
74232: IFFALSE 74339
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
74234: LD_STRING [
74236: PUSH
74237: LD_VAR 0 3
74241: PPUSH
74242: CALL_OW 266
74246: STR
74247: PUSH
74248: LD_STRING , 
74250: STR
74251: PUSH
74252: LD_VAR 0 3
74256: PPUSH
74257: CALL_OW 250
74261: STR
74262: PUSH
74263: LD_STRING , 
74265: STR
74266: PUSH
74267: LD_VAR 0 3
74271: PPUSH
74272: CALL_OW 251
74276: STR
74277: PUSH
74278: LD_STRING , 
74280: STR
74281: PUSH
74282: LD_VAR 0 3
74286: PPUSH
74287: CALL_OW 254
74291: STR
74292: PUSH
74293: LD_STRING , 
74295: STR
74296: PUSH
74297: LD_VAR 0 3
74301: PPUSH
74302: LD_INT 1
74304: PPUSH
74305: CALL_OW 268
74309: STR
74310: PUSH
74311: LD_STRING , 
74313: STR
74314: PUSH
74315: LD_VAR 0 3
74319: PPUSH
74320: LD_INT 2
74322: PPUSH
74323: CALL_OW 268
74327: STR
74328: PUSH
74329: LD_STRING ],
74331: STR
74332: PPUSH
74333: CALL_OW 561
// end ;
74337: GO 74231
74339: POP
74340: POP
// AddToLog ( ]; ) ;
74341: LD_STRING ];
74343: PPUSH
74344: CALL_OW 561
// end ;
74348: LD_VAR 0 2
74352: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
74353: LD_INT 0
74355: PPUSH
74356: PPUSH
74357: PPUSH
74358: PPUSH
74359: PPUSH
// if not area or not rate or not max then
74360: LD_VAR 0 1
74364: NOT
74365: PUSH
74366: LD_VAR 0 2
74370: NOT
74371: OR
74372: PUSH
74373: LD_VAR 0 4
74377: NOT
74378: OR
74379: IFFALSE 74383
// exit ;
74381: GO 74572
// while 1 do
74383: LD_INT 1
74385: IFFALSE 74572
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
74387: LD_ADDR_VAR 0 9
74391: PUSH
74392: LD_VAR 0 1
74396: PPUSH
74397: LD_INT 1
74399: PPUSH
74400: CALL_OW 287
74404: PUSH
74405: LD_INT 10
74407: MUL
74408: ST_TO_ADDR
// r := rate / 10 ;
74409: LD_ADDR_VAR 0 7
74413: PUSH
74414: LD_VAR 0 2
74418: PUSH
74419: LD_INT 10
74421: DIVREAL
74422: ST_TO_ADDR
// time := 1 1$00 ;
74423: LD_ADDR_VAR 0 8
74427: PUSH
74428: LD_INT 2100
74430: ST_TO_ADDR
// if amount < min then
74431: LD_VAR 0 9
74435: PUSH
74436: LD_VAR 0 3
74440: LESS
74441: IFFALSE 74459
// r := r * 2 else
74443: LD_ADDR_VAR 0 7
74447: PUSH
74448: LD_VAR 0 7
74452: PUSH
74453: LD_INT 2
74455: MUL
74456: ST_TO_ADDR
74457: GO 74485
// if amount > max then
74459: LD_VAR 0 9
74463: PUSH
74464: LD_VAR 0 4
74468: GREATER
74469: IFFALSE 74485
// r := r / 2 ;
74471: LD_ADDR_VAR 0 7
74475: PUSH
74476: LD_VAR 0 7
74480: PUSH
74481: LD_INT 2
74483: DIVREAL
74484: ST_TO_ADDR
// time := time / r ;
74485: LD_ADDR_VAR 0 8
74489: PUSH
74490: LD_VAR 0 8
74494: PUSH
74495: LD_VAR 0 7
74499: DIVREAL
74500: ST_TO_ADDR
// if time < 0 then
74501: LD_VAR 0 8
74505: PUSH
74506: LD_INT 0
74508: LESS
74509: IFFALSE 74526
// time := time * - 1 ;
74511: LD_ADDR_VAR 0 8
74515: PUSH
74516: LD_VAR 0 8
74520: PUSH
74521: LD_INT 1
74523: NEG
74524: MUL
74525: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
74526: LD_VAR 0 8
74530: PUSH
74531: LD_INT 35
74533: PPUSH
74534: LD_INT 875
74536: PPUSH
74537: CALL_OW 12
74541: PLUS
74542: PPUSH
74543: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
74547: LD_INT 1
74549: PPUSH
74550: LD_INT 5
74552: PPUSH
74553: CALL_OW 12
74557: PPUSH
74558: LD_VAR 0 1
74562: PPUSH
74563: LD_INT 1
74565: PPUSH
74566: CALL_OW 55
// end ;
74570: GO 74383
// end ;
74572: LD_VAR 0 5
74576: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
74577: LD_INT 0
74579: PPUSH
74580: PPUSH
74581: PPUSH
74582: PPUSH
74583: PPUSH
74584: PPUSH
74585: PPUSH
74586: PPUSH
// if not turrets or not factories then
74587: LD_VAR 0 1
74591: NOT
74592: PUSH
74593: LD_VAR 0 2
74597: NOT
74598: OR
74599: IFFALSE 74603
// exit ;
74601: GO 74910
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
74603: LD_ADDR_VAR 0 10
74607: PUSH
74608: LD_INT 5
74610: PUSH
74611: LD_INT 6
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: PUSH
74618: LD_INT 2
74620: PUSH
74621: LD_INT 4
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: PUSH
74628: LD_INT 3
74630: PUSH
74631: LD_INT 5
74633: PUSH
74634: EMPTY
74635: LIST
74636: LIST
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: LIST
74642: PUSH
74643: LD_INT 24
74645: PUSH
74646: LD_INT 25
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: PUSH
74653: LD_INT 23
74655: PUSH
74656: LD_INT 27
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: PUSH
74667: LD_INT 42
74669: PUSH
74670: LD_INT 43
74672: PUSH
74673: EMPTY
74674: LIST
74675: LIST
74676: PUSH
74677: LD_INT 44
74679: PUSH
74680: LD_INT 46
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: PUSH
74687: LD_INT 45
74689: PUSH
74690: LD_INT 47
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: LIST
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: LIST
74706: ST_TO_ADDR
// result := [ ] ;
74707: LD_ADDR_VAR 0 3
74711: PUSH
74712: EMPTY
74713: ST_TO_ADDR
// for i in turrets do
74714: LD_ADDR_VAR 0 4
74718: PUSH
74719: LD_VAR 0 1
74723: PUSH
74724: FOR_IN
74725: IFFALSE 74908
// begin nat := GetNation ( i ) ;
74727: LD_ADDR_VAR 0 7
74731: PUSH
74732: LD_VAR 0 4
74736: PPUSH
74737: CALL_OW 248
74741: ST_TO_ADDR
// weapon := 0 ;
74742: LD_ADDR_VAR 0 8
74746: PUSH
74747: LD_INT 0
74749: ST_TO_ADDR
// if not nat then
74750: LD_VAR 0 7
74754: NOT
74755: IFFALSE 74759
// continue ;
74757: GO 74724
// for j in list [ nat ] do
74759: LD_ADDR_VAR 0 5
74763: PUSH
74764: LD_VAR 0 10
74768: PUSH
74769: LD_VAR 0 7
74773: ARRAY
74774: PUSH
74775: FOR_IN
74776: IFFALSE 74817
// if GetBWeapon ( i ) = j [ 1 ] then
74778: LD_VAR 0 4
74782: PPUSH
74783: CALL_OW 269
74787: PUSH
74788: LD_VAR 0 5
74792: PUSH
74793: LD_INT 1
74795: ARRAY
74796: EQUAL
74797: IFFALSE 74815
// begin weapon := j [ 2 ] ;
74799: LD_ADDR_VAR 0 8
74803: PUSH
74804: LD_VAR 0 5
74808: PUSH
74809: LD_INT 2
74811: ARRAY
74812: ST_TO_ADDR
// break ;
74813: GO 74817
// end ;
74815: GO 74775
74817: POP
74818: POP
// if not weapon then
74819: LD_VAR 0 8
74823: NOT
74824: IFFALSE 74828
// continue ;
74826: GO 74724
// for k in factories do
74828: LD_ADDR_VAR 0 6
74832: PUSH
74833: LD_VAR 0 2
74837: PUSH
74838: FOR_IN
74839: IFFALSE 74904
// begin weapons := AvailableWeaponList ( k ) ;
74841: LD_ADDR_VAR 0 9
74845: PUSH
74846: LD_VAR 0 6
74850: PPUSH
74851: CALL_OW 478
74855: ST_TO_ADDR
// if not weapons then
74856: LD_VAR 0 9
74860: NOT
74861: IFFALSE 74865
// continue ;
74863: GO 74838
// if weapon in weapons then
74865: LD_VAR 0 8
74869: PUSH
74870: LD_VAR 0 9
74874: IN
74875: IFFALSE 74902
// begin result := [ i , weapon ] ;
74877: LD_ADDR_VAR 0 3
74881: PUSH
74882: LD_VAR 0 4
74886: PUSH
74887: LD_VAR 0 8
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: ST_TO_ADDR
// exit ;
74896: POP
74897: POP
74898: POP
74899: POP
74900: GO 74910
// end ; end ;
74902: GO 74838
74904: POP
74905: POP
// end ;
74906: GO 74724
74908: POP
74909: POP
// end ;
74910: LD_VAR 0 3
74914: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
74915: LD_INT 0
74917: PPUSH
// if not side or side > 8 then
74918: LD_VAR 0 3
74922: NOT
74923: PUSH
74924: LD_VAR 0 3
74928: PUSH
74929: LD_INT 8
74931: GREATER
74932: OR
74933: IFFALSE 74937
// exit ;
74935: GO 74996
// if not range then
74937: LD_VAR 0 4
74941: NOT
74942: IFFALSE 74953
// range := - 12 ;
74944: LD_ADDR_VAR 0 4
74948: PUSH
74949: LD_INT 12
74951: NEG
74952: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
74953: LD_VAR 0 1
74957: PPUSH
74958: LD_VAR 0 2
74962: PPUSH
74963: LD_VAR 0 3
74967: PPUSH
74968: LD_VAR 0 4
74972: PPUSH
74973: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
74977: LD_VAR 0 1
74981: PPUSH
74982: LD_VAR 0 2
74986: PPUSH
74987: LD_VAR 0 3
74991: PPUSH
74992: CALL_OW 331
// end ;
74996: LD_VAR 0 5
75000: RET
// export function Video ( mode ) ; begin
75001: LD_INT 0
75003: PPUSH
// ingame_video = mode ;
75004: LD_ADDR_OWVAR 52
75008: PUSH
75009: LD_VAR 0 1
75013: ST_TO_ADDR
// interface_hidden = mode ;
75014: LD_ADDR_OWVAR 54
75018: PUSH
75019: LD_VAR 0 1
75023: ST_TO_ADDR
// end ;
75024: LD_VAR 0 2
75028: RET
// export function Join ( array , element ) ; begin
75029: LD_INT 0
75031: PPUSH
// result := Replace ( array , array + 1 , element ) ;
75032: LD_ADDR_VAR 0 3
75036: PUSH
75037: LD_VAR 0 1
75041: PPUSH
75042: LD_VAR 0 1
75046: PUSH
75047: LD_INT 1
75049: PLUS
75050: PPUSH
75051: LD_VAR 0 2
75055: PPUSH
75056: CALL_OW 1
75060: ST_TO_ADDR
// end ;
75061: LD_VAR 0 3
75065: RET
// export function JoinUnion ( array , element ) ; begin
75066: LD_INT 0
75068: PPUSH
// result := array union element ;
75069: LD_ADDR_VAR 0 3
75073: PUSH
75074: LD_VAR 0 1
75078: PUSH
75079: LD_VAR 0 2
75083: UNION
75084: ST_TO_ADDR
// end ;
75085: LD_VAR 0 3
75089: RET
// export function GetBehemoths ( side ) ; begin
75090: LD_INT 0
75092: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
75093: LD_ADDR_VAR 0 2
75097: PUSH
75098: LD_INT 22
75100: PUSH
75101: LD_VAR 0 1
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: PUSH
75110: LD_INT 31
75112: PUSH
75113: LD_INT 25
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: PPUSH
75124: CALL_OW 69
75128: ST_TO_ADDR
// end ;
75129: LD_VAR 0 2
75133: RET
// export function Shuffle ( array ) ; var i , index ; begin
75134: LD_INT 0
75136: PPUSH
75137: PPUSH
75138: PPUSH
// result := [ ] ;
75139: LD_ADDR_VAR 0 2
75143: PUSH
75144: EMPTY
75145: ST_TO_ADDR
// if not array then
75146: LD_VAR 0 1
75150: NOT
75151: IFFALSE 75155
// exit ;
75153: GO 75254
// Randomize ;
75155: CALL_OW 10
// for i = array downto 1 do
75159: LD_ADDR_VAR 0 3
75163: PUSH
75164: DOUBLE
75165: LD_VAR 0 1
75169: INC
75170: ST_TO_ADDR
75171: LD_INT 1
75173: PUSH
75174: FOR_DOWNTO
75175: IFFALSE 75252
// begin index := rand ( 1 , array ) ;
75177: LD_ADDR_VAR 0 4
75181: PUSH
75182: LD_INT 1
75184: PPUSH
75185: LD_VAR 0 1
75189: PPUSH
75190: CALL_OW 12
75194: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
75195: LD_ADDR_VAR 0 2
75199: PUSH
75200: LD_VAR 0 2
75204: PPUSH
75205: LD_VAR 0 2
75209: PUSH
75210: LD_INT 1
75212: PLUS
75213: PPUSH
75214: LD_VAR 0 1
75218: PUSH
75219: LD_VAR 0 4
75223: ARRAY
75224: PPUSH
75225: CALL_OW 2
75229: ST_TO_ADDR
// array := Delete ( array , index ) ;
75230: LD_ADDR_VAR 0 1
75234: PUSH
75235: LD_VAR 0 1
75239: PPUSH
75240: LD_VAR 0 4
75244: PPUSH
75245: CALL_OW 3
75249: ST_TO_ADDR
// end ;
75250: GO 75174
75252: POP
75253: POP
// end ;
75254: LD_VAR 0 2
75258: RET
// export function GetBaseMaterials ( base ) ; begin
75259: LD_INT 0
75261: PPUSH
// result := [ 0 , 0 , 0 ] ;
75262: LD_ADDR_VAR 0 2
75266: PUSH
75267: LD_INT 0
75269: PUSH
75270: LD_INT 0
75272: PUSH
75273: LD_INT 0
75275: PUSH
75276: EMPTY
75277: LIST
75278: LIST
75279: LIST
75280: ST_TO_ADDR
// if not base then
75281: LD_VAR 0 1
75285: NOT
75286: IFFALSE 75290
// exit ;
75288: GO 75339
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
75290: LD_ADDR_VAR 0 2
75294: PUSH
75295: LD_VAR 0 1
75299: PPUSH
75300: LD_INT 1
75302: PPUSH
75303: CALL_OW 275
75307: PUSH
75308: LD_VAR 0 1
75312: PPUSH
75313: LD_INT 2
75315: PPUSH
75316: CALL_OW 275
75320: PUSH
75321: LD_VAR 0 1
75325: PPUSH
75326: LD_INT 3
75328: PPUSH
75329: CALL_OW 275
75333: PUSH
75334: EMPTY
75335: LIST
75336: LIST
75337: LIST
75338: ST_TO_ADDR
// end ;
75339: LD_VAR 0 2
75343: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
75344: LD_INT 0
75346: PPUSH
75347: PPUSH
// result := array ;
75348: LD_ADDR_VAR 0 3
75352: PUSH
75353: LD_VAR 0 1
75357: ST_TO_ADDR
// if size > 0 then
75358: LD_VAR 0 2
75362: PUSH
75363: LD_INT 0
75365: GREATER
75366: IFFALSE 75412
// for i := array downto size do
75368: LD_ADDR_VAR 0 4
75372: PUSH
75373: DOUBLE
75374: LD_VAR 0 1
75378: INC
75379: ST_TO_ADDR
75380: LD_VAR 0 2
75384: PUSH
75385: FOR_DOWNTO
75386: IFFALSE 75410
// result := Delete ( result , result ) ;
75388: LD_ADDR_VAR 0 3
75392: PUSH
75393: LD_VAR 0 3
75397: PPUSH
75398: LD_VAR 0 3
75402: PPUSH
75403: CALL_OW 3
75407: ST_TO_ADDR
75408: GO 75385
75410: POP
75411: POP
// end ;
75412: LD_VAR 0 3
75416: RET
// export function ComExit ( unit ) ; var tmp ; begin
75417: LD_INT 0
75419: PPUSH
75420: PPUSH
// if not IsInUnit ( unit ) then
75421: LD_VAR 0 1
75425: PPUSH
75426: CALL_OW 310
75430: NOT
75431: IFFALSE 75435
// exit ;
75433: GO 75495
// tmp := IsInUnit ( unit ) ;
75435: LD_ADDR_VAR 0 3
75439: PUSH
75440: LD_VAR 0 1
75444: PPUSH
75445: CALL_OW 310
75449: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
75450: LD_VAR 0 3
75454: PPUSH
75455: CALL_OW 247
75459: PUSH
75460: LD_INT 2
75462: EQUAL
75463: IFFALSE 75476
// ComExitVehicle ( unit ) else
75465: LD_VAR 0 1
75469: PPUSH
75470: CALL_OW 121
75474: GO 75485
// ComExitBuilding ( unit ) ;
75476: LD_VAR 0 1
75480: PPUSH
75481: CALL_OW 122
// result := tmp ;
75485: LD_ADDR_VAR 0 2
75489: PUSH
75490: LD_VAR 0 3
75494: ST_TO_ADDR
// end ;
75495: LD_VAR 0 2
75499: RET
// export function ComExitAll ( units ) ; var i ; begin
75500: LD_INT 0
75502: PPUSH
75503: PPUSH
// if not units then
75504: LD_VAR 0 1
75508: NOT
75509: IFFALSE 75513
// exit ;
75511: GO 75539
// for i in units do
75513: LD_ADDR_VAR 0 3
75517: PUSH
75518: LD_VAR 0 1
75522: PUSH
75523: FOR_IN
75524: IFFALSE 75537
// ComExit ( i ) ;
75526: LD_VAR 0 3
75530: PPUSH
75531: CALL 75417 0 1
75535: GO 75523
75537: POP
75538: POP
// end ;
75539: LD_VAR 0 2
75543: RET
// export function ResetHc ; begin
75544: LD_INT 0
75546: PPUSH
// InitHc ;
75547: CALL_OW 19
// hc_importance := 0 ;
75551: LD_ADDR_OWVAR 32
75555: PUSH
75556: LD_INT 0
75558: ST_TO_ADDR
// end ;
75559: LD_VAR 0 1
75563: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
75564: LD_INT 0
75566: PPUSH
75567: PPUSH
75568: PPUSH
// _x := ( x1 + x2 ) div 2 ;
75569: LD_ADDR_VAR 0 6
75573: PUSH
75574: LD_VAR 0 1
75578: PUSH
75579: LD_VAR 0 3
75583: PLUS
75584: PUSH
75585: LD_INT 2
75587: DIV
75588: ST_TO_ADDR
// if _x < 0 then
75589: LD_VAR 0 6
75593: PUSH
75594: LD_INT 0
75596: LESS
75597: IFFALSE 75614
// _x := _x * - 1 ;
75599: LD_ADDR_VAR 0 6
75603: PUSH
75604: LD_VAR 0 6
75608: PUSH
75609: LD_INT 1
75611: NEG
75612: MUL
75613: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
75614: LD_ADDR_VAR 0 7
75618: PUSH
75619: LD_VAR 0 2
75623: PUSH
75624: LD_VAR 0 4
75628: PLUS
75629: PUSH
75630: LD_INT 2
75632: DIV
75633: ST_TO_ADDR
// if _y < 0 then
75634: LD_VAR 0 7
75638: PUSH
75639: LD_INT 0
75641: LESS
75642: IFFALSE 75659
// _y := _y * - 1 ;
75644: LD_ADDR_VAR 0 7
75648: PUSH
75649: LD_VAR 0 7
75653: PUSH
75654: LD_INT 1
75656: NEG
75657: MUL
75658: ST_TO_ADDR
// result := [ _x , _y ] ;
75659: LD_ADDR_VAR 0 5
75663: PUSH
75664: LD_VAR 0 6
75668: PUSH
75669: LD_VAR 0 7
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: ST_TO_ADDR
// end ;
75678: LD_VAR 0 5
75682: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
75683: LD_INT 0
75685: PPUSH
75686: PPUSH
75687: PPUSH
75688: PPUSH
// task := GetTaskList ( unit ) ;
75689: LD_ADDR_VAR 0 7
75693: PUSH
75694: LD_VAR 0 1
75698: PPUSH
75699: CALL_OW 437
75703: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
75704: LD_VAR 0 7
75708: NOT
75709: PUSH
75710: LD_VAR 0 1
75714: PPUSH
75715: LD_VAR 0 2
75719: PPUSH
75720: CALL_OW 308
75724: NOT
75725: AND
75726: IFFALSE 75730
// exit ;
75728: GO 75848
// if IsInArea ( unit , area ) then
75730: LD_VAR 0 1
75734: PPUSH
75735: LD_VAR 0 2
75739: PPUSH
75740: CALL_OW 308
75744: IFFALSE 75762
// begin ComMoveToArea ( unit , goAway ) ;
75746: LD_VAR 0 1
75750: PPUSH
75751: LD_VAR 0 3
75755: PPUSH
75756: CALL_OW 113
// exit ;
75760: GO 75848
// end ; if task [ 1 ] [ 1 ] <> M then
75762: LD_VAR 0 7
75766: PUSH
75767: LD_INT 1
75769: ARRAY
75770: PUSH
75771: LD_INT 1
75773: ARRAY
75774: PUSH
75775: LD_STRING M
75777: NONEQUAL
75778: IFFALSE 75782
// exit ;
75780: GO 75848
// x := task [ 1 ] [ 2 ] ;
75782: LD_ADDR_VAR 0 5
75786: PUSH
75787: LD_VAR 0 7
75791: PUSH
75792: LD_INT 1
75794: ARRAY
75795: PUSH
75796: LD_INT 2
75798: ARRAY
75799: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
75800: LD_ADDR_VAR 0 6
75804: PUSH
75805: LD_VAR 0 7
75809: PUSH
75810: LD_INT 1
75812: ARRAY
75813: PUSH
75814: LD_INT 3
75816: ARRAY
75817: ST_TO_ADDR
// if InArea ( x , y , area ) then
75818: LD_VAR 0 5
75822: PPUSH
75823: LD_VAR 0 6
75827: PPUSH
75828: LD_VAR 0 2
75832: PPUSH
75833: CALL_OW 309
75837: IFFALSE 75848
// ComStop ( unit ) ;
75839: LD_VAR 0 1
75843: PPUSH
75844: CALL_OW 141
// end ;
75848: LD_VAR 0 4
75852: RET
// export function Abs ( value ) ; begin
75853: LD_INT 0
75855: PPUSH
// result := value ;
75856: LD_ADDR_VAR 0 2
75860: PUSH
75861: LD_VAR 0 1
75865: ST_TO_ADDR
// if value < 0 then
75866: LD_VAR 0 1
75870: PUSH
75871: LD_INT 0
75873: LESS
75874: IFFALSE 75891
// result := value * - 1 ;
75876: LD_ADDR_VAR 0 2
75880: PUSH
75881: LD_VAR 0 1
75885: PUSH
75886: LD_INT 1
75888: NEG
75889: MUL
75890: ST_TO_ADDR
// end ;
75891: LD_VAR 0 2
75895: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
75896: LD_INT 0
75898: PPUSH
75899: PPUSH
75900: PPUSH
75901: PPUSH
75902: PPUSH
75903: PPUSH
75904: PPUSH
75905: PPUSH
// if not unit or not building then
75906: LD_VAR 0 1
75910: NOT
75911: PUSH
75912: LD_VAR 0 2
75916: NOT
75917: OR
75918: IFFALSE 75922
// exit ;
75920: GO 76148
// x := GetX ( building ) ;
75922: LD_ADDR_VAR 0 4
75926: PUSH
75927: LD_VAR 0 2
75931: PPUSH
75932: CALL_OW 250
75936: ST_TO_ADDR
// y := GetY ( building ) ;
75937: LD_ADDR_VAR 0 6
75941: PUSH
75942: LD_VAR 0 2
75946: PPUSH
75947: CALL_OW 251
75951: ST_TO_ADDR
// d := GetDir ( building ) ;
75952: LD_ADDR_VAR 0 8
75956: PUSH
75957: LD_VAR 0 2
75961: PPUSH
75962: CALL_OW 254
75966: ST_TO_ADDR
// r := 4 ;
75967: LD_ADDR_VAR 0 9
75971: PUSH
75972: LD_INT 4
75974: ST_TO_ADDR
// for i := 1 to 5 do
75975: LD_ADDR_VAR 0 10
75979: PUSH
75980: DOUBLE
75981: LD_INT 1
75983: DEC
75984: ST_TO_ADDR
75985: LD_INT 5
75987: PUSH
75988: FOR_TO
75989: IFFALSE 76146
// begin _x := ShiftX ( x , d , r + i ) ;
75991: LD_ADDR_VAR 0 5
75995: PUSH
75996: LD_VAR 0 4
76000: PPUSH
76001: LD_VAR 0 8
76005: PPUSH
76006: LD_VAR 0 9
76010: PUSH
76011: LD_VAR 0 10
76015: PLUS
76016: PPUSH
76017: CALL_OW 272
76021: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
76022: LD_ADDR_VAR 0 7
76026: PUSH
76027: LD_VAR 0 6
76031: PPUSH
76032: LD_VAR 0 8
76036: PPUSH
76037: LD_VAR 0 9
76041: PUSH
76042: LD_VAR 0 10
76046: PLUS
76047: PPUSH
76048: CALL_OW 273
76052: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
76053: LD_VAR 0 5
76057: PPUSH
76058: LD_VAR 0 7
76062: PPUSH
76063: CALL_OW 488
76067: PUSH
76068: LD_VAR 0 5
76072: PPUSH
76073: LD_VAR 0 7
76077: PPUSH
76078: CALL_OW 428
76082: PPUSH
76083: CALL_OW 247
76087: PUSH
76088: LD_INT 3
76090: PUSH
76091: LD_INT 2
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: IN
76098: NOT
76099: AND
76100: IFFALSE 76144
// begin ComMoveXY ( unit , _x , _y ) ;
76102: LD_VAR 0 1
76106: PPUSH
76107: LD_VAR 0 5
76111: PPUSH
76112: LD_VAR 0 7
76116: PPUSH
76117: CALL_OW 111
// result := [ _x , _y ] ;
76121: LD_ADDR_VAR 0 3
76125: PUSH
76126: LD_VAR 0 5
76130: PUSH
76131: LD_VAR 0 7
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: ST_TO_ADDR
// exit ;
76140: POP
76141: POP
76142: GO 76148
// end ; end ;
76144: GO 75988
76146: POP
76147: POP
// end ;
76148: LD_VAR 0 3
76152: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
76153: LD_INT 0
76155: PPUSH
76156: PPUSH
76157: PPUSH
// result := 0 ;
76158: LD_ADDR_VAR 0 3
76162: PUSH
76163: LD_INT 0
76165: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
76166: LD_VAR 0 1
76170: PUSH
76171: LD_INT 0
76173: LESS
76174: PUSH
76175: LD_VAR 0 1
76179: PUSH
76180: LD_INT 8
76182: GREATER
76183: OR
76184: PUSH
76185: LD_VAR 0 2
76189: PUSH
76190: LD_INT 0
76192: LESS
76193: OR
76194: PUSH
76195: LD_VAR 0 2
76199: PUSH
76200: LD_INT 8
76202: GREATER
76203: OR
76204: IFFALSE 76208
// exit ;
76206: GO 76283
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
76208: LD_ADDR_VAR 0 4
76212: PUSH
76213: LD_INT 22
76215: PUSH
76216: LD_VAR 0 2
76220: PUSH
76221: EMPTY
76222: LIST
76223: LIST
76224: PPUSH
76225: CALL_OW 69
76229: PUSH
76230: FOR_IN
76231: IFFALSE 76281
// begin un := UnitShoot ( i ) ;
76233: LD_ADDR_VAR 0 5
76237: PUSH
76238: LD_VAR 0 4
76242: PPUSH
76243: CALL_OW 504
76247: ST_TO_ADDR
// if GetSide ( un ) = side1 then
76248: LD_VAR 0 5
76252: PPUSH
76253: CALL_OW 255
76257: PUSH
76258: LD_VAR 0 1
76262: EQUAL
76263: IFFALSE 76279
// begin result := un ;
76265: LD_ADDR_VAR 0 3
76269: PUSH
76270: LD_VAR 0 5
76274: ST_TO_ADDR
// exit ;
76275: POP
76276: POP
76277: GO 76283
// end ; end ;
76279: GO 76230
76281: POP
76282: POP
// end ;
76283: LD_VAR 0 3
76287: RET
// export function GetCargoBay ( units ) ; begin
76288: LD_INT 0
76290: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
76291: LD_ADDR_VAR 0 2
76295: PUSH
76296: LD_VAR 0 1
76300: PPUSH
76301: LD_INT 2
76303: PUSH
76304: LD_INT 34
76306: PUSH
76307: LD_INT 12
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: PUSH
76314: LD_INT 34
76316: PUSH
76317: LD_INT 51
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: PUSH
76324: LD_INT 34
76326: PUSH
76327: LD_INT 32
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: PUSH
76334: LD_INT 34
76336: PUSH
76337: LD_EXP 46
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: PUSH
76346: EMPTY
76347: LIST
76348: LIST
76349: LIST
76350: LIST
76351: LIST
76352: PPUSH
76353: CALL_OW 72
76357: ST_TO_ADDR
// end ;
76358: LD_VAR 0 2
76362: RET
// export function Negate ( value ) ; begin
76363: LD_INT 0
76365: PPUSH
// result := not value ;
76366: LD_ADDR_VAR 0 2
76370: PUSH
76371: LD_VAR 0 1
76375: NOT
76376: ST_TO_ADDR
// end ;
76377: LD_VAR 0 2
76381: RET
// export function Inc ( value ) ; begin
76382: LD_INT 0
76384: PPUSH
// result := value + 1 ;
76385: LD_ADDR_VAR 0 2
76389: PUSH
76390: LD_VAR 0 1
76394: PUSH
76395: LD_INT 1
76397: PLUS
76398: ST_TO_ADDR
// end ;
76399: LD_VAR 0 2
76403: RET
// export function Dec ( value ) ; begin
76404: LD_INT 0
76406: PPUSH
// result := value - 1 ;
76407: LD_ADDR_VAR 0 2
76411: PUSH
76412: LD_VAR 0 1
76416: PUSH
76417: LD_INT 1
76419: MINUS
76420: ST_TO_ADDR
// end ;
76421: LD_VAR 0 2
76425: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
76426: LD_INT 0
76428: PPUSH
76429: PPUSH
76430: PPUSH
76431: PPUSH
76432: PPUSH
76433: PPUSH
76434: PPUSH
76435: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
76436: LD_VAR 0 1
76440: PPUSH
76441: LD_VAR 0 2
76445: PPUSH
76446: CALL_OW 488
76450: NOT
76451: PUSH
76452: LD_VAR 0 3
76456: PPUSH
76457: LD_VAR 0 4
76461: PPUSH
76462: CALL_OW 488
76466: NOT
76467: OR
76468: IFFALSE 76481
// begin result := - 1 ;
76470: LD_ADDR_VAR 0 5
76474: PUSH
76475: LD_INT 1
76477: NEG
76478: ST_TO_ADDR
// exit ;
76479: GO 76716
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
76481: LD_ADDR_VAR 0 12
76485: PUSH
76486: LD_VAR 0 1
76490: PPUSH
76491: LD_VAR 0 2
76495: PPUSH
76496: LD_VAR 0 3
76500: PPUSH
76501: LD_VAR 0 4
76505: PPUSH
76506: CALL 75564 0 4
76510: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
76511: LD_ADDR_VAR 0 11
76515: PUSH
76516: LD_VAR 0 1
76520: PPUSH
76521: LD_VAR 0 2
76525: PPUSH
76526: LD_VAR 0 12
76530: PUSH
76531: LD_INT 1
76533: ARRAY
76534: PPUSH
76535: LD_VAR 0 12
76539: PUSH
76540: LD_INT 2
76542: ARRAY
76543: PPUSH
76544: CALL_OW 298
76548: ST_TO_ADDR
// distance := 9999 ;
76549: LD_ADDR_VAR 0 10
76553: PUSH
76554: LD_INT 9999
76556: ST_TO_ADDR
// for i := 0 to 5 do
76557: LD_ADDR_VAR 0 6
76561: PUSH
76562: DOUBLE
76563: LD_INT 0
76565: DEC
76566: ST_TO_ADDR
76567: LD_INT 5
76569: PUSH
76570: FOR_TO
76571: IFFALSE 76714
// begin _x := ShiftX ( x1 , i , centerDist ) ;
76573: LD_ADDR_VAR 0 7
76577: PUSH
76578: LD_VAR 0 1
76582: PPUSH
76583: LD_VAR 0 6
76587: PPUSH
76588: LD_VAR 0 11
76592: PPUSH
76593: CALL_OW 272
76597: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
76598: LD_ADDR_VAR 0 8
76602: PUSH
76603: LD_VAR 0 2
76607: PPUSH
76608: LD_VAR 0 6
76612: PPUSH
76613: LD_VAR 0 11
76617: PPUSH
76618: CALL_OW 273
76622: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
76623: LD_VAR 0 7
76627: PPUSH
76628: LD_VAR 0 8
76632: PPUSH
76633: CALL_OW 488
76637: NOT
76638: IFFALSE 76642
// continue ;
76640: GO 76570
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
76642: LD_ADDR_VAR 0 9
76646: PUSH
76647: LD_VAR 0 12
76651: PUSH
76652: LD_INT 1
76654: ARRAY
76655: PPUSH
76656: LD_VAR 0 12
76660: PUSH
76661: LD_INT 2
76663: ARRAY
76664: PPUSH
76665: LD_VAR 0 7
76669: PPUSH
76670: LD_VAR 0 8
76674: PPUSH
76675: CALL_OW 298
76679: ST_TO_ADDR
// if tmp < distance then
76680: LD_VAR 0 9
76684: PUSH
76685: LD_VAR 0 10
76689: LESS
76690: IFFALSE 76712
// begin result := i ;
76692: LD_ADDR_VAR 0 5
76696: PUSH
76697: LD_VAR 0 6
76701: ST_TO_ADDR
// distance := tmp ;
76702: LD_ADDR_VAR 0 10
76706: PUSH
76707: LD_VAR 0 9
76711: ST_TO_ADDR
// end ; end ;
76712: GO 76570
76714: POP
76715: POP
// end ;
76716: LD_VAR 0 5
76720: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76721: LD_INT 0
76723: PPUSH
76724: PPUSH
// if not driver or not IsInUnit ( driver ) then
76725: LD_VAR 0 1
76729: NOT
76730: PUSH
76731: LD_VAR 0 1
76735: PPUSH
76736: CALL_OW 310
76740: NOT
76741: OR
76742: IFFALSE 76746
// exit ;
76744: GO 76836
// vehicle := IsInUnit ( driver ) ;
76746: LD_ADDR_VAR 0 3
76750: PUSH
76751: LD_VAR 0 1
76755: PPUSH
76756: CALL_OW 310
76760: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76761: LD_VAR 0 1
76765: PPUSH
76766: LD_STRING \
76768: PUSH
76769: LD_INT 0
76771: PUSH
76772: LD_INT 0
76774: PUSH
76775: LD_INT 0
76777: PUSH
76778: LD_INT 0
76780: PUSH
76781: LD_INT 0
76783: PUSH
76784: LD_INT 0
76786: PUSH
76787: EMPTY
76788: LIST
76789: LIST
76790: LIST
76791: LIST
76792: LIST
76793: LIST
76794: LIST
76795: PUSH
76796: LD_STRING E
76798: PUSH
76799: LD_INT 0
76801: PUSH
76802: LD_INT 0
76804: PUSH
76805: LD_VAR 0 3
76809: PUSH
76810: LD_INT 0
76812: PUSH
76813: LD_INT 0
76815: PUSH
76816: LD_INT 0
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: LIST
76823: LIST
76824: LIST
76825: LIST
76826: LIST
76827: PUSH
76828: EMPTY
76829: LIST
76830: LIST
76831: PPUSH
76832: CALL_OW 446
// end ;
76836: LD_VAR 0 2
76840: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
76841: LD_INT 0
76843: PPUSH
76844: PPUSH
// if not driver or not IsInUnit ( driver ) then
76845: LD_VAR 0 1
76849: NOT
76850: PUSH
76851: LD_VAR 0 1
76855: PPUSH
76856: CALL_OW 310
76860: NOT
76861: OR
76862: IFFALSE 76866
// exit ;
76864: GO 76956
// vehicle := IsInUnit ( driver ) ;
76866: LD_ADDR_VAR 0 3
76870: PUSH
76871: LD_VAR 0 1
76875: PPUSH
76876: CALL_OW 310
76880: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
76881: LD_VAR 0 1
76885: PPUSH
76886: LD_STRING \
76888: PUSH
76889: LD_INT 0
76891: PUSH
76892: LD_INT 0
76894: PUSH
76895: LD_INT 0
76897: PUSH
76898: LD_INT 0
76900: PUSH
76901: LD_INT 0
76903: PUSH
76904: LD_INT 0
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: LIST
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: PUSH
76916: LD_STRING E
76918: PUSH
76919: LD_INT 0
76921: PUSH
76922: LD_INT 0
76924: PUSH
76925: LD_VAR 0 3
76929: PUSH
76930: LD_INT 0
76932: PUSH
76933: LD_INT 0
76935: PUSH
76936: LD_INT 0
76938: PUSH
76939: EMPTY
76940: LIST
76941: LIST
76942: LIST
76943: LIST
76944: LIST
76945: LIST
76946: LIST
76947: PUSH
76948: EMPTY
76949: LIST
76950: LIST
76951: PPUSH
76952: CALL_OW 447
// end ;
76956: LD_VAR 0 2
76960: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
76961: LD_INT 0
76963: PPUSH
76964: PPUSH
76965: PPUSH
// tmp := [ ] ;
76966: LD_ADDR_VAR 0 5
76970: PUSH
76971: EMPTY
76972: ST_TO_ADDR
// for i in units do
76973: LD_ADDR_VAR 0 4
76977: PUSH
76978: LD_VAR 0 1
76982: PUSH
76983: FOR_IN
76984: IFFALSE 77022
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
76986: LD_ADDR_VAR 0 5
76990: PUSH
76991: LD_VAR 0 5
76995: PPUSH
76996: LD_VAR 0 5
77000: PUSH
77001: LD_INT 1
77003: PLUS
77004: PPUSH
77005: LD_VAR 0 4
77009: PPUSH
77010: CALL_OW 256
77014: PPUSH
77015: CALL_OW 2
77019: ST_TO_ADDR
77020: GO 76983
77022: POP
77023: POP
// if not tmp then
77024: LD_VAR 0 5
77028: NOT
77029: IFFALSE 77033
// exit ;
77031: GO 77081
// if asc then
77033: LD_VAR 0 2
77037: IFFALSE 77061
// result := SortListByListAsc ( units , tmp ) else
77039: LD_ADDR_VAR 0 3
77043: PUSH
77044: LD_VAR 0 1
77048: PPUSH
77049: LD_VAR 0 5
77053: PPUSH
77054: CALL_OW 76
77058: ST_TO_ADDR
77059: GO 77081
// result := SortListByListDesc ( units , tmp ) ;
77061: LD_ADDR_VAR 0 3
77065: PUSH
77066: LD_VAR 0 1
77070: PPUSH
77071: LD_VAR 0 5
77075: PPUSH
77076: CALL_OW 77
77080: ST_TO_ADDR
// end ;
77081: LD_VAR 0 3
77085: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
77086: LD_INT 0
77088: PPUSH
77089: PPUSH
// task := GetTaskList ( mech ) ;
77090: LD_ADDR_VAR 0 4
77094: PUSH
77095: LD_VAR 0 1
77099: PPUSH
77100: CALL_OW 437
77104: ST_TO_ADDR
// if not task then
77105: LD_VAR 0 4
77109: NOT
77110: IFFALSE 77114
// exit ;
77112: GO 77156
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
77114: LD_ADDR_VAR 0 3
77118: PUSH
77119: LD_VAR 0 4
77123: PUSH
77124: LD_INT 1
77126: ARRAY
77127: PUSH
77128: LD_INT 1
77130: ARRAY
77131: PUSH
77132: LD_STRING r
77134: EQUAL
77135: PUSH
77136: LD_VAR 0 4
77140: PUSH
77141: LD_INT 1
77143: ARRAY
77144: PUSH
77145: LD_INT 4
77147: ARRAY
77148: PUSH
77149: LD_VAR 0 2
77153: EQUAL
77154: AND
77155: ST_TO_ADDR
// end ;
77156: LD_VAR 0 3
77160: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
77161: LD_INT 0
77163: PPUSH
// SetDir ( unit , d ) ;
77164: LD_VAR 0 1
77168: PPUSH
77169: LD_VAR 0 4
77173: PPUSH
77174: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
77178: LD_VAR 0 1
77182: PPUSH
77183: LD_VAR 0 2
77187: PPUSH
77188: LD_VAR 0 3
77192: PPUSH
77193: LD_VAR 0 5
77197: PPUSH
77198: CALL_OW 48
// end ;
77202: LD_VAR 0 6
77206: RET
// export function ToNaturalNumber ( number ) ; begin
77207: LD_INT 0
77209: PPUSH
// result := number div 1 ;
77210: LD_ADDR_VAR 0 2
77214: PUSH
77215: LD_VAR 0 1
77219: PUSH
77220: LD_INT 1
77222: DIV
77223: ST_TO_ADDR
// if number < 0 then
77224: LD_VAR 0 1
77228: PUSH
77229: LD_INT 0
77231: LESS
77232: IFFALSE 77242
// result := 0 ;
77234: LD_ADDR_VAR 0 2
77238: PUSH
77239: LD_INT 0
77241: ST_TO_ADDR
// end ;
77242: LD_VAR 0 2
77246: RET
// export function SortByClass ( units , class ) ; var un ; begin
77247: LD_INT 0
77249: PPUSH
77250: PPUSH
// if not units or not class then
77251: LD_VAR 0 1
77255: NOT
77256: PUSH
77257: LD_VAR 0 2
77261: NOT
77262: OR
77263: IFFALSE 77267
// exit ;
77265: GO 77362
// result := [ ] ;
77267: LD_ADDR_VAR 0 3
77271: PUSH
77272: EMPTY
77273: ST_TO_ADDR
// for un in units do
77274: LD_ADDR_VAR 0 4
77278: PUSH
77279: LD_VAR 0 1
77283: PUSH
77284: FOR_IN
77285: IFFALSE 77360
// if GetClass ( un ) = class then
77287: LD_VAR 0 4
77291: PPUSH
77292: CALL_OW 257
77296: PUSH
77297: LD_VAR 0 2
77301: EQUAL
77302: IFFALSE 77329
// result := Insert ( result , 1 , un ) else
77304: LD_ADDR_VAR 0 3
77308: PUSH
77309: LD_VAR 0 3
77313: PPUSH
77314: LD_INT 1
77316: PPUSH
77317: LD_VAR 0 4
77321: PPUSH
77322: CALL_OW 2
77326: ST_TO_ADDR
77327: GO 77358
// result := Replace ( result , result + 1 , un ) ;
77329: LD_ADDR_VAR 0 3
77333: PUSH
77334: LD_VAR 0 3
77338: PPUSH
77339: LD_VAR 0 3
77343: PUSH
77344: LD_INT 1
77346: PLUS
77347: PPUSH
77348: LD_VAR 0 4
77352: PPUSH
77353: CALL_OW 1
77357: ST_TO_ADDR
77358: GO 77284
77360: POP
77361: POP
// end ;
77362: LD_VAR 0 3
77366: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
77367: LD_INT 0
77369: PPUSH
77370: PPUSH
77371: PPUSH
77372: PPUSH
77373: PPUSH
77374: PPUSH
77375: PPUSH
// result := [ ] ;
77376: LD_ADDR_VAR 0 4
77380: PUSH
77381: EMPTY
77382: ST_TO_ADDR
// if x - r < 0 then
77383: LD_VAR 0 1
77387: PUSH
77388: LD_VAR 0 3
77392: MINUS
77393: PUSH
77394: LD_INT 0
77396: LESS
77397: IFFALSE 77409
// min_x := 0 else
77399: LD_ADDR_VAR 0 8
77403: PUSH
77404: LD_INT 0
77406: ST_TO_ADDR
77407: GO 77425
// min_x := x - r ;
77409: LD_ADDR_VAR 0 8
77413: PUSH
77414: LD_VAR 0 1
77418: PUSH
77419: LD_VAR 0 3
77423: MINUS
77424: ST_TO_ADDR
// if y - r < 0 then
77425: LD_VAR 0 2
77429: PUSH
77430: LD_VAR 0 3
77434: MINUS
77435: PUSH
77436: LD_INT 0
77438: LESS
77439: IFFALSE 77451
// min_y := 0 else
77441: LD_ADDR_VAR 0 7
77445: PUSH
77446: LD_INT 0
77448: ST_TO_ADDR
77449: GO 77467
// min_y := y - r ;
77451: LD_ADDR_VAR 0 7
77455: PUSH
77456: LD_VAR 0 2
77460: PUSH
77461: LD_VAR 0 3
77465: MINUS
77466: ST_TO_ADDR
// max_x := x + r ;
77467: LD_ADDR_VAR 0 9
77471: PUSH
77472: LD_VAR 0 1
77476: PUSH
77477: LD_VAR 0 3
77481: PLUS
77482: ST_TO_ADDR
// max_y := y + r ;
77483: LD_ADDR_VAR 0 10
77487: PUSH
77488: LD_VAR 0 2
77492: PUSH
77493: LD_VAR 0 3
77497: PLUS
77498: ST_TO_ADDR
// for _x = min_x to max_x do
77499: LD_ADDR_VAR 0 5
77503: PUSH
77504: DOUBLE
77505: LD_VAR 0 8
77509: DEC
77510: ST_TO_ADDR
77511: LD_VAR 0 9
77515: PUSH
77516: FOR_TO
77517: IFFALSE 77618
// for _y = min_y to max_y do
77519: LD_ADDR_VAR 0 6
77523: PUSH
77524: DOUBLE
77525: LD_VAR 0 7
77529: DEC
77530: ST_TO_ADDR
77531: LD_VAR 0 10
77535: PUSH
77536: FOR_TO
77537: IFFALSE 77614
// begin if not ValidHex ( _x , _y ) then
77539: LD_VAR 0 5
77543: PPUSH
77544: LD_VAR 0 6
77548: PPUSH
77549: CALL_OW 488
77553: NOT
77554: IFFALSE 77558
// continue ;
77556: GO 77536
// if GetResourceTypeXY ( _x , _y ) then
77558: LD_VAR 0 5
77562: PPUSH
77563: LD_VAR 0 6
77567: PPUSH
77568: CALL_OW 283
77572: IFFALSE 77612
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
77574: LD_ADDR_VAR 0 4
77578: PUSH
77579: LD_VAR 0 4
77583: PPUSH
77584: LD_VAR 0 4
77588: PUSH
77589: LD_INT 1
77591: PLUS
77592: PPUSH
77593: LD_VAR 0 5
77597: PUSH
77598: LD_VAR 0 6
77602: PUSH
77603: EMPTY
77604: LIST
77605: LIST
77606: PPUSH
77607: CALL_OW 1
77611: ST_TO_ADDR
// end ;
77612: GO 77536
77614: POP
77615: POP
77616: GO 77516
77618: POP
77619: POP
// end ;
77620: LD_VAR 0 4
77624: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
77625: LD_INT 0
77627: PPUSH
77628: PPUSH
77629: PPUSH
77630: PPUSH
77631: PPUSH
77632: PPUSH
77633: PPUSH
77634: PPUSH
// if not units then
77635: LD_VAR 0 1
77639: NOT
77640: IFFALSE 77644
// exit ;
77642: GO 78155
// result := UnitFilter ( units , [ f_ok ] ) ;
77644: LD_ADDR_VAR 0 3
77648: PUSH
77649: LD_VAR 0 1
77653: PPUSH
77654: LD_INT 50
77656: PUSH
77657: EMPTY
77658: LIST
77659: PPUSH
77660: CALL_OW 72
77664: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
77665: LD_ADDR_VAR 0 8
77669: PUSH
77670: LD_VAR 0 1
77674: PUSH
77675: LD_INT 1
77677: ARRAY
77678: PPUSH
77679: CALL_OW 255
77683: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
77684: LD_ADDR_VAR 0 10
77688: PUSH
77689: LD_INT 29
77691: PUSH
77692: LD_EXP 49
77696: PUSH
77697: LD_INT 49
77699: PUSH
77700: EMPTY
77701: LIST
77702: LIST
77703: LIST
77704: ST_TO_ADDR
// if not result then
77705: LD_VAR 0 3
77709: NOT
77710: IFFALSE 77714
// exit ;
77712: GO 78155
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
77714: LD_ADDR_VAR 0 5
77718: PUSH
77719: LD_INT 81
77721: PUSH
77722: LD_VAR 0 8
77726: PUSH
77727: EMPTY
77728: LIST
77729: LIST
77730: PPUSH
77731: CALL_OW 69
77735: ST_TO_ADDR
// for i in result do
77736: LD_ADDR_VAR 0 4
77740: PUSH
77741: LD_VAR 0 3
77745: PUSH
77746: FOR_IN
77747: IFFALSE 78153
// begin tag := GetTag ( i ) + 1 ;
77749: LD_ADDR_VAR 0 9
77753: PUSH
77754: LD_VAR 0 4
77758: PPUSH
77759: CALL_OW 110
77763: PUSH
77764: LD_INT 1
77766: PLUS
77767: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
77768: LD_ADDR_VAR 0 7
77772: PUSH
77773: LD_VAR 0 4
77777: PPUSH
77778: CALL_OW 250
77782: PPUSH
77783: LD_VAR 0 4
77787: PPUSH
77788: CALL_OW 251
77792: PPUSH
77793: LD_INT 6
77795: PPUSH
77796: CALL 77367 0 3
77800: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
77801: LD_VAR 0 7
77805: PUSH
77806: LD_VAR 0 4
77810: PPUSH
77811: CALL_OW 264
77815: PUSH
77816: LD_VAR 0 10
77820: IN
77821: NOT
77822: AND
77823: IFFALSE 77862
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
77825: LD_VAR 0 4
77829: PPUSH
77830: LD_VAR 0 7
77834: PUSH
77835: LD_INT 1
77837: ARRAY
77838: PUSH
77839: LD_INT 1
77841: ARRAY
77842: PPUSH
77843: LD_VAR 0 7
77847: PUSH
77848: LD_INT 1
77850: ARRAY
77851: PUSH
77852: LD_INT 2
77854: ARRAY
77855: PPUSH
77856: CALL_OW 116
77860: GO 78151
// if path > tag then
77862: LD_VAR 0 2
77866: PUSH
77867: LD_VAR 0 9
77871: GREATER
77872: IFFALSE 78080
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
77874: LD_ADDR_VAR 0 6
77878: PUSH
77879: LD_VAR 0 5
77883: PPUSH
77884: LD_INT 91
77886: PUSH
77887: LD_VAR 0 4
77891: PUSH
77892: LD_INT 12
77894: PUSH
77895: EMPTY
77896: LIST
77897: LIST
77898: LIST
77899: PPUSH
77900: CALL_OW 72
77904: ST_TO_ADDR
// if nearEnemy then
77905: LD_VAR 0 6
77909: IFFALSE 77978
// begin if GetWeapon ( i ) = ru_time_lapser then
77911: LD_VAR 0 4
77915: PPUSH
77916: CALL_OW 264
77920: PUSH
77921: LD_INT 49
77923: EQUAL
77924: IFFALSE 77952
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
77926: LD_VAR 0 4
77930: PPUSH
77931: LD_VAR 0 6
77935: PPUSH
77936: LD_VAR 0 4
77940: PPUSH
77941: CALL_OW 74
77945: PPUSH
77946: CALL_OW 112
77950: GO 77976
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
77952: LD_VAR 0 4
77956: PPUSH
77957: LD_VAR 0 6
77961: PPUSH
77962: LD_VAR 0 4
77966: PPUSH
77967: CALL_OW 74
77971: PPUSH
77972: CALL_OW 115
// end else
77976: GO 78078
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
77978: LD_VAR 0 4
77982: PPUSH
77983: LD_VAR 0 2
77987: PUSH
77988: LD_VAR 0 9
77992: ARRAY
77993: PUSH
77994: LD_INT 1
77996: ARRAY
77997: PPUSH
77998: LD_VAR 0 2
78002: PUSH
78003: LD_VAR 0 9
78007: ARRAY
78008: PUSH
78009: LD_INT 2
78011: ARRAY
78012: PPUSH
78013: CALL_OW 297
78017: PUSH
78018: LD_INT 6
78020: GREATER
78021: IFFALSE 78064
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
78023: LD_VAR 0 4
78027: PPUSH
78028: LD_VAR 0 2
78032: PUSH
78033: LD_VAR 0 9
78037: ARRAY
78038: PUSH
78039: LD_INT 1
78041: ARRAY
78042: PPUSH
78043: LD_VAR 0 2
78047: PUSH
78048: LD_VAR 0 9
78052: ARRAY
78053: PUSH
78054: LD_INT 2
78056: ARRAY
78057: PPUSH
78058: CALL_OW 114
78062: GO 78078
// SetTag ( i , tag ) ;
78064: LD_VAR 0 4
78068: PPUSH
78069: LD_VAR 0 9
78073: PPUSH
78074: CALL_OW 109
// end else
78078: GO 78151
// if enemy then
78080: LD_VAR 0 5
78084: IFFALSE 78151
// begin if GetWeapon ( i ) = ru_time_lapser then
78086: LD_VAR 0 4
78090: PPUSH
78091: CALL_OW 264
78095: PUSH
78096: LD_INT 49
78098: EQUAL
78099: IFFALSE 78127
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
78101: LD_VAR 0 4
78105: PPUSH
78106: LD_VAR 0 5
78110: PPUSH
78111: LD_VAR 0 4
78115: PPUSH
78116: CALL_OW 74
78120: PPUSH
78121: CALL_OW 112
78125: GO 78151
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
78127: LD_VAR 0 4
78131: PPUSH
78132: LD_VAR 0 5
78136: PPUSH
78137: LD_VAR 0 4
78141: PPUSH
78142: CALL_OW 74
78146: PPUSH
78147: CALL_OW 115
// end ; end ;
78151: GO 77746
78153: POP
78154: POP
// end ;
78155: LD_VAR 0 3
78159: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
78160: LD_INT 0
78162: PPUSH
78163: PPUSH
78164: PPUSH
// if not unit or IsInUnit ( unit ) then
78165: LD_VAR 0 1
78169: NOT
78170: PUSH
78171: LD_VAR 0 1
78175: PPUSH
78176: CALL_OW 310
78180: OR
78181: IFFALSE 78185
// exit ;
78183: GO 78276
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
78185: LD_ADDR_VAR 0 4
78189: PUSH
78190: LD_VAR 0 1
78194: PPUSH
78195: CALL_OW 250
78199: PPUSH
78200: LD_VAR 0 2
78204: PPUSH
78205: LD_INT 1
78207: PPUSH
78208: CALL_OW 272
78212: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
78213: LD_ADDR_VAR 0 5
78217: PUSH
78218: LD_VAR 0 1
78222: PPUSH
78223: CALL_OW 251
78227: PPUSH
78228: LD_VAR 0 2
78232: PPUSH
78233: LD_INT 1
78235: PPUSH
78236: CALL_OW 273
78240: ST_TO_ADDR
// if ValidHex ( x , y ) then
78241: LD_VAR 0 4
78245: PPUSH
78246: LD_VAR 0 5
78250: PPUSH
78251: CALL_OW 488
78255: IFFALSE 78276
// ComTurnXY ( unit , x , y ) ;
78257: LD_VAR 0 1
78261: PPUSH
78262: LD_VAR 0 4
78266: PPUSH
78267: LD_VAR 0 5
78271: PPUSH
78272: CALL_OW 118
// end ;
78276: LD_VAR 0 3
78280: RET
// export function SeeUnits ( side , units ) ; var i ; begin
78281: LD_INT 0
78283: PPUSH
78284: PPUSH
// result := false ;
78285: LD_ADDR_VAR 0 3
78289: PUSH
78290: LD_INT 0
78292: ST_TO_ADDR
// if not units then
78293: LD_VAR 0 2
78297: NOT
78298: IFFALSE 78302
// exit ;
78300: GO 78347
// for i in units do
78302: LD_ADDR_VAR 0 4
78306: PUSH
78307: LD_VAR 0 2
78311: PUSH
78312: FOR_IN
78313: IFFALSE 78345
// if See ( side , i ) then
78315: LD_VAR 0 1
78319: PPUSH
78320: LD_VAR 0 4
78324: PPUSH
78325: CALL_OW 292
78329: IFFALSE 78343
// begin result := true ;
78331: LD_ADDR_VAR 0 3
78335: PUSH
78336: LD_INT 1
78338: ST_TO_ADDR
// exit ;
78339: POP
78340: POP
78341: GO 78347
// end ;
78343: GO 78312
78345: POP
78346: POP
// end ;
78347: LD_VAR 0 3
78351: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
78352: LD_INT 0
78354: PPUSH
78355: PPUSH
78356: PPUSH
78357: PPUSH
// if not unit or not points then
78358: LD_VAR 0 1
78362: NOT
78363: PUSH
78364: LD_VAR 0 2
78368: NOT
78369: OR
78370: IFFALSE 78374
// exit ;
78372: GO 78464
// dist := 99999 ;
78374: LD_ADDR_VAR 0 5
78378: PUSH
78379: LD_INT 99999
78381: ST_TO_ADDR
// for i in points do
78382: LD_ADDR_VAR 0 4
78386: PUSH
78387: LD_VAR 0 2
78391: PUSH
78392: FOR_IN
78393: IFFALSE 78462
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
78395: LD_ADDR_VAR 0 6
78399: PUSH
78400: LD_VAR 0 1
78404: PPUSH
78405: LD_VAR 0 4
78409: PUSH
78410: LD_INT 1
78412: ARRAY
78413: PPUSH
78414: LD_VAR 0 4
78418: PUSH
78419: LD_INT 2
78421: ARRAY
78422: PPUSH
78423: CALL_OW 297
78427: ST_TO_ADDR
// if tmpDist < dist then
78428: LD_VAR 0 6
78432: PUSH
78433: LD_VAR 0 5
78437: LESS
78438: IFFALSE 78460
// begin result := i ;
78440: LD_ADDR_VAR 0 3
78444: PUSH
78445: LD_VAR 0 4
78449: ST_TO_ADDR
// dist := tmpDist ;
78450: LD_ADDR_VAR 0 5
78454: PUSH
78455: LD_VAR 0 6
78459: ST_TO_ADDR
// end ; end ;
78460: GO 78392
78462: POP
78463: POP
// end ;
78464: LD_VAR 0 3
78468: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
78469: LD_INT 0
78471: PPUSH
// uc_side := side ;
78472: LD_ADDR_OWVAR 20
78476: PUSH
78477: LD_VAR 0 1
78481: ST_TO_ADDR
// uc_nation := 3 ;
78482: LD_ADDR_OWVAR 21
78486: PUSH
78487: LD_INT 3
78489: ST_TO_ADDR
// vc_chassis := 25 ;
78490: LD_ADDR_OWVAR 37
78494: PUSH
78495: LD_INT 25
78497: ST_TO_ADDR
// vc_engine := engine_siberite ;
78498: LD_ADDR_OWVAR 39
78502: PUSH
78503: LD_INT 3
78505: ST_TO_ADDR
// vc_control := control_computer ;
78506: LD_ADDR_OWVAR 38
78510: PUSH
78511: LD_INT 3
78513: ST_TO_ADDR
// vc_weapon := 59 ;
78514: LD_ADDR_OWVAR 40
78518: PUSH
78519: LD_INT 59
78521: ST_TO_ADDR
// result := CreateVehicle ;
78522: LD_ADDR_VAR 0 5
78526: PUSH
78527: CALL_OW 45
78531: ST_TO_ADDR
// SetDir ( result , d ) ;
78532: LD_VAR 0 5
78536: PPUSH
78537: LD_VAR 0 4
78541: PPUSH
78542: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
78546: LD_VAR 0 5
78550: PPUSH
78551: LD_VAR 0 2
78555: PPUSH
78556: LD_VAR 0 3
78560: PPUSH
78561: LD_INT 0
78563: PPUSH
78564: CALL_OW 48
// end ;
78568: LD_VAR 0 5
78572: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
78573: LD_INT 0
78575: PPUSH
78576: PPUSH
78577: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
78578: LD_ADDR_VAR 0 2
78582: PUSH
78583: LD_INT 0
78585: PUSH
78586: LD_INT 0
78588: PUSH
78589: LD_INT 0
78591: PUSH
78592: LD_INT 0
78594: PUSH
78595: EMPTY
78596: LIST
78597: LIST
78598: LIST
78599: LIST
78600: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
78601: LD_VAR 0 1
78605: NOT
78606: PUSH
78607: LD_VAR 0 1
78611: PPUSH
78612: CALL_OW 264
78616: PUSH
78617: LD_INT 12
78619: PUSH
78620: LD_INT 51
78622: PUSH
78623: LD_INT 32
78625: PUSH
78626: LD_EXP 46
78630: PUSH
78631: EMPTY
78632: LIST
78633: LIST
78634: LIST
78635: LIST
78636: IN
78637: NOT
78638: OR
78639: IFFALSE 78643
// exit ;
78641: GO 78741
// for i := 1 to 3 do
78643: LD_ADDR_VAR 0 3
78647: PUSH
78648: DOUBLE
78649: LD_INT 1
78651: DEC
78652: ST_TO_ADDR
78653: LD_INT 3
78655: PUSH
78656: FOR_TO
78657: IFFALSE 78739
// begin tmp := GetCargo ( cargo , i ) ;
78659: LD_ADDR_VAR 0 4
78663: PUSH
78664: LD_VAR 0 1
78668: PPUSH
78669: LD_VAR 0 3
78673: PPUSH
78674: CALL_OW 289
78678: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
78679: LD_ADDR_VAR 0 2
78683: PUSH
78684: LD_VAR 0 2
78688: PPUSH
78689: LD_VAR 0 3
78693: PPUSH
78694: LD_VAR 0 4
78698: PPUSH
78699: CALL_OW 1
78703: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
78704: LD_ADDR_VAR 0 2
78708: PUSH
78709: LD_VAR 0 2
78713: PPUSH
78714: LD_INT 4
78716: PPUSH
78717: LD_VAR 0 2
78721: PUSH
78722: LD_INT 4
78724: ARRAY
78725: PUSH
78726: LD_VAR 0 4
78730: PLUS
78731: PPUSH
78732: CALL_OW 1
78736: ST_TO_ADDR
// end ;
78737: GO 78656
78739: POP
78740: POP
// end ; end_of_file
78741: LD_VAR 0 2
78745: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
78746: LD_VAR 0 1
78750: PUSH
78751: LD_INT 200
78753: DOUBLE
78754: GREATEREQUAL
78755: IFFALSE 78763
78757: LD_INT 299
78759: DOUBLE
78760: LESSEQUAL
78761: IFTRUE 78765
78763: GO 78797
78765: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
78766: LD_VAR 0 1
78770: PPUSH
78771: LD_VAR 0 2
78775: PPUSH
78776: LD_VAR 0 3
78780: PPUSH
78781: LD_VAR 0 4
78785: PPUSH
78786: LD_VAR 0 5
78790: PPUSH
78791: CALL 34086 0 5
78795: GO 78874
78797: LD_INT 300
78799: DOUBLE
78800: GREATEREQUAL
78801: IFFALSE 78809
78803: LD_INT 399
78805: DOUBLE
78806: LESSEQUAL
78807: IFTRUE 78811
78809: GO 78873
78811: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
78812: LD_VAR 0 1
78816: PPUSH
78817: LD_VAR 0 2
78821: PPUSH
78822: LD_VAR 0 3
78826: PPUSH
78827: LD_VAR 0 4
78831: PPUSH
78832: LD_VAR 0 5
78836: PPUSH
78837: LD_VAR 0 6
78841: PPUSH
78842: LD_VAR 0 7
78846: PPUSH
78847: LD_VAR 0 8
78851: PPUSH
78852: LD_VAR 0 9
78856: PPUSH
78857: LD_VAR 0 10
78861: PPUSH
78862: LD_VAR 0 11
78866: PPUSH
78867: CALL 31728 0 11
78871: GO 78874
78873: POP
// end ;
78874: PPOPN 11
78876: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
78877: LD_VAR 0 1
78881: PPUSH
78882: LD_VAR 0 2
78886: PPUSH
78887: LD_VAR 0 3
78891: PPUSH
78892: LD_VAR 0 4
78896: PPUSH
78897: LD_VAR 0 5
78901: PPUSH
78902: CALL 33822 0 5
// end ; end_of_file
78906: PPOPN 5
78908: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
78909: LD_VAR 0 1
78913: PPUSH
78914: LD_VAR 0 2
78918: PPUSH
78919: LD_VAR 0 3
78923: PPUSH
78924: LD_VAR 0 4
78928: PPUSH
78929: LD_VAR 0 5
78933: PPUSH
78934: LD_VAR 0 6
78938: PPUSH
78939: CALL 19421 0 6
// end ;
78943: PPOPN 6
78945: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
78946: CALL 19396 0 0
// end ;
78950: PPOPN 1
78952: END
