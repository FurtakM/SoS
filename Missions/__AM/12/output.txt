// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15073 0 0
// PrepareDifficulty ;
  43: CALL 12446 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3810 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3948 0 0
// Action ;
  87: CALL 5612 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 39568 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 39568 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 39568 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 39568 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 39568 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 39568 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 39568 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 39568 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 39568 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 39568 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 39568 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 39568 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 39568 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 77270 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rubar3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 5 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 226
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 9
3431: PPUSH
3432: LD_INT 5
3434: PPUSH
3435: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 4
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 2
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 112
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 47
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 129
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3575: LD_INT 3
3577: PPUSH
3578: LD_INT 3
3580: PPUSH
3581: LD_INT 135
3583: PPUSH
3584: LD_EXP 29
3588: PPUSH
3589: LD_EXP 30
3593: PPUSH
3594: CALL_OW 12
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_INT 6
3604: PPUSH
3605: CALL 12765 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 32
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: FOR_IN
3644: IFFALSE 3684
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3646: LD_INT 3
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: LD_VAR 0 2
3656: PPUSH
3657: LD_EXP 29
3661: PPUSH
3662: LD_EXP 30
3666: PPUSH
3667: CALL_OW 12
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: CALL 12765 0 6
3682: GO 3643
3684: POP
3685: POP
// for i := 1 to 5 do
3686: LD_ADDR_VAR 0 2
3690: PUSH
3691: DOUBLE
3692: LD_INT 1
3694: DEC
3695: ST_TO_ADDR
3696: LD_INT 5
3698: PUSH
3699: FOR_TO
3700: IFFALSE 3803
// begin uc_side := 3 ;
3702: LD_ADDR_OWVAR 20
3706: PUSH
3707: LD_INT 3
3709: ST_TO_ADDR
// uc_nation := 3 ;
3710: LD_ADDR_OWVAR 21
3714: PUSH
3715: LD_INT 3
3717: ST_TO_ADDR
// hc_gallery :=  ;
3718: LD_ADDR_OWVAR 33
3722: PUSH
3723: LD_STRING 
3725: ST_TO_ADDR
// hc_name :=  ;
3726: LD_ADDR_OWVAR 26
3730: PUSH
3731: LD_STRING 
3733: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3734: LD_INT 0
3736: PPUSH
3737: LD_INT 4
3739: PPUSH
3740: LD_EXP 29
3744: PPUSH
3745: LD_EXP 30
3749: PPUSH
3750: CALL_OW 12
3754: PPUSH
3755: CALL_OW 380
// un := CreateHuman ;
3759: LD_ADDR_VAR 0 3
3763: PUSH
3764: CALL_OW 44
3768: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_INT 3
3776: PPUSH
3777: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3781: LD_ADDR_EXP 27
3785: PUSH
3786: LD_EXP 27
3790: PPUSH
3791: LD_VAR 0 3
3795: PPUSH
3796: CALL 77270 0 2
3800: ST_TO_ADDR
// end ;
3801: GO 3699
3803: POP
3804: POP
// end ;
3805: LD_VAR 0 1
3809: RET
// export function PrepareWestBase ; var i , un ; begin
3810: LD_INT 0
3812: PPUSH
3813: PPUSH
3814: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3815: LD_INT 10
3817: PPUSH
3818: LD_INT 122
3820: PPUSH
3821: LD_INT 145
3823: PPUSH
3824: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3828: LD_INT 137
3830: PPUSH
3831: LD_INT 84
3833: PPUSH
3834: LD_INT 61
3836: PPUSH
3837: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 6
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 2
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 91
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 4
3901: PPUSH
3902: LD_INT 3
3904: PPUSH
3905: CALL 12765 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 3
3914: PPUSH
3915: LD_INT 21
3917: PPUSH
3918: LD_EXP 29
3922: PPUSH
3923: LD_EXP 30
3927: PPUSH
3928: CALL_OW 12
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: LD_INT 6
3938: PPUSH
3939: CALL 12765 0 6
// end ;
3943: LD_VAR 0 1
3947: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3948: LD_INT 0
3950: PPUSH
3951: PPUSH
3952: PPUSH
3953: PPUSH
// uc_side := 3 ;
3954: LD_ADDR_OWVAR 20
3958: PUSH
3959: LD_INT 3
3961: ST_TO_ADDR
// uc_nation := 3 ;
3962: LD_ADDR_OWVAR 21
3966: PUSH
3967: LD_INT 3
3969: ST_TO_ADDR
// for i := 1 to 5 do
3970: LD_ADDR_VAR 0 2
3974: PUSH
3975: DOUBLE
3976: LD_INT 1
3978: DEC
3979: ST_TO_ADDR
3980: LD_INT 5
3982: PUSH
3983: FOR_TO
3984: IFFALSE 4054
// begin hc_gallery :=  ;
3986: LD_ADDR_OWVAR 33
3990: PUSH
3991: LD_STRING 
3993: ST_TO_ADDR
// hc_name :=  ;
3994: LD_ADDR_OWVAR 26
3998: PUSH
3999: LD_STRING 
4001: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4002: LD_INT 0
4004: PPUSH
4005: LD_INT 9
4007: PPUSH
4008: LD_EXP 29
4012: PPUSH
4013: LD_EXP 30
4017: PPUSH
4018: CALL_OW 12
4022: PPUSH
4023: CALL_OW 380
// un := CreateHuman ;
4027: LD_ADDR_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4037: LD_VAR 0 3
4041: PPUSH
4042: LD_INT 8
4044: PPUSH
4045: LD_INT 0
4047: PPUSH
4048: CALL_OW 49
// end ;
4052: GO 3983
4054: POP
4055: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4056: LD_ADDR_VAR 0 2
4060: PUSH
4061: DOUBLE
4062: LD_INT 1
4064: DEC
4065: ST_TO_ADDR
4066: LD_INT 2
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: LD_INT 4
4074: PUSH
4075: LD_INT 4
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_OWVAR 67
4088: ARRAY
4089: PUSH
4090: FOR_TO
4091: IFFALSE 4161
// begin hc_gallery :=  ;
4093: LD_ADDR_OWVAR 33
4097: PUSH
4098: LD_STRING 
4100: ST_TO_ADDR
// hc_name :=  ;
4101: LD_ADDR_OWVAR 26
4105: PUSH
4106: LD_STRING 
4108: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4109: LD_INT 0
4111: PPUSH
4112: LD_INT 4
4114: PPUSH
4115: LD_EXP 29
4119: PPUSH
4120: LD_EXP 30
4124: PPUSH
4125: CALL_OW 12
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 8
4151: PPUSH
4152: LD_INT 0
4154: PPUSH
4155: CALL_OW 49
// end ;
4159: GO 4090
4161: POP
4162: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4163: LD_ADDR_VAR 0 2
4167: PUSH
4168: DOUBLE
4169: LD_INT 1
4171: DEC
4172: ST_TO_ADDR
4173: LD_INT 3
4175: PUSH
4176: LD_INT 4
4178: PUSH
4179: LD_INT 5
4181: PUSH
4182: LD_INT 5
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: PUSH
4191: LD_OWVAR 67
4195: ARRAY
4196: PUSH
4197: FOR_TO
4198: IFFALSE 4415
// begin vc_engine = 3 ;
4200: LD_ADDR_OWVAR 39
4204: PUSH
4205: LD_INT 3
4207: ST_TO_ADDR
// vc_control = 1 ;
4208: LD_ADDR_OWVAR 38
4212: PUSH
4213: LD_INT 1
4215: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4216: LD_ADDR_OWVAR 40
4220: PUSH
4221: LD_INT 42
4223: PUSH
4224: LD_INT 43
4226: PUSH
4227: LD_INT 44
4229: PUSH
4230: LD_INT 45
4232: PUSH
4233: LD_INT 46
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: PUSH
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 5
4248: PPUSH
4249: CALL_OW 12
4253: ARRAY
4254: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4255: LD_OWVAR 40
4259: PUSH
4260: LD_INT 46
4262: EQUAL
4263: IFFALSE 4275
// vc_chassis := ru_heavy_tracked else
4265: LD_ADDR_OWVAR 37
4269: PUSH
4270: LD_INT 24
4272: ST_TO_ADDR
4273: GO 4302
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4275: LD_ADDR_OWVAR 37
4279: PUSH
4280: LD_INT 22
4282: PUSH
4283: LD_INT 21
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 2
4295: PPUSH
4296: CALL_OW 12
4300: ARRAY
4301: ST_TO_ADDR
// veh := CreateVehicle ;
4302: LD_ADDR_VAR 0 4
4306: PUSH
4307: CALL_OW 45
4311: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4312: LD_VAR 0 4
4316: PPUSH
4317: LD_INT 3
4319: PPUSH
4320: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4324: LD_VAR 0 4
4328: PPUSH
4329: LD_INT 5
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 49
// hc_gallery :=  ;
4339: LD_ADDR_OWVAR 33
4343: PUSH
4344: LD_STRING 
4346: ST_TO_ADDR
// hc_name :=  ;
4347: LD_ADDR_OWVAR 26
4351: PUSH
4352: LD_STRING 
4354: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
4355: LD_INT 0
4357: PPUSH
4358: LD_INT 3
4360: PPUSH
4361: LD_INT 6
4363: PUSH
4364: LD_INT 7
4366: PUSH
4367: LD_INT 8
4369: PUSH
4370: LD_INT 10
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PUSH
4379: LD_OWVAR 67
4383: ARRAY
4384: PPUSH
4385: CALL_OW 380
// un = CreateHuman ;
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: CALL_OW 44
4398: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: LD_VAR 0 4
4408: PPUSH
4409: CALL_OW 52
// end ;
4413: GO 4197
4415: POP
4416: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: DOUBLE
4423: LD_INT 1
4425: DEC
4426: ST_TO_ADDR
4427: LD_INT 3
4429: PUSH
4430: LD_INT 4
4432: PUSH
4433: LD_INT 5
4435: PUSH
4436: LD_INT 5
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: LD_OWVAR 67
4449: ARRAY
4450: PUSH
4451: FOR_TO
4452: IFFALSE 4599
// begin vc_engine := 3 ;
4454: LD_ADDR_OWVAR 39
4458: PUSH
4459: LD_INT 3
4461: ST_TO_ADDR
// vc_control := 3 ;
4462: LD_ADDR_OWVAR 38
4466: PUSH
4467: LD_INT 3
4469: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4470: LD_ADDR_OWVAR 40
4474: PUSH
4475: LD_INT 42
4477: PUSH
4478: LD_INT 43
4480: PUSH
4481: LD_INT 44
4483: PUSH
4484: LD_INT 45
4486: PUSH
4487: LD_INT 46
4489: PUSH
4490: LD_INT 49
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: PUSH
4501: LD_INT 1
4503: PPUSH
4504: LD_INT 5
4506: PPUSH
4507: CALL_OW 12
4511: ARRAY
4512: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4513: LD_OWVAR 40
4517: PUSH
4518: LD_INT 46
4520: EQUAL
4521: IFFALSE 4533
// vc_chassis := ru_heavy_tracked else
4523: LD_ADDR_OWVAR 37
4527: PUSH
4528: LD_INT 24
4530: ST_TO_ADDR
4531: GO 4560
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4533: LD_ADDR_OWVAR 37
4537: PUSH
4538: LD_INT 22
4540: PUSH
4541: LD_INT 21
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: CALL_OW 12
4558: ARRAY
4559: ST_TO_ADDR
// veh := CreateVehicle ;
4560: LD_ADDR_VAR 0 4
4564: PUSH
4565: CALL_OW 45
4569: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4570: LD_VAR 0 4
4574: PPUSH
4575: LD_INT 3
4577: PPUSH
4578: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4582: LD_VAR 0 4
4586: PPUSH
4587: LD_INT 6
4589: PPUSH
4590: LD_INT 0
4592: PPUSH
4593: CALL_OW 49
// end ;
4597: GO 4451
4599: POP
4600: POP
// end ; end_of_file
4601: LD_VAR 0 1
4605: RET
// export function PrepareKurt ; begin
4606: LD_INT 0
4608: PPUSH
// uc_side := 8 ;
4609: LD_ADDR_OWVAR 20
4613: PUSH
4614: LD_INT 8
4616: ST_TO_ADDR
// uc_nation := 2 ;
4617: LD_ADDR_OWVAR 21
4621: PUSH
4622: LD_INT 2
4624: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4625: LD_ADDR_OWVAR 37
4629: PUSH
4630: LD_INT 13
4632: ST_TO_ADDR
// vc_engine := 1 ;
4633: LD_ADDR_OWVAR 39
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// vc_control := 1 ;
4641: LD_ADDR_OWVAR 38
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// vc_weapon := 24 ;
4649: LD_ADDR_OWVAR 40
4653: PUSH
4654: LD_INT 24
4656: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
4657: LD_ADDR_EXP 18
4661: PUSH
4662: CALL_OW 45
4666: ST_TO_ADDR
// if kurtStatus > 0 then
4667: LD_EXP 19
4671: PUSH
4672: LD_INT 0
4674: GREATER
4675: IFFALSE 4727
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
4677: LD_ADDR_EXP 17
4681: PUSH
4682: LD_STRING Kurt
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: LD_STRING 
4690: PPUSH
4691: CALL 39568 0 3
4695: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4696: LD_EXP 18
4700: PPUSH
4701: LD_INT 4
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4711: LD_EXP 17
4715: PPUSH
4716: LD_EXP 18
4720: PPUSH
4721: CALL_OW 52
// end else
4725: GO 4804
// begin hc_name :=  ;
4727: LD_ADDR_OWVAR 26
4731: PUSH
4732: LD_STRING 
4734: ST_TO_ADDR
// hc_gallery :=  ;
4735: LD_ADDR_OWVAR 33
4739: PUSH
4740: LD_STRING 
4742: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4743: LD_INT 1
4745: PPUSH
4746: LD_INT 10
4748: PPUSH
4749: CALL_OW 381
// Kurt := CreateHuman ;
4753: LD_ADDR_EXP 17
4757: PUSH
4758: CALL_OW 44
4762: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4763: LD_EXP 18
4767: PPUSH
4768: LD_INT 4
4770: PPUSH
4771: LD_INT 0
4773: PPUSH
4774: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4778: LD_EXP 17
4782: PPUSH
4783: LD_EXP 18
4787: PPUSH
4788: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4792: LD_EXP 17
4796: PPUSH
4797: LD_STRING AltKurt
4799: PPUSH
4800: CALL_OW 38
// end ; end ;
4804: LD_VAR 0 1
4808: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4809: LD_INT 0
4811: PPUSH
4812: PPUSH
4813: PPUSH
4814: PPUSH
// for i := 1 to 3 do
4815: LD_ADDR_VAR 0 2
4819: PUSH
4820: DOUBLE
4821: LD_INT 1
4823: DEC
4824: ST_TO_ADDR
4825: LD_INT 3
4827: PUSH
4828: FOR_TO
4829: IFFALSE 4950
// begin uc_side := 1 ;
4831: LD_ADDR_OWVAR 20
4835: PUSH
4836: LD_INT 1
4838: ST_TO_ADDR
// uc_nation := 2 ;
4839: LD_ADDR_OWVAR 21
4843: PUSH
4844: LD_INT 2
4846: ST_TO_ADDR
// hc_gallery =  ;
4847: LD_ADDR_OWVAR 33
4851: PUSH
4852: LD_STRING 
4854: ST_TO_ADDR
// hc_name =  ;
4855: LD_ADDR_OWVAR 26
4859: PUSH
4860: LD_STRING 
4862: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4863: LD_EXP 19
4867: PUSH
4868: LD_INT 0
4870: EQUAL
4871: PUSH
4872: LD_EXP 19
4876: PUSH
4877: LD_INT 2
4879: EQUAL
4880: OR
4881: IFFALSE 4898
// PrepareHuman ( false , 1 , 6 ) else
4883: LD_INT 0
4885: PPUSH
4886: LD_INT 1
4888: PPUSH
4889: LD_INT 6
4891: PPUSH
4892: CALL_OW 380
4896: GO 4911
// PrepareHuman ( false , 1 , 8 ) ;
4898: LD_INT 0
4900: PPUSH
4901: LD_INT 1
4903: PPUSH
4904: LD_INT 8
4906: PPUSH
4907: CALL_OW 380
// un := CreateHuman ;
4911: LD_ADDR_VAR 0 3
4915: PUSH
4916: CALL_OW 44
4920: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4933: LD_VAR 0 3
4937: PPUSH
4938: LD_INT 4
4940: PPUSH
4941: LD_INT 0
4943: PPUSH
4944: CALL_OW 49
// end ;
4948: GO 4828
4950: POP
4951: POP
// vc_chassis := 14 ;
4952: LD_ADDR_OWVAR 37
4956: PUSH
4957: LD_INT 14
4959: ST_TO_ADDR
// vc_engine := 3 ;
4960: LD_ADDR_OWVAR 39
4964: PUSH
4965: LD_INT 3
4967: ST_TO_ADDR
// vc_control := 1 ;
4968: LD_ADDR_OWVAR 38
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4976: LD_ADDR_OWVAR 40
4980: PUSH
4981: LD_INT 27
4983: PUSH
4984: LD_INT 26
4986: PUSH
4987: LD_INT 28
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 1
4997: PPUSH
4998: LD_INT 3
5000: PPUSH
5001: CALL_OW 12
5005: ARRAY
5006: ST_TO_ADDR
// veh := CreateVehicle ;
5007: LD_ADDR_VAR 0 4
5011: PUSH
5012: CALL_OW 45
5016: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5017: LD_VAR 0 4
5021: PPUSH
5022: LD_INT 4
5024: PPUSH
5025: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5029: LD_VAR 0 4
5033: PPUSH
5034: LD_INT 4
5036: PPUSH
5037: LD_INT 0
5039: PPUSH
5040: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5044: LD_EXP 19
5048: PUSH
5049: LD_INT 0
5051: EQUAL
5052: PUSH
5053: LD_EXP 19
5057: PUSH
5058: LD_INT 2
5060: EQUAL
5061: OR
5062: IFFALSE 5079
// PrepareHuman ( false , 3 , 6 ) else
5064: LD_INT 0
5066: PPUSH
5067: LD_INT 3
5069: PPUSH
5070: LD_INT 6
5072: PPUSH
5073: CALL_OW 380
5077: GO 5092
// PrepareHuman ( false , 3 , 8 ) ;
5079: LD_INT 0
5081: PPUSH
5082: LD_INT 3
5084: PPUSH
5085: LD_INT 8
5087: PPUSH
5088: CALL_OW 380
// un := CreateHuman ;
5092: LD_ADDR_VAR 0 3
5096: PUSH
5097: CALL_OW 44
5101: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5102: LD_VAR 0 3
5106: PPUSH
5107: LD_VAR 0 4
5111: PPUSH
5112: CALL_OW 52
// vc_chassis := 14 ;
5116: LD_ADDR_OWVAR 37
5120: PUSH
5121: LD_INT 14
5123: ST_TO_ADDR
// vc_engine := 3 ;
5124: LD_ADDR_OWVAR 39
5128: PUSH
5129: LD_INT 3
5131: ST_TO_ADDR
// vc_control := 1 ;
5132: LD_ADDR_OWVAR 38
5136: PUSH
5137: LD_INT 1
5139: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5140: LD_ADDR_OWVAR 40
5144: PUSH
5145: LD_INT 27
5147: PUSH
5148: LD_INT 26
5150: PUSH
5151: LD_INT 28
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 1
5161: PPUSH
5162: LD_INT 3
5164: PPUSH
5165: CALL_OW 12
5169: ARRAY
5170: ST_TO_ADDR
// veh := CreateVehicle ;
5171: LD_ADDR_VAR 0 4
5175: PUSH
5176: CALL_OW 45
5180: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5181: LD_VAR 0 4
5185: PPUSH
5186: LD_INT 4
5188: PPUSH
5189: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5193: LD_VAR 0 4
5197: PPUSH
5198: LD_INT 4
5200: PPUSH
5201: LD_INT 0
5203: PPUSH
5204: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5208: LD_EXP 19
5212: PUSH
5213: LD_INT 0
5215: EQUAL
5216: PUSH
5217: LD_EXP 19
5221: PUSH
5222: LD_INT 2
5224: EQUAL
5225: OR
5226: IFFALSE 5243
// PrepareHuman ( false , 4 , 6 ) else
5228: LD_INT 0
5230: PPUSH
5231: LD_INT 4
5233: PPUSH
5234: LD_INT 6
5236: PPUSH
5237: CALL_OW 380
5241: GO 5256
// PrepareHuman ( false , 4 , 8 ) ;
5243: LD_INT 0
5245: PPUSH
5246: LD_INT 4
5248: PPUSH
5249: LD_INT 8
5251: PPUSH
5252: CALL_OW 380
// un := CreateHuman ;
5256: LD_ADDR_VAR 0 3
5260: PUSH
5261: CALL_OW 44
5265: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5266: LD_VAR 0 3
5270: PPUSH
5271: LD_INT 4
5273: PPUSH
5274: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5278: LD_VAR 0 3
5282: PPUSH
5283: LD_VAR 0 4
5287: PPUSH
5288: CALL_OW 52
// vc_chassis := 14 ;
5292: LD_ADDR_OWVAR 37
5296: PUSH
5297: LD_INT 14
5299: ST_TO_ADDR
// vc_engine := 3 ;
5300: LD_ADDR_OWVAR 39
5304: PUSH
5305: LD_INT 3
5307: ST_TO_ADDR
// vc_control := 1 ;
5308: LD_ADDR_OWVAR 38
5312: PUSH
5313: LD_INT 1
5315: ST_TO_ADDR
// vc_weapon := 26 ;
5316: LD_ADDR_OWVAR 40
5320: PUSH
5321: LD_INT 26
5323: ST_TO_ADDR
// veh := CreateVehicle ;
5324: LD_ADDR_VAR 0 4
5328: PUSH
5329: CALL_OW 45
5333: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5334: LD_VAR 0 4
5338: PPUSH
5339: LD_INT 4
5341: PPUSH
5342: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5346: LD_VAR 0 4
5350: PPUSH
5351: LD_INT 4
5353: PPUSH
5354: LD_INT 0
5356: PPUSH
5357: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5361: LD_EXP 19
5365: PUSH
5366: LD_INT 0
5368: EQUAL
5369: PUSH
5370: LD_EXP 19
5374: PUSH
5375: LD_INT 2
5377: EQUAL
5378: OR
5379: IFFALSE 5396
// PrepareHuman ( false , 2 , 4 ) else
5381: LD_INT 0
5383: PPUSH
5384: LD_INT 2
5386: PPUSH
5387: LD_INT 4
5389: PPUSH
5390: CALL_OW 380
5394: GO 5409
// PrepareHuman ( false , 2 , 8 ) ;
5396: LD_INT 0
5398: PPUSH
5399: LD_INT 2
5401: PPUSH
5402: LD_INT 8
5404: PPUSH
5405: CALL_OW 380
// un := CreateHuman ;
5409: LD_ADDR_VAR 0 3
5413: PUSH
5414: CALL_OW 44
5418: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5419: LD_VAR 0 3
5423: PPUSH
5424: LD_INT 4
5426: PPUSH
5427: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5431: LD_VAR 0 3
5435: PPUSH
5436: LD_VAR 0 4
5440: PPUSH
5441: CALL_OW 52
// end ;
5445: LD_VAR 0 1
5449: RET
// export function PrepareAttackLegion ; var i , un ; begin
5450: LD_INT 0
5452: PPUSH
5453: PPUSH
5454: PPUSH
// for i := 1 to 4 do
5455: LD_ADDR_VAR 0 2
5459: PUSH
5460: DOUBLE
5461: LD_INT 1
5463: DEC
5464: ST_TO_ADDR
5465: LD_INT 4
5467: PUSH
5468: FOR_TO
5469: IFFALSE 5579
// begin uc_side := 8 ;
5471: LD_ADDR_OWVAR 20
5475: PUSH
5476: LD_INT 8
5478: ST_TO_ADDR
// uc_nation := 2 ;
5479: LD_ADDR_OWVAR 21
5483: PUSH
5484: LD_INT 2
5486: ST_TO_ADDR
// hc_gallery :=  ;
5487: LD_ADDR_OWVAR 33
5491: PUSH
5492: LD_STRING 
5494: ST_TO_ADDR
// hc_name :=  ;
5495: LD_ADDR_OWVAR 26
5499: PUSH
5500: LD_STRING 
5502: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5503: LD_INT 0
5505: PPUSH
5506: LD_INT 1
5508: PUSH
5509: LD_INT 8
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 1
5518: PPUSH
5519: LD_INT 2
5521: PPUSH
5522: CALL_OW 12
5526: ARRAY
5527: PPUSH
5528: LD_INT 6
5530: PPUSH
5531: LD_INT 8
5533: PPUSH
5534: CALL_OW 12
5538: PPUSH
5539: CALL_OW 380
// un := CreateHuman ;
5543: LD_ADDR_VAR 0 3
5547: PUSH
5548: CALL_OW 44
5552: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5553: LD_VAR 0 3
5557: PPUSH
5558: LD_INT 19
5560: PPUSH
5561: LD_INT 0
5563: PPUSH
5564: CALL_OW 49
// ComCrawl ( un ) ;
5568: LD_VAR 0 3
5572: PPUSH
5573: CALL_OW 137
// end ;
5577: GO 5468
5579: POP
5580: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5581: LD_INT 1
5583: PPUSH
5584: LD_INT 8
5586: PPUSH
5587: LD_INT 2
5589: PPUSH
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5597: LD_INT 20
5599: PPUSH
5600: LD_INT 3
5602: PPUSH
5603: CALL 14600 0 2
// end ; end_of_file
5607: LD_VAR 0 1
5611: RET
// export function Action ; var i , tmp , group ; begin
5612: LD_INT 0
5614: PPUSH
5615: PPUSH
5616: PPUSH
5617: PPUSH
// InGameOn ;
5618: CALL_OW 8
// music_nat := 1 ;
5622: LD_ADDR_OWVAR 71
5626: PUSH
5627: LD_INT 1
5629: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5630: LD_ADDR_VAR 0 4
5634: PUSH
5635: LD_INT 22
5637: PUSH
5638: LD_INT 1
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: PPUSH
5645: CALL_OW 69
5649: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5650: LD_ADDR_VAR 0 3
5654: PUSH
5655: LD_EXP 1
5659: PPUSH
5660: CALL_OW 310
5664: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5665: LD_VAR 0 3
5669: PPUSH
5670: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5674: LD_VAR 0 4
5678: PPUSH
5679: LD_INT 130
5681: PPUSH
5682: LD_INT 103
5684: PPUSH
5685: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5689: LD_VAR 0 3
5693: PPUSH
5694: LD_INT 114
5696: PPUSH
5697: LD_INT 102
5699: PPUSH
5700: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5704: LD_EXP 1
5708: PPUSH
5709: LD_STRING D1-JMM-1
5711: PPUSH
5712: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5716: LD_VAR 0 3
5720: PPUSH
5721: CALL_OW 87
// if IsOk ( Donaldson ) then
5725: LD_EXP 3
5729: PPUSH
5730: CALL_OW 302
5734: IFFALSE 5799
// begin Say ( Donaldson , D1-Don-1 ) ;
5736: LD_EXP 3
5740: PPUSH
5741: LD_STRING D1-Don-1
5743: PPUSH
5744: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5748: LD_VAR 0 3
5752: PPUSH
5753: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5757: LD_EXP 1
5761: PPUSH
5762: LD_STRING D1-JMM-2
5764: PPUSH
5765: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5778: LD_EXP 3
5782: PPUSH
5783: LD_STRING D1-Don-2
5785: PPUSH
5786: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5790: LD_VAR 0 3
5794: PPUSH
5795: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5799: LD_VAR 0 4
5803: PPUSH
5804: LD_INT 110
5806: PPUSH
5807: LD_INT 101
5809: PPUSH
5810: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5814: LD_INT 35
5816: PPUSH
5817: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5821: LD_VAR 0 3
5825: PPUSH
5826: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5830: LD_INT 1
5832: PPUSH
5833: LD_INT 102
5835: PPUSH
5836: LD_INT 94
5838: PPUSH
5839: CALL_OW 293
5843: IFFALSE 5814
// CenterOnXY ( 102 , 94 ) ;
5845: LD_INT 102
5847: PPUSH
5848: LD_INT 94
5850: PPUSH
5851: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5855: LD_VAR 0 4
5859: PPUSH
5860: LD_INT 26
5862: PUSH
5863: LD_INT 1
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: PPUSH
5875: LD_STRING D1-Sol1-2
5877: PPUSH
5878: LD_STRING 
5880: PPUSH
5881: CALL 12260 0 3
// Say ( JMM , D1-JMM-3 ) ;
5885: LD_EXP 1
5889: PPUSH
5890: LD_STRING D1-JMM-3
5892: PPUSH
5893: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5897: LD_STRING M1
5899: PPUSH
5900: CALL_OW 337
// for i in group do
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_VAR 0 4
5913: PUSH
5914: FOR_IN
5915: IFFALSE 5934
// ComMoveXY ( i , 95 , 84 ) ;
5917: LD_VAR 0 2
5921: PPUSH
5922: LD_INT 95
5924: PPUSH
5925: LD_INT 84
5927: PPUSH
5928: CALL_OW 111
5932: GO 5914
5934: POP
5935: POP
// end ;
5936: LD_VAR 0 1
5940: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
5941: LD_INT 7
5943: PPUSH
5944: LD_INT 22
5946: PUSH
5947: LD_INT 1
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: PPUSH
5954: CALL_OW 70
5958: PUSH
5959: LD_INT 1
5961: GREATER
5962: IFFALSE 6612
5964: GO 5966
5966: DISABLE
5967: LD_INT 0
5969: PPUSH
5970: PPUSH
5971: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5972: LD_ADDR_VAR 0 2
5976: PUSH
5977: LD_INT 8
5979: PPUSH
5980: LD_INT 22
5982: PUSH
5983: LD_INT 3
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: LD_INT 25
5992: PUSH
5993: LD_INT 9
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PPUSH
6004: CALL_OW 70
6008: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
6009: LD_VAR 0 2
6013: PPUSH
6014: LD_INT 96
6016: PPUSH
6017: LD_INT 85
6019: PPUSH
6020: CALL_OW 154
// for i := 1 to 5 do
6024: LD_ADDR_VAR 0 1
6028: PUSH
6029: DOUBLE
6030: LD_INT 1
6032: DEC
6033: ST_TO_ADDR
6034: LD_INT 5
6036: PUSH
6037: FOR_TO
6038: IFFALSE 6057
// AddComTimeShift ( tmp , 96 , 85 ) ;
6040: LD_VAR 0 2
6044: PPUSH
6045: LD_INT 96
6047: PPUSH
6048: LD_INT 85
6050: PPUSH
6051: CALL_OW 214
6055: GO 6037
6057: POP
6058: POP
// wait ( 0 0$2 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6066: LD_EXP 1
6070: PPUSH
6071: LD_STRING D1a-JMM-1
6073: PPUSH
6074: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6078: LD_EXP 3
6082: PPUSH
6083: LD_STRING D1a-Don-1
6085: PPUSH
6086: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6090: LD_ADDR_VAR 0 1
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_INT 1
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PPUSH
6105: CALL_OW 69
6109: PUSH
6110: FOR_IN
6111: IFFALSE 6130
// ComMoveXY ( i , 109 , 102 ) ;
6113: LD_VAR 0 1
6117: PPUSH
6118: LD_INT 109
6120: PPUSH
6121: LD_INT 102
6123: PPUSH
6124: CALL_OW 111
6128: GO 6110
6130: POP
6131: POP
// Say ( JMM , D1a-JMM-2 ) ;
6132: LD_EXP 1
6136: PPUSH
6137: LD_STRING D1a-JMM-2
6139: PPUSH
6140: CALL_OW 88
// wait ( 0 0$10 ) ;
6144: LD_INT 350
6146: PPUSH
6147: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6151: LD_EXP 1
6155: PPUSH
6156: CALL_OW 310
6160: PPUSH
6161: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6165: LD_EXP 3
6169: PPUSH
6170: LD_STRING D1b-Don-1
6172: PPUSH
6173: CALL_OW 88
// if IsOk ( Donaldson ) then
6177: LD_EXP 3
6181: PPUSH
6182: CALL_OW 302
6186: IFFALSE 6200
// Say ( JMM , D1b-JMM-1 ) ;
6188: LD_EXP 1
6192: PPUSH
6193: LD_STRING D1b-JMM-1
6195: PPUSH
6196: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6200: LD_INT 22
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 26
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 2
6222: PUSH
6223: LD_INT 25
6225: PUSH
6226: LD_INT 1
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 25
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 25
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 25
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 25
6265: PUSH
6266: LD_INT 5
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 25
6275: PUSH
6276: LD_INT 8
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 69
6301: PPUSH
6302: LD_STRING D1b-Sol1-1
6304: PPUSH
6305: LD_STRING 
6307: PPUSH
6308: CALL 12260 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6312: LD_EXP 3
6316: PPUSH
6317: LD_STRING D1b-Don-2
6319: PPUSH
6320: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6324: LD_EXP 1
6328: PPUSH
6329: LD_STRING D1b-JMM-2
6331: PPUSH
6332: CALL_OW 88
// dec := ShowQuery1 ;
6336: LD_ADDR_VAR 0 3
6340: PUSH
6341: CALL 12723 0 0
6345: ST_TO_ADDR
// if dec = 1 then
6346: LD_VAR 0 3
6350: PUSH
6351: LD_INT 1
6353: EQUAL
6354: IFFALSE 6460
// begin Say ( JMM , D2-JMM-1 ) ;
6356: LD_EXP 1
6360: PPUSH
6361: LD_STRING D2-JMM-1
6363: PPUSH
6364: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6368: LD_EXP 15
6372: PPUSH
6373: LD_STRING D2-Pow-1
6375: PPUSH
6376: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6380: LD_EXP 1
6384: PPUSH
6385: LD_STRING D2a-JMM-1
6387: PPUSH
6388: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6392: LD_EXP 15
6396: PPUSH
6397: LD_STRING D2a-Pow-1
6399: PPUSH
6400: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6404: LD_EXP 1
6408: PPUSH
6409: LD_STRING D2a-JMM-2
6411: PPUSH
6412: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6416: LD_EXP 15
6420: PPUSH
6421: LD_STRING D2a-Pow-2
6423: PPUSH
6424: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6428: LD_EXP 1
6432: PPUSH
6433: LD_STRING D2a-JMM-3
6435: PPUSH
6436: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6440: LD_EXP 15
6444: PPUSH
6445: LD_STRING D2a-Pow-3
6447: PPUSH
6448: CALL_OW 94
// secondPass := 2 ;
6452: LD_ADDR_EXP 20
6456: PUSH
6457: LD_INT 2
6459: ST_TO_ADDR
// end ; if dec = 2 then
6460: LD_VAR 0 3
6464: PUSH
6465: LD_INT 2
6467: EQUAL
6468: IFFALSE 6562
// begin Say ( JMM , D2-JMM-1 ) ;
6470: LD_EXP 1
6474: PPUSH
6475: LD_STRING D2-JMM-1
6477: PPUSH
6478: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6482: LD_EXP 15
6486: PPUSH
6487: LD_STRING D2-Pow-1
6489: PPUSH
6490: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6494: LD_EXP 1
6498: PPUSH
6499: LD_STRING D2b-JMM-1
6501: PPUSH
6502: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6506: LD_EXP 15
6510: PPUSH
6511: LD_STRING D2b-Pow-1
6513: PPUSH
6514: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6518: LD_EXP 1
6522: PPUSH
6523: LD_STRING D2c-JMM-1
6525: PPUSH
6526: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6530: LD_EXP 15
6534: PPUSH
6535: LD_STRING D2c-Pow-1
6537: PPUSH
6538: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6542: LD_EXP 1
6546: PPUSH
6547: LD_STRING D2c-JMM-2
6549: PPUSH
6550: CALL_OW 88
// secondPass := 2 ;
6554: LD_ADDR_EXP 20
6558: PUSH
6559: LD_INT 2
6561: ST_TO_ADDR
// end ; if dec = 3 then
6562: LD_VAR 0 3
6566: PUSH
6567: LD_INT 3
6569: EQUAL
6570: IFFALSE 6580
// secondPass := 1 ;
6572: LD_ADDR_EXP 20
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: CALL_OW 9
// ruAI := 1 ;
6584: LD_ADDR_EXP 34
6588: PUSH
6589: LD_INT 1
6591: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6592: LD_INT 1
6594: PPUSH
6595: LD_INT 3
6597: PPUSH
6598: LD_INT 2
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: CALL_OW 80
// SaveForQuickRestart ;
6608: CALL_OW 22
// end ;
6612: PPOPN 3
6614: END
// every 1 1$0 trigger secondPass = 2 do
6615: LD_EXP 20
6619: PUSH
6620: LD_INT 2
6622: EQUAL
6623: IFFALSE 6843
6625: GO 6627
6627: DISABLE
// begin PowellSupport1 ;
6628: CALL 1985 0 0
// DialogueOn ;
6632: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6636: LD_EXP 1
6640: PPUSH
6641: LD_STRING DC1-JMM-1
6643: PPUSH
6644: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6648: LD_EXP 15
6652: PPUSH
6653: LD_STRING DC1-Pow-1
6655: PPUSH
6656: CALL_OW 94
// DialogueOff ;
6660: CALL_OW 7
// wait ( 3 3$0 ) ;
6664: LD_INT 6300
6666: PPUSH
6667: CALL_OW 67
// PowellSupport2 ;
6671: CALL 2466 0 0
// DialogueOn ;
6675: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6679: LD_EXP 1
6683: PPUSH
6684: LD_STRING DC2-JMM-1
6686: PPUSH
6687: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6691: LD_EXP 15
6695: PPUSH
6696: LD_STRING DC2-Pow-1
6698: PPUSH
6699: CALL_OW 94
// DialogueOff ;
6703: CALL_OW 7
// wait ( 3 3$00 ) ;
6707: LD_INT 6300
6709: PPUSH
6710: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6714: LD_INT 35
6716: PPUSH
6717: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6721: LD_INT 22
6723: PUSH
6724: LD_INT 1
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 2
6733: PUSH
6734: LD_INT 30
6736: PUSH
6737: LD_INT 0
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 30
6746: PUSH
6747: LD_INT 1
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 69
6767: PUSH
6768: LD_INT 11
6770: PPUSH
6771: LD_INT 22
6773: PUSH
6774: LD_INT 3
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PPUSH
6781: CALL_OW 70
6785: NOT
6786: AND
6787: IFFALSE 6714
// wait ( 0 0$10 ) ;
6789: LD_INT 350
6791: PPUSH
6792: CALL_OW 67
// Legion ;
6796: CALL 6844 0 0
// wait ( 5 5$0 ) ;
6800: LD_INT 10500
6802: PPUSH
6803: CALL_OW 67
// PowellSupport3 ;
6807: CALL 3079 0 0
// DialogueOn ;
6811: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6815: LD_EXP 15
6819: PPUSH
6820: LD_STRING DC3-Pow-1
6822: PPUSH
6823: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6827: LD_EXP 1
6831: PPUSH
6832: LD_STRING DC3-JMM-1
6834: PPUSH
6835: CALL_OW 88
// DialogueOff ;
6839: CALL_OW 7
// end ;
6843: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6844: LD_INT 0
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
6856: PPUSH
6857: PPUSH
6858: PPUSH
6859: PPUSH
6860: PPUSH
6861: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6862: LD_ADDR_VAR 0 5
6866: PUSH
6867: LD_INT 22
6869: PUSH
6870: LD_INT 1
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: LD_INT 21
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 2
6889: PUSH
6890: LD_INT 30
6892: PUSH
6893: LD_INT 0
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 30
6902: PUSH
6903: LD_INT 1
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: PPUSH
6920: CALL_OW 69
6924: ST_TO_ADDR
// crates := 0 ;
6925: LD_ADDR_VAR 0 8
6929: PUSH
6930: LD_INT 0
6932: ST_TO_ADDR
// oil := 0 ;
6933: LD_ADDR_VAR 0 9
6937: PUSH
6938: LD_INT 0
6940: ST_TO_ADDR
// siberite := 0 ;
6941: LD_ADDR_VAR 0 10
6945: PUSH
6946: LD_INT 0
6948: ST_TO_ADDR
// payForNeutral := false ;
6949: LD_ADDR_VAR 0 13
6953: PUSH
6954: LD_INT 0
6956: ST_TO_ADDR
// payForHelp := false ;
6957: LD_ADDR_VAR 0 14
6961: PUSH
6962: LD_INT 0
6964: ST_TO_ADDR
// for i in tmp do
6965: LD_ADDR_VAR 0 2
6969: PUSH
6970: LD_VAR 0 5
6974: PUSH
6975: FOR_IN
6976: IFFALSE 7067
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6978: LD_ADDR_VAR 0 8
6982: PUSH
6983: LD_VAR 0 8
6987: PUSH
6988: LD_VAR 0 2
6992: PPUSH
6993: CALL_OW 274
6997: PPUSH
6998: LD_INT 1
7000: PPUSH
7001: CALL_OW 275
7005: PLUS
7006: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7007: LD_ADDR_VAR 0 9
7011: PUSH
7012: LD_VAR 0 9
7016: PUSH
7017: LD_VAR 0 2
7021: PPUSH
7022: CALL_OW 274
7026: PPUSH
7027: LD_INT 2
7029: PPUSH
7030: CALL_OW 275
7034: PLUS
7035: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7036: LD_ADDR_VAR 0 10
7040: PUSH
7041: LD_VAR 0 10
7045: PUSH
7046: LD_VAR 0 2
7050: PPUSH
7051: CALL_OW 274
7055: PPUSH
7056: LD_INT 3
7058: PPUSH
7059: CALL_OW 275
7063: PLUS
7064: ST_TO_ADDR
// end ;
7065: GO 6975
7067: POP
7068: POP
// PrepareKurt ;
7069: CALL 4606 0 0
// if not Kurt then
7073: LD_EXP 17
7077: NOT
7078: IFFALSE 7082
// exit ;
7080: GO 9201
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7082: LD_EXP 18
7086: PPUSH
7087: LD_INT 144
7089: PPUSH
7090: LD_INT 111
7092: PPUSH
7093: CALL_OW 111
// wait ( 0 0$2 ) ;
7097: LD_INT 70
7099: PPUSH
7100: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7104: LD_INT 167
7106: PPUSH
7107: LD_INT 121
7109: PPUSH
7110: LD_INT 1
7112: PPUSH
7113: LD_INT 10
7115: NEG
7116: PPUSH
7117: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7121: LD_EXP 17
7125: PPUSH
7126: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7130: LD_EXP 17
7134: PPUSH
7135: CALL_OW 87
// wait ( 0 0$1 ) ;
7139: LD_INT 35
7141: PPUSH
7142: CALL_OW 67
// DialogueOn ;
7146: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7150: LD_INT 22
7152: PUSH
7153: LD_INT 1
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 26
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 2
7172: PUSH
7173: LD_INT 25
7175: PUSH
7176: LD_INT 1
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 25
7185: PUSH
7186: LD_INT 2
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 25
7195: PUSH
7196: LD_INT 3
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 25
7205: PUSH
7206: LD_INT 4
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 25
7215: PUSH
7216: LD_INT 5
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 25
7225: PUSH
7226: LD_INT 8
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: PPUSH
7247: CALL_OW 69
7251: PPUSH
7252: LD_STRING D3-Sol1-1
7254: PPUSH
7255: LD_STRING 
7257: PPUSH
7258: CALL 12260 0 3
// if KurtStatus then
7262: LD_EXP 19
7266: IFFALSE 7366
// begin Say ( Kurt , D3-Kurt-1 ) ;
7268: LD_EXP 17
7272: PPUSH
7273: LD_STRING D3-Kurt-1
7275: PPUSH
7276: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7280: LD_EXP 1
7284: PPUSH
7285: LD_STRING D3-JMM-1
7287: PPUSH
7288: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7292: LD_EXP 17
7296: PPUSH
7297: LD_STRING D3-Kurt-2
7299: PPUSH
7300: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7304: LD_EXP 1
7308: PPUSH
7309: LD_STRING D3-JMM-2
7311: PPUSH
7312: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7316: LD_EXP 17
7320: PPUSH
7321: LD_STRING D3-Kurt-4
7323: PPUSH
7324: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7328: LD_EXP 1
7332: PPUSH
7333: LD_STRING D3-JMM-4
7335: PPUSH
7336: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7340: LD_EXP 17
7344: PPUSH
7345: LD_STRING D3-Kurt-5
7347: PPUSH
7348: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7352: LD_EXP 17
7356: PPUSH
7357: LD_STRING D3-Kurt-5a
7359: PPUSH
7360: CALL_OW 88
// end else
7364: GO 7462
// begin Say ( Kurt , D3-Kurt-1 ) ;
7366: LD_EXP 17
7370: PPUSH
7371: LD_STRING D3-Kurt-1
7373: PPUSH
7374: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7378: LD_EXP 1
7382: PPUSH
7383: LD_STRING D3-JMM-1
7385: PPUSH
7386: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7390: LD_EXP 17
7394: PPUSH
7395: LD_STRING D3-Kurt-3
7397: PPUSH
7398: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7402: LD_EXP 1
7406: PPUSH
7407: LD_STRING D3-JMM-3
7409: PPUSH
7410: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7414: LD_EXP 17
7418: PPUSH
7419: LD_STRING D3-Kurt-4
7421: PPUSH
7422: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D3-JMM-4
7433: PPUSH
7434: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7438: LD_EXP 17
7442: PPUSH
7443: LD_STRING D3-Kurt-5
7445: PPUSH
7446: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7450: LD_EXP 17
7454: PPUSH
7455: LD_STRING D3-Kurt-5b
7457: PPUSH
7458: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7462: LD_VAR 0 8
7466: PUSH
7467: LD_INT 120
7469: PUSH
7470: LD_INT 60
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PUSH
7477: LD_EXP 19
7481: PUSH
7482: LD_INT 1
7484: PLUS
7485: ARRAY
7486: GREATEREQUAL
7487: PUSH
7488: LD_VAR 0 10
7492: PUSH
7493: LD_INT 120
7495: PUSH
7496: LD_INT 60
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_EXP 19
7507: PUSH
7508: LD_INT 1
7510: PLUS
7511: ARRAY
7512: GREATEREQUAL
7513: AND
7514: IFFALSE 7566
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7516: LD_ADDR_VAR 0 3
7520: PUSH
7521: LD_STRING Q2
7523: PUSH
7524: LD_STRING Q2K
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: LD_EXP 19
7535: PUSH
7536: LD_INT 1
7538: PLUS
7539: ARRAY
7540: PPUSH
7541: LD_INT 1
7543: PUSH
7544: LD_INT 2
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: LD_INT 4
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PPUSH
7559: CALL_OW 98
7563: ST_TO_ADDR
7564: GO 7610
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7566: LD_ADDR_VAR 0 3
7570: PUSH
7571: LD_STRING Q2
7573: PUSH
7574: LD_STRING Q2K
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_EXP 19
7585: PUSH
7586: LD_INT 1
7588: PLUS
7589: ARRAY
7590: PPUSH
7591: LD_INT 1
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: LD_INT 4
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 98
7609: ST_TO_ADDR
// if dec1 = 1 then
7610: LD_VAR 0 3
7614: PUSH
7615: LD_INT 1
7617: EQUAL
7618: IFFALSE 7652
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7620: LD_EXP 1
7624: PPUSH
7625: LD_STRING D3Ka-JMM-1
7627: PPUSH
7628: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7632: LD_EXP 17
7636: PPUSH
7637: LD_STRING D3Ka-Kurt-1
7639: PPUSH
7640: CALL_OW 88
// warWithLegion = 1 ;
7644: LD_ADDR_EXP 23
7648: PUSH
7649: LD_INT 1
7651: ST_TO_ADDR
// end ; if dec1 = 2 then
7652: LD_VAR 0 3
7656: PUSH
7657: LD_INT 2
7659: EQUAL
7660: IFFALSE 7744
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7662: LD_EXP 1
7666: PPUSH
7667: LD_STRING D3Kb-JMM-1
7669: PPUSH
7670: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7674: LD_EXP 17
7678: PPUSH
7679: LD_STRING D3Kb-Kurt-1
7681: PPUSH
7682: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7686: LD_ADDR_VAR 0 11
7690: PUSH
7691: LD_INT 120
7693: PUSH
7694: LD_INT 60
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_EXP 19
7705: PUSH
7706: LD_INT 1
7708: PLUS
7709: ARRAY
7710: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7711: LD_ADDR_VAR 0 12
7715: PUSH
7716: LD_INT 120
7718: PUSH
7719: LD_INT 60
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: LD_EXP 19
7730: PUSH
7731: LD_INT 1
7733: PLUS
7734: ARRAY
7735: ST_TO_ADDR
// payForNeutral := true ;
7736: LD_ADDR_VAR 0 13
7740: PUSH
7741: LD_INT 1
7743: ST_TO_ADDR
// end ; if dec1 = 3 then
7744: LD_VAR 0 3
7748: PUSH
7749: LD_INT 3
7751: EQUAL
7752: IFFALSE 7987
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7754: LD_EXP 1
7758: PPUSH
7759: LD_STRING D3Kc1-JMM-1
7761: PPUSH
7762: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7766: LD_EXP 17
7770: PPUSH
7771: LD_STRING D3Kc1-Kurt-1
7773: PPUSH
7774: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7778: LD_EXP 1
7782: PPUSH
7783: LD_STRING D3Kc1-JMM-2
7785: PPUSH
7786: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7790: LD_EXP 17
7794: PPUSH
7795: LD_STRING D3Kc1-Kurt-2
7797: PPUSH
7798: CALL_OW 88
// askSiberite = 1 ;
7802: LD_ADDR_EXP 25
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7810: LD_ADDR_VAR 0 4
7814: PUSH
7815: LD_STRING Q2b
7817: PPUSH
7818: LD_INT 1
7820: PUSH
7821: LD_INT 2
7823: PUSH
7824: LD_INT 3
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: PPUSH
7832: CALL_OW 98
7836: ST_TO_ADDR
// if dec2 = 1 then
7837: LD_VAR 0 4
7841: PUSH
7842: LD_INT 1
7844: EQUAL
7845: IFFALSE 7879
// begin Say ( JMM , D4a-JMM-1 ) ;
7847: LD_EXP 1
7851: PPUSH
7852: LD_STRING D4a-JMM-1
7854: PPUSH
7855: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7859: LD_EXP 17
7863: PPUSH
7864: LD_STRING D4b-Kurt-1
7866: PPUSH
7867: CALL_OW 88
// warWithLegion = 1 ;
7871: LD_ADDR_EXP 23
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// end ; if dec2 = 2 then
7879: LD_VAR 0 4
7883: PUSH
7884: LD_INT 2
7886: EQUAL
7887: IFFALSE 7921
// begin Say ( JMM , D4b-JMM-1 ) ;
7889: LD_EXP 1
7893: PPUSH
7894: LD_STRING D4b-JMM-1
7896: PPUSH
7897: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7901: LD_EXP 17
7905: PPUSH
7906: LD_STRING D4b-Kurt-1
7908: PPUSH
7909: CALL_OW 88
// warWithLegion = 1 ;
7913: LD_ADDR_EXP 23
7917: PUSH
7918: LD_INT 1
7920: ST_TO_ADDR
// end ; if dec2 = 3 then
7921: LD_VAR 0 4
7925: PUSH
7926: LD_INT 3
7928: EQUAL
7929: IFFALSE 7987
// begin Say ( JMM , D4c-JMM-1 ) ;
7931: LD_EXP 1
7935: PPUSH
7936: LD_STRING D4c-JMM-1
7938: PPUSH
7939: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7943: LD_EXP 17
7947: PPUSH
7948: LD_STRING D4c-Kurt-1
7950: PPUSH
7951: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7955: LD_EXP 1
7959: PPUSH
7960: LD_STRING D4c-JMM-2
7962: PPUSH
7963: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7967: LD_EXP 17
7971: PPUSH
7972: LD_STRING D4c-Kurt-2
7974: PPUSH
7975: CALL_OW 88
// fakeInfo = 1 ;
7979: LD_ADDR_EXP 24
7983: PUSH
7984: LD_INT 1
7986: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7987: LD_VAR 0 3
7991: PUSH
7992: LD_INT 4
7994: EQUAL
7995: IFFALSE 9057
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7997: LD_EXP 1
8001: PPUSH
8002: LD_STRING D3Kd-JMM-1
8004: PPUSH
8005: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8009: LD_VAR 0 8
8013: PUSH
8014: LD_INT 200
8016: PUSH
8017: LD_INT 120
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_EXP 19
8028: PUSH
8029: LD_INT 1
8031: PLUS
8032: ARRAY
8033: GREATEREQUAL
8034: PUSH
8035: LD_VAR 0 10
8039: PUSH
8040: LD_INT 200
8042: PUSH
8043: LD_INT 120
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_EXP 19
8054: PUSH
8055: LD_INT 1
8057: PLUS
8058: ARRAY
8059: GREATEREQUAL
8060: AND
8061: IFFALSE 8113
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8063: LD_ADDR_VAR 0 4
8067: PUSH
8068: LD_STRING Q2a
8070: PUSH
8071: LD_STRING Q2aK
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_EXP 19
8082: PUSH
8083: LD_INT 1
8085: PLUS
8086: ARRAY
8087: PPUSH
8088: LD_INT 1
8090: PUSH
8091: LD_INT 2
8093: PUSH
8094: LD_INT 3
8096: PUSH
8097: LD_INT 4
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 98
8110: ST_TO_ADDR
8111: GO 8277
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8113: LD_VAR 0 8
8117: PUSH
8118: LD_INT 120
8120: PUSH
8121: LD_INT 60
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PUSH
8128: LD_EXP 19
8132: PUSH
8133: LD_INT 1
8135: PLUS
8136: ARRAY
8137: GREATEREQUAL
8138: PUSH
8139: LD_VAR 0 10
8143: PUSH
8144: LD_INT 120
8146: PUSH
8147: LD_INT 60
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_EXP 19
8158: PUSH
8159: LD_INT 1
8161: PLUS
8162: ARRAY
8163: GREATEREQUAL
8164: AND
8165: IFFALSE 8213
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8167: LD_ADDR_VAR 0 4
8171: PUSH
8172: LD_STRING Q2a
8174: PUSH
8175: LD_STRING Q2aK
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_EXP 19
8186: PUSH
8187: LD_INT 1
8189: PLUS
8190: ARRAY
8191: PPUSH
8192: LD_INT 1
8194: PUSH
8195: LD_INT 2
8197: PUSH
8198: LD_INT 4
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: PPUSH
8206: CALL_OW 98
8210: ST_TO_ADDR
8211: GO 8277
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8213: LD_STRING Q2d
8215: PUSH
8216: LD_STRING Q2dK
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_EXP 19
8227: PUSH
8228: LD_INT 1
8230: PLUS
8231: ARRAY
8232: PPUSH
8233: CALL_OW 97
// dec2 := 0 ;
8237: LD_ADDR_VAR 0 4
8241: PUSH
8242: LD_INT 0
8244: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8245: LD_EXP 1
8249: PPUSH
8250: LD_STRING D3Kc1-JMM-1
8252: PPUSH
8253: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8257: LD_EXP 17
8261: PPUSH
8262: LD_STRING D3Kc2-Kurt-1
8264: PPUSH
8265: CALL_OW 88
// warWithLegion := 1 ;
8269: LD_ADDR_EXP 23
8273: PUSH
8274: LD_INT 1
8276: ST_TO_ADDR
// end ; if dec2 = 1 then
8277: LD_VAR 0 4
8281: PUSH
8282: LD_INT 1
8284: EQUAL
8285: IFFALSE 8319
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8287: LD_EXP 1
8291: PPUSH
8292: LD_STRING D5Ka-JMM-1
8294: PPUSH
8295: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8299: LD_EXP 17
8303: PPUSH
8304: LD_STRING D5Ka-Kurt-1
8306: PPUSH
8307: CALL_OW 88
// warWithLegion = 1 ;
8311: LD_ADDR_EXP 23
8315: PUSH
8316: LD_INT 1
8318: ST_TO_ADDR
// end ; if dec2 = 2 then
8319: LD_VAR 0 4
8323: PUSH
8324: LD_INT 2
8326: EQUAL
8327: IFFALSE 8411
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8329: LD_EXP 1
8333: PPUSH
8334: LD_STRING D3Kb-JMM-1
8336: PPUSH
8337: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8341: LD_EXP 17
8345: PPUSH
8346: LD_STRING D3Kb-Kurt-1
8348: PPUSH
8349: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8353: LD_ADDR_VAR 0 11
8357: PUSH
8358: LD_INT 120
8360: PUSH
8361: LD_INT 60
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: LD_EXP 19
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: ARRAY
8377: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8378: LD_ADDR_VAR 0 12
8382: PUSH
8383: LD_INT 120
8385: PUSH
8386: LD_INT 60
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_EXP 19
8397: PUSH
8398: LD_INT 1
8400: PLUS
8401: ARRAY
8402: ST_TO_ADDR
// payForNeutral := true ;
8403: LD_ADDR_VAR 0 13
8407: PUSH
8408: LD_INT 1
8410: ST_TO_ADDR
// end ; if dec2 = 3 then
8411: LD_VAR 0 4
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: IFFALSE 8503
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8421: LD_EXP 1
8425: PPUSH
8426: LD_STRING D3Ke-JMM-1
8428: PPUSH
8429: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8433: LD_EXP 17
8437: PPUSH
8438: LD_STRING D3Ke-Kurt-1
8440: PPUSH
8441: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8445: LD_ADDR_VAR 0 11
8449: PUSH
8450: LD_INT 200
8452: PUSH
8453: LD_INT 120
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_EXP 19
8464: PUSH
8465: LD_INT 1
8467: PLUS
8468: ARRAY
8469: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8470: LD_ADDR_VAR 0 12
8474: PUSH
8475: LD_INT 200
8477: PUSH
8478: LD_INT 120
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_EXP 19
8489: PUSH
8490: LD_INT 1
8492: PLUS
8493: ARRAY
8494: ST_TO_ADDR
// payForHelp := true ;
8495: LD_ADDR_VAR 0 14
8499: PUSH
8500: LD_INT 1
8502: ST_TO_ADDR
// end ; if dec2 = 4 then
8503: LD_VAR 0 4
8507: PUSH
8508: LD_INT 4
8510: EQUAL
8511: IFFALSE 8746
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8513: LD_EXP 1
8517: PPUSH
8518: LD_STRING D3Kc1-JMM-1
8520: PPUSH
8521: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8525: LD_EXP 17
8529: PPUSH
8530: LD_STRING D3Kc1-Kurt-1
8532: PPUSH
8533: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8537: LD_EXP 1
8541: PPUSH
8542: LD_STRING D3Kc1-JMM-2
8544: PPUSH
8545: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8549: LD_EXP 17
8553: PPUSH
8554: LD_STRING D3Kc1-Kurt-2
8556: PPUSH
8557: CALL_OW 88
// askSiberite = 1 ;
8561: LD_ADDR_EXP 25
8565: PUSH
8566: LD_INT 1
8568: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8569: LD_ADDR_VAR 0 4
8573: PUSH
8574: LD_STRING Q2b
8576: PPUSH
8577: LD_INT 1
8579: PUSH
8580: LD_INT 2
8582: PUSH
8583: LD_INT 3
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PPUSH
8591: CALL_OW 98
8595: ST_TO_ADDR
// if dec2 = 1 then
8596: LD_VAR 0 4
8600: PUSH
8601: LD_INT 1
8603: EQUAL
8604: IFFALSE 8638
// begin Say ( JMM , D4a-JMM-1 ) ;
8606: LD_EXP 1
8610: PPUSH
8611: LD_STRING D4a-JMM-1
8613: PPUSH
8614: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8618: LD_EXP 17
8622: PPUSH
8623: LD_STRING D4b-Kurt-1
8625: PPUSH
8626: CALL_OW 88
// warWithLegion = 1 ;
8630: LD_ADDR_EXP 23
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// end ; if dec2 = 2 then
8638: LD_VAR 0 4
8642: PUSH
8643: LD_INT 2
8645: EQUAL
8646: IFFALSE 8680
// begin Say ( JMM , D4b-JMM-1 ) ;
8648: LD_EXP 1
8652: PPUSH
8653: LD_STRING D4b-JMM-1
8655: PPUSH
8656: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8660: LD_EXP 17
8664: PPUSH
8665: LD_STRING D4b-Kurt-1
8667: PPUSH
8668: CALL_OW 88
// warWithLegion = 1 ;
8672: LD_ADDR_EXP 23
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// end ; if dec2 = 3 then
8680: LD_VAR 0 4
8684: PUSH
8685: LD_INT 3
8687: EQUAL
8688: IFFALSE 8746
// begin Say ( JMM , D4c-JMM-1 ) ;
8690: LD_EXP 1
8694: PPUSH
8695: LD_STRING D4c-JMM-1
8697: PPUSH
8698: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8702: LD_EXP 17
8706: PPUSH
8707: LD_STRING D4c-Kurt-1
8709: PPUSH
8710: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8714: LD_EXP 1
8718: PPUSH
8719: LD_STRING D4c-JMM-2
8721: PPUSH
8722: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8726: LD_EXP 17
8730: PPUSH
8731: LD_STRING D4c-Kurt-2
8733: PPUSH
8734: CALL_OW 88
// fakeInfo = 1 ;
8738: LD_ADDR_EXP 24
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8746: LD_VAR 0 13
8750: PUSH
8751: LD_VAR 0 14
8755: OR
8756: IFFALSE 9057
// begin for i in tmp do
8758: LD_ADDR_VAR 0 2
8762: PUSH
8763: LD_VAR 0 5
8767: PUSH
8768: FOR_IN
8769: IFFALSE 9055
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8771: LD_ADDR_VAR 0 6
8775: PUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: CALL_OW 274
8785: PPUSH
8786: LD_INT 1
8788: PPUSH
8789: CALL_OW 275
8793: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8794: LD_ADDR_VAR 0 7
8798: PUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 274
8808: PPUSH
8809: LD_INT 3
8811: PPUSH
8812: CALL_OW 275
8816: ST_TO_ADDR
// if cr then
8817: LD_VAR 0 11
8821: IFFALSE 8935
// begin if tmp2 and tmp2 < cr then
8823: LD_VAR 0 6
8827: PUSH
8828: LD_VAR 0 6
8832: PUSH
8833: LD_VAR 0 11
8837: LESS
8838: AND
8839: IFFALSE 8887
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8841: LD_VAR 0 2
8845: PPUSH
8846: CALL_OW 274
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: LD_VAR 0 11
8858: PUSH
8859: LD_VAR 0 6
8863: MINUS
8864: PPUSH
8865: CALL_OW 277
// cr := cr - tmp2 ;
8869: LD_ADDR_VAR 0 11
8873: PUSH
8874: LD_VAR 0 11
8878: PUSH
8879: LD_VAR 0 6
8883: MINUS
8884: ST_TO_ADDR
// end else
8885: GO 8935
// if tmp2 > cr then
8887: LD_VAR 0 6
8891: PUSH
8892: LD_VAR 0 11
8896: GREATER
8897: IFFALSE 8935
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 274
8908: PPUSH
8909: LD_INT 1
8911: PPUSH
8912: LD_VAR 0 6
8916: PUSH
8917: LD_VAR 0 11
8921: MINUS
8922: PPUSH
8923: CALL_OW 277
// cr := 0 ;
8927: LD_ADDR_VAR 0 11
8931: PUSH
8932: LD_INT 0
8934: ST_TO_ADDR
// end ; end ; if sb then
8935: LD_VAR 0 12
8939: IFFALSE 9053
// begin if tmp3 and tmp3 < sb then
8941: LD_VAR 0 7
8945: PUSH
8946: LD_VAR 0 7
8950: PUSH
8951: LD_VAR 0 12
8955: LESS
8956: AND
8957: IFFALSE 9005
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8959: LD_VAR 0 2
8963: PPUSH
8964: CALL_OW 274
8968: PPUSH
8969: LD_INT 3
8971: PPUSH
8972: LD_VAR 0 12
8976: PUSH
8977: LD_VAR 0 7
8981: MINUS
8982: PPUSH
8983: CALL_OW 277
// sb := sb - tmp3 ;
8987: LD_ADDR_VAR 0 12
8991: PUSH
8992: LD_VAR 0 12
8996: PUSH
8997: LD_VAR 0 7
9001: MINUS
9002: ST_TO_ADDR
// end else
9003: GO 9053
// if tmp3 > sb then
9005: LD_VAR 0 7
9009: PUSH
9010: LD_VAR 0 12
9014: GREATER
9015: IFFALSE 9053
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9017: LD_VAR 0 2
9021: PPUSH
9022: CALL_OW 274
9026: PPUSH
9027: LD_INT 3
9029: PPUSH
9030: LD_VAR 0 7
9034: PUSH
9035: LD_VAR 0 12
9039: MINUS
9040: PPUSH
9041: CALL_OW 277
// sb := 0 ;
9045: LD_ADDR_VAR 0 12
9049: PUSH
9050: LD_INT 0
9052: ST_TO_ADDR
// end ; end ; end ;
9053: GO 8768
9055: POP
9056: POP
// end ; end ; DialogueOff ;
9057: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9061: LD_INT 167
9063: PPUSH
9064: LD_INT 121
9066: PPUSH
9067: LD_INT 1
9069: PPUSH
9070: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9074: LD_EXP 17
9078: PPUSH
9079: LD_EXP 18
9083: PPUSH
9084: CALL_OW 120
// wait ( 0 0$1 ) ;
9088: LD_INT 35
9090: PPUSH
9091: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9095: LD_EXP 18
9099: PPUSH
9100: LD_INT 4
9102: PPUSH
9103: CALL_OW 113
// wait ( 0 0$3 ) ;
9107: LD_INT 105
9109: PPUSH
9110: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9114: LD_EXP 17
9118: PPUSH
9119: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9123: LD_EXP 18
9127: PPUSH
9128: CALL_OW 64
// wait ( 0 0$3 ) ;
9132: LD_INT 105
9134: PPUSH
9135: CALL_OW 67
// if payForHelp then
9139: LD_VAR 0 14
9143: IFFALSE 9201
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9145: LD_INT 36
9147: PPUSH
9148: LD_INT 57
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9158: LD_INT 51
9160: PPUSH
9161: LD_INT 63
9163: PPUSH
9164: LD_INT 1
9166: PPUSH
9167: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9171: LD_INT 93
9173: PPUSH
9174: LD_INT 65
9176: PPUSH
9177: LD_INT 1
9179: PPUSH
9180: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9184: LD_INT 42
9186: PPUSH
9187: LD_INT 12
9189: PPUSH
9190: LD_INT 1
9192: PPUSH
9193: CALL_OW 244
// PrepareLegionForPlayer ;
9197: CALL 4809 0 0
// end ; end ;
9201: LD_VAR 0 1
9205: RET
// every 0 0$10 trigger warWithLegion = 1 do
9206: LD_EXP 23
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9230
9216: GO 9218
9218: DISABLE
// begin wait ( 0 0$30 ) ;
9219: LD_INT 1050
9221: PPUSH
9222: CALL_OW 67
// PrepareAttackLegion ;
9226: CALL 5450 0 0
// end ;
9230: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9231: LD_INT 120
9233: PUSH
9234: LD_INT 17
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: LD_INT 52
9243: PUSH
9244: EMPTY
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PPUSH
9251: CALL_OW 69
9255: IFFALSE 9400
9257: GO 9259
9259: DISABLE
9260: LD_INT 0
9262: PPUSH
// begin enable ;
9263: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9264: LD_ADDR_VAR 0 1
9268: PUSH
9269: LD_INT 120
9271: PUSH
9272: LD_INT 17
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 52
9281: PUSH
9282: EMPTY
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PPUSH
9289: CALL_OW 69
9293: PUSH
9294: FOR_IN
9295: IFFALSE 9398
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9297: LD_VAR 0 1
9301: PPUSH
9302: CALL 80835 0 1
9306: PUSH
9307: LD_INT 4
9309: ARRAY
9310: PUSH
9311: LD_INT 0
9313: EQUAL
9314: PUSH
9315: LD_VAR 0 1
9319: PPUSH
9320: CALL_OW 255
9324: PUSH
9325: LD_INT 1
9327: EQUAL
9328: AND
9329: IFFALSE 9343
// SetSide ( i , 4 ) ;
9331: LD_VAR 0 1
9335: PPUSH
9336: LD_INT 4
9338: PPUSH
9339: CALL_OW 235
// if GetSide ( i ) = 4 then
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL_OW 255
9352: PUSH
9353: LD_INT 4
9355: EQUAL
9356: IFFALSE 9396
// if not IsInArea ( i , PlayerSpawn ) then
9358: LD_VAR 0 1
9362: PPUSH
9363: LD_INT 4
9365: PPUSH
9366: CALL_OW 308
9370: NOT
9371: IFFALSE 9387
// ComMoveToArea ( i , PlayerSpawn ) else
9373: LD_VAR 0 1
9377: PPUSH
9378: LD_INT 4
9380: PPUSH
9381: CALL_OW 113
9385: GO 9396
// RemoveUnit ( i ) ;
9387: LD_VAR 0 1
9391: PPUSH
9392: CALL_OW 64
// end ;
9396: GO 9294
9398: POP
9399: POP
// end ;
9400: PPOPN 1
9402: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
9403: LD_EXP 20
9407: PUSH
9408: LD_INT 1
9410: EQUAL
9411: PUSH
9412: LD_INT 12
9414: PPUSH
9415: LD_INT 22
9417: PUSH
9418: LD_INT 3
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 101
9427: PUSH
9428: LD_INT 1
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 21
9437: PUSH
9438: LD_INT 2
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: PPUSH
9450: CALL_OW 70
9454: AND
9455: IFFALSE 10004
9457: GO 9459
9459: DISABLE
9460: LD_INT 0
9462: PPUSH
9463: PPUSH
9464: PPUSH
// begin DialogueOn ;
9465: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9469: LD_VAR 0 1
9473: PPUSH
9474: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9478: LD_INT 22
9480: PUSH
9481: LD_INT 1
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: LD_INT 26
9490: PUSH
9491: LD_INT 1
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 25
9503: PUSH
9504: LD_INT 1
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 25
9513: PUSH
9514: LD_INT 2
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 25
9523: PUSH
9524: LD_INT 3
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 25
9533: PUSH
9534: LD_INT 4
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 25
9543: PUSH
9544: LD_INT 5
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 25
9553: PUSH
9554: LD_INT 8
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: PPUSH
9575: CALL_OW 69
9579: PPUSH
9580: LD_STRING DT1-Sol1-1
9582: PPUSH
9583: LD_STRING DT1-FSol1-1
9585: PPUSH
9586: CALL 12260 0 3
// dec := ShowQuery2 ;
9590: LD_ADDR_VAR 0 3
9594: PUSH
9595: CALL 12744 0 0
9599: ST_TO_ADDR
// if dec = 1 then
9600: LD_VAR 0 3
9604: PUSH
9605: LD_INT 1
9607: EQUAL
9608: IFFALSE 9714
// begin Say ( JMM , D2-JMM-1 ) ;
9610: LD_EXP 1
9614: PPUSH
9615: LD_STRING D2-JMM-1
9617: PPUSH
9618: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9622: LD_EXP 15
9626: PPUSH
9627: LD_STRING D2-Pow-1
9629: PPUSH
9630: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9634: LD_EXP 1
9638: PPUSH
9639: LD_STRING D2a-JMM-1
9641: PPUSH
9642: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9646: LD_EXP 15
9650: PPUSH
9651: LD_STRING D2a-Pow-1
9653: PPUSH
9654: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9658: LD_EXP 1
9662: PPUSH
9663: LD_STRING D2a-JMM-2
9665: PPUSH
9666: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9670: LD_EXP 15
9674: PPUSH
9675: LD_STRING D2a-Pow-2
9677: PPUSH
9678: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9682: LD_EXP 1
9686: PPUSH
9687: LD_STRING D2a-JMM-3
9689: PPUSH
9690: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9694: LD_EXP 15
9698: PPUSH
9699: LD_STRING D2a-Pow-3
9701: PPUSH
9702: CALL_OW 94
// secondPass := 2 ;
9706: LD_ADDR_EXP 20
9710: PUSH
9711: LD_INT 2
9713: ST_TO_ADDR
// end ; if dec = 2 then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_INT 2
9721: EQUAL
9722: IFFALSE 9816
// begin Say ( JMM , D2-JMM-1 ) ;
9724: LD_EXP 1
9728: PPUSH
9729: LD_STRING D2-JMM-1
9731: PPUSH
9732: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9736: LD_EXP 15
9740: PPUSH
9741: LD_STRING D2-Pow-1
9743: PPUSH
9744: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9748: LD_EXP 1
9752: PPUSH
9753: LD_STRING D2b-JMM-1
9755: PPUSH
9756: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9760: LD_EXP 15
9764: PPUSH
9765: LD_STRING D2b-Pow-1
9767: PPUSH
9768: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9772: LD_EXP 1
9776: PPUSH
9777: LD_STRING D2c-JMM-1
9779: PPUSH
9780: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9784: LD_EXP 15
9788: PPUSH
9789: LD_STRING D2c-Pow-1
9791: PPUSH
9792: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9796: LD_EXP 1
9800: PPUSH
9801: LD_STRING D2c-JMM-2
9803: PPUSH
9804: CALL_OW 88
// secondPass := 2 ;
9808: LD_ADDR_EXP 20
9812: PUSH
9813: LD_INT 2
9815: ST_TO_ADDR
// end ; DialogueOff ;
9816: CALL_OW 7
// if secondPass = 2 then
9820: LD_EXP 20
9824: PUSH
9825: LD_INT 2
9827: EQUAL
9828: IFFALSE 9832
// exit ;
9830: GO 10004
// Query ( HelpRequest ) ;
9832: LD_STRING HelpRequest
9834: PPUSH
9835: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
9839: LD_INT 27
9841: PPUSH
9842: LD_INT 1
9844: PPUSH
9845: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9849: LD_INT 35
9851: PPUSH
9852: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
9856: LD_EXP 1
9860: PPUSH
9861: LD_INT 27
9863: PPUSH
9864: CALL_OW 308
9868: IFFALSE 9849
// SetAreaMapShow ( helpRequestArea , 0 ) ;
9870: LD_INT 27
9872: PPUSH
9873: LD_INT 0
9875: PPUSH
9876: CALL_OW 424
// DialogueOn ;
9880: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
9884: LD_EXP 1
9888: PPUSH
9889: LD_STRING D2-JMM-1
9891: PPUSH
9892: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9896: LD_EXP 15
9900: PPUSH
9901: LD_STRING D2-Pow-1
9903: PPUSH
9904: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9908: LD_EXP 1
9912: PPUSH
9913: LD_STRING D2b-JMM-1
9915: PPUSH
9916: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9920: LD_EXP 15
9924: PPUSH
9925: LD_STRING D2a-Pow-2
9927: PPUSH
9928: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9932: LD_EXP 1
9936: PPUSH
9937: LD_STRING D2a-JMM-3
9939: PPUSH
9940: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9944: LD_EXP 15
9948: PPUSH
9949: LD_STRING D2a-Pow-3
9951: PPUSH
9952: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9956: LD_EXP 1
9960: PPUSH
9961: LD_STRING D2c-JMM-1
9963: PPUSH
9964: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9968: LD_EXP 15
9972: PPUSH
9973: LD_STRING D2c-Pow-1
9975: PPUSH
9976: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9980: LD_EXP 1
9984: PPUSH
9985: LD_STRING D2c-JMM-2
9987: PPUSH
9988: CALL_OW 88
// DialogueOff ;
9992: CALL_OW 7
// secondPass := 2 ;
9996: LD_ADDR_EXP 20
10000: PUSH
10001: LD_INT 2
10003: ST_TO_ADDR
// end ;
10004: PPOPN 3
10006: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10007: LD_EXP 21
10011: PUSH
10012: LD_INT 1
10014: EQUAL
10015: PUSH
10016: LD_INT 11
10018: PPUSH
10019: LD_INT 22
10021: PUSH
10022: LD_INT 3
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PPUSH
10029: CALL_OW 70
10033: AND
10034: IFFALSE 10515
10036: GO 10038
10038: DISABLE
10039: LD_INT 0
10041: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10042: LD_ADDR_VAR 0 1
10046: PUSH
10047: LD_INT 11
10049: PPUSH
10050: LD_INT 22
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 70
10064: ST_TO_ADDR
// if not vehicles then
10065: LD_VAR 0 1
10069: NOT
10070: IFFALSE 10074
// exit ;
10072: GO 10515
// repeat wait ( 0 0$1 ) ;
10074: LD_INT 35
10076: PPUSH
10077: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10081: LD_VAR 0 1
10085: PPUSH
10086: LD_INT 101
10088: PUSH
10089: LD_INT 1
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PPUSH
10096: CALL_OW 72
10100: IFFALSE 10074
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10102: LD_VAR 0 1
10106: PPUSH
10107: LD_INT 101
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PPUSH
10117: CALL_OW 72
10121: PUSH
10122: LD_INT 1
10124: ARRAY
10125: PPUSH
10126: CALL_OW 87
// DialogueOn ;
10130: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10134: LD_INT 22
10136: PUSH
10137: LD_INT 1
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 26
10146: PUSH
10147: LD_INT 1
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PUSH
10154: LD_INT 23
10156: PUSH
10157: LD_INT 1
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: LD_INT 25
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 25
10179: PUSH
10180: LD_INT 2
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 25
10189: PUSH
10190: LD_INT 3
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: LD_INT 25
10199: PUSH
10200: LD_INT 4
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 25
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 25
10219: PUSH
10220: LD_INT 8
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: PPUSH
10242: CALL_OW 69
10246: PPUSH
10247: LD_STRING DT1-Sol1-1
10249: PPUSH
10250: LD_STRING DT1-FSol1-1
10252: PPUSH
10253: CALL 12260 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10257: LD_EXP 1
10261: PPUSH
10262: LD_STRING DT1-JMM-1
10264: PPUSH
10265: CALL_OW 88
// DialogueOff ;
10269: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10273: LD_INT 175
10275: PPUSH
10276: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10280: LD_INT 11
10282: PPUSH
10283: LD_INT 22
10285: PUSH
10286: LD_INT 3
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 50
10295: PUSH
10296: EMPTY
10297: LIST
10298: PUSH
10299: LD_INT 2
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 2
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 21
10314: PUSH
10315: LD_INT 1
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: LIST
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: PPUSH
10332: CALL_OW 70
10336: PUSH
10337: LD_INT 0
10339: EQUAL
10340: PUSH
10341: LD_EXP 22
10345: PUSH
10346: LD_INT 2
10348: GREATER
10349: AND
10350: IFFALSE 10273
// DialogueOn ;
10352: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10356: LD_EXP 1
10360: PPUSH
10361: LD_STRING DT1a-JMM-1
10363: PPUSH
10364: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10368: LD_INT 22
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 26
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 23
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 2
10400: PUSH
10401: LD_INT 25
10403: PUSH
10404: LD_INT 1
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 25
10413: PUSH
10414: LD_INT 2
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 25
10423: PUSH
10424: LD_INT 3
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 25
10433: PUSH
10434: LD_INT 4
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 25
10443: PUSH
10444: LD_INT 5
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 25
10453: PUSH
10454: LD_INT 8
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: PPUSH
10476: CALL_OW 69
10480: PPUSH
10481: LD_STRING DT1a-Sol1-1
10483: PPUSH
10484: LD_STRING DT1a-FSol1-1
10486: PPUSH
10487: CALL 12260 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10491: LD_EXP 1
10495: PPUSH
10496: LD_STRING DT1a-JMM-2
10498: PPUSH
10499: CALL_OW 88
// DialogueOff ;
10503: CALL_OW 7
// vehicleTeleported := 2 ;
10507: LD_ADDR_EXP 21
10511: PUSH
10512: LD_INT 2
10514: ST_TO_ADDR
// end ;
10515: PPOPN 1
10517: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10518: LD_EXP 21
10522: PUSH
10523: LD_INT 3
10525: EQUAL
10526: PUSH
10527: LD_INT 11
10529: PPUSH
10530: LD_INT 22
10532: PUSH
10533: LD_INT 3
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 101
10542: PUSH
10543: LD_INT 1
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PPUSH
10554: CALL_OW 70
10558: AND
10559: IFFALSE 10844
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
10567: PPUSH
10568: PPUSH
// begin wait ( 0 0$0.3 ) ;
10569: LD_INT 10
10571: PPUSH
10572: CALL_OW 67
// DialogueOn ;
10576: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10580: LD_ADDR_VAR 0 3
10584: PUSH
10585: LD_INT 22
10587: PUSH
10588: LD_INT 1
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 23
10597: PUSH
10598: LD_INT 1
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 26
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 2
10617: PUSH
10618: LD_INT 25
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 25
10630: PUSH
10631: LD_INT 2
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 25
10640: PUSH
10641: LD_INT 3
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 25
10650: PUSH
10651: LD_INT 4
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 25
10660: PUSH
10661: LD_INT 5
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 25
10670: PUSH
10671: LD_INT 8
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: PPUSH
10693: CALL_OW 69
10697: PPUSH
10698: LD_STRING DT2-Sol1-1
10700: PPUSH
10701: LD_STRING DT2-FSol1-1
10703: PPUSH
10704: CALL 12260 0 3
10708: ST_TO_ADDR
// DialogueOff ;
10709: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10713: LD_INT 175
10715: PPUSH
10716: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10720: LD_INT 11
10722: PPUSH
10723: LD_INT 22
10725: PUSH
10726: LD_INT 3
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 50
10735: PUSH
10736: EMPTY
10737: LIST
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PPUSH
10743: CALL_OW 70
10747: NOT
10748: IFFALSE 10713
// wait ( 0 0$2 ) ;
10750: LD_INT 70
10752: PPUSH
10753: CALL_OW 67
// vehicleTeleported := 4 ;
10757: LD_ADDR_EXP 21
10761: PUSH
10762: LD_INT 4
10764: ST_TO_ADDR
// DialogueOn ;
10765: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10769: LD_EXP 1
10773: PPUSH
10774: LD_STRING DT2a-JMM-1
10776: PPUSH
10777: CALL_OW 88
// if speaker then
10781: LD_VAR 0 3
10785: IFFALSE 10828
// if GetSex ( speaker ) = 1 then
10787: LD_VAR 0 3
10791: PPUSH
10792: CALL_OW 258
10796: PUSH
10797: LD_INT 1
10799: EQUAL
10800: IFFALSE 10816
// Say ( speaker , DT2a-Sol1-1 ) else
10802: LD_VAR 0 3
10806: PPUSH
10807: LD_STRING DT2a-Sol1-1
10809: PPUSH
10810: CALL_OW 88
10814: GO 10828
// Say ( speaker , DT2a-FSol1-1 ) ;
10816: LD_VAR 0 3
10820: PPUSH
10821: LD_STRING DT2a-FSol1-1
10823: PPUSH
10824: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10828: LD_EXP 3
10832: PPUSH
10833: LD_STRING DT2a-Don-1
10835: PPUSH
10836: CALL_OW 88
// DialogueOff ;
10840: CALL_OW 7
// end ;
10844: PPOPN 3
10846: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10847: LD_INT 1
10849: PPUSH
10850: LD_INT 45
10852: PPUSH
10853: LD_INT 74
10855: PPUSH
10856: CALL_OW 293
10860: IFFALSE 11035
10862: GO 10864
10864: DISABLE
// begin DialogueOn ;
10865: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10869: LD_INT 36
10871: PPUSH
10872: LD_INT 55
10874: PPUSH
10875: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10879: LD_INT 22
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 23
10891: PUSH
10892: LD_INT 1
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 26
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 2
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 1
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 25
10924: PUSH
10925: LD_INT 2
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 25
10934: PUSH
10935: LD_INT 3
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 25
10944: PUSH
10945: LD_INT 4
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 25
10954: PUSH
10955: LD_INT 5
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 25
10964: PUSH
10965: LD_INT 8
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: PPUSH
10987: CALL_OW 69
10991: PPUSH
10992: LD_STRING D5-Sol1-1
10994: PPUSH
10995: LD_STRING D5-FSol1-
10997: PPUSH
10998: CALL 12260 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11002: LD_EXP 23
11006: PUSH
11007: LD_EXP 3
11011: PPUSH
11012: CALL_OW 302
11016: AND
11017: IFFALSE 11031
// Say ( Donaldson , D5-Don-1 ) ;
11019: LD_EXP 3
11023: PPUSH
11024: LD_STRING D5-Don-1
11026: PPUSH
11027: CALL_OW 88
// DialogueOff ;
11031: CALL_OW 7
// end ;
11035: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11036: LD_INT 1
11038: PPUSH
11039: LD_INT 10
11041: PPUSH
11042: CALL_OW 292
11046: PUSH
11047: LD_INT 1
11049: PPUSH
11050: LD_INT 137
11052: PPUSH
11053: CALL_OW 292
11057: OR
11058: IFFALSE 11213
11060: GO 11062
11062: DISABLE
// begin DialogueOn ;
11063: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11067: LD_INT 22
11069: PUSH
11070: LD_INT 1
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 23
11079: PUSH
11080: LD_INT 1
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 26
11089: PUSH
11090: LD_INT 1
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 2
11099: PUSH
11100: LD_INT 25
11102: PUSH
11103: LD_INT 1
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 25
11112: PUSH
11113: LD_INT 2
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: LD_INT 25
11122: PUSH
11123: LD_INT 3
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 25
11132: PUSH
11133: LD_INT 4
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 25
11142: PUSH
11143: LD_INT 5
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 25
11152: PUSH
11153: LD_INT 8
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 69
11179: PPUSH
11180: LD_STRING DT3-Sol1-1
11182: PPUSH
11183: LD_STRING DT3-FSol1-1
11185: PPUSH
11186: CALL 12260 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11190: LD_EXP 1
11194: PPUSH
11195: LD_STRING DT3-JMM-1
11197: PPUSH
11198: CALL_OW 88
// DialogueOff ;
11202: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11206: LD_STRING M2
11208: PPUSH
11209: CALL_OW 337
// end ;
11213: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11214: LD_EXP 35
11218: PUSH
11219: LD_INT 0
11221: EQUAL
11222: PUSH
11223: LD_INT 10
11225: PPUSH
11226: LD_INT 22
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PPUSH
11236: CALL_OW 70
11240: PUSH
11241: LD_INT 10
11243: PPUSH
11244: LD_INT 22
11246: PUSH
11247: LD_INT 3
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: LD_INT 24
11259: PUSH
11260: LD_INT 800
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 21
11273: PUSH
11274: LD_INT 2
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 58
11283: PUSH
11284: EMPTY
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 70
11297: OR
11298: AND
11299: IFFALSE 11312
11301: GO 11303
11303: DISABLE
// ruEscape := 1 ;
11304: LD_ADDR_EXP 35
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
11312: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11313: LD_INT 3
11315: PPUSH
11316: CALL_OW 303
11320: PUSH
11321: LD_INT 4
11323: PPUSH
11324: CALL_OW 303
11328: OR
11329: PUSH
11330: LD_EXP 35
11334: PUSH
11335: LD_INT 1
11337: EQUAL
11338: OR
11339: IFFALSE 11928
11341: GO 11343
11343: DISABLE
11344: LD_INT 0
11346: PPUSH
11347: PPUSH
11348: PPUSH
// begin ruAI := 0 ;
11349: LD_ADDR_EXP 34
11353: PUSH
11354: LD_INT 0
11356: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11357: LD_EXP 27
11361: PPUSH
11362: CALL_OW 122
// wait ( 0 0$1 ) ;
11366: LD_INT 35
11368: PPUSH
11369: CALL_OW 67
// DialogueOn ;
11373: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11377: LD_INT 75
11379: PPUSH
11380: LD_INT 21
11382: PPUSH
11383: LD_INT 1
11385: PPUSH
11386: LD_INT 12
11388: PPUSH
11389: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11393: LD_INT 75
11395: PPUSH
11396: LD_INT 21
11398: PPUSH
11399: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11403: LD_INT 10
11405: PPUSH
11406: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11410: LD_EXP 1
11414: PPUSH
11415: LD_STRING D6-JMM-1
11417: PPUSH
11418: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11422: LD_INT 75
11424: PPUSH
11425: LD_INT 21
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 331
// DialogueOff ;
11435: CALL_OW 7
// for i in RuScientists do
11439: LD_ADDR_VAR 0 1
11443: PUSH
11444: LD_EXP 27
11448: PUSH
11449: FOR_IN
11450: IFFALSE 11486
// begin SetSide ( i , 6 ) ;
11452: LD_VAR 0 1
11456: PPUSH
11457: LD_INT 6
11459: PPUSH
11460: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11464: LD_VAR 0 1
11468: PPUSH
11469: LD_INT 1
11471: PPUSH
11472: LD_INT 3
11474: PPUSH
11475: CALL_OW 12
11479: PPUSH
11480: CALL_OW 109
// end ;
11484: GO 11449
11486: POP
11487: POP
// repeat wait ( 0 0$1 ) ;
11488: LD_INT 35
11490: PPUSH
11491: CALL_OW 67
// for i in RuScientists do
11495: LD_ADDR_VAR 0 1
11499: PUSH
11500: LD_EXP 27
11504: PUSH
11505: FOR_IN
11506: IFFALSE 11919
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11508: LD_ADDR_VAR 0 3
11512: PUSH
11513: LD_INT 22
11515: PUSH
11516: LD_INT 3
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 91
11525: PUSH
11526: LD_VAR 0 1
11530: PUSH
11531: LD_INT 10
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 21
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 58
11551: PUSH
11552: EMPTY
11553: LIST
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PPUSH
11561: CALL_OW 69
11565: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11566: LD_VAR 0 3
11570: PUSH
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 310
11580: NOT
11581: AND
11582: IFFALSE 11610
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11584: LD_VAR 0 1
11588: PPUSH
11589: LD_VAR 0 3
11593: PPUSH
11594: LD_VAR 0 1
11598: PPUSH
11599: CALL_OW 74
11603: PPUSH
11604: CALL_OW 120
// continue ;
11608: GO 11505
// end ; if IsInUnit ( i ) then
11610: LD_VAR 0 1
11614: PPUSH
11615: CALL_OW 310
11619: IFFALSE 11638
// unit := IsInUnit ( i ) else
11621: LD_ADDR_VAR 0 2
11625: PUSH
11626: LD_VAR 0 1
11630: PPUSH
11631: CALL_OW 310
11635: ST_TO_ADDR
11636: GO 11648
// unit := i ;
11638: LD_ADDR_VAR 0 2
11642: PUSH
11643: LD_VAR 0 1
11647: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11648: LD_VAR 0 1
11652: PPUSH
11653: CALL_OW 110
11657: PUSH
11658: LD_INT 1
11660: DOUBLE
11661: EQUAL
11662: IFTRUE 11666
11664: GO 11725
11666: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11667: LD_VAR 0 2
11671: PPUSH
11672: LD_INT 137
11674: PPUSH
11675: CALL_OW 296
11679: PUSH
11680: LD_INT 13
11682: LESS
11683: PUSH
11684: LD_INT 137
11686: PPUSH
11687: CALL_OW 302
11691: AND
11692: IFFALSE 11708
// ComEnterUnit ( unit , rutp ) else
11694: LD_VAR 0 2
11698: PPUSH
11699: LD_INT 137
11701: PPUSH
11702: CALL_OW 120
11706: GO 11723
// ComMoveXY ( unit , 16 , 28 ) ;
11708: LD_VAR 0 2
11712: PPUSH
11713: LD_INT 16
11715: PPUSH
11716: LD_INT 28
11718: PPUSH
11719: CALL_OW 111
// end ; 2 :
11723: GO 11917
11725: LD_INT 2
11727: DOUBLE
11728: EQUAL
11729: IFTRUE 11733
11731: GO 11751
11733: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11734: LD_VAR 0 2
11738: PPUSH
11739: LD_INT 97
11741: PPUSH
11742: LD_INT 2
11744: PPUSH
11745: CALL_OW 111
11749: GO 11917
11751: LD_INT 3
11753: DOUBLE
11754: EQUAL
11755: IFTRUE 11759
11757: GO 11818
11759: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11760: LD_VAR 0 2
11764: PPUSH
11765: LD_INT 137
11767: PPUSH
11768: CALL_OW 296
11772: PUSH
11773: LD_INT 13
11775: LESS
11776: PUSH
11777: LD_INT 137
11779: PPUSH
11780: CALL_OW 302
11784: AND
11785: IFFALSE 11801
// ComEnterUnit ( unit , rutp ) else
11787: LD_VAR 0 2
11791: PPUSH
11792: LD_INT 137
11794: PPUSH
11795: CALL_OW 120
11799: GO 11816
// ComMoveXY ( unit , 128 , 155 ) ;
11801: LD_VAR 0 2
11805: PPUSH
11806: LD_INT 128
11808: PPUSH
11809: LD_INT 155
11811: PPUSH
11812: CALL_OW 111
// end ; 11 :
11816: GO 11917
11818: LD_INT 11
11820: DOUBLE
11821: EQUAL
11822: IFTRUE 11826
11824: GO 11844
11826: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11827: LD_VAR 0 2
11831: PPUSH
11832: LD_INT 16
11834: PPUSH
11835: LD_INT 28
11837: PPUSH
11838: CALL_OW 111
11842: GO 11917
11844: LD_INT 13
11846: DOUBLE
11847: EQUAL
11848: IFTRUE 11852
11850: GO 11890
11852: POP
// begin if IsOk ( ruteleprt ) then
11853: LD_INT 10
11855: PPUSH
11856: CALL_OW 302
11860: IFFALSE 11876
// ComEnterUnit ( unit , ruteleprt ) else
11862: LD_VAR 0 2
11866: PPUSH
11867: LD_INT 10
11869: PPUSH
11870: CALL_OW 120
11874: GO 11888
// SetTag ( unit , 23 ) ;
11876: LD_VAR 0 2
11880: PPUSH
11881: LD_INT 23
11883: PPUSH
11884: CALL_OW 109
// end ; 23 :
11888: GO 11917
11890: LD_INT 23
11892: DOUBLE
11893: EQUAL
11894: IFTRUE 11898
11896: GO 11916
11898: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11899: LD_VAR 0 2
11903: PPUSH
11904: LD_INT 128
11906: PPUSH
11907: LD_INT 155
11909: PPUSH
11910: CALL_OW 111
11914: GO 11917
11916: POP
// end ;
11917: GO 11505
11919: POP
11920: POP
// until not RuScientists ;
11921: LD_EXP 27
11925: NOT
11926: IFFALSE 11488
// end ;
11928: PPOPN 3
11930: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11931: LD_EXP 34
11935: PUSH
11936: LD_INT 0
11938: EQUAL
11939: PUSH
11940: LD_EXP 27
11944: AND
11945: PUSH
11946: LD_INT 22
11948: PUSH
11949: LD_INT 6
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: LD_INT 95
11961: PUSH
11962: LD_INT 13
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 95
11971: PUSH
11972: LD_INT 14
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 95
11981: PUSH
11982: LD_INT 25
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 69
12003: AND
12004: IFFALSE 12217
12006: GO 12008
12008: DISABLE
12009: LD_INT 0
12011: PPUSH
12012: PPUSH
12013: PPUSH
12014: PPUSH
// begin enable ;
12015: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
12016: LD_ADDR_VAR 0 1
12020: PUSH
12021: LD_INT 22
12023: PUSH
12024: LD_INT 6
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 2
12033: PUSH
12034: LD_INT 95
12036: PUSH
12037: LD_INT 13
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 95
12046: PUSH
12047: LD_INT 14
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: LD_INT 95
12056: PUSH
12057: LD_INT 25
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PPUSH
12074: CALL_OW 69
12078: PUSH
12079: FOR_IN
12080: IFFALSE 12215
// begin if i in RuScientists then
12082: LD_VAR 0 1
12086: PUSH
12087: LD_EXP 27
12091: IN
12092: IFFALSE 12121
// begin RuScientists = RuScientists diff i ;
12094: LD_ADDR_EXP 27
12098: PUSH
12099: LD_EXP 27
12103: PUSH
12104: LD_VAR 0 1
12108: DIFF
12109: ST_TO_ADDR
// RemoveUnit ( i ) ;
12110: LD_VAR 0 1
12114: PPUSH
12115: CALL_OW 64
// continue ;
12119: GO 12079
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12121: LD_VAR 0 1
12125: PUSH
12126: LD_INT 22
12128: PUSH
12129: LD_INT 6
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 33
12138: PUSH
12139: LD_INT 1
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PPUSH
12150: CALL_OW 69
12154: IN
12155: IFFALSE 12213
// begin if IsDrivenBy ( i ) in RuScientists then
12157: LD_VAR 0 1
12161: PPUSH
12162: CALL_OW 311
12166: PUSH
12167: LD_EXP 27
12171: IN
12172: IFFALSE 12190
// RuScientists = RuScientists diff i ;
12174: LD_ADDR_EXP 27
12178: PUSH
12179: LD_EXP 27
12183: PUSH
12184: LD_VAR 0 1
12188: DIFF
12189: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12190: LD_VAR 0 1
12194: PPUSH
12195: CALL_OW 311
12199: PPUSH
12200: CALL_OW 64
// RemoveUnit ( i ) ;
12204: LD_VAR 0 1
12208: PPUSH
12209: CALL_OW 64
// end ; end ;
12213: GO 12079
12215: POP
12216: POP
// end ; end_of_file
12217: PPOPN 4
12219: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12220: LD_INT 0
12222: PPUSH
12223: PPUSH
// for i in charactersList do
12224: LD_ADDR_VAR 0 4
12228: PUSH
12229: LD_VAR 0 1
12233: PUSH
12234: FOR_IN
12235: IFFALSE 12253
// SaveCharacters ( i , ident ) ;
12237: LD_VAR 0 4
12241: PPUSH
12242: LD_VAR 0 2
12246: PPUSH
12247: CALL_OW 38
12251: GO 12234
12253: POP
12254: POP
// end ;
12255: LD_VAR 0 3
12259: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12260: LD_INT 0
12262: PPUSH
12263: PPUSH
12264: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12265: LD_ADDR_VAR 0 1
12269: PUSH
12270: LD_VAR 0 1
12274: PUSH
12275: LD_EXP 1
12279: PUSH
12280: LD_EXP 7
12284: PUSH
12285: LD_EXP 3
12289: PUSH
12290: LD_EXP 4
12294: PUSH
12295: LD_EXP 5
12299: PUSH
12300: LD_EXP 2
12304: PUSH
12305: LD_EXP 12
12309: PUSH
12310: LD_EXP 13
12314: PUSH
12315: LD_EXP 9
12319: PUSH
12320: LD_EXP 11
12324: PUSH
12325: LD_EXP 6
12329: PUSH
12330: LD_EXP 8
12334: PUSH
12335: LD_EXP 10
12339: PUSH
12340: LD_EXP 15
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: DIFF
12361: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12362: LD_ADDR_VAR 0 6
12366: PUSH
12367: LD_VAR 0 1
12371: PUSH
12372: LD_INT 1
12374: PPUSH
12375: LD_VAR 0 1
12379: PPUSH
12380: CALL_OW 12
12384: ARRAY
12385: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12386: LD_VAR 0 6
12390: PPUSH
12391: CALL_OW 258
12395: PUSH
12396: LD_INT 1
12398: EQUAL
12399: IFFALSE 12417
// Say ( speaker , dialogMID ) else
12401: LD_VAR 0 6
12405: PPUSH
12406: LD_VAR 0 2
12410: PPUSH
12411: CALL_OW 88
12415: GO 12431
// Say ( speaker , dialogFID ) ;
12417: LD_VAR 0 6
12421: PPUSH
12422: LD_VAR 0 3
12426: PPUSH
12427: CALL_OW 88
// result := speaker ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: LD_VAR 0 6
12440: ST_TO_ADDR
// end ;
12441: LD_VAR 0 4
12445: RET
// export function PrepareDifficulty ; var tmp ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// if Difficulty = 1 then
12450: LD_OWVAR 67
12454: PUSH
12455: LD_INT 1
12457: EQUAL
12458: IFFALSE 12478
// begin RuSolMinLevel = 8 ;
12460: LD_ADDR_EXP 29
12464: PUSH
12465: LD_INT 8
12467: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12468: LD_ADDR_EXP 30
12472: PUSH
12473: LD_INT 10
12475: ST_TO_ADDR
// end else
12476: GO 12718
// if Difficulty = 2 then
12478: LD_OWVAR 67
12482: PUSH
12483: LD_INT 2
12485: EQUAL
12486: IFFALSE 12582
// begin RuSolMinLevel = 9 ;
12488: LD_ADDR_EXP 29
12492: PUSH
12493: LD_INT 9
12495: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12496: LD_ADDR_EXP 30
12500: PUSH
12501: LD_INT 10
12503: ST_TO_ADDR
// uc_nation = 3 ;
12504: LD_ADDR_OWVAR 21
12508: PUSH
12509: LD_INT 3
12511: ST_TO_ADDR
// uc_side = 3 ;
12512: LD_ADDR_OWVAR 20
12516: PUSH
12517: LD_INT 3
12519: ST_TO_ADDR
// bc_level = 10 ;
12520: LD_ADDR_OWVAR 43
12524: PUSH
12525: LD_INT 10
12527: ST_TO_ADDR
// bc_type = b_turret ;
12528: LD_ADDR_OWVAR 42
12532: PUSH
12533: LD_INT 33
12535: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12536: LD_ADDR_VAR 0 2
12540: PUSH
12541: LD_INT 86
12543: PPUSH
12544: LD_INT 34
12546: PPUSH
12547: LD_INT 2
12549: PPUSH
12550: CALL_OW 47
12554: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12555: LD_VAR 0 2
12559: PPUSH
12560: LD_INT 49
12562: PPUSH
12563: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12567: LD_INT 64
12569: PPUSH
12570: LD_INT 3
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: CALL_OW 322
// end else
12580: GO 12718
// begin RuSolMinLevel = 10 ;
12582: LD_ADDR_EXP 29
12586: PUSH
12587: LD_INT 10
12589: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12590: LD_ADDR_EXP 30
12594: PUSH
12595: LD_INT 10
12597: ST_TO_ADDR
// uc_nation = 3 ;
12598: LD_ADDR_OWVAR 21
12602: PUSH
12603: LD_INT 3
12605: ST_TO_ADDR
// uc_side = 3 ;
12606: LD_ADDR_OWVAR 20
12610: PUSH
12611: LD_INT 3
12613: ST_TO_ADDR
// bc_level = 10 ;
12614: LD_ADDR_OWVAR 43
12618: PUSH
12619: LD_INT 10
12621: ST_TO_ADDR
// bc_type = b_turret ;
12622: LD_ADDR_OWVAR 42
12626: PUSH
12627: LD_INT 33
12629: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12630: LD_ADDR_VAR 0 2
12634: PUSH
12635: LD_INT 86
12637: PPUSH
12638: LD_INT 34
12640: PPUSH
12641: LD_INT 2
12643: PPUSH
12644: CALL_OW 47
12648: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12649: LD_VAR 0 2
12653: PPUSH
12654: LD_INT 49
12656: PPUSH
12657: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12661: LD_ADDR_VAR 0 2
12665: PUSH
12666: LD_INT 93
12668: PPUSH
12669: LD_INT 31
12671: PPUSH
12672: LD_INT 2
12674: PPUSH
12675: CALL_OW 47
12679: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12680: LD_VAR 0 2
12684: PPUSH
12685: LD_INT 49
12687: PPUSH
12688: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12692: LD_INT 64
12694: PPUSH
12695: LD_INT 3
12697: PPUSH
12698: LD_INT 1
12700: PPUSH
12701: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12705: LD_INT 65
12707: PPUSH
12708: LD_INT 3
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: CALL_OW 322
// end ; end ;
12718: LD_VAR 0 1
12722: RET
// export function ShowQuery1 ; begin
12723: LD_INT 0
12725: PPUSH
// result := Query ( Q1 ) ;
12726: LD_ADDR_VAR 0 1
12730: PUSH
12731: LD_STRING Q1
12733: PPUSH
12734: CALL_OW 97
12738: ST_TO_ADDR
// end ;
12739: LD_VAR 0 1
12743: RET
// export function ShowQuery2 ; begin
12744: LD_INT 0
12746: PPUSH
// result := Query ( Q1a ) ;
12747: LD_ADDR_VAR 0 1
12751: PUSH
12752: LD_STRING Q1a
12754: PPUSH
12755: CALL_OW 97
12759: ST_TO_ADDR
// end ;
12760: LD_VAR 0 1
12764: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12765: LD_INT 0
12767: PPUSH
12768: PPUSH
12769: PPUSH
12770: PPUSH
// for i = 1 to count do
12771: LD_ADDR_VAR 0 8
12775: PUSH
12776: DOUBLE
12777: LD_INT 1
12779: DEC
12780: ST_TO_ADDR
12781: LD_VAR 0 6
12785: PUSH
12786: FOR_TO
12787: IFFALSE 12868
// begin uc_side = side ;
12789: LD_ADDR_OWVAR 20
12793: PUSH
12794: LD_VAR 0 1
12798: ST_TO_ADDR
// uc_nation = nation ;
12799: LD_ADDR_OWVAR 21
12803: PUSH
12804: LD_VAR 0 2
12808: ST_TO_ADDR
// hc_gallery =  ;
12809: LD_ADDR_OWVAR 33
12813: PUSH
12814: LD_STRING 
12816: ST_TO_ADDR
// hc_name =  ;
12817: LD_ADDR_OWVAR 26
12821: PUSH
12822: LD_STRING 
12824: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12825: LD_INT 0
12827: PPUSH
12828: LD_VAR 0 5
12832: PPUSH
12833: LD_VAR 0 4
12837: PPUSH
12838: CALL_OW 380
// un = CreateHuman ;
12842: LD_ADDR_VAR 0 10
12846: PUSH
12847: CALL_OW 44
12851: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12852: LD_VAR 0 10
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: CALL_OW 52
// end ;
12866: GO 12786
12868: POP
12869: POP
// end ;
12870: LD_VAR 0 7
12874: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12875: LD_INT 0
12877: PPUSH
12878: PPUSH
12879: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12880: LD_ADDR_VAR 0 6
12884: PUSH
12885: LD_INT 48
12887: PUSH
12888: LD_INT 49
12890: PUSH
12891: LD_INT 50
12893: PUSH
12894: LD_INT 20
12896: PUSH
12897: LD_INT 1
12899: PUSH
12900: LD_INT 51
12902: PUSH
12903: LD_INT 52
12905: PUSH
12906: LD_INT 69
12908: PUSH
12909: LD_INT 39
12911: PUSH
12912: LD_INT 34
12914: PUSH
12915: LD_INT 40
12917: PUSH
12918: LD_INT 53
12920: PUSH
12921: LD_INT 71
12923: PUSH
12924: LD_INT 57
12926: PUSH
12927: LD_INT 58
12929: PUSH
12930: LD_INT 44
12932: PUSH
12933: LD_INT 32
12935: PUSH
12936: LD_INT 27
12938: PUSH
12939: LD_INT 23
12941: PUSH
12942: LD_INT 33
12944: PUSH
12945: LD_INT 59
12947: PUSH
12948: LD_INT 54
12950: PUSH
12951: LD_INT 55
12953: PUSH
12954: LD_INT 56
12956: PUSH
12957: LD_INT 63
12959: PUSH
12960: LD_INT 64
12962: PUSH
12963: LD_INT 65
12965: PUSH
12966: LD_INT 30
12968: PUSH
12969: LD_INT 31
12971: PUSH
12972: LD_INT 21
12974: PUSH
12975: LD_INT 22
12977: PUSH
12978: LD_INT 25
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: ST_TO_ADDR
// for i := 1 to list do
13015: LD_ADDR_VAR 0 5
13019: PUSH
13020: DOUBLE
13021: LD_INT 1
13023: DEC
13024: ST_TO_ADDR
13025: LD_VAR 0 6
13029: PUSH
13030: FOR_TO
13031: IFFALSE 13103
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
13033: LD_VAR 0 6
13037: PUSH
13038: LD_VAR 0 5
13042: ARRAY
13043: PPUSH
13044: LD_VAR 0 1
13048: PPUSH
13049: CALL_OW 321
13053: PUSH
13054: LD_INT 1
13056: EQUAL
13057: PUSH
13058: LD_VAR 0 6
13062: PUSH
13063: LD_VAR 0 5
13067: ARRAY
13068: PPUSH
13069: LD_VAR 0 3
13073: PPUSH
13074: CALL_OW 482
13078: AND
13079: IFFALSE 13101
// AddComResearch ( lab , list [ i ] ) ;
13081: LD_VAR 0 2
13085: PPUSH
13086: LD_VAR 0 6
13090: PUSH
13091: LD_VAR 0 5
13095: ARRAY
13096: PPUSH
13097: CALL_OW 184
13101: GO 13030
13103: POP
13104: POP
// end ;
13105: LD_VAR 0 4
13109: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13110: LD_INT 0
13112: PPUSH
13113: PPUSH
13114: PPUSH
13115: PPUSH
13116: PPUSH
13117: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13118: LD_ADDR_VAR 0 8
13122: PUSH
13123: LD_VAR 0 2
13127: PPUSH
13128: CALL_OW 313
13132: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13133: LD_ADDR_VAR 0 9
13137: PUSH
13138: LD_VAR 0 3
13142: PPUSH
13143: LD_INT 22
13145: PUSH
13146: LD_VAR 0 1
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 25
13157: PUSH
13158: LD_INT 2
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 24
13167: PUSH
13168: LD_INT 750
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 3
13177: PUSH
13178: LD_INT 54
13180: PUSH
13181: EMPTY
13182: LIST
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 70
13198: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13199: LD_ADDR_VAR 0 6
13203: PUSH
13204: LD_VAR 0 3
13208: PPUSH
13209: LD_INT 22
13211: PUSH
13212: LD_VAR 0 1
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 3
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 3
13233: PUSH
13234: LD_INT 24
13236: PUSH
13237: LD_INT 1000
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: LIST
13252: PUSH
13253: EMPTY
13254: LIST
13255: PPUSH
13256: CALL_OW 70
13260: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13261: LD_VAR 0 6
13265: NOT
13266: PUSH
13267: LD_INT 22
13269: PUSH
13270: LD_VAR 0 1
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 25
13281: PUSH
13282: LD_INT 2
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 24
13291: PUSH
13292: LD_INT 250
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 69
13308: NOT
13309: AND
13310: IFFALSE 13314
// exit ;
13312: GO 13472
// if buildingsList and engineerOkInside then
13314: LD_VAR 0 6
13318: PUSH
13319: LD_VAR 0 8
13323: AND
13324: IFFALSE 13335
// ComExitBuilding ( engineerOkInside ) ;
13326: LD_VAR 0 8
13330: PPUSH
13331: CALL_OW 122
// if buildingsList and engineerOkOutside then
13335: LD_VAR 0 6
13339: PUSH
13340: LD_VAR 0 9
13344: AND
13345: IFFALSE 13365
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13347: LD_VAR 0 9
13351: PPUSH
13352: LD_VAR 0 6
13356: PUSH
13357: LD_INT 1
13359: ARRAY
13360: PPUSH
13361: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13365: LD_VAR 0 6
13369: PUSH
13370: LD_INT 0
13372: EQUAL
13373: PUSH
13374: LD_VAR 0 4
13378: PUSH
13379: LD_INT 0
13381: EQUAL
13382: AND
13383: PUSH
13384: LD_VAR 0 9
13388: AND
13389: IFFALSE 13405
// ComEnterUnit ( engineerOkOutside , depot ) ;
13391: LD_VAR 0 9
13395: PPUSH
13396: LD_VAR 0 2
13400: PPUSH
13401: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13405: LD_VAR 0 9
13409: PUSH
13410: LD_VAR 0 6
13414: PUSH
13415: LD_INT 0
13417: EQUAL
13418: AND
13419: PUSH
13420: LD_VAR 0 4
13424: AND
13425: IFFALSE 13472
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13427: LD_VAR 0 9
13431: PPUSH
13432: LD_VAR 0 4
13436: PUSH
13437: LD_INT 1
13439: ARRAY
13440: PPUSH
13441: LD_VAR 0 4
13445: PUSH
13446: LD_INT 2
13448: ARRAY
13449: PPUSH
13450: LD_VAR 0 4
13454: PUSH
13455: LD_INT 3
13457: ARRAY
13458: PPUSH
13459: LD_VAR 0 4
13463: PUSH
13464: LD_INT 4
13466: ARRAY
13467: PPUSH
13468: CALL_OW 145
// end ;
13472: LD_VAR 0 5
13476: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13477: LD_INT 0
13479: PPUSH
13480: PPUSH
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
13485: PPUSH
13486: PPUSH
13487: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13488: LD_ADDR_VAR 0 6
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_VAR 0 1
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 25
13507: PUSH
13508: LD_INT 4
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: LD_INT 24
13517: PUSH
13518: LD_INT 251
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: PPUSH
13530: CALL_OW 69
13534: PUSH
13535: LD_EXP 27
13539: PUSH
13540: EMPTY
13541: LIST
13542: DIFF
13543: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13544: LD_ADDR_VAR 0 7
13548: PUSH
13549: LD_VAR 0 3
13553: PPUSH
13554: LD_INT 22
13556: PUSH
13557: LD_VAR 0 1
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: LD_INT 56
13568: PUSH
13569: EMPTY
13570: LIST
13571: PUSH
13572: LD_INT 25
13574: PUSH
13575: LD_INT 4
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 50
13584: PUSH
13585: EMPTY
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: PPUSH
13594: CALL_OW 70
13598: PUSH
13599: LD_EXP 27
13603: PUSH
13604: EMPTY
13605: LIST
13606: DIFF
13607: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13608: LD_ADDR_VAR 0 10
13612: PUSH
13613: LD_VAR 0 3
13617: PPUSH
13618: LD_INT 22
13620: PUSH
13621: LD_VAR 0 1
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 21
13632: PUSH
13633: LD_INT 1
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PUSH
13640: LD_INT 3
13642: PUSH
13643: LD_INT 24
13645: PUSH
13646: LD_INT 750
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: LIST
13661: PPUSH
13662: CALL_OW 70
13666: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13667: LD_ADDR_VAR 0 11
13671: PUSH
13672: LD_VAR 0 2
13676: PPUSH
13677: LD_INT 22
13679: PUSH
13680: LD_VAR 0 1
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 21
13691: PUSH
13692: LD_INT 1
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 3
13701: PUSH
13702: LD_INT 24
13704: PUSH
13705: LD_INT 1000
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: PPUSH
13721: CALL_OW 70
13725: ST_TO_ADDR
// if damageUnits and sciList then
13726: LD_VAR 0 10
13730: PUSH
13731: LD_VAR 0 6
13735: AND
13736: IFFALSE 13752
// ComMoveToArea ( damageUnits , healArea ) ;
13738: LD_VAR 0 10
13742: PPUSH
13743: LD_VAR 0 2
13747: PPUSH
13748: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13752: LD_VAR 0 11
13756: PUSH
13757: LD_VAR 0 6
13761: AND
13762: PUSH
13763: LD_VAR 0 7
13767: PUSH
13768: LD_INT 0
13770: EQUAL
13771: AND
13772: IFFALSE 13818
// for i in buildings do
13774: LD_ADDR_VAR 0 8
13778: PUSH
13779: LD_VAR 0 4
13783: PUSH
13784: FOR_IN
13785: IFFALSE 13816
// begin if UnitsInside ( i ) then
13787: LD_VAR 0 8
13791: PPUSH
13792: CALL_OW 313
13796: IFFALSE 13814
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13798: LD_VAR 0 8
13802: PPUSH
13803: CALL_OW 313
13807: PPUSH
13808: CALL_OW 122
// break ;
13812: GO 13816
// end ; end ;
13814: GO 13784
13816: POP
13817: POP
// if unitsToHeal and sciListOutside then
13818: LD_VAR 0 11
13822: PUSH
13823: LD_VAR 0 7
13827: AND
13828: IFFALSE 13848
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13830: LD_VAR 0 7
13834: PPUSH
13835: LD_VAR 0 11
13839: PUSH
13840: LD_INT 1
13842: ARRAY
13843: PPUSH
13844: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13848: LD_VAR 0 10
13852: PUSH
13853: LD_INT 0
13855: EQUAL
13856: PUSH
13857: LD_VAR 0 11
13861: PUSH
13862: LD_INT 0
13864: EQUAL
13865: AND
13866: PUSH
13867: LD_VAR 0 7
13871: AND
13872: IFFALSE 13940
// begin tmp := buildings ;
13874: LD_ADDR_VAR 0 12
13878: PUSH
13879: LD_VAR 0 4
13883: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13884: LD_ADDR_VAR 0 13
13888: PUSH
13889: LD_INT 1
13891: PPUSH
13892: LD_VAR 0 12
13896: PPUSH
13897: CALL_OW 12
13901: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13902: LD_VAR 0 7
13906: PPUSH
13907: LD_INT 3
13909: PUSH
13910: LD_INT 60
13912: PUSH
13913: EMPTY
13914: LIST
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PPUSH
13920: CALL_OW 72
13924: PPUSH
13925: LD_VAR 0 12
13929: PUSH
13930: LD_VAR 0 13
13934: ARRAY
13935: PPUSH
13936: CALL_OW 120
// end ; end ;
13940: LD_VAR 0 5
13944: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13945: LD_INT 0
13947: PPUSH
13948: PPUSH
13949: PPUSH
13950: PPUSH
13951: PPUSH
13952: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13953: LD_ADDR_VAR 0 7
13957: PUSH
13958: LD_VAR 0 2
13962: PPUSH
13963: LD_INT 22
13965: PUSH
13966: LD_VAR 0 1
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: PUSH
13975: LD_INT 21
13977: PUSH
13978: LD_INT 2
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 34
13987: PUSH
13988: LD_INT 52
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: PPUSH
14000: CALL_OW 70
14004: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14005: LD_ADDR_VAR 0 8
14009: PUSH
14010: LD_VAR 0 2
14014: PPUSH
14015: LD_INT 22
14017: PUSH
14018: LD_VAR 0 1
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: LD_INT 21
14029: PUSH
14030: LD_INT 3
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 3
14039: PUSH
14040: LD_INT 24
14042: PUSH
14043: LD_INT 1000
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: PUSH
14059: EMPTY
14060: LIST
14061: PPUSH
14062: CALL_OW 70
14066: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14067: LD_VAR 0 8
14071: PUSH
14072: LD_INT 0
14074: GREATER
14075: PUSH
14076: LD_VAR 0 7
14080: PPUSH
14081: LD_INT 24
14083: PUSH
14084: LD_INT 750
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PPUSH
14091: CALL_OW 72
14095: PUSH
14096: LD_INT 0
14098: GREATER
14099: AND
14100: IFFALSE 14120
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14102: LD_VAR 0 7
14106: PPUSH
14107: LD_VAR 0 8
14111: PUSH
14112: LD_INT 1
14114: ARRAY
14115: PPUSH
14116: CALL_OW 130
// end ;
14120: LD_VAR 0 3
14124: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14125: LD_INT 0
14127: PPUSH
14128: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14129: LD_INT 22
14131: PUSH
14132: LD_VAR 0 1
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 21
14143: PUSH
14144: LD_INT 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PPUSH
14155: CALL_OW 69
14159: PUSH
14160: LD_INT 18
14162: PPUSH
14163: LD_INT 22
14165: PUSH
14166: LD_VAR 0 1
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 21
14177: PUSH
14178: LD_INT 2
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PPUSH
14189: CALL_OW 70
14193: PUSH
14194: LD_VAR 0 3
14198: LESSEQUAL
14199: DIFF
14200: IFFALSE 14267
// for i := 1 to vehCount do
14202: LD_ADDR_VAR 0 9
14206: PUSH
14207: DOUBLE
14208: LD_INT 1
14210: DEC
14211: ST_TO_ADDR
14212: LD_VAR 0 3
14216: PUSH
14217: FOR_TO
14218: IFFALSE 14265
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14220: LD_VAR 0 2
14224: PPUSH
14225: LD_VAR 0 7
14229: PPUSH
14230: LD_VAR 0 5
14234: PPUSH
14235: LD_VAR 0 6
14239: PPUSH
14240: LD_VAR 0 4
14244: PUSH
14245: LD_INT 1
14247: PPUSH
14248: LD_VAR 0 4
14252: PPUSH
14253: CALL_OW 12
14257: ARRAY
14258: PPUSH
14259: CALL_OW 185
14263: GO 14217
14265: POP
14266: POP
// end ;
14267: LD_VAR 0 8
14271: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14272: LD_INT 0
14274: PPUSH
14275: PPUSH
14276: PPUSH
14277: PPUSH
14278: PPUSH
14279: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14280: LD_ADDR_VAR 0 6
14284: PUSH
14285: LD_INT 22
14287: PUSH
14288: LD_VAR 0 1
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 25
14299: PUSH
14300: LD_INT 9
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PPUSH
14311: CALL_OW 69
14315: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14316: LD_ADDR_VAR 0 7
14320: PUSH
14321: LD_INT 81
14323: PUSH
14324: LD_VAR 0 1
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 3
14335: PUSH
14336: LD_INT 21
14338: PUSH
14339: LD_INT 3
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PPUSH
14354: CALL_OW 69
14358: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14359: LD_ADDR_VAR 0 4
14363: PUSH
14364: LD_INT 1
14366: PPUSH
14367: LD_INT 3
14369: PPUSH
14370: CALL_OW 12
14374: ST_TO_ADDR
// for i := 1 to list do
14375: LD_ADDR_VAR 0 5
14379: PUSH
14380: DOUBLE
14381: LD_INT 1
14383: DEC
14384: ST_TO_ADDR
14385: LD_VAR 0 6
14389: PUSH
14390: FOR_TO
14391: IFFALSE 14593
// for ta in filter do
14393: LD_ADDR_VAR 0 3
14397: PUSH
14398: LD_VAR 0 7
14402: PUSH
14403: FOR_IN
14404: IFFALSE 14589
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14406: LD_VAR 0 6
14410: PUSH
14411: LD_VAR 0 5
14415: ARRAY
14416: PPUSH
14417: LD_VAR 0 3
14421: PPUSH
14422: CALL_OW 296
14426: PUSH
14427: LD_INT 15
14429: LESSEQUAL
14430: IFFALSE 14587
// begin case c of 1 :
14432: LD_VAR 0 4
14436: PUSH
14437: LD_INT 1
14439: DOUBLE
14440: EQUAL
14441: IFTRUE 14445
14443: GO 14483
14445: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14446: LD_VAR 0 6
14450: PUSH
14451: LD_VAR 0 5
14455: ARRAY
14456: PPUSH
14457: LD_VAR 0 3
14461: PPUSH
14462: CALL_OW 250
14466: PPUSH
14467: LD_VAR 0 3
14471: PPUSH
14472: CALL_OW 251
14476: PPUSH
14477: CALL_OW 154
14481: GO 14587
14483: LD_INT 2
14485: DOUBLE
14486: EQUAL
14487: IFTRUE 14491
14489: GO 14555
14491: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14492: LD_VAR 0 6
14496: PUSH
14497: LD_VAR 0 5
14501: ARRAY
14502: PPUSH
14503: LD_VAR 0 3
14507: PPUSH
14508: CALL_OW 250
14512: PUSH
14513: LD_INT 1
14515: NEG
14516: PPUSH
14517: LD_INT 1
14519: PPUSH
14520: CALL_OW 12
14524: PLUS
14525: PPUSH
14526: LD_VAR 0 3
14530: PPUSH
14531: CALL_OW 251
14535: PUSH
14536: LD_INT 1
14538: NEG
14539: PPUSH
14540: LD_INT 1
14542: PPUSH
14543: CALL_OW 12
14547: PLUS
14548: PPUSH
14549: CALL_OW 153
14553: GO 14587
14555: LD_INT 3
14557: DOUBLE
14558: EQUAL
14559: IFTRUE 14563
14561: GO 14586
14563: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14564: LD_VAR 0 6
14568: PUSH
14569: LD_VAR 0 5
14573: ARRAY
14574: PPUSH
14575: LD_VAR 0 3
14579: PPUSH
14580: CALL_OW 115
14584: GO 14587
14586: POP
// end ; end ;
14587: GO 14403
14589: POP
14590: POP
14591: GO 14390
14593: POP
14594: POP
// end ;
14595: LD_VAR 0 2
14599: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14600: LD_INT 0
14602: PPUSH
14603: PPUSH
14604: PPUSH
14605: PPUSH
// r := 100 ;
14606: LD_ADDR_VAR 0 5
14610: PUSH
14611: LD_INT 100
14613: ST_TO_ADDR
// x := 0 ;
14614: LD_ADDR_VAR 0 6
14618: PUSH
14619: LD_INT 0
14621: ST_TO_ADDR
// while ( x < n ) do
14622: LD_VAR 0 6
14626: PUSH
14627: LD_VAR 0 2
14631: LESS
14632: IFFALSE 14895
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14634: LD_ADDR_VAR 0 4
14638: PUSH
14639: DOUBLE
14640: LD_INT 1
14642: DEC
14643: ST_TO_ADDR
14644: LD_VAR 0 1
14648: PPUSH
14649: LD_INT 0
14651: PPUSH
14652: CALL_OW 517
14656: PUSH
14657: LD_INT 1
14659: ARRAY
14660: PUSH
14661: FOR_TO
14662: IFFALSE 14891
// begin if r > 50 then
14664: LD_VAR 0 5
14668: PUSH
14669: LD_INT 50
14671: GREATER
14672: IFFALSE 14875
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14674: LD_VAR 0 1
14678: PPUSH
14679: LD_INT 0
14681: PPUSH
14682: CALL_OW 517
14686: PUSH
14687: LD_INT 1
14689: ARRAY
14690: PUSH
14691: LD_VAR 0 4
14695: ARRAY
14696: PPUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: LD_INT 0
14704: PPUSH
14705: CALL_OW 517
14709: PUSH
14710: LD_INT 2
14712: ARRAY
14713: PUSH
14714: LD_VAR 0 4
14718: ARRAY
14719: PPUSH
14720: CALL_OW 458
14724: NOT
14725: IFFALSE 14873
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14727: LD_VAR 0 1
14731: PPUSH
14732: LD_INT 0
14734: PPUSH
14735: CALL_OW 517
14739: PUSH
14740: LD_INT 1
14742: ARRAY
14743: PUSH
14744: LD_VAR 0 4
14748: ARRAY
14749: PPUSH
14750: LD_VAR 0 1
14754: PPUSH
14755: LD_INT 0
14757: PPUSH
14758: CALL_OW 517
14762: PUSH
14763: LD_INT 2
14765: ARRAY
14766: PUSH
14767: LD_VAR 0 4
14771: ARRAY
14772: PPUSH
14773: LD_INT 8
14775: PPUSH
14776: LD_INT 0
14778: PPUSH
14779: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14783: LD_ADDR_EXP 37
14787: PUSH
14788: LD_EXP 37
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: LD_VAR 0 1
14800: PPUSH
14801: LD_INT 0
14803: PPUSH
14804: CALL_OW 517
14808: PUSH
14809: LD_INT 1
14811: ARRAY
14812: PUSH
14813: LD_VAR 0 4
14817: ARRAY
14818: PUSH
14819: LD_VAR 0 1
14823: PPUSH
14824: LD_INT 0
14826: PPUSH
14827: CALL_OW 517
14831: PUSH
14832: LD_INT 2
14834: ARRAY
14835: PUSH
14836: LD_VAR 0 4
14840: ARRAY
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PPUSH
14846: CALL_OW 2
14850: ST_TO_ADDR
// r := 0 ;
14851: LD_ADDR_VAR 0 5
14855: PUSH
14856: LD_INT 0
14858: ST_TO_ADDR
// x := x + 1 ;
14859: LD_ADDR_VAR 0 6
14863: PUSH
14864: LD_VAR 0 6
14868: PUSH
14869: LD_INT 1
14871: PLUS
14872: ST_TO_ADDR
// end end else
14873: GO 14889
// r := r + 35 ;
14875: LD_ADDR_VAR 0 5
14879: PUSH
14880: LD_VAR 0 5
14884: PUSH
14885: LD_INT 35
14887: PLUS
14888: ST_TO_ADDR
// end end ;
14889: GO 14661
14891: POP
14892: POP
14893: GO 14622
14895: LD_VAR 0 3
14899: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14900: LD_INT 0
14902: PPUSH
14903: PPUSH
14904: PPUSH
14905: PPUSH
14906: PPUSH
// tmp := [ ] ;
14907: LD_ADDR_VAR 0 6
14911: PUSH
14912: EMPTY
14913: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14914: LD_ADDR_VAR 0 7
14918: PUSH
14919: LD_INT 22
14921: PUSH
14922: LD_VAR 0 1
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 30
14933: PUSH
14934: LD_INT 32
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: ST_TO_ADDR
// if bunkers then
14950: LD_VAR 0 7
14954: IFFALSE 15024
// for i in bunkers do
14956: LD_ADDR_VAR 0 4
14960: PUSH
14961: LD_VAR 0 7
14965: PUSH
14966: FOR_IN
14967: IFFALSE 15022
// for j in UnitsInside ( i ) do
14969: LD_ADDR_VAR 0 5
14973: PUSH
14974: LD_VAR 0 4
14978: PPUSH
14979: CALL_OW 313
14983: PUSH
14984: FOR_IN
14985: IFFALSE 15018
// tmp := Replace ( tmp , tmp + 1 , j ) ;
14987: LD_ADDR_VAR 0 6
14991: PUSH
14992: LD_VAR 0 6
14996: PPUSH
14997: LD_VAR 0 6
15001: PUSH
15002: LD_INT 1
15004: PLUS
15005: PPUSH
15006: LD_VAR 0 5
15010: PPUSH
15011: CALL_OW 1
15015: ST_TO_ADDR
15016: GO 14984
15018: POP
15019: POP
15020: GO 14966
15022: POP
15023: POP
// if tmp then
15024: LD_VAR 0 6
15028: IFFALSE 15068
// begin ComExitBuilding ( tmp ) ;
15030: LD_VAR 0 6
15034: PPUSH
15035: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15039: LD_VAR 0 6
15043: PPUSH
15044: LD_VAR 0 2
15048: PPUSH
15049: CALL_OW 250
15053: PPUSH
15054: LD_VAR 0 2
15058: PPUSH
15059: CALL_OW 251
15063: PPUSH
15064: CALL_OW 174
// end ; end ;
15068: LD_VAR 0 3
15072: RET
// export function CreateNature ; var i , un ; begin
15073: LD_INT 0
15075: PPUSH
15076: PPUSH
15077: PPUSH
// uc_side := 0 ;
15078: LD_ADDR_OWVAR 20
15082: PUSH
15083: LD_INT 0
15085: ST_TO_ADDR
// uc_nation := 0 ;
15086: LD_ADDR_OWVAR 21
15090: PUSH
15091: LD_INT 0
15093: ST_TO_ADDR
// InitHc ;
15094: CALL_OW 19
// hc_class := class_fish ;
15098: LD_ADDR_OWVAR 28
15102: PUSH
15103: LD_INT 20
15105: ST_TO_ADDR
// for i := 1 to 6 do
15106: LD_ADDR_VAR 0 2
15110: PUSH
15111: DOUBLE
15112: LD_INT 1
15114: DEC
15115: ST_TO_ADDR
15116: LD_INT 6
15118: PUSH
15119: FOR_TO
15120: IFFALSE 15139
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15122: CALL_OW 44
15126: PPUSH
15127: LD_INT 22
15129: PPUSH
15130: LD_INT 0
15132: PPUSH
15133: CALL_OW 49
15137: GO 15119
15139: POP
15140: POP
// for i := 1 to Difficulty + 2 do
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: DOUBLE
15147: LD_INT 1
15149: DEC
15150: ST_TO_ADDR
15151: LD_OWVAR 67
15155: PUSH
15156: LD_INT 2
15158: PLUS
15159: PUSH
15160: FOR_TO
15161: IFFALSE 15270
// begin hc_sex := sex_male ;
15163: LD_ADDR_OWVAR 27
15167: PUSH
15168: LD_INT 1
15170: ST_TO_ADDR
// uc_side := 0 ;
15171: LD_ADDR_OWVAR 20
15175: PUSH
15176: LD_INT 0
15178: ST_TO_ADDR
// uc_nation := nation_nature ;
15179: LD_ADDR_OWVAR 21
15183: PUSH
15184: LD_INT 0
15186: ST_TO_ADDR
// hc_class := class_tiger ;
15187: LD_ADDR_OWVAR 28
15191: PUSH
15192: LD_INT 14
15194: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15195: LD_ADDR_OWVAR 31
15199: PUSH
15200: LD_EXP 30
15204: PUSH
15205: LD_INT 0
15207: PUSH
15208: LD_INT 0
15210: PUSH
15211: LD_INT 0
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15220: LD_ADDR_OWVAR 35
15224: PUSH
15225: LD_INT 5
15227: NEG
15228: PPUSH
15229: LD_INT 5
15231: PPUSH
15232: CALL_OW 12
15236: PUSH
15237: LD_OWVAR 67
15241: MUL
15242: ST_TO_ADDR
// un := CreateHuman ;
15243: LD_ADDR_VAR 0 3
15247: PUSH
15248: CALL_OW 44
15252: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15253: LD_VAR 0 3
15257: PPUSH
15258: LD_INT 23
15260: PPUSH
15261: LD_INT 0
15263: PPUSH
15264: CALL_OW 49
// end ;
15268: GO 15160
15270: POP
15271: POP
// for i := 1 to rand ( 3 , 4 ) do
15272: LD_ADDR_VAR 0 2
15276: PUSH
15277: DOUBLE
15278: LD_INT 1
15280: DEC
15281: ST_TO_ADDR
15282: LD_INT 3
15284: PPUSH
15285: LD_INT 4
15287: PPUSH
15288: CALL_OW 12
15292: PUSH
15293: FOR_TO
15294: IFFALSE 15386
// begin hc_sex := sex_male ;
15296: LD_ADDR_OWVAR 27
15300: PUSH
15301: LD_INT 1
15303: ST_TO_ADDR
// uc_side := 0 ;
15304: LD_ADDR_OWVAR 20
15308: PUSH
15309: LD_INT 0
15311: ST_TO_ADDR
// uc_nation := nation_nature ;
15312: LD_ADDR_OWVAR 21
15316: PUSH
15317: LD_INT 0
15319: ST_TO_ADDR
// hc_class := 18 ;
15320: LD_ADDR_OWVAR 28
15324: PUSH
15325: LD_INT 18
15327: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15328: LD_ADDR_OWVAR 31
15332: PUSH
15333: LD_INT 0
15335: PUSH
15336: LD_INT 0
15338: PUSH
15339: LD_INT 0
15341: PUSH
15342: LD_INT 0
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: ST_TO_ADDR
// hc_agressivity := 0 ;
15351: LD_ADDR_OWVAR 35
15355: PUSH
15356: LD_INT 0
15358: ST_TO_ADDR
// un := CreateHuman ;
15359: LD_ADDR_VAR 0 3
15363: PUSH
15364: CALL_OW 44
15368: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15369: LD_VAR 0 3
15373: PPUSH
15374: LD_INT 23
15376: PPUSH
15377: LD_INT 0
15379: PPUSH
15380: CALL_OW 49
// end ;
15384: GO 15293
15386: POP
15387: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15388: LD_ADDR_VAR 0 2
15392: PUSH
15393: DOUBLE
15394: LD_INT 1
15396: DEC
15397: ST_TO_ADDR
15398: LD_INT 4
15400: PUSH
15401: LD_INT 3
15403: PUSH
15404: LD_INT 3
15406: PUSH
15407: LD_INT 3
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: PUSH
15416: LD_OWVAR 67
15420: ARRAY
15421: PUSH
15422: FOR_TO
15423: IFFALSE 15532
// begin hc_sex := sex_male ;
15425: LD_ADDR_OWVAR 27
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// uc_side := 0 ;
15433: LD_ADDR_OWVAR 20
15437: PUSH
15438: LD_INT 0
15440: ST_TO_ADDR
// uc_nation := nation_nature ;
15441: LD_ADDR_OWVAR 21
15445: PUSH
15446: LD_INT 0
15448: ST_TO_ADDR
// hc_class := class_apeman ;
15449: LD_ADDR_OWVAR 28
15453: PUSH
15454: LD_INT 12
15456: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15457: LD_ADDR_OWVAR 31
15461: PUSH
15462: LD_INT 0
15464: PPUSH
15465: LD_INT 2
15467: PPUSH
15468: CALL_OW 12
15472: PUSH
15473: LD_INT 0
15475: PUSH
15476: LD_INT 0
15478: PUSH
15479: LD_INT 0
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15488: LD_ADDR_OWVAR 35
15492: PUSH
15493: LD_INT 10
15495: NEG
15496: PPUSH
15497: LD_INT 10
15499: PPUSH
15500: CALL_OW 12
15504: ST_TO_ADDR
// un := CreateHuman ;
15505: LD_ADDR_VAR 0 3
15509: PUSH
15510: CALL_OW 44
15514: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15515: LD_VAR 0 3
15519: PPUSH
15520: LD_INT 26
15522: PPUSH
15523: LD_INT 0
15525: PPUSH
15526: CALL_OW 49
// end ;
15530: GO 15422
15532: POP
15533: POP
// end ; end_of_file
15534: LD_VAR 0 1
15538: RET
// on UnitDestroyed ( unit ) do var i ;
15539: LD_INT 0
15541: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15542: LD_VAR 0 1
15546: PPUSH
15547: CALL 34840 0 1
// if unit = JMM then
15551: LD_VAR 0 1
15555: PUSH
15556: LD_EXP 1
15560: EQUAL
15561: IFFALSE 15570
// YouLost ( JMM ) ;
15563: LD_STRING JMM
15565: PPUSH
15566: CALL_OW 104
// if unit in russianTanks then
15570: LD_VAR 0 1
15574: PUSH
15575: LD_EXP 32
15579: IN
15580: IFFALSE 15598
// russianTanks := russianTanks diff unit ;
15582: LD_ADDR_EXP 32
15586: PUSH
15587: LD_EXP 32
15591: PUSH
15592: LD_VAR 0 1
15596: DIFF
15597: ST_TO_ADDR
// if unit in russianTimeLapsers then
15598: LD_VAR 0 1
15602: PUSH
15603: LD_EXP 33
15607: IN
15608: IFFALSE 15626
// russianTimeLapsers := russianTimeLapsers diff unit ;
15610: LD_ADDR_EXP 33
15614: PUSH
15615: LD_EXP 33
15619: PUSH
15620: LD_VAR 0 1
15624: DIFF
15625: ST_TO_ADDR
// if unit in RuScientists then
15626: LD_VAR 0 1
15630: PUSH
15631: LD_EXP 27
15635: IN
15636: IFFALSE 15668
// begin RuScientists := RuScientists diff unit ;
15638: LD_ADDR_EXP 27
15642: PUSH
15643: LD_EXP 27
15647: PUSH
15648: LD_VAR 0 1
15652: DIFF
15653: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15654: LD_ADDR_EXP 28
15658: PUSH
15659: LD_EXP 28
15663: PUSH
15664: LD_INT 1
15666: PLUS
15667: ST_TO_ADDR
// end ; end ;
15668: PPOPN 2
15670: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15671: LD_VAR 0 3
15675: PPUSH
15676: CALL_OW 264
15680: PUSH
15681: LD_INT 9
15683: EQUAL
15684: IFFALSE 15700
// laserCounterDestroy := laserCounterDestroy + 1 ;
15686: LD_ADDR_EXP 43
15690: PUSH
15691: LD_EXP 43
15695: PUSH
15696: LD_INT 1
15698: PLUS
15699: ST_TO_ADDR
// end ;
15700: PPOPN 3
15702: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15703: LD_VAR 0 2
15707: PUSH
15708: LD_INT 22
15710: PUSH
15711: LD_INT 6
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PPUSH
15718: CALL_OW 69
15722: IN
15723: IFFALSE 15778
// begin if GetType ( human ) = unit_vehicle then
15725: LD_VAR 0 2
15729: PPUSH
15730: CALL_OW 247
15734: PUSH
15735: LD_INT 2
15737: EQUAL
15738: IFFALSE 15755
// human := IsDrivenBy ( human ) ;
15740: LD_ADDR_VAR 0 2
15744: PUSH
15745: LD_VAR 0 2
15749: PPUSH
15750: CALL_OW 311
15754: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15755: LD_VAR 0 2
15759: PPUSH
15760: LD_VAR 0 2
15764: PPUSH
15765: CALL_OW 110
15769: PUSH
15770: LD_INT 10
15772: PLUS
15773: PPUSH
15774: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
15778: LD_VAR 0 2
15782: PPUSH
15783: CALL_OW 255
15787: PUSH
15788: LD_INT 1
15790: EQUAL
15791: PUSH
15792: LD_EXP 40
15796: PUSH
15797: LD_INT 0
15799: EQUAL
15800: AND
15801: IFFALSE 15913
// begin eventVar1 = 1 ;
15803: LD_ADDR_EXP 40
15807: PUSH
15808: LD_INT 1
15810: ST_TO_ADDR
// teleportExplored = 1 ;
15811: LD_ADDR_EXP 26
15815: PUSH
15816: LD_INT 1
15818: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15819: LD_STRING M2a
15821: PPUSH
15822: CALL_OW 337
// wait ( 0 0$2 ) ;
15826: LD_INT 70
15828: PPUSH
15829: CALL_OW 67
// DialogueOn ;
15833: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15837: LD_INT 22
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 21
15849: PUSH
15850: LD_INT 1
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 69
15865: PPUSH
15866: LD_STRING DT3a-Sol1-1
15868: PPUSH
15869: LD_STRING DT3a-FSol1-1
15871: PPUSH
15872: CALL 12260 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15876: LD_EXP 1
15880: PPUSH
15881: LD_STRING DT3a-JMM-1
15883: PPUSH
15884: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15888: LD_VAR 0 2
15892: PPUSH
15893: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15897: LD_EXP 1
15901: PPUSH
15902: LD_STRING DT3a-JMM-1a
15904: PPUSH
15905: CALL_OW 88
// DialogueOff ;
15909: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15913: LD_VAR 0 1
15917: PUSH
15918: LD_INT 10
15920: EQUAL
15921: PUSH
15922: LD_VAR 0 2
15926: PPUSH
15927: CALL_OW 247
15931: PUSH
15932: LD_INT 2
15934: EQUAL
15935: AND
15936: PUSH
15937: LD_VAR 0 2
15941: PPUSH
15942: CALL_OW 255
15946: PUSH
15947: LD_INT 3
15949: EQUAL
15950: AND
15951: IFFALSE 16017
// begin if vehicleTeleported = 0 then
15953: LD_EXP 21
15957: PUSH
15958: LD_INT 0
15960: EQUAL
15961: IFFALSE 15978
// begin wait ( 0 0$03 ) ;
15963: LD_INT 105
15965: PPUSH
15966: CALL_OW 67
// vehicleTeleported := 1 ;
15970: LD_ADDR_EXP 21
15974: PUSH
15975: LD_INT 1
15977: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15978: LD_EXP 21
15982: PUSH
15983: LD_INT 2
15985: EQUAL
15986: IFFALSE 16003
// begin wait ( 0 0$03 ) ;
15988: LD_INT 105
15990: PPUSH
15991: CALL_OW 67
// vehicleTeleported := 3 ;
15995: LD_ADDR_EXP 21
15999: PUSH
16000: LD_INT 3
16002: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16003: LD_ADDR_EXP 22
16007: PUSH
16008: LD_EXP 22
16012: PUSH
16013: LD_INT 1
16015: PLUS
16016: ST_TO_ADDR
// end ; end ;
16017: PPOPN 2
16019: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16020: LD_VAR 0 1
16024: PPUSH
16025: LD_VAR 0 2
16029: PPUSH
16030: CALL 34960 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16034: LD_VAR 0 1
16038: PPUSH
16039: CALL_OW 264
16043: PUSH
16044: LD_INT 7
16046: EQUAL
16047: IFFALSE 16057
// rocketBuilded := true ;
16049: LD_ADDR_EXP 44
16053: PUSH
16054: LD_INT 1
16056: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 255
16066: PUSH
16067: LD_INT 3
16069: NONEQUAL
16070: IFFALSE 16074
// exit ;
16072: GO 16191
// if factory in [ ru_fact , rufab2 ] then
16074: LD_VAR 0 2
16078: PUSH
16079: LD_INT 21
16081: PUSH
16082: LD_INT 112
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: IN
16089: IFFALSE 16191
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16091: LD_VAR 0 1
16095: PPUSH
16096: CALL_OW 264
16100: PUSH
16101: LD_INT 49
16103: EQUAL
16104: IFFALSE 16140
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16106: LD_ADDR_EXP 33
16110: PUSH
16111: LD_EXP 33
16115: PPUSH
16116: LD_VAR 0 1
16120: PPUSH
16121: CALL 77270 0 2
16125: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16126: LD_VAR 0 1
16130: PPUSH
16131: LD_INT 137
16133: PPUSH
16134: CALL_OW 120
// end else
16138: GO 16191
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL_OW 264
16149: PUSH
16150: LD_INT 51
16152: PUSH
16153: LD_INT 89
16155: PUSH
16156: LD_INT 52
16158: PUSH
16159: LD_INT 53
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: IN
16168: NOT
16169: IFFALSE 16191
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16171: LD_ADDR_EXP 32
16175: PUSH
16176: LD_EXP 32
16180: PPUSH
16181: LD_VAR 0 1
16185: PPUSH
16186: CALL 77270 0 2
16190: ST_TO_ADDR
// end ; end ; end ;
16191: PPOPN 2
16193: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16194: LD_INT 0
16196: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16197: LD_VAR 0 2
16201: PPUSH
16202: CALL_OW 255
16206: PUSH
16207: LD_INT 3
16209: EQUAL
16210: PUSH
16211: LD_VAR 0 2
16215: PPUSH
16216: CALL_OW 257
16220: PUSH
16221: LD_INT 3
16223: EQUAL
16224: AND
16225: PUSH
16226: LD_INT 21
16228: PPUSH
16229: CALL_OW 255
16233: PUSH
16234: LD_INT 3
16236: EQUAL
16237: AND
16238: PUSH
16239: LD_INT 21
16241: PPUSH
16242: CALL_OW 302
16246: AND
16247: IFFALSE 16261
// ComEnterUnit ( human , ru_fact ) ;
16249: LD_VAR 0 2
16253: PPUSH
16254: LD_INT 21
16256: PPUSH
16257: CALL_OW 120
// end ;
16261: PPOPN 3
16263: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: CALL 34944 0 1
// end ; end_of_file
16273: PPOPN 1
16275: END
// every 0 0$1 trigger ruAI = 1 do
16276: LD_EXP 34
16280: PUSH
16281: LD_INT 1
16283: EQUAL
16284: IFFALSE 16396
16286: GO 16288
16288: DISABLE
// begin enable ;
16289: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16290: LD_INT 3
16292: PPUSH
16293: LD_INT 6
16295: PPUSH
16296: LD_INT 9
16298: PPUSH
16299: LD_EXP 31
16303: PPUSH
16304: CALL 13110 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16308: LD_INT 3
16310: PPUSH
16311: LD_INT 4
16313: PPUSH
16314: LD_INT 10
16316: PPUSH
16317: LD_EXP 31
16321: PPUSH
16322: CALL 13110 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16326: LD_INT 3
16328: PPUSH
16329: LD_INT 9
16331: PPUSH
16332: CALL 13945 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16336: LD_INT 3
16338: PPUSH
16339: LD_INT 10
16341: PPUSH
16342: CALL 13945 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16346: LD_INT 3
16348: PPUSH
16349: LD_INT 16
16351: PPUSH
16352: LD_INT 9
16354: PPUSH
16355: LD_INT 91
16357: PPUSH
16358: CALL 13477 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16362: LD_INT 3
16364: PPUSH
16365: LD_INT 17
16367: PPUSH
16368: LD_INT 10
16370: PPUSH
16371: LD_INT 47
16373: PUSH
16374: LD_INT 129
16376: PUSH
16377: LD_INT 135
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: PPUSH
16385: CALL 13477 0 4
// IntBazooka ( 3 ) ;
16389: LD_INT 3
16391: PPUSH
16392: CALL 14272 0 1
// end ;
16396: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
16397: LD_EXP 32
16401: PUSH
16402: LD_INT 3
16404: PUSH
16405: LD_INT 4
16407: PUSH
16408: LD_INT 5
16410: PUSH
16411: LD_INT 6
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: PUSH
16420: LD_OWVAR 67
16424: ARRAY
16425: GREATEREQUAL
16426: IFFALSE 16798
16428: GO 16430
16430: DISABLE
16431: LD_INT 0
16433: PPUSH
16434: PPUSH
16435: PPUSH
16436: PPUSH
// begin enable ;
16437: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16438: LD_ADDR_VAR 0 2
16442: PUSH
16443: LD_EXP 32
16447: PUSH
16448: LD_EXP 33
16452: UNION
16453: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16454: LD_ADDR_EXP 32
16458: PUSH
16459: LD_EXP 32
16463: PUSH
16464: LD_VAR 0 2
16468: DIFF
16469: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16470: LD_ADDR_EXP 33
16474: PUSH
16475: LD_EXP 33
16479: PUSH
16480: LD_VAR 0 2
16484: DIFF
16485: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16486: LD_EXP 21
16490: PUSH
16491: LD_INT 4
16493: GREATEREQUAL
16494: IFFALSE 16512
// attackTactic := rand ( 1 , 2 ) ;
16496: LD_ADDR_EXP 36
16500: PUSH
16501: LD_INT 1
16503: PPUSH
16504: LD_INT 2
16506: PPUSH
16507: CALL_OW 12
16511: ST_TO_ADDR
// path := [ [ 93 , 77 ] , [ 107 , 99 ] , [ 123 , 112 ] , [ 140 , 112 ] ] ;
16512: LD_ADDR_VAR 0 4
16516: PUSH
16517: LD_INT 93
16519: PUSH
16520: LD_INT 77
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 107
16529: PUSH
16530: LD_INT 99
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 123
16539: PUSH
16540: LD_INT 112
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 140
16549: PUSH
16550: LD_INT 112
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: ST_TO_ADDR
// if attackTactic < 2 then
16563: LD_EXP 36
16567: PUSH
16568: LD_INT 2
16570: LESS
16571: IFFALSE 16602
// path := [ [ 131 , 136 ] , [ 140 , 112 ] ] ;
16573: LD_ADDR_VAR 0 4
16577: PUSH
16578: LD_INT 131
16580: PUSH
16581: LD_INT 136
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 140
16590: PUSH
16591: LD_INT 112
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16602: LD_INT 10
16604: PPUSH
16605: CALL_OW 302
16609: IFFALSE 16725
// begin for i in tmp do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: LD_VAR 0 2
16620: PUSH
16621: FOR_IN
16622: IFFALSE 16665
// if attackTactic < 2 then
16624: LD_EXP 36
16628: PUSH
16629: LD_INT 2
16631: LESS
16632: IFFALSE 16648
// ComEnterUnit ( i , ruteleprt ) else
16634: LD_VAR 0 1
16638: PPUSH
16639: LD_INT 10
16641: PPUSH
16642: CALL_OW 120
16646: GO 16663
// ComMoveXY ( i , 88 , 69 ) ;
16648: LD_VAR 0 1
16652: PPUSH
16653: LD_INT 88
16655: PPUSH
16656: LD_INT 69
16658: PPUSH
16659: CALL_OW 111
16663: GO 16621
16665: POP
16666: POP
// p := 0 ;
16667: LD_ADDR_VAR 0 3
16671: PUSH
16672: LD_INT 0
16674: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16675: LD_INT 70
16677: PPUSH
16678: CALL_OW 67
// p := Inc ( p ) ;
16682: LD_ADDR_VAR 0 3
16686: PUSH
16687: LD_VAR 0 3
16691: PPUSH
16692: CALL 78631 0 1
16696: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
16697: LD_VAR 0 2
16701: PPUSH
16702: LD_INT 60
16704: PUSH
16705: EMPTY
16706: LIST
16707: PPUSH
16708: CALL_OW 72
16712: NOT
16713: PUSH
16714: LD_VAR 0 3
16718: PUSH
16719: LD_INT 30
16721: GREATER
16722: OR
16723: IFFALSE 16675
// end ; repeat wait ( 0 0$1 ) ;
16725: LD_INT 35
16727: PPUSH
16728: CALL_OW 67
// for i in tmp do
16732: LD_ADDR_VAR 0 1
16736: PUSH
16737: LD_VAR 0 2
16741: PUSH
16742: FOR_IN
16743: IFFALSE 16775
// if not IsOk ( i ) then
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 302
16754: NOT
16755: IFFALSE 16773
// tmp := tmp diff i ;
16757: LD_ADDR_VAR 0 2
16761: PUSH
16762: LD_VAR 0 2
16766: PUSH
16767: LD_VAR 0 1
16771: DIFF
16772: ST_TO_ADDR
16773: GO 16742
16775: POP
16776: POP
// AgressiveMove ( tmp , path ) ;
16777: LD_VAR 0 2
16781: PPUSH
16782: LD_VAR 0 4
16786: PPUSH
16787: CALL 79874 0 2
// until not tmp ;
16791: LD_VAR 0 2
16795: NOT
16796: IFFALSE 16725
// end ;
16798: PPOPN 4
16800: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16801: LD_INT 4
16803: PPUSH
16804: CALL_OW 303
16808: IFFALSE 16823
16810: GO 16812
16812: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16813: LD_INT 3
16815: PPUSH
16816: LD_INT 4
16818: PPUSH
16819: CALL 14900 0 2
16823: END
// every 0 0$1 do
16824: GO 16826
16826: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16827: LD_INT 3
16829: PPUSH
16830: LD_INT 91
16832: PPUSH
16833: LD_INT 3
16835: PPUSH
16836: CALL 12875 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16840: LD_INT 3
16842: PPUSH
16843: LD_INT 47
16845: PPUSH
16846: LD_INT 3
16848: PPUSH
16849: CALL 12875 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16853: LD_INT 3
16855: PPUSH
16856: LD_INT 129
16858: PPUSH
16859: LD_INT 3
16861: PPUSH
16862: CALL 12875 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16866: LD_INT 3
16868: PPUSH
16869: LD_INT 3
16871: PPUSH
16872: LD_INT 3
16874: PPUSH
16875: CALL 12875 0 3
// end ;
16879: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16880: LD_INT 22
16882: PUSH
16883: LD_INT 1
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 21
16892: PUSH
16893: LD_INT 3
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL_OW 69
16908: IFFALSE 16977
16910: GO 16912
16912: DISABLE
// begin wait ( 0 0$40 ) ;
16913: LD_INT 1400
16915: PPUSH
16916: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16920: LD_INT 3
16922: PPUSH
16923: LD_INT 21
16925: PPUSH
16926: LD_INT 3
16928: PUSH
16929: LD_INT 4
16931: PUSH
16932: LD_INT 5
16934: PUSH
16935: LD_INT 6
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: PUSH
16944: LD_OWVAR 67
16948: ARRAY
16949: PPUSH
16950: LD_INT 46
16952: PUSH
16953: LD_INT 45
16955: PUSH
16956: LD_INT 44
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: PPUSH
16964: LD_INT 3
16966: PPUSH
16967: LD_INT 3
16969: PPUSH
16970: LD_INT 24
16972: PPUSH
16973: CALL 14125 0 7
// end ;
16977: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16978: LD_EXP 20
16982: PUSH
16983: LD_INT 2
16985: EQUAL
16986: PUSH
16987: LD_INT 21
16989: PPUSH
16990: CALL_OW 255
16994: PUSH
16995: LD_INT 3
16997: EQUAL
16998: AND
16999: PUSH
17000: LD_INT 112
17002: PPUSH
17003: CALL_OW 255
17007: PUSH
17008: LD_INT 3
17010: EQUAL
17011: AND
17012: PUSH
17013: LD_INT 21
17015: PPUSH
17016: CALL_OW 302
17020: AND
17021: PUSH
17022: LD_INT 112
17024: PPUSH
17025: CALL_OW 302
17029: AND
17030: PUSH
17031: LD_INT 22
17033: PUSH
17034: LD_INT 3
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 21
17043: PUSH
17044: LD_INT 2
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 50
17053: PUSH
17054: EMPTY
17055: LIST
17056: PUSH
17057: LD_INT 3
17059: PUSH
17060: LD_INT 58
17062: PUSH
17063: EMPTY
17064: LIST
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: PPUSH
17076: CALL_OW 69
17080: PUSH
17081: LD_INT 18
17083: PPUSH
17084: LD_INT 22
17086: PUSH
17087: LD_INT 3
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 21
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PPUSH
17108: CALL_OW 70
17112: PUSH
17113: LD_INT 0
17115: EQUAL
17116: DIFF
17117: AND
17118: IFFALSE 17244
17120: GO 17122
17122: DISABLE
// begin enable ;
17123: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17124: LD_INT 3
17126: PPUSH
17127: LD_INT 21
17129: PPUSH
17130: LD_INT 3
17132: PUSH
17133: LD_INT 4
17135: PUSH
17136: LD_INT 5
17138: PUSH
17139: LD_INT 6
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: PUSH
17148: LD_OWVAR 67
17152: ARRAY
17153: PPUSH
17154: LD_INT 46
17156: PUSH
17157: LD_INT 45
17159: PUSH
17160: LD_INT 44
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: LIST
17167: PPUSH
17168: LD_INT 3
17170: PPUSH
17171: LD_INT 3
17173: PPUSH
17174: LD_INT 24
17176: PPUSH
17177: CALL 14125 0 7
// if russianTimeLapsers = 0 then
17181: LD_EXP 33
17185: PUSH
17186: LD_INT 0
17188: EQUAL
17189: IFFALSE 17244
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17191: LD_INT 3
17193: PPUSH
17194: LD_INT 112
17196: PPUSH
17197: LD_INT 1
17199: PUSH
17200: LD_INT 2
17202: PUSH
17203: LD_INT 2
17205: PUSH
17206: LD_INT 2
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: PUSH
17215: LD_OWVAR 67
17219: ARRAY
17220: PPUSH
17221: LD_INT 49
17223: PUSH
17224: LD_INT 49
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PPUSH
17231: LD_INT 3
17233: PPUSH
17234: LD_INT 3
17236: PPUSH
17237: LD_INT 24
17239: PPUSH
17240: CALL 14125 0 7
// end ;
17244: END
// every 0 0$1 trigger arabianMines do var i ;
17245: LD_EXP 37
17249: IFFALSE 17370
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
// begin enable ;
17257: ENABLE
// for i in arabianMines do
17258: LD_ADDR_VAR 0 1
17262: PUSH
17263: LD_EXP 37
17267: PUSH
17268: FOR_IN
17269: IFFALSE 17368
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17271: LD_INT 22
17273: PUSH
17274: LD_INT 1
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 92
17283: PUSH
17284: LD_VAR 0 1
17288: PUSH
17289: LD_INT 1
17291: ARRAY
17292: PUSH
17293: LD_VAR 0 1
17297: PUSH
17298: LD_INT 2
17300: ARRAY
17301: PUSH
17302: LD_INT 3
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: IFFALSE 17366
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17321: LD_VAR 0 1
17325: PUSH
17326: LD_INT 1
17328: ARRAY
17329: PPUSH
17330: LD_VAR 0 1
17334: PUSH
17335: LD_INT 2
17337: ARRAY
17338: PPUSH
17339: LD_INT 5
17341: PPUSH
17342: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17346: LD_ADDR_EXP 37
17350: PUSH
17351: LD_EXP 37
17355: PPUSH
17356: LD_VAR 0 1
17360: PPUSH
17361: CALL_OW 3
17365: ST_TO_ADDR
// end ; end ;
17366: GO 17268
17368: POP
17369: POP
// end ;
17370: PPOPN 1
17372: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17373: LD_EXP 21
17377: PUSH
17378: LD_INT 4
17380: GREATEREQUAL
17381: PUSH
17382: LD_EXP 22
17386: PUSH
17387: LD_INT 12
17389: MOD
17390: PUSH
17391: LD_INT 0
17393: EQUAL
17394: AND
17395: IFFALSE 17509
17397: GO 17399
17399: DISABLE
17400: LD_INT 0
17402: PPUSH
17403: PPUSH
// begin enable ;
17404: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17405: LD_ADDR_VAR 0 2
17409: PUSH
17410: LD_INT 122
17412: PUSH
17413: LD_INT 142
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 101
17422: PUSH
17423: LD_INT 127
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 104
17432: PUSH
17433: LD_INT 104
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 46
17442: PUSH
17443: LD_INT 81
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17456: LD_ADDR_VAR 0 1
17460: PUSH
17461: LD_INT 1
17463: PPUSH
17464: LD_INT 4
17466: PPUSH
17467: CALL_OW 12
17471: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17472: LD_INT 10
17474: PPUSH
17475: LD_VAR 0 2
17479: PUSH
17480: LD_VAR 0 1
17484: ARRAY
17485: PUSH
17486: LD_INT 1
17488: ARRAY
17489: PPUSH
17490: LD_VAR 0 2
17494: PUSH
17495: LD_VAR 0 1
17499: ARRAY
17500: PUSH
17501: LD_INT 2
17503: ARRAY
17504: PPUSH
17505: CALL_OW 243
// end ; end_of_file
17509: PPOPN 2
17511: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17512: LD_INT 3
17514: PPUSH
17515: CALL_OW 301
17519: IFFALSE 17740
17521: GO 17523
17523: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
17524: LD_EXP 27
17528: PPUSH
17529: LD_INT 50
17531: PUSH
17532: EMPTY
17533: LIST
17534: PPUSH
17535: CALL_OW 72
17539: IFFALSE 17548
// wait ( 0 0$10 ) ;
17541: LD_INT 350
17543: PPUSH
17544: CALL_OW 67
// DialogueOn ;
17548: CALL_OW 6
// if sciCounter = 0 then
17552: LD_EXP 28
17556: PUSH
17557: LD_INT 0
17559: EQUAL
17560: IFFALSE 17588
// begin Say ( JMM , D7a-JMM-1 ) ;
17562: LD_EXP 1
17566: PPUSH
17567: LD_STRING D7a-JMM-1
17569: PPUSH
17570: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17574: LD_EXP 15
17578: PPUSH
17579: LD_STRING D7a-Pow-1
17581: PPUSH
17582: CALL_OW 94
// end else
17586: GO 17732
// if sciCounter < 6 then
17588: LD_EXP 28
17592: PUSH
17593: LD_INT 6
17595: LESS
17596: IFFALSE 17624
// begin Say ( JMM , D7b-JMM-1 ) ;
17598: LD_EXP 1
17602: PPUSH
17603: LD_STRING D7b-JMM-1
17605: PPUSH
17606: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17610: LD_EXP 15
17614: PPUSH
17615: LD_STRING D7b-Pow-1
17617: PPUSH
17618: CALL_OW 94
// end else
17622: GO 17732
// begin Say ( JMM , D7c-JMM-1 ) ;
17624: LD_EXP 1
17628: PPUSH
17629: LD_STRING D7c-JMM-1
17631: PPUSH
17632: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17636: LD_EXP 15
17640: PPUSH
17641: LD_STRING D7c-Pow-1
17643: PPUSH
17644: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17648: LD_EXP 1
17652: PPUSH
17653: LD_STRING D7d-JMM-1
17655: PPUSH
17656: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17660: LD_EXP 15
17664: PPUSH
17665: LD_STRING D7d-Pow-1
17667: PPUSH
17668: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17672: LD_EXP 1
17676: PPUSH
17677: LD_STRING D7d-JMM-2
17679: PPUSH
17680: CALL_OW 88
// if askSiberite = 1 then
17684: LD_EXP 25
17688: PUSH
17689: LD_INT 1
17691: EQUAL
17692: IFFALSE 17708
// Say ( JMM , D7d-JMM-2a ) else
17694: LD_EXP 1
17698: PPUSH
17699: LD_STRING D7d-JMM-2a
17701: PPUSH
17702: CALL_OW 88
17706: GO 17720
// SayRadio ( Powell , D7d-Pow-2 ) ;
17708: LD_EXP 15
17712: PPUSH
17713: LD_STRING D7d-Pow-2
17715: PPUSH
17716: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17720: LD_EXP 15
17724: PPUSH
17725: LD_STRING D7d-Pow-2a
17727: PPUSH
17728: CALL_OW 94
// end ; DialogueOff ;
17732: CALL_OW 7
// FinishMission ;
17736: CALL 17741 0 0
// end ;
17740: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17741: LD_INT 0
17743: PPUSH
17744: PPUSH
17745: PPUSH
17746: PPUSH
// m1 := false ;
17747: LD_ADDR_VAR 0 2
17751: PUSH
17752: LD_INT 0
17754: ST_TO_ADDR
// m2 := false ;
17755: LD_ADDR_VAR 0 3
17759: PUSH
17760: LD_INT 0
17762: ST_TO_ADDR
// m3 := false ;
17763: LD_ADDR_VAR 0 4
17767: PUSH
17768: LD_INT 0
17770: ST_TO_ADDR
// if not westPathUsed then
17771: LD_EXP 42
17775: NOT
17776: IFFALSE 17785
// SetAchievement ( ACH_PATH ) ;
17778: LD_STRING ACH_PATH
17780: PPUSH
17781: CALL_OW 543
// if not rocketBuilded then
17785: LD_EXP 44
17789: NOT
17790: IFFALSE 17806
// begin wait ( 3 ) ;
17792: LD_INT 3
17794: PPUSH
17795: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17799: LD_STRING ACH_ROCKET
17801: PPUSH
17802: CALL_OW 543
// end ; if tick <= 40 40$00 then
17806: LD_OWVAR 1
17810: PUSH
17811: LD_INT 84000
17813: LESSEQUAL
17814: IFFALSE 17830
// begin wait ( 3 ) ;
17816: LD_INT 3
17818: PPUSH
17819: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17823: LD_STRING ACH_ASPEED_12
17825: PPUSH
17826: CALL_OW 543
// end ; if teleportExplored = 1 then
17830: LD_EXP 26
17834: PUSH
17835: LD_INT 1
17837: EQUAL
17838: IFFALSE 17860
// begin m1 := true ;
17840: LD_ADDR_VAR 0 2
17844: PUSH
17845: LD_INT 1
17847: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17848: LD_STRING Teleport
17850: PPUSH
17851: LD_INT 1
17853: PPUSH
17854: CALL_OW 101
// end else
17858: GO 17871
// AddMedal ( Teleport , - 1 ) ;
17860: LD_STRING Teleport
17862: PPUSH
17863: LD_INT 1
17865: NEG
17866: PPUSH
17867: CALL_OW 101
// if sciCounter > 2 then
17871: LD_EXP 28
17875: PUSH
17876: LD_INT 2
17878: GREATER
17879: IFFALSE 17901
// begin m2 := true ;
17881: LD_ADDR_VAR 0 3
17885: PUSH
17886: LD_INT 1
17888: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17889: LD_STRING Materials
17891: PPUSH
17892: LD_INT 1
17894: PPUSH
17895: CALL_OW 101
// end else
17899: GO 17912
// AddMedal ( Materials , - 1 ) ;
17901: LD_STRING Materials
17903: PPUSH
17904: LD_INT 1
17906: NEG
17907: PPUSH
17908: CALL_OW 101
// if sciCounter >= 6 then
17912: LD_EXP 28
17916: PUSH
17917: LD_INT 6
17919: GREATEREQUAL
17920: IFFALSE 17952
// begin m3 := true ;
17922: LD_ADDR_VAR 0 4
17926: PUSH
17927: LD_INT 1
17929: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17930: LD_STRING Scientists
17932: PPUSH
17933: LD_INT 1
17935: PPUSH
17936: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17940: LD_INT 1
17942: PPUSH
17943: LD_STRING 12_SciDed_1
17945: PPUSH
17946: CALL_OW 39
// end else
17950: GO 17973
// begin AddMedal ( Scientists , - 1 ) ;
17952: LD_STRING Scientists
17954: PPUSH
17955: LD_INT 1
17957: NEG
17958: PPUSH
17959: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17963: LD_INT 0
17965: PPUSH
17966: LD_STRING 12_SciDed_1
17968: PPUSH
17969: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17973: LD_EXP 24
17977: PPUSH
17978: LD_STRING 12_MainDepositFake_1
17980: PPUSH
17981: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
17985: LD_VAR 0 2
17989: PUSH
17990: LD_VAR 0 3
17994: AND
17995: PUSH
17996: LD_VAR 0 4
18000: AND
18001: PUSH
18002: LD_OWVAR 67
18006: PUSH
18007: LD_INT 3
18009: GREATEREQUAL
18010: AND
18011: IFFALSE 18023
// SetAchievementEX ( ACH_AMER , 12 ) ;
18013: LD_STRING ACH_AMER
18015: PPUSH
18016: LD_INT 12
18018: PPUSH
18019: CALL_OW 564
// GiveMedals ( MAIN ) ;
18023: LD_STRING MAIN
18025: PPUSH
18026: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18030: LD_INT 22
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 23
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 21
18052: PUSH
18053: LD_INT 1
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 2
18062: PUSH
18063: LD_INT 25
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 25
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 25
18085: PUSH
18086: LD_INT 3
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 25
18095: PUSH
18096: LD_INT 4
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 25
18105: PUSH
18106: LD_INT 5
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 25
18115: PUSH
18116: LD_INT 8
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: PPUSH
18138: CALL_OW 69
18142: PPUSH
18143: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18147: LD_EXP 1
18151: PPUSH
18152: LD_EXP 39
18156: PUSH
18157: LD_STRING JMM
18159: STR
18160: PPUSH
18161: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18165: LD_EXP 7
18169: PPUSH
18170: LD_EXP 39
18174: PUSH
18175: LD_STRING Brown
18177: STR
18178: PPUSH
18179: CALL 12220 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18183: LD_EXP 3
18187: PPUSH
18188: LD_EXP 39
18192: PUSH
18193: LD_STRING Donaldson
18195: STR
18196: PPUSH
18197: CALL 12220 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18201: LD_EXP 4
18205: PPUSH
18206: LD_EXP 39
18210: PUSH
18211: LD_STRING Bobby
18213: STR
18214: PPUSH
18215: CALL 12220 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18219: LD_EXP 5
18223: PPUSH
18224: LD_EXP 39
18228: PUSH
18229: LD_STRING Cyrus
18231: STR
18232: PPUSH
18233: CALL 12220 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18237: LD_EXP 2
18241: PPUSH
18242: LD_EXP 39
18246: PUSH
18247: LD_STRING Lisa
18249: STR
18250: PPUSH
18251: CALL 12220 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18255: LD_EXP 12
18259: PPUSH
18260: LD_EXP 39
18264: PUSH
18265: LD_STRING Frank
18267: STR
18268: PPUSH
18269: CALL 12220 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18273: LD_EXP 13
18277: PPUSH
18278: LD_EXP 39
18282: PUSH
18283: LD_STRING Kikuchi
18285: STR
18286: PPUSH
18287: CALL 12220 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18291: LD_EXP 9
18295: PPUSH
18296: LD_EXP 39
18300: PUSH
18301: LD_STRING Houten
18303: STR
18304: PPUSH
18305: CALL 12220 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18309: LD_EXP 11
18313: PPUSH
18314: LD_EXP 39
18318: PUSH
18319: LD_STRING Gary
18321: STR
18322: PPUSH
18323: CALL 12220 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18327: LD_EXP 10
18331: PPUSH
18332: LD_EXP 39
18336: PUSH
18337: LD_STRING Cornell
18339: STR
18340: PPUSH
18341: CALL 12220 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18345: LD_EXP 6
18349: PPUSH
18350: LD_EXP 39
18354: PUSH
18355: LD_STRING Denis
18357: STR
18358: PPUSH
18359: CALL 12220 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18363: LD_EXP 8
18367: PPUSH
18368: LD_EXP 39
18372: PUSH
18373: LD_STRING Gladstone
18375: STR
18376: PPUSH
18377: CALL 12220 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18381: LD_INT 22
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 23
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 21
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: LD_INT 25
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 25
18426: PUSH
18427: LD_INT 2
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 25
18436: PUSH
18437: LD_INT 3
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 25
18446: PUSH
18447: LD_INT 4
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 25
18456: PUSH
18457: LD_INT 5
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 25
18466: PUSH
18467: LD_INT 8
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: PUSH
18494: LD_EXP 1
18498: PUSH
18499: LD_EXP 7
18503: PUSH
18504: LD_EXP 3
18508: PUSH
18509: LD_EXP 4
18513: PUSH
18514: LD_EXP 5
18518: PUSH
18519: LD_EXP 2
18523: PUSH
18524: LD_EXP 12
18528: PUSH
18529: LD_EXP 8
18533: PUSH
18534: LD_EXP 13
18538: PUSH
18539: LD_EXP 6
18543: PUSH
18544: LD_EXP 9
18548: PUSH
18549: LD_EXP 11
18553: PUSH
18554: LD_EXP 10
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: DIFF
18574: PPUSH
18575: LD_STRING 12_other_survivors
18577: PPUSH
18578: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18582: LD_INT 22
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 23
18594: PUSH
18595: LD_INT 2
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 21
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: LD_INT 25
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 25
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 25
18637: PUSH
18638: LD_INT 3
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 25
18647: PUSH
18648: LD_INT 4
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 25
18657: PUSH
18658: LD_INT 5
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 25
18667: PUSH
18668: LD_INT 8
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: PPUSH
18690: CALL_OW 69
18694: PPUSH
18695: LD_STRING 12_kurt_squad
18697: PPUSH
18698: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18702: LD_EXP 14
18706: PPUSH
18707: LD_STRING 12_others
18709: PPUSH
18710: CALL_OW 38
// YouWin ;
18714: CALL_OW 103
// end ; end_of_file
18718: LD_VAR 0 1
18722: RET
// every 0 0$01 trigger ruAI do
18723: LD_EXP 34
18727: IFFALSE 19037
18729: GO 18731
18731: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18732: LD_INT 280
18734: PPUSH
18735: CALL_OW 67
// if cratesSpawned < 12 then
18739: LD_EXP 38
18743: PUSH
18744: LD_INT 12
18746: LESS
18747: IFFALSE 18799
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18749: LD_INT 105
18751: PPUSH
18752: LD_INT 350
18754: PPUSH
18755: CALL_OW 12
18759: PPUSH
18760: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18764: LD_INT 3
18766: PPUSH
18767: LD_INT 5
18769: PPUSH
18770: CALL_OW 12
18774: PPUSH
18775: LD_INT 21
18777: PPUSH
18778: LD_INT 1
18780: PPUSH
18781: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18785: LD_ADDR_EXP 38
18789: PUSH
18790: LD_EXP 38
18794: PUSH
18795: LD_INT 1
18797: PLUS
18798: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18799: LD_EXP 38
18803: PUSH
18804: LD_INT 12
18806: GREATEREQUAL
18807: PUSH
18808: LD_EXP 38
18812: PUSH
18813: LD_INT 32
18815: LESS
18816: AND
18817: IFFALSE 18869
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18819: LD_INT 420
18821: PPUSH
18822: LD_INT 700
18824: PPUSH
18825: CALL_OW 12
18829: PPUSH
18830: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18834: LD_INT 3
18836: PPUSH
18837: LD_INT 5
18839: PPUSH
18840: CALL_OW 12
18844: PPUSH
18845: LD_INT 21
18847: PPUSH
18848: LD_INT 1
18850: PPUSH
18851: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18855: LD_ADDR_EXP 38
18859: PUSH
18860: LD_EXP 38
18864: PUSH
18865: LD_INT 1
18867: PLUS
18868: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18869: LD_EXP 38
18873: PUSH
18874: LD_INT 32
18876: GREATEREQUAL
18877: IFFALSE 18951
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18879: LD_INT 21
18881: PPUSH
18882: CALL_OW 435
18886: PUSH
18887: LD_INT 14
18889: LESS
18890: IFFALSE 18901
// wait ( 0 0$10 ) else
18892: LD_INT 350
18894: PPUSH
18895: CALL_OW 67
18899: GO 18916
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18901: LD_INT 1750
18903: PPUSH
18904: LD_INT 3150
18906: PPUSH
18907: CALL_OW 12
18911: PPUSH
18912: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18916: LD_INT 2
18918: PPUSH
18919: LD_INT 5
18921: PPUSH
18922: CALL_OW 12
18926: PPUSH
18927: LD_INT 21
18929: PPUSH
18930: LD_INT 1
18932: PPUSH
18933: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18937: LD_ADDR_EXP 38
18941: PUSH
18942: LD_EXP 38
18946: PUSH
18947: LD_INT 1
18949: PLUS
18950: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18951: LD_EXP 38
18955: PUSH
18956: LD_INT 110
18958: GREATEREQUAL
18959: IFFALSE 19033
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18961: LD_INT 21
18963: PPUSH
18964: CALL_OW 435
18968: PUSH
18969: LD_INT 14
18971: LESS
18972: IFFALSE 18983
// wait ( 0 0$20 ) else
18974: LD_INT 700
18976: PPUSH
18977: CALL_OW 67
18981: GO 18998
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18983: LD_INT 2450
18985: PPUSH
18986: LD_INT 3850
18988: PPUSH
18989: CALL_OW 12
18993: PPUSH
18994: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
18998: LD_INT 1
19000: PPUSH
19001: LD_INT 5
19003: PPUSH
19004: CALL_OW 12
19008: PPUSH
19009: LD_INT 21
19011: PPUSH
19012: LD_INT 1
19014: PPUSH
19015: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19019: LD_ADDR_EXP 38
19023: PUSH
19024: LD_EXP 38
19028: PUSH
19029: LD_INT 1
19031: PLUS
19032: ST_TO_ADDR
// end ; until false ;
19033: LD_INT 0
19035: IFFALSE 18732
// end ; end_of_file end_of_file
19037: END
// export globalGameSaveCounter ; every 0 0$1 do
19038: GO 19040
19040: DISABLE
// begin enable ;
19041: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19042: LD_STRING updateTimer(
19044: PUSH
19045: LD_OWVAR 1
19049: STR
19050: PUSH
19051: LD_STRING );
19053: STR
19054: PPUSH
19055: CALL_OW 559
// end ;
19059: END
// every 0 0$1 do
19060: GO 19062
19062: DISABLE
// begin globalGameSaveCounter := 0 ;
19063: LD_ADDR_EXP 45
19067: PUSH
19068: LD_INT 0
19070: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19071: LD_STRING setGameSaveCounter(0)
19073: PPUSH
19074: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19078: LD_STRING initStreamRollete();
19080: PPUSH
19081: CALL_OW 559
// InitStreamMode ;
19085: CALL 20411 0 0
// DefineStreamItems ( false ) ;
19089: LD_INT 0
19091: PPUSH
19092: CALL 20875 0 1
// end ;
19096: END
// export function SOS_MapStart ( ) ; begin
19097: LD_INT 0
19099: PPUSH
// if streamModeActive then
19100: LD_EXP 46
19104: IFFALSE 19113
// DefineStreamItems ( true ) ;
19106: LD_INT 1
19108: PPUSH
19109: CALL 20875 0 1
// UpdateLuaVariables ( ) ;
19113: CALL 19130 0 0
// UpdateFactoryWaypoints ( ) ;
19117: CALL 33744 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19121: CALL 34001 0 0
// end ;
19125: LD_VAR 0 1
19129: RET
// function UpdateLuaVariables ( ) ; begin
19130: LD_INT 0
19132: PPUSH
// if globalGameSaveCounter then
19133: LD_EXP 45
19137: IFFALSE 19171
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19139: LD_ADDR_EXP 45
19143: PUSH
19144: LD_EXP 45
19148: PPUSH
19149: CALL 78631 0 1
19153: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19154: LD_STRING setGameSaveCounter(
19156: PUSH
19157: LD_EXP 45
19161: STR
19162: PUSH
19163: LD_STRING )
19165: STR
19166: PPUSH
19167: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19171: LD_STRING setGameDifficulty(
19173: PUSH
19174: LD_OWVAR 67
19178: STR
19179: PUSH
19180: LD_STRING )
19182: STR
19183: PPUSH
19184: CALL_OW 559
// end ;
19188: LD_VAR 0 1
19192: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19193: LD_INT 0
19195: PPUSH
// if p2 = stream_mode then
19196: LD_VAR 0 2
19200: PUSH
19201: LD_INT 100
19203: EQUAL
19204: IFFALSE 20207
// begin if not StreamModeActive then
19206: LD_EXP 46
19210: NOT
19211: IFFALSE 19221
// StreamModeActive := true ;
19213: LD_ADDR_EXP 46
19217: PUSH
19218: LD_INT 1
19220: ST_TO_ADDR
// if p3 = 0 then
19221: LD_VAR 0 3
19225: PUSH
19226: LD_INT 0
19228: EQUAL
19229: IFFALSE 19235
// InitStreamMode ;
19231: CALL 20411 0 0
// if p3 = 1 then
19235: LD_VAR 0 3
19239: PUSH
19240: LD_INT 1
19242: EQUAL
19243: IFFALSE 19253
// sRocket := true ;
19245: LD_ADDR_EXP 51
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// if p3 = 2 then
19253: LD_VAR 0 3
19257: PUSH
19258: LD_INT 2
19260: EQUAL
19261: IFFALSE 19271
// sSpeed := true ;
19263: LD_ADDR_EXP 50
19267: PUSH
19268: LD_INT 1
19270: ST_TO_ADDR
// if p3 = 3 then
19271: LD_VAR 0 3
19275: PUSH
19276: LD_INT 3
19278: EQUAL
19279: IFFALSE 19289
// sEngine := true ;
19281: LD_ADDR_EXP 52
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 4 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 4
19296: EQUAL
19297: IFFALSE 19307
// sSpec := true ;
19299: LD_ADDR_EXP 49
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// if p3 = 5 then
19307: LD_VAR 0 3
19311: PUSH
19312: LD_INT 5
19314: EQUAL
19315: IFFALSE 19325
// sLevel := true ;
19317: LD_ADDR_EXP 53
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if p3 = 6 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 6
19332: EQUAL
19333: IFFALSE 19343
// sArmoury := true ;
19335: LD_ADDR_EXP 54
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// if p3 = 7 then
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 7
19350: EQUAL
19351: IFFALSE 19361
// sRadar := true ;
19353: LD_ADDR_EXP 55
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// if p3 = 8 then
19361: LD_VAR 0 3
19365: PUSH
19366: LD_INT 8
19368: EQUAL
19369: IFFALSE 19379
// sBunker := true ;
19371: LD_ADDR_EXP 56
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// if p3 = 9 then
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 9
19386: EQUAL
19387: IFFALSE 19397
// sHack := true ;
19389: LD_ADDR_EXP 57
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// if p3 = 10 then
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 10
19404: EQUAL
19405: IFFALSE 19415
// sFire := true ;
19407: LD_ADDR_EXP 58
19411: PUSH
19412: LD_INT 1
19414: ST_TO_ADDR
// if p3 = 11 then
19415: LD_VAR 0 3
19419: PUSH
19420: LD_INT 11
19422: EQUAL
19423: IFFALSE 19433
// sRefresh := true ;
19425: LD_ADDR_EXP 59
19429: PUSH
19430: LD_INT 1
19432: ST_TO_ADDR
// if p3 = 12 then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 12
19440: EQUAL
19441: IFFALSE 19451
// sExp := true ;
19443: LD_ADDR_EXP 60
19447: PUSH
19448: LD_INT 1
19450: ST_TO_ADDR
// if p3 = 13 then
19451: LD_VAR 0 3
19455: PUSH
19456: LD_INT 13
19458: EQUAL
19459: IFFALSE 19469
// sDepot := true ;
19461: LD_ADDR_EXP 61
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// if p3 = 14 then
19469: LD_VAR 0 3
19473: PUSH
19474: LD_INT 14
19476: EQUAL
19477: IFFALSE 19487
// sFlag := true ;
19479: LD_ADDR_EXP 62
19483: PUSH
19484: LD_INT 1
19486: ST_TO_ADDR
// if p3 = 15 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 15
19494: EQUAL
19495: IFFALSE 19505
// sKamikadze := true ;
19497: LD_ADDR_EXP 70
19501: PUSH
19502: LD_INT 1
19504: ST_TO_ADDR
// if p3 = 16 then
19505: LD_VAR 0 3
19509: PUSH
19510: LD_INT 16
19512: EQUAL
19513: IFFALSE 19523
// sTroll := true ;
19515: LD_ADDR_EXP 71
19519: PUSH
19520: LD_INT 1
19522: ST_TO_ADDR
// if p3 = 17 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 17
19530: EQUAL
19531: IFFALSE 19541
// sSlow := true ;
19533: LD_ADDR_EXP 72
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 18 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 18
19548: EQUAL
19549: IFFALSE 19559
// sLack := true ;
19551: LD_ADDR_EXP 73
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 19 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 19
19566: EQUAL
19567: IFFALSE 19577
// sTank := true ;
19569: LD_ADDR_EXP 75
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 20 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 20
19584: EQUAL
19585: IFFALSE 19595
// sRemote := true ;
19587: LD_ADDR_EXP 76
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 21 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 21
19602: EQUAL
19603: IFFALSE 19613
// sPowell := true ;
19605: LD_ADDR_EXP 77
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 22 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 22
19620: EQUAL
19621: IFFALSE 19631
// sTeleport := true ;
19623: LD_ADDR_EXP 80
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 23 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 23
19638: EQUAL
19639: IFFALSE 19649
// sOilTower := true ;
19641: LD_ADDR_EXP 82
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// if p3 = 24 then
19649: LD_VAR 0 3
19653: PUSH
19654: LD_INT 24
19656: EQUAL
19657: IFFALSE 19667
// sShovel := true ;
19659: LD_ADDR_EXP 83
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// if p3 = 25 then
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 25
19674: EQUAL
19675: IFFALSE 19685
// sSheik := true ;
19677: LD_ADDR_EXP 84
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// if p3 = 26 then
19685: LD_VAR 0 3
19689: PUSH
19690: LD_INT 26
19692: EQUAL
19693: IFFALSE 19703
// sEarthquake := true ;
19695: LD_ADDR_EXP 86
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// if p3 = 27 then
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 27
19710: EQUAL
19711: IFFALSE 19721
// sAI := true ;
19713: LD_ADDR_EXP 87
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// if p3 = 28 then
19721: LD_VAR 0 3
19725: PUSH
19726: LD_INT 28
19728: EQUAL
19729: IFFALSE 19739
// sCargo := true ;
19731: LD_ADDR_EXP 90
19735: PUSH
19736: LD_INT 1
19738: ST_TO_ADDR
// if p3 = 29 then
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 29
19746: EQUAL
19747: IFFALSE 19757
// sDLaser := true ;
19749: LD_ADDR_EXP 91
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// if p3 = 30 then
19757: LD_VAR 0 3
19761: PUSH
19762: LD_INT 30
19764: EQUAL
19765: IFFALSE 19775
// sExchange := true ;
19767: LD_ADDR_EXP 92
19771: PUSH
19772: LD_INT 1
19774: ST_TO_ADDR
// if p3 = 31 then
19775: LD_VAR 0 3
19779: PUSH
19780: LD_INT 31
19782: EQUAL
19783: IFFALSE 19793
// sFac := true ;
19785: LD_ADDR_EXP 93
19789: PUSH
19790: LD_INT 1
19792: ST_TO_ADDR
// if p3 = 32 then
19793: LD_VAR 0 3
19797: PUSH
19798: LD_INT 32
19800: EQUAL
19801: IFFALSE 19811
// sPower := true ;
19803: LD_ADDR_EXP 94
19807: PUSH
19808: LD_INT 1
19810: ST_TO_ADDR
// if p3 = 33 then
19811: LD_VAR 0 3
19815: PUSH
19816: LD_INT 33
19818: EQUAL
19819: IFFALSE 19829
// sRandom := true ;
19821: LD_ADDR_EXP 95
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// if p3 = 34 then
19829: LD_VAR 0 3
19833: PUSH
19834: LD_INT 34
19836: EQUAL
19837: IFFALSE 19847
// sShield := true ;
19839: LD_ADDR_EXP 96
19843: PUSH
19844: LD_INT 1
19846: ST_TO_ADDR
// if p3 = 35 then
19847: LD_VAR 0 3
19851: PUSH
19852: LD_INT 35
19854: EQUAL
19855: IFFALSE 19865
// sTime := true ;
19857: LD_ADDR_EXP 97
19861: PUSH
19862: LD_INT 1
19864: ST_TO_ADDR
// if p3 = 36 then
19865: LD_VAR 0 3
19869: PUSH
19870: LD_INT 36
19872: EQUAL
19873: IFFALSE 19883
// sTools := true ;
19875: LD_ADDR_EXP 98
19879: PUSH
19880: LD_INT 1
19882: ST_TO_ADDR
// if p3 = 101 then
19883: LD_VAR 0 3
19887: PUSH
19888: LD_INT 101
19890: EQUAL
19891: IFFALSE 19901
// sSold := true ;
19893: LD_ADDR_EXP 63
19897: PUSH
19898: LD_INT 1
19900: ST_TO_ADDR
// if p3 = 102 then
19901: LD_VAR 0 3
19905: PUSH
19906: LD_INT 102
19908: EQUAL
19909: IFFALSE 19919
// sDiff := true ;
19911: LD_ADDR_EXP 64
19915: PUSH
19916: LD_INT 1
19918: ST_TO_ADDR
// if p3 = 103 then
19919: LD_VAR 0 3
19923: PUSH
19924: LD_INT 103
19926: EQUAL
19927: IFFALSE 19937
// sFog := true ;
19929: LD_ADDR_EXP 67
19933: PUSH
19934: LD_INT 1
19936: ST_TO_ADDR
// if p3 = 104 then
19937: LD_VAR 0 3
19941: PUSH
19942: LD_INT 104
19944: EQUAL
19945: IFFALSE 19955
// sReset := true ;
19947: LD_ADDR_EXP 68
19951: PUSH
19952: LD_INT 1
19954: ST_TO_ADDR
// if p3 = 105 then
19955: LD_VAR 0 3
19959: PUSH
19960: LD_INT 105
19962: EQUAL
19963: IFFALSE 19973
// sSun := true ;
19965: LD_ADDR_EXP 69
19969: PUSH
19970: LD_INT 1
19972: ST_TO_ADDR
// if p3 = 106 then
19973: LD_VAR 0 3
19977: PUSH
19978: LD_INT 106
19980: EQUAL
19981: IFFALSE 19991
// sTiger := true ;
19983: LD_ADDR_EXP 65
19987: PUSH
19988: LD_INT 1
19990: ST_TO_ADDR
// if p3 = 107 then
19991: LD_VAR 0 3
19995: PUSH
19996: LD_INT 107
19998: EQUAL
19999: IFFALSE 20009
// sBomb := true ;
20001: LD_ADDR_EXP 66
20005: PUSH
20006: LD_INT 1
20008: ST_TO_ADDR
// if p3 = 108 then
20009: LD_VAR 0 3
20013: PUSH
20014: LD_INT 108
20016: EQUAL
20017: IFFALSE 20027
// sWound := true ;
20019: LD_ADDR_EXP 74
20023: PUSH
20024: LD_INT 1
20026: ST_TO_ADDR
// if p3 = 109 then
20027: LD_VAR 0 3
20031: PUSH
20032: LD_INT 109
20034: EQUAL
20035: IFFALSE 20045
// sBetray := true ;
20037: LD_ADDR_EXP 78
20041: PUSH
20042: LD_INT 1
20044: ST_TO_ADDR
// if p3 = 110 then
20045: LD_VAR 0 3
20049: PUSH
20050: LD_INT 110
20052: EQUAL
20053: IFFALSE 20063
// sContamin := true ;
20055: LD_ADDR_EXP 79
20059: PUSH
20060: LD_INT 1
20062: ST_TO_ADDR
// if p3 = 111 then
20063: LD_VAR 0 3
20067: PUSH
20068: LD_INT 111
20070: EQUAL
20071: IFFALSE 20081
// sOil := true ;
20073: LD_ADDR_EXP 81
20077: PUSH
20078: LD_INT 1
20080: ST_TO_ADDR
// if p3 = 112 then
20081: LD_VAR 0 3
20085: PUSH
20086: LD_INT 112
20088: EQUAL
20089: IFFALSE 20099
// sStu := true ;
20091: LD_ADDR_EXP 85
20095: PUSH
20096: LD_INT 1
20098: ST_TO_ADDR
// if p3 = 113 then
20099: LD_VAR 0 3
20103: PUSH
20104: LD_INT 113
20106: EQUAL
20107: IFFALSE 20117
// sBazooka := true ;
20109: LD_ADDR_EXP 88
20113: PUSH
20114: LD_INT 1
20116: ST_TO_ADDR
// if p3 = 114 then
20117: LD_VAR 0 3
20121: PUSH
20122: LD_INT 114
20124: EQUAL
20125: IFFALSE 20135
// sMortar := true ;
20127: LD_ADDR_EXP 89
20131: PUSH
20132: LD_INT 1
20134: ST_TO_ADDR
// if p3 = 115 then
20135: LD_VAR 0 3
20139: PUSH
20140: LD_INT 115
20142: EQUAL
20143: IFFALSE 20153
// sRanger := true ;
20145: LD_ADDR_EXP 99
20149: PUSH
20150: LD_INT 1
20152: ST_TO_ADDR
// if p3 = 116 then
20153: LD_VAR 0 3
20157: PUSH
20158: LD_INT 116
20160: EQUAL
20161: IFFALSE 20171
// sComputer := true ;
20163: LD_ADDR_EXP 100
20167: PUSH
20168: LD_INT 1
20170: ST_TO_ADDR
// if p3 = 117 then
20171: LD_VAR 0 3
20175: PUSH
20176: LD_INT 117
20178: EQUAL
20179: IFFALSE 20189
// s30 := true ;
20181: LD_ADDR_EXP 101
20185: PUSH
20186: LD_INT 1
20188: ST_TO_ADDR
// if p3 = 118 then
20189: LD_VAR 0 3
20193: PUSH
20194: LD_INT 118
20196: EQUAL
20197: IFFALSE 20207
// s60 := true ;
20199: LD_ADDR_EXP 102
20203: PUSH
20204: LD_INT 1
20206: ST_TO_ADDR
// end ; if p2 = hack_mode then
20207: LD_VAR 0 2
20211: PUSH
20212: LD_INT 101
20214: EQUAL
20215: IFFALSE 20343
// begin case p3 of 1 :
20217: LD_VAR 0 3
20221: PUSH
20222: LD_INT 1
20224: DOUBLE
20225: EQUAL
20226: IFTRUE 20230
20228: GO 20237
20230: POP
// hHackUnlimitedResources ; 2 :
20231: CALL 32490 0 0
20235: GO 20343
20237: LD_INT 2
20239: DOUBLE
20240: EQUAL
20241: IFTRUE 20245
20243: GO 20252
20245: POP
// hHackSetLevel10 ; 3 :
20246: CALL 32623 0 0
20250: GO 20343
20252: LD_INT 3
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20267
20260: POP
// hHackSetLevel10YourUnits ; 4 :
20261: CALL 32708 0 0
20265: GO 20343
20267: LD_INT 4
20269: DOUBLE
20270: EQUAL
20271: IFTRUE 20275
20273: GO 20282
20275: POP
// hHackInvincible ; 5 :
20276: CALL 33156 0 0
20280: GO 20343
20282: LD_INT 5
20284: DOUBLE
20285: EQUAL
20286: IFTRUE 20290
20288: GO 20297
20290: POP
// hHackInvisible ; 6 :
20291: CALL 33267 0 0
20295: GO 20343
20297: LD_INT 6
20299: DOUBLE
20300: EQUAL
20301: IFTRUE 20305
20303: GO 20312
20305: POP
// hHackChangeYourSide ; 7 :
20306: CALL 33324 0 0
20310: GO 20343
20312: LD_INT 7
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20327
20320: POP
// hHackChangeUnitSide ; 8 :
20321: CALL 33366 0 0
20325: GO 20343
20327: LD_INT 8
20329: DOUBLE
20330: EQUAL
20331: IFTRUE 20335
20333: GO 20342
20335: POP
// hHackFog ; end ;
20336: CALL 33467 0 0
20340: GO 20343
20342: POP
// end ; if p2 = game_save_mode then
20343: LD_VAR 0 2
20347: PUSH
20348: LD_INT 102
20350: EQUAL
20351: IFFALSE 20406
// begin if p3 = 1 then
20353: LD_VAR 0 3
20357: PUSH
20358: LD_INT 1
20360: EQUAL
20361: IFFALSE 20373
// globalGameSaveCounter := p4 ;
20363: LD_ADDR_EXP 45
20367: PUSH
20368: LD_VAR 0 4
20372: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20373: LD_VAR 0 3
20377: PUSH
20378: LD_INT 2
20380: EQUAL
20381: PUSH
20382: LD_EXP 45
20386: AND
20387: IFFALSE 20406
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20389: LD_STRING setGameSaveCounter(
20391: PUSH
20392: LD_EXP 45
20396: STR
20397: PUSH
20398: LD_STRING )
20400: STR
20401: PPUSH
20402: CALL_OW 559
// end ; end ;
20406: LD_VAR 0 7
20410: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20411: LD_INT 0
20413: PPUSH
// streamModeActive := false ;
20414: LD_ADDR_EXP 46
20418: PUSH
20419: LD_INT 0
20421: ST_TO_ADDR
// normalCounter := 36 ;
20422: LD_ADDR_EXP 47
20426: PUSH
20427: LD_INT 36
20429: ST_TO_ADDR
// hardcoreCounter := 18 ;
20430: LD_ADDR_EXP 48
20434: PUSH
20435: LD_INT 18
20437: ST_TO_ADDR
// sRocket := false ;
20438: LD_ADDR_EXP 51
20442: PUSH
20443: LD_INT 0
20445: ST_TO_ADDR
// sSpeed := false ;
20446: LD_ADDR_EXP 50
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
// sEngine := false ;
20454: LD_ADDR_EXP 52
20458: PUSH
20459: LD_INT 0
20461: ST_TO_ADDR
// sSpec := false ;
20462: LD_ADDR_EXP 49
20466: PUSH
20467: LD_INT 0
20469: ST_TO_ADDR
// sLevel := false ;
20470: LD_ADDR_EXP 53
20474: PUSH
20475: LD_INT 0
20477: ST_TO_ADDR
// sArmoury := false ;
20478: LD_ADDR_EXP 54
20482: PUSH
20483: LD_INT 0
20485: ST_TO_ADDR
// sRadar := false ;
20486: LD_ADDR_EXP 55
20490: PUSH
20491: LD_INT 0
20493: ST_TO_ADDR
// sBunker := false ;
20494: LD_ADDR_EXP 56
20498: PUSH
20499: LD_INT 0
20501: ST_TO_ADDR
// sHack := false ;
20502: LD_ADDR_EXP 57
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// sFire := false ;
20510: LD_ADDR_EXP 58
20514: PUSH
20515: LD_INT 0
20517: ST_TO_ADDR
// sRefresh := false ;
20518: LD_ADDR_EXP 59
20522: PUSH
20523: LD_INT 0
20525: ST_TO_ADDR
// sExp := false ;
20526: LD_ADDR_EXP 60
20530: PUSH
20531: LD_INT 0
20533: ST_TO_ADDR
// sDepot := false ;
20534: LD_ADDR_EXP 61
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
// sFlag := false ;
20542: LD_ADDR_EXP 62
20546: PUSH
20547: LD_INT 0
20549: ST_TO_ADDR
// sKamikadze := false ;
20550: LD_ADDR_EXP 70
20554: PUSH
20555: LD_INT 0
20557: ST_TO_ADDR
// sTroll := false ;
20558: LD_ADDR_EXP 71
20562: PUSH
20563: LD_INT 0
20565: ST_TO_ADDR
// sSlow := false ;
20566: LD_ADDR_EXP 72
20570: PUSH
20571: LD_INT 0
20573: ST_TO_ADDR
// sLack := false ;
20574: LD_ADDR_EXP 73
20578: PUSH
20579: LD_INT 0
20581: ST_TO_ADDR
// sTank := false ;
20582: LD_ADDR_EXP 75
20586: PUSH
20587: LD_INT 0
20589: ST_TO_ADDR
// sRemote := false ;
20590: LD_ADDR_EXP 76
20594: PUSH
20595: LD_INT 0
20597: ST_TO_ADDR
// sPowell := false ;
20598: LD_ADDR_EXP 77
20602: PUSH
20603: LD_INT 0
20605: ST_TO_ADDR
// sTeleport := false ;
20606: LD_ADDR_EXP 80
20610: PUSH
20611: LD_INT 0
20613: ST_TO_ADDR
// sOilTower := false ;
20614: LD_ADDR_EXP 82
20618: PUSH
20619: LD_INT 0
20621: ST_TO_ADDR
// sShovel := false ;
20622: LD_ADDR_EXP 83
20626: PUSH
20627: LD_INT 0
20629: ST_TO_ADDR
// sSheik := false ;
20630: LD_ADDR_EXP 84
20634: PUSH
20635: LD_INT 0
20637: ST_TO_ADDR
// sEarthquake := false ;
20638: LD_ADDR_EXP 86
20642: PUSH
20643: LD_INT 0
20645: ST_TO_ADDR
// sAI := false ;
20646: LD_ADDR_EXP 87
20650: PUSH
20651: LD_INT 0
20653: ST_TO_ADDR
// sCargo := false ;
20654: LD_ADDR_EXP 90
20658: PUSH
20659: LD_INT 0
20661: ST_TO_ADDR
// sDLaser := false ;
20662: LD_ADDR_EXP 91
20666: PUSH
20667: LD_INT 0
20669: ST_TO_ADDR
// sExchange := false ;
20670: LD_ADDR_EXP 92
20674: PUSH
20675: LD_INT 0
20677: ST_TO_ADDR
// sFac := false ;
20678: LD_ADDR_EXP 93
20682: PUSH
20683: LD_INT 0
20685: ST_TO_ADDR
// sPower := false ;
20686: LD_ADDR_EXP 94
20690: PUSH
20691: LD_INT 0
20693: ST_TO_ADDR
// sRandom := false ;
20694: LD_ADDR_EXP 95
20698: PUSH
20699: LD_INT 0
20701: ST_TO_ADDR
// sShield := false ;
20702: LD_ADDR_EXP 96
20706: PUSH
20707: LD_INT 0
20709: ST_TO_ADDR
// sTime := false ;
20710: LD_ADDR_EXP 97
20714: PUSH
20715: LD_INT 0
20717: ST_TO_ADDR
// sTools := false ;
20718: LD_ADDR_EXP 98
20722: PUSH
20723: LD_INT 0
20725: ST_TO_ADDR
// sSold := false ;
20726: LD_ADDR_EXP 63
20730: PUSH
20731: LD_INT 0
20733: ST_TO_ADDR
// sDiff := false ;
20734: LD_ADDR_EXP 64
20738: PUSH
20739: LD_INT 0
20741: ST_TO_ADDR
// sFog := false ;
20742: LD_ADDR_EXP 67
20746: PUSH
20747: LD_INT 0
20749: ST_TO_ADDR
// sReset := false ;
20750: LD_ADDR_EXP 68
20754: PUSH
20755: LD_INT 0
20757: ST_TO_ADDR
// sSun := false ;
20758: LD_ADDR_EXP 69
20762: PUSH
20763: LD_INT 0
20765: ST_TO_ADDR
// sTiger := false ;
20766: LD_ADDR_EXP 65
20770: PUSH
20771: LD_INT 0
20773: ST_TO_ADDR
// sBomb := false ;
20774: LD_ADDR_EXP 66
20778: PUSH
20779: LD_INT 0
20781: ST_TO_ADDR
// sWound := false ;
20782: LD_ADDR_EXP 74
20786: PUSH
20787: LD_INT 0
20789: ST_TO_ADDR
// sBetray := false ;
20790: LD_ADDR_EXP 78
20794: PUSH
20795: LD_INT 0
20797: ST_TO_ADDR
// sContamin := false ;
20798: LD_ADDR_EXP 79
20802: PUSH
20803: LD_INT 0
20805: ST_TO_ADDR
// sOil := false ;
20806: LD_ADDR_EXP 81
20810: PUSH
20811: LD_INT 0
20813: ST_TO_ADDR
// sStu := false ;
20814: LD_ADDR_EXP 85
20818: PUSH
20819: LD_INT 0
20821: ST_TO_ADDR
// sBazooka := false ;
20822: LD_ADDR_EXP 88
20826: PUSH
20827: LD_INT 0
20829: ST_TO_ADDR
// sMortar := false ;
20830: LD_ADDR_EXP 89
20834: PUSH
20835: LD_INT 0
20837: ST_TO_ADDR
// sRanger := false ;
20838: LD_ADDR_EXP 99
20842: PUSH
20843: LD_INT 0
20845: ST_TO_ADDR
// sComputer := false ;
20846: LD_ADDR_EXP 100
20850: PUSH
20851: LD_INT 0
20853: ST_TO_ADDR
// s30 := false ;
20854: LD_ADDR_EXP 101
20858: PUSH
20859: LD_INT 0
20861: ST_TO_ADDR
// s60 := false ;
20862: LD_ADDR_EXP 102
20866: PUSH
20867: LD_INT 0
20869: ST_TO_ADDR
// end ;
20870: LD_VAR 0 1
20874: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20875: LD_INT 0
20877: PPUSH
20878: PPUSH
20879: PPUSH
20880: PPUSH
20881: PPUSH
20882: PPUSH
20883: PPUSH
// result := [ ] ;
20884: LD_ADDR_VAR 0 2
20888: PUSH
20889: EMPTY
20890: ST_TO_ADDR
// if campaign_id = 1 then
20891: LD_OWVAR 69
20895: PUSH
20896: LD_INT 1
20898: EQUAL
20899: IFFALSE 24065
// begin case mission_number of 1 :
20901: LD_OWVAR 70
20905: PUSH
20906: LD_INT 1
20908: DOUBLE
20909: EQUAL
20910: IFTRUE 20914
20912: GO 20990
20914: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20915: LD_ADDR_VAR 0 2
20919: PUSH
20920: LD_INT 2
20922: PUSH
20923: LD_INT 4
20925: PUSH
20926: LD_INT 11
20928: PUSH
20929: LD_INT 12
20931: PUSH
20932: LD_INT 15
20934: PUSH
20935: LD_INT 16
20937: PUSH
20938: LD_INT 22
20940: PUSH
20941: LD_INT 23
20943: PUSH
20944: LD_INT 26
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 101
20960: PUSH
20961: LD_INT 102
20963: PUSH
20964: LD_INT 106
20966: PUSH
20967: LD_INT 116
20969: PUSH
20970: LD_INT 117
20972: PUSH
20973: LD_INT 118
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: ST_TO_ADDR
20988: GO 24063
20990: LD_INT 2
20992: DOUBLE
20993: EQUAL
20994: IFTRUE 20998
20996: GO 21082
20998: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20999: LD_ADDR_VAR 0 2
21003: PUSH
21004: LD_INT 2
21006: PUSH
21007: LD_INT 4
21009: PUSH
21010: LD_INT 11
21012: PUSH
21013: LD_INT 12
21015: PUSH
21016: LD_INT 15
21018: PUSH
21019: LD_INT 16
21021: PUSH
21022: LD_INT 22
21024: PUSH
21025: LD_INT 23
21027: PUSH
21028: LD_INT 26
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 101
21044: PUSH
21045: LD_INT 102
21047: PUSH
21048: LD_INT 105
21050: PUSH
21051: LD_INT 106
21053: PUSH
21054: LD_INT 108
21056: PUSH
21057: LD_INT 116
21059: PUSH
21060: LD_INT 117
21062: PUSH
21063: LD_INT 118
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: ST_TO_ADDR
21080: GO 24063
21082: LD_INT 3
21084: DOUBLE
21085: EQUAL
21086: IFTRUE 21090
21088: GO 21178
21090: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21091: LD_ADDR_VAR 0 2
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: LD_INT 4
21101: PUSH
21102: LD_INT 5
21104: PUSH
21105: LD_INT 11
21107: PUSH
21108: LD_INT 12
21110: PUSH
21111: LD_INT 15
21113: PUSH
21114: LD_INT 16
21116: PUSH
21117: LD_INT 22
21119: PUSH
21120: LD_INT 26
21122: PUSH
21123: LD_INT 36
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 101
21140: PUSH
21141: LD_INT 102
21143: PUSH
21144: LD_INT 105
21146: PUSH
21147: LD_INT 106
21149: PUSH
21150: LD_INT 108
21152: PUSH
21153: LD_INT 116
21155: PUSH
21156: LD_INT 117
21158: PUSH
21159: LD_INT 118
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: ST_TO_ADDR
21176: GO 24063
21178: LD_INT 4
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21282
21186: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21187: LD_ADDR_VAR 0 2
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: LD_INT 4
21197: PUSH
21198: LD_INT 5
21200: PUSH
21201: LD_INT 8
21203: PUSH
21204: LD_INT 11
21206: PUSH
21207: LD_INT 12
21209: PUSH
21210: LD_INT 15
21212: PUSH
21213: LD_INT 16
21215: PUSH
21216: LD_INT 22
21218: PUSH
21219: LD_INT 23
21221: PUSH
21222: LD_INT 26
21224: PUSH
21225: LD_INT 36
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 101
21244: PUSH
21245: LD_INT 102
21247: PUSH
21248: LD_INT 105
21250: PUSH
21251: LD_INT 106
21253: PUSH
21254: LD_INT 108
21256: PUSH
21257: LD_INT 116
21259: PUSH
21260: LD_INT 117
21262: PUSH
21263: LD_INT 118
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: ST_TO_ADDR
21280: GO 24063
21282: LD_INT 5
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21402
21290: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21291: LD_ADDR_VAR 0 2
21295: PUSH
21296: LD_INT 2
21298: PUSH
21299: LD_INT 4
21301: PUSH
21302: LD_INT 5
21304: PUSH
21305: LD_INT 6
21307: PUSH
21308: LD_INT 8
21310: PUSH
21311: LD_INT 11
21313: PUSH
21314: LD_INT 12
21316: PUSH
21317: LD_INT 15
21319: PUSH
21320: LD_INT 16
21322: PUSH
21323: LD_INT 22
21325: PUSH
21326: LD_INT 23
21328: PUSH
21329: LD_INT 25
21331: PUSH
21332: LD_INT 26
21334: PUSH
21335: LD_INT 36
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 101
21356: PUSH
21357: LD_INT 102
21359: PUSH
21360: LD_INT 105
21362: PUSH
21363: LD_INT 106
21365: PUSH
21366: LD_INT 108
21368: PUSH
21369: LD_INT 109
21371: PUSH
21372: LD_INT 112
21374: PUSH
21375: LD_INT 116
21377: PUSH
21378: LD_INT 117
21380: PUSH
21381: LD_INT 118
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: ST_TO_ADDR
21400: GO 24063
21402: LD_INT 6
21404: DOUBLE
21405: EQUAL
21406: IFTRUE 21410
21408: GO 21542
21410: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21411: LD_ADDR_VAR 0 2
21415: PUSH
21416: LD_INT 2
21418: PUSH
21419: LD_INT 4
21421: PUSH
21422: LD_INT 5
21424: PUSH
21425: LD_INT 6
21427: PUSH
21428: LD_INT 8
21430: PUSH
21431: LD_INT 11
21433: PUSH
21434: LD_INT 12
21436: PUSH
21437: LD_INT 15
21439: PUSH
21440: LD_INT 16
21442: PUSH
21443: LD_INT 20
21445: PUSH
21446: LD_INT 21
21448: PUSH
21449: LD_INT 22
21451: PUSH
21452: LD_INT 23
21454: PUSH
21455: LD_INT 25
21457: PUSH
21458: LD_INT 26
21460: PUSH
21461: LD_INT 30
21463: PUSH
21464: LD_INT 31
21466: PUSH
21467: LD_INT 32
21469: PUSH
21470: LD_INT 36
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 101
21496: PUSH
21497: LD_INT 102
21499: PUSH
21500: LD_INT 105
21502: PUSH
21503: LD_INT 106
21505: PUSH
21506: LD_INT 108
21508: PUSH
21509: LD_INT 109
21511: PUSH
21512: LD_INT 112
21514: PUSH
21515: LD_INT 116
21517: PUSH
21518: LD_INT 117
21520: PUSH
21521: LD_INT 118
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: ST_TO_ADDR
21540: GO 24063
21542: LD_INT 7
21544: DOUBLE
21545: EQUAL
21546: IFTRUE 21550
21548: GO 21662
21550: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21551: LD_ADDR_VAR 0 2
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: LD_INT 4
21561: PUSH
21562: LD_INT 5
21564: PUSH
21565: LD_INT 7
21567: PUSH
21568: LD_INT 11
21570: PUSH
21571: LD_INT 12
21573: PUSH
21574: LD_INT 15
21576: PUSH
21577: LD_INT 16
21579: PUSH
21580: LD_INT 20
21582: PUSH
21583: LD_INT 21
21585: PUSH
21586: LD_INT 22
21588: PUSH
21589: LD_INT 23
21591: PUSH
21592: LD_INT 25
21594: PUSH
21595: LD_INT 26
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 101
21616: PUSH
21617: LD_INT 102
21619: PUSH
21620: LD_INT 103
21622: PUSH
21623: LD_INT 105
21625: PUSH
21626: LD_INT 106
21628: PUSH
21629: LD_INT 108
21631: PUSH
21632: LD_INT 112
21634: PUSH
21635: LD_INT 116
21637: PUSH
21638: LD_INT 117
21640: PUSH
21641: LD_INT 118
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: ST_TO_ADDR
21660: GO 24063
21662: LD_INT 8
21664: DOUBLE
21665: EQUAL
21666: IFTRUE 21670
21668: GO 21810
21670: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21671: LD_ADDR_VAR 0 2
21675: PUSH
21676: LD_INT 2
21678: PUSH
21679: LD_INT 4
21681: PUSH
21682: LD_INT 5
21684: PUSH
21685: LD_INT 6
21687: PUSH
21688: LD_INT 7
21690: PUSH
21691: LD_INT 8
21693: PUSH
21694: LD_INT 11
21696: PUSH
21697: LD_INT 12
21699: PUSH
21700: LD_INT 15
21702: PUSH
21703: LD_INT 16
21705: PUSH
21706: LD_INT 20
21708: PUSH
21709: LD_INT 21
21711: PUSH
21712: LD_INT 22
21714: PUSH
21715: LD_INT 23
21717: PUSH
21718: LD_INT 25
21720: PUSH
21721: LD_INT 26
21723: PUSH
21724: LD_INT 30
21726: PUSH
21727: LD_INT 31
21729: PUSH
21730: LD_INT 32
21732: PUSH
21733: LD_INT 36
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 101
21760: PUSH
21761: LD_INT 102
21763: PUSH
21764: LD_INT 103
21766: PUSH
21767: LD_INT 105
21769: PUSH
21770: LD_INT 106
21772: PUSH
21773: LD_INT 108
21775: PUSH
21776: LD_INT 109
21778: PUSH
21779: LD_INT 112
21781: PUSH
21782: LD_INT 116
21784: PUSH
21785: LD_INT 117
21787: PUSH
21788: LD_INT 118
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: ST_TO_ADDR
21808: GO 24063
21810: LD_INT 9
21812: DOUBLE
21813: EQUAL
21814: IFTRUE 21818
21816: GO 21966
21818: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21819: LD_ADDR_VAR 0 2
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: LD_INT 4
21829: PUSH
21830: LD_INT 5
21832: PUSH
21833: LD_INT 6
21835: PUSH
21836: LD_INT 7
21838: PUSH
21839: LD_INT 8
21841: PUSH
21842: LD_INT 11
21844: PUSH
21845: LD_INT 12
21847: PUSH
21848: LD_INT 15
21850: PUSH
21851: LD_INT 16
21853: PUSH
21854: LD_INT 20
21856: PUSH
21857: LD_INT 21
21859: PUSH
21860: LD_INT 22
21862: PUSH
21863: LD_INT 23
21865: PUSH
21866: LD_INT 25
21868: PUSH
21869: LD_INT 26
21871: PUSH
21872: LD_INT 28
21874: PUSH
21875: LD_INT 30
21877: PUSH
21878: LD_INT 31
21880: PUSH
21881: LD_INT 32
21883: PUSH
21884: LD_INT 36
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 101
21912: PUSH
21913: LD_INT 102
21915: PUSH
21916: LD_INT 103
21918: PUSH
21919: LD_INT 105
21921: PUSH
21922: LD_INT 106
21924: PUSH
21925: LD_INT 108
21927: PUSH
21928: LD_INT 109
21930: PUSH
21931: LD_INT 112
21933: PUSH
21934: LD_INT 114
21936: PUSH
21937: LD_INT 116
21939: PUSH
21940: LD_INT 117
21942: PUSH
21943: LD_INT 118
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: ST_TO_ADDR
21964: GO 24063
21966: LD_INT 10
21968: DOUBLE
21969: EQUAL
21970: IFTRUE 21974
21972: GO 22170
21974: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21975: LD_ADDR_VAR 0 2
21979: PUSH
21980: LD_INT 2
21982: PUSH
21983: LD_INT 4
21985: PUSH
21986: LD_INT 5
21988: PUSH
21989: LD_INT 6
21991: PUSH
21992: LD_INT 7
21994: PUSH
21995: LD_INT 8
21997: PUSH
21998: LD_INT 9
22000: PUSH
22001: LD_INT 10
22003: PUSH
22004: LD_INT 11
22006: PUSH
22007: LD_INT 12
22009: PUSH
22010: LD_INT 13
22012: PUSH
22013: LD_INT 14
22015: PUSH
22016: LD_INT 15
22018: PUSH
22019: LD_INT 16
22021: PUSH
22022: LD_INT 17
22024: PUSH
22025: LD_INT 18
22027: PUSH
22028: LD_INT 19
22030: PUSH
22031: LD_INT 20
22033: PUSH
22034: LD_INT 21
22036: PUSH
22037: LD_INT 22
22039: PUSH
22040: LD_INT 23
22042: PUSH
22043: LD_INT 24
22045: PUSH
22046: LD_INT 25
22048: PUSH
22049: LD_INT 26
22051: PUSH
22052: LD_INT 28
22054: PUSH
22055: LD_INT 30
22057: PUSH
22058: LD_INT 31
22060: PUSH
22061: LD_INT 32
22063: PUSH
22064: LD_INT 36
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 101
22100: PUSH
22101: LD_INT 102
22103: PUSH
22104: LD_INT 103
22106: PUSH
22107: LD_INT 104
22109: PUSH
22110: LD_INT 105
22112: PUSH
22113: LD_INT 106
22115: PUSH
22116: LD_INT 107
22118: PUSH
22119: LD_INT 108
22121: PUSH
22122: LD_INT 109
22124: PUSH
22125: LD_INT 110
22127: PUSH
22128: LD_INT 111
22130: PUSH
22131: LD_INT 112
22133: PUSH
22134: LD_INT 114
22136: PUSH
22137: LD_INT 116
22139: PUSH
22140: LD_INT 117
22142: PUSH
22143: LD_INT 118
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: ST_TO_ADDR
22168: GO 24063
22170: LD_INT 11
22172: DOUBLE
22173: EQUAL
22174: IFTRUE 22178
22176: GO 22382
22178: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22179: LD_ADDR_VAR 0 2
22183: PUSH
22184: LD_INT 2
22186: PUSH
22187: LD_INT 3
22189: PUSH
22190: LD_INT 4
22192: PUSH
22193: LD_INT 5
22195: PUSH
22196: LD_INT 6
22198: PUSH
22199: LD_INT 7
22201: PUSH
22202: LD_INT 8
22204: PUSH
22205: LD_INT 9
22207: PUSH
22208: LD_INT 10
22210: PUSH
22211: LD_INT 11
22213: PUSH
22214: LD_INT 12
22216: PUSH
22217: LD_INT 13
22219: PUSH
22220: LD_INT 14
22222: PUSH
22223: LD_INT 15
22225: PUSH
22226: LD_INT 16
22228: PUSH
22229: LD_INT 17
22231: PUSH
22232: LD_INT 18
22234: PUSH
22235: LD_INT 19
22237: PUSH
22238: LD_INT 20
22240: PUSH
22241: LD_INT 21
22243: PUSH
22244: LD_INT 22
22246: PUSH
22247: LD_INT 23
22249: PUSH
22250: LD_INT 24
22252: PUSH
22253: LD_INT 25
22255: PUSH
22256: LD_INT 26
22258: PUSH
22259: LD_INT 28
22261: PUSH
22262: LD_INT 30
22264: PUSH
22265: LD_INT 31
22267: PUSH
22268: LD_INT 32
22270: PUSH
22271: LD_INT 34
22273: PUSH
22274: LD_INT 36
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 101
22312: PUSH
22313: LD_INT 102
22315: PUSH
22316: LD_INT 103
22318: PUSH
22319: LD_INT 104
22321: PUSH
22322: LD_INT 105
22324: PUSH
22325: LD_INT 106
22327: PUSH
22328: LD_INT 107
22330: PUSH
22331: LD_INT 108
22333: PUSH
22334: LD_INT 109
22336: PUSH
22337: LD_INT 110
22339: PUSH
22340: LD_INT 111
22342: PUSH
22343: LD_INT 112
22345: PUSH
22346: LD_INT 114
22348: PUSH
22349: LD_INT 116
22351: PUSH
22352: LD_INT 117
22354: PUSH
22355: LD_INT 118
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: ST_TO_ADDR
22380: GO 24063
22382: LD_INT 12
22384: DOUBLE
22385: EQUAL
22386: IFTRUE 22390
22388: GO 22610
22390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22391: LD_ADDR_VAR 0 2
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: LD_INT 3
22404: PUSH
22405: LD_INT 4
22407: PUSH
22408: LD_INT 5
22410: PUSH
22411: LD_INT 6
22413: PUSH
22414: LD_INT 7
22416: PUSH
22417: LD_INT 8
22419: PUSH
22420: LD_INT 9
22422: PUSH
22423: LD_INT 10
22425: PUSH
22426: LD_INT 11
22428: PUSH
22429: LD_INT 12
22431: PUSH
22432: LD_INT 13
22434: PUSH
22435: LD_INT 14
22437: PUSH
22438: LD_INT 15
22440: PUSH
22441: LD_INT 16
22443: PUSH
22444: LD_INT 17
22446: PUSH
22447: LD_INT 18
22449: PUSH
22450: LD_INT 19
22452: PUSH
22453: LD_INT 20
22455: PUSH
22456: LD_INT 21
22458: PUSH
22459: LD_INT 22
22461: PUSH
22462: LD_INT 23
22464: PUSH
22465: LD_INT 24
22467: PUSH
22468: LD_INT 25
22470: PUSH
22471: LD_INT 26
22473: PUSH
22474: LD_INT 27
22476: PUSH
22477: LD_INT 28
22479: PUSH
22480: LD_INT 30
22482: PUSH
22483: LD_INT 31
22485: PUSH
22486: LD_INT 32
22488: PUSH
22489: LD_INT 33
22491: PUSH
22492: LD_INT 34
22494: PUSH
22495: LD_INT 36
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 101
22536: PUSH
22537: LD_INT 102
22539: PUSH
22540: LD_INT 103
22542: PUSH
22543: LD_INT 104
22545: PUSH
22546: LD_INT 105
22548: PUSH
22549: LD_INT 106
22551: PUSH
22552: LD_INT 107
22554: PUSH
22555: LD_INT 108
22557: PUSH
22558: LD_INT 109
22560: PUSH
22561: LD_INT 110
22563: PUSH
22564: LD_INT 111
22566: PUSH
22567: LD_INT 112
22569: PUSH
22570: LD_INT 113
22572: PUSH
22573: LD_INT 114
22575: PUSH
22576: LD_INT 116
22578: PUSH
22579: LD_INT 117
22581: PUSH
22582: LD_INT 118
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: ST_TO_ADDR
22608: GO 24063
22610: LD_INT 13
22612: DOUBLE
22613: EQUAL
22614: IFTRUE 22618
22616: GO 22826
22618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22619: LD_ADDR_VAR 0 2
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: LD_INT 3
22632: PUSH
22633: LD_INT 4
22635: PUSH
22636: LD_INT 5
22638: PUSH
22639: LD_INT 8
22641: PUSH
22642: LD_INT 9
22644: PUSH
22645: LD_INT 10
22647: PUSH
22648: LD_INT 11
22650: PUSH
22651: LD_INT 12
22653: PUSH
22654: LD_INT 14
22656: PUSH
22657: LD_INT 15
22659: PUSH
22660: LD_INT 16
22662: PUSH
22663: LD_INT 17
22665: PUSH
22666: LD_INT 18
22668: PUSH
22669: LD_INT 19
22671: PUSH
22672: LD_INT 20
22674: PUSH
22675: LD_INT 21
22677: PUSH
22678: LD_INT 22
22680: PUSH
22681: LD_INT 23
22683: PUSH
22684: LD_INT 24
22686: PUSH
22687: LD_INT 25
22689: PUSH
22690: LD_INT 26
22692: PUSH
22693: LD_INT 27
22695: PUSH
22696: LD_INT 28
22698: PUSH
22699: LD_INT 30
22701: PUSH
22702: LD_INT 31
22704: PUSH
22705: LD_INT 32
22707: PUSH
22708: LD_INT 33
22710: PUSH
22711: LD_INT 34
22713: PUSH
22714: LD_INT 36
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 101
22752: PUSH
22753: LD_INT 102
22755: PUSH
22756: LD_INT 103
22758: PUSH
22759: LD_INT 104
22761: PUSH
22762: LD_INT 105
22764: PUSH
22765: LD_INT 106
22767: PUSH
22768: LD_INT 107
22770: PUSH
22771: LD_INT 108
22773: PUSH
22774: LD_INT 109
22776: PUSH
22777: LD_INT 110
22779: PUSH
22780: LD_INT 111
22782: PUSH
22783: LD_INT 112
22785: PUSH
22786: LD_INT 113
22788: PUSH
22789: LD_INT 114
22791: PUSH
22792: LD_INT 116
22794: PUSH
22795: LD_INT 117
22797: PUSH
22798: LD_INT 118
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: ST_TO_ADDR
22824: GO 24063
22826: LD_INT 14
22828: DOUBLE
22829: EQUAL
22830: IFTRUE 22834
22832: GO 23058
22834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22835: LD_ADDR_VAR 0 2
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: LD_INT 3
22848: PUSH
22849: LD_INT 4
22851: PUSH
22852: LD_INT 5
22854: PUSH
22855: LD_INT 6
22857: PUSH
22858: LD_INT 7
22860: PUSH
22861: LD_INT 8
22863: PUSH
22864: LD_INT 9
22866: PUSH
22867: LD_INT 10
22869: PUSH
22870: LD_INT 11
22872: PUSH
22873: LD_INT 12
22875: PUSH
22876: LD_INT 13
22878: PUSH
22879: LD_INT 14
22881: PUSH
22882: LD_INT 15
22884: PUSH
22885: LD_INT 16
22887: PUSH
22888: LD_INT 17
22890: PUSH
22891: LD_INT 18
22893: PUSH
22894: LD_INT 19
22896: PUSH
22897: LD_INT 20
22899: PUSH
22900: LD_INT 21
22902: PUSH
22903: LD_INT 22
22905: PUSH
22906: LD_INT 23
22908: PUSH
22909: LD_INT 24
22911: PUSH
22912: LD_INT 25
22914: PUSH
22915: LD_INT 26
22917: PUSH
22918: LD_INT 27
22920: PUSH
22921: LD_INT 28
22923: PUSH
22924: LD_INT 29
22926: PUSH
22927: LD_INT 30
22929: PUSH
22930: LD_INT 31
22932: PUSH
22933: LD_INT 32
22935: PUSH
22936: LD_INT 33
22938: PUSH
22939: LD_INT 34
22941: PUSH
22942: LD_INT 36
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 101
22984: PUSH
22985: LD_INT 102
22987: PUSH
22988: LD_INT 103
22990: PUSH
22991: LD_INT 104
22993: PUSH
22994: LD_INT 105
22996: PUSH
22997: LD_INT 106
22999: PUSH
23000: LD_INT 107
23002: PUSH
23003: LD_INT 108
23005: PUSH
23006: LD_INT 109
23008: PUSH
23009: LD_INT 110
23011: PUSH
23012: LD_INT 111
23014: PUSH
23015: LD_INT 112
23017: PUSH
23018: LD_INT 113
23020: PUSH
23021: LD_INT 114
23023: PUSH
23024: LD_INT 116
23026: PUSH
23027: LD_INT 117
23029: PUSH
23030: LD_INT 118
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: ST_TO_ADDR
23056: GO 24063
23058: LD_INT 15
23060: DOUBLE
23061: EQUAL
23062: IFTRUE 23066
23064: GO 23290
23066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23067: LD_ADDR_VAR 0 2
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: LD_INT 3
23080: PUSH
23081: LD_INT 4
23083: PUSH
23084: LD_INT 5
23086: PUSH
23087: LD_INT 6
23089: PUSH
23090: LD_INT 7
23092: PUSH
23093: LD_INT 8
23095: PUSH
23096: LD_INT 9
23098: PUSH
23099: LD_INT 10
23101: PUSH
23102: LD_INT 11
23104: PUSH
23105: LD_INT 12
23107: PUSH
23108: LD_INT 13
23110: PUSH
23111: LD_INT 14
23113: PUSH
23114: LD_INT 15
23116: PUSH
23117: LD_INT 16
23119: PUSH
23120: LD_INT 17
23122: PUSH
23123: LD_INT 18
23125: PUSH
23126: LD_INT 19
23128: PUSH
23129: LD_INT 20
23131: PUSH
23132: LD_INT 21
23134: PUSH
23135: LD_INT 22
23137: PUSH
23138: LD_INT 23
23140: PUSH
23141: LD_INT 24
23143: PUSH
23144: LD_INT 25
23146: PUSH
23147: LD_INT 26
23149: PUSH
23150: LD_INT 27
23152: PUSH
23153: LD_INT 28
23155: PUSH
23156: LD_INT 29
23158: PUSH
23159: LD_INT 30
23161: PUSH
23162: LD_INT 31
23164: PUSH
23165: LD_INT 32
23167: PUSH
23168: LD_INT 33
23170: PUSH
23171: LD_INT 34
23173: PUSH
23174: LD_INT 36
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 101
23216: PUSH
23217: LD_INT 102
23219: PUSH
23220: LD_INT 103
23222: PUSH
23223: LD_INT 104
23225: PUSH
23226: LD_INT 105
23228: PUSH
23229: LD_INT 106
23231: PUSH
23232: LD_INT 107
23234: PUSH
23235: LD_INT 108
23237: PUSH
23238: LD_INT 109
23240: PUSH
23241: LD_INT 110
23243: PUSH
23244: LD_INT 111
23246: PUSH
23247: LD_INT 112
23249: PUSH
23250: LD_INT 113
23252: PUSH
23253: LD_INT 114
23255: PUSH
23256: LD_INT 116
23258: PUSH
23259: LD_INT 117
23261: PUSH
23262: LD_INT 118
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: ST_TO_ADDR
23288: GO 24063
23290: LD_INT 16
23292: DOUBLE
23293: EQUAL
23294: IFTRUE 23298
23296: GO 23434
23298: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23299: LD_ADDR_VAR 0 2
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: LD_INT 4
23309: PUSH
23310: LD_INT 5
23312: PUSH
23313: LD_INT 7
23315: PUSH
23316: LD_INT 11
23318: PUSH
23319: LD_INT 12
23321: PUSH
23322: LD_INT 15
23324: PUSH
23325: LD_INT 16
23327: PUSH
23328: LD_INT 20
23330: PUSH
23331: LD_INT 21
23333: PUSH
23334: LD_INT 22
23336: PUSH
23337: LD_INT 23
23339: PUSH
23340: LD_INT 25
23342: PUSH
23343: LD_INT 26
23345: PUSH
23346: LD_INT 30
23348: PUSH
23349: LD_INT 31
23351: PUSH
23352: LD_INT 32
23354: PUSH
23355: LD_INT 33
23357: PUSH
23358: LD_INT 34
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 101
23384: PUSH
23385: LD_INT 102
23387: PUSH
23388: LD_INT 103
23390: PUSH
23391: LD_INT 106
23393: PUSH
23394: LD_INT 108
23396: PUSH
23397: LD_INT 112
23399: PUSH
23400: LD_INT 113
23402: PUSH
23403: LD_INT 114
23405: PUSH
23406: LD_INT 116
23408: PUSH
23409: LD_INT 117
23411: PUSH
23412: LD_INT 118
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: ST_TO_ADDR
23432: GO 24063
23434: LD_INT 17
23436: DOUBLE
23437: EQUAL
23438: IFTRUE 23442
23440: GO 23666
23442: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23443: LD_ADDR_VAR 0 2
23447: PUSH
23448: LD_INT 1
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: LD_INT 3
23456: PUSH
23457: LD_INT 4
23459: PUSH
23460: LD_INT 5
23462: PUSH
23463: LD_INT 6
23465: PUSH
23466: LD_INT 7
23468: PUSH
23469: LD_INT 8
23471: PUSH
23472: LD_INT 9
23474: PUSH
23475: LD_INT 10
23477: PUSH
23478: LD_INT 11
23480: PUSH
23481: LD_INT 12
23483: PUSH
23484: LD_INT 13
23486: PUSH
23487: LD_INT 14
23489: PUSH
23490: LD_INT 15
23492: PUSH
23493: LD_INT 16
23495: PUSH
23496: LD_INT 17
23498: PUSH
23499: LD_INT 18
23501: PUSH
23502: LD_INT 19
23504: PUSH
23505: LD_INT 20
23507: PUSH
23508: LD_INT 21
23510: PUSH
23511: LD_INT 22
23513: PUSH
23514: LD_INT 23
23516: PUSH
23517: LD_INT 24
23519: PUSH
23520: LD_INT 25
23522: PUSH
23523: LD_INT 26
23525: PUSH
23526: LD_INT 27
23528: PUSH
23529: LD_INT 28
23531: PUSH
23532: LD_INT 29
23534: PUSH
23535: LD_INT 30
23537: PUSH
23538: LD_INT 31
23540: PUSH
23541: LD_INT 32
23543: PUSH
23544: LD_INT 33
23546: PUSH
23547: LD_INT 34
23549: PUSH
23550: LD_INT 36
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 101
23592: PUSH
23593: LD_INT 102
23595: PUSH
23596: LD_INT 103
23598: PUSH
23599: LD_INT 104
23601: PUSH
23602: LD_INT 105
23604: PUSH
23605: LD_INT 106
23607: PUSH
23608: LD_INT 107
23610: PUSH
23611: LD_INT 108
23613: PUSH
23614: LD_INT 109
23616: PUSH
23617: LD_INT 110
23619: PUSH
23620: LD_INT 111
23622: PUSH
23623: LD_INT 112
23625: PUSH
23626: LD_INT 113
23628: PUSH
23629: LD_INT 114
23631: PUSH
23632: LD_INT 116
23634: PUSH
23635: LD_INT 117
23637: PUSH
23638: LD_INT 118
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: ST_TO_ADDR
23664: GO 24063
23666: LD_INT 18
23668: DOUBLE
23669: EQUAL
23670: IFTRUE 23674
23672: GO 23822
23674: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23675: LD_ADDR_VAR 0 2
23679: PUSH
23680: LD_INT 2
23682: PUSH
23683: LD_INT 4
23685: PUSH
23686: LD_INT 5
23688: PUSH
23689: LD_INT 7
23691: PUSH
23692: LD_INT 11
23694: PUSH
23695: LD_INT 12
23697: PUSH
23698: LD_INT 15
23700: PUSH
23701: LD_INT 16
23703: PUSH
23704: LD_INT 20
23706: PUSH
23707: LD_INT 21
23709: PUSH
23710: LD_INT 22
23712: PUSH
23713: LD_INT 23
23715: PUSH
23716: LD_INT 25
23718: PUSH
23719: LD_INT 26
23721: PUSH
23722: LD_INT 30
23724: PUSH
23725: LD_INT 31
23727: PUSH
23728: LD_INT 32
23730: PUSH
23731: LD_INT 33
23733: PUSH
23734: LD_INT 34
23736: PUSH
23737: LD_INT 35
23739: PUSH
23740: LD_INT 36
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 101
23768: PUSH
23769: LD_INT 102
23771: PUSH
23772: LD_INT 103
23774: PUSH
23775: LD_INT 106
23777: PUSH
23778: LD_INT 108
23780: PUSH
23781: LD_INT 112
23783: PUSH
23784: LD_INT 113
23786: PUSH
23787: LD_INT 114
23789: PUSH
23790: LD_INT 115
23792: PUSH
23793: LD_INT 116
23795: PUSH
23796: LD_INT 117
23798: PUSH
23799: LD_INT 118
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: ST_TO_ADDR
23820: GO 24063
23822: LD_INT 19
23824: DOUBLE
23825: EQUAL
23826: IFTRUE 23830
23828: GO 24062
23830: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23831: LD_ADDR_VAR 0 2
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: LD_INT 2
23841: PUSH
23842: LD_INT 3
23844: PUSH
23845: LD_INT 4
23847: PUSH
23848: LD_INT 5
23850: PUSH
23851: LD_INT 6
23853: PUSH
23854: LD_INT 7
23856: PUSH
23857: LD_INT 8
23859: PUSH
23860: LD_INT 9
23862: PUSH
23863: LD_INT 10
23865: PUSH
23866: LD_INT 11
23868: PUSH
23869: LD_INT 12
23871: PUSH
23872: LD_INT 13
23874: PUSH
23875: LD_INT 14
23877: PUSH
23878: LD_INT 15
23880: PUSH
23881: LD_INT 16
23883: PUSH
23884: LD_INT 17
23886: PUSH
23887: LD_INT 18
23889: PUSH
23890: LD_INT 19
23892: PUSH
23893: LD_INT 20
23895: PUSH
23896: LD_INT 21
23898: PUSH
23899: LD_INT 22
23901: PUSH
23902: LD_INT 23
23904: PUSH
23905: LD_INT 24
23907: PUSH
23908: LD_INT 25
23910: PUSH
23911: LD_INT 26
23913: PUSH
23914: LD_INT 27
23916: PUSH
23917: LD_INT 28
23919: PUSH
23920: LD_INT 29
23922: PUSH
23923: LD_INT 30
23925: PUSH
23926: LD_INT 31
23928: PUSH
23929: LD_INT 32
23931: PUSH
23932: LD_INT 33
23934: PUSH
23935: LD_INT 34
23937: PUSH
23938: LD_INT 35
23940: PUSH
23941: LD_INT 36
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 101
23984: PUSH
23985: LD_INT 102
23987: PUSH
23988: LD_INT 103
23990: PUSH
23991: LD_INT 104
23993: PUSH
23994: LD_INT 105
23996: PUSH
23997: LD_INT 106
23999: PUSH
24000: LD_INT 107
24002: PUSH
24003: LD_INT 108
24005: PUSH
24006: LD_INT 109
24008: PUSH
24009: LD_INT 110
24011: PUSH
24012: LD_INT 111
24014: PUSH
24015: LD_INT 112
24017: PUSH
24018: LD_INT 113
24020: PUSH
24021: LD_INT 114
24023: PUSH
24024: LD_INT 115
24026: PUSH
24027: LD_INT 116
24029: PUSH
24030: LD_INT 117
24032: PUSH
24033: LD_INT 118
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: ST_TO_ADDR
24060: GO 24063
24062: POP
// end else
24063: GO 24294
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24065: LD_ADDR_VAR 0 2
24069: PUSH
24070: LD_INT 1
24072: PUSH
24073: LD_INT 2
24075: PUSH
24076: LD_INT 3
24078: PUSH
24079: LD_INT 4
24081: PUSH
24082: LD_INT 5
24084: PUSH
24085: LD_INT 6
24087: PUSH
24088: LD_INT 7
24090: PUSH
24091: LD_INT 8
24093: PUSH
24094: LD_INT 9
24096: PUSH
24097: LD_INT 10
24099: PUSH
24100: LD_INT 11
24102: PUSH
24103: LD_INT 12
24105: PUSH
24106: LD_INT 13
24108: PUSH
24109: LD_INT 14
24111: PUSH
24112: LD_INT 15
24114: PUSH
24115: LD_INT 16
24117: PUSH
24118: LD_INT 17
24120: PUSH
24121: LD_INT 18
24123: PUSH
24124: LD_INT 19
24126: PUSH
24127: LD_INT 20
24129: PUSH
24130: LD_INT 21
24132: PUSH
24133: LD_INT 22
24135: PUSH
24136: LD_INT 23
24138: PUSH
24139: LD_INT 24
24141: PUSH
24142: LD_INT 25
24144: PUSH
24145: LD_INT 26
24147: PUSH
24148: LD_INT 27
24150: PUSH
24151: LD_INT 28
24153: PUSH
24154: LD_INT 29
24156: PUSH
24157: LD_INT 30
24159: PUSH
24160: LD_INT 31
24162: PUSH
24163: LD_INT 32
24165: PUSH
24166: LD_INT 33
24168: PUSH
24169: LD_INT 34
24171: PUSH
24172: LD_INT 35
24174: PUSH
24175: LD_INT 36
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 101
24218: PUSH
24219: LD_INT 102
24221: PUSH
24222: LD_INT 103
24224: PUSH
24225: LD_INT 104
24227: PUSH
24228: LD_INT 105
24230: PUSH
24231: LD_INT 106
24233: PUSH
24234: LD_INT 107
24236: PUSH
24237: LD_INT 108
24239: PUSH
24240: LD_INT 109
24242: PUSH
24243: LD_INT 110
24245: PUSH
24246: LD_INT 111
24248: PUSH
24249: LD_INT 112
24251: PUSH
24252: LD_INT 113
24254: PUSH
24255: LD_INT 114
24257: PUSH
24258: LD_INT 115
24260: PUSH
24261: LD_INT 116
24263: PUSH
24264: LD_INT 117
24266: PUSH
24267: LD_INT 118
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: ST_TO_ADDR
// if result then
24294: LD_VAR 0 2
24298: IFFALSE 25084
// begin normal :=  ;
24300: LD_ADDR_VAR 0 5
24304: PUSH
24305: LD_STRING 
24307: ST_TO_ADDR
// hardcore :=  ;
24308: LD_ADDR_VAR 0 6
24312: PUSH
24313: LD_STRING 
24315: ST_TO_ADDR
// active :=  ;
24316: LD_ADDR_VAR 0 7
24320: PUSH
24321: LD_STRING 
24323: ST_TO_ADDR
// for i = 1 to normalCounter do
24324: LD_ADDR_VAR 0 8
24328: PUSH
24329: DOUBLE
24330: LD_INT 1
24332: DEC
24333: ST_TO_ADDR
24334: LD_EXP 47
24338: PUSH
24339: FOR_TO
24340: IFFALSE 24441
// begin tmp := 0 ;
24342: LD_ADDR_VAR 0 3
24346: PUSH
24347: LD_STRING 0
24349: ST_TO_ADDR
// if result [ 1 ] then
24350: LD_VAR 0 2
24354: PUSH
24355: LD_INT 1
24357: ARRAY
24358: IFFALSE 24423
// if result [ 1 ] [ 1 ] = i then
24360: LD_VAR 0 2
24364: PUSH
24365: LD_INT 1
24367: ARRAY
24368: PUSH
24369: LD_INT 1
24371: ARRAY
24372: PUSH
24373: LD_VAR 0 8
24377: EQUAL
24378: IFFALSE 24423
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24380: LD_ADDR_VAR 0 2
24384: PUSH
24385: LD_VAR 0 2
24389: PPUSH
24390: LD_INT 1
24392: PPUSH
24393: LD_VAR 0 2
24397: PUSH
24398: LD_INT 1
24400: ARRAY
24401: PPUSH
24402: LD_INT 1
24404: PPUSH
24405: CALL_OW 3
24409: PPUSH
24410: CALL_OW 1
24414: ST_TO_ADDR
// tmp := 1 ;
24415: LD_ADDR_VAR 0 3
24419: PUSH
24420: LD_STRING 1
24422: ST_TO_ADDR
// end ; normal := normal & tmp ;
24423: LD_ADDR_VAR 0 5
24427: PUSH
24428: LD_VAR 0 5
24432: PUSH
24433: LD_VAR 0 3
24437: STR
24438: ST_TO_ADDR
// end ;
24439: GO 24339
24441: POP
24442: POP
// for i = 1 to hardcoreCounter do
24443: LD_ADDR_VAR 0 8
24447: PUSH
24448: DOUBLE
24449: LD_INT 1
24451: DEC
24452: ST_TO_ADDR
24453: LD_EXP 48
24457: PUSH
24458: FOR_TO
24459: IFFALSE 24564
// begin tmp := 0 ;
24461: LD_ADDR_VAR 0 3
24465: PUSH
24466: LD_STRING 0
24468: ST_TO_ADDR
// if result [ 2 ] then
24469: LD_VAR 0 2
24473: PUSH
24474: LD_INT 2
24476: ARRAY
24477: IFFALSE 24546
// if result [ 2 ] [ 1 ] = 100 + i then
24479: LD_VAR 0 2
24483: PUSH
24484: LD_INT 2
24486: ARRAY
24487: PUSH
24488: LD_INT 1
24490: ARRAY
24491: PUSH
24492: LD_INT 100
24494: PUSH
24495: LD_VAR 0 8
24499: PLUS
24500: EQUAL
24501: IFFALSE 24546
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24503: LD_ADDR_VAR 0 2
24507: PUSH
24508: LD_VAR 0 2
24512: PPUSH
24513: LD_INT 2
24515: PPUSH
24516: LD_VAR 0 2
24520: PUSH
24521: LD_INT 2
24523: ARRAY
24524: PPUSH
24525: LD_INT 1
24527: PPUSH
24528: CALL_OW 3
24532: PPUSH
24533: CALL_OW 1
24537: ST_TO_ADDR
// tmp := 1 ;
24538: LD_ADDR_VAR 0 3
24542: PUSH
24543: LD_STRING 1
24545: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24546: LD_ADDR_VAR 0 6
24550: PUSH
24551: LD_VAR 0 6
24555: PUSH
24556: LD_VAR 0 3
24560: STR
24561: ST_TO_ADDR
// end ;
24562: GO 24458
24564: POP
24565: POP
// if isGameLoad then
24566: LD_VAR 0 1
24570: IFFALSE 25045
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24572: LD_ADDR_VAR 0 4
24576: PUSH
24577: LD_EXP 51
24581: PUSH
24582: LD_EXP 50
24586: PUSH
24587: LD_EXP 52
24591: PUSH
24592: LD_EXP 49
24596: PUSH
24597: LD_EXP 53
24601: PUSH
24602: LD_EXP 54
24606: PUSH
24607: LD_EXP 55
24611: PUSH
24612: LD_EXP 56
24616: PUSH
24617: LD_EXP 57
24621: PUSH
24622: LD_EXP 58
24626: PUSH
24627: LD_EXP 59
24631: PUSH
24632: LD_EXP 60
24636: PUSH
24637: LD_EXP 61
24641: PUSH
24642: LD_EXP 62
24646: PUSH
24647: LD_EXP 70
24651: PUSH
24652: LD_EXP 71
24656: PUSH
24657: LD_EXP 72
24661: PUSH
24662: LD_EXP 73
24666: PUSH
24667: LD_EXP 75
24671: PUSH
24672: LD_EXP 76
24676: PUSH
24677: LD_EXP 77
24681: PUSH
24682: LD_EXP 80
24686: PUSH
24687: LD_EXP 82
24691: PUSH
24692: LD_EXP 83
24696: PUSH
24697: LD_EXP 84
24701: PUSH
24702: LD_EXP 86
24706: PUSH
24707: LD_EXP 87
24711: PUSH
24712: LD_EXP 90
24716: PUSH
24717: LD_EXP 91
24721: PUSH
24722: LD_EXP 92
24726: PUSH
24727: LD_EXP 93
24731: PUSH
24732: LD_EXP 94
24736: PUSH
24737: LD_EXP 95
24741: PUSH
24742: LD_EXP 96
24746: PUSH
24747: LD_EXP 97
24751: PUSH
24752: LD_EXP 98
24756: PUSH
24757: LD_EXP 63
24761: PUSH
24762: LD_EXP 64
24766: PUSH
24767: LD_EXP 67
24771: PUSH
24772: LD_EXP 68
24776: PUSH
24777: LD_EXP 69
24781: PUSH
24782: LD_EXP 65
24786: PUSH
24787: LD_EXP 66
24791: PUSH
24792: LD_EXP 74
24796: PUSH
24797: LD_EXP 78
24801: PUSH
24802: LD_EXP 79
24806: PUSH
24807: LD_EXP 81
24811: PUSH
24812: LD_EXP 85
24816: PUSH
24817: LD_EXP 88
24821: PUSH
24822: LD_EXP 89
24826: PUSH
24827: LD_EXP 99
24831: PUSH
24832: LD_EXP 100
24836: PUSH
24837: LD_EXP 101
24841: PUSH
24842: LD_EXP 102
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: ST_TO_ADDR
// tmp :=  ;
24903: LD_ADDR_VAR 0 3
24907: PUSH
24908: LD_STRING 
24910: ST_TO_ADDR
// for i = 1 to normalCounter do
24911: LD_ADDR_VAR 0 8
24915: PUSH
24916: DOUBLE
24917: LD_INT 1
24919: DEC
24920: ST_TO_ADDR
24921: LD_EXP 47
24925: PUSH
24926: FOR_TO
24927: IFFALSE 24963
// begin if flags [ i ] then
24929: LD_VAR 0 4
24933: PUSH
24934: LD_VAR 0 8
24938: ARRAY
24939: IFFALSE 24961
// tmp := tmp & i & ; ;
24941: LD_ADDR_VAR 0 3
24945: PUSH
24946: LD_VAR 0 3
24950: PUSH
24951: LD_VAR 0 8
24955: STR
24956: PUSH
24957: LD_STRING ;
24959: STR
24960: ST_TO_ADDR
// end ;
24961: GO 24926
24963: POP
24964: POP
// for i = 1 to hardcoreCounter do
24965: LD_ADDR_VAR 0 8
24969: PUSH
24970: DOUBLE
24971: LD_INT 1
24973: DEC
24974: ST_TO_ADDR
24975: LD_EXP 48
24979: PUSH
24980: FOR_TO
24981: IFFALSE 25027
// begin if flags [ normalCounter + i ] then
24983: LD_VAR 0 4
24987: PUSH
24988: LD_EXP 47
24992: PUSH
24993: LD_VAR 0 8
24997: PLUS
24998: ARRAY
24999: IFFALSE 25025
// tmp := tmp & ( 100 + i ) & ; ;
25001: LD_ADDR_VAR 0 3
25005: PUSH
25006: LD_VAR 0 3
25010: PUSH
25011: LD_INT 100
25013: PUSH
25014: LD_VAR 0 8
25018: PLUS
25019: STR
25020: PUSH
25021: LD_STRING ;
25023: STR
25024: ST_TO_ADDR
// end ;
25025: GO 24980
25027: POP
25028: POP
// if tmp then
25029: LD_VAR 0 3
25033: IFFALSE 25045
// active := tmp ;
25035: LD_ADDR_VAR 0 7
25039: PUSH
25040: LD_VAR 0 3
25044: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25045: LD_STRING getStreamItemsFromMission("
25047: PUSH
25048: LD_VAR 0 5
25052: STR
25053: PUSH
25054: LD_STRING ","
25056: STR
25057: PUSH
25058: LD_VAR 0 6
25062: STR
25063: PUSH
25064: LD_STRING ","
25066: STR
25067: PUSH
25068: LD_VAR 0 7
25072: STR
25073: PUSH
25074: LD_STRING ")
25076: STR
25077: PPUSH
25078: CALL_OW 559
// end else
25082: GO 25091
// ToLua ( getStreamItemsFromMission("","","") ) ;
25084: LD_STRING getStreamItemsFromMission("","","")
25086: PPUSH
25087: CALL_OW 559
// end ;
25091: LD_VAR 0 2
25095: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25096: LD_EXP 46
25100: PUSH
25101: LD_EXP 51
25105: AND
25106: IFFALSE 25230
25108: GO 25110
25110: DISABLE
25111: LD_INT 0
25113: PPUSH
25114: PPUSH
// begin enable ;
25115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25116: LD_ADDR_VAR 0 2
25120: PUSH
25121: LD_INT 22
25123: PUSH
25124: LD_OWVAR 2
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 2
25135: PUSH
25136: LD_INT 34
25138: PUSH
25139: LD_INT 7
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 34
25148: PUSH
25149: LD_INT 45
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 34
25158: PUSH
25159: LD_INT 28
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 34
25168: PUSH
25169: LD_INT 47
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PPUSH
25187: CALL_OW 69
25191: ST_TO_ADDR
// if not tmp then
25192: LD_VAR 0 2
25196: NOT
25197: IFFALSE 25201
// exit ;
25199: GO 25230
// for i in tmp do
25201: LD_ADDR_VAR 0 1
25205: PUSH
25206: LD_VAR 0 2
25210: PUSH
25211: FOR_IN
25212: IFFALSE 25228
// begin SetLives ( i , 0 ) ;
25214: LD_VAR 0 1
25218: PPUSH
25219: LD_INT 0
25221: PPUSH
25222: CALL_OW 234
// end ;
25226: GO 25211
25228: POP
25229: POP
// end ;
25230: PPOPN 2
25232: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25233: LD_EXP 46
25237: PUSH
25238: LD_EXP 52
25242: AND
25243: IFFALSE 25327
25245: GO 25247
25247: DISABLE
25248: LD_INT 0
25250: PPUSH
25251: PPUSH
// begin enable ;
25252: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25253: LD_ADDR_VAR 0 2
25257: PUSH
25258: LD_INT 22
25260: PUSH
25261: LD_OWVAR 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 32
25272: PUSH
25273: LD_INT 3
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PPUSH
25284: CALL_OW 69
25288: ST_TO_ADDR
// if not tmp then
25289: LD_VAR 0 2
25293: NOT
25294: IFFALSE 25298
// exit ;
25296: GO 25327
// for i in tmp do
25298: LD_ADDR_VAR 0 1
25302: PUSH
25303: LD_VAR 0 2
25307: PUSH
25308: FOR_IN
25309: IFFALSE 25325
// begin SetLives ( i , 0 ) ;
25311: LD_VAR 0 1
25315: PPUSH
25316: LD_INT 0
25318: PPUSH
25319: CALL_OW 234
// end ;
25323: GO 25308
25325: POP
25326: POP
// end ;
25327: PPOPN 2
25329: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25330: LD_EXP 46
25334: PUSH
25335: LD_EXP 49
25339: AND
25340: IFFALSE 25433
25342: GO 25344
25344: DISABLE
25345: LD_INT 0
25347: PPUSH
// begin enable ;
25348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25349: LD_ADDR_VAR 0 1
25353: PUSH
25354: LD_INT 22
25356: PUSH
25357: LD_OWVAR 2
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: LD_INT 25
25371: PUSH
25372: LD_INT 5
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 25
25381: PUSH
25382: LD_INT 9
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 25
25391: PUSH
25392: LD_INT 8
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PPUSH
25409: CALL_OW 69
25413: PUSH
25414: FOR_IN
25415: IFFALSE 25431
// begin SetClass ( i , 1 ) ;
25417: LD_VAR 0 1
25421: PPUSH
25422: LD_INT 1
25424: PPUSH
25425: CALL_OW 336
// end ;
25429: GO 25414
25431: POP
25432: POP
// end ;
25433: PPOPN 1
25435: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25436: LD_EXP 46
25440: PUSH
25441: LD_EXP 50
25445: AND
25446: PUSH
25447: LD_OWVAR 65
25451: PUSH
25452: LD_INT 7
25454: LESS
25455: AND
25456: IFFALSE 25470
25458: GO 25460
25460: DISABLE
// begin enable ;
25461: ENABLE
// game_speed := 7 ;
25462: LD_ADDR_OWVAR 65
25466: PUSH
25467: LD_INT 7
25469: ST_TO_ADDR
// end ;
25470: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25471: LD_EXP 46
25475: PUSH
25476: LD_EXP 53
25480: AND
25481: IFFALSE 25683
25483: GO 25485
25485: DISABLE
25486: LD_INT 0
25488: PPUSH
25489: PPUSH
25490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25491: LD_ADDR_VAR 0 3
25495: PUSH
25496: LD_INT 81
25498: PUSH
25499: LD_OWVAR 2
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 21
25510: PUSH
25511: LD_INT 1
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PPUSH
25522: CALL_OW 69
25526: ST_TO_ADDR
// if not tmp then
25527: LD_VAR 0 3
25531: NOT
25532: IFFALSE 25536
// exit ;
25534: GO 25683
// if tmp > 5 then
25536: LD_VAR 0 3
25540: PUSH
25541: LD_INT 5
25543: GREATER
25544: IFFALSE 25556
// k := 5 else
25546: LD_ADDR_VAR 0 2
25550: PUSH
25551: LD_INT 5
25553: ST_TO_ADDR
25554: GO 25566
// k := tmp ;
25556: LD_ADDR_VAR 0 2
25560: PUSH
25561: LD_VAR 0 3
25565: ST_TO_ADDR
// for i := 1 to k do
25566: LD_ADDR_VAR 0 1
25570: PUSH
25571: DOUBLE
25572: LD_INT 1
25574: DEC
25575: ST_TO_ADDR
25576: LD_VAR 0 2
25580: PUSH
25581: FOR_TO
25582: IFFALSE 25681
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25584: LD_VAR 0 3
25588: PUSH
25589: LD_VAR 0 1
25593: ARRAY
25594: PPUSH
25595: LD_VAR 0 1
25599: PUSH
25600: LD_INT 4
25602: MOD
25603: PUSH
25604: LD_INT 1
25606: PLUS
25607: PPUSH
25608: CALL_OW 259
25612: PUSH
25613: LD_INT 10
25615: LESS
25616: IFFALSE 25679
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25618: LD_VAR 0 3
25622: PUSH
25623: LD_VAR 0 1
25627: ARRAY
25628: PPUSH
25629: LD_VAR 0 1
25633: PUSH
25634: LD_INT 4
25636: MOD
25637: PUSH
25638: LD_INT 1
25640: PLUS
25641: PPUSH
25642: LD_VAR 0 3
25646: PUSH
25647: LD_VAR 0 1
25651: ARRAY
25652: PPUSH
25653: LD_VAR 0 1
25657: PUSH
25658: LD_INT 4
25660: MOD
25661: PUSH
25662: LD_INT 1
25664: PLUS
25665: PPUSH
25666: CALL_OW 259
25670: PUSH
25671: LD_INT 1
25673: PLUS
25674: PPUSH
25675: CALL_OW 237
25679: GO 25581
25681: POP
25682: POP
// end ;
25683: PPOPN 3
25685: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25686: LD_EXP 46
25690: PUSH
25691: LD_EXP 54
25695: AND
25696: IFFALSE 25716
25698: GO 25700
25700: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25701: LD_INT 4
25703: PPUSH
25704: LD_OWVAR 2
25708: PPUSH
25709: LD_INT 0
25711: PPUSH
25712: CALL_OW 324
25716: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25717: LD_EXP 46
25721: PUSH
25722: LD_EXP 83
25726: AND
25727: IFFALSE 25747
25729: GO 25731
25731: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25732: LD_INT 19
25734: PPUSH
25735: LD_OWVAR 2
25739: PPUSH
25740: LD_INT 0
25742: PPUSH
25743: CALL_OW 324
25747: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25748: LD_EXP 46
25752: PUSH
25753: LD_EXP 55
25757: AND
25758: IFFALSE 25860
25760: GO 25762
25762: DISABLE
25763: LD_INT 0
25765: PPUSH
25766: PPUSH
// begin enable ;
25767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25768: LD_ADDR_VAR 0 2
25772: PUSH
25773: LD_INT 22
25775: PUSH
25776: LD_OWVAR 2
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: LD_INT 34
25790: PUSH
25791: LD_INT 11
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 34
25800: PUSH
25801: LD_INT 30
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: LIST
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PPUSH
25817: CALL_OW 69
25821: ST_TO_ADDR
// if not tmp then
25822: LD_VAR 0 2
25826: NOT
25827: IFFALSE 25831
// exit ;
25829: GO 25860
// for i in tmp do
25831: LD_ADDR_VAR 0 1
25835: PUSH
25836: LD_VAR 0 2
25840: PUSH
25841: FOR_IN
25842: IFFALSE 25858
// begin SetLives ( i , 0 ) ;
25844: LD_VAR 0 1
25848: PPUSH
25849: LD_INT 0
25851: PPUSH
25852: CALL_OW 234
// end ;
25856: GO 25841
25858: POP
25859: POP
// end ;
25860: PPOPN 2
25862: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25863: LD_EXP 46
25867: PUSH
25868: LD_EXP 56
25872: AND
25873: IFFALSE 25893
25875: GO 25877
25877: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25878: LD_INT 32
25880: PPUSH
25881: LD_OWVAR 2
25885: PPUSH
25886: LD_INT 0
25888: PPUSH
25889: CALL_OW 324
25893: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25894: LD_EXP 46
25898: PUSH
25899: LD_EXP 57
25903: AND
25904: IFFALSE 26085
25906: GO 25908
25908: DISABLE
25909: LD_INT 0
25911: PPUSH
25912: PPUSH
25913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25914: LD_ADDR_VAR 0 2
25918: PUSH
25919: LD_INT 22
25921: PUSH
25922: LD_OWVAR 2
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 33
25933: PUSH
25934: LD_INT 3
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PPUSH
25945: CALL_OW 69
25949: ST_TO_ADDR
// if not tmp then
25950: LD_VAR 0 2
25954: NOT
25955: IFFALSE 25959
// exit ;
25957: GO 26085
// side := 0 ;
25959: LD_ADDR_VAR 0 3
25963: PUSH
25964: LD_INT 0
25966: ST_TO_ADDR
// for i := 1 to 8 do
25967: LD_ADDR_VAR 0 1
25971: PUSH
25972: DOUBLE
25973: LD_INT 1
25975: DEC
25976: ST_TO_ADDR
25977: LD_INT 8
25979: PUSH
25980: FOR_TO
25981: IFFALSE 26029
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25983: LD_OWVAR 2
25987: PUSH
25988: LD_VAR 0 1
25992: NONEQUAL
25993: PUSH
25994: LD_OWVAR 2
25998: PPUSH
25999: LD_VAR 0 1
26003: PPUSH
26004: CALL_OW 81
26008: PUSH
26009: LD_INT 2
26011: EQUAL
26012: AND
26013: IFFALSE 26027
// begin side := i ;
26015: LD_ADDR_VAR 0 3
26019: PUSH
26020: LD_VAR 0 1
26024: ST_TO_ADDR
// break ;
26025: GO 26029
// end ;
26027: GO 25980
26029: POP
26030: POP
// if not side then
26031: LD_VAR 0 3
26035: NOT
26036: IFFALSE 26040
// exit ;
26038: GO 26085
// for i := 1 to tmp do
26040: LD_ADDR_VAR 0 1
26044: PUSH
26045: DOUBLE
26046: LD_INT 1
26048: DEC
26049: ST_TO_ADDR
26050: LD_VAR 0 2
26054: PUSH
26055: FOR_TO
26056: IFFALSE 26083
// if Prob ( 60 ) then
26058: LD_INT 60
26060: PPUSH
26061: CALL_OW 13
26065: IFFALSE 26081
// SetSide ( i , side ) ;
26067: LD_VAR 0 1
26071: PPUSH
26072: LD_VAR 0 3
26076: PPUSH
26077: CALL_OW 235
26081: GO 26055
26083: POP
26084: POP
// end ;
26085: PPOPN 3
26087: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26088: LD_EXP 46
26092: PUSH
26093: LD_EXP 59
26097: AND
26098: IFFALSE 26217
26100: GO 26102
26102: DISABLE
26103: LD_INT 0
26105: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26106: LD_ADDR_VAR 0 1
26110: PUSH
26111: LD_INT 22
26113: PUSH
26114: LD_OWVAR 2
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 21
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 3
26135: PUSH
26136: LD_INT 23
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: LIST
26154: PPUSH
26155: CALL_OW 69
26159: PUSH
26160: FOR_IN
26161: IFFALSE 26215
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26163: LD_VAR 0 1
26167: PPUSH
26168: CALL_OW 257
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: LD_INT 2
26178: PUSH
26179: LD_INT 3
26181: PUSH
26182: LD_INT 4
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: IN
26191: IFFALSE 26213
// SetClass ( un , rand ( 1 , 4 ) ) ;
26193: LD_VAR 0 1
26197: PPUSH
26198: LD_INT 1
26200: PPUSH
26201: LD_INT 4
26203: PPUSH
26204: CALL_OW 12
26208: PPUSH
26209: CALL_OW 336
26213: GO 26160
26215: POP
26216: POP
// end ;
26217: PPOPN 1
26219: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26220: LD_EXP 46
26224: PUSH
26225: LD_EXP 58
26229: AND
26230: IFFALSE 26309
26232: GO 26234
26234: DISABLE
26235: LD_INT 0
26237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26238: LD_ADDR_VAR 0 1
26242: PUSH
26243: LD_INT 22
26245: PUSH
26246: LD_OWVAR 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 21
26257: PUSH
26258: LD_INT 3
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PPUSH
26269: CALL_OW 69
26273: ST_TO_ADDR
// if not tmp then
26274: LD_VAR 0 1
26278: NOT
26279: IFFALSE 26283
// exit ;
26281: GO 26309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26283: LD_VAR 0 1
26287: PUSH
26288: LD_INT 1
26290: PPUSH
26291: LD_VAR 0 1
26295: PPUSH
26296: CALL_OW 12
26300: ARRAY
26301: PPUSH
26302: LD_INT 100
26304: PPUSH
26305: CALL_OW 234
// end ;
26309: PPOPN 1
26311: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26312: LD_EXP 46
26316: PUSH
26317: LD_EXP 60
26321: AND
26322: IFFALSE 26420
26324: GO 26326
26326: DISABLE
26327: LD_INT 0
26329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26330: LD_ADDR_VAR 0 1
26334: PUSH
26335: LD_INT 22
26337: PUSH
26338: LD_OWVAR 2
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 21
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PPUSH
26361: CALL_OW 69
26365: ST_TO_ADDR
// if not tmp then
26366: LD_VAR 0 1
26370: NOT
26371: IFFALSE 26375
// exit ;
26373: GO 26420
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26375: LD_VAR 0 1
26379: PUSH
26380: LD_INT 1
26382: PPUSH
26383: LD_VAR 0 1
26387: PPUSH
26388: CALL_OW 12
26392: ARRAY
26393: PPUSH
26394: LD_INT 1
26396: PPUSH
26397: LD_INT 4
26399: PPUSH
26400: CALL_OW 12
26404: PPUSH
26405: LD_INT 3000
26407: PPUSH
26408: LD_INT 9000
26410: PPUSH
26411: CALL_OW 12
26415: PPUSH
26416: CALL_OW 492
// end ;
26420: PPOPN 1
26422: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26423: LD_EXP 46
26427: PUSH
26428: LD_EXP 61
26432: AND
26433: IFFALSE 26453
26435: GO 26437
26437: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26438: LD_INT 1
26440: PPUSH
26441: LD_OWVAR 2
26445: PPUSH
26446: LD_INT 0
26448: PPUSH
26449: CALL_OW 324
26453: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26454: LD_EXP 46
26458: PUSH
26459: LD_EXP 62
26463: AND
26464: IFFALSE 26547
26466: GO 26468
26468: DISABLE
26469: LD_INT 0
26471: PPUSH
26472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26473: LD_ADDR_VAR 0 2
26477: PUSH
26478: LD_INT 22
26480: PUSH
26481: LD_OWVAR 2
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 21
26492: PUSH
26493: LD_INT 3
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PPUSH
26504: CALL_OW 69
26508: ST_TO_ADDR
// if not tmp then
26509: LD_VAR 0 2
26513: NOT
26514: IFFALSE 26518
// exit ;
26516: GO 26547
// for i in tmp do
26518: LD_ADDR_VAR 0 1
26522: PUSH
26523: LD_VAR 0 2
26527: PUSH
26528: FOR_IN
26529: IFFALSE 26545
// SetBLevel ( i , 10 ) ;
26531: LD_VAR 0 1
26535: PPUSH
26536: LD_INT 10
26538: PPUSH
26539: CALL_OW 241
26543: GO 26528
26545: POP
26546: POP
// end ;
26547: PPOPN 2
26549: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26550: LD_EXP 46
26554: PUSH
26555: LD_EXP 63
26559: AND
26560: IFFALSE 26671
26562: GO 26564
26564: DISABLE
26565: LD_INT 0
26567: PPUSH
26568: PPUSH
26569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26570: LD_ADDR_VAR 0 3
26574: PUSH
26575: LD_INT 22
26577: PUSH
26578: LD_OWVAR 2
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 25
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PPUSH
26601: CALL_OW 69
26605: ST_TO_ADDR
// if not tmp then
26606: LD_VAR 0 3
26610: NOT
26611: IFFALSE 26615
// exit ;
26613: GO 26671
// un := tmp [ rand ( 1 , tmp ) ] ;
26615: LD_ADDR_VAR 0 2
26619: PUSH
26620: LD_VAR 0 3
26624: PUSH
26625: LD_INT 1
26627: PPUSH
26628: LD_VAR 0 3
26632: PPUSH
26633: CALL_OW 12
26637: ARRAY
26638: ST_TO_ADDR
// if Crawls ( un ) then
26639: LD_VAR 0 2
26643: PPUSH
26644: CALL_OW 318
26648: IFFALSE 26659
// ComWalk ( un ) ;
26650: LD_VAR 0 2
26654: PPUSH
26655: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26659: LD_VAR 0 2
26663: PPUSH
26664: LD_INT 5
26666: PPUSH
26667: CALL_OW 336
// end ;
26671: PPOPN 3
26673: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26674: LD_EXP 46
26678: PUSH
26679: LD_EXP 64
26683: AND
26684: PUSH
26685: LD_OWVAR 67
26689: PUSH
26690: LD_INT 4
26692: LESS
26693: AND
26694: IFFALSE 26713
26696: GO 26698
26698: DISABLE
// begin Difficulty := Difficulty + 1 ;
26699: LD_ADDR_OWVAR 67
26703: PUSH
26704: LD_OWVAR 67
26708: PUSH
26709: LD_INT 1
26711: PLUS
26712: ST_TO_ADDR
// end ;
26713: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26714: LD_EXP 46
26718: PUSH
26719: LD_EXP 65
26723: AND
26724: IFFALSE 26827
26726: GO 26728
26728: DISABLE
26729: LD_INT 0
26731: PPUSH
// begin for i := 1 to 5 do
26732: LD_ADDR_VAR 0 1
26736: PUSH
26737: DOUBLE
26738: LD_INT 1
26740: DEC
26741: ST_TO_ADDR
26742: LD_INT 5
26744: PUSH
26745: FOR_TO
26746: IFFALSE 26825
// begin uc_nation := nation_nature ;
26748: LD_ADDR_OWVAR 21
26752: PUSH
26753: LD_INT 0
26755: ST_TO_ADDR
// uc_side := 0 ;
26756: LD_ADDR_OWVAR 20
26760: PUSH
26761: LD_INT 0
26763: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26764: LD_ADDR_OWVAR 29
26768: PUSH
26769: LD_INT 12
26771: PUSH
26772: LD_INT 12
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: ST_TO_ADDR
// hc_agressivity := 20 ;
26779: LD_ADDR_OWVAR 35
26783: PUSH
26784: LD_INT 20
26786: ST_TO_ADDR
// hc_class := class_tiger ;
26787: LD_ADDR_OWVAR 28
26791: PUSH
26792: LD_INT 14
26794: ST_TO_ADDR
// hc_gallery :=  ;
26795: LD_ADDR_OWVAR 33
26799: PUSH
26800: LD_STRING 
26802: ST_TO_ADDR
// hc_name :=  ;
26803: LD_ADDR_OWVAR 26
26807: PUSH
26808: LD_STRING 
26810: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26811: CALL_OW 44
26815: PPUSH
26816: LD_INT 0
26818: PPUSH
26819: CALL_OW 51
// end ;
26823: GO 26745
26825: POP
26826: POP
// end ;
26827: PPOPN 1
26829: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26830: LD_EXP 46
26834: PUSH
26835: LD_EXP 66
26839: AND
26840: IFFALSE 26849
26842: GO 26844
26844: DISABLE
// StreamSibBomb ;
26845: CALL 26850 0 0
26849: END
// export function StreamSibBomb ; var i , x , y ; begin
26850: LD_INT 0
26852: PPUSH
26853: PPUSH
26854: PPUSH
26855: PPUSH
// result := false ;
26856: LD_ADDR_VAR 0 1
26860: PUSH
26861: LD_INT 0
26863: ST_TO_ADDR
// for i := 1 to 16 do
26864: LD_ADDR_VAR 0 2
26868: PUSH
26869: DOUBLE
26870: LD_INT 1
26872: DEC
26873: ST_TO_ADDR
26874: LD_INT 16
26876: PUSH
26877: FOR_TO
26878: IFFALSE 27077
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26880: LD_ADDR_VAR 0 3
26884: PUSH
26885: LD_INT 10
26887: PUSH
26888: LD_INT 20
26890: PUSH
26891: LD_INT 30
26893: PUSH
26894: LD_INT 40
26896: PUSH
26897: LD_INT 50
26899: PUSH
26900: LD_INT 60
26902: PUSH
26903: LD_INT 70
26905: PUSH
26906: LD_INT 80
26908: PUSH
26909: LD_INT 90
26911: PUSH
26912: LD_INT 100
26914: PUSH
26915: LD_INT 110
26917: PUSH
26918: LD_INT 120
26920: PUSH
26921: LD_INT 130
26923: PUSH
26924: LD_INT 140
26926: PUSH
26927: LD_INT 150
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 1
26949: PPUSH
26950: LD_INT 15
26952: PPUSH
26953: CALL_OW 12
26957: ARRAY
26958: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26959: LD_ADDR_VAR 0 4
26963: PUSH
26964: LD_INT 10
26966: PUSH
26967: LD_INT 20
26969: PUSH
26970: LD_INT 30
26972: PUSH
26973: LD_INT 40
26975: PUSH
26976: LD_INT 50
26978: PUSH
26979: LD_INT 60
26981: PUSH
26982: LD_INT 70
26984: PUSH
26985: LD_INT 80
26987: PUSH
26988: LD_INT 90
26990: PUSH
26991: LD_INT 100
26993: PUSH
26994: LD_INT 110
26996: PUSH
26997: LD_INT 120
26999: PUSH
27000: LD_INT 130
27002: PUSH
27003: LD_INT 140
27005: PUSH
27006: LD_INT 150
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PPUSH
27029: LD_INT 15
27031: PPUSH
27032: CALL_OW 12
27036: ARRAY
27037: ST_TO_ADDR
// if ValidHex ( x , y ) then
27038: LD_VAR 0 3
27042: PPUSH
27043: LD_VAR 0 4
27047: PPUSH
27048: CALL_OW 488
27052: IFFALSE 27075
// begin result := [ x , y ] ;
27054: LD_ADDR_VAR 0 1
27058: PUSH
27059: LD_VAR 0 3
27063: PUSH
27064: LD_VAR 0 4
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: ST_TO_ADDR
// break ;
27073: GO 27077
// end ; end ;
27075: GO 26877
27077: POP
27078: POP
// if result then
27079: LD_VAR 0 1
27083: IFFALSE 27143
// begin ToLua ( playSibBomb() ) ;
27085: LD_STRING playSibBomb()
27087: PPUSH
27088: CALL_OW 559
// wait ( 0 0$14 ) ;
27092: LD_INT 490
27094: PPUSH
27095: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27099: LD_VAR 0 1
27103: PUSH
27104: LD_INT 1
27106: ARRAY
27107: PPUSH
27108: LD_VAR 0 1
27112: PUSH
27113: LD_INT 2
27115: ARRAY
27116: PPUSH
27117: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27121: LD_VAR 0 1
27125: PUSH
27126: LD_INT 1
27128: ARRAY
27129: PPUSH
27130: LD_VAR 0 1
27134: PUSH
27135: LD_INT 2
27137: ARRAY
27138: PPUSH
27139: CALL_OW 429
// end ; end ;
27143: LD_VAR 0 1
27147: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27148: LD_EXP 46
27152: PUSH
27153: LD_EXP 68
27157: AND
27158: IFFALSE 27170
27160: GO 27162
27162: DISABLE
// YouLost (  ) ;
27163: LD_STRING 
27165: PPUSH
27166: CALL_OW 104
27170: END
// every 0 0$1 trigger StreamModeActive and sFog do
27171: LD_EXP 46
27175: PUSH
27176: LD_EXP 67
27180: AND
27181: IFFALSE 27195
27183: GO 27185
27185: DISABLE
// FogOff ( your_side ) ;
27186: LD_OWVAR 2
27190: PPUSH
27191: CALL_OW 344
27195: END
// every 0 0$1 trigger StreamModeActive and sSun do
27196: LD_EXP 46
27200: PUSH
27201: LD_EXP 69
27205: AND
27206: IFFALSE 27234
27208: GO 27210
27210: DISABLE
// begin solar_recharge_percent := 0 ;
27211: LD_ADDR_OWVAR 79
27215: PUSH
27216: LD_INT 0
27218: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27219: LD_INT 10500
27221: PPUSH
27222: CALL_OW 67
// solar_recharge_percent := 100 ;
27226: LD_ADDR_OWVAR 79
27230: PUSH
27231: LD_INT 100
27233: ST_TO_ADDR
// end ;
27234: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27235: LD_EXP 46
27239: PUSH
27240: LD_EXP 70
27244: AND
27245: IFFALSE 27484
27247: GO 27249
27249: DISABLE
27250: LD_INT 0
27252: PPUSH
27253: PPUSH
27254: PPUSH
// begin tmp := [ ] ;
27255: LD_ADDR_VAR 0 3
27259: PUSH
27260: EMPTY
27261: ST_TO_ADDR
// for i := 1 to 6 do
27262: LD_ADDR_VAR 0 1
27266: PUSH
27267: DOUBLE
27268: LD_INT 1
27270: DEC
27271: ST_TO_ADDR
27272: LD_INT 6
27274: PUSH
27275: FOR_TO
27276: IFFALSE 27381
// begin uc_nation := nation_nature ;
27278: LD_ADDR_OWVAR 21
27282: PUSH
27283: LD_INT 0
27285: ST_TO_ADDR
// uc_side := 0 ;
27286: LD_ADDR_OWVAR 20
27290: PUSH
27291: LD_INT 0
27293: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27294: LD_ADDR_OWVAR 29
27298: PUSH
27299: LD_INT 12
27301: PUSH
27302: LD_INT 12
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: ST_TO_ADDR
// hc_agressivity := 20 ;
27309: LD_ADDR_OWVAR 35
27313: PUSH
27314: LD_INT 20
27316: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27317: LD_ADDR_OWVAR 28
27321: PUSH
27322: LD_INT 17
27324: ST_TO_ADDR
// hc_gallery :=  ;
27325: LD_ADDR_OWVAR 33
27329: PUSH
27330: LD_STRING 
27332: ST_TO_ADDR
// hc_name :=  ;
27333: LD_ADDR_OWVAR 26
27337: PUSH
27338: LD_STRING 
27340: ST_TO_ADDR
// un := CreateHuman ;
27341: LD_ADDR_VAR 0 2
27345: PUSH
27346: CALL_OW 44
27350: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27351: LD_VAR 0 2
27355: PPUSH
27356: LD_INT 1
27358: PPUSH
27359: CALL_OW 51
// tmp := tmp ^ un ;
27363: LD_ADDR_VAR 0 3
27367: PUSH
27368: LD_VAR 0 3
27372: PUSH
27373: LD_VAR 0 2
27377: ADD
27378: ST_TO_ADDR
// end ;
27379: GO 27275
27381: POP
27382: POP
// repeat wait ( 0 0$1 ) ;
27383: LD_INT 35
27385: PPUSH
27386: CALL_OW 67
// for un in tmp do
27390: LD_ADDR_VAR 0 2
27394: PUSH
27395: LD_VAR 0 3
27399: PUSH
27400: FOR_IN
27401: IFFALSE 27475
// begin if IsDead ( un ) then
27403: LD_VAR 0 2
27407: PPUSH
27408: CALL_OW 301
27412: IFFALSE 27432
// begin tmp := tmp diff un ;
27414: LD_ADDR_VAR 0 3
27418: PUSH
27419: LD_VAR 0 3
27423: PUSH
27424: LD_VAR 0 2
27428: DIFF
27429: ST_TO_ADDR
// continue ;
27430: GO 27400
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27432: LD_VAR 0 2
27436: PPUSH
27437: LD_INT 3
27439: PUSH
27440: LD_INT 22
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PPUSH
27454: CALL_OW 69
27458: PPUSH
27459: LD_VAR 0 2
27463: PPUSH
27464: CALL_OW 74
27468: PPUSH
27469: CALL_OW 115
// end ;
27473: GO 27400
27475: POP
27476: POP
// until not tmp ;
27477: LD_VAR 0 3
27481: NOT
27482: IFFALSE 27383
// end ;
27484: PPOPN 3
27486: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27487: LD_EXP 46
27491: PUSH
27492: LD_EXP 71
27496: AND
27497: IFFALSE 27551
27499: GO 27501
27501: DISABLE
// begin ToLua ( displayTroll(); ) ;
27502: LD_STRING displayTroll();
27504: PPUSH
27505: CALL_OW 559
// wait ( 3 3$00 ) ;
27509: LD_INT 6300
27511: PPUSH
27512: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27516: LD_STRING hideTroll();
27518: PPUSH
27519: CALL_OW 559
// wait ( 1 1$00 ) ;
27523: LD_INT 2100
27525: PPUSH
27526: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27530: LD_STRING displayTroll();
27532: PPUSH
27533: CALL_OW 559
// wait ( 1 1$00 ) ;
27537: LD_INT 2100
27539: PPUSH
27540: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27544: LD_STRING hideTroll();
27546: PPUSH
27547: CALL_OW 559
// end ;
27551: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27552: LD_EXP 46
27556: PUSH
27557: LD_EXP 72
27561: AND
27562: IFFALSE 27625
27564: GO 27566
27566: DISABLE
27567: LD_INT 0
27569: PPUSH
// begin p := 0 ;
27570: LD_ADDR_VAR 0 1
27574: PUSH
27575: LD_INT 0
27577: ST_TO_ADDR
// repeat game_speed := 1 ;
27578: LD_ADDR_OWVAR 65
27582: PUSH
27583: LD_INT 1
27585: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27586: LD_INT 35
27588: PPUSH
27589: CALL_OW 67
// p := p + 1 ;
27593: LD_ADDR_VAR 0 1
27597: PUSH
27598: LD_VAR 0 1
27602: PUSH
27603: LD_INT 1
27605: PLUS
27606: ST_TO_ADDR
// until p >= 60 ;
27607: LD_VAR 0 1
27611: PUSH
27612: LD_INT 60
27614: GREATEREQUAL
27615: IFFALSE 27578
// game_speed := 4 ;
27617: LD_ADDR_OWVAR 65
27621: PUSH
27622: LD_INT 4
27624: ST_TO_ADDR
// end ;
27625: PPOPN 1
27627: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27628: LD_EXP 46
27632: PUSH
27633: LD_EXP 73
27637: AND
27638: IFFALSE 27784
27640: GO 27642
27642: DISABLE
27643: LD_INT 0
27645: PPUSH
27646: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27647: LD_ADDR_VAR 0 1
27651: PUSH
27652: LD_INT 22
27654: PUSH
27655: LD_OWVAR 2
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 2
27666: PUSH
27667: LD_INT 30
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 30
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PPUSH
27696: CALL_OW 69
27700: ST_TO_ADDR
// if not depot then
27701: LD_VAR 0 1
27705: NOT
27706: IFFALSE 27710
// exit ;
27708: GO 27784
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27710: LD_ADDR_VAR 0 2
27714: PUSH
27715: LD_VAR 0 1
27719: PUSH
27720: LD_INT 1
27722: PPUSH
27723: LD_VAR 0 1
27727: PPUSH
27728: CALL_OW 12
27732: ARRAY
27733: PPUSH
27734: CALL_OW 274
27738: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27739: LD_VAR 0 2
27743: PPUSH
27744: LD_INT 1
27746: PPUSH
27747: LD_INT 0
27749: PPUSH
27750: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27754: LD_VAR 0 2
27758: PPUSH
27759: LD_INT 2
27761: PPUSH
27762: LD_INT 0
27764: PPUSH
27765: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27769: LD_VAR 0 2
27773: PPUSH
27774: LD_INT 3
27776: PPUSH
27777: LD_INT 0
27779: PPUSH
27780: CALL_OW 277
// end ;
27784: PPOPN 2
27786: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27787: LD_EXP 46
27791: PUSH
27792: LD_EXP 74
27796: AND
27797: IFFALSE 27894
27799: GO 27801
27801: DISABLE
27802: LD_INT 0
27804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27805: LD_ADDR_VAR 0 1
27809: PUSH
27810: LD_INT 22
27812: PUSH
27813: LD_OWVAR 2
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 21
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 3
27834: PUSH
27835: LD_INT 23
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: LIST
27853: PPUSH
27854: CALL_OW 69
27858: ST_TO_ADDR
// if not tmp then
27859: LD_VAR 0 1
27863: NOT
27864: IFFALSE 27868
// exit ;
27866: GO 27894
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27868: LD_VAR 0 1
27872: PUSH
27873: LD_INT 1
27875: PPUSH
27876: LD_VAR 0 1
27880: PPUSH
27881: CALL_OW 12
27885: ARRAY
27886: PPUSH
27887: LD_INT 200
27889: PPUSH
27890: CALL_OW 234
// end ;
27894: PPOPN 1
27896: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27897: LD_EXP 46
27901: PUSH
27902: LD_EXP 75
27906: AND
27907: IFFALSE 27986
27909: GO 27911
27911: DISABLE
27912: LD_INT 0
27914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27915: LD_ADDR_VAR 0 1
27919: PUSH
27920: LD_INT 22
27922: PUSH
27923: LD_OWVAR 2
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 21
27934: PUSH
27935: LD_INT 2
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PPUSH
27946: CALL_OW 69
27950: ST_TO_ADDR
// if not tmp then
27951: LD_VAR 0 1
27955: NOT
27956: IFFALSE 27960
// exit ;
27958: GO 27986
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27960: LD_VAR 0 1
27964: PUSH
27965: LD_INT 1
27967: PPUSH
27968: LD_VAR 0 1
27972: PPUSH
27973: CALL_OW 12
27977: ARRAY
27978: PPUSH
27979: LD_INT 60
27981: PPUSH
27982: CALL_OW 234
// end ;
27986: PPOPN 1
27988: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27989: LD_EXP 46
27993: PUSH
27994: LD_EXP 76
27998: AND
27999: IFFALSE 28098
28001: GO 28003
28003: DISABLE
28004: LD_INT 0
28006: PPUSH
28007: PPUSH
// begin enable ;
28008: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28009: LD_ADDR_VAR 0 1
28013: PUSH
28014: LD_INT 22
28016: PUSH
28017: LD_OWVAR 2
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 61
28028: PUSH
28029: EMPTY
28030: LIST
28031: PUSH
28032: LD_INT 33
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: PPUSH
28047: CALL_OW 69
28051: ST_TO_ADDR
// if not tmp then
28052: LD_VAR 0 1
28056: NOT
28057: IFFALSE 28061
// exit ;
28059: GO 28098
// for i in tmp do
28061: LD_ADDR_VAR 0 2
28065: PUSH
28066: LD_VAR 0 1
28070: PUSH
28071: FOR_IN
28072: IFFALSE 28096
// if IsControledBy ( i ) then
28074: LD_VAR 0 2
28078: PPUSH
28079: CALL_OW 312
28083: IFFALSE 28094
// ComUnlink ( i ) ;
28085: LD_VAR 0 2
28089: PPUSH
28090: CALL_OW 136
28094: GO 28071
28096: POP
28097: POP
// end ;
28098: PPOPN 2
28100: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28101: LD_EXP 46
28105: PUSH
28106: LD_EXP 77
28110: AND
28111: IFFALSE 28251
28113: GO 28115
28115: DISABLE
28116: LD_INT 0
28118: PPUSH
28119: PPUSH
// begin ToLua ( displayPowell(); ) ;
28120: LD_STRING displayPowell();
28122: PPUSH
28123: CALL_OW 559
// uc_side := 0 ;
28127: LD_ADDR_OWVAR 20
28131: PUSH
28132: LD_INT 0
28134: ST_TO_ADDR
// uc_nation := 2 ;
28135: LD_ADDR_OWVAR 21
28139: PUSH
28140: LD_INT 2
28142: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28143: LD_ADDR_OWVAR 37
28147: PUSH
28148: LD_INT 14
28150: ST_TO_ADDR
// vc_engine := engine_siberite ;
28151: LD_ADDR_OWVAR 39
28155: PUSH
28156: LD_INT 3
28158: ST_TO_ADDR
// vc_control := control_apeman ;
28159: LD_ADDR_OWVAR 38
28163: PUSH
28164: LD_INT 5
28166: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28167: LD_ADDR_OWVAR 40
28171: PUSH
28172: LD_INT 29
28174: ST_TO_ADDR
// un := CreateVehicle ;
28175: LD_ADDR_VAR 0 2
28179: PUSH
28180: CALL_OW 45
28184: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28185: LD_VAR 0 2
28189: PPUSH
28190: LD_INT 1
28192: PPUSH
28193: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28197: LD_INT 35
28199: PPUSH
28200: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28204: LD_VAR 0 2
28208: PPUSH
28209: LD_INT 22
28211: PUSH
28212: LD_OWVAR 2
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PPUSH
28221: CALL_OW 69
28225: PPUSH
28226: LD_VAR 0 2
28230: PPUSH
28231: CALL_OW 74
28235: PPUSH
28236: CALL_OW 115
// until IsDead ( un ) ;
28240: LD_VAR 0 2
28244: PPUSH
28245: CALL_OW 301
28249: IFFALSE 28197
// end ;
28251: PPOPN 2
28253: END
// every 0 0$1 trigger StreamModeActive and sStu do
28254: LD_EXP 46
28258: PUSH
28259: LD_EXP 85
28263: AND
28264: IFFALSE 28280
28266: GO 28268
28268: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28269: LD_STRING displayStucuk();
28271: PPUSH
28272: CALL_OW 559
// ResetFog ;
28276: CALL_OW 335
// end ;
28280: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28281: LD_EXP 46
28285: PUSH
28286: LD_EXP 78
28290: AND
28291: IFFALSE 28432
28293: GO 28295
28295: DISABLE
28296: LD_INT 0
28298: PPUSH
28299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28300: LD_ADDR_VAR 0 2
28304: PUSH
28305: LD_INT 22
28307: PUSH
28308: LD_OWVAR 2
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 21
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: ST_TO_ADDR
// if not tmp then
28336: LD_VAR 0 2
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28432
// un := tmp [ rand ( 1 , tmp ) ] ;
28345: LD_ADDR_VAR 0 1
28349: PUSH
28350: LD_VAR 0 2
28354: PUSH
28355: LD_INT 1
28357: PPUSH
28358: LD_VAR 0 2
28362: PPUSH
28363: CALL_OW 12
28367: ARRAY
28368: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28369: LD_VAR 0 1
28373: PPUSH
28374: LD_INT 0
28376: PPUSH
28377: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28381: LD_VAR 0 1
28385: PPUSH
28386: LD_OWVAR 3
28390: PUSH
28391: LD_VAR 0 1
28395: DIFF
28396: PPUSH
28397: LD_VAR 0 1
28401: PPUSH
28402: CALL_OW 74
28406: PPUSH
28407: CALL_OW 115
// wait ( 0 0$20 ) ;
28411: LD_INT 700
28413: PPUSH
28414: CALL_OW 67
// SetSide ( un , your_side ) ;
28418: LD_VAR 0 1
28422: PPUSH
28423: LD_OWVAR 2
28427: PPUSH
28428: CALL_OW 235
// end ;
28432: PPOPN 2
28434: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28435: LD_EXP 46
28439: PUSH
28440: LD_EXP 79
28444: AND
28445: IFFALSE 28551
28447: GO 28449
28449: DISABLE
28450: LD_INT 0
28452: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28453: LD_ADDR_VAR 0 1
28457: PUSH
28458: LD_INT 22
28460: PUSH
28461: LD_OWVAR 2
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 2
28472: PUSH
28473: LD_INT 30
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 30
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PPUSH
28502: CALL_OW 69
28506: ST_TO_ADDR
// if not depot then
28507: LD_VAR 0 1
28511: NOT
28512: IFFALSE 28516
// exit ;
28514: GO 28551
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28516: LD_VAR 0 1
28520: PUSH
28521: LD_INT 1
28523: ARRAY
28524: PPUSH
28525: CALL_OW 250
28529: PPUSH
28530: LD_VAR 0 1
28534: PUSH
28535: LD_INT 1
28537: ARRAY
28538: PPUSH
28539: CALL_OW 251
28543: PPUSH
28544: LD_INT 70
28546: PPUSH
28547: CALL_OW 495
// end ;
28551: PPOPN 1
28553: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28554: LD_EXP 46
28558: PUSH
28559: LD_EXP 80
28563: AND
28564: IFFALSE 28775
28566: GO 28568
28568: DISABLE
28569: LD_INT 0
28571: PPUSH
28572: PPUSH
28573: PPUSH
28574: PPUSH
28575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28576: LD_ADDR_VAR 0 5
28580: PUSH
28581: LD_INT 22
28583: PUSH
28584: LD_OWVAR 2
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 21
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PPUSH
28607: CALL_OW 69
28611: ST_TO_ADDR
// if not tmp then
28612: LD_VAR 0 5
28616: NOT
28617: IFFALSE 28621
// exit ;
28619: GO 28775
// for i in tmp do
28621: LD_ADDR_VAR 0 1
28625: PUSH
28626: LD_VAR 0 5
28630: PUSH
28631: FOR_IN
28632: IFFALSE 28773
// begin d := rand ( 0 , 5 ) ;
28634: LD_ADDR_VAR 0 4
28638: PUSH
28639: LD_INT 0
28641: PPUSH
28642: LD_INT 5
28644: PPUSH
28645: CALL_OW 12
28649: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28650: LD_ADDR_VAR 0 2
28654: PUSH
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 250
28664: PPUSH
28665: LD_VAR 0 4
28669: PPUSH
28670: LD_INT 3
28672: PPUSH
28673: LD_INT 12
28675: PPUSH
28676: CALL_OW 12
28680: PPUSH
28681: CALL_OW 272
28685: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28686: LD_ADDR_VAR 0 3
28690: PUSH
28691: LD_VAR 0 1
28695: PPUSH
28696: CALL_OW 251
28700: PPUSH
28701: LD_VAR 0 4
28705: PPUSH
28706: LD_INT 3
28708: PPUSH
28709: LD_INT 12
28711: PPUSH
28712: CALL_OW 12
28716: PPUSH
28717: CALL_OW 273
28721: ST_TO_ADDR
// if ValidHex ( x , y ) then
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_VAR 0 3
28731: PPUSH
28732: CALL_OW 488
28736: IFFALSE 28771
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28738: LD_VAR 0 1
28742: PPUSH
28743: LD_VAR 0 2
28747: PPUSH
28748: LD_VAR 0 3
28752: PPUSH
28753: LD_INT 3
28755: PPUSH
28756: LD_INT 6
28758: PPUSH
28759: CALL_OW 12
28763: PPUSH
28764: LD_INT 1
28766: PPUSH
28767: CALL_OW 483
// end ;
28771: GO 28631
28773: POP
28774: POP
// end ;
28775: PPOPN 5
28777: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28778: LD_EXP 46
28782: PUSH
28783: LD_EXP 81
28787: AND
28788: IFFALSE 28882
28790: GO 28792
28792: DISABLE
28793: LD_INT 0
28795: PPUSH
28796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28797: LD_ADDR_VAR 0 2
28801: PUSH
28802: LD_INT 22
28804: PUSH
28805: LD_OWVAR 2
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 32
28816: PUSH
28817: LD_INT 1
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 21
28826: PUSH
28827: LD_INT 2
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: LIST
28838: PPUSH
28839: CALL_OW 69
28843: ST_TO_ADDR
// if not tmp then
28844: LD_VAR 0 2
28848: NOT
28849: IFFALSE 28853
// exit ;
28851: GO 28882
// for i in tmp do
28853: LD_ADDR_VAR 0 1
28857: PUSH
28858: LD_VAR 0 2
28862: PUSH
28863: FOR_IN
28864: IFFALSE 28880
// SetFuel ( i , 0 ) ;
28866: LD_VAR 0 1
28870: PPUSH
28871: LD_INT 0
28873: PPUSH
28874: CALL_OW 240
28878: GO 28863
28880: POP
28881: POP
// end ;
28882: PPOPN 2
28884: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28885: LD_EXP 46
28889: PUSH
28890: LD_EXP 82
28894: AND
28895: IFFALSE 28961
28897: GO 28899
28899: DISABLE
28900: LD_INT 0
28902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28903: LD_ADDR_VAR 0 1
28907: PUSH
28908: LD_INT 22
28910: PUSH
28911: LD_OWVAR 2
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 30
28922: PUSH
28923: LD_INT 29
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PPUSH
28934: CALL_OW 69
28938: ST_TO_ADDR
// if not tmp then
28939: LD_VAR 0 1
28943: NOT
28944: IFFALSE 28948
// exit ;
28946: GO 28961
// DestroyUnit ( tmp [ 1 ] ) ;
28948: LD_VAR 0 1
28952: PUSH
28953: LD_INT 1
28955: ARRAY
28956: PPUSH
28957: CALL_OW 65
// end ;
28961: PPOPN 1
28963: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28964: LD_EXP 46
28968: PUSH
28969: LD_EXP 84
28973: AND
28974: IFFALSE 29103
28976: GO 28978
28978: DISABLE
28979: LD_INT 0
28981: PPUSH
// begin uc_side := 0 ;
28982: LD_ADDR_OWVAR 20
28986: PUSH
28987: LD_INT 0
28989: ST_TO_ADDR
// uc_nation := nation_arabian ;
28990: LD_ADDR_OWVAR 21
28994: PUSH
28995: LD_INT 2
28997: ST_TO_ADDR
// hc_gallery :=  ;
28998: LD_ADDR_OWVAR 33
29002: PUSH
29003: LD_STRING 
29005: ST_TO_ADDR
// hc_name :=  ;
29006: LD_ADDR_OWVAR 26
29010: PUSH
29011: LD_STRING 
29013: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29014: LD_INT 1
29016: PPUSH
29017: LD_INT 11
29019: PPUSH
29020: LD_INT 10
29022: PPUSH
29023: CALL_OW 380
// un := CreateHuman ;
29027: LD_ADDR_VAR 0 1
29031: PUSH
29032: CALL_OW 44
29036: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29037: LD_VAR 0 1
29041: PPUSH
29042: LD_INT 1
29044: PPUSH
29045: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29049: LD_INT 35
29051: PPUSH
29052: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29056: LD_VAR 0 1
29060: PPUSH
29061: LD_INT 22
29063: PUSH
29064: LD_OWVAR 2
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PPUSH
29073: CALL_OW 69
29077: PPUSH
29078: LD_VAR 0 1
29082: PPUSH
29083: CALL_OW 74
29087: PPUSH
29088: CALL_OW 115
// until IsDead ( un ) ;
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 301
29101: IFFALSE 29049
// end ;
29103: PPOPN 1
29105: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29106: LD_EXP 46
29110: PUSH
29111: LD_EXP 86
29115: AND
29116: IFFALSE 29128
29118: GO 29120
29120: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29121: LD_STRING earthquake(getX(game), 0, 32)
29123: PPUSH
29124: CALL_OW 559
29128: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29129: LD_EXP 46
29133: PUSH
29134: LD_EXP 87
29138: AND
29139: IFFALSE 29230
29141: GO 29143
29143: DISABLE
29144: LD_INT 0
29146: PPUSH
// begin enable ;
29147: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29148: LD_ADDR_VAR 0 1
29152: PUSH
29153: LD_INT 22
29155: PUSH
29156: LD_OWVAR 2
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 21
29167: PUSH
29168: LD_INT 2
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 33
29177: PUSH
29178: LD_INT 3
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: LIST
29189: PPUSH
29190: CALL_OW 69
29194: ST_TO_ADDR
// if not tmp then
29195: LD_VAR 0 1
29199: NOT
29200: IFFALSE 29204
// exit ;
29202: GO 29230
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29204: LD_VAR 0 1
29208: PUSH
29209: LD_INT 1
29211: PPUSH
29212: LD_VAR 0 1
29216: PPUSH
29217: CALL_OW 12
29221: ARRAY
29222: PPUSH
29223: LD_INT 1
29225: PPUSH
29226: CALL_OW 234
// end ;
29230: PPOPN 1
29232: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29233: LD_EXP 46
29237: PUSH
29238: LD_EXP 88
29242: AND
29243: IFFALSE 29384
29245: GO 29247
29247: DISABLE
29248: LD_INT 0
29250: PPUSH
29251: PPUSH
29252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29253: LD_ADDR_VAR 0 3
29257: PUSH
29258: LD_INT 22
29260: PUSH
29261: LD_OWVAR 2
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 25
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PPUSH
29284: CALL_OW 69
29288: ST_TO_ADDR
// if not tmp then
29289: LD_VAR 0 3
29293: NOT
29294: IFFALSE 29298
// exit ;
29296: GO 29384
// un := tmp [ rand ( 1 , tmp ) ] ;
29298: LD_ADDR_VAR 0 2
29302: PUSH
29303: LD_VAR 0 3
29307: PUSH
29308: LD_INT 1
29310: PPUSH
29311: LD_VAR 0 3
29315: PPUSH
29316: CALL_OW 12
29320: ARRAY
29321: ST_TO_ADDR
// if Crawls ( un ) then
29322: LD_VAR 0 2
29326: PPUSH
29327: CALL_OW 318
29331: IFFALSE 29342
// ComWalk ( un ) ;
29333: LD_VAR 0 2
29337: PPUSH
29338: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29342: LD_VAR 0 2
29346: PPUSH
29347: LD_INT 9
29349: PPUSH
29350: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29354: LD_INT 28
29356: PPUSH
29357: LD_OWVAR 2
29361: PPUSH
29362: LD_INT 2
29364: PPUSH
29365: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29369: LD_INT 29
29371: PPUSH
29372: LD_OWVAR 2
29376: PPUSH
29377: LD_INT 2
29379: PPUSH
29380: CALL_OW 322
// end ;
29384: PPOPN 3
29386: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29387: LD_EXP 46
29391: PUSH
29392: LD_EXP 89
29396: AND
29397: IFFALSE 29508
29399: GO 29401
29401: DISABLE
29402: LD_INT 0
29404: PPUSH
29405: PPUSH
29406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29407: LD_ADDR_VAR 0 3
29411: PUSH
29412: LD_INT 22
29414: PUSH
29415: LD_OWVAR 2
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 25
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PPUSH
29438: CALL_OW 69
29442: ST_TO_ADDR
// if not tmp then
29443: LD_VAR 0 3
29447: NOT
29448: IFFALSE 29452
// exit ;
29450: GO 29508
// un := tmp [ rand ( 1 , tmp ) ] ;
29452: LD_ADDR_VAR 0 2
29456: PUSH
29457: LD_VAR 0 3
29461: PUSH
29462: LD_INT 1
29464: PPUSH
29465: LD_VAR 0 3
29469: PPUSH
29470: CALL_OW 12
29474: ARRAY
29475: ST_TO_ADDR
// if Crawls ( un ) then
29476: LD_VAR 0 2
29480: PPUSH
29481: CALL_OW 318
29485: IFFALSE 29496
// ComWalk ( un ) ;
29487: LD_VAR 0 2
29491: PPUSH
29492: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29496: LD_VAR 0 2
29500: PPUSH
29501: LD_INT 8
29503: PPUSH
29504: CALL_OW 336
// end ;
29508: PPOPN 3
29510: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29511: LD_EXP 46
29515: PUSH
29516: LD_EXP 90
29520: AND
29521: IFFALSE 29665
29523: GO 29525
29525: DISABLE
29526: LD_INT 0
29528: PPUSH
29529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29530: LD_ADDR_VAR 0 2
29534: PUSH
29535: LD_INT 22
29537: PUSH
29538: LD_OWVAR 2
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 21
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 2
29559: PUSH
29560: LD_INT 34
29562: PUSH
29563: LD_INT 12
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 34
29572: PUSH
29573: LD_INT 51
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 34
29582: PUSH
29583: LD_INT 32
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: LIST
29600: PPUSH
29601: CALL_OW 69
29605: ST_TO_ADDR
// if not tmp then
29606: LD_VAR 0 2
29610: NOT
29611: IFFALSE 29615
// exit ;
29613: GO 29665
// for i in tmp do
29615: LD_ADDR_VAR 0 1
29619: PUSH
29620: LD_VAR 0 2
29624: PUSH
29625: FOR_IN
29626: IFFALSE 29663
// if GetCargo ( i , mat_artifact ) = 0 then
29628: LD_VAR 0 1
29632: PPUSH
29633: LD_INT 4
29635: PPUSH
29636: CALL_OW 289
29640: PUSH
29641: LD_INT 0
29643: EQUAL
29644: IFFALSE 29661
// SetCargo ( i , mat_siberit , 100 ) ;
29646: LD_VAR 0 1
29650: PPUSH
29651: LD_INT 3
29653: PPUSH
29654: LD_INT 100
29656: PPUSH
29657: CALL_OW 290
29661: GO 29625
29663: POP
29664: POP
// end ;
29665: PPOPN 2
29667: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29668: LD_EXP 46
29672: PUSH
29673: LD_EXP 91
29677: AND
29678: IFFALSE 29861
29680: GO 29682
29682: DISABLE
29683: LD_INT 0
29685: PPUSH
29686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29687: LD_ADDR_VAR 0 2
29691: PUSH
29692: LD_INT 22
29694: PUSH
29695: LD_OWVAR 2
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PPUSH
29704: CALL_OW 69
29708: ST_TO_ADDR
// if not tmp then
29709: LD_VAR 0 2
29713: NOT
29714: IFFALSE 29718
// exit ;
29716: GO 29861
// for i := 1 to 2 do
29718: LD_ADDR_VAR 0 1
29722: PUSH
29723: DOUBLE
29724: LD_INT 1
29726: DEC
29727: ST_TO_ADDR
29728: LD_INT 2
29730: PUSH
29731: FOR_TO
29732: IFFALSE 29859
// begin uc_side := your_side ;
29734: LD_ADDR_OWVAR 20
29738: PUSH
29739: LD_OWVAR 2
29743: ST_TO_ADDR
// uc_nation := nation_american ;
29744: LD_ADDR_OWVAR 21
29748: PUSH
29749: LD_INT 1
29751: ST_TO_ADDR
// vc_chassis := us_morphling ;
29752: LD_ADDR_OWVAR 37
29756: PUSH
29757: LD_INT 5
29759: ST_TO_ADDR
// vc_engine := engine_siberite ;
29760: LD_ADDR_OWVAR 39
29764: PUSH
29765: LD_INT 3
29767: ST_TO_ADDR
// vc_control := control_computer ;
29768: LD_ADDR_OWVAR 38
29772: PUSH
29773: LD_INT 3
29775: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29776: LD_ADDR_OWVAR 40
29780: PUSH
29781: LD_INT 10
29783: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29784: LD_VAR 0 2
29788: PUSH
29789: LD_INT 1
29791: ARRAY
29792: PPUSH
29793: CALL_OW 310
29797: NOT
29798: IFFALSE 29845
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29800: CALL_OW 45
29804: PPUSH
29805: LD_VAR 0 2
29809: PUSH
29810: LD_INT 1
29812: ARRAY
29813: PPUSH
29814: CALL_OW 250
29818: PPUSH
29819: LD_VAR 0 2
29823: PUSH
29824: LD_INT 1
29826: ARRAY
29827: PPUSH
29828: CALL_OW 251
29832: PPUSH
29833: LD_INT 12
29835: PPUSH
29836: LD_INT 1
29838: PPUSH
29839: CALL_OW 50
29843: GO 29857
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29845: CALL_OW 45
29849: PPUSH
29850: LD_INT 1
29852: PPUSH
29853: CALL_OW 51
// end ;
29857: GO 29731
29859: POP
29860: POP
// end ;
29861: PPOPN 2
29863: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29864: LD_EXP 46
29868: PUSH
29869: LD_EXP 92
29873: AND
29874: IFFALSE 30096
29876: GO 29878
29878: DISABLE
29879: LD_INT 0
29881: PPUSH
29882: PPUSH
29883: PPUSH
29884: PPUSH
29885: PPUSH
29886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29887: LD_ADDR_VAR 0 6
29891: PUSH
29892: LD_INT 22
29894: PUSH
29895: LD_OWVAR 2
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 21
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 3
29916: PUSH
29917: LD_INT 23
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: LIST
29935: PPUSH
29936: CALL_OW 69
29940: ST_TO_ADDR
// if not tmp then
29941: LD_VAR 0 6
29945: NOT
29946: IFFALSE 29950
// exit ;
29948: GO 30096
// s1 := rand ( 1 , 4 ) ;
29950: LD_ADDR_VAR 0 2
29954: PUSH
29955: LD_INT 1
29957: PPUSH
29958: LD_INT 4
29960: PPUSH
29961: CALL_OW 12
29965: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29966: LD_ADDR_VAR 0 4
29970: PUSH
29971: LD_VAR 0 6
29975: PUSH
29976: LD_INT 1
29978: ARRAY
29979: PPUSH
29980: LD_VAR 0 2
29984: PPUSH
29985: CALL_OW 259
29989: ST_TO_ADDR
// if s1 = 1 then
29990: LD_VAR 0 2
29994: PUSH
29995: LD_INT 1
29997: EQUAL
29998: IFFALSE 30018
// s2 := rand ( 2 , 4 ) else
30000: LD_ADDR_VAR 0 3
30004: PUSH
30005: LD_INT 2
30007: PPUSH
30008: LD_INT 4
30010: PPUSH
30011: CALL_OW 12
30015: ST_TO_ADDR
30016: GO 30026
// s2 := 1 ;
30018: LD_ADDR_VAR 0 3
30022: PUSH
30023: LD_INT 1
30025: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30026: LD_ADDR_VAR 0 5
30030: PUSH
30031: LD_VAR 0 6
30035: PUSH
30036: LD_INT 1
30038: ARRAY
30039: PPUSH
30040: LD_VAR 0 3
30044: PPUSH
30045: CALL_OW 259
30049: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30050: LD_VAR 0 6
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: PPUSH
30059: LD_VAR 0 2
30063: PPUSH
30064: LD_VAR 0 5
30068: PPUSH
30069: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30073: LD_VAR 0 6
30077: PUSH
30078: LD_INT 1
30080: ARRAY
30081: PPUSH
30082: LD_VAR 0 3
30086: PPUSH
30087: LD_VAR 0 4
30091: PPUSH
30092: CALL_OW 237
// end ;
30096: PPOPN 6
30098: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30099: LD_EXP 46
30103: PUSH
30104: LD_EXP 93
30108: AND
30109: IFFALSE 30188
30111: GO 30113
30113: DISABLE
30114: LD_INT 0
30116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30117: LD_ADDR_VAR 0 1
30121: PUSH
30122: LD_INT 22
30124: PUSH
30125: LD_OWVAR 2
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 30
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PPUSH
30148: CALL_OW 69
30152: ST_TO_ADDR
// if not tmp then
30153: LD_VAR 0 1
30157: NOT
30158: IFFALSE 30162
// exit ;
30160: GO 30188
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30162: LD_VAR 0 1
30166: PUSH
30167: LD_INT 1
30169: PPUSH
30170: LD_VAR 0 1
30174: PPUSH
30175: CALL_OW 12
30179: ARRAY
30180: PPUSH
30181: LD_INT 1
30183: PPUSH
30184: CALL_OW 234
// end ;
30188: PPOPN 1
30190: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30191: LD_EXP 46
30195: PUSH
30196: LD_EXP 94
30200: AND
30201: IFFALSE 30313
30203: GO 30205
30205: DISABLE
30206: LD_INT 0
30208: PPUSH
30209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30210: LD_ADDR_VAR 0 2
30214: PUSH
30215: LD_INT 22
30217: PUSH
30218: LD_OWVAR 2
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 2
30229: PUSH
30230: LD_INT 30
30232: PUSH
30233: LD_INT 27
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 30
30242: PUSH
30243: LD_INT 26
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 30
30252: PUSH
30253: LD_INT 28
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PPUSH
30270: CALL_OW 69
30274: ST_TO_ADDR
// if not tmp then
30275: LD_VAR 0 2
30279: NOT
30280: IFFALSE 30284
// exit ;
30282: GO 30313
// for i in tmp do
30284: LD_ADDR_VAR 0 1
30288: PUSH
30289: LD_VAR 0 2
30293: PUSH
30294: FOR_IN
30295: IFFALSE 30311
// SetLives ( i , 1 ) ;
30297: LD_VAR 0 1
30301: PPUSH
30302: LD_INT 1
30304: PPUSH
30305: CALL_OW 234
30309: GO 30294
30311: POP
30312: POP
// end ;
30313: PPOPN 2
30315: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30316: LD_EXP 46
30320: PUSH
30321: LD_EXP 95
30325: AND
30326: IFFALSE 30613
30328: GO 30330
30330: DISABLE
30331: LD_INT 0
30333: PPUSH
30334: PPUSH
30335: PPUSH
// begin i := rand ( 1 , 7 ) ;
30336: LD_ADDR_VAR 0 1
30340: PUSH
30341: LD_INT 1
30343: PPUSH
30344: LD_INT 7
30346: PPUSH
30347: CALL_OW 12
30351: ST_TO_ADDR
// case i of 1 :
30352: LD_VAR 0 1
30356: PUSH
30357: LD_INT 1
30359: DOUBLE
30360: EQUAL
30361: IFTRUE 30365
30363: GO 30375
30365: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30366: LD_STRING earthquake(getX(game), 0, 32)
30368: PPUSH
30369: CALL_OW 559
30373: GO 30613
30375: LD_INT 2
30377: DOUBLE
30378: EQUAL
30379: IFTRUE 30383
30381: GO 30397
30383: POP
// begin ToLua ( displayStucuk(); ) ;
30384: LD_STRING displayStucuk();
30386: PPUSH
30387: CALL_OW 559
// ResetFog ;
30391: CALL_OW 335
// end ; 3 :
30395: GO 30613
30397: LD_INT 3
30399: DOUBLE
30400: EQUAL
30401: IFTRUE 30405
30403: GO 30509
30405: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30406: LD_ADDR_VAR 0 2
30410: PUSH
30411: LD_INT 22
30413: PUSH
30414: LD_OWVAR 2
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 25
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PPUSH
30437: CALL_OW 69
30441: ST_TO_ADDR
// if not tmp then
30442: LD_VAR 0 2
30446: NOT
30447: IFFALSE 30451
// exit ;
30449: GO 30613
// un := tmp [ rand ( 1 , tmp ) ] ;
30451: LD_ADDR_VAR 0 3
30455: PUSH
30456: LD_VAR 0 2
30460: PUSH
30461: LD_INT 1
30463: PPUSH
30464: LD_VAR 0 2
30468: PPUSH
30469: CALL_OW 12
30473: ARRAY
30474: ST_TO_ADDR
// if Crawls ( un ) then
30475: LD_VAR 0 3
30479: PPUSH
30480: CALL_OW 318
30484: IFFALSE 30495
// ComWalk ( un ) ;
30486: LD_VAR 0 3
30490: PPUSH
30491: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30495: LD_VAR 0 3
30499: PPUSH
30500: LD_INT 8
30502: PPUSH
30503: CALL_OW 336
// end ; 4 :
30507: GO 30613
30509: LD_INT 4
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 30591
30517: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30518: LD_ADDR_VAR 0 2
30522: PUSH
30523: LD_INT 22
30525: PUSH
30526: LD_OWVAR 2
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 30
30537: PUSH
30538: LD_INT 29
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PPUSH
30549: CALL_OW 69
30553: ST_TO_ADDR
// if not tmp then
30554: LD_VAR 0 2
30558: NOT
30559: IFFALSE 30563
// exit ;
30561: GO 30613
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30563: LD_VAR 0 2
30567: PUSH
30568: LD_INT 1
30570: ARRAY
30571: PPUSH
30572: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30576: LD_VAR 0 2
30580: PUSH
30581: LD_INT 1
30583: ARRAY
30584: PPUSH
30585: CALL_OW 65
// end ; 5 .. 7 :
30589: GO 30613
30591: LD_INT 5
30593: DOUBLE
30594: GREATEREQUAL
30595: IFFALSE 30603
30597: LD_INT 7
30599: DOUBLE
30600: LESSEQUAL
30601: IFTRUE 30605
30603: GO 30612
30605: POP
// StreamSibBomb ; end ;
30606: CALL 26850 0 0
30610: GO 30613
30612: POP
// end ;
30613: PPOPN 3
30615: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30616: LD_EXP 46
30620: PUSH
30621: LD_EXP 96
30625: AND
30626: IFFALSE 30782
30628: GO 30630
30630: DISABLE
30631: LD_INT 0
30633: PPUSH
30634: PPUSH
30635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30636: LD_ADDR_VAR 0 2
30640: PUSH
30641: LD_INT 81
30643: PUSH
30644: LD_OWVAR 2
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 2
30655: PUSH
30656: LD_INT 21
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 21
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PPUSH
30685: CALL_OW 69
30689: ST_TO_ADDR
// if not tmp then
30690: LD_VAR 0 2
30694: NOT
30695: IFFALSE 30699
// exit ;
30697: GO 30782
// p := 0 ;
30699: LD_ADDR_VAR 0 3
30703: PUSH
30704: LD_INT 0
30706: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30707: LD_INT 35
30709: PPUSH
30710: CALL_OW 67
// p := p + 1 ;
30714: LD_ADDR_VAR 0 3
30718: PUSH
30719: LD_VAR 0 3
30723: PUSH
30724: LD_INT 1
30726: PLUS
30727: ST_TO_ADDR
// for i in tmp do
30728: LD_ADDR_VAR 0 1
30732: PUSH
30733: LD_VAR 0 2
30737: PUSH
30738: FOR_IN
30739: IFFALSE 30770
// if GetLives ( i ) < 1000 then
30741: LD_VAR 0 1
30745: PPUSH
30746: CALL_OW 256
30750: PUSH
30751: LD_INT 1000
30753: LESS
30754: IFFALSE 30768
// SetLives ( i , 1000 ) ;
30756: LD_VAR 0 1
30760: PPUSH
30761: LD_INT 1000
30763: PPUSH
30764: CALL_OW 234
30768: GO 30738
30770: POP
30771: POP
// until p > 20 ;
30772: LD_VAR 0 3
30776: PUSH
30777: LD_INT 20
30779: GREATER
30780: IFFALSE 30707
// end ;
30782: PPOPN 3
30784: END
// every 0 0$1 trigger StreamModeActive and sTime do
30785: LD_EXP 46
30789: PUSH
30790: LD_EXP 97
30794: AND
30795: IFFALSE 30830
30797: GO 30799
30799: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30800: LD_INT 28
30802: PPUSH
30803: LD_OWVAR 2
30807: PPUSH
30808: LD_INT 2
30810: PPUSH
30811: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30815: LD_INT 30
30817: PPUSH
30818: LD_OWVAR 2
30822: PPUSH
30823: LD_INT 2
30825: PPUSH
30826: CALL_OW 322
// end ;
30830: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30831: LD_EXP 46
30835: PUSH
30836: LD_EXP 98
30840: AND
30841: IFFALSE 30962
30843: GO 30845
30845: DISABLE
30846: LD_INT 0
30848: PPUSH
30849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30850: LD_ADDR_VAR 0 2
30854: PUSH
30855: LD_INT 22
30857: PUSH
30858: LD_OWVAR 2
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 21
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 3
30879: PUSH
30880: LD_INT 23
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: LIST
30898: PPUSH
30899: CALL_OW 69
30903: ST_TO_ADDR
// if not tmp then
30904: LD_VAR 0 2
30908: NOT
30909: IFFALSE 30913
// exit ;
30911: GO 30962
// for i in tmp do
30913: LD_ADDR_VAR 0 1
30917: PUSH
30918: LD_VAR 0 2
30922: PUSH
30923: FOR_IN
30924: IFFALSE 30960
// begin if Crawls ( i ) then
30926: LD_VAR 0 1
30930: PPUSH
30931: CALL_OW 318
30935: IFFALSE 30946
// ComWalk ( i ) ;
30937: LD_VAR 0 1
30941: PPUSH
30942: CALL_OW 138
// SetClass ( i , 2 ) ;
30946: LD_VAR 0 1
30950: PPUSH
30951: LD_INT 2
30953: PPUSH
30954: CALL_OW 336
// end ;
30958: GO 30923
30960: POP
30961: POP
// end ;
30962: PPOPN 2
30964: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30965: LD_EXP 46
30969: PUSH
30970: LD_EXP 99
30974: AND
30975: IFFALSE 31263
30977: GO 30979
30979: DISABLE
30980: LD_INT 0
30982: PPUSH
30983: PPUSH
30984: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30985: LD_OWVAR 2
30989: PPUSH
30990: LD_INT 9
30992: PPUSH
30993: LD_INT 1
30995: PPUSH
30996: LD_INT 1
30998: PPUSH
30999: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31003: LD_INT 9
31005: PPUSH
31006: LD_OWVAR 2
31010: PPUSH
31011: CALL_OW 343
// uc_side := 9 ;
31015: LD_ADDR_OWVAR 20
31019: PUSH
31020: LD_INT 9
31022: ST_TO_ADDR
// uc_nation := 2 ;
31023: LD_ADDR_OWVAR 21
31027: PUSH
31028: LD_INT 2
31030: ST_TO_ADDR
// hc_name := Dark Warrior ;
31031: LD_ADDR_OWVAR 26
31035: PUSH
31036: LD_STRING Dark Warrior
31038: ST_TO_ADDR
// hc_gallery :=  ;
31039: LD_ADDR_OWVAR 33
31043: PUSH
31044: LD_STRING 
31046: ST_TO_ADDR
// hc_noskilllimit := true ;
31047: LD_ADDR_OWVAR 76
31051: PUSH
31052: LD_INT 1
31054: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31055: LD_ADDR_OWVAR 31
31059: PUSH
31060: LD_INT 30
31062: PUSH
31063: LD_INT 30
31065: PUSH
31066: LD_INT 30
31068: PUSH
31069: LD_INT 30
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: ST_TO_ADDR
// un := CreateHuman ;
31078: LD_ADDR_VAR 0 3
31082: PUSH
31083: CALL_OW 44
31087: ST_TO_ADDR
// hc_noskilllimit := false ;
31088: LD_ADDR_OWVAR 76
31092: PUSH
31093: LD_INT 0
31095: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31096: LD_VAR 0 3
31100: PPUSH
31101: LD_INT 1
31103: PPUSH
31104: CALL_OW 51
// ToLua ( playRanger() ) ;
31108: LD_STRING playRanger()
31110: PPUSH
31111: CALL_OW 559
// p := 0 ;
31115: LD_ADDR_VAR 0 2
31119: PUSH
31120: LD_INT 0
31122: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31123: LD_INT 35
31125: PPUSH
31126: CALL_OW 67
// p := p + 1 ;
31130: LD_ADDR_VAR 0 2
31134: PUSH
31135: LD_VAR 0 2
31139: PUSH
31140: LD_INT 1
31142: PLUS
31143: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31144: LD_VAR 0 3
31148: PPUSH
31149: CALL_OW 256
31153: PUSH
31154: LD_INT 1000
31156: LESS
31157: IFFALSE 31171
// SetLives ( un , 1000 ) ;
31159: LD_VAR 0 3
31163: PPUSH
31164: LD_INT 1000
31166: PPUSH
31167: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31171: LD_VAR 0 3
31175: PPUSH
31176: LD_INT 81
31178: PUSH
31179: LD_OWVAR 2
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 91
31190: PUSH
31191: LD_VAR 0 3
31195: PUSH
31196: LD_INT 30
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: LIST
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PPUSH
31208: CALL_OW 69
31212: PPUSH
31213: LD_VAR 0 3
31217: PPUSH
31218: CALL_OW 74
31222: PPUSH
31223: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31227: LD_VAR 0 2
31231: PUSH
31232: LD_INT 80
31234: GREATER
31235: PUSH
31236: LD_VAR 0 3
31240: PPUSH
31241: CALL_OW 301
31245: OR
31246: IFFALSE 31123
// if un then
31248: LD_VAR 0 3
31252: IFFALSE 31263
// RemoveUnit ( un ) ;
31254: LD_VAR 0 3
31258: PPUSH
31259: CALL_OW 64
// end ;
31263: PPOPN 3
31265: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31266: LD_EXP 100
31270: IFFALSE 31386
31272: GO 31274
31274: DISABLE
31275: LD_INT 0
31277: PPUSH
31278: PPUSH
31279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31280: LD_ADDR_VAR 0 2
31284: PUSH
31285: LD_INT 81
31287: PUSH
31288: LD_OWVAR 2
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 21
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PPUSH
31311: CALL_OW 69
31315: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31316: LD_STRING playComputer()
31318: PPUSH
31319: CALL_OW 559
// if not tmp then
31323: LD_VAR 0 2
31327: NOT
31328: IFFALSE 31332
// exit ;
31330: GO 31386
// for i in tmp do
31332: LD_ADDR_VAR 0 1
31336: PUSH
31337: LD_VAR 0 2
31341: PUSH
31342: FOR_IN
31343: IFFALSE 31384
// for j := 1 to 4 do
31345: LD_ADDR_VAR 0 3
31349: PUSH
31350: DOUBLE
31351: LD_INT 1
31353: DEC
31354: ST_TO_ADDR
31355: LD_INT 4
31357: PUSH
31358: FOR_TO
31359: IFFALSE 31380
// SetSkill ( i , j , 10 ) ;
31361: LD_VAR 0 1
31365: PPUSH
31366: LD_VAR 0 3
31370: PPUSH
31371: LD_INT 10
31373: PPUSH
31374: CALL_OW 237
31378: GO 31358
31380: POP
31381: POP
31382: GO 31342
31384: POP
31385: POP
// end ;
31386: PPOPN 3
31388: END
// every 0 0$1 trigger s30 do var i , tmp ;
31389: LD_EXP 101
31393: IFFALSE 31462
31395: GO 31397
31397: DISABLE
31398: LD_INT 0
31400: PPUSH
31401: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31402: LD_ADDR_VAR 0 2
31406: PUSH
31407: LD_INT 22
31409: PUSH
31410: LD_OWVAR 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PPUSH
31419: CALL_OW 69
31423: ST_TO_ADDR
// if not tmp then
31424: LD_VAR 0 2
31428: NOT
31429: IFFALSE 31433
// exit ;
31431: GO 31462
// for i in tmp do
31433: LD_ADDR_VAR 0 1
31437: PUSH
31438: LD_VAR 0 2
31442: PUSH
31443: FOR_IN
31444: IFFALSE 31460
// SetLives ( i , 300 ) ;
31446: LD_VAR 0 1
31450: PPUSH
31451: LD_INT 300
31453: PPUSH
31454: CALL_OW 234
31458: GO 31443
31460: POP
31461: POP
// end ;
31462: PPOPN 2
31464: END
// every 0 0$1 trigger s60 do var i , tmp ;
31465: LD_EXP 102
31469: IFFALSE 31538
31471: GO 31473
31473: DISABLE
31474: LD_INT 0
31476: PPUSH
31477: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31478: LD_ADDR_VAR 0 2
31482: PUSH
31483: LD_INT 22
31485: PUSH
31486: LD_OWVAR 2
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PPUSH
31495: CALL_OW 69
31499: ST_TO_ADDR
// if not tmp then
31500: LD_VAR 0 2
31504: NOT
31505: IFFALSE 31509
// exit ;
31507: GO 31538
// for i in tmp do
31509: LD_ADDR_VAR 0 1
31513: PUSH
31514: LD_VAR 0 2
31518: PUSH
31519: FOR_IN
31520: IFFALSE 31536
// SetLives ( i , 600 ) ;
31522: LD_VAR 0 1
31526: PPUSH
31527: LD_INT 600
31529: PPUSH
31530: CALL_OW 234
31534: GO 31519
31536: POP
31537: POP
// end ;
31538: PPOPN 2
31540: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31541: LD_INT 0
31543: PPUSH
// case cmd of 301 :
31544: LD_VAR 0 1
31548: PUSH
31549: LD_INT 301
31551: DOUBLE
31552: EQUAL
31553: IFTRUE 31557
31555: GO 31589
31557: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31558: LD_VAR 0 6
31562: PPUSH
31563: LD_VAR 0 7
31567: PPUSH
31568: LD_VAR 0 8
31572: PPUSH
31573: LD_VAR 0 4
31577: PPUSH
31578: LD_VAR 0 5
31582: PPUSH
31583: CALL 32798 0 5
31587: GO 31710
31589: LD_INT 302
31591: DOUBLE
31592: EQUAL
31593: IFTRUE 31597
31595: GO 31634
31597: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31598: LD_VAR 0 6
31602: PPUSH
31603: LD_VAR 0 7
31607: PPUSH
31608: LD_VAR 0 8
31612: PPUSH
31613: LD_VAR 0 9
31617: PPUSH
31618: LD_VAR 0 4
31622: PPUSH
31623: LD_VAR 0 5
31627: PPUSH
31628: CALL 32889 0 6
31632: GO 31710
31634: LD_INT 303
31636: DOUBLE
31637: EQUAL
31638: IFTRUE 31642
31640: GO 31679
31642: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31643: LD_VAR 0 6
31647: PPUSH
31648: LD_VAR 0 7
31652: PPUSH
31653: LD_VAR 0 8
31657: PPUSH
31658: LD_VAR 0 9
31662: PPUSH
31663: LD_VAR 0 4
31667: PPUSH
31668: LD_VAR 0 5
31672: PPUSH
31673: CALL 31715 0 6
31677: GO 31710
31679: LD_INT 304
31681: DOUBLE
31682: EQUAL
31683: IFTRUE 31687
31685: GO 31709
31687: POP
// hHackTeleport ( unit , x , y ) ; end ;
31688: LD_VAR 0 2
31692: PPUSH
31693: LD_VAR 0 4
31697: PPUSH
31698: LD_VAR 0 5
31702: PPUSH
31703: CALL 33482 0 3
31707: GO 31710
31709: POP
// end ;
31710: LD_VAR 0 12
31714: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31715: LD_INT 0
31717: PPUSH
31718: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31719: LD_VAR 0 1
31723: PUSH
31724: LD_INT 1
31726: LESS
31727: PUSH
31728: LD_VAR 0 1
31732: PUSH
31733: LD_INT 3
31735: GREATER
31736: OR
31737: PUSH
31738: LD_VAR 0 5
31742: PPUSH
31743: LD_VAR 0 6
31747: PPUSH
31748: CALL_OW 428
31752: OR
31753: IFFALSE 31757
// exit ;
31755: GO 32485
// uc_side := your_side ;
31757: LD_ADDR_OWVAR 20
31761: PUSH
31762: LD_OWVAR 2
31766: ST_TO_ADDR
// uc_nation := nation ;
31767: LD_ADDR_OWVAR 21
31771: PUSH
31772: LD_VAR 0 1
31776: ST_TO_ADDR
// bc_level = 1 ;
31777: LD_ADDR_OWVAR 43
31781: PUSH
31782: LD_INT 1
31784: ST_TO_ADDR
// case btype of 1 :
31785: LD_VAR 0 2
31789: PUSH
31790: LD_INT 1
31792: DOUBLE
31793: EQUAL
31794: IFTRUE 31798
31796: GO 31809
31798: POP
// bc_type := b_depot ; 2 :
31799: LD_ADDR_OWVAR 42
31803: PUSH
31804: LD_INT 0
31806: ST_TO_ADDR
31807: GO 32429
31809: LD_INT 2
31811: DOUBLE
31812: EQUAL
31813: IFTRUE 31817
31815: GO 31828
31817: POP
// bc_type := b_warehouse ; 3 :
31818: LD_ADDR_OWVAR 42
31822: PUSH
31823: LD_INT 1
31825: ST_TO_ADDR
31826: GO 32429
31828: LD_INT 3
31830: DOUBLE
31831: EQUAL
31832: IFTRUE 31836
31834: GO 31847
31836: POP
// bc_type := b_lab ; 4 .. 9 :
31837: LD_ADDR_OWVAR 42
31841: PUSH
31842: LD_INT 6
31844: ST_TO_ADDR
31845: GO 32429
31847: LD_INT 4
31849: DOUBLE
31850: GREATEREQUAL
31851: IFFALSE 31859
31853: LD_INT 9
31855: DOUBLE
31856: LESSEQUAL
31857: IFTRUE 31861
31859: GO 31921
31861: POP
// begin bc_type := b_lab_half ;
31862: LD_ADDR_OWVAR 42
31866: PUSH
31867: LD_INT 7
31869: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31870: LD_ADDR_OWVAR 44
31874: PUSH
31875: LD_INT 10
31877: PUSH
31878: LD_INT 11
31880: PUSH
31881: LD_INT 12
31883: PUSH
31884: LD_INT 15
31886: PUSH
31887: LD_INT 14
31889: PUSH
31890: LD_INT 13
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: PUSH
31901: LD_VAR 0 2
31905: PUSH
31906: LD_INT 3
31908: MINUS
31909: ARRAY
31910: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
31911: LD_ADDR_OWVAR 45
31915: PUSH
31916: LD_INT 9
31918: ST_TO_ADDR
// end ; 10 .. 13 :
31919: GO 32429
31921: LD_INT 10
31923: DOUBLE
31924: GREATEREQUAL
31925: IFFALSE 31933
31927: LD_INT 13
31929: DOUBLE
31930: LESSEQUAL
31931: IFTRUE 31935
31933: GO 32012
31935: POP
// begin bc_type := b_lab_full ;
31936: LD_ADDR_OWVAR 42
31940: PUSH
31941: LD_INT 8
31943: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31944: LD_ADDR_OWVAR 44
31948: PUSH
31949: LD_INT 10
31951: PUSH
31952: LD_INT 12
31954: PUSH
31955: LD_INT 14
31957: PUSH
31958: LD_INT 13
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: PUSH
31967: LD_VAR 0 2
31971: PUSH
31972: LD_INT 9
31974: MINUS
31975: ARRAY
31976: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31977: LD_ADDR_OWVAR 45
31981: PUSH
31982: LD_INT 11
31984: PUSH
31985: LD_INT 15
31987: PUSH
31988: LD_INT 12
31990: PUSH
31991: LD_INT 15
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: PUSH
32000: LD_VAR 0 2
32004: PUSH
32005: LD_INT 9
32007: MINUS
32008: ARRAY
32009: ST_TO_ADDR
// end ; 14 :
32010: GO 32429
32012: LD_INT 14
32014: DOUBLE
32015: EQUAL
32016: IFTRUE 32020
32018: GO 32031
32020: POP
// bc_type := b_workshop ; 15 :
32021: LD_ADDR_OWVAR 42
32025: PUSH
32026: LD_INT 2
32028: ST_TO_ADDR
32029: GO 32429
32031: LD_INT 15
32033: DOUBLE
32034: EQUAL
32035: IFTRUE 32039
32037: GO 32050
32039: POP
// bc_type := b_factory ; 16 :
32040: LD_ADDR_OWVAR 42
32044: PUSH
32045: LD_INT 3
32047: ST_TO_ADDR
32048: GO 32429
32050: LD_INT 16
32052: DOUBLE
32053: EQUAL
32054: IFTRUE 32058
32056: GO 32069
32058: POP
// bc_type := b_ext_gun ; 17 :
32059: LD_ADDR_OWVAR 42
32063: PUSH
32064: LD_INT 17
32066: ST_TO_ADDR
32067: GO 32429
32069: LD_INT 17
32071: DOUBLE
32072: EQUAL
32073: IFTRUE 32077
32075: GO 32105
32077: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32078: LD_ADDR_OWVAR 42
32082: PUSH
32083: LD_INT 19
32085: PUSH
32086: LD_INT 23
32088: PUSH
32089: LD_INT 19
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: PUSH
32097: LD_VAR 0 1
32101: ARRAY
32102: ST_TO_ADDR
32103: GO 32429
32105: LD_INT 18
32107: DOUBLE
32108: EQUAL
32109: IFTRUE 32113
32111: GO 32124
32113: POP
// bc_type := b_ext_radar ; 19 :
32114: LD_ADDR_OWVAR 42
32118: PUSH
32119: LD_INT 20
32121: ST_TO_ADDR
32122: GO 32429
32124: LD_INT 19
32126: DOUBLE
32127: EQUAL
32128: IFTRUE 32132
32130: GO 32143
32132: POP
// bc_type := b_ext_radio ; 20 :
32133: LD_ADDR_OWVAR 42
32137: PUSH
32138: LD_INT 22
32140: ST_TO_ADDR
32141: GO 32429
32143: LD_INT 20
32145: DOUBLE
32146: EQUAL
32147: IFTRUE 32151
32149: GO 32162
32151: POP
// bc_type := b_ext_siberium ; 21 :
32152: LD_ADDR_OWVAR 42
32156: PUSH
32157: LD_INT 21
32159: ST_TO_ADDR
32160: GO 32429
32162: LD_INT 21
32164: DOUBLE
32165: EQUAL
32166: IFTRUE 32170
32168: GO 32181
32170: POP
// bc_type := b_ext_computer ; 22 :
32171: LD_ADDR_OWVAR 42
32175: PUSH
32176: LD_INT 24
32178: ST_TO_ADDR
32179: GO 32429
32181: LD_INT 22
32183: DOUBLE
32184: EQUAL
32185: IFTRUE 32189
32187: GO 32200
32189: POP
// bc_type := b_ext_track ; 23 :
32190: LD_ADDR_OWVAR 42
32194: PUSH
32195: LD_INT 16
32197: ST_TO_ADDR
32198: GO 32429
32200: LD_INT 23
32202: DOUBLE
32203: EQUAL
32204: IFTRUE 32208
32206: GO 32219
32208: POP
// bc_type := b_ext_laser ; 24 :
32209: LD_ADDR_OWVAR 42
32213: PUSH
32214: LD_INT 25
32216: ST_TO_ADDR
32217: GO 32429
32219: LD_INT 24
32221: DOUBLE
32222: EQUAL
32223: IFTRUE 32227
32225: GO 32238
32227: POP
// bc_type := b_control_tower ; 25 :
32228: LD_ADDR_OWVAR 42
32232: PUSH
32233: LD_INT 36
32235: ST_TO_ADDR
32236: GO 32429
32238: LD_INT 25
32240: DOUBLE
32241: EQUAL
32242: IFTRUE 32246
32244: GO 32257
32246: POP
// bc_type := b_breastwork ; 26 :
32247: LD_ADDR_OWVAR 42
32251: PUSH
32252: LD_INT 31
32254: ST_TO_ADDR
32255: GO 32429
32257: LD_INT 26
32259: DOUBLE
32260: EQUAL
32261: IFTRUE 32265
32263: GO 32276
32265: POP
// bc_type := b_bunker ; 27 :
32266: LD_ADDR_OWVAR 42
32270: PUSH
32271: LD_INT 32
32273: ST_TO_ADDR
32274: GO 32429
32276: LD_INT 27
32278: DOUBLE
32279: EQUAL
32280: IFTRUE 32284
32282: GO 32295
32284: POP
// bc_type := b_turret ; 28 :
32285: LD_ADDR_OWVAR 42
32289: PUSH
32290: LD_INT 33
32292: ST_TO_ADDR
32293: GO 32429
32295: LD_INT 28
32297: DOUBLE
32298: EQUAL
32299: IFTRUE 32303
32301: GO 32314
32303: POP
// bc_type := b_armoury ; 29 :
32304: LD_ADDR_OWVAR 42
32308: PUSH
32309: LD_INT 4
32311: ST_TO_ADDR
32312: GO 32429
32314: LD_INT 29
32316: DOUBLE
32317: EQUAL
32318: IFTRUE 32322
32320: GO 32333
32322: POP
// bc_type := b_barracks ; 30 :
32323: LD_ADDR_OWVAR 42
32327: PUSH
32328: LD_INT 5
32330: ST_TO_ADDR
32331: GO 32429
32333: LD_INT 30
32335: DOUBLE
32336: EQUAL
32337: IFTRUE 32341
32339: GO 32352
32341: POP
// bc_type := b_solar_power ; 31 :
32342: LD_ADDR_OWVAR 42
32346: PUSH
32347: LD_INT 27
32349: ST_TO_ADDR
32350: GO 32429
32352: LD_INT 31
32354: DOUBLE
32355: EQUAL
32356: IFTRUE 32360
32358: GO 32371
32360: POP
// bc_type := b_oil_power ; 32 :
32361: LD_ADDR_OWVAR 42
32365: PUSH
32366: LD_INT 26
32368: ST_TO_ADDR
32369: GO 32429
32371: LD_INT 32
32373: DOUBLE
32374: EQUAL
32375: IFTRUE 32379
32377: GO 32390
32379: POP
// bc_type := b_siberite_power ; 33 :
32380: LD_ADDR_OWVAR 42
32384: PUSH
32385: LD_INT 28
32387: ST_TO_ADDR
32388: GO 32429
32390: LD_INT 33
32392: DOUBLE
32393: EQUAL
32394: IFTRUE 32398
32396: GO 32409
32398: POP
// bc_type := b_oil_mine ; 34 :
32399: LD_ADDR_OWVAR 42
32403: PUSH
32404: LD_INT 29
32406: ST_TO_ADDR
32407: GO 32429
32409: LD_INT 34
32411: DOUBLE
32412: EQUAL
32413: IFTRUE 32417
32415: GO 32428
32417: POP
// bc_type := b_siberite_mine ; end ;
32418: LD_ADDR_OWVAR 42
32422: PUSH
32423: LD_INT 30
32425: ST_TO_ADDR
32426: GO 32429
32428: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32429: LD_ADDR_VAR 0 8
32433: PUSH
32434: LD_VAR 0 5
32438: PPUSH
32439: LD_VAR 0 6
32443: PPUSH
32444: LD_VAR 0 3
32448: PPUSH
32449: CALL_OW 47
32453: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32454: LD_OWVAR 42
32458: PUSH
32459: LD_INT 32
32461: PUSH
32462: LD_INT 33
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: IN
32469: IFFALSE 32485
// PlaceWeaponTurret ( b , weapon ) ;
32471: LD_VAR 0 8
32475: PPUSH
32476: LD_VAR 0 4
32480: PPUSH
32481: CALL_OW 431
// end ;
32485: LD_VAR 0 7
32489: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32490: LD_INT 0
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32496: LD_ADDR_VAR 0 4
32500: PUSH
32501: LD_INT 22
32503: PUSH
32504: LD_OWVAR 2
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: LD_INT 30
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 30
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: LIST
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PPUSH
32545: CALL_OW 69
32549: ST_TO_ADDR
// if not tmp then
32550: LD_VAR 0 4
32554: NOT
32555: IFFALSE 32559
// exit ;
32557: GO 32618
// for i in tmp do
32559: LD_ADDR_VAR 0 2
32563: PUSH
32564: LD_VAR 0 4
32568: PUSH
32569: FOR_IN
32570: IFFALSE 32616
// for j = 1 to 3 do
32572: LD_ADDR_VAR 0 3
32576: PUSH
32577: DOUBLE
32578: LD_INT 1
32580: DEC
32581: ST_TO_ADDR
32582: LD_INT 3
32584: PUSH
32585: FOR_TO
32586: IFFALSE 32612
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32588: LD_VAR 0 2
32592: PPUSH
32593: CALL_OW 274
32597: PPUSH
32598: LD_VAR 0 3
32602: PPUSH
32603: LD_INT 99999
32605: PPUSH
32606: CALL_OW 277
32610: GO 32585
32612: POP
32613: POP
32614: GO 32569
32616: POP
32617: POP
// end ;
32618: LD_VAR 0 1
32622: RET
// export function hHackSetLevel10 ; var i , j ; begin
32623: LD_INT 0
32625: PPUSH
32626: PPUSH
32627: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32628: LD_ADDR_VAR 0 2
32632: PUSH
32633: LD_INT 21
32635: PUSH
32636: LD_INT 1
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PPUSH
32643: CALL_OW 69
32647: PUSH
32648: FOR_IN
32649: IFFALSE 32701
// if IsSelected ( i ) then
32651: LD_VAR 0 2
32655: PPUSH
32656: CALL_OW 306
32660: IFFALSE 32699
// begin for j := 1 to 4 do
32662: LD_ADDR_VAR 0 3
32666: PUSH
32667: DOUBLE
32668: LD_INT 1
32670: DEC
32671: ST_TO_ADDR
32672: LD_INT 4
32674: PUSH
32675: FOR_TO
32676: IFFALSE 32697
// SetSkill ( i , j , 10 ) ;
32678: LD_VAR 0 2
32682: PPUSH
32683: LD_VAR 0 3
32687: PPUSH
32688: LD_INT 10
32690: PPUSH
32691: CALL_OW 237
32695: GO 32675
32697: POP
32698: POP
// end ;
32699: GO 32648
32701: POP
32702: POP
// end ;
32703: LD_VAR 0 1
32707: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32708: LD_INT 0
32710: PPUSH
32711: PPUSH
32712: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32713: LD_ADDR_VAR 0 2
32717: PUSH
32718: LD_INT 22
32720: PUSH
32721: LD_OWVAR 2
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 21
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PPUSH
32744: CALL_OW 69
32748: PUSH
32749: FOR_IN
32750: IFFALSE 32791
// begin for j := 1 to 4 do
32752: LD_ADDR_VAR 0 3
32756: PUSH
32757: DOUBLE
32758: LD_INT 1
32760: DEC
32761: ST_TO_ADDR
32762: LD_INT 4
32764: PUSH
32765: FOR_TO
32766: IFFALSE 32787
// SetSkill ( i , j , 10 ) ;
32768: LD_VAR 0 2
32772: PPUSH
32773: LD_VAR 0 3
32777: PPUSH
32778: LD_INT 10
32780: PPUSH
32781: CALL_OW 237
32785: GO 32765
32787: POP
32788: POP
// end ;
32789: GO 32749
32791: POP
32792: POP
// end ;
32793: LD_VAR 0 1
32797: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32798: LD_INT 0
32800: PPUSH
// uc_side := your_side ;
32801: LD_ADDR_OWVAR 20
32805: PUSH
32806: LD_OWVAR 2
32810: ST_TO_ADDR
// uc_nation := nation ;
32811: LD_ADDR_OWVAR 21
32815: PUSH
32816: LD_VAR 0 1
32820: ST_TO_ADDR
// InitHc ;
32821: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32825: LD_INT 0
32827: PPUSH
32828: LD_VAR 0 2
32832: PPUSH
32833: LD_VAR 0 3
32837: PPUSH
32838: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32842: LD_VAR 0 4
32846: PPUSH
32847: LD_VAR 0 5
32851: PPUSH
32852: CALL_OW 428
32856: PUSH
32857: LD_INT 0
32859: EQUAL
32860: IFFALSE 32884
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32862: CALL_OW 44
32866: PPUSH
32867: LD_VAR 0 4
32871: PPUSH
32872: LD_VAR 0 5
32876: PPUSH
32877: LD_INT 1
32879: PPUSH
32880: CALL_OW 48
// end ;
32884: LD_VAR 0 6
32888: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32889: LD_INT 0
32891: PPUSH
32892: PPUSH
// uc_side := your_side ;
32893: LD_ADDR_OWVAR 20
32897: PUSH
32898: LD_OWVAR 2
32902: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32903: LD_VAR 0 1
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: LD_INT 2
32913: PUSH
32914: LD_INT 3
32916: PUSH
32917: LD_INT 4
32919: PUSH
32920: LD_INT 5
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: IN
32930: IFFALSE 32942
// uc_nation := nation_american else
32932: LD_ADDR_OWVAR 21
32936: PUSH
32937: LD_INT 1
32939: ST_TO_ADDR
32940: GO 32985
// if chassis in [ 11 , 12 , 13 , 14 ] then
32942: LD_VAR 0 1
32946: PUSH
32947: LD_INT 11
32949: PUSH
32950: LD_INT 12
32952: PUSH
32953: LD_INT 13
32955: PUSH
32956: LD_INT 14
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: IN
32965: IFFALSE 32977
// uc_nation := nation_arabian else
32967: LD_ADDR_OWVAR 21
32971: PUSH
32972: LD_INT 2
32974: ST_TO_ADDR
32975: GO 32985
// uc_nation := nation_russian ;
32977: LD_ADDR_OWVAR 21
32981: PUSH
32982: LD_INT 3
32984: ST_TO_ADDR
// vc_chassis := chassis ;
32985: LD_ADDR_OWVAR 37
32989: PUSH
32990: LD_VAR 0 1
32994: ST_TO_ADDR
// vc_engine := engine ;
32995: LD_ADDR_OWVAR 39
32999: PUSH
33000: LD_VAR 0 2
33004: ST_TO_ADDR
// vc_control := control ;
33005: LD_ADDR_OWVAR 38
33009: PUSH
33010: LD_VAR 0 3
33014: ST_TO_ADDR
// vc_weapon := weapon ;
33015: LD_ADDR_OWVAR 40
33019: PUSH
33020: LD_VAR 0 4
33024: ST_TO_ADDR
// un := CreateVehicle ;
33025: LD_ADDR_VAR 0 8
33029: PUSH
33030: CALL_OW 45
33034: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33035: LD_VAR 0 8
33039: PPUSH
33040: LD_INT 0
33042: PPUSH
33043: LD_INT 5
33045: PPUSH
33046: CALL_OW 12
33050: PPUSH
33051: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33055: LD_VAR 0 8
33059: PPUSH
33060: LD_VAR 0 5
33064: PPUSH
33065: LD_VAR 0 6
33069: PPUSH
33070: LD_INT 1
33072: PPUSH
33073: CALL_OW 48
// end ;
33077: LD_VAR 0 7
33081: RET
// export hInvincible ; every 1 do
33082: GO 33084
33084: DISABLE
// hInvincible := [ ] ;
33085: LD_ADDR_EXP 103
33089: PUSH
33090: EMPTY
33091: ST_TO_ADDR
33092: END
// every 10 do var i ;
33093: GO 33095
33095: DISABLE
33096: LD_INT 0
33098: PPUSH
// begin enable ;
33099: ENABLE
// if not hInvincible then
33100: LD_EXP 103
33104: NOT
33105: IFFALSE 33109
// exit ;
33107: GO 33153
// for i in hInvincible do
33109: LD_ADDR_VAR 0 1
33113: PUSH
33114: LD_EXP 103
33118: PUSH
33119: FOR_IN
33120: IFFALSE 33151
// if GetLives ( i ) < 1000 then
33122: LD_VAR 0 1
33126: PPUSH
33127: CALL_OW 256
33131: PUSH
33132: LD_INT 1000
33134: LESS
33135: IFFALSE 33149
// SetLives ( i , 1000 ) ;
33137: LD_VAR 0 1
33141: PPUSH
33142: LD_INT 1000
33144: PPUSH
33145: CALL_OW 234
33149: GO 33119
33151: POP
33152: POP
// end ;
33153: PPOPN 1
33155: END
// export function hHackInvincible ; var i ; begin
33156: LD_INT 0
33158: PPUSH
33159: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33160: LD_ADDR_VAR 0 2
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: LD_INT 21
33170: PUSH
33171: LD_INT 1
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 21
33180: PUSH
33181: LD_INT 2
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: LIST
33192: PPUSH
33193: CALL_OW 69
33197: PUSH
33198: FOR_IN
33199: IFFALSE 33260
// if IsSelected ( i ) then
33201: LD_VAR 0 2
33205: PPUSH
33206: CALL_OW 306
33210: IFFALSE 33258
// begin if i in hInvincible then
33212: LD_VAR 0 2
33216: PUSH
33217: LD_EXP 103
33221: IN
33222: IFFALSE 33242
// hInvincible := hInvincible diff i else
33224: LD_ADDR_EXP 103
33228: PUSH
33229: LD_EXP 103
33233: PUSH
33234: LD_VAR 0 2
33238: DIFF
33239: ST_TO_ADDR
33240: GO 33258
// hInvincible := hInvincible union i ;
33242: LD_ADDR_EXP 103
33246: PUSH
33247: LD_EXP 103
33251: PUSH
33252: LD_VAR 0 2
33256: UNION
33257: ST_TO_ADDR
// end ;
33258: GO 33198
33260: POP
33261: POP
// end ;
33262: LD_VAR 0 1
33266: RET
// export function hHackInvisible ; var i , j ; begin
33267: LD_INT 0
33269: PPUSH
33270: PPUSH
33271: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33272: LD_ADDR_VAR 0 2
33276: PUSH
33277: LD_INT 21
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PPUSH
33287: CALL_OW 69
33291: PUSH
33292: FOR_IN
33293: IFFALSE 33317
// if IsSelected ( i ) then
33295: LD_VAR 0 2
33299: PPUSH
33300: CALL_OW 306
33304: IFFALSE 33315
// ComForceInvisible ( i ) ;
33306: LD_VAR 0 2
33310: PPUSH
33311: CALL_OW 496
33315: GO 33292
33317: POP
33318: POP
// end ;
33319: LD_VAR 0 1
33323: RET
// export function hHackChangeYourSide ; begin
33324: LD_INT 0
33326: PPUSH
// if your_side = 8 then
33327: LD_OWVAR 2
33331: PUSH
33332: LD_INT 8
33334: EQUAL
33335: IFFALSE 33347
// your_side := 0 else
33337: LD_ADDR_OWVAR 2
33341: PUSH
33342: LD_INT 0
33344: ST_TO_ADDR
33345: GO 33361
// your_side := your_side + 1 ;
33347: LD_ADDR_OWVAR 2
33351: PUSH
33352: LD_OWVAR 2
33356: PUSH
33357: LD_INT 1
33359: PLUS
33360: ST_TO_ADDR
// end ;
33361: LD_VAR 0 1
33365: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33366: LD_INT 0
33368: PPUSH
33369: PPUSH
33370: PPUSH
// for i in all_units do
33371: LD_ADDR_VAR 0 2
33375: PUSH
33376: LD_OWVAR 3
33380: PUSH
33381: FOR_IN
33382: IFFALSE 33460
// if IsSelected ( i ) then
33384: LD_VAR 0 2
33388: PPUSH
33389: CALL_OW 306
33393: IFFALSE 33458
// begin j := GetSide ( i ) ;
33395: LD_ADDR_VAR 0 3
33399: PUSH
33400: LD_VAR 0 2
33404: PPUSH
33405: CALL_OW 255
33409: ST_TO_ADDR
// if j = 8 then
33410: LD_VAR 0 3
33414: PUSH
33415: LD_INT 8
33417: EQUAL
33418: IFFALSE 33430
// j := 0 else
33420: LD_ADDR_VAR 0 3
33424: PUSH
33425: LD_INT 0
33427: ST_TO_ADDR
33428: GO 33444
// j := j + 1 ;
33430: LD_ADDR_VAR 0 3
33434: PUSH
33435: LD_VAR 0 3
33439: PUSH
33440: LD_INT 1
33442: PLUS
33443: ST_TO_ADDR
// SetSide ( i , j ) ;
33444: LD_VAR 0 2
33448: PPUSH
33449: LD_VAR 0 3
33453: PPUSH
33454: CALL_OW 235
// end ;
33458: GO 33381
33460: POP
33461: POP
// end ;
33462: LD_VAR 0 1
33466: RET
// export function hHackFog ; begin
33467: LD_INT 0
33469: PPUSH
// FogOff ( true ) ;
33470: LD_INT 1
33472: PPUSH
33473: CALL_OW 344
// end ;
33477: LD_VAR 0 1
33481: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33482: LD_INT 0
33484: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33485: LD_VAR 0 1
33489: PPUSH
33490: LD_VAR 0 2
33494: PPUSH
33495: LD_VAR 0 3
33499: PPUSH
33500: LD_INT 1
33502: PPUSH
33503: LD_INT 1
33505: PPUSH
33506: CALL_OW 483
// CenterOnXY ( x , y ) ;
33510: LD_VAR 0 2
33514: PPUSH
33515: LD_VAR 0 3
33519: PPUSH
33520: CALL_OW 84
// end ;
33524: LD_VAR 0 4
33528: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33529: LD_INT 0
33531: PPUSH
33532: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33533: LD_VAR 0 1
33537: NOT
33538: PUSH
33539: LD_VAR 0 2
33543: PPUSH
33544: LD_VAR 0 3
33548: PPUSH
33549: CALL_OW 488
33553: NOT
33554: OR
33555: PUSH
33556: LD_VAR 0 1
33560: PPUSH
33561: CALL_OW 266
33565: PUSH
33566: LD_INT 3
33568: NONEQUAL
33569: PUSH
33570: LD_VAR 0 1
33574: PPUSH
33575: CALL_OW 247
33579: PUSH
33580: LD_INT 1
33582: EQUAL
33583: NOT
33584: AND
33585: OR
33586: IFFALSE 33590
// exit ;
33588: GO 33739
// if GetType ( factory ) = unit_human then
33590: LD_VAR 0 1
33594: PPUSH
33595: CALL_OW 247
33599: PUSH
33600: LD_INT 1
33602: EQUAL
33603: IFFALSE 33620
// factory := IsInUnit ( factory ) ;
33605: LD_ADDR_VAR 0 1
33609: PUSH
33610: LD_VAR 0 1
33614: PPUSH
33615: CALL_OW 310
33619: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33620: LD_VAR 0 1
33624: PPUSH
33625: CALL_OW 266
33629: PUSH
33630: LD_INT 3
33632: NONEQUAL
33633: IFFALSE 33637
// exit ;
33635: GO 33739
// if HexInfo ( x , y ) = factory then
33637: LD_VAR 0 2
33641: PPUSH
33642: LD_VAR 0 3
33646: PPUSH
33647: CALL_OW 428
33651: PUSH
33652: LD_VAR 0 1
33656: EQUAL
33657: IFFALSE 33684
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33659: LD_ADDR_EXP 104
33663: PUSH
33664: LD_EXP 104
33668: PPUSH
33669: LD_VAR 0 1
33673: PPUSH
33674: LD_INT 0
33676: PPUSH
33677: CALL_OW 1
33681: ST_TO_ADDR
33682: GO 33735
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33684: LD_ADDR_EXP 104
33688: PUSH
33689: LD_EXP 104
33693: PPUSH
33694: LD_VAR 0 1
33698: PPUSH
33699: LD_VAR 0 1
33703: PPUSH
33704: CALL_OW 255
33708: PUSH
33709: LD_VAR 0 1
33713: PUSH
33714: LD_VAR 0 2
33718: PUSH
33719: LD_VAR 0 3
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: PPUSH
33730: CALL_OW 1
33734: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33735: CALL 33744 0 0
// end ;
33739: LD_VAR 0 4
33743: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33744: LD_INT 0
33746: PPUSH
33747: PPUSH
33748: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33749: LD_STRING resetFactoryWaypoint();
33751: PPUSH
33752: CALL_OW 559
// if factoryWaypoints then
33756: LD_EXP 104
33760: IFFALSE 33886
// begin list := PrepareArray ( factoryWaypoints ) ;
33762: LD_ADDR_VAR 0 3
33766: PUSH
33767: LD_EXP 104
33771: PPUSH
33772: CALL 81028 0 1
33776: ST_TO_ADDR
// for i := 1 to list do
33777: LD_ADDR_VAR 0 2
33781: PUSH
33782: DOUBLE
33783: LD_INT 1
33785: DEC
33786: ST_TO_ADDR
33787: LD_VAR 0 3
33791: PUSH
33792: FOR_TO
33793: IFFALSE 33884
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33795: LD_STRING setFactoryWaypointXY(
33797: PUSH
33798: LD_VAR 0 3
33802: PUSH
33803: LD_VAR 0 2
33807: ARRAY
33808: PUSH
33809: LD_INT 1
33811: ARRAY
33812: STR
33813: PUSH
33814: LD_STRING ,
33816: STR
33817: PUSH
33818: LD_VAR 0 3
33822: PUSH
33823: LD_VAR 0 2
33827: ARRAY
33828: PUSH
33829: LD_INT 2
33831: ARRAY
33832: STR
33833: PUSH
33834: LD_STRING ,
33836: STR
33837: PUSH
33838: LD_VAR 0 3
33842: PUSH
33843: LD_VAR 0 2
33847: ARRAY
33848: PUSH
33849: LD_INT 3
33851: ARRAY
33852: STR
33853: PUSH
33854: LD_STRING ,
33856: STR
33857: PUSH
33858: LD_VAR 0 3
33862: PUSH
33863: LD_VAR 0 2
33867: ARRAY
33868: PUSH
33869: LD_INT 4
33871: ARRAY
33872: STR
33873: PUSH
33874: LD_STRING )
33876: STR
33877: PPUSH
33878: CALL_OW 559
33882: GO 33792
33884: POP
33885: POP
// end ; end ;
33886: LD_VAR 0 1
33890: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33891: LD_INT 0
33893: PPUSH
// if HexInfo ( x , y ) = warehouse then
33894: LD_VAR 0 2
33898: PPUSH
33899: LD_VAR 0 3
33903: PPUSH
33904: CALL_OW 428
33908: PUSH
33909: LD_VAR 0 1
33913: EQUAL
33914: IFFALSE 33941
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33916: LD_ADDR_EXP 105
33920: PUSH
33921: LD_EXP 105
33925: PPUSH
33926: LD_VAR 0 1
33930: PPUSH
33931: LD_INT 0
33933: PPUSH
33934: CALL_OW 1
33938: ST_TO_ADDR
33939: GO 33992
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33941: LD_ADDR_EXP 105
33945: PUSH
33946: LD_EXP 105
33950: PPUSH
33951: LD_VAR 0 1
33955: PPUSH
33956: LD_VAR 0 1
33960: PPUSH
33961: CALL_OW 255
33965: PUSH
33966: LD_VAR 0 1
33970: PUSH
33971: LD_VAR 0 2
33975: PUSH
33976: LD_VAR 0 3
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: PPUSH
33987: CALL_OW 1
33991: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33992: CALL 34001 0 0
// end ;
33996: LD_VAR 0 4
34000: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34001: LD_INT 0
34003: PPUSH
34004: PPUSH
34005: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34006: LD_STRING resetWarehouseGatheringPoints();
34008: PPUSH
34009: CALL_OW 559
// if warehouseGatheringPoints then
34013: LD_EXP 105
34017: IFFALSE 34143
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34019: LD_ADDR_VAR 0 3
34023: PUSH
34024: LD_EXP 105
34028: PPUSH
34029: CALL 81028 0 1
34033: ST_TO_ADDR
// for i := 1 to list do
34034: LD_ADDR_VAR 0 2
34038: PUSH
34039: DOUBLE
34040: LD_INT 1
34042: DEC
34043: ST_TO_ADDR
34044: LD_VAR 0 3
34048: PUSH
34049: FOR_TO
34050: IFFALSE 34141
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34052: LD_STRING setWarehouseGatheringPointXY(
34054: PUSH
34055: LD_VAR 0 3
34059: PUSH
34060: LD_VAR 0 2
34064: ARRAY
34065: PUSH
34066: LD_INT 1
34068: ARRAY
34069: STR
34070: PUSH
34071: LD_STRING ,
34073: STR
34074: PUSH
34075: LD_VAR 0 3
34079: PUSH
34080: LD_VAR 0 2
34084: ARRAY
34085: PUSH
34086: LD_INT 2
34088: ARRAY
34089: STR
34090: PUSH
34091: LD_STRING ,
34093: STR
34094: PUSH
34095: LD_VAR 0 3
34099: PUSH
34100: LD_VAR 0 2
34104: ARRAY
34105: PUSH
34106: LD_INT 3
34108: ARRAY
34109: STR
34110: PUSH
34111: LD_STRING ,
34113: STR
34114: PUSH
34115: LD_VAR 0 3
34119: PUSH
34120: LD_VAR 0 2
34124: ARRAY
34125: PUSH
34126: LD_INT 4
34128: ARRAY
34129: STR
34130: PUSH
34131: LD_STRING )
34133: STR
34134: PPUSH
34135: CALL_OW 559
34139: GO 34049
34141: POP
34142: POP
// end ; end ;
34143: LD_VAR 0 1
34147: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34148: LD_EXP 105
34152: IFFALSE 34837
34154: GO 34156
34156: DISABLE
34157: LD_INT 0
34159: PPUSH
34160: PPUSH
34161: PPUSH
34162: PPUSH
34163: PPUSH
34164: PPUSH
34165: PPUSH
34166: PPUSH
34167: PPUSH
// begin enable ;
34168: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34169: LD_ADDR_VAR 0 3
34173: PUSH
34174: LD_EXP 105
34178: PPUSH
34179: CALL 81028 0 1
34183: ST_TO_ADDR
// if not list then
34184: LD_VAR 0 3
34188: NOT
34189: IFFALSE 34193
// exit ;
34191: GO 34837
// for i := 1 to list do
34193: LD_ADDR_VAR 0 1
34197: PUSH
34198: DOUBLE
34199: LD_INT 1
34201: DEC
34202: ST_TO_ADDR
34203: LD_VAR 0 3
34207: PUSH
34208: FOR_TO
34209: IFFALSE 34835
// begin depot := list [ i ] [ 2 ] ;
34211: LD_ADDR_VAR 0 8
34215: PUSH
34216: LD_VAR 0 3
34220: PUSH
34221: LD_VAR 0 1
34225: ARRAY
34226: PUSH
34227: LD_INT 2
34229: ARRAY
34230: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34231: LD_ADDR_VAR 0 5
34235: PUSH
34236: LD_VAR 0 3
34240: PUSH
34241: LD_VAR 0 1
34245: ARRAY
34246: PUSH
34247: LD_INT 1
34249: ARRAY
34250: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34251: LD_VAR 0 8
34255: PPUSH
34256: CALL_OW 301
34260: PUSH
34261: LD_VAR 0 5
34265: PUSH
34266: LD_VAR 0 8
34270: PPUSH
34271: CALL_OW 255
34275: NONEQUAL
34276: OR
34277: IFFALSE 34306
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34279: LD_ADDR_EXP 105
34283: PUSH
34284: LD_EXP 105
34288: PPUSH
34289: LD_VAR 0 8
34293: PPUSH
34294: LD_INT 0
34296: PPUSH
34297: CALL_OW 1
34301: ST_TO_ADDR
// exit ;
34302: POP
34303: POP
34304: GO 34837
// end ; x := list [ i ] [ 3 ] ;
34306: LD_ADDR_VAR 0 6
34310: PUSH
34311: LD_VAR 0 3
34315: PUSH
34316: LD_VAR 0 1
34320: ARRAY
34321: PUSH
34322: LD_INT 3
34324: ARRAY
34325: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34326: LD_ADDR_VAR 0 7
34330: PUSH
34331: LD_VAR 0 3
34335: PUSH
34336: LD_VAR 0 1
34340: ARRAY
34341: PUSH
34342: LD_INT 4
34344: ARRAY
34345: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34346: LD_ADDR_VAR 0 9
34350: PUSH
34351: LD_VAR 0 6
34355: PPUSH
34356: LD_VAR 0 7
34360: PPUSH
34361: LD_INT 16
34363: PPUSH
34364: CALL 79616 0 3
34368: ST_TO_ADDR
// if not cratesNearbyPoint then
34369: LD_VAR 0 9
34373: NOT
34374: IFFALSE 34380
// exit ;
34376: POP
34377: POP
34378: GO 34837
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34380: LD_ADDR_VAR 0 4
34384: PUSH
34385: LD_INT 22
34387: PUSH
34388: LD_VAR 0 5
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 3
34399: PUSH
34400: LD_INT 60
34402: PUSH
34403: EMPTY
34404: LIST
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 91
34412: PUSH
34413: LD_VAR 0 8
34417: PUSH
34418: LD_INT 6
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 2
34428: PUSH
34429: LD_INT 25
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 25
34441: PUSH
34442: LD_INT 16
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: PPUSH
34460: CALL_OW 69
34464: PUSH
34465: LD_VAR 0 8
34469: PPUSH
34470: CALL_OW 313
34474: PPUSH
34475: LD_INT 3
34477: PUSH
34478: LD_INT 60
34480: PUSH
34481: EMPTY
34482: LIST
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: LD_INT 25
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 25
34503: PUSH
34504: LD_INT 16
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: LIST
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PPUSH
34520: CALL_OW 72
34524: UNION
34525: ST_TO_ADDR
// if tmp then
34526: LD_VAR 0 4
34530: IFFALSE 34610
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34532: LD_ADDR_VAR 0 4
34536: PUSH
34537: LD_VAR 0 4
34541: PPUSH
34542: LD_INT 3
34544: PPUSH
34545: CALL 77585 0 2
34549: ST_TO_ADDR
// for j in tmp do
34550: LD_ADDR_VAR 0 2
34554: PUSH
34555: LD_VAR 0 4
34559: PUSH
34560: FOR_IN
34561: IFFALSE 34604
// begin if IsInUnit ( j ) then
34563: LD_VAR 0 2
34567: PPUSH
34568: CALL_OW 310
34572: IFFALSE 34583
// ComExit ( j ) ;
34574: LD_VAR 0 2
34578: PPUSH
34579: CALL 77668 0 1
// AddComCollect ( j , x , y ) ;
34583: LD_VAR 0 2
34587: PPUSH
34588: LD_VAR 0 6
34592: PPUSH
34593: LD_VAR 0 7
34597: PPUSH
34598: CALL_OW 177
// end ;
34602: GO 34560
34604: POP
34605: POP
// exit ;
34606: POP
34607: POP
34608: GO 34837
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34610: LD_ADDR_VAR 0 4
34614: PUSH
34615: LD_INT 22
34617: PUSH
34618: LD_VAR 0 5
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 91
34629: PUSH
34630: LD_VAR 0 8
34634: PUSH
34635: LD_INT 8
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: LD_INT 34
34648: PUSH
34649: LD_INT 12
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 34
34658: PUSH
34659: LD_INT 51
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 34
34668: PUSH
34669: LD_INT 32
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 34
34678: PUSH
34679: LD_INT 89
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: LIST
34697: PPUSH
34698: CALL_OW 69
34702: ST_TO_ADDR
// if tmp then
34703: LD_VAR 0 4
34707: IFFALSE 34833
// begin for j in tmp do
34709: LD_ADDR_VAR 0 2
34713: PUSH
34714: LD_VAR 0 4
34718: PUSH
34719: FOR_IN
34720: IFFALSE 34831
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34722: LD_VAR 0 2
34726: PPUSH
34727: CALL_OW 262
34731: PUSH
34732: LD_INT 3
34734: EQUAL
34735: PUSH
34736: LD_VAR 0 2
34740: PPUSH
34741: CALL_OW 261
34745: PUSH
34746: LD_INT 20
34748: GREATER
34749: OR
34750: PUSH
34751: LD_VAR 0 2
34755: PPUSH
34756: CALL_OW 314
34760: NOT
34761: AND
34762: PUSH
34763: LD_VAR 0 2
34767: PPUSH
34768: CALL_OW 263
34772: PUSH
34773: LD_INT 1
34775: NONEQUAL
34776: PUSH
34777: LD_VAR 0 2
34781: PPUSH
34782: CALL_OW 311
34786: OR
34787: AND
34788: IFFALSE 34829
// begin ComCollect ( j , x , y ) ;
34790: LD_VAR 0 2
34794: PPUSH
34795: LD_VAR 0 6
34799: PPUSH
34800: LD_VAR 0 7
34804: PPUSH
34805: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34809: LD_VAR 0 2
34813: PPUSH
34814: LD_VAR 0 8
34818: PPUSH
34819: CALL_OW 172
// exit ;
34823: POP
34824: POP
34825: POP
34826: POP
34827: GO 34837
// end ;
34829: GO 34719
34831: POP
34832: POP
// end ; end ;
34833: GO 34208
34835: POP
34836: POP
// end ; end_of_file
34837: PPOPN 9
34839: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34840: LD_INT 0
34842: PPUSH
34843: PPUSH
34844: PPUSH
34845: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34846: LD_VAR 0 1
34850: PPUSH
34851: CALL_OW 264
34855: PUSH
34856: LD_INT 91
34858: EQUAL
34859: IFFALSE 34931
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34861: LD_INT 68
34863: PPUSH
34864: LD_VAR 0 1
34868: PPUSH
34869: CALL_OW 255
34873: PPUSH
34874: CALL_OW 321
34878: PUSH
34879: LD_INT 2
34881: EQUAL
34882: IFFALSE 34894
// eff := 70 else
34884: LD_ADDR_VAR 0 4
34888: PUSH
34889: LD_INT 70
34891: ST_TO_ADDR
34892: GO 34902
// eff := 30 ;
34894: LD_ADDR_VAR 0 4
34898: PUSH
34899: LD_INT 30
34901: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34902: LD_VAR 0 1
34906: PPUSH
34907: CALL_OW 250
34911: PPUSH
34912: LD_VAR 0 1
34916: PPUSH
34917: CALL_OW 251
34921: PPUSH
34922: LD_VAR 0 4
34926: PPUSH
34927: CALL_OW 495
// end ; end ;
34931: LD_VAR 0 2
34935: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34936: LD_INT 0
34938: PPUSH
// end ;
34939: LD_VAR 0 4
34943: RET
// export function SOS_Command ( cmd ) ; begin
34944: LD_INT 0
34946: PPUSH
// end ;
34947: LD_VAR 0 2
34951: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34952: LD_INT 0
34954: PPUSH
// end ;
34955: LD_VAR 0 6
34959: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34960: LD_INT 0
34962: PPUSH
34963: PPUSH
// if not vehicle or not factory then
34964: LD_VAR 0 1
34968: NOT
34969: PUSH
34970: LD_VAR 0 2
34974: NOT
34975: OR
34976: IFFALSE 34980
// exit ;
34978: GO 35211
// if factoryWaypoints >= factory then
34980: LD_EXP 104
34984: PUSH
34985: LD_VAR 0 2
34989: GREATEREQUAL
34990: IFFALSE 35211
// if factoryWaypoints [ factory ] then
34992: LD_EXP 104
34996: PUSH
34997: LD_VAR 0 2
35001: ARRAY
35002: IFFALSE 35211
// begin if GetControl ( vehicle ) = control_manual then
35004: LD_VAR 0 1
35008: PPUSH
35009: CALL_OW 263
35013: PUSH
35014: LD_INT 1
35016: EQUAL
35017: IFFALSE 35098
// begin driver := IsDrivenBy ( vehicle ) ;
35019: LD_ADDR_VAR 0 4
35023: PUSH
35024: LD_VAR 0 1
35028: PPUSH
35029: CALL_OW 311
35033: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35034: LD_VAR 0 4
35038: PPUSH
35039: LD_EXP 104
35043: PUSH
35044: LD_VAR 0 2
35048: ARRAY
35049: PUSH
35050: LD_INT 3
35052: ARRAY
35053: PPUSH
35054: LD_EXP 104
35058: PUSH
35059: LD_VAR 0 2
35063: ARRAY
35064: PUSH
35065: LD_INT 4
35067: ARRAY
35068: PPUSH
35069: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35073: LD_VAR 0 4
35077: PPUSH
35078: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35082: LD_VAR 0 4
35086: PPUSH
35087: LD_VAR 0 2
35091: PPUSH
35092: CALL_OW 180
// end else
35096: GO 35211
// if GetControl ( vehicle ) = control_remote then
35098: LD_VAR 0 1
35102: PPUSH
35103: CALL_OW 263
35107: PUSH
35108: LD_INT 2
35110: EQUAL
35111: IFFALSE 35172
// begin wait ( 0 0$2 ) ;
35113: LD_INT 70
35115: PPUSH
35116: CALL_OW 67
// if Connect ( vehicle ) then
35120: LD_VAR 0 1
35124: PPUSH
35125: CALL 47876 0 1
35129: IFFALSE 35170
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35131: LD_VAR 0 1
35135: PPUSH
35136: LD_EXP 104
35140: PUSH
35141: LD_VAR 0 2
35145: ARRAY
35146: PUSH
35147: LD_INT 3
35149: ARRAY
35150: PPUSH
35151: LD_EXP 104
35155: PUSH
35156: LD_VAR 0 2
35160: ARRAY
35161: PUSH
35162: LD_INT 4
35164: ARRAY
35165: PPUSH
35166: CALL_OW 171
// end else
35170: GO 35211
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35172: LD_VAR 0 1
35176: PPUSH
35177: LD_EXP 104
35181: PUSH
35182: LD_VAR 0 2
35186: ARRAY
35187: PUSH
35188: LD_INT 3
35190: ARRAY
35191: PPUSH
35192: LD_EXP 104
35196: PUSH
35197: LD_VAR 0 2
35201: ARRAY
35202: PUSH
35203: LD_INT 4
35205: ARRAY
35206: PPUSH
35207: CALL_OW 171
// end ; end ;
35211: LD_VAR 0 3
35215: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35216: LD_INT 0
35218: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35219: LD_VAR 0 1
35223: PUSH
35224: LD_INT 250
35226: EQUAL
35227: PUSH
35228: LD_VAR 0 2
35232: PPUSH
35233: CALL_OW 264
35237: PUSH
35238: LD_INT 81
35240: EQUAL
35241: AND
35242: IFFALSE 35263
// MinerPlaceMine ( unit , x , y ) ;
35244: LD_VAR 0 2
35248: PPUSH
35249: LD_VAR 0 4
35253: PPUSH
35254: LD_VAR 0 5
35258: PPUSH
35259: CALL 38087 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35263: LD_VAR 0 1
35267: PUSH
35268: LD_INT 251
35270: EQUAL
35271: PUSH
35272: LD_VAR 0 2
35276: PPUSH
35277: CALL_OW 264
35281: PUSH
35282: LD_INT 81
35284: EQUAL
35285: AND
35286: IFFALSE 35307
// MinerDetonateMine ( unit , x , y ) ;
35288: LD_VAR 0 2
35292: PPUSH
35293: LD_VAR 0 4
35297: PPUSH
35298: LD_VAR 0 5
35302: PPUSH
35303: CALL 38362 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35307: LD_VAR 0 1
35311: PUSH
35312: LD_INT 252
35314: EQUAL
35315: PUSH
35316: LD_VAR 0 2
35320: PPUSH
35321: CALL_OW 264
35325: PUSH
35326: LD_INT 81
35328: EQUAL
35329: AND
35330: IFFALSE 35351
// MinerCreateMinefield ( unit , x , y ) ;
35332: LD_VAR 0 2
35336: PPUSH
35337: LD_VAR 0 4
35341: PPUSH
35342: LD_VAR 0 5
35346: PPUSH
35347: CALL 38779 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35351: LD_VAR 0 1
35355: PUSH
35356: LD_INT 253
35358: EQUAL
35359: PUSH
35360: LD_VAR 0 2
35364: PPUSH
35365: CALL_OW 257
35369: PUSH
35370: LD_INT 5
35372: EQUAL
35373: AND
35374: IFFALSE 35395
// ComBinocular ( unit , x , y ) ;
35376: LD_VAR 0 2
35380: PPUSH
35381: LD_VAR 0 4
35385: PPUSH
35386: LD_VAR 0 5
35390: PPUSH
35391: CALL 39148 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35395: LD_VAR 0 1
35399: PUSH
35400: LD_INT 254
35402: EQUAL
35403: PUSH
35404: LD_VAR 0 2
35408: PPUSH
35409: CALL_OW 264
35413: PUSH
35414: LD_INT 99
35416: EQUAL
35417: AND
35418: PUSH
35419: LD_VAR 0 3
35423: PPUSH
35424: CALL_OW 263
35428: PUSH
35429: LD_INT 3
35431: EQUAL
35432: AND
35433: IFFALSE 35449
// HackDestroyVehicle ( unit , selectedUnit ) ;
35435: LD_VAR 0 2
35439: PPUSH
35440: LD_VAR 0 3
35444: PPUSH
35445: CALL 37451 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35449: LD_VAR 0 1
35453: PUSH
35454: LD_INT 255
35456: EQUAL
35457: PUSH
35458: LD_VAR 0 2
35462: PPUSH
35463: CALL_OW 264
35467: PUSH
35468: LD_INT 14
35470: PUSH
35471: LD_INT 53
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: IN
35478: AND
35479: PUSH
35480: LD_VAR 0 4
35484: PPUSH
35485: LD_VAR 0 5
35489: PPUSH
35490: CALL_OW 488
35494: AND
35495: IFFALSE 35519
// CutTreeXYR ( unit , x , y , 12 ) ;
35497: LD_VAR 0 2
35501: PPUSH
35502: LD_VAR 0 4
35506: PPUSH
35507: LD_VAR 0 5
35511: PPUSH
35512: LD_INT 12
35514: PPUSH
35515: CALL 35614 0 4
// if cmd = 256 then
35519: LD_VAR 0 1
35523: PUSH
35524: LD_INT 256
35526: EQUAL
35527: IFFALSE 35548
// SetFactoryWaypoint ( unit , x , y ) ;
35529: LD_VAR 0 2
35533: PPUSH
35534: LD_VAR 0 4
35538: PPUSH
35539: LD_VAR 0 5
35543: PPUSH
35544: CALL 33529 0 3
// if cmd = 257 then
35548: LD_VAR 0 1
35552: PUSH
35553: LD_INT 257
35555: EQUAL
35556: IFFALSE 35577
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35558: LD_VAR 0 2
35562: PPUSH
35563: LD_VAR 0 4
35567: PPUSH
35568: LD_VAR 0 5
35572: PPUSH
35573: CALL 33891 0 3
// if cmd = 258 then
35577: LD_VAR 0 1
35581: PUSH
35582: LD_INT 258
35584: EQUAL
35585: IFFALSE 35609
// BurnTreeXYR ( unit , x , y , 8 ) ;
35587: LD_VAR 0 2
35591: PPUSH
35592: LD_VAR 0 4
35596: PPUSH
35597: LD_VAR 0 5
35601: PPUSH
35602: LD_INT 8
35604: PPUSH
35605: CALL 36008 0 4
// end ;
35609: LD_VAR 0 6
35613: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35614: LD_INT 0
35616: PPUSH
35617: PPUSH
35618: PPUSH
35619: PPUSH
35620: PPUSH
35621: PPUSH
35622: PPUSH
35623: PPUSH
35624: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35625: LD_VAR 0 1
35629: PPUSH
35630: CALL_OW 302
35634: NOT
35635: PUSH
35636: LD_VAR 0 2
35640: PPUSH
35641: LD_VAR 0 3
35645: PPUSH
35646: CALL_OW 488
35650: NOT
35651: OR
35652: PUSH
35653: LD_VAR 0 4
35657: NOT
35658: OR
35659: IFFALSE 35663
// exit ;
35661: GO 36003
// list := [ ] ;
35663: LD_ADDR_VAR 0 13
35667: PUSH
35668: EMPTY
35669: ST_TO_ADDR
// if x - r < 0 then
35670: LD_VAR 0 2
35674: PUSH
35675: LD_VAR 0 4
35679: MINUS
35680: PUSH
35681: LD_INT 0
35683: LESS
35684: IFFALSE 35696
// min_x := 0 else
35686: LD_ADDR_VAR 0 7
35690: PUSH
35691: LD_INT 0
35693: ST_TO_ADDR
35694: GO 35712
// min_x := x - r ;
35696: LD_ADDR_VAR 0 7
35700: PUSH
35701: LD_VAR 0 2
35705: PUSH
35706: LD_VAR 0 4
35710: MINUS
35711: ST_TO_ADDR
// if y - r < 0 then
35712: LD_VAR 0 3
35716: PUSH
35717: LD_VAR 0 4
35721: MINUS
35722: PUSH
35723: LD_INT 0
35725: LESS
35726: IFFALSE 35738
// min_y := 0 else
35728: LD_ADDR_VAR 0 8
35732: PUSH
35733: LD_INT 0
35735: ST_TO_ADDR
35736: GO 35754
// min_y := y - r ;
35738: LD_ADDR_VAR 0 8
35742: PUSH
35743: LD_VAR 0 3
35747: PUSH
35748: LD_VAR 0 4
35752: MINUS
35753: ST_TO_ADDR
// max_x := x + r ;
35754: LD_ADDR_VAR 0 9
35758: PUSH
35759: LD_VAR 0 2
35763: PUSH
35764: LD_VAR 0 4
35768: PLUS
35769: ST_TO_ADDR
// max_y := y + r ;
35770: LD_ADDR_VAR 0 10
35774: PUSH
35775: LD_VAR 0 3
35779: PUSH
35780: LD_VAR 0 4
35784: PLUS
35785: ST_TO_ADDR
// for _x = min_x to max_x do
35786: LD_ADDR_VAR 0 11
35790: PUSH
35791: DOUBLE
35792: LD_VAR 0 7
35796: DEC
35797: ST_TO_ADDR
35798: LD_VAR 0 9
35802: PUSH
35803: FOR_TO
35804: IFFALSE 35921
// for _y = min_y to max_y do
35806: LD_ADDR_VAR 0 12
35810: PUSH
35811: DOUBLE
35812: LD_VAR 0 8
35816: DEC
35817: ST_TO_ADDR
35818: LD_VAR 0 10
35822: PUSH
35823: FOR_TO
35824: IFFALSE 35917
// begin if not ValidHex ( _x , _y ) then
35826: LD_VAR 0 11
35830: PPUSH
35831: LD_VAR 0 12
35835: PPUSH
35836: CALL_OW 488
35840: NOT
35841: IFFALSE 35845
// continue ;
35843: GO 35823
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35845: LD_VAR 0 11
35849: PPUSH
35850: LD_VAR 0 12
35854: PPUSH
35855: CALL_OW 351
35859: PUSH
35860: LD_VAR 0 11
35864: PPUSH
35865: LD_VAR 0 12
35869: PPUSH
35870: CALL_OW 554
35874: AND
35875: IFFALSE 35915
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35877: LD_ADDR_VAR 0 13
35881: PUSH
35882: LD_VAR 0 13
35886: PPUSH
35887: LD_VAR 0 13
35891: PUSH
35892: LD_INT 1
35894: PLUS
35895: PPUSH
35896: LD_VAR 0 11
35900: PUSH
35901: LD_VAR 0 12
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PPUSH
35910: CALL_OW 2
35914: ST_TO_ADDR
// end ;
35915: GO 35823
35917: POP
35918: POP
35919: GO 35803
35921: POP
35922: POP
// if not list then
35923: LD_VAR 0 13
35927: NOT
35928: IFFALSE 35932
// exit ;
35930: GO 36003
// for i in list do
35932: LD_ADDR_VAR 0 6
35936: PUSH
35937: LD_VAR 0 13
35941: PUSH
35942: FOR_IN
35943: IFFALSE 36001
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35945: LD_VAR 0 1
35949: PPUSH
35950: LD_STRING M
35952: PUSH
35953: LD_VAR 0 6
35957: PUSH
35958: LD_INT 1
35960: ARRAY
35961: PUSH
35962: LD_VAR 0 6
35966: PUSH
35967: LD_INT 2
35969: ARRAY
35970: PUSH
35971: LD_INT 0
35973: PUSH
35974: LD_INT 0
35976: PUSH
35977: LD_INT 0
35979: PUSH
35980: LD_INT 0
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: PUSH
35992: EMPTY
35993: LIST
35994: PPUSH
35995: CALL_OW 447
35999: GO 35942
36001: POP
36002: POP
// end ;
36003: LD_VAR 0 5
36007: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36008: LD_INT 0
36010: PPUSH
36011: PPUSH
36012: PPUSH
36013: PPUSH
36014: PPUSH
36015: PPUSH
36016: PPUSH
36017: PPUSH
36018: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36019: LD_VAR 0 1
36023: PPUSH
36024: CALL_OW 302
36028: NOT
36029: PUSH
36030: LD_VAR 0 2
36034: PPUSH
36035: LD_VAR 0 3
36039: PPUSH
36040: CALL_OW 488
36044: NOT
36045: OR
36046: PUSH
36047: LD_VAR 0 4
36051: NOT
36052: OR
36053: IFFALSE 36057
// exit ;
36055: GO 36405
// list := [ ] ;
36057: LD_ADDR_VAR 0 13
36061: PUSH
36062: EMPTY
36063: ST_TO_ADDR
// if x - r < 0 then
36064: LD_VAR 0 2
36068: PUSH
36069: LD_VAR 0 4
36073: MINUS
36074: PUSH
36075: LD_INT 0
36077: LESS
36078: IFFALSE 36090
// min_x := 0 else
36080: LD_ADDR_VAR 0 7
36084: PUSH
36085: LD_INT 0
36087: ST_TO_ADDR
36088: GO 36106
// min_x := x - r ;
36090: LD_ADDR_VAR 0 7
36094: PUSH
36095: LD_VAR 0 2
36099: PUSH
36100: LD_VAR 0 4
36104: MINUS
36105: ST_TO_ADDR
// if y - r < 0 then
36106: LD_VAR 0 3
36110: PUSH
36111: LD_VAR 0 4
36115: MINUS
36116: PUSH
36117: LD_INT 0
36119: LESS
36120: IFFALSE 36132
// min_y := 0 else
36122: LD_ADDR_VAR 0 8
36126: PUSH
36127: LD_INT 0
36129: ST_TO_ADDR
36130: GO 36148
// min_y := y - r ;
36132: LD_ADDR_VAR 0 8
36136: PUSH
36137: LD_VAR 0 3
36141: PUSH
36142: LD_VAR 0 4
36146: MINUS
36147: ST_TO_ADDR
// max_x := x + r ;
36148: LD_ADDR_VAR 0 9
36152: PUSH
36153: LD_VAR 0 2
36157: PUSH
36158: LD_VAR 0 4
36162: PLUS
36163: ST_TO_ADDR
// max_y := y + r ;
36164: LD_ADDR_VAR 0 10
36168: PUSH
36169: LD_VAR 0 3
36173: PUSH
36174: LD_VAR 0 4
36178: PLUS
36179: ST_TO_ADDR
// for _x = min_x to max_x do
36180: LD_ADDR_VAR 0 11
36184: PUSH
36185: DOUBLE
36186: LD_VAR 0 7
36190: DEC
36191: ST_TO_ADDR
36192: LD_VAR 0 9
36196: PUSH
36197: FOR_TO
36198: IFFALSE 36315
// for _y = min_y to max_y do
36200: LD_ADDR_VAR 0 12
36204: PUSH
36205: DOUBLE
36206: LD_VAR 0 8
36210: DEC
36211: ST_TO_ADDR
36212: LD_VAR 0 10
36216: PUSH
36217: FOR_TO
36218: IFFALSE 36311
// begin if not ValidHex ( _x , _y ) then
36220: LD_VAR 0 11
36224: PPUSH
36225: LD_VAR 0 12
36229: PPUSH
36230: CALL_OW 488
36234: NOT
36235: IFFALSE 36239
// continue ;
36237: GO 36217
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36239: LD_VAR 0 11
36243: PPUSH
36244: LD_VAR 0 12
36248: PPUSH
36249: CALL_OW 351
36253: PUSH
36254: LD_VAR 0 11
36258: PPUSH
36259: LD_VAR 0 12
36263: PPUSH
36264: CALL_OW 554
36268: AND
36269: IFFALSE 36309
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36271: LD_ADDR_VAR 0 13
36275: PUSH
36276: LD_VAR 0 13
36280: PPUSH
36281: LD_VAR 0 13
36285: PUSH
36286: LD_INT 1
36288: PLUS
36289: PPUSH
36290: LD_VAR 0 11
36294: PUSH
36295: LD_VAR 0 12
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PPUSH
36304: CALL_OW 2
36308: ST_TO_ADDR
// end ;
36309: GO 36217
36311: POP
36312: POP
36313: GO 36197
36315: POP
36316: POP
// if not list then
36317: LD_VAR 0 13
36321: NOT
36322: IFFALSE 36326
// exit ;
36324: GO 36405
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36326: LD_ADDR_VAR 0 13
36330: PUSH
36331: LD_VAR 0 1
36335: PPUSH
36336: LD_VAR 0 13
36340: PPUSH
36341: LD_INT 1
36343: PPUSH
36344: LD_INT 1
36346: PPUSH
36347: CALL 45018 0 4
36351: ST_TO_ADDR
// ComStop ( flame ) ;
36352: LD_VAR 0 1
36356: PPUSH
36357: CALL_OW 141
// for i in list do
36361: LD_ADDR_VAR 0 6
36365: PUSH
36366: LD_VAR 0 13
36370: PUSH
36371: FOR_IN
36372: IFFALSE 36403
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36374: LD_VAR 0 1
36378: PPUSH
36379: LD_VAR 0 6
36383: PUSH
36384: LD_INT 1
36386: ARRAY
36387: PPUSH
36388: LD_VAR 0 6
36392: PUSH
36393: LD_INT 2
36395: ARRAY
36396: PPUSH
36397: CALL_OW 176
36401: GO 36371
36403: POP
36404: POP
// end ;
36405: LD_VAR 0 5
36409: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36410: LD_EXP 107
36414: NOT
36415: IFFALSE 36465
36417: GO 36419
36419: DISABLE
// begin initHack := true ;
36420: LD_ADDR_EXP 107
36424: PUSH
36425: LD_INT 1
36427: ST_TO_ADDR
// hackTanks := [ ] ;
36428: LD_ADDR_EXP 108
36432: PUSH
36433: EMPTY
36434: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36435: LD_ADDR_EXP 109
36439: PUSH
36440: EMPTY
36441: ST_TO_ADDR
// hackLimit := 3 ;
36442: LD_ADDR_EXP 110
36446: PUSH
36447: LD_INT 3
36449: ST_TO_ADDR
// hackDist := 12 ;
36450: LD_ADDR_EXP 111
36454: PUSH
36455: LD_INT 12
36457: ST_TO_ADDR
// hackCounter := [ ] ;
36458: LD_ADDR_EXP 112
36462: PUSH
36463: EMPTY
36464: ST_TO_ADDR
// end ;
36465: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36466: LD_EXP 107
36470: PUSH
36471: LD_INT 34
36473: PUSH
36474: LD_INT 99
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PPUSH
36481: CALL_OW 69
36485: AND
36486: IFFALSE 36739
36488: GO 36490
36490: DISABLE
36491: LD_INT 0
36493: PPUSH
36494: PPUSH
// begin enable ;
36495: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36496: LD_ADDR_VAR 0 1
36500: PUSH
36501: LD_INT 34
36503: PUSH
36504: LD_INT 99
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PPUSH
36511: CALL_OW 69
36515: PUSH
36516: FOR_IN
36517: IFFALSE 36737
// begin if not i in hackTanks then
36519: LD_VAR 0 1
36523: PUSH
36524: LD_EXP 108
36528: IN
36529: NOT
36530: IFFALSE 36613
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36532: LD_ADDR_EXP 108
36536: PUSH
36537: LD_EXP 108
36541: PPUSH
36542: LD_EXP 108
36546: PUSH
36547: LD_INT 1
36549: PLUS
36550: PPUSH
36551: LD_VAR 0 1
36555: PPUSH
36556: CALL_OW 1
36560: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36561: LD_ADDR_EXP 109
36565: PUSH
36566: LD_EXP 109
36570: PPUSH
36571: LD_EXP 109
36575: PUSH
36576: LD_INT 1
36578: PLUS
36579: PPUSH
36580: EMPTY
36581: PPUSH
36582: CALL_OW 1
36586: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36587: LD_ADDR_EXP 112
36591: PUSH
36592: LD_EXP 112
36596: PPUSH
36597: LD_EXP 112
36601: PUSH
36602: LD_INT 1
36604: PLUS
36605: PPUSH
36606: EMPTY
36607: PPUSH
36608: CALL_OW 1
36612: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36613: LD_VAR 0 1
36617: PPUSH
36618: CALL_OW 302
36622: NOT
36623: IFFALSE 36636
// begin HackUnlinkAll ( i ) ;
36625: LD_VAR 0 1
36629: PPUSH
36630: CALL 36742 0 1
// continue ;
36634: GO 36516
// end ; HackCheckCapturedStatus ( i ) ;
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL 37185 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36645: LD_ADDR_VAR 0 2
36649: PUSH
36650: LD_INT 81
36652: PUSH
36653: LD_VAR 0 1
36657: PPUSH
36658: CALL_OW 255
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 33
36669: PUSH
36670: LD_INT 3
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 91
36679: PUSH
36680: LD_VAR 0 1
36684: PUSH
36685: LD_EXP 111
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 50
36697: PUSH
36698: EMPTY
36699: LIST
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: PPUSH
36707: CALL_OW 69
36711: ST_TO_ADDR
// if not tmp then
36712: LD_VAR 0 2
36716: NOT
36717: IFFALSE 36721
// continue ;
36719: GO 36516
// HackLink ( i , tmp ) ;
36721: LD_VAR 0 1
36725: PPUSH
36726: LD_VAR 0 2
36730: PPUSH
36731: CALL 36878 0 2
// end ;
36735: GO 36516
36737: POP
36738: POP
// end ;
36739: PPOPN 2
36741: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36742: LD_INT 0
36744: PPUSH
36745: PPUSH
36746: PPUSH
// if not hack in hackTanks then
36747: LD_VAR 0 1
36751: PUSH
36752: LD_EXP 108
36756: IN
36757: NOT
36758: IFFALSE 36762
// exit ;
36760: GO 36873
// index := GetElementIndex ( hackTanks , hack ) ;
36762: LD_ADDR_VAR 0 4
36766: PUSH
36767: LD_EXP 108
36771: PPUSH
36772: LD_VAR 0 1
36776: PPUSH
36777: CALL 44315 0 2
36781: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36782: LD_EXP 109
36786: PUSH
36787: LD_VAR 0 4
36791: ARRAY
36792: IFFALSE 36873
// begin for i in hackTanksCaptured [ index ] do
36794: LD_ADDR_VAR 0 3
36798: PUSH
36799: LD_EXP 109
36803: PUSH
36804: LD_VAR 0 4
36808: ARRAY
36809: PUSH
36810: FOR_IN
36811: IFFALSE 36837
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36813: LD_VAR 0 3
36817: PUSH
36818: LD_INT 1
36820: ARRAY
36821: PPUSH
36822: LD_VAR 0 3
36826: PUSH
36827: LD_INT 2
36829: ARRAY
36830: PPUSH
36831: CALL_OW 235
36835: GO 36810
36837: POP
36838: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36839: LD_ADDR_EXP 109
36843: PUSH
36844: LD_EXP 109
36848: PPUSH
36849: LD_VAR 0 4
36853: PPUSH
36854: EMPTY
36855: PPUSH
36856: CALL_OW 1
36860: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36861: LD_VAR 0 1
36865: PPUSH
36866: LD_INT 0
36868: PPUSH
36869: CALL_OW 505
// end ; end ;
36873: LD_VAR 0 2
36877: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36878: LD_INT 0
36880: PPUSH
36881: PPUSH
36882: PPUSH
// if not hack in hackTanks or not vehicles then
36883: LD_VAR 0 1
36887: PUSH
36888: LD_EXP 108
36892: IN
36893: NOT
36894: PUSH
36895: LD_VAR 0 2
36899: NOT
36900: OR
36901: IFFALSE 36905
// exit ;
36903: GO 37180
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36905: LD_ADDR_VAR 0 2
36909: PUSH
36910: LD_VAR 0 1
36914: PPUSH
36915: LD_VAR 0 2
36919: PPUSH
36920: LD_INT 1
36922: PPUSH
36923: LD_INT 1
36925: PPUSH
36926: CALL 44965 0 4
36930: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36931: LD_ADDR_VAR 0 5
36935: PUSH
36936: LD_EXP 108
36940: PPUSH
36941: LD_VAR 0 1
36945: PPUSH
36946: CALL 44315 0 2
36950: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36951: LD_EXP 109
36955: PUSH
36956: LD_VAR 0 5
36960: ARRAY
36961: PUSH
36962: LD_EXP 110
36966: LESS
36967: IFFALSE 37156
// begin for i := 1 to vehicles do
36969: LD_ADDR_VAR 0 4
36973: PUSH
36974: DOUBLE
36975: LD_INT 1
36977: DEC
36978: ST_TO_ADDR
36979: LD_VAR 0 2
36983: PUSH
36984: FOR_TO
36985: IFFALSE 37154
// begin if hackTanksCaptured [ index ] = hackLimit then
36987: LD_EXP 109
36991: PUSH
36992: LD_VAR 0 5
36996: ARRAY
36997: PUSH
36998: LD_EXP 110
37002: EQUAL
37003: IFFALSE 37007
// break ;
37005: GO 37154
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37007: LD_ADDR_EXP 112
37011: PUSH
37012: LD_EXP 112
37016: PPUSH
37017: LD_VAR 0 5
37021: PPUSH
37022: LD_EXP 112
37026: PUSH
37027: LD_VAR 0 5
37031: ARRAY
37032: PUSH
37033: LD_INT 1
37035: PLUS
37036: PPUSH
37037: CALL_OW 1
37041: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37042: LD_ADDR_EXP 109
37046: PUSH
37047: LD_EXP 109
37051: PPUSH
37052: LD_VAR 0 5
37056: PUSH
37057: LD_EXP 109
37061: PUSH
37062: LD_VAR 0 5
37066: ARRAY
37067: PUSH
37068: LD_INT 1
37070: PLUS
37071: PUSH
37072: EMPTY
37073: LIST
37074: LIST
37075: PPUSH
37076: LD_VAR 0 2
37080: PUSH
37081: LD_VAR 0 4
37085: ARRAY
37086: PUSH
37087: LD_VAR 0 2
37091: PUSH
37092: LD_VAR 0 4
37096: ARRAY
37097: PPUSH
37098: CALL_OW 255
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PPUSH
37107: CALL 44530 0 3
37111: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37112: LD_VAR 0 2
37116: PUSH
37117: LD_VAR 0 4
37121: ARRAY
37122: PPUSH
37123: LD_VAR 0 1
37127: PPUSH
37128: CALL_OW 255
37132: PPUSH
37133: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37137: LD_VAR 0 2
37141: PUSH
37142: LD_VAR 0 4
37146: ARRAY
37147: PPUSH
37148: CALL_OW 141
// end ;
37152: GO 36984
37154: POP
37155: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37156: LD_VAR 0 1
37160: PPUSH
37161: LD_EXP 109
37165: PUSH
37166: LD_VAR 0 5
37170: ARRAY
37171: PUSH
37172: LD_INT 0
37174: PLUS
37175: PPUSH
37176: CALL_OW 505
// end ;
37180: LD_VAR 0 3
37184: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37185: LD_INT 0
37187: PPUSH
37188: PPUSH
37189: PPUSH
37190: PPUSH
// if not hack in hackTanks then
37191: LD_VAR 0 1
37195: PUSH
37196: LD_EXP 108
37200: IN
37201: NOT
37202: IFFALSE 37206
// exit ;
37204: GO 37446
// index := GetElementIndex ( hackTanks , hack ) ;
37206: LD_ADDR_VAR 0 4
37210: PUSH
37211: LD_EXP 108
37215: PPUSH
37216: LD_VAR 0 1
37220: PPUSH
37221: CALL 44315 0 2
37225: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37226: LD_ADDR_VAR 0 3
37230: PUSH
37231: DOUBLE
37232: LD_EXP 109
37236: PUSH
37237: LD_VAR 0 4
37241: ARRAY
37242: INC
37243: ST_TO_ADDR
37244: LD_INT 1
37246: PUSH
37247: FOR_DOWNTO
37248: IFFALSE 37420
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37250: LD_ADDR_VAR 0 5
37254: PUSH
37255: LD_EXP 109
37259: PUSH
37260: LD_VAR 0 4
37264: ARRAY
37265: PUSH
37266: LD_VAR 0 3
37270: ARRAY
37271: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37272: LD_VAR 0 5
37276: PUSH
37277: LD_INT 1
37279: ARRAY
37280: PPUSH
37281: CALL_OW 302
37285: NOT
37286: PUSH
37287: LD_VAR 0 5
37291: PUSH
37292: LD_INT 1
37294: ARRAY
37295: PPUSH
37296: CALL_OW 255
37300: PUSH
37301: LD_VAR 0 1
37305: PPUSH
37306: CALL_OW 255
37310: NONEQUAL
37311: OR
37312: IFFALSE 37418
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37314: LD_VAR 0 5
37318: PUSH
37319: LD_INT 1
37321: ARRAY
37322: PPUSH
37323: CALL_OW 305
37327: PUSH
37328: LD_VAR 0 5
37332: PUSH
37333: LD_INT 1
37335: ARRAY
37336: PPUSH
37337: CALL_OW 255
37341: PUSH
37342: LD_VAR 0 1
37346: PPUSH
37347: CALL_OW 255
37351: EQUAL
37352: AND
37353: IFFALSE 37377
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37355: LD_VAR 0 5
37359: PUSH
37360: LD_INT 1
37362: ARRAY
37363: PPUSH
37364: LD_VAR 0 5
37368: PUSH
37369: LD_INT 2
37371: ARRAY
37372: PPUSH
37373: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37377: LD_ADDR_EXP 109
37381: PUSH
37382: LD_EXP 109
37386: PPUSH
37387: LD_VAR 0 4
37391: PPUSH
37392: LD_EXP 109
37396: PUSH
37397: LD_VAR 0 4
37401: ARRAY
37402: PPUSH
37403: LD_VAR 0 3
37407: PPUSH
37408: CALL_OW 3
37412: PPUSH
37413: CALL_OW 1
37417: ST_TO_ADDR
// end ; end ;
37418: GO 37247
37420: POP
37421: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37422: LD_VAR 0 1
37426: PPUSH
37427: LD_EXP 109
37431: PUSH
37432: LD_VAR 0 4
37436: ARRAY
37437: PUSH
37438: LD_INT 0
37440: PLUS
37441: PPUSH
37442: CALL_OW 505
// end ;
37446: LD_VAR 0 2
37450: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37451: LD_INT 0
37453: PPUSH
37454: PPUSH
37455: PPUSH
37456: PPUSH
// if not hack in hackTanks then
37457: LD_VAR 0 1
37461: PUSH
37462: LD_EXP 108
37466: IN
37467: NOT
37468: IFFALSE 37472
// exit ;
37470: GO 37557
// index := GetElementIndex ( hackTanks , hack ) ;
37472: LD_ADDR_VAR 0 5
37476: PUSH
37477: LD_EXP 108
37481: PPUSH
37482: LD_VAR 0 1
37486: PPUSH
37487: CALL 44315 0 2
37491: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37492: LD_ADDR_VAR 0 4
37496: PUSH
37497: DOUBLE
37498: LD_INT 1
37500: DEC
37501: ST_TO_ADDR
37502: LD_EXP 109
37506: PUSH
37507: LD_VAR 0 5
37511: ARRAY
37512: PUSH
37513: FOR_TO
37514: IFFALSE 37555
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37516: LD_EXP 109
37520: PUSH
37521: LD_VAR 0 5
37525: ARRAY
37526: PUSH
37527: LD_VAR 0 4
37531: ARRAY
37532: PUSH
37533: LD_INT 1
37535: ARRAY
37536: PUSH
37537: LD_VAR 0 2
37541: EQUAL
37542: IFFALSE 37553
// KillUnit ( vehicle ) ;
37544: LD_VAR 0 2
37548: PPUSH
37549: CALL_OW 66
37553: GO 37513
37555: POP
37556: POP
// end ;
37557: LD_VAR 0 3
37561: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37562: LD_EXP 113
37566: NOT
37567: IFFALSE 37602
37569: GO 37571
37571: DISABLE
// begin initMiner := true ;
37572: LD_ADDR_EXP 113
37576: PUSH
37577: LD_INT 1
37579: ST_TO_ADDR
// minersList := [ ] ;
37580: LD_ADDR_EXP 114
37584: PUSH
37585: EMPTY
37586: ST_TO_ADDR
// minerMinesList := [ ] ;
37587: LD_ADDR_EXP 115
37591: PUSH
37592: EMPTY
37593: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37594: LD_ADDR_EXP 116
37598: PUSH
37599: LD_INT 5
37601: ST_TO_ADDR
// end ;
37602: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37603: LD_EXP 113
37607: PUSH
37608: LD_INT 34
37610: PUSH
37611: LD_INT 81
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: PPUSH
37618: CALL_OW 69
37622: AND
37623: IFFALSE 38084
37625: GO 37627
37627: DISABLE
37628: LD_INT 0
37630: PPUSH
37631: PPUSH
37632: PPUSH
37633: PPUSH
// begin enable ;
37634: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37635: LD_ADDR_VAR 0 1
37639: PUSH
37640: LD_INT 34
37642: PUSH
37643: LD_INT 81
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PPUSH
37650: CALL_OW 69
37654: PUSH
37655: FOR_IN
37656: IFFALSE 37728
// begin if not i in minersList then
37658: LD_VAR 0 1
37662: PUSH
37663: LD_EXP 114
37667: IN
37668: NOT
37669: IFFALSE 37726
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37671: LD_ADDR_EXP 114
37675: PUSH
37676: LD_EXP 114
37680: PPUSH
37681: LD_EXP 114
37685: PUSH
37686: LD_INT 1
37688: PLUS
37689: PPUSH
37690: LD_VAR 0 1
37694: PPUSH
37695: CALL_OW 1
37699: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37700: LD_ADDR_EXP 115
37704: PUSH
37705: LD_EXP 115
37709: PPUSH
37710: LD_EXP 115
37714: PUSH
37715: LD_INT 1
37717: PLUS
37718: PPUSH
37719: EMPTY
37720: PPUSH
37721: CALL_OW 1
37725: ST_TO_ADDR
// end end ;
37726: GO 37655
37728: POP
37729: POP
// for i := minerMinesList downto 1 do
37730: LD_ADDR_VAR 0 1
37734: PUSH
37735: DOUBLE
37736: LD_EXP 115
37740: INC
37741: ST_TO_ADDR
37742: LD_INT 1
37744: PUSH
37745: FOR_DOWNTO
37746: IFFALSE 38082
// begin if IsLive ( minersList [ i ] ) then
37748: LD_EXP 114
37752: PUSH
37753: LD_VAR 0 1
37757: ARRAY
37758: PPUSH
37759: CALL_OW 300
37763: IFFALSE 37791
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37765: LD_EXP 114
37769: PUSH
37770: LD_VAR 0 1
37774: ARRAY
37775: PPUSH
37776: LD_EXP 115
37780: PUSH
37781: LD_VAR 0 1
37785: ARRAY
37786: PPUSH
37787: CALL_OW 505
// if not minerMinesList [ i ] then
37791: LD_EXP 115
37795: PUSH
37796: LD_VAR 0 1
37800: ARRAY
37801: NOT
37802: IFFALSE 37806
// continue ;
37804: GO 37745
// for j := minerMinesList [ i ] downto 1 do
37806: LD_ADDR_VAR 0 2
37810: PUSH
37811: DOUBLE
37812: LD_EXP 115
37816: PUSH
37817: LD_VAR 0 1
37821: ARRAY
37822: INC
37823: ST_TO_ADDR
37824: LD_INT 1
37826: PUSH
37827: FOR_DOWNTO
37828: IFFALSE 38078
// begin side := GetSide ( minersList [ i ] ) ;
37830: LD_ADDR_VAR 0 3
37834: PUSH
37835: LD_EXP 114
37839: PUSH
37840: LD_VAR 0 1
37844: ARRAY
37845: PPUSH
37846: CALL_OW 255
37850: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37851: LD_ADDR_VAR 0 4
37855: PUSH
37856: LD_EXP 115
37860: PUSH
37861: LD_VAR 0 1
37865: ARRAY
37866: PUSH
37867: LD_VAR 0 2
37871: ARRAY
37872: PUSH
37873: LD_INT 1
37875: ARRAY
37876: PPUSH
37877: LD_EXP 115
37881: PUSH
37882: LD_VAR 0 1
37886: ARRAY
37887: PUSH
37888: LD_VAR 0 2
37892: ARRAY
37893: PUSH
37894: LD_INT 2
37896: ARRAY
37897: PPUSH
37898: CALL_OW 428
37902: ST_TO_ADDR
// if not tmp then
37903: LD_VAR 0 4
37907: NOT
37908: IFFALSE 37912
// continue ;
37910: GO 37827
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37912: LD_VAR 0 4
37916: PUSH
37917: LD_INT 81
37919: PUSH
37920: LD_VAR 0 3
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PPUSH
37929: CALL_OW 69
37933: IN
37934: PUSH
37935: LD_EXP 115
37939: PUSH
37940: LD_VAR 0 1
37944: ARRAY
37945: PUSH
37946: LD_VAR 0 2
37950: ARRAY
37951: PUSH
37952: LD_INT 1
37954: ARRAY
37955: PPUSH
37956: LD_EXP 115
37960: PUSH
37961: LD_VAR 0 1
37965: ARRAY
37966: PUSH
37967: LD_VAR 0 2
37971: ARRAY
37972: PUSH
37973: LD_INT 2
37975: ARRAY
37976: PPUSH
37977: CALL_OW 458
37981: AND
37982: IFFALSE 38076
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37984: LD_EXP 115
37988: PUSH
37989: LD_VAR 0 1
37993: ARRAY
37994: PUSH
37995: LD_VAR 0 2
37999: ARRAY
38000: PUSH
38001: LD_INT 1
38003: ARRAY
38004: PPUSH
38005: LD_EXP 115
38009: PUSH
38010: LD_VAR 0 1
38014: ARRAY
38015: PUSH
38016: LD_VAR 0 2
38020: ARRAY
38021: PUSH
38022: LD_INT 2
38024: ARRAY
38025: PPUSH
38026: LD_VAR 0 3
38030: PPUSH
38031: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38035: LD_ADDR_EXP 115
38039: PUSH
38040: LD_EXP 115
38044: PPUSH
38045: LD_VAR 0 1
38049: PPUSH
38050: LD_EXP 115
38054: PUSH
38055: LD_VAR 0 1
38059: ARRAY
38060: PPUSH
38061: LD_VAR 0 2
38065: PPUSH
38066: CALL_OW 3
38070: PPUSH
38071: CALL_OW 1
38075: ST_TO_ADDR
// end ; end ;
38076: GO 37827
38078: POP
38079: POP
// end ;
38080: GO 37745
38082: POP
38083: POP
// end ;
38084: PPOPN 4
38086: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38087: LD_INT 0
38089: PPUSH
38090: PPUSH
// result := false ;
38091: LD_ADDR_VAR 0 4
38095: PUSH
38096: LD_INT 0
38098: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38099: LD_VAR 0 1
38103: PPUSH
38104: CALL_OW 264
38108: PUSH
38109: LD_INT 81
38111: EQUAL
38112: NOT
38113: IFFALSE 38117
// exit ;
38115: GO 38357
// index := GetElementIndex ( minersList , unit ) ;
38117: LD_ADDR_VAR 0 5
38121: PUSH
38122: LD_EXP 114
38126: PPUSH
38127: LD_VAR 0 1
38131: PPUSH
38132: CALL 44315 0 2
38136: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38137: LD_EXP 115
38141: PUSH
38142: LD_VAR 0 5
38146: ARRAY
38147: PUSH
38148: LD_EXP 116
38152: GREATEREQUAL
38153: IFFALSE 38157
// exit ;
38155: GO 38357
// ComMoveXY ( unit , x , y ) ;
38157: LD_VAR 0 1
38161: PPUSH
38162: LD_VAR 0 2
38166: PPUSH
38167: LD_VAR 0 3
38171: PPUSH
38172: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38176: LD_INT 35
38178: PPUSH
38179: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38183: LD_VAR 0 1
38187: PPUSH
38188: LD_VAR 0 2
38192: PPUSH
38193: LD_VAR 0 3
38197: PPUSH
38198: CALL 76067 0 3
38202: NOT
38203: PUSH
38204: LD_VAR 0 1
38208: PPUSH
38209: CALL_OW 314
38213: AND
38214: IFFALSE 38218
// exit ;
38216: GO 38357
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38218: LD_VAR 0 2
38222: PPUSH
38223: LD_VAR 0 3
38227: PPUSH
38228: CALL_OW 428
38232: PUSH
38233: LD_VAR 0 1
38237: EQUAL
38238: PUSH
38239: LD_VAR 0 1
38243: PPUSH
38244: CALL_OW 314
38248: NOT
38249: AND
38250: IFFALSE 38176
// PlaySoundXY ( x , y , PlantMine ) ;
38252: LD_VAR 0 2
38256: PPUSH
38257: LD_VAR 0 3
38261: PPUSH
38262: LD_STRING PlantMine
38264: PPUSH
38265: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38269: LD_VAR 0 2
38273: PPUSH
38274: LD_VAR 0 3
38278: PPUSH
38279: LD_VAR 0 1
38283: PPUSH
38284: CALL_OW 255
38288: PPUSH
38289: LD_INT 0
38291: PPUSH
38292: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38296: LD_ADDR_EXP 115
38300: PUSH
38301: LD_EXP 115
38305: PPUSH
38306: LD_VAR 0 5
38310: PUSH
38311: LD_EXP 115
38315: PUSH
38316: LD_VAR 0 5
38320: ARRAY
38321: PUSH
38322: LD_INT 1
38324: PLUS
38325: PUSH
38326: EMPTY
38327: LIST
38328: LIST
38329: PPUSH
38330: LD_VAR 0 2
38334: PUSH
38335: LD_VAR 0 3
38339: PUSH
38340: EMPTY
38341: LIST
38342: LIST
38343: PPUSH
38344: CALL 44530 0 3
38348: ST_TO_ADDR
// result := true ;
38349: LD_ADDR_VAR 0 4
38353: PUSH
38354: LD_INT 1
38356: ST_TO_ADDR
// end ;
38357: LD_VAR 0 4
38361: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38362: LD_INT 0
38364: PPUSH
38365: PPUSH
38366: PPUSH
// if not unit in minersList then
38367: LD_VAR 0 1
38371: PUSH
38372: LD_EXP 114
38376: IN
38377: NOT
38378: IFFALSE 38382
// exit ;
38380: GO 38774
// index := GetElementIndex ( minersList , unit ) ;
38382: LD_ADDR_VAR 0 6
38386: PUSH
38387: LD_EXP 114
38391: PPUSH
38392: LD_VAR 0 1
38396: PPUSH
38397: CALL 44315 0 2
38401: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38402: LD_ADDR_VAR 0 5
38406: PUSH
38407: DOUBLE
38408: LD_EXP 115
38412: PUSH
38413: LD_VAR 0 6
38417: ARRAY
38418: INC
38419: ST_TO_ADDR
38420: LD_INT 1
38422: PUSH
38423: FOR_DOWNTO
38424: IFFALSE 38585
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38426: LD_EXP 115
38430: PUSH
38431: LD_VAR 0 6
38435: ARRAY
38436: PUSH
38437: LD_VAR 0 5
38441: ARRAY
38442: PUSH
38443: LD_INT 1
38445: ARRAY
38446: PUSH
38447: LD_VAR 0 2
38451: EQUAL
38452: PUSH
38453: LD_EXP 115
38457: PUSH
38458: LD_VAR 0 6
38462: ARRAY
38463: PUSH
38464: LD_VAR 0 5
38468: ARRAY
38469: PUSH
38470: LD_INT 2
38472: ARRAY
38473: PUSH
38474: LD_VAR 0 3
38478: EQUAL
38479: AND
38480: IFFALSE 38583
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38482: LD_EXP 115
38486: PUSH
38487: LD_VAR 0 6
38491: ARRAY
38492: PUSH
38493: LD_VAR 0 5
38497: ARRAY
38498: PUSH
38499: LD_INT 1
38501: ARRAY
38502: PPUSH
38503: LD_EXP 115
38507: PUSH
38508: LD_VAR 0 6
38512: ARRAY
38513: PUSH
38514: LD_VAR 0 5
38518: ARRAY
38519: PUSH
38520: LD_INT 2
38522: ARRAY
38523: PPUSH
38524: LD_VAR 0 1
38528: PPUSH
38529: CALL_OW 255
38533: PPUSH
38534: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38538: LD_ADDR_EXP 115
38542: PUSH
38543: LD_EXP 115
38547: PPUSH
38548: LD_VAR 0 6
38552: PPUSH
38553: LD_EXP 115
38557: PUSH
38558: LD_VAR 0 6
38562: ARRAY
38563: PPUSH
38564: LD_VAR 0 5
38568: PPUSH
38569: CALL_OW 3
38573: PPUSH
38574: CALL_OW 1
38578: ST_TO_ADDR
// exit ;
38579: POP
38580: POP
38581: GO 38774
// end ; end ;
38583: GO 38423
38585: POP
38586: POP
// for i := minerMinesList [ index ] downto 1 do
38587: LD_ADDR_VAR 0 5
38591: PUSH
38592: DOUBLE
38593: LD_EXP 115
38597: PUSH
38598: LD_VAR 0 6
38602: ARRAY
38603: INC
38604: ST_TO_ADDR
38605: LD_INT 1
38607: PUSH
38608: FOR_DOWNTO
38609: IFFALSE 38772
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38611: LD_EXP 115
38615: PUSH
38616: LD_VAR 0 6
38620: ARRAY
38621: PUSH
38622: LD_VAR 0 5
38626: ARRAY
38627: PUSH
38628: LD_INT 1
38630: ARRAY
38631: PPUSH
38632: LD_EXP 115
38636: PUSH
38637: LD_VAR 0 6
38641: ARRAY
38642: PUSH
38643: LD_VAR 0 5
38647: ARRAY
38648: PUSH
38649: LD_INT 2
38651: ARRAY
38652: PPUSH
38653: LD_VAR 0 2
38657: PPUSH
38658: LD_VAR 0 3
38662: PPUSH
38663: CALL_OW 298
38667: PUSH
38668: LD_INT 6
38670: LESS
38671: IFFALSE 38770
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38673: LD_EXP 115
38677: PUSH
38678: LD_VAR 0 6
38682: ARRAY
38683: PUSH
38684: LD_VAR 0 5
38688: ARRAY
38689: PUSH
38690: LD_INT 1
38692: ARRAY
38693: PPUSH
38694: LD_EXP 115
38698: PUSH
38699: LD_VAR 0 6
38703: ARRAY
38704: PUSH
38705: LD_VAR 0 5
38709: ARRAY
38710: PUSH
38711: LD_INT 2
38713: ARRAY
38714: PPUSH
38715: LD_VAR 0 1
38719: PPUSH
38720: CALL_OW 255
38724: PPUSH
38725: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38729: LD_ADDR_EXP 115
38733: PUSH
38734: LD_EXP 115
38738: PPUSH
38739: LD_VAR 0 6
38743: PPUSH
38744: LD_EXP 115
38748: PUSH
38749: LD_VAR 0 6
38753: ARRAY
38754: PPUSH
38755: LD_VAR 0 5
38759: PPUSH
38760: CALL_OW 3
38764: PPUSH
38765: CALL_OW 1
38769: ST_TO_ADDR
// end ; end ;
38770: GO 38608
38772: POP
38773: POP
// end ;
38774: LD_VAR 0 4
38778: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38779: LD_INT 0
38781: PPUSH
38782: PPUSH
38783: PPUSH
38784: PPUSH
38785: PPUSH
38786: PPUSH
38787: PPUSH
38788: PPUSH
38789: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38790: LD_VAR 0 1
38794: PPUSH
38795: CALL_OW 264
38799: PUSH
38800: LD_INT 81
38802: EQUAL
38803: NOT
38804: PUSH
38805: LD_VAR 0 1
38809: PUSH
38810: LD_EXP 114
38814: IN
38815: NOT
38816: OR
38817: IFFALSE 38821
// exit ;
38819: GO 39143
// index := GetElementIndex ( minersList , unit ) ;
38821: LD_ADDR_VAR 0 6
38825: PUSH
38826: LD_EXP 114
38830: PPUSH
38831: LD_VAR 0 1
38835: PPUSH
38836: CALL 44315 0 2
38840: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38841: LD_ADDR_VAR 0 8
38845: PUSH
38846: LD_EXP 116
38850: PUSH
38851: LD_EXP 115
38855: PUSH
38856: LD_VAR 0 6
38860: ARRAY
38861: MINUS
38862: ST_TO_ADDR
// if not minesFreeAmount then
38863: LD_VAR 0 8
38867: NOT
38868: IFFALSE 38872
// exit ;
38870: GO 39143
// tmp := [ ] ;
38872: LD_ADDR_VAR 0 7
38876: PUSH
38877: EMPTY
38878: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38879: LD_ADDR_VAR 0 5
38883: PUSH
38884: DOUBLE
38885: LD_INT 1
38887: DEC
38888: ST_TO_ADDR
38889: LD_VAR 0 8
38893: PUSH
38894: FOR_TO
38895: IFFALSE 39090
// begin _d := rand ( 0 , 5 ) ;
38897: LD_ADDR_VAR 0 11
38901: PUSH
38902: LD_INT 0
38904: PPUSH
38905: LD_INT 5
38907: PPUSH
38908: CALL_OW 12
38912: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38913: LD_ADDR_VAR 0 12
38917: PUSH
38918: LD_INT 2
38920: PPUSH
38921: LD_INT 6
38923: PPUSH
38924: CALL_OW 12
38928: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38929: LD_ADDR_VAR 0 9
38933: PUSH
38934: LD_VAR 0 2
38938: PPUSH
38939: LD_VAR 0 11
38943: PPUSH
38944: LD_VAR 0 12
38948: PPUSH
38949: CALL_OW 272
38953: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38954: LD_ADDR_VAR 0 10
38958: PUSH
38959: LD_VAR 0 3
38963: PPUSH
38964: LD_VAR 0 11
38968: PPUSH
38969: LD_VAR 0 12
38973: PPUSH
38974: CALL_OW 273
38978: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38979: LD_VAR 0 9
38983: PPUSH
38984: LD_VAR 0 10
38988: PPUSH
38989: CALL_OW 488
38993: PUSH
38994: LD_VAR 0 9
38998: PUSH
38999: LD_VAR 0 10
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_VAR 0 7
39012: IN
39013: NOT
39014: AND
39015: PUSH
39016: LD_VAR 0 9
39020: PPUSH
39021: LD_VAR 0 10
39025: PPUSH
39026: CALL_OW 458
39030: NOT
39031: AND
39032: IFFALSE 39074
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39034: LD_ADDR_VAR 0 7
39038: PUSH
39039: LD_VAR 0 7
39043: PPUSH
39044: LD_VAR 0 7
39048: PUSH
39049: LD_INT 1
39051: PLUS
39052: PPUSH
39053: LD_VAR 0 9
39057: PUSH
39058: LD_VAR 0 10
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PPUSH
39067: CALL_OW 1
39071: ST_TO_ADDR
39072: GO 39088
// i := i - 1 ;
39074: LD_ADDR_VAR 0 5
39078: PUSH
39079: LD_VAR 0 5
39083: PUSH
39084: LD_INT 1
39086: MINUS
39087: ST_TO_ADDR
// end ;
39088: GO 38894
39090: POP
39091: POP
// for i in tmp do
39092: LD_ADDR_VAR 0 5
39096: PUSH
39097: LD_VAR 0 7
39101: PUSH
39102: FOR_IN
39103: IFFALSE 39141
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39105: LD_VAR 0 1
39109: PPUSH
39110: LD_VAR 0 5
39114: PUSH
39115: LD_INT 1
39117: ARRAY
39118: PPUSH
39119: LD_VAR 0 5
39123: PUSH
39124: LD_INT 2
39126: ARRAY
39127: PPUSH
39128: CALL 38087 0 3
39132: NOT
39133: IFFALSE 39139
// exit ;
39135: POP
39136: POP
39137: GO 39143
39139: GO 39102
39141: POP
39142: POP
// end ;
39143: LD_VAR 0 4
39147: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39148: LD_INT 0
39150: PPUSH
39151: PPUSH
39152: PPUSH
39153: PPUSH
39154: PPUSH
39155: PPUSH
39156: PPUSH
// if not GetClass ( unit ) = class_sniper then
39157: LD_VAR 0 1
39161: PPUSH
39162: CALL_OW 257
39166: PUSH
39167: LD_INT 5
39169: EQUAL
39170: NOT
39171: IFFALSE 39175
// exit ;
39173: GO 39563
// dist := 8 ;
39175: LD_ADDR_VAR 0 5
39179: PUSH
39180: LD_INT 8
39182: ST_TO_ADDR
// viewRange := 12 ;
39183: LD_ADDR_VAR 0 7
39187: PUSH
39188: LD_INT 12
39190: ST_TO_ADDR
// side := GetSide ( unit ) ;
39191: LD_ADDR_VAR 0 6
39195: PUSH
39196: LD_VAR 0 1
39200: PPUSH
39201: CALL_OW 255
39205: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39206: LD_INT 61
39208: PPUSH
39209: LD_VAR 0 6
39213: PPUSH
39214: CALL_OW 321
39218: PUSH
39219: LD_INT 2
39221: EQUAL
39222: IFFALSE 39232
// viewRange := 16 ;
39224: LD_ADDR_VAR 0 7
39228: PUSH
39229: LD_INT 16
39231: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39232: LD_VAR 0 1
39236: PPUSH
39237: LD_VAR 0 2
39241: PPUSH
39242: LD_VAR 0 3
39246: PPUSH
39247: CALL_OW 297
39251: PUSH
39252: LD_VAR 0 5
39256: GREATER
39257: IFFALSE 39336
// begin ComMoveXY ( unit , x , y ) ;
39259: LD_VAR 0 1
39263: PPUSH
39264: LD_VAR 0 2
39268: PPUSH
39269: LD_VAR 0 3
39273: PPUSH
39274: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39278: LD_INT 35
39280: PPUSH
39281: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39285: LD_VAR 0 1
39289: PPUSH
39290: LD_VAR 0 2
39294: PPUSH
39295: LD_VAR 0 3
39299: PPUSH
39300: CALL 76067 0 3
39304: NOT
39305: IFFALSE 39309
// exit ;
39307: GO 39563
// until GetDistUnitXY ( unit , x , y ) < dist ;
39309: LD_VAR 0 1
39313: PPUSH
39314: LD_VAR 0 2
39318: PPUSH
39319: LD_VAR 0 3
39323: PPUSH
39324: CALL_OW 297
39328: PUSH
39329: LD_VAR 0 5
39333: LESS
39334: IFFALSE 39278
// end ; ComTurnXY ( unit , x , y ) ;
39336: LD_VAR 0 1
39340: PPUSH
39341: LD_VAR 0 2
39345: PPUSH
39346: LD_VAR 0 3
39350: PPUSH
39351: CALL_OW 118
// wait ( 5 ) ;
39355: LD_INT 5
39357: PPUSH
39358: CALL_OW 67
// _d := GetDir ( unit ) ;
39362: LD_ADDR_VAR 0 10
39366: PUSH
39367: LD_VAR 0 1
39371: PPUSH
39372: CALL_OW 254
39376: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39377: LD_ADDR_VAR 0 8
39381: PUSH
39382: LD_VAR 0 1
39386: PPUSH
39387: CALL_OW 250
39391: PPUSH
39392: LD_VAR 0 10
39396: PPUSH
39397: LD_VAR 0 5
39401: PPUSH
39402: CALL_OW 272
39406: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39407: LD_ADDR_VAR 0 9
39411: PUSH
39412: LD_VAR 0 1
39416: PPUSH
39417: CALL_OW 251
39421: PPUSH
39422: LD_VAR 0 10
39426: PPUSH
39427: LD_VAR 0 5
39431: PPUSH
39432: CALL_OW 273
39436: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39437: LD_VAR 0 8
39441: PPUSH
39442: LD_VAR 0 9
39446: PPUSH
39447: CALL_OW 488
39451: NOT
39452: IFFALSE 39456
// exit ;
39454: GO 39563
// ComAnimCustom ( unit , 1 ) ;
39456: LD_VAR 0 1
39460: PPUSH
39461: LD_INT 1
39463: PPUSH
39464: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39468: LD_VAR 0 8
39472: PPUSH
39473: LD_VAR 0 9
39477: PPUSH
39478: LD_VAR 0 6
39482: PPUSH
39483: LD_VAR 0 7
39487: PPUSH
39488: CALL_OW 330
// repeat wait ( 1 ) ;
39492: LD_INT 1
39494: PPUSH
39495: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39499: LD_VAR 0 1
39503: PPUSH
39504: CALL_OW 316
39508: PUSH
39509: LD_VAR 0 1
39513: PPUSH
39514: CALL_OW 314
39518: OR
39519: PUSH
39520: LD_VAR 0 1
39524: PPUSH
39525: CALL_OW 302
39529: NOT
39530: OR
39531: PUSH
39532: LD_VAR 0 1
39536: PPUSH
39537: CALL_OW 301
39541: OR
39542: IFFALSE 39492
// RemoveSeeing ( _x , _y , side ) ;
39544: LD_VAR 0 8
39548: PPUSH
39549: LD_VAR 0 9
39553: PPUSH
39554: LD_VAR 0 6
39558: PPUSH
39559: CALL_OW 331
// end ; end_of_file
39563: LD_VAR 0 4
39567: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39568: LD_INT 0
39570: PPUSH
39571: PPUSH
// if exist_mode then
39572: LD_VAR 0 2
39576: IFFALSE 39601
// unit := CreateCharacter ( prefix & ident ) else
39578: LD_ADDR_VAR 0 5
39582: PUSH
39583: LD_VAR 0 3
39587: PUSH
39588: LD_VAR 0 1
39592: STR
39593: PPUSH
39594: CALL_OW 34
39598: ST_TO_ADDR
39599: GO 39616
// unit := NewCharacter ( ident ) ;
39601: LD_ADDR_VAR 0 5
39605: PUSH
39606: LD_VAR 0 1
39610: PPUSH
39611: CALL_OW 25
39615: ST_TO_ADDR
// result := unit ;
39616: LD_ADDR_VAR 0 4
39620: PUSH
39621: LD_VAR 0 5
39625: ST_TO_ADDR
// end ;
39626: LD_VAR 0 4
39630: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39631: LD_INT 0
39633: PPUSH
39634: PPUSH
// if not side or not nation then
39635: LD_VAR 0 1
39639: NOT
39640: PUSH
39641: LD_VAR 0 2
39645: NOT
39646: OR
39647: IFFALSE 39651
// exit ;
39649: GO 40419
// case nation of nation_american :
39651: LD_VAR 0 2
39655: PUSH
39656: LD_INT 1
39658: DOUBLE
39659: EQUAL
39660: IFTRUE 39664
39662: GO 39878
39664: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39665: LD_ADDR_VAR 0 4
39669: PUSH
39670: LD_INT 35
39672: PUSH
39673: LD_INT 45
39675: PUSH
39676: LD_INT 46
39678: PUSH
39679: LD_INT 47
39681: PUSH
39682: LD_INT 82
39684: PUSH
39685: LD_INT 83
39687: PUSH
39688: LD_INT 84
39690: PUSH
39691: LD_INT 85
39693: PUSH
39694: LD_INT 86
39696: PUSH
39697: LD_INT 1
39699: PUSH
39700: LD_INT 2
39702: PUSH
39703: LD_INT 6
39705: PUSH
39706: LD_INT 15
39708: PUSH
39709: LD_INT 16
39711: PUSH
39712: LD_INT 7
39714: PUSH
39715: LD_INT 12
39717: PUSH
39718: LD_INT 13
39720: PUSH
39721: LD_INT 10
39723: PUSH
39724: LD_INT 14
39726: PUSH
39727: LD_INT 20
39729: PUSH
39730: LD_INT 21
39732: PUSH
39733: LD_INT 22
39735: PUSH
39736: LD_INT 25
39738: PUSH
39739: LD_INT 32
39741: PUSH
39742: LD_INT 27
39744: PUSH
39745: LD_INT 36
39747: PUSH
39748: LD_INT 69
39750: PUSH
39751: LD_INT 39
39753: PUSH
39754: LD_INT 34
39756: PUSH
39757: LD_INT 40
39759: PUSH
39760: LD_INT 48
39762: PUSH
39763: LD_INT 49
39765: PUSH
39766: LD_INT 50
39768: PUSH
39769: LD_INT 51
39771: PUSH
39772: LD_INT 52
39774: PUSH
39775: LD_INT 53
39777: PUSH
39778: LD_INT 54
39780: PUSH
39781: LD_INT 55
39783: PUSH
39784: LD_INT 56
39786: PUSH
39787: LD_INT 57
39789: PUSH
39790: LD_INT 58
39792: PUSH
39793: LD_INT 59
39795: PUSH
39796: LD_INT 60
39798: PUSH
39799: LD_INT 61
39801: PUSH
39802: LD_INT 62
39804: PUSH
39805: LD_INT 80
39807: PUSH
39808: LD_INT 82
39810: PUSH
39811: LD_INT 83
39813: PUSH
39814: LD_INT 84
39816: PUSH
39817: LD_INT 85
39819: PUSH
39820: LD_INT 86
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: ST_TO_ADDR
39876: GO 40343
39878: LD_INT 2
39880: DOUBLE
39881: EQUAL
39882: IFTRUE 39886
39884: GO 40112
39886: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39887: LD_ADDR_VAR 0 4
39891: PUSH
39892: LD_INT 35
39894: PUSH
39895: LD_INT 45
39897: PUSH
39898: LD_INT 46
39900: PUSH
39901: LD_INT 47
39903: PUSH
39904: LD_INT 82
39906: PUSH
39907: LD_INT 83
39909: PUSH
39910: LD_INT 84
39912: PUSH
39913: LD_INT 85
39915: PUSH
39916: LD_INT 87
39918: PUSH
39919: LD_INT 70
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 11
39927: PUSH
39928: LD_INT 3
39930: PUSH
39931: LD_INT 4
39933: PUSH
39934: LD_INT 5
39936: PUSH
39937: LD_INT 6
39939: PUSH
39940: LD_INT 15
39942: PUSH
39943: LD_INT 18
39945: PUSH
39946: LD_INT 7
39948: PUSH
39949: LD_INT 17
39951: PUSH
39952: LD_INT 8
39954: PUSH
39955: LD_INT 20
39957: PUSH
39958: LD_INT 21
39960: PUSH
39961: LD_INT 22
39963: PUSH
39964: LD_INT 72
39966: PUSH
39967: LD_INT 26
39969: PUSH
39970: LD_INT 69
39972: PUSH
39973: LD_INT 39
39975: PUSH
39976: LD_INT 40
39978: PUSH
39979: LD_INT 41
39981: PUSH
39982: LD_INT 42
39984: PUSH
39985: LD_INT 43
39987: PUSH
39988: LD_INT 48
39990: PUSH
39991: LD_INT 49
39993: PUSH
39994: LD_INT 50
39996: PUSH
39997: LD_INT 51
39999: PUSH
40000: LD_INT 52
40002: PUSH
40003: LD_INT 53
40005: PUSH
40006: LD_INT 54
40008: PUSH
40009: LD_INT 55
40011: PUSH
40012: LD_INT 56
40014: PUSH
40015: LD_INT 60
40017: PUSH
40018: LD_INT 61
40020: PUSH
40021: LD_INT 62
40023: PUSH
40024: LD_INT 66
40026: PUSH
40027: LD_INT 67
40029: PUSH
40030: LD_INT 68
40032: PUSH
40033: LD_INT 81
40035: PUSH
40036: LD_INT 82
40038: PUSH
40039: LD_INT 83
40041: PUSH
40042: LD_INT 84
40044: PUSH
40045: LD_INT 85
40047: PUSH
40048: LD_INT 87
40050: PUSH
40051: LD_INT 88
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: LIST
40108: LIST
40109: ST_TO_ADDR
40110: GO 40343
40112: LD_INT 3
40114: DOUBLE
40115: EQUAL
40116: IFTRUE 40120
40118: GO 40342
40120: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40121: LD_ADDR_VAR 0 4
40125: PUSH
40126: LD_INT 46
40128: PUSH
40129: LD_INT 47
40131: PUSH
40132: LD_INT 1
40134: PUSH
40135: LD_INT 2
40137: PUSH
40138: LD_INT 82
40140: PUSH
40141: LD_INT 83
40143: PUSH
40144: LD_INT 84
40146: PUSH
40147: LD_INT 85
40149: PUSH
40150: LD_INT 86
40152: PUSH
40153: LD_INT 11
40155: PUSH
40156: LD_INT 9
40158: PUSH
40159: LD_INT 20
40161: PUSH
40162: LD_INT 19
40164: PUSH
40165: LD_INT 21
40167: PUSH
40168: LD_INT 24
40170: PUSH
40171: LD_INT 22
40173: PUSH
40174: LD_INT 25
40176: PUSH
40177: LD_INT 28
40179: PUSH
40180: LD_INT 29
40182: PUSH
40183: LD_INT 30
40185: PUSH
40186: LD_INT 31
40188: PUSH
40189: LD_INT 37
40191: PUSH
40192: LD_INT 38
40194: PUSH
40195: LD_INT 32
40197: PUSH
40198: LD_INT 27
40200: PUSH
40201: LD_INT 33
40203: PUSH
40204: LD_INT 69
40206: PUSH
40207: LD_INT 39
40209: PUSH
40210: LD_INT 34
40212: PUSH
40213: LD_INT 40
40215: PUSH
40216: LD_INT 71
40218: PUSH
40219: LD_INT 23
40221: PUSH
40222: LD_INT 44
40224: PUSH
40225: LD_INT 48
40227: PUSH
40228: LD_INT 49
40230: PUSH
40231: LD_INT 50
40233: PUSH
40234: LD_INT 51
40236: PUSH
40237: LD_INT 52
40239: PUSH
40240: LD_INT 53
40242: PUSH
40243: LD_INT 54
40245: PUSH
40246: LD_INT 55
40248: PUSH
40249: LD_INT 56
40251: PUSH
40252: LD_INT 57
40254: PUSH
40255: LD_INT 58
40257: PUSH
40258: LD_INT 59
40260: PUSH
40261: LD_INT 63
40263: PUSH
40264: LD_INT 64
40266: PUSH
40267: LD_INT 65
40269: PUSH
40270: LD_INT 82
40272: PUSH
40273: LD_INT 83
40275: PUSH
40276: LD_INT 84
40278: PUSH
40279: LD_INT 85
40281: PUSH
40282: LD_INT 86
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: LIST
40301: LIST
40302: LIST
40303: LIST
40304: LIST
40305: LIST
40306: LIST
40307: LIST
40308: LIST
40309: LIST
40310: LIST
40311: LIST
40312: LIST
40313: LIST
40314: LIST
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: LIST
40339: ST_TO_ADDR
40340: GO 40343
40342: POP
// if state > - 1 and state < 3 then
40343: LD_VAR 0 3
40347: PUSH
40348: LD_INT 1
40350: NEG
40351: GREATER
40352: PUSH
40353: LD_VAR 0 3
40357: PUSH
40358: LD_INT 3
40360: LESS
40361: AND
40362: IFFALSE 40419
// for i in result do
40364: LD_ADDR_VAR 0 5
40368: PUSH
40369: LD_VAR 0 4
40373: PUSH
40374: FOR_IN
40375: IFFALSE 40417
// if GetTech ( i , side ) <> state then
40377: LD_VAR 0 5
40381: PPUSH
40382: LD_VAR 0 1
40386: PPUSH
40387: CALL_OW 321
40391: PUSH
40392: LD_VAR 0 3
40396: NONEQUAL
40397: IFFALSE 40415
// result := result diff i ;
40399: LD_ADDR_VAR 0 4
40403: PUSH
40404: LD_VAR 0 4
40408: PUSH
40409: LD_VAR 0 5
40413: DIFF
40414: ST_TO_ADDR
40415: GO 40374
40417: POP
40418: POP
// end ;
40419: LD_VAR 0 4
40423: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40424: LD_INT 0
40426: PPUSH
40427: PPUSH
40428: PPUSH
// result := true ;
40429: LD_ADDR_VAR 0 3
40433: PUSH
40434: LD_INT 1
40436: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40437: LD_ADDR_VAR 0 5
40441: PUSH
40442: LD_VAR 0 2
40446: PPUSH
40447: CALL_OW 480
40451: ST_TO_ADDR
// if not tmp then
40452: LD_VAR 0 5
40456: NOT
40457: IFFALSE 40461
// exit ;
40459: GO 40510
// for i in tmp do
40461: LD_ADDR_VAR 0 4
40465: PUSH
40466: LD_VAR 0 5
40470: PUSH
40471: FOR_IN
40472: IFFALSE 40508
// if GetTech ( i , side ) <> state_researched then
40474: LD_VAR 0 4
40478: PPUSH
40479: LD_VAR 0 1
40483: PPUSH
40484: CALL_OW 321
40488: PUSH
40489: LD_INT 2
40491: NONEQUAL
40492: IFFALSE 40506
// begin result := false ;
40494: LD_ADDR_VAR 0 3
40498: PUSH
40499: LD_INT 0
40501: ST_TO_ADDR
// exit ;
40502: POP
40503: POP
40504: GO 40510
// end ;
40506: GO 40471
40508: POP
40509: POP
// end ;
40510: LD_VAR 0 3
40514: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40515: LD_INT 0
40517: PPUSH
40518: PPUSH
40519: PPUSH
40520: PPUSH
40521: PPUSH
40522: PPUSH
40523: PPUSH
40524: PPUSH
40525: PPUSH
40526: PPUSH
40527: PPUSH
40528: PPUSH
40529: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40530: LD_VAR 0 1
40534: NOT
40535: PUSH
40536: LD_VAR 0 1
40540: PPUSH
40541: CALL_OW 257
40545: PUSH
40546: LD_INT 9
40548: NONEQUAL
40549: OR
40550: IFFALSE 40554
// exit ;
40552: GO 41127
// side := GetSide ( unit ) ;
40554: LD_ADDR_VAR 0 9
40558: PUSH
40559: LD_VAR 0 1
40563: PPUSH
40564: CALL_OW 255
40568: ST_TO_ADDR
// tech_space := tech_spacanom ;
40569: LD_ADDR_VAR 0 12
40573: PUSH
40574: LD_INT 29
40576: ST_TO_ADDR
// tech_time := tech_taurad ;
40577: LD_ADDR_VAR 0 13
40581: PUSH
40582: LD_INT 28
40584: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40585: LD_ADDR_VAR 0 11
40589: PUSH
40590: LD_VAR 0 1
40594: PPUSH
40595: CALL_OW 310
40599: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40600: LD_VAR 0 11
40604: PPUSH
40605: CALL_OW 247
40609: PUSH
40610: LD_INT 2
40612: EQUAL
40613: IFFALSE 40617
// exit ;
40615: GO 41127
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40617: LD_ADDR_VAR 0 8
40621: PUSH
40622: LD_INT 81
40624: PUSH
40625: LD_VAR 0 9
40629: PUSH
40630: EMPTY
40631: LIST
40632: LIST
40633: PUSH
40634: LD_INT 3
40636: PUSH
40637: LD_INT 21
40639: PUSH
40640: LD_INT 3
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PPUSH
40655: CALL_OW 69
40659: ST_TO_ADDR
// if not tmp then
40660: LD_VAR 0 8
40664: NOT
40665: IFFALSE 40669
// exit ;
40667: GO 41127
// if in_unit then
40669: LD_VAR 0 11
40673: IFFALSE 40697
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40675: LD_ADDR_VAR 0 10
40679: PUSH
40680: LD_VAR 0 8
40684: PPUSH
40685: LD_VAR 0 11
40689: PPUSH
40690: CALL_OW 74
40694: ST_TO_ADDR
40695: GO 40717
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40697: LD_ADDR_VAR 0 10
40701: PUSH
40702: LD_VAR 0 8
40706: PPUSH
40707: LD_VAR 0 1
40711: PPUSH
40712: CALL_OW 74
40716: ST_TO_ADDR
// if not enemy then
40717: LD_VAR 0 10
40721: NOT
40722: IFFALSE 40726
// exit ;
40724: GO 41127
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40726: LD_VAR 0 11
40730: PUSH
40731: LD_VAR 0 11
40735: PPUSH
40736: LD_VAR 0 10
40740: PPUSH
40741: CALL_OW 296
40745: PUSH
40746: LD_INT 13
40748: GREATER
40749: AND
40750: PUSH
40751: LD_VAR 0 1
40755: PPUSH
40756: LD_VAR 0 10
40760: PPUSH
40761: CALL_OW 296
40765: PUSH
40766: LD_INT 12
40768: GREATER
40769: OR
40770: IFFALSE 40774
// exit ;
40772: GO 41127
// missile := [ 1 ] ;
40774: LD_ADDR_VAR 0 14
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: EMPTY
40783: LIST
40784: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40785: LD_VAR 0 9
40789: PPUSH
40790: LD_VAR 0 12
40794: PPUSH
40795: CALL_OW 325
40799: IFFALSE 40828
// missile := Replace ( missile , missile + 1 , 2 ) ;
40801: LD_ADDR_VAR 0 14
40805: PUSH
40806: LD_VAR 0 14
40810: PPUSH
40811: LD_VAR 0 14
40815: PUSH
40816: LD_INT 1
40818: PLUS
40819: PPUSH
40820: LD_INT 2
40822: PPUSH
40823: CALL_OW 1
40827: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40828: LD_VAR 0 9
40832: PPUSH
40833: LD_VAR 0 13
40837: PPUSH
40838: CALL_OW 325
40842: PUSH
40843: LD_VAR 0 10
40847: PPUSH
40848: CALL_OW 255
40852: PPUSH
40853: LD_VAR 0 13
40857: PPUSH
40858: CALL_OW 325
40862: NOT
40863: AND
40864: IFFALSE 40893
// missile := Replace ( missile , missile + 1 , 3 ) ;
40866: LD_ADDR_VAR 0 14
40870: PUSH
40871: LD_VAR 0 14
40875: PPUSH
40876: LD_VAR 0 14
40880: PUSH
40881: LD_INT 1
40883: PLUS
40884: PPUSH
40885: LD_INT 3
40887: PPUSH
40888: CALL_OW 1
40892: ST_TO_ADDR
// if missile < 2 then
40893: LD_VAR 0 14
40897: PUSH
40898: LD_INT 2
40900: LESS
40901: IFFALSE 40905
// exit ;
40903: GO 41127
// x := GetX ( enemy ) ;
40905: LD_ADDR_VAR 0 4
40909: PUSH
40910: LD_VAR 0 10
40914: PPUSH
40915: CALL_OW 250
40919: ST_TO_ADDR
// y := GetY ( enemy ) ;
40920: LD_ADDR_VAR 0 5
40924: PUSH
40925: LD_VAR 0 10
40929: PPUSH
40930: CALL_OW 251
40934: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40935: LD_ADDR_VAR 0 6
40939: PUSH
40940: LD_VAR 0 4
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PPUSH
40949: LD_INT 1
40951: PPUSH
40952: CALL_OW 12
40956: PLUS
40957: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40958: LD_ADDR_VAR 0 7
40962: PUSH
40963: LD_VAR 0 5
40967: PUSH
40968: LD_INT 1
40970: NEG
40971: PPUSH
40972: LD_INT 1
40974: PPUSH
40975: CALL_OW 12
40979: PLUS
40980: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40981: LD_VAR 0 6
40985: PPUSH
40986: LD_VAR 0 7
40990: PPUSH
40991: CALL_OW 488
40995: NOT
40996: IFFALSE 41018
// begin _x := x ;
40998: LD_ADDR_VAR 0 6
41002: PUSH
41003: LD_VAR 0 4
41007: ST_TO_ADDR
// _y := y ;
41008: LD_ADDR_VAR 0 7
41012: PUSH
41013: LD_VAR 0 5
41017: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41018: LD_ADDR_VAR 0 3
41022: PUSH
41023: LD_INT 1
41025: PPUSH
41026: LD_VAR 0 14
41030: PPUSH
41031: CALL_OW 12
41035: ST_TO_ADDR
// case i of 1 :
41036: LD_VAR 0 3
41040: PUSH
41041: LD_INT 1
41043: DOUBLE
41044: EQUAL
41045: IFTRUE 41049
41047: GO 41066
41049: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41050: LD_VAR 0 1
41054: PPUSH
41055: LD_VAR 0 10
41059: PPUSH
41060: CALL_OW 115
41064: GO 41127
41066: LD_INT 2
41068: DOUBLE
41069: EQUAL
41070: IFTRUE 41074
41072: GO 41096
41074: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41075: LD_VAR 0 1
41079: PPUSH
41080: LD_VAR 0 6
41084: PPUSH
41085: LD_VAR 0 7
41089: PPUSH
41090: CALL_OW 153
41094: GO 41127
41096: LD_INT 3
41098: DOUBLE
41099: EQUAL
41100: IFTRUE 41104
41102: GO 41126
41104: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41105: LD_VAR 0 1
41109: PPUSH
41110: LD_VAR 0 6
41114: PPUSH
41115: LD_VAR 0 7
41119: PPUSH
41120: CALL_OW 154
41124: GO 41127
41126: POP
// end ;
41127: LD_VAR 0 2
41131: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41132: LD_INT 0
41134: PPUSH
41135: PPUSH
41136: PPUSH
41137: PPUSH
41138: PPUSH
41139: PPUSH
// if not unit or not building then
41140: LD_VAR 0 1
41144: NOT
41145: PUSH
41146: LD_VAR 0 2
41150: NOT
41151: OR
41152: IFFALSE 41156
// exit ;
41154: GO 41314
// x := GetX ( building ) ;
41156: LD_ADDR_VAR 0 5
41160: PUSH
41161: LD_VAR 0 2
41165: PPUSH
41166: CALL_OW 250
41170: ST_TO_ADDR
// y := GetY ( building ) ;
41171: LD_ADDR_VAR 0 6
41175: PUSH
41176: LD_VAR 0 2
41180: PPUSH
41181: CALL_OW 251
41185: ST_TO_ADDR
// for i = 0 to 5 do
41186: LD_ADDR_VAR 0 4
41190: PUSH
41191: DOUBLE
41192: LD_INT 0
41194: DEC
41195: ST_TO_ADDR
41196: LD_INT 5
41198: PUSH
41199: FOR_TO
41200: IFFALSE 41312
// begin _x := ShiftX ( x , i , 3 ) ;
41202: LD_ADDR_VAR 0 7
41206: PUSH
41207: LD_VAR 0 5
41211: PPUSH
41212: LD_VAR 0 4
41216: PPUSH
41217: LD_INT 3
41219: PPUSH
41220: CALL_OW 272
41224: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41225: LD_ADDR_VAR 0 8
41229: PUSH
41230: LD_VAR 0 6
41234: PPUSH
41235: LD_VAR 0 4
41239: PPUSH
41240: LD_INT 3
41242: PPUSH
41243: CALL_OW 273
41247: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41248: LD_VAR 0 7
41252: PPUSH
41253: LD_VAR 0 8
41257: PPUSH
41258: CALL_OW 488
41262: NOT
41263: IFFALSE 41267
// continue ;
41265: GO 41199
// if HexInfo ( _x , _y ) = 0 then
41267: LD_VAR 0 7
41271: PPUSH
41272: LD_VAR 0 8
41276: PPUSH
41277: CALL_OW 428
41281: PUSH
41282: LD_INT 0
41284: EQUAL
41285: IFFALSE 41310
// begin ComMoveXY ( unit , _x , _y ) ;
41287: LD_VAR 0 1
41291: PPUSH
41292: LD_VAR 0 7
41296: PPUSH
41297: LD_VAR 0 8
41301: PPUSH
41302: CALL_OW 111
// exit ;
41306: POP
41307: POP
41308: GO 41314
// end ; end ;
41310: GO 41199
41312: POP
41313: POP
// end ;
41314: LD_VAR 0 3
41318: RET
// export function ScanBase ( side , base_area ) ; begin
41319: LD_INT 0
41321: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41322: LD_ADDR_VAR 0 3
41326: PUSH
41327: LD_VAR 0 2
41331: PPUSH
41332: LD_INT 81
41334: PUSH
41335: LD_VAR 0 1
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PPUSH
41344: CALL_OW 70
41348: ST_TO_ADDR
// end ;
41349: LD_VAR 0 3
41353: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41354: LD_INT 0
41356: PPUSH
41357: PPUSH
41358: PPUSH
41359: PPUSH
// result := false ;
41360: LD_ADDR_VAR 0 2
41364: PUSH
41365: LD_INT 0
41367: ST_TO_ADDR
// side := GetSide ( unit ) ;
41368: LD_ADDR_VAR 0 3
41372: PUSH
41373: LD_VAR 0 1
41377: PPUSH
41378: CALL_OW 255
41382: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41383: LD_ADDR_VAR 0 4
41387: PUSH
41388: LD_VAR 0 1
41392: PPUSH
41393: CALL_OW 248
41397: ST_TO_ADDR
// case nat of 1 :
41398: LD_VAR 0 4
41402: PUSH
41403: LD_INT 1
41405: DOUBLE
41406: EQUAL
41407: IFTRUE 41411
41409: GO 41422
41411: POP
// tech := tech_lassight ; 2 :
41412: LD_ADDR_VAR 0 5
41416: PUSH
41417: LD_INT 12
41419: ST_TO_ADDR
41420: GO 41461
41422: LD_INT 2
41424: DOUBLE
41425: EQUAL
41426: IFTRUE 41430
41428: GO 41441
41430: POP
// tech := tech_mortar ; 3 :
41431: LD_ADDR_VAR 0 5
41435: PUSH
41436: LD_INT 41
41438: ST_TO_ADDR
41439: GO 41461
41441: LD_INT 3
41443: DOUBLE
41444: EQUAL
41445: IFTRUE 41449
41447: GO 41460
41449: POP
// tech := tech_bazooka ; end ;
41450: LD_ADDR_VAR 0 5
41454: PUSH
41455: LD_INT 44
41457: ST_TO_ADDR
41458: GO 41461
41460: POP
// if Researched ( side , tech ) then
41461: LD_VAR 0 3
41465: PPUSH
41466: LD_VAR 0 5
41470: PPUSH
41471: CALL_OW 325
41475: IFFALSE 41502
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41477: LD_ADDR_VAR 0 2
41481: PUSH
41482: LD_INT 5
41484: PUSH
41485: LD_INT 8
41487: PUSH
41488: LD_INT 9
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: LIST
41495: PUSH
41496: LD_VAR 0 4
41500: ARRAY
41501: ST_TO_ADDR
// end ;
41502: LD_VAR 0 2
41506: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41507: LD_INT 0
41509: PPUSH
41510: PPUSH
41511: PPUSH
// if not mines then
41512: LD_VAR 0 2
41516: NOT
41517: IFFALSE 41521
// exit ;
41519: GO 41665
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41521: LD_ADDR_VAR 0 5
41525: PUSH
41526: LD_INT 81
41528: PUSH
41529: LD_VAR 0 1
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 3
41540: PUSH
41541: LD_INT 21
41543: PUSH
41544: LD_INT 3
41546: PUSH
41547: EMPTY
41548: LIST
41549: LIST
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PPUSH
41559: CALL_OW 69
41563: ST_TO_ADDR
// for i in mines do
41564: LD_ADDR_VAR 0 4
41568: PUSH
41569: LD_VAR 0 2
41573: PUSH
41574: FOR_IN
41575: IFFALSE 41663
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41577: LD_VAR 0 4
41581: PUSH
41582: LD_INT 1
41584: ARRAY
41585: PPUSH
41586: LD_VAR 0 4
41590: PUSH
41591: LD_INT 2
41593: ARRAY
41594: PPUSH
41595: CALL_OW 458
41599: NOT
41600: IFFALSE 41604
// continue ;
41602: GO 41574
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41604: LD_VAR 0 4
41608: PUSH
41609: LD_INT 1
41611: ARRAY
41612: PPUSH
41613: LD_VAR 0 4
41617: PUSH
41618: LD_INT 2
41620: ARRAY
41621: PPUSH
41622: CALL_OW 428
41626: PUSH
41627: LD_VAR 0 5
41631: IN
41632: IFFALSE 41661
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41634: LD_VAR 0 4
41638: PUSH
41639: LD_INT 1
41641: ARRAY
41642: PPUSH
41643: LD_VAR 0 4
41647: PUSH
41648: LD_INT 2
41650: ARRAY
41651: PPUSH
41652: LD_VAR 0 1
41656: PPUSH
41657: CALL_OW 456
// end ;
41661: GO 41574
41663: POP
41664: POP
// end ;
41665: LD_VAR 0 3
41669: RET
// export function Count ( array ) ; begin
41670: LD_INT 0
41672: PPUSH
// result := array + 0 ;
41673: LD_ADDR_VAR 0 2
41677: PUSH
41678: LD_VAR 0 1
41682: PUSH
41683: LD_INT 0
41685: PLUS
41686: ST_TO_ADDR
// end ;
41687: LD_VAR 0 2
41691: RET
// export function IsEmpty ( building ) ; begin
41692: LD_INT 0
41694: PPUSH
// if not building then
41695: LD_VAR 0 1
41699: NOT
41700: IFFALSE 41704
// exit ;
41702: GO 41747
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41704: LD_ADDR_VAR 0 2
41708: PUSH
41709: LD_VAR 0 1
41713: PUSH
41714: LD_INT 22
41716: PUSH
41717: LD_VAR 0 1
41721: PPUSH
41722: CALL_OW 255
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 58
41733: PUSH
41734: EMPTY
41735: LIST
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PPUSH
41741: CALL_OW 69
41745: IN
41746: ST_TO_ADDR
// end ;
41747: LD_VAR 0 2
41751: RET
// export function IsNotFull ( building ) ; var places ; begin
41752: LD_INT 0
41754: PPUSH
41755: PPUSH
// if not building then
41756: LD_VAR 0 1
41760: NOT
41761: IFFALSE 41765
// exit ;
41763: GO 41793
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41765: LD_ADDR_VAR 0 2
41769: PUSH
41770: LD_VAR 0 1
41774: PPUSH
41775: LD_INT 3
41777: PUSH
41778: LD_INT 62
41780: PUSH
41781: EMPTY
41782: LIST
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PPUSH
41788: CALL_OW 72
41792: ST_TO_ADDR
// end ;
41793: LD_VAR 0 2
41797: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41798: LD_INT 0
41800: PPUSH
41801: PPUSH
41802: PPUSH
41803: PPUSH
// tmp := [ ] ;
41804: LD_ADDR_VAR 0 3
41808: PUSH
41809: EMPTY
41810: ST_TO_ADDR
// list := [ ] ;
41811: LD_ADDR_VAR 0 5
41815: PUSH
41816: EMPTY
41817: ST_TO_ADDR
// for i = 16 to 25 do
41818: LD_ADDR_VAR 0 4
41822: PUSH
41823: DOUBLE
41824: LD_INT 16
41826: DEC
41827: ST_TO_ADDR
41828: LD_INT 25
41830: PUSH
41831: FOR_TO
41832: IFFALSE 41905
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41834: LD_ADDR_VAR 0 3
41838: PUSH
41839: LD_VAR 0 3
41843: PUSH
41844: LD_INT 22
41846: PUSH
41847: LD_VAR 0 1
41851: PPUSH
41852: CALL_OW 255
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 91
41863: PUSH
41864: LD_VAR 0 1
41868: PUSH
41869: LD_INT 6
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 30
41879: PUSH
41880: LD_VAR 0 4
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: LIST
41893: PUSH
41894: EMPTY
41895: LIST
41896: PPUSH
41897: CALL_OW 69
41901: ADD
41902: ST_TO_ADDR
41903: GO 41831
41905: POP
41906: POP
// for i = 1 to tmp do
41907: LD_ADDR_VAR 0 4
41911: PUSH
41912: DOUBLE
41913: LD_INT 1
41915: DEC
41916: ST_TO_ADDR
41917: LD_VAR 0 3
41921: PUSH
41922: FOR_TO
41923: IFFALSE 42011
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41925: LD_ADDR_VAR 0 5
41929: PUSH
41930: LD_VAR 0 5
41934: PUSH
41935: LD_VAR 0 3
41939: PUSH
41940: LD_VAR 0 4
41944: ARRAY
41945: PPUSH
41946: CALL_OW 266
41950: PUSH
41951: LD_VAR 0 3
41955: PUSH
41956: LD_VAR 0 4
41960: ARRAY
41961: PPUSH
41962: CALL_OW 250
41966: PUSH
41967: LD_VAR 0 3
41971: PUSH
41972: LD_VAR 0 4
41976: ARRAY
41977: PPUSH
41978: CALL_OW 251
41982: PUSH
41983: LD_VAR 0 3
41987: PUSH
41988: LD_VAR 0 4
41992: ARRAY
41993: PPUSH
41994: CALL_OW 254
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: PUSH
42005: EMPTY
42006: LIST
42007: ADD
42008: ST_TO_ADDR
42009: GO 41922
42011: POP
42012: POP
// result := list ;
42013: LD_ADDR_VAR 0 2
42017: PUSH
42018: LD_VAR 0 5
42022: ST_TO_ADDR
// end ;
42023: LD_VAR 0 2
42027: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42028: LD_INT 0
42030: PPUSH
42031: PPUSH
42032: PPUSH
42033: PPUSH
42034: PPUSH
42035: PPUSH
42036: PPUSH
// if not factory then
42037: LD_VAR 0 1
42041: NOT
42042: IFFALSE 42046
// exit ;
42044: GO 42639
// if control = control_apeman then
42046: LD_VAR 0 4
42050: PUSH
42051: LD_INT 5
42053: EQUAL
42054: IFFALSE 42163
// begin tmp := UnitsInside ( factory ) ;
42056: LD_ADDR_VAR 0 8
42060: PUSH
42061: LD_VAR 0 1
42065: PPUSH
42066: CALL_OW 313
42070: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42071: LD_VAR 0 8
42075: PPUSH
42076: LD_INT 25
42078: PUSH
42079: LD_INT 12
42081: PUSH
42082: EMPTY
42083: LIST
42084: LIST
42085: PPUSH
42086: CALL_OW 72
42090: NOT
42091: IFFALSE 42101
// control := control_manual ;
42093: LD_ADDR_VAR 0 4
42097: PUSH
42098: LD_INT 1
42100: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42101: LD_ADDR_VAR 0 8
42105: PUSH
42106: LD_VAR 0 1
42110: PPUSH
42111: CALL 41798 0 1
42115: ST_TO_ADDR
// if tmp then
42116: LD_VAR 0 8
42120: IFFALSE 42163
// begin for i in tmp do
42122: LD_ADDR_VAR 0 7
42126: PUSH
42127: LD_VAR 0 8
42131: PUSH
42132: FOR_IN
42133: IFFALSE 42161
// if i [ 1 ] = b_ext_radio then
42135: LD_VAR 0 7
42139: PUSH
42140: LD_INT 1
42142: ARRAY
42143: PUSH
42144: LD_INT 22
42146: EQUAL
42147: IFFALSE 42159
// begin control := control_remote ;
42149: LD_ADDR_VAR 0 4
42153: PUSH
42154: LD_INT 2
42156: ST_TO_ADDR
// break ;
42157: GO 42161
// end ;
42159: GO 42132
42161: POP
42162: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42163: LD_VAR 0 1
42167: PPUSH
42168: LD_VAR 0 2
42172: PPUSH
42173: LD_VAR 0 3
42177: PPUSH
42178: LD_VAR 0 4
42182: PPUSH
42183: LD_VAR 0 5
42187: PPUSH
42188: CALL_OW 448
42192: IFFALSE 42227
// begin result := [ chassis , engine , control , weapon ] ;
42194: LD_ADDR_VAR 0 6
42198: PUSH
42199: LD_VAR 0 2
42203: PUSH
42204: LD_VAR 0 3
42208: PUSH
42209: LD_VAR 0 4
42213: PUSH
42214: LD_VAR 0 5
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: ST_TO_ADDR
// exit ;
42225: GO 42639
// end ; _chassis := AvailableChassisList ( factory ) ;
42227: LD_ADDR_VAR 0 9
42231: PUSH
42232: LD_VAR 0 1
42236: PPUSH
42237: CALL_OW 475
42241: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42242: LD_ADDR_VAR 0 11
42246: PUSH
42247: LD_VAR 0 1
42251: PPUSH
42252: CALL_OW 476
42256: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42257: LD_ADDR_VAR 0 12
42261: PUSH
42262: LD_VAR 0 1
42266: PPUSH
42267: CALL_OW 477
42271: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42272: LD_ADDR_VAR 0 10
42276: PUSH
42277: LD_VAR 0 1
42281: PPUSH
42282: CALL_OW 478
42286: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42287: LD_VAR 0 9
42291: NOT
42292: PUSH
42293: LD_VAR 0 11
42297: NOT
42298: OR
42299: PUSH
42300: LD_VAR 0 12
42304: NOT
42305: OR
42306: PUSH
42307: LD_VAR 0 10
42311: NOT
42312: OR
42313: IFFALSE 42348
// begin result := [ chassis , engine , control , weapon ] ;
42315: LD_ADDR_VAR 0 6
42319: PUSH
42320: LD_VAR 0 2
42324: PUSH
42325: LD_VAR 0 3
42329: PUSH
42330: LD_VAR 0 4
42334: PUSH
42335: LD_VAR 0 5
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: LIST
42344: LIST
42345: ST_TO_ADDR
// exit ;
42346: GO 42639
// end ; if not chassis in _chassis then
42348: LD_VAR 0 2
42352: PUSH
42353: LD_VAR 0 9
42357: IN
42358: NOT
42359: IFFALSE 42385
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42361: LD_ADDR_VAR 0 2
42365: PUSH
42366: LD_VAR 0 9
42370: PUSH
42371: LD_INT 1
42373: PPUSH
42374: LD_VAR 0 9
42378: PPUSH
42379: CALL_OW 12
42383: ARRAY
42384: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42385: LD_VAR 0 2
42389: PPUSH
42390: LD_VAR 0 3
42394: PPUSH
42395: CALL 42644 0 2
42399: NOT
42400: IFFALSE 42459
// repeat engine := _engine [ 1 ] ;
42402: LD_ADDR_VAR 0 3
42406: PUSH
42407: LD_VAR 0 11
42411: PUSH
42412: LD_INT 1
42414: ARRAY
42415: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42416: LD_ADDR_VAR 0 11
42420: PUSH
42421: LD_VAR 0 11
42425: PPUSH
42426: LD_INT 1
42428: PPUSH
42429: CALL_OW 3
42433: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42434: LD_VAR 0 2
42438: PPUSH
42439: LD_VAR 0 3
42443: PPUSH
42444: CALL 42644 0 2
42448: PUSH
42449: LD_VAR 0 11
42453: PUSH
42454: EMPTY
42455: EQUAL
42456: OR
42457: IFFALSE 42402
// if not control in _control then
42459: LD_VAR 0 4
42463: PUSH
42464: LD_VAR 0 12
42468: IN
42469: NOT
42470: IFFALSE 42496
// control := _control [ rand ( 1 , _control ) ] ;
42472: LD_ADDR_VAR 0 4
42476: PUSH
42477: LD_VAR 0 12
42481: PUSH
42482: LD_INT 1
42484: PPUSH
42485: LD_VAR 0 12
42489: PPUSH
42490: CALL_OW 12
42494: ARRAY
42495: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42496: LD_VAR 0 2
42500: PPUSH
42501: LD_VAR 0 5
42505: PPUSH
42506: CALL 42864 0 2
42510: NOT
42511: IFFALSE 42570
// repeat weapon := _weapon [ 1 ] ;
42513: LD_ADDR_VAR 0 5
42517: PUSH
42518: LD_VAR 0 10
42522: PUSH
42523: LD_INT 1
42525: ARRAY
42526: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42527: LD_ADDR_VAR 0 10
42531: PUSH
42532: LD_VAR 0 10
42536: PPUSH
42537: LD_INT 1
42539: PPUSH
42540: CALL_OW 3
42544: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42545: LD_VAR 0 2
42549: PPUSH
42550: LD_VAR 0 5
42554: PPUSH
42555: CALL 42864 0 2
42559: PUSH
42560: LD_VAR 0 10
42564: PUSH
42565: EMPTY
42566: EQUAL
42567: OR
42568: IFFALSE 42513
// result := [ ] ;
42570: LD_ADDR_VAR 0 6
42574: PUSH
42575: EMPTY
42576: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42577: LD_VAR 0 1
42581: PPUSH
42582: LD_VAR 0 2
42586: PPUSH
42587: LD_VAR 0 3
42591: PPUSH
42592: LD_VAR 0 4
42596: PPUSH
42597: LD_VAR 0 5
42601: PPUSH
42602: CALL_OW 448
42606: IFFALSE 42639
// result := [ chassis , engine , control , weapon ] ;
42608: LD_ADDR_VAR 0 6
42612: PUSH
42613: LD_VAR 0 2
42617: PUSH
42618: LD_VAR 0 3
42622: PUSH
42623: LD_VAR 0 4
42627: PUSH
42628: LD_VAR 0 5
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: ST_TO_ADDR
// end ;
42639: LD_VAR 0 6
42643: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42644: LD_INT 0
42646: PPUSH
// if not chassis or not engine then
42647: LD_VAR 0 1
42651: NOT
42652: PUSH
42653: LD_VAR 0 2
42657: NOT
42658: OR
42659: IFFALSE 42663
// exit ;
42661: GO 42859
// case engine of engine_solar :
42663: LD_VAR 0 2
42667: PUSH
42668: LD_INT 2
42670: DOUBLE
42671: EQUAL
42672: IFTRUE 42676
42674: GO 42714
42676: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42677: LD_ADDR_VAR 0 3
42681: PUSH
42682: LD_INT 11
42684: PUSH
42685: LD_INT 12
42687: PUSH
42688: LD_INT 13
42690: PUSH
42691: LD_INT 14
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: LD_INT 3
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: ST_TO_ADDR
42712: GO 42843
42714: LD_INT 1
42716: DOUBLE
42717: EQUAL
42718: IFTRUE 42722
42720: GO 42784
42722: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42723: LD_ADDR_VAR 0 3
42727: PUSH
42728: LD_INT 11
42730: PUSH
42731: LD_INT 12
42733: PUSH
42734: LD_INT 13
42736: PUSH
42737: LD_INT 14
42739: PUSH
42740: LD_INT 1
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: LD_INT 3
42748: PUSH
42749: LD_INT 4
42751: PUSH
42752: LD_INT 5
42754: PUSH
42755: LD_INT 21
42757: PUSH
42758: LD_INT 23
42760: PUSH
42761: LD_INT 22
42763: PUSH
42764: LD_INT 24
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: ST_TO_ADDR
42782: GO 42843
42784: LD_INT 3
42786: DOUBLE
42787: EQUAL
42788: IFTRUE 42792
42790: GO 42842
42792: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42793: LD_ADDR_VAR 0 3
42797: PUSH
42798: LD_INT 13
42800: PUSH
42801: LD_INT 14
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: LD_INT 3
42809: PUSH
42810: LD_INT 4
42812: PUSH
42813: LD_INT 5
42815: PUSH
42816: LD_INT 21
42818: PUSH
42819: LD_INT 22
42821: PUSH
42822: LD_INT 23
42824: PUSH
42825: LD_INT 24
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: ST_TO_ADDR
42840: GO 42843
42842: POP
// result := ( chassis in result ) ;
42843: LD_ADDR_VAR 0 3
42847: PUSH
42848: LD_VAR 0 1
42852: PUSH
42853: LD_VAR 0 3
42857: IN
42858: ST_TO_ADDR
// end ;
42859: LD_VAR 0 3
42863: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42864: LD_INT 0
42866: PPUSH
// if not chassis or not weapon then
42867: LD_VAR 0 1
42871: NOT
42872: PUSH
42873: LD_VAR 0 2
42877: NOT
42878: OR
42879: IFFALSE 42883
// exit ;
42881: GO 43943
// case weapon of us_machine_gun :
42883: LD_VAR 0 2
42887: PUSH
42888: LD_INT 2
42890: DOUBLE
42891: EQUAL
42892: IFTRUE 42896
42894: GO 42926
42896: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42897: LD_ADDR_VAR 0 3
42901: PUSH
42902: LD_INT 1
42904: PUSH
42905: LD_INT 2
42907: PUSH
42908: LD_INT 3
42910: PUSH
42911: LD_INT 4
42913: PUSH
42914: LD_INT 5
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: ST_TO_ADDR
42924: GO 43927
42926: LD_INT 3
42928: DOUBLE
42929: EQUAL
42930: IFTRUE 42934
42932: GO 42964
42934: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42935: LD_ADDR_VAR 0 3
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 2
42945: PUSH
42946: LD_INT 3
42948: PUSH
42949: LD_INT 4
42951: PUSH
42952: LD_INT 5
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: ST_TO_ADDR
42962: GO 43927
42964: LD_INT 11
42966: DOUBLE
42967: EQUAL
42968: IFTRUE 42972
42970: GO 43002
42972: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42973: LD_ADDR_VAR 0 3
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: LD_INT 2
42983: PUSH
42984: LD_INT 3
42986: PUSH
42987: LD_INT 4
42989: PUSH
42990: LD_INT 5
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: ST_TO_ADDR
43000: GO 43927
43002: LD_INT 4
43004: DOUBLE
43005: EQUAL
43006: IFTRUE 43010
43008: GO 43036
43010: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43011: LD_ADDR_VAR 0 3
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: LD_INT 3
43021: PUSH
43022: LD_INT 4
43024: PUSH
43025: LD_INT 5
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: ST_TO_ADDR
43034: GO 43927
43036: LD_INT 5
43038: DOUBLE
43039: EQUAL
43040: IFTRUE 43044
43042: GO 43070
43044: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43045: LD_ADDR_VAR 0 3
43049: PUSH
43050: LD_INT 2
43052: PUSH
43053: LD_INT 3
43055: PUSH
43056: LD_INT 4
43058: PUSH
43059: LD_INT 5
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: ST_TO_ADDR
43068: GO 43927
43070: LD_INT 9
43072: DOUBLE
43073: EQUAL
43074: IFTRUE 43078
43076: GO 43104
43078: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43079: LD_ADDR_VAR 0 3
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: LD_INT 3
43089: PUSH
43090: LD_INT 4
43092: PUSH
43093: LD_INT 5
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: ST_TO_ADDR
43102: GO 43927
43104: LD_INT 7
43106: DOUBLE
43107: EQUAL
43108: IFTRUE 43112
43110: GO 43138
43112: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43113: LD_ADDR_VAR 0 3
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: LD_INT 3
43123: PUSH
43124: LD_INT 4
43126: PUSH
43127: LD_INT 5
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: ST_TO_ADDR
43136: GO 43927
43138: LD_INT 12
43140: DOUBLE
43141: EQUAL
43142: IFTRUE 43146
43144: GO 43172
43146: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43147: LD_ADDR_VAR 0 3
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: LD_INT 3
43157: PUSH
43158: LD_INT 4
43160: PUSH
43161: LD_INT 5
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: ST_TO_ADDR
43170: GO 43927
43172: LD_INT 13
43174: DOUBLE
43175: EQUAL
43176: IFTRUE 43180
43178: GO 43206
43180: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43181: LD_ADDR_VAR 0 3
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 3
43191: PUSH
43192: LD_INT 4
43194: PUSH
43195: LD_INT 5
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: ST_TO_ADDR
43204: GO 43927
43206: LD_INT 14
43208: DOUBLE
43209: EQUAL
43210: IFTRUE 43214
43212: GO 43232
43214: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43215: LD_ADDR_VAR 0 3
43219: PUSH
43220: LD_INT 4
43222: PUSH
43223: LD_INT 5
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: ST_TO_ADDR
43230: GO 43927
43232: LD_INT 6
43234: DOUBLE
43235: EQUAL
43236: IFTRUE 43240
43238: GO 43258
43240: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43241: LD_ADDR_VAR 0 3
43245: PUSH
43246: LD_INT 4
43248: PUSH
43249: LD_INT 5
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: ST_TO_ADDR
43256: GO 43927
43258: LD_INT 10
43260: DOUBLE
43261: EQUAL
43262: IFTRUE 43266
43264: GO 43284
43266: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43267: LD_ADDR_VAR 0 3
43271: PUSH
43272: LD_INT 4
43274: PUSH
43275: LD_INT 5
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: ST_TO_ADDR
43282: GO 43927
43284: LD_INT 22
43286: DOUBLE
43287: EQUAL
43288: IFTRUE 43292
43290: GO 43318
43292: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43293: LD_ADDR_VAR 0 3
43297: PUSH
43298: LD_INT 11
43300: PUSH
43301: LD_INT 12
43303: PUSH
43304: LD_INT 13
43306: PUSH
43307: LD_INT 14
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: ST_TO_ADDR
43316: GO 43927
43318: LD_INT 23
43320: DOUBLE
43321: EQUAL
43322: IFTRUE 43326
43324: GO 43352
43326: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43327: LD_ADDR_VAR 0 3
43331: PUSH
43332: LD_INT 11
43334: PUSH
43335: LD_INT 12
43337: PUSH
43338: LD_INT 13
43340: PUSH
43341: LD_INT 14
43343: PUSH
43344: EMPTY
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: ST_TO_ADDR
43350: GO 43927
43352: LD_INT 24
43354: DOUBLE
43355: EQUAL
43356: IFTRUE 43360
43358: GO 43386
43360: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43361: LD_ADDR_VAR 0 3
43365: PUSH
43366: LD_INT 11
43368: PUSH
43369: LD_INT 12
43371: PUSH
43372: LD_INT 13
43374: PUSH
43375: LD_INT 14
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: ST_TO_ADDR
43384: GO 43927
43386: LD_INT 30
43388: DOUBLE
43389: EQUAL
43390: IFTRUE 43394
43392: GO 43420
43394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43395: LD_ADDR_VAR 0 3
43399: PUSH
43400: LD_INT 11
43402: PUSH
43403: LD_INT 12
43405: PUSH
43406: LD_INT 13
43408: PUSH
43409: LD_INT 14
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: LIST
43417: ST_TO_ADDR
43418: GO 43927
43420: LD_INT 25
43422: DOUBLE
43423: EQUAL
43424: IFTRUE 43428
43426: GO 43446
43428: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43429: LD_ADDR_VAR 0 3
43433: PUSH
43434: LD_INT 13
43436: PUSH
43437: LD_INT 14
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: ST_TO_ADDR
43444: GO 43927
43446: LD_INT 27
43448: DOUBLE
43449: EQUAL
43450: IFTRUE 43454
43452: GO 43472
43454: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43455: LD_ADDR_VAR 0 3
43459: PUSH
43460: LD_INT 13
43462: PUSH
43463: LD_INT 14
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: ST_TO_ADDR
43470: GO 43927
43472: LD_INT 92
43474: DOUBLE
43475: EQUAL
43476: IFTRUE 43480
43478: GO 43506
43480: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43481: LD_ADDR_VAR 0 3
43485: PUSH
43486: LD_INT 11
43488: PUSH
43489: LD_INT 12
43491: PUSH
43492: LD_INT 13
43494: PUSH
43495: LD_INT 14
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: ST_TO_ADDR
43504: GO 43927
43506: LD_INT 28
43508: DOUBLE
43509: EQUAL
43510: IFTRUE 43514
43512: GO 43532
43514: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43515: LD_ADDR_VAR 0 3
43519: PUSH
43520: LD_INT 13
43522: PUSH
43523: LD_INT 14
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: ST_TO_ADDR
43530: GO 43927
43532: LD_INT 29
43534: DOUBLE
43535: EQUAL
43536: IFTRUE 43540
43538: GO 43558
43540: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43541: LD_ADDR_VAR 0 3
43545: PUSH
43546: LD_INT 13
43548: PUSH
43549: LD_INT 14
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: ST_TO_ADDR
43556: GO 43927
43558: LD_INT 31
43560: DOUBLE
43561: EQUAL
43562: IFTRUE 43566
43564: GO 43584
43566: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43567: LD_ADDR_VAR 0 3
43571: PUSH
43572: LD_INT 13
43574: PUSH
43575: LD_INT 14
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: ST_TO_ADDR
43582: GO 43927
43584: LD_INT 26
43586: DOUBLE
43587: EQUAL
43588: IFTRUE 43592
43590: GO 43610
43592: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43593: LD_ADDR_VAR 0 3
43597: PUSH
43598: LD_INT 13
43600: PUSH
43601: LD_INT 14
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: ST_TO_ADDR
43608: GO 43927
43610: LD_INT 42
43612: DOUBLE
43613: EQUAL
43614: IFTRUE 43618
43616: GO 43644
43618: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43619: LD_ADDR_VAR 0 3
43623: PUSH
43624: LD_INT 21
43626: PUSH
43627: LD_INT 22
43629: PUSH
43630: LD_INT 23
43632: PUSH
43633: LD_INT 24
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: ST_TO_ADDR
43642: GO 43927
43644: LD_INT 43
43646: DOUBLE
43647: EQUAL
43648: IFTRUE 43652
43650: GO 43678
43652: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43653: LD_ADDR_VAR 0 3
43657: PUSH
43658: LD_INT 21
43660: PUSH
43661: LD_INT 22
43663: PUSH
43664: LD_INT 23
43666: PUSH
43667: LD_INT 24
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: ST_TO_ADDR
43676: GO 43927
43678: LD_INT 44
43680: DOUBLE
43681: EQUAL
43682: IFTRUE 43686
43684: GO 43712
43686: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43687: LD_ADDR_VAR 0 3
43691: PUSH
43692: LD_INT 21
43694: PUSH
43695: LD_INT 22
43697: PUSH
43698: LD_INT 23
43700: PUSH
43701: LD_INT 24
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: LIST
43708: LIST
43709: ST_TO_ADDR
43710: GO 43927
43712: LD_INT 45
43714: DOUBLE
43715: EQUAL
43716: IFTRUE 43720
43718: GO 43746
43720: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43721: LD_ADDR_VAR 0 3
43725: PUSH
43726: LD_INT 21
43728: PUSH
43729: LD_INT 22
43731: PUSH
43732: LD_INT 23
43734: PUSH
43735: LD_INT 24
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: ST_TO_ADDR
43744: GO 43927
43746: LD_INT 49
43748: DOUBLE
43749: EQUAL
43750: IFTRUE 43754
43752: GO 43780
43754: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43755: LD_ADDR_VAR 0 3
43759: PUSH
43760: LD_INT 21
43762: PUSH
43763: LD_INT 22
43765: PUSH
43766: LD_INT 23
43768: PUSH
43769: LD_INT 24
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: ST_TO_ADDR
43778: GO 43927
43780: LD_INT 51
43782: DOUBLE
43783: EQUAL
43784: IFTRUE 43788
43786: GO 43814
43788: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43789: LD_ADDR_VAR 0 3
43793: PUSH
43794: LD_INT 21
43796: PUSH
43797: LD_INT 22
43799: PUSH
43800: LD_INT 23
43802: PUSH
43803: LD_INT 24
43805: PUSH
43806: EMPTY
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: ST_TO_ADDR
43812: GO 43927
43814: LD_INT 52
43816: DOUBLE
43817: EQUAL
43818: IFTRUE 43822
43820: GO 43848
43822: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43823: LD_ADDR_VAR 0 3
43827: PUSH
43828: LD_INT 21
43830: PUSH
43831: LD_INT 22
43833: PUSH
43834: LD_INT 23
43836: PUSH
43837: LD_INT 24
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: ST_TO_ADDR
43846: GO 43927
43848: LD_INT 53
43850: DOUBLE
43851: EQUAL
43852: IFTRUE 43856
43854: GO 43874
43856: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43857: LD_ADDR_VAR 0 3
43861: PUSH
43862: LD_INT 23
43864: PUSH
43865: LD_INT 24
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: ST_TO_ADDR
43872: GO 43927
43874: LD_INT 46
43876: DOUBLE
43877: EQUAL
43878: IFTRUE 43882
43880: GO 43900
43882: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43883: LD_ADDR_VAR 0 3
43887: PUSH
43888: LD_INT 23
43890: PUSH
43891: LD_INT 24
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: ST_TO_ADDR
43898: GO 43927
43900: LD_INT 47
43902: DOUBLE
43903: EQUAL
43904: IFTRUE 43908
43906: GO 43926
43908: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43909: LD_ADDR_VAR 0 3
43913: PUSH
43914: LD_INT 23
43916: PUSH
43917: LD_INT 24
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: ST_TO_ADDR
43924: GO 43927
43926: POP
// result := ( chassis in result ) ;
43927: LD_ADDR_VAR 0 3
43931: PUSH
43932: LD_VAR 0 1
43936: PUSH
43937: LD_VAR 0 3
43941: IN
43942: ST_TO_ADDR
// end ;
43943: LD_VAR 0 3
43947: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43948: LD_INT 0
43950: PPUSH
43951: PPUSH
43952: PPUSH
43953: PPUSH
43954: PPUSH
43955: PPUSH
43956: PPUSH
// result := array ;
43957: LD_ADDR_VAR 0 5
43961: PUSH
43962: LD_VAR 0 1
43966: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43967: LD_VAR 0 1
43971: NOT
43972: PUSH
43973: LD_VAR 0 2
43977: NOT
43978: OR
43979: PUSH
43980: LD_VAR 0 3
43984: NOT
43985: OR
43986: PUSH
43987: LD_VAR 0 2
43991: PUSH
43992: LD_VAR 0 1
43996: GREATER
43997: OR
43998: PUSH
43999: LD_VAR 0 3
44003: PUSH
44004: LD_VAR 0 1
44008: GREATER
44009: OR
44010: IFFALSE 44014
// exit ;
44012: GO 44310
// if direction then
44014: LD_VAR 0 4
44018: IFFALSE 44082
// begin d := 1 ;
44020: LD_ADDR_VAR 0 9
44024: PUSH
44025: LD_INT 1
44027: ST_TO_ADDR
// if i_from > i_to then
44028: LD_VAR 0 2
44032: PUSH
44033: LD_VAR 0 3
44037: GREATER
44038: IFFALSE 44064
// length := ( array - i_from ) + i_to else
44040: LD_ADDR_VAR 0 11
44044: PUSH
44045: LD_VAR 0 1
44049: PUSH
44050: LD_VAR 0 2
44054: MINUS
44055: PUSH
44056: LD_VAR 0 3
44060: PLUS
44061: ST_TO_ADDR
44062: GO 44080
// length := i_to - i_from ;
44064: LD_ADDR_VAR 0 11
44068: PUSH
44069: LD_VAR 0 3
44073: PUSH
44074: LD_VAR 0 2
44078: MINUS
44079: ST_TO_ADDR
// end else
44080: GO 44143
// begin d := - 1 ;
44082: LD_ADDR_VAR 0 9
44086: PUSH
44087: LD_INT 1
44089: NEG
44090: ST_TO_ADDR
// if i_from > i_to then
44091: LD_VAR 0 2
44095: PUSH
44096: LD_VAR 0 3
44100: GREATER
44101: IFFALSE 44121
// length := i_from - i_to else
44103: LD_ADDR_VAR 0 11
44107: PUSH
44108: LD_VAR 0 2
44112: PUSH
44113: LD_VAR 0 3
44117: MINUS
44118: ST_TO_ADDR
44119: GO 44143
// length := ( array - i_to ) + i_from ;
44121: LD_ADDR_VAR 0 11
44125: PUSH
44126: LD_VAR 0 1
44130: PUSH
44131: LD_VAR 0 3
44135: MINUS
44136: PUSH
44137: LD_VAR 0 2
44141: PLUS
44142: ST_TO_ADDR
// end ; if not length then
44143: LD_VAR 0 11
44147: NOT
44148: IFFALSE 44152
// exit ;
44150: GO 44310
// tmp := array ;
44152: LD_ADDR_VAR 0 10
44156: PUSH
44157: LD_VAR 0 1
44161: ST_TO_ADDR
// for i = 1 to length do
44162: LD_ADDR_VAR 0 6
44166: PUSH
44167: DOUBLE
44168: LD_INT 1
44170: DEC
44171: ST_TO_ADDR
44172: LD_VAR 0 11
44176: PUSH
44177: FOR_TO
44178: IFFALSE 44298
// begin for j = 1 to array do
44180: LD_ADDR_VAR 0 7
44184: PUSH
44185: DOUBLE
44186: LD_INT 1
44188: DEC
44189: ST_TO_ADDR
44190: LD_VAR 0 1
44194: PUSH
44195: FOR_TO
44196: IFFALSE 44284
// begin k := j + d ;
44198: LD_ADDR_VAR 0 8
44202: PUSH
44203: LD_VAR 0 7
44207: PUSH
44208: LD_VAR 0 9
44212: PLUS
44213: ST_TO_ADDR
// if k > array then
44214: LD_VAR 0 8
44218: PUSH
44219: LD_VAR 0 1
44223: GREATER
44224: IFFALSE 44234
// k := 1 ;
44226: LD_ADDR_VAR 0 8
44230: PUSH
44231: LD_INT 1
44233: ST_TO_ADDR
// if not k then
44234: LD_VAR 0 8
44238: NOT
44239: IFFALSE 44251
// k := array ;
44241: LD_ADDR_VAR 0 8
44245: PUSH
44246: LD_VAR 0 1
44250: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44251: LD_ADDR_VAR 0 10
44255: PUSH
44256: LD_VAR 0 10
44260: PPUSH
44261: LD_VAR 0 8
44265: PPUSH
44266: LD_VAR 0 1
44270: PUSH
44271: LD_VAR 0 7
44275: ARRAY
44276: PPUSH
44277: CALL_OW 1
44281: ST_TO_ADDR
// end ;
44282: GO 44195
44284: POP
44285: POP
// array := tmp ;
44286: LD_ADDR_VAR 0 1
44290: PUSH
44291: LD_VAR 0 10
44295: ST_TO_ADDR
// end ;
44296: GO 44177
44298: POP
44299: POP
// result := array ;
44300: LD_ADDR_VAR 0 5
44304: PUSH
44305: LD_VAR 0 1
44309: ST_TO_ADDR
// end ;
44310: LD_VAR 0 5
44314: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44315: LD_INT 0
44317: PPUSH
44318: PPUSH
// result := 0 ;
44319: LD_ADDR_VAR 0 3
44323: PUSH
44324: LD_INT 0
44326: ST_TO_ADDR
// if not array or not value in array then
44327: LD_VAR 0 1
44331: NOT
44332: PUSH
44333: LD_VAR 0 2
44337: PUSH
44338: LD_VAR 0 1
44342: IN
44343: NOT
44344: OR
44345: IFFALSE 44349
// exit ;
44347: GO 44403
// for i = 1 to array do
44349: LD_ADDR_VAR 0 4
44353: PUSH
44354: DOUBLE
44355: LD_INT 1
44357: DEC
44358: ST_TO_ADDR
44359: LD_VAR 0 1
44363: PUSH
44364: FOR_TO
44365: IFFALSE 44401
// if value = array [ i ] then
44367: LD_VAR 0 2
44371: PUSH
44372: LD_VAR 0 1
44376: PUSH
44377: LD_VAR 0 4
44381: ARRAY
44382: EQUAL
44383: IFFALSE 44399
// begin result := i ;
44385: LD_ADDR_VAR 0 3
44389: PUSH
44390: LD_VAR 0 4
44394: ST_TO_ADDR
// exit ;
44395: POP
44396: POP
44397: GO 44403
// end ;
44399: GO 44364
44401: POP
44402: POP
// end ;
44403: LD_VAR 0 3
44407: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44408: LD_INT 0
44410: PPUSH
// vc_chassis := chassis ;
44411: LD_ADDR_OWVAR 37
44415: PUSH
44416: LD_VAR 0 1
44420: ST_TO_ADDR
// vc_engine := engine ;
44421: LD_ADDR_OWVAR 39
44425: PUSH
44426: LD_VAR 0 2
44430: ST_TO_ADDR
// vc_control := control ;
44431: LD_ADDR_OWVAR 38
44435: PUSH
44436: LD_VAR 0 3
44440: ST_TO_ADDR
// vc_weapon := weapon ;
44441: LD_ADDR_OWVAR 40
44445: PUSH
44446: LD_VAR 0 4
44450: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44451: LD_ADDR_OWVAR 41
44455: PUSH
44456: LD_VAR 0 5
44460: ST_TO_ADDR
// end ;
44461: LD_VAR 0 6
44465: RET
// export function WantPlant ( unit ) ; var task ; begin
44466: LD_INT 0
44468: PPUSH
44469: PPUSH
// result := false ;
44470: LD_ADDR_VAR 0 2
44474: PUSH
44475: LD_INT 0
44477: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44478: LD_ADDR_VAR 0 3
44482: PUSH
44483: LD_VAR 0 1
44487: PPUSH
44488: CALL_OW 437
44492: ST_TO_ADDR
// if task then
44493: LD_VAR 0 3
44497: IFFALSE 44525
// if task [ 1 ] [ 1 ] = p then
44499: LD_VAR 0 3
44503: PUSH
44504: LD_INT 1
44506: ARRAY
44507: PUSH
44508: LD_INT 1
44510: ARRAY
44511: PUSH
44512: LD_STRING p
44514: EQUAL
44515: IFFALSE 44525
// result := true ;
44517: LD_ADDR_VAR 0 2
44521: PUSH
44522: LD_INT 1
44524: ST_TO_ADDR
// end ;
44525: LD_VAR 0 2
44529: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44530: LD_INT 0
44532: PPUSH
44533: PPUSH
44534: PPUSH
44535: PPUSH
// if pos < 1 then
44536: LD_VAR 0 2
44540: PUSH
44541: LD_INT 1
44543: LESS
44544: IFFALSE 44548
// exit ;
44546: GO 44851
// if pos = 1 then
44548: LD_VAR 0 2
44552: PUSH
44553: LD_INT 1
44555: EQUAL
44556: IFFALSE 44589
// result := Replace ( arr , pos [ 1 ] , value ) else
44558: LD_ADDR_VAR 0 4
44562: PUSH
44563: LD_VAR 0 1
44567: PPUSH
44568: LD_VAR 0 2
44572: PUSH
44573: LD_INT 1
44575: ARRAY
44576: PPUSH
44577: LD_VAR 0 3
44581: PPUSH
44582: CALL_OW 1
44586: ST_TO_ADDR
44587: GO 44851
// begin tmp := arr ;
44589: LD_ADDR_VAR 0 6
44593: PUSH
44594: LD_VAR 0 1
44598: ST_TO_ADDR
// s_arr := [ tmp ] ;
44599: LD_ADDR_VAR 0 7
44603: PUSH
44604: LD_VAR 0 6
44608: PUSH
44609: EMPTY
44610: LIST
44611: ST_TO_ADDR
// for i = 1 to pos - 1 do
44612: LD_ADDR_VAR 0 5
44616: PUSH
44617: DOUBLE
44618: LD_INT 1
44620: DEC
44621: ST_TO_ADDR
44622: LD_VAR 0 2
44626: PUSH
44627: LD_INT 1
44629: MINUS
44630: PUSH
44631: FOR_TO
44632: IFFALSE 44677
// begin tmp := tmp [ pos [ i ] ] ;
44634: LD_ADDR_VAR 0 6
44638: PUSH
44639: LD_VAR 0 6
44643: PUSH
44644: LD_VAR 0 2
44648: PUSH
44649: LD_VAR 0 5
44653: ARRAY
44654: ARRAY
44655: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44656: LD_ADDR_VAR 0 7
44660: PUSH
44661: LD_VAR 0 7
44665: PUSH
44666: LD_VAR 0 6
44670: PUSH
44671: EMPTY
44672: LIST
44673: ADD
44674: ST_TO_ADDR
// end ;
44675: GO 44631
44677: POP
44678: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44679: LD_ADDR_VAR 0 6
44683: PUSH
44684: LD_VAR 0 6
44688: PPUSH
44689: LD_VAR 0 2
44693: PUSH
44694: LD_VAR 0 2
44698: ARRAY
44699: PPUSH
44700: LD_VAR 0 3
44704: PPUSH
44705: CALL_OW 1
44709: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44710: LD_ADDR_VAR 0 7
44714: PUSH
44715: LD_VAR 0 7
44719: PPUSH
44720: LD_VAR 0 7
44724: PPUSH
44725: LD_VAR 0 6
44729: PPUSH
44730: CALL_OW 1
44734: ST_TO_ADDR
// for i = s_arr downto 2 do
44735: LD_ADDR_VAR 0 5
44739: PUSH
44740: DOUBLE
44741: LD_VAR 0 7
44745: INC
44746: ST_TO_ADDR
44747: LD_INT 2
44749: PUSH
44750: FOR_DOWNTO
44751: IFFALSE 44835
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44753: LD_ADDR_VAR 0 6
44757: PUSH
44758: LD_VAR 0 7
44762: PUSH
44763: LD_VAR 0 5
44767: PUSH
44768: LD_INT 1
44770: MINUS
44771: ARRAY
44772: PPUSH
44773: LD_VAR 0 2
44777: PUSH
44778: LD_VAR 0 5
44782: PUSH
44783: LD_INT 1
44785: MINUS
44786: ARRAY
44787: PPUSH
44788: LD_VAR 0 7
44792: PUSH
44793: LD_VAR 0 5
44797: ARRAY
44798: PPUSH
44799: CALL_OW 1
44803: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44804: LD_ADDR_VAR 0 7
44808: PUSH
44809: LD_VAR 0 7
44813: PPUSH
44814: LD_VAR 0 5
44818: PUSH
44819: LD_INT 1
44821: MINUS
44822: PPUSH
44823: LD_VAR 0 6
44827: PPUSH
44828: CALL_OW 1
44832: ST_TO_ADDR
// end ;
44833: GO 44750
44835: POP
44836: POP
// result := s_arr [ 1 ] ;
44837: LD_ADDR_VAR 0 4
44841: PUSH
44842: LD_VAR 0 7
44846: PUSH
44847: LD_INT 1
44849: ARRAY
44850: ST_TO_ADDR
// end ; end ;
44851: LD_VAR 0 4
44855: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44856: LD_INT 0
44858: PPUSH
44859: PPUSH
// if not list then
44860: LD_VAR 0 1
44864: NOT
44865: IFFALSE 44869
// exit ;
44867: GO 44960
// i := list [ pos1 ] ;
44869: LD_ADDR_VAR 0 5
44873: PUSH
44874: LD_VAR 0 1
44878: PUSH
44879: LD_VAR 0 2
44883: ARRAY
44884: ST_TO_ADDR
// if not i then
44885: LD_VAR 0 5
44889: NOT
44890: IFFALSE 44894
// exit ;
44892: GO 44960
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44894: LD_ADDR_VAR 0 1
44898: PUSH
44899: LD_VAR 0 1
44903: PPUSH
44904: LD_VAR 0 2
44908: PPUSH
44909: LD_VAR 0 1
44913: PUSH
44914: LD_VAR 0 3
44918: ARRAY
44919: PPUSH
44920: CALL_OW 1
44924: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44925: LD_ADDR_VAR 0 1
44929: PUSH
44930: LD_VAR 0 1
44934: PPUSH
44935: LD_VAR 0 3
44939: PPUSH
44940: LD_VAR 0 5
44944: PPUSH
44945: CALL_OW 1
44949: ST_TO_ADDR
// result := list ;
44950: LD_ADDR_VAR 0 4
44954: PUSH
44955: LD_VAR 0 1
44959: ST_TO_ADDR
// end ;
44960: LD_VAR 0 4
44964: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44965: LD_INT 0
44967: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44968: LD_ADDR_VAR 0 5
44972: PUSH
44973: LD_VAR 0 1
44977: PPUSH
44978: CALL_OW 250
44982: PPUSH
44983: LD_VAR 0 1
44987: PPUSH
44988: CALL_OW 251
44992: PPUSH
44993: LD_VAR 0 2
44997: PPUSH
44998: LD_VAR 0 3
45002: PPUSH
45003: LD_VAR 0 4
45007: PPUSH
45008: CALL 45386 0 5
45012: ST_TO_ADDR
// end ;
45013: LD_VAR 0 5
45017: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45018: LD_INT 0
45020: PPUSH
45021: PPUSH
45022: PPUSH
45023: PPUSH
// if not list or not unit then
45024: LD_VAR 0 2
45028: NOT
45029: PUSH
45030: LD_VAR 0 1
45034: NOT
45035: OR
45036: IFFALSE 45040
// exit ;
45038: GO 45381
// result := [ ] ;
45040: LD_ADDR_VAR 0 5
45044: PUSH
45045: EMPTY
45046: ST_TO_ADDR
// for i in list do
45047: LD_ADDR_VAR 0 6
45051: PUSH
45052: LD_VAR 0 2
45056: PUSH
45057: FOR_IN
45058: IFFALSE 45276
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45060: LD_ADDR_VAR 0 8
45064: PUSH
45065: LD_VAR 0 1
45069: PPUSH
45070: LD_VAR 0 6
45074: PUSH
45075: LD_INT 1
45077: ARRAY
45078: PPUSH
45079: LD_VAR 0 6
45083: PUSH
45084: LD_INT 2
45086: ARRAY
45087: PPUSH
45088: CALL_OW 297
45092: ST_TO_ADDR
// if not Count ( result ) then
45093: LD_VAR 0 5
45097: PPUSH
45098: CALL 41670 0 1
45102: NOT
45103: IFFALSE 45136
// begin result := Join ( result , [ i , tmp ] ) ;
45105: LD_ADDR_VAR 0 5
45109: PUSH
45110: LD_VAR 0 5
45114: PPUSH
45115: LD_VAR 0 6
45119: PUSH
45120: LD_VAR 0 8
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PPUSH
45129: CALL 77270 0 2
45133: ST_TO_ADDR
// continue ;
45134: GO 45057
// end ; if result [ result ] [ 2 ] <= tmp then
45136: LD_VAR 0 5
45140: PUSH
45141: LD_VAR 0 5
45145: ARRAY
45146: PUSH
45147: LD_INT 2
45149: ARRAY
45150: PUSH
45151: LD_VAR 0 8
45155: LESSEQUAL
45156: IFFALSE 45189
// result := Join ( result , [ i , tmp ] ) else
45158: LD_ADDR_VAR 0 5
45162: PUSH
45163: LD_VAR 0 5
45167: PPUSH
45168: LD_VAR 0 6
45172: PUSH
45173: LD_VAR 0 8
45177: PUSH
45178: EMPTY
45179: LIST
45180: LIST
45181: PPUSH
45182: CALL 77270 0 2
45186: ST_TO_ADDR
45187: GO 45274
// begin for j := 1 to Count ( result ) do
45189: LD_ADDR_VAR 0 7
45193: PUSH
45194: DOUBLE
45195: LD_INT 1
45197: DEC
45198: ST_TO_ADDR
45199: LD_VAR 0 5
45203: PPUSH
45204: CALL 41670 0 1
45208: PUSH
45209: FOR_TO
45210: IFFALSE 45272
// begin if tmp < result [ j ] [ 2 ] then
45212: LD_VAR 0 8
45216: PUSH
45217: LD_VAR 0 5
45221: PUSH
45222: LD_VAR 0 7
45226: ARRAY
45227: PUSH
45228: LD_INT 2
45230: ARRAY
45231: LESS
45232: IFFALSE 45270
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45234: LD_ADDR_VAR 0 5
45238: PUSH
45239: LD_VAR 0 5
45243: PPUSH
45244: LD_VAR 0 7
45248: PPUSH
45249: LD_VAR 0 6
45253: PUSH
45254: LD_VAR 0 8
45258: PUSH
45259: EMPTY
45260: LIST
45261: LIST
45262: PPUSH
45263: CALL_OW 2
45267: ST_TO_ADDR
// break ;
45268: GO 45272
// end ; end ;
45270: GO 45209
45272: POP
45273: POP
// end ; end ;
45274: GO 45057
45276: POP
45277: POP
// if result and not asc then
45278: LD_VAR 0 5
45282: PUSH
45283: LD_VAR 0 3
45287: NOT
45288: AND
45289: IFFALSE 45306
// result := ReverseArray ( result ) ;
45291: LD_ADDR_VAR 0 5
45295: PUSH
45296: LD_VAR 0 5
45300: PPUSH
45301: CALL 72546 0 1
45305: ST_TO_ADDR
// tmp := [ ] ;
45306: LD_ADDR_VAR 0 8
45310: PUSH
45311: EMPTY
45312: ST_TO_ADDR
// if mode then
45313: LD_VAR 0 4
45317: IFFALSE 45381
// begin for i := 1 to result do
45319: LD_ADDR_VAR 0 6
45323: PUSH
45324: DOUBLE
45325: LD_INT 1
45327: DEC
45328: ST_TO_ADDR
45329: LD_VAR 0 5
45333: PUSH
45334: FOR_TO
45335: IFFALSE 45369
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
45337: LD_ADDR_VAR 0 8
45341: PUSH
45342: LD_VAR 0 8
45346: PPUSH
45347: LD_VAR 0 5
45351: PUSH
45352: LD_VAR 0 6
45356: ARRAY
45357: PUSH
45358: LD_INT 1
45360: ARRAY
45361: PPUSH
45362: CALL 77270 0 2
45366: ST_TO_ADDR
45367: GO 45334
45369: POP
45370: POP
// result := tmp ;
45371: LD_ADDR_VAR 0 5
45375: PUSH
45376: LD_VAR 0 8
45380: ST_TO_ADDR
// end ; end ;
45381: LD_VAR 0 5
45385: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45386: LD_INT 0
45388: PPUSH
45389: PPUSH
45390: PPUSH
45391: PPUSH
// if not list then
45392: LD_VAR 0 3
45396: NOT
45397: IFFALSE 45401
// exit ;
45399: GO 45789
// result := [ ] ;
45401: LD_ADDR_VAR 0 6
45405: PUSH
45406: EMPTY
45407: ST_TO_ADDR
// for i in list do
45408: LD_ADDR_VAR 0 7
45412: PUSH
45413: LD_VAR 0 3
45417: PUSH
45418: FOR_IN
45419: IFFALSE 45621
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45421: LD_ADDR_VAR 0 9
45425: PUSH
45426: LD_VAR 0 7
45430: PPUSH
45431: LD_VAR 0 1
45435: PPUSH
45436: LD_VAR 0 2
45440: PPUSH
45441: CALL_OW 297
45445: ST_TO_ADDR
// if not result then
45446: LD_VAR 0 6
45450: NOT
45451: IFFALSE 45477
// result := [ [ i , tmp ] ] else
45453: LD_ADDR_VAR 0 6
45457: PUSH
45458: LD_VAR 0 7
45462: PUSH
45463: LD_VAR 0 9
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: EMPTY
45473: LIST
45474: ST_TO_ADDR
45475: GO 45619
// begin if result [ result ] [ 2 ] < tmp then
45477: LD_VAR 0 6
45481: PUSH
45482: LD_VAR 0 6
45486: ARRAY
45487: PUSH
45488: LD_INT 2
45490: ARRAY
45491: PUSH
45492: LD_VAR 0 9
45496: LESS
45497: IFFALSE 45539
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45499: LD_ADDR_VAR 0 6
45503: PUSH
45504: LD_VAR 0 6
45508: PPUSH
45509: LD_VAR 0 6
45513: PUSH
45514: LD_INT 1
45516: PLUS
45517: PPUSH
45518: LD_VAR 0 7
45522: PUSH
45523: LD_VAR 0 9
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PPUSH
45532: CALL_OW 2
45536: ST_TO_ADDR
45537: GO 45619
// for j = 1 to result do
45539: LD_ADDR_VAR 0 8
45543: PUSH
45544: DOUBLE
45545: LD_INT 1
45547: DEC
45548: ST_TO_ADDR
45549: LD_VAR 0 6
45553: PUSH
45554: FOR_TO
45555: IFFALSE 45617
// begin if tmp < result [ j ] [ 2 ] then
45557: LD_VAR 0 9
45561: PUSH
45562: LD_VAR 0 6
45566: PUSH
45567: LD_VAR 0 8
45571: ARRAY
45572: PUSH
45573: LD_INT 2
45575: ARRAY
45576: LESS
45577: IFFALSE 45615
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45579: LD_ADDR_VAR 0 6
45583: PUSH
45584: LD_VAR 0 6
45588: PPUSH
45589: LD_VAR 0 8
45593: PPUSH
45594: LD_VAR 0 7
45598: PUSH
45599: LD_VAR 0 9
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PPUSH
45608: CALL_OW 2
45612: ST_TO_ADDR
// break ;
45613: GO 45617
// end ; end ;
45615: GO 45554
45617: POP
45618: POP
// end ; end ;
45619: GO 45418
45621: POP
45622: POP
// if result and not asc then
45623: LD_VAR 0 6
45627: PUSH
45628: LD_VAR 0 4
45632: NOT
45633: AND
45634: IFFALSE 45709
// begin tmp := result ;
45636: LD_ADDR_VAR 0 9
45640: PUSH
45641: LD_VAR 0 6
45645: ST_TO_ADDR
// for i = tmp downto 1 do
45646: LD_ADDR_VAR 0 7
45650: PUSH
45651: DOUBLE
45652: LD_VAR 0 9
45656: INC
45657: ST_TO_ADDR
45658: LD_INT 1
45660: PUSH
45661: FOR_DOWNTO
45662: IFFALSE 45707
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45664: LD_ADDR_VAR 0 6
45668: PUSH
45669: LD_VAR 0 6
45673: PPUSH
45674: LD_VAR 0 9
45678: PUSH
45679: LD_VAR 0 7
45683: MINUS
45684: PUSH
45685: LD_INT 1
45687: PLUS
45688: PPUSH
45689: LD_VAR 0 9
45693: PUSH
45694: LD_VAR 0 7
45698: ARRAY
45699: PPUSH
45700: CALL_OW 1
45704: ST_TO_ADDR
45705: GO 45661
45707: POP
45708: POP
// end ; tmp := [ ] ;
45709: LD_ADDR_VAR 0 9
45713: PUSH
45714: EMPTY
45715: ST_TO_ADDR
// if mode then
45716: LD_VAR 0 5
45720: IFFALSE 45789
// begin for i = 1 to result do
45722: LD_ADDR_VAR 0 7
45726: PUSH
45727: DOUBLE
45728: LD_INT 1
45730: DEC
45731: ST_TO_ADDR
45732: LD_VAR 0 6
45736: PUSH
45737: FOR_TO
45738: IFFALSE 45777
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45740: LD_ADDR_VAR 0 9
45744: PUSH
45745: LD_VAR 0 9
45749: PPUSH
45750: LD_VAR 0 7
45754: PPUSH
45755: LD_VAR 0 6
45759: PUSH
45760: LD_VAR 0 7
45764: ARRAY
45765: PUSH
45766: LD_INT 1
45768: ARRAY
45769: PPUSH
45770: CALL_OW 1
45774: ST_TO_ADDR
45775: GO 45737
45777: POP
45778: POP
// result := tmp ;
45779: LD_ADDR_VAR 0 6
45783: PUSH
45784: LD_VAR 0 9
45788: ST_TO_ADDR
// end ; end ;
45789: LD_VAR 0 6
45793: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45794: LD_INT 0
45796: PPUSH
45797: PPUSH
45798: PPUSH
45799: PPUSH
45800: PPUSH
45801: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45802: LD_ADDR_VAR 0 5
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: EMPTY
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: ST_TO_ADDR
// if not x or not y then
45824: LD_VAR 0 2
45828: NOT
45829: PUSH
45830: LD_VAR 0 3
45834: NOT
45835: OR
45836: IFFALSE 45840
// exit ;
45838: GO 47490
// if not range then
45840: LD_VAR 0 4
45844: NOT
45845: IFFALSE 45855
// range := 10 ;
45847: LD_ADDR_VAR 0 4
45851: PUSH
45852: LD_INT 10
45854: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45855: LD_ADDR_VAR 0 8
45859: PUSH
45860: LD_INT 81
45862: PUSH
45863: LD_VAR 0 1
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 92
45874: PUSH
45875: LD_VAR 0 2
45879: PUSH
45880: LD_VAR 0 3
45884: PUSH
45885: LD_VAR 0 4
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 3
45898: PUSH
45899: LD_INT 21
45901: PUSH
45902: LD_INT 3
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: LIST
45917: PPUSH
45918: CALL_OW 69
45922: ST_TO_ADDR
// if not tmp then
45923: LD_VAR 0 8
45927: NOT
45928: IFFALSE 45932
// exit ;
45930: GO 47490
// for i in tmp do
45932: LD_ADDR_VAR 0 6
45936: PUSH
45937: LD_VAR 0 8
45941: PUSH
45942: FOR_IN
45943: IFFALSE 47465
// begin points := [ 0 , 0 , 0 ] ;
45945: LD_ADDR_VAR 0 9
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: LD_INT 0
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: LIST
45963: ST_TO_ADDR
// bpoints := 1 ;
45964: LD_ADDR_VAR 0 10
45968: PUSH
45969: LD_INT 1
45971: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45972: LD_VAR 0 6
45976: PPUSH
45977: CALL_OW 247
45981: PUSH
45982: LD_INT 1
45984: DOUBLE
45985: EQUAL
45986: IFTRUE 45990
45988: GO 46568
45990: POP
// begin if GetClass ( i ) = 1 then
45991: LD_VAR 0 6
45995: PPUSH
45996: CALL_OW 257
46000: PUSH
46001: LD_INT 1
46003: EQUAL
46004: IFFALSE 46025
// points := [ 10 , 5 , 3 ] ;
46006: LD_ADDR_VAR 0 9
46010: PUSH
46011: LD_INT 10
46013: PUSH
46014: LD_INT 5
46016: PUSH
46017: LD_INT 3
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46025: LD_VAR 0 6
46029: PPUSH
46030: CALL_OW 257
46034: PUSH
46035: LD_INT 2
46037: PUSH
46038: LD_INT 3
46040: PUSH
46041: LD_INT 4
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: LIST
46048: IN
46049: IFFALSE 46070
// points := [ 3 , 2 , 1 ] ;
46051: LD_ADDR_VAR 0 9
46055: PUSH
46056: LD_INT 3
46058: PUSH
46059: LD_INT 2
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: LIST
46069: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46070: LD_VAR 0 6
46074: PPUSH
46075: CALL_OW 257
46079: PUSH
46080: LD_INT 5
46082: EQUAL
46083: IFFALSE 46104
// points := [ 130 , 5 , 2 ] ;
46085: LD_ADDR_VAR 0 9
46089: PUSH
46090: LD_INT 130
46092: PUSH
46093: LD_INT 5
46095: PUSH
46096: LD_INT 2
46098: PUSH
46099: EMPTY
46100: LIST
46101: LIST
46102: LIST
46103: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46104: LD_VAR 0 6
46108: PPUSH
46109: CALL_OW 257
46113: PUSH
46114: LD_INT 8
46116: EQUAL
46117: IFFALSE 46138
// points := [ 35 , 35 , 30 ] ;
46119: LD_ADDR_VAR 0 9
46123: PUSH
46124: LD_INT 35
46126: PUSH
46127: LD_INT 35
46129: PUSH
46130: LD_INT 30
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46138: LD_VAR 0 6
46142: PPUSH
46143: CALL_OW 257
46147: PUSH
46148: LD_INT 9
46150: EQUAL
46151: IFFALSE 46172
// points := [ 20 , 55 , 40 ] ;
46153: LD_ADDR_VAR 0 9
46157: PUSH
46158: LD_INT 20
46160: PUSH
46161: LD_INT 55
46163: PUSH
46164: LD_INT 40
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46172: LD_VAR 0 6
46176: PPUSH
46177: CALL_OW 257
46181: PUSH
46182: LD_INT 12
46184: PUSH
46185: LD_INT 16
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: IN
46192: IFFALSE 46213
// points := [ 5 , 3 , 2 ] ;
46194: LD_ADDR_VAR 0 9
46198: PUSH
46199: LD_INT 5
46201: PUSH
46202: LD_INT 3
46204: PUSH
46205: LD_INT 2
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: LIST
46212: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46213: LD_VAR 0 6
46217: PPUSH
46218: CALL_OW 257
46222: PUSH
46223: LD_INT 17
46225: EQUAL
46226: IFFALSE 46247
// points := [ 100 , 50 , 75 ] ;
46228: LD_ADDR_VAR 0 9
46232: PUSH
46233: LD_INT 100
46235: PUSH
46236: LD_INT 50
46238: PUSH
46239: LD_INT 75
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: LIST
46246: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46247: LD_VAR 0 6
46251: PPUSH
46252: CALL_OW 257
46256: PUSH
46257: LD_INT 15
46259: EQUAL
46260: IFFALSE 46281
// points := [ 10 , 5 , 3 ] ;
46262: LD_ADDR_VAR 0 9
46266: PUSH
46267: LD_INT 10
46269: PUSH
46270: LD_INT 5
46272: PUSH
46273: LD_INT 3
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: LIST
46280: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46281: LD_VAR 0 6
46285: PPUSH
46286: CALL_OW 257
46290: PUSH
46291: LD_INT 14
46293: EQUAL
46294: IFFALSE 46315
// points := [ 10 , 0 , 0 ] ;
46296: LD_ADDR_VAR 0 9
46300: PUSH
46301: LD_INT 10
46303: PUSH
46304: LD_INT 0
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: LIST
46314: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46315: LD_VAR 0 6
46319: PPUSH
46320: CALL_OW 257
46324: PUSH
46325: LD_INT 11
46327: EQUAL
46328: IFFALSE 46349
// points := [ 30 , 10 , 5 ] ;
46330: LD_ADDR_VAR 0 9
46334: PUSH
46335: LD_INT 30
46337: PUSH
46338: LD_INT 10
46340: PUSH
46341: LD_INT 5
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: LIST
46348: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46349: LD_VAR 0 1
46353: PPUSH
46354: LD_INT 5
46356: PPUSH
46357: CALL_OW 321
46361: PUSH
46362: LD_INT 2
46364: EQUAL
46365: IFFALSE 46382
// bpoints := bpoints * 1.8 ;
46367: LD_ADDR_VAR 0 10
46371: PUSH
46372: LD_VAR 0 10
46376: PUSH
46377: LD_REAL  1.80000000000000E+0000
46380: MUL
46381: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46382: LD_VAR 0 6
46386: PPUSH
46387: CALL_OW 257
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: LD_INT 2
46397: PUSH
46398: LD_INT 3
46400: PUSH
46401: LD_INT 4
46403: PUSH
46404: EMPTY
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: IN
46410: PUSH
46411: LD_VAR 0 1
46415: PPUSH
46416: LD_INT 51
46418: PPUSH
46419: CALL_OW 321
46423: PUSH
46424: LD_INT 2
46426: EQUAL
46427: AND
46428: IFFALSE 46445
// bpoints := bpoints * 1.2 ;
46430: LD_ADDR_VAR 0 10
46434: PUSH
46435: LD_VAR 0 10
46439: PUSH
46440: LD_REAL  1.20000000000000E+0000
46443: MUL
46444: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46445: LD_VAR 0 6
46449: PPUSH
46450: CALL_OW 257
46454: PUSH
46455: LD_INT 5
46457: PUSH
46458: LD_INT 7
46460: PUSH
46461: LD_INT 9
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: LIST
46468: IN
46469: PUSH
46470: LD_VAR 0 1
46474: PPUSH
46475: LD_INT 52
46477: PPUSH
46478: CALL_OW 321
46482: PUSH
46483: LD_INT 2
46485: EQUAL
46486: AND
46487: IFFALSE 46504
// bpoints := bpoints * 1.5 ;
46489: LD_ADDR_VAR 0 10
46493: PUSH
46494: LD_VAR 0 10
46498: PUSH
46499: LD_REAL  1.50000000000000E+0000
46502: MUL
46503: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46504: LD_VAR 0 1
46508: PPUSH
46509: LD_INT 66
46511: PPUSH
46512: CALL_OW 321
46516: PUSH
46517: LD_INT 2
46519: EQUAL
46520: IFFALSE 46537
// bpoints := bpoints * 1.1 ;
46522: LD_ADDR_VAR 0 10
46526: PUSH
46527: LD_VAR 0 10
46531: PUSH
46532: LD_REAL  1.10000000000000E+0000
46535: MUL
46536: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46537: LD_ADDR_VAR 0 10
46541: PUSH
46542: LD_VAR 0 10
46546: PUSH
46547: LD_VAR 0 6
46551: PPUSH
46552: LD_INT 1
46554: PPUSH
46555: CALL_OW 259
46559: PUSH
46560: LD_REAL  1.15000000000000E+0000
46563: MUL
46564: MUL
46565: ST_TO_ADDR
// end ; unit_vehicle :
46566: GO 47394
46568: LD_INT 2
46570: DOUBLE
46571: EQUAL
46572: IFTRUE 46576
46574: GO 47382
46576: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46577: LD_VAR 0 6
46581: PPUSH
46582: CALL_OW 264
46586: PUSH
46587: LD_INT 2
46589: PUSH
46590: LD_INT 42
46592: PUSH
46593: LD_INT 24
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: LIST
46600: IN
46601: IFFALSE 46622
// points := [ 25 , 5 , 3 ] ;
46603: LD_ADDR_VAR 0 9
46607: PUSH
46608: LD_INT 25
46610: PUSH
46611: LD_INT 5
46613: PUSH
46614: LD_INT 3
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: LIST
46621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46622: LD_VAR 0 6
46626: PPUSH
46627: CALL_OW 264
46631: PUSH
46632: LD_INT 4
46634: PUSH
46635: LD_INT 43
46637: PUSH
46638: LD_INT 25
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: LIST
46645: IN
46646: IFFALSE 46667
// points := [ 40 , 15 , 5 ] ;
46648: LD_ADDR_VAR 0 9
46652: PUSH
46653: LD_INT 40
46655: PUSH
46656: LD_INT 15
46658: PUSH
46659: LD_INT 5
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: LIST
46666: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46667: LD_VAR 0 6
46671: PPUSH
46672: CALL_OW 264
46676: PUSH
46677: LD_INT 3
46679: PUSH
46680: LD_INT 23
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: IN
46687: IFFALSE 46708
// points := [ 7 , 25 , 8 ] ;
46689: LD_ADDR_VAR 0 9
46693: PUSH
46694: LD_INT 7
46696: PUSH
46697: LD_INT 25
46699: PUSH
46700: LD_INT 8
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: LIST
46707: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46708: LD_VAR 0 6
46712: PPUSH
46713: CALL_OW 264
46717: PUSH
46718: LD_INT 5
46720: PUSH
46721: LD_INT 27
46723: PUSH
46724: LD_INT 44
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: LIST
46731: IN
46732: IFFALSE 46753
// points := [ 14 , 50 , 16 ] ;
46734: LD_ADDR_VAR 0 9
46738: PUSH
46739: LD_INT 14
46741: PUSH
46742: LD_INT 50
46744: PUSH
46745: LD_INT 16
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: LIST
46752: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46753: LD_VAR 0 6
46757: PPUSH
46758: CALL_OW 264
46762: PUSH
46763: LD_INT 6
46765: PUSH
46766: LD_INT 46
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: IN
46773: IFFALSE 46794
// points := [ 32 , 120 , 70 ] ;
46775: LD_ADDR_VAR 0 9
46779: PUSH
46780: LD_INT 32
46782: PUSH
46783: LD_INT 120
46785: PUSH
46786: LD_INT 70
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: LIST
46793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46794: LD_VAR 0 6
46798: PPUSH
46799: CALL_OW 264
46803: PUSH
46804: LD_INT 7
46806: PUSH
46807: LD_INT 28
46809: PUSH
46810: LD_INT 45
46812: PUSH
46813: LD_INT 92
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: LIST
46820: LIST
46821: IN
46822: IFFALSE 46843
// points := [ 35 , 20 , 45 ] ;
46824: LD_ADDR_VAR 0 9
46828: PUSH
46829: LD_INT 35
46831: PUSH
46832: LD_INT 20
46834: PUSH
46835: LD_INT 45
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: LIST
46842: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46843: LD_VAR 0 6
46847: PPUSH
46848: CALL_OW 264
46852: PUSH
46853: LD_INT 47
46855: PUSH
46856: EMPTY
46857: LIST
46858: IN
46859: IFFALSE 46880
// points := [ 67 , 45 , 75 ] ;
46861: LD_ADDR_VAR 0 9
46865: PUSH
46866: LD_INT 67
46868: PUSH
46869: LD_INT 45
46871: PUSH
46872: LD_INT 75
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46880: LD_VAR 0 6
46884: PPUSH
46885: CALL_OW 264
46889: PUSH
46890: LD_INT 26
46892: PUSH
46893: EMPTY
46894: LIST
46895: IN
46896: IFFALSE 46917
// points := [ 120 , 30 , 80 ] ;
46898: LD_ADDR_VAR 0 9
46902: PUSH
46903: LD_INT 120
46905: PUSH
46906: LD_INT 30
46908: PUSH
46909: LD_INT 80
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: LIST
46916: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46917: LD_VAR 0 6
46921: PPUSH
46922: CALL_OW 264
46926: PUSH
46927: LD_INT 22
46929: PUSH
46930: EMPTY
46931: LIST
46932: IN
46933: IFFALSE 46954
// points := [ 40 , 1 , 1 ] ;
46935: LD_ADDR_VAR 0 9
46939: PUSH
46940: LD_INT 40
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: LIST
46953: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46954: LD_VAR 0 6
46958: PPUSH
46959: CALL_OW 264
46963: PUSH
46964: LD_INT 29
46966: PUSH
46967: EMPTY
46968: LIST
46969: IN
46970: IFFALSE 46991
// points := [ 70 , 200 , 400 ] ;
46972: LD_ADDR_VAR 0 9
46976: PUSH
46977: LD_INT 70
46979: PUSH
46980: LD_INT 200
46982: PUSH
46983: LD_INT 400
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: LIST
46990: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46991: LD_VAR 0 6
46995: PPUSH
46996: CALL_OW 264
47000: PUSH
47001: LD_INT 14
47003: PUSH
47004: LD_INT 53
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: IN
47011: IFFALSE 47032
// points := [ 40 , 10 , 20 ] ;
47013: LD_ADDR_VAR 0 9
47017: PUSH
47018: LD_INT 40
47020: PUSH
47021: LD_INT 10
47023: PUSH
47024: LD_INT 20
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: LIST
47031: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47032: LD_VAR 0 6
47036: PPUSH
47037: CALL_OW 264
47041: PUSH
47042: LD_INT 9
47044: PUSH
47045: EMPTY
47046: LIST
47047: IN
47048: IFFALSE 47069
// points := [ 5 , 70 , 20 ] ;
47050: LD_ADDR_VAR 0 9
47054: PUSH
47055: LD_INT 5
47057: PUSH
47058: LD_INT 70
47060: PUSH
47061: LD_INT 20
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: LIST
47068: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47069: LD_VAR 0 6
47073: PPUSH
47074: CALL_OW 264
47078: PUSH
47079: LD_INT 10
47081: PUSH
47082: EMPTY
47083: LIST
47084: IN
47085: IFFALSE 47106
// points := [ 35 , 110 , 70 ] ;
47087: LD_ADDR_VAR 0 9
47091: PUSH
47092: LD_INT 35
47094: PUSH
47095: LD_INT 110
47097: PUSH
47098: LD_INT 70
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: LIST
47105: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47106: LD_VAR 0 6
47110: PPUSH
47111: CALL_OW 265
47115: PUSH
47116: LD_INT 25
47118: EQUAL
47119: IFFALSE 47140
// points := [ 80 , 65 , 100 ] ;
47121: LD_ADDR_VAR 0 9
47125: PUSH
47126: LD_INT 80
47128: PUSH
47129: LD_INT 65
47131: PUSH
47132: LD_INT 100
47134: PUSH
47135: EMPTY
47136: LIST
47137: LIST
47138: LIST
47139: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47140: LD_VAR 0 6
47144: PPUSH
47145: CALL_OW 263
47149: PUSH
47150: LD_INT 1
47152: EQUAL
47153: IFFALSE 47188
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47155: LD_ADDR_VAR 0 10
47159: PUSH
47160: LD_VAR 0 10
47164: PUSH
47165: LD_VAR 0 6
47169: PPUSH
47170: CALL_OW 311
47174: PPUSH
47175: LD_INT 3
47177: PPUSH
47178: CALL_OW 259
47182: PUSH
47183: LD_INT 4
47185: MUL
47186: MUL
47187: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47188: LD_VAR 0 6
47192: PPUSH
47193: CALL_OW 263
47197: PUSH
47198: LD_INT 2
47200: EQUAL
47201: IFFALSE 47252
// begin j := IsControledBy ( i ) ;
47203: LD_ADDR_VAR 0 7
47207: PUSH
47208: LD_VAR 0 6
47212: PPUSH
47213: CALL_OW 312
47217: ST_TO_ADDR
// if j then
47218: LD_VAR 0 7
47222: IFFALSE 47252
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47224: LD_ADDR_VAR 0 10
47228: PUSH
47229: LD_VAR 0 10
47233: PUSH
47234: LD_VAR 0 7
47238: PPUSH
47239: LD_INT 3
47241: PPUSH
47242: CALL_OW 259
47246: PUSH
47247: LD_INT 3
47249: MUL
47250: MUL
47251: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47252: LD_VAR 0 6
47256: PPUSH
47257: CALL_OW 264
47261: PUSH
47262: LD_INT 5
47264: PUSH
47265: LD_INT 6
47267: PUSH
47268: LD_INT 46
47270: PUSH
47271: LD_INT 44
47273: PUSH
47274: LD_INT 47
47276: PUSH
47277: LD_INT 45
47279: PUSH
47280: LD_INT 28
47282: PUSH
47283: LD_INT 7
47285: PUSH
47286: LD_INT 27
47288: PUSH
47289: LD_INT 29
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: IN
47304: PUSH
47305: LD_VAR 0 1
47309: PPUSH
47310: LD_INT 52
47312: PPUSH
47313: CALL_OW 321
47317: PUSH
47318: LD_INT 2
47320: EQUAL
47321: AND
47322: IFFALSE 47339
// bpoints := bpoints * 1.2 ;
47324: LD_ADDR_VAR 0 10
47328: PUSH
47329: LD_VAR 0 10
47333: PUSH
47334: LD_REAL  1.20000000000000E+0000
47337: MUL
47338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47339: LD_VAR 0 6
47343: PPUSH
47344: CALL_OW 264
47348: PUSH
47349: LD_INT 6
47351: PUSH
47352: LD_INT 46
47354: PUSH
47355: LD_INT 47
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: LIST
47362: IN
47363: IFFALSE 47380
// bpoints := bpoints * 1.2 ;
47365: LD_ADDR_VAR 0 10
47369: PUSH
47370: LD_VAR 0 10
47374: PUSH
47375: LD_REAL  1.20000000000000E+0000
47378: MUL
47379: ST_TO_ADDR
// end ; unit_building :
47380: GO 47394
47382: LD_INT 3
47384: DOUBLE
47385: EQUAL
47386: IFTRUE 47390
47388: GO 47393
47390: POP
// ; end ;
47391: GO 47394
47393: POP
// for j = 1 to 3 do
47394: LD_ADDR_VAR 0 7
47398: PUSH
47399: DOUBLE
47400: LD_INT 1
47402: DEC
47403: ST_TO_ADDR
47404: LD_INT 3
47406: PUSH
47407: FOR_TO
47408: IFFALSE 47461
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47410: LD_ADDR_VAR 0 5
47414: PUSH
47415: LD_VAR 0 5
47419: PPUSH
47420: LD_VAR 0 7
47424: PPUSH
47425: LD_VAR 0 5
47429: PUSH
47430: LD_VAR 0 7
47434: ARRAY
47435: PUSH
47436: LD_VAR 0 9
47440: PUSH
47441: LD_VAR 0 7
47445: ARRAY
47446: PUSH
47447: LD_VAR 0 10
47451: MUL
47452: PLUS
47453: PPUSH
47454: CALL_OW 1
47458: ST_TO_ADDR
47459: GO 47407
47461: POP
47462: POP
// end ;
47463: GO 45942
47465: POP
47466: POP
// result := Replace ( result , 4 , tmp ) ;
47467: LD_ADDR_VAR 0 5
47471: PUSH
47472: LD_VAR 0 5
47476: PPUSH
47477: LD_INT 4
47479: PPUSH
47480: LD_VAR 0 8
47484: PPUSH
47485: CALL_OW 1
47489: ST_TO_ADDR
// end ;
47490: LD_VAR 0 5
47494: RET
// export function DangerAtRange ( unit , range ) ; begin
47495: LD_INT 0
47497: PPUSH
// if not unit then
47498: LD_VAR 0 1
47502: NOT
47503: IFFALSE 47507
// exit ;
47505: GO 47552
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47507: LD_ADDR_VAR 0 3
47511: PUSH
47512: LD_VAR 0 1
47516: PPUSH
47517: CALL_OW 255
47521: PPUSH
47522: LD_VAR 0 1
47526: PPUSH
47527: CALL_OW 250
47531: PPUSH
47532: LD_VAR 0 1
47536: PPUSH
47537: CALL_OW 251
47541: PPUSH
47542: LD_VAR 0 2
47546: PPUSH
47547: CALL 45794 0 4
47551: ST_TO_ADDR
// end ;
47552: LD_VAR 0 3
47556: RET
// export function DangerInArea ( side , area ) ; begin
47557: LD_INT 0
47559: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47560: LD_ADDR_VAR 0 3
47564: PUSH
47565: LD_VAR 0 2
47569: PPUSH
47570: LD_INT 81
47572: PUSH
47573: LD_VAR 0 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PPUSH
47582: CALL_OW 70
47586: ST_TO_ADDR
// end ;
47587: LD_VAR 0 3
47591: RET
// export function IsExtension ( b ) ; begin
47592: LD_INT 0
47594: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47595: LD_ADDR_VAR 0 2
47599: PUSH
47600: LD_VAR 0 1
47604: PUSH
47605: LD_INT 23
47607: PUSH
47608: LD_INT 20
47610: PUSH
47611: LD_INT 22
47613: PUSH
47614: LD_INT 17
47616: PUSH
47617: LD_INT 24
47619: PUSH
47620: LD_INT 21
47622: PUSH
47623: LD_INT 19
47625: PUSH
47626: LD_INT 16
47628: PUSH
47629: LD_INT 25
47631: PUSH
47632: LD_INT 18
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: IN
47647: ST_TO_ADDR
// end ;
47648: LD_VAR 0 2
47652: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47653: LD_INT 0
47655: PPUSH
47656: PPUSH
47657: PPUSH
// result := [ ] ;
47658: LD_ADDR_VAR 0 4
47662: PUSH
47663: EMPTY
47664: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47665: LD_ADDR_VAR 0 5
47669: PUSH
47670: LD_VAR 0 2
47674: PPUSH
47675: LD_INT 21
47677: PUSH
47678: LD_INT 3
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PPUSH
47685: CALL_OW 70
47689: ST_TO_ADDR
// if not tmp then
47690: LD_VAR 0 5
47694: NOT
47695: IFFALSE 47699
// exit ;
47697: GO 47763
// if checkLink then
47699: LD_VAR 0 3
47703: IFFALSE 47753
// begin for i in tmp do
47705: LD_ADDR_VAR 0 6
47709: PUSH
47710: LD_VAR 0 5
47714: PUSH
47715: FOR_IN
47716: IFFALSE 47751
// if GetBase ( i ) <> base then
47718: LD_VAR 0 6
47722: PPUSH
47723: CALL_OW 274
47727: PUSH
47728: LD_VAR 0 1
47732: NONEQUAL
47733: IFFALSE 47749
// ComLinkToBase ( base , i ) ;
47735: LD_VAR 0 1
47739: PPUSH
47740: LD_VAR 0 6
47744: PPUSH
47745: CALL_OW 169
47749: GO 47715
47751: POP
47752: POP
// end ; result := tmp ;
47753: LD_ADDR_VAR 0 4
47757: PUSH
47758: LD_VAR 0 5
47762: ST_TO_ADDR
// end ;
47763: LD_VAR 0 4
47767: RET
// export function ComComplete ( units , b ) ; var i ; begin
47768: LD_INT 0
47770: PPUSH
47771: PPUSH
// if not units then
47772: LD_VAR 0 1
47776: NOT
47777: IFFALSE 47781
// exit ;
47779: GO 47871
// for i in units do
47781: LD_ADDR_VAR 0 4
47785: PUSH
47786: LD_VAR 0 1
47790: PUSH
47791: FOR_IN
47792: IFFALSE 47869
// if BuildingStatus ( b ) = bs_build then
47794: LD_VAR 0 2
47798: PPUSH
47799: CALL_OW 461
47803: PUSH
47804: LD_INT 1
47806: EQUAL
47807: IFFALSE 47867
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47809: LD_VAR 0 4
47813: PPUSH
47814: LD_STRING h
47816: PUSH
47817: LD_VAR 0 2
47821: PPUSH
47822: CALL_OW 250
47826: PUSH
47827: LD_VAR 0 2
47831: PPUSH
47832: CALL_OW 251
47836: PUSH
47837: LD_VAR 0 2
47841: PUSH
47842: LD_INT 0
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: PUSH
47860: EMPTY
47861: LIST
47862: PPUSH
47863: CALL_OW 446
47867: GO 47791
47869: POP
47870: POP
// end ;
47871: LD_VAR 0 3
47875: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47876: LD_INT 0
47878: PPUSH
47879: PPUSH
47880: PPUSH
47881: PPUSH
47882: PPUSH
47883: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47884: LD_VAR 0 1
47888: NOT
47889: PUSH
47890: LD_VAR 0 1
47894: PPUSH
47895: CALL_OW 263
47899: PUSH
47900: LD_INT 2
47902: NONEQUAL
47903: OR
47904: IFFALSE 47908
// exit ;
47906: GO 48224
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47908: LD_ADDR_VAR 0 6
47912: PUSH
47913: LD_INT 22
47915: PUSH
47916: LD_VAR 0 1
47920: PPUSH
47921: CALL_OW 255
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: PUSH
47933: LD_INT 30
47935: PUSH
47936: LD_INT 36
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 34
47945: PUSH
47946: LD_INT 31
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: LIST
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PPUSH
47962: CALL_OW 69
47966: ST_TO_ADDR
// if not tmp then
47967: LD_VAR 0 6
47971: NOT
47972: IFFALSE 47976
// exit ;
47974: GO 48224
// result := [ ] ;
47976: LD_ADDR_VAR 0 2
47980: PUSH
47981: EMPTY
47982: ST_TO_ADDR
// for i in tmp do
47983: LD_ADDR_VAR 0 3
47987: PUSH
47988: LD_VAR 0 6
47992: PUSH
47993: FOR_IN
47994: IFFALSE 48065
// begin t := UnitsInside ( i ) ;
47996: LD_ADDR_VAR 0 4
48000: PUSH
48001: LD_VAR 0 3
48005: PPUSH
48006: CALL_OW 313
48010: ST_TO_ADDR
// if t then
48011: LD_VAR 0 4
48015: IFFALSE 48063
// for j in t do
48017: LD_ADDR_VAR 0 7
48021: PUSH
48022: LD_VAR 0 4
48026: PUSH
48027: FOR_IN
48028: IFFALSE 48061
// result := Replace ( result , result + 1 , j ) ;
48030: LD_ADDR_VAR 0 2
48034: PUSH
48035: LD_VAR 0 2
48039: PPUSH
48040: LD_VAR 0 2
48044: PUSH
48045: LD_INT 1
48047: PLUS
48048: PPUSH
48049: LD_VAR 0 7
48053: PPUSH
48054: CALL_OW 1
48058: ST_TO_ADDR
48059: GO 48027
48061: POP
48062: POP
// end ;
48063: GO 47993
48065: POP
48066: POP
// if not result then
48067: LD_VAR 0 2
48071: NOT
48072: IFFALSE 48076
// exit ;
48074: GO 48224
// mech := result [ 1 ] ;
48076: LD_ADDR_VAR 0 5
48080: PUSH
48081: LD_VAR 0 2
48085: PUSH
48086: LD_INT 1
48088: ARRAY
48089: ST_TO_ADDR
// if result > 1 then
48090: LD_VAR 0 2
48094: PUSH
48095: LD_INT 1
48097: GREATER
48098: IFFALSE 48210
// begin for i = 2 to result do
48100: LD_ADDR_VAR 0 3
48104: PUSH
48105: DOUBLE
48106: LD_INT 2
48108: DEC
48109: ST_TO_ADDR
48110: LD_VAR 0 2
48114: PUSH
48115: FOR_TO
48116: IFFALSE 48208
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48118: LD_ADDR_VAR 0 4
48122: PUSH
48123: LD_VAR 0 2
48127: PUSH
48128: LD_VAR 0 3
48132: ARRAY
48133: PPUSH
48134: LD_INT 3
48136: PPUSH
48137: CALL_OW 259
48141: PUSH
48142: LD_VAR 0 2
48146: PUSH
48147: LD_VAR 0 3
48151: ARRAY
48152: PPUSH
48153: CALL_OW 432
48157: MINUS
48158: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48159: LD_VAR 0 4
48163: PUSH
48164: LD_VAR 0 5
48168: PPUSH
48169: LD_INT 3
48171: PPUSH
48172: CALL_OW 259
48176: PUSH
48177: LD_VAR 0 5
48181: PPUSH
48182: CALL_OW 432
48186: MINUS
48187: GREATEREQUAL
48188: IFFALSE 48206
// mech := result [ i ] ;
48190: LD_ADDR_VAR 0 5
48194: PUSH
48195: LD_VAR 0 2
48199: PUSH
48200: LD_VAR 0 3
48204: ARRAY
48205: ST_TO_ADDR
// end ;
48206: GO 48115
48208: POP
48209: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48210: LD_VAR 0 1
48214: PPUSH
48215: LD_VAR 0 5
48219: PPUSH
48220: CALL_OW 135
// end ;
48224: LD_VAR 0 2
48228: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48229: LD_INT 0
48231: PPUSH
48232: PPUSH
48233: PPUSH
48234: PPUSH
48235: PPUSH
48236: PPUSH
48237: PPUSH
48238: PPUSH
48239: PPUSH
48240: PPUSH
48241: PPUSH
48242: PPUSH
48243: PPUSH
// result := [ ] ;
48244: LD_ADDR_VAR 0 7
48248: PUSH
48249: EMPTY
48250: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48251: LD_VAR 0 1
48255: PPUSH
48256: CALL_OW 266
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: IN
48271: NOT
48272: IFFALSE 48276
// exit ;
48274: GO 49910
// if name then
48276: LD_VAR 0 3
48280: IFFALSE 48296
// SetBName ( base_dep , name ) ;
48282: LD_VAR 0 1
48286: PPUSH
48287: LD_VAR 0 3
48291: PPUSH
48292: CALL_OW 500
// base := GetBase ( base_dep ) ;
48296: LD_ADDR_VAR 0 15
48300: PUSH
48301: LD_VAR 0 1
48305: PPUSH
48306: CALL_OW 274
48310: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48311: LD_ADDR_VAR 0 16
48315: PUSH
48316: LD_VAR 0 1
48320: PPUSH
48321: CALL_OW 255
48325: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48326: LD_ADDR_VAR 0 17
48330: PUSH
48331: LD_VAR 0 1
48335: PPUSH
48336: CALL_OW 248
48340: ST_TO_ADDR
// if sources then
48341: LD_VAR 0 5
48345: IFFALSE 48392
// for i = 1 to 3 do
48347: LD_ADDR_VAR 0 8
48351: PUSH
48352: DOUBLE
48353: LD_INT 1
48355: DEC
48356: ST_TO_ADDR
48357: LD_INT 3
48359: PUSH
48360: FOR_TO
48361: IFFALSE 48390
// AddResourceType ( base , i , sources [ i ] ) ;
48363: LD_VAR 0 15
48367: PPUSH
48368: LD_VAR 0 8
48372: PPUSH
48373: LD_VAR 0 5
48377: PUSH
48378: LD_VAR 0 8
48382: ARRAY
48383: PPUSH
48384: CALL_OW 276
48388: GO 48360
48390: POP
48391: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48392: LD_ADDR_VAR 0 18
48396: PUSH
48397: LD_VAR 0 15
48401: PPUSH
48402: LD_VAR 0 2
48406: PPUSH
48407: LD_INT 1
48409: PPUSH
48410: CALL 47653 0 3
48414: ST_TO_ADDR
// InitHc ;
48415: CALL_OW 19
// InitUc ;
48419: CALL_OW 18
// uc_side := side ;
48423: LD_ADDR_OWVAR 20
48427: PUSH
48428: LD_VAR 0 16
48432: ST_TO_ADDR
// uc_nation := nation ;
48433: LD_ADDR_OWVAR 21
48437: PUSH
48438: LD_VAR 0 17
48442: ST_TO_ADDR
// if buildings then
48443: LD_VAR 0 18
48447: IFFALSE 49769
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48449: LD_ADDR_VAR 0 19
48453: PUSH
48454: LD_VAR 0 18
48458: PPUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 30
48464: PUSH
48465: LD_INT 29
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 30
48474: PUSH
48475: LD_INT 30
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: LIST
48486: PPUSH
48487: CALL_OW 72
48491: ST_TO_ADDR
// if tmp then
48492: LD_VAR 0 19
48496: IFFALSE 48544
// for i in tmp do
48498: LD_ADDR_VAR 0 8
48502: PUSH
48503: LD_VAR 0 19
48507: PUSH
48508: FOR_IN
48509: IFFALSE 48542
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48511: LD_VAR 0 8
48515: PPUSH
48516: CALL_OW 250
48520: PPUSH
48521: LD_VAR 0 8
48525: PPUSH
48526: CALL_OW 251
48530: PPUSH
48531: LD_VAR 0 16
48535: PPUSH
48536: CALL_OW 441
48540: GO 48508
48542: POP
48543: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48544: LD_VAR 0 18
48548: PPUSH
48549: LD_INT 2
48551: PUSH
48552: LD_INT 30
48554: PUSH
48555: LD_INT 32
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 30
48564: PUSH
48565: LD_INT 33
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: LIST
48576: PPUSH
48577: CALL_OW 72
48581: IFFALSE 48669
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48583: LD_ADDR_VAR 0 8
48587: PUSH
48588: LD_VAR 0 18
48592: PPUSH
48593: LD_INT 2
48595: PUSH
48596: LD_INT 30
48598: PUSH
48599: LD_INT 32
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 30
48608: PUSH
48609: LD_INT 33
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: LIST
48620: PPUSH
48621: CALL_OW 72
48625: PUSH
48626: FOR_IN
48627: IFFALSE 48667
// begin if not GetBWeapon ( i ) then
48629: LD_VAR 0 8
48633: PPUSH
48634: CALL_OW 269
48638: NOT
48639: IFFALSE 48665
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48641: LD_VAR 0 8
48645: PPUSH
48646: LD_VAR 0 8
48650: PPUSH
48651: LD_VAR 0 2
48655: PPUSH
48656: CALL 49915 0 2
48660: PPUSH
48661: CALL_OW 431
// end ;
48665: GO 48626
48667: POP
48668: POP
// end ; for i = 1 to personel do
48669: LD_ADDR_VAR 0 8
48673: PUSH
48674: DOUBLE
48675: LD_INT 1
48677: DEC
48678: ST_TO_ADDR
48679: LD_VAR 0 6
48683: PUSH
48684: FOR_TO
48685: IFFALSE 49749
// begin if i > 4 then
48687: LD_VAR 0 8
48691: PUSH
48692: LD_INT 4
48694: GREATER
48695: IFFALSE 48699
// break ;
48697: GO 49749
// case i of 1 :
48699: LD_VAR 0 8
48703: PUSH
48704: LD_INT 1
48706: DOUBLE
48707: EQUAL
48708: IFTRUE 48712
48710: GO 48792
48712: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48713: LD_ADDR_VAR 0 12
48717: PUSH
48718: LD_VAR 0 18
48722: PPUSH
48723: LD_INT 22
48725: PUSH
48726: LD_VAR 0 16
48730: PUSH
48731: EMPTY
48732: LIST
48733: LIST
48734: PUSH
48735: LD_INT 58
48737: PUSH
48738: EMPTY
48739: LIST
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: LD_INT 30
48746: PUSH
48747: LD_INT 32
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 30
48756: PUSH
48757: LD_INT 4
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 30
48766: PUSH
48767: LD_INT 5
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: LIST
48784: PPUSH
48785: CALL_OW 72
48789: ST_TO_ADDR
48790: GO 49014
48792: LD_INT 2
48794: DOUBLE
48795: EQUAL
48796: IFTRUE 48800
48798: GO 48862
48800: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48801: LD_ADDR_VAR 0 12
48805: PUSH
48806: LD_VAR 0 18
48810: PPUSH
48811: LD_INT 22
48813: PUSH
48814: LD_VAR 0 16
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: LD_INT 30
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 30
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: LIST
48850: PUSH
48851: EMPTY
48852: LIST
48853: LIST
48854: PPUSH
48855: CALL_OW 72
48859: ST_TO_ADDR
48860: GO 49014
48862: LD_INT 3
48864: DOUBLE
48865: EQUAL
48866: IFTRUE 48870
48868: GO 48932
48870: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48871: LD_ADDR_VAR 0 12
48875: PUSH
48876: LD_VAR 0 18
48880: PPUSH
48881: LD_INT 22
48883: PUSH
48884: LD_VAR 0 16
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: LD_INT 30
48898: PUSH
48899: LD_INT 2
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 30
48908: PUSH
48909: LD_INT 3
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: LIST
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PPUSH
48925: CALL_OW 72
48929: ST_TO_ADDR
48930: GO 49014
48932: LD_INT 4
48934: DOUBLE
48935: EQUAL
48936: IFTRUE 48940
48938: GO 49013
48940: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48941: LD_ADDR_VAR 0 12
48945: PUSH
48946: LD_VAR 0 18
48950: PPUSH
48951: LD_INT 22
48953: PUSH
48954: LD_VAR 0 16
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: LD_INT 30
48968: PUSH
48969: LD_INT 6
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 30
48978: PUSH
48979: LD_INT 7
48981: PUSH
48982: EMPTY
48983: LIST
48984: LIST
48985: PUSH
48986: LD_INT 30
48988: PUSH
48989: LD_INT 8
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PPUSH
49006: CALL_OW 72
49010: ST_TO_ADDR
49011: GO 49014
49013: POP
// if i = 1 then
49014: LD_VAR 0 8
49018: PUSH
49019: LD_INT 1
49021: EQUAL
49022: IFFALSE 49133
// begin tmp := [ ] ;
49024: LD_ADDR_VAR 0 19
49028: PUSH
49029: EMPTY
49030: ST_TO_ADDR
// for j in f do
49031: LD_ADDR_VAR 0 9
49035: PUSH
49036: LD_VAR 0 12
49040: PUSH
49041: FOR_IN
49042: IFFALSE 49115
// if GetBType ( j ) = b_bunker then
49044: LD_VAR 0 9
49048: PPUSH
49049: CALL_OW 266
49053: PUSH
49054: LD_INT 32
49056: EQUAL
49057: IFFALSE 49084
// tmp := Insert ( tmp , 1 , j ) else
49059: LD_ADDR_VAR 0 19
49063: PUSH
49064: LD_VAR 0 19
49068: PPUSH
49069: LD_INT 1
49071: PPUSH
49072: LD_VAR 0 9
49076: PPUSH
49077: CALL_OW 2
49081: ST_TO_ADDR
49082: GO 49113
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49084: LD_ADDR_VAR 0 19
49088: PUSH
49089: LD_VAR 0 19
49093: PPUSH
49094: LD_VAR 0 19
49098: PUSH
49099: LD_INT 1
49101: PLUS
49102: PPUSH
49103: LD_VAR 0 9
49107: PPUSH
49108: CALL_OW 2
49112: ST_TO_ADDR
49113: GO 49041
49115: POP
49116: POP
// if tmp then
49117: LD_VAR 0 19
49121: IFFALSE 49133
// f := tmp ;
49123: LD_ADDR_VAR 0 12
49127: PUSH
49128: LD_VAR 0 19
49132: ST_TO_ADDR
// end ; x := personel [ i ] ;
49133: LD_ADDR_VAR 0 13
49137: PUSH
49138: LD_VAR 0 6
49142: PUSH
49143: LD_VAR 0 8
49147: ARRAY
49148: ST_TO_ADDR
// if x = - 1 then
49149: LD_VAR 0 13
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: EQUAL
49158: IFFALSE 49367
// begin for j in f do
49160: LD_ADDR_VAR 0 9
49164: PUSH
49165: LD_VAR 0 12
49169: PUSH
49170: FOR_IN
49171: IFFALSE 49363
// repeat InitHc ;
49173: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49177: LD_VAR 0 9
49181: PPUSH
49182: CALL_OW 266
49186: PUSH
49187: LD_INT 5
49189: EQUAL
49190: IFFALSE 49260
// begin if UnitsInside ( j ) < 3 then
49192: LD_VAR 0 9
49196: PPUSH
49197: CALL_OW 313
49201: PUSH
49202: LD_INT 3
49204: LESS
49205: IFFALSE 49241
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49207: LD_INT 0
49209: PPUSH
49210: LD_INT 5
49212: PUSH
49213: LD_INT 8
49215: PUSH
49216: LD_INT 9
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: LIST
49223: PUSH
49224: LD_VAR 0 17
49228: ARRAY
49229: PPUSH
49230: LD_VAR 0 4
49234: PPUSH
49235: CALL_OW 380
49239: GO 49258
// PrepareHuman ( false , i , skill ) ;
49241: LD_INT 0
49243: PPUSH
49244: LD_VAR 0 8
49248: PPUSH
49249: LD_VAR 0 4
49253: PPUSH
49254: CALL_OW 380
// end else
49258: GO 49277
// PrepareHuman ( false , i , skill ) ;
49260: LD_INT 0
49262: PPUSH
49263: LD_VAR 0 8
49267: PPUSH
49268: LD_VAR 0 4
49272: PPUSH
49273: CALL_OW 380
// un := CreateHuman ;
49277: LD_ADDR_VAR 0 14
49281: PUSH
49282: CALL_OW 44
49286: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49287: LD_ADDR_VAR 0 7
49291: PUSH
49292: LD_VAR 0 7
49296: PPUSH
49297: LD_INT 1
49299: PPUSH
49300: LD_VAR 0 14
49304: PPUSH
49305: CALL_OW 2
49309: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49310: LD_VAR 0 14
49314: PPUSH
49315: LD_VAR 0 9
49319: PPUSH
49320: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49324: LD_VAR 0 9
49328: PPUSH
49329: CALL_OW 313
49333: PUSH
49334: LD_INT 6
49336: EQUAL
49337: PUSH
49338: LD_VAR 0 9
49342: PPUSH
49343: CALL_OW 266
49347: PUSH
49348: LD_INT 32
49350: PUSH
49351: LD_INT 31
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: IN
49358: OR
49359: IFFALSE 49173
49361: GO 49170
49363: POP
49364: POP
// end else
49365: GO 49747
// for j = 1 to x do
49367: LD_ADDR_VAR 0 9
49371: PUSH
49372: DOUBLE
49373: LD_INT 1
49375: DEC
49376: ST_TO_ADDR
49377: LD_VAR 0 13
49381: PUSH
49382: FOR_TO
49383: IFFALSE 49745
// begin InitHc ;
49385: CALL_OW 19
// if not f then
49389: LD_VAR 0 12
49393: NOT
49394: IFFALSE 49483
// begin PrepareHuman ( false , i , skill ) ;
49396: LD_INT 0
49398: PPUSH
49399: LD_VAR 0 8
49403: PPUSH
49404: LD_VAR 0 4
49408: PPUSH
49409: CALL_OW 380
// un := CreateHuman ;
49413: LD_ADDR_VAR 0 14
49417: PUSH
49418: CALL_OW 44
49422: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49423: LD_ADDR_VAR 0 7
49427: PUSH
49428: LD_VAR 0 7
49432: PPUSH
49433: LD_INT 1
49435: PPUSH
49436: LD_VAR 0 14
49440: PPUSH
49441: CALL_OW 2
49445: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49446: LD_VAR 0 14
49450: PPUSH
49451: LD_VAR 0 1
49455: PPUSH
49456: CALL_OW 250
49460: PPUSH
49461: LD_VAR 0 1
49465: PPUSH
49466: CALL_OW 251
49470: PPUSH
49471: LD_INT 10
49473: PPUSH
49474: LD_INT 0
49476: PPUSH
49477: CALL_OW 50
// continue ;
49481: GO 49382
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49483: LD_VAR 0 12
49487: PUSH
49488: LD_INT 1
49490: ARRAY
49491: PPUSH
49492: CALL_OW 313
49496: PUSH
49497: LD_VAR 0 12
49501: PUSH
49502: LD_INT 1
49504: ARRAY
49505: PPUSH
49506: CALL_OW 266
49510: PUSH
49511: LD_INT 32
49513: PUSH
49514: LD_INT 31
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: IN
49521: AND
49522: PUSH
49523: LD_VAR 0 12
49527: PUSH
49528: LD_INT 1
49530: ARRAY
49531: PPUSH
49532: CALL_OW 313
49536: PUSH
49537: LD_INT 6
49539: EQUAL
49540: OR
49541: IFFALSE 49561
// f := Delete ( f , 1 ) ;
49543: LD_ADDR_VAR 0 12
49547: PUSH
49548: LD_VAR 0 12
49552: PPUSH
49553: LD_INT 1
49555: PPUSH
49556: CALL_OW 3
49560: ST_TO_ADDR
// if not f then
49561: LD_VAR 0 12
49565: NOT
49566: IFFALSE 49584
// begin x := x + 2 ;
49568: LD_ADDR_VAR 0 13
49572: PUSH
49573: LD_VAR 0 13
49577: PUSH
49578: LD_INT 2
49580: PLUS
49581: ST_TO_ADDR
// continue ;
49582: GO 49382
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49584: LD_VAR 0 12
49588: PUSH
49589: LD_INT 1
49591: ARRAY
49592: PPUSH
49593: CALL_OW 266
49597: PUSH
49598: LD_INT 5
49600: EQUAL
49601: IFFALSE 49675
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49603: LD_VAR 0 12
49607: PUSH
49608: LD_INT 1
49610: ARRAY
49611: PPUSH
49612: CALL_OW 313
49616: PUSH
49617: LD_INT 3
49619: LESS
49620: IFFALSE 49656
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49622: LD_INT 0
49624: PPUSH
49625: LD_INT 5
49627: PUSH
49628: LD_INT 8
49630: PUSH
49631: LD_INT 9
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: LIST
49638: PUSH
49639: LD_VAR 0 17
49643: ARRAY
49644: PPUSH
49645: LD_VAR 0 4
49649: PPUSH
49650: CALL_OW 380
49654: GO 49673
// PrepareHuman ( false , i , skill ) ;
49656: LD_INT 0
49658: PPUSH
49659: LD_VAR 0 8
49663: PPUSH
49664: LD_VAR 0 4
49668: PPUSH
49669: CALL_OW 380
// end else
49673: GO 49692
// PrepareHuman ( false , i , skill ) ;
49675: LD_INT 0
49677: PPUSH
49678: LD_VAR 0 8
49682: PPUSH
49683: LD_VAR 0 4
49687: PPUSH
49688: CALL_OW 380
// un := CreateHuman ;
49692: LD_ADDR_VAR 0 14
49696: PUSH
49697: CALL_OW 44
49701: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49702: LD_ADDR_VAR 0 7
49706: PUSH
49707: LD_VAR 0 7
49711: PPUSH
49712: LD_INT 1
49714: PPUSH
49715: LD_VAR 0 14
49719: PPUSH
49720: CALL_OW 2
49724: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49725: LD_VAR 0 14
49729: PPUSH
49730: LD_VAR 0 12
49734: PUSH
49735: LD_INT 1
49737: ARRAY
49738: PPUSH
49739: CALL_OW 52
// end ;
49743: GO 49382
49745: POP
49746: POP
// end ;
49747: GO 48684
49749: POP
49750: POP
// result := result ^ buildings ;
49751: LD_ADDR_VAR 0 7
49755: PUSH
49756: LD_VAR 0 7
49760: PUSH
49761: LD_VAR 0 18
49765: ADD
49766: ST_TO_ADDR
// end else
49767: GO 49910
// begin for i = 1 to personel do
49769: LD_ADDR_VAR 0 8
49773: PUSH
49774: DOUBLE
49775: LD_INT 1
49777: DEC
49778: ST_TO_ADDR
49779: LD_VAR 0 6
49783: PUSH
49784: FOR_TO
49785: IFFALSE 49908
// begin if i > 4 then
49787: LD_VAR 0 8
49791: PUSH
49792: LD_INT 4
49794: GREATER
49795: IFFALSE 49799
// break ;
49797: GO 49908
// x := personel [ i ] ;
49799: LD_ADDR_VAR 0 13
49803: PUSH
49804: LD_VAR 0 6
49808: PUSH
49809: LD_VAR 0 8
49813: ARRAY
49814: ST_TO_ADDR
// if x = - 1 then
49815: LD_VAR 0 13
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: EQUAL
49824: IFFALSE 49828
// continue ;
49826: GO 49784
// PrepareHuman ( false , i , skill ) ;
49828: LD_INT 0
49830: PPUSH
49831: LD_VAR 0 8
49835: PPUSH
49836: LD_VAR 0 4
49840: PPUSH
49841: CALL_OW 380
// un := CreateHuman ;
49845: LD_ADDR_VAR 0 14
49849: PUSH
49850: CALL_OW 44
49854: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49855: LD_VAR 0 14
49859: PPUSH
49860: LD_VAR 0 1
49864: PPUSH
49865: CALL_OW 250
49869: PPUSH
49870: LD_VAR 0 1
49874: PPUSH
49875: CALL_OW 251
49879: PPUSH
49880: LD_INT 10
49882: PPUSH
49883: LD_INT 0
49885: PPUSH
49886: CALL_OW 50
// result := result ^ un ;
49890: LD_ADDR_VAR 0 7
49894: PUSH
49895: LD_VAR 0 7
49899: PUSH
49900: LD_VAR 0 14
49904: ADD
49905: ST_TO_ADDR
// end ;
49906: GO 49784
49908: POP
49909: POP
// end ; end ;
49910: LD_VAR 0 7
49914: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49915: LD_INT 0
49917: PPUSH
49918: PPUSH
49919: PPUSH
49920: PPUSH
49921: PPUSH
49922: PPUSH
49923: PPUSH
49924: PPUSH
49925: PPUSH
49926: PPUSH
49927: PPUSH
49928: PPUSH
49929: PPUSH
49930: PPUSH
49931: PPUSH
49932: PPUSH
// result := false ;
49933: LD_ADDR_VAR 0 3
49937: PUSH
49938: LD_INT 0
49940: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49941: LD_VAR 0 1
49945: NOT
49946: PUSH
49947: LD_VAR 0 1
49951: PPUSH
49952: CALL_OW 266
49956: PUSH
49957: LD_INT 32
49959: PUSH
49960: LD_INT 33
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: IN
49967: NOT
49968: OR
49969: IFFALSE 49973
// exit ;
49971: GO 51082
// nat := GetNation ( tower ) ;
49973: LD_ADDR_VAR 0 12
49977: PUSH
49978: LD_VAR 0 1
49982: PPUSH
49983: CALL_OW 248
49987: ST_TO_ADDR
// side := GetSide ( tower ) ;
49988: LD_ADDR_VAR 0 16
49992: PUSH
49993: LD_VAR 0 1
49997: PPUSH
49998: CALL_OW 255
50002: ST_TO_ADDR
// x := GetX ( tower ) ;
50003: LD_ADDR_VAR 0 10
50007: PUSH
50008: LD_VAR 0 1
50012: PPUSH
50013: CALL_OW 250
50017: ST_TO_ADDR
// y := GetY ( tower ) ;
50018: LD_ADDR_VAR 0 11
50022: PUSH
50023: LD_VAR 0 1
50027: PPUSH
50028: CALL_OW 251
50032: ST_TO_ADDR
// if not x or not y then
50033: LD_VAR 0 10
50037: NOT
50038: PUSH
50039: LD_VAR 0 11
50043: NOT
50044: OR
50045: IFFALSE 50049
// exit ;
50047: GO 51082
// weapon := 0 ;
50049: LD_ADDR_VAR 0 18
50053: PUSH
50054: LD_INT 0
50056: ST_TO_ADDR
// fac_list := [ ] ;
50057: LD_ADDR_VAR 0 17
50061: PUSH
50062: EMPTY
50063: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50064: LD_ADDR_VAR 0 6
50068: PUSH
50069: LD_VAR 0 1
50073: PPUSH
50074: CALL_OW 274
50078: PPUSH
50079: LD_VAR 0 2
50083: PPUSH
50084: LD_INT 0
50086: PPUSH
50087: CALL 47653 0 3
50091: PPUSH
50092: LD_INT 30
50094: PUSH
50095: LD_INT 3
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PPUSH
50102: CALL_OW 72
50106: ST_TO_ADDR
// if not factories then
50107: LD_VAR 0 6
50111: NOT
50112: IFFALSE 50116
// exit ;
50114: GO 51082
// for i in factories do
50116: LD_ADDR_VAR 0 8
50120: PUSH
50121: LD_VAR 0 6
50125: PUSH
50126: FOR_IN
50127: IFFALSE 50152
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50129: LD_ADDR_VAR 0 17
50133: PUSH
50134: LD_VAR 0 17
50138: PUSH
50139: LD_VAR 0 8
50143: PPUSH
50144: CALL_OW 478
50148: UNION
50149: ST_TO_ADDR
50150: GO 50126
50152: POP
50153: POP
// if not fac_list then
50154: LD_VAR 0 17
50158: NOT
50159: IFFALSE 50163
// exit ;
50161: GO 51082
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50163: LD_ADDR_VAR 0 5
50167: PUSH
50168: LD_INT 4
50170: PUSH
50171: LD_INT 5
50173: PUSH
50174: LD_INT 9
50176: PUSH
50177: LD_INT 10
50179: PUSH
50180: LD_INT 6
50182: PUSH
50183: LD_INT 7
50185: PUSH
50186: LD_INT 11
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 27
50200: PUSH
50201: LD_INT 28
50203: PUSH
50204: LD_INT 26
50206: PUSH
50207: LD_INT 30
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 43
50218: PUSH
50219: LD_INT 44
50221: PUSH
50222: LD_INT 46
50224: PUSH
50225: LD_INT 45
50227: PUSH
50228: LD_INT 47
50230: PUSH
50231: LD_INT 49
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: LIST
50246: PUSH
50247: LD_VAR 0 12
50251: ARRAY
50252: ST_TO_ADDR
// list := list isect fac_list ;
50253: LD_ADDR_VAR 0 5
50257: PUSH
50258: LD_VAR 0 5
50262: PUSH
50263: LD_VAR 0 17
50267: ISECT
50268: ST_TO_ADDR
// if not list then
50269: LD_VAR 0 5
50273: NOT
50274: IFFALSE 50278
// exit ;
50276: GO 51082
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50278: LD_VAR 0 12
50282: PUSH
50283: LD_INT 3
50285: EQUAL
50286: PUSH
50287: LD_INT 49
50289: PUSH
50290: LD_VAR 0 5
50294: IN
50295: AND
50296: PUSH
50297: LD_INT 31
50299: PPUSH
50300: LD_VAR 0 16
50304: PPUSH
50305: CALL_OW 321
50309: PUSH
50310: LD_INT 2
50312: EQUAL
50313: AND
50314: IFFALSE 50374
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50316: LD_INT 22
50318: PUSH
50319: LD_VAR 0 16
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 35
50330: PUSH
50331: LD_INT 49
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 91
50340: PUSH
50341: LD_VAR 0 1
50345: PUSH
50346: LD_INT 10
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: LIST
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: LIST
50358: PPUSH
50359: CALL_OW 69
50363: NOT
50364: IFFALSE 50374
// weapon := ru_time_lapser ;
50366: LD_ADDR_VAR 0 18
50370: PUSH
50371: LD_INT 49
50373: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50374: LD_VAR 0 12
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: IN
50389: PUSH
50390: LD_INT 11
50392: PUSH
50393: LD_VAR 0 5
50397: IN
50398: PUSH
50399: LD_INT 30
50401: PUSH
50402: LD_VAR 0 5
50406: IN
50407: OR
50408: AND
50409: PUSH
50410: LD_INT 6
50412: PPUSH
50413: LD_VAR 0 16
50417: PPUSH
50418: CALL_OW 321
50422: PUSH
50423: LD_INT 2
50425: EQUAL
50426: AND
50427: IFFALSE 50592
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50429: LD_INT 22
50431: PUSH
50432: LD_VAR 0 16
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: LD_INT 35
50446: PUSH
50447: LD_INT 11
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 35
50456: PUSH
50457: LD_INT 30
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 91
50471: PUSH
50472: LD_VAR 0 1
50476: PUSH
50477: LD_INT 18
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: LIST
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: LIST
50489: PPUSH
50490: CALL_OW 69
50494: NOT
50495: PUSH
50496: LD_INT 22
50498: PUSH
50499: LD_VAR 0 16
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 2
50510: PUSH
50511: LD_INT 30
50513: PUSH
50514: LD_INT 32
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 30
50523: PUSH
50524: LD_INT 33
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 91
50538: PUSH
50539: LD_VAR 0 1
50543: PUSH
50544: LD_INT 12
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: LIST
50551: PUSH
50552: EMPTY
50553: LIST
50554: LIST
50555: LIST
50556: PUSH
50557: EMPTY
50558: LIST
50559: PPUSH
50560: CALL_OW 69
50564: PUSH
50565: LD_INT 2
50567: GREATER
50568: AND
50569: IFFALSE 50592
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50571: LD_ADDR_VAR 0 18
50575: PUSH
50576: LD_INT 11
50578: PUSH
50579: LD_INT 30
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_VAR 0 12
50590: ARRAY
50591: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50592: LD_VAR 0 18
50596: NOT
50597: PUSH
50598: LD_INT 40
50600: PPUSH
50601: LD_VAR 0 16
50605: PPUSH
50606: CALL_OW 321
50610: PUSH
50611: LD_INT 2
50613: EQUAL
50614: AND
50615: PUSH
50616: LD_INT 7
50618: PUSH
50619: LD_VAR 0 5
50623: IN
50624: PUSH
50625: LD_INT 28
50627: PUSH
50628: LD_VAR 0 5
50632: IN
50633: OR
50634: PUSH
50635: LD_INT 45
50637: PUSH
50638: LD_VAR 0 5
50642: IN
50643: OR
50644: AND
50645: IFFALSE 50899
// begin hex := GetHexInfo ( x , y ) ;
50647: LD_ADDR_VAR 0 4
50651: PUSH
50652: LD_VAR 0 10
50656: PPUSH
50657: LD_VAR 0 11
50661: PPUSH
50662: CALL_OW 546
50666: ST_TO_ADDR
// if hex [ 1 ] then
50667: LD_VAR 0 4
50671: PUSH
50672: LD_INT 1
50674: ARRAY
50675: IFFALSE 50679
// exit ;
50677: GO 51082
// height := hex [ 2 ] ;
50679: LD_ADDR_VAR 0 15
50683: PUSH
50684: LD_VAR 0 4
50688: PUSH
50689: LD_INT 2
50691: ARRAY
50692: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50693: LD_ADDR_VAR 0 14
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: LD_INT 2
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: LD_INT 5
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: ST_TO_ADDR
// for i in tmp do
50716: LD_ADDR_VAR 0 8
50720: PUSH
50721: LD_VAR 0 14
50725: PUSH
50726: FOR_IN
50727: IFFALSE 50897
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50729: LD_ADDR_VAR 0 9
50733: PUSH
50734: LD_VAR 0 10
50738: PPUSH
50739: LD_VAR 0 8
50743: PPUSH
50744: LD_INT 5
50746: PPUSH
50747: CALL_OW 272
50751: PUSH
50752: LD_VAR 0 11
50756: PPUSH
50757: LD_VAR 0 8
50761: PPUSH
50762: LD_INT 5
50764: PPUSH
50765: CALL_OW 273
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50774: LD_VAR 0 9
50778: PUSH
50779: LD_INT 1
50781: ARRAY
50782: PPUSH
50783: LD_VAR 0 9
50787: PUSH
50788: LD_INT 2
50790: ARRAY
50791: PPUSH
50792: CALL_OW 488
50796: IFFALSE 50895
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50798: LD_ADDR_VAR 0 4
50802: PUSH
50803: LD_VAR 0 9
50807: PUSH
50808: LD_INT 1
50810: ARRAY
50811: PPUSH
50812: LD_VAR 0 9
50816: PUSH
50817: LD_INT 2
50819: ARRAY
50820: PPUSH
50821: CALL_OW 546
50825: ST_TO_ADDR
// if hex [ 1 ] then
50826: LD_VAR 0 4
50830: PUSH
50831: LD_INT 1
50833: ARRAY
50834: IFFALSE 50838
// continue ;
50836: GO 50726
// h := hex [ 2 ] ;
50838: LD_ADDR_VAR 0 13
50842: PUSH
50843: LD_VAR 0 4
50847: PUSH
50848: LD_INT 2
50850: ARRAY
50851: ST_TO_ADDR
// if h + 7 < height then
50852: LD_VAR 0 13
50856: PUSH
50857: LD_INT 7
50859: PLUS
50860: PUSH
50861: LD_VAR 0 15
50865: LESS
50866: IFFALSE 50895
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50868: LD_ADDR_VAR 0 18
50872: PUSH
50873: LD_INT 7
50875: PUSH
50876: LD_INT 28
50878: PUSH
50879: LD_INT 45
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: LIST
50886: PUSH
50887: LD_VAR 0 12
50891: ARRAY
50892: ST_TO_ADDR
// break ;
50893: GO 50897
// end ; end ; end ;
50895: GO 50726
50897: POP
50898: POP
// end ; if not weapon then
50899: LD_VAR 0 18
50903: NOT
50904: IFFALSE 50964
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50906: LD_ADDR_VAR 0 5
50910: PUSH
50911: LD_VAR 0 5
50915: PUSH
50916: LD_INT 11
50918: PUSH
50919: LD_INT 30
50921: PUSH
50922: LD_INT 49
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: LIST
50929: DIFF
50930: ST_TO_ADDR
// if not list then
50931: LD_VAR 0 5
50935: NOT
50936: IFFALSE 50940
// exit ;
50938: GO 51082
// weapon := list [ rand ( 1 , list ) ] ;
50940: LD_ADDR_VAR 0 18
50944: PUSH
50945: LD_VAR 0 5
50949: PUSH
50950: LD_INT 1
50952: PPUSH
50953: LD_VAR 0 5
50957: PPUSH
50958: CALL_OW 12
50962: ARRAY
50963: ST_TO_ADDR
// end ; if weapon then
50964: LD_VAR 0 18
50968: IFFALSE 51082
// begin tmp := CostOfWeapon ( weapon ) ;
50970: LD_ADDR_VAR 0 14
50974: PUSH
50975: LD_VAR 0 18
50979: PPUSH
50980: CALL_OW 451
50984: ST_TO_ADDR
// j := GetBase ( tower ) ;
50985: LD_ADDR_VAR 0 9
50989: PUSH
50990: LD_VAR 0 1
50994: PPUSH
50995: CALL_OW 274
50999: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51000: LD_VAR 0 9
51004: PPUSH
51005: LD_INT 1
51007: PPUSH
51008: CALL_OW 275
51012: PUSH
51013: LD_VAR 0 14
51017: PUSH
51018: LD_INT 1
51020: ARRAY
51021: GREATEREQUAL
51022: PUSH
51023: LD_VAR 0 9
51027: PPUSH
51028: LD_INT 2
51030: PPUSH
51031: CALL_OW 275
51035: PUSH
51036: LD_VAR 0 14
51040: PUSH
51041: LD_INT 2
51043: ARRAY
51044: GREATEREQUAL
51045: AND
51046: PUSH
51047: LD_VAR 0 9
51051: PPUSH
51052: LD_INT 3
51054: PPUSH
51055: CALL_OW 275
51059: PUSH
51060: LD_VAR 0 14
51064: PUSH
51065: LD_INT 3
51067: ARRAY
51068: GREATEREQUAL
51069: AND
51070: IFFALSE 51082
// result := weapon ;
51072: LD_ADDR_VAR 0 3
51076: PUSH
51077: LD_VAR 0 18
51081: ST_TO_ADDR
// end ; end ;
51082: LD_VAR 0 3
51086: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51087: LD_INT 0
51089: PPUSH
51090: PPUSH
// result := true ;
51091: LD_ADDR_VAR 0 3
51095: PUSH
51096: LD_INT 1
51098: ST_TO_ADDR
// if array1 = array2 then
51099: LD_VAR 0 1
51103: PUSH
51104: LD_VAR 0 2
51108: EQUAL
51109: IFFALSE 51169
// begin for i = 1 to array1 do
51111: LD_ADDR_VAR 0 4
51115: PUSH
51116: DOUBLE
51117: LD_INT 1
51119: DEC
51120: ST_TO_ADDR
51121: LD_VAR 0 1
51125: PUSH
51126: FOR_TO
51127: IFFALSE 51165
// if array1 [ i ] <> array2 [ i ] then
51129: LD_VAR 0 1
51133: PUSH
51134: LD_VAR 0 4
51138: ARRAY
51139: PUSH
51140: LD_VAR 0 2
51144: PUSH
51145: LD_VAR 0 4
51149: ARRAY
51150: NONEQUAL
51151: IFFALSE 51163
// begin result := false ;
51153: LD_ADDR_VAR 0 3
51157: PUSH
51158: LD_INT 0
51160: ST_TO_ADDR
// break ;
51161: GO 51165
// end ;
51163: GO 51126
51165: POP
51166: POP
// end else
51167: GO 51177
// result := false ;
51169: LD_ADDR_VAR 0 3
51173: PUSH
51174: LD_INT 0
51176: ST_TO_ADDR
// end ;
51177: LD_VAR 0 3
51181: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51182: LD_INT 0
51184: PPUSH
51185: PPUSH
// if not array1 or not array2 then
51186: LD_VAR 0 1
51190: NOT
51191: PUSH
51192: LD_VAR 0 2
51196: NOT
51197: OR
51198: IFFALSE 51202
// exit ;
51200: GO 51266
// result := true ;
51202: LD_ADDR_VAR 0 3
51206: PUSH
51207: LD_INT 1
51209: ST_TO_ADDR
// for i = 1 to array1 do
51210: LD_ADDR_VAR 0 4
51214: PUSH
51215: DOUBLE
51216: LD_INT 1
51218: DEC
51219: ST_TO_ADDR
51220: LD_VAR 0 1
51224: PUSH
51225: FOR_TO
51226: IFFALSE 51264
// if array1 [ i ] <> array2 [ i ] then
51228: LD_VAR 0 1
51232: PUSH
51233: LD_VAR 0 4
51237: ARRAY
51238: PUSH
51239: LD_VAR 0 2
51243: PUSH
51244: LD_VAR 0 4
51248: ARRAY
51249: NONEQUAL
51250: IFFALSE 51262
// begin result := false ;
51252: LD_ADDR_VAR 0 3
51256: PUSH
51257: LD_INT 0
51259: ST_TO_ADDR
// break ;
51260: GO 51264
// end ;
51262: GO 51225
51264: POP
51265: POP
// end ;
51266: LD_VAR 0 3
51270: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51271: LD_INT 0
51273: PPUSH
51274: PPUSH
51275: PPUSH
// pom := GetBase ( fac ) ;
51276: LD_ADDR_VAR 0 5
51280: PUSH
51281: LD_VAR 0 1
51285: PPUSH
51286: CALL_OW 274
51290: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51291: LD_ADDR_VAR 0 4
51295: PUSH
51296: LD_VAR 0 2
51300: PUSH
51301: LD_INT 1
51303: ARRAY
51304: PPUSH
51305: LD_VAR 0 2
51309: PUSH
51310: LD_INT 2
51312: ARRAY
51313: PPUSH
51314: LD_VAR 0 2
51318: PUSH
51319: LD_INT 3
51321: ARRAY
51322: PPUSH
51323: LD_VAR 0 2
51327: PUSH
51328: LD_INT 4
51330: ARRAY
51331: PPUSH
51332: CALL_OW 449
51336: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51337: LD_ADDR_VAR 0 3
51341: PUSH
51342: LD_VAR 0 5
51346: PPUSH
51347: LD_INT 1
51349: PPUSH
51350: CALL_OW 275
51354: PUSH
51355: LD_VAR 0 4
51359: PUSH
51360: LD_INT 1
51362: ARRAY
51363: GREATEREQUAL
51364: PUSH
51365: LD_VAR 0 5
51369: PPUSH
51370: LD_INT 2
51372: PPUSH
51373: CALL_OW 275
51377: PUSH
51378: LD_VAR 0 4
51382: PUSH
51383: LD_INT 2
51385: ARRAY
51386: GREATEREQUAL
51387: AND
51388: PUSH
51389: LD_VAR 0 5
51393: PPUSH
51394: LD_INT 3
51396: PPUSH
51397: CALL_OW 275
51401: PUSH
51402: LD_VAR 0 4
51406: PUSH
51407: LD_INT 3
51409: ARRAY
51410: GREATEREQUAL
51411: AND
51412: ST_TO_ADDR
// end ;
51413: LD_VAR 0 3
51417: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51418: LD_INT 0
51420: PPUSH
51421: PPUSH
51422: PPUSH
51423: PPUSH
// pom := GetBase ( building ) ;
51424: LD_ADDR_VAR 0 3
51428: PUSH
51429: LD_VAR 0 1
51433: PPUSH
51434: CALL_OW 274
51438: ST_TO_ADDR
// if not pom then
51439: LD_VAR 0 3
51443: NOT
51444: IFFALSE 51448
// exit ;
51446: GO 51618
// btype := GetBType ( building ) ;
51448: LD_ADDR_VAR 0 5
51452: PUSH
51453: LD_VAR 0 1
51457: PPUSH
51458: CALL_OW 266
51462: ST_TO_ADDR
// if btype = b_armoury then
51463: LD_VAR 0 5
51467: PUSH
51468: LD_INT 4
51470: EQUAL
51471: IFFALSE 51481
// btype := b_barracks ;
51473: LD_ADDR_VAR 0 5
51477: PUSH
51478: LD_INT 5
51480: ST_TO_ADDR
// if btype = b_depot then
51481: LD_VAR 0 5
51485: PUSH
51486: LD_INT 0
51488: EQUAL
51489: IFFALSE 51499
// btype := b_warehouse ;
51491: LD_ADDR_VAR 0 5
51495: PUSH
51496: LD_INT 1
51498: ST_TO_ADDR
// if btype = b_workshop then
51499: LD_VAR 0 5
51503: PUSH
51504: LD_INT 2
51506: EQUAL
51507: IFFALSE 51517
// btype := b_factory ;
51509: LD_ADDR_VAR 0 5
51513: PUSH
51514: LD_INT 3
51516: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51517: LD_ADDR_VAR 0 4
51521: PUSH
51522: LD_VAR 0 5
51526: PPUSH
51527: LD_VAR 0 1
51531: PPUSH
51532: CALL_OW 248
51536: PPUSH
51537: CALL_OW 450
51541: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51542: LD_ADDR_VAR 0 2
51546: PUSH
51547: LD_VAR 0 3
51551: PPUSH
51552: LD_INT 1
51554: PPUSH
51555: CALL_OW 275
51559: PUSH
51560: LD_VAR 0 4
51564: PUSH
51565: LD_INT 1
51567: ARRAY
51568: GREATEREQUAL
51569: PUSH
51570: LD_VAR 0 3
51574: PPUSH
51575: LD_INT 2
51577: PPUSH
51578: CALL_OW 275
51582: PUSH
51583: LD_VAR 0 4
51587: PUSH
51588: LD_INT 2
51590: ARRAY
51591: GREATEREQUAL
51592: AND
51593: PUSH
51594: LD_VAR 0 3
51598: PPUSH
51599: LD_INT 3
51601: PPUSH
51602: CALL_OW 275
51606: PUSH
51607: LD_VAR 0 4
51611: PUSH
51612: LD_INT 3
51614: ARRAY
51615: GREATEREQUAL
51616: AND
51617: ST_TO_ADDR
// end ;
51618: LD_VAR 0 2
51622: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51623: LD_INT 0
51625: PPUSH
51626: PPUSH
51627: PPUSH
// pom := GetBase ( building ) ;
51628: LD_ADDR_VAR 0 4
51632: PUSH
51633: LD_VAR 0 1
51637: PPUSH
51638: CALL_OW 274
51642: ST_TO_ADDR
// if not pom then
51643: LD_VAR 0 4
51647: NOT
51648: IFFALSE 51652
// exit ;
51650: GO 51753
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51652: LD_ADDR_VAR 0 5
51656: PUSH
51657: LD_VAR 0 2
51661: PPUSH
51662: LD_VAR 0 1
51666: PPUSH
51667: CALL_OW 248
51671: PPUSH
51672: CALL_OW 450
51676: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51677: LD_ADDR_VAR 0 3
51681: PUSH
51682: LD_VAR 0 4
51686: PPUSH
51687: LD_INT 1
51689: PPUSH
51690: CALL_OW 275
51694: PUSH
51695: LD_VAR 0 5
51699: PUSH
51700: LD_INT 1
51702: ARRAY
51703: GREATEREQUAL
51704: PUSH
51705: LD_VAR 0 4
51709: PPUSH
51710: LD_INT 2
51712: PPUSH
51713: CALL_OW 275
51717: PUSH
51718: LD_VAR 0 5
51722: PUSH
51723: LD_INT 2
51725: ARRAY
51726: GREATEREQUAL
51727: AND
51728: PUSH
51729: LD_VAR 0 4
51733: PPUSH
51734: LD_INT 3
51736: PPUSH
51737: CALL_OW 275
51741: PUSH
51742: LD_VAR 0 5
51746: PUSH
51747: LD_INT 3
51749: ARRAY
51750: GREATEREQUAL
51751: AND
51752: ST_TO_ADDR
// end ;
51753: LD_VAR 0 3
51757: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51758: LD_INT 0
51760: PPUSH
51761: PPUSH
51762: PPUSH
51763: PPUSH
51764: PPUSH
51765: PPUSH
51766: PPUSH
51767: PPUSH
51768: PPUSH
51769: PPUSH
51770: PPUSH
// result := false ;
51771: LD_ADDR_VAR 0 8
51775: PUSH
51776: LD_INT 0
51778: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51779: LD_VAR 0 5
51783: NOT
51784: PUSH
51785: LD_VAR 0 1
51789: NOT
51790: OR
51791: PUSH
51792: LD_VAR 0 2
51796: NOT
51797: OR
51798: PUSH
51799: LD_VAR 0 3
51803: NOT
51804: OR
51805: IFFALSE 51809
// exit ;
51807: GO 52623
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51809: LD_ADDR_VAR 0 14
51813: PUSH
51814: LD_VAR 0 1
51818: PPUSH
51819: LD_VAR 0 2
51823: PPUSH
51824: LD_VAR 0 3
51828: PPUSH
51829: LD_VAR 0 4
51833: PPUSH
51834: LD_VAR 0 5
51838: PUSH
51839: LD_INT 1
51841: ARRAY
51842: PPUSH
51843: CALL_OW 248
51847: PPUSH
51848: LD_INT 0
51850: PPUSH
51851: CALL 53876 0 6
51855: ST_TO_ADDR
// if not hexes then
51856: LD_VAR 0 14
51860: NOT
51861: IFFALSE 51865
// exit ;
51863: GO 52623
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51865: LD_ADDR_VAR 0 17
51869: PUSH
51870: LD_VAR 0 5
51874: PPUSH
51875: LD_INT 22
51877: PUSH
51878: LD_VAR 0 13
51882: PPUSH
51883: CALL_OW 255
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: LD_INT 30
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 30
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: EMPTY
51916: LIST
51917: LIST
51918: LIST
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PPUSH
51924: CALL_OW 72
51928: ST_TO_ADDR
// for i = 1 to hexes do
51929: LD_ADDR_VAR 0 9
51933: PUSH
51934: DOUBLE
51935: LD_INT 1
51937: DEC
51938: ST_TO_ADDR
51939: LD_VAR 0 14
51943: PUSH
51944: FOR_TO
51945: IFFALSE 52621
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51947: LD_ADDR_VAR 0 13
51951: PUSH
51952: LD_VAR 0 14
51956: PUSH
51957: LD_VAR 0 9
51961: ARRAY
51962: PUSH
51963: LD_INT 1
51965: ARRAY
51966: PPUSH
51967: LD_VAR 0 14
51971: PUSH
51972: LD_VAR 0 9
51976: ARRAY
51977: PUSH
51978: LD_INT 2
51980: ARRAY
51981: PPUSH
51982: CALL_OW 428
51986: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51987: LD_VAR 0 14
51991: PUSH
51992: LD_VAR 0 9
51996: ARRAY
51997: PUSH
51998: LD_INT 1
52000: ARRAY
52001: PPUSH
52002: LD_VAR 0 14
52006: PUSH
52007: LD_VAR 0 9
52011: ARRAY
52012: PUSH
52013: LD_INT 2
52015: ARRAY
52016: PPUSH
52017: CALL_OW 351
52021: PUSH
52022: LD_VAR 0 14
52026: PUSH
52027: LD_VAR 0 9
52031: ARRAY
52032: PUSH
52033: LD_INT 1
52035: ARRAY
52036: PPUSH
52037: LD_VAR 0 14
52041: PUSH
52042: LD_VAR 0 9
52046: ARRAY
52047: PUSH
52048: LD_INT 2
52050: ARRAY
52051: PPUSH
52052: CALL_OW 488
52056: NOT
52057: OR
52058: PUSH
52059: LD_VAR 0 13
52063: PPUSH
52064: CALL_OW 247
52068: PUSH
52069: LD_INT 3
52071: EQUAL
52072: OR
52073: IFFALSE 52079
// exit ;
52075: POP
52076: POP
52077: GO 52623
// if not tmp then
52079: LD_VAR 0 13
52083: NOT
52084: IFFALSE 52088
// continue ;
52086: GO 51944
// result := true ;
52088: LD_ADDR_VAR 0 8
52092: PUSH
52093: LD_INT 1
52095: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52096: LD_VAR 0 6
52100: PUSH
52101: LD_VAR 0 13
52105: PPUSH
52106: CALL_OW 247
52110: PUSH
52111: LD_INT 2
52113: EQUAL
52114: AND
52115: PUSH
52116: LD_VAR 0 13
52120: PPUSH
52121: CALL_OW 263
52125: PUSH
52126: LD_INT 1
52128: EQUAL
52129: AND
52130: IFFALSE 52294
// begin if IsDrivenBy ( tmp ) then
52132: LD_VAR 0 13
52136: PPUSH
52137: CALL_OW 311
52141: IFFALSE 52145
// continue ;
52143: GO 51944
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52145: LD_VAR 0 6
52149: PPUSH
52150: LD_INT 3
52152: PUSH
52153: LD_INT 60
52155: PUSH
52156: EMPTY
52157: LIST
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 3
52165: PUSH
52166: LD_INT 55
52168: PUSH
52169: EMPTY
52170: LIST
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PPUSH
52180: CALL_OW 72
52184: IFFALSE 52292
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52186: LD_ADDR_VAR 0 18
52190: PUSH
52191: LD_VAR 0 6
52195: PPUSH
52196: LD_INT 3
52198: PUSH
52199: LD_INT 60
52201: PUSH
52202: EMPTY
52203: LIST
52204: PUSH
52205: EMPTY
52206: LIST
52207: LIST
52208: PUSH
52209: LD_INT 3
52211: PUSH
52212: LD_INT 55
52214: PUSH
52215: EMPTY
52216: LIST
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PPUSH
52226: CALL_OW 72
52230: PUSH
52231: LD_INT 1
52233: ARRAY
52234: ST_TO_ADDR
// if IsInUnit ( driver ) then
52235: LD_VAR 0 18
52239: PPUSH
52240: CALL_OW 310
52244: IFFALSE 52255
// ComExit ( driver ) ;
52246: LD_VAR 0 18
52250: PPUSH
52251: CALL 77668 0 1
// AddComEnterUnit ( driver , tmp ) ;
52255: LD_VAR 0 18
52259: PPUSH
52260: LD_VAR 0 13
52264: PPUSH
52265: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52269: LD_VAR 0 18
52273: PPUSH
52274: LD_VAR 0 7
52278: PPUSH
52279: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52283: LD_VAR 0 18
52287: PPUSH
52288: CALL_OW 181
// end ; continue ;
52292: GO 51944
// end ; if not cleaners or not tmp in cleaners then
52294: LD_VAR 0 6
52298: NOT
52299: PUSH
52300: LD_VAR 0 13
52304: PUSH
52305: LD_VAR 0 6
52309: IN
52310: NOT
52311: OR
52312: IFFALSE 52619
// begin if dep then
52314: LD_VAR 0 17
52318: IFFALSE 52454
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52320: LD_ADDR_VAR 0 16
52324: PUSH
52325: LD_VAR 0 17
52329: PUSH
52330: LD_INT 1
52332: ARRAY
52333: PPUSH
52334: CALL_OW 250
52338: PPUSH
52339: LD_VAR 0 17
52343: PUSH
52344: LD_INT 1
52346: ARRAY
52347: PPUSH
52348: CALL_OW 254
52352: PPUSH
52353: LD_INT 5
52355: PPUSH
52356: CALL_OW 272
52360: PUSH
52361: LD_VAR 0 17
52365: PUSH
52366: LD_INT 1
52368: ARRAY
52369: PPUSH
52370: CALL_OW 251
52374: PPUSH
52375: LD_VAR 0 17
52379: PUSH
52380: LD_INT 1
52382: ARRAY
52383: PPUSH
52384: CALL_OW 254
52388: PPUSH
52389: LD_INT 5
52391: PPUSH
52392: CALL_OW 273
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52401: LD_VAR 0 16
52405: PUSH
52406: LD_INT 1
52408: ARRAY
52409: PPUSH
52410: LD_VAR 0 16
52414: PUSH
52415: LD_INT 2
52417: ARRAY
52418: PPUSH
52419: CALL_OW 488
52423: IFFALSE 52454
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52425: LD_VAR 0 13
52429: PPUSH
52430: LD_VAR 0 16
52434: PUSH
52435: LD_INT 1
52437: ARRAY
52438: PPUSH
52439: LD_VAR 0 16
52443: PUSH
52444: LD_INT 2
52446: ARRAY
52447: PPUSH
52448: CALL_OW 111
// continue ;
52452: GO 51944
// end ; end ; r := GetDir ( tmp ) ;
52454: LD_ADDR_VAR 0 15
52458: PUSH
52459: LD_VAR 0 13
52463: PPUSH
52464: CALL_OW 254
52468: ST_TO_ADDR
// if r = 5 then
52469: LD_VAR 0 15
52473: PUSH
52474: LD_INT 5
52476: EQUAL
52477: IFFALSE 52487
// r := 0 ;
52479: LD_ADDR_VAR 0 15
52483: PUSH
52484: LD_INT 0
52486: ST_TO_ADDR
// for j = r to 5 do
52487: LD_ADDR_VAR 0 10
52491: PUSH
52492: DOUBLE
52493: LD_VAR 0 15
52497: DEC
52498: ST_TO_ADDR
52499: LD_INT 5
52501: PUSH
52502: FOR_TO
52503: IFFALSE 52617
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52505: LD_ADDR_VAR 0 11
52509: PUSH
52510: LD_VAR 0 13
52514: PPUSH
52515: CALL_OW 250
52519: PPUSH
52520: LD_VAR 0 10
52524: PPUSH
52525: LD_INT 2
52527: PPUSH
52528: CALL_OW 272
52532: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52533: LD_ADDR_VAR 0 12
52537: PUSH
52538: LD_VAR 0 13
52542: PPUSH
52543: CALL_OW 251
52547: PPUSH
52548: LD_VAR 0 10
52552: PPUSH
52553: LD_INT 2
52555: PPUSH
52556: CALL_OW 273
52560: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52561: LD_VAR 0 11
52565: PPUSH
52566: LD_VAR 0 12
52570: PPUSH
52571: CALL_OW 488
52575: PUSH
52576: LD_VAR 0 11
52580: PPUSH
52581: LD_VAR 0 12
52585: PPUSH
52586: CALL_OW 428
52590: NOT
52591: AND
52592: IFFALSE 52615
// begin ComMoveXY ( tmp , _x , _y ) ;
52594: LD_VAR 0 13
52598: PPUSH
52599: LD_VAR 0 11
52603: PPUSH
52604: LD_VAR 0 12
52608: PPUSH
52609: CALL_OW 111
// break ;
52613: GO 52617
// end ; end ;
52615: GO 52502
52617: POP
52618: POP
// end ; end ;
52619: GO 51944
52621: POP
52622: POP
// end ;
52623: LD_VAR 0 8
52627: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52628: LD_INT 0
52630: PPUSH
// result := true ;
52631: LD_ADDR_VAR 0 3
52635: PUSH
52636: LD_INT 1
52638: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52639: LD_VAR 0 2
52643: PUSH
52644: LD_INT 24
52646: DOUBLE
52647: EQUAL
52648: IFTRUE 52658
52650: LD_INT 33
52652: DOUBLE
52653: EQUAL
52654: IFTRUE 52658
52656: GO 52683
52658: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52659: LD_ADDR_VAR 0 3
52663: PUSH
52664: LD_INT 32
52666: PPUSH
52667: LD_VAR 0 1
52671: PPUSH
52672: CALL_OW 321
52676: PUSH
52677: LD_INT 2
52679: EQUAL
52680: ST_TO_ADDR
52681: GO 52999
52683: LD_INT 20
52685: DOUBLE
52686: EQUAL
52687: IFTRUE 52691
52689: GO 52716
52691: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52692: LD_ADDR_VAR 0 3
52696: PUSH
52697: LD_INT 6
52699: PPUSH
52700: LD_VAR 0 1
52704: PPUSH
52705: CALL_OW 321
52709: PUSH
52710: LD_INT 2
52712: EQUAL
52713: ST_TO_ADDR
52714: GO 52999
52716: LD_INT 22
52718: DOUBLE
52719: EQUAL
52720: IFTRUE 52730
52722: LD_INT 36
52724: DOUBLE
52725: EQUAL
52726: IFTRUE 52730
52728: GO 52755
52730: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52731: LD_ADDR_VAR 0 3
52735: PUSH
52736: LD_INT 15
52738: PPUSH
52739: LD_VAR 0 1
52743: PPUSH
52744: CALL_OW 321
52748: PUSH
52749: LD_INT 2
52751: EQUAL
52752: ST_TO_ADDR
52753: GO 52999
52755: LD_INT 30
52757: DOUBLE
52758: EQUAL
52759: IFTRUE 52763
52761: GO 52788
52763: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52764: LD_ADDR_VAR 0 3
52768: PUSH
52769: LD_INT 20
52771: PPUSH
52772: LD_VAR 0 1
52776: PPUSH
52777: CALL_OW 321
52781: PUSH
52782: LD_INT 2
52784: EQUAL
52785: ST_TO_ADDR
52786: GO 52999
52788: LD_INT 28
52790: DOUBLE
52791: EQUAL
52792: IFTRUE 52802
52794: LD_INT 21
52796: DOUBLE
52797: EQUAL
52798: IFTRUE 52802
52800: GO 52827
52802: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52803: LD_ADDR_VAR 0 3
52807: PUSH
52808: LD_INT 21
52810: PPUSH
52811: LD_VAR 0 1
52815: PPUSH
52816: CALL_OW 321
52820: PUSH
52821: LD_INT 2
52823: EQUAL
52824: ST_TO_ADDR
52825: GO 52999
52827: LD_INT 16
52829: DOUBLE
52830: EQUAL
52831: IFTRUE 52835
52833: GO 52860
52835: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52836: LD_ADDR_VAR 0 3
52840: PUSH
52841: LD_INT 84
52843: PPUSH
52844: LD_VAR 0 1
52848: PPUSH
52849: CALL_OW 321
52853: PUSH
52854: LD_INT 2
52856: EQUAL
52857: ST_TO_ADDR
52858: GO 52999
52860: LD_INT 19
52862: DOUBLE
52863: EQUAL
52864: IFTRUE 52874
52866: LD_INT 23
52868: DOUBLE
52869: EQUAL
52870: IFTRUE 52874
52872: GO 52899
52874: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52875: LD_ADDR_VAR 0 3
52879: PUSH
52880: LD_INT 83
52882: PPUSH
52883: LD_VAR 0 1
52887: PPUSH
52888: CALL_OW 321
52892: PUSH
52893: LD_INT 2
52895: EQUAL
52896: ST_TO_ADDR
52897: GO 52999
52899: LD_INT 17
52901: DOUBLE
52902: EQUAL
52903: IFTRUE 52907
52905: GO 52932
52907: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52908: LD_ADDR_VAR 0 3
52912: PUSH
52913: LD_INT 39
52915: PPUSH
52916: LD_VAR 0 1
52920: PPUSH
52921: CALL_OW 321
52925: PUSH
52926: LD_INT 2
52928: EQUAL
52929: ST_TO_ADDR
52930: GO 52999
52932: LD_INT 18
52934: DOUBLE
52935: EQUAL
52936: IFTRUE 52940
52938: GO 52965
52940: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52941: LD_ADDR_VAR 0 3
52945: PUSH
52946: LD_INT 40
52948: PPUSH
52949: LD_VAR 0 1
52953: PPUSH
52954: CALL_OW 321
52958: PUSH
52959: LD_INT 2
52961: EQUAL
52962: ST_TO_ADDR
52963: GO 52999
52965: LD_INT 27
52967: DOUBLE
52968: EQUAL
52969: IFTRUE 52973
52971: GO 52998
52973: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52974: LD_ADDR_VAR 0 3
52978: PUSH
52979: LD_INT 35
52981: PPUSH
52982: LD_VAR 0 1
52986: PPUSH
52987: CALL_OW 321
52991: PUSH
52992: LD_INT 2
52994: EQUAL
52995: ST_TO_ADDR
52996: GO 52999
52998: POP
// end ;
52999: LD_VAR 0 3
53003: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53004: LD_INT 0
53006: PPUSH
53007: PPUSH
53008: PPUSH
53009: PPUSH
53010: PPUSH
53011: PPUSH
53012: PPUSH
53013: PPUSH
53014: PPUSH
53015: PPUSH
53016: PPUSH
// result := false ;
53017: LD_ADDR_VAR 0 6
53021: PUSH
53022: LD_INT 0
53024: ST_TO_ADDR
// if btype = b_depot then
53025: LD_VAR 0 2
53029: PUSH
53030: LD_INT 0
53032: EQUAL
53033: IFFALSE 53045
// begin result := true ;
53035: LD_ADDR_VAR 0 6
53039: PUSH
53040: LD_INT 1
53042: ST_TO_ADDR
// exit ;
53043: GO 53871
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53045: LD_VAR 0 1
53049: NOT
53050: PUSH
53051: LD_VAR 0 1
53055: PPUSH
53056: CALL_OW 266
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: LD_INT 1
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: IN
53071: NOT
53072: OR
53073: PUSH
53074: LD_VAR 0 2
53078: NOT
53079: OR
53080: PUSH
53081: LD_VAR 0 5
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 2
53094: PUSH
53095: LD_INT 3
53097: PUSH
53098: LD_INT 4
53100: PUSH
53101: LD_INT 5
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: IN
53112: NOT
53113: OR
53114: PUSH
53115: LD_VAR 0 3
53119: PPUSH
53120: LD_VAR 0 4
53124: PPUSH
53125: CALL_OW 488
53129: NOT
53130: OR
53131: IFFALSE 53135
// exit ;
53133: GO 53871
// side := GetSide ( depot ) ;
53135: LD_ADDR_VAR 0 9
53139: PUSH
53140: LD_VAR 0 1
53144: PPUSH
53145: CALL_OW 255
53149: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53150: LD_VAR 0 9
53154: PPUSH
53155: LD_VAR 0 2
53159: PPUSH
53160: CALL 52628 0 2
53164: NOT
53165: IFFALSE 53169
// exit ;
53167: GO 53871
// pom := GetBase ( depot ) ;
53169: LD_ADDR_VAR 0 10
53173: PUSH
53174: LD_VAR 0 1
53178: PPUSH
53179: CALL_OW 274
53183: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53184: LD_ADDR_VAR 0 11
53188: PUSH
53189: LD_VAR 0 2
53193: PPUSH
53194: LD_VAR 0 1
53198: PPUSH
53199: CALL_OW 248
53203: PPUSH
53204: CALL_OW 450
53208: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53209: LD_VAR 0 10
53213: PPUSH
53214: LD_INT 1
53216: PPUSH
53217: CALL_OW 275
53221: PUSH
53222: LD_VAR 0 11
53226: PUSH
53227: LD_INT 1
53229: ARRAY
53230: GREATEREQUAL
53231: PUSH
53232: LD_VAR 0 10
53236: PPUSH
53237: LD_INT 2
53239: PPUSH
53240: CALL_OW 275
53244: PUSH
53245: LD_VAR 0 11
53249: PUSH
53250: LD_INT 2
53252: ARRAY
53253: GREATEREQUAL
53254: AND
53255: PUSH
53256: LD_VAR 0 10
53260: PPUSH
53261: LD_INT 3
53263: PPUSH
53264: CALL_OW 275
53268: PUSH
53269: LD_VAR 0 11
53273: PUSH
53274: LD_INT 3
53276: ARRAY
53277: GREATEREQUAL
53278: AND
53279: NOT
53280: IFFALSE 53284
// exit ;
53282: GO 53871
// if GetBType ( depot ) = b_depot then
53284: LD_VAR 0 1
53288: PPUSH
53289: CALL_OW 266
53293: PUSH
53294: LD_INT 0
53296: EQUAL
53297: IFFALSE 53309
// dist := 28 else
53299: LD_ADDR_VAR 0 14
53303: PUSH
53304: LD_INT 28
53306: ST_TO_ADDR
53307: GO 53317
// dist := 36 ;
53309: LD_ADDR_VAR 0 14
53313: PUSH
53314: LD_INT 36
53316: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53317: LD_VAR 0 1
53321: PPUSH
53322: LD_VAR 0 3
53326: PPUSH
53327: LD_VAR 0 4
53331: PPUSH
53332: CALL_OW 297
53336: PUSH
53337: LD_VAR 0 14
53341: GREATER
53342: IFFALSE 53346
// exit ;
53344: GO 53871
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53346: LD_ADDR_VAR 0 12
53350: PUSH
53351: LD_VAR 0 2
53355: PPUSH
53356: LD_VAR 0 3
53360: PPUSH
53361: LD_VAR 0 4
53365: PPUSH
53366: LD_VAR 0 5
53370: PPUSH
53371: LD_VAR 0 1
53375: PPUSH
53376: CALL_OW 248
53380: PPUSH
53381: LD_INT 0
53383: PPUSH
53384: CALL 53876 0 6
53388: ST_TO_ADDR
// if not hexes then
53389: LD_VAR 0 12
53393: NOT
53394: IFFALSE 53398
// exit ;
53396: GO 53871
// hex := GetHexInfo ( x , y ) ;
53398: LD_ADDR_VAR 0 15
53402: PUSH
53403: LD_VAR 0 3
53407: PPUSH
53408: LD_VAR 0 4
53412: PPUSH
53413: CALL_OW 546
53417: ST_TO_ADDR
// if hex [ 1 ] then
53418: LD_VAR 0 15
53422: PUSH
53423: LD_INT 1
53425: ARRAY
53426: IFFALSE 53430
// exit ;
53428: GO 53871
// height := hex [ 2 ] ;
53430: LD_ADDR_VAR 0 13
53434: PUSH
53435: LD_VAR 0 15
53439: PUSH
53440: LD_INT 2
53442: ARRAY
53443: ST_TO_ADDR
// for i = 1 to hexes do
53444: LD_ADDR_VAR 0 7
53448: PUSH
53449: DOUBLE
53450: LD_INT 1
53452: DEC
53453: ST_TO_ADDR
53454: LD_VAR 0 12
53458: PUSH
53459: FOR_TO
53460: IFFALSE 53790
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53462: LD_VAR 0 12
53466: PUSH
53467: LD_VAR 0 7
53471: ARRAY
53472: PUSH
53473: LD_INT 1
53475: ARRAY
53476: PPUSH
53477: LD_VAR 0 12
53481: PUSH
53482: LD_VAR 0 7
53486: ARRAY
53487: PUSH
53488: LD_INT 2
53490: ARRAY
53491: PPUSH
53492: CALL_OW 488
53496: NOT
53497: PUSH
53498: LD_VAR 0 12
53502: PUSH
53503: LD_VAR 0 7
53507: ARRAY
53508: PUSH
53509: LD_INT 1
53511: ARRAY
53512: PPUSH
53513: LD_VAR 0 12
53517: PUSH
53518: LD_VAR 0 7
53522: ARRAY
53523: PUSH
53524: LD_INT 2
53526: ARRAY
53527: PPUSH
53528: CALL_OW 428
53532: PUSH
53533: LD_INT 0
53535: GREATER
53536: OR
53537: PUSH
53538: LD_VAR 0 12
53542: PUSH
53543: LD_VAR 0 7
53547: ARRAY
53548: PUSH
53549: LD_INT 1
53551: ARRAY
53552: PPUSH
53553: LD_VAR 0 12
53557: PUSH
53558: LD_VAR 0 7
53562: ARRAY
53563: PUSH
53564: LD_INT 2
53566: ARRAY
53567: PPUSH
53568: CALL_OW 351
53572: OR
53573: IFFALSE 53579
// exit ;
53575: POP
53576: POP
53577: GO 53871
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53579: LD_ADDR_VAR 0 8
53583: PUSH
53584: LD_VAR 0 12
53588: PUSH
53589: LD_VAR 0 7
53593: ARRAY
53594: PUSH
53595: LD_INT 1
53597: ARRAY
53598: PPUSH
53599: LD_VAR 0 12
53603: PUSH
53604: LD_VAR 0 7
53608: ARRAY
53609: PUSH
53610: LD_INT 2
53612: ARRAY
53613: PPUSH
53614: CALL_OW 546
53618: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53619: LD_VAR 0 8
53623: PUSH
53624: LD_INT 1
53626: ARRAY
53627: PUSH
53628: LD_VAR 0 8
53632: PUSH
53633: LD_INT 2
53635: ARRAY
53636: PUSH
53637: LD_VAR 0 13
53641: PUSH
53642: LD_INT 2
53644: PLUS
53645: GREATER
53646: OR
53647: PUSH
53648: LD_VAR 0 8
53652: PUSH
53653: LD_INT 2
53655: ARRAY
53656: PUSH
53657: LD_VAR 0 13
53661: PUSH
53662: LD_INT 2
53664: MINUS
53665: LESS
53666: OR
53667: PUSH
53668: LD_VAR 0 8
53672: PUSH
53673: LD_INT 3
53675: ARRAY
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 8
53682: PUSH
53683: LD_INT 9
53685: PUSH
53686: LD_INT 10
53688: PUSH
53689: LD_INT 11
53691: PUSH
53692: LD_INT 12
53694: PUSH
53695: LD_INT 13
53697: PUSH
53698: LD_INT 16
53700: PUSH
53701: LD_INT 17
53703: PUSH
53704: LD_INT 18
53706: PUSH
53707: LD_INT 19
53709: PUSH
53710: LD_INT 20
53712: PUSH
53713: LD_INT 21
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: IN
53731: NOT
53732: OR
53733: PUSH
53734: LD_VAR 0 8
53738: PUSH
53739: LD_INT 5
53741: ARRAY
53742: NOT
53743: OR
53744: PUSH
53745: LD_VAR 0 8
53749: PUSH
53750: LD_INT 6
53752: ARRAY
53753: PUSH
53754: LD_INT 1
53756: PUSH
53757: LD_INT 2
53759: PUSH
53760: LD_INT 7
53762: PUSH
53763: LD_INT 9
53765: PUSH
53766: LD_INT 10
53768: PUSH
53769: LD_INT 11
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: IN
53780: NOT
53781: OR
53782: IFFALSE 53788
// exit ;
53784: POP
53785: POP
53786: GO 53871
// end ;
53788: GO 53459
53790: POP
53791: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53792: LD_VAR 0 9
53796: PPUSH
53797: LD_VAR 0 3
53801: PPUSH
53802: LD_VAR 0 4
53806: PPUSH
53807: LD_INT 20
53809: PPUSH
53810: CALL 45794 0 4
53814: PUSH
53815: LD_INT 4
53817: ARRAY
53818: IFFALSE 53822
// exit ;
53820: GO 53871
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53822: LD_VAR 0 2
53826: PUSH
53827: LD_INT 29
53829: PUSH
53830: LD_INT 30
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: IN
53837: PUSH
53838: LD_VAR 0 3
53842: PPUSH
53843: LD_VAR 0 4
53847: PPUSH
53848: LD_VAR 0 9
53852: PPUSH
53853: CALL_OW 440
53857: NOT
53858: AND
53859: IFFALSE 53863
// exit ;
53861: GO 53871
// result := true ;
53863: LD_ADDR_VAR 0 6
53867: PUSH
53868: LD_INT 1
53870: ST_TO_ADDR
// end ;
53871: LD_VAR 0 6
53875: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53876: LD_INT 0
53878: PPUSH
53879: PPUSH
53880: PPUSH
53881: PPUSH
53882: PPUSH
53883: PPUSH
53884: PPUSH
53885: PPUSH
53886: PPUSH
53887: PPUSH
53888: PPUSH
53889: PPUSH
53890: PPUSH
53891: PPUSH
53892: PPUSH
53893: PPUSH
53894: PPUSH
53895: PPUSH
53896: PPUSH
53897: PPUSH
53898: PPUSH
53899: PPUSH
53900: PPUSH
53901: PPUSH
53902: PPUSH
53903: PPUSH
53904: PPUSH
53905: PPUSH
53906: PPUSH
53907: PPUSH
53908: PPUSH
53909: PPUSH
53910: PPUSH
53911: PPUSH
53912: PPUSH
53913: PPUSH
53914: PPUSH
53915: PPUSH
53916: PPUSH
53917: PPUSH
53918: PPUSH
53919: PPUSH
53920: PPUSH
53921: PPUSH
53922: PPUSH
53923: PPUSH
53924: PPUSH
53925: PPUSH
53926: PPUSH
53927: PPUSH
53928: PPUSH
53929: PPUSH
53930: PPUSH
53931: PPUSH
53932: PPUSH
53933: PPUSH
53934: PPUSH
53935: PPUSH
// result = [ ] ;
53936: LD_ADDR_VAR 0 7
53940: PUSH
53941: EMPTY
53942: ST_TO_ADDR
// temp_list = [ ] ;
53943: LD_ADDR_VAR 0 9
53947: PUSH
53948: EMPTY
53949: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53950: LD_VAR 0 4
53954: PUSH
53955: LD_INT 0
53957: PUSH
53958: LD_INT 1
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 3
53966: PUSH
53967: LD_INT 4
53969: PUSH
53970: LD_INT 5
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: IN
53981: NOT
53982: PUSH
53983: LD_VAR 0 1
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: IN
53998: PUSH
53999: LD_VAR 0 5
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: LD_INT 3
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: LIST
54017: IN
54018: NOT
54019: AND
54020: OR
54021: IFFALSE 54025
// exit ;
54023: GO 72416
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54025: LD_VAR 0 1
54029: PUSH
54030: LD_INT 6
54032: PUSH
54033: LD_INT 7
54035: PUSH
54036: LD_INT 8
54038: PUSH
54039: LD_INT 13
54041: PUSH
54042: LD_INT 12
54044: PUSH
54045: LD_INT 15
54047: PUSH
54048: LD_INT 11
54050: PUSH
54051: LD_INT 14
54053: PUSH
54054: LD_INT 10
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: LIST
54061: LIST
54062: LIST
54063: LIST
54064: LIST
54065: LIST
54066: LIST
54067: IN
54068: IFFALSE 54078
// btype = b_lab ;
54070: LD_ADDR_VAR 0 1
54074: PUSH
54075: LD_INT 6
54077: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54078: LD_VAR 0 6
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: LD_INT 1
54088: PUSH
54089: LD_INT 2
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: LIST
54096: IN
54097: NOT
54098: PUSH
54099: LD_VAR 0 1
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: LD_INT 2
54112: PUSH
54113: LD_INT 3
54115: PUSH
54116: LD_INT 6
54118: PUSH
54119: LD_INT 36
54121: PUSH
54122: LD_INT 4
54124: PUSH
54125: LD_INT 5
54127: PUSH
54128: LD_INT 31
54130: PUSH
54131: LD_INT 32
54133: PUSH
54134: LD_INT 33
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: IN
54150: NOT
54151: PUSH
54152: LD_VAR 0 6
54156: PUSH
54157: LD_INT 1
54159: EQUAL
54160: AND
54161: OR
54162: PUSH
54163: LD_VAR 0 1
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: LD_INT 3
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: IN
54178: NOT
54179: PUSH
54180: LD_VAR 0 6
54184: PUSH
54185: LD_INT 2
54187: EQUAL
54188: AND
54189: OR
54190: IFFALSE 54200
// mode = 0 ;
54192: LD_ADDR_VAR 0 6
54196: PUSH
54197: LD_INT 0
54199: ST_TO_ADDR
// case mode of 0 :
54200: LD_VAR 0 6
54204: PUSH
54205: LD_INT 0
54207: DOUBLE
54208: EQUAL
54209: IFTRUE 54213
54211: GO 65666
54213: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54214: LD_ADDR_VAR 0 11
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 0
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: LD_INT 0
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 1
54252: PUSH
54253: LD_INT 1
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 0
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: NEG
54273: PUSH
54274: LD_INT 0
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 1
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: LD_INT 2
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 0
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 1
54329: PUSH
54330: LD_INT 2
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 1
54349: NEG
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 1
54360: PUSH
54361: LD_INT 3
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: LD_INT 3
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: NEG
54381: PUSH
54382: LD_INT 2
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54407: LD_ADDR_VAR 0 12
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: LD_INT 1
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: EMPTY
54504: LIST
54505: LIST
54506: PUSH
54507: LD_INT 2
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: LD_INT 0
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 2
54541: NEG
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 2
54553: NEG
54554: PUSH
54555: LD_INT 1
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 3
54564: NEG
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 3
54575: NEG
54576: PUSH
54577: LD_INT 1
54579: NEG
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: LIST
54589: LIST
54590: LIST
54591: LIST
54592: LIST
54593: LIST
54594: LIST
54595: LIST
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54603: LD_ADDR_VAR 0 13
54607: PUSH
54608: LD_INT 0
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 1
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 1
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 1
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: NEG
54673: PUSH
54674: LD_INT 1
54676: NEG
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: LD_INT 2
54688: NEG
54689: PUSH
54690: EMPTY
54691: LIST
54692: LIST
54693: PUSH
54694: LD_INT 2
54696: PUSH
54697: LD_INT 1
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 2
54706: PUSH
54707: LD_INT 2
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 1
54716: PUSH
54717: LD_INT 2
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 2
54726: NEG
54727: PUSH
54728: LD_INT 1
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: LD_INT 3
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 3
54762: NEG
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 3
54774: NEG
54775: PUSH
54776: LD_INT 3
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54802: LD_ADDR_VAR 0 14
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 1
54822: NEG
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 1
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 1
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: NEG
54861: PUSH
54862: LD_INT 0
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: LD_INT 1
54875: NEG
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: LD_INT 2
54887: NEG
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 0
54895: PUSH
54896: LD_INT 2
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: LD_INT 2
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: LD_INT 3
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: LD_INT 3
54963: NEG
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: EMPTY
54981: LIST
54982: LIST
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54998: LD_ADDR_VAR 0 15
55002: PUSH
55003: LD_INT 0
55005: PUSH
55006: LD_INT 0
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 1
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 0
55046: PUSH
55047: LD_INT 1
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: LD_INT 0
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 1
55067: NEG
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 1
55079: PUSH
55080: LD_INT 1
55082: NEG
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: PUSH
55091: LD_INT 0
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 2
55100: PUSH
55101: LD_INT 1
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 2
55121: NEG
55122: PUSH
55123: LD_INT 0
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: NEG
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: EMPTY
55150: LIST
55151: LIST
55152: PUSH
55153: LD_INT 3
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: PUSH
55163: LD_INT 3
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: EMPTY
55170: LIST
55171: LIST
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55191: LD_ADDR_VAR 0 16
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: LD_INT 1
55211: NEG
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 1
55229: PUSH
55230: LD_INT 1
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 1
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: NEG
55250: PUSH
55251: LD_INT 0
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 1
55260: NEG
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: LD_INT 2
55276: NEG
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 2
55284: PUSH
55285: LD_INT 1
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: PUSH
55292: LD_INT 2
55294: PUSH
55295: LD_INT 2
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 1
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 2
55314: NEG
55315: PUSH
55316: LD_INT 1
55318: NEG
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 2
55326: NEG
55327: PUSH
55328: LD_INT 2
55330: NEG
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 3
55338: PUSH
55339: LD_INT 2
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 3
55348: PUSH
55349: LD_INT 3
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 2
55358: PUSH
55359: LD_INT 3
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55384: LD_ADDR_VAR 0 17
55388: PUSH
55389: LD_INT 0
55391: PUSH
55392: LD_INT 0
55394: PUSH
55395: EMPTY
55396: LIST
55397: LIST
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: LD_INT 1
55404: NEG
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: LD_INT 1
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 1
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 1
55442: NEG
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: NEG
55466: PUSH
55467: LD_INT 2
55469: NEG
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 1
55488: PUSH
55489: LD_INT 1
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: LD_INT 1
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 0
55539: PUSH
55540: LD_INT 2
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 2
55560: NEG
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55614: LD_ADDR_VAR 0 18
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: LD_INT 0
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: LD_INT 1
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 0
55662: PUSH
55663: LD_INT 1
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 1
55672: NEG
55673: PUSH
55674: LD_INT 0
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: LD_INT 1
55687: NEG
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 1
55695: NEG
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 0
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 1
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 2
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: LD_INT 1
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: EMPTY
55754: LIST
55755: LIST
55756: PUSH
55757: LD_INT 1
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: EMPTY
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 0
55769: PUSH
55770: LD_INT 2
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 2
55790: NEG
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 2
55813: NEG
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: EMPTY
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55844: LD_ADDR_VAR 0 19
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 1
55864: NEG
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 1
55902: NEG
55903: PUSH
55904: LD_INT 0
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 1
55917: NEG
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 2
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 0
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 1
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: EMPTY
55984: LIST
55985: LIST
55986: PUSH
55987: LD_INT 1
55989: PUSH
55990: LD_INT 2
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: LD_INT 0
55999: PUSH
56000: LD_INT 2
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 2
56020: NEG
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: NEG
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56074: LD_ADDR_VAR 0 20
56078: PUSH
56079: LD_INT 0
56081: PUSH
56082: LD_INT 0
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: PUSH
56089: LD_INT 0
56091: PUSH
56092: LD_INT 1
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: LD_INT 1
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: LD_INT 1
56147: NEG
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 2
56159: NEG
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: PUSH
56179: LD_INT 1
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 2
56189: PUSH
56190: LD_INT 0
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: LD_INT 1
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: LD_INT 2
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: LD_INT 1
56219: PUSH
56220: LD_INT 2
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 0
56229: PUSH
56230: LD_INT 2
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: LD_INT 1
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 2
56250: NEG
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: LD_INT 1
56265: NEG
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 2
56273: NEG
56274: PUSH
56275: LD_INT 2
56277: NEG
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56304: LD_ADDR_VAR 0 21
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: LD_INT 0
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 0
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: EMPTY
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 1
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 1
56362: NEG
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 1
56385: NEG
56386: PUSH
56387: LD_INT 2
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: LD_INT 2
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 1
56408: PUSH
56409: LD_INT 1
56411: NEG
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: LD_INT 1
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 2
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: EMPTY
56444: LIST
56445: LIST
56446: PUSH
56447: LD_INT 1
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: LD_INT 2
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: PUSH
56467: LD_INT 1
56469: NEG
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: LD_INT 0
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: LD_INT 1
56495: NEG
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: LD_INT 2
56507: NEG
56508: PUSH
56509: EMPTY
56510: LIST
56511: LIST
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56534: LD_ADDR_VAR 0 22
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 0
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 1
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 0
56582: PUSH
56583: LD_INT 1
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: NEG
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: EMPTY
56610: LIST
56611: LIST
56612: PUSH
56613: LD_INT 1
56615: NEG
56616: PUSH
56617: LD_INT 2
56619: NEG
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: LD_INT 2
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 1
56638: PUSH
56639: LD_INT 1
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: PUSH
56650: LD_INT 0
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: PUSH
56660: LD_INT 1
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 2
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: EMPTY
56674: LIST
56675: LIST
56676: PUSH
56677: LD_INT 1
56679: PUSH
56680: LD_INT 2
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 0
56689: PUSH
56690: LD_INT 2
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: LIST
56762: LIST
56763: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56764: LD_ADDR_VAR 0 23
56768: PUSH
56769: LD_INT 0
56771: PUSH
56772: LD_INT 0
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 0
56781: PUSH
56782: LD_INT 1
56784: NEG
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 1
56792: PUSH
56793: LD_INT 0
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: LD_INT 0
56826: PUSH
56827: EMPTY
56828: LIST
56829: LIST
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: LD_INT 2
56849: NEG
56850: PUSH
56851: EMPTY
56852: LIST
56853: LIST
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: LD_INT 2
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 2
56879: PUSH
56880: LD_INT 0
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 2
56889: PUSH
56890: LD_INT 1
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 2
56899: PUSH
56900: LD_INT 2
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 1
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: NEG
56930: PUSH
56931: LD_INT 1
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 2
56940: NEG
56941: PUSH
56942: LD_INT 0
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: LD_INT 2
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: LD_INT 2
56975: NEG
56976: PUSH
56977: LD_INT 3
56979: NEG
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: PUSH
56985: LD_INT 1
56987: NEG
56988: PUSH
56989: LD_INT 3
56991: NEG
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: PUSH
56997: LD_INT 1
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: LD_INT 1
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57044: LD_ADDR_VAR 0 24
57048: PUSH
57049: LD_INT 0
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: LD_INT 1
57064: NEG
57065: PUSH
57066: EMPTY
57067: LIST
57068: LIST
57069: PUSH
57070: LD_INT 1
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 1
57082: PUSH
57083: LD_INT 1
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 1
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 0
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: NEG
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: NEG
57126: PUSH
57127: LD_INT 2
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 0
57137: PUSH
57138: LD_INT 2
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 2
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 2
57179: PUSH
57180: LD_INT 2
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 2
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 0
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 1
57209: NEG
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: NEG
57221: PUSH
57222: LD_INT 0
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: LD_INT 2
57231: NEG
57232: PUSH
57233: LD_INT 1
57235: NEG
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 2
57258: NEG
57259: PUSH
57260: EMPTY
57261: LIST
57262: LIST
57263: PUSH
57264: LD_INT 2
57266: PUSH
57267: LD_INT 1
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: LD_INT 3
57277: PUSH
57278: LD_INT 1
57280: PUSH
57281: EMPTY
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 3
57287: PUSH
57288: LD_INT 2
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57320: LD_ADDR_VAR 0 25
57324: PUSH
57325: LD_INT 0
57327: PUSH
57328: LD_INT 0
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: LD_INT 1
57340: NEG
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 1
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 1
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 0
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: PUSH
57425: LD_INT 1
57427: NEG
57428: PUSH
57429: EMPTY
57430: LIST
57431: LIST
57432: PUSH
57433: LD_INT 2
57435: PUSH
57436: LD_INT 0
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: LD_INT 1
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 2
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 1
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: NEG
57486: PUSH
57487: LD_INT 1
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 2
57496: NEG
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 2
57507: NEG
57508: PUSH
57509: LD_INT 1
57511: NEG
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: LD_INT 2
57523: NEG
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 3
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 3
57541: PUSH
57542: LD_INT 2
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 2
57551: PUSH
57552: LD_INT 3
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 1
57561: PUSH
57562: LD_INT 3
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57594: LD_ADDR_VAR 0 26
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: LD_INT 0
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 1
57622: PUSH
57623: LD_INT 0
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 1
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 1
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 1
57675: NEG
57676: PUSH
57677: LD_INT 2
57679: NEG
57680: PUSH
57681: EMPTY
57682: LIST
57683: LIST
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: LD_INT 2
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 2
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 2
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 2
57729: PUSH
57730: LD_INT 2
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: LD_INT 2
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: LD_INT 2
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 1
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 2
57770: NEG
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 2
57781: NEG
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: EMPTY
57788: LIST
57789: LIST
57790: PUSH
57791: LD_INT 2
57793: NEG
57794: PUSH
57795: LD_INT 2
57797: NEG
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 2
57805: PUSH
57806: LD_INT 3
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: LD_INT 3
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 1
57825: NEG
57826: PUSH
57827: LD_INT 2
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 2
57836: NEG
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: LIST
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: LIST
57869: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57870: LD_ADDR_VAR 0 27
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: EMPTY
57882: LIST
57883: LIST
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 1
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 1
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: LD_INT 0
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 1
57939: NEG
57940: PUSH
57941: LD_INT 1
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: NEG
57952: PUSH
57953: LD_INT 2
57955: NEG
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: LD_INT 2
57966: NEG
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 1
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 2
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 2
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 1
58015: PUSH
58016: LD_INT 2
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 2
58028: PUSH
58029: EMPTY
58030: LIST
58031: LIST
58032: PUSH
58033: LD_INT 1
58035: NEG
58036: PUSH
58037: LD_INT 1
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 2
58046: NEG
58047: PUSH
58048: LD_INT 0
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 2
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 2
58069: NEG
58070: PUSH
58071: LD_INT 2
58073: NEG
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: LD_INT 2
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 2
58092: NEG
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 3
58103: NEG
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 3
58115: NEG
58116: PUSH
58117: LD_INT 2
58119: NEG
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58150: LD_ADDR_VAR 0 28
58154: PUSH
58155: LD_INT 0
58157: PUSH
58158: LD_INT 0
58160: PUSH
58161: EMPTY
58162: LIST
58163: LIST
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: LD_INT 1
58170: NEG
58171: PUSH
58172: EMPTY
58173: LIST
58174: LIST
58175: PUSH
58176: LD_INT 1
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PUSH
58186: LD_INT 1
58188: PUSH
58189: LD_INT 1
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 1
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: LD_INT 0
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 1
58219: NEG
58220: PUSH
58221: LD_INT 1
58223: NEG
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: LD_INT 2
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 2
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 1
58254: PUSH
58255: LD_INT 1
58257: NEG
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 2
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 1
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: LD_INT 2
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: PUSH
58293: LD_INT 1
58295: PUSH
58296: LD_INT 2
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: LD_INT 2
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 1
58315: NEG
58316: PUSH
58317: LD_INT 1
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 2
58326: NEG
58327: PUSH
58328: LD_INT 0
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: LD_INT 2
58337: NEG
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: PUSH
58347: LD_INT 2
58349: NEG
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 2
58361: NEG
58362: PUSH
58363: LD_INT 3
58365: NEG
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: LD_INT 3
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 3
58385: NEG
58386: PUSH
58387: LD_INT 1
58389: NEG
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 3
58397: NEG
58398: PUSH
58399: LD_INT 2
58401: NEG
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58432: LD_ADDR_VAR 0 29
58436: PUSH
58437: LD_INT 0
58439: PUSH
58440: LD_INT 0
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PUSH
58447: LD_INT 0
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 1
58460: PUSH
58461: LD_INT 0
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: PUSH
58468: LD_INT 1
58470: PUSH
58471: LD_INT 1
58473: PUSH
58474: EMPTY
58475: LIST
58476: LIST
58477: PUSH
58478: LD_INT 0
58480: PUSH
58481: LD_INT 1
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: LD_INT 0
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: LD_INT 2
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 0
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 1
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: LD_INT 2
58547: PUSH
58548: LD_INT 0
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 2
58557: PUSH
58558: LD_INT 1
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: PUSH
58565: LD_INT 1
58567: PUSH
58568: LD_INT 2
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 0
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: PUSH
58585: LD_INT 1
58587: NEG
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 2
58598: NEG
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 2
58610: NEG
58611: PUSH
58612: LD_INT 2
58614: NEG
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 2
58622: NEG
58623: PUSH
58624: LD_INT 3
58626: NEG
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 2
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 3
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 1
58655: PUSH
58656: LD_INT 3
58658: PUSH
58659: EMPTY
58660: LIST
58661: LIST
58662: PUSH
58663: LD_INT 1
58665: NEG
58666: PUSH
58667: LD_INT 2
58669: PUSH
58670: EMPTY
58671: LIST
58672: LIST
58673: PUSH
58674: LD_INT 3
58676: NEG
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58711: LD_ADDR_VAR 0 30
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: LD_INT 0
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 1
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: LD_INT 0
58759: PUSH
58760: LD_INT 1
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 1
58769: NEG
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 1
58780: NEG
58781: PUSH
58782: LD_INT 1
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: LD_INT 1
58792: NEG
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 0
58804: PUSH
58805: LD_INT 2
58807: NEG
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: PUSH
58816: LD_INT 1
58818: NEG
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 2
58826: PUSH
58827: LD_INT 0
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 2
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 2
58846: PUSH
58847: LD_INT 2
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: PUSH
58857: LD_INT 2
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 2
58877: NEG
58878: PUSH
58879: LD_INT 0
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 2
58888: NEG
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: LD_INT 3
58904: NEG
58905: PUSH
58906: EMPTY
58907: LIST
58908: LIST
58909: PUSH
58910: LD_INT 1
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 3
58923: PUSH
58924: LD_INT 2
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: PUSH
58934: LD_INT 3
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 2
58943: NEG
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 3
58954: NEG
58955: PUSH
58956: LD_INT 1
58958: NEG
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: LIST
58970: LIST
58971: LIST
58972: LIST
58973: LIST
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58989: LD_ADDR_VAR 0 31
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: LD_INT 0
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: PUSH
59004: LD_INT 0
59006: PUSH
59007: LD_INT 1
59009: NEG
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: PUSH
59015: LD_INT 1
59017: PUSH
59018: LD_INT 0
59020: PUSH
59021: EMPTY
59022: LIST
59023: LIST
59024: PUSH
59025: LD_INT 1
59027: PUSH
59028: LD_INT 1
59030: PUSH
59031: EMPTY
59032: LIST
59033: LIST
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: LD_INT 1
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 1
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 1
59070: NEG
59071: PUSH
59072: LD_INT 2
59074: NEG
59075: PUSH
59076: EMPTY
59077: LIST
59078: LIST
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: LD_INT 1
59085: NEG
59086: PUSH
59087: EMPTY
59088: LIST
59089: LIST
59090: PUSH
59091: LD_INT 2
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 2
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 2
59113: PUSH
59114: LD_INT 2
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: PUSH
59121: LD_INT 1
59123: PUSH
59124: LD_INT 2
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: LD_INT 2
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: LD_INT 1
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: NEG
59167: PUSH
59168: LD_INT 2
59170: NEG
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 3
59182: NEG
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 2
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 3
59201: PUSH
59202: LD_INT 1
59204: PUSH
59205: EMPTY
59206: LIST
59207: LIST
59208: PUSH
59209: LD_INT 1
59211: PUSH
59212: LD_INT 3
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: PUSH
59219: LD_INT 1
59221: NEG
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 3
59232: NEG
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59267: LD_ADDR_VAR 0 32
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: LD_INT 0
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: LD_INT 1
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 0
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 1
59305: PUSH
59306: LD_INT 1
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PUSH
59313: LD_INT 0
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: NEG
59326: PUSH
59327: LD_INT 0
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 1
59336: NEG
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 1
59348: NEG
59349: PUSH
59350: LD_INT 2
59352: NEG
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 2
59363: NEG
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: PUSH
59372: LD_INT 1
59374: NEG
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: PUSH
59380: LD_INT 2
59382: PUSH
59383: LD_INT 1
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 2
59392: PUSH
59393: LD_INT 2
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: PUSH
59410: LD_INT 0
59412: PUSH
59413: LD_INT 2
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 1
59422: NEG
59423: PUSH
59424: LD_INT 1
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 2
59433: NEG
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: LD_INT 2
59444: NEG
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: NEG
59457: PUSH
59458: LD_INT 3
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: PUSH
59469: LD_INT 2
59471: NEG
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 3
59479: PUSH
59480: LD_INT 2
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: LD_INT 3
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: EMPTY
59505: LIST
59506: LIST
59507: PUSH
59508: LD_INT 3
59510: NEG
59511: PUSH
59512: LD_INT 1
59514: NEG
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59545: LD_ADDR_VAR 0 33
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: LD_INT 0
59555: PUSH
59556: EMPTY
59557: LIST
59558: LIST
59559: PUSH
59560: LD_INT 0
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: LD_INT 0
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: LD_INT 1
59596: PUSH
59597: EMPTY
59598: LIST
59599: LIST
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: LD_INT 0
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 1
59614: NEG
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 2
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 1
59638: PUSH
59639: LD_INT 1
59641: NEG
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 2
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: LD_INT 2
59659: PUSH
59660: LD_INT 1
59662: PUSH
59663: EMPTY
59664: LIST
59665: LIST
59666: PUSH
59667: LD_INT 1
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: EMPTY
59674: LIST
59675: LIST
59676: PUSH
59677: LD_INT 0
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: NEG
59690: PUSH
59691: LD_INT 1
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 2
59700: NEG
59701: PUSH
59702: LD_INT 0
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: PUSH
59709: LD_INT 2
59711: NEG
59712: PUSH
59713: LD_INT 1
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: LD_INT 2
59727: NEG
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 2
59735: NEG
59736: PUSH
59737: LD_INT 3
59739: NEG
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: PUSH
59756: LD_INT 3
59758: PUSH
59759: LD_INT 1
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: PUSH
59769: LD_INT 3
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: NEG
59779: PUSH
59780: LD_INT 2
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 3
59789: NEG
59790: PUSH
59791: LD_INT 2
59793: NEG
59794: PUSH
59795: EMPTY
59796: LIST
59797: LIST
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59824: LD_ADDR_VAR 0 34
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: LD_INT 0
59834: PUSH
59835: EMPTY
59836: LIST
59837: LIST
59838: PUSH
59839: LD_INT 0
59841: PUSH
59842: LD_INT 1
59844: NEG
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 1
59852: PUSH
59853: LD_INT 0
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 1
59862: PUSH
59863: LD_INT 1
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: LD_INT 1
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: LD_INT 0
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: LD_INT 1
59893: NEG
59894: PUSH
59895: LD_INT 1
59897: NEG
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 1
59905: NEG
59906: PUSH
59907: LD_INT 2
59909: NEG
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 0
59917: PUSH
59918: LD_INT 2
59920: NEG
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: EMPTY
59934: LIST
59935: LIST
59936: PUSH
59937: LD_INT 2
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 2
59949: PUSH
59950: LD_INT 2
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 1
59959: PUSH
59960: LD_INT 2
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: PUSH
59967: LD_INT 1
59969: NEG
59970: PUSH
59971: LD_INT 1
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: LD_INT 2
59980: NEG
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: NEG
59992: PUSH
59993: LD_INT 1
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: LD_INT 2
60003: NEG
60004: PUSH
60005: LD_INT 2
60007: NEG
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 1
60015: NEG
60016: PUSH
60017: LD_INT 3
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 2
60030: NEG
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 3
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: LD_INT 2
60048: PUSH
60049: LD_INT 3
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 3
60069: NEG
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60104: LD_ADDR_VAR 0 35
60108: PUSH
60109: LD_INT 0
60111: PUSH
60112: LD_INT 0
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: LD_INT 1
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 1
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: LD_INT 1
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 1
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: LD_INT 0
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: PUSH
60175: LD_INT 1
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 2
60185: PUSH
60186: LD_INT 1
60188: PUSH
60189: EMPTY
60190: LIST
60191: LIST
60192: PUSH
60193: LD_INT 2
60195: NEG
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60216: LD_ADDR_VAR 0 36
60220: PUSH
60221: LD_INT 0
60223: PUSH
60224: LD_INT 0
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 0
60233: PUSH
60234: LD_INT 1
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 1
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: PUSH
60255: LD_INT 1
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 1
60274: NEG
60275: PUSH
60276: LD_INT 0
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 1
60289: NEG
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 1
60297: NEG
60298: PUSH
60299: LD_INT 2
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: LD_INT 2
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60328: LD_ADDR_VAR 0 37
60332: PUSH
60333: LD_INT 0
60335: PUSH
60336: LD_INT 0
60338: PUSH
60339: EMPTY
60340: LIST
60341: LIST
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: LD_INT 1
60348: NEG
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 1
60356: PUSH
60357: LD_INT 0
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 1
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: LD_INT 1
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: LD_INT 0
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: LD_INT 1
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: PUSH
60410: LD_INT 1
60412: NEG
60413: PUSH
60414: EMPTY
60415: LIST
60416: LIST
60417: PUSH
60418: LD_INT 1
60420: NEG
60421: PUSH
60422: LD_INT 1
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60440: LD_ADDR_VAR 0 38
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: LD_INT 1
60460: NEG
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: PUSH
60466: LD_INT 1
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: LD_INT 1
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_INT 1
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 1
60498: NEG
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 1
60509: NEG
60510: PUSH
60511: LD_INT 1
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 2
60521: PUSH
60522: LD_INT 1
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 2
60531: NEG
60532: PUSH
60533: LD_INT 1
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: EMPTY
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60552: LD_ADDR_VAR 0 39
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: EMPTY
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: LD_INT 1
60572: NEG
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: LD_INT 0
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: PUSH
60591: LD_INT 1
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: LD_INT 2
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60664: LD_ADDR_VAR 0 40
60668: PUSH
60669: LD_INT 0
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 1
60684: NEG
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: PUSH
60690: LD_INT 1
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 1
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 0
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 1
60733: NEG
60734: PUSH
60735: LD_INT 1
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 1
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: LD_INT 1
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60776: LD_ADDR_VAR 0 41
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: LD_INT 0
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 0
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: LD_INT 1
60834: NEG
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 1
60845: NEG
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 1
60857: NEG
60858: PUSH
60859: LD_INT 2
60861: NEG
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 1
60869: PUSH
60870: LD_INT 1
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 2
60880: PUSH
60881: LD_INT 0
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: LD_INT 2
60890: PUSH
60891: LD_INT 1
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 2
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: PUSH
60908: LD_INT 1
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 1
60920: NEG
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_INT 2
60931: NEG
60932: PUSH
60933: LD_INT 0
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 2
60942: NEG
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: NEG
60955: PUSH
60956: LD_INT 2
60958: NEG
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 2
60966: NEG
60967: PUSH
60968: LD_INT 3
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 2
60978: PUSH
60979: LD_INT 1
60981: NEG
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 3
60989: PUSH
60990: LD_INT 0
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: LD_INT 1
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 3
61009: PUSH
61010: LD_INT 2
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: PUSH
61017: LD_INT 3
61019: PUSH
61020: LD_INT 3
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 2
61029: PUSH
61030: LD_INT 3
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 2
61039: NEG
61040: PUSH
61041: LD_INT 1
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 3
61050: NEG
61051: PUSH
61052: LD_INT 0
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 3
61061: NEG
61062: PUSH
61063: LD_INT 1
61065: NEG
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 3
61073: NEG
61074: PUSH
61075: LD_INT 2
61077: NEG
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: PUSH
61083: LD_INT 3
61085: NEG
61086: PUSH
61087: LD_INT 3
61089: NEG
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: LIST
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61126: LD_ADDR_VAR 0 42
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: LD_INT 0
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: EMPTY
61149: LIST
61150: LIST
61151: PUSH
61152: LD_INT 1
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 1
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 1
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: LD_INT 0
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: LD_INT 2
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 2
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 1
61230: PUSH
61231: LD_INT 1
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 2
61241: PUSH
61242: LD_INT 1
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 2
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: PUSH
61259: LD_INT 1
61261: PUSH
61262: LD_INT 2
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: LD_INT 2
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 1
61281: NEG
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: EMPTY
61287: LIST
61288: LIST
61289: PUSH
61290: LD_INT 2
61292: NEG
61293: PUSH
61294: LD_INT 1
61296: NEG
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: PUSH
61302: LD_INT 2
61304: NEG
61305: PUSH
61306: LD_INT 2
61308: NEG
61309: PUSH
61310: EMPTY
61311: LIST
61312: LIST
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: LD_INT 3
61320: NEG
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: LD_INT 3
61332: NEG
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: LD_INT 3
61343: NEG
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: LD_INT 1
61351: PUSH
61352: LD_INT 2
61354: NEG
61355: PUSH
61356: EMPTY
61357: LIST
61358: LIST
61359: PUSH
61360: LD_INT 3
61362: PUSH
61363: LD_INT 2
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: LD_INT 3
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: LD_INT 3
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 1
61392: PUSH
61393: LD_INT 3
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 0
61402: PUSH
61403: LD_INT 3
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 3
61423: NEG
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: EMPTY
61430: LIST
61431: LIST
61432: PUSH
61433: LD_INT 3
61435: NEG
61436: PUSH
61437: LD_INT 3
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61476: LD_ADDR_VAR 0 43
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: LD_INT 1
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 1
61504: PUSH
61505: LD_INT 0
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 1
61514: PUSH
61515: LD_INT 1
61517: PUSH
61518: EMPTY
61519: LIST
61520: LIST
61521: PUSH
61522: LD_INT 0
61524: PUSH
61525: LD_INT 1
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 1
61534: NEG
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 1
61545: NEG
61546: PUSH
61547: LD_INT 1
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: PUSH
61559: LD_INT 2
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 0
61569: PUSH
61570: LD_INT 2
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: LD_INT 1
61583: NEG
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 2
61591: PUSH
61592: LD_INT 0
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 2
61601: PUSH
61602: LD_INT 1
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 1
61611: PUSH
61612: LD_INT 2
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 0
61621: PUSH
61622: LD_INT 2
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: PUSH
61629: LD_INT 1
61631: NEG
61632: PUSH
61633: LD_INT 1
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 2
61642: NEG
61643: PUSH
61644: LD_INT 0
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 2
61653: NEG
61654: PUSH
61655: LD_INT 1
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: LD_INT 3
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 3
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 1
61688: PUSH
61689: LD_INT 2
61691: NEG
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: LD_INT 2
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 3
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 3
61720: PUSH
61721: LD_INT 1
61723: PUSH
61724: EMPTY
61725: LIST
61726: LIST
61727: PUSH
61728: LD_INT 1
61730: PUSH
61731: LD_INT 3
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 3
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: NEG
61751: PUSH
61752: LD_INT 2
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: LD_INT 1
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 3
61772: NEG
61773: PUSH
61774: LD_INT 0
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 3
61783: NEG
61784: PUSH
61785: LD_INT 1
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: LIST
61821: LIST
61822: LIST
61823: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61824: LD_ADDR_VAR 0 44
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_INT 0
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: LD_INT 0
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: LD_INT 1
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 0
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 1
61882: NEG
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 1
61905: NEG
61906: PUSH
61907: LD_INT 2
61909: NEG
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: LD_INT 1
61920: NEG
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 2
61928: PUSH
61929: LD_INT 0
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 2
61938: PUSH
61939: LD_INT 1
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 2
61948: PUSH
61949: LD_INT 2
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: LD_INT 2
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: NEG
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 2
61979: NEG
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 2
61990: NEG
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 2
62002: NEG
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: NEG
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 2
62026: PUSH
62027: LD_INT 1
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 3
62037: PUSH
62038: LD_INT 0
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 3
62057: PUSH
62058: LD_INT 2
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: LD_INT 3
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 2
62077: PUSH
62078: LD_INT 3
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 2
62087: NEG
62088: PUSH
62089: LD_INT 1
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 3
62098: NEG
62099: PUSH
62100: LD_INT 0
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 3
62109: NEG
62110: PUSH
62111: LD_INT 1
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 3
62121: NEG
62122: PUSH
62123: LD_INT 2
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 3
62133: NEG
62134: PUSH
62135: LD_INT 3
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62174: LD_ADDR_VAR 0 45
62178: PUSH
62179: LD_INT 0
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: EMPTY
62186: LIST
62187: LIST
62188: PUSH
62189: LD_INT 0
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 1
62202: PUSH
62203: LD_INT 0
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 1
62212: PUSH
62213: LD_INT 1
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 0
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 1
62232: NEG
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: LD_INT 1
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 1
62255: NEG
62256: PUSH
62257: LD_INT 2
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 0
62267: PUSH
62268: LD_INT 2
62270: NEG
62271: PUSH
62272: EMPTY
62273: LIST
62274: LIST
62275: PUSH
62276: LD_INT 1
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 2
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: EMPTY
62294: LIST
62295: LIST
62296: PUSH
62297: LD_INT 2
62299: PUSH
62300: LD_INT 2
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 1
62309: PUSH
62310: LD_INT 2
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: PUSH
62317: LD_INT 0
62319: PUSH
62320: LD_INT 2
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 1
62329: NEG
62330: PUSH
62331: LD_INT 1
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: PUSH
62338: LD_INT 2
62340: NEG
62341: PUSH
62342: LD_INT 1
62344: NEG
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 2
62352: NEG
62353: PUSH
62354: LD_INT 2
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 2
62364: NEG
62365: PUSH
62366: LD_INT 3
62368: NEG
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 1
62376: NEG
62377: PUSH
62378: LD_INT 3
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 0
62388: PUSH
62389: LD_INT 3
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: LD_INT 2
62402: NEG
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: PUSH
62408: LD_INT 3
62410: PUSH
62411: LD_INT 2
62413: PUSH
62414: EMPTY
62415: LIST
62416: LIST
62417: PUSH
62418: LD_INT 3
62420: PUSH
62421: LD_INT 3
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 2
62430: PUSH
62431: LD_INT 3
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 1
62440: PUSH
62441: LD_INT 3
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: LD_INT 3
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 2
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 3
62471: NEG
62472: PUSH
62473: LD_INT 2
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 3
62483: NEG
62484: PUSH
62485: LD_INT 3
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62524: LD_ADDR_VAR 0 46
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: LD_INT 0
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: LD_INT 1
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 1
62562: PUSH
62563: LD_INT 1
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 0
62572: PUSH
62573: LD_INT 1
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 1
62582: NEG
62583: PUSH
62584: LD_INT 0
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 1
62593: NEG
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: LD_INT 2
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 2
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 2
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 1
62659: PUSH
62660: LD_INT 2
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: LD_INT 2
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: NEG
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: LD_INT 0
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 2
62701: NEG
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: LD_INT 3
62717: NEG
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 0
62725: PUSH
62726: LD_INT 3
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: LD_INT 2
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 3
62768: PUSH
62769: LD_INT 1
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 1
62778: PUSH
62779: LD_INT 3
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 0
62788: PUSH
62789: LD_INT 3
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: NEG
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 2
62809: NEG
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 3
62820: NEG
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 3
62831: NEG
62832: PUSH
62833: LD_INT 1
62835: NEG
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: EMPTY
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62872: LD_ADDR_VAR 0 47
62876: PUSH
62877: LD_INT 0
62879: PUSH
62880: LD_INT 0
62882: PUSH
62883: EMPTY
62884: LIST
62885: LIST
62886: PUSH
62887: LD_INT 0
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: LD_INT 0
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 1
62910: PUSH
62911: LD_INT 1
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 0
62920: PUSH
62921: LD_INT 1
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 1
62930: NEG
62931: PUSH
62932: LD_INT 0
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 1
62941: NEG
62942: PUSH
62943: LD_INT 1
62945: NEG
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: NEG
62954: PUSH
62955: LD_INT 2
62957: NEG
62958: PUSH
62959: EMPTY
62960: LIST
62961: LIST
62962: PUSH
62963: LD_INT 0
62965: PUSH
62966: LD_INT 2
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: LD_INT 1
62979: NEG
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 2
62987: NEG
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 2
62999: NEG
63000: PUSH
63001: LD_INT 2
63003: NEG
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PUSH
63009: EMPTY
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63023: LD_ADDR_VAR 0 48
63027: PUSH
63028: LD_INT 0
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 0
63040: PUSH
63041: LD_INT 1
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 1
63051: PUSH
63052: LD_INT 0
63054: PUSH
63055: EMPTY
63056: LIST
63057: LIST
63058: PUSH
63059: LD_INT 1
63061: PUSH
63062: LD_INT 1
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 0
63071: PUSH
63072: LD_INT 1
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: NEG
63082: PUSH
63083: LD_INT 0
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: PUSH
63090: LD_INT 1
63092: NEG
63093: PUSH
63094: LD_INT 1
63096: NEG
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 1
63104: NEG
63105: PUSH
63106: LD_INT 2
63108: NEG
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 2
63119: NEG
63120: PUSH
63121: EMPTY
63122: LIST
63123: LIST
63124: PUSH
63125: LD_INT 1
63127: PUSH
63128: LD_INT 1
63130: NEG
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 2
63138: PUSH
63139: LD_INT 0
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 2
63148: PUSH
63149: LD_INT 1
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63170: LD_ADDR_VAR 0 49
63174: PUSH
63175: LD_INT 0
63177: PUSH
63178: LD_INT 0
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: LD_INT 1
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 1
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 0
63218: PUSH
63219: LD_INT 1
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PUSH
63226: LD_INT 1
63228: NEG
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: EMPTY
63234: LIST
63235: LIST
63236: PUSH
63237: LD_INT 1
63239: NEG
63240: PUSH
63241: LD_INT 1
63243: NEG
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: PUSH
63249: LD_INT 1
63251: PUSH
63252: LD_INT 1
63254: NEG
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: PUSH
63260: LD_INT 2
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 2
63272: PUSH
63273: LD_INT 1
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: PUSH
63280: LD_INT 2
63282: PUSH
63283: LD_INT 2
63285: PUSH
63286: EMPTY
63287: LIST
63288: LIST
63289: PUSH
63290: LD_INT 1
63292: PUSH
63293: LD_INT 2
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: LIST
63312: LIST
63313: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63314: LD_ADDR_VAR 0 50
63318: PUSH
63319: LD_INT 0
63321: PUSH
63322: LD_INT 0
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: LD_INT 1
63334: NEG
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 1
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 1
63352: PUSH
63353: LD_INT 1
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: LD_INT 1
63365: PUSH
63366: EMPTY
63367: LIST
63368: LIST
63369: PUSH
63370: LD_INT 1
63372: NEG
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 1
63383: NEG
63384: PUSH
63385: LD_INT 1
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: LD_INT 2
63395: PUSH
63396: LD_INT 1
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 2
63405: PUSH
63406: LD_INT 2
63408: PUSH
63409: EMPTY
63410: LIST
63411: LIST
63412: PUSH
63413: LD_INT 1
63415: PUSH
63416: LD_INT 2
63418: PUSH
63419: EMPTY
63420: LIST
63421: LIST
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: LD_INT 2
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 1
63435: NEG
63436: PUSH
63437: LD_INT 1
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: LIST
63448: LIST
63449: LIST
63450: LIST
63451: LIST
63452: LIST
63453: LIST
63454: LIST
63455: LIST
63456: LIST
63457: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63458: LD_ADDR_VAR 0 51
63462: PUSH
63463: LD_INT 0
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 1
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: PUSH
63497: LD_INT 1
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: LD_INT 1
63509: PUSH
63510: EMPTY
63511: LIST
63512: LIST
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: LD_INT 1
63531: NEG
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 1
63539: PUSH
63540: LD_INT 2
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 0
63549: PUSH
63550: LD_INT 2
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 1
63559: NEG
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: EMPTY
63565: LIST
63566: LIST
63567: PUSH
63568: LD_INT 2
63570: NEG
63571: PUSH
63572: LD_INT 0
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 2
63581: NEG
63582: PUSH
63583: LD_INT 1
63585: NEG
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: EMPTY
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63605: LD_ADDR_VAR 0 52
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: LD_INT 2
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 1
63698: NEG
63699: PUSH
63700: LD_INT 1
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 2
63709: NEG
63710: PUSH
63711: LD_INT 0
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 2
63720: NEG
63721: PUSH
63722: LD_INT 1
63724: NEG
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 2
63732: NEG
63733: PUSH
63734: LD_INT 2
63736: NEG
63737: PUSH
63738: EMPTY
63739: LIST
63740: LIST
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: LIST
63746: LIST
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63756: LD_ADDR_VAR 0 53
63760: PUSH
63761: LD_INT 0
63763: PUSH
63764: LD_INT 0
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 0
63773: PUSH
63774: LD_INT 1
63776: NEG
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: LD_INT 1
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: LD_INT 1
63807: PUSH
63808: EMPTY
63809: LIST
63810: LIST
63811: PUSH
63812: LD_INT 1
63814: NEG
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 1
63825: NEG
63826: PUSH
63827: LD_INT 1
63829: NEG
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: NEG
63838: PUSH
63839: LD_INT 2
63841: NEG
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: LD_INT 2
63852: NEG
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PUSH
63858: LD_INT 1
63860: PUSH
63861: LD_INT 1
63863: NEG
63864: PUSH
63865: EMPTY
63866: LIST
63867: LIST
63868: PUSH
63869: LD_INT 2
63871: PUSH
63872: LD_INT 0
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 2
63881: PUSH
63882: LD_INT 1
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: LD_INT 2
63894: PUSH
63895: EMPTY
63896: LIST
63897: LIST
63898: PUSH
63899: LD_INT 1
63901: PUSH
63902: LD_INT 2
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 0
63911: PUSH
63912: LD_INT 2
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 1
63921: NEG
63922: PUSH
63923: LD_INT 1
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 2
63932: NEG
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 2
63943: NEG
63944: PUSH
63945: LD_INT 1
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 2
63955: NEG
63956: PUSH
63957: LD_INT 2
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: EMPTY
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: LIST
63973: LIST
63974: LIST
63975: LIST
63976: LIST
63977: LIST
63978: LIST
63979: LIST
63980: LIST
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63986: LD_ADDR_VAR 0 54
63990: PUSH
63991: LD_INT 0
63993: PUSH
63994: LD_INT 0
63996: PUSH
63997: EMPTY
63998: LIST
63999: LIST
64000: PUSH
64001: LD_INT 0
64003: PUSH
64004: LD_INT 1
64006: NEG
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 1
64014: PUSH
64015: LD_INT 0
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: LD_INT 1
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 0
64034: PUSH
64035: LD_INT 1
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 1
64044: NEG
64045: PUSH
64046: LD_INT 0
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PUSH
64053: LD_INT 1
64055: NEG
64056: PUSH
64057: LD_INT 1
64059: NEG
64060: PUSH
64061: EMPTY
64062: LIST
64063: LIST
64064: PUSH
64065: LD_INT 1
64067: NEG
64068: PUSH
64069: LD_INT 2
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 0
64079: PUSH
64080: LD_INT 2
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 1
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 2
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 2
64111: PUSH
64112: LD_INT 1
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: LD_INT 2
64124: PUSH
64125: EMPTY
64126: LIST
64127: LIST
64128: PUSH
64129: LD_INT 1
64131: PUSH
64132: LD_INT 2
64134: PUSH
64135: EMPTY
64136: LIST
64137: LIST
64138: PUSH
64139: LD_INT 0
64141: PUSH
64142: LD_INT 2
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 1
64151: NEG
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 2
64162: NEG
64163: PUSH
64164: LD_INT 0
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 2
64173: NEG
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 2
64185: NEG
64186: PUSH
64187: LD_INT 2
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64216: LD_ADDR_VAR 0 55
64220: PUSH
64221: LD_INT 0
64223: PUSH
64224: LD_INT 0
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 0
64233: PUSH
64234: LD_INT 1
64236: NEG
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 1
64244: PUSH
64245: LD_INT 0
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: LD_INT 1
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 0
64264: PUSH
64265: LD_INT 1
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 1
64274: NEG
64275: PUSH
64276: LD_INT 0
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 1
64285: NEG
64286: PUSH
64287: LD_INT 1
64289: NEG
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 1
64297: NEG
64298: PUSH
64299: LD_INT 2
64301: NEG
64302: PUSH
64303: EMPTY
64304: LIST
64305: LIST
64306: PUSH
64307: LD_INT 0
64309: PUSH
64310: LD_INT 2
64312: NEG
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 1
64320: PUSH
64321: LD_INT 1
64323: NEG
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 2
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 2
64341: PUSH
64342: LD_INT 1
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 2
64351: PUSH
64352: LD_INT 2
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 1
64361: PUSH
64362: LD_INT 2
64364: PUSH
64365: EMPTY
64366: LIST
64367: LIST
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: LD_INT 2
64374: PUSH
64375: EMPTY
64376: LIST
64377: LIST
64378: PUSH
64379: LD_INT 1
64381: NEG
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 2
64392: NEG
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 2
64403: NEG
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 2
64415: NEG
64416: PUSH
64417: LD_INT 2
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64446: LD_ADDR_VAR 0 56
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 0
64463: PUSH
64464: LD_INT 1
64466: NEG
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: LD_INT 0
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: LD_INT 1
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 0
64494: PUSH
64495: LD_INT 1
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: NEG
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: LD_INT 1
64519: NEG
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 1
64527: NEG
64528: PUSH
64529: LD_INT 2
64531: NEG
64532: PUSH
64533: EMPTY
64534: LIST
64535: LIST
64536: PUSH
64537: LD_INT 0
64539: PUSH
64540: LD_INT 2
64542: NEG
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 1
64550: PUSH
64551: LD_INT 1
64553: NEG
64554: PUSH
64555: EMPTY
64556: LIST
64557: LIST
64558: PUSH
64559: LD_INT 2
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 2
64571: PUSH
64572: LD_INT 1
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 2
64581: PUSH
64582: LD_INT 2
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: LD_INT 2
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 0
64601: PUSH
64602: LD_INT 2
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: NEG
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 2
64622: NEG
64623: PUSH
64624: LD_INT 0
64626: PUSH
64627: EMPTY
64628: LIST
64629: LIST
64630: PUSH
64631: LD_INT 2
64633: NEG
64634: PUSH
64635: LD_INT 1
64637: NEG
64638: PUSH
64639: EMPTY
64640: LIST
64641: LIST
64642: PUSH
64643: LD_INT 2
64645: NEG
64646: PUSH
64647: LD_INT 2
64649: NEG
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64676: LD_ADDR_VAR 0 57
64680: PUSH
64681: LD_INT 0
64683: PUSH
64684: LD_INT 0
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: LD_INT 1
64696: NEG
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 1
64704: PUSH
64705: LD_INT 0
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: LD_INT 1
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 0
64724: PUSH
64725: LD_INT 1
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: LD_INT 1
64749: NEG
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PUSH
64755: LD_INT 1
64757: NEG
64758: PUSH
64759: LD_INT 2
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 0
64769: PUSH
64770: LD_INT 2
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: LD_INT 1
64783: NEG
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 2
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 2
64801: PUSH
64802: LD_INT 1
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 2
64811: PUSH
64812: LD_INT 2
64814: PUSH
64815: EMPTY
64816: LIST
64817: LIST
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: LD_INT 2
64824: PUSH
64825: EMPTY
64826: LIST
64827: LIST
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: LD_INT 2
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 1
64841: NEG
64842: PUSH
64843: LD_INT 1
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 2
64852: NEG
64853: PUSH
64854: LD_INT 0
64856: PUSH
64857: EMPTY
64858: LIST
64859: LIST
64860: PUSH
64861: LD_INT 2
64863: NEG
64864: PUSH
64865: LD_INT 1
64867: NEG
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 2
64875: NEG
64876: PUSH
64877: LD_INT 2
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: LIST
64889: LIST
64890: LIST
64891: LIST
64892: LIST
64893: LIST
64894: LIST
64895: LIST
64896: LIST
64897: LIST
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64906: LD_ADDR_VAR 0 58
64910: PUSH
64911: LD_INT 0
64913: PUSH
64914: LD_INT 0
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 0
64923: PUSH
64924: LD_INT 1
64926: NEG
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 1
64934: PUSH
64935: LD_INT 0
64937: PUSH
64938: EMPTY
64939: LIST
64940: LIST
64941: PUSH
64942: LD_INT 1
64944: PUSH
64945: LD_INT 1
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 0
64954: PUSH
64955: LD_INT 1
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 1
64964: NEG
64965: PUSH
64966: LD_INT 0
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 1
64975: NEG
64976: PUSH
64977: LD_INT 1
64979: NEG
64980: PUSH
64981: EMPTY
64982: LIST
64983: LIST
64984: PUSH
64985: LD_INT 1
64987: NEG
64988: PUSH
64989: LD_INT 2
64991: NEG
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 0
64999: PUSH
65000: LD_INT 2
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 1
65010: PUSH
65011: LD_INT 1
65013: NEG
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 2
65021: PUSH
65022: LD_INT 0
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 2
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 2
65041: PUSH
65042: LD_INT 2
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: LD_INT 2
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 0
65061: PUSH
65062: LD_INT 2
65064: PUSH
65065: EMPTY
65066: LIST
65067: LIST
65068: PUSH
65069: LD_INT 1
65071: NEG
65072: PUSH
65073: LD_INT 1
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 2
65082: NEG
65083: PUSH
65084: LD_INT 0
65086: PUSH
65087: EMPTY
65088: LIST
65089: LIST
65090: PUSH
65091: LD_INT 2
65093: NEG
65094: PUSH
65095: LD_INT 1
65097: NEG
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 2
65105: NEG
65106: PUSH
65107: LD_INT 2
65109: NEG
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65136: LD_ADDR_VAR 0 59
65140: PUSH
65141: LD_INT 0
65143: PUSH
65144: LD_INT 0
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 0
65153: PUSH
65154: LD_INT 1
65156: NEG
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 1
65164: PUSH
65165: LD_INT 0
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 1
65174: PUSH
65175: LD_INT 1
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PUSH
65182: LD_INT 0
65184: PUSH
65185: LD_INT 1
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 1
65194: NEG
65195: PUSH
65196: LD_INT 0
65198: PUSH
65199: EMPTY
65200: LIST
65201: LIST
65202: PUSH
65203: LD_INT 1
65205: NEG
65206: PUSH
65207: LD_INT 1
65209: NEG
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65224: LD_ADDR_VAR 0 60
65228: PUSH
65229: LD_INT 0
65231: PUSH
65232: LD_INT 0
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 0
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 1
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 1
65262: PUSH
65263: LD_INT 1
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 0
65272: PUSH
65273: LD_INT 1
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: LD_INT 0
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 1
65293: NEG
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65312: LD_ADDR_VAR 0 61
65316: PUSH
65317: LD_INT 0
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: LD_INT 1
65332: NEG
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 1
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 1
65350: PUSH
65351: LD_INT 1
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 0
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 1
65370: NEG
65371: PUSH
65372: LD_INT 0
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 1
65381: NEG
65382: PUSH
65383: LD_INT 1
65385: NEG
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: LIST
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65400: LD_ADDR_VAR 0 62
65404: PUSH
65405: LD_INT 0
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: EMPTY
65412: LIST
65413: LIST
65414: PUSH
65415: LD_INT 0
65417: PUSH
65418: LD_INT 1
65420: NEG
65421: PUSH
65422: EMPTY
65423: LIST
65424: LIST
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: LD_INT 0
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 1
65438: PUSH
65439: LD_INT 1
65441: PUSH
65442: EMPTY
65443: LIST
65444: LIST
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: LD_INT 1
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 1
65458: NEG
65459: PUSH
65460: LD_INT 0
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 1
65469: NEG
65470: PUSH
65471: LD_INT 1
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65488: LD_ADDR_VAR 0 63
65492: PUSH
65493: LD_INT 0
65495: PUSH
65496: LD_INT 0
65498: PUSH
65499: EMPTY
65500: LIST
65501: LIST
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: LD_INT 1
65508: NEG
65509: PUSH
65510: EMPTY
65511: LIST
65512: LIST
65513: PUSH
65514: LD_INT 1
65516: PUSH
65517: LD_INT 0
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 1
65526: PUSH
65527: LD_INT 1
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: LD_INT 1
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 1
65557: NEG
65558: PUSH
65559: LD_INT 1
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: LIST
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65576: LD_ADDR_VAR 0 64
65580: PUSH
65581: LD_INT 0
65583: PUSH
65584: LD_INT 0
65586: PUSH
65587: EMPTY
65588: LIST
65589: LIST
65590: PUSH
65591: LD_INT 0
65593: PUSH
65594: LD_INT 1
65596: NEG
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 1
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 1
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: LD_INT 0
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: LD_INT 1
65649: NEG
65650: PUSH
65651: EMPTY
65652: LIST
65653: LIST
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: ST_TO_ADDR
// end ; 1 :
65664: GO 71561
65666: LD_INT 1
65668: DOUBLE
65669: EQUAL
65670: IFTRUE 65674
65672: GO 68297
65674: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65675: LD_ADDR_VAR 0 11
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: LD_INT 3
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 3
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: LD_INT 2
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: LIST
65718: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65719: LD_ADDR_VAR 0 12
65723: PUSH
65724: LD_INT 2
65726: PUSH
65727: LD_INT 1
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 3
65737: PUSH
65738: LD_INT 0
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 3
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: EMPTY
65756: LIST
65757: LIST
65758: LIST
65759: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65760: LD_ADDR_VAR 0 13
65764: PUSH
65765: LD_INT 3
65767: PUSH
65768: LD_INT 2
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 3
65777: PUSH
65778: LD_INT 3
65780: PUSH
65781: EMPTY
65782: LIST
65783: LIST
65784: PUSH
65785: LD_INT 2
65787: PUSH
65788: LD_INT 3
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: EMPTY
65796: LIST
65797: LIST
65798: LIST
65799: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65800: LD_ADDR_VAR 0 14
65804: PUSH
65805: LD_INT 1
65807: PUSH
65808: LD_INT 3
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: LD_INT 3
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 1
65827: NEG
65828: PUSH
65829: LD_INT 2
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: LIST
65840: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65841: LD_ADDR_VAR 0 15
65845: PUSH
65846: LD_INT 2
65848: NEG
65849: PUSH
65850: LD_INT 1
65852: PUSH
65853: EMPTY
65854: LIST
65855: LIST
65856: PUSH
65857: LD_INT 3
65859: NEG
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: PUSH
65868: LD_INT 3
65870: NEG
65871: PUSH
65872: LD_INT 1
65874: NEG
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: LIST
65884: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65885: LD_ADDR_VAR 0 16
65889: PUSH
65890: LD_INT 2
65892: NEG
65893: PUSH
65894: LD_INT 3
65896: NEG
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: PUSH
65902: LD_INT 3
65904: NEG
65905: PUSH
65906: LD_INT 2
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 3
65916: NEG
65917: PUSH
65918: LD_INT 3
65920: NEG
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: PUSH
65926: EMPTY
65927: LIST
65928: LIST
65929: LIST
65930: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65931: LD_ADDR_VAR 0 17
65935: PUSH
65936: LD_INT 1
65938: NEG
65939: PUSH
65940: LD_INT 3
65942: NEG
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 0
65950: PUSH
65951: LD_INT 3
65953: NEG
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 1
65961: PUSH
65962: LD_INT 2
65964: NEG
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: LIST
65974: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65975: LD_ADDR_VAR 0 18
65979: PUSH
65980: LD_INT 2
65982: PUSH
65983: LD_INT 1
65985: NEG
65986: PUSH
65987: EMPTY
65988: LIST
65989: LIST
65990: PUSH
65991: LD_INT 3
65993: PUSH
65994: LD_INT 0
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 3
66003: PUSH
66004: LD_INT 1
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: LIST
66015: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66016: LD_ADDR_VAR 0 19
66020: PUSH
66021: LD_INT 3
66023: PUSH
66024: LD_INT 2
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 3
66033: PUSH
66034: LD_INT 3
66036: PUSH
66037: EMPTY
66038: LIST
66039: LIST
66040: PUSH
66041: LD_INT 2
66043: PUSH
66044: LD_INT 3
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: LIST
66055: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66056: LD_ADDR_VAR 0 20
66060: PUSH
66061: LD_INT 1
66063: PUSH
66064: LD_INT 3
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 0
66073: PUSH
66074: LD_INT 3
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 1
66083: NEG
66084: PUSH
66085: LD_INT 2
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: LIST
66096: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66097: LD_ADDR_VAR 0 21
66101: PUSH
66102: LD_INT 2
66104: NEG
66105: PUSH
66106: LD_INT 1
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 3
66115: NEG
66116: PUSH
66117: LD_INT 0
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 3
66126: NEG
66127: PUSH
66128: LD_INT 1
66130: NEG
66131: PUSH
66132: EMPTY
66133: LIST
66134: LIST
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: LIST
66140: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66141: LD_ADDR_VAR 0 22
66145: PUSH
66146: LD_INT 2
66148: NEG
66149: PUSH
66150: LD_INT 3
66152: NEG
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 3
66160: NEG
66161: PUSH
66162: LD_INT 2
66164: NEG
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 3
66172: NEG
66173: PUSH
66174: LD_INT 3
66176: NEG
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: LIST
66186: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66187: LD_ADDR_VAR 0 23
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: LD_INT 3
66197: NEG
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 1
66205: NEG
66206: PUSH
66207: LD_INT 4
66209: NEG
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: PUSH
66218: LD_INT 3
66220: NEG
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: LIST
66230: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66231: LD_ADDR_VAR 0 24
66235: PUSH
66236: LD_INT 3
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 3
66248: PUSH
66249: LD_INT 1
66251: NEG
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 4
66259: PUSH
66260: LD_INT 1
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: LIST
66271: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66272: LD_ADDR_VAR 0 25
66276: PUSH
66277: LD_INT 3
66279: PUSH
66280: LD_INT 3
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: PUSH
66287: LD_INT 4
66289: PUSH
66290: LD_INT 3
66292: PUSH
66293: EMPTY
66294: LIST
66295: LIST
66296: PUSH
66297: LD_INT 3
66299: PUSH
66300: LD_INT 4
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: LIST
66311: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66312: LD_ADDR_VAR 0 26
66316: PUSH
66317: LD_INT 0
66319: PUSH
66320: LD_INT 3
66322: PUSH
66323: EMPTY
66324: LIST
66325: LIST
66326: PUSH
66327: LD_INT 1
66329: PUSH
66330: LD_INT 4
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 1
66339: NEG
66340: PUSH
66341: LD_INT 3
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: LIST
66352: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66353: LD_ADDR_VAR 0 27
66357: PUSH
66358: LD_INT 3
66360: NEG
66361: PUSH
66362: LD_INT 0
66364: PUSH
66365: EMPTY
66366: LIST
66367: LIST
66368: PUSH
66369: LD_INT 3
66371: NEG
66372: PUSH
66373: LD_INT 1
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 4
66382: NEG
66383: PUSH
66384: LD_INT 1
66386: NEG
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: LIST
66396: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66397: LD_ADDR_VAR 0 28
66401: PUSH
66402: LD_INT 3
66404: NEG
66405: PUSH
66406: LD_INT 3
66408: NEG
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 3
66416: NEG
66417: PUSH
66418: LD_INT 4
66420: NEG
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: LD_INT 4
66428: NEG
66429: PUSH
66430: LD_INT 3
66432: NEG
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: LIST
66442: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66443: LD_ADDR_VAR 0 29
66447: PUSH
66448: LD_INT 1
66450: NEG
66451: PUSH
66452: LD_INT 3
66454: NEG
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 0
66462: PUSH
66463: LD_INT 3
66465: NEG
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 1
66473: PUSH
66474: LD_INT 2
66476: NEG
66477: PUSH
66478: EMPTY
66479: LIST
66480: LIST
66481: PUSH
66482: LD_INT 1
66484: NEG
66485: PUSH
66486: LD_INT 4
66488: NEG
66489: PUSH
66490: EMPTY
66491: LIST
66492: LIST
66493: PUSH
66494: LD_INT 0
66496: PUSH
66497: LD_INT 4
66499: NEG
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 1
66507: PUSH
66508: LD_INT 3
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 1
66518: NEG
66519: PUSH
66520: LD_INT 5
66522: NEG
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 0
66530: PUSH
66531: LD_INT 5
66533: NEG
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 1
66541: PUSH
66542: LD_INT 4
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 1
66552: NEG
66553: PUSH
66554: LD_INT 6
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: LD_INT 6
66567: NEG
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: LD_INT 1
66575: PUSH
66576: LD_INT 5
66578: NEG
66579: PUSH
66580: EMPTY
66581: LIST
66582: LIST
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66598: LD_ADDR_VAR 0 30
66602: PUSH
66603: LD_INT 2
66605: PUSH
66606: LD_INT 1
66608: NEG
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: LD_INT 3
66616: PUSH
66617: LD_INT 0
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: LD_INT 3
66626: PUSH
66627: LD_INT 1
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 3
66636: PUSH
66637: LD_INT 1
66639: NEG
66640: PUSH
66641: EMPTY
66642: LIST
66643: LIST
66644: PUSH
66645: LD_INT 4
66647: PUSH
66648: LD_INT 0
66650: PUSH
66651: EMPTY
66652: LIST
66653: LIST
66654: PUSH
66655: LD_INT 4
66657: PUSH
66658: LD_INT 1
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 4
66667: PUSH
66668: LD_INT 1
66670: NEG
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 5
66678: PUSH
66679: LD_INT 0
66681: PUSH
66682: EMPTY
66683: LIST
66684: LIST
66685: PUSH
66686: LD_INT 5
66688: PUSH
66689: LD_INT 1
66691: PUSH
66692: EMPTY
66693: LIST
66694: LIST
66695: PUSH
66696: LD_INT 5
66698: PUSH
66699: LD_INT 1
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 6
66709: PUSH
66710: LD_INT 0
66712: PUSH
66713: EMPTY
66714: LIST
66715: LIST
66716: PUSH
66717: LD_INT 6
66719: PUSH
66720: LD_INT 1
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66741: LD_ADDR_VAR 0 31
66745: PUSH
66746: LD_INT 3
66748: PUSH
66749: LD_INT 2
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 3
66758: PUSH
66759: LD_INT 3
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 2
66768: PUSH
66769: LD_INT 3
66771: PUSH
66772: EMPTY
66773: LIST
66774: LIST
66775: PUSH
66776: LD_INT 4
66778: PUSH
66779: LD_INT 3
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 4
66788: PUSH
66789: LD_INT 4
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 3
66798: PUSH
66799: LD_INT 4
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 5
66808: PUSH
66809: LD_INT 4
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 5
66818: PUSH
66819: LD_INT 5
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 4
66828: PUSH
66829: LD_INT 5
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 6
66838: PUSH
66839: LD_INT 5
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 6
66848: PUSH
66849: LD_INT 6
66851: PUSH
66852: EMPTY
66853: LIST
66854: LIST
66855: PUSH
66856: LD_INT 5
66858: PUSH
66859: LD_INT 6
66861: PUSH
66862: EMPTY
66863: LIST
66864: LIST
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66880: LD_ADDR_VAR 0 32
66884: PUSH
66885: LD_INT 1
66887: PUSH
66888: LD_INT 3
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 0
66897: PUSH
66898: LD_INT 3
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 1
66907: NEG
66908: PUSH
66909: LD_INT 2
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 1
66918: PUSH
66919: LD_INT 4
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 0
66928: PUSH
66929: LD_INT 4
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 1
66938: NEG
66939: PUSH
66940: LD_INT 3
66942: PUSH
66943: EMPTY
66944: LIST
66945: LIST
66946: PUSH
66947: LD_INT 1
66949: PUSH
66950: LD_INT 5
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 0
66959: PUSH
66960: LD_INT 5
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: LD_INT 1
66969: NEG
66970: PUSH
66971: LD_INT 4
66973: PUSH
66974: EMPTY
66975: LIST
66976: LIST
66977: PUSH
66978: LD_INT 1
66980: PUSH
66981: LD_INT 6
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 0
66990: PUSH
66991: LD_INT 6
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 1
67000: NEG
67001: PUSH
67002: LD_INT 5
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: LIST
67013: LIST
67014: LIST
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67023: LD_ADDR_VAR 0 33
67027: PUSH
67028: LD_INT 2
67030: NEG
67031: PUSH
67032: LD_INT 1
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 3
67041: NEG
67042: PUSH
67043: LD_INT 0
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 3
67052: NEG
67053: PUSH
67054: LD_INT 1
67056: NEG
67057: PUSH
67058: EMPTY
67059: LIST
67060: LIST
67061: PUSH
67062: LD_INT 3
67064: NEG
67065: PUSH
67066: LD_INT 1
67068: PUSH
67069: EMPTY
67070: LIST
67071: LIST
67072: PUSH
67073: LD_INT 4
67075: NEG
67076: PUSH
67077: LD_INT 0
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 4
67086: NEG
67087: PUSH
67088: LD_INT 1
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 4
67098: NEG
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 5
67109: NEG
67110: PUSH
67111: LD_INT 0
67113: PUSH
67114: EMPTY
67115: LIST
67116: LIST
67117: PUSH
67118: LD_INT 5
67120: NEG
67121: PUSH
67122: LD_INT 1
67124: NEG
67125: PUSH
67126: EMPTY
67127: LIST
67128: LIST
67129: PUSH
67130: LD_INT 5
67132: NEG
67133: PUSH
67134: LD_INT 1
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: PUSH
67141: LD_INT 6
67143: NEG
67144: PUSH
67145: LD_INT 0
67147: PUSH
67148: EMPTY
67149: LIST
67150: LIST
67151: PUSH
67152: LD_INT 6
67154: NEG
67155: PUSH
67156: LD_INT 1
67158: NEG
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: PUSH
67164: EMPTY
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67178: LD_ADDR_VAR 0 34
67182: PUSH
67183: LD_INT 2
67185: NEG
67186: PUSH
67187: LD_INT 3
67189: NEG
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 3
67197: NEG
67198: PUSH
67199: LD_INT 2
67201: NEG
67202: PUSH
67203: EMPTY
67204: LIST
67205: LIST
67206: PUSH
67207: LD_INT 3
67209: NEG
67210: PUSH
67211: LD_INT 3
67213: NEG
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: LD_INT 3
67221: NEG
67222: PUSH
67223: LD_INT 4
67225: NEG
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 4
67233: NEG
67234: PUSH
67235: LD_INT 3
67237: NEG
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 4
67245: NEG
67246: PUSH
67247: LD_INT 4
67249: NEG
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: PUSH
67255: LD_INT 4
67257: NEG
67258: PUSH
67259: LD_INT 5
67261: NEG
67262: PUSH
67263: EMPTY
67264: LIST
67265: LIST
67266: PUSH
67267: LD_INT 5
67269: NEG
67270: PUSH
67271: LD_INT 4
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 5
67281: NEG
67282: PUSH
67283: LD_INT 5
67285: NEG
67286: PUSH
67287: EMPTY
67288: LIST
67289: LIST
67290: PUSH
67291: LD_INT 5
67293: NEG
67294: PUSH
67295: LD_INT 6
67297: NEG
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 6
67305: NEG
67306: PUSH
67307: LD_INT 5
67309: NEG
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PUSH
67315: LD_INT 6
67317: NEG
67318: PUSH
67319: LD_INT 6
67321: NEG
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: LIST
67333: LIST
67334: LIST
67335: LIST
67336: LIST
67337: LIST
67338: LIST
67339: LIST
67340: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67341: LD_ADDR_VAR 0 41
67345: PUSH
67346: LD_INT 0
67348: PUSH
67349: LD_INT 2
67351: NEG
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: LD_INT 1
67359: NEG
67360: PUSH
67361: LD_INT 3
67363: NEG
67364: PUSH
67365: EMPTY
67366: LIST
67367: LIST
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: LD_INT 2
67374: NEG
67375: PUSH
67376: EMPTY
67377: LIST
67378: LIST
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: LIST
67384: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67385: LD_ADDR_VAR 0 42
67389: PUSH
67390: LD_INT 2
67392: PUSH
67393: LD_INT 0
67395: PUSH
67396: EMPTY
67397: LIST
67398: LIST
67399: PUSH
67400: LD_INT 2
67402: PUSH
67403: LD_INT 1
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 3
67413: PUSH
67414: LD_INT 1
67416: PUSH
67417: EMPTY
67418: LIST
67419: LIST
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: LIST
67425: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67426: LD_ADDR_VAR 0 43
67430: PUSH
67431: LD_INT 2
67433: PUSH
67434: LD_INT 2
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: LD_INT 2
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: LD_INT 2
67453: PUSH
67454: LD_INT 3
67456: PUSH
67457: EMPTY
67458: LIST
67459: LIST
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: LIST
67465: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67466: LD_ADDR_VAR 0 44
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: LD_INT 2
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 1
67483: PUSH
67484: LD_INT 3
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 1
67493: NEG
67494: PUSH
67495: LD_INT 2
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: LIST
67506: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67507: LD_ADDR_VAR 0 45
67511: PUSH
67512: LD_INT 2
67514: NEG
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: PUSH
67523: LD_INT 2
67525: NEG
67526: PUSH
67527: LD_INT 1
67529: PUSH
67530: EMPTY
67531: LIST
67532: LIST
67533: PUSH
67534: LD_INT 3
67536: NEG
67537: PUSH
67538: LD_INT 1
67540: NEG
67541: PUSH
67542: EMPTY
67543: LIST
67544: LIST
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: LIST
67550: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67551: LD_ADDR_VAR 0 46
67555: PUSH
67556: LD_INT 2
67558: NEG
67559: PUSH
67560: LD_INT 2
67562: NEG
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: PUSH
67568: LD_INT 2
67570: NEG
67571: PUSH
67572: LD_INT 3
67574: NEG
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 3
67582: NEG
67583: PUSH
67584: LD_INT 2
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: LIST
67596: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67597: LD_ADDR_VAR 0 47
67601: PUSH
67602: LD_INT 2
67604: NEG
67605: PUSH
67606: LD_INT 3
67608: NEG
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 1
67616: NEG
67617: PUSH
67618: LD_INT 3
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67630: LD_ADDR_VAR 0 48
67634: PUSH
67635: LD_INT 1
67637: PUSH
67638: LD_INT 2
67640: NEG
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 2
67648: PUSH
67649: LD_INT 1
67651: NEG
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: EMPTY
67658: LIST
67659: LIST
67660: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67661: LD_ADDR_VAR 0 49
67665: PUSH
67666: LD_INT 3
67668: PUSH
67669: LD_INT 1
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 3
67678: PUSH
67679: LD_INT 2
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67690: LD_ADDR_VAR 0 50
67694: PUSH
67695: LD_INT 2
67697: PUSH
67698: LD_INT 3
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 1
67707: PUSH
67708: LD_INT 3
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67719: LD_ADDR_VAR 0 51
67723: PUSH
67724: LD_INT 1
67726: NEG
67727: PUSH
67728: LD_INT 2
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 2
67737: NEG
67738: PUSH
67739: LD_INT 1
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67750: LD_ADDR_VAR 0 52
67754: PUSH
67755: LD_INT 3
67757: NEG
67758: PUSH
67759: LD_INT 1
67761: NEG
67762: PUSH
67763: EMPTY
67764: LIST
67765: LIST
67766: PUSH
67767: LD_INT 3
67769: NEG
67770: PUSH
67771: LD_INT 2
67773: NEG
67774: PUSH
67775: EMPTY
67776: LIST
67777: LIST
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67783: LD_ADDR_VAR 0 53
67787: PUSH
67788: LD_INT 1
67790: NEG
67791: PUSH
67792: LD_INT 3
67794: NEG
67795: PUSH
67796: EMPTY
67797: LIST
67798: LIST
67799: PUSH
67800: LD_INT 0
67802: PUSH
67803: LD_INT 3
67805: NEG
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 1
67813: PUSH
67814: LD_INT 2
67816: NEG
67817: PUSH
67818: EMPTY
67819: LIST
67820: LIST
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: LIST
67826: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67827: LD_ADDR_VAR 0 54
67831: PUSH
67832: LD_INT 2
67834: PUSH
67835: LD_INT 1
67837: NEG
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 3
67845: PUSH
67846: LD_INT 0
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: PUSH
67853: LD_INT 3
67855: PUSH
67856: LD_INT 1
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: LIST
67867: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67868: LD_ADDR_VAR 0 55
67872: PUSH
67873: LD_INT 3
67875: PUSH
67876: LD_INT 2
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 3
67885: PUSH
67886: LD_INT 3
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 2
67895: PUSH
67896: LD_INT 3
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: LIST
67907: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67908: LD_ADDR_VAR 0 56
67912: PUSH
67913: LD_INT 1
67915: PUSH
67916: LD_INT 3
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 0
67925: PUSH
67926: LD_INT 3
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 1
67935: NEG
67936: PUSH
67937: LD_INT 2
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: LIST
67948: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67949: LD_ADDR_VAR 0 57
67953: PUSH
67954: LD_INT 2
67956: NEG
67957: PUSH
67958: LD_INT 1
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 3
67967: NEG
67968: PUSH
67969: LD_INT 0
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: PUSH
67976: LD_INT 3
67978: NEG
67979: PUSH
67980: LD_INT 1
67982: NEG
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: LIST
67992: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67993: LD_ADDR_VAR 0 58
67997: PUSH
67998: LD_INT 2
68000: NEG
68001: PUSH
68002: LD_INT 3
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 3
68012: NEG
68013: PUSH
68014: LD_INT 2
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 3
68024: NEG
68025: PUSH
68026: LD_INT 3
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: EMPTY
68035: LIST
68036: LIST
68037: LIST
68038: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68039: LD_ADDR_VAR 0 59
68043: PUSH
68044: LD_INT 1
68046: NEG
68047: PUSH
68048: LD_INT 2
68050: NEG
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 0
68058: PUSH
68059: LD_INT 2
68061: NEG
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: LD_INT 1
68072: NEG
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: LIST
68082: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68083: LD_ADDR_VAR 0 60
68087: PUSH
68088: LD_INT 1
68090: PUSH
68091: LD_INT 1
68093: NEG
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 2
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 2
68111: PUSH
68112: LD_INT 1
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: LIST
68123: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68124: LD_ADDR_VAR 0 61
68128: PUSH
68129: LD_INT 2
68131: PUSH
68132: LD_INT 1
68134: PUSH
68135: EMPTY
68136: LIST
68137: LIST
68138: PUSH
68139: LD_INT 2
68141: PUSH
68142: LD_INT 2
68144: PUSH
68145: EMPTY
68146: LIST
68147: LIST
68148: PUSH
68149: LD_INT 1
68151: PUSH
68152: LD_INT 2
68154: PUSH
68155: EMPTY
68156: LIST
68157: LIST
68158: PUSH
68159: EMPTY
68160: LIST
68161: LIST
68162: LIST
68163: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68164: LD_ADDR_VAR 0 62
68168: PUSH
68169: LD_INT 1
68171: PUSH
68172: LD_INT 2
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 0
68181: PUSH
68182: LD_INT 2
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 1
68191: NEG
68192: PUSH
68193: LD_INT 1
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: LIST
68204: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68205: LD_ADDR_VAR 0 63
68209: PUSH
68210: LD_INT 1
68212: NEG
68213: PUSH
68214: LD_INT 1
68216: PUSH
68217: EMPTY
68218: LIST
68219: LIST
68220: PUSH
68221: LD_INT 2
68223: NEG
68224: PUSH
68225: LD_INT 0
68227: PUSH
68228: EMPTY
68229: LIST
68230: LIST
68231: PUSH
68232: LD_INT 2
68234: NEG
68235: PUSH
68236: LD_INT 1
68238: NEG
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: LIST
68248: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68249: LD_ADDR_VAR 0 64
68253: PUSH
68254: LD_INT 1
68256: NEG
68257: PUSH
68258: LD_INT 2
68260: NEG
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 2
68268: NEG
68269: PUSH
68270: LD_INT 1
68272: NEG
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 2
68280: NEG
68281: PUSH
68282: LD_INT 2
68284: NEG
68285: PUSH
68286: EMPTY
68287: LIST
68288: LIST
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: LIST
68294: ST_TO_ADDR
// end ; 2 :
68295: GO 71561
68297: LD_INT 2
68299: DOUBLE
68300: EQUAL
68301: IFTRUE 68305
68303: GO 71560
68305: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68306: LD_ADDR_VAR 0 29
68310: PUSH
68311: LD_INT 4
68313: PUSH
68314: LD_INT 0
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 4
68323: PUSH
68324: LD_INT 1
68326: NEG
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 5
68334: PUSH
68335: LD_INT 0
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 5
68344: PUSH
68345: LD_INT 1
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 4
68354: PUSH
68355: LD_INT 1
68357: PUSH
68358: EMPTY
68359: LIST
68360: LIST
68361: PUSH
68362: LD_INT 3
68364: PUSH
68365: LD_INT 0
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 3
68374: PUSH
68375: LD_INT 1
68377: NEG
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 3
68385: PUSH
68386: LD_INT 2
68388: NEG
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 5
68396: PUSH
68397: LD_INT 2
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 3
68406: PUSH
68407: LD_INT 3
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 3
68416: PUSH
68417: LD_INT 2
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 4
68426: PUSH
68427: LD_INT 3
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 4
68436: PUSH
68437: LD_INT 4
68439: PUSH
68440: EMPTY
68441: LIST
68442: LIST
68443: PUSH
68444: LD_INT 3
68446: PUSH
68447: LD_INT 4
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 2
68456: PUSH
68457: LD_INT 3
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 2
68466: PUSH
68467: LD_INT 2
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 4
68476: PUSH
68477: LD_INT 2
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 2
68486: PUSH
68487: LD_INT 4
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 0
68496: PUSH
68497: LD_INT 4
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 0
68506: PUSH
68507: LD_INT 3
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 1
68516: PUSH
68517: LD_INT 4
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: PUSH
68524: LD_INT 1
68526: PUSH
68527: LD_INT 5
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 0
68536: PUSH
68537: LD_INT 5
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 1
68546: NEG
68547: PUSH
68548: LD_INT 4
68550: PUSH
68551: EMPTY
68552: LIST
68553: LIST
68554: PUSH
68555: LD_INT 1
68557: NEG
68558: PUSH
68559: LD_INT 3
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 2
68568: PUSH
68569: LD_INT 5
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 2
68578: NEG
68579: PUSH
68580: LD_INT 3
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 3
68589: NEG
68590: PUSH
68591: LD_INT 0
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 3
68600: NEG
68601: PUSH
68602: LD_INT 1
68604: NEG
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 2
68612: NEG
68613: PUSH
68614: LD_INT 0
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 2
68623: NEG
68624: PUSH
68625: LD_INT 1
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: PUSH
68632: LD_INT 3
68634: NEG
68635: PUSH
68636: LD_INT 1
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 4
68645: NEG
68646: PUSH
68647: LD_INT 0
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 4
68656: NEG
68657: PUSH
68658: LD_INT 1
68660: NEG
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 4
68668: NEG
68669: PUSH
68670: LD_INT 2
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 2
68680: NEG
68681: PUSH
68682: LD_INT 2
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 4
68691: NEG
68692: PUSH
68693: LD_INT 4
68695: NEG
68696: PUSH
68697: EMPTY
68698: LIST
68699: LIST
68700: PUSH
68701: LD_INT 4
68703: NEG
68704: PUSH
68705: LD_INT 5
68707: NEG
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 3
68715: NEG
68716: PUSH
68717: LD_INT 4
68719: NEG
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 3
68727: NEG
68728: PUSH
68729: LD_INT 3
68731: NEG
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 4
68739: NEG
68740: PUSH
68741: LD_INT 3
68743: NEG
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 5
68751: NEG
68752: PUSH
68753: LD_INT 4
68755: NEG
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 5
68763: NEG
68764: PUSH
68765: LD_INT 5
68767: NEG
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 3
68775: NEG
68776: PUSH
68777: LD_INT 5
68779: NEG
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: LD_INT 5
68787: NEG
68788: PUSH
68789: LD_INT 3
68791: NEG
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: LIST
68816: LIST
68817: LIST
68818: LIST
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68844: LD_ADDR_VAR 0 30
68848: PUSH
68849: LD_INT 4
68851: PUSH
68852: LD_INT 4
68854: PUSH
68855: EMPTY
68856: LIST
68857: LIST
68858: PUSH
68859: LD_INT 4
68861: PUSH
68862: LD_INT 3
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 5
68871: PUSH
68872: LD_INT 4
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 5
68881: PUSH
68882: LD_INT 5
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: PUSH
68889: LD_INT 4
68891: PUSH
68892: LD_INT 5
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 3
68901: PUSH
68902: LD_INT 4
68904: PUSH
68905: EMPTY
68906: LIST
68907: LIST
68908: PUSH
68909: LD_INT 3
68911: PUSH
68912: LD_INT 3
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 5
68921: PUSH
68922: LD_INT 3
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 3
68931: PUSH
68932: LD_INT 5
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 0
68941: PUSH
68942: LD_INT 3
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 0
68951: PUSH
68952: LD_INT 2
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 1
68961: PUSH
68962: LD_INT 3
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 1
68971: PUSH
68972: LD_INT 4
68974: PUSH
68975: EMPTY
68976: LIST
68977: LIST
68978: PUSH
68979: LD_INT 0
68981: PUSH
68982: LD_INT 4
68984: PUSH
68985: EMPTY
68986: LIST
68987: LIST
68988: PUSH
68989: LD_INT 1
68991: NEG
68992: PUSH
68993: LD_INT 3
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: PUSH
69000: LD_INT 1
69002: NEG
69003: PUSH
69004: LD_INT 2
69006: PUSH
69007: EMPTY
69008: LIST
69009: LIST
69010: PUSH
69011: LD_INT 2
69013: PUSH
69014: LD_INT 4
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: LD_INT 2
69023: NEG
69024: PUSH
69025: LD_INT 2
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: LD_INT 4
69034: NEG
69035: PUSH
69036: LD_INT 0
69038: PUSH
69039: EMPTY
69040: LIST
69041: LIST
69042: PUSH
69043: LD_INT 4
69045: NEG
69046: PUSH
69047: LD_INT 1
69049: NEG
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 3
69057: NEG
69058: PUSH
69059: LD_INT 0
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 3
69068: NEG
69069: PUSH
69070: LD_INT 1
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 4
69079: NEG
69080: PUSH
69081: LD_INT 1
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 5
69090: NEG
69091: PUSH
69092: LD_INT 0
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 5
69101: NEG
69102: PUSH
69103: LD_INT 1
69105: NEG
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: PUSH
69111: LD_INT 5
69113: NEG
69114: PUSH
69115: LD_INT 2
69117: NEG
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: PUSH
69123: LD_INT 3
69125: NEG
69126: PUSH
69127: LD_INT 2
69129: PUSH
69130: EMPTY
69131: LIST
69132: LIST
69133: PUSH
69134: LD_INT 3
69136: NEG
69137: PUSH
69138: LD_INT 3
69140: NEG
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 3
69148: NEG
69149: PUSH
69150: LD_INT 4
69152: NEG
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 2
69160: NEG
69161: PUSH
69162: LD_INT 3
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 2
69172: NEG
69173: PUSH
69174: LD_INT 2
69176: NEG
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 3
69184: NEG
69185: PUSH
69186: LD_INT 2
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: LD_INT 4
69196: NEG
69197: PUSH
69198: LD_INT 3
69200: NEG
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 4
69208: NEG
69209: PUSH
69210: LD_INT 4
69212: NEG
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 2
69220: NEG
69221: PUSH
69222: LD_INT 4
69224: NEG
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 4
69232: NEG
69233: PUSH
69234: LD_INT 2
69236: NEG
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 0
69244: PUSH
69245: LD_INT 4
69247: NEG
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 0
69255: PUSH
69256: LD_INT 5
69258: NEG
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 1
69266: PUSH
69267: LD_INT 4
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 1
69277: PUSH
69278: LD_INT 3
69280: NEG
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 0
69288: PUSH
69289: LD_INT 3
69291: NEG
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 1
69299: NEG
69300: PUSH
69301: LD_INT 4
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 1
69311: NEG
69312: PUSH
69313: LD_INT 5
69315: NEG
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 2
69323: PUSH
69324: LD_INT 3
69326: NEG
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 2
69334: NEG
69335: PUSH
69336: LD_INT 5
69338: NEG
69339: PUSH
69340: EMPTY
69341: LIST
69342: LIST
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: LIST
69348: LIST
69349: LIST
69350: LIST
69351: LIST
69352: LIST
69353: LIST
69354: LIST
69355: LIST
69356: LIST
69357: LIST
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: LIST
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: LIST
69380: LIST
69381: LIST
69382: LIST
69383: LIST
69384: LIST
69385: LIST
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69391: LD_ADDR_VAR 0 31
69395: PUSH
69396: LD_INT 0
69398: PUSH
69399: LD_INT 4
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: LD_INT 3
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 1
69418: PUSH
69419: LD_INT 4
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 1
69428: PUSH
69429: LD_INT 5
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 0
69438: PUSH
69439: LD_INT 5
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 1
69448: NEG
69449: PUSH
69450: LD_INT 4
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 1
69459: NEG
69460: PUSH
69461: LD_INT 3
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 2
69470: PUSH
69471: LD_INT 5
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 2
69480: NEG
69481: PUSH
69482: LD_INT 3
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 3
69491: NEG
69492: PUSH
69493: LD_INT 0
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 3
69502: NEG
69503: PUSH
69504: LD_INT 1
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 2
69514: NEG
69515: PUSH
69516: LD_INT 0
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 2
69525: NEG
69526: PUSH
69527: LD_INT 1
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 3
69536: NEG
69537: PUSH
69538: LD_INT 1
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: LD_INT 4
69547: NEG
69548: PUSH
69549: LD_INT 0
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 4
69558: NEG
69559: PUSH
69560: LD_INT 1
69562: NEG
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 4
69570: NEG
69571: PUSH
69572: LD_INT 2
69574: NEG
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 2
69582: NEG
69583: PUSH
69584: LD_INT 2
69586: PUSH
69587: EMPTY
69588: LIST
69589: LIST
69590: PUSH
69591: LD_INT 4
69593: NEG
69594: PUSH
69595: LD_INT 4
69597: NEG
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: PUSH
69603: LD_INT 4
69605: NEG
69606: PUSH
69607: LD_INT 5
69609: NEG
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 3
69617: NEG
69618: PUSH
69619: LD_INT 4
69621: NEG
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 3
69629: NEG
69630: PUSH
69631: LD_INT 3
69633: NEG
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 4
69641: NEG
69642: PUSH
69643: LD_INT 3
69645: NEG
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 5
69653: NEG
69654: PUSH
69655: LD_INT 4
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 5
69665: NEG
69666: PUSH
69667: LD_INT 5
69669: NEG
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 3
69677: NEG
69678: PUSH
69679: LD_INT 5
69681: NEG
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 5
69689: NEG
69690: PUSH
69691: LD_INT 3
69693: NEG
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 0
69701: PUSH
69702: LD_INT 3
69704: NEG
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 0
69712: PUSH
69713: LD_INT 4
69715: NEG
69716: PUSH
69717: EMPTY
69718: LIST
69719: LIST
69720: PUSH
69721: LD_INT 1
69723: PUSH
69724: LD_INT 3
69726: NEG
69727: PUSH
69728: EMPTY
69729: LIST
69730: LIST
69731: PUSH
69732: LD_INT 1
69734: PUSH
69735: LD_INT 2
69737: NEG
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 0
69745: PUSH
69746: LD_INT 2
69748: NEG
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 1
69756: NEG
69757: PUSH
69758: LD_INT 3
69760: NEG
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 1
69768: NEG
69769: PUSH
69770: LD_INT 4
69772: NEG
69773: PUSH
69774: EMPTY
69775: LIST
69776: LIST
69777: PUSH
69778: LD_INT 2
69780: PUSH
69781: LD_INT 2
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 2
69791: NEG
69792: PUSH
69793: LD_INT 4
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 4
69803: PUSH
69804: LD_INT 0
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 4
69813: PUSH
69814: LD_INT 1
69816: NEG
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 5
69824: PUSH
69825: LD_INT 0
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 5
69834: PUSH
69835: LD_INT 1
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 4
69844: PUSH
69845: LD_INT 1
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 3
69854: PUSH
69855: LD_INT 0
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 3
69864: PUSH
69865: LD_INT 1
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 3
69875: PUSH
69876: LD_INT 2
69878: NEG
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 5
69886: PUSH
69887: LD_INT 2
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69941: LD_ADDR_VAR 0 32
69945: PUSH
69946: LD_INT 4
69948: NEG
69949: PUSH
69950: LD_INT 0
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 4
69959: NEG
69960: PUSH
69961: LD_INT 1
69963: NEG
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 3
69971: NEG
69972: PUSH
69973: LD_INT 0
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 3
69982: NEG
69983: PUSH
69984: LD_INT 1
69986: PUSH
69987: EMPTY
69988: LIST
69989: LIST
69990: PUSH
69991: LD_INT 4
69993: NEG
69994: PUSH
69995: LD_INT 1
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 5
70004: NEG
70005: PUSH
70006: LD_INT 0
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 5
70015: NEG
70016: PUSH
70017: LD_INT 1
70019: NEG
70020: PUSH
70021: EMPTY
70022: LIST
70023: LIST
70024: PUSH
70025: LD_INT 5
70027: NEG
70028: PUSH
70029: LD_INT 2
70031: NEG
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 3
70039: NEG
70040: PUSH
70041: LD_INT 2
70043: PUSH
70044: EMPTY
70045: LIST
70046: LIST
70047: PUSH
70048: LD_INT 3
70050: NEG
70051: PUSH
70052: LD_INT 3
70054: NEG
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 3
70062: NEG
70063: PUSH
70064: LD_INT 4
70066: NEG
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 2
70074: NEG
70075: PUSH
70076: LD_INT 3
70078: NEG
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 2
70086: NEG
70087: PUSH
70088: LD_INT 2
70090: NEG
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PUSH
70096: LD_INT 3
70098: NEG
70099: PUSH
70100: LD_INT 2
70102: NEG
70103: PUSH
70104: EMPTY
70105: LIST
70106: LIST
70107: PUSH
70108: LD_INT 4
70110: NEG
70111: PUSH
70112: LD_INT 3
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 4
70122: NEG
70123: PUSH
70124: LD_INT 4
70126: NEG
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 2
70134: NEG
70135: PUSH
70136: LD_INT 4
70138: NEG
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 4
70146: NEG
70147: PUSH
70148: LD_INT 2
70150: NEG
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 0
70158: PUSH
70159: LD_INT 4
70161: NEG
70162: PUSH
70163: EMPTY
70164: LIST
70165: LIST
70166: PUSH
70167: LD_INT 0
70169: PUSH
70170: LD_INT 5
70172: NEG
70173: PUSH
70174: EMPTY
70175: LIST
70176: LIST
70177: PUSH
70178: LD_INT 1
70180: PUSH
70181: LD_INT 4
70183: NEG
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 1
70191: PUSH
70192: LD_INT 3
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 0
70202: PUSH
70203: LD_INT 3
70205: NEG
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 1
70213: NEG
70214: PUSH
70215: LD_INT 4
70217: NEG
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 1
70225: NEG
70226: PUSH
70227: LD_INT 5
70229: NEG
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 2
70237: PUSH
70238: LD_INT 3
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 2
70248: NEG
70249: PUSH
70250: LD_INT 5
70252: NEG
70253: PUSH
70254: EMPTY
70255: LIST
70256: LIST
70257: PUSH
70258: LD_INT 3
70260: PUSH
70261: LD_INT 0
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 3
70270: PUSH
70271: LD_INT 1
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 4
70281: PUSH
70282: LD_INT 0
70284: PUSH
70285: EMPTY
70286: LIST
70287: LIST
70288: PUSH
70289: LD_INT 4
70291: PUSH
70292: LD_INT 1
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 3
70301: PUSH
70302: LD_INT 1
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 2
70311: PUSH
70312: LD_INT 0
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 2
70321: PUSH
70322: LD_INT 1
70324: NEG
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 2
70332: PUSH
70333: LD_INT 2
70335: NEG
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 4
70343: PUSH
70344: LD_INT 2
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 4
70353: PUSH
70354: LD_INT 4
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 4
70363: PUSH
70364: LD_INT 3
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 5
70373: PUSH
70374: LD_INT 4
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 5
70383: PUSH
70384: LD_INT 5
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 4
70393: PUSH
70394: LD_INT 5
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 3
70403: PUSH
70404: LD_INT 4
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 3
70413: PUSH
70414: LD_INT 3
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 5
70423: PUSH
70424: LD_INT 3
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 3
70433: PUSH
70434: LD_INT 5
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: LIST
70452: LIST
70453: LIST
70454: LIST
70455: LIST
70456: LIST
70457: LIST
70458: LIST
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70488: LD_ADDR_VAR 0 33
70492: PUSH
70493: LD_INT 4
70495: NEG
70496: PUSH
70497: LD_INT 4
70499: NEG
70500: PUSH
70501: EMPTY
70502: LIST
70503: LIST
70504: PUSH
70505: LD_INT 4
70507: NEG
70508: PUSH
70509: LD_INT 5
70511: NEG
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 3
70519: NEG
70520: PUSH
70521: LD_INT 4
70523: NEG
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 3
70531: NEG
70532: PUSH
70533: LD_INT 3
70535: NEG
70536: PUSH
70537: EMPTY
70538: LIST
70539: LIST
70540: PUSH
70541: LD_INT 4
70543: NEG
70544: PUSH
70545: LD_INT 3
70547: NEG
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 5
70555: NEG
70556: PUSH
70557: LD_INT 4
70559: NEG
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 5
70567: NEG
70568: PUSH
70569: LD_INT 5
70571: NEG
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 3
70579: NEG
70580: PUSH
70581: LD_INT 5
70583: NEG
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 5
70591: NEG
70592: PUSH
70593: LD_INT 3
70595: NEG
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: PUSH
70601: LD_INT 0
70603: PUSH
70604: LD_INT 3
70606: NEG
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 0
70614: PUSH
70615: LD_INT 4
70617: NEG
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 1
70625: PUSH
70626: LD_INT 3
70628: NEG
70629: PUSH
70630: EMPTY
70631: LIST
70632: LIST
70633: PUSH
70634: LD_INT 1
70636: PUSH
70637: LD_INT 2
70639: NEG
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 0
70647: PUSH
70648: LD_INT 2
70650: NEG
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 1
70658: NEG
70659: PUSH
70660: LD_INT 3
70662: NEG
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 1
70670: NEG
70671: PUSH
70672: LD_INT 4
70674: NEG
70675: PUSH
70676: EMPTY
70677: LIST
70678: LIST
70679: PUSH
70680: LD_INT 2
70682: PUSH
70683: LD_INT 2
70685: NEG
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 2
70693: NEG
70694: PUSH
70695: LD_INT 4
70697: NEG
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 4
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: LD_INT 4
70715: PUSH
70716: LD_INT 1
70718: NEG
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: PUSH
70724: LD_INT 5
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: EMPTY
70731: LIST
70732: LIST
70733: PUSH
70734: LD_INT 5
70736: PUSH
70737: LD_INT 1
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 4
70746: PUSH
70747: LD_INT 1
70749: PUSH
70750: EMPTY
70751: LIST
70752: LIST
70753: PUSH
70754: LD_INT 3
70756: PUSH
70757: LD_INT 0
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 3
70766: PUSH
70767: LD_INT 1
70769: NEG
70770: PUSH
70771: EMPTY
70772: LIST
70773: LIST
70774: PUSH
70775: LD_INT 3
70777: PUSH
70778: LD_INT 2
70780: NEG
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 5
70788: PUSH
70789: LD_INT 2
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 3
70798: PUSH
70799: LD_INT 3
70801: PUSH
70802: EMPTY
70803: LIST
70804: LIST
70805: PUSH
70806: LD_INT 3
70808: PUSH
70809: LD_INT 2
70811: PUSH
70812: EMPTY
70813: LIST
70814: LIST
70815: PUSH
70816: LD_INT 4
70818: PUSH
70819: LD_INT 3
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: PUSH
70826: LD_INT 4
70828: PUSH
70829: LD_INT 4
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: PUSH
70836: LD_INT 3
70838: PUSH
70839: LD_INT 4
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 2
70848: PUSH
70849: LD_INT 3
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 2
70858: PUSH
70859: LD_INT 2
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: LD_INT 4
70868: PUSH
70869: LD_INT 2
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 2
70878: PUSH
70879: LD_INT 4
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 0
70888: PUSH
70889: LD_INT 4
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 0
70898: PUSH
70899: LD_INT 3
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 1
70908: PUSH
70909: LD_INT 4
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 1
70918: PUSH
70919: LD_INT 5
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 0
70928: PUSH
70929: LD_INT 5
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 1
70938: NEG
70939: PUSH
70940: LD_INT 4
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 1
70949: NEG
70950: PUSH
70951: LD_INT 3
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 2
70960: PUSH
70961: LD_INT 5
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 2
70970: NEG
70971: PUSH
70972: LD_INT 3
70974: PUSH
70975: EMPTY
70976: LIST
70977: LIST
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: LIST
71013: LIST
71014: LIST
71015: LIST
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71026: LD_ADDR_VAR 0 34
71030: PUSH
71031: LD_INT 0
71033: PUSH
71034: LD_INT 4
71036: NEG
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 0
71044: PUSH
71045: LD_INT 5
71047: NEG
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: PUSH
71053: LD_INT 1
71055: PUSH
71056: LD_INT 4
71058: NEG
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 1
71066: PUSH
71067: LD_INT 3
71069: NEG
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 0
71077: PUSH
71078: LD_INT 3
71080: NEG
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 1
71088: NEG
71089: PUSH
71090: LD_INT 4
71092: NEG
71093: PUSH
71094: EMPTY
71095: LIST
71096: LIST
71097: PUSH
71098: LD_INT 1
71100: NEG
71101: PUSH
71102: LD_INT 5
71104: NEG
71105: PUSH
71106: EMPTY
71107: LIST
71108: LIST
71109: PUSH
71110: LD_INT 2
71112: PUSH
71113: LD_INT 3
71115: NEG
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 2
71123: NEG
71124: PUSH
71125: LD_INT 5
71127: NEG
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 3
71135: PUSH
71136: LD_INT 0
71138: PUSH
71139: EMPTY
71140: LIST
71141: LIST
71142: PUSH
71143: LD_INT 3
71145: PUSH
71146: LD_INT 1
71148: NEG
71149: PUSH
71150: EMPTY
71151: LIST
71152: LIST
71153: PUSH
71154: LD_INT 4
71156: PUSH
71157: LD_INT 0
71159: PUSH
71160: EMPTY
71161: LIST
71162: LIST
71163: PUSH
71164: LD_INT 4
71166: PUSH
71167: LD_INT 1
71169: PUSH
71170: EMPTY
71171: LIST
71172: LIST
71173: PUSH
71174: LD_INT 3
71176: PUSH
71177: LD_INT 1
71179: PUSH
71180: EMPTY
71181: LIST
71182: LIST
71183: PUSH
71184: LD_INT 2
71186: PUSH
71187: LD_INT 0
71189: PUSH
71190: EMPTY
71191: LIST
71192: LIST
71193: PUSH
71194: LD_INT 2
71196: PUSH
71197: LD_INT 1
71199: NEG
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PUSH
71205: LD_INT 2
71207: PUSH
71208: LD_INT 2
71210: NEG
71211: PUSH
71212: EMPTY
71213: LIST
71214: LIST
71215: PUSH
71216: LD_INT 4
71218: PUSH
71219: LD_INT 2
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 4
71228: PUSH
71229: LD_INT 4
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 4
71238: PUSH
71239: LD_INT 3
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 5
71248: PUSH
71249: LD_INT 4
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 5
71258: PUSH
71259: LD_INT 5
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 4
71268: PUSH
71269: LD_INT 5
71271: PUSH
71272: EMPTY
71273: LIST
71274: LIST
71275: PUSH
71276: LD_INT 3
71278: PUSH
71279: LD_INT 4
71281: PUSH
71282: EMPTY
71283: LIST
71284: LIST
71285: PUSH
71286: LD_INT 3
71288: PUSH
71289: LD_INT 3
71291: PUSH
71292: EMPTY
71293: LIST
71294: LIST
71295: PUSH
71296: LD_INT 5
71298: PUSH
71299: LD_INT 3
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 3
71308: PUSH
71309: LD_INT 5
71311: PUSH
71312: EMPTY
71313: LIST
71314: LIST
71315: PUSH
71316: LD_INT 0
71318: PUSH
71319: LD_INT 3
71321: PUSH
71322: EMPTY
71323: LIST
71324: LIST
71325: PUSH
71326: LD_INT 0
71328: PUSH
71329: LD_INT 2
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 1
71338: PUSH
71339: LD_INT 3
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 1
71348: PUSH
71349: LD_INT 4
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 0
71358: PUSH
71359: LD_INT 4
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 1
71368: NEG
71369: PUSH
71370: LD_INT 3
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 1
71379: NEG
71380: PUSH
71381: LD_INT 2
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 2
71390: PUSH
71391: LD_INT 4
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 2
71400: NEG
71401: PUSH
71402: LD_INT 2
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 4
71411: NEG
71412: PUSH
71413: LD_INT 0
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 4
71422: NEG
71423: PUSH
71424: LD_INT 1
71426: NEG
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 3
71434: NEG
71435: PUSH
71436: LD_INT 0
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 3
71445: NEG
71446: PUSH
71447: LD_INT 1
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 4
71456: NEG
71457: PUSH
71458: LD_INT 1
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 5
71467: NEG
71468: PUSH
71469: LD_INT 0
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 5
71478: NEG
71479: PUSH
71480: LD_INT 1
71482: NEG
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 5
71490: NEG
71491: PUSH
71492: LD_INT 2
71494: NEG
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: PUSH
71500: LD_INT 3
71502: NEG
71503: PUSH
71504: LD_INT 2
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: LIST
71537: LIST
71538: LIST
71539: LIST
71540: LIST
71541: LIST
71542: LIST
71543: LIST
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: ST_TO_ADDR
// end ; end ;
71558: GO 71561
71560: POP
// case btype of b_depot , b_warehouse :
71561: LD_VAR 0 1
71565: PUSH
71566: LD_INT 0
71568: DOUBLE
71569: EQUAL
71570: IFTRUE 71580
71572: LD_INT 1
71574: DOUBLE
71575: EQUAL
71576: IFTRUE 71580
71578: GO 71781
71580: POP
// case nation of nation_american :
71581: LD_VAR 0 5
71585: PUSH
71586: LD_INT 1
71588: DOUBLE
71589: EQUAL
71590: IFTRUE 71594
71592: GO 71650
71594: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71595: LD_ADDR_VAR 0 9
71599: PUSH
71600: LD_VAR 0 11
71604: PUSH
71605: LD_VAR 0 12
71609: PUSH
71610: LD_VAR 0 13
71614: PUSH
71615: LD_VAR 0 14
71619: PUSH
71620: LD_VAR 0 15
71624: PUSH
71625: LD_VAR 0 16
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: PUSH
71638: LD_VAR 0 4
71642: PUSH
71643: LD_INT 1
71645: PLUS
71646: ARRAY
71647: ST_TO_ADDR
71648: GO 71779
71650: LD_INT 2
71652: DOUBLE
71653: EQUAL
71654: IFTRUE 71658
71656: GO 71714
71658: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71659: LD_ADDR_VAR 0 9
71663: PUSH
71664: LD_VAR 0 17
71668: PUSH
71669: LD_VAR 0 18
71673: PUSH
71674: LD_VAR 0 19
71678: PUSH
71679: LD_VAR 0 20
71683: PUSH
71684: LD_VAR 0 21
71688: PUSH
71689: LD_VAR 0 22
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: PUSH
71702: LD_VAR 0 4
71706: PUSH
71707: LD_INT 1
71709: PLUS
71710: ARRAY
71711: ST_TO_ADDR
71712: GO 71779
71714: LD_INT 3
71716: DOUBLE
71717: EQUAL
71718: IFTRUE 71722
71720: GO 71778
71722: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71723: LD_ADDR_VAR 0 9
71727: PUSH
71728: LD_VAR 0 23
71732: PUSH
71733: LD_VAR 0 24
71737: PUSH
71738: LD_VAR 0 25
71742: PUSH
71743: LD_VAR 0 26
71747: PUSH
71748: LD_VAR 0 27
71752: PUSH
71753: LD_VAR 0 28
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: LIST
71762: LIST
71763: LIST
71764: LIST
71765: PUSH
71766: LD_VAR 0 4
71770: PUSH
71771: LD_INT 1
71773: PLUS
71774: ARRAY
71775: ST_TO_ADDR
71776: GO 71779
71778: POP
71779: GO 72334
71781: LD_INT 2
71783: DOUBLE
71784: EQUAL
71785: IFTRUE 71795
71787: LD_INT 3
71789: DOUBLE
71790: EQUAL
71791: IFTRUE 71795
71793: GO 71851
71795: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71796: LD_ADDR_VAR 0 9
71800: PUSH
71801: LD_VAR 0 29
71805: PUSH
71806: LD_VAR 0 30
71810: PUSH
71811: LD_VAR 0 31
71815: PUSH
71816: LD_VAR 0 32
71820: PUSH
71821: LD_VAR 0 33
71825: PUSH
71826: LD_VAR 0 34
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: PUSH
71839: LD_VAR 0 4
71843: PUSH
71844: LD_INT 1
71846: PLUS
71847: ARRAY
71848: ST_TO_ADDR
71849: GO 72334
71851: LD_INT 16
71853: DOUBLE
71854: EQUAL
71855: IFTRUE 71913
71857: LD_INT 17
71859: DOUBLE
71860: EQUAL
71861: IFTRUE 71913
71863: LD_INT 18
71865: DOUBLE
71866: EQUAL
71867: IFTRUE 71913
71869: LD_INT 19
71871: DOUBLE
71872: EQUAL
71873: IFTRUE 71913
71875: LD_INT 22
71877: DOUBLE
71878: EQUAL
71879: IFTRUE 71913
71881: LD_INT 20
71883: DOUBLE
71884: EQUAL
71885: IFTRUE 71913
71887: LD_INT 21
71889: DOUBLE
71890: EQUAL
71891: IFTRUE 71913
71893: LD_INT 23
71895: DOUBLE
71896: EQUAL
71897: IFTRUE 71913
71899: LD_INT 24
71901: DOUBLE
71902: EQUAL
71903: IFTRUE 71913
71905: LD_INT 25
71907: DOUBLE
71908: EQUAL
71909: IFTRUE 71913
71911: GO 71969
71913: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71914: LD_ADDR_VAR 0 9
71918: PUSH
71919: LD_VAR 0 35
71923: PUSH
71924: LD_VAR 0 36
71928: PUSH
71929: LD_VAR 0 37
71933: PUSH
71934: LD_VAR 0 38
71938: PUSH
71939: LD_VAR 0 39
71943: PUSH
71944: LD_VAR 0 40
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: PUSH
71957: LD_VAR 0 4
71961: PUSH
71962: LD_INT 1
71964: PLUS
71965: ARRAY
71966: ST_TO_ADDR
71967: GO 72334
71969: LD_INT 6
71971: DOUBLE
71972: EQUAL
71973: IFTRUE 72025
71975: LD_INT 7
71977: DOUBLE
71978: EQUAL
71979: IFTRUE 72025
71981: LD_INT 8
71983: DOUBLE
71984: EQUAL
71985: IFTRUE 72025
71987: LD_INT 13
71989: DOUBLE
71990: EQUAL
71991: IFTRUE 72025
71993: LD_INT 12
71995: DOUBLE
71996: EQUAL
71997: IFTRUE 72025
71999: LD_INT 15
72001: DOUBLE
72002: EQUAL
72003: IFTRUE 72025
72005: LD_INT 11
72007: DOUBLE
72008: EQUAL
72009: IFTRUE 72025
72011: LD_INT 14
72013: DOUBLE
72014: EQUAL
72015: IFTRUE 72025
72017: LD_INT 10
72019: DOUBLE
72020: EQUAL
72021: IFTRUE 72025
72023: GO 72081
72025: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72026: LD_ADDR_VAR 0 9
72030: PUSH
72031: LD_VAR 0 41
72035: PUSH
72036: LD_VAR 0 42
72040: PUSH
72041: LD_VAR 0 43
72045: PUSH
72046: LD_VAR 0 44
72050: PUSH
72051: LD_VAR 0 45
72055: PUSH
72056: LD_VAR 0 46
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: LIST
72065: LIST
72066: LIST
72067: LIST
72068: PUSH
72069: LD_VAR 0 4
72073: PUSH
72074: LD_INT 1
72076: PLUS
72077: ARRAY
72078: ST_TO_ADDR
72079: GO 72334
72081: LD_INT 36
72083: DOUBLE
72084: EQUAL
72085: IFTRUE 72089
72087: GO 72145
72089: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72090: LD_ADDR_VAR 0 9
72094: PUSH
72095: LD_VAR 0 47
72099: PUSH
72100: LD_VAR 0 48
72104: PUSH
72105: LD_VAR 0 49
72109: PUSH
72110: LD_VAR 0 50
72114: PUSH
72115: LD_VAR 0 51
72119: PUSH
72120: LD_VAR 0 52
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: PUSH
72133: LD_VAR 0 4
72137: PUSH
72138: LD_INT 1
72140: PLUS
72141: ARRAY
72142: ST_TO_ADDR
72143: GO 72334
72145: LD_INT 4
72147: DOUBLE
72148: EQUAL
72149: IFTRUE 72171
72151: LD_INT 5
72153: DOUBLE
72154: EQUAL
72155: IFTRUE 72171
72157: LD_INT 34
72159: DOUBLE
72160: EQUAL
72161: IFTRUE 72171
72163: LD_INT 37
72165: DOUBLE
72166: EQUAL
72167: IFTRUE 72171
72169: GO 72227
72171: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72172: LD_ADDR_VAR 0 9
72176: PUSH
72177: LD_VAR 0 53
72181: PUSH
72182: LD_VAR 0 54
72186: PUSH
72187: LD_VAR 0 55
72191: PUSH
72192: LD_VAR 0 56
72196: PUSH
72197: LD_VAR 0 57
72201: PUSH
72202: LD_VAR 0 58
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: PUSH
72215: LD_VAR 0 4
72219: PUSH
72220: LD_INT 1
72222: PLUS
72223: ARRAY
72224: ST_TO_ADDR
72225: GO 72334
72227: LD_INT 31
72229: DOUBLE
72230: EQUAL
72231: IFTRUE 72277
72233: LD_INT 32
72235: DOUBLE
72236: EQUAL
72237: IFTRUE 72277
72239: LD_INT 33
72241: DOUBLE
72242: EQUAL
72243: IFTRUE 72277
72245: LD_INT 27
72247: DOUBLE
72248: EQUAL
72249: IFTRUE 72277
72251: LD_INT 26
72253: DOUBLE
72254: EQUAL
72255: IFTRUE 72277
72257: LD_INT 28
72259: DOUBLE
72260: EQUAL
72261: IFTRUE 72277
72263: LD_INT 29
72265: DOUBLE
72266: EQUAL
72267: IFTRUE 72277
72269: LD_INT 30
72271: DOUBLE
72272: EQUAL
72273: IFTRUE 72277
72275: GO 72333
72277: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72278: LD_ADDR_VAR 0 9
72282: PUSH
72283: LD_VAR 0 59
72287: PUSH
72288: LD_VAR 0 60
72292: PUSH
72293: LD_VAR 0 61
72297: PUSH
72298: LD_VAR 0 62
72302: PUSH
72303: LD_VAR 0 63
72307: PUSH
72308: LD_VAR 0 64
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: PUSH
72321: LD_VAR 0 4
72325: PUSH
72326: LD_INT 1
72328: PLUS
72329: ARRAY
72330: ST_TO_ADDR
72331: GO 72334
72333: POP
// temp_list2 = [ ] ;
72334: LD_ADDR_VAR 0 10
72338: PUSH
72339: EMPTY
72340: ST_TO_ADDR
// for i in temp_list do
72341: LD_ADDR_VAR 0 8
72345: PUSH
72346: LD_VAR 0 9
72350: PUSH
72351: FOR_IN
72352: IFFALSE 72404
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72354: LD_ADDR_VAR 0 10
72358: PUSH
72359: LD_VAR 0 10
72363: PUSH
72364: LD_VAR 0 8
72368: PUSH
72369: LD_INT 1
72371: ARRAY
72372: PUSH
72373: LD_VAR 0 2
72377: PLUS
72378: PUSH
72379: LD_VAR 0 8
72383: PUSH
72384: LD_INT 2
72386: ARRAY
72387: PUSH
72388: LD_VAR 0 3
72392: PLUS
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: EMPTY
72399: LIST
72400: ADD
72401: ST_TO_ADDR
72402: GO 72351
72404: POP
72405: POP
// result = temp_list2 ;
72406: LD_ADDR_VAR 0 7
72410: PUSH
72411: LD_VAR 0 10
72415: ST_TO_ADDR
// end ;
72416: LD_VAR 0 7
72420: RET
// export function EnemyInRange ( unit , dist ) ; begin
72421: LD_INT 0
72423: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72424: LD_ADDR_VAR 0 3
72428: PUSH
72429: LD_VAR 0 1
72433: PPUSH
72434: CALL_OW 255
72438: PPUSH
72439: LD_VAR 0 1
72443: PPUSH
72444: CALL_OW 250
72448: PPUSH
72449: LD_VAR 0 1
72453: PPUSH
72454: CALL_OW 251
72458: PPUSH
72459: LD_VAR 0 2
72463: PPUSH
72464: CALL 45794 0 4
72468: PUSH
72469: LD_INT 4
72471: ARRAY
72472: ST_TO_ADDR
// end ;
72473: LD_VAR 0 3
72477: RET
// export function PlayerSeeMe ( unit ) ; begin
72478: LD_INT 0
72480: PPUSH
// result := See ( your_side , unit ) ;
72481: LD_ADDR_VAR 0 2
72485: PUSH
72486: LD_OWVAR 2
72490: PPUSH
72491: LD_VAR 0 1
72495: PPUSH
72496: CALL_OW 292
72500: ST_TO_ADDR
// end ;
72501: LD_VAR 0 2
72505: RET
// export function ReverseDir ( unit ) ; begin
72506: LD_INT 0
72508: PPUSH
// if not unit then
72509: LD_VAR 0 1
72513: NOT
72514: IFFALSE 72518
// exit ;
72516: GO 72541
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72518: LD_ADDR_VAR 0 2
72522: PUSH
72523: LD_VAR 0 1
72527: PPUSH
72528: CALL_OW 254
72532: PUSH
72533: LD_INT 3
72535: PLUS
72536: PUSH
72537: LD_INT 6
72539: MOD
72540: ST_TO_ADDR
// end ;
72541: LD_VAR 0 2
72545: RET
// export function ReverseArray ( array ) ; var i ; begin
72546: LD_INT 0
72548: PPUSH
72549: PPUSH
// if not array then
72550: LD_VAR 0 1
72554: NOT
72555: IFFALSE 72559
// exit ;
72557: GO 72614
// result := [ ] ;
72559: LD_ADDR_VAR 0 2
72563: PUSH
72564: EMPTY
72565: ST_TO_ADDR
// for i := array downto 1 do
72566: LD_ADDR_VAR 0 3
72570: PUSH
72571: DOUBLE
72572: LD_VAR 0 1
72576: INC
72577: ST_TO_ADDR
72578: LD_INT 1
72580: PUSH
72581: FOR_DOWNTO
72582: IFFALSE 72612
// result := Join ( result , array [ i ] ) ;
72584: LD_ADDR_VAR 0 2
72588: PUSH
72589: LD_VAR 0 2
72593: PPUSH
72594: LD_VAR 0 1
72598: PUSH
72599: LD_VAR 0 3
72603: ARRAY
72604: PPUSH
72605: CALL 77270 0 2
72609: ST_TO_ADDR
72610: GO 72581
72612: POP
72613: POP
// end ;
72614: LD_VAR 0 2
72618: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72619: LD_INT 0
72621: PPUSH
72622: PPUSH
72623: PPUSH
72624: PPUSH
72625: PPUSH
72626: PPUSH
// if not unit or not hexes then
72627: LD_VAR 0 1
72631: NOT
72632: PUSH
72633: LD_VAR 0 2
72637: NOT
72638: OR
72639: IFFALSE 72643
// exit ;
72641: GO 72766
// dist := 9999 ;
72643: LD_ADDR_VAR 0 5
72647: PUSH
72648: LD_INT 9999
72650: ST_TO_ADDR
// for i = 1 to hexes do
72651: LD_ADDR_VAR 0 4
72655: PUSH
72656: DOUBLE
72657: LD_INT 1
72659: DEC
72660: ST_TO_ADDR
72661: LD_VAR 0 2
72665: PUSH
72666: FOR_TO
72667: IFFALSE 72754
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72669: LD_ADDR_VAR 0 6
72673: PUSH
72674: LD_VAR 0 1
72678: PPUSH
72679: LD_VAR 0 2
72683: PUSH
72684: LD_VAR 0 4
72688: ARRAY
72689: PUSH
72690: LD_INT 1
72692: ARRAY
72693: PPUSH
72694: LD_VAR 0 2
72698: PUSH
72699: LD_VAR 0 4
72703: ARRAY
72704: PUSH
72705: LD_INT 2
72707: ARRAY
72708: PPUSH
72709: CALL_OW 297
72713: ST_TO_ADDR
// if tdist < dist then
72714: LD_VAR 0 6
72718: PUSH
72719: LD_VAR 0 5
72723: LESS
72724: IFFALSE 72752
// begin hex := hexes [ i ] ;
72726: LD_ADDR_VAR 0 8
72730: PUSH
72731: LD_VAR 0 2
72735: PUSH
72736: LD_VAR 0 4
72740: ARRAY
72741: ST_TO_ADDR
// dist := tdist ;
72742: LD_ADDR_VAR 0 5
72746: PUSH
72747: LD_VAR 0 6
72751: ST_TO_ADDR
// end ; end ;
72752: GO 72666
72754: POP
72755: POP
// result := hex ;
72756: LD_ADDR_VAR 0 3
72760: PUSH
72761: LD_VAR 0 8
72765: ST_TO_ADDR
// end ;
72766: LD_VAR 0 3
72770: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72771: LD_INT 0
72773: PPUSH
72774: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72775: LD_VAR 0 1
72779: NOT
72780: PUSH
72781: LD_VAR 0 1
72785: PUSH
72786: LD_INT 21
72788: PUSH
72789: LD_INT 2
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 23
72798: PUSH
72799: LD_INT 2
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PPUSH
72810: CALL_OW 69
72814: IN
72815: NOT
72816: OR
72817: IFFALSE 72821
// exit ;
72819: GO 72868
// for i = 1 to 3 do
72821: LD_ADDR_VAR 0 3
72825: PUSH
72826: DOUBLE
72827: LD_INT 1
72829: DEC
72830: ST_TO_ADDR
72831: LD_INT 3
72833: PUSH
72834: FOR_TO
72835: IFFALSE 72866
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72837: LD_VAR 0 1
72841: PPUSH
72842: CALL_OW 250
72846: PPUSH
72847: LD_VAR 0 1
72851: PPUSH
72852: CALL_OW 251
72856: PPUSH
72857: LD_INT 1
72859: PPUSH
72860: CALL_OW 453
72864: GO 72834
72866: POP
72867: POP
// end ;
72868: LD_VAR 0 2
72872: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72873: LD_INT 0
72875: PPUSH
72876: PPUSH
72877: PPUSH
72878: PPUSH
72879: PPUSH
72880: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72881: LD_VAR 0 1
72885: NOT
72886: PUSH
72887: LD_VAR 0 2
72891: NOT
72892: OR
72893: PUSH
72894: LD_VAR 0 1
72898: PPUSH
72899: CALL_OW 314
72903: OR
72904: IFFALSE 72908
// exit ;
72906: GO 73375
// if GetLives ( i ) < 250 then
72908: LD_VAR 0 4
72912: PPUSH
72913: CALL_OW 256
72917: PUSH
72918: LD_INT 250
72920: LESS
72921: IFFALSE 72934
// begin ComAutodestruct ( i ) ;
72923: LD_VAR 0 4
72927: PPUSH
72928: CALL 72771 0 1
// exit ;
72932: GO 73375
// end ; x := GetX ( enemy_unit ) ;
72934: LD_ADDR_VAR 0 7
72938: PUSH
72939: LD_VAR 0 2
72943: PPUSH
72944: CALL_OW 250
72948: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72949: LD_ADDR_VAR 0 8
72953: PUSH
72954: LD_VAR 0 2
72958: PPUSH
72959: CALL_OW 251
72963: ST_TO_ADDR
// if not x or not y then
72964: LD_VAR 0 7
72968: NOT
72969: PUSH
72970: LD_VAR 0 8
72974: NOT
72975: OR
72976: IFFALSE 72980
// exit ;
72978: GO 73375
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72980: LD_ADDR_VAR 0 6
72984: PUSH
72985: LD_VAR 0 7
72989: PPUSH
72990: LD_INT 0
72992: PPUSH
72993: LD_INT 4
72995: PPUSH
72996: CALL_OW 272
73000: PUSH
73001: LD_VAR 0 8
73005: PPUSH
73006: LD_INT 0
73008: PPUSH
73009: LD_INT 4
73011: PPUSH
73012: CALL_OW 273
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_VAR 0 7
73025: PPUSH
73026: LD_INT 1
73028: PPUSH
73029: LD_INT 4
73031: PPUSH
73032: CALL_OW 272
73036: PUSH
73037: LD_VAR 0 8
73041: PPUSH
73042: LD_INT 1
73044: PPUSH
73045: LD_INT 4
73047: PPUSH
73048: CALL_OW 273
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: LD_VAR 0 7
73061: PPUSH
73062: LD_INT 2
73064: PPUSH
73065: LD_INT 4
73067: PPUSH
73068: CALL_OW 272
73072: PUSH
73073: LD_VAR 0 8
73077: PPUSH
73078: LD_INT 2
73080: PPUSH
73081: LD_INT 4
73083: PPUSH
73084: CALL_OW 273
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: LD_VAR 0 7
73097: PPUSH
73098: LD_INT 3
73100: PPUSH
73101: LD_INT 4
73103: PPUSH
73104: CALL_OW 272
73108: PUSH
73109: LD_VAR 0 8
73113: PPUSH
73114: LD_INT 3
73116: PPUSH
73117: LD_INT 4
73119: PPUSH
73120: CALL_OW 273
73124: PUSH
73125: EMPTY
73126: LIST
73127: LIST
73128: PUSH
73129: LD_VAR 0 7
73133: PPUSH
73134: LD_INT 4
73136: PPUSH
73137: LD_INT 4
73139: PPUSH
73140: CALL_OW 272
73144: PUSH
73145: LD_VAR 0 8
73149: PPUSH
73150: LD_INT 4
73152: PPUSH
73153: LD_INT 4
73155: PPUSH
73156: CALL_OW 273
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: LD_VAR 0 7
73169: PPUSH
73170: LD_INT 5
73172: PPUSH
73173: LD_INT 4
73175: PPUSH
73176: CALL_OW 272
73180: PUSH
73181: LD_VAR 0 8
73185: PPUSH
73186: LD_INT 5
73188: PPUSH
73189: LD_INT 4
73191: PPUSH
73192: CALL_OW 273
73196: PUSH
73197: EMPTY
73198: LIST
73199: LIST
73200: PUSH
73201: EMPTY
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: ST_TO_ADDR
// for i = tmp downto 1 do
73209: LD_ADDR_VAR 0 4
73213: PUSH
73214: DOUBLE
73215: LD_VAR 0 6
73219: INC
73220: ST_TO_ADDR
73221: LD_INT 1
73223: PUSH
73224: FOR_DOWNTO
73225: IFFALSE 73326
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73227: LD_VAR 0 6
73231: PUSH
73232: LD_VAR 0 4
73236: ARRAY
73237: PUSH
73238: LD_INT 1
73240: ARRAY
73241: PPUSH
73242: LD_VAR 0 6
73246: PUSH
73247: LD_VAR 0 4
73251: ARRAY
73252: PUSH
73253: LD_INT 2
73255: ARRAY
73256: PPUSH
73257: CALL_OW 488
73261: NOT
73262: PUSH
73263: LD_VAR 0 6
73267: PUSH
73268: LD_VAR 0 4
73272: ARRAY
73273: PUSH
73274: LD_INT 1
73276: ARRAY
73277: PPUSH
73278: LD_VAR 0 6
73282: PUSH
73283: LD_VAR 0 4
73287: ARRAY
73288: PUSH
73289: LD_INT 2
73291: ARRAY
73292: PPUSH
73293: CALL_OW 428
73297: PUSH
73298: LD_INT 0
73300: NONEQUAL
73301: OR
73302: IFFALSE 73324
// tmp := Delete ( tmp , i ) ;
73304: LD_ADDR_VAR 0 6
73308: PUSH
73309: LD_VAR 0 6
73313: PPUSH
73314: LD_VAR 0 4
73318: PPUSH
73319: CALL_OW 3
73323: ST_TO_ADDR
73324: GO 73224
73326: POP
73327: POP
// j := GetClosestHex ( unit , tmp ) ;
73328: LD_ADDR_VAR 0 5
73332: PUSH
73333: LD_VAR 0 1
73337: PPUSH
73338: LD_VAR 0 6
73342: PPUSH
73343: CALL 72619 0 2
73347: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73348: LD_VAR 0 1
73352: PPUSH
73353: LD_VAR 0 5
73357: PUSH
73358: LD_INT 1
73360: ARRAY
73361: PPUSH
73362: LD_VAR 0 5
73366: PUSH
73367: LD_INT 2
73369: ARRAY
73370: PPUSH
73371: CALL_OW 111
// end ;
73375: LD_VAR 0 3
73379: RET
// export function PrepareApemanSoldier ( ) ; begin
73380: LD_INT 0
73382: PPUSH
// uc_nation := 0 ;
73383: LD_ADDR_OWVAR 21
73387: PUSH
73388: LD_INT 0
73390: ST_TO_ADDR
// hc_sex := sex_male ;
73391: LD_ADDR_OWVAR 27
73395: PUSH
73396: LD_INT 1
73398: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73399: LD_ADDR_OWVAR 28
73403: PUSH
73404: LD_INT 15
73406: ST_TO_ADDR
// hc_gallery :=  ;
73407: LD_ADDR_OWVAR 33
73411: PUSH
73412: LD_STRING 
73414: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73415: LD_ADDR_OWVAR 31
73419: PUSH
73420: LD_INT 0
73422: PPUSH
73423: LD_INT 3
73425: PPUSH
73426: CALL_OW 12
73430: PUSH
73431: LD_INT 0
73433: PPUSH
73434: LD_INT 3
73436: PPUSH
73437: CALL_OW 12
73441: PUSH
73442: LD_INT 0
73444: PUSH
73445: LD_INT 0
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: ST_TO_ADDR
// end ;
73454: LD_VAR 0 1
73458: RET
// export function PrepareApemanEngineer ( ) ; begin
73459: LD_INT 0
73461: PPUSH
// uc_nation := 0 ;
73462: LD_ADDR_OWVAR 21
73466: PUSH
73467: LD_INT 0
73469: ST_TO_ADDR
// hc_sex := sex_male ;
73470: LD_ADDR_OWVAR 27
73474: PUSH
73475: LD_INT 1
73477: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73478: LD_ADDR_OWVAR 28
73482: PUSH
73483: LD_INT 16
73485: ST_TO_ADDR
// hc_gallery :=  ;
73486: LD_ADDR_OWVAR 33
73490: PUSH
73491: LD_STRING 
73493: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73494: LD_ADDR_OWVAR 31
73498: PUSH
73499: LD_INT 0
73501: PPUSH
73502: LD_INT 3
73504: PPUSH
73505: CALL_OW 12
73509: PUSH
73510: LD_INT 0
73512: PPUSH
73513: LD_INT 3
73515: PPUSH
73516: CALL_OW 12
73520: PUSH
73521: LD_INT 0
73523: PUSH
73524: LD_INT 0
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: LIST
73531: LIST
73532: ST_TO_ADDR
// end ;
73533: LD_VAR 0 1
73537: RET
// export function PrepareApeman ( agressivity ) ; begin
73538: LD_INT 0
73540: PPUSH
// uc_side := 0 ;
73541: LD_ADDR_OWVAR 20
73545: PUSH
73546: LD_INT 0
73548: ST_TO_ADDR
// uc_nation := 0 ;
73549: LD_ADDR_OWVAR 21
73553: PUSH
73554: LD_INT 0
73556: ST_TO_ADDR
// hc_sex := sex_male ;
73557: LD_ADDR_OWVAR 27
73561: PUSH
73562: LD_INT 1
73564: ST_TO_ADDR
// hc_class := class_apeman ;
73565: LD_ADDR_OWVAR 28
73569: PUSH
73570: LD_INT 12
73572: ST_TO_ADDR
// hc_gallery :=  ;
73573: LD_ADDR_OWVAR 33
73577: PUSH
73578: LD_STRING 
73580: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73581: LD_ADDR_OWVAR 35
73585: PUSH
73586: LD_VAR 0 1
73590: NEG
73591: PPUSH
73592: LD_VAR 0 1
73596: PPUSH
73597: CALL_OW 12
73601: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73602: LD_ADDR_OWVAR 31
73606: PUSH
73607: LD_INT 0
73609: PPUSH
73610: LD_INT 3
73612: PPUSH
73613: CALL_OW 12
73617: PUSH
73618: LD_INT 0
73620: PPUSH
73621: LD_INT 3
73623: PPUSH
73624: CALL_OW 12
73628: PUSH
73629: LD_INT 0
73631: PUSH
73632: LD_INT 0
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: ST_TO_ADDR
// end ;
73641: LD_VAR 0 2
73645: RET
// export function PrepareTiger ( agressivity ) ; begin
73646: LD_INT 0
73648: PPUSH
// uc_side := 0 ;
73649: LD_ADDR_OWVAR 20
73653: PUSH
73654: LD_INT 0
73656: ST_TO_ADDR
// uc_nation := 0 ;
73657: LD_ADDR_OWVAR 21
73661: PUSH
73662: LD_INT 0
73664: ST_TO_ADDR
// hc_class := class_tiger ;
73665: LD_ADDR_OWVAR 28
73669: PUSH
73670: LD_INT 14
73672: ST_TO_ADDR
// hc_gallery :=  ;
73673: LD_ADDR_OWVAR 33
73677: PUSH
73678: LD_STRING 
73680: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73681: LD_ADDR_OWVAR 35
73685: PUSH
73686: LD_VAR 0 1
73690: NEG
73691: PPUSH
73692: LD_VAR 0 1
73696: PPUSH
73697: CALL_OW 12
73701: ST_TO_ADDR
// end ;
73702: LD_VAR 0 2
73706: RET
// export function PrepareEnchidna ( ) ; begin
73707: LD_INT 0
73709: PPUSH
// uc_side := 0 ;
73710: LD_ADDR_OWVAR 20
73714: PUSH
73715: LD_INT 0
73717: ST_TO_ADDR
// uc_nation := 0 ;
73718: LD_ADDR_OWVAR 21
73722: PUSH
73723: LD_INT 0
73725: ST_TO_ADDR
// hc_class := class_baggie ;
73726: LD_ADDR_OWVAR 28
73730: PUSH
73731: LD_INT 13
73733: ST_TO_ADDR
// hc_gallery :=  ;
73734: LD_ADDR_OWVAR 33
73738: PUSH
73739: LD_STRING 
73741: ST_TO_ADDR
// end ;
73742: LD_VAR 0 1
73746: RET
// export function PrepareFrog ( ) ; begin
73747: LD_INT 0
73749: PPUSH
// uc_side := 0 ;
73750: LD_ADDR_OWVAR 20
73754: PUSH
73755: LD_INT 0
73757: ST_TO_ADDR
// uc_nation := 0 ;
73758: LD_ADDR_OWVAR 21
73762: PUSH
73763: LD_INT 0
73765: ST_TO_ADDR
// hc_class := class_frog ;
73766: LD_ADDR_OWVAR 28
73770: PUSH
73771: LD_INT 19
73773: ST_TO_ADDR
// hc_gallery :=  ;
73774: LD_ADDR_OWVAR 33
73778: PUSH
73779: LD_STRING 
73781: ST_TO_ADDR
// end ;
73782: LD_VAR 0 1
73786: RET
// export function PrepareFish ( ) ; begin
73787: LD_INT 0
73789: PPUSH
// uc_side := 0 ;
73790: LD_ADDR_OWVAR 20
73794: PUSH
73795: LD_INT 0
73797: ST_TO_ADDR
// uc_nation := 0 ;
73798: LD_ADDR_OWVAR 21
73802: PUSH
73803: LD_INT 0
73805: ST_TO_ADDR
// hc_class := class_fish ;
73806: LD_ADDR_OWVAR 28
73810: PUSH
73811: LD_INT 20
73813: ST_TO_ADDR
// hc_gallery :=  ;
73814: LD_ADDR_OWVAR 33
73818: PUSH
73819: LD_STRING 
73821: ST_TO_ADDR
// end ;
73822: LD_VAR 0 1
73826: RET
// export function PrepareBird ( ) ; begin
73827: LD_INT 0
73829: PPUSH
// uc_side := 0 ;
73830: LD_ADDR_OWVAR 20
73834: PUSH
73835: LD_INT 0
73837: ST_TO_ADDR
// uc_nation := 0 ;
73838: LD_ADDR_OWVAR 21
73842: PUSH
73843: LD_INT 0
73845: ST_TO_ADDR
// hc_class := class_phororhacos ;
73846: LD_ADDR_OWVAR 28
73850: PUSH
73851: LD_INT 18
73853: ST_TO_ADDR
// hc_gallery :=  ;
73854: LD_ADDR_OWVAR 33
73858: PUSH
73859: LD_STRING 
73861: ST_TO_ADDR
// end ;
73862: LD_VAR 0 1
73866: RET
// export function PrepareHorse ( ) ; begin
73867: LD_INT 0
73869: PPUSH
// uc_side := 0 ;
73870: LD_ADDR_OWVAR 20
73874: PUSH
73875: LD_INT 0
73877: ST_TO_ADDR
// uc_nation := 0 ;
73878: LD_ADDR_OWVAR 21
73882: PUSH
73883: LD_INT 0
73885: ST_TO_ADDR
// hc_class := class_horse ;
73886: LD_ADDR_OWVAR 28
73890: PUSH
73891: LD_INT 21
73893: ST_TO_ADDR
// hc_gallery :=  ;
73894: LD_ADDR_OWVAR 33
73898: PUSH
73899: LD_STRING 
73901: ST_TO_ADDR
// end ;
73902: LD_VAR 0 1
73906: RET
// export function PrepareMastodont ( ) ; begin
73907: LD_INT 0
73909: PPUSH
// uc_side := 0 ;
73910: LD_ADDR_OWVAR 20
73914: PUSH
73915: LD_INT 0
73917: ST_TO_ADDR
// uc_nation := 0 ;
73918: LD_ADDR_OWVAR 21
73922: PUSH
73923: LD_INT 0
73925: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73926: LD_ADDR_OWVAR 37
73930: PUSH
73931: LD_INT 31
73933: ST_TO_ADDR
// vc_control := control_rider ;
73934: LD_ADDR_OWVAR 38
73938: PUSH
73939: LD_INT 4
73941: ST_TO_ADDR
// end ;
73942: LD_VAR 0 1
73946: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73947: LD_INT 0
73949: PPUSH
73950: PPUSH
73951: PPUSH
// uc_side = 0 ;
73952: LD_ADDR_OWVAR 20
73956: PUSH
73957: LD_INT 0
73959: ST_TO_ADDR
// uc_nation = 0 ;
73960: LD_ADDR_OWVAR 21
73964: PUSH
73965: LD_INT 0
73967: ST_TO_ADDR
// InitHc_All ( ) ;
73968: CALL_OW 584
// InitVc ;
73972: CALL_OW 20
// if mastodonts then
73976: LD_VAR 0 6
73980: IFFALSE 74047
// for i = 1 to mastodonts do
73982: LD_ADDR_VAR 0 11
73986: PUSH
73987: DOUBLE
73988: LD_INT 1
73990: DEC
73991: ST_TO_ADDR
73992: LD_VAR 0 6
73996: PUSH
73997: FOR_TO
73998: IFFALSE 74045
// begin vc_chassis := 31 ;
74000: LD_ADDR_OWVAR 37
74004: PUSH
74005: LD_INT 31
74007: ST_TO_ADDR
// vc_control := control_rider ;
74008: LD_ADDR_OWVAR 38
74012: PUSH
74013: LD_INT 4
74015: ST_TO_ADDR
// animal := CreateVehicle ;
74016: LD_ADDR_VAR 0 12
74020: PUSH
74021: CALL_OW 45
74025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74026: LD_VAR 0 12
74030: PPUSH
74031: LD_VAR 0 8
74035: PPUSH
74036: LD_INT 0
74038: PPUSH
74039: CALL 76175 0 3
// end ;
74043: GO 73997
74045: POP
74046: POP
// if horses then
74047: LD_VAR 0 5
74051: IFFALSE 74118
// for i = 1 to horses do
74053: LD_ADDR_VAR 0 11
74057: PUSH
74058: DOUBLE
74059: LD_INT 1
74061: DEC
74062: ST_TO_ADDR
74063: LD_VAR 0 5
74067: PUSH
74068: FOR_TO
74069: IFFALSE 74116
// begin hc_class := 21 ;
74071: LD_ADDR_OWVAR 28
74075: PUSH
74076: LD_INT 21
74078: ST_TO_ADDR
// hc_gallery :=  ;
74079: LD_ADDR_OWVAR 33
74083: PUSH
74084: LD_STRING 
74086: ST_TO_ADDR
// animal := CreateHuman ;
74087: LD_ADDR_VAR 0 12
74091: PUSH
74092: CALL_OW 44
74096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74097: LD_VAR 0 12
74101: PPUSH
74102: LD_VAR 0 8
74106: PPUSH
74107: LD_INT 0
74109: PPUSH
74110: CALL 76175 0 3
// end ;
74114: GO 74068
74116: POP
74117: POP
// if birds then
74118: LD_VAR 0 1
74122: IFFALSE 74189
// for i = 1 to birds do
74124: LD_ADDR_VAR 0 11
74128: PUSH
74129: DOUBLE
74130: LD_INT 1
74132: DEC
74133: ST_TO_ADDR
74134: LD_VAR 0 1
74138: PUSH
74139: FOR_TO
74140: IFFALSE 74187
// begin hc_class := 18 ;
74142: LD_ADDR_OWVAR 28
74146: PUSH
74147: LD_INT 18
74149: ST_TO_ADDR
// hc_gallery =  ;
74150: LD_ADDR_OWVAR 33
74154: PUSH
74155: LD_STRING 
74157: ST_TO_ADDR
// animal := CreateHuman ;
74158: LD_ADDR_VAR 0 12
74162: PUSH
74163: CALL_OW 44
74167: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74168: LD_VAR 0 12
74172: PPUSH
74173: LD_VAR 0 8
74177: PPUSH
74178: LD_INT 0
74180: PPUSH
74181: CALL 76175 0 3
// end ;
74185: GO 74139
74187: POP
74188: POP
// if tigers then
74189: LD_VAR 0 2
74193: IFFALSE 74277
// for i = 1 to tigers do
74195: LD_ADDR_VAR 0 11
74199: PUSH
74200: DOUBLE
74201: LD_INT 1
74203: DEC
74204: ST_TO_ADDR
74205: LD_VAR 0 2
74209: PUSH
74210: FOR_TO
74211: IFFALSE 74275
// begin hc_class = class_tiger ;
74213: LD_ADDR_OWVAR 28
74217: PUSH
74218: LD_INT 14
74220: ST_TO_ADDR
// hc_gallery =  ;
74221: LD_ADDR_OWVAR 33
74225: PUSH
74226: LD_STRING 
74228: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74229: LD_ADDR_OWVAR 35
74233: PUSH
74234: LD_INT 7
74236: NEG
74237: PPUSH
74238: LD_INT 7
74240: PPUSH
74241: CALL_OW 12
74245: ST_TO_ADDR
// animal := CreateHuman ;
74246: LD_ADDR_VAR 0 12
74250: PUSH
74251: CALL_OW 44
74255: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74256: LD_VAR 0 12
74260: PPUSH
74261: LD_VAR 0 8
74265: PPUSH
74266: LD_INT 0
74268: PPUSH
74269: CALL 76175 0 3
// end ;
74273: GO 74210
74275: POP
74276: POP
// if apemans then
74277: LD_VAR 0 3
74281: IFFALSE 74404
// for i = 1 to apemans do
74283: LD_ADDR_VAR 0 11
74287: PUSH
74288: DOUBLE
74289: LD_INT 1
74291: DEC
74292: ST_TO_ADDR
74293: LD_VAR 0 3
74297: PUSH
74298: FOR_TO
74299: IFFALSE 74402
// begin hc_class = class_apeman ;
74301: LD_ADDR_OWVAR 28
74305: PUSH
74306: LD_INT 12
74308: ST_TO_ADDR
// hc_gallery =  ;
74309: LD_ADDR_OWVAR 33
74313: PUSH
74314: LD_STRING 
74316: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74317: LD_ADDR_OWVAR 35
74321: PUSH
74322: LD_INT 2
74324: NEG
74325: PPUSH
74326: LD_INT 2
74328: PPUSH
74329: CALL_OW 12
74333: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74334: LD_ADDR_OWVAR 31
74338: PUSH
74339: LD_INT 1
74341: PPUSH
74342: LD_INT 3
74344: PPUSH
74345: CALL_OW 12
74349: PUSH
74350: LD_INT 1
74352: PPUSH
74353: LD_INT 3
74355: PPUSH
74356: CALL_OW 12
74360: PUSH
74361: LD_INT 0
74363: PUSH
74364: LD_INT 0
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: LIST
74371: LIST
74372: ST_TO_ADDR
// animal := CreateHuman ;
74373: LD_ADDR_VAR 0 12
74377: PUSH
74378: CALL_OW 44
74382: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74383: LD_VAR 0 12
74387: PPUSH
74388: LD_VAR 0 8
74392: PPUSH
74393: LD_INT 0
74395: PPUSH
74396: CALL 76175 0 3
// end ;
74400: GO 74298
74402: POP
74403: POP
// if enchidnas then
74404: LD_VAR 0 4
74408: IFFALSE 74475
// for i = 1 to enchidnas do
74410: LD_ADDR_VAR 0 11
74414: PUSH
74415: DOUBLE
74416: LD_INT 1
74418: DEC
74419: ST_TO_ADDR
74420: LD_VAR 0 4
74424: PUSH
74425: FOR_TO
74426: IFFALSE 74473
// begin hc_class = 13 ;
74428: LD_ADDR_OWVAR 28
74432: PUSH
74433: LD_INT 13
74435: ST_TO_ADDR
// hc_gallery =  ;
74436: LD_ADDR_OWVAR 33
74440: PUSH
74441: LD_STRING 
74443: ST_TO_ADDR
// animal := CreateHuman ;
74444: LD_ADDR_VAR 0 12
74448: PUSH
74449: CALL_OW 44
74453: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74454: LD_VAR 0 12
74458: PPUSH
74459: LD_VAR 0 8
74463: PPUSH
74464: LD_INT 0
74466: PPUSH
74467: CALL 76175 0 3
// end ;
74471: GO 74425
74473: POP
74474: POP
// if fishes then
74475: LD_VAR 0 7
74479: IFFALSE 74546
// for i = 1 to fishes do
74481: LD_ADDR_VAR 0 11
74485: PUSH
74486: DOUBLE
74487: LD_INT 1
74489: DEC
74490: ST_TO_ADDR
74491: LD_VAR 0 7
74495: PUSH
74496: FOR_TO
74497: IFFALSE 74544
// begin hc_class = 20 ;
74499: LD_ADDR_OWVAR 28
74503: PUSH
74504: LD_INT 20
74506: ST_TO_ADDR
// hc_gallery =  ;
74507: LD_ADDR_OWVAR 33
74511: PUSH
74512: LD_STRING 
74514: ST_TO_ADDR
// animal := CreateHuman ;
74515: LD_ADDR_VAR 0 12
74519: PUSH
74520: CALL_OW 44
74524: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74525: LD_VAR 0 12
74529: PPUSH
74530: LD_VAR 0 9
74534: PPUSH
74535: LD_INT 0
74537: PPUSH
74538: CALL 76175 0 3
// end ;
74542: GO 74496
74544: POP
74545: POP
// end ;
74546: LD_VAR 0 10
74550: RET
// export function WantHeal ( sci , unit ) ; begin
74551: LD_INT 0
74553: PPUSH
// if GetTaskList ( sci ) > 0 then
74554: LD_VAR 0 1
74558: PPUSH
74559: CALL_OW 437
74563: PUSH
74564: LD_INT 0
74566: GREATER
74567: IFFALSE 74637
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74569: LD_VAR 0 1
74573: PPUSH
74574: CALL_OW 437
74578: PUSH
74579: LD_INT 1
74581: ARRAY
74582: PUSH
74583: LD_INT 1
74585: ARRAY
74586: PUSH
74587: LD_STRING l
74589: EQUAL
74590: PUSH
74591: LD_VAR 0 1
74595: PPUSH
74596: CALL_OW 437
74600: PUSH
74601: LD_INT 1
74603: ARRAY
74604: PUSH
74605: LD_INT 4
74607: ARRAY
74608: PUSH
74609: LD_VAR 0 2
74613: EQUAL
74614: AND
74615: IFFALSE 74627
// result := true else
74617: LD_ADDR_VAR 0 3
74621: PUSH
74622: LD_INT 1
74624: ST_TO_ADDR
74625: GO 74635
// result := false ;
74627: LD_ADDR_VAR 0 3
74631: PUSH
74632: LD_INT 0
74634: ST_TO_ADDR
// end else
74635: GO 74645
// result := false ;
74637: LD_ADDR_VAR 0 3
74641: PUSH
74642: LD_INT 0
74644: ST_TO_ADDR
// end ;
74645: LD_VAR 0 3
74649: RET
// export function HealTarget ( sci ) ; begin
74650: LD_INT 0
74652: PPUSH
// if not sci then
74653: LD_VAR 0 1
74657: NOT
74658: IFFALSE 74662
// exit ;
74660: GO 74727
// result := 0 ;
74662: LD_ADDR_VAR 0 2
74666: PUSH
74667: LD_INT 0
74669: ST_TO_ADDR
// if GetTaskList ( sci ) then
74670: LD_VAR 0 1
74674: PPUSH
74675: CALL_OW 437
74679: IFFALSE 74727
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74681: LD_VAR 0 1
74685: PPUSH
74686: CALL_OW 437
74690: PUSH
74691: LD_INT 1
74693: ARRAY
74694: PUSH
74695: LD_INT 1
74697: ARRAY
74698: PUSH
74699: LD_STRING l
74701: EQUAL
74702: IFFALSE 74727
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74704: LD_ADDR_VAR 0 2
74708: PUSH
74709: LD_VAR 0 1
74713: PPUSH
74714: CALL_OW 437
74718: PUSH
74719: LD_INT 1
74721: ARRAY
74722: PUSH
74723: LD_INT 4
74725: ARRAY
74726: ST_TO_ADDR
// end ;
74727: LD_VAR 0 2
74731: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74732: LD_INT 0
74734: PPUSH
74735: PPUSH
74736: PPUSH
74737: PPUSH
// if not base_units then
74738: LD_VAR 0 1
74742: NOT
74743: IFFALSE 74747
// exit ;
74745: GO 74834
// result := false ;
74747: LD_ADDR_VAR 0 2
74751: PUSH
74752: LD_INT 0
74754: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74755: LD_ADDR_VAR 0 5
74759: PUSH
74760: LD_VAR 0 1
74764: PPUSH
74765: LD_INT 21
74767: PUSH
74768: LD_INT 3
74770: PUSH
74771: EMPTY
74772: LIST
74773: LIST
74774: PPUSH
74775: CALL_OW 72
74779: ST_TO_ADDR
// if not tmp then
74780: LD_VAR 0 5
74784: NOT
74785: IFFALSE 74789
// exit ;
74787: GO 74834
// for i in tmp do
74789: LD_ADDR_VAR 0 3
74793: PUSH
74794: LD_VAR 0 5
74798: PUSH
74799: FOR_IN
74800: IFFALSE 74832
// begin result := EnemyInRange ( i , 22 ) ;
74802: LD_ADDR_VAR 0 2
74806: PUSH
74807: LD_VAR 0 3
74811: PPUSH
74812: LD_INT 22
74814: PPUSH
74815: CALL 72421 0 2
74819: ST_TO_ADDR
// if result then
74820: LD_VAR 0 2
74824: IFFALSE 74830
// exit ;
74826: POP
74827: POP
74828: GO 74834
// end ;
74830: GO 74799
74832: POP
74833: POP
// end ;
74834: LD_VAR 0 2
74838: RET
// export function FilterByTag ( units , tag ) ; begin
74839: LD_INT 0
74841: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74842: LD_ADDR_VAR 0 3
74846: PUSH
74847: LD_VAR 0 1
74851: PPUSH
74852: LD_INT 120
74854: PUSH
74855: LD_VAR 0 2
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: PPUSH
74864: CALL_OW 72
74868: ST_TO_ADDR
// end ;
74869: LD_VAR 0 3
74873: RET
// export function IsDriver ( un ) ; begin
74874: LD_INT 0
74876: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74877: LD_ADDR_VAR 0 2
74881: PUSH
74882: LD_VAR 0 1
74886: PUSH
74887: LD_INT 55
74889: PUSH
74890: EMPTY
74891: LIST
74892: PPUSH
74893: CALL_OW 69
74897: IN
74898: ST_TO_ADDR
// end ;
74899: LD_VAR 0 2
74903: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74904: LD_INT 0
74906: PPUSH
74907: PPUSH
// list := [ ] ;
74908: LD_ADDR_VAR 0 5
74912: PUSH
74913: EMPTY
74914: ST_TO_ADDR
// case d of 0 :
74915: LD_VAR 0 3
74919: PUSH
74920: LD_INT 0
74922: DOUBLE
74923: EQUAL
74924: IFTRUE 74928
74926: GO 75061
74928: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74929: LD_ADDR_VAR 0 5
74933: PUSH
74934: LD_VAR 0 1
74938: PUSH
74939: LD_INT 4
74941: MINUS
74942: PUSH
74943: LD_VAR 0 2
74947: PUSH
74948: LD_INT 4
74950: MINUS
74951: PUSH
74952: LD_INT 2
74954: PUSH
74955: EMPTY
74956: LIST
74957: LIST
74958: LIST
74959: PUSH
74960: LD_VAR 0 1
74964: PUSH
74965: LD_INT 3
74967: MINUS
74968: PUSH
74969: LD_VAR 0 2
74973: PUSH
74974: LD_INT 1
74976: PUSH
74977: EMPTY
74978: LIST
74979: LIST
74980: LIST
74981: PUSH
74982: LD_VAR 0 1
74986: PUSH
74987: LD_INT 4
74989: PLUS
74990: PUSH
74991: LD_VAR 0 2
74995: PUSH
74996: LD_INT 4
74998: PUSH
74999: EMPTY
75000: LIST
75001: LIST
75002: LIST
75003: PUSH
75004: LD_VAR 0 1
75008: PUSH
75009: LD_INT 3
75011: PLUS
75012: PUSH
75013: LD_VAR 0 2
75017: PUSH
75018: LD_INT 3
75020: PLUS
75021: PUSH
75022: LD_INT 5
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: LIST
75029: PUSH
75030: LD_VAR 0 1
75034: PUSH
75035: LD_VAR 0 2
75039: PUSH
75040: LD_INT 4
75042: PLUS
75043: PUSH
75044: LD_INT 0
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: LIST
75051: PUSH
75052: EMPTY
75053: LIST
75054: LIST
75055: LIST
75056: LIST
75057: LIST
75058: ST_TO_ADDR
// end ; 1 :
75059: GO 75759
75061: LD_INT 1
75063: DOUBLE
75064: EQUAL
75065: IFTRUE 75069
75067: GO 75202
75069: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75070: LD_ADDR_VAR 0 5
75074: PUSH
75075: LD_VAR 0 1
75079: PUSH
75080: LD_VAR 0 2
75084: PUSH
75085: LD_INT 4
75087: MINUS
75088: PUSH
75089: LD_INT 3
75091: PUSH
75092: EMPTY
75093: LIST
75094: LIST
75095: LIST
75096: PUSH
75097: LD_VAR 0 1
75101: PUSH
75102: LD_INT 3
75104: MINUS
75105: PUSH
75106: LD_VAR 0 2
75110: PUSH
75111: LD_INT 3
75113: MINUS
75114: PUSH
75115: LD_INT 2
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: LIST
75122: PUSH
75123: LD_VAR 0 1
75127: PUSH
75128: LD_INT 4
75130: MINUS
75131: PUSH
75132: LD_VAR 0 2
75136: PUSH
75137: LD_INT 1
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: LIST
75144: PUSH
75145: LD_VAR 0 1
75149: PUSH
75150: LD_VAR 0 2
75154: PUSH
75155: LD_INT 3
75157: PLUS
75158: PUSH
75159: LD_INT 0
75161: PUSH
75162: EMPTY
75163: LIST
75164: LIST
75165: LIST
75166: PUSH
75167: LD_VAR 0 1
75171: PUSH
75172: LD_INT 4
75174: PLUS
75175: PUSH
75176: LD_VAR 0 2
75180: PUSH
75181: LD_INT 4
75183: PLUS
75184: PUSH
75185: LD_INT 5
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: LIST
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: LIST
75197: LIST
75198: LIST
75199: ST_TO_ADDR
// end ; 2 :
75200: GO 75759
75202: LD_INT 2
75204: DOUBLE
75205: EQUAL
75206: IFTRUE 75210
75208: GO 75339
75210: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75211: LD_ADDR_VAR 0 5
75215: PUSH
75216: LD_VAR 0 1
75220: PUSH
75221: LD_VAR 0 2
75225: PUSH
75226: LD_INT 3
75228: MINUS
75229: PUSH
75230: LD_INT 3
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: LIST
75237: PUSH
75238: LD_VAR 0 1
75242: PUSH
75243: LD_INT 4
75245: PLUS
75246: PUSH
75247: LD_VAR 0 2
75251: PUSH
75252: LD_INT 4
75254: PUSH
75255: EMPTY
75256: LIST
75257: LIST
75258: LIST
75259: PUSH
75260: LD_VAR 0 1
75264: PUSH
75265: LD_VAR 0 2
75269: PUSH
75270: LD_INT 4
75272: PLUS
75273: PUSH
75274: LD_INT 0
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: LIST
75281: PUSH
75282: LD_VAR 0 1
75286: PUSH
75287: LD_INT 3
75289: MINUS
75290: PUSH
75291: LD_VAR 0 2
75295: PUSH
75296: LD_INT 1
75298: PUSH
75299: EMPTY
75300: LIST
75301: LIST
75302: LIST
75303: PUSH
75304: LD_VAR 0 1
75308: PUSH
75309: LD_INT 4
75311: MINUS
75312: PUSH
75313: LD_VAR 0 2
75317: PUSH
75318: LD_INT 4
75320: MINUS
75321: PUSH
75322: LD_INT 2
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: LIST
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: LIST
75334: LIST
75335: LIST
75336: ST_TO_ADDR
// end ; 3 :
75337: GO 75759
75339: LD_INT 3
75341: DOUBLE
75342: EQUAL
75343: IFTRUE 75347
75345: GO 75480
75347: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75348: LD_ADDR_VAR 0 5
75352: PUSH
75353: LD_VAR 0 1
75357: PUSH
75358: LD_INT 3
75360: PLUS
75361: PUSH
75362: LD_VAR 0 2
75366: PUSH
75367: LD_INT 4
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: LIST
75374: PUSH
75375: LD_VAR 0 1
75379: PUSH
75380: LD_INT 4
75382: PLUS
75383: PUSH
75384: LD_VAR 0 2
75388: PUSH
75389: LD_INT 4
75391: PLUS
75392: PUSH
75393: LD_INT 5
75395: PUSH
75396: EMPTY
75397: LIST
75398: LIST
75399: LIST
75400: PUSH
75401: LD_VAR 0 1
75405: PUSH
75406: LD_INT 4
75408: MINUS
75409: PUSH
75410: LD_VAR 0 2
75414: PUSH
75415: LD_INT 1
75417: PUSH
75418: EMPTY
75419: LIST
75420: LIST
75421: LIST
75422: PUSH
75423: LD_VAR 0 1
75427: PUSH
75428: LD_VAR 0 2
75432: PUSH
75433: LD_INT 4
75435: MINUS
75436: PUSH
75437: LD_INT 3
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: LIST
75444: PUSH
75445: LD_VAR 0 1
75449: PUSH
75450: LD_INT 3
75452: MINUS
75453: PUSH
75454: LD_VAR 0 2
75458: PUSH
75459: LD_INT 3
75461: MINUS
75462: PUSH
75463: LD_INT 2
75465: PUSH
75466: EMPTY
75467: LIST
75468: LIST
75469: LIST
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: LIST
75475: LIST
75476: LIST
75477: ST_TO_ADDR
// end ; 4 :
75478: GO 75759
75480: LD_INT 4
75482: DOUBLE
75483: EQUAL
75484: IFTRUE 75488
75486: GO 75621
75488: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75489: LD_ADDR_VAR 0 5
75493: PUSH
75494: LD_VAR 0 1
75498: PUSH
75499: LD_VAR 0 2
75503: PUSH
75504: LD_INT 4
75506: PLUS
75507: PUSH
75508: LD_INT 0
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: LIST
75515: PUSH
75516: LD_VAR 0 1
75520: PUSH
75521: LD_INT 3
75523: PLUS
75524: PUSH
75525: LD_VAR 0 2
75529: PUSH
75530: LD_INT 3
75532: PLUS
75533: PUSH
75534: LD_INT 5
75536: PUSH
75537: EMPTY
75538: LIST
75539: LIST
75540: LIST
75541: PUSH
75542: LD_VAR 0 1
75546: PUSH
75547: LD_INT 4
75549: PLUS
75550: PUSH
75551: LD_VAR 0 2
75555: PUSH
75556: LD_INT 4
75558: PUSH
75559: EMPTY
75560: LIST
75561: LIST
75562: LIST
75563: PUSH
75564: LD_VAR 0 1
75568: PUSH
75569: LD_VAR 0 2
75573: PUSH
75574: LD_INT 3
75576: MINUS
75577: PUSH
75578: LD_INT 3
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: LIST
75585: PUSH
75586: LD_VAR 0 1
75590: PUSH
75591: LD_INT 4
75593: MINUS
75594: PUSH
75595: LD_VAR 0 2
75599: PUSH
75600: LD_INT 4
75602: MINUS
75603: PUSH
75604: LD_INT 2
75606: PUSH
75607: EMPTY
75608: LIST
75609: LIST
75610: LIST
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: LIST
75616: LIST
75617: LIST
75618: ST_TO_ADDR
// end ; 5 :
75619: GO 75759
75621: LD_INT 5
75623: DOUBLE
75624: EQUAL
75625: IFTRUE 75629
75627: GO 75758
75629: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75630: LD_ADDR_VAR 0 5
75634: PUSH
75635: LD_VAR 0 1
75639: PUSH
75640: LD_INT 4
75642: MINUS
75643: PUSH
75644: LD_VAR 0 2
75648: PUSH
75649: LD_INT 1
75651: PUSH
75652: EMPTY
75653: LIST
75654: LIST
75655: LIST
75656: PUSH
75657: LD_VAR 0 1
75661: PUSH
75662: LD_VAR 0 2
75666: PUSH
75667: LD_INT 4
75669: MINUS
75670: PUSH
75671: LD_INT 3
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: LIST
75678: PUSH
75679: LD_VAR 0 1
75683: PUSH
75684: LD_INT 4
75686: PLUS
75687: PUSH
75688: LD_VAR 0 2
75692: PUSH
75693: LD_INT 4
75695: PLUS
75696: PUSH
75697: LD_INT 5
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: LIST
75704: PUSH
75705: LD_VAR 0 1
75709: PUSH
75710: LD_INT 3
75712: PLUS
75713: PUSH
75714: LD_VAR 0 2
75718: PUSH
75719: LD_INT 4
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: LIST
75726: PUSH
75727: LD_VAR 0 1
75731: PUSH
75732: LD_VAR 0 2
75736: PUSH
75737: LD_INT 3
75739: PLUS
75740: PUSH
75741: LD_INT 0
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: LIST
75748: PUSH
75749: EMPTY
75750: LIST
75751: LIST
75752: LIST
75753: LIST
75754: LIST
75755: ST_TO_ADDR
// end ; end ;
75756: GO 75759
75758: POP
// result := list ;
75759: LD_ADDR_VAR 0 4
75763: PUSH
75764: LD_VAR 0 5
75768: ST_TO_ADDR
// end ;
75769: LD_VAR 0 4
75773: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75774: LD_INT 0
75776: PPUSH
75777: PPUSH
75778: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75779: LD_VAR 0 1
75783: NOT
75784: PUSH
75785: LD_VAR 0 2
75789: PUSH
75790: LD_INT 1
75792: PUSH
75793: LD_INT 2
75795: PUSH
75796: LD_INT 3
75798: PUSH
75799: LD_INT 4
75801: PUSH
75802: EMPTY
75803: LIST
75804: LIST
75805: LIST
75806: LIST
75807: IN
75808: NOT
75809: OR
75810: IFFALSE 75814
// exit ;
75812: GO 75897
// tmp := [ ] ;
75814: LD_ADDR_VAR 0 5
75818: PUSH
75819: EMPTY
75820: ST_TO_ADDR
// for i in units do
75821: LD_ADDR_VAR 0 4
75825: PUSH
75826: LD_VAR 0 1
75830: PUSH
75831: FOR_IN
75832: IFFALSE 75866
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75834: LD_ADDR_VAR 0 5
75838: PUSH
75839: LD_VAR 0 5
75843: PPUSH
75844: LD_VAR 0 4
75848: PPUSH
75849: LD_VAR 0 2
75853: PPUSH
75854: CALL_OW 259
75858: PPUSH
75859: CALL 77270 0 2
75863: ST_TO_ADDR
75864: GO 75831
75866: POP
75867: POP
// if not tmp then
75868: LD_VAR 0 5
75872: NOT
75873: IFFALSE 75877
// exit ;
75875: GO 75897
// result := SortListByListDesc ( units , tmp ) ;
75877: LD_ADDR_VAR 0 3
75881: PUSH
75882: LD_VAR 0 1
75886: PPUSH
75887: LD_VAR 0 5
75891: PPUSH
75892: CALL_OW 77
75896: ST_TO_ADDR
// end ;
75897: LD_VAR 0 3
75901: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75902: LD_INT 0
75904: PPUSH
75905: PPUSH
75906: PPUSH
// result := false ;
75907: LD_ADDR_VAR 0 3
75911: PUSH
75912: LD_INT 0
75914: ST_TO_ADDR
// if not building then
75915: LD_VAR 0 2
75919: NOT
75920: IFFALSE 75924
// exit ;
75922: GO 76062
// x := GetX ( building ) ;
75924: LD_ADDR_VAR 0 4
75928: PUSH
75929: LD_VAR 0 2
75933: PPUSH
75934: CALL_OW 250
75938: ST_TO_ADDR
// y := GetY ( building ) ;
75939: LD_ADDR_VAR 0 5
75943: PUSH
75944: LD_VAR 0 2
75948: PPUSH
75949: CALL_OW 251
75953: ST_TO_ADDR
// if not x or not y then
75954: LD_VAR 0 4
75958: NOT
75959: PUSH
75960: LD_VAR 0 5
75964: NOT
75965: OR
75966: IFFALSE 75970
// exit ;
75968: GO 76062
// if GetTaskList ( unit ) then
75970: LD_VAR 0 1
75974: PPUSH
75975: CALL_OW 437
75979: IFFALSE 76062
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75981: LD_STRING e
75983: PUSH
75984: LD_VAR 0 1
75988: PPUSH
75989: CALL_OW 437
75993: PUSH
75994: LD_INT 1
75996: ARRAY
75997: PUSH
75998: LD_INT 1
76000: ARRAY
76001: EQUAL
76002: PUSH
76003: LD_VAR 0 4
76007: PUSH
76008: LD_VAR 0 1
76012: PPUSH
76013: CALL_OW 437
76017: PUSH
76018: LD_INT 1
76020: ARRAY
76021: PUSH
76022: LD_INT 2
76024: ARRAY
76025: EQUAL
76026: AND
76027: PUSH
76028: LD_VAR 0 5
76032: PUSH
76033: LD_VAR 0 1
76037: PPUSH
76038: CALL_OW 437
76042: PUSH
76043: LD_INT 1
76045: ARRAY
76046: PUSH
76047: LD_INT 3
76049: ARRAY
76050: EQUAL
76051: AND
76052: IFFALSE 76062
// result := true end ;
76054: LD_ADDR_VAR 0 3
76058: PUSH
76059: LD_INT 1
76061: ST_TO_ADDR
// end ;
76062: LD_VAR 0 3
76066: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76067: LD_INT 0
76069: PPUSH
// result := false ;
76070: LD_ADDR_VAR 0 4
76074: PUSH
76075: LD_INT 0
76077: ST_TO_ADDR
// if GetTaskList ( unit ) then
76078: LD_VAR 0 1
76082: PPUSH
76083: CALL_OW 437
76087: IFFALSE 76170
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76089: LD_STRING M
76091: PUSH
76092: LD_VAR 0 1
76096: PPUSH
76097: CALL_OW 437
76101: PUSH
76102: LD_INT 1
76104: ARRAY
76105: PUSH
76106: LD_INT 1
76108: ARRAY
76109: EQUAL
76110: PUSH
76111: LD_VAR 0 2
76115: PUSH
76116: LD_VAR 0 1
76120: PPUSH
76121: CALL_OW 437
76125: PUSH
76126: LD_INT 1
76128: ARRAY
76129: PUSH
76130: LD_INT 2
76132: ARRAY
76133: EQUAL
76134: AND
76135: PUSH
76136: LD_VAR 0 3
76140: PUSH
76141: LD_VAR 0 1
76145: PPUSH
76146: CALL_OW 437
76150: PUSH
76151: LD_INT 1
76153: ARRAY
76154: PUSH
76155: LD_INT 3
76157: ARRAY
76158: EQUAL
76159: AND
76160: IFFALSE 76170
// result := true ;
76162: LD_ADDR_VAR 0 4
76166: PUSH
76167: LD_INT 1
76169: ST_TO_ADDR
// end ; end ;
76170: LD_VAR 0 4
76174: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76175: LD_INT 0
76177: PPUSH
76178: PPUSH
76179: PPUSH
76180: PPUSH
// if not unit or not area then
76181: LD_VAR 0 1
76185: NOT
76186: PUSH
76187: LD_VAR 0 2
76191: NOT
76192: OR
76193: IFFALSE 76197
// exit ;
76195: GO 76373
// tmp := AreaToList ( area , i ) ;
76197: LD_ADDR_VAR 0 6
76201: PUSH
76202: LD_VAR 0 2
76206: PPUSH
76207: LD_VAR 0 5
76211: PPUSH
76212: CALL_OW 517
76216: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76217: LD_ADDR_VAR 0 5
76221: PUSH
76222: DOUBLE
76223: LD_INT 1
76225: DEC
76226: ST_TO_ADDR
76227: LD_VAR 0 6
76231: PUSH
76232: LD_INT 1
76234: ARRAY
76235: PUSH
76236: FOR_TO
76237: IFFALSE 76371
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76239: LD_ADDR_VAR 0 7
76243: PUSH
76244: LD_VAR 0 6
76248: PUSH
76249: LD_INT 1
76251: ARRAY
76252: PUSH
76253: LD_VAR 0 5
76257: ARRAY
76258: PUSH
76259: LD_VAR 0 6
76263: PUSH
76264: LD_INT 2
76266: ARRAY
76267: PUSH
76268: LD_VAR 0 5
76272: ARRAY
76273: PUSH
76274: EMPTY
76275: LIST
76276: LIST
76277: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
76278: LD_INT 92
76280: PUSH
76281: LD_VAR 0 7
76285: PUSH
76286: LD_INT 1
76288: ARRAY
76289: PUSH
76290: LD_VAR 0 7
76294: PUSH
76295: LD_INT 2
76297: ARRAY
76298: PUSH
76299: LD_INT 2
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: LIST
76306: LIST
76307: PPUSH
76308: CALL_OW 69
76312: PUSH
76313: LD_INT 0
76315: EQUAL
76316: IFFALSE 76369
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76318: LD_VAR 0 1
76322: PPUSH
76323: LD_VAR 0 7
76327: PUSH
76328: LD_INT 1
76330: ARRAY
76331: PPUSH
76332: LD_VAR 0 7
76336: PUSH
76337: LD_INT 2
76339: ARRAY
76340: PPUSH
76341: LD_VAR 0 3
76345: PPUSH
76346: CALL_OW 48
// result := IsPlaced ( unit ) ;
76350: LD_ADDR_VAR 0 4
76354: PUSH
76355: LD_VAR 0 1
76359: PPUSH
76360: CALL_OW 305
76364: ST_TO_ADDR
// exit ;
76365: POP
76366: POP
76367: GO 76373
// end ; end ;
76369: GO 76236
76371: POP
76372: POP
// end ;
76373: LD_VAR 0 4
76377: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76378: LD_INT 0
76380: PPUSH
76381: PPUSH
76382: PPUSH
// if not side or side > 8 then
76383: LD_VAR 0 1
76387: NOT
76388: PUSH
76389: LD_VAR 0 1
76393: PUSH
76394: LD_INT 8
76396: GREATER
76397: OR
76398: IFFALSE 76402
// exit ;
76400: GO 76589
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76402: LD_ADDR_VAR 0 4
76406: PUSH
76407: LD_INT 22
76409: PUSH
76410: LD_VAR 0 1
76414: PUSH
76415: EMPTY
76416: LIST
76417: LIST
76418: PUSH
76419: LD_INT 21
76421: PUSH
76422: LD_INT 3
76424: PUSH
76425: EMPTY
76426: LIST
76427: LIST
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: PPUSH
76433: CALL_OW 69
76437: ST_TO_ADDR
// if not tmp then
76438: LD_VAR 0 4
76442: NOT
76443: IFFALSE 76447
// exit ;
76445: GO 76589
// enable_addtolog := true ;
76447: LD_ADDR_OWVAR 81
76451: PUSH
76452: LD_INT 1
76454: ST_TO_ADDR
// AddToLog ( [ ) ;
76455: LD_STRING [
76457: PPUSH
76458: CALL_OW 561
// for i in tmp do
76462: LD_ADDR_VAR 0 3
76466: PUSH
76467: LD_VAR 0 4
76471: PUSH
76472: FOR_IN
76473: IFFALSE 76580
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76475: LD_STRING [
76477: PUSH
76478: LD_VAR 0 3
76482: PPUSH
76483: CALL_OW 266
76487: STR
76488: PUSH
76489: LD_STRING , 
76491: STR
76492: PUSH
76493: LD_VAR 0 3
76497: PPUSH
76498: CALL_OW 250
76502: STR
76503: PUSH
76504: LD_STRING , 
76506: STR
76507: PUSH
76508: LD_VAR 0 3
76512: PPUSH
76513: CALL_OW 251
76517: STR
76518: PUSH
76519: LD_STRING , 
76521: STR
76522: PUSH
76523: LD_VAR 0 3
76527: PPUSH
76528: CALL_OW 254
76532: STR
76533: PUSH
76534: LD_STRING , 
76536: STR
76537: PUSH
76538: LD_VAR 0 3
76542: PPUSH
76543: LD_INT 1
76545: PPUSH
76546: CALL_OW 268
76550: STR
76551: PUSH
76552: LD_STRING , 
76554: STR
76555: PUSH
76556: LD_VAR 0 3
76560: PPUSH
76561: LD_INT 2
76563: PPUSH
76564: CALL_OW 268
76568: STR
76569: PUSH
76570: LD_STRING ],
76572: STR
76573: PPUSH
76574: CALL_OW 561
// end ;
76578: GO 76472
76580: POP
76581: POP
// AddToLog ( ]; ) ;
76582: LD_STRING ];
76584: PPUSH
76585: CALL_OW 561
// end ;
76589: LD_VAR 0 2
76593: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76594: LD_INT 0
76596: PPUSH
76597: PPUSH
76598: PPUSH
76599: PPUSH
76600: PPUSH
// if not area or not rate or not max then
76601: LD_VAR 0 1
76605: NOT
76606: PUSH
76607: LD_VAR 0 2
76611: NOT
76612: OR
76613: PUSH
76614: LD_VAR 0 4
76618: NOT
76619: OR
76620: IFFALSE 76624
// exit ;
76622: GO 76813
// while 1 do
76624: LD_INT 1
76626: IFFALSE 76813
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76628: LD_ADDR_VAR 0 9
76632: PUSH
76633: LD_VAR 0 1
76637: PPUSH
76638: LD_INT 1
76640: PPUSH
76641: CALL_OW 287
76645: PUSH
76646: LD_INT 10
76648: MUL
76649: ST_TO_ADDR
// r := rate / 10 ;
76650: LD_ADDR_VAR 0 7
76654: PUSH
76655: LD_VAR 0 2
76659: PUSH
76660: LD_INT 10
76662: DIVREAL
76663: ST_TO_ADDR
// time := 1 1$00 ;
76664: LD_ADDR_VAR 0 8
76668: PUSH
76669: LD_INT 2100
76671: ST_TO_ADDR
// if amount < min then
76672: LD_VAR 0 9
76676: PUSH
76677: LD_VAR 0 3
76681: LESS
76682: IFFALSE 76700
// r := r * 2 else
76684: LD_ADDR_VAR 0 7
76688: PUSH
76689: LD_VAR 0 7
76693: PUSH
76694: LD_INT 2
76696: MUL
76697: ST_TO_ADDR
76698: GO 76726
// if amount > max then
76700: LD_VAR 0 9
76704: PUSH
76705: LD_VAR 0 4
76709: GREATER
76710: IFFALSE 76726
// r := r / 2 ;
76712: LD_ADDR_VAR 0 7
76716: PUSH
76717: LD_VAR 0 7
76721: PUSH
76722: LD_INT 2
76724: DIVREAL
76725: ST_TO_ADDR
// time := time / r ;
76726: LD_ADDR_VAR 0 8
76730: PUSH
76731: LD_VAR 0 8
76735: PUSH
76736: LD_VAR 0 7
76740: DIVREAL
76741: ST_TO_ADDR
// if time < 0 then
76742: LD_VAR 0 8
76746: PUSH
76747: LD_INT 0
76749: LESS
76750: IFFALSE 76767
// time := time * - 1 ;
76752: LD_ADDR_VAR 0 8
76756: PUSH
76757: LD_VAR 0 8
76761: PUSH
76762: LD_INT 1
76764: NEG
76765: MUL
76766: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76767: LD_VAR 0 8
76771: PUSH
76772: LD_INT 35
76774: PPUSH
76775: LD_INT 875
76777: PPUSH
76778: CALL_OW 12
76782: PLUS
76783: PPUSH
76784: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76788: LD_INT 1
76790: PPUSH
76791: LD_INT 5
76793: PPUSH
76794: CALL_OW 12
76798: PPUSH
76799: LD_VAR 0 1
76803: PPUSH
76804: LD_INT 1
76806: PPUSH
76807: CALL_OW 55
// end ;
76811: GO 76624
// end ;
76813: LD_VAR 0 5
76817: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76818: LD_INT 0
76820: PPUSH
76821: PPUSH
76822: PPUSH
76823: PPUSH
76824: PPUSH
76825: PPUSH
76826: PPUSH
76827: PPUSH
// if not turrets or not factories then
76828: LD_VAR 0 1
76832: NOT
76833: PUSH
76834: LD_VAR 0 2
76838: NOT
76839: OR
76840: IFFALSE 76844
// exit ;
76842: GO 77151
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76844: LD_ADDR_VAR 0 10
76848: PUSH
76849: LD_INT 5
76851: PUSH
76852: LD_INT 6
76854: PUSH
76855: EMPTY
76856: LIST
76857: LIST
76858: PUSH
76859: LD_INT 2
76861: PUSH
76862: LD_INT 4
76864: PUSH
76865: EMPTY
76866: LIST
76867: LIST
76868: PUSH
76869: LD_INT 3
76871: PUSH
76872: LD_INT 5
76874: PUSH
76875: EMPTY
76876: LIST
76877: LIST
76878: PUSH
76879: EMPTY
76880: LIST
76881: LIST
76882: LIST
76883: PUSH
76884: LD_INT 24
76886: PUSH
76887: LD_INT 25
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_INT 23
76896: PUSH
76897: LD_INT 27
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PUSH
76908: LD_INT 42
76910: PUSH
76911: LD_INT 43
76913: PUSH
76914: EMPTY
76915: LIST
76916: LIST
76917: PUSH
76918: LD_INT 44
76920: PUSH
76921: LD_INT 46
76923: PUSH
76924: EMPTY
76925: LIST
76926: LIST
76927: PUSH
76928: LD_INT 45
76930: PUSH
76931: LD_INT 47
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: LIST
76942: PUSH
76943: EMPTY
76944: LIST
76945: LIST
76946: LIST
76947: ST_TO_ADDR
// result := [ ] ;
76948: LD_ADDR_VAR 0 3
76952: PUSH
76953: EMPTY
76954: ST_TO_ADDR
// for i in turrets do
76955: LD_ADDR_VAR 0 4
76959: PUSH
76960: LD_VAR 0 1
76964: PUSH
76965: FOR_IN
76966: IFFALSE 77149
// begin nat := GetNation ( i ) ;
76968: LD_ADDR_VAR 0 7
76972: PUSH
76973: LD_VAR 0 4
76977: PPUSH
76978: CALL_OW 248
76982: ST_TO_ADDR
// weapon := 0 ;
76983: LD_ADDR_VAR 0 8
76987: PUSH
76988: LD_INT 0
76990: ST_TO_ADDR
// if not nat then
76991: LD_VAR 0 7
76995: NOT
76996: IFFALSE 77000
// continue ;
76998: GO 76965
// for j in list [ nat ] do
77000: LD_ADDR_VAR 0 5
77004: PUSH
77005: LD_VAR 0 10
77009: PUSH
77010: LD_VAR 0 7
77014: ARRAY
77015: PUSH
77016: FOR_IN
77017: IFFALSE 77058
// if GetBWeapon ( i ) = j [ 1 ] then
77019: LD_VAR 0 4
77023: PPUSH
77024: CALL_OW 269
77028: PUSH
77029: LD_VAR 0 5
77033: PUSH
77034: LD_INT 1
77036: ARRAY
77037: EQUAL
77038: IFFALSE 77056
// begin weapon := j [ 2 ] ;
77040: LD_ADDR_VAR 0 8
77044: PUSH
77045: LD_VAR 0 5
77049: PUSH
77050: LD_INT 2
77052: ARRAY
77053: ST_TO_ADDR
// break ;
77054: GO 77058
// end ;
77056: GO 77016
77058: POP
77059: POP
// if not weapon then
77060: LD_VAR 0 8
77064: NOT
77065: IFFALSE 77069
// continue ;
77067: GO 76965
// for k in factories do
77069: LD_ADDR_VAR 0 6
77073: PUSH
77074: LD_VAR 0 2
77078: PUSH
77079: FOR_IN
77080: IFFALSE 77145
// begin weapons := AvailableWeaponList ( k ) ;
77082: LD_ADDR_VAR 0 9
77086: PUSH
77087: LD_VAR 0 6
77091: PPUSH
77092: CALL_OW 478
77096: ST_TO_ADDR
// if not weapons then
77097: LD_VAR 0 9
77101: NOT
77102: IFFALSE 77106
// continue ;
77104: GO 77079
// if weapon in weapons then
77106: LD_VAR 0 8
77110: PUSH
77111: LD_VAR 0 9
77115: IN
77116: IFFALSE 77143
// begin result := [ i , weapon ] ;
77118: LD_ADDR_VAR 0 3
77122: PUSH
77123: LD_VAR 0 4
77127: PUSH
77128: LD_VAR 0 8
77132: PUSH
77133: EMPTY
77134: LIST
77135: LIST
77136: ST_TO_ADDR
// exit ;
77137: POP
77138: POP
77139: POP
77140: POP
77141: GO 77151
// end ; end ;
77143: GO 77079
77145: POP
77146: POP
// end ;
77147: GO 76965
77149: POP
77150: POP
// end ;
77151: LD_VAR 0 3
77155: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77156: LD_INT 0
77158: PPUSH
// if not side or side > 8 then
77159: LD_VAR 0 3
77163: NOT
77164: PUSH
77165: LD_VAR 0 3
77169: PUSH
77170: LD_INT 8
77172: GREATER
77173: OR
77174: IFFALSE 77178
// exit ;
77176: GO 77237
// if not range then
77178: LD_VAR 0 4
77182: NOT
77183: IFFALSE 77194
// range := - 12 ;
77185: LD_ADDR_VAR 0 4
77189: PUSH
77190: LD_INT 12
77192: NEG
77193: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77194: LD_VAR 0 1
77198: PPUSH
77199: LD_VAR 0 2
77203: PPUSH
77204: LD_VAR 0 3
77208: PPUSH
77209: LD_VAR 0 4
77213: PPUSH
77214: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77218: LD_VAR 0 1
77222: PPUSH
77223: LD_VAR 0 2
77227: PPUSH
77228: LD_VAR 0 3
77232: PPUSH
77233: CALL_OW 331
// end ;
77237: LD_VAR 0 5
77241: RET
// export function Video ( mode ) ; begin
77242: LD_INT 0
77244: PPUSH
// ingame_video = mode ;
77245: LD_ADDR_OWVAR 52
77249: PUSH
77250: LD_VAR 0 1
77254: ST_TO_ADDR
// interface_hidden = mode ;
77255: LD_ADDR_OWVAR 54
77259: PUSH
77260: LD_VAR 0 1
77264: ST_TO_ADDR
// end ;
77265: LD_VAR 0 2
77269: RET
// export function Join ( array , element ) ; begin
77270: LD_INT 0
77272: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77273: LD_ADDR_VAR 0 3
77277: PUSH
77278: LD_VAR 0 1
77282: PPUSH
77283: LD_VAR 0 1
77287: PUSH
77288: LD_INT 1
77290: PLUS
77291: PPUSH
77292: LD_VAR 0 2
77296: PPUSH
77297: CALL_OW 1
77301: ST_TO_ADDR
// end ;
77302: LD_VAR 0 3
77306: RET
// export function JoinUnion ( array , element ) ; begin
77307: LD_INT 0
77309: PPUSH
// result := array union element ;
77310: LD_ADDR_VAR 0 3
77314: PUSH
77315: LD_VAR 0 1
77319: PUSH
77320: LD_VAR 0 2
77324: UNION
77325: ST_TO_ADDR
// end ;
77326: LD_VAR 0 3
77330: RET
// export function GetBehemoths ( side ) ; begin
77331: LD_INT 0
77333: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77334: LD_ADDR_VAR 0 2
77338: PUSH
77339: LD_INT 22
77341: PUSH
77342: LD_VAR 0 1
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: PUSH
77351: LD_INT 31
77353: PUSH
77354: LD_INT 25
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: PUSH
77361: EMPTY
77362: LIST
77363: LIST
77364: PPUSH
77365: CALL_OW 69
77369: ST_TO_ADDR
// end ;
77370: LD_VAR 0 2
77374: RET
// export function Shuffle ( array ) ; var i , index ; begin
77375: LD_INT 0
77377: PPUSH
77378: PPUSH
77379: PPUSH
// result := [ ] ;
77380: LD_ADDR_VAR 0 2
77384: PUSH
77385: EMPTY
77386: ST_TO_ADDR
// if not array then
77387: LD_VAR 0 1
77391: NOT
77392: IFFALSE 77396
// exit ;
77394: GO 77495
// Randomize ;
77396: CALL_OW 10
// for i = array downto 1 do
77400: LD_ADDR_VAR 0 3
77404: PUSH
77405: DOUBLE
77406: LD_VAR 0 1
77410: INC
77411: ST_TO_ADDR
77412: LD_INT 1
77414: PUSH
77415: FOR_DOWNTO
77416: IFFALSE 77493
// begin index := rand ( 1 , array ) ;
77418: LD_ADDR_VAR 0 4
77422: PUSH
77423: LD_INT 1
77425: PPUSH
77426: LD_VAR 0 1
77430: PPUSH
77431: CALL_OW 12
77435: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77436: LD_ADDR_VAR 0 2
77440: PUSH
77441: LD_VAR 0 2
77445: PPUSH
77446: LD_VAR 0 2
77450: PUSH
77451: LD_INT 1
77453: PLUS
77454: PPUSH
77455: LD_VAR 0 1
77459: PUSH
77460: LD_VAR 0 4
77464: ARRAY
77465: PPUSH
77466: CALL_OW 2
77470: ST_TO_ADDR
// array := Delete ( array , index ) ;
77471: LD_ADDR_VAR 0 1
77475: PUSH
77476: LD_VAR 0 1
77480: PPUSH
77481: LD_VAR 0 4
77485: PPUSH
77486: CALL_OW 3
77490: ST_TO_ADDR
// end ;
77491: GO 77415
77493: POP
77494: POP
// end ;
77495: LD_VAR 0 2
77499: RET
// export function GetBaseMaterials ( base ) ; begin
77500: LD_INT 0
77502: PPUSH
// result := [ 0 , 0 , 0 ] ;
77503: LD_ADDR_VAR 0 2
77507: PUSH
77508: LD_INT 0
77510: PUSH
77511: LD_INT 0
77513: PUSH
77514: LD_INT 0
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: LIST
77521: ST_TO_ADDR
// if not base then
77522: LD_VAR 0 1
77526: NOT
77527: IFFALSE 77531
// exit ;
77529: GO 77580
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77531: LD_ADDR_VAR 0 2
77535: PUSH
77536: LD_VAR 0 1
77540: PPUSH
77541: LD_INT 1
77543: PPUSH
77544: CALL_OW 275
77548: PUSH
77549: LD_VAR 0 1
77553: PPUSH
77554: LD_INT 2
77556: PPUSH
77557: CALL_OW 275
77561: PUSH
77562: LD_VAR 0 1
77566: PPUSH
77567: LD_INT 3
77569: PPUSH
77570: CALL_OW 275
77574: PUSH
77575: EMPTY
77576: LIST
77577: LIST
77578: LIST
77579: ST_TO_ADDR
// end ;
77580: LD_VAR 0 2
77584: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77585: LD_INT 0
77587: PPUSH
77588: PPUSH
// result := array ;
77589: LD_ADDR_VAR 0 3
77593: PUSH
77594: LD_VAR 0 1
77598: ST_TO_ADDR
// if size >= result then
77599: LD_VAR 0 2
77603: PUSH
77604: LD_VAR 0 3
77608: GREATEREQUAL
77609: IFFALSE 77613
// exit ;
77611: GO 77663
// if size then
77613: LD_VAR 0 2
77617: IFFALSE 77663
// for i := array downto size do
77619: LD_ADDR_VAR 0 4
77623: PUSH
77624: DOUBLE
77625: LD_VAR 0 1
77629: INC
77630: ST_TO_ADDR
77631: LD_VAR 0 2
77635: PUSH
77636: FOR_DOWNTO
77637: IFFALSE 77661
// result := Delete ( result , result ) ;
77639: LD_ADDR_VAR 0 3
77643: PUSH
77644: LD_VAR 0 3
77648: PPUSH
77649: LD_VAR 0 3
77653: PPUSH
77654: CALL_OW 3
77658: ST_TO_ADDR
77659: GO 77636
77661: POP
77662: POP
// end ;
77663: LD_VAR 0 3
77667: RET
// export function ComExit ( unit ) ; var tmp ; begin
77668: LD_INT 0
77670: PPUSH
77671: PPUSH
// if not IsInUnit ( unit ) then
77672: LD_VAR 0 1
77676: PPUSH
77677: CALL_OW 310
77681: NOT
77682: IFFALSE 77686
// exit ;
77684: GO 77746
// tmp := IsInUnit ( unit ) ;
77686: LD_ADDR_VAR 0 3
77690: PUSH
77691: LD_VAR 0 1
77695: PPUSH
77696: CALL_OW 310
77700: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77701: LD_VAR 0 3
77705: PPUSH
77706: CALL_OW 247
77710: PUSH
77711: LD_INT 2
77713: EQUAL
77714: IFFALSE 77727
// ComExitVehicle ( unit ) else
77716: LD_VAR 0 1
77720: PPUSH
77721: CALL_OW 121
77725: GO 77736
// ComExitBuilding ( unit ) ;
77727: LD_VAR 0 1
77731: PPUSH
77732: CALL_OW 122
// result := tmp ;
77736: LD_ADDR_VAR 0 2
77740: PUSH
77741: LD_VAR 0 3
77745: ST_TO_ADDR
// end ;
77746: LD_VAR 0 2
77750: RET
// export function ComExitAll ( units ) ; var i ; begin
77751: LD_INT 0
77753: PPUSH
77754: PPUSH
// if not units then
77755: LD_VAR 0 1
77759: NOT
77760: IFFALSE 77764
// exit ;
77762: GO 77790
// for i in units do
77764: LD_ADDR_VAR 0 3
77768: PUSH
77769: LD_VAR 0 1
77773: PUSH
77774: FOR_IN
77775: IFFALSE 77788
// ComExit ( i ) ;
77777: LD_VAR 0 3
77781: PPUSH
77782: CALL 77668 0 1
77786: GO 77774
77788: POP
77789: POP
// end ;
77790: LD_VAR 0 2
77794: RET
// export function ResetHc ; begin
77795: LD_INT 0
77797: PPUSH
// InitHc ;
77798: CALL_OW 19
// hc_importance := 0 ;
77802: LD_ADDR_OWVAR 32
77806: PUSH
77807: LD_INT 0
77809: ST_TO_ADDR
// end ;
77810: LD_VAR 0 1
77814: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77815: LD_INT 0
77817: PPUSH
77818: PPUSH
77819: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77820: LD_ADDR_VAR 0 6
77824: PUSH
77825: LD_VAR 0 1
77829: PUSH
77830: LD_VAR 0 3
77834: PLUS
77835: PUSH
77836: LD_INT 2
77838: DIV
77839: ST_TO_ADDR
// if _x < 0 then
77840: LD_VAR 0 6
77844: PUSH
77845: LD_INT 0
77847: LESS
77848: IFFALSE 77865
// _x := _x * - 1 ;
77850: LD_ADDR_VAR 0 6
77854: PUSH
77855: LD_VAR 0 6
77859: PUSH
77860: LD_INT 1
77862: NEG
77863: MUL
77864: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77865: LD_ADDR_VAR 0 7
77869: PUSH
77870: LD_VAR 0 2
77874: PUSH
77875: LD_VAR 0 4
77879: PLUS
77880: PUSH
77881: LD_INT 2
77883: DIV
77884: ST_TO_ADDR
// if _y < 0 then
77885: LD_VAR 0 7
77889: PUSH
77890: LD_INT 0
77892: LESS
77893: IFFALSE 77910
// _y := _y * - 1 ;
77895: LD_ADDR_VAR 0 7
77899: PUSH
77900: LD_VAR 0 7
77904: PUSH
77905: LD_INT 1
77907: NEG
77908: MUL
77909: ST_TO_ADDR
// result := [ _x , _y ] ;
77910: LD_ADDR_VAR 0 5
77914: PUSH
77915: LD_VAR 0 6
77919: PUSH
77920: LD_VAR 0 7
77924: PUSH
77925: EMPTY
77926: LIST
77927: LIST
77928: ST_TO_ADDR
// end ;
77929: LD_VAR 0 5
77933: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77934: LD_INT 0
77936: PPUSH
77937: PPUSH
77938: PPUSH
77939: PPUSH
// task := GetTaskList ( unit ) ;
77940: LD_ADDR_VAR 0 7
77944: PUSH
77945: LD_VAR 0 1
77949: PPUSH
77950: CALL_OW 437
77954: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77955: LD_VAR 0 7
77959: NOT
77960: PUSH
77961: LD_VAR 0 1
77965: PPUSH
77966: LD_VAR 0 2
77970: PPUSH
77971: CALL_OW 308
77975: NOT
77976: AND
77977: IFFALSE 77981
// exit ;
77979: GO 78099
// if IsInArea ( unit , area ) then
77981: LD_VAR 0 1
77985: PPUSH
77986: LD_VAR 0 2
77990: PPUSH
77991: CALL_OW 308
77995: IFFALSE 78013
// begin ComMoveToArea ( unit , goAway ) ;
77997: LD_VAR 0 1
78001: PPUSH
78002: LD_VAR 0 3
78006: PPUSH
78007: CALL_OW 113
// exit ;
78011: GO 78099
// end ; if task [ 1 ] [ 1 ] <> M then
78013: LD_VAR 0 7
78017: PUSH
78018: LD_INT 1
78020: ARRAY
78021: PUSH
78022: LD_INT 1
78024: ARRAY
78025: PUSH
78026: LD_STRING M
78028: NONEQUAL
78029: IFFALSE 78033
// exit ;
78031: GO 78099
// x := task [ 1 ] [ 2 ] ;
78033: LD_ADDR_VAR 0 5
78037: PUSH
78038: LD_VAR 0 7
78042: PUSH
78043: LD_INT 1
78045: ARRAY
78046: PUSH
78047: LD_INT 2
78049: ARRAY
78050: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78051: LD_ADDR_VAR 0 6
78055: PUSH
78056: LD_VAR 0 7
78060: PUSH
78061: LD_INT 1
78063: ARRAY
78064: PUSH
78065: LD_INT 3
78067: ARRAY
78068: ST_TO_ADDR
// if InArea ( x , y , area ) then
78069: LD_VAR 0 5
78073: PPUSH
78074: LD_VAR 0 6
78078: PPUSH
78079: LD_VAR 0 2
78083: PPUSH
78084: CALL_OW 309
78088: IFFALSE 78099
// ComStop ( unit ) ;
78090: LD_VAR 0 1
78094: PPUSH
78095: CALL_OW 141
// end ;
78099: LD_VAR 0 4
78103: RET
// export function Abs ( value ) ; begin
78104: LD_INT 0
78106: PPUSH
// result := value ;
78107: LD_ADDR_VAR 0 2
78111: PUSH
78112: LD_VAR 0 1
78116: ST_TO_ADDR
// if value < 0 then
78117: LD_VAR 0 1
78121: PUSH
78122: LD_INT 0
78124: LESS
78125: IFFALSE 78142
// result := value * - 1 ;
78127: LD_ADDR_VAR 0 2
78131: PUSH
78132: LD_VAR 0 1
78136: PUSH
78137: LD_INT 1
78139: NEG
78140: MUL
78141: ST_TO_ADDR
// end ;
78142: LD_VAR 0 2
78146: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78147: LD_INT 0
78149: PPUSH
78150: PPUSH
78151: PPUSH
78152: PPUSH
78153: PPUSH
78154: PPUSH
78155: PPUSH
78156: PPUSH
// if not unit or not building then
78157: LD_VAR 0 1
78161: NOT
78162: PUSH
78163: LD_VAR 0 2
78167: NOT
78168: OR
78169: IFFALSE 78173
// exit ;
78171: GO 78399
// x := GetX ( building ) ;
78173: LD_ADDR_VAR 0 4
78177: PUSH
78178: LD_VAR 0 2
78182: PPUSH
78183: CALL_OW 250
78187: ST_TO_ADDR
// y := GetY ( building ) ;
78188: LD_ADDR_VAR 0 6
78192: PUSH
78193: LD_VAR 0 2
78197: PPUSH
78198: CALL_OW 251
78202: ST_TO_ADDR
// d := GetDir ( building ) ;
78203: LD_ADDR_VAR 0 8
78207: PUSH
78208: LD_VAR 0 2
78212: PPUSH
78213: CALL_OW 254
78217: ST_TO_ADDR
// r := 4 ;
78218: LD_ADDR_VAR 0 9
78222: PUSH
78223: LD_INT 4
78225: ST_TO_ADDR
// for i := 1 to 5 do
78226: LD_ADDR_VAR 0 10
78230: PUSH
78231: DOUBLE
78232: LD_INT 1
78234: DEC
78235: ST_TO_ADDR
78236: LD_INT 5
78238: PUSH
78239: FOR_TO
78240: IFFALSE 78397
// begin _x := ShiftX ( x , d , r + i ) ;
78242: LD_ADDR_VAR 0 5
78246: PUSH
78247: LD_VAR 0 4
78251: PPUSH
78252: LD_VAR 0 8
78256: PPUSH
78257: LD_VAR 0 9
78261: PUSH
78262: LD_VAR 0 10
78266: PLUS
78267: PPUSH
78268: CALL_OW 272
78272: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78273: LD_ADDR_VAR 0 7
78277: PUSH
78278: LD_VAR 0 6
78282: PPUSH
78283: LD_VAR 0 8
78287: PPUSH
78288: LD_VAR 0 9
78292: PUSH
78293: LD_VAR 0 10
78297: PLUS
78298: PPUSH
78299: CALL_OW 273
78303: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78304: LD_VAR 0 5
78308: PPUSH
78309: LD_VAR 0 7
78313: PPUSH
78314: CALL_OW 488
78318: PUSH
78319: LD_VAR 0 5
78323: PPUSH
78324: LD_VAR 0 7
78328: PPUSH
78329: CALL_OW 428
78333: PPUSH
78334: CALL_OW 247
78338: PUSH
78339: LD_INT 3
78341: PUSH
78342: LD_INT 2
78344: PUSH
78345: EMPTY
78346: LIST
78347: LIST
78348: IN
78349: NOT
78350: AND
78351: IFFALSE 78395
// begin ComMoveXY ( unit , _x , _y ) ;
78353: LD_VAR 0 1
78357: PPUSH
78358: LD_VAR 0 5
78362: PPUSH
78363: LD_VAR 0 7
78367: PPUSH
78368: CALL_OW 111
// result := [ _x , _y ] ;
78372: LD_ADDR_VAR 0 3
78376: PUSH
78377: LD_VAR 0 5
78381: PUSH
78382: LD_VAR 0 7
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: ST_TO_ADDR
// exit ;
78391: POP
78392: POP
78393: GO 78399
// end ; end ;
78395: GO 78239
78397: POP
78398: POP
// end ;
78399: LD_VAR 0 3
78403: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78404: LD_INT 0
78406: PPUSH
78407: PPUSH
78408: PPUSH
// result := 0 ;
78409: LD_ADDR_VAR 0 3
78413: PUSH
78414: LD_INT 0
78416: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78417: LD_VAR 0 1
78421: PUSH
78422: LD_INT 0
78424: LESS
78425: PUSH
78426: LD_VAR 0 1
78430: PUSH
78431: LD_INT 8
78433: GREATER
78434: OR
78435: PUSH
78436: LD_VAR 0 2
78440: PUSH
78441: LD_INT 0
78443: LESS
78444: OR
78445: PUSH
78446: LD_VAR 0 2
78450: PUSH
78451: LD_INT 8
78453: GREATER
78454: OR
78455: IFFALSE 78459
// exit ;
78457: GO 78534
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78459: LD_ADDR_VAR 0 4
78463: PUSH
78464: LD_INT 22
78466: PUSH
78467: LD_VAR 0 2
78471: PUSH
78472: EMPTY
78473: LIST
78474: LIST
78475: PPUSH
78476: CALL_OW 69
78480: PUSH
78481: FOR_IN
78482: IFFALSE 78532
// begin un := UnitShoot ( i ) ;
78484: LD_ADDR_VAR 0 5
78488: PUSH
78489: LD_VAR 0 4
78493: PPUSH
78494: CALL_OW 504
78498: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78499: LD_VAR 0 5
78503: PPUSH
78504: CALL_OW 255
78508: PUSH
78509: LD_VAR 0 1
78513: EQUAL
78514: IFFALSE 78530
// begin result := un ;
78516: LD_ADDR_VAR 0 3
78520: PUSH
78521: LD_VAR 0 5
78525: ST_TO_ADDR
// exit ;
78526: POP
78527: POP
78528: GO 78534
// end ; end ;
78530: GO 78481
78532: POP
78533: POP
// end ;
78534: LD_VAR 0 3
78538: RET
// export function GetCargoBay ( units ) ; begin
78539: LD_INT 0
78541: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78542: LD_ADDR_VAR 0 2
78546: PUSH
78547: LD_VAR 0 1
78551: PPUSH
78552: LD_INT 2
78554: PUSH
78555: LD_INT 34
78557: PUSH
78558: LD_INT 12
78560: PUSH
78561: EMPTY
78562: LIST
78563: LIST
78564: PUSH
78565: LD_INT 34
78567: PUSH
78568: LD_INT 51
78570: PUSH
78571: EMPTY
78572: LIST
78573: LIST
78574: PUSH
78575: LD_INT 34
78577: PUSH
78578: LD_INT 32
78580: PUSH
78581: EMPTY
78582: LIST
78583: LIST
78584: PUSH
78585: LD_INT 34
78587: PUSH
78588: LD_INT 89
78590: PUSH
78591: EMPTY
78592: LIST
78593: LIST
78594: PUSH
78595: EMPTY
78596: LIST
78597: LIST
78598: LIST
78599: LIST
78600: LIST
78601: PPUSH
78602: CALL_OW 72
78606: ST_TO_ADDR
// end ;
78607: LD_VAR 0 2
78611: RET
// export function Negate ( value ) ; begin
78612: LD_INT 0
78614: PPUSH
// result := not value ;
78615: LD_ADDR_VAR 0 2
78619: PUSH
78620: LD_VAR 0 1
78624: NOT
78625: ST_TO_ADDR
// end ;
78626: LD_VAR 0 2
78630: RET
// export function Inc ( value ) ; begin
78631: LD_INT 0
78633: PPUSH
// result := value + 1 ;
78634: LD_ADDR_VAR 0 2
78638: PUSH
78639: LD_VAR 0 1
78643: PUSH
78644: LD_INT 1
78646: PLUS
78647: ST_TO_ADDR
// end ;
78648: LD_VAR 0 2
78652: RET
// export function Dec ( value ) ; begin
78653: LD_INT 0
78655: PPUSH
// result := value - 1 ;
78656: LD_ADDR_VAR 0 2
78660: PUSH
78661: LD_VAR 0 1
78665: PUSH
78666: LD_INT 1
78668: MINUS
78669: ST_TO_ADDR
// end ;
78670: LD_VAR 0 2
78674: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78675: LD_INT 0
78677: PPUSH
78678: PPUSH
78679: PPUSH
78680: PPUSH
78681: PPUSH
78682: PPUSH
78683: PPUSH
78684: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78685: LD_VAR 0 1
78689: PPUSH
78690: LD_VAR 0 2
78694: PPUSH
78695: CALL_OW 488
78699: NOT
78700: PUSH
78701: LD_VAR 0 3
78705: PPUSH
78706: LD_VAR 0 4
78710: PPUSH
78711: CALL_OW 488
78715: NOT
78716: OR
78717: IFFALSE 78730
// begin result := - 1 ;
78719: LD_ADDR_VAR 0 5
78723: PUSH
78724: LD_INT 1
78726: NEG
78727: ST_TO_ADDR
// exit ;
78728: GO 78965
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78730: LD_ADDR_VAR 0 12
78734: PUSH
78735: LD_VAR 0 1
78739: PPUSH
78740: LD_VAR 0 2
78744: PPUSH
78745: LD_VAR 0 3
78749: PPUSH
78750: LD_VAR 0 4
78754: PPUSH
78755: CALL 77815 0 4
78759: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78760: LD_ADDR_VAR 0 11
78764: PUSH
78765: LD_VAR 0 1
78769: PPUSH
78770: LD_VAR 0 2
78774: PPUSH
78775: LD_VAR 0 12
78779: PUSH
78780: LD_INT 1
78782: ARRAY
78783: PPUSH
78784: LD_VAR 0 12
78788: PUSH
78789: LD_INT 2
78791: ARRAY
78792: PPUSH
78793: CALL_OW 298
78797: ST_TO_ADDR
// distance := 9999 ;
78798: LD_ADDR_VAR 0 10
78802: PUSH
78803: LD_INT 9999
78805: ST_TO_ADDR
// for i := 0 to 5 do
78806: LD_ADDR_VAR 0 6
78810: PUSH
78811: DOUBLE
78812: LD_INT 0
78814: DEC
78815: ST_TO_ADDR
78816: LD_INT 5
78818: PUSH
78819: FOR_TO
78820: IFFALSE 78963
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78822: LD_ADDR_VAR 0 7
78826: PUSH
78827: LD_VAR 0 1
78831: PPUSH
78832: LD_VAR 0 6
78836: PPUSH
78837: LD_VAR 0 11
78841: PPUSH
78842: CALL_OW 272
78846: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78847: LD_ADDR_VAR 0 8
78851: PUSH
78852: LD_VAR 0 2
78856: PPUSH
78857: LD_VAR 0 6
78861: PPUSH
78862: LD_VAR 0 11
78866: PPUSH
78867: CALL_OW 273
78871: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78872: LD_VAR 0 7
78876: PPUSH
78877: LD_VAR 0 8
78881: PPUSH
78882: CALL_OW 488
78886: NOT
78887: IFFALSE 78891
// continue ;
78889: GO 78819
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78891: LD_ADDR_VAR 0 9
78895: PUSH
78896: LD_VAR 0 12
78900: PUSH
78901: LD_INT 1
78903: ARRAY
78904: PPUSH
78905: LD_VAR 0 12
78909: PUSH
78910: LD_INT 2
78912: ARRAY
78913: PPUSH
78914: LD_VAR 0 7
78918: PPUSH
78919: LD_VAR 0 8
78923: PPUSH
78924: CALL_OW 298
78928: ST_TO_ADDR
// if tmp < distance then
78929: LD_VAR 0 9
78933: PUSH
78934: LD_VAR 0 10
78938: LESS
78939: IFFALSE 78961
// begin result := i ;
78941: LD_ADDR_VAR 0 5
78945: PUSH
78946: LD_VAR 0 6
78950: ST_TO_ADDR
// distance := tmp ;
78951: LD_ADDR_VAR 0 10
78955: PUSH
78956: LD_VAR 0 9
78960: ST_TO_ADDR
// end ; end ;
78961: GO 78819
78963: POP
78964: POP
// end ;
78965: LD_VAR 0 5
78969: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78970: LD_INT 0
78972: PPUSH
78973: PPUSH
// if not driver or not IsInUnit ( driver ) then
78974: LD_VAR 0 1
78978: NOT
78979: PUSH
78980: LD_VAR 0 1
78984: PPUSH
78985: CALL_OW 310
78989: NOT
78990: OR
78991: IFFALSE 78995
// exit ;
78993: GO 79085
// vehicle := IsInUnit ( driver ) ;
78995: LD_ADDR_VAR 0 3
78999: PUSH
79000: LD_VAR 0 1
79004: PPUSH
79005: CALL_OW 310
79009: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79010: LD_VAR 0 1
79014: PPUSH
79015: LD_STRING \
79017: PUSH
79018: LD_INT 0
79020: PUSH
79021: LD_INT 0
79023: PUSH
79024: LD_INT 0
79026: PUSH
79027: LD_INT 0
79029: PUSH
79030: LD_INT 0
79032: PUSH
79033: LD_INT 0
79035: PUSH
79036: EMPTY
79037: LIST
79038: LIST
79039: LIST
79040: LIST
79041: LIST
79042: LIST
79043: LIST
79044: PUSH
79045: LD_STRING E
79047: PUSH
79048: LD_INT 0
79050: PUSH
79051: LD_INT 0
79053: PUSH
79054: LD_VAR 0 3
79058: PUSH
79059: LD_INT 0
79061: PUSH
79062: LD_INT 0
79064: PUSH
79065: LD_INT 0
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: LIST
79072: LIST
79073: LIST
79074: LIST
79075: LIST
79076: PUSH
79077: EMPTY
79078: LIST
79079: LIST
79080: PPUSH
79081: CALL_OW 446
// end ;
79085: LD_VAR 0 2
79089: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79090: LD_INT 0
79092: PPUSH
79093: PPUSH
// if not driver or not IsInUnit ( driver ) then
79094: LD_VAR 0 1
79098: NOT
79099: PUSH
79100: LD_VAR 0 1
79104: PPUSH
79105: CALL_OW 310
79109: NOT
79110: OR
79111: IFFALSE 79115
// exit ;
79113: GO 79205
// vehicle := IsInUnit ( driver ) ;
79115: LD_ADDR_VAR 0 3
79119: PUSH
79120: LD_VAR 0 1
79124: PPUSH
79125: CALL_OW 310
79129: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79130: LD_VAR 0 1
79134: PPUSH
79135: LD_STRING \
79137: PUSH
79138: LD_INT 0
79140: PUSH
79141: LD_INT 0
79143: PUSH
79144: LD_INT 0
79146: PUSH
79147: LD_INT 0
79149: PUSH
79150: LD_INT 0
79152: PUSH
79153: LD_INT 0
79155: PUSH
79156: EMPTY
79157: LIST
79158: LIST
79159: LIST
79160: LIST
79161: LIST
79162: LIST
79163: LIST
79164: PUSH
79165: LD_STRING E
79167: PUSH
79168: LD_INT 0
79170: PUSH
79171: LD_INT 0
79173: PUSH
79174: LD_VAR 0 3
79178: PUSH
79179: LD_INT 0
79181: PUSH
79182: LD_INT 0
79184: PUSH
79185: LD_INT 0
79187: PUSH
79188: EMPTY
79189: LIST
79190: LIST
79191: LIST
79192: LIST
79193: LIST
79194: LIST
79195: LIST
79196: PUSH
79197: EMPTY
79198: LIST
79199: LIST
79200: PPUSH
79201: CALL_OW 447
// end ;
79205: LD_VAR 0 2
79209: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79210: LD_INT 0
79212: PPUSH
79213: PPUSH
79214: PPUSH
// tmp := [ ] ;
79215: LD_ADDR_VAR 0 5
79219: PUSH
79220: EMPTY
79221: ST_TO_ADDR
// for i in units do
79222: LD_ADDR_VAR 0 4
79226: PUSH
79227: LD_VAR 0 1
79231: PUSH
79232: FOR_IN
79233: IFFALSE 79271
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79235: LD_ADDR_VAR 0 5
79239: PUSH
79240: LD_VAR 0 5
79244: PPUSH
79245: LD_VAR 0 5
79249: PUSH
79250: LD_INT 1
79252: PLUS
79253: PPUSH
79254: LD_VAR 0 4
79258: PPUSH
79259: CALL_OW 256
79263: PPUSH
79264: CALL_OW 2
79268: ST_TO_ADDR
79269: GO 79232
79271: POP
79272: POP
// if not tmp then
79273: LD_VAR 0 5
79277: NOT
79278: IFFALSE 79282
// exit ;
79280: GO 79330
// if asc then
79282: LD_VAR 0 2
79286: IFFALSE 79310
// result := SortListByListAsc ( units , tmp ) else
79288: LD_ADDR_VAR 0 3
79292: PUSH
79293: LD_VAR 0 1
79297: PPUSH
79298: LD_VAR 0 5
79302: PPUSH
79303: CALL_OW 76
79307: ST_TO_ADDR
79308: GO 79330
// result := SortListByListDesc ( units , tmp ) ;
79310: LD_ADDR_VAR 0 3
79314: PUSH
79315: LD_VAR 0 1
79319: PPUSH
79320: LD_VAR 0 5
79324: PPUSH
79325: CALL_OW 77
79329: ST_TO_ADDR
// end ;
79330: LD_VAR 0 3
79334: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79335: LD_INT 0
79337: PPUSH
79338: PPUSH
// task := GetTaskList ( mech ) ;
79339: LD_ADDR_VAR 0 4
79343: PUSH
79344: LD_VAR 0 1
79348: PPUSH
79349: CALL_OW 437
79353: ST_TO_ADDR
// if not task then
79354: LD_VAR 0 4
79358: NOT
79359: IFFALSE 79363
// exit ;
79361: GO 79405
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79363: LD_ADDR_VAR 0 3
79367: PUSH
79368: LD_VAR 0 4
79372: PUSH
79373: LD_INT 1
79375: ARRAY
79376: PUSH
79377: LD_INT 1
79379: ARRAY
79380: PUSH
79381: LD_STRING r
79383: EQUAL
79384: PUSH
79385: LD_VAR 0 4
79389: PUSH
79390: LD_INT 1
79392: ARRAY
79393: PUSH
79394: LD_INT 4
79396: ARRAY
79397: PUSH
79398: LD_VAR 0 2
79402: EQUAL
79403: AND
79404: ST_TO_ADDR
// end ;
79405: LD_VAR 0 3
79409: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79410: LD_INT 0
79412: PPUSH
// SetDir ( unit , d ) ;
79413: LD_VAR 0 1
79417: PPUSH
79418: LD_VAR 0 4
79422: PPUSH
79423: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79427: LD_VAR 0 1
79431: PPUSH
79432: LD_VAR 0 2
79436: PPUSH
79437: LD_VAR 0 3
79441: PPUSH
79442: LD_VAR 0 5
79446: PPUSH
79447: CALL_OW 48
// end ;
79451: LD_VAR 0 6
79455: RET
// export function ToNaturalNumber ( number ) ; begin
79456: LD_INT 0
79458: PPUSH
// result := number div 1 ;
79459: LD_ADDR_VAR 0 2
79463: PUSH
79464: LD_VAR 0 1
79468: PUSH
79469: LD_INT 1
79471: DIV
79472: ST_TO_ADDR
// if number < 0 then
79473: LD_VAR 0 1
79477: PUSH
79478: LD_INT 0
79480: LESS
79481: IFFALSE 79491
// result := 0 ;
79483: LD_ADDR_VAR 0 2
79487: PUSH
79488: LD_INT 0
79490: ST_TO_ADDR
// end ;
79491: LD_VAR 0 2
79495: RET
// export function SortByClass ( units , class ) ; var un ; begin
79496: LD_INT 0
79498: PPUSH
79499: PPUSH
// if not units or not class then
79500: LD_VAR 0 1
79504: NOT
79505: PUSH
79506: LD_VAR 0 2
79510: NOT
79511: OR
79512: IFFALSE 79516
// exit ;
79514: GO 79611
// result := [ ] ;
79516: LD_ADDR_VAR 0 3
79520: PUSH
79521: EMPTY
79522: ST_TO_ADDR
// for un in units do
79523: LD_ADDR_VAR 0 4
79527: PUSH
79528: LD_VAR 0 1
79532: PUSH
79533: FOR_IN
79534: IFFALSE 79609
// if GetClass ( un ) = class then
79536: LD_VAR 0 4
79540: PPUSH
79541: CALL_OW 257
79545: PUSH
79546: LD_VAR 0 2
79550: EQUAL
79551: IFFALSE 79578
// result := Insert ( result , 1 , un ) else
79553: LD_ADDR_VAR 0 3
79557: PUSH
79558: LD_VAR 0 3
79562: PPUSH
79563: LD_INT 1
79565: PPUSH
79566: LD_VAR 0 4
79570: PPUSH
79571: CALL_OW 2
79575: ST_TO_ADDR
79576: GO 79607
// result := Replace ( result , result + 1 , un ) ;
79578: LD_ADDR_VAR 0 3
79582: PUSH
79583: LD_VAR 0 3
79587: PPUSH
79588: LD_VAR 0 3
79592: PUSH
79593: LD_INT 1
79595: PLUS
79596: PPUSH
79597: LD_VAR 0 4
79601: PPUSH
79602: CALL_OW 1
79606: ST_TO_ADDR
79607: GO 79533
79609: POP
79610: POP
// end ;
79611: LD_VAR 0 3
79615: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79616: LD_INT 0
79618: PPUSH
79619: PPUSH
79620: PPUSH
79621: PPUSH
79622: PPUSH
79623: PPUSH
79624: PPUSH
// result := [ ] ;
79625: LD_ADDR_VAR 0 4
79629: PUSH
79630: EMPTY
79631: ST_TO_ADDR
// if x - r < 0 then
79632: LD_VAR 0 1
79636: PUSH
79637: LD_VAR 0 3
79641: MINUS
79642: PUSH
79643: LD_INT 0
79645: LESS
79646: IFFALSE 79658
// min_x := 0 else
79648: LD_ADDR_VAR 0 8
79652: PUSH
79653: LD_INT 0
79655: ST_TO_ADDR
79656: GO 79674
// min_x := x - r ;
79658: LD_ADDR_VAR 0 8
79662: PUSH
79663: LD_VAR 0 1
79667: PUSH
79668: LD_VAR 0 3
79672: MINUS
79673: ST_TO_ADDR
// if y - r < 0 then
79674: LD_VAR 0 2
79678: PUSH
79679: LD_VAR 0 3
79683: MINUS
79684: PUSH
79685: LD_INT 0
79687: LESS
79688: IFFALSE 79700
// min_y := 0 else
79690: LD_ADDR_VAR 0 7
79694: PUSH
79695: LD_INT 0
79697: ST_TO_ADDR
79698: GO 79716
// min_y := y - r ;
79700: LD_ADDR_VAR 0 7
79704: PUSH
79705: LD_VAR 0 2
79709: PUSH
79710: LD_VAR 0 3
79714: MINUS
79715: ST_TO_ADDR
// max_x := x + r ;
79716: LD_ADDR_VAR 0 9
79720: PUSH
79721: LD_VAR 0 1
79725: PUSH
79726: LD_VAR 0 3
79730: PLUS
79731: ST_TO_ADDR
// max_y := y + r ;
79732: LD_ADDR_VAR 0 10
79736: PUSH
79737: LD_VAR 0 2
79741: PUSH
79742: LD_VAR 0 3
79746: PLUS
79747: ST_TO_ADDR
// for _x = min_x to max_x do
79748: LD_ADDR_VAR 0 5
79752: PUSH
79753: DOUBLE
79754: LD_VAR 0 8
79758: DEC
79759: ST_TO_ADDR
79760: LD_VAR 0 9
79764: PUSH
79765: FOR_TO
79766: IFFALSE 79867
// for _y = min_y to max_y do
79768: LD_ADDR_VAR 0 6
79772: PUSH
79773: DOUBLE
79774: LD_VAR 0 7
79778: DEC
79779: ST_TO_ADDR
79780: LD_VAR 0 10
79784: PUSH
79785: FOR_TO
79786: IFFALSE 79863
// begin if not ValidHex ( _x , _y ) then
79788: LD_VAR 0 5
79792: PPUSH
79793: LD_VAR 0 6
79797: PPUSH
79798: CALL_OW 488
79802: NOT
79803: IFFALSE 79807
// continue ;
79805: GO 79785
// if GetResourceTypeXY ( _x , _y ) then
79807: LD_VAR 0 5
79811: PPUSH
79812: LD_VAR 0 6
79816: PPUSH
79817: CALL_OW 283
79821: IFFALSE 79861
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79823: LD_ADDR_VAR 0 4
79827: PUSH
79828: LD_VAR 0 4
79832: PPUSH
79833: LD_VAR 0 4
79837: PUSH
79838: LD_INT 1
79840: PLUS
79841: PPUSH
79842: LD_VAR 0 5
79846: PUSH
79847: LD_VAR 0 6
79851: PUSH
79852: EMPTY
79853: LIST
79854: LIST
79855: PPUSH
79856: CALL_OW 1
79860: ST_TO_ADDR
// end ;
79861: GO 79785
79863: POP
79864: POP
79865: GO 79765
79867: POP
79868: POP
// end ;
79869: LD_VAR 0 4
79873: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79874: LD_INT 0
79876: PPUSH
79877: PPUSH
79878: PPUSH
79879: PPUSH
79880: PPUSH
79881: PPUSH
79882: PPUSH
79883: PPUSH
// if not units then
79884: LD_VAR 0 1
79888: NOT
79889: IFFALSE 79893
// exit ;
79891: GO 80417
// result := UnitFilter ( units , [ f_ok ] ) ;
79893: LD_ADDR_VAR 0 3
79897: PUSH
79898: LD_VAR 0 1
79902: PPUSH
79903: LD_INT 50
79905: PUSH
79906: EMPTY
79907: LIST
79908: PPUSH
79909: CALL_OW 72
79913: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79914: LD_ADDR_VAR 0 8
79918: PUSH
79919: LD_VAR 0 1
79923: PUSH
79924: LD_INT 1
79926: ARRAY
79927: PPUSH
79928: CALL_OW 255
79932: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79933: LD_ADDR_VAR 0 10
79937: PUSH
79938: LD_INT 29
79940: PUSH
79941: LD_INT 91
79943: PUSH
79944: LD_INT 49
79946: PUSH
79947: EMPTY
79948: LIST
79949: LIST
79950: LIST
79951: ST_TO_ADDR
// if not result then
79952: LD_VAR 0 3
79956: NOT
79957: IFFALSE 79961
// exit ;
79959: GO 80417
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79961: LD_ADDR_VAR 0 5
79965: PUSH
79966: LD_INT 81
79968: PUSH
79969: LD_VAR 0 8
79973: PUSH
79974: EMPTY
79975: LIST
79976: LIST
79977: PPUSH
79978: CALL_OW 69
79982: ST_TO_ADDR
// for i in result do
79983: LD_ADDR_VAR 0 4
79987: PUSH
79988: LD_VAR 0 3
79992: PUSH
79993: FOR_IN
79994: IFFALSE 80415
// begin tag := GetTag ( i ) + 1 ;
79996: LD_ADDR_VAR 0 9
80000: PUSH
80001: LD_VAR 0 4
80005: PPUSH
80006: CALL_OW 110
80010: PUSH
80011: LD_INT 1
80013: PLUS
80014: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80015: LD_ADDR_VAR 0 7
80019: PUSH
80020: LD_VAR 0 4
80024: PPUSH
80025: CALL_OW 250
80029: PPUSH
80030: LD_VAR 0 4
80034: PPUSH
80035: CALL_OW 251
80039: PPUSH
80040: LD_INT 6
80042: PPUSH
80043: CALL 79616 0 3
80047: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80048: LD_VAR 0 4
80052: PPUSH
80053: CALL_OW 247
80057: PUSH
80058: LD_INT 2
80060: EQUAL
80061: PUSH
80062: LD_VAR 0 7
80066: AND
80067: PUSH
80068: LD_VAR 0 4
80072: PPUSH
80073: CALL_OW 264
80077: PUSH
80078: LD_VAR 0 10
80082: IN
80083: NOT
80084: AND
80085: IFFALSE 80124
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80087: LD_VAR 0 4
80091: PPUSH
80092: LD_VAR 0 7
80096: PUSH
80097: LD_INT 1
80099: ARRAY
80100: PUSH
80101: LD_INT 1
80103: ARRAY
80104: PPUSH
80105: LD_VAR 0 7
80109: PUSH
80110: LD_INT 1
80112: ARRAY
80113: PUSH
80114: LD_INT 2
80116: ARRAY
80117: PPUSH
80118: CALL_OW 116
80122: GO 80413
// if path > tag then
80124: LD_VAR 0 2
80128: PUSH
80129: LD_VAR 0 9
80133: GREATER
80134: IFFALSE 80342
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80136: LD_ADDR_VAR 0 6
80140: PUSH
80141: LD_VAR 0 5
80145: PPUSH
80146: LD_INT 91
80148: PUSH
80149: LD_VAR 0 4
80153: PUSH
80154: LD_INT 8
80156: PUSH
80157: EMPTY
80158: LIST
80159: LIST
80160: LIST
80161: PPUSH
80162: CALL_OW 72
80166: ST_TO_ADDR
// if nearEnemy then
80167: LD_VAR 0 6
80171: IFFALSE 80240
// begin if GetWeapon ( i ) = ru_time_lapser then
80173: LD_VAR 0 4
80177: PPUSH
80178: CALL_OW 264
80182: PUSH
80183: LD_INT 49
80185: EQUAL
80186: IFFALSE 80214
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80188: LD_VAR 0 4
80192: PPUSH
80193: LD_VAR 0 6
80197: PPUSH
80198: LD_VAR 0 4
80202: PPUSH
80203: CALL_OW 74
80207: PPUSH
80208: CALL_OW 112
80212: GO 80238
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80214: LD_VAR 0 4
80218: PPUSH
80219: LD_VAR 0 6
80223: PPUSH
80224: LD_VAR 0 4
80228: PPUSH
80229: CALL_OW 74
80233: PPUSH
80234: CALL 81342 0 2
// end else
80238: GO 80340
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80240: LD_VAR 0 4
80244: PPUSH
80245: LD_VAR 0 2
80249: PUSH
80250: LD_VAR 0 9
80254: ARRAY
80255: PUSH
80256: LD_INT 1
80258: ARRAY
80259: PPUSH
80260: LD_VAR 0 2
80264: PUSH
80265: LD_VAR 0 9
80269: ARRAY
80270: PUSH
80271: LD_INT 2
80273: ARRAY
80274: PPUSH
80275: CALL_OW 297
80279: PUSH
80280: LD_INT 6
80282: GREATER
80283: IFFALSE 80326
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80285: LD_VAR 0 4
80289: PPUSH
80290: LD_VAR 0 2
80294: PUSH
80295: LD_VAR 0 9
80299: ARRAY
80300: PUSH
80301: LD_INT 1
80303: ARRAY
80304: PPUSH
80305: LD_VAR 0 2
80309: PUSH
80310: LD_VAR 0 9
80314: ARRAY
80315: PUSH
80316: LD_INT 2
80318: ARRAY
80319: PPUSH
80320: CALL_OW 114
80324: GO 80340
// SetTag ( i , tag ) ;
80326: LD_VAR 0 4
80330: PPUSH
80331: LD_VAR 0 9
80335: PPUSH
80336: CALL_OW 109
// end else
80340: GO 80413
// if enemy then
80342: LD_VAR 0 5
80346: IFFALSE 80413
// begin if GetWeapon ( i ) = ru_time_lapser then
80348: LD_VAR 0 4
80352: PPUSH
80353: CALL_OW 264
80357: PUSH
80358: LD_INT 49
80360: EQUAL
80361: IFFALSE 80389
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80363: LD_VAR 0 4
80367: PPUSH
80368: LD_VAR 0 5
80372: PPUSH
80373: LD_VAR 0 4
80377: PPUSH
80378: CALL_OW 74
80382: PPUSH
80383: CALL_OW 112
80387: GO 80413
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80389: LD_VAR 0 4
80393: PPUSH
80394: LD_VAR 0 5
80398: PPUSH
80399: LD_VAR 0 4
80403: PPUSH
80404: CALL_OW 74
80408: PPUSH
80409: CALL 81342 0 2
// end ; end ;
80413: GO 79993
80415: POP
80416: POP
// end ;
80417: LD_VAR 0 3
80421: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80422: LD_INT 0
80424: PPUSH
80425: PPUSH
80426: PPUSH
// if not unit or IsInUnit ( unit ) then
80427: LD_VAR 0 1
80431: NOT
80432: PUSH
80433: LD_VAR 0 1
80437: PPUSH
80438: CALL_OW 310
80442: OR
80443: IFFALSE 80447
// exit ;
80445: GO 80538
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80447: LD_ADDR_VAR 0 4
80451: PUSH
80452: LD_VAR 0 1
80456: PPUSH
80457: CALL_OW 250
80461: PPUSH
80462: LD_VAR 0 2
80466: PPUSH
80467: LD_INT 1
80469: PPUSH
80470: CALL_OW 272
80474: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80475: LD_ADDR_VAR 0 5
80479: PUSH
80480: LD_VAR 0 1
80484: PPUSH
80485: CALL_OW 251
80489: PPUSH
80490: LD_VAR 0 2
80494: PPUSH
80495: LD_INT 1
80497: PPUSH
80498: CALL_OW 273
80502: ST_TO_ADDR
// if ValidHex ( x , y ) then
80503: LD_VAR 0 4
80507: PPUSH
80508: LD_VAR 0 5
80512: PPUSH
80513: CALL_OW 488
80517: IFFALSE 80538
// ComTurnXY ( unit , x , y ) ;
80519: LD_VAR 0 1
80523: PPUSH
80524: LD_VAR 0 4
80528: PPUSH
80529: LD_VAR 0 5
80533: PPUSH
80534: CALL_OW 118
// end ;
80538: LD_VAR 0 3
80542: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80543: LD_INT 0
80545: PPUSH
80546: PPUSH
// result := false ;
80547: LD_ADDR_VAR 0 3
80551: PUSH
80552: LD_INT 0
80554: ST_TO_ADDR
// if not units then
80555: LD_VAR 0 2
80559: NOT
80560: IFFALSE 80564
// exit ;
80562: GO 80609
// for i in units do
80564: LD_ADDR_VAR 0 4
80568: PUSH
80569: LD_VAR 0 2
80573: PUSH
80574: FOR_IN
80575: IFFALSE 80607
// if See ( side , i ) then
80577: LD_VAR 0 1
80581: PPUSH
80582: LD_VAR 0 4
80586: PPUSH
80587: CALL_OW 292
80591: IFFALSE 80605
// begin result := true ;
80593: LD_ADDR_VAR 0 3
80597: PUSH
80598: LD_INT 1
80600: ST_TO_ADDR
// exit ;
80601: POP
80602: POP
80603: GO 80609
// end ;
80605: GO 80574
80607: POP
80608: POP
// end ;
80609: LD_VAR 0 3
80613: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80614: LD_INT 0
80616: PPUSH
80617: PPUSH
80618: PPUSH
80619: PPUSH
// if not unit or not points then
80620: LD_VAR 0 1
80624: NOT
80625: PUSH
80626: LD_VAR 0 2
80630: NOT
80631: OR
80632: IFFALSE 80636
// exit ;
80634: GO 80726
// dist := 99999 ;
80636: LD_ADDR_VAR 0 5
80640: PUSH
80641: LD_INT 99999
80643: ST_TO_ADDR
// for i in points do
80644: LD_ADDR_VAR 0 4
80648: PUSH
80649: LD_VAR 0 2
80653: PUSH
80654: FOR_IN
80655: IFFALSE 80724
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80657: LD_ADDR_VAR 0 6
80661: PUSH
80662: LD_VAR 0 1
80666: PPUSH
80667: LD_VAR 0 4
80671: PUSH
80672: LD_INT 1
80674: ARRAY
80675: PPUSH
80676: LD_VAR 0 4
80680: PUSH
80681: LD_INT 2
80683: ARRAY
80684: PPUSH
80685: CALL_OW 297
80689: ST_TO_ADDR
// if tmpDist < dist then
80690: LD_VAR 0 6
80694: PUSH
80695: LD_VAR 0 5
80699: LESS
80700: IFFALSE 80722
// begin result := i ;
80702: LD_ADDR_VAR 0 3
80706: PUSH
80707: LD_VAR 0 4
80711: ST_TO_ADDR
// dist := tmpDist ;
80712: LD_ADDR_VAR 0 5
80716: PUSH
80717: LD_VAR 0 6
80721: ST_TO_ADDR
// end ; end ;
80722: GO 80654
80724: POP
80725: POP
// end ;
80726: LD_VAR 0 3
80730: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80731: LD_INT 0
80733: PPUSH
// uc_side := side ;
80734: LD_ADDR_OWVAR 20
80738: PUSH
80739: LD_VAR 0 1
80743: ST_TO_ADDR
// uc_nation := 3 ;
80744: LD_ADDR_OWVAR 21
80748: PUSH
80749: LD_INT 3
80751: ST_TO_ADDR
// vc_chassis := 25 ;
80752: LD_ADDR_OWVAR 37
80756: PUSH
80757: LD_INT 25
80759: ST_TO_ADDR
// vc_engine := engine_siberite ;
80760: LD_ADDR_OWVAR 39
80764: PUSH
80765: LD_INT 3
80767: ST_TO_ADDR
// vc_control := control_computer ;
80768: LD_ADDR_OWVAR 38
80772: PUSH
80773: LD_INT 3
80775: ST_TO_ADDR
// vc_weapon := 59 ;
80776: LD_ADDR_OWVAR 40
80780: PUSH
80781: LD_INT 59
80783: ST_TO_ADDR
// result := CreateVehicle ;
80784: LD_ADDR_VAR 0 5
80788: PUSH
80789: CALL_OW 45
80793: ST_TO_ADDR
// SetDir ( result , d ) ;
80794: LD_VAR 0 5
80798: PPUSH
80799: LD_VAR 0 4
80803: PPUSH
80804: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80808: LD_VAR 0 5
80812: PPUSH
80813: LD_VAR 0 2
80817: PPUSH
80818: LD_VAR 0 3
80822: PPUSH
80823: LD_INT 0
80825: PPUSH
80826: CALL_OW 48
// end ;
80830: LD_VAR 0 5
80834: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80835: LD_INT 0
80837: PPUSH
80838: PPUSH
80839: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80840: LD_ADDR_VAR 0 2
80844: PUSH
80845: LD_INT 0
80847: PUSH
80848: LD_INT 0
80850: PUSH
80851: LD_INT 0
80853: PUSH
80854: LD_INT 0
80856: PUSH
80857: EMPTY
80858: LIST
80859: LIST
80860: LIST
80861: LIST
80862: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80863: LD_VAR 0 1
80867: NOT
80868: PUSH
80869: LD_VAR 0 1
80873: PPUSH
80874: CALL_OW 264
80878: PUSH
80879: LD_INT 12
80881: PUSH
80882: LD_INT 51
80884: PUSH
80885: LD_INT 32
80887: PUSH
80888: LD_INT 89
80890: PUSH
80891: EMPTY
80892: LIST
80893: LIST
80894: LIST
80895: LIST
80896: IN
80897: NOT
80898: OR
80899: IFFALSE 80903
// exit ;
80901: GO 81001
// for i := 1 to 3 do
80903: LD_ADDR_VAR 0 3
80907: PUSH
80908: DOUBLE
80909: LD_INT 1
80911: DEC
80912: ST_TO_ADDR
80913: LD_INT 3
80915: PUSH
80916: FOR_TO
80917: IFFALSE 80999
// begin tmp := GetCargo ( cargo , i ) ;
80919: LD_ADDR_VAR 0 4
80923: PUSH
80924: LD_VAR 0 1
80928: PPUSH
80929: LD_VAR 0 3
80933: PPUSH
80934: CALL_OW 289
80938: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80939: LD_ADDR_VAR 0 2
80943: PUSH
80944: LD_VAR 0 2
80948: PPUSH
80949: LD_VAR 0 3
80953: PPUSH
80954: LD_VAR 0 4
80958: PPUSH
80959: CALL_OW 1
80963: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80964: LD_ADDR_VAR 0 2
80968: PUSH
80969: LD_VAR 0 2
80973: PPUSH
80974: LD_INT 4
80976: PPUSH
80977: LD_VAR 0 2
80981: PUSH
80982: LD_INT 4
80984: ARRAY
80985: PUSH
80986: LD_VAR 0 4
80990: PLUS
80991: PPUSH
80992: CALL_OW 1
80996: ST_TO_ADDR
// end ;
80997: GO 80916
80999: POP
81000: POP
// end ;
81001: LD_VAR 0 2
81005: RET
// export function Length ( array ) ; begin
81006: LD_INT 0
81008: PPUSH
// result := array + 0 ;
81009: LD_ADDR_VAR 0 2
81013: PUSH
81014: LD_VAR 0 1
81018: PUSH
81019: LD_INT 0
81021: PLUS
81022: ST_TO_ADDR
// end ;
81023: LD_VAR 0 2
81027: RET
// export function PrepareArray ( array ) ; begin
81028: LD_INT 0
81030: PPUSH
// result := array diff 0 ;
81031: LD_ADDR_VAR 0 2
81035: PUSH
81036: LD_VAR 0 1
81040: PUSH
81041: LD_INT 0
81043: DIFF
81044: ST_TO_ADDR
// if not result [ 1 ] then
81045: LD_VAR 0 2
81049: PUSH
81050: LD_INT 1
81052: ARRAY
81053: NOT
81054: IFFALSE 81074
// result := Delete ( result , 1 ) ;
81056: LD_ADDR_VAR 0 2
81060: PUSH
81061: LD_VAR 0 2
81065: PPUSH
81066: LD_INT 1
81068: PPUSH
81069: CALL_OW 3
81073: ST_TO_ADDR
// end ;
81074: LD_VAR 0 2
81078: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81079: LD_INT 0
81081: PPUSH
81082: PPUSH
81083: PPUSH
81084: PPUSH
// sibRocketRange := 25 ;
81085: LD_ADDR_VAR 0 6
81089: PUSH
81090: LD_INT 25
81092: ST_TO_ADDR
// result := false ;
81093: LD_ADDR_VAR 0 4
81097: PUSH
81098: LD_INT 0
81100: ST_TO_ADDR
// for i := 0 to 5 do
81101: LD_ADDR_VAR 0 5
81105: PUSH
81106: DOUBLE
81107: LD_INT 0
81109: DEC
81110: ST_TO_ADDR
81111: LD_INT 5
81113: PUSH
81114: FOR_TO
81115: IFFALSE 81182
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81117: LD_VAR 0 1
81121: PPUSH
81122: LD_VAR 0 5
81126: PPUSH
81127: LD_VAR 0 6
81131: PPUSH
81132: CALL_OW 272
81136: PPUSH
81137: LD_VAR 0 2
81141: PPUSH
81142: LD_VAR 0 5
81146: PPUSH
81147: LD_VAR 0 6
81151: PPUSH
81152: CALL_OW 273
81156: PPUSH
81157: LD_VAR 0 3
81161: PPUSH
81162: CALL_OW 309
81166: IFFALSE 81180
// begin result := true ;
81168: LD_ADDR_VAR 0 4
81172: PUSH
81173: LD_INT 1
81175: ST_TO_ADDR
// exit ;
81176: POP
81177: POP
81178: GO 81184
// end ;
81180: GO 81114
81182: POP
81183: POP
// end ;
81184: LD_VAR 0 4
81188: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81189: LD_INT 0
81191: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81192: LD_VAR 0 1
81196: PPUSH
81197: LD_VAR 0 2
81201: PPUSH
81202: LD_INT 0
81204: PPUSH
81205: LD_INT 0
81207: PPUSH
81208: LD_INT 1
81210: PPUSH
81211: LD_INT 0
81213: PPUSH
81214: CALL_OW 587
// end ;
81218: LD_VAR 0 3
81222: RET
// export function CenterOnNow ( unit ) ; begin
81223: LD_INT 0
81225: PPUSH
// result := IsInUnit ( unit ) ;
81226: LD_ADDR_VAR 0 2
81230: PUSH
81231: LD_VAR 0 1
81235: PPUSH
81236: CALL_OW 310
81240: ST_TO_ADDR
// if not result then
81241: LD_VAR 0 2
81245: NOT
81246: IFFALSE 81258
// result := unit ;
81248: LD_ADDR_VAR 0 2
81252: PUSH
81253: LD_VAR 0 1
81257: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81258: LD_VAR 0 1
81262: PPUSH
81263: CALL_OW 87
// end ;
81267: LD_VAR 0 2
81271: RET
// export function ComMoveHex ( unit , hex ) ; begin
81272: LD_INT 0
81274: PPUSH
// if not hex then
81275: LD_VAR 0 2
81279: NOT
81280: IFFALSE 81284
// exit ;
81282: GO 81337
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81284: LD_VAR 0 2
81288: PUSH
81289: LD_INT 1
81291: ARRAY
81292: PPUSH
81293: LD_VAR 0 2
81297: PUSH
81298: LD_INT 2
81300: ARRAY
81301: PPUSH
81302: CALL_OW 428
81306: IFFALSE 81310
// exit ;
81308: GO 81337
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81310: LD_VAR 0 1
81314: PPUSH
81315: LD_VAR 0 2
81319: PUSH
81320: LD_INT 1
81322: ARRAY
81323: PPUSH
81324: LD_VAR 0 2
81328: PUSH
81329: LD_INT 2
81331: ARRAY
81332: PPUSH
81333: CALL_OW 111
// end ;
81337: LD_VAR 0 3
81341: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81342: LD_INT 0
81344: PPUSH
81345: PPUSH
81346: PPUSH
// if not unit or not enemy then
81347: LD_VAR 0 1
81351: NOT
81352: PUSH
81353: LD_VAR 0 2
81357: NOT
81358: OR
81359: IFFALSE 81363
// exit ;
81361: GO 81487
// x := GetX ( enemy ) ;
81363: LD_ADDR_VAR 0 4
81367: PUSH
81368: LD_VAR 0 2
81372: PPUSH
81373: CALL_OW 250
81377: ST_TO_ADDR
// y := GetY ( enemy ) ;
81378: LD_ADDR_VAR 0 5
81382: PUSH
81383: LD_VAR 0 2
81387: PPUSH
81388: CALL_OW 251
81392: ST_TO_ADDR
// if ValidHex ( x , y ) then
81393: LD_VAR 0 4
81397: PPUSH
81398: LD_VAR 0 5
81402: PPUSH
81403: CALL_OW 488
81407: IFFALSE 81487
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
81409: LD_VAR 0 2
81413: PPUSH
81414: CALL_OW 247
81418: PUSH
81419: LD_INT 3
81421: PUSH
81422: LD_INT 2
81424: PUSH
81425: EMPTY
81426: LIST
81427: LIST
81428: IN
81429: PUSH
81430: LD_VAR 0 1
81434: PPUSH
81435: CALL_OW 255
81439: PPUSH
81440: LD_VAR 0 2
81444: PPUSH
81445: CALL_OW 292
81449: AND
81450: IFFALSE 81468
// ComAttackUnit ( unit , enemy ) else
81452: LD_VAR 0 1
81456: PPUSH
81457: LD_VAR 0 2
81461: PPUSH
81462: CALL_OW 115
81466: GO 81487
// ComAgressiveMove ( unit , x , y ) ;
81468: LD_VAR 0 1
81472: PPUSH
81473: LD_VAR 0 4
81477: PPUSH
81478: LD_VAR 0 5
81482: PPUSH
81483: CALL_OW 114
// end ; end_of_file
81487: LD_VAR 0 3
81491: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81492: LD_VAR 0 1
81496: PUSH
81497: LD_INT 200
81499: DOUBLE
81500: GREATEREQUAL
81501: IFFALSE 81509
81503: LD_INT 299
81505: DOUBLE
81506: LESSEQUAL
81507: IFTRUE 81511
81509: GO 81543
81511: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81512: LD_VAR 0 1
81516: PPUSH
81517: LD_VAR 0 2
81521: PPUSH
81522: LD_VAR 0 3
81526: PPUSH
81527: LD_VAR 0 4
81531: PPUSH
81532: LD_VAR 0 5
81536: PPUSH
81537: CALL 35216 0 5
81541: GO 81620
81543: LD_INT 300
81545: DOUBLE
81546: GREATEREQUAL
81547: IFFALSE 81555
81549: LD_INT 399
81551: DOUBLE
81552: LESSEQUAL
81553: IFTRUE 81557
81555: GO 81619
81557: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
81558: LD_VAR 0 1
81562: PPUSH
81563: LD_VAR 0 2
81567: PPUSH
81568: LD_VAR 0 3
81572: PPUSH
81573: LD_VAR 0 4
81577: PPUSH
81578: LD_VAR 0 5
81582: PPUSH
81583: LD_VAR 0 6
81587: PPUSH
81588: LD_VAR 0 7
81592: PPUSH
81593: LD_VAR 0 8
81597: PPUSH
81598: LD_VAR 0 9
81602: PPUSH
81603: LD_VAR 0 10
81607: PPUSH
81608: LD_VAR 0 11
81612: PPUSH
81613: CALL 31541 0 11
81617: GO 81620
81619: POP
// end ;
81620: PPOPN 11
81622: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
81623: LD_VAR 0 1
81627: PPUSH
81628: LD_VAR 0 2
81632: PPUSH
81633: LD_VAR 0 3
81637: PPUSH
81638: LD_VAR 0 4
81642: PPUSH
81643: LD_VAR 0 5
81647: PPUSH
81648: CALL 34952 0 5
// end ; end_of_file
81652: PPOPN 5
81654: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
81655: LD_VAR 0 1
81659: PPUSH
81660: LD_VAR 0 2
81664: PPUSH
81665: LD_VAR 0 3
81669: PPUSH
81670: LD_VAR 0 4
81674: PPUSH
81675: LD_VAR 0 5
81679: PPUSH
81680: LD_VAR 0 6
81684: PPUSH
81685: CALL 19193 0 6
// end ;
81689: PPOPN 6
81691: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
81692: LD_INT 0
81694: PPUSH
// begin if not units then
81695: LD_VAR 0 1
81699: NOT
81700: IFFALSE 81704
// exit ;
81702: GO 81704
// end ;
81704: PPOPN 7
81706: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
81707: CALL 19097 0 0
// end ;
81711: PPOPN 1
81713: END
