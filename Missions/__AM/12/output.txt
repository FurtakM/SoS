// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15086 0 0
// PrepareDifficulty ;
  43: CALL 12459 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3810 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3948 0 0
// Action ;
  87: CALL 5612 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 39747 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 39747 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 39747 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 39747 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 39747 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 39747 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 39747 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 39747 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 39747 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 39747 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 39747 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 39747 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 39747 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 77449 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rubar3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 5 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 226
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 9
3431: PPUSH
3432: LD_INT 5
3434: PPUSH
3435: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 4
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 2
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 112
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 47
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 129
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3575: LD_INT 3
3577: PPUSH
3578: LD_INT 3
3580: PPUSH
3581: LD_INT 135
3583: PPUSH
3584: LD_EXP 29
3588: PPUSH
3589: LD_EXP 30
3593: PPUSH
3594: CALL_OW 12
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_INT 6
3604: PPUSH
3605: CALL 12778 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 32
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: FOR_IN
3644: IFFALSE 3684
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3646: LD_INT 3
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: LD_VAR 0 2
3656: PPUSH
3657: LD_EXP 29
3661: PPUSH
3662: LD_EXP 30
3666: PPUSH
3667: CALL_OW 12
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: CALL 12778 0 6
3682: GO 3643
3684: POP
3685: POP
// for i := 1 to 5 do
3686: LD_ADDR_VAR 0 2
3690: PUSH
3691: DOUBLE
3692: LD_INT 1
3694: DEC
3695: ST_TO_ADDR
3696: LD_INT 5
3698: PUSH
3699: FOR_TO
3700: IFFALSE 3803
// begin uc_side := 3 ;
3702: LD_ADDR_OWVAR 20
3706: PUSH
3707: LD_INT 3
3709: ST_TO_ADDR
// uc_nation := 3 ;
3710: LD_ADDR_OWVAR 21
3714: PUSH
3715: LD_INT 3
3717: ST_TO_ADDR
// hc_gallery :=  ;
3718: LD_ADDR_OWVAR 33
3722: PUSH
3723: LD_STRING 
3725: ST_TO_ADDR
// hc_name :=  ;
3726: LD_ADDR_OWVAR 26
3730: PUSH
3731: LD_STRING 
3733: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3734: LD_INT 0
3736: PPUSH
3737: LD_INT 4
3739: PPUSH
3740: LD_EXP 29
3744: PPUSH
3745: LD_EXP 30
3749: PPUSH
3750: CALL_OW 12
3754: PPUSH
3755: CALL_OW 380
// un := CreateHuman ;
3759: LD_ADDR_VAR 0 3
3763: PUSH
3764: CALL_OW 44
3768: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_INT 3
3776: PPUSH
3777: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3781: LD_ADDR_EXP 27
3785: PUSH
3786: LD_EXP 27
3790: PPUSH
3791: LD_VAR 0 3
3795: PPUSH
3796: CALL 77449 0 2
3800: ST_TO_ADDR
// end ;
3801: GO 3699
3803: POP
3804: POP
// end ;
3805: LD_VAR 0 1
3809: RET
// export function PrepareWestBase ; var i , un ; begin
3810: LD_INT 0
3812: PPUSH
3813: PPUSH
3814: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3815: LD_INT 10
3817: PPUSH
3818: LD_INT 122
3820: PPUSH
3821: LD_INT 145
3823: PPUSH
3824: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3828: LD_INT 137
3830: PPUSH
3831: LD_INT 84
3833: PPUSH
3834: LD_INT 61
3836: PPUSH
3837: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 6
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 2
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12778 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 91
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 4
3901: PPUSH
3902: LD_INT 3
3904: PPUSH
3905: CALL 12778 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 3
3914: PPUSH
3915: LD_INT 21
3917: PPUSH
3918: LD_EXP 29
3922: PPUSH
3923: LD_EXP 30
3927: PPUSH
3928: CALL_OW 12
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: LD_INT 6
3938: PPUSH
3939: CALL 12778 0 6
// end ;
3943: LD_VAR 0 1
3947: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3948: LD_INT 0
3950: PPUSH
3951: PPUSH
3952: PPUSH
3953: PPUSH
// uc_side := 3 ;
3954: LD_ADDR_OWVAR 20
3958: PUSH
3959: LD_INT 3
3961: ST_TO_ADDR
// uc_nation := 3 ;
3962: LD_ADDR_OWVAR 21
3966: PUSH
3967: LD_INT 3
3969: ST_TO_ADDR
// for i := 1 to 5 do
3970: LD_ADDR_VAR 0 2
3974: PUSH
3975: DOUBLE
3976: LD_INT 1
3978: DEC
3979: ST_TO_ADDR
3980: LD_INT 5
3982: PUSH
3983: FOR_TO
3984: IFFALSE 4054
// begin hc_gallery :=  ;
3986: LD_ADDR_OWVAR 33
3990: PUSH
3991: LD_STRING 
3993: ST_TO_ADDR
// hc_name :=  ;
3994: LD_ADDR_OWVAR 26
3998: PUSH
3999: LD_STRING 
4001: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4002: LD_INT 0
4004: PPUSH
4005: LD_INT 9
4007: PPUSH
4008: LD_EXP 29
4012: PPUSH
4013: LD_EXP 30
4017: PPUSH
4018: CALL_OW 12
4022: PPUSH
4023: CALL_OW 380
// un := CreateHuman ;
4027: LD_ADDR_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4037: LD_VAR 0 3
4041: PPUSH
4042: LD_INT 8
4044: PPUSH
4045: LD_INT 0
4047: PPUSH
4048: CALL_OW 49
// end ;
4052: GO 3983
4054: POP
4055: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4056: LD_ADDR_VAR 0 2
4060: PUSH
4061: DOUBLE
4062: LD_INT 1
4064: DEC
4065: ST_TO_ADDR
4066: LD_INT 2
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: LD_INT 4
4074: PUSH
4075: LD_INT 4
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_OWVAR 67
4088: ARRAY
4089: PUSH
4090: FOR_TO
4091: IFFALSE 4161
// begin hc_gallery :=  ;
4093: LD_ADDR_OWVAR 33
4097: PUSH
4098: LD_STRING 
4100: ST_TO_ADDR
// hc_name :=  ;
4101: LD_ADDR_OWVAR 26
4105: PUSH
4106: LD_STRING 
4108: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4109: LD_INT 0
4111: PPUSH
4112: LD_INT 4
4114: PPUSH
4115: LD_EXP 29
4119: PPUSH
4120: LD_EXP 30
4124: PPUSH
4125: CALL_OW 12
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 8
4151: PPUSH
4152: LD_INT 0
4154: PPUSH
4155: CALL_OW 49
// end ;
4159: GO 4090
4161: POP
4162: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4163: LD_ADDR_VAR 0 2
4167: PUSH
4168: DOUBLE
4169: LD_INT 1
4171: DEC
4172: ST_TO_ADDR
4173: LD_INT 3
4175: PUSH
4176: LD_INT 4
4178: PUSH
4179: LD_INT 5
4181: PUSH
4182: LD_INT 5
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: PUSH
4191: LD_OWVAR 67
4195: ARRAY
4196: PUSH
4197: FOR_TO
4198: IFFALSE 4415
// begin vc_engine = 3 ;
4200: LD_ADDR_OWVAR 39
4204: PUSH
4205: LD_INT 3
4207: ST_TO_ADDR
// vc_control = 1 ;
4208: LD_ADDR_OWVAR 38
4212: PUSH
4213: LD_INT 1
4215: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4216: LD_ADDR_OWVAR 40
4220: PUSH
4221: LD_INT 42
4223: PUSH
4224: LD_INT 43
4226: PUSH
4227: LD_INT 44
4229: PUSH
4230: LD_INT 45
4232: PUSH
4233: LD_INT 46
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: PUSH
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 5
4248: PPUSH
4249: CALL_OW 12
4253: ARRAY
4254: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4255: LD_OWVAR 40
4259: PUSH
4260: LD_INT 46
4262: EQUAL
4263: IFFALSE 4275
// vc_chassis := ru_heavy_tracked else
4265: LD_ADDR_OWVAR 37
4269: PUSH
4270: LD_INT 24
4272: ST_TO_ADDR
4273: GO 4302
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4275: LD_ADDR_OWVAR 37
4279: PUSH
4280: LD_INT 22
4282: PUSH
4283: LD_INT 21
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 2
4295: PPUSH
4296: CALL_OW 12
4300: ARRAY
4301: ST_TO_ADDR
// veh := CreateVehicle ;
4302: LD_ADDR_VAR 0 4
4306: PUSH
4307: CALL_OW 45
4311: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4312: LD_VAR 0 4
4316: PPUSH
4317: LD_INT 3
4319: PPUSH
4320: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4324: LD_VAR 0 4
4328: PPUSH
4329: LD_INT 5
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 49
// hc_gallery :=  ;
4339: LD_ADDR_OWVAR 33
4343: PUSH
4344: LD_STRING 
4346: ST_TO_ADDR
// hc_name :=  ;
4347: LD_ADDR_OWVAR 26
4351: PUSH
4352: LD_STRING 
4354: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
4355: LD_INT 0
4357: PPUSH
4358: LD_INT 3
4360: PPUSH
4361: LD_INT 6
4363: PUSH
4364: LD_INT 7
4366: PUSH
4367: LD_INT 8
4369: PUSH
4370: LD_INT 10
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PUSH
4379: LD_OWVAR 67
4383: ARRAY
4384: PPUSH
4385: CALL_OW 380
// un = CreateHuman ;
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: CALL_OW 44
4398: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: LD_VAR 0 4
4408: PPUSH
4409: CALL_OW 52
// end ;
4413: GO 4197
4415: POP
4416: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: DOUBLE
4423: LD_INT 1
4425: DEC
4426: ST_TO_ADDR
4427: LD_INT 3
4429: PUSH
4430: LD_INT 4
4432: PUSH
4433: LD_INT 5
4435: PUSH
4436: LD_INT 5
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: LD_OWVAR 67
4449: ARRAY
4450: PUSH
4451: FOR_TO
4452: IFFALSE 4599
// begin vc_engine := 3 ;
4454: LD_ADDR_OWVAR 39
4458: PUSH
4459: LD_INT 3
4461: ST_TO_ADDR
// vc_control := 3 ;
4462: LD_ADDR_OWVAR 38
4466: PUSH
4467: LD_INT 3
4469: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4470: LD_ADDR_OWVAR 40
4474: PUSH
4475: LD_INT 42
4477: PUSH
4478: LD_INT 43
4480: PUSH
4481: LD_INT 44
4483: PUSH
4484: LD_INT 45
4486: PUSH
4487: LD_INT 46
4489: PUSH
4490: LD_INT 49
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: PUSH
4501: LD_INT 1
4503: PPUSH
4504: LD_INT 5
4506: PPUSH
4507: CALL_OW 12
4511: ARRAY
4512: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4513: LD_OWVAR 40
4517: PUSH
4518: LD_INT 46
4520: EQUAL
4521: IFFALSE 4533
// vc_chassis := ru_heavy_tracked else
4523: LD_ADDR_OWVAR 37
4527: PUSH
4528: LD_INT 24
4530: ST_TO_ADDR
4531: GO 4560
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4533: LD_ADDR_OWVAR 37
4537: PUSH
4538: LD_INT 22
4540: PUSH
4541: LD_INT 21
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: CALL_OW 12
4558: ARRAY
4559: ST_TO_ADDR
// veh := CreateVehicle ;
4560: LD_ADDR_VAR 0 4
4564: PUSH
4565: CALL_OW 45
4569: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4570: LD_VAR 0 4
4574: PPUSH
4575: LD_INT 3
4577: PPUSH
4578: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4582: LD_VAR 0 4
4586: PPUSH
4587: LD_INT 6
4589: PPUSH
4590: LD_INT 0
4592: PPUSH
4593: CALL_OW 49
// end ;
4597: GO 4451
4599: POP
4600: POP
// end ; end_of_file
4601: LD_VAR 0 1
4605: RET
// export function PrepareKurt ; begin
4606: LD_INT 0
4608: PPUSH
// uc_side := 8 ;
4609: LD_ADDR_OWVAR 20
4613: PUSH
4614: LD_INT 8
4616: ST_TO_ADDR
// uc_nation := 2 ;
4617: LD_ADDR_OWVAR 21
4621: PUSH
4622: LD_INT 2
4624: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4625: LD_ADDR_OWVAR 37
4629: PUSH
4630: LD_INT 13
4632: ST_TO_ADDR
// vc_engine := 1 ;
4633: LD_ADDR_OWVAR 39
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// vc_control := 1 ;
4641: LD_ADDR_OWVAR 38
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// vc_weapon := 24 ;
4649: LD_ADDR_OWVAR 40
4653: PUSH
4654: LD_INT 24
4656: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
4657: LD_ADDR_EXP 18
4661: PUSH
4662: CALL_OW 45
4666: ST_TO_ADDR
// if kurtStatus > 0 then
4667: LD_EXP 19
4671: PUSH
4672: LD_INT 0
4674: GREATER
4675: IFFALSE 4727
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
4677: LD_ADDR_EXP 17
4681: PUSH
4682: LD_STRING Kurt
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: LD_STRING 
4690: PPUSH
4691: CALL 39747 0 3
4695: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4696: LD_EXP 18
4700: PPUSH
4701: LD_INT 4
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4711: LD_EXP 17
4715: PPUSH
4716: LD_EXP 18
4720: PPUSH
4721: CALL_OW 52
// end else
4725: GO 4804
// begin hc_name :=  ;
4727: LD_ADDR_OWVAR 26
4731: PUSH
4732: LD_STRING 
4734: ST_TO_ADDR
// hc_gallery :=  ;
4735: LD_ADDR_OWVAR 33
4739: PUSH
4740: LD_STRING 
4742: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4743: LD_INT 1
4745: PPUSH
4746: LD_INT 10
4748: PPUSH
4749: CALL_OW 381
// Kurt := CreateHuman ;
4753: LD_ADDR_EXP 17
4757: PUSH
4758: CALL_OW 44
4762: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4763: LD_EXP 18
4767: PPUSH
4768: LD_INT 4
4770: PPUSH
4771: LD_INT 0
4773: PPUSH
4774: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4778: LD_EXP 17
4782: PPUSH
4783: LD_EXP 18
4787: PPUSH
4788: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4792: LD_EXP 17
4796: PPUSH
4797: LD_STRING AltKurt
4799: PPUSH
4800: CALL_OW 38
// end ; end ;
4804: LD_VAR 0 1
4808: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4809: LD_INT 0
4811: PPUSH
4812: PPUSH
4813: PPUSH
4814: PPUSH
// for i := 1 to 3 do
4815: LD_ADDR_VAR 0 2
4819: PUSH
4820: DOUBLE
4821: LD_INT 1
4823: DEC
4824: ST_TO_ADDR
4825: LD_INT 3
4827: PUSH
4828: FOR_TO
4829: IFFALSE 4950
// begin uc_side := 1 ;
4831: LD_ADDR_OWVAR 20
4835: PUSH
4836: LD_INT 1
4838: ST_TO_ADDR
// uc_nation := 2 ;
4839: LD_ADDR_OWVAR 21
4843: PUSH
4844: LD_INT 2
4846: ST_TO_ADDR
// hc_gallery =  ;
4847: LD_ADDR_OWVAR 33
4851: PUSH
4852: LD_STRING 
4854: ST_TO_ADDR
// hc_name =  ;
4855: LD_ADDR_OWVAR 26
4859: PUSH
4860: LD_STRING 
4862: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4863: LD_EXP 19
4867: PUSH
4868: LD_INT 0
4870: EQUAL
4871: PUSH
4872: LD_EXP 19
4876: PUSH
4877: LD_INT 2
4879: EQUAL
4880: OR
4881: IFFALSE 4898
// PrepareHuman ( false , 1 , 6 ) else
4883: LD_INT 0
4885: PPUSH
4886: LD_INT 1
4888: PPUSH
4889: LD_INT 6
4891: PPUSH
4892: CALL_OW 380
4896: GO 4911
// PrepareHuman ( false , 1 , 8 ) ;
4898: LD_INT 0
4900: PPUSH
4901: LD_INT 1
4903: PPUSH
4904: LD_INT 8
4906: PPUSH
4907: CALL_OW 380
// un := CreateHuman ;
4911: LD_ADDR_VAR 0 3
4915: PUSH
4916: CALL_OW 44
4920: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4933: LD_VAR 0 3
4937: PPUSH
4938: LD_INT 4
4940: PPUSH
4941: LD_INT 0
4943: PPUSH
4944: CALL_OW 49
// end ;
4948: GO 4828
4950: POP
4951: POP
// vc_chassis := 14 ;
4952: LD_ADDR_OWVAR 37
4956: PUSH
4957: LD_INT 14
4959: ST_TO_ADDR
// vc_engine := 3 ;
4960: LD_ADDR_OWVAR 39
4964: PUSH
4965: LD_INT 3
4967: ST_TO_ADDR
// vc_control := 1 ;
4968: LD_ADDR_OWVAR 38
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4976: LD_ADDR_OWVAR 40
4980: PUSH
4981: LD_INT 27
4983: PUSH
4984: LD_INT 26
4986: PUSH
4987: LD_INT 28
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 1
4997: PPUSH
4998: LD_INT 3
5000: PPUSH
5001: CALL_OW 12
5005: ARRAY
5006: ST_TO_ADDR
// veh := CreateVehicle ;
5007: LD_ADDR_VAR 0 4
5011: PUSH
5012: CALL_OW 45
5016: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5017: LD_VAR 0 4
5021: PPUSH
5022: LD_INT 4
5024: PPUSH
5025: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5029: LD_VAR 0 4
5033: PPUSH
5034: LD_INT 4
5036: PPUSH
5037: LD_INT 0
5039: PPUSH
5040: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5044: LD_EXP 19
5048: PUSH
5049: LD_INT 0
5051: EQUAL
5052: PUSH
5053: LD_EXP 19
5057: PUSH
5058: LD_INT 2
5060: EQUAL
5061: OR
5062: IFFALSE 5079
// PrepareHuman ( false , 3 , 6 ) else
5064: LD_INT 0
5066: PPUSH
5067: LD_INT 3
5069: PPUSH
5070: LD_INT 6
5072: PPUSH
5073: CALL_OW 380
5077: GO 5092
// PrepareHuman ( false , 3 , 8 ) ;
5079: LD_INT 0
5081: PPUSH
5082: LD_INT 3
5084: PPUSH
5085: LD_INT 8
5087: PPUSH
5088: CALL_OW 380
// un := CreateHuman ;
5092: LD_ADDR_VAR 0 3
5096: PUSH
5097: CALL_OW 44
5101: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5102: LD_VAR 0 3
5106: PPUSH
5107: LD_VAR 0 4
5111: PPUSH
5112: CALL_OW 52
// vc_chassis := 14 ;
5116: LD_ADDR_OWVAR 37
5120: PUSH
5121: LD_INT 14
5123: ST_TO_ADDR
// vc_engine := 3 ;
5124: LD_ADDR_OWVAR 39
5128: PUSH
5129: LD_INT 3
5131: ST_TO_ADDR
// vc_control := 1 ;
5132: LD_ADDR_OWVAR 38
5136: PUSH
5137: LD_INT 1
5139: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5140: LD_ADDR_OWVAR 40
5144: PUSH
5145: LD_INT 27
5147: PUSH
5148: LD_INT 26
5150: PUSH
5151: LD_INT 28
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 1
5161: PPUSH
5162: LD_INT 3
5164: PPUSH
5165: CALL_OW 12
5169: ARRAY
5170: ST_TO_ADDR
// veh := CreateVehicle ;
5171: LD_ADDR_VAR 0 4
5175: PUSH
5176: CALL_OW 45
5180: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5181: LD_VAR 0 4
5185: PPUSH
5186: LD_INT 4
5188: PPUSH
5189: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5193: LD_VAR 0 4
5197: PPUSH
5198: LD_INT 4
5200: PPUSH
5201: LD_INT 0
5203: PPUSH
5204: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5208: LD_EXP 19
5212: PUSH
5213: LD_INT 0
5215: EQUAL
5216: PUSH
5217: LD_EXP 19
5221: PUSH
5222: LD_INT 2
5224: EQUAL
5225: OR
5226: IFFALSE 5243
// PrepareHuman ( false , 4 , 6 ) else
5228: LD_INT 0
5230: PPUSH
5231: LD_INT 4
5233: PPUSH
5234: LD_INT 6
5236: PPUSH
5237: CALL_OW 380
5241: GO 5256
// PrepareHuman ( false , 4 , 8 ) ;
5243: LD_INT 0
5245: PPUSH
5246: LD_INT 4
5248: PPUSH
5249: LD_INT 8
5251: PPUSH
5252: CALL_OW 380
// un := CreateHuman ;
5256: LD_ADDR_VAR 0 3
5260: PUSH
5261: CALL_OW 44
5265: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5266: LD_VAR 0 3
5270: PPUSH
5271: LD_INT 4
5273: PPUSH
5274: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5278: LD_VAR 0 3
5282: PPUSH
5283: LD_VAR 0 4
5287: PPUSH
5288: CALL_OW 52
// vc_chassis := 14 ;
5292: LD_ADDR_OWVAR 37
5296: PUSH
5297: LD_INT 14
5299: ST_TO_ADDR
// vc_engine := 3 ;
5300: LD_ADDR_OWVAR 39
5304: PUSH
5305: LD_INT 3
5307: ST_TO_ADDR
// vc_control := 1 ;
5308: LD_ADDR_OWVAR 38
5312: PUSH
5313: LD_INT 1
5315: ST_TO_ADDR
// vc_weapon := 26 ;
5316: LD_ADDR_OWVAR 40
5320: PUSH
5321: LD_INT 26
5323: ST_TO_ADDR
// veh := CreateVehicle ;
5324: LD_ADDR_VAR 0 4
5328: PUSH
5329: CALL_OW 45
5333: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5334: LD_VAR 0 4
5338: PPUSH
5339: LD_INT 4
5341: PPUSH
5342: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5346: LD_VAR 0 4
5350: PPUSH
5351: LD_INT 4
5353: PPUSH
5354: LD_INT 0
5356: PPUSH
5357: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5361: LD_EXP 19
5365: PUSH
5366: LD_INT 0
5368: EQUAL
5369: PUSH
5370: LD_EXP 19
5374: PUSH
5375: LD_INT 2
5377: EQUAL
5378: OR
5379: IFFALSE 5396
// PrepareHuman ( false , 2 , 4 ) else
5381: LD_INT 0
5383: PPUSH
5384: LD_INT 2
5386: PPUSH
5387: LD_INT 4
5389: PPUSH
5390: CALL_OW 380
5394: GO 5409
// PrepareHuman ( false , 2 , 8 ) ;
5396: LD_INT 0
5398: PPUSH
5399: LD_INT 2
5401: PPUSH
5402: LD_INT 8
5404: PPUSH
5405: CALL_OW 380
// un := CreateHuman ;
5409: LD_ADDR_VAR 0 3
5413: PUSH
5414: CALL_OW 44
5418: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5419: LD_VAR 0 3
5423: PPUSH
5424: LD_INT 4
5426: PPUSH
5427: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5431: LD_VAR 0 3
5435: PPUSH
5436: LD_VAR 0 4
5440: PPUSH
5441: CALL_OW 52
// end ;
5445: LD_VAR 0 1
5449: RET
// export function PrepareAttackLegion ; var i , un ; begin
5450: LD_INT 0
5452: PPUSH
5453: PPUSH
5454: PPUSH
// for i := 1 to 4 do
5455: LD_ADDR_VAR 0 2
5459: PUSH
5460: DOUBLE
5461: LD_INT 1
5463: DEC
5464: ST_TO_ADDR
5465: LD_INT 4
5467: PUSH
5468: FOR_TO
5469: IFFALSE 5579
// begin uc_side := 8 ;
5471: LD_ADDR_OWVAR 20
5475: PUSH
5476: LD_INT 8
5478: ST_TO_ADDR
// uc_nation := 2 ;
5479: LD_ADDR_OWVAR 21
5483: PUSH
5484: LD_INT 2
5486: ST_TO_ADDR
// hc_gallery :=  ;
5487: LD_ADDR_OWVAR 33
5491: PUSH
5492: LD_STRING 
5494: ST_TO_ADDR
// hc_name :=  ;
5495: LD_ADDR_OWVAR 26
5499: PUSH
5500: LD_STRING 
5502: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5503: LD_INT 0
5505: PPUSH
5506: LD_INT 1
5508: PUSH
5509: LD_INT 8
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 1
5518: PPUSH
5519: LD_INT 2
5521: PPUSH
5522: CALL_OW 12
5526: ARRAY
5527: PPUSH
5528: LD_INT 6
5530: PPUSH
5531: LD_INT 8
5533: PPUSH
5534: CALL_OW 12
5538: PPUSH
5539: CALL_OW 380
// un := CreateHuman ;
5543: LD_ADDR_VAR 0 3
5547: PUSH
5548: CALL_OW 44
5552: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5553: LD_VAR 0 3
5557: PPUSH
5558: LD_INT 19
5560: PPUSH
5561: LD_INT 0
5563: PPUSH
5564: CALL_OW 49
// ComCrawl ( un ) ;
5568: LD_VAR 0 3
5572: PPUSH
5573: CALL_OW 137
// end ;
5577: GO 5468
5579: POP
5580: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5581: LD_INT 1
5583: PPUSH
5584: LD_INT 8
5586: PPUSH
5587: LD_INT 2
5589: PPUSH
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5597: LD_INT 20
5599: PPUSH
5600: LD_INT 3
5602: PPUSH
5603: CALL 14613 0 2
// end ; end_of_file
5607: LD_VAR 0 1
5611: RET
// export function Action ; var i , tmp , group ; begin
5612: LD_INT 0
5614: PPUSH
5615: PPUSH
5616: PPUSH
5617: PPUSH
// InGameOn ;
5618: CALL_OW 8
// music_nat := 1 ;
5622: LD_ADDR_OWVAR 71
5626: PUSH
5627: LD_INT 1
5629: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5630: LD_ADDR_VAR 0 4
5634: PUSH
5635: LD_INT 22
5637: PUSH
5638: LD_INT 1
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: PPUSH
5645: CALL_OW 69
5649: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5650: LD_ADDR_VAR 0 3
5654: PUSH
5655: LD_EXP 1
5659: PPUSH
5660: CALL_OW 310
5664: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5665: LD_VAR 0 3
5669: PPUSH
5670: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5674: LD_VAR 0 4
5678: PPUSH
5679: LD_INT 130
5681: PPUSH
5682: LD_INT 103
5684: PPUSH
5685: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5689: LD_VAR 0 3
5693: PPUSH
5694: LD_INT 114
5696: PPUSH
5697: LD_INT 102
5699: PPUSH
5700: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5704: LD_EXP 1
5708: PPUSH
5709: LD_STRING D1-JMM-1
5711: PPUSH
5712: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5716: LD_VAR 0 3
5720: PPUSH
5721: CALL_OW 87
// if IsOk ( Donaldson ) then
5725: LD_EXP 3
5729: PPUSH
5730: CALL_OW 302
5734: IFFALSE 5799
// begin Say ( Donaldson , D1-Don-1 ) ;
5736: LD_EXP 3
5740: PPUSH
5741: LD_STRING D1-Don-1
5743: PPUSH
5744: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5748: LD_VAR 0 3
5752: PPUSH
5753: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5757: LD_EXP 1
5761: PPUSH
5762: LD_STRING D1-JMM-2
5764: PPUSH
5765: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5778: LD_EXP 3
5782: PPUSH
5783: LD_STRING D1-Don-2
5785: PPUSH
5786: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5790: LD_VAR 0 3
5794: PPUSH
5795: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5799: LD_VAR 0 4
5803: PPUSH
5804: LD_INT 110
5806: PPUSH
5807: LD_INT 101
5809: PPUSH
5810: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5814: LD_INT 35
5816: PPUSH
5817: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5821: LD_VAR 0 3
5825: PPUSH
5826: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5830: LD_INT 1
5832: PPUSH
5833: LD_INT 102
5835: PPUSH
5836: LD_INT 94
5838: PPUSH
5839: CALL_OW 293
5843: IFFALSE 5814
// CenterOnXY ( 102 , 94 ) ;
5845: LD_INT 102
5847: PPUSH
5848: LD_INT 94
5850: PPUSH
5851: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5855: LD_VAR 0 4
5859: PPUSH
5860: LD_INT 26
5862: PUSH
5863: LD_INT 1
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: PPUSH
5875: LD_STRING D1-Sol1-2
5877: PPUSH
5878: LD_STRING 
5880: PPUSH
5881: CALL 12273 0 3
// Say ( JMM , D1-JMM-3 ) ;
5885: LD_EXP 1
5889: PPUSH
5890: LD_STRING D1-JMM-3
5892: PPUSH
5893: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5897: LD_STRING M1
5899: PPUSH
5900: CALL_OW 337
// for i in group do
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_VAR 0 4
5913: PUSH
5914: FOR_IN
5915: IFFALSE 5934
// ComMoveXY ( i , 95 , 84 ) ;
5917: LD_VAR 0 2
5921: PPUSH
5922: LD_INT 95
5924: PPUSH
5925: LD_INT 84
5927: PPUSH
5928: CALL_OW 111
5932: GO 5914
5934: POP
5935: POP
// end ;
5936: LD_VAR 0 1
5940: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
5941: LD_INT 7
5943: PPUSH
5944: LD_INT 22
5946: PUSH
5947: LD_INT 1
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: PPUSH
5954: CALL_OW 70
5958: PUSH
5959: LD_INT 1
5961: GREATER
5962: IFFALSE 6612
5964: GO 5966
5966: DISABLE
5967: LD_INT 0
5969: PPUSH
5970: PPUSH
5971: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5972: LD_ADDR_VAR 0 2
5976: PUSH
5977: LD_INT 8
5979: PPUSH
5980: LD_INT 22
5982: PUSH
5983: LD_INT 3
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: LD_INT 25
5992: PUSH
5993: LD_INT 9
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PPUSH
6004: CALL_OW 70
6008: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
6009: LD_VAR 0 2
6013: PPUSH
6014: LD_INT 96
6016: PPUSH
6017: LD_INT 85
6019: PPUSH
6020: CALL_OW 154
// for i := 1 to 5 do
6024: LD_ADDR_VAR 0 1
6028: PUSH
6029: DOUBLE
6030: LD_INT 1
6032: DEC
6033: ST_TO_ADDR
6034: LD_INT 5
6036: PUSH
6037: FOR_TO
6038: IFFALSE 6057
// AddComTimeShift ( tmp , 96 , 85 ) ;
6040: LD_VAR 0 2
6044: PPUSH
6045: LD_INT 96
6047: PPUSH
6048: LD_INT 85
6050: PPUSH
6051: CALL_OW 214
6055: GO 6037
6057: POP
6058: POP
// wait ( 0 0$2 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6066: LD_EXP 1
6070: PPUSH
6071: LD_STRING D1a-JMM-1
6073: PPUSH
6074: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6078: LD_EXP 3
6082: PPUSH
6083: LD_STRING D1a-Don-1
6085: PPUSH
6086: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6090: LD_ADDR_VAR 0 1
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_INT 1
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PPUSH
6105: CALL_OW 69
6109: PUSH
6110: FOR_IN
6111: IFFALSE 6130
// ComMoveXY ( i , 109 , 102 ) ;
6113: LD_VAR 0 1
6117: PPUSH
6118: LD_INT 109
6120: PPUSH
6121: LD_INT 102
6123: PPUSH
6124: CALL_OW 111
6128: GO 6110
6130: POP
6131: POP
// Say ( JMM , D1a-JMM-2 ) ;
6132: LD_EXP 1
6136: PPUSH
6137: LD_STRING D1a-JMM-2
6139: PPUSH
6140: CALL_OW 88
// wait ( 0 0$10 ) ;
6144: LD_INT 350
6146: PPUSH
6147: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6151: LD_EXP 1
6155: PPUSH
6156: CALL_OW 310
6160: PPUSH
6161: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6165: LD_EXP 3
6169: PPUSH
6170: LD_STRING D1b-Don-1
6172: PPUSH
6173: CALL_OW 88
// if IsOk ( Donaldson ) then
6177: LD_EXP 3
6181: PPUSH
6182: CALL_OW 302
6186: IFFALSE 6200
// Say ( JMM , D1b-JMM-1 ) ;
6188: LD_EXP 1
6192: PPUSH
6193: LD_STRING D1b-JMM-1
6195: PPUSH
6196: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6200: LD_INT 22
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 26
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 2
6222: PUSH
6223: LD_INT 25
6225: PUSH
6226: LD_INT 1
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 25
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 25
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 25
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 25
6265: PUSH
6266: LD_INT 5
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 25
6275: PUSH
6276: LD_INT 8
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 69
6301: PPUSH
6302: LD_STRING D1b-Sol1-1
6304: PPUSH
6305: LD_STRING 
6307: PPUSH
6308: CALL 12273 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6312: LD_EXP 3
6316: PPUSH
6317: LD_STRING D1b-Don-2
6319: PPUSH
6320: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6324: LD_EXP 1
6328: PPUSH
6329: LD_STRING D1b-JMM-2
6331: PPUSH
6332: CALL_OW 88
// dec := ShowQuery1 ;
6336: LD_ADDR_VAR 0 3
6340: PUSH
6341: CALL 12736 0 0
6345: ST_TO_ADDR
// if dec = 1 then
6346: LD_VAR 0 3
6350: PUSH
6351: LD_INT 1
6353: EQUAL
6354: IFFALSE 6460
// begin Say ( JMM , D2-JMM-1 ) ;
6356: LD_EXP 1
6360: PPUSH
6361: LD_STRING D2-JMM-1
6363: PPUSH
6364: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6368: LD_EXP 15
6372: PPUSH
6373: LD_STRING D2-Pow-1
6375: PPUSH
6376: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6380: LD_EXP 1
6384: PPUSH
6385: LD_STRING D2a-JMM-1
6387: PPUSH
6388: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6392: LD_EXP 15
6396: PPUSH
6397: LD_STRING D2a-Pow-1
6399: PPUSH
6400: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6404: LD_EXP 1
6408: PPUSH
6409: LD_STRING D2a-JMM-2
6411: PPUSH
6412: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6416: LD_EXP 15
6420: PPUSH
6421: LD_STRING D2a-Pow-2
6423: PPUSH
6424: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6428: LD_EXP 1
6432: PPUSH
6433: LD_STRING D2a-JMM-3
6435: PPUSH
6436: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6440: LD_EXP 15
6444: PPUSH
6445: LD_STRING D2a-Pow-3
6447: PPUSH
6448: CALL_OW 94
// secondPass := 2 ;
6452: LD_ADDR_EXP 20
6456: PUSH
6457: LD_INT 2
6459: ST_TO_ADDR
// end ; if dec = 2 then
6460: LD_VAR 0 3
6464: PUSH
6465: LD_INT 2
6467: EQUAL
6468: IFFALSE 6562
// begin Say ( JMM , D2-JMM-1 ) ;
6470: LD_EXP 1
6474: PPUSH
6475: LD_STRING D2-JMM-1
6477: PPUSH
6478: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6482: LD_EXP 15
6486: PPUSH
6487: LD_STRING D2-Pow-1
6489: PPUSH
6490: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6494: LD_EXP 1
6498: PPUSH
6499: LD_STRING D2b-JMM-1
6501: PPUSH
6502: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6506: LD_EXP 15
6510: PPUSH
6511: LD_STRING D2b-Pow-1
6513: PPUSH
6514: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6518: LD_EXP 1
6522: PPUSH
6523: LD_STRING D2c-JMM-1
6525: PPUSH
6526: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6530: LD_EXP 15
6534: PPUSH
6535: LD_STRING D2c-Pow-1
6537: PPUSH
6538: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6542: LD_EXP 1
6546: PPUSH
6547: LD_STRING D2c-JMM-2
6549: PPUSH
6550: CALL_OW 88
// secondPass := 2 ;
6554: LD_ADDR_EXP 20
6558: PUSH
6559: LD_INT 2
6561: ST_TO_ADDR
// end ; if dec = 3 then
6562: LD_VAR 0 3
6566: PUSH
6567: LD_INT 3
6569: EQUAL
6570: IFFALSE 6580
// secondPass := 1 ;
6572: LD_ADDR_EXP 20
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: CALL_OW 9
// ruAI := 1 ;
6584: LD_ADDR_EXP 34
6588: PUSH
6589: LD_INT 1
6591: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6592: LD_INT 1
6594: PPUSH
6595: LD_INT 3
6597: PPUSH
6598: LD_INT 2
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: CALL_OW 80
// SaveForQuickRestart ;
6608: CALL_OW 22
// end ;
6612: PPOPN 3
6614: END
// every 1 1$0 trigger secondPass = 2 do
6615: LD_EXP 20
6619: PUSH
6620: LD_INT 2
6622: EQUAL
6623: IFFALSE 6843
6625: GO 6627
6627: DISABLE
// begin PowellSupport1 ;
6628: CALL 1985 0 0
// DialogueOn ;
6632: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6636: LD_EXP 1
6640: PPUSH
6641: LD_STRING DC1-JMM-1
6643: PPUSH
6644: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6648: LD_EXP 15
6652: PPUSH
6653: LD_STRING DC1-Pow-1
6655: PPUSH
6656: CALL_OW 94
// DialogueOff ;
6660: CALL_OW 7
// wait ( 3 3$0 ) ;
6664: LD_INT 6300
6666: PPUSH
6667: CALL_OW 67
// PowellSupport2 ;
6671: CALL 2466 0 0
// DialogueOn ;
6675: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6679: LD_EXP 1
6683: PPUSH
6684: LD_STRING DC2-JMM-1
6686: PPUSH
6687: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6691: LD_EXP 15
6695: PPUSH
6696: LD_STRING DC2-Pow-1
6698: PPUSH
6699: CALL_OW 94
// DialogueOff ;
6703: CALL_OW 7
// wait ( 3 3$00 ) ;
6707: LD_INT 6300
6709: PPUSH
6710: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6714: LD_INT 35
6716: PPUSH
6717: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6721: LD_INT 22
6723: PUSH
6724: LD_INT 1
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 2
6733: PUSH
6734: LD_INT 30
6736: PUSH
6737: LD_INT 0
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 30
6746: PUSH
6747: LD_INT 1
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 69
6767: PUSH
6768: LD_INT 11
6770: PPUSH
6771: LD_INT 22
6773: PUSH
6774: LD_INT 3
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PPUSH
6781: CALL_OW 70
6785: NOT
6786: AND
6787: IFFALSE 6714
// wait ( 0 0$10 ) ;
6789: LD_INT 350
6791: PPUSH
6792: CALL_OW 67
// Legion ;
6796: CALL 6844 0 0
// wait ( 5 5$0 ) ;
6800: LD_INT 10500
6802: PPUSH
6803: CALL_OW 67
// PowellSupport3 ;
6807: CALL 3079 0 0
// DialogueOn ;
6811: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6815: LD_EXP 15
6819: PPUSH
6820: LD_STRING DC3-Pow-1
6822: PPUSH
6823: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6827: LD_EXP 1
6831: PPUSH
6832: LD_STRING DC3-JMM-1
6834: PPUSH
6835: CALL_OW 88
// DialogueOff ;
6839: CALL_OW 7
// end ;
6843: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6844: LD_INT 0
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
6856: PPUSH
6857: PPUSH
6858: PPUSH
6859: PPUSH
6860: PPUSH
6861: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6862: LD_ADDR_VAR 0 5
6866: PUSH
6867: LD_INT 22
6869: PUSH
6870: LD_INT 1
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: LD_INT 21
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 2
6889: PUSH
6890: LD_INT 30
6892: PUSH
6893: LD_INT 0
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 30
6902: PUSH
6903: LD_INT 1
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: PPUSH
6920: CALL_OW 69
6924: ST_TO_ADDR
// crates := 0 ;
6925: LD_ADDR_VAR 0 8
6929: PUSH
6930: LD_INT 0
6932: ST_TO_ADDR
// oil := 0 ;
6933: LD_ADDR_VAR 0 9
6937: PUSH
6938: LD_INT 0
6940: ST_TO_ADDR
// siberite := 0 ;
6941: LD_ADDR_VAR 0 10
6945: PUSH
6946: LD_INT 0
6948: ST_TO_ADDR
// payForNeutral := false ;
6949: LD_ADDR_VAR 0 13
6953: PUSH
6954: LD_INT 0
6956: ST_TO_ADDR
// payForHelp := false ;
6957: LD_ADDR_VAR 0 14
6961: PUSH
6962: LD_INT 0
6964: ST_TO_ADDR
// for i in tmp do
6965: LD_ADDR_VAR 0 2
6969: PUSH
6970: LD_VAR 0 5
6974: PUSH
6975: FOR_IN
6976: IFFALSE 7067
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6978: LD_ADDR_VAR 0 8
6982: PUSH
6983: LD_VAR 0 8
6987: PUSH
6988: LD_VAR 0 2
6992: PPUSH
6993: CALL_OW 274
6997: PPUSH
6998: LD_INT 1
7000: PPUSH
7001: CALL_OW 275
7005: PLUS
7006: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7007: LD_ADDR_VAR 0 9
7011: PUSH
7012: LD_VAR 0 9
7016: PUSH
7017: LD_VAR 0 2
7021: PPUSH
7022: CALL_OW 274
7026: PPUSH
7027: LD_INT 2
7029: PPUSH
7030: CALL_OW 275
7034: PLUS
7035: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7036: LD_ADDR_VAR 0 10
7040: PUSH
7041: LD_VAR 0 10
7045: PUSH
7046: LD_VAR 0 2
7050: PPUSH
7051: CALL_OW 274
7055: PPUSH
7056: LD_INT 3
7058: PPUSH
7059: CALL_OW 275
7063: PLUS
7064: ST_TO_ADDR
// end ;
7065: GO 6975
7067: POP
7068: POP
// PrepareKurt ;
7069: CALL 4606 0 0
// if not Kurt then
7073: LD_EXP 17
7077: NOT
7078: IFFALSE 7082
// exit ;
7080: GO 9201
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7082: LD_EXP 18
7086: PPUSH
7087: LD_INT 144
7089: PPUSH
7090: LD_INT 111
7092: PPUSH
7093: CALL_OW 111
// wait ( 0 0$2 ) ;
7097: LD_INT 70
7099: PPUSH
7100: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7104: LD_INT 167
7106: PPUSH
7107: LD_INT 121
7109: PPUSH
7110: LD_INT 1
7112: PPUSH
7113: LD_INT 10
7115: NEG
7116: PPUSH
7117: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7121: LD_EXP 17
7125: PPUSH
7126: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7130: LD_EXP 17
7134: PPUSH
7135: CALL_OW 87
// wait ( 0 0$1 ) ;
7139: LD_INT 35
7141: PPUSH
7142: CALL_OW 67
// DialogueOn ;
7146: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7150: LD_INT 22
7152: PUSH
7153: LD_INT 1
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 26
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 2
7172: PUSH
7173: LD_INT 25
7175: PUSH
7176: LD_INT 1
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 25
7185: PUSH
7186: LD_INT 2
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 25
7195: PUSH
7196: LD_INT 3
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 25
7205: PUSH
7206: LD_INT 4
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 25
7215: PUSH
7216: LD_INT 5
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 25
7225: PUSH
7226: LD_INT 8
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: PPUSH
7247: CALL_OW 69
7251: PPUSH
7252: LD_STRING D3-Sol1-1
7254: PPUSH
7255: LD_STRING 
7257: PPUSH
7258: CALL 12273 0 3
// if KurtStatus then
7262: LD_EXP 19
7266: IFFALSE 7366
// begin Say ( Kurt , D3-Kurt-1 ) ;
7268: LD_EXP 17
7272: PPUSH
7273: LD_STRING D3-Kurt-1
7275: PPUSH
7276: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7280: LD_EXP 1
7284: PPUSH
7285: LD_STRING D3-JMM-1
7287: PPUSH
7288: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7292: LD_EXP 17
7296: PPUSH
7297: LD_STRING D3-Kurt-2
7299: PPUSH
7300: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7304: LD_EXP 1
7308: PPUSH
7309: LD_STRING D3-JMM-2
7311: PPUSH
7312: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7316: LD_EXP 17
7320: PPUSH
7321: LD_STRING D3-Kurt-4
7323: PPUSH
7324: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7328: LD_EXP 1
7332: PPUSH
7333: LD_STRING D3-JMM-4
7335: PPUSH
7336: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7340: LD_EXP 17
7344: PPUSH
7345: LD_STRING D3-Kurt-5
7347: PPUSH
7348: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7352: LD_EXP 17
7356: PPUSH
7357: LD_STRING D3-Kurt-5a
7359: PPUSH
7360: CALL_OW 88
// end else
7364: GO 7462
// begin Say ( Kurt , D3-Kurt-1 ) ;
7366: LD_EXP 17
7370: PPUSH
7371: LD_STRING D3-Kurt-1
7373: PPUSH
7374: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7378: LD_EXP 1
7382: PPUSH
7383: LD_STRING D3-JMM-1
7385: PPUSH
7386: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7390: LD_EXP 17
7394: PPUSH
7395: LD_STRING D3-Kurt-3
7397: PPUSH
7398: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7402: LD_EXP 1
7406: PPUSH
7407: LD_STRING D3-JMM-3
7409: PPUSH
7410: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7414: LD_EXP 17
7418: PPUSH
7419: LD_STRING D3-Kurt-4
7421: PPUSH
7422: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D3-JMM-4
7433: PPUSH
7434: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7438: LD_EXP 17
7442: PPUSH
7443: LD_STRING D3-Kurt-5
7445: PPUSH
7446: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7450: LD_EXP 17
7454: PPUSH
7455: LD_STRING D3-Kurt-5b
7457: PPUSH
7458: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7462: LD_VAR 0 8
7466: PUSH
7467: LD_INT 120
7469: PUSH
7470: LD_INT 60
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PUSH
7477: LD_EXP 19
7481: PUSH
7482: LD_INT 1
7484: PLUS
7485: ARRAY
7486: GREATEREQUAL
7487: PUSH
7488: LD_VAR 0 10
7492: PUSH
7493: LD_INT 120
7495: PUSH
7496: LD_INT 60
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_EXP 19
7507: PUSH
7508: LD_INT 1
7510: PLUS
7511: ARRAY
7512: GREATEREQUAL
7513: AND
7514: IFFALSE 7566
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7516: LD_ADDR_VAR 0 3
7520: PUSH
7521: LD_STRING Q2
7523: PUSH
7524: LD_STRING Q2K
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: LD_EXP 19
7535: PUSH
7536: LD_INT 1
7538: PLUS
7539: ARRAY
7540: PPUSH
7541: LD_INT 1
7543: PUSH
7544: LD_INT 2
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: LD_INT 4
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PPUSH
7559: CALL_OW 98
7563: ST_TO_ADDR
7564: GO 7610
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7566: LD_ADDR_VAR 0 3
7570: PUSH
7571: LD_STRING Q2
7573: PUSH
7574: LD_STRING Q2K
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_EXP 19
7585: PUSH
7586: LD_INT 1
7588: PLUS
7589: ARRAY
7590: PPUSH
7591: LD_INT 1
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: LD_INT 4
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 98
7609: ST_TO_ADDR
// if dec1 = 1 then
7610: LD_VAR 0 3
7614: PUSH
7615: LD_INT 1
7617: EQUAL
7618: IFFALSE 7652
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7620: LD_EXP 1
7624: PPUSH
7625: LD_STRING D3Ka-JMM-1
7627: PPUSH
7628: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7632: LD_EXP 17
7636: PPUSH
7637: LD_STRING D3Ka-Kurt-1
7639: PPUSH
7640: CALL_OW 88
// warWithLegion = 1 ;
7644: LD_ADDR_EXP 23
7648: PUSH
7649: LD_INT 1
7651: ST_TO_ADDR
// end ; if dec1 = 2 then
7652: LD_VAR 0 3
7656: PUSH
7657: LD_INT 2
7659: EQUAL
7660: IFFALSE 7744
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7662: LD_EXP 1
7666: PPUSH
7667: LD_STRING D3Kb-JMM-1
7669: PPUSH
7670: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7674: LD_EXP 17
7678: PPUSH
7679: LD_STRING D3Kb-Kurt-1
7681: PPUSH
7682: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7686: LD_ADDR_VAR 0 11
7690: PUSH
7691: LD_INT 120
7693: PUSH
7694: LD_INT 60
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_EXP 19
7705: PUSH
7706: LD_INT 1
7708: PLUS
7709: ARRAY
7710: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7711: LD_ADDR_VAR 0 12
7715: PUSH
7716: LD_INT 120
7718: PUSH
7719: LD_INT 60
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: LD_EXP 19
7730: PUSH
7731: LD_INT 1
7733: PLUS
7734: ARRAY
7735: ST_TO_ADDR
// payForNeutral := true ;
7736: LD_ADDR_VAR 0 13
7740: PUSH
7741: LD_INT 1
7743: ST_TO_ADDR
// end ; if dec1 = 3 then
7744: LD_VAR 0 3
7748: PUSH
7749: LD_INT 3
7751: EQUAL
7752: IFFALSE 7987
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7754: LD_EXP 1
7758: PPUSH
7759: LD_STRING D3Kc1-JMM-1
7761: PPUSH
7762: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7766: LD_EXP 17
7770: PPUSH
7771: LD_STRING D3Kc1-Kurt-1
7773: PPUSH
7774: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7778: LD_EXP 1
7782: PPUSH
7783: LD_STRING D3Kc1-JMM-2
7785: PPUSH
7786: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7790: LD_EXP 17
7794: PPUSH
7795: LD_STRING D3Kc1-Kurt-2
7797: PPUSH
7798: CALL_OW 88
// askSiberite = 1 ;
7802: LD_ADDR_EXP 25
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7810: LD_ADDR_VAR 0 4
7814: PUSH
7815: LD_STRING Q2b
7817: PPUSH
7818: LD_INT 1
7820: PUSH
7821: LD_INT 2
7823: PUSH
7824: LD_INT 3
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: PPUSH
7832: CALL_OW 98
7836: ST_TO_ADDR
// if dec2 = 1 then
7837: LD_VAR 0 4
7841: PUSH
7842: LD_INT 1
7844: EQUAL
7845: IFFALSE 7879
// begin Say ( JMM , D4a-JMM-1 ) ;
7847: LD_EXP 1
7851: PPUSH
7852: LD_STRING D4a-JMM-1
7854: PPUSH
7855: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7859: LD_EXP 17
7863: PPUSH
7864: LD_STRING D4b-Kurt-1
7866: PPUSH
7867: CALL_OW 88
// warWithLegion = 1 ;
7871: LD_ADDR_EXP 23
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// end ; if dec2 = 2 then
7879: LD_VAR 0 4
7883: PUSH
7884: LD_INT 2
7886: EQUAL
7887: IFFALSE 7921
// begin Say ( JMM , D4b-JMM-1 ) ;
7889: LD_EXP 1
7893: PPUSH
7894: LD_STRING D4b-JMM-1
7896: PPUSH
7897: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7901: LD_EXP 17
7905: PPUSH
7906: LD_STRING D4b-Kurt-1
7908: PPUSH
7909: CALL_OW 88
// warWithLegion = 1 ;
7913: LD_ADDR_EXP 23
7917: PUSH
7918: LD_INT 1
7920: ST_TO_ADDR
// end ; if dec2 = 3 then
7921: LD_VAR 0 4
7925: PUSH
7926: LD_INT 3
7928: EQUAL
7929: IFFALSE 7987
// begin Say ( JMM , D4c-JMM-1 ) ;
7931: LD_EXP 1
7935: PPUSH
7936: LD_STRING D4c-JMM-1
7938: PPUSH
7939: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7943: LD_EXP 17
7947: PPUSH
7948: LD_STRING D4c-Kurt-1
7950: PPUSH
7951: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7955: LD_EXP 1
7959: PPUSH
7960: LD_STRING D4c-JMM-2
7962: PPUSH
7963: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7967: LD_EXP 17
7971: PPUSH
7972: LD_STRING D4c-Kurt-2
7974: PPUSH
7975: CALL_OW 88
// fakeInfo = 1 ;
7979: LD_ADDR_EXP 24
7983: PUSH
7984: LD_INT 1
7986: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7987: LD_VAR 0 3
7991: PUSH
7992: LD_INT 4
7994: EQUAL
7995: IFFALSE 9057
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7997: LD_EXP 1
8001: PPUSH
8002: LD_STRING D3Kd-JMM-1
8004: PPUSH
8005: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8009: LD_VAR 0 8
8013: PUSH
8014: LD_INT 200
8016: PUSH
8017: LD_INT 120
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_EXP 19
8028: PUSH
8029: LD_INT 1
8031: PLUS
8032: ARRAY
8033: GREATEREQUAL
8034: PUSH
8035: LD_VAR 0 10
8039: PUSH
8040: LD_INT 200
8042: PUSH
8043: LD_INT 120
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_EXP 19
8054: PUSH
8055: LD_INT 1
8057: PLUS
8058: ARRAY
8059: GREATEREQUAL
8060: AND
8061: IFFALSE 8113
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8063: LD_ADDR_VAR 0 4
8067: PUSH
8068: LD_STRING Q2a
8070: PUSH
8071: LD_STRING Q2aK
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_EXP 19
8082: PUSH
8083: LD_INT 1
8085: PLUS
8086: ARRAY
8087: PPUSH
8088: LD_INT 1
8090: PUSH
8091: LD_INT 2
8093: PUSH
8094: LD_INT 3
8096: PUSH
8097: LD_INT 4
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 98
8110: ST_TO_ADDR
8111: GO 8277
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8113: LD_VAR 0 8
8117: PUSH
8118: LD_INT 120
8120: PUSH
8121: LD_INT 60
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PUSH
8128: LD_EXP 19
8132: PUSH
8133: LD_INT 1
8135: PLUS
8136: ARRAY
8137: GREATEREQUAL
8138: PUSH
8139: LD_VAR 0 10
8143: PUSH
8144: LD_INT 120
8146: PUSH
8147: LD_INT 60
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_EXP 19
8158: PUSH
8159: LD_INT 1
8161: PLUS
8162: ARRAY
8163: GREATEREQUAL
8164: AND
8165: IFFALSE 8213
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8167: LD_ADDR_VAR 0 4
8171: PUSH
8172: LD_STRING Q2a
8174: PUSH
8175: LD_STRING Q2aK
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_EXP 19
8186: PUSH
8187: LD_INT 1
8189: PLUS
8190: ARRAY
8191: PPUSH
8192: LD_INT 1
8194: PUSH
8195: LD_INT 2
8197: PUSH
8198: LD_INT 4
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: PPUSH
8206: CALL_OW 98
8210: ST_TO_ADDR
8211: GO 8277
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8213: LD_STRING Q2d
8215: PUSH
8216: LD_STRING Q2dK
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_EXP 19
8227: PUSH
8228: LD_INT 1
8230: PLUS
8231: ARRAY
8232: PPUSH
8233: CALL_OW 97
// dec2 := 0 ;
8237: LD_ADDR_VAR 0 4
8241: PUSH
8242: LD_INT 0
8244: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8245: LD_EXP 1
8249: PPUSH
8250: LD_STRING D3Kc1-JMM-1
8252: PPUSH
8253: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8257: LD_EXP 17
8261: PPUSH
8262: LD_STRING D3Kc2-Kurt-1
8264: PPUSH
8265: CALL_OW 88
// warWithLegion := 1 ;
8269: LD_ADDR_EXP 23
8273: PUSH
8274: LD_INT 1
8276: ST_TO_ADDR
// end ; if dec2 = 1 then
8277: LD_VAR 0 4
8281: PUSH
8282: LD_INT 1
8284: EQUAL
8285: IFFALSE 8319
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8287: LD_EXP 1
8291: PPUSH
8292: LD_STRING D5Ka-JMM-1
8294: PPUSH
8295: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8299: LD_EXP 17
8303: PPUSH
8304: LD_STRING D5Ka-Kurt-1
8306: PPUSH
8307: CALL_OW 88
// warWithLegion = 1 ;
8311: LD_ADDR_EXP 23
8315: PUSH
8316: LD_INT 1
8318: ST_TO_ADDR
// end ; if dec2 = 2 then
8319: LD_VAR 0 4
8323: PUSH
8324: LD_INT 2
8326: EQUAL
8327: IFFALSE 8411
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8329: LD_EXP 1
8333: PPUSH
8334: LD_STRING D3Kb-JMM-1
8336: PPUSH
8337: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8341: LD_EXP 17
8345: PPUSH
8346: LD_STRING D3Kb-Kurt-1
8348: PPUSH
8349: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8353: LD_ADDR_VAR 0 11
8357: PUSH
8358: LD_INT 120
8360: PUSH
8361: LD_INT 60
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: LD_EXP 19
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: ARRAY
8377: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8378: LD_ADDR_VAR 0 12
8382: PUSH
8383: LD_INT 120
8385: PUSH
8386: LD_INT 60
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_EXP 19
8397: PUSH
8398: LD_INT 1
8400: PLUS
8401: ARRAY
8402: ST_TO_ADDR
// payForNeutral := true ;
8403: LD_ADDR_VAR 0 13
8407: PUSH
8408: LD_INT 1
8410: ST_TO_ADDR
// end ; if dec2 = 3 then
8411: LD_VAR 0 4
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: IFFALSE 8503
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8421: LD_EXP 1
8425: PPUSH
8426: LD_STRING D3Ke-JMM-1
8428: PPUSH
8429: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8433: LD_EXP 17
8437: PPUSH
8438: LD_STRING D3Ke-Kurt-1
8440: PPUSH
8441: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8445: LD_ADDR_VAR 0 11
8449: PUSH
8450: LD_INT 200
8452: PUSH
8453: LD_INT 120
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_EXP 19
8464: PUSH
8465: LD_INT 1
8467: PLUS
8468: ARRAY
8469: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8470: LD_ADDR_VAR 0 12
8474: PUSH
8475: LD_INT 200
8477: PUSH
8478: LD_INT 120
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_EXP 19
8489: PUSH
8490: LD_INT 1
8492: PLUS
8493: ARRAY
8494: ST_TO_ADDR
// payForHelp := true ;
8495: LD_ADDR_VAR 0 14
8499: PUSH
8500: LD_INT 1
8502: ST_TO_ADDR
// end ; if dec2 = 4 then
8503: LD_VAR 0 4
8507: PUSH
8508: LD_INT 4
8510: EQUAL
8511: IFFALSE 8746
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8513: LD_EXP 1
8517: PPUSH
8518: LD_STRING D3Kc1-JMM-1
8520: PPUSH
8521: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8525: LD_EXP 17
8529: PPUSH
8530: LD_STRING D3Kc1-Kurt-1
8532: PPUSH
8533: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8537: LD_EXP 1
8541: PPUSH
8542: LD_STRING D3Kc1-JMM-2
8544: PPUSH
8545: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8549: LD_EXP 17
8553: PPUSH
8554: LD_STRING D3Kc1-Kurt-2
8556: PPUSH
8557: CALL_OW 88
// askSiberite = 1 ;
8561: LD_ADDR_EXP 25
8565: PUSH
8566: LD_INT 1
8568: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8569: LD_ADDR_VAR 0 4
8573: PUSH
8574: LD_STRING Q2b
8576: PPUSH
8577: LD_INT 1
8579: PUSH
8580: LD_INT 2
8582: PUSH
8583: LD_INT 3
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PPUSH
8591: CALL_OW 98
8595: ST_TO_ADDR
// if dec2 = 1 then
8596: LD_VAR 0 4
8600: PUSH
8601: LD_INT 1
8603: EQUAL
8604: IFFALSE 8638
// begin Say ( JMM , D4a-JMM-1 ) ;
8606: LD_EXP 1
8610: PPUSH
8611: LD_STRING D4a-JMM-1
8613: PPUSH
8614: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8618: LD_EXP 17
8622: PPUSH
8623: LD_STRING D4b-Kurt-1
8625: PPUSH
8626: CALL_OW 88
// warWithLegion = 1 ;
8630: LD_ADDR_EXP 23
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// end ; if dec2 = 2 then
8638: LD_VAR 0 4
8642: PUSH
8643: LD_INT 2
8645: EQUAL
8646: IFFALSE 8680
// begin Say ( JMM , D4b-JMM-1 ) ;
8648: LD_EXP 1
8652: PPUSH
8653: LD_STRING D4b-JMM-1
8655: PPUSH
8656: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8660: LD_EXP 17
8664: PPUSH
8665: LD_STRING D4b-Kurt-1
8667: PPUSH
8668: CALL_OW 88
// warWithLegion = 1 ;
8672: LD_ADDR_EXP 23
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// end ; if dec2 = 3 then
8680: LD_VAR 0 4
8684: PUSH
8685: LD_INT 3
8687: EQUAL
8688: IFFALSE 8746
// begin Say ( JMM , D4c-JMM-1 ) ;
8690: LD_EXP 1
8694: PPUSH
8695: LD_STRING D4c-JMM-1
8697: PPUSH
8698: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8702: LD_EXP 17
8706: PPUSH
8707: LD_STRING D4c-Kurt-1
8709: PPUSH
8710: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8714: LD_EXP 1
8718: PPUSH
8719: LD_STRING D4c-JMM-2
8721: PPUSH
8722: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8726: LD_EXP 17
8730: PPUSH
8731: LD_STRING D4c-Kurt-2
8733: PPUSH
8734: CALL_OW 88
// fakeInfo = 1 ;
8738: LD_ADDR_EXP 24
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8746: LD_VAR 0 13
8750: PUSH
8751: LD_VAR 0 14
8755: OR
8756: IFFALSE 9057
// begin for i in tmp do
8758: LD_ADDR_VAR 0 2
8762: PUSH
8763: LD_VAR 0 5
8767: PUSH
8768: FOR_IN
8769: IFFALSE 9055
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8771: LD_ADDR_VAR 0 6
8775: PUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: CALL_OW 274
8785: PPUSH
8786: LD_INT 1
8788: PPUSH
8789: CALL_OW 275
8793: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8794: LD_ADDR_VAR 0 7
8798: PUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 274
8808: PPUSH
8809: LD_INT 3
8811: PPUSH
8812: CALL_OW 275
8816: ST_TO_ADDR
// if cr then
8817: LD_VAR 0 11
8821: IFFALSE 8935
// begin if tmp2 and tmp2 < cr then
8823: LD_VAR 0 6
8827: PUSH
8828: LD_VAR 0 6
8832: PUSH
8833: LD_VAR 0 11
8837: LESS
8838: AND
8839: IFFALSE 8887
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8841: LD_VAR 0 2
8845: PPUSH
8846: CALL_OW 274
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: LD_VAR 0 11
8858: PUSH
8859: LD_VAR 0 6
8863: MINUS
8864: PPUSH
8865: CALL_OW 277
// cr := cr - tmp2 ;
8869: LD_ADDR_VAR 0 11
8873: PUSH
8874: LD_VAR 0 11
8878: PUSH
8879: LD_VAR 0 6
8883: MINUS
8884: ST_TO_ADDR
// end else
8885: GO 8935
// if tmp2 > cr then
8887: LD_VAR 0 6
8891: PUSH
8892: LD_VAR 0 11
8896: GREATER
8897: IFFALSE 8935
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 274
8908: PPUSH
8909: LD_INT 1
8911: PPUSH
8912: LD_VAR 0 6
8916: PUSH
8917: LD_VAR 0 11
8921: MINUS
8922: PPUSH
8923: CALL_OW 277
// cr := 0 ;
8927: LD_ADDR_VAR 0 11
8931: PUSH
8932: LD_INT 0
8934: ST_TO_ADDR
// end ; end ; if sb then
8935: LD_VAR 0 12
8939: IFFALSE 9053
// begin if tmp3 and tmp3 < sb then
8941: LD_VAR 0 7
8945: PUSH
8946: LD_VAR 0 7
8950: PUSH
8951: LD_VAR 0 12
8955: LESS
8956: AND
8957: IFFALSE 9005
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8959: LD_VAR 0 2
8963: PPUSH
8964: CALL_OW 274
8968: PPUSH
8969: LD_INT 3
8971: PPUSH
8972: LD_VAR 0 12
8976: PUSH
8977: LD_VAR 0 7
8981: MINUS
8982: PPUSH
8983: CALL_OW 277
// sb := sb - tmp3 ;
8987: LD_ADDR_VAR 0 12
8991: PUSH
8992: LD_VAR 0 12
8996: PUSH
8997: LD_VAR 0 7
9001: MINUS
9002: ST_TO_ADDR
// end else
9003: GO 9053
// if tmp3 > sb then
9005: LD_VAR 0 7
9009: PUSH
9010: LD_VAR 0 12
9014: GREATER
9015: IFFALSE 9053
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9017: LD_VAR 0 2
9021: PPUSH
9022: CALL_OW 274
9026: PPUSH
9027: LD_INT 3
9029: PPUSH
9030: LD_VAR 0 7
9034: PUSH
9035: LD_VAR 0 12
9039: MINUS
9040: PPUSH
9041: CALL_OW 277
// sb := 0 ;
9045: LD_ADDR_VAR 0 12
9049: PUSH
9050: LD_INT 0
9052: ST_TO_ADDR
// end ; end ; end ;
9053: GO 8768
9055: POP
9056: POP
// end ; end ; DialogueOff ;
9057: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9061: LD_INT 167
9063: PPUSH
9064: LD_INT 121
9066: PPUSH
9067: LD_INT 1
9069: PPUSH
9070: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9074: LD_EXP 17
9078: PPUSH
9079: LD_EXP 18
9083: PPUSH
9084: CALL_OW 120
// wait ( 0 0$1 ) ;
9088: LD_INT 35
9090: PPUSH
9091: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9095: LD_EXP 18
9099: PPUSH
9100: LD_INT 4
9102: PPUSH
9103: CALL_OW 113
// wait ( 0 0$3 ) ;
9107: LD_INT 105
9109: PPUSH
9110: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9114: LD_EXP 17
9118: PPUSH
9119: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9123: LD_EXP 18
9127: PPUSH
9128: CALL_OW 64
// wait ( 0 0$3 ) ;
9132: LD_INT 105
9134: PPUSH
9135: CALL_OW 67
// if payForHelp then
9139: LD_VAR 0 14
9143: IFFALSE 9201
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9145: LD_INT 36
9147: PPUSH
9148: LD_INT 57
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9158: LD_INT 51
9160: PPUSH
9161: LD_INT 63
9163: PPUSH
9164: LD_INT 1
9166: PPUSH
9167: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9171: LD_INT 93
9173: PPUSH
9174: LD_INT 65
9176: PPUSH
9177: LD_INT 1
9179: PPUSH
9180: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9184: LD_INT 42
9186: PPUSH
9187: LD_INT 12
9189: PPUSH
9190: LD_INT 1
9192: PPUSH
9193: CALL_OW 244
// PrepareLegionForPlayer ;
9197: CALL 4809 0 0
// end ; end ;
9201: LD_VAR 0 1
9205: RET
// every 0 0$10 trigger warWithLegion = 1 do
9206: LD_EXP 23
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9230
9216: GO 9218
9218: DISABLE
// begin wait ( 0 0$30 ) ;
9219: LD_INT 1050
9221: PPUSH
9222: CALL_OW 67
// PrepareAttackLegion ;
9226: CALL 5450 0 0
// end ;
9230: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9231: LD_INT 120
9233: PUSH
9234: LD_INT 17
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: LD_INT 52
9243: PUSH
9244: EMPTY
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PPUSH
9251: CALL_OW 69
9255: IFFALSE 9400
9257: GO 9259
9259: DISABLE
9260: LD_INT 0
9262: PPUSH
// begin enable ;
9263: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9264: LD_ADDR_VAR 0 1
9268: PUSH
9269: LD_INT 120
9271: PUSH
9272: LD_INT 17
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 52
9281: PUSH
9282: EMPTY
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PPUSH
9289: CALL_OW 69
9293: PUSH
9294: FOR_IN
9295: IFFALSE 9398
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9297: LD_VAR 0 1
9301: PPUSH
9302: CALL 81014 0 1
9306: PUSH
9307: LD_INT 4
9309: ARRAY
9310: PUSH
9311: LD_INT 0
9313: EQUAL
9314: PUSH
9315: LD_VAR 0 1
9319: PPUSH
9320: CALL_OW 255
9324: PUSH
9325: LD_INT 1
9327: EQUAL
9328: AND
9329: IFFALSE 9343
// SetSide ( i , 4 ) ;
9331: LD_VAR 0 1
9335: PPUSH
9336: LD_INT 4
9338: PPUSH
9339: CALL_OW 235
// if GetSide ( i ) = 4 then
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL_OW 255
9352: PUSH
9353: LD_INT 4
9355: EQUAL
9356: IFFALSE 9396
// if not IsInArea ( i , PlayerSpawn ) then
9358: LD_VAR 0 1
9362: PPUSH
9363: LD_INT 4
9365: PPUSH
9366: CALL_OW 308
9370: NOT
9371: IFFALSE 9387
// ComMoveToArea ( i , PlayerSpawn ) else
9373: LD_VAR 0 1
9377: PPUSH
9378: LD_INT 4
9380: PPUSH
9381: CALL_OW 113
9385: GO 9396
// RemoveUnit ( i ) ;
9387: LD_VAR 0 1
9391: PPUSH
9392: CALL_OW 64
// end ;
9396: GO 9294
9398: POP
9399: POP
// end ;
9400: PPOPN 1
9402: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
9403: LD_EXP 20
9407: PUSH
9408: LD_INT 1
9410: EQUAL
9411: PUSH
9412: LD_INT 12
9414: PPUSH
9415: LD_INT 22
9417: PUSH
9418: LD_INT 3
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 101
9427: PUSH
9428: LD_INT 1
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 21
9437: PUSH
9438: LD_INT 2
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: PPUSH
9450: CALL_OW 70
9454: AND
9455: IFFALSE 10004
9457: GO 9459
9459: DISABLE
9460: LD_INT 0
9462: PPUSH
9463: PPUSH
9464: PPUSH
// begin DialogueOn ;
9465: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9469: LD_VAR 0 1
9473: PPUSH
9474: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9478: LD_INT 22
9480: PUSH
9481: LD_INT 1
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: LD_INT 26
9490: PUSH
9491: LD_INT 1
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 25
9503: PUSH
9504: LD_INT 1
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 25
9513: PUSH
9514: LD_INT 2
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 25
9523: PUSH
9524: LD_INT 3
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 25
9533: PUSH
9534: LD_INT 4
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 25
9543: PUSH
9544: LD_INT 5
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 25
9553: PUSH
9554: LD_INT 8
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: PPUSH
9575: CALL_OW 69
9579: PPUSH
9580: LD_STRING DT1-Sol1-1
9582: PPUSH
9583: LD_STRING DT1-FSol1-1
9585: PPUSH
9586: CALL 12273 0 3
// dec := ShowQuery2 ;
9590: LD_ADDR_VAR 0 3
9594: PUSH
9595: CALL 12757 0 0
9599: ST_TO_ADDR
// if dec = 1 then
9600: LD_VAR 0 3
9604: PUSH
9605: LD_INT 1
9607: EQUAL
9608: IFFALSE 9714
// begin Say ( JMM , D2-JMM-1 ) ;
9610: LD_EXP 1
9614: PPUSH
9615: LD_STRING D2-JMM-1
9617: PPUSH
9618: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9622: LD_EXP 15
9626: PPUSH
9627: LD_STRING D2-Pow-1
9629: PPUSH
9630: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9634: LD_EXP 1
9638: PPUSH
9639: LD_STRING D2a-JMM-1
9641: PPUSH
9642: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9646: LD_EXP 15
9650: PPUSH
9651: LD_STRING D2a-Pow-1
9653: PPUSH
9654: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9658: LD_EXP 1
9662: PPUSH
9663: LD_STRING D2a-JMM-2
9665: PPUSH
9666: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9670: LD_EXP 15
9674: PPUSH
9675: LD_STRING D2a-Pow-2
9677: PPUSH
9678: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9682: LD_EXP 1
9686: PPUSH
9687: LD_STRING D2a-JMM-3
9689: PPUSH
9690: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9694: LD_EXP 15
9698: PPUSH
9699: LD_STRING D2a-Pow-3
9701: PPUSH
9702: CALL_OW 94
// secondPass := 2 ;
9706: LD_ADDR_EXP 20
9710: PUSH
9711: LD_INT 2
9713: ST_TO_ADDR
// end ; if dec = 2 then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_INT 2
9721: EQUAL
9722: IFFALSE 9816
// begin Say ( JMM , D2-JMM-1 ) ;
9724: LD_EXP 1
9728: PPUSH
9729: LD_STRING D2-JMM-1
9731: PPUSH
9732: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9736: LD_EXP 15
9740: PPUSH
9741: LD_STRING D2-Pow-1
9743: PPUSH
9744: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9748: LD_EXP 1
9752: PPUSH
9753: LD_STRING D2b-JMM-1
9755: PPUSH
9756: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9760: LD_EXP 15
9764: PPUSH
9765: LD_STRING D2b-Pow-1
9767: PPUSH
9768: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9772: LD_EXP 1
9776: PPUSH
9777: LD_STRING D2c-JMM-1
9779: PPUSH
9780: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9784: LD_EXP 15
9788: PPUSH
9789: LD_STRING D2c-Pow-1
9791: PPUSH
9792: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9796: LD_EXP 1
9800: PPUSH
9801: LD_STRING D2c-JMM-2
9803: PPUSH
9804: CALL_OW 88
// secondPass := 2 ;
9808: LD_ADDR_EXP 20
9812: PUSH
9813: LD_INT 2
9815: ST_TO_ADDR
// end ; DialogueOff ;
9816: CALL_OW 7
// if secondPass = 2 then
9820: LD_EXP 20
9824: PUSH
9825: LD_INT 2
9827: EQUAL
9828: IFFALSE 9832
// exit ;
9830: GO 10004
// Query ( HelpRequest ) ;
9832: LD_STRING HelpRequest
9834: PPUSH
9835: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
9839: LD_INT 27
9841: PPUSH
9842: LD_INT 1
9844: PPUSH
9845: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9849: LD_INT 35
9851: PPUSH
9852: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
9856: LD_EXP 1
9860: PPUSH
9861: LD_INT 27
9863: PPUSH
9864: CALL_OW 308
9868: IFFALSE 9849
// SetAreaMapShow ( helpRequestArea , 0 ) ;
9870: LD_INT 27
9872: PPUSH
9873: LD_INT 0
9875: PPUSH
9876: CALL_OW 424
// DialogueOn ;
9880: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
9884: LD_EXP 1
9888: PPUSH
9889: LD_STRING D2-JMM-1
9891: PPUSH
9892: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9896: LD_EXP 15
9900: PPUSH
9901: LD_STRING D2-Pow-1
9903: PPUSH
9904: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9908: LD_EXP 1
9912: PPUSH
9913: LD_STRING D2b-JMM-1
9915: PPUSH
9916: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9920: LD_EXP 15
9924: PPUSH
9925: LD_STRING D2a-Pow-2
9927: PPUSH
9928: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9932: LD_EXP 1
9936: PPUSH
9937: LD_STRING D2a-JMM-3
9939: PPUSH
9940: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9944: LD_EXP 15
9948: PPUSH
9949: LD_STRING D2a-Pow-3
9951: PPUSH
9952: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9956: LD_EXP 1
9960: PPUSH
9961: LD_STRING D2c-JMM-1
9963: PPUSH
9964: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9968: LD_EXP 15
9972: PPUSH
9973: LD_STRING D2c-Pow-1
9975: PPUSH
9976: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9980: LD_EXP 1
9984: PPUSH
9985: LD_STRING D2c-JMM-2
9987: PPUSH
9988: CALL_OW 88
// DialogueOff ;
9992: CALL_OW 7
// secondPass := 2 ;
9996: LD_ADDR_EXP 20
10000: PUSH
10001: LD_INT 2
10003: ST_TO_ADDR
// end ;
10004: PPOPN 3
10006: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10007: LD_EXP 21
10011: PUSH
10012: LD_INT 1
10014: EQUAL
10015: PUSH
10016: LD_INT 11
10018: PPUSH
10019: LD_INT 22
10021: PUSH
10022: LD_INT 3
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PPUSH
10029: CALL_OW 70
10033: AND
10034: IFFALSE 10515
10036: GO 10038
10038: DISABLE
10039: LD_INT 0
10041: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10042: LD_ADDR_VAR 0 1
10046: PUSH
10047: LD_INT 11
10049: PPUSH
10050: LD_INT 22
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 70
10064: ST_TO_ADDR
// if not vehicles then
10065: LD_VAR 0 1
10069: NOT
10070: IFFALSE 10074
// exit ;
10072: GO 10515
// repeat wait ( 0 0$1 ) ;
10074: LD_INT 35
10076: PPUSH
10077: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10081: LD_VAR 0 1
10085: PPUSH
10086: LD_INT 101
10088: PUSH
10089: LD_INT 1
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PPUSH
10096: CALL_OW 72
10100: IFFALSE 10074
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10102: LD_VAR 0 1
10106: PPUSH
10107: LD_INT 101
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PPUSH
10117: CALL_OW 72
10121: PUSH
10122: LD_INT 1
10124: ARRAY
10125: PPUSH
10126: CALL_OW 87
// DialogueOn ;
10130: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10134: LD_INT 22
10136: PUSH
10137: LD_INT 1
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 26
10146: PUSH
10147: LD_INT 1
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PUSH
10154: LD_INT 23
10156: PUSH
10157: LD_INT 1
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: LD_INT 25
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 25
10179: PUSH
10180: LD_INT 2
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 25
10189: PUSH
10190: LD_INT 3
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: LD_INT 25
10199: PUSH
10200: LD_INT 4
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 25
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 25
10219: PUSH
10220: LD_INT 8
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: PPUSH
10242: CALL_OW 69
10246: PPUSH
10247: LD_STRING DT1-Sol1-1
10249: PPUSH
10250: LD_STRING DT1-FSol1-1
10252: PPUSH
10253: CALL 12273 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10257: LD_EXP 1
10261: PPUSH
10262: LD_STRING DT1-JMM-1
10264: PPUSH
10265: CALL_OW 88
// DialogueOff ;
10269: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10273: LD_INT 175
10275: PPUSH
10276: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10280: LD_INT 11
10282: PPUSH
10283: LD_INT 22
10285: PUSH
10286: LD_INT 3
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 50
10295: PUSH
10296: EMPTY
10297: LIST
10298: PUSH
10299: LD_INT 2
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 2
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 21
10314: PUSH
10315: LD_INT 1
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: LIST
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: PPUSH
10332: CALL_OW 70
10336: PUSH
10337: LD_INT 0
10339: EQUAL
10340: PUSH
10341: LD_EXP 22
10345: PUSH
10346: LD_INT 2
10348: GREATER
10349: AND
10350: IFFALSE 10273
// DialogueOn ;
10352: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10356: LD_EXP 1
10360: PPUSH
10361: LD_STRING DT1a-JMM-1
10363: PPUSH
10364: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10368: LD_INT 22
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 26
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 23
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 2
10400: PUSH
10401: LD_INT 25
10403: PUSH
10404: LD_INT 1
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 25
10413: PUSH
10414: LD_INT 2
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 25
10423: PUSH
10424: LD_INT 3
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 25
10433: PUSH
10434: LD_INT 4
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 25
10443: PUSH
10444: LD_INT 5
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 25
10453: PUSH
10454: LD_INT 8
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: PPUSH
10476: CALL_OW 69
10480: PPUSH
10481: LD_STRING DT1a-Sol1-1
10483: PPUSH
10484: LD_STRING DT1a-FSol1-1
10486: PPUSH
10487: CALL 12273 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10491: LD_EXP 1
10495: PPUSH
10496: LD_STRING DT1a-JMM-2
10498: PPUSH
10499: CALL_OW 88
// DialogueOff ;
10503: CALL_OW 7
// vehicleTeleported := 2 ;
10507: LD_ADDR_EXP 21
10511: PUSH
10512: LD_INT 2
10514: ST_TO_ADDR
// end ;
10515: PPOPN 1
10517: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10518: LD_EXP 21
10522: PUSH
10523: LD_INT 3
10525: EQUAL
10526: PUSH
10527: LD_INT 11
10529: PPUSH
10530: LD_INT 22
10532: PUSH
10533: LD_INT 3
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 101
10542: PUSH
10543: LD_INT 1
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PPUSH
10554: CALL_OW 70
10558: AND
10559: IFFALSE 10844
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
10567: PPUSH
10568: PPUSH
// begin wait ( 0 0$0.3 ) ;
10569: LD_INT 10
10571: PPUSH
10572: CALL_OW 67
// DialogueOn ;
10576: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10580: LD_ADDR_VAR 0 3
10584: PUSH
10585: LD_INT 22
10587: PUSH
10588: LD_INT 1
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 23
10597: PUSH
10598: LD_INT 1
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 26
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 2
10617: PUSH
10618: LD_INT 25
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 25
10630: PUSH
10631: LD_INT 2
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 25
10640: PUSH
10641: LD_INT 3
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 25
10650: PUSH
10651: LD_INT 4
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 25
10660: PUSH
10661: LD_INT 5
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 25
10670: PUSH
10671: LD_INT 8
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: PPUSH
10693: CALL_OW 69
10697: PPUSH
10698: LD_STRING DT2-Sol1-1
10700: PPUSH
10701: LD_STRING DT2-FSol1-1
10703: PPUSH
10704: CALL 12273 0 3
10708: ST_TO_ADDR
// DialogueOff ;
10709: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10713: LD_INT 175
10715: PPUSH
10716: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10720: LD_INT 11
10722: PPUSH
10723: LD_INT 22
10725: PUSH
10726: LD_INT 3
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 50
10735: PUSH
10736: EMPTY
10737: LIST
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PPUSH
10743: CALL_OW 70
10747: NOT
10748: IFFALSE 10713
// wait ( 0 0$2 ) ;
10750: LD_INT 70
10752: PPUSH
10753: CALL_OW 67
// vehicleTeleported := 4 ;
10757: LD_ADDR_EXP 21
10761: PUSH
10762: LD_INT 4
10764: ST_TO_ADDR
// DialogueOn ;
10765: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10769: LD_EXP 1
10773: PPUSH
10774: LD_STRING DT2a-JMM-1
10776: PPUSH
10777: CALL_OW 88
// if speaker then
10781: LD_VAR 0 3
10785: IFFALSE 10828
// if GetSex ( speaker ) = 1 then
10787: LD_VAR 0 3
10791: PPUSH
10792: CALL_OW 258
10796: PUSH
10797: LD_INT 1
10799: EQUAL
10800: IFFALSE 10816
// Say ( speaker , DT2a-Sol1-1 ) else
10802: LD_VAR 0 3
10806: PPUSH
10807: LD_STRING DT2a-Sol1-1
10809: PPUSH
10810: CALL_OW 88
10814: GO 10828
// Say ( speaker , DT2a-FSol1-1 ) ;
10816: LD_VAR 0 3
10820: PPUSH
10821: LD_STRING DT2a-FSol1-1
10823: PPUSH
10824: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10828: LD_EXP 3
10832: PPUSH
10833: LD_STRING DT2a-Don-1
10835: PPUSH
10836: CALL_OW 88
// DialogueOff ;
10840: CALL_OW 7
// end ;
10844: PPOPN 3
10846: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10847: LD_INT 1
10849: PPUSH
10850: LD_INT 45
10852: PPUSH
10853: LD_INT 74
10855: PPUSH
10856: CALL_OW 293
10860: IFFALSE 11035
10862: GO 10864
10864: DISABLE
// begin DialogueOn ;
10865: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10869: LD_INT 36
10871: PPUSH
10872: LD_INT 55
10874: PPUSH
10875: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10879: LD_INT 22
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 23
10891: PUSH
10892: LD_INT 1
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 26
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 2
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 1
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 25
10924: PUSH
10925: LD_INT 2
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 25
10934: PUSH
10935: LD_INT 3
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 25
10944: PUSH
10945: LD_INT 4
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 25
10954: PUSH
10955: LD_INT 5
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 25
10964: PUSH
10965: LD_INT 8
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: PPUSH
10987: CALL_OW 69
10991: PPUSH
10992: LD_STRING D5-Sol1-1
10994: PPUSH
10995: LD_STRING D5-FSol1-
10997: PPUSH
10998: CALL 12273 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11002: LD_EXP 23
11006: PUSH
11007: LD_EXP 3
11011: PPUSH
11012: CALL_OW 302
11016: AND
11017: IFFALSE 11031
// Say ( Donaldson , D5-Don-1 ) ;
11019: LD_EXP 3
11023: PPUSH
11024: LD_STRING D5-Don-1
11026: PPUSH
11027: CALL_OW 88
// DialogueOff ;
11031: CALL_OW 7
// end ;
11035: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11036: LD_INT 1
11038: PPUSH
11039: LD_INT 10
11041: PPUSH
11042: CALL_OW 292
11046: PUSH
11047: LD_INT 1
11049: PPUSH
11050: LD_INT 137
11052: PPUSH
11053: CALL_OW 292
11057: OR
11058: IFFALSE 11213
11060: GO 11062
11062: DISABLE
// begin DialogueOn ;
11063: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11067: LD_INT 22
11069: PUSH
11070: LD_INT 1
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 23
11079: PUSH
11080: LD_INT 1
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 26
11089: PUSH
11090: LD_INT 1
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 2
11099: PUSH
11100: LD_INT 25
11102: PUSH
11103: LD_INT 1
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 25
11112: PUSH
11113: LD_INT 2
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: LD_INT 25
11122: PUSH
11123: LD_INT 3
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 25
11132: PUSH
11133: LD_INT 4
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 25
11142: PUSH
11143: LD_INT 5
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 25
11152: PUSH
11153: LD_INT 8
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 69
11179: PPUSH
11180: LD_STRING DT3-Sol1-1
11182: PPUSH
11183: LD_STRING DT3-FSol1-1
11185: PPUSH
11186: CALL 12273 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11190: LD_EXP 1
11194: PPUSH
11195: LD_STRING DT3-JMM-1
11197: PPUSH
11198: CALL_OW 88
// DialogueOff ;
11202: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11206: LD_STRING M2
11208: PPUSH
11209: CALL_OW 337
// end ;
11213: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) or GetLives ( rutp ) < 900 do
11214: LD_EXP 35
11218: PUSH
11219: LD_INT 0
11221: EQUAL
11222: PUSH
11223: LD_INT 10
11225: PPUSH
11226: LD_INT 22
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PPUSH
11236: CALL_OW 70
11240: PUSH
11241: LD_INT 10
11243: PPUSH
11244: LD_INT 22
11246: PUSH
11247: LD_INT 3
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: LD_INT 24
11259: PUSH
11260: LD_INT 800
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 21
11273: PUSH
11274: LD_INT 2
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 58
11283: PUSH
11284: EMPTY
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 70
11297: OR
11298: AND
11299: PUSH
11300: LD_INT 137
11302: PPUSH
11303: CALL_OW 256
11307: PUSH
11308: LD_INT 900
11310: LESS
11311: OR
11312: IFFALSE 11325
11314: GO 11316
11316: DISABLE
// ruEscape := 1 ;
11317: LD_ADDR_EXP 35
11321: PUSH
11322: LD_INT 1
11324: ST_TO_ADDR
11325: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11326: LD_INT 3
11328: PPUSH
11329: CALL_OW 303
11333: PUSH
11334: LD_INT 4
11336: PPUSH
11337: CALL_OW 303
11341: OR
11342: PUSH
11343: LD_EXP 35
11347: PUSH
11348: LD_INT 1
11350: EQUAL
11351: OR
11352: IFFALSE 11941
11354: GO 11356
11356: DISABLE
11357: LD_INT 0
11359: PPUSH
11360: PPUSH
11361: PPUSH
// begin ruAI := 0 ;
11362: LD_ADDR_EXP 34
11366: PUSH
11367: LD_INT 0
11369: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11370: LD_EXP 27
11374: PPUSH
11375: CALL_OW 122
// wait ( 0 0$1 ) ;
11379: LD_INT 35
11381: PPUSH
11382: CALL_OW 67
// DialogueOn ;
11386: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11390: LD_INT 75
11392: PPUSH
11393: LD_INT 21
11395: PPUSH
11396: LD_INT 1
11398: PPUSH
11399: LD_INT 12
11401: PPUSH
11402: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11406: LD_INT 75
11408: PPUSH
11409: LD_INT 21
11411: PPUSH
11412: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11416: LD_INT 10
11418: PPUSH
11419: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11423: LD_EXP 1
11427: PPUSH
11428: LD_STRING D6-JMM-1
11430: PPUSH
11431: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11435: LD_INT 75
11437: PPUSH
11438: LD_INT 21
11440: PPUSH
11441: LD_INT 1
11443: PPUSH
11444: CALL_OW 331
// DialogueOff ;
11448: CALL_OW 7
// for i in RuScientists do
11452: LD_ADDR_VAR 0 1
11456: PUSH
11457: LD_EXP 27
11461: PUSH
11462: FOR_IN
11463: IFFALSE 11499
// begin SetSide ( i , 6 ) ;
11465: LD_VAR 0 1
11469: PPUSH
11470: LD_INT 6
11472: PPUSH
11473: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11477: LD_VAR 0 1
11481: PPUSH
11482: LD_INT 1
11484: PPUSH
11485: LD_INT 3
11487: PPUSH
11488: CALL_OW 12
11492: PPUSH
11493: CALL_OW 109
// end ;
11497: GO 11462
11499: POP
11500: POP
// repeat wait ( 0 0$1 ) ;
11501: LD_INT 35
11503: PPUSH
11504: CALL_OW 67
// for i in RuScientists do
11508: LD_ADDR_VAR 0 1
11512: PUSH
11513: LD_EXP 27
11517: PUSH
11518: FOR_IN
11519: IFFALSE 11932
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11521: LD_ADDR_VAR 0 3
11525: PUSH
11526: LD_INT 22
11528: PUSH
11529: LD_INT 3
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: PUSH
11536: LD_INT 91
11538: PUSH
11539: LD_VAR 0 1
11543: PUSH
11544: LD_INT 10
11546: PUSH
11547: EMPTY
11548: LIST
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 21
11554: PUSH
11555: LD_INT 2
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 58
11564: PUSH
11565: EMPTY
11566: LIST
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: PPUSH
11574: CALL_OW 69
11578: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11579: LD_VAR 0 3
11583: PUSH
11584: LD_VAR 0 1
11588: PPUSH
11589: CALL_OW 310
11593: NOT
11594: AND
11595: IFFALSE 11623
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11597: LD_VAR 0 1
11601: PPUSH
11602: LD_VAR 0 3
11606: PPUSH
11607: LD_VAR 0 1
11611: PPUSH
11612: CALL_OW 74
11616: PPUSH
11617: CALL_OW 120
// continue ;
11621: GO 11518
// end ; if IsInUnit ( i ) then
11623: LD_VAR 0 1
11627: PPUSH
11628: CALL_OW 310
11632: IFFALSE 11651
// unit := IsInUnit ( i ) else
11634: LD_ADDR_VAR 0 2
11638: PUSH
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL_OW 310
11648: ST_TO_ADDR
11649: GO 11661
// unit := i ;
11651: LD_ADDR_VAR 0 2
11655: PUSH
11656: LD_VAR 0 1
11660: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11661: LD_VAR 0 1
11665: PPUSH
11666: CALL_OW 110
11670: PUSH
11671: LD_INT 1
11673: DOUBLE
11674: EQUAL
11675: IFTRUE 11679
11677: GO 11738
11679: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11680: LD_VAR 0 2
11684: PPUSH
11685: LD_INT 137
11687: PPUSH
11688: CALL_OW 296
11692: PUSH
11693: LD_INT 13
11695: LESS
11696: PUSH
11697: LD_INT 137
11699: PPUSH
11700: CALL_OW 302
11704: AND
11705: IFFALSE 11721
// ComEnterUnit ( unit , rutp ) else
11707: LD_VAR 0 2
11711: PPUSH
11712: LD_INT 137
11714: PPUSH
11715: CALL_OW 120
11719: GO 11736
// ComMoveXY ( unit , 16 , 28 ) ;
11721: LD_VAR 0 2
11725: PPUSH
11726: LD_INT 16
11728: PPUSH
11729: LD_INT 28
11731: PPUSH
11732: CALL_OW 111
// end ; 2 :
11736: GO 11930
11738: LD_INT 2
11740: DOUBLE
11741: EQUAL
11742: IFTRUE 11746
11744: GO 11764
11746: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11747: LD_VAR 0 2
11751: PPUSH
11752: LD_INT 97
11754: PPUSH
11755: LD_INT 2
11757: PPUSH
11758: CALL_OW 111
11762: GO 11930
11764: LD_INT 3
11766: DOUBLE
11767: EQUAL
11768: IFTRUE 11772
11770: GO 11831
11772: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11773: LD_VAR 0 2
11777: PPUSH
11778: LD_INT 137
11780: PPUSH
11781: CALL_OW 296
11785: PUSH
11786: LD_INT 13
11788: LESS
11789: PUSH
11790: LD_INT 137
11792: PPUSH
11793: CALL_OW 302
11797: AND
11798: IFFALSE 11814
// ComEnterUnit ( unit , rutp ) else
11800: LD_VAR 0 2
11804: PPUSH
11805: LD_INT 137
11807: PPUSH
11808: CALL_OW 120
11812: GO 11829
// ComMoveXY ( unit , 128 , 155 ) ;
11814: LD_VAR 0 2
11818: PPUSH
11819: LD_INT 128
11821: PPUSH
11822: LD_INT 155
11824: PPUSH
11825: CALL_OW 111
// end ; 11 :
11829: GO 11930
11831: LD_INT 11
11833: DOUBLE
11834: EQUAL
11835: IFTRUE 11839
11837: GO 11857
11839: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11840: LD_VAR 0 2
11844: PPUSH
11845: LD_INT 16
11847: PPUSH
11848: LD_INT 28
11850: PPUSH
11851: CALL_OW 111
11855: GO 11930
11857: LD_INT 13
11859: DOUBLE
11860: EQUAL
11861: IFTRUE 11865
11863: GO 11903
11865: POP
// begin if IsOk ( ruteleprt ) then
11866: LD_INT 10
11868: PPUSH
11869: CALL_OW 302
11873: IFFALSE 11889
// ComEnterUnit ( unit , ruteleprt ) else
11875: LD_VAR 0 2
11879: PPUSH
11880: LD_INT 10
11882: PPUSH
11883: CALL_OW 120
11887: GO 11901
// SetTag ( unit , 23 ) ;
11889: LD_VAR 0 2
11893: PPUSH
11894: LD_INT 23
11896: PPUSH
11897: CALL_OW 109
// end ; 23 :
11901: GO 11930
11903: LD_INT 23
11905: DOUBLE
11906: EQUAL
11907: IFTRUE 11911
11909: GO 11929
11911: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11912: LD_VAR 0 2
11916: PPUSH
11917: LD_INT 128
11919: PPUSH
11920: LD_INT 155
11922: PPUSH
11923: CALL_OW 111
11927: GO 11930
11929: POP
// end ;
11930: GO 11518
11932: POP
11933: POP
// until not RuScientists ;
11934: LD_EXP 27
11938: NOT
11939: IFFALSE 11501
// end ;
11941: PPOPN 3
11943: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11944: LD_EXP 34
11948: PUSH
11949: LD_INT 0
11951: EQUAL
11952: PUSH
11953: LD_EXP 27
11957: AND
11958: PUSH
11959: LD_INT 22
11961: PUSH
11962: LD_INT 6
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 2
11971: PUSH
11972: LD_INT 95
11974: PUSH
11975: LD_INT 13
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 95
11984: PUSH
11985: LD_INT 14
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 95
11994: PUSH
11995: LD_INT 25
11997: PUSH
11998: EMPTY
11999: LIST
12000: LIST
12001: PUSH
12002: EMPTY
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: PUSH
12008: EMPTY
12009: LIST
12010: LIST
12011: PPUSH
12012: CALL_OW 69
12016: AND
12017: IFFALSE 12230
12019: GO 12021
12021: DISABLE
12022: LD_INT 0
12024: PPUSH
12025: PPUSH
12026: PPUSH
12027: PPUSH
// begin enable ;
12028: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
12029: LD_ADDR_VAR 0 1
12033: PUSH
12034: LD_INT 22
12036: PUSH
12037: LD_INT 6
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 2
12046: PUSH
12047: LD_INT 95
12049: PUSH
12050: LD_INT 13
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: PUSH
12057: LD_INT 95
12059: PUSH
12060: LD_INT 14
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PUSH
12067: LD_INT 95
12069: PUSH
12070: LD_INT 25
12072: PUSH
12073: EMPTY
12074: LIST
12075: LIST
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: PPUSH
12087: CALL_OW 69
12091: PUSH
12092: FOR_IN
12093: IFFALSE 12228
// begin if i in RuScientists then
12095: LD_VAR 0 1
12099: PUSH
12100: LD_EXP 27
12104: IN
12105: IFFALSE 12134
// begin RuScientists = RuScientists diff i ;
12107: LD_ADDR_EXP 27
12111: PUSH
12112: LD_EXP 27
12116: PUSH
12117: LD_VAR 0 1
12121: DIFF
12122: ST_TO_ADDR
// RemoveUnit ( i ) ;
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 64
// continue ;
12132: GO 12092
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12134: LD_VAR 0 1
12138: PUSH
12139: LD_INT 22
12141: PUSH
12142: LD_INT 6
12144: PUSH
12145: EMPTY
12146: LIST
12147: LIST
12148: PUSH
12149: LD_INT 33
12151: PUSH
12152: LD_INT 1
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: PPUSH
12163: CALL_OW 69
12167: IN
12168: IFFALSE 12226
// begin if IsDrivenBy ( i ) in RuScientists then
12170: LD_VAR 0 1
12174: PPUSH
12175: CALL_OW 311
12179: PUSH
12180: LD_EXP 27
12184: IN
12185: IFFALSE 12203
// RuScientists = RuScientists diff i ;
12187: LD_ADDR_EXP 27
12191: PUSH
12192: LD_EXP 27
12196: PUSH
12197: LD_VAR 0 1
12201: DIFF
12202: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12203: LD_VAR 0 1
12207: PPUSH
12208: CALL_OW 311
12212: PPUSH
12213: CALL_OW 64
// RemoveUnit ( i ) ;
12217: LD_VAR 0 1
12221: PPUSH
12222: CALL_OW 64
// end ; end ;
12226: GO 12092
12228: POP
12229: POP
// end ; end_of_file
12230: PPOPN 4
12232: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12233: LD_INT 0
12235: PPUSH
12236: PPUSH
// for i in charactersList do
12237: LD_ADDR_VAR 0 4
12241: PUSH
12242: LD_VAR 0 1
12246: PUSH
12247: FOR_IN
12248: IFFALSE 12266
// SaveCharacters ( i , ident ) ;
12250: LD_VAR 0 4
12254: PPUSH
12255: LD_VAR 0 2
12259: PPUSH
12260: CALL_OW 38
12264: GO 12247
12266: POP
12267: POP
// end ;
12268: LD_VAR 0 3
12272: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12273: LD_INT 0
12275: PPUSH
12276: PPUSH
12277: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12278: LD_ADDR_VAR 0 1
12282: PUSH
12283: LD_VAR 0 1
12287: PUSH
12288: LD_EXP 1
12292: PUSH
12293: LD_EXP 7
12297: PUSH
12298: LD_EXP 3
12302: PUSH
12303: LD_EXP 4
12307: PUSH
12308: LD_EXP 5
12312: PUSH
12313: LD_EXP 2
12317: PUSH
12318: LD_EXP 12
12322: PUSH
12323: LD_EXP 13
12327: PUSH
12328: LD_EXP 9
12332: PUSH
12333: LD_EXP 11
12337: PUSH
12338: LD_EXP 6
12342: PUSH
12343: LD_EXP 8
12347: PUSH
12348: LD_EXP 10
12352: PUSH
12353: LD_EXP 15
12357: PUSH
12358: EMPTY
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: DIFF
12374: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12375: LD_ADDR_VAR 0 6
12379: PUSH
12380: LD_VAR 0 1
12384: PUSH
12385: LD_INT 1
12387: PPUSH
12388: LD_VAR 0 1
12392: PPUSH
12393: CALL_OW 12
12397: ARRAY
12398: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12399: LD_VAR 0 6
12403: PPUSH
12404: CALL_OW 258
12408: PUSH
12409: LD_INT 1
12411: EQUAL
12412: IFFALSE 12430
// Say ( speaker , dialogMID ) else
12414: LD_VAR 0 6
12418: PPUSH
12419: LD_VAR 0 2
12423: PPUSH
12424: CALL_OW 88
12428: GO 12444
// Say ( speaker , dialogFID ) ;
12430: LD_VAR 0 6
12434: PPUSH
12435: LD_VAR 0 3
12439: PPUSH
12440: CALL_OW 88
// result := speaker ;
12444: LD_ADDR_VAR 0 4
12448: PUSH
12449: LD_VAR 0 6
12453: ST_TO_ADDR
// end ;
12454: LD_VAR 0 4
12458: RET
// export function PrepareDifficulty ; var tmp ; begin
12459: LD_INT 0
12461: PPUSH
12462: PPUSH
// if Difficulty = 1 then
12463: LD_OWVAR 67
12467: PUSH
12468: LD_INT 1
12470: EQUAL
12471: IFFALSE 12491
// begin RuSolMinLevel = 8 ;
12473: LD_ADDR_EXP 29
12477: PUSH
12478: LD_INT 8
12480: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12481: LD_ADDR_EXP 30
12485: PUSH
12486: LD_INT 10
12488: ST_TO_ADDR
// end else
12489: GO 12731
// if Difficulty = 2 then
12491: LD_OWVAR 67
12495: PUSH
12496: LD_INT 2
12498: EQUAL
12499: IFFALSE 12595
// begin RuSolMinLevel = 9 ;
12501: LD_ADDR_EXP 29
12505: PUSH
12506: LD_INT 9
12508: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12509: LD_ADDR_EXP 30
12513: PUSH
12514: LD_INT 10
12516: ST_TO_ADDR
// uc_nation = 3 ;
12517: LD_ADDR_OWVAR 21
12521: PUSH
12522: LD_INT 3
12524: ST_TO_ADDR
// uc_side = 3 ;
12525: LD_ADDR_OWVAR 20
12529: PUSH
12530: LD_INT 3
12532: ST_TO_ADDR
// bc_level = 10 ;
12533: LD_ADDR_OWVAR 43
12537: PUSH
12538: LD_INT 10
12540: ST_TO_ADDR
// bc_type = b_turret ;
12541: LD_ADDR_OWVAR 42
12545: PUSH
12546: LD_INT 33
12548: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12549: LD_ADDR_VAR 0 2
12553: PUSH
12554: LD_INT 86
12556: PPUSH
12557: LD_INT 34
12559: PPUSH
12560: LD_INT 2
12562: PPUSH
12563: CALL_OW 47
12567: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12568: LD_VAR 0 2
12572: PPUSH
12573: LD_INT 49
12575: PPUSH
12576: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12580: LD_INT 64
12582: PPUSH
12583: LD_INT 3
12585: PPUSH
12586: LD_INT 1
12588: PPUSH
12589: CALL_OW 322
// end else
12593: GO 12731
// begin RuSolMinLevel = 10 ;
12595: LD_ADDR_EXP 29
12599: PUSH
12600: LD_INT 10
12602: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12603: LD_ADDR_EXP 30
12607: PUSH
12608: LD_INT 10
12610: ST_TO_ADDR
// uc_nation = 3 ;
12611: LD_ADDR_OWVAR 21
12615: PUSH
12616: LD_INT 3
12618: ST_TO_ADDR
// uc_side = 3 ;
12619: LD_ADDR_OWVAR 20
12623: PUSH
12624: LD_INT 3
12626: ST_TO_ADDR
// bc_level = 10 ;
12627: LD_ADDR_OWVAR 43
12631: PUSH
12632: LD_INT 10
12634: ST_TO_ADDR
// bc_type = b_turret ;
12635: LD_ADDR_OWVAR 42
12639: PUSH
12640: LD_INT 33
12642: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12643: LD_ADDR_VAR 0 2
12647: PUSH
12648: LD_INT 86
12650: PPUSH
12651: LD_INT 34
12653: PPUSH
12654: LD_INT 2
12656: PPUSH
12657: CALL_OW 47
12661: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12662: LD_VAR 0 2
12666: PPUSH
12667: LD_INT 49
12669: PPUSH
12670: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12674: LD_ADDR_VAR 0 2
12678: PUSH
12679: LD_INT 93
12681: PPUSH
12682: LD_INT 31
12684: PPUSH
12685: LD_INT 2
12687: PPUSH
12688: CALL_OW 47
12692: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12693: LD_VAR 0 2
12697: PPUSH
12698: LD_INT 49
12700: PPUSH
12701: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12705: LD_INT 64
12707: PPUSH
12708: LD_INT 3
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12718: LD_INT 65
12720: PPUSH
12721: LD_INT 3
12723: PPUSH
12724: LD_INT 1
12726: PPUSH
12727: CALL_OW 322
// end ; end ;
12731: LD_VAR 0 1
12735: RET
// export function ShowQuery1 ; begin
12736: LD_INT 0
12738: PPUSH
// result := Query ( Q1 ) ;
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_STRING Q1
12746: PPUSH
12747: CALL_OW 97
12751: ST_TO_ADDR
// end ;
12752: LD_VAR 0 1
12756: RET
// export function ShowQuery2 ; begin
12757: LD_INT 0
12759: PPUSH
// result := Query ( Q1a ) ;
12760: LD_ADDR_VAR 0 1
12764: PUSH
12765: LD_STRING Q1a
12767: PPUSH
12768: CALL_OW 97
12772: ST_TO_ADDR
// end ;
12773: LD_VAR 0 1
12777: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12778: LD_INT 0
12780: PPUSH
12781: PPUSH
12782: PPUSH
12783: PPUSH
// for i = 1 to count do
12784: LD_ADDR_VAR 0 8
12788: PUSH
12789: DOUBLE
12790: LD_INT 1
12792: DEC
12793: ST_TO_ADDR
12794: LD_VAR 0 6
12798: PUSH
12799: FOR_TO
12800: IFFALSE 12881
// begin uc_side = side ;
12802: LD_ADDR_OWVAR 20
12806: PUSH
12807: LD_VAR 0 1
12811: ST_TO_ADDR
// uc_nation = nation ;
12812: LD_ADDR_OWVAR 21
12816: PUSH
12817: LD_VAR 0 2
12821: ST_TO_ADDR
// hc_gallery =  ;
12822: LD_ADDR_OWVAR 33
12826: PUSH
12827: LD_STRING 
12829: ST_TO_ADDR
// hc_name =  ;
12830: LD_ADDR_OWVAR 26
12834: PUSH
12835: LD_STRING 
12837: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12838: LD_INT 0
12840: PPUSH
12841: LD_VAR 0 5
12845: PPUSH
12846: LD_VAR 0 4
12850: PPUSH
12851: CALL_OW 380
// un = CreateHuman ;
12855: LD_ADDR_VAR 0 10
12859: PUSH
12860: CALL_OW 44
12864: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12865: LD_VAR 0 10
12869: PPUSH
12870: LD_VAR 0 3
12874: PPUSH
12875: CALL_OW 52
// end ;
12879: GO 12799
12881: POP
12882: POP
// end ;
12883: LD_VAR 0 7
12887: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12888: LD_INT 0
12890: PPUSH
12891: PPUSH
12892: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12893: LD_ADDR_VAR 0 6
12897: PUSH
12898: LD_INT 48
12900: PUSH
12901: LD_INT 49
12903: PUSH
12904: LD_INT 50
12906: PUSH
12907: LD_INT 20
12909: PUSH
12910: LD_INT 1
12912: PUSH
12913: LD_INT 51
12915: PUSH
12916: LD_INT 52
12918: PUSH
12919: LD_INT 69
12921: PUSH
12922: LD_INT 39
12924: PUSH
12925: LD_INT 34
12927: PUSH
12928: LD_INT 40
12930: PUSH
12931: LD_INT 53
12933: PUSH
12934: LD_INT 71
12936: PUSH
12937: LD_INT 57
12939: PUSH
12940: LD_INT 58
12942: PUSH
12943: LD_INT 44
12945: PUSH
12946: LD_INT 32
12948: PUSH
12949: LD_INT 27
12951: PUSH
12952: LD_INT 23
12954: PUSH
12955: LD_INT 33
12957: PUSH
12958: LD_INT 59
12960: PUSH
12961: LD_INT 54
12963: PUSH
12964: LD_INT 55
12966: PUSH
12967: LD_INT 56
12969: PUSH
12970: LD_INT 63
12972: PUSH
12973: LD_INT 64
12975: PUSH
12976: LD_INT 65
12978: PUSH
12979: LD_INT 30
12981: PUSH
12982: LD_INT 31
12984: PUSH
12985: LD_INT 21
12987: PUSH
12988: LD_INT 22
12990: PUSH
12991: LD_INT 25
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: ST_TO_ADDR
// for i := 1 to list do
13028: LD_ADDR_VAR 0 5
13032: PUSH
13033: DOUBLE
13034: LD_INT 1
13036: DEC
13037: ST_TO_ADDR
13038: LD_VAR 0 6
13042: PUSH
13043: FOR_TO
13044: IFFALSE 13116
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
13046: LD_VAR 0 6
13050: PUSH
13051: LD_VAR 0 5
13055: ARRAY
13056: PPUSH
13057: LD_VAR 0 1
13061: PPUSH
13062: CALL_OW 321
13066: PUSH
13067: LD_INT 1
13069: EQUAL
13070: PUSH
13071: LD_VAR 0 6
13075: PUSH
13076: LD_VAR 0 5
13080: ARRAY
13081: PPUSH
13082: LD_VAR 0 3
13086: PPUSH
13087: CALL_OW 482
13091: AND
13092: IFFALSE 13114
// AddComResearch ( lab , list [ i ] ) ;
13094: LD_VAR 0 2
13098: PPUSH
13099: LD_VAR 0 6
13103: PUSH
13104: LD_VAR 0 5
13108: ARRAY
13109: PPUSH
13110: CALL_OW 184
13114: GO 13043
13116: POP
13117: POP
// end ;
13118: LD_VAR 0 4
13122: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13123: LD_INT 0
13125: PPUSH
13126: PPUSH
13127: PPUSH
13128: PPUSH
13129: PPUSH
13130: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13131: LD_ADDR_VAR 0 8
13135: PUSH
13136: LD_VAR 0 2
13140: PPUSH
13141: CALL_OW 313
13145: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13146: LD_ADDR_VAR 0 9
13150: PUSH
13151: LD_VAR 0 3
13155: PPUSH
13156: LD_INT 22
13158: PUSH
13159: LD_VAR 0 1
13163: PUSH
13164: EMPTY
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 25
13170: PUSH
13171: LD_INT 2
13173: PUSH
13174: EMPTY
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 24
13180: PUSH
13181: LD_INT 750
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: LD_INT 3
13190: PUSH
13191: LD_INT 54
13193: PUSH
13194: EMPTY
13195: LIST
13196: PUSH
13197: EMPTY
13198: LIST
13199: LIST
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: PPUSH
13207: CALL_OW 70
13211: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13212: LD_ADDR_VAR 0 6
13216: PUSH
13217: LD_VAR 0 3
13221: PPUSH
13222: LD_INT 22
13224: PUSH
13225: LD_VAR 0 1
13229: PUSH
13230: EMPTY
13231: LIST
13232: LIST
13233: PUSH
13234: LD_INT 21
13236: PUSH
13237: LD_INT 3
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: LD_INT 3
13246: PUSH
13247: LD_INT 24
13249: PUSH
13250: LD_INT 1000
13252: PUSH
13253: EMPTY
13254: LIST
13255: LIST
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: PUSH
13266: EMPTY
13267: LIST
13268: PPUSH
13269: CALL_OW 70
13273: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13274: LD_VAR 0 6
13278: NOT
13279: PUSH
13280: LD_INT 22
13282: PUSH
13283: LD_VAR 0 1
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: PUSH
13292: LD_INT 25
13294: PUSH
13295: LD_INT 2
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: PUSH
13302: LD_INT 24
13304: PUSH
13305: LD_INT 250
13307: PUSH
13308: EMPTY
13309: LIST
13310: LIST
13311: PUSH
13312: EMPTY
13313: LIST
13314: LIST
13315: LIST
13316: PPUSH
13317: CALL_OW 69
13321: NOT
13322: AND
13323: IFFALSE 13327
// exit ;
13325: GO 13485
// if buildingsList and engineerOkInside then
13327: LD_VAR 0 6
13331: PUSH
13332: LD_VAR 0 8
13336: AND
13337: IFFALSE 13348
// ComExitBuilding ( engineerOkInside ) ;
13339: LD_VAR 0 8
13343: PPUSH
13344: CALL_OW 122
// if buildingsList and engineerOkOutside then
13348: LD_VAR 0 6
13352: PUSH
13353: LD_VAR 0 9
13357: AND
13358: IFFALSE 13378
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13360: LD_VAR 0 9
13364: PPUSH
13365: LD_VAR 0 6
13369: PUSH
13370: LD_INT 1
13372: ARRAY
13373: PPUSH
13374: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13378: LD_VAR 0 6
13382: PUSH
13383: LD_INT 0
13385: EQUAL
13386: PUSH
13387: LD_VAR 0 4
13391: PUSH
13392: LD_INT 0
13394: EQUAL
13395: AND
13396: PUSH
13397: LD_VAR 0 9
13401: AND
13402: IFFALSE 13418
// ComEnterUnit ( engineerOkOutside , depot ) ;
13404: LD_VAR 0 9
13408: PPUSH
13409: LD_VAR 0 2
13413: PPUSH
13414: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13418: LD_VAR 0 9
13422: PUSH
13423: LD_VAR 0 6
13427: PUSH
13428: LD_INT 0
13430: EQUAL
13431: AND
13432: PUSH
13433: LD_VAR 0 4
13437: AND
13438: IFFALSE 13485
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13440: LD_VAR 0 9
13444: PPUSH
13445: LD_VAR 0 4
13449: PUSH
13450: LD_INT 1
13452: ARRAY
13453: PPUSH
13454: LD_VAR 0 4
13458: PUSH
13459: LD_INT 2
13461: ARRAY
13462: PPUSH
13463: LD_VAR 0 4
13467: PUSH
13468: LD_INT 3
13470: ARRAY
13471: PPUSH
13472: LD_VAR 0 4
13476: PUSH
13477: LD_INT 4
13479: ARRAY
13480: PPUSH
13481: CALL_OW 145
// end ;
13485: LD_VAR 0 5
13489: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13490: LD_INT 0
13492: PPUSH
13493: PPUSH
13494: PPUSH
13495: PPUSH
13496: PPUSH
13497: PPUSH
13498: PPUSH
13499: PPUSH
13500: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13501: LD_ADDR_VAR 0 6
13505: PUSH
13506: LD_INT 22
13508: PUSH
13509: LD_VAR 0 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 25
13520: PUSH
13521: LD_INT 4
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PUSH
13528: LD_INT 24
13530: PUSH
13531: LD_INT 251
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: LIST
13542: PPUSH
13543: CALL_OW 69
13547: PUSH
13548: LD_EXP 27
13552: PUSH
13553: EMPTY
13554: LIST
13555: DIFF
13556: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13557: LD_ADDR_VAR 0 7
13561: PUSH
13562: LD_VAR 0 3
13566: PPUSH
13567: LD_INT 22
13569: PUSH
13570: LD_VAR 0 1
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 56
13581: PUSH
13582: EMPTY
13583: LIST
13584: PUSH
13585: LD_INT 25
13587: PUSH
13588: LD_INT 4
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: LD_INT 50
13597: PUSH
13598: EMPTY
13599: LIST
13600: PUSH
13601: EMPTY
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 70
13611: PUSH
13612: LD_EXP 27
13616: PUSH
13617: EMPTY
13618: LIST
13619: DIFF
13620: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13621: LD_ADDR_VAR 0 10
13625: PUSH
13626: LD_VAR 0 3
13630: PPUSH
13631: LD_INT 22
13633: PUSH
13634: LD_VAR 0 1
13638: PUSH
13639: EMPTY
13640: LIST
13641: LIST
13642: PUSH
13643: LD_INT 21
13645: PUSH
13646: LD_INT 1
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 3
13655: PUSH
13656: LD_INT 24
13658: PUSH
13659: LD_INT 750
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: LIST
13674: PPUSH
13675: CALL_OW 70
13679: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13680: LD_ADDR_VAR 0 11
13684: PUSH
13685: LD_VAR 0 2
13689: PPUSH
13690: LD_INT 22
13692: PUSH
13693: LD_VAR 0 1
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: LD_INT 21
13704: PUSH
13705: LD_INT 1
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: LD_INT 3
13714: PUSH
13715: LD_INT 24
13717: PUSH
13718: LD_INT 1000
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: PUSH
13729: EMPTY
13730: LIST
13731: LIST
13732: LIST
13733: PPUSH
13734: CALL_OW 70
13738: ST_TO_ADDR
// if damageUnits and sciList then
13739: LD_VAR 0 10
13743: PUSH
13744: LD_VAR 0 6
13748: AND
13749: IFFALSE 13765
// ComMoveToArea ( damageUnits , healArea ) ;
13751: LD_VAR 0 10
13755: PPUSH
13756: LD_VAR 0 2
13760: PPUSH
13761: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13765: LD_VAR 0 11
13769: PUSH
13770: LD_VAR 0 6
13774: AND
13775: PUSH
13776: LD_VAR 0 7
13780: PUSH
13781: LD_INT 0
13783: EQUAL
13784: AND
13785: IFFALSE 13831
// for i in buildings do
13787: LD_ADDR_VAR 0 8
13791: PUSH
13792: LD_VAR 0 4
13796: PUSH
13797: FOR_IN
13798: IFFALSE 13829
// begin if UnitsInside ( i ) then
13800: LD_VAR 0 8
13804: PPUSH
13805: CALL_OW 313
13809: IFFALSE 13827
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13811: LD_VAR 0 8
13815: PPUSH
13816: CALL_OW 313
13820: PPUSH
13821: CALL_OW 122
// break ;
13825: GO 13829
// end ; end ;
13827: GO 13797
13829: POP
13830: POP
// if unitsToHeal and sciListOutside then
13831: LD_VAR 0 11
13835: PUSH
13836: LD_VAR 0 7
13840: AND
13841: IFFALSE 13861
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13843: LD_VAR 0 7
13847: PPUSH
13848: LD_VAR 0 11
13852: PUSH
13853: LD_INT 1
13855: ARRAY
13856: PPUSH
13857: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13861: LD_VAR 0 10
13865: PUSH
13866: LD_INT 0
13868: EQUAL
13869: PUSH
13870: LD_VAR 0 11
13874: PUSH
13875: LD_INT 0
13877: EQUAL
13878: AND
13879: PUSH
13880: LD_VAR 0 7
13884: AND
13885: IFFALSE 13953
// begin tmp := buildings ;
13887: LD_ADDR_VAR 0 12
13891: PUSH
13892: LD_VAR 0 4
13896: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13897: LD_ADDR_VAR 0 13
13901: PUSH
13902: LD_INT 1
13904: PPUSH
13905: LD_VAR 0 12
13909: PPUSH
13910: CALL_OW 12
13914: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13915: LD_VAR 0 7
13919: PPUSH
13920: LD_INT 3
13922: PUSH
13923: LD_INT 60
13925: PUSH
13926: EMPTY
13927: LIST
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: PPUSH
13933: CALL_OW 72
13937: PPUSH
13938: LD_VAR 0 12
13942: PUSH
13943: LD_VAR 0 13
13947: ARRAY
13948: PPUSH
13949: CALL_OW 120
// end ; end ;
13953: LD_VAR 0 5
13957: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13958: LD_INT 0
13960: PPUSH
13961: PPUSH
13962: PPUSH
13963: PPUSH
13964: PPUSH
13965: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13966: LD_ADDR_VAR 0 7
13970: PUSH
13971: LD_VAR 0 2
13975: PPUSH
13976: LD_INT 22
13978: PUSH
13979: LD_VAR 0 1
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 21
13990: PUSH
13991: LD_INT 2
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: LD_INT 34
14000: PUSH
14001: LD_INT 52
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: LIST
14012: PPUSH
14013: CALL_OW 70
14017: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14018: LD_ADDR_VAR 0 8
14022: PUSH
14023: LD_VAR 0 2
14027: PPUSH
14028: LD_INT 22
14030: PUSH
14031: LD_VAR 0 1
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: PUSH
14040: LD_INT 21
14042: PUSH
14043: LD_INT 3
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: LD_INT 3
14052: PUSH
14053: LD_INT 24
14055: PUSH
14056: LD_INT 1000
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: EMPTY
14064: LIST
14065: LIST
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: LIST
14071: PUSH
14072: EMPTY
14073: LIST
14074: PPUSH
14075: CALL_OW 70
14079: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14080: LD_VAR 0 8
14084: PUSH
14085: LD_INT 0
14087: GREATER
14088: PUSH
14089: LD_VAR 0 7
14093: PPUSH
14094: LD_INT 24
14096: PUSH
14097: LD_INT 750
14099: PUSH
14100: EMPTY
14101: LIST
14102: LIST
14103: PPUSH
14104: CALL_OW 72
14108: PUSH
14109: LD_INT 0
14111: GREATER
14112: AND
14113: IFFALSE 14133
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14115: LD_VAR 0 7
14119: PPUSH
14120: LD_VAR 0 8
14124: PUSH
14125: LD_INT 1
14127: ARRAY
14128: PPUSH
14129: CALL_OW 130
// end ;
14133: LD_VAR 0 3
14137: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14138: LD_INT 0
14140: PPUSH
14141: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14142: LD_INT 22
14144: PUSH
14145: LD_VAR 0 1
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 21
14156: PUSH
14157: LD_INT 2
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: EMPTY
14165: LIST
14166: LIST
14167: PPUSH
14168: CALL_OW 69
14172: PUSH
14173: LD_INT 18
14175: PPUSH
14176: LD_INT 22
14178: PUSH
14179: LD_VAR 0 1
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 21
14190: PUSH
14191: LD_INT 2
14193: PUSH
14194: EMPTY
14195: LIST
14196: LIST
14197: PUSH
14198: EMPTY
14199: LIST
14200: LIST
14201: PPUSH
14202: CALL_OW 70
14206: PUSH
14207: LD_VAR 0 3
14211: LESSEQUAL
14212: DIFF
14213: IFFALSE 14280
// for i := 1 to vehCount do
14215: LD_ADDR_VAR 0 9
14219: PUSH
14220: DOUBLE
14221: LD_INT 1
14223: DEC
14224: ST_TO_ADDR
14225: LD_VAR 0 3
14229: PUSH
14230: FOR_TO
14231: IFFALSE 14278
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14233: LD_VAR 0 2
14237: PPUSH
14238: LD_VAR 0 7
14242: PPUSH
14243: LD_VAR 0 5
14247: PPUSH
14248: LD_VAR 0 6
14252: PPUSH
14253: LD_VAR 0 4
14257: PUSH
14258: LD_INT 1
14260: PPUSH
14261: LD_VAR 0 4
14265: PPUSH
14266: CALL_OW 12
14270: ARRAY
14271: PPUSH
14272: CALL_OW 185
14276: GO 14230
14278: POP
14279: POP
// end ;
14280: LD_VAR 0 8
14284: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14285: LD_INT 0
14287: PPUSH
14288: PPUSH
14289: PPUSH
14290: PPUSH
14291: PPUSH
14292: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14293: LD_ADDR_VAR 0 6
14297: PUSH
14298: LD_INT 22
14300: PUSH
14301: LD_VAR 0 1
14305: PUSH
14306: EMPTY
14307: LIST
14308: LIST
14309: PUSH
14310: LD_INT 25
14312: PUSH
14313: LD_INT 9
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PUSH
14320: EMPTY
14321: LIST
14322: LIST
14323: PPUSH
14324: CALL_OW 69
14328: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14329: LD_ADDR_VAR 0 7
14333: PUSH
14334: LD_INT 81
14336: PUSH
14337: LD_VAR 0 1
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: LD_INT 3
14348: PUSH
14349: LD_INT 21
14351: PUSH
14352: LD_INT 3
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PPUSH
14367: CALL_OW 69
14371: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14372: LD_ADDR_VAR 0 4
14376: PUSH
14377: LD_INT 1
14379: PPUSH
14380: LD_INT 3
14382: PPUSH
14383: CALL_OW 12
14387: ST_TO_ADDR
// for i := 1 to list do
14388: LD_ADDR_VAR 0 5
14392: PUSH
14393: DOUBLE
14394: LD_INT 1
14396: DEC
14397: ST_TO_ADDR
14398: LD_VAR 0 6
14402: PUSH
14403: FOR_TO
14404: IFFALSE 14606
// for ta in filter do
14406: LD_ADDR_VAR 0 3
14410: PUSH
14411: LD_VAR 0 7
14415: PUSH
14416: FOR_IN
14417: IFFALSE 14602
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14419: LD_VAR 0 6
14423: PUSH
14424: LD_VAR 0 5
14428: ARRAY
14429: PPUSH
14430: LD_VAR 0 3
14434: PPUSH
14435: CALL_OW 296
14439: PUSH
14440: LD_INT 15
14442: LESSEQUAL
14443: IFFALSE 14600
// begin case c of 1 :
14445: LD_VAR 0 4
14449: PUSH
14450: LD_INT 1
14452: DOUBLE
14453: EQUAL
14454: IFTRUE 14458
14456: GO 14496
14458: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14459: LD_VAR 0 6
14463: PUSH
14464: LD_VAR 0 5
14468: ARRAY
14469: PPUSH
14470: LD_VAR 0 3
14474: PPUSH
14475: CALL_OW 250
14479: PPUSH
14480: LD_VAR 0 3
14484: PPUSH
14485: CALL_OW 251
14489: PPUSH
14490: CALL_OW 154
14494: GO 14600
14496: LD_INT 2
14498: DOUBLE
14499: EQUAL
14500: IFTRUE 14504
14502: GO 14568
14504: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14505: LD_VAR 0 6
14509: PUSH
14510: LD_VAR 0 5
14514: ARRAY
14515: PPUSH
14516: LD_VAR 0 3
14520: PPUSH
14521: CALL_OW 250
14525: PUSH
14526: LD_INT 1
14528: NEG
14529: PPUSH
14530: LD_INT 1
14532: PPUSH
14533: CALL_OW 12
14537: PLUS
14538: PPUSH
14539: LD_VAR 0 3
14543: PPUSH
14544: CALL_OW 251
14548: PUSH
14549: LD_INT 1
14551: NEG
14552: PPUSH
14553: LD_INT 1
14555: PPUSH
14556: CALL_OW 12
14560: PLUS
14561: PPUSH
14562: CALL_OW 153
14566: GO 14600
14568: LD_INT 3
14570: DOUBLE
14571: EQUAL
14572: IFTRUE 14576
14574: GO 14599
14576: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14577: LD_VAR 0 6
14581: PUSH
14582: LD_VAR 0 5
14586: ARRAY
14587: PPUSH
14588: LD_VAR 0 3
14592: PPUSH
14593: CALL_OW 115
14597: GO 14600
14599: POP
// end ; end ;
14600: GO 14416
14602: POP
14603: POP
14604: GO 14403
14606: POP
14607: POP
// end ;
14608: LD_VAR 0 2
14612: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14613: LD_INT 0
14615: PPUSH
14616: PPUSH
14617: PPUSH
14618: PPUSH
// r := 100 ;
14619: LD_ADDR_VAR 0 5
14623: PUSH
14624: LD_INT 100
14626: ST_TO_ADDR
// x := 0 ;
14627: LD_ADDR_VAR 0 6
14631: PUSH
14632: LD_INT 0
14634: ST_TO_ADDR
// while ( x < n ) do
14635: LD_VAR 0 6
14639: PUSH
14640: LD_VAR 0 2
14644: LESS
14645: IFFALSE 14908
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14647: LD_ADDR_VAR 0 4
14651: PUSH
14652: DOUBLE
14653: LD_INT 1
14655: DEC
14656: ST_TO_ADDR
14657: LD_VAR 0 1
14661: PPUSH
14662: LD_INT 0
14664: PPUSH
14665: CALL_OW 517
14669: PUSH
14670: LD_INT 1
14672: ARRAY
14673: PUSH
14674: FOR_TO
14675: IFFALSE 14904
// begin if r > 50 then
14677: LD_VAR 0 5
14681: PUSH
14682: LD_INT 50
14684: GREATER
14685: IFFALSE 14888
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14687: LD_VAR 0 1
14691: PPUSH
14692: LD_INT 0
14694: PPUSH
14695: CALL_OW 517
14699: PUSH
14700: LD_INT 1
14702: ARRAY
14703: PUSH
14704: LD_VAR 0 4
14708: ARRAY
14709: PPUSH
14710: LD_VAR 0 1
14714: PPUSH
14715: LD_INT 0
14717: PPUSH
14718: CALL_OW 517
14722: PUSH
14723: LD_INT 2
14725: ARRAY
14726: PUSH
14727: LD_VAR 0 4
14731: ARRAY
14732: PPUSH
14733: CALL_OW 458
14737: NOT
14738: IFFALSE 14886
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14740: LD_VAR 0 1
14744: PPUSH
14745: LD_INT 0
14747: PPUSH
14748: CALL_OW 517
14752: PUSH
14753: LD_INT 1
14755: ARRAY
14756: PUSH
14757: LD_VAR 0 4
14761: ARRAY
14762: PPUSH
14763: LD_VAR 0 1
14767: PPUSH
14768: LD_INT 0
14770: PPUSH
14771: CALL_OW 517
14775: PUSH
14776: LD_INT 2
14778: ARRAY
14779: PUSH
14780: LD_VAR 0 4
14784: ARRAY
14785: PPUSH
14786: LD_INT 8
14788: PPUSH
14789: LD_INT 0
14791: PPUSH
14792: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14796: LD_ADDR_EXP 37
14800: PUSH
14801: LD_EXP 37
14805: PPUSH
14806: LD_INT 1
14808: PPUSH
14809: LD_VAR 0 1
14813: PPUSH
14814: LD_INT 0
14816: PPUSH
14817: CALL_OW 517
14821: PUSH
14822: LD_INT 1
14824: ARRAY
14825: PUSH
14826: LD_VAR 0 4
14830: ARRAY
14831: PUSH
14832: LD_VAR 0 1
14836: PPUSH
14837: LD_INT 0
14839: PPUSH
14840: CALL_OW 517
14844: PUSH
14845: LD_INT 2
14847: ARRAY
14848: PUSH
14849: LD_VAR 0 4
14853: ARRAY
14854: PUSH
14855: EMPTY
14856: LIST
14857: LIST
14858: PPUSH
14859: CALL_OW 2
14863: ST_TO_ADDR
// r := 0 ;
14864: LD_ADDR_VAR 0 5
14868: PUSH
14869: LD_INT 0
14871: ST_TO_ADDR
// x := x + 1 ;
14872: LD_ADDR_VAR 0 6
14876: PUSH
14877: LD_VAR 0 6
14881: PUSH
14882: LD_INT 1
14884: PLUS
14885: ST_TO_ADDR
// end end else
14886: GO 14902
// r := r + 35 ;
14888: LD_ADDR_VAR 0 5
14892: PUSH
14893: LD_VAR 0 5
14897: PUSH
14898: LD_INT 35
14900: PLUS
14901: ST_TO_ADDR
// end end ;
14902: GO 14674
14904: POP
14905: POP
14906: GO 14635
14908: LD_VAR 0 3
14912: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14913: LD_INT 0
14915: PPUSH
14916: PPUSH
14917: PPUSH
14918: PPUSH
14919: PPUSH
// tmp := [ ] ;
14920: LD_ADDR_VAR 0 6
14924: PUSH
14925: EMPTY
14926: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14927: LD_ADDR_VAR 0 7
14931: PUSH
14932: LD_INT 22
14934: PUSH
14935: LD_VAR 0 1
14939: PUSH
14940: EMPTY
14941: LIST
14942: LIST
14943: PUSH
14944: LD_INT 30
14946: PUSH
14947: LD_INT 32
14949: PUSH
14950: EMPTY
14951: LIST
14952: LIST
14953: PUSH
14954: EMPTY
14955: LIST
14956: LIST
14957: PPUSH
14958: CALL_OW 69
14962: ST_TO_ADDR
// if bunkers then
14963: LD_VAR 0 7
14967: IFFALSE 15037
// for i in bunkers do
14969: LD_ADDR_VAR 0 4
14973: PUSH
14974: LD_VAR 0 7
14978: PUSH
14979: FOR_IN
14980: IFFALSE 15035
// for j in UnitsInside ( i ) do
14982: LD_ADDR_VAR 0 5
14986: PUSH
14987: LD_VAR 0 4
14991: PPUSH
14992: CALL_OW 313
14996: PUSH
14997: FOR_IN
14998: IFFALSE 15031
// tmp := Replace ( tmp , tmp + 1 , j ) ;
15000: LD_ADDR_VAR 0 6
15004: PUSH
15005: LD_VAR 0 6
15009: PPUSH
15010: LD_VAR 0 6
15014: PUSH
15015: LD_INT 1
15017: PLUS
15018: PPUSH
15019: LD_VAR 0 5
15023: PPUSH
15024: CALL_OW 1
15028: ST_TO_ADDR
15029: GO 14997
15031: POP
15032: POP
15033: GO 14979
15035: POP
15036: POP
// if tmp then
15037: LD_VAR 0 6
15041: IFFALSE 15081
// begin ComExitBuilding ( tmp ) ;
15043: LD_VAR 0 6
15047: PPUSH
15048: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15052: LD_VAR 0 6
15056: PPUSH
15057: LD_VAR 0 2
15061: PPUSH
15062: CALL_OW 250
15066: PPUSH
15067: LD_VAR 0 2
15071: PPUSH
15072: CALL_OW 251
15076: PPUSH
15077: CALL_OW 174
// end ; end ;
15081: LD_VAR 0 3
15085: RET
// export function CreateNature ; var i , un ; begin
15086: LD_INT 0
15088: PPUSH
15089: PPUSH
15090: PPUSH
// uc_side := 0 ;
15091: LD_ADDR_OWVAR 20
15095: PUSH
15096: LD_INT 0
15098: ST_TO_ADDR
// uc_nation := 0 ;
15099: LD_ADDR_OWVAR 21
15103: PUSH
15104: LD_INT 0
15106: ST_TO_ADDR
// InitHc ;
15107: CALL_OW 19
// hc_class := class_fish ;
15111: LD_ADDR_OWVAR 28
15115: PUSH
15116: LD_INT 20
15118: ST_TO_ADDR
// for i := 1 to 6 do
15119: LD_ADDR_VAR 0 2
15123: PUSH
15124: DOUBLE
15125: LD_INT 1
15127: DEC
15128: ST_TO_ADDR
15129: LD_INT 6
15131: PUSH
15132: FOR_TO
15133: IFFALSE 15152
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15135: CALL_OW 44
15139: PPUSH
15140: LD_INT 22
15142: PPUSH
15143: LD_INT 0
15145: PPUSH
15146: CALL_OW 49
15150: GO 15132
15152: POP
15153: POP
// for i := 1 to Difficulty + 2 do
15154: LD_ADDR_VAR 0 2
15158: PUSH
15159: DOUBLE
15160: LD_INT 1
15162: DEC
15163: ST_TO_ADDR
15164: LD_OWVAR 67
15168: PUSH
15169: LD_INT 2
15171: PLUS
15172: PUSH
15173: FOR_TO
15174: IFFALSE 15283
// begin hc_sex := sex_male ;
15176: LD_ADDR_OWVAR 27
15180: PUSH
15181: LD_INT 1
15183: ST_TO_ADDR
// uc_side := 0 ;
15184: LD_ADDR_OWVAR 20
15188: PUSH
15189: LD_INT 0
15191: ST_TO_ADDR
// uc_nation := nation_nature ;
15192: LD_ADDR_OWVAR 21
15196: PUSH
15197: LD_INT 0
15199: ST_TO_ADDR
// hc_class := class_tiger ;
15200: LD_ADDR_OWVAR 28
15204: PUSH
15205: LD_INT 14
15207: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15208: LD_ADDR_OWVAR 31
15212: PUSH
15213: LD_EXP 30
15217: PUSH
15218: LD_INT 0
15220: PUSH
15221: LD_INT 0
15223: PUSH
15224: LD_INT 0
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15233: LD_ADDR_OWVAR 35
15237: PUSH
15238: LD_INT 5
15240: NEG
15241: PPUSH
15242: LD_INT 5
15244: PPUSH
15245: CALL_OW 12
15249: PUSH
15250: LD_OWVAR 67
15254: MUL
15255: ST_TO_ADDR
// un := CreateHuman ;
15256: LD_ADDR_VAR 0 3
15260: PUSH
15261: CALL_OW 44
15265: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15266: LD_VAR 0 3
15270: PPUSH
15271: LD_INT 23
15273: PPUSH
15274: LD_INT 0
15276: PPUSH
15277: CALL_OW 49
// end ;
15281: GO 15173
15283: POP
15284: POP
// for i := 1 to rand ( 3 , 4 ) do
15285: LD_ADDR_VAR 0 2
15289: PUSH
15290: DOUBLE
15291: LD_INT 1
15293: DEC
15294: ST_TO_ADDR
15295: LD_INT 3
15297: PPUSH
15298: LD_INT 4
15300: PPUSH
15301: CALL_OW 12
15305: PUSH
15306: FOR_TO
15307: IFFALSE 15399
// begin hc_sex := sex_male ;
15309: LD_ADDR_OWVAR 27
15313: PUSH
15314: LD_INT 1
15316: ST_TO_ADDR
// uc_side := 0 ;
15317: LD_ADDR_OWVAR 20
15321: PUSH
15322: LD_INT 0
15324: ST_TO_ADDR
// uc_nation := nation_nature ;
15325: LD_ADDR_OWVAR 21
15329: PUSH
15330: LD_INT 0
15332: ST_TO_ADDR
// hc_class := 18 ;
15333: LD_ADDR_OWVAR 28
15337: PUSH
15338: LD_INT 18
15340: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15341: LD_ADDR_OWVAR 31
15345: PUSH
15346: LD_INT 0
15348: PUSH
15349: LD_INT 0
15351: PUSH
15352: LD_INT 0
15354: PUSH
15355: LD_INT 0
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: ST_TO_ADDR
// hc_agressivity := 0 ;
15364: LD_ADDR_OWVAR 35
15368: PUSH
15369: LD_INT 0
15371: ST_TO_ADDR
// un := CreateHuman ;
15372: LD_ADDR_VAR 0 3
15376: PUSH
15377: CALL_OW 44
15381: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15382: LD_VAR 0 3
15386: PPUSH
15387: LD_INT 23
15389: PPUSH
15390: LD_INT 0
15392: PPUSH
15393: CALL_OW 49
// end ;
15397: GO 15306
15399: POP
15400: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15401: LD_ADDR_VAR 0 2
15405: PUSH
15406: DOUBLE
15407: LD_INT 1
15409: DEC
15410: ST_TO_ADDR
15411: LD_INT 4
15413: PUSH
15414: LD_INT 3
15416: PUSH
15417: LD_INT 3
15419: PUSH
15420: LD_INT 3
15422: PUSH
15423: EMPTY
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: PUSH
15429: LD_OWVAR 67
15433: ARRAY
15434: PUSH
15435: FOR_TO
15436: IFFALSE 15545
// begin hc_sex := sex_male ;
15438: LD_ADDR_OWVAR 27
15442: PUSH
15443: LD_INT 1
15445: ST_TO_ADDR
// uc_side := 0 ;
15446: LD_ADDR_OWVAR 20
15450: PUSH
15451: LD_INT 0
15453: ST_TO_ADDR
// uc_nation := nation_nature ;
15454: LD_ADDR_OWVAR 21
15458: PUSH
15459: LD_INT 0
15461: ST_TO_ADDR
// hc_class := class_apeman ;
15462: LD_ADDR_OWVAR 28
15466: PUSH
15467: LD_INT 12
15469: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15470: LD_ADDR_OWVAR 31
15474: PUSH
15475: LD_INT 0
15477: PPUSH
15478: LD_INT 2
15480: PPUSH
15481: CALL_OW 12
15485: PUSH
15486: LD_INT 0
15488: PUSH
15489: LD_INT 0
15491: PUSH
15492: LD_INT 0
15494: PUSH
15495: EMPTY
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15501: LD_ADDR_OWVAR 35
15505: PUSH
15506: LD_INT 10
15508: NEG
15509: PPUSH
15510: LD_INT 10
15512: PPUSH
15513: CALL_OW 12
15517: ST_TO_ADDR
// un := CreateHuman ;
15518: LD_ADDR_VAR 0 3
15522: PUSH
15523: CALL_OW 44
15527: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15528: LD_VAR 0 3
15532: PPUSH
15533: LD_INT 26
15535: PPUSH
15536: LD_INT 0
15538: PPUSH
15539: CALL_OW 49
// end ;
15543: GO 15435
15545: POP
15546: POP
// end ; end_of_file
15547: LD_VAR 0 1
15551: RET
// on UnitDestroyed ( unit ) do var i ;
15552: LD_INT 0
15554: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15555: LD_VAR 0 1
15559: PPUSH
15560: CALL 34853 0 1
// if unit = JMM then
15564: LD_VAR 0 1
15568: PUSH
15569: LD_EXP 1
15573: EQUAL
15574: IFFALSE 15583
// YouLost ( JMM ) ;
15576: LD_STRING JMM
15578: PPUSH
15579: CALL_OW 104
// if unit in russianTanks then
15583: LD_VAR 0 1
15587: PUSH
15588: LD_EXP 32
15592: IN
15593: IFFALSE 15611
// russianTanks := russianTanks diff unit ;
15595: LD_ADDR_EXP 32
15599: PUSH
15600: LD_EXP 32
15604: PUSH
15605: LD_VAR 0 1
15609: DIFF
15610: ST_TO_ADDR
// if unit in russianTimeLapsers then
15611: LD_VAR 0 1
15615: PUSH
15616: LD_EXP 33
15620: IN
15621: IFFALSE 15639
// russianTimeLapsers := russianTimeLapsers diff unit ;
15623: LD_ADDR_EXP 33
15627: PUSH
15628: LD_EXP 33
15632: PUSH
15633: LD_VAR 0 1
15637: DIFF
15638: ST_TO_ADDR
// if unit in RuScientists then
15639: LD_VAR 0 1
15643: PUSH
15644: LD_EXP 27
15648: IN
15649: IFFALSE 15681
// begin RuScientists := RuScientists diff unit ;
15651: LD_ADDR_EXP 27
15655: PUSH
15656: LD_EXP 27
15660: PUSH
15661: LD_VAR 0 1
15665: DIFF
15666: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15667: LD_ADDR_EXP 28
15671: PUSH
15672: LD_EXP 28
15676: PUSH
15677: LD_INT 1
15679: PLUS
15680: ST_TO_ADDR
// end ; end ;
15681: PPOPN 2
15683: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15684: LD_VAR 0 3
15688: PPUSH
15689: CALL_OW 264
15693: PUSH
15694: LD_INT 9
15696: EQUAL
15697: IFFALSE 15713
// laserCounterDestroy := laserCounterDestroy + 1 ;
15699: LD_ADDR_EXP 43
15703: PUSH
15704: LD_EXP 43
15708: PUSH
15709: LD_INT 1
15711: PLUS
15712: ST_TO_ADDR
// end ;
15713: PPOPN 3
15715: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15716: LD_VAR 0 2
15720: PUSH
15721: LD_INT 22
15723: PUSH
15724: LD_INT 6
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PPUSH
15731: CALL_OW 69
15735: IN
15736: IFFALSE 15791
// begin if GetType ( human ) = unit_vehicle then
15738: LD_VAR 0 2
15742: PPUSH
15743: CALL_OW 247
15747: PUSH
15748: LD_INT 2
15750: EQUAL
15751: IFFALSE 15768
// human := IsDrivenBy ( human ) ;
15753: LD_ADDR_VAR 0 2
15757: PUSH
15758: LD_VAR 0 2
15762: PPUSH
15763: CALL_OW 311
15767: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15768: LD_VAR 0 2
15772: PPUSH
15773: LD_VAR 0 2
15777: PPUSH
15778: CALL_OW 110
15782: PUSH
15783: LD_INT 10
15785: PLUS
15786: PPUSH
15787: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
15791: LD_VAR 0 2
15795: PPUSH
15796: CALL_OW 255
15800: PUSH
15801: LD_INT 1
15803: EQUAL
15804: PUSH
15805: LD_EXP 40
15809: PUSH
15810: LD_INT 0
15812: EQUAL
15813: AND
15814: IFFALSE 15926
// begin eventVar1 = 1 ;
15816: LD_ADDR_EXP 40
15820: PUSH
15821: LD_INT 1
15823: ST_TO_ADDR
// teleportExplored = 1 ;
15824: LD_ADDR_EXP 26
15828: PUSH
15829: LD_INT 1
15831: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15832: LD_STRING M2a
15834: PPUSH
15835: CALL_OW 337
// wait ( 0 0$2 ) ;
15839: LD_INT 70
15841: PPUSH
15842: CALL_OW 67
// DialogueOn ;
15846: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15850: LD_INT 22
15852: PUSH
15853: LD_INT 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 21
15862: PUSH
15863: LD_INT 1
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: EMPTY
15871: LIST
15872: LIST
15873: PPUSH
15874: CALL_OW 69
15878: PPUSH
15879: LD_STRING DT3a-Sol1-1
15881: PPUSH
15882: LD_STRING DT3a-FSol1-1
15884: PPUSH
15885: CALL 12273 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15889: LD_EXP 1
15893: PPUSH
15894: LD_STRING DT3a-JMM-1
15896: PPUSH
15897: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15901: LD_VAR 0 2
15905: PPUSH
15906: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15910: LD_EXP 1
15914: PPUSH
15915: LD_STRING DT3a-JMM-1a
15917: PPUSH
15918: CALL_OW 88
// DialogueOff ;
15922: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15926: LD_VAR 0 1
15930: PUSH
15931: LD_INT 10
15933: EQUAL
15934: PUSH
15935: LD_VAR 0 2
15939: PPUSH
15940: CALL_OW 247
15944: PUSH
15945: LD_INT 2
15947: EQUAL
15948: AND
15949: PUSH
15950: LD_VAR 0 2
15954: PPUSH
15955: CALL_OW 255
15959: PUSH
15960: LD_INT 3
15962: EQUAL
15963: AND
15964: IFFALSE 16030
// begin if vehicleTeleported = 0 then
15966: LD_EXP 21
15970: PUSH
15971: LD_INT 0
15973: EQUAL
15974: IFFALSE 15991
// begin wait ( 0 0$03 ) ;
15976: LD_INT 105
15978: PPUSH
15979: CALL_OW 67
// vehicleTeleported := 1 ;
15983: LD_ADDR_EXP 21
15987: PUSH
15988: LD_INT 1
15990: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15991: LD_EXP 21
15995: PUSH
15996: LD_INT 2
15998: EQUAL
15999: IFFALSE 16016
// begin wait ( 0 0$03 ) ;
16001: LD_INT 105
16003: PPUSH
16004: CALL_OW 67
// vehicleTeleported := 3 ;
16008: LD_ADDR_EXP 21
16012: PUSH
16013: LD_INT 3
16015: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16016: LD_ADDR_EXP 22
16020: PUSH
16021: LD_EXP 22
16025: PUSH
16026: LD_INT 1
16028: PLUS
16029: ST_TO_ADDR
// end ; end ;
16030: PPOPN 2
16032: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16033: LD_VAR 0 1
16037: PPUSH
16038: LD_VAR 0 2
16042: PPUSH
16043: CALL 34973 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16047: LD_VAR 0 1
16051: PPUSH
16052: CALL_OW 264
16056: PUSH
16057: LD_INT 7
16059: EQUAL
16060: IFFALSE 16070
// rocketBuilded := true ;
16062: LD_ADDR_EXP 44
16066: PUSH
16067: LD_INT 1
16069: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16070: LD_VAR 0 1
16074: PPUSH
16075: CALL_OW 255
16079: PUSH
16080: LD_INT 3
16082: NONEQUAL
16083: IFFALSE 16087
// exit ;
16085: GO 16204
// if factory in [ ru_fact , rufab2 ] then
16087: LD_VAR 0 2
16091: PUSH
16092: LD_INT 21
16094: PUSH
16095: LD_INT 112
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: IN
16102: IFFALSE 16204
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16104: LD_VAR 0 1
16108: PPUSH
16109: CALL_OW 264
16113: PUSH
16114: LD_INT 49
16116: EQUAL
16117: IFFALSE 16153
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16119: LD_ADDR_EXP 33
16123: PUSH
16124: LD_EXP 33
16128: PPUSH
16129: LD_VAR 0 1
16133: PPUSH
16134: CALL 77449 0 2
16138: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16139: LD_VAR 0 1
16143: PPUSH
16144: LD_INT 137
16146: PPUSH
16147: CALL_OW 120
// end else
16151: GO 16204
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16153: LD_VAR 0 1
16157: PPUSH
16158: CALL_OW 264
16162: PUSH
16163: LD_INT 51
16165: PUSH
16166: LD_INT 89
16168: PUSH
16169: LD_INT 52
16171: PUSH
16172: LD_INT 53
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: IN
16181: NOT
16182: IFFALSE 16204
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16184: LD_ADDR_EXP 32
16188: PUSH
16189: LD_EXP 32
16193: PPUSH
16194: LD_VAR 0 1
16198: PPUSH
16199: CALL 77449 0 2
16203: ST_TO_ADDR
// end ; end ; end ;
16204: PPOPN 2
16206: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16207: LD_INT 0
16209: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16210: LD_VAR 0 2
16214: PPUSH
16215: CALL_OW 255
16219: PUSH
16220: LD_INT 3
16222: EQUAL
16223: PUSH
16224: LD_VAR 0 2
16228: PPUSH
16229: CALL_OW 257
16233: PUSH
16234: LD_INT 3
16236: EQUAL
16237: AND
16238: PUSH
16239: LD_INT 21
16241: PPUSH
16242: CALL_OW 255
16246: PUSH
16247: LD_INT 3
16249: EQUAL
16250: AND
16251: PUSH
16252: LD_INT 21
16254: PPUSH
16255: CALL_OW 302
16259: AND
16260: IFFALSE 16274
// ComEnterUnit ( human , ru_fact ) ;
16262: LD_VAR 0 2
16266: PPUSH
16267: LD_INT 21
16269: PPUSH
16270: CALL_OW 120
// end ;
16274: PPOPN 3
16276: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16277: LD_VAR 0 1
16281: PPUSH
16282: CALL 34957 0 1
// end ; end_of_file
16286: PPOPN 1
16288: END
// every 0 0$1 trigger ruAI = 1 do
16289: LD_EXP 34
16293: PUSH
16294: LD_INT 1
16296: EQUAL
16297: IFFALSE 16409
16299: GO 16301
16301: DISABLE
// begin enable ;
16302: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16303: LD_INT 3
16305: PPUSH
16306: LD_INT 6
16308: PPUSH
16309: LD_INT 9
16311: PPUSH
16312: LD_EXP 31
16316: PPUSH
16317: CALL 13123 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16321: LD_INT 3
16323: PPUSH
16324: LD_INT 4
16326: PPUSH
16327: LD_INT 10
16329: PPUSH
16330: LD_EXP 31
16334: PPUSH
16335: CALL 13123 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16339: LD_INT 3
16341: PPUSH
16342: LD_INT 9
16344: PPUSH
16345: CALL 13958 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16349: LD_INT 3
16351: PPUSH
16352: LD_INT 10
16354: PPUSH
16355: CALL 13958 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16359: LD_INT 3
16361: PPUSH
16362: LD_INT 16
16364: PPUSH
16365: LD_INT 9
16367: PPUSH
16368: LD_INT 91
16370: PPUSH
16371: CALL 13490 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16375: LD_INT 3
16377: PPUSH
16378: LD_INT 17
16380: PPUSH
16381: LD_INT 10
16383: PPUSH
16384: LD_INT 47
16386: PUSH
16387: LD_INT 129
16389: PUSH
16390: LD_INT 135
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: LIST
16397: PPUSH
16398: CALL 13490 0 4
// IntBazooka ( 3 ) ;
16402: LD_INT 3
16404: PPUSH
16405: CALL 14285 0 1
// end ;
16409: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
16410: LD_EXP 32
16414: PUSH
16415: LD_INT 3
16417: PUSH
16418: LD_INT 4
16420: PUSH
16421: LD_INT 5
16423: PUSH
16424: LD_INT 6
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: PUSH
16433: LD_OWVAR 67
16437: ARRAY
16438: GREATEREQUAL
16439: IFFALSE 16811
16441: GO 16443
16443: DISABLE
16444: LD_INT 0
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
// begin enable ;
16450: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16451: LD_ADDR_VAR 0 2
16455: PUSH
16456: LD_EXP 32
16460: PUSH
16461: LD_EXP 33
16465: UNION
16466: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16467: LD_ADDR_EXP 32
16471: PUSH
16472: LD_EXP 32
16476: PUSH
16477: LD_VAR 0 2
16481: DIFF
16482: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16483: LD_ADDR_EXP 33
16487: PUSH
16488: LD_EXP 33
16492: PUSH
16493: LD_VAR 0 2
16497: DIFF
16498: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16499: LD_EXP 21
16503: PUSH
16504: LD_INT 4
16506: GREATEREQUAL
16507: IFFALSE 16525
// attackTactic := rand ( 1 , 2 ) ;
16509: LD_ADDR_EXP 36
16513: PUSH
16514: LD_INT 1
16516: PPUSH
16517: LD_INT 2
16519: PPUSH
16520: CALL_OW 12
16524: ST_TO_ADDR
// path := [ [ 93 , 77 ] , [ 107 , 99 ] , [ 123 , 112 ] , [ 140 , 112 ] ] ;
16525: LD_ADDR_VAR 0 4
16529: PUSH
16530: LD_INT 93
16532: PUSH
16533: LD_INT 77
16535: PUSH
16536: EMPTY
16537: LIST
16538: LIST
16539: PUSH
16540: LD_INT 107
16542: PUSH
16543: LD_INT 99
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 123
16552: PUSH
16553: LD_INT 112
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 140
16562: PUSH
16563: LD_INT 112
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: ST_TO_ADDR
// if attackTactic < 2 then
16576: LD_EXP 36
16580: PUSH
16581: LD_INT 2
16583: LESS
16584: IFFALSE 16615
// path := [ [ 131 , 136 ] , [ 140 , 112 ] ] ;
16586: LD_ADDR_VAR 0 4
16590: PUSH
16591: LD_INT 131
16593: PUSH
16594: LD_INT 136
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: LD_INT 140
16603: PUSH
16604: LD_INT 112
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16615: LD_INT 10
16617: PPUSH
16618: CALL_OW 302
16622: IFFALSE 16738
// begin for i in tmp do
16624: LD_ADDR_VAR 0 1
16628: PUSH
16629: LD_VAR 0 2
16633: PUSH
16634: FOR_IN
16635: IFFALSE 16678
// if attackTactic < 2 then
16637: LD_EXP 36
16641: PUSH
16642: LD_INT 2
16644: LESS
16645: IFFALSE 16661
// ComEnterUnit ( i , ruteleprt ) else
16647: LD_VAR 0 1
16651: PPUSH
16652: LD_INT 10
16654: PPUSH
16655: CALL_OW 120
16659: GO 16676
// ComMoveXY ( i , 88 , 69 ) ;
16661: LD_VAR 0 1
16665: PPUSH
16666: LD_INT 88
16668: PPUSH
16669: LD_INT 69
16671: PPUSH
16672: CALL_OW 111
16676: GO 16634
16678: POP
16679: POP
// p := 0 ;
16680: LD_ADDR_VAR 0 3
16684: PUSH
16685: LD_INT 0
16687: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16688: LD_INT 70
16690: PPUSH
16691: CALL_OW 67
// p := Inc ( p ) ;
16695: LD_ADDR_VAR 0 3
16699: PUSH
16700: LD_VAR 0 3
16704: PPUSH
16705: CALL 78810 0 1
16709: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
16710: LD_VAR 0 2
16714: PPUSH
16715: LD_INT 60
16717: PUSH
16718: EMPTY
16719: LIST
16720: PPUSH
16721: CALL_OW 72
16725: NOT
16726: PUSH
16727: LD_VAR 0 3
16731: PUSH
16732: LD_INT 30
16734: GREATER
16735: OR
16736: IFFALSE 16688
// end ; repeat wait ( 0 0$1 ) ;
16738: LD_INT 35
16740: PPUSH
16741: CALL_OW 67
// for i in tmp do
16745: LD_ADDR_VAR 0 1
16749: PUSH
16750: LD_VAR 0 2
16754: PUSH
16755: FOR_IN
16756: IFFALSE 16788
// if not IsOk ( i ) then
16758: LD_VAR 0 1
16762: PPUSH
16763: CALL_OW 302
16767: NOT
16768: IFFALSE 16786
// tmp := tmp diff i ;
16770: LD_ADDR_VAR 0 2
16774: PUSH
16775: LD_VAR 0 2
16779: PUSH
16780: LD_VAR 0 1
16784: DIFF
16785: ST_TO_ADDR
16786: GO 16755
16788: POP
16789: POP
// AgressiveMove ( tmp , path ) ;
16790: LD_VAR 0 2
16794: PPUSH
16795: LD_VAR 0 4
16799: PPUSH
16800: CALL 80053 0 2
// until not tmp ;
16804: LD_VAR 0 2
16808: NOT
16809: IFFALSE 16738
// end ;
16811: PPOPN 4
16813: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16814: LD_INT 4
16816: PPUSH
16817: CALL_OW 303
16821: IFFALSE 16836
16823: GO 16825
16825: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16826: LD_INT 3
16828: PPUSH
16829: LD_INT 4
16831: PPUSH
16832: CALL 14913 0 2
16836: END
// every 0 0$1 do
16837: GO 16839
16839: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16840: LD_INT 3
16842: PPUSH
16843: LD_INT 91
16845: PPUSH
16846: LD_INT 3
16848: PPUSH
16849: CALL 12888 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16853: LD_INT 3
16855: PPUSH
16856: LD_INT 47
16858: PPUSH
16859: LD_INT 3
16861: PPUSH
16862: CALL 12888 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16866: LD_INT 3
16868: PPUSH
16869: LD_INT 129
16871: PPUSH
16872: LD_INT 3
16874: PPUSH
16875: CALL 12888 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16879: LD_INT 3
16881: PPUSH
16882: LD_INT 3
16884: PPUSH
16885: LD_INT 3
16887: PPUSH
16888: CALL 12888 0 3
// end ;
16892: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16893: LD_INT 22
16895: PUSH
16896: LD_INT 1
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 21
16905: PUSH
16906: LD_INT 3
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: PPUSH
16917: CALL_OW 69
16921: IFFALSE 16990
16923: GO 16925
16925: DISABLE
// begin wait ( 0 0$40 ) ;
16926: LD_INT 1400
16928: PPUSH
16929: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16933: LD_INT 3
16935: PPUSH
16936: LD_INT 21
16938: PPUSH
16939: LD_INT 3
16941: PUSH
16942: LD_INT 4
16944: PUSH
16945: LD_INT 5
16947: PUSH
16948: LD_INT 6
16950: PUSH
16951: EMPTY
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: PUSH
16957: LD_OWVAR 67
16961: ARRAY
16962: PPUSH
16963: LD_INT 46
16965: PUSH
16966: LD_INT 45
16968: PUSH
16969: LD_INT 44
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: LIST
16976: PPUSH
16977: LD_INT 3
16979: PPUSH
16980: LD_INT 3
16982: PPUSH
16983: LD_INT 24
16985: PPUSH
16986: CALL 14138 0 7
// end ;
16990: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16991: LD_EXP 20
16995: PUSH
16996: LD_INT 2
16998: EQUAL
16999: PUSH
17000: LD_INT 21
17002: PPUSH
17003: CALL_OW 255
17007: PUSH
17008: LD_INT 3
17010: EQUAL
17011: AND
17012: PUSH
17013: LD_INT 112
17015: PPUSH
17016: CALL_OW 255
17020: PUSH
17021: LD_INT 3
17023: EQUAL
17024: AND
17025: PUSH
17026: LD_INT 21
17028: PPUSH
17029: CALL_OW 302
17033: AND
17034: PUSH
17035: LD_INT 112
17037: PPUSH
17038: CALL_OW 302
17042: AND
17043: PUSH
17044: LD_INT 22
17046: PUSH
17047: LD_INT 3
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: PUSH
17054: LD_INT 21
17056: PUSH
17057: LD_INT 2
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 50
17066: PUSH
17067: EMPTY
17068: LIST
17069: PUSH
17070: LD_INT 3
17072: PUSH
17073: LD_INT 58
17075: PUSH
17076: EMPTY
17077: LIST
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: PPUSH
17089: CALL_OW 69
17093: PUSH
17094: LD_INT 18
17096: PPUSH
17097: LD_INT 22
17099: PUSH
17100: LD_INT 3
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: PUSH
17107: LD_INT 21
17109: PUSH
17110: LD_INT 2
17112: PUSH
17113: EMPTY
17114: LIST
17115: LIST
17116: PUSH
17117: EMPTY
17118: LIST
17119: LIST
17120: PPUSH
17121: CALL_OW 70
17125: PUSH
17126: LD_INT 0
17128: EQUAL
17129: DIFF
17130: AND
17131: IFFALSE 17257
17133: GO 17135
17135: DISABLE
// begin enable ;
17136: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17137: LD_INT 3
17139: PPUSH
17140: LD_INT 21
17142: PPUSH
17143: LD_INT 3
17145: PUSH
17146: LD_INT 4
17148: PUSH
17149: LD_INT 5
17151: PUSH
17152: LD_INT 6
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: PUSH
17161: LD_OWVAR 67
17165: ARRAY
17166: PPUSH
17167: LD_INT 46
17169: PUSH
17170: LD_INT 45
17172: PUSH
17173: LD_INT 44
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: LIST
17180: PPUSH
17181: LD_INT 3
17183: PPUSH
17184: LD_INT 3
17186: PPUSH
17187: LD_INT 24
17189: PPUSH
17190: CALL 14138 0 7
// if russianTimeLapsers = 0 then
17194: LD_EXP 33
17198: PUSH
17199: LD_INT 0
17201: EQUAL
17202: IFFALSE 17257
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17204: LD_INT 3
17206: PPUSH
17207: LD_INT 112
17209: PPUSH
17210: LD_INT 1
17212: PUSH
17213: LD_INT 2
17215: PUSH
17216: LD_INT 2
17218: PUSH
17219: LD_INT 2
17221: PUSH
17222: EMPTY
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: PUSH
17228: LD_OWVAR 67
17232: ARRAY
17233: PPUSH
17234: LD_INT 49
17236: PUSH
17237: LD_INT 49
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PPUSH
17244: LD_INT 3
17246: PPUSH
17247: LD_INT 3
17249: PPUSH
17250: LD_INT 24
17252: PPUSH
17253: CALL 14138 0 7
// end ;
17257: END
// every 0 0$1 trigger arabianMines do var i ;
17258: LD_EXP 37
17262: IFFALSE 17383
17264: GO 17266
17266: DISABLE
17267: LD_INT 0
17269: PPUSH
// begin enable ;
17270: ENABLE
// for i in arabianMines do
17271: LD_ADDR_VAR 0 1
17275: PUSH
17276: LD_EXP 37
17280: PUSH
17281: FOR_IN
17282: IFFALSE 17381
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17284: LD_INT 22
17286: PUSH
17287: LD_INT 1
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 92
17296: PUSH
17297: LD_VAR 0 1
17301: PUSH
17302: LD_INT 1
17304: ARRAY
17305: PUSH
17306: LD_VAR 0 1
17310: PUSH
17311: LD_INT 2
17313: ARRAY
17314: PUSH
17315: LD_INT 3
17317: PUSH
17318: EMPTY
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: PUSH
17324: EMPTY
17325: LIST
17326: LIST
17327: PPUSH
17328: CALL_OW 69
17332: IFFALSE 17379
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17334: LD_VAR 0 1
17338: PUSH
17339: LD_INT 1
17341: ARRAY
17342: PPUSH
17343: LD_VAR 0 1
17347: PUSH
17348: LD_INT 2
17350: ARRAY
17351: PPUSH
17352: LD_INT 5
17354: PPUSH
17355: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17359: LD_ADDR_EXP 37
17363: PUSH
17364: LD_EXP 37
17368: PPUSH
17369: LD_VAR 0 1
17373: PPUSH
17374: CALL_OW 3
17378: ST_TO_ADDR
// end ; end ;
17379: GO 17281
17381: POP
17382: POP
// end ;
17383: PPOPN 1
17385: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17386: LD_EXP 21
17390: PUSH
17391: LD_INT 4
17393: GREATEREQUAL
17394: PUSH
17395: LD_EXP 22
17399: PUSH
17400: LD_INT 12
17402: MOD
17403: PUSH
17404: LD_INT 0
17406: EQUAL
17407: AND
17408: IFFALSE 17522
17410: GO 17412
17412: DISABLE
17413: LD_INT 0
17415: PPUSH
17416: PPUSH
// begin enable ;
17417: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17418: LD_ADDR_VAR 0 2
17422: PUSH
17423: LD_INT 122
17425: PUSH
17426: LD_INT 142
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 101
17435: PUSH
17436: LD_INT 127
17438: PUSH
17439: EMPTY
17440: LIST
17441: LIST
17442: PUSH
17443: LD_INT 104
17445: PUSH
17446: LD_INT 104
17448: PUSH
17449: EMPTY
17450: LIST
17451: LIST
17452: PUSH
17453: LD_INT 46
17455: PUSH
17456: LD_INT 81
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: EMPTY
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17469: LD_ADDR_VAR 0 1
17473: PUSH
17474: LD_INT 1
17476: PPUSH
17477: LD_INT 4
17479: PPUSH
17480: CALL_OW 12
17484: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17485: LD_INT 10
17487: PPUSH
17488: LD_VAR 0 2
17492: PUSH
17493: LD_VAR 0 1
17497: ARRAY
17498: PUSH
17499: LD_INT 1
17501: ARRAY
17502: PPUSH
17503: LD_VAR 0 2
17507: PUSH
17508: LD_VAR 0 1
17512: ARRAY
17513: PUSH
17514: LD_INT 2
17516: ARRAY
17517: PPUSH
17518: CALL_OW 243
// end ; end_of_file
17522: PPOPN 2
17524: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17525: LD_INT 3
17527: PPUSH
17528: CALL_OW 301
17532: IFFALSE 17753
17534: GO 17536
17536: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
17537: LD_EXP 27
17541: PPUSH
17542: LD_INT 50
17544: PUSH
17545: EMPTY
17546: LIST
17547: PPUSH
17548: CALL_OW 72
17552: IFFALSE 17561
// wait ( 0 0$10 ) ;
17554: LD_INT 350
17556: PPUSH
17557: CALL_OW 67
// DialogueOn ;
17561: CALL_OW 6
// if sciCounter = 0 then
17565: LD_EXP 28
17569: PUSH
17570: LD_INT 0
17572: EQUAL
17573: IFFALSE 17601
// begin Say ( JMM , D7a-JMM-1 ) ;
17575: LD_EXP 1
17579: PPUSH
17580: LD_STRING D7a-JMM-1
17582: PPUSH
17583: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17587: LD_EXP 15
17591: PPUSH
17592: LD_STRING D7a-Pow-1
17594: PPUSH
17595: CALL_OW 94
// end else
17599: GO 17745
// if sciCounter < 6 then
17601: LD_EXP 28
17605: PUSH
17606: LD_INT 6
17608: LESS
17609: IFFALSE 17637
// begin Say ( JMM , D7b-JMM-1 ) ;
17611: LD_EXP 1
17615: PPUSH
17616: LD_STRING D7b-JMM-1
17618: PPUSH
17619: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17623: LD_EXP 15
17627: PPUSH
17628: LD_STRING D7b-Pow-1
17630: PPUSH
17631: CALL_OW 94
// end else
17635: GO 17745
// begin Say ( JMM , D7c-JMM-1 ) ;
17637: LD_EXP 1
17641: PPUSH
17642: LD_STRING D7c-JMM-1
17644: PPUSH
17645: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17649: LD_EXP 15
17653: PPUSH
17654: LD_STRING D7c-Pow-1
17656: PPUSH
17657: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17661: LD_EXP 1
17665: PPUSH
17666: LD_STRING D7d-JMM-1
17668: PPUSH
17669: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17673: LD_EXP 15
17677: PPUSH
17678: LD_STRING D7d-Pow-1
17680: PPUSH
17681: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17685: LD_EXP 1
17689: PPUSH
17690: LD_STRING D7d-JMM-2
17692: PPUSH
17693: CALL_OW 88
// if askSiberite = 1 then
17697: LD_EXP 25
17701: PUSH
17702: LD_INT 1
17704: EQUAL
17705: IFFALSE 17721
// Say ( JMM , D7d-JMM-2a ) else
17707: LD_EXP 1
17711: PPUSH
17712: LD_STRING D7d-JMM-2a
17714: PPUSH
17715: CALL_OW 88
17719: GO 17733
// SayRadio ( Powell , D7d-Pow-2 ) ;
17721: LD_EXP 15
17725: PPUSH
17726: LD_STRING D7d-Pow-2
17728: PPUSH
17729: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17733: LD_EXP 15
17737: PPUSH
17738: LD_STRING D7d-Pow-2a
17740: PPUSH
17741: CALL_OW 94
// end ; DialogueOff ;
17745: CALL_OW 7
// FinishMission ;
17749: CALL 17754 0 0
// end ;
17753: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17754: LD_INT 0
17756: PPUSH
17757: PPUSH
17758: PPUSH
17759: PPUSH
// m1 := false ;
17760: LD_ADDR_VAR 0 2
17764: PUSH
17765: LD_INT 0
17767: ST_TO_ADDR
// m2 := false ;
17768: LD_ADDR_VAR 0 3
17772: PUSH
17773: LD_INT 0
17775: ST_TO_ADDR
// m3 := false ;
17776: LD_ADDR_VAR 0 4
17780: PUSH
17781: LD_INT 0
17783: ST_TO_ADDR
// if not westPathUsed then
17784: LD_EXP 42
17788: NOT
17789: IFFALSE 17798
// SetAchievement ( ACH_PATH ) ;
17791: LD_STRING ACH_PATH
17793: PPUSH
17794: CALL_OW 543
// if not rocketBuilded then
17798: LD_EXP 44
17802: NOT
17803: IFFALSE 17819
// begin wait ( 3 ) ;
17805: LD_INT 3
17807: PPUSH
17808: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17812: LD_STRING ACH_ROCKET
17814: PPUSH
17815: CALL_OW 543
// end ; if tick <= 40 40$00 then
17819: LD_OWVAR 1
17823: PUSH
17824: LD_INT 84000
17826: LESSEQUAL
17827: IFFALSE 17843
// begin wait ( 3 ) ;
17829: LD_INT 3
17831: PPUSH
17832: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17836: LD_STRING ACH_ASPEED_12
17838: PPUSH
17839: CALL_OW 543
// end ; if teleportExplored = 1 then
17843: LD_EXP 26
17847: PUSH
17848: LD_INT 1
17850: EQUAL
17851: IFFALSE 17873
// begin m1 := true ;
17853: LD_ADDR_VAR 0 2
17857: PUSH
17858: LD_INT 1
17860: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17861: LD_STRING Teleport
17863: PPUSH
17864: LD_INT 1
17866: PPUSH
17867: CALL_OW 101
// end else
17871: GO 17884
// AddMedal ( Teleport , - 1 ) ;
17873: LD_STRING Teleport
17875: PPUSH
17876: LD_INT 1
17878: NEG
17879: PPUSH
17880: CALL_OW 101
// if sciCounter > 2 then
17884: LD_EXP 28
17888: PUSH
17889: LD_INT 2
17891: GREATER
17892: IFFALSE 17914
// begin m2 := true ;
17894: LD_ADDR_VAR 0 3
17898: PUSH
17899: LD_INT 1
17901: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17902: LD_STRING Materials
17904: PPUSH
17905: LD_INT 1
17907: PPUSH
17908: CALL_OW 101
// end else
17912: GO 17925
// AddMedal ( Materials , - 1 ) ;
17914: LD_STRING Materials
17916: PPUSH
17917: LD_INT 1
17919: NEG
17920: PPUSH
17921: CALL_OW 101
// if sciCounter >= 6 then
17925: LD_EXP 28
17929: PUSH
17930: LD_INT 6
17932: GREATEREQUAL
17933: IFFALSE 17965
// begin m3 := true ;
17935: LD_ADDR_VAR 0 4
17939: PUSH
17940: LD_INT 1
17942: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17943: LD_STRING Scientists
17945: PPUSH
17946: LD_INT 1
17948: PPUSH
17949: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17953: LD_INT 1
17955: PPUSH
17956: LD_STRING 12_SciDed_1
17958: PPUSH
17959: CALL_OW 39
// end else
17963: GO 17986
// begin AddMedal ( Scientists , - 1 ) ;
17965: LD_STRING Scientists
17967: PPUSH
17968: LD_INT 1
17970: NEG
17971: PPUSH
17972: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17976: LD_INT 0
17978: PPUSH
17979: LD_STRING 12_SciDed_1
17981: PPUSH
17982: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17986: LD_EXP 24
17990: PPUSH
17991: LD_STRING 12_MainDepositFake_1
17993: PPUSH
17994: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
17998: LD_VAR 0 2
18002: PUSH
18003: LD_VAR 0 3
18007: AND
18008: PUSH
18009: LD_VAR 0 4
18013: AND
18014: PUSH
18015: LD_OWVAR 67
18019: PUSH
18020: LD_INT 3
18022: GREATEREQUAL
18023: AND
18024: IFFALSE 18036
// SetAchievementEX ( ACH_AMER , 12 ) ;
18026: LD_STRING ACH_AMER
18028: PPUSH
18029: LD_INT 12
18031: PPUSH
18032: CALL_OW 564
// GiveMedals ( MAIN ) ;
18036: LD_STRING MAIN
18038: PPUSH
18039: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18043: LD_INT 22
18045: PUSH
18046: LD_INT 1
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 23
18055: PUSH
18056: LD_INT 1
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PUSH
18063: LD_INT 21
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 2
18075: PUSH
18076: LD_INT 25
18078: PUSH
18079: LD_INT 1
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 25
18088: PUSH
18089: LD_INT 2
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 25
18098: PUSH
18099: LD_INT 3
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 25
18108: PUSH
18109: LD_INT 4
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: LD_INT 25
18118: PUSH
18119: LD_INT 5
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: PUSH
18126: LD_INT 25
18128: PUSH
18129: LD_INT 8
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: PPUSH
18151: CALL_OW 69
18155: PPUSH
18156: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18160: LD_EXP 1
18164: PPUSH
18165: LD_EXP 39
18169: PUSH
18170: LD_STRING JMM
18172: STR
18173: PPUSH
18174: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18178: LD_EXP 7
18182: PPUSH
18183: LD_EXP 39
18187: PUSH
18188: LD_STRING Brown
18190: STR
18191: PPUSH
18192: CALL 12233 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18196: LD_EXP 3
18200: PPUSH
18201: LD_EXP 39
18205: PUSH
18206: LD_STRING Donaldson
18208: STR
18209: PPUSH
18210: CALL 12233 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18214: LD_EXP 4
18218: PPUSH
18219: LD_EXP 39
18223: PUSH
18224: LD_STRING Bobby
18226: STR
18227: PPUSH
18228: CALL 12233 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18232: LD_EXP 5
18236: PPUSH
18237: LD_EXP 39
18241: PUSH
18242: LD_STRING Cyrus
18244: STR
18245: PPUSH
18246: CALL 12233 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18250: LD_EXP 2
18254: PPUSH
18255: LD_EXP 39
18259: PUSH
18260: LD_STRING Lisa
18262: STR
18263: PPUSH
18264: CALL 12233 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18268: LD_EXP 12
18272: PPUSH
18273: LD_EXP 39
18277: PUSH
18278: LD_STRING Frank
18280: STR
18281: PPUSH
18282: CALL 12233 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18286: LD_EXP 13
18290: PPUSH
18291: LD_EXP 39
18295: PUSH
18296: LD_STRING Kikuchi
18298: STR
18299: PPUSH
18300: CALL 12233 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18304: LD_EXP 9
18308: PPUSH
18309: LD_EXP 39
18313: PUSH
18314: LD_STRING Houten
18316: STR
18317: PPUSH
18318: CALL 12233 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18322: LD_EXP 11
18326: PPUSH
18327: LD_EXP 39
18331: PUSH
18332: LD_STRING Gary
18334: STR
18335: PPUSH
18336: CALL 12233 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18340: LD_EXP 10
18344: PPUSH
18345: LD_EXP 39
18349: PUSH
18350: LD_STRING Cornell
18352: STR
18353: PPUSH
18354: CALL 12233 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18358: LD_EXP 6
18362: PPUSH
18363: LD_EXP 39
18367: PUSH
18368: LD_STRING Denis
18370: STR
18371: PPUSH
18372: CALL 12233 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18376: LD_EXP 8
18380: PPUSH
18381: LD_EXP 39
18385: PUSH
18386: LD_STRING Gladstone
18388: STR
18389: PPUSH
18390: CALL 12233 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18394: LD_INT 22
18396: PUSH
18397: LD_INT 1
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 23
18406: PUSH
18407: LD_INT 1
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 21
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 2
18426: PUSH
18427: LD_INT 25
18429: PUSH
18430: LD_INT 1
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 25
18439: PUSH
18440: LD_INT 2
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 25
18449: PUSH
18450: LD_INT 3
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: LD_INT 25
18459: PUSH
18460: LD_INT 4
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PUSH
18467: LD_INT 25
18469: PUSH
18470: LD_INT 5
18472: PUSH
18473: EMPTY
18474: LIST
18475: LIST
18476: PUSH
18477: LD_INT 25
18479: PUSH
18480: LD_INT 8
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: EMPTY
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: LIST
18500: LIST
18501: PPUSH
18502: CALL_OW 69
18506: PUSH
18507: LD_EXP 1
18511: PUSH
18512: LD_EXP 7
18516: PUSH
18517: LD_EXP 3
18521: PUSH
18522: LD_EXP 4
18526: PUSH
18527: LD_EXP 5
18531: PUSH
18532: LD_EXP 2
18536: PUSH
18537: LD_EXP 12
18541: PUSH
18542: LD_EXP 8
18546: PUSH
18547: LD_EXP 13
18551: PUSH
18552: LD_EXP 6
18556: PUSH
18557: LD_EXP 9
18561: PUSH
18562: LD_EXP 11
18566: PUSH
18567: LD_EXP 10
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: DIFF
18587: PPUSH
18588: LD_STRING 12_other_survivors
18590: PPUSH
18591: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18595: LD_INT 22
18597: PUSH
18598: LD_INT 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 23
18607: PUSH
18608: LD_INT 2
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: LD_INT 21
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 2
18627: PUSH
18628: LD_INT 25
18630: PUSH
18631: LD_INT 1
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 25
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 25
18650: PUSH
18651: LD_INT 3
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 25
18660: PUSH
18661: LD_INT 4
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 25
18670: PUSH
18671: LD_INT 5
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: LD_INT 25
18680: PUSH
18681: LD_INT 8
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: PUSH
18697: EMPTY
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: PPUSH
18703: CALL_OW 69
18707: PPUSH
18708: LD_STRING 12_kurt_squad
18710: PPUSH
18711: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18715: LD_EXP 14
18719: PPUSH
18720: LD_STRING 12_others
18722: PPUSH
18723: CALL_OW 38
// YouWin ;
18727: CALL_OW 103
// end ; end_of_file
18731: LD_VAR 0 1
18735: RET
// every 0 0$01 trigger ruAI do
18736: LD_EXP 34
18740: IFFALSE 19050
18742: GO 18744
18744: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18745: LD_INT 280
18747: PPUSH
18748: CALL_OW 67
// if cratesSpawned < 12 then
18752: LD_EXP 38
18756: PUSH
18757: LD_INT 12
18759: LESS
18760: IFFALSE 18812
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18762: LD_INT 105
18764: PPUSH
18765: LD_INT 350
18767: PPUSH
18768: CALL_OW 12
18772: PPUSH
18773: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18777: LD_INT 3
18779: PPUSH
18780: LD_INT 5
18782: PPUSH
18783: CALL_OW 12
18787: PPUSH
18788: LD_INT 21
18790: PPUSH
18791: LD_INT 1
18793: PPUSH
18794: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18798: LD_ADDR_EXP 38
18802: PUSH
18803: LD_EXP 38
18807: PUSH
18808: LD_INT 1
18810: PLUS
18811: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18812: LD_EXP 38
18816: PUSH
18817: LD_INT 12
18819: GREATEREQUAL
18820: PUSH
18821: LD_EXP 38
18825: PUSH
18826: LD_INT 32
18828: LESS
18829: AND
18830: IFFALSE 18882
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18832: LD_INT 420
18834: PPUSH
18835: LD_INT 700
18837: PPUSH
18838: CALL_OW 12
18842: PPUSH
18843: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18847: LD_INT 3
18849: PPUSH
18850: LD_INT 5
18852: PPUSH
18853: CALL_OW 12
18857: PPUSH
18858: LD_INT 21
18860: PPUSH
18861: LD_INT 1
18863: PPUSH
18864: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18868: LD_ADDR_EXP 38
18872: PUSH
18873: LD_EXP 38
18877: PUSH
18878: LD_INT 1
18880: PLUS
18881: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18882: LD_EXP 38
18886: PUSH
18887: LD_INT 32
18889: GREATEREQUAL
18890: IFFALSE 18964
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18892: LD_INT 21
18894: PPUSH
18895: CALL_OW 435
18899: PUSH
18900: LD_INT 14
18902: LESS
18903: IFFALSE 18914
// wait ( 0 0$10 ) else
18905: LD_INT 350
18907: PPUSH
18908: CALL_OW 67
18912: GO 18929
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18914: LD_INT 1750
18916: PPUSH
18917: LD_INT 3150
18919: PPUSH
18920: CALL_OW 12
18924: PPUSH
18925: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18929: LD_INT 2
18931: PPUSH
18932: LD_INT 5
18934: PPUSH
18935: CALL_OW 12
18939: PPUSH
18940: LD_INT 21
18942: PPUSH
18943: LD_INT 1
18945: PPUSH
18946: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18950: LD_ADDR_EXP 38
18954: PUSH
18955: LD_EXP 38
18959: PUSH
18960: LD_INT 1
18962: PLUS
18963: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18964: LD_EXP 38
18968: PUSH
18969: LD_INT 110
18971: GREATEREQUAL
18972: IFFALSE 19046
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18974: LD_INT 21
18976: PPUSH
18977: CALL_OW 435
18981: PUSH
18982: LD_INT 14
18984: LESS
18985: IFFALSE 18996
// wait ( 0 0$20 ) else
18987: LD_INT 700
18989: PPUSH
18990: CALL_OW 67
18994: GO 19011
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18996: LD_INT 2450
18998: PPUSH
18999: LD_INT 3850
19001: PPUSH
19002: CALL_OW 12
19006: PPUSH
19007: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
19011: LD_INT 1
19013: PPUSH
19014: LD_INT 5
19016: PPUSH
19017: CALL_OW 12
19021: PPUSH
19022: LD_INT 21
19024: PPUSH
19025: LD_INT 1
19027: PPUSH
19028: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19032: LD_ADDR_EXP 38
19036: PUSH
19037: LD_EXP 38
19041: PUSH
19042: LD_INT 1
19044: PLUS
19045: ST_TO_ADDR
// end ; until false ;
19046: LD_INT 0
19048: IFFALSE 18745
// end ; end_of_file end_of_file
19050: END
// export globalGameSaveCounter ; every 0 0$1 do
19051: GO 19053
19053: DISABLE
// begin enable ;
19054: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19055: LD_STRING updateTimer(
19057: PUSH
19058: LD_OWVAR 1
19062: STR
19063: PUSH
19064: LD_STRING );
19066: STR
19067: PPUSH
19068: CALL_OW 559
// end ;
19072: END
// every 0 0$1 do
19073: GO 19075
19075: DISABLE
// begin globalGameSaveCounter := 0 ;
19076: LD_ADDR_EXP 45
19080: PUSH
19081: LD_INT 0
19083: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19084: LD_STRING setGameSaveCounter(0)
19086: PPUSH
19087: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19091: LD_STRING initStreamRollete();
19093: PPUSH
19094: CALL_OW 559
// InitStreamMode ;
19098: CALL 20424 0 0
// DefineStreamItems ( false ) ;
19102: LD_INT 0
19104: PPUSH
19105: CALL 20888 0 1
// end ;
19109: END
// export function SOS_MapStart ( ) ; begin
19110: LD_INT 0
19112: PPUSH
// if streamModeActive then
19113: LD_EXP 46
19117: IFFALSE 19126
// DefineStreamItems ( true ) ;
19119: LD_INT 1
19121: PPUSH
19122: CALL 20888 0 1
// UpdateLuaVariables ( ) ;
19126: CALL 19143 0 0
// UpdateFactoryWaypoints ( ) ;
19130: CALL 33757 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19134: CALL 34014 0 0
// end ;
19138: LD_VAR 0 1
19142: RET
// function UpdateLuaVariables ( ) ; begin
19143: LD_INT 0
19145: PPUSH
// if globalGameSaveCounter then
19146: LD_EXP 45
19150: IFFALSE 19184
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19152: LD_ADDR_EXP 45
19156: PUSH
19157: LD_EXP 45
19161: PPUSH
19162: CALL 78810 0 1
19166: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19167: LD_STRING setGameSaveCounter(
19169: PUSH
19170: LD_EXP 45
19174: STR
19175: PUSH
19176: LD_STRING )
19178: STR
19179: PPUSH
19180: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19184: LD_STRING setGameDifficulty(
19186: PUSH
19187: LD_OWVAR 67
19191: STR
19192: PUSH
19193: LD_STRING )
19195: STR
19196: PPUSH
19197: CALL_OW 559
// end ;
19201: LD_VAR 0 1
19205: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19206: LD_INT 0
19208: PPUSH
// if p2 = stream_mode then
19209: LD_VAR 0 2
19213: PUSH
19214: LD_INT 100
19216: EQUAL
19217: IFFALSE 20220
// begin if not StreamModeActive then
19219: LD_EXP 46
19223: NOT
19224: IFFALSE 19234
// StreamModeActive := true ;
19226: LD_ADDR_EXP 46
19230: PUSH
19231: LD_INT 1
19233: ST_TO_ADDR
// if p3 = 0 then
19234: LD_VAR 0 3
19238: PUSH
19239: LD_INT 0
19241: EQUAL
19242: IFFALSE 19248
// InitStreamMode ;
19244: CALL 20424 0 0
// if p3 = 1 then
19248: LD_VAR 0 3
19252: PUSH
19253: LD_INT 1
19255: EQUAL
19256: IFFALSE 19266
// sRocket := true ;
19258: LD_ADDR_EXP 51
19262: PUSH
19263: LD_INT 1
19265: ST_TO_ADDR
// if p3 = 2 then
19266: LD_VAR 0 3
19270: PUSH
19271: LD_INT 2
19273: EQUAL
19274: IFFALSE 19284
// sSpeed := true ;
19276: LD_ADDR_EXP 50
19280: PUSH
19281: LD_INT 1
19283: ST_TO_ADDR
// if p3 = 3 then
19284: LD_VAR 0 3
19288: PUSH
19289: LD_INT 3
19291: EQUAL
19292: IFFALSE 19302
// sEngine := true ;
19294: LD_ADDR_EXP 52
19298: PUSH
19299: LD_INT 1
19301: ST_TO_ADDR
// if p3 = 4 then
19302: LD_VAR 0 3
19306: PUSH
19307: LD_INT 4
19309: EQUAL
19310: IFFALSE 19320
// sSpec := true ;
19312: LD_ADDR_EXP 49
19316: PUSH
19317: LD_INT 1
19319: ST_TO_ADDR
// if p3 = 5 then
19320: LD_VAR 0 3
19324: PUSH
19325: LD_INT 5
19327: EQUAL
19328: IFFALSE 19338
// sLevel := true ;
19330: LD_ADDR_EXP 53
19334: PUSH
19335: LD_INT 1
19337: ST_TO_ADDR
// if p3 = 6 then
19338: LD_VAR 0 3
19342: PUSH
19343: LD_INT 6
19345: EQUAL
19346: IFFALSE 19356
// sArmoury := true ;
19348: LD_ADDR_EXP 54
19352: PUSH
19353: LD_INT 1
19355: ST_TO_ADDR
// if p3 = 7 then
19356: LD_VAR 0 3
19360: PUSH
19361: LD_INT 7
19363: EQUAL
19364: IFFALSE 19374
// sRadar := true ;
19366: LD_ADDR_EXP 55
19370: PUSH
19371: LD_INT 1
19373: ST_TO_ADDR
// if p3 = 8 then
19374: LD_VAR 0 3
19378: PUSH
19379: LD_INT 8
19381: EQUAL
19382: IFFALSE 19392
// sBunker := true ;
19384: LD_ADDR_EXP 56
19388: PUSH
19389: LD_INT 1
19391: ST_TO_ADDR
// if p3 = 9 then
19392: LD_VAR 0 3
19396: PUSH
19397: LD_INT 9
19399: EQUAL
19400: IFFALSE 19410
// sHack := true ;
19402: LD_ADDR_EXP 57
19406: PUSH
19407: LD_INT 1
19409: ST_TO_ADDR
// if p3 = 10 then
19410: LD_VAR 0 3
19414: PUSH
19415: LD_INT 10
19417: EQUAL
19418: IFFALSE 19428
// sFire := true ;
19420: LD_ADDR_EXP 58
19424: PUSH
19425: LD_INT 1
19427: ST_TO_ADDR
// if p3 = 11 then
19428: LD_VAR 0 3
19432: PUSH
19433: LD_INT 11
19435: EQUAL
19436: IFFALSE 19446
// sRefresh := true ;
19438: LD_ADDR_EXP 59
19442: PUSH
19443: LD_INT 1
19445: ST_TO_ADDR
// if p3 = 12 then
19446: LD_VAR 0 3
19450: PUSH
19451: LD_INT 12
19453: EQUAL
19454: IFFALSE 19464
// sExp := true ;
19456: LD_ADDR_EXP 60
19460: PUSH
19461: LD_INT 1
19463: ST_TO_ADDR
// if p3 = 13 then
19464: LD_VAR 0 3
19468: PUSH
19469: LD_INT 13
19471: EQUAL
19472: IFFALSE 19482
// sDepot := true ;
19474: LD_ADDR_EXP 61
19478: PUSH
19479: LD_INT 1
19481: ST_TO_ADDR
// if p3 = 14 then
19482: LD_VAR 0 3
19486: PUSH
19487: LD_INT 14
19489: EQUAL
19490: IFFALSE 19500
// sFlag := true ;
19492: LD_ADDR_EXP 62
19496: PUSH
19497: LD_INT 1
19499: ST_TO_ADDR
// if p3 = 15 then
19500: LD_VAR 0 3
19504: PUSH
19505: LD_INT 15
19507: EQUAL
19508: IFFALSE 19518
// sKamikadze := true ;
19510: LD_ADDR_EXP 70
19514: PUSH
19515: LD_INT 1
19517: ST_TO_ADDR
// if p3 = 16 then
19518: LD_VAR 0 3
19522: PUSH
19523: LD_INT 16
19525: EQUAL
19526: IFFALSE 19536
// sTroll := true ;
19528: LD_ADDR_EXP 71
19532: PUSH
19533: LD_INT 1
19535: ST_TO_ADDR
// if p3 = 17 then
19536: LD_VAR 0 3
19540: PUSH
19541: LD_INT 17
19543: EQUAL
19544: IFFALSE 19554
// sSlow := true ;
19546: LD_ADDR_EXP 72
19550: PUSH
19551: LD_INT 1
19553: ST_TO_ADDR
// if p3 = 18 then
19554: LD_VAR 0 3
19558: PUSH
19559: LD_INT 18
19561: EQUAL
19562: IFFALSE 19572
// sLack := true ;
19564: LD_ADDR_EXP 73
19568: PUSH
19569: LD_INT 1
19571: ST_TO_ADDR
// if p3 = 19 then
19572: LD_VAR 0 3
19576: PUSH
19577: LD_INT 19
19579: EQUAL
19580: IFFALSE 19590
// sTank := true ;
19582: LD_ADDR_EXP 75
19586: PUSH
19587: LD_INT 1
19589: ST_TO_ADDR
// if p3 = 20 then
19590: LD_VAR 0 3
19594: PUSH
19595: LD_INT 20
19597: EQUAL
19598: IFFALSE 19608
// sRemote := true ;
19600: LD_ADDR_EXP 76
19604: PUSH
19605: LD_INT 1
19607: ST_TO_ADDR
// if p3 = 21 then
19608: LD_VAR 0 3
19612: PUSH
19613: LD_INT 21
19615: EQUAL
19616: IFFALSE 19626
// sPowell := true ;
19618: LD_ADDR_EXP 77
19622: PUSH
19623: LD_INT 1
19625: ST_TO_ADDR
// if p3 = 22 then
19626: LD_VAR 0 3
19630: PUSH
19631: LD_INT 22
19633: EQUAL
19634: IFFALSE 19644
// sTeleport := true ;
19636: LD_ADDR_EXP 80
19640: PUSH
19641: LD_INT 1
19643: ST_TO_ADDR
// if p3 = 23 then
19644: LD_VAR 0 3
19648: PUSH
19649: LD_INT 23
19651: EQUAL
19652: IFFALSE 19662
// sOilTower := true ;
19654: LD_ADDR_EXP 82
19658: PUSH
19659: LD_INT 1
19661: ST_TO_ADDR
// if p3 = 24 then
19662: LD_VAR 0 3
19666: PUSH
19667: LD_INT 24
19669: EQUAL
19670: IFFALSE 19680
// sShovel := true ;
19672: LD_ADDR_EXP 83
19676: PUSH
19677: LD_INT 1
19679: ST_TO_ADDR
// if p3 = 25 then
19680: LD_VAR 0 3
19684: PUSH
19685: LD_INT 25
19687: EQUAL
19688: IFFALSE 19698
// sSheik := true ;
19690: LD_ADDR_EXP 84
19694: PUSH
19695: LD_INT 1
19697: ST_TO_ADDR
// if p3 = 26 then
19698: LD_VAR 0 3
19702: PUSH
19703: LD_INT 26
19705: EQUAL
19706: IFFALSE 19716
// sEarthquake := true ;
19708: LD_ADDR_EXP 86
19712: PUSH
19713: LD_INT 1
19715: ST_TO_ADDR
// if p3 = 27 then
19716: LD_VAR 0 3
19720: PUSH
19721: LD_INT 27
19723: EQUAL
19724: IFFALSE 19734
// sAI := true ;
19726: LD_ADDR_EXP 87
19730: PUSH
19731: LD_INT 1
19733: ST_TO_ADDR
// if p3 = 28 then
19734: LD_VAR 0 3
19738: PUSH
19739: LD_INT 28
19741: EQUAL
19742: IFFALSE 19752
// sCargo := true ;
19744: LD_ADDR_EXP 90
19748: PUSH
19749: LD_INT 1
19751: ST_TO_ADDR
// if p3 = 29 then
19752: LD_VAR 0 3
19756: PUSH
19757: LD_INT 29
19759: EQUAL
19760: IFFALSE 19770
// sDLaser := true ;
19762: LD_ADDR_EXP 91
19766: PUSH
19767: LD_INT 1
19769: ST_TO_ADDR
// if p3 = 30 then
19770: LD_VAR 0 3
19774: PUSH
19775: LD_INT 30
19777: EQUAL
19778: IFFALSE 19788
// sExchange := true ;
19780: LD_ADDR_EXP 92
19784: PUSH
19785: LD_INT 1
19787: ST_TO_ADDR
// if p3 = 31 then
19788: LD_VAR 0 3
19792: PUSH
19793: LD_INT 31
19795: EQUAL
19796: IFFALSE 19806
// sFac := true ;
19798: LD_ADDR_EXP 93
19802: PUSH
19803: LD_INT 1
19805: ST_TO_ADDR
// if p3 = 32 then
19806: LD_VAR 0 3
19810: PUSH
19811: LD_INT 32
19813: EQUAL
19814: IFFALSE 19824
// sPower := true ;
19816: LD_ADDR_EXP 94
19820: PUSH
19821: LD_INT 1
19823: ST_TO_ADDR
// if p3 = 33 then
19824: LD_VAR 0 3
19828: PUSH
19829: LD_INT 33
19831: EQUAL
19832: IFFALSE 19842
// sRandom := true ;
19834: LD_ADDR_EXP 95
19838: PUSH
19839: LD_INT 1
19841: ST_TO_ADDR
// if p3 = 34 then
19842: LD_VAR 0 3
19846: PUSH
19847: LD_INT 34
19849: EQUAL
19850: IFFALSE 19860
// sShield := true ;
19852: LD_ADDR_EXP 96
19856: PUSH
19857: LD_INT 1
19859: ST_TO_ADDR
// if p3 = 35 then
19860: LD_VAR 0 3
19864: PUSH
19865: LD_INT 35
19867: EQUAL
19868: IFFALSE 19878
// sTime := true ;
19870: LD_ADDR_EXP 97
19874: PUSH
19875: LD_INT 1
19877: ST_TO_ADDR
// if p3 = 36 then
19878: LD_VAR 0 3
19882: PUSH
19883: LD_INT 36
19885: EQUAL
19886: IFFALSE 19896
// sTools := true ;
19888: LD_ADDR_EXP 98
19892: PUSH
19893: LD_INT 1
19895: ST_TO_ADDR
// if p3 = 101 then
19896: LD_VAR 0 3
19900: PUSH
19901: LD_INT 101
19903: EQUAL
19904: IFFALSE 19914
// sSold := true ;
19906: LD_ADDR_EXP 63
19910: PUSH
19911: LD_INT 1
19913: ST_TO_ADDR
// if p3 = 102 then
19914: LD_VAR 0 3
19918: PUSH
19919: LD_INT 102
19921: EQUAL
19922: IFFALSE 19932
// sDiff := true ;
19924: LD_ADDR_EXP 64
19928: PUSH
19929: LD_INT 1
19931: ST_TO_ADDR
// if p3 = 103 then
19932: LD_VAR 0 3
19936: PUSH
19937: LD_INT 103
19939: EQUAL
19940: IFFALSE 19950
// sFog := true ;
19942: LD_ADDR_EXP 67
19946: PUSH
19947: LD_INT 1
19949: ST_TO_ADDR
// if p3 = 104 then
19950: LD_VAR 0 3
19954: PUSH
19955: LD_INT 104
19957: EQUAL
19958: IFFALSE 19968
// sReset := true ;
19960: LD_ADDR_EXP 68
19964: PUSH
19965: LD_INT 1
19967: ST_TO_ADDR
// if p3 = 105 then
19968: LD_VAR 0 3
19972: PUSH
19973: LD_INT 105
19975: EQUAL
19976: IFFALSE 19986
// sSun := true ;
19978: LD_ADDR_EXP 69
19982: PUSH
19983: LD_INT 1
19985: ST_TO_ADDR
// if p3 = 106 then
19986: LD_VAR 0 3
19990: PUSH
19991: LD_INT 106
19993: EQUAL
19994: IFFALSE 20004
// sTiger := true ;
19996: LD_ADDR_EXP 65
20000: PUSH
20001: LD_INT 1
20003: ST_TO_ADDR
// if p3 = 107 then
20004: LD_VAR 0 3
20008: PUSH
20009: LD_INT 107
20011: EQUAL
20012: IFFALSE 20022
// sBomb := true ;
20014: LD_ADDR_EXP 66
20018: PUSH
20019: LD_INT 1
20021: ST_TO_ADDR
// if p3 = 108 then
20022: LD_VAR 0 3
20026: PUSH
20027: LD_INT 108
20029: EQUAL
20030: IFFALSE 20040
// sWound := true ;
20032: LD_ADDR_EXP 74
20036: PUSH
20037: LD_INT 1
20039: ST_TO_ADDR
// if p3 = 109 then
20040: LD_VAR 0 3
20044: PUSH
20045: LD_INT 109
20047: EQUAL
20048: IFFALSE 20058
// sBetray := true ;
20050: LD_ADDR_EXP 78
20054: PUSH
20055: LD_INT 1
20057: ST_TO_ADDR
// if p3 = 110 then
20058: LD_VAR 0 3
20062: PUSH
20063: LD_INT 110
20065: EQUAL
20066: IFFALSE 20076
// sContamin := true ;
20068: LD_ADDR_EXP 79
20072: PUSH
20073: LD_INT 1
20075: ST_TO_ADDR
// if p3 = 111 then
20076: LD_VAR 0 3
20080: PUSH
20081: LD_INT 111
20083: EQUAL
20084: IFFALSE 20094
// sOil := true ;
20086: LD_ADDR_EXP 81
20090: PUSH
20091: LD_INT 1
20093: ST_TO_ADDR
// if p3 = 112 then
20094: LD_VAR 0 3
20098: PUSH
20099: LD_INT 112
20101: EQUAL
20102: IFFALSE 20112
// sStu := true ;
20104: LD_ADDR_EXP 85
20108: PUSH
20109: LD_INT 1
20111: ST_TO_ADDR
// if p3 = 113 then
20112: LD_VAR 0 3
20116: PUSH
20117: LD_INT 113
20119: EQUAL
20120: IFFALSE 20130
// sBazooka := true ;
20122: LD_ADDR_EXP 88
20126: PUSH
20127: LD_INT 1
20129: ST_TO_ADDR
// if p3 = 114 then
20130: LD_VAR 0 3
20134: PUSH
20135: LD_INT 114
20137: EQUAL
20138: IFFALSE 20148
// sMortar := true ;
20140: LD_ADDR_EXP 89
20144: PUSH
20145: LD_INT 1
20147: ST_TO_ADDR
// if p3 = 115 then
20148: LD_VAR 0 3
20152: PUSH
20153: LD_INT 115
20155: EQUAL
20156: IFFALSE 20166
// sRanger := true ;
20158: LD_ADDR_EXP 99
20162: PUSH
20163: LD_INT 1
20165: ST_TO_ADDR
// if p3 = 116 then
20166: LD_VAR 0 3
20170: PUSH
20171: LD_INT 116
20173: EQUAL
20174: IFFALSE 20184
// sComputer := true ;
20176: LD_ADDR_EXP 100
20180: PUSH
20181: LD_INT 1
20183: ST_TO_ADDR
// if p3 = 117 then
20184: LD_VAR 0 3
20188: PUSH
20189: LD_INT 117
20191: EQUAL
20192: IFFALSE 20202
// s30 := true ;
20194: LD_ADDR_EXP 101
20198: PUSH
20199: LD_INT 1
20201: ST_TO_ADDR
// if p3 = 118 then
20202: LD_VAR 0 3
20206: PUSH
20207: LD_INT 118
20209: EQUAL
20210: IFFALSE 20220
// s60 := true ;
20212: LD_ADDR_EXP 102
20216: PUSH
20217: LD_INT 1
20219: ST_TO_ADDR
// end ; if p2 = hack_mode then
20220: LD_VAR 0 2
20224: PUSH
20225: LD_INT 101
20227: EQUAL
20228: IFFALSE 20356
// begin case p3 of 1 :
20230: LD_VAR 0 3
20234: PUSH
20235: LD_INT 1
20237: DOUBLE
20238: EQUAL
20239: IFTRUE 20243
20241: GO 20250
20243: POP
// hHackUnlimitedResources ; 2 :
20244: CALL 32503 0 0
20248: GO 20356
20250: LD_INT 2
20252: DOUBLE
20253: EQUAL
20254: IFTRUE 20258
20256: GO 20265
20258: POP
// hHackSetLevel10 ; 3 :
20259: CALL 32636 0 0
20263: GO 20356
20265: LD_INT 3
20267: DOUBLE
20268: EQUAL
20269: IFTRUE 20273
20271: GO 20280
20273: POP
// hHackSetLevel10YourUnits ; 4 :
20274: CALL 32721 0 0
20278: GO 20356
20280: LD_INT 4
20282: DOUBLE
20283: EQUAL
20284: IFTRUE 20288
20286: GO 20295
20288: POP
// hHackInvincible ; 5 :
20289: CALL 33169 0 0
20293: GO 20356
20295: LD_INT 5
20297: DOUBLE
20298: EQUAL
20299: IFTRUE 20303
20301: GO 20310
20303: POP
// hHackInvisible ; 6 :
20304: CALL 33280 0 0
20308: GO 20356
20310: LD_INT 6
20312: DOUBLE
20313: EQUAL
20314: IFTRUE 20318
20316: GO 20325
20318: POP
// hHackChangeYourSide ; 7 :
20319: CALL 33337 0 0
20323: GO 20356
20325: LD_INT 7
20327: DOUBLE
20328: EQUAL
20329: IFTRUE 20333
20331: GO 20340
20333: POP
// hHackChangeUnitSide ; 8 :
20334: CALL 33379 0 0
20338: GO 20356
20340: LD_INT 8
20342: DOUBLE
20343: EQUAL
20344: IFTRUE 20348
20346: GO 20355
20348: POP
// hHackFog ; end ;
20349: CALL 33480 0 0
20353: GO 20356
20355: POP
// end ; if p2 = game_save_mode then
20356: LD_VAR 0 2
20360: PUSH
20361: LD_INT 102
20363: EQUAL
20364: IFFALSE 20419
// begin if p3 = 1 then
20366: LD_VAR 0 3
20370: PUSH
20371: LD_INT 1
20373: EQUAL
20374: IFFALSE 20386
// globalGameSaveCounter := p4 ;
20376: LD_ADDR_EXP 45
20380: PUSH
20381: LD_VAR 0 4
20385: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20386: LD_VAR 0 3
20390: PUSH
20391: LD_INT 2
20393: EQUAL
20394: PUSH
20395: LD_EXP 45
20399: AND
20400: IFFALSE 20419
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20402: LD_STRING setGameSaveCounter(
20404: PUSH
20405: LD_EXP 45
20409: STR
20410: PUSH
20411: LD_STRING )
20413: STR
20414: PPUSH
20415: CALL_OW 559
// end ; end ;
20419: LD_VAR 0 7
20423: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20424: LD_INT 0
20426: PPUSH
// streamModeActive := false ;
20427: LD_ADDR_EXP 46
20431: PUSH
20432: LD_INT 0
20434: ST_TO_ADDR
// normalCounter := 36 ;
20435: LD_ADDR_EXP 47
20439: PUSH
20440: LD_INT 36
20442: ST_TO_ADDR
// hardcoreCounter := 18 ;
20443: LD_ADDR_EXP 48
20447: PUSH
20448: LD_INT 18
20450: ST_TO_ADDR
// sRocket := false ;
20451: LD_ADDR_EXP 51
20455: PUSH
20456: LD_INT 0
20458: ST_TO_ADDR
// sSpeed := false ;
20459: LD_ADDR_EXP 50
20463: PUSH
20464: LD_INT 0
20466: ST_TO_ADDR
// sEngine := false ;
20467: LD_ADDR_EXP 52
20471: PUSH
20472: LD_INT 0
20474: ST_TO_ADDR
// sSpec := false ;
20475: LD_ADDR_EXP 49
20479: PUSH
20480: LD_INT 0
20482: ST_TO_ADDR
// sLevel := false ;
20483: LD_ADDR_EXP 53
20487: PUSH
20488: LD_INT 0
20490: ST_TO_ADDR
// sArmoury := false ;
20491: LD_ADDR_EXP 54
20495: PUSH
20496: LD_INT 0
20498: ST_TO_ADDR
// sRadar := false ;
20499: LD_ADDR_EXP 55
20503: PUSH
20504: LD_INT 0
20506: ST_TO_ADDR
// sBunker := false ;
20507: LD_ADDR_EXP 56
20511: PUSH
20512: LD_INT 0
20514: ST_TO_ADDR
// sHack := false ;
20515: LD_ADDR_EXP 57
20519: PUSH
20520: LD_INT 0
20522: ST_TO_ADDR
// sFire := false ;
20523: LD_ADDR_EXP 58
20527: PUSH
20528: LD_INT 0
20530: ST_TO_ADDR
// sRefresh := false ;
20531: LD_ADDR_EXP 59
20535: PUSH
20536: LD_INT 0
20538: ST_TO_ADDR
// sExp := false ;
20539: LD_ADDR_EXP 60
20543: PUSH
20544: LD_INT 0
20546: ST_TO_ADDR
// sDepot := false ;
20547: LD_ADDR_EXP 61
20551: PUSH
20552: LD_INT 0
20554: ST_TO_ADDR
// sFlag := false ;
20555: LD_ADDR_EXP 62
20559: PUSH
20560: LD_INT 0
20562: ST_TO_ADDR
// sKamikadze := false ;
20563: LD_ADDR_EXP 70
20567: PUSH
20568: LD_INT 0
20570: ST_TO_ADDR
// sTroll := false ;
20571: LD_ADDR_EXP 71
20575: PUSH
20576: LD_INT 0
20578: ST_TO_ADDR
// sSlow := false ;
20579: LD_ADDR_EXP 72
20583: PUSH
20584: LD_INT 0
20586: ST_TO_ADDR
// sLack := false ;
20587: LD_ADDR_EXP 73
20591: PUSH
20592: LD_INT 0
20594: ST_TO_ADDR
// sTank := false ;
20595: LD_ADDR_EXP 75
20599: PUSH
20600: LD_INT 0
20602: ST_TO_ADDR
// sRemote := false ;
20603: LD_ADDR_EXP 76
20607: PUSH
20608: LD_INT 0
20610: ST_TO_ADDR
// sPowell := false ;
20611: LD_ADDR_EXP 77
20615: PUSH
20616: LD_INT 0
20618: ST_TO_ADDR
// sTeleport := false ;
20619: LD_ADDR_EXP 80
20623: PUSH
20624: LD_INT 0
20626: ST_TO_ADDR
// sOilTower := false ;
20627: LD_ADDR_EXP 82
20631: PUSH
20632: LD_INT 0
20634: ST_TO_ADDR
// sShovel := false ;
20635: LD_ADDR_EXP 83
20639: PUSH
20640: LD_INT 0
20642: ST_TO_ADDR
// sSheik := false ;
20643: LD_ADDR_EXP 84
20647: PUSH
20648: LD_INT 0
20650: ST_TO_ADDR
// sEarthquake := false ;
20651: LD_ADDR_EXP 86
20655: PUSH
20656: LD_INT 0
20658: ST_TO_ADDR
// sAI := false ;
20659: LD_ADDR_EXP 87
20663: PUSH
20664: LD_INT 0
20666: ST_TO_ADDR
// sCargo := false ;
20667: LD_ADDR_EXP 90
20671: PUSH
20672: LD_INT 0
20674: ST_TO_ADDR
// sDLaser := false ;
20675: LD_ADDR_EXP 91
20679: PUSH
20680: LD_INT 0
20682: ST_TO_ADDR
// sExchange := false ;
20683: LD_ADDR_EXP 92
20687: PUSH
20688: LD_INT 0
20690: ST_TO_ADDR
// sFac := false ;
20691: LD_ADDR_EXP 93
20695: PUSH
20696: LD_INT 0
20698: ST_TO_ADDR
// sPower := false ;
20699: LD_ADDR_EXP 94
20703: PUSH
20704: LD_INT 0
20706: ST_TO_ADDR
// sRandom := false ;
20707: LD_ADDR_EXP 95
20711: PUSH
20712: LD_INT 0
20714: ST_TO_ADDR
// sShield := false ;
20715: LD_ADDR_EXP 96
20719: PUSH
20720: LD_INT 0
20722: ST_TO_ADDR
// sTime := false ;
20723: LD_ADDR_EXP 97
20727: PUSH
20728: LD_INT 0
20730: ST_TO_ADDR
// sTools := false ;
20731: LD_ADDR_EXP 98
20735: PUSH
20736: LD_INT 0
20738: ST_TO_ADDR
// sSold := false ;
20739: LD_ADDR_EXP 63
20743: PUSH
20744: LD_INT 0
20746: ST_TO_ADDR
// sDiff := false ;
20747: LD_ADDR_EXP 64
20751: PUSH
20752: LD_INT 0
20754: ST_TO_ADDR
// sFog := false ;
20755: LD_ADDR_EXP 67
20759: PUSH
20760: LD_INT 0
20762: ST_TO_ADDR
// sReset := false ;
20763: LD_ADDR_EXP 68
20767: PUSH
20768: LD_INT 0
20770: ST_TO_ADDR
// sSun := false ;
20771: LD_ADDR_EXP 69
20775: PUSH
20776: LD_INT 0
20778: ST_TO_ADDR
// sTiger := false ;
20779: LD_ADDR_EXP 65
20783: PUSH
20784: LD_INT 0
20786: ST_TO_ADDR
// sBomb := false ;
20787: LD_ADDR_EXP 66
20791: PUSH
20792: LD_INT 0
20794: ST_TO_ADDR
// sWound := false ;
20795: LD_ADDR_EXP 74
20799: PUSH
20800: LD_INT 0
20802: ST_TO_ADDR
// sBetray := false ;
20803: LD_ADDR_EXP 78
20807: PUSH
20808: LD_INT 0
20810: ST_TO_ADDR
// sContamin := false ;
20811: LD_ADDR_EXP 79
20815: PUSH
20816: LD_INT 0
20818: ST_TO_ADDR
// sOil := false ;
20819: LD_ADDR_EXP 81
20823: PUSH
20824: LD_INT 0
20826: ST_TO_ADDR
// sStu := false ;
20827: LD_ADDR_EXP 85
20831: PUSH
20832: LD_INT 0
20834: ST_TO_ADDR
// sBazooka := false ;
20835: LD_ADDR_EXP 88
20839: PUSH
20840: LD_INT 0
20842: ST_TO_ADDR
// sMortar := false ;
20843: LD_ADDR_EXP 89
20847: PUSH
20848: LD_INT 0
20850: ST_TO_ADDR
// sRanger := false ;
20851: LD_ADDR_EXP 99
20855: PUSH
20856: LD_INT 0
20858: ST_TO_ADDR
// sComputer := false ;
20859: LD_ADDR_EXP 100
20863: PUSH
20864: LD_INT 0
20866: ST_TO_ADDR
// s30 := false ;
20867: LD_ADDR_EXP 101
20871: PUSH
20872: LD_INT 0
20874: ST_TO_ADDR
// s60 := false ;
20875: LD_ADDR_EXP 102
20879: PUSH
20880: LD_INT 0
20882: ST_TO_ADDR
// end ;
20883: LD_VAR 0 1
20887: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20888: LD_INT 0
20890: PPUSH
20891: PPUSH
20892: PPUSH
20893: PPUSH
20894: PPUSH
20895: PPUSH
20896: PPUSH
// result := [ ] ;
20897: LD_ADDR_VAR 0 2
20901: PUSH
20902: EMPTY
20903: ST_TO_ADDR
// if campaign_id = 1 then
20904: LD_OWVAR 69
20908: PUSH
20909: LD_INT 1
20911: EQUAL
20912: IFFALSE 24078
// begin case mission_number of 1 :
20914: LD_OWVAR 70
20918: PUSH
20919: LD_INT 1
20921: DOUBLE
20922: EQUAL
20923: IFTRUE 20927
20925: GO 21003
20927: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20928: LD_ADDR_VAR 0 2
20932: PUSH
20933: LD_INT 2
20935: PUSH
20936: LD_INT 4
20938: PUSH
20939: LD_INT 11
20941: PUSH
20942: LD_INT 12
20944: PUSH
20945: LD_INT 15
20947: PUSH
20948: LD_INT 16
20950: PUSH
20951: LD_INT 22
20953: PUSH
20954: LD_INT 23
20956: PUSH
20957: LD_INT 26
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 101
20973: PUSH
20974: LD_INT 102
20976: PUSH
20977: LD_INT 106
20979: PUSH
20980: LD_INT 116
20982: PUSH
20983: LD_INT 117
20985: PUSH
20986: LD_INT 118
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: ST_TO_ADDR
21001: GO 24076
21003: LD_INT 2
21005: DOUBLE
21006: EQUAL
21007: IFTRUE 21011
21009: GO 21095
21011: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21012: LD_ADDR_VAR 0 2
21016: PUSH
21017: LD_INT 2
21019: PUSH
21020: LD_INT 4
21022: PUSH
21023: LD_INT 11
21025: PUSH
21026: LD_INT 12
21028: PUSH
21029: LD_INT 15
21031: PUSH
21032: LD_INT 16
21034: PUSH
21035: LD_INT 22
21037: PUSH
21038: LD_INT 23
21040: PUSH
21041: LD_INT 26
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: LIST
21052: LIST
21053: LIST
21054: PUSH
21055: LD_INT 101
21057: PUSH
21058: LD_INT 102
21060: PUSH
21061: LD_INT 105
21063: PUSH
21064: LD_INT 106
21066: PUSH
21067: LD_INT 108
21069: PUSH
21070: LD_INT 116
21072: PUSH
21073: LD_INT 117
21075: PUSH
21076: LD_INT 118
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: LIST
21083: LIST
21084: LIST
21085: LIST
21086: LIST
21087: LIST
21088: PUSH
21089: EMPTY
21090: LIST
21091: LIST
21092: ST_TO_ADDR
21093: GO 24076
21095: LD_INT 3
21097: DOUBLE
21098: EQUAL
21099: IFTRUE 21103
21101: GO 21191
21103: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21104: LD_ADDR_VAR 0 2
21108: PUSH
21109: LD_INT 2
21111: PUSH
21112: LD_INT 4
21114: PUSH
21115: LD_INT 5
21117: PUSH
21118: LD_INT 11
21120: PUSH
21121: LD_INT 12
21123: PUSH
21124: LD_INT 15
21126: PUSH
21127: LD_INT 16
21129: PUSH
21130: LD_INT 22
21132: PUSH
21133: LD_INT 26
21135: PUSH
21136: LD_INT 36
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: LIST
21143: LIST
21144: LIST
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 101
21153: PUSH
21154: LD_INT 102
21156: PUSH
21157: LD_INT 105
21159: PUSH
21160: LD_INT 106
21162: PUSH
21163: LD_INT 108
21165: PUSH
21166: LD_INT 116
21168: PUSH
21169: LD_INT 117
21171: PUSH
21172: LD_INT 118
21174: PUSH
21175: EMPTY
21176: LIST
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: LIST
21184: PUSH
21185: EMPTY
21186: LIST
21187: LIST
21188: ST_TO_ADDR
21189: GO 24076
21191: LD_INT 4
21193: DOUBLE
21194: EQUAL
21195: IFTRUE 21199
21197: GO 21295
21199: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21200: LD_ADDR_VAR 0 2
21204: PUSH
21205: LD_INT 2
21207: PUSH
21208: LD_INT 4
21210: PUSH
21211: LD_INT 5
21213: PUSH
21214: LD_INT 8
21216: PUSH
21217: LD_INT 11
21219: PUSH
21220: LD_INT 12
21222: PUSH
21223: LD_INT 15
21225: PUSH
21226: LD_INT 16
21228: PUSH
21229: LD_INT 22
21231: PUSH
21232: LD_INT 23
21234: PUSH
21235: LD_INT 26
21237: PUSH
21238: LD_INT 36
21240: PUSH
21241: EMPTY
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: PUSH
21255: LD_INT 101
21257: PUSH
21258: LD_INT 102
21260: PUSH
21261: LD_INT 105
21263: PUSH
21264: LD_INT 106
21266: PUSH
21267: LD_INT 108
21269: PUSH
21270: LD_INT 116
21272: PUSH
21273: LD_INT 117
21275: PUSH
21276: LD_INT 118
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: LIST
21283: LIST
21284: LIST
21285: LIST
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: ST_TO_ADDR
21293: GO 24076
21295: LD_INT 5
21297: DOUBLE
21298: EQUAL
21299: IFTRUE 21303
21301: GO 21415
21303: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21304: LD_ADDR_VAR 0 2
21308: PUSH
21309: LD_INT 2
21311: PUSH
21312: LD_INT 4
21314: PUSH
21315: LD_INT 5
21317: PUSH
21318: LD_INT 6
21320: PUSH
21321: LD_INT 8
21323: PUSH
21324: LD_INT 11
21326: PUSH
21327: LD_INT 12
21329: PUSH
21330: LD_INT 15
21332: PUSH
21333: LD_INT 16
21335: PUSH
21336: LD_INT 22
21338: PUSH
21339: LD_INT 23
21341: PUSH
21342: LD_INT 25
21344: PUSH
21345: LD_INT 26
21347: PUSH
21348: LD_INT 36
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 101
21369: PUSH
21370: LD_INT 102
21372: PUSH
21373: LD_INT 105
21375: PUSH
21376: LD_INT 106
21378: PUSH
21379: LD_INT 108
21381: PUSH
21382: LD_INT 109
21384: PUSH
21385: LD_INT 112
21387: PUSH
21388: LD_INT 116
21390: PUSH
21391: LD_INT 117
21393: PUSH
21394: LD_INT 118
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: LIST
21403: LIST
21404: LIST
21405: LIST
21406: LIST
21407: LIST
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: ST_TO_ADDR
21413: GO 24076
21415: LD_INT 6
21417: DOUBLE
21418: EQUAL
21419: IFTRUE 21423
21421: GO 21555
21423: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21424: LD_ADDR_VAR 0 2
21428: PUSH
21429: LD_INT 2
21431: PUSH
21432: LD_INT 4
21434: PUSH
21435: LD_INT 5
21437: PUSH
21438: LD_INT 6
21440: PUSH
21441: LD_INT 8
21443: PUSH
21444: LD_INT 11
21446: PUSH
21447: LD_INT 12
21449: PUSH
21450: LD_INT 15
21452: PUSH
21453: LD_INT 16
21455: PUSH
21456: LD_INT 20
21458: PUSH
21459: LD_INT 21
21461: PUSH
21462: LD_INT 22
21464: PUSH
21465: LD_INT 23
21467: PUSH
21468: LD_INT 25
21470: PUSH
21471: LD_INT 26
21473: PUSH
21474: LD_INT 30
21476: PUSH
21477: LD_INT 31
21479: PUSH
21480: LD_INT 32
21482: PUSH
21483: LD_INT 36
21485: PUSH
21486: EMPTY
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: LIST
21502: LIST
21503: LIST
21504: LIST
21505: LIST
21506: PUSH
21507: LD_INT 101
21509: PUSH
21510: LD_INT 102
21512: PUSH
21513: LD_INT 105
21515: PUSH
21516: LD_INT 106
21518: PUSH
21519: LD_INT 108
21521: PUSH
21522: LD_INT 109
21524: PUSH
21525: LD_INT 112
21527: PUSH
21528: LD_INT 116
21530: PUSH
21531: LD_INT 117
21533: PUSH
21534: LD_INT 118
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: ST_TO_ADDR
21553: GO 24076
21555: LD_INT 7
21557: DOUBLE
21558: EQUAL
21559: IFTRUE 21563
21561: GO 21675
21563: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21564: LD_ADDR_VAR 0 2
21568: PUSH
21569: LD_INT 2
21571: PUSH
21572: LD_INT 4
21574: PUSH
21575: LD_INT 5
21577: PUSH
21578: LD_INT 7
21580: PUSH
21581: LD_INT 11
21583: PUSH
21584: LD_INT 12
21586: PUSH
21587: LD_INT 15
21589: PUSH
21590: LD_INT 16
21592: PUSH
21593: LD_INT 20
21595: PUSH
21596: LD_INT 21
21598: PUSH
21599: LD_INT 22
21601: PUSH
21602: LD_INT 23
21604: PUSH
21605: LD_INT 25
21607: PUSH
21608: LD_INT 26
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: PUSH
21627: LD_INT 101
21629: PUSH
21630: LD_INT 102
21632: PUSH
21633: LD_INT 103
21635: PUSH
21636: LD_INT 105
21638: PUSH
21639: LD_INT 106
21641: PUSH
21642: LD_INT 108
21644: PUSH
21645: LD_INT 112
21647: PUSH
21648: LD_INT 116
21650: PUSH
21651: LD_INT 117
21653: PUSH
21654: LD_INT 118
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: PUSH
21669: EMPTY
21670: LIST
21671: LIST
21672: ST_TO_ADDR
21673: GO 24076
21675: LD_INT 8
21677: DOUBLE
21678: EQUAL
21679: IFTRUE 21683
21681: GO 21823
21683: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21684: LD_ADDR_VAR 0 2
21688: PUSH
21689: LD_INT 2
21691: PUSH
21692: LD_INT 4
21694: PUSH
21695: LD_INT 5
21697: PUSH
21698: LD_INT 6
21700: PUSH
21701: LD_INT 7
21703: PUSH
21704: LD_INT 8
21706: PUSH
21707: LD_INT 11
21709: PUSH
21710: LD_INT 12
21712: PUSH
21713: LD_INT 15
21715: PUSH
21716: LD_INT 16
21718: PUSH
21719: LD_INT 20
21721: PUSH
21722: LD_INT 21
21724: PUSH
21725: LD_INT 22
21727: PUSH
21728: LD_INT 23
21730: PUSH
21731: LD_INT 25
21733: PUSH
21734: LD_INT 26
21736: PUSH
21737: LD_INT 30
21739: PUSH
21740: LD_INT 31
21742: PUSH
21743: LD_INT 32
21745: PUSH
21746: LD_INT 36
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: PUSH
21771: LD_INT 101
21773: PUSH
21774: LD_INT 102
21776: PUSH
21777: LD_INT 103
21779: PUSH
21780: LD_INT 105
21782: PUSH
21783: LD_INT 106
21785: PUSH
21786: LD_INT 108
21788: PUSH
21789: LD_INT 109
21791: PUSH
21792: LD_INT 112
21794: PUSH
21795: LD_INT 116
21797: PUSH
21798: LD_INT 117
21800: PUSH
21801: LD_INT 118
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: LIST
21808: LIST
21809: LIST
21810: LIST
21811: LIST
21812: LIST
21813: LIST
21814: LIST
21815: LIST
21816: PUSH
21817: EMPTY
21818: LIST
21819: LIST
21820: ST_TO_ADDR
21821: GO 24076
21823: LD_INT 9
21825: DOUBLE
21826: EQUAL
21827: IFTRUE 21831
21829: GO 21979
21831: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21832: LD_ADDR_VAR 0 2
21836: PUSH
21837: LD_INT 2
21839: PUSH
21840: LD_INT 4
21842: PUSH
21843: LD_INT 5
21845: PUSH
21846: LD_INT 6
21848: PUSH
21849: LD_INT 7
21851: PUSH
21852: LD_INT 8
21854: PUSH
21855: LD_INT 11
21857: PUSH
21858: LD_INT 12
21860: PUSH
21861: LD_INT 15
21863: PUSH
21864: LD_INT 16
21866: PUSH
21867: LD_INT 20
21869: PUSH
21870: LD_INT 21
21872: PUSH
21873: LD_INT 22
21875: PUSH
21876: LD_INT 23
21878: PUSH
21879: LD_INT 25
21881: PUSH
21882: LD_INT 26
21884: PUSH
21885: LD_INT 28
21887: PUSH
21888: LD_INT 30
21890: PUSH
21891: LD_INT 31
21893: PUSH
21894: LD_INT 32
21896: PUSH
21897: LD_INT 36
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: LIST
21911: LIST
21912: LIST
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: PUSH
21923: LD_INT 101
21925: PUSH
21926: LD_INT 102
21928: PUSH
21929: LD_INT 103
21931: PUSH
21932: LD_INT 105
21934: PUSH
21935: LD_INT 106
21937: PUSH
21938: LD_INT 108
21940: PUSH
21941: LD_INT 109
21943: PUSH
21944: LD_INT 112
21946: PUSH
21947: LD_INT 114
21949: PUSH
21950: LD_INT 116
21952: PUSH
21953: LD_INT 117
21955: PUSH
21956: LD_INT 118
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: LIST
21965: LIST
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: ST_TO_ADDR
21977: GO 24076
21979: LD_INT 10
21981: DOUBLE
21982: EQUAL
21983: IFTRUE 21987
21985: GO 22183
21987: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21988: LD_ADDR_VAR 0 2
21992: PUSH
21993: LD_INT 2
21995: PUSH
21996: LD_INT 4
21998: PUSH
21999: LD_INT 5
22001: PUSH
22002: LD_INT 6
22004: PUSH
22005: LD_INT 7
22007: PUSH
22008: LD_INT 8
22010: PUSH
22011: LD_INT 9
22013: PUSH
22014: LD_INT 10
22016: PUSH
22017: LD_INT 11
22019: PUSH
22020: LD_INT 12
22022: PUSH
22023: LD_INT 13
22025: PUSH
22026: LD_INT 14
22028: PUSH
22029: LD_INT 15
22031: PUSH
22032: LD_INT 16
22034: PUSH
22035: LD_INT 17
22037: PUSH
22038: LD_INT 18
22040: PUSH
22041: LD_INT 19
22043: PUSH
22044: LD_INT 20
22046: PUSH
22047: LD_INT 21
22049: PUSH
22050: LD_INT 22
22052: PUSH
22053: LD_INT 23
22055: PUSH
22056: LD_INT 24
22058: PUSH
22059: LD_INT 25
22061: PUSH
22062: LD_INT 26
22064: PUSH
22065: LD_INT 28
22067: PUSH
22068: LD_INT 30
22070: PUSH
22071: LD_INT 31
22073: PUSH
22074: LD_INT 32
22076: PUSH
22077: LD_INT 36
22079: PUSH
22080: EMPTY
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 101
22113: PUSH
22114: LD_INT 102
22116: PUSH
22117: LD_INT 103
22119: PUSH
22120: LD_INT 104
22122: PUSH
22123: LD_INT 105
22125: PUSH
22126: LD_INT 106
22128: PUSH
22129: LD_INT 107
22131: PUSH
22132: LD_INT 108
22134: PUSH
22135: LD_INT 109
22137: PUSH
22138: LD_INT 110
22140: PUSH
22141: LD_INT 111
22143: PUSH
22144: LD_INT 112
22146: PUSH
22147: LD_INT 114
22149: PUSH
22150: LD_INT 116
22152: PUSH
22153: LD_INT 117
22155: PUSH
22156: LD_INT 118
22158: PUSH
22159: EMPTY
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: PUSH
22177: EMPTY
22178: LIST
22179: LIST
22180: ST_TO_ADDR
22181: GO 24076
22183: LD_INT 11
22185: DOUBLE
22186: EQUAL
22187: IFTRUE 22191
22189: GO 22395
22191: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22192: LD_ADDR_VAR 0 2
22196: PUSH
22197: LD_INT 2
22199: PUSH
22200: LD_INT 3
22202: PUSH
22203: LD_INT 4
22205: PUSH
22206: LD_INT 5
22208: PUSH
22209: LD_INT 6
22211: PUSH
22212: LD_INT 7
22214: PUSH
22215: LD_INT 8
22217: PUSH
22218: LD_INT 9
22220: PUSH
22221: LD_INT 10
22223: PUSH
22224: LD_INT 11
22226: PUSH
22227: LD_INT 12
22229: PUSH
22230: LD_INT 13
22232: PUSH
22233: LD_INT 14
22235: PUSH
22236: LD_INT 15
22238: PUSH
22239: LD_INT 16
22241: PUSH
22242: LD_INT 17
22244: PUSH
22245: LD_INT 18
22247: PUSH
22248: LD_INT 19
22250: PUSH
22251: LD_INT 20
22253: PUSH
22254: LD_INT 21
22256: PUSH
22257: LD_INT 22
22259: PUSH
22260: LD_INT 23
22262: PUSH
22263: LD_INT 24
22265: PUSH
22266: LD_INT 25
22268: PUSH
22269: LD_INT 26
22271: PUSH
22272: LD_INT 28
22274: PUSH
22275: LD_INT 30
22277: PUSH
22278: LD_INT 31
22280: PUSH
22281: LD_INT 32
22283: PUSH
22284: LD_INT 34
22286: PUSH
22287: LD_INT 36
22289: PUSH
22290: EMPTY
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 101
22325: PUSH
22326: LD_INT 102
22328: PUSH
22329: LD_INT 103
22331: PUSH
22332: LD_INT 104
22334: PUSH
22335: LD_INT 105
22337: PUSH
22338: LD_INT 106
22340: PUSH
22341: LD_INT 107
22343: PUSH
22344: LD_INT 108
22346: PUSH
22347: LD_INT 109
22349: PUSH
22350: LD_INT 110
22352: PUSH
22353: LD_INT 111
22355: PUSH
22356: LD_INT 112
22358: PUSH
22359: LD_INT 114
22361: PUSH
22362: LD_INT 116
22364: PUSH
22365: LD_INT 117
22367: PUSH
22368: LD_INT 118
22370: PUSH
22371: EMPTY
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: PUSH
22389: EMPTY
22390: LIST
22391: LIST
22392: ST_TO_ADDR
22393: GO 24076
22395: LD_INT 12
22397: DOUBLE
22398: EQUAL
22399: IFTRUE 22403
22401: GO 22623
22403: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22404: LD_ADDR_VAR 0 2
22408: PUSH
22409: LD_INT 1
22411: PUSH
22412: LD_INT 2
22414: PUSH
22415: LD_INT 3
22417: PUSH
22418: LD_INT 4
22420: PUSH
22421: LD_INT 5
22423: PUSH
22424: LD_INT 6
22426: PUSH
22427: LD_INT 7
22429: PUSH
22430: LD_INT 8
22432: PUSH
22433: LD_INT 9
22435: PUSH
22436: LD_INT 10
22438: PUSH
22439: LD_INT 11
22441: PUSH
22442: LD_INT 12
22444: PUSH
22445: LD_INT 13
22447: PUSH
22448: LD_INT 14
22450: PUSH
22451: LD_INT 15
22453: PUSH
22454: LD_INT 16
22456: PUSH
22457: LD_INT 17
22459: PUSH
22460: LD_INT 18
22462: PUSH
22463: LD_INT 19
22465: PUSH
22466: LD_INT 20
22468: PUSH
22469: LD_INT 21
22471: PUSH
22472: LD_INT 22
22474: PUSH
22475: LD_INT 23
22477: PUSH
22478: LD_INT 24
22480: PUSH
22481: LD_INT 25
22483: PUSH
22484: LD_INT 26
22486: PUSH
22487: LD_INT 27
22489: PUSH
22490: LD_INT 28
22492: PUSH
22493: LD_INT 30
22495: PUSH
22496: LD_INT 31
22498: PUSH
22499: LD_INT 32
22501: PUSH
22502: LD_INT 33
22504: PUSH
22505: LD_INT 34
22507: PUSH
22508: LD_INT 36
22510: PUSH
22511: EMPTY
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: LIST
22534: LIST
22535: LIST
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 101
22549: PUSH
22550: LD_INT 102
22552: PUSH
22553: LD_INT 103
22555: PUSH
22556: LD_INT 104
22558: PUSH
22559: LD_INT 105
22561: PUSH
22562: LD_INT 106
22564: PUSH
22565: LD_INT 107
22567: PUSH
22568: LD_INT 108
22570: PUSH
22571: LD_INT 109
22573: PUSH
22574: LD_INT 110
22576: PUSH
22577: LD_INT 111
22579: PUSH
22580: LD_INT 112
22582: PUSH
22583: LD_INT 113
22585: PUSH
22586: LD_INT 114
22588: PUSH
22589: LD_INT 116
22591: PUSH
22592: LD_INT 117
22594: PUSH
22595: LD_INT 118
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: PUSH
22617: EMPTY
22618: LIST
22619: LIST
22620: ST_TO_ADDR
22621: GO 24076
22623: LD_INT 13
22625: DOUBLE
22626: EQUAL
22627: IFTRUE 22631
22629: GO 22839
22631: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22632: LD_ADDR_VAR 0 2
22636: PUSH
22637: LD_INT 1
22639: PUSH
22640: LD_INT 2
22642: PUSH
22643: LD_INT 3
22645: PUSH
22646: LD_INT 4
22648: PUSH
22649: LD_INT 5
22651: PUSH
22652: LD_INT 8
22654: PUSH
22655: LD_INT 9
22657: PUSH
22658: LD_INT 10
22660: PUSH
22661: LD_INT 11
22663: PUSH
22664: LD_INT 12
22666: PUSH
22667: LD_INT 14
22669: PUSH
22670: LD_INT 15
22672: PUSH
22673: LD_INT 16
22675: PUSH
22676: LD_INT 17
22678: PUSH
22679: LD_INT 18
22681: PUSH
22682: LD_INT 19
22684: PUSH
22685: LD_INT 20
22687: PUSH
22688: LD_INT 21
22690: PUSH
22691: LD_INT 22
22693: PUSH
22694: LD_INT 23
22696: PUSH
22697: LD_INT 24
22699: PUSH
22700: LD_INT 25
22702: PUSH
22703: LD_INT 26
22705: PUSH
22706: LD_INT 27
22708: PUSH
22709: LD_INT 28
22711: PUSH
22712: LD_INT 30
22714: PUSH
22715: LD_INT 31
22717: PUSH
22718: LD_INT 32
22720: PUSH
22721: LD_INT 33
22723: PUSH
22724: LD_INT 34
22726: PUSH
22727: LD_INT 36
22729: PUSH
22730: EMPTY
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: LIST
22752: LIST
22753: LIST
22754: LIST
22755: LIST
22756: LIST
22757: LIST
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 101
22765: PUSH
22766: LD_INT 102
22768: PUSH
22769: LD_INT 103
22771: PUSH
22772: LD_INT 104
22774: PUSH
22775: LD_INT 105
22777: PUSH
22778: LD_INT 106
22780: PUSH
22781: LD_INT 107
22783: PUSH
22784: LD_INT 108
22786: PUSH
22787: LD_INT 109
22789: PUSH
22790: LD_INT 110
22792: PUSH
22793: LD_INT 111
22795: PUSH
22796: LD_INT 112
22798: PUSH
22799: LD_INT 113
22801: PUSH
22802: LD_INT 114
22804: PUSH
22805: LD_INT 116
22807: PUSH
22808: LD_INT 117
22810: PUSH
22811: LD_INT 118
22813: PUSH
22814: EMPTY
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: ST_TO_ADDR
22837: GO 24076
22839: LD_INT 14
22841: DOUBLE
22842: EQUAL
22843: IFTRUE 22847
22845: GO 23071
22847: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22848: LD_ADDR_VAR 0 2
22852: PUSH
22853: LD_INT 1
22855: PUSH
22856: LD_INT 2
22858: PUSH
22859: LD_INT 3
22861: PUSH
22862: LD_INT 4
22864: PUSH
22865: LD_INT 5
22867: PUSH
22868: LD_INT 6
22870: PUSH
22871: LD_INT 7
22873: PUSH
22874: LD_INT 8
22876: PUSH
22877: LD_INT 9
22879: PUSH
22880: LD_INT 10
22882: PUSH
22883: LD_INT 11
22885: PUSH
22886: LD_INT 12
22888: PUSH
22889: LD_INT 13
22891: PUSH
22892: LD_INT 14
22894: PUSH
22895: LD_INT 15
22897: PUSH
22898: LD_INT 16
22900: PUSH
22901: LD_INT 17
22903: PUSH
22904: LD_INT 18
22906: PUSH
22907: LD_INT 19
22909: PUSH
22910: LD_INT 20
22912: PUSH
22913: LD_INT 21
22915: PUSH
22916: LD_INT 22
22918: PUSH
22919: LD_INT 23
22921: PUSH
22922: LD_INT 24
22924: PUSH
22925: LD_INT 25
22927: PUSH
22928: LD_INT 26
22930: PUSH
22931: LD_INT 27
22933: PUSH
22934: LD_INT 28
22936: PUSH
22937: LD_INT 29
22939: PUSH
22940: LD_INT 30
22942: PUSH
22943: LD_INT 31
22945: PUSH
22946: LD_INT 32
22948: PUSH
22949: LD_INT 33
22951: PUSH
22952: LD_INT 34
22954: PUSH
22955: LD_INT 36
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: LIST
22982: LIST
22983: LIST
22984: LIST
22985: LIST
22986: LIST
22987: LIST
22988: LIST
22989: LIST
22990: LIST
22991: LIST
22992: LIST
22993: LIST
22994: PUSH
22995: LD_INT 101
22997: PUSH
22998: LD_INT 102
23000: PUSH
23001: LD_INT 103
23003: PUSH
23004: LD_INT 104
23006: PUSH
23007: LD_INT 105
23009: PUSH
23010: LD_INT 106
23012: PUSH
23013: LD_INT 107
23015: PUSH
23016: LD_INT 108
23018: PUSH
23019: LD_INT 109
23021: PUSH
23022: LD_INT 110
23024: PUSH
23025: LD_INT 111
23027: PUSH
23028: LD_INT 112
23030: PUSH
23031: LD_INT 113
23033: PUSH
23034: LD_INT 114
23036: PUSH
23037: LD_INT 116
23039: PUSH
23040: LD_INT 117
23042: PUSH
23043: LD_INT 118
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: PUSH
23065: EMPTY
23066: LIST
23067: LIST
23068: ST_TO_ADDR
23069: GO 24076
23071: LD_INT 15
23073: DOUBLE
23074: EQUAL
23075: IFTRUE 23079
23077: GO 23303
23079: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23080: LD_ADDR_VAR 0 2
23084: PUSH
23085: LD_INT 1
23087: PUSH
23088: LD_INT 2
23090: PUSH
23091: LD_INT 3
23093: PUSH
23094: LD_INT 4
23096: PUSH
23097: LD_INT 5
23099: PUSH
23100: LD_INT 6
23102: PUSH
23103: LD_INT 7
23105: PUSH
23106: LD_INT 8
23108: PUSH
23109: LD_INT 9
23111: PUSH
23112: LD_INT 10
23114: PUSH
23115: LD_INT 11
23117: PUSH
23118: LD_INT 12
23120: PUSH
23121: LD_INT 13
23123: PUSH
23124: LD_INT 14
23126: PUSH
23127: LD_INT 15
23129: PUSH
23130: LD_INT 16
23132: PUSH
23133: LD_INT 17
23135: PUSH
23136: LD_INT 18
23138: PUSH
23139: LD_INT 19
23141: PUSH
23142: LD_INT 20
23144: PUSH
23145: LD_INT 21
23147: PUSH
23148: LD_INT 22
23150: PUSH
23151: LD_INT 23
23153: PUSH
23154: LD_INT 24
23156: PUSH
23157: LD_INT 25
23159: PUSH
23160: LD_INT 26
23162: PUSH
23163: LD_INT 27
23165: PUSH
23166: LD_INT 28
23168: PUSH
23169: LD_INT 29
23171: PUSH
23172: LD_INT 30
23174: PUSH
23175: LD_INT 31
23177: PUSH
23178: LD_INT 32
23180: PUSH
23181: LD_INT 33
23183: PUSH
23184: LD_INT 34
23186: PUSH
23187: LD_INT 36
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 101
23229: PUSH
23230: LD_INT 102
23232: PUSH
23233: LD_INT 103
23235: PUSH
23236: LD_INT 104
23238: PUSH
23239: LD_INT 105
23241: PUSH
23242: LD_INT 106
23244: PUSH
23245: LD_INT 107
23247: PUSH
23248: LD_INT 108
23250: PUSH
23251: LD_INT 109
23253: PUSH
23254: LD_INT 110
23256: PUSH
23257: LD_INT 111
23259: PUSH
23260: LD_INT 112
23262: PUSH
23263: LD_INT 113
23265: PUSH
23266: LD_INT 114
23268: PUSH
23269: LD_INT 116
23271: PUSH
23272: LD_INT 117
23274: PUSH
23275: LD_INT 118
23277: PUSH
23278: EMPTY
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: LIST
23295: LIST
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: ST_TO_ADDR
23301: GO 24076
23303: LD_INT 16
23305: DOUBLE
23306: EQUAL
23307: IFTRUE 23311
23309: GO 23447
23311: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23312: LD_ADDR_VAR 0 2
23316: PUSH
23317: LD_INT 2
23319: PUSH
23320: LD_INT 4
23322: PUSH
23323: LD_INT 5
23325: PUSH
23326: LD_INT 7
23328: PUSH
23329: LD_INT 11
23331: PUSH
23332: LD_INT 12
23334: PUSH
23335: LD_INT 15
23337: PUSH
23338: LD_INT 16
23340: PUSH
23341: LD_INT 20
23343: PUSH
23344: LD_INT 21
23346: PUSH
23347: LD_INT 22
23349: PUSH
23350: LD_INT 23
23352: PUSH
23353: LD_INT 25
23355: PUSH
23356: LD_INT 26
23358: PUSH
23359: LD_INT 30
23361: PUSH
23362: LD_INT 31
23364: PUSH
23365: LD_INT 32
23367: PUSH
23368: LD_INT 33
23370: PUSH
23371: LD_INT 34
23373: PUSH
23374: EMPTY
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: LIST
23394: PUSH
23395: LD_INT 101
23397: PUSH
23398: LD_INT 102
23400: PUSH
23401: LD_INT 103
23403: PUSH
23404: LD_INT 106
23406: PUSH
23407: LD_INT 108
23409: PUSH
23410: LD_INT 112
23412: PUSH
23413: LD_INT 113
23415: PUSH
23416: LD_INT 114
23418: PUSH
23419: LD_INT 116
23421: PUSH
23422: LD_INT 117
23424: PUSH
23425: LD_INT 118
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: PUSH
23441: EMPTY
23442: LIST
23443: LIST
23444: ST_TO_ADDR
23445: GO 24076
23447: LD_INT 17
23449: DOUBLE
23450: EQUAL
23451: IFTRUE 23455
23453: GO 23679
23455: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23456: LD_ADDR_VAR 0 2
23460: PUSH
23461: LD_INT 1
23463: PUSH
23464: LD_INT 2
23466: PUSH
23467: LD_INT 3
23469: PUSH
23470: LD_INT 4
23472: PUSH
23473: LD_INT 5
23475: PUSH
23476: LD_INT 6
23478: PUSH
23479: LD_INT 7
23481: PUSH
23482: LD_INT 8
23484: PUSH
23485: LD_INT 9
23487: PUSH
23488: LD_INT 10
23490: PUSH
23491: LD_INT 11
23493: PUSH
23494: LD_INT 12
23496: PUSH
23497: LD_INT 13
23499: PUSH
23500: LD_INT 14
23502: PUSH
23503: LD_INT 15
23505: PUSH
23506: LD_INT 16
23508: PUSH
23509: LD_INT 17
23511: PUSH
23512: LD_INT 18
23514: PUSH
23515: LD_INT 19
23517: PUSH
23518: LD_INT 20
23520: PUSH
23521: LD_INT 21
23523: PUSH
23524: LD_INT 22
23526: PUSH
23527: LD_INT 23
23529: PUSH
23530: LD_INT 24
23532: PUSH
23533: LD_INT 25
23535: PUSH
23536: LD_INT 26
23538: PUSH
23539: LD_INT 27
23541: PUSH
23542: LD_INT 28
23544: PUSH
23545: LD_INT 29
23547: PUSH
23548: LD_INT 30
23550: PUSH
23551: LD_INT 31
23553: PUSH
23554: LD_INT 32
23556: PUSH
23557: LD_INT 33
23559: PUSH
23560: LD_INT 34
23562: PUSH
23563: LD_INT 36
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: PUSH
23603: LD_INT 101
23605: PUSH
23606: LD_INT 102
23608: PUSH
23609: LD_INT 103
23611: PUSH
23612: LD_INT 104
23614: PUSH
23615: LD_INT 105
23617: PUSH
23618: LD_INT 106
23620: PUSH
23621: LD_INT 107
23623: PUSH
23624: LD_INT 108
23626: PUSH
23627: LD_INT 109
23629: PUSH
23630: LD_INT 110
23632: PUSH
23633: LD_INT 111
23635: PUSH
23636: LD_INT 112
23638: PUSH
23639: LD_INT 113
23641: PUSH
23642: LD_INT 114
23644: PUSH
23645: LD_INT 116
23647: PUSH
23648: LD_INT 117
23650: PUSH
23651: LD_INT 118
23653: PUSH
23654: EMPTY
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: LIST
23660: LIST
23661: LIST
23662: LIST
23663: LIST
23664: LIST
23665: LIST
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: ST_TO_ADDR
23677: GO 24076
23679: LD_INT 18
23681: DOUBLE
23682: EQUAL
23683: IFTRUE 23687
23685: GO 23835
23687: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23688: LD_ADDR_VAR 0 2
23692: PUSH
23693: LD_INT 2
23695: PUSH
23696: LD_INT 4
23698: PUSH
23699: LD_INT 5
23701: PUSH
23702: LD_INT 7
23704: PUSH
23705: LD_INT 11
23707: PUSH
23708: LD_INT 12
23710: PUSH
23711: LD_INT 15
23713: PUSH
23714: LD_INT 16
23716: PUSH
23717: LD_INT 20
23719: PUSH
23720: LD_INT 21
23722: PUSH
23723: LD_INT 22
23725: PUSH
23726: LD_INT 23
23728: PUSH
23729: LD_INT 25
23731: PUSH
23732: LD_INT 26
23734: PUSH
23735: LD_INT 30
23737: PUSH
23738: LD_INT 31
23740: PUSH
23741: LD_INT 32
23743: PUSH
23744: LD_INT 33
23746: PUSH
23747: LD_INT 34
23749: PUSH
23750: LD_INT 35
23752: PUSH
23753: LD_INT 36
23755: PUSH
23756: EMPTY
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: PUSH
23779: LD_INT 101
23781: PUSH
23782: LD_INT 102
23784: PUSH
23785: LD_INT 103
23787: PUSH
23788: LD_INT 106
23790: PUSH
23791: LD_INT 108
23793: PUSH
23794: LD_INT 112
23796: PUSH
23797: LD_INT 113
23799: PUSH
23800: LD_INT 114
23802: PUSH
23803: LD_INT 115
23805: PUSH
23806: LD_INT 116
23808: PUSH
23809: LD_INT 117
23811: PUSH
23812: LD_INT 118
23814: PUSH
23815: EMPTY
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: ST_TO_ADDR
23833: GO 24076
23835: LD_INT 19
23837: DOUBLE
23838: EQUAL
23839: IFTRUE 23843
23841: GO 24075
23843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23844: LD_ADDR_VAR 0 2
23848: PUSH
23849: LD_INT 1
23851: PUSH
23852: LD_INT 2
23854: PUSH
23855: LD_INT 3
23857: PUSH
23858: LD_INT 4
23860: PUSH
23861: LD_INT 5
23863: PUSH
23864: LD_INT 6
23866: PUSH
23867: LD_INT 7
23869: PUSH
23870: LD_INT 8
23872: PUSH
23873: LD_INT 9
23875: PUSH
23876: LD_INT 10
23878: PUSH
23879: LD_INT 11
23881: PUSH
23882: LD_INT 12
23884: PUSH
23885: LD_INT 13
23887: PUSH
23888: LD_INT 14
23890: PUSH
23891: LD_INT 15
23893: PUSH
23894: LD_INT 16
23896: PUSH
23897: LD_INT 17
23899: PUSH
23900: LD_INT 18
23902: PUSH
23903: LD_INT 19
23905: PUSH
23906: LD_INT 20
23908: PUSH
23909: LD_INT 21
23911: PUSH
23912: LD_INT 22
23914: PUSH
23915: LD_INT 23
23917: PUSH
23918: LD_INT 24
23920: PUSH
23921: LD_INT 25
23923: PUSH
23924: LD_INT 26
23926: PUSH
23927: LD_INT 27
23929: PUSH
23930: LD_INT 28
23932: PUSH
23933: LD_INT 29
23935: PUSH
23936: LD_INT 30
23938: PUSH
23939: LD_INT 31
23941: PUSH
23942: LD_INT 32
23944: PUSH
23945: LD_INT 33
23947: PUSH
23948: LD_INT 34
23950: PUSH
23951: LD_INT 35
23953: PUSH
23954: LD_INT 36
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 101
23997: PUSH
23998: LD_INT 102
24000: PUSH
24001: LD_INT 103
24003: PUSH
24004: LD_INT 104
24006: PUSH
24007: LD_INT 105
24009: PUSH
24010: LD_INT 106
24012: PUSH
24013: LD_INT 107
24015: PUSH
24016: LD_INT 108
24018: PUSH
24019: LD_INT 109
24021: PUSH
24022: LD_INT 110
24024: PUSH
24025: LD_INT 111
24027: PUSH
24028: LD_INT 112
24030: PUSH
24031: LD_INT 113
24033: PUSH
24034: LD_INT 114
24036: PUSH
24037: LD_INT 115
24039: PUSH
24040: LD_INT 116
24042: PUSH
24043: LD_INT 117
24045: PUSH
24046: LD_INT 118
24048: PUSH
24049: EMPTY
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: PUSH
24069: EMPTY
24070: LIST
24071: LIST
24072: ST_TO_ADDR
24073: GO 24076
24075: POP
// end else
24076: GO 24307
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24078: LD_ADDR_VAR 0 2
24082: PUSH
24083: LD_INT 1
24085: PUSH
24086: LD_INT 2
24088: PUSH
24089: LD_INT 3
24091: PUSH
24092: LD_INT 4
24094: PUSH
24095: LD_INT 5
24097: PUSH
24098: LD_INT 6
24100: PUSH
24101: LD_INT 7
24103: PUSH
24104: LD_INT 8
24106: PUSH
24107: LD_INT 9
24109: PUSH
24110: LD_INT 10
24112: PUSH
24113: LD_INT 11
24115: PUSH
24116: LD_INT 12
24118: PUSH
24119: LD_INT 13
24121: PUSH
24122: LD_INT 14
24124: PUSH
24125: LD_INT 15
24127: PUSH
24128: LD_INT 16
24130: PUSH
24131: LD_INT 17
24133: PUSH
24134: LD_INT 18
24136: PUSH
24137: LD_INT 19
24139: PUSH
24140: LD_INT 20
24142: PUSH
24143: LD_INT 21
24145: PUSH
24146: LD_INT 22
24148: PUSH
24149: LD_INT 23
24151: PUSH
24152: LD_INT 24
24154: PUSH
24155: LD_INT 25
24157: PUSH
24158: LD_INT 26
24160: PUSH
24161: LD_INT 27
24163: PUSH
24164: LD_INT 28
24166: PUSH
24167: LD_INT 29
24169: PUSH
24170: LD_INT 30
24172: PUSH
24173: LD_INT 31
24175: PUSH
24176: LD_INT 32
24178: PUSH
24179: LD_INT 33
24181: PUSH
24182: LD_INT 34
24184: PUSH
24185: LD_INT 35
24187: PUSH
24188: LD_INT 36
24190: PUSH
24191: EMPTY
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: PUSH
24229: LD_INT 101
24231: PUSH
24232: LD_INT 102
24234: PUSH
24235: LD_INT 103
24237: PUSH
24238: LD_INT 104
24240: PUSH
24241: LD_INT 105
24243: PUSH
24244: LD_INT 106
24246: PUSH
24247: LD_INT 107
24249: PUSH
24250: LD_INT 108
24252: PUSH
24253: LD_INT 109
24255: PUSH
24256: LD_INT 110
24258: PUSH
24259: LD_INT 111
24261: PUSH
24262: LD_INT 112
24264: PUSH
24265: LD_INT 113
24267: PUSH
24268: LD_INT 114
24270: PUSH
24271: LD_INT 115
24273: PUSH
24274: LD_INT 116
24276: PUSH
24277: LD_INT 117
24279: PUSH
24280: LD_INT 118
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: LIST
24294: LIST
24295: LIST
24296: LIST
24297: LIST
24298: LIST
24299: LIST
24300: LIST
24301: LIST
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: ST_TO_ADDR
// if result then
24307: LD_VAR 0 2
24311: IFFALSE 25097
// begin normal :=  ;
24313: LD_ADDR_VAR 0 5
24317: PUSH
24318: LD_STRING 
24320: ST_TO_ADDR
// hardcore :=  ;
24321: LD_ADDR_VAR 0 6
24325: PUSH
24326: LD_STRING 
24328: ST_TO_ADDR
// active :=  ;
24329: LD_ADDR_VAR 0 7
24333: PUSH
24334: LD_STRING 
24336: ST_TO_ADDR
// for i = 1 to normalCounter do
24337: LD_ADDR_VAR 0 8
24341: PUSH
24342: DOUBLE
24343: LD_INT 1
24345: DEC
24346: ST_TO_ADDR
24347: LD_EXP 47
24351: PUSH
24352: FOR_TO
24353: IFFALSE 24454
// begin tmp := 0 ;
24355: LD_ADDR_VAR 0 3
24359: PUSH
24360: LD_STRING 0
24362: ST_TO_ADDR
// if result [ 1 ] then
24363: LD_VAR 0 2
24367: PUSH
24368: LD_INT 1
24370: ARRAY
24371: IFFALSE 24436
// if result [ 1 ] [ 1 ] = i then
24373: LD_VAR 0 2
24377: PUSH
24378: LD_INT 1
24380: ARRAY
24381: PUSH
24382: LD_INT 1
24384: ARRAY
24385: PUSH
24386: LD_VAR 0 8
24390: EQUAL
24391: IFFALSE 24436
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24393: LD_ADDR_VAR 0 2
24397: PUSH
24398: LD_VAR 0 2
24402: PPUSH
24403: LD_INT 1
24405: PPUSH
24406: LD_VAR 0 2
24410: PUSH
24411: LD_INT 1
24413: ARRAY
24414: PPUSH
24415: LD_INT 1
24417: PPUSH
24418: CALL_OW 3
24422: PPUSH
24423: CALL_OW 1
24427: ST_TO_ADDR
// tmp := 1 ;
24428: LD_ADDR_VAR 0 3
24432: PUSH
24433: LD_STRING 1
24435: ST_TO_ADDR
// end ; normal := normal & tmp ;
24436: LD_ADDR_VAR 0 5
24440: PUSH
24441: LD_VAR 0 5
24445: PUSH
24446: LD_VAR 0 3
24450: STR
24451: ST_TO_ADDR
// end ;
24452: GO 24352
24454: POP
24455: POP
// for i = 1 to hardcoreCounter do
24456: LD_ADDR_VAR 0 8
24460: PUSH
24461: DOUBLE
24462: LD_INT 1
24464: DEC
24465: ST_TO_ADDR
24466: LD_EXP 48
24470: PUSH
24471: FOR_TO
24472: IFFALSE 24577
// begin tmp := 0 ;
24474: LD_ADDR_VAR 0 3
24478: PUSH
24479: LD_STRING 0
24481: ST_TO_ADDR
// if result [ 2 ] then
24482: LD_VAR 0 2
24486: PUSH
24487: LD_INT 2
24489: ARRAY
24490: IFFALSE 24559
// if result [ 2 ] [ 1 ] = 100 + i then
24492: LD_VAR 0 2
24496: PUSH
24497: LD_INT 2
24499: ARRAY
24500: PUSH
24501: LD_INT 1
24503: ARRAY
24504: PUSH
24505: LD_INT 100
24507: PUSH
24508: LD_VAR 0 8
24512: PLUS
24513: EQUAL
24514: IFFALSE 24559
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24516: LD_ADDR_VAR 0 2
24520: PUSH
24521: LD_VAR 0 2
24525: PPUSH
24526: LD_INT 2
24528: PPUSH
24529: LD_VAR 0 2
24533: PUSH
24534: LD_INT 2
24536: ARRAY
24537: PPUSH
24538: LD_INT 1
24540: PPUSH
24541: CALL_OW 3
24545: PPUSH
24546: CALL_OW 1
24550: ST_TO_ADDR
// tmp := 1 ;
24551: LD_ADDR_VAR 0 3
24555: PUSH
24556: LD_STRING 1
24558: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24559: LD_ADDR_VAR 0 6
24563: PUSH
24564: LD_VAR 0 6
24568: PUSH
24569: LD_VAR 0 3
24573: STR
24574: ST_TO_ADDR
// end ;
24575: GO 24471
24577: POP
24578: POP
// if isGameLoad then
24579: LD_VAR 0 1
24583: IFFALSE 25058
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24585: LD_ADDR_VAR 0 4
24589: PUSH
24590: LD_EXP 51
24594: PUSH
24595: LD_EXP 50
24599: PUSH
24600: LD_EXP 52
24604: PUSH
24605: LD_EXP 49
24609: PUSH
24610: LD_EXP 53
24614: PUSH
24615: LD_EXP 54
24619: PUSH
24620: LD_EXP 55
24624: PUSH
24625: LD_EXP 56
24629: PUSH
24630: LD_EXP 57
24634: PUSH
24635: LD_EXP 58
24639: PUSH
24640: LD_EXP 59
24644: PUSH
24645: LD_EXP 60
24649: PUSH
24650: LD_EXP 61
24654: PUSH
24655: LD_EXP 62
24659: PUSH
24660: LD_EXP 70
24664: PUSH
24665: LD_EXP 71
24669: PUSH
24670: LD_EXP 72
24674: PUSH
24675: LD_EXP 73
24679: PUSH
24680: LD_EXP 75
24684: PUSH
24685: LD_EXP 76
24689: PUSH
24690: LD_EXP 77
24694: PUSH
24695: LD_EXP 80
24699: PUSH
24700: LD_EXP 82
24704: PUSH
24705: LD_EXP 83
24709: PUSH
24710: LD_EXP 84
24714: PUSH
24715: LD_EXP 86
24719: PUSH
24720: LD_EXP 87
24724: PUSH
24725: LD_EXP 90
24729: PUSH
24730: LD_EXP 91
24734: PUSH
24735: LD_EXP 92
24739: PUSH
24740: LD_EXP 93
24744: PUSH
24745: LD_EXP 94
24749: PUSH
24750: LD_EXP 95
24754: PUSH
24755: LD_EXP 96
24759: PUSH
24760: LD_EXP 97
24764: PUSH
24765: LD_EXP 98
24769: PUSH
24770: LD_EXP 63
24774: PUSH
24775: LD_EXP 64
24779: PUSH
24780: LD_EXP 67
24784: PUSH
24785: LD_EXP 68
24789: PUSH
24790: LD_EXP 69
24794: PUSH
24795: LD_EXP 65
24799: PUSH
24800: LD_EXP 66
24804: PUSH
24805: LD_EXP 74
24809: PUSH
24810: LD_EXP 78
24814: PUSH
24815: LD_EXP 79
24819: PUSH
24820: LD_EXP 81
24824: PUSH
24825: LD_EXP 85
24829: PUSH
24830: LD_EXP 88
24834: PUSH
24835: LD_EXP 89
24839: PUSH
24840: LD_EXP 99
24844: PUSH
24845: LD_EXP 100
24849: PUSH
24850: LD_EXP 101
24854: PUSH
24855: LD_EXP 102
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: ST_TO_ADDR
// tmp :=  ;
24916: LD_ADDR_VAR 0 3
24920: PUSH
24921: LD_STRING 
24923: ST_TO_ADDR
// for i = 1 to normalCounter do
24924: LD_ADDR_VAR 0 8
24928: PUSH
24929: DOUBLE
24930: LD_INT 1
24932: DEC
24933: ST_TO_ADDR
24934: LD_EXP 47
24938: PUSH
24939: FOR_TO
24940: IFFALSE 24976
// begin if flags [ i ] then
24942: LD_VAR 0 4
24946: PUSH
24947: LD_VAR 0 8
24951: ARRAY
24952: IFFALSE 24974
// tmp := tmp & i & ; ;
24954: LD_ADDR_VAR 0 3
24958: PUSH
24959: LD_VAR 0 3
24963: PUSH
24964: LD_VAR 0 8
24968: STR
24969: PUSH
24970: LD_STRING ;
24972: STR
24973: ST_TO_ADDR
// end ;
24974: GO 24939
24976: POP
24977: POP
// for i = 1 to hardcoreCounter do
24978: LD_ADDR_VAR 0 8
24982: PUSH
24983: DOUBLE
24984: LD_INT 1
24986: DEC
24987: ST_TO_ADDR
24988: LD_EXP 48
24992: PUSH
24993: FOR_TO
24994: IFFALSE 25040
// begin if flags [ normalCounter + i ] then
24996: LD_VAR 0 4
25000: PUSH
25001: LD_EXP 47
25005: PUSH
25006: LD_VAR 0 8
25010: PLUS
25011: ARRAY
25012: IFFALSE 25038
// tmp := tmp & ( 100 + i ) & ; ;
25014: LD_ADDR_VAR 0 3
25018: PUSH
25019: LD_VAR 0 3
25023: PUSH
25024: LD_INT 100
25026: PUSH
25027: LD_VAR 0 8
25031: PLUS
25032: STR
25033: PUSH
25034: LD_STRING ;
25036: STR
25037: ST_TO_ADDR
// end ;
25038: GO 24993
25040: POP
25041: POP
// if tmp then
25042: LD_VAR 0 3
25046: IFFALSE 25058
// active := tmp ;
25048: LD_ADDR_VAR 0 7
25052: PUSH
25053: LD_VAR 0 3
25057: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25058: LD_STRING getStreamItemsFromMission("
25060: PUSH
25061: LD_VAR 0 5
25065: STR
25066: PUSH
25067: LD_STRING ","
25069: STR
25070: PUSH
25071: LD_VAR 0 6
25075: STR
25076: PUSH
25077: LD_STRING ","
25079: STR
25080: PUSH
25081: LD_VAR 0 7
25085: STR
25086: PUSH
25087: LD_STRING ")
25089: STR
25090: PPUSH
25091: CALL_OW 559
// end else
25095: GO 25104
// ToLua ( getStreamItemsFromMission("","","") ) ;
25097: LD_STRING getStreamItemsFromMission("","","")
25099: PPUSH
25100: CALL_OW 559
// end ;
25104: LD_VAR 0 2
25108: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25109: LD_EXP 46
25113: PUSH
25114: LD_EXP 51
25118: AND
25119: IFFALSE 25243
25121: GO 25123
25123: DISABLE
25124: LD_INT 0
25126: PPUSH
25127: PPUSH
// begin enable ;
25128: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25129: LD_ADDR_VAR 0 2
25133: PUSH
25134: LD_INT 22
25136: PUSH
25137: LD_OWVAR 2
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 2
25148: PUSH
25149: LD_INT 34
25151: PUSH
25152: LD_INT 7
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_INT 34
25161: PUSH
25162: LD_INT 45
25164: PUSH
25165: EMPTY
25166: LIST
25167: LIST
25168: PUSH
25169: LD_INT 34
25171: PUSH
25172: LD_INT 28
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: PUSH
25179: LD_INT 34
25181: PUSH
25182: LD_INT 47
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: PUSH
25189: EMPTY
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: PUSH
25196: EMPTY
25197: LIST
25198: LIST
25199: PPUSH
25200: CALL_OW 69
25204: ST_TO_ADDR
// if not tmp then
25205: LD_VAR 0 2
25209: NOT
25210: IFFALSE 25214
// exit ;
25212: GO 25243
// for i in tmp do
25214: LD_ADDR_VAR 0 1
25218: PUSH
25219: LD_VAR 0 2
25223: PUSH
25224: FOR_IN
25225: IFFALSE 25241
// begin SetLives ( i , 0 ) ;
25227: LD_VAR 0 1
25231: PPUSH
25232: LD_INT 0
25234: PPUSH
25235: CALL_OW 234
// end ;
25239: GO 25224
25241: POP
25242: POP
// end ;
25243: PPOPN 2
25245: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25246: LD_EXP 46
25250: PUSH
25251: LD_EXP 52
25255: AND
25256: IFFALSE 25340
25258: GO 25260
25260: DISABLE
25261: LD_INT 0
25263: PPUSH
25264: PPUSH
// begin enable ;
25265: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25266: LD_ADDR_VAR 0 2
25270: PUSH
25271: LD_INT 22
25273: PUSH
25274: LD_OWVAR 2
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 32
25285: PUSH
25286: LD_INT 3
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PPUSH
25297: CALL_OW 69
25301: ST_TO_ADDR
// if not tmp then
25302: LD_VAR 0 2
25306: NOT
25307: IFFALSE 25311
// exit ;
25309: GO 25340
// for i in tmp do
25311: LD_ADDR_VAR 0 1
25315: PUSH
25316: LD_VAR 0 2
25320: PUSH
25321: FOR_IN
25322: IFFALSE 25338
// begin SetLives ( i , 0 ) ;
25324: LD_VAR 0 1
25328: PPUSH
25329: LD_INT 0
25331: PPUSH
25332: CALL_OW 234
// end ;
25336: GO 25321
25338: POP
25339: POP
// end ;
25340: PPOPN 2
25342: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25343: LD_EXP 46
25347: PUSH
25348: LD_EXP 49
25352: AND
25353: IFFALSE 25446
25355: GO 25357
25357: DISABLE
25358: LD_INT 0
25360: PPUSH
// begin enable ;
25361: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25362: LD_ADDR_VAR 0 1
25366: PUSH
25367: LD_INT 22
25369: PUSH
25370: LD_OWVAR 2
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 2
25381: PUSH
25382: LD_INT 25
25384: PUSH
25385: LD_INT 5
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: PUSH
25392: LD_INT 25
25394: PUSH
25395: LD_INT 9
25397: PUSH
25398: EMPTY
25399: LIST
25400: LIST
25401: PUSH
25402: LD_INT 25
25404: PUSH
25405: LD_INT 8
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: PPUSH
25422: CALL_OW 69
25426: PUSH
25427: FOR_IN
25428: IFFALSE 25444
// begin SetClass ( i , 1 ) ;
25430: LD_VAR 0 1
25434: PPUSH
25435: LD_INT 1
25437: PPUSH
25438: CALL_OW 336
// end ;
25442: GO 25427
25444: POP
25445: POP
// end ;
25446: PPOPN 1
25448: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25449: LD_EXP 46
25453: PUSH
25454: LD_EXP 50
25458: AND
25459: PUSH
25460: LD_OWVAR 65
25464: PUSH
25465: LD_INT 7
25467: LESS
25468: AND
25469: IFFALSE 25483
25471: GO 25473
25473: DISABLE
// begin enable ;
25474: ENABLE
// game_speed := 7 ;
25475: LD_ADDR_OWVAR 65
25479: PUSH
25480: LD_INT 7
25482: ST_TO_ADDR
// end ;
25483: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25484: LD_EXP 46
25488: PUSH
25489: LD_EXP 53
25493: AND
25494: IFFALSE 25696
25496: GO 25498
25498: DISABLE
25499: LD_INT 0
25501: PPUSH
25502: PPUSH
25503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25504: LD_ADDR_VAR 0 3
25508: PUSH
25509: LD_INT 81
25511: PUSH
25512: LD_OWVAR 2
25516: PUSH
25517: EMPTY
25518: LIST
25519: LIST
25520: PUSH
25521: LD_INT 21
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PPUSH
25535: CALL_OW 69
25539: ST_TO_ADDR
// if not tmp then
25540: LD_VAR 0 3
25544: NOT
25545: IFFALSE 25549
// exit ;
25547: GO 25696
// if tmp > 5 then
25549: LD_VAR 0 3
25553: PUSH
25554: LD_INT 5
25556: GREATER
25557: IFFALSE 25569
// k := 5 else
25559: LD_ADDR_VAR 0 2
25563: PUSH
25564: LD_INT 5
25566: ST_TO_ADDR
25567: GO 25579
// k := tmp ;
25569: LD_ADDR_VAR 0 2
25573: PUSH
25574: LD_VAR 0 3
25578: ST_TO_ADDR
// for i := 1 to k do
25579: LD_ADDR_VAR 0 1
25583: PUSH
25584: DOUBLE
25585: LD_INT 1
25587: DEC
25588: ST_TO_ADDR
25589: LD_VAR 0 2
25593: PUSH
25594: FOR_TO
25595: IFFALSE 25694
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25597: LD_VAR 0 3
25601: PUSH
25602: LD_VAR 0 1
25606: ARRAY
25607: PPUSH
25608: LD_VAR 0 1
25612: PUSH
25613: LD_INT 4
25615: MOD
25616: PUSH
25617: LD_INT 1
25619: PLUS
25620: PPUSH
25621: CALL_OW 259
25625: PUSH
25626: LD_INT 10
25628: LESS
25629: IFFALSE 25692
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25631: LD_VAR 0 3
25635: PUSH
25636: LD_VAR 0 1
25640: ARRAY
25641: PPUSH
25642: LD_VAR 0 1
25646: PUSH
25647: LD_INT 4
25649: MOD
25650: PUSH
25651: LD_INT 1
25653: PLUS
25654: PPUSH
25655: LD_VAR 0 3
25659: PUSH
25660: LD_VAR 0 1
25664: ARRAY
25665: PPUSH
25666: LD_VAR 0 1
25670: PUSH
25671: LD_INT 4
25673: MOD
25674: PUSH
25675: LD_INT 1
25677: PLUS
25678: PPUSH
25679: CALL_OW 259
25683: PUSH
25684: LD_INT 1
25686: PLUS
25687: PPUSH
25688: CALL_OW 237
25692: GO 25594
25694: POP
25695: POP
// end ;
25696: PPOPN 3
25698: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25699: LD_EXP 46
25703: PUSH
25704: LD_EXP 54
25708: AND
25709: IFFALSE 25729
25711: GO 25713
25713: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25714: LD_INT 4
25716: PPUSH
25717: LD_OWVAR 2
25721: PPUSH
25722: LD_INT 0
25724: PPUSH
25725: CALL_OW 324
25729: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25730: LD_EXP 46
25734: PUSH
25735: LD_EXP 83
25739: AND
25740: IFFALSE 25760
25742: GO 25744
25744: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25745: LD_INT 19
25747: PPUSH
25748: LD_OWVAR 2
25752: PPUSH
25753: LD_INT 0
25755: PPUSH
25756: CALL_OW 324
25760: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25761: LD_EXP 46
25765: PUSH
25766: LD_EXP 55
25770: AND
25771: IFFALSE 25873
25773: GO 25775
25775: DISABLE
25776: LD_INT 0
25778: PPUSH
25779: PPUSH
// begin enable ;
25780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25781: LD_ADDR_VAR 0 2
25785: PUSH
25786: LD_INT 22
25788: PUSH
25789: LD_OWVAR 2
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 2
25800: PUSH
25801: LD_INT 34
25803: PUSH
25804: LD_INT 11
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: LD_INT 34
25813: PUSH
25814: LD_INT 30
25816: PUSH
25817: EMPTY
25818: LIST
25819: LIST
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: LIST
25825: PUSH
25826: EMPTY
25827: LIST
25828: LIST
25829: PPUSH
25830: CALL_OW 69
25834: ST_TO_ADDR
// if not tmp then
25835: LD_VAR 0 2
25839: NOT
25840: IFFALSE 25844
// exit ;
25842: GO 25873
// for i in tmp do
25844: LD_ADDR_VAR 0 1
25848: PUSH
25849: LD_VAR 0 2
25853: PUSH
25854: FOR_IN
25855: IFFALSE 25871
// begin SetLives ( i , 0 ) ;
25857: LD_VAR 0 1
25861: PPUSH
25862: LD_INT 0
25864: PPUSH
25865: CALL_OW 234
// end ;
25869: GO 25854
25871: POP
25872: POP
// end ;
25873: PPOPN 2
25875: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25876: LD_EXP 46
25880: PUSH
25881: LD_EXP 56
25885: AND
25886: IFFALSE 25906
25888: GO 25890
25890: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25891: LD_INT 32
25893: PPUSH
25894: LD_OWVAR 2
25898: PPUSH
25899: LD_INT 0
25901: PPUSH
25902: CALL_OW 324
25906: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25907: LD_EXP 46
25911: PUSH
25912: LD_EXP 57
25916: AND
25917: IFFALSE 26098
25919: GO 25921
25921: DISABLE
25922: LD_INT 0
25924: PPUSH
25925: PPUSH
25926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25927: LD_ADDR_VAR 0 2
25931: PUSH
25932: LD_INT 22
25934: PUSH
25935: LD_OWVAR 2
25939: PUSH
25940: EMPTY
25941: LIST
25942: LIST
25943: PUSH
25944: LD_INT 33
25946: PUSH
25947: LD_INT 3
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PPUSH
25958: CALL_OW 69
25962: ST_TO_ADDR
// if not tmp then
25963: LD_VAR 0 2
25967: NOT
25968: IFFALSE 25972
// exit ;
25970: GO 26098
// side := 0 ;
25972: LD_ADDR_VAR 0 3
25976: PUSH
25977: LD_INT 0
25979: ST_TO_ADDR
// for i := 1 to 8 do
25980: LD_ADDR_VAR 0 1
25984: PUSH
25985: DOUBLE
25986: LD_INT 1
25988: DEC
25989: ST_TO_ADDR
25990: LD_INT 8
25992: PUSH
25993: FOR_TO
25994: IFFALSE 26042
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25996: LD_OWVAR 2
26000: PUSH
26001: LD_VAR 0 1
26005: NONEQUAL
26006: PUSH
26007: LD_OWVAR 2
26011: PPUSH
26012: LD_VAR 0 1
26016: PPUSH
26017: CALL_OW 81
26021: PUSH
26022: LD_INT 2
26024: EQUAL
26025: AND
26026: IFFALSE 26040
// begin side := i ;
26028: LD_ADDR_VAR 0 3
26032: PUSH
26033: LD_VAR 0 1
26037: ST_TO_ADDR
// break ;
26038: GO 26042
// end ;
26040: GO 25993
26042: POP
26043: POP
// if not side then
26044: LD_VAR 0 3
26048: NOT
26049: IFFALSE 26053
// exit ;
26051: GO 26098
// for i := 1 to tmp do
26053: LD_ADDR_VAR 0 1
26057: PUSH
26058: DOUBLE
26059: LD_INT 1
26061: DEC
26062: ST_TO_ADDR
26063: LD_VAR 0 2
26067: PUSH
26068: FOR_TO
26069: IFFALSE 26096
// if Prob ( 60 ) then
26071: LD_INT 60
26073: PPUSH
26074: CALL_OW 13
26078: IFFALSE 26094
// SetSide ( i , side ) ;
26080: LD_VAR 0 1
26084: PPUSH
26085: LD_VAR 0 3
26089: PPUSH
26090: CALL_OW 235
26094: GO 26068
26096: POP
26097: POP
// end ;
26098: PPOPN 3
26100: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26101: LD_EXP 46
26105: PUSH
26106: LD_EXP 59
26110: AND
26111: IFFALSE 26230
26113: GO 26115
26115: DISABLE
26116: LD_INT 0
26118: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26119: LD_ADDR_VAR 0 1
26123: PUSH
26124: LD_INT 22
26126: PUSH
26127: LD_OWVAR 2
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 21
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 3
26148: PUSH
26149: LD_INT 23
26151: PUSH
26152: LD_INT 0
26154: PUSH
26155: EMPTY
26156: LIST
26157: LIST
26158: PUSH
26159: EMPTY
26160: LIST
26161: LIST
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: LIST
26167: PPUSH
26168: CALL_OW 69
26172: PUSH
26173: FOR_IN
26174: IFFALSE 26228
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26176: LD_VAR 0 1
26180: PPUSH
26181: CALL_OW 257
26185: PUSH
26186: LD_INT 1
26188: PUSH
26189: LD_INT 2
26191: PUSH
26192: LD_INT 3
26194: PUSH
26195: LD_INT 4
26197: PUSH
26198: EMPTY
26199: LIST
26200: LIST
26201: LIST
26202: LIST
26203: IN
26204: IFFALSE 26226
// SetClass ( un , rand ( 1 , 4 ) ) ;
26206: LD_VAR 0 1
26210: PPUSH
26211: LD_INT 1
26213: PPUSH
26214: LD_INT 4
26216: PPUSH
26217: CALL_OW 12
26221: PPUSH
26222: CALL_OW 336
26226: GO 26173
26228: POP
26229: POP
// end ;
26230: PPOPN 1
26232: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26233: LD_EXP 46
26237: PUSH
26238: LD_EXP 58
26242: AND
26243: IFFALSE 26322
26245: GO 26247
26247: DISABLE
26248: LD_INT 0
26250: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26251: LD_ADDR_VAR 0 1
26255: PUSH
26256: LD_INT 22
26258: PUSH
26259: LD_OWVAR 2
26263: PUSH
26264: EMPTY
26265: LIST
26266: LIST
26267: PUSH
26268: LD_INT 21
26270: PUSH
26271: LD_INT 3
26273: PUSH
26274: EMPTY
26275: LIST
26276: LIST
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PPUSH
26282: CALL_OW 69
26286: ST_TO_ADDR
// if not tmp then
26287: LD_VAR 0 1
26291: NOT
26292: IFFALSE 26296
// exit ;
26294: GO 26322
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26296: LD_VAR 0 1
26300: PUSH
26301: LD_INT 1
26303: PPUSH
26304: LD_VAR 0 1
26308: PPUSH
26309: CALL_OW 12
26313: ARRAY
26314: PPUSH
26315: LD_INT 100
26317: PPUSH
26318: CALL_OW 234
// end ;
26322: PPOPN 1
26324: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26325: LD_EXP 46
26329: PUSH
26330: LD_EXP 60
26334: AND
26335: IFFALSE 26433
26337: GO 26339
26339: DISABLE
26340: LD_INT 0
26342: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26343: LD_ADDR_VAR 0 1
26347: PUSH
26348: LD_INT 22
26350: PUSH
26351: LD_OWVAR 2
26355: PUSH
26356: EMPTY
26357: LIST
26358: LIST
26359: PUSH
26360: LD_INT 21
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PPUSH
26374: CALL_OW 69
26378: ST_TO_ADDR
// if not tmp then
26379: LD_VAR 0 1
26383: NOT
26384: IFFALSE 26388
// exit ;
26386: GO 26433
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26388: LD_VAR 0 1
26392: PUSH
26393: LD_INT 1
26395: PPUSH
26396: LD_VAR 0 1
26400: PPUSH
26401: CALL_OW 12
26405: ARRAY
26406: PPUSH
26407: LD_INT 1
26409: PPUSH
26410: LD_INT 4
26412: PPUSH
26413: CALL_OW 12
26417: PPUSH
26418: LD_INT 3000
26420: PPUSH
26421: LD_INT 9000
26423: PPUSH
26424: CALL_OW 12
26428: PPUSH
26429: CALL_OW 492
// end ;
26433: PPOPN 1
26435: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26436: LD_EXP 46
26440: PUSH
26441: LD_EXP 61
26445: AND
26446: IFFALSE 26466
26448: GO 26450
26450: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26451: LD_INT 1
26453: PPUSH
26454: LD_OWVAR 2
26458: PPUSH
26459: LD_INT 0
26461: PPUSH
26462: CALL_OW 324
26466: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26467: LD_EXP 46
26471: PUSH
26472: LD_EXP 62
26476: AND
26477: IFFALSE 26560
26479: GO 26481
26481: DISABLE
26482: LD_INT 0
26484: PPUSH
26485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26486: LD_ADDR_VAR 0 2
26490: PUSH
26491: LD_INT 22
26493: PUSH
26494: LD_OWVAR 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: LD_INT 21
26505: PUSH
26506: LD_INT 3
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: EMPTY
26514: LIST
26515: LIST
26516: PPUSH
26517: CALL_OW 69
26521: ST_TO_ADDR
// if not tmp then
26522: LD_VAR 0 2
26526: NOT
26527: IFFALSE 26531
// exit ;
26529: GO 26560
// for i in tmp do
26531: LD_ADDR_VAR 0 1
26535: PUSH
26536: LD_VAR 0 2
26540: PUSH
26541: FOR_IN
26542: IFFALSE 26558
// SetBLevel ( i , 10 ) ;
26544: LD_VAR 0 1
26548: PPUSH
26549: LD_INT 10
26551: PPUSH
26552: CALL_OW 241
26556: GO 26541
26558: POP
26559: POP
// end ;
26560: PPOPN 2
26562: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26563: LD_EXP 46
26567: PUSH
26568: LD_EXP 63
26572: AND
26573: IFFALSE 26684
26575: GO 26577
26577: DISABLE
26578: LD_INT 0
26580: PPUSH
26581: PPUSH
26582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26583: LD_ADDR_VAR 0 3
26587: PUSH
26588: LD_INT 22
26590: PUSH
26591: LD_OWVAR 2
26595: PUSH
26596: EMPTY
26597: LIST
26598: LIST
26599: PUSH
26600: LD_INT 25
26602: PUSH
26603: LD_INT 1
26605: PUSH
26606: EMPTY
26607: LIST
26608: LIST
26609: PUSH
26610: EMPTY
26611: LIST
26612: LIST
26613: PPUSH
26614: CALL_OW 69
26618: ST_TO_ADDR
// if not tmp then
26619: LD_VAR 0 3
26623: NOT
26624: IFFALSE 26628
// exit ;
26626: GO 26684
// un := tmp [ rand ( 1 , tmp ) ] ;
26628: LD_ADDR_VAR 0 2
26632: PUSH
26633: LD_VAR 0 3
26637: PUSH
26638: LD_INT 1
26640: PPUSH
26641: LD_VAR 0 3
26645: PPUSH
26646: CALL_OW 12
26650: ARRAY
26651: ST_TO_ADDR
// if Crawls ( un ) then
26652: LD_VAR 0 2
26656: PPUSH
26657: CALL_OW 318
26661: IFFALSE 26672
// ComWalk ( un ) ;
26663: LD_VAR 0 2
26667: PPUSH
26668: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26672: LD_VAR 0 2
26676: PPUSH
26677: LD_INT 5
26679: PPUSH
26680: CALL_OW 336
// end ;
26684: PPOPN 3
26686: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26687: LD_EXP 46
26691: PUSH
26692: LD_EXP 64
26696: AND
26697: PUSH
26698: LD_OWVAR 67
26702: PUSH
26703: LD_INT 4
26705: LESS
26706: AND
26707: IFFALSE 26726
26709: GO 26711
26711: DISABLE
// begin Difficulty := Difficulty + 1 ;
26712: LD_ADDR_OWVAR 67
26716: PUSH
26717: LD_OWVAR 67
26721: PUSH
26722: LD_INT 1
26724: PLUS
26725: ST_TO_ADDR
// end ;
26726: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26727: LD_EXP 46
26731: PUSH
26732: LD_EXP 65
26736: AND
26737: IFFALSE 26840
26739: GO 26741
26741: DISABLE
26742: LD_INT 0
26744: PPUSH
// begin for i := 1 to 5 do
26745: LD_ADDR_VAR 0 1
26749: PUSH
26750: DOUBLE
26751: LD_INT 1
26753: DEC
26754: ST_TO_ADDR
26755: LD_INT 5
26757: PUSH
26758: FOR_TO
26759: IFFALSE 26838
// begin uc_nation := nation_nature ;
26761: LD_ADDR_OWVAR 21
26765: PUSH
26766: LD_INT 0
26768: ST_TO_ADDR
// uc_side := 0 ;
26769: LD_ADDR_OWVAR 20
26773: PUSH
26774: LD_INT 0
26776: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26777: LD_ADDR_OWVAR 29
26781: PUSH
26782: LD_INT 12
26784: PUSH
26785: LD_INT 12
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: ST_TO_ADDR
// hc_agressivity := 20 ;
26792: LD_ADDR_OWVAR 35
26796: PUSH
26797: LD_INT 20
26799: ST_TO_ADDR
// hc_class := class_tiger ;
26800: LD_ADDR_OWVAR 28
26804: PUSH
26805: LD_INT 14
26807: ST_TO_ADDR
// hc_gallery :=  ;
26808: LD_ADDR_OWVAR 33
26812: PUSH
26813: LD_STRING 
26815: ST_TO_ADDR
// hc_name :=  ;
26816: LD_ADDR_OWVAR 26
26820: PUSH
26821: LD_STRING 
26823: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26824: CALL_OW 44
26828: PPUSH
26829: LD_INT 0
26831: PPUSH
26832: CALL_OW 51
// end ;
26836: GO 26758
26838: POP
26839: POP
// end ;
26840: PPOPN 1
26842: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26843: LD_EXP 46
26847: PUSH
26848: LD_EXP 66
26852: AND
26853: IFFALSE 26862
26855: GO 26857
26857: DISABLE
// StreamSibBomb ;
26858: CALL 26863 0 0
26862: END
// export function StreamSibBomb ; var i , x , y ; begin
26863: LD_INT 0
26865: PPUSH
26866: PPUSH
26867: PPUSH
26868: PPUSH
// result := false ;
26869: LD_ADDR_VAR 0 1
26873: PUSH
26874: LD_INT 0
26876: ST_TO_ADDR
// for i := 1 to 16 do
26877: LD_ADDR_VAR 0 2
26881: PUSH
26882: DOUBLE
26883: LD_INT 1
26885: DEC
26886: ST_TO_ADDR
26887: LD_INT 16
26889: PUSH
26890: FOR_TO
26891: IFFALSE 27090
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26893: LD_ADDR_VAR 0 3
26897: PUSH
26898: LD_INT 10
26900: PUSH
26901: LD_INT 20
26903: PUSH
26904: LD_INT 30
26906: PUSH
26907: LD_INT 40
26909: PUSH
26910: LD_INT 50
26912: PUSH
26913: LD_INT 60
26915: PUSH
26916: LD_INT 70
26918: PUSH
26919: LD_INT 80
26921: PUSH
26922: LD_INT 90
26924: PUSH
26925: LD_INT 100
26927: PUSH
26928: LD_INT 110
26930: PUSH
26931: LD_INT 120
26933: PUSH
26934: LD_INT 130
26936: PUSH
26937: LD_INT 140
26939: PUSH
26940: LD_INT 150
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 1
26962: PPUSH
26963: LD_INT 15
26965: PPUSH
26966: CALL_OW 12
26970: ARRAY
26971: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26972: LD_ADDR_VAR 0 4
26976: PUSH
26977: LD_INT 10
26979: PUSH
26980: LD_INT 20
26982: PUSH
26983: LD_INT 30
26985: PUSH
26986: LD_INT 40
26988: PUSH
26989: LD_INT 50
26991: PUSH
26992: LD_INT 60
26994: PUSH
26995: LD_INT 70
26997: PUSH
26998: LD_INT 80
27000: PUSH
27001: LD_INT 90
27003: PUSH
27004: LD_INT 100
27006: PUSH
27007: LD_INT 110
27009: PUSH
27010: LD_INT 120
27012: PUSH
27013: LD_INT 130
27015: PUSH
27016: LD_INT 140
27018: PUSH
27019: LD_INT 150
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: LIST
27038: PUSH
27039: LD_INT 1
27041: PPUSH
27042: LD_INT 15
27044: PPUSH
27045: CALL_OW 12
27049: ARRAY
27050: ST_TO_ADDR
// if ValidHex ( x , y ) then
27051: LD_VAR 0 3
27055: PPUSH
27056: LD_VAR 0 4
27060: PPUSH
27061: CALL_OW 488
27065: IFFALSE 27088
// begin result := [ x , y ] ;
27067: LD_ADDR_VAR 0 1
27071: PUSH
27072: LD_VAR 0 3
27076: PUSH
27077: LD_VAR 0 4
27081: PUSH
27082: EMPTY
27083: LIST
27084: LIST
27085: ST_TO_ADDR
// break ;
27086: GO 27090
// end ; end ;
27088: GO 26890
27090: POP
27091: POP
// if result then
27092: LD_VAR 0 1
27096: IFFALSE 27156
// begin ToLua ( playSibBomb() ) ;
27098: LD_STRING playSibBomb()
27100: PPUSH
27101: CALL_OW 559
// wait ( 0 0$14 ) ;
27105: LD_INT 490
27107: PPUSH
27108: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27112: LD_VAR 0 1
27116: PUSH
27117: LD_INT 1
27119: ARRAY
27120: PPUSH
27121: LD_VAR 0 1
27125: PUSH
27126: LD_INT 2
27128: ARRAY
27129: PPUSH
27130: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27134: LD_VAR 0 1
27138: PUSH
27139: LD_INT 1
27141: ARRAY
27142: PPUSH
27143: LD_VAR 0 1
27147: PUSH
27148: LD_INT 2
27150: ARRAY
27151: PPUSH
27152: CALL_OW 429
// end ; end ;
27156: LD_VAR 0 1
27160: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27161: LD_EXP 46
27165: PUSH
27166: LD_EXP 68
27170: AND
27171: IFFALSE 27183
27173: GO 27175
27175: DISABLE
// YouLost (  ) ;
27176: LD_STRING 
27178: PPUSH
27179: CALL_OW 104
27183: END
// every 0 0$1 trigger StreamModeActive and sFog do
27184: LD_EXP 46
27188: PUSH
27189: LD_EXP 67
27193: AND
27194: IFFALSE 27208
27196: GO 27198
27198: DISABLE
// FogOff ( your_side ) ;
27199: LD_OWVAR 2
27203: PPUSH
27204: CALL_OW 344
27208: END
// every 0 0$1 trigger StreamModeActive and sSun do
27209: LD_EXP 46
27213: PUSH
27214: LD_EXP 69
27218: AND
27219: IFFALSE 27247
27221: GO 27223
27223: DISABLE
// begin solar_recharge_percent := 0 ;
27224: LD_ADDR_OWVAR 79
27228: PUSH
27229: LD_INT 0
27231: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27232: LD_INT 10500
27234: PPUSH
27235: CALL_OW 67
// solar_recharge_percent := 100 ;
27239: LD_ADDR_OWVAR 79
27243: PUSH
27244: LD_INT 100
27246: ST_TO_ADDR
// end ;
27247: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27248: LD_EXP 46
27252: PUSH
27253: LD_EXP 70
27257: AND
27258: IFFALSE 27497
27260: GO 27262
27262: DISABLE
27263: LD_INT 0
27265: PPUSH
27266: PPUSH
27267: PPUSH
// begin tmp := [ ] ;
27268: LD_ADDR_VAR 0 3
27272: PUSH
27273: EMPTY
27274: ST_TO_ADDR
// for i := 1 to 6 do
27275: LD_ADDR_VAR 0 1
27279: PUSH
27280: DOUBLE
27281: LD_INT 1
27283: DEC
27284: ST_TO_ADDR
27285: LD_INT 6
27287: PUSH
27288: FOR_TO
27289: IFFALSE 27394
// begin uc_nation := nation_nature ;
27291: LD_ADDR_OWVAR 21
27295: PUSH
27296: LD_INT 0
27298: ST_TO_ADDR
// uc_side := 0 ;
27299: LD_ADDR_OWVAR 20
27303: PUSH
27304: LD_INT 0
27306: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27307: LD_ADDR_OWVAR 29
27311: PUSH
27312: LD_INT 12
27314: PUSH
27315: LD_INT 12
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: ST_TO_ADDR
// hc_agressivity := 20 ;
27322: LD_ADDR_OWVAR 35
27326: PUSH
27327: LD_INT 20
27329: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27330: LD_ADDR_OWVAR 28
27334: PUSH
27335: LD_INT 17
27337: ST_TO_ADDR
// hc_gallery :=  ;
27338: LD_ADDR_OWVAR 33
27342: PUSH
27343: LD_STRING 
27345: ST_TO_ADDR
// hc_name :=  ;
27346: LD_ADDR_OWVAR 26
27350: PUSH
27351: LD_STRING 
27353: ST_TO_ADDR
// un := CreateHuman ;
27354: LD_ADDR_VAR 0 2
27358: PUSH
27359: CALL_OW 44
27363: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27364: LD_VAR 0 2
27368: PPUSH
27369: LD_INT 1
27371: PPUSH
27372: CALL_OW 51
// tmp := tmp ^ un ;
27376: LD_ADDR_VAR 0 3
27380: PUSH
27381: LD_VAR 0 3
27385: PUSH
27386: LD_VAR 0 2
27390: ADD
27391: ST_TO_ADDR
// end ;
27392: GO 27288
27394: POP
27395: POP
// repeat wait ( 0 0$1 ) ;
27396: LD_INT 35
27398: PPUSH
27399: CALL_OW 67
// for un in tmp do
27403: LD_ADDR_VAR 0 2
27407: PUSH
27408: LD_VAR 0 3
27412: PUSH
27413: FOR_IN
27414: IFFALSE 27488
// begin if IsDead ( un ) then
27416: LD_VAR 0 2
27420: PPUSH
27421: CALL_OW 301
27425: IFFALSE 27445
// begin tmp := tmp diff un ;
27427: LD_ADDR_VAR 0 3
27431: PUSH
27432: LD_VAR 0 3
27436: PUSH
27437: LD_VAR 0 2
27441: DIFF
27442: ST_TO_ADDR
// continue ;
27443: GO 27413
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27445: LD_VAR 0 2
27449: PPUSH
27450: LD_INT 3
27452: PUSH
27453: LD_INT 22
27455: PUSH
27456: LD_INT 0
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: EMPTY
27464: LIST
27465: LIST
27466: PPUSH
27467: CALL_OW 69
27471: PPUSH
27472: LD_VAR 0 2
27476: PPUSH
27477: CALL_OW 74
27481: PPUSH
27482: CALL_OW 115
// end ;
27486: GO 27413
27488: POP
27489: POP
// until not tmp ;
27490: LD_VAR 0 3
27494: NOT
27495: IFFALSE 27396
// end ;
27497: PPOPN 3
27499: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27500: LD_EXP 46
27504: PUSH
27505: LD_EXP 71
27509: AND
27510: IFFALSE 27564
27512: GO 27514
27514: DISABLE
// begin ToLua ( displayTroll(); ) ;
27515: LD_STRING displayTroll();
27517: PPUSH
27518: CALL_OW 559
// wait ( 3 3$00 ) ;
27522: LD_INT 6300
27524: PPUSH
27525: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27529: LD_STRING hideTroll();
27531: PPUSH
27532: CALL_OW 559
// wait ( 1 1$00 ) ;
27536: LD_INT 2100
27538: PPUSH
27539: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27543: LD_STRING displayTroll();
27545: PPUSH
27546: CALL_OW 559
// wait ( 1 1$00 ) ;
27550: LD_INT 2100
27552: PPUSH
27553: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27557: LD_STRING hideTroll();
27559: PPUSH
27560: CALL_OW 559
// end ;
27564: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27565: LD_EXP 46
27569: PUSH
27570: LD_EXP 72
27574: AND
27575: IFFALSE 27638
27577: GO 27579
27579: DISABLE
27580: LD_INT 0
27582: PPUSH
// begin p := 0 ;
27583: LD_ADDR_VAR 0 1
27587: PUSH
27588: LD_INT 0
27590: ST_TO_ADDR
// repeat game_speed := 1 ;
27591: LD_ADDR_OWVAR 65
27595: PUSH
27596: LD_INT 1
27598: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27599: LD_INT 35
27601: PPUSH
27602: CALL_OW 67
// p := p + 1 ;
27606: LD_ADDR_VAR 0 1
27610: PUSH
27611: LD_VAR 0 1
27615: PUSH
27616: LD_INT 1
27618: PLUS
27619: ST_TO_ADDR
// until p >= 60 ;
27620: LD_VAR 0 1
27624: PUSH
27625: LD_INT 60
27627: GREATEREQUAL
27628: IFFALSE 27591
// game_speed := 4 ;
27630: LD_ADDR_OWVAR 65
27634: PUSH
27635: LD_INT 4
27637: ST_TO_ADDR
// end ;
27638: PPOPN 1
27640: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27641: LD_EXP 46
27645: PUSH
27646: LD_EXP 73
27650: AND
27651: IFFALSE 27797
27653: GO 27655
27655: DISABLE
27656: LD_INT 0
27658: PPUSH
27659: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27660: LD_ADDR_VAR 0 1
27664: PUSH
27665: LD_INT 22
27667: PUSH
27668: LD_OWVAR 2
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 2
27679: PUSH
27680: LD_INT 30
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 30
27692: PUSH
27693: LD_INT 1
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: LIST
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PPUSH
27709: CALL_OW 69
27713: ST_TO_ADDR
// if not depot then
27714: LD_VAR 0 1
27718: NOT
27719: IFFALSE 27723
// exit ;
27721: GO 27797
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27723: LD_ADDR_VAR 0 2
27727: PUSH
27728: LD_VAR 0 1
27732: PUSH
27733: LD_INT 1
27735: PPUSH
27736: LD_VAR 0 1
27740: PPUSH
27741: CALL_OW 12
27745: ARRAY
27746: PPUSH
27747: CALL_OW 274
27751: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27752: LD_VAR 0 2
27756: PPUSH
27757: LD_INT 1
27759: PPUSH
27760: LD_INT 0
27762: PPUSH
27763: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27767: LD_VAR 0 2
27771: PPUSH
27772: LD_INT 2
27774: PPUSH
27775: LD_INT 0
27777: PPUSH
27778: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27782: LD_VAR 0 2
27786: PPUSH
27787: LD_INT 3
27789: PPUSH
27790: LD_INT 0
27792: PPUSH
27793: CALL_OW 277
// end ;
27797: PPOPN 2
27799: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27800: LD_EXP 46
27804: PUSH
27805: LD_EXP 74
27809: AND
27810: IFFALSE 27907
27812: GO 27814
27814: DISABLE
27815: LD_INT 0
27817: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27818: LD_ADDR_VAR 0 1
27822: PUSH
27823: LD_INT 22
27825: PUSH
27826: LD_OWVAR 2
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 21
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: LD_INT 3
27847: PUSH
27848: LD_INT 23
27850: PUSH
27851: LD_INT 0
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: LIST
27866: PPUSH
27867: CALL_OW 69
27871: ST_TO_ADDR
// if not tmp then
27872: LD_VAR 0 1
27876: NOT
27877: IFFALSE 27881
// exit ;
27879: GO 27907
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27881: LD_VAR 0 1
27885: PUSH
27886: LD_INT 1
27888: PPUSH
27889: LD_VAR 0 1
27893: PPUSH
27894: CALL_OW 12
27898: ARRAY
27899: PPUSH
27900: LD_INT 200
27902: PPUSH
27903: CALL_OW 234
// end ;
27907: PPOPN 1
27909: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27910: LD_EXP 46
27914: PUSH
27915: LD_EXP 75
27919: AND
27920: IFFALSE 27999
27922: GO 27924
27924: DISABLE
27925: LD_INT 0
27927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27928: LD_ADDR_VAR 0 1
27932: PUSH
27933: LD_INT 22
27935: PUSH
27936: LD_OWVAR 2
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 21
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: PPUSH
27959: CALL_OW 69
27963: ST_TO_ADDR
// if not tmp then
27964: LD_VAR 0 1
27968: NOT
27969: IFFALSE 27973
// exit ;
27971: GO 27999
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27973: LD_VAR 0 1
27977: PUSH
27978: LD_INT 1
27980: PPUSH
27981: LD_VAR 0 1
27985: PPUSH
27986: CALL_OW 12
27990: ARRAY
27991: PPUSH
27992: LD_INT 60
27994: PPUSH
27995: CALL_OW 234
// end ;
27999: PPOPN 1
28001: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28002: LD_EXP 46
28006: PUSH
28007: LD_EXP 76
28011: AND
28012: IFFALSE 28111
28014: GO 28016
28016: DISABLE
28017: LD_INT 0
28019: PPUSH
28020: PPUSH
// begin enable ;
28021: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28022: LD_ADDR_VAR 0 1
28026: PUSH
28027: LD_INT 22
28029: PUSH
28030: LD_OWVAR 2
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 61
28041: PUSH
28042: EMPTY
28043: LIST
28044: PUSH
28045: LD_INT 33
28047: PUSH
28048: LD_INT 2
28050: PUSH
28051: EMPTY
28052: LIST
28053: LIST
28054: PUSH
28055: EMPTY
28056: LIST
28057: LIST
28058: LIST
28059: PPUSH
28060: CALL_OW 69
28064: ST_TO_ADDR
// if not tmp then
28065: LD_VAR 0 1
28069: NOT
28070: IFFALSE 28074
// exit ;
28072: GO 28111
// for i in tmp do
28074: LD_ADDR_VAR 0 2
28078: PUSH
28079: LD_VAR 0 1
28083: PUSH
28084: FOR_IN
28085: IFFALSE 28109
// if IsControledBy ( i ) then
28087: LD_VAR 0 2
28091: PPUSH
28092: CALL_OW 312
28096: IFFALSE 28107
// ComUnlink ( i ) ;
28098: LD_VAR 0 2
28102: PPUSH
28103: CALL_OW 136
28107: GO 28084
28109: POP
28110: POP
// end ;
28111: PPOPN 2
28113: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28114: LD_EXP 46
28118: PUSH
28119: LD_EXP 77
28123: AND
28124: IFFALSE 28264
28126: GO 28128
28128: DISABLE
28129: LD_INT 0
28131: PPUSH
28132: PPUSH
// begin ToLua ( displayPowell(); ) ;
28133: LD_STRING displayPowell();
28135: PPUSH
28136: CALL_OW 559
// uc_side := 0 ;
28140: LD_ADDR_OWVAR 20
28144: PUSH
28145: LD_INT 0
28147: ST_TO_ADDR
// uc_nation := 2 ;
28148: LD_ADDR_OWVAR 21
28152: PUSH
28153: LD_INT 2
28155: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28156: LD_ADDR_OWVAR 37
28160: PUSH
28161: LD_INT 14
28163: ST_TO_ADDR
// vc_engine := engine_siberite ;
28164: LD_ADDR_OWVAR 39
28168: PUSH
28169: LD_INT 3
28171: ST_TO_ADDR
// vc_control := control_apeman ;
28172: LD_ADDR_OWVAR 38
28176: PUSH
28177: LD_INT 5
28179: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28180: LD_ADDR_OWVAR 40
28184: PUSH
28185: LD_INT 29
28187: ST_TO_ADDR
// un := CreateVehicle ;
28188: LD_ADDR_VAR 0 2
28192: PUSH
28193: CALL_OW 45
28197: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28198: LD_VAR 0 2
28202: PPUSH
28203: LD_INT 1
28205: PPUSH
28206: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28210: LD_INT 35
28212: PPUSH
28213: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28217: LD_VAR 0 2
28221: PPUSH
28222: LD_INT 22
28224: PUSH
28225: LD_OWVAR 2
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PPUSH
28234: CALL_OW 69
28238: PPUSH
28239: LD_VAR 0 2
28243: PPUSH
28244: CALL_OW 74
28248: PPUSH
28249: CALL_OW 115
// until IsDead ( un ) ;
28253: LD_VAR 0 2
28257: PPUSH
28258: CALL_OW 301
28262: IFFALSE 28210
// end ;
28264: PPOPN 2
28266: END
// every 0 0$1 trigger StreamModeActive and sStu do
28267: LD_EXP 46
28271: PUSH
28272: LD_EXP 85
28276: AND
28277: IFFALSE 28293
28279: GO 28281
28281: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28282: LD_STRING displayStucuk();
28284: PPUSH
28285: CALL_OW 559
// ResetFog ;
28289: CALL_OW 335
// end ;
28293: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28294: LD_EXP 46
28298: PUSH
28299: LD_EXP 78
28303: AND
28304: IFFALSE 28445
28306: GO 28308
28308: DISABLE
28309: LD_INT 0
28311: PPUSH
28312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28313: LD_ADDR_VAR 0 2
28317: PUSH
28318: LD_INT 22
28320: PUSH
28321: LD_OWVAR 2
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 21
28332: PUSH
28333: LD_INT 1
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PPUSH
28344: CALL_OW 69
28348: ST_TO_ADDR
// if not tmp then
28349: LD_VAR 0 2
28353: NOT
28354: IFFALSE 28358
// exit ;
28356: GO 28445
// un := tmp [ rand ( 1 , tmp ) ] ;
28358: LD_ADDR_VAR 0 1
28362: PUSH
28363: LD_VAR 0 2
28367: PUSH
28368: LD_INT 1
28370: PPUSH
28371: LD_VAR 0 2
28375: PPUSH
28376: CALL_OW 12
28380: ARRAY
28381: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28382: LD_VAR 0 1
28386: PPUSH
28387: LD_INT 0
28389: PPUSH
28390: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28394: LD_VAR 0 1
28398: PPUSH
28399: LD_OWVAR 3
28403: PUSH
28404: LD_VAR 0 1
28408: DIFF
28409: PPUSH
28410: LD_VAR 0 1
28414: PPUSH
28415: CALL_OW 74
28419: PPUSH
28420: CALL_OW 115
// wait ( 0 0$20 ) ;
28424: LD_INT 700
28426: PPUSH
28427: CALL_OW 67
// SetSide ( un , your_side ) ;
28431: LD_VAR 0 1
28435: PPUSH
28436: LD_OWVAR 2
28440: PPUSH
28441: CALL_OW 235
// end ;
28445: PPOPN 2
28447: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28448: LD_EXP 46
28452: PUSH
28453: LD_EXP 79
28457: AND
28458: IFFALSE 28564
28460: GO 28462
28462: DISABLE
28463: LD_INT 0
28465: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28466: LD_ADDR_VAR 0 1
28470: PUSH
28471: LD_INT 22
28473: PUSH
28474: LD_OWVAR 2
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 2
28485: PUSH
28486: LD_INT 30
28488: PUSH
28489: LD_INT 0
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: PUSH
28496: LD_INT 30
28498: PUSH
28499: LD_INT 1
28501: PUSH
28502: EMPTY
28503: LIST
28504: LIST
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: LIST
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PPUSH
28515: CALL_OW 69
28519: ST_TO_ADDR
// if not depot then
28520: LD_VAR 0 1
28524: NOT
28525: IFFALSE 28529
// exit ;
28527: GO 28564
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28529: LD_VAR 0 1
28533: PUSH
28534: LD_INT 1
28536: ARRAY
28537: PPUSH
28538: CALL_OW 250
28542: PPUSH
28543: LD_VAR 0 1
28547: PUSH
28548: LD_INT 1
28550: ARRAY
28551: PPUSH
28552: CALL_OW 251
28556: PPUSH
28557: LD_INT 70
28559: PPUSH
28560: CALL_OW 495
// end ;
28564: PPOPN 1
28566: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28567: LD_EXP 46
28571: PUSH
28572: LD_EXP 80
28576: AND
28577: IFFALSE 28788
28579: GO 28581
28581: DISABLE
28582: LD_INT 0
28584: PPUSH
28585: PPUSH
28586: PPUSH
28587: PPUSH
28588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28589: LD_ADDR_VAR 0 5
28593: PUSH
28594: LD_INT 22
28596: PUSH
28597: LD_OWVAR 2
28601: PUSH
28602: EMPTY
28603: LIST
28604: LIST
28605: PUSH
28606: LD_INT 21
28608: PUSH
28609: LD_INT 1
28611: PUSH
28612: EMPTY
28613: LIST
28614: LIST
28615: PUSH
28616: EMPTY
28617: LIST
28618: LIST
28619: PPUSH
28620: CALL_OW 69
28624: ST_TO_ADDR
// if not tmp then
28625: LD_VAR 0 5
28629: NOT
28630: IFFALSE 28634
// exit ;
28632: GO 28788
// for i in tmp do
28634: LD_ADDR_VAR 0 1
28638: PUSH
28639: LD_VAR 0 5
28643: PUSH
28644: FOR_IN
28645: IFFALSE 28786
// begin d := rand ( 0 , 5 ) ;
28647: LD_ADDR_VAR 0 4
28651: PUSH
28652: LD_INT 0
28654: PPUSH
28655: LD_INT 5
28657: PPUSH
28658: CALL_OW 12
28662: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28663: LD_ADDR_VAR 0 2
28667: PUSH
28668: LD_VAR 0 1
28672: PPUSH
28673: CALL_OW 250
28677: PPUSH
28678: LD_VAR 0 4
28682: PPUSH
28683: LD_INT 3
28685: PPUSH
28686: LD_INT 12
28688: PPUSH
28689: CALL_OW 12
28693: PPUSH
28694: CALL_OW 272
28698: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28699: LD_ADDR_VAR 0 3
28703: PUSH
28704: LD_VAR 0 1
28708: PPUSH
28709: CALL_OW 251
28713: PPUSH
28714: LD_VAR 0 4
28718: PPUSH
28719: LD_INT 3
28721: PPUSH
28722: LD_INT 12
28724: PPUSH
28725: CALL_OW 12
28729: PPUSH
28730: CALL_OW 273
28734: ST_TO_ADDR
// if ValidHex ( x , y ) then
28735: LD_VAR 0 2
28739: PPUSH
28740: LD_VAR 0 3
28744: PPUSH
28745: CALL_OW 488
28749: IFFALSE 28784
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28751: LD_VAR 0 1
28755: PPUSH
28756: LD_VAR 0 2
28760: PPUSH
28761: LD_VAR 0 3
28765: PPUSH
28766: LD_INT 3
28768: PPUSH
28769: LD_INT 6
28771: PPUSH
28772: CALL_OW 12
28776: PPUSH
28777: LD_INT 1
28779: PPUSH
28780: CALL_OW 483
// end ;
28784: GO 28644
28786: POP
28787: POP
// end ;
28788: PPOPN 5
28790: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28791: LD_EXP 46
28795: PUSH
28796: LD_EXP 81
28800: AND
28801: IFFALSE 28895
28803: GO 28805
28805: DISABLE
28806: LD_INT 0
28808: PPUSH
28809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28810: LD_ADDR_VAR 0 2
28814: PUSH
28815: LD_INT 22
28817: PUSH
28818: LD_OWVAR 2
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 32
28829: PUSH
28830: LD_INT 1
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: LD_INT 21
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: EMPTY
28844: LIST
28845: LIST
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: LIST
28851: PPUSH
28852: CALL_OW 69
28856: ST_TO_ADDR
// if not tmp then
28857: LD_VAR 0 2
28861: NOT
28862: IFFALSE 28866
// exit ;
28864: GO 28895
// for i in tmp do
28866: LD_ADDR_VAR 0 1
28870: PUSH
28871: LD_VAR 0 2
28875: PUSH
28876: FOR_IN
28877: IFFALSE 28893
// SetFuel ( i , 0 ) ;
28879: LD_VAR 0 1
28883: PPUSH
28884: LD_INT 0
28886: PPUSH
28887: CALL_OW 240
28891: GO 28876
28893: POP
28894: POP
// end ;
28895: PPOPN 2
28897: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28898: LD_EXP 46
28902: PUSH
28903: LD_EXP 82
28907: AND
28908: IFFALSE 28974
28910: GO 28912
28912: DISABLE
28913: LD_INT 0
28915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28916: LD_ADDR_VAR 0 1
28920: PUSH
28921: LD_INT 22
28923: PUSH
28924: LD_OWVAR 2
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 30
28935: PUSH
28936: LD_INT 29
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: PPUSH
28947: CALL_OW 69
28951: ST_TO_ADDR
// if not tmp then
28952: LD_VAR 0 1
28956: NOT
28957: IFFALSE 28961
// exit ;
28959: GO 28974
// DestroyUnit ( tmp [ 1 ] ) ;
28961: LD_VAR 0 1
28965: PUSH
28966: LD_INT 1
28968: ARRAY
28969: PPUSH
28970: CALL_OW 65
// end ;
28974: PPOPN 1
28976: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28977: LD_EXP 46
28981: PUSH
28982: LD_EXP 84
28986: AND
28987: IFFALSE 29116
28989: GO 28991
28991: DISABLE
28992: LD_INT 0
28994: PPUSH
// begin uc_side := 0 ;
28995: LD_ADDR_OWVAR 20
28999: PUSH
29000: LD_INT 0
29002: ST_TO_ADDR
// uc_nation := nation_arabian ;
29003: LD_ADDR_OWVAR 21
29007: PUSH
29008: LD_INT 2
29010: ST_TO_ADDR
// hc_gallery :=  ;
29011: LD_ADDR_OWVAR 33
29015: PUSH
29016: LD_STRING 
29018: ST_TO_ADDR
// hc_name :=  ;
29019: LD_ADDR_OWVAR 26
29023: PUSH
29024: LD_STRING 
29026: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29027: LD_INT 1
29029: PPUSH
29030: LD_INT 11
29032: PPUSH
29033: LD_INT 10
29035: PPUSH
29036: CALL_OW 380
// un := CreateHuman ;
29040: LD_ADDR_VAR 0 1
29044: PUSH
29045: CALL_OW 44
29049: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29050: LD_VAR 0 1
29054: PPUSH
29055: LD_INT 1
29057: PPUSH
29058: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29062: LD_INT 35
29064: PPUSH
29065: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29069: LD_VAR 0 1
29073: PPUSH
29074: LD_INT 22
29076: PUSH
29077: LD_OWVAR 2
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: PPUSH
29086: CALL_OW 69
29090: PPUSH
29091: LD_VAR 0 1
29095: PPUSH
29096: CALL_OW 74
29100: PPUSH
29101: CALL_OW 115
// until IsDead ( un ) ;
29105: LD_VAR 0 1
29109: PPUSH
29110: CALL_OW 301
29114: IFFALSE 29062
// end ;
29116: PPOPN 1
29118: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29119: LD_EXP 46
29123: PUSH
29124: LD_EXP 86
29128: AND
29129: IFFALSE 29141
29131: GO 29133
29133: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29134: LD_STRING earthquake(getX(game), 0, 32)
29136: PPUSH
29137: CALL_OW 559
29141: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29142: LD_EXP 46
29146: PUSH
29147: LD_EXP 87
29151: AND
29152: IFFALSE 29243
29154: GO 29156
29156: DISABLE
29157: LD_INT 0
29159: PPUSH
// begin enable ;
29160: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29161: LD_ADDR_VAR 0 1
29165: PUSH
29166: LD_INT 22
29168: PUSH
29169: LD_OWVAR 2
29173: PUSH
29174: EMPTY
29175: LIST
29176: LIST
29177: PUSH
29178: LD_INT 21
29180: PUSH
29181: LD_INT 2
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: PUSH
29188: LD_INT 33
29190: PUSH
29191: LD_INT 3
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: EMPTY
29199: LIST
29200: LIST
29201: LIST
29202: PPUSH
29203: CALL_OW 69
29207: ST_TO_ADDR
// if not tmp then
29208: LD_VAR 0 1
29212: NOT
29213: IFFALSE 29217
// exit ;
29215: GO 29243
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29217: LD_VAR 0 1
29221: PUSH
29222: LD_INT 1
29224: PPUSH
29225: LD_VAR 0 1
29229: PPUSH
29230: CALL_OW 12
29234: ARRAY
29235: PPUSH
29236: LD_INT 1
29238: PPUSH
29239: CALL_OW 234
// end ;
29243: PPOPN 1
29245: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29246: LD_EXP 46
29250: PUSH
29251: LD_EXP 88
29255: AND
29256: IFFALSE 29397
29258: GO 29260
29260: DISABLE
29261: LD_INT 0
29263: PPUSH
29264: PPUSH
29265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29266: LD_ADDR_VAR 0 3
29270: PUSH
29271: LD_INT 22
29273: PUSH
29274: LD_OWVAR 2
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: PUSH
29283: LD_INT 25
29285: PUSH
29286: LD_INT 1
29288: PUSH
29289: EMPTY
29290: LIST
29291: LIST
29292: PUSH
29293: EMPTY
29294: LIST
29295: LIST
29296: PPUSH
29297: CALL_OW 69
29301: ST_TO_ADDR
// if not tmp then
29302: LD_VAR 0 3
29306: NOT
29307: IFFALSE 29311
// exit ;
29309: GO 29397
// un := tmp [ rand ( 1 , tmp ) ] ;
29311: LD_ADDR_VAR 0 2
29315: PUSH
29316: LD_VAR 0 3
29320: PUSH
29321: LD_INT 1
29323: PPUSH
29324: LD_VAR 0 3
29328: PPUSH
29329: CALL_OW 12
29333: ARRAY
29334: ST_TO_ADDR
// if Crawls ( un ) then
29335: LD_VAR 0 2
29339: PPUSH
29340: CALL_OW 318
29344: IFFALSE 29355
// ComWalk ( un ) ;
29346: LD_VAR 0 2
29350: PPUSH
29351: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29355: LD_VAR 0 2
29359: PPUSH
29360: LD_INT 9
29362: PPUSH
29363: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29367: LD_INT 28
29369: PPUSH
29370: LD_OWVAR 2
29374: PPUSH
29375: LD_INT 2
29377: PPUSH
29378: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29382: LD_INT 29
29384: PPUSH
29385: LD_OWVAR 2
29389: PPUSH
29390: LD_INT 2
29392: PPUSH
29393: CALL_OW 322
// end ;
29397: PPOPN 3
29399: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29400: LD_EXP 46
29404: PUSH
29405: LD_EXP 89
29409: AND
29410: IFFALSE 29521
29412: GO 29414
29414: DISABLE
29415: LD_INT 0
29417: PPUSH
29418: PPUSH
29419: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29420: LD_ADDR_VAR 0 3
29424: PUSH
29425: LD_INT 22
29427: PUSH
29428: LD_OWVAR 2
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 25
29439: PUSH
29440: LD_INT 1
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: EMPTY
29448: LIST
29449: LIST
29450: PPUSH
29451: CALL_OW 69
29455: ST_TO_ADDR
// if not tmp then
29456: LD_VAR 0 3
29460: NOT
29461: IFFALSE 29465
// exit ;
29463: GO 29521
// un := tmp [ rand ( 1 , tmp ) ] ;
29465: LD_ADDR_VAR 0 2
29469: PUSH
29470: LD_VAR 0 3
29474: PUSH
29475: LD_INT 1
29477: PPUSH
29478: LD_VAR 0 3
29482: PPUSH
29483: CALL_OW 12
29487: ARRAY
29488: ST_TO_ADDR
// if Crawls ( un ) then
29489: LD_VAR 0 2
29493: PPUSH
29494: CALL_OW 318
29498: IFFALSE 29509
// ComWalk ( un ) ;
29500: LD_VAR 0 2
29504: PPUSH
29505: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29509: LD_VAR 0 2
29513: PPUSH
29514: LD_INT 8
29516: PPUSH
29517: CALL_OW 336
// end ;
29521: PPOPN 3
29523: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29524: LD_EXP 46
29528: PUSH
29529: LD_EXP 90
29533: AND
29534: IFFALSE 29678
29536: GO 29538
29538: DISABLE
29539: LD_INT 0
29541: PPUSH
29542: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29543: LD_ADDR_VAR 0 2
29547: PUSH
29548: LD_INT 22
29550: PUSH
29551: LD_OWVAR 2
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: PUSH
29560: LD_INT 21
29562: PUSH
29563: LD_INT 2
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 2
29572: PUSH
29573: LD_INT 34
29575: PUSH
29576: LD_INT 12
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 34
29585: PUSH
29586: LD_INT 51
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 34
29595: PUSH
29596: LD_INT 32
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: LIST
29607: LIST
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: PPUSH
29614: CALL_OW 69
29618: ST_TO_ADDR
// if not tmp then
29619: LD_VAR 0 2
29623: NOT
29624: IFFALSE 29628
// exit ;
29626: GO 29678
// for i in tmp do
29628: LD_ADDR_VAR 0 1
29632: PUSH
29633: LD_VAR 0 2
29637: PUSH
29638: FOR_IN
29639: IFFALSE 29676
// if GetCargo ( i , mat_artifact ) = 0 then
29641: LD_VAR 0 1
29645: PPUSH
29646: LD_INT 4
29648: PPUSH
29649: CALL_OW 289
29653: PUSH
29654: LD_INT 0
29656: EQUAL
29657: IFFALSE 29674
// SetCargo ( i , mat_siberit , 100 ) ;
29659: LD_VAR 0 1
29663: PPUSH
29664: LD_INT 3
29666: PPUSH
29667: LD_INT 100
29669: PPUSH
29670: CALL_OW 290
29674: GO 29638
29676: POP
29677: POP
// end ;
29678: PPOPN 2
29680: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29681: LD_EXP 46
29685: PUSH
29686: LD_EXP 91
29690: AND
29691: IFFALSE 29874
29693: GO 29695
29695: DISABLE
29696: LD_INT 0
29698: PPUSH
29699: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29700: LD_ADDR_VAR 0 2
29704: PUSH
29705: LD_INT 22
29707: PUSH
29708: LD_OWVAR 2
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PPUSH
29717: CALL_OW 69
29721: ST_TO_ADDR
// if not tmp then
29722: LD_VAR 0 2
29726: NOT
29727: IFFALSE 29731
// exit ;
29729: GO 29874
// for i := 1 to 2 do
29731: LD_ADDR_VAR 0 1
29735: PUSH
29736: DOUBLE
29737: LD_INT 1
29739: DEC
29740: ST_TO_ADDR
29741: LD_INT 2
29743: PUSH
29744: FOR_TO
29745: IFFALSE 29872
// begin uc_side := your_side ;
29747: LD_ADDR_OWVAR 20
29751: PUSH
29752: LD_OWVAR 2
29756: ST_TO_ADDR
// uc_nation := nation_american ;
29757: LD_ADDR_OWVAR 21
29761: PUSH
29762: LD_INT 1
29764: ST_TO_ADDR
// vc_chassis := us_morphling ;
29765: LD_ADDR_OWVAR 37
29769: PUSH
29770: LD_INT 5
29772: ST_TO_ADDR
// vc_engine := engine_siberite ;
29773: LD_ADDR_OWVAR 39
29777: PUSH
29778: LD_INT 3
29780: ST_TO_ADDR
// vc_control := control_computer ;
29781: LD_ADDR_OWVAR 38
29785: PUSH
29786: LD_INT 3
29788: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29789: LD_ADDR_OWVAR 40
29793: PUSH
29794: LD_INT 10
29796: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29797: LD_VAR 0 2
29801: PUSH
29802: LD_INT 1
29804: ARRAY
29805: PPUSH
29806: CALL_OW 310
29810: NOT
29811: IFFALSE 29858
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29813: CALL_OW 45
29817: PPUSH
29818: LD_VAR 0 2
29822: PUSH
29823: LD_INT 1
29825: ARRAY
29826: PPUSH
29827: CALL_OW 250
29831: PPUSH
29832: LD_VAR 0 2
29836: PUSH
29837: LD_INT 1
29839: ARRAY
29840: PPUSH
29841: CALL_OW 251
29845: PPUSH
29846: LD_INT 12
29848: PPUSH
29849: LD_INT 1
29851: PPUSH
29852: CALL_OW 50
29856: GO 29870
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29858: CALL_OW 45
29862: PPUSH
29863: LD_INT 1
29865: PPUSH
29866: CALL_OW 51
// end ;
29870: GO 29744
29872: POP
29873: POP
// end ;
29874: PPOPN 2
29876: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29877: LD_EXP 46
29881: PUSH
29882: LD_EXP 92
29886: AND
29887: IFFALSE 30109
29889: GO 29891
29891: DISABLE
29892: LD_INT 0
29894: PPUSH
29895: PPUSH
29896: PPUSH
29897: PPUSH
29898: PPUSH
29899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29900: LD_ADDR_VAR 0 6
29904: PUSH
29905: LD_INT 22
29907: PUSH
29908: LD_OWVAR 2
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 21
29919: PUSH
29920: LD_INT 1
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 3
29929: PUSH
29930: LD_INT 23
29932: PUSH
29933: LD_INT 0
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: LIST
29948: PPUSH
29949: CALL_OW 69
29953: ST_TO_ADDR
// if not tmp then
29954: LD_VAR 0 6
29958: NOT
29959: IFFALSE 29963
// exit ;
29961: GO 30109
// s1 := rand ( 1 , 4 ) ;
29963: LD_ADDR_VAR 0 2
29967: PUSH
29968: LD_INT 1
29970: PPUSH
29971: LD_INT 4
29973: PPUSH
29974: CALL_OW 12
29978: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29979: LD_ADDR_VAR 0 4
29983: PUSH
29984: LD_VAR 0 6
29988: PUSH
29989: LD_INT 1
29991: ARRAY
29992: PPUSH
29993: LD_VAR 0 2
29997: PPUSH
29998: CALL_OW 259
30002: ST_TO_ADDR
// if s1 = 1 then
30003: LD_VAR 0 2
30007: PUSH
30008: LD_INT 1
30010: EQUAL
30011: IFFALSE 30031
// s2 := rand ( 2 , 4 ) else
30013: LD_ADDR_VAR 0 3
30017: PUSH
30018: LD_INT 2
30020: PPUSH
30021: LD_INT 4
30023: PPUSH
30024: CALL_OW 12
30028: ST_TO_ADDR
30029: GO 30039
// s2 := 1 ;
30031: LD_ADDR_VAR 0 3
30035: PUSH
30036: LD_INT 1
30038: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30039: LD_ADDR_VAR 0 5
30043: PUSH
30044: LD_VAR 0 6
30048: PUSH
30049: LD_INT 1
30051: ARRAY
30052: PPUSH
30053: LD_VAR 0 3
30057: PPUSH
30058: CALL_OW 259
30062: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30063: LD_VAR 0 6
30067: PUSH
30068: LD_INT 1
30070: ARRAY
30071: PPUSH
30072: LD_VAR 0 2
30076: PPUSH
30077: LD_VAR 0 5
30081: PPUSH
30082: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30086: LD_VAR 0 6
30090: PUSH
30091: LD_INT 1
30093: ARRAY
30094: PPUSH
30095: LD_VAR 0 3
30099: PPUSH
30100: LD_VAR 0 4
30104: PPUSH
30105: CALL_OW 237
// end ;
30109: PPOPN 6
30111: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30112: LD_EXP 46
30116: PUSH
30117: LD_EXP 93
30121: AND
30122: IFFALSE 30201
30124: GO 30126
30126: DISABLE
30127: LD_INT 0
30129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30130: LD_ADDR_VAR 0 1
30134: PUSH
30135: LD_INT 22
30137: PUSH
30138: LD_OWVAR 2
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 30
30149: PUSH
30150: LD_INT 3
30152: PUSH
30153: EMPTY
30154: LIST
30155: LIST
30156: PUSH
30157: EMPTY
30158: LIST
30159: LIST
30160: PPUSH
30161: CALL_OW 69
30165: ST_TO_ADDR
// if not tmp then
30166: LD_VAR 0 1
30170: NOT
30171: IFFALSE 30175
// exit ;
30173: GO 30201
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30175: LD_VAR 0 1
30179: PUSH
30180: LD_INT 1
30182: PPUSH
30183: LD_VAR 0 1
30187: PPUSH
30188: CALL_OW 12
30192: ARRAY
30193: PPUSH
30194: LD_INT 1
30196: PPUSH
30197: CALL_OW 234
// end ;
30201: PPOPN 1
30203: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30204: LD_EXP 46
30208: PUSH
30209: LD_EXP 94
30213: AND
30214: IFFALSE 30326
30216: GO 30218
30218: DISABLE
30219: LD_INT 0
30221: PPUSH
30222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30223: LD_ADDR_VAR 0 2
30227: PUSH
30228: LD_INT 22
30230: PUSH
30231: LD_OWVAR 2
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 2
30242: PUSH
30243: LD_INT 30
30245: PUSH
30246: LD_INT 27
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 30
30255: PUSH
30256: LD_INT 26
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: PUSH
30263: LD_INT 30
30265: PUSH
30266: LD_INT 28
30268: PUSH
30269: EMPTY
30270: LIST
30271: LIST
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PPUSH
30283: CALL_OW 69
30287: ST_TO_ADDR
// if not tmp then
30288: LD_VAR 0 2
30292: NOT
30293: IFFALSE 30297
// exit ;
30295: GO 30326
// for i in tmp do
30297: LD_ADDR_VAR 0 1
30301: PUSH
30302: LD_VAR 0 2
30306: PUSH
30307: FOR_IN
30308: IFFALSE 30324
// SetLives ( i , 1 ) ;
30310: LD_VAR 0 1
30314: PPUSH
30315: LD_INT 1
30317: PPUSH
30318: CALL_OW 234
30322: GO 30307
30324: POP
30325: POP
// end ;
30326: PPOPN 2
30328: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30329: LD_EXP 46
30333: PUSH
30334: LD_EXP 95
30338: AND
30339: IFFALSE 30626
30341: GO 30343
30343: DISABLE
30344: LD_INT 0
30346: PPUSH
30347: PPUSH
30348: PPUSH
// begin i := rand ( 1 , 7 ) ;
30349: LD_ADDR_VAR 0 1
30353: PUSH
30354: LD_INT 1
30356: PPUSH
30357: LD_INT 7
30359: PPUSH
30360: CALL_OW 12
30364: ST_TO_ADDR
// case i of 1 :
30365: LD_VAR 0 1
30369: PUSH
30370: LD_INT 1
30372: DOUBLE
30373: EQUAL
30374: IFTRUE 30378
30376: GO 30388
30378: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30379: LD_STRING earthquake(getX(game), 0, 32)
30381: PPUSH
30382: CALL_OW 559
30386: GO 30626
30388: LD_INT 2
30390: DOUBLE
30391: EQUAL
30392: IFTRUE 30396
30394: GO 30410
30396: POP
// begin ToLua ( displayStucuk(); ) ;
30397: LD_STRING displayStucuk();
30399: PPUSH
30400: CALL_OW 559
// ResetFog ;
30404: CALL_OW 335
// end ; 3 :
30408: GO 30626
30410: LD_INT 3
30412: DOUBLE
30413: EQUAL
30414: IFTRUE 30418
30416: GO 30522
30418: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30419: LD_ADDR_VAR 0 2
30423: PUSH
30424: LD_INT 22
30426: PUSH
30427: LD_OWVAR 2
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 25
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PPUSH
30450: CALL_OW 69
30454: ST_TO_ADDR
// if not tmp then
30455: LD_VAR 0 2
30459: NOT
30460: IFFALSE 30464
// exit ;
30462: GO 30626
// un := tmp [ rand ( 1 , tmp ) ] ;
30464: LD_ADDR_VAR 0 3
30468: PUSH
30469: LD_VAR 0 2
30473: PUSH
30474: LD_INT 1
30476: PPUSH
30477: LD_VAR 0 2
30481: PPUSH
30482: CALL_OW 12
30486: ARRAY
30487: ST_TO_ADDR
// if Crawls ( un ) then
30488: LD_VAR 0 3
30492: PPUSH
30493: CALL_OW 318
30497: IFFALSE 30508
// ComWalk ( un ) ;
30499: LD_VAR 0 3
30503: PPUSH
30504: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30508: LD_VAR 0 3
30512: PPUSH
30513: LD_INT 8
30515: PPUSH
30516: CALL_OW 336
// end ; 4 :
30520: GO 30626
30522: LD_INT 4
30524: DOUBLE
30525: EQUAL
30526: IFTRUE 30530
30528: GO 30604
30530: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30531: LD_ADDR_VAR 0 2
30535: PUSH
30536: LD_INT 22
30538: PUSH
30539: LD_OWVAR 2
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: PUSH
30548: LD_INT 30
30550: PUSH
30551: LD_INT 29
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PPUSH
30562: CALL_OW 69
30566: ST_TO_ADDR
// if not tmp then
30567: LD_VAR 0 2
30571: NOT
30572: IFFALSE 30576
// exit ;
30574: GO 30626
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30576: LD_VAR 0 2
30580: PUSH
30581: LD_INT 1
30583: ARRAY
30584: PPUSH
30585: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30589: LD_VAR 0 2
30593: PUSH
30594: LD_INT 1
30596: ARRAY
30597: PPUSH
30598: CALL_OW 65
// end ; 5 .. 7 :
30602: GO 30626
30604: LD_INT 5
30606: DOUBLE
30607: GREATEREQUAL
30608: IFFALSE 30616
30610: LD_INT 7
30612: DOUBLE
30613: LESSEQUAL
30614: IFTRUE 30618
30616: GO 30625
30618: POP
// StreamSibBomb ; end ;
30619: CALL 26863 0 0
30623: GO 30626
30625: POP
// end ;
30626: PPOPN 3
30628: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30629: LD_EXP 46
30633: PUSH
30634: LD_EXP 96
30638: AND
30639: IFFALSE 30795
30641: GO 30643
30643: DISABLE
30644: LD_INT 0
30646: PPUSH
30647: PPUSH
30648: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30649: LD_ADDR_VAR 0 2
30653: PUSH
30654: LD_INT 81
30656: PUSH
30657: LD_OWVAR 2
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 2
30668: PUSH
30669: LD_INT 21
30671: PUSH
30672: LD_INT 1
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: PUSH
30679: LD_INT 21
30681: PUSH
30682: LD_INT 2
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: PUSH
30689: EMPTY
30690: LIST
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PPUSH
30698: CALL_OW 69
30702: ST_TO_ADDR
// if not tmp then
30703: LD_VAR 0 2
30707: NOT
30708: IFFALSE 30712
// exit ;
30710: GO 30795
// p := 0 ;
30712: LD_ADDR_VAR 0 3
30716: PUSH
30717: LD_INT 0
30719: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30720: LD_INT 35
30722: PPUSH
30723: CALL_OW 67
// p := p + 1 ;
30727: LD_ADDR_VAR 0 3
30731: PUSH
30732: LD_VAR 0 3
30736: PUSH
30737: LD_INT 1
30739: PLUS
30740: ST_TO_ADDR
// for i in tmp do
30741: LD_ADDR_VAR 0 1
30745: PUSH
30746: LD_VAR 0 2
30750: PUSH
30751: FOR_IN
30752: IFFALSE 30783
// if GetLives ( i ) < 1000 then
30754: LD_VAR 0 1
30758: PPUSH
30759: CALL_OW 256
30763: PUSH
30764: LD_INT 1000
30766: LESS
30767: IFFALSE 30781
// SetLives ( i , 1000 ) ;
30769: LD_VAR 0 1
30773: PPUSH
30774: LD_INT 1000
30776: PPUSH
30777: CALL_OW 234
30781: GO 30751
30783: POP
30784: POP
// until p > 20 ;
30785: LD_VAR 0 3
30789: PUSH
30790: LD_INT 20
30792: GREATER
30793: IFFALSE 30720
// end ;
30795: PPOPN 3
30797: END
// every 0 0$1 trigger StreamModeActive and sTime do
30798: LD_EXP 46
30802: PUSH
30803: LD_EXP 97
30807: AND
30808: IFFALSE 30843
30810: GO 30812
30812: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30813: LD_INT 28
30815: PPUSH
30816: LD_OWVAR 2
30820: PPUSH
30821: LD_INT 2
30823: PPUSH
30824: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30828: LD_INT 30
30830: PPUSH
30831: LD_OWVAR 2
30835: PPUSH
30836: LD_INT 2
30838: PPUSH
30839: CALL_OW 322
// end ;
30843: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30844: LD_EXP 46
30848: PUSH
30849: LD_EXP 98
30853: AND
30854: IFFALSE 30975
30856: GO 30858
30858: DISABLE
30859: LD_INT 0
30861: PPUSH
30862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30863: LD_ADDR_VAR 0 2
30867: PUSH
30868: LD_INT 22
30870: PUSH
30871: LD_OWVAR 2
30875: PUSH
30876: EMPTY
30877: LIST
30878: LIST
30879: PUSH
30880: LD_INT 21
30882: PUSH
30883: LD_INT 1
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: LD_INT 3
30892: PUSH
30893: LD_INT 23
30895: PUSH
30896: LD_INT 0
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: LIST
30911: PPUSH
30912: CALL_OW 69
30916: ST_TO_ADDR
// if not tmp then
30917: LD_VAR 0 2
30921: NOT
30922: IFFALSE 30926
// exit ;
30924: GO 30975
// for i in tmp do
30926: LD_ADDR_VAR 0 1
30930: PUSH
30931: LD_VAR 0 2
30935: PUSH
30936: FOR_IN
30937: IFFALSE 30973
// begin if Crawls ( i ) then
30939: LD_VAR 0 1
30943: PPUSH
30944: CALL_OW 318
30948: IFFALSE 30959
// ComWalk ( i ) ;
30950: LD_VAR 0 1
30954: PPUSH
30955: CALL_OW 138
// SetClass ( i , 2 ) ;
30959: LD_VAR 0 1
30963: PPUSH
30964: LD_INT 2
30966: PPUSH
30967: CALL_OW 336
// end ;
30971: GO 30936
30973: POP
30974: POP
// end ;
30975: PPOPN 2
30977: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30978: LD_EXP 46
30982: PUSH
30983: LD_EXP 99
30987: AND
30988: IFFALSE 31276
30990: GO 30992
30992: DISABLE
30993: LD_INT 0
30995: PPUSH
30996: PPUSH
30997: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30998: LD_OWVAR 2
31002: PPUSH
31003: LD_INT 9
31005: PPUSH
31006: LD_INT 1
31008: PPUSH
31009: LD_INT 1
31011: PPUSH
31012: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31016: LD_INT 9
31018: PPUSH
31019: LD_OWVAR 2
31023: PPUSH
31024: CALL_OW 343
// uc_side := 9 ;
31028: LD_ADDR_OWVAR 20
31032: PUSH
31033: LD_INT 9
31035: ST_TO_ADDR
// uc_nation := 2 ;
31036: LD_ADDR_OWVAR 21
31040: PUSH
31041: LD_INT 2
31043: ST_TO_ADDR
// hc_name := Dark Warrior ;
31044: LD_ADDR_OWVAR 26
31048: PUSH
31049: LD_STRING Dark Warrior
31051: ST_TO_ADDR
// hc_gallery :=  ;
31052: LD_ADDR_OWVAR 33
31056: PUSH
31057: LD_STRING 
31059: ST_TO_ADDR
// hc_noskilllimit := true ;
31060: LD_ADDR_OWVAR 76
31064: PUSH
31065: LD_INT 1
31067: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31068: LD_ADDR_OWVAR 31
31072: PUSH
31073: LD_INT 30
31075: PUSH
31076: LD_INT 30
31078: PUSH
31079: LD_INT 30
31081: PUSH
31082: LD_INT 30
31084: PUSH
31085: EMPTY
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: ST_TO_ADDR
// un := CreateHuman ;
31091: LD_ADDR_VAR 0 3
31095: PUSH
31096: CALL_OW 44
31100: ST_TO_ADDR
// hc_noskilllimit := false ;
31101: LD_ADDR_OWVAR 76
31105: PUSH
31106: LD_INT 0
31108: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31109: LD_VAR 0 3
31113: PPUSH
31114: LD_INT 1
31116: PPUSH
31117: CALL_OW 51
// ToLua ( playRanger() ) ;
31121: LD_STRING playRanger()
31123: PPUSH
31124: CALL_OW 559
// p := 0 ;
31128: LD_ADDR_VAR 0 2
31132: PUSH
31133: LD_INT 0
31135: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31136: LD_INT 35
31138: PPUSH
31139: CALL_OW 67
// p := p + 1 ;
31143: LD_ADDR_VAR 0 2
31147: PUSH
31148: LD_VAR 0 2
31152: PUSH
31153: LD_INT 1
31155: PLUS
31156: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31157: LD_VAR 0 3
31161: PPUSH
31162: CALL_OW 256
31166: PUSH
31167: LD_INT 1000
31169: LESS
31170: IFFALSE 31184
// SetLives ( un , 1000 ) ;
31172: LD_VAR 0 3
31176: PPUSH
31177: LD_INT 1000
31179: PPUSH
31180: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31184: LD_VAR 0 3
31188: PPUSH
31189: LD_INT 81
31191: PUSH
31192: LD_OWVAR 2
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 91
31203: PUSH
31204: LD_VAR 0 3
31208: PUSH
31209: LD_INT 30
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: LIST
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PPUSH
31221: CALL_OW 69
31225: PPUSH
31226: LD_VAR 0 3
31230: PPUSH
31231: CALL_OW 74
31235: PPUSH
31236: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31240: LD_VAR 0 2
31244: PUSH
31245: LD_INT 80
31247: GREATER
31248: PUSH
31249: LD_VAR 0 3
31253: PPUSH
31254: CALL_OW 301
31258: OR
31259: IFFALSE 31136
// if un then
31261: LD_VAR 0 3
31265: IFFALSE 31276
// RemoveUnit ( un ) ;
31267: LD_VAR 0 3
31271: PPUSH
31272: CALL_OW 64
// end ;
31276: PPOPN 3
31278: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31279: LD_EXP 100
31283: IFFALSE 31399
31285: GO 31287
31287: DISABLE
31288: LD_INT 0
31290: PPUSH
31291: PPUSH
31292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31293: LD_ADDR_VAR 0 2
31297: PUSH
31298: LD_INT 81
31300: PUSH
31301: LD_OWVAR 2
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 21
31312: PUSH
31313: LD_INT 1
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PPUSH
31324: CALL_OW 69
31328: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31329: LD_STRING playComputer()
31331: PPUSH
31332: CALL_OW 559
// if not tmp then
31336: LD_VAR 0 2
31340: NOT
31341: IFFALSE 31345
// exit ;
31343: GO 31399
// for i in tmp do
31345: LD_ADDR_VAR 0 1
31349: PUSH
31350: LD_VAR 0 2
31354: PUSH
31355: FOR_IN
31356: IFFALSE 31397
// for j := 1 to 4 do
31358: LD_ADDR_VAR 0 3
31362: PUSH
31363: DOUBLE
31364: LD_INT 1
31366: DEC
31367: ST_TO_ADDR
31368: LD_INT 4
31370: PUSH
31371: FOR_TO
31372: IFFALSE 31393
// SetSkill ( i , j , 10 ) ;
31374: LD_VAR 0 1
31378: PPUSH
31379: LD_VAR 0 3
31383: PPUSH
31384: LD_INT 10
31386: PPUSH
31387: CALL_OW 237
31391: GO 31371
31393: POP
31394: POP
31395: GO 31355
31397: POP
31398: POP
// end ;
31399: PPOPN 3
31401: END
// every 0 0$1 trigger s30 do var i , tmp ;
31402: LD_EXP 101
31406: IFFALSE 31475
31408: GO 31410
31410: DISABLE
31411: LD_INT 0
31413: PPUSH
31414: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31415: LD_ADDR_VAR 0 2
31419: PUSH
31420: LD_INT 22
31422: PUSH
31423: LD_OWVAR 2
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PPUSH
31432: CALL_OW 69
31436: ST_TO_ADDR
// if not tmp then
31437: LD_VAR 0 2
31441: NOT
31442: IFFALSE 31446
// exit ;
31444: GO 31475
// for i in tmp do
31446: LD_ADDR_VAR 0 1
31450: PUSH
31451: LD_VAR 0 2
31455: PUSH
31456: FOR_IN
31457: IFFALSE 31473
// SetLives ( i , 300 ) ;
31459: LD_VAR 0 1
31463: PPUSH
31464: LD_INT 300
31466: PPUSH
31467: CALL_OW 234
31471: GO 31456
31473: POP
31474: POP
// end ;
31475: PPOPN 2
31477: END
// every 0 0$1 trigger s60 do var i , tmp ;
31478: LD_EXP 102
31482: IFFALSE 31551
31484: GO 31486
31486: DISABLE
31487: LD_INT 0
31489: PPUSH
31490: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31491: LD_ADDR_VAR 0 2
31495: PUSH
31496: LD_INT 22
31498: PUSH
31499: LD_OWVAR 2
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PPUSH
31508: CALL_OW 69
31512: ST_TO_ADDR
// if not tmp then
31513: LD_VAR 0 2
31517: NOT
31518: IFFALSE 31522
// exit ;
31520: GO 31551
// for i in tmp do
31522: LD_ADDR_VAR 0 1
31526: PUSH
31527: LD_VAR 0 2
31531: PUSH
31532: FOR_IN
31533: IFFALSE 31549
// SetLives ( i , 600 ) ;
31535: LD_VAR 0 1
31539: PPUSH
31540: LD_INT 600
31542: PPUSH
31543: CALL_OW 234
31547: GO 31532
31549: POP
31550: POP
// end ;
31551: PPOPN 2
31553: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31554: LD_INT 0
31556: PPUSH
// case cmd of 301 :
31557: LD_VAR 0 1
31561: PUSH
31562: LD_INT 301
31564: DOUBLE
31565: EQUAL
31566: IFTRUE 31570
31568: GO 31602
31570: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31571: LD_VAR 0 6
31575: PPUSH
31576: LD_VAR 0 7
31580: PPUSH
31581: LD_VAR 0 8
31585: PPUSH
31586: LD_VAR 0 4
31590: PPUSH
31591: LD_VAR 0 5
31595: PPUSH
31596: CALL 32811 0 5
31600: GO 31723
31602: LD_INT 302
31604: DOUBLE
31605: EQUAL
31606: IFTRUE 31610
31608: GO 31647
31610: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31611: LD_VAR 0 6
31615: PPUSH
31616: LD_VAR 0 7
31620: PPUSH
31621: LD_VAR 0 8
31625: PPUSH
31626: LD_VAR 0 9
31630: PPUSH
31631: LD_VAR 0 4
31635: PPUSH
31636: LD_VAR 0 5
31640: PPUSH
31641: CALL 32902 0 6
31645: GO 31723
31647: LD_INT 303
31649: DOUBLE
31650: EQUAL
31651: IFTRUE 31655
31653: GO 31692
31655: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31656: LD_VAR 0 6
31660: PPUSH
31661: LD_VAR 0 7
31665: PPUSH
31666: LD_VAR 0 8
31670: PPUSH
31671: LD_VAR 0 9
31675: PPUSH
31676: LD_VAR 0 4
31680: PPUSH
31681: LD_VAR 0 5
31685: PPUSH
31686: CALL 31728 0 6
31690: GO 31723
31692: LD_INT 304
31694: DOUBLE
31695: EQUAL
31696: IFTRUE 31700
31698: GO 31722
31700: POP
// hHackTeleport ( unit , x , y ) ; end ;
31701: LD_VAR 0 2
31705: PPUSH
31706: LD_VAR 0 4
31710: PPUSH
31711: LD_VAR 0 5
31715: PPUSH
31716: CALL 33495 0 3
31720: GO 31723
31722: POP
// end ;
31723: LD_VAR 0 12
31727: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31728: LD_INT 0
31730: PPUSH
31731: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31732: LD_VAR 0 1
31736: PUSH
31737: LD_INT 1
31739: LESS
31740: PUSH
31741: LD_VAR 0 1
31745: PUSH
31746: LD_INT 3
31748: GREATER
31749: OR
31750: PUSH
31751: LD_VAR 0 5
31755: PPUSH
31756: LD_VAR 0 6
31760: PPUSH
31761: CALL_OW 428
31765: OR
31766: IFFALSE 31770
// exit ;
31768: GO 32498
// uc_side := your_side ;
31770: LD_ADDR_OWVAR 20
31774: PUSH
31775: LD_OWVAR 2
31779: ST_TO_ADDR
// uc_nation := nation ;
31780: LD_ADDR_OWVAR 21
31784: PUSH
31785: LD_VAR 0 1
31789: ST_TO_ADDR
// bc_level = 1 ;
31790: LD_ADDR_OWVAR 43
31794: PUSH
31795: LD_INT 1
31797: ST_TO_ADDR
// case btype of 1 :
31798: LD_VAR 0 2
31802: PUSH
31803: LD_INT 1
31805: DOUBLE
31806: EQUAL
31807: IFTRUE 31811
31809: GO 31822
31811: POP
// bc_type := b_depot ; 2 :
31812: LD_ADDR_OWVAR 42
31816: PUSH
31817: LD_INT 0
31819: ST_TO_ADDR
31820: GO 32442
31822: LD_INT 2
31824: DOUBLE
31825: EQUAL
31826: IFTRUE 31830
31828: GO 31841
31830: POP
// bc_type := b_warehouse ; 3 :
31831: LD_ADDR_OWVAR 42
31835: PUSH
31836: LD_INT 1
31838: ST_TO_ADDR
31839: GO 32442
31841: LD_INT 3
31843: DOUBLE
31844: EQUAL
31845: IFTRUE 31849
31847: GO 31860
31849: POP
// bc_type := b_lab ; 4 .. 9 :
31850: LD_ADDR_OWVAR 42
31854: PUSH
31855: LD_INT 6
31857: ST_TO_ADDR
31858: GO 32442
31860: LD_INT 4
31862: DOUBLE
31863: GREATEREQUAL
31864: IFFALSE 31872
31866: LD_INT 9
31868: DOUBLE
31869: LESSEQUAL
31870: IFTRUE 31874
31872: GO 31934
31874: POP
// begin bc_type := b_lab_half ;
31875: LD_ADDR_OWVAR 42
31879: PUSH
31880: LD_INT 7
31882: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31883: LD_ADDR_OWVAR 44
31887: PUSH
31888: LD_INT 10
31890: PUSH
31891: LD_INT 11
31893: PUSH
31894: LD_INT 12
31896: PUSH
31897: LD_INT 15
31899: PUSH
31900: LD_INT 14
31902: PUSH
31903: LD_INT 13
31905: PUSH
31906: EMPTY
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: PUSH
31914: LD_VAR 0 2
31918: PUSH
31919: LD_INT 3
31921: MINUS
31922: ARRAY
31923: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
31924: LD_ADDR_OWVAR 45
31928: PUSH
31929: LD_INT 9
31931: ST_TO_ADDR
// end ; 10 .. 13 :
31932: GO 32442
31934: LD_INT 10
31936: DOUBLE
31937: GREATEREQUAL
31938: IFFALSE 31946
31940: LD_INT 13
31942: DOUBLE
31943: LESSEQUAL
31944: IFTRUE 31948
31946: GO 32025
31948: POP
// begin bc_type := b_lab_full ;
31949: LD_ADDR_OWVAR 42
31953: PUSH
31954: LD_INT 8
31956: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31957: LD_ADDR_OWVAR 44
31961: PUSH
31962: LD_INT 10
31964: PUSH
31965: LD_INT 12
31967: PUSH
31968: LD_INT 14
31970: PUSH
31971: LD_INT 13
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: PUSH
31980: LD_VAR 0 2
31984: PUSH
31985: LD_INT 9
31987: MINUS
31988: ARRAY
31989: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31990: LD_ADDR_OWVAR 45
31994: PUSH
31995: LD_INT 11
31997: PUSH
31998: LD_INT 15
32000: PUSH
32001: LD_INT 12
32003: PUSH
32004: LD_INT 15
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: PUSH
32013: LD_VAR 0 2
32017: PUSH
32018: LD_INT 9
32020: MINUS
32021: ARRAY
32022: ST_TO_ADDR
// end ; 14 :
32023: GO 32442
32025: LD_INT 14
32027: DOUBLE
32028: EQUAL
32029: IFTRUE 32033
32031: GO 32044
32033: POP
// bc_type := b_workshop ; 15 :
32034: LD_ADDR_OWVAR 42
32038: PUSH
32039: LD_INT 2
32041: ST_TO_ADDR
32042: GO 32442
32044: LD_INT 15
32046: DOUBLE
32047: EQUAL
32048: IFTRUE 32052
32050: GO 32063
32052: POP
// bc_type := b_factory ; 16 :
32053: LD_ADDR_OWVAR 42
32057: PUSH
32058: LD_INT 3
32060: ST_TO_ADDR
32061: GO 32442
32063: LD_INT 16
32065: DOUBLE
32066: EQUAL
32067: IFTRUE 32071
32069: GO 32082
32071: POP
// bc_type := b_ext_gun ; 17 :
32072: LD_ADDR_OWVAR 42
32076: PUSH
32077: LD_INT 17
32079: ST_TO_ADDR
32080: GO 32442
32082: LD_INT 17
32084: DOUBLE
32085: EQUAL
32086: IFTRUE 32090
32088: GO 32118
32090: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32091: LD_ADDR_OWVAR 42
32095: PUSH
32096: LD_INT 19
32098: PUSH
32099: LD_INT 23
32101: PUSH
32102: LD_INT 19
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: LIST
32109: PUSH
32110: LD_VAR 0 1
32114: ARRAY
32115: ST_TO_ADDR
32116: GO 32442
32118: LD_INT 18
32120: DOUBLE
32121: EQUAL
32122: IFTRUE 32126
32124: GO 32137
32126: POP
// bc_type := b_ext_radar ; 19 :
32127: LD_ADDR_OWVAR 42
32131: PUSH
32132: LD_INT 20
32134: ST_TO_ADDR
32135: GO 32442
32137: LD_INT 19
32139: DOUBLE
32140: EQUAL
32141: IFTRUE 32145
32143: GO 32156
32145: POP
// bc_type := b_ext_radio ; 20 :
32146: LD_ADDR_OWVAR 42
32150: PUSH
32151: LD_INT 22
32153: ST_TO_ADDR
32154: GO 32442
32156: LD_INT 20
32158: DOUBLE
32159: EQUAL
32160: IFTRUE 32164
32162: GO 32175
32164: POP
// bc_type := b_ext_siberium ; 21 :
32165: LD_ADDR_OWVAR 42
32169: PUSH
32170: LD_INT 21
32172: ST_TO_ADDR
32173: GO 32442
32175: LD_INT 21
32177: DOUBLE
32178: EQUAL
32179: IFTRUE 32183
32181: GO 32194
32183: POP
// bc_type := b_ext_computer ; 22 :
32184: LD_ADDR_OWVAR 42
32188: PUSH
32189: LD_INT 24
32191: ST_TO_ADDR
32192: GO 32442
32194: LD_INT 22
32196: DOUBLE
32197: EQUAL
32198: IFTRUE 32202
32200: GO 32213
32202: POP
// bc_type := b_ext_track ; 23 :
32203: LD_ADDR_OWVAR 42
32207: PUSH
32208: LD_INT 16
32210: ST_TO_ADDR
32211: GO 32442
32213: LD_INT 23
32215: DOUBLE
32216: EQUAL
32217: IFTRUE 32221
32219: GO 32232
32221: POP
// bc_type := b_ext_laser ; 24 :
32222: LD_ADDR_OWVAR 42
32226: PUSH
32227: LD_INT 25
32229: ST_TO_ADDR
32230: GO 32442
32232: LD_INT 24
32234: DOUBLE
32235: EQUAL
32236: IFTRUE 32240
32238: GO 32251
32240: POP
// bc_type := b_control_tower ; 25 :
32241: LD_ADDR_OWVAR 42
32245: PUSH
32246: LD_INT 36
32248: ST_TO_ADDR
32249: GO 32442
32251: LD_INT 25
32253: DOUBLE
32254: EQUAL
32255: IFTRUE 32259
32257: GO 32270
32259: POP
// bc_type := b_breastwork ; 26 :
32260: LD_ADDR_OWVAR 42
32264: PUSH
32265: LD_INT 31
32267: ST_TO_ADDR
32268: GO 32442
32270: LD_INT 26
32272: DOUBLE
32273: EQUAL
32274: IFTRUE 32278
32276: GO 32289
32278: POP
// bc_type := b_bunker ; 27 :
32279: LD_ADDR_OWVAR 42
32283: PUSH
32284: LD_INT 32
32286: ST_TO_ADDR
32287: GO 32442
32289: LD_INT 27
32291: DOUBLE
32292: EQUAL
32293: IFTRUE 32297
32295: GO 32308
32297: POP
// bc_type := b_turret ; 28 :
32298: LD_ADDR_OWVAR 42
32302: PUSH
32303: LD_INT 33
32305: ST_TO_ADDR
32306: GO 32442
32308: LD_INT 28
32310: DOUBLE
32311: EQUAL
32312: IFTRUE 32316
32314: GO 32327
32316: POP
// bc_type := b_armoury ; 29 :
32317: LD_ADDR_OWVAR 42
32321: PUSH
32322: LD_INT 4
32324: ST_TO_ADDR
32325: GO 32442
32327: LD_INT 29
32329: DOUBLE
32330: EQUAL
32331: IFTRUE 32335
32333: GO 32346
32335: POP
// bc_type := b_barracks ; 30 :
32336: LD_ADDR_OWVAR 42
32340: PUSH
32341: LD_INT 5
32343: ST_TO_ADDR
32344: GO 32442
32346: LD_INT 30
32348: DOUBLE
32349: EQUAL
32350: IFTRUE 32354
32352: GO 32365
32354: POP
// bc_type := b_solar_power ; 31 :
32355: LD_ADDR_OWVAR 42
32359: PUSH
32360: LD_INT 27
32362: ST_TO_ADDR
32363: GO 32442
32365: LD_INT 31
32367: DOUBLE
32368: EQUAL
32369: IFTRUE 32373
32371: GO 32384
32373: POP
// bc_type := b_oil_power ; 32 :
32374: LD_ADDR_OWVAR 42
32378: PUSH
32379: LD_INT 26
32381: ST_TO_ADDR
32382: GO 32442
32384: LD_INT 32
32386: DOUBLE
32387: EQUAL
32388: IFTRUE 32392
32390: GO 32403
32392: POP
// bc_type := b_siberite_power ; 33 :
32393: LD_ADDR_OWVAR 42
32397: PUSH
32398: LD_INT 28
32400: ST_TO_ADDR
32401: GO 32442
32403: LD_INT 33
32405: DOUBLE
32406: EQUAL
32407: IFTRUE 32411
32409: GO 32422
32411: POP
// bc_type := b_oil_mine ; 34 :
32412: LD_ADDR_OWVAR 42
32416: PUSH
32417: LD_INT 29
32419: ST_TO_ADDR
32420: GO 32442
32422: LD_INT 34
32424: DOUBLE
32425: EQUAL
32426: IFTRUE 32430
32428: GO 32441
32430: POP
// bc_type := b_siberite_mine ; end ;
32431: LD_ADDR_OWVAR 42
32435: PUSH
32436: LD_INT 30
32438: ST_TO_ADDR
32439: GO 32442
32441: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32442: LD_ADDR_VAR 0 8
32446: PUSH
32447: LD_VAR 0 5
32451: PPUSH
32452: LD_VAR 0 6
32456: PPUSH
32457: LD_VAR 0 3
32461: PPUSH
32462: CALL_OW 47
32466: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32467: LD_OWVAR 42
32471: PUSH
32472: LD_INT 32
32474: PUSH
32475: LD_INT 33
32477: PUSH
32478: EMPTY
32479: LIST
32480: LIST
32481: IN
32482: IFFALSE 32498
// PlaceWeaponTurret ( b , weapon ) ;
32484: LD_VAR 0 8
32488: PPUSH
32489: LD_VAR 0 4
32493: PPUSH
32494: CALL_OW 431
// end ;
32498: LD_VAR 0 7
32502: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32503: LD_INT 0
32505: PPUSH
32506: PPUSH
32507: PPUSH
32508: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32509: LD_ADDR_VAR 0 4
32513: PUSH
32514: LD_INT 22
32516: PUSH
32517: LD_OWVAR 2
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 2
32528: PUSH
32529: LD_INT 30
32531: PUSH
32532: LD_INT 0
32534: PUSH
32535: EMPTY
32536: LIST
32537: LIST
32538: PUSH
32539: LD_INT 30
32541: PUSH
32542: LD_INT 1
32544: PUSH
32545: EMPTY
32546: LIST
32547: LIST
32548: PUSH
32549: EMPTY
32550: LIST
32551: LIST
32552: LIST
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PPUSH
32558: CALL_OW 69
32562: ST_TO_ADDR
// if not tmp then
32563: LD_VAR 0 4
32567: NOT
32568: IFFALSE 32572
// exit ;
32570: GO 32631
// for i in tmp do
32572: LD_ADDR_VAR 0 2
32576: PUSH
32577: LD_VAR 0 4
32581: PUSH
32582: FOR_IN
32583: IFFALSE 32629
// for j = 1 to 3 do
32585: LD_ADDR_VAR 0 3
32589: PUSH
32590: DOUBLE
32591: LD_INT 1
32593: DEC
32594: ST_TO_ADDR
32595: LD_INT 3
32597: PUSH
32598: FOR_TO
32599: IFFALSE 32625
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32601: LD_VAR 0 2
32605: PPUSH
32606: CALL_OW 274
32610: PPUSH
32611: LD_VAR 0 3
32615: PPUSH
32616: LD_INT 99999
32618: PPUSH
32619: CALL_OW 277
32623: GO 32598
32625: POP
32626: POP
32627: GO 32582
32629: POP
32630: POP
// end ;
32631: LD_VAR 0 1
32635: RET
// export function hHackSetLevel10 ; var i , j ; begin
32636: LD_INT 0
32638: PPUSH
32639: PPUSH
32640: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32641: LD_ADDR_VAR 0 2
32645: PUSH
32646: LD_INT 21
32648: PUSH
32649: LD_INT 1
32651: PUSH
32652: EMPTY
32653: LIST
32654: LIST
32655: PPUSH
32656: CALL_OW 69
32660: PUSH
32661: FOR_IN
32662: IFFALSE 32714
// if IsSelected ( i ) then
32664: LD_VAR 0 2
32668: PPUSH
32669: CALL_OW 306
32673: IFFALSE 32712
// begin for j := 1 to 4 do
32675: LD_ADDR_VAR 0 3
32679: PUSH
32680: DOUBLE
32681: LD_INT 1
32683: DEC
32684: ST_TO_ADDR
32685: LD_INT 4
32687: PUSH
32688: FOR_TO
32689: IFFALSE 32710
// SetSkill ( i , j , 10 ) ;
32691: LD_VAR 0 2
32695: PPUSH
32696: LD_VAR 0 3
32700: PPUSH
32701: LD_INT 10
32703: PPUSH
32704: CALL_OW 237
32708: GO 32688
32710: POP
32711: POP
// end ;
32712: GO 32661
32714: POP
32715: POP
// end ;
32716: LD_VAR 0 1
32720: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32721: LD_INT 0
32723: PPUSH
32724: PPUSH
32725: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32726: LD_ADDR_VAR 0 2
32730: PUSH
32731: LD_INT 22
32733: PUSH
32734: LD_OWVAR 2
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 21
32745: PUSH
32746: LD_INT 1
32748: PUSH
32749: EMPTY
32750: LIST
32751: LIST
32752: PUSH
32753: EMPTY
32754: LIST
32755: LIST
32756: PPUSH
32757: CALL_OW 69
32761: PUSH
32762: FOR_IN
32763: IFFALSE 32804
// begin for j := 1 to 4 do
32765: LD_ADDR_VAR 0 3
32769: PUSH
32770: DOUBLE
32771: LD_INT 1
32773: DEC
32774: ST_TO_ADDR
32775: LD_INT 4
32777: PUSH
32778: FOR_TO
32779: IFFALSE 32800
// SetSkill ( i , j , 10 ) ;
32781: LD_VAR 0 2
32785: PPUSH
32786: LD_VAR 0 3
32790: PPUSH
32791: LD_INT 10
32793: PPUSH
32794: CALL_OW 237
32798: GO 32778
32800: POP
32801: POP
// end ;
32802: GO 32762
32804: POP
32805: POP
// end ;
32806: LD_VAR 0 1
32810: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32811: LD_INT 0
32813: PPUSH
// uc_side := your_side ;
32814: LD_ADDR_OWVAR 20
32818: PUSH
32819: LD_OWVAR 2
32823: ST_TO_ADDR
// uc_nation := nation ;
32824: LD_ADDR_OWVAR 21
32828: PUSH
32829: LD_VAR 0 1
32833: ST_TO_ADDR
// InitHc ;
32834: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32838: LD_INT 0
32840: PPUSH
32841: LD_VAR 0 2
32845: PPUSH
32846: LD_VAR 0 3
32850: PPUSH
32851: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32855: LD_VAR 0 4
32859: PPUSH
32860: LD_VAR 0 5
32864: PPUSH
32865: CALL_OW 428
32869: PUSH
32870: LD_INT 0
32872: EQUAL
32873: IFFALSE 32897
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32875: CALL_OW 44
32879: PPUSH
32880: LD_VAR 0 4
32884: PPUSH
32885: LD_VAR 0 5
32889: PPUSH
32890: LD_INT 1
32892: PPUSH
32893: CALL_OW 48
// end ;
32897: LD_VAR 0 6
32901: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32902: LD_INT 0
32904: PPUSH
32905: PPUSH
// uc_side := your_side ;
32906: LD_ADDR_OWVAR 20
32910: PUSH
32911: LD_OWVAR 2
32915: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32916: LD_VAR 0 1
32920: PUSH
32921: LD_INT 1
32923: PUSH
32924: LD_INT 2
32926: PUSH
32927: LD_INT 3
32929: PUSH
32930: LD_INT 4
32932: PUSH
32933: LD_INT 5
32935: PUSH
32936: EMPTY
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: IN
32943: IFFALSE 32955
// uc_nation := nation_american else
32945: LD_ADDR_OWVAR 21
32949: PUSH
32950: LD_INT 1
32952: ST_TO_ADDR
32953: GO 32998
// if chassis in [ 11 , 12 , 13 , 14 ] then
32955: LD_VAR 0 1
32959: PUSH
32960: LD_INT 11
32962: PUSH
32963: LD_INT 12
32965: PUSH
32966: LD_INT 13
32968: PUSH
32969: LD_INT 14
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: IN
32978: IFFALSE 32990
// uc_nation := nation_arabian else
32980: LD_ADDR_OWVAR 21
32984: PUSH
32985: LD_INT 2
32987: ST_TO_ADDR
32988: GO 32998
// uc_nation := nation_russian ;
32990: LD_ADDR_OWVAR 21
32994: PUSH
32995: LD_INT 3
32997: ST_TO_ADDR
// vc_chassis := chassis ;
32998: LD_ADDR_OWVAR 37
33002: PUSH
33003: LD_VAR 0 1
33007: ST_TO_ADDR
// vc_engine := engine ;
33008: LD_ADDR_OWVAR 39
33012: PUSH
33013: LD_VAR 0 2
33017: ST_TO_ADDR
// vc_control := control ;
33018: LD_ADDR_OWVAR 38
33022: PUSH
33023: LD_VAR 0 3
33027: ST_TO_ADDR
// vc_weapon := weapon ;
33028: LD_ADDR_OWVAR 40
33032: PUSH
33033: LD_VAR 0 4
33037: ST_TO_ADDR
// un := CreateVehicle ;
33038: LD_ADDR_VAR 0 8
33042: PUSH
33043: CALL_OW 45
33047: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33048: LD_VAR 0 8
33052: PPUSH
33053: LD_INT 0
33055: PPUSH
33056: LD_INT 5
33058: PPUSH
33059: CALL_OW 12
33063: PPUSH
33064: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33068: LD_VAR 0 8
33072: PPUSH
33073: LD_VAR 0 5
33077: PPUSH
33078: LD_VAR 0 6
33082: PPUSH
33083: LD_INT 1
33085: PPUSH
33086: CALL_OW 48
// end ;
33090: LD_VAR 0 7
33094: RET
// export hInvincible ; every 1 do
33095: GO 33097
33097: DISABLE
// hInvincible := [ ] ;
33098: LD_ADDR_EXP 103
33102: PUSH
33103: EMPTY
33104: ST_TO_ADDR
33105: END
// every 10 do var i ;
33106: GO 33108
33108: DISABLE
33109: LD_INT 0
33111: PPUSH
// begin enable ;
33112: ENABLE
// if not hInvincible then
33113: LD_EXP 103
33117: NOT
33118: IFFALSE 33122
// exit ;
33120: GO 33166
// for i in hInvincible do
33122: LD_ADDR_VAR 0 1
33126: PUSH
33127: LD_EXP 103
33131: PUSH
33132: FOR_IN
33133: IFFALSE 33164
// if GetLives ( i ) < 1000 then
33135: LD_VAR 0 1
33139: PPUSH
33140: CALL_OW 256
33144: PUSH
33145: LD_INT 1000
33147: LESS
33148: IFFALSE 33162
// SetLives ( i , 1000 ) ;
33150: LD_VAR 0 1
33154: PPUSH
33155: LD_INT 1000
33157: PPUSH
33158: CALL_OW 234
33162: GO 33132
33164: POP
33165: POP
// end ;
33166: PPOPN 1
33168: END
// export function hHackInvincible ; var i ; begin
33169: LD_INT 0
33171: PPUSH
33172: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33173: LD_ADDR_VAR 0 2
33177: PUSH
33178: LD_INT 2
33180: PUSH
33181: LD_INT 21
33183: PUSH
33184: LD_INT 1
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 21
33193: PUSH
33194: LD_INT 2
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: EMPTY
33202: LIST
33203: LIST
33204: LIST
33205: PPUSH
33206: CALL_OW 69
33210: PUSH
33211: FOR_IN
33212: IFFALSE 33273
// if IsSelected ( i ) then
33214: LD_VAR 0 2
33218: PPUSH
33219: CALL_OW 306
33223: IFFALSE 33271
// begin if i in hInvincible then
33225: LD_VAR 0 2
33229: PUSH
33230: LD_EXP 103
33234: IN
33235: IFFALSE 33255
// hInvincible := hInvincible diff i else
33237: LD_ADDR_EXP 103
33241: PUSH
33242: LD_EXP 103
33246: PUSH
33247: LD_VAR 0 2
33251: DIFF
33252: ST_TO_ADDR
33253: GO 33271
// hInvincible := hInvincible union i ;
33255: LD_ADDR_EXP 103
33259: PUSH
33260: LD_EXP 103
33264: PUSH
33265: LD_VAR 0 2
33269: UNION
33270: ST_TO_ADDR
// end ;
33271: GO 33211
33273: POP
33274: POP
// end ;
33275: LD_VAR 0 1
33279: RET
// export function hHackInvisible ; var i , j ; begin
33280: LD_INT 0
33282: PPUSH
33283: PPUSH
33284: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33285: LD_ADDR_VAR 0 2
33289: PUSH
33290: LD_INT 21
33292: PUSH
33293: LD_INT 1
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PPUSH
33300: CALL_OW 69
33304: PUSH
33305: FOR_IN
33306: IFFALSE 33330
// if IsSelected ( i ) then
33308: LD_VAR 0 2
33312: PPUSH
33313: CALL_OW 306
33317: IFFALSE 33328
// ComForceInvisible ( i ) ;
33319: LD_VAR 0 2
33323: PPUSH
33324: CALL_OW 496
33328: GO 33305
33330: POP
33331: POP
// end ;
33332: LD_VAR 0 1
33336: RET
// export function hHackChangeYourSide ; begin
33337: LD_INT 0
33339: PPUSH
// if your_side = 8 then
33340: LD_OWVAR 2
33344: PUSH
33345: LD_INT 8
33347: EQUAL
33348: IFFALSE 33360
// your_side := 0 else
33350: LD_ADDR_OWVAR 2
33354: PUSH
33355: LD_INT 0
33357: ST_TO_ADDR
33358: GO 33374
// your_side := your_side + 1 ;
33360: LD_ADDR_OWVAR 2
33364: PUSH
33365: LD_OWVAR 2
33369: PUSH
33370: LD_INT 1
33372: PLUS
33373: ST_TO_ADDR
// end ;
33374: LD_VAR 0 1
33378: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33379: LD_INT 0
33381: PPUSH
33382: PPUSH
33383: PPUSH
// for i in all_units do
33384: LD_ADDR_VAR 0 2
33388: PUSH
33389: LD_OWVAR 3
33393: PUSH
33394: FOR_IN
33395: IFFALSE 33473
// if IsSelected ( i ) then
33397: LD_VAR 0 2
33401: PPUSH
33402: CALL_OW 306
33406: IFFALSE 33471
// begin j := GetSide ( i ) ;
33408: LD_ADDR_VAR 0 3
33412: PUSH
33413: LD_VAR 0 2
33417: PPUSH
33418: CALL_OW 255
33422: ST_TO_ADDR
// if j = 8 then
33423: LD_VAR 0 3
33427: PUSH
33428: LD_INT 8
33430: EQUAL
33431: IFFALSE 33443
// j := 0 else
33433: LD_ADDR_VAR 0 3
33437: PUSH
33438: LD_INT 0
33440: ST_TO_ADDR
33441: GO 33457
// j := j + 1 ;
33443: LD_ADDR_VAR 0 3
33447: PUSH
33448: LD_VAR 0 3
33452: PUSH
33453: LD_INT 1
33455: PLUS
33456: ST_TO_ADDR
// SetSide ( i , j ) ;
33457: LD_VAR 0 2
33461: PPUSH
33462: LD_VAR 0 3
33466: PPUSH
33467: CALL_OW 235
// end ;
33471: GO 33394
33473: POP
33474: POP
// end ;
33475: LD_VAR 0 1
33479: RET
// export function hHackFog ; begin
33480: LD_INT 0
33482: PPUSH
// FogOff ( true ) ;
33483: LD_INT 1
33485: PPUSH
33486: CALL_OW 344
// end ;
33490: LD_VAR 0 1
33494: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33495: LD_INT 0
33497: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33498: LD_VAR 0 1
33502: PPUSH
33503: LD_VAR 0 2
33507: PPUSH
33508: LD_VAR 0 3
33512: PPUSH
33513: LD_INT 1
33515: PPUSH
33516: LD_INT 1
33518: PPUSH
33519: CALL_OW 483
// CenterOnXY ( x , y ) ;
33523: LD_VAR 0 2
33527: PPUSH
33528: LD_VAR 0 3
33532: PPUSH
33533: CALL_OW 84
// end ;
33537: LD_VAR 0 4
33541: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33542: LD_INT 0
33544: PPUSH
33545: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33546: LD_VAR 0 1
33550: NOT
33551: PUSH
33552: LD_VAR 0 2
33556: PPUSH
33557: LD_VAR 0 3
33561: PPUSH
33562: CALL_OW 488
33566: NOT
33567: OR
33568: PUSH
33569: LD_VAR 0 1
33573: PPUSH
33574: CALL_OW 266
33578: PUSH
33579: LD_INT 3
33581: NONEQUAL
33582: PUSH
33583: LD_VAR 0 1
33587: PPUSH
33588: CALL_OW 247
33592: PUSH
33593: LD_INT 1
33595: EQUAL
33596: NOT
33597: AND
33598: OR
33599: IFFALSE 33603
// exit ;
33601: GO 33752
// if GetType ( factory ) = unit_human then
33603: LD_VAR 0 1
33607: PPUSH
33608: CALL_OW 247
33612: PUSH
33613: LD_INT 1
33615: EQUAL
33616: IFFALSE 33633
// factory := IsInUnit ( factory ) ;
33618: LD_ADDR_VAR 0 1
33622: PUSH
33623: LD_VAR 0 1
33627: PPUSH
33628: CALL_OW 310
33632: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33633: LD_VAR 0 1
33637: PPUSH
33638: CALL_OW 266
33642: PUSH
33643: LD_INT 3
33645: NONEQUAL
33646: IFFALSE 33650
// exit ;
33648: GO 33752
// if HexInfo ( x , y ) = factory then
33650: LD_VAR 0 2
33654: PPUSH
33655: LD_VAR 0 3
33659: PPUSH
33660: CALL_OW 428
33664: PUSH
33665: LD_VAR 0 1
33669: EQUAL
33670: IFFALSE 33697
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33672: LD_ADDR_EXP 104
33676: PUSH
33677: LD_EXP 104
33681: PPUSH
33682: LD_VAR 0 1
33686: PPUSH
33687: LD_INT 0
33689: PPUSH
33690: CALL_OW 1
33694: ST_TO_ADDR
33695: GO 33748
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33697: LD_ADDR_EXP 104
33701: PUSH
33702: LD_EXP 104
33706: PPUSH
33707: LD_VAR 0 1
33711: PPUSH
33712: LD_VAR 0 1
33716: PPUSH
33717: CALL_OW 255
33721: PUSH
33722: LD_VAR 0 1
33726: PUSH
33727: LD_VAR 0 2
33731: PUSH
33732: LD_VAR 0 3
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: PPUSH
33743: CALL_OW 1
33747: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33748: CALL 33757 0 0
// end ;
33752: LD_VAR 0 4
33756: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33757: LD_INT 0
33759: PPUSH
33760: PPUSH
33761: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33762: LD_STRING resetFactoryWaypoint();
33764: PPUSH
33765: CALL_OW 559
// if factoryWaypoints then
33769: LD_EXP 104
33773: IFFALSE 33899
// begin list := PrepareArray ( factoryWaypoints ) ;
33775: LD_ADDR_VAR 0 3
33779: PUSH
33780: LD_EXP 104
33784: PPUSH
33785: CALL 81207 0 1
33789: ST_TO_ADDR
// for i := 1 to list do
33790: LD_ADDR_VAR 0 2
33794: PUSH
33795: DOUBLE
33796: LD_INT 1
33798: DEC
33799: ST_TO_ADDR
33800: LD_VAR 0 3
33804: PUSH
33805: FOR_TO
33806: IFFALSE 33897
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33808: LD_STRING setFactoryWaypointXY(
33810: PUSH
33811: LD_VAR 0 3
33815: PUSH
33816: LD_VAR 0 2
33820: ARRAY
33821: PUSH
33822: LD_INT 1
33824: ARRAY
33825: STR
33826: PUSH
33827: LD_STRING ,
33829: STR
33830: PUSH
33831: LD_VAR 0 3
33835: PUSH
33836: LD_VAR 0 2
33840: ARRAY
33841: PUSH
33842: LD_INT 2
33844: ARRAY
33845: STR
33846: PUSH
33847: LD_STRING ,
33849: STR
33850: PUSH
33851: LD_VAR 0 3
33855: PUSH
33856: LD_VAR 0 2
33860: ARRAY
33861: PUSH
33862: LD_INT 3
33864: ARRAY
33865: STR
33866: PUSH
33867: LD_STRING ,
33869: STR
33870: PUSH
33871: LD_VAR 0 3
33875: PUSH
33876: LD_VAR 0 2
33880: ARRAY
33881: PUSH
33882: LD_INT 4
33884: ARRAY
33885: STR
33886: PUSH
33887: LD_STRING )
33889: STR
33890: PPUSH
33891: CALL_OW 559
33895: GO 33805
33897: POP
33898: POP
// end ; end ;
33899: LD_VAR 0 1
33903: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33904: LD_INT 0
33906: PPUSH
// if HexInfo ( x , y ) = warehouse then
33907: LD_VAR 0 2
33911: PPUSH
33912: LD_VAR 0 3
33916: PPUSH
33917: CALL_OW 428
33921: PUSH
33922: LD_VAR 0 1
33926: EQUAL
33927: IFFALSE 33954
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33929: LD_ADDR_EXP 105
33933: PUSH
33934: LD_EXP 105
33938: PPUSH
33939: LD_VAR 0 1
33943: PPUSH
33944: LD_INT 0
33946: PPUSH
33947: CALL_OW 1
33951: ST_TO_ADDR
33952: GO 34005
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33954: LD_ADDR_EXP 105
33958: PUSH
33959: LD_EXP 105
33963: PPUSH
33964: LD_VAR 0 1
33968: PPUSH
33969: LD_VAR 0 1
33973: PPUSH
33974: CALL_OW 255
33978: PUSH
33979: LD_VAR 0 1
33983: PUSH
33984: LD_VAR 0 2
33988: PUSH
33989: LD_VAR 0 3
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: PPUSH
34000: CALL_OW 1
34004: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34005: CALL 34014 0 0
// end ;
34009: LD_VAR 0 4
34013: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34014: LD_INT 0
34016: PPUSH
34017: PPUSH
34018: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34019: LD_STRING resetWarehouseGatheringPoints();
34021: PPUSH
34022: CALL_OW 559
// if warehouseGatheringPoints then
34026: LD_EXP 105
34030: IFFALSE 34156
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34032: LD_ADDR_VAR 0 3
34036: PUSH
34037: LD_EXP 105
34041: PPUSH
34042: CALL 81207 0 1
34046: ST_TO_ADDR
// for i := 1 to list do
34047: LD_ADDR_VAR 0 2
34051: PUSH
34052: DOUBLE
34053: LD_INT 1
34055: DEC
34056: ST_TO_ADDR
34057: LD_VAR 0 3
34061: PUSH
34062: FOR_TO
34063: IFFALSE 34154
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34065: LD_STRING setWarehouseGatheringPointXY(
34067: PUSH
34068: LD_VAR 0 3
34072: PUSH
34073: LD_VAR 0 2
34077: ARRAY
34078: PUSH
34079: LD_INT 1
34081: ARRAY
34082: STR
34083: PUSH
34084: LD_STRING ,
34086: STR
34087: PUSH
34088: LD_VAR 0 3
34092: PUSH
34093: LD_VAR 0 2
34097: ARRAY
34098: PUSH
34099: LD_INT 2
34101: ARRAY
34102: STR
34103: PUSH
34104: LD_STRING ,
34106: STR
34107: PUSH
34108: LD_VAR 0 3
34112: PUSH
34113: LD_VAR 0 2
34117: ARRAY
34118: PUSH
34119: LD_INT 3
34121: ARRAY
34122: STR
34123: PUSH
34124: LD_STRING ,
34126: STR
34127: PUSH
34128: LD_VAR 0 3
34132: PUSH
34133: LD_VAR 0 2
34137: ARRAY
34138: PUSH
34139: LD_INT 4
34141: ARRAY
34142: STR
34143: PUSH
34144: LD_STRING )
34146: STR
34147: PPUSH
34148: CALL_OW 559
34152: GO 34062
34154: POP
34155: POP
// end ; end ;
34156: LD_VAR 0 1
34160: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34161: LD_EXP 105
34165: IFFALSE 34850
34167: GO 34169
34169: DISABLE
34170: LD_INT 0
34172: PPUSH
34173: PPUSH
34174: PPUSH
34175: PPUSH
34176: PPUSH
34177: PPUSH
34178: PPUSH
34179: PPUSH
34180: PPUSH
// begin enable ;
34181: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34182: LD_ADDR_VAR 0 3
34186: PUSH
34187: LD_EXP 105
34191: PPUSH
34192: CALL 81207 0 1
34196: ST_TO_ADDR
// if not list then
34197: LD_VAR 0 3
34201: NOT
34202: IFFALSE 34206
// exit ;
34204: GO 34850
// for i := 1 to list do
34206: LD_ADDR_VAR 0 1
34210: PUSH
34211: DOUBLE
34212: LD_INT 1
34214: DEC
34215: ST_TO_ADDR
34216: LD_VAR 0 3
34220: PUSH
34221: FOR_TO
34222: IFFALSE 34848
// begin depot := list [ i ] [ 2 ] ;
34224: LD_ADDR_VAR 0 8
34228: PUSH
34229: LD_VAR 0 3
34233: PUSH
34234: LD_VAR 0 1
34238: ARRAY
34239: PUSH
34240: LD_INT 2
34242: ARRAY
34243: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34244: LD_ADDR_VAR 0 5
34248: PUSH
34249: LD_VAR 0 3
34253: PUSH
34254: LD_VAR 0 1
34258: ARRAY
34259: PUSH
34260: LD_INT 1
34262: ARRAY
34263: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34264: LD_VAR 0 8
34268: PPUSH
34269: CALL_OW 301
34273: PUSH
34274: LD_VAR 0 5
34278: PUSH
34279: LD_VAR 0 8
34283: PPUSH
34284: CALL_OW 255
34288: NONEQUAL
34289: OR
34290: IFFALSE 34319
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34292: LD_ADDR_EXP 105
34296: PUSH
34297: LD_EXP 105
34301: PPUSH
34302: LD_VAR 0 8
34306: PPUSH
34307: LD_INT 0
34309: PPUSH
34310: CALL_OW 1
34314: ST_TO_ADDR
// exit ;
34315: POP
34316: POP
34317: GO 34850
// end ; x := list [ i ] [ 3 ] ;
34319: LD_ADDR_VAR 0 6
34323: PUSH
34324: LD_VAR 0 3
34328: PUSH
34329: LD_VAR 0 1
34333: ARRAY
34334: PUSH
34335: LD_INT 3
34337: ARRAY
34338: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34339: LD_ADDR_VAR 0 7
34343: PUSH
34344: LD_VAR 0 3
34348: PUSH
34349: LD_VAR 0 1
34353: ARRAY
34354: PUSH
34355: LD_INT 4
34357: ARRAY
34358: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34359: LD_ADDR_VAR 0 9
34363: PUSH
34364: LD_VAR 0 6
34368: PPUSH
34369: LD_VAR 0 7
34373: PPUSH
34374: LD_INT 16
34376: PPUSH
34377: CALL 79795 0 3
34381: ST_TO_ADDR
// if not cratesNearbyPoint then
34382: LD_VAR 0 9
34386: NOT
34387: IFFALSE 34393
// exit ;
34389: POP
34390: POP
34391: GO 34850
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34393: LD_ADDR_VAR 0 4
34397: PUSH
34398: LD_INT 22
34400: PUSH
34401: LD_VAR 0 5
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 3
34412: PUSH
34413: LD_INT 60
34415: PUSH
34416: EMPTY
34417: LIST
34418: PUSH
34419: EMPTY
34420: LIST
34421: LIST
34422: PUSH
34423: LD_INT 91
34425: PUSH
34426: LD_VAR 0 8
34430: PUSH
34431: LD_INT 6
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: LD_INT 25
34444: PUSH
34445: LD_INT 2
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: PUSH
34452: LD_INT 25
34454: PUSH
34455: LD_INT 16
34457: PUSH
34458: EMPTY
34459: LIST
34460: LIST
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: LIST
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: PPUSH
34473: CALL_OW 69
34477: PUSH
34478: LD_VAR 0 8
34482: PPUSH
34483: CALL_OW 313
34487: PPUSH
34488: LD_INT 3
34490: PUSH
34491: LD_INT 60
34493: PUSH
34494: EMPTY
34495: LIST
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 2
34503: PUSH
34504: LD_INT 25
34506: PUSH
34507: LD_INT 2
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: PUSH
34514: LD_INT 25
34516: PUSH
34517: LD_INT 16
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: LIST
34528: PUSH
34529: EMPTY
34530: LIST
34531: LIST
34532: PPUSH
34533: CALL_OW 72
34537: UNION
34538: ST_TO_ADDR
// if tmp then
34539: LD_VAR 0 4
34543: IFFALSE 34623
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34545: LD_ADDR_VAR 0 4
34549: PUSH
34550: LD_VAR 0 4
34554: PPUSH
34555: LD_INT 3
34557: PPUSH
34558: CALL 77764 0 2
34562: ST_TO_ADDR
// for j in tmp do
34563: LD_ADDR_VAR 0 2
34567: PUSH
34568: LD_VAR 0 4
34572: PUSH
34573: FOR_IN
34574: IFFALSE 34617
// begin if IsInUnit ( j ) then
34576: LD_VAR 0 2
34580: PPUSH
34581: CALL_OW 310
34585: IFFALSE 34596
// ComExit ( j ) ;
34587: LD_VAR 0 2
34591: PPUSH
34592: CALL 77847 0 1
// AddComCollect ( j , x , y ) ;
34596: LD_VAR 0 2
34600: PPUSH
34601: LD_VAR 0 6
34605: PPUSH
34606: LD_VAR 0 7
34610: PPUSH
34611: CALL_OW 177
// end ;
34615: GO 34573
34617: POP
34618: POP
// exit ;
34619: POP
34620: POP
34621: GO 34850
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34623: LD_ADDR_VAR 0 4
34627: PUSH
34628: LD_INT 22
34630: PUSH
34631: LD_VAR 0 5
34635: PUSH
34636: EMPTY
34637: LIST
34638: LIST
34639: PUSH
34640: LD_INT 91
34642: PUSH
34643: LD_VAR 0 8
34647: PUSH
34648: LD_INT 8
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 2
34658: PUSH
34659: LD_INT 34
34661: PUSH
34662: LD_INT 12
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 34
34671: PUSH
34672: LD_INT 51
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 34
34681: PUSH
34682: LD_INT 32
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 34
34691: PUSH
34692: LD_INT 89
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: LIST
34710: PPUSH
34711: CALL_OW 69
34715: ST_TO_ADDR
// if tmp then
34716: LD_VAR 0 4
34720: IFFALSE 34846
// begin for j in tmp do
34722: LD_ADDR_VAR 0 2
34726: PUSH
34727: LD_VAR 0 4
34731: PUSH
34732: FOR_IN
34733: IFFALSE 34844
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34735: LD_VAR 0 2
34739: PPUSH
34740: CALL_OW 262
34744: PUSH
34745: LD_INT 3
34747: EQUAL
34748: PUSH
34749: LD_VAR 0 2
34753: PPUSH
34754: CALL_OW 261
34758: PUSH
34759: LD_INT 20
34761: GREATER
34762: OR
34763: PUSH
34764: LD_VAR 0 2
34768: PPUSH
34769: CALL_OW 314
34773: NOT
34774: AND
34775: PUSH
34776: LD_VAR 0 2
34780: PPUSH
34781: CALL_OW 263
34785: PUSH
34786: LD_INT 1
34788: NONEQUAL
34789: PUSH
34790: LD_VAR 0 2
34794: PPUSH
34795: CALL_OW 311
34799: OR
34800: AND
34801: IFFALSE 34842
// begin ComCollect ( j , x , y ) ;
34803: LD_VAR 0 2
34807: PPUSH
34808: LD_VAR 0 6
34812: PPUSH
34813: LD_VAR 0 7
34817: PPUSH
34818: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34822: LD_VAR 0 2
34826: PPUSH
34827: LD_VAR 0 8
34831: PPUSH
34832: CALL_OW 172
// exit ;
34836: POP
34837: POP
34838: POP
34839: POP
34840: GO 34850
// end ;
34842: GO 34732
34844: POP
34845: POP
// end ; end ;
34846: GO 34221
34848: POP
34849: POP
// end ; end_of_file
34850: PPOPN 9
34852: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34853: LD_INT 0
34855: PPUSH
34856: PPUSH
34857: PPUSH
34858: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34859: LD_VAR 0 1
34863: PPUSH
34864: CALL_OW 264
34868: PUSH
34869: LD_INT 91
34871: EQUAL
34872: IFFALSE 34944
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34874: LD_INT 68
34876: PPUSH
34877: LD_VAR 0 1
34881: PPUSH
34882: CALL_OW 255
34886: PPUSH
34887: CALL_OW 321
34891: PUSH
34892: LD_INT 2
34894: EQUAL
34895: IFFALSE 34907
// eff := 70 else
34897: LD_ADDR_VAR 0 4
34901: PUSH
34902: LD_INT 70
34904: ST_TO_ADDR
34905: GO 34915
// eff := 30 ;
34907: LD_ADDR_VAR 0 4
34911: PUSH
34912: LD_INT 30
34914: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34915: LD_VAR 0 1
34919: PPUSH
34920: CALL_OW 250
34924: PPUSH
34925: LD_VAR 0 1
34929: PPUSH
34930: CALL_OW 251
34934: PPUSH
34935: LD_VAR 0 4
34939: PPUSH
34940: CALL_OW 495
// end ; end ;
34944: LD_VAR 0 2
34948: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34949: LD_INT 0
34951: PPUSH
// end ;
34952: LD_VAR 0 4
34956: RET
// export function SOS_Command ( cmd ) ; begin
34957: LD_INT 0
34959: PPUSH
// end ;
34960: LD_VAR 0 2
34964: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34965: LD_INT 0
34967: PPUSH
// end ;
34968: LD_VAR 0 6
34972: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34973: LD_INT 0
34975: PPUSH
34976: PPUSH
// if not vehicle or not factory then
34977: LD_VAR 0 1
34981: NOT
34982: PUSH
34983: LD_VAR 0 2
34987: NOT
34988: OR
34989: IFFALSE 34993
// exit ;
34991: GO 35224
// if factoryWaypoints >= factory then
34993: LD_EXP 104
34997: PUSH
34998: LD_VAR 0 2
35002: GREATEREQUAL
35003: IFFALSE 35224
// if factoryWaypoints [ factory ] then
35005: LD_EXP 104
35009: PUSH
35010: LD_VAR 0 2
35014: ARRAY
35015: IFFALSE 35224
// begin if GetControl ( vehicle ) = control_manual then
35017: LD_VAR 0 1
35021: PPUSH
35022: CALL_OW 263
35026: PUSH
35027: LD_INT 1
35029: EQUAL
35030: IFFALSE 35111
// begin driver := IsDrivenBy ( vehicle ) ;
35032: LD_ADDR_VAR 0 4
35036: PUSH
35037: LD_VAR 0 1
35041: PPUSH
35042: CALL_OW 311
35046: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35047: LD_VAR 0 4
35051: PPUSH
35052: LD_EXP 104
35056: PUSH
35057: LD_VAR 0 2
35061: ARRAY
35062: PUSH
35063: LD_INT 3
35065: ARRAY
35066: PPUSH
35067: LD_EXP 104
35071: PUSH
35072: LD_VAR 0 2
35076: ARRAY
35077: PUSH
35078: LD_INT 4
35080: ARRAY
35081: PPUSH
35082: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35086: LD_VAR 0 4
35090: PPUSH
35091: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35095: LD_VAR 0 4
35099: PPUSH
35100: LD_VAR 0 2
35104: PPUSH
35105: CALL_OW 180
// end else
35109: GO 35224
// if GetControl ( vehicle ) = control_remote then
35111: LD_VAR 0 1
35115: PPUSH
35116: CALL_OW 263
35120: PUSH
35121: LD_INT 2
35123: EQUAL
35124: IFFALSE 35185
// begin wait ( 0 0$2 ) ;
35126: LD_INT 70
35128: PPUSH
35129: CALL_OW 67
// if Connect ( vehicle ) then
35133: LD_VAR 0 1
35137: PPUSH
35138: CALL 48055 0 1
35142: IFFALSE 35183
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35144: LD_VAR 0 1
35148: PPUSH
35149: LD_EXP 104
35153: PUSH
35154: LD_VAR 0 2
35158: ARRAY
35159: PUSH
35160: LD_INT 3
35162: ARRAY
35163: PPUSH
35164: LD_EXP 104
35168: PUSH
35169: LD_VAR 0 2
35173: ARRAY
35174: PUSH
35175: LD_INT 4
35177: ARRAY
35178: PPUSH
35179: CALL_OW 171
// end else
35183: GO 35224
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35185: LD_VAR 0 1
35189: PPUSH
35190: LD_EXP 104
35194: PUSH
35195: LD_VAR 0 2
35199: ARRAY
35200: PUSH
35201: LD_INT 3
35203: ARRAY
35204: PPUSH
35205: LD_EXP 104
35209: PUSH
35210: LD_VAR 0 2
35214: ARRAY
35215: PUSH
35216: LD_INT 4
35218: ARRAY
35219: PPUSH
35220: CALL_OW 171
// end ; end ;
35224: LD_VAR 0 3
35228: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35229: LD_INT 0
35231: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35232: LD_VAR 0 1
35236: PUSH
35237: LD_INT 250
35239: EQUAL
35240: PUSH
35241: LD_VAR 0 2
35245: PPUSH
35246: CALL_OW 264
35250: PUSH
35251: LD_INT 81
35253: EQUAL
35254: AND
35255: IFFALSE 35276
// MinerPlaceMine ( unit , x , y ) ;
35257: LD_VAR 0 2
35261: PPUSH
35262: LD_VAR 0 4
35266: PPUSH
35267: LD_VAR 0 5
35271: PPUSH
35272: CALL 38266 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35276: LD_VAR 0 1
35280: PUSH
35281: LD_INT 251
35283: EQUAL
35284: PUSH
35285: LD_VAR 0 2
35289: PPUSH
35290: CALL_OW 264
35294: PUSH
35295: LD_INT 81
35297: EQUAL
35298: AND
35299: IFFALSE 35320
// MinerDetonateMine ( unit , x , y ) ;
35301: LD_VAR 0 2
35305: PPUSH
35306: LD_VAR 0 4
35310: PPUSH
35311: LD_VAR 0 5
35315: PPUSH
35316: CALL 38541 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35320: LD_VAR 0 1
35324: PUSH
35325: LD_INT 252
35327: EQUAL
35328: PUSH
35329: LD_VAR 0 2
35333: PPUSH
35334: CALL_OW 264
35338: PUSH
35339: LD_INT 81
35341: EQUAL
35342: AND
35343: IFFALSE 35364
// MinerCreateMinefield ( unit , x , y ) ;
35345: LD_VAR 0 2
35349: PPUSH
35350: LD_VAR 0 4
35354: PPUSH
35355: LD_VAR 0 5
35359: PPUSH
35360: CALL 38958 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35364: LD_VAR 0 1
35368: PUSH
35369: LD_INT 253
35371: EQUAL
35372: PUSH
35373: LD_VAR 0 2
35377: PPUSH
35378: CALL_OW 257
35382: PUSH
35383: LD_INT 5
35385: EQUAL
35386: AND
35387: IFFALSE 35408
// ComBinocular ( unit , x , y ) ;
35389: LD_VAR 0 2
35393: PPUSH
35394: LD_VAR 0 4
35398: PPUSH
35399: LD_VAR 0 5
35403: PPUSH
35404: CALL 39327 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35408: LD_VAR 0 1
35412: PUSH
35413: LD_INT 254
35415: EQUAL
35416: PUSH
35417: LD_VAR 0 2
35421: PPUSH
35422: CALL_OW 264
35426: PUSH
35427: LD_INT 99
35429: EQUAL
35430: AND
35431: PUSH
35432: LD_VAR 0 3
35436: PPUSH
35437: CALL_OW 263
35441: PUSH
35442: LD_INT 3
35444: EQUAL
35445: AND
35446: IFFALSE 35462
// HackDestroyVehicle ( unit , selectedUnit ) ;
35448: LD_VAR 0 2
35452: PPUSH
35453: LD_VAR 0 3
35457: PPUSH
35458: CALL 37630 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35462: LD_VAR 0 1
35466: PUSH
35467: LD_INT 255
35469: EQUAL
35470: PUSH
35471: LD_VAR 0 2
35475: PPUSH
35476: CALL_OW 264
35480: PUSH
35481: LD_INT 14
35483: PUSH
35484: LD_INT 53
35486: PUSH
35487: EMPTY
35488: LIST
35489: LIST
35490: IN
35491: AND
35492: PUSH
35493: LD_VAR 0 4
35497: PPUSH
35498: LD_VAR 0 5
35502: PPUSH
35503: CALL_OW 488
35507: AND
35508: IFFALSE 35532
// CutTreeXYR ( unit , x , y , 12 ) ;
35510: LD_VAR 0 2
35514: PPUSH
35515: LD_VAR 0 4
35519: PPUSH
35520: LD_VAR 0 5
35524: PPUSH
35525: LD_INT 12
35527: PPUSH
35528: CALL 35627 0 4
// if cmd = 256 then
35532: LD_VAR 0 1
35536: PUSH
35537: LD_INT 256
35539: EQUAL
35540: IFFALSE 35561
// SetFactoryWaypoint ( unit , x , y ) ;
35542: LD_VAR 0 2
35546: PPUSH
35547: LD_VAR 0 4
35551: PPUSH
35552: LD_VAR 0 5
35556: PPUSH
35557: CALL 33542 0 3
// if cmd = 257 then
35561: LD_VAR 0 1
35565: PUSH
35566: LD_INT 257
35568: EQUAL
35569: IFFALSE 35590
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35571: LD_VAR 0 2
35575: PPUSH
35576: LD_VAR 0 4
35580: PPUSH
35581: LD_VAR 0 5
35585: PPUSH
35586: CALL 33904 0 3
// if cmd = 258 then
35590: LD_VAR 0 1
35594: PUSH
35595: LD_INT 258
35597: EQUAL
35598: IFFALSE 35622
// BurnTreeXYR ( unit , x , y , 8 ) ;
35600: LD_VAR 0 2
35604: PPUSH
35605: LD_VAR 0 4
35609: PPUSH
35610: LD_VAR 0 5
35614: PPUSH
35615: LD_INT 8
35617: PPUSH
35618: CALL 36021 0 4
// end ;
35622: LD_VAR 0 6
35626: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35627: LD_INT 0
35629: PPUSH
35630: PPUSH
35631: PPUSH
35632: PPUSH
35633: PPUSH
35634: PPUSH
35635: PPUSH
35636: PPUSH
35637: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
35638: LD_VAR 0 1
35642: PPUSH
35643: CALL_OW 302
35647: NOT
35648: PUSH
35649: LD_VAR 0 2
35653: PPUSH
35654: LD_VAR 0 3
35658: PPUSH
35659: CALL_OW 488
35663: NOT
35664: OR
35665: PUSH
35666: LD_VAR 0 4
35670: NOT
35671: OR
35672: IFFALSE 35676
// exit ;
35674: GO 36016
// list := [ ] ;
35676: LD_ADDR_VAR 0 13
35680: PUSH
35681: EMPTY
35682: ST_TO_ADDR
// if x - r < 0 then
35683: LD_VAR 0 2
35687: PUSH
35688: LD_VAR 0 4
35692: MINUS
35693: PUSH
35694: LD_INT 0
35696: LESS
35697: IFFALSE 35709
// min_x := 0 else
35699: LD_ADDR_VAR 0 7
35703: PUSH
35704: LD_INT 0
35706: ST_TO_ADDR
35707: GO 35725
// min_x := x - r ;
35709: LD_ADDR_VAR 0 7
35713: PUSH
35714: LD_VAR 0 2
35718: PUSH
35719: LD_VAR 0 4
35723: MINUS
35724: ST_TO_ADDR
// if y - r < 0 then
35725: LD_VAR 0 3
35729: PUSH
35730: LD_VAR 0 4
35734: MINUS
35735: PUSH
35736: LD_INT 0
35738: LESS
35739: IFFALSE 35751
// min_y := 0 else
35741: LD_ADDR_VAR 0 8
35745: PUSH
35746: LD_INT 0
35748: ST_TO_ADDR
35749: GO 35767
// min_y := y - r ;
35751: LD_ADDR_VAR 0 8
35755: PUSH
35756: LD_VAR 0 3
35760: PUSH
35761: LD_VAR 0 4
35765: MINUS
35766: ST_TO_ADDR
// max_x := x + r ;
35767: LD_ADDR_VAR 0 9
35771: PUSH
35772: LD_VAR 0 2
35776: PUSH
35777: LD_VAR 0 4
35781: PLUS
35782: ST_TO_ADDR
// max_y := y + r ;
35783: LD_ADDR_VAR 0 10
35787: PUSH
35788: LD_VAR 0 3
35792: PUSH
35793: LD_VAR 0 4
35797: PLUS
35798: ST_TO_ADDR
// for _x = min_x to max_x do
35799: LD_ADDR_VAR 0 11
35803: PUSH
35804: DOUBLE
35805: LD_VAR 0 7
35809: DEC
35810: ST_TO_ADDR
35811: LD_VAR 0 9
35815: PUSH
35816: FOR_TO
35817: IFFALSE 35934
// for _y = min_y to max_y do
35819: LD_ADDR_VAR 0 12
35823: PUSH
35824: DOUBLE
35825: LD_VAR 0 8
35829: DEC
35830: ST_TO_ADDR
35831: LD_VAR 0 10
35835: PUSH
35836: FOR_TO
35837: IFFALSE 35930
// begin if not ValidHex ( _x , _y ) then
35839: LD_VAR 0 11
35843: PPUSH
35844: LD_VAR 0 12
35848: PPUSH
35849: CALL_OW 488
35853: NOT
35854: IFFALSE 35858
// continue ;
35856: GO 35836
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35858: LD_VAR 0 11
35862: PPUSH
35863: LD_VAR 0 12
35867: PPUSH
35868: CALL_OW 351
35872: PUSH
35873: LD_VAR 0 11
35877: PPUSH
35878: LD_VAR 0 12
35882: PPUSH
35883: CALL_OW 554
35887: AND
35888: IFFALSE 35928
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35890: LD_ADDR_VAR 0 13
35894: PUSH
35895: LD_VAR 0 13
35899: PPUSH
35900: LD_VAR 0 13
35904: PUSH
35905: LD_INT 1
35907: PLUS
35908: PPUSH
35909: LD_VAR 0 11
35913: PUSH
35914: LD_VAR 0 12
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PPUSH
35923: CALL_OW 2
35927: ST_TO_ADDR
// end ;
35928: GO 35836
35930: POP
35931: POP
35932: GO 35816
35934: POP
35935: POP
// if not list then
35936: LD_VAR 0 13
35940: NOT
35941: IFFALSE 35945
// exit ;
35943: GO 36016
// for i in list do
35945: LD_ADDR_VAR 0 6
35949: PUSH
35950: LD_VAR 0 13
35954: PUSH
35955: FOR_IN
35956: IFFALSE 36014
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35958: LD_VAR 0 1
35962: PPUSH
35963: LD_STRING M
35965: PUSH
35966: LD_VAR 0 6
35970: PUSH
35971: LD_INT 1
35973: ARRAY
35974: PUSH
35975: LD_VAR 0 6
35979: PUSH
35980: LD_INT 2
35982: ARRAY
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: LD_INT 0
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: PUSH
36005: EMPTY
36006: LIST
36007: PPUSH
36008: CALL_OW 447
36012: GO 35955
36014: POP
36015: POP
// end ;
36016: LD_VAR 0 5
36020: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36021: LD_INT 0
36023: PPUSH
36024: PPUSH
36025: PPUSH
36026: PPUSH
36027: PPUSH
36028: PPUSH
36029: PPUSH
36030: PPUSH
36031: PPUSH
36032: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36033: LD_VAR 0 1
36037: PPUSH
36038: CALL_OW 302
36042: NOT
36043: PUSH
36044: LD_VAR 0 2
36048: PPUSH
36049: LD_VAR 0 3
36053: PPUSH
36054: CALL_OW 488
36058: NOT
36059: OR
36060: PUSH
36061: LD_VAR 0 4
36065: NOT
36066: OR
36067: IFFALSE 36071
// exit ;
36069: GO 36584
// list := [ ] ;
36071: LD_ADDR_VAR 0 13
36075: PUSH
36076: EMPTY
36077: ST_TO_ADDR
// if x - r < 0 then
36078: LD_VAR 0 2
36082: PUSH
36083: LD_VAR 0 4
36087: MINUS
36088: PUSH
36089: LD_INT 0
36091: LESS
36092: IFFALSE 36104
// min_x := 0 else
36094: LD_ADDR_VAR 0 7
36098: PUSH
36099: LD_INT 0
36101: ST_TO_ADDR
36102: GO 36120
// min_x := x - r ;
36104: LD_ADDR_VAR 0 7
36108: PUSH
36109: LD_VAR 0 2
36113: PUSH
36114: LD_VAR 0 4
36118: MINUS
36119: ST_TO_ADDR
// if y - r < 0 then
36120: LD_VAR 0 3
36124: PUSH
36125: LD_VAR 0 4
36129: MINUS
36130: PUSH
36131: LD_INT 0
36133: LESS
36134: IFFALSE 36146
// min_y := 0 else
36136: LD_ADDR_VAR 0 8
36140: PUSH
36141: LD_INT 0
36143: ST_TO_ADDR
36144: GO 36162
// min_y := y - r ;
36146: LD_ADDR_VAR 0 8
36150: PUSH
36151: LD_VAR 0 3
36155: PUSH
36156: LD_VAR 0 4
36160: MINUS
36161: ST_TO_ADDR
// max_x := x + r ;
36162: LD_ADDR_VAR 0 9
36166: PUSH
36167: LD_VAR 0 2
36171: PUSH
36172: LD_VAR 0 4
36176: PLUS
36177: ST_TO_ADDR
// max_y := y + r ;
36178: LD_ADDR_VAR 0 10
36182: PUSH
36183: LD_VAR 0 3
36187: PUSH
36188: LD_VAR 0 4
36192: PLUS
36193: ST_TO_ADDR
// for _x = min_x to max_x do
36194: LD_ADDR_VAR 0 11
36198: PUSH
36199: DOUBLE
36200: LD_VAR 0 7
36204: DEC
36205: ST_TO_ADDR
36206: LD_VAR 0 9
36210: PUSH
36211: FOR_TO
36212: IFFALSE 36329
// for _y = min_y to max_y do
36214: LD_ADDR_VAR 0 12
36218: PUSH
36219: DOUBLE
36220: LD_VAR 0 8
36224: DEC
36225: ST_TO_ADDR
36226: LD_VAR 0 10
36230: PUSH
36231: FOR_TO
36232: IFFALSE 36325
// begin if not ValidHex ( _x , _y ) then
36234: LD_VAR 0 11
36238: PPUSH
36239: LD_VAR 0 12
36243: PPUSH
36244: CALL_OW 488
36248: NOT
36249: IFFALSE 36253
// continue ;
36251: GO 36231
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36253: LD_VAR 0 11
36257: PPUSH
36258: LD_VAR 0 12
36262: PPUSH
36263: CALL_OW 351
36267: PUSH
36268: LD_VAR 0 11
36272: PPUSH
36273: LD_VAR 0 12
36277: PPUSH
36278: CALL_OW 554
36282: AND
36283: IFFALSE 36323
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36285: LD_ADDR_VAR 0 13
36289: PUSH
36290: LD_VAR 0 13
36294: PPUSH
36295: LD_VAR 0 13
36299: PUSH
36300: LD_INT 1
36302: PLUS
36303: PPUSH
36304: LD_VAR 0 11
36308: PUSH
36309: LD_VAR 0 12
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PPUSH
36318: CALL_OW 2
36322: ST_TO_ADDR
// end ;
36323: GO 36231
36325: POP
36326: POP
36327: GO 36211
36329: POP
36330: POP
// if not list then
36331: LD_VAR 0 13
36335: NOT
36336: IFFALSE 36340
// exit ;
36338: GO 36584
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
36340: LD_ADDR_VAR 0 13
36344: PUSH
36345: LD_VAR 0 1
36349: PPUSH
36350: LD_VAR 0 13
36354: PPUSH
36355: LD_INT 1
36357: PPUSH
36358: LD_INT 1
36360: PPUSH
36361: CALL 45197 0 4
36365: ST_TO_ADDR
// ComStop ( flame ) ;
36366: LD_VAR 0 1
36370: PPUSH
36371: CALL_OW 141
// for i in list do
36375: LD_ADDR_VAR 0 6
36379: PUSH
36380: LD_VAR 0 13
36384: PUSH
36385: FOR_IN
36386: IFFALSE 36417
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
36388: LD_VAR 0 1
36392: PPUSH
36393: LD_VAR 0 6
36397: PUSH
36398: LD_INT 1
36400: ARRAY
36401: PPUSH
36402: LD_VAR 0 6
36406: PUSH
36407: LD_INT 2
36409: ARRAY
36410: PPUSH
36411: CALL_OW 176
36415: GO 36385
36417: POP
36418: POP
// repeat wait ( 0 0$1 ) ;
36419: LD_INT 35
36421: PPUSH
36422: CALL_OW 67
// task := GetTaskList ( flame ) ;
36426: LD_ADDR_VAR 0 14
36430: PUSH
36431: LD_VAR 0 1
36435: PPUSH
36436: CALL_OW 437
36440: ST_TO_ADDR
// if not task then
36441: LD_VAR 0 14
36445: NOT
36446: IFFALSE 36450
// exit ;
36448: GO 36584
// if task [ 1 ] [ 1 ] <> | then
36450: LD_VAR 0 14
36454: PUSH
36455: LD_INT 1
36457: ARRAY
36458: PUSH
36459: LD_INT 1
36461: ARRAY
36462: PUSH
36463: LD_STRING |
36465: NONEQUAL
36466: IFFALSE 36470
// exit ;
36468: GO 36584
// _x := task [ 1 ] [ 2 ] ;
36470: LD_ADDR_VAR 0 11
36474: PUSH
36475: LD_VAR 0 14
36479: PUSH
36480: LD_INT 1
36482: ARRAY
36483: PUSH
36484: LD_INT 2
36486: ARRAY
36487: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
36488: LD_ADDR_VAR 0 12
36492: PUSH
36493: LD_VAR 0 14
36497: PUSH
36498: LD_INT 1
36500: ARRAY
36501: PUSH
36502: LD_INT 3
36504: ARRAY
36505: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
36506: LD_VAR 0 11
36510: PPUSH
36511: LD_VAR 0 12
36515: PPUSH
36516: CALL_OW 351
36520: NOT
36521: PUSH
36522: LD_VAR 0 11
36526: PPUSH
36527: LD_VAR 0 12
36531: PPUSH
36532: CALL_OW 554
36536: NOT
36537: OR
36538: IFFALSE 36572
// begin task := Delete ( task , 1 ) ;
36540: LD_ADDR_VAR 0 14
36544: PUSH
36545: LD_VAR 0 14
36549: PPUSH
36550: LD_INT 1
36552: PPUSH
36553: CALL_OW 3
36557: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
36558: LD_VAR 0 1
36562: PPUSH
36563: LD_VAR 0 14
36567: PPUSH
36568: CALL_OW 446
// end ; until not HasTask ( flame ) ;
36572: LD_VAR 0 1
36576: PPUSH
36577: CALL_OW 314
36581: NOT
36582: IFFALSE 36419
// end ;
36584: LD_VAR 0 5
36588: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
36589: LD_EXP 107
36593: NOT
36594: IFFALSE 36644
36596: GO 36598
36598: DISABLE
// begin initHack := true ;
36599: LD_ADDR_EXP 107
36603: PUSH
36604: LD_INT 1
36606: ST_TO_ADDR
// hackTanks := [ ] ;
36607: LD_ADDR_EXP 108
36611: PUSH
36612: EMPTY
36613: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
36614: LD_ADDR_EXP 109
36618: PUSH
36619: EMPTY
36620: ST_TO_ADDR
// hackLimit := 3 ;
36621: LD_ADDR_EXP 110
36625: PUSH
36626: LD_INT 3
36628: ST_TO_ADDR
// hackDist := 12 ;
36629: LD_ADDR_EXP 111
36633: PUSH
36634: LD_INT 12
36636: ST_TO_ADDR
// hackCounter := [ ] ;
36637: LD_ADDR_EXP 112
36641: PUSH
36642: EMPTY
36643: ST_TO_ADDR
// end ;
36644: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36645: LD_EXP 107
36649: PUSH
36650: LD_INT 34
36652: PUSH
36653: LD_INT 99
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PPUSH
36660: CALL_OW 69
36664: AND
36665: IFFALSE 36918
36667: GO 36669
36669: DISABLE
36670: LD_INT 0
36672: PPUSH
36673: PPUSH
// begin enable ;
36674: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36675: LD_ADDR_VAR 0 1
36679: PUSH
36680: LD_INT 34
36682: PUSH
36683: LD_INT 99
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PPUSH
36690: CALL_OW 69
36694: PUSH
36695: FOR_IN
36696: IFFALSE 36916
// begin if not i in hackTanks then
36698: LD_VAR 0 1
36702: PUSH
36703: LD_EXP 108
36707: IN
36708: NOT
36709: IFFALSE 36792
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36711: LD_ADDR_EXP 108
36715: PUSH
36716: LD_EXP 108
36720: PPUSH
36721: LD_EXP 108
36725: PUSH
36726: LD_INT 1
36728: PLUS
36729: PPUSH
36730: LD_VAR 0 1
36734: PPUSH
36735: CALL_OW 1
36739: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36740: LD_ADDR_EXP 109
36744: PUSH
36745: LD_EXP 109
36749: PPUSH
36750: LD_EXP 109
36754: PUSH
36755: LD_INT 1
36757: PLUS
36758: PPUSH
36759: EMPTY
36760: PPUSH
36761: CALL_OW 1
36765: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36766: LD_ADDR_EXP 112
36770: PUSH
36771: LD_EXP 112
36775: PPUSH
36776: LD_EXP 112
36780: PUSH
36781: LD_INT 1
36783: PLUS
36784: PPUSH
36785: EMPTY
36786: PPUSH
36787: CALL_OW 1
36791: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36792: LD_VAR 0 1
36796: PPUSH
36797: CALL_OW 302
36801: NOT
36802: IFFALSE 36815
// begin HackUnlinkAll ( i ) ;
36804: LD_VAR 0 1
36808: PPUSH
36809: CALL 36921 0 1
// continue ;
36813: GO 36695
// end ; HackCheckCapturedStatus ( i ) ;
36815: LD_VAR 0 1
36819: PPUSH
36820: CALL 37364 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36824: LD_ADDR_VAR 0 2
36828: PUSH
36829: LD_INT 81
36831: PUSH
36832: LD_VAR 0 1
36836: PPUSH
36837: CALL_OW 255
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 33
36848: PUSH
36849: LD_INT 3
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: LD_INT 91
36858: PUSH
36859: LD_VAR 0 1
36863: PUSH
36864: LD_EXP 111
36868: PUSH
36869: EMPTY
36870: LIST
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 50
36876: PUSH
36877: EMPTY
36878: LIST
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: LIST
36884: LIST
36885: PPUSH
36886: CALL_OW 69
36890: ST_TO_ADDR
// if not tmp then
36891: LD_VAR 0 2
36895: NOT
36896: IFFALSE 36900
// continue ;
36898: GO 36695
// HackLink ( i , tmp ) ;
36900: LD_VAR 0 1
36904: PPUSH
36905: LD_VAR 0 2
36909: PPUSH
36910: CALL 37057 0 2
// end ;
36914: GO 36695
36916: POP
36917: POP
// end ;
36918: PPOPN 2
36920: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36921: LD_INT 0
36923: PPUSH
36924: PPUSH
36925: PPUSH
// if not hack in hackTanks then
36926: LD_VAR 0 1
36930: PUSH
36931: LD_EXP 108
36935: IN
36936: NOT
36937: IFFALSE 36941
// exit ;
36939: GO 37052
// index := GetElementIndex ( hackTanks , hack ) ;
36941: LD_ADDR_VAR 0 4
36945: PUSH
36946: LD_EXP 108
36950: PPUSH
36951: LD_VAR 0 1
36955: PPUSH
36956: CALL 44494 0 2
36960: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36961: LD_EXP 109
36965: PUSH
36966: LD_VAR 0 4
36970: ARRAY
36971: IFFALSE 37052
// begin for i in hackTanksCaptured [ index ] do
36973: LD_ADDR_VAR 0 3
36977: PUSH
36978: LD_EXP 109
36982: PUSH
36983: LD_VAR 0 4
36987: ARRAY
36988: PUSH
36989: FOR_IN
36990: IFFALSE 37016
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36992: LD_VAR 0 3
36996: PUSH
36997: LD_INT 1
36999: ARRAY
37000: PPUSH
37001: LD_VAR 0 3
37005: PUSH
37006: LD_INT 2
37008: ARRAY
37009: PPUSH
37010: CALL_OW 235
37014: GO 36989
37016: POP
37017: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37018: LD_ADDR_EXP 109
37022: PUSH
37023: LD_EXP 109
37027: PPUSH
37028: LD_VAR 0 4
37032: PPUSH
37033: EMPTY
37034: PPUSH
37035: CALL_OW 1
37039: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37040: LD_VAR 0 1
37044: PPUSH
37045: LD_INT 0
37047: PPUSH
37048: CALL_OW 505
// end ; end ;
37052: LD_VAR 0 2
37056: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37057: LD_INT 0
37059: PPUSH
37060: PPUSH
37061: PPUSH
// if not hack in hackTanks or not vehicles then
37062: LD_VAR 0 1
37066: PUSH
37067: LD_EXP 108
37071: IN
37072: NOT
37073: PUSH
37074: LD_VAR 0 2
37078: NOT
37079: OR
37080: IFFALSE 37084
// exit ;
37082: GO 37359
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37084: LD_ADDR_VAR 0 2
37088: PUSH
37089: LD_VAR 0 1
37093: PPUSH
37094: LD_VAR 0 2
37098: PPUSH
37099: LD_INT 1
37101: PPUSH
37102: LD_INT 1
37104: PPUSH
37105: CALL 45144 0 4
37109: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
37110: LD_ADDR_VAR 0 5
37114: PUSH
37115: LD_EXP 108
37119: PPUSH
37120: LD_VAR 0 1
37124: PPUSH
37125: CALL 44494 0 2
37129: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
37130: LD_EXP 109
37134: PUSH
37135: LD_VAR 0 5
37139: ARRAY
37140: PUSH
37141: LD_EXP 110
37145: LESS
37146: IFFALSE 37335
// begin for i := 1 to vehicles do
37148: LD_ADDR_VAR 0 4
37152: PUSH
37153: DOUBLE
37154: LD_INT 1
37156: DEC
37157: ST_TO_ADDR
37158: LD_VAR 0 2
37162: PUSH
37163: FOR_TO
37164: IFFALSE 37333
// begin if hackTanksCaptured [ index ] = hackLimit then
37166: LD_EXP 109
37170: PUSH
37171: LD_VAR 0 5
37175: ARRAY
37176: PUSH
37177: LD_EXP 110
37181: EQUAL
37182: IFFALSE 37186
// break ;
37184: GO 37333
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
37186: LD_ADDR_EXP 112
37190: PUSH
37191: LD_EXP 112
37195: PPUSH
37196: LD_VAR 0 5
37200: PPUSH
37201: LD_EXP 112
37205: PUSH
37206: LD_VAR 0 5
37210: ARRAY
37211: PUSH
37212: LD_INT 1
37214: PLUS
37215: PPUSH
37216: CALL_OW 1
37220: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
37221: LD_ADDR_EXP 109
37225: PUSH
37226: LD_EXP 109
37230: PPUSH
37231: LD_VAR 0 5
37235: PUSH
37236: LD_EXP 109
37240: PUSH
37241: LD_VAR 0 5
37245: ARRAY
37246: PUSH
37247: LD_INT 1
37249: PLUS
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PPUSH
37255: LD_VAR 0 2
37259: PUSH
37260: LD_VAR 0 4
37264: ARRAY
37265: PUSH
37266: LD_VAR 0 2
37270: PUSH
37271: LD_VAR 0 4
37275: ARRAY
37276: PPUSH
37277: CALL_OW 255
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PPUSH
37286: CALL 44709 0 3
37290: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
37291: LD_VAR 0 2
37295: PUSH
37296: LD_VAR 0 4
37300: ARRAY
37301: PPUSH
37302: LD_VAR 0 1
37306: PPUSH
37307: CALL_OW 255
37311: PPUSH
37312: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
37316: LD_VAR 0 2
37320: PUSH
37321: LD_VAR 0 4
37325: ARRAY
37326: PPUSH
37327: CALL_OW 141
// end ;
37331: GO 37163
37333: POP
37334: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37335: LD_VAR 0 1
37339: PPUSH
37340: LD_EXP 109
37344: PUSH
37345: LD_VAR 0 5
37349: ARRAY
37350: PUSH
37351: LD_INT 0
37353: PLUS
37354: PPUSH
37355: CALL_OW 505
// end ;
37359: LD_VAR 0 3
37363: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
37364: LD_INT 0
37366: PPUSH
37367: PPUSH
37368: PPUSH
37369: PPUSH
// if not hack in hackTanks then
37370: LD_VAR 0 1
37374: PUSH
37375: LD_EXP 108
37379: IN
37380: NOT
37381: IFFALSE 37385
// exit ;
37383: GO 37625
// index := GetElementIndex ( hackTanks , hack ) ;
37385: LD_ADDR_VAR 0 4
37389: PUSH
37390: LD_EXP 108
37394: PPUSH
37395: LD_VAR 0 1
37399: PPUSH
37400: CALL 44494 0 2
37404: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
37405: LD_ADDR_VAR 0 3
37409: PUSH
37410: DOUBLE
37411: LD_EXP 109
37415: PUSH
37416: LD_VAR 0 4
37420: ARRAY
37421: INC
37422: ST_TO_ADDR
37423: LD_INT 1
37425: PUSH
37426: FOR_DOWNTO
37427: IFFALSE 37599
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
37429: LD_ADDR_VAR 0 5
37433: PUSH
37434: LD_EXP 109
37438: PUSH
37439: LD_VAR 0 4
37443: ARRAY
37444: PUSH
37445: LD_VAR 0 3
37449: ARRAY
37450: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
37451: LD_VAR 0 5
37455: PUSH
37456: LD_INT 1
37458: ARRAY
37459: PPUSH
37460: CALL_OW 302
37464: NOT
37465: PUSH
37466: LD_VAR 0 5
37470: PUSH
37471: LD_INT 1
37473: ARRAY
37474: PPUSH
37475: CALL_OW 255
37479: PUSH
37480: LD_VAR 0 1
37484: PPUSH
37485: CALL_OW 255
37489: NONEQUAL
37490: OR
37491: IFFALSE 37597
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
37493: LD_VAR 0 5
37497: PUSH
37498: LD_INT 1
37500: ARRAY
37501: PPUSH
37502: CALL_OW 305
37506: PUSH
37507: LD_VAR 0 5
37511: PUSH
37512: LD_INT 1
37514: ARRAY
37515: PPUSH
37516: CALL_OW 255
37520: PUSH
37521: LD_VAR 0 1
37525: PPUSH
37526: CALL_OW 255
37530: EQUAL
37531: AND
37532: IFFALSE 37556
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
37534: LD_VAR 0 5
37538: PUSH
37539: LD_INT 1
37541: ARRAY
37542: PPUSH
37543: LD_VAR 0 5
37547: PUSH
37548: LD_INT 2
37550: ARRAY
37551: PPUSH
37552: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
37556: LD_ADDR_EXP 109
37560: PUSH
37561: LD_EXP 109
37565: PPUSH
37566: LD_VAR 0 4
37570: PPUSH
37571: LD_EXP 109
37575: PUSH
37576: LD_VAR 0 4
37580: ARRAY
37581: PPUSH
37582: LD_VAR 0 3
37586: PPUSH
37587: CALL_OW 3
37591: PPUSH
37592: CALL_OW 1
37596: ST_TO_ADDR
// end ; end ;
37597: GO 37426
37599: POP
37600: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
37601: LD_VAR 0 1
37605: PPUSH
37606: LD_EXP 109
37610: PUSH
37611: LD_VAR 0 4
37615: ARRAY
37616: PUSH
37617: LD_INT 0
37619: PLUS
37620: PPUSH
37621: CALL_OW 505
// end ;
37625: LD_VAR 0 2
37629: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37630: LD_INT 0
37632: PPUSH
37633: PPUSH
37634: PPUSH
37635: PPUSH
// if not hack in hackTanks then
37636: LD_VAR 0 1
37640: PUSH
37641: LD_EXP 108
37645: IN
37646: NOT
37647: IFFALSE 37651
// exit ;
37649: GO 37736
// index := GetElementIndex ( hackTanks , hack ) ;
37651: LD_ADDR_VAR 0 5
37655: PUSH
37656: LD_EXP 108
37660: PPUSH
37661: LD_VAR 0 1
37665: PPUSH
37666: CALL 44494 0 2
37670: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37671: LD_ADDR_VAR 0 4
37675: PUSH
37676: DOUBLE
37677: LD_INT 1
37679: DEC
37680: ST_TO_ADDR
37681: LD_EXP 109
37685: PUSH
37686: LD_VAR 0 5
37690: ARRAY
37691: PUSH
37692: FOR_TO
37693: IFFALSE 37734
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37695: LD_EXP 109
37699: PUSH
37700: LD_VAR 0 5
37704: ARRAY
37705: PUSH
37706: LD_VAR 0 4
37710: ARRAY
37711: PUSH
37712: LD_INT 1
37714: ARRAY
37715: PUSH
37716: LD_VAR 0 2
37720: EQUAL
37721: IFFALSE 37732
// KillUnit ( vehicle ) ;
37723: LD_VAR 0 2
37727: PPUSH
37728: CALL_OW 66
37732: GO 37692
37734: POP
37735: POP
// end ;
37736: LD_VAR 0 3
37740: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37741: LD_EXP 113
37745: NOT
37746: IFFALSE 37781
37748: GO 37750
37750: DISABLE
// begin initMiner := true ;
37751: LD_ADDR_EXP 113
37755: PUSH
37756: LD_INT 1
37758: ST_TO_ADDR
// minersList := [ ] ;
37759: LD_ADDR_EXP 114
37763: PUSH
37764: EMPTY
37765: ST_TO_ADDR
// minerMinesList := [ ] ;
37766: LD_ADDR_EXP 115
37770: PUSH
37771: EMPTY
37772: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37773: LD_ADDR_EXP 116
37777: PUSH
37778: LD_INT 5
37780: ST_TO_ADDR
// end ;
37781: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37782: LD_EXP 113
37786: PUSH
37787: LD_INT 34
37789: PUSH
37790: LD_INT 81
37792: PUSH
37793: EMPTY
37794: LIST
37795: LIST
37796: PPUSH
37797: CALL_OW 69
37801: AND
37802: IFFALSE 38263
37804: GO 37806
37806: DISABLE
37807: LD_INT 0
37809: PPUSH
37810: PPUSH
37811: PPUSH
37812: PPUSH
// begin enable ;
37813: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37814: LD_ADDR_VAR 0 1
37818: PUSH
37819: LD_INT 34
37821: PUSH
37822: LD_INT 81
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: PPUSH
37829: CALL_OW 69
37833: PUSH
37834: FOR_IN
37835: IFFALSE 37907
// begin if not i in minersList then
37837: LD_VAR 0 1
37841: PUSH
37842: LD_EXP 114
37846: IN
37847: NOT
37848: IFFALSE 37905
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37850: LD_ADDR_EXP 114
37854: PUSH
37855: LD_EXP 114
37859: PPUSH
37860: LD_EXP 114
37864: PUSH
37865: LD_INT 1
37867: PLUS
37868: PPUSH
37869: LD_VAR 0 1
37873: PPUSH
37874: CALL_OW 1
37878: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37879: LD_ADDR_EXP 115
37883: PUSH
37884: LD_EXP 115
37888: PPUSH
37889: LD_EXP 115
37893: PUSH
37894: LD_INT 1
37896: PLUS
37897: PPUSH
37898: EMPTY
37899: PPUSH
37900: CALL_OW 1
37904: ST_TO_ADDR
// end end ;
37905: GO 37834
37907: POP
37908: POP
// for i := minerMinesList downto 1 do
37909: LD_ADDR_VAR 0 1
37913: PUSH
37914: DOUBLE
37915: LD_EXP 115
37919: INC
37920: ST_TO_ADDR
37921: LD_INT 1
37923: PUSH
37924: FOR_DOWNTO
37925: IFFALSE 38261
// begin if IsLive ( minersList [ i ] ) then
37927: LD_EXP 114
37931: PUSH
37932: LD_VAR 0 1
37936: ARRAY
37937: PPUSH
37938: CALL_OW 300
37942: IFFALSE 37970
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37944: LD_EXP 114
37948: PUSH
37949: LD_VAR 0 1
37953: ARRAY
37954: PPUSH
37955: LD_EXP 115
37959: PUSH
37960: LD_VAR 0 1
37964: ARRAY
37965: PPUSH
37966: CALL_OW 505
// if not minerMinesList [ i ] then
37970: LD_EXP 115
37974: PUSH
37975: LD_VAR 0 1
37979: ARRAY
37980: NOT
37981: IFFALSE 37985
// continue ;
37983: GO 37924
// for j := minerMinesList [ i ] downto 1 do
37985: LD_ADDR_VAR 0 2
37989: PUSH
37990: DOUBLE
37991: LD_EXP 115
37995: PUSH
37996: LD_VAR 0 1
38000: ARRAY
38001: INC
38002: ST_TO_ADDR
38003: LD_INT 1
38005: PUSH
38006: FOR_DOWNTO
38007: IFFALSE 38257
// begin side := GetSide ( minersList [ i ] ) ;
38009: LD_ADDR_VAR 0 3
38013: PUSH
38014: LD_EXP 114
38018: PUSH
38019: LD_VAR 0 1
38023: ARRAY
38024: PPUSH
38025: CALL_OW 255
38029: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38030: LD_ADDR_VAR 0 4
38034: PUSH
38035: LD_EXP 115
38039: PUSH
38040: LD_VAR 0 1
38044: ARRAY
38045: PUSH
38046: LD_VAR 0 2
38050: ARRAY
38051: PUSH
38052: LD_INT 1
38054: ARRAY
38055: PPUSH
38056: LD_EXP 115
38060: PUSH
38061: LD_VAR 0 1
38065: ARRAY
38066: PUSH
38067: LD_VAR 0 2
38071: ARRAY
38072: PUSH
38073: LD_INT 2
38075: ARRAY
38076: PPUSH
38077: CALL_OW 428
38081: ST_TO_ADDR
// if not tmp then
38082: LD_VAR 0 4
38086: NOT
38087: IFFALSE 38091
// continue ;
38089: GO 38006
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
38091: LD_VAR 0 4
38095: PUSH
38096: LD_INT 81
38098: PUSH
38099: LD_VAR 0 3
38103: PUSH
38104: EMPTY
38105: LIST
38106: LIST
38107: PPUSH
38108: CALL_OW 69
38112: IN
38113: PUSH
38114: LD_EXP 115
38118: PUSH
38119: LD_VAR 0 1
38123: ARRAY
38124: PUSH
38125: LD_VAR 0 2
38129: ARRAY
38130: PUSH
38131: LD_INT 1
38133: ARRAY
38134: PPUSH
38135: LD_EXP 115
38139: PUSH
38140: LD_VAR 0 1
38144: ARRAY
38145: PUSH
38146: LD_VAR 0 2
38150: ARRAY
38151: PUSH
38152: LD_INT 2
38154: ARRAY
38155: PPUSH
38156: CALL_OW 458
38160: AND
38161: IFFALSE 38255
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
38163: LD_EXP 115
38167: PUSH
38168: LD_VAR 0 1
38172: ARRAY
38173: PUSH
38174: LD_VAR 0 2
38178: ARRAY
38179: PUSH
38180: LD_INT 1
38182: ARRAY
38183: PPUSH
38184: LD_EXP 115
38188: PUSH
38189: LD_VAR 0 1
38193: ARRAY
38194: PUSH
38195: LD_VAR 0 2
38199: ARRAY
38200: PUSH
38201: LD_INT 2
38203: ARRAY
38204: PPUSH
38205: LD_VAR 0 3
38209: PPUSH
38210: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
38214: LD_ADDR_EXP 115
38218: PUSH
38219: LD_EXP 115
38223: PPUSH
38224: LD_VAR 0 1
38228: PPUSH
38229: LD_EXP 115
38233: PUSH
38234: LD_VAR 0 1
38238: ARRAY
38239: PPUSH
38240: LD_VAR 0 2
38244: PPUSH
38245: CALL_OW 3
38249: PPUSH
38250: CALL_OW 1
38254: ST_TO_ADDR
// end ; end ;
38255: GO 38006
38257: POP
38258: POP
// end ;
38259: GO 37924
38261: POP
38262: POP
// end ;
38263: PPOPN 4
38265: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
38266: LD_INT 0
38268: PPUSH
38269: PPUSH
// result := false ;
38270: LD_ADDR_VAR 0 4
38274: PUSH
38275: LD_INT 0
38277: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
38278: LD_VAR 0 1
38282: PPUSH
38283: CALL_OW 264
38287: PUSH
38288: LD_INT 81
38290: EQUAL
38291: NOT
38292: IFFALSE 38296
// exit ;
38294: GO 38536
// index := GetElementIndex ( minersList , unit ) ;
38296: LD_ADDR_VAR 0 5
38300: PUSH
38301: LD_EXP 114
38305: PPUSH
38306: LD_VAR 0 1
38310: PPUSH
38311: CALL 44494 0 2
38315: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
38316: LD_EXP 115
38320: PUSH
38321: LD_VAR 0 5
38325: ARRAY
38326: PUSH
38327: LD_EXP 116
38331: GREATEREQUAL
38332: IFFALSE 38336
// exit ;
38334: GO 38536
// ComMoveXY ( unit , x , y ) ;
38336: LD_VAR 0 1
38340: PPUSH
38341: LD_VAR 0 2
38345: PPUSH
38346: LD_VAR 0 3
38350: PPUSH
38351: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38355: LD_INT 35
38357: PPUSH
38358: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
38362: LD_VAR 0 1
38366: PPUSH
38367: LD_VAR 0 2
38371: PPUSH
38372: LD_VAR 0 3
38376: PPUSH
38377: CALL 76246 0 3
38381: NOT
38382: PUSH
38383: LD_VAR 0 1
38387: PPUSH
38388: CALL_OW 314
38392: AND
38393: IFFALSE 38397
// exit ;
38395: GO 38536
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
38397: LD_VAR 0 2
38401: PPUSH
38402: LD_VAR 0 3
38406: PPUSH
38407: CALL_OW 428
38411: PUSH
38412: LD_VAR 0 1
38416: EQUAL
38417: PUSH
38418: LD_VAR 0 1
38422: PPUSH
38423: CALL_OW 314
38427: NOT
38428: AND
38429: IFFALSE 38355
// PlaySoundXY ( x , y , PlantMine ) ;
38431: LD_VAR 0 2
38435: PPUSH
38436: LD_VAR 0 3
38440: PPUSH
38441: LD_STRING PlantMine
38443: PPUSH
38444: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
38448: LD_VAR 0 2
38452: PPUSH
38453: LD_VAR 0 3
38457: PPUSH
38458: LD_VAR 0 1
38462: PPUSH
38463: CALL_OW 255
38467: PPUSH
38468: LD_INT 0
38470: PPUSH
38471: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
38475: LD_ADDR_EXP 115
38479: PUSH
38480: LD_EXP 115
38484: PPUSH
38485: LD_VAR 0 5
38489: PUSH
38490: LD_EXP 115
38494: PUSH
38495: LD_VAR 0 5
38499: ARRAY
38500: PUSH
38501: LD_INT 1
38503: PLUS
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PPUSH
38509: LD_VAR 0 2
38513: PUSH
38514: LD_VAR 0 3
38518: PUSH
38519: EMPTY
38520: LIST
38521: LIST
38522: PPUSH
38523: CALL 44709 0 3
38527: ST_TO_ADDR
// result := true ;
38528: LD_ADDR_VAR 0 4
38532: PUSH
38533: LD_INT 1
38535: ST_TO_ADDR
// end ;
38536: LD_VAR 0 4
38540: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
38541: LD_INT 0
38543: PPUSH
38544: PPUSH
38545: PPUSH
// if not unit in minersList then
38546: LD_VAR 0 1
38550: PUSH
38551: LD_EXP 114
38555: IN
38556: NOT
38557: IFFALSE 38561
// exit ;
38559: GO 38953
// index := GetElementIndex ( minersList , unit ) ;
38561: LD_ADDR_VAR 0 6
38565: PUSH
38566: LD_EXP 114
38570: PPUSH
38571: LD_VAR 0 1
38575: PPUSH
38576: CALL 44494 0 2
38580: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
38581: LD_ADDR_VAR 0 5
38585: PUSH
38586: DOUBLE
38587: LD_EXP 115
38591: PUSH
38592: LD_VAR 0 6
38596: ARRAY
38597: INC
38598: ST_TO_ADDR
38599: LD_INT 1
38601: PUSH
38602: FOR_DOWNTO
38603: IFFALSE 38764
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
38605: LD_EXP 115
38609: PUSH
38610: LD_VAR 0 6
38614: ARRAY
38615: PUSH
38616: LD_VAR 0 5
38620: ARRAY
38621: PUSH
38622: LD_INT 1
38624: ARRAY
38625: PUSH
38626: LD_VAR 0 2
38630: EQUAL
38631: PUSH
38632: LD_EXP 115
38636: PUSH
38637: LD_VAR 0 6
38641: ARRAY
38642: PUSH
38643: LD_VAR 0 5
38647: ARRAY
38648: PUSH
38649: LD_INT 2
38651: ARRAY
38652: PUSH
38653: LD_VAR 0 3
38657: EQUAL
38658: AND
38659: IFFALSE 38762
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38661: LD_EXP 115
38665: PUSH
38666: LD_VAR 0 6
38670: ARRAY
38671: PUSH
38672: LD_VAR 0 5
38676: ARRAY
38677: PUSH
38678: LD_INT 1
38680: ARRAY
38681: PPUSH
38682: LD_EXP 115
38686: PUSH
38687: LD_VAR 0 6
38691: ARRAY
38692: PUSH
38693: LD_VAR 0 5
38697: ARRAY
38698: PUSH
38699: LD_INT 2
38701: ARRAY
38702: PPUSH
38703: LD_VAR 0 1
38707: PPUSH
38708: CALL_OW 255
38712: PPUSH
38713: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38717: LD_ADDR_EXP 115
38721: PUSH
38722: LD_EXP 115
38726: PPUSH
38727: LD_VAR 0 6
38731: PPUSH
38732: LD_EXP 115
38736: PUSH
38737: LD_VAR 0 6
38741: ARRAY
38742: PPUSH
38743: LD_VAR 0 5
38747: PPUSH
38748: CALL_OW 3
38752: PPUSH
38753: CALL_OW 1
38757: ST_TO_ADDR
// exit ;
38758: POP
38759: POP
38760: GO 38953
// end ; end ;
38762: GO 38602
38764: POP
38765: POP
// for i := minerMinesList [ index ] downto 1 do
38766: LD_ADDR_VAR 0 5
38770: PUSH
38771: DOUBLE
38772: LD_EXP 115
38776: PUSH
38777: LD_VAR 0 6
38781: ARRAY
38782: INC
38783: ST_TO_ADDR
38784: LD_INT 1
38786: PUSH
38787: FOR_DOWNTO
38788: IFFALSE 38951
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38790: LD_EXP 115
38794: PUSH
38795: LD_VAR 0 6
38799: ARRAY
38800: PUSH
38801: LD_VAR 0 5
38805: ARRAY
38806: PUSH
38807: LD_INT 1
38809: ARRAY
38810: PPUSH
38811: LD_EXP 115
38815: PUSH
38816: LD_VAR 0 6
38820: ARRAY
38821: PUSH
38822: LD_VAR 0 5
38826: ARRAY
38827: PUSH
38828: LD_INT 2
38830: ARRAY
38831: PPUSH
38832: LD_VAR 0 2
38836: PPUSH
38837: LD_VAR 0 3
38841: PPUSH
38842: CALL_OW 298
38846: PUSH
38847: LD_INT 6
38849: LESS
38850: IFFALSE 38949
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38852: LD_EXP 115
38856: PUSH
38857: LD_VAR 0 6
38861: ARRAY
38862: PUSH
38863: LD_VAR 0 5
38867: ARRAY
38868: PUSH
38869: LD_INT 1
38871: ARRAY
38872: PPUSH
38873: LD_EXP 115
38877: PUSH
38878: LD_VAR 0 6
38882: ARRAY
38883: PUSH
38884: LD_VAR 0 5
38888: ARRAY
38889: PUSH
38890: LD_INT 2
38892: ARRAY
38893: PPUSH
38894: LD_VAR 0 1
38898: PPUSH
38899: CALL_OW 255
38903: PPUSH
38904: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38908: LD_ADDR_EXP 115
38912: PUSH
38913: LD_EXP 115
38917: PPUSH
38918: LD_VAR 0 6
38922: PPUSH
38923: LD_EXP 115
38927: PUSH
38928: LD_VAR 0 6
38932: ARRAY
38933: PPUSH
38934: LD_VAR 0 5
38938: PPUSH
38939: CALL_OW 3
38943: PPUSH
38944: CALL_OW 1
38948: ST_TO_ADDR
// end ; end ;
38949: GO 38787
38951: POP
38952: POP
// end ;
38953: LD_VAR 0 4
38957: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38958: LD_INT 0
38960: PPUSH
38961: PPUSH
38962: PPUSH
38963: PPUSH
38964: PPUSH
38965: PPUSH
38966: PPUSH
38967: PPUSH
38968: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38969: LD_VAR 0 1
38973: PPUSH
38974: CALL_OW 264
38978: PUSH
38979: LD_INT 81
38981: EQUAL
38982: NOT
38983: PUSH
38984: LD_VAR 0 1
38988: PUSH
38989: LD_EXP 114
38993: IN
38994: NOT
38995: OR
38996: IFFALSE 39000
// exit ;
38998: GO 39322
// index := GetElementIndex ( minersList , unit ) ;
39000: LD_ADDR_VAR 0 6
39004: PUSH
39005: LD_EXP 114
39009: PPUSH
39010: LD_VAR 0 1
39014: PPUSH
39015: CALL 44494 0 2
39019: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39020: LD_ADDR_VAR 0 8
39024: PUSH
39025: LD_EXP 116
39029: PUSH
39030: LD_EXP 115
39034: PUSH
39035: LD_VAR 0 6
39039: ARRAY
39040: MINUS
39041: ST_TO_ADDR
// if not minesFreeAmount then
39042: LD_VAR 0 8
39046: NOT
39047: IFFALSE 39051
// exit ;
39049: GO 39322
// tmp := [ ] ;
39051: LD_ADDR_VAR 0 7
39055: PUSH
39056: EMPTY
39057: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39058: LD_ADDR_VAR 0 5
39062: PUSH
39063: DOUBLE
39064: LD_INT 1
39066: DEC
39067: ST_TO_ADDR
39068: LD_VAR 0 8
39072: PUSH
39073: FOR_TO
39074: IFFALSE 39269
// begin _d := rand ( 0 , 5 ) ;
39076: LD_ADDR_VAR 0 11
39080: PUSH
39081: LD_INT 0
39083: PPUSH
39084: LD_INT 5
39086: PPUSH
39087: CALL_OW 12
39091: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
39092: LD_ADDR_VAR 0 12
39096: PUSH
39097: LD_INT 2
39099: PPUSH
39100: LD_INT 6
39102: PPUSH
39103: CALL_OW 12
39107: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
39108: LD_ADDR_VAR 0 9
39112: PUSH
39113: LD_VAR 0 2
39117: PPUSH
39118: LD_VAR 0 11
39122: PPUSH
39123: LD_VAR 0 12
39127: PPUSH
39128: CALL_OW 272
39132: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
39133: LD_ADDR_VAR 0 10
39137: PUSH
39138: LD_VAR 0 3
39142: PPUSH
39143: LD_VAR 0 11
39147: PPUSH
39148: LD_VAR 0 12
39152: PPUSH
39153: CALL_OW 273
39157: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
39158: LD_VAR 0 9
39162: PPUSH
39163: LD_VAR 0 10
39167: PPUSH
39168: CALL_OW 488
39172: PUSH
39173: LD_VAR 0 9
39177: PUSH
39178: LD_VAR 0 10
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_VAR 0 7
39191: IN
39192: NOT
39193: AND
39194: PUSH
39195: LD_VAR 0 9
39199: PPUSH
39200: LD_VAR 0 10
39204: PPUSH
39205: CALL_OW 458
39209: NOT
39210: AND
39211: IFFALSE 39253
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
39213: LD_ADDR_VAR 0 7
39217: PUSH
39218: LD_VAR 0 7
39222: PPUSH
39223: LD_VAR 0 7
39227: PUSH
39228: LD_INT 1
39230: PLUS
39231: PPUSH
39232: LD_VAR 0 9
39236: PUSH
39237: LD_VAR 0 10
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PPUSH
39246: CALL_OW 1
39250: ST_TO_ADDR
39251: GO 39267
// i := i - 1 ;
39253: LD_ADDR_VAR 0 5
39257: PUSH
39258: LD_VAR 0 5
39262: PUSH
39263: LD_INT 1
39265: MINUS
39266: ST_TO_ADDR
// end ;
39267: GO 39073
39269: POP
39270: POP
// for i in tmp do
39271: LD_ADDR_VAR 0 5
39275: PUSH
39276: LD_VAR 0 7
39280: PUSH
39281: FOR_IN
39282: IFFALSE 39320
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
39284: LD_VAR 0 1
39288: PPUSH
39289: LD_VAR 0 5
39293: PUSH
39294: LD_INT 1
39296: ARRAY
39297: PPUSH
39298: LD_VAR 0 5
39302: PUSH
39303: LD_INT 2
39305: ARRAY
39306: PPUSH
39307: CALL 38266 0 3
39311: NOT
39312: IFFALSE 39318
// exit ;
39314: POP
39315: POP
39316: GO 39322
39318: GO 39281
39320: POP
39321: POP
// end ;
39322: LD_VAR 0 4
39326: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
39327: LD_INT 0
39329: PPUSH
39330: PPUSH
39331: PPUSH
39332: PPUSH
39333: PPUSH
39334: PPUSH
39335: PPUSH
// if not GetClass ( unit ) = class_sniper then
39336: LD_VAR 0 1
39340: PPUSH
39341: CALL_OW 257
39345: PUSH
39346: LD_INT 5
39348: EQUAL
39349: NOT
39350: IFFALSE 39354
// exit ;
39352: GO 39742
// dist := 8 ;
39354: LD_ADDR_VAR 0 5
39358: PUSH
39359: LD_INT 8
39361: ST_TO_ADDR
// viewRange := 12 ;
39362: LD_ADDR_VAR 0 7
39366: PUSH
39367: LD_INT 12
39369: ST_TO_ADDR
// side := GetSide ( unit ) ;
39370: LD_ADDR_VAR 0 6
39374: PUSH
39375: LD_VAR 0 1
39379: PPUSH
39380: CALL_OW 255
39384: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
39385: LD_INT 61
39387: PPUSH
39388: LD_VAR 0 6
39392: PPUSH
39393: CALL_OW 321
39397: PUSH
39398: LD_INT 2
39400: EQUAL
39401: IFFALSE 39411
// viewRange := 16 ;
39403: LD_ADDR_VAR 0 7
39407: PUSH
39408: LD_INT 16
39410: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
39411: LD_VAR 0 1
39415: PPUSH
39416: LD_VAR 0 2
39420: PPUSH
39421: LD_VAR 0 3
39425: PPUSH
39426: CALL_OW 297
39430: PUSH
39431: LD_VAR 0 5
39435: GREATER
39436: IFFALSE 39515
// begin ComMoveXY ( unit , x , y ) ;
39438: LD_VAR 0 1
39442: PPUSH
39443: LD_VAR 0 2
39447: PPUSH
39448: LD_VAR 0 3
39452: PPUSH
39453: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39457: LD_INT 35
39459: PPUSH
39460: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
39464: LD_VAR 0 1
39468: PPUSH
39469: LD_VAR 0 2
39473: PPUSH
39474: LD_VAR 0 3
39478: PPUSH
39479: CALL 76246 0 3
39483: NOT
39484: IFFALSE 39488
// exit ;
39486: GO 39742
// until GetDistUnitXY ( unit , x , y ) < dist ;
39488: LD_VAR 0 1
39492: PPUSH
39493: LD_VAR 0 2
39497: PPUSH
39498: LD_VAR 0 3
39502: PPUSH
39503: CALL_OW 297
39507: PUSH
39508: LD_VAR 0 5
39512: LESS
39513: IFFALSE 39457
// end ; ComTurnXY ( unit , x , y ) ;
39515: LD_VAR 0 1
39519: PPUSH
39520: LD_VAR 0 2
39524: PPUSH
39525: LD_VAR 0 3
39529: PPUSH
39530: CALL_OW 118
// wait ( 5 ) ;
39534: LD_INT 5
39536: PPUSH
39537: CALL_OW 67
// _d := GetDir ( unit ) ;
39541: LD_ADDR_VAR 0 10
39545: PUSH
39546: LD_VAR 0 1
39550: PPUSH
39551: CALL_OW 254
39555: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
39556: LD_ADDR_VAR 0 8
39560: PUSH
39561: LD_VAR 0 1
39565: PPUSH
39566: CALL_OW 250
39570: PPUSH
39571: LD_VAR 0 10
39575: PPUSH
39576: LD_VAR 0 5
39580: PPUSH
39581: CALL_OW 272
39585: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
39586: LD_ADDR_VAR 0 9
39590: PUSH
39591: LD_VAR 0 1
39595: PPUSH
39596: CALL_OW 251
39600: PPUSH
39601: LD_VAR 0 10
39605: PPUSH
39606: LD_VAR 0 5
39610: PPUSH
39611: CALL_OW 273
39615: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
39616: LD_VAR 0 8
39620: PPUSH
39621: LD_VAR 0 9
39625: PPUSH
39626: CALL_OW 488
39630: NOT
39631: IFFALSE 39635
// exit ;
39633: GO 39742
// ComAnimCustom ( unit , 1 ) ;
39635: LD_VAR 0 1
39639: PPUSH
39640: LD_INT 1
39642: PPUSH
39643: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39647: LD_VAR 0 8
39651: PPUSH
39652: LD_VAR 0 9
39656: PPUSH
39657: LD_VAR 0 6
39661: PPUSH
39662: LD_VAR 0 7
39666: PPUSH
39667: CALL_OW 330
// repeat wait ( 1 ) ;
39671: LD_INT 1
39673: PPUSH
39674: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39678: LD_VAR 0 1
39682: PPUSH
39683: CALL_OW 316
39687: PUSH
39688: LD_VAR 0 1
39692: PPUSH
39693: CALL_OW 314
39697: OR
39698: PUSH
39699: LD_VAR 0 1
39703: PPUSH
39704: CALL_OW 302
39708: NOT
39709: OR
39710: PUSH
39711: LD_VAR 0 1
39715: PPUSH
39716: CALL_OW 301
39720: OR
39721: IFFALSE 39671
// RemoveSeeing ( _x , _y , side ) ;
39723: LD_VAR 0 8
39727: PPUSH
39728: LD_VAR 0 9
39732: PPUSH
39733: LD_VAR 0 6
39737: PPUSH
39738: CALL_OW 331
// end ; end_of_file
39742: LD_VAR 0 4
39746: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39747: LD_INT 0
39749: PPUSH
39750: PPUSH
// if exist_mode then
39751: LD_VAR 0 2
39755: IFFALSE 39780
// unit := CreateCharacter ( prefix & ident ) else
39757: LD_ADDR_VAR 0 5
39761: PUSH
39762: LD_VAR 0 3
39766: PUSH
39767: LD_VAR 0 1
39771: STR
39772: PPUSH
39773: CALL_OW 34
39777: ST_TO_ADDR
39778: GO 39795
// unit := NewCharacter ( ident ) ;
39780: LD_ADDR_VAR 0 5
39784: PUSH
39785: LD_VAR 0 1
39789: PPUSH
39790: CALL_OW 25
39794: ST_TO_ADDR
// result := unit ;
39795: LD_ADDR_VAR 0 4
39799: PUSH
39800: LD_VAR 0 5
39804: ST_TO_ADDR
// end ;
39805: LD_VAR 0 4
39809: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39810: LD_INT 0
39812: PPUSH
39813: PPUSH
// if not side or not nation then
39814: LD_VAR 0 1
39818: NOT
39819: PUSH
39820: LD_VAR 0 2
39824: NOT
39825: OR
39826: IFFALSE 39830
// exit ;
39828: GO 40598
// case nation of nation_american :
39830: LD_VAR 0 2
39834: PUSH
39835: LD_INT 1
39837: DOUBLE
39838: EQUAL
39839: IFTRUE 39843
39841: GO 40057
39843: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39844: LD_ADDR_VAR 0 4
39848: PUSH
39849: LD_INT 35
39851: PUSH
39852: LD_INT 45
39854: PUSH
39855: LD_INT 46
39857: PUSH
39858: LD_INT 47
39860: PUSH
39861: LD_INT 82
39863: PUSH
39864: LD_INT 83
39866: PUSH
39867: LD_INT 84
39869: PUSH
39870: LD_INT 85
39872: PUSH
39873: LD_INT 86
39875: PUSH
39876: LD_INT 1
39878: PUSH
39879: LD_INT 2
39881: PUSH
39882: LD_INT 6
39884: PUSH
39885: LD_INT 15
39887: PUSH
39888: LD_INT 16
39890: PUSH
39891: LD_INT 7
39893: PUSH
39894: LD_INT 12
39896: PUSH
39897: LD_INT 13
39899: PUSH
39900: LD_INT 10
39902: PUSH
39903: LD_INT 14
39905: PUSH
39906: LD_INT 20
39908: PUSH
39909: LD_INT 21
39911: PUSH
39912: LD_INT 22
39914: PUSH
39915: LD_INT 25
39917: PUSH
39918: LD_INT 32
39920: PUSH
39921: LD_INT 27
39923: PUSH
39924: LD_INT 36
39926: PUSH
39927: LD_INT 69
39929: PUSH
39930: LD_INT 39
39932: PUSH
39933: LD_INT 34
39935: PUSH
39936: LD_INT 40
39938: PUSH
39939: LD_INT 48
39941: PUSH
39942: LD_INT 49
39944: PUSH
39945: LD_INT 50
39947: PUSH
39948: LD_INT 51
39950: PUSH
39951: LD_INT 52
39953: PUSH
39954: LD_INT 53
39956: PUSH
39957: LD_INT 54
39959: PUSH
39960: LD_INT 55
39962: PUSH
39963: LD_INT 56
39965: PUSH
39966: LD_INT 57
39968: PUSH
39969: LD_INT 58
39971: PUSH
39972: LD_INT 59
39974: PUSH
39975: LD_INT 60
39977: PUSH
39978: LD_INT 61
39980: PUSH
39981: LD_INT 62
39983: PUSH
39984: LD_INT 80
39986: PUSH
39987: LD_INT 82
39989: PUSH
39990: LD_INT 83
39992: PUSH
39993: LD_INT 84
39995: PUSH
39996: LD_INT 85
39998: PUSH
39999: LD_INT 86
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: ST_TO_ADDR
40055: GO 40522
40057: LD_INT 2
40059: DOUBLE
40060: EQUAL
40061: IFTRUE 40065
40063: GO 40291
40065: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
40066: LD_ADDR_VAR 0 4
40070: PUSH
40071: LD_INT 35
40073: PUSH
40074: LD_INT 45
40076: PUSH
40077: LD_INT 46
40079: PUSH
40080: LD_INT 47
40082: PUSH
40083: LD_INT 82
40085: PUSH
40086: LD_INT 83
40088: PUSH
40089: LD_INT 84
40091: PUSH
40092: LD_INT 85
40094: PUSH
40095: LD_INT 87
40097: PUSH
40098: LD_INT 70
40100: PUSH
40101: LD_INT 1
40103: PUSH
40104: LD_INT 11
40106: PUSH
40107: LD_INT 3
40109: PUSH
40110: LD_INT 4
40112: PUSH
40113: LD_INT 5
40115: PUSH
40116: LD_INT 6
40118: PUSH
40119: LD_INT 15
40121: PUSH
40122: LD_INT 18
40124: PUSH
40125: LD_INT 7
40127: PUSH
40128: LD_INT 17
40130: PUSH
40131: LD_INT 8
40133: PUSH
40134: LD_INT 20
40136: PUSH
40137: LD_INT 21
40139: PUSH
40140: LD_INT 22
40142: PUSH
40143: LD_INT 72
40145: PUSH
40146: LD_INT 26
40148: PUSH
40149: LD_INT 69
40151: PUSH
40152: LD_INT 39
40154: PUSH
40155: LD_INT 40
40157: PUSH
40158: LD_INT 41
40160: PUSH
40161: LD_INT 42
40163: PUSH
40164: LD_INT 43
40166: PUSH
40167: LD_INT 48
40169: PUSH
40170: LD_INT 49
40172: PUSH
40173: LD_INT 50
40175: PUSH
40176: LD_INT 51
40178: PUSH
40179: LD_INT 52
40181: PUSH
40182: LD_INT 53
40184: PUSH
40185: LD_INT 54
40187: PUSH
40188: LD_INT 55
40190: PUSH
40191: LD_INT 56
40193: PUSH
40194: LD_INT 60
40196: PUSH
40197: LD_INT 61
40199: PUSH
40200: LD_INT 62
40202: PUSH
40203: LD_INT 66
40205: PUSH
40206: LD_INT 67
40208: PUSH
40209: LD_INT 68
40211: PUSH
40212: LD_INT 81
40214: PUSH
40215: LD_INT 82
40217: PUSH
40218: LD_INT 83
40220: PUSH
40221: LD_INT 84
40223: PUSH
40224: LD_INT 85
40226: PUSH
40227: LD_INT 87
40229: PUSH
40230: LD_INT 88
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: ST_TO_ADDR
40289: GO 40522
40291: LD_INT 3
40293: DOUBLE
40294: EQUAL
40295: IFTRUE 40299
40297: GO 40521
40299: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
40300: LD_ADDR_VAR 0 4
40304: PUSH
40305: LD_INT 46
40307: PUSH
40308: LD_INT 47
40310: PUSH
40311: LD_INT 1
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: LD_INT 82
40319: PUSH
40320: LD_INT 83
40322: PUSH
40323: LD_INT 84
40325: PUSH
40326: LD_INT 85
40328: PUSH
40329: LD_INT 86
40331: PUSH
40332: LD_INT 11
40334: PUSH
40335: LD_INT 9
40337: PUSH
40338: LD_INT 20
40340: PUSH
40341: LD_INT 19
40343: PUSH
40344: LD_INT 21
40346: PUSH
40347: LD_INT 24
40349: PUSH
40350: LD_INT 22
40352: PUSH
40353: LD_INT 25
40355: PUSH
40356: LD_INT 28
40358: PUSH
40359: LD_INT 29
40361: PUSH
40362: LD_INT 30
40364: PUSH
40365: LD_INT 31
40367: PUSH
40368: LD_INT 37
40370: PUSH
40371: LD_INT 38
40373: PUSH
40374: LD_INT 32
40376: PUSH
40377: LD_INT 27
40379: PUSH
40380: LD_INT 33
40382: PUSH
40383: LD_INT 69
40385: PUSH
40386: LD_INT 39
40388: PUSH
40389: LD_INT 34
40391: PUSH
40392: LD_INT 40
40394: PUSH
40395: LD_INT 71
40397: PUSH
40398: LD_INT 23
40400: PUSH
40401: LD_INT 44
40403: PUSH
40404: LD_INT 48
40406: PUSH
40407: LD_INT 49
40409: PUSH
40410: LD_INT 50
40412: PUSH
40413: LD_INT 51
40415: PUSH
40416: LD_INT 52
40418: PUSH
40419: LD_INT 53
40421: PUSH
40422: LD_INT 54
40424: PUSH
40425: LD_INT 55
40427: PUSH
40428: LD_INT 56
40430: PUSH
40431: LD_INT 57
40433: PUSH
40434: LD_INT 58
40436: PUSH
40437: LD_INT 59
40439: PUSH
40440: LD_INT 63
40442: PUSH
40443: LD_INT 64
40445: PUSH
40446: LD_INT 65
40448: PUSH
40449: LD_INT 82
40451: PUSH
40452: LD_INT 83
40454: PUSH
40455: LD_INT 84
40457: PUSH
40458: LD_INT 85
40460: PUSH
40461: LD_INT 86
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: LIST
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: ST_TO_ADDR
40519: GO 40522
40521: POP
// if state > - 1 and state < 3 then
40522: LD_VAR 0 3
40526: PUSH
40527: LD_INT 1
40529: NEG
40530: GREATER
40531: PUSH
40532: LD_VAR 0 3
40536: PUSH
40537: LD_INT 3
40539: LESS
40540: AND
40541: IFFALSE 40598
// for i in result do
40543: LD_ADDR_VAR 0 5
40547: PUSH
40548: LD_VAR 0 4
40552: PUSH
40553: FOR_IN
40554: IFFALSE 40596
// if GetTech ( i , side ) <> state then
40556: LD_VAR 0 5
40560: PPUSH
40561: LD_VAR 0 1
40565: PPUSH
40566: CALL_OW 321
40570: PUSH
40571: LD_VAR 0 3
40575: NONEQUAL
40576: IFFALSE 40594
// result := result diff i ;
40578: LD_ADDR_VAR 0 4
40582: PUSH
40583: LD_VAR 0 4
40587: PUSH
40588: LD_VAR 0 5
40592: DIFF
40593: ST_TO_ADDR
40594: GO 40553
40596: POP
40597: POP
// end ;
40598: LD_VAR 0 4
40602: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
40603: LD_INT 0
40605: PPUSH
40606: PPUSH
40607: PPUSH
// result := true ;
40608: LD_ADDR_VAR 0 3
40612: PUSH
40613: LD_INT 1
40615: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
40616: LD_ADDR_VAR 0 5
40620: PUSH
40621: LD_VAR 0 2
40625: PPUSH
40626: CALL_OW 480
40630: ST_TO_ADDR
// if not tmp then
40631: LD_VAR 0 5
40635: NOT
40636: IFFALSE 40640
// exit ;
40638: GO 40689
// for i in tmp do
40640: LD_ADDR_VAR 0 4
40644: PUSH
40645: LD_VAR 0 5
40649: PUSH
40650: FOR_IN
40651: IFFALSE 40687
// if GetTech ( i , side ) <> state_researched then
40653: LD_VAR 0 4
40657: PPUSH
40658: LD_VAR 0 1
40662: PPUSH
40663: CALL_OW 321
40667: PUSH
40668: LD_INT 2
40670: NONEQUAL
40671: IFFALSE 40685
// begin result := false ;
40673: LD_ADDR_VAR 0 3
40677: PUSH
40678: LD_INT 0
40680: ST_TO_ADDR
// exit ;
40681: POP
40682: POP
40683: GO 40689
// end ;
40685: GO 40650
40687: POP
40688: POP
// end ;
40689: LD_VAR 0 3
40693: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40694: LD_INT 0
40696: PPUSH
40697: PPUSH
40698: PPUSH
40699: PPUSH
40700: PPUSH
40701: PPUSH
40702: PPUSH
40703: PPUSH
40704: PPUSH
40705: PPUSH
40706: PPUSH
40707: PPUSH
40708: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40709: LD_VAR 0 1
40713: NOT
40714: PUSH
40715: LD_VAR 0 1
40719: PPUSH
40720: CALL_OW 257
40724: PUSH
40725: LD_INT 9
40727: NONEQUAL
40728: OR
40729: IFFALSE 40733
// exit ;
40731: GO 41306
// side := GetSide ( unit ) ;
40733: LD_ADDR_VAR 0 9
40737: PUSH
40738: LD_VAR 0 1
40742: PPUSH
40743: CALL_OW 255
40747: ST_TO_ADDR
// tech_space := tech_spacanom ;
40748: LD_ADDR_VAR 0 12
40752: PUSH
40753: LD_INT 29
40755: ST_TO_ADDR
// tech_time := tech_taurad ;
40756: LD_ADDR_VAR 0 13
40760: PUSH
40761: LD_INT 28
40763: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40764: LD_ADDR_VAR 0 11
40768: PUSH
40769: LD_VAR 0 1
40773: PPUSH
40774: CALL_OW 310
40778: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40779: LD_VAR 0 11
40783: PPUSH
40784: CALL_OW 247
40788: PUSH
40789: LD_INT 2
40791: EQUAL
40792: IFFALSE 40796
// exit ;
40794: GO 41306
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40796: LD_ADDR_VAR 0 8
40800: PUSH
40801: LD_INT 81
40803: PUSH
40804: LD_VAR 0 9
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 3
40815: PUSH
40816: LD_INT 21
40818: PUSH
40819: LD_INT 3
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PPUSH
40834: CALL_OW 69
40838: ST_TO_ADDR
// if not tmp then
40839: LD_VAR 0 8
40843: NOT
40844: IFFALSE 40848
// exit ;
40846: GO 41306
// if in_unit then
40848: LD_VAR 0 11
40852: IFFALSE 40876
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40854: LD_ADDR_VAR 0 10
40858: PUSH
40859: LD_VAR 0 8
40863: PPUSH
40864: LD_VAR 0 11
40868: PPUSH
40869: CALL_OW 74
40873: ST_TO_ADDR
40874: GO 40896
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40876: LD_ADDR_VAR 0 10
40880: PUSH
40881: LD_VAR 0 8
40885: PPUSH
40886: LD_VAR 0 1
40890: PPUSH
40891: CALL_OW 74
40895: ST_TO_ADDR
// if not enemy then
40896: LD_VAR 0 10
40900: NOT
40901: IFFALSE 40905
// exit ;
40903: GO 41306
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40905: LD_VAR 0 11
40909: PUSH
40910: LD_VAR 0 11
40914: PPUSH
40915: LD_VAR 0 10
40919: PPUSH
40920: CALL_OW 296
40924: PUSH
40925: LD_INT 13
40927: GREATER
40928: AND
40929: PUSH
40930: LD_VAR 0 1
40934: PPUSH
40935: LD_VAR 0 10
40939: PPUSH
40940: CALL_OW 296
40944: PUSH
40945: LD_INT 12
40947: GREATER
40948: OR
40949: IFFALSE 40953
// exit ;
40951: GO 41306
// missile := [ 1 ] ;
40953: LD_ADDR_VAR 0 14
40957: PUSH
40958: LD_INT 1
40960: PUSH
40961: EMPTY
40962: LIST
40963: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40964: LD_VAR 0 9
40968: PPUSH
40969: LD_VAR 0 12
40973: PPUSH
40974: CALL_OW 325
40978: IFFALSE 41007
// missile := Replace ( missile , missile + 1 , 2 ) ;
40980: LD_ADDR_VAR 0 14
40984: PUSH
40985: LD_VAR 0 14
40989: PPUSH
40990: LD_VAR 0 14
40994: PUSH
40995: LD_INT 1
40997: PLUS
40998: PPUSH
40999: LD_INT 2
41001: PPUSH
41002: CALL_OW 1
41006: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
41007: LD_VAR 0 9
41011: PPUSH
41012: LD_VAR 0 13
41016: PPUSH
41017: CALL_OW 325
41021: PUSH
41022: LD_VAR 0 10
41026: PPUSH
41027: CALL_OW 255
41031: PPUSH
41032: LD_VAR 0 13
41036: PPUSH
41037: CALL_OW 325
41041: NOT
41042: AND
41043: IFFALSE 41072
// missile := Replace ( missile , missile + 1 , 3 ) ;
41045: LD_ADDR_VAR 0 14
41049: PUSH
41050: LD_VAR 0 14
41054: PPUSH
41055: LD_VAR 0 14
41059: PUSH
41060: LD_INT 1
41062: PLUS
41063: PPUSH
41064: LD_INT 3
41066: PPUSH
41067: CALL_OW 1
41071: ST_TO_ADDR
// if missile < 2 then
41072: LD_VAR 0 14
41076: PUSH
41077: LD_INT 2
41079: LESS
41080: IFFALSE 41084
// exit ;
41082: GO 41306
// x := GetX ( enemy ) ;
41084: LD_ADDR_VAR 0 4
41088: PUSH
41089: LD_VAR 0 10
41093: PPUSH
41094: CALL_OW 250
41098: ST_TO_ADDR
// y := GetY ( enemy ) ;
41099: LD_ADDR_VAR 0 5
41103: PUSH
41104: LD_VAR 0 10
41108: PPUSH
41109: CALL_OW 251
41113: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
41114: LD_ADDR_VAR 0 6
41118: PUSH
41119: LD_VAR 0 4
41123: PUSH
41124: LD_INT 1
41126: NEG
41127: PPUSH
41128: LD_INT 1
41130: PPUSH
41131: CALL_OW 12
41135: PLUS
41136: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
41137: LD_ADDR_VAR 0 7
41141: PUSH
41142: LD_VAR 0 5
41146: PUSH
41147: LD_INT 1
41149: NEG
41150: PPUSH
41151: LD_INT 1
41153: PPUSH
41154: CALL_OW 12
41158: PLUS
41159: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41160: LD_VAR 0 6
41164: PPUSH
41165: LD_VAR 0 7
41169: PPUSH
41170: CALL_OW 488
41174: NOT
41175: IFFALSE 41197
// begin _x := x ;
41177: LD_ADDR_VAR 0 6
41181: PUSH
41182: LD_VAR 0 4
41186: ST_TO_ADDR
// _y := y ;
41187: LD_ADDR_VAR 0 7
41191: PUSH
41192: LD_VAR 0 5
41196: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
41197: LD_ADDR_VAR 0 3
41201: PUSH
41202: LD_INT 1
41204: PPUSH
41205: LD_VAR 0 14
41209: PPUSH
41210: CALL_OW 12
41214: ST_TO_ADDR
// case i of 1 :
41215: LD_VAR 0 3
41219: PUSH
41220: LD_INT 1
41222: DOUBLE
41223: EQUAL
41224: IFTRUE 41228
41226: GO 41245
41228: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
41229: LD_VAR 0 1
41233: PPUSH
41234: LD_VAR 0 10
41238: PPUSH
41239: CALL_OW 115
41243: GO 41306
41245: LD_INT 2
41247: DOUBLE
41248: EQUAL
41249: IFTRUE 41253
41251: GO 41275
41253: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
41254: LD_VAR 0 1
41258: PPUSH
41259: LD_VAR 0 6
41263: PPUSH
41264: LD_VAR 0 7
41268: PPUSH
41269: CALL_OW 153
41273: GO 41306
41275: LD_INT 3
41277: DOUBLE
41278: EQUAL
41279: IFTRUE 41283
41281: GO 41305
41283: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
41284: LD_VAR 0 1
41288: PPUSH
41289: LD_VAR 0 6
41293: PPUSH
41294: LD_VAR 0 7
41298: PPUSH
41299: CALL_OW 154
41303: GO 41306
41305: POP
// end ;
41306: LD_VAR 0 2
41310: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
41311: LD_INT 0
41313: PPUSH
41314: PPUSH
41315: PPUSH
41316: PPUSH
41317: PPUSH
41318: PPUSH
// if not unit or not building then
41319: LD_VAR 0 1
41323: NOT
41324: PUSH
41325: LD_VAR 0 2
41329: NOT
41330: OR
41331: IFFALSE 41335
// exit ;
41333: GO 41493
// x := GetX ( building ) ;
41335: LD_ADDR_VAR 0 5
41339: PUSH
41340: LD_VAR 0 2
41344: PPUSH
41345: CALL_OW 250
41349: ST_TO_ADDR
// y := GetY ( building ) ;
41350: LD_ADDR_VAR 0 6
41354: PUSH
41355: LD_VAR 0 2
41359: PPUSH
41360: CALL_OW 251
41364: ST_TO_ADDR
// for i = 0 to 5 do
41365: LD_ADDR_VAR 0 4
41369: PUSH
41370: DOUBLE
41371: LD_INT 0
41373: DEC
41374: ST_TO_ADDR
41375: LD_INT 5
41377: PUSH
41378: FOR_TO
41379: IFFALSE 41491
// begin _x := ShiftX ( x , i , 3 ) ;
41381: LD_ADDR_VAR 0 7
41385: PUSH
41386: LD_VAR 0 5
41390: PPUSH
41391: LD_VAR 0 4
41395: PPUSH
41396: LD_INT 3
41398: PPUSH
41399: CALL_OW 272
41403: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
41404: LD_ADDR_VAR 0 8
41408: PUSH
41409: LD_VAR 0 6
41413: PPUSH
41414: LD_VAR 0 4
41418: PPUSH
41419: LD_INT 3
41421: PPUSH
41422: CALL_OW 273
41426: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
41427: LD_VAR 0 7
41431: PPUSH
41432: LD_VAR 0 8
41436: PPUSH
41437: CALL_OW 488
41441: NOT
41442: IFFALSE 41446
// continue ;
41444: GO 41378
// if HexInfo ( _x , _y ) = 0 then
41446: LD_VAR 0 7
41450: PPUSH
41451: LD_VAR 0 8
41455: PPUSH
41456: CALL_OW 428
41460: PUSH
41461: LD_INT 0
41463: EQUAL
41464: IFFALSE 41489
// begin ComMoveXY ( unit , _x , _y ) ;
41466: LD_VAR 0 1
41470: PPUSH
41471: LD_VAR 0 7
41475: PPUSH
41476: LD_VAR 0 8
41480: PPUSH
41481: CALL_OW 111
// exit ;
41485: POP
41486: POP
41487: GO 41493
// end ; end ;
41489: GO 41378
41491: POP
41492: POP
// end ;
41493: LD_VAR 0 3
41497: RET
// export function ScanBase ( side , base_area ) ; begin
41498: LD_INT 0
41500: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
41501: LD_ADDR_VAR 0 3
41505: PUSH
41506: LD_VAR 0 2
41510: PPUSH
41511: LD_INT 81
41513: PUSH
41514: LD_VAR 0 1
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PPUSH
41523: CALL_OW 70
41527: ST_TO_ADDR
// end ;
41528: LD_VAR 0 3
41532: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
41533: LD_INT 0
41535: PPUSH
41536: PPUSH
41537: PPUSH
41538: PPUSH
// result := false ;
41539: LD_ADDR_VAR 0 2
41543: PUSH
41544: LD_INT 0
41546: ST_TO_ADDR
// side := GetSide ( unit ) ;
41547: LD_ADDR_VAR 0 3
41551: PUSH
41552: LD_VAR 0 1
41556: PPUSH
41557: CALL_OW 255
41561: ST_TO_ADDR
// nat := GetNation ( unit ) ;
41562: LD_ADDR_VAR 0 4
41566: PUSH
41567: LD_VAR 0 1
41571: PPUSH
41572: CALL_OW 248
41576: ST_TO_ADDR
// case nat of 1 :
41577: LD_VAR 0 4
41581: PUSH
41582: LD_INT 1
41584: DOUBLE
41585: EQUAL
41586: IFTRUE 41590
41588: GO 41601
41590: POP
// tech := tech_lassight ; 2 :
41591: LD_ADDR_VAR 0 5
41595: PUSH
41596: LD_INT 12
41598: ST_TO_ADDR
41599: GO 41640
41601: LD_INT 2
41603: DOUBLE
41604: EQUAL
41605: IFTRUE 41609
41607: GO 41620
41609: POP
// tech := tech_mortar ; 3 :
41610: LD_ADDR_VAR 0 5
41614: PUSH
41615: LD_INT 41
41617: ST_TO_ADDR
41618: GO 41640
41620: LD_INT 3
41622: DOUBLE
41623: EQUAL
41624: IFTRUE 41628
41626: GO 41639
41628: POP
// tech := tech_bazooka ; end ;
41629: LD_ADDR_VAR 0 5
41633: PUSH
41634: LD_INT 44
41636: ST_TO_ADDR
41637: GO 41640
41639: POP
// if Researched ( side , tech ) then
41640: LD_VAR 0 3
41644: PPUSH
41645: LD_VAR 0 5
41649: PPUSH
41650: CALL_OW 325
41654: IFFALSE 41681
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41656: LD_ADDR_VAR 0 2
41660: PUSH
41661: LD_INT 5
41663: PUSH
41664: LD_INT 8
41666: PUSH
41667: LD_INT 9
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: LIST
41674: PUSH
41675: LD_VAR 0 4
41679: ARRAY
41680: ST_TO_ADDR
// end ;
41681: LD_VAR 0 2
41685: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41686: LD_INT 0
41688: PPUSH
41689: PPUSH
41690: PPUSH
// if not mines then
41691: LD_VAR 0 2
41695: NOT
41696: IFFALSE 41700
// exit ;
41698: GO 41844
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41700: LD_ADDR_VAR 0 5
41704: PUSH
41705: LD_INT 81
41707: PUSH
41708: LD_VAR 0 1
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 3
41719: PUSH
41720: LD_INT 21
41722: PUSH
41723: LD_INT 3
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PPUSH
41738: CALL_OW 69
41742: ST_TO_ADDR
// for i in mines do
41743: LD_ADDR_VAR 0 4
41747: PUSH
41748: LD_VAR 0 2
41752: PUSH
41753: FOR_IN
41754: IFFALSE 41842
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41756: LD_VAR 0 4
41760: PUSH
41761: LD_INT 1
41763: ARRAY
41764: PPUSH
41765: LD_VAR 0 4
41769: PUSH
41770: LD_INT 2
41772: ARRAY
41773: PPUSH
41774: CALL_OW 458
41778: NOT
41779: IFFALSE 41783
// continue ;
41781: GO 41753
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41783: LD_VAR 0 4
41787: PUSH
41788: LD_INT 1
41790: ARRAY
41791: PPUSH
41792: LD_VAR 0 4
41796: PUSH
41797: LD_INT 2
41799: ARRAY
41800: PPUSH
41801: CALL_OW 428
41805: PUSH
41806: LD_VAR 0 5
41810: IN
41811: IFFALSE 41840
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41813: LD_VAR 0 4
41817: PUSH
41818: LD_INT 1
41820: ARRAY
41821: PPUSH
41822: LD_VAR 0 4
41826: PUSH
41827: LD_INT 2
41829: ARRAY
41830: PPUSH
41831: LD_VAR 0 1
41835: PPUSH
41836: CALL_OW 456
// end ;
41840: GO 41753
41842: POP
41843: POP
// end ;
41844: LD_VAR 0 3
41848: RET
// export function Count ( array ) ; begin
41849: LD_INT 0
41851: PPUSH
// result := array + 0 ;
41852: LD_ADDR_VAR 0 2
41856: PUSH
41857: LD_VAR 0 1
41861: PUSH
41862: LD_INT 0
41864: PLUS
41865: ST_TO_ADDR
// end ;
41866: LD_VAR 0 2
41870: RET
// export function IsEmpty ( building ) ; begin
41871: LD_INT 0
41873: PPUSH
// if not building then
41874: LD_VAR 0 1
41878: NOT
41879: IFFALSE 41883
// exit ;
41881: GO 41926
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41883: LD_ADDR_VAR 0 2
41887: PUSH
41888: LD_VAR 0 1
41892: PUSH
41893: LD_INT 22
41895: PUSH
41896: LD_VAR 0 1
41900: PPUSH
41901: CALL_OW 255
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 58
41912: PUSH
41913: EMPTY
41914: LIST
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PPUSH
41920: CALL_OW 69
41924: IN
41925: ST_TO_ADDR
// end ;
41926: LD_VAR 0 2
41930: RET
// export function IsNotFull ( building ) ; var places ; begin
41931: LD_INT 0
41933: PPUSH
41934: PPUSH
// if not building then
41935: LD_VAR 0 1
41939: NOT
41940: IFFALSE 41944
// exit ;
41942: GO 41972
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41944: LD_ADDR_VAR 0 2
41948: PUSH
41949: LD_VAR 0 1
41953: PPUSH
41954: LD_INT 3
41956: PUSH
41957: LD_INT 62
41959: PUSH
41960: EMPTY
41961: LIST
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PPUSH
41967: CALL_OW 72
41971: ST_TO_ADDR
// end ;
41972: LD_VAR 0 2
41976: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41977: LD_INT 0
41979: PPUSH
41980: PPUSH
41981: PPUSH
41982: PPUSH
// tmp := [ ] ;
41983: LD_ADDR_VAR 0 3
41987: PUSH
41988: EMPTY
41989: ST_TO_ADDR
// list := [ ] ;
41990: LD_ADDR_VAR 0 5
41994: PUSH
41995: EMPTY
41996: ST_TO_ADDR
// for i = 16 to 25 do
41997: LD_ADDR_VAR 0 4
42001: PUSH
42002: DOUBLE
42003: LD_INT 16
42005: DEC
42006: ST_TO_ADDR
42007: LD_INT 25
42009: PUSH
42010: FOR_TO
42011: IFFALSE 42084
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
42013: LD_ADDR_VAR 0 3
42017: PUSH
42018: LD_VAR 0 3
42022: PUSH
42023: LD_INT 22
42025: PUSH
42026: LD_VAR 0 1
42030: PPUSH
42031: CALL_OW 255
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 91
42042: PUSH
42043: LD_VAR 0 1
42047: PUSH
42048: LD_INT 6
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 30
42058: PUSH
42059: LD_VAR 0 4
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: LIST
42072: PUSH
42073: EMPTY
42074: LIST
42075: PPUSH
42076: CALL_OW 69
42080: ADD
42081: ST_TO_ADDR
42082: GO 42010
42084: POP
42085: POP
// for i = 1 to tmp do
42086: LD_ADDR_VAR 0 4
42090: PUSH
42091: DOUBLE
42092: LD_INT 1
42094: DEC
42095: ST_TO_ADDR
42096: LD_VAR 0 3
42100: PUSH
42101: FOR_TO
42102: IFFALSE 42190
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
42104: LD_ADDR_VAR 0 5
42108: PUSH
42109: LD_VAR 0 5
42113: PUSH
42114: LD_VAR 0 3
42118: PUSH
42119: LD_VAR 0 4
42123: ARRAY
42124: PPUSH
42125: CALL_OW 266
42129: PUSH
42130: LD_VAR 0 3
42134: PUSH
42135: LD_VAR 0 4
42139: ARRAY
42140: PPUSH
42141: CALL_OW 250
42145: PUSH
42146: LD_VAR 0 3
42150: PUSH
42151: LD_VAR 0 4
42155: ARRAY
42156: PPUSH
42157: CALL_OW 251
42161: PUSH
42162: LD_VAR 0 3
42166: PUSH
42167: LD_VAR 0 4
42171: ARRAY
42172: PPUSH
42173: CALL_OW 254
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: PUSH
42184: EMPTY
42185: LIST
42186: ADD
42187: ST_TO_ADDR
42188: GO 42101
42190: POP
42191: POP
// result := list ;
42192: LD_ADDR_VAR 0 2
42196: PUSH
42197: LD_VAR 0 5
42201: ST_TO_ADDR
// end ;
42202: LD_VAR 0 2
42206: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
42207: LD_INT 0
42209: PPUSH
42210: PPUSH
42211: PPUSH
42212: PPUSH
42213: PPUSH
42214: PPUSH
42215: PPUSH
// if not factory then
42216: LD_VAR 0 1
42220: NOT
42221: IFFALSE 42225
// exit ;
42223: GO 42818
// if control = control_apeman then
42225: LD_VAR 0 4
42229: PUSH
42230: LD_INT 5
42232: EQUAL
42233: IFFALSE 42342
// begin tmp := UnitsInside ( factory ) ;
42235: LD_ADDR_VAR 0 8
42239: PUSH
42240: LD_VAR 0 1
42244: PPUSH
42245: CALL_OW 313
42249: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
42250: LD_VAR 0 8
42254: PPUSH
42255: LD_INT 25
42257: PUSH
42258: LD_INT 12
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PPUSH
42265: CALL_OW 72
42269: NOT
42270: IFFALSE 42280
// control := control_manual ;
42272: LD_ADDR_VAR 0 4
42276: PUSH
42277: LD_INT 1
42279: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
42280: LD_ADDR_VAR 0 8
42284: PUSH
42285: LD_VAR 0 1
42289: PPUSH
42290: CALL 41977 0 1
42294: ST_TO_ADDR
// if tmp then
42295: LD_VAR 0 8
42299: IFFALSE 42342
// begin for i in tmp do
42301: LD_ADDR_VAR 0 7
42305: PUSH
42306: LD_VAR 0 8
42310: PUSH
42311: FOR_IN
42312: IFFALSE 42340
// if i [ 1 ] = b_ext_radio then
42314: LD_VAR 0 7
42318: PUSH
42319: LD_INT 1
42321: ARRAY
42322: PUSH
42323: LD_INT 22
42325: EQUAL
42326: IFFALSE 42338
// begin control := control_remote ;
42328: LD_ADDR_VAR 0 4
42332: PUSH
42333: LD_INT 2
42335: ST_TO_ADDR
// break ;
42336: GO 42340
// end ;
42338: GO 42311
42340: POP
42341: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42342: LD_VAR 0 1
42346: PPUSH
42347: LD_VAR 0 2
42351: PPUSH
42352: LD_VAR 0 3
42356: PPUSH
42357: LD_VAR 0 4
42361: PPUSH
42362: LD_VAR 0 5
42366: PPUSH
42367: CALL_OW 448
42371: IFFALSE 42406
// begin result := [ chassis , engine , control , weapon ] ;
42373: LD_ADDR_VAR 0 6
42377: PUSH
42378: LD_VAR 0 2
42382: PUSH
42383: LD_VAR 0 3
42387: PUSH
42388: LD_VAR 0 4
42392: PUSH
42393: LD_VAR 0 5
42397: PUSH
42398: EMPTY
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: ST_TO_ADDR
// exit ;
42404: GO 42818
// end ; _chassis := AvailableChassisList ( factory ) ;
42406: LD_ADDR_VAR 0 9
42410: PUSH
42411: LD_VAR 0 1
42415: PPUSH
42416: CALL_OW 475
42420: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
42421: LD_ADDR_VAR 0 11
42425: PUSH
42426: LD_VAR 0 1
42430: PPUSH
42431: CALL_OW 476
42435: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
42436: LD_ADDR_VAR 0 12
42440: PUSH
42441: LD_VAR 0 1
42445: PPUSH
42446: CALL_OW 477
42450: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
42451: LD_ADDR_VAR 0 10
42455: PUSH
42456: LD_VAR 0 1
42460: PPUSH
42461: CALL_OW 478
42465: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
42466: LD_VAR 0 9
42470: NOT
42471: PUSH
42472: LD_VAR 0 11
42476: NOT
42477: OR
42478: PUSH
42479: LD_VAR 0 12
42483: NOT
42484: OR
42485: PUSH
42486: LD_VAR 0 10
42490: NOT
42491: OR
42492: IFFALSE 42527
// begin result := [ chassis , engine , control , weapon ] ;
42494: LD_ADDR_VAR 0 6
42498: PUSH
42499: LD_VAR 0 2
42503: PUSH
42504: LD_VAR 0 3
42508: PUSH
42509: LD_VAR 0 4
42513: PUSH
42514: LD_VAR 0 5
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: ST_TO_ADDR
// exit ;
42525: GO 42818
// end ; if not chassis in _chassis then
42527: LD_VAR 0 2
42531: PUSH
42532: LD_VAR 0 9
42536: IN
42537: NOT
42538: IFFALSE 42564
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42540: LD_ADDR_VAR 0 2
42544: PUSH
42545: LD_VAR 0 9
42549: PUSH
42550: LD_INT 1
42552: PPUSH
42553: LD_VAR 0 9
42557: PPUSH
42558: CALL_OW 12
42562: ARRAY
42563: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42564: LD_VAR 0 2
42568: PPUSH
42569: LD_VAR 0 3
42573: PPUSH
42574: CALL 42823 0 2
42578: NOT
42579: IFFALSE 42638
// repeat engine := _engine [ 1 ] ;
42581: LD_ADDR_VAR 0 3
42585: PUSH
42586: LD_VAR 0 11
42590: PUSH
42591: LD_INT 1
42593: ARRAY
42594: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42595: LD_ADDR_VAR 0 11
42599: PUSH
42600: LD_VAR 0 11
42604: PPUSH
42605: LD_INT 1
42607: PPUSH
42608: CALL_OW 3
42612: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42613: LD_VAR 0 2
42617: PPUSH
42618: LD_VAR 0 3
42622: PPUSH
42623: CALL 42823 0 2
42627: PUSH
42628: LD_VAR 0 11
42632: PUSH
42633: EMPTY
42634: EQUAL
42635: OR
42636: IFFALSE 42581
// if not control in _control then
42638: LD_VAR 0 4
42642: PUSH
42643: LD_VAR 0 12
42647: IN
42648: NOT
42649: IFFALSE 42675
// control := _control [ rand ( 1 , _control ) ] ;
42651: LD_ADDR_VAR 0 4
42655: PUSH
42656: LD_VAR 0 12
42660: PUSH
42661: LD_INT 1
42663: PPUSH
42664: LD_VAR 0 12
42668: PPUSH
42669: CALL_OW 12
42673: ARRAY
42674: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42675: LD_VAR 0 2
42679: PPUSH
42680: LD_VAR 0 5
42684: PPUSH
42685: CALL 43043 0 2
42689: NOT
42690: IFFALSE 42749
// repeat weapon := _weapon [ 1 ] ;
42692: LD_ADDR_VAR 0 5
42696: PUSH
42697: LD_VAR 0 10
42701: PUSH
42702: LD_INT 1
42704: ARRAY
42705: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42706: LD_ADDR_VAR 0 10
42710: PUSH
42711: LD_VAR 0 10
42715: PPUSH
42716: LD_INT 1
42718: PPUSH
42719: CALL_OW 3
42723: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42724: LD_VAR 0 2
42728: PPUSH
42729: LD_VAR 0 5
42733: PPUSH
42734: CALL 43043 0 2
42738: PUSH
42739: LD_VAR 0 10
42743: PUSH
42744: EMPTY
42745: EQUAL
42746: OR
42747: IFFALSE 42692
// result := [ ] ;
42749: LD_ADDR_VAR 0 6
42753: PUSH
42754: EMPTY
42755: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42756: LD_VAR 0 1
42760: PPUSH
42761: LD_VAR 0 2
42765: PPUSH
42766: LD_VAR 0 3
42770: PPUSH
42771: LD_VAR 0 4
42775: PPUSH
42776: LD_VAR 0 5
42780: PPUSH
42781: CALL_OW 448
42785: IFFALSE 42818
// result := [ chassis , engine , control , weapon ] ;
42787: LD_ADDR_VAR 0 6
42791: PUSH
42792: LD_VAR 0 2
42796: PUSH
42797: LD_VAR 0 3
42801: PUSH
42802: LD_VAR 0 4
42806: PUSH
42807: LD_VAR 0 5
42811: PUSH
42812: EMPTY
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: ST_TO_ADDR
// end ;
42818: LD_VAR 0 6
42822: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42823: LD_INT 0
42825: PPUSH
// if not chassis or not engine then
42826: LD_VAR 0 1
42830: NOT
42831: PUSH
42832: LD_VAR 0 2
42836: NOT
42837: OR
42838: IFFALSE 42842
// exit ;
42840: GO 43038
// case engine of engine_solar :
42842: LD_VAR 0 2
42846: PUSH
42847: LD_INT 2
42849: DOUBLE
42850: EQUAL
42851: IFTRUE 42855
42853: GO 42893
42855: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42856: LD_ADDR_VAR 0 3
42860: PUSH
42861: LD_INT 11
42863: PUSH
42864: LD_INT 12
42866: PUSH
42867: LD_INT 13
42869: PUSH
42870: LD_INT 14
42872: PUSH
42873: LD_INT 1
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: LD_INT 3
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: ST_TO_ADDR
42891: GO 43022
42893: LD_INT 1
42895: DOUBLE
42896: EQUAL
42897: IFTRUE 42901
42899: GO 42963
42901: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42902: LD_ADDR_VAR 0 3
42906: PUSH
42907: LD_INT 11
42909: PUSH
42910: LD_INT 12
42912: PUSH
42913: LD_INT 13
42915: PUSH
42916: LD_INT 14
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: LD_INT 3
42927: PUSH
42928: LD_INT 4
42930: PUSH
42931: LD_INT 5
42933: PUSH
42934: LD_INT 21
42936: PUSH
42937: LD_INT 23
42939: PUSH
42940: LD_INT 22
42942: PUSH
42943: LD_INT 24
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: ST_TO_ADDR
42961: GO 43022
42963: LD_INT 3
42965: DOUBLE
42966: EQUAL
42967: IFTRUE 42971
42969: GO 43021
42971: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42972: LD_ADDR_VAR 0 3
42976: PUSH
42977: LD_INT 13
42979: PUSH
42980: LD_INT 14
42982: PUSH
42983: LD_INT 2
42985: PUSH
42986: LD_INT 3
42988: PUSH
42989: LD_INT 4
42991: PUSH
42992: LD_INT 5
42994: PUSH
42995: LD_INT 21
42997: PUSH
42998: LD_INT 22
43000: PUSH
43001: LD_INT 23
43003: PUSH
43004: LD_INT 24
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: LIST
43016: LIST
43017: LIST
43018: ST_TO_ADDR
43019: GO 43022
43021: POP
// result := ( chassis in result ) ;
43022: LD_ADDR_VAR 0 3
43026: PUSH
43027: LD_VAR 0 1
43031: PUSH
43032: LD_VAR 0 3
43036: IN
43037: ST_TO_ADDR
// end ;
43038: LD_VAR 0 3
43042: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
43043: LD_INT 0
43045: PPUSH
// if not chassis or not weapon then
43046: LD_VAR 0 1
43050: NOT
43051: PUSH
43052: LD_VAR 0 2
43056: NOT
43057: OR
43058: IFFALSE 43062
// exit ;
43060: GO 44122
// case weapon of us_machine_gun :
43062: LD_VAR 0 2
43066: PUSH
43067: LD_INT 2
43069: DOUBLE
43070: EQUAL
43071: IFTRUE 43075
43073: GO 43105
43075: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
43076: LD_ADDR_VAR 0 3
43080: PUSH
43081: LD_INT 1
43083: PUSH
43084: LD_INT 2
43086: PUSH
43087: LD_INT 3
43089: PUSH
43090: LD_INT 4
43092: PUSH
43093: LD_INT 5
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: ST_TO_ADDR
43103: GO 44106
43105: LD_INT 3
43107: DOUBLE
43108: EQUAL
43109: IFTRUE 43113
43111: GO 43143
43113: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
43114: LD_ADDR_VAR 0 3
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: LD_INT 2
43124: PUSH
43125: LD_INT 3
43127: PUSH
43128: LD_INT 4
43130: PUSH
43131: LD_INT 5
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: ST_TO_ADDR
43141: GO 44106
43143: LD_INT 11
43145: DOUBLE
43146: EQUAL
43147: IFTRUE 43151
43149: GO 43181
43151: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
43152: LD_ADDR_VAR 0 3
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: LD_INT 3
43165: PUSH
43166: LD_INT 4
43168: PUSH
43169: LD_INT 5
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: LIST
43176: LIST
43177: LIST
43178: ST_TO_ADDR
43179: GO 44106
43181: LD_INT 4
43183: DOUBLE
43184: EQUAL
43185: IFTRUE 43189
43187: GO 43215
43189: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
43190: LD_ADDR_VAR 0 3
43194: PUSH
43195: LD_INT 2
43197: PUSH
43198: LD_INT 3
43200: PUSH
43201: LD_INT 4
43203: PUSH
43204: LD_INT 5
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: ST_TO_ADDR
43213: GO 44106
43215: LD_INT 5
43217: DOUBLE
43218: EQUAL
43219: IFTRUE 43223
43221: GO 43249
43223: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
43224: LD_ADDR_VAR 0 3
43228: PUSH
43229: LD_INT 2
43231: PUSH
43232: LD_INT 3
43234: PUSH
43235: LD_INT 4
43237: PUSH
43238: LD_INT 5
43240: PUSH
43241: EMPTY
43242: LIST
43243: LIST
43244: LIST
43245: LIST
43246: ST_TO_ADDR
43247: GO 44106
43249: LD_INT 9
43251: DOUBLE
43252: EQUAL
43253: IFTRUE 43257
43255: GO 43283
43257: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
43258: LD_ADDR_VAR 0 3
43262: PUSH
43263: LD_INT 2
43265: PUSH
43266: LD_INT 3
43268: PUSH
43269: LD_INT 4
43271: PUSH
43272: LD_INT 5
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: LIST
43279: LIST
43280: ST_TO_ADDR
43281: GO 44106
43283: LD_INT 7
43285: DOUBLE
43286: EQUAL
43287: IFTRUE 43291
43289: GO 43317
43291: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
43292: LD_ADDR_VAR 0 3
43296: PUSH
43297: LD_INT 2
43299: PUSH
43300: LD_INT 3
43302: PUSH
43303: LD_INT 4
43305: PUSH
43306: LD_INT 5
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: ST_TO_ADDR
43315: GO 44106
43317: LD_INT 12
43319: DOUBLE
43320: EQUAL
43321: IFTRUE 43325
43323: GO 43351
43325: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
43326: LD_ADDR_VAR 0 3
43330: PUSH
43331: LD_INT 2
43333: PUSH
43334: LD_INT 3
43336: PUSH
43337: LD_INT 4
43339: PUSH
43340: LD_INT 5
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: ST_TO_ADDR
43349: GO 44106
43351: LD_INT 13
43353: DOUBLE
43354: EQUAL
43355: IFTRUE 43359
43357: GO 43385
43359: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
43360: LD_ADDR_VAR 0 3
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: LD_INT 3
43370: PUSH
43371: LD_INT 4
43373: PUSH
43374: LD_INT 5
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: ST_TO_ADDR
43383: GO 44106
43385: LD_INT 14
43387: DOUBLE
43388: EQUAL
43389: IFTRUE 43393
43391: GO 43411
43393: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
43394: LD_ADDR_VAR 0 3
43398: PUSH
43399: LD_INT 4
43401: PUSH
43402: LD_INT 5
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: ST_TO_ADDR
43409: GO 44106
43411: LD_INT 6
43413: DOUBLE
43414: EQUAL
43415: IFTRUE 43419
43417: GO 43437
43419: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
43420: LD_ADDR_VAR 0 3
43424: PUSH
43425: LD_INT 4
43427: PUSH
43428: LD_INT 5
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: ST_TO_ADDR
43435: GO 44106
43437: LD_INT 10
43439: DOUBLE
43440: EQUAL
43441: IFTRUE 43445
43443: GO 43463
43445: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
43446: LD_ADDR_VAR 0 3
43450: PUSH
43451: LD_INT 4
43453: PUSH
43454: LD_INT 5
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: ST_TO_ADDR
43461: GO 44106
43463: LD_INT 22
43465: DOUBLE
43466: EQUAL
43467: IFTRUE 43471
43469: GO 43497
43471: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
43472: LD_ADDR_VAR 0 3
43476: PUSH
43477: LD_INT 11
43479: PUSH
43480: LD_INT 12
43482: PUSH
43483: LD_INT 13
43485: PUSH
43486: LD_INT 14
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: ST_TO_ADDR
43495: GO 44106
43497: LD_INT 23
43499: DOUBLE
43500: EQUAL
43501: IFTRUE 43505
43503: GO 43531
43505: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43506: LD_ADDR_VAR 0 3
43510: PUSH
43511: LD_INT 11
43513: PUSH
43514: LD_INT 12
43516: PUSH
43517: LD_INT 13
43519: PUSH
43520: LD_INT 14
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: ST_TO_ADDR
43529: GO 44106
43531: LD_INT 24
43533: DOUBLE
43534: EQUAL
43535: IFTRUE 43539
43537: GO 43565
43539: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43540: LD_ADDR_VAR 0 3
43544: PUSH
43545: LD_INT 11
43547: PUSH
43548: LD_INT 12
43550: PUSH
43551: LD_INT 13
43553: PUSH
43554: LD_INT 14
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: ST_TO_ADDR
43563: GO 44106
43565: LD_INT 30
43567: DOUBLE
43568: EQUAL
43569: IFTRUE 43573
43571: GO 43599
43573: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43574: LD_ADDR_VAR 0 3
43578: PUSH
43579: LD_INT 11
43581: PUSH
43582: LD_INT 12
43584: PUSH
43585: LD_INT 13
43587: PUSH
43588: LD_INT 14
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: ST_TO_ADDR
43597: GO 44106
43599: LD_INT 25
43601: DOUBLE
43602: EQUAL
43603: IFTRUE 43607
43605: GO 43625
43607: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43608: LD_ADDR_VAR 0 3
43612: PUSH
43613: LD_INT 13
43615: PUSH
43616: LD_INT 14
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: ST_TO_ADDR
43623: GO 44106
43625: LD_INT 27
43627: DOUBLE
43628: EQUAL
43629: IFTRUE 43633
43631: GO 43651
43633: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43634: LD_ADDR_VAR 0 3
43638: PUSH
43639: LD_INT 13
43641: PUSH
43642: LD_INT 14
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: ST_TO_ADDR
43649: GO 44106
43651: LD_INT 92
43653: DOUBLE
43654: EQUAL
43655: IFTRUE 43659
43657: GO 43685
43659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43660: LD_ADDR_VAR 0 3
43664: PUSH
43665: LD_INT 11
43667: PUSH
43668: LD_INT 12
43670: PUSH
43671: LD_INT 13
43673: PUSH
43674: LD_INT 14
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: ST_TO_ADDR
43683: GO 44106
43685: LD_INT 28
43687: DOUBLE
43688: EQUAL
43689: IFTRUE 43693
43691: GO 43711
43693: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43694: LD_ADDR_VAR 0 3
43698: PUSH
43699: LD_INT 13
43701: PUSH
43702: LD_INT 14
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: ST_TO_ADDR
43709: GO 44106
43711: LD_INT 29
43713: DOUBLE
43714: EQUAL
43715: IFTRUE 43719
43717: GO 43737
43719: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43720: LD_ADDR_VAR 0 3
43724: PUSH
43725: LD_INT 13
43727: PUSH
43728: LD_INT 14
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: ST_TO_ADDR
43735: GO 44106
43737: LD_INT 31
43739: DOUBLE
43740: EQUAL
43741: IFTRUE 43745
43743: GO 43763
43745: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43746: LD_ADDR_VAR 0 3
43750: PUSH
43751: LD_INT 13
43753: PUSH
43754: LD_INT 14
43756: PUSH
43757: EMPTY
43758: LIST
43759: LIST
43760: ST_TO_ADDR
43761: GO 44106
43763: LD_INT 26
43765: DOUBLE
43766: EQUAL
43767: IFTRUE 43771
43769: GO 43789
43771: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43772: LD_ADDR_VAR 0 3
43776: PUSH
43777: LD_INT 13
43779: PUSH
43780: LD_INT 14
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: ST_TO_ADDR
43787: GO 44106
43789: LD_INT 42
43791: DOUBLE
43792: EQUAL
43793: IFTRUE 43797
43795: GO 43823
43797: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43798: LD_ADDR_VAR 0 3
43802: PUSH
43803: LD_INT 21
43805: PUSH
43806: LD_INT 22
43808: PUSH
43809: LD_INT 23
43811: PUSH
43812: LD_INT 24
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: ST_TO_ADDR
43821: GO 44106
43823: LD_INT 43
43825: DOUBLE
43826: EQUAL
43827: IFTRUE 43831
43829: GO 43857
43831: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43832: LD_ADDR_VAR 0 3
43836: PUSH
43837: LD_INT 21
43839: PUSH
43840: LD_INT 22
43842: PUSH
43843: LD_INT 23
43845: PUSH
43846: LD_INT 24
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: ST_TO_ADDR
43855: GO 44106
43857: LD_INT 44
43859: DOUBLE
43860: EQUAL
43861: IFTRUE 43865
43863: GO 43891
43865: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43866: LD_ADDR_VAR 0 3
43870: PUSH
43871: LD_INT 21
43873: PUSH
43874: LD_INT 22
43876: PUSH
43877: LD_INT 23
43879: PUSH
43880: LD_INT 24
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: LIST
43887: LIST
43888: ST_TO_ADDR
43889: GO 44106
43891: LD_INT 45
43893: DOUBLE
43894: EQUAL
43895: IFTRUE 43899
43897: GO 43925
43899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43900: LD_ADDR_VAR 0 3
43904: PUSH
43905: LD_INT 21
43907: PUSH
43908: LD_INT 22
43910: PUSH
43911: LD_INT 23
43913: PUSH
43914: LD_INT 24
43916: PUSH
43917: EMPTY
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: ST_TO_ADDR
43923: GO 44106
43925: LD_INT 49
43927: DOUBLE
43928: EQUAL
43929: IFTRUE 43933
43931: GO 43959
43933: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43934: LD_ADDR_VAR 0 3
43938: PUSH
43939: LD_INT 21
43941: PUSH
43942: LD_INT 22
43944: PUSH
43945: LD_INT 23
43947: PUSH
43948: LD_INT 24
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: ST_TO_ADDR
43957: GO 44106
43959: LD_INT 51
43961: DOUBLE
43962: EQUAL
43963: IFTRUE 43967
43965: GO 43993
43967: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43968: LD_ADDR_VAR 0 3
43972: PUSH
43973: LD_INT 21
43975: PUSH
43976: LD_INT 22
43978: PUSH
43979: LD_INT 23
43981: PUSH
43982: LD_INT 24
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: ST_TO_ADDR
43991: GO 44106
43993: LD_INT 52
43995: DOUBLE
43996: EQUAL
43997: IFTRUE 44001
43999: GO 44027
44001: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
44002: LD_ADDR_VAR 0 3
44006: PUSH
44007: LD_INT 21
44009: PUSH
44010: LD_INT 22
44012: PUSH
44013: LD_INT 23
44015: PUSH
44016: LD_INT 24
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: LIST
44023: LIST
44024: ST_TO_ADDR
44025: GO 44106
44027: LD_INT 53
44029: DOUBLE
44030: EQUAL
44031: IFTRUE 44035
44033: GO 44053
44035: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
44036: LD_ADDR_VAR 0 3
44040: PUSH
44041: LD_INT 23
44043: PUSH
44044: LD_INT 24
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: ST_TO_ADDR
44051: GO 44106
44053: LD_INT 46
44055: DOUBLE
44056: EQUAL
44057: IFTRUE 44061
44059: GO 44079
44061: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
44062: LD_ADDR_VAR 0 3
44066: PUSH
44067: LD_INT 23
44069: PUSH
44070: LD_INT 24
44072: PUSH
44073: EMPTY
44074: LIST
44075: LIST
44076: ST_TO_ADDR
44077: GO 44106
44079: LD_INT 47
44081: DOUBLE
44082: EQUAL
44083: IFTRUE 44087
44085: GO 44105
44087: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44088: LD_ADDR_VAR 0 3
44092: PUSH
44093: LD_INT 23
44095: PUSH
44096: LD_INT 24
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: ST_TO_ADDR
44103: GO 44106
44105: POP
// result := ( chassis in result ) ;
44106: LD_ADDR_VAR 0 3
44110: PUSH
44111: LD_VAR 0 1
44115: PUSH
44116: LD_VAR 0 3
44120: IN
44121: ST_TO_ADDR
// end ;
44122: LD_VAR 0 3
44126: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
44127: LD_INT 0
44129: PPUSH
44130: PPUSH
44131: PPUSH
44132: PPUSH
44133: PPUSH
44134: PPUSH
44135: PPUSH
// result := array ;
44136: LD_ADDR_VAR 0 5
44140: PUSH
44141: LD_VAR 0 1
44145: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
44146: LD_VAR 0 1
44150: NOT
44151: PUSH
44152: LD_VAR 0 2
44156: NOT
44157: OR
44158: PUSH
44159: LD_VAR 0 3
44163: NOT
44164: OR
44165: PUSH
44166: LD_VAR 0 2
44170: PUSH
44171: LD_VAR 0 1
44175: GREATER
44176: OR
44177: PUSH
44178: LD_VAR 0 3
44182: PUSH
44183: LD_VAR 0 1
44187: GREATER
44188: OR
44189: IFFALSE 44193
// exit ;
44191: GO 44489
// if direction then
44193: LD_VAR 0 4
44197: IFFALSE 44261
// begin d := 1 ;
44199: LD_ADDR_VAR 0 9
44203: PUSH
44204: LD_INT 1
44206: ST_TO_ADDR
// if i_from > i_to then
44207: LD_VAR 0 2
44211: PUSH
44212: LD_VAR 0 3
44216: GREATER
44217: IFFALSE 44243
// length := ( array - i_from ) + i_to else
44219: LD_ADDR_VAR 0 11
44223: PUSH
44224: LD_VAR 0 1
44228: PUSH
44229: LD_VAR 0 2
44233: MINUS
44234: PUSH
44235: LD_VAR 0 3
44239: PLUS
44240: ST_TO_ADDR
44241: GO 44259
// length := i_to - i_from ;
44243: LD_ADDR_VAR 0 11
44247: PUSH
44248: LD_VAR 0 3
44252: PUSH
44253: LD_VAR 0 2
44257: MINUS
44258: ST_TO_ADDR
// end else
44259: GO 44322
// begin d := - 1 ;
44261: LD_ADDR_VAR 0 9
44265: PUSH
44266: LD_INT 1
44268: NEG
44269: ST_TO_ADDR
// if i_from > i_to then
44270: LD_VAR 0 2
44274: PUSH
44275: LD_VAR 0 3
44279: GREATER
44280: IFFALSE 44300
// length := i_from - i_to else
44282: LD_ADDR_VAR 0 11
44286: PUSH
44287: LD_VAR 0 2
44291: PUSH
44292: LD_VAR 0 3
44296: MINUS
44297: ST_TO_ADDR
44298: GO 44322
// length := ( array - i_to ) + i_from ;
44300: LD_ADDR_VAR 0 11
44304: PUSH
44305: LD_VAR 0 1
44309: PUSH
44310: LD_VAR 0 3
44314: MINUS
44315: PUSH
44316: LD_VAR 0 2
44320: PLUS
44321: ST_TO_ADDR
// end ; if not length then
44322: LD_VAR 0 11
44326: NOT
44327: IFFALSE 44331
// exit ;
44329: GO 44489
// tmp := array ;
44331: LD_ADDR_VAR 0 10
44335: PUSH
44336: LD_VAR 0 1
44340: ST_TO_ADDR
// for i = 1 to length do
44341: LD_ADDR_VAR 0 6
44345: PUSH
44346: DOUBLE
44347: LD_INT 1
44349: DEC
44350: ST_TO_ADDR
44351: LD_VAR 0 11
44355: PUSH
44356: FOR_TO
44357: IFFALSE 44477
// begin for j = 1 to array do
44359: LD_ADDR_VAR 0 7
44363: PUSH
44364: DOUBLE
44365: LD_INT 1
44367: DEC
44368: ST_TO_ADDR
44369: LD_VAR 0 1
44373: PUSH
44374: FOR_TO
44375: IFFALSE 44463
// begin k := j + d ;
44377: LD_ADDR_VAR 0 8
44381: PUSH
44382: LD_VAR 0 7
44386: PUSH
44387: LD_VAR 0 9
44391: PLUS
44392: ST_TO_ADDR
// if k > array then
44393: LD_VAR 0 8
44397: PUSH
44398: LD_VAR 0 1
44402: GREATER
44403: IFFALSE 44413
// k := 1 ;
44405: LD_ADDR_VAR 0 8
44409: PUSH
44410: LD_INT 1
44412: ST_TO_ADDR
// if not k then
44413: LD_VAR 0 8
44417: NOT
44418: IFFALSE 44430
// k := array ;
44420: LD_ADDR_VAR 0 8
44424: PUSH
44425: LD_VAR 0 1
44429: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
44430: LD_ADDR_VAR 0 10
44434: PUSH
44435: LD_VAR 0 10
44439: PPUSH
44440: LD_VAR 0 8
44444: PPUSH
44445: LD_VAR 0 1
44449: PUSH
44450: LD_VAR 0 7
44454: ARRAY
44455: PPUSH
44456: CALL_OW 1
44460: ST_TO_ADDR
// end ;
44461: GO 44374
44463: POP
44464: POP
// array := tmp ;
44465: LD_ADDR_VAR 0 1
44469: PUSH
44470: LD_VAR 0 10
44474: ST_TO_ADDR
// end ;
44475: GO 44356
44477: POP
44478: POP
// result := array ;
44479: LD_ADDR_VAR 0 5
44483: PUSH
44484: LD_VAR 0 1
44488: ST_TO_ADDR
// end ;
44489: LD_VAR 0 5
44493: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44494: LD_INT 0
44496: PPUSH
44497: PPUSH
// result := 0 ;
44498: LD_ADDR_VAR 0 3
44502: PUSH
44503: LD_INT 0
44505: ST_TO_ADDR
// if not array or not value in array then
44506: LD_VAR 0 1
44510: NOT
44511: PUSH
44512: LD_VAR 0 2
44516: PUSH
44517: LD_VAR 0 1
44521: IN
44522: NOT
44523: OR
44524: IFFALSE 44528
// exit ;
44526: GO 44582
// for i = 1 to array do
44528: LD_ADDR_VAR 0 4
44532: PUSH
44533: DOUBLE
44534: LD_INT 1
44536: DEC
44537: ST_TO_ADDR
44538: LD_VAR 0 1
44542: PUSH
44543: FOR_TO
44544: IFFALSE 44580
// if value = array [ i ] then
44546: LD_VAR 0 2
44550: PUSH
44551: LD_VAR 0 1
44555: PUSH
44556: LD_VAR 0 4
44560: ARRAY
44561: EQUAL
44562: IFFALSE 44578
// begin result := i ;
44564: LD_ADDR_VAR 0 3
44568: PUSH
44569: LD_VAR 0 4
44573: ST_TO_ADDR
// exit ;
44574: POP
44575: POP
44576: GO 44582
// end ;
44578: GO 44543
44580: POP
44581: POP
// end ;
44582: LD_VAR 0 3
44586: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44587: LD_INT 0
44589: PPUSH
// vc_chassis := chassis ;
44590: LD_ADDR_OWVAR 37
44594: PUSH
44595: LD_VAR 0 1
44599: ST_TO_ADDR
// vc_engine := engine ;
44600: LD_ADDR_OWVAR 39
44604: PUSH
44605: LD_VAR 0 2
44609: ST_TO_ADDR
// vc_control := control ;
44610: LD_ADDR_OWVAR 38
44614: PUSH
44615: LD_VAR 0 3
44619: ST_TO_ADDR
// vc_weapon := weapon ;
44620: LD_ADDR_OWVAR 40
44624: PUSH
44625: LD_VAR 0 4
44629: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44630: LD_ADDR_OWVAR 41
44634: PUSH
44635: LD_VAR 0 5
44639: ST_TO_ADDR
// end ;
44640: LD_VAR 0 6
44644: RET
// export function WantPlant ( unit ) ; var task ; begin
44645: LD_INT 0
44647: PPUSH
44648: PPUSH
// result := false ;
44649: LD_ADDR_VAR 0 2
44653: PUSH
44654: LD_INT 0
44656: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44657: LD_ADDR_VAR 0 3
44661: PUSH
44662: LD_VAR 0 1
44666: PPUSH
44667: CALL_OW 437
44671: ST_TO_ADDR
// if task then
44672: LD_VAR 0 3
44676: IFFALSE 44704
// if task [ 1 ] [ 1 ] = p then
44678: LD_VAR 0 3
44682: PUSH
44683: LD_INT 1
44685: ARRAY
44686: PUSH
44687: LD_INT 1
44689: ARRAY
44690: PUSH
44691: LD_STRING p
44693: EQUAL
44694: IFFALSE 44704
// result := true ;
44696: LD_ADDR_VAR 0 2
44700: PUSH
44701: LD_INT 1
44703: ST_TO_ADDR
// end ;
44704: LD_VAR 0 2
44708: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44709: LD_INT 0
44711: PPUSH
44712: PPUSH
44713: PPUSH
44714: PPUSH
// if pos < 1 then
44715: LD_VAR 0 2
44719: PUSH
44720: LD_INT 1
44722: LESS
44723: IFFALSE 44727
// exit ;
44725: GO 45030
// if pos = 1 then
44727: LD_VAR 0 2
44731: PUSH
44732: LD_INT 1
44734: EQUAL
44735: IFFALSE 44768
// result := Replace ( arr , pos [ 1 ] , value ) else
44737: LD_ADDR_VAR 0 4
44741: PUSH
44742: LD_VAR 0 1
44746: PPUSH
44747: LD_VAR 0 2
44751: PUSH
44752: LD_INT 1
44754: ARRAY
44755: PPUSH
44756: LD_VAR 0 3
44760: PPUSH
44761: CALL_OW 1
44765: ST_TO_ADDR
44766: GO 45030
// begin tmp := arr ;
44768: LD_ADDR_VAR 0 6
44772: PUSH
44773: LD_VAR 0 1
44777: ST_TO_ADDR
// s_arr := [ tmp ] ;
44778: LD_ADDR_VAR 0 7
44782: PUSH
44783: LD_VAR 0 6
44787: PUSH
44788: EMPTY
44789: LIST
44790: ST_TO_ADDR
// for i = 1 to pos - 1 do
44791: LD_ADDR_VAR 0 5
44795: PUSH
44796: DOUBLE
44797: LD_INT 1
44799: DEC
44800: ST_TO_ADDR
44801: LD_VAR 0 2
44805: PUSH
44806: LD_INT 1
44808: MINUS
44809: PUSH
44810: FOR_TO
44811: IFFALSE 44856
// begin tmp := tmp [ pos [ i ] ] ;
44813: LD_ADDR_VAR 0 6
44817: PUSH
44818: LD_VAR 0 6
44822: PUSH
44823: LD_VAR 0 2
44827: PUSH
44828: LD_VAR 0 5
44832: ARRAY
44833: ARRAY
44834: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44835: LD_ADDR_VAR 0 7
44839: PUSH
44840: LD_VAR 0 7
44844: PUSH
44845: LD_VAR 0 6
44849: PUSH
44850: EMPTY
44851: LIST
44852: ADD
44853: ST_TO_ADDR
// end ;
44854: GO 44810
44856: POP
44857: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44858: LD_ADDR_VAR 0 6
44862: PUSH
44863: LD_VAR 0 6
44867: PPUSH
44868: LD_VAR 0 2
44872: PUSH
44873: LD_VAR 0 2
44877: ARRAY
44878: PPUSH
44879: LD_VAR 0 3
44883: PPUSH
44884: CALL_OW 1
44888: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44889: LD_ADDR_VAR 0 7
44893: PUSH
44894: LD_VAR 0 7
44898: PPUSH
44899: LD_VAR 0 7
44903: PPUSH
44904: LD_VAR 0 6
44908: PPUSH
44909: CALL_OW 1
44913: ST_TO_ADDR
// for i = s_arr downto 2 do
44914: LD_ADDR_VAR 0 5
44918: PUSH
44919: DOUBLE
44920: LD_VAR 0 7
44924: INC
44925: ST_TO_ADDR
44926: LD_INT 2
44928: PUSH
44929: FOR_DOWNTO
44930: IFFALSE 45014
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44932: LD_ADDR_VAR 0 6
44936: PUSH
44937: LD_VAR 0 7
44941: PUSH
44942: LD_VAR 0 5
44946: PUSH
44947: LD_INT 1
44949: MINUS
44950: ARRAY
44951: PPUSH
44952: LD_VAR 0 2
44956: PUSH
44957: LD_VAR 0 5
44961: PUSH
44962: LD_INT 1
44964: MINUS
44965: ARRAY
44966: PPUSH
44967: LD_VAR 0 7
44971: PUSH
44972: LD_VAR 0 5
44976: ARRAY
44977: PPUSH
44978: CALL_OW 1
44982: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44983: LD_ADDR_VAR 0 7
44987: PUSH
44988: LD_VAR 0 7
44992: PPUSH
44993: LD_VAR 0 5
44997: PUSH
44998: LD_INT 1
45000: MINUS
45001: PPUSH
45002: LD_VAR 0 6
45006: PPUSH
45007: CALL_OW 1
45011: ST_TO_ADDR
// end ;
45012: GO 44929
45014: POP
45015: POP
// result := s_arr [ 1 ] ;
45016: LD_ADDR_VAR 0 4
45020: PUSH
45021: LD_VAR 0 7
45025: PUSH
45026: LD_INT 1
45028: ARRAY
45029: ST_TO_ADDR
// end ; end ;
45030: LD_VAR 0 4
45034: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
45035: LD_INT 0
45037: PPUSH
45038: PPUSH
// if not list then
45039: LD_VAR 0 1
45043: NOT
45044: IFFALSE 45048
// exit ;
45046: GO 45139
// i := list [ pos1 ] ;
45048: LD_ADDR_VAR 0 5
45052: PUSH
45053: LD_VAR 0 1
45057: PUSH
45058: LD_VAR 0 2
45062: ARRAY
45063: ST_TO_ADDR
// if not i then
45064: LD_VAR 0 5
45068: NOT
45069: IFFALSE 45073
// exit ;
45071: GO 45139
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
45073: LD_ADDR_VAR 0 1
45077: PUSH
45078: LD_VAR 0 1
45082: PPUSH
45083: LD_VAR 0 2
45087: PPUSH
45088: LD_VAR 0 1
45092: PUSH
45093: LD_VAR 0 3
45097: ARRAY
45098: PPUSH
45099: CALL_OW 1
45103: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
45104: LD_ADDR_VAR 0 1
45108: PUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: LD_VAR 0 3
45118: PPUSH
45119: LD_VAR 0 5
45123: PPUSH
45124: CALL_OW 1
45128: ST_TO_ADDR
// result := list ;
45129: LD_ADDR_VAR 0 4
45133: PUSH
45134: LD_VAR 0 1
45138: ST_TO_ADDR
// end ;
45139: LD_VAR 0 4
45143: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
45144: LD_INT 0
45146: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
45147: LD_ADDR_VAR 0 5
45151: PUSH
45152: LD_VAR 0 1
45156: PPUSH
45157: CALL_OW 250
45161: PPUSH
45162: LD_VAR 0 1
45166: PPUSH
45167: CALL_OW 251
45171: PPUSH
45172: LD_VAR 0 2
45176: PPUSH
45177: LD_VAR 0 3
45181: PPUSH
45182: LD_VAR 0 4
45186: PPUSH
45187: CALL 45565 0 5
45191: ST_TO_ADDR
// end ;
45192: LD_VAR 0 5
45196: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
45197: LD_INT 0
45199: PPUSH
45200: PPUSH
45201: PPUSH
45202: PPUSH
// if not list or not unit then
45203: LD_VAR 0 2
45207: NOT
45208: PUSH
45209: LD_VAR 0 1
45213: NOT
45214: OR
45215: IFFALSE 45219
// exit ;
45217: GO 45560
// result := [ ] ;
45219: LD_ADDR_VAR 0 5
45223: PUSH
45224: EMPTY
45225: ST_TO_ADDR
// for i in list do
45226: LD_ADDR_VAR 0 6
45230: PUSH
45231: LD_VAR 0 2
45235: PUSH
45236: FOR_IN
45237: IFFALSE 45455
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
45239: LD_ADDR_VAR 0 8
45243: PUSH
45244: LD_VAR 0 1
45248: PPUSH
45249: LD_VAR 0 6
45253: PUSH
45254: LD_INT 1
45256: ARRAY
45257: PPUSH
45258: LD_VAR 0 6
45262: PUSH
45263: LD_INT 2
45265: ARRAY
45266: PPUSH
45267: CALL_OW 297
45271: ST_TO_ADDR
// if not Count ( result ) then
45272: LD_VAR 0 5
45276: PPUSH
45277: CALL 41849 0 1
45281: NOT
45282: IFFALSE 45315
// begin result := Join ( result , [ i , tmp ] ) ;
45284: LD_ADDR_VAR 0 5
45288: PUSH
45289: LD_VAR 0 5
45293: PPUSH
45294: LD_VAR 0 6
45298: PUSH
45299: LD_VAR 0 8
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PPUSH
45308: CALL 77449 0 2
45312: ST_TO_ADDR
// continue ;
45313: GO 45236
// end ; if result [ result ] [ 2 ] <= tmp then
45315: LD_VAR 0 5
45319: PUSH
45320: LD_VAR 0 5
45324: ARRAY
45325: PUSH
45326: LD_INT 2
45328: ARRAY
45329: PUSH
45330: LD_VAR 0 8
45334: LESSEQUAL
45335: IFFALSE 45368
// result := Join ( result , [ i , tmp ] ) else
45337: LD_ADDR_VAR 0 5
45341: PUSH
45342: LD_VAR 0 5
45346: PPUSH
45347: LD_VAR 0 6
45351: PUSH
45352: LD_VAR 0 8
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PPUSH
45361: CALL 77449 0 2
45365: ST_TO_ADDR
45366: GO 45453
// begin for j := 1 to Count ( result ) do
45368: LD_ADDR_VAR 0 7
45372: PUSH
45373: DOUBLE
45374: LD_INT 1
45376: DEC
45377: ST_TO_ADDR
45378: LD_VAR 0 5
45382: PPUSH
45383: CALL 41849 0 1
45387: PUSH
45388: FOR_TO
45389: IFFALSE 45451
// begin if tmp < result [ j ] [ 2 ] then
45391: LD_VAR 0 8
45395: PUSH
45396: LD_VAR 0 5
45400: PUSH
45401: LD_VAR 0 7
45405: ARRAY
45406: PUSH
45407: LD_INT 2
45409: ARRAY
45410: LESS
45411: IFFALSE 45449
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45413: LD_ADDR_VAR 0 5
45417: PUSH
45418: LD_VAR 0 5
45422: PPUSH
45423: LD_VAR 0 7
45427: PPUSH
45428: LD_VAR 0 6
45432: PUSH
45433: LD_VAR 0 8
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PPUSH
45442: CALL_OW 2
45446: ST_TO_ADDR
// break ;
45447: GO 45451
// end ; end ;
45449: GO 45388
45451: POP
45452: POP
// end ; end ;
45453: GO 45236
45455: POP
45456: POP
// if result and not asc then
45457: LD_VAR 0 5
45461: PUSH
45462: LD_VAR 0 3
45466: NOT
45467: AND
45468: IFFALSE 45485
// result := ReverseArray ( result ) ;
45470: LD_ADDR_VAR 0 5
45474: PUSH
45475: LD_VAR 0 5
45479: PPUSH
45480: CALL 72725 0 1
45484: ST_TO_ADDR
// tmp := [ ] ;
45485: LD_ADDR_VAR 0 8
45489: PUSH
45490: EMPTY
45491: ST_TO_ADDR
// if mode then
45492: LD_VAR 0 4
45496: IFFALSE 45560
// begin for i := 1 to result do
45498: LD_ADDR_VAR 0 6
45502: PUSH
45503: DOUBLE
45504: LD_INT 1
45506: DEC
45507: ST_TO_ADDR
45508: LD_VAR 0 5
45512: PUSH
45513: FOR_TO
45514: IFFALSE 45548
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
45516: LD_ADDR_VAR 0 8
45520: PUSH
45521: LD_VAR 0 8
45525: PPUSH
45526: LD_VAR 0 5
45530: PUSH
45531: LD_VAR 0 6
45535: ARRAY
45536: PUSH
45537: LD_INT 1
45539: ARRAY
45540: PPUSH
45541: CALL 77449 0 2
45545: ST_TO_ADDR
45546: GO 45513
45548: POP
45549: POP
// result := tmp ;
45550: LD_ADDR_VAR 0 5
45554: PUSH
45555: LD_VAR 0 8
45559: ST_TO_ADDR
// end ; end ;
45560: LD_VAR 0 5
45564: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
45565: LD_INT 0
45567: PPUSH
45568: PPUSH
45569: PPUSH
45570: PPUSH
// if not list then
45571: LD_VAR 0 3
45575: NOT
45576: IFFALSE 45580
// exit ;
45578: GO 45968
// result := [ ] ;
45580: LD_ADDR_VAR 0 6
45584: PUSH
45585: EMPTY
45586: ST_TO_ADDR
// for i in list do
45587: LD_ADDR_VAR 0 7
45591: PUSH
45592: LD_VAR 0 3
45596: PUSH
45597: FOR_IN
45598: IFFALSE 45800
// begin tmp := GetDistUnitXY ( i , x , y ) ;
45600: LD_ADDR_VAR 0 9
45604: PUSH
45605: LD_VAR 0 7
45609: PPUSH
45610: LD_VAR 0 1
45614: PPUSH
45615: LD_VAR 0 2
45619: PPUSH
45620: CALL_OW 297
45624: ST_TO_ADDR
// if not result then
45625: LD_VAR 0 6
45629: NOT
45630: IFFALSE 45656
// result := [ [ i , tmp ] ] else
45632: LD_ADDR_VAR 0 6
45636: PUSH
45637: LD_VAR 0 7
45641: PUSH
45642: LD_VAR 0 9
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: EMPTY
45652: LIST
45653: ST_TO_ADDR
45654: GO 45798
// begin if result [ result ] [ 2 ] < tmp then
45656: LD_VAR 0 6
45660: PUSH
45661: LD_VAR 0 6
45665: ARRAY
45666: PUSH
45667: LD_INT 2
45669: ARRAY
45670: PUSH
45671: LD_VAR 0 9
45675: LESS
45676: IFFALSE 45718
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
45678: LD_ADDR_VAR 0 6
45682: PUSH
45683: LD_VAR 0 6
45687: PPUSH
45688: LD_VAR 0 6
45692: PUSH
45693: LD_INT 1
45695: PLUS
45696: PPUSH
45697: LD_VAR 0 7
45701: PUSH
45702: LD_VAR 0 9
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PPUSH
45711: CALL_OW 2
45715: ST_TO_ADDR
45716: GO 45798
// for j = 1 to result do
45718: LD_ADDR_VAR 0 8
45722: PUSH
45723: DOUBLE
45724: LD_INT 1
45726: DEC
45727: ST_TO_ADDR
45728: LD_VAR 0 6
45732: PUSH
45733: FOR_TO
45734: IFFALSE 45796
// begin if tmp < result [ j ] [ 2 ] then
45736: LD_VAR 0 9
45740: PUSH
45741: LD_VAR 0 6
45745: PUSH
45746: LD_VAR 0 8
45750: ARRAY
45751: PUSH
45752: LD_INT 2
45754: ARRAY
45755: LESS
45756: IFFALSE 45794
// begin result := Insert ( result , j , [ i , tmp ] ) ;
45758: LD_ADDR_VAR 0 6
45762: PUSH
45763: LD_VAR 0 6
45767: PPUSH
45768: LD_VAR 0 8
45772: PPUSH
45773: LD_VAR 0 7
45777: PUSH
45778: LD_VAR 0 9
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PPUSH
45787: CALL_OW 2
45791: ST_TO_ADDR
// break ;
45792: GO 45796
// end ; end ;
45794: GO 45733
45796: POP
45797: POP
// end ; end ;
45798: GO 45597
45800: POP
45801: POP
// if result and not asc then
45802: LD_VAR 0 6
45806: PUSH
45807: LD_VAR 0 4
45811: NOT
45812: AND
45813: IFFALSE 45888
// begin tmp := result ;
45815: LD_ADDR_VAR 0 9
45819: PUSH
45820: LD_VAR 0 6
45824: ST_TO_ADDR
// for i = tmp downto 1 do
45825: LD_ADDR_VAR 0 7
45829: PUSH
45830: DOUBLE
45831: LD_VAR 0 9
45835: INC
45836: ST_TO_ADDR
45837: LD_INT 1
45839: PUSH
45840: FOR_DOWNTO
45841: IFFALSE 45886
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
45843: LD_ADDR_VAR 0 6
45847: PUSH
45848: LD_VAR 0 6
45852: PPUSH
45853: LD_VAR 0 9
45857: PUSH
45858: LD_VAR 0 7
45862: MINUS
45863: PUSH
45864: LD_INT 1
45866: PLUS
45867: PPUSH
45868: LD_VAR 0 9
45872: PUSH
45873: LD_VAR 0 7
45877: ARRAY
45878: PPUSH
45879: CALL_OW 1
45883: ST_TO_ADDR
45884: GO 45840
45886: POP
45887: POP
// end ; tmp := [ ] ;
45888: LD_ADDR_VAR 0 9
45892: PUSH
45893: EMPTY
45894: ST_TO_ADDR
// if mode then
45895: LD_VAR 0 5
45899: IFFALSE 45968
// begin for i = 1 to result do
45901: LD_ADDR_VAR 0 7
45905: PUSH
45906: DOUBLE
45907: LD_INT 1
45909: DEC
45910: ST_TO_ADDR
45911: LD_VAR 0 6
45915: PUSH
45916: FOR_TO
45917: IFFALSE 45956
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45919: LD_ADDR_VAR 0 9
45923: PUSH
45924: LD_VAR 0 9
45928: PPUSH
45929: LD_VAR 0 7
45933: PPUSH
45934: LD_VAR 0 6
45938: PUSH
45939: LD_VAR 0 7
45943: ARRAY
45944: PUSH
45945: LD_INT 1
45947: ARRAY
45948: PPUSH
45949: CALL_OW 1
45953: ST_TO_ADDR
45954: GO 45916
45956: POP
45957: POP
// result := tmp ;
45958: LD_ADDR_VAR 0 6
45962: PUSH
45963: LD_VAR 0 9
45967: ST_TO_ADDR
// end ; end ;
45968: LD_VAR 0 6
45972: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45973: LD_INT 0
45975: PPUSH
45976: PPUSH
45977: PPUSH
45978: PPUSH
45979: PPUSH
45980: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45981: LD_ADDR_VAR 0 5
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 0
45994: PUSH
45995: EMPTY
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: LIST
46001: LIST
46002: ST_TO_ADDR
// if not x or not y then
46003: LD_VAR 0 2
46007: NOT
46008: PUSH
46009: LD_VAR 0 3
46013: NOT
46014: OR
46015: IFFALSE 46019
// exit ;
46017: GO 47669
// if not range then
46019: LD_VAR 0 4
46023: NOT
46024: IFFALSE 46034
// range := 10 ;
46026: LD_ADDR_VAR 0 4
46030: PUSH
46031: LD_INT 10
46033: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
46034: LD_ADDR_VAR 0 8
46038: PUSH
46039: LD_INT 81
46041: PUSH
46042: LD_VAR 0 1
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 92
46053: PUSH
46054: LD_VAR 0 2
46058: PUSH
46059: LD_VAR 0 3
46063: PUSH
46064: LD_VAR 0 4
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 3
46077: PUSH
46078: LD_INT 21
46080: PUSH
46081: LD_INT 3
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: LIST
46096: PPUSH
46097: CALL_OW 69
46101: ST_TO_ADDR
// if not tmp then
46102: LD_VAR 0 8
46106: NOT
46107: IFFALSE 46111
// exit ;
46109: GO 47669
// for i in tmp do
46111: LD_ADDR_VAR 0 6
46115: PUSH
46116: LD_VAR 0 8
46120: PUSH
46121: FOR_IN
46122: IFFALSE 47644
// begin points := [ 0 , 0 , 0 ] ;
46124: LD_ADDR_VAR 0 9
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 0
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: ST_TO_ADDR
// bpoints := 1 ;
46143: LD_ADDR_VAR 0 10
46147: PUSH
46148: LD_INT 1
46150: ST_TO_ADDR
// case GetType ( i ) of unit_human :
46151: LD_VAR 0 6
46155: PPUSH
46156: CALL_OW 247
46160: PUSH
46161: LD_INT 1
46163: DOUBLE
46164: EQUAL
46165: IFTRUE 46169
46167: GO 46747
46169: POP
// begin if GetClass ( i ) = 1 then
46170: LD_VAR 0 6
46174: PPUSH
46175: CALL_OW 257
46179: PUSH
46180: LD_INT 1
46182: EQUAL
46183: IFFALSE 46204
// points := [ 10 , 5 , 3 ] ;
46185: LD_ADDR_VAR 0 9
46189: PUSH
46190: LD_INT 10
46192: PUSH
46193: LD_INT 5
46195: PUSH
46196: LD_INT 3
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: LIST
46203: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
46204: LD_VAR 0 6
46208: PPUSH
46209: CALL_OW 257
46213: PUSH
46214: LD_INT 2
46216: PUSH
46217: LD_INT 3
46219: PUSH
46220: LD_INT 4
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: LIST
46227: IN
46228: IFFALSE 46249
// points := [ 3 , 2 , 1 ] ;
46230: LD_ADDR_VAR 0 9
46234: PUSH
46235: LD_INT 3
46237: PUSH
46238: LD_INT 2
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: LIST
46248: ST_TO_ADDR
// if GetClass ( i ) = 5 then
46249: LD_VAR 0 6
46253: PPUSH
46254: CALL_OW 257
46258: PUSH
46259: LD_INT 5
46261: EQUAL
46262: IFFALSE 46283
// points := [ 130 , 5 , 2 ] ;
46264: LD_ADDR_VAR 0 9
46268: PUSH
46269: LD_INT 130
46271: PUSH
46272: LD_INT 5
46274: PUSH
46275: LD_INT 2
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: LIST
46282: ST_TO_ADDR
// if GetClass ( i ) = 8 then
46283: LD_VAR 0 6
46287: PPUSH
46288: CALL_OW 257
46292: PUSH
46293: LD_INT 8
46295: EQUAL
46296: IFFALSE 46317
// points := [ 35 , 35 , 30 ] ;
46298: LD_ADDR_VAR 0 9
46302: PUSH
46303: LD_INT 35
46305: PUSH
46306: LD_INT 35
46308: PUSH
46309: LD_INT 30
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: ST_TO_ADDR
// if GetClass ( i ) = 9 then
46317: LD_VAR 0 6
46321: PPUSH
46322: CALL_OW 257
46326: PUSH
46327: LD_INT 9
46329: EQUAL
46330: IFFALSE 46351
// points := [ 20 , 55 , 40 ] ;
46332: LD_ADDR_VAR 0 9
46336: PUSH
46337: LD_INT 20
46339: PUSH
46340: LD_INT 55
46342: PUSH
46343: LD_INT 40
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: LIST
46350: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
46351: LD_VAR 0 6
46355: PPUSH
46356: CALL_OW 257
46360: PUSH
46361: LD_INT 12
46363: PUSH
46364: LD_INT 16
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: IN
46371: IFFALSE 46392
// points := [ 5 , 3 , 2 ] ;
46373: LD_ADDR_VAR 0 9
46377: PUSH
46378: LD_INT 5
46380: PUSH
46381: LD_INT 3
46383: PUSH
46384: LD_INT 2
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: LIST
46391: ST_TO_ADDR
// if GetClass ( i ) = 17 then
46392: LD_VAR 0 6
46396: PPUSH
46397: CALL_OW 257
46401: PUSH
46402: LD_INT 17
46404: EQUAL
46405: IFFALSE 46426
// points := [ 100 , 50 , 75 ] ;
46407: LD_ADDR_VAR 0 9
46411: PUSH
46412: LD_INT 100
46414: PUSH
46415: LD_INT 50
46417: PUSH
46418: LD_INT 75
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: LIST
46425: ST_TO_ADDR
// if GetClass ( i ) = 15 then
46426: LD_VAR 0 6
46430: PPUSH
46431: CALL_OW 257
46435: PUSH
46436: LD_INT 15
46438: EQUAL
46439: IFFALSE 46460
// points := [ 10 , 5 , 3 ] ;
46441: LD_ADDR_VAR 0 9
46445: PUSH
46446: LD_INT 10
46448: PUSH
46449: LD_INT 5
46451: PUSH
46452: LD_INT 3
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: LIST
46459: ST_TO_ADDR
// if GetClass ( i ) = 14 then
46460: LD_VAR 0 6
46464: PPUSH
46465: CALL_OW 257
46469: PUSH
46470: LD_INT 14
46472: EQUAL
46473: IFFALSE 46494
// points := [ 10 , 0 , 0 ] ;
46475: LD_ADDR_VAR 0 9
46479: PUSH
46480: LD_INT 10
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: LIST
46493: ST_TO_ADDR
// if GetClass ( i ) = 11 then
46494: LD_VAR 0 6
46498: PPUSH
46499: CALL_OW 257
46503: PUSH
46504: LD_INT 11
46506: EQUAL
46507: IFFALSE 46528
// points := [ 30 , 10 , 5 ] ;
46509: LD_ADDR_VAR 0 9
46513: PUSH
46514: LD_INT 30
46516: PUSH
46517: LD_INT 10
46519: PUSH
46520: LD_INT 5
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: LIST
46527: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
46528: LD_VAR 0 1
46532: PPUSH
46533: LD_INT 5
46535: PPUSH
46536: CALL_OW 321
46540: PUSH
46541: LD_INT 2
46543: EQUAL
46544: IFFALSE 46561
// bpoints := bpoints * 1.8 ;
46546: LD_ADDR_VAR 0 10
46550: PUSH
46551: LD_VAR 0 10
46555: PUSH
46556: LD_REAL  1.80000000000000E+0000
46559: MUL
46560: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
46561: LD_VAR 0 6
46565: PPUSH
46566: CALL_OW 257
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 2
46576: PUSH
46577: LD_INT 3
46579: PUSH
46580: LD_INT 4
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: LIST
46587: LIST
46588: IN
46589: PUSH
46590: LD_VAR 0 1
46594: PPUSH
46595: LD_INT 51
46597: PPUSH
46598: CALL_OW 321
46602: PUSH
46603: LD_INT 2
46605: EQUAL
46606: AND
46607: IFFALSE 46624
// bpoints := bpoints * 1.2 ;
46609: LD_ADDR_VAR 0 10
46613: PUSH
46614: LD_VAR 0 10
46618: PUSH
46619: LD_REAL  1.20000000000000E+0000
46622: MUL
46623: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
46624: LD_VAR 0 6
46628: PPUSH
46629: CALL_OW 257
46633: PUSH
46634: LD_INT 5
46636: PUSH
46637: LD_INT 7
46639: PUSH
46640: LD_INT 9
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: LIST
46647: IN
46648: PUSH
46649: LD_VAR 0 1
46653: PPUSH
46654: LD_INT 52
46656: PPUSH
46657: CALL_OW 321
46661: PUSH
46662: LD_INT 2
46664: EQUAL
46665: AND
46666: IFFALSE 46683
// bpoints := bpoints * 1.5 ;
46668: LD_ADDR_VAR 0 10
46672: PUSH
46673: LD_VAR 0 10
46677: PUSH
46678: LD_REAL  1.50000000000000E+0000
46681: MUL
46682: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
46683: LD_VAR 0 1
46687: PPUSH
46688: LD_INT 66
46690: PPUSH
46691: CALL_OW 321
46695: PUSH
46696: LD_INT 2
46698: EQUAL
46699: IFFALSE 46716
// bpoints := bpoints * 1.1 ;
46701: LD_ADDR_VAR 0 10
46705: PUSH
46706: LD_VAR 0 10
46710: PUSH
46711: LD_REAL  1.10000000000000E+0000
46714: MUL
46715: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
46716: LD_ADDR_VAR 0 10
46720: PUSH
46721: LD_VAR 0 10
46725: PUSH
46726: LD_VAR 0 6
46730: PPUSH
46731: LD_INT 1
46733: PPUSH
46734: CALL_OW 259
46738: PUSH
46739: LD_REAL  1.15000000000000E+0000
46742: MUL
46743: MUL
46744: ST_TO_ADDR
// end ; unit_vehicle :
46745: GO 47573
46747: LD_INT 2
46749: DOUBLE
46750: EQUAL
46751: IFTRUE 46755
46753: GO 47561
46755: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
46756: LD_VAR 0 6
46760: PPUSH
46761: CALL_OW 264
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: LD_INT 42
46771: PUSH
46772: LD_INT 24
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: LIST
46779: IN
46780: IFFALSE 46801
// points := [ 25 , 5 , 3 ] ;
46782: LD_ADDR_VAR 0 9
46786: PUSH
46787: LD_INT 25
46789: PUSH
46790: LD_INT 5
46792: PUSH
46793: LD_INT 3
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: LIST
46800: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
46801: LD_VAR 0 6
46805: PPUSH
46806: CALL_OW 264
46810: PUSH
46811: LD_INT 4
46813: PUSH
46814: LD_INT 43
46816: PUSH
46817: LD_INT 25
46819: PUSH
46820: EMPTY
46821: LIST
46822: LIST
46823: LIST
46824: IN
46825: IFFALSE 46846
// points := [ 40 , 15 , 5 ] ;
46827: LD_ADDR_VAR 0 9
46831: PUSH
46832: LD_INT 40
46834: PUSH
46835: LD_INT 15
46837: PUSH
46838: LD_INT 5
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: LIST
46845: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
46846: LD_VAR 0 6
46850: PPUSH
46851: CALL_OW 264
46855: PUSH
46856: LD_INT 3
46858: PUSH
46859: LD_INT 23
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: IN
46866: IFFALSE 46887
// points := [ 7 , 25 , 8 ] ;
46868: LD_ADDR_VAR 0 9
46872: PUSH
46873: LD_INT 7
46875: PUSH
46876: LD_INT 25
46878: PUSH
46879: LD_INT 8
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: LIST
46886: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46887: LD_VAR 0 6
46891: PPUSH
46892: CALL_OW 264
46896: PUSH
46897: LD_INT 5
46899: PUSH
46900: LD_INT 27
46902: PUSH
46903: LD_INT 44
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: LIST
46910: IN
46911: IFFALSE 46932
// points := [ 14 , 50 , 16 ] ;
46913: LD_ADDR_VAR 0 9
46917: PUSH
46918: LD_INT 14
46920: PUSH
46921: LD_INT 50
46923: PUSH
46924: LD_INT 16
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: LIST
46931: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46932: LD_VAR 0 6
46936: PPUSH
46937: CALL_OW 264
46941: PUSH
46942: LD_INT 6
46944: PUSH
46945: LD_INT 46
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: IN
46952: IFFALSE 46973
// points := [ 32 , 120 , 70 ] ;
46954: LD_ADDR_VAR 0 9
46958: PUSH
46959: LD_INT 32
46961: PUSH
46962: LD_INT 120
46964: PUSH
46965: LD_INT 70
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: LIST
46972: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46973: LD_VAR 0 6
46977: PPUSH
46978: CALL_OW 264
46982: PUSH
46983: LD_INT 7
46985: PUSH
46986: LD_INT 28
46988: PUSH
46989: LD_INT 45
46991: PUSH
46992: LD_INT 92
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: IN
47001: IFFALSE 47022
// points := [ 35 , 20 , 45 ] ;
47003: LD_ADDR_VAR 0 9
47007: PUSH
47008: LD_INT 35
47010: PUSH
47011: LD_INT 20
47013: PUSH
47014: LD_INT 45
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
47022: LD_VAR 0 6
47026: PPUSH
47027: CALL_OW 264
47031: PUSH
47032: LD_INT 47
47034: PUSH
47035: EMPTY
47036: LIST
47037: IN
47038: IFFALSE 47059
// points := [ 67 , 45 , 75 ] ;
47040: LD_ADDR_VAR 0 9
47044: PUSH
47045: LD_INT 67
47047: PUSH
47048: LD_INT 45
47050: PUSH
47051: LD_INT 75
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: LIST
47058: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
47059: LD_VAR 0 6
47063: PPUSH
47064: CALL_OW 264
47068: PUSH
47069: LD_INT 26
47071: PUSH
47072: EMPTY
47073: LIST
47074: IN
47075: IFFALSE 47096
// points := [ 120 , 30 , 80 ] ;
47077: LD_ADDR_VAR 0 9
47081: PUSH
47082: LD_INT 120
47084: PUSH
47085: LD_INT 30
47087: PUSH
47088: LD_INT 80
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: LIST
47095: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
47096: LD_VAR 0 6
47100: PPUSH
47101: CALL_OW 264
47105: PUSH
47106: LD_INT 22
47108: PUSH
47109: EMPTY
47110: LIST
47111: IN
47112: IFFALSE 47133
// points := [ 40 , 1 , 1 ] ;
47114: LD_ADDR_VAR 0 9
47118: PUSH
47119: LD_INT 40
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: LIST
47132: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
47133: LD_VAR 0 6
47137: PPUSH
47138: CALL_OW 264
47142: PUSH
47143: LD_INT 29
47145: PUSH
47146: EMPTY
47147: LIST
47148: IN
47149: IFFALSE 47170
// points := [ 70 , 200 , 400 ] ;
47151: LD_ADDR_VAR 0 9
47155: PUSH
47156: LD_INT 70
47158: PUSH
47159: LD_INT 200
47161: PUSH
47162: LD_INT 400
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: LIST
47169: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
47170: LD_VAR 0 6
47174: PPUSH
47175: CALL_OW 264
47179: PUSH
47180: LD_INT 14
47182: PUSH
47183: LD_INT 53
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: IN
47190: IFFALSE 47211
// points := [ 40 , 10 , 20 ] ;
47192: LD_ADDR_VAR 0 9
47196: PUSH
47197: LD_INT 40
47199: PUSH
47200: LD_INT 10
47202: PUSH
47203: LD_INT 20
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: LIST
47210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
47211: LD_VAR 0 6
47215: PPUSH
47216: CALL_OW 264
47220: PUSH
47221: LD_INT 9
47223: PUSH
47224: EMPTY
47225: LIST
47226: IN
47227: IFFALSE 47248
// points := [ 5 , 70 , 20 ] ;
47229: LD_ADDR_VAR 0 9
47233: PUSH
47234: LD_INT 5
47236: PUSH
47237: LD_INT 70
47239: PUSH
47240: LD_INT 20
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: LIST
47247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
47248: LD_VAR 0 6
47252: PPUSH
47253: CALL_OW 264
47257: PUSH
47258: LD_INT 10
47260: PUSH
47261: EMPTY
47262: LIST
47263: IN
47264: IFFALSE 47285
// points := [ 35 , 110 , 70 ] ;
47266: LD_ADDR_VAR 0 9
47270: PUSH
47271: LD_INT 35
47273: PUSH
47274: LD_INT 110
47276: PUSH
47277: LD_INT 70
47279: PUSH
47280: EMPTY
47281: LIST
47282: LIST
47283: LIST
47284: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
47285: LD_VAR 0 6
47289: PPUSH
47290: CALL_OW 265
47294: PUSH
47295: LD_INT 25
47297: EQUAL
47298: IFFALSE 47319
// points := [ 80 , 65 , 100 ] ;
47300: LD_ADDR_VAR 0 9
47304: PUSH
47305: LD_INT 80
47307: PUSH
47308: LD_INT 65
47310: PUSH
47311: LD_INT 100
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: LIST
47318: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
47319: LD_VAR 0 6
47323: PPUSH
47324: CALL_OW 263
47328: PUSH
47329: LD_INT 1
47331: EQUAL
47332: IFFALSE 47367
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
47334: LD_ADDR_VAR 0 10
47338: PUSH
47339: LD_VAR 0 10
47343: PUSH
47344: LD_VAR 0 6
47348: PPUSH
47349: CALL_OW 311
47353: PPUSH
47354: LD_INT 3
47356: PPUSH
47357: CALL_OW 259
47361: PUSH
47362: LD_INT 4
47364: MUL
47365: MUL
47366: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
47367: LD_VAR 0 6
47371: PPUSH
47372: CALL_OW 263
47376: PUSH
47377: LD_INT 2
47379: EQUAL
47380: IFFALSE 47431
// begin j := IsControledBy ( i ) ;
47382: LD_ADDR_VAR 0 7
47386: PUSH
47387: LD_VAR 0 6
47391: PPUSH
47392: CALL_OW 312
47396: ST_TO_ADDR
// if j then
47397: LD_VAR 0 7
47401: IFFALSE 47431
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
47403: LD_ADDR_VAR 0 10
47407: PUSH
47408: LD_VAR 0 10
47412: PUSH
47413: LD_VAR 0 7
47417: PPUSH
47418: LD_INT 3
47420: PPUSH
47421: CALL_OW 259
47425: PUSH
47426: LD_INT 3
47428: MUL
47429: MUL
47430: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
47431: LD_VAR 0 6
47435: PPUSH
47436: CALL_OW 264
47440: PUSH
47441: LD_INT 5
47443: PUSH
47444: LD_INT 6
47446: PUSH
47447: LD_INT 46
47449: PUSH
47450: LD_INT 44
47452: PUSH
47453: LD_INT 47
47455: PUSH
47456: LD_INT 45
47458: PUSH
47459: LD_INT 28
47461: PUSH
47462: LD_INT 7
47464: PUSH
47465: LD_INT 27
47467: PUSH
47468: LD_INT 29
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: IN
47483: PUSH
47484: LD_VAR 0 1
47488: PPUSH
47489: LD_INT 52
47491: PPUSH
47492: CALL_OW 321
47496: PUSH
47497: LD_INT 2
47499: EQUAL
47500: AND
47501: IFFALSE 47518
// bpoints := bpoints * 1.2 ;
47503: LD_ADDR_VAR 0 10
47507: PUSH
47508: LD_VAR 0 10
47512: PUSH
47513: LD_REAL  1.20000000000000E+0000
47516: MUL
47517: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
47518: LD_VAR 0 6
47522: PPUSH
47523: CALL_OW 264
47527: PUSH
47528: LD_INT 6
47530: PUSH
47531: LD_INT 46
47533: PUSH
47534: LD_INT 47
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: LIST
47541: IN
47542: IFFALSE 47559
// bpoints := bpoints * 1.2 ;
47544: LD_ADDR_VAR 0 10
47548: PUSH
47549: LD_VAR 0 10
47553: PUSH
47554: LD_REAL  1.20000000000000E+0000
47557: MUL
47558: ST_TO_ADDR
// end ; unit_building :
47559: GO 47573
47561: LD_INT 3
47563: DOUBLE
47564: EQUAL
47565: IFTRUE 47569
47567: GO 47572
47569: POP
// ; end ;
47570: GO 47573
47572: POP
// for j = 1 to 3 do
47573: LD_ADDR_VAR 0 7
47577: PUSH
47578: DOUBLE
47579: LD_INT 1
47581: DEC
47582: ST_TO_ADDR
47583: LD_INT 3
47585: PUSH
47586: FOR_TO
47587: IFFALSE 47640
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
47589: LD_ADDR_VAR 0 5
47593: PUSH
47594: LD_VAR 0 5
47598: PPUSH
47599: LD_VAR 0 7
47603: PPUSH
47604: LD_VAR 0 5
47608: PUSH
47609: LD_VAR 0 7
47613: ARRAY
47614: PUSH
47615: LD_VAR 0 9
47619: PUSH
47620: LD_VAR 0 7
47624: ARRAY
47625: PUSH
47626: LD_VAR 0 10
47630: MUL
47631: PLUS
47632: PPUSH
47633: CALL_OW 1
47637: ST_TO_ADDR
47638: GO 47586
47640: POP
47641: POP
// end ;
47642: GO 46121
47644: POP
47645: POP
// result := Replace ( result , 4 , tmp ) ;
47646: LD_ADDR_VAR 0 5
47650: PUSH
47651: LD_VAR 0 5
47655: PPUSH
47656: LD_INT 4
47658: PPUSH
47659: LD_VAR 0 8
47663: PPUSH
47664: CALL_OW 1
47668: ST_TO_ADDR
// end ;
47669: LD_VAR 0 5
47673: RET
// export function DangerAtRange ( unit , range ) ; begin
47674: LD_INT 0
47676: PPUSH
// if not unit then
47677: LD_VAR 0 1
47681: NOT
47682: IFFALSE 47686
// exit ;
47684: GO 47731
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
47686: LD_ADDR_VAR 0 3
47690: PUSH
47691: LD_VAR 0 1
47695: PPUSH
47696: CALL_OW 255
47700: PPUSH
47701: LD_VAR 0 1
47705: PPUSH
47706: CALL_OW 250
47710: PPUSH
47711: LD_VAR 0 1
47715: PPUSH
47716: CALL_OW 251
47720: PPUSH
47721: LD_VAR 0 2
47725: PPUSH
47726: CALL 45973 0 4
47730: ST_TO_ADDR
// end ;
47731: LD_VAR 0 3
47735: RET
// export function DangerInArea ( side , area ) ; begin
47736: LD_INT 0
47738: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
47739: LD_ADDR_VAR 0 3
47743: PUSH
47744: LD_VAR 0 2
47748: PPUSH
47749: LD_INT 81
47751: PUSH
47752: LD_VAR 0 1
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PPUSH
47761: CALL_OW 70
47765: ST_TO_ADDR
// end ;
47766: LD_VAR 0 3
47770: RET
// export function IsExtension ( b ) ; begin
47771: LD_INT 0
47773: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
47774: LD_ADDR_VAR 0 2
47778: PUSH
47779: LD_VAR 0 1
47783: PUSH
47784: LD_INT 23
47786: PUSH
47787: LD_INT 20
47789: PUSH
47790: LD_INT 22
47792: PUSH
47793: LD_INT 17
47795: PUSH
47796: LD_INT 24
47798: PUSH
47799: LD_INT 21
47801: PUSH
47802: LD_INT 19
47804: PUSH
47805: LD_INT 16
47807: PUSH
47808: LD_INT 25
47810: PUSH
47811: LD_INT 18
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: IN
47826: ST_TO_ADDR
// end ;
47827: LD_VAR 0 2
47831: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
47832: LD_INT 0
47834: PPUSH
47835: PPUSH
47836: PPUSH
// result := [ ] ;
47837: LD_ADDR_VAR 0 4
47841: PUSH
47842: EMPTY
47843: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
47844: LD_ADDR_VAR 0 5
47848: PUSH
47849: LD_VAR 0 2
47853: PPUSH
47854: LD_INT 21
47856: PUSH
47857: LD_INT 3
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PPUSH
47864: CALL_OW 70
47868: ST_TO_ADDR
// if not tmp then
47869: LD_VAR 0 5
47873: NOT
47874: IFFALSE 47878
// exit ;
47876: GO 47942
// if checkLink then
47878: LD_VAR 0 3
47882: IFFALSE 47932
// begin for i in tmp do
47884: LD_ADDR_VAR 0 6
47888: PUSH
47889: LD_VAR 0 5
47893: PUSH
47894: FOR_IN
47895: IFFALSE 47930
// if GetBase ( i ) <> base then
47897: LD_VAR 0 6
47901: PPUSH
47902: CALL_OW 274
47906: PUSH
47907: LD_VAR 0 1
47911: NONEQUAL
47912: IFFALSE 47928
// ComLinkToBase ( base , i ) ;
47914: LD_VAR 0 1
47918: PPUSH
47919: LD_VAR 0 6
47923: PPUSH
47924: CALL_OW 169
47928: GO 47894
47930: POP
47931: POP
// end ; result := tmp ;
47932: LD_ADDR_VAR 0 4
47936: PUSH
47937: LD_VAR 0 5
47941: ST_TO_ADDR
// end ;
47942: LD_VAR 0 4
47946: RET
// export function ComComplete ( units , b ) ; var i ; begin
47947: LD_INT 0
47949: PPUSH
47950: PPUSH
// if not units then
47951: LD_VAR 0 1
47955: NOT
47956: IFFALSE 47960
// exit ;
47958: GO 48050
// for i in units do
47960: LD_ADDR_VAR 0 4
47964: PUSH
47965: LD_VAR 0 1
47969: PUSH
47970: FOR_IN
47971: IFFALSE 48048
// if BuildingStatus ( b ) = bs_build then
47973: LD_VAR 0 2
47977: PPUSH
47978: CALL_OW 461
47982: PUSH
47983: LD_INT 1
47985: EQUAL
47986: IFFALSE 48046
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47988: LD_VAR 0 4
47992: PPUSH
47993: LD_STRING h
47995: PUSH
47996: LD_VAR 0 2
48000: PPUSH
48001: CALL_OW 250
48005: PUSH
48006: LD_VAR 0 2
48010: PPUSH
48011: CALL_OW 251
48015: PUSH
48016: LD_VAR 0 2
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: PUSH
48039: EMPTY
48040: LIST
48041: PPUSH
48042: CALL_OW 446
48046: GO 47970
48048: POP
48049: POP
// end ;
48050: LD_VAR 0 3
48054: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
48055: LD_INT 0
48057: PPUSH
48058: PPUSH
48059: PPUSH
48060: PPUSH
48061: PPUSH
48062: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
48063: LD_VAR 0 1
48067: NOT
48068: PUSH
48069: LD_VAR 0 1
48073: PPUSH
48074: CALL_OW 263
48078: PUSH
48079: LD_INT 2
48081: NONEQUAL
48082: OR
48083: IFFALSE 48087
// exit ;
48085: GO 48403
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
48087: LD_ADDR_VAR 0 6
48091: PUSH
48092: LD_INT 22
48094: PUSH
48095: LD_VAR 0 1
48099: PPUSH
48100: CALL_OW 255
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 30
48114: PUSH
48115: LD_INT 36
48117: PUSH
48118: EMPTY
48119: LIST
48120: LIST
48121: PUSH
48122: LD_INT 34
48124: PUSH
48125: LD_INT 31
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: LIST
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PPUSH
48141: CALL_OW 69
48145: ST_TO_ADDR
// if not tmp then
48146: LD_VAR 0 6
48150: NOT
48151: IFFALSE 48155
// exit ;
48153: GO 48403
// result := [ ] ;
48155: LD_ADDR_VAR 0 2
48159: PUSH
48160: EMPTY
48161: ST_TO_ADDR
// for i in tmp do
48162: LD_ADDR_VAR 0 3
48166: PUSH
48167: LD_VAR 0 6
48171: PUSH
48172: FOR_IN
48173: IFFALSE 48244
// begin t := UnitsInside ( i ) ;
48175: LD_ADDR_VAR 0 4
48179: PUSH
48180: LD_VAR 0 3
48184: PPUSH
48185: CALL_OW 313
48189: ST_TO_ADDR
// if t then
48190: LD_VAR 0 4
48194: IFFALSE 48242
// for j in t do
48196: LD_ADDR_VAR 0 7
48200: PUSH
48201: LD_VAR 0 4
48205: PUSH
48206: FOR_IN
48207: IFFALSE 48240
// result := Replace ( result , result + 1 , j ) ;
48209: LD_ADDR_VAR 0 2
48213: PUSH
48214: LD_VAR 0 2
48218: PPUSH
48219: LD_VAR 0 2
48223: PUSH
48224: LD_INT 1
48226: PLUS
48227: PPUSH
48228: LD_VAR 0 7
48232: PPUSH
48233: CALL_OW 1
48237: ST_TO_ADDR
48238: GO 48206
48240: POP
48241: POP
// end ;
48242: GO 48172
48244: POP
48245: POP
// if not result then
48246: LD_VAR 0 2
48250: NOT
48251: IFFALSE 48255
// exit ;
48253: GO 48403
// mech := result [ 1 ] ;
48255: LD_ADDR_VAR 0 5
48259: PUSH
48260: LD_VAR 0 2
48264: PUSH
48265: LD_INT 1
48267: ARRAY
48268: ST_TO_ADDR
// if result > 1 then
48269: LD_VAR 0 2
48273: PUSH
48274: LD_INT 1
48276: GREATER
48277: IFFALSE 48389
// begin for i = 2 to result do
48279: LD_ADDR_VAR 0 3
48283: PUSH
48284: DOUBLE
48285: LD_INT 2
48287: DEC
48288: ST_TO_ADDR
48289: LD_VAR 0 2
48293: PUSH
48294: FOR_TO
48295: IFFALSE 48387
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
48297: LD_ADDR_VAR 0 4
48301: PUSH
48302: LD_VAR 0 2
48306: PUSH
48307: LD_VAR 0 3
48311: ARRAY
48312: PPUSH
48313: LD_INT 3
48315: PPUSH
48316: CALL_OW 259
48320: PUSH
48321: LD_VAR 0 2
48325: PUSH
48326: LD_VAR 0 3
48330: ARRAY
48331: PPUSH
48332: CALL_OW 432
48336: MINUS
48337: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
48338: LD_VAR 0 4
48342: PUSH
48343: LD_VAR 0 5
48347: PPUSH
48348: LD_INT 3
48350: PPUSH
48351: CALL_OW 259
48355: PUSH
48356: LD_VAR 0 5
48360: PPUSH
48361: CALL_OW 432
48365: MINUS
48366: GREATEREQUAL
48367: IFFALSE 48385
// mech := result [ i ] ;
48369: LD_ADDR_VAR 0 5
48373: PUSH
48374: LD_VAR 0 2
48378: PUSH
48379: LD_VAR 0 3
48383: ARRAY
48384: ST_TO_ADDR
// end ;
48385: GO 48294
48387: POP
48388: POP
// end ; ComLinkTo ( vehicle , mech ) ;
48389: LD_VAR 0 1
48393: PPUSH
48394: LD_VAR 0 5
48398: PPUSH
48399: CALL_OW 135
// end ;
48403: LD_VAR 0 2
48407: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
48408: LD_INT 0
48410: PPUSH
48411: PPUSH
48412: PPUSH
48413: PPUSH
48414: PPUSH
48415: PPUSH
48416: PPUSH
48417: PPUSH
48418: PPUSH
48419: PPUSH
48420: PPUSH
48421: PPUSH
48422: PPUSH
// result := [ ] ;
48423: LD_ADDR_VAR 0 7
48427: PUSH
48428: EMPTY
48429: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
48430: LD_VAR 0 1
48434: PPUSH
48435: CALL_OW 266
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: IN
48450: NOT
48451: IFFALSE 48455
// exit ;
48453: GO 50089
// if name then
48455: LD_VAR 0 3
48459: IFFALSE 48475
// SetBName ( base_dep , name ) ;
48461: LD_VAR 0 1
48465: PPUSH
48466: LD_VAR 0 3
48470: PPUSH
48471: CALL_OW 500
// base := GetBase ( base_dep ) ;
48475: LD_ADDR_VAR 0 15
48479: PUSH
48480: LD_VAR 0 1
48484: PPUSH
48485: CALL_OW 274
48489: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
48490: LD_ADDR_VAR 0 16
48494: PUSH
48495: LD_VAR 0 1
48499: PPUSH
48500: CALL_OW 255
48504: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
48505: LD_ADDR_VAR 0 17
48509: PUSH
48510: LD_VAR 0 1
48514: PPUSH
48515: CALL_OW 248
48519: ST_TO_ADDR
// if sources then
48520: LD_VAR 0 5
48524: IFFALSE 48571
// for i = 1 to 3 do
48526: LD_ADDR_VAR 0 8
48530: PUSH
48531: DOUBLE
48532: LD_INT 1
48534: DEC
48535: ST_TO_ADDR
48536: LD_INT 3
48538: PUSH
48539: FOR_TO
48540: IFFALSE 48569
// AddResourceType ( base , i , sources [ i ] ) ;
48542: LD_VAR 0 15
48546: PPUSH
48547: LD_VAR 0 8
48551: PPUSH
48552: LD_VAR 0 5
48556: PUSH
48557: LD_VAR 0 8
48561: ARRAY
48562: PPUSH
48563: CALL_OW 276
48567: GO 48539
48569: POP
48570: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
48571: LD_ADDR_VAR 0 18
48575: PUSH
48576: LD_VAR 0 15
48580: PPUSH
48581: LD_VAR 0 2
48585: PPUSH
48586: LD_INT 1
48588: PPUSH
48589: CALL 47832 0 3
48593: ST_TO_ADDR
// InitHc ;
48594: CALL_OW 19
// InitUc ;
48598: CALL_OW 18
// uc_side := side ;
48602: LD_ADDR_OWVAR 20
48606: PUSH
48607: LD_VAR 0 16
48611: ST_TO_ADDR
// uc_nation := nation ;
48612: LD_ADDR_OWVAR 21
48616: PUSH
48617: LD_VAR 0 17
48621: ST_TO_ADDR
// if buildings then
48622: LD_VAR 0 18
48626: IFFALSE 49948
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
48628: LD_ADDR_VAR 0 19
48632: PUSH
48633: LD_VAR 0 18
48637: PPUSH
48638: LD_INT 2
48640: PUSH
48641: LD_INT 30
48643: PUSH
48644: LD_INT 29
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 30
48653: PUSH
48654: LD_INT 30
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: LIST
48665: PPUSH
48666: CALL_OW 72
48670: ST_TO_ADDR
// if tmp then
48671: LD_VAR 0 19
48675: IFFALSE 48723
// for i in tmp do
48677: LD_ADDR_VAR 0 8
48681: PUSH
48682: LD_VAR 0 19
48686: PUSH
48687: FOR_IN
48688: IFFALSE 48721
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
48690: LD_VAR 0 8
48694: PPUSH
48695: CALL_OW 250
48699: PPUSH
48700: LD_VAR 0 8
48704: PPUSH
48705: CALL_OW 251
48709: PPUSH
48710: LD_VAR 0 16
48714: PPUSH
48715: CALL_OW 441
48719: GO 48687
48721: POP
48722: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
48723: LD_VAR 0 18
48727: PPUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 30
48733: PUSH
48734: LD_INT 32
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 30
48743: PUSH
48744: LD_INT 33
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: LIST
48755: PPUSH
48756: CALL_OW 72
48760: IFFALSE 48848
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
48762: LD_ADDR_VAR 0 8
48766: PUSH
48767: LD_VAR 0 18
48771: PPUSH
48772: LD_INT 2
48774: PUSH
48775: LD_INT 30
48777: PUSH
48778: LD_INT 32
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 30
48787: PUSH
48788: LD_INT 33
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: LIST
48799: PPUSH
48800: CALL_OW 72
48804: PUSH
48805: FOR_IN
48806: IFFALSE 48846
// begin if not GetBWeapon ( i ) then
48808: LD_VAR 0 8
48812: PPUSH
48813: CALL_OW 269
48817: NOT
48818: IFFALSE 48844
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
48820: LD_VAR 0 8
48824: PPUSH
48825: LD_VAR 0 8
48829: PPUSH
48830: LD_VAR 0 2
48834: PPUSH
48835: CALL 50094 0 2
48839: PPUSH
48840: CALL_OW 431
// end ;
48844: GO 48805
48846: POP
48847: POP
// end ; for i = 1 to personel do
48848: LD_ADDR_VAR 0 8
48852: PUSH
48853: DOUBLE
48854: LD_INT 1
48856: DEC
48857: ST_TO_ADDR
48858: LD_VAR 0 6
48862: PUSH
48863: FOR_TO
48864: IFFALSE 49928
// begin if i > 4 then
48866: LD_VAR 0 8
48870: PUSH
48871: LD_INT 4
48873: GREATER
48874: IFFALSE 48878
// break ;
48876: GO 49928
// case i of 1 :
48878: LD_VAR 0 8
48882: PUSH
48883: LD_INT 1
48885: DOUBLE
48886: EQUAL
48887: IFTRUE 48891
48889: GO 48971
48891: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48892: LD_ADDR_VAR 0 12
48896: PUSH
48897: LD_VAR 0 18
48901: PPUSH
48902: LD_INT 22
48904: PUSH
48905: LD_VAR 0 16
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 58
48916: PUSH
48917: EMPTY
48918: LIST
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: LD_INT 30
48925: PUSH
48926: LD_INT 32
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 30
48935: PUSH
48936: LD_INT 4
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 30
48945: PUSH
48946: LD_INT 5
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: LIST
48963: PPUSH
48964: CALL_OW 72
48968: ST_TO_ADDR
48969: GO 49193
48971: LD_INT 2
48973: DOUBLE
48974: EQUAL
48975: IFTRUE 48979
48977: GO 49041
48979: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48980: LD_ADDR_VAR 0 12
48984: PUSH
48985: LD_VAR 0 18
48989: PPUSH
48990: LD_INT 22
48992: PUSH
48993: LD_VAR 0 16
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 2
49004: PUSH
49005: LD_INT 30
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 30
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: LIST
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PPUSH
49034: CALL_OW 72
49038: ST_TO_ADDR
49039: GO 49193
49041: LD_INT 3
49043: DOUBLE
49044: EQUAL
49045: IFTRUE 49049
49047: GO 49111
49049: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
49050: LD_ADDR_VAR 0 12
49054: PUSH
49055: LD_VAR 0 18
49059: PPUSH
49060: LD_INT 22
49062: PUSH
49063: LD_VAR 0 16
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: PUSH
49075: LD_INT 30
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 30
49087: PUSH
49088: LD_INT 3
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: LIST
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PPUSH
49104: CALL_OW 72
49108: ST_TO_ADDR
49109: GO 49193
49111: LD_INT 4
49113: DOUBLE
49114: EQUAL
49115: IFTRUE 49119
49117: GO 49192
49119: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
49120: LD_ADDR_VAR 0 12
49124: PUSH
49125: LD_VAR 0 18
49129: PPUSH
49130: LD_INT 22
49132: PUSH
49133: LD_VAR 0 16
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: LD_INT 30
49147: PUSH
49148: LD_INT 6
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 30
49157: PUSH
49158: LD_INT 7
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 30
49167: PUSH
49168: LD_INT 8
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PPUSH
49185: CALL_OW 72
49189: ST_TO_ADDR
49190: GO 49193
49192: POP
// if i = 1 then
49193: LD_VAR 0 8
49197: PUSH
49198: LD_INT 1
49200: EQUAL
49201: IFFALSE 49312
// begin tmp := [ ] ;
49203: LD_ADDR_VAR 0 19
49207: PUSH
49208: EMPTY
49209: ST_TO_ADDR
// for j in f do
49210: LD_ADDR_VAR 0 9
49214: PUSH
49215: LD_VAR 0 12
49219: PUSH
49220: FOR_IN
49221: IFFALSE 49294
// if GetBType ( j ) = b_bunker then
49223: LD_VAR 0 9
49227: PPUSH
49228: CALL_OW 266
49232: PUSH
49233: LD_INT 32
49235: EQUAL
49236: IFFALSE 49263
// tmp := Insert ( tmp , 1 , j ) else
49238: LD_ADDR_VAR 0 19
49242: PUSH
49243: LD_VAR 0 19
49247: PPUSH
49248: LD_INT 1
49250: PPUSH
49251: LD_VAR 0 9
49255: PPUSH
49256: CALL_OW 2
49260: ST_TO_ADDR
49261: GO 49292
// tmp := Insert ( tmp , tmp + 1 , j ) ;
49263: LD_ADDR_VAR 0 19
49267: PUSH
49268: LD_VAR 0 19
49272: PPUSH
49273: LD_VAR 0 19
49277: PUSH
49278: LD_INT 1
49280: PLUS
49281: PPUSH
49282: LD_VAR 0 9
49286: PPUSH
49287: CALL_OW 2
49291: ST_TO_ADDR
49292: GO 49220
49294: POP
49295: POP
// if tmp then
49296: LD_VAR 0 19
49300: IFFALSE 49312
// f := tmp ;
49302: LD_ADDR_VAR 0 12
49306: PUSH
49307: LD_VAR 0 19
49311: ST_TO_ADDR
// end ; x := personel [ i ] ;
49312: LD_ADDR_VAR 0 13
49316: PUSH
49317: LD_VAR 0 6
49321: PUSH
49322: LD_VAR 0 8
49326: ARRAY
49327: ST_TO_ADDR
// if x = - 1 then
49328: LD_VAR 0 13
49332: PUSH
49333: LD_INT 1
49335: NEG
49336: EQUAL
49337: IFFALSE 49546
// begin for j in f do
49339: LD_ADDR_VAR 0 9
49343: PUSH
49344: LD_VAR 0 12
49348: PUSH
49349: FOR_IN
49350: IFFALSE 49542
// repeat InitHc ;
49352: CALL_OW 19
// if GetBType ( j ) = b_barracks then
49356: LD_VAR 0 9
49360: PPUSH
49361: CALL_OW 266
49365: PUSH
49366: LD_INT 5
49368: EQUAL
49369: IFFALSE 49439
// begin if UnitsInside ( j ) < 3 then
49371: LD_VAR 0 9
49375: PPUSH
49376: CALL_OW 313
49380: PUSH
49381: LD_INT 3
49383: LESS
49384: IFFALSE 49420
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49386: LD_INT 0
49388: PPUSH
49389: LD_INT 5
49391: PUSH
49392: LD_INT 8
49394: PUSH
49395: LD_INT 9
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: LIST
49402: PUSH
49403: LD_VAR 0 17
49407: ARRAY
49408: PPUSH
49409: LD_VAR 0 4
49413: PPUSH
49414: CALL_OW 380
49418: GO 49437
// PrepareHuman ( false , i , skill ) ;
49420: LD_INT 0
49422: PPUSH
49423: LD_VAR 0 8
49427: PPUSH
49428: LD_VAR 0 4
49432: PPUSH
49433: CALL_OW 380
// end else
49437: GO 49456
// PrepareHuman ( false , i , skill ) ;
49439: LD_INT 0
49441: PPUSH
49442: LD_VAR 0 8
49446: PPUSH
49447: LD_VAR 0 4
49451: PPUSH
49452: CALL_OW 380
// un := CreateHuman ;
49456: LD_ADDR_VAR 0 14
49460: PUSH
49461: CALL_OW 44
49465: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49466: LD_ADDR_VAR 0 7
49470: PUSH
49471: LD_VAR 0 7
49475: PPUSH
49476: LD_INT 1
49478: PPUSH
49479: LD_VAR 0 14
49483: PPUSH
49484: CALL_OW 2
49488: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
49489: LD_VAR 0 14
49493: PPUSH
49494: LD_VAR 0 9
49498: PPUSH
49499: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
49503: LD_VAR 0 9
49507: PPUSH
49508: CALL_OW 313
49512: PUSH
49513: LD_INT 6
49515: EQUAL
49516: PUSH
49517: LD_VAR 0 9
49521: PPUSH
49522: CALL_OW 266
49526: PUSH
49527: LD_INT 32
49529: PUSH
49530: LD_INT 31
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: IN
49537: OR
49538: IFFALSE 49352
49540: GO 49349
49542: POP
49543: POP
// end else
49544: GO 49926
// for j = 1 to x do
49546: LD_ADDR_VAR 0 9
49550: PUSH
49551: DOUBLE
49552: LD_INT 1
49554: DEC
49555: ST_TO_ADDR
49556: LD_VAR 0 13
49560: PUSH
49561: FOR_TO
49562: IFFALSE 49924
// begin InitHc ;
49564: CALL_OW 19
// if not f then
49568: LD_VAR 0 12
49572: NOT
49573: IFFALSE 49662
// begin PrepareHuman ( false , i , skill ) ;
49575: LD_INT 0
49577: PPUSH
49578: LD_VAR 0 8
49582: PPUSH
49583: LD_VAR 0 4
49587: PPUSH
49588: CALL_OW 380
// un := CreateHuman ;
49592: LD_ADDR_VAR 0 14
49596: PUSH
49597: CALL_OW 44
49601: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49602: LD_ADDR_VAR 0 7
49606: PUSH
49607: LD_VAR 0 7
49611: PPUSH
49612: LD_INT 1
49614: PPUSH
49615: LD_VAR 0 14
49619: PPUSH
49620: CALL_OW 2
49624: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49625: LD_VAR 0 14
49629: PPUSH
49630: LD_VAR 0 1
49634: PPUSH
49635: CALL_OW 250
49639: PPUSH
49640: LD_VAR 0 1
49644: PPUSH
49645: CALL_OW 251
49649: PPUSH
49650: LD_INT 10
49652: PPUSH
49653: LD_INT 0
49655: PPUSH
49656: CALL_OW 50
// continue ;
49660: GO 49561
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
49662: LD_VAR 0 12
49666: PUSH
49667: LD_INT 1
49669: ARRAY
49670: PPUSH
49671: CALL_OW 313
49675: PUSH
49676: LD_VAR 0 12
49680: PUSH
49681: LD_INT 1
49683: ARRAY
49684: PPUSH
49685: CALL_OW 266
49689: PUSH
49690: LD_INT 32
49692: PUSH
49693: LD_INT 31
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: IN
49700: AND
49701: PUSH
49702: LD_VAR 0 12
49706: PUSH
49707: LD_INT 1
49709: ARRAY
49710: PPUSH
49711: CALL_OW 313
49715: PUSH
49716: LD_INT 6
49718: EQUAL
49719: OR
49720: IFFALSE 49740
// f := Delete ( f , 1 ) ;
49722: LD_ADDR_VAR 0 12
49726: PUSH
49727: LD_VAR 0 12
49731: PPUSH
49732: LD_INT 1
49734: PPUSH
49735: CALL_OW 3
49739: ST_TO_ADDR
// if not f then
49740: LD_VAR 0 12
49744: NOT
49745: IFFALSE 49763
// begin x := x + 2 ;
49747: LD_ADDR_VAR 0 13
49751: PUSH
49752: LD_VAR 0 13
49756: PUSH
49757: LD_INT 2
49759: PLUS
49760: ST_TO_ADDR
// continue ;
49761: GO 49561
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
49763: LD_VAR 0 12
49767: PUSH
49768: LD_INT 1
49770: ARRAY
49771: PPUSH
49772: CALL_OW 266
49776: PUSH
49777: LD_INT 5
49779: EQUAL
49780: IFFALSE 49854
// begin if UnitsInside ( f [ 1 ] ) < 3 then
49782: LD_VAR 0 12
49786: PUSH
49787: LD_INT 1
49789: ARRAY
49790: PPUSH
49791: CALL_OW 313
49795: PUSH
49796: LD_INT 3
49798: LESS
49799: IFFALSE 49835
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
49801: LD_INT 0
49803: PPUSH
49804: LD_INT 5
49806: PUSH
49807: LD_INT 8
49809: PUSH
49810: LD_INT 9
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: LIST
49817: PUSH
49818: LD_VAR 0 17
49822: ARRAY
49823: PPUSH
49824: LD_VAR 0 4
49828: PPUSH
49829: CALL_OW 380
49833: GO 49852
// PrepareHuman ( false , i , skill ) ;
49835: LD_INT 0
49837: PPUSH
49838: LD_VAR 0 8
49842: PPUSH
49843: LD_VAR 0 4
49847: PPUSH
49848: CALL_OW 380
// end else
49852: GO 49871
// PrepareHuman ( false , i , skill ) ;
49854: LD_INT 0
49856: PPUSH
49857: LD_VAR 0 8
49861: PPUSH
49862: LD_VAR 0 4
49866: PPUSH
49867: CALL_OW 380
// un := CreateHuman ;
49871: LD_ADDR_VAR 0 14
49875: PUSH
49876: CALL_OW 44
49880: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49881: LD_ADDR_VAR 0 7
49885: PUSH
49886: LD_VAR 0 7
49890: PPUSH
49891: LD_INT 1
49893: PPUSH
49894: LD_VAR 0 14
49898: PPUSH
49899: CALL_OW 2
49903: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49904: LD_VAR 0 14
49908: PPUSH
49909: LD_VAR 0 12
49913: PUSH
49914: LD_INT 1
49916: ARRAY
49917: PPUSH
49918: CALL_OW 52
// end ;
49922: GO 49561
49924: POP
49925: POP
// end ;
49926: GO 48863
49928: POP
49929: POP
// result := result ^ buildings ;
49930: LD_ADDR_VAR 0 7
49934: PUSH
49935: LD_VAR 0 7
49939: PUSH
49940: LD_VAR 0 18
49944: ADD
49945: ST_TO_ADDR
// end else
49946: GO 50089
// begin for i = 1 to personel do
49948: LD_ADDR_VAR 0 8
49952: PUSH
49953: DOUBLE
49954: LD_INT 1
49956: DEC
49957: ST_TO_ADDR
49958: LD_VAR 0 6
49962: PUSH
49963: FOR_TO
49964: IFFALSE 50087
// begin if i > 4 then
49966: LD_VAR 0 8
49970: PUSH
49971: LD_INT 4
49973: GREATER
49974: IFFALSE 49978
// break ;
49976: GO 50087
// x := personel [ i ] ;
49978: LD_ADDR_VAR 0 13
49982: PUSH
49983: LD_VAR 0 6
49987: PUSH
49988: LD_VAR 0 8
49992: ARRAY
49993: ST_TO_ADDR
// if x = - 1 then
49994: LD_VAR 0 13
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: EQUAL
50003: IFFALSE 50007
// continue ;
50005: GO 49963
// PrepareHuman ( false , i , skill ) ;
50007: LD_INT 0
50009: PPUSH
50010: LD_VAR 0 8
50014: PPUSH
50015: LD_VAR 0 4
50019: PPUSH
50020: CALL_OW 380
// un := CreateHuman ;
50024: LD_ADDR_VAR 0 14
50028: PUSH
50029: CALL_OW 44
50033: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50034: LD_VAR 0 14
50038: PPUSH
50039: LD_VAR 0 1
50043: PPUSH
50044: CALL_OW 250
50048: PPUSH
50049: LD_VAR 0 1
50053: PPUSH
50054: CALL_OW 251
50058: PPUSH
50059: LD_INT 10
50061: PPUSH
50062: LD_INT 0
50064: PPUSH
50065: CALL_OW 50
// result := result ^ un ;
50069: LD_ADDR_VAR 0 7
50073: PUSH
50074: LD_VAR 0 7
50078: PUSH
50079: LD_VAR 0 14
50083: ADD
50084: ST_TO_ADDR
// end ;
50085: GO 49963
50087: POP
50088: POP
// end ; end ;
50089: LD_VAR 0 7
50093: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
50094: LD_INT 0
50096: PPUSH
50097: PPUSH
50098: PPUSH
50099: PPUSH
50100: PPUSH
50101: PPUSH
50102: PPUSH
50103: PPUSH
50104: PPUSH
50105: PPUSH
50106: PPUSH
50107: PPUSH
50108: PPUSH
50109: PPUSH
50110: PPUSH
50111: PPUSH
// result := false ;
50112: LD_ADDR_VAR 0 3
50116: PUSH
50117: LD_INT 0
50119: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
50120: LD_VAR 0 1
50124: NOT
50125: PUSH
50126: LD_VAR 0 1
50130: PPUSH
50131: CALL_OW 266
50135: PUSH
50136: LD_INT 32
50138: PUSH
50139: LD_INT 33
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: IN
50146: NOT
50147: OR
50148: IFFALSE 50152
// exit ;
50150: GO 51261
// nat := GetNation ( tower ) ;
50152: LD_ADDR_VAR 0 12
50156: PUSH
50157: LD_VAR 0 1
50161: PPUSH
50162: CALL_OW 248
50166: ST_TO_ADDR
// side := GetSide ( tower ) ;
50167: LD_ADDR_VAR 0 16
50171: PUSH
50172: LD_VAR 0 1
50176: PPUSH
50177: CALL_OW 255
50181: ST_TO_ADDR
// x := GetX ( tower ) ;
50182: LD_ADDR_VAR 0 10
50186: PUSH
50187: LD_VAR 0 1
50191: PPUSH
50192: CALL_OW 250
50196: ST_TO_ADDR
// y := GetY ( tower ) ;
50197: LD_ADDR_VAR 0 11
50201: PUSH
50202: LD_VAR 0 1
50206: PPUSH
50207: CALL_OW 251
50211: ST_TO_ADDR
// if not x or not y then
50212: LD_VAR 0 10
50216: NOT
50217: PUSH
50218: LD_VAR 0 11
50222: NOT
50223: OR
50224: IFFALSE 50228
// exit ;
50226: GO 51261
// weapon := 0 ;
50228: LD_ADDR_VAR 0 18
50232: PUSH
50233: LD_INT 0
50235: ST_TO_ADDR
// fac_list := [ ] ;
50236: LD_ADDR_VAR 0 17
50240: PUSH
50241: EMPTY
50242: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
50243: LD_ADDR_VAR 0 6
50247: PUSH
50248: LD_VAR 0 1
50252: PPUSH
50253: CALL_OW 274
50257: PPUSH
50258: LD_VAR 0 2
50262: PPUSH
50263: LD_INT 0
50265: PPUSH
50266: CALL 47832 0 3
50270: PPUSH
50271: LD_INT 30
50273: PUSH
50274: LD_INT 3
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PPUSH
50281: CALL_OW 72
50285: ST_TO_ADDR
// if not factories then
50286: LD_VAR 0 6
50290: NOT
50291: IFFALSE 50295
// exit ;
50293: GO 51261
// for i in factories do
50295: LD_ADDR_VAR 0 8
50299: PUSH
50300: LD_VAR 0 6
50304: PUSH
50305: FOR_IN
50306: IFFALSE 50331
// fac_list := fac_list union AvailableWeaponList ( i ) ;
50308: LD_ADDR_VAR 0 17
50312: PUSH
50313: LD_VAR 0 17
50317: PUSH
50318: LD_VAR 0 8
50322: PPUSH
50323: CALL_OW 478
50327: UNION
50328: ST_TO_ADDR
50329: GO 50305
50331: POP
50332: POP
// if not fac_list then
50333: LD_VAR 0 17
50337: NOT
50338: IFFALSE 50342
// exit ;
50340: GO 51261
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
50342: LD_ADDR_VAR 0 5
50346: PUSH
50347: LD_INT 4
50349: PUSH
50350: LD_INT 5
50352: PUSH
50353: LD_INT 9
50355: PUSH
50356: LD_INT 10
50358: PUSH
50359: LD_INT 6
50361: PUSH
50362: LD_INT 7
50364: PUSH
50365: LD_INT 11
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 27
50379: PUSH
50380: LD_INT 28
50382: PUSH
50383: LD_INT 26
50385: PUSH
50386: LD_INT 30
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 43
50397: PUSH
50398: LD_INT 44
50400: PUSH
50401: LD_INT 46
50403: PUSH
50404: LD_INT 45
50406: PUSH
50407: LD_INT 47
50409: PUSH
50410: LD_INT 49
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: LIST
50425: PUSH
50426: LD_VAR 0 12
50430: ARRAY
50431: ST_TO_ADDR
// list := list isect fac_list ;
50432: LD_ADDR_VAR 0 5
50436: PUSH
50437: LD_VAR 0 5
50441: PUSH
50442: LD_VAR 0 17
50446: ISECT
50447: ST_TO_ADDR
// if not list then
50448: LD_VAR 0 5
50452: NOT
50453: IFFALSE 50457
// exit ;
50455: GO 51261
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
50457: LD_VAR 0 12
50461: PUSH
50462: LD_INT 3
50464: EQUAL
50465: PUSH
50466: LD_INT 49
50468: PUSH
50469: LD_VAR 0 5
50473: IN
50474: AND
50475: PUSH
50476: LD_INT 31
50478: PPUSH
50479: LD_VAR 0 16
50483: PPUSH
50484: CALL_OW 321
50488: PUSH
50489: LD_INT 2
50491: EQUAL
50492: AND
50493: IFFALSE 50553
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
50495: LD_INT 22
50497: PUSH
50498: LD_VAR 0 16
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 35
50509: PUSH
50510: LD_INT 49
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 91
50519: PUSH
50520: LD_VAR 0 1
50524: PUSH
50525: LD_INT 10
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: LIST
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: PPUSH
50538: CALL_OW 69
50542: NOT
50543: IFFALSE 50553
// weapon := ru_time_lapser ;
50545: LD_ADDR_VAR 0 18
50549: PUSH
50550: LD_INT 49
50552: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
50553: LD_VAR 0 12
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 2
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: IN
50568: PUSH
50569: LD_INT 11
50571: PUSH
50572: LD_VAR 0 5
50576: IN
50577: PUSH
50578: LD_INT 30
50580: PUSH
50581: LD_VAR 0 5
50585: IN
50586: OR
50587: AND
50588: PUSH
50589: LD_INT 6
50591: PPUSH
50592: LD_VAR 0 16
50596: PPUSH
50597: CALL_OW 321
50601: PUSH
50602: LD_INT 2
50604: EQUAL
50605: AND
50606: IFFALSE 50771
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
50608: LD_INT 22
50610: PUSH
50611: LD_VAR 0 16
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: PUSH
50620: LD_INT 2
50622: PUSH
50623: LD_INT 35
50625: PUSH
50626: LD_INT 11
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 35
50635: PUSH
50636: LD_INT 30
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 91
50650: PUSH
50651: LD_VAR 0 1
50655: PUSH
50656: LD_INT 18
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: LIST
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: LIST
50668: PPUSH
50669: CALL_OW 69
50673: NOT
50674: PUSH
50675: LD_INT 22
50677: PUSH
50678: LD_VAR 0 16
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 2
50689: PUSH
50690: LD_INT 30
50692: PUSH
50693: LD_INT 32
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 30
50702: PUSH
50703: LD_INT 33
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 91
50717: PUSH
50718: LD_VAR 0 1
50722: PUSH
50723: LD_INT 12
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: LIST
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: LIST
50735: PUSH
50736: EMPTY
50737: LIST
50738: PPUSH
50739: CALL_OW 69
50743: PUSH
50744: LD_INT 2
50746: GREATER
50747: AND
50748: IFFALSE 50771
// weapon := [ us_radar , ar_radar ] [ nat ] ;
50750: LD_ADDR_VAR 0 18
50754: PUSH
50755: LD_INT 11
50757: PUSH
50758: LD_INT 30
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_VAR 0 12
50769: ARRAY
50770: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
50771: LD_VAR 0 18
50775: NOT
50776: PUSH
50777: LD_INT 40
50779: PPUSH
50780: LD_VAR 0 16
50784: PPUSH
50785: CALL_OW 321
50789: PUSH
50790: LD_INT 2
50792: EQUAL
50793: AND
50794: PUSH
50795: LD_INT 7
50797: PUSH
50798: LD_VAR 0 5
50802: IN
50803: PUSH
50804: LD_INT 28
50806: PUSH
50807: LD_VAR 0 5
50811: IN
50812: OR
50813: PUSH
50814: LD_INT 45
50816: PUSH
50817: LD_VAR 0 5
50821: IN
50822: OR
50823: AND
50824: IFFALSE 51078
// begin hex := GetHexInfo ( x , y ) ;
50826: LD_ADDR_VAR 0 4
50830: PUSH
50831: LD_VAR 0 10
50835: PPUSH
50836: LD_VAR 0 11
50840: PPUSH
50841: CALL_OW 546
50845: ST_TO_ADDR
// if hex [ 1 ] then
50846: LD_VAR 0 4
50850: PUSH
50851: LD_INT 1
50853: ARRAY
50854: IFFALSE 50858
// exit ;
50856: GO 51261
// height := hex [ 2 ] ;
50858: LD_ADDR_VAR 0 15
50862: PUSH
50863: LD_VAR 0 4
50867: PUSH
50868: LD_INT 2
50870: ARRAY
50871: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50872: LD_ADDR_VAR 0 14
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: LD_INT 2
50882: PUSH
50883: LD_INT 3
50885: PUSH
50886: LD_INT 5
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: ST_TO_ADDR
// for i in tmp do
50895: LD_ADDR_VAR 0 8
50899: PUSH
50900: LD_VAR 0 14
50904: PUSH
50905: FOR_IN
50906: IFFALSE 51076
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50908: LD_ADDR_VAR 0 9
50912: PUSH
50913: LD_VAR 0 10
50917: PPUSH
50918: LD_VAR 0 8
50922: PPUSH
50923: LD_INT 5
50925: PPUSH
50926: CALL_OW 272
50930: PUSH
50931: LD_VAR 0 11
50935: PPUSH
50936: LD_VAR 0 8
50940: PPUSH
50941: LD_INT 5
50943: PPUSH
50944: CALL_OW 273
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50953: LD_VAR 0 9
50957: PUSH
50958: LD_INT 1
50960: ARRAY
50961: PPUSH
50962: LD_VAR 0 9
50966: PUSH
50967: LD_INT 2
50969: ARRAY
50970: PPUSH
50971: CALL_OW 488
50975: IFFALSE 51074
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50977: LD_ADDR_VAR 0 4
50981: PUSH
50982: LD_VAR 0 9
50986: PUSH
50987: LD_INT 1
50989: ARRAY
50990: PPUSH
50991: LD_VAR 0 9
50995: PUSH
50996: LD_INT 2
50998: ARRAY
50999: PPUSH
51000: CALL_OW 546
51004: ST_TO_ADDR
// if hex [ 1 ] then
51005: LD_VAR 0 4
51009: PUSH
51010: LD_INT 1
51012: ARRAY
51013: IFFALSE 51017
// continue ;
51015: GO 50905
// h := hex [ 2 ] ;
51017: LD_ADDR_VAR 0 13
51021: PUSH
51022: LD_VAR 0 4
51026: PUSH
51027: LD_INT 2
51029: ARRAY
51030: ST_TO_ADDR
// if h + 7 < height then
51031: LD_VAR 0 13
51035: PUSH
51036: LD_INT 7
51038: PLUS
51039: PUSH
51040: LD_VAR 0 15
51044: LESS
51045: IFFALSE 51074
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
51047: LD_ADDR_VAR 0 18
51051: PUSH
51052: LD_INT 7
51054: PUSH
51055: LD_INT 28
51057: PUSH
51058: LD_INT 45
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: LIST
51065: PUSH
51066: LD_VAR 0 12
51070: ARRAY
51071: ST_TO_ADDR
// break ;
51072: GO 51076
// end ; end ; end ;
51074: GO 50905
51076: POP
51077: POP
// end ; if not weapon then
51078: LD_VAR 0 18
51082: NOT
51083: IFFALSE 51143
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
51085: LD_ADDR_VAR 0 5
51089: PUSH
51090: LD_VAR 0 5
51094: PUSH
51095: LD_INT 11
51097: PUSH
51098: LD_INT 30
51100: PUSH
51101: LD_INT 49
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: LIST
51108: DIFF
51109: ST_TO_ADDR
// if not list then
51110: LD_VAR 0 5
51114: NOT
51115: IFFALSE 51119
// exit ;
51117: GO 51261
// weapon := list [ rand ( 1 , list ) ] ;
51119: LD_ADDR_VAR 0 18
51123: PUSH
51124: LD_VAR 0 5
51128: PUSH
51129: LD_INT 1
51131: PPUSH
51132: LD_VAR 0 5
51136: PPUSH
51137: CALL_OW 12
51141: ARRAY
51142: ST_TO_ADDR
// end ; if weapon then
51143: LD_VAR 0 18
51147: IFFALSE 51261
// begin tmp := CostOfWeapon ( weapon ) ;
51149: LD_ADDR_VAR 0 14
51153: PUSH
51154: LD_VAR 0 18
51158: PPUSH
51159: CALL_OW 451
51163: ST_TO_ADDR
// j := GetBase ( tower ) ;
51164: LD_ADDR_VAR 0 9
51168: PUSH
51169: LD_VAR 0 1
51173: PPUSH
51174: CALL_OW 274
51178: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
51179: LD_VAR 0 9
51183: PPUSH
51184: LD_INT 1
51186: PPUSH
51187: CALL_OW 275
51191: PUSH
51192: LD_VAR 0 14
51196: PUSH
51197: LD_INT 1
51199: ARRAY
51200: GREATEREQUAL
51201: PUSH
51202: LD_VAR 0 9
51206: PPUSH
51207: LD_INT 2
51209: PPUSH
51210: CALL_OW 275
51214: PUSH
51215: LD_VAR 0 14
51219: PUSH
51220: LD_INT 2
51222: ARRAY
51223: GREATEREQUAL
51224: AND
51225: PUSH
51226: LD_VAR 0 9
51230: PPUSH
51231: LD_INT 3
51233: PPUSH
51234: CALL_OW 275
51238: PUSH
51239: LD_VAR 0 14
51243: PUSH
51244: LD_INT 3
51246: ARRAY
51247: GREATEREQUAL
51248: AND
51249: IFFALSE 51261
// result := weapon ;
51251: LD_ADDR_VAR 0 3
51255: PUSH
51256: LD_VAR 0 18
51260: ST_TO_ADDR
// end ; end ;
51261: LD_VAR 0 3
51265: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
51266: LD_INT 0
51268: PPUSH
51269: PPUSH
// result := true ;
51270: LD_ADDR_VAR 0 3
51274: PUSH
51275: LD_INT 1
51277: ST_TO_ADDR
// if array1 = array2 then
51278: LD_VAR 0 1
51282: PUSH
51283: LD_VAR 0 2
51287: EQUAL
51288: IFFALSE 51348
// begin for i = 1 to array1 do
51290: LD_ADDR_VAR 0 4
51294: PUSH
51295: DOUBLE
51296: LD_INT 1
51298: DEC
51299: ST_TO_ADDR
51300: LD_VAR 0 1
51304: PUSH
51305: FOR_TO
51306: IFFALSE 51344
// if array1 [ i ] <> array2 [ i ] then
51308: LD_VAR 0 1
51312: PUSH
51313: LD_VAR 0 4
51317: ARRAY
51318: PUSH
51319: LD_VAR 0 2
51323: PUSH
51324: LD_VAR 0 4
51328: ARRAY
51329: NONEQUAL
51330: IFFALSE 51342
// begin result := false ;
51332: LD_ADDR_VAR 0 3
51336: PUSH
51337: LD_INT 0
51339: ST_TO_ADDR
// break ;
51340: GO 51344
// end ;
51342: GO 51305
51344: POP
51345: POP
// end else
51346: GO 51356
// result := false ;
51348: LD_ADDR_VAR 0 3
51352: PUSH
51353: LD_INT 0
51355: ST_TO_ADDR
// end ;
51356: LD_VAR 0 3
51360: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
51361: LD_INT 0
51363: PPUSH
51364: PPUSH
// if not array1 or not array2 then
51365: LD_VAR 0 1
51369: NOT
51370: PUSH
51371: LD_VAR 0 2
51375: NOT
51376: OR
51377: IFFALSE 51381
// exit ;
51379: GO 51445
// result := true ;
51381: LD_ADDR_VAR 0 3
51385: PUSH
51386: LD_INT 1
51388: ST_TO_ADDR
// for i = 1 to array1 do
51389: LD_ADDR_VAR 0 4
51393: PUSH
51394: DOUBLE
51395: LD_INT 1
51397: DEC
51398: ST_TO_ADDR
51399: LD_VAR 0 1
51403: PUSH
51404: FOR_TO
51405: IFFALSE 51443
// if array1 [ i ] <> array2 [ i ] then
51407: LD_VAR 0 1
51411: PUSH
51412: LD_VAR 0 4
51416: ARRAY
51417: PUSH
51418: LD_VAR 0 2
51422: PUSH
51423: LD_VAR 0 4
51427: ARRAY
51428: NONEQUAL
51429: IFFALSE 51441
// begin result := false ;
51431: LD_ADDR_VAR 0 3
51435: PUSH
51436: LD_INT 0
51438: ST_TO_ADDR
// break ;
51439: GO 51443
// end ;
51441: GO 51404
51443: POP
51444: POP
// end ;
51445: LD_VAR 0 3
51449: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
51450: LD_INT 0
51452: PPUSH
51453: PPUSH
51454: PPUSH
// pom := GetBase ( fac ) ;
51455: LD_ADDR_VAR 0 5
51459: PUSH
51460: LD_VAR 0 1
51464: PPUSH
51465: CALL_OW 274
51469: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
51470: LD_ADDR_VAR 0 4
51474: PUSH
51475: LD_VAR 0 2
51479: PUSH
51480: LD_INT 1
51482: ARRAY
51483: PPUSH
51484: LD_VAR 0 2
51488: PUSH
51489: LD_INT 2
51491: ARRAY
51492: PPUSH
51493: LD_VAR 0 2
51497: PUSH
51498: LD_INT 3
51500: ARRAY
51501: PPUSH
51502: LD_VAR 0 2
51506: PUSH
51507: LD_INT 4
51509: ARRAY
51510: PPUSH
51511: CALL_OW 449
51515: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51516: LD_ADDR_VAR 0 3
51520: PUSH
51521: LD_VAR 0 5
51525: PPUSH
51526: LD_INT 1
51528: PPUSH
51529: CALL_OW 275
51533: PUSH
51534: LD_VAR 0 4
51538: PUSH
51539: LD_INT 1
51541: ARRAY
51542: GREATEREQUAL
51543: PUSH
51544: LD_VAR 0 5
51548: PPUSH
51549: LD_INT 2
51551: PPUSH
51552: CALL_OW 275
51556: PUSH
51557: LD_VAR 0 4
51561: PUSH
51562: LD_INT 2
51564: ARRAY
51565: GREATEREQUAL
51566: AND
51567: PUSH
51568: LD_VAR 0 5
51572: PPUSH
51573: LD_INT 3
51575: PPUSH
51576: CALL_OW 275
51580: PUSH
51581: LD_VAR 0 4
51585: PUSH
51586: LD_INT 3
51588: ARRAY
51589: GREATEREQUAL
51590: AND
51591: ST_TO_ADDR
// end ;
51592: LD_VAR 0 3
51596: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
51597: LD_INT 0
51599: PPUSH
51600: PPUSH
51601: PPUSH
51602: PPUSH
// pom := GetBase ( building ) ;
51603: LD_ADDR_VAR 0 3
51607: PUSH
51608: LD_VAR 0 1
51612: PPUSH
51613: CALL_OW 274
51617: ST_TO_ADDR
// if not pom then
51618: LD_VAR 0 3
51622: NOT
51623: IFFALSE 51627
// exit ;
51625: GO 51797
// btype := GetBType ( building ) ;
51627: LD_ADDR_VAR 0 5
51631: PUSH
51632: LD_VAR 0 1
51636: PPUSH
51637: CALL_OW 266
51641: ST_TO_ADDR
// if btype = b_armoury then
51642: LD_VAR 0 5
51646: PUSH
51647: LD_INT 4
51649: EQUAL
51650: IFFALSE 51660
// btype := b_barracks ;
51652: LD_ADDR_VAR 0 5
51656: PUSH
51657: LD_INT 5
51659: ST_TO_ADDR
// if btype = b_depot then
51660: LD_VAR 0 5
51664: PUSH
51665: LD_INT 0
51667: EQUAL
51668: IFFALSE 51678
// btype := b_warehouse ;
51670: LD_ADDR_VAR 0 5
51674: PUSH
51675: LD_INT 1
51677: ST_TO_ADDR
// if btype = b_workshop then
51678: LD_VAR 0 5
51682: PUSH
51683: LD_INT 2
51685: EQUAL
51686: IFFALSE 51696
// btype := b_factory ;
51688: LD_ADDR_VAR 0 5
51692: PUSH
51693: LD_INT 3
51695: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51696: LD_ADDR_VAR 0 4
51700: PUSH
51701: LD_VAR 0 5
51705: PPUSH
51706: LD_VAR 0 1
51710: PPUSH
51711: CALL_OW 248
51715: PPUSH
51716: CALL_OW 450
51720: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51721: LD_ADDR_VAR 0 2
51725: PUSH
51726: LD_VAR 0 3
51730: PPUSH
51731: LD_INT 1
51733: PPUSH
51734: CALL_OW 275
51738: PUSH
51739: LD_VAR 0 4
51743: PUSH
51744: LD_INT 1
51746: ARRAY
51747: GREATEREQUAL
51748: PUSH
51749: LD_VAR 0 3
51753: PPUSH
51754: LD_INT 2
51756: PPUSH
51757: CALL_OW 275
51761: PUSH
51762: LD_VAR 0 4
51766: PUSH
51767: LD_INT 2
51769: ARRAY
51770: GREATEREQUAL
51771: AND
51772: PUSH
51773: LD_VAR 0 3
51777: PPUSH
51778: LD_INT 3
51780: PPUSH
51781: CALL_OW 275
51785: PUSH
51786: LD_VAR 0 4
51790: PUSH
51791: LD_INT 3
51793: ARRAY
51794: GREATEREQUAL
51795: AND
51796: ST_TO_ADDR
// end ;
51797: LD_VAR 0 2
51801: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
51802: LD_INT 0
51804: PPUSH
51805: PPUSH
51806: PPUSH
// pom := GetBase ( building ) ;
51807: LD_ADDR_VAR 0 4
51811: PUSH
51812: LD_VAR 0 1
51816: PPUSH
51817: CALL_OW 274
51821: ST_TO_ADDR
// if not pom then
51822: LD_VAR 0 4
51826: NOT
51827: IFFALSE 51831
// exit ;
51829: GO 51932
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
51831: LD_ADDR_VAR 0 5
51835: PUSH
51836: LD_VAR 0 2
51840: PPUSH
51841: LD_VAR 0 1
51845: PPUSH
51846: CALL_OW 248
51850: PPUSH
51851: CALL_OW 450
51855: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
51856: LD_ADDR_VAR 0 3
51860: PUSH
51861: LD_VAR 0 4
51865: PPUSH
51866: LD_INT 1
51868: PPUSH
51869: CALL_OW 275
51873: PUSH
51874: LD_VAR 0 5
51878: PUSH
51879: LD_INT 1
51881: ARRAY
51882: GREATEREQUAL
51883: PUSH
51884: LD_VAR 0 4
51888: PPUSH
51889: LD_INT 2
51891: PPUSH
51892: CALL_OW 275
51896: PUSH
51897: LD_VAR 0 5
51901: PUSH
51902: LD_INT 2
51904: ARRAY
51905: GREATEREQUAL
51906: AND
51907: PUSH
51908: LD_VAR 0 4
51912: PPUSH
51913: LD_INT 3
51915: PPUSH
51916: CALL_OW 275
51920: PUSH
51921: LD_VAR 0 5
51925: PUSH
51926: LD_INT 3
51928: ARRAY
51929: GREATEREQUAL
51930: AND
51931: ST_TO_ADDR
// end ;
51932: LD_VAR 0 3
51936: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51937: LD_INT 0
51939: PPUSH
51940: PPUSH
51941: PPUSH
51942: PPUSH
51943: PPUSH
51944: PPUSH
51945: PPUSH
51946: PPUSH
51947: PPUSH
51948: PPUSH
51949: PPUSH
// result := false ;
51950: LD_ADDR_VAR 0 8
51954: PUSH
51955: LD_INT 0
51957: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51958: LD_VAR 0 5
51962: NOT
51963: PUSH
51964: LD_VAR 0 1
51968: NOT
51969: OR
51970: PUSH
51971: LD_VAR 0 2
51975: NOT
51976: OR
51977: PUSH
51978: LD_VAR 0 3
51982: NOT
51983: OR
51984: IFFALSE 51988
// exit ;
51986: GO 52802
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51988: LD_ADDR_VAR 0 14
51992: PUSH
51993: LD_VAR 0 1
51997: PPUSH
51998: LD_VAR 0 2
52002: PPUSH
52003: LD_VAR 0 3
52007: PPUSH
52008: LD_VAR 0 4
52012: PPUSH
52013: LD_VAR 0 5
52017: PUSH
52018: LD_INT 1
52020: ARRAY
52021: PPUSH
52022: CALL_OW 248
52026: PPUSH
52027: LD_INT 0
52029: PPUSH
52030: CALL 54055 0 6
52034: ST_TO_ADDR
// if not hexes then
52035: LD_VAR 0 14
52039: NOT
52040: IFFALSE 52044
// exit ;
52042: GO 52802
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
52044: LD_ADDR_VAR 0 17
52048: PUSH
52049: LD_VAR 0 5
52053: PPUSH
52054: LD_INT 22
52056: PUSH
52057: LD_VAR 0 13
52061: PPUSH
52062: CALL_OW 255
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: PUSH
52074: LD_INT 30
52076: PUSH
52077: LD_INT 0
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 30
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: LIST
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PPUSH
52103: CALL_OW 72
52107: ST_TO_ADDR
// for i = 1 to hexes do
52108: LD_ADDR_VAR 0 9
52112: PUSH
52113: DOUBLE
52114: LD_INT 1
52116: DEC
52117: ST_TO_ADDR
52118: LD_VAR 0 14
52122: PUSH
52123: FOR_TO
52124: IFFALSE 52800
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52126: LD_ADDR_VAR 0 13
52130: PUSH
52131: LD_VAR 0 14
52135: PUSH
52136: LD_VAR 0 9
52140: ARRAY
52141: PUSH
52142: LD_INT 1
52144: ARRAY
52145: PPUSH
52146: LD_VAR 0 14
52150: PUSH
52151: LD_VAR 0 9
52155: ARRAY
52156: PUSH
52157: LD_INT 2
52159: ARRAY
52160: PPUSH
52161: CALL_OW 428
52165: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
52166: LD_VAR 0 14
52170: PUSH
52171: LD_VAR 0 9
52175: ARRAY
52176: PUSH
52177: LD_INT 1
52179: ARRAY
52180: PPUSH
52181: LD_VAR 0 14
52185: PUSH
52186: LD_VAR 0 9
52190: ARRAY
52191: PUSH
52192: LD_INT 2
52194: ARRAY
52195: PPUSH
52196: CALL_OW 351
52200: PUSH
52201: LD_VAR 0 14
52205: PUSH
52206: LD_VAR 0 9
52210: ARRAY
52211: PUSH
52212: LD_INT 1
52214: ARRAY
52215: PPUSH
52216: LD_VAR 0 14
52220: PUSH
52221: LD_VAR 0 9
52225: ARRAY
52226: PUSH
52227: LD_INT 2
52229: ARRAY
52230: PPUSH
52231: CALL_OW 488
52235: NOT
52236: OR
52237: PUSH
52238: LD_VAR 0 13
52242: PPUSH
52243: CALL_OW 247
52247: PUSH
52248: LD_INT 3
52250: EQUAL
52251: OR
52252: IFFALSE 52258
// exit ;
52254: POP
52255: POP
52256: GO 52802
// if not tmp then
52258: LD_VAR 0 13
52262: NOT
52263: IFFALSE 52267
// continue ;
52265: GO 52123
// result := true ;
52267: LD_ADDR_VAR 0 8
52271: PUSH
52272: LD_INT 1
52274: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
52275: LD_VAR 0 6
52279: PUSH
52280: LD_VAR 0 13
52284: PPUSH
52285: CALL_OW 247
52289: PUSH
52290: LD_INT 2
52292: EQUAL
52293: AND
52294: PUSH
52295: LD_VAR 0 13
52299: PPUSH
52300: CALL_OW 263
52304: PUSH
52305: LD_INT 1
52307: EQUAL
52308: AND
52309: IFFALSE 52473
// begin if IsDrivenBy ( tmp ) then
52311: LD_VAR 0 13
52315: PPUSH
52316: CALL_OW 311
52320: IFFALSE 52324
// continue ;
52322: GO 52123
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
52324: LD_VAR 0 6
52328: PPUSH
52329: LD_INT 3
52331: PUSH
52332: LD_INT 60
52334: PUSH
52335: EMPTY
52336: LIST
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 3
52344: PUSH
52345: LD_INT 55
52347: PUSH
52348: EMPTY
52349: LIST
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: EMPTY
52356: LIST
52357: LIST
52358: PPUSH
52359: CALL_OW 72
52363: IFFALSE 52471
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
52365: LD_ADDR_VAR 0 18
52369: PUSH
52370: LD_VAR 0 6
52374: PPUSH
52375: LD_INT 3
52377: PUSH
52378: LD_INT 60
52380: PUSH
52381: EMPTY
52382: LIST
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 3
52390: PUSH
52391: LD_INT 55
52393: PUSH
52394: EMPTY
52395: LIST
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PPUSH
52405: CALL_OW 72
52409: PUSH
52410: LD_INT 1
52412: ARRAY
52413: ST_TO_ADDR
// if IsInUnit ( driver ) then
52414: LD_VAR 0 18
52418: PPUSH
52419: CALL_OW 310
52423: IFFALSE 52434
// ComExit ( driver ) ;
52425: LD_VAR 0 18
52429: PPUSH
52430: CALL 77847 0 1
// AddComEnterUnit ( driver , tmp ) ;
52434: LD_VAR 0 18
52438: PPUSH
52439: LD_VAR 0 13
52443: PPUSH
52444: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
52448: LD_VAR 0 18
52452: PPUSH
52453: LD_VAR 0 7
52457: PPUSH
52458: CALL_OW 173
// AddComExitVehicle ( driver ) ;
52462: LD_VAR 0 18
52466: PPUSH
52467: CALL_OW 181
// end ; continue ;
52471: GO 52123
// end ; if not cleaners or not tmp in cleaners then
52473: LD_VAR 0 6
52477: NOT
52478: PUSH
52479: LD_VAR 0 13
52483: PUSH
52484: LD_VAR 0 6
52488: IN
52489: NOT
52490: OR
52491: IFFALSE 52798
// begin if dep then
52493: LD_VAR 0 17
52497: IFFALSE 52633
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
52499: LD_ADDR_VAR 0 16
52503: PUSH
52504: LD_VAR 0 17
52508: PUSH
52509: LD_INT 1
52511: ARRAY
52512: PPUSH
52513: CALL_OW 250
52517: PPUSH
52518: LD_VAR 0 17
52522: PUSH
52523: LD_INT 1
52525: ARRAY
52526: PPUSH
52527: CALL_OW 254
52531: PPUSH
52532: LD_INT 5
52534: PPUSH
52535: CALL_OW 272
52539: PUSH
52540: LD_VAR 0 17
52544: PUSH
52545: LD_INT 1
52547: ARRAY
52548: PPUSH
52549: CALL_OW 251
52553: PPUSH
52554: LD_VAR 0 17
52558: PUSH
52559: LD_INT 1
52561: ARRAY
52562: PPUSH
52563: CALL_OW 254
52567: PPUSH
52568: LD_INT 5
52570: PPUSH
52571: CALL_OW 273
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
52580: LD_VAR 0 16
52584: PUSH
52585: LD_INT 1
52587: ARRAY
52588: PPUSH
52589: LD_VAR 0 16
52593: PUSH
52594: LD_INT 2
52596: ARRAY
52597: PPUSH
52598: CALL_OW 488
52602: IFFALSE 52633
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
52604: LD_VAR 0 13
52608: PPUSH
52609: LD_VAR 0 16
52613: PUSH
52614: LD_INT 1
52616: ARRAY
52617: PPUSH
52618: LD_VAR 0 16
52622: PUSH
52623: LD_INT 2
52625: ARRAY
52626: PPUSH
52627: CALL_OW 111
// continue ;
52631: GO 52123
// end ; end ; r := GetDir ( tmp ) ;
52633: LD_ADDR_VAR 0 15
52637: PUSH
52638: LD_VAR 0 13
52642: PPUSH
52643: CALL_OW 254
52647: ST_TO_ADDR
// if r = 5 then
52648: LD_VAR 0 15
52652: PUSH
52653: LD_INT 5
52655: EQUAL
52656: IFFALSE 52666
// r := 0 ;
52658: LD_ADDR_VAR 0 15
52662: PUSH
52663: LD_INT 0
52665: ST_TO_ADDR
// for j = r to 5 do
52666: LD_ADDR_VAR 0 10
52670: PUSH
52671: DOUBLE
52672: LD_VAR 0 15
52676: DEC
52677: ST_TO_ADDR
52678: LD_INT 5
52680: PUSH
52681: FOR_TO
52682: IFFALSE 52796
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
52684: LD_ADDR_VAR 0 11
52688: PUSH
52689: LD_VAR 0 13
52693: PPUSH
52694: CALL_OW 250
52698: PPUSH
52699: LD_VAR 0 10
52703: PPUSH
52704: LD_INT 2
52706: PPUSH
52707: CALL_OW 272
52711: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
52712: LD_ADDR_VAR 0 12
52716: PUSH
52717: LD_VAR 0 13
52721: PPUSH
52722: CALL_OW 251
52726: PPUSH
52727: LD_VAR 0 10
52731: PPUSH
52732: LD_INT 2
52734: PPUSH
52735: CALL_OW 273
52739: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
52740: LD_VAR 0 11
52744: PPUSH
52745: LD_VAR 0 12
52749: PPUSH
52750: CALL_OW 488
52754: PUSH
52755: LD_VAR 0 11
52759: PPUSH
52760: LD_VAR 0 12
52764: PPUSH
52765: CALL_OW 428
52769: NOT
52770: AND
52771: IFFALSE 52794
// begin ComMoveXY ( tmp , _x , _y ) ;
52773: LD_VAR 0 13
52777: PPUSH
52778: LD_VAR 0 11
52782: PPUSH
52783: LD_VAR 0 12
52787: PPUSH
52788: CALL_OW 111
// break ;
52792: GO 52796
// end ; end ;
52794: GO 52681
52796: POP
52797: POP
// end ; end ;
52798: GO 52123
52800: POP
52801: POP
// end ;
52802: LD_VAR 0 8
52806: RET
// export function BuildingTechInvented ( side , btype ) ; begin
52807: LD_INT 0
52809: PPUSH
// result := true ;
52810: LD_ADDR_VAR 0 3
52814: PUSH
52815: LD_INT 1
52817: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
52818: LD_VAR 0 2
52822: PUSH
52823: LD_INT 24
52825: DOUBLE
52826: EQUAL
52827: IFTRUE 52837
52829: LD_INT 33
52831: DOUBLE
52832: EQUAL
52833: IFTRUE 52837
52835: GO 52862
52837: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
52838: LD_ADDR_VAR 0 3
52842: PUSH
52843: LD_INT 32
52845: PPUSH
52846: LD_VAR 0 1
52850: PPUSH
52851: CALL_OW 321
52855: PUSH
52856: LD_INT 2
52858: EQUAL
52859: ST_TO_ADDR
52860: GO 53178
52862: LD_INT 20
52864: DOUBLE
52865: EQUAL
52866: IFTRUE 52870
52868: GO 52895
52870: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52871: LD_ADDR_VAR 0 3
52875: PUSH
52876: LD_INT 6
52878: PPUSH
52879: LD_VAR 0 1
52883: PPUSH
52884: CALL_OW 321
52888: PUSH
52889: LD_INT 2
52891: EQUAL
52892: ST_TO_ADDR
52893: GO 53178
52895: LD_INT 22
52897: DOUBLE
52898: EQUAL
52899: IFTRUE 52909
52901: LD_INT 36
52903: DOUBLE
52904: EQUAL
52905: IFTRUE 52909
52907: GO 52934
52909: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52910: LD_ADDR_VAR 0 3
52914: PUSH
52915: LD_INT 15
52917: PPUSH
52918: LD_VAR 0 1
52922: PPUSH
52923: CALL_OW 321
52927: PUSH
52928: LD_INT 2
52930: EQUAL
52931: ST_TO_ADDR
52932: GO 53178
52934: LD_INT 30
52936: DOUBLE
52937: EQUAL
52938: IFTRUE 52942
52940: GO 52967
52942: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52943: LD_ADDR_VAR 0 3
52947: PUSH
52948: LD_INT 20
52950: PPUSH
52951: LD_VAR 0 1
52955: PPUSH
52956: CALL_OW 321
52960: PUSH
52961: LD_INT 2
52963: EQUAL
52964: ST_TO_ADDR
52965: GO 53178
52967: LD_INT 28
52969: DOUBLE
52970: EQUAL
52971: IFTRUE 52981
52973: LD_INT 21
52975: DOUBLE
52976: EQUAL
52977: IFTRUE 52981
52979: GO 53006
52981: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52982: LD_ADDR_VAR 0 3
52986: PUSH
52987: LD_INT 21
52989: PPUSH
52990: LD_VAR 0 1
52994: PPUSH
52995: CALL_OW 321
52999: PUSH
53000: LD_INT 2
53002: EQUAL
53003: ST_TO_ADDR
53004: GO 53178
53006: LD_INT 16
53008: DOUBLE
53009: EQUAL
53010: IFTRUE 53014
53012: GO 53039
53014: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
53015: LD_ADDR_VAR 0 3
53019: PUSH
53020: LD_INT 84
53022: PPUSH
53023: LD_VAR 0 1
53027: PPUSH
53028: CALL_OW 321
53032: PUSH
53033: LD_INT 2
53035: EQUAL
53036: ST_TO_ADDR
53037: GO 53178
53039: LD_INT 19
53041: DOUBLE
53042: EQUAL
53043: IFTRUE 53053
53045: LD_INT 23
53047: DOUBLE
53048: EQUAL
53049: IFTRUE 53053
53051: GO 53078
53053: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
53054: LD_ADDR_VAR 0 3
53058: PUSH
53059: LD_INT 83
53061: PPUSH
53062: LD_VAR 0 1
53066: PPUSH
53067: CALL_OW 321
53071: PUSH
53072: LD_INT 2
53074: EQUAL
53075: ST_TO_ADDR
53076: GO 53178
53078: LD_INT 17
53080: DOUBLE
53081: EQUAL
53082: IFTRUE 53086
53084: GO 53111
53086: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
53087: LD_ADDR_VAR 0 3
53091: PUSH
53092: LD_INT 39
53094: PPUSH
53095: LD_VAR 0 1
53099: PPUSH
53100: CALL_OW 321
53104: PUSH
53105: LD_INT 2
53107: EQUAL
53108: ST_TO_ADDR
53109: GO 53178
53111: LD_INT 18
53113: DOUBLE
53114: EQUAL
53115: IFTRUE 53119
53117: GO 53144
53119: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
53120: LD_ADDR_VAR 0 3
53124: PUSH
53125: LD_INT 40
53127: PPUSH
53128: LD_VAR 0 1
53132: PPUSH
53133: CALL_OW 321
53137: PUSH
53138: LD_INT 2
53140: EQUAL
53141: ST_TO_ADDR
53142: GO 53178
53144: LD_INT 27
53146: DOUBLE
53147: EQUAL
53148: IFTRUE 53152
53150: GO 53177
53152: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
53153: LD_ADDR_VAR 0 3
53157: PUSH
53158: LD_INT 35
53160: PPUSH
53161: LD_VAR 0 1
53165: PPUSH
53166: CALL_OW 321
53170: PUSH
53171: LD_INT 2
53173: EQUAL
53174: ST_TO_ADDR
53175: GO 53178
53177: POP
// end ;
53178: LD_VAR 0 3
53182: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
53183: LD_INT 0
53185: PPUSH
53186: PPUSH
53187: PPUSH
53188: PPUSH
53189: PPUSH
53190: PPUSH
53191: PPUSH
53192: PPUSH
53193: PPUSH
53194: PPUSH
53195: PPUSH
// result := false ;
53196: LD_ADDR_VAR 0 6
53200: PUSH
53201: LD_INT 0
53203: ST_TO_ADDR
// if btype = b_depot then
53204: LD_VAR 0 2
53208: PUSH
53209: LD_INT 0
53211: EQUAL
53212: IFFALSE 53224
// begin result := true ;
53214: LD_ADDR_VAR 0 6
53218: PUSH
53219: LD_INT 1
53221: ST_TO_ADDR
// exit ;
53222: GO 54050
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
53224: LD_VAR 0 1
53228: NOT
53229: PUSH
53230: LD_VAR 0 1
53234: PPUSH
53235: CALL_OW 266
53239: PUSH
53240: LD_INT 0
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: IN
53250: NOT
53251: OR
53252: PUSH
53253: LD_VAR 0 2
53257: NOT
53258: OR
53259: PUSH
53260: LD_VAR 0 5
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: LD_INT 2
53273: PUSH
53274: LD_INT 3
53276: PUSH
53277: LD_INT 4
53279: PUSH
53280: LD_INT 5
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: IN
53291: NOT
53292: OR
53293: PUSH
53294: LD_VAR 0 3
53298: PPUSH
53299: LD_VAR 0 4
53303: PPUSH
53304: CALL_OW 488
53308: NOT
53309: OR
53310: IFFALSE 53314
// exit ;
53312: GO 54050
// side := GetSide ( depot ) ;
53314: LD_ADDR_VAR 0 9
53318: PUSH
53319: LD_VAR 0 1
53323: PPUSH
53324: CALL_OW 255
53328: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
53329: LD_VAR 0 9
53333: PPUSH
53334: LD_VAR 0 2
53338: PPUSH
53339: CALL 52807 0 2
53343: NOT
53344: IFFALSE 53348
// exit ;
53346: GO 54050
// pom := GetBase ( depot ) ;
53348: LD_ADDR_VAR 0 10
53352: PUSH
53353: LD_VAR 0 1
53357: PPUSH
53358: CALL_OW 274
53362: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
53363: LD_ADDR_VAR 0 11
53367: PUSH
53368: LD_VAR 0 2
53372: PPUSH
53373: LD_VAR 0 1
53377: PPUSH
53378: CALL_OW 248
53382: PPUSH
53383: CALL_OW 450
53387: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
53388: LD_VAR 0 10
53392: PPUSH
53393: LD_INT 1
53395: PPUSH
53396: CALL_OW 275
53400: PUSH
53401: LD_VAR 0 11
53405: PUSH
53406: LD_INT 1
53408: ARRAY
53409: GREATEREQUAL
53410: PUSH
53411: LD_VAR 0 10
53415: PPUSH
53416: LD_INT 2
53418: PPUSH
53419: CALL_OW 275
53423: PUSH
53424: LD_VAR 0 11
53428: PUSH
53429: LD_INT 2
53431: ARRAY
53432: GREATEREQUAL
53433: AND
53434: PUSH
53435: LD_VAR 0 10
53439: PPUSH
53440: LD_INT 3
53442: PPUSH
53443: CALL_OW 275
53447: PUSH
53448: LD_VAR 0 11
53452: PUSH
53453: LD_INT 3
53455: ARRAY
53456: GREATEREQUAL
53457: AND
53458: NOT
53459: IFFALSE 53463
// exit ;
53461: GO 54050
// if GetBType ( depot ) = b_depot then
53463: LD_VAR 0 1
53467: PPUSH
53468: CALL_OW 266
53472: PUSH
53473: LD_INT 0
53475: EQUAL
53476: IFFALSE 53488
// dist := 28 else
53478: LD_ADDR_VAR 0 14
53482: PUSH
53483: LD_INT 28
53485: ST_TO_ADDR
53486: GO 53496
// dist := 36 ;
53488: LD_ADDR_VAR 0 14
53492: PUSH
53493: LD_INT 36
53495: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
53496: LD_VAR 0 1
53500: PPUSH
53501: LD_VAR 0 3
53505: PPUSH
53506: LD_VAR 0 4
53510: PPUSH
53511: CALL_OW 297
53515: PUSH
53516: LD_VAR 0 14
53520: GREATER
53521: IFFALSE 53525
// exit ;
53523: GO 54050
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
53525: LD_ADDR_VAR 0 12
53529: PUSH
53530: LD_VAR 0 2
53534: PPUSH
53535: LD_VAR 0 3
53539: PPUSH
53540: LD_VAR 0 4
53544: PPUSH
53545: LD_VAR 0 5
53549: PPUSH
53550: LD_VAR 0 1
53554: PPUSH
53555: CALL_OW 248
53559: PPUSH
53560: LD_INT 0
53562: PPUSH
53563: CALL 54055 0 6
53567: ST_TO_ADDR
// if not hexes then
53568: LD_VAR 0 12
53572: NOT
53573: IFFALSE 53577
// exit ;
53575: GO 54050
// hex := GetHexInfo ( x , y ) ;
53577: LD_ADDR_VAR 0 15
53581: PUSH
53582: LD_VAR 0 3
53586: PPUSH
53587: LD_VAR 0 4
53591: PPUSH
53592: CALL_OW 546
53596: ST_TO_ADDR
// if hex [ 1 ] then
53597: LD_VAR 0 15
53601: PUSH
53602: LD_INT 1
53604: ARRAY
53605: IFFALSE 53609
// exit ;
53607: GO 54050
// height := hex [ 2 ] ;
53609: LD_ADDR_VAR 0 13
53613: PUSH
53614: LD_VAR 0 15
53618: PUSH
53619: LD_INT 2
53621: ARRAY
53622: ST_TO_ADDR
// for i = 1 to hexes do
53623: LD_ADDR_VAR 0 7
53627: PUSH
53628: DOUBLE
53629: LD_INT 1
53631: DEC
53632: ST_TO_ADDR
53633: LD_VAR 0 12
53637: PUSH
53638: FOR_TO
53639: IFFALSE 53969
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
53641: LD_VAR 0 12
53645: PUSH
53646: LD_VAR 0 7
53650: ARRAY
53651: PUSH
53652: LD_INT 1
53654: ARRAY
53655: PPUSH
53656: LD_VAR 0 12
53660: PUSH
53661: LD_VAR 0 7
53665: ARRAY
53666: PUSH
53667: LD_INT 2
53669: ARRAY
53670: PPUSH
53671: CALL_OW 488
53675: NOT
53676: PUSH
53677: LD_VAR 0 12
53681: PUSH
53682: LD_VAR 0 7
53686: ARRAY
53687: PUSH
53688: LD_INT 1
53690: ARRAY
53691: PPUSH
53692: LD_VAR 0 12
53696: PUSH
53697: LD_VAR 0 7
53701: ARRAY
53702: PUSH
53703: LD_INT 2
53705: ARRAY
53706: PPUSH
53707: CALL_OW 428
53711: PUSH
53712: LD_INT 0
53714: GREATER
53715: OR
53716: PUSH
53717: LD_VAR 0 12
53721: PUSH
53722: LD_VAR 0 7
53726: ARRAY
53727: PUSH
53728: LD_INT 1
53730: ARRAY
53731: PPUSH
53732: LD_VAR 0 12
53736: PUSH
53737: LD_VAR 0 7
53741: ARRAY
53742: PUSH
53743: LD_INT 2
53745: ARRAY
53746: PPUSH
53747: CALL_OW 351
53751: OR
53752: IFFALSE 53758
// exit ;
53754: POP
53755: POP
53756: GO 54050
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53758: LD_ADDR_VAR 0 8
53762: PUSH
53763: LD_VAR 0 12
53767: PUSH
53768: LD_VAR 0 7
53772: ARRAY
53773: PUSH
53774: LD_INT 1
53776: ARRAY
53777: PPUSH
53778: LD_VAR 0 12
53782: PUSH
53783: LD_VAR 0 7
53787: ARRAY
53788: PUSH
53789: LD_INT 2
53791: ARRAY
53792: PPUSH
53793: CALL_OW 546
53797: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
53798: LD_VAR 0 8
53802: PUSH
53803: LD_INT 1
53805: ARRAY
53806: PUSH
53807: LD_VAR 0 8
53811: PUSH
53812: LD_INT 2
53814: ARRAY
53815: PUSH
53816: LD_VAR 0 13
53820: PUSH
53821: LD_INT 2
53823: PLUS
53824: GREATER
53825: OR
53826: PUSH
53827: LD_VAR 0 8
53831: PUSH
53832: LD_INT 2
53834: ARRAY
53835: PUSH
53836: LD_VAR 0 13
53840: PUSH
53841: LD_INT 2
53843: MINUS
53844: LESS
53845: OR
53846: PUSH
53847: LD_VAR 0 8
53851: PUSH
53852: LD_INT 3
53854: ARRAY
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: LD_INT 8
53861: PUSH
53862: LD_INT 9
53864: PUSH
53865: LD_INT 10
53867: PUSH
53868: LD_INT 11
53870: PUSH
53871: LD_INT 12
53873: PUSH
53874: LD_INT 13
53876: PUSH
53877: LD_INT 16
53879: PUSH
53880: LD_INT 17
53882: PUSH
53883: LD_INT 18
53885: PUSH
53886: LD_INT 19
53888: PUSH
53889: LD_INT 20
53891: PUSH
53892: LD_INT 21
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: LIST
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: IN
53910: NOT
53911: OR
53912: PUSH
53913: LD_VAR 0 8
53917: PUSH
53918: LD_INT 5
53920: ARRAY
53921: NOT
53922: OR
53923: PUSH
53924: LD_VAR 0 8
53928: PUSH
53929: LD_INT 6
53931: ARRAY
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: LD_INT 2
53938: PUSH
53939: LD_INT 7
53941: PUSH
53942: LD_INT 9
53944: PUSH
53945: LD_INT 10
53947: PUSH
53948: LD_INT 11
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: IN
53959: NOT
53960: OR
53961: IFFALSE 53967
// exit ;
53963: POP
53964: POP
53965: GO 54050
// end ;
53967: GO 53638
53969: POP
53970: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53971: LD_VAR 0 9
53975: PPUSH
53976: LD_VAR 0 3
53980: PPUSH
53981: LD_VAR 0 4
53985: PPUSH
53986: LD_INT 20
53988: PPUSH
53989: CALL 45973 0 4
53993: PUSH
53994: LD_INT 4
53996: ARRAY
53997: IFFALSE 54001
// exit ;
53999: GO 54050
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
54001: LD_VAR 0 2
54005: PUSH
54006: LD_INT 29
54008: PUSH
54009: LD_INT 30
54011: PUSH
54012: EMPTY
54013: LIST
54014: LIST
54015: IN
54016: PUSH
54017: LD_VAR 0 3
54021: PPUSH
54022: LD_VAR 0 4
54026: PPUSH
54027: LD_VAR 0 9
54031: PPUSH
54032: CALL_OW 440
54036: NOT
54037: AND
54038: IFFALSE 54042
// exit ;
54040: GO 54050
// result := true ;
54042: LD_ADDR_VAR 0 6
54046: PUSH
54047: LD_INT 1
54049: ST_TO_ADDR
// end ;
54050: LD_VAR 0 6
54054: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
54055: LD_INT 0
54057: PPUSH
54058: PPUSH
54059: PPUSH
54060: PPUSH
54061: PPUSH
54062: PPUSH
54063: PPUSH
54064: PPUSH
54065: PPUSH
54066: PPUSH
54067: PPUSH
54068: PPUSH
54069: PPUSH
54070: PPUSH
54071: PPUSH
54072: PPUSH
54073: PPUSH
54074: PPUSH
54075: PPUSH
54076: PPUSH
54077: PPUSH
54078: PPUSH
54079: PPUSH
54080: PPUSH
54081: PPUSH
54082: PPUSH
54083: PPUSH
54084: PPUSH
54085: PPUSH
54086: PPUSH
54087: PPUSH
54088: PPUSH
54089: PPUSH
54090: PPUSH
54091: PPUSH
54092: PPUSH
54093: PPUSH
54094: PPUSH
54095: PPUSH
54096: PPUSH
54097: PPUSH
54098: PPUSH
54099: PPUSH
54100: PPUSH
54101: PPUSH
54102: PPUSH
54103: PPUSH
54104: PPUSH
54105: PPUSH
54106: PPUSH
54107: PPUSH
54108: PPUSH
54109: PPUSH
54110: PPUSH
54111: PPUSH
54112: PPUSH
54113: PPUSH
54114: PPUSH
// result = [ ] ;
54115: LD_ADDR_VAR 0 7
54119: PUSH
54120: EMPTY
54121: ST_TO_ADDR
// temp_list = [ ] ;
54122: LD_ADDR_VAR 0 9
54126: PUSH
54127: EMPTY
54128: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
54129: LD_VAR 0 4
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: LD_INT 3
54145: PUSH
54146: LD_INT 4
54148: PUSH
54149: LD_INT 5
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: IN
54160: NOT
54161: PUSH
54162: LD_VAR 0 1
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 1
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: IN
54177: PUSH
54178: LD_VAR 0 5
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 3
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: LIST
54196: IN
54197: NOT
54198: AND
54199: OR
54200: IFFALSE 54204
// exit ;
54202: GO 72595
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
54204: LD_VAR 0 1
54208: PUSH
54209: LD_INT 6
54211: PUSH
54212: LD_INT 7
54214: PUSH
54215: LD_INT 8
54217: PUSH
54218: LD_INT 13
54220: PUSH
54221: LD_INT 12
54223: PUSH
54224: LD_INT 15
54226: PUSH
54227: LD_INT 11
54229: PUSH
54230: LD_INT 14
54232: PUSH
54233: LD_INT 10
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: IN
54247: IFFALSE 54257
// btype = b_lab ;
54249: LD_ADDR_VAR 0 1
54253: PUSH
54254: LD_INT 6
54256: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
54257: LD_VAR 0 6
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 2
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: LIST
54275: IN
54276: NOT
54277: PUSH
54278: LD_VAR 0 1
54282: PUSH
54283: LD_INT 0
54285: PUSH
54286: LD_INT 1
54288: PUSH
54289: LD_INT 2
54291: PUSH
54292: LD_INT 3
54294: PUSH
54295: LD_INT 6
54297: PUSH
54298: LD_INT 36
54300: PUSH
54301: LD_INT 4
54303: PUSH
54304: LD_INT 5
54306: PUSH
54307: LD_INT 31
54309: PUSH
54310: LD_INT 32
54312: PUSH
54313: LD_INT 33
54315: PUSH
54316: EMPTY
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: IN
54329: NOT
54330: PUSH
54331: LD_VAR 0 6
54335: PUSH
54336: LD_INT 1
54338: EQUAL
54339: AND
54340: OR
54341: PUSH
54342: LD_VAR 0 1
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: LD_INT 3
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: IN
54357: NOT
54358: PUSH
54359: LD_VAR 0 6
54363: PUSH
54364: LD_INT 2
54366: EQUAL
54367: AND
54368: OR
54369: IFFALSE 54379
// mode = 0 ;
54371: LD_ADDR_VAR 0 6
54375: PUSH
54376: LD_INT 0
54378: ST_TO_ADDR
// case mode of 0 :
54379: LD_VAR 0 6
54383: PUSH
54384: LD_INT 0
54386: DOUBLE
54387: EQUAL
54388: IFTRUE 54392
54390: GO 65845
54392: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54393: LD_ADDR_VAR 0 11
54397: PUSH
54398: LD_INT 0
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 1
54413: NEG
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: PUSH
54429: LD_INT 1
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 0
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 1
54451: NEG
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: NEG
54475: PUSH
54476: LD_INT 2
54478: NEG
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 0
54486: PUSH
54487: LD_INT 2
54489: NEG
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: LD_INT 1
54500: NEG
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: LD_INT 3
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 3
54552: PUSH
54553: EMPTY
54554: LIST
54555: LIST
54556: PUSH
54557: LD_INT 1
54559: NEG
54560: PUSH
54561: LD_INT 2
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54586: LD_ADDR_VAR 0 12
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: LD_INT 0
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: LD_INT 1
54606: NEG
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: LD_INT 0
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: LD_INT 1
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 0
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: LD_INT 1
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: NEG
54699: PUSH
54700: LD_INT 1
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 2
54709: NEG
54710: PUSH
54711: LD_INT 0
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 2
54720: NEG
54721: PUSH
54722: LD_INT 1
54724: NEG
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 3
54743: NEG
54744: PUSH
54745: LD_INT 0
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 3
54754: NEG
54755: PUSH
54756: LD_INT 1
54758: NEG
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54782: LD_ADDR_VAR 0 13
54786: PUSH
54787: LD_INT 0
54789: PUSH
54790: LD_INT 0
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: LD_INT 1
54802: NEG
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 1
54810: PUSH
54811: LD_INT 0
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: LD_INT 1
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: LD_INT 1
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: NEG
54841: PUSH
54842: LD_INT 0
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 1
54863: NEG
54864: PUSH
54865: LD_INT 2
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: PUSH
54876: LD_INT 1
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: LD_INT 2
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 2
54905: NEG
54906: PUSH
54907: LD_INT 1
54909: NEG
54910: PUSH
54911: EMPTY
54912: LIST
54913: LIST
54914: PUSH
54915: LD_INT 2
54917: NEG
54918: PUSH
54919: LD_INT 2
54921: NEG
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: LD_INT 3
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 3
54941: NEG
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 3
54953: NEG
54954: PUSH
54955: LD_INT 3
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54981: LD_ADDR_VAR 0 14
54985: PUSH
54986: LD_INT 0
54988: PUSH
54989: LD_INT 0
54991: PUSH
54992: EMPTY
54993: LIST
54994: LIST
54995: PUSH
54996: LD_INT 0
54998: PUSH
54999: LD_INT 1
55001: NEG
55002: PUSH
55003: EMPTY
55004: LIST
55005: LIST
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: LD_INT 1
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: NEG
55040: PUSH
55041: LD_INT 0
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: NEG
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: EMPTY
55069: LIST
55070: LIST
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 1
55096: PUSH
55097: LD_INT 2
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 0
55106: PUSH
55107: LD_INT 2
55109: PUSH
55110: EMPTY
55111: LIST
55112: LIST
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: NEG
55128: PUSH
55129: LD_INT 3
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: LD_INT 3
55142: NEG
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 2
55153: NEG
55154: PUSH
55155: EMPTY
55156: LIST
55157: LIST
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55177: LD_ADDR_VAR 0 15
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 0
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 0
55194: PUSH
55195: LD_INT 1
55197: NEG
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: PUSH
55206: LD_INT 0
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 1
55215: PUSH
55216: LD_INT 1
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 0
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 1
55235: NEG
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 1
55258: PUSH
55259: LD_INT 1
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 2
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: NEG
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: EMPTY
55306: LIST
55307: LIST
55308: PUSH
55309: LD_INT 2
55311: NEG
55312: PUSH
55313: LD_INT 1
55315: NEG
55316: PUSH
55317: EMPTY
55318: LIST
55319: LIST
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: LD_INT 1
55326: NEG
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: PUSH
55332: LD_INT 3
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: PUSH
55342: LD_INT 3
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55370: LD_ADDR_VAR 0 16
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 0
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: EMPTY
55393: LIST
55394: LIST
55395: PUSH
55396: LD_INT 1
55398: PUSH
55399: LD_INT 0
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 1
55408: PUSH
55409: LD_INT 1
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 0
55418: PUSH
55419: LD_INT 1
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: NEG
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 1
55439: NEG
55440: PUSH
55441: LD_INT 1
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 1
55451: NEG
55452: PUSH
55453: LD_INT 2
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 2
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 2
55473: PUSH
55474: LD_INT 2
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 2
55493: NEG
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 2
55505: NEG
55506: PUSH
55507: LD_INT 2
55509: NEG
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 3
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 3
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55563: LD_ADDR_VAR 0 17
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 2
55698: PUSH
55699: LD_INT 2
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: LD_INT 2
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 2
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 1
55728: NEG
55729: PUSH
55730: LD_INT 1
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: PUSH
55737: LD_INT 2
55739: NEG
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 2
55750: NEG
55751: PUSH
55752: LD_INT 1
55754: NEG
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 2
55762: NEG
55763: PUSH
55764: LD_INT 2
55766: NEG
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: LIST
55776: LIST
55777: LIST
55778: LIST
55779: LIST
55780: LIST
55781: LIST
55782: LIST
55783: LIST
55784: LIST
55785: LIST
55786: LIST
55787: LIST
55788: LIST
55789: LIST
55790: LIST
55791: LIST
55792: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55793: LD_ADDR_VAR 0 18
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: LD_INT 0
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 0
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: PUSH
55822: LD_INT 0
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: LD_INT 1
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: LD_INT 0
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 1
55862: NEG
55863: PUSH
55864: LD_INT 1
55866: NEG
55867: PUSH
55868: EMPTY
55869: LIST
55870: LIST
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: LD_INT 2
55878: NEG
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: LD_INT 2
55889: NEG
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: LD_INT 1
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 2
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 1
55958: NEG
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 2
55969: NEG
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: NEG
55981: PUSH
55982: LD_INT 1
55984: NEG
55985: PUSH
55986: EMPTY
55987: LIST
55988: LIST
55989: PUSH
55990: LD_INT 2
55992: NEG
55993: PUSH
55994: LD_INT 2
55996: NEG
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56023: LD_ADDR_VAR 0 19
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: PUSH
56052: LD_INT 0
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: LD_INT 1
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 1
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 1
56104: NEG
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: LD_INT 2
56119: NEG
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 2
56138: PUSH
56139: LD_INT 0
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 2
56148: PUSH
56149: LD_INT 1
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: LD_INT 2
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: LD_INT 2
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 2
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 1
56188: NEG
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: LD_INT 2
56226: NEG
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56253: LD_ADDR_VAR 0 20
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: LD_INT 1
56273: NEG
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 1
56281: PUSH
56282: LD_INT 0
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 1
56291: PUSH
56292: LD_INT 1
56294: PUSH
56295: EMPTY
56296: LIST
56297: LIST
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: LD_INT 1
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: LD_INT 0
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: PUSH
56320: LD_INT 1
56322: NEG
56323: PUSH
56324: LD_INT 1
56326: NEG
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: NEG
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: LD_INT 2
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: PUSH
56358: LD_INT 1
56360: NEG
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 2
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 2
56378: PUSH
56379: LD_INT 1
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: PUSH
56386: LD_INT 2
56388: PUSH
56389: LD_INT 2
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: LD_INT 2
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 0
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 1
56418: NEG
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: LD_INT 0
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: NEG
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: LIST
56475: LIST
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56483: LD_ADDR_VAR 0 21
56487: PUSH
56488: LD_INT 0
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 1
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: PUSH
56512: LD_INT 0
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: LD_INT 1
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: NEG
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 0
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: LD_INT 1
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: LD_INT 0
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PUSH
56606: LD_INT 2
56608: PUSH
56609: LD_INT 1
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 2
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 1
56628: PUSH
56629: LD_INT 2
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: LD_INT 2
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: LD_INT 1
56652: PUSH
56653: EMPTY
56654: LIST
56655: LIST
56656: PUSH
56657: LD_INT 2
56659: NEG
56660: PUSH
56661: LD_INT 0
56663: PUSH
56664: EMPTY
56665: LIST
56666: LIST
56667: PUSH
56668: LD_INT 2
56670: NEG
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 2
56682: NEG
56683: PUSH
56684: LD_INT 2
56686: NEG
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56713: LD_ADDR_VAR 0 22
56717: PUSH
56718: LD_INT 0
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 0
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: PUSH
56749: LD_INT 1
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: EMPTY
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 0
56761: PUSH
56762: LD_INT 1
56764: PUSH
56765: EMPTY
56766: LIST
56767: LIST
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: LD_INT 0
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: NEG
56795: PUSH
56796: LD_INT 2
56798: NEG
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 0
56806: PUSH
56807: LD_INT 2
56809: NEG
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: PUSH
56818: LD_INT 1
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 2
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 2
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: LD_INT 2
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 0
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: LD_INT 1
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 2
56889: NEG
56890: PUSH
56891: LD_INT 0
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 2
56900: NEG
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: NEG
56913: PUSH
56914: LD_INT 2
56916: NEG
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56943: LD_ADDR_VAR 0 23
56947: PUSH
56948: LD_INT 0
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 1
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: LD_INT 0
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: PUSH
56979: LD_INT 1
56981: PUSH
56982: LD_INT 1
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 0
56991: PUSH
56992: LD_INT 1
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 1
57001: NEG
57002: PUSH
57003: LD_INT 0
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: LD_INT 1
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 2
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 0
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 1
57047: PUSH
57048: LD_INT 1
57050: NEG
57051: PUSH
57052: EMPTY
57053: LIST
57054: LIST
57055: PUSH
57056: LD_INT 2
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 2
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 2
57078: PUSH
57079: LD_INT 2
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: PUSH
57089: LD_INT 2
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 0
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PUSH
57117: LD_INT 2
57119: NEG
57120: PUSH
57121: LD_INT 0
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 2
57130: NEG
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 2
57142: NEG
57143: PUSH
57144: LD_INT 2
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 2
57154: NEG
57155: PUSH
57156: LD_INT 3
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 3
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 2
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
57223: LD_ADDR_VAR 0 24
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 1
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 1
57251: PUSH
57252: LD_INT 0
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 1
57261: PUSH
57262: LD_INT 1
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 0
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 1
57281: NEG
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 1
57304: NEG
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 0
57316: PUSH
57317: LD_INT 2
57319: NEG
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 1
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: PUSH
57336: LD_INT 2
57338: PUSH
57339: LD_INT 0
57341: PUSH
57342: EMPTY
57343: LIST
57344: LIST
57345: PUSH
57346: LD_INT 2
57348: PUSH
57349: LD_INT 1
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 2
57358: PUSH
57359: LD_INT 2
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: LD_INT 2
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 0
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: LD_INT 1
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 2
57399: NEG
57400: PUSH
57401: LD_INT 0
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 2
57410: NEG
57411: PUSH
57412: LD_INT 1
57414: NEG
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 2
57422: NEG
57423: PUSH
57424: LD_INT 2
57426: NEG
57427: PUSH
57428: EMPTY
57429: LIST
57430: LIST
57431: PUSH
57432: LD_INT 1
57434: PUSH
57435: LD_INT 2
57437: NEG
57438: PUSH
57439: EMPTY
57440: LIST
57441: LIST
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: LD_INT 1
57448: NEG
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: PUSH
57454: LD_INT 3
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 3
57466: PUSH
57467: LD_INT 2
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
57499: LD_ADDR_VAR 0 25
57503: PUSH
57504: LD_INT 0
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 0
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: PUSH
57528: LD_INT 0
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: PUSH
57535: LD_INT 1
57537: PUSH
57538: LD_INT 1
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 0
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 1
57557: NEG
57558: PUSH
57559: LD_INT 0
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: LD_INT 1
57572: NEG
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: PUSH
57578: LD_INT 1
57580: NEG
57581: PUSH
57582: LD_INT 2
57584: NEG
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 0
57592: PUSH
57593: LD_INT 2
57595: NEG
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: PUSH
57604: LD_INT 1
57606: NEG
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 2
57614: PUSH
57615: LD_INT 0
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 2
57624: PUSH
57625: LD_INT 1
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: PUSH
57635: LD_INT 2
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 0
57654: PUSH
57655: LD_INT 2
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 2
57675: NEG
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 2
57686: NEG
57687: PUSH
57688: LD_INT 1
57690: NEG
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: LD_INT 2
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 3
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 3
57720: PUSH
57721: LD_INT 2
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: LD_INT 2
57730: PUSH
57731: LD_INT 3
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 1
57740: PUSH
57741: LD_INT 3
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57773: LD_ADDR_VAR 0 26
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 1
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 0
57821: PUSH
57822: LD_INT 1
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: PUSH
57829: LD_INT 1
57831: NEG
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: NEG
57843: PUSH
57844: LD_INT 1
57846: NEG
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 1
57854: NEG
57855: PUSH
57856: LD_INT 2
57858: NEG
57859: PUSH
57860: EMPTY
57861: LIST
57862: LIST
57863: PUSH
57864: LD_INT 0
57866: PUSH
57867: LD_INT 2
57869: NEG
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 1
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 2
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 2
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 2
57908: PUSH
57909: LD_INT 2
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: LD_INT 2
57921: PUSH
57922: EMPTY
57923: LIST
57924: LIST
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 1
57938: NEG
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 2
57949: NEG
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 2
57972: NEG
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 2
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: LD_INT 3
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PUSH
58006: LD_INT 2
58008: PUSH
58009: EMPTY
58010: LIST
58011: LIST
58012: PUSH
58013: LD_INT 2
58015: NEG
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58049: LD_ADDR_VAR 0 27
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: LD_INT 1
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 0
58080: PUSH
58081: EMPTY
58082: LIST
58083: LIST
58084: PUSH
58085: LD_INT 1
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 0
58097: PUSH
58098: LD_INT 1
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: LD_INT 0
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: LD_INT 1
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: NEG
58131: PUSH
58132: LD_INT 2
58134: NEG
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 0
58142: PUSH
58143: LD_INT 2
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 2
58164: PUSH
58165: LD_INT 0
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 2
58174: PUSH
58175: LD_INT 1
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: LD_INT 2
58184: PUSH
58185: LD_INT 2
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: LD_INT 1
58194: PUSH
58195: LD_INT 2
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: LD_INT 2
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 1
58214: NEG
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 2
58225: NEG
58226: PUSH
58227: LD_INT 0
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: NEG
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: LD_INT 2
58252: NEG
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: LD_INT 2
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 2
58271: NEG
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: EMPTY
58277: LIST
58278: LIST
58279: PUSH
58280: LD_INT 3
58282: NEG
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 3
58294: NEG
58295: PUSH
58296: LD_INT 2
58298: NEG
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58329: LD_ADDR_VAR 0 28
58333: PUSH
58334: LD_INT 0
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 0
58346: PUSH
58347: LD_INT 1
58349: NEG
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 0
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: NEG
58388: PUSH
58389: LD_INT 0
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 1
58398: NEG
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: LD_INT 2
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 0
58422: PUSH
58423: LD_INT 2
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: PUSH
58434: LD_INT 1
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 2
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: PUSH
58452: LD_INT 2
58454: PUSH
58455: LD_INT 1
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 2
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: EMPTY
58469: LIST
58470: LIST
58471: PUSH
58472: LD_INT 1
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 0
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: EMPTY
58489: LIST
58490: LIST
58491: PUSH
58492: LD_INT 1
58494: NEG
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 2
58516: NEG
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: LD_INT 2
58532: NEG
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 2
58540: NEG
58541: PUSH
58542: LD_INT 3
58544: NEG
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 1
58552: NEG
58553: PUSH
58554: LD_INT 3
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 3
58564: NEG
58565: PUSH
58566: LD_INT 1
58568: NEG
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 3
58576: NEG
58577: PUSH
58578: LD_INT 2
58580: NEG
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58611: LD_ADDR_VAR 0 29
58615: PUSH
58616: LD_INT 0
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 0
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: PUSH
58650: LD_INT 1
58652: PUSH
58653: EMPTY
58654: LIST
58655: LIST
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: NEG
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: LD_INT 1
58684: NEG
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: LD_INT 2
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 0
58704: PUSH
58705: LD_INT 2
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 1
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: LD_INT 0
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 2
58736: PUSH
58737: LD_INT 1
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 0
58756: PUSH
58757: LD_INT 2
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: LD_INT 1
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 2
58777: NEG
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: LD_INT 2
58789: NEG
58790: PUSH
58791: LD_INT 2
58793: NEG
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 2
58801: NEG
58802: PUSH
58803: LD_INT 3
58805: NEG
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: PUSH
58811: LD_INT 2
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: LD_INT 3
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 1
58844: NEG
58845: PUSH
58846: LD_INT 2
58848: PUSH
58849: EMPTY
58850: LIST
58851: LIST
58852: PUSH
58853: LD_INT 3
58855: NEG
58856: PUSH
58857: LD_INT 2
58859: NEG
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58890: LD_ADDR_VAR 0 30
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: LD_INT 0
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 0
58907: PUSH
58908: LD_INT 1
58910: NEG
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: LD_INT 0
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 0
58938: PUSH
58939: LD_INT 1
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: LD_INT 0
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: LD_INT 1
58963: NEG
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: LD_INT 2
58975: NEG
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PUSH
58981: LD_INT 0
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 2
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 1
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: LD_INT 3
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: PUSH
59092: LD_INT 2
59094: NEG
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: LD_INT 3
59102: PUSH
59103: LD_INT 2
59105: PUSH
59106: EMPTY
59107: LIST
59108: LIST
59109: PUSH
59110: LD_INT 2
59112: PUSH
59113: LD_INT 3
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 2
59122: NEG
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PUSH
59131: LD_INT 3
59133: NEG
59134: PUSH
59135: LD_INT 1
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59168: LD_ADDR_VAR 0 31
59172: PUSH
59173: LD_INT 0
59175: PUSH
59176: LD_INT 0
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: LD_INT 0
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: PUSH
59207: LD_INT 1
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 1
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 1
59226: NEG
59227: PUSH
59228: LD_INT 0
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 1
59237: NEG
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 1
59249: NEG
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: LD_INT 1
59261: PUSH
59262: LD_INT 1
59264: NEG
59265: PUSH
59266: EMPTY
59267: LIST
59268: LIST
59269: PUSH
59270: LD_INT 2
59272: PUSH
59273: LD_INT 0
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: LD_INT 2
59282: PUSH
59283: LD_INT 1
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: PUSH
59290: LD_INT 2
59292: PUSH
59293: LD_INT 2
59295: PUSH
59296: EMPTY
59297: LIST
59298: LIST
59299: PUSH
59300: LD_INT 1
59302: PUSH
59303: LD_INT 2
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: LD_INT 2
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: LD_INT 1
59326: PUSH
59327: EMPTY
59328: LIST
59329: LIST
59330: PUSH
59331: LD_INT 2
59333: NEG
59334: PUSH
59335: LD_INT 1
59337: NEG
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: LD_INT 2
59349: NEG
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 2
59357: NEG
59358: PUSH
59359: LD_INT 3
59361: NEG
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 2
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: LD_INT 3
59380: PUSH
59381: LD_INT 1
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: LD_INT 3
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 1
59400: NEG
59401: PUSH
59402: LD_INT 2
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 3
59411: NEG
59412: PUSH
59413: LD_INT 2
59415: NEG
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: LIST
59432: LIST
59433: LIST
59434: LIST
59435: LIST
59436: LIST
59437: LIST
59438: LIST
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59446: LD_ADDR_VAR 0 32
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: LD_INT 0
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: LD_INT 1
59466: NEG
59467: PUSH
59468: EMPTY
59469: LIST
59470: LIST
59471: PUSH
59472: LD_INT 1
59474: PUSH
59475: LD_INT 0
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: PUSH
59485: LD_INT 1
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: LD_INT 1
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 1
59504: NEG
59505: PUSH
59506: LD_INT 0
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 1
59515: NEG
59516: PUSH
59517: LD_INT 1
59519: NEG
59520: PUSH
59521: EMPTY
59522: LIST
59523: LIST
59524: PUSH
59525: LD_INT 1
59527: NEG
59528: PUSH
59529: LD_INT 2
59531: NEG
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 0
59539: PUSH
59540: LD_INT 2
59542: NEG
59543: PUSH
59544: EMPTY
59545: LIST
59546: LIST
59547: PUSH
59548: LD_INT 1
59550: PUSH
59551: LD_INT 1
59553: NEG
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 2
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 2
59571: PUSH
59572: LD_INT 2
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 1
59581: PUSH
59582: LD_INT 2
59584: PUSH
59585: EMPTY
59586: LIST
59587: LIST
59588: PUSH
59589: LD_INT 0
59591: PUSH
59592: LD_INT 2
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 1
59601: NEG
59602: PUSH
59603: LD_INT 1
59605: PUSH
59606: EMPTY
59607: LIST
59608: LIST
59609: PUSH
59610: LD_INT 2
59612: NEG
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: EMPTY
59618: LIST
59619: LIST
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: LD_INT 1
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 1
59635: NEG
59636: PUSH
59637: LD_INT 3
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 1
59647: PUSH
59648: LD_INT 2
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 3
59658: PUSH
59659: LD_INT 2
59661: PUSH
59662: EMPTY
59663: LIST
59664: LIST
59665: PUSH
59666: LD_INT 2
59668: PUSH
59669: LD_INT 3
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 2
59678: NEG
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 3
59689: NEG
59690: PUSH
59691: LD_INT 1
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59724: LD_ADDR_VAR 0 33
59728: PUSH
59729: LD_INT 0
59731: PUSH
59732: LD_INT 0
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: LD_INT 0
59741: PUSH
59742: LD_INT 1
59744: NEG
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: PUSH
59780: LD_INT 1
59782: NEG
59783: PUSH
59784: LD_INT 0
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 1
59793: NEG
59794: PUSH
59795: LD_INT 1
59797: NEG
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: NEG
59806: PUSH
59807: LD_INT 2
59809: NEG
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: PUSH
59829: LD_INT 0
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 2
59838: PUSH
59839: LD_INT 1
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: PUSH
59849: LD_INT 2
59851: PUSH
59852: EMPTY
59853: LIST
59854: LIST
59855: PUSH
59856: LD_INT 0
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 1
59868: NEG
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 2
59879: NEG
59880: PUSH
59881: LD_INT 0
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 2
59890: NEG
59891: PUSH
59892: LD_INT 1
59894: NEG
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: NEG
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: LD_INT 3
59918: NEG
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 2
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 3
59937: PUSH
59938: LD_INT 1
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: LD_INT 1
59947: PUSH
59948: LD_INT 3
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 1
59957: NEG
59958: PUSH
59959: LD_INT 2
59961: PUSH
59962: EMPTY
59963: LIST
59964: LIST
59965: PUSH
59966: LD_INT 3
59968: NEG
59969: PUSH
59970: LD_INT 2
59972: NEG
59973: PUSH
59974: EMPTY
59975: LIST
59976: LIST
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60003: LD_ADDR_VAR 0 34
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 0
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: PUSH
60039: LD_INT 1
60041: PUSH
60042: LD_INT 1
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 0
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: EMPTY
60056: LIST
60057: LIST
60058: PUSH
60059: LD_INT 1
60061: NEG
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 1
60072: NEG
60073: PUSH
60074: LD_INT 1
60076: NEG
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: LD_INT 2
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: LD_INT 2
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 1
60107: PUSH
60108: LD_INT 1
60110: NEG
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 2
60118: PUSH
60119: LD_INT 1
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 2
60128: PUSH
60129: LD_INT 2
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 1
60138: PUSH
60139: LD_INT 2
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: LD_INT 1
60148: NEG
60149: PUSH
60150: LD_INT 1
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: LD_INT 0
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 2
60170: NEG
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: LD_INT 2
60186: NEG
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 1
60194: NEG
60195: PUSH
60196: LD_INT 3
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: LD_INT 2
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: LD_INT 3
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 3
60248: NEG
60249: PUSH
60250: LD_INT 1
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: LIST
60262: LIST
60263: LIST
60264: LIST
60265: LIST
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: LIST
60273: LIST
60274: LIST
60275: LIST
60276: LIST
60277: LIST
60278: LIST
60279: LIST
60280: LIST
60281: LIST
60282: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60283: LD_ADDR_VAR 0 35
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: LD_INT 0
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 0
60300: PUSH
60301: LD_INT 1
60303: NEG
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 1
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 1
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 1
60341: NEG
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: NEG
60353: PUSH
60354: LD_INT 1
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: LD_INT 1
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: LD_INT 1
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: LIST
60394: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60395: LD_ADDR_VAR 0 36
60399: PUSH
60400: LD_INT 0
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 0
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 1
60433: PUSH
60434: LD_INT 1
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 0
60443: PUSH
60444: LD_INT 1
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: PUSH
60451: LD_INT 1
60453: NEG
60454: PUSH
60455: LD_INT 0
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: NEG
60465: PUSH
60466: LD_INT 1
60468: NEG
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: LD_INT 2
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: LD_INT 1
60488: PUSH
60489: LD_INT 2
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60507: LD_ADDR_VAR 0 37
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: LD_INT 0
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 0
60524: PUSH
60525: LD_INT 1
60527: NEG
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 1
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 1
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: LD_INT 0
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: LD_INT 1
60576: NEG
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: EMPTY
60583: LIST
60584: LIST
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: LD_INT 1
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: LD_INT 1
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
60619: LD_ADDR_VAR 0 38
60623: PUSH
60624: LD_INT 0
60626: PUSH
60627: LD_INT 0
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: LD_INT 1
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 1
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 1
60657: PUSH
60658: LD_INT 1
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 0
60667: PUSH
60668: LD_INT 1
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: NEG
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: LD_INT 1
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 2
60700: PUSH
60701: LD_INT 1
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 2
60710: NEG
60711: PUSH
60712: LD_INT 1
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
60731: LD_ADDR_VAR 0 39
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 0
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: LD_INT 1
60751: NEG
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 1
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 0
60779: PUSH
60780: LD_INT 1
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 1
60789: NEG
60790: PUSH
60791: LD_INT 0
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: PUSH
60798: LD_INT 1
60800: NEG
60801: PUSH
60802: LD_INT 1
60804: NEG
60805: PUSH
60806: EMPTY
60807: LIST
60808: LIST
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: LD_INT 2
60816: NEG
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: LD_INT 2
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: LIST
60836: LIST
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
60843: LD_ADDR_VAR 0 40
60847: PUSH
60848: LD_INT 0
60850: PUSH
60851: LD_INT 0
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 1
60871: PUSH
60872: LD_INT 0
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 1
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 1
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: PUSH
60899: LD_INT 1
60901: NEG
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: LD_INT 1
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 1
60924: PUSH
60925: LD_INT 1
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: LD_INT 1
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60955: LD_ADDR_VAR 0 41
60959: PUSH
60960: LD_INT 0
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 1
60975: NEG
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 1
60983: PUSH
60984: LD_INT 0
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 1
60993: PUSH
60994: LD_INT 1
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 0
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: LD_INT 0
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: LD_INT 1
61024: NEG
61025: PUSH
61026: LD_INT 1
61028: NEG
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 1
61036: NEG
61037: PUSH
61038: LD_INT 2
61040: NEG
61041: PUSH
61042: EMPTY
61043: LIST
61044: LIST
61045: PUSH
61046: LD_INT 1
61048: PUSH
61049: LD_INT 1
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 2
61059: PUSH
61060: LD_INT 0
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: PUSH
61070: LD_INT 1
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: PUSH
61077: LD_INT 2
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 1
61089: PUSH
61090: LD_INT 2
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 1
61099: NEG
61100: PUSH
61101: LD_INT 1
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 2
61110: NEG
61111: PUSH
61112: LD_INT 0
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: NEG
61122: PUSH
61123: LD_INT 1
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 2
61133: NEG
61134: PUSH
61135: LD_INT 2
61137: NEG
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 2
61145: NEG
61146: PUSH
61147: LD_INT 3
61149: NEG
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PUSH
61155: LD_INT 2
61157: PUSH
61158: LD_INT 1
61160: NEG
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: LD_INT 3
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: PUSH
61176: LD_INT 3
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 3
61188: PUSH
61189: LD_INT 2
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 3
61198: PUSH
61199: LD_INT 3
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 2
61208: PUSH
61209: LD_INT 3
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 2
61218: NEG
61219: PUSH
61220: LD_INT 1
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 3
61229: NEG
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: NEG
61241: PUSH
61242: LD_INT 1
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: NEG
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 3
61264: NEG
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: LIST
61290: LIST
61291: LIST
61292: LIST
61293: LIST
61294: LIST
61295: LIST
61296: LIST
61297: LIST
61298: LIST
61299: LIST
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61305: LD_ADDR_VAR 0 42
61309: PUSH
61310: LD_INT 0
61312: PUSH
61313: LD_INT 0
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 0
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 0
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 1
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 1
61386: NEG
61387: PUSH
61388: LD_INT 2
61390: NEG
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: LD_INT 2
61401: NEG
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: LD_INT 1
61412: NEG
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 2
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 2
61430: PUSH
61431: LD_INT 2
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 1
61440: PUSH
61441: LD_INT 2
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: LD_INT 2
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 1
61460: NEG
61461: PUSH
61462: LD_INT 1
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 2
61471: NEG
61472: PUSH
61473: LD_INT 1
61475: NEG
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 2
61483: NEG
61484: PUSH
61485: LD_INT 2
61487: NEG
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 2
61495: NEG
61496: PUSH
61497: LD_INT 3
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: NEG
61508: PUSH
61509: LD_INT 3
61511: NEG
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: LD_INT 3
61522: NEG
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: LD_INT 2
61533: NEG
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 3
61541: PUSH
61542: LD_INT 2
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: PUSH
61549: LD_INT 3
61551: PUSH
61552: LD_INT 3
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 2
61561: PUSH
61562: LD_INT 3
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: PUSH
61569: LD_INT 1
61571: PUSH
61572: LD_INT 3
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: LD_INT 3
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: PUSH
61589: LD_INT 1
61591: NEG
61592: PUSH
61593: LD_INT 2
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 3
61602: NEG
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: PUSH
61612: LD_INT 3
61614: NEG
61615: PUSH
61616: LD_INT 3
61618: NEG
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61655: LD_ADDR_VAR 0 43
61659: PUSH
61660: LD_INT 0
61662: PUSH
61663: LD_INT 0
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 0
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 1
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: LD_INT 1
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: LD_INT 0
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 1
61724: NEG
61725: PUSH
61726: LD_INT 1
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 1
61736: NEG
61737: PUSH
61738: LD_INT 2
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: LD_INT 2
61751: NEG
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: PUSH
61757: LD_INT 1
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 2
61770: PUSH
61771: LD_INT 0
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: LD_INT 1
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 0
61800: PUSH
61801: LD_INT 2
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 1
61810: NEG
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 2
61832: NEG
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: EMPTY
61839: LIST
61840: LIST
61841: PUSH
61842: LD_INT 1
61844: NEG
61845: PUSH
61846: LD_INT 3
61848: NEG
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: LD_INT 3
61859: NEG
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 1
61867: PUSH
61868: LD_INT 2
61870: NEG
61871: PUSH
61872: EMPTY
61873: LIST
61874: LIST
61875: PUSH
61876: LD_INT 2
61878: PUSH
61879: LD_INT 1
61881: NEG
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 3
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 3
61899: PUSH
61900: LD_INT 1
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 1
61909: PUSH
61910: LD_INT 3
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 0
61919: PUSH
61920: LD_INT 3
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: LD_INT 2
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 2
61940: NEG
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 3
61951: NEG
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 3
61962: NEG
61963: PUSH
61964: LD_INT 1
61966: NEG
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: LIST
61976: LIST
61977: LIST
61978: LIST
61979: LIST
61980: LIST
61981: LIST
61982: LIST
61983: LIST
61984: LIST
61985: LIST
61986: LIST
61987: LIST
61988: LIST
61989: LIST
61990: LIST
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62003: LD_ADDR_VAR 0 44
62007: PUSH
62008: LD_INT 0
62010: PUSH
62011: LD_INT 0
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 0
62020: PUSH
62021: LD_INT 1
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 1
62031: PUSH
62032: LD_INT 0
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 1
62041: PUSH
62042: LD_INT 1
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 0
62051: PUSH
62052: LD_INT 1
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 1
62061: NEG
62062: PUSH
62063: LD_INT 0
62065: PUSH
62066: EMPTY
62067: LIST
62068: LIST
62069: PUSH
62070: LD_INT 1
62072: NEG
62073: PUSH
62074: LD_INT 1
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 1
62084: NEG
62085: PUSH
62086: LD_INT 2
62088: NEG
62089: PUSH
62090: EMPTY
62091: LIST
62092: LIST
62093: PUSH
62094: LD_INT 1
62096: PUSH
62097: LD_INT 1
62099: NEG
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 2
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 2
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 2
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 1
62137: PUSH
62138: LD_INT 2
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 1
62147: NEG
62148: PUSH
62149: LD_INT 1
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 2
62158: NEG
62159: PUSH
62160: LD_INT 0
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: NEG
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 2
62181: NEG
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 2
62193: NEG
62194: PUSH
62195: LD_INT 3
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: LD_INT 1
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 3
62216: PUSH
62217: LD_INT 0
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 3
62226: PUSH
62227: LD_INT 1
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 3
62236: PUSH
62237: LD_INT 2
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 3
62246: PUSH
62247: LD_INT 3
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 2
62256: PUSH
62257: LD_INT 3
62259: PUSH
62260: EMPTY
62261: LIST
62262: LIST
62263: PUSH
62264: LD_INT 2
62266: NEG
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PUSH
62275: LD_INT 3
62277: NEG
62278: PUSH
62279: LD_INT 0
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: PUSH
62286: LD_INT 3
62288: NEG
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 3
62300: NEG
62301: PUSH
62302: LD_INT 2
62304: NEG
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 3
62312: NEG
62313: PUSH
62314: LD_INT 3
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62353: LD_ADDR_VAR 0 45
62357: PUSH
62358: LD_INT 0
62360: PUSH
62361: LD_INT 0
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 1
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 0
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 1
62422: NEG
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 1
62434: NEG
62435: PUSH
62436: LD_INT 2
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 0
62446: PUSH
62447: LD_INT 2
62449: NEG
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 1
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: EMPTY
62463: LIST
62464: LIST
62465: PUSH
62466: LD_INT 2
62468: PUSH
62469: LD_INT 1
62471: PUSH
62472: EMPTY
62473: LIST
62474: LIST
62475: PUSH
62476: LD_INT 2
62478: PUSH
62479: LD_INT 2
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 1
62488: PUSH
62489: LD_INT 2
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: LD_INT 2
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 1
62508: NEG
62509: PUSH
62510: LD_INT 1
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 2
62519: NEG
62520: PUSH
62521: LD_INT 1
62523: NEG
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 2
62531: NEG
62532: PUSH
62533: LD_INT 2
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: LD_INT 3
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 1
62555: NEG
62556: PUSH
62557: LD_INT 3
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 3
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 1
62578: PUSH
62579: LD_INT 2
62581: NEG
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: LD_INT 2
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: LD_INT 3
62599: PUSH
62600: LD_INT 3
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: LD_INT 3
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: PUSH
62617: LD_INT 1
62619: PUSH
62620: LD_INT 3
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 0
62629: PUSH
62630: LD_INT 3
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: NEG
62640: PUSH
62641: LD_INT 2
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 3
62650: NEG
62651: PUSH
62652: LD_INT 2
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 3
62662: NEG
62663: PUSH
62664: LD_INT 3
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62703: LD_ADDR_VAR 0 46
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 0
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: LD_INT 1
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: LD_INT 1
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 1
62772: NEG
62773: PUSH
62774: LD_INT 1
62776: NEG
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: LD_INT 1
62784: NEG
62785: PUSH
62786: LD_INT 2
62788: NEG
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: PUSH
62794: LD_INT 0
62796: PUSH
62797: LD_INT 2
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: LD_INT 1
62807: PUSH
62808: LD_INT 1
62810: NEG
62811: PUSH
62812: EMPTY
62813: LIST
62814: LIST
62815: PUSH
62816: LD_INT 2
62818: PUSH
62819: LD_INT 0
62821: PUSH
62822: EMPTY
62823: LIST
62824: LIST
62825: PUSH
62826: LD_INT 2
62828: PUSH
62829: LD_INT 1
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 1
62838: PUSH
62839: LD_INT 2
62841: PUSH
62842: EMPTY
62843: LIST
62844: LIST
62845: PUSH
62846: LD_INT 0
62848: PUSH
62849: LD_INT 2
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PUSH
62856: LD_INT 1
62858: NEG
62859: PUSH
62860: LD_INT 1
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 2
62869: NEG
62870: PUSH
62871: LD_INT 0
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PUSH
62878: LD_INT 2
62880: NEG
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: EMPTY
62887: LIST
62888: LIST
62889: PUSH
62890: LD_INT 1
62892: NEG
62893: PUSH
62894: LD_INT 3
62896: NEG
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: LD_INT 3
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 1
62915: PUSH
62916: LD_INT 2
62918: NEG
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 2
62926: PUSH
62927: LD_INT 1
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 3
62937: PUSH
62938: LD_INT 0
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: PUSH
62945: LD_INT 3
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: EMPTY
62952: LIST
62953: LIST
62954: PUSH
62955: LD_INT 1
62957: PUSH
62958: LD_INT 3
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 0
62967: PUSH
62968: LD_INT 3
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: NEG
62978: PUSH
62979: LD_INT 2
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 2
62988: NEG
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 3
62999: NEG
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: EMPTY
63005: LIST
63006: LIST
63007: PUSH
63008: LD_INT 3
63010: NEG
63011: PUSH
63012: LD_INT 1
63014: NEG
63015: PUSH
63016: EMPTY
63017: LIST
63018: LIST
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63051: LD_ADDR_VAR 0 47
63055: PUSH
63056: LD_INT 0
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 0
63068: PUSH
63069: LD_INT 1
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: PUSH
63080: LD_INT 0
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 1
63089: PUSH
63090: LD_INT 1
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 0
63099: PUSH
63100: LD_INT 1
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 1
63109: NEG
63110: PUSH
63111: LD_INT 0
63113: PUSH
63114: EMPTY
63115: LIST
63116: LIST
63117: PUSH
63118: LD_INT 1
63120: NEG
63121: PUSH
63122: LD_INT 1
63124: NEG
63125: PUSH
63126: EMPTY
63127: LIST
63128: LIST
63129: PUSH
63130: LD_INT 1
63132: NEG
63133: PUSH
63134: LD_INT 2
63136: NEG
63137: PUSH
63138: EMPTY
63139: LIST
63140: LIST
63141: PUSH
63142: LD_INT 0
63144: PUSH
63145: LD_INT 2
63147: NEG
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 1
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 2
63166: NEG
63167: PUSH
63168: LD_INT 1
63170: NEG
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 2
63178: NEG
63179: PUSH
63180: LD_INT 2
63182: NEG
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: EMPTY
63189: LIST
63190: LIST
63191: LIST
63192: LIST
63193: LIST
63194: LIST
63195: LIST
63196: LIST
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63202: LD_ADDR_VAR 0 48
63206: PUSH
63207: LD_INT 0
63209: PUSH
63210: LD_INT 0
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: LD_INT 0
63219: PUSH
63220: LD_INT 1
63222: NEG
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 1
63240: PUSH
63241: LD_INT 1
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 0
63250: PUSH
63251: LD_INT 1
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: LD_INT 0
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 1
63271: NEG
63272: PUSH
63273: LD_INT 1
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: NEG
63284: PUSH
63285: LD_INT 2
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 0
63295: PUSH
63296: LD_INT 2
63298: NEG
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 1
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 2
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 2
63327: PUSH
63328: LD_INT 1
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63349: LD_ADDR_VAR 0 49
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 0
63366: PUSH
63367: LD_INT 1
63369: NEG
63370: PUSH
63371: EMPTY
63372: LIST
63373: LIST
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: LD_INT 0
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: EMPTY
63392: LIST
63393: LIST
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: LD_INT 1
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 1
63407: NEG
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 1
63418: NEG
63419: PUSH
63420: LD_INT 1
63422: NEG
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 1
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 2
63451: PUSH
63452: LD_INT 1
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 2
63461: PUSH
63462: LD_INT 2
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 1
63471: PUSH
63472: LD_INT 2
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63493: LD_ADDR_VAR 0 50
63497: PUSH
63498: LD_INT 0
63500: PUSH
63501: LD_INT 0
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: LD_INT 1
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 1
63521: PUSH
63522: LD_INT 0
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 1
63531: PUSH
63532: LD_INT 1
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 0
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 1
63551: NEG
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: NEG
63563: PUSH
63564: LD_INT 1
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 2
63574: PUSH
63575: LD_INT 1
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 2
63584: PUSH
63585: LD_INT 2
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: PUSH
63595: LD_INT 2
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: LD_INT 2
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 1
63614: NEG
63615: PUSH
63616: LD_INT 1
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63637: LD_ADDR_VAR 0 51
63641: PUSH
63642: LD_INT 0
63644: PUSH
63645: LD_INT 0
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: LD_INT 1
63657: NEG
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 1
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 0
63685: PUSH
63686: LD_INT 1
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 1
63695: NEG
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 1
63706: NEG
63707: PUSH
63708: LD_INT 1
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 1
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 0
63728: PUSH
63729: LD_INT 2
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 1
63738: NEG
63739: PUSH
63740: LD_INT 1
63742: PUSH
63743: EMPTY
63744: LIST
63745: LIST
63746: PUSH
63747: LD_INT 2
63749: NEG
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 2
63760: NEG
63761: PUSH
63762: LD_INT 1
63764: NEG
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: LIST
63777: LIST
63778: LIST
63779: LIST
63780: LIST
63781: LIST
63782: LIST
63783: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63784: LD_ADDR_VAR 0 52
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: PUSH
63813: LD_INT 0
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: LD_INT 1
63822: PUSH
63823: LD_INT 1
63825: PUSH
63826: EMPTY
63827: LIST
63828: LIST
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: LD_INT 1
63835: PUSH
63836: EMPTY
63837: LIST
63838: LIST
63839: PUSH
63840: LD_INT 1
63842: NEG
63843: PUSH
63844: LD_INT 0
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: NEG
63854: PUSH
63855: LD_INT 1
63857: NEG
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 1
63865: NEG
63866: PUSH
63867: LD_INT 2
63869: NEG
63870: PUSH
63871: EMPTY
63872: LIST
63873: LIST
63874: PUSH
63875: LD_INT 1
63877: NEG
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 2
63888: NEG
63889: PUSH
63890: LD_INT 0
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 2
63899: NEG
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 2
63911: NEG
63912: PUSH
63913: LD_INT 2
63915: NEG
63916: PUSH
63917: EMPTY
63918: LIST
63919: LIST
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63935: LD_ADDR_VAR 0 53
63939: PUSH
63940: LD_INT 0
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 0
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: EMPTY
63958: LIST
63959: LIST
63960: PUSH
63961: LD_INT 1
63963: PUSH
63964: LD_INT 0
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: LD_INT 1
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: LD_INT 1
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 1
64004: NEG
64005: PUSH
64006: LD_INT 1
64008: NEG
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 1
64016: NEG
64017: PUSH
64018: LD_INT 2
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: LD_INT 2
64031: NEG
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 1
64039: PUSH
64040: LD_INT 1
64042: NEG
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 2
64050: PUSH
64051: LD_INT 0
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 2
64060: PUSH
64061: LD_INT 1
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 2
64070: PUSH
64071: LD_INT 2
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: LD_INT 1
64080: PUSH
64081: LD_INT 2
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 0
64090: PUSH
64091: LD_INT 2
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: LD_INT 1
64100: NEG
64101: PUSH
64102: LD_INT 1
64104: PUSH
64105: EMPTY
64106: LIST
64107: LIST
64108: PUSH
64109: LD_INT 2
64111: NEG
64112: PUSH
64113: LD_INT 0
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: PUSH
64120: LD_INT 2
64122: NEG
64123: PUSH
64124: LD_INT 1
64126: NEG
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 2
64134: NEG
64135: PUSH
64136: LD_INT 2
64138: NEG
64139: PUSH
64140: EMPTY
64141: LIST
64142: LIST
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64165: LD_ADDR_VAR 0 54
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: LD_INT 1
64185: NEG
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 1
64246: NEG
64247: PUSH
64248: LD_INT 2
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: LD_INT 2
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 2
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 2
64290: PUSH
64291: LD_INT 1
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 2
64300: PUSH
64301: LD_INT 2
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: LD_INT 1
64310: PUSH
64311: LD_INT 2
64313: PUSH
64314: EMPTY
64315: LIST
64316: LIST
64317: PUSH
64318: LD_INT 0
64320: PUSH
64321: LD_INT 2
64323: PUSH
64324: EMPTY
64325: LIST
64326: LIST
64327: PUSH
64328: LD_INT 1
64330: NEG
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: EMPTY
64336: LIST
64337: LIST
64338: PUSH
64339: LD_INT 2
64341: NEG
64342: PUSH
64343: LD_INT 0
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 2
64352: NEG
64353: PUSH
64354: LD_INT 1
64356: NEG
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 2
64364: NEG
64365: PUSH
64366: LD_INT 2
64368: NEG
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: LIST
64391: LIST
64392: LIST
64393: LIST
64394: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64395: LD_ADDR_VAR 0 55
64399: PUSH
64400: LD_INT 0
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 0
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 1
64423: PUSH
64424: LD_INT 0
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: PUSH
64431: LD_INT 1
64433: PUSH
64434: LD_INT 1
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: LD_INT 1
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: LD_INT 0
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: LD_INT 1
64468: NEG
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: PUSH
64474: LD_INT 1
64476: NEG
64477: PUSH
64478: LD_INT 2
64480: NEG
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: LD_INT 2
64491: NEG
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 1
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: EMPTY
64505: LIST
64506: LIST
64507: PUSH
64508: LD_INT 2
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: PUSH
64518: LD_INT 2
64520: PUSH
64521: LD_INT 1
64523: PUSH
64524: EMPTY
64525: LIST
64526: LIST
64527: PUSH
64528: LD_INT 2
64530: PUSH
64531: LD_INT 2
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PUSH
64538: LD_INT 1
64540: PUSH
64541: LD_INT 2
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: PUSH
64548: LD_INT 0
64550: PUSH
64551: LD_INT 2
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: LD_INT 1
64560: NEG
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 2
64571: NEG
64572: PUSH
64573: LD_INT 0
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 2
64582: NEG
64583: PUSH
64584: LD_INT 1
64586: NEG
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PUSH
64592: LD_INT 2
64594: NEG
64595: PUSH
64596: LD_INT 2
64598: NEG
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64625: LD_ADDR_VAR 0 56
64629: PUSH
64630: LD_INT 0
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: LD_INT 1
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: LD_INT 0
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 1
64663: PUSH
64664: LD_INT 1
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 0
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 1
64683: NEG
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 1
64694: NEG
64695: PUSH
64696: LD_INT 1
64698: NEG
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 1
64706: NEG
64707: PUSH
64708: LD_INT 2
64710: NEG
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 0
64718: PUSH
64719: LD_INT 2
64721: NEG
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 1
64729: PUSH
64730: LD_INT 1
64732: NEG
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: PUSH
64738: LD_INT 2
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 2
64750: PUSH
64751: LD_INT 1
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 2
64760: PUSH
64761: LD_INT 2
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: LD_INT 2
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 0
64780: PUSH
64781: LD_INT 2
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 1
64790: NEG
64791: PUSH
64792: LD_INT 1
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 2
64801: NEG
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 2
64812: NEG
64813: PUSH
64814: LD_INT 1
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 2
64824: NEG
64825: PUSH
64826: LD_INT 2
64828: NEG
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: LIST
64838: LIST
64839: LIST
64840: LIST
64841: LIST
64842: LIST
64843: LIST
64844: LIST
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64855: LD_ADDR_VAR 0 57
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: EMPTY
64878: LIST
64879: LIST
64880: PUSH
64881: LD_INT 1
64883: PUSH
64884: LD_INT 0
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 1
64893: PUSH
64894: LD_INT 1
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 1
64913: NEG
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 1
64924: NEG
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 1
64936: NEG
64937: PUSH
64938: LD_INT 2
64940: NEG
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: LD_INT 2
64951: NEG
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: LD_INT 1
64959: PUSH
64960: LD_INT 1
64962: NEG
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 2
64970: PUSH
64971: LD_INT 0
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 2
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: LD_INT 2
64990: PUSH
64991: LD_INT 2
64993: PUSH
64994: EMPTY
64995: LIST
64996: LIST
64997: PUSH
64998: LD_INT 1
65000: PUSH
65001: LD_INT 2
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 2
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 1
65020: NEG
65021: PUSH
65022: LD_INT 1
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 2
65031: NEG
65032: PUSH
65033: LD_INT 0
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 2
65042: NEG
65043: PUSH
65044: LD_INT 1
65046: NEG
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: LD_INT 2
65054: NEG
65055: PUSH
65056: LD_INT 2
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: LIST
65068: LIST
65069: LIST
65070: LIST
65071: LIST
65072: LIST
65073: LIST
65074: LIST
65075: LIST
65076: LIST
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65085: LD_ADDR_VAR 0 58
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: LD_INT 1
65105: NEG
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 1
65113: PUSH
65114: LD_INT 0
65116: PUSH
65117: EMPTY
65118: LIST
65119: LIST
65120: PUSH
65121: LD_INT 1
65123: PUSH
65124: LD_INT 1
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: PUSH
65131: LD_INT 0
65133: PUSH
65134: LD_INT 1
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 1
65143: NEG
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 1
65154: NEG
65155: PUSH
65156: LD_INT 1
65158: NEG
65159: PUSH
65160: EMPTY
65161: LIST
65162: LIST
65163: PUSH
65164: LD_INT 1
65166: NEG
65167: PUSH
65168: LD_INT 2
65170: NEG
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: PUSH
65176: LD_INT 0
65178: PUSH
65179: LD_INT 2
65181: NEG
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 1
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: EMPTY
65195: LIST
65196: LIST
65197: PUSH
65198: LD_INT 2
65200: PUSH
65201: LD_INT 0
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 2
65210: PUSH
65211: LD_INT 1
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: LD_INT 2
65220: PUSH
65221: LD_INT 2
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 1
65230: PUSH
65231: LD_INT 2
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 0
65240: PUSH
65241: LD_INT 2
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 1
65250: NEG
65251: PUSH
65252: LD_INT 1
65254: PUSH
65255: EMPTY
65256: LIST
65257: LIST
65258: PUSH
65259: LD_INT 2
65261: NEG
65262: PUSH
65263: LD_INT 0
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 2
65272: NEG
65273: PUSH
65274: LD_INT 1
65276: NEG
65277: PUSH
65278: EMPTY
65279: LIST
65280: LIST
65281: PUSH
65282: LD_INT 2
65284: NEG
65285: PUSH
65286: LD_INT 2
65288: NEG
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65315: LD_ADDR_VAR 0 59
65319: PUSH
65320: LD_INT 0
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: LD_INT 1
65335: NEG
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 1
65343: PUSH
65344: LD_INT 0
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 1
65353: PUSH
65354: LD_INT 1
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 1
65373: NEG
65374: PUSH
65375: LD_INT 0
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: NEG
65385: PUSH
65386: LD_INT 1
65388: NEG
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65403: LD_ADDR_VAR 0 60
65407: PUSH
65408: LD_INT 0
65410: PUSH
65411: LD_INT 0
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 0
65420: PUSH
65421: LD_INT 1
65423: NEG
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 1
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 1
65441: PUSH
65442: LD_INT 1
65444: PUSH
65445: EMPTY
65446: LIST
65447: LIST
65448: PUSH
65449: LD_INT 0
65451: PUSH
65452: LD_INT 1
65454: PUSH
65455: EMPTY
65456: LIST
65457: LIST
65458: PUSH
65459: LD_INT 1
65461: NEG
65462: PUSH
65463: LD_INT 0
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 1
65472: NEG
65473: PUSH
65474: LD_INT 1
65476: NEG
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65491: LD_ADDR_VAR 0 61
65495: PUSH
65496: LD_INT 0
65498: PUSH
65499: LD_INT 0
65501: PUSH
65502: EMPTY
65503: LIST
65504: LIST
65505: PUSH
65506: LD_INT 0
65508: PUSH
65509: LD_INT 1
65511: NEG
65512: PUSH
65513: EMPTY
65514: LIST
65515: LIST
65516: PUSH
65517: LD_INT 1
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: PUSH
65527: LD_INT 1
65529: PUSH
65530: LD_INT 1
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_INT 0
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: EMPTY
65544: LIST
65545: LIST
65546: PUSH
65547: LD_INT 1
65549: NEG
65550: PUSH
65551: LD_INT 0
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: LD_INT 1
65560: NEG
65561: PUSH
65562: LD_INT 1
65564: NEG
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65579: LD_ADDR_VAR 0 62
65583: PUSH
65584: LD_INT 0
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: LD_INT 1
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 1
65607: PUSH
65608: LD_INT 0
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 1
65617: PUSH
65618: LD_INT 1
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 0
65627: PUSH
65628: LD_INT 1
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 1
65637: NEG
65638: PUSH
65639: LD_INT 0
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: LD_INT 1
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65667: LD_ADDR_VAR 0 63
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: LD_INT 1
65687: NEG
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 1
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 0
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 1
65725: NEG
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: EMPTY
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
65755: LD_ADDR_VAR 0 64
65759: PUSH
65760: LD_INT 0
65762: PUSH
65763: LD_INT 0
65765: PUSH
65766: EMPTY
65767: LIST
65768: LIST
65769: PUSH
65770: LD_INT 0
65772: PUSH
65773: LD_INT 1
65775: NEG
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: PUSH
65781: LD_INT 1
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 1
65793: PUSH
65794: LD_INT 1
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 0
65803: PUSH
65804: LD_INT 1
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 1
65813: NEG
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 1
65824: NEG
65825: PUSH
65826: LD_INT 1
65828: NEG
65829: PUSH
65830: EMPTY
65831: LIST
65832: LIST
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: LIST
65842: ST_TO_ADDR
// end ; 1 :
65843: GO 71740
65845: LD_INT 1
65847: DOUBLE
65848: EQUAL
65849: IFTRUE 65853
65851: GO 68476
65853: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65854: LD_ADDR_VAR 0 11
65858: PUSH
65859: LD_INT 1
65861: NEG
65862: PUSH
65863: LD_INT 3
65865: NEG
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: PUSH
65871: LD_INT 0
65873: PUSH
65874: LD_INT 3
65876: NEG
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: LD_INT 2
65887: NEG
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: LIST
65897: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65898: LD_ADDR_VAR 0 12
65902: PUSH
65903: LD_INT 2
65905: PUSH
65906: LD_INT 1
65908: NEG
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 3
65916: PUSH
65917: LD_INT 0
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 3
65926: PUSH
65927: LD_INT 1
65929: PUSH
65930: EMPTY
65931: LIST
65932: LIST
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: LIST
65938: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65939: LD_ADDR_VAR 0 13
65943: PUSH
65944: LD_INT 3
65946: PUSH
65947: LD_INT 2
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 3
65956: PUSH
65957: LD_INT 3
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 2
65966: PUSH
65967: LD_INT 3
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: EMPTY
65975: LIST
65976: LIST
65977: LIST
65978: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65979: LD_ADDR_VAR 0 14
65983: PUSH
65984: LD_INT 1
65986: PUSH
65987: LD_INT 3
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 0
65996: PUSH
65997: LD_INT 3
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 1
66006: NEG
66007: PUSH
66008: LD_INT 2
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: LIST
66019: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66020: LD_ADDR_VAR 0 15
66024: PUSH
66025: LD_INT 2
66027: NEG
66028: PUSH
66029: LD_INT 1
66031: PUSH
66032: EMPTY
66033: LIST
66034: LIST
66035: PUSH
66036: LD_INT 3
66038: NEG
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: PUSH
66047: LD_INT 3
66049: NEG
66050: PUSH
66051: LD_INT 1
66053: NEG
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: LIST
66063: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66064: LD_ADDR_VAR 0 16
66068: PUSH
66069: LD_INT 2
66071: NEG
66072: PUSH
66073: LD_INT 3
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 3
66083: NEG
66084: PUSH
66085: LD_INT 2
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 3
66095: NEG
66096: PUSH
66097: LD_INT 3
66099: NEG
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: LIST
66109: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66110: LD_ADDR_VAR 0 17
66114: PUSH
66115: LD_INT 1
66117: NEG
66118: PUSH
66119: LD_INT 3
66121: NEG
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: LD_INT 3
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: LD_INT 1
66140: PUSH
66141: LD_INT 2
66143: NEG
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: LIST
66153: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66154: LD_ADDR_VAR 0 18
66158: PUSH
66159: LD_INT 2
66161: PUSH
66162: LD_INT 1
66164: NEG
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 3
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: LD_INT 3
66182: PUSH
66183: LD_INT 1
66185: PUSH
66186: EMPTY
66187: LIST
66188: LIST
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: LIST
66194: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66195: LD_ADDR_VAR 0 19
66199: PUSH
66200: LD_INT 3
66202: PUSH
66203: LD_INT 2
66205: PUSH
66206: EMPTY
66207: LIST
66208: LIST
66209: PUSH
66210: LD_INT 3
66212: PUSH
66213: LD_INT 3
66215: PUSH
66216: EMPTY
66217: LIST
66218: LIST
66219: PUSH
66220: LD_INT 2
66222: PUSH
66223: LD_INT 3
66225: PUSH
66226: EMPTY
66227: LIST
66228: LIST
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: LIST
66234: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
66235: LD_ADDR_VAR 0 20
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: LD_INT 3
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: LD_INT 3
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 1
66262: NEG
66263: PUSH
66264: LD_INT 2
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: LIST
66275: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
66276: LD_ADDR_VAR 0 21
66280: PUSH
66281: LD_INT 2
66283: NEG
66284: PUSH
66285: LD_INT 1
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 3
66294: NEG
66295: PUSH
66296: LD_INT 0
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 3
66305: NEG
66306: PUSH
66307: LD_INT 1
66309: NEG
66310: PUSH
66311: EMPTY
66312: LIST
66313: LIST
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: LIST
66319: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66320: LD_ADDR_VAR 0 22
66324: PUSH
66325: LD_INT 2
66327: NEG
66328: PUSH
66329: LD_INT 3
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 3
66339: NEG
66340: PUSH
66341: LD_INT 2
66343: NEG
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: PUSH
66349: LD_INT 3
66351: NEG
66352: PUSH
66353: LD_INT 3
66355: NEG
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: PUSH
66361: EMPTY
66362: LIST
66363: LIST
66364: LIST
66365: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
66366: LD_ADDR_VAR 0 23
66370: PUSH
66371: LD_INT 0
66373: PUSH
66374: LD_INT 3
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: LD_INT 1
66384: NEG
66385: PUSH
66386: LD_INT 4
66388: NEG
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: PUSH
66397: LD_INT 3
66399: NEG
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: LIST
66409: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
66410: LD_ADDR_VAR 0 24
66414: PUSH
66415: LD_INT 3
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 3
66427: PUSH
66428: LD_INT 1
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 4
66438: PUSH
66439: LD_INT 1
66441: PUSH
66442: EMPTY
66443: LIST
66444: LIST
66445: PUSH
66446: EMPTY
66447: LIST
66448: LIST
66449: LIST
66450: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
66451: LD_ADDR_VAR 0 25
66455: PUSH
66456: LD_INT 3
66458: PUSH
66459: LD_INT 3
66461: PUSH
66462: EMPTY
66463: LIST
66464: LIST
66465: PUSH
66466: LD_INT 4
66468: PUSH
66469: LD_INT 3
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 3
66478: PUSH
66479: LD_INT 4
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: EMPTY
66487: LIST
66488: LIST
66489: LIST
66490: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
66491: LD_ADDR_VAR 0 26
66495: PUSH
66496: LD_INT 0
66498: PUSH
66499: LD_INT 3
66501: PUSH
66502: EMPTY
66503: LIST
66504: LIST
66505: PUSH
66506: LD_INT 1
66508: PUSH
66509: LD_INT 4
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 1
66518: NEG
66519: PUSH
66520: LD_INT 3
66522: PUSH
66523: EMPTY
66524: LIST
66525: LIST
66526: PUSH
66527: EMPTY
66528: LIST
66529: LIST
66530: LIST
66531: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
66532: LD_ADDR_VAR 0 27
66536: PUSH
66537: LD_INT 3
66539: NEG
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 3
66550: NEG
66551: PUSH
66552: LD_INT 1
66554: PUSH
66555: EMPTY
66556: LIST
66557: LIST
66558: PUSH
66559: LD_INT 4
66561: NEG
66562: PUSH
66563: LD_INT 1
66565: NEG
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: LIST
66575: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
66576: LD_ADDR_VAR 0 28
66580: PUSH
66581: LD_INT 3
66583: NEG
66584: PUSH
66585: LD_INT 3
66587: NEG
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 3
66595: NEG
66596: PUSH
66597: LD_INT 4
66599: NEG
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 4
66607: NEG
66608: PUSH
66609: LD_INT 3
66611: NEG
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: LIST
66621: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
66622: LD_ADDR_VAR 0 29
66626: PUSH
66627: LD_INT 1
66629: NEG
66630: PUSH
66631: LD_INT 3
66633: NEG
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 0
66641: PUSH
66642: LD_INT 3
66644: NEG
66645: PUSH
66646: EMPTY
66647: LIST
66648: LIST
66649: PUSH
66650: LD_INT 1
66652: PUSH
66653: LD_INT 2
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: LD_INT 4
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 0
66675: PUSH
66676: LD_INT 4
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: LD_INT 3
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: PUSH
66699: LD_INT 5
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 0
66709: PUSH
66710: LD_INT 5
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 1
66720: PUSH
66721: LD_INT 4
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 1
66731: NEG
66732: PUSH
66733: LD_INT 6
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 0
66743: PUSH
66744: LD_INT 6
66746: NEG
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 1
66754: PUSH
66755: LD_INT 5
66757: NEG
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
66777: LD_ADDR_VAR 0 30
66781: PUSH
66782: LD_INT 2
66784: PUSH
66785: LD_INT 1
66787: NEG
66788: PUSH
66789: EMPTY
66790: LIST
66791: LIST
66792: PUSH
66793: LD_INT 3
66795: PUSH
66796: LD_INT 0
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: PUSH
66803: LD_INT 3
66805: PUSH
66806: LD_INT 1
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 3
66815: PUSH
66816: LD_INT 1
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 4
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: EMPTY
66831: LIST
66832: LIST
66833: PUSH
66834: LD_INT 4
66836: PUSH
66837: LD_INT 1
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 4
66846: PUSH
66847: LD_INT 1
66849: NEG
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 5
66857: PUSH
66858: LD_INT 0
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 5
66867: PUSH
66868: LD_INT 1
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 5
66877: PUSH
66878: LD_INT 1
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: LD_INT 6
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 6
66898: PUSH
66899: LD_INT 1
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: LIST
66917: LIST
66918: LIST
66919: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66920: LD_ADDR_VAR 0 31
66924: PUSH
66925: LD_INT 3
66927: PUSH
66928: LD_INT 2
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 3
66937: PUSH
66938: LD_INT 3
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 2
66947: PUSH
66948: LD_INT 3
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 4
66957: PUSH
66958: LD_INT 3
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 4
66967: PUSH
66968: LD_INT 4
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 3
66977: PUSH
66978: LD_INT 4
66980: PUSH
66981: EMPTY
66982: LIST
66983: LIST
66984: PUSH
66985: LD_INT 5
66987: PUSH
66988: LD_INT 4
66990: PUSH
66991: EMPTY
66992: LIST
66993: LIST
66994: PUSH
66995: LD_INT 5
66997: PUSH
66998: LD_INT 5
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PUSH
67005: LD_INT 4
67007: PUSH
67008: LD_INT 5
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: LD_INT 6
67017: PUSH
67018: LD_INT 5
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: PUSH
67025: LD_INT 6
67027: PUSH
67028: LD_INT 6
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 5
67037: PUSH
67038: LD_INT 6
67040: PUSH
67041: EMPTY
67042: LIST
67043: LIST
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: LIST
67053: LIST
67054: LIST
67055: LIST
67056: LIST
67057: LIST
67058: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
67059: LD_ADDR_VAR 0 32
67063: PUSH
67064: LD_INT 1
67066: PUSH
67067: LD_INT 3
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: PUSH
67074: LD_INT 0
67076: PUSH
67077: LD_INT 3
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 1
67086: NEG
67087: PUSH
67088: LD_INT 2
67090: PUSH
67091: EMPTY
67092: LIST
67093: LIST
67094: PUSH
67095: LD_INT 1
67097: PUSH
67098: LD_INT 4
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: LD_INT 4
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 1
67117: NEG
67118: PUSH
67119: LD_INT 3
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 1
67128: PUSH
67129: LD_INT 5
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 0
67138: PUSH
67139: LD_INT 5
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 1
67148: NEG
67149: PUSH
67150: LD_INT 4
67152: PUSH
67153: EMPTY
67154: LIST
67155: LIST
67156: PUSH
67157: LD_INT 1
67159: PUSH
67160: LD_INT 6
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 0
67169: PUSH
67170: LD_INT 6
67172: PUSH
67173: EMPTY
67174: LIST
67175: LIST
67176: PUSH
67177: LD_INT 1
67179: NEG
67180: PUSH
67181: LD_INT 5
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PUSH
67188: EMPTY
67189: LIST
67190: LIST
67191: LIST
67192: LIST
67193: LIST
67194: LIST
67195: LIST
67196: LIST
67197: LIST
67198: LIST
67199: LIST
67200: LIST
67201: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
67202: LD_ADDR_VAR 0 33
67206: PUSH
67207: LD_INT 2
67209: NEG
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: EMPTY
67215: LIST
67216: LIST
67217: PUSH
67218: LD_INT 3
67220: NEG
67221: PUSH
67222: LD_INT 0
67224: PUSH
67225: EMPTY
67226: LIST
67227: LIST
67228: PUSH
67229: LD_INT 3
67231: NEG
67232: PUSH
67233: LD_INT 1
67235: NEG
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: LD_INT 3
67243: NEG
67244: PUSH
67245: LD_INT 1
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 4
67254: NEG
67255: PUSH
67256: LD_INT 0
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 4
67265: NEG
67266: PUSH
67267: LD_INT 1
67269: NEG
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: PUSH
67275: LD_INT 4
67277: NEG
67278: PUSH
67279: LD_INT 1
67281: PUSH
67282: EMPTY
67283: LIST
67284: LIST
67285: PUSH
67286: LD_INT 5
67288: NEG
67289: PUSH
67290: LD_INT 0
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 5
67299: NEG
67300: PUSH
67301: LD_INT 1
67303: NEG
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 5
67311: NEG
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 6
67322: NEG
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 6
67333: NEG
67334: PUSH
67335: LD_INT 1
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
67357: LD_ADDR_VAR 0 34
67361: PUSH
67362: LD_INT 2
67364: NEG
67365: PUSH
67366: LD_INT 3
67368: NEG
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 3
67376: NEG
67377: PUSH
67378: LD_INT 2
67380: NEG
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 3
67388: NEG
67389: PUSH
67390: LD_INT 3
67392: NEG
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: LD_INT 3
67400: NEG
67401: PUSH
67402: LD_INT 4
67404: NEG
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: PUSH
67410: LD_INT 4
67412: NEG
67413: PUSH
67414: LD_INT 3
67416: NEG
67417: PUSH
67418: EMPTY
67419: LIST
67420: LIST
67421: PUSH
67422: LD_INT 4
67424: NEG
67425: PUSH
67426: LD_INT 4
67428: NEG
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 4
67436: NEG
67437: PUSH
67438: LD_INT 5
67440: NEG
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 5
67448: NEG
67449: PUSH
67450: LD_INT 4
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 5
67460: NEG
67461: PUSH
67462: LD_INT 5
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 5
67472: NEG
67473: PUSH
67474: LD_INT 6
67476: NEG
67477: PUSH
67478: EMPTY
67479: LIST
67480: LIST
67481: PUSH
67482: LD_INT 6
67484: NEG
67485: PUSH
67486: LD_INT 5
67488: NEG
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: PUSH
67494: LD_INT 6
67496: NEG
67497: PUSH
67498: LD_INT 6
67500: NEG
67501: PUSH
67502: EMPTY
67503: LIST
67504: LIST
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: LIST
67513: LIST
67514: LIST
67515: LIST
67516: LIST
67517: LIST
67518: LIST
67519: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
67520: LD_ADDR_VAR 0 41
67524: PUSH
67525: LD_INT 0
67527: PUSH
67528: LD_INT 2
67530: NEG
67531: PUSH
67532: EMPTY
67533: LIST
67534: LIST
67535: PUSH
67536: LD_INT 1
67538: NEG
67539: PUSH
67540: LD_INT 3
67542: NEG
67543: PUSH
67544: EMPTY
67545: LIST
67546: LIST
67547: PUSH
67548: LD_INT 1
67550: PUSH
67551: LD_INT 2
67553: NEG
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: LIST
67563: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
67564: LD_ADDR_VAR 0 42
67568: PUSH
67569: LD_INT 2
67571: PUSH
67572: LD_INT 0
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 2
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 3
67592: PUSH
67593: LD_INT 1
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: LIST
67604: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
67605: LD_ADDR_VAR 0 43
67609: PUSH
67610: LD_INT 2
67612: PUSH
67613: LD_INT 2
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 3
67622: PUSH
67623: LD_INT 2
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 2
67632: PUSH
67633: LD_INT 3
67635: PUSH
67636: EMPTY
67637: LIST
67638: LIST
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: LIST
67644: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
67645: LD_ADDR_VAR 0 44
67649: PUSH
67650: LD_INT 0
67652: PUSH
67653: LD_INT 2
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 1
67662: PUSH
67663: LD_INT 3
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 1
67672: NEG
67673: PUSH
67674: LD_INT 2
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: LIST
67685: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
67686: LD_ADDR_VAR 0 45
67690: PUSH
67691: LD_INT 2
67693: NEG
67694: PUSH
67695: LD_INT 0
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 2
67704: NEG
67705: PUSH
67706: LD_INT 1
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 3
67715: NEG
67716: PUSH
67717: LD_INT 1
67719: NEG
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: LIST
67729: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
67730: LD_ADDR_VAR 0 46
67734: PUSH
67735: LD_INT 2
67737: NEG
67738: PUSH
67739: LD_INT 2
67741: NEG
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 2
67749: NEG
67750: PUSH
67751: LD_INT 3
67753: NEG
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 3
67761: NEG
67762: PUSH
67763: LD_INT 2
67765: NEG
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: EMPTY
67772: LIST
67773: LIST
67774: LIST
67775: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
67776: LD_ADDR_VAR 0 47
67780: PUSH
67781: LD_INT 2
67783: NEG
67784: PUSH
67785: LD_INT 3
67787: NEG
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 1
67795: NEG
67796: PUSH
67797: LD_INT 3
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67809: LD_ADDR_VAR 0 48
67813: PUSH
67814: LD_INT 1
67816: PUSH
67817: LD_INT 2
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 2
67827: PUSH
67828: LD_INT 1
67830: NEG
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
67840: LD_ADDR_VAR 0 49
67844: PUSH
67845: LD_INT 3
67847: PUSH
67848: LD_INT 1
67850: PUSH
67851: EMPTY
67852: LIST
67853: LIST
67854: PUSH
67855: LD_INT 3
67857: PUSH
67858: LD_INT 2
67860: PUSH
67861: EMPTY
67862: LIST
67863: LIST
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
67869: LD_ADDR_VAR 0 50
67873: PUSH
67874: LD_INT 2
67876: PUSH
67877: LD_INT 3
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 1
67886: PUSH
67887: LD_INT 3
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67898: LD_ADDR_VAR 0 51
67902: PUSH
67903: LD_INT 1
67905: NEG
67906: PUSH
67907: LD_INT 2
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 2
67916: NEG
67917: PUSH
67918: LD_INT 1
67920: PUSH
67921: EMPTY
67922: LIST
67923: LIST
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67929: LD_ADDR_VAR 0 52
67933: PUSH
67934: LD_INT 3
67936: NEG
67937: PUSH
67938: LD_INT 1
67940: NEG
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 3
67948: NEG
67949: PUSH
67950: LD_INT 2
67952: NEG
67953: PUSH
67954: EMPTY
67955: LIST
67956: LIST
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67962: LD_ADDR_VAR 0 53
67966: PUSH
67967: LD_INT 1
67969: NEG
67970: PUSH
67971: LD_INT 3
67973: NEG
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 0
67981: PUSH
67982: LD_INT 3
67984: NEG
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: LD_INT 1
67992: PUSH
67993: LD_INT 2
67995: NEG
67996: PUSH
67997: EMPTY
67998: LIST
67999: LIST
68000: PUSH
68001: EMPTY
68002: LIST
68003: LIST
68004: LIST
68005: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
68006: LD_ADDR_VAR 0 54
68010: PUSH
68011: LD_INT 2
68013: PUSH
68014: LD_INT 1
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 3
68024: PUSH
68025: LD_INT 0
68027: PUSH
68028: EMPTY
68029: LIST
68030: LIST
68031: PUSH
68032: LD_INT 3
68034: PUSH
68035: LD_INT 1
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: LIST
68046: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
68047: LD_ADDR_VAR 0 55
68051: PUSH
68052: LD_INT 3
68054: PUSH
68055: LD_INT 2
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 3
68064: PUSH
68065: LD_INT 3
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 2
68074: PUSH
68075: LD_INT 3
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: LIST
68086: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
68087: LD_ADDR_VAR 0 56
68091: PUSH
68092: LD_INT 1
68094: PUSH
68095: LD_INT 3
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 0
68104: PUSH
68105: LD_INT 3
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 1
68114: NEG
68115: PUSH
68116: LD_INT 2
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: LIST
68127: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68128: LD_ADDR_VAR 0 57
68132: PUSH
68133: LD_INT 2
68135: NEG
68136: PUSH
68137: LD_INT 1
68139: PUSH
68140: EMPTY
68141: LIST
68142: LIST
68143: PUSH
68144: LD_INT 3
68146: NEG
68147: PUSH
68148: LD_INT 0
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: PUSH
68155: LD_INT 3
68157: NEG
68158: PUSH
68159: LD_INT 1
68161: NEG
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: EMPTY
68168: LIST
68169: LIST
68170: LIST
68171: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68172: LD_ADDR_VAR 0 58
68176: PUSH
68177: LD_INT 2
68179: NEG
68180: PUSH
68181: LD_INT 3
68183: NEG
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 3
68191: NEG
68192: PUSH
68193: LD_INT 2
68195: NEG
68196: PUSH
68197: EMPTY
68198: LIST
68199: LIST
68200: PUSH
68201: LD_INT 3
68203: NEG
68204: PUSH
68205: LD_INT 3
68207: NEG
68208: PUSH
68209: EMPTY
68210: LIST
68211: LIST
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: LIST
68217: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
68218: LD_ADDR_VAR 0 59
68222: PUSH
68223: LD_INT 1
68225: NEG
68226: PUSH
68227: LD_INT 2
68229: NEG
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 0
68237: PUSH
68238: LD_INT 2
68240: NEG
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 1
68248: PUSH
68249: LD_INT 1
68251: NEG
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: LIST
68261: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
68262: LD_ADDR_VAR 0 60
68266: PUSH
68267: LD_INT 1
68269: PUSH
68270: LD_INT 1
68272: NEG
68273: PUSH
68274: EMPTY
68275: LIST
68276: LIST
68277: PUSH
68278: LD_INT 2
68280: PUSH
68281: LD_INT 0
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 2
68290: PUSH
68291: LD_INT 1
68293: PUSH
68294: EMPTY
68295: LIST
68296: LIST
68297: PUSH
68298: EMPTY
68299: LIST
68300: LIST
68301: LIST
68302: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
68303: LD_ADDR_VAR 0 61
68307: PUSH
68308: LD_INT 2
68310: PUSH
68311: LD_INT 1
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 2
68320: PUSH
68321: LD_INT 2
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 1
68330: PUSH
68331: LD_INT 2
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: LIST
68342: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
68343: LD_ADDR_VAR 0 62
68347: PUSH
68348: LD_INT 1
68350: PUSH
68351: LD_INT 2
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 0
68360: PUSH
68361: LD_INT 2
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 1
68370: NEG
68371: PUSH
68372: LD_INT 1
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: LIST
68383: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
68384: LD_ADDR_VAR 0 63
68388: PUSH
68389: LD_INT 1
68391: NEG
68392: PUSH
68393: LD_INT 1
68395: PUSH
68396: EMPTY
68397: LIST
68398: LIST
68399: PUSH
68400: LD_INT 2
68402: NEG
68403: PUSH
68404: LD_INT 0
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 2
68413: NEG
68414: PUSH
68415: LD_INT 1
68417: NEG
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: EMPTY
68424: LIST
68425: LIST
68426: LIST
68427: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
68428: LD_ADDR_VAR 0 64
68432: PUSH
68433: LD_INT 1
68435: NEG
68436: PUSH
68437: LD_INT 2
68439: NEG
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 2
68447: NEG
68448: PUSH
68449: LD_INT 1
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 2
68459: NEG
68460: PUSH
68461: LD_INT 2
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: LIST
68473: ST_TO_ADDR
// end ; 2 :
68474: GO 71740
68476: LD_INT 2
68478: DOUBLE
68479: EQUAL
68480: IFTRUE 68484
68482: GO 71739
68484: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
68485: LD_ADDR_VAR 0 29
68489: PUSH
68490: LD_INT 4
68492: PUSH
68493: LD_INT 0
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 4
68502: PUSH
68503: LD_INT 1
68505: NEG
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 5
68513: PUSH
68514: LD_INT 0
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 5
68523: PUSH
68524: LD_INT 1
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 4
68533: PUSH
68534: LD_INT 1
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 3
68543: PUSH
68544: LD_INT 0
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 3
68553: PUSH
68554: LD_INT 1
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 3
68564: PUSH
68565: LD_INT 2
68567: NEG
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 5
68575: PUSH
68576: LD_INT 2
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 3
68585: PUSH
68586: LD_INT 3
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 3
68595: PUSH
68596: LD_INT 2
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 4
68605: PUSH
68606: LD_INT 3
68608: PUSH
68609: EMPTY
68610: LIST
68611: LIST
68612: PUSH
68613: LD_INT 4
68615: PUSH
68616: LD_INT 4
68618: PUSH
68619: EMPTY
68620: LIST
68621: LIST
68622: PUSH
68623: LD_INT 3
68625: PUSH
68626: LD_INT 4
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: LD_INT 2
68635: PUSH
68636: LD_INT 3
68638: PUSH
68639: EMPTY
68640: LIST
68641: LIST
68642: PUSH
68643: LD_INT 2
68645: PUSH
68646: LD_INT 2
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 4
68655: PUSH
68656: LD_INT 2
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 2
68665: PUSH
68666: LD_INT 4
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 0
68675: PUSH
68676: LD_INT 4
68678: PUSH
68679: EMPTY
68680: LIST
68681: LIST
68682: PUSH
68683: LD_INT 0
68685: PUSH
68686: LD_INT 3
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 1
68695: PUSH
68696: LD_INT 4
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 1
68705: PUSH
68706: LD_INT 5
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 0
68715: PUSH
68716: LD_INT 5
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 1
68725: NEG
68726: PUSH
68727: LD_INT 4
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 1
68736: NEG
68737: PUSH
68738: LD_INT 3
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 2
68747: PUSH
68748: LD_INT 5
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 2
68757: NEG
68758: PUSH
68759: LD_INT 3
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 3
68768: NEG
68769: PUSH
68770: LD_INT 0
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 3
68779: NEG
68780: PUSH
68781: LD_INT 1
68783: NEG
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 2
68791: NEG
68792: PUSH
68793: LD_INT 0
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: PUSH
68800: LD_INT 2
68802: NEG
68803: PUSH
68804: LD_INT 1
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 3
68813: NEG
68814: PUSH
68815: LD_INT 1
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 4
68824: NEG
68825: PUSH
68826: LD_INT 0
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 4
68835: NEG
68836: PUSH
68837: LD_INT 1
68839: NEG
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: LD_INT 4
68847: NEG
68848: PUSH
68849: LD_INT 2
68851: NEG
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 2
68859: NEG
68860: PUSH
68861: LD_INT 2
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 4
68870: NEG
68871: PUSH
68872: LD_INT 4
68874: NEG
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 4
68882: NEG
68883: PUSH
68884: LD_INT 5
68886: NEG
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 3
68894: NEG
68895: PUSH
68896: LD_INT 4
68898: NEG
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 3
68906: NEG
68907: PUSH
68908: LD_INT 3
68910: NEG
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 4
68918: NEG
68919: PUSH
68920: LD_INT 3
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 5
68930: NEG
68931: PUSH
68932: LD_INT 4
68934: NEG
68935: PUSH
68936: EMPTY
68937: LIST
68938: LIST
68939: PUSH
68940: LD_INT 5
68942: NEG
68943: PUSH
68944: LD_INT 5
68946: NEG
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 3
68954: NEG
68955: PUSH
68956: LD_INT 5
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 5
68966: NEG
68967: PUSH
68968: LD_INT 3
68970: NEG
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
69023: LD_ADDR_VAR 0 30
69027: PUSH
69028: LD_INT 4
69030: PUSH
69031: LD_INT 4
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PUSH
69038: LD_INT 4
69040: PUSH
69041: LD_INT 3
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 5
69050: PUSH
69051: LD_INT 4
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 5
69060: PUSH
69061: LD_INT 5
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 4
69070: PUSH
69071: LD_INT 5
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 3
69080: PUSH
69081: LD_INT 4
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 3
69090: PUSH
69091: LD_INT 3
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 5
69100: PUSH
69101: LD_INT 3
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 3
69110: PUSH
69111: LD_INT 5
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 0
69120: PUSH
69121: LD_INT 3
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 0
69130: PUSH
69131: LD_INT 2
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 1
69140: PUSH
69141: LD_INT 3
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 1
69150: PUSH
69151: LD_INT 4
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 0
69160: PUSH
69161: LD_INT 4
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 1
69170: NEG
69171: PUSH
69172: LD_INT 3
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 1
69181: NEG
69182: PUSH
69183: LD_INT 2
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 2
69192: PUSH
69193: LD_INT 4
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 2
69202: NEG
69203: PUSH
69204: LD_INT 2
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 4
69213: NEG
69214: PUSH
69215: LD_INT 0
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 4
69224: NEG
69225: PUSH
69226: LD_INT 1
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 3
69236: NEG
69237: PUSH
69238: LD_INT 0
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 3
69247: NEG
69248: PUSH
69249: LD_INT 1
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 4
69258: NEG
69259: PUSH
69260: LD_INT 1
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 5
69269: NEG
69270: PUSH
69271: LD_INT 0
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 5
69280: NEG
69281: PUSH
69282: LD_INT 1
69284: NEG
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 5
69292: NEG
69293: PUSH
69294: LD_INT 2
69296: NEG
69297: PUSH
69298: EMPTY
69299: LIST
69300: LIST
69301: PUSH
69302: LD_INT 3
69304: NEG
69305: PUSH
69306: LD_INT 2
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 3
69315: NEG
69316: PUSH
69317: LD_INT 3
69319: NEG
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 3
69327: NEG
69328: PUSH
69329: LD_INT 4
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 2
69339: NEG
69340: PUSH
69341: LD_INT 3
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 2
69351: NEG
69352: PUSH
69353: LD_INT 2
69355: NEG
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 3
69363: NEG
69364: PUSH
69365: LD_INT 2
69367: NEG
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 4
69375: NEG
69376: PUSH
69377: LD_INT 3
69379: NEG
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 4
69387: NEG
69388: PUSH
69389: LD_INT 4
69391: NEG
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 2
69399: NEG
69400: PUSH
69401: LD_INT 4
69403: NEG
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 4
69411: NEG
69412: PUSH
69413: LD_INT 2
69415: NEG
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 0
69423: PUSH
69424: LD_INT 4
69426: NEG
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 0
69434: PUSH
69435: LD_INT 5
69437: NEG
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 1
69445: PUSH
69446: LD_INT 4
69448: NEG
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 1
69456: PUSH
69457: LD_INT 3
69459: NEG
69460: PUSH
69461: EMPTY
69462: LIST
69463: LIST
69464: PUSH
69465: LD_INT 0
69467: PUSH
69468: LD_INT 3
69470: NEG
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 1
69478: NEG
69479: PUSH
69480: LD_INT 4
69482: NEG
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 1
69490: NEG
69491: PUSH
69492: LD_INT 5
69494: NEG
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 2
69502: PUSH
69503: LD_INT 3
69505: NEG
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 2
69513: NEG
69514: PUSH
69515: LD_INT 5
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: LIST
69549: LIST
69550: LIST
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: LIST
69556: LIST
69557: LIST
69558: LIST
69559: LIST
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
69570: LD_ADDR_VAR 0 31
69574: PUSH
69575: LD_INT 0
69577: PUSH
69578: LD_INT 4
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 0
69587: PUSH
69588: LD_INT 3
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 1
69597: PUSH
69598: LD_INT 4
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 1
69607: PUSH
69608: LD_INT 5
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 0
69617: PUSH
69618: LD_INT 5
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 1
69627: NEG
69628: PUSH
69629: LD_INT 4
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 1
69638: NEG
69639: PUSH
69640: LD_INT 3
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 2
69649: PUSH
69650: LD_INT 5
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 2
69659: NEG
69660: PUSH
69661: LD_INT 3
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 3
69670: NEG
69671: PUSH
69672: LD_INT 0
69674: PUSH
69675: EMPTY
69676: LIST
69677: LIST
69678: PUSH
69679: LD_INT 3
69681: NEG
69682: PUSH
69683: LD_INT 1
69685: NEG
69686: PUSH
69687: EMPTY
69688: LIST
69689: LIST
69690: PUSH
69691: LD_INT 2
69693: NEG
69694: PUSH
69695: LD_INT 0
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 2
69704: NEG
69705: PUSH
69706: LD_INT 1
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 3
69715: NEG
69716: PUSH
69717: LD_INT 1
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 4
69726: NEG
69727: PUSH
69728: LD_INT 0
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 4
69737: NEG
69738: PUSH
69739: LD_INT 1
69741: NEG
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 4
69749: NEG
69750: PUSH
69751: LD_INT 2
69753: NEG
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 2
69761: NEG
69762: PUSH
69763: LD_INT 2
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 4
69772: NEG
69773: PUSH
69774: LD_INT 4
69776: NEG
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 4
69784: NEG
69785: PUSH
69786: LD_INT 5
69788: NEG
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 3
69796: NEG
69797: PUSH
69798: LD_INT 4
69800: NEG
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 3
69808: NEG
69809: PUSH
69810: LD_INT 3
69812: NEG
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 4
69820: NEG
69821: PUSH
69822: LD_INT 3
69824: NEG
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 5
69832: NEG
69833: PUSH
69834: LD_INT 4
69836: NEG
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 5
69844: NEG
69845: PUSH
69846: LD_INT 5
69848: NEG
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 3
69856: NEG
69857: PUSH
69858: LD_INT 5
69860: NEG
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 5
69868: NEG
69869: PUSH
69870: LD_INT 3
69872: NEG
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 0
69880: PUSH
69881: LD_INT 3
69883: NEG
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 0
69891: PUSH
69892: LD_INT 4
69894: NEG
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 1
69902: PUSH
69903: LD_INT 3
69905: NEG
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: LD_INT 1
69913: PUSH
69914: LD_INT 2
69916: NEG
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 0
69924: PUSH
69925: LD_INT 2
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 1
69935: NEG
69936: PUSH
69937: LD_INT 3
69939: NEG
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 1
69947: NEG
69948: PUSH
69949: LD_INT 4
69951: NEG
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 2
69959: PUSH
69960: LD_INT 2
69962: NEG
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 2
69970: NEG
69971: PUSH
69972: LD_INT 4
69974: NEG
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 4
69982: PUSH
69983: LD_INT 0
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 4
69992: PUSH
69993: LD_INT 1
69995: NEG
69996: PUSH
69997: EMPTY
69998: LIST
69999: LIST
70000: PUSH
70001: LD_INT 5
70003: PUSH
70004: LD_INT 0
70006: PUSH
70007: EMPTY
70008: LIST
70009: LIST
70010: PUSH
70011: LD_INT 5
70013: PUSH
70014: LD_INT 1
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 4
70023: PUSH
70024: LD_INT 1
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 3
70033: PUSH
70034: LD_INT 0
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 3
70043: PUSH
70044: LD_INT 1
70046: NEG
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 3
70054: PUSH
70055: LD_INT 2
70057: NEG
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 5
70065: PUSH
70066: LD_INT 2
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: EMPTY
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
70120: LD_ADDR_VAR 0 32
70124: PUSH
70125: LD_INT 4
70127: NEG
70128: PUSH
70129: LD_INT 0
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 4
70138: NEG
70139: PUSH
70140: LD_INT 1
70142: NEG
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 3
70150: NEG
70151: PUSH
70152: LD_INT 0
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 3
70161: NEG
70162: PUSH
70163: LD_INT 1
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 4
70172: NEG
70173: PUSH
70174: LD_INT 1
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 5
70183: NEG
70184: PUSH
70185: LD_INT 0
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 5
70194: NEG
70195: PUSH
70196: LD_INT 1
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 5
70206: NEG
70207: PUSH
70208: LD_INT 2
70210: NEG
70211: PUSH
70212: EMPTY
70213: LIST
70214: LIST
70215: PUSH
70216: LD_INT 3
70218: NEG
70219: PUSH
70220: LD_INT 2
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: LD_INT 3
70229: NEG
70230: PUSH
70231: LD_INT 3
70233: NEG
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: PUSH
70239: LD_INT 3
70241: NEG
70242: PUSH
70243: LD_INT 4
70245: NEG
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 2
70253: NEG
70254: PUSH
70255: LD_INT 3
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 2
70265: NEG
70266: PUSH
70267: LD_INT 2
70269: NEG
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 3
70277: NEG
70278: PUSH
70279: LD_INT 2
70281: NEG
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 4
70289: NEG
70290: PUSH
70291: LD_INT 3
70293: NEG
70294: PUSH
70295: EMPTY
70296: LIST
70297: LIST
70298: PUSH
70299: LD_INT 4
70301: NEG
70302: PUSH
70303: LD_INT 4
70305: NEG
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: PUSH
70311: LD_INT 2
70313: NEG
70314: PUSH
70315: LD_INT 4
70317: NEG
70318: PUSH
70319: EMPTY
70320: LIST
70321: LIST
70322: PUSH
70323: LD_INT 4
70325: NEG
70326: PUSH
70327: LD_INT 2
70329: NEG
70330: PUSH
70331: EMPTY
70332: LIST
70333: LIST
70334: PUSH
70335: LD_INT 0
70337: PUSH
70338: LD_INT 4
70340: NEG
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 0
70348: PUSH
70349: LD_INT 5
70351: NEG
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 1
70359: PUSH
70360: LD_INT 4
70362: NEG
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 1
70370: PUSH
70371: LD_INT 3
70373: NEG
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 0
70381: PUSH
70382: LD_INT 3
70384: NEG
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 1
70392: NEG
70393: PUSH
70394: LD_INT 4
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 1
70404: NEG
70405: PUSH
70406: LD_INT 5
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 2
70416: PUSH
70417: LD_INT 3
70419: NEG
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 2
70427: NEG
70428: PUSH
70429: LD_INT 5
70431: NEG
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 3
70439: PUSH
70440: LD_INT 0
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 3
70449: PUSH
70450: LD_INT 1
70452: NEG
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: LD_INT 4
70460: PUSH
70461: LD_INT 0
70463: PUSH
70464: EMPTY
70465: LIST
70466: LIST
70467: PUSH
70468: LD_INT 4
70470: PUSH
70471: LD_INT 1
70473: PUSH
70474: EMPTY
70475: LIST
70476: LIST
70477: PUSH
70478: LD_INT 3
70480: PUSH
70481: LD_INT 1
70483: PUSH
70484: EMPTY
70485: LIST
70486: LIST
70487: PUSH
70488: LD_INT 2
70490: PUSH
70491: LD_INT 0
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 2
70500: PUSH
70501: LD_INT 1
70503: NEG
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 2
70511: PUSH
70512: LD_INT 2
70514: NEG
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 4
70522: PUSH
70523: LD_INT 2
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 4
70532: PUSH
70533: LD_INT 4
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 4
70542: PUSH
70543: LD_INT 3
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 5
70552: PUSH
70553: LD_INT 4
70555: PUSH
70556: EMPTY
70557: LIST
70558: LIST
70559: PUSH
70560: LD_INT 5
70562: PUSH
70563: LD_INT 5
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 4
70572: PUSH
70573: LD_INT 5
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 3
70582: PUSH
70583: LD_INT 4
70585: PUSH
70586: EMPTY
70587: LIST
70588: LIST
70589: PUSH
70590: LD_INT 3
70592: PUSH
70593: LD_INT 3
70595: PUSH
70596: EMPTY
70597: LIST
70598: LIST
70599: PUSH
70600: LD_INT 5
70602: PUSH
70603: LD_INT 3
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 3
70612: PUSH
70613: LD_INT 5
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
70667: LD_ADDR_VAR 0 33
70671: PUSH
70672: LD_INT 4
70674: NEG
70675: PUSH
70676: LD_INT 4
70678: NEG
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 4
70686: NEG
70687: PUSH
70688: LD_INT 5
70690: NEG
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 3
70698: NEG
70699: PUSH
70700: LD_INT 4
70702: NEG
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: PUSH
70708: LD_INT 3
70710: NEG
70711: PUSH
70712: LD_INT 3
70714: NEG
70715: PUSH
70716: EMPTY
70717: LIST
70718: LIST
70719: PUSH
70720: LD_INT 4
70722: NEG
70723: PUSH
70724: LD_INT 3
70726: NEG
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 5
70734: NEG
70735: PUSH
70736: LD_INT 4
70738: NEG
70739: PUSH
70740: EMPTY
70741: LIST
70742: LIST
70743: PUSH
70744: LD_INT 5
70746: NEG
70747: PUSH
70748: LD_INT 5
70750: NEG
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: PUSH
70756: LD_INT 3
70758: NEG
70759: PUSH
70760: LD_INT 5
70762: NEG
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 5
70770: NEG
70771: PUSH
70772: LD_INT 3
70774: NEG
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 0
70782: PUSH
70783: LD_INT 3
70785: NEG
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 0
70793: PUSH
70794: LD_INT 4
70796: NEG
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 1
70804: PUSH
70805: LD_INT 3
70807: NEG
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 1
70815: PUSH
70816: LD_INT 2
70818: NEG
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 0
70826: PUSH
70827: LD_INT 2
70829: NEG
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 1
70837: NEG
70838: PUSH
70839: LD_INT 3
70841: NEG
70842: PUSH
70843: EMPTY
70844: LIST
70845: LIST
70846: PUSH
70847: LD_INT 1
70849: NEG
70850: PUSH
70851: LD_INT 4
70853: NEG
70854: PUSH
70855: EMPTY
70856: LIST
70857: LIST
70858: PUSH
70859: LD_INT 2
70861: PUSH
70862: LD_INT 2
70864: NEG
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: LD_INT 2
70872: NEG
70873: PUSH
70874: LD_INT 4
70876: NEG
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 4
70884: PUSH
70885: LD_INT 0
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 4
70894: PUSH
70895: LD_INT 1
70897: NEG
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 5
70905: PUSH
70906: LD_INT 0
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 5
70915: PUSH
70916: LD_INT 1
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 4
70925: PUSH
70926: LD_INT 1
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 3
70935: PUSH
70936: LD_INT 0
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 3
70945: PUSH
70946: LD_INT 1
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 3
70956: PUSH
70957: LD_INT 2
70959: NEG
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 5
70967: PUSH
70968: LD_INT 2
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 3
70977: PUSH
70978: LD_INT 3
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 3
70987: PUSH
70988: LD_INT 2
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 4
70997: PUSH
70998: LD_INT 3
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 4
71007: PUSH
71008: LD_INT 4
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 3
71017: PUSH
71018: LD_INT 4
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 2
71027: PUSH
71028: LD_INT 3
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 2
71037: PUSH
71038: LD_INT 2
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 4
71047: PUSH
71048: LD_INT 2
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 2
71057: PUSH
71058: LD_INT 4
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: LD_INT 4
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 0
71077: PUSH
71078: LD_INT 3
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 1
71087: PUSH
71088: LD_INT 4
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 1
71097: PUSH
71098: LD_INT 5
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 0
71107: PUSH
71108: LD_INT 5
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 1
71117: NEG
71118: PUSH
71119: LD_INT 4
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 1
71128: NEG
71129: PUSH
71130: LD_INT 3
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 2
71139: PUSH
71140: LD_INT 5
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 2
71149: NEG
71150: PUSH
71151: LD_INT 3
71153: PUSH
71154: EMPTY
71155: LIST
71156: LIST
71157: PUSH
71158: EMPTY
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
71205: LD_ADDR_VAR 0 34
71209: PUSH
71210: LD_INT 0
71212: PUSH
71213: LD_INT 4
71215: NEG
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 0
71223: PUSH
71224: LD_INT 5
71226: NEG
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: PUSH
71232: LD_INT 1
71234: PUSH
71235: LD_INT 4
71237: NEG
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 1
71245: PUSH
71246: LD_INT 3
71248: NEG
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 0
71256: PUSH
71257: LD_INT 3
71259: NEG
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 1
71267: NEG
71268: PUSH
71269: LD_INT 4
71271: NEG
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 1
71279: NEG
71280: PUSH
71281: LD_INT 5
71283: NEG
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 2
71291: PUSH
71292: LD_INT 3
71294: NEG
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 2
71302: NEG
71303: PUSH
71304: LD_INT 5
71306: NEG
71307: PUSH
71308: EMPTY
71309: LIST
71310: LIST
71311: PUSH
71312: LD_INT 3
71314: PUSH
71315: LD_INT 0
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 3
71324: PUSH
71325: LD_INT 1
71327: NEG
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: LD_INT 4
71335: PUSH
71336: LD_INT 0
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 4
71345: PUSH
71346: LD_INT 1
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 3
71355: PUSH
71356: LD_INT 1
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 2
71365: PUSH
71366: LD_INT 0
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 2
71375: PUSH
71376: LD_INT 1
71378: NEG
71379: PUSH
71380: EMPTY
71381: LIST
71382: LIST
71383: PUSH
71384: LD_INT 2
71386: PUSH
71387: LD_INT 2
71389: NEG
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 4
71397: PUSH
71398: LD_INT 2
71400: PUSH
71401: EMPTY
71402: LIST
71403: LIST
71404: PUSH
71405: LD_INT 4
71407: PUSH
71408: LD_INT 4
71410: PUSH
71411: EMPTY
71412: LIST
71413: LIST
71414: PUSH
71415: LD_INT 4
71417: PUSH
71418: LD_INT 3
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: PUSH
71425: LD_INT 5
71427: PUSH
71428: LD_INT 4
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 5
71437: PUSH
71438: LD_INT 5
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 4
71447: PUSH
71448: LD_INT 5
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 3
71457: PUSH
71458: LD_INT 4
71460: PUSH
71461: EMPTY
71462: LIST
71463: LIST
71464: PUSH
71465: LD_INT 3
71467: PUSH
71468: LD_INT 3
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 5
71477: PUSH
71478: LD_INT 3
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 3
71487: PUSH
71488: LD_INT 5
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 0
71497: PUSH
71498: LD_INT 3
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 0
71507: PUSH
71508: LD_INT 2
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 1
71517: PUSH
71518: LD_INT 3
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 1
71527: PUSH
71528: LD_INT 4
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 0
71537: PUSH
71538: LD_INT 4
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 1
71547: NEG
71548: PUSH
71549: LD_INT 3
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: LD_INT 1
71558: NEG
71559: PUSH
71560: LD_INT 2
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 2
71569: PUSH
71570: LD_INT 4
71572: PUSH
71573: EMPTY
71574: LIST
71575: LIST
71576: PUSH
71577: LD_INT 2
71579: NEG
71580: PUSH
71581: LD_INT 2
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: LD_INT 4
71590: NEG
71591: PUSH
71592: LD_INT 0
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 4
71601: NEG
71602: PUSH
71603: LD_INT 1
71605: NEG
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 3
71613: NEG
71614: PUSH
71615: LD_INT 0
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: LD_INT 3
71624: NEG
71625: PUSH
71626: LD_INT 1
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: PUSH
71633: LD_INT 4
71635: NEG
71636: PUSH
71637: LD_INT 1
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 5
71646: NEG
71647: PUSH
71648: LD_INT 0
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 5
71657: NEG
71658: PUSH
71659: LD_INT 1
71661: NEG
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 5
71669: NEG
71670: PUSH
71671: LD_INT 2
71673: NEG
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 3
71681: NEG
71682: PUSH
71683: LD_INT 2
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: ST_TO_ADDR
// end ; end ;
71737: GO 71740
71739: POP
// case btype of b_depot , b_warehouse :
71740: LD_VAR 0 1
71744: PUSH
71745: LD_INT 0
71747: DOUBLE
71748: EQUAL
71749: IFTRUE 71759
71751: LD_INT 1
71753: DOUBLE
71754: EQUAL
71755: IFTRUE 71759
71757: GO 71960
71759: POP
// case nation of nation_american :
71760: LD_VAR 0 5
71764: PUSH
71765: LD_INT 1
71767: DOUBLE
71768: EQUAL
71769: IFTRUE 71773
71771: GO 71829
71773: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
71774: LD_ADDR_VAR 0 9
71778: PUSH
71779: LD_VAR 0 11
71783: PUSH
71784: LD_VAR 0 12
71788: PUSH
71789: LD_VAR 0 13
71793: PUSH
71794: LD_VAR 0 14
71798: PUSH
71799: LD_VAR 0 15
71803: PUSH
71804: LD_VAR 0 16
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: PUSH
71817: LD_VAR 0 4
71821: PUSH
71822: LD_INT 1
71824: PLUS
71825: ARRAY
71826: ST_TO_ADDR
71827: GO 71958
71829: LD_INT 2
71831: DOUBLE
71832: EQUAL
71833: IFTRUE 71837
71835: GO 71893
71837: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
71838: LD_ADDR_VAR 0 9
71842: PUSH
71843: LD_VAR 0 17
71847: PUSH
71848: LD_VAR 0 18
71852: PUSH
71853: LD_VAR 0 19
71857: PUSH
71858: LD_VAR 0 20
71862: PUSH
71863: LD_VAR 0 21
71867: PUSH
71868: LD_VAR 0 22
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: PUSH
71881: LD_VAR 0 4
71885: PUSH
71886: LD_INT 1
71888: PLUS
71889: ARRAY
71890: ST_TO_ADDR
71891: GO 71958
71893: LD_INT 3
71895: DOUBLE
71896: EQUAL
71897: IFTRUE 71901
71899: GO 71957
71901: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71902: LD_ADDR_VAR 0 9
71906: PUSH
71907: LD_VAR 0 23
71911: PUSH
71912: LD_VAR 0 24
71916: PUSH
71917: LD_VAR 0 25
71921: PUSH
71922: LD_VAR 0 26
71926: PUSH
71927: LD_VAR 0 27
71931: PUSH
71932: LD_VAR 0 28
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: PUSH
71945: LD_VAR 0 4
71949: PUSH
71950: LD_INT 1
71952: PLUS
71953: ARRAY
71954: ST_TO_ADDR
71955: GO 71958
71957: POP
71958: GO 72513
71960: LD_INT 2
71962: DOUBLE
71963: EQUAL
71964: IFTRUE 71974
71966: LD_INT 3
71968: DOUBLE
71969: EQUAL
71970: IFTRUE 71974
71972: GO 72030
71974: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71975: LD_ADDR_VAR 0 9
71979: PUSH
71980: LD_VAR 0 29
71984: PUSH
71985: LD_VAR 0 30
71989: PUSH
71990: LD_VAR 0 31
71994: PUSH
71995: LD_VAR 0 32
71999: PUSH
72000: LD_VAR 0 33
72004: PUSH
72005: LD_VAR 0 34
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: LIST
72014: LIST
72015: LIST
72016: LIST
72017: PUSH
72018: LD_VAR 0 4
72022: PUSH
72023: LD_INT 1
72025: PLUS
72026: ARRAY
72027: ST_TO_ADDR
72028: GO 72513
72030: LD_INT 16
72032: DOUBLE
72033: EQUAL
72034: IFTRUE 72092
72036: LD_INT 17
72038: DOUBLE
72039: EQUAL
72040: IFTRUE 72092
72042: LD_INT 18
72044: DOUBLE
72045: EQUAL
72046: IFTRUE 72092
72048: LD_INT 19
72050: DOUBLE
72051: EQUAL
72052: IFTRUE 72092
72054: LD_INT 22
72056: DOUBLE
72057: EQUAL
72058: IFTRUE 72092
72060: LD_INT 20
72062: DOUBLE
72063: EQUAL
72064: IFTRUE 72092
72066: LD_INT 21
72068: DOUBLE
72069: EQUAL
72070: IFTRUE 72092
72072: LD_INT 23
72074: DOUBLE
72075: EQUAL
72076: IFTRUE 72092
72078: LD_INT 24
72080: DOUBLE
72081: EQUAL
72082: IFTRUE 72092
72084: LD_INT 25
72086: DOUBLE
72087: EQUAL
72088: IFTRUE 72092
72090: GO 72148
72092: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
72093: LD_ADDR_VAR 0 9
72097: PUSH
72098: LD_VAR 0 35
72102: PUSH
72103: LD_VAR 0 36
72107: PUSH
72108: LD_VAR 0 37
72112: PUSH
72113: LD_VAR 0 38
72117: PUSH
72118: LD_VAR 0 39
72122: PUSH
72123: LD_VAR 0 40
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: PUSH
72136: LD_VAR 0 4
72140: PUSH
72141: LD_INT 1
72143: PLUS
72144: ARRAY
72145: ST_TO_ADDR
72146: GO 72513
72148: LD_INT 6
72150: DOUBLE
72151: EQUAL
72152: IFTRUE 72204
72154: LD_INT 7
72156: DOUBLE
72157: EQUAL
72158: IFTRUE 72204
72160: LD_INT 8
72162: DOUBLE
72163: EQUAL
72164: IFTRUE 72204
72166: LD_INT 13
72168: DOUBLE
72169: EQUAL
72170: IFTRUE 72204
72172: LD_INT 12
72174: DOUBLE
72175: EQUAL
72176: IFTRUE 72204
72178: LD_INT 15
72180: DOUBLE
72181: EQUAL
72182: IFTRUE 72204
72184: LD_INT 11
72186: DOUBLE
72187: EQUAL
72188: IFTRUE 72204
72190: LD_INT 14
72192: DOUBLE
72193: EQUAL
72194: IFTRUE 72204
72196: LD_INT 10
72198: DOUBLE
72199: EQUAL
72200: IFTRUE 72204
72202: GO 72260
72204: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
72205: LD_ADDR_VAR 0 9
72209: PUSH
72210: LD_VAR 0 41
72214: PUSH
72215: LD_VAR 0 42
72219: PUSH
72220: LD_VAR 0 43
72224: PUSH
72225: LD_VAR 0 44
72229: PUSH
72230: LD_VAR 0 45
72234: PUSH
72235: LD_VAR 0 46
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: PUSH
72248: LD_VAR 0 4
72252: PUSH
72253: LD_INT 1
72255: PLUS
72256: ARRAY
72257: ST_TO_ADDR
72258: GO 72513
72260: LD_INT 36
72262: DOUBLE
72263: EQUAL
72264: IFTRUE 72268
72266: GO 72324
72268: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
72269: LD_ADDR_VAR 0 9
72273: PUSH
72274: LD_VAR 0 47
72278: PUSH
72279: LD_VAR 0 48
72283: PUSH
72284: LD_VAR 0 49
72288: PUSH
72289: LD_VAR 0 50
72293: PUSH
72294: LD_VAR 0 51
72298: PUSH
72299: LD_VAR 0 52
72303: PUSH
72304: EMPTY
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: PUSH
72312: LD_VAR 0 4
72316: PUSH
72317: LD_INT 1
72319: PLUS
72320: ARRAY
72321: ST_TO_ADDR
72322: GO 72513
72324: LD_INT 4
72326: DOUBLE
72327: EQUAL
72328: IFTRUE 72350
72330: LD_INT 5
72332: DOUBLE
72333: EQUAL
72334: IFTRUE 72350
72336: LD_INT 34
72338: DOUBLE
72339: EQUAL
72340: IFTRUE 72350
72342: LD_INT 37
72344: DOUBLE
72345: EQUAL
72346: IFTRUE 72350
72348: GO 72406
72350: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
72351: LD_ADDR_VAR 0 9
72355: PUSH
72356: LD_VAR 0 53
72360: PUSH
72361: LD_VAR 0 54
72365: PUSH
72366: LD_VAR 0 55
72370: PUSH
72371: LD_VAR 0 56
72375: PUSH
72376: LD_VAR 0 57
72380: PUSH
72381: LD_VAR 0 58
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: LIST
72390: LIST
72391: LIST
72392: LIST
72393: PUSH
72394: LD_VAR 0 4
72398: PUSH
72399: LD_INT 1
72401: PLUS
72402: ARRAY
72403: ST_TO_ADDR
72404: GO 72513
72406: LD_INT 31
72408: DOUBLE
72409: EQUAL
72410: IFTRUE 72456
72412: LD_INT 32
72414: DOUBLE
72415: EQUAL
72416: IFTRUE 72456
72418: LD_INT 33
72420: DOUBLE
72421: EQUAL
72422: IFTRUE 72456
72424: LD_INT 27
72426: DOUBLE
72427: EQUAL
72428: IFTRUE 72456
72430: LD_INT 26
72432: DOUBLE
72433: EQUAL
72434: IFTRUE 72456
72436: LD_INT 28
72438: DOUBLE
72439: EQUAL
72440: IFTRUE 72456
72442: LD_INT 29
72444: DOUBLE
72445: EQUAL
72446: IFTRUE 72456
72448: LD_INT 30
72450: DOUBLE
72451: EQUAL
72452: IFTRUE 72456
72454: GO 72512
72456: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
72457: LD_ADDR_VAR 0 9
72461: PUSH
72462: LD_VAR 0 59
72466: PUSH
72467: LD_VAR 0 60
72471: PUSH
72472: LD_VAR 0 61
72476: PUSH
72477: LD_VAR 0 62
72481: PUSH
72482: LD_VAR 0 63
72486: PUSH
72487: LD_VAR 0 64
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: PUSH
72500: LD_VAR 0 4
72504: PUSH
72505: LD_INT 1
72507: PLUS
72508: ARRAY
72509: ST_TO_ADDR
72510: GO 72513
72512: POP
// temp_list2 = [ ] ;
72513: LD_ADDR_VAR 0 10
72517: PUSH
72518: EMPTY
72519: ST_TO_ADDR
// for i in temp_list do
72520: LD_ADDR_VAR 0 8
72524: PUSH
72525: LD_VAR 0 9
72529: PUSH
72530: FOR_IN
72531: IFFALSE 72583
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
72533: LD_ADDR_VAR 0 10
72537: PUSH
72538: LD_VAR 0 10
72542: PUSH
72543: LD_VAR 0 8
72547: PUSH
72548: LD_INT 1
72550: ARRAY
72551: PUSH
72552: LD_VAR 0 2
72556: PLUS
72557: PUSH
72558: LD_VAR 0 8
72562: PUSH
72563: LD_INT 2
72565: ARRAY
72566: PUSH
72567: LD_VAR 0 3
72571: PLUS
72572: PUSH
72573: EMPTY
72574: LIST
72575: LIST
72576: PUSH
72577: EMPTY
72578: LIST
72579: ADD
72580: ST_TO_ADDR
72581: GO 72530
72583: POP
72584: POP
// result = temp_list2 ;
72585: LD_ADDR_VAR 0 7
72589: PUSH
72590: LD_VAR 0 10
72594: ST_TO_ADDR
// end ;
72595: LD_VAR 0 7
72599: RET
// export function EnemyInRange ( unit , dist ) ; begin
72600: LD_INT 0
72602: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
72603: LD_ADDR_VAR 0 3
72607: PUSH
72608: LD_VAR 0 1
72612: PPUSH
72613: CALL_OW 255
72617: PPUSH
72618: LD_VAR 0 1
72622: PPUSH
72623: CALL_OW 250
72627: PPUSH
72628: LD_VAR 0 1
72632: PPUSH
72633: CALL_OW 251
72637: PPUSH
72638: LD_VAR 0 2
72642: PPUSH
72643: CALL 45973 0 4
72647: PUSH
72648: LD_INT 4
72650: ARRAY
72651: ST_TO_ADDR
// end ;
72652: LD_VAR 0 3
72656: RET
// export function PlayerSeeMe ( unit ) ; begin
72657: LD_INT 0
72659: PPUSH
// result := See ( your_side , unit ) ;
72660: LD_ADDR_VAR 0 2
72664: PUSH
72665: LD_OWVAR 2
72669: PPUSH
72670: LD_VAR 0 1
72674: PPUSH
72675: CALL_OW 292
72679: ST_TO_ADDR
// end ;
72680: LD_VAR 0 2
72684: RET
// export function ReverseDir ( unit ) ; begin
72685: LD_INT 0
72687: PPUSH
// if not unit then
72688: LD_VAR 0 1
72692: NOT
72693: IFFALSE 72697
// exit ;
72695: GO 72720
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
72697: LD_ADDR_VAR 0 2
72701: PUSH
72702: LD_VAR 0 1
72706: PPUSH
72707: CALL_OW 254
72711: PUSH
72712: LD_INT 3
72714: PLUS
72715: PUSH
72716: LD_INT 6
72718: MOD
72719: ST_TO_ADDR
// end ;
72720: LD_VAR 0 2
72724: RET
// export function ReverseArray ( array ) ; var i ; begin
72725: LD_INT 0
72727: PPUSH
72728: PPUSH
// if not array then
72729: LD_VAR 0 1
72733: NOT
72734: IFFALSE 72738
// exit ;
72736: GO 72793
// result := [ ] ;
72738: LD_ADDR_VAR 0 2
72742: PUSH
72743: EMPTY
72744: ST_TO_ADDR
// for i := array downto 1 do
72745: LD_ADDR_VAR 0 3
72749: PUSH
72750: DOUBLE
72751: LD_VAR 0 1
72755: INC
72756: ST_TO_ADDR
72757: LD_INT 1
72759: PUSH
72760: FOR_DOWNTO
72761: IFFALSE 72791
// result := Join ( result , array [ i ] ) ;
72763: LD_ADDR_VAR 0 2
72767: PUSH
72768: LD_VAR 0 2
72772: PPUSH
72773: LD_VAR 0 1
72777: PUSH
72778: LD_VAR 0 3
72782: ARRAY
72783: PPUSH
72784: CALL 77449 0 2
72788: ST_TO_ADDR
72789: GO 72760
72791: POP
72792: POP
// end ;
72793: LD_VAR 0 2
72797: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
72798: LD_INT 0
72800: PPUSH
72801: PPUSH
72802: PPUSH
72803: PPUSH
72804: PPUSH
72805: PPUSH
// if not unit or not hexes then
72806: LD_VAR 0 1
72810: NOT
72811: PUSH
72812: LD_VAR 0 2
72816: NOT
72817: OR
72818: IFFALSE 72822
// exit ;
72820: GO 72945
// dist := 9999 ;
72822: LD_ADDR_VAR 0 5
72826: PUSH
72827: LD_INT 9999
72829: ST_TO_ADDR
// for i = 1 to hexes do
72830: LD_ADDR_VAR 0 4
72834: PUSH
72835: DOUBLE
72836: LD_INT 1
72838: DEC
72839: ST_TO_ADDR
72840: LD_VAR 0 2
72844: PUSH
72845: FOR_TO
72846: IFFALSE 72933
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
72848: LD_ADDR_VAR 0 6
72852: PUSH
72853: LD_VAR 0 1
72857: PPUSH
72858: LD_VAR 0 2
72862: PUSH
72863: LD_VAR 0 4
72867: ARRAY
72868: PUSH
72869: LD_INT 1
72871: ARRAY
72872: PPUSH
72873: LD_VAR 0 2
72877: PUSH
72878: LD_VAR 0 4
72882: ARRAY
72883: PUSH
72884: LD_INT 2
72886: ARRAY
72887: PPUSH
72888: CALL_OW 297
72892: ST_TO_ADDR
// if tdist < dist then
72893: LD_VAR 0 6
72897: PUSH
72898: LD_VAR 0 5
72902: LESS
72903: IFFALSE 72931
// begin hex := hexes [ i ] ;
72905: LD_ADDR_VAR 0 8
72909: PUSH
72910: LD_VAR 0 2
72914: PUSH
72915: LD_VAR 0 4
72919: ARRAY
72920: ST_TO_ADDR
// dist := tdist ;
72921: LD_ADDR_VAR 0 5
72925: PUSH
72926: LD_VAR 0 6
72930: ST_TO_ADDR
// end ; end ;
72931: GO 72845
72933: POP
72934: POP
// result := hex ;
72935: LD_ADDR_VAR 0 3
72939: PUSH
72940: LD_VAR 0 8
72944: ST_TO_ADDR
// end ;
72945: LD_VAR 0 3
72949: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72950: LD_INT 0
72952: PPUSH
72953: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72954: LD_VAR 0 1
72958: NOT
72959: PUSH
72960: LD_VAR 0 1
72964: PUSH
72965: LD_INT 21
72967: PUSH
72968: LD_INT 2
72970: PUSH
72971: EMPTY
72972: LIST
72973: LIST
72974: PUSH
72975: LD_INT 23
72977: PUSH
72978: LD_INT 2
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PPUSH
72989: CALL_OW 69
72993: IN
72994: NOT
72995: OR
72996: IFFALSE 73000
// exit ;
72998: GO 73047
// for i = 1 to 3 do
73000: LD_ADDR_VAR 0 3
73004: PUSH
73005: DOUBLE
73006: LD_INT 1
73008: DEC
73009: ST_TO_ADDR
73010: LD_INT 3
73012: PUSH
73013: FOR_TO
73014: IFFALSE 73045
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
73016: LD_VAR 0 1
73020: PPUSH
73021: CALL_OW 250
73025: PPUSH
73026: LD_VAR 0 1
73030: PPUSH
73031: CALL_OW 251
73035: PPUSH
73036: LD_INT 1
73038: PPUSH
73039: CALL_OW 453
73043: GO 73013
73045: POP
73046: POP
// end ;
73047: LD_VAR 0 2
73051: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
73052: LD_INT 0
73054: PPUSH
73055: PPUSH
73056: PPUSH
73057: PPUSH
73058: PPUSH
73059: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
73060: LD_VAR 0 1
73064: NOT
73065: PUSH
73066: LD_VAR 0 2
73070: NOT
73071: OR
73072: PUSH
73073: LD_VAR 0 1
73077: PPUSH
73078: CALL_OW 314
73082: OR
73083: IFFALSE 73087
// exit ;
73085: GO 73554
// if GetLives ( i ) < 250 then
73087: LD_VAR 0 4
73091: PPUSH
73092: CALL_OW 256
73096: PUSH
73097: LD_INT 250
73099: LESS
73100: IFFALSE 73113
// begin ComAutodestruct ( i ) ;
73102: LD_VAR 0 4
73106: PPUSH
73107: CALL 72950 0 1
// exit ;
73111: GO 73554
// end ; x := GetX ( enemy_unit ) ;
73113: LD_ADDR_VAR 0 7
73117: PUSH
73118: LD_VAR 0 2
73122: PPUSH
73123: CALL_OW 250
73127: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
73128: LD_ADDR_VAR 0 8
73132: PUSH
73133: LD_VAR 0 2
73137: PPUSH
73138: CALL_OW 251
73142: ST_TO_ADDR
// if not x or not y then
73143: LD_VAR 0 7
73147: NOT
73148: PUSH
73149: LD_VAR 0 8
73153: NOT
73154: OR
73155: IFFALSE 73159
// exit ;
73157: GO 73554
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
73159: LD_ADDR_VAR 0 6
73163: PUSH
73164: LD_VAR 0 7
73168: PPUSH
73169: LD_INT 0
73171: PPUSH
73172: LD_INT 4
73174: PPUSH
73175: CALL_OW 272
73179: PUSH
73180: LD_VAR 0 8
73184: PPUSH
73185: LD_INT 0
73187: PPUSH
73188: LD_INT 4
73190: PPUSH
73191: CALL_OW 273
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: LD_VAR 0 7
73204: PPUSH
73205: LD_INT 1
73207: PPUSH
73208: LD_INT 4
73210: PPUSH
73211: CALL_OW 272
73215: PUSH
73216: LD_VAR 0 8
73220: PPUSH
73221: LD_INT 1
73223: PPUSH
73224: LD_INT 4
73226: PPUSH
73227: CALL_OW 273
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: PUSH
73236: LD_VAR 0 7
73240: PPUSH
73241: LD_INT 2
73243: PPUSH
73244: LD_INT 4
73246: PPUSH
73247: CALL_OW 272
73251: PUSH
73252: LD_VAR 0 8
73256: PPUSH
73257: LD_INT 2
73259: PPUSH
73260: LD_INT 4
73262: PPUSH
73263: CALL_OW 273
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: PUSH
73272: LD_VAR 0 7
73276: PPUSH
73277: LD_INT 3
73279: PPUSH
73280: LD_INT 4
73282: PPUSH
73283: CALL_OW 272
73287: PUSH
73288: LD_VAR 0 8
73292: PPUSH
73293: LD_INT 3
73295: PPUSH
73296: LD_INT 4
73298: PPUSH
73299: CALL_OW 273
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PUSH
73308: LD_VAR 0 7
73312: PPUSH
73313: LD_INT 4
73315: PPUSH
73316: LD_INT 4
73318: PPUSH
73319: CALL_OW 272
73323: PUSH
73324: LD_VAR 0 8
73328: PPUSH
73329: LD_INT 4
73331: PPUSH
73332: LD_INT 4
73334: PPUSH
73335: CALL_OW 273
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: LD_VAR 0 7
73348: PPUSH
73349: LD_INT 5
73351: PPUSH
73352: LD_INT 4
73354: PPUSH
73355: CALL_OW 272
73359: PUSH
73360: LD_VAR 0 8
73364: PPUSH
73365: LD_INT 5
73367: PPUSH
73368: LD_INT 4
73370: PPUSH
73371: CALL_OW 273
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: LIST
73384: LIST
73385: LIST
73386: LIST
73387: ST_TO_ADDR
// for i = tmp downto 1 do
73388: LD_ADDR_VAR 0 4
73392: PUSH
73393: DOUBLE
73394: LD_VAR 0 6
73398: INC
73399: ST_TO_ADDR
73400: LD_INT 1
73402: PUSH
73403: FOR_DOWNTO
73404: IFFALSE 73505
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
73406: LD_VAR 0 6
73410: PUSH
73411: LD_VAR 0 4
73415: ARRAY
73416: PUSH
73417: LD_INT 1
73419: ARRAY
73420: PPUSH
73421: LD_VAR 0 6
73425: PUSH
73426: LD_VAR 0 4
73430: ARRAY
73431: PUSH
73432: LD_INT 2
73434: ARRAY
73435: PPUSH
73436: CALL_OW 488
73440: NOT
73441: PUSH
73442: LD_VAR 0 6
73446: PUSH
73447: LD_VAR 0 4
73451: ARRAY
73452: PUSH
73453: LD_INT 1
73455: ARRAY
73456: PPUSH
73457: LD_VAR 0 6
73461: PUSH
73462: LD_VAR 0 4
73466: ARRAY
73467: PUSH
73468: LD_INT 2
73470: ARRAY
73471: PPUSH
73472: CALL_OW 428
73476: PUSH
73477: LD_INT 0
73479: NONEQUAL
73480: OR
73481: IFFALSE 73503
// tmp := Delete ( tmp , i ) ;
73483: LD_ADDR_VAR 0 6
73487: PUSH
73488: LD_VAR 0 6
73492: PPUSH
73493: LD_VAR 0 4
73497: PPUSH
73498: CALL_OW 3
73502: ST_TO_ADDR
73503: GO 73403
73505: POP
73506: POP
// j := GetClosestHex ( unit , tmp ) ;
73507: LD_ADDR_VAR 0 5
73511: PUSH
73512: LD_VAR 0 1
73516: PPUSH
73517: LD_VAR 0 6
73521: PPUSH
73522: CALL 72798 0 2
73526: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
73527: LD_VAR 0 1
73531: PPUSH
73532: LD_VAR 0 5
73536: PUSH
73537: LD_INT 1
73539: ARRAY
73540: PPUSH
73541: LD_VAR 0 5
73545: PUSH
73546: LD_INT 2
73548: ARRAY
73549: PPUSH
73550: CALL_OW 111
// end ;
73554: LD_VAR 0 3
73558: RET
// export function PrepareApemanSoldier ( ) ; begin
73559: LD_INT 0
73561: PPUSH
// uc_nation := 0 ;
73562: LD_ADDR_OWVAR 21
73566: PUSH
73567: LD_INT 0
73569: ST_TO_ADDR
// hc_sex := sex_male ;
73570: LD_ADDR_OWVAR 27
73574: PUSH
73575: LD_INT 1
73577: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
73578: LD_ADDR_OWVAR 28
73582: PUSH
73583: LD_INT 15
73585: ST_TO_ADDR
// hc_gallery :=  ;
73586: LD_ADDR_OWVAR 33
73590: PUSH
73591: LD_STRING 
73593: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73594: LD_ADDR_OWVAR 31
73598: PUSH
73599: LD_INT 0
73601: PPUSH
73602: LD_INT 3
73604: PPUSH
73605: CALL_OW 12
73609: PUSH
73610: LD_INT 0
73612: PPUSH
73613: LD_INT 3
73615: PPUSH
73616: CALL_OW 12
73620: PUSH
73621: LD_INT 0
73623: PUSH
73624: LD_INT 0
73626: PUSH
73627: EMPTY
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: ST_TO_ADDR
// end ;
73633: LD_VAR 0 1
73637: RET
// export function PrepareApemanEngineer ( ) ; begin
73638: LD_INT 0
73640: PPUSH
// uc_nation := 0 ;
73641: LD_ADDR_OWVAR 21
73645: PUSH
73646: LD_INT 0
73648: ST_TO_ADDR
// hc_sex := sex_male ;
73649: LD_ADDR_OWVAR 27
73653: PUSH
73654: LD_INT 1
73656: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
73657: LD_ADDR_OWVAR 28
73661: PUSH
73662: LD_INT 16
73664: ST_TO_ADDR
// hc_gallery :=  ;
73665: LD_ADDR_OWVAR 33
73669: PUSH
73670: LD_STRING 
73672: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73673: LD_ADDR_OWVAR 31
73677: PUSH
73678: LD_INT 0
73680: PPUSH
73681: LD_INT 3
73683: PPUSH
73684: CALL_OW 12
73688: PUSH
73689: LD_INT 0
73691: PPUSH
73692: LD_INT 3
73694: PPUSH
73695: CALL_OW 12
73699: PUSH
73700: LD_INT 0
73702: PUSH
73703: LD_INT 0
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: ST_TO_ADDR
// end ;
73712: LD_VAR 0 1
73716: RET
// export function PrepareApeman ( agressivity ) ; begin
73717: LD_INT 0
73719: PPUSH
// uc_side := 0 ;
73720: LD_ADDR_OWVAR 20
73724: PUSH
73725: LD_INT 0
73727: ST_TO_ADDR
// uc_nation := 0 ;
73728: LD_ADDR_OWVAR 21
73732: PUSH
73733: LD_INT 0
73735: ST_TO_ADDR
// hc_sex := sex_male ;
73736: LD_ADDR_OWVAR 27
73740: PUSH
73741: LD_INT 1
73743: ST_TO_ADDR
// hc_class := class_apeman ;
73744: LD_ADDR_OWVAR 28
73748: PUSH
73749: LD_INT 12
73751: ST_TO_ADDR
// hc_gallery :=  ;
73752: LD_ADDR_OWVAR 33
73756: PUSH
73757: LD_STRING 
73759: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73760: LD_ADDR_OWVAR 35
73764: PUSH
73765: LD_VAR 0 1
73769: NEG
73770: PPUSH
73771: LD_VAR 0 1
73775: PPUSH
73776: CALL_OW 12
73780: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
73781: LD_ADDR_OWVAR 31
73785: PUSH
73786: LD_INT 0
73788: PPUSH
73789: LD_INT 3
73791: PPUSH
73792: CALL_OW 12
73796: PUSH
73797: LD_INT 0
73799: PPUSH
73800: LD_INT 3
73802: PPUSH
73803: CALL_OW 12
73807: PUSH
73808: LD_INT 0
73810: PUSH
73811: LD_INT 0
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: ST_TO_ADDR
// end ;
73820: LD_VAR 0 2
73824: RET
// export function PrepareTiger ( agressivity ) ; begin
73825: LD_INT 0
73827: PPUSH
// uc_side := 0 ;
73828: LD_ADDR_OWVAR 20
73832: PUSH
73833: LD_INT 0
73835: ST_TO_ADDR
// uc_nation := 0 ;
73836: LD_ADDR_OWVAR 21
73840: PUSH
73841: LD_INT 0
73843: ST_TO_ADDR
// hc_class := class_tiger ;
73844: LD_ADDR_OWVAR 28
73848: PUSH
73849: LD_INT 14
73851: ST_TO_ADDR
// hc_gallery :=  ;
73852: LD_ADDR_OWVAR 33
73856: PUSH
73857: LD_STRING 
73859: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
73860: LD_ADDR_OWVAR 35
73864: PUSH
73865: LD_VAR 0 1
73869: NEG
73870: PPUSH
73871: LD_VAR 0 1
73875: PPUSH
73876: CALL_OW 12
73880: ST_TO_ADDR
// end ;
73881: LD_VAR 0 2
73885: RET
// export function PrepareEnchidna ( ) ; begin
73886: LD_INT 0
73888: PPUSH
// uc_side := 0 ;
73889: LD_ADDR_OWVAR 20
73893: PUSH
73894: LD_INT 0
73896: ST_TO_ADDR
// uc_nation := 0 ;
73897: LD_ADDR_OWVAR 21
73901: PUSH
73902: LD_INT 0
73904: ST_TO_ADDR
// hc_class := class_baggie ;
73905: LD_ADDR_OWVAR 28
73909: PUSH
73910: LD_INT 13
73912: ST_TO_ADDR
// hc_gallery :=  ;
73913: LD_ADDR_OWVAR 33
73917: PUSH
73918: LD_STRING 
73920: ST_TO_ADDR
// end ;
73921: LD_VAR 0 1
73925: RET
// export function PrepareFrog ( ) ; begin
73926: LD_INT 0
73928: PPUSH
// uc_side := 0 ;
73929: LD_ADDR_OWVAR 20
73933: PUSH
73934: LD_INT 0
73936: ST_TO_ADDR
// uc_nation := 0 ;
73937: LD_ADDR_OWVAR 21
73941: PUSH
73942: LD_INT 0
73944: ST_TO_ADDR
// hc_class := class_frog ;
73945: LD_ADDR_OWVAR 28
73949: PUSH
73950: LD_INT 19
73952: ST_TO_ADDR
// hc_gallery :=  ;
73953: LD_ADDR_OWVAR 33
73957: PUSH
73958: LD_STRING 
73960: ST_TO_ADDR
// end ;
73961: LD_VAR 0 1
73965: RET
// export function PrepareFish ( ) ; begin
73966: LD_INT 0
73968: PPUSH
// uc_side := 0 ;
73969: LD_ADDR_OWVAR 20
73973: PUSH
73974: LD_INT 0
73976: ST_TO_ADDR
// uc_nation := 0 ;
73977: LD_ADDR_OWVAR 21
73981: PUSH
73982: LD_INT 0
73984: ST_TO_ADDR
// hc_class := class_fish ;
73985: LD_ADDR_OWVAR 28
73989: PUSH
73990: LD_INT 20
73992: ST_TO_ADDR
// hc_gallery :=  ;
73993: LD_ADDR_OWVAR 33
73997: PUSH
73998: LD_STRING 
74000: ST_TO_ADDR
// end ;
74001: LD_VAR 0 1
74005: RET
// export function PrepareBird ( ) ; begin
74006: LD_INT 0
74008: PPUSH
// uc_side := 0 ;
74009: LD_ADDR_OWVAR 20
74013: PUSH
74014: LD_INT 0
74016: ST_TO_ADDR
// uc_nation := 0 ;
74017: LD_ADDR_OWVAR 21
74021: PUSH
74022: LD_INT 0
74024: ST_TO_ADDR
// hc_class := class_phororhacos ;
74025: LD_ADDR_OWVAR 28
74029: PUSH
74030: LD_INT 18
74032: ST_TO_ADDR
// hc_gallery :=  ;
74033: LD_ADDR_OWVAR 33
74037: PUSH
74038: LD_STRING 
74040: ST_TO_ADDR
// end ;
74041: LD_VAR 0 1
74045: RET
// export function PrepareHorse ( ) ; begin
74046: LD_INT 0
74048: PPUSH
// uc_side := 0 ;
74049: LD_ADDR_OWVAR 20
74053: PUSH
74054: LD_INT 0
74056: ST_TO_ADDR
// uc_nation := 0 ;
74057: LD_ADDR_OWVAR 21
74061: PUSH
74062: LD_INT 0
74064: ST_TO_ADDR
// hc_class := class_horse ;
74065: LD_ADDR_OWVAR 28
74069: PUSH
74070: LD_INT 21
74072: ST_TO_ADDR
// hc_gallery :=  ;
74073: LD_ADDR_OWVAR 33
74077: PUSH
74078: LD_STRING 
74080: ST_TO_ADDR
// end ;
74081: LD_VAR 0 1
74085: RET
// export function PrepareMastodont ( ) ; begin
74086: LD_INT 0
74088: PPUSH
// uc_side := 0 ;
74089: LD_ADDR_OWVAR 20
74093: PUSH
74094: LD_INT 0
74096: ST_TO_ADDR
// uc_nation := 0 ;
74097: LD_ADDR_OWVAR 21
74101: PUSH
74102: LD_INT 0
74104: ST_TO_ADDR
// vc_chassis := class_mastodont ;
74105: LD_ADDR_OWVAR 37
74109: PUSH
74110: LD_INT 31
74112: ST_TO_ADDR
// vc_control := control_rider ;
74113: LD_ADDR_OWVAR 38
74117: PUSH
74118: LD_INT 4
74120: ST_TO_ADDR
// end ;
74121: LD_VAR 0 1
74125: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
74126: LD_INT 0
74128: PPUSH
74129: PPUSH
74130: PPUSH
// uc_side = 0 ;
74131: LD_ADDR_OWVAR 20
74135: PUSH
74136: LD_INT 0
74138: ST_TO_ADDR
// uc_nation = 0 ;
74139: LD_ADDR_OWVAR 21
74143: PUSH
74144: LD_INT 0
74146: ST_TO_ADDR
// InitHc_All ( ) ;
74147: CALL_OW 584
// InitVc ;
74151: CALL_OW 20
// if mastodonts then
74155: LD_VAR 0 6
74159: IFFALSE 74226
// for i = 1 to mastodonts do
74161: LD_ADDR_VAR 0 11
74165: PUSH
74166: DOUBLE
74167: LD_INT 1
74169: DEC
74170: ST_TO_ADDR
74171: LD_VAR 0 6
74175: PUSH
74176: FOR_TO
74177: IFFALSE 74224
// begin vc_chassis := 31 ;
74179: LD_ADDR_OWVAR 37
74183: PUSH
74184: LD_INT 31
74186: ST_TO_ADDR
// vc_control := control_rider ;
74187: LD_ADDR_OWVAR 38
74191: PUSH
74192: LD_INT 4
74194: ST_TO_ADDR
// animal := CreateVehicle ;
74195: LD_ADDR_VAR 0 12
74199: PUSH
74200: CALL_OW 45
74204: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74205: LD_VAR 0 12
74209: PPUSH
74210: LD_VAR 0 8
74214: PPUSH
74215: LD_INT 0
74217: PPUSH
74218: CALL 76354 0 3
// end ;
74222: GO 74176
74224: POP
74225: POP
// if horses then
74226: LD_VAR 0 5
74230: IFFALSE 74297
// for i = 1 to horses do
74232: LD_ADDR_VAR 0 11
74236: PUSH
74237: DOUBLE
74238: LD_INT 1
74240: DEC
74241: ST_TO_ADDR
74242: LD_VAR 0 5
74246: PUSH
74247: FOR_TO
74248: IFFALSE 74295
// begin hc_class := 21 ;
74250: LD_ADDR_OWVAR 28
74254: PUSH
74255: LD_INT 21
74257: ST_TO_ADDR
// hc_gallery :=  ;
74258: LD_ADDR_OWVAR 33
74262: PUSH
74263: LD_STRING 
74265: ST_TO_ADDR
// animal := CreateHuman ;
74266: LD_ADDR_VAR 0 12
74270: PUSH
74271: CALL_OW 44
74275: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74276: LD_VAR 0 12
74280: PPUSH
74281: LD_VAR 0 8
74285: PPUSH
74286: LD_INT 0
74288: PPUSH
74289: CALL 76354 0 3
// end ;
74293: GO 74247
74295: POP
74296: POP
// if birds then
74297: LD_VAR 0 1
74301: IFFALSE 74368
// for i = 1 to birds do
74303: LD_ADDR_VAR 0 11
74307: PUSH
74308: DOUBLE
74309: LD_INT 1
74311: DEC
74312: ST_TO_ADDR
74313: LD_VAR 0 1
74317: PUSH
74318: FOR_TO
74319: IFFALSE 74366
// begin hc_class := 18 ;
74321: LD_ADDR_OWVAR 28
74325: PUSH
74326: LD_INT 18
74328: ST_TO_ADDR
// hc_gallery =  ;
74329: LD_ADDR_OWVAR 33
74333: PUSH
74334: LD_STRING 
74336: ST_TO_ADDR
// animal := CreateHuman ;
74337: LD_ADDR_VAR 0 12
74341: PUSH
74342: CALL_OW 44
74346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74347: LD_VAR 0 12
74351: PPUSH
74352: LD_VAR 0 8
74356: PPUSH
74357: LD_INT 0
74359: PPUSH
74360: CALL 76354 0 3
// end ;
74364: GO 74318
74366: POP
74367: POP
// if tigers then
74368: LD_VAR 0 2
74372: IFFALSE 74456
// for i = 1 to tigers do
74374: LD_ADDR_VAR 0 11
74378: PUSH
74379: DOUBLE
74380: LD_INT 1
74382: DEC
74383: ST_TO_ADDR
74384: LD_VAR 0 2
74388: PUSH
74389: FOR_TO
74390: IFFALSE 74454
// begin hc_class = class_tiger ;
74392: LD_ADDR_OWVAR 28
74396: PUSH
74397: LD_INT 14
74399: ST_TO_ADDR
// hc_gallery =  ;
74400: LD_ADDR_OWVAR 33
74404: PUSH
74405: LD_STRING 
74407: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
74408: LD_ADDR_OWVAR 35
74412: PUSH
74413: LD_INT 7
74415: NEG
74416: PPUSH
74417: LD_INT 7
74419: PPUSH
74420: CALL_OW 12
74424: ST_TO_ADDR
// animal := CreateHuman ;
74425: LD_ADDR_VAR 0 12
74429: PUSH
74430: CALL_OW 44
74434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74435: LD_VAR 0 12
74439: PPUSH
74440: LD_VAR 0 8
74444: PPUSH
74445: LD_INT 0
74447: PPUSH
74448: CALL 76354 0 3
// end ;
74452: GO 74389
74454: POP
74455: POP
// if apemans then
74456: LD_VAR 0 3
74460: IFFALSE 74583
// for i = 1 to apemans do
74462: LD_ADDR_VAR 0 11
74466: PUSH
74467: DOUBLE
74468: LD_INT 1
74470: DEC
74471: ST_TO_ADDR
74472: LD_VAR 0 3
74476: PUSH
74477: FOR_TO
74478: IFFALSE 74581
// begin hc_class = class_apeman ;
74480: LD_ADDR_OWVAR 28
74484: PUSH
74485: LD_INT 12
74487: ST_TO_ADDR
// hc_gallery =  ;
74488: LD_ADDR_OWVAR 33
74492: PUSH
74493: LD_STRING 
74495: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
74496: LD_ADDR_OWVAR 35
74500: PUSH
74501: LD_INT 2
74503: NEG
74504: PPUSH
74505: LD_INT 2
74507: PPUSH
74508: CALL_OW 12
74512: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
74513: LD_ADDR_OWVAR 31
74517: PUSH
74518: LD_INT 1
74520: PPUSH
74521: LD_INT 3
74523: PPUSH
74524: CALL_OW 12
74528: PUSH
74529: LD_INT 1
74531: PPUSH
74532: LD_INT 3
74534: PPUSH
74535: CALL_OW 12
74539: PUSH
74540: LD_INT 0
74542: PUSH
74543: LD_INT 0
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: LIST
74550: LIST
74551: ST_TO_ADDR
// animal := CreateHuman ;
74552: LD_ADDR_VAR 0 12
74556: PUSH
74557: CALL_OW 44
74561: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74562: LD_VAR 0 12
74566: PPUSH
74567: LD_VAR 0 8
74571: PPUSH
74572: LD_INT 0
74574: PPUSH
74575: CALL 76354 0 3
// end ;
74579: GO 74477
74581: POP
74582: POP
// if enchidnas then
74583: LD_VAR 0 4
74587: IFFALSE 74654
// for i = 1 to enchidnas do
74589: LD_ADDR_VAR 0 11
74593: PUSH
74594: DOUBLE
74595: LD_INT 1
74597: DEC
74598: ST_TO_ADDR
74599: LD_VAR 0 4
74603: PUSH
74604: FOR_TO
74605: IFFALSE 74652
// begin hc_class = 13 ;
74607: LD_ADDR_OWVAR 28
74611: PUSH
74612: LD_INT 13
74614: ST_TO_ADDR
// hc_gallery =  ;
74615: LD_ADDR_OWVAR 33
74619: PUSH
74620: LD_STRING 
74622: ST_TO_ADDR
// animal := CreateHuman ;
74623: LD_ADDR_VAR 0 12
74627: PUSH
74628: CALL_OW 44
74632: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
74633: LD_VAR 0 12
74637: PPUSH
74638: LD_VAR 0 8
74642: PPUSH
74643: LD_INT 0
74645: PPUSH
74646: CALL 76354 0 3
// end ;
74650: GO 74604
74652: POP
74653: POP
// if fishes then
74654: LD_VAR 0 7
74658: IFFALSE 74725
// for i = 1 to fishes do
74660: LD_ADDR_VAR 0 11
74664: PUSH
74665: DOUBLE
74666: LD_INT 1
74668: DEC
74669: ST_TO_ADDR
74670: LD_VAR 0 7
74674: PUSH
74675: FOR_TO
74676: IFFALSE 74723
// begin hc_class = 20 ;
74678: LD_ADDR_OWVAR 28
74682: PUSH
74683: LD_INT 20
74685: ST_TO_ADDR
// hc_gallery =  ;
74686: LD_ADDR_OWVAR 33
74690: PUSH
74691: LD_STRING 
74693: ST_TO_ADDR
// animal := CreateHuman ;
74694: LD_ADDR_VAR 0 12
74698: PUSH
74699: CALL_OW 44
74703: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
74704: LD_VAR 0 12
74708: PPUSH
74709: LD_VAR 0 9
74713: PPUSH
74714: LD_INT 0
74716: PPUSH
74717: CALL 76354 0 3
// end ;
74721: GO 74675
74723: POP
74724: POP
// end ;
74725: LD_VAR 0 10
74729: RET
// export function WantHeal ( sci , unit ) ; begin
74730: LD_INT 0
74732: PPUSH
// if GetTaskList ( sci ) > 0 then
74733: LD_VAR 0 1
74737: PPUSH
74738: CALL_OW 437
74742: PUSH
74743: LD_INT 0
74745: GREATER
74746: IFFALSE 74816
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
74748: LD_VAR 0 1
74752: PPUSH
74753: CALL_OW 437
74757: PUSH
74758: LD_INT 1
74760: ARRAY
74761: PUSH
74762: LD_INT 1
74764: ARRAY
74765: PUSH
74766: LD_STRING l
74768: EQUAL
74769: PUSH
74770: LD_VAR 0 1
74774: PPUSH
74775: CALL_OW 437
74779: PUSH
74780: LD_INT 1
74782: ARRAY
74783: PUSH
74784: LD_INT 4
74786: ARRAY
74787: PUSH
74788: LD_VAR 0 2
74792: EQUAL
74793: AND
74794: IFFALSE 74806
// result := true else
74796: LD_ADDR_VAR 0 3
74800: PUSH
74801: LD_INT 1
74803: ST_TO_ADDR
74804: GO 74814
// result := false ;
74806: LD_ADDR_VAR 0 3
74810: PUSH
74811: LD_INT 0
74813: ST_TO_ADDR
// end else
74814: GO 74824
// result := false ;
74816: LD_ADDR_VAR 0 3
74820: PUSH
74821: LD_INT 0
74823: ST_TO_ADDR
// end ;
74824: LD_VAR 0 3
74828: RET
// export function HealTarget ( sci ) ; begin
74829: LD_INT 0
74831: PPUSH
// if not sci then
74832: LD_VAR 0 1
74836: NOT
74837: IFFALSE 74841
// exit ;
74839: GO 74906
// result := 0 ;
74841: LD_ADDR_VAR 0 2
74845: PUSH
74846: LD_INT 0
74848: ST_TO_ADDR
// if GetTaskList ( sci ) then
74849: LD_VAR 0 1
74853: PPUSH
74854: CALL_OW 437
74858: IFFALSE 74906
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
74860: LD_VAR 0 1
74864: PPUSH
74865: CALL_OW 437
74869: PUSH
74870: LD_INT 1
74872: ARRAY
74873: PUSH
74874: LD_INT 1
74876: ARRAY
74877: PUSH
74878: LD_STRING l
74880: EQUAL
74881: IFFALSE 74906
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74883: LD_ADDR_VAR 0 2
74887: PUSH
74888: LD_VAR 0 1
74892: PPUSH
74893: CALL_OW 437
74897: PUSH
74898: LD_INT 1
74900: ARRAY
74901: PUSH
74902: LD_INT 4
74904: ARRAY
74905: ST_TO_ADDR
// end ;
74906: LD_VAR 0 2
74910: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74911: LD_INT 0
74913: PPUSH
74914: PPUSH
74915: PPUSH
74916: PPUSH
// if not base_units then
74917: LD_VAR 0 1
74921: NOT
74922: IFFALSE 74926
// exit ;
74924: GO 75013
// result := false ;
74926: LD_ADDR_VAR 0 2
74930: PUSH
74931: LD_INT 0
74933: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74934: LD_ADDR_VAR 0 5
74938: PUSH
74939: LD_VAR 0 1
74943: PPUSH
74944: LD_INT 21
74946: PUSH
74947: LD_INT 3
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: PPUSH
74954: CALL_OW 72
74958: ST_TO_ADDR
// if not tmp then
74959: LD_VAR 0 5
74963: NOT
74964: IFFALSE 74968
// exit ;
74966: GO 75013
// for i in tmp do
74968: LD_ADDR_VAR 0 3
74972: PUSH
74973: LD_VAR 0 5
74977: PUSH
74978: FOR_IN
74979: IFFALSE 75011
// begin result := EnemyInRange ( i , 22 ) ;
74981: LD_ADDR_VAR 0 2
74985: PUSH
74986: LD_VAR 0 3
74990: PPUSH
74991: LD_INT 22
74993: PPUSH
74994: CALL 72600 0 2
74998: ST_TO_ADDR
// if result then
74999: LD_VAR 0 2
75003: IFFALSE 75009
// exit ;
75005: POP
75006: POP
75007: GO 75013
// end ;
75009: GO 74978
75011: POP
75012: POP
// end ;
75013: LD_VAR 0 2
75017: RET
// export function FilterByTag ( units , tag ) ; begin
75018: LD_INT 0
75020: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
75021: LD_ADDR_VAR 0 3
75025: PUSH
75026: LD_VAR 0 1
75030: PPUSH
75031: LD_INT 120
75033: PUSH
75034: LD_VAR 0 2
75038: PUSH
75039: EMPTY
75040: LIST
75041: LIST
75042: PPUSH
75043: CALL_OW 72
75047: ST_TO_ADDR
// end ;
75048: LD_VAR 0 3
75052: RET
// export function IsDriver ( un ) ; begin
75053: LD_INT 0
75055: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
75056: LD_ADDR_VAR 0 2
75060: PUSH
75061: LD_VAR 0 1
75065: PUSH
75066: LD_INT 55
75068: PUSH
75069: EMPTY
75070: LIST
75071: PPUSH
75072: CALL_OW 69
75076: IN
75077: ST_TO_ADDR
// end ;
75078: LD_VAR 0 2
75082: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
75083: LD_INT 0
75085: PPUSH
75086: PPUSH
// list := [ ] ;
75087: LD_ADDR_VAR 0 5
75091: PUSH
75092: EMPTY
75093: ST_TO_ADDR
// case d of 0 :
75094: LD_VAR 0 3
75098: PUSH
75099: LD_INT 0
75101: DOUBLE
75102: EQUAL
75103: IFTRUE 75107
75105: GO 75240
75107: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
75108: LD_ADDR_VAR 0 5
75112: PUSH
75113: LD_VAR 0 1
75117: PUSH
75118: LD_INT 4
75120: MINUS
75121: PUSH
75122: LD_VAR 0 2
75126: PUSH
75127: LD_INT 4
75129: MINUS
75130: PUSH
75131: LD_INT 2
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: LIST
75138: PUSH
75139: LD_VAR 0 1
75143: PUSH
75144: LD_INT 3
75146: MINUS
75147: PUSH
75148: LD_VAR 0 2
75152: PUSH
75153: LD_INT 1
75155: PUSH
75156: EMPTY
75157: LIST
75158: LIST
75159: LIST
75160: PUSH
75161: LD_VAR 0 1
75165: PUSH
75166: LD_INT 4
75168: PLUS
75169: PUSH
75170: LD_VAR 0 2
75174: PUSH
75175: LD_INT 4
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: LIST
75182: PUSH
75183: LD_VAR 0 1
75187: PUSH
75188: LD_INT 3
75190: PLUS
75191: PUSH
75192: LD_VAR 0 2
75196: PUSH
75197: LD_INT 3
75199: PLUS
75200: PUSH
75201: LD_INT 5
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: LIST
75208: PUSH
75209: LD_VAR 0 1
75213: PUSH
75214: LD_VAR 0 2
75218: PUSH
75219: LD_INT 4
75221: PLUS
75222: PUSH
75223: LD_INT 0
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: LIST
75230: PUSH
75231: EMPTY
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: LIST
75237: ST_TO_ADDR
// end ; 1 :
75238: GO 75938
75240: LD_INT 1
75242: DOUBLE
75243: EQUAL
75244: IFTRUE 75248
75246: GO 75381
75248: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
75249: LD_ADDR_VAR 0 5
75253: PUSH
75254: LD_VAR 0 1
75258: PUSH
75259: LD_VAR 0 2
75263: PUSH
75264: LD_INT 4
75266: MINUS
75267: PUSH
75268: LD_INT 3
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: LIST
75275: PUSH
75276: LD_VAR 0 1
75280: PUSH
75281: LD_INT 3
75283: MINUS
75284: PUSH
75285: LD_VAR 0 2
75289: PUSH
75290: LD_INT 3
75292: MINUS
75293: PUSH
75294: LD_INT 2
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: LIST
75301: PUSH
75302: LD_VAR 0 1
75306: PUSH
75307: LD_INT 4
75309: MINUS
75310: PUSH
75311: LD_VAR 0 2
75315: PUSH
75316: LD_INT 1
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: LIST
75323: PUSH
75324: LD_VAR 0 1
75328: PUSH
75329: LD_VAR 0 2
75333: PUSH
75334: LD_INT 3
75336: PLUS
75337: PUSH
75338: LD_INT 0
75340: PUSH
75341: EMPTY
75342: LIST
75343: LIST
75344: LIST
75345: PUSH
75346: LD_VAR 0 1
75350: PUSH
75351: LD_INT 4
75353: PLUS
75354: PUSH
75355: LD_VAR 0 2
75359: PUSH
75360: LD_INT 4
75362: PLUS
75363: PUSH
75364: LD_INT 5
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: LIST
75371: PUSH
75372: EMPTY
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: ST_TO_ADDR
// end ; 2 :
75379: GO 75938
75381: LD_INT 2
75383: DOUBLE
75384: EQUAL
75385: IFTRUE 75389
75387: GO 75518
75389: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
75390: LD_ADDR_VAR 0 5
75394: PUSH
75395: LD_VAR 0 1
75399: PUSH
75400: LD_VAR 0 2
75404: PUSH
75405: LD_INT 3
75407: MINUS
75408: PUSH
75409: LD_INT 3
75411: PUSH
75412: EMPTY
75413: LIST
75414: LIST
75415: LIST
75416: PUSH
75417: LD_VAR 0 1
75421: PUSH
75422: LD_INT 4
75424: PLUS
75425: PUSH
75426: LD_VAR 0 2
75430: PUSH
75431: LD_INT 4
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: LIST
75438: PUSH
75439: LD_VAR 0 1
75443: PUSH
75444: LD_VAR 0 2
75448: PUSH
75449: LD_INT 4
75451: PLUS
75452: PUSH
75453: LD_INT 0
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: LIST
75460: PUSH
75461: LD_VAR 0 1
75465: PUSH
75466: LD_INT 3
75468: MINUS
75469: PUSH
75470: LD_VAR 0 2
75474: PUSH
75475: LD_INT 1
75477: PUSH
75478: EMPTY
75479: LIST
75480: LIST
75481: LIST
75482: PUSH
75483: LD_VAR 0 1
75487: PUSH
75488: LD_INT 4
75490: MINUS
75491: PUSH
75492: LD_VAR 0 2
75496: PUSH
75497: LD_INT 4
75499: MINUS
75500: PUSH
75501: LD_INT 2
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: LIST
75508: PUSH
75509: EMPTY
75510: LIST
75511: LIST
75512: LIST
75513: LIST
75514: LIST
75515: ST_TO_ADDR
// end ; 3 :
75516: GO 75938
75518: LD_INT 3
75520: DOUBLE
75521: EQUAL
75522: IFTRUE 75526
75524: GO 75659
75526: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
75527: LD_ADDR_VAR 0 5
75531: PUSH
75532: LD_VAR 0 1
75536: PUSH
75537: LD_INT 3
75539: PLUS
75540: PUSH
75541: LD_VAR 0 2
75545: PUSH
75546: LD_INT 4
75548: PUSH
75549: EMPTY
75550: LIST
75551: LIST
75552: LIST
75553: PUSH
75554: LD_VAR 0 1
75558: PUSH
75559: LD_INT 4
75561: PLUS
75562: PUSH
75563: LD_VAR 0 2
75567: PUSH
75568: LD_INT 4
75570: PLUS
75571: PUSH
75572: LD_INT 5
75574: PUSH
75575: EMPTY
75576: LIST
75577: LIST
75578: LIST
75579: PUSH
75580: LD_VAR 0 1
75584: PUSH
75585: LD_INT 4
75587: MINUS
75588: PUSH
75589: LD_VAR 0 2
75593: PUSH
75594: LD_INT 1
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: LIST
75601: PUSH
75602: LD_VAR 0 1
75606: PUSH
75607: LD_VAR 0 2
75611: PUSH
75612: LD_INT 4
75614: MINUS
75615: PUSH
75616: LD_INT 3
75618: PUSH
75619: EMPTY
75620: LIST
75621: LIST
75622: LIST
75623: PUSH
75624: LD_VAR 0 1
75628: PUSH
75629: LD_INT 3
75631: MINUS
75632: PUSH
75633: LD_VAR 0 2
75637: PUSH
75638: LD_INT 3
75640: MINUS
75641: PUSH
75642: LD_INT 2
75644: PUSH
75645: EMPTY
75646: LIST
75647: LIST
75648: LIST
75649: PUSH
75650: EMPTY
75651: LIST
75652: LIST
75653: LIST
75654: LIST
75655: LIST
75656: ST_TO_ADDR
// end ; 4 :
75657: GO 75938
75659: LD_INT 4
75661: DOUBLE
75662: EQUAL
75663: IFTRUE 75667
75665: GO 75800
75667: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
75668: LD_ADDR_VAR 0 5
75672: PUSH
75673: LD_VAR 0 1
75677: PUSH
75678: LD_VAR 0 2
75682: PUSH
75683: LD_INT 4
75685: PLUS
75686: PUSH
75687: LD_INT 0
75689: PUSH
75690: EMPTY
75691: LIST
75692: LIST
75693: LIST
75694: PUSH
75695: LD_VAR 0 1
75699: PUSH
75700: LD_INT 3
75702: PLUS
75703: PUSH
75704: LD_VAR 0 2
75708: PUSH
75709: LD_INT 3
75711: PLUS
75712: PUSH
75713: LD_INT 5
75715: PUSH
75716: EMPTY
75717: LIST
75718: LIST
75719: LIST
75720: PUSH
75721: LD_VAR 0 1
75725: PUSH
75726: LD_INT 4
75728: PLUS
75729: PUSH
75730: LD_VAR 0 2
75734: PUSH
75735: LD_INT 4
75737: PUSH
75738: EMPTY
75739: LIST
75740: LIST
75741: LIST
75742: PUSH
75743: LD_VAR 0 1
75747: PUSH
75748: LD_VAR 0 2
75752: PUSH
75753: LD_INT 3
75755: MINUS
75756: PUSH
75757: LD_INT 3
75759: PUSH
75760: EMPTY
75761: LIST
75762: LIST
75763: LIST
75764: PUSH
75765: LD_VAR 0 1
75769: PUSH
75770: LD_INT 4
75772: MINUS
75773: PUSH
75774: LD_VAR 0 2
75778: PUSH
75779: LD_INT 4
75781: MINUS
75782: PUSH
75783: LD_INT 2
75785: PUSH
75786: EMPTY
75787: LIST
75788: LIST
75789: LIST
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: LIST
75795: LIST
75796: LIST
75797: ST_TO_ADDR
// end ; 5 :
75798: GO 75938
75800: LD_INT 5
75802: DOUBLE
75803: EQUAL
75804: IFTRUE 75808
75806: GO 75937
75808: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
75809: LD_ADDR_VAR 0 5
75813: PUSH
75814: LD_VAR 0 1
75818: PUSH
75819: LD_INT 4
75821: MINUS
75822: PUSH
75823: LD_VAR 0 2
75827: PUSH
75828: LD_INT 1
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: LIST
75835: PUSH
75836: LD_VAR 0 1
75840: PUSH
75841: LD_VAR 0 2
75845: PUSH
75846: LD_INT 4
75848: MINUS
75849: PUSH
75850: LD_INT 3
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: LIST
75857: PUSH
75858: LD_VAR 0 1
75862: PUSH
75863: LD_INT 4
75865: PLUS
75866: PUSH
75867: LD_VAR 0 2
75871: PUSH
75872: LD_INT 4
75874: PLUS
75875: PUSH
75876: LD_INT 5
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: LIST
75883: PUSH
75884: LD_VAR 0 1
75888: PUSH
75889: LD_INT 3
75891: PLUS
75892: PUSH
75893: LD_VAR 0 2
75897: PUSH
75898: LD_INT 4
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: LIST
75905: PUSH
75906: LD_VAR 0 1
75910: PUSH
75911: LD_VAR 0 2
75915: PUSH
75916: LD_INT 3
75918: PLUS
75919: PUSH
75920: LD_INT 0
75922: PUSH
75923: EMPTY
75924: LIST
75925: LIST
75926: LIST
75927: PUSH
75928: EMPTY
75929: LIST
75930: LIST
75931: LIST
75932: LIST
75933: LIST
75934: ST_TO_ADDR
// end ; end ;
75935: GO 75938
75937: POP
// result := list ;
75938: LD_ADDR_VAR 0 4
75942: PUSH
75943: LD_VAR 0 5
75947: ST_TO_ADDR
// end ;
75948: LD_VAR 0 4
75952: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75953: LD_INT 0
75955: PPUSH
75956: PPUSH
75957: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75958: LD_VAR 0 1
75962: NOT
75963: PUSH
75964: LD_VAR 0 2
75968: PUSH
75969: LD_INT 1
75971: PUSH
75972: LD_INT 2
75974: PUSH
75975: LD_INT 3
75977: PUSH
75978: LD_INT 4
75980: PUSH
75981: EMPTY
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: IN
75987: NOT
75988: OR
75989: IFFALSE 75993
// exit ;
75991: GO 76076
// tmp := [ ] ;
75993: LD_ADDR_VAR 0 5
75997: PUSH
75998: EMPTY
75999: ST_TO_ADDR
// for i in units do
76000: LD_ADDR_VAR 0 4
76004: PUSH
76005: LD_VAR 0 1
76009: PUSH
76010: FOR_IN
76011: IFFALSE 76045
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
76013: LD_ADDR_VAR 0 5
76017: PUSH
76018: LD_VAR 0 5
76022: PPUSH
76023: LD_VAR 0 4
76027: PPUSH
76028: LD_VAR 0 2
76032: PPUSH
76033: CALL_OW 259
76037: PPUSH
76038: CALL 77449 0 2
76042: ST_TO_ADDR
76043: GO 76010
76045: POP
76046: POP
// if not tmp then
76047: LD_VAR 0 5
76051: NOT
76052: IFFALSE 76056
// exit ;
76054: GO 76076
// result := SortListByListDesc ( units , tmp ) ;
76056: LD_ADDR_VAR 0 3
76060: PUSH
76061: LD_VAR 0 1
76065: PPUSH
76066: LD_VAR 0 5
76070: PPUSH
76071: CALL_OW 77
76075: ST_TO_ADDR
// end ;
76076: LD_VAR 0 3
76080: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
76081: LD_INT 0
76083: PPUSH
76084: PPUSH
76085: PPUSH
// result := false ;
76086: LD_ADDR_VAR 0 3
76090: PUSH
76091: LD_INT 0
76093: ST_TO_ADDR
// if not building then
76094: LD_VAR 0 2
76098: NOT
76099: IFFALSE 76103
// exit ;
76101: GO 76241
// x := GetX ( building ) ;
76103: LD_ADDR_VAR 0 4
76107: PUSH
76108: LD_VAR 0 2
76112: PPUSH
76113: CALL_OW 250
76117: ST_TO_ADDR
// y := GetY ( building ) ;
76118: LD_ADDR_VAR 0 5
76122: PUSH
76123: LD_VAR 0 2
76127: PPUSH
76128: CALL_OW 251
76132: ST_TO_ADDR
// if not x or not y then
76133: LD_VAR 0 4
76137: NOT
76138: PUSH
76139: LD_VAR 0 5
76143: NOT
76144: OR
76145: IFFALSE 76149
// exit ;
76147: GO 76241
// if GetTaskList ( unit ) then
76149: LD_VAR 0 1
76153: PPUSH
76154: CALL_OW 437
76158: IFFALSE 76241
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76160: LD_STRING e
76162: PUSH
76163: LD_VAR 0 1
76167: PPUSH
76168: CALL_OW 437
76172: PUSH
76173: LD_INT 1
76175: ARRAY
76176: PUSH
76177: LD_INT 1
76179: ARRAY
76180: EQUAL
76181: PUSH
76182: LD_VAR 0 4
76186: PUSH
76187: LD_VAR 0 1
76191: PPUSH
76192: CALL_OW 437
76196: PUSH
76197: LD_INT 1
76199: ARRAY
76200: PUSH
76201: LD_INT 2
76203: ARRAY
76204: EQUAL
76205: AND
76206: PUSH
76207: LD_VAR 0 5
76211: PUSH
76212: LD_VAR 0 1
76216: PPUSH
76217: CALL_OW 437
76221: PUSH
76222: LD_INT 1
76224: ARRAY
76225: PUSH
76226: LD_INT 3
76228: ARRAY
76229: EQUAL
76230: AND
76231: IFFALSE 76241
// result := true end ;
76233: LD_ADDR_VAR 0 3
76237: PUSH
76238: LD_INT 1
76240: ST_TO_ADDR
// end ;
76241: LD_VAR 0 3
76245: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
76246: LD_INT 0
76248: PPUSH
// result := false ;
76249: LD_ADDR_VAR 0 4
76253: PUSH
76254: LD_INT 0
76256: ST_TO_ADDR
// if GetTaskList ( unit ) then
76257: LD_VAR 0 1
76261: PPUSH
76262: CALL_OW 437
76266: IFFALSE 76349
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
76268: LD_STRING M
76270: PUSH
76271: LD_VAR 0 1
76275: PPUSH
76276: CALL_OW 437
76280: PUSH
76281: LD_INT 1
76283: ARRAY
76284: PUSH
76285: LD_INT 1
76287: ARRAY
76288: EQUAL
76289: PUSH
76290: LD_VAR 0 2
76294: PUSH
76295: LD_VAR 0 1
76299: PPUSH
76300: CALL_OW 437
76304: PUSH
76305: LD_INT 1
76307: ARRAY
76308: PUSH
76309: LD_INT 2
76311: ARRAY
76312: EQUAL
76313: AND
76314: PUSH
76315: LD_VAR 0 3
76319: PUSH
76320: LD_VAR 0 1
76324: PPUSH
76325: CALL_OW 437
76329: PUSH
76330: LD_INT 1
76332: ARRAY
76333: PUSH
76334: LD_INT 3
76336: ARRAY
76337: EQUAL
76338: AND
76339: IFFALSE 76349
// result := true ;
76341: LD_ADDR_VAR 0 4
76345: PUSH
76346: LD_INT 1
76348: ST_TO_ADDR
// end ; end ;
76349: LD_VAR 0 4
76353: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
76354: LD_INT 0
76356: PPUSH
76357: PPUSH
76358: PPUSH
76359: PPUSH
// if not unit or not area then
76360: LD_VAR 0 1
76364: NOT
76365: PUSH
76366: LD_VAR 0 2
76370: NOT
76371: OR
76372: IFFALSE 76376
// exit ;
76374: GO 76552
// tmp := AreaToList ( area , i ) ;
76376: LD_ADDR_VAR 0 6
76380: PUSH
76381: LD_VAR 0 2
76385: PPUSH
76386: LD_VAR 0 5
76390: PPUSH
76391: CALL_OW 517
76395: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
76396: LD_ADDR_VAR 0 5
76400: PUSH
76401: DOUBLE
76402: LD_INT 1
76404: DEC
76405: ST_TO_ADDR
76406: LD_VAR 0 6
76410: PUSH
76411: LD_INT 1
76413: ARRAY
76414: PUSH
76415: FOR_TO
76416: IFFALSE 76550
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
76418: LD_ADDR_VAR 0 7
76422: PUSH
76423: LD_VAR 0 6
76427: PUSH
76428: LD_INT 1
76430: ARRAY
76431: PUSH
76432: LD_VAR 0 5
76436: ARRAY
76437: PUSH
76438: LD_VAR 0 6
76442: PUSH
76443: LD_INT 2
76445: ARRAY
76446: PUSH
76447: LD_VAR 0 5
76451: ARRAY
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
76457: LD_INT 92
76459: PUSH
76460: LD_VAR 0 7
76464: PUSH
76465: LD_INT 1
76467: ARRAY
76468: PUSH
76469: LD_VAR 0 7
76473: PUSH
76474: LD_INT 2
76476: ARRAY
76477: PUSH
76478: LD_INT 2
76480: PUSH
76481: EMPTY
76482: LIST
76483: LIST
76484: LIST
76485: LIST
76486: PPUSH
76487: CALL_OW 69
76491: PUSH
76492: LD_INT 0
76494: EQUAL
76495: IFFALSE 76548
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
76497: LD_VAR 0 1
76501: PPUSH
76502: LD_VAR 0 7
76506: PUSH
76507: LD_INT 1
76509: ARRAY
76510: PPUSH
76511: LD_VAR 0 7
76515: PUSH
76516: LD_INT 2
76518: ARRAY
76519: PPUSH
76520: LD_VAR 0 3
76524: PPUSH
76525: CALL_OW 48
// result := IsPlaced ( unit ) ;
76529: LD_ADDR_VAR 0 4
76533: PUSH
76534: LD_VAR 0 1
76538: PPUSH
76539: CALL_OW 305
76543: ST_TO_ADDR
// exit ;
76544: POP
76545: POP
76546: GO 76552
// end ; end ;
76548: GO 76415
76550: POP
76551: POP
// end ;
76552: LD_VAR 0 4
76556: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
76557: LD_INT 0
76559: PPUSH
76560: PPUSH
76561: PPUSH
// if not side or side > 8 then
76562: LD_VAR 0 1
76566: NOT
76567: PUSH
76568: LD_VAR 0 1
76572: PUSH
76573: LD_INT 8
76575: GREATER
76576: OR
76577: IFFALSE 76581
// exit ;
76579: GO 76768
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
76581: LD_ADDR_VAR 0 4
76585: PUSH
76586: LD_INT 22
76588: PUSH
76589: LD_VAR 0 1
76593: PUSH
76594: EMPTY
76595: LIST
76596: LIST
76597: PUSH
76598: LD_INT 21
76600: PUSH
76601: LD_INT 3
76603: PUSH
76604: EMPTY
76605: LIST
76606: LIST
76607: PUSH
76608: EMPTY
76609: LIST
76610: LIST
76611: PPUSH
76612: CALL_OW 69
76616: ST_TO_ADDR
// if not tmp then
76617: LD_VAR 0 4
76621: NOT
76622: IFFALSE 76626
// exit ;
76624: GO 76768
// enable_addtolog := true ;
76626: LD_ADDR_OWVAR 81
76630: PUSH
76631: LD_INT 1
76633: ST_TO_ADDR
// AddToLog ( [ ) ;
76634: LD_STRING [
76636: PPUSH
76637: CALL_OW 561
// for i in tmp do
76641: LD_ADDR_VAR 0 3
76645: PUSH
76646: LD_VAR 0 4
76650: PUSH
76651: FOR_IN
76652: IFFALSE 76759
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
76654: LD_STRING [
76656: PUSH
76657: LD_VAR 0 3
76661: PPUSH
76662: CALL_OW 266
76666: STR
76667: PUSH
76668: LD_STRING , 
76670: STR
76671: PUSH
76672: LD_VAR 0 3
76676: PPUSH
76677: CALL_OW 250
76681: STR
76682: PUSH
76683: LD_STRING , 
76685: STR
76686: PUSH
76687: LD_VAR 0 3
76691: PPUSH
76692: CALL_OW 251
76696: STR
76697: PUSH
76698: LD_STRING , 
76700: STR
76701: PUSH
76702: LD_VAR 0 3
76706: PPUSH
76707: CALL_OW 254
76711: STR
76712: PUSH
76713: LD_STRING , 
76715: STR
76716: PUSH
76717: LD_VAR 0 3
76721: PPUSH
76722: LD_INT 1
76724: PPUSH
76725: CALL_OW 268
76729: STR
76730: PUSH
76731: LD_STRING , 
76733: STR
76734: PUSH
76735: LD_VAR 0 3
76739: PPUSH
76740: LD_INT 2
76742: PPUSH
76743: CALL_OW 268
76747: STR
76748: PUSH
76749: LD_STRING ],
76751: STR
76752: PPUSH
76753: CALL_OW 561
// end ;
76757: GO 76651
76759: POP
76760: POP
// AddToLog ( ]; ) ;
76761: LD_STRING ];
76763: PPUSH
76764: CALL_OW 561
// end ;
76768: LD_VAR 0 2
76772: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
76773: LD_INT 0
76775: PPUSH
76776: PPUSH
76777: PPUSH
76778: PPUSH
76779: PPUSH
// if not area or not rate or not max then
76780: LD_VAR 0 1
76784: NOT
76785: PUSH
76786: LD_VAR 0 2
76790: NOT
76791: OR
76792: PUSH
76793: LD_VAR 0 4
76797: NOT
76798: OR
76799: IFFALSE 76803
// exit ;
76801: GO 76992
// while 1 do
76803: LD_INT 1
76805: IFFALSE 76992
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
76807: LD_ADDR_VAR 0 9
76811: PUSH
76812: LD_VAR 0 1
76816: PPUSH
76817: LD_INT 1
76819: PPUSH
76820: CALL_OW 287
76824: PUSH
76825: LD_INT 10
76827: MUL
76828: ST_TO_ADDR
// r := rate / 10 ;
76829: LD_ADDR_VAR 0 7
76833: PUSH
76834: LD_VAR 0 2
76838: PUSH
76839: LD_INT 10
76841: DIVREAL
76842: ST_TO_ADDR
// time := 1 1$00 ;
76843: LD_ADDR_VAR 0 8
76847: PUSH
76848: LD_INT 2100
76850: ST_TO_ADDR
// if amount < min then
76851: LD_VAR 0 9
76855: PUSH
76856: LD_VAR 0 3
76860: LESS
76861: IFFALSE 76879
// r := r * 2 else
76863: LD_ADDR_VAR 0 7
76867: PUSH
76868: LD_VAR 0 7
76872: PUSH
76873: LD_INT 2
76875: MUL
76876: ST_TO_ADDR
76877: GO 76905
// if amount > max then
76879: LD_VAR 0 9
76883: PUSH
76884: LD_VAR 0 4
76888: GREATER
76889: IFFALSE 76905
// r := r / 2 ;
76891: LD_ADDR_VAR 0 7
76895: PUSH
76896: LD_VAR 0 7
76900: PUSH
76901: LD_INT 2
76903: DIVREAL
76904: ST_TO_ADDR
// time := time / r ;
76905: LD_ADDR_VAR 0 8
76909: PUSH
76910: LD_VAR 0 8
76914: PUSH
76915: LD_VAR 0 7
76919: DIVREAL
76920: ST_TO_ADDR
// if time < 0 then
76921: LD_VAR 0 8
76925: PUSH
76926: LD_INT 0
76928: LESS
76929: IFFALSE 76946
// time := time * - 1 ;
76931: LD_ADDR_VAR 0 8
76935: PUSH
76936: LD_VAR 0 8
76940: PUSH
76941: LD_INT 1
76943: NEG
76944: MUL
76945: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76946: LD_VAR 0 8
76950: PUSH
76951: LD_INT 35
76953: PPUSH
76954: LD_INT 875
76956: PPUSH
76957: CALL_OW 12
76961: PLUS
76962: PPUSH
76963: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76967: LD_INT 1
76969: PPUSH
76970: LD_INT 5
76972: PPUSH
76973: CALL_OW 12
76977: PPUSH
76978: LD_VAR 0 1
76982: PPUSH
76983: LD_INT 1
76985: PPUSH
76986: CALL_OW 55
// end ;
76990: GO 76803
// end ;
76992: LD_VAR 0 5
76996: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76997: LD_INT 0
76999: PPUSH
77000: PPUSH
77001: PPUSH
77002: PPUSH
77003: PPUSH
77004: PPUSH
77005: PPUSH
77006: PPUSH
// if not turrets or not factories then
77007: LD_VAR 0 1
77011: NOT
77012: PUSH
77013: LD_VAR 0 2
77017: NOT
77018: OR
77019: IFFALSE 77023
// exit ;
77021: GO 77330
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
77023: LD_ADDR_VAR 0 10
77027: PUSH
77028: LD_INT 5
77030: PUSH
77031: LD_INT 6
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: PUSH
77038: LD_INT 2
77040: PUSH
77041: LD_INT 4
77043: PUSH
77044: EMPTY
77045: LIST
77046: LIST
77047: PUSH
77048: LD_INT 3
77050: PUSH
77051: LD_INT 5
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: PUSH
77058: EMPTY
77059: LIST
77060: LIST
77061: LIST
77062: PUSH
77063: LD_INT 24
77065: PUSH
77066: LD_INT 25
77068: PUSH
77069: EMPTY
77070: LIST
77071: LIST
77072: PUSH
77073: LD_INT 23
77075: PUSH
77076: LD_INT 27
77078: PUSH
77079: EMPTY
77080: LIST
77081: LIST
77082: PUSH
77083: EMPTY
77084: LIST
77085: LIST
77086: PUSH
77087: LD_INT 42
77089: PUSH
77090: LD_INT 43
77092: PUSH
77093: EMPTY
77094: LIST
77095: LIST
77096: PUSH
77097: LD_INT 44
77099: PUSH
77100: LD_INT 46
77102: PUSH
77103: EMPTY
77104: LIST
77105: LIST
77106: PUSH
77107: LD_INT 45
77109: PUSH
77110: LD_INT 47
77112: PUSH
77113: EMPTY
77114: LIST
77115: LIST
77116: PUSH
77117: EMPTY
77118: LIST
77119: LIST
77120: LIST
77121: PUSH
77122: EMPTY
77123: LIST
77124: LIST
77125: LIST
77126: ST_TO_ADDR
// result := [ ] ;
77127: LD_ADDR_VAR 0 3
77131: PUSH
77132: EMPTY
77133: ST_TO_ADDR
// for i in turrets do
77134: LD_ADDR_VAR 0 4
77138: PUSH
77139: LD_VAR 0 1
77143: PUSH
77144: FOR_IN
77145: IFFALSE 77328
// begin nat := GetNation ( i ) ;
77147: LD_ADDR_VAR 0 7
77151: PUSH
77152: LD_VAR 0 4
77156: PPUSH
77157: CALL_OW 248
77161: ST_TO_ADDR
// weapon := 0 ;
77162: LD_ADDR_VAR 0 8
77166: PUSH
77167: LD_INT 0
77169: ST_TO_ADDR
// if not nat then
77170: LD_VAR 0 7
77174: NOT
77175: IFFALSE 77179
// continue ;
77177: GO 77144
// for j in list [ nat ] do
77179: LD_ADDR_VAR 0 5
77183: PUSH
77184: LD_VAR 0 10
77188: PUSH
77189: LD_VAR 0 7
77193: ARRAY
77194: PUSH
77195: FOR_IN
77196: IFFALSE 77237
// if GetBWeapon ( i ) = j [ 1 ] then
77198: LD_VAR 0 4
77202: PPUSH
77203: CALL_OW 269
77207: PUSH
77208: LD_VAR 0 5
77212: PUSH
77213: LD_INT 1
77215: ARRAY
77216: EQUAL
77217: IFFALSE 77235
// begin weapon := j [ 2 ] ;
77219: LD_ADDR_VAR 0 8
77223: PUSH
77224: LD_VAR 0 5
77228: PUSH
77229: LD_INT 2
77231: ARRAY
77232: ST_TO_ADDR
// break ;
77233: GO 77237
// end ;
77235: GO 77195
77237: POP
77238: POP
// if not weapon then
77239: LD_VAR 0 8
77243: NOT
77244: IFFALSE 77248
// continue ;
77246: GO 77144
// for k in factories do
77248: LD_ADDR_VAR 0 6
77252: PUSH
77253: LD_VAR 0 2
77257: PUSH
77258: FOR_IN
77259: IFFALSE 77324
// begin weapons := AvailableWeaponList ( k ) ;
77261: LD_ADDR_VAR 0 9
77265: PUSH
77266: LD_VAR 0 6
77270: PPUSH
77271: CALL_OW 478
77275: ST_TO_ADDR
// if not weapons then
77276: LD_VAR 0 9
77280: NOT
77281: IFFALSE 77285
// continue ;
77283: GO 77258
// if weapon in weapons then
77285: LD_VAR 0 8
77289: PUSH
77290: LD_VAR 0 9
77294: IN
77295: IFFALSE 77322
// begin result := [ i , weapon ] ;
77297: LD_ADDR_VAR 0 3
77301: PUSH
77302: LD_VAR 0 4
77306: PUSH
77307: LD_VAR 0 8
77311: PUSH
77312: EMPTY
77313: LIST
77314: LIST
77315: ST_TO_ADDR
// exit ;
77316: POP
77317: POP
77318: POP
77319: POP
77320: GO 77330
// end ; end ;
77322: GO 77258
77324: POP
77325: POP
// end ;
77326: GO 77144
77328: POP
77329: POP
// end ;
77330: LD_VAR 0 3
77334: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
77335: LD_INT 0
77337: PPUSH
// if not side or side > 8 then
77338: LD_VAR 0 3
77342: NOT
77343: PUSH
77344: LD_VAR 0 3
77348: PUSH
77349: LD_INT 8
77351: GREATER
77352: OR
77353: IFFALSE 77357
// exit ;
77355: GO 77416
// if not range then
77357: LD_VAR 0 4
77361: NOT
77362: IFFALSE 77373
// range := - 12 ;
77364: LD_ADDR_VAR 0 4
77368: PUSH
77369: LD_INT 12
77371: NEG
77372: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
77373: LD_VAR 0 1
77377: PPUSH
77378: LD_VAR 0 2
77382: PPUSH
77383: LD_VAR 0 3
77387: PPUSH
77388: LD_VAR 0 4
77392: PPUSH
77393: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
77397: LD_VAR 0 1
77401: PPUSH
77402: LD_VAR 0 2
77406: PPUSH
77407: LD_VAR 0 3
77411: PPUSH
77412: CALL_OW 331
// end ;
77416: LD_VAR 0 5
77420: RET
// export function Video ( mode ) ; begin
77421: LD_INT 0
77423: PPUSH
// ingame_video = mode ;
77424: LD_ADDR_OWVAR 52
77428: PUSH
77429: LD_VAR 0 1
77433: ST_TO_ADDR
// interface_hidden = mode ;
77434: LD_ADDR_OWVAR 54
77438: PUSH
77439: LD_VAR 0 1
77443: ST_TO_ADDR
// end ;
77444: LD_VAR 0 2
77448: RET
// export function Join ( array , element ) ; begin
77449: LD_INT 0
77451: PPUSH
// result := Replace ( array , array + 1 , element ) ;
77452: LD_ADDR_VAR 0 3
77456: PUSH
77457: LD_VAR 0 1
77461: PPUSH
77462: LD_VAR 0 1
77466: PUSH
77467: LD_INT 1
77469: PLUS
77470: PPUSH
77471: LD_VAR 0 2
77475: PPUSH
77476: CALL_OW 1
77480: ST_TO_ADDR
// end ;
77481: LD_VAR 0 3
77485: RET
// export function JoinUnion ( array , element ) ; begin
77486: LD_INT 0
77488: PPUSH
// result := array union element ;
77489: LD_ADDR_VAR 0 3
77493: PUSH
77494: LD_VAR 0 1
77498: PUSH
77499: LD_VAR 0 2
77503: UNION
77504: ST_TO_ADDR
// end ;
77505: LD_VAR 0 3
77509: RET
// export function GetBehemoths ( side ) ; begin
77510: LD_INT 0
77512: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
77513: LD_ADDR_VAR 0 2
77517: PUSH
77518: LD_INT 22
77520: PUSH
77521: LD_VAR 0 1
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: PUSH
77530: LD_INT 31
77532: PUSH
77533: LD_INT 25
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: PUSH
77540: EMPTY
77541: LIST
77542: LIST
77543: PPUSH
77544: CALL_OW 69
77548: ST_TO_ADDR
// end ;
77549: LD_VAR 0 2
77553: RET
// export function Shuffle ( array ) ; var i , index ; begin
77554: LD_INT 0
77556: PPUSH
77557: PPUSH
77558: PPUSH
// result := [ ] ;
77559: LD_ADDR_VAR 0 2
77563: PUSH
77564: EMPTY
77565: ST_TO_ADDR
// if not array then
77566: LD_VAR 0 1
77570: NOT
77571: IFFALSE 77575
// exit ;
77573: GO 77674
// Randomize ;
77575: CALL_OW 10
// for i = array downto 1 do
77579: LD_ADDR_VAR 0 3
77583: PUSH
77584: DOUBLE
77585: LD_VAR 0 1
77589: INC
77590: ST_TO_ADDR
77591: LD_INT 1
77593: PUSH
77594: FOR_DOWNTO
77595: IFFALSE 77672
// begin index := rand ( 1 , array ) ;
77597: LD_ADDR_VAR 0 4
77601: PUSH
77602: LD_INT 1
77604: PPUSH
77605: LD_VAR 0 1
77609: PPUSH
77610: CALL_OW 12
77614: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
77615: LD_ADDR_VAR 0 2
77619: PUSH
77620: LD_VAR 0 2
77624: PPUSH
77625: LD_VAR 0 2
77629: PUSH
77630: LD_INT 1
77632: PLUS
77633: PPUSH
77634: LD_VAR 0 1
77638: PUSH
77639: LD_VAR 0 4
77643: ARRAY
77644: PPUSH
77645: CALL_OW 2
77649: ST_TO_ADDR
// array := Delete ( array , index ) ;
77650: LD_ADDR_VAR 0 1
77654: PUSH
77655: LD_VAR 0 1
77659: PPUSH
77660: LD_VAR 0 4
77664: PPUSH
77665: CALL_OW 3
77669: ST_TO_ADDR
// end ;
77670: GO 77594
77672: POP
77673: POP
// end ;
77674: LD_VAR 0 2
77678: RET
// export function GetBaseMaterials ( base ) ; begin
77679: LD_INT 0
77681: PPUSH
// result := [ 0 , 0 , 0 ] ;
77682: LD_ADDR_VAR 0 2
77686: PUSH
77687: LD_INT 0
77689: PUSH
77690: LD_INT 0
77692: PUSH
77693: LD_INT 0
77695: PUSH
77696: EMPTY
77697: LIST
77698: LIST
77699: LIST
77700: ST_TO_ADDR
// if not base then
77701: LD_VAR 0 1
77705: NOT
77706: IFFALSE 77710
// exit ;
77708: GO 77759
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
77710: LD_ADDR_VAR 0 2
77714: PUSH
77715: LD_VAR 0 1
77719: PPUSH
77720: LD_INT 1
77722: PPUSH
77723: CALL_OW 275
77727: PUSH
77728: LD_VAR 0 1
77732: PPUSH
77733: LD_INT 2
77735: PPUSH
77736: CALL_OW 275
77740: PUSH
77741: LD_VAR 0 1
77745: PPUSH
77746: LD_INT 3
77748: PPUSH
77749: CALL_OW 275
77753: PUSH
77754: EMPTY
77755: LIST
77756: LIST
77757: LIST
77758: ST_TO_ADDR
// end ;
77759: LD_VAR 0 2
77763: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
77764: LD_INT 0
77766: PPUSH
77767: PPUSH
// result := array ;
77768: LD_ADDR_VAR 0 3
77772: PUSH
77773: LD_VAR 0 1
77777: ST_TO_ADDR
// if size >= result then
77778: LD_VAR 0 2
77782: PUSH
77783: LD_VAR 0 3
77787: GREATEREQUAL
77788: IFFALSE 77792
// exit ;
77790: GO 77842
// if size then
77792: LD_VAR 0 2
77796: IFFALSE 77842
// for i := array downto size do
77798: LD_ADDR_VAR 0 4
77802: PUSH
77803: DOUBLE
77804: LD_VAR 0 1
77808: INC
77809: ST_TO_ADDR
77810: LD_VAR 0 2
77814: PUSH
77815: FOR_DOWNTO
77816: IFFALSE 77840
// result := Delete ( result , result ) ;
77818: LD_ADDR_VAR 0 3
77822: PUSH
77823: LD_VAR 0 3
77827: PPUSH
77828: LD_VAR 0 3
77832: PPUSH
77833: CALL_OW 3
77837: ST_TO_ADDR
77838: GO 77815
77840: POP
77841: POP
// end ;
77842: LD_VAR 0 3
77846: RET
// export function ComExit ( unit ) ; var tmp ; begin
77847: LD_INT 0
77849: PPUSH
77850: PPUSH
// if not IsInUnit ( unit ) then
77851: LD_VAR 0 1
77855: PPUSH
77856: CALL_OW 310
77860: NOT
77861: IFFALSE 77865
// exit ;
77863: GO 77925
// tmp := IsInUnit ( unit ) ;
77865: LD_ADDR_VAR 0 3
77869: PUSH
77870: LD_VAR 0 1
77874: PPUSH
77875: CALL_OW 310
77879: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
77880: LD_VAR 0 3
77884: PPUSH
77885: CALL_OW 247
77889: PUSH
77890: LD_INT 2
77892: EQUAL
77893: IFFALSE 77906
// ComExitVehicle ( unit ) else
77895: LD_VAR 0 1
77899: PPUSH
77900: CALL_OW 121
77904: GO 77915
// ComExitBuilding ( unit ) ;
77906: LD_VAR 0 1
77910: PPUSH
77911: CALL_OW 122
// result := tmp ;
77915: LD_ADDR_VAR 0 2
77919: PUSH
77920: LD_VAR 0 3
77924: ST_TO_ADDR
// end ;
77925: LD_VAR 0 2
77929: RET
// export function ComExitAll ( units ) ; var i ; begin
77930: LD_INT 0
77932: PPUSH
77933: PPUSH
// if not units then
77934: LD_VAR 0 1
77938: NOT
77939: IFFALSE 77943
// exit ;
77941: GO 77969
// for i in units do
77943: LD_ADDR_VAR 0 3
77947: PUSH
77948: LD_VAR 0 1
77952: PUSH
77953: FOR_IN
77954: IFFALSE 77967
// ComExit ( i ) ;
77956: LD_VAR 0 3
77960: PPUSH
77961: CALL 77847 0 1
77965: GO 77953
77967: POP
77968: POP
// end ;
77969: LD_VAR 0 2
77973: RET
// export function ResetHc ; begin
77974: LD_INT 0
77976: PPUSH
// InitHc ;
77977: CALL_OW 19
// hc_importance := 0 ;
77981: LD_ADDR_OWVAR 32
77985: PUSH
77986: LD_INT 0
77988: ST_TO_ADDR
// end ;
77989: LD_VAR 0 1
77993: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77994: LD_INT 0
77996: PPUSH
77997: PPUSH
77998: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77999: LD_ADDR_VAR 0 6
78003: PUSH
78004: LD_VAR 0 1
78008: PUSH
78009: LD_VAR 0 3
78013: PLUS
78014: PUSH
78015: LD_INT 2
78017: DIV
78018: ST_TO_ADDR
// if _x < 0 then
78019: LD_VAR 0 6
78023: PUSH
78024: LD_INT 0
78026: LESS
78027: IFFALSE 78044
// _x := _x * - 1 ;
78029: LD_ADDR_VAR 0 6
78033: PUSH
78034: LD_VAR 0 6
78038: PUSH
78039: LD_INT 1
78041: NEG
78042: MUL
78043: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
78044: LD_ADDR_VAR 0 7
78048: PUSH
78049: LD_VAR 0 2
78053: PUSH
78054: LD_VAR 0 4
78058: PLUS
78059: PUSH
78060: LD_INT 2
78062: DIV
78063: ST_TO_ADDR
// if _y < 0 then
78064: LD_VAR 0 7
78068: PUSH
78069: LD_INT 0
78071: LESS
78072: IFFALSE 78089
// _y := _y * - 1 ;
78074: LD_ADDR_VAR 0 7
78078: PUSH
78079: LD_VAR 0 7
78083: PUSH
78084: LD_INT 1
78086: NEG
78087: MUL
78088: ST_TO_ADDR
// result := [ _x , _y ] ;
78089: LD_ADDR_VAR 0 5
78093: PUSH
78094: LD_VAR 0 6
78098: PUSH
78099: LD_VAR 0 7
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: ST_TO_ADDR
// end ;
78108: LD_VAR 0 5
78112: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
78113: LD_INT 0
78115: PPUSH
78116: PPUSH
78117: PPUSH
78118: PPUSH
// task := GetTaskList ( unit ) ;
78119: LD_ADDR_VAR 0 7
78123: PUSH
78124: LD_VAR 0 1
78128: PPUSH
78129: CALL_OW 437
78133: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
78134: LD_VAR 0 7
78138: NOT
78139: PUSH
78140: LD_VAR 0 1
78144: PPUSH
78145: LD_VAR 0 2
78149: PPUSH
78150: CALL_OW 308
78154: NOT
78155: AND
78156: IFFALSE 78160
// exit ;
78158: GO 78278
// if IsInArea ( unit , area ) then
78160: LD_VAR 0 1
78164: PPUSH
78165: LD_VAR 0 2
78169: PPUSH
78170: CALL_OW 308
78174: IFFALSE 78192
// begin ComMoveToArea ( unit , goAway ) ;
78176: LD_VAR 0 1
78180: PPUSH
78181: LD_VAR 0 3
78185: PPUSH
78186: CALL_OW 113
// exit ;
78190: GO 78278
// end ; if task [ 1 ] [ 1 ] <> M then
78192: LD_VAR 0 7
78196: PUSH
78197: LD_INT 1
78199: ARRAY
78200: PUSH
78201: LD_INT 1
78203: ARRAY
78204: PUSH
78205: LD_STRING M
78207: NONEQUAL
78208: IFFALSE 78212
// exit ;
78210: GO 78278
// x := task [ 1 ] [ 2 ] ;
78212: LD_ADDR_VAR 0 5
78216: PUSH
78217: LD_VAR 0 7
78221: PUSH
78222: LD_INT 1
78224: ARRAY
78225: PUSH
78226: LD_INT 2
78228: ARRAY
78229: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
78230: LD_ADDR_VAR 0 6
78234: PUSH
78235: LD_VAR 0 7
78239: PUSH
78240: LD_INT 1
78242: ARRAY
78243: PUSH
78244: LD_INT 3
78246: ARRAY
78247: ST_TO_ADDR
// if InArea ( x , y , area ) then
78248: LD_VAR 0 5
78252: PPUSH
78253: LD_VAR 0 6
78257: PPUSH
78258: LD_VAR 0 2
78262: PPUSH
78263: CALL_OW 309
78267: IFFALSE 78278
// ComStop ( unit ) ;
78269: LD_VAR 0 1
78273: PPUSH
78274: CALL_OW 141
// end ;
78278: LD_VAR 0 4
78282: RET
// export function Abs ( value ) ; begin
78283: LD_INT 0
78285: PPUSH
// result := value ;
78286: LD_ADDR_VAR 0 2
78290: PUSH
78291: LD_VAR 0 1
78295: ST_TO_ADDR
// if value < 0 then
78296: LD_VAR 0 1
78300: PUSH
78301: LD_INT 0
78303: LESS
78304: IFFALSE 78321
// result := value * - 1 ;
78306: LD_ADDR_VAR 0 2
78310: PUSH
78311: LD_VAR 0 1
78315: PUSH
78316: LD_INT 1
78318: NEG
78319: MUL
78320: ST_TO_ADDR
// end ;
78321: LD_VAR 0 2
78325: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
78326: LD_INT 0
78328: PPUSH
78329: PPUSH
78330: PPUSH
78331: PPUSH
78332: PPUSH
78333: PPUSH
78334: PPUSH
78335: PPUSH
// if not unit or not building then
78336: LD_VAR 0 1
78340: NOT
78341: PUSH
78342: LD_VAR 0 2
78346: NOT
78347: OR
78348: IFFALSE 78352
// exit ;
78350: GO 78578
// x := GetX ( building ) ;
78352: LD_ADDR_VAR 0 4
78356: PUSH
78357: LD_VAR 0 2
78361: PPUSH
78362: CALL_OW 250
78366: ST_TO_ADDR
// y := GetY ( building ) ;
78367: LD_ADDR_VAR 0 6
78371: PUSH
78372: LD_VAR 0 2
78376: PPUSH
78377: CALL_OW 251
78381: ST_TO_ADDR
// d := GetDir ( building ) ;
78382: LD_ADDR_VAR 0 8
78386: PUSH
78387: LD_VAR 0 2
78391: PPUSH
78392: CALL_OW 254
78396: ST_TO_ADDR
// r := 4 ;
78397: LD_ADDR_VAR 0 9
78401: PUSH
78402: LD_INT 4
78404: ST_TO_ADDR
// for i := 1 to 5 do
78405: LD_ADDR_VAR 0 10
78409: PUSH
78410: DOUBLE
78411: LD_INT 1
78413: DEC
78414: ST_TO_ADDR
78415: LD_INT 5
78417: PUSH
78418: FOR_TO
78419: IFFALSE 78576
// begin _x := ShiftX ( x , d , r + i ) ;
78421: LD_ADDR_VAR 0 5
78425: PUSH
78426: LD_VAR 0 4
78430: PPUSH
78431: LD_VAR 0 8
78435: PPUSH
78436: LD_VAR 0 9
78440: PUSH
78441: LD_VAR 0 10
78445: PLUS
78446: PPUSH
78447: CALL_OW 272
78451: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
78452: LD_ADDR_VAR 0 7
78456: PUSH
78457: LD_VAR 0 6
78461: PPUSH
78462: LD_VAR 0 8
78466: PPUSH
78467: LD_VAR 0 9
78471: PUSH
78472: LD_VAR 0 10
78476: PLUS
78477: PPUSH
78478: CALL_OW 273
78482: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
78483: LD_VAR 0 5
78487: PPUSH
78488: LD_VAR 0 7
78492: PPUSH
78493: CALL_OW 488
78497: PUSH
78498: LD_VAR 0 5
78502: PPUSH
78503: LD_VAR 0 7
78507: PPUSH
78508: CALL_OW 428
78512: PPUSH
78513: CALL_OW 247
78517: PUSH
78518: LD_INT 3
78520: PUSH
78521: LD_INT 2
78523: PUSH
78524: EMPTY
78525: LIST
78526: LIST
78527: IN
78528: NOT
78529: AND
78530: IFFALSE 78574
// begin ComMoveXY ( unit , _x , _y ) ;
78532: LD_VAR 0 1
78536: PPUSH
78537: LD_VAR 0 5
78541: PPUSH
78542: LD_VAR 0 7
78546: PPUSH
78547: CALL_OW 111
// result := [ _x , _y ] ;
78551: LD_ADDR_VAR 0 3
78555: PUSH
78556: LD_VAR 0 5
78560: PUSH
78561: LD_VAR 0 7
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: ST_TO_ADDR
// exit ;
78570: POP
78571: POP
78572: GO 78578
// end ; end ;
78574: GO 78418
78576: POP
78577: POP
// end ;
78578: LD_VAR 0 3
78582: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
78583: LD_INT 0
78585: PPUSH
78586: PPUSH
78587: PPUSH
// result := 0 ;
78588: LD_ADDR_VAR 0 3
78592: PUSH
78593: LD_INT 0
78595: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
78596: LD_VAR 0 1
78600: PUSH
78601: LD_INT 0
78603: LESS
78604: PUSH
78605: LD_VAR 0 1
78609: PUSH
78610: LD_INT 8
78612: GREATER
78613: OR
78614: PUSH
78615: LD_VAR 0 2
78619: PUSH
78620: LD_INT 0
78622: LESS
78623: OR
78624: PUSH
78625: LD_VAR 0 2
78629: PUSH
78630: LD_INT 8
78632: GREATER
78633: OR
78634: IFFALSE 78638
// exit ;
78636: GO 78713
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
78638: LD_ADDR_VAR 0 4
78642: PUSH
78643: LD_INT 22
78645: PUSH
78646: LD_VAR 0 2
78650: PUSH
78651: EMPTY
78652: LIST
78653: LIST
78654: PPUSH
78655: CALL_OW 69
78659: PUSH
78660: FOR_IN
78661: IFFALSE 78711
// begin un := UnitShoot ( i ) ;
78663: LD_ADDR_VAR 0 5
78667: PUSH
78668: LD_VAR 0 4
78672: PPUSH
78673: CALL_OW 504
78677: ST_TO_ADDR
// if GetSide ( un ) = side1 then
78678: LD_VAR 0 5
78682: PPUSH
78683: CALL_OW 255
78687: PUSH
78688: LD_VAR 0 1
78692: EQUAL
78693: IFFALSE 78709
// begin result := un ;
78695: LD_ADDR_VAR 0 3
78699: PUSH
78700: LD_VAR 0 5
78704: ST_TO_ADDR
// exit ;
78705: POP
78706: POP
78707: GO 78713
// end ; end ;
78709: GO 78660
78711: POP
78712: POP
// end ;
78713: LD_VAR 0 3
78717: RET
// export function GetCargoBay ( units ) ; begin
78718: LD_INT 0
78720: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
78721: LD_ADDR_VAR 0 2
78725: PUSH
78726: LD_VAR 0 1
78730: PPUSH
78731: LD_INT 2
78733: PUSH
78734: LD_INT 34
78736: PUSH
78737: LD_INT 12
78739: PUSH
78740: EMPTY
78741: LIST
78742: LIST
78743: PUSH
78744: LD_INT 34
78746: PUSH
78747: LD_INT 51
78749: PUSH
78750: EMPTY
78751: LIST
78752: LIST
78753: PUSH
78754: LD_INT 34
78756: PUSH
78757: LD_INT 32
78759: PUSH
78760: EMPTY
78761: LIST
78762: LIST
78763: PUSH
78764: LD_INT 34
78766: PUSH
78767: LD_INT 89
78769: PUSH
78770: EMPTY
78771: LIST
78772: LIST
78773: PUSH
78774: EMPTY
78775: LIST
78776: LIST
78777: LIST
78778: LIST
78779: LIST
78780: PPUSH
78781: CALL_OW 72
78785: ST_TO_ADDR
// end ;
78786: LD_VAR 0 2
78790: RET
// export function Negate ( value ) ; begin
78791: LD_INT 0
78793: PPUSH
// result := not value ;
78794: LD_ADDR_VAR 0 2
78798: PUSH
78799: LD_VAR 0 1
78803: NOT
78804: ST_TO_ADDR
// end ;
78805: LD_VAR 0 2
78809: RET
// export function Inc ( value ) ; begin
78810: LD_INT 0
78812: PPUSH
// result := value + 1 ;
78813: LD_ADDR_VAR 0 2
78817: PUSH
78818: LD_VAR 0 1
78822: PUSH
78823: LD_INT 1
78825: PLUS
78826: ST_TO_ADDR
// end ;
78827: LD_VAR 0 2
78831: RET
// export function Dec ( value ) ; begin
78832: LD_INT 0
78834: PPUSH
// result := value - 1 ;
78835: LD_ADDR_VAR 0 2
78839: PUSH
78840: LD_VAR 0 1
78844: PUSH
78845: LD_INT 1
78847: MINUS
78848: ST_TO_ADDR
// end ;
78849: LD_VAR 0 2
78853: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
78854: LD_INT 0
78856: PPUSH
78857: PPUSH
78858: PPUSH
78859: PPUSH
78860: PPUSH
78861: PPUSH
78862: PPUSH
78863: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
78864: LD_VAR 0 1
78868: PPUSH
78869: LD_VAR 0 2
78873: PPUSH
78874: CALL_OW 488
78878: NOT
78879: PUSH
78880: LD_VAR 0 3
78884: PPUSH
78885: LD_VAR 0 4
78889: PPUSH
78890: CALL_OW 488
78894: NOT
78895: OR
78896: IFFALSE 78909
// begin result := - 1 ;
78898: LD_ADDR_VAR 0 5
78902: PUSH
78903: LD_INT 1
78905: NEG
78906: ST_TO_ADDR
// exit ;
78907: GO 79144
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78909: LD_ADDR_VAR 0 12
78913: PUSH
78914: LD_VAR 0 1
78918: PPUSH
78919: LD_VAR 0 2
78923: PPUSH
78924: LD_VAR 0 3
78928: PPUSH
78929: LD_VAR 0 4
78933: PPUSH
78934: CALL 77994 0 4
78938: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78939: LD_ADDR_VAR 0 11
78943: PUSH
78944: LD_VAR 0 1
78948: PPUSH
78949: LD_VAR 0 2
78953: PPUSH
78954: LD_VAR 0 12
78958: PUSH
78959: LD_INT 1
78961: ARRAY
78962: PPUSH
78963: LD_VAR 0 12
78967: PUSH
78968: LD_INT 2
78970: ARRAY
78971: PPUSH
78972: CALL_OW 298
78976: ST_TO_ADDR
// distance := 9999 ;
78977: LD_ADDR_VAR 0 10
78981: PUSH
78982: LD_INT 9999
78984: ST_TO_ADDR
// for i := 0 to 5 do
78985: LD_ADDR_VAR 0 6
78989: PUSH
78990: DOUBLE
78991: LD_INT 0
78993: DEC
78994: ST_TO_ADDR
78995: LD_INT 5
78997: PUSH
78998: FOR_TO
78999: IFFALSE 79142
// begin _x := ShiftX ( x1 , i , centerDist ) ;
79001: LD_ADDR_VAR 0 7
79005: PUSH
79006: LD_VAR 0 1
79010: PPUSH
79011: LD_VAR 0 6
79015: PPUSH
79016: LD_VAR 0 11
79020: PPUSH
79021: CALL_OW 272
79025: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
79026: LD_ADDR_VAR 0 8
79030: PUSH
79031: LD_VAR 0 2
79035: PPUSH
79036: LD_VAR 0 6
79040: PPUSH
79041: LD_VAR 0 11
79045: PPUSH
79046: CALL_OW 273
79050: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
79051: LD_VAR 0 7
79055: PPUSH
79056: LD_VAR 0 8
79060: PPUSH
79061: CALL_OW 488
79065: NOT
79066: IFFALSE 79070
// continue ;
79068: GO 78998
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
79070: LD_ADDR_VAR 0 9
79074: PUSH
79075: LD_VAR 0 12
79079: PUSH
79080: LD_INT 1
79082: ARRAY
79083: PPUSH
79084: LD_VAR 0 12
79088: PUSH
79089: LD_INT 2
79091: ARRAY
79092: PPUSH
79093: LD_VAR 0 7
79097: PPUSH
79098: LD_VAR 0 8
79102: PPUSH
79103: CALL_OW 298
79107: ST_TO_ADDR
// if tmp < distance then
79108: LD_VAR 0 9
79112: PUSH
79113: LD_VAR 0 10
79117: LESS
79118: IFFALSE 79140
// begin result := i ;
79120: LD_ADDR_VAR 0 5
79124: PUSH
79125: LD_VAR 0 6
79129: ST_TO_ADDR
// distance := tmp ;
79130: LD_ADDR_VAR 0 10
79134: PUSH
79135: LD_VAR 0 9
79139: ST_TO_ADDR
// end ; end ;
79140: GO 78998
79142: POP
79143: POP
// end ;
79144: LD_VAR 0 5
79148: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79149: LD_INT 0
79151: PPUSH
79152: PPUSH
// if not driver or not IsInUnit ( driver ) then
79153: LD_VAR 0 1
79157: NOT
79158: PUSH
79159: LD_VAR 0 1
79163: PPUSH
79164: CALL_OW 310
79168: NOT
79169: OR
79170: IFFALSE 79174
// exit ;
79172: GO 79264
// vehicle := IsInUnit ( driver ) ;
79174: LD_ADDR_VAR 0 3
79178: PUSH
79179: LD_VAR 0 1
79183: PPUSH
79184: CALL_OW 310
79188: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79189: LD_VAR 0 1
79193: PPUSH
79194: LD_STRING \
79196: PUSH
79197: LD_INT 0
79199: PUSH
79200: LD_INT 0
79202: PUSH
79203: LD_INT 0
79205: PUSH
79206: LD_INT 0
79208: PUSH
79209: LD_INT 0
79211: PUSH
79212: LD_INT 0
79214: PUSH
79215: EMPTY
79216: LIST
79217: LIST
79218: LIST
79219: LIST
79220: LIST
79221: LIST
79222: LIST
79223: PUSH
79224: LD_STRING E
79226: PUSH
79227: LD_INT 0
79229: PUSH
79230: LD_INT 0
79232: PUSH
79233: LD_VAR 0 3
79237: PUSH
79238: LD_INT 0
79240: PUSH
79241: LD_INT 0
79243: PUSH
79244: LD_INT 0
79246: PUSH
79247: EMPTY
79248: LIST
79249: LIST
79250: LIST
79251: LIST
79252: LIST
79253: LIST
79254: LIST
79255: PUSH
79256: EMPTY
79257: LIST
79258: LIST
79259: PPUSH
79260: CALL_OW 446
// end ;
79264: LD_VAR 0 2
79268: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
79269: LD_INT 0
79271: PPUSH
79272: PPUSH
// if not driver or not IsInUnit ( driver ) then
79273: LD_VAR 0 1
79277: NOT
79278: PUSH
79279: LD_VAR 0 1
79283: PPUSH
79284: CALL_OW 310
79288: NOT
79289: OR
79290: IFFALSE 79294
// exit ;
79292: GO 79384
// vehicle := IsInUnit ( driver ) ;
79294: LD_ADDR_VAR 0 3
79298: PUSH
79299: LD_VAR 0 1
79303: PPUSH
79304: CALL_OW 310
79308: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
79309: LD_VAR 0 1
79313: PPUSH
79314: LD_STRING \
79316: PUSH
79317: LD_INT 0
79319: PUSH
79320: LD_INT 0
79322: PUSH
79323: LD_INT 0
79325: PUSH
79326: LD_INT 0
79328: PUSH
79329: LD_INT 0
79331: PUSH
79332: LD_INT 0
79334: PUSH
79335: EMPTY
79336: LIST
79337: LIST
79338: LIST
79339: LIST
79340: LIST
79341: LIST
79342: LIST
79343: PUSH
79344: LD_STRING E
79346: PUSH
79347: LD_INT 0
79349: PUSH
79350: LD_INT 0
79352: PUSH
79353: LD_VAR 0 3
79357: PUSH
79358: LD_INT 0
79360: PUSH
79361: LD_INT 0
79363: PUSH
79364: LD_INT 0
79366: PUSH
79367: EMPTY
79368: LIST
79369: LIST
79370: LIST
79371: LIST
79372: LIST
79373: LIST
79374: LIST
79375: PUSH
79376: EMPTY
79377: LIST
79378: LIST
79379: PPUSH
79380: CALL_OW 447
// end ;
79384: LD_VAR 0 2
79388: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
79389: LD_INT 0
79391: PPUSH
79392: PPUSH
79393: PPUSH
// tmp := [ ] ;
79394: LD_ADDR_VAR 0 5
79398: PUSH
79399: EMPTY
79400: ST_TO_ADDR
// for i in units do
79401: LD_ADDR_VAR 0 4
79405: PUSH
79406: LD_VAR 0 1
79410: PUSH
79411: FOR_IN
79412: IFFALSE 79450
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
79414: LD_ADDR_VAR 0 5
79418: PUSH
79419: LD_VAR 0 5
79423: PPUSH
79424: LD_VAR 0 5
79428: PUSH
79429: LD_INT 1
79431: PLUS
79432: PPUSH
79433: LD_VAR 0 4
79437: PPUSH
79438: CALL_OW 256
79442: PPUSH
79443: CALL_OW 2
79447: ST_TO_ADDR
79448: GO 79411
79450: POP
79451: POP
// if not tmp then
79452: LD_VAR 0 5
79456: NOT
79457: IFFALSE 79461
// exit ;
79459: GO 79509
// if asc then
79461: LD_VAR 0 2
79465: IFFALSE 79489
// result := SortListByListAsc ( units , tmp ) else
79467: LD_ADDR_VAR 0 3
79471: PUSH
79472: LD_VAR 0 1
79476: PPUSH
79477: LD_VAR 0 5
79481: PPUSH
79482: CALL_OW 76
79486: ST_TO_ADDR
79487: GO 79509
// result := SortListByListDesc ( units , tmp ) ;
79489: LD_ADDR_VAR 0 3
79493: PUSH
79494: LD_VAR 0 1
79498: PPUSH
79499: LD_VAR 0 5
79503: PPUSH
79504: CALL_OW 77
79508: ST_TO_ADDR
// end ;
79509: LD_VAR 0 3
79513: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
79514: LD_INT 0
79516: PPUSH
79517: PPUSH
// task := GetTaskList ( mech ) ;
79518: LD_ADDR_VAR 0 4
79522: PUSH
79523: LD_VAR 0 1
79527: PPUSH
79528: CALL_OW 437
79532: ST_TO_ADDR
// if not task then
79533: LD_VAR 0 4
79537: NOT
79538: IFFALSE 79542
// exit ;
79540: GO 79584
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
79542: LD_ADDR_VAR 0 3
79546: PUSH
79547: LD_VAR 0 4
79551: PUSH
79552: LD_INT 1
79554: ARRAY
79555: PUSH
79556: LD_INT 1
79558: ARRAY
79559: PUSH
79560: LD_STRING r
79562: EQUAL
79563: PUSH
79564: LD_VAR 0 4
79568: PUSH
79569: LD_INT 1
79571: ARRAY
79572: PUSH
79573: LD_INT 4
79575: ARRAY
79576: PUSH
79577: LD_VAR 0 2
79581: EQUAL
79582: AND
79583: ST_TO_ADDR
// end ;
79584: LD_VAR 0 3
79588: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
79589: LD_INT 0
79591: PPUSH
// SetDir ( unit , d ) ;
79592: LD_VAR 0 1
79596: PPUSH
79597: LD_VAR 0 4
79601: PPUSH
79602: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
79606: LD_VAR 0 1
79610: PPUSH
79611: LD_VAR 0 2
79615: PPUSH
79616: LD_VAR 0 3
79620: PPUSH
79621: LD_VAR 0 5
79625: PPUSH
79626: CALL_OW 48
// end ;
79630: LD_VAR 0 6
79634: RET
// export function ToNaturalNumber ( number ) ; begin
79635: LD_INT 0
79637: PPUSH
// result := number div 1 ;
79638: LD_ADDR_VAR 0 2
79642: PUSH
79643: LD_VAR 0 1
79647: PUSH
79648: LD_INT 1
79650: DIV
79651: ST_TO_ADDR
// if number < 0 then
79652: LD_VAR 0 1
79656: PUSH
79657: LD_INT 0
79659: LESS
79660: IFFALSE 79670
// result := 0 ;
79662: LD_ADDR_VAR 0 2
79666: PUSH
79667: LD_INT 0
79669: ST_TO_ADDR
// end ;
79670: LD_VAR 0 2
79674: RET
// export function SortByClass ( units , class ) ; var un ; begin
79675: LD_INT 0
79677: PPUSH
79678: PPUSH
// if not units or not class then
79679: LD_VAR 0 1
79683: NOT
79684: PUSH
79685: LD_VAR 0 2
79689: NOT
79690: OR
79691: IFFALSE 79695
// exit ;
79693: GO 79790
// result := [ ] ;
79695: LD_ADDR_VAR 0 3
79699: PUSH
79700: EMPTY
79701: ST_TO_ADDR
// for un in units do
79702: LD_ADDR_VAR 0 4
79706: PUSH
79707: LD_VAR 0 1
79711: PUSH
79712: FOR_IN
79713: IFFALSE 79788
// if GetClass ( un ) = class then
79715: LD_VAR 0 4
79719: PPUSH
79720: CALL_OW 257
79724: PUSH
79725: LD_VAR 0 2
79729: EQUAL
79730: IFFALSE 79757
// result := Insert ( result , 1 , un ) else
79732: LD_ADDR_VAR 0 3
79736: PUSH
79737: LD_VAR 0 3
79741: PPUSH
79742: LD_INT 1
79744: PPUSH
79745: LD_VAR 0 4
79749: PPUSH
79750: CALL_OW 2
79754: ST_TO_ADDR
79755: GO 79786
// result := Replace ( result , result + 1 , un ) ;
79757: LD_ADDR_VAR 0 3
79761: PUSH
79762: LD_VAR 0 3
79766: PPUSH
79767: LD_VAR 0 3
79771: PUSH
79772: LD_INT 1
79774: PLUS
79775: PPUSH
79776: LD_VAR 0 4
79780: PPUSH
79781: CALL_OW 1
79785: ST_TO_ADDR
79786: GO 79712
79788: POP
79789: POP
// end ;
79790: LD_VAR 0 3
79794: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
79795: LD_INT 0
79797: PPUSH
79798: PPUSH
79799: PPUSH
79800: PPUSH
79801: PPUSH
79802: PPUSH
79803: PPUSH
// result := [ ] ;
79804: LD_ADDR_VAR 0 4
79808: PUSH
79809: EMPTY
79810: ST_TO_ADDR
// if x - r < 0 then
79811: LD_VAR 0 1
79815: PUSH
79816: LD_VAR 0 3
79820: MINUS
79821: PUSH
79822: LD_INT 0
79824: LESS
79825: IFFALSE 79837
// min_x := 0 else
79827: LD_ADDR_VAR 0 8
79831: PUSH
79832: LD_INT 0
79834: ST_TO_ADDR
79835: GO 79853
// min_x := x - r ;
79837: LD_ADDR_VAR 0 8
79841: PUSH
79842: LD_VAR 0 1
79846: PUSH
79847: LD_VAR 0 3
79851: MINUS
79852: ST_TO_ADDR
// if y - r < 0 then
79853: LD_VAR 0 2
79857: PUSH
79858: LD_VAR 0 3
79862: MINUS
79863: PUSH
79864: LD_INT 0
79866: LESS
79867: IFFALSE 79879
// min_y := 0 else
79869: LD_ADDR_VAR 0 7
79873: PUSH
79874: LD_INT 0
79876: ST_TO_ADDR
79877: GO 79895
// min_y := y - r ;
79879: LD_ADDR_VAR 0 7
79883: PUSH
79884: LD_VAR 0 2
79888: PUSH
79889: LD_VAR 0 3
79893: MINUS
79894: ST_TO_ADDR
// max_x := x + r ;
79895: LD_ADDR_VAR 0 9
79899: PUSH
79900: LD_VAR 0 1
79904: PUSH
79905: LD_VAR 0 3
79909: PLUS
79910: ST_TO_ADDR
// max_y := y + r ;
79911: LD_ADDR_VAR 0 10
79915: PUSH
79916: LD_VAR 0 2
79920: PUSH
79921: LD_VAR 0 3
79925: PLUS
79926: ST_TO_ADDR
// for _x = min_x to max_x do
79927: LD_ADDR_VAR 0 5
79931: PUSH
79932: DOUBLE
79933: LD_VAR 0 8
79937: DEC
79938: ST_TO_ADDR
79939: LD_VAR 0 9
79943: PUSH
79944: FOR_TO
79945: IFFALSE 80046
// for _y = min_y to max_y do
79947: LD_ADDR_VAR 0 6
79951: PUSH
79952: DOUBLE
79953: LD_VAR 0 7
79957: DEC
79958: ST_TO_ADDR
79959: LD_VAR 0 10
79963: PUSH
79964: FOR_TO
79965: IFFALSE 80042
// begin if not ValidHex ( _x , _y ) then
79967: LD_VAR 0 5
79971: PPUSH
79972: LD_VAR 0 6
79976: PPUSH
79977: CALL_OW 488
79981: NOT
79982: IFFALSE 79986
// continue ;
79984: GO 79964
// if GetResourceTypeXY ( _x , _y ) then
79986: LD_VAR 0 5
79990: PPUSH
79991: LD_VAR 0 6
79995: PPUSH
79996: CALL_OW 283
80000: IFFALSE 80040
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
80002: LD_ADDR_VAR 0 4
80006: PUSH
80007: LD_VAR 0 4
80011: PPUSH
80012: LD_VAR 0 4
80016: PUSH
80017: LD_INT 1
80019: PLUS
80020: PPUSH
80021: LD_VAR 0 5
80025: PUSH
80026: LD_VAR 0 6
80030: PUSH
80031: EMPTY
80032: LIST
80033: LIST
80034: PPUSH
80035: CALL_OW 1
80039: ST_TO_ADDR
// end ;
80040: GO 79964
80042: POP
80043: POP
80044: GO 79944
80046: POP
80047: POP
// end ;
80048: LD_VAR 0 4
80052: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
80053: LD_INT 0
80055: PPUSH
80056: PPUSH
80057: PPUSH
80058: PPUSH
80059: PPUSH
80060: PPUSH
80061: PPUSH
80062: PPUSH
// if not units then
80063: LD_VAR 0 1
80067: NOT
80068: IFFALSE 80072
// exit ;
80070: GO 80596
// result := UnitFilter ( units , [ f_ok ] ) ;
80072: LD_ADDR_VAR 0 3
80076: PUSH
80077: LD_VAR 0 1
80081: PPUSH
80082: LD_INT 50
80084: PUSH
80085: EMPTY
80086: LIST
80087: PPUSH
80088: CALL_OW 72
80092: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
80093: LD_ADDR_VAR 0 8
80097: PUSH
80098: LD_VAR 0 1
80102: PUSH
80103: LD_INT 1
80105: ARRAY
80106: PPUSH
80107: CALL_OW 255
80111: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
80112: LD_ADDR_VAR 0 10
80116: PUSH
80117: LD_INT 29
80119: PUSH
80120: LD_INT 91
80122: PUSH
80123: LD_INT 49
80125: PUSH
80126: EMPTY
80127: LIST
80128: LIST
80129: LIST
80130: ST_TO_ADDR
// if not result then
80131: LD_VAR 0 3
80135: NOT
80136: IFFALSE 80140
// exit ;
80138: GO 80596
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
80140: LD_ADDR_VAR 0 5
80144: PUSH
80145: LD_INT 81
80147: PUSH
80148: LD_VAR 0 8
80152: PUSH
80153: EMPTY
80154: LIST
80155: LIST
80156: PPUSH
80157: CALL_OW 69
80161: ST_TO_ADDR
// for i in result do
80162: LD_ADDR_VAR 0 4
80166: PUSH
80167: LD_VAR 0 3
80171: PUSH
80172: FOR_IN
80173: IFFALSE 80594
// begin tag := GetTag ( i ) + 1 ;
80175: LD_ADDR_VAR 0 9
80179: PUSH
80180: LD_VAR 0 4
80184: PPUSH
80185: CALL_OW 110
80189: PUSH
80190: LD_INT 1
80192: PLUS
80193: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
80194: LD_ADDR_VAR 0 7
80198: PUSH
80199: LD_VAR 0 4
80203: PPUSH
80204: CALL_OW 250
80208: PPUSH
80209: LD_VAR 0 4
80213: PPUSH
80214: CALL_OW 251
80218: PPUSH
80219: LD_INT 6
80221: PPUSH
80222: CALL 79795 0 3
80226: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
80227: LD_VAR 0 4
80231: PPUSH
80232: CALL_OW 247
80236: PUSH
80237: LD_INT 2
80239: EQUAL
80240: PUSH
80241: LD_VAR 0 7
80245: AND
80246: PUSH
80247: LD_VAR 0 4
80251: PPUSH
80252: CALL_OW 264
80256: PUSH
80257: LD_VAR 0 10
80261: IN
80262: NOT
80263: AND
80264: IFFALSE 80303
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
80266: LD_VAR 0 4
80270: PPUSH
80271: LD_VAR 0 7
80275: PUSH
80276: LD_INT 1
80278: ARRAY
80279: PUSH
80280: LD_INT 1
80282: ARRAY
80283: PPUSH
80284: LD_VAR 0 7
80288: PUSH
80289: LD_INT 1
80291: ARRAY
80292: PUSH
80293: LD_INT 2
80295: ARRAY
80296: PPUSH
80297: CALL_OW 116
80301: GO 80592
// if path > tag then
80303: LD_VAR 0 2
80307: PUSH
80308: LD_VAR 0 9
80312: GREATER
80313: IFFALSE 80521
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
80315: LD_ADDR_VAR 0 6
80319: PUSH
80320: LD_VAR 0 5
80324: PPUSH
80325: LD_INT 91
80327: PUSH
80328: LD_VAR 0 4
80332: PUSH
80333: LD_INT 8
80335: PUSH
80336: EMPTY
80337: LIST
80338: LIST
80339: LIST
80340: PPUSH
80341: CALL_OW 72
80345: ST_TO_ADDR
// if nearEnemy then
80346: LD_VAR 0 6
80350: IFFALSE 80419
// begin if GetWeapon ( i ) = ru_time_lapser then
80352: LD_VAR 0 4
80356: PPUSH
80357: CALL_OW 264
80361: PUSH
80362: LD_INT 49
80364: EQUAL
80365: IFFALSE 80393
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
80367: LD_VAR 0 4
80371: PPUSH
80372: LD_VAR 0 6
80376: PPUSH
80377: LD_VAR 0 4
80381: PPUSH
80382: CALL_OW 74
80386: PPUSH
80387: CALL_OW 112
80391: GO 80417
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
80393: LD_VAR 0 4
80397: PPUSH
80398: LD_VAR 0 6
80402: PPUSH
80403: LD_VAR 0 4
80407: PPUSH
80408: CALL_OW 74
80412: PPUSH
80413: CALL 81521 0 2
// end else
80417: GO 80519
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
80419: LD_VAR 0 4
80423: PPUSH
80424: LD_VAR 0 2
80428: PUSH
80429: LD_VAR 0 9
80433: ARRAY
80434: PUSH
80435: LD_INT 1
80437: ARRAY
80438: PPUSH
80439: LD_VAR 0 2
80443: PUSH
80444: LD_VAR 0 9
80448: ARRAY
80449: PUSH
80450: LD_INT 2
80452: ARRAY
80453: PPUSH
80454: CALL_OW 297
80458: PUSH
80459: LD_INT 6
80461: GREATER
80462: IFFALSE 80505
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
80464: LD_VAR 0 4
80468: PPUSH
80469: LD_VAR 0 2
80473: PUSH
80474: LD_VAR 0 9
80478: ARRAY
80479: PUSH
80480: LD_INT 1
80482: ARRAY
80483: PPUSH
80484: LD_VAR 0 2
80488: PUSH
80489: LD_VAR 0 9
80493: ARRAY
80494: PUSH
80495: LD_INT 2
80497: ARRAY
80498: PPUSH
80499: CALL_OW 114
80503: GO 80519
// SetTag ( i , tag ) ;
80505: LD_VAR 0 4
80509: PPUSH
80510: LD_VAR 0 9
80514: PPUSH
80515: CALL_OW 109
// end else
80519: GO 80592
// if enemy then
80521: LD_VAR 0 5
80525: IFFALSE 80592
// begin if GetWeapon ( i ) = ru_time_lapser then
80527: LD_VAR 0 4
80531: PPUSH
80532: CALL_OW 264
80536: PUSH
80537: LD_INT 49
80539: EQUAL
80540: IFFALSE 80568
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
80542: LD_VAR 0 4
80546: PPUSH
80547: LD_VAR 0 5
80551: PPUSH
80552: LD_VAR 0 4
80556: PPUSH
80557: CALL_OW 74
80561: PPUSH
80562: CALL_OW 112
80566: GO 80592
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
80568: LD_VAR 0 4
80572: PPUSH
80573: LD_VAR 0 5
80577: PPUSH
80578: LD_VAR 0 4
80582: PPUSH
80583: CALL_OW 74
80587: PPUSH
80588: CALL 81521 0 2
// end ; end ;
80592: GO 80172
80594: POP
80595: POP
// end ;
80596: LD_VAR 0 3
80600: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
80601: LD_INT 0
80603: PPUSH
80604: PPUSH
80605: PPUSH
// if not unit or IsInUnit ( unit ) then
80606: LD_VAR 0 1
80610: NOT
80611: PUSH
80612: LD_VAR 0 1
80616: PPUSH
80617: CALL_OW 310
80621: OR
80622: IFFALSE 80626
// exit ;
80624: GO 80717
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
80626: LD_ADDR_VAR 0 4
80630: PUSH
80631: LD_VAR 0 1
80635: PPUSH
80636: CALL_OW 250
80640: PPUSH
80641: LD_VAR 0 2
80645: PPUSH
80646: LD_INT 1
80648: PPUSH
80649: CALL_OW 272
80653: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
80654: LD_ADDR_VAR 0 5
80658: PUSH
80659: LD_VAR 0 1
80663: PPUSH
80664: CALL_OW 251
80668: PPUSH
80669: LD_VAR 0 2
80673: PPUSH
80674: LD_INT 1
80676: PPUSH
80677: CALL_OW 273
80681: ST_TO_ADDR
// if ValidHex ( x , y ) then
80682: LD_VAR 0 4
80686: PPUSH
80687: LD_VAR 0 5
80691: PPUSH
80692: CALL_OW 488
80696: IFFALSE 80717
// ComTurnXY ( unit , x , y ) ;
80698: LD_VAR 0 1
80702: PPUSH
80703: LD_VAR 0 4
80707: PPUSH
80708: LD_VAR 0 5
80712: PPUSH
80713: CALL_OW 118
// end ;
80717: LD_VAR 0 3
80721: RET
// export function SeeUnits ( side , units ) ; var i ; begin
80722: LD_INT 0
80724: PPUSH
80725: PPUSH
// result := false ;
80726: LD_ADDR_VAR 0 3
80730: PUSH
80731: LD_INT 0
80733: ST_TO_ADDR
// if not units then
80734: LD_VAR 0 2
80738: NOT
80739: IFFALSE 80743
// exit ;
80741: GO 80788
// for i in units do
80743: LD_ADDR_VAR 0 4
80747: PUSH
80748: LD_VAR 0 2
80752: PUSH
80753: FOR_IN
80754: IFFALSE 80786
// if See ( side , i ) then
80756: LD_VAR 0 1
80760: PPUSH
80761: LD_VAR 0 4
80765: PPUSH
80766: CALL_OW 292
80770: IFFALSE 80784
// begin result := true ;
80772: LD_ADDR_VAR 0 3
80776: PUSH
80777: LD_INT 1
80779: ST_TO_ADDR
// exit ;
80780: POP
80781: POP
80782: GO 80788
// end ;
80784: GO 80753
80786: POP
80787: POP
// end ;
80788: LD_VAR 0 3
80792: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
80793: LD_INT 0
80795: PPUSH
80796: PPUSH
80797: PPUSH
80798: PPUSH
// if not unit or not points then
80799: LD_VAR 0 1
80803: NOT
80804: PUSH
80805: LD_VAR 0 2
80809: NOT
80810: OR
80811: IFFALSE 80815
// exit ;
80813: GO 80905
// dist := 99999 ;
80815: LD_ADDR_VAR 0 5
80819: PUSH
80820: LD_INT 99999
80822: ST_TO_ADDR
// for i in points do
80823: LD_ADDR_VAR 0 4
80827: PUSH
80828: LD_VAR 0 2
80832: PUSH
80833: FOR_IN
80834: IFFALSE 80903
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
80836: LD_ADDR_VAR 0 6
80840: PUSH
80841: LD_VAR 0 1
80845: PPUSH
80846: LD_VAR 0 4
80850: PUSH
80851: LD_INT 1
80853: ARRAY
80854: PPUSH
80855: LD_VAR 0 4
80859: PUSH
80860: LD_INT 2
80862: ARRAY
80863: PPUSH
80864: CALL_OW 297
80868: ST_TO_ADDR
// if tmpDist < dist then
80869: LD_VAR 0 6
80873: PUSH
80874: LD_VAR 0 5
80878: LESS
80879: IFFALSE 80901
// begin result := i ;
80881: LD_ADDR_VAR 0 3
80885: PUSH
80886: LD_VAR 0 4
80890: ST_TO_ADDR
// dist := tmpDist ;
80891: LD_ADDR_VAR 0 5
80895: PUSH
80896: LD_VAR 0 6
80900: ST_TO_ADDR
// end ; end ;
80901: GO 80833
80903: POP
80904: POP
// end ;
80905: LD_VAR 0 3
80909: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80910: LD_INT 0
80912: PPUSH
// uc_side := side ;
80913: LD_ADDR_OWVAR 20
80917: PUSH
80918: LD_VAR 0 1
80922: ST_TO_ADDR
// uc_nation := 3 ;
80923: LD_ADDR_OWVAR 21
80927: PUSH
80928: LD_INT 3
80930: ST_TO_ADDR
// vc_chassis := 25 ;
80931: LD_ADDR_OWVAR 37
80935: PUSH
80936: LD_INT 25
80938: ST_TO_ADDR
// vc_engine := engine_siberite ;
80939: LD_ADDR_OWVAR 39
80943: PUSH
80944: LD_INT 3
80946: ST_TO_ADDR
// vc_control := control_computer ;
80947: LD_ADDR_OWVAR 38
80951: PUSH
80952: LD_INT 3
80954: ST_TO_ADDR
// vc_weapon := 59 ;
80955: LD_ADDR_OWVAR 40
80959: PUSH
80960: LD_INT 59
80962: ST_TO_ADDR
// result := CreateVehicle ;
80963: LD_ADDR_VAR 0 5
80967: PUSH
80968: CALL_OW 45
80972: ST_TO_ADDR
// SetDir ( result , d ) ;
80973: LD_VAR 0 5
80977: PPUSH
80978: LD_VAR 0 4
80982: PPUSH
80983: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80987: LD_VAR 0 5
80991: PPUSH
80992: LD_VAR 0 2
80996: PPUSH
80997: LD_VAR 0 3
81001: PPUSH
81002: LD_INT 0
81004: PPUSH
81005: CALL_OW 48
// end ;
81009: LD_VAR 0 5
81013: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
81014: LD_INT 0
81016: PPUSH
81017: PPUSH
81018: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
81019: LD_ADDR_VAR 0 2
81023: PUSH
81024: LD_INT 0
81026: PUSH
81027: LD_INT 0
81029: PUSH
81030: LD_INT 0
81032: PUSH
81033: LD_INT 0
81035: PUSH
81036: EMPTY
81037: LIST
81038: LIST
81039: LIST
81040: LIST
81041: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
81042: LD_VAR 0 1
81046: NOT
81047: PUSH
81048: LD_VAR 0 1
81052: PPUSH
81053: CALL_OW 264
81057: PUSH
81058: LD_INT 12
81060: PUSH
81061: LD_INT 51
81063: PUSH
81064: LD_INT 32
81066: PUSH
81067: LD_INT 89
81069: PUSH
81070: EMPTY
81071: LIST
81072: LIST
81073: LIST
81074: LIST
81075: IN
81076: NOT
81077: OR
81078: IFFALSE 81082
// exit ;
81080: GO 81180
// for i := 1 to 3 do
81082: LD_ADDR_VAR 0 3
81086: PUSH
81087: DOUBLE
81088: LD_INT 1
81090: DEC
81091: ST_TO_ADDR
81092: LD_INT 3
81094: PUSH
81095: FOR_TO
81096: IFFALSE 81178
// begin tmp := GetCargo ( cargo , i ) ;
81098: LD_ADDR_VAR 0 4
81102: PUSH
81103: LD_VAR 0 1
81107: PPUSH
81108: LD_VAR 0 3
81112: PPUSH
81113: CALL_OW 289
81117: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
81118: LD_ADDR_VAR 0 2
81122: PUSH
81123: LD_VAR 0 2
81127: PPUSH
81128: LD_VAR 0 3
81132: PPUSH
81133: LD_VAR 0 4
81137: PPUSH
81138: CALL_OW 1
81142: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
81143: LD_ADDR_VAR 0 2
81147: PUSH
81148: LD_VAR 0 2
81152: PPUSH
81153: LD_INT 4
81155: PPUSH
81156: LD_VAR 0 2
81160: PUSH
81161: LD_INT 4
81163: ARRAY
81164: PUSH
81165: LD_VAR 0 4
81169: PLUS
81170: PPUSH
81171: CALL_OW 1
81175: ST_TO_ADDR
// end ;
81176: GO 81095
81178: POP
81179: POP
// end ;
81180: LD_VAR 0 2
81184: RET
// export function Length ( array ) ; begin
81185: LD_INT 0
81187: PPUSH
// result := array + 0 ;
81188: LD_ADDR_VAR 0 2
81192: PUSH
81193: LD_VAR 0 1
81197: PUSH
81198: LD_INT 0
81200: PLUS
81201: ST_TO_ADDR
// end ;
81202: LD_VAR 0 2
81206: RET
// export function PrepareArray ( array ) ; begin
81207: LD_INT 0
81209: PPUSH
// result := array diff 0 ;
81210: LD_ADDR_VAR 0 2
81214: PUSH
81215: LD_VAR 0 1
81219: PUSH
81220: LD_INT 0
81222: DIFF
81223: ST_TO_ADDR
// if not result [ 1 ] then
81224: LD_VAR 0 2
81228: PUSH
81229: LD_INT 1
81231: ARRAY
81232: NOT
81233: IFFALSE 81253
// result := Delete ( result , 1 ) ;
81235: LD_ADDR_VAR 0 2
81239: PUSH
81240: LD_VAR 0 2
81244: PPUSH
81245: LD_INT 1
81247: PPUSH
81248: CALL_OW 3
81252: ST_TO_ADDR
// end ;
81253: LD_VAR 0 2
81257: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
81258: LD_INT 0
81260: PPUSH
81261: PPUSH
81262: PPUSH
81263: PPUSH
// sibRocketRange := 25 ;
81264: LD_ADDR_VAR 0 6
81268: PUSH
81269: LD_INT 25
81271: ST_TO_ADDR
// result := false ;
81272: LD_ADDR_VAR 0 4
81276: PUSH
81277: LD_INT 0
81279: ST_TO_ADDR
// for i := 0 to 5 do
81280: LD_ADDR_VAR 0 5
81284: PUSH
81285: DOUBLE
81286: LD_INT 0
81288: DEC
81289: ST_TO_ADDR
81290: LD_INT 5
81292: PUSH
81293: FOR_TO
81294: IFFALSE 81361
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
81296: LD_VAR 0 1
81300: PPUSH
81301: LD_VAR 0 5
81305: PPUSH
81306: LD_VAR 0 6
81310: PPUSH
81311: CALL_OW 272
81315: PPUSH
81316: LD_VAR 0 2
81320: PPUSH
81321: LD_VAR 0 5
81325: PPUSH
81326: LD_VAR 0 6
81330: PPUSH
81331: CALL_OW 273
81335: PPUSH
81336: LD_VAR 0 3
81340: PPUSH
81341: CALL_OW 309
81345: IFFALSE 81359
// begin result := true ;
81347: LD_ADDR_VAR 0 4
81351: PUSH
81352: LD_INT 1
81354: ST_TO_ADDR
// exit ;
81355: POP
81356: POP
81357: GO 81363
// end ;
81359: GO 81293
81361: POP
81362: POP
// end ;
81363: LD_VAR 0 4
81367: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
81368: LD_INT 0
81370: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
81371: LD_VAR 0 1
81375: PPUSH
81376: LD_VAR 0 2
81380: PPUSH
81381: LD_INT 0
81383: PPUSH
81384: LD_INT 0
81386: PPUSH
81387: LD_INT 1
81389: PPUSH
81390: LD_INT 0
81392: PPUSH
81393: CALL_OW 587
// end ;
81397: LD_VAR 0 3
81401: RET
// export function CenterOnNow ( unit ) ; begin
81402: LD_INT 0
81404: PPUSH
// result := IsInUnit ( unit ) ;
81405: LD_ADDR_VAR 0 2
81409: PUSH
81410: LD_VAR 0 1
81414: PPUSH
81415: CALL_OW 310
81419: ST_TO_ADDR
// if not result then
81420: LD_VAR 0 2
81424: NOT
81425: IFFALSE 81437
// result := unit ;
81427: LD_ADDR_VAR 0 2
81431: PUSH
81432: LD_VAR 0 1
81436: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
81437: LD_VAR 0 1
81441: PPUSH
81442: CALL_OW 87
// end ;
81446: LD_VAR 0 2
81450: RET
// export function ComMoveHex ( unit , hex ) ; begin
81451: LD_INT 0
81453: PPUSH
// if not hex then
81454: LD_VAR 0 2
81458: NOT
81459: IFFALSE 81463
// exit ;
81461: GO 81516
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
81463: LD_VAR 0 2
81467: PUSH
81468: LD_INT 1
81470: ARRAY
81471: PPUSH
81472: LD_VAR 0 2
81476: PUSH
81477: LD_INT 2
81479: ARRAY
81480: PPUSH
81481: CALL_OW 428
81485: IFFALSE 81489
// exit ;
81487: GO 81516
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
81489: LD_VAR 0 1
81493: PPUSH
81494: LD_VAR 0 2
81498: PUSH
81499: LD_INT 1
81501: ARRAY
81502: PPUSH
81503: LD_VAR 0 2
81507: PUSH
81508: LD_INT 2
81510: ARRAY
81511: PPUSH
81512: CALL_OW 111
// end ;
81516: LD_VAR 0 3
81520: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
81521: LD_INT 0
81523: PPUSH
81524: PPUSH
81525: PPUSH
// if not unit or not enemy then
81526: LD_VAR 0 1
81530: NOT
81531: PUSH
81532: LD_VAR 0 2
81536: NOT
81537: OR
81538: IFFALSE 81542
// exit ;
81540: GO 81666
// x := GetX ( enemy ) ;
81542: LD_ADDR_VAR 0 4
81546: PUSH
81547: LD_VAR 0 2
81551: PPUSH
81552: CALL_OW 250
81556: ST_TO_ADDR
// y := GetY ( enemy ) ;
81557: LD_ADDR_VAR 0 5
81561: PUSH
81562: LD_VAR 0 2
81566: PPUSH
81567: CALL_OW 251
81571: ST_TO_ADDR
// if ValidHex ( x , y ) then
81572: LD_VAR 0 4
81576: PPUSH
81577: LD_VAR 0 5
81581: PPUSH
81582: CALL_OW 488
81586: IFFALSE 81666
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
81588: LD_VAR 0 2
81592: PPUSH
81593: CALL_OW 247
81597: PUSH
81598: LD_INT 3
81600: PUSH
81601: LD_INT 2
81603: PUSH
81604: EMPTY
81605: LIST
81606: LIST
81607: IN
81608: PUSH
81609: LD_VAR 0 1
81613: PPUSH
81614: CALL_OW 255
81618: PPUSH
81619: LD_VAR 0 2
81623: PPUSH
81624: CALL_OW 292
81628: AND
81629: IFFALSE 81647
// ComAttackUnit ( unit , enemy ) else
81631: LD_VAR 0 1
81635: PPUSH
81636: LD_VAR 0 2
81640: PPUSH
81641: CALL_OW 115
81645: GO 81666
// ComAgressiveMove ( unit , x , y ) ;
81647: LD_VAR 0 1
81651: PPUSH
81652: LD_VAR 0 4
81656: PPUSH
81657: LD_VAR 0 5
81661: PPUSH
81662: CALL_OW 114
// end ;
81666: LD_VAR 0 3
81670: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
81671: LD_INT 0
81673: PPUSH
81674: PPUSH
81675: PPUSH
// list := AreaToList ( area , 0 ) ;
81676: LD_ADDR_VAR 0 5
81680: PUSH
81681: LD_VAR 0 1
81685: PPUSH
81686: LD_INT 0
81688: PPUSH
81689: CALL_OW 517
81693: ST_TO_ADDR
// if not list then
81694: LD_VAR 0 5
81698: NOT
81699: IFFALSE 81703
// exit ;
81701: GO 81833
// if all then
81703: LD_VAR 0 2
81707: IFFALSE 81795
// begin for i := 1 to list [ 1 ] do
81709: LD_ADDR_VAR 0 4
81713: PUSH
81714: DOUBLE
81715: LD_INT 1
81717: DEC
81718: ST_TO_ADDR
81719: LD_VAR 0 5
81723: PUSH
81724: LD_INT 1
81726: ARRAY
81727: PUSH
81728: FOR_TO
81729: IFFALSE 81791
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
81731: LD_ADDR_VAR 0 3
81735: PUSH
81736: LD_VAR 0 3
81740: PPUSH
81741: LD_VAR 0 3
81745: PUSH
81746: LD_INT 1
81748: PLUS
81749: PPUSH
81750: LD_VAR 0 5
81754: PUSH
81755: LD_INT 1
81757: ARRAY
81758: PUSH
81759: LD_VAR 0 4
81763: ARRAY
81764: PUSH
81765: LD_VAR 0 5
81769: PUSH
81770: LD_INT 2
81772: ARRAY
81773: PUSH
81774: LD_VAR 0 4
81778: ARRAY
81779: PUSH
81780: EMPTY
81781: LIST
81782: LIST
81783: PPUSH
81784: CALL_OW 1
81788: ST_TO_ADDR
81789: GO 81728
81791: POP
81792: POP
// exit ;
81793: GO 81833
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
81795: LD_ADDR_VAR 0 3
81799: PUSH
81800: LD_VAR 0 5
81804: PUSH
81805: LD_INT 1
81807: ARRAY
81808: PUSH
81809: LD_INT 1
81811: ARRAY
81812: PUSH
81813: LD_VAR 0 5
81817: PUSH
81818: LD_INT 2
81820: ARRAY
81821: PUSH
81822: LD_INT 1
81824: ARRAY
81825: PUSH
81826: EMPTY
81827: LIST
81828: LIST
81829: PUSH
81830: EMPTY
81831: LIST
81832: ST_TO_ADDR
// end ;
81833: LD_VAR 0 3
81837: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
81838: LD_INT 0
81840: PPUSH
81841: PPUSH
// list := AreaToList ( area , 0 ) ;
81842: LD_ADDR_VAR 0 4
81846: PUSH
81847: LD_VAR 0 1
81851: PPUSH
81852: LD_INT 0
81854: PPUSH
81855: CALL_OW 517
81859: ST_TO_ADDR
// if not list then
81860: LD_VAR 0 4
81864: NOT
81865: IFFALSE 81869
// exit ;
81867: GO 81910
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
81869: LD_ADDR_VAR 0 3
81873: PUSH
81874: LD_VAR 0 4
81878: PUSH
81879: LD_INT 1
81881: ARRAY
81882: PUSH
81883: LD_INT 1
81885: ARRAY
81886: PUSH
81887: LD_VAR 0 4
81891: PUSH
81892: LD_INT 2
81894: ARRAY
81895: PUSH
81896: LD_INT 1
81898: ARRAY
81899: PUSH
81900: LD_VAR 0 2
81904: PUSH
81905: EMPTY
81906: LIST
81907: LIST
81908: LIST
81909: ST_TO_ADDR
// end ;
81910: LD_VAR 0 3
81914: RET
// export function First ( array ) ; begin
81915: LD_INT 0
81917: PPUSH
// if not array then
81918: LD_VAR 0 1
81922: NOT
81923: IFFALSE 81927
// exit ;
81925: GO 81941
// result := array [ 1 ] ;
81927: LD_ADDR_VAR 0 2
81931: PUSH
81932: LD_VAR 0 1
81936: PUSH
81937: LD_INT 1
81939: ARRAY
81940: ST_TO_ADDR
// end ;
81941: LD_VAR 0 2
81945: RET
// export function Last ( array ) ; begin
81946: LD_INT 0
81948: PPUSH
// if not array then
81949: LD_VAR 0 1
81953: NOT
81954: IFFALSE 81958
// exit ;
81956: GO 81974
// result := array [ array ] ;
81958: LD_ADDR_VAR 0 2
81962: PUSH
81963: LD_VAR 0 1
81967: PUSH
81968: LD_VAR 0 1
81972: ARRAY
81973: ST_TO_ADDR
// end ; end_of_file
81974: LD_VAR 0 2
81978: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
81979: LD_VAR 0 1
81983: PUSH
81984: LD_INT 200
81986: DOUBLE
81987: GREATEREQUAL
81988: IFFALSE 81996
81990: LD_INT 299
81992: DOUBLE
81993: LESSEQUAL
81994: IFTRUE 81998
81996: GO 82030
81998: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
81999: LD_VAR 0 1
82003: PPUSH
82004: LD_VAR 0 2
82008: PPUSH
82009: LD_VAR 0 3
82013: PPUSH
82014: LD_VAR 0 4
82018: PPUSH
82019: LD_VAR 0 5
82023: PPUSH
82024: CALL 35229 0 5
82028: GO 82107
82030: LD_INT 300
82032: DOUBLE
82033: GREATEREQUAL
82034: IFFALSE 82042
82036: LD_INT 399
82038: DOUBLE
82039: LESSEQUAL
82040: IFTRUE 82044
82042: GO 82106
82044: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82045: LD_VAR 0 1
82049: PPUSH
82050: LD_VAR 0 2
82054: PPUSH
82055: LD_VAR 0 3
82059: PPUSH
82060: LD_VAR 0 4
82064: PPUSH
82065: LD_VAR 0 5
82069: PPUSH
82070: LD_VAR 0 6
82074: PPUSH
82075: LD_VAR 0 7
82079: PPUSH
82080: LD_VAR 0 8
82084: PPUSH
82085: LD_VAR 0 9
82089: PPUSH
82090: LD_VAR 0 10
82094: PPUSH
82095: LD_VAR 0 11
82099: PPUSH
82100: CALL 31554 0 11
82104: GO 82107
82106: POP
// end ;
82107: PPOPN 11
82109: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82110: LD_VAR 0 1
82114: PPUSH
82115: LD_VAR 0 2
82119: PPUSH
82120: LD_VAR 0 3
82124: PPUSH
82125: LD_VAR 0 4
82129: PPUSH
82130: LD_VAR 0 5
82134: PPUSH
82135: CALL 34965 0 5
// end ; end_of_file
82139: PPOPN 5
82141: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
82142: LD_VAR 0 1
82146: PPUSH
82147: LD_VAR 0 2
82151: PPUSH
82152: LD_VAR 0 3
82156: PPUSH
82157: LD_VAR 0 4
82161: PPUSH
82162: LD_VAR 0 5
82166: PPUSH
82167: LD_VAR 0 6
82171: PPUSH
82172: CALL 19206 0 6
// end ;
82176: PPOPN 6
82178: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
82179: LD_INT 0
82181: PPUSH
// begin if not units then
82182: LD_VAR 0 1
82186: NOT
82187: IFFALSE 82191
// exit ;
82189: GO 82191
// end ;
82191: PPOPN 7
82193: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
82194: CALL 19110 0 0
// end ;
82198: PPOPN 1
82200: END
