// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15073 0 0
// PrepareDifficulty ;
  43: CALL 12446 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3810 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3948 0 0
// Action ;
  87: CALL 5612 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 39129 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 39129 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 39129 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 39129 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 39129 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 39129 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 39129 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 39129 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 39129 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 39129 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 39129 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 39129 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 39129 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 76450 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rubar3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 5 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 226
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 9
3431: PPUSH
3432: LD_INT 5
3434: PPUSH
3435: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 4
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 2
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 112
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 3
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 47
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 129
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3575: LD_INT 3
3577: PPUSH
3578: LD_INT 3
3580: PPUSH
3581: LD_INT 135
3583: PPUSH
3584: LD_EXP 29
3588: PPUSH
3589: LD_EXP 30
3593: PPUSH
3594: CALL_OW 12
3598: PPUSH
3599: LD_INT 4
3601: PPUSH
3602: LD_INT 6
3604: PPUSH
3605: CALL 12765 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: LD_INT 22
3616: PUSH
3617: LD_INT 3
3619: PUSH
3620: EMPTY
3621: LIST
3622: LIST
3623: PUSH
3624: LD_INT 30
3626: PUSH
3627: LD_INT 32
3629: PUSH
3630: EMPTY
3631: LIST
3632: LIST
3633: PUSH
3634: EMPTY
3635: LIST
3636: LIST
3637: PPUSH
3638: CALL_OW 69
3642: PUSH
3643: FOR_IN
3644: IFFALSE 3684
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3646: LD_INT 3
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: LD_VAR 0 2
3656: PPUSH
3657: LD_EXP 29
3661: PPUSH
3662: LD_EXP 30
3666: PPUSH
3667: CALL_OW 12
3671: PPUSH
3672: LD_INT 1
3674: PPUSH
3675: LD_INT 1
3677: PPUSH
3678: CALL 12765 0 6
3682: GO 3643
3684: POP
3685: POP
// for i := 1 to 5 do
3686: LD_ADDR_VAR 0 2
3690: PUSH
3691: DOUBLE
3692: LD_INT 1
3694: DEC
3695: ST_TO_ADDR
3696: LD_INT 5
3698: PUSH
3699: FOR_TO
3700: IFFALSE 3803
// begin uc_side := 3 ;
3702: LD_ADDR_OWVAR 20
3706: PUSH
3707: LD_INT 3
3709: ST_TO_ADDR
// uc_nation := 3 ;
3710: LD_ADDR_OWVAR 21
3714: PUSH
3715: LD_INT 3
3717: ST_TO_ADDR
// hc_gallery :=  ;
3718: LD_ADDR_OWVAR 33
3722: PUSH
3723: LD_STRING 
3725: ST_TO_ADDR
// hc_name :=  ;
3726: LD_ADDR_OWVAR 26
3730: PUSH
3731: LD_STRING 
3733: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3734: LD_INT 0
3736: PPUSH
3737: LD_INT 4
3739: PPUSH
3740: LD_EXP 29
3744: PPUSH
3745: LD_EXP 30
3749: PPUSH
3750: CALL_OW 12
3754: PPUSH
3755: CALL_OW 380
// un := CreateHuman ;
3759: LD_ADDR_VAR 0 3
3763: PUSH
3764: CALL_OW 44
3768: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3769: LD_VAR 0 3
3773: PPUSH
3774: LD_INT 3
3776: PPUSH
3777: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3781: LD_ADDR_EXP 27
3785: PUSH
3786: LD_EXP 27
3790: PPUSH
3791: LD_VAR 0 3
3795: PPUSH
3796: CALL 76450 0 2
3800: ST_TO_ADDR
// end ;
3801: GO 3699
3803: POP
3804: POP
// end ;
3805: LD_VAR 0 1
3809: RET
// export function PrepareWestBase ; var i , un ; begin
3810: LD_INT 0
3812: PPUSH
3813: PPUSH
3814: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3815: LD_INT 10
3817: PPUSH
3818: LD_INT 122
3820: PPUSH
3821: LD_INT 145
3823: PPUSH
3824: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3828: LD_INT 137
3830: PPUSH
3831: LD_INT 84
3833: PPUSH
3834: LD_INT 61
3836: PPUSH
3837: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 6
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 2
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12765 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 91
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 4
3901: PPUSH
3902: LD_INT 3
3904: PPUSH
3905: CALL 12765 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3909: LD_INT 3
3911: PPUSH
3912: LD_INT 3
3914: PPUSH
3915: LD_INT 21
3917: PPUSH
3918: LD_EXP 29
3922: PPUSH
3923: LD_EXP 30
3927: PPUSH
3928: CALL_OW 12
3932: PPUSH
3933: LD_INT 3
3935: PPUSH
3936: LD_INT 6
3938: PPUSH
3939: CALL 12765 0 6
// end ;
3943: LD_VAR 0 1
3947: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3948: LD_INT 0
3950: PPUSH
3951: PPUSH
3952: PPUSH
3953: PPUSH
// uc_side := 3 ;
3954: LD_ADDR_OWVAR 20
3958: PUSH
3959: LD_INT 3
3961: ST_TO_ADDR
// uc_nation := 3 ;
3962: LD_ADDR_OWVAR 21
3966: PUSH
3967: LD_INT 3
3969: ST_TO_ADDR
// for i := 1 to 5 do
3970: LD_ADDR_VAR 0 2
3974: PUSH
3975: DOUBLE
3976: LD_INT 1
3978: DEC
3979: ST_TO_ADDR
3980: LD_INT 5
3982: PUSH
3983: FOR_TO
3984: IFFALSE 4054
// begin hc_gallery :=  ;
3986: LD_ADDR_OWVAR 33
3990: PUSH
3991: LD_STRING 
3993: ST_TO_ADDR
// hc_name :=  ;
3994: LD_ADDR_OWVAR 26
3998: PUSH
3999: LD_STRING 
4001: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4002: LD_INT 0
4004: PPUSH
4005: LD_INT 9
4007: PPUSH
4008: LD_EXP 29
4012: PPUSH
4013: LD_EXP 30
4017: PPUSH
4018: CALL_OW 12
4022: PPUSH
4023: CALL_OW 380
// un := CreateHuman ;
4027: LD_ADDR_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4037: LD_VAR 0 3
4041: PPUSH
4042: LD_INT 8
4044: PPUSH
4045: LD_INT 0
4047: PPUSH
4048: CALL_OW 49
// end ;
4052: GO 3983
4054: POP
4055: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4056: LD_ADDR_VAR 0 2
4060: PUSH
4061: DOUBLE
4062: LD_INT 1
4064: DEC
4065: ST_TO_ADDR
4066: LD_INT 2
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: LD_INT 4
4074: PUSH
4075: LD_INT 4
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_OWVAR 67
4088: ARRAY
4089: PUSH
4090: FOR_TO
4091: IFFALSE 4161
// begin hc_gallery :=  ;
4093: LD_ADDR_OWVAR 33
4097: PUSH
4098: LD_STRING 
4100: ST_TO_ADDR
// hc_name :=  ;
4101: LD_ADDR_OWVAR 26
4105: PUSH
4106: LD_STRING 
4108: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4109: LD_INT 0
4111: PPUSH
4112: LD_INT 4
4114: PPUSH
4115: LD_EXP 29
4119: PPUSH
4120: LD_EXP 30
4124: PPUSH
4125: CALL_OW 12
4129: PPUSH
4130: CALL_OW 380
// un := CreateHuman ;
4134: LD_ADDR_VAR 0 3
4138: PUSH
4139: CALL_OW 44
4143: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4144: LD_VAR 0 3
4148: PPUSH
4149: LD_INT 8
4151: PPUSH
4152: LD_INT 0
4154: PPUSH
4155: CALL_OW 49
// end ;
4159: GO 4090
4161: POP
4162: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4163: LD_ADDR_VAR 0 2
4167: PUSH
4168: DOUBLE
4169: LD_INT 1
4171: DEC
4172: ST_TO_ADDR
4173: LD_INT 3
4175: PUSH
4176: LD_INT 4
4178: PUSH
4179: LD_INT 5
4181: PUSH
4182: LD_INT 5
4184: PUSH
4185: EMPTY
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: PUSH
4191: LD_OWVAR 67
4195: ARRAY
4196: PUSH
4197: FOR_TO
4198: IFFALSE 4415
// begin vc_engine = 3 ;
4200: LD_ADDR_OWVAR 39
4204: PUSH
4205: LD_INT 3
4207: ST_TO_ADDR
// vc_control = 1 ;
4208: LD_ADDR_OWVAR 38
4212: PUSH
4213: LD_INT 1
4215: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4216: LD_ADDR_OWVAR 40
4220: PUSH
4221: LD_INT 42
4223: PUSH
4224: LD_INT 43
4226: PUSH
4227: LD_INT 44
4229: PUSH
4230: LD_INT 45
4232: PUSH
4233: LD_INT 46
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: PUSH
4243: LD_INT 1
4245: PPUSH
4246: LD_INT 5
4248: PPUSH
4249: CALL_OW 12
4253: ARRAY
4254: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4255: LD_OWVAR 40
4259: PUSH
4260: LD_INT 46
4262: EQUAL
4263: IFFALSE 4275
// vc_chassis := ru_heavy_tracked else
4265: LD_ADDR_OWVAR 37
4269: PUSH
4270: LD_INT 24
4272: ST_TO_ADDR
4273: GO 4302
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4275: LD_ADDR_OWVAR 37
4279: PUSH
4280: LD_INT 22
4282: PUSH
4283: LD_INT 21
4285: PUSH
4286: EMPTY
4287: LIST
4288: LIST
4289: PUSH
4290: LD_INT 1
4292: PPUSH
4293: LD_INT 2
4295: PPUSH
4296: CALL_OW 12
4300: ARRAY
4301: ST_TO_ADDR
// veh := CreateVehicle ;
4302: LD_ADDR_VAR 0 4
4306: PUSH
4307: CALL_OW 45
4311: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4312: LD_VAR 0 4
4316: PPUSH
4317: LD_INT 3
4319: PPUSH
4320: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4324: LD_VAR 0 4
4328: PPUSH
4329: LD_INT 5
4331: PPUSH
4332: LD_INT 0
4334: PPUSH
4335: CALL_OW 49
// hc_gallery :=  ;
4339: LD_ADDR_OWVAR 33
4343: PUSH
4344: LD_STRING 
4346: ST_TO_ADDR
// hc_name :=  ;
4347: LD_ADDR_OWVAR 26
4351: PUSH
4352: LD_STRING 
4354: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
4355: LD_INT 0
4357: PPUSH
4358: LD_INT 3
4360: PPUSH
4361: LD_INT 6
4363: PUSH
4364: LD_INT 7
4366: PUSH
4367: LD_INT 8
4369: PUSH
4370: LD_INT 10
4372: PUSH
4373: EMPTY
4374: LIST
4375: LIST
4376: LIST
4377: LIST
4378: PUSH
4379: LD_OWVAR 67
4383: ARRAY
4384: PPUSH
4385: CALL_OW 380
// un = CreateHuman ;
4389: LD_ADDR_VAR 0 3
4393: PUSH
4394: CALL_OW 44
4398: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4399: LD_VAR 0 3
4403: PPUSH
4404: LD_VAR 0 4
4408: PPUSH
4409: CALL_OW 52
// end ;
4413: GO 4197
4415: POP
4416: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: DOUBLE
4423: LD_INT 1
4425: DEC
4426: ST_TO_ADDR
4427: LD_INT 3
4429: PUSH
4430: LD_INT 4
4432: PUSH
4433: LD_INT 5
4435: PUSH
4436: LD_INT 5
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: LD_OWVAR 67
4449: ARRAY
4450: PUSH
4451: FOR_TO
4452: IFFALSE 4599
// begin vc_engine := 3 ;
4454: LD_ADDR_OWVAR 39
4458: PUSH
4459: LD_INT 3
4461: ST_TO_ADDR
// vc_control := 3 ;
4462: LD_ADDR_OWVAR 38
4466: PUSH
4467: LD_INT 3
4469: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4470: LD_ADDR_OWVAR 40
4474: PUSH
4475: LD_INT 42
4477: PUSH
4478: LD_INT 43
4480: PUSH
4481: LD_INT 44
4483: PUSH
4484: LD_INT 45
4486: PUSH
4487: LD_INT 46
4489: PUSH
4490: LD_INT 49
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: PUSH
4501: LD_INT 1
4503: PPUSH
4504: LD_INT 5
4506: PPUSH
4507: CALL_OW 12
4511: ARRAY
4512: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4513: LD_OWVAR 40
4517: PUSH
4518: LD_INT 46
4520: EQUAL
4521: IFFALSE 4533
// vc_chassis := ru_heavy_tracked else
4523: LD_ADDR_OWVAR 37
4527: PUSH
4528: LD_INT 24
4530: ST_TO_ADDR
4531: GO 4560
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4533: LD_ADDR_OWVAR 37
4537: PUSH
4538: LD_INT 22
4540: PUSH
4541: LD_INT 21
4543: PUSH
4544: EMPTY
4545: LIST
4546: LIST
4547: PUSH
4548: LD_INT 1
4550: PPUSH
4551: LD_INT 2
4553: PPUSH
4554: CALL_OW 12
4558: ARRAY
4559: ST_TO_ADDR
// veh := CreateVehicle ;
4560: LD_ADDR_VAR 0 4
4564: PUSH
4565: CALL_OW 45
4569: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4570: LD_VAR 0 4
4574: PPUSH
4575: LD_INT 3
4577: PPUSH
4578: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4582: LD_VAR 0 4
4586: PPUSH
4587: LD_INT 6
4589: PPUSH
4590: LD_INT 0
4592: PPUSH
4593: CALL_OW 49
// end ;
4597: GO 4451
4599: POP
4600: POP
// end ; end_of_file
4601: LD_VAR 0 1
4605: RET
// export function PrepareKurt ; begin
4606: LD_INT 0
4608: PPUSH
// uc_side := 8 ;
4609: LD_ADDR_OWVAR 20
4613: PUSH
4614: LD_INT 8
4616: ST_TO_ADDR
// uc_nation := 2 ;
4617: LD_ADDR_OWVAR 21
4621: PUSH
4622: LD_INT 2
4624: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4625: LD_ADDR_OWVAR 37
4629: PUSH
4630: LD_INT 13
4632: ST_TO_ADDR
// vc_engine := 1 ;
4633: LD_ADDR_OWVAR 39
4637: PUSH
4638: LD_INT 1
4640: ST_TO_ADDR
// vc_control := 1 ;
4641: LD_ADDR_OWVAR 38
4645: PUSH
4646: LD_INT 1
4648: ST_TO_ADDR
// vc_weapon := 24 ;
4649: LD_ADDR_OWVAR 40
4653: PUSH
4654: LD_INT 24
4656: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
4657: LD_ADDR_EXP 18
4661: PUSH
4662: CALL_OW 45
4666: ST_TO_ADDR
// if kurtStatus > 0 then
4667: LD_EXP 19
4671: PUSH
4672: LD_INT 0
4674: GREATER
4675: IFFALSE 4727
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
4677: LD_ADDR_EXP 17
4681: PUSH
4682: LD_STRING Kurt
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: LD_STRING 
4690: PPUSH
4691: CALL 39129 0 3
4695: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4696: LD_EXP 18
4700: PPUSH
4701: LD_INT 4
4703: PPUSH
4704: LD_INT 0
4706: PPUSH
4707: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4711: LD_EXP 17
4715: PPUSH
4716: LD_EXP 18
4720: PPUSH
4721: CALL_OW 52
// end else
4725: GO 4804
// begin hc_name :=  ;
4727: LD_ADDR_OWVAR 26
4731: PUSH
4732: LD_STRING 
4734: ST_TO_ADDR
// hc_gallery :=  ;
4735: LD_ADDR_OWVAR 33
4739: PUSH
4740: LD_STRING 
4742: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4743: LD_INT 1
4745: PPUSH
4746: LD_INT 10
4748: PPUSH
4749: CALL_OW 381
// Kurt := CreateHuman ;
4753: LD_ADDR_EXP 17
4757: PUSH
4758: CALL_OW 44
4762: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4763: LD_EXP 18
4767: PPUSH
4768: LD_INT 4
4770: PPUSH
4771: LD_INT 0
4773: PPUSH
4774: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4778: LD_EXP 17
4782: PPUSH
4783: LD_EXP 18
4787: PPUSH
4788: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4792: LD_EXP 17
4796: PPUSH
4797: LD_STRING AltKurt
4799: PPUSH
4800: CALL_OW 38
// end ; end ;
4804: LD_VAR 0 1
4808: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4809: LD_INT 0
4811: PPUSH
4812: PPUSH
4813: PPUSH
4814: PPUSH
// for i := 1 to 3 do
4815: LD_ADDR_VAR 0 2
4819: PUSH
4820: DOUBLE
4821: LD_INT 1
4823: DEC
4824: ST_TO_ADDR
4825: LD_INT 3
4827: PUSH
4828: FOR_TO
4829: IFFALSE 4950
// begin uc_side := 1 ;
4831: LD_ADDR_OWVAR 20
4835: PUSH
4836: LD_INT 1
4838: ST_TO_ADDR
// uc_nation := 2 ;
4839: LD_ADDR_OWVAR 21
4843: PUSH
4844: LD_INT 2
4846: ST_TO_ADDR
// hc_gallery =  ;
4847: LD_ADDR_OWVAR 33
4851: PUSH
4852: LD_STRING 
4854: ST_TO_ADDR
// hc_name =  ;
4855: LD_ADDR_OWVAR 26
4859: PUSH
4860: LD_STRING 
4862: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4863: LD_EXP 19
4867: PUSH
4868: LD_INT 0
4870: EQUAL
4871: PUSH
4872: LD_EXP 19
4876: PUSH
4877: LD_INT 2
4879: EQUAL
4880: OR
4881: IFFALSE 4898
// PrepareHuman ( false , 1 , 6 ) else
4883: LD_INT 0
4885: PPUSH
4886: LD_INT 1
4888: PPUSH
4889: LD_INT 6
4891: PPUSH
4892: CALL_OW 380
4896: GO 4911
// PrepareHuman ( false , 1 , 8 ) ;
4898: LD_INT 0
4900: PPUSH
4901: LD_INT 1
4903: PPUSH
4904: LD_INT 8
4906: PPUSH
4907: CALL_OW 380
// un := CreateHuman ;
4911: LD_ADDR_VAR 0 3
4915: PUSH
4916: CALL_OW 44
4920: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4921: LD_VAR 0 3
4925: PPUSH
4926: LD_INT 4
4928: PPUSH
4929: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4933: LD_VAR 0 3
4937: PPUSH
4938: LD_INT 4
4940: PPUSH
4941: LD_INT 0
4943: PPUSH
4944: CALL_OW 49
// end ;
4948: GO 4828
4950: POP
4951: POP
// vc_chassis := 14 ;
4952: LD_ADDR_OWVAR 37
4956: PUSH
4957: LD_INT 14
4959: ST_TO_ADDR
// vc_engine := 3 ;
4960: LD_ADDR_OWVAR 39
4964: PUSH
4965: LD_INT 3
4967: ST_TO_ADDR
// vc_control := 1 ;
4968: LD_ADDR_OWVAR 38
4972: PUSH
4973: LD_INT 1
4975: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4976: LD_ADDR_OWVAR 40
4980: PUSH
4981: LD_INT 27
4983: PUSH
4984: LD_INT 26
4986: PUSH
4987: LD_INT 28
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 1
4997: PPUSH
4998: LD_INT 3
5000: PPUSH
5001: CALL_OW 12
5005: ARRAY
5006: ST_TO_ADDR
// veh := CreateVehicle ;
5007: LD_ADDR_VAR 0 4
5011: PUSH
5012: CALL_OW 45
5016: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5017: LD_VAR 0 4
5021: PPUSH
5022: LD_INT 4
5024: PPUSH
5025: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5029: LD_VAR 0 4
5033: PPUSH
5034: LD_INT 4
5036: PPUSH
5037: LD_INT 0
5039: PPUSH
5040: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5044: LD_EXP 19
5048: PUSH
5049: LD_INT 0
5051: EQUAL
5052: PUSH
5053: LD_EXP 19
5057: PUSH
5058: LD_INT 2
5060: EQUAL
5061: OR
5062: IFFALSE 5079
// PrepareHuman ( false , 3 , 6 ) else
5064: LD_INT 0
5066: PPUSH
5067: LD_INT 3
5069: PPUSH
5070: LD_INT 6
5072: PPUSH
5073: CALL_OW 380
5077: GO 5092
// PrepareHuman ( false , 3 , 8 ) ;
5079: LD_INT 0
5081: PPUSH
5082: LD_INT 3
5084: PPUSH
5085: LD_INT 8
5087: PPUSH
5088: CALL_OW 380
// un := CreateHuman ;
5092: LD_ADDR_VAR 0 3
5096: PUSH
5097: CALL_OW 44
5101: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5102: LD_VAR 0 3
5106: PPUSH
5107: LD_VAR 0 4
5111: PPUSH
5112: CALL_OW 52
// vc_chassis := 14 ;
5116: LD_ADDR_OWVAR 37
5120: PUSH
5121: LD_INT 14
5123: ST_TO_ADDR
// vc_engine := 3 ;
5124: LD_ADDR_OWVAR 39
5128: PUSH
5129: LD_INT 3
5131: ST_TO_ADDR
// vc_control := 1 ;
5132: LD_ADDR_OWVAR 38
5136: PUSH
5137: LD_INT 1
5139: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5140: LD_ADDR_OWVAR 40
5144: PUSH
5145: LD_INT 27
5147: PUSH
5148: LD_INT 26
5150: PUSH
5151: LD_INT 28
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: LIST
5158: PUSH
5159: LD_INT 1
5161: PPUSH
5162: LD_INT 3
5164: PPUSH
5165: CALL_OW 12
5169: ARRAY
5170: ST_TO_ADDR
// veh := CreateVehicle ;
5171: LD_ADDR_VAR 0 4
5175: PUSH
5176: CALL_OW 45
5180: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5181: LD_VAR 0 4
5185: PPUSH
5186: LD_INT 4
5188: PPUSH
5189: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5193: LD_VAR 0 4
5197: PPUSH
5198: LD_INT 4
5200: PPUSH
5201: LD_INT 0
5203: PPUSH
5204: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5208: LD_EXP 19
5212: PUSH
5213: LD_INT 0
5215: EQUAL
5216: PUSH
5217: LD_EXP 19
5221: PUSH
5222: LD_INT 2
5224: EQUAL
5225: OR
5226: IFFALSE 5243
// PrepareHuman ( false , 4 , 6 ) else
5228: LD_INT 0
5230: PPUSH
5231: LD_INT 4
5233: PPUSH
5234: LD_INT 6
5236: PPUSH
5237: CALL_OW 380
5241: GO 5256
// PrepareHuman ( false , 4 , 8 ) ;
5243: LD_INT 0
5245: PPUSH
5246: LD_INT 4
5248: PPUSH
5249: LD_INT 8
5251: PPUSH
5252: CALL_OW 380
// un := CreateHuman ;
5256: LD_ADDR_VAR 0 3
5260: PUSH
5261: CALL_OW 44
5265: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5266: LD_VAR 0 3
5270: PPUSH
5271: LD_INT 4
5273: PPUSH
5274: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5278: LD_VAR 0 3
5282: PPUSH
5283: LD_VAR 0 4
5287: PPUSH
5288: CALL_OW 52
// vc_chassis := 14 ;
5292: LD_ADDR_OWVAR 37
5296: PUSH
5297: LD_INT 14
5299: ST_TO_ADDR
// vc_engine := 3 ;
5300: LD_ADDR_OWVAR 39
5304: PUSH
5305: LD_INT 3
5307: ST_TO_ADDR
// vc_control := 1 ;
5308: LD_ADDR_OWVAR 38
5312: PUSH
5313: LD_INT 1
5315: ST_TO_ADDR
// vc_weapon := 26 ;
5316: LD_ADDR_OWVAR 40
5320: PUSH
5321: LD_INT 26
5323: ST_TO_ADDR
// veh := CreateVehicle ;
5324: LD_ADDR_VAR 0 4
5328: PUSH
5329: CALL_OW 45
5333: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5334: LD_VAR 0 4
5338: PPUSH
5339: LD_INT 4
5341: PPUSH
5342: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5346: LD_VAR 0 4
5350: PPUSH
5351: LD_INT 4
5353: PPUSH
5354: LD_INT 0
5356: PPUSH
5357: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5361: LD_EXP 19
5365: PUSH
5366: LD_INT 0
5368: EQUAL
5369: PUSH
5370: LD_EXP 19
5374: PUSH
5375: LD_INT 2
5377: EQUAL
5378: OR
5379: IFFALSE 5396
// PrepareHuman ( false , 2 , 4 ) else
5381: LD_INT 0
5383: PPUSH
5384: LD_INT 2
5386: PPUSH
5387: LD_INT 4
5389: PPUSH
5390: CALL_OW 380
5394: GO 5409
// PrepareHuman ( false , 2 , 8 ) ;
5396: LD_INT 0
5398: PPUSH
5399: LD_INT 2
5401: PPUSH
5402: LD_INT 8
5404: PPUSH
5405: CALL_OW 380
// un := CreateHuman ;
5409: LD_ADDR_VAR 0 3
5413: PUSH
5414: CALL_OW 44
5418: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5419: LD_VAR 0 3
5423: PPUSH
5424: LD_INT 4
5426: PPUSH
5427: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5431: LD_VAR 0 3
5435: PPUSH
5436: LD_VAR 0 4
5440: PPUSH
5441: CALL_OW 52
// end ;
5445: LD_VAR 0 1
5449: RET
// export function PrepareAttackLegion ; var i , un ; begin
5450: LD_INT 0
5452: PPUSH
5453: PPUSH
5454: PPUSH
// for i := 1 to 4 do
5455: LD_ADDR_VAR 0 2
5459: PUSH
5460: DOUBLE
5461: LD_INT 1
5463: DEC
5464: ST_TO_ADDR
5465: LD_INT 4
5467: PUSH
5468: FOR_TO
5469: IFFALSE 5579
// begin uc_side := 8 ;
5471: LD_ADDR_OWVAR 20
5475: PUSH
5476: LD_INT 8
5478: ST_TO_ADDR
// uc_nation := 2 ;
5479: LD_ADDR_OWVAR 21
5483: PUSH
5484: LD_INT 2
5486: ST_TO_ADDR
// hc_gallery :=  ;
5487: LD_ADDR_OWVAR 33
5491: PUSH
5492: LD_STRING 
5494: ST_TO_ADDR
// hc_name :=  ;
5495: LD_ADDR_OWVAR 26
5499: PUSH
5500: LD_STRING 
5502: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5503: LD_INT 0
5505: PPUSH
5506: LD_INT 1
5508: PUSH
5509: LD_INT 8
5511: PUSH
5512: EMPTY
5513: LIST
5514: LIST
5515: PUSH
5516: LD_INT 1
5518: PPUSH
5519: LD_INT 2
5521: PPUSH
5522: CALL_OW 12
5526: ARRAY
5527: PPUSH
5528: LD_INT 6
5530: PPUSH
5531: LD_INT 8
5533: PPUSH
5534: CALL_OW 12
5538: PPUSH
5539: CALL_OW 380
// un := CreateHuman ;
5543: LD_ADDR_VAR 0 3
5547: PUSH
5548: CALL_OW 44
5552: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5553: LD_VAR 0 3
5557: PPUSH
5558: LD_INT 19
5560: PPUSH
5561: LD_INT 0
5563: PPUSH
5564: CALL_OW 49
// ComCrawl ( un ) ;
5568: LD_VAR 0 3
5572: PPUSH
5573: CALL_OW 137
// end ;
5577: GO 5468
5579: POP
5580: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5581: LD_INT 1
5583: PPUSH
5584: LD_INT 8
5586: PPUSH
5587: LD_INT 2
5589: PPUSH
5590: LD_INT 1
5592: PPUSH
5593: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5597: LD_INT 20
5599: PPUSH
5600: LD_INT 3
5602: PPUSH
5603: CALL 14600 0 2
// end ; end_of_file
5607: LD_VAR 0 1
5611: RET
// export function Action ; var i , tmp , group ; begin
5612: LD_INT 0
5614: PPUSH
5615: PPUSH
5616: PPUSH
5617: PPUSH
// InGameOn ;
5618: CALL_OW 8
// music_nat := 1 ;
5622: LD_ADDR_OWVAR 71
5626: PUSH
5627: LD_INT 1
5629: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5630: LD_ADDR_VAR 0 4
5634: PUSH
5635: LD_INT 22
5637: PUSH
5638: LD_INT 1
5640: PUSH
5641: EMPTY
5642: LIST
5643: LIST
5644: PPUSH
5645: CALL_OW 69
5649: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5650: LD_ADDR_VAR 0 3
5654: PUSH
5655: LD_EXP 1
5659: PPUSH
5660: CALL_OW 310
5664: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5665: LD_VAR 0 3
5669: PPUSH
5670: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5674: LD_VAR 0 4
5678: PPUSH
5679: LD_INT 130
5681: PPUSH
5682: LD_INT 103
5684: PPUSH
5685: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5689: LD_VAR 0 3
5693: PPUSH
5694: LD_INT 114
5696: PPUSH
5697: LD_INT 102
5699: PPUSH
5700: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5704: LD_EXP 1
5708: PPUSH
5709: LD_STRING D1-JMM-1
5711: PPUSH
5712: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5716: LD_VAR 0 3
5720: PPUSH
5721: CALL_OW 87
// if IsOk ( Donaldson ) then
5725: LD_EXP 3
5729: PPUSH
5730: CALL_OW 302
5734: IFFALSE 5799
// begin Say ( Donaldson , D1-Don-1 ) ;
5736: LD_EXP 3
5740: PPUSH
5741: LD_STRING D1-Don-1
5743: PPUSH
5744: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5748: LD_VAR 0 3
5752: PPUSH
5753: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5757: LD_EXP 1
5761: PPUSH
5762: LD_STRING D1-JMM-2
5764: PPUSH
5765: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5769: LD_VAR 0 3
5773: PPUSH
5774: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5778: LD_EXP 3
5782: PPUSH
5783: LD_STRING D1-Don-2
5785: PPUSH
5786: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5790: LD_VAR 0 3
5794: PPUSH
5795: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5799: LD_VAR 0 4
5803: PPUSH
5804: LD_INT 110
5806: PPUSH
5807: LD_INT 101
5809: PPUSH
5810: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5814: LD_INT 35
5816: PPUSH
5817: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5821: LD_VAR 0 3
5825: PPUSH
5826: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5830: LD_INT 1
5832: PPUSH
5833: LD_INT 102
5835: PPUSH
5836: LD_INT 94
5838: PPUSH
5839: CALL_OW 293
5843: IFFALSE 5814
// CenterOnXY ( 102 , 94 ) ;
5845: LD_INT 102
5847: PPUSH
5848: LD_INT 94
5850: PPUSH
5851: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5855: LD_VAR 0 4
5859: PPUSH
5860: LD_INT 26
5862: PUSH
5863: LD_INT 1
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PPUSH
5870: CALL_OW 72
5874: PPUSH
5875: LD_STRING D1-Sol1-2
5877: PPUSH
5878: LD_STRING 
5880: PPUSH
5881: CALL 12260 0 3
// Say ( JMM , D1-JMM-3 ) ;
5885: LD_EXP 1
5889: PPUSH
5890: LD_STRING D1-JMM-3
5892: PPUSH
5893: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5897: LD_STRING M1
5899: PPUSH
5900: CALL_OW 337
// for i in group do
5904: LD_ADDR_VAR 0 2
5908: PUSH
5909: LD_VAR 0 4
5913: PUSH
5914: FOR_IN
5915: IFFALSE 5934
// ComMoveXY ( i , 95 , 84 ) ;
5917: LD_VAR 0 2
5921: PPUSH
5922: LD_INT 95
5924: PPUSH
5925: LD_INT 84
5927: PPUSH
5928: CALL_OW 111
5932: GO 5914
5934: POP
5935: POP
// end ;
5936: LD_VAR 0 1
5940: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
5941: LD_INT 7
5943: PPUSH
5944: LD_INT 22
5946: PUSH
5947: LD_INT 1
5949: PUSH
5950: EMPTY
5951: LIST
5952: LIST
5953: PPUSH
5954: CALL_OW 70
5958: PUSH
5959: LD_INT 1
5961: GREATER
5962: IFFALSE 6612
5964: GO 5966
5966: DISABLE
5967: LD_INT 0
5969: PPUSH
5970: PPUSH
5971: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5972: LD_ADDR_VAR 0 2
5976: PUSH
5977: LD_INT 8
5979: PPUSH
5980: LD_INT 22
5982: PUSH
5983: LD_INT 3
5985: PUSH
5986: EMPTY
5987: LIST
5988: LIST
5989: PUSH
5990: LD_INT 25
5992: PUSH
5993: LD_INT 9
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: PUSH
6000: EMPTY
6001: LIST
6002: LIST
6003: PPUSH
6004: CALL_OW 70
6008: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
6009: LD_VAR 0 2
6013: PPUSH
6014: LD_INT 96
6016: PPUSH
6017: LD_INT 85
6019: PPUSH
6020: CALL_OW 154
// for i := 1 to 5 do
6024: LD_ADDR_VAR 0 1
6028: PUSH
6029: DOUBLE
6030: LD_INT 1
6032: DEC
6033: ST_TO_ADDR
6034: LD_INT 5
6036: PUSH
6037: FOR_TO
6038: IFFALSE 6057
// AddComTimeShift ( tmp , 96 , 85 ) ;
6040: LD_VAR 0 2
6044: PPUSH
6045: LD_INT 96
6047: PPUSH
6048: LD_INT 85
6050: PPUSH
6051: CALL_OW 214
6055: GO 6037
6057: POP
6058: POP
// wait ( 0 0$2 ) ;
6059: LD_INT 70
6061: PPUSH
6062: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6066: LD_EXP 1
6070: PPUSH
6071: LD_STRING D1a-JMM-1
6073: PPUSH
6074: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6078: LD_EXP 3
6082: PPUSH
6083: LD_STRING D1a-Don-1
6085: PPUSH
6086: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6090: LD_ADDR_VAR 0 1
6094: PUSH
6095: LD_INT 22
6097: PUSH
6098: LD_INT 1
6100: PUSH
6101: EMPTY
6102: LIST
6103: LIST
6104: PPUSH
6105: CALL_OW 69
6109: PUSH
6110: FOR_IN
6111: IFFALSE 6130
// ComMoveXY ( i , 109 , 102 ) ;
6113: LD_VAR 0 1
6117: PPUSH
6118: LD_INT 109
6120: PPUSH
6121: LD_INT 102
6123: PPUSH
6124: CALL_OW 111
6128: GO 6110
6130: POP
6131: POP
// Say ( JMM , D1a-JMM-2 ) ;
6132: LD_EXP 1
6136: PPUSH
6137: LD_STRING D1a-JMM-2
6139: PPUSH
6140: CALL_OW 88
// wait ( 0 0$10 ) ;
6144: LD_INT 350
6146: PPUSH
6147: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6151: LD_EXP 1
6155: PPUSH
6156: CALL_OW 310
6160: PPUSH
6161: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6165: LD_EXP 3
6169: PPUSH
6170: LD_STRING D1b-Don-1
6172: PPUSH
6173: CALL_OW 88
// if IsOk ( Donaldson ) then
6177: LD_EXP 3
6181: PPUSH
6182: CALL_OW 302
6186: IFFALSE 6200
// Say ( JMM , D1b-JMM-1 ) ;
6188: LD_EXP 1
6192: PPUSH
6193: LD_STRING D1b-JMM-1
6195: PPUSH
6196: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6200: LD_INT 22
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: LD_INT 26
6212: PUSH
6213: LD_INT 1
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PUSH
6220: LD_INT 2
6222: PUSH
6223: LD_INT 25
6225: PUSH
6226: LD_INT 1
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: LD_INT 25
6235: PUSH
6236: LD_INT 2
6238: PUSH
6239: EMPTY
6240: LIST
6241: LIST
6242: PUSH
6243: LD_INT 25
6245: PUSH
6246: LD_INT 3
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: PUSH
6253: LD_INT 25
6255: PUSH
6256: LD_INT 4
6258: PUSH
6259: EMPTY
6260: LIST
6261: LIST
6262: PUSH
6263: LD_INT 25
6265: PUSH
6266: LD_INT 5
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PUSH
6273: LD_INT 25
6275: PUSH
6276: LD_INT 8
6278: PUSH
6279: EMPTY
6280: LIST
6281: LIST
6282: PUSH
6283: EMPTY
6284: LIST
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: PUSH
6292: EMPTY
6293: LIST
6294: LIST
6295: LIST
6296: PPUSH
6297: CALL_OW 69
6301: PPUSH
6302: LD_STRING D1b-Sol1-1
6304: PPUSH
6305: LD_STRING 
6307: PPUSH
6308: CALL 12260 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6312: LD_EXP 3
6316: PPUSH
6317: LD_STRING D1b-Don-2
6319: PPUSH
6320: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6324: LD_EXP 1
6328: PPUSH
6329: LD_STRING D1b-JMM-2
6331: PPUSH
6332: CALL_OW 88
// dec := ShowQuery1 ;
6336: LD_ADDR_VAR 0 3
6340: PUSH
6341: CALL 12723 0 0
6345: ST_TO_ADDR
// if dec = 1 then
6346: LD_VAR 0 3
6350: PUSH
6351: LD_INT 1
6353: EQUAL
6354: IFFALSE 6460
// begin Say ( JMM , D2-JMM-1 ) ;
6356: LD_EXP 1
6360: PPUSH
6361: LD_STRING D2-JMM-1
6363: PPUSH
6364: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6368: LD_EXP 15
6372: PPUSH
6373: LD_STRING D2-Pow-1
6375: PPUSH
6376: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6380: LD_EXP 1
6384: PPUSH
6385: LD_STRING D2a-JMM-1
6387: PPUSH
6388: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6392: LD_EXP 15
6396: PPUSH
6397: LD_STRING D2a-Pow-1
6399: PPUSH
6400: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6404: LD_EXP 1
6408: PPUSH
6409: LD_STRING D2a-JMM-2
6411: PPUSH
6412: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6416: LD_EXP 15
6420: PPUSH
6421: LD_STRING D2a-Pow-2
6423: PPUSH
6424: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6428: LD_EXP 1
6432: PPUSH
6433: LD_STRING D2a-JMM-3
6435: PPUSH
6436: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6440: LD_EXP 15
6444: PPUSH
6445: LD_STRING D2a-Pow-3
6447: PPUSH
6448: CALL_OW 94
// secondPass := 2 ;
6452: LD_ADDR_EXP 20
6456: PUSH
6457: LD_INT 2
6459: ST_TO_ADDR
// end ; if dec = 2 then
6460: LD_VAR 0 3
6464: PUSH
6465: LD_INT 2
6467: EQUAL
6468: IFFALSE 6562
// begin Say ( JMM , D2-JMM-1 ) ;
6470: LD_EXP 1
6474: PPUSH
6475: LD_STRING D2-JMM-1
6477: PPUSH
6478: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6482: LD_EXP 15
6486: PPUSH
6487: LD_STRING D2-Pow-1
6489: PPUSH
6490: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6494: LD_EXP 1
6498: PPUSH
6499: LD_STRING D2b-JMM-1
6501: PPUSH
6502: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6506: LD_EXP 15
6510: PPUSH
6511: LD_STRING D2b-Pow-1
6513: PPUSH
6514: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6518: LD_EXP 1
6522: PPUSH
6523: LD_STRING D2c-JMM-1
6525: PPUSH
6526: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6530: LD_EXP 15
6534: PPUSH
6535: LD_STRING D2c-Pow-1
6537: PPUSH
6538: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6542: LD_EXP 1
6546: PPUSH
6547: LD_STRING D2c-JMM-2
6549: PPUSH
6550: CALL_OW 88
// secondPass := 2 ;
6554: LD_ADDR_EXP 20
6558: PUSH
6559: LD_INT 2
6561: ST_TO_ADDR
// end ; if dec = 3 then
6562: LD_VAR 0 3
6566: PUSH
6567: LD_INT 3
6569: EQUAL
6570: IFFALSE 6580
// secondPass := 1 ;
6572: LD_ADDR_EXP 20
6576: PUSH
6577: LD_INT 1
6579: ST_TO_ADDR
// InGameOff ;
6580: CALL_OW 9
// ruAI := 1 ;
6584: LD_ADDR_EXP 34
6588: PUSH
6589: LD_INT 1
6591: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6592: LD_INT 1
6594: PPUSH
6595: LD_INT 3
6597: PPUSH
6598: LD_INT 2
6600: PPUSH
6601: LD_INT 1
6603: PPUSH
6604: CALL_OW 80
// SaveForQuickRestart ;
6608: CALL_OW 22
// end ;
6612: PPOPN 3
6614: END
// every 1 1$0 trigger secondPass = 2 do
6615: LD_EXP 20
6619: PUSH
6620: LD_INT 2
6622: EQUAL
6623: IFFALSE 6843
6625: GO 6627
6627: DISABLE
// begin PowellSupport1 ;
6628: CALL 1985 0 0
// DialogueOn ;
6632: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6636: LD_EXP 1
6640: PPUSH
6641: LD_STRING DC1-JMM-1
6643: PPUSH
6644: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6648: LD_EXP 15
6652: PPUSH
6653: LD_STRING DC1-Pow-1
6655: PPUSH
6656: CALL_OW 94
// DialogueOff ;
6660: CALL_OW 7
// wait ( 3 3$0 ) ;
6664: LD_INT 6300
6666: PPUSH
6667: CALL_OW 67
// PowellSupport2 ;
6671: CALL 2466 0 0
// DialogueOn ;
6675: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6679: LD_EXP 1
6683: PPUSH
6684: LD_STRING DC2-JMM-1
6686: PPUSH
6687: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6691: LD_EXP 15
6695: PPUSH
6696: LD_STRING DC2-Pow-1
6698: PPUSH
6699: CALL_OW 94
// DialogueOff ;
6703: CALL_OW 7
// wait ( 3 3$00 ) ;
6707: LD_INT 6300
6709: PPUSH
6710: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6714: LD_INT 35
6716: PPUSH
6717: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6721: LD_INT 22
6723: PUSH
6724: LD_INT 1
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 2
6733: PUSH
6734: LD_INT 30
6736: PUSH
6737: LD_INT 0
6739: PUSH
6740: EMPTY
6741: LIST
6742: LIST
6743: PUSH
6744: LD_INT 30
6746: PUSH
6747: LD_INT 1
6749: PUSH
6750: EMPTY
6751: LIST
6752: LIST
6753: PUSH
6754: EMPTY
6755: LIST
6756: LIST
6757: LIST
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PPUSH
6763: CALL_OW 69
6767: PUSH
6768: LD_INT 11
6770: PPUSH
6771: LD_INT 22
6773: PUSH
6774: LD_INT 3
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PPUSH
6781: CALL_OW 70
6785: NOT
6786: AND
6787: IFFALSE 6714
// wait ( 0 0$10 ) ;
6789: LD_INT 350
6791: PPUSH
6792: CALL_OW 67
// Legion ;
6796: CALL 6844 0 0
// wait ( 5 5$0 ) ;
6800: LD_INT 10500
6802: PPUSH
6803: CALL_OW 67
// PowellSupport3 ;
6807: CALL 3079 0 0
// DialogueOn ;
6811: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6815: LD_EXP 15
6819: PPUSH
6820: LD_STRING DC3-Pow-1
6822: PPUSH
6823: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6827: LD_EXP 1
6831: PPUSH
6832: LD_STRING DC3-JMM-1
6834: PPUSH
6835: CALL_OW 88
// DialogueOff ;
6839: CALL_OW 7
// end ;
6843: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6844: LD_INT 0
6846: PPUSH
6847: PPUSH
6848: PPUSH
6849: PPUSH
6850: PPUSH
6851: PPUSH
6852: PPUSH
6853: PPUSH
6854: PPUSH
6855: PPUSH
6856: PPUSH
6857: PPUSH
6858: PPUSH
6859: PPUSH
6860: PPUSH
6861: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6862: LD_ADDR_VAR 0 5
6866: PUSH
6867: LD_INT 22
6869: PUSH
6870: LD_INT 1
6872: PUSH
6873: EMPTY
6874: LIST
6875: LIST
6876: PUSH
6877: LD_INT 21
6879: PUSH
6880: LD_INT 3
6882: PUSH
6883: EMPTY
6884: LIST
6885: LIST
6886: PUSH
6887: LD_INT 2
6889: PUSH
6890: LD_INT 30
6892: PUSH
6893: LD_INT 0
6895: PUSH
6896: EMPTY
6897: LIST
6898: LIST
6899: PUSH
6900: LD_INT 30
6902: PUSH
6903: LD_INT 1
6905: PUSH
6906: EMPTY
6907: LIST
6908: LIST
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: LIST
6914: PUSH
6915: EMPTY
6916: LIST
6917: LIST
6918: LIST
6919: PPUSH
6920: CALL_OW 69
6924: ST_TO_ADDR
// crates := 0 ;
6925: LD_ADDR_VAR 0 8
6929: PUSH
6930: LD_INT 0
6932: ST_TO_ADDR
// oil := 0 ;
6933: LD_ADDR_VAR 0 9
6937: PUSH
6938: LD_INT 0
6940: ST_TO_ADDR
// siberite := 0 ;
6941: LD_ADDR_VAR 0 10
6945: PUSH
6946: LD_INT 0
6948: ST_TO_ADDR
// payForNeutral := false ;
6949: LD_ADDR_VAR 0 13
6953: PUSH
6954: LD_INT 0
6956: ST_TO_ADDR
// payForHelp := false ;
6957: LD_ADDR_VAR 0 14
6961: PUSH
6962: LD_INT 0
6964: ST_TO_ADDR
// for i in tmp do
6965: LD_ADDR_VAR 0 2
6969: PUSH
6970: LD_VAR 0 5
6974: PUSH
6975: FOR_IN
6976: IFFALSE 7067
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6978: LD_ADDR_VAR 0 8
6982: PUSH
6983: LD_VAR 0 8
6987: PUSH
6988: LD_VAR 0 2
6992: PPUSH
6993: CALL_OW 274
6997: PPUSH
6998: LD_INT 1
7000: PPUSH
7001: CALL_OW 275
7005: PLUS
7006: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7007: LD_ADDR_VAR 0 9
7011: PUSH
7012: LD_VAR 0 9
7016: PUSH
7017: LD_VAR 0 2
7021: PPUSH
7022: CALL_OW 274
7026: PPUSH
7027: LD_INT 2
7029: PPUSH
7030: CALL_OW 275
7034: PLUS
7035: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7036: LD_ADDR_VAR 0 10
7040: PUSH
7041: LD_VAR 0 10
7045: PUSH
7046: LD_VAR 0 2
7050: PPUSH
7051: CALL_OW 274
7055: PPUSH
7056: LD_INT 3
7058: PPUSH
7059: CALL_OW 275
7063: PLUS
7064: ST_TO_ADDR
// end ;
7065: GO 6975
7067: POP
7068: POP
// PrepareKurt ;
7069: CALL 4606 0 0
// if not Kurt then
7073: LD_EXP 17
7077: NOT
7078: IFFALSE 7082
// exit ;
7080: GO 9201
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7082: LD_EXP 18
7086: PPUSH
7087: LD_INT 144
7089: PPUSH
7090: LD_INT 111
7092: PPUSH
7093: CALL_OW 111
// wait ( 0 0$2 ) ;
7097: LD_INT 70
7099: PPUSH
7100: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7104: LD_INT 167
7106: PPUSH
7107: LD_INT 121
7109: PPUSH
7110: LD_INT 1
7112: PPUSH
7113: LD_INT 10
7115: NEG
7116: PPUSH
7117: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7121: LD_EXP 17
7125: PPUSH
7126: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7130: LD_EXP 17
7134: PPUSH
7135: CALL_OW 87
// wait ( 0 0$1 ) ;
7139: LD_INT 35
7141: PPUSH
7142: CALL_OW 67
// DialogueOn ;
7146: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7150: LD_INT 22
7152: PUSH
7153: LD_INT 1
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 26
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 2
7172: PUSH
7173: LD_INT 25
7175: PUSH
7176: LD_INT 1
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 25
7185: PUSH
7186: LD_INT 2
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 25
7195: PUSH
7196: LD_INT 3
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 25
7205: PUSH
7206: LD_INT 4
7208: PUSH
7209: EMPTY
7210: LIST
7211: LIST
7212: PUSH
7213: LD_INT 25
7215: PUSH
7216: LD_INT 5
7218: PUSH
7219: EMPTY
7220: LIST
7221: LIST
7222: PUSH
7223: LD_INT 25
7225: PUSH
7226: LD_INT 8
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: LIST
7246: PPUSH
7247: CALL_OW 69
7251: PPUSH
7252: LD_STRING D3-Sol1-1
7254: PPUSH
7255: LD_STRING 
7257: PPUSH
7258: CALL 12260 0 3
// if KurtStatus then
7262: LD_EXP 19
7266: IFFALSE 7366
// begin Say ( Kurt , D3-Kurt-1 ) ;
7268: LD_EXP 17
7272: PPUSH
7273: LD_STRING D3-Kurt-1
7275: PPUSH
7276: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7280: LD_EXP 1
7284: PPUSH
7285: LD_STRING D3-JMM-1
7287: PPUSH
7288: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7292: LD_EXP 17
7296: PPUSH
7297: LD_STRING D3-Kurt-2
7299: PPUSH
7300: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7304: LD_EXP 1
7308: PPUSH
7309: LD_STRING D3-JMM-2
7311: PPUSH
7312: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7316: LD_EXP 17
7320: PPUSH
7321: LD_STRING D3-Kurt-4
7323: PPUSH
7324: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7328: LD_EXP 1
7332: PPUSH
7333: LD_STRING D3-JMM-4
7335: PPUSH
7336: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7340: LD_EXP 17
7344: PPUSH
7345: LD_STRING D3-Kurt-5
7347: PPUSH
7348: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7352: LD_EXP 17
7356: PPUSH
7357: LD_STRING D3-Kurt-5a
7359: PPUSH
7360: CALL_OW 88
// end else
7364: GO 7462
// begin Say ( Kurt , D3-Kurt-1 ) ;
7366: LD_EXP 17
7370: PPUSH
7371: LD_STRING D3-Kurt-1
7373: PPUSH
7374: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7378: LD_EXP 1
7382: PPUSH
7383: LD_STRING D3-JMM-1
7385: PPUSH
7386: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7390: LD_EXP 17
7394: PPUSH
7395: LD_STRING D3-Kurt-3
7397: PPUSH
7398: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7402: LD_EXP 1
7406: PPUSH
7407: LD_STRING D3-JMM-3
7409: PPUSH
7410: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7414: LD_EXP 17
7418: PPUSH
7419: LD_STRING D3-Kurt-4
7421: PPUSH
7422: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7426: LD_EXP 1
7430: PPUSH
7431: LD_STRING D3-JMM-4
7433: PPUSH
7434: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7438: LD_EXP 17
7442: PPUSH
7443: LD_STRING D3-Kurt-5
7445: PPUSH
7446: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7450: LD_EXP 17
7454: PPUSH
7455: LD_STRING D3-Kurt-5b
7457: PPUSH
7458: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7462: LD_VAR 0 8
7466: PUSH
7467: LD_INT 120
7469: PUSH
7470: LD_INT 60
7472: PUSH
7473: EMPTY
7474: LIST
7475: LIST
7476: PUSH
7477: LD_EXP 19
7481: PUSH
7482: LD_INT 1
7484: PLUS
7485: ARRAY
7486: GREATEREQUAL
7487: PUSH
7488: LD_VAR 0 10
7492: PUSH
7493: LD_INT 120
7495: PUSH
7496: LD_INT 60
7498: PUSH
7499: EMPTY
7500: LIST
7501: LIST
7502: PUSH
7503: LD_EXP 19
7507: PUSH
7508: LD_INT 1
7510: PLUS
7511: ARRAY
7512: GREATEREQUAL
7513: AND
7514: IFFALSE 7566
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7516: LD_ADDR_VAR 0 3
7520: PUSH
7521: LD_STRING Q2
7523: PUSH
7524: LD_STRING Q2K
7526: PUSH
7527: EMPTY
7528: LIST
7529: LIST
7530: PUSH
7531: LD_EXP 19
7535: PUSH
7536: LD_INT 1
7538: PLUS
7539: ARRAY
7540: PPUSH
7541: LD_INT 1
7543: PUSH
7544: LD_INT 2
7546: PUSH
7547: LD_INT 3
7549: PUSH
7550: LD_INT 4
7552: PUSH
7553: EMPTY
7554: LIST
7555: LIST
7556: LIST
7557: LIST
7558: PPUSH
7559: CALL_OW 98
7563: ST_TO_ADDR
7564: GO 7610
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7566: LD_ADDR_VAR 0 3
7570: PUSH
7571: LD_STRING Q2
7573: PUSH
7574: LD_STRING Q2K
7576: PUSH
7577: EMPTY
7578: LIST
7579: LIST
7580: PUSH
7581: LD_EXP 19
7585: PUSH
7586: LD_INT 1
7588: PLUS
7589: ARRAY
7590: PPUSH
7591: LD_INT 1
7593: PUSH
7594: LD_INT 3
7596: PUSH
7597: LD_INT 4
7599: PUSH
7600: EMPTY
7601: LIST
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 98
7609: ST_TO_ADDR
// if dec1 = 1 then
7610: LD_VAR 0 3
7614: PUSH
7615: LD_INT 1
7617: EQUAL
7618: IFFALSE 7652
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7620: LD_EXP 1
7624: PPUSH
7625: LD_STRING D3Ka-JMM-1
7627: PPUSH
7628: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7632: LD_EXP 17
7636: PPUSH
7637: LD_STRING D3Ka-Kurt-1
7639: PPUSH
7640: CALL_OW 88
// warWithLegion = 1 ;
7644: LD_ADDR_EXP 23
7648: PUSH
7649: LD_INT 1
7651: ST_TO_ADDR
// end ; if dec1 = 2 then
7652: LD_VAR 0 3
7656: PUSH
7657: LD_INT 2
7659: EQUAL
7660: IFFALSE 7744
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7662: LD_EXP 1
7666: PPUSH
7667: LD_STRING D3Kb-JMM-1
7669: PPUSH
7670: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7674: LD_EXP 17
7678: PPUSH
7679: LD_STRING D3Kb-Kurt-1
7681: PPUSH
7682: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7686: LD_ADDR_VAR 0 11
7690: PUSH
7691: LD_INT 120
7693: PUSH
7694: LD_INT 60
7696: PUSH
7697: EMPTY
7698: LIST
7699: LIST
7700: PUSH
7701: LD_EXP 19
7705: PUSH
7706: LD_INT 1
7708: PLUS
7709: ARRAY
7710: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7711: LD_ADDR_VAR 0 12
7715: PUSH
7716: LD_INT 120
7718: PUSH
7719: LD_INT 60
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: LD_EXP 19
7730: PUSH
7731: LD_INT 1
7733: PLUS
7734: ARRAY
7735: ST_TO_ADDR
// payForNeutral := true ;
7736: LD_ADDR_VAR 0 13
7740: PUSH
7741: LD_INT 1
7743: ST_TO_ADDR
// end ; if dec1 = 3 then
7744: LD_VAR 0 3
7748: PUSH
7749: LD_INT 3
7751: EQUAL
7752: IFFALSE 7987
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7754: LD_EXP 1
7758: PPUSH
7759: LD_STRING D3Kc1-JMM-1
7761: PPUSH
7762: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7766: LD_EXP 17
7770: PPUSH
7771: LD_STRING D3Kc1-Kurt-1
7773: PPUSH
7774: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7778: LD_EXP 1
7782: PPUSH
7783: LD_STRING D3Kc1-JMM-2
7785: PPUSH
7786: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7790: LD_EXP 17
7794: PPUSH
7795: LD_STRING D3Kc1-Kurt-2
7797: PPUSH
7798: CALL_OW 88
// askSiberite = 1 ;
7802: LD_ADDR_EXP 25
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7810: LD_ADDR_VAR 0 4
7814: PUSH
7815: LD_STRING Q2b
7817: PPUSH
7818: LD_INT 1
7820: PUSH
7821: LD_INT 2
7823: PUSH
7824: LD_INT 3
7826: PUSH
7827: EMPTY
7828: LIST
7829: LIST
7830: LIST
7831: PPUSH
7832: CALL_OW 98
7836: ST_TO_ADDR
// if dec2 = 1 then
7837: LD_VAR 0 4
7841: PUSH
7842: LD_INT 1
7844: EQUAL
7845: IFFALSE 7879
// begin Say ( JMM , D4a-JMM-1 ) ;
7847: LD_EXP 1
7851: PPUSH
7852: LD_STRING D4a-JMM-1
7854: PPUSH
7855: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7859: LD_EXP 17
7863: PPUSH
7864: LD_STRING D4b-Kurt-1
7866: PPUSH
7867: CALL_OW 88
// warWithLegion = 1 ;
7871: LD_ADDR_EXP 23
7875: PUSH
7876: LD_INT 1
7878: ST_TO_ADDR
// end ; if dec2 = 2 then
7879: LD_VAR 0 4
7883: PUSH
7884: LD_INT 2
7886: EQUAL
7887: IFFALSE 7921
// begin Say ( JMM , D4b-JMM-1 ) ;
7889: LD_EXP 1
7893: PPUSH
7894: LD_STRING D4b-JMM-1
7896: PPUSH
7897: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7901: LD_EXP 17
7905: PPUSH
7906: LD_STRING D4b-Kurt-1
7908: PPUSH
7909: CALL_OW 88
// warWithLegion = 1 ;
7913: LD_ADDR_EXP 23
7917: PUSH
7918: LD_INT 1
7920: ST_TO_ADDR
// end ; if dec2 = 3 then
7921: LD_VAR 0 4
7925: PUSH
7926: LD_INT 3
7928: EQUAL
7929: IFFALSE 7987
// begin Say ( JMM , D4c-JMM-1 ) ;
7931: LD_EXP 1
7935: PPUSH
7936: LD_STRING D4c-JMM-1
7938: PPUSH
7939: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7943: LD_EXP 17
7947: PPUSH
7948: LD_STRING D4c-Kurt-1
7950: PPUSH
7951: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7955: LD_EXP 1
7959: PPUSH
7960: LD_STRING D4c-JMM-2
7962: PPUSH
7963: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7967: LD_EXP 17
7971: PPUSH
7972: LD_STRING D4c-Kurt-2
7974: PPUSH
7975: CALL_OW 88
// fakeInfo = 1 ;
7979: LD_ADDR_EXP 24
7983: PUSH
7984: LD_INT 1
7986: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7987: LD_VAR 0 3
7991: PUSH
7992: LD_INT 4
7994: EQUAL
7995: IFFALSE 9057
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7997: LD_EXP 1
8001: PPUSH
8002: LD_STRING D3Kd-JMM-1
8004: PPUSH
8005: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8009: LD_VAR 0 8
8013: PUSH
8014: LD_INT 200
8016: PUSH
8017: LD_INT 120
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: LD_EXP 19
8028: PUSH
8029: LD_INT 1
8031: PLUS
8032: ARRAY
8033: GREATEREQUAL
8034: PUSH
8035: LD_VAR 0 10
8039: PUSH
8040: LD_INT 200
8042: PUSH
8043: LD_INT 120
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: LD_EXP 19
8054: PUSH
8055: LD_INT 1
8057: PLUS
8058: ARRAY
8059: GREATEREQUAL
8060: AND
8061: IFFALSE 8113
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8063: LD_ADDR_VAR 0 4
8067: PUSH
8068: LD_STRING Q2a
8070: PUSH
8071: LD_STRING Q2aK
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: PUSH
8078: LD_EXP 19
8082: PUSH
8083: LD_INT 1
8085: PLUS
8086: ARRAY
8087: PPUSH
8088: LD_INT 1
8090: PUSH
8091: LD_INT 2
8093: PUSH
8094: LD_INT 3
8096: PUSH
8097: LD_INT 4
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: LIST
8104: LIST
8105: PPUSH
8106: CALL_OW 98
8110: ST_TO_ADDR
8111: GO 8277
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8113: LD_VAR 0 8
8117: PUSH
8118: LD_INT 120
8120: PUSH
8121: LD_INT 60
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: PUSH
8128: LD_EXP 19
8132: PUSH
8133: LD_INT 1
8135: PLUS
8136: ARRAY
8137: GREATEREQUAL
8138: PUSH
8139: LD_VAR 0 10
8143: PUSH
8144: LD_INT 120
8146: PUSH
8147: LD_INT 60
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: LD_EXP 19
8158: PUSH
8159: LD_INT 1
8161: PLUS
8162: ARRAY
8163: GREATEREQUAL
8164: AND
8165: IFFALSE 8213
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8167: LD_ADDR_VAR 0 4
8171: PUSH
8172: LD_STRING Q2a
8174: PUSH
8175: LD_STRING Q2aK
8177: PUSH
8178: EMPTY
8179: LIST
8180: LIST
8181: PUSH
8182: LD_EXP 19
8186: PUSH
8187: LD_INT 1
8189: PLUS
8190: ARRAY
8191: PPUSH
8192: LD_INT 1
8194: PUSH
8195: LD_INT 2
8197: PUSH
8198: LD_INT 4
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: PPUSH
8206: CALL_OW 98
8210: ST_TO_ADDR
8211: GO 8277
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8213: LD_STRING Q2d
8215: PUSH
8216: LD_STRING Q2dK
8218: PUSH
8219: EMPTY
8220: LIST
8221: LIST
8222: PUSH
8223: LD_EXP 19
8227: PUSH
8228: LD_INT 1
8230: PLUS
8231: ARRAY
8232: PPUSH
8233: CALL_OW 97
// dec2 := 0 ;
8237: LD_ADDR_VAR 0 4
8241: PUSH
8242: LD_INT 0
8244: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8245: LD_EXP 1
8249: PPUSH
8250: LD_STRING D3Kc1-JMM-1
8252: PPUSH
8253: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8257: LD_EXP 17
8261: PPUSH
8262: LD_STRING D3Kc2-Kurt-1
8264: PPUSH
8265: CALL_OW 88
// warWithLegion := 1 ;
8269: LD_ADDR_EXP 23
8273: PUSH
8274: LD_INT 1
8276: ST_TO_ADDR
// end ; if dec2 = 1 then
8277: LD_VAR 0 4
8281: PUSH
8282: LD_INT 1
8284: EQUAL
8285: IFFALSE 8319
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8287: LD_EXP 1
8291: PPUSH
8292: LD_STRING D5Ka-JMM-1
8294: PPUSH
8295: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8299: LD_EXP 17
8303: PPUSH
8304: LD_STRING D5Ka-Kurt-1
8306: PPUSH
8307: CALL_OW 88
// warWithLegion = 1 ;
8311: LD_ADDR_EXP 23
8315: PUSH
8316: LD_INT 1
8318: ST_TO_ADDR
// end ; if dec2 = 2 then
8319: LD_VAR 0 4
8323: PUSH
8324: LD_INT 2
8326: EQUAL
8327: IFFALSE 8411
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8329: LD_EXP 1
8333: PPUSH
8334: LD_STRING D3Kb-JMM-1
8336: PPUSH
8337: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8341: LD_EXP 17
8345: PPUSH
8346: LD_STRING D3Kb-Kurt-1
8348: PPUSH
8349: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8353: LD_ADDR_VAR 0 11
8357: PUSH
8358: LD_INT 120
8360: PUSH
8361: LD_INT 60
8363: PUSH
8364: EMPTY
8365: LIST
8366: LIST
8367: PUSH
8368: LD_EXP 19
8372: PUSH
8373: LD_INT 1
8375: PLUS
8376: ARRAY
8377: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8378: LD_ADDR_VAR 0 12
8382: PUSH
8383: LD_INT 120
8385: PUSH
8386: LD_INT 60
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_EXP 19
8397: PUSH
8398: LD_INT 1
8400: PLUS
8401: ARRAY
8402: ST_TO_ADDR
// payForNeutral := true ;
8403: LD_ADDR_VAR 0 13
8407: PUSH
8408: LD_INT 1
8410: ST_TO_ADDR
// end ; if dec2 = 3 then
8411: LD_VAR 0 4
8415: PUSH
8416: LD_INT 3
8418: EQUAL
8419: IFFALSE 8503
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8421: LD_EXP 1
8425: PPUSH
8426: LD_STRING D3Ke-JMM-1
8428: PPUSH
8429: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8433: LD_EXP 17
8437: PPUSH
8438: LD_STRING D3Ke-Kurt-1
8440: PPUSH
8441: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8445: LD_ADDR_VAR 0 11
8449: PUSH
8450: LD_INT 200
8452: PUSH
8453: LD_INT 120
8455: PUSH
8456: EMPTY
8457: LIST
8458: LIST
8459: PUSH
8460: LD_EXP 19
8464: PUSH
8465: LD_INT 1
8467: PLUS
8468: ARRAY
8469: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8470: LD_ADDR_VAR 0 12
8474: PUSH
8475: LD_INT 200
8477: PUSH
8478: LD_INT 120
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: PUSH
8485: LD_EXP 19
8489: PUSH
8490: LD_INT 1
8492: PLUS
8493: ARRAY
8494: ST_TO_ADDR
// payForHelp := true ;
8495: LD_ADDR_VAR 0 14
8499: PUSH
8500: LD_INT 1
8502: ST_TO_ADDR
// end ; if dec2 = 4 then
8503: LD_VAR 0 4
8507: PUSH
8508: LD_INT 4
8510: EQUAL
8511: IFFALSE 8746
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8513: LD_EXP 1
8517: PPUSH
8518: LD_STRING D3Kc1-JMM-1
8520: PPUSH
8521: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8525: LD_EXP 17
8529: PPUSH
8530: LD_STRING D3Kc1-Kurt-1
8532: PPUSH
8533: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8537: LD_EXP 1
8541: PPUSH
8542: LD_STRING D3Kc1-JMM-2
8544: PPUSH
8545: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8549: LD_EXP 17
8553: PPUSH
8554: LD_STRING D3Kc1-Kurt-2
8556: PPUSH
8557: CALL_OW 88
// askSiberite = 1 ;
8561: LD_ADDR_EXP 25
8565: PUSH
8566: LD_INT 1
8568: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8569: LD_ADDR_VAR 0 4
8573: PUSH
8574: LD_STRING Q2b
8576: PPUSH
8577: LD_INT 1
8579: PUSH
8580: LD_INT 2
8582: PUSH
8583: LD_INT 3
8585: PUSH
8586: EMPTY
8587: LIST
8588: LIST
8589: LIST
8590: PPUSH
8591: CALL_OW 98
8595: ST_TO_ADDR
// if dec2 = 1 then
8596: LD_VAR 0 4
8600: PUSH
8601: LD_INT 1
8603: EQUAL
8604: IFFALSE 8638
// begin Say ( JMM , D4a-JMM-1 ) ;
8606: LD_EXP 1
8610: PPUSH
8611: LD_STRING D4a-JMM-1
8613: PPUSH
8614: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8618: LD_EXP 17
8622: PPUSH
8623: LD_STRING D4b-Kurt-1
8625: PPUSH
8626: CALL_OW 88
// warWithLegion = 1 ;
8630: LD_ADDR_EXP 23
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// end ; if dec2 = 2 then
8638: LD_VAR 0 4
8642: PUSH
8643: LD_INT 2
8645: EQUAL
8646: IFFALSE 8680
// begin Say ( JMM , D4b-JMM-1 ) ;
8648: LD_EXP 1
8652: PPUSH
8653: LD_STRING D4b-JMM-1
8655: PPUSH
8656: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8660: LD_EXP 17
8664: PPUSH
8665: LD_STRING D4b-Kurt-1
8667: PPUSH
8668: CALL_OW 88
// warWithLegion = 1 ;
8672: LD_ADDR_EXP 23
8676: PUSH
8677: LD_INT 1
8679: ST_TO_ADDR
// end ; if dec2 = 3 then
8680: LD_VAR 0 4
8684: PUSH
8685: LD_INT 3
8687: EQUAL
8688: IFFALSE 8746
// begin Say ( JMM , D4c-JMM-1 ) ;
8690: LD_EXP 1
8694: PPUSH
8695: LD_STRING D4c-JMM-1
8697: PPUSH
8698: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8702: LD_EXP 17
8706: PPUSH
8707: LD_STRING D4c-Kurt-1
8709: PPUSH
8710: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8714: LD_EXP 1
8718: PPUSH
8719: LD_STRING D4c-JMM-2
8721: PPUSH
8722: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8726: LD_EXP 17
8730: PPUSH
8731: LD_STRING D4c-Kurt-2
8733: PPUSH
8734: CALL_OW 88
// fakeInfo = 1 ;
8738: LD_ADDR_EXP 24
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8746: LD_VAR 0 13
8750: PUSH
8751: LD_VAR 0 14
8755: OR
8756: IFFALSE 9057
// begin for i in tmp do
8758: LD_ADDR_VAR 0 2
8762: PUSH
8763: LD_VAR 0 5
8767: PUSH
8768: FOR_IN
8769: IFFALSE 9055
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8771: LD_ADDR_VAR 0 6
8775: PUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: CALL_OW 274
8785: PPUSH
8786: LD_INT 1
8788: PPUSH
8789: CALL_OW 275
8793: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8794: LD_ADDR_VAR 0 7
8798: PUSH
8799: LD_VAR 0 2
8803: PPUSH
8804: CALL_OW 274
8808: PPUSH
8809: LD_INT 3
8811: PPUSH
8812: CALL_OW 275
8816: ST_TO_ADDR
// if cr then
8817: LD_VAR 0 11
8821: IFFALSE 8935
// begin if tmp2 and tmp2 < cr then
8823: LD_VAR 0 6
8827: PUSH
8828: LD_VAR 0 6
8832: PUSH
8833: LD_VAR 0 11
8837: LESS
8838: AND
8839: IFFALSE 8887
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8841: LD_VAR 0 2
8845: PPUSH
8846: CALL_OW 274
8850: PPUSH
8851: LD_INT 1
8853: PPUSH
8854: LD_VAR 0 11
8858: PUSH
8859: LD_VAR 0 6
8863: MINUS
8864: PPUSH
8865: CALL_OW 277
// cr := cr - tmp2 ;
8869: LD_ADDR_VAR 0 11
8873: PUSH
8874: LD_VAR 0 11
8878: PUSH
8879: LD_VAR 0 6
8883: MINUS
8884: ST_TO_ADDR
// end else
8885: GO 8935
// if tmp2 > cr then
8887: LD_VAR 0 6
8891: PUSH
8892: LD_VAR 0 11
8896: GREATER
8897: IFFALSE 8935
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8899: LD_VAR 0 2
8903: PPUSH
8904: CALL_OW 274
8908: PPUSH
8909: LD_INT 1
8911: PPUSH
8912: LD_VAR 0 6
8916: PUSH
8917: LD_VAR 0 11
8921: MINUS
8922: PPUSH
8923: CALL_OW 277
// cr := 0 ;
8927: LD_ADDR_VAR 0 11
8931: PUSH
8932: LD_INT 0
8934: ST_TO_ADDR
// end ; end ; if sb then
8935: LD_VAR 0 12
8939: IFFALSE 9053
// begin if tmp3 and tmp3 < sb then
8941: LD_VAR 0 7
8945: PUSH
8946: LD_VAR 0 7
8950: PUSH
8951: LD_VAR 0 12
8955: LESS
8956: AND
8957: IFFALSE 9005
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8959: LD_VAR 0 2
8963: PPUSH
8964: CALL_OW 274
8968: PPUSH
8969: LD_INT 3
8971: PPUSH
8972: LD_VAR 0 12
8976: PUSH
8977: LD_VAR 0 7
8981: MINUS
8982: PPUSH
8983: CALL_OW 277
// sb := sb - tmp3 ;
8987: LD_ADDR_VAR 0 12
8991: PUSH
8992: LD_VAR 0 12
8996: PUSH
8997: LD_VAR 0 7
9001: MINUS
9002: ST_TO_ADDR
// end else
9003: GO 9053
// if tmp3 > sb then
9005: LD_VAR 0 7
9009: PUSH
9010: LD_VAR 0 12
9014: GREATER
9015: IFFALSE 9053
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9017: LD_VAR 0 2
9021: PPUSH
9022: CALL_OW 274
9026: PPUSH
9027: LD_INT 3
9029: PPUSH
9030: LD_VAR 0 7
9034: PUSH
9035: LD_VAR 0 12
9039: MINUS
9040: PPUSH
9041: CALL_OW 277
// sb := 0 ;
9045: LD_ADDR_VAR 0 12
9049: PUSH
9050: LD_INT 0
9052: ST_TO_ADDR
// end ; end ; end ;
9053: GO 8768
9055: POP
9056: POP
// end ; end ; DialogueOff ;
9057: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9061: LD_INT 167
9063: PPUSH
9064: LD_INT 121
9066: PPUSH
9067: LD_INT 1
9069: PPUSH
9070: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9074: LD_EXP 17
9078: PPUSH
9079: LD_EXP 18
9083: PPUSH
9084: CALL_OW 120
// wait ( 0 0$1 ) ;
9088: LD_INT 35
9090: PPUSH
9091: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9095: LD_EXP 18
9099: PPUSH
9100: LD_INT 4
9102: PPUSH
9103: CALL_OW 113
// wait ( 0 0$3 ) ;
9107: LD_INT 105
9109: PPUSH
9110: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9114: LD_EXP 17
9118: PPUSH
9119: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9123: LD_EXP 18
9127: PPUSH
9128: CALL_OW 64
// wait ( 0 0$3 ) ;
9132: LD_INT 105
9134: PPUSH
9135: CALL_OW 67
// if payForHelp then
9139: LD_VAR 0 14
9143: IFFALSE 9201
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9145: LD_INT 36
9147: PPUSH
9148: LD_INT 57
9150: PPUSH
9151: LD_INT 1
9153: PPUSH
9154: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9158: LD_INT 51
9160: PPUSH
9161: LD_INT 63
9163: PPUSH
9164: LD_INT 1
9166: PPUSH
9167: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9171: LD_INT 93
9173: PPUSH
9174: LD_INT 65
9176: PPUSH
9177: LD_INT 1
9179: PPUSH
9180: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9184: LD_INT 42
9186: PPUSH
9187: LD_INT 12
9189: PPUSH
9190: LD_INT 1
9192: PPUSH
9193: CALL_OW 244
// PrepareLegionForPlayer ;
9197: CALL 4809 0 0
// end ; end ;
9201: LD_VAR 0 1
9205: RET
// every 0 0$10 trigger warWithLegion = 1 do
9206: LD_EXP 23
9210: PUSH
9211: LD_INT 1
9213: EQUAL
9214: IFFALSE 9230
9216: GO 9218
9218: DISABLE
// begin wait ( 0 0$30 ) ;
9219: LD_INT 1050
9221: PPUSH
9222: CALL_OW 67
// PrepareAttackLegion ;
9226: CALL 5450 0 0
// end ;
9230: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9231: LD_INT 120
9233: PUSH
9234: LD_INT 17
9236: PUSH
9237: EMPTY
9238: LIST
9239: LIST
9240: PUSH
9241: LD_INT 52
9243: PUSH
9244: EMPTY
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: PPUSH
9251: CALL_OW 69
9255: IFFALSE 9400
9257: GO 9259
9259: DISABLE
9260: LD_INT 0
9262: PPUSH
// begin enable ;
9263: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9264: LD_ADDR_VAR 0 1
9268: PUSH
9269: LD_INT 120
9271: PUSH
9272: LD_INT 17
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 52
9281: PUSH
9282: EMPTY
9283: LIST
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PPUSH
9289: CALL_OW 69
9293: PUSH
9294: FOR_IN
9295: IFFALSE 9398
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9297: LD_VAR 0 1
9301: PPUSH
9302: CALL 80015 0 1
9306: PUSH
9307: LD_INT 4
9309: ARRAY
9310: PUSH
9311: LD_INT 0
9313: EQUAL
9314: PUSH
9315: LD_VAR 0 1
9319: PPUSH
9320: CALL_OW 255
9324: PUSH
9325: LD_INT 1
9327: EQUAL
9328: AND
9329: IFFALSE 9343
// SetSide ( i , 4 ) ;
9331: LD_VAR 0 1
9335: PPUSH
9336: LD_INT 4
9338: PPUSH
9339: CALL_OW 235
// if GetSide ( i ) = 4 then
9343: LD_VAR 0 1
9347: PPUSH
9348: CALL_OW 255
9352: PUSH
9353: LD_INT 4
9355: EQUAL
9356: IFFALSE 9396
// if not IsInArea ( i , PlayerSpawn ) then
9358: LD_VAR 0 1
9362: PPUSH
9363: LD_INT 4
9365: PPUSH
9366: CALL_OW 308
9370: NOT
9371: IFFALSE 9387
// ComMoveToArea ( i , PlayerSpawn ) else
9373: LD_VAR 0 1
9377: PPUSH
9378: LD_INT 4
9380: PPUSH
9381: CALL_OW 113
9385: GO 9396
// RemoveUnit ( i ) ;
9387: LD_VAR 0 1
9391: PPUSH
9392: CALL_OW 64
// end ;
9396: GO 9294
9398: POP
9399: POP
// end ;
9400: PPOPN 1
9402: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
9403: LD_EXP 20
9407: PUSH
9408: LD_INT 1
9410: EQUAL
9411: PUSH
9412: LD_INT 12
9414: PPUSH
9415: LD_INT 22
9417: PUSH
9418: LD_INT 3
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 101
9427: PUSH
9428: LD_INT 1
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PUSH
9435: LD_INT 21
9437: PUSH
9438: LD_INT 2
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: PPUSH
9450: CALL_OW 70
9454: AND
9455: IFFALSE 10004
9457: GO 9459
9459: DISABLE
9460: LD_INT 0
9462: PPUSH
9463: PPUSH
9464: PPUSH
// begin DialogueOn ;
9465: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9469: LD_VAR 0 1
9473: PPUSH
9474: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9478: LD_INT 22
9480: PUSH
9481: LD_INT 1
9483: PUSH
9484: EMPTY
9485: LIST
9486: LIST
9487: PUSH
9488: LD_INT 26
9490: PUSH
9491: LD_INT 1
9493: PUSH
9494: EMPTY
9495: LIST
9496: LIST
9497: PUSH
9498: LD_INT 2
9500: PUSH
9501: LD_INT 25
9503: PUSH
9504: LD_INT 1
9506: PUSH
9507: EMPTY
9508: LIST
9509: LIST
9510: PUSH
9511: LD_INT 25
9513: PUSH
9514: LD_INT 2
9516: PUSH
9517: EMPTY
9518: LIST
9519: LIST
9520: PUSH
9521: LD_INT 25
9523: PUSH
9524: LD_INT 3
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: PUSH
9531: LD_INT 25
9533: PUSH
9534: LD_INT 4
9536: PUSH
9537: EMPTY
9538: LIST
9539: LIST
9540: PUSH
9541: LD_INT 25
9543: PUSH
9544: LD_INT 5
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PUSH
9551: LD_INT 25
9553: PUSH
9554: LD_INT 8
9556: PUSH
9557: EMPTY
9558: LIST
9559: LIST
9560: PUSH
9561: EMPTY
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: PUSH
9570: EMPTY
9571: LIST
9572: LIST
9573: LIST
9574: PPUSH
9575: CALL_OW 69
9579: PPUSH
9580: LD_STRING DT1-Sol1-1
9582: PPUSH
9583: LD_STRING DT1-FSol1-1
9585: PPUSH
9586: CALL 12260 0 3
// dec := ShowQuery2 ;
9590: LD_ADDR_VAR 0 3
9594: PUSH
9595: CALL 12744 0 0
9599: ST_TO_ADDR
// if dec = 1 then
9600: LD_VAR 0 3
9604: PUSH
9605: LD_INT 1
9607: EQUAL
9608: IFFALSE 9714
// begin Say ( JMM , D2-JMM-1 ) ;
9610: LD_EXP 1
9614: PPUSH
9615: LD_STRING D2-JMM-1
9617: PPUSH
9618: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9622: LD_EXP 15
9626: PPUSH
9627: LD_STRING D2-Pow-1
9629: PPUSH
9630: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9634: LD_EXP 1
9638: PPUSH
9639: LD_STRING D2a-JMM-1
9641: PPUSH
9642: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9646: LD_EXP 15
9650: PPUSH
9651: LD_STRING D2a-Pow-1
9653: PPUSH
9654: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9658: LD_EXP 1
9662: PPUSH
9663: LD_STRING D2a-JMM-2
9665: PPUSH
9666: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9670: LD_EXP 15
9674: PPUSH
9675: LD_STRING D2a-Pow-2
9677: PPUSH
9678: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9682: LD_EXP 1
9686: PPUSH
9687: LD_STRING D2a-JMM-3
9689: PPUSH
9690: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9694: LD_EXP 15
9698: PPUSH
9699: LD_STRING D2a-Pow-3
9701: PPUSH
9702: CALL_OW 94
// secondPass := 2 ;
9706: LD_ADDR_EXP 20
9710: PUSH
9711: LD_INT 2
9713: ST_TO_ADDR
// end ; if dec = 2 then
9714: LD_VAR 0 3
9718: PUSH
9719: LD_INT 2
9721: EQUAL
9722: IFFALSE 9816
// begin Say ( JMM , D2-JMM-1 ) ;
9724: LD_EXP 1
9728: PPUSH
9729: LD_STRING D2-JMM-1
9731: PPUSH
9732: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9736: LD_EXP 15
9740: PPUSH
9741: LD_STRING D2-Pow-1
9743: PPUSH
9744: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9748: LD_EXP 1
9752: PPUSH
9753: LD_STRING D2b-JMM-1
9755: PPUSH
9756: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9760: LD_EXP 15
9764: PPUSH
9765: LD_STRING D2b-Pow-1
9767: PPUSH
9768: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9772: LD_EXP 1
9776: PPUSH
9777: LD_STRING D2c-JMM-1
9779: PPUSH
9780: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9784: LD_EXP 15
9788: PPUSH
9789: LD_STRING D2c-Pow-1
9791: PPUSH
9792: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9796: LD_EXP 1
9800: PPUSH
9801: LD_STRING D2c-JMM-2
9803: PPUSH
9804: CALL_OW 88
// secondPass := 2 ;
9808: LD_ADDR_EXP 20
9812: PUSH
9813: LD_INT 2
9815: ST_TO_ADDR
// end ; DialogueOff ;
9816: CALL_OW 7
// if secondPass = 2 then
9820: LD_EXP 20
9824: PUSH
9825: LD_INT 2
9827: EQUAL
9828: IFFALSE 9832
// exit ;
9830: GO 10004
// Query ( HelpRequest ) ;
9832: LD_STRING HelpRequest
9834: PPUSH
9835: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
9839: LD_INT 27
9841: PPUSH
9842: LD_INT 1
9844: PPUSH
9845: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9849: LD_INT 35
9851: PPUSH
9852: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
9856: LD_EXP 1
9860: PPUSH
9861: LD_INT 27
9863: PPUSH
9864: CALL_OW 308
9868: IFFALSE 9849
// SetAreaMapShow ( helpRequestArea , 0 ) ;
9870: LD_INT 27
9872: PPUSH
9873: LD_INT 0
9875: PPUSH
9876: CALL_OW 424
// DialogueOn ;
9880: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
9884: LD_EXP 1
9888: PPUSH
9889: LD_STRING D2-JMM-1
9891: PPUSH
9892: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9896: LD_EXP 15
9900: PPUSH
9901: LD_STRING D2-Pow-1
9903: PPUSH
9904: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9908: LD_EXP 1
9912: PPUSH
9913: LD_STRING D2b-JMM-1
9915: PPUSH
9916: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9920: LD_EXP 15
9924: PPUSH
9925: LD_STRING D2a-Pow-2
9927: PPUSH
9928: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9932: LD_EXP 1
9936: PPUSH
9937: LD_STRING D2a-JMM-3
9939: PPUSH
9940: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9944: LD_EXP 15
9948: PPUSH
9949: LD_STRING D2a-Pow-3
9951: PPUSH
9952: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9956: LD_EXP 1
9960: PPUSH
9961: LD_STRING D2c-JMM-1
9963: PPUSH
9964: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9968: LD_EXP 15
9972: PPUSH
9973: LD_STRING D2c-Pow-1
9975: PPUSH
9976: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9980: LD_EXP 1
9984: PPUSH
9985: LD_STRING D2c-JMM-2
9987: PPUSH
9988: CALL_OW 88
// DialogueOff ;
9992: CALL_OW 7
// secondPass := 2 ;
9996: LD_ADDR_EXP 20
10000: PUSH
10001: LD_INT 2
10003: ST_TO_ADDR
// end ;
10004: PPOPN 3
10006: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10007: LD_EXP 21
10011: PUSH
10012: LD_INT 1
10014: EQUAL
10015: PUSH
10016: LD_INT 11
10018: PPUSH
10019: LD_INT 22
10021: PUSH
10022: LD_INT 3
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PPUSH
10029: CALL_OW 70
10033: AND
10034: IFFALSE 10515
10036: GO 10038
10038: DISABLE
10039: LD_INT 0
10041: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10042: LD_ADDR_VAR 0 1
10046: PUSH
10047: LD_INT 11
10049: PPUSH
10050: LD_INT 22
10052: PUSH
10053: LD_INT 3
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 70
10064: ST_TO_ADDR
// if not vehicles then
10065: LD_VAR 0 1
10069: NOT
10070: IFFALSE 10074
// exit ;
10072: GO 10515
// repeat wait ( 0 0$1 ) ;
10074: LD_INT 35
10076: PPUSH
10077: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10081: LD_VAR 0 1
10085: PPUSH
10086: LD_INT 101
10088: PUSH
10089: LD_INT 1
10091: PUSH
10092: EMPTY
10093: LIST
10094: LIST
10095: PPUSH
10096: CALL_OW 72
10100: IFFALSE 10074
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10102: LD_VAR 0 1
10106: PPUSH
10107: LD_INT 101
10109: PUSH
10110: LD_INT 1
10112: PUSH
10113: EMPTY
10114: LIST
10115: LIST
10116: PPUSH
10117: CALL_OW 72
10121: PUSH
10122: LD_INT 1
10124: ARRAY
10125: PPUSH
10126: CALL_OW 87
// DialogueOn ;
10130: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10134: LD_INT 22
10136: PUSH
10137: LD_INT 1
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: PUSH
10144: LD_INT 26
10146: PUSH
10147: LD_INT 1
10149: PUSH
10150: EMPTY
10151: LIST
10152: LIST
10153: PUSH
10154: LD_INT 23
10156: PUSH
10157: LD_INT 1
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: PUSH
10164: LD_INT 2
10166: PUSH
10167: LD_INT 25
10169: PUSH
10170: LD_INT 1
10172: PUSH
10173: EMPTY
10174: LIST
10175: LIST
10176: PUSH
10177: LD_INT 25
10179: PUSH
10180: LD_INT 2
10182: PUSH
10183: EMPTY
10184: LIST
10185: LIST
10186: PUSH
10187: LD_INT 25
10189: PUSH
10190: LD_INT 3
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PUSH
10197: LD_INT 25
10199: PUSH
10200: LD_INT 4
10202: PUSH
10203: EMPTY
10204: LIST
10205: LIST
10206: PUSH
10207: LD_INT 25
10209: PUSH
10210: LD_INT 5
10212: PUSH
10213: EMPTY
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 25
10219: PUSH
10220: LD_INT 8
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: PPUSH
10242: CALL_OW 69
10246: PPUSH
10247: LD_STRING DT1-Sol1-1
10249: PPUSH
10250: LD_STRING DT1-FSol1-1
10252: PPUSH
10253: CALL 12260 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10257: LD_EXP 1
10261: PPUSH
10262: LD_STRING DT1-JMM-1
10264: PPUSH
10265: CALL_OW 88
// DialogueOff ;
10269: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10273: LD_INT 175
10275: PPUSH
10276: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10280: LD_INT 11
10282: PPUSH
10283: LD_INT 22
10285: PUSH
10286: LD_INT 3
10288: PUSH
10289: EMPTY
10290: LIST
10291: LIST
10292: PUSH
10293: LD_INT 50
10295: PUSH
10296: EMPTY
10297: LIST
10298: PUSH
10299: LD_INT 2
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 2
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 21
10314: PUSH
10315: LD_INT 1
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: EMPTY
10323: LIST
10324: LIST
10325: LIST
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: PPUSH
10332: CALL_OW 70
10336: PUSH
10337: LD_INT 0
10339: EQUAL
10340: PUSH
10341: LD_EXP 22
10345: PUSH
10346: LD_INT 2
10348: GREATER
10349: AND
10350: IFFALSE 10273
// DialogueOn ;
10352: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10356: LD_EXP 1
10360: PPUSH
10361: LD_STRING DT1a-JMM-1
10363: PPUSH
10364: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10368: LD_INT 22
10370: PUSH
10371: LD_INT 1
10373: PUSH
10374: EMPTY
10375: LIST
10376: LIST
10377: PUSH
10378: LD_INT 26
10380: PUSH
10381: LD_INT 1
10383: PUSH
10384: EMPTY
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 23
10390: PUSH
10391: LD_INT 1
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PUSH
10398: LD_INT 2
10400: PUSH
10401: LD_INT 25
10403: PUSH
10404: LD_INT 1
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: LD_INT 25
10413: PUSH
10414: LD_INT 2
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: PUSH
10421: LD_INT 25
10423: PUSH
10424: LD_INT 3
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: PUSH
10431: LD_INT 25
10433: PUSH
10434: LD_INT 4
10436: PUSH
10437: EMPTY
10438: LIST
10439: LIST
10440: PUSH
10441: LD_INT 25
10443: PUSH
10444: LD_INT 5
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: PUSH
10451: LD_INT 25
10453: PUSH
10454: LD_INT 8
10456: PUSH
10457: EMPTY
10458: LIST
10459: LIST
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: EMPTY
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: PPUSH
10476: CALL_OW 69
10480: PPUSH
10481: LD_STRING DT1a-Sol1-1
10483: PPUSH
10484: LD_STRING DT1a-FSol1-1
10486: PPUSH
10487: CALL 12260 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10491: LD_EXP 1
10495: PPUSH
10496: LD_STRING DT1a-JMM-2
10498: PPUSH
10499: CALL_OW 88
// DialogueOff ;
10503: CALL_OW 7
// vehicleTeleported := 2 ;
10507: LD_ADDR_EXP 21
10511: PUSH
10512: LD_INT 2
10514: ST_TO_ADDR
// end ;
10515: PPOPN 1
10517: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10518: LD_EXP 21
10522: PUSH
10523: LD_INT 3
10525: EQUAL
10526: PUSH
10527: LD_INT 11
10529: PPUSH
10530: LD_INT 22
10532: PUSH
10533: LD_INT 3
10535: PUSH
10536: EMPTY
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 101
10542: PUSH
10543: LD_INT 1
10545: PUSH
10546: EMPTY
10547: LIST
10548: LIST
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PPUSH
10554: CALL_OW 70
10558: AND
10559: IFFALSE 10844
10561: GO 10563
10563: DISABLE
10564: LD_INT 0
10566: PPUSH
10567: PPUSH
10568: PPUSH
// begin wait ( 0 0$0.3 ) ;
10569: LD_INT 10
10571: PPUSH
10572: CALL_OW 67
// DialogueOn ;
10576: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10580: LD_ADDR_VAR 0 3
10584: PUSH
10585: LD_INT 22
10587: PUSH
10588: LD_INT 1
10590: PUSH
10591: EMPTY
10592: LIST
10593: LIST
10594: PUSH
10595: LD_INT 23
10597: PUSH
10598: LD_INT 1
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 26
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 2
10617: PUSH
10618: LD_INT 25
10620: PUSH
10621: LD_INT 1
10623: PUSH
10624: EMPTY
10625: LIST
10626: LIST
10627: PUSH
10628: LD_INT 25
10630: PUSH
10631: LD_INT 2
10633: PUSH
10634: EMPTY
10635: LIST
10636: LIST
10637: PUSH
10638: LD_INT 25
10640: PUSH
10641: LD_INT 3
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: PUSH
10648: LD_INT 25
10650: PUSH
10651: LD_INT 4
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PUSH
10658: LD_INT 25
10660: PUSH
10661: LD_INT 5
10663: PUSH
10664: EMPTY
10665: LIST
10666: LIST
10667: PUSH
10668: LD_INT 25
10670: PUSH
10671: LD_INT 8
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: PPUSH
10693: CALL_OW 69
10697: PPUSH
10698: LD_STRING DT2-Sol1-1
10700: PPUSH
10701: LD_STRING DT2-FSol1-1
10703: PPUSH
10704: CALL 12260 0 3
10708: ST_TO_ADDR
// DialogueOff ;
10709: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10713: LD_INT 175
10715: PPUSH
10716: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10720: LD_INT 11
10722: PPUSH
10723: LD_INT 22
10725: PUSH
10726: LD_INT 3
10728: PUSH
10729: EMPTY
10730: LIST
10731: LIST
10732: PUSH
10733: LD_INT 50
10735: PUSH
10736: EMPTY
10737: LIST
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: PPUSH
10743: CALL_OW 70
10747: NOT
10748: IFFALSE 10713
// wait ( 0 0$2 ) ;
10750: LD_INT 70
10752: PPUSH
10753: CALL_OW 67
// vehicleTeleported := 4 ;
10757: LD_ADDR_EXP 21
10761: PUSH
10762: LD_INT 4
10764: ST_TO_ADDR
// DialogueOn ;
10765: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10769: LD_EXP 1
10773: PPUSH
10774: LD_STRING DT2a-JMM-1
10776: PPUSH
10777: CALL_OW 88
// if speaker then
10781: LD_VAR 0 3
10785: IFFALSE 10828
// if GetSex ( speaker ) = 1 then
10787: LD_VAR 0 3
10791: PPUSH
10792: CALL_OW 258
10796: PUSH
10797: LD_INT 1
10799: EQUAL
10800: IFFALSE 10816
// Say ( speaker , DT2a-Sol1-1 ) else
10802: LD_VAR 0 3
10806: PPUSH
10807: LD_STRING DT2a-Sol1-1
10809: PPUSH
10810: CALL_OW 88
10814: GO 10828
// Say ( speaker , DT2a-FSol1-1 ) ;
10816: LD_VAR 0 3
10820: PPUSH
10821: LD_STRING DT2a-FSol1-1
10823: PPUSH
10824: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10828: LD_EXP 3
10832: PPUSH
10833: LD_STRING DT2a-Don-1
10835: PPUSH
10836: CALL_OW 88
// DialogueOff ;
10840: CALL_OW 7
// end ;
10844: PPOPN 3
10846: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10847: LD_INT 1
10849: PPUSH
10850: LD_INT 45
10852: PPUSH
10853: LD_INT 74
10855: PPUSH
10856: CALL_OW 293
10860: IFFALSE 11035
10862: GO 10864
10864: DISABLE
// begin DialogueOn ;
10865: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10869: LD_INT 36
10871: PPUSH
10872: LD_INT 55
10874: PPUSH
10875: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10879: LD_INT 22
10881: PUSH
10882: LD_INT 1
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: PUSH
10889: LD_INT 23
10891: PUSH
10892: LD_INT 1
10894: PUSH
10895: EMPTY
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 26
10901: PUSH
10902: LD_INT 1
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 2
10911: PUSH
10912: LD_INT 25
10914: PUSH
10915: LD_INT 1
10917: PUSH
10918: EMPTY
10919: LIST
10920: LIST
10921: PUSH
10922: LD_INT 25
10924: PUSH
10925: LD_INT 2
10927: PUSH
10928: EMPTY
10929: LIST
10930: LIST
10931: PUSH
10932: LD_INT 25
10934: PUSH
10935: LD_INT 3
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: PUSH
10942: LD_INT 25
10944: PUSH
10945: LD_INT 4
10947: PUSH
10948: EMPTY
10949: LIST
10950: LIST
10951: PUSH
10952: LD_INT 25
10954: PUSH
10955: LD_INT 5
10957: PUSH
10958: EMPTY
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 25
10964: PUSH
10965: LD_INT 8
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: PUSH
10972: EMPTY
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: PPUSH
10987: CALL_OW 69
10991: PPUSH
10992: LD_STRING D5-Sol1-1
10994: PPUSH
10995: LD_STRING D5-FSol1-
10997: PPUSH
10998: CALL 12260 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11002: LD_EXP 23
11006: PUSH
11007: LD_EXP 3
11011: PPUSH
11012: CALL_OW 302
11016: AND
11017: IFFALSE 11031
// Say ( Donaldson , D5-Don-1 ) ;
11019: LD_EXP 3
11023: PPUSH
11024: LD_STRING D5-Don-1
11026: PPUSH
11027: CALL_OW 88
// DialogueOff ;
11031: CALL_OW 7
// end ;
11035: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11036: LD_INT 1
11038: PPUSH
11039: LD_INT 10
11041: PPUSH
11042: CALL_OW 292
11046: PUSH
11047: LD_INT 1
11049: PPUSH
11050: LD_INT 137
11052: PPUSH
11053: CALL_OW 292
11057: OR
11058: IFFALSE 11213
11060: GO 11062
11062: DISABLE
// begin DialogueOn ;
11063: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11067: LD_INT 22
11069: PUSH
11070: LD_INT 1
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 23
11079: PUSH
11080: LD_INT 1
11082: PUSH
11083: EMPTY
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 26
11089: PUSH
11090: LD_INT 1
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 2
11099: PUSH
11100: LD_INT 25
11102: PUSH
11103: LD_INT 1
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 25
11112: PUSH
11113: LD_INT 2
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: LD_INT 25
11122: PUSH
11123: LD_INT 3
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: PUSH
11130: LD_INT 25
11132: PUSH
11133: LD_INT 4
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 25
11142: PUSH
11143: LD_INT 5
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: LD_INT 25
11152: PUSH
11153: LD_INT 8
11155: PUSH
11156: EMPTY
11157: LIST
11158: LIST
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: EMPTY
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: PPUSH
11175: CALL_OW 69
11179: PPUSH
11180: LD_STRING DT3-Sol1-1
11182: PPUSH
11183: LD_STRING DT3-FSol1-1
11185: PPUSH
11186: CALL 12260 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11190: LD_EXP 1
11194: PPUSH
11195: LD_STRING DT3-JMM-1
11197: PPUSH
11198: CALL_OW 88
// DialogueOff ;
11202: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11206: LD_STRING M2
11208: PPUSH
11209: CALL_OW 337
// end ;
11213: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11214: LD_EXP 35
11218: PUSH
11219: LD_INT 0
11221: EQUAL
11222: PUSH
11223: LD_INT 10
11225: PPUSH
11226: LD_INT 22
11228: PUSH
11229: LD_INT 1
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PPUSH
11236: CALL_OW 70
11240: PUSH
11241: LD_INT 10
11243: PPUSH
11244: LD_INT 22
11246: PUSH
11247: LD_INT 3
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PUSH
11254: LD_INT 3
11256: PUSH
11257: LD_INT 24
11259: PUSH
11260: LD_INT 800
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: PUSH
11271: LD_INT 21
11273: PUSH
11274: LD_INT 2
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: LD_INT 58
11283: PUSH
11284: EMPTY
11285: LIST
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: PPUSH
11293: CALL_OW 70
11297: OR
11298: AND
11299: IFFALSE 11312
11301: GO 11303
11303: DISABLE
// ruEscape := 1 ;
11304: LD_ADDR_EXP 35
11308: PUSH
11309: LD_INT 1
11311: ST_TO_ADDR
11312: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11313: LD_INT 3
11315: PPUSH
11316: CALL_OW 303
11320: PUSH
11321: LD_INT 4
11323: PPUSH
11324: CALL_OW 303
11328: OR
11329: PUSH
11330: LD_EXP 35
11334: PUSH
11335: LD_INT 1
11337: EQUAL
11338: OR
11339: IFFALSE 11928
11341: GO 11343
11343: DISABLE
11344: LD_INT 0
11346: PPUSH
11347: PPUSH
11348: PPUSH
// begin ruAI := 0 ;
11349: LD_ADDR_EXP 34
11353: PUSH
11354: LD_INT 0
11356: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11357: LD_EXP 27
11361: PPUSH
11362: CALL_OW 122
// wait ( 0 0$1 ) ;
11366: LD_INT 35
11368: PPUSH
11369: CALL_OW 67
// DialogueOn ;
11373: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11377: LD_INT 75
11379: PPUSH
11380: LD_INT 21
11382: PPUSH
11383: LD_INT 1
11385: PPUSH
11386: LD_INT 12
11388: PPUSH
11389: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11393: LD_INT 75
11395: PPUSH
11396: LD_INT 21
11398: PPUSH
11399: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11403: LD_INT 10
11405: PPUSH
11406: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11410: LD_EXP 1
11414: PPUSH
11415: LD_STRING D6-JMM-1
11417: PPUSH
11418: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11422: LD_INT 75
11424: PPUSH
11425: LD_INT 21
11427: PPUSH
11428: LD_INT 1
11430: PPUSH
11431: CALL_OW 331
// DialogueOff ;
11435: CALL_OW 7
// for i in RuScientists do
11439: LD_ADDR_VAR 0 1
11443: PUSH
11444: LD_EXP 27
11448: PUSH
11449: FOR_IN
11450: IFFALSE 11486
// begin SetSide ( i , 6 ) ;
11452: LD_VAR 0 1
11456: PPUSH
11457: LD_INT 6
11459: PPUSH
11460: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11464: LD_VAR 0 1
11468: PPUSH
11469: LD_INT 1
11471: PPUSH
11472: LD_INT 3
11474: PPUSH
11475: CALL_OW 12
11479: PPUSH
11480: CALL_OW 109
// end ;
11484: GO 11449
11486: POP
11487: POP
// repeat wait ( 0 0$1 ) ;
11488: LD_INT 35
11490: PPUSH
11491: CALL_OW 67
// for i in RuScientists do
11495: LD_ADDR_VAR 0 1
11499: PUSH
11500: LD_EXP 27
11504: PUSH
11505: FOR_IN
11506: IFFALSE 11919
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11508: LD_ADDR_VAR 0 3
11512: PUSH
11513: LD_INT 22
11515: PUSH
11516: LD_INT 3
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: PUSH
11523: LD_INT 91
11525: PUSH
11526: LD_VAR 0 1
11530: PUSH
11531: LD_INT 10
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: LIST
11538: PUSH
11539: LD_INT 21
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 58
11551: PUSH
11552: EMPTY
11553: LIST
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PPUSH
11561: CALL_OW 69
11565: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11566: LD_VAR 0 3
11570: PUSH
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 310
11580: NOT
11581: AND
11582: IFFALSE 11610
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11584: LD_VAR 0 1
11588: PPUSH
11589: LD_VAR 0 3
11593: PPUSH
11594: LD_VAR 0 1
11598: PPUSH
11599: CALL_OW 74
11603: PPUSH
11604: CALL_OW 120
// continue ;
11608: GO 11505
// end ; if IsInUnit ( i ) then
11610: LD_VAR 0 1
11614: PPUSH
11615: CALL_OW 310
11619: IFFALSE 11638
// unit := IsInUnit ( i ) else
11621: LD_ADDR_VAR 0 2
11625: PUSH
11626: LD_VAR 0 1
11630: PPUSH
11631: CALL_OW 310
11635: ST_TO_ADDR
11636: GO 11648
// unit := i ;
11638: LD_ADDR_VAR 0 2
11642: PUSH
11643: LD_VAR 0 1
11647: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11648: LD_VAR 0 1
11652: PPUSH
11653: CALL_OW 110
11657: PUSH
11658: LD_INT 1
11660: DOUBLE
11661: EQUAL
11662: IFTRUE 11666
11664: GO 11725
11666: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11667: LD_VAR 0 2
11671: PPUSH
11672: LD_INT 137
11674: PPUSH
11675: CALL_OW 296
11679: PUSH
11680: LD_INT 13
11682: LESS
11683: PUSH
11684: LD_INT 137
11686: PPUSH
11687: CALL_OW 302
11691: AND
11692: IFFALSE 11708
// ComEnterUnit ( unit , rutp ) else
11694: LD_VAR 0 2
11698: PPUSH
11699: LD_INT 137
11701: PPUSH
11702: CALL_OW 120
11706: GO 11723
// ComMoveXY ( unit , 16 , 28 ) ;
11708: LD_VAR 0 2
11712: PPUSH
11713: LD_INT 16
11715: PPUSH
11716: LD_INT 28
11718: PPUSH
11719: CALL_OW 111
// end ; 2 :
11723: GO 11917
11725: LD_INT 2
11727: DOUBLE
11728: EQUAL
11729: IFTRUE 11733
11731: GO 11751
11733: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11734: LD_VAR 0 2
11738: PPUSH
11739: LD_INT 97
11741: PPUSH
11742: LD_INT 2
11744: PPUSH
11745: CALL_OW 111
11749: GO 11917
11751: LD_INT 3
11753: DOUBLE
11754: EQUAL
11755: IFTRUE 11759
11757: GO 11818
11759: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11760: LD_VAR 0 2
11764: PPUSH
11765: LD_INT 137
11767: PPUSH
11768: CALL_OW 296
11772: PUSH
11773: LD_INT 13
11775: LESS
11776: PUSH
11777: LD_INT 137
11779: PPUSH
11780: CALL_OW 302
11784: AND
11785: IFFALSE 11801
// ComEnterUnit ( unit , rutp ) else
11787: LD_VAR 0 2
11791: PPUSH
11792: LD_INT 137
11794: PPUSH
11795: CALL_OW 120
11799: GO 11816
// ComMoveXY ( unit , 128 , 155 ) ;
11801: LD_VAR 0 2
11805: PPUSH
11806: LD_INT 128
11808: PPUSH
11809: LD_INT 155
11811: PPUSH
11812: CALL_OW 111
// end ; 11 :
11816: GO 11917
11818: LD_INT 11
11820: DOUBLE
11821: EQUAL
11822: IFTRUE 11826
11824: GO 11844
11826: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11827: LD_VAR 0 2
11831: PPUSH
11832: LD_INT 16
11834: PPUSH
11835: LD_INT 28
11837: PPUSH
11838: CALL_OW 111
11842: GO 11917
11844: LD_INT 13
11846: DOUBLE
11847: EQUAL
11848: IFTRUE 11852
11850: GO 11890
11852: POP
// begin if IsOk ( ruteleprt ) then
11853: LD_INT 10
11855: PPUSH
11856: CALL_OW 302
11860: IFFALSE 11876
// ComEnterUnit ( unit , ruteleprt ) else
11862: LD_VAR 0 2
11866: PPUSH
11867: LD_INT 10
11869: PPUSH
11870: CALL_OW 120
11874: GO 11888
// SetTag ( unit , 23 ) ;
11876: LD_VAR 0 2
11880: PPUSH
11881: LD_INT 23
11883: PPUSH
11884: CALL_OW 109
// end ; 23 :
11888: GO 11917
11890: LD_INT 23
11892: DOUBLE
11893: EQUAL
11894: IFTRUE 11898
11896: GO 11916
11898: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11899: LD_VAR 0 2
11903: PPUSH
11904: LD_INT 128
11906: PPUSH
11907: LD_INT 155
11909: PPUSH
11910: CALL_OW 111
11914: GO 11917
11916: POP
// end ;
11917: GO 11505
11919: POP
11920: POP
// until not RuScientists ;
11921: LD_EXP 27
11925: NOT
11926: IFFALSE 11488
// end ;
11928: PPOPN 3
11930: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11931: LD_EXP 34
11935: PUSH
11936: LD_INT 0
11938: EQUAL
11939: PUSH
11940: LD_EXP 27
11944: AND
11945: PUSH
11946: LD_INT 22
11948: PUSH
11949: LD_INT 6
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: PUSH
11956: LD_INT 2
11958: PUSH
11959: LD_INT 95
11961: PUSH
11962: LD_INT 13
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 95
11971: PUSH
11972: LD_INT 14
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 95
11981: PUSH
11982: LD_INT 25
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: EMPTY
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PPUSH
11999: CALL_OW 69
12003: AND
12004: IFFALSE 12217
12006: GO 12008
12008: DISABLE
12009: LD_INT 0
12011: PPUSH
12012: PPUSH
12013: PPUSH
12014: PPUSH
// begin enable ;
12015: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
12016: LD_ADDR_VAR 0 1
12020: PUSH
12021: LD_INT 22
12023: PUSH
12024: LD_INT 6
12026: PUSH
12027: EMPTY
12028: LIST
12029: LIST
12030: PUSH
12031: LD_INT 2
12033: PUSH
12034: LD_INT 95
12036: PUSH
12037: LD_INT 13
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: PUSH
12044: LD_INT 95
12046: PUSH
12047: LD_INT 14
12049: PUSH
12050: EMPTY
12051: LIST
12052: LIST
12053: PUSH
12054: LD_INT 95
12056: PUSH
12057: LD_INT 25
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: PUSH
12064: EMPTY
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PPUSH
12074: CALL_OW 69
12078: PUSH
12079: FOR_IN
12080: IFFALSE 12215
// begin if i in RuScientists then
12082: LD_VAR 0 1
12086: PUSH
12087: LD_EXP 27
12091: IN
12092: IFFALSE 12121
// begin RuScientists = RuScientists diff i ;
12094: LD_ADDR_EXP 27
12098: PUSH
12099: LD_EXP 27
12103: PUSH
12104: LD_VAR 0 1
12108: DIFF
12109: ST_TO_ADDR
// RemoveUnit ( i ) ;
12110: LD_VAR 0 1
12114: PPUSH
12115: CALL_OW 64
// continue ;
12119: GO 12079
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12121: LD_VAR 0 1
12125: PUSH
12126: LD_INT 22
12128: PUSH
12129: LD_INT 6
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 33
12138: PUSH
12139: LD_INT 1
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: PPUSH
12150: CALL_OW 69
12154: IN
12155: IFFALSE 12213
// begin if IsDrivenBy ( i ) in RuScientists then
12157: LD_VAR 0 1
12161: PPUSH
12162: CALL_OW 311
12166: PUSH
12167: LD_EXP 27
12171: IN
12172: IFFALSE 12190
// RuScientists = RuScientists diff i ;
12174: LD_ADDR_EXP 27
12178: PUSH
12179: LD_EXP 27
12183: PUSH
12184: LD_VAR 0 1
12188: DIFF
12189: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12190: LD_VAR 0 1
12194: PPUSH
12195: CALL_OW 311
12199: PPUSH
12200: CALL_OW 64
// RemoveUnit ( i ) ;
12204: LD_VAR 0 1
12208: PPUSH
12209: CALL_OW 64
// end ; end ;
12213: GO 12079
12215: POP
12216: POP
// end ; end_of_file
12217: PPOPN 4
12219: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12220: LD_INT 0
12222: PPUSH
12223: PPUSH
// for i in charactersList do
12224: LD_ADDR_VAR 0 4
12228: PUSH
12229: LD_VAR 0 1
12233: PUSH
12234: FOR_IN
12235: IFFALSE 12253
// SaveCharacters ( i , ident ) ;
12237: LD_VAR 0 4
12241: PPUSH
12242: LD_VAR 0 2
12246: PPUSH
12247: CALL_OW 38
12251: GO 12234
12253: POP
12254: POP
// end ;
12255: LD_VAR 0 3
12259: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12260: LD_INT 0
12262: PPUSH
12263: PPUSH
12264: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12265: LD_ADDR_VAR 0 1
12269: PUSH
12270: LD_VAR 0 1
12274: PUSH
12275: LD_EXP 1
12279: PUSH
12280: LD_EXP 7
12284: PUSH
12285: LD_EXP 3
12289: PUSH
12290: LD_EXP 4
12294: PUSH
12295: LD_EXP 5
12299: PUSH
12300: LD_EXP 2
12304: PUSH
12305: LD_EXP 12
12309: PUSH
12310: LD_EXP 13
12314: PUSH
12315: LD_EXP 9
12319: PUSH
12320: LD_EXP 11
12324: PUSH
12325: LD_EXP 6
12329: PUSH
12330: LD_EXP 8
12334: PUSH
12335: LD_EXP 10
12339: PUSH
12340: LD_EXP 15
12344: PUSH
12345: EMPTY
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: DIFF
12361: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12362: LD_ADDR_VAR 0 6
12366: PUSH
12367: LD_VAR 0 1
12371: PUSH
12372: LD_INT 1
12374: PPUSH
12375: LD_VAR 0 1
12379: PPUSH
12380: CALL_OW 12
12384: ARRAY
12385: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12386: LD_VAR 0 6
12390: PPUSH
12391: CALL_OW 258
12395: PUSH
12396: LD_INT 1
12398: EQUAL
12399: IFFALSE 12417
// Say ( speaker , dialogMID ) else
12401: LD_VAR 0 6
12405: PPUSH
12406: LD_VAR 0 2
12410: PPUSH
12411: CALL_OW 88
12415: GO 12431
// Say ( speaker , dialogFID ) ;
12417: LD_VAR 0 6
12421: PPUSH
12422: LD_VAR 0 3
12426: PPUSH
12427: CALL_OW 88
// result := speaker ;
12431: LD_ADDR_VAR 0 4
12435: PUSH
12436: LD_VAR 0 6
12440: ST_TO_ADDR
// end ;
12441: LD_VAR 0 4
12445: RET
// export function PrepareDifficulty ; var tmp ; begin
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// if Difficulty = 1 then
12450: LD_OWVAR 67
12454: PUSH
12455: LD_INT 1
12457: EQUAL
12458: IFFALSE 12478
// begin RuSolMinLevel = 8 ;
12460: LD_ADDR_EXP 29
12464: PUSH
12465: LD_INT 8
12467: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12468: LD_ADDR_EXP 30
12472: PUSH
12473: LD_INT 10
12475: ST_TO_ADDR
// end else
12476: GO 12718
// if Difficulty = 2 then
12478: LD_OWVAR 67
12482: PUSH
12483: LD_INT 2
12485: EQUAL
12486: IFFALSE 12582
// begin RuSolMinLevel = 9 ;
12488: LD_ADDR_EXP 29
12492: PUSH
12493: LD_INT 9
12495: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12496: LD_ADDR_EXP 30
12500: PUSH
12501: LD_INT 10
12503: ST_TO_ADDR
// uc_nation = 3 ;
12504: LD_ADDR_OWVAR 21
12508: PUSH
12509: LD_INT 3
12511: ST_TO_ADDR
// uc_side = 3 ;
12512: LD_ADDR_OWVAR 20
12516: PUSH
12517: LD_INT 3
12519: ST_TO_ADDR
// bc_level = 10 ;
12520: LD_ADDR_OWVAR 43
12524: PUSH
12525: LD_INT 10
12527: ST_TO_ADDR
// bc_type = b_turret ;
12528: LD_ADDR_OWVAR 42
12532: PUSH
12533: LD_INT 33
12535: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12536: LD_ADDR_VAR 0 2
12540: PUSH
12541: LD_INT 86
12543: PPUSH
12544: LD_INT 34
12546: PPUSH
12547: LD_INT 2
12549: PPUSH
12550: CALL_OW 47
12554: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12555: LD_VAR 0 2
12559: PPUSH
12560: LD_INT 49
12562: PPUSH
12563: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12567: LD_INT 64
12569: PPUSH
12570: LD_INT 3
12572: PPUSH
12573: LD_INT 1
12575: PPUSH
12576: CALL_OW 322
// end else
12580: GO 12718
// begin RuSolMinLevel = 10 ;
12582: LD_ADDR_EXP 29
12586: PUSH
12587: LD_INT 10
12589: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12590: LD_ADDR_EXP 30
12594: PUSH
12595: LD_INT 10
12597: ST_TO_ADDR
// uc_nation = 3 ;
12598: LD_ADDR_OWVAR 21
12602: PUSH
12603: LD_INT 3
12605: ST_TO_ADDR
// uc_side = 3 ;
12606: LD_ADDR_OWVAR 20
12610: PUSH
12611: LD_INT 3
12613: ST_TO_ADDR
// bc_level = 10 ;
12614: LD_ADDR_OWVAR 43
12618: PUSH
12619: LD_INT 10
12621: ST_TO_ADDR
// bc_type = b_turret ;
12622: LD_ADDR_OWVAR 42
12626: PUSH
12627: LD_INT 33
12629: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12630: LD_ADDR_VAR 0 2
12634: PUSH
12635: LD_INT 86
12637: PPUSH
12638: LD_INT 34
12640: PPUSH
12641: LD_INT 2
12643: PPUSH
12644: CALL_OW 47
12648: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12649: LD_VAR 0 2
12653: PPUSH
12654: LD_INT 49
12656: PPUSH
12657: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12661: LD_ADDR_VAR 0 2
12665: PUSH
12666: LD_INT 93
12668: PPUSH
12669: LD_INT 31
12671: PPUSH
12672: LD_INT 2
12674: PPUSH
12675: CALL_OW 47
12679: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12680: LD_VAR 0 2
12684: PPUSH
12685: LD_INT 49
12687: PPUSH
12688: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12692: LD_INT 64
12694: PPUSH
12695: LD_INT 3
12697: PPUSH
12698: LD_INT 1
12700: PPUSH
12701: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12705: LD_INT 65
12707: PPUSH
12708: LD_INT 3
12710: PPUSH
12711: LD_INT 1
12713: PPUSH
12714: CALL_OW 322
// end ; end ;
12718: LD_VAR 0 1
12722: RET
// export function ShowQuery1 ; begin
12723: LD_INT 0
12725: PPUSH
// result := Query ( Q1 ) ;
12726: LD_ADDR_VAR 0 1
12730: PUSH
12731: LD_STRING Q1
12733: PPUSH
12734: CALL_OW 97
12738: ST_TO_ADDR
// end ;
12739: LD_VAR 0 1
12743: RET
// export function ShowQuery2 ; begin
12744: LD_INT 0
12746: PPUSH
// result := Query ( Q1a ) ;
12747: LD_ADDR_VAR 0 1
12751: PUSH
12752: LD_STRING Q1a
12754: PPUSH
12755: CALL_OW 97
12759: ST_TO_ADDR
// end ;
12760: LD_VAR 0 1
12764: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12765: LD_INT 0
12767: PPUSH
12768: PPUSH
12769: PPUSH
12770: PPUSH
// for i = 1 to count do
12771: LD_ADDR_VAR 0 8
12775: PUSH
12776: DOUBLE
12777: LD_INT 1
12779: DEC
12780: ST_TO_ADDR
12781: LD_VAR 0 6
12785: PUSH
12786: FOR_TO
12787: IFFALSE 12868
// begin uc_side = side ;
12789: LD_ADDR_OWVAR 20
12793: PUSH
12794: LD_VAR 0 1
12798: ST_TO_ADDR
// uc_nation = nation ;
12799: LD_ADDR_OWVAR 21
12803: PUSH
12804: LD_VAR 0 2
12808: ST_TO_ADDR
// hc_gallery =  ;
12809: LD_ADDR_OWVAR 33
12813: PUSH
12814: LD_STRING 
12816: ST_TO_ADDR
// hc_name =  ;
12817: LD_ADDR_OWVAR 26
12821: PUSH
12822: LD_STRING 
12824: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12825: LD_INT 0
12827: PPUSH
12828: LD_VAR 0 5
12832: PPUSH
12833: LD_VAR 0 4
12837: PPUSH
12838: CALL_OW 380
// un = CreateHuman ;
12842: LD_ADDR_VAR 0 10
12846: PUSH
12847: CALL_OW 44
12851: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12852: LD_VAR 0 10
12856: PPUSH
12857: LD_VAR 0 3
12861: PPUSH
12862: CALL_OW 52
// end ;
12866: GO 12786
12868: POP
12869: POP
// end ;
12870: LD_VAR 0 7
12874: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12875: LD_INT 0
12877: PPUSH
12878: PPUSH
12879: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12880: LD_ADDR_VAR 0 6
12884: PUSH
12885: LD_INT 48
12887: PUSH
12888: LD_INT 49
12890: PUSH
12891: LD_INT 50
12893: PUSH
12894: LD_INT 20
12896: PUSH
12897: LD_INT 1
12899: PUSH
12900: LD_INT 51
12902: PUSH
12903: LD_INT 52
12905: PUSH
12906: LD_INT 69
12908: PUSH
12909: LD_INT 39
12911: PUSH
12912: LD_INT 34
12914: PUSH
12915: LD_INT 40
12917: PUSH
12918: LD_INT 53
12920: PUSH
12921: LD_INT 71
12923: PUSH
12924: LD_INT 57
12926: PUSH
12927: LD_INT 58
12929: PUSH
12930: LD_INT 44
12932: PUSH
12933: LD_INT 32
12935: PUSH
12936: LD_INT 27
12938: PUSH
12939: LD_INT 23
12941: PUSH
12942: LD_INT 33
12944: PUSH
12945: LD_INT 59
12947: PUSH
12948: LD_INT 54
12950: PUSH
12951: LD_INT 55
12953: PUSH
12954: LD_INT 56
12956: PUSH
12957: LD_INT 63
12959: PUSH
12960: LD_INT 64
12962: PUSH
12963: LD_INT 65
12965: PUSH
12966: LD_INT 30
12968: PUSH
12969: LD_INT 31
12971: PUSH
12972: LD_INT 21
12974: PUSH
12975: LD_INT 22
12977: PUSH
12978: LD_INT 25
12980: PUSH
12981: EMPTY
12982: LIST
12983: LIST
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: ST_TO_ADDR
// for i := 1 to list do
13015: LD_ADDR_VAR 0 5
13019: PUSH
13020: DOUBLE
13021: LD_INT 1
13023: DEC
13024: ST_TO_ADDR
13025: LD_VAR 0 6
13029: PUSH
13030: FOR_TO
13031: IFFALSE 13103
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
13033: LD_VAR 0 6
13037: PUSH
13038: LD_VAR 0 5
13042: ARRAY
13043: PPUSH
13044: LD_VAR 0 1
13048: PPUSH
13049: CALL_OW 321
13053: PUSH
13054: LD_INT 1
13056: EQUAL
13057: PUSH
13058: LD_VAR 0 6
13062: PUSH
13063: LD_VAR 0 5
13067: ARRAY
13068: PPUSH
13069: LD_VAR 0 3
13073: PPUSH
13074: CALL_OW 482
13078: AND
13079: IFFALSE 13101
// AddComResearch ( lab , list [ i ] ) ;
13081: LD_VAR 0 2
13085: PPUSH
13086: LD_VAR 0 6
13090: PUSH
13091: LD_VAR 0 5
13095: ARRAY
13096: PPUSH
13097: CALL_OW 184
13101: GO 13030
13103: POP
13104: POP
// end ;
13105: LD_VAR 0 4
13109: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13110: LD_INT 0
13112: PPUSH
13113: PPUSH
13114: PPUSH
13115: PPUSH
13116: PPUSH
13117: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13118: LD_ADDR_VAR 0 8
13122: PUSH
13123: LD_VAR 0 2
13127: PPUSH
13128: CALL_OW 313
13132: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13133: LD_ADDR_VAR 0 9
13137: PUSH
13138: LD_VAR 0 3
13142: PPUSH
13143: LD_INT 22
13145: PUSH
13146: LD_VAR 0 1
13150: PUSH
13151: EMPTY
13152: LIST
13153: LIST
13154: PUSH
13155: LD_INT 25
13157: PUSH
13158: LD_INT 2
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 24
13167: PUSH
13168: LD_INT 750
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: LD_INT 3
13177: PUSH
13178: LD_INT 54
13180: PUSH
13181: EMPTY
13182: LIST
13183: PUSH
13184: EMPTY
13185: LIST
13186: LIST
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: PPUSH
13194: CALL_OW 70
13198: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13199: LD_ADDR_VAR 0 6
13203: PUSH
13204: LD_VAR 0 3
13208: PPUSH
13209: LD_INT 22
13211: PUSH
13212: LD_VAR 0 1
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: PUSH
13221: LD_INT 21
13223: PUSH
13224: LD_INT 3
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: PUSH
13231: LD_INT 3
13233: PUSH
13234: LD_INT 24
13236: PUSH
13237: LD_INT 1000
13239: PUSH
13240: EMPTY
13241: LIST
13242: LIST
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: PUSH
13248: EMPTY
13249: LIST
13250: LIST
13251: LIST
13252: PUSH
13253: EMPTY
13254: LIST
13255: PPUSH
13256: CALL_OW 70
13260: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13261: LD_VAR 0 6
13265: NOT
13266: PUSH
13267: LD_INT 22
13269: PUSH
13270: LD_VAR 0 1
13274: PUSH
13275: EMPTY
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 25
13281: PUSH
13282: LD_INT 2
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PUSH
13289: LD_INT 24
13291: PUSH
13292: LD_INT 250
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 69
13308: NOT
13309: AND
13310: IFFALSE 13314
// exit ;
13312: GO 13472
// if buildingsList and engineerOkInside then
13314: LD_VAR 0 6
13318: PUSH
13319: LD_VAR 0 8
13323: AND
13324: IFFALSE 13335
// ComExitBuilding ( engineerOkInside ) ;
13326: LD_VAR 0 8
13330: PPUSH
13331: CALL_OW 122
// if buildingsList and engineerOkOutside then
13335: LD_VAR 0 6
13339: PUSH
13340: LD_VAR 0 9
13344: AND
13345: IFFALSE 13365
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13347: LD_VAR 0 9
13351: PPUSH
13352: LD_VAR 0 6
13356: PUSH
13357: LD_INT 1
13359: ARRAY
13360: PPUSH
13361: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13365: LD_VAR 0 6
13369: PUSH
13370: LD_INT 0
13372: EQUAL
13373: PUSH
13374: LD_VAR 0 4
13378: PUSH
13379: LD_INT 0
13381: EQUAL
13382: AND
13383: PUSH
13384: LD_VAR 0 9
13388: AND
13389: IFFALSE 13405
// ComEnterUnit ( engineerOkOutside , depot ) ;
13391: LD_VAR 0 9
13395: PPUSH
13396: LD_VAR 0 2
13400: PPUSH
13401: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13405: LD_VAR 0 9
13409: PUSH
13410: LD_VAR 0 6
13414: PUSH
13415: LD_INT 0
13417: EQUAL
13418: AND
13419: PUSH
13420: LD_VAR 0 4
13424: AND
13425: IFFALSE 13472
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13427: LD_VAR 0 9
13431: PPUSH
13432: LD_VAR 0 4
13436: PUSH
13437: LD_INT 1
13439: ARRAY
13440: PPUSH
13441: LD_VAR 0 4
13445: PUSH
13446: LD_INT 2
13448: ARRAY
13449: PPUSH
13450: LD_VAR 0 4
13454: PUSH
13455: LD_INT 3
13457: ARRAY
13458: PPUSH
13459: LD_VAR 0 4
13463: PUSH
13464: LD_INT 4
13466: ARRAY
13467: PPUSH
13468: CALL_OW 145
// end ;
13472: LD_VAR 0 5
13476: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13477: LD_INT 0
13479: PPUSH
13480: PPUSH
13481: PPUSH
13482: PPUSH
13483: PPUSH
13484: PPUSH
13485: PPUSH
13486: PPUSH
13487: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13488: LD_ADDR_VAR 0 6
13492: PUSH
13493: LD_INT 22
13495: PUSH
13496: LD_VAR 0 1
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: PUSH
13505: LD_INT 25
13507: PUSH
13508: LD_INT 4
13510: PUSH
13511: EMPTY
13512: LIST
13513: LIST
13514: PUSH
13515: LD_INT 24
13517: PUSH
13518: LD_INT 251
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: PPUSH
13530: CALL_OW 69
13534: PUSH
13535: LD_EXP 27
13539: PUSH
13540: EMPTY
13541: LIST
13542: DIFF
13543: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13544: LD_ADDR_VAR 0 7
13548: PUSH
13549: LD_VAR 0 3
13553: PPUSH
13554: LD_INT 22
13556: PUSH
13557: LD_VAR 0 1
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: LD_INT 56
13568: PUSH
13569: EMPTY
13570: LIST
13571: PUSH
13572: LD_INT 25
13574: PUSH
13575: LD_INT 4
13577: PUSH
13578: EMPTY
13579: LIST
13580: LIST
13581: PUSH
13582: LD_INT 50
13584: PUSH
13585: EMPTY
13586: LIST
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: PPUSH
13594: CALL_OW 70
13598: PUSH
13599: LD_EXP 27
13603: PUSH
13604: EMPTY
13605: LIST
13606: DIFF
13607: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13608: LD_ADDR_VAR 0 10
13612: PUSH
13613: LD_VAR 0 3
13617: PPUSH
13618: LD_INT 22
13620: PUSH
13621: LD_VAR 0 1
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: LD_INT 21
13632: PUSH
13633: LD_INT 1
13635: PUSH
13636: EMPTY
13637: LIST
13638: LIST
13639: PUSH
13640: LD_INT 3
13642: PUSH
13643: LD_INT 24
13645: PUSH
13646: LD_INT 750
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: LIST
13661: PPUSH
13662: CALL_OW 70
13666: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13667: LD_ADDR_VAR 0 11
13671: PUSH
13672: LD_VAR 0 2
13676: PPUSH
13677: LD_INT 22
13679: PUSH
13680: LD_VAR 0 1
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 21
13691: PUSH
13692: LD_INT 1
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 3
13701: PUSH
13702: LD_INT 24
13704: PUSH
13705: LD_INT 1000
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: PUSH
13712: EMPTY
13713: LIST
13714: LIST
13715: PUSH
13716: EMPTY
13717: LIST
13718: LIST
13719: LIST
13720: PPUSH
13721: CALL_OW 70
13725: ST_TO_ADDR
// if damageUnits and sciList then
13726: LD_VAR 0 10
13730: PUSH
13731: LD_VAR 0 6
13735: AND
13736: IFFALSE 13752
// ComMoveToArea ( damageUnits , healArea ) ;
13738: LD_VAR 0 10
13742: PPUSH
13743: LD_VAR 0 2
13747: PPUSH
13748: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13752: LD_VAR 0 11
13756: PUSH
13757: LD_VAR 0 6
13761: AND
13762: PUSH
13763: LD_VAR 0 7
13767: PUSH
13768: LD_INT 0
13770: EQUAL
13771: AND
13772: IFFALSE 13818
// for i in buildings do
13774: LD_ADDR_VAR 0 8
13778: PUSH
13779: LD_VAR 0 4
13783: PUSH
13784: FOR_IN
13785: IFFALSE 13816
// begin if UnitsInside ( i ) then
13787: LD_VAR 0 8
13791: PPUSH
13792: CALL_OW 313
13796: IFFALSE 13814
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13798: LD_VAR 0 8
13802: PPUSH
13803: CALL_OW 313
13807: PPUSH
13808: CALL_OW 122
// break ;
13812: GO 13816
// end ; end ;
13814: GO 13784
13816: POP
13817: POP
// if unitsToHeal and sciListOutside then
13818: LD_VAR 0 11
13822: PUSH
13823: LD_VAR 0 7
13827: AND
13828: IFFALSE 13848
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13830: LD_VAR 0 7
13834: PPUSH
13835: LD_VAR 0 11
13839: PUSH
13840: LD_INT 1
13842: ARRAY
13843: PPUSH
13844: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13848: LD_VAR 0 10
13852: PUSH
13853: LD_INT 0
13855: EQUAL
13856: PUSH
13857: LD_VAR 0 11
13861: PUSH
13862: LD_INT 0
13864: EQUAL
13865: AND
13866: PUSH
13867: LD_VAR 0 7
13871: AND
13872: IFFALSE 13940
// begin tmp := buildings ;
13874: LD_ADDR_VAR 0 12
13878: PUSH
13879: LD_VAR 0 4
13883: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13884: LD_ADDR_VAR 0 13
13888: PUSH
13889: LD_INT 1
13891: PPUSH
13892: LD_VAR 0 12
13896: PPUSH
13897: CALL_OW 12
13901: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13902: LD_VAR 0 7
13906: PPUSH
13907: LD_INT 3
13909: PUSH
13910: LD_INT 60
13912: PUSH
13913: EMPTY
13914: LIST
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PPUSH
13920: CALL_OW 72
13924: PPUSH
13925: LD_VAR 0 12
13929: PUSH
13930: LD_VAR 0 13
13934: ARRAY
13935: PPUSH
13936: CALL_OW 120
// end ; end ;
13940: LD_VAR 0 5
13944: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13945: LD_INT 0
13947: PPUSH
13948: PPUSH
13949: PPUSH
13950: PPUSH
13951: PPUSH
13952: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13953: LD_ADDR_VAR 0 7
13957: PUSH
13958: LD_VAR 0 2
13962: PPUSH
13963: LD_INT 22
13965: PUSH
13966: LD_VAR 0 1
13970: PUSH
13971: EMPTY
13972: LIST
13973: LIST
13974: PUSH
13975: LD_INT 21
13977: PUSH
13978: LD_INT 2
13980: PUSH
13981: EMPTY
13982: LIST
13983: LIST
13984: PUSH
13985: LD_INT 34
13987: PUSH
13988: LD_INT 52
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: PPUSH
14000: CALL_OW 70
14004: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14005: LD_ADDR_VAR 0 8
14009: PUSH
14010: LD_VAR 0 2
14014: PPUSH
14015: LD_INT 22
14017: PUSH
14018: LD_VAR 0 1
14022: PUSH
14023: EMPTY
14024: LIST
14025: LIST
14026: PUSH
14027: LD_INT 21
14029: PUSH
14030: LD_INT 3
14032: PUSH
14033: EMPTY
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 3
14039: PUSH
14040: LD_INT 24
14042: PUSH
14043: LD_INT 1000
14045: PUSH
14046: EMPTY
14047: LIST
14048: LIST
14049: PUSH
14050: EMPTY
14051: LIST
14052: LIST
14053: PUSH
14054: EMPTY
14055: LIST
14056: LIST
14057: LIST
14058: PUSH
14059: EMPTY
14060: LIST
14061: PPUSH
14062: CALL_OW 70
14066: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14067: LD_VAR 0 8
14071: PUSH
14072: LD_INT 0
14074: GREATER
14075: PUSH
14076: LD_VAR 0 7
14080: PPUSH
14081: LD_INT 24
14083: PUSH
14084: LD_INT 750
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: PPUSH
14091: CALL_OW 72
14095: PUSH
14096: LD_INT 0
14098: GREATER
14099: AND
14100: IFFALSE 14120
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14102: LD_VAR 0 7
14106: PPUSH
14107: LD_VAR 0 8
14111: PUSH
14112: LD_INT 1
14114: ARRAY
14115: PPUSH
14116: CALL_OW 130
// end ;
14120: LD_VAR 0 3
14124: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14125: LD_INT 0
14127: PPUSH
14128: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14129: LD_INT 22
14131: PUSH
14132: LD_VAR 0 1
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 21
14143: PUSH
14144: LD_INT 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PPUSH
14155: CALL_OW 69
14159: PUSH
14160: LD_INT 18
14162: PPUSH
14163: LD_INT 22
14165: PUSH
14166: LD_VAR 0 1
14170: PUSH
14171: EMPTY
14172: LIST
14173: LIST
14174: PUSH
14175: LD_INT 21
14177: PUSH
14178: LD_INT 2
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: PPUSH
14189: CALL_OW 70
14193: PUSH
14194: LD_VAR 0 3
14198: LESSEQUAL
14199: DIFF
14200: IFFALSE 14267
// for i := 1 to vehCount do
14202: LD_ADDR_VAR 0 9
14206: PUSH
14207: DOUBLE
14208: LD_INT 1
14210: DEC
14211: ST_TO_ADDR
14212: LD_VAR 0 3
14216: PUSH
14217: FOR_TO
14218: IFFALSE 14265
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14220: LD_VAR 0 2
14224: PPUSH
14225: LD_VAR 0 7
14229: PPUSH
14230: LD_VAR 0 5
14234: PPUSH
14235: LD_VAR 0 6
14239: PPUSH
14240: LD_VAR 0 4
14244: PUSH
14245: LD_INT 1
14247: PPUSH
14248: LD_VAR 0 4
14252: PPUSH
14253: CALL_OW 12
14257: ARRAY
14258: PPUSH
14259: CALL_OW 185
14263: GO 14217
14265: POP
14266: POP
// end ;
14267: LD_VAR 0 8
14271: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14272: LD_INT 0
14274: PPUSH
14275: PPUSH
14276: PPUSH
14277: PPUSH
14278: PPUSH
14279: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14280: LD_ADDR_VAR 0 6
14284: PUSH
14285: LD_INT 22
14287: PUSH
14288: LD_VAR 0 1
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 25
14299: PUSH
14300: LD_INT 9
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: PUSH
14307: EMPTY
14308: LIST
14309: LIST
14310: PPUSH
14311: CALL_OW 69
14315: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14316: LD_ADDR_VAR 0 7
14320: PUSH
14321: LD_INT 81
14323: PUSH
14324: LD_VAR 0 1
14328: PUSH
14329: EMPTY
14330: LIST
14331: LIST
14332: PUSH
14333: LD_INT 3
14335: PUSH
14336: LD_INT 21
14338: PUSH
14339: LD_INT 3
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PPUSH
14354: CALL_OW 69
14358: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14359: LD_ADDR_VAR 0 4
14363: PUSH
14364: LD_INT 1
14366: PPUSH
14367: LD_INT 3
14369: PPUSH
14370: CALL_OW 12
14374: ST_TO_ADDR
// for i := 1 to list do
14375: LD_ADDR_VAR 0 5
14379: PUSH
14380: DOUBLE
14381: LD_INT 1
14383: DEC
14384: ST_TO_ADDR
14385: LD_VAR 0 6
14389: PUSH
14390: FOR_TO
14391: IFFALSE 14593
// for ta in filter do
14393: LD_ADDR_VAR 0 3
14397: PUSH
14398: LD_VAR 0 7
14402: PUSH
14403: FOR_IN
14404: IFFALSE 14589
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14406: LD_VAR 0 6
14410: PUSH
14411: LD_VAR 0 5
14415: ARRAY
14416: PPUSH
14417: LD_VAR 0 3
14421: PPUSH
14422: CALL_OW 296
14426: PUSH
14427: LD_INT 15
14429: LESSEQUAL
14430: IFFALSE 14587
// begin case c of 1 :
14432: LD_VAR 0 4
14436: PUSH
14437: LD_INT 1
14439: DOUBLE
14440: EQUAL
14441: IFTRUE 14445
14443: GO 14483
14445: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14446: LD_VAR 0 6
14450: PUSH
14451: LD_VAR 0 5
14455: ARRAY
14456: PPUSH
14457: LD_VAR 0 3
14461: PPUSH
14462: CALL_OW 250
14466: PPUSH
14467: LD_VAR 0 3
14471: PPUSH
14472: CALL_OW 251
14476: PPUSH
14477: CALL_OW 154
14481: GO 14587
14483: LD_INT 2
14485: DOUBLE
14486: EQUAL
14487: IFTRUE 14491
14489: GO 14555
14491: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14492: LD_VAR 0 6
14496: PUSH
14497: LD_VAR 0 5
14501: ARRAY
14502: PPUSH
14503: LD_VAR 0 3
14507: PPUSH
14508: CALL_OW 250
14512: PUSH
14513: LD_INT 1
14515: NEG
14516: PPUSH
14517: LD_INT 1
14519: PPUSH
14520: CALL_OW 12
14524: PLUS
14525: PPUSH
14526: LD_VAR 0 3
14530: PPUSH
14531: CALL_OW 251
14535: PUSH
14536: LD_INT 1
14538: NEG
14539: PPUSH
14540: LD_INT 1
14542: PPUSH
14543: CALL_OW 12
14547: PLUS
14548: PPUSH
14549: CALL_OW 153
14553: GO 14587
14555: LD_INT 3
14557: DOUBLE
14558: EQUAL
14559: IFTRUE 14563
14561: GO 14586
14563: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14564: LD_VAR 0 6
14568: PUSH
14569: LD_VAR 0 5
14573: ARRAY
14574: PPUSH
14575: LD_VAR 0 3
14579: PPUSH
14580: CALL_OW 115
14584: GO 14587
14586: POP
// end ; end ;
14587: GO 14403
14589: POP
14590: POP
14591: GO 14390
14593: POP
14594: POP
// end ;
14595: LD_VAR 0 2
14599: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14600: LD_INT 0
14602: PPUSH
14603: PPUSH
14604: PPUSH
14605: PPUSH
// r := 100 ;
14606: LD_ADDR_VAR 0 5
14610: PUSH
14611: LD_INT 100
14613: ST_TO_ADDR
// x := 0 ;
14614: LD_ADDR_VAR 0 6
14618: PUSH
14619: LD_INT 0
14621: ST_TO_ADDR
// while ( x < n ) do
14622: LD_VAR 0 6
14626: PUSH
14627: LD_VAR 0 2
14631: LESS
14632: IFFALSE 14895
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14634: LD_ADDR_VAR 0 4
14638: PUSH
14639: DOUBLE
14640: LD_INT 1
14642: DEC
14643: ST_TO_ADDR
14644: LD_VAR 0 1
14648: PPUSH
14649: LD_INT 0
14651: PPUSH
14652: CALL_OW 517
14656: PUSH
14657: LD_INT 1
14659: ARRAY
14660: PUSH
14661: FOR_TO
14662: IFFALSE 14891
// begin if r > 50 then
14664: LD_VAR 0 5
14668: PUSH
14669: LD_INT 50
14671: GREATER
14672: IFFALSE 14875
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14674: LD_VAR 0 1
14678: PPUSH
14679: LD_INT 0
14681: PPUSH
14682: CALL_OW 517
14686: PUSH
14687: LD_INT 1
14689: ARRAY
14690: PUSH
14691: LD_VAR 0 4
14695: ARRAY
14696: PPUSH
14697: LD_VAR 0 1
14701: PPUSH
14702: LD_INT 0
14704: PPUSH
14705: CALL_OW 517
14709: PUSH
14710: LD_INT 2
14712: ARRAY
14713: PUSH
14714: LD_VAR 0 4
14718: ARRAY
14719: PPUSH
14720: CALL_OW 458
14724: NOT
14725: IFFALSE 14873
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14727: LD_VAR 0 1
14731: PPUSH
14732: LD_INT 0
14734: PPUSH
14735: CALL_OW 517
14739: PUSH
14740: LD_INT 1
14742: ARRAY
14743: PUSH
14744: LD_VAR 0 4
14748: ARRAY
14749: PPUSH
14750: LD_VAR 0 1
14754: PPUSH
14755: LD_INT 0
14757: PPUSH
14758: CALL_OW 517
14762: PUSH
14763: LD_INT 2
14765: ARRAY
14766: PUSH
14767: LD_VAR 0 4
14771: ARRAY
14772: PPUSH
14773: LD_INT 8
14775: PPUSH
14776: LD_INT 0
14778: PPUSH
14779: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14783: LD_ADDR_EXP 37
14787: PUSH
14788: LD_EXP 37
14792: PPUSH
14793: LD_INT 1
14795: PPUSH
14796: LD_VAR 0 1
14800: PPUSH
14801: LD_INT 0
14803: PPUSH
14804: CALL_OW 517
14808: PUSH
14809: LD_INT 1
14811: ARRAY
14812: PUSH
14813: LD_VAR 0 4
14817: ARRAY
14818: PUSH
14819: LD_VAR 0 1
14823: PPUSH
14824: LD_INT 0
14826: PPUSH
14827: CALL_OW 517
14831: PUSH
14832: LD_INT 2
14834: ARRAY
14835: PUSH
14836: LD_VAR 0 4
14840: ARRAY
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PPUSH
14846: CALL_OW 2
14850: ST_TO_ADDR
// r := 0 ;
14851: LD_ADDR_VAR 0 5
14855: PUSH
14856: LD_INT 0
14858: ST_TO_ADDR
// x := x + 1 ;
14859: LD_ADDR_VAR 0 6
14863: PUSH
14864: LD_VAR 0 6
14868: PUSH
14869: LD_INT 1
14871: PLUS
14872: ST_TO_ADDR
// end end else
14873: GO 14889
// r := r + 35 ;
14875: LD_ADDR_VAR 0 5
14879: PUSH
14880: LD_VAR 0 5
14884: PUSH
14885: LD_INT 35
14887: PLUS
14888: ST_TO_ADDR
// end end ;
14889: GO 14661
14891: POP
14892: POP
14893: GO 14622
14895: LD_VAR 0 3
14899: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14900: LD_INT 0
14902: PPUSH
14903: PPUSH
14904: PPUSH
14905: PPUSH
14906: PPUSH
// tmp := [ ] ;
14907: LD_ADDR_VAR 0 6
14911: PUSH
14912: EMPTY
14913: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14914: LD_ADDR_VAR 0 7
14918: PUSH
14919: LD_INT 22
14921: PUSH
14922: LD_VAR 0 1
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 30
14933: PUSH
14934: LD_INT 32
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: ST_TO_ADDR
// if bunkers then
14950: LD_VAR 0 7
14954: IFFALSE 15024
// for i in bunkers do
14956: LD_ADDR_VAR 0 4
14960: PUSH
14961: LD_VAR 0 7
14965: PUSH
14966: FOR_IN
14967: IFFALSE 15022
// for j in UnitsInside ( i ) do
14969: LD_ADDR_VAR 0 5
14973: PUSH
14974: LD_VAR 0 4
14978: PPUSH
14979: CALL_OW 313
14983: PUSH
14984: FOR_IN
14985: IFFALSE 15018
// tmp := Replace ( tmp , tmp + 1 , j ) ;
14987: LD_ADDR_VAR 0 6
14991: PUSH
14992: LD_VAR 0 6
14996: PPUSH
14997: LD_VAR 0 6
15001: PUSH
15002: LD_INT 1
15004: PLUS
15005: PPUSH
15006: LD_VAR 0 5
15010: PPUSH
15011: CALL_OW 1
15015: ST_TO_ADDR
15016: GO 14984
15018: POP
15019: POP
15020: GO 14966
15022: POP
15023: POP
// if tmp then
15024: LD_VAR 0 6
15028: IFFALSE 15068
// begin ComExitBuilding ( tmp ) ;
15030: LD_VAR 0 6
15034: PPUSH
15035: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15039: LD_VAR 0 6
15043: PPUSH
15044: LD_VAR 0 2
15048: PPUSH
15049: CALL_OW 250
15053: PPUSH
15054: LD_VAR 0 2
15058: PPUSH
15059: CALL_OW 251
15063: PPUSH
15064: CALL_OW 174
// end ; end ;
15068: LD_VAR 0 3
15072: RET
// export function CreateNature ; var i , un ; begin
15073: LD_INT 0
15075: PPUSH
15076: PPUSH
15077: PPUSH
// uc_side := 0 ;
15078: LD_ADDR_OWVAR 20
15082: PUSH
15083: LD_INT 0
15085: ST_TO_ADDR
// uc_nation := 0 ;
15086: LD_ADDR_OWVAR 21
15090: PUSH
15091: LD_INT 0
15093: ST_TO_ADDR
// InitHc ;
15094: CALL_OW 19
// hc_class := class_fish ;
15098: LD_ADDR_OWVAR 28
15102: PUSH
15103: LD_INT 20
15105: ST_TO_ADDR
// for i := 1 to 6 do
15106: LD_ADDR_VAR 0 2
15110: PUSH
15111: DOUBLE
15112: LD_INT 1
15114: DEC
15115: ST_TO_ADDR
15116: LD_INT 6
15118: PUSH
15119: FOR_TO
15120: IFFALSE 15139
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15122: CALL_OW 44
15126: PPUSH
15127: LD_INT 22
15129: PPUSH
15130: LD_INT 0
15132: PPUSH
15133: CALL_OW 49
15137: GO 15119
15139: POP
15140: POP
// for i := 1 to Difficulty + 2 do
15141: LD_ADDR_VAR 0 2
15145: PUSH
15146: DOUBLE
15147: LD_INT 1
15149: DEC
15150: ST_TO_ADDR
15151: LD_OWVAR 67
15155: PUSH
15156: LD_INT 2
15158: PLUS
15159: PUSH
15160: FOR_TO
15161: IFFALSE 15270
// begin hc_sex := sex_male ;
15163: LD_ADDR_OWVAR 27
15167: PUSH
15168: LD_INT 1
15170: ST_TO_ADDR
// uc_side := 0 ;
15171: LD_ADDR_OWVAR 20
15175: PUSH
15176: LD_INT 0
15178: ST_TO_ADDR
// uc_nation := nation_nature ;
15179: LD_ADDR_OWVAR 21
15183: PUSH
15184: LD_INT 0
15186: ST_TO_ADDR
// hc_class := class_tiger ;
15187: LD_ADDR_OWVAR 28
15191: PUSH
15192: LD_INT 14
15194: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15195: LD_ADDR_OWVAR 31
15199: PUSH
15200: LD_EXP 30
15204: PUSH
15205: LD_INT 0
15207: PUSH
15208: LD_INT 0
15210: PUSH
15211: LD_INT 0
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15220: LD_ADDR_OWVAR 35
15224: PUSH
15225: LD_INT 5
15227: NEG
15228: PPUSH
15229: LD_INT 5
15231: PPUSH
15232: CALL_OW 12
15236: PUSH
15237: LD_OWVAR 67
15241: MUL
15242: ST_TO_ADDR
// un := CreateHuman ;
15243: LD_ADDR_VAR 0 3
15247: PUSH
15248: CALL_OW 44
15252: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15253: LD_VAR 0 3
15257: PPUSH
15258: LD_INT 23
15260: PPUSH
15261: LD_INT 0
15263: PPUSH
15264: CALL_OW 49
// end ;
15268: GO 15160
15270: POP
15271: POP
// for i := 1 to rand ( 3 , 4 ) do
15272: LD_ADDR_VAR 0 2
15276: PUSH
15277: DOUBLE
15278: LD_INT 1
15280: DEC
15281: ST_TO_ADDR
15282: LD_INT 3
15284: PPUSH
15285: LD_INT 4
15287: PPUSH
15288: CALL_OW 12
15292: PUSH
15293: FOR_TO
15294: IFFALSE 15386
// begin hc_sex := sex_male ;
15296: LD_ADDR_OWVAR 27
15300: PUSH
15301: LD_INT 1
15303: ST_TO_ADDR
// uc_side := 0 ;
15304: LD_ADDR_OWVAR 20
15308: PUSH
15309: LD_INT 0
15311: ST_TO_ADDR
// uc_nation := nation_nature ;
15312: LD_ADDR_OWVAR 21
15316: PUSH
15317: LD_INT 0
15319: ST_TO_ADDR
// hc_class := 18 ;
15320: LD_ADDR_OWVAR 28
15324: PUSH
15325: LD_INT 18
15327: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15328: LD_ADDR_OWVAR 31
15332: PUSH
15333: LD_INT 0
15335: PUSH
15336: LD_INT 0
15338: PUSH
15339: LD_INT 0
15341: PUSH
15342: LD_INT 0
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: ST_TO_ADDR
// hc_agressivity := 0 ;
15351: LD_ADDR_OWVAR 35
15355: PUSH
15356: LD_INT 0
15358: ST_TO_ADDR
// un := CreateHuman ;
15359: LD_ADDR_VAR 0 3
15363: PUSH
15364: CALL_OW 44
15368: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15369: LD_VAR 0 3
15373: PPUSH
15374: LD_INT 23
15376: PPUSH
15377: LD_INT 0
15379: PPUSH
15380: CALL_OW 49
// end ;
15384: GO 15293
15386: POP
15387: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15388: LD_ADDR_VAR 0 2
15392: PUSH
15393: DOUBLE
15394: LD_INT 1
15396: DEC
15397: ST_TO_ADDR
15398: LD_INT 4
15400: PUSH
15401: LD_INT 3
15403: PUSH
15404: LD_INT 3
15406: PUSH
15407: LD_INT 3
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: PUSH
15416: LD_OWVAR 67
15420: ARRAY
15421: PUSH
15422: FOR_TO
15423: IFFALSE 15532
// begin hc_sex := sex_male ;
15425: LD_ADDR_OWVAR 27
15429: PUSH
15430: LD_INT 1
15432: ST_TO_ADDR
// uc_side := 0 ;
15433: LD_ADDR_OWVAR 20
15437: PUSH
15438: LD_INT 0
15440: ST_TO_ADDR
// uc_nation := nation_nature ;
15441: LD_ADDR_OWVAR 21
15445: PUSH
15446: LD_INT 0
15448: ST_TO_ADDR
// hc_class := class_apeman ;
15449: LD_ADDR_OWVAR 28
15453: PUSH
15454: LD_INT 12
15456: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15457: LD_ADDR_OWVAR 31
15461: PUSH
15462: LD_INT 0
15464: PPUSH
15465: LD_INT 2
15467: PPUSH
15468: CALL_OW 12
15472: PUSH
15473: LD_INT 0
15475: PUSH
15476: LD_INT 0
15478: PUSH
15479: LD_INT 0
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: LIST
15487: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15488: LD_ADDR_OWVAR 35
15492: PUSH
15493: LD_INT 10
15495: NEG
15496: PPUSH
15497: LD_INT 10
15499: PPUSH
15500: CALL_OW 12
15504: ST_TO_ADDR
// un := CreateHuman ;
15505: LD_ADDR_VAR 0 3
15509: PUSH
15510: CALL_OW 44
15514: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15515: LD_VAR 0 3
15519: PPUSH
15520: LD_INT 26
15522: PPUSH
15523: LD_INT 0
15525: PPUSH
15526: CALL_OW 49
// end ;
15530: GO 15422
15532: POP
15533: POP
// end ; end_of_file
15534: LD_VAR 0 1
15538: RET
// on UnitDestroyed ( unit ) do var i ;
15539: LD_INT 0
15541: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15542: LD_VAR 0 1
15546: PPUSH
15547: CALL 34840 0 1
// if unit = JMM then
15551: LD_VAR 0 1
15555: PUSH
15556: LD_EXP 1
15560: EQUAL
15561: IFFALSE 15570
// YouLost ( JMM ) ;
15563: LD_STRING JMM
15565: PPUSH
15566: CALL_OW 104
// if unit in russianTanks then
15570: LD_VAR 0 1
15574: PUSH
15575: LD_EXP 32
15579: IN
15580: IFFALSE 15598
// russianTanks := russianTanks diff unit ;
15582: LD_ADDR_EXP 32
15586: PUSH
15587: LD_EXP 32
15591: PUSH
15592: LD_VAR 0 1
15596: DIFF
15597: ST_TO_ADDR
// if unit in russianTimeLapsers then
15598: LD_VAR 0 1
15602: PUSH
15603: LD_EXP 33
15607: IN
15608: IFFALSE 15626
// russianTimeLapsers := russianTimeLapsers diff unit ;
15610: LD_ADDR_EXP 33
15614: PUSH
15615: LD_EXP 33
15619: PUSH
15620: LD_VAR 0 1
15624: DIFF
15625: ST_TO_ADDR
// if unit in RuScientists then
15626: LD_VAR 0 1
15630: PUSH
15631: LD_EXP 27
15635: IN
15636: IFFALSE 15668
// begin RuScientists := RuScientists diff unit ;
15638: LD_ADDR_EXP 27
15642: PUSH
15643: LD_EXP 27
15647: PUSH
15648: LD_VAR 0 1
15652: DIFF
15653: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15654: LD_ADDR_EXP 28
15658: PUSH
15659: LD_EXP 28
15663: PUSH
15664: LD_INT 1
15666: PLUS
15667: ST_TO_ADDR
// end ; end ;
15668: PPOPN 2
15670: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15671: LD_VAR 0 3
15675: PPUSH
15676: CALL_OW 264
15680: PUSH
15681: LD_INT 9
15683: EQUAL
15684: IFFALSE 15700
// laserCounterDestroy := laserCounterDestroy + 1 ;
15686: LD_ADDR_EXP 43
15690: PUSH
15691: LD_EXP 43
15695: PUSH
15696: LD_INT 1
15698: PLUS
15699: ST_TO_ADDR
// end ;
15700: PPOPN 3
15702: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15703: LD_VAR 0 2
15707: PUSH
15708: LD_INT 22
15710: PUSH
15711: LD_INT 6
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PPUSH
15718: CALL_OW 69
15722: IN
15723: IFFALSE 15778
// begin if GetType ( human ) = unit_vehicle then
15725: LD_VAR 0 2
15729: PPUSH
15730: CALL_OW 247
15734: PUSH
15735: LD_INT 2
15737: EQUAL
15738: IFFALSE 15755
// human := IsDrivenBy ( human ) ;
15740: LD_ADDR_VAR 0 2
15744: PUSH
15745: LD_VAR 0 2
15749: PPUSH
15750: CALL_OW 311
15754: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15755: LD_VAR 0 2
15759: PPUSH
15760: LD_VAR 0 2
15764: PPUSH
15765: CALL_OW 110
15769: PUSH
15770: LD_INT 10
15772: PLUS
15773: PPUSH
15774: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
15778: LD_VAR 0 2
15782: PPUSH
15783: CALL_OW 255
15787: PUSH
15788: LD_INT 1
15790: EQUAL
15791: PUSH
15792: LD_EXP 40
15796: PUSH
15797: LD_INT 0
15799: EQUAL
15800: AND
15801: IFFALSE 15913
// begin eventVar1 = 1 ;
15803: LD_ADDR_EXP 40
15807: PUSH
15808: LD_INT 1
15810: ST_TO_ADDR
// teleportExplored = 1 ;
15811: LD_ADDR_EXP 26
15815: PUSH
15816: LD_INT 1
15818: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15819: LD_STRING M2a
15821: PPUSH
15822: CALL_OW 337
// wait ( 0 0$2 ) ;
15826: LD_INT 70
15828: PPUSH
15829: CALL_OW 67
// DialogueOn ;
15833: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15837: LD_INT 22
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: PUSH
15847: LD_INT 21
15849: PUSH
15850: LD_INT 1
15852: PUSH
15853: EMPTY
15854: LIST
15855: LIST
15856: PUSH
15857: EMPTY
15858: LIST
15859: LIST
15860: PPUSH
15861: CALL_OW 69
15865: PPUSH
15866: LD_STRING DT3a-Sol1-1
15868: PPUSH
15869: LD_STRING DT3a-FSol1-1
15871: PPUSH
15872: CALL 12260 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15876: LD_EXP 1
15880: PPUSH
15881: LD_STRING DT3a-JMM-1
15883: PPUSH
15884: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15888: LD_VAR 0 2
15892: PPUSH
15893: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15897: LD_EXP 1
15901: PPUSH
15902: LD_STRING DT3a-JMM-1a
15904: PPUSH
15905: CALL_OW 88
// DialogueOff ;
15909: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15913: LD_VAR 0 1
15917: PUSH
15918: LD_INT 10
15920: EQUAL
15921: PUSH
15922: LD_VAR 0 2
15926: PPUSH
15927: CALL_OW 247
15931: PUSH
15932: LD_INT 2
15934: EQUAL
15935: AND
15936: PUSH
15937: LD_VAR 0 2
15941: PPUSH
15942: CALL_OW 255
15946: PUSH
15947: LD_INT 3
15949: EQUAL
15950: AND
15951: IFFALSE 16017
// begin if vehicleTeleported = 0 then
15953: LD_EXP 21
15957: PUSH
15958: LD_INT 0
15960: EQUAL
15961: IFFALSE 15978
// begin wait ( 0 0$03 ) ;
15963: LD_INT 105
15965: PPUSH
15966: CALL_OW 67
// vehicleTeleported := 1 ;
15970: LD_ADDR_EXP 21
15974: PUSH
15975: LD_INT 1
15977: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15978: LD_EXP 21
15982: PUSH
15983: LD_INT 2
15985: EQUAL
15986: IFFALSE 16003
// begin wait ( 0 0$03 ) ;
15988: LD_INT 105
15990: PPUSH
15991: CALL_OW 67
// vehicleTeleported := 3 ;
15995: LD_ADDR_EXP 21
15999: PUSH
16000: LD_INT 3
16002: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16003: LD_ADDR_EXP 22
16007: PUSH
16008: LD_EXP 22
16012: PUSH
16013: LD_INT 1
16015: PLUS
16016: ST_TO_ADDR
// end ; end ;
16017: PPOPN 2
16019: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16020: LD_VAR 0 1
16024: PPUSH
16025: LD_VAR 0 2
16029: PPUSH
16030: CALL 34960 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16034: LD_VAR 0 1
16038: PPUSH
16039: CALL_OW 264
16043: PUSH
16044: LD_INT 7
16046: EQUAL
16047: IFFALSE 16057
// rocketBuilded := true ;
16049: LD_ADDR_EXP 44
16053: PUSH
16054: LD_INT 1
16056: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 255
16066: PUSH
16067: LD_INT 3
16069: NONEQUAL
16070: IFFALSE 16074
// exit ;
16072: GO 16191
// if factory in [ ru_fact , rufab2 ] then
16074: LD_VAR 0 2
16078: PUSH
16079: LD_INT 21
16081: PUSH
16082: LD_INT 112
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: IN
16089: IFFALSE 16191
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16091: LD_VAR 0 1
16095: PPUSH
16096: CALL_OW 264
16100: PUSH
16101: LD_INT 49
16103: EQUAL
16104: IFFALSE 16140
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16106: LD_ADDR_EXP 33
16110: PUSH
16111: LD_EXP 33
16115: PPUSH
16116: LD_VAR 0 1
16120: PPUSH
16121: CALL 76450 0 2
16125: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16126: LD_VAR 0 1
16130: PPUSH
16131: LD_INT 137
16133: PPUSH
16134: CALL_OW 120
// end else
16138: GO 16191
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16140: LD_VAR 0 1
16144: PPUSH
16145: CALL_OW 264
16149: PUSH
16150: LD_INT 51
16152: PUSH
16153: LD_INT 89
16155: PUSH
16156: LD_INT 52
16158: PUSH
16159: LD_INT 53
16161: PUSH
16162: EMPTY
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: IN
16168: NOT
16169: IFFALSE 16191
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16171: LD_ADDR_EXP 32
16175: PUSH
16176: LD_EXP 32
16180: PPUSH
16181: LD_VAR 0 1
16185: PPUSH
16186: CALL 76450 0 2
16190: ST_TO_ADDR
// end ; end ; end ;
16191: PPOPN 2
16193: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16194: LD_INT 0
16196: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16197: LD_VAR 0 2
16201: PPUSH
16202: CALL_OW 255
16206: PUSH
16207: LD_INT 3
16209: EQUAL
16210: PUSH
16211: LD_VAR 0 2
16215: PPUSH
16216: CALL_OW 257
16220: PUSH
16221: LD_INT 3
16223: EQUAL
16224: AND
16225: PUSH
16226: LD_INT 21
16228: PPUSH
16229: CALL_OW 255
16233: PUSH
16234: LD_INT 3
16236: EQUAL
16237: AND
16238: PUSH
16239: LD_INT 21
16241: PPUSH
16242: CALL_OW 302
16246: AND
16247: IFFALSE 16261
// ComEnterUnit ( human , ru_fact ) ;
16249: LD_VAR 0 2
16253: PPUSH
16254: LD_INT 21
16256: PPUSH
16257: CALL_OW 120
// end ;
16261: PPOPN 3
16263: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16264: LD_VAR 0 1
16268: PPUSH
16269: CALL 34944 0 1
// end ; end_of_file
16273: PPOPN 1
16275: END
// every 0 0$1 trigger ruAI = 1 do
16276: LD_EXP 34
16280: PUSH
16281: LD_INT 1
16283: EQUAL
16284: IFFALSE 16396
16286: GO 16288
16288: DISABLE
// begin enable ;
16289: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16290: LD_INT 3
16292: PPUSH
16293: LD_INT 6
16295: PPUSH
16296: LD_INT 9
16298: PPUSH
16299: LD_EXP 31
16303: PPUSH
16304: CALL 13110 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16308: LD_INT 3
16310: PPUSH
16311: LD_INT 4
16313: PPUSH
16314: LD_INT 10
16316: PPUSH
16317: LD_EXP 31
16321: PPUSH
16322: CALL 13110 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16326: LD_INT 3
16328: PPUSH
16329: LD_INT 9
16331: PPUSH
16332: CALL 13945 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16336: LD_INT 3
16338: PPUSH
16339: LD_INT 10
16341: PPUSH
16342: CALL 13945 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16346: LD_INT 3
16348: PPUSH
16349: LD_INT 16
16351: PPUSH
16352: LD_INT 9
16354: PPUSH
16355: LD_INT 91
16357: PPUSH
16358: CALL 13477 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16362: LD_INT 3
16364: PPUSH
16365: LD_INT 17
16367: PPUSH
16368: LD_INT 10
16370: PPUSH
16371: LD_INT 47
16373: PUSH
16374: LD_INT 129
16376: PUSH
16377: LD_INT 135
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: PPUSH
16385: CALL 13477 0 4
// IntBazooka ( 3 ) ;
16389: LD_INT 3
16391: PPUSH
16392: CALL 14272 0 1
// end ;
16396: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
16397: LD_EXP 32
16401: PUSH
16402: LD_INT 3
16404: PUSH
16405: LD_INT 4
16407: PUSH
16408: LD_INT 5
16410: PUSH
16411: LD_INT 6
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: PUSH
16420: LD_OWVAR 67
16424: ARRAY
16425: GREATEREQUAL
16426: IFFALSE 16798
16428: GO 16430
16430: DISABLE
16431: LD_INT 0
16433: PPUSH
16434: PPUSH
16435: PPUSH
16436: PPUSH
// begin enable ;
16437: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16438: LD_ADDR_VAR 0 2
16442: PUSH
16443: LD_EXP 32
16447: PUSH
16448: LD_EXP 33
16452: UNION
16453: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16454: LD_ADDR_EXP 32
16458: PUSH
16459: LD_EXP 32
16463: PUSH
16464: LD_VAR 0 2
16468: DIFF
16469: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16470: LD_ADDR_EXP 33
16474: PUSH
16475: LD_EXP 33
16479: PUSH
16480: LD_VAR 0 2
16484: DIFF
16485: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16486: LD_EXP 21
16490: PUSH
16491: LD_INT 4
16493: GREATEREQUAL
16494: IFFALSE 16512
// attackTactic := rand ( 1 , 2 ) ;
16496: LD_ADDR_EXP 36
16500: PUSH
16501: LD_INT 1
16503: PPUSH
16504: LD_INT 2
16506: PPUSH
16507: CALL_OW 12
16511: ST_TO_ADDR
// path := [ [ 93 , 77 ] , [ 107 , 99 ] , [ 123 , 112 ] , [ 140 , 112 ] ] ;
16512: LD_ADDR_VAR 0 4
16516: PUSH
16517: LD_INT 93
16519: PUSH
16520: LD_INT 77
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: LD_INT 107
16529: PUSH
16530: LD_INT 99
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: LD_INT 123
16539: PUSH
16540: LD_INT 112
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: PUSH
16547: LD_INT 140
16549: PUSH
16550: LD_INT 112
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: EMPTY
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: ST_TO_ADDR
// if attackTactic < 2 then
16563: LD_EXP 36
16567: PUSH
16568: LD_INT 2
16570: LESS
16571: IFFALSE 16602
// path := [ [ 131 , 136 ] , [ 140 , 112 ] ] ;
16573: LD_ADDR_VAR 0 4
16577: PUSH
16578: LD_INT 131
16580: PUSH
16581: LD_INT 136
16583: PUSH
16584: EMPTY
16585: LIST
16586: LIST
16587: PUSH
16588: LD_INT 140
16590: PUSH
16591: LD_INT 112
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16602: LD_INT 10
16604: PPUSH
16605: CALL_OW 302
16609: IFFALSE 16725
// begin for i in tmp do
16611: LD_ADDR_VAR 0 1
16615: PUSH
16616: LD_VAR 0 2
16620: PUSH
16621: FOR_IN
16622: IFFALSE 16665
// if attackTactic < 2 then
16624: LD_EXP 36
16628: PUSH
16629: LD_INT 2
16631: LESS
16632: IFFALSE 16648
// ComEnterUnit ( i , ruteleprt ) else
16634: LD_VAR 0 1
16638: PPUSH
16639: LD_INT 10
16641: PPUSH
16642: CALL_OW 120
16646: GO 16663
// ComMoveXY ( i , 88 , 69 ) ;
16648: LD_VAR 0 1
16652: PPUSH
16653: LD_INT 88
16655: PPUSH
16656: LD_INT 69
16658: PPUSH
16659: CALL_OW 111
16663: GO 16621
16665: POP
16666: POP
// p := 0 ;
16667: LD_ADDR_VAR 0 3
16671: PUSH
16672: LD_INT 0
16674: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16675: LD_INT 70
16677: PPUSH
16678: CALL_OW 67
// p := Inc ( p ) ;
16682: LD_ADDR_VAR 0 3
16686: PUSH
16687: LD_VAR 0 3
16691: PPUSH
16692: CALL 77811 0 1
16696: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
16697: LD_VAR 0 2
16701: PPUSH
16702: LD_INT 60
16704: PUSH
16705: EMPTY
16706: LIST
16707: PPUSH
16708: CALL_OW 72
16712: NOT
16713: PUSH
16714: LD_VAR 0 3
16718: PUSH
16719: LD_INT 30
16721: GREATER
16722: OR
16723: IFFALSE 16675
// end ; repeat wait ( 0 0$1 ) ;
16725: LD_INT 35
16727: PPUSH
16728: CALL_OW 67
// for i in tmp do
16732: LD_ADDR_VAR 0 1
16736: PUSH
16737: LD_VAR 0 2
16741: PUSH
16742: FOR_IN
16743: IFFALSE 16775
// if not IsOk ( i ) then
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 302
16754: NOT
16755: IFFALSE 16773
// tmp := tmp diff i ;
16757: LD_ADDR_VAR 0 2
16761: PUSH
16762: LD_VAR 0 2
16766: PUSH
16767: LD_VAR 0 1
16771: DIFF
16772: ST_TO_ADDR
16773: GO 16742
16775: POP
16776: POP
// AgressiveMove ( tmp , path ) ;
16777: LD_VAR 0 2
16781: PPUSH
16782: LD_VAR 0 4
16786: PPUSH
16787: CALL 79054 0 2
// until not tmp ;
16791: LD_VAR 0 2
16795: NOT
16796: IFFALSE 16725
// end ;
16798: PPOPN 4
16800: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16801: LD_INT 4
16803: PPUSH
16804: CALL_OW 303
16808: IFFALSE 16823
16810: GO 16812
16812: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16813: LD_INT 3
16815: PPUSH
16816: LD_INT 4
16818: PPUSH
16819: CALL 14900 0 2
16823: END
// every 0 0$1 do
16824: GO 16826
16826: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16827: LD_INT 3
16829: PPUSH
16830: LD_INT 91
16832: PPUSH
16833: LD_INT 3
16835: PPUSH
16836: CALL 12875 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16840: LD_INT 3
16842: PPUSH
16843: LD_INT 47
16845: PPUSH
16846: LD_INT 3
16848: PPUSH
16849: CALL 12875 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16853: LD_INT 3
16855: PPUSH
16856: LD_INT 129
16858: PPUSH
16859: LD_INT 3
16861: PPUSH
16862: CALL 12875 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16866: LD_INT 3
16868: PPUSH
16869: LD_INT 3
16871: PPUSH
16872: LD_INT 3
16874: PPUSH
16875: CALL 12875 0 3
// end ;
16879: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16880: LD_INT 22
16882: PUSH
16883: LD_INT 1
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 21
16892: PUSH
16893: LD_INT 3
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL_OW 69
16908: IFFALSE 16977
16910: GO 16912
16912: DISABLE
// begin wait ( 0 0$40 ) ;
16913: LD_INT 1400
16915: PPUSH
16916: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16920: LD_INT 3
16922: PPUSH
16923: LD_INT 21
16925: PPUSH
16926: LD_INT 3
16928: PUSH
16929: LD_INT 4
16931: PUSH
16932: LD_INT 5
16934: PUSH
16935: LD_INT 6
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: PUSH
16944: LD_OWVAR 67
16948: ARRAY
16949: PPUSH
16950: LD_INT 46
16952: PUSH
16953: LD_INT 45
16955: PUSH
16956: LD_INT 44
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: PPUSH
16964: LD_INT 3
16966: PPUSH
16967: LD_INT 3
16969: PPUSH
16970: LD_INT 24
16972: PPUSH
16973: CALL 14125 0 7
// end ;
16977: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16978: LD_EXP 20
16982: PUSH
16983: LD_INT 2
16985: EQUAL
16986: PUSH
16987: LD_INT 21
16989: PPUSH
16990: CALL_OW 255
16994: PUSH
16995: LD_INT 3
16997: EQUAL
16998: AND
16999: PUSH
17000: LD_INT 112
17002: PPUSH
17003: CALL_OW 255
17007: PUSH
17008: LD_INT 3
17010: EQUAL
17011: AND
17012: PUSH
17013: LD_INT 21
17015: PPUSH
17016: CALL_OW 302
17020: AND
17021: PUSH
17022: LD_INT 112
17024: PPUSH
17025: CALL_OW 302
17029: AND
17030: PUSH
17031: LD_INT 22
17033: PUSH
17034: LD_INT 3
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 21
17043: PUSH
17044: LD_INT 2
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: LD_INT 50
17053: PUSH
17054: EMPTY
17055: LIST
17056: PUSH
17057: LD_INT 3
17059: PUSH
17060: LD_INT 58
17062: PUSH
17063: EMPTY
17064: LIST
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: PPUSH
17076: CALL_OW 69
17080: PUSH
17081: LD_INT 18
17083: PPUSH
17084: LD_INT 22
17086: PUSH
17087: LD_INT 3
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: PUSH
17094: LD_INT 21
17096: PUSH
17097: LD_INT 2
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PPUSH
17108: CALL_OW 70
17112: PUSH
17113: LD_INT 0
17115: EQUAL
17116: DIFF
17117: AND
17118: IFFALSE 17244
17120: GO 17122
17122: DISABLE
// begin enable ;
17123: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17124: LD_INT 3
17126: PPUSH
17127: LD_INT 21
17129: PPUSH
17130: LD_INT 3
17132: PUSH
17133: LD_INT 4
17135: PUSH
17136: LD_INT 5
17138: PUSH
17139: LD_INT 6
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: PUSH
17148: LD_OWVAR 67
17152: ARRAY
17153: PPUSH
17154: LD_INT 46
17156: PUSH
17157: LD_INT 45
17159: PUSH
17160: LD_INT 44
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: LIST
17167: PPUSH
17168: LD_INT 3
17170: PPUSH
17171: LD_INT 3
17173: PPUSH
17174: LD_INT 24
17176: PPUSH
17177: CALL 14125 0 7
// if russianTimeLapsers = 0 then
17181: LD_EXP 33
17185: PUSH
17186: LD_INT 0
17188: EQUAL
17189: IFFALSE 17244
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17191: LD_INT 3
17193: PPUSH
17194: LD_INT 112
17196: PPUSH
17197: LD_INT 1
17199: PUSH
17200: LD_INT 2
17202: PUSH
17203: LD_INT 2
17205: PUSH
17206: LD_INT 2
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: PUSH
17215: LD_OWVAR 67
17219: ARRAY
17220: PPUSH
17221: LD_INT 49
17223: PUSH
17224: LD_INT 49
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: PPUSH
17231: LD_INT 3
17233: PPUSH
17234: LD_INT 3
17236: PPUSH
17237: LD_INT 24
17239: PPUSH
17240: CALL 14125 0 7
// end ;
17244: END
// every 0 0$1 trigger arabianMines do var i ;
17245: LD_EXP 37
17249: IFFALSE 17370
17251: GO 17253
17253: DISABLE
17254: LD_INT 0
17256: PPUSH
// begin enable ;
17257: ENABLE
// for i in arabianMines do
17258: LD_ADDR_VAR 0 1
17262: PUSH
17263: LD_EXP 37
17267: PUSH
17268: FOR_IN
17269: IFFALSE 17368
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17271: LD_INT 22
17273: PUSH
17274: LD_INT 1
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 92
17283: PUSH
17284: LD_VAR 0 1
17288: PUSH
17289: LD_INT 1
17291: ARRAY
17292: PUSH
17293: LD_VAR 0 1
17297: PUSH
17298: LD_INT 2
17300: ARRAY
17301: PUSH
17302: LD_INT 3
17304: PUSH
17305: EMPTY
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PPUSH
17315: CALL_OW 69
17319: IFFALSE 17366
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17321: LD_VAR 0 1
17325: PUSH
17326: LD_INT 1
17328: ARRAY
17329: PPUSH
17330: LD_VAR 0 1
17334: PUSH
17335: LD_INT 2
17337: ARRAY
17338: PPUSH
17339: LD_INT 5
17341: PPUSH
17342: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17346: LD_ADDR_EXP 37
17350: PUSH
17351: LD_EXP 37
17355: PPUSH
17356: LD_VAR 0 1
17360: PPUSH
17361: CALL_OW 3
17365: ST_TO_ADDR
// end ; end ;
17366: GO 17268
17368: POP
17369: POP
// end ;
17370: PPOPN 1
17372: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17373: LD_EXP 21
17377: PUSH
17378: LD_INT 4
17380: GREATEREQUAL
17381: PUSH
17382: LD_EXP 22
17386: PUSH
17387: LD_INT 12
17389: MOD
17390: PUSH
17391: LD_INT 0
17393: EQUAL
17394: AND
17395: IFFALSE 17509
17397: GO 17399
17399: DISABLE
17400: LD_INT 0
17402: PPUSH
17403: PPUSH
// begin enable ;
17404: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17405: LD_ADDR_VAR 0 2
17409: PUSH
17410: LD_INT 122
17412: PUSH
17413: LD_INT 142
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: PUSH
17420: LD_INT 101
17422: PUSH
17423: LD_INT 127
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: PUSH
17430: LD_INT 104
17432: PUSH
17433: LD_INT 104
17435: PUSH
17436: EMPTY
17437: LIST
17438: LIST
17439: PUSH
17440: LD_INT 46
17442: PUSH
17443: LD_INT 81
17445: PUSH
17446: EMPTY
17447: LIST
17448: LIST
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: LIST
17454: LIST
17455: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17456: LD_ADDR_VAR 0 1
17460: PUSH
17461: LD_INT 1
17463: PPUSH
17464: LD_INT 4
17466: PPUSH
17467: CALL_OW 12
17471: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17472: LD_INT 10
17474: PPUSH
17475: LD_VAR 0 2
17479: PUSH
17480: LD_VAR 0 1
17484: ARRAY
17485: PUSH
17486: LD_INT 1
17488: ARRAY
17489: PPUSH
17490: LD_VAR 0 2
17494: PUSH
17495: LD_VAR 0 1
17499: ARRAY
17500: PUSH
17501: LD_INT 2
17503: ARRAY
17504: PPUSH
17505: CALL_OW 243
// end ; end_of_file
17509: PPOPN 2
17511: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17512: LD_INT 3
17514: PPUSH
17515: CALL_OW 301
17519: IFFALSE 17740
17521: GO 17523
17523: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
17524: LD_EXP 27
17528: PPUSH
17529: LD_INT 50
17531: PUSH
17532: EMPTY
17533: LIST
17534: PPUSH
17535: CALL_OW 72
17539: IFFALSE 17548
// wait ( 0 0$10 ) ;
17541: LD_INT 350
17543: PPUSH
17544: CALL_OW 67
// DialogueOn ;
17548: CALL_OW 6
// if sciCounter = 0 then
17552: LD_EXP 28
17556: PUSH
17557: LD_INT 0
17559: EQUAL
17560: IFFALSE 17588
// begin Say ( JMM , D7a-JMM-1 ) ;
17562: LD_EXP 1
17566: PPUSH
17567: LD_STRING D7a-JMM-1
17569: PPUSH
17570: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17574: LD_EXP 15
17578: PPUSH
17579: LD_STRING D7a-Pow-1
17581: PPUSH
17582: CALL_OW 94
// end else
17586: GO 17732
// if sciCounter < 6 then
17588: LD_EXP 28
17592: PUSH
17593: LD_INT 6
17595: LESS
17596: IFFALSE 17624
// begin Say ( JMM , D7b-JMM-1 ) ;
17598: LD_EXP 1
17602: PPUSH
17603: LD_STRING D7b-JMM-1
17605: PPUSH
17606: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17610: LD_EXP 15
17614: PPUSH
17615: LD_STRING D7b-Pow-1
17617: PPUSH
17618: CALL_OW 94
// end else
17622: GO 17732
// begin Say ( JMM , D7c-JMM-1 ) ;
17624: LD_EXP 1
17628: PPUSH
17629: LD_STRING D7c-JMM-1
17631: PPUSH
17632: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17636: LD_EXP 15
17640: PPUSH
17641: LD_STRING D7c-Pow-1
17643: PPUSH
17644: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17648: LD_EXP 1
17652: PPUSH
17653: LD_STRING D7d-JMM-1
17655: PPUSH
17656: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17660: LD_EXP 15
17664: PPUSH
17665: LD_STRING D7d-Pow-1
17667: PPUSH
17668: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17672: LD_EXP 1
17676: PPUSH
17677: LD_STRING D7d-JMM-2
17679: PPUSH
17680: CALL_OW 88
// if askSiberite = 1 then
17684: LD_EXP 25
17688: PUSH
17689: LD_INT 1
17691: EQUAL
17692: IFFALSE 17708
// Say ( JMM , D7d-JMM-2a ) else
17694: LD_EXP 1
17698: PPUSH
17699: LD_STRING D7d-JMM-2a
17701: PPUSH
17702: CALL_OW 88
17706: GO 17720
// SayRadio ( Powell , D7d-Pow-2 ) ;
17708: LD_EXP 15
17712: PPUSH
17713: LD_STRING D7d-Pow-2
17715: PPUSH
17716: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17720: LD_EXP 15
17724: PPUSH
17725: LD_STRING D7d-Pow-2a
17727: PPUSH
17728: CALL_OW 94
// end ; DialogueOff ;
17732: CALL_OW 7
// FinishMission ;
17736: CALL 17741 0 0
// end ;
17740: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17741: LD_INT 0
17743: PPUSH
17744: PPUSH
17745: PPUSH
17746: PPUSH
// m1 := false ;
17747: LD_ADDR_VAR 0 2
17751: PUSH
17752: LD_INT 0
17754: ST_TO_ADDR
// m2 := false ;
17755: LD_ADDR_VAR 0 3
17759: PUSH
17760: LD_INT 0
17762: ST_TO_ADDR
// m3 := false ;
17763: LD_ADDR_VAR 0 4
17767: PUSH
17768: LD_INT 0
17770: ST_TO_ADDR
// if not westPathUsed then
17771: LD_EXP 42
17775: NOT
17776: IFFALSE 17785
// SetAchievement ( ACH_PATH ) ;
17778: LD_STRING ACH_PATH
17780: PPUSH
17781: CALL_OW 543
// if not rocketBuilded then
17785: LD_EXP 44
17789: NOT
17790: IFFALSE 17806
// begin wait ( 3 ) ;
17792: LD_INT 3
17794: PPUSH
17795: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17799: LD_STRING ACH_ROCKET
17801: PPUSH
17802: CALL_OW 543
// end ; if tick <= 40 40$00 then
17806: LD_OWVAR 1
17810: PUSH
17811: LD_INT 84000
17813: LESSEQUAL
17814: IFFALSE 17830
// begin wait ( 3 ) ;
17816: LD_INT 3
17818: PPUSH
17819: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17823: LD_STRING ACH_ASPEED_12
17825: PPUSH
17826: CALL_OW 543
// end ; if teleportExplored = 1 then
17830: LD_EXP 26
17834: PUSH
17835: LD_INT 1
17837: EQUAL
17838: IFFALSE 17860
// begin m1 := true ;
17840: LD_ADDR_VAR 0 2
17844: PUSH
17845: LD_INT 1
17847: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17848: LD_STRING Teleport
17850: PPUSH
17851: LD_INT 1
17853: PPUSH
17854: CALL_OW 101
// end else
17858: GO 17871
// AddMedal ( Teleport , - 1 ) ;
17860: LD_STRING Teleport
17862: PPUSH
17863: LD_INT 1
17865: NEG
17866: PPUSH
17867: CALL_OW 101
// if sciCounter > 2 then
17871: LD_EXP 28
17875: PUSH
17876: LD_INT 2
17878: GREATER
17879: IFFALSE 17901
// begin m2 := true ;
17881: LD_ADDR_VAR 0 3
17885: PUSH
17886: LD_INT 1
17888: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17889: LD_STRING Materials
17891: PPUSH
17892: LD_INT 1
17894: PPUSH
17895: CALL_OW 101
// end else
17899: GO 17912
// AddMedal ( Materials , - 1 ) ;
17901: LD_STRING Materials
17903: PPUSH
17904: LD_INT 1
17906: NEG
17907: PPUSH
17908: CALL_OW 101
// if sciCounter >= 6 then
17912: LD_EXP 28
17916: PUSH
17917: LD_INT 6
17919: GREATEREQUAL
17920: IFFALSE 17952
// begin m3 := true ;
17922: LD_ADDR_VAR 0 4
17926: PUSH
17927: LD_INT 1
17929: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17930: LD_STRING Scientists
17932: PPUSH
17933: LD_INT 1
17935: PPUSH
17936: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17940: LD_INT 1
17942: PPUSH
17943: LD_STRING 12_SciDed_1
17945: PPUSH
17946: CALL_OW 39
// end else
17950: GO 17973
// begin AddMedal ( Scientists , - 1 ) ;
17952: LD_STRING Scientists
17954: PPUSH
17955: LD_INT 1
17957: NEG
17958: PPUSH
17959: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17963: LD_INT 0
17965: PPUSH
17966: LD_STRING 12_SciDed_1
17968: PPUSH
17969: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17973: LD_EXP 24
17977: PPUSH
17978: LD_STRING 12_MainDepositFake_1
17980: PPUSH
17981: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
17985: LD_VAR 0 2
17989: PUSH
17990: LD_VAR 0 3
17994: AND
17995: PUSH
17996: LD_VAR 0 4
18000: AND
18001: PUSH
18002: LD_OWVAR 67
18006: PUSH
18007: LD_INT 3
18009: GREATEREQUAL
18010: AND
18011: IFFALSE 18023
// SetAchievementEX ( ACH_AMER , 12 ) ;
18013: LD_STRING ACH_AMER
18015: PPUSH
18016: LD_INT 12
18018: PPUSH
18019: CALL_OW 564
// GiveMedals ( MAIN ) ;
18023: LD_STRING MAIN
18025: PPUSH
18026: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18030: LD_INT 22
18032: PUSH
18033: LD_INT 1
18035: PUSH
18036: EMPTY
18037: LIST
18038: LIST
18039: PUSH
18040: LD_INT 23
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 21
18052: PUSH
18053: LD_INT 1
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 2
18062: PUSH
18063: LD_INT 25
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 25
18075: PUSH
18076: LD_INT 2
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: LD_INT 25
18085: PUSH
18086: LD_INT 3
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: PUSH
18093: LD_INT 25
18095: PUSH
18096: LD_INT 4
18098: PUSH
18099: EMPTY
18100: LIST
18101: LIST
18102: PUSH
18103: LD_INT 25
18105: PUSH
18106: LD_INT 5
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 25
18115: PUSH
18116: LD_INT 8
18118: PUSH
18119: EMPTY
18120: LIST
18121: LIST
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: PUSH
18132: EMPTY
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: PPUSH
18138: CALL_OW 69
18142: PPUSH
18143: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18147: LD_EXP 1
18151: PPUSH
18152: LD_EXP 39
18156: PUSH
18157: LD_STRING JMM
18159: STR
18160: PPUSH
18161: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18165: LD_EXP 7
18169: PPUSH
18170: LD_EXP 39
18174: PUSH
18175: LD_STRING Brown
18177: STR
18178: PPUSH
18179: CALL 12220 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18183: LD_EXP 3
18187: PPUSH
18188: LD_EXP 39
18192: PUSH
18193: LD_STRING Donaldson
18195: STR
18196: PPUSH
18197: CALL 12220 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18201: LD_EXP 4
18205: PPUSH
18206: LD_EXP 39
18210: PUSH
18211: LD_STRING Bobby
18213: STR
18214: PPUSH
18215: CALL 12220 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18219: LD_EXP 5
18223: PPUSH
18224: LD_EXP 39
18228: PUSH
18229: LD_STRING Cyrus
18231: STR
18232: PPUSH
18233: CALL 12220 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18237: LD_EXP 2
18241: PPUSH
18242: LD_EXP 39
18246: PUSH
18247: LD_STRING Lisa
18249: STR
18250: PPUSH
18251: CALL 12220 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18255: LD_EXP 12
18259: PPUSH
18260: LD_EXP 39
18264: PUSH
18265: LD_STRING Frank
18267: STR
18268: PPUSH
18269: CALL 12220 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18273: LD_EXP 13
18277: PPUSH
18278: LD_EXP 39
18282: PUSH
18283: LD_STRING Kikuchi
18285: STR
18286: PPUSH
18287: CALL 12220 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18291: LD_EXP 9
18295: PPUSH
18296: LD_EXP 39
18300: PUSH
18301: LD_STRING Houten
18303: STR
18304: PPUSH
18305: CALL 12220 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18309: LD_EXP 11
18313: PPUSH
18314: LD_EXP 39
18318: PUSH
18319: LD_STRING Gary
18321: STR
18322: PPUSH
18323: CALL 12220 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18327: LD_EXP 10
18331: PPUSH
18332: LD_EXP 39
18336: PUSH
18337: LD_STRING Cornell
18339: STR
18340: PPUSH
18341: CALL 12220 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18345: LD_EXP 6
18349: PPUSH
18350: LD_EXP 39
18354: PUSH
18355: LD_STRING Denis
18357: STR
18358: PPUSH
18359: CALL 12220 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18363: LD_EXP 8
18367: PPUSH
18368: LD_EXP 39
18372: PUSH
18373: LD_STRING Gladstone
18375: STR
18376: PPUSH
18377: CALL 12220 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18381: LD_INT 22
18383: PUSH
18384: LD_INT 1
18386: PUSH
18387: EMPTY
18388: LIST
18389: LIST
18390: PUSH
18391: LD_INT 23
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 21
18403: PUSH
18404: LD_INT 1
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: LD_INT 2
18413: PUSH
18414: LD_INT 25
18416: PUSH
18417: LD_INT 1
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 25
18426: PUSH
18427: LD_INT 2
18429: PUSH
18430: EMPTY
18431: LIST
18432: LIST
18433: PUSH
18434: LD_INT 25
18436: PUSH
18437: LD_INT 3
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 25
18446: PUSH
18447: LD_INT 4
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 25
18456: PUSH
18457: LD_INT 5
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 25
18466: PUSH
18467: LD_INT 8
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: PPUSH
18489: CALL_OW 69
18493: PUSH
18494: LD_EXP 1
18498: PUSH
18499: LD_EXP 7
18503: PUSH
18504: LD_EXP 3
18508: PUSH
18509: LD_EXP 4
18513: PUSH
18514: LD_EXP 5
18518: PUSH
18519: LD_EXP 2
18523: PUSH
18524: LD_EXP 12
18528: PUSH
18529: LD_EXP 8
18533: PUSH
18534: LD_EXP 13
18538: PUSH
18539: LD_EXP 6
18543: PUSH
18544: LD_EXP 9
18548: PUSH
18549: LD_EXP 11
18553: PUSH
18554: LD_EXP 10
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: DIFF
18574: PPUSH
18575: LD_STRING 12_other_survivors
18577: PPUSH
18578: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18582: LD_INT 22
18584: PUSH
18585: LD_INT 1
18587: PUSH
18588: EMPTY
18589: LIST
18590: LIST
18591: PUSH
18592: LD_INT 23
18594: PUSH
18595: LD_INT 2
18597: PUSH
18598: EMPTY
18599: LIST
18600: LIST
18601: PUSH
18602: LD_INT 21
18604: PUSH
18605: LD_INT 1
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: PUSH
18612: LD_INT 2
18614: PUSH
18615: LD_INT 25
18617: PUSH
18618: LD_INT 1
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PUSH
18625: LD_INT 25
18627: PUSH
18628: LD_INT 2
18630: PUSH
18631: EMPTY
18632: LIST
18633: LIST
18634: PUSH
18635: LD_INT 25
18637: PUSH
18638: LD_INT 3
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 25
18647: PUSH
18648: LD_INT 4
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: LD_INT 25
18657: PUSH
18658: LD_INT 5
18660: PUSH
18661: EMPTY
18662: LIST
18663: LIST
18664: PUSH
18665: LD_INT 25
18667: PUSH
18668: LD_INT 8
18670: PUSH
18671: EMPTY
18672: LIST
18673: LIST
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: LIST
18679: LIST
18680: LIST
18681: LIST
18682: LIST
18683: PUSH
18684: EMPTY
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: PPUSH
18690: CALL_OW 69
18694: PPUSH
18695: LD_STRING 12_kurt_squad
18697: PPUSH
18698: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18702: LD_EXP 14
18706: PPUSH
18707: LD_STRING 12_others
18709: PPUSH
18710: CALL_OW 38
// YouWin ;
18714: CALL_OW 103
// end ; end_of_file
18718: LD_VAR 0 1
18722: RET
// every 0 0$01 trigger ruAI do
18723: LD_EXP 34
18727: IFFALSE 19037
18729: GO 18731
18731: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18732: LD_INT 280
18734: PPUSH
18735: CALL_OW 67
// if cratesSpawned < 12 then
18739: LD_EXP 38
18743: PUSH
18744: LD_INT 12
18746: LESS
18747: IFFALSE 18799
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18749: LD_INT 105
18751: PPUSH
18752: LD_INT 350
18754: PPUSH
18755: CALL_OW 12
18759: PPUSH
18760: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18764: LD_INT 3
18766: PPUSH
18767: LD_INT 5
18769: PPUSH
18770: CALL_OW 12
18774: PPUSH
18775: LD_INT 21
18777: PPUSH
18778: LD_INT 1
18780: PPUSH
18781: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18785: LD_ADDR_EXP 38
18789: PUSH
18790: LD_EXP 38
18794: PUSH
18795: LD_INT 1
18797: PLUS
18798: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18799: LD_EXP 38
18803: PUSH
18804: LD_INT 12
18806: GREATEREQUAL
18807: PUSH
18808: LD_EXP 38
18812: PUSH
18813: LD_INT 32
18815: LESS
18816: AND
18817: IFFALSE 18869
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18819: LD_INT 420
18821: PPUSH
18822: LD_INT 700
18824: PPUSH
18825: CALL_OW 12
18829: PPUSH
18830: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18834: LD_INT 3
18836: PPUSH
18837: LD_INT 5
18839: PPUSH
18840: CALL_OW 12
18844: PPUSH
18845: LD_INT 21
18847: PPUSH
18848: LD_INT 1
18850: PPUSH
18851: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18855: LD_ADDR_EXP 38
18859: PUSH
18860: LD_EXP 38
18864: PUSH
18865: LD_INT 1
18867: PLUS
18868: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18869: LD_EXP 38
18873: PUSH
18874: LD_INT 32
18876: GREATEREQUAL
18877: IFFALSE 18951
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18879: LD_INT 21
18881: PPUSH
18882: CALL_OW 435
18886: PUSH
18887: LD_INT 14
18889: LESS
18890: IFFALSE 18901
// wait ( 0 0$10 ) else
18892: LD_INT 350
18894: PPUSH
18895: CALL_OW 67
18899: GO 18916
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18901: LD_INT 1750
18903: PPUSH
18904: LD_INT 3150
18906: PPUSH
18907: CALL_OW 12
18911: PPUSH
18912: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18916: LD_INT 2
18918: PPUSH
18919: LD_INT 5
18921: PPUSH
18922: CALL_OW 12
18926: PPUSH
18927: LD_INT 21
18929: PPUSH
18930: LD_INT 1
18932: PPUSH
18933: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18937: LD_ADDR_EXP 38
18941: PUSH
18942: LD_EXP 38
18946: PUSH
18947: LD_INT 1
18949: PLUS
18950: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18951: LD_EXP 38
18955: PUSH
18956: LD_INT 110
18958: GREATEREQUAL
18959: IFFALSE 19033
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18961: LD_INT 21
18963: PPUSH
18964: CALL_OW 435
18968: PUSH
18969: LD_INT 14
18971: LESS
18972: IFFALSE 18983
// wait ( 0 0$20 ) else
18974: LD_INT 700
18976: PPUSH
18977: CALL_OW 67
18981: GO 18998
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18983: LD_INT 2450
18985: PPUSH
18986: LD_INT 3850
18988: PPUSH
18989: CALL_OW 12
18993: PPUSH
18994: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
18998: LD_INT 1
19000: PPUSH
19001: LD_INT 5
19003: PPUSH
19004: CALL_OW 12
19008: PPUSH
19009: LD_INT 21
19011: PPUSH
19012: LD_INT 1
19014: PPUSH
19015: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19019: LD_ADDR_EXP 38
19023: PUSH
19024: LD_EXP 38
19028: PUSH
19029: LD_INT 1
19031: PLUS
19032: ST_TO_ADDR
// end ; until false ;
19033: LD_INT 0
19035: IFFALSE 18732
// end ; end_of_file end_of_file
19037: END
// export globalGameSaveCounter ; every 0 0$1 do
19038: GO 19040
19040: DISABLE
// begin enable ;
19041: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19042: LD_STRING updateTimer(
19044: PUSH
19045: LD_OWVAR 1
19049: STR
19050: PUSH
19051: LD_STRING );
19053: STR
19054: PPUSH
19055: CALL_OW 559
// end ;
19059: END
// every 0 0$1 do
19060: GO 19062
19062: DISABLE
// begin globalGameSaveCounter := 0 ;
19063: LD_ADDR_EXP 45
19067: PUSH
19068: LD_INT 0
19070: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19071: LD_STRING setGameSaveCounter(0)
19073: PPUSH
19074: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19078: LD_STRING initStreamRollete();
19080: PPUSH
19081: CALL_OW 559
// InitStreamMode ;
19085: CALL 20411 0 0
// DefineStreamItems ( false ) ;
19089: LD_INT 0
19091: PPUSH
19092: CALL 20875 0 1
// end ;
19096: END
// export function SOS_MapStart ( ) ; begin
19097: LD_INT 0
19099: PPUSH
// if streamModeActive then
19100: LD_EXP 46
19104: IFFALSE 19113
// DefineStreamItems ( true ) ;
19106: LD_INT 1
19108: PPUSH
19109: CALL 20875 0 1
// UpdateLuaVariables ( ) ;
19113: CALL 19130 0 0
// UpdateFactoryWaypoints ( ) ;
19117: CALL 33744 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19121: CALL 34001 0 0
// end ;
19125: LD_VAR 0 1
19129: RET
// function UpdateLuaVariables ( ) ; begin
19130: LD_INT 0
19132: PPUSH
// if globalGameSaveCounter then
19133: LD_EXP 45
19137: IFFALSE 19171
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19139: LD_ADDR_EXP 45
19143: PUSH
19144: LD_EXP 45
19148: PPUSH
19149: CALL 77811 0 1
19153: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19154: LD_STRING setGameSaveCounter(
19156: PUSH
19157: LD_EXP 45
19161: STR
19162: PUSH
19163: LD_STRING )
19165: STR
19166: PPUSH
19167: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19171: LD_STRING setGameDifficulty(
19173: PUSH
19174: LD_OWVAR 67
19178: STR
19179: PUSH
19180: LD_STRING )
19182: STR
19183: PPUSH
19184: CALL_OW 559
// end ;
19188: LD_VAR 0 1
19192: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19193: LD_INT 0
19195: PPUSH
// if p2 = stream_mode then
19196: LD_VAR 0 2
19200: PUSH
19201: LD_INT 100
19203: EQUAL
19204: IFFALSE 20207
// begin if not StreamModeActive then
19206: LD_EXP 46
19210: NOT
19211: IFFALSE 19221
// StreamModeActive := true ;
19213: LD_ADDR_EXP 46
19217: PUSH
19218: LD_INT 1
19220: ST_TO_ADDR
// if p3 = 0 then
19221: LD_VAR 0 3
19225: PUSH
19226: LD_INT 0
19228: EQUAL
19229: IFFALSE 19235
// InitStreamMode ;
19231: CALL 20411 0 0
// if p3 = 1 then
19235: LD_VAR 0 3
19239: PUSH
19240: LD_INT 1
19242: EQUAL
19243: IFFALSE 19253
// sRocket := true ;
19245: LD_ADDR_EXP 51
19249: PUSH
19250: LD_INT 1
19252: ST_TO_ADDR
// if p3 = 2 then
19253: LD_VAR 0 3
19257: PUSH
19258: LD_INT 2
19260: EQUAL
19261: IFFALSE 19271
// sSpeed := true ;
19263: LD_ADDR_EXP 50
19267: PUSH
19268: LD_INT 1
19270: ST_TO_ADDR
// if p3 = 3 then
19271: LD_VAR 0 3
19275: PUSH
19276: LD_INT 3
19278: EQUAL
19279: IFFALSE 19289
// sEngine := true ;
19281: LD_ADDR_EXP 52
19285: PUSH
19286: LD_INT 1
19288: ST_TO_ADDR
// if p3 = 4 then
19289: LD_VAR 0 3
19293: PUSH
19294: LD_INT 4
19296: EQUAL
19297: IFFALSE 19307
// sSpec := true ;
19299: LD_ADDR_EXP 49
19303: PUSH
19304: LD_INT 1
19306: ST_TO_ADDR
// if p3 = 5 then
19307: LD_VAR 0 3
19311: PUSH
19312: LD_INT 5
19314: EQUAL
19315: IFFALSE 19325
// sLevel := true ;
19317: LD_ADDR_EXP 53
19321: PUSH
19322: LD_INT 1
19324: ST_TO_ADDR
// if p3 = 6 then
19325: LD_VAR 0 3
19329: PUSH
19330: LD_INT 6
19332: EQUAL
19333: IFFALSE 19343
// sArmoury := true ;
19335: LD_ADDR_EXP 54
19339: PUSH
19340: LD_INT 1
19342: ST_TO_ADDR
// if p3 = 7 then
19343: LD_VAR 0 3
19347: PUSH
19348: LD_INT 7
19350: EQUAL
19351: IFFALSE 19361
// sRadar := true ;
19353: LD_ADDR_EXP 55
19357: PUSH
19358: LD_INT 1
19360: ST_TO_ADDR
// if p3 = 8 then
19361: LD_VAR 0 3
19365: PUSH
19366: LD_INT 8
19368: EQUAL
19369: IFFALSE 19379
// sBunker := true ;
19371: LD_ADDR_EXP 56
19375: PUSH
19376: LD_INT 1
19378: ST_TO_ADDR
// if p3 = 9 then
19379: LD_VAR 0 3
19383: PUSH
19384: LD_INT 9
19386: EQUAL
19387: IFFALSE 19397
// sHack := true ;
19389: LD_ADDR_EXP 57
19393: PUSH
19394: LD_INT 1
19396: ST_TO_ADDR
// if p3 = 10 then
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 10
19404: EQUAL
19405: IFFALSE 19415
// sFire := true ;
19407: LD_ADDR_EXP 58
19411: PUSH
19412: LD_INT 1
19414: ST_TO_ADDR
// if p3 = 11 then
19415: LD_VAR 0 3
19419: PUSH
19420: LD_INT 11
19422: EQUAL
19423: IFFALSE 19433
// sRefresh := true ;
19425: LD_ADDR_EXP 59
19429: PUSH
19430: LD_INT 1
19432: ST_TO_ADDR
// if p3 = 12 then
19433: LD_VAR 0 3
19437: PUSH
19438: LD_INT 12
19440: EQUAL
19441: IFFALSE 19451
// sExp := true ;
19443: LD_ADDR_EXP 60
19447: PUSH
19448: LD_INT 1
19450: ST_TO_ADDR
// if p3 = 13 then
19451: LD_VAR 0 3
19455: PUSH
19456: LD_INT 13
19458: EQUAL
19459: IFFALSE 19469
// sDepot := true ;
19461: LD_ADDR_EXP 61
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
// if p3 = 14 then
19469: LD_VAR 0 3
19473: PUSH
19474: LD_INT 14
19476: EQUAL
19477: IFFALSE 19487
// sFlag := true ;
19479: LD_ADDR_EXP 62
19483: PUSH
19484: LD_INT 1
19486: ST_TO_ADDR
// if p3 = 15 then
19487: LD_VAR 0 3
19491: PUSH
19492: LD_INT 15
19494: EQUAL
19495: IFFALSE 19505
// sKamikadze := true ;
19497: LD_ADDR_EXP 70
19501: PUSH
19502: LD_INT 1
19504: ST_TO_ADDR
// if p3 = 16 then
19505: LD_VAR 0 3
19509: PUSH
19510: LD_INT 16
19512: EQUAL
19513: IFFALSE 19523
// sTroll := true ;
19515: LD_ADDR_EXP 71
19519: PUSH
19520: LD_INT 1
19522: ST_TO_ADDR
// if p3 = 17 then
19523: LD_VAR 0 3
19527: PUSH
19528: LD_INT 17
19530: EQUAL
19531: IFFALSE 19541
// sSlow := true ;
19533: LD_ADDR_EXP 72
19537: PUSH
19538: LD_INT 1
19540: ST_TO_ADDR
// if p3 = 18 then
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 18
19548: EQUAL
19549: IFFALSE 19559
// sLack := true ;
19551: LD_ADDR_EXP 73
19555: PUSH
19556: LD_INT 1
19558: ST_TO_ADDR
// if p3 = 19 then
19559: LD_VAR 0 3
19563: PUSH
19564: LD_INT 19
19566: EQUAL
19567: IFFALSE 19577
// sTank := true ;
19569: LD_ADDR_EXP 75
19573: PUSH
19574: LD_INT 1
19576: ST_TO_ADDR
// if p3 = 20 then
19577: LD_VAR 0 3
19581: PUSH
19582: LD_INT 20
19584: EQUAL
19585: IFFALSE 19595
// sRemote := true ;
19587: LD_ADDR_EXP 76
19591: PUSH
19592: LD_INT 1
19594: ST_TO_ADDR
// if p3 = 21 then
19595: LD_VAR 0 3
19599: PUSH
19600: LD_INT 21
19602: EQUAL
19603: IFFALSE 19613
// sPowell := true ;
19605: LD_ADDR_EXP 77
19609: PUSH
19610: LD_INT 1
19612: ST_TO_ADDR
// if p3 = 22 then
19613: LD_VAR 0 3
19617: PUSH
19618: LD_INT 22
19620: EQUAL
19621: IFFALSE 19631
// sTeleport := true ;
19623: LD_ADDR_EXP 80
19627: PUSH
19628: LD_INT 1
19630: ST_TO_ADDR
// if p3 = 23 then
19631: LD_VAR 0 3
19635: PUSH
19636: LD_INT 23
19638: EQUAL
19639: IFFALSE 19649
// sOilTower := true ;
19641: LD_ADDR_EXP 82
19645: PUSH
19646: LD_INT 1
19648: ST_TO_ADDR
// if p3 = 24 then
19649: LD_VAR 0 3
19653: PUSH
19654: LD_INT 24
19656: EQUAL
19657: IFFALSE 19667
// sShovel := true ;
19659: LD_ADDR_EXP 83
19663: PUSH
19664: LD_INT 1
19666: ST_TO_ADDR
// if p3 = 25 then
19667: LD_VAR 0 3
19671: PUSH
19672: LD_INT 25
19674: EQUAL
19675: IFFALSE 19685
// sSheik := true ;
19677: LD_ADDR_EXP 84
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// if p3 = 26 then
19685: LD_VAR 0 3
19689: PUSH
19690: LD_INT 26
19692: EQUAL
19693: IFFALSE 19703
// sEarthquake := true ;
19695: LD_ADDR_EXP 86
19699: PUSH
19700: LD_INT 1
19702: ST_TO_ADDR
// if p3 = 27 then
19703: LD_VAR 0 3
19707: PUSH
19708: LD_INT 27
19710: EQUAL
19711: IFFALSE 19721
// sAI := true ;
19713: LD_ADDR_EXP 87
19717: PUSH
19718: LD_INT 1
19720: ST_TO_ADDR
// if p3 = 28 then
19721: LD_VAR 0 3
19725: PUSH
19726: LD_INT 28
19728: EQUAL
19729: IFFALSE 19739
// sCargo := true ;
19731: LD_ADDR_EXP 90
19735: PUSH
19736: LD_INT 1
19738: ST_TO_ADDR
// if p3 = 29 then
19739: LD_VAR 0 3
19743: PUSH
19744: LD_INT 29
19746: EQUAL
19747: IFFALSE 19757
// sDLaser := true ;
19749: LD_ADDR_EXP 91
19753: PUSH
19754: LD_INT 1
19756: ST_TO_ADDR
// if p3 = 30 then
19757: LD_VAR 0 3
19761: PUSH
19762: LD_INT 30
19764: EQUAL
19765: IFFALSE 19775
// sExchange := true ;
19767: LD_ADDR_EXP 92
19771: PUSH
19772: LD_INT 1
19774: ST_TO_ADDR
// if p3 = 31 then
19775: LD_VAR 0 3
19779: PUSH
19780: LD_INT 31
19782: EQUAL
19783: IFFALSE 19793
// sFac := true ;
19785: LD_ADDR_EXP 93
19789: PUSH
19790: LD_INT 1
19792: ST_TO_ADDR
// if p3 = 32 then
19793: LD_VAR 0 3
19797: PUSH
19798: LD_INT 32
19800: EQUAL
19801: IFFALSE 19811
// sPower := true ;
19803: LD_ADDR_EXP 94
19807: PUSH
19808: LD_INT 1
19810: ST_TO_ADDR
// if p3 = 33 then
19811: LD_VAR 0 3
19815: PUSH
19816: LD_INT 33
19818: EQUAL
19819: IFFALSE 19829
// sRandom := true ;
19821: LD_ADDR_EXP 95
19825: PUSH
19826: LD_INT 1
19828: ST_TO_ADDR
// if p3 = 34 then
19829: LD_VAR 0 3
19833: PUSH
19834: LD_INT 34
19836: EQUAL
19837: IFFALSE 19847
// sShield := true ;
19839: LD_ADDR_EXP 96
19843: PUSH
19844: LD_INT 1
19846: ST_TO_ADDR
// if p3 = 35 then
19847: LD_VAR 0 3
19851: PUSH
19852: LD_INT 35
19854: EQUAL
19855: IFFALSE 19865
// sTime := true ;
19857: LD_ADDR_EXP 97
19861: PUSH
19862: LD_INT 1
19864: ST_TO_ADDR
// if p3 = 36 then
19865: LD_VAR 0 3
19869: PUSH
19870: LD_INT 36
19872: EQUAL
19873: IFFALSE 19883
// sTools := true ;
19875: LD_ADDR_EXP 98
19879: PUSH
19880: LD_INT 1
19882: ST_TO_ADDR
// if p3 = 101 then
19883: LD_VAR 0 3
19887: PUSH
19888: LD_INT 101
19890: EQUAL
19891: IFFALSE 19901
// sSold := true ;
19893: LD_ADDR_EXP 63
19897: PUSH
19898: LD_INT 1
19900: ST_TO_ADDR
// if p3 = 102 then
19901: LD_VAR 0 3
19905: PUSH
19906: LD_INT 102
19908: EQUAL
19909: IFFALSE 19919
// sDiff := true ;
19911: LD_ADDR_EXP 64
19915: PUSH
19916: LD_INT 1
19918: ST_TO_ADDR
// if p3 = 103 then
19919: LD_VAR 0 3
19923: PUSH
19924: LD_INT 103
19926: EQUAL
19927: IFFALSE 19937
// sFog := true ;
19929: LD_ADDR_EXP 67
19933: PUSH
19934: LD_INT 1
19936: ST_TO_ADDR
// if p3 = 104 then
19937: LD_VAR 0 3
19941: PUSH
19942: LD_INT 104
19944: EQUAL
19945: IFFALSE 19955
// sReset := true ;
19947: LD_ADDR_EXP 68
19951: PUSH
19952: LD_INT 1
19954: ST_TO_ADDR
// if p3 = 105 then
19955: LD_VAR 0 3
19959: PUSH
19960: LD_INT 105
19962: EQUAL
19963: IFFALSE 19973
// sSun := true ;
19965: LD_ADDR_EXP 69
19969: PUSH
19970: LD_INT 1
19972: ST_TO_ADDR
// if p3 = 106 then
19973: LD_VAR 0 3
19977: PUSH
19978: LD_INT 106
19980: EQUAL
19981: IFFALSE 19991
// sTiger := true ;
19983: LD_ADDR_EXP 65
19987: PUSH
19988: LD_INT 1
19990: ST_TO_ADDR
// if p3 = 107 then
19991: LD_VAR 0 3
19995: PUSH
19996: LD_INT 107
19998: EQUAL
19999: IFFALSE 20009
// sBomb := true ;
20001: LD_ADDR_EXP 66
20005: PUSH
20006: LD_INT 1
20008: ST_TO_ADDR
// if p3 = 108 then
20009: LD_VAR 0 3
20013: PUSH
20014: LD_INT 108
20016: EQUAL
20017: IFFALSE 20027
// sWound := true ;
20019: LD_ADDR_EXP 74
20023: PUSH
20024: LD_INT 1
20026: ST_TO_ADDR
// if p3 = 109 then
20027: LD_VAR 0 3
20031: PUSH
20032: LD_INT 109
20034: EQUAL
20035: IFFALSE 20045
// sBetray := true ;
20037: LD_ADDR_EXP 78
20041: PUSH
20042: LD_INT 1
20044: ST_TO_ADDR
// if p3 = 110 then
20045: LD_VAR 0 3
20049: PUSH
20050: LD_INT 110
20052: EQUAL
20053: IFFALSE 20063
// sContamin := true ;
20055: LD_ADDR_EXP 79
20059: PUSH
20060: LD_INT 1
20062: ST_TO_ADDR
// if p3 = 111 then
20063: LD_VAR 0 3
20067: PUSH
20068: LD_INT 111
20070: EQUAL
20071: IFFALSE 20081
// sOil := true ;
20073: LD_ADDR_EXP 81
20077: PUSH
20078: LD_INT 1
20080: ST_TO_ADDR
// if p3 = 112 then
20081: LD_VAR 0 3
20085: PUSH
20086: LD_INT 112
20088: EQUAL
20089: IFFALSE 20099
// sStu := true ;
20091: LD_ADDR_EXP 85
20095: PUSH
20096: LD_INT 1
20098: ST_TO_ADDR
// if p3 = 113 then
20099: LD_VAR 0 3
20103: PUSH
20104: LD_INT 113
20106: EQUAL
20107: IFFALSE 20117
// sBazooka := true ;
20109: LD_ADDR_EXP 88
20113: PUSH
20114: LD_INT 1
20116: ST_TO_ADDR
// if p3 = 114 then
20117: LD_VAR 0 3
20121: PUSH
20122: LD_INT 114
20124: EQUAL
20125: IFFALSE 20135
// sMortar := true ;
20127: LD_ADDR_EXP 89
20131: PUSH
20132: LD_INT 1
20134: ST_TO_ADDR
// if p3 = 115 then
20135: LD_VAR 0 3
20139: PUSH
20140: LD_INT 115
20142: EQUAL
20143: IFFALSE 20153
// sRanger := true ;
20145: LD_ADDR_EXP 99
20149: PUSH
20150: LD_INT 1
20152: ST_TO_ADDR
// if p3 = 116 then
20153: LD_VAR 0 3
20157: PUSH
20158: LD_INT 116
20160: EQUAL
20161: IFFALSE 20171
// sComputer := true ;
20163: LD_ADDR_EXP 100
20167: PUSH
20168: LD_INT 1
20170: ST_TO_ADDR
// if p3 = 117 then
20171: LD_VAR 0 3
20175: PUSH
20176: LD_INT 117
20178: EQUAL
20179: IFFALSE 20189
// s30 := true ;
20181: LD_ADDR_EXP 101
20185: PUSH
20186: LD_INT 1
20188: ST_TO_ADDR
// if p3 = 118 then
20189: LD_VAR 0 3
20193: PUSH
20194: LD_INT 118
20196: EQUAL
20197: IFFALSE 20207
// s60 := true ;
20199: LD_ADDR_EXP 102
20203: PUSH
20204: LD_INT 1
20206: ST_TO_ADDR
// end ; if p2 = hack_mode then
20207: LD_VAR 0 2
20211: PUSH
20212: LD_INT 101
20214: EQUAL
20215: IFFALSE 20343
// begin case p3 of 1 :
20217: LD_VAR 0 3
20221: PUSH
20222: LD_INT 1
20224: DOUBLE
20225: EQUAL
20226: IFTRUE 20230
20228: GO 20237
20230: POP
// hHackUnlimitedResources ; 2 :
20231: CALL 32490 0 0
20235: GO 20343
20237: LD_INT 2
20239: DOUBLE
20240: EQUAL
20241: IFTRUE 20245
20243: GO 20252
20245: POP
// hHackSetLevel10 ; 3 :
20246: CALL 32623 0 0
20250: GO 20343
20252: LD_INT 3
20254: DOUBLE
20255: EQUAL
20256: IFTRUE 20260
20258: GO 20267
20260: POP
// hHackSetLevel10YourUnits ; 4 :
20261: CALL 32708 0 0
20265: GO 20343
20267: LD_INT 4
20269: DOUBLE
20270: EQUAL
20271: IFTRUE 20275
20273: GO 20282
20275: POP
// hHackInvincible ; 5 :
20276: CALL 33156 0 0
20280: GO 20343
20282: LD_INT 5
20284: DOUBLE
20285: EQUAL
20286: IFTRUE 20290
20288: GO 20297
20290: POP
// hHackInvisible ; 6 :
20291: CALL 33267 0 0
20295: GO 20343
20297: LD_INT 6
20299: DOUBLE
20300: EQUAL
20301: IFTRUE 20305
20303: GO 20312
20305: POP
// hHackChangeYourSide ; 7 :
20306: CALL 33324 0 0
20310: GO 20343
20312: LD_INT 7
20314: DOUBLE
20315: EQUAL
20316: IFTRUE 20320
20318: GO 20327
20320: POP
// hHackChangeUnitSide ; 8 :
20321: CALL 33366 0 0
20325: GO 20343
20327: LD_INT 8
20329: DOUBLE
20330: EQUAL
20331: IFTRUE 20335
20333: GO 20342
20335: POP
// hHackFog ; end ;
20336: CALL 33467 0 0
20340: GO 20343
20342: POP
// end ; if p2 = game_save_mode then
20343: LD_VAR 0 2
20347: PUSH
20348: LD_INT 102
20350: EQUAL
20351: IFFALSE 20406
// begin if p3 = 1 then
20353: LD_VAR 0 3
20357: PUSH
20358: LD_INT 1
20360: EQUAL
20361: IFFALSE 20373
// globalGameSaveCounter := p4 ;
20363: LD_ADDR_EXP 45
20367: PUSH
20368: LD_VAR 0 4
20372: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20373: LD_VAR 0 3
20377: PUSH
20378: LD_INT 2
20380: EQUAL
20381: PUSH
20382: LD_EXP 45
20386: AND
20387: IFFALSE 20406
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20389: LD_STRING setGameSaveCounter(
20391: PUSH
20392: LD_EXP 45
20396: STR
20397: PUSH
20398: LD_STRING )
20400: STR
20401: PPUSH
20402: CALL_OW 559
// end ; end ;
20406: LD_VAR 0 7
20410: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20411: LD_INT 0
20413: PPUSH
// streamModeActive := false ;
20414: LD_ADDR_EXP 46
20418: PUSH
20419: LD_INT 0
20421: ST_TO_ADDR
// normalCounter := 36 ;
20422: LD_ADDR_EXP 47
20426: PUSH
20427: LD_INT 36
20429: ST_TO_ADDR
// hardcoreCounter := 18 ;
20430: LD_ADDR_EXP 48
20434: PUSH
20435: LD_INT 18
20437: ST_TO_ADDR
// sRocket := false ;
20438: LD_ADDR_EXP 51
20442: PUSH
20443: LD_INT 0
20445: ST_TO_ADDR
// sSpeed := false ;
20446: LD_ADDR_EXP 50
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
// sEngine := false ;
20454: LD_ADDR_EXP 52
20458: PUSH
20459: LD_INT 0
20461: ST_TO_ADDR
// sSpec := false ;
20462: LD_ADDR_EXP 49
20466: PUSH
20467: LD_INT 0
20469: ST_TO_ADDR
// sLevel := false ;
20470: LD_ADDR_EXP 53
20474: PUSH
20475: LD_INT 0
20477: ST_TO_ADDR
// sArmoury := false ;
20478: LD_ADDR_EXP 54
20482: PUSH
20483: LD_INT 0
20485: ST_TO_ADDR
// sRadar := false ;
20486: LD_ADDR_EXP 55
20490: PUSH
20491: LD_INT 0
20493: ST_TO_ADDR
// sBunker := false ;
20494: LD_ADDR_EXP 56
20498: PUSH
20499: LD_INT 0
20501: ST_TO_ADDR
// sHack := false ;
20502: LD_ADDR_EXP 57
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// sFire := false ;
20510: LD_ADDR_EXP 58
20514: PUSH
20515: LD_INT 0
20517: ST_TO_ADDR
// sRefresh := false ;
20518: LD_ADDR_EXP 59
20522: PUSH
20523: LD_INT 0
20525: ST_TO_ADDR
// sExp := false ;
20526: LD_ADDR_EXP 60
20530: PUSH
20531: LD_INT 0
20533: ST_TO_ADDR
// sDepot := false ;
20534: LD_ADDR_EXP 61
20538: PUSH
20539: LD_INT 0
20541: ST_TO_ADDR
// sFlag := false ;
20542: LD_ADDR_EXP 62
20546: PUSH
20547: LD_INT 0
20549: ST_TO_ADDR
// sKamikadze := false ;
20550: LD_ADDR_EXP 70
20554: PUSH
20555: LD_INT 0
20557: ST_TO_ADDR
// sTroll := false ;
20558: LD_ADDR_EXP 71
20562: PUSH
20563: LD_INT 0
20565: ST_TO_ADDR
// sSlow := false ;
20566: LD_ADDR_EXP 72
20570: PUSH
20571: LD_INT 0
20573: ST_TO_ADDR
// sLack := false ;
20574: LD_ADDR_EXP 73
20578: PUSH
20579: LD_INT 0
20581: ST_TO_ADDR
// sTank := false ;
20582: LD_ADDR_EXP 75
20586: PUSH
20587: LD_INT 0
20589: ST_TO_ADDR
// sRemote := false ;
20590: LD_ADDR_EXP 76
20594: PUSH
20595: LD_INT 0
20597: ST_TO_ADDR
// sPowell := false ;
20598: LD_ADDR_EXP 77
20602: PUSH
20603: LD_INT 0
20605: ST_TO_ADDR
// sTeleport := false ;
20606: LD_ADDR_EXP 80
20610: PUSH
20611: LD_INT 0
20613: ST_TO_ADDR
// sOilTower := false ;
20614: LD_ADDR_EXP 82
20618: PUSH
20619: LD_INT 0
20621: ST_TO_ADDR
// sShovel := false ;
20622: LD_ADDR_EXP 83
20626: PUSH
20627: LD_INT 0
20629: ST_TO_ADDR
// sSheik := false ;
20630: LD_ADDR_EXP 84
20634: PUSH
20635: LD_INT 0
20637: ST_TO_ADDR
// sEarthquake := false ;
20638: LD_ADDR_EXP 86
20642: PUSH
20643: LD_INT 0
20645: ST_TO_ADDR
// sAI := false ;
20646: LD_ADDR_EXP 87
20650: PUSH
20651: LD_INT 0
20653: ST_TO_ADDR
// sCargo := false ;
20654: LD_ADDR_EXP 90
20658: PUSH
20659: LD_INT 0
20661: ST_TO_ADDR
// sDLaser := false ;
20662: LD_ADDR_EXP 91
20666: PUSH
20667: LD_INT 0
20669: ST_TO_ADDR
// sExchange := false ;
20670: LD_ADDR_EXP 92
20674: PUSH
20675: LD_INT 0
20677: ST_TO_ADDR
// sFac := false ;
20678: LD_ADDR_EXP 93
20682: PUSH
20683: LD_INT 0
20685: ST_TO_ADDR
// sPower := false ;
20686: LD_ADDR_EXP 94
20690: PUSH
20691: LD_INT 0
20693: ST_TO_ADDR
// sRandom := false ;
20694: LD_ADDR_EXP 95
20698: PUSH
20699: LD_INT 0
20701: ST_TO_ADDR
// sShield := false ;
20702: LD_ADDR_EXP 96
20706: PUSH
20707: LD_INT 0
20709: ST_TO_ADDR
// sTime := false ;
20710: LD_ADDR_EXP 97
20714: PUSH
20715: LD_INT 0
20717: ST_TO_ADDR
// sTools := false ;
20718: LD_ADDR_EXP 98
20722: PUSH
20723: LD_INT 0
20725: ST_TO_ADDR
// sSold := false ;
20726: LD_ADDR_EXP 63
20730: PUSH
20731: LD_INT 0
20733: ST_TO_ADDR
// sDiff := false ;
20734: LD_ADDR_EXP 64
20738: PUSH
20739: LD_INT 0
20741: ST_TO_ADDR
// sFog := false ;
20742: LD_ADDR_EXP 67
20746: PUSH
20747: LD_INT 0
20749: ST_TO_ADDR
// sReset := false ;
20750: LD_ADDR_EXP 68
20754: PUSH
20755: LD_INT 0
20757: ST_TO_ADDR
// sSun := false ;
20758: LD_ADDR_EXP 69
20762: PUSH
20763: LD_INT 0
20765: ST_TO_ADDR
// sTiger := false ;
20766: LD_ADDR_EXP 65
20770: PUSH
20771: LD_INT 0
20773: ST_TO_ADDR
// sBomb := false ;
20774: LD_ADDR_EXP 66
20778: PUSH
20779: LD_INT 0
20781: ST_TO_ADDR
// sWound := false ;
20782: LD_ADDR_EXP 74
20786: PUSH
20787: LD_INT 0
20789: ST_TO_ADDR
// sBetray := false ;
20790: LD_ADDR_EXP 78
20794: PUSH
20795: LD_INT 0
20797: ST_TO_ADDR
// sContamin := false ;
20798: LD_ADDR_EXP 79
20802: PUSH
20803: LD_INT 0
20805: ST_TO_ADDR
// sOil := false ;
20806: LD_ADDR_EXP 81
20810: PUSH
20811: LD_INT 0
20813: ST_TO_ADDR
// sStu := false ;
20814: LD_ADDR_EXP 85
20818: PUSH
20819: LD_INT 0
20821: ST_TO_ADDR
// sBazooka := false ;
20822: LD_ADDR_EXP 88
20826: PUSH
20827: LD_INT 0
20829: ST_TO_ADDR
// sMortar := false ;
20830: LD_ADDR_EXP 89
20834: PUSH
20835: LD_INT 0
20837: ST_TO_ADDR
// sRanger := false ;
20838: LD_ADDR_EXP 99
20842: PUSH
20843: LD_INT 0
20845: ST_TO_ADDR
// sComputer := false ;
20846: LD_ADDR_EXP 100
20850: PUSH
20851: LD_INT 0
20853: ST_TO_ADDR
// s30 := false ;
20854: LD_ADDR_EXP 101
20858: PUSH
20859: LD_INT 0
20861: ST_TO_ADDR
// s60 := false ;
20862: LD_ADDR_EXP 102
20866: PUSH
20867: LD_INT 0
20869: ST_TO_ADDR
// end ;
20870: LD_VAR 0 1
20874: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20875: LD_INT 0
20877: PPUSH
20878: PPUSH
20879: PPUSH
20880: PPUSH
20881: PPUSH
20882: PPUSH
20883: PPUSH
// result := [ ] ;
20884: LD_ADDR_VAR 0 2
20888: PUSH
20889: EMPTY
20890: ST_TO_ADDR
// if campaign_id = 1 then
20891: LD_OWVAR 69
20895: PUSH
20896: LD_INT 1
20898: EQUAL
20899: IFFALSE 24065
// begin case mission_number of 1 :
20901: LD_OWVAR 70
20905: PUSH
20906: LD_INT 1
20908: DOUBLE
20909: EQUAL
20910: IFTRUE 20914
20912: GO 20990
20914: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20915: LD_ADDR_VAR 0 2
20919: PUSH
20920: LD_INT 2
20922: PUSH
20923: LD_INT 4
20925: PUSH
20926: LD_INT 11
20928: PUSH
20929: LD_INT 12
20931: PUSH
20932: LD_INT 15
20934: PUSH
20935: LD_INT 16
20937: PUSH
20938: LD_INT 22
20940: PUSH
20941: LD_INT 23
20943: PUSH
20944: LD_INT 26
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: LIST
20951: LIST
20952: LIST
20953: LIST
20954: LIST
20955: LIST
20956: LIST
20957: PUSH
20958: LD_INT 101
20960: PUSH
20961: LD_INT 102
20963: PUSH
20964: LD_INT 106
20966: PUSH
20967: LD_INT 116
20969: PUSH
20970: LD_INT 117
20972: PUSH
20973: LD_INT 118
20975: PUSH
20976: EMPTY
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: ST_TO_ADDR
20988: GO 24063
20990: LD_INT 2
20992: DOUBLE
20993: EQUAL
20994: IFTRUE 20998
20996: GO 21082
20998: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20999: LD_ADDR_VAR 0 2
21003: PUSH
21004: LD_INT 2
21006: PUSH
21007: LD_INT 4
21009: PUSH
21010: LD_INT 11
21012: PUSH
21013: LD_INT 12
21015: PUSH
21016: LD_INT 15
21018: PUSH
21019: LD_INT 16
21021: PUSH
21022: LD_INT 22
21024: PUSH
21025: LD_INT 23
21027: PUSH
21028: LD_INT 26
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: PUSH
21042: LD_INT 101
21044: PUSH
21045: LD_INT 102
21047: PUSH
21048: LD_INT 105
21050: PUSH
21051: LD_INT 106
21053: PUSH
21054: LD_INT 108
21056: PUSH
21057: LD_INT 116
21059: PUSH
21060: LD_INT 117
21062: PUSH
21063: LD_INT 118
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: LIST
21070: LIST
21071: LIST
21072: LIST
21073: LIST
21074: LIST
21075: PUSH
21076: EMPTY
21077: LIST
21078: LIST
21079: ST_TO_ADDR
21080: GO 24063
21082: LD_INT 3
21084: DOUBLE
21085: EQUAL
21086: IFTRUE 21090
21088: GO 21178
21090: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21091: LD_ADDR_VAR 0 2
21095: PUSH
21096: LD_INT 2
21098: PUSH
21099: LD_INT 4
21101: PUSH
21102: LD_INT 5
21104: PUSH
21105: LD_INT 11
21107: PUSH
21108: LD_INT 12
21110: PUSH
21111: LD_INT 15
21113: PUSH
21114: LD_INT 16
21116: PUSH
21117: LD_INT 22
21119: PUSH
21120: LD_INT 26
21122: PUSH
21123: LD_INT 36
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 101
21140: PUSH
21141: LD_INT 102
21143: PUSH
21144: LD_INT 105
21146: PUSH
21147: LD_INT 106
21149: PUSH
21150: LD_INT 108
21152: PUSH
21153: LD_INT 116
21155: PUSH
21156: LD_INT 117
21158: PUSH
21159: LD_INT 118
21161: PUSH
21162: EMPTY
21163: LIST
21164: LIST
21165: LIST
21166: LIST
21167: LIST
21168: LIST
21169: LIST
21170: LIST
21171: PUSH
21172: EMPTY
21173: LIST
21174: LIST
21175: ST_TO_ADDR
21176: GO 24063
21178: LD_INT 4
21180: DOUBLE
21181: EQUAL
21182: IFTRUE 21186
21184: GO 21282
21186: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21187: LD_ADDR_VAR 0 2
21191: PUSH
21192: LD_INT 2
21194: PUSH
21195: LD_INT 4
21197: PUSH
21198: LD_INT 5
21200: PUSH
21201: LD_INT 8
21203: PUSH
21204: LD_INT 11
21206: PUSH
21207: LD_INT 12
21209: PUSH
21210: LD_INT 15
21212: PUSH
21213: LD_INT 16
21215: PUSH
21216: LD_INT 22
21218: PUSH
21219: LD_INT 23
21221: PUSH
21222: LD_INT 26
21224: PUSH
21225: LD_INT 36
21227: PUSH
21228: EMPTY
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 101
21244: PUSH
21245: LD_INT 102
21247: PUSH
21248: LD_INT 105
21250: PUSH
21251: LD_INT 106
21253: PUSH
21254: LD_INT 108
21256: PUSH
21257: LD_INT 116
21259: PUSH
21260: LD_INT 117
21262: PUSH
21263: LD_INT 118
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: LIST
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: ST_TO_ADDR
21280: GO 24063
21282: LD_INT 5
21284: DOUBLE
21285: EQUAL
21286: IFTRUE 21290
21288: GO 21402
21290: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21291: LD_ADDR_VAR 0 2
21295: PUSH
21296: LD_INT 2
21298: PUSH
21299: LD_INT 4
21301: PUSH
21302: LD_INT 5
21304: PUSH
21305: LD_INT 6
21307: PUSH
21308: LD_INT 8
21310: PUSH
21311: LD_INT 11
21313: PUSH
21314: LD_INT 12
21316: PUSH
21317: LD_INT 15
21319: PUSH
21320: LD_INT 16
21322: PUSH
21323: LD_INT 22
21325: PUSH
21326: LD_INT 23
21328: PUSH
21329: LD_INT 25
21331: PUSH
21332: LD_INT 26
21334: PUSH
21335: LD_INT 36
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: PUSH
21354: LD_INT 101
21356: PUSH
21357: LD_INT 102
21359: PUSH
21360: LD_INT 105
21362: PUSH
21363: LD_INT 106
21365: PUSH
21366: LD_INT 108
21368: PUSH
21369: LD_INT 109
21371: PUSH
21372: LD_INT 112
21374: PUSH
21375: LD_INT 116
21377: PUSH
21378: LD_INT 117
21380: PUSH
21381: LD_INT 118
21383: PUSH
21384: EMPTY
21385: LIST
21386: LIST
21387: LIST
21388: LIST
21389: LIST
21390: LIST
21391: LIST
21392: LIST
21393: LIST
21394: LIST
21395: PUSH
21396: EMPTY
21397: LIST
21398: LIST
21399: ST_TO_ADDR
21400: GO 24063
21402: LD_INT 6
21404: DOUBLE
21405: EQUAL
21406: IFTRUE 21410
21408: GO 21542
21410: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21411: LD_ADDR_VAR 0 2
21415: PUSH
21416: LD_INT 2
21418: PUSH
21419: LD_INT 4
21421: PUSH
21422: LD_INT 5
21424: PUSH
21425: LD_INT 6
21427: PUSH
21428: LD_INT 8
21430: PUSH
21431: LD_INT 11
21433: PUSH
21434: LD_INT 12
21436: PUSH
21437: LD_INT 15
21439: PUSH
21440: LD_INT 16
21442: PUSH
21443: LD_INT 20
21445: PUSH
21446: LD_INT 21
21448: PUSH
21449: LD_INT 22
21451: PUSH
21452: LD_INT 23
21454: PUSH
21455: LD_INT 25
21457: PUSH
21458: LD_INT 26
21460: PUSH
21461: LD_INT 30
21463: PUSH
21464: LD_INT 31
21466: PUSH
21467: LD_INT 32
21469: PUSH
21470: LD_INT 36
21472: PUSH
21473: EMPTY
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 101
21496: PUSH
21497: LD_INT 102
21499: PUSH
21500: LD_INT 105
21502: PUSH
21503: LD_INT 106
21505: PUSH
21506: LD_INT 108
21508: PUSH
21509: LD_INT 109
21511: PUSH
21512: LD_INT 112
21514: PUSH
21515: LD_INT 116
21517: PUSH
21518: LD_INT 117
21520: PUSH
21521: LD_INT 118
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: ST_TO_ADDR
21540: GO 24063
21542: LD_INT 7
21544: DOUBLE
21545: EQUAL
21546: IFTRUE 21550
21548: GO 21662
21550: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21551: LD_ADDR_VAR 0 2
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: LD_INT 4
21561: PUSH
21562: LD_INT 5
21564: PUSH
21565: LD_INT 7
21567: PUSH
21568: LD_INT 11
21570: PUSH
21571: LD_INT 12
21573: PUSH
21574: LD_INT 15
21576: PUSH
21577: LD_INT 16
21579: PUSH
21580: LD_INT 20
21582: PUSH
21583: LD_INT 21
21585: PUSH
21586: LD_INT 22
21588: PUSH
21589: LD_INT 23
21591: PUSH
21592: LD_INT 25
21594: PUSH
21595: LD_INT 26
21597: PUSH
21598: EMPTY
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 101
21616: PUSH
21617: LD_INT 102
21619: PUSH
21620: LD_INT 103
21622: PUSH
21623: LD_INT 105
21625: PUSH
21626: LD_INT 106
21628: PUSH
21629: LD_INT 108
21631: PUSH
21632: LD_INT 112
21634: PUSH
21635: LD_INT 116
21637: PUSH
21638: LD_INT 117
21640: PUSH
21641: LD_INT 118
21643: PUSH
21644: EMPTY
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: ST_TO_ADDR
21660: GO 24063
21662: LD_INT 8
21664: DOUBLE
21665: EQUAL
21666: IFTRUE 21670
21668: GO 21810
21670: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21671: LD_ADDR_VAR 0 2
21675: PUSH
21676: LD_INT 2
21678: PUSH
21679: LD_INT 4
21681: PUSH
21682: LD_INT 5
21684: PUSH
21685: LD_INT 6
21687: PUSH
21688: LD_INT 7
21690: PUSH
21691: LD_INT 8
21693: PUSH
21694: LD_INT 11
21696: PUSH
21697: LD_INT 12
21699: PUSH
21700: LD_INT 15
21702: PUSH
21703: LD_INT 16
21705: PUSH
21706: LD_INT 20
21708: PUSH
21709: LD_INT 21
21711: PUSH
21712: LD_INT 22
21714: PUSH
21715: LD_INT 23
21717: PUSH
21718: LD_INT 25
21720: PUSH
21721: LD_INT 26
21723: PUSH
21724: LD_INT 30
21726: PUSH
21727: LD_INT 31
21729: PUSH
21730: LD_INT 32
21732: PUSH
21733: LD_INT 36
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 101
21760: PUSH
21761: LD_INT 102
21763: PUSH
21764: LD_INT 103
21766: PUSH
21767: LD_INT 105
21769: PUSH
21770: LD_INT 106
21772: PUSH
21773: LD_INT 108
21775: PUSH
21776: LD_INT 109
21778: PUSH
21779: LD_INT 112
21781: PUSH
21782: LD_INT 116
21784: PUSH
21785: LD_INT 117
21787: PUSH
21788: LD_INT 118
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: LIST
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: ST_TO_ADDR
21808: GO 24063
21810: LD_INT 9
21812: DOUBLE
21813: EQUAL
21814: IFTRUE 21818
21816: GO 21966
21818: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21819: LD_ADDR_VAR 0 2
21823: PUSH
21824: LD_INT 2
21826: PUSH
21827: LD_INT 4
21829: PUSH
21830: LD_INT 5
21832: PUSH
21833: LD_INT 6
21835: PUSH
21836: LD_INT 7
21838: PUSH
21839: LD_INT 8
21841: PUSH
21842: LD_INT 11
21844: PUSH
21845: LD_INT 12
21847: PUSH
21848: LD_INT 15
21850: PUSH
21851: LD_INT 16
21853: PUSH
21854: LD_INT 20
21856: PUSH
21857: LD_INT 21
21859: PUSH
21860: LD_INT 22
21862: PUSH
21863: LD_INT 23
21865: PUSH
21866: LD_INT 25
21868: PUSH
21869: LD_INT 26
21871: PUSH
21872: LD_INT 28
21874: PUSH
21875: LD_INT 30
21877: PUSH
21878: LD_INT 31
21880: PUSH
21881: LD_INT 32
21883: PUSH
21884: LD_INT 36
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: LIST
21899: LIST
21900: LIST
21901: LIST
21902: LIST
21903: LIST
21904: LIST
21905: LIST
21906: LIST
21907: LIST
21908: LIST
21909: PUSH
21910: LD_INT 101
21912: PUSH
21913: LD_INT 102
21915: PUSH
21916: LD_INT 103
21918: PUSH
21919: LD_INT 105
21921: PUSH
21922: LD_INT 106
21924: PUSH
21925: LD_INT 108
21927: PUSH
21928: LD_INT 109
21930: PUSH
21931: LD_INT 112
21933: PUSH
21934: LD_INT 114
21936: PUSH
21937: LD_INT 116
21939: PUSH
21940: LD_INT 117
21942: PUSH
21943: LD_INT 118
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: PUSH
21960: EMPTY
21961: LIST
21962: LIST
21963: ST_TO_ADDR
21964: GO 24063
21966: LD_INT 10
21968: DOUBLE
21969: EQUAL
21970: IFTRUE 21974
21972: GO 22170
21974: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21975: LD_ADDR_VAR 0 2
21979: PUSH
21980: LD_INT 2
21982: PUSH
21983: LD_INT 4
21985: PUSH
21986: LD_INT 5
21988: PUSH
21989: LD_INT 6
21991: PUSH
21992: LD_INT 7
21994: PUSH
21995: LD_INT 8
21997: PUSH
21998: LD_INT 9
22000: PUSH
22001: LD_INT 10
22003: PUSH
22004: LD_INT 11
22006: PUSH
22007: LD_INT 12
22009: PUSH
22010: LD_INT 13
22012: PUSH
22013: LD_INT 14
22015: PUSH
22016: LD_INT 15
22018: PUSH
22019: LD_INT 16
22021: PUSH
22022: LD_INT 17
22024: PUSH
22025: LD_INT 18
22027: PUSH
22028: LD_INT 19
22030: PUSH
22031: LD_INT 20
22033: PUSH
22034: LD_INT 21
22036: PUSH
22037: LD_INT 22
22039: PUSH
22040: LD_INT 23
22042: PUSH
22043: LD_INT 24
22045: PUSH
22046: LD_INT 25
22048: PUSH
22049: LD_INT 26
22051: PUSH
22052: LD_INT 28
22054: PUSH
22055: LD_INT 30
22057: PUSH
22058: LD_INT 31
22060: PUSH
22061: LD_INT 32
22063: PUSH
22064: LD_INT 36
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: PUSH
22098: LD_INT 101
22100: PUSH
22101: LD_INT 102
22103: PUSH
22104: LD_INT 103
22106: PUSH
22107: LD_INT 104
22109: PUSH
22110: LD_INT 105
22112: PUSH
22113: LD_INT 106
22115: PUSH
22116: LD_INT 107
22118: PUSH
22119: LD_INT 108
22121: PUSH
22122: LD_INT 109
22124: PUSH
22125: LD_INT 110
22127: PUSH
22128: LD_INT 111
22130: PUSH
22131: LD_INT 112
22133: PUSH
22134: LD_INT 114
22136: PUSH
22137: LD_INT 116
22139: PUSH
22140: LD_INT 117
22142: PUSH
22143: LD_INT 118
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: PUSH
22164: EMPTY
22165: LIST
22166: LIST
22167: ST_TO_ADDR
22168: GO 24063
22170: LD_INT 11
22172: DOUBLE
22173: EQUAL
22174: IFTRUE 22178
22176: GO 22382
22178: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22179: LD_ADDR_VAR 0 2
22183: PUSH
22184: LD_INT 2
22186: PUSH
22187: LD_INT 3
22189: PUSH
22190: LD_INT 4
22192: PUSH
22193: LD_INT 5
22195: PUSH
22196: LD_INT 6
22198: PUSH
22199: LD_INT 7
22201: PUSH
22202: LD_INT 8
22204: PUSH
22205: LD_INT 9
22207: PUSH
22208: LD_INT 10
22210: PUSH
22211: LD_INT 11
22213: PUSH
22214: LD_INT 12
22216: PUSH
22217: LD_INT 13
22219: PUSH
22220: LD_INT 14
22222: PUSH
22223: LD_INT 15
22225: PUSH
22226: LD_INT 16
22228: PUSH
22229: LD_INT 17
22231: PUSH
22232: LD_INT 18
22234: PUSH
22235: LD_INT 19
22237: PUSH
22238: LD_INT 20
22240: PUSH
22241: LD_INT 21
22243: PUSH
22244: LD_INT 22
22246: PUSH
22247: LD_INT 23
22249: PUSH
22250: LD_INT 24
22252: PUSH
22253: LD_INT 25
22255: PUSH
22256: LD_INT 26
22258: PUSH
22259: LD_INT 28
22261: PUSH
22262: LD_INT 30
22264: PUSH
22265: LD_INT 31
22267: PUSH
22268: LD_INT 32
22270: PUSH
22271: LD_INT 34
22273: PUSH
22274: LD_INT 36
22276: PUSH
22277: EMPTY
22278: LIST
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: LIST
22285: LIST
22286: LIST
22287: LIST
22288: LIST
22289: LIST
22290: LIST
22291: LIST
22292: LIST
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: PUSH
22310: LD_INT 101
22312: PUSH
22313: LD_INT 102
22315: PUSH
22316: LD_INT 103
22318: PUSH
22319: LD_INT 104
22321: PUSH
22322: LD_INT 105
22324: PUSH
22325: LD_INT 106
22327: PUSH
22328: LD_INT 107
22330: PUSH
22331: LD_INT 108
22333: PUSH
22334: LD_INT 109
22336: PUSH
22337: LD_INT 110
22339: PUSH
22340: LD_INT 111
22342: PUSH
22343: LD_INT 112
22345: PUSH
22346: LD_INT 114
22348: PUSH
22349: LD_INT 116
22351: PUSH
22352: LD_INT 117
22354: PUSH
22355: LD_INT 118
22357: PUSH
22358: EMPTY
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: LIST
22365: LIST
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: ST_TO_ADDR
22380: GO 24063
22382: LD_INT 12
22384: DOUBLE
22385: EQUAL
22386: IFTRUE 22390
22388: GO 22610
22390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22391: LD_ADDR_VAR 0 2
22395: PUSH
22396: LD_INT 1
22398: PUSH
22399: LD_INT 2
22401: PUSH
22402: LD_INT 3
22404: PUSH
22405: LD_INT 4
22407: PUSH
22408: LD_INT 5
22410: PUSH
22411: LD_INT 6
22413: PUSH
22414: LD_INT 7
22416: PUSH
22417: LD_INT 8
22419: PUSH
22420: LD_INT 9
22422: PUSH
22423: LD_INT 10
22425: PUSH
22426: LD_INT 11
22428: PUSH
22429: LD_INT 12
22431: PUSH
22432: LD_INT 13
22434: PUSH
22435: LD_INT 14
22437: PUSH
22438: LD_INT 15
22440: PUSH
22441: LD_INT 16
22443: PUSH
22444: LD_INT 17
22446: PUSH
22447: LD_INT 18
22449: PUSH
22450: LD_INT 19
22452: PUSH
22453: LD_INT 20
22455: PUSH
22456: LD_INT 21
22458: PUSH
22459: LD_INT 22
22461: PUSH
22462: LD_INT 23
22464: PUSH
22465: LD_INT 24
22467: PUSH
22468: LD_INT 25
22470: PUSH
22471: LD_INT 26
22473: PUSH
22474: LD_INT 27
22476: PUSH
22477: LD_INT 28
22479: PUSH
22480: LD_INT 30
22482: PUSH
22483: LD_INT 31
22485: PUSH
22486: LD_INT 32
22488: PUSH
22489: LD_INT 33
22491: PUSH
22492: LD_INT 34
22494: PUSH
22495: LD_INT 36
22497: PUSH
22498: EMPTY
22499: LIST
22500: LIST
22501: LIST
22502: LIST
22503: LIST
22504: LIST
22505: LIST
22506: LIST
22507: LIST
22508: LIST
22509: LIST
22510: LIST
22511: LIST
22512: LIST
22513: LIST
22514: LIST
22515: LIST
22516: LIST
22517: LIST
22518: LIST
22519: LIST
22520: LIST
22521: LIST
22522: LIST
22523: LIST
22524: LIST
22525: LIST
22526: LIST
22527: LIST
22528: LIST
22529: LIST
22530: LIST
22531: LIST
22532: LIST
22533: PUSH
22534: LD_INT 101
22536: PUSH
22537: LD_INT 102
22539: PUSH
22540: LD_INT 103
22542: PUSH
22543: LD_INT 104
22545: PUSH
22546: LD_INT 105
22548: PUSH
22549: LD_INT 106
22551: PUSH
22552: LD_INT 107
22554: PUSH
22555: LD_INT 108
22557: PUSH
22558: LD_INT 109
22560: PUSH
22561: LD_INT 110
22563: PUSH
22564: LD_INT 111
22566: PUSH
22567: LD_INT 112
22569: PUSH
22570: LD_INT 113
22572: PUSH
22573: LD_INT 114
22575: PUSH
22576: LD_INT 116
22578: PUSH
22579: LD_INT 117
22581: PUSH
22582: LD_INT 118
22584: PUSH
22585: EMPTY
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: ST_TO_ADDR
22608: GO 24063
22610: LD_INT 13
22612: DOUBLE
22613: EQUAL
22614: IFTRUE 22618
22616: GO 22826
22618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22619: LD_ADDR_VAR 0 2
22623: PUSH
22624: LD_INT 1
22626: PUSH
22627: LD_INT 2
22629: PUSH
22630: LD_INT 3
22632: PUSH
22633: LD_INT 4
22635: PUSH
22636: LD_INT 5
22638: PUSH
22639: LD_INT 8
22641: PUSH
22642: LD_INT 9
22644: PUSH
22645: LD_INT 10
22647: PUSH
22648: LD_INT 11
22650: PUSH
22651: LD_INT 12
22653: PUSH
22654: LD_INT 14
22656: PUSH
22657: LD_INT 15
22659: PUSH
22660: LD_INT 16
22662: PUSH
22663: LD_INT 17
22665: PUSH
22666: LD_INT 18
22668: PUSH
22669: LD_INT 19
22671: PUSH
22672: LD_INT 20
22674: PUSH
22675: LD_INT 21
22677: PUSH
22678: LD_INT 22
22680: PUSH
22681: LD_INT 23
22683: PUSH
22684: LD_INT 24
22686: PUSH
22687: LD_INT 25
22689: PUSH
22690: LD_INT 26
22692: PUSH
22693: LD_INT 27
22695: PUSH
22696: LD_INT 28
22698: PUSH
22699: LD_INT 30
22701: PUSH
22702: LD_INT 31
22704: PUSH
22705: LD_INT 32
22707: PUSH
22708: LD_INT 33
22710: PUSH
22711: LD_INT 34
22713: PUSH
22714: LD_INT 36
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: LIST
22721: LIST
22722: LIST
22723: LIST
22724: LIST
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: LIST
22748: LIST
22749: PUSH
22750: LD_INT 101
22752: PUSH
22753: LD_INT 102
22755: PUSH
22756: LD_INT 103
22758: PUSH
22759: LD_INT 104
22761: PUSH
22762: LD_INT 105
22764: PUSH
22765: LD_INT 106
22767: PUSH
22768: LD_INT 107
22770: PUSH
22771: LD_INT 108
22773: PUSH
22774: LD_INT 109
22776: PUSH
22777: LD_INT 110
22779: PUSH
22780: LD_INT 111
22782: PUSH
22783: LD_INT 112
22785: PUSH
22786: LD_INT 113
22788: PUSH
22789: LD_INT 114
22791: PUSH
22792: LD_INT 116
22794: PUSH
22795: LD_INT 117
22797: PUSH
22798: LD_INT 118
22800: PUSH
22801: EMPTY
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: ST_TO_ADDR
22824: GO 24063
22826: LD_INT 14
22828: DOUBLE
22829: EQUAL
22830: IFTRUE 22834
22832: GO 23058
22834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22835: LD_ADDR_VAR 0 2
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: LD_INT 2
22845: PUSH
22846: LD_INT 3
22848: PUSH
22849: LD_INT 4
22851: PUSH
22852: LD_INT 5
22854: PUSH
22855: LD_INT 6
22857: PUSH
22858: LD_INT 7
22860: PUSH
22861: LD_INT 8
22863: PUSH
22864: LD_INT 9
22866: PUSH
22867: LD_INT 10
22869: PUSH
22870: LD_INT 11
22872: PUSH
22873: LD_INT 12
22875: PUSH
22876: LD_INT 13
22878: PUSH
22879: LD_INT 14
22881: PUSH
22882: LD_INT 15
22884: PUSH
22885: LD_INT 16
22887: PUSH
22888: LD_INT 17
22890: PUSH
22891: LD_INT 18
22893: PUSH
22894: LD_INT 19
22896: PUSH
22897: LD_INT 20
22899: PUSH
22900: LD_INT 21
22902: PUSH
22903: LD_INT 22
22905: PUSH
22906: LD_INT 23
22908: PUSH
22909: LD_INT 24
22911: PUSH
22912: LD_INT 25
22914: PUSH
22915: LD_INT 26
22917: PUSH
22918: LD_INT 27
22920: PUSH
22921: LD_INT 28
22923: PUSH
22924: LD_INT 29
22926: PUSH
22927: LD_INT 30
22929: PUSH
22930: LD_INT 31
22932: PUSH
22933: LD_INT 32
22935: PUSH
22936: LD_INT 33
22938: PUSH
22939: LD_INT 34
22941: PUSH
22942: LD_INT 36
22944: PUSH
22945: EMPTY
22946: LIST
22947: LIST
22948: LIST
22949: LIST
22950: LIST
22951: LIST
22952: LIST
22953: LIST
22954: LIST
22955: LIST
22956: LIST
22957: LIST
22958: LIST
22959: LIST
22960: LIST
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: LIST
22966: LIST
22967: LIST
22968: LIST
22969: LIST
22970: LIST
22971: LIST
22972: LIST
22973: LIST
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: LIST
22979: LIST
22980: LIST
22981: PUSH
22982: LD_INT 101
22984: PUSH
22985: LD_INT 102
22987: PUSH
22988: LD_INT 103
22990: PUSH
22991: LD_INT 104
22993: PUSH
22994: LD_INT 105
22996: PUSH
22997: LD_INT 106
22999: PUSH
23000: LD_INT 107
23002: PUSH
23003: LD_INT 108
23005: PUSH
23006: LD_INT 109
23008: PUSH
23009: LD_INT 110
23011: PUSH
23012: LD_INT 111
23014: PUSH
23015: LD_INT 112
23017: PUSH
23018: LD_INT 113
23020: PUSH
23021: LD_INT 114
23023: PUSH
23024: LD_INT 116
23026: PUSH
23027: LD_INT 117
23029: PUSH
23030: LD_INT 118
23032: PUSH
23033: EMPTY
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: ST_TO_ADDR
23056: GO 24063
23058: LD_INT 15
23060: DOUBLE
23061: EQUAL
23062: IFTRUE 23066
23064: GO 23290
23066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23067: LD_ADDR_VAR 0 2
23071: PUSH
23072: LD_INT 1
23074: PUSH
23075: LD_INT 2
23077: PUSH
23078: LD_INT 3
23080: PUSH
23081: LD_INT 4
23083: PUSH
23084: LD_INT 5
23086: PUSH
23087: LD_INT 6
23089: PUSH
23090: LD_INT 7
23092: PUSH
23093: LD_INT 8
23095: PUSH
23096: LD_INT 9
23098: PUSH
23099: LD_INT 10
23101: PUSH
23102: LD_INT 11
23104: PUSH
23105: LD_INT 12
23107: PUSH
23108: LD_INT 13
23110: PUSH
23111: LD_INT 14
23113: PUSH
23114: LD_INT 15
23116: PUSH
23117: LD_INT 16
23119: PUSH
23120: LD_INT 17
23122: PUSH
23123: LD_INT 18
23125: PUSH
23126: LD_INT 19
23128: PUSH
23129: LD_INT 20
23131: PUSH
23132: LD_INT 21
23134: PUSH
23135: LD_INT 22
23137: PUSH
23138: LD_INT 23
23140: PUSH
23141: LD_INT 24
23143: PUSH
23144: LD_INT 25
23146: PUSH
23147: LD_INT 26
23149: PUSH
23150: LD_INT 27
23152: PUSH
23153: LD_INT 28
23155: PUSH
23156: LD_INT 29
23158: PUSH
23159: LD_INT 30
23161: PUSH
23162: LD_INT 31
23164: PUSH
23165: LD_INT 32
23167: PUSH
23168: LD_INT 33
23170: PUSH
23171: LD_INT 34
23173: PUSH
23174: LD_INT 36
23176: PUSH
23177: EMPTY
23178: LIST
23179: LIST
23180: LIST
23181: LIST
23182: LIST
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: LIST
23193: LIST
23194: LIST
23195: LIST
23196: LIST
23197: LIST
23198: LIST
23199: LIST
23200: LIST
23201: LIST
23202: LIST
23203: LIST
23204: LIST
23205: LIST
23206: LIST
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: PUSH
23214: LD_INT 101
23216: PUSH
23217: LD_INT 102
23219: PUSH
23220: LD_INT 103
23222: PUSH
23223: LD_INT 104
23225: PUSH
23226: LD_INT 105
23228: PUSH
23229: LD_INT 106
23231: PUSH
23232: LD_INT 107
23234: PUSH
23235: LD_INT 108
23237: PUSH
23238: LD_INT 109
23240: PUSH
23241: LD_INT 110
23243: PUSH
23244: LD_INT 111
23246: PUSH
23247: LD_INT 112
23249: PUSH
23250: LD_INT 113
23252: PUSH
23253: LD_INT 114
23255: PUSH
23256: LD_INT 116
23258: PUSH
23259: LD_INT 117
23261: PUSH
23262: LD_INT 118
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: LIST
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: ST_TO_ADDR
23288: GO 24063
23290: LD_INT 16
23292: DOUBLE
23293: EQUAL
23294: IFTRUE 23298
23296: GO 23434
23298: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23299: LD_ADDR_VAR 0 2
23303: PUSH
23304: LD_INT 2
23306: PUSH
23307: LD_INT 4
23309: PUSH
23310: LD_INT 5
23312: PUSH
23313: LD_INT 7
23315: PUSH
23316: LD_INT 11
23318: PUSH
23319: LD_INT 12
23321: PUSH
23322: LD_INT 15
23324: PUSH
23325: LD_INT 16
23327: PUSH
23328: LD_INT 20
23330: PUSH
23331: LD_INT 21
23333: PUSH
23334: LD_INT 22
23336: PUSH
23337: LD_INT 23
23339: PUSH
23340: LD_INT 25
23342: PUSH
23343: LD_INT 26
23345: PUSH
23346: LD_INT 30
23348: PUSH
23349: LD_INT 31
23351: PUSH
23352: LD_INT 32
23354: PUSH
23355: LD_INT 33
23357: PUSH
23358: LD_INT 34
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: PUSH
23382: LD_INT 101
23384: PUSH
23385: LD_INT 102
23387: PUSH
23388: LD_INT 103
23390: PUSH
23391: LD_INT 106
23393: PUSH
23394: LD_INT 108
23396: PUSH
23397: LD_INT 112
23399: PUSH
23400: LD_INT 113
23402: PUSH
23403: LD_INT 114
23405: PUSH
23406: LD_INT 116
23408: PUSH
23409: LD_INT 117
23411: PUSH
23412: LD_INT 118
23414: PUSH
23415: EMPTY
23416: LIST
23417: LIST
23418: LIST
23419: LIST
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: PUSH
23428: EMPTY
23429: LIST
23430: LIST
23431: ST_TO_ADDR
23432: GO 24063
23434: LD_INT 17
23436: DOUBLE
23437: EQUAL
23438: IFTRUE 23442
23440: GO 23666
23442: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23443: LD_ADDR_VAR 0 2
23447: PUSH
23448: LD_INT 1
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: LD_INT 3
23456: PUSH
23457: LD_INT 4
23459: PUSH
23460: LD_INT 5
23462: PUSH
23463: LD_INT 6
23465: PUSH
23466: LD_INT 7
23468: PUSH
23469: LD_INT 8
23471: PUSH
23472: LD_INT 9
23474: PUSH
23475: LD_INT 10
23477: PUSH
23478: LD_INT 11
23480: PUSH
23481: LD_INT 12
23483: PUSH
23484: LD_INT 13
23486: PUSH
23487: LD_INT 14
23489: PUSH
23490: LD_INT 15
23492: PUSH
23493: LD_INT 16
23495: PUSH
23496: LD_INT 17
23498: PUSH
23499: LD_INT 18
23501: PUSH
23502: LD_INT 19
23504: PUSH
23505: LD_INT 20
23507: PUSH
23508: LD_INT 21
23510: PUSH
23511: LD_INT 22
23513: PUSH
23514: LD_INT 23
23516: PUSH
23517: LD_INT 24
23519: PUSH
23520: LD_INT 25
23522: PUSH
23523: LD_INT 26
23525: PUSH
23526: LD_INT 27
23528: PUSH
23529: LD_INT 28
23531: PUSH
23532: LD_INT 29
23534: PUSH
23535: LD_INT 30
23537: PUSH
23538: LD_INT 31
23540: PUSH
23541: LD_INT 32
23543: PUSH
23544: LD_INT 33
23546: PUSH
23547: LD_INT 34
23549: PUSH
23550: LD_INT 36
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: LIST
23560: LIST
23561: LIST
23562: LIST
23563: LIST
23564: LIST
23565: LIST
23566: LIST
23567: LIST
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 101
23592: PUSH
23593: LD_INT 102
23595: PUSH
23596: LD_INT 103
23598: PUSH
23599: LD_INT 104
23601: PUSH
23602: LD_INT 105
23604: PUSH
23605: LD_INT 106
23607: PUSH
23608: LD_INT 107
23610: PUSH
23611: LD_INT 108
23613: PUSH
23614: LD_INT 109
23616: PUSH
23617: LD_INT 110
23619: PUSH
23620: LD_INT 111
23622: PUSH
23623: LD_INT 112
23625: PUSH
23626: LD_INT 113
23628: PUSH
23629: LD_INT 114
23631: PUSH
23632: LD_INT 116
23634: PUSH
23635: LD_INT 117
23637: PUSH
23638: LD_INT 118
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: LIST
23645: LIST
23646: LIST
23647: LIST
23648: LIST
23649: LIST
23650: LIST
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: LIST
23656: LIST
23657: LIST
23658: LIST
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: ST_TO_ADDR
23664: GO 24063
23666: LD_INT 18
23668: DOUBLE
23669: EQUAL
23670: IFTRUE 23674
23672: GO 23822
23674: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23675: LD_ADDR_VAR 0 2
23679: PUSH
23680: LD_INT 2
23682: PUSH
23683: LD_INT 4
23685: PUSH
23686: LD_INT 5
23688: PUSH
23689: LD_INT 7
23691: PUSH
23692: LD_INT 11
23694: PUSH
23695: LD_INT 12
23697: PUSH
23698: LD_INT 15
23700: PUSH
23701: LD_INT 16
23703: PUSH
23704: LD_INT 20
23706: PUSH
23707: LD_INT 21
23709: PUSH
23710: LD_INT 22
23712: PUSH
23713: LD_INT 23
23715: PUSH
23716: LD_INT 25
23718: PUSH
23719: LD_INT 26
23721: PUSH
23722: LD_INT 30
23724: PUSH
23725: LD_INT 31
23727: PUSH
23728: LD_INT 32
23730: PUSH
23731: LD_INT 33
23733: PUSH
23734: LD_INT 34
23736: PUSH
23737: LD_INT 35
23739: PUSH
23740: LD_INT 36
23742: PUSH
23743: EMPTY
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: PUSH
23766: LD_INT 101
23768: PUSH
23769: LD_INT 102
23771: PUSH
23772: LD_INT 103
23774: PUSH
23775: LD_INT 106
23777: PUSH
23778: LD_INT 108
23780: PUSH
23781: LD_INT 112
23783: PUSH
23784: LD_INT 113
23786: PUSH
23787: LD_INT 114
23789: PUSH
23790: LD_INT 115
23792: PUSH
23793: LD_INT 116
23795: PUSH
23796: LD_INT 117
23798: PUSH
23799: LD_INT 118
23801: PUSH
23802: EMPTY
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: ST_TO_ADDR
23820: GO 24063
23822: LD_INT 19
23824: DOUBLE
23825: EQUAL
23826: IFTRUE 23830
23828: GO 24062
23830: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23831: LD_ADDR_VAR 0 2
23835: PUSH
23836: LD_INT 1
23838: PUSH
23839: LD_INT 2
23841: PUSH
23842: LD_INT 3
23844: PUSH
23845: LD_INT 4
23847: PUSH
23848: LD_INT 5
23850: PUSH
23851: LD_INT 6
23853: PUSH
23854: LD_INT 7
23856: PUSH
23857: LD_INT 8
23859: PUSH
23860: LD_INT 9
23862: PUSH
23863: LD_INT 10
23865: PUSH
23866: LD_INT 11
23868: PUSH
23869: LD_INT 12
23871: PUSH
23872: LD_INT 13
23874: PUSH
23875: LD_INT 14
23877: PUSH
23878: LD_INT 15
23880: PUSH
23881: LD_INT 16
23883: PUSH
23884: LD_INT 17
23886: PUSH
23887: LD_INT 18
23889: PUSH
23890: LD_INT 19
23892: PUSH
23893: LD_INT 20
23895: PUSH
23896: LD_INT 21
23898: PUSH
23899: LD_INT 22
23901: PUSH
23902: LD_INT 23
23904: PUSH
23905: LD_INT 24
23907: PUSH
23908: LD_INT 25
23910: PUSH
23911: LD_INT 26
23913: PUSH
23914: LD_INT 27
23916: PUSH
23917: LD_INT 28
23919: PUSH
23920: LD_INT 29
23922: PUSH
23923: LD_INT 30
23925: PUSH
23926: LD_INT 31
23928: PUSH
23929: LD_INT 32
23931: PUSH
23932: LD_INT 33
23934: PUSH
23935: LD_INT 34
23937: PUSH
23938: LD_INT 35
23940: PUSH
23941: LD_INT 36
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 101
23984: PUSH
23985: LD_INT 102
23987: PUSH
23988: LD_INT 103
23990: PUSH
23991: LD_INT 104
23993: PUSH
23994: LD_INT 105
23996: PUSH
23997: LD_INT 106
23999: PUSH
24000: LD_INT 107
24002: PUSH
24003: LD_INT 108
24005: PUSH
24006: LD_INT 109
24008: PUSH
24009: LD_INT 110
24011: PUSH
24012: LD_INT 111
24014: PUSH
24015: LD_INT 112
24017: PUSH
24018: LD_INT 113
24020: PUSH
24021: LD_INT 114
24023: PUSH
24024: LD_INT 115
24026: PUSH
24027: LD_INT 116
24029: PUSH
24030: LD_INT 117
24032: PUSH
24033: LD_INT 118
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: ST_TO_ADDR
24060: GO 24063
24062: POP
// end else
24063: GO 24294
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24065: LD_ADDR_VAR 0 2
24069: PUSH
24070: LD_INT 1
24072: PUSH
24073: LD_INT 2
24075: PUSH
24076: LD_INT 3
24078: PUSH
24079: LD_INT 4
24081: PUSH
24082: LD_INT 5
24084: PUSH
24085: LD_INT 6
24087: PUSH
24088: LD_INT 7
24090: PUSH
24091: LD_INT 8
24093: PUSH
24094: LD_INT 9
24096: PUSH
24097: LD_INT 10
24099: PUSH
24100: LD_INT 11
24102: PUSH
24103: LD_INT 12
24105: PUSH
24106: LD_INT 13
24108: PUSH
24109: LD_INT 14
24111: PUSH
24112: LD_INT 15
24114: PUSH
24115: LD_INT 16
24117: PUSH
24118: LD_INT 17
24120: PUSH
24121: LD_INT 18
24123: PUSH
24124: LD_INT 19
24126: PUSH
24127: LD_INT 20
24129: PUSH
24130: LD_INT 21
24132: PUSH
24133: LD_INT 22
24135: PUSH
24136: LD_INT 23
24138: PUSH
24139: LD_INT 24
24141: PUSH
24142: LD_INT 25
24144: PUSH
24145: LD_INT 26
24147: PUSH
24148: LD_INT 27
24150: PUSH
24151: LD_INT 28
24153: PUSH
24154: LD_INT 29
24156: PUSH
24157: LD_INT 30
24159: PUSH
24160: LD_INT 31
24162: PUSH
24163: LD_INT 32
24165: PUSH
24166: LD_INT 33
24168: PUSH
24169: LD_INT 34
24171: PUSH
24172: LD_INT 35
24174: PUSH
24175: LD_INT 36
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 101
24218: PUSH
24219: LD_INT 102
24221: PUSH
24222: LD_INT 103
24224: PUSH
24225: LD_INT 104
24227: PUSH
24228: LD_INT 105
24230: PUSH
24231: LD_INT 106
24233: PUSH
24234: LD_INT 107
24236: PUSH
24237: LD_INT 108
24239: PUSH
24240: LD_INT 109
24242: PUSH
24243: LD_INT 110
24245: PUSH
24246: LD_INT 111
24248: PUSH
24249: LD_INT 112
24251: PUSH
24252: LD_INT 113
24254: PUSH
24255: LD_INT 114
24257: PUSH
24258: LD_INT 115
24260: PUSH
24261: LD_INT 116
24263: PUSH
24264: LD_INT 117
24266: PUSH
24267: LD_INT 118
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: LIST
24274: LIST
24275: LIST
24276: LIST
24277: LIST
24278: LIST
24279: LIST
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: LIST
24287: LIST
24288: LIST
24289: PUSH
24290: EMPTY
24291: LIST
24292: LIST
24293: ST_TO_ADDR
// if result then
24294: LD_VAR 0 2
24298: IFFALSE 25084
// begin normal :=  ;
24300: LD_ADDR_VAR 0 5
24304: PUSH
24305: LD_STRING 
24307: ST_TO_ADDR
// hardcore :=  ;
24308: LD_ADDR_VAR 0 6
24312: PUSH
24313: LD_STRING 
24315: ST_TO_ADDR
// active :=  ;
24316: LD_ADDR_VAR 0 7
24320: PUSH
24321: LD_STRING 
24323: ST_TO_ADDR
// for i = 1 to normalCounter do
24324: LD_ADDR_VAR 0 8
24328: PUSH
24329: DOUBLE
24330: LD_INT 1
24332: DEC
24333: ST_TO_ADDR
24334: LD_EXP 47
24338: PUSH
24339: FOR_TO
24340: IFFALSE 24441
// begin tmp := 0 ;
24342: LD_ADDR_VAR 0 3
24346: PUSH
24347: LD_STRING 0
24349: ST_TO_ADDR
// if result [ 1 ] then
24350: LD_VAR 0 2
24354: PUSH
24355: LD_INT 1
24357: ARRAY
24358: IFFALSE 24423
// if result [ 1 ] [ 1 ] = i then
24360: LD_VAR 0 2
24364: PUSH
24365: LD_INT 1
24367: ARRAY
24368: PUSH
24369: LD_INT 1
24371: ARRAY
24372: PUSH
24373: LD_VAR 0 8
24377: EQUAL
24378: IFFALSE 24423
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24380: LD_ADDR_VAR 0 2
24384: PUSH
24385: LD_VAR 0 2
24389: PPUSH
24390: LD_INT 1
24392: PPUSH
24393: LD_VAR 0 2
24397: PUSH
24398: LD_INT 1
24400: ARRAY
24401: PPUSH
24402: LD_INT 1
24404: PPUSH
24405: CALL_OW 3
24409: PPUSH
24410: CALL_OW 1
24414: ST_TO_ADDR
// tmp := 1 ;
24415: LD_ADDR_VAR 0 3
24419: PUSH
24420: LD_STRING 1
24422: ST_TO_ADDR
// end ; normal := normal & tmp ;
24423: LD_ADDR_VAR 0 5
24427: PUSH
24428: LD_VAR 0 5
24432: PUSH
24433: LD_VAR 0 3
24437: STR
24438: ST_TO_ADDR
// end ;
24439: GO 24339
24441: POP
24442: POP
// for i = 1 to hardcoreCounter do
24443: LD_ADDR_VAR 0 8
24447: PUSH
24448: DOUBLE
24449: LD_INT 1
24451: DEC
24452: ST_TO_ADDR
24453: LD_EXP 48
24457: PUSH
24458: FOR_TO
24459: IFFALSE 24564
// begin tmp := 0 ;
24461: LD_ADDR_VAR 0 3
24465: PUSH
24466: LD_STRING 0
24468: ST_TO_ADDR
// if result [ 2 ] then
24469: LD_VAR 0 2
24473: PUSH
24474: LD_INT 2
24476: ARRAY
24477: IFFALSE 24546
// if result [ 2 ] [ 1 ] = 100 + i then
24479: LD_VAR 0 2
24483: PUSH
24484: LD_INT 2
24486: ARRAY
24487: PUSH
24488: LD_INT 1
24490: ARRAY
24491: PUSH
24492: LD_INT 100
24494: PUSH
24495: LD_VAR 0 8
24499: PLUS
24500: EQUAL
24501: IFFALSE 24546
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24503: LD_ADDR_VAR 0 2
24507: PUSH
24508: LD_VAR 0 2
24512: PPUSH
24513: LD_INT 2
24515: PPUSH
24516: LD_VAR 0 2
24520: PUSH
24521: LD_INT 2
24523: ARRAY
24524: PPUSH
24525: LD_INT 1
24527: PPUSH
24528: CALL_OW 3
24532: PPUSH
24533: CALL_OW 1
24537: ST_TO_ADDR
// tmp := 1 ;
24538: LD_ADDR_VAR 0 3
24542: PUSH
24543: LD_STRING 1
24545: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24546: LD_ADDR_VAR 0 6
24550: PUSH
24551: LD_VAR 0 6
24555: PUSH
24556: LD_VAR 0 3
24560: STR
24561: ST_TO_ADDR
// end ;
24562: GO 24458
24564: POP
24565: POP
// if isGameLoad then
24566: LD_VAR 0 1
24570: IFFALSE 25045
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24572: LD_ADDR_VAR 0 4
24576: PUSH
24577: LD_EXP 51
24581: PUSH
24582: LD_EXP 50
24586: PUSH
24587: LD_EXP 52
24591: PUSH
24592: LD_EXP 49
24596: PUSH
24597: LD_EXP 53
24601: PUSH
24602: LD_EXP 54
24606: PUSH
24607: LD_EXP 55
24611: PUSH
24612: LD_EXP 56
24616: PUSH
24617: LD_EXP 57
24621: PUSH
24622: LD_EXP 58
24626: PUSH
24627: LD_EXP 59
24631: PUSH
24632: LD_EXP 60
24636: PUSH
24637: LD_EXP 61
24641: PUSH
24642: LD_EXP 62
24646: PUSH
24647: LD_EXP 70
24651: PUSH
24652: LD_EXP 71
24656: PUSH
24657: LD_EXP 72
24661: PUSH
24662: LD_EXP 73
24666: PUSH
24667: LD_EXP 75
24671: PUSH
24672: LD_EXP 76
24676: PUSH
24677: LD_EXP 77
24681: PUSH
24682: LD_EXP 80
24686: PUSH
24687: LD_EXP 82
24691: PUSH
24692: LD_EXP 83
24696: PUSH
24697: LD_EXP 84
24701: PUSH
24702: LD_EXP 86
24706: PUSH
24707: LD_EXP 87
24711: PUSH
24712: LD_EXP 90
24716: PUSH
24717: LD_EXP 91
24721: PUSH
24722: LD_EXP 92
24726: PUSH
24727: LD_EXP 93
24731: PUSH
24732: LD_EXP 94
24736: PUSH
24737: LD_EXP 95
24741: PUSH
24742: LD_EXP 96
24746: PUSH
24747: LD_EXP 97
24751: PUSH
24752: LD_EXP 98
24756: PUSH
24757: LD_EXP 63
24761: PUSH
24762: LD_EXP 64
24766: PUSH
24767: LD_EXP 67
24771: PUSH
24772: LD_EXP 68
24776: PUSH
24777: LD_EXP 69
24781: PUSH
24782: LD_EXP 65
24786: PUSH
24787: LD_EXP 66
24791: PUSH
24792: LD_EXP 74
24796: PUSH
24797: LD_EXP 78
24801: PUSH
24802: LD_EXP 79
24806: PUSH
24807: LD_EXP 81
24811: PUSH
24812: LD_EXP 85
24816: PUSH
24817: LD_EXP 88
24821: PUSH
24822: LD_EXP 89
24826: PUSH
24827: LD_EXP 99
24831: PUSH
24832: LD_EXP 100
24836: PUSH
24837: LD_EXP 101
24841: PUSH
24842: LD_EXP 102
24846: PUSH
24847: EMPTY
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: LIST
24869: LIST
24870: LIST
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: LIST
24876: LIST
24877: LIST
24878: LIST
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: LIST
24888: LIST
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: ST_TO_ADDR
// tmp :=  ;
24903: LD_ADDR_VAR 0 3
24907: PUSH
24908: LD_STRING 
24910: ST_TO_ADDR
// for i = 1 to normalCounter do
24911: LD_ADDR_VAR 0 8
24915: PUSH
24916: DOUBLE
24917: LD_INT 1
24919: DEC
24920: ST_TO_ADDR
24921: LD_EXP 47
24925: PUSH
24926: FOR_TO
24927: IFFALSE 24963
// begin if flags [ i ] then
24929: LD_VAR 0 4
24933: PUSH
24934: LD_VAR 0 8
24938: ARRAY
24939: IFFALSE 24961
// tmp := tmp & i & ; ;
24941: LD_ADDR_VAR 0 3
24945: PUSH
24946: LD_VAR 0 3
24950: PUSH
24951: LD_VAR 0 8
24955: STR
24956: PUSH
24957: LD_STRING ;
24959: STR
24960: ST_TO_ADDR
// end ;
24961: GO 24926
24963: POP
24964: POP
// for i = 1 to hardcoreCounter do
24965: LD_ADDR_VAR 0 8
24969: PUSH
24970: DOUBLE
24971: LD_INT 1
24973: DEC
24974: ST_TO_ADDR
24975: LD_EXP 48
24979: PUSH
24980: FOR_TO
24981: IFFALSE 25027
// begin if flags [ normalCounter + i ] then
24983: LD_VAR 0 4
24987: PUSH
24988: LD_EXP 47
24992: PUSH
24993: LD_VAR 0 8
24997: PLUS
24998: ARRAY
24999: IFFALSE 25025
// tmp := tmp & ( 100 + i ) & ; ;
25001: LD_ADDR_VAR 0 3
25005: PUSH
25006: LD_VAR 0 3
25010: PUSH
25011: LD_INT 100
25013: PUSH
25014: LD_VAR 0 8
25018: PLUS
25019: STR
25020: PUSH
25021: LD_STRING ;
25023: STR
25024: ST_TO_ADDR
// end ;
25025: GO 24980
25027: POP
25028: POP
// if tmp then
25029: LD_VAR 0 3
25033: IFFALSE 25045
// active := tmp ;
25035: LD_ADDR_VAR 0 7
25039: PUSH
25040: LD_VAR 0 3
25044: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25045: LD_STRING getStreamItemsFromMission("
25047: PUSH
25048: LD_VAR 0 5
25052: STR
25053: PUSH
25054: LD_STRING ","
25056: STR
25057: PUSH
25058: LD_VAR 0 6
25062: STR
25063: PUSH
25064: LD_STRING ","
25066: STR
25067: PUSH
25068: LD_VAR 0 7
25072: STR
25073: PUSH
25074: LD_STRING ")
25076: STR
25077: PPUSH
25078: CALL_OW 559
// end else
25082: GO 25091
// ToLua ( getStreamItemsFromMission("","","") ) ;
25084: LD_STRING getStreamItemsFromMission("","","")
25086: PPUSH
25087: CALL_OW 559
// end ;
25091: LD_VAR 0 2
25095: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25096: LD_EXP 46
25100: PUSH
25101: LD_EXP 51
25105: AND
25106: IFFALSE 25230
25108: GO 25110
25110: DISABLE
25111: LD_INT 0
25113: PPUSH
25114: PPUSH
// begin enable ;
25115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25116: LD_ADDR_VAR 0 2
25120: PUSH
25121: LD_INT 22
25123: PUSH
25124: LD_OWVAR 2
25128: PUSH
25129: EMPTY
25130: LIST
25131: LIST
25132: PUSH
25133: LD_INT 2
25135: PUSH
25136: LD_INT 34
25138: PUSH
25139: LD_INT 7
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 34
25148: PUSH
25149: LD_INT 45
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: LD_INT 34
25158: PUSH
25159: LD_INT 28
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: PUSH
25166: LD_INT 34
25168: PUSH
25169: LD_INT 47
25171: PUSH
25172: EMPTY
25173: LIST
25174: LIST
25175: PUSH
25176: EMPTY
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: PUSH
25183: EMPTY
25184: LIST
25185: LIST
25186: PPUSH
25187: CALL_OW 69
25191: ST_TO_ADDR
// if not tmp then
25192: LD_VAR 0 2
25196: NOT
25197: IFFALSE 25201
// exit ;
25199: GO 25230
// for i in tmp do
25201: LD_ADDR_VAR 0 1
25205: PUSH
25206: LD_VAR 0 2
25210: PUSH
25211: FOR_IN
25212: IFFALSE 25228
// begin SetLives ( i , 0 ) ;
25214: LD_VAR 0 1
25218: PPUSH
25219: LD_INT 0
25221: PPUSH
25222: CALL_OW 234
// end ;
25226: GO 25211
25228: POP
25229: POP
// end ;
25230: PPOPN 2
25232: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25233: LD_EXP 46
25237: PUSH
25238: LD_EXP 52
25242: AND
25243: IFFALSE 25327
25245: GO 25247
25247: DISABLE
25248: LD_INT 0
25250: PPUSH
25251: PPUSH
// begin enable ;
25252: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25253: LD_ADDR_VAR 0 2
25257: PUSH
25258: LD_INT 22
25260: PUSH
25261: LD_OWVAR 2
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 32
25272: PUSH
25273: LD_INT 3
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PPUSH
25284: CALL_OW 69
25288: ST_TO_ADDR
// if not tmp then
25289: LD_VAR 0 2
25293: NOT
25294: IFFALSE 25298
// exit ;
25296: GO 25327
// for i in tmp do
25298: LD_ADDR_VAR 0 1
25302: PUSH
25303: LD_VAR 0 2
25307: PUSH
25308: FOR_IN
25309: IFFALSE 25325
// begin SetLives ( i , 0 ) ;
25311: LD_VAR 0 1
25315: PPUSH
25316: LD_INT 0
25318: PPUSH
25319: CALL_OW 234
// end ;
25323: GO 25308
25325: POP
25326: POP
// end ;
25327: PPOPN 2
25329: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25330: LD_EXP 46
25334: PUSH
25335: LD_EXP 49
25339: AND
25340: IFFALSE 25433
25342: GO 25344
25344: DISABLE
25345: LD_INT 0
25347: PPUSH
// begin enable ;
25348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25349: LD_ADDR_VAR 0 1
25353: PUSH
25354: LD_INT 22
25356: PUSH
25357: LD_OWVAR 2
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: PUSH
25366: LD_INT 2
25368: PUSH
25369: LD_INT 25
25371: PUSH
25372: LD_INT 5
25374: PUSH
25375: EMPTY
25376: LIST
25377: LIST
25378: PUSH
25379: LD_INT 25
25381: PUSH
25382: LD_INT 9
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PUSH
25389: LD_INT 25
25391: PUSH
25392: LD_INT 8
25394: PUSH
25395: EMPTY
25396: LIST
25397: LIST
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: LIST
25403: LIST
25404: PUSH
25405: EMPTY
25406: LIST
25407: LIST
25408: PPUSH
25409: CALL_OW 69
25413: PUSH
25414: FOR_IN
25415: IFFALSE 25431
// begin SetClass ( i , 1 ) ;
25417: LD_VAR 0 1
25421: PPUSH
25422: LD_INT 1
25424: PPUSH
25425: CALL_OW 336
// end ;
25429: GO 25414
25431: POP
25432: POP
// end ;
25433: PPOPN 1
25435: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25436: LD_EXP 46
25440: PUSH
25441: LD_EXP 50
25445: AND
25446: PUSH
25447: LD_OWVAR 65
25451: PUSH
25452: LD_INT 7
25454: LESS
25455: AND
25456: IFFALSE 25470
25458: GO 25460
25460: DISABLE
// begin enable ;
25461: ENABLE
// game_speed := 7 ;
25462: LD_ADDR_OWVAR 65
25466: PUSH
25467: LD_INT 7
25469: ST_TO_ADDR
// end ;
25470: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25471: LD_EXP 46
25475: PUSH
25476: LD_EXP 53
25480: AND
25481: IFFALSE 25683
25483: GO 25485
25485: DISABLE
25486: LD_INT 0
25488: PPUSH
25489: PPUSH
25490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25491: LD_ADDR_VAR 0 3
25495: PUSH
25496: LD_INT 81
25498: PUSH
25499: LD_OWVAR 2
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 21
25510: PUSH
25511: LD_INT 1
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PPUSH
25522: CALL_OW 69
25526: ST_TO_ADDR
// if not tmp then
25527: LD_VAR 0 3
25531: NOT
25532: IFFALSE 25536
// exit ;
25534: GO 25683
// if tmp > 5 then
25536: LD_VAR 0 3
25540: PUSH
25541: LD_INT 5
25543: GREATER
25544: IFFALSE 25556
// k := 5 else
25546: LD_ADDR_VAR 0 2
25550: PUSH
25551: LD_INT 5
25553: ST_TO_ADDR
25554: GO 25566
// k := tmp ;
25556: LD_ADDR_VAR 0 2
25560: PUSH
25561: LD_VAR 0 3
25565: ST_TO_ADDR
// for i := 1 to k do
25566: LD_ADDR_VAR 0 1
25570: PUSH
25571: DOUBLE
25572: LD_INT 1
25574: DEC
25575: ST_TO_ADDR
25576: LD_VAR 0 2
25580: PUSH
25581: FOR_TO
25582: IFFALSE 25681
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25584: LD_VAR 0 3
25588: PUSH
25589: LD_VAR 0 1
25593: ARRAY
25594: PPUSH
25595: LD_VAR 0 1
25599: PUSH
25600: LD_INT 4
25602: MOD
25603: PUSH
25604: LD_INT 1
25606: PLUS
25607: PPUSH
25608: CALL_OW 259
25612: PUSH
25613: LD_INT 10
25615: LESS
25616: IFFALSE 25679
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25618: LD_VAR 0 3
25622: PUSH
25623: LD_VAR 0 1
25627: ARRAY
25628: PPUSH
25629: LD_VAR 0 1
25633: PUSH
25634: LD_INT 4
25636: MOD
25637: PUSH
25638: LD_INT 1
25640: PLUS
25641: PPUSH
25642: LD_VAR 0 3
25646: PUSH
25647: LD_VAR 0 1
25651: ARRAY
25652: PPUSH
25653: LD_VAR 0 1
25657: PUSH
25658: LD_INT 4
25660: MOD
25661: PUSH
25662: LD_INT 1
25664: PLUS
25665: PPUSH
25666: CALL_OW 259
25670: PUSH
25671: LD_INT 1
25673: PLUS
25674: PPUSH
25675: CALL_OW 237
25679: GO 25581
25681: POP
25682: POP
// end ;
25683: PPOPN 3
25685: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25686: LD_EXP 46
25690: PUSH
25691: LD_EXP 54
25695: AND
25696: IFFALSE 25716
25698: GO 25700
25700: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25701: LD_INT 4
25703: PPUSH
25704: LD_OWVAR 2
25708: PPUSH
25709: LD_INT 0
25711: PPUSH
25712: CALL_OW 324
25716: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25717: LD_EXP 46
25721: PUSH
25722: LD_EXP 83
25726: AND
25727: IFFALSE 25747
25729: GO 25731
25731: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25732: LD_INT 19
25734: PPUSH
25735: LD_OWVAR 2
25739: PPUSH
25740: LD_INT 0
25742: PPUSH
25743: CALL_OW 324
25747: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25748: LD_EXP 46
25752: PUSH
25753: LD_EXP 55
25757: AND
25758: IFFALSE 25860
25760: GO 25762
25762: DISABLE
25763: LD_INT 0
25765: PPUSH
25766: PPUSH
// begin enable ;
25767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25768: LD_ADDR_VAR 0 2
25772: PUSH
25773: LD_INT 22
25775: PUSH
25776: LD_OWVAR 2
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: PUSH
25785: LD_INT 2
25787: PUSH
25788: LD_INT 34
25790: PUSH
25791: LD_INT 11
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 34
25800: PUSH
25801: LD_INT 30
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: LIST
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: PPUSH
25817: CALL_OW 69
25821: ST_TO_ADDR
// if not tmp then
25822: LD_VAR 0 2
25826: NOT
25827: IFFALSE 25831
// exit ;
25829: GO 25860
// for i in tmp do
25831: LD_ADDR_VAR 0 1
25835: PUSH
25836: LD_VAR 0 2
25840: PUSH
25841: FOR_IN
25842: IFFALSE 25858
// begin SetLives ( i , 0 ) ;
25844: LD_VAR 0 1
25848: PPUSH
25849: LD_INT 0
25851: PPUSH
25852: CALL_OW 234
// end ;
25856: GO 25841
25858: POP
25859: POP
// end ;
25860: PPOPN 2
25862: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25863: LD_EXP 46
25867: PUSH
25868: LD_EXP 56
25872: AND
25873: IFFALSE 25893
25875: GO 25877
25877: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25878: LD_INT 32
25880: PPUSH
25881: LD_OWVAR 2
25885: PPUSH
25886: LD_INT 0
25888: PPUSH
25889: CALL_OW 324
25893: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25894: LD_EXP 46
25898: PUSH
25899: LD_EXP 57
25903: AND
25904: IFFALSE 26085
25906: GO 25908
25908: DISABLE
25909: LD_INT 0
25911: PPUSH
25912: PPUSH
25913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25914: LD_ADDR_VAR 0 2
25918: PUSH
25919: LD_INT 22
25921: PUSH
25922: LD_OWVAR 2
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 33
25933: PUSH
25934: LD_INT 3
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PPUSH
25945: CALL_OW 69
25949: ST_TO_ADDR
// if not tmp then
25950: LD_VAR 0 2
25954: NOT
25955: IFFALSE 25959
// exit ;
25957: GO 26085
// side := 0 ;
25959: LD_ADDR_VAR 0 3
25963: PUSH
25964: LD_INT 0
25966: ST_TO_ADDR
// for i := 1 to 8 do
25967: LD_ADDR_VAR 0 1
25971: PUSH
25972: DOUBLE
25973: LD_INT 1
25975: DEC
25976: ST_TO_ADDR
25977: LD_INT 8
25979: PUSH
25980: FOR_TO
25981: IFFALSE 26029
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25983: LD_OWVAR 2
25987: PUSH
25988: LD_VAR 0 1
25992: NONEQUAL
25993: PUSH
25994: LD_OWVAR 2
25998: PPUSH
25999: LD_VAR 0 1
26003: PPUSH
26004: CALL_OW 81
26008: PUSH
26009: LD_INT 2
26011: EQUAL
26012: AND
26013: IFFALSE 26027
// begin side := i ;
26015: LD_ADDR_VAR 0 3
26019: PUSH
26020: LD_VAR 0 1
26024: ST_TO_ADDR
// break ;
26025: GO 26029
// end ;
26027: GO 25980
26029: POP
26030: POP
// if not side then
26031: LD_VAR 0 3
26035: NOT
26036: IFFALSE 26040
// exit ;
26038: GO 26085
// for i := 1 to tmp do
26040: LD_ADDR_VAR 0 1
26044: PUSH
26045: DOUBLE
26046: LD_INT 1
26048: DEC
26049: ST_TO_ADDR
26050: LD_VAR 0 2
26054: PUSH
26055: FOR_TO
26056: IFFALSE 26083
// if Prob ( 60 ) then
26058: LD_INT 60
26060: PPUSH
26061: CALL_OW 13
26065: IFFALSE 26081
// SetSide ( i , side ) ;
26067: LD_VAR 0 1
26071: PPUSH
26072: LD_VAR 0 3
26076: PPUSH
26077: CALL_OW 235
26081: GO 26055
26083: POP
26084: POP
// end ;
26085: PPOPN 3
26087: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26088: LD_EXP 46
26092: PUSH
26093: LD_EXP 59
26097: AND
26098: IFFALSE 26217
26100: GO 26102
26102: DISABLE
26103: LD_INT 0
26105: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26106: LD_ADDR_VAR 0 1
26110: PUSH
26111: LD_INT 22
26113: PUSH
26114: LD_OWVAR 2
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 21
26125: PUSH
26126: LD_INT 1
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: LD_INT 3
26135: PUSH
26136: LD_INT 23
26138: PUSH
26139: LD_INT 0
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PUSH
26150: EMPTY
26151: LIST
26152: LIST
26153: LIST
26154: PPUSH
26155: CALL_OW 69
26159: PUSH
26160: FOR_IN
26161: IFFALSE 26215
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26163: LD_VAR 0 1
26167: PPUSH
26168: CALL_OW 257
26172: PUSH
26173: LD_INT 1
26175: PUSH
26176: LD_INT 2
26178: PUSH
26179: LD_INT 3
26181: PUSH
26182: LD_INT 4
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: IN
26191: IFFALSE 26213
// SetClass ( un , rand ( 1 , 4 ) ) ;
26193: LD_VAR 0 1
26197: PPUSH
26198: LD_INT 1
26200: PPUSH
26201: LD_INT 4
26203: PPUSH
26204: CALL_OW 12
26208: PPUSH
26209: CALL_OW 336
26213: GO 26160
26215: POP
26216: POP
// end ;
26217: PPOPN 1
26219: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26220: LD_EXP 46
26224: PUSH
26225: LD_EXP 58
26229: AND
26230: IFFALSE 26309
26232: GO 26234
26234: DISABLE
26235: LD_INT 0
26237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26238: LD_ADDR_VAR 0 1
26242: PUSH
26243: LD_INT 22
26245: PUSH
26246: LD_OWVAR 2
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 21
26257: PUSH
26258: LD_INT 3
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PPUSH
26269: CALL_OW 69
26273: ST_TO_ADDR
// if not tmp then
26274: LD_VAR 0 1
26278: NOT
26279: IFFALSE 26283
// exit ;
26281: GO 26309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26283: LD_VAR 0 1
26287: PUSH
26288: LD_INT 1
26290: PPUSH
26291: LD_VAR 0 1
26295: PPUSH
26296: CALL_OW 12
26300: ARRAY
26301: PPUSH
26302: LD_INT 100
26304: PPUSH
26305: CALL_OW 234
// end ;
26309: PPOPN 1
26311: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26312: LD_EXP 46
26316: PUSH
26317: LD_EXP 60
26321: AND
26322: IFFALSE 26420
26324: GO 26326
26326: DISABLE
26327: LD_INT 0
26329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26330: LD_ADDR_VAR 0 1
26334: PUSH
26335: LD_INT 22
26337: PUSH
26338: LD_OWVAR 2
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 21
26349: PUSH
26350: LD_INT 1
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PPUSH
26361: CALL_OW 69
26365: ST_TO_ADDR
// if not tmp then
26366: LD_VAR 0 1
26370: NOT
26371: IFFALSE 26375
// exit ;
26373: GO 26420
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26375: LD_VAR 0 1
26379: PUSH
26380: LD_INT 1
26382: PPUSH
26383: LD_VAR 0 1
26387: PPUSH
26388: CALL_OW 12
26392: ARRAY
26393: PPUSH
26394: LD_INT 1
26396: PPUSH
26397: LD_INT 4
26399: PPUSH
26400: CALL_OW 12
26404: PPUSH
26405: LD_INT 3000
26407: PPUSH
26408: LD_INT 9000
26410: PPUSH
26411: CALL_OW 12
26415: PPUSH
26416: CALL_OW 492
// end ;
26420: PPOPN 1
26422: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26423: LD_EXP 46
26427: PUSH
26428: LD_EXP 61
26432: AND
26433: IFFALSE 26453
26435: GO 26437
26437: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26438: LD_INT 1
26440: PPUSH
26441: LD_OWVAR 2
26445: PPUSH
26446: LD_INT 0
26448: PPUSH
26449: CALL_OW 324
26453: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26454: LD_EXP 46
26458: PUSH
26459: LD_EXP 62
26463: AND
26464: IFFALSE 26547
26466: GO 26468
26468: DISABLE
26469: LD_INT 0
26471: PPUSH
26472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26473: LD_ADDR_VAR 0 2
26477: PUSH
26478: LD_INT 22
26480: PUSH
26481: LD_OWVAR 2
26485: PUSH
26486: EMPTY
26487: LIST
26488: LIST
26489: PUSH
26490: LD_INT 21
26492: PUSH
26493: LD_INT 3
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: EMPTY
26501: LIST
26502: LIST
26503: PPUSH
26504: CALL_OW 69
26508: ST_TO_ADDR
// if not tmp then
26509: LD_VAR 0 2
26513: NOT
26514: IFFALSE 26518
// exit ;
26516: GO 26547
// for i in tmp do
26518: LD_ADDR_VAR 0 1
26522: PUSH
26523: LD_VAR 0 2
26527: PUSH
26528: FOR_IN
26529: IFFALSE 26545
// SetBLevel ( i , 10 ) ;
26531: LD_VAR 0 1
26535: PPUSH
26536: LD_INT 10
26538: PPUSH
26539: CALL_OW 241
26543: GO 26528
26545: POP
26546: POP
// end ;
26547: PPOPN 2
26549: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26550: LD_EXP 46
26554: PUSH
26555: LD_EXP 63
26559: AND
26560: IFFALSE 26671
26562: GO 26564
26564: DISABLE
26565: LD_INT 0
26567: PPUSH
26568: PPUSH
26569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26570: LD_ADDR_VAR 0 3
26574: PUSH
26575: LD_INT 22
26577: PUSH
26578: LD_OWVAR 2
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 25
26589: PUSH
26590: LD_INT 1
26592: PUSH
26593: EMPTY
26594: LIST
26595: LIST
26596: PUSH
26597: EMPTY
26598: LIST
26599: LIST
26600: PPUSH
26601: CALL_OW 69
26605: ST_TO_ADDR
// if not tmp then
26606: LD_VAR 0 3
26610: NOT
26611: IFFALSE 26615
// exit ;
26613: GO 26671
// un := tmp [ rand ( 1 , tmp ) ] ;
26615: LD_ADDR_VAR 0 2
26619: PUSH
26620: LD_VAR 0 3
26624: PUSH
26625: LD_INT 1
26627: PPUSH
26628: LD_VAR 0 3
26632: PPUSH
26633: CALL_OW 12
26637: ARRAY
26638: ST_TO_ADDR
// if Crawls ( un ) then
26639: LD_VAR 0 2
26643: PPUSH
26644: CALL_OW 318
26648: IFFALSE 26659
// ComWalk ( un ) ;
26650: LD_VAR 0 2
26654: PPUSH
26655: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26659: LD_VAR 0 2
26663: PPUSH
26664: LD_INT 5
26666: PPUSH
26667: CALL_OW 336
// end ;
26671: PPOPN 3
26673: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26674: LD_EXP 46
26678: PUSH
26679: LD_EXP 64
26683: AND
26684: PUSH
26685: LD_OWVAR 67
26689: PUSH
26690: LD_INT 4
26692: LESS
26693: AND
26694: IFFALSE 26713
26696: GO 26698
26698: DISABLE
// begin Difficulty := Difficulty + 1 ;
26699: LD_ADDR_OWVAR 67
26703: PUSH
26704: LD_OWVAR 67
26708: PUSH
26709: LD_INT 1
26711: PLUS
26712: ST_TO_ADDR
// end ;
26713: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26714: LD_EXP 46
26718: PUSH
26719: LD_EXP 65
26723: AND
26724: IFFALSE 26827
26726: GO 26728
26728: DISABLE
26729: LD_INT 0
26731: PPUSH
// begin for i := 1 to 5 do
26732: LD_ADDR_VAR 0 1
26736: PUSH
26737: DOUBLE
26738: LD_INT 1
26740: DEC
26741: ST_TO_ADDR
26742: LD_INT 5
26744: PUSH
26745: FOR_TO
26746: IFFALSE 26825
// begin uc_nation := nation_nature ;
26748: LD_ADDR_OWVAR 21
26752: PUSH
26753: LD_INT 0
26755: ST_TO_ADDR
// uc_side := 0 ;
26756: LD_ADDR_OWVAR 20
26760: PUSH
26761: LD_INT 0
26763: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26764: LD_ADDR_OWVAR 29
26768: PUSH
26769: LD_INT 12
26771: PUSH
26772: LD_INT 12
26774: PUSH
26775: EMPTY
26776: LIST
26777: LIST
26778: ST_TO_ADDR
// hc_agressivity := 20 ;
26779: LD_ADDR_OWVAR 35
26783: PUSH
26784: LD_INT 20
26786: ST_TO_ADDR
// hc_class := class_tiger ;
26787: LD_ADDR_OWVAR 28
26791: PUSH
26792: LD_INT 14
26794: ST_TO_ADDR
// hc_gallery :=  ;
26795: LD_ADDR_OWVAR 33
26799: PUSH
26800: LD_STRING 
26802: ST_TO_ADDR
// hc_name :=  ;
26803: LD_ADDR_OWVAR 26
26807: PUSH
26808: LD_STRING 
26810: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26811: CALL_OW 44
26815: PPUSH
26816: LD_INT 0
26818: PPUSH
26819: CALL_OW 51
// end ;
26823: GO 26745
26825: POP
26826: POP
// end ;
26827: PPOPN 1
26829: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26830: LD_EXP 46
26834: PUSH
26835: LD_EXP 66
26839: AND
26840: IFFALSE 26849
26842: GO 26844
26844: DISABLE
// StreamSibBomb ;
26845: CALL 26850 0 0
26849: END
// export function StreamSibBomb ; var i , x , y ; begin
26850: LD_INT 0
26852: PPUSH
26853: PPUSH
26854: PPUSH
26855: PPUSH
// result := false ;
26856: LD_ADDR_VAR 0 1
26860: PUSH
26861: LD_INT 0
26863: ST_TO_ADDR
// for i := 1 to 16 do
26864: LD_ADDR_VAR 0 2
26868: PUSH
26869: DOUBLE
26870: LD_INT 1
26872: DEC
26873: ST_TO_ADDR
26874: LD_INT 16
26876: PUSH
26877: FOR_TO
26878: IFFALSE 27077
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26880: LD_ADDR_VAR 0 3
26884: PUSH
26885: LD_INT 10
26887: PUSH
26888: LD_INT 20
26890: PUSH
26891: LD_INT 30
26893: PUSH
26894: LD_INT 40
26896: PUSH
26897: LD_INT 50
26899: PUSH
26900: LD_INT 60
26902: PUSH
26903: LD_INT 70
26905: PUSH
26906: LD_INT 80
26908: PUSH
26909: LD_INT 90
26911: PUSH
26912: LD_INT 100
26914: PUSH
26915: LD_INT 110
26917: PUSH
26918: LD_INT 120
26920: PUSH
26921: LD_INT 130
26923: PUSH
26924: LD_INT 140
26926: PUSH
26927: LD_INT 150
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 1
26949: PPUSH
26950: LD_INT 15
26952: PPUSH
26953: CALL_OW 12
26957: ARRAY
26958: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26959: LD_ADDR_VAR 0 4
26963: PUSH
26964: LD_INT 10
26966: PUSH
26967: LD_INT 20
26969: PUSH
26970: LD_INT 30
26972: PUSH
26973: LD_INT 40
26975: PUSH
26976: LD_INT 50
26978: PUSH
26979: LD_INT 60
26981: PUSH
26982: LD_INT 70
26984: PUSH
26985: LD_INT 80
26987: PUSH
26988: LD_INT 90
26990: PUSH
26991: LD_INT 100
26993: PUSH
26994: LD_INT 110
26996: PUSH
26997: LD_INT 120
26999: PUSH
27000: LD_INT 130
27002: PUSH
27003: LD_INT 140
27005: PUSH
27006: LD_INT 150
27008: PUSH
27009: EMPTY
27010: LIST
27011: LIST
27012: LIST
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 1
27028: PPUSH
27029: LD_INT 15
27031: PPUSH
27032: CALL_OW 12
27036: ARRAY
27037: ST_TO_ADDR
// if ValidHex ( x , y ) then
27038: LD_VAR 0 3
27042: PPUSH
27043: LD_VAR 0 4
27047: PPUSH
27048: CALL_OW 488
27052: IFFALSE 27075
// begin result := [ x , y ] ;
27054: LD_ADDR_VAR 0 1
27058: PUSH
27059: LD_VAR 0 3
27063: PUSH
27064: LD_VAR 0 4
27068: PUSH
27069: EMPTY
27070: LIST
27071: LIST
27072: ST_TO_ADDR
// break ;
27073: GO 27077
// end ; end ;
27075: GO 26877
27077: POP
27078: POP
// if result then
27079: LD_VAR 0 1
27083: IFFALSE 27143
// begin ToLua ( playSibBomb() ) ;
27085: LD_STRING playSibBomb()
27087: PPUSH
27088: CALL_OW 559
// wait ( 0 0$14 ) ;
27092: LD_INT 490
27094: PPUSH
27095: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27099: LD_VAR 0 1
27103: PUSH
27104: LD_INT 1
27106: ARRAY
27107: PPUSH
27108: LD_VAR 0 1
27112: PUSH
27113: LD_INT 2
27115: ARRAY
27116: PPUSH
27117: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27121: LD_VAR 0 1
27125: PUSH
27126: LD_INT 1
27128: ARRAY
27129: PPUSH
27130: LD_VAR 0 1
27134: PUSH
27135: LD_INT 2
27137: ARRAY
27138: PPUSH
27139: CALL_OW 429
// end ; end ;
27143: LD_VAR 0 1
27147: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27148: LD_EXP 46
27152: PUSH
27153: LD_EXP 68
27157: AND
27158: IFFALSE 27170
27160: GO 27162
27162: DISABLE
// YouLost (  ) ;
27163: LD_STRING 
27165: PPUSH
27166: CALL_OW 104
27170: END
// every 0 0$1 trigger StreamModeActive and sFog do
27171: LD_EXP 46
27175: PUSH
27176: LD_EXP 67
27180: AND
27181: IFFALSE 27195
27183: GO 27185
27185: DISABLE
// FogOff ( your_side ) ;
27186: LD_OWVAR 2
27190: PPUSH
27191: CALL_OW 344
27195: END
// every 0 0$1 trigger StreamModeActive and sSun do
27196: LD_EXP 46
27200: PUSH
27201: LD_EXP 69
27205: AND
27206: IFFALSE 27234
27208: GO 27210
27210: DISABLE
// begin solar_recharge_percent := 0 ;
27211: LD_ADDR_OWVAR 79
27215: PUSH
27216: LD_INT 0
27218: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27219: LD_INT 10500
27221: PPUSH
27222: CALL_OW 67
// solar_recharge_percent := 100 ;
27226: LD_ADDR_OWVAR 79
27230: PUSH
27231: LD_INT 100
27233: ST_TO_ADDR
// end ;
27234: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27235: LD_EXP 46
27239: PUSH
27240: LD_EXP 70
27244: AND
27245: IFFALSE 27484
27247: GO 27249
27249: DISABLE
27250: LD_INT 0
27252: PPUSH
27253: PPUSH
27254: PPUSH
// begin tmp := [ ] ;
27255: LD_ADDR_VAR 0 3
27259: PUSH
27260: EMPTY
27261: ST_TO_ADDR
// for i := 1 to 6 do
27262: LD_ADDR_VAR 0 1
27266: PUSH
27267: DOUBLE
27268: LD_INT 1
27270: DEC
27271: ST_TO_ADDR
27272: LD_INT 6
27274: PUSH
27275: FOR_TO
27276: IFFALSE 27381
// begin uc_nation := nation_nature ;
27278: LD_ADDR_OWVAR 21
27282: PUSH
27283: LD_INT 0
27285: ST_TO_ADDR
// uc_side := 0 ;
27286: LD_ADDR_OWVAR 20
27290: PUSH
27291: LD_INT 0
27293: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27294: LD_ADDR_OWVAR 29
27298: PUSH
27299: LD_INT 12
27301: PUSH
27302: LD_INT 12
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: ST_TO_ADDR
// hc_agressivity := 20 ;
27309: LD_ADDR_OWVAR 35
27313: PUSH
27314: LD_INT 20
27316: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27317: LD_ADDR_OWVAR 28
27321: PUSH
27322: LD_INT 17
27324: ST_TO_ADDR
// hc_gallery :=  ;
27325: LD_ADDR_OWVAR 33
27329: PUSH
27330: LD_STRING 
27332: ST_TO_ADDR
// hc_name :=  ;
27333: LD_ADDR_OWVAR 26
27337: PUSH
27338: LD_STRING 
27340: ST_TO_ADDR
// un := CreateHuman ;
27341: LD_ADDR_VAR 0 2
27345: PUSH
27346: CALL_OW 44
27350: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27351: LD_VAR 0 2
27355: PPUSH
27356: LD_INT 1
27358: PPUSH
27359: CALL_OW 51
// tmp := tmp ^ un ;
27363: LD_ADDR_VAR 0 3
27367: PUSH
27368: LD_VAR 0 3
27372: PUSH
27373: LD_VAR 0 2
27377: ADD
27378: ST_TO_ADDR
// end ;
27379: GO 27275
27381: POP
27382: POP
// repeat wait ( 0 0$1 ) ;
27383: LD_INT 35
27385: PPUSH
27386: CALL_OW 67
// for un in tmp do
27390: LD_ADDR_VAR 0 2
27394: PUSH
27395: LD_VAR 0 3
27399: PUSH
27400: FOR_IN
27401: IFFALSE 27475
// begin if IsDead ( un ) then
27403: LD_VAR 0 2
27407: PPUSH
27408: CALL_OW 301
27412: IFFALSE 27432
// begin tmp := tmp diff un ;
27414: LD_ADDR_VAR 0 3
27418: PUSH
27419: LD_VAR 0 3
27423: PUSH
27424: LD_VAR 0 2
27428: DIFF
27429: ST_TO_ADDR
// continue ;
27430: GO 27400
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27432: LD_VAR 0 2
27436: PPUSH
27437: LD_INT 3
27439: PUSH
27440: LD_INT 22
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PPUSH
27454: CALL_OW 69
27458: PPUSH
27459: LD_VAR 0 2
27463: PPUSH
27464: CALL_OW 74
27468: PPUSH
27469: CALL_OW 115
// end ;
27473: GO 27400
27475: POP
27476: POP
// until not tmp ;
27477: LD_VAR 0 3
27481: NOT
27482: IFFALSE 27383
// end ;
27484: PPOPN 3
27486: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27487: LD_EXP 46
27491: PUSH
27492: LD_EXP 71
27496: AND
27497: IFFALSE 27551
27499: GO 27501
27501: DISABLE
// begin ToLua ( displayTroll(); ) ;
27502: LD_STRING displayTroll();
27504: PPUSH
27505: CALL_OW 559
// wait ( 3 3$00 ) ;
27509: LD_INT 6300
27511: PPUSH
27512: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27516: LD_STRING hideTroll();
27518: PPUSH
27519: CALL_OW 559
// wait ( 1 1$00 ) ;
27523: LD_INT 2100
27525: PPUSH
27526: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27530: LD_STRING displayTroll();
27532: PPUSH
27533: CALL_OW 559
// wait ( 1 1$00 ) ;
27537: LD_INT 2100
27539: PPUSH
27540: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27544: LD_STRING hideTroll();
27546: PPUSH
27547: CALL_OW 559
// end ;
27551: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27552: LD_EXP 46
27556: PUSH
27557: LD_EXP 72
27561: AND
27562: IFFALSE 27625
27564: GO 27566
27566: DISABLE
27567: LD_INT 0
27569: PPUSH
// begin p := 0 ;
27570: LD_ADDR_VAR 0 1
27574: PUSH
27575: LD_INT 0
27577: ST_TO_ADDR
// repeat game_speed := 1 ;
27578: LD_ADDR_OWVAR 65
27582: PUSH
27583: LD_INT 1
27585: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27586: LD_INT 35
27588: PPUSH
27589: CALL_OW 67
// p := p + 1 ;
27593: LD_ADDR_VAR 0 1
27597: PUSH
27598: LD_VAR 0 1
27602: PUSH
27603: LD_INT 1
27605: PLUS
27606: ST_TO_ADDR
// until p >= 60 ;
27607: LD_VAR 0 1
27611: PUSH
27612: LD_INT 60
27614: GREATEREQUAL
27615: IFFALSE 27578
// game_speed := 4 ;
27617: LD_ADDR_OWVAR 65
27621: PUSH
27622: LD_INT 4
27624: ST_TO_ADDR
// end ;
27625: PPOPN 1
27627: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27628: LD_EXP 46
27632: PUSH
27633: LD_EXP 73
27637: AND
27638: IFFALSE 27784
27640: GO 27642
27642: DISABLE
27643: LD_INT 0
27645: PPUSH
27646: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27647: LD_ADDR_VAR 0 1
27651: PUSH
27652: LD_INT 22
27654: PUSH
27655: LD_OWVAR 2
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: PUSH
27664: LD_INT 2
27666: PUSH
27667: LD_INT 30
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 30
27679: PUSH
27680: LD_INT 1
27682: PUSH
27683: EMPTY
27684: LIST
27685: LIST
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PPUSH
27696: CALL_OW 69
27700: ST_TO_ADDR
// if not depot then
27701: LD_VAR 0 1
27705: NOT
27706: IFFALSE 27710
// exit ;
27708: GO 27784
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27710: LD_ADDR_VAR 0 2
27714: PUSH
27715: LD_VAR 0 1
27719: PUSH
27720: LD_INT 1
27722: PPUSH
27723: LD_VAR 0 1
27727: PPUSH
27728: CALL_OW 12
27732: ARRAY
27733: PPUSH
27734: CALL_OW 274
27738: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27739: LD_VAR 0 2
27743: PPUSH
27744: LD_INT 1
27746: PPUSH
27747: LD_INT 0
27749: PPUSH
27750: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27754: LD_VAR 0 2
27758: PPUSH
27759: LD_INT 2
27761: PPUSH
27762: LD_INT 0
27764: PPUSH
27765: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27769: LD_VAR 0 2
27773: PPUSH
27774: LD_INT 3
27776: PPUSH
27777: LD_INT 0
27779: PPUSH
27780: CALL_OW 277
// end ;
27784: PPOPN 2
27786: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27787: LD_EXP 46
27791: PUSH
27792: LD_EXP 74
27796: AND
27797: IFFALSE 27894
27799: GO 27801
27801: DISABLE
27802: LD_INT 0
27804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27805: LD_ADDR_VAR 0 1
27809: PUSH
27810: LD_INT 22
27812: PUSH
27813: LD_OWVAR 2
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: PUSH
27822: LD_INT 21
27824: PUSH
27825: LD_INT 1
27827: PUSH
27828: EMPTY
27829: LIST
27830: LIST
27831: PUSH
27832: LD_INT 3
27834: PUSH
27835: LD_INT 23
27837: PUSH
27838: LD_INT 0
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: LIST
27853: PPUSH
27854: CALL_OW 69
27858: ST_TO_ADDR
// if not tmp then
27859: LD_VAR 0 1
27863: NOT
27864: IFFALSE 27868
// exit ;
27866: GO 27894
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27868: LD_VAR 0 1
27872: PUSH
27873: LD_INT 1
27875: PPUSH
27876: LD_VAR 0 1
27880: PPUSH
27881: CALL_OW 12
27885: ARRAY
27886: PPUSH
27887: LD_INT 200
27889: PPUSH
27890: CALL_OW 234
// end ;
27894: PPOPN 1
27896: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27897: LD_EXP 46
27901: PUSH
27902: LD_EXP 75
27906: AND
27907: IFFALSE 27986
27909: GO 27911
27911: DISABLE
27912: LD_INT 0
27914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27915: LD_ADDR_VAR 0 1
27919: PUSH
27920: LD_INT 22
27922: PUSH
27923: LD_OWVAR 2
27927: PUSH
27928: EMPTY
27929: LIST
27930: LIST
27931: PUSH
27932: LD_INT 21
27934: PUSH
27935: LD_INT 2
27937: PUSH
27938: EMPTY
27939: LIST
27940: LIST
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PPUSH
27946: CALL_OW 69
27950: ST_TO_ADDR
// if not tmp then
27951: LD_VAR 0 1
27955: NOT
27956: IFFALSE 27960
// exit ;
27958: GO 27986
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27960: LD_VAR 0 1
27964: PUSH
27965: LD_INT 1
27967: PPUSH
27968: LD_VAR 0 1
27972: PPUSH
27973: CALL_OW 12
27977: ARRAY
27978: PPUSH
27979: LD_INT 60
27981: PPUSH
27982: CALL_OW 234
// end ;
27986: PPOPN 1
27988: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27989: LD_EXP 46
27993: PUSH
27994: LD_EXP 76
27998: AND
27999: IFFALSE 28098
28001: GO 28003
28003: DISABLE
28004: LD_INT 0
28006: PPUSH
28007: PPUSH
// begin enable ;
28008: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28009: LD_ADDR_VAR 0 1
28013: PUSH
28014: LD_INT 22
28016: PUSH
28017: LD_OWVAR 2
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 61
28028: PUSH
28029: EMPTY
28030: LIST
28031: PUSH
28032: LD_INT 33
28034: PUSH
28035: LD_INT 2
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: PPUSH
28047: CALL_OW 69
28051: ST_TO_ADDR
// if not tmp then
28052: LD_VAR 0 1
28056: NOT
28057: IFFALSE 28061
// exit ;
28059: GO 28098
// for i in tmp do
28061: LD_ADDR_VAR 0 2
28065: PUSH
28066: LD_VAR 0 1
28070: PUSH
28071: FOR_IN
28072: IFFALSE 28096
// if IsControledBy ( i ) then
28074: LD_VAR 0 2
28078: PPUSH
28079: CALL_OW 312
28083: IFFALSE 28094
// ComUnlink ( i ) ;
28085: LD_VAR 0 2
28089: PPUSH
28090: CALL_OW 136
28094: GO 28071
28096: POP
28097: POP
// end ;
28098: PPOPN 2
28100: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28101: LD_EXP 46
28105: PUSH
28106: LD_EXP 77
28110: AND
28111: IFFALSE 28251
28113: GO 28115
28115: DISABLE
28116: LD_INT 0
28118: PPUSH
28119: PPUSH
// begin ToLua ( displayPowell(); ) ;
28120: LD_STRING displayPowell();
28122: PPUSH
28123: CALL_OW 559
// uc_side := 0 ;
28127: LD_ADDR_OWVAR 20
28131: PUSH
28132: LD_INT 0
28134: ST_TO_ADDR
// uc_nation := 2 ;
28135: LD_ADDR_OWVAR 21
28139: PUSH
28140: LD_INT 2
28142: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28143: LD_ADDR_OWVAR 37
28147: PUSH
28148: LD_INT 14
28150: ST_TO_ADDR
// vc_engine := engine_siberite ;
28151: LD_ADDR_OWVAR 39
28155: PUSH
28156: LD_INT 3
28158: ST_TO_ADDR
// vc_control := control_apeman ;
28159: LD_ADDR_OWVAR 38
28163: PUSH
28164: LD_INT 5
28166: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28167: LD_ADDR_OWVAR 40
28171: PUSH
28172: LD_INT 29
28174: ST_TO_ADDR
// un := CreateVehicle ;
28175: LD_ADDR_VAR 0 2
28179: PUSH
28180: CALL_OW 45
28184: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28185: LD_VAR 0 2
28189: PPUSH
28190: LD_INT 1
28192: PPUSH
28193: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28197: LD_INT 35
28199: PPUSH
28200: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28204: LD_VAR 0 2
28208: PPUSH
28209: LD_INT 22
28211: PUSH
28212: LD_OWVAR 2
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PPUSH
28221: CALL_OW 69
28225: PPUSH
28226: LD_VAR 0 2
28230: PPUSH
28231: CALL_OW 74
28235: PPUSH
28236: CALL_OW 115
// until IsDead ( un ) ;
28240: LD_VAR 0 2
28244: PPUSH
28245: CALL_OW 301
28249: IFFALSE 28197
// end ;
28251: PPOPN 2
28253: END
// every 0 0$1 trigger StreamModeActive and sStu do
28254: LD_EXP 46
28258: PUSH
28259: LD_EXP 85
28263: AND
28264: IFFALSE 28280
28266: GO 28268
28268: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28269: LD_STRING displayStucuk();
28271: PPUSH
28272: CALL_OW 559
// ResetFog ;
28276: CALL_OW 335
// end ;
28280: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28281: LD_EXP 46
28285: PUSH
28286: LD_EXP 78
28290: AND
28291: IFFALSE 28432
28293: GO 28295
28295: DISABLE
28296: LD_INT 0
28298: PPUSH
28299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28300: LD_ADDR_VAR 0 2
28304: PUSH
28305: LD_INT 22
28307: PUSH
28308: LD_OWVAR 2
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PUSH
28317: LD_INT 21
28319: PUSH
28320: LD_INT 1
28322: PUSH
28323: EMPTY
28324: LIST
28325: LIST
28326: PUSH
28327: EMPTY
28328: LIST
28329: LIST
28330: PPUSH
28331: CALL_OW 69
28335: ST_TO_ADDR
// if not tmp then
28336: LD_VAR 0 2
28340: NOT
28341: IFFALSE 28345
// exit ;
28343: GO 28432
// un := tmp [ rand ( 1 , tmp ) ] ;
28345: LD_ADDR_VAR 0 1
28349: PUSH
28350: LD_VAR 0 2
28354: PUSH
28355: LD_INT 1
28357: PPUSH
28358: LD_VAR 0 2
28362: PPUSH
28363: CALL_OW 12
28367: ARRAY
28368: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28369: LD_VAR 0 1
28373: PPUSH
28374: LD_INT 0
28376: PPUSH
28377: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28381: LD_VAR 0 1
28385: PPUSH
28386: LD_OWVAR 3
28390: PUSH
28391: LD_VAR 0 1
28395: DIFF
28396: PPUSH
28397: LD_VAR 0 1
28401: PPUSH
28402: CALL_OW 74
28406: PPUSH
28407: CALL_OW 115
// wait ( 0 0$20 ) ;
28411: LD_INT 700
28413: PPUSH
28414: CALL_OW 67
// SetSide ( un , your_side ) ;
28418: LD_VAR 0 1
28422: PPUSH
28423: LD_OWVAR 2
28427: PPUSH
28428: CALL_OW 235
// end ;
28432: PPOPN 2
28434: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28435: LD_EXP 46
28439: PUSH
28440: LD_EXP 79
28444: AND
28445: IFFALSE 28551
28447: GO 28449
28449: DISABLE
28450: LD_INT 0
28452: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28453: LD_ADDR_VAR 0 1
28457: PUSH
28458: LD_INT 22
28460: PUSH
28461: LD_OWVAR 2
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: LD_INT 2
28472: PUSH
28473: LD_INT 30
28475: PUSH
28476: LD_INT 0
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 30
28485: PUSH
28486: LD_INT 1
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: LIST
28497: PUSH
28498: EMPTY
28499: LIST
28500: LIST
28501: PPUSH
28502: CALL_OW 69
28506: ST_TO_ADDR
// if not depot then
28507: LD_VAR 0 1
28511: NOT
28512: IFFALSE 28516
// exit ;
28514: GO 28551
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28516: LD_VAR 0 1
28520: PUSH
28521: LD_INT 1
28523: ARRAY
28524: PPUSH
28525: CALL_OW 250
28529: PPUSH
28530: LD_VAR 0 1
28534: PUSH
28535: LD_INT 1
28537: ARRAY
28538: PPUSH
28539: CALL_OW 251
28543: PPUSH
28544: LD_INT 70
28546: PPUSH
28547: CALL_OW 495
// end ;
28551: PPOPN 1
28553: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28554: LD_EXP 46
28558: PUSH
28559: LD_EXP 80
28563: AND
28564: IFFALSE 28775
28566: GO 28568
28568: DISABLE
28569: LD_INT 0
28571: PPUSH
28572: PPUSH
28573: PPUSH
28574: PPUSH
28575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28576: LD_ADDR_VAR 0 5
28580: PUSH
28581: LD_INT 22
28583: PUSH
28584: LD_OWVAR 2
28588: PUSH
28589: EMPTY
28590: LIST
28591: LIST
28592: PUSH
28593: LD_INT 21
28595: PUSH
28596: LD_INT 1
28598: PUSH
28599: EMPTY
28600: LIST
28601: LIST
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PPUSH
28607: CALL_OW 69
28611: ST_TO_ADDR
// if not tmp then
28612: LD_VAR 0 5
28616: NOT
28617: IFFALSE 28621
// exit ;
28619: GO 28775
// for i in tmp do
28621: LD_ADDR_VAR 0 1
28625: PUSH
28626: LD_VAR 0 5
28630: PUSH
28631: FOR_IN
28632: IFFALSE 28773
// begin d := rand ( 0 , 5 ) ;
28634: LD_ADDR_VAR 0 4
28638: PUSH
28639: LD_INT 0
28641: PPUSH
28642: LD_INT 5
28644: PPUSH
28645: CALL_OW 12
28649: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28650: LD_ADDR_VAR 0 2
28654: PUSH
28655: LD_VAR 0 1
28659: PPUSH
28660: CALL_OW 250
28664: PPUSH
28665: LD_VAR 0 4
28669: PPUSH
28670: LD_INT 3
28672: PPUSH
28673: LD_INT 12
28675: PPUSH
28676: CALL_OW 12
28680: PPUSH
28681: CALL_OW 272
28685: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28686: LD_ADDR_VAR 0 3
28690: PUSH
28691: LD_VAR 0 1
28695: PPUSH
28696: CALL_OW 251
28700: PPUSH
28701: LD_VAR 0 4
28705: PPUSH
28706: LD_INT 3
28708: PPUSH
28709: LD_INT 12
28711: PPUSH
28712: CALL_OW 12
28716: PPUSH
28717: CALL_OW 273
28721: ST_TO_ADDR
// if ValidHex ( x , y ) then
28722: LD_VAR 0 2
28726: PPUSH
28727: LD_VAR 0 3
28731: PPUSH
28732: CALL_OW 488
28736: IFFALSE 28771
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28738: LD_VAR 0 1
28742: PPUSH
28743: LD_VAR 0 2
28747: PPUSH
28748: LD_VAR 0 3
28752: PPUSH
28753: LD_INT 3
28755: PPUSH
28756: LD_INT 6
28758: PPUSH
28759: CALL_OW 12
28763: PPUSH
28764: LD_INT 1
28766: PPUSH
28767: CALL_OW 483
// end ;
28771: GO 28631
28773: POP
28774: POP
// end ;
28775: PPOPN 5
28777: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28778: LD_EXP 46
28782: PUSH
28783: LD_EXP 81
28787: AND
28788: IFFALSE 28882
28790: GO 28792
28792: DISABLE
28793: LD_INT 0
28795: PPUSH
28796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28797: LD_ADDR_VAR 0 2
28801: PUSH
28802: LD_INT 22
28804: PUSH
28805: LD_OWVAR 2
28809: PUSH
28810: EMPTY
28811: LIST
28812: LIST
28813: PUSH
28814: LD_INT 32
28816: PUSH
28817: LD_INT 1
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: PUSH
28824: LD_INT 21
28826: PUSH
28827: LD_INT 2
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: LIST
28838: PPUSH
28839: CALL_OW 69
28843: ST_TO_ADDR
// if not tmp then
28844: LD_VAR 0 2
28848: NOT
28849: IFFALSE 28853
// exit ;
28851: GO 28882
// for i in tmp do
28853: LD_ADDR_VAR 0 1
28857: PUSH
28858: LD_VAR 0 2
28862: PUSH
28863: FOR_IN
28864: IFFALSE 28880
// SetFuel ( i , 0 ) ;
28866: LD_VAR 0 1
28870: PPUSH
28871: LD_INT 0
28873: PPUSH
28874: CALL_OW 240
28878: GO 28863
28880: POP
28881: POP
// end ;
28882: PPOPN 2
28884: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28885: LD_EXP 46
28889: PUSH
28890: LD_EXP 82
28894: AND
28895: IFFALSE 28961
28897: GO 28899
28899: DISABLE
28900: LD_INT 0
28902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28903: LD_ADDR_VAR 0 1
28907: PUSH
28908: LD_INT 22
28910: PUSH
28911: LD_OWVAR 2
28915: PUSH
28916: EMPTY
28917: LIST
28918: LIST
28919: PUSH
28920: LD_INT 30
28922: PUSH
28923: LD_INT 29
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PPUSH
28934: CALL_OW 69
28938: ST_TO_ADDR
// if not tmp then
28939: LD_VAR 0 1
28943: NOT
28944: IFFALSE 28948
// exit ;
28946: GO 28961
// DestroyUnit ( tmp [ 1 ] ) ;
28948: LD_VAR 0 1
28952: PUSH
28953: LD_INT 1
28955: ARRAY
28956: PPUSH
28957: CALL_OW 65
// end ;
28961: PPOPN 1
28963: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28964: LD_EXP 46
28968: PUSH
28969: LD_EXP 84
28973: AND
28974: IFFALSE 29103
28976: GO 28978
28978: DISABLE
28979: LD_INT 0
28981: PPUSH
// begin uc_side := 0 ;
28982: LD_ADDR_OWVAR 20
28986: PUSH
28987: LD_INT 0
28989: ST_TO_ADDR
// uc_nation := nation_arabian ;
28990: LD_ADDR_OWVAR 21
28994: PUSH
28995: LD_INT 2
28997: ST_TO_ADDR
// hc_gallery :=  ;
28998: LD_ADDR_OWVAR 33
29002: PUSH
29003: LD_STRING 
29005: ST_TO_ADDR
// hc_name :=  ;
29006: LD_ADDR_OWVAR 26
29010: PUSH
29011: LD_STRING 
29013: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29014: LD_INT 1
29016: PPUSH
29017: LD_INT 11
29019: PPUSH
29020: LD_INT 10
29022: PPUSH
29023: CALL_OW 380
// un := CreateHuman ;
29027: LD_ADDR_VAR 0 1
29031: PUSH
29032: CALL_OW 44
29036: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29037: LD_VAR 0 1
29041: PPUSH
29042: LD_INT 1
29044: PPUSH
29045: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29049: LD_INT 35
29051: PPUSH
29052: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29056: LD_VAR 0 1
29060: PPUSH
29061: LD_INT 22
29063: PUSH
29064: LD_OWVAR 2
29068: PUSH
29069: EMPTY
29070: LIST
29071: LIST
29072: PPUSH
29073: CALL_OW 69
29077: PPUSH
29078: LD_VAR 0 1
29082: PPUSH
29083: CALL_OW 74
29087: PPUSH
29088: CALL_OW 115
// until IsDead ( un ) ;
29092: LD_VAR 0 1
29096: PPUSH
29097: CALL_OW 301
29101: IFFALSE 29049
// end ;
29103: PPOPN 1
29105: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29106: LD_EXP 46
29110: PUSH
29111: LD_EXP 86
29115: AND
29116: IFFALSE 29128
29118: GO 29120
29120: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29121: LD_STRING earthquake(getX(game), 0, 32)
29123: PPUSH
29124: CALL_OW 559
29128: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29129: LD_EXP 46
29133: PUSH
29134: LD_EXP 87
29138: AND
29139: IFFALSE 29230
29141: GO 29143
29143: DISABLE
29144: LD_INT 0
29146: PPUSH
// begin enable ;
29147: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29148: LD_ADDR_VAR 0 1
29152: PUSH
29153: LD_INT 22
29155: PUSH
29156: LD_OWVAR 2
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: PUSH
29165: LD_INT 21
29167: PUSH
29168: LD_INT 2
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 33
29177: PUSH
29178: LD_INT 3
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: LIST
29189: PPUSH
29190: CALL_OW 69
29194: ST_TO_ADDR
// if not tmp then
29195: LD_VAR 0 1
29199: NOT
29200: IFFALSE 29204
// exit ;
29202: GO 29230
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29204: LD_VAR 0 1
29208: PUSH
29209: LD_INT 1
29211: PPUSH
29212: LD_VAR 0 1
29216: PPUSH
29217: CALL_OW 12
29221: ARRAY
29222: PPUSH
29223: LD_INT 1
29225: PPUSH
29226: CALL_OW 234
// end ;
29230: PPOPN 1
29232: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29233: LD_EXP 46
29237: PUSH
29238: LD_EXP 88
29242: AND
29243: IFFALSE 29384
29245: GO 29247
29247: DISABLE
29248: LD_INT 0
29250: PPUSH
29251: PPUSH
29252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29253: LD_ADDR_VAR 0 3
29257: PUSH
29258: LD_INT 22
29260: PUSH
29261: LD_OWVAR 2
29265: PUSH
29266: EMPTY
29267: LIST
29268: LIST
29269: PUSH
29270: LD_INT 25
29272: PUSH
29273: LD_INT 1
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PPUSH
29284: CALL_OW 69
29288: ST_TO_ADDR
// if not tmp then
29289: LD_VAR 0 3
29293: NOT
29294: IFFALSE 29298
// exit ;
29296: GO 29384
// un := tmp [ rand ( 1 , tmp ) ] ;
29298: LD_ADDR_VAR 0 2
29302: PUSH
29303: LD_VAR 0 3
29307: PUSH
29308: LD_INT 1
29310: PPUSH
29311: LD_VAR 0 3
29315: PPUSH
29316: CALL_OW 12
29320: ARRAY
29321: ST_TO_ADDR
// if Crawls ( un ) then
29322: LD_VAR 0 2
29326: PPUSH
29327: CALL_OW 318
29331: IFFALSE 29342
// ComWalk ( un ) ;
29333: LD_VAR 0 2
29337: PPUSH
29338: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29342: LD_VAR 0 2
29346: PPUSH
29347: LD_INT 9
29349: PPUSH
29350: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29354: LD_INT 28
29356: PPUSH
29357: LD_OWVAR 2
29361: PPUSH
29362: LD_INT 2
29364: PPUSH
29365: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29369: LD_INT 29
29371: PPUSH
29372: LD_OWVAR 2
29376: PPUSH
29377: LD_INT 2
29379: PPUSH
29380: CALL_OW 322
// end ;
29384: PPOPN 3
29386: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29387: LD_EXP 46
29391: PUSH
29392: LD_EXP 89
29396: AND
29397: IFFALSE 29508
29399: GO 29401
29401: DISABLE
29402: LD_INT 0
29404: PPUSH
29405: PPUSH
29406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29407: LD_ADDR_VAR 0 3
29411: PUSH
29412: LD_INT 22
29414: PUSH
29415: LD_OWVAR 2
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 25
29426: PUSH
29427: LD_INT 1
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PPUSH
29438: CALL_OW 69
29442: ST_TO_ADDR
// if not tmp then
29443: LD_VAR 0 3
29447: NOT
29448: IFFALSE 29452
// exit ;
29450: GO 29508
// un := tmp [ rand ( 1 , tmp ) ] ;
29452: LD_ADDR_VAR 0 2
29456: PUSH
29457: LD_VAR 0 3
29461: PUSH
29462: LD_INT 1
29464: PPUSH
29465: LD_VAR 0 3
29469: PPUSH
29470: CALL_OW 12
29474: ARRAY
29475: ST_TO_ADDR
// if Crawls ( un ) then
29476: LD_VAR 0 2
29480: PPUSH
29481: CALL_OW 318
29485: IFFALSE 29496
// ComWalk ( un ) ;
29487: LD_VAR 0 2
29491: PPUSH
29492: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29496: LD_VAR 0 2
29500: PPUSH
29501: LD_INT 8
29503: PPUSH
29504: CALL_OW 336
// end ;
29508: PPOPN 3
29510: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29511: LD_EXP 46
29515: PUSH
29516: LD_EXP 90
29520: AND
29521: IFFALSE 29665
29523: GO 29525
29525: DISABLE
29526: LD_INT 0
29528: PPUSH
29529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29530: LD_ADDR_VAR 0 2
29534: PUSH
29535: LD_INT 22
29537: PUSH
29538: LD_OWVAR 2
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: PUSH
29547: LD_INT 21
29549: PUSH
29550: LD_INT 2
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: PUSH
29557: LD_INT 2
29559: PUSH
29560: LD_INT 34
29562: PUSH
29563: LD_INT 12
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 34
29572: PUSH
29573: LD_INT 51
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 34
29582: PUSH
29583: LD_INT 32
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: LIST
29594: LIST
29595: PUSH
29596: EMPTY
29597: LIST
29598: LIST
29599: LIST
29600: PPUSH
29601: CALL_OW 69
29605: ST_TO_ADDR
// if not tmp then
29606: LD_VAR 0 2
29610: NOT
29611: IFFALSE 29615
// exit ;
29613: GO 29665
// for i in tmp do
29615: LD_ADDR_VAR 0 1
29619: PUSH
29620: LD_VAR 0 2
29624: PUSH
29625: FOR_IN
29626: IFFALSE 29663
// if GetCargo ( i , mat_artifact ) = 0 then
29628: LD_VAR 0 1
29632: PPUSH
29633: LD_INT 4
29635: PPUSH
29636: CALL_OW 289
29640: PUSH
29641: LD_INT 0
29643: EQUAL
29644: IFFALSE 29661
// SetCargo ( i , mat_siberit , 100 ) ;
29646: LD_VAR 0 1
29650: PPUSH
29651: LD_INT 3
29653: PPUSH
29654: LD_INT 100
29656: PPUSH
29657: CALL_OW 290
29661: GO 29625
29663: POP
29664: POP
// end ;
29665: PPOPN 2
29667: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29668: LD_EXP 46
29672: PUSH
29673: LD_EXP 91
29677: AND
29678: IFFALSE 29861
29680: GO 29682
29682: DISABLE
29683: LD_INT 0
29685: PPUSH
29686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29687: LD_ADDR_VAR 0 2
29691: PUSH
29692: LD_INT 22
29694: PUSH
29695: LD_OWVAR 2
29699: PUSH
29700: EMPTY
29701: LIST
29702: LIST
29703: PPUSH
29704: CALL_OW 69
29708: ST_TO_ADDR
// if not tmp then
29709: LD_VAR 0 2
29713: NOT
29714: IFFALSE 29718
// exit ;
29716: GO 29861
// for i := 1 to 2 do
29718: LD_ADDR_VAR 0 1
29722: PUSH
29723: DOUBLE
29724: LD_INT 1
29726: DEC
29727: ST_TO_ADDR
29728: LD_INT 2
29730: PUSH
29731: FOR_TO
29732: IFFALSE 29859
// begin uc_side := your_side ;
29734: LD_ADDR_OWVAR 20
29738: PUSH
29739: LD_OWVAR 2
29743: ST_TO_ADDR
// uc_nation := nation_american ;
29744: LD_ADDR_OWVAR 21
29748: PUSH
29749: LD_INT 1
29751: ST_TO_ADDR
// vc_chassis := us_morphling ;
29752: LD_ADDR_OWVAR 37
29756: PUSH
29757: LD_INT 5
29759: ST_TO_ADDR
// vc_engine := engine_siberite ;
29760: LD_ADDR_OWVAR 39
29764: PUSH
29765: LD_INT 3
29767: ST_TO_ADDR
// vc_control := control_computer ;
29768: LD_ADDR_OWVAR 38
29772: PUSH
29773: LD_INT 3
29775: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29776: LD_ADDR_OWVAR 40
29780: PUSH
29781: LD_INT 10
29783: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29784: LD_VAR 0 2
29788: PUSH
29789: LD_INT 1
29791: ARRAY
29792: PPUSH
29793: CALL_OW 310
29797: NOT
29798: IFFALSE 29845
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29800: CALL_OW 45
29804: PPUSH
29805: LD_VAR 0 2
29809: PUSH
29810: LD_INT 1
29812: ARRAY
29813: PPUSH
29814: CALL_OW 250
29818: PPUSH
29819: LD_VAR 0 2
29823: PUSH
29824: LD_INT 1
29826: ARRAY
29827: PPUSH
29828: CALL_OW 251
29832: PPUSH
29833: LD_INT 12
29835: PPUSH
29836: LD_INT 1
29838: PPUSH
29839: CALL_OW 50
29843: GO 29857
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29845: CALL_OW 45
29849: PPUSH
29850: LD_INT 1
29852: PPUSH
29853: CALL_OW 51
// end ;
29857: GO 29731
29859: POP
29860: POP
// end ;
29861: PPOPN 2
29863: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29864: LD_EXP 46
29868: PUSH
29869: LD_EXP 92
29873: AND
29874: IFFALSE 30096
29876: GO 29878
29878: DISABLE
29879: LD_INT 0
29881: PPUSH
29882: PPUSH
29883: PPUSH
29884: PPUSH
29885: PPUSH
29886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29887: LD_ADDR_VAR 0 6
29891: PUSH
29892: LD_INT 22
29894: PUSH
29895: LD_OWVAR 2
29899: PUSH
29900: EMPTY
29901: LIST
29902: LIST
29903: PUSH
29904: LD_INT 21
29906: PUSH
29907: LD_INT 1
29909: PUSH
29910: EMPTY
29911: LIST
29912: LIST
29913: PUSH
29914: LD_INT 3
29916: PUSH
29917: LD_INT 23
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: EMPTY
29928: LIST
29929: LIST
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: LIST
29935: PPUSH
29936: CALL_OW 69
29940: ST_TO_ADDR
// if not tmp then
29941: LD_VAR 0 6
29945: NOT
29946: IFFALSE 29950
// exit ;
29948: GO 30096
// s1 := rand ( 1 , 4 ) ;
29950: LD_ADDR_VAR 0 2
29954: PUSH
29955: LD_INT 1
29957: PPUSH
29958: LD_INT 4
29960: PPUSH
29961: CALL_OW 12
29965: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29966: LD_ADDR_VAR 0 4
29970: PUSH
29971: LD_VAR 0 6
29975: PUSH
29976: LD_INT 1
29978: ARRAY
29979: PPUSH
29980: LD_VAR 0 2
29984: PPUSH
29985: CALL_OW 259
29989: ST_TO_ADDR
// if s1 = 1 then
29990: LD_VAR 0 2
29994: PUSH
29995: LD_INT 1
29997: EQUAL
29998: IFFALSE 30018
// s2 := rand ( 2 , 4 ) else
30000: LD_ADDR_VAR 0 3
30004: PUSH
30005: LD_INT 2
30007: PPUSH
30008: LD_INT 4
30010: PPUSH
30011: CALL_OW 12
30015: ST_TO_ADDR
30016: GO 30026
// s2 := 1 ;
30018: LD_ADDR_VAR 0 3
30022: PUSH
30023: LD_INT 1
30025: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30026: LD_ADDR_VAR 0 5
30030: PUSH
30031: LD_VAR 0 6
30035: PUSH
30036: LD_INT 1
30038: ARRAY
30039: PPUSH
30040: LD_VAR 0 3
30044: PPUSH
30045: CALL_OW 259
30049: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30050: LD_VAR 0 6
30054: PUSH
30055: LD_INT 1
30057: ARRAY
30058: PPUSH
30059: LD_VAR 0 2
30063: PPUSH
30064: LD_VAR 0 5
30068: PPUSH
30069: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30073: LD_VAR 0 6
30077: PUSH
30078: LD_INT 1
30080: ARRAY
30081: PPUSH
30082: LD_VAR 0 3
30086: PPUSH
30087: LD_VAR 0 4
30091: PPUSH
30092: CALL_OW 237
// end ;
30096: PPOPN 6
30098: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30099: LD_EXP 46
30103: PUSH
30104: LD_EXP 93
30108: AND
30109: IFFALSE 30188
30111: GO 30113
30113: DISABLE
30114: LD_INT 0
30116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30117: LD_ADDR_VAR 0 1
30121: PUSH
30122: LD_INT 22
30124: PUSH
30125: LD_OWVAR 2
30129: PUSH
30130: EMPTY
30131: LIST
30132: LIST
30133: PUSH
30134: LD_INT 30
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: EMPTY
30141: LIST
30142: LIST
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PPUSH
30148: CALL_OW 69
30152: ST_TO_ADDR
// if not tmp then
30153: LD_VAR 0 1
30157: NOT
30158: IFFALSE 30162
// exit ;
30160: GO 30188
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30162: LD_VAR 0 1
30166: PUSH
30167: LD_INT 1
30169: PPUSH
30170: LD_VAR 0 1
30174: PPUSH
30175: CALL_OW 12
30179: ARRAY
30180: PPUSH
30181: LD_INT 1
30183: PPUSH
30184: CALL_OW 234
// end ;
30188: PPOPN 1
30190: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30191: LD_EXP 46
30195: PUSH
30196: LD_EXP 94
30200: AND
30201: IFFALSE 30313
30203: GO 30205
30205: DISABLE
30206: LD_INT 0
30208: PPUSH
30209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30210: LD_ADDR_VAR 0 2
30214: PUSH
30215: LD_INT 22
30217: PUSH
30218: LD_OWVAR 2
30222: PUSH
30223: EMPTY
30224: LIST
30225: LIST
30226: PUSH
30227: LD_INT 2
30229: PUSH
30230: LD_INT 30
30232: PUSH
30233: LD_INT 27
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 30
30242: PUSH
30243: LD_INT 26
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 30
30252: PUSH
30253: LD_INT 28
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PPUSH
30270: CALL_OW 69
30274: ST_TO_ADDR
// if not tmp then
30275: LD_VAR 0 2
30279: NOT
30280: IFFALSE 30284
// exit ;
30282: GO 30313
// for i in tmp do
30284: LD_ADDR_VAR 0 1
30288: PUSH
30289: LD_VAR 0 2
30293: PUSH
30294: FOR_IN
30295: IFFALSE 30311
// SetLives ( i , 1 ) ;
30297: LD_VAR 0 1
30301: PPUSH
30302: LD_INT 1
30304: PPUSH
30305: CALL_OW 234
30309: GO 30294
30311: POP
30312: POP
// end ;
30313: PPOPN 2
30315: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30316: LD_EXP 46
30320: PUSH
30321: LD_EXP 95
30325: AND
30326: IFFALSE 30613
30328: GO 30330
30330: DISABLE
30331: LD_INT 0
30333: PPUSH
30334: PPUSH
30335: PPUSH
// begin i := rand ( 1 , 7 ) ;
30336: LD_ADDR_VAR 0 1
30340: PUSH
30341: LD_INT 1
30343: PPUSH
30344: LD_INT 7
30346: PPUSH
30347: CALL_OW 12
30351: ST_TO_ADDR
// case i of 1 :
30352: LD_VAR 0 1
30356: PUSH
30357: LD_INT 1
30359: DOUBLE
30360: EQUAL
30361: IFTRUE 30365
30363: GO 30375
30365: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30366: LD_STRING earthquake(getX(game), 0, 32)
30368: PPUSH
30369: CALL_OW 559
30373: GO 30613
30375: LD_INT 2
30377: DOUBLE
30378: EQUAL
30379: IFTRUE 30383
30381: GO 30397
30383: POP
// begin ToLua ( displayStucuk(); ) ;
30384: LD_STRING displayStucuk();
30386: PPUSH
30387: CALL_OW 559
// ResetFog ;
30391: CALL_OW 335
// end ; 3 :
30395: GO 30613
30397: LD_INT 3
30399: DOUBLE
30400: EQUAL
30401: IFTRUE 30405
30403: GO 30509
30405: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30406: LD_ADDR_VAR 0 2
30410: PUSH
30411: LD_INT 22
30413: PUSH
30414: LD_OWVAR 2
30418: PUSH
30419: EMPTY
30420: LIST
30421: LIST
30422: PUSH
30423: LD_INT 25
30425: PUSH
30426: LD_INT 1
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PPUSH
30437: CALL_OW 69
30441: ST_TO_ADDR
// if not tmp then
30442: LD_VAR 0 2
30446: NOT
30447: IFFALSE 30451
// exit ;
30449: GO 30613
// un := tmp [ rand ( 1 , tmp ) ] ;
30451: LD_ADDR_VAR 0 3
30455: PUSH
30456: LD_VAR 0 2
30460: PUSH
30461: LD_INT 1
30463: PPUSH
30464: LD_VAR 0 2
30468: PPUSH
30469: CALL_OW 12
30473: ARRAY
30474: ST_TO_ADDR
// if Crawls ( un ) then
30475: LD_VAR 0 3
30479: PPUSH
30480: CALL_OW 318
30484: IFFALSE 30495
// ComWalk ( un ) ;
30486: LD_VAR 0 3
30490: PPUSH
30491: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30495: LD_VAR 0 3
30499: PPUSH
30500: LD_INT 8
30502: PPUSH
30503: CALL_OW 336
// end ; 4 :
30507: GO 30613
30509: LD_INT 4
30511: DOUBLE
30512: EQUAL
30513: IFTRUE 30517
30515: GO 30591
30517: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30518: LD_ADDR_VAR 0 2
30522: PUSH
30523: LD_INT 22
30525: PUSH
30526: LD_OWVAR 2
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 30
30537: PUSH
30538: LD_INT 29
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PPUSH
30549: CALL_OW 69
30553: ST_TO_ADDR
// if not tmp then
30554: LD_VAR 0 2
30558: NOT
30559: IFFALSE 30563
// exit ;
30561: GO 30613
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30563: LD_VAR 0 2
30567: PUSH
30568: LD_INT 1
30570: ARRAY
30571: PPUSH
30572: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30576: LD_VAR 0 2
30580: PUSH
30581: LD_INT 1
30583: ARRAY
30584: PPUSH
30585: CALL_OW 65
// end ; 5 .. 7 :
30589: GO 30613
30591: LD_INT 5
30593: DOUBLE
30594: GREATEREQUAL
30595: IFFALSE 30603
30597: LD_INT 7
30599: DOUBLE
30600: LESSEQUAL
30601: IFTRUE 30605
30603: GO 30612
30605: POP
// StreamSibBomb ; end ;
30606: CALL 26850 0 0
30610: GO 30613
30612: POP
// end ;
30613: PPOPN 3
30615: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30616: LD_EXP 46
30620: PUSH
30621: LD_EXP 96
30625: AND
30626: IFFALSE 30782
30628: GO 30630
30630: DISABLE
30631: LD_INT 0
30633: PPUSH
30634: PPUSH
30635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30636: LD_ADDR_VAR 0 2
30640: PUSH
30641: LD_INT 81
30643: PUSH
30644: LD_OWVAR 2
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: PUSH
30653: LD_INT 2
30655: PUSH
30656: LD_INT 21
30658: PUSH
30659: LD_INT 1
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: PUSH
30666: LD_INT 21
30668: PUSH
30669: LD_INT 2
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: LIST
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PPUSH
30685: CALL_OW 69
30689: ST_TO_ADDR
// if not tmp then
30690: LD_VAR 0 2
30694: NOT
30695: IFFALSE 30699
// exit ;
30697: GO 30782
// p := 0 ;
30699: LD_ADDR_VAR 0 3
30703: PUSH
30704: LD_INT 0
30706: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30707: LD_INT 35
30709: PPUSH
30710: CALL_OW 67
// p := p + 1 ;
30714: LD_ADDR_VAR 0 3
30718: PUSH
30719: LD_VAR 0 3
30723: PUSH
30724: LD_INT 1
30726: PLUS
30727: ST_TO_ADDR
// for i in tmp do
30728: LD_ADDR_VAR 0 1
30732: PUSH
30733: LD_VAR 0 2
30737: PUSH
30738: FOR_IN
30739: IFFALSE 30770
// if GetLives ( i ) < 1000 then
30741: LD_VAR 0 1
30745: PPUSH
30746: CALL_OW 256
30750: PUSH
30751: LD_INT 1000
30753: LESS
30754: IFFALSE 30768
// SetLives ( i , 1000 ) ;
30756: LD_VAR 0 1
30760: PPUSH
30761: LD_INT 1000
30763: PPUSH
30764: CALL_OW 234
30768: GO 30738
30770: POP
30771: POP
// until p > 20 ;
30772: LD_VAR 0 3
30776: PUSH
30777: LD_INT 20
30779: GREATER
30780: IFFALSE 30707
// end ;
30782: PPOPN 3
30784: END
// every 0 0$1 trigger StreamModeActive and sTime do
30785: LD_EXP 46
30789: PUSH
30790: LD_EXP 97
30794: AND
30795: IFFALSE 30830
30797: GO 30799
30799: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30800: LD_INT 28
30802: PPUSH
30803: LD_OWVAR 2
30807: PPUSH
30808: LD_INT 2
30810: PPUSH
30811: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30815: LD_INT 30
30817: PPUSH
30818: LD_OWVAR 2
30822: PPUSH
30823: LD_INT 2
30825: PPUSH
30826: CALL_OW 322
// end ;
30830: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30831: LD_EXP 46
30835: PUSH
30836: LD_EXP 98
30840: AND
30841: IFFALSE 30962
30843: GO 30845
30845: DISABLE
30846: LD_INT 0
30848: PPUSH
30849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30850: LD_ADDR_VAR 0 2
30854: PUSH
30855: LD_INT 22
30857: PUSH
30858: LD_OWVAR 2
30862: PUSH
30863: EMPTY
30864: LIST
30865: LIST
30866: PUSH
30867: LD_INT 21
30869: PUSH
30870: LD_INT 1
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 3
30879: PUSH
30880: LD_INT 23
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: EMPTY
30887: LIST
30888: LIST
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: LIST
30898: PPUSH
30899: CALL_OW 69
30903: ST_TO_ADDR
// if not tmp then
30904: LD_VAR 0 2
30908: NOT
30909: IFFALSE 30913
// exit ;
30911: GO 30962
// for i in tmp do
30913: LD_ADDR_VAR 0 1
30917: PUSH
30918: LD_VAR 0 2
30922: PUSH
30923: FOR_IN
30924: IFFALSE 30960
// begin if Crawls ( i ) then
30926: LD_VAR 0 1
30930: PPUSH
30931: CALL_OW 318
30935: IFFALSE 30946
// ComWalk ( i ) ;
30937: LD_VAR 0 1
30941: PPUSH
30942: CALL_OW 138
// SetClass ( i , 2 ) ;
30946: LD_VAR 0 1
30950: PPUSH
30951: LD_INT 2
30953: PPUSH
30954: CALL_OW 336
// end ;
30958: GO 30923
30960: POP
30961: POP
// end ;
30962: PPOPN 2
30964: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30965: LD_EXP 46
30969: PUSH
30970: LD_EXP 99
30974: AND
30975: IFFALSE 31263
30977: GO 30979
30979: DISABLE
30980: LD_INT 0
30982: PPUSH
30983: PPUSH
30984: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30985: LD_OWVAR 2
30989: PPUSH
30990: LD_INT 9
30992: PPUSH
30993: LD_INT 1
30995: PPUSH
30996: LD_INT 1
30998: PPUSH
30999: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31003: LD_INT 9
31005: PPUSH
31006: LD_OWVAR 2
31010: PPUSH
31011: CALL_OW 343
// uc_side := 9 ;
31015: LD_ADDR_OWVAR 20
31019: PUSH
31020: LD_INT 9
31022: ST_TO_ADDR
// uc_nation := 2 ;
31023: LD_ADDR_OWVAR 21
31027: PUSH
31028: LD_INT 2
31030: ST_TO_ADDR
// hc_name := Dark Warrior ;
31031: LD_ADDR_OWVAR 26
31035: PUSH
31036: LD_STRING Dark Warrior
31038: ST_TO_ADDR
// hc_gallery :=  ;
31039: LD_ADDR_OWVAR 33
31043: PUSH
31044: LD_STRING 
31046: ST_TO_ADDR
// hc_noskilllimit := true ;
31047: LD_ADDR_OWVAR 76
31051: PUSH
31052: LD_INT 1
31054: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31055: LD_ADDR_OWVAR 31
31059: PUSH
31060: LD_INT 30
31062: PUSH
31063: LD_INT 30
31065: PUSH
31066: LD_INT 30
31068: PUSH
31069: LD_INT 30
31071: PUSH
31072: EMPTY
31073: LIST
31074: LIST
31075: LIST
31076: LIST
31077: ST_TO_ADDR
// un := CreateHuman ;
31078: LD_ADDR_VAR 0 3
31082: PUSH
31083: CALL_OW 44
31087: ST_TO_ADDR
// hc_noskilllimit := false ;
31088: LD_ADDR_OWVAR 76
31092: PUSH
31093: LD_INT 0
31095: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31096: LD_VAR 0 3
31100: PPUSH
31101: LD_INT 1
31103: PPUSH
31104: CALL_OW 51
// ToLua ( playRanger() ) ;
31108: LD_STRING playRanger()
31110: PPUSH
31111: CALL_OW 559
// p := 0 ;
31115: LD_ADDR_VAR 0 2
31119: PUSH
31120: LD_INT 0
31122: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31123: LD_INT 35
31125: PPUSH
31126: CALL_OW 67
// p := p + 1 ;
31130: LD_ADDR_VAR 0 2
31134: PUSH
31135: LD_VAR 0 2
31139: PUSH
31140: LD_INT 1
31142: PLUS
31143: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31144: LD_VAR 0 3
31148: PPUSH
31149: CALL_OW 256
31153: PUSH
31154: LD_INT 1000
31156: LESS
31157: IFFALSE 31171
// SetLives ( un , 1000 ) ;
31159: LD_VAR 0 3
31163: PPUSH
31164: LD_INT 1000
31166: PPUSH
31167: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31171: LD_VAR 0 3
31175: PPUSH
31176: LD_INT 81
31178: PUSH
31179: LD_OWVAR 2
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 91
31190: PUSH
31191: LD_VAR 0 3
31195: PUSH
31196: LD_INT 30
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: LIST
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PPUSH
31208: CALL_OW 69
31212: PPUSH
31213: LD_VAR 0 3
31217: PPUSH
31218: CALL_OW 74
31222: PPUSH
31223: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31227: LD_VAR 0 2
31231: PUSH
31232: LD_INT 80
31234: GREATER
31235: PUSH
31236: LD_VAR 0 3
31240: PPUSH
31241: CALL_OW 301
31245: OR
31246: IFFALSE 31123
// if un then
31248: LD_VAR 0 3
31252: IFFALSE 31263
// RemoveUnit ( un ) ;
31254: LD_VAR 0 3
31258: PPUSH
31259: CALL_OW 64
// end ;
31263: PPOPN 3
31265: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31266: LD_EXP 100
31270: IFFALSE 31386
31272: GO 31274
31274: DISABLE
31275: LD_INT 0
31277: PPUSH
31278: PPUSH
31279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31280: LD_ADDR_VAR 0 2
31284: PUSH
31285: LD_INT 81
31287: PUSH
31288: LD_OWVAR 2
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: LD_INT 21
31299: PUSH
31300: LD_INT 1
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: PPUSH
31311: CALL_OW 69
31315: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31316: LD_STRING playComputer()
31318: PPUSH
31319: CALL_OW 559
// if not tmp then
31323: LD_VAR 0 2
31327: NOT
31328: IFFALSE 31332
// exit ;
31330: GO 31386
// for i in tmp do
31332: LD_ADDR_VAR 0 1
31336: PUSH
31337: LD_VAR 0 2
31341: PUSH
31342: FOR_IN
31343: IFFALSE 31384
// for j := 1 to 4 do
31345: LD_ADDR_VAR 0 3
31349: PUSH
31350: DOUBLE
31351: LD_INT 1
31353: DEC
31354: ST_TO_ADDR
31355: LD_INT 4
31357: PUSH
31358: FOR_TO
31359: IFFALSE 31380
// SetSkill ( i , j , 10 ) ;
31361: LD_VAR 0 1
31365: PPUSH
31366: LD_VAR 0 3
31370: PPUSH
31371: LD_INT 10
31373: PPUSH
31374: CALL_OW 237
31378: GO 31358
31380: POP
31381: POP
31382: GO 31342
31384: POP
31385: POP
// end ;
31386: PPOPN 3
31388: END
// every 0 0$1 trigger s30 do var i , tmp ;
31389: LD_EXP 101
31393: IFFALSE 31462
31395: GO 31397
31397: DISABLE
31398: LD_INT 0
31400: PPUSH
31401: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31402: LD_ADDR_VAR 0 2
31406: PUSH
31407: LD_INT 22
31409: PUSH
31410: LD_OWVAR 2
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PPUSH
31419: CALL_OW 69
31423: ST_TO_ADDR
// if not tmp then
31424: LD_VAR 0 2
31428: NOT
31429: IFFALSE 31433
// exit ;
31431: GO 31462
// for i in tmp do
31433: LD_ADDR_VAR 0 1
31437: PUSH
31438: LD_VAR 0 2
31442: PUSH
31443: FOR_IN
31444: IFFALSE 31460
// SetLives ( i , 300 ) ;
31446: LD_VAR 0 1
31450: PPUSH
31451: LD_INT 300
31453: PPUSH
31454: CALL_OW 234
31458: GO 31443
31460: POP
31461: POP
// end ;
31462: PPOPN 2
31464: END
// every 0 0$1 trigger s60 do var i , tmp ;
31465: LD_EXP 102
31469: IFFALSE 31538
31471: GO 31473
31473: DISABLE
31474: LD_INT 0
31476: PPUSH
31477: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31478: LD_ADDR_VAR 0 2
31482: PUSH
31483: LD_INT 22
31485: PUSH
31486: LD_OWVAR 2
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PPUSH
31495: CALL_OW 69
31499: ST_TO_ADDR
// if not tmp then
31500: LD_VAR 0 2
31504: NOT
31505: IFFALSE 31509
// exit ;
31507: GO 31538
// for i in tmp do
31509: LD_ADDR_VAR 0 1
31513: PUSH
31514: LD_VAR 0 2
31518: PUSH
31519: FOR_IN
31520: IFFALSE 31536
// SetLives ( i , 600 ) ;
31522: LD_VAR 0 1
31526: PPUSH
31527: LD_INT 600
31529: PPUSH
31530: CALL_OW 234
31534: GO 31519
31536: POP
31537: POP
// end ;
31538: PPOPN 2
31540: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31541: LD_INT 0
31543: PPUSH
// case cmd of 301 :
31544: LD_VAR 0 1
31548: PUSH
31549: LD_INT 301
31551: DOUBLE
31552: EQUAL
31553: IFTRUE 31557
31555: GO 31589
31557: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31558: LD_VAR 0 6
31562: PPUSH
31563: LD_VAR 0 7
31567: PPUSH
31568: LD_VAR 0 8
31572: PPUSH
31573: LD_VAR 0 4
31577: PPUSH
31578: LD_VAR 0 5
31582: PPUSH
31583: CALL 32798 0 5
31587: GO 31710
31589: LD_INT 302
31591: DOUBLE
31592: EQUAL
31593: IFTRUE 31597
31595: GO 31634
31597: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31598: LD_VAR 0 6
31602: PPUSH
31603: LD_VAR 0 7
31607: PPUSH
31608: LD_VAR 0 8
31612: PPUSH
31613: LD_VAR 0 9
31617: PPUSH
31618: LD_VAR 0 4
31622: PPUSH
31623: LD_VAR 0 5
31627: PPUSH
31628: CALL 32889 0 6
31632: GO 31710
31634: LD_INT 303
31636: DOUBLE
31637: EQUAL
31638: IFTRUE 31642
31640: GO 31679
31642: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31643: LD_VAR 0 6
31647: PPUSH
31648: LD_VAR 0 7
31652: PPUSH
31653: LD_VAR 0 8
31657: PPUSH
31658: LD_VAR 0 9
31662: PPUSH
31663: LD_VAR 0 4
31667: PPUSH
31668: LD_VAR 0 5
31672: PPUSH
31673: CALL 31715 0 6
31677: GO 31710
31679: LD_INT 304
31681: DOUBLE
31682: EQUAL
31683: IFTRUE 31687
31685: GO 31709
31687: POP
// hHackTeleport ( unit , x , y ) ; end ;
31688: LD_VAR 0 2
31692: PPUSH
31693: LD_VAR 0 4
31697: PPUSH
31698: LD_VAR 0 5
31702: PPUSH
31703: CALL 33482 0 3
31707: GO 31710
31709: POP
// end ;
31710: LD_VAR 0 12
31714: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31715: LD_INT 0
31717: PPUSH
31718: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31719: LD_VAR 0 1
31723: PUSH
31724: LD_INT 1
31726: LESS
31727: PUSH
31728: LD_VAR 0 1
31732: PUSH
31733: LD_INT 3
31735: GREATER
31736: OR
31737: PUSH
31738: LD_VAR 0 5
31742: PPUSH
31743: LD_VAR 0 6
31747: PPUSH
31748: CALL_OW 428
31752: OR
31753: IFFALSE 31757
// exit ;
31755: GO 32485
// uc_side := your_side ;
31757: LD_ADDR_OWVAR 20
31761: PUSH
31762: LD_OWVAR 2
31766: ST_TO_ADDR
// uc_nation := nation ;
31767: LD_ADDR_OWVAR 21
31771: PUSH
31772: LD_VAR 0 1
31776: ST_TO_ADDR
// bc_level = 1 ;
31777: LD_ADDR_OWVAR 43
31781: PUSH
31782: LD_INT 1
31784: ST_TO_ADDR
// case btype of 1 :
31785: LD_VAR 0 2
31789: PUSH
31790: LD_INT 1
31792: DOUBLE
31793: EQUAL
31794: IFTRUE 31798
31796: GO 31809
31798: POP
// bc_type := b_depot ; 2 :
31799: LD_ADDR_OWVAR 42
31803: PUSH
31804: LD_INT 0
31806: ST_TO_ADDR
31807: GO 32429
31809: LD_INT 2
31811: DOUBLE
31812: EQUAL
31813: IFTRUE 31817
31815: GO 31828
31817: POP
// bc_type := b_warehouse ; 3 :
31818: LD_ADDR_OWVAR 42
31822: PUSH
31823: LD_INT 1
31825: ST_TO_ADDR
31826: GO 32429
31828: LD_INT 3
31830: DOUBLE
31831: EQUAL
31832: IFTRUE 31836
31834: GO 31847
31836: POP
// bc_type := b_lab ; 4 .. 9 :
31837: LD_ADDR_OWVAR 42
31841: PUSH
31842: LD_INT 6
31844: ST_TO_ADDR
31845: GO 32429
31847: LD_INT 4
31849: DOUBLE
31850: GREATEREQUAL
31851: IFFALSE 31859
31853: LD_INT 9
31855: DOUBLE
31856: LESSEQUAL
31857: IFTRUE 31861
31859: GO 31921
31861: POP
// begin bc_type := b_lab_half ;
31862: LD_ADDR_OWVAR 42
31866: PUSH
31867: LD_INT 7
31869: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31870: LD_ADDR_OWVAR 44
31874: PUSH
31875: LD_INT 10
31877: PUSH
31878: LD_INT 11
31880: PUSH
31881: LD_INT 12
31883: PUSH
31884: LD_INT 15
31886: PUSH
31887: LD_INT 14
31889: PUSH
31890: LD_INT 13
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: PUSH
31901: LD_VAR 0 2
31905: PUSH
31906: LD_INT 3
31908: MINUS
31909: ARRAY
31910: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
31911: LD_ADDR_OWVAR 45
31915: PUSH
31916: LD_INT 9
31918: ST_TO_ADDR
// end ; 10 .. 13 :
31919: GO 32429
31921: LD_INT 10
31923: DOUBLE
31924: GREATEREQUAL
31925: IFFALSE 31933
31927: LD_INT 13
31929: DOUBLE
31930: LESSEQUAL
31931: IFTRUE 31935
31933: GO 32012
31935: POP
// begin bc_type := b_lab_full ;
31936: LD_ADDR_OWVAR 42
31940: PUSH
31941: LD_INT 8
31943: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31944: LD_ADDR_OWVAR 44
31948: PUSH
31949: LD_INT 10
31951: PUSH
31952: LD_INT 12
31954: PUSH
31955: LD_INT 14
31957: PUSH
31958: LD_INT 13
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: PUSH
31967: LD_VAR 0 2
31971: PUSH
31972: LD_INT 9
31974: MINUS
31975: ARRAY
31976: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31977: LD_ADDR_OWVAR 45
31981: PUSH
31982: LD_INT 11
31984: PUSH
31985: LD_INT 15
31987: PUSH
31988: LD_INT 12
31990: PUSH
31991: LD_INT 15
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: LIST
31998: LIST
31999: PUSH
32000: LD_VAR 0 2
32004: PUSH
32005: LD_INT 9
32007: MINUS
32008: ARRAY
32009: ST_TO_ADDR
// end ; 14 :
32010: GO 32429
32012: LD_INT 14
32014: DOUBLE
32015: EQUAL
32016: IFTRUE 32020
32018: GO 32031
32020: POP
// bc_type := b_workshop ; 15 :
32021: LD_ADDR_OWVAR 42
32025: PUSH
32026: LD_INT 2
32028: ST_TO_ADDR
32029: GO 32429
32031: LD_INT 15
32033: DOUBLE
32034: EQUAL
32035: IFTRUE 32039
32037: GO 32050
32039: POP
// bc_type := b_factory ; 16 :
32040: LD_ADDR_OWVAR 42
32044: PUSH
32045: LD_INT 3
32047: ST_TO_ADDR
32048: GO 32429
32050: LD_INT 16
32052: DOUBLE
32053: EQUAL
32054: IFTRUE 32058
32056: GO 32069
32058: POP
// bc_type := b_ext_gun ; 17 :
32059: LD_ADDR_OWVAR 42
32063: PUSH
32064: LD_INT 17
32066: ST_TO_ADDR
32067: GO 32429
32069: LD_INT 17
32071: DOUBLE
32072: EQUAL
32073: IFTRUE 32077
32075: GO 32105
32077: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32078: LD_ADDR_OWVAR 42
32082: PUSH
32083: LD_INT 19
32085: PUSH
32086: LD_INT 23
32088: PUSH
32089: LD_INT 19
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: LIST
32096: PUSH
32097: LD_VAR 0 1
32101: ARRAY
32102: ST_TO_ADDR
32103: GO 32429
32105: LD_INT 18
32107: DOUBLE
32108: EQUAL
32109: IFTRUE 32113
32111: GO 32124
32113: POP
// bc_type := b_ext_radar ; 19 :
32114: LD_ADDR_OWVAR 42
32118: PUSH
32119: LD_INT 20
32121: ST_TO_ADDR
32122: GO 32429
32124: LD_INT 19
32126: DOUBLE
32127: EQUAL
32128: IFTRUE 32132
32130: GO 32143
32132: POP
// bc_type := b_ext_radio ; 20 :
32133: LD_ADDR_OWVAR 42
32137: PUSH
32138: LD_INT 22
32140: ST_TO_ADDR
32141: GO 32429
32143: LD_INT 20
32145: DOUBLE
32146: EQUAL
32147: IFTRUE 32151
32149: GO 32162
32151: POP
// bc_type := b_ext_siberium ; 21 :
32152: LD_ADDR_OWVAR 42
32156: PUSH
32157: LD_INT 21
32159: ST_TO_ADDR
32160: GO 32429
32162: LD_INT 21
32164: DOUBLE
32165: EQUAL
32166: IFTRUE 32170
32168: GO 32181
32170: POP
// bc_type := b_ext_computer ; 22 :
32171: LD_ADDR_OWVAR 42
32175: PUSH
32176: LD_INT 24
32178: ST_TO_ADDR
32179: GO 32429
32181: LD_INT 22
32183: DOUBLE
32184: EQUAL
32185: IFTRUE 32189
32187: GO 32200
32189: POP
// bc_type := b_ext_track ; 23 :
32190: LD_ADDR_OWVAR 42
32194: PUSH
32195: LD_INT 16
32197: ST_TO_ADDR
32198: GO 32429
32200: LD_INT 23
32202: DOUBLE
32203: EQUAL
32204: IFTRUE 32208
32206: GO 32219
32208: POP
// bc_type := b_ext_laser ; 24 :
32209: LD_ADDR_OWVAR 42
32213: PUSH
32214: LD_INT 25
32216: ST_TO_ADDR
32217: GO 32429
32219: LD_INT 24
32221: DOUBLE
32222: EQUAL
32223: IFTRUE 32227
32225: GO 32238
32227: POP
// bc_type := b_control_tower ; 25 :
32228: LD_ADDR_OWVAR 42
32232: PUSH
32233: LD_INT 36
32235: ST_TO_ADDR
32236: GO 32429
32238: LD_INT 25
32240: DOUBLE
32241: EQUAL
32242: IFTRUE 32246
32244: GO 32257
32246: POP
// bc_type := b_breastwork ; 26 :
32247: LD_ADDR_OWVAR 42
32251: PUSH
32252: LD_INT 31
32254: ST_TO_ADDR
32255: GO 32429
32257: LD_INT 26
32259: DOUBLE
32260: EQUAL
32261: IFTRUE 32265
32263: GO 32276
32265: POP
// bc_type := b_bunker ; 27 :
32266: LD_ADDR_OWVAR 42
32270: PUSH
32271: LD_INT 32
32273: ST_TO_ADDR
32274: GO 32429
32276: LD_INT 27
32278: DOUBLE
32279: EQUAL
32280: IFTRUE 32284
32282: GO 32295
32284: POP
// bc_type := b_turret ; 28 :
32285: LD_ADDR_OWVAR 42
32289: PUSH
32290: LD_INT 33
32292: ST_TO_ADDR
32293: GO 32429
32295: LD_INT 28
32297: DOUBLE
32298: EQUAL
32299: IFTRUE 32303
32301: GO 32314
32303: POP
// bc_type := b_armoury ; 29 :
32304: LD_ADDR_OWVAR 42
32308: PUSH
32309: LD_INT 4
32311: ST_TO_ADDR
32312: GO 32429
32314: LD_INT 29
32316: DOUBLE
32317: EQUAL
32318: IFTRUE 32322
32320: GO 32333
32322: POP
// bc_type := b_barracks ; 30 :
32323: LD_ADDR_OWVAR 42
32327: PUSH
32328: LD_INT 5
32330: ST_TO_ADDR
32331: GO 32429
32333: LD_INT 30
32335: DOUBLE
32336: EQUAL
32337: IFTRUE 32341
32339: GO 32352
32341: POP
// bc_type := b_solar_power ; 31 :
32342: LD_ADDR_OWVAR 42
32346: PUSH
32347: LD_INT 27
32349: ST_TO_ADDR
32350: GO 32429
32352: LD_INT 31
32354: DOUBLE
32355: EQUAL
32356: IFTRUE 32360
32358: GO 32371
32360: POP
// bc_type := b_oil_power ; 32 :
32361: LD_ADDR_OWVAR 42
32365: PUSH
32366: LD_INT 26
32368: ST_TO_ADDR
32369: GO 32429
32371: LD_INT 32
32373: DOUBLE
32374: EQUAL
32375: IFTRUE 32379
32377: GO 32390
32379: POP
// bc_type := b_siberite_power ; 33 :
32380: LD_ADDR_OWVAR 42
32384: PUSH
32385: LD_INT 28
32387: ST_TO_ADDR
32388: GO 32429
32390: LD_INT 33
32392: DOUBLE
32393: EQUAL
32394: IFTRUE 32398
32396: GO 32409
32398: POP
// bc_type := b_oil_mine ; 34 :
32399: LD_ADDR_OWVAR 42
32403: PUSH
32404: LD_INT 29
32406: ST_TO_ADDR
32407: GO 32429
32409: LD_INT 34
32411: DOUBLE
32412: EQUAL
32413: IFTRUE 32417
32415: GO 32428
32417: POP
// bc_type := b_siberite_mine ; end ;
32418: LD_ADDR_OWVAR 42
32422: PUSH
32423: LD_INT 30
32425: ST_TO_ADDR
32426: GO 32429
32428: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32429: LD_ADDR_VAR 0 8
32433: PUSH
32434: LD_VAR 0 5
32438: PPUSH
32439: LD_VAR 0 6
32443: PPUSH
32444: LD_VAR 0 3
32448: PPUSH
32449: CALL_OW 47
32453: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32454: LD_OWVAR 42
32458: PUSH
32459: LD_INT 32
32461: PUSH
32462: LD_INT 33
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: IN
32469: IFFALSE 32485
// PlaceWeaponTurret ( b , weapon ) ;
32471: LD_VAR 0 8
32475: PPUSH
32476: LD_VAR 0 4
32480: PPUSH
32481: CALL_OW 431
// end ;
32485: LD_VAR 0 7
32489: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32490: LD_INT 0
32492: PPUSH
32493: PPUSH
32494: PPUSH
32495: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32496: LD_ADDR_VAR 0 4
32500: PUSH
32501: LD_INT 22
32503: PUSH
32504: LD_OWVAR 2
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 2
32515: PUSH
32516: LD_INT 30
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: EMPTY
32523: LIST
32524: LIST
32525: PUSH
32526: LD_INT 30
32528: PUSH
32529: LD_INT 1
32531: PUSH
32532: EMPTY
32533: LIST
32534: LIST
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: LIST
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PPUSH
32545: CALL_OW 69
32549: ST_TO_ADDR
// if not tmp then
32550: LD_VAR 0 4
32554: NOT
32555: IFFALSE 32559
// exit ;
32557: GO 32618
// for i in tmp do
32559: LD_ADDR_VAR 0 2
32563: PUSH
32564: LD_VAR 0 4
32568: PUSH
32569: FOR_IN
32570: IFFALSE 32616
// for j = 1 to 3 do
32572: LD_ADDR_VAR 0 3
32576: PUSH
32577: DOUBLE
32578: LD_INT 1
32580: DEC
32581: ST_TO_ADDR
32582: LD_INT 3
32584: PUSH
32585: FOR_TO
32586: IFFALSE 32612
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32588: LD_VAR 0 2
32592: PPUSH
32593: CALL_OW 274
32597: PPUSH
32598: LD_VAR 0 3
32602: PPUSH
32603: LD_INT 99999
32605: PPUSH
32606: CALL_OW 277
32610: GO 32585
32612: POP
32613: POP
32614: GO 32569
32616: POP
32617: POP
// end ;
32618: LD_VAR 0 1
32622: RET
// export function hHackSetLevel10 ; var i , j ; begin
32623: LD_INT 0
32625: PPUSH
32626: PPUSH
32627: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32628: LD_ADDR_VAR 0 2
32632: PUSH
32633: LD_INT 21
32635: PUSH
32636: LD_INT 1
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PPUSH
32643: CALL_OW 69
32647: PUSH
32648: FOR_IN
32649: IFFALSE 32701
// if IsSelected ( i ) then
32651: LD_VAR 0 2
32655: PPUSH
32656: CALL_OW 306
32660: IFFALSE 32699
// begin for j := 1 to 4 do
32662: LD_ADDR_VAR 0 3
32666: PUSH
32667: DOUBLE
32668: LD_INT 1
32670: DEC
32671: ST_TO_ADDR
32672: LD_INT 4
32674: PUSH
32675: FOR_TO
32676: IFFALSE 32697
// SetSkill ( i , j , 10 ) ;
32678: LD_VAR 0 2
32682: PPUSH
32683: LD_VAR 0 3
32687: PPUSH
32688: LD_INT 10
32690: PPUSH
32691: CALL_OW 237
32695: GO 32675
32697: POP
32698: POP
// end ;
32699: GO 32648
32701: POP
32702: POP
// end ;
32703: LD_VAR 0 1
32707: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32708: LD_INT 0
32710: PPUSH
32711: PPUSH
32712: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32713: LD_ADDR_VAR 0 2
32717: PUSH
32718: LD_INT 22
32720: PUSH
32721: LD_OWVAR 2
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 21
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PPUSH
32744: CALL_OW 69
32748: PUSH
32749: FOR_IN
32750: IFFALSE 32791
// begin for j := 1 to 4 do
32752: LD_ADDR_VAR 0 3
32756: PUSH
32757: DOUBLE
32758: LD_INT 1
32760: DEC
32761: ST_TO_ADDR
32762: LD_INT 4
32764: PUSH
32765: FOR_TO
32766: IFFALSE 32787
// SetSkill ( i , j , 10 ) ;
32768: LD_VAR 0 2
32772: PPUSH
32773: LD_VAR 0 3
32777: PPUSH
32778: LD_INT 10
32780: PPUSH
32781: CALL_OW 237
32785: GO 32765
32787: POP
32788: POP
// end ;
32789: GO 32749
32791: POP
32792: POP
// end ;
32793: LD_VAR 0 1
32797: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32798: LD_INT 0
32800: PPUSH
// uc_side := your_side ;
32801: LD_ADDR_OWVAR 20
32805: PUSH
32806: LD_OWVAR 2
32810: ST_TO_ADDR
// uc_nation := nation ;
32811: LD_ADDR_OWVAR 21
32815: PUSH
32816: LD_VAR 0 1
32820: ST_TO_ADDR
// InitHc ;
32821: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32825: LD_INT 0
32827: PPUSH
32828: LD_VAR 0 2
32832: PPUSH
32833: LD_VAR 0 3
32837: PPUSH
32838: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32842: LD_VAR 0 4
32846: PPUSH
32847: LD_VAR 0 5
32851: PPUSH
32852: CALL_OW 428
32856: PUSH
32857: LD_INT 0
32859: EQUAL
32860: IFFALSE 32884
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32862: CALL_OW 44
32866: PPUSH
32867: LD_VAR 0 4
32871: PPUSH
32872: LD_VAR 0 5
32876: PPUSH
32877: LD_INT 1
32879: PPUSH
32880: CALL_OW 48
// end ;
32884: LD_VAR 0 6
32888: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32889: LD_INT 0
32891: PPUSH
32892: PPUSH
// uc_side := your_side ;
32893: LD_ADDR_OWVAR 20
32897: PUSH
32898: LD_OWVAR 2
32902: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32903: LD_VAR 0 1
32907: PUSH
32908: LD_INT 1
32910: PUSH
32911: LD_INT 2
32913: PUSH
32914: LD_INT 3
32916: PUSH
32917: LD_INT 4
32919: PUSH
32920: LD_INT 5
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: IN
32930: IFFALSE 32942
// uc_nation := nation_american else
32932: LD_ADDR_OWVAR 21
32936: PUSH
32937: LD_INT 1
32939: ST_TO_ADDR
32940: GO 32985
// if chassis in [ 11 , 12 , 13 , 14 ] then
32942: LD_VAR 0 1
32946: PUSH
32947: LD_INT 11
32949: PUSH
32950: LD_INT 12
32952: PUSH
32953: LD_INT 13
32955: PUSH
32956: LD_INT 14
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: IN
32965: IFFALSE 32977
// uc_nation := nation_arabian else
32967: LD_ADDR_OWVAR 21
32971: PUSH
32972: LD_INT 2
32974: ST_TO_ADDR
32975: GO 32985
// uc_nation := nation_russian ;
32977: LD_ADDR_OWVAR 21
32981: PUSH
32982: LD_INT 3
32984: ST_TO_ADDR
// vc_chassis := chassis ;
32985: LD_ADDR_OWVAR 37
32989: PUSH
32990: LD_VAR 0 1
32994: ST_TO_ADDR
// vc_engine := engine ;
32995: LD_ADDR_OWVAR 39
32999: PUSH
33000: LD_VAR 0 2
33004: ST_TO_ADDR
// vc_control := control ;
33005: LD_ADDR_OWVAR 38
33009: PUSH
33010: LD_VAR 0 3
33014: ST_TO_ADDR
// vc_weapon := weapon ;
33015: LD_ADDR_OWVAR 40
33019: PUSH
33020: LD_VAR 0 4
33024: ST_TO_ADDR
// un := CreateVehicle ;
33025: LD_ADDR_VAR 0 8
33029: PUSH
33030: CALL_OW 45
33034: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33035: LD_VAR 0 8
33039: PPUSH
33040: LD_INT 0
33042: PPUSH
33043: LD_INT 5
33045: PPUSH
33046: CALL_OW 12
33050: PPUSH
33051: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33055: LD_VAR 0 8
33059: PPUSH
33060: LD_VAR 0 5
33064: PPUSH
33065: LD_VAR 0 6
33069: PPUSH
33070: LD_INT 1
33072: PPUSH
33073: CALL_OW 48
// end ;
33077: LD_VAR 0 7
33081: RET
// export hInvincible ; every 1 do
33082: GO 33084
33084: DISABLE
// hInvincible := [ ] ;
33085: LD_ADDR_EXP 103
33089: PUSH
33090: EMPTY
33091: ST_TO_ADDR
33092: END
// every 10 do var i ;
33093: GO 33095
33095: DISABLE
33096: LD_INT 0
33098: PPUSH
// begin enable ;
33099: ENABLE
// if not hInvincible then
33100: LD_EXP 103
33104: NOT
33105: IFFALSE 33109
// exit ;
33107: GO 33153
// for i in hInvincible do
33109: LD_ADDR_VAR 0 1
33113: PUSH
33114: LD_EXP 103
33118: PUSH
33119: FOR_IN
33120: IFFALSE 33151
// if GetLives ( i ) < 1000 then
33122: LD_VAR 0 1
33126: PPUSH
33127: CALL_OW 256
33131: PUSH
33132: LD_INT 1000
33134: LESS
33135: IFFALSE 33149
// SetLives ( i , 1000 ) ;
33137: LD_VAR 0 1
33141: PPUSH
33142: LD_INT 1000
33144: PPUSH
33145: CALL_OW 234
33149: GO 33119
33151: POP
33152: POP
// end ;
33153: PPOPN 1
33155: END
// export function hHackInvincible ; var i ; begin
33156: LD_INT 0
33158: PPUSH
33159: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33160: LD_ADDR_VAR 0 2
33164: PUSH
33165: LD_INT 2
33167: PUSH
33168: LD_INT 21
33170: PUSH
33171: LD_INT 1
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_INT 21
33180: PUSH
33181: LD_INT 2
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: LIST
33192: PPUSH
33193: CALL_OW 69
33197: PUSH
33198: FOR_IN
33199: IFFALSE 33260
// if IsSelected ( i ) then
33201: LD_VAR 0 2
33205: PPUSH
33206: CALL_OW 306
33210: IFFALSE 33258
// begin if i in hInvincible then
33212: LD_VAR 0 2
33216: PUSH
33217: LD_EXP 103
33221: IN
33222: IFFALSE 33242
// hInvincible := hInvincible diff i else
33224: LD_ADDR_EXP 103
33228: PUSH
33229: LD_EXP 103
33233: PUSH
33234: LD_VAR 0 2
33238: DIFF
33239: ST_TO_ADDR
33240: GO 33258
// hInvincible := hInvincible union i ;
33242: LD_ADDR_EXP 103
33246: PUSH
33247: LD_EXP 103
33251: PUSH
33252: LD_VAR 0 2
33256: UNION
33257: ST_TO_ADDR
// end ;
33258: GO 33198
33260: POP
33261: POP
// end ;
33262: LD_VAR 0 1
33266: RET
// export function hHackInvisible ; var i , j ; begin
33267: LD_INT 0
33269: PPUSH
33270: PPUSH
33271: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33272: LD_ADDR_VAR 0 2
33276: PUSH
33277: LD_INT 21
33279: PUSH
33280: LD_INT 1
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PPUSH
33287: CALL_OW 69
33291: PUSH
33292: FOR_IN
33293: IFFALSE 33317
// if IsSelected ( i ) then
33295: LD_VAR 0 2
33299: PPUSH
33300: CALL_OW 306
33304: IFFALSE 33315
// ComForceInvisible ( i ) ;
33306: LD_VAR 0 2
33310: PPUSH
33311: CALL_OW 496
33315: GO 33292
33317: POP
33318: POP
// end ;
33319: LD_VAR 0 1
33323: RET
// export function hHackChangeYourSide ; begin
33324: LD_INT 0
33326: PPUSH
// if your_side = 8 then
33327: LD_OWVAR 2
33331: PUSH
33332: LD_INT 8
33334: EQUAL
33335: IFFALSE 33347
// your_side := 0 else
33337: LD_ADDR_OWVAR 2
33341: PUSH
33342: LD_INT 0
33344: ST_TO_ADDR
33345: GO 33361
// your_side := your_side + 1 ;
33347: LD_ADDR_OWVAR 2
33351: PUSH
33352: LD_OWVAR 2
33356: PUSH
33357: LD_INT 1
33359: PLUS
33360: ST_TO_ADDR
// end ;
33361: LD_VAR 0 1
33365: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33366: LD_INT 0
33368: PPUSH
33369: PPUSH
33370: PPUSH
// for i in all_units do
33371: LD_ADDR_VAR 0 2
33375: PUSH
33376: LD_OWVAR 3
33380: PUSH
33381: FOR_IN
33382: IFFALSE 33460
// if IsSelected ( i ) then
33384: LD_VAR 0 2
33388: PPUSH
33389: CALL_OW 306
33393: IFFALSE 33458
// begin j := GetSide ( i ) ;
33395: LD_ADDR_VAR 0 3
33399: PUSH
33400: LD_VAR 0 2
33404: PPUSH
33405: CALL_OW 255
33409: ST_TO_ADDR
// if j = 8 then
33410: LD_VAR 0 3
33414: PUSH
33415: LD_INT 8
33417: EQUAL
33418: IFFALSE 33430
// j := 0 else
33420: LD_ADDR_VAR 0 3
33424: PUSH
33425: LD_INT 0
33427: ST_TO_ADDR
33428: GO 33444
// j := j + 1 ;
33430: LD_ADDR_VAR 0 3
33434: PUSH
33435: LD_VAR 0 3
33439: PUSH
33440: LD_INT 1
33442: PLUS
33443: ST_TO_ADDR
// SetSide ( i , j ) ;
33444: LD_VAR 0 2
33448: PPUSH
33449: LD_VAR 0 3
33453: PPUSH
33454: CALL_OW 235
// end ;
33458: GO 33381
33460: POP
33461: POP
// end ;
33462: LD_VAR 0 1
33466: RET
// export function hHackFog ; begin
33467: LD_INT 0
33469: PPUSH
// FogOff ( true ) ;
33470: LD_INT 1
33472: PPUSH
33473: CALL_OW 344
// end ;
33477: LD_VAR 0 1
33481: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33482: LD_INT 0
33484: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33485: LD_VAR 0 1
33489: PPUSH
33490: LD_VAR 0 2
33494: PPUSH
33495: LD_VAR 0 3
33499: PPUSH
33500: LD_INT 1
33502: PPUSH
33503: LD_INT 1
33505: PPUSH
33506: CALL_OW 483
// CenterOnXY ( x , y ) ;
33510: LD_VAR 0 2
33514: PPUSH
33515: LD_VAR 0 3
33519: PPUSH
33520: CALL_OW 84
// end ;
33524: LD_VAR 0 4
33528: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33529: LD_INT 0
33531: PPUSH
33532: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33533: LD_VAR 0 1
33537: NOT
33538: PUSH
33539: LD_VAR 0 2
33543: PPUSH
33544: LD_VAR 0 3
33548: PPUSH
33549: CALL_OW 488
33553: NOT
33554: OR
33555: PUSH
33556: LD_VAR 0 1
33560: PPUSH
33561: CALL_OW 266
33565: PUSH
33566: LD_INT 3
33568: NONEQUAL
33569: PUSH
33570: LD_VAR 0 1
33574: PPUSH
33575: CALL_OW 247
33579: PUSH
33580: LD_INT 1
33582: EQUAL
33583: NOT
33584: AND
33585: OR
33586: IFFALSE 33590
// exit ;
33588: GO 33739
// if GetType ( factory ) = unit_human then
33590: LD_VAR 0 1
33594: PPUSH
33595: CALL_OW 247
33599: PUSH
33600: LD_INT 1
33602: EQUAL
33603: IFFALSE 33620
// factory := IsInUnit ( factory ) ;
33605: LD_ADDR_VAR 0 1
33609: PUSH
33610: LD_VAR 0 1
33614: PPUSH
33615: CALL_OW 310
33619: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33620: LD_VAR 0 1
33624: PPUSH
33625: CALL_OW 266
33629: PUSH
33630: LD_INT 3
33632: NONEQUAL
33633: IFFALSE 33637
// exit ;
33635: GO 33739
// if HexInfo ( x , y ) = factory then
33637: LD_VAR 0 2
33641: PPUSH
33642: LD_VAR 0 3
33646: PPUSH
33647: CALL_OW 428
33651: PUSH
33652: LD_VAR 0 1
33656: EQUAL
33657: IFFALSE 33684
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33659: LD_ADDR_EXP 104
33663: PUSH
33664: LD_EXP 104
33668: PPUSH
33669: LD_VAR 0 1
33673: PPUSH
33674: LD_INT 0
33676: PPUSH
33677: CALL_OW 1
33681: ST_TO_ADDR
33682: GO 33735
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33684: LD_ADDR_EXP 104
33688: PUSH
33689: LD_EXP 104
33693: PPUSH
33694: LD_VAR 0 1
33698: PPUSH
33699: LD_VAR 0 1
33703: PPUSH
33704: CALL_OW 255
33708: PUSH
33709: LD_VAR 0 1
33713: PUSH
33714: LD_VAR 0 2
33718: PUSH
33719: LD_VAR 0 3
33723: PUSH
33724: EMPTY
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: PPUSH
33730: CALL_OW 1
33734: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33735: CALL 33744 0 0
// end ;
33739: LD_VAR 0 4
33743: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33744: LD_INT 0
33746: PPUSH
33747: PPUSH
33748: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33749: LD_STRING resetFactoryWaypoint();
33751: PPUSH
33752: CALL_OW 559
// if factoryWaypoints then
33756: LD_EXP 104
33760: IFFALSE 33886
// begin list := PrepareArray ( factoryWaypoints ) ;
33762: LD_ADDR_VAR 0 3
33766: PUSH
33767: LD_EXP 104
33771: PPUSH
33772: CALL 80208 0 1
33776: ST_TO_ADDR
// for i := 1 to list do
33777: LD_ADDR_VAR 0 2
33781: PUSH
33782: DOUBLE
33783: LD_INT 1
33785: DEC
33786: ST_TO_ADDR
33787: LD_VAR 0 3
33791: PUSH
33792: FOR_TO
33793: IFFALSE 33884
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33795: LD_STRING setFactoryWaypointXY(
33797: PUSH
33798: LD_VAR 0 3
33802: PUSH
33803: LD_VAR 0 2
33807: ARRAY
33808: PUSH
33809: LD_INT 1
33811: ARRAY
33812: STR
33813: PUSH
33814: LD_STRING ,
33816: STR
33817: PUSH
33818: LD_VAR 0 3
33822: PUSH
33823: LD_VAR 0 2
33827: ARRAY
33828: PUSH
33829: LD_INT 2
33831: ARRAY
33832: STR
33833: PUSH
33834: LD_STRING ,
33836: STR
33837: PUSH
33838: LD_VAR 0 3
33842: PUSH
33843: LD_VAR 0 2
33847: ARRAY
33848: PUSH
33849: LD_INT 3
33851: ARRAY
33852: STR
33853: PUSH
33854: LD_STRING ,
33856: STR
33857: PUSH
33858: LD_VAR 0 3
33862: PUSH
33863: LD_VAR 0 2
33867: ARRAY
33868: PUSH
33869: LD_INT 4
33871: ARRAY
33872: STR
33873: PUSH
33874: LD_STRING )
33876: STR
33877: PPUSH
33878: CALL_OW 559
33882: GO 33792
33884: POP
33885: POP
// end ; end ;
33886: LD_VAR 0 1
33890: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33891: LD_INT 0
33893: PPUSH
// if HexInfo ( x , y ) = warehouse then
33894: LD_VAR 0 2
33898: PPUSH
33899: LD_VAR 0 3
33903: PPUSH
33904: CALL_OW 428
33908: PUSH
33909: LD_VAR 0 1
33913: EQUAL
33914: IFFALSE 33941
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33916: LD_ADDR_EXP 105
33920: PUSH
33921: LD_EXP 105
33925: PPUSH
33926: LD_VAR 0 1
33930: PPUSH
33931: LD_INT 0
33933: PPUSH
33934: CALL_OW 1
33938: ST_TO_ADDR
33939: GO 33992
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33941: LD_ADDR_EXP 105
33945: PUSH
33946: LD_EXP 105
33950: PPUSH
33951: LD_VAR 0 1
33955: PPUSH
33956: LD_VAR 0 1
33960: PPUSH
33961: CALL_OW 255
33965: PUSH
33966: LD_VAR 0 1
33970: PUSH
33971: LD_VAR 0 2
33975: PUSH
33976: LD_VAR 0 3
33980: PUSH
33981: EMPTY
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: PPUSH
33987: CALL_OW 1
33991: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33992: CALL 34001 0 0
// end ;
33996: LD_VAR 0 4
34000: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34001: LD_INT 0
34003: PPUSH
34004: PPUSH
34005: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34006: LD_STRING resetWarehouseGatheringPoints();
34008: PPUSH
34009: CALL_OW 559
// if warehouseGatheringPoints then
34013: LD_EXP 105
34017: IFFALSE 34143
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34019: LD_ADDR_VAR 0 3
34023: PUSH
34024: LD_EXP 105
34028: PPUSH
34029: CALL 80208 0 1
34033: ST_TO_ADDR
// for i := 1 to list do
34034: LD_ADDR_VAR 0 2
34038: PUSH
34039: DOUBLE
34040: LD_INT 1
34042: DEC
34043: ST_TO_ADDR
34044: LD_VAR 0 3
34048: PUSH
34049: FOR_TO
34050: IFFALSE 34141
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34052: LD_STRING setWarehouseGatheringPointXY(
34054: PUSH
34055: LD_VAR 0 3
34059: PUSH
34060: LD_VAR 0 2
34064: ARRAY
34065: PUSH
34066: LD_INT 1
34068: ARRAY
34069: STR
34070: PUSH
34071: LD_STRING ,
34073: STR
34074: PUSH
34075: LD_VAR 0 3
34079: PUSH
34080: LD_VAR 0 2
34084: ARRAY
34085: PUSH
34086: LD_INT 2
34088: ARRAY
34089: STR
34090: PUSH
34091: LD_STRING ,
34093: STR
34094: PUSH
34095: LD_VAR 0 3
34099: PUSH
34100: LD_VAR 0 2
34104: ARRAY
34105: PUSH
34106: LD_INT 3
34108: ARRAY
34109: STR
34110: PUSH
34111: LD_STRING ,
34113: STR
34114: PUSH
34115: LD_VAR 0 3
34119: PUSH
34120: LD_VAR 0 2
34124: ARRAY
34125: PUSH
34126: LD_INT 4
34128: ARRAY
34129: STR
34130: PUSH
34131: LD_STRING )
34133: STR
34134: PPUSH
34135: CALL_OW 559
34139: GO 34049
34141: POP
34142: POP
// end ; end ;
34143: LD_VAR 0 1
34147: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34148: LD_EXP 105
34152: IFFALSE 34837
34154: GO 34156
34156: DISABLE
34157: LD_INT 0
34159: PPUSH
34160: PPUSH
34161: PPUSH
34162: PPUSH
34163: PPUSH
34164: PPUSH
34165: PPUSH
34166: PPUSH
34167: PPUSH
// begin enable ;
34168: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34169: LD_ADDR_VAR 0 3
34173: PUSH
34174: LD_EXP 105
34178: PPUSH
34179: CALL 80208 0 1
34183: ST_TO_ADDR
// if not list then
34184: LD_VAR 0 3
34188: NOT
34189: IFFALSE 34193
// exit ;
34191: GO 34837
// for i := 1 to list do
34193: LD_ADDR_VAR 0 1
34197: PUSH
34198: DOUBLE
34199: LD_INT 1
34201: DEC
34202: ST_TO_ADDR
34203: LD_VAR 0 3
34207: PUSH
34208: FOR_TO
34209: IFFALSE 34835
// begin depot := list [ i ] [ 2 ] ;
34211: LD_ADDR_VAR 0 8
34215: PUSH
34216: LD_VAR 0 3
34220: PUSH
34221: LD_VAR 0 1
34225: ARRAY
34226: PUSH
34227: LD_INT 2
34229: ARRAY
34230: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34231: LD_ADDR_VAR 0 5
34235: PUSH
34236: LD_VAR 0 3
34240: PUSH
34241: LD_VAR 0 1
34245: ARRAY
34246: PUSH
34247: LD_INT 1
34249: ARRAY
34250: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34251: LD_VAR 0 8
34255: PPUSH
34256: CALL_OW 301
34260: PUSH
34261: LD_VAR 0 5
34265: PUSH
34266: LD_VAR 0 8
34270: PPUSH
34271: CALL_OW 255
34275: NONEQUAL
34276: OR
34277: IFFALSE 34306
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34279: LD_ADDR_EXP 105
34283: PUSH
34284: LD_EXP 105
34288: PPUSH
34289: LD_VAR 0 8
34293: PPUSH
34294: LD_INT 0
34296: PPUSH
34297: CALL_OW 1
34301: ST_TO_ADDR
// exit ;
34302: POP
34303: POP
34304: GO 34837
// end ; x := list [ i ] [ 3 ] ;
34306: LD_ADDR_VAR 0 6
34310: PUSH
34311: LD_VAR 0 3
34315: PUSH
34316: LD_VAR 0 1
34320: ARRAY
34321: PUSH
34322: LD_INT 3
34324: ARRAY
34325: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34326: LD_ADDR_VAR 0 7
34330: PUSH
34331: LD_VAR 0 3
34335: PUSH
34336: LD_VAR 0 1
34340: ARRAY
34341: PUSH
34342: LD_INT 4
34344: ARRAY
34345: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34346: LD_ADDR_VAR 0 9
34350: PUSH
34351: LD_VAR 0 6
34355: PPUSH
34356: LD_VAR 0 7
34360: PPUSH
34361: LD_INT 16
34363: PPUSH
34364: CALL 78796 0 3
34368: ST_TO_ADDR
// if not cratesNearbyPoint then
34369: LD_VAR 0 9
34373: NOT
34374: IFFALSE 34380
// exit ;
34376: POP
34377: POP
34378: GO 34837
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34380: LD_ADDR_VAR 0 4
34384: PUSH
34385: LD_INT 22
34387: PUSH
34388: LD_VAR 0 5
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 3
34399: PUSH
34400: LD_INT 60
34402: PUSH
34403: EMPTY
34404: LIST
34405: PUSH
34406: EMPTY
34407: LIST
34408: LIST
34409: PUSH
34410: LD_INT 91
34412: PUSH
34413: LD_VAR 0 8
34417: PUSH
34418: LD_INT 6
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: LIST
34425: PUSH
34426: LD_INT 2
34428: PUSH
34429: LD_INT 25
34431: PUSH
34432: LD_INT 2
34434: PUSH
34435: EMPTY
34436: LIST
34437: LIST
34438: PUSH
34439: LD_INT 25
34441: PUSH
34442: LD_INT 16
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: LIST
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: PPUSH
34460: CALL_OW 69
34464: PUSH
34465: LD_VAR 0 8
34469: PPUSH
34470: CALL_OW 313
34474: PPUSH
34475: LD_INT 3
34477: PUSH
34478: LD_INT 60
34480: PUSH
34481: EMPTY
34482: LIST
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 2
34490: PUSH
34491: LD_INT 25
34493: PUSH
34494: LD_INT 2
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 25
34503: PUSH
34504: LD_INT 16
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: LIST
34515: PUSH
34516: EMPTY
34517: LIST
34518: LIST
34519: PPUSH
34520: CALL_OW 72
34524: UNION
34525: ST_TO_ADDR
// if tmp then
34526: LD_VAR 0 4
34530: IFFALSE 34610
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34532: LD_ADDR_VAR 0 4
34536: PUSH
34537: LD_VAR 0 4
34541: PPUSH
34542: LD_INT 3
34544: PPUSH
34545: CALL 76765 0 2
34549: ST_TO_ADDR
// for j in tmp do
34550: LD_ADDR_VAR 0 2
34554: PUSH
34555: LD_VAR 0 4
34559: PUSH
34560: FOR_IN
34561: IFFALSE 34604
// begin if IsInUnit ( j ) then
34563: LD_VAR 0 2
34567: PPUSH
34568: CALL_OW 310
34572: IFFALSE 34583
// ComExit ( j ) ;
34574: LD_VAR 0 2
34578: PPUSH
34579: CALL 76848 0 1
// AddComCollect ( j , x , y ) ;
34583: LD_VAR 0 2
34587: PPUSH
34588: LD_VAR 0 6
34592: PPUSH
34593: LD_VAR 0 7
34597: PPUSH
34598: CALL_OW 177
// end ;
34602: GO 34560
34604: POP
34605: POP
// exit ;
34606: POP
34607: POP
34608: GO 34837
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34610: LD_ADDR_VAR 0 4
34614: PUSH
34615: LD_INT 22
34617: PUSH
34618: LD_VAR 0 5
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: PUSH
34627: LD_INT 91
34629: PUSH
34630: LD_VAR 0 8
34634: PUSH
34635: LD_INT 8
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 2
34645: PUSH
34646: LD_INT 34
34648: PUSH
34649: LD_INT 12
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 34
34658: PUSH
34659: LD_INT 51
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 34
34668: PUSH
34669: LD_INT 32
34671: PUSH
34672: EMPTY
34673: LIST
34674: LIST
34675: PUSH
34676: LD_INT 34
34678: PUSH
34679: LD_INT 89
34681: PUSH
34682: EMPTY
34683: LIST
34684: LIST
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: LIST
34690: LIST
34691: LIST
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: LIST
34697: PPUSH
34698: CALL_OW 69
34702: ST_TO_ADDR
// if tmp then
34703: LD_VAR 0 4
34707: IFFALSE 34833
// begin for j in tmp do
34709: LD_ADDR_VAR 0 2
34713: PUSH
34714: LD_VAR 0 4
34718: PUSH
34719: FOR_IN
34720: IFFALSE 34831
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34722: LD_VAR 0 2
34726: PPUSH
34727: CALL_OW 262
34731: PUSH
34732: LD_INT 3
34734: EQUAL
34735: PUSH
34736: LD_VAR 0 2
34740: PPUSH
34741: CALL_OW 261
34745: PUSH
34746: LD_INT 20
34748: GREATER
34749: OR
34750: PUSH
34751: LD_VAR 0 2
34755: PPUSH
34756: CALL_OW 314
34760: NOT
34761: AND
34762: PUSH
34763: LD_VAR 0 2
34767: PPUSH
34768: CALL_OW 263
34772: PUSH
34773: LD_INT 1
34775: NONEQUAL
34776: PUSH
34777: LD_VAR 0 2
34781: PPUSH
34782: CALL_OW 311
34786: OR
34787: AND
34788: IFFALSE 34829
// begin ComCollect ( j , x , y ) ;
34790: LD_VAR 0 2
34794: PPUSH
34795: LD_VAR 0 6
34799: PPUSH
34800: LD_VAR 0 7
34804: PPUSH
34805: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34809: LD_VAR 0 2
34813: PPUSH
34814: LD_VAR 0 8
34818: PPUSH
34819: CALL_OW 172
// exit ;
34823: POP
34824: POP
34825: POP
34826: POP
34827: GO 34837
// end ;
34829: GO 34719
34831: POP
34832: POP
// end ; end ;
34833: GO 34208
34835: POP
34836: POP
// end ; end_of_file
34837: PPOPN 9
34839: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34840: LD_INT 0
34842: PPUSH
34843: PPUSH
34844: PPUSH
34845: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34846: LD_VAR 0 1
34850: PPUSH
34851: CALL_OW 264
34855: PUSH
34856: LD_INT 91
34858: EQUAL
34859: IFFALSE 34931
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34861: LD_INT 68
34863: PPUSH
34864: LD_VAR 0 1
34868: PPUSH
34869: CALL_OW 255
34873: PPUSH
34874: CALL_OW 321
34878: PUSH
34879: LD_INT 2
34881: EQUAL
34882: IFFALSE 34894
// eff := 70 else
34884: LD_ADDR_VAR 0 4
34888: PUSH
34889: LD_INT 70
34891: ST_TO_ADDR
34892: GO 34902
// eff := 30 ;
34894: LD_ADDR_VAR 0 4
34898: PUSH
34899: LD_INT 30
34901: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34902: LD_VAR 0 1
34906: PPUSH
34907: CALL_OW 250
34911: PPUSH
34912: LD_VAR 0 1
34916: PPUSH
34917: CALL_OW 251
34921: PPUSH
34922: LD_VAR 0 4
34926: PPUSH
34927: CALL_OW 495
// end ; end ;
34931: LD_VAR 0 2
34935: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34936: LD_INT 0
34938: PPUSH
// end ;
34939: LD_VAR 0 4
34943: RET
// export function SOS_Command ( cmd ) ; begin
34944: LD_INT 0
34946: PPUSH
// end ;
34947: LD_VAR 0 2
34951: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34952: LD_INT 0
34954: PPUSH
// end ;
34955: LD_VAR 0 6
34959: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34960: LD_INT 0
34962: PPUSH
34963: PPUSH
// if not vehicle or not factory then
34964: LD_VAR 0 1
34968: NOT
34969: PUSH
34970: LD_VAR 0 2
34974: NOT
34975: OR
34976: IFFALSE 34980
// exit ;
34978: GO 35211
// if factoryWaypoints >= factory then
34980: LD_EXP 104
34984: PUSH
34985: LD_VAR 0 2
34989: GREATEREQUAL
34990: IFFALSE 35211
// if factoryWaypoints [ factory ] then
34992: LD_EXP 104
34996: PUSH
34997: LD_VAR 0 2
35001: ARRAY
35002: IFFALSE 35211
// begin if GetControl ( vehicle ) = control_manual then
35004: LD_VAR 0 1
35008: PPUSH
35009: CALL_OW 263
35013: PUSH
35014: LD_INT 1
35016: EQUAL
35017: IFFALSE 35098
// begin driver := IsDrivenBy ( vehicle ) ;
35019: LD_ADDR_VAR 0 4
35023: PUSH
35024: LD_VAR 0 1
35028: PPUSH
35029: CALL_OW 311
35033: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35034: LD_VAR 0 4
35038: PPUSH
35039: LD_EXP 104
35043: PUSH
35044: LD_VAR 0 2
35048: ARRAY
35049: PUSH
35050: LD_INT 3
35052: ARRAY
35053: PPUSH
35054: LD_EXP 104
35058: PUSH
35059: LD_VAR 0 2
35063: ARRAY
35064: PUSH
35065: LD_INT 4
35067: ARRAY
35068: PPUSH
35069: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35073: LD_VAR 0 4
35077: PPUSH
35078: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35082: LD_VAR 0 4
35086: PPUSH
35087: LD_VAR 0 2
35091: PPUSH
35092: CALL_OW 180
// end else
35096: GO 35211
// if GetControl ( vehicle ) = control_remote then
35098: LD_VAR 0 1
35102: PPUSH
35103: CALL_OW 263
35107: PUSH
35108: LD_INT 2
35110: EQUAL
35111: IFFALSE 35172
// begin wait ( 0 0$2 ) ;
35113: LD_INT 70
35115: PPUSH
35116: CALL_OW 67
// if Connect ( vehicle ) then
35120: LD_VAR 0 1
35124: PPUSH
35125: CALL 47069 0 1
35129: IFFALSE 35170
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35131: LD_VAR 0 1
35135: PPUSH
35136: LD_EXP 104
35140: PUSH
35141: LD_VAR 0 2
35145: ARRAY
35146: PUSH
35147: LD_INT 3
35149: ARRAY
35150: PPUSH
35151: LD_EXP 104
35155: PUSH
35156: LD_VAR 0 2
35160: ARRAY
35161: PUSH
35162: LD_INT 4
35164: ARRAY
35165: PPUSH
35166: CALL_OW 171
// end else
35170: GO 35211
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35172: LD_VAR 0 1
35176: PPUSH
35177: LD_EXP 104
35181: PUSH
35182: LD_VAR 0 2
35186: ARRAY
35187: PUSH
35188: LD_INT 3
35190: ARRAY
35191: PPUSH
35192: LD_EXP 104
35196: PUSH
35197: LD_VAR 0 2
35201: ARRAY
35202: PUSH
35203: LD_INT 4
35205: ARRAY
35206: PPUSH
35207: CALL_OW 171
// end ; end ;
35211: LD_VAR 0 3
35215: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35216: LD_INT 0
35218: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35219: LD_VAR 0 1
35223: PUSH
35224: LD_INT 250
35226: EQUAL
35227: PUSH
35228: LD_VAR 0 2
35232: PPUSH
35233: CALL_OW 264
35237: PUSH
35238: LD_INT 81
35240: EQUAL
35241: AND
35242: IFFALSE 35263
// MinerPlaceMine ( unit , x , y ) ;
35244: LD_VAR 0 2
35248: PPUSH
35249: LD_VAR 0 4
35253: PPUSH
35254: LD_VAR 0 5
35258: PPUSH
35259: CALL 37648 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35263: LD_VAR 0 1
35267: PUSH
35268: LD_INT 251
35270: EQUAL
35271: PUSH
35272: LD_VAR 0 2
35276: PPUSH
35277: CALL_OW 264
35281: PUSH
35282: LD_INT 81
35284: EQUAL
35285: AND
35286: IFFALSE 35307
// MinerDetonateMine ( unit , x , y ) ;
35288: LD_VAR 0 2
35292: PPUSH
35293: LD_VAR 0 4
35297: PPUSH
35298: LD_VAR 0 5
35302: PPUSH
35303: CALL 37923 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35307: LD_VAR 0 1
35311: PUSH
35312: LD_INT 252
35314: EQUAL
35315: PUSH
35316: LD_VAR 0 2
35320: PPUSH
35321: CALL_OW 264
35325: PUSH
35326: LD_INT 81
35328: EQUAL
35329: AND
35330: IFFALSE 35351
// MinerCreateMinefield ( unit , x , y ) ;
35332: LD_VAR 0 2
35336: PPUSH
35337: LD_VAR 0 4
35341: PPUSH
35342: LD_VAR 0 5
35346: PPUSH
35347: CALL 38340 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35351: LD_VAR 0 1
35355: PUSH
35356: LD_INT 253
35358: EQUAL
35359: PUSH
35360: LD_VAR 0 2
35364: PPUSH
35365: CALL_OW 257
35369: PUSH
35370: LD_INT 5
35372: EQUAL
35373: AND
35374: IFFALSE 35395
// ComBinocular ( unit , x , y ) ;
35376: LD_VAR 0 2
35380: PPUSH
35381: LD_VAR 0 4
35385: PPUSH
35386: LD_VAR 0 5
35390: PPUSH
35391: CALL 38709 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35395: LD_VAR 0 1
35399: PUSH
35400: LD_INT 254
35402: EQUAL
35403: PUSH
35404: LD_VAR 0 2
35408: PPUSH
35409: CALL_OW 264
35413: PUSH
35414: LD_INT 99
35416: EQUAL
35417: AND
35418: PUSH
35419: LD_VAR 0 3
35423: PPUSH
35424: CALL_OW 263
35428: PUSH
35429: LD_INT 3
35431: EQUAL
35432: AND
35433: IFFALSE 35449
// HackDestroyVehicle ( unit , selectedUnit ) ;
35435: LD_VAR 0 2
35439: PPUSH
35440: LD_VAR 0 3
35444: PPUSH
35445: CALL 37012 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35449: LD_VAR 0 1
35453: PUSH
35454: LD_INT 255
35456: EQUAL
35457: PUSH
35458: LD_VAR 0 2
35462: PPUSH
35463: CALL_OW 264
35467: PUSH
35468: LD_INT 14
35470: PUSH
35471: LD_INT 53
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: IN
35478: AND
35479: PUSH
35480: LD_VAR 0 4
35484: PPUSH
35485: LD_VAR 0 5
35489: PPUSH
35490: CALL_OW 488
35494: AND
35495: IFFALSE 35519
// CutTreeXYR ( unit , x , y , 12 ) ;
35497: LD_VAR 0 2
35501: PPUSH
35502: LD_VAR 0 4
35506: PPUSH
35507: LD_VAR 0 5
35511: PPUSH
35512: LD_INT 12
35514: PPUSH
35515: CALL 35582 0 4
// if cmd = 256 then
35519: LD_VAR 0 1
35523: PUSH
35524: LD_INT 256
35526: EQUAL
35527: IFFALSE 35548
// SetFactoryWaypoint ( unit , x , y ) ;
35529: LD_VAR 0 2
35533: PPUSH
35534: LD_VAR 0 4
35538: PPUSH
35539: LD_VAR 0 5
35543: PPUSH
35544: CALL 33529 0 3
// if cmd = 257 then
35548: LD_VAR 0 1
35552: PUSH
35553: LD_INT 257
35555: EQUAL
35556: IFFALSE 35577
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35558: LD_VAR 0 2
35562: PPUSH
35563: LD_VAR 0 4
35567: PPUSH
35568: LD_VAR 0 5
35572: PPUSH
35573: CALL 33891 0 3
// end ;
35577: LD_VAR 0 6
35581: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35582: LD_INT 0
35584: PPUSH
35585: PPUSH
35586: PPUSH
35587: PPUSH
35588: PPUSH
35589: PPUSH
35590: PPUSH
35591: PPUSH
35592: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35593: LD_VAR 0 1
35597: NOT
35598: PUSH
35599: LD_VAR 0 2
35603: PPUSH
35604: LD_VAR 0 3
35608: PPUSH
35609: CALL_OW 488
35613: NOT
35614: OR
35615: PUSH
35616: LD_VAR 0 4
35620: NOT
35621: OR
35622: IFFALSE 35626
// exit ;
35624: GO 35966
// list := [ ] ;
35626: LD_ADDR_VAR 0 13
35630: PUSH
35631: EMPTY
35632: ST_TO_ADDR
// if x - r < 0 then
35633: LD_VAR 0 2
35637: PUSH
35638: LD_VAR 0 4
35642: MINUS
35643: PUSH
35644: LD_INT 0
35646: LESS
35647: IFFALSE 35659
// min_x := 0 else
35649: LD_ADDR_VAR 0 7
35653: PUSH
35654: LD_INT 0
35656: ST_TO_ADDR
35657: GO 35675
// min_x := x - r ;
35659: LD_ADDR_VAR 0 7
35663: PUSH
35664: LD_VAR 0 2
35668: PUSH
35669: LD_VAR 0 4
35673: MINUS
35674: ST_TO_ADDR
// if y - r < 0 then
35675: LD_VAR 0 3
35679: PUSH
35680: LD_VAR 0 4
35684: MINUS
35685: PUSH
35686: LD_INT 0
35688: LESS
35689: IFFALSE 35701
// min_y := 0 else
35691: LD_ADDR_VAR 0 8
35695: PUSH
35696: LD_INT 0
35698: ST_TO_ADDR
35699: GO 35717
// min_y := y - r ;
35701: LD_ADDR_VAR 0 8
35705: PUSH
35706: LD_VAR 0 3
35710: PUSH
35711: LD_VAR 0 4
35715: MINUS
35716: ST_TO_ADDR
// max_x := x + r ;
35717: LD_ADDR_VAR 0 9
35721: PUSH
35722: LD_VAR 0 2
35726: PUSH
35727: LD_VAR 0 4
35731: PLUS
35732: ST_TO_ADDR
// max_y := y + r ;
35733: LD_ADDR_VAR 0 10
35737: PUSH
35738: LD_VAR 0 3
35742: PUSH
35743: LD_VAR 0 4
35747: PLUS
35748: ST_TO_ADDR
// for _x = min_x to max_x do
35749: LD_ADDR_VAR 0 11
35753: PUSH
35754: DOUBLE
35755: LD_VAR 0 7
35759: DEC
35760: ST_TO_ADDR
35761: LD_VAR 0 9
35765: PUSH
35766: FOR_TO
35767: IFFALSE 35884
// for _y = min_y to max_y do
35769: LD_ADDR_VAR 0 12
35773: PUSH
35774: DOUBLE
35775: LD_VAR 0 8
35779: DEC
35780: ST_TO_ADDR
35781: LD_VAR 0 10
35785: PUSH
35786: FOR_TO
35787: IFFALSE 35880
// begin if not ValidHex ( _x , _y ) then
35789: LD_VAR 0 11
35793: PPUSH
35794: LD_VAR 0 12
35798: PPUSH
35799: CALL_OW 488
35803: NOT
35804: IFFALSE 35808
// continue ;
35806: GO 35786
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35808: LD_VAR 0 11
35812: PPUSH
35813: LD_VAR 0 12
35817: PPUSH
35818: CALL_OW 351
35822: PUSH
35823: LD_VAR 0 11
35827: PPUSH
35828: LD_VAR 0 12
35832: PPUSH
35833: CALL_OW 554
35837: AND
35838: IFFALSE 35878
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35840: LD_ADDR_VAR 0 13
35844: PUSH
35845: LD_VAR 0 13
35849: PPUSH
35850: LD_VAR 0 13
35854: PUSH
35855: LD_INT 1
35857: PLUS
35858: PPUSH
35859: LD_VAR 0 11
35863: PUSH
35864: LD_VAR 0 12
35868: PUSH
35869: EMPTY
35870: LIST
35871: LIST
35872: PPUSH
35873: CALL_OW 2
35877: ST_TO_ADDR
// end ;
35878: GO 35786
35880: POP
35881: POP
35882: GO 35766
35884: POP
35885: POP
// if not list then
35886: LD_VAR 0 13
35890: NOT
35891: IFFALSE 35895
// exit ;
35893: GO 35966
// for i in list do
35895: LD_ADDR_VAR 0 6
35899: PUSH
35900: LD_VAR 0 13
35904: PUSH
35905: FOR_IN
35906: IFFALSE 35964
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35908: LD_VAR 0 1
35912: PPUSH
35913: LD_STRING M
35915: PUSH
35916: LD_VAR 0 6
35920: PUSH
35921: LD_INT 1
35923: ARRAY
35924: PUSH
35925: LD_VAR 0 6
35929: PUSH
35930: LD_INT 2
35932: ARRAY
35933: PUSH
35934: LD_INT 0
35936: PUSH
35937: LD_INT 0
35939: PUSH
35940: LD_INT 0
35942: PUSH
35943: LD_INT 0
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: PUSH
35955: EMPTY
35956: LIST
35957: PPUSH
35958: CALL_OW 447
35962: GO 35905
35964: POP
35965: POP
// end ;
35966: LD_VAR 0 5
35970: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35971: LD_EXP 107
35975: NOT
35976: IFFALSE 36026
35978: GO 35980
35980: DISABLE
// begin initHack := true ;
35981: LD_ADDR_EXP 107
35985: PUSH
35986: LD_INT 1
35988: ST_TO_ADDR
// hackTanks := [ ] ;
35989: LD_ADDR_EXP 108
35993: PUSH
35994: EMPTY
35995: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35996: LD_ADDR_EXP 109
36000: PUSH
36001: EMPTY
36002: ST_TO_ADDR
// hackLimit := 3 ;
36003: LD_ADDR_EXP 110
36007: PUSH
36008: LD_INT 3
36010: ST_TO_ADDR
// hackDist := 12 ;
36011: LD_ADDR_EXP 111
36015: PUSH
36016: LD_INT 12
36018: ST_TO_ADDR
// hackCounter := [ ] ;
36019: LD_ADDR_EXP 112
36023: PUSH
36024: EMPTY
36025: ST_TO_ADDR
// end ;
36026: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
36027: LD_EXP 107
36031: PUSH
36032: LD_INT 34
36034: PUSH
36035: LD_INT 99
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: PPUSH
36042: CALL_OW 69
36046: AND
36047: IFFALSE 36300
36049: GO 36051
36051: DISABLE
36052: LD_INT 0
36054: PPUSH
36055: PPUSH
// begin enable ;
36056: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36057: LD_ADDR_VAR 0 1
36061: PUSH
36062: LD_INT 34
36064: PUSH
36065: LD_INT 99
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PPUSH
36072: CALL_OW 69
36076: PUSH
36077: FOR_IN
36078: IFFALSE 36298
// begin if not i in hackTanks then
36080: LD_VAR 0 1
36084: PUSH
36085: LD_EXP 108
36089: IN
36090: NOT
36091: IFFALSE 36174
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36093: LD_ADDR_EXP 108
36097: PUSH
36098: LD_EXP 108
36102: PPUSH
36103: LD_EXP 108
36107: PUSH
36108: LD_INT 1
36110: PLUS
36111: PPUSH
36112: LD_VAR 0 1
36116: PPUSH
36117: CALL_OW 1
36121: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36122: LD_ADDR_EXP 109
36126: PUSH
36127: LD_EXP 109
36131: PPUSH
36132: LD_EXP 109
36136: PUSH
36137: LD_INT 1
36139: PLUS
36140: PPUSH
36141: EMPTY
36142: PPUSH
36143: CALL_OW 1
36147: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36148: LD_ADDR_EXP 112
36152: PUSH
36153: LD_EXP 112
36157: PPUSH
36158: LD_EXP 112
36162: PUSH
36163: LD_INT 1
36165: PLUS
36166: PPUSH
36167: EMPTY
36168: PPUSH
36169: CALL_OW 1
36173: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36174: LD_VAR 0 1
36178: PPUSH
36179: CALL_OW 302
36183: NOT
36184: IFFALSE 36197
// begin HackUnlinkAll ( i ) ;
36186: LD_VAR 0 1
36190: PPUSH
36191: CALL 36303 0 1
// continue ;
36195: GO 36077
// end ; HackCheckCapturedStatus ( i ) ;
36197: LD_VAR 0 1
36201: PPUSH
36202: CALL 36746 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36206: LD_ADDR_VAR 0 2
36210: PUSH
36211: LD_INT 81
36213: PUSH
36214: LD_VAR 0 1
36218: PPUSH
36219: CALL_OW 255
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 33
36230: PUSH
36231: LD_INT 3
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 91
36240: PUSH
36241: LD_VAR 0 1
36245: PUSH
36246: LD_EXP 111
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 50
36258: PUSH
36259: EMPTY
36260: LIST
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: PPUSH
36268: CALL_OW 69
36272: ST_TO_ADDR
// if not tmp then
36273: LD_VAR 0 2
36277: NOT
36278: IFFALSE 36282
// continue ;
36280: GO 36077
// HackLink ( i , tmp ) ;
36282: LD_VAR 0 1
36286: PPUSH
36287: LD_VAR 0 2
36291: PPUSH
36292: CALL 36439 0 2
// end ;
36296: GO 36077
36298: POP
36299: POP
// end ;
36300: PPOPN 2
36302: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36303: LD_INT 0
36305: PPUSH
36306: PPUSH
36307: PPUSH
// if not hack in hackTanks then
36308: LD_VAR 0 1
36312: PUSH
36313: LD_EXP 108
36317: IN
36318: NOT
36319: IFFALSE 36323
// exit ;
36321: GO 36434
// index := GetElementIndex ( hackTanks , hack ) ;
36323: LD_ADDR_VAR 0 4
36327: PUSH
36328: LD_EXP 108
36332: PPUSH
36333: LD_VAR 0 1
36337: PPUSH
36338: CALL 43876 0 2
36342: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36343: LD_EXP 109
36347: PUSH
36348: LD_VAR 0 4
36352: ARRAY
36353: IFFALSE 36434
// begin for i in hackTanksCaptured [ index ] do
36355: LD_ADDR_VAR 0 3
36359: PUSH
36360: LD_EXP 109
36364: PUSH
36365: LD_VAR 0 4
36369: ARRAY
36370: PUSH
36371: FOR_IN
36372: IFFALSE 36398
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36374: LD_VAR 0 3
36378: PUSH
36379: LD_INT 1
36381: ARRAY
36382: PPUSH
36383: LD_VAR 0 3
36387: PUSH
36388: LD_INT 2
36390: ARRAY
36391: PPUSH
36392: CALL_OW 235
36396: GO 36371
36398: POP
36399: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36400: LD_ADDR_EXP 109
36404: PUSH
36405: LD_EXP 109
36409: PPUSH
36410: LD_VAR 0 4
36414: PPUSH
36415: EMPTY
36416: PPUSH
36417: CALL_OW 1
36421: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36422: LD_VAR 0 1
36426: PPUSH
36427: LD_INT 0
36429: PPUSH
36430: CALL_OW 505
// end ; end ;
36434: LD_VAR 0 2
36438: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36439: LD_INT 0
36441: PPUSH
36442: PPUSH
36443: PPUSH
// if not hack in hackTanks or not vehicles then
36444: LD_VAR 0 1
36448: PUSH
36449: LD_EXP 108
36453: IN
36454: NOT
36455: PUSH
36456: LD_VAR 0 2
36460: NOT
36461: OR
36462: IFFALSE 36466
// exit ;
36464: GO 36741
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36466: LD_ADDR_VAR 0 2
36470: PUSH
36471: LD_VAR 0 1
36475: PPUSH
36476: LD_VAR 0 2
36480: PPUSH
36481: LD_INT 1
36483: PPUSH
36484: LD_INT 1
36486: PPUSH
36487: CALL 44526 0 4
36491: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36492: LD_ADDR_VAR 0 5
36496: PUSH
36497: LD_EXP 108
36501: PPUSH
36502: LD_VAR 0 1
36506: PPUSH
36507: CALL 43876 0 2
36511: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36512: LD_EXP 109
36516: PUSH
36517: LD_VAR 0 5
36521: ARRAY
36522: PUSH
36523: LD_EXP 110
36527: LESS
36528: IFFALSE 36717
// begin for i := 1 to vehicles do
36530: LD_ADDR_VAR 0 4
36534: PUSH
36535: DOUBLE
36536: LD_INT 1
36538: DEC
36539: ST_TO_ADDR
36540: LD_VAR 0 2
36544: PUSH
36545: FOR_TO
36546: IFFALSE 36715
// begin if hackTanksCaptured [ index ] = hackLimit then
36548: LD_EXP 109
36552: PUSH
36553: LD_VAR 0 5
36557: ARRAY
36558: PUSH
36559: LD_EXP 110
36563: EQUAL
36564: IFFALSE 36568
// break ;
36566: GO 36715
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36568: LD_ADDR_EXP 112
36572: PUSH
36573: LD_EXP 112
36577: PPUSH
36578: LD_VAR 0 5
36582: PPUSH
36583: LD_EXP 112
36587: PUSH
36588: LD_VAR 0 5
36592: ARRAY
36593: PUSH
36594: LD_INT 1
36596: PLUS
36597: PPUSH
36598: CALL_OW 1
36602: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36603: LD_ADDR_EXP 109
36607: PUSH
36608: LD_EXP 109
36612: PPUSH
36613: LD_VAR 0 5
36617: PUSH
36618: LD_EXP 109
36622: PUSH
36623: LD_VAR 0 5
36627: ARRAY
36628: PUSH
36629: LD_INT 1
36631: PLUS
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: PPUSH
36637: LD_VAR 0 2
36641: PUSH
36642: LD_VAR 0 4
36646: ARRAY
36647: PUSH
36648: LD_VAR 0 2
36652: PUSH
36653: LD_VAR 0 4
36657: ARRAY
36658: PPUSH
36659: CALL_OW 255
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PPUSH
36668: CALL 44091 0 3
36672: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36673: LD_VAR 0 2
36677: PUSH
36678: LD_VAR 0 4
36682: ARRAY
36683: PPUSH
36684: LD_VAR 0 1
36688: PPUSH
36689: CALL_OW 255
36693: PPUSH
36694: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36698: LD_VAR 0 2
36702: PUSH
36703: LD_VAR 0 4
36707: ARRAY
36708: PPUSH
36709: CALL_OW 141
// end ;
36713: GO 36545
36715: POP
36716: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36717: LD_VAR 0 1
36721: PPUSH
36722: LD_EXP 109
36726: PUSH
36727: LD_VAR 0 5
36731: ARRAY
36732: PUSH
36733: LD_INT 0
36735: PLUS
36736: PPUSH
36737: CALL_OW 505
// end ;
36741: LD_VAR 0 3
36745: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36746: LD_INT 0
36748: PPUSH
36749: PPUSH
36750: PPUSH
36751: PPUSH
// if not hack in hackTanks then
36752: LD_VAR 0 1
36756: PUSH
36757: LD_EXP 108
36761: IN
36762: NOT
36763: IFFALSE 36767
// exit ;
36765: GO 37007
// index := GetElementIndex ( hackTanks , hack ) ;
36767: LD_ADDR_VAR 0 4
36771: PUSH
36772: LD_EXP 108
36776: PPUSH
36777: LD_VAR 0 1
36781: PPUSH
36782: CALL 43876 0 2
36786: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36787: LD_ADDR_VAR 0 3
36791: PUSH
36792: DOUBLE
36793: LD_EXP 109
36797: PUSH
36798: LD_VAR 0 4
36802: ARRAY
36803: INC
36804: ST_TO_ADDR
36805: LD_INT 1
36807: PUSH
36808: FOR_DOWNTO
36809: IFFALSE 36981
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36811: LD_ADDR_VAR 0 5
36815: PUSH
36816: LD_EXP 109
36820: PUSH
36821: LD_VAR 0 4
36825: ARRAY
36826: PUSH
36827: LD_VAR 0 3
36831: ARRAY
36832: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36833: LD_VAR 0 5
36837: PUSH
36838: LD_INT 1
36840: ARRAY
36841: PPUSH
36842: CALL_OW 302
36846: NOT
36847: PUSH
36848: LD_VAR 0 5
36852: PUSH
36853: LD_INT 1
36855: ARRAY
36856: PPUSH
36857: CALL_OW 255
36861: PUSH
36862: LD_VAR 0 1
36866: PPUSH
36867: CALL_OW 255
36871: NONEQUAL
36872: OR
36873: IFFALSE 36979
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36875: LD_VAR 0 5
36879: PUSH
36880: LD_INT 1
36882: ARRAY
36883: PPUSH
36884: CALL_OW 305
36888: PUSH
36889: LD_VAR 0 5
36893: PUSH
36894: LD_INT 1
36896: ARRAY
36897: PPUSH
36898: CALL_OW 255
36902: PUSH
36903: LD_VAR 0 1
36907: PPUSH
36908: CALL_OW 255
36912: EQUAL
36913: AND
36914: IFFALSE 36938
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36916: LD_VAR 0 5
36920: PUSH
36921: LD_INT 1
36923: ARRAY
36924: PPUSH
36925: LD_VAR 0 5
36929: PUSH
36930: LD_INT 2
36932: ARRAY
36933: PPUSH
36934: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36938: LD_ADDR_EXP 109
36942: PUSH
36943: LD_EXP 109
36947: PPUSH
36948: LD_VAR 0 4
36952: PPUSH
36953: LD_EXP 109
36957: PUSH
36958: LD_VAR 0 4
36962: ARRAY
36963: PPUSH
36964: LD_VAR 0 3
36968: PPUSH
36969: CALL_OW 3
36973: PPUSH
36974: CALL_OW 1
36978: ST_TO_ADDR
// end ; end ;
36979: GO 36808
36981: POP
36982: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36983: LD_VAR 0 1
36987: PPUSH
36988: LD_EXP 109
36992: PUSH
36993: LD_VAR 0 4
36997: ARRAY
36998: PUSH
36999: LD_INT 0
37001: PLUS
37002: PPUSH
37003: CALL_OW 505
// end ;
37007: LD_VAR 0 2
37011: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
37012: LD_INT 0
37014: PPUSH
37015: PPUSH
37016: PPUSH
37017: PPUSH
// if not hack in hackTanks then
37018: LD_VAR 0 1
37022: PUSH
37023: LD_EXP 108
37027: IN
37028: NOT
37029: IFFALSE 37033
// exit ;
37031: GO 37118
// index := GetElementIndex ( hackTanks , hack ) ;
37033: LD_ADDR_VAR 0 5
37037: PUSH
37038: LD_EXP 108
37042: PPUSH
37043: LD_VAR 0 1
37047: PPUSH
37048: CALL 43876 0 2
37052: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37053: LD_ADDR_VAR 0 4
37057: PUSH
37058: DOUBLE
37059: LD_INT 1
37061: DEC
37062: ST_TO_ADDR
37063: LD_EXP 109
37067: PUSH
37068: LD_VAR 0 5
37072: ARRAY
37073: PUSH
37074: FOR_TO
37075: IFFALSE 37116
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37077: LD_EXP 109
37081: PUSH
37082: LD_VAR 0 5
37086: ARRAY
37087: PUSH
37088: LD_VAR 0 4
37092: ARRAY
37093: PUSH
37094: LD_INT 1
37096: ARRAY
37097: PUSH
37098: LD_VAR 0 2
37102: EQUAL
37103: IFFALSE 37114
// KillUnit ( vehicle ) ;
37105: LD_VAR 0 2
37109: PPUSH
37110: CALL_OW 66
37114: GO 37074
37116: POP
37117: POP
// end ;
37118: LD_VAR 0 3
37122: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37123: LD_EXP 113
37127: NOT
37128: IFFALSE 37163
37130: GO 37132
37132: DISABLE
// begin initMiner := true ;
37133: LD_ADDR_EXP 113
37137: PUSH
37138: LD_INT 1
37140: ST_TO_ADDR
// minersList := [ ] ;
37141: LD_ADDR_EXP 114
37145: PUSH
37146: EMPTY
37147: ST_TO_ADDR
// minerMinesList := [ ] ;
37148: LD_ADDR_EXP 115
37152: PUSH
37153: EMPTY
37154: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37155: LD_ADDR_EXP 116
37159: PUSH
37160: LD_INT 5
37162: ST_TO_ADDR
// end ;
37163: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37164: LD_EXP 113
37168: PUSH
37169: LD_INT 34
37171: PUSH
37172: LD_INT 81
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PPUSH
37179: CALL_OW 69
37183: AND
37184: IFFALSE 37645
37186: GO 37188
37188: DISABLE
37189: LD_INT 0
37191: PPUSH
37192: PPUSH
37193: PPUSH
37194: PPUSH
// begin enable ;
37195: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37196: LD_ADDR_VAR 0 1
37200: PUSH
37201: LD_INT 34
37203: PUSH
37204: LD_INT 81
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PPUSH
37211: CALL_OW 69
37215: PUSH
37216: FOR_IN
37217: IFFALSE 37289
// begin if not i in minersList then
37219: LD_VAR 0 1
37223: PUSH
37224: LD_EXP 114
37228: IN
37229: NOT
37230: IFFALSE 37287
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37232: LD_ADDR_EXP 114
37236: PUSH
37237: LD_EXP 114
37241: PPUSH
37242: LD_EXP 114
37246: PUSH
37247: LD_INT 1
37249: PLUS
37250: PPUSH
37251: LD_VAR 0 1
37255: PPUSH
37256: CALL_OW 1
37260: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37261: LD_ADDR_EXP 115
37265: PUSH
37266: LD_EXP 115
37270: PPUSH
37271: LD_EXP 115
37275: PUSH
37276: LD_INT 1
37278: PLUS
37279: PPUSH
37280: EMPTY
37281: PPUSH
37282: CALL_OW 1
37286: ST_TO_ADDR
// end end ;
37287: GO 37216
37289: POP
37290: POP
// for i := minerMinesList downto 1 do
37291: LD_ADDR_VAR 0 1
37295: PUSH
37296: DOUBLE
37297: LD_EXP 115
37301: INC
37302: ST_TO_ADDR
37303: LD_INT 1
37305: PUSH
37306: FOR_DOWNTO
37307: IFFALSE 37643
// begin if IsLive ( minersList [ i ] ) then
37309: LD_EXP 114
37313: PUSH
37314: LD_VAR 0 1
37318: ARRAY
37319: PPUSH
37320: CALL_OW 300
37324: IFFALSE 37352
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37326: LD_EXP 114
37330: PUSH
37331: LD_VAR 0 1
37335: ARRAY
37336: PPUSH
37337: LD_EXP 115
37341: PUSH
37342: LD_VAR 0 1
37346: ARRAY
37347: PPUSH
37348: CALL_OW 505
// if not minerMinesList [ i ] then
37352: LD_EXP 115
37356: PUSH
37357: LD_VAR 0 1
37361: ARRAY
37362: NOT
37363: IFFALSE 37367
// continue ;
37365: GO 37306
// for j := minerMinesList [ i ] downto 1 do
37367: LD_ADDR_VAR 0 2
37371: PUSH
37372: DOUBLE
37373: LD_EXP 115
37377: PUSH
37378: LD_VAR 0 1
37382: ARRAY
37383: INC
37384: ST_TO_ADDR
37385: LD_INT 1
37387: PUSH
37388: FOR_DOWNTO
37389: IFFALSE 37639
// begin side := GetSide ( minersList [ i ] ) ;
37391: LD_ADDR_VAR 0 3
37395: PUSH
37396: LD_EXP 114
37400: PUSH
37401: LD_VAR 0 1
37405: ARRAY
37406: PPUSH
37407: CALL_OW 255
37411: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37412: LD_ADDR_VAR 0 4
37416: PUSH
37417: LD_EXP 115
37421: PUSH
37422: LD_VAR 0 1
37426: ARRAY
37427: PUSH
37428: LD_VAR 0 2
37432: ARRAY
37433: PUSH
37434: LD_INT 1
37436: ARRAY
37437: PPUSH
37438: LD_EXP 115
37442: PUSH
37443: LD_VAR 0 1
37447: ARRAY
37448: PUSH
37449: LD_VAR 0 2
37453: ARRAY
37454: PUSH
37455: LD_INT 2
37457: ARRAY
37458: PPUSH
37459: CALL_OW 428
37463: ST_TO_ADDR
// if not tmp then
37464: LD_VAR 0 4
37468: NOT
37469: IFFALSE 37473
// continue ;
37471: GO 37388
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37473: LD_VAR 0 4
37477: PUSH
37478: LD_INT 81
37480: PUSH
37481: LD_VAR 0 3
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PPUSH
37490: CALL_OW 69
37494: IN
37495: PUSH
37496: LD_EXP 115
37500: PUSH
37501: LD_VAR 0 1
37505: ARRAY
37506: PUSH
37507: LD_VAR 0 2
37511: ARRAY
37512: PUSH
37513: LD_INT 1
37515: ARRAY
37516: PPUSH
37517: LD_EXP 115
37521: PUSH
37522: LD_VAR 0 1
37526: ARRAY
37527: PUSH
37528: LD_VAR 0 2
37532: ARRAY
37533: PUSH
37534: LD_INT 2
37536: ARRAY
37537: PPUSH
37538: CALL_OW 458
37542: AND
37543: IFFALSE 37637
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37545: LD_EXP 115
37549: PUSH
37550: LD_VAR 0 1
37554: ARRAY
37555: PUSH
37556: LD_VAR 0 2
37560: ARRAY
37561: PUSH
37562: LD_INT 1
37564: ARRAY
37565: PPUSH
37566: LD_EXP 115
37570: PUSH
37571: LD_VAR 0 1
37575: ARRAY
37576: PUSH
37577: LD_VAR 0 2
37581: ARRAY
37582: PUSH
37583: LD_INT 2
37585: ARRAY
37586: PPUSH
37587: LD_VAR 0 3
37591: PPUSH
37592: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37596: LD_ADDR_EXP 115
37600: PUSH
37601: LD_EXP 115
37605: PPUSH
37606: LD_VAR 0 1
37610: PPUSH
37611: LD_EXP 115
37615: PUSH
37616: LD_VAR 0 1
37620: ARRAY
37621: PPUSH
37622: LD_VAR 0 2
37626: PPUSH
37627: CALL_OW 3
37631: PPUSH
37632: CALL_OW 1
37636: ST_TO_ADDR
// end ; end ;
37637: GO 37388
37639: POP
37640: POP
// end ;
37641: GO 37306
37643: POP
37644: POP
// end ;
37645: PPOPN 4
37647: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37648: LD_INT 0
37650: PPUSH
37651: PPUSH
// result := false ;
37652: LD_ADDR_VAR 0 4
37656: PUSH
37657: LD_INT 0
37659: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37660: LD_VAR 0 1
37664: PPUSH
37665: CALL_OW 264
37669: PUSH
37670: LD_INT 81
37672: EQUAL
37673: NOT
37674: IFFALSE 37678
// exit ;
37676: GO 37918
// index := GetElementIndex ( minersList , unit ) ;
37678: LD_ADDR_VAR 0 5
37682: PUSH
37683: LD_EXP 114
37687: PPUSH
37688: LD_VAR 0 1
37692: PPUSH
37693: CALL 43876 0 2
37697: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37698: LD_EXP 115
37702: PUSH
37703: LD_VAR 0 5
37707: ARRAY
37708: PUSH
37709: LD_EXP 116
37713: GREATEREQUAL
37714: IFFALSE 37718
// exit ;
37716: GO 37918
// ComMoveXY ( unit , x , y ) ;
37718: LD_VAR 0 1
37722: PPUSH
37723: LD_VAR 0 2
37727: PPUSH
37728: LD_VAR 0 3
37732: PPUSH
37733: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37737: LD_INT 35
37739: PPUSH
37740: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37744: LD_VAR 0 1
37748: PPUSH
37749: LD_VAR 0 2
37753: PPUSH
37754: LD_VAR 0 3
37758: PPUSH
37759: CALL 75260 0 3
37763: NOT
37764: PUSH
37765: LD_VAR 0 1
37769: PPUSH
37770: CALL_OW 314
37774: AND
37775: IFFALSE 37779
// exit ;
37777: GO 37918
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37779: LD_VAR 0 2
37783: PPUSH
37784: LD_VAR 0 3
37788: PPUSH
37789: CALL_OW 428
37793: PUSH
37794: LD_VAR 0 1
37798: EQUAL
37799: PUSH
37800: LD_VAR 0 1
37804: PPUSH
37805: CALL_OW 314
37809: NOT
37810: AND
37811: IFFALSE 37737
// PlaySoundXY ( x , y , PlantMine ) ;
37813: LD_VAR 0 2
37817: PPUSH
37818: LD_VAR 0 3
37822: PPUSH
37823: LD_STRING PlantMine
37825: PPUSH
37826: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37830: LD_VAR 0 2
37834: PPUSH
37835: LD_VAR 0 3
37839: PPUSH
37840: LD_VAR 0 1
37844: PPUSH
37845: CALL_OW 255
37849: PPUSH
37850: LD_INT 0
37852: PPUSH
37853: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37857: LD_ADDR_EXP 115
37861: PUSH
37862: LD_EXP 115
37866: PPUSH
37867: LD_VAR 0 5
37871: PUSH
37872: LD_EXP 115
37876: PUSH
37877: LD_VAR 0 5
37881: ARRAY
37882: PUSH
37883: LD_INT 1
37885: PLUS
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PPUSH
37891: LD_VAR 0 2
37895: PUSH
37896: LD_VAR 0 3
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PPUSH
37905: CALL 44091 0 3
37909: ST_TO_ADDR
// result := true ;
37910: LD_ADDR_VAR 0 4
37914: PUSH
37915: LD_INT 1
37917: ST_TO_ADDR
// end ;
37918: LD_VAR 0 4
37922: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37923: LD_INT 0
37925: PPUSH
37926: PPUSH
37927: PPUSH
// if not unit in minersList then
37928: LD_VAR 0 1
37932: PUSH
37933: LD_EXP 114
37937: IN
37938: NOT
37939: IFFALSE 37943
// exit ;
37941: GO 38335
// index := GetElementIndex ( minersList , unit ) ;
37943: LD_ADDR_VAR 0 6
37947: PUSH
37948: LD_EXP 114
37952: PPUSH
37953: LD_VAR 0 1
37957: PPUSH
37958: CALL 43876 0 2
37962: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37963: LD_ADDR_VAR 0 5
37967: PUSH
37968: DOUBLE
37969: LD_EXP 115
37973: PUSH
37974: LD_VAR 0 6
37978: ARRAY
37979: INC
37980: ST_TO_ADDR
37981: LD_INT 1
37983: PUSH
37984: FOR_DOWNTO
37985: IFFALSE 38146
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37987: LD_EXP 115
37991: PUSH
37992: LD_VAR 0 6
37996: ARRAY
37997: PUSH
37998: LD_VAR 0 5
38002: ARRAY
38003: PUSH
38004: LD_INT 1
38006: ARRAY
38007: PUSH
38008: LD_VAR 0 2
38012: EQUAL
38013: PUSH
38014: LD_EXP 115
38018: PUSH
38019: LD_VAR 0 6
38023: ARRAY
38024: PUSH
38025: LD_VAR 0 5
38029: ARRAY
38030: PUSH
38031: LD_INT 2
38033: ARRAY
38034: PUSH
38035: LD_VAR 0 3
38039: EQUAL
38040: AND
38041: IFFALSE 38144
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38043: LD_EXP 115
38047: PUSH
38048: LD_VAR 0 6
38052: ARRAY
38053: PUSH
38054: LD_VAR 0 5
38058: ARRAY
38059: PUSH
38060: LD_INT 1
38062: ARRAY
38063: PPUSH
38064: LD_EXP 115
38068: PUSH
38069: LD_VAR 0 6
38073: ARRAY
38074: PUSH
38075: LD_VAR 0 5
38079: ARRAY
38080: PUSH
38081: LD_INT 2
38083: ARRAY
38084: PPUSH
38085: LD_VAR 0 1
38089: PPUSH
38090: CALL_OW 255
38094: PPUSH
38095: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38099: LD_ADDR_EXP 115
38103: PUSH
38104: LD_EXP 115
38108: PPUSH
38109: LD_VAR 0 6
38113: PPUSH
38114: LD_EXP 115
38118: PUSH
38119: LD_VAR 0 6
38123: ARRAY
38124: PPUSH
38125: LD_VAR 0 5
38129: PPUSH
38130: CALL_OW 3
38134: PPUSH
38135: CALL_OW 1
38139: ST_TO_ADDR
// exit ;
38140: POP
38141: POP
38142: GO 38335
// end ; end ;
38144: GO 37984
38146: POP
38147: POP
// for i := minerMinesList [ index ] downto 1 do
38148: LD_ADDR_VAR 0 5
38152: PUSH
38153: DOUBLE
38154: LD_EXP 115
38158: PUSH
38159: LD_VAR 0 6
38163: ARRAY
38164: INC
38165: ST_TO_ADDR
38166: LD_INT 1
38168: PUSH
38169: FOR_DOWNTO
38170: IFFALSE 38333
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38172: LD_EXP 115
38176: PUSH
38177: LD_VAR 0 6
38181: ARRAY
38182: PUSH
38183: LD_VAR 0 5
38187: ARRAY
38188: PUSH
38189: LD_INT 1
38191: ARRAY
38192: PPUSH
38193: LD_EXP 115
38197: PUSH
38198: LD_VAR 0 6
38202: ARRAY
38203: PUSH
38204: LD_VAR 0 5
38208: ARRAY
38209: PUSH
38210: LD_INT 2
38212: ARRAY
38213: PPUSH
38214: LD_VAR 0 2
38218: PPUSH
38219: LD_VAR 0 3
38223: PPUSH
38224: CALL_OW 298
38228: PUSH
38229: LD_INT 6
38231: LESS
38232: IFFALSE 38331
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38234: LD_EXP 115
38238: PUSH
38239: LD_VAR 0 6
38243: ARRAY
38244: PUSH
38245: LD_VAR 0 5
38249: ARRAY
38250: PUSH
38251: LD_INT 1
38253: ARRAY
38254: PPUSH
38255: LD_EXP 115
38259: PUSH
38260: LD_VAR 0 6
38264: ARRAY
38265: PUSH
38266: LD_VAR 0 5
38270: ARRAY
38271: PUSH
38272: LD_INT 2
38274: ARRAY
38275: PPUSH
38276: LD_VAR 0 1
38280: PPUSH
38281: CALL_OW 255
38285: PPUSH
38286: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38290: LD_ADDR_EXP 115
38294: PUSH
38295: LD_EXP 115
38299: PPUSH
38300: LD_VAR 0 6
38304: PPUSH
38305: LD_EXP 115
38309: PUSH
38310: LD_VAR 0 6
38314: ARRAY
38315: PPUSH
38316: LD_VAR 0 5
38320: PPUSH
38321: CALL_OW 3
38325: PPUSH
38326: CALL_OW 1
38330: ST_TO_ADDR
// end ; end ;
38331: GO 38169
38333: POP
38334: POP
// end ;
38335: LD_VAR 0 4
38339: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38340: LD_INT 0
38342: PPUSH
38343: PPUSH
38344: PPUSH
38345: PPUSH
38346: PPUSH
38347: PPUSH
38348: PPUSH
38349: PPUSH
38350: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38351: LD_VAR 0 1
38355: PPUSH
38356: CALL_OW 264
38360: PUSH
38361: LD_INT 81
38363: EQUAL
38364: NOT
38365: PUSH
38366: LD_VAR 0 1
38370: PUSH
38371: LD_EXP 114
38375: IN
38376: NOT
38377: OR
38378: IFFALSE 38382
// exit ;
38380: GO 38704
// index := GetElementIndex ( minersList , unit ) ;
38382: LD_ADDR_VAR 0 6
38386: PUSH
38387: LD_EXP 114
38391: PPUSH
38392: LD_VAR 0 1
38396: PPUSH
38397: CALL 43876 0 2
38401: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38402: LD_ADDR_VAR 0 8
38406: PUSH
38407: LD_EXP 116
38411: PUSH
38412: LD_EXP 115
38416: PUSH
38417: LD_VAR 0 6
38421: ARRAY
38422: MINUS
38423: ST_TO_ADDR
// if not minesFreeAmount then
38424: LD_VAR 0 8
38428: NOT
38429: IFFALSE 38433
// exit ;
38431: GO 38704
// tmp := [ ] ;
38433: LD_ADDR_VAR 0 7
38437: PUSH
38438: EMPTY
38439: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38440: LD_ADDR_VAR 0 5
38444: PUSH
38445: DOUBLE
38446: LD_INT 1
38448: DEC
38449: ST_TO_ADDR
38450: LD_VAR 0 8
38454: PUSH
38455: FOR_TO
38456: IFFALSE 38651
// begin _d := rand ( 0 , 5 ) ;
38458: LD_ADDR_VAR 0 11
38462: PUSH
38463: LD_INT 0
38465: PPUSH
38466: LD_INT 5
38468: PPUSH
38469: CALL_OW 12
38473: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38474: LD_ADDR_VAR 0 12
38478: PUSH
38479: LD_INT 2
38481: PPUSH
38482: LD_INT 6
38484: PPUSH
38485: CALL_OW 12
38489: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38490: LD_ADDR_VAR 0 9
38494: PUSH
38495: LD_VAR 0 2
38499: PPUSH
38500: LD_VAR 0 11
38504: PPUSH
38505: LD_VAR 0 12
38509: PPUSH
38510: CALL_OW 272
38514: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38515: LD_ADDR_VAR 0 10
38519: PUSH
38520: LD_VAR 0 3
38524: PPUSH
38525: LD_VAR 0 11
38529: PPUSH
38530: LD_VAR 0 12
38534: PPUSH
38535: CALL_OW 273
38539: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38540: LD_VAR 0 9
38544: PPUSH
38545: LD_VAR 0 10
38549: PPUSH
38550: CALL_OW 488
38554: PUSH
38555: LD_VAR 0 9
38559: PUSH
38560: LD_VAR 0 10
38564: PUSH
38565: EMPTY
38566: LIST
38567: LIST
38568: PUSH
38569: LD_VAR 0 7
38573: IN
38574: NOT
38575: AND
38576: PUSH
38577: LD_VAR 0 9
38581: PPUSH
38582: LD_VAR 0 10
38586: PPUSH
38587: CALL_OW 458
38591: NOT
38592: AND
38593: IFFALSE 38635
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38595: LD_ADDR_VAR 0 7
38599: PUSH
38600: LD_VAR 0 7
38604: PPUSH
38605: LD_VAR 0 7
38609: PUSH
38610: LD_INT 1
38612: PLUS
38613: PPUSH
38614: LD_VAR 0 9
38618: PUSH
38619: LD_VAR 0 10
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PPUSH
38628: CALL_OW 1
38632: ST_TO_ADDR
38633: GO 38649
// i := i - 1 ;
38635: LD_ADDR_VAR 0 5
38639: PUSH
38640: LD_VAR 0 5
38644: PUSH
38645: LD_INT 1
38647: MINUS
38648: ST_TO_ADDR
// end ;
38649: GO 38455
38651: POP
38652: POP
// for i in tmp do
38653: LD_ADDR_VAR 0 5
38657: PUSH
38658: LD_VAR 0 7
38662: PUSH
38663: FOR_IN
38664: IFFALSE 38702
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38666: LD_VAR 0 1
38670: PPUSH
38671: LD_VAR 0 5
38675: PUSH
38676: LD_INT 1
38678: ARRAY
38679: PPUSH
38680: LD_VAR 0 5
38684: PUSH
38685: LD_INT 2
38687: ARRAY
38688: PPUSH
38689: CALL 37648 0 3
38693: NOT
38694: IFFALSE 38700
// exit ;
38696: POP
38697: POP
38698: GO 38704
38700: GO 38663
38702: POP
38703: POP
// end ;
38704: LD_VAR 0 4
38708: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38709: LD_INT 0
38711: PPUSH
38712: PPUSH
38713: PPUSH
38714: PPUSH
38715: PPUSH
38716: PPUSH
38717: PPUSH
// if not GetClass ( unit ) = class_sniper then
38718: LD_VAR 0 1
38722: PPUSH
38723: CALL_OW 257
38727: PUSH
38728: LD_INT 5
38730: EQUAL
38731: NOT
38732: IFFALSE 38736
// exit ;
38734: GO 39124
// dist := 8 ;
38736: LD_ADDR_VAR 0 5
38740: PUSH
38741: LD_INT 8
38743: ST_TO_ADDR
// viewRange := 12 ;
38744: LD_ADDR_VAR 0 7
38748: PUSH
38749: LD_INT 12
38751: ST_TO_ADDR
// side := GetSide ( unit ) ;
38752: LD_ADDR_VAR 0 6
38756: PUSH
38757: LD_VAR 0 1
38761: PPUSH
38762: CALL_OW 255
38766: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38767: LD_INT 61
38769: PPUSH
38770: LD_VAR 0 6
38774: PPUSH
38775: CALL_OW 321
38779: PUSH
38780: LD_INT 2
38782: EQUAL
38783: IFFALSE 38793
// viewRange := 16 ;
38785: LD_ADDR_VAR 0 7
38789: PUSH
38790: LD_INT 16
38792: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38793: LD_VAR 0 1
38797: PPUSH
38798: LD_VAR 0 2
38802: PPUSH
38803: LD_VAR 0 3
38807: PPUSH
38808: CALL_OW 297
38812: PUSH
38813: LD_VAR 0 5
38817: GREATER
38818: IFFALSE 38897
// begin ComMoveXY ( unit , x , y ) ;
38820: LD_VAR 0 1
38824: PPUSH
38825: LD_VAR 0 2
38829: PPUSH
38830: LD_VAR 0 3
38834: PPUSH
38835: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38839: LD_INT 35
38841: PPUSH
38842: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38846: LD_VAR 0 1
38850: PPUSH
38851: LD_VAR 0 2
38855: PPUSH
38856: LD_VAR 0 3
38860: PPUSH
38861: CALL 75260 0 3
38865: NOT
38866: IFFALSE 38870
// exit ;
38868: GO 39124
// until GetDistUnitXY ( unit , x , y ) < dist ;
38870: LD_VAR 0 1
38874: PPUSH
38875: LD_VAR 0 2
38879: PPUSH
38880: LD_VAR 0 3
38884: PPUSH
38885: CALL_OW 297
38889: PUSH
38890: LD_VAR 0 5
38894: LESS
38895: IFFALSE 38839
// end ; ComTurnXY ( unit , x , y ) ;
38897: LD_VAR 0 1
38901: PPUSH
38902: LD_VAR 0 2
38906: PPUSH
38907: LD_VAR 0 3
38911: PPUSH
38912: CALL_OW 118
// wait ( 5 ) ;
38916: LD_INT 5
38918: PPUSH
38919: CALL_OW 67
// _d := GetDir ( unit ) ;
38923: LD_ADDR_VAR 0 10
38927: PUSH
38928: LD_VAR 0 1
38932: PPUSH
38933: CALL_OW 254
38937: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38938: LD_ADDR_VAR 0 8
38942: PUSH
38943: LD_VAR 0 1
38947: PPUSH
38948: CALL_OW 250
38952: PPUSH
38953: LD_VAR 0 10
38957: PPUSH
38958: LD_VAR 0 5
38962: PPUSH
38963: CALL_OW 272
38967: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38968: LD_ADDR_VAR 0 9
38972: PUSH
38973: LD_VAR 0 1
38977: PPUSH
38978: CALL_OW 251
38982: PPUSH
38983: LD_VAR 0 10
38987: PPUSH
38988: LD_VAR 0 5
38992: PPUSH
38993: CALL_OW 273
38997: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38998: LD_VAR 0 8
39002: PPUSH
39003: LD_VAR 0 9
39007: PPUSH
39008: CALL_OW 488
39012: NOT
39013: IFFALSE 39017
// exit ;
39015: GO 39124
// ComAnimCustom ( unit , 1 ) ;
39017: LD_VAR 0 1
39021: PPUSH
39022: LD_INT 1
39024: PPUSH
39025: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
39029: LD_VAR 0 8
39033: PPUSH
39034: LD_VAR 0 9
39038: PPUSH
39039: LD_VAR 0 6
39043: PPUSH
39044: LD_VAR 0 7
39048: PPUSH
39049: CALL_OW 330
// repeat wait ( 1 ) ;
39053: LD_INT 1
39055: PPUSH
39056: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39060: LD_VAR 0 1
39064: PPUSH
39065: CALL_OW 316
39069: PUSH
39070: LD_VAR 0 1
39074: PPUSH
39075: CALL_OW 314
39079: OR
39080: PUSH
39081: LD_VAR 0 1
39085: PPUSH
39086: CALL_OW 302
39090: NOT
39091: OR
39092: PUSH
39093: LD_VAR 0 1
39097: PPUSH
39098: CALL_OW 301
39102: OR
39103: IFFALSE 39053
// RemoveSeeing ( _x , _y , side ) ;
39105: LD_VAR 0 8
39109: PPUSH
39110: LD_VAR 0 9
39114: PPUSH
39115: LD_VAR 0 6
39119: PPUSH
39120: CALL_OW 331
// end ; end_of_file
39124: LD_VAR 0 4
39128: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39129: LD_INT 0
39131: PPUSH
39132: PPUSH
// if exist_mode then
39133: LD_VAR 0 2
39137: IFFALSE 39162
// unit := CreateCharacter ( prefix & ident ) else
39139: LD_ADDR_VAR 0 5
39143: PUSH
39144: LD_VAR 0 3
39148: PUSH
39149: LD_VAR 0 1
39153: STR
39154: PPUSH
39155: CALL_OW 34
39159: ST_TO_ADDR
39160: GO 39177
// unit := NewCharacter ( ident ) ;
39162: LD_ADDR_VAR 0 5
39166: PUSH
39167: LD_VAR 0 1
39171: PPUSH
39172: CALL_OW 25
39176: ST_TO_ADDR
// result := unit ;
39177: LD_ADDR_VAR 0 4
39181: PUSH
39182: LD_VAR 0 5
39186: ST_TO_ADDR
// end ;
39187: LD_VAR 0 4
39191: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39192: LD_INT 0
39194: PPUSH
39195: PPUSH
// if not side or not nation then
39196: LD_VAR 0 1
39200: NOT
39201: PUSH
39202: LD_VAR 0 2
39206: NOT
39207: OR
39208: IFFALSE 39212
// exit ;
39210: GO 39980
// case nation of nation_american :
39212: LD_VAR 0 2
39216: PUSH
39217: LD_INT 1
39219: DOUBLE
39220: EQUAL
39221: IFTRUE 39225
39223: GO 39439
39225: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39226: LD_ADDR_VAR 0 4
39230: PUSH
39231: LD_INT 35
39233: PUSH
39234: LD_INT 45
39236: PUSH
39237: LD_INT 46
39239: PUSH
39240: LD_INT 47
39242: PUSH
39243: LD_INT 82
39245: PUSH
39246: LD_INT 83
39248: PUSH
39249: LD_INT 84
39251: PUSH
39252: LD_INT 85
39254: PUSH
39255: LD_INT 86
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: LD_INT 6
39266: PUSH
39267: LD_INT 15
39269: PUSH
39270: LD_INT 16
39272: PUSH
39273: LD_INT 7
39275: PUSH
39276: LD_INT 12
39278: PUSH
39279: LD_INT 13
39281: PUSH
39282: LD_INT 10
39284: PUSH
39285: LD_INT 14
39287: PUSH
39288: LD_INT 20
39290: PUSH
39291: LD_INT 21
39293: PUSH
39294: LD_INT 22
39296: PUSH
39297: LD_INT 25
39299: PUSH
39300: LD_INT 32
39302: PUSH
39303: LD_INT 27
39305: PUSH
39306: LD_INT 36
39308: PUSH
39309: LD_INT 69
39311: PUSH
39312: LD_INT 39
39314: PUSH
39315: LD_INT 34
39317: PUSH
39318: LD_INT 40
39320: PUSH
39321: LD_INT 48
39323: PUSH
39324: LD_INT 49
39326: PUSH
39327: LD_INT 50
39329: PUSH
39330: LD_INT 51
39332: PUSH
39333: LD_INT 52
39335: PUSH
39336: LD_INT 53
39338: PUSH
39339: LD_INT 54
39341: PUSH
39342: LD_INT 55
39344: PUSH
39345: LD_INT 56
39347: PUSH
39348: LD_INT 57
39350: PUSH
39351: LD_INT 58
39353: PUSH
39354: LD_INT 59
39356: PUSH
39357: LD_INT 60
39359: PUSH
39360: LD_INT 61
39362: PUSH
39363: LD_INT 62
39365: PUSH
39366: LD_INT 80
39368: PUSH
39369: LD_INT 82
39371: PUSH
39372: LD_INT 83
39374: PUSH
39375: LD_INT 84
39377: PUSH
39378: LD_INT 85
39380: PUSH
39381: LD_INT 86
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: ST_TO_ADDR
39437: GO 39904
39439: LD_INT 2
39441: DOUBLE
39442: EQUAL
39443: IFTRUE 39447
39445: GO 39673
39447: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39448: LD_ADDR_VAR 0 4
39452: PUSH
39453: LD_INT 35
39455: PUSH
39456: LD_INT 45
39458: PUSH
39459: LD_INT 46
39461: PUSH
39462: LD_INT 47
39464: PUSH
39465: LD_INT 82
39467: PUSH
39468: LD_INT 83
39470: PUSH
39471: LD_INT 84
39473: PUSH
39474: LD_INT 85
39476: PUSH
39477: LD_INT 87
39479: PUSH
39480: LD_INT 70
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: LD_INT 11
39488: PUSH
39489: LD_INT 3
39491: PUSH
39492: LD_INT 4
39494: PUSH
39495: LD_INT 5
39497: PUSH
39498: LD_INT 6
39500: PUSH
39501: LD_INT 15
39503: PUSH
39504: LD_INT 18
39506: PUSH
39507: LD_INT 7
39509: PUSH
39510: LD_INT 17
39512: PUSH
39513: LD_INT 8
39515: PUSH
39516: LD_INT 20
39518: PUSH
39519: LD_INT 21
39521: PUSH
39522: LD_INT 22
39524: PUSH
39525: LD_INT 72
39527: PUSH
39528: LD_INT 26
39530: PUSH
39531: LD_INT 69
39533: PUSH
39534: LD_INT 39
39536: PUSH
39537: LD_INT 40
39539: PUSH
39540: LD_INT 41
39542: PUSH
39543: LD_INT 42
39545: PUSH
39546: LD_INT 43
39548: PUSH
39549: LD_INT 48
39551: PUSH
39552: LD_INT 49
39554: PUSH
39555: LD_INT 50
39557: PUSH
39558: LD_INT 51
39560: PUSH
39561: LD_INT 52
39563: PUSH
39564: LD_INT 53
39566: PUSH
39567: LD_INT 54
39569: PUSH
39570: LD_INT 55
39572: PUSH
39573: LD_INT 56
39575: PUSH
39576: LD_INT 60
39578: PUSH
39579: LD_INT 61
39581: PUSH
39582: LD_INT 62
39584: PUSH
39585: LD_INT 66
39587: PUSH
39588: LD_INT 67
39590: PUSH
39591: LD_INT 68
39593: PUSH
39594: LD_INT 81
39596: PUSH
39597: LD_INT 82
39599: PUSH
39600: LD_INT 83
39602: PUSH
39603: LD_INT 84
39605: PUSH
39606: LD_INT 85
39608: PUSH
39609: LD_INT 87
39611: PUSH
39612: LD_INT 88
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: LIST
39629: LIST
39630: LIST
39631: LIST
39632: LIST
39633: LIST
39634: LIST
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: LIST
39643: LIST
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: LIST
39667: LIST
39668: LIST
39669: LIST
39670: ST_TO_ADDR
39671: GO 39904
39673: LD_INT 3
39675: DOUBLE
39676: EQUAL
39677: IFTRUE 39681
39679: GO 39903
39681: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39682: LD_ADDR_VAR 0 4
39686: PUSH
39687: LD_INT 46
39689: PUSH
39690: LD_INT 47
39692: PUSH
39693: LD_INT 1
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: LD_INT 82
39701: PUSH
39702: LD_INT 83
39704: PUSH
39705: LD_INT 84
39707: PUSH
39708: LD_INT 85
39710: PUSH
39711: LD_INT 86
39713: PUSH
39714: LD_INT 11
39716: PUSH
39717: LD_INT 9
39719: PUSH
39720: LD_INT 20
39722: PUSH
39723: LD_INT 19
39725: PUSH
39726: LD_INT 21
39728: PUSH
39729: LD_INT 24
39731: PUSH
39732: LD_INT 22
39734: PUSH
39735: LD_INT 25
39737: PUSH
39738: LD_INT 28
39740: PUSH
39741: LD_INT 29
39743: PUSH
39744: LD_INT 30
39746: PUSH
39747: LD_INT 31
39749: PUSH
39750: LD_INT 37
39752: PUSH
39753: LD_INT 38
39755: PUSH
39756: LD_INT 32
39758: PUSH
39759: LD_INT 27
39761: PUSH
39762: LD_INT 33
39764: PUSH
39765: LD_INT 69
39767: PUSH
39768: LD_INT 39
39770: PUSH
39771: LD_INT 34
39773: PUSH
39774: LD_INT 40
39776: PUSH
39777: LD_INT 71
39779: PUSH
39780: LD_INT 23
39782: PUSH
39783: LD_INT 44
39785: PUSH
39786: LD_INT 48
39788: PUSH
39789: LD_INT 49
39791: PUSH
39792: LD_INT 50
39794: PUSH
39795: LD_INT 51
39797: PUSH
39798: LD_INT 52
39800: PUSH
39801: LD_INT 53
39803: PUSH
39804: LD_INT 54
39806: PUSH
39807: LD_INT 55
39809: PUSH
39810: LD_INT 56
39812: PUSH
39813: LD_INT 57
39815: PUSH
39816: LD_INT 58
39818: PUSH
39819: LD_INT 59
39821: PUSH
39822: LD_INT 63
39824: PUSH
39825: LD_INT 64
39827: PUSH
39828: LD_INT 65
39830: PUSH
39831: LD_INT 82
39833: PUSH
39834: LD_INT 83
39836: PUSH
39837: LD_INT 84
39839: PUSH
39840: LD_INT 85
39842: PUSH
39843: LD_INT 86
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: LIST
39896: LIST
39897: LIST
39898: LIST
39899: LIST
39900: ST_TO_ADDR
39901: GO 39904
39903: POP
// if state > - 1 and state < 3 then
39904: LD_VAR 0 3
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: GREATER
39913: PUSH
39914: LD_VAR 0 3
39918: PUSH
39919: LD_INT 3
39921: LESS
39922: AND
39923: IFFALSE 39980
// for i in result do
39925: LD_ADDR_VAR 0 5
39929: PUSH
39930: LD_VAR 0 4
39934: PUSH
39935: FOR_IN
39936: IFFALSE 39978
// if GetTech ( i , side ) <> state then
39938: LD_VAR 0 5
39942: PPUSH
39943: LD_VAR 0 1
39947: PPUSH
39948: CALL_OW 321
39952: PUSH
39953: LD_VAR 0 3
39957: NONEQUAL
39958: IFFALSE 39976
// result := result diff i ;
39960: LD_ADDR_VAR 0 4
39964: PUSH
39965: LD_VAR 0 4
39969: PUSH
39970: LD_VAR 0 5
39974: DIFF
39975: ST_TO_ADDR
39976: GO 39935
39978: POP
39979: POP
// end ;
39980: LD_VAR 0 4
39984: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39985: LD_INT 0
39987: PPUSH
39988: PPUSH
39989: PPUSH
// result := true ;
39990: LD_ADDR_VAR 0 3
39994: PUSH
39995: LD_INT 1
39997: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39998: LD_ADDR_VAR 0 5
40002: PUSH
40003: LD_VAR 0 2
40007: PPUSH
40008: CALL_OW 480
40012: ST_TO_ADDR
// if not tmp then
40013: LD_VAR 0 5
40017: NOT
40018: IFFALSE 40022
// exit ;
40020: GO 40071
// for i in tmp do
40022: LD_ADDR_VAR 0 4
40026: PUSH
40027: LD_VAR 0 5
40031: PUSH
40032: FOR_IN
40033: IFFALSE 40069
// if GetTech ( i , side ) <> state_researched then
40035: LD_VAR 0 4
40039: PPUSH
40040: LD_VAR 0 1
40044: PPUSH
40045: CALL_OW 321
40049: PUSH
40050: LD_INT 2
40052: NONEQUAL
40053: IFFALSE 40067
// begin result := false ;
40055: LD_ADDR_VAR 0 3
40059: PUSH
40060: LD_INT 0
40062: ST_TO_ADDR
// exit ;
40063: POP
40064: POP
40065: GO 40071
// end ;
40067: GO 40032
40069: POP
40070: POP
// end ;
40071: LD_VAR 0 3
40075: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40076: LD_INT 0
40078: PPUSH
40079: PPUSH
40080: PPUSH
40081: PPUSH
40082: PPUSH
40083: PPUSH
40084: PPUSH
40085: PPUSH
40086: PPUSH
40087: PPUSH
40088: PPUSH
40089: PPUSH
40090: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40091: LD_VAR 0 1
40095: NOT
40096: PUSH
40097: LD_VAR 0 1
40101: PPUSH
40102: CALL_OW 257
40106: PUSH
40107: LD_INT 9
40109: NONEQUAL
40110: OR
40111: IFFALSE 40115
// exit ;
40113: GO 40688
// side := GetSide ( unit ) ;
40115: LD_ADDR_VAR 0 9
40119: PUSH
40120: LD_VAR 0 1
40124: PPUSH
40125: CALL_OW 255
40129: ST_TO_ADDR
// tech_space := tech_spacanom ;
40130: LD_ADDR_VAR 0 12
40134: PUSH
40135: LD_INT 29
40137: ST_TO_ADDR
// tech_time := tech_taurad ;
40138: LD_ADDR_VAR 0 13
40142: PUSH
40143: LD_INT 28
40145: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40146: LD_ADDR_VAR 0 11
40150: PUSH
40151: LD_VAR 0 1
40155: PPUSH
40156: CALL_OW 310
40160: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40161: LD_VAR 0 11
40165: PPUSH
40166: CALL_OW 247
40170: PUSH
40171: LD_INT 2
40173: EQUAL
40174: IFFALSE 40178
// exit ;
40176: GO 40688
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40178: LD_ADDR_VAR 0 8
40182: PUSH
40183: LD_INT 81
40185: PUSH
40186: LD_VAR 0 9
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 3
40197: PUSH
40198: LD_INT 21
40200: PUSH
40201: LD_INT 3
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: EMPTY
40209: LIST
40210: LIST
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PPUSH
40216: CALL_OW 69
40220: ST_TO_ADDR
// if not tmp then
40221: LD_VAR 0 8
40225: NOT
40226: IFFALSE 40230
// exit ;
40228: GO 40688
// if in_unit then
40230: LD_VAR 0 11
40234: IFFALSE 40258
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40236: LD_ADDR_VAR 0 10
40240: PUSH
40241: LD_VAR 0 8
40245: PPUSH
40246: LD_VAR 0 11
40250: PPUSH
40251: CALL_OW 74
40255: ST_TO_ADDR
40256: GO 40278
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40258: LD_ADDR_VAR 0 10
40262: PUSH
40263: LD_VAR 0 8
40267: PPUSH
40268: LD_VAR 0 1
40272: PPUSH
40273: CALL_OW 74
40277: ST_TO_ADDR
// if not enemy then
40278: LD_VAR 0 10
40282: NOT
40283: IFFALSE 40287
// exit ;
40285: GO 40688
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40287: LD_VAR 0 11
40291: PUSH
40292: LD_VAR 0 11
40296: PPUSH
40297: LD_VAR 0 10
40301: PPUSH
40302: CALL_OW 296
40306: PUSH
40307: LD_INT 13
40309: GREATER
40310: AND
40311: PUSH
40312: LD_VAR 0 1
40316: PPUSH
40317: LD_VAR 0 10
40321: PPUSH
40322: CALL_OW 296
40326: PUSH
40327: LD_INT 12
40329: GREATER
40330: OR
40331: IFFALSE 40335
// exit ;
40333: GO 40688
// missile := [ 1 ] ;
40335: LD_ADDR_VAR 0 14
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: EMPTY
40344: LIST
40345: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40346: LD_VAR 0 9
40350: PPUSH
40351: LD_VAR 0 12
40355: PPUSH
40356: CALL_OW 325
40360: IFFALSE 40389
// missile := Replace ( missile , missile + 1 , 2 ) ;
40362: LD_ADDR_VAR 0 14
40366: PUSH
40367: LD_VAR 0 14
40371: PPUSH
40372: LD_VAR 0 14
40376: PUSH
40377: LD_INT 1
40379: PLUS
40380: PPUSH
40381: LD_INT 2
40383: PPUSH
40384: CALL_OW 1
40388: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40389: LD_VAR 0 9
40393: PPUSH
40394: LD_VAR 0 13
40398: PPUSH
40399: CALL_OW 325
40403: PUSH
40404: LD_VAR 0 10
40408: PPUSH
40409: CALL_OW 255
40413: PPUSH
40414: LD_VAR 0 13
40418: PPUSH
40419: CALL_OW 325
40423: NOT
40424: AND
40425: IFFALSE 40454
// missile := Replace ( missile , missile + 1 , 3 ) ;
40427: LD_ADDR_VAR 0 14
40431: PUSH
40432: LD_VAR 0 14
40436: PPUSH
40437: LD_VAR 0 14
40441: PUSH
40442: LD_INT 1
40444: PLUS
40445: PPUSH
40446: LD_INT 3
40448: PPUSH
40449: CALL_OW 1
40453: ST_TO_ADDR
// if missile < 2 then
40454: LD_VAR 0 14
40458: PUSH
40459: LD_INT 2
40461: LESS
40462: IFFALSE 40466
// exit ;
40464: GO 40688
// x := GetX ( enemy ) ;
40466: LD_ADDR_VAR 0 4
40470: PUSH
40471: LD_VAR 0 10
40475: PPUSH
40476: CALL_OW 250
40480: ST_TO_ADDR
// y := GetY ( enemy ) ;
40481: LD_ADDR_VAR 0 5
40485: PUSH
40486: LD_VAR 0 10
40490: PPUSH
40491: CALL_OW 251
40495: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40496: LD_ADDR_VAR 0 6
40500: PUSH
40501: LD_VAR 0 4
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PPUSH
40510: LD_INT 1
40512: PPUSH
40513: CALL_OW 12
40517: PLUS
40518: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40519: LD_ADDR_VAR 0 7
40523: PUSH
40524: LD_VAR 0 5
40528: PUSH
40529: LD_INT 1
40531: NEG
40532: PPUSH
40533: LD_INT 1
40535: PPUSH
40536: CALL_OW 12
40540: PLUS
40541: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40542: LD_VAR 0 6
40546: PPUSH
40547: LD_VAR 0 7
40551: PPUSH
40552: CALL_OW 488
40556: NOT
40557: IFFALSE 40579
// begin _x := x ;
40559: LD_ADDR_VAR 0 6
40563: PUSH
40564: LD_VAR 0 4
40568: ST_TO_ADDR
// _y := y ;
40569: LD_ADDR_VAR 0 7
40573: PUSH
40574: LD_VAR 0 5
40578: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40579: LD_ADDR_VAR 0 3
40583: PUSH
40584: LD_INT 1
40586: PPUSH
40587: LD_VAR 0 14
40591: PPUSH
40592: CALL_OW 12
40596: ST_TO_ADDR
// case i of 1 :
40597: LD_VAR 0 3
40601: PUSH
40602: LD_INT 1
40604: DOUBLE
40605: EQUAL
40606: IFTRUE 40610
40608: GO 40627
40610: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40611: LD_VAR 0 1
40615: PPUSH
40616: LD_VAR 0 10
40620: PPUSH
40621: CALL_OW 115
40625: GO 40688
40627: LD_INT 2
40629: DOUBLE
40630: EQUAL
40631: IFTRUE 40635
40633: GO 40657
40635: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40636: LD_VAR 0 1
40640: PPUSH
40641: LD_VAR 0 6
40645: PPUSH
40646: LD_VAR 0 7
40650: PPUSH
40651: CALL_OW 153
40655: GO 40688
40657: LD_INT 3
40659: DOUBLE
40660: EQUAL
40661: IFTRUE 40665
40663: GO 40687
40665: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40666: LD_VAR 0 1
40670: PPUSH
40671: LD_VAR 0 6
40675: PPUSH
40676: LD_VAR 0 7
40680: PPUSH
40681: CALL_OW 154
40685: GO 40688
40687: POP
// end ;
40688: LD_VAR 0 2
40692: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40693: LD_INT 0
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
40699: PPUSH
40700: PPUSH
// if not unit or not building then
40701: LD_VAR 0 1
40705: NOT
40706: PUSH
40707: LD_VAR 0 2
40711: NOT
40712: OR
40713: IFFALSE 40717
// exit ;
40715: GO 40875
// x := GetX ( building ) ;
40717: LD_ADDR_VAR 0 5
40721: PUSH
40722: LD_VAR 0 2
40726: PPUSH
40727: CALL_OW 250
40731: ST_TO_ADDR
// y := GetY ( building ) ;
40732: LD_ADDR_VAR 0 6
40736: PUSH
40737: LD_VAR 0 2
40741: PPUSH
40742: CALL_OW 251
40746: ST_TO_ADDR
// for i = 0 to 5 do
40747: LD_ADDR_VAR 0 4
40751: PUSH
40752: DOUBLE
40753: LD_INT 0
40755: DEC
40756: ST_TO_ADDR
40757: LD_INT 5
40759: PUSH
40760: FOR_TO
40761: IFFALSE 40873
// begin _x := ShiftX ( x , i , 3 ) ;
40763: LD_ADDR_VAR 0 7
40767: PUSH
40768: LD_VAR 0 5
40772: PPUSH
40773: LD_VAR 0 4
40777: PPUSH
40778: LD_INT 3
40780: PPUSH
40781: CALL_OW 272
40785: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40786: LD_ADDR_VAR 0 8
40790: PUSH
40791: LD_VAR 0 6
40795: PPUSH
40796: LD_VAR 0 4
40800: PPUSH
40801: LD_INT 3
40803: PPUSH
40804: CALL_OW 273
40808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40809: LD_VAR 0 7
40813: PPUSH
40814: LD_VAR 0 8
40818: PPUSH
40819: CALL_OW 488
40823: NOT
40824: IFFALSE 40828
// continue ;
40826: GO 40760
// if HexInfo ( _x , _y ) = 0 then
40828: LD_VAR 0 7
40832: PPUSH
40833: LD_VAR 0 8
40837: PPUSH
40838: CALL_OW 428
40842: PUSH
40843: LD_INT 0
40845: EQUAL
40846: IFFALSE 40871
// begin ComMoveXY ( unit , _x , _y ) ;
40848: LD_VAR 0 1
40852: PPUSH
40853: LD_VAR 0 7
40857: PPUSH
40858: LD_VAR 0 8
40862: PPUSH
40863: CALL_OW 111
// exit ;
40867: POP
40868: POP
40869: GO 40875
// end ; end ;
40871: GO 40760
40873: POP
40874: POP
// end ;
40875: LD_VAR 0 3
40879: RET
// export function ScanBase ( side , base_area ) ; begin
40880: LD_INT 0
40882: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40883: LD_ADDR_VAR 0 3
40887: PUSH
40888: LD_VAR 0 2
40892: PPUSH
40893: LD_INT 81
40895: PUSH
40896: LD_VAR 0 1
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PPUSH
40905: CALL_OW 70
40909: ST_TO_ADDR
// end ;
40910: LD_VAR 0 3
40914: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40915: LD_INT 0
40917: PPUSH
40918: PPUSH
40919: PPUSH
40920: PPUSH
// result := false ;
40921: LD_ADDR_VAR 0 2
40925: PUSH
40926: LD_INT 0
40928: ST_TO_ADDR
// side := GetSide ( unit ) ;
40929: LD_ADDR_VAR 0 3
40933: PUSH
40934: LD_VAR 0 1
40938: PPUSH
40939: CALL_OW 255
40943: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40944: LD_ADDR_VAR 0 4
40948: PUSH
40949: LD_VAR 0 1
40953: PPUSH
40954: CALL_OW 248
40958: ST_TO_ADDR
// case nat of 1 :
40959: LD_VAR 0 4
40963: PUSH
40964: LD_INT 1
40966: DOUBLE
40967: EQUAL
40968: IFTRUE 40972
40970: GO 40983
40972: POP
// tech := tech_lassight ; 2 :
40973: LD_ADDR_VAR 0 5
40977: PUSH
40978: LD_INT 12
40980: ST_TO_ADDR
40981: GO 41022
40983: LD_INT 2
40985: DOUBLE
40986: EQUAL
40987: IFTRUE 40991
40989: GO 41002
40991: POP
// tech := tech_mortar ; 3 :
40992: LD_ADDR_VAR 0 5
40996: PUSH
40997: LD_INT 41
40999: ST_TO_ADDR
41000: GO 41022
41002: LD_INT 3
41004: DOUBLE
41005: EQUAL
41006: IFTRUE 41010
41008: GO 41021
41010: POP
// tech := tech_bazooka ; end ;
41011: LD_ADDR_VAR 0 5
41015: PUSH
41016: LD_INT 44
41018: ST_TO_ADDR
41019: GO 41022
41021: POP
// if Researched ( side , tech ) then
41022: LD_VAR 0 3
41026: PPUSH
41027: LD_VAR 0 5
41031: PPUSH
41032: CALL_OW 325
41036: IFFALSE 41063
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
41038: LD_ADDR_VAR 0 2
41042: PUSH
41043: LD_INT 5
41045: PUSH
41046: LD_INT 8
41048: PUSH
41049: LD_INT 9
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: LIST
41056: PUSH
41057: LD_VAR 0 4
41061: ARRAY
41062: ST_TO_ADDR
// end ;
41063: LD_VAR 0 2
41067: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41068: LD_INT 0
41070: PPUSH
41071: PPUSH
41072: PPUSH
// if not mines then
41073: LD_VAR 0 2
41077: NOT
41078: IFFALSE 41082
// exit ;
41080: GO 41226
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41082: LD_ADDR_VAR 0 5
41086: PUSH
41087: LD_INT 81
41089: PUSH
41090: LD_VAR 0 1
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 3
41101: PUSH
41102: LD_INT 21
41104: PUSH
41105: LD_INT 3
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PPUSH
41120: CALL_OW 69
41124: ST_TO_ADDR
// for i in mines do
41125: LD_ADDR_VAR 0 4
41129: PUSH
41130: LD_VAR 0 2
41134: PUSH
41135: FOR_IN
41136: IFFALSE 41224
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41138: LD_VAR 0 4
41142: PUSH
41143: LD_INT 1
41145: ARRAY
41146: PPUSH
41147: LD_VAR 0 4
41151: PUSH
41152: LD_INT 2
41154: ARRAY
41155: PPUSH
41156: CALL_OW 458
41160: NOT
41161: IFFALSE 41165
// continue ;
41163: GO 41135
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41165: LD_VAR 0 4
41169: PUSH
41170: LD_INT 1
41172: ARRAY
41173: PPUSH
41174: LD_VAR 0 4
41178: PUSH
41179: LD_INT 2
41181: ARRAY
41182: PPUSH
41183: CALL_OW 428
41187: PUSH
41188: LD_VAR 0 5
41192: IN
41193: IFFALSE 41222
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41195: LD_VAR 0 4
41199: PUSH
41200: LD_INT 1
41202: ARRAY
41203: PPUSH
41204: LD_VAR 0 4
41208: PUSH
41209: LD_INT 2
41211: ARRAY
41212: PPUSH
41213: LD_VAR 0 1
41217: PPUSH
41218: CALL_OW 456
// end ;
41222: GO 41135
41224: POP
41225: POP
// end ;
41226: LD_VAR 0 3
41230: RET
// export function Count ( array ) ; begin
41231: LD_INT 0
41233: PPUSH
// result := array + 0 ;
41234: LD_ADDR_VAR 0 2
41238: PUSH
41239: LD_VAR 0 1
41243: PUSH
41244: LD_INT 0
41246: PLUS
41247: ST_TO_ADDR
// end ;
41248: LD_VAR 0 2
41252: RET
// export function IsEmpty ( building ) ; begin
41253: LD_INT 0
41255: PPUSH
// if not building then
41256: LD_VAR 0 1
41260: NOT
41261: IFFALSE 41265
// exit ;
41263: GO 41308
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41265: LD_ADDR_VAR 0 2
41269: PUSH
41270: LD_VAR 0 1
41274: PUSH
41275: LD_INT 22
41277: PUSH
41278: LD_VAR 0 1
41282: PPUSH
41283: CALL_OW 255
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 58
41294: PUSH
41295: EMPTY
41296: LIST
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PPUSH
41302: CALL_OW 69
41306: IN
41307: ST_TO_ADDR
// end ;
41308: LD_VAR 0 2
41312: RET
// export function IsNotFull ( building ) ; var places ; begin
41313: LD_INT 0
41315: PPUSH
41316: PPUSH
// if not building then
41317: LD_VAR 0 1
41321: NOT
41322: IFFALSE 41326
// exit ;
41324: GO 41354
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
41326: LD_ADDR_VAR 0 2
41330: PUSH
41331: LD_VAR 0 1
41335: PPUSH
41336: LD_INT 3
41338: PUSH
41339: LD_INT 62
41341: PUSH
41342: EMPTY
41343: LIST
41344: PUSH
41345: EMPTY
41346: LIST
41347: LIST
41348: PPUSH
41349: CALL_OW 72
41353: ST_TO_ADDR
// end ;
41354: LD_VAR 0 2
41358: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41359: LD_INT 0
41361: PPUSH
41362: PPUSH
41363: PPUSH
41364: PPUSH
// tmp := [ ] ;
41365: LD_ADDR_VAR 0 3
41369: PUSH
41370: EMPTY
41371: ST_TO_ADDR
// list := [ ] ;
41372: LD_ADDR_VAR 0 5
41376: PUSH
41377: EMPTY
41378: ST_TO_ADDR
// for i = 16 to 25 do
41379: LD_ADDR_VAR 0 4
41383: PUSH
41384: DOUBLE
41385: LD_INT 16
41387: DEC
41388: ST_TO_ADDR
41389: LD_INT 25
41391: PUSH
41392: FOR_TO
41393: IFFALSE 41466
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41395: LD_ADDR_VAR 0 3
41399: PUSH
41400: LD_VAR 0 3
41404: PUSH
41405: LD_INT 22
41407: PUSH
41408: LD_VAR 0 1
41412: PPUSH
41413: CALL_OW 255
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 91
41424: PUSH
41425: LD_VAR 0 1
41429: PUSH
41430: LD_INT 6
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 30
41440: PUSH
41441: LD_VAR 0 4
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: LIST
41454: PUSH
41455: EMPTY
41456: LIST
41457: PPUSH
41458: CALL_OW 69
41462: ADD
41463: ST_TO_ADDR
41464: GO 41392
41466: POP
41467: POP
// for i = 1 to tmp do
41468: LD_ADDR_VAR 0 4
41472: PUSH
41473: DOUBLE
41474: LD_INT 1
41476: DEC
41477: ST_TO_ADDR
41478: LD_VAR 0 3
41482: PUSH
41483: FOR_TO
41484: IFFALSE 41572
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41486: LD_ADDR_VAR 0 5
41490: PUSH
41491: LD_VAR 0 5
41495: PUSH
41496: LD_VAR 0 3
41500: PUSH
41501: LD_VAR 0 4
41505: ARRAY
41506: PPUSH
41507: CALL_OW 266
41511: PUSH
41512: LD_VAR 0 3
41516: PUSH
41517: LD_VAR 0 4
41521: ARRAY
41522: PPUSH
41523: CALL_OW 250
41527: PUSH
41528: LD_VAR 0 3
41532: PUSH
41533: LD_VAR 0 4
41537: ARRAY
41538: PPUSH
41539: CALL_OW 251
41543: PUSH
41544: LD_VAR 0 3
41548: PUSH
41549: LD_VAR 0 4
41553: ARRAY
41554: PPUSH
41555: CALL_OW 254
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: PUSH
41566: EMPTY
41567: LIST
41568: ADD
41569: ST_TO_ADDR
41570: GO 41483
41572: POP
41573: POP
// result := list ;
41574: LD_ADDR_VAR 0 2
41578: PUSH
41579: LD_VAR 0 5
41583: ST_TO_ADDR
// end ;
41584: LD_VAR 0 2
41588: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41589: LD_INT 0
41591: PPUSH
41592: PPUSH
41593: PPUSH
41594: PPUSH
41595: PPUSH
41596: PPUSH
41597: PPUSH
// if not factory then
41598: LD_VAR 0 1
41602: NOT
41603: IFFALSE 41607
// exit ;
41605: GO 42200
// if control = control_apeman then
41607: LD_VAR 0 4
41611: PUSH
41612: LD_INT 5
41614: EQUAL
41615: IFFALSE 41724
// begin tmp := UnitsInside ( factory ) ;
41617: LD_ADDR_VAR 0 8
41621: PUSH
41622: LD_VAR 0 1
41626: PPUSH
41627: CALL_OW 313
41631: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41632: LD_VAR 0 8
41636: PPUSH
41637: LD_INT 25
41639: PUSH
41640: LD_INT 12
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PPUSH
41647: CALL_OW 72
41651: NOT
41652: IFFALSE 41662
// control := control_manual ;
41654: LD_ADDR_VAR 0 4
41658: PUSH
41659: LD_INT 1
41661: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41662: LD_ADDR_VAR 0 8
41666: PUSH
41667: LD_VAR 0 1
41671: PPUSH
41672: CALL 41359 0 1
41676: ST_TO_ADDR
// if tmp then
41677: LD_VAR 0 8
41681: IFFALSE 41724
// begin for i in tmp do
41683: LD_ADDR_VAR 0 7
41687: PUSH
41688: LD_VAR 0 8
41692: PUSH
41693: FOR_IN
41694: IFFALSE 41722
// if i [ 1 ] = b_ext_radio then
41696: LD_VAR 0 7
41700: PUSH
41701: LD_INT 1
41703: ARRAY
41704: PUSH
41705: LD_INT 22
41707: EQUAL
41708: IFFALSE 41720
// begin control := control_remote ;
41710: LD_ADDR_VAR 0 4
41714: PUSH
41715: LD_INT 2
41717: ST_TO_ADDR
// break ;
41718: GO 41722
// end ;
41720: GO 41693
41722: POP
41723: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41724: LD_VAR 0 1
41728: PPUSH
41729: LD_VAR 0 2
41733: PPUSH
41734: LD_VAR 0 3
41738: PPUSH
41739: LD_VAR 0 4
41743: PPUSH
41744: LD_VAR 0 5
41748: PPUSH
41749: CALL_OW 448
41753: IFFALSE 41788
// begin result := [ chassis , engine , control , weapon ] ;
41755: LD_ADDR_VAR 0 6
41759: PUSH
41760: LD_VAR 0 2
41764: PUSH
41765: LD_VAR 0 3
41769: PUSH
41770: LD_VAR 0 4
41774: PUSH
41775: LD_VAR 0 5
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: ST_TO_ADDR
// exit ;
41786: GO 42200
// end ; _chassis := AvailableChassisList ( factory ) ;
41788: LD_ADDR_VAR 0 9
41792: PUSH
41793: LD_VAR 0 1
41797: PPUSH
41798: CALL_OW 475
41802: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41803: LD_ADDR_VAR 0 11
41807: PUSH
41808: LD_VAR 0 1
41812: PPUSH
41813: CALL_OW 476
41817: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41818: LD_ADDR_VAR 0 12
41822: PUSH
41823: LD_VAR 0 1
41827: PPUSH
41828: CALL_OW 477
41832: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41833: LD_ADDR_VAR 0 10
41837: PUSH
41838: LD_VAR 0 1
41842: PPUSH
41843: CALL_OW 478
41847: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41848: LD_VAR 0 9
41852: NOT
41853: PUSH
41854: LD_VAR 0 11
41858: NOT
41859: OR
41860: PUSH
41861: LD_VAR 0 12
41865: NOT
41866: OR
41867: PUSH
41868: LD_VAR 0 10
41872: NOT
41873: OR
41874: IFFALSE 41909
// begin result := [ chassis , engine , control , weapon ] ;
41876: LD_ADDR_VAR 0 6
41880: PUSH
41881: LD_VAR 0 2
41885: PUSH
41886: LD_VAR 0 3
41890: PUSH
41891: LD_VAR 0 4
41895: PUSH
41896: LD_VAR 0 5
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: ST_TO_ADDR
// exit ;
41907: GO 42200
// end ; if not chassis in _chassis then
41909: LD_VAR 0 2
41913: PUSH
41914: LD_VAR 0 9
41918: IN
41919: NOT
41920: IFFALSE 41946
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41922: LD_ADDR_VAR 0 2
41926: PUSH
41927: LD_VAR 0 9
41931: PUSH
41932: LD_INT 1
41934: PPUSH
41935: LD_VAR 0 9
41939: PPUSH
41940: CALL_OW 12
41944: ARRAY
41945: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41946: LD_VAR 0 2
41950: PPUSH
41951: LD_VAR 0 3
41955: PPUSH
41956: CALL 42205 0 2
41960: NOT
41961: IFFALSE 42020
// repeat engine := _engine [ 1 ] ;
41963: LD_ADDR_VAR 0 3
41967: PUSH
41968: LD_VAR 0 11
41972: PUSH
41973: LD_INT 1
41975: ARRAY
41976: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
41977: LD_ADDR_VAR 0 11
41981: PUSH
41982: LD_VAR 0 11
41986: PPUSH
41987: LD_INT 1
41989: PPUSH
41990: CALL_OW 3
41994: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
41995: LD_VAR 0 2
41999: PPUSH
42000: LD_VAR 0 3
42004: PPUSH
42005: CALL 42205 0 2
42009: PUSH
42010: LD_VAR 0 11
42014: PUSH
42015: EMPTY
42016: EQUAL
42017: OR
42018: IFFALSE 41963
// if not control in _control then
42020: LD_VAR 0 4
42024: PUSH
42025: LD_VAR 0 12
42029: IN
42030: NOT
42031: IFFALSE 42057
// control := _control [ rand ( 1 , _control ) ] ;
42033: LD_ADDR_VAR 0 4
42037: PUSH
42038: LD_VAR 0 12
42042: PUSH
42043: LD_INT 1
42045: PPUSH
42046: LD_VAR 0 12
42050: PPUSH
42051: CALL_OW 12
42055: ARRAY
42056: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42057: LD_VAR 0 2
42061: PPUSH
42062: LD_VAR 0 5
42066: PPUSH
42067: CALL 42425 0 2
42071: NOT
42072: IFFALSE 42131
// repeat weapon := _weapon [ 1 ] ;
42074: LD_ADDR_VAR 0 5
42078: PUSH
42079: LD_VAR 0 10
42083: PUSH
42084: LD_INT 1
42086: ARRAY
42087: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42088: LD_ADDR_VAR 0 10
42092: PUSH
42093: LD_VAR 0 10
42097: PPUSH
42098: LD_INT 1
42100: PPUSH
42101: CALL_OW 3
42105: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42106: LD_VAR 0 2
42110: PPUSH
42111: LD_VAR 0 5
42115: PPUSH
42116: CALL 42425 0 2
42120: PUSH
42121: LD_VAR 0 10
42125: PUSH
42126: EMPTY
42127: EQUAL
42128: OR
42129: IFFALSE 42074
// result := [ ] ;
42131: LD_ADDR_VAR 0 6
42135: PUSH
42136: EMPTY
42137: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42138: LD_VAR 0 1
42142: PPUSH
42143: LD_VAR 0 2
42147: PPUSH
42148: LD_VAR 0 3
42152: PPUSH
42153: LD_VAR 0 4
42157: PPUSH
42158: LD_VAR 0 5
42162: PPUSH
42163: CALL_OW 448
42167: IFFALSE 42200
// result := [ chassis , engine , control , weapon ] ;
42169: LD_ADDR_VAR 0 6
42173: PUSH
42174: LD_VAR 0 2
42178: PUSH
42179: LD_VAR 0 3
42183: PUSH
42184: LD_VAR 0 4
42188: PUSH
42189: LD_VAR 0 5
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: ST_TO_ADDR
// end ;
42200: LD_VAR 0 6
42204: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42205: LD_INT 0
42207: PPUSH
// if not chassis or not engine then
42208: LD_VAR 0 1
42212: NOT
42213: PUSH
42214: LD_VAR 0 2
42218: NOT
42219: OR
42220: IFFALSE 42224
// exit ;
42222: GO 42420
// case engine of engine_solar :
42224: LD_VAR 0 2
42228: PUSH
42229: LD_INT 2
42231: DOUBLE
42232: EQUAL
42233: IFTRUE 42237
42235: GO 42275
42237: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42238: LD_ADDR_VAR 0 3
42242: PUSH
42243: LD_INT 11
42245: PUSH
42246: LD_INT 12
42248: PUSH
42249: LD_INT 13
42251: PUSH
42252: LD_INT 14
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: LD_INT 2
42260: PUSH
42261: LD_INT 3
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: ST_TO_ADDR
42273: GO 42404
42275: LD_INT 1
42277: DOUBLE
42278: EQUAL
42279: IFTRUE 42283
42281: GO 42345
42283: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42284: LD_ADDR_VAR 0 3
42288: PUSH
42289: LD_INT 11
42291: PUSH
42292: LD_INT 12
42294: PUSH
42295: LD_INT 13
42297: PUSH
42298: LD_INT 14
42300: PUSH
42301: LD_INT 1
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: LD_INT 3
42309: PUSH
42310: LD_INT 4
42312: PUSH
42313: LD_INT 5
42315: PUSH
42316: LD_INT 21
42318: PUSH
42319: LD_INT 23
42321: PUSH
42322: LD_INT 22
42324: PUSH
42325: LD_INT 24
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: LIST
42335: LIST
42336: LIST
42337: LIST
42338: LIST
42339: LIST
42340: LIST
42341: LIST
42342: ST_TO_ADDR
42343: GO 42404
42345: LD_INT 3
42347: DOUBLE
42348: EQUAL
42349: IFTRUE 42353
42351: GO 42403
42353: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42354: LD_ADDR_VAR 0 3
42358: PUSH
42359: LD_INT 13
42361: PUSH
42362: LD_INT 14
42364: PUSH
42365: LD_INT 2
42367: PUSH
42368: LD_INT 3
42370: PUSH
42371: LD_INT 4
42373: PUSH
42374: LD_INT 5
42376: PUSH
42377: LD_INT 21
42379: PUSH
42380: LD_INT 22
42382: PUSH
42383: LD_INT 23
42385: PUSH
42386: LD_INT 24
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: LIST
42400: ST_TO_ADDR
42401: GO 42404
42403: POP
// result := ( chassis in result ) ;
42404: LD_ADDR_VAR 0 3
42408: PUSH
42409: LD_VAR 0 1
42413: PUSH
42414: LD_VAR 0 3
42418: IN
42419: ST_TO_ADDR
// end ;
42420: LD_VAR 0 3
42424: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42425: LD_INT 0
42427: PPUSH
// if not chassis or not weapon then
42428: LD_VAR 0 1
42432: NOT
42433: PUSH
42434: LD_VAR 0 2
42438: NOT
42439: OR
42440: IFFALSE 42444
// exit ;
42442: GO 43504
// case weapon of us_machine_gun :
42444: LD_VAR 0 2
42448: PUSH
42449: LD_INT 2
42451: DOUBLE
42452: EQUAL
42453: IFTRUE 42457
42455: GO 42487
42457: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42458: LD_ADDR_VAR 0 3
42462: PUSH
42463: LD_INT 1
42465: PUSH
42466: LD_INT 2
42468: PUSH
42469: LD_INT 3
42471: PUSH
42472: LD_INT 4
42474: PUSH
42475: LD_INT 5
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: ST_TO_ADDR
42485: GO 43488
42487: LD_INT 3
42489: DOUBLE
42490: EQUAL
42491: IFTRUE 42495
42493: GO 42525
42495: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42496: LD_ADDR_VAR 0 3
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 2
42506: PUSH
42507: LD_INT 3
42509: PUSH
42510: LD_INT 4
42512: PUSH
42513: LD_INT 5
42515: PUSH
42516: EMPTY
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: ST_TO_ADDR
42523: GO 43488
42525: LD_INT 11
42527: DOUBLE
42528: EQUAL
42529: IFTRUE 42533
42531: GO 42563
42533: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42534: LD_ADDR_VAR 0 3
42538: PUSH
42539: LD_INT 1
42541: PUSH
42542: LD_INT 2
42544: PUSH
42545: LD_INT 3
42547: PUSH
42548: LD_INT 4
42550: PUSH
42551: LD_INT 5
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: ST_TO_ADDR
42561: GO 43488
42563: LD_INT 4
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42571
42569: GO 42597
42571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42572: LD_ADDR_VAR 0 3
42576: PUSH
42577: LD_INT 2
42579: PUSH
42580: LD_INT 3
42582: PUSH
42583: LD_INT 4
42585: PUSH
42586: LD_INT 5
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: ST_TO_ADDR
42595: GO 43488
42597: LD_INT 5
42599: DOUBLE
42600: EQUAL
42601: IFTRUE 42605
42603: GO 42631
42605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42606: LD_ADDR_VAR 0 3
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: LD_INT 3
42616: PUSH
42617: LD_INT 4
42619: PUSH
42620: LD_INT 5
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: ST_TO_ADDR
42629: GO 43488
42631: LD_INT 9
42633: DOUBLE
42634: EQUAL
42635: IFTRUE 42639
42637: GO 42665
42639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42640: LD_ADDR_VAR 0 3
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: LD_INT 4
42653: PUSH
42654: LD_INT 5
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: ST_TO_ADDR
42663: GO 43488
42665: LD_INT 7
42667: DOUBLE
42668: EQUAL
42669: IFTRUE 42673
42671: GO 42699
42673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42674: LD_ADDR_VAR 0 3
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: LD_INT 3
42684: PUSH
42685: LD_INT 4
42687: PUSH
42688: LD_INT 5
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: ST_TO_ADDR
42697: GO 43488
42699: LD_INT 12
42701: DOUBLE
42702: EQUAL
42703: IFTRUE 42707
42705: GO 42733
42707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42708: LD_ADDR_VAR 0 3
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: LD_INT 3
42718: PUSH
42719: LD_INT 4
42721: PUSH
42722: LD_INT 5
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: ST_TO_ADDR
42731: GO 43488
42733: LD_INT 13
42735: DOUBLE
42736: EQUAL
42737: IFTRUE 42741
42739: GO 42767
42741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42742: LD_ADDR_VAR 0 3
42746: PUSH
42747: LD_INT 2
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: LD_INT 4
42755: PUSH
42756: LD_INT 5
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: ST_TO_ADDR
42765: GO 43488
42767: LD_INT 14
42769: DOUBLE
42770: EQUAL
42771: IFTRUE 42775
42773: GO 42793
42775: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42776: LD_ADDR_VAR 0 3
42780: PUSH
42781: LD_INT 4
42783: PUSH
42784: LD_INT 5
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: ST_TO_ADDR
42791: GO 43488
42793: LD_INT 6
42795: DOUBLE
42796: EQUAL
42797: IFTRUE 42801
42799: GO 42819
42801: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42802: LD_ADDR_VAR 0 3
42806: PUSH
42807: LD_INT 4
42809: PUSH
42810: LD_INT 5
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: ST_TO_ADDR
42817: GO 43488
42819: LD_INT 10
42821: DOUBLE
42822: EQUAL
42823: IFTRUE 42827
42825: GO 42845
42827: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42828: LD_ADDR_VAR 0 3
42832: PUSH
42833: LD_INT 4
42835: PUSH
42836: LD_INT 5
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: ST_TO_ADDR
42843: GO 43488
42845: LD_INT 22
42847: DOUBLE
42848: EQUAL
42849: IFTRUE 42853
42851: GO 42879
42853: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42854: LD_ADDR_VAR 0 3
42858: PUSH
42859: LD_INT 11
42861: PUSH
42862: LD_INT 12
42864: PUSH
42865: LD_INT 13
42867: PUSH
42868: LD_INT 14
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: ST_TO_ADDR
42877: GO 43488
42879: LD_INT 23
42881: DOUBLE
42882: EQUAL
42883: IFTRUE 42887
42885: GO 42913
42887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42888: LD_ADDR_VAR 0 3
42892: PUSH
42893: LD_INT 11
42895: PUSH
42896: LD_INT 12
42898: PUSH
42899: LD_INT 13
42901: PUSH
42902: LD_INT 14
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: ST_TO_ADDR
42911: GO 43488
42913: LD_INT 24
42915: DOUBLE
42916: EQUAL
42917: IFTRUE 42921
42919: GO 42947
42921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42922: LD_ADDR_VAR 0 3
42926: PUSH
42927: LD_INT 11
42929: PUSH
42930: LD_INT 12
42932: PUSH
42933: LD_INT 13
42935: PUSH
42936: LD_INT 14
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: ST_TO_ADDR
42945: GO 43488
42947: LD_INT 30
42949: DOUBLE
42950: EQUAL
42951: IFTRUE 42955
42953: GO 42981
42955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42956: LD_ADDR_VAR 0 3
42960: PUSH
42961: LD_INT 11
42963: PUSH
42964: LD_INT 12
42966: PUSH
42967: LD_INT 13
42969: PUSH
42970: LD_INT 14
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: ST_TO_ADDR
42979: GO 43488
42981: LD_INT 25
42983: DOUBLE
42984: EQUAL
42985: IFTRUE 42989
42987: GO 43007
42989: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
42990: LD_ADDR_VAR 0 3
42994: PUSH
42995: LD_INT 13
42997: PUSH
42998: LD_INT 14
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: ST_TO_ADDR
43005: GO 43488
43007: LD_INT 27
43009: DOUBLE
43010: EQUAL
43011: IFTRUE 43015
43013: GO 43033
43015: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43016: LD_ADDR_VAR 0 3
43020: PUSH
43021: LD_INT 13
43023: PUSH
43024: LD_INT 14
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: ST_TO_ADDR
43031: GO 43488
43033: LD_INT 92
43035: DOUBLE
43036: EQUAL
43037: IFTRUE 43041
43039: GO 43067
43041: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43042: LD_ADDR_VAR 0 3
43046: PUSH
43047: LD_INT 11
43049: PUSH
43050: LD_INT 12
43052: PUSH
43053: LD_INT 13
43055: PUSH
43056: LD_INT 14
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: ST_TO_ADDR
43065: GO 43488
43067: LD_INT 28
43069: DOUBLE
43070: EQUAL
43071: IFTRUE 43075
43073: GO 43093
43075: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43076: LD_ADDR_VAR 0 3
43080: PUSH
43081: LD_INT 13
43083: PUSH
43084: LD_INT 14
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: ST_TO_ADDR
43091: GO 43488
43093: LD_INT 29
43095: DOUBLE
43096: EQUAL
43097: IFTRUE 43101
43099: GO 43119
43101: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43102: LD_ADDR_VAR 0 3
43106: PUSH
43107: LD_INT 13
43109: PUSH
43110: LD_INT 14
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: ST_TO_ADDR
43117: GO 43488
43119: LD_INT 31
43121: DOUBLE
43122: EQUAL
43123: IFTRUE 43127
43125: GO 43145
43127: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43128: LD_ADDR_VAR 0 3
43132: PUSH
43133: LD_INT 13
43135: PUSH
43136: LD_INT 14
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: ST_TO_ADDR
43143: GO 43488
43145: LD_INT 26
43147: DOUBLE
43148: EQUAL
43149: IFTRUE 43153
43151: GO 43171
43153: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43154: LD_ADDR_VAR 0 3
43158: PUSH
43159: LD_INT 13
43161: PUSH
43162: LD_INT 14
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: ST_TO_ADDR
43169: GO 43488
43171: LD_INT 42
43173: DOUBLE
43174: EQUAL
43175: IFTRUE 43179
43177: GO 43205
43179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43180: LD_ADDR_VAR 0 3
43184: PUSH
43185: LD_INT 21
43187: PUSH
43188: LD_INT 22
43190: PUSH
43191: LD_INT 23
43193: PUSH
43194: LD_INT 24
43196: PUSH
43197: EMPTY
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: ST_TO_ADDR
43203: GO 43488
43205: LD_INT 43
43207: DOUBLE
43208: EQUAL
43209: IFTRUE 43213
43211: GO 43239
43213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43214: LD_ADDR_VAR 0 3
43218: PUSH
43219: LD_INT 21
43221: PUSH
43222: LD_INT 22
43224: PUSH
43225: LD_INT 23
43227: PUSH
43228: LD_INT 24
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: ST_TO_ADDR
43237: GO 43488
43239: LD_INT 44
43241: DOUBLE
43242: EQUAL
43243: IFTRUE 43247
43245: GO 43273
43247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43248: LD_ADDR_VAR 0 3
43252: PUSH
43253: LD_INT 21
43255: PUSH
43256: LD_INT 22
43258: PUSH
43259: LD_INT 23
43261: PUSH
43262: LD_INT 24
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: ST_TO_ADDR
43271: GO 43488
43273: LD_INT 45
43275: DOUBLE
43276: EQUAL
43277: IFTRUE 43281
43279: GO 43307
43281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43282: LD_ADDR_VAR 0 3
43286: PUSH
43287: LD_INT 21
43289: PUSH
43290: LD_INT 22
43292: PUSH
43293: LD_INT 23
43295: PUSH
43296: LD_INT 24
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: ST_TO_ADDR
43305: GO 43488
43307: LD_INT 49
43309: DOUBLE
43310: EQUAL
43311: IFTRUE 43315
43313: GO 43341
43315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43316: LD_ADDR_VAR 0 3
43320: PUSH
43321: LD_INT 21
43323: PUSH
43324: LD_INT 22
43326: PUSH
43327: LD_INT 23
43329: PUSH
43330: LD_INT 24
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: ST_TO_ADDR
43339: GO 43488
43341: LD_INT 51
43343: DOUBLE
43344: EQUAL
43345: IFTRUE 43349
43347: GO 43375
43349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43350: LD_ADDR_VAR 0 3
43354: PUSH
43355: LD_INT 21
43357: PUSH
43358: LD_INT 22
43360: PUSH
43361: LD_INT 23
43363: PUSH
43364: LD_INT 24
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: ST_TO_ADDR
43373: GO 43488
43375: LD_INT 52
43377: DOUBLE
43378: EQUAL
43379: IFTRUE 43383
43381: GO 43409
43383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43384: LD_ADDR_VAR 0 3
43388: PUSH
43389: LD_INT 21
43391: PUSH
43392: LD_INT 22
43394: PUSH
43395: LD_INT 23
43397: PUSH
43398: LD_INT 24
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: ST_TO_ADDR
43407: GO 43488
43409: LD_INT 53
43411: DOUBLE
43412: EQUAL
43413: IFTRUE 43417
43415: GO 43435
43417: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43418: LD_ADDR_VAR 0 3
43422: PUSH
43423: LD_INT 23
43425: PUSH
43426: LD_INT 24
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: ST_TO_ADDR
43433: GO 43488
43435: LD_INT 46
43437: DOUBLE
43438: EQUAL
43439: IFTRUE 43443
43441: GO 43461
43443: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43444: LD_ADDR_VAR 0 3
43448: PUSH
43449: LD_INT 23
43451: PUSH
43452: LD_INT 24
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: ST_TO_ADDR
43459: GO 43488
43461: LD_INT 47
43463: DOUBLE
43464: EQUAL
43465: IFTRUE 43469
43467: GO 43487
43469: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43470: LD_ADDR_VAR 0 3
43474: PUSH
43475: LD_INT 23
43477: PUSH
43478: LD_INT 24
43480: PUSH
43481: EMPTY
43482: LIST
43483: LIST
43484: ST_TO_ADDR
43485: GO 43488
43487: POP
// result := ( chassis in result ) ;
43488: LD_ADDR_VAR 0 3
43492: PUSH
43493: LD_VAR 0 1
43497: PUSH
43498: LD_VAR 0 3
43502: IN
43503: ST_TO_ADDR
// end ;
43504: LD_VAR 0 3
43508: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43509: LD_INT 0
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
43515: PPUSH
43516: PPUSH
43517: PPUSH
// result := array ;
43518: LD_ADDR_VAR 0 5
43522: PUSH
43523: LD_VAR 0 1
43527: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43528: LD_VAR 0 1
43532: NOT
43533: PUSH
43534: LD_VAR 0 2
43538: NOT
43539: OR
43540: PUSH
43541: LD_VAR 0 3
43545: NOT
43546: OR
43547: PUSH
43548: LD_VAR 0 2
43552: PUSH
43553: LD_VAR 0 1
43557: GREATER
43558: OR
43559: PUSH
43560: LD_VAR 0 3
43564: PUSH
43565: LD_VAR 0 1
43569: GREATER
43570: OR
43571: IFFALSE 43575
// exit ;
43573: GO 43871
// if direction then
43575: LD_VAR 0 4
43579: IFFALSE 43643
// begin d := 1 ;
43581: LD_ADDR_VAR 0 9
43585: PUSH
43586: LD_INT 1
43588: ST_TO_ADDR
// if i_from > i_to then
43589: LD_VAR 0 2
43593: PUSH
43594: LD_VAR 0 3
43598: GREATER
43599: IFFALSE 43625
// length := ( array - i_from ) + i_to else
43601: LD_ADDR_VAR 0 11
43605: PUSH
43606: LD_VAR 0 1
43610: PUSH
43611: LD_VAR 0 2
43615: MINUS
43616: PUSH
43617: LD_VAR 0 3
43621: PLUS
43622: ST_TO_ADDR
43623: GO 43641
// length := i_to - i_from ;
43625: LD_ADDR_VAR 0 11
43629: PUSH
43630: LD_VAR 0 3
43634: PUSH
43635: LD_VAR 0 2
43639: MINUS
43640: ST_TO_ADDR
// end else
43641: GO 43704
// begin d := - 1 ;
43643: LD_ADDR_VAR 0 9
43647: PUSH
43648: LD_INT 1
43650: NEG
43651: ST_TO_ADDR
// if i_from > i_to then
43652: LD_VAR 0 2
43656: PUSH
43657: LD_VAR 0 3
43661: GREATER
43662: IFFALSE 43682
// length := i_from - i_to else
43664: LD_ADDR_VAR 0 11
43668: PUSH
43669: LD_VAR 0 2
43673: PUSH
43674: LD_VAR 0 3
43678: MINUS
43679: ST_TO_ADDR
43680: GO 43704
// length := ( array - i_to ) + i_from ;
43682: LD_ADDR_VAR 0 11
43686: PUSH
43687: LD_VAR 0 1
43691: PUSH
43692: LD_VAR 0 3
43696: MINUS
43697: PUSH
43698: LD_VAR 0 2
43702: PLUS
43703: ST_TO_ADDR
// end ; if not length then
43704: LD_VAR 0 11
43708: NOT
43709: IFFALSE 43713
// exit ;
43711: GO 43871
// tmp := array ;
43713: LD_ADDR_VAR 0 10
43717: PUSH
43718: LD_VAR 0 1
43722: ST_TO_ADDR
// for i = 1 to length do
43723: LD_ADDR_VAR 0 6
43727: PUSH
43728: DOUBLE
43729: LD_INT 1
43731: DEC
43732: ST_TO_ADDR
43733: LD_VAR 0 11
43737: PUSH
43738: FOR_TO
43739: IFFALSE 43859
// begin for j = 1 to array do
43741: LD_ADDR_VAR 0 7
43745: PUSH
43746: DOUBLE
43747: LD_INT 1
43749: DEC
43750: ST_TO_ADDR
43751: LD_VAR 0 1
43755: PUSH
43756: FOR_TO
43757: IFFALSE 43845
// begin k := j + d ;
43759: LD_ADDR_VAR 0 8
43763: PUSH
43764: LD_VAR 0 7
43768: PUSH
43769: LD_VAR 0 9
43773: PLUS
43774: ST_TO_ADDR
// if k > array then
43775: LD_VAR 0 8
43779: PUSH
43780: LD_VAR 0 1
43784: GREATER
43785: IFFALSE 43795
// k := 1 ;
43787: LD_ADDR_VAR 0 8
43791: PUSH
43792: LD_INT 1
43794: ST_TO_ADDR
// if not k then
43795: LD_VAR 0 8
43799: NOT
43800: IFFALSE 43812
// k := array ;
43802: LD_ADDR_VAR 0 8
43806: PUSH
43807: LD_VAR 0 1
43811: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43812: LD_ADDR_VAR 0 10
43816: PUSH
43817: LD_VAR 0 10
43821: PPUSH
43822: LD_VAR 0 8
43826: PPUSH
43827: LD_VAR 0 1
43831: PUSH
43832: LD_VAR 0 7
43836: ARRAY
43837: PPUSH
43838: CALL_OW 1
43842: ST_TO_ADDR
// end ;
43843: GO 43756
43845: POP
43846: POP
// array := tmp ;
43847: LD_ADDR_VAR 0 1
43851: PUSH
43852: LD_VAR 0 10
43856: ST_TO_ADDR
// end ;
43857: GO 43738
43859: POP
43860: POP
// result := array ;
43861: LD_ADDR_VAR 0 5
43865: PUSH
43866: LD_VAR 0 1
43870: ST_TO_ADDR
// end ;
43871: LD_VAR 0 5
43875: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43876: LD_INT 0
43878: PPUSH
43879: PPUSH
// result := 0 ;
43880: LD_ADDR_VAR 0 3
43884: PUSH
43885: LD_INT 0
43887: ST_TO_ADDR
// if not array or not value in array then
43888: LD_VAR 0 1
43892: NOT
43893: PUSH
43894: LD_VAR 0 2
43898: PUSH
43899: LD_VAR 0 1
43903: IN
43904: NOT
43905: OR
43906: IFFALSE 43910
// exit ;
43908: GO 43964
// for i = 1 to array do
43910: LD_ADDR_VAR 0 4
43914: PUSH
43915: DOUBLE
43916: LD_INT 1
43918: DEC
43919: ST_TO_ADDR
43920: LD_VAR 0 1
43924: PUSH
43925: FOR_TO
43926: IFFALSE 43962
// if value = array [ i ] then
43928: LD_VAR 0 2
43932: PUSH
43933: LD_VAR 0 1
43937: PUSH
43938: LD_VAR 0 4
43942: ARRAY
43943: EQUAL
43944: IFFALSE 43960
// begin result := i ;
43946: LD_ADDR_VAR 0 3
43950: PUSH
43951: LD_VAR 0 4
43955: ST_TO_ADDR
// exit ;
43956: POP
43957: POP
43958: GO 43964
// end ;
43960: GO 43925
43962: POP
43963: POP
// end ;
43964: LD_VAR 0 3
43968: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
43969: LD_INT 0
43971: PPUSH
// vc_chassis := chassis ;
43972: LD_ADDR_OWVAR 37
43976: PUSH
43977: LD_VAR 0 1
43981: ST_TO_ADDR
// vc_engine := engine ;
43982: LD_ADDR_OWVAR 39
43986: PUSH
43987: LD_VAR 0 2
43991: ST_TO_ADDR
// vc_control := control ;
43992: LD_ADDR_OWVAR 38
43996: PUSH
43997: LD_VAR 0 3
44001: ST_TO_ADDR
// vc_weapon := weapon ;
44002: LD_ADDR_OWVAR 40
44006: PUSH
44007: LD_VAR 0 4
44011: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44012: LD_ADDR_OWVAR 41
44016: PUSH
44017: LD_VAR 0 5
44021: ST_TO_ADDR
// end ;
44022: LD_VAR 0 6
44026: RET
// export function WantPlant ( unit ) ; var task ; begin
44027: LD_INT 0
44029: PPUSH
44030: PPUSH
// result := false ;
44031: LD_ADDR_VAR 0 2
44035: PUSH
44036: LD_INT 0
44038: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44039: LD_ADDR_VAR 0 3
44043: PUSH
44044: LD_VAR 0 1
44048: PPUSH
44049: CALL_OW 437
44053: ST_TO_ADDR
// if task then
44054: LD_VAR 0 3
44058: IFFALSE 44086
// if task [ 1 ] [ 1 ] = p then
44060: LD_VAR 0 3
44064: PUSH
44065: LD_INT 1
44067: ARRAY
44068: PUSH
44069: LD_INT 1
44071: ARRAY
44072: PUSH
44073: LD_STRING p
44075: EQUAL
44076: IFFALSE 44086
// result := true ;
44078: LD_ADDR_VAR 0 2
44082: PUSH
44083: LD_INT 1
44085: ST_TO_ADDR
// end ;
44086: LD_VAR 0 2
44090: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44091: LD_INT 0
44093: PPUSH
44094: PPUSH
44095: PPUSH
44096: PPUSH
// if pos < 1 then
44097: LD_VAR 0 2
44101: PUSH
44102: LD_INT 1
44104: LESS
44105: IFFALSE 44109
// exit ;
44107: GO 44412
// if pos = 1 then
44109: LD_VAR 0 2
44113: PUSH
44114: LD_INT 1
44116: EQUAL
44117: IFFALSE 44150
// result := Replace ( arr , pos [ 1 ] , value ) else
44119: LD_ADDR_VAR 0 4
44123: PUSH
44124: LD_VAR 0 1
44128: PPUSH
44129: LD_VAR 0 2
44133: PUSH
44134: LD_INT 1
44136: ARRAY
44137: PPUSH
44138: LD_VAR 0 3
44142: PPUSH
44143: CALL_OW 1
44147: ST_TO_ADDR
44148: GO 44412
// begin tmp := arr ;
44150: LD_ADDR_VAR 0 6
44154: PUSH
44155: LD_VAR 0 1
44159: ST_TO_ADDR
// s_arr := [ tmp ] ;
44160: LD_ADDR_VAR 0 7
44164: PUSH
44165: LD_VAR 0 6
44169: PUSH
44170: EMPTY
44171: LIST
44172: ST_TO_ADDR
// for i = 1 to pos - 1 do
44173: LD_ADDR_VAR 0 5
44177: PUSH
44178: DOUBLE
44179: LD_INT 1
44181: DEC
44182: ST_TO_ADDR
44183: LD_VAR 0 2
44187: PUSH
44188: LD_INT 1
44190: MINUS
44191: PUSH
44192: FOR_TO
44193: IFFALSE 44238
// begin tmp := tmp [ pos [ i ] ] ;
44195: LD_ADDR_VAR 0 6
44199: PUSH
44200: LD_VAR 0 6
44204: PUSH
44205: LD_VAR 0 2
44209: PUSH
44210: LD_VAR 0 5
44214: ARRAY
44215: ARRAY
44216: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44217: LD_ADDR_VAR 0 7
44221: PUSH
44222: LD_VAR 0 7
44226: PUSH
44227: LD_VAR 0 6
44231: PUSH
44232: EMPTY
44233: LIST
44234: ADD
44235: ST_TO_ADDR
// end ;
44236: GO 44192
44238: POP
44239: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44240: LD_ADDR_VAR 0 6
44244: PUSH
44245: LD_VAR 0 6
44249: PPUSH
44250: LD_VAR 0 2
44254: PUSH
44255: LD_VAR 0 2
44259: ARRAY
44260: PPUSH
44261: LD_VAR 0 3
44265: PPUSH
44266: CALL_OW 1
44270: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44271: LD_ADDR_VAR 0 7
44275: PUSH
44276: LD_VAR 0 7
44280: PPUSH
44281: LD_VAR 0 7
44285: PPUSH
44286: LD_VAR 0 6
44290: PPUSH
44291: CALL_OW 1
44295: ST_TO_ADDR
// for i = s_arr downto 2 do
44296: LD_ADDR_VAR 0 5
44300: PUSH
44301: DOUBLE
44302: LD_VAR 0 7
44306: INC
44307: ST_TO_ADDR
44308: LD_INT 2
44310: PUSH
44311: FOR_DOWNTO
44312: IFFALSE 44396
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44314: LD_ADDR_VAR 0 6
44318: PUSH
44319: LD_VAR 0 7
44323: PUSH
44324: LD_VAR 0 5
44328: PUSH
44329: LD_INT 1
44331: MINUS
44332: ARRAY
44333: PPUSH
44334: LD_VAR 0 2
44338: PUSH
44339: LD_VAR 0 5
44343: PUSH
44344: LD_INT 1
44346: MINUS
44347: ARRAY
44348: PPUSH
44349: LD_VAR 0 7
44353: PUSH
44354: LD_VAR 0 5
44358: ARRAY
44359: PPUSH
44360: CALL_OW 1
44364: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44365: LD_ADDR_VAR 0 7
44369: PUSH
44370: LD_VAR 0 7
44374: PPUSH
44375: LD_VAR 0 5
44379: PUSH
44380: LD_INT 1
44382: MINUS
44383: PPUSH
44384: LD_VAR 0 6
44388: PPUSH
44389: CALL_OW 1
44393: ST_TO_ADDR
// end ;
44394: GO 44311
44396: POP
44397: POP
// result := s_arr [ 1 ] ;
44398: LD_ADDR_VAR 0 4
44402: PUSH
44403: LD_VAR 0 7
44407: PUSH
44408: LD_INT 1
44410: ARRAY
44411: ST_TO_ADDR
// end ; end ;
44412: LD_VAR 0 4
44416: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44417: LD_INT 0
44419: PPUSH
44420: PPUSH
// if not list then
44421: LD_VAR 0 1
44425: NOT
44426: IFFALSE 44430
// exit ;
44428: GO 44521
// i := list [ pos1 ] ;
44430: LD_ADDR_VAR 0 5
44434: PUSH
44435: LD_VAR 0 1
44439: PUSH
44440: LD_VAR 0 2
44444: ARRAY
44445: ST_TO_ADDR
// if not i then
44446: LD_VAR 0 5
44450: NOT
44451: IFFALSE 44455
// exit ;
44453: GO 44521
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44455: LD_ADDR_VAR 0 1
44459: PUSH
44460: LD_VAR 0 1
44464: PPUSH
44465: LD_VAR 0 2
44469: PPUSH
44470: LD_VAR 0 1
44474: PUSH
44475: LD_VAR 0 3
44479: ARRAY
44480: PPUSH
44481: CALL_OW 1
44485: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44486: LD_ADDR_VAR 0 1
44490: PUSH
44491: LD_VAR 0 1
44495: PPUSH
44496: LD_VAR 0 3
44500: PPUSH
44501: LD_VAR 0 5
44505: PPUSH
44506: CALL_OW 1
44510: ST_TO_ADDR
// result := list ;
44511: LD_ADDR_VAR 0 4
44515: PUSH
44516: LD_VAR 0 1
44520: ST_TO_ADDR
// end ;
44521: LD_VAR 0 4
44525: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44526: LD_INT 0
44528: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44529: LD_ADDR_VAR 0 5
44533: PUSH
44534: LD_VAR 0 1
44538: PPUSH
44539: CALL_OW 250
44543: PPUSH
44544: LD_VAR 0 1
44548: PPUSH
44549: CALL_OW 251
44553: PPUSH
44554: LD_VAR 0 2
44558: PPUSH
44559: LD_VAR 0 3
44563: PPUSH
44564: LD_VAR 0 4
44568: PPUSH
44569: CALL 44579 0 5
44573: ST_TO_ADDR
// end ;
44574: LD_VAR 0 5
44578: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44579: LD_INT 0
44581: PPUSH
44582: PPUSH
44583: PPUSH
44584: PPUSH
// if not list then
44585: LD_VAR 0 3
44589: NOT
44590: IFFALSE 44594
// exit ;
44592: GO 44982
// result := [ ] ;
44594: LD_ADDR_VAR 0 6
44598: PUSH
44599: EMPTY
44600: ST_TO_ADDR
// for i in list do
44601: LD_ADDR_VAR 0 7
44605: PUSH
44606: LD_VAR 0 3
44610: PUSH
44611: FOR_IN
44612: IFFALSE 44814
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44614: LD_ADDR_VAR 0 9
44618: PUSH
44619: LD_VAR 0 7
44623: PPUSH
44624: LD_VAR 0 1
44628: PPUSH
44629: LD_VAR 0 2
44633: PPUSH
44634: CALL_OW 297
44638: ST_TO_ADDR
// if not result then
44639: LD_VAR 0 6
44643: NOT
44644: IFFALSE 44670
// result := [ [ i , tmp ] ] else
44646: LD_ADDR_VAR 0 6
44650: PUSH
44651: LD_VAR 0 7
44655: PUSH
44656: LD_VAR 0 9
44660: PUSH
44661: EMPTY
44662: LIST
44663: LIST
44664: PUSH
44665: EMPTY
44666: LIST
44667: ST_TO_ADDR
44668: GO 44812
// begin if result [ result ] [ 2 ] < tmp then
44670: LD_VAR 0 6
44674: PUSH
44675: LD_VAR 0 6
44679: ARRAY
44680: PUSH
44681: LD_INT 2
44683: ARRAY
44684: PUSH
44685: LD_VAR 0 9
44689: LESS
44690: IFFALSE 44732
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44692: LD_ADDR_VAR 0 6
44696: PUSH
44697: LD_VAR 0 6
44701: PPUSH
44702: LD_VAR 0 6
44706: PUSH
44707: LD_INT 1
44709: PLUS
44710: PPUSH
44711: LD_VAR 0 7
44715: PUSH
44716: LD_VAR 0 9
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PPUSH
44725: CALL_OW 2
44729: ST_TO_ADDR
44730: GO 44812
// for j = 1 to result do
44732: LD_ADDR_VAR 0 8
44736: PUSH
44737: DOUBLE
44738: LD_INT 1
44740: DEC
44741: ST_TO_ADDR
44742: LD_VAR 0 6
44746: PUSH
44747: FOR_TO
44748: IFFALSE 44810
// begin if tmp < result [ j ] [ 2 ] then
44750: LD_VAR 0 9
44754: PUSH
44755: LD_VAR 0 6
44759: PUSH
44760: LD_VAR 0 8
44764: ARRAY
44765: PUSH
44766: LD_INT 2
44768: ARRAY
44769: LESS
44770: IFFALSE 44808
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44772: LD_ADDR_VAR 0 6
44776: PUSH
44777: LD_VAR 0 6
44781: PPUSH
44782: LD_VAR 0 8
44786: PPUSH
44787: LD_VAR 0 7
44791: PUSH
44792: LD_VAR 0 9
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PPUSH
44801: CALL_OW 2
44805: ST_TO_ADDR
// break ;
44806: GO 44810
// end ; end ;
44808: GO 44747
44810: POP
44811: POP
// end ; end ;
44812: GO 44611
44814: POP
44815: POP
// if result and not asc then
44816: LD_VAR 0 6
44820: PUSH
44821: LD_VAR 0 4
44825: NOT
44826: AND
44827: IFFALSE 44902
// begin tmp := result ;
44829: LD_ADDR_VAR 0 9
44833: PUSH
44834: LD_VAR 0 6
44838: ST_TO_ADDR
// for i = tmp downto 1 do
44839: LD_ADDR_VAR 0 7
44843: PUSH
44844: DOUBLE
44845: LD_VAR 0 9
44849: INC
44850: ST_TO_ADDR
44851: LD_INT 1
44853: PUSH
44854: FOR_DOWNTO
44855: IFFALSE 44900
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44857: LD_ADDR_VAR 0 6
44861: PUSH
44862: LD_VAR 0 6
44866: PPUSH
44867: LD_VAR 0 9
44871: PUSH
44872: LD_VAR 0 7
44876: MINUS
44877: PUSH
44878: LD_INT 1
44880: PLUS
44881: PPUSH
44882: LD_VAR 0 9
44886: PUSH
44887: LD_VAR 0 7
44891: ARRAY
44892: PPUSH
44893: CALL_OW 1
44897: ST_TO_ADDR
44898: GO 44854
44900: POP
44901: POP
// end ; tmp := [ ] ;
44902: LD_ADDR_VAR 0 9
44906: PUSH
44907: EMPTY
44908: ST_TO_ADDR
// if mode then
44909: LD_VAR 0 5
44913: IFFALSE 44982
// begin for i = 1 to result do
44915: LD_ADDR_VAR 0 7
44919: PUSH
44920: DOUBLE
44921: LD_INT 1
44923: DEC
44924: ST_TO_ADDR
44925: LD_VAR 0 6
44929: PUSH
44930: FOR_TO
44931: IFFALSE 44970
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44933: LD_ADDR_VAR 0 9
44937: PUSH
44938: LD_VAR 0 9
44942: PPUSH
44943: LD_VAR 0 7
44947: PPUSH
44948: LD_VAR 0 6
44952: PUSH
44953: LD_VAR 0 7
44957: ARRAY
44958: PUSH
44959: LD_INT 1
44961: ARRAY
44962: PPUSH
44963: CALL_OW 1
44967: ST_TO_ADDR
44968: GO 44930
44970: POP
44971: POP
// result := tmp ;
44972: LD_ADDR_VAR 0 6
44976: PUSH
44977: LD_VAR 0 9
44981: ST_TO_ADDR
// end ; end ;
44982: LD_VAR 0 6
44986: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
44987: LD_INT 0
44989: PPUSH
44990: PPUSH
44991: PPUSH
44992: PPUSH
44993: PPUSH
44994: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
44995: LD_ADDR_VAR 0 5
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: ST_TO_ADDR
// if not x or not y then
45017: LD_VAR 0 2
45021: NOT
45022: PUSH
45023: LD_VAR 0 3
45027: NOT
45028: OR
45029: IFFALSE 45033
// exit ;
45031: GO 46683
// if not range then
45033: LD_VAR 0 4
45037: NOT
45038: IFFALSE 45048
// range := 10 ;
45040: LD_ADDR_VAR 0 4
45044: PUSH
45045: LD_INT 10
45047: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45048: LD_ADDR_VAR 0 8
45052: PUSH
45053: LD_INT 81
45055: PUSH
45056: LD_VAR 0 1
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 92
45067: PUSH
45068: LD_VAR 0 2
45072: PUSH
45073: LD_VAR 0 3
45077: PUSH
45078: LD_VAR 0 4
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 3
45091: PUSH
45092: LD_INT 21
45094: PUSH
45095: LD_INT 3
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: LIST
45110: PPUSH
45111: CALL_OW 69
45115: ST_TO_ADDR
// if not tmp then
45116: LD_VAR 0 8
45120: NOT
45121: IFFALSE 45125
// exit ;
45123: GO 46683
// for i in tmp do
45125: LD_ADDR_VAR 0 6
45129: PUSH
45130: LD_VAR 0 8
45134: PUSH
45135: FOR_IN
45136: IFFALSE 46658
// begin points := [ 0 , 0 , 0 ] ;
45138: LD_ADDR_VAR 0 9
45142: PUSH
45143: LD_INT 0
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: LD_INT 0
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: ST_TO_ADDR
// bpoints := 1 ;
45157: LD_ADDR_VAR 0 10
45161: PUSH
45162: LD_INT 1
45164: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45165: LD_VAR 0 6
45169: PPUSH
45170: CALL_OW 247
45174: PUSH
45175: LD_INT 1
45177: DOUBLE
45178: EQUAL
45179: IFTRUE 45183
45181: GO 45761
45183: POP
// begin if GetClass ( i ) = 1 then
45184: LD_VAR 0 6
45188: PPUSH
45189: CALL_OW 257
45193: PUSH
45194: LD_INT 1
45196: EQUAL
45197: IFFALSE 45218
// points := [ 10 , 5 , 3 ] ;
45199: LD_ADDR_VAR 0 9
45203: PUSH
45204: LD_INT 10
45206: PUSH
45207: LD_INT 5
45209: PUSH
45210: LD_INT 3
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: LIST
45217: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45218: LD_VAR 0 6
45222: PPUSH
45223: CALL_OW 257
45227: PUSH
45228: LD_INT 2
45230: PUSH
45231: LD_INT 3
45233: PUSH
45234: LD_INT 4
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: LIST
45241: IN
45242: IFFALSE 45263
// points := [ 3 , 2 , 1 ] ;
45244: LD_ADDR_VAR 0 9
45248: PUSH
45249: LD_INT 3
45251: PUSH
45252: LD_INT 2
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: LIST
45262: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45263: LD_VAR 0 6
45267: PPUSH
45268: CALL_OW 257
45272: PUSH
45273: LD_INT 5
45275: EQUAL
45276: IFFALSE 45297
// points := [ 130 , 5 , 2 ] ;
45278: LD_ADDR_VAR 0 9
45282: PUSH
45283: LD_INT 130
45285: PUSH
45286: LD_INT 5
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: LIST
45296: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45297: LD_VAR 0 6
45301: PPUSH
45302: CALL_OW 257
45306: PUSH
45307: LD_INT 8
45309: EQUAL
45310: IFFALSE 45331
// points := [ 35 , 35 , 30 ] ;
45312: LD_ADDR_VAR 0 9
45316: PUSH
45317: LD_INT 35
45319: PUSH
45320: LD_INT 35
45322: PUSH
45323: LD_INT 30
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45331: LD_VAR 0 6
45335: PPUSH
45336: CALL_OW 257
45340: PUSH
45341: LD_INT 9
45343: EQUAL
45344: IFFALSE 45365
// points := [ 20 , 55 , 40 ] ;
45346: LD_ADDR_VAR 0 9
45350: PUSH
45351: LD_INT 20
45353: PUSH
45354: LD_INT 55
45356: PUSH
45357: LD_INT 40
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45365: LD_VAR 0 6
45369: PPUSH
45370: CALL_OW 257
45374: PUSH
45375: LD_INT 12
45377: PUSH
45378: LD_INT 16
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: IN
45385: IFFALSE 45406
// points := [ 5 , 3 , 2 ] ;
45387: LD_ADDR_VAR 0 9
45391: PUSH
45392: LD_INT 5
45394: PUSH
45395: LD_INT 3
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: LIST
45405: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45406: LD_VAR 0 6
45410: PPUSH
45411: CALL_OW 257
45415: PUSH
45416: LD_INT 17
45418: EQUAL
45419: IFFALSE 45440
// points := [ 100 , 50 , 75 ] ;
45421: LD_ADDR_VAR 0 9
45425: PUSH
45426: LD_INT 100
45428: PUSH
45429: LD_INT 50
45431: PUSH
45432: LD_INT 75
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45440: LD_VAR 0 6
45444: PPUSH
45445: CALL_OW 257
45449: PUSH
45450: LD_INT 15
45452: EQUAL
45453: IFFALSE 45474
// points := [ 10 , 5 , 3 ] ;
45455: LD_ADDR_VAR 0 9
45459: PUSH
45460: LD_INT 10
45462: PUSH
45463: LD_INT 5
45465: PUSH
45466: LD_INT 3
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: LIST
45473: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45474: LD_VAR 0 6
45478: PPUSH
45479: CALL_OW 257
45483: PUSH
45484: LD_INT 14
45486: EQUAL
45487: IFFALSE 45508
// points := [ 10 , 0 , 0 ] ;
45489: LD_ADDR_VAR 0 9
45493: PUSH
45494: LD_INT 10
45496: PUSH
45497: LD_INT 0
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45508: LD_VAR 0 6
45512: PPUSH
45513: CALL_OW 257
45517: PUSH
45518: LD_INT 11
45520: EQUAL
45521: IFFALSE 45542
// points := [ 30 , 10 , 5 ] ;
45523: LD_ADDR_VAR 0 9
45527: PUSH
45528: LD_INT 30
45530: PUSH
45531: LD_INT 10
45533: PUSH
45534: LD_INT 5
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45542: LD_VAR 0 1
45546: PPUSH
45547: LD_INT 5
45549: PPUSH
45550: CALL_OW 321
45554: PUSH
45555: LD_INT 2
45557: EQUAL
45558: IFFALSE 45575
// bpoints := bpoints * 1.8 ;
45560: LD_ADDR_VAR 0 10
45564: PUSH
45565: LD_VAR 0 10
45569: PUSH
45570: LD_REAL  1.80000000000000E+0000
45573: MUL
45574: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45575: LD_VAR 0 6
45579: PPUSH
45580: CALL_OW 257
45584: PUSH
45585: LD_INT 1
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: LD_INT 3
45593: PUSH
45594: LD_INT 4
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: IN
45603: PUSH
45604: LD_VAR 0 1
45608: PPUSH
45609: LD_INT 51
45611: PPUSH
45612: CALL_OW 321
45616: PUSH
45617: LD_INT 2
45619: EQUAL
45620: AND
45621: IFFALSE 45638
// bpoints := bpoints * 1.2 ;
45623: LD_ADDR_VAR 0 10
45627: PUSH
45628: LD_VAR 0 10
45632: PUSH
45633: LD_REAL  1.20000000000000E+0000
45636: MUL
45637: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45638: LD_VAR 0 6
45642: PPUSH
45643: CALL_OW 257
45647: PUSH
45648: LD_INT 5
45650: PUSH
45651: LD_INT 7
45653: PUSH
45654: LD_INT 9
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: LIST
45661: IN
45662: PUSH
45663: LD_VAR 0 1
45667: PPUSH
45668: LD_INT 52
45670: PPUSH
45671: CALL_OW 321
45675: PUSH
45676: LD_INT 2
45678: EQUAL
45679: AND
45680: IFFALSE 45697
// bpoints := bpoints * 1.5 ;
45682: LD_ADDR_VAR 0 10
45686: PUSH
45687: LD_VAR 0 10
45691: PUSH
45692: LD_REAL  1.50000000000000E+0000
45695: MUL
45696: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45697: LD_VAR 0 1
45701: PPUSH
45702: LD_INT 66
45704: PPUSH
45705: CALL_OW 321
45709: PUSH
45710: LD_INT 2
45712: EQUAL
45713: IFFALSE 45730
// bpoints := bpoints * 1.1 ;
45715: LD_ADDR_VAR 0 10
45719: PUSH
45720: LD_VAR 0 10
45724: PUSH
45725: LD_REAL  1.10000000000000E+0000
45728: MUL
45729: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45730: LD_ADDR_VAR 0 10
45734: PUSH
45735: LD_VAR 0 10
45739: PUSH
45740: LD_VAR 0 6
45744: PPUSH
45745: LD_INT 1
45747: PPUSH
45748: CALL_OW 259
45752: PUSH
45753: LD_REAL  1.15000000000000E+0000
45756: MUL
45757: MUL
45758: ST_TO_ADDR
// end ; unit_vehicle :
45759: GO 46587
45761: LD_INT 2
45763: DOUBLE
45764: EQUAL
45765: IFTRUE 45769
45767: GO 46575
45769: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45770: LD_VAR 0 6
45774: PPUSH
45775: CALL_OW 264
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: LD_INT 42
45785: PUSH
45786: LD_INT 24
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: LIST
45793: IN
45794: IFFALSE 45815
// points := [ 25 , 5 , 3 ] ;
45796: LD_ADDR_VAR 0 9
45800: PUSH
45801: LD_INT 25
45803: PUSH
45804: LD_INT 5
45806: PUSH
45807: LD_INT 3
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: LIST
45814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45815: LD_VAR 0 6
45819: PPUSH
45820: CALL_OW 264
45824: PUSH
45825: LD_INT 4
45827: PUSH
45828: LD_INT 43
45830: PUSH
45831: LD_INT 25
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: LIST
45838: IN
45839: IFFALSE 45860
// points := [ 40 , 15 , 5 ] ;
45841: LD_ADDR_VAR 0 9
45845: PUSH
45846: LD_INT 40
45848: PUSH
45849: LD_INT 15
45851: PUSH
45852: LD_INT 5
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: LIST
45859: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45860: LD_VAR 0 6
45864: PPUSH
45865: CALL_OW 264
45869: PUSH
45870: LD_INT 3
45872: PUSH
45873: LD_INT 23
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: IN
45880: IFFALSE 45901
// points := [ 7 , 25 , 8 ] ;
45882: LD_ADDR_VAR 0 9
45886: PUSH
45887: LD_INT 7
45889: PUSH
45890: LD_INT 25
45892: PUSH
45893: LD_INT 8
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: LIST
45900: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45901: LD_VAR 0 6
45905: PPUSH
45906: CALL_OW 264
45910: PUSH
45911: LD_INT 5
45913: PUSH
45914: LD_INT 27
45916: PUSH
45917: LD_INT 44
45919: PUSH
45920: EMPTY
45921: LIST
45922: LIST
45923: LIST
45924: IN
45925: IFFALSE 45946
// points := [ 14 , 50 , 16 ] ;
45927: LD_ADDR_VAR 0 9
45931: PUSH
45932: LD_INT 14
45934: PUSH
45935: LD_INT 50
45937: PUSH
45938: LD_INT 16
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: LIST
45945: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45946: LD_VAR 0 6
45950: PPUSH
45951: CALL_OW 264
45955: PUSH
45956: LD_INT 6
45958: PUSH
45959: LD_INT 46
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: IN
45966: IFFALSE 45987
// points := [ 32 , 120 , 70 ] ;
45968: LD_ADDR_VAR 0 9
45972: PUSH
45973: LD_INT 32
45975: PUSH
45976: LD_INT 120
45978: PUSH
45979: LD_INT 70
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: LIST
45986: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
45987: LD_VAR 0 6
45991: PPUSH
45992: CALL_OW 264
45996: PUSH
45997: LD_INT 7
45999: PUSH
46000: LD_INT 28
46002: PUSH
46003: LD_INT 45
46005: PUSH
46006: LD_INT 92
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: IN
46015: IFFALSE 46036
// points := [ 35 , 20 , 45 ] ;
46017: LD_ADDR_VAR 0 9
46021: PUSH
46022: LD_INT 35
46024: PUSH
46025: LD_INT 20
46027: PUSH
46028: LD_INT 45
46030: PUSH
46031: EMPTY
46032: LIST
46033: LIST
46034: LIST
46035: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46036: LD_VAR 0 6
46040: PPUSH
46041: CALL_OW 264
46045: PUSH
46046: LD_INT 47
46048: PUSH
46049: EMPTY
46050: LIST
46051: IN
46052: IFFALSE 46073
// points := [ 67 , 45 , 75 ] ;
46054: LD_ADDR_VAR 0 9
46058: PUSH
46059: LD_INT 67
46061: PUSH
46062: LD_INT 45
46064: PUSH
46065: LD_INT 75
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: LIST
46072: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46073: LD_VAR 0 6
46077: PPUSH
46078: CALL_OW 264
46082: PUSH
46083: LD_INT 26
46085: PUSH
46086: EMPTY
46087: LIST
46088: IN
46089: IFFALSE 46110
// points := [ 120 , 30 , 80 ] ;
46091: LD_ADDR_VAR 0 9
46095: PUSH
46096: LD_INT 120
46098: PUSH
46099: LD_INT 30
46101: PUSH
46102: LD_INT 80
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: LIST
46109: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46110: LD_VAR 0 6
46114: PPUSH
46115: CALL_OW 264
46119: PUSH
46120: LD_INT 22
46122: PUSH
46123: EMPTY
46124: LIST
46125: IN
46126: IFFALSE 46147
// points := [ 40 , 1 , 1 ] ;
46128: LD_ADDR_VAR 0 9
46132: PUSH
46133: LD_INT 40
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46147: LD_VAR 0 6
46151: PPUSH
46152: CALL_OW 264
46156: PUSH
46157: LD_INT 29
46159: PUSH
46160: EMPTY
46161: LIST
46162: IN
46163: IFFALSE 46184
// points := [ 70 , 200 , 400 ] ;
46165: LD_ADDR_VAR 0 9
46169: PUSH
46170: LD_INT 70
46172: PUSH
46173: LD_INT 200
46175: PUSH
46176: LD_INT 400
46178: PUSH
46179: EMPTY
46180: LIST
46181: LIST
46182: LIST
46183: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46184: LD_VAR 0 6
46188: PPUSH
46189: CALL_OW 264
46193: PUSH
46194: LD_INT 14
46196: PUSH
46197: LD_INT 53
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: IN
46204: IFFALSE 46225
// points := [ 40 , 10 , 20 ] ;
46206: LD_ADDR_VAR 0 9
46210: PUSH
46211: LD_INT 40
46213: PUSH
46214: LD_INT 10
46216: PUSH
46217: LD_INT 20
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: LIST
46224: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46225: LD_VAR 0 6
46229: PPUSH
46230: CALL_OW 264
46234: PUSH
46235: LD_INT 9
46237: PUSH
46238: EMPTY
46239: LIST
46240: IN
46241: IFFALSE 46262
// points := [ 5 , 70 , 20 ] ;
46243: LD_ADDR_VAR 0 9
46247: PUSH
46248: LD_INT 5
46250: PUSH
46251: LD_INT 70
46253: PUSH
46254: LD_INT 20
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46262: LD_VAR 0 6
46266: PPUSH
46267: CALL_OW 264
46271: PUSH
46272: LD_INT 10
46274: PUSH
46275: EMPTY
46276: LIST
46277: IN
46278: IFFALSE 46299
// points := [ 35 , 110 , 70 ] ;
46280: LD_ADDR_VAR 0 9
46284: PUSH
46285: LD_INT 35
46287: PUSH
46288: LD_INT 110
46290: PUSH
46291: LD_INT 70
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: LIST
46298: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46299: LD_VAR 0 6
46303: PPUSH
46304: CALL_OW 265
46308: PUSH
46309: LD_INT 25
46311: EQUAL
46312: IFFALSE 46333
// points := [ 80 , 65 , 100 ] ;
46314: LD_ADDR_VAR 0 9
46318: PUSH
46319: LD_INT 80
46321: PUSH
46322: LD_INT 65
46324: PUSH
46325: LD_INT 100
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46333: LD_VAR 0 6
46337: PPUSH
46338: CALL_OW 263
46342: PUSH
46343: LD_INT 1
46345: EQUAL
46346: IFFALSE 46381
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46348: LD_ADDR_VAR 0 10
46352: PUSH
46353: LD_VAR 0 10
46357: PUSH
46358: LD_VAR 0 6
46362: PPUSH
46363: CALL_OW 311
46367: PPUSH
46368: LD_INT 3
46370: PPUSH
46371: CALL_OW 259
46375: PUSH
46376: LD_INT 4
46378: MUL
46379: MUL
46380: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46381: LD_VAR 0 6
46385: PPUSH
46386: CALL_OW 263
46390: PUSH
46391: LD_INT 2
46393: EQUAL
46394: IFFALSE 46445
// begin j := IsControledBy ( i ) ;
46396: LD_ADDR_VAR 0 7
46400: PUSH
46401: LD_VAR 0 6
46405: PPUSH
46406: CALL_OW 312
46410: ST_TO_ADDR
// if j then
46411: LD_VAR 0 7
46415: IFFALSE 46445
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46417: LD_ADDR_VAR 0 10
46421: PUSH
46422: LD_VAR 0 10
46426: PUSH
46427: LD_VAR 0 7
46431: PPUSH
46432: LD_INT 3
46434: PPUSH
46435: CALL_OW 259
46439: PUSH
46440: LD_INT 3
46442: MUL
46443: MUL
46444: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46445: LD_VAR 0 6
46449: PPUSH
46450: CALL_OW 264
46454: PUSH
46455: LD_INT 5
46457: PUSH
46458: LD_INT 6
46460: PUSH
46461: LD_INT 46
46463: PUSH
46464: LD_INT 44
46466: PUSH
46467: LD_INT 47
46469: PUSH
46470: LD_INT 45
46472: PUSH
46473: LD_INT 28
46475: PUSH
46476: LD_INT 7
46478: PUSH
46479: LD_INT 27
46481: PUSH
46482: LD_INT 29
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: IN
46497: PUSH
46498: LD_VAR 0 1
46502: PPUSH
46503: LD_INT 52
46505: PPUSH
46506: CALL_OW 321
46510: PUSH
46511: LD_INT 2
46513: EQUAL
46514: AND
46515: IFFALSE 46532
// bpoints := bpoints * 1.2 ;
46517: LD_ADDR_VAR 0 10
46521: PUSH
46522: LD_VAR 0 10
46526: PUSH
46527: LD_REAL  1.20000000000000E+0000
46530: MUL
46531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46532: LD_VAR 0 6
46536: PPUSH
46537: CALL_OW 264
46541: PUSH
46542: LD_INT 6
46544: PUSH
46545: LD_INT 46
46547: PUSH
46548: LD_INT 47
46550: PUSH
46551: EMPTY
46552: LIST
46553: LIST
46554: LIST
46555: IN
46556: IFFALSE 46573
// bpoints := bpoints * 1.2 ;
46558: LD_ADDR_VAR 0 10
46562: PUSH
46563: LD_VAR 0 10
46567: PUSH
46568: LD_REAL  1.20000000000000E+0000
46571: MUL
46572: ST_TO_ADDR
// end ; unit_building :
46573: GO 46587
46575: LD_INT 3
46577: DOUBLE
46578: EQUAL
46579: IFTRUE 46583
46581: GO 46586
46583: POP
// ; end ;
46584: GO 46587
46586: POP
// for j = 1 to 3 do
46587: LD_ADDR_VAR 0 7
46591: PUSH
46592: DOUBLE
46593: LD_INT 1
46595: DEC
46596: ST_TO_ADDR
46597: LD_INT 3
46599: PUSH
46600: FOR_TO
46601: IFFALSE 46654
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46603: LD_ADDR_VAR 0 5
46607: PUSH
46608: LD_VAR 0 5
46612: PPUSH
46613: LD_VAR 0 7
46617: PPUSH
46618: LD_VAR 0 5
46622: PUSH
46623: LD_VAR 0 7
46627: ARRAY
46628: PUSH
46629: LD_VAR 0 9
46633: PUSH
46634: LD_VAR 0 7
46638: ARRAY
46639: PUSH
46640: LD_VAR 0 10
46644: MUL
46645: PLUS
46646: PPUSH
46647: CALL_OW 1
46651: ST_TO_ADDR
46652: GO 46600
46654: POP
46655: POP
// end ;
46656: GO 45135
46658: POP
46659: POP
// result := Replace ( result , 4 , tmp ) ;
46660: LD_ADDR_VAR 0 5
46664: PUSH
46665: LD_VAR 0 5
46669: PPUSH
46670: LD_INT 4
46672: PPUSH
46673: LD_VAR 0 8
46677: PPUSH
46678: CALL_OW 1
46682: ST_TO_ADDR
// end ;
46683: LD_VAR 0 5
46687: RET
// export function DangerAtRange ( unit , range ) ; begin
46688: LD_INT 0
46690: PPUSH
// if not unit then
46691: LD_VAR 0 1
46695: NOT
46696: IFFALSE 46700
// exit ;
46698: GO 46745
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46700: LD_ADDR_VAR 0 3
46704: PUSH
46705: LD_VAR 0 1
46709: PPUSH
46710: CALL_OW 255
46714: PPUSH
46715: LD_VAR 0 1
46719: PPUSH
46720: CALL_OW 250
46724: PPUSH
46725: LD_VAR 0 1
46729: PPUSH
46730: CALL_OW 251
46734: PPUSH
46735: LD_VAR 0 2
46739: PPUSH
46740: CALL 44987 0 4
46744: ST_TO_ADDR
// end ;
46745: LD_VAR 0 3
46749: RET
// export function DangerInArea ( side , area ) ; begin
46750: LD_INT 0
46752: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46753: LD_ADDR_VAR 0 3
46757: PUSH
46758: LD_VAR 0 2
46762: PPUSH
46763: LD_INT 81
46765: PUSH
46766: LD_VAR 0 1
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PPUSH
46775: CALL_OW 70
46779: ST_TO_ADDR
// end ;
46780: LD_VAR 0 3
46784: RET
// export function IsExtension ( b ) ; begin
46785: LD_INT 0
46787: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46788: LD_ADDR_VAR 0 2
46792: PUSH
46793: LD_VAR 0 1
46797: PUSH
46798: LD_INT 23
46800: PUSH
46801: LD_INT 20
46803: PUSH
46804: LD_INT 22
46806: PUSH
46807: LD_INT 17
46809: PUSH
46810: LD_INT 24
46812: PUSH
46813: LD_INT 21
46815: PUSH
46816: LD_INT 19
46818: PUSH
46819: LD_INT 16
46821: PUSH
46822: LD_INT 25
46824: PUSH
46825: LD_INT 18
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: IN
46840: ST_TO_ADDR
// end ;
46841: LD_VAR 0 2
46845: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46846: LD_INT 0
46848: PPUSH
46849: PPUSH
46850: PPUSH
// result := [ ] ;
46851: LD_ADDR_VAR 0 4
46855: PUSH
46856: EMPTY
46857: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46858: LD_ADDR_VAR 0 5
46862: PUSH
46863: LD_VAR 0 2
46867: PPUSH
46868: LD_INT 21
46870: PUSH
46871: LD_INT 3
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PPUSH
46878: CALL_OW 70
46882: ST_TO_ADDR
// if not tmp then
46883: LD_VAR 0 5
46887: NOT
46888: IFFALSE 46892
// exit ;
46890: GO 46956
// if checkLink then
46892: LD_VAR 0 3
46896: IFFALSE 46946
// begin for i in tmp do
46898: LD_ADDR_VAR 0 6
46902: PUSH
46903: LD_VAR 0 5
46907: PUSH
46908: FOR_IN
46909: IFFALSE 46944
// if GetBase ( i ) <> base then
46911: LD_VAR 0 6
46915: PPUSH
46916: CALL_OW 274
46920: PUSH
46921: LD_VAR 0 1
46925: NONEQUAL
46926: IFFALSE 46942
// ComLinkToBase ( base , i ) ;
46928: LD_VAR 0 1
46932: PPUSH
46933: LD_VAR 0 6
46937: PPUSH
46938: CALL_OW 169
46942: GO 46908
46944: POP
46945: POP
// end ; result := tmp ;
46946: LD_ADDR_VAR 0 4
46950: PUSH
46951: LD_VAR 0 5
46955: ST_TO_ADDR
// end ;
46956: LD_VAR 0 4
46960: RET
// export function ComComplete ( units , b ) ; var i ; begin
46961: LD_INT 0
46963: PPUSH
46964: PPUSH
// if not units then
46965: LD_VAR 0 1
46969: NOT
46970: IFFALSE 46974
// exit ;
46972: GO 47064
// for i in units do
46974: LD_ADDR_VAR 0 4
46978: PUSH
46979: LD_VAR 0 1
46983: PUSH
46984: FOR_IN
46985: IFFALSE 47062
// if BuildingStatus ( b ) = bs_build then
46987: LD_VAR 0 2
46991: PPUSH
46992: CALL_OW 461
46996: PUSH
46997: LD_INT 1
46999: EQUAL
47000: IFFALSE 47060
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47002: LD_VAR 0 4
47006: PPUSH
47007: LD_STRING h
47009: PUSH
47010: LD_VAR 0 2
47014: PPUSH
47015: CALL_OW 250
47019: PUSH
47020: LD_VAR 0 2
47024: PPUSH
47025: CALL_OW 251
47029: PUSH
47030: LD_VAR 0 2
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: PUSH
47053: EMPTY
47054: LIST
47055: PPUSH
47056: CALL_OW 446
47060: GO 46984
47062: POP
47063: POP
// end ;
47064: LD_VAR 0 3
47068: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47069: LD_INT 0
47071: PPUSH
47072: PPUSH
47073: PPUSH
47074: PPUSH
47075: PPUSH
47076: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47077: LD_VAR 0 1
47081: NOT
47082: PUSH
47083: LD_VAR 0 1
47087: PPUSH
47088: CALL_OW 263
47092: PUSH
47093: LD_INT 2
47095: NONEQUAL
47096: OR
47097: IFFALSE 47101
// exit ;
47099: GO 47417
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47101: LD_ADDR_VAR 0 6
47105: PUSH
47106: LD_INT 22
47108: PUSH
47109: LD_VAR 0 1
47113: PPUSH
47114: CALL_OW 255
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 2
47125: PUSH
47126: LD_INT 30
47128: PUSH
47129: LD_INT 36
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 34
47138: PUSH
47139: LD_INT 31
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: LIST
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PPUSH
47155: CALL_OW 69
47159: ST_TO_ADDR
// if not tmp then
47160: LD_VAR 0 6
47164: NOT
47165: IFFALSE 47169
// exit ;
47167: GO 47417
// result := [ ] ;
47169: LD_ADDR_VAR 0 2
47173: PUSH
47174: EMPTY
47175: ST_TO_ADDR
// for i in tmp do
47176: LD_ADDR_VAR 0 3
47180: PUSH
47181: LD_VAR 0 6
47185: PUSH
47186: FOR_IN
47187: IFFALSE 47258
// begin t := UnitsInside ( i ) ;
47189: LD_ADDR_VAR 0 4
47193: PUSH
47194: LD_VAR 0 3
47198: PPUSH
47199: CALL_OW 313
47203: ST_TO_ADDR
// if t then
47204: LD_VAR 0 4
47208: IFFALSE 47256
// for j in t do
47210: LD_ADDR_VAR 0 7
47214: PUSH
47215: LD_VAR 0 4
47219: PUSH
47220: FOR_IN
47221: IFFALSE 47254
// result := Replace ( result , result + 1 , j ) ;
47223: LD_ADDR_VAR 0 2
47227: PUSH
47228: LD_VAR 0 2
47232: PPUSH
47233: LD_VAR 0 2
47237: PUSH
47238: LD_INT 1
47240: PLUS
47241: PPUSH
47242: LD_VAR 0 7
47246: PPUSH
47247: CALL_OW 1
47251: ST_TO_ADDR
47252: GO 47220
47254: POP
47255: POP
// end ;
47256: GO 47186
47258: POP
47259: POP
// if not result then
47260: LD_VAR 0 2
47264: NOT
47265: IFFALSE 47269
// exit ;
47267: GO 47417
// mech := result [ 1 ] ;
47269: LD_ADDR_VAR 0 5
47273: PUSH
47274: LD_VAR 0 2
47278: PUSH
47279: LD_INT 1
47281: ARRAY
47282: ST_TO_ADDR
// if result > 1 then
47283: LD_VAR 0 2
47287: PUSH
47288: LD_INT 1
47290: GREATER
47291: IFFALSE 47403
// begin for i = 2 to result do
47293: LD_ADDR_VAR 0 3
47297: PUSH
47298: DOUBLE
47299: LD_INT 2
47301: DEC
47302: ST_TO_ADDR
47303: LD_VAR 0 2
47307: PUSH
47308: FOR_TO
47309: IFFALSE 47401
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47311: LD_ADDR_VAR 0 4
47315: PUSH
47316: LD_VAR 0 2
47320: PUSH
47321: LD_VAR 0 3
47325: ARRAY
47326: PPUSH
47327: LD_INT 3
47329: PPUSH
47330: CALL_OW 259
47334: PUSH
47335: LD_VAR 0 2
47339: PUSH
47340: LD_VAR 0 3
47344: ARRAY
47345: PPUSH
47346: CALL_OW 432
47350: MINUS
47351: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47352: LD_VAR 0 4
47356: PUSH
47357: LD_VAR 0 5
47361: PPUSH
47362: LD_INT 3
47364: PPUSH
47365: CALL_OW 259
47369: PUSH
47370: LD_VAR 0 5
47374: PPUSH
47375: CALL_OW 432
47379: MINUS
47380: GREATEREQUAL
47381: IFFALSE 47399
// mech := result [ i ] ;
47383: LD_ADDR_VAR 0 5
47387: PUSH
47388: LD_VAR 0 2
47392: PUSH
47393: LD_VAR 0 3
47397: ARRAY
47398: ST_TO_ADDR
// end ;
47399: GO 47308
47401: POP
47402: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47403: LD_VAR 0 1
47407: PPUSH
47408: LD_VAR 0 5
47412: PPUSH
47413: CALL_OW 135
// end ;
47417: LD_VAR 0 2
47421: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47422: LD_INT 0
47424: PPUSH
47425: PPUSH
47426: PPUSH
47427: PPUSH
47428: PPUSH
47429: PPUSH
47430: PPUSH
47431: PPUSH
47432: PPUSH
47433: PPUSH
47434: PPUSH
47435: PPUSH
47436: PPUSH
// result := [ ] ;
47437: LD_ADDR_VAR 0 7
47441: PUSH
47442: EMPTY
47443: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47444: LD_VAR 0 1
47448: PPUSH
47449: CALL_OW 266
47453: PUSH
47454: LD_INT 0
47456: PUSH
47457: LD_INT 1
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: IN
47464: NOT
47465: IFFALSE 47469
// exit ;
47467: GO 49103
// if name then
47469: LD_VAR 0 3
47473: IFFALSE 47489
// SetBName ( base_dep , name ) ;
47475: LD_VAR 0 1
47479: PPUSH
47480: LD_VAR 0 3
47484: PPUSH
47485: CALL_OW 500
// base := GetBase ( base_dep ) ;
47489: LD_ADDR_VAR 0 15
47493: PUSH
47494: LD_VAR 0 1
47498: PPUSH
47499: CALL_OW 274
47503: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47504: LD_ADDR_VAR 0 16
47508: PUSH
47509: LD_VAR 0 1
47513: PPUSH
47514: CALL_OW 255
47518: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47519: LD_ADDR_VAR 0 17
47523: PUSH
47524: LD_VAR 0 1
47528: PPUSH
47529: CALL_OW 248
47533: ST_TO_ADDR
// if sources then
47534: LD_VAR 0 5
47538: IFFALSE 47585
// for i = 1 to 3 do
47540: LD_ADDR_VAR 0 8
47544: PUSH
47545: DOUBLE
47546: LD_INT 1
47548: DEC
47549: ST_TO_ADDR
47550: LD_INT 3
47552: PUSH
47553: FOR_TO
47554: IFFALSE 47583
// AddResourceType ( base , i , sources [ i ] ) ;
47556: LD_VAR 0 15
47560: PPUSH
47561: LD_VAR 0 8
47565: PPUSH
47566: LD_VAR 0 5
47570: PUSH
47571: LD_VAR 0 8
47575: ARRAY
47576: PPUSH
47577: CALL_OW 276
47581: GO 47553
47583: POP
47584: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47585: LD_ADDR_VAR 0 18
47589: PUSH
47590: LD_VAR 0 15
47594: PPUSH
47595: LD_VAR 0 2
47599: PPUSH
47600: LD_INT 1
47602: PPUSH
47603: CALL 46846 0 3
47607: ST_TO_ADDR
// InitHc ;
47608: CALL_OW 19
// InitUc ;
47612: CALL_OW 18
// uc_side := side ;
47616: LD_ADDR_OWVAR 20
47620: PUSH
47621: LD_VAR 0 16
47625: ST_TO_ADDR
// uc_nation := nation ;
47626: LD_ADDR_OWVAR 21
47630: PUSH
47631: LD_VAR 0 17
47635: ST_TO_ADDR
// if buildings then
47636: LD_VAR 0 18
47640: IFFALSE 48962
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47642: LD_ADDR_VAR 0 19
47646: PUSH
47647: LD_VAR 0 18
47651: PPUSH
47652: LD_INT 2
47654: PUSH
47655: LD_INT 30
47657: PUSH
47658: LD_INT 29
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 30
47667: PUSH
47668: LD_INT 30
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: LIST
47679: PPUSH
47680: CALL_OW 72
47684: ST_TO_ADDR
// if tmp then
47685: LD_VAR 0 19
47689: IFFALSE 47737
// for i in tmp do
47691: LD_ADDR_VAR 0 8
47695: PUSH
47696: LD_VAR 0 19
47700: PUSH
47701: FOR_IN
47702: IFFALSE 47735
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47704: LD_VAR 0 8
47708: PPUSH
47709: CALL_OW 250
47713: PPUSH
47714: LD_VAR 0 8
47718: PPUSH
47719: CALL_OW 251
47723: PPUSH
47724: LD_VAR 0 16
47728: PPUSH
47729: CALL_OW 441
47733: GO 47701
47735: POP
47736: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47737: LD_VAR 0 18
47741: PPUSH
47742: LD_INT 2
47744: PUSH
47745: LD_INT 30
47747: PUSH
47748: LD_INT 32
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 30
47757: PUSH
47758: LD_INT 33
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: LIST
47769: PPUSH
47770: CALL_OW 72
47774: IFFALSE 47862
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47776: LD_ADDR_VAR 0 8
47780: PUSH
47781: LD_VAR 0 18
47785: PPUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 30
47791: PUSH
47792: LD_INT 32
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 30
47801: PUSH
47802: LD_INT 33
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: LIST
47813: PPUSH
47814: CALL_OW 72
47818: PUSH
47819: FOR_IN
47820: IFFALSE 47860
// begin if not GetBWeapon ( i ) then
47822: LD_VAR 0 8
47826: PPUSH
47827: CALL_OW 269
47831: NOT
47832: IFFALSE 47858
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47834: LD_VAR 0 8
47838: PPUSH
47839: LD_VAR 0 8
47843: PPUSH
47844: LD_VAR 0 2
47848: PPUSH
47849: CALL 49108 0 2
47853: PPUSH
47854: CALL_OW 431
// end ;
47858: GO 47819
47860: POP
47861: POP
// end ; for i = 1 to personel do
47862: LD_ADDR_VAR 0 8
47866: PUSH
47867: DOUBLE
47868: LD_INT 1
47870: DEC
47871: ST_TO_ADDR
47872: LD_VAR 0 6
47876: PUSH
47877: FOR_TO
47878: IFFALSE 48942
// begin if i > 4 then
47880: LD_VAR 0 8
47884: PUSH
47885: LD_INT 4
47887: GREATER
47888: IFFALSE 47892
// break ;
47890: GO 48942
// case i of 1 :
47892: LD_VAR 0 8
47896: PUSH
47897: LD_INT 1
47899: DOUBLE
47900: EQUAL
47901: IFTRUE 47905
47903: GO 47985
47905: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47906: LD_ADDR_VAR 0 12
47910: PUSH
47911: LD_VAR 0 18
47915: PPUSH
47916: LD_INT 22
47918: PUSH
47919: LD_VAR 0 16
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 58
47930: PUSH
47931: EMPTY
47932: LIST
47933: PUSH
47934: LD_INT 2
47936: PUSH
47937: LD_INT 30
47939: PUSH
47940: LD_INT 32
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 30
47949: PUSH
47950: LD_INT 4
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 30
47959: PUSH
47960: LD_INT 5
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: LIST
47977: PPUSH
47978: CALL_OW 72
47982: ST_TO_ADDR
47983: GO 48207
47985: LD_INT 2
47987: DOUBLE
47988: EQUAL
47989: IFTRUE 47993
47991: GO 48055
47993: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
47994: LD_ADDR_VAR 0 12
47998: PUSH
47999: LD_VAR 0 18
48003: PPUSH
48004: LD_INT 22
48006: PUSH
48007: LD_VAR 0 16
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: LD_INT 30
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 30
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: LIST
48043: PUSH
48044: EMPTY
48045: LIST
48046: LIST
48047: PPUSH
48048: CALL_OW 72
48052: ST_TO_ADDR
48053: GO 48207
48055: LD_INT 3
48057: DOUBLE
48058: EQUAL
48059: IFTRUE 48063
48061: GO 48125
48063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48064: LD_ADDR_VAR 0 12
48068: PUSH
48069: LD_VAR 0 18
48073: PPUSH
48074: LD_INT 22
48076: PUSH
48077: LD_VAR 0 16
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 2
48088: PUSH
48089: LD_INT 30
48091: PUSH
48092: LD_INT 2
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 30
48101: PUSH
48102: LD_INT 3
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: LIST
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PPUSH
48118: CALL_OW 72
48122: ST_TO_ADDR
48123: GO 48207
48125: LD_INT 4
48127: DOUBLE
48128: EQUAL
48129: IFTRUE 48133
48131: GO 48206
48133: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48134: LD_ADDR_VAR 0 12
48138: PUSH
48139: LD_VAR 0 18
48143: PPUSH
48144: LD_INT 22
48146: PUSH
48147: LD_VAR 0 16
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: LD_INT 30
48161: PUSH
48162: LD_INT 6
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 30
48171: PUSH
48172: LD_INT 7
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: PUSH
48179: LD_INT 30
48181: PUSH
48182: LD_INT 8
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PPUSH
48199: CALL_OW 72
48203: ST_TO_ADDR
48204: GO 48207
48206: POP
// if i = 1 then
48207: LD_VAR 0 8
48211: PUSH
48212: LD_INT 1
48214: EQUAL
48215: IFFALSE 48326
// begin tmp := [ ] ;
48217: LD_ADDR_VAR 0 19
48221: PUSH
48222: EMPTY
48223: ST_TO_ADDR
// for j in f do
48224: LD_ADDR_VAR 0 9
48228: PUSH
48229: LD_VAR 0 12
48233: PUSH
48234: FOR_IN
48235: IFFALSE 48308
// if GetBType ( j ) = b_bunker then
48237: LD_VAR 0 9
48241: PPUSH
48242: CALL_OW 266
48246: PUSH
48247: LD_INT 32
48249: EQUAL
48250: IFFALSE 48277
// tmp := Insert ( tmp , 1 , j ) else
48252: LD_ADDR_VAR 0 19
48256: PUSH
48257: LD_VAR 0 19
48261: PPUSH
48262: LD_INT 1
48264: PPUSH
48265: LD_VAR 0 9
48269: PPUSH
48270: CALL_OW 2
48274: ST_TO_ADDR
48275: GO 48306
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48277: LD_ADDR_VAR 0 19
48281: PUSH
48282: LD_VAR 0 19
48286: PPUSH
48287: LD_VAR 0 19
48291: PUSH
48292: LD_INT 1
48294: PLUS
48295: PPUSH
48296: LD_VAR 0 9
48300: PPUSH
48301: CALL_OW 2
48305: ST_TO_ADDR
48306: GO 48234
48308: POP
48309: POP
// if tmp then
48310: LD_VAR 0 19
48314: IFFALSE 48326
// f := tmp ;
48316: LD_ADDR_VAR 0 12
48320: PUSH
48321: LD_VAR 0 19
48325: ST_TO_ADDR
// end ; x := personel [ i ] ;
48326: LD_ADDR_VAR 0 13
48330: PUSH
48331: LD_VAR 0 6
48335: PUSH
48336: LD_VAR 0 8
48340: ARRAY
48341: ST_TO_ADDR
// if x = - 1 then
48342: LD_VAR 0 13
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: EQUAL
48351: IFFALSE 48560
// begin for j in f do
48353: LD_ADDR_VAR 0 9
48357: PUSH
48358: LD_VAR 0 12
48362: PUSH
48363: FOR_IN
48364: IFFALSE 48556
// repeat InitHc ;
48366: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48370: LD_VAR 0 9
48374: PPUSH
48375: CALL_OW 266
48379: PUSH
48380: LD_INT 5
48382: EQUAL
48383: IFFALSE 48453
// begin if UnitsInside ( j ) < 3 then
48385: LD_VAR 0 9
48389: PPUSH
48390: CALL_OW 313
48394: PUSH
48395: LD_INT 3
48397: LESS
48398: IFFALSE 48434
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48400: LD_INT 0
48402: PPUSH
48403: LD_INT 5
48405: PUSH
48406: LD_INT 8
48408: PUSH
48409: LD_INT 9
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: PUSH
48417: LD_VAR 0 17
48421: ARRAY
48422: PPUSH
48423: LD_VAR 0 4
48427: PPUSH
48428: CALL_OW 380
48432: GO 48451
// PrepareHuman ( false , i , skill ) ;
48434: LD_INT 0
48436: PPUSH
48437: LD_VAR 0 8
48441: PPUSH
48442: LD_VAR 0 4
48446: PPUSH
48447: CALL_OW 380
// end else
48451: GO 48470
// PrepareHuman ( false , i , skill ) ;
48453: LD_INT 0
48455: PPUSH
48456: LD_VAR 0 8
48460: PPUSH
48461: LD_VAR 0 4
48465: PPUSH
48466: CALL_OW 380
// un := CreateHuman ;
48470: LD_ADDR_VAR 0 14
48474: PUSH
48475: CALL_OW 44
48479: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48480: LD_ADDR_VAR 0 7
48484: PUSH
48485: LD_VAR 0 7
48489: PPUSH
48490: LD_INT 1
48492: PPUSH
48493: LD_VAR 0 14
48497: PPUSH
48498: CALL_OW 2
48502: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48503: LD_VAR 0 14
48507: PPUSH
48508: LD_VAR 0 9
48512: PPUSH
48513: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48517: LD_VAR 0 9
48521: PPUSH
48522: CALL_OW 313
48526: PUSH
48527: LD_INT 6
48529: EQUAL
48530: PUSH
48531: LD_VAR 0 9
48535: PPUSH
48536: CALL_OW 266
48540: PUSH
48541: LD_INT 32
48543: PUSH
48544: LD_INT 31
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: IN
48551: OR
48552: IFFALSE 48366
48554: GO 48363
48556: POP
48557: POP
// end else
48558: GO 48940
// for j = 1 to x do
48560: LD_ADDR_VAR 0 9
48564: PUSH
48565: DOUBLE
48566: LD_INT 1
48568: DEC
48569: ST_TO_ADDR
48570: LD_VAR 0 13
48574: PUSH
48575: FOR_TO
48576: IFFALSE 48938
// begin InitHc ;
48578: CALL_OW 19
// if not f then
48582: LD_VAR 0 12
48586: NOT
48587: IFFALSE 48676
// begin PrepareHuman ( false , i , skill ) ;
48589: LD_INT 0
48591: PPUSH
48592: LD_VAR 0 8
48596: PPUSH
48597: LD_VAR 0 4
48601: PPUSH
48602: CALL_OW 380
// un := CreateHuman ;
48606: LD_ADDR_VAR 0 14
48610: PUSH
48611: CALL_OW 44
48615: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48616: LD_ADDR_VAR 0 7
48620: PUSH
48621: LD_VAR 0 7
48625: PPUSH
48626: LD_INT 1
48628: PPUSH
48629: LD_VAR 0 14
48633: PPUSH
48634: CALL_OW 2
48638: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48639: LD_VAR 0 14
48643: PPUSH
48644: LD_VAR 0 1
48648: PPUSH
48649: CALL_OW 250
48653: PPUSH
48654: LD_VAR 0 1
48658: PPUSH
48659: CALL_OW 251
48663: PPUSH
48664: LD_INT 10
48666: PPUSH
48667: LD_INT 0
48669: PPUSH
48670: CALL_OW 50
// continue ;
48674: GO 48575
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48676: LD_VAR 0 12
48680: PUSH
48681: LD_INT 1
48683: ARRAY
48684: PPUSH
48685: CALL_OW 313
48689: PUSH
48690: LD_VAR 0 12
48694: PUSH
48695: LD_INT 1
48697: ARRAY
48698: PPUSH
48699: CALL_OW 266
48703: PUSH
48704: LD_INT 32
48706: PUSH
48707: LD_INT 31
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: IN
48714: AND
48715: PUSH
48716: LD_VAR 0 12
48720: PUSH
48721: LD_INT 1
48723: ARRAY
48724: PPUSH
48725: CALL_OW 313
48729: PUSH
48730: LD_INT 6
48732: EQUAL
48733: OR
48734: IFFALSE 48754
// f := Delete ( f , 1 ) ;
48736: LD_ADDR_VAR 0 12
48740: PUSH
48741: LD_VAR 0 12
48745: PPUSH
48746: LD_INT 1
48748: PPUSH
48749: CALL_OW 3
48753: ST_TO_ADDR
// if not f then
48754: LD_VAR 0 12
48758: NOT
48759: IFFALSE 48777
// begin x := x + 2 ;
48761: LD_ADDR_VAR 0 13
48765: PUSH
48766: LD_VAR 0 13
48770: PUSH
48771: LD_INT 2
48773: PLUS
48774: ST_TO_ADDR
// continue ;
48775: GO 48575
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48777: LD_VAR 0 12
48781: PUSH
48782: LD_INT 1
48784: ARRAY
48785: PPUSH
48786: CALL_OW 266
48790: PUSH
48791: LD_INT 5
48793: EQUAL
48794: IFFALSE 48868
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48796: LD_VAR 0 12
48800: PUSH
48801: LD_INT 1
48803: ARRAY
48804: PPUSH
48805: CALL_OW 313
48809: PUSH
48810: LD_INT 3
48812: LESS
48813: IFFALSE 48849
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48815: LD_INT 0
48817: PPUSH
48818: LD_INT 5
48820: PUSH
48821: LD_INT 8
48823: PUSH
48824: LD_INT 9
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: LIST
48831: PUSH
48832: LD_VAR 0 17
48836: ARRAY
48837: PPUSH
48838: LD_VAR 0 4
48842: PPUSH
48843: CALL_OW 380
48847: GO 48866
// PrepareHuman ( false , i , skill ) ;
48849: LD_INT 0
48851: PPUSH
48852: LD_VAR 0 8
48856: PPUSH
48857: LD_VAR 0 4
48861: PPUSH
48862: CALL_OW 380
// end else
48866: GO 48885
// PrepareHuman ( false , i , skill ) ;
48868: LD_INT 0
48870: PPUSH
48871: LD_VAR 0 8
48875: PPUSH
48876: LD_VAR 0 4
48880: PPUSH
48881: CALL_OW 380
// un := CreateHuman ;
48885: LD_ADDR_VAR 0 14
48889: PUSH
48890: CALL_OW 44
48894: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48895: LD_ADDR_VAR 0 7
48899: PUSH
48900: LD_VAR 0 7
48904: PPUSH
48905: LD_INT 1
48907: PPUSH
48908: LD_VAR 0 14
48912: PPUSH
48913: CALL_OW 2
48917: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48918: LD_VAR 0 14
48922: PPUSH
48923: LD_VAR 0 12
48927: PUSH
48928: LD_INT 1
48930: ARRAY
48931: PPUSH
48932: CALL_OW 52
// end ;
48936: GO 48575
48938: POP
48939: POP
// end ;
48940: GO 47877
48942: POP
48943: POP
// result := result ^ buildings ;
48944: LD_ADDR_VAR 0 7
48948: PUSH
48949: LD_VAR 0 7
48953: PUSH
48954: LD_VAR 0 18
48958: ADD
48959: ST_TO_ADDR
// end else
48960: GO 49103
// begin for i = 1 to personel do
48962: LD_ADDR_VAR 0 8
48966: PUSH
48967: DOUBLE
48968: LD_INT 1
48970: DEC
48971: ST_TO_ADDR
48972: LD_VAR 0 6
48976: PUSH
48977: FOR_TO
48978: IFFALSE 49101
// begin if i > 4 then
48980: LD_VAR 0 8
48984: PUSH
48985: LD_INT 4
48987: GREATER
48988: IFFALSE 48992
// break ;
48990: GO 49101
// x := personel [ i ] ;
48992: LD_ADDR_VAR 0 13
48996: PUSH
48997: LD_VAR 0 6
49001: PUSH
49002: LD_VAR 0 8
49006: ARRAY
49007: ST_TO_ADDR
// if x = - 1 then
49008: LD_VAR 0 13
49012: PUSH
49013: LD_INT 1
49015: NEG
49016: EQUAL
49017: IFFALSE 49021
// continue ;
49019: GO 48977
// PrepareHuman ( false , i , skill ) ;
49021: LD_INT 0
49023: PPUSH
49024: LD_VAR 0 8
49028: PPUSH
49029: LD_VAR 0 4
49033: PPUSH
49034: CALL_OW 380
// un := CreateHuman ;
49038: LD_ADDR_VAR 0 14
49042: PUSH
49043: CALL_OW 44
49047: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49048: LD_VAR 0 14
49052: PPUSH
49053: LD_VAR 0 1
49057: PPUSH
49058: CALL_OW 250
49062: PPUSH
49063: LD_VAR 0 1
49067: PPUSH
49068: CALL_OW 251
49072: PPUSH
49073: LD_INT 10
49075: PPUSH
49076: LD_INT 0
49078: PPUSH
49079: CALL_OW 50
// result := result ^ un ;
49083: LD_ADDR_VAR 0 7
49087: PUSH
49088: LD_VAR 0 7
49092: PUSH
49093: LD_VAR 0 14
49097: ADD
49098: ST_TO_ADDR
// end ;
49099: GO 48977
49101: POP
49102: POP
// end ; end ;
49103: LD_VAR 0 7
49107: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49108: LD_INT 0
49110: PPUSH
49111: PPUSH
49112: PPUSH
49113: PPUSH
49114: PPUSH
49115: PPUSH
49116: PPUSH
49117: PPUSH
49118: PPUSH
49119: PPUSH
49120: PPUSH
49121: PPUSH
49122: PPUSH
49123: PPUSH
49124: PPUSH
49125: PPUSH
// result := false ;
49126: LD_ADDR_VAR 0 3
49130: PUSH
49131: LD_INT 0
49133: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49134: LD_VAR 0 1
49138: NOT
49139: PUSH
49140: LD_VAR 0 1
49144: PPUSH
49145: CALL_OW 266
49149: PUSH
49150: LD_INT 32
49152: PUSH
49153: LD_INT 33
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: IN
49160: NOT
49161: OR
49162: IFFALSE 49166
// exit ;
49164: GO 50275
// nat := GetNation ( tower ) ;
49166: LD_ADDR_VAR 0 12
49170: PUSH
49171: LD_VAR 0 1
49175: PPUSH
49176: CALL_OW 248
49180: ST_TO_ADDR
// side := GetSide ( tower ) ;
49181: LD_ADDR_VAR 0 16
49185: PUSH
49186: LD_VAR 0 1
49190: PPUSH
49191: CALL_OW 255
49195: ST_TO_ADDR
// x := GetX ( tower ) ;
49196: LD_ADDR_VAR 0 10
49200: PUSH
49201: LD_VAR 0 1
49205: PPUSH
49206: CALL_OW 250
49210: ST_TO_ADDR
// y := GetY ( tower ) ;
49211: LD_ADDR_VAR 0 11
49215: PUSH
49216: LD_VAR 0 1
49220: PPUSH
49221: CALL_OW 251
49225: ST_TO_ADDR
// if not x or not y then
49226: LD_VAR 0 10
49230: NOT
49231: PUSH
49232: LD_VAR 0 11
49236: NOT
49237: OR
49238: IFFALSE 49242
// exit ;
49240: GO 50275
// weapon := 0 ;
49242: LD_ADDR_VAR 0 18
49246: PUSH
49247: LD_INT 0
49249: ST_TO_ADDR
// fac_list := [ ] ;
49250: LD_ADDR_VAR 0 17
49254: PUSH
49255: EMPTY
49256: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49257: LD_ADDR_VAR 0 6
49261: PUSH
49262: LD_VAR 0 1
49266: PPUSH
49267: CALL_OW 274
49271: PPUSH
49272: LD_VAR 0 2
49276: PPUSH
49277: LD_INT 0
49279: PPUSH
49280: CALL 46846 0 3
49284: PPUSH
49285: LD_INT 30
49287: PUSH
49288: LD_INT 3
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PPUSH
49295: CALL_OW 72
49299: ST_TO_ADDR
// if not factories then
49300: LD_VAR 0 6
49304: NOT
49305: IFFALSE 49309
// exit ;
49307: GO 50275
// for i in factories do
49309: LD_ADDR_VAR 0 8
49313: PUSH
49314: LD_VAR 0 6
49318: PUSH
49319: FOR_IN
49320: IFFALSE 49345
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49322: LD_ADDR_VAR 0 17
49326: PUSH
49327: LD_VAR 0 17
49331: PUSH
49332: LD_VAR 0 8
49336: PPUSH
49337: CALL_OW 478
49341: UNION
49342: ST_TO_ADDR
49343: GO 49319
49345: POP
49346: POP
// if not fac_list then
49347: LD_VAR 0 17
49351: NOT
49352: IFFALSE 49356
// exit ;
49354: GO 50275
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49356: LD_ADDR_VAR 0 5
49360: PUSH
49361: LD_INT 4
49363: PUSH
49364: LD_INT 5
49366: PUSH
49367: LD_INT 9
49369: PUSH
49370: LD_INT 10
49372: PUSH
49373: LD_INT 6
49375: PUSH
49376: LD_INT 7
49378: PUSH
49379: LD_INT 11
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 27
49393: PUSH
49394: LD_INT 28
49396: PUSH
49397: LD_INT 26
49399: PUSH
49400: LD_INT 30
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: PUSH
49409: LD_INT 43
49411: PUSH
49412: LD_INT 44
49414: PUSH
49415: LD_INT 46
49417: PUSH
49418: LD_INT 45
49420: PUSH
49421: LD_INT 47
49423: PUSH
49424: LD_INT 49
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: LIST
49439: PUSH
49440: LD_VAR 0 12
49444: ARRAY
49445: ST_TO_ADDR
// list := list isect fac_list ;
49446: LD_ADDR_VAR 0 5
49450: PUSH
49451: LD_VAR 0 5
49455: PUSH
49456: LD_VAR 0 17
49460: ISECT
49461: ST_TO_ADDR
// if not list then
49462: LD_VAR 0 5
49466: NOT
49467: IFFALSE 49471
// exit ;
49469: GO 50275
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49471: LD_VAR 0 12
49475: PUSH
49476: LD_INT 3
49478: EQUAL
49479: PUSH
49480: LD_INT 49
49482: PUSH
49483: LD_VAR 0 5
49487: IN
49488: AND
49489: PUSH
49490: LD_INT 31
49492: PPUSH
49493: LD_VAR 0 16
49497: PPUSH
49498: CALL_OW 321
49502: PUSH
49503: LD_INT 2
49505: EQUAL
49506: AND
49507: IFFALSE 49567
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49509: LD_INT 22
49511: PUSH
49512: LD_VAR 0 16
49516: PUSH
49517: EMPTY
49518: LIST
49519: LIST
49520: PUSH
49521: LD_INT 35
49523: PUSH
49524: LD_INT 49
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 91
49533: PUSH
49534: LD_VAR 0 1
49538: PUSH
49539: LD_INT 10
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: LIST
49551: PPUSH
49552: CALL_OW 69
49556: NOT
49557: IFFALSE 49567
// weapon := ru_time_lapser ;
49559: LD_ADDR_VAR 0 18
49563: PUSH
49564: LD_INT 49
49566: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49567: LD_VAR 0 12
49571: PUSH
49572: LD_INT 1
49574: PUSH
49575: LD_INT 2
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: IN
49582: PUSH
49583: LD_INT 11
49585: PUSH
49586: LD_VAR 0 5
49590: IN
49591: PUSH
49592: LD_INT 30
49594: PUSH
49595: LD_VAR 0 5
49599: IN
49600: OR
49601: AND
49602: PUSH
49603: LD_INT 6
49605: PPUSH
49606: LD_VAR 0 16
49610: PPUSH
49611: CALL_OW 321
49615: PUSH
49616: LD_INT 2
49618: EQUAL
49619: AND
49620: IFFALSE 49785
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49622: LD_INT 22
49624: PUSH
49625: LD_VAR 0 16
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 35
49639: PUSH
49640: LD_INT 11
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 35
49649: PUSH
49650: LD_INT 30
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 91
49664: PUSH
49665: LD_VAR 0 1
49669: PUSH
49670: LD_INT 18
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: LIST
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: LIST
49682: PPUSH
49683: CALL_OW 69
49687: NOT
49688: PUSH
49689: LD_INT 22
49691: PUSH
49692: LD_VAR 0 16
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 30
49706: PUSH
49707: LD_INT 32
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 30
49716: PUSH
49717: LD_INT 33
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 91
49731: PUSH
49732: LD_VAR 0 1
49736: PUSH
49737: LD_INT 12
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: LIST
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: LIST
49749: PUSH
49750: EMPTY
49751: LIST
49752: PPUSH
49753: CALL_OW 69
49757: PUSH
49758: LD_INT 2
49760: GREATER
49761: AND
49762: IFFALSE 49785
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49764: LD_ADDR_VAR 0 18
49768: PUSH
49769: LD_INT 11
49771: PUSH
49772: LD_INT 30
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_VAR 0 12
49783: ARRAY
49784: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49785: LD_VAR 0 18
49789: NOT
49790: PUSH
49791: LD_INT 40
49793: PPUSH
49794: LD_VAR 0 16
49798: PPUSH
49799: CALL_OW 321
49803: PUSH
49804: LD_INT 2
49806: EQUAL
49807: AND
49808: PUSH
49809: LD_INT 7
49811: PUSH
49812: LD_VAR 0 5
49816: IN
49817: PUSH
49818: LD_INT 28
49820: PUSH
49821: LD_VAR 0 5
49825: IN
49826: OR
49827: PUSH
49828: LD_INT 45
49830: PUSH
49831: LD_VAR 0 5
49835: IN
49836: OR
49837: AND
49838: IFFALSE 50092
// begin hex := GetHexInfo ( x , y ) ;
49840: LD_ADDR_VAR 0 4
49844: PUSH
49845: LD_VAR 0 10
49849: PPUSH
49850: LD_VAR 0 11
49854: PPUSH
49855: CALL_OW 546
49859: ST_TO_ADDR
// if hex [ 1 ] then
49860: LD_VAR 0 4
49864: PUSH
49865: LD_INT 1
49867: ARRAY
49868: IFFALSE 49872
// exit ;
49870: GO 50275
// height := hex [ 2 ] ;
49872: LD_ADDR_VAR 0 15
49876: PUSH
49877: LD_VAR 0 4
49881: PUSH
49882: LD_INT 2
49884: ARRAY
49885: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49886: LD_ADDR_VAR 0 14
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: LD_INT 3
49899: PUSH
49900: LD_INT 5
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: ST_TO_ADDR
// for i in tmp do
49909: LD_ADDR_VAR 0 8
49913: PUSH
49914: LD_VAR 0 14
49918: PUSH
49919: FOR_IN
49920: IFFALSE 50090
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49922: LD_ADDR_VAR 0 9
49926: PUSH
49927: LD_VAR 0 10
49931: PPUSH
49932: LD_VAR 0 8
49936: PPUSH
49937: LD_INT 5
49939: PPUSH
49940: CALL_OW 272
49944: PUSH
49945: LD_VAR 0 11
49949: PPUSH
49950: LD_VAR 0 8
49954: PPUSH
49955: LD_INT 5
49957: PPUSH
49958: CALL_OW 273
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49967: LD_VAR 0 9
49971: PUSH
49972: LD_INT 1
49974: ARRAY
49975: PPUSH
49976: LD_VAR 0 9
49980: PUSH
49981: LD_INT 2
49983: ARRAY
49984: PPUSH
49985: CALL_OW 488
49989: IFFALSE 50088
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
49991: LD_ADDR_VAR 0 4
49995: PUSH
49996: LD_VAR 0 9
50000: PUSH
50001: LD_INT 1
50003: ARRAY
50004: PPUSH
50005: LD_VAR 0 9
50009: PUSH
50010: LD_INT 2
50012: ARRAY
50013: PPUSH
50014: CALL_OW 546
50018: ST_TO_ADDR
// if hex [ 1 ] then
50019: LD_VAR 0 4
50023: PUSH
50024: LD_INT 1
50026: ARRAY
50027: IFFALSE 50031
// continue ;
50029: GO 49919
// h := hex [ 2 ] ;
50031: LD_ADDR_VAR 0 13
50035: PUSH
50036: LD_VAR 0 4
50040: PUSH
50041: LD_INT 2
50043: ARRAY
50044: ST_TO_ADDR
// if h + 7 < height then
50045: LD_VAR 0 13
50049: PUSH
50050: LD_INT 7
50052: PLUS
50053: PUSH
50054: LD_VAR 0 15
50058: LESS
50059: IFFALSE 50088
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50061: LD_ADDR_VAR 0 18
50065: PUSH
50066: LD_INT 7
50068: PUSH
50069: LD_INT 28
50071: PUSH
50072: LD_INT 45
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: LIST
50079: PUSH
50080: LD_VAR 0 12
50084: ARRAY
50085: ST_TO_ADDR
// break ;
50086: GO 50090
// end ; end ; end ;
50088: GO 49919
50090: POP
50091: POP
// end ; if not weapon then
50092: LD_VAR 0 18
50096: NOT
50097: IFFALSE 50157
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50099: LD_ADDR_VAR 0 5
50103: PUSH
50104: LD_VAR 0 5
50108: PUSH
50109: LD_INT 11
50111: PUSH
50112: LD_INT 30
50114: PUSH
50115: LD_INT 49
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: LIST
50122: DIFF
50123: ST_TO_ADDR
// if not list then
50124: LD_VAR 0 5
50128: NOT
50129: IFFALSE 50133
// exit ;
50131: GO 50275
// weapon := list [ rand ( 1 , list ) ] ;
50133: LD_ADDR_VAR 0 18
50137: PUSH
50138: LD_VAR 0 5
50142: PUSH
50143: LD_INT 1
50145: PPUSH
50146: LD_VAR 0 5
50150: PPUSH
50151: CALL_OW 12
50155: ARRAY
50156: ST_TO_ADDR
// end ; if weapon then
50157: LD_VAR 0 18
50161: IFFALSE 50275
// begin tmp := CostOfWeapon ( weapon ) ;
50163: LD_ADDR_VAR 0 14
50167: PUSH
50168: LD_VAR 0 18
50172: PPUSH
50173: CALL_OW 451
50177: ST_TO_ADDR
// j := GetBase ( tower ) ;
50178: LD_ADDR_VAR 0 9
50182: PUSH
50183: LD_VAR 0 1
50187: PPUSH
50188: CALL_OW 274
50192: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50193: LD_VAR 0 9
50197: PPUSH
50198: LD_INT 1
50200: PPUSH
50201: CALL_OW 275
50205: PUSH
50206: LD_VAR 0 14
50210: PUSH
50211: LD_INT 1
50213: ARRAY
50214: GREATEREQUAL
50215: PUSH
50216: LD_VAR 0 9
50220: PPUSH
50221: LD_INT 2
50223: PPUSH
50224: CALL_OW 275
50228: PUSH
50229: LD_VAR 0 14
50233: PUSH
50234: LD_INT 2
50236: ARRAY
50237: GREATEREQUAL
50238: AND
50239: PUSH
50240: LD_VAR 0 9
50244: PPUSH
50245: LD_INT 3
50247: PPUSH
50248: CALL_OW 275
50252: PUSH
50253: LD_VAR 0 14
50257: PUSH
50258: LD_INT 3
50260: ARRAY
50261: GREATEREQUAL
50262: AND
50263: IFFALSE 50275
// result := weapon ;
50265: LD_ADDR_VAR 0 3
50269: PUSH
50270: LD_VAR 0 18
50274: ST_TO_ADDR
// end ; end ;
50275: LD_VAR 0 3
50279: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50280: LD_INT 0
50282: PPUSH
50283: PPUSH
// result := true ;
50284: LD_ADDR_VAR 0 3
50288: PUSH
50289: LD_INT 1
50291: ST_TO_ADDR
// if array1 = array2 then
50292: LD_VAR 0 1
50296: PUSH
50297: LD_VAR 0 2
50301: EQUAL
50302: IFFALSE 50362
// begin for i = 1 to array1 do
50304: LD_ADDR_VAR 0 4
50308: PUSH
50309: DOUBLE
50310: LD_INT 1
50312: DEC
50313: ST_TO_ADDR
50314: LD_VAR 0 1
50318: PUSH
50319: FOR_TO
50320: IFFALSE 50358
// if array1 [ i ] <> array2 [ i ] then
50322: LD_VAR 0 1
50326: PUSH
50327: LD_VAR 0 4
50331: ARRAY
50332: PUSH
50333: LD_VAR 0 2
50337: PUSH
50338: LD_VAR 0 4
50342: ARRAY
50343: NONEQUAL
50344: IFFALSE 50356
// begin result := false ;
50346: LD_ADDR_VAR 0 3
50350: PUSH
50351: LD_INT 0
50353: ST_TO_ADDR
// break ;
50354: GO 50358
// end ;
50356: GO 50319
50358: POP
50359: POP
// end else
50360: GO 50370
// result := false ;
50362: LD_ADDR_VAR 0 3
50366: PUSH
50367: LD_INT 0
50369: ST_TO_ADDR
// end ;
50370: LD_VAR 0 3
50374: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50375: LD_INT 0
50377: PPUSH
50378: PPUSH
// if not array1 or not array2 then
50379: LD_VAR 0 1
50383: NOT
50384: PUSH
50385: LD_VAR 0 2
50389: NOT
50390: OR
50391: IFFALSE 50395
// exit ;
50393: GO 50459
// result := true ;
50395: LD_ADDR_VAR 0 3
50399: PUSH
50400: LD_INT 1
50402: ST_TO_ADDR
// for i = 1 to array1 do
50403: LD_ADDR_VAR 0 4
50407: PUSH
50408: DOUBLE
50409: LD_INT 1
50411: DEC
50412: ST_TO_ADDR
50413: LD_VAR 0 1
50417: PUSH
50418: FOR_TO
50419: IFFALSE 50457
// if array1 [ i ] <> array2 [ i ] then
50421: LD_VAR 0 1
50425: PUSH
50426: LD_VAR 0 4
50430: ARRAY
50431: PUSH
50432: LD_VAR 0 2
50436: PUSH
50437: LD_VAR 0 4
50441: ARRAY
50442: NONEQUAL
50443: IFFALSE 50455
// begin result := false ;
50445: LD_ADDR_VAR 0 3
50449: PUSH
50450: LD_INT 0
50452: ST_TO_ADDR
// break ;
50453: GO 50457
// end ;
50455: GO 50418
50457: POP
50458: POP
// end ;
50459: LD_VAR 0 3
50463: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50464: LD_INT 0
50466: PPUSH
50467: PPUSH
50468: PPUSH
// pom := GetBase ( fac ) ;
50469: LD_ADDR_VAR 0 5
50473: PUSH
50474: LD_VAR 0 1
50478: PPUSH
50479: CALL_OW 274
50483: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50484: LD_ADDR_VAR 0 4
50488: PUSH
50489: LD_VAR 0 2
50493: PUSH
50494: LD_INT 1
50496: ARRAY
50497: PPUSH
50498: LD_VAR 0 2
50502: PUSH
50503: LD_INT 2
50505: ARRAY
50506: PPUSH
50507: LD_VAR 0 2
50511: PUSH
50512: LD_INT 3
50514: ARRAY
50515: PPUSH
50516: LD_VAR 0 2
50520: PUSH
50521: LD_INT 4
50523: ARRAY
50524: PPUSH
50525: CALL_OW 449
50529: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50530: LD_ADDR_VAR 0 3
50534: PUSH
50535: LD_VAR 0 5
50539: PPUSH
50540: LD_INT 1
50542: PPUSH
50543: CALL_OW 275
50547: PUSH
50548: LD_VAR 0 4
50552: PUSH
50553: LD_INT 1
50555: ARRAY
50556: GREATEREQUAL
50557: PUSH
50558: LD_VAR 0 5
50562: PPUSH
50563: LD_INT 2
50565: PPUSH
50566: CALL_OW 275
50570: PUSH
50571: LD_VAR 0 4
50575: PUSH
50576: LD_INT 2
50578: ARRAY
50579: GREATEREQUAL
50580: AND
50581: PUSH
50582: LD_VAR 0 5
50586: PPUSH
50587: LD_INT 3
50589: PPUSH
50590: CALL_OW 275
50594: PUSH
50595: LD_VAR 0 4
50599: PUSH
50600: LD_INT 3
50602: ARRAY
50603: GREATEREQUAL
50604: AND
50605: ST_TO_ADDR
// end ;
50606: LD_VAR 0 3
50610: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50611: LD_INT 0
50613: PPUSH
50614: PPUSH
50615: PPUSH
50616: PPUSH
// pom := GetBase ( building ) ;
50617: LD_ADDR_VAR 0 3
50621: PUSH
50622: LD_VAR 0 1
50626: PPUSH
50627: CALL_OW 274
50631: ST_TO_ADDR
// if not pom then
50632: LD_VAR 0 3
50636: NOT
50637: IFFALSE 50641
// exit ;
50639: GO 50811
// btype := GetBType ( building ) ;
50641: LD_ADDR_VAR 0 5
50645: PUSH
50646: LD_VAR 0 1
50650: PPUSH
50651: CALL_OW 266
50655: ST_TO_ADDR
// if btype = b_armoury then
50656: LD_VAR 0 5
50660: PUSH
50661: LD_INT 4
50663: EQUAL
50664: IFFALSE 50674
// btype := b_barracks ;
50666: LD_ADDR_VAR 0 5
50670: PUSH
50671: LD_INT 5
50673: ST_TO_ADDR
// if btype = b_depot then
50674: LD_VAR 0 5
50678: PUSH
50679: LD_INT 0
50681: EQUAL
50682: IFFALSE 50692
// btype := b_warehouse ;
50684: LD_ADDR_VAR 0 5
50688: PUSH
50689: LD_INT 1
50691: ST_TO_ADDR
// if btype = b_workshop then
50692: LD_VAR 0 5
50696: PUSH
50697: LD_INT 2
50699: EQUAL
50700: IFFALSE 50710
// btype := b_factory ;
50702: LD_ADDR_VAR 0 5
50706: PUSH
50707: LD_INT 3
50709: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50710: LD_ADDR_VAR 0 4
50714: PUSH
50715: LD_VAR 0 5
50719: PPUSH
50720: LD_VAR 0 1
50724: PPUSH
50725: CALL_OW 248
50729: PPUSH
50730: CALL_OW 450
50734: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50735: LD_ADDR_VAR 0 2
50739: PUSH
50740: LD_VAR 0 3
50744: PPUSH
50745: LD_INT 1
50747: PPUSH
50748: CALL_OW 275
50752: PUSH
50753: LD_VAR 0 4
50757: PUSH
50758: LD_INT 1
50760: ARRAY
50761: GREATEREQUAL
50762: PUSH
50763: LD_VAR 0 3
50767: PPUSH
50768: LD_INT 2
50770: PPUSH
50771: CALL_OW 275
50775: PUSH
50776: LD_VAR 0 4
50780: PUSH
50781: LD_INT 2
50783: ARRAY
50784: GREATEREQUAL
50785: AND
50786: PUSH
50787: LD_VAR 0 3
50791: PPUSH
50792: LD_INT 3
50794: PPUSH
50795: CALL_OW 275
50799: PUSH
50800: LD_VAR 0 4
50804: PUSH
50805: LD_INT 3
50807: ARRAY
50808: GREATEREQUAL
50809: AND
50810: ST_TO_ADDR
// end ;
50811: LD_VAR 0 2
50815: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50816: LD_INT 0
50818: PPUSH
50819: PPUSH
50820: PPUSH
// pom := GetBase ( building ) ;
50821: LD_ADDR_VAR 0 4
50825: PUSH
50826: LD_VAR 0 1
50830: PPUSH
50831: CALL_OW 274
50835: ST_TO_ADDR
// if not pom then
50836: LD_VAR 0 4
50840: NOT
50841: IFFALSE 50845
// exit ;
50843: GO 50946
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50845: LD_ADDR_VAR 0 5
50849: PUSH
50850: LD_VAR 0 2
50854: PPUSH
50855: LD_VAR 0 1
50859: PPUSH
50860: CALL_OW 248
50864: PPUSH
50865: CALL_OW 450
50869: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50870: LD_ADDR_VAR 0 3
50874: PUSH
50875: LD_VAR 0 4
50879: PPUSH
50880: LD_INT 1
50882: PPUSH
50883: CALL_OW 275
50887: PUSH
50888: LD_VAR 0 5
50892: PUSH
50893: LD_INT 1
50895: ARRAY
50896: GREATEREQUAL
50897: PUSH
50898: LD_VAR 0 4
50902: PPUSH
50903: LD_INT 2
50905: PPUSH
50906: CALL_OW 275
50910: PUSH
50911: LD_VAR 0 5
50915: PUSH
50916: LD_INT 2
50918: ARRAY
50919: GREATEREQUAL
50920: AND
50921: PUSH
50922: LD_VAR 0 4
50926: PPUSH
50927: LD_INT 3
50929: PPUSH
50930: CALL_OW 275
50934: PUSH
50935: LD_VAR 0 5
50939: PUSH
50940: LD_INT 3
50942: ARRAY
50943: GREATEREQUAL
50944: AND
50945: ST_TO_ADDR
// end ;
50946: LD_VAR 0 3
50950: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50951: LD_INT 0
50953: PPUSH
50954: PPUSH
50955: PPUSH
50956: PPUSH
50957: PPUSH
50958: PPUSH
50959: PPUSH
50960: PPUSH
50961: PPUSH
50962: PPUSH
50963: PPUSH
// result := false ;
50964: LD_ADDR_VAR 0 8
50968: PUSH
50969: LD_INT 0
50971: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50972: LD_VAR 0 5
50976: NOT
50977: PUSH
50978: LD_VAR 0 1
50982: NOT
50983: OR
50984: PUSH
50985: LD_VAR 0 2
50989: NOT
50990: OR
50991: PUSH
50992: LD_VAR 0 3
50996: NOT
50997: OR
50998: IFFALSE 51002
// exit ;
51000: GO 51816
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51002: LD_ADDR_VAR 0 14
51006: PUSH
51007: LD_VAR 0 1
51011: PPUSH
51012: LD_VAR 0 2
51016: PPUSH
51017: LD_VAR 0 3
51021: PPUSH
51022: LD_VAR 0 4
51026: PPUSH
51027: LD_VAR 0 5
51031: PUSH
51032: LD_INT 1
51034: ARRAY
51035: PPUSH
51036: CALL_OW 248
51040: PPUSH
51041: LD_INT 0
51043: PPUSH
51044: CALL 53069 0 6
51048: ST_TO_ADDR
// if not hexes then
51049: LD_VAR 0 14
51053: NOT
51054: IFFALSE 51058
// exit ;
51056: GO 51816
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51058: LD_ADDR_VAR 0 17
51062: PUSH
51063: LD_VAR 0 5
51067: PPUSH
51068: LD_INT 22
51070: PUSH
51071: LD_VAR 0 13
51075: PPUSH
51076: CALL_OW 255
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: LD_INT 30
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 30
51100: PUSH
51101: LD_INT 1
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: LIST
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PPUSH
51117: CALL_OW 72
51121: ST_TO_ADDR
// for i = 1 to hexes do
51122: LD_ADDR_VAR 0 9
51126: PUSH
51127: DOUBLE
51128: LD_INT 1
51130: DEC
51131: ST_TO_ADDR
51132: LD_VAR 0 14
51136: PUSH
51137: FOR_TO
51138: IFFALSE 51814
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51140: LD_ADDR_VAR 0 13
51144: PUSH
51145: LD_VAR 0 14
51149: PUSH
51150: LD_VAR 0 9
51154: ARRAY
51155: PUSH
51156: LD_INT 1
51158: ARRAY
51159: PPUSH
51160: LD_VAR 0 14
51164: PUSH
51165: LD_VAR 0 9
51169: ARRAY
51170: PUSH
51171: LD_INT 2
51173: ARRAY
51174: PPUSH
51175: CALL_OW 428
51179: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51180: LD_VAR 0 14
51184: PUSH
51185: LD_VAR 0 9
51189: ARRAY
51190: PUSH
51191: LD_INT 1
51193: ARRAY
51194: PPUSH
51195: LD_VAR 0 14
51199: PUSH
51200: LD_VAR 0 9
51204: ARRAY
51205: PUSH
51206: LD_INT 2
51208: ARRAY
51209: PPUSH
51210: CALL_OW 351
51214: PUSH
51215: LD_VAR 0 14
51219: PUSH
51220: LD_VAR 0 9
51224: ARRAY
51225: PUSH
51226: LD_INT 1
51228: ARRAY
51229: PPUSH
51230: LD_VAR 0 14
51234: PUSH
51235: LD_VAR 0 9
51239: ARRAY
51240: PUSH
51241: LD_INT 2
51243: ARRAY
51244: PPUSH
51245: CALL_OW 488
51249: NOT
51250: OR
51251: PUSH
51252: LD_VAR 0 13
51256: PPUSH
51257: CALL_OW 247
51261: PUSH
51262: LD_INT 3
51264: EQUAL
51265: OR
51266: IFFALSE 51272
// exit ;
51268: POP
51269: POP
51270: GO 51816
// if not tmp then
51272: LD_VAR 0 13
51276: NOT
51277: IFFALSE 51281
// continue ;
51279: GO 51137
// result := true ;
51281: LD_ADDR_VAR 0 8
51285: PUSH
51286: LD_INT 1
51288: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51289: LD_VAR 0 6
51293: PUSH
51294: LD_VAR 0 13
51298: PPUSH
51299: CALL_OW 247
51303: PUSH
51304: LD_INT 2
51306: EQUAL
51307: AND
51308: PUSH
51309: LD_VAR 0 13
51313: PPUSH
51314: CALL_OW 263
51318: PUSH
51319: LD_INT 1
51321: EQUAL
51322: AND
51323: IFFALSE 51487
// begin if IsDrivenBy ( tmp ) then
51325: LD_VAR 0 13
51329: PPUSH
51330: CALL_OW 311
51334: IFFALSE 51338
// continue ;
51336: GO 51137
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51338: LD_VAR 0 6
51342: PPUSH
51343: LD_INT 3
51345: PUSH
51346: LD_INT 60
51348: PUSH
51349: EMPTY
51350: LIST
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 3
51358: PUSH
51359: LD_INT 55
51361: PUSH
51362: EMPTY
51363: LIST
51364: PUSH
51365: EMPTY
51366: LIST
51367: LIST
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PPUSH
51373: CALL_OW 72
51377: IFFALSE 51485
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51379: LD_ADDR_VAR 0 18
51383: PUSH
51384: LD_VAR 0 6
51388: PPUSH
51389: LD_INT 3
51391: PUSH
51392: LD_INT 60
51394: PUSH
51395: EMPTY
51396: LIST
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 3
51404: PUSH
51405: LD_INT 55
51407: PUSH
51408: EMPTY
51409: LIST
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PPUSH
51419: CALL_OW 72
51423: PUSH
51424: LD_INT 1
51426: ARRAY
51427: ST_TO_ADDR
// if IsInUnit ( driver ) then
51428: LD_VAR 0 18
51432: PPUSH
51433: CALL_OW 310
51437: IFFALSE 51448
// ComExit ( driver ) ;
51439: LD_VAR 0 18
51443: PPUSH
51444: CALL 76848 0 1
// AddComEnterUnit ( driver , tmp ) ;
51448: LD_VAR 0 18
51452: PPUSH
51453: LD_VAR 0 13
51457: PPUSH
51458: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51462: LD_VAR 0 18
51466: PPUSH
51467: LD_VAR 0 7
51471: PPUSH
51472: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51476: LD_VAR 0 18
51480: PPUSH
51481: CALL_OW 181
// end ; continue ;
51485: GO 51137
// end ; if not cleaners or not tmp in cleaners then
51487: LD_VAR 0 6
51491: NOT
51492: PUSH
51493: LD_VAR 0 13
51497: PUSH
51498: LD_VAR 0 6
51502: IN
51503: NOT
51504: OR
51505: IFFALSE 51812
// begin if dep then
51507: LD_VAR 0 17
51511: IFFALSE 51647
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51513: LD_ADDR_VAR 0 16
51517: PUSH
51518: LD_VAR 0 17
51522: PUSH
51523: LD_INT 1
51525: ARRAY
51526: PPUSH
51527: CALL_OW 250
51531: PPUSH
51532: LD_VAR 0 17
51536: PUSH
51537: LD_INT 1
51539: ARRAY
51540: PPUSH
51541: CALL_OW 254
51545: PPUSH
51546: LD_INT 5
51548: PPUSH
51549: CALL_OW 272
51553: PUSH
51554: LD_VAR 0 17
51558: PUSH
51559: LD_INT 1
51561: ARRAY
51562: PPUSH
51563: CALL_OW 251
51567: PPUSH
51568: LD_VAR 0 17
51572: PUSH
51573: LD_INT 1
51575: ARRAY
51576: PPUSH
51577: CALL_OW 254
51581: PPUSH
51582: LD_INT 5
51584: PPUSH
51585: CALL_OW 273
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51594: LD_VAR 0 16
51598: PUSH
51599: LD_INT 1
51601: ARRAY
51602: PPUSH
51603: LD_VAR 0 16
51607: PUSH
51608: LD_INT 2
51610: ARRAY
51611: PPUSH
51612: CALL_OW 488
51616: IFFALSE 51647
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51618: LD_VAR 0 13
51622: PPUSH
51623: LD_VAR 0 16
51627: PUSH
51628: LD_INT 1
51630: ARRAY
51631: PPUSH
51632: LD_VAR 0 16
51636: PUSH
51637: LD_INT 2
51639: ARRAY
51640: PPUSH
51641: CALL_OW 111
// continue ;
51645: GO 51137
// end ; end ; r := GetDir ( tmp ) ;
51647: LD_ADDR_VAR 0 15
51651: PUSH
51652: LD_VAR 0 13
51656: PPUSH
51657: CALL_OW 254
51661: ST_TO_ADDR
// if r = 5 then
51662: LD_VAR 0 15
51666: PUSH
51667: LD_INT 5
51669: EQUAL
51670: IFFALSE 51680
// r := 0 ;
51672: LD_ADDR_VAR 0 15
51676: PUSH
51677: LD_INT 0
51679: ST_TO_ADDR
// for j = r to 5 do
51680: LD_ADDR_VAR 0 10
51684: PUSH
51685: DOUBLE
51686: LD_VAR 0 15
51690: DEC
51691: ST_TO_ADDR
51692: LD_INT 5
51694: PUSH
51695: FOR_TO
51696: IFFALSE 51810
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51698: LD_ADDR_VAR 0 11
51702: PUSH
51703: LD_VAR 0 13
51707: PPUSH
51708: CALL_OW 250
51712: PPUSH
51713: LD_VAR 0 10
51717: PPUSH
51718: LD_INT 2
51720: PPUSH
51721: CALL_OW 272
51725: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51726: LD_ADDR_VAR 0 12
51730: PUSH
51731: LD_VAR 0 13
51735: PPUSH
51736: CALL_OW 251
51740: PPUSH
51741: LD_VAR 0 10
51745: PPUSH
51746: LD_INT 2
51748: PPUSH
51749: CALL_OW 273
51753: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51754: LD_VAR 0 11
51758: PPUSH
51759: LD_VAR 0 12
51763: PPUSH
51764: CALL_OW 488
51768: PUSH
51769: LD_VAR 0 11
51773: PPUSH
51774: LD_VAR 0 12
51778: PPUSH
51779: CALL_OW 428
51783: NOT
51784: AND
51785: IFFALSE 51808
// begin ComMoveXY ( tmp , _x , _y ) ;
51787: LD_VAR 0 13
51791: PPUSH
51792: LD_VAR 0 11
51796: PPUSH
51797: LD_VAR 0 12
51801: PPUSH
51802: CALL_OW 111
// break ;
51806: GO 51810
// end ; end ;
51808: GO 51695
51810: POP
51811: POP
// end ; end ;
51812: GO 51137
51814: POP
51815: POP
// end ;
51816: LD_VAR 0 8
51820: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51821: LD_INT 0
51823: PPUSH
// result := true ;
51824: LD_ADDR_VAR 0 3
51828: PUSH
51829: LD_INT 1
51831: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51832: LD_VAR 0 2
51836: PUSH
51837: LD_INT 24
51839: DOUBLE
51840: EQUAL
51841: IFTRUE 51851
51843: LD_INT 33
51845: DOUBLE
51846: EQUAL
51847: IFTRUE 51851
51849: GO 51876
51851: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51852: LD_ADDR_VAR 0 3
51856: PUSH
51857: LD_INT 32
51859: PPUSH
51860: LD_VAR 0 1
51864: PPUSH
51865: CALL_OW 321
51869: PUSH
51870: LD_INT 2
51872: EQUAL
51873: ST_TO_ADDR
51874: GO 52192
51876: LD_INT 20
51878: DOUBLE
51879: EQUAL
51880: IFTRUE 51884
51882: GO 51909
51884: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51885: LD_ADDR_VAR 0 3
51889: PUSH
51890: LD_INT 6
51892: PPUSH
51893: LD_VAR 0 1
51897: PPUSH
51898: CALL_OW 321
51902: PUSH
51903: LD_INT 2
51905: EQUAL
51906: ST_TO_ADDR
51907: GO 52192
51909: LD_INT 22
51911: DOUBLE
51912: EQUAL
51913: IFTRUE 51923
51915: LD_INT 36
51917: DOUBLE
51918: EQUAL
51919: IFTRUE 51923
51921: GO 51948
51923: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51924: LD_ADDR_VAR 0 3
51928: PUSH
51929: LD_INT 15
51931: PPUSH
51932: LD_VAR 0 1
51936: PPUSH
51937: CALL_OW 321
51941: PUSH
51942: LD_INT 2
51944: EQUAL
51945: ST_TO_ADDR
51946: GO 52192
51948: LD_INT 30
51950: DOUBLE
51951: EQUAL
51952: IFTRUE 51956
51954: GO 51981
51956: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51957: LD_ADDR_VAR 0 3
51961: PUSH
51962: LD_INT 20
51964: PPUSH
51965: LD_VAR 0 1
51969: PPUSH
51970: CALL_OW 321
51974: PUSH
51975: LD_INT 2
51977: EQUAL
51978: ST_TO_ADDR
51979: GO 52192
51981: LD_INT 28
51983: DOUBLE
51984: EQUAL
51985: IFTRUE 51995
51987: LD_INT 21
51989: DOUBLE
51990: EQUAL
51991: IFTRUE 51995
51993: GO 52020
51995: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
51996: LD_ADDR_VAR 0 3
52000: PUSH
52001: LD_INT 21
52003: PPUSH
52004: LD_VAR 0 1
52008: PPUSH
52009: CALL_OW 321
52013: PUSH
52014: LD_INT 2
52016: EQUAL
52017: ST_TO_ADDR
52018: GO 52192
52020: LD_INT 16
52022: DOUBLE
52023: EQUAL
52024: IFTRUE 52028
52026: GO 52053
52028: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52029: LD_ADDR_VAR 0 3
52033: PUSH
52034: LD_INT 84
52036: PPUSH
52037: LD_VAR 0 1
52041: PPUSH
52042: CALL_OW 321
52046: PUSH
52047: LD_INT 2
52049: EQUAL
52050: ST_TO_ADDR
52051: GO 52192
52053: LD_INT 19
52055: DOUBLE
52056: EQUAL
52057: IFTRUE 52067
52059: LD_INT 23
52061: DOUBLE
52062: EQUAL
52063: IFTRUE 52067
52065: GO 52092
52067: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52068: LD_ADDR_VAR 0 3
52072: PUSH
52073: LD_INT 83
52075: PPUSH
52076: LD_VAR 0 1
52080: PPUSH
52081: CALL_OW 321
52085: PUSH
52086: LD_INT 2
52088: EQUAL
52089: ST_TO_ADDR
52090: GO 52192
52092: LD_INT 17
52094: DOUBLE
52095: EQUAL
52096: IFTRUE 52100
52098: GO 52125
52100: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52101: LD_ADDR_VAR 0 3
52105: PUSH
52106: LD_INT 39
52108: PPUSH
52109: LD_VAR 0 1
52113: PPUSH
52114: CALL_OW 321
52118: PUSH
52119: LD_INT 2
52121: EQUAL
52122: ST_TO_ADDR
52123: GO 52192
52125: LD_INT 18
52127: DOUBLE
52128: EQUAL
52129: IFTRUE 52133
52131: GO 52158
52133: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52134: LD_ADDR_VAR 0 3
52138: PUSH
52139: LD_INT 40
52141: PPUSH
52142: LD_VAR 0 1
52146: PPUSH
52147: CALL_OW 321
52151: PUSH
52152: LD_INT 2
52154: EQUAL
52155: ST_TO_ADDR
52156: GO 52192
52158: LD_INT 27
52160: DOUBLE
52161: EQUAL
52162: IFTRUE 52166
52164: GO 52191
52166: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52167: LD_ADDR_VAR 0 3
52171: PUSH
52172: LD_INT 35
52174: PPUSH
52175: LD_VAR 0 1
52179: PPUSH
52180: CALL_OW 321
52184: PUSH
52185: LD_INT 2
52187: EQUAL
52188: ST_TO_ADDR
52189: GO 52192
52191: POP
// end ;
52192: LD_VAR 0 3
52196: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52197: LD_INT 0
52199: PPUSH
52200: PPUSH
52201: PPUSH
52202: PPUSH
52203: PPUSH
52204: PPUSH
52205: PPUSH
52206: PPUSH
52207: PPUSH
52208: PPUSH
52209: PPUSH
// result := false ;
52210: LD_ADDR_VAR 0 6
52214: PUSH
52215: LD_INT 0
52217: ST_TO_ADDR
// if btype = b_depot then
52218: LD_VAR 0 2
52222: PUSH
52223: LD_INT 0
52225: EQUAL
52226: IFFALSE 52238
// begin result := true ;
52228: LD_ADDR_VAR 0 6
52232: PUSH
52233: LD_INT 1
52235: ST_TO_ADDR
// exit ;
52236: GO 53064
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52238: LD_VAR 0 1
52242: NOT
52243: PUSH
52244: LD_VAR 0 1
52248: PPUSH
52249: CALL_OW 266
52253: PUSH
52254: LD_INT 0
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: IN
52264: NOT
52265: OR
52266: PUSH
52267: LD_VAR 0 2
52271: NOT
52272: OR
52273: PUSH
52274: LD_VAR 0 5
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 3
52290: PUSH
52291: LD_INT 4
52293: PUSH
52294: LD_INT 5
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: IN
52305: NOT
52306: OR
52307: PUSH
52308: LD_VAR 0 3
52312: PPUSH
52313: LD_VAR 0 4
52317: PPUSH
52318: CALL_OW 488
52322: NOT
52323: OR
52324: IFFALSE 52328
// exit ;
52326: GO 53064
// side := GetSide ( depot ) ;
52328: LD_ADDR_VAR 0 9
52332: PUSH
52333: LD_VAR 0 1
52337: PPUSH
52338: CALL_OW 255
52342: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52343: LD_VAR 0 9
52347: PPUSH
52348: LD_VAR 0 2
52352: PPUSH
52353: CALL 51821 0 2
52357: NOT
52358: IFFALSE 52362
// exit ;
52360: GO 53064
// pom := GetBase ( depot ) ;
52362: LD_ADDR_VAR 0 10
52366: PUSH
52367: LD_VAR 0 1
52371: PPUSH
52372: CALL_OW 274
52376: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52377: LD_ADDR_VAR 0 11
52381: PUSH
52382: LD_VAR 0 2
52386: PPUSH
52387: LD_VAR 0 1
52391: PPUSH
52392: CALL_OW 248
52396: PPUSH
52397: CALL_OW 450
52401: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52402: LD_VAR 0 10
52406: PPUSH
52407: LD_INT 1
52409: PPUSH
52410: CALL_OW 275
52414: PUSH
52415: LD_VAR 0 11
52419: PUSH
52420: LD_INT 1
52422: ARRAY
52423: GREATEREQUAL
52424: PUSH
52425: LD_VAR 0 10
52429: PPUSH
52430: LD_INT 2
52432: PPUSH
52433: CALL_OW 275
52437: PUSH
52438: LD_VAR 0 11
52442: PUSH
52443: LD_INT 2
52445: ARRAY
52446: GREATEREQUAL
52447: AND
52448: PUSH
52449: LD_VAR 0 10
52453: PPUSH
52454: LD_INT 3
52456: PPUSH
52457: CALL_OW 275
52461: PUSH
52462: LD_VAR 0 11
52466: PUSH
52467: LD_INT 3
52469: ARRAY
52470: GREATEREQUAL
52471: AND
52472: NOT
52473: IFFALSE 52477
// exit ;
52475: GO 53064
// if GetBType ( depot ) = b_depot then
52477: LD_VAR 0 1
52481: PPUSH
52482: CALL_OW 266
52486: PUSH
52487: LD_INT 0
52489: EQUAL
52490: IFFALSE 52502
// dist := 28 else
52492: LD_ADDR_VAR 0 14
52496: PUSH
52497: LD_INT 28
52499: ST_TO_ADDR
52500: GO 52510
// dist := 36 ;
52502: LD_ADDR_VAR 0 14
52506: PUSH
52507: LD_INT 36
52509: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52510: LD_VAR 0 1
52514: PPUSH
52515: LD_VAR 0 3
52519: PPUSH
52520: LD_VAR 0 4
52524: PPUSH
52525: CALL_OW 297
52529: PUSH
52530: LD_VAR 0 14
52534: GREATER
52535: IFFALSE 52539
// exit ;
52537: GO 53064
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52539: LD_ADDR_VAR 0 12
52543: PUSH
52544: LD_VAR 0 2
52548: PPUSH
52549: LD_VAR 0 3
52553: PPUSH
52554: LD_VAR 0 4
52558: PPUSH
52559: LD_VAR 0 5
52563: PPUSH
52564: LD_VAR 0 1
52568: PPUSH
52569: CALL_OW 248
52573: PPUSH
52574: LD_INT 0
52576: PPUSH
52577: CALL 53069 0 6
52581: ST_TO_ADDR
// if not hexes then
52582: LD_VAR 0 12
52586: NOT
52587: IFFALSE 52591
// exit ;
52589: GO 53064
// hex := GetHexInfo ( x , y ) ;
52591: LD_ADDR_VAR 0 15
52595: PUSH
52596: LD_VAR 0 3
52600: PPUSH
52601: LD_VAR 0 4
52605: PPUSH
52606: CALL_OW 546
52610: ST_TO_ADDR
// if hex [ 1 ] then
52611: LD_VAR 0 15
52615: PUSH
52616: LD_INT 1
52618: ARRAY
52619: IFFALSE 52623
// exit ;
52621: GO 53064
// height := hex [ 2 ] ;
52623: LD_ADDR_VAR 0 13
52627: PUSH
52628: LD_VAR 0 15
52632: PUSH
52633: LD_INT 2
52635: ARRAY
52636: ST_TO_ADDR
// for i = 1 to hexes do
52637: LD_ADDR_VAR 0 7
52641: PUSH
52642: DOUBLE
52643: LD_INT 1
52645: DEC
52646: ST_TO_ADDR
52647: LD_VAR 0 12
52651: PUSH
52652: FOR_TO
52653: IFFALSE 52983
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52655: LD_VAR 0 12
52659: PUSH
52660: LD_VAR 0 7
52664: ARRAY
52665: PUSH
52666: LD_INT 1
52668: ARRAY
52669: PPUSH
52670: LD_VAR 0 12
52674: PUSH
52675: LD_VAR 0 7
52679: ARRAY
52680: PUSH
52681: LD_INT 2
52683: ARRAY
52684: PPUSH
52685: CALL_OW 488
52689: NOT
52690: PUSH
52691: LD_VAR 0 12
52695: PUSH
52696: LD_VAR 0 7
52700: ARRAY
52701: PUSH
52702: LD_INT 1
52704: ARRAY
52705: PPUSH
52706: LD_VAR 0 12
52710: PUSH
52711: LD_VAR 0 7
52715: ARRAY
52716: PUSH
52717: LD_INT 2
52719: ARRAY
52720: PPUSH
52721: CALL_OW 428
52725: PUSH
52726: LD_INT 0
52728: GREATER
52729: OR
52730: PUSH
52731: LD_VAR 0 12
52735: PUSH
52736: LD_VAR 0 7
52740: ARRAY
52741: PUSH
52742: LD_INT 1
52744: ARRAY
52745: PPUSH
52746: LD_VAR 0 12
52750: PUSH
52751: LD_VAR 0 7
52755: ARRAY
52756: PUSH
52757: LD_INT 2
52759: ARRAY
52760: PPUSH
52761: CALL_OW 351
52765: OR
52766: IFFALSE 52772
// exit ;
52768: POP
52769: POP
52770: GO 53064
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52772: LD_ADDR_VAR 0 8
52776: PUSH
52777: LD_VAR 0 12
52781: PUSH
52782: LD_VAR 0 7
52786: ARRAY
52787: PUSH
52788: LD_INT 1
52790: ARRAY
52791: PPUSH
52792: LD_VAR 0 12
52796: PUSH
52797: LD_VAR 0 7
52801: ARRAY
52802: PUSH
52803: LD_INT 2
52805: ARRAY
52806: PPUSH
52807: CALL_OW 546
52811: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52812: LD_VAR 0 8
52816: PUSH
52817: LD_INT 1
52819: ARRAY
52820: PUSH
52821: LD_VAR 0 8
52825: PUSH
52826: LD_INT 2
52828: ARRAY
52829: PUSH
52830: LD_VAR 0 13
52834: PUSH
52835: LD_INT 2
52837: PLUS
52838: GREATER
52839: OR
52840: PUSH
52841: LD_VAR 0 8
52845: PUSH
52846: LD_INT 2
52848: ARRAY
52849: PUSH
52850: LD_VAR 0 13
52854: PUSH
52855: LD_INT 2
52857: MINUS
52858: LESS
52859: OR
52860: PUSH
52861: LD_VAR 0 8
52865: PUSH
52866: LD_INT 3
52868: ARRAY
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 8
52875: PUSH
52876: LD_INT 9
52878: PUSH
52879: LD_INT 10
52881: PUSH
52882: LD_INT 11
52884: PUSH
52885: LD_INT 12
52887: PUSH
52888: LD_INT 13
52890: PUSH
52891: LD_INT 16
52893: PUSH
52894: LD_INT 17
52896: PUSH
52897: LD_INT 18
52899: PUSH
52900: LD_INT 19
52902: PUSH
52903: LD_INT 20
52905: PUSH
52906: LD_INT 21
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: IN
52924: NOT
52925: OR
52926: PUSH
52927: LD_VAR 0 8
52931: PUSH
52932: LD_INT 5
52934: ARRAY
52935: NOT
52936: OR
52937: PUSH
52938: LD_VAR 0 8
52942: PUSH
52943: LD_INT 6
52945: ARRAY
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 2
52952: PUSH
52953: LD_INT 7
52955: PUSH
52956: LD_INT 9
52958: PUSH
52959: LD_INT 10
52961: PUSH
52962: LD_INT 11
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: IN
52973: NOT
52974: OR
52975: IFFALSE 52981
// exit ;
52977: POP
52978: POP
52979: GO 53064
// end ;
52981: GO 52652
52983: POP
52984: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52985: LD_VAR 0 9
52989: PPUSH
52990: LD_VAR 0 3
52994: PPUSH
52995: LD_VAR 0 4
52999: PPUSH
53000: LD_INT 20
53002: PPUSH
53003: CALL 44987 0 4
53007: PUSH
53008: LD_INT 4
53010: ARRAY
53011: IFFALSE 53015
// exit ;
53013: GO 53064
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53015: LD_VAR 0 2
53019: PUSH
53020: LD_INT 29
53022: PUSH
53023: LD_INT 30
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: IN
53030: PUSH
53031: LD_VAR 0 3
53035: PPUSH
53036: LD_VAR 0 4
53040: PPUSH
53041: LD_VAR 0 9
53045: PPUSH
53046: CALL_OW 440
53050: NOT
53051: AND
53052: IFFALSE 53056
// exit ;
53054: GO 53064
// result := true ;
53056: LD_ADDR_VAR 0 6
53060: PUSH
53061: LD_INT 1
53063: ST_TO_ADDR
// end ;
53064: LD_VAR 0 6
53068: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53069: LD_INT 0
53071: PPUSH
53072: PPUSH
53073: PPUSH
53074: PPUSH
53075: PPUSH
53076: PPUSH
53077: PPUSH
53078: PPUSH
53079: PPUSH
53080: PPUSH
53081: PPUSH
53082: PPUSH
53083: PPUSH
53084: PPUSH
53085: PPUSH
53086: PPUSH
53087: PPUSH
53088: PPUSH
53089: PPUSH
53090: PPUSH
53091: PPUSH
53092: PPUSH
53093: PPUSH
53094: PPUSH
53095: PPUSH
53096: PPUSH
53097: PPUSH
53098: PPUSH
53099: PPUSH
53100: PPUSH
53101: PPUSH
53102: PPUSH
53103: PPUSH
53104: PPUSH
53105: PPUSH
53106: PPUSH
53107: PPUSH
53108: PPUSH
53109: PPUSH
53110: PPUSH
53111: PPUSH
53112: PPUSH
53113: PPUSH
53114: PPUSH
53115: PPUSH
53116: PPUSH
53117: PPUSH
53118: PPUSH
53119: PPUSH
53120: PPUSH
53121: PPUSH
53122: PPUSH
53123: PPUSH
53124: PPUSH
53125: PPUSH
53126: PPUSH
53127: PPUSH
53128: PPUSH
// result = [ ] ;
53129: LD_ADDR_VAR 0 7
53133: PUSH
53134: EMPTY
53135: ST_TO_ADDR
// temp_list = [ ] ;
53136: LD_ADDR_VAR 0 9
53140: PUSH
53141: EMPTY
53142: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53143: LD_VAR 0 4
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: LD_INT 1
53153: PUSH
53154: LD_INT 2
53156: PUSH
53157: LD_INT 3
53159: PUSH
53160: LD_INT 4
53162: PUSH
53163: LD_INT 5
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: IN
53174: NOT
53175: PUSH
53176: LD_VAR 0 1
53180: PUSH
53181: LD_INT 0
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: IN
53191: PUSH
53192: LD_VAR 0 5
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: LD_INT 2
53202: PUSH
53203: LD_INT 3
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: LIST
53210: IN
53211: NOT
53212: AND
53213: OR
53214: IFFALSE 53218
// exit ;
53216: GO 71609
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53218: LD_VAR 0 1
53222: PUSH
53223: LD_INT 6
53225: PUSH
53226: LD_INT 7
53228: PUSH
53229: LD_INT 8
53231: PUSH
53232: LD_INT 13
53234: PUSH
53235: LD_INT 12
53237: PUSH
53238: LD_INT 15
53240: PUSH
53241: LD_INT 11
53243: PUSH
53244: LD_INT 14
53246: PUSH
53247: LD_INT 10
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: IN
53261: IFFALSE 53271
// btype = b_lab ;
53263: LD_ADDR_VAR 0 1
53267: PUSH
53268: LD_INT 6
53270: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53271: LD_VAR 0 6
53275: PUSH
53276: LD_INT 0
53278: PUSH
53279: LD_INT 1
53281: PUSH
53282: LD_INT 2
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: LIST
53289: IN
53290: NOT
53291: PUSH
53292: LD_VAR 0 1
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: LD_INT 2
53305: PUSH
53306: LD_INT 3
53308: PUSH
53309: LD_INT 6
53311: PUSH
53312: LD_INT 36
53314: PUSH
53315: LD_INT 4
53317: PUSH
53318: LD_INT 5
53320: PUSH
53321: LD_INT 31
53323: PUSH
53324: LD_INT 32
53326: PUSH
53327: LD_INT 33
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: IN
53343: NOT
53344: PUSH
53345: LD_VAR 0 6
53349: PUSH
53350: LD_INT 1
53352: EQUAL
53353: AND
53354: OR
53355: PUSH
53356: LD_VAR 0 1
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: LD_INT 3
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: IN
53371: NOT
53372: PUSH
53373: LD_VAR 0 6
53377: PUSH
53378: LD_INT 2
53380: EQUAL
53381: AND
53382: OR
53383: IFFALSE 53393
// mode = 0 ;
53385: LD_ADDR_VAR 0 6
53389: PUSH
53390: LD_INT 0
53392: ST_TO_ADDR
// case mode of 0 :
53393: LD_VAR 0 6
53397: PUSH
53398: LD_INT 0
53400: DOUBLE
53401: EQUAL
53402: IFTRUE 53406
53404: GO 64859
53406: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53407: LD_ADDR_VAR 0 11
53411: PUSH
53412: LD_INT 0
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: LD_INT 1
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: PUSH
53436: LD_INT 0
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 1
53445: PUSH
53446: LD_INT 1
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: LD_INT 0
53455: PUSH
53456: LD_INT 1
53458: PUSH
53459: EMPTY
53460: LIST
53461: LIST
53462: PUSH
53463: LD_INT 1
53465: NEG
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 1
53476: NEG
53477: PUSH
53478: LD_INT 1
53480: NEG
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: LD_INT 2
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 0
53500: PUSH
53501: LD_INT 2
53503: NEG
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 1
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 2
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 1
53542: NEG
53543: PUSH
53544: LD_INT 1
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 3
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 3
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 2
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53600: LD_ADDR_VAR 0 12
53604: PUSH
53605: LD_INT 0
53607: PUSH
53608: LD_INT 0
53610: PUSH
53611: EMPTY
53612: LIST
53613: LIST
53614: PUSH
53615: LD_INT 0
53617: PUSH
53618: LD_INT 1
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: LD_INT 0
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: LD_INT 1
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: LD_INT 1
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: NEG
53659: PUSH
53660: LD_INT 0
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 1
53669: NEG
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 1
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 2
53692: PUSH
53693: LD_INT 0
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 2
53702: PUSH
53703: LD_INT 1
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: LD_INT 1
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 2
53723: NEG
53724: PUSH
53725: LD_INT 0
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 2
53734: NEG
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: NEG
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: EMPTY
53752: LIST
53753: LIST
53754: PUSH
53755: LD_INT 3
53757: NEG
53758: PUSH
53759: LD_INT 0
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: LD_INT 3
53768: NEG
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53796: LD_ADDR_VAR 0 13
53800: PUSH
53801: LD_INT 0
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 0
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: NEG
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 1
53865: NEG
53866: PUSH
53867: LD_INT 1
53869: NEG
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: LD_INT 1
53877: NEG
53878: PUSH
53879: LD_INT 2
53881: NEG
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: PUSH
53887: LD_INT 2
53889: PUSH
53890: LD_INT 1
53892: PUSH
53893: EMPTY
53894: LIST
53895: LIST
53896: PUSH
53897: LD_INT 2
53899: PUSH
53900: LD_INT 2
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: LD_INT 3
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 3
53955: NEG
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 3
53967: NEG
53968: PUSH
53969: LD_INT 3
53971: NEG
53972: PUSH
53973: EMPTY
53974: LIST
53975: LIST
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53995: LD_ADDR_VAR 0 14
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: LD_INT 1
54015: NEG
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 0
54043: PUSH
54044: LD_INT 1
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 1
54053: NEG
54054: PUSH
54055: LD_INT 0
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 1
54064: NEG
54065: PUSH
54066: LD_INT 1
54068: NEG
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 1
54076: NEG
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 0
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 1
54099: PUSH
54100: LD_INT 1
54102: NEG
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 1
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: LD_INT 2
54123: PUSH
54124: EMPTY
54125: LIST
54126: LIST
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: LD_INT 3
54145: NEG
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 0
54153: PUSH
54154: LD_INT 3
54156: NEG
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 1
54164: PUSH
54165: LD_INT 2
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54191: LD_ADDR_VAR 0 15
54195: PUSH
54196: LD_INT 0
54198: PUSH
54199: LD_INT 0
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: LD_INT 1
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: PUSH
54220: LD_INT 0
54222: PUSH
54223: EMPTY
54224: LIST
54225: LIST
54226: PUSH
54227: LD_INT 1
54229: PUSH
54230: LD_INT 1
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: LD_INT 1
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 1
54249: NEG
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 1
54264: NEG
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 1
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 2
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: EMPTY
54288: LIST
54289: LIST
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: LD_INT 1
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 1
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 2
54314: NEG
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 2
54325: NEG
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 3
54348: PUSH
54349: LD_INT 0
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 3
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: LIST
54370: LIST
54371: LIST
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54384: LD_ADDR_VAR 0 16
54388: PUSH
54389: LD_INT 0
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 1
54412: PUSH
54413: LD_INT 0
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: LD_INT 1
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 0
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: EMPTY
54437: LIST
54438: LIST
54439: PUSH
54440: LD_INT 1
54442: NEG
54443: PUSH
54444: LD_INT 0
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 1
54453: NEG
54454: PUSH
54455: LD_INT 1
54457: NEG
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 2
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: LD_INT 2
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 2
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: PUSH
54532: LD_INT 2
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 3
54541: PUSH
54542: LD_INT 3
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 2
54551: PUSH
54552: LD_INT 3
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54577: LD_ADDR_VAR 0 17
54581: PUSH
54582: LD_INT 0
54584: PUSH
54585: LD_INT 0
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 1
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 1
54635: NEG
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: LD_INT 1
54650: NEG
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: NEG
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: EMPTY
54665: LIST
54666: LIST
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 1
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 2
54692: PUSH
54693: LD_INT 0
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 2
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: LD_INT 0
54757: PUSH
54758: EMPTY
54759: LIST
54760: LIST
54761: PUSH
54762: LD_INT 2
54764: NEG
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 2
54776: NEG
54777: PUSH
54778: LD_INT 2
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54807: LD_ADDR_VAR 0 18
54811: PUSH
54812: LD_INT 0
54814: PUSH
54815: LD_INT 0
54817: PUSH
54818: EMPTY
54819: LIST
54820: LIST
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: LD_INT 1
54827: NEG
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: LD_INT 1
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: LD_INT 1
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 0
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: PUSH
54874: LD_INT 1
54876: NEG
54877: PUSH
54878: LD_INT 1
54880: NEG
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 0
54900: PUSH
54901: LD_INT 2
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: PUSH
54912: LD_INT 1
54914: NEG
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: LD_INT 0
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: PUSH
54933: LD_INT 1
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 2
54942: PUSH
54943: LD_INT 2
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: PUSH
54960: LD_INT 0
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: NEG
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 2
54983: NEG
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 2
54994: NEG
54995: PUSH
54996: LD_INT 1
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 2
55006: NEG
55007: PUSH
55008: LD_INT 2
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55037: LD_ADDR_VAR 0 19
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: EMPTY
55049: LIST
55050: LIST
55051: PUSH
55052: LD_INT 0
55054: PUSH
55055: LD_INT 1
55057: NEG
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: PUSH
55066: LD_INT 0
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 0
55085: PUSH
55086: LD_INT 1
55088: PUSH
55089: EMPTY
55090: LIST
55091: LIST
55092: PUSH
55093: LD_INT 1
55095: NEG
55096: PUSH
55097: LD_INT 0
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 1
55106: NEG
55107: PUSH
55108: LD_INT 1
55110: NEG
55111: PUSH
55112: EMPTY
55113: LIST
55114: LIST
55115: PUSH
55116: LD_INT 1
55118: NEG
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 0
55130: PUSH
55131: LD_INT 2
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 1
55141: PUSH
55142: LD_INT 1
55144: NEG
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 2
55162: PUSH
55163: LD_INT 1
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 2
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: LD_INT 2
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 0
55192: PUSH
55193: LD_INT 2
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 1
55202: NEG
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: LD_INT 0
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 2
55224: NEG
55225: PUSH
55226: LD_INT 1
55228: NEG
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: PUSH
55234: LD_INT 2
55236: NEG
55237: PUSH
55238: LD_INT 2
55240: NEG
55241: PUSH
55242: EMPTY
55243: LIST
55244: LIST
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55267: LD_ADDR_VAR 0 20
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: EMPTY
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 0
55284: PUSH
55285: LD_INT 1
55287: NEG
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 1
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 0
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 1
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: NEG
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 2
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: LD_INT 1
55374: NEG
55375: PUSH
55376: EMPTY
55377: LIST
55378: LIST
55379: PUSH
55380: LD_INT 2
55382: PUSH
55383: LD_INT 0
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: PUSH
55390: LD_INT 2
55392: PUSH
55393: LD_INT 1
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 2
55402: PUSH
55403: LD_INT 2
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: LD_INT 2
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: LD_INT 2
55425: PUSH
55426: EMPTY
55427: LIST
55428: LIST
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 2
55454: NEG
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 2
55466: NEG
55467: PUSH
55468: LD_INT 2
55470: NEG
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55497: LD_ADDR_VAR 0 21
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: LD_INT 0
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 0
55514: PUSH
55515: LD_INT 1
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 1
55535: PUSH
55536: LD_INT 1
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 0
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: NEG
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 1
55566: NEG
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 1
55578: NEG
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 2
55593: NEG
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 1
55604: NEG
55605: PUSH
55606: EMPTY
55607: LIST
55608: LIST
55609: PUSH
55610: LD_INT 2
55612: PUSH
55613: LD_INT 0
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: PUSH
55620: LD_INT 2
55622: PUSH
55623: LD_INT 1
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 2
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: LD_INT 2
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_INT 2
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 1
55662: NEG
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 2
55673: NEG
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 2
55684: NEG
55685: PUSH
55686: LD_INT 1
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: LD_INT 2
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55727: LD_ADDR_VAR 0 22
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 0
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 0
55744: PUSH
55745: LD_INT 1
55747: NEG
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 0
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 1
55785: NEG
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: LD_INT 2
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: LD_INT 0
55820: PUSH
55821: LD_INT 2
55823: NEG
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: LD_INT 0
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: LD_INT 1
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 2
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: LD_INT 2
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 0
55882: PUSH
55883: LD_INT 2
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: NEG
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: NEG
55904: PUSH
55905: LD_INT 0
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 2
55914: NEG
55915: PUSH
55916: LD_INT 1
55918: NEG
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: PUSH
55924: LD_INT 2
55926: NEG
55927: PUSH
55928: LD_INT 2
55930: NEG
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55957: LD_ADDR_VAR 0 23
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 0
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: EMPTY
55980: LIST
55981: LIST
55982: PUSH
55983: LD_INT 1
55985: PUSH
55986: LD_INT 0
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 1
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: NEG
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: LD_INT 0
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 1
56061: PUSH
56062: LD_INT 1
56064: NEG
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 2
56072: PUSH
56073: LD_INT 0
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: LD_INT 1
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: LD_INT 2
56105: PUSH
56106: EMPTY
56107: LIST
56108: LIST
56109: PUSH
56110: LD_INT 0
56112: PUSH
56113: LD_INT 2
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 2
56133: NEG
56134: PUSH
56135: LD_INT 0
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 2
56144: NEG
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 2
56156: NEG
56157: PUSH
56158: LD_INT 2
56160: NEG
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 2
56168: NEG
56169: PUSH
56170: LD_INT 3
56172: NEG
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 1
56180: NEG
56181: PUSH
56182: LD_INT 3
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 2
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: PUSH
56204: LD_INT 1
56206: NEG
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56237: LD_ADDR_VAR 0 24
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: LD_INT 0
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: PUSH
56252: LD_INT 0
56254: PUSH
56255: LD_INT 1
56257: NEG
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 1
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: PUSH
56276: LD_INT 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 0
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 1
56295: NEG
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: LD_INT 1
56318: NEG
56319: PUSH
56320: LD_INT 2
56322: NEG
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: LD_INT 2
56333: NEG
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 1
56341: PUSH
56342: LD_INT 1
56344: NEG
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: PUSH
56353: LD_INT 0
56355: PUSH
56356: EMPTY
56357: LIST
56358: LIST
56359: PUSH
56360: LD_INT 2
56362: PUSH
56363: LD_INT 1
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 2
56372: PUSH
56373: LD_INT 2
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: LD_INT 2
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 1
56402: NEG
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 2
56413: NEG
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: NEG
56425: PUSH
56426: LD_INT 1
56428: NEG
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 2
56436: NEG
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: LD_INT 1
56448: PUSH
56449: LD_INT 2
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 2
56459: PUSH
56460: LD_INT 1
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: LD_INT 3
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56513: LD_ADDR_VAR 0 25
56517: PUSH
56518: LD_INT 0
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: EMPTY
56556: LIST
56557: LIST
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: NEG
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 1
56594: NEG
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 0
56606: PUSH
56607: LD_INT 2
56609: NEG
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: LD_INT 1
56620: NEG
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: PUSH
56629: LD_INT 0
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: LD_INT 1
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 2
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: LD_INT 2
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: LD_INT 1
56682: PUSH
56683: EMPTY
56684: LIST
56685: LIST
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: LD_INT 0
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 2
56700: NEG
56701: PUSH
56702: LD_INT 1
56704: NEG
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 2
56712: NEG
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: EMPTY
56719: LIST
56720: LIST
56721: PUSH
56722: LD_INT 3
56724: PUSH
56725: LD_INT 1
56727: PUSH
56728: EMPTY
56729: LIST
56730: LIST
56731: PUSH
56732: LD_INT 3
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: LD_INT 3
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: PUSH
56752: LD_INT 1
56754: PUSH
56755: LD_INT 3
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56787: LD_ADDR_VAR 0 26
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 1
56807: NEG
56808: PUSH
56809: EMPTY
56810: LIST
56811: LIST
56812: PUSH
56813: LD_INT 1
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: LD_INT 1
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 1
56845: NEG
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: NEG
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: LD_INT 1
56868: NEG
56869: PUSH
56870: LD_INT 2
56872: NEG
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: LD_INT 2
56883: NEG
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 1
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 2
56902: PUSH
56903: LD_INT 0
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: LD_INT 1
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: LD_INT 2
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 2
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 2
56974: NEG
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 2
56986: NEG
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: LD_INT 3
57001: PUSH
57002: EMPTY
57003: LIST
57004: LIST
57005: PUSH
57006: LD_INT 1
57008: PUSH
57009: LD_INT 3
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: PUSH
57016: LD_INT 1
57018: NEG
57019: PUSH
57020: LD_INT 2
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: LD_INT 2
57029: NEG
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57063: LD_ADDR_VAR 0 27
57067: PUSH
57068: LD_INT 0
57070: PUSH
57071: LD_INT 0
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 0
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: PUSH
57092: LD_INT 0
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 1
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: LD_INT 0
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 1
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: EMPTY
57151: LIST
57152: LIST
57153: PUSH
57154: LD_INT 0
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: EMPTY
57162: LIST
57163: LIST
57164: PUSH
57165: LD_INT 1
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: PUSH
57179: LD_INT 0
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 2
57188: PUSH
57189: LD_INT 1
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 2
57198: PUSH
57199: LD_INT 2
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: LD_INT 2
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: PUSH
57216: LD_INT 0
57218: PUSH
57219: LD_INT 2
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: PUSH
57226: LD_INT 1
57228: NEG
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 2
57239: NEG
57240: PUSH
57241: LD_INT 0
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 2
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 2
57262: NEG
57263: PUSH
57264: LD_INT 2
57266: NEG
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 2
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 2
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 3
57296: NEG
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 3
57308: NEG
57309: PUSH
57310: LD_INT 2
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57343: LD_ADDR_VAR 0 28
57347: PUSH
57348: LD_INT 0
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 0
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: LD_INT 0
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: LD_INT 1
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 1
57401: NEG
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: NEG
57413: PUSH
57414: LD_INT 1
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: LD_INT 1
57424: NEG
57425: PUSH
57426: LD_INT 2
57428: NEG
57429: PUSH
57430: EMPTY
57431: LIST
57432: LIST
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: LD_INT 1
57450: NEG
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: PUSH
57456: LD_INT 2
57458: PUSH
57459: LD_INT 0
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 2
57468: PUSH
57469: LD_INT 1
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 2
57478: PUSH
57479: LD_INT 2
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: LD_INT 2
57491: PUSH
57492: EMPTY
57493: LIST
57494: LIST
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 2
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: NEG
57509: PUSH
57510: LD_INT 1
57512: PUSH
57513: EMPTY
57514: LIST
57515: LIST
57516: PUSH
57517: LD_INT 2
57519: NEG
57520: PUSH
57521: LD_INT 0
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: LD_INT 1
57534: NEG
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 2
57542: NEG
57543: PUSH
57544: LD_INT 2
57546: NEG
57547: PUSH
57548: EMPTY
57549: LIST
57550: LIST
57551: PUSH
57552: LD_INT 2
57554: NEG
57555: PUSH
57556: LD_INT 3
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 3
57570: NEG
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: PUSH
57576: LD_INT 3
57578: NEG
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: PUSH
57584: EMPTY
57585: LIST
57586: LIST
57587: PUSH
57588: LD_INT 3
57590: NEG
57591: PUSH
57592: LD_INT 2
57594: NEG
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57625: LD_ADDR_VAR 0 29
57629: PUSH
57630: LD_INT 0
57632: PUSH
57633: LD_INT 0
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: PUSH
57651: LD_INT 1
57653: PUSH
57654: LD_INT 0
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: PUSH
57664: LD_INT 1
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: LD_INT 1
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: PUSH
57681: LD_INT 1
57683: NEG
57684: PUSH
57685: LD_INT 0
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 1
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 2
57710: NEG
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: LD_INT 2
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 2
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 2
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 1
57760: PUSH
57761: LD_INT 2
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 0
57770: PUSH
57771: LD_INT 2
57773: PUSH
57774: EMPTY
57775: LIST
57776: LIST
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 2
57791: NEG
57792: PUSH
57793: LD_INT 1
57795: NEG
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: LD_INT 2
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 2
57815: NEG
57816: PUSH
57817: LD_INT 3
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 2
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 3
57838: PUSH
57839: LD_INT 1
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: LD_INT 3
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: LD_INT 2
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 3
57869: NEG
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57904: LD_ADDR_VAR 0 30
57908: PUSH
57909: LD_INT 0
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 0
57921: PUSH
57922: LD_INT 1
57924: NEG
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 0
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 0
57952: PUSH
57953: LD_INT 1
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 0
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 1
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 2
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 0
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 1
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: EMPTY
58014: LIST
58015: LIST
58016: PUSH
58017: LD_INT 2
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: LD_INT 1
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: LD_INT 2
58042: PUSH
58043: EMPTY
58044: LIST
58045: LIST
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: LD_INT 2
58052: PUSH
58053: EMPTY
58054: LIST
58055: LIST
58056: PUSH
58057: LD_INT 1
58059: NEG
58060: PUSH
58061: LD_INT 1
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: PUSH
58068: LD_INT 2
58070: NEG
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 2
58081: NEG
58082: PUSH
58083: LD_INT 1
58085: NEG
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: LD_INT 3
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 2
58108: NEG
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: LD_INT 2
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: LD_INT 3
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: LD_INT 1
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 3
58147: NEG
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58182: LD_ADDR_VAR 0 31
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: LD_INT 0
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 0
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 1
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 0
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 0
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: LD_INT 2
58267: NEG
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: PUSH
58276: LD_INT 1
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 2
58286: PUSH
58287: LD_INT 0
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 2
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: LD_INT 2
58306: PUSH
58307: LD_INT 2
58309: PUSH
58310: EMPTY
58311: LIST
58312: LIST
58313: PUSH
58314: LD_INT 1
58316: PUSH
58317: LD_INT 2
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: LD_INT 2
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: PUSH
58334: LD_INT 1
58336: NEG
58337: PUSH
58338: LD_INT 1
58340: PUSH
58341: EMPTY
58342: LIST
58343: LIST
58344: PUSH
58345: LD_INT 2
58347: NEG
58348: PUSH
58349: LD_INT 1
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 2
58359: NEG
58360: PUSH
58361: LD_INT 2
58363: NEG
58364: PUSH
58365: EMPTY
58366: LIST
58367: LIST
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: LD_INT 3
58375: NEG
58376: PUSH
58377: EMPTY
58378: LIST
58379: LIST
58380: PUSH
58381: LD_INT 2
58383: PUSH
58384: LD_INT 1
58386: NEG
58387: PUSH
58388: EMPTY
58389: LIST
58390: LIST
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: EMPTY
58399: LIST
58400: LIST
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: LD_INT 3
58407: PUSH
58408: EMPTY
58409: LIST
58410: LIST
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: LD_INT 2
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 3
58425: NEG
58426: PUSH
58427: LD_INT 2
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58460: LD_ADDR_VAR 0 32
58464: PUSH
58465: LD_INT 0
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: LD_INT 1
58480: NEG
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: LD_INT 1
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: NEG
58530: PUSH
58531: LD_INT 1
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: NEG
58542: PUSH
58543: LD_INT 2
58545: NEG
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: LD_INT 2
58556: NEG
58557: PUSH
58558: EMPTY
58559: LIST
58560: LIST
58561: PUSH
58562: LD_INT 1
58564: PUSH
58565: LD_INT 1
58567: NEG
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 2
58575: PUSH
58576: LD_INT 1
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 2
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: LD_INT 2
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: PUSH
58603: LD_INT 0
58605: PUSH
58606: LD_INT 2
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: PUSH
58613: LD_INT 1
58615: NEG
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 2
58626: NEG
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 2
58637: NEG
58638: PUSH
58639: LD_INT 1
58641: NEG
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: LD_INT 1
58649: NEG
58650: PUSH
58651: LD_INT 3
58653: NEG
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: LD_INT 2
58664: NEG
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 3
58672: PUSH
58673: LD_INT 2
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: PUSH
58680: LD_INT 2
58682: PUSH
58683: LD_INT 3
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 2
58692: NEG
58693: PUSH
58694: LD_INT 1
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 3
58703: NEG
58704: PUSH
58705: LD_INT 1
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: LIST
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58738: LD_ADDR_VAR 0 33
58742: PUSH
58743: LD_INT 0
58745: PUSH
58746: LD_INT 0
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 0
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 1
58766: PUSH
58767: LD_INT 0
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 1
58776: PUSH
58777: LD_INT 1
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 1
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: NEG
58797: PUSH
58798: LD_INT 0
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 1
58807: NEG
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: LD_INT 2
58823: NEG
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: PUSH
58829: LD_INT 1
58831: PUSH
58832: LD_INT 1
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 2
58842: PUSH
58843: LD_INT 0
58845: PUSH
58846: EMPTY
58847: LIST
58848: LIST
58849: PUSH
58850: LD_INT 2
58852: PUSH
58853: LD_INT 1
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: LD_INT 2
58865: PUSH
58866: EMPTY
58867: LIST
58868: LIST
58869: PUSH
58870: LD_INT 0
58872: PUSH
58873: LD_INT 2
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: NEG
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 2
58893: NEG
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 2
58904: NEG
58905: PUSH
58906: LD_INT 1
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: LD_INT 2
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 2
58928: NEG
58929: PUSH
58930: LD_INT 3
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 2
58940: PUSH
58941: LD_INT 1
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 3
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: NEG
58972: PUSH
58973: LD_INT 2
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 3
58982: NEG
58983: PUSH
58984: LD_INT 2
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59017: LD_ADDR_VAR 0 34
59021: PUSH
59022: LD_INT 0
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: LD_INT 1
59037: NEG
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 1
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 0
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 1
59086: NEG
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 1
59098: NEG
59099: PUSH
59100: LD_INT 2
59102: NEG
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 0
59110: PUSH
59111: LD_INT 2
59113: NEG
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 1
59121: PUSH
59122: LD_INT 1
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: LD_INT 1
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: PUSH
59140: LD_INT 2
59142: PUSH
59143: LD_INT 2
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: LD_INT 2
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: NEG
59163: PUSH
59164: LD_INT 1
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 2
59184: NEG
59185: PUSH
59186: LD_INT 1
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 2
59196: NEG
59197: PUSH
59198: LD_INT 2
59200: NEG
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: LD_INT 3
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: LD_INT 2
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: LD_INT 3
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: PUSH
59239: LD_INT 2
59241: PUSH
59242: LD_INT 3
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 2
59251: NEG
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 3
59262: NEG
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59297: LD_ADDR_VAR 0 35
59301: PUSH
59302: LD_INT 0
59304: PUSH
59305: LD_INT 0
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: LD_INT 1
59317: NEG
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: PUSH
59323: LD_INT 1
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 0
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 1
59355: NEG
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 1
59366: NEG
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 2
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 2
59388: NEG
59389: PUSH
59390: LD_INT 1
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59409: LD_ADDR_VAR 0 36
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 0
59419: PUSH
59420: EMPTY
59421: LIST
59422: LIST
59423: PUSH
59424: LD_INT 0
59426: PUSH
59427: LD_INT 1
59429: NEG
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 0
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: LD_INT 1
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: PUSH
59488: LD_INT 1
59490: NEG
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 1
59502: PUSH
59503: LD_INT 2
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: LIST
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59521: LD_ADDR_VAR 0 37
59525: PUSH
59526: LD_INT 0
59528: PUSH
59529: LD_INT 0
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 0
59538: PUSH
59539: LD_INT 1
59541: NEG
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 1
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 1
59559: PUSH
59560: LD_INT 1
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 0
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 1
59579: NEG
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 1
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: LD_INT 1
59613: NEG
59614: PUSH
59615: LD_INT 1
59617: PUSH
59618: EMPTY
59619: LIST
59620: LIST
59621: PUSH
59622: EMPTY
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59633: LD_ADDR_VAR 0 38
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 0
59650: PUSH
59651: LD_INT 1
59653: NEG
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: LD_INT 0
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 1
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: LD_INT 1
59684: PUSH
59685: EMPTY
59686: LIST
59687: LIST
59688: PUSH
59689: LD_INT 1
59691: NEG
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: LD_INT 1
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 2
59714: PUSH
59715: LD_INT 1
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59745: LD_ADDR_VAR 0 39
59749: PUSH
59750: LD_INT 0
59752: PUSH
59753: LD_INT 0
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 1
59773: PUSH
59774: LD_INT 0
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: PUSH
59784: LD_INT 1
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PUSH
59791: LD_INT 0
59793: PUSH
59794: LD_INT 1
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 1
59803: NEG
59804: PUSH
59805: LD_INT 0
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: LD_INT 1
59818: NEG
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 1
59826: NEG
59827: PUSH
59828: LD_INT 2
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: PUSH
59839: LD_INT 2
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59857: LD_ADDR_VAR 0 40
59861: PUSH
59862: LD_INT 0
59864: PUSH
59865: LD_INT 0
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: LD_INT 1
59877: NEG
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: LD_INT 1
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 0
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: LD_INT 1
59915: NEG
59916: PUSH
59917: LD_INT 0
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: PUSH
59924: LD_INT 1
59926: NEG
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: EMPTY
59933: LIST
59934: LIST
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: LD_INT 1
59941: NEG
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: EMPTY
59955: LIST
59956: LIST
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: LIST
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59969: LD_ADDR_VAR 0 41
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 0
59979: PUSH
59980: EMPTY
59981: LIST
59982: LIST
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_INT 1
59989: NEG
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 1
60007: PUSH
60008: LD_INT 1
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: LD_INT 0
60017: PUSH
60018: LD_INT 1
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: NEG
60028: PUSH
60029: LD_INT 0
60031: PUSH
60032: EMPTY
60033: LIST
60034: LIST
60035: PUSH
60036: LD_INT 1
60038: NEG
60039: PUSH
60040: LD_INT 1
60042: NEG
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 1
60062: PUSH
60063: LD_INT 1
60065: NEG
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 2
60073: PUSH
60074: LD_INT 0
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 2
60083: PUSH
60084: LD_INT 1
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 2
60093: PUSH
60094: LD_INT 2
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 1
60113: NEG
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 2
60124: NEG
60125: PUSH
60126: LD_INT 0
60128: PUSH
60129: EMPTY
60130: LIST
60131: LIST
60132: PUSH
60133: LD_INT 2
60135: NEG
60136: PUSH
60137: LD_INT 1
60139: NEG
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 2
60147: NEG
60148: PUSH
60149: LD_INT 2
60151: NEG
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 2
60159: NEG
60160: PUSH
60161: LD_INT 3
60163: NEG
60164: PUSH
60165: EMPTY
60166: LIST
60167: LIST
60168: PUSH
60169: LD_INT 2
60171: PUSH
60172: LD_INT 1
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 3
60182: PUSH
60183: LD_INT 0
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 3
60192: PUSH
60193: LD_INT 1
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 3
60202: PUSH
60203: LD_INT 2
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 3
60212: PUSH
60213: LD_INT 3
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: LD_INT 3
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: LD_INT 1
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 3
60243: NEG
60244: PUSH
60245: LD_INT 0
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 3
60254: NEG
60255: PUSH
60256: LD_INT 1
60258: NEG
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 3
60266: NEG
60267: PUSH
60268: LD_INT 2
60270: NEG
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: PUSH
60276: LD_INT 3
60278: NEG
60279: PUSH
60280: LD_INT 3
60282: NEG
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: LIST
60292: LIST
60293: LIST
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60319: LD_ADDR_VAR 0 42
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: LD_INT 1
60400: NEG
60401: PUSH
60402: LD_INT 2
60404: NEG
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 0
60412: PUSH
60413: LD_INT 2
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 1
60423: PUSH
60424: LD_INT 1
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 2
60434: PUSH
60435: LD_INT 1
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: LD_INT 2
60444: PUSH
60445: LD_INT 2
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 1
60454: PUSH
60455: LD_INT 2
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 2
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 2
60485: NEG
60486: PUSH
60487: LD_INT 1
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 2
60497: NEG
60498: PUSH
60499: LD_INT 2
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 2
60509: NEG
60510: PUSH
60511: LD_INT 3
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: LD_INT 3
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 0
60533: PUSH
60534: LD_INT 3
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: LD_INT 2
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 3
60555: PUSH
60556: LD_INT 2
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 3
60565: PUSH
60566: LD_INT 3
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 2
60575: PUSH
60576: LD_INT 3
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 1
60585: PUSH
60586: LD_INT 3
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 0
60595: PUSH
60596: LD_INT 3
60598: PUSH
60599: EMPTY
60600: LIST
60601: LIST
60602: PUSH
60603: LD_INT 1
60605: NEG
60606: PUSH
60607: LD_INT 2
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: PUSH
60614: LD_INT 3
60616: NEG
60617: PUSH
60618: LD_INT 2
60620: NEG
60621: PUSH
60622: EMPTY
60623: LIST
60624: LIST
60625: PUSH
60626: LD_INT 3
60628: NEG
60629: PUSH
60630: LD_INT 3
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: LIST
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60669: LD_ADDR_VAR 0 43
60673: PUSH
60674: LD_INT 0
60676: PUSH
60677: LD_INT 0
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 0
60686: PUSH
60687: LD_INT 1
60689: NEG
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 1
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: EMPTY
60702: LIST
60703: LIST
60704: PUSH
60705: LD_INT 1
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: LD_INT 1
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: NEG
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 1
60738: NEG
60739: PUSH
60740: LD_INT 1
60742: NEG
60743: PUSH
60744: EMPTY
60745: LIST
60746: LIST
60747: PUSH
60748: LD_INT 1
60750: NEG
60751: PUSH
60752: LD_INT 2
60754: NEG
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 0
60762: PUSH
60763: LD_INT 2
60765: NEG
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 1
60773: PUSH
60774: LD_INT 1
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: PUSH
60785: LD_INT 0
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: EMPTY
60799: LIST
60800: LIST
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: LD_INT 2
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 0
60814: PUSH
60815: LD_INT 2
60817: PUSH
60818: EMPTY
60819: LIST
60820: LIST
60821: PUSH
60822: LD_INT 1
60824: NEG
60825: PUSH
60826: LD_INT 1
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 2
60835: NEG
60836: PUSH
60837: LD_INT 0
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 2
60846: NEG
60847: PUSH
60848: LD_INT 1
60850: NEG
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 1
60858: NEG
60859: PUSH
60860: LD_INT 3
60862: NEG
60863: PUSH
60864: EMPTY
60865: LIST
60866: LIST
60867: PUSH
60868: LD_INT 0
60870: PUSH
60871: LD_INT 3
60873: NEG
60874: PUSH
60875: EMPTY
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 1
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: LD_INT 1
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: PUSH
60904: LD_INT 0
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 3
60913: PUSH
60914: LD_INT 1
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 3
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 0
60933: PUSH
60934: LD_INT 3
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 1
60943: NEG
60944: PUSH
60945: LD_INT 2
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: PUSH
60952: LD_INT 2
60954: NEG
60955: PUSH
60956: LD_INT 1
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: PUSH
60963: LD_INT 3
60965: NEG
60966: PUSH
60967: LD_INT 0
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 3
60976: NEG
60977: PUSH
60978: LD_INT 1
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61017: LD_ADDR_VAR 0 44
61021: PUSH
61022: LD_INT 0
61024: PUSH
61025: LD_INT 0
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: LD_INT 1
61037: NEG
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 1
61045: PUSH
61046: LD_INT 0
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: LD_INT 1
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 0
61065: PUSH
61066: LD_INT 1
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 1
61075: NEG
61076: PUSH
61077: LD_INT 0
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: LD_INT 1
61090: NEG
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 1
61098: NEG
61099: PUSH
61100: LD_INT 2
61102: NEG
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: PUSH
61108: LD_INT 1
61110: PUSH
61111: LD_INT 1
61113: NEG
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: LD_INT 2
61121: PUSH
61122: LD_INT 0
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 2
61131: PUSH
61132: LD_INT 1
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 2
61141: PUSH
61142: LD_INT 2
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 1
61151: PUSH
61152: LD_INT 2
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 1
61161: NEG
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: NEG
61188: PUSH
61189: EMPTY
61190: LIST
61191: LIST
61192: PUSH
61193: LD_INT 2
61195: NEG
61196: PUSH
61197: LD_INT 2
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 2
61207: NEG
61208: PUSH
61209: LD_INT 3
61211: NEG
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 2
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 3
61230: PUSH
61231: LD_INT 0
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: PUSH
61241: LD_INT 1
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 3
61250: PUSH
61251: LD_INT 2
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 3
61260: PUSH
61261: LD_INT 3
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 2
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 2
61280: NEG
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 3
61291: NEG
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 3
61302: NEG
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 3
61314: NEG
61315: PUSH
61316: LD_INT 2
61318: NEG
61319: PUSH
61320: EMPTY
61321: LIST
61322: LIST
61323: PUSH
61324: LD_INT 3
61326: NEG
61327: PUSH
61328: LD_INT 3
61330: NEG
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61367: LD_ADDR_VAR 0 45
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: LD_INT 1
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 1
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: LD_INT 1
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 1
61425: NEG
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 1
61436: NEG
61437: PUSH
61438: LD_INT 1
61440: NEG
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 1
61448: NEG
61449: PUSH
61450: LD_INT 2
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 0
61460: PUSH
61461: LD_INT 2
61463: NEG
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 1
61471: PUSH
61472: LD_INT 1
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 2
61482: PUSH
61483: LD_INT 1
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: LD_INT 2
61492: PUSH
61493: LD_INT 2
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 1
61502: PUSH
61503: LD_INT 2
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 0
61512: PUSH
61513: LD_INT 2
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 1
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 2
61533: NEG
61534: PUSH
61535: LD_INT 1
61537: NEG
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 2
61545: NEG
61546: PUSH
61547: LD_INT 2
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 2
61557: NEG
61558: PUSH
61559: LD_INT 3
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: LD_INT 3
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 0
61581: PUSH
61582: LD_INT 3
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 1
61592: PUSH
61593: LD_INT 2
61595: NEG
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: EMPTY
61608: LIST
61609: LIST
61610: PUSH
61611: LD_INT 3
61613: PUSH
61614: LD_INT 3
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: LD_INT 2
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 1
61633: PUSH
61634: LD_INT 3
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: PUSH
61641: LD_INT 0
61643: PUSH
61644: LD_INT 3
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 1
61653: NEG
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 3
61664: NEG
61665: PUSH
61666: LD_INT 2
61668: NEG
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 3
61676: NEG
61677: PUSH
61678: LD_INT 3
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61717: LD_ADDR_VAR 0 46
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: LD_INT 0
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 0
61734: PUSH
61735: LD_INT 1
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 1
61745: PUSH
61746: LD_INT 0
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: LD_INT 0
61765: PUSH
61766: LD_INT 1
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 1
61775: NEG
61776: PUSH
61777: LD_INT 0
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: LD_INT 1
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 1
61798: NEG
61799: PUSH
61800: LD_INT 2
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 2
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: LD_INT 1
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: LD_INT 2
61832: PUSH
61833: LD_INT 0
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 2
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 1
61852: PUSH
61853: LD_INT 2
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 0
61862: PUSH
61863: LD_INT 2
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 1
61872: NEG
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 2
61883: NEG
61884: PUSH
61885: LD_INT 0
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 2
61894: NEG
61895: PUSH
61896: LD_INT 1
61898: NEG
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: LD_INT 1
61906: NEG
61907: PUSH
61908: LD_INT 3
61910: NEG
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: LD_INT 3
61921: NEG
61922: PUSH
61923: EMPTY
61924: LIST
61925: LIST
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: LD_INT 2
61932: NEG
61933: PUSH
61934: EMPTY
61935: LIST
61936: LIST
61937: PUSH
61938: LD_INT 2
61940: PUSH
61941: LD_INT 1
61943: NEG
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 3
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 3
61961: PUSH
61962: LD_INT 1
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 1
61971: PUSH
61972: LD_INT 3
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 3
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: LD_INT 2
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 2
62002: NEG
62003: PUSH
62004: LD_INT 1
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 3
62013: NEG
62014: PUSH
62015: LD_INT 0
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 3
62024: NEG
62025: PUSH
62026: LD_INT 1
62028: NEG
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62065: LD_ADDR_VAR 0 47
62069: PUSH
62070: LD_INT 0
62072: PUSH
62073: LD_INT 0
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 0
62082: PUSH
62083: LD_INT 1
62085: NEG
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 1
62093: PUSH
62094: LD_INT 0
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 1
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 0
62113: PUSH
62114: LD_INT 1
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: NEG
62124: PUSH
62125: LD_INT 0
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: NEG
62135: PUSH
62136: LD_INT 1
62138: NEG
62139: PUSH
62140: EMPTY
62141: LIST
62142: LIST
62143: PUSH
62144: LD_INT 1
62146: NEG
62147: PUSH
62148: LD_INT 2
62150: NEG
62151: PUSH
62152: EMPTY
62153: LIST
62154: LIST
62155: PUSH
62156: LD_INT 0
62158: PUSH
62159: LD_INT 2
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 1
62169: PUSH
62170: LD_INT 1
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 2
62180: NEG
62181: PUSH
62182: LD_INT 1
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 2
62192: NEG
62193: PUSH
62194: LD_INT 2
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: EMPTY
62203: LIST
62204: LIST
62205: LIST
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62216: LD_ADDR_VAR 0 48
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 0
62233: PUSH
62234: LD_INT 1
62236: NEG
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: PUSH
62242: LD_INT 1
62244: PUSH
62245: LD_INT 0
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PUSH
62252: LD_INT 1
62254: PUSH
62255: LD_INT 1
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 0
62264: PUSH
62265: LD_INT 1
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: NEG
62275: PUSH
62276: LD_INT 0
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 1
62285: NEG
62286: PUSH
62287: LD_INT 1
62289: NEG
62290: PUSH
62291: EMPTY
62292: LIST
62293: LIST
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: LD_INT 2
62301: NEG
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: PUSH
62307: LD_INT 0
62309: PUSH
62310: LD_INT 2
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: PUSH
62321: LD_INT 1
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 2
62331: PUSH
62332: LD_INT 0
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 2
62341: PUSH
62342: LD_INT 1
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62363: LD_ADDR_VAR 0 49
62367: PUSH
62368: LD_INT 0
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: LD_INT 1
62383: NEG
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 1
62391: PUSH
62392: LD_INT 0
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: LD_INT 1
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 1
62421: NEG
62422: PUSH
62423: LD_INT 0
62425: PUSH
62426: EMPTY
62427: LIST
62428: LIST
62429: PUSH
62430: LD_INT 1
62432: NEG
62433: PUSH
62434: LD_INT 1
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 1
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 2
62455: PUSH
62456: LD_INT 0
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 2
62465: PUSH
62466: LD_INT 1
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 2
62475: PUSH
62476: LD_INT 2
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 1
62485: PUSH
62486: LD_INT 2
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: LIST
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62507: LD_ADDR_VAR 0 50
62511: PUSH
62512: LD_INT 0
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 1
62535: PUSH
62536: LD_INT 0
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 1
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 0
62555: PUSH
62556: LD_INT 1
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 1
62565: NEG
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: EMPTY
62571: LIST
62572: LIST
62573: PUSH
62574: LD_INT 1
62576: NEG
62577: PUSH
62578: LD_INT 1
62580: NEG
62581: PUSH
62582: EMPTY
62583: LIST
62584: LIST
62585: PUSH
62586: LD_INT 2
62588: PUSH
62589: LD_INT 1
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 2
62598: PUSH
62599: LD_INT 2
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: LD_INT 1
62608: PUSH
62609: LD_INT 2
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 2
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 1
62628: NEG
62629: PUSH
62630: LD_INT 1
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: EMPTY
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62651: LD_ADDR_VAR 0 51
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: LD_INT 0
62661: PUSH
62662: EMPTY
62663: LIST
62664: LIST
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 1
62671: NEG
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: LD_INT 0
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: EMPTY
62694: LIST
62695: LIST
62696: PUSH
62697: LD_INT 0
62699: PUSH
62700: LD_INT 1
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 1
62709: NEG
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 1
62720: NEG
62721: PUSH
62722: LD_INT 1
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 1
62752: NEG
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 2
62763: NEG
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: NEG
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: LIST
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62798: LD_ADDR_VAR 0 52
62802: PUSH
62803: LD_INT 0
62805: PUSH
62806: LD_INT 0
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: LD_INT 1
62818: NEG
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: LD_INT 0
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: LD_INT 1
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_INT 1
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: LD_INT 0
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 1
62867: NEG
62868: PUSH
62869: LD_INT 1
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 1
62879: NEG
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 1
62891: NEG
62892: PUSH
62893: LD_INT 1
62895: PUSH
62896: EMPTY
62897: LIST
62898: LIST
62899: PUSH
62900: LD_INT 2
62902: NEG
62903: PUSH
62904: LD_INT 0
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 2
62913: NEG
62914: PUSH
62915: LD_INT 1
62917: NEG
62918: PUSH
62919: EMPTY
62920: LIST
62921: LIST
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: LD_INT 2
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62949: LD_ADDR_VAR 0 53
62953: PUSH
62954: LD_INT 0
62956: PUSH
62957: LD_INT 0
62959: PUSH
62960: EMPTY
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: LD_INT 1
62969: NEG
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_INT 1
62977: PUSH
62978: LD_INT 0
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: PUSH
62985: LD_INT 1
62987: PUSH
62988: LD_INT 1
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: LD_INT 1
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 1
63007: NEG
63008: PUSH
63009: LD_INT 0
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 1
63018: NEG
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: LD_INT 2
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 2
63045: NEG
63046: PUSH
63047: EMPTY
63048: LIST
63049: LIST
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: LD_INT 1
63056: NEG
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: PUSH
63062: LD_INT 2
63064: PUSH
63065: LD_INT 0
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 2
63074: PUSH
63075: LD_INT 1
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 2
63084: PUSH
63085: LD_INT 2
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: LD_INT 2
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: LD_INT 2
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: NEG
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 2
63125: NEG
63126: PUSH
63127: LD_INT 0
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: LD_INT 2
63136: NEG
63137: PUSH
63138: LD_INT 1
63140: NEG
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 2
63148: NEG
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: EMPTY
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63179: LD_ADDR_VAR 0 54
63183: PUSH
63184: LD_INT 0
63186: PUSH
63187: LD_INT 0
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: LD_INT 1
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: LD_INT 0
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 1
63217: PUSH
63218: LD_INT 1
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 0
63227: PUSH
63228: LD_INT 1
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 1
63237: NEG
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 1
63248: NEG
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: LD_INT 2
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 0
63272: PUSH
63273: LD_INT 2
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: LD_INT 1
63286: NEG
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 2
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: LD_INT 2
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 2
63314: PUSH
63315: LD_INT 2
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 1
63324: PUSH
63325: LD_INT 2
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 0
63334: PUSH
63335: LD_INT 2
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 1
63344: NEG
63345: PUSH
63346: LD_INT 1
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 2
63355: NEG
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: EMPTY
63361: LIST
63362: LIST
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: LD_INT 1
63370: NEG
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 2
63378: NEG
63379: PUSH
63380: LD_INT 2
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63409: LD_ADDR_VAR 0 55
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: LD_INT 0
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: PUSH
63424: LD_INT 0
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: EMPTY
63432: LIST
63433: LIST
63434: PUSH
63435: LD_INT 1
63437: PUSH
63438: LD_INT 0
63440: PUSH
63441: EMPTY
63442: LIST
63443: LIST
63444: PUSH
63445: LD_INT 1
63447: PUSH
63448: LD_INT 1
63450: PUSH
63451: EMPTY
63452: LIST
63453: LIST
63454: PUSH
63455: LD_INT 0
63457: PUSH
63458: LD_INT 1
63460: PUSH
63461: EMPTY
63462: LIST
63463: LIST
63464: PUSH
63465: LD_INT 1
63467: NEG
63468: PUSH
63469: LD_INT 0
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 1
63490: NEG
63491: PUSH
63492: LD_INT 2
63494: NEG
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: LD_INT 2
63505: NEG
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: LD_INT 1
63513: PUSH
63514: LD_INT 1
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 2
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 2
63534: PUSH
63535: LD_INT 1
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 2
63544: PUSH
63545: LD_INT 2
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: LD_INT 2
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 0
63564: PUSH
63565: LD_INT 2
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 1
63574: NEG
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 2
63585: NEG
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 2
63596: NEG
63597: PUSH
63598: LD_INT 1
63600: NEG
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 2
63608: NEG
63609: PUSH
63610: LD_INT 2
63612: NEG
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: LIST
63622: LIST
63623: LIST
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63639: LD_ADDR_VAR 0 56
63643: PUSH
63644: LD_INT 0
63646: PUSH
63647: LD_INT 0
63649: PUSH
63650: EMPTY
63651: LIST
63652: LIST
63653: PUSH
63654: LD_INT 0
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 1
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 1
63677: PUSH
63678: LD_INT 1
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 0
63687: PUSH
63688: LD_INT 1
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 1
63697: NEG
63698: PUSH
63699: LD_INT 0
63701: PUSH
63702: EMPTY
63703: LIST
63704: LIST
63705: PUSH
63706: LD_INT 1
63708: NEG
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: NEG
63721: PUSH
63722: LD_INT 2
63724: NEG
63725: PUSH
63726: EMPTY
63727: LIST
63728: LIST
63729: PUSH
63730: LD_INT 0
63732: PUSH
63733: LD_INT 2
63735: NEG
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 1
63743: PUSH
63744: LD_INT 1
63746: NEG
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: LD_INT 2
63754: PUSH
63755: LD_INT 0
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: LD_INT 1
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 2
63774: PUSH
63775: LD_INT 2
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 2
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 1
63804: NEG
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: LD_INT 0
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: PUSH
63824: LD_INT 2
63826: NEG
63827: PUSH
63828: LD_INT 1
63830: NEG
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 2
63838: NEG
63839: PUSH
63840: LD_INT 2
63842: NEG
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: LIST
63852: LIST
63853: LIST
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63869: LD_ADDR_VAR 0 57
63873: PUSH
63874: LD_INT 0
63876: PUSH
63877: LD_INT 0
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 0
63886: PUSH
63887: LD_INT 1
63889: NEG
63890: PUSH
63891: EMPTY
63892: LIST
63893: LIST
63894: PUSH
63895: LD_INT 1
63897: PUSH
63898: LD_INT 0
63900: PUSH
63901: EMPTY
63902: LIST
63903: LIST
63904: PUSH
63905: LD_INT 1
63907: PUSH
63908: LD_INT 1
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: NEG
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 1
63938: NEG
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 1
63950: NEG
63951: PUSH
63952: LD_INT 2
63954: NEG
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: LD_INT 2
63965: NEG
63966: PUSH
63967: EMPTY
63968: LIST
63969: LIST
63970: PUSH
63971: LD_INT 1
63973: PUSH
63974: LD_INT 1
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 2
63984: PUSH
63985: LD_INT 0
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 2
63994: PUSH
63995: LD_INT 1
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 2
64004: PUSH
64005: LD_INT 2
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 1
64014: PUSH
64015: LD_INT 2
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 0
64024: PUSH
64025: LD_INT 2
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 1
64034: NEG
64035: PUSH
64036: LD_INT 1
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: LD_INT 2
64045: NEG
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: EMPTY
64051: LIST
64052: LIST
64053: PUSH
64054: LD_INT 2
64056: NEG
64057: PUSH
64058: LD_INT 1
64060: NEG
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 2
64068: NEG
64069: PUSH
64070: LD_INT 2
64072: NEG
64073: PUSH
64074: EMPTY
64075: LIST
64076: LIST
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64099: LD_ADDR_VAR 0 58
64103: PUSH
64104: LD_INT 0
64106: PUSH
64107: LD_INT 0
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 0
64116: PUSH
64117: LD_INT 1
64119: NEG
64120: PUSH
64121: EMPTY
64122: LIST
64123: LIST
64124: PUSH
64125: LD_INT 1
64127: PUSH
64128: LD_INT 0
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 1
64137: PUSH
64138: LD_INT 1
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 0
64147: PUSH
64148: LD_INT 1
64150: PUSH
64151: EMPTY
64152: LIST
64153: LIST
64154: PUSH
64155: LD_INT 1
64157: NEG
64158: PUSH
64159: LD_INT 0
64161: PUSH
64162: EMPTY
64163: LIST
64164: LIST
64165: PUSH
64166: LD_INT 1
64168: NEG
64169: PUSH
64170: LD_INT 1
64172: NEG
64173: PUSH
64174: EMPTY
64175: LIST
64176: LIST
64177: PUSH
64178: LD_INT 1
64180: NEG
64181: PUSH
64182: LD_INT 2
64184: NEG
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 0
64192: PUSH
64193: LD_INT 2
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: LD_INT 2
64214: PUSH
64215: LD_INT 0
64217: PUSH
64218: EMPTY
64219: LIST
64220: LIST
64221: PUSH
64222: LD_INT 2
64224: PUSH
64225: LD_INT 1
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 2
64234: PUSH
64235: LD_INT 2
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 1
64244: PUSH
64245: LD_INT 2
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 0
64254: PUSH
64255: LD_INT 2
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 1
64264: NEG
64265: PUSH
64266: LD_INT 1
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 2
64275: NEG
64276: PUSH
64277: LD_INT 0
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: PUSH
64284: LD_INT 2
64286: NEG
64287: PUSH
64288: LD_INT 1
64290: NEG
64291: PUSH
64292: EMPTY
64293: LIST
64294: LIST
64295: PUSH
64296: LD_INT 2
64298: NEG
64299: PUSH
64300: LD_INT 2
64302: NEG
64303: PUSH
64304: EMPTY
64305: LIST
64306: LIST
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64329: LD_ADDR_VAR 0 59
64333: PUSH
64334: LD_INT 0
64336: PUSH
64337: LD_INT 0
64339: PUSH
64340: EMPTY
64341: LIST
64342: LIST
64343: PUSH
64344: LD_INT 0
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: PUSH
64358: LD_INT 0
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 1
64367: PUSH
64368: LD_INT 1
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: PUSH
64375: LD_INT 0
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: PUSH
64385: LD_INT 1
64387: NEG
64388: PUSH
64389: LD_INT 0
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: PUSH
64396: LD_INT 1
64398: NEG
64399: PUSH
64400: LD_INT 1
64402: NEG
64403: PUSH
64404: EMPTY
64405: LIST
64406: LIST
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64417: LD_ADDR_VAR 0 60
64421: PUSH
64422: LD_INT 0
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 0
64434: PUSH
64435: LD_INT 1
64437: NEG
64438: PUSH
64439: EMPTY
64440: LIST
64441: LIST
64442: PUSH
64443: LD_INT 1
64445: PUSH
64446: LD_INT 0
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 1
64455: PUSH
64456: LD_INT 1
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PUSH
64473: LD_INT 1
64475: NEG
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: EMPTY
64481: LIST
64482: LIST
64483: PUSH
64484: LD_INT 1
64486: NEG
64487: PUSH
64488: LD_INT 1
64490: NEG
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64505: LD_ADDR_VAR 0 61
64509: PUSH
64510: LD_INT 0
64512: PUSH
64513: LD_INT 0
64515: PUSH
64516: EMPTY
64517: LIST
64518: LIST
64519: PUSH
64520: LD_INT 0
64522: PUSH
64523: LD_INT 1
64525: NEG
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: PUSH
64531: LD_INT 1
64533: PUSH
64534: LD_INT 0
64536: PUSH
64537: EMPTY
64538: LIST
64539: LIST
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 0
64553: PUSH
64554: LD_INT 1
64556: PUSH
64557: EMPTY
64558: LIST
64559: LIST
64560: PUSH
64561: LD_INT 1
64563: NEG
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: LD_INT 1
64578: NEG
64579: PUSH
64580: EMPTY
64581: LIST
64582: LIST
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64593: LD_ADDR_VAR 0 62
64597: PUSH
64598: LD_INT 0
64600: PUSH
64601: LD_INT 0
64603: PUSH
64604: EMPTY
64605: LIST
64606: LIST
64607: PUSH
64608: LD_INT 0
64610: PUSH
64611: LD_INT 1
64613: NEG
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 1
64621: PUSH
64622: LD_INT 0
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: LD_INT 1
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 0
64641: PUSH
64642: LD_INT 1
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: PUSH
64649: LD_INT 1
64651: NEG
64652: PUSH
64653: LD_INT 0
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: PUSH
64664: LD_INT 1
64666: NEG
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64681: LD_ADDR_VAR 0 63
64685: PUSH
64686: LD_INT 0
64688: PUSH
64689: LD_INT 0
64691: PUSH
64692: EMPTY
64693: LIST
64694: LIST
64695: PUSH
64696: LD_INT 0
64698: PUSH
64699: LD_INT 1
64701: NEG
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: PUSH
64707: LD_INT 1
64709: PUSH
64710: LD_INT 0
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 1
64719: PUSH
64720: LD_INT 1
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: LD_INT 1
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 1
64739: NEG
64740: PUSH
64741: LD_INT 0
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: LD_INT 1
64754: NEG
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64769: LD_ADDR_VAR 0 64
64773: PUSH
64774: LD_INT 0
64776: PUSH
64777: LD_INT 0
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: LD_INT 1
64789: NEG
64790: PUSH
64791: EMPTY
64792: LIST
64793: LIST
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: LD_INT 0
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 1
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: LD_INT 1
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: LD_INT 0
64831: PUSH
64832: EMPTY
64833: LIST
64834: LIST
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: ST_TO_ADDR
// end ; 1 :
64857: GO 70754
64859: LD_INT 1
64861: DOUBLE
64862: EQUAL
64863: IFTRUE 64867
64865: GO 67490
64867: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64868: LD_ADDR_VAR 0 11
64872: PUSH
64873: LD_INT 1
64875: NEG
64876: PUSH
64877: LD_INT 3
64879: NEG
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 0
64887: PUSH
64888: LD_INT 3
64890: NEG
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 1
64898: PUSH
64899: LD_INT 2
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: LIST
64911: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64912: LD_ADDR_VAR 0 12
64916: PUSH
64917: LD_INT 2
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 3
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 3
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: LIST
64952: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64953: LD_ADDR_VAR 0 13
64957: PUSH
64958: LD_INT 3
64960: PUSH
64961: LD_INT 2
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 3
64970: PUSH
64971: LD_INT 3
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: LD_INT 2
64980: PUSH
64981: LD_INT 3
64983: PUSH
64984: EMPTY
64985: LIST
64986: LIST
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: LIST
64992: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64993: LD_ADDR_VAR 0 14
64997: PUSH
64998: LD_INT 1
65000: PUSH
65001: LD_INT 3
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 3
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 1
65020: NEG
65021: PUSH
65022: LD_INT 2
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: LIST
65033: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65034: LD_ADDR_VAR 0 15
65038: PUSH
65039: LD_INT 2
65041: NEG
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 3
65052: NEG
65053: PUSH
65054: LD_INT 0
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 3
65063: NEG
65064: PUSH
65065: LD_INT 1
65067: NEG
65068: PUSH
65069: EMPTY
65070: LIST
65071: LIST
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: LIST
65077: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65078: LD_ADDR_VAR 0 16
65082: PUSH
65083: LD_INT 2
65085: NEG
65086: PUSH
65087: LD_INT 3
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 3
65097: NEG
65098: PUSH
65099: LD_INT 2
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 3
65109: NEG
65110: PUSH
65111: LD_INT 3
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: LIST
65123: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65124: LD_ADDR_VAR 0 17
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: LD_INT 3
65135: NEG
65136: PUSH
65137: EMPTY
65138: LIST
65139: LIST
65140: PUSH
65141: LD_INT 0
65143: PUSH
65144: LD_INT 3
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: LD_INT 2
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: LIST
65167: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65168: LD_ADDR_VAR 0 18
65172: PUSH
65173: LD_INT 2
65175: PUSH
65176: LD_INT 1
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 3
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 3
65196: PUSH
65197: LD_INT 1
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: LIST
65208: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65209: LD_ADDR_VAR 0 19
65213: PUSH
65214: LD_INT 3
65216: PUSH
65217: LD_INT 2
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: PUSH
65224: LD_INT 3
65226: PUSH
65227: LD_INT 3
65229: PUSH
65230: EMPTY
65231: LIST
65232: LIST
65233: PUSH
65234: LD_INT 2
65236: PUSH
65237: LD_INT 3
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: LIST
65248: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65249: LD_ADDR_VAR 0 20
65253: PUSH
65254: LD_INT 1
65256: PUSH
65257: LD_INT 3
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 0
65266: PUSH
65267: LD_INT 3
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 1
65276: NEG
65277: PUSH
65278: LD_INT 2
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: LIST
65289: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65290: LD_ADDR_VAR 0 21
65294: PUSH
65295: LD_INT 2
65297: NEG
65298: PUSH
65299: LD_INT 1
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 3
65308: NEG
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 3
65319: NEG
65320: PUSH
65321: LD_INT 1
65323: NEG
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: EMPTY
65330: LIST
65331: LIST
65332: LIST
65333: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65334: LD_ADDR_VAR 0 22
65338: PUSH
65339: LD_INT 2
65341: NEG
65342: PUSH
65343: LD_INT 3
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 3
65353: NEG
65354: PUSH
65355: LD_INT 2
65357: NEG
65358: PUSH
65359: EMPTY
65360: LIST
65361: LIST
65362: PUSH
65363: LD_INT 3
65365: NEG
65366: PUSH
65367: LD_INT 3
65369: NEG
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: LIST
65379: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65380: LD_ADDR_VAR 0 23
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: LD_INT 3
65390: NEG
65391: PUSH
65392: EMPTY
65393: LIST
65394: LIST
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: LD_INT 4
65402: NEG
65403: PUSH
65404: EMPTY
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 1
65410: PUSH
65411: LD_INT 3
65413: NEG
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: LIST
65423: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65424: LD_ADDR_VAR 0 24
65428: PUSH
65429: LD_INT 3
65431: PUSH
65432: LD_INT 0
65434: PUSH
65435: EMPTY
65436: LIST
65437: LIST
65438: PUSH
65439: LD_INT 3
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 4
65452: PUSH
65453: LD_INT 1
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: EMPTY
65461: LIST
65462: LIST
65463: LIST
65464: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65465: LD_ADDR_VAR 0 25
65469: PUSH
65470: LD_INT 3
65472: PUSH
65473: LD_INT 3
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 4
65482: PUSH
65483: LD_INT 3
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 3
65492: PUSH
65493: LD_INT 4
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: LIST
65504: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65505: LD_ADDR_VAR 0 26
65509: PUSH
65510: LD_INT 0
65512: PUSH
65513: LD_INT 3
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 1
65522: PUSH
65523: LD_INT 4
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 1
65532: NEG
65533: PUSH
65534: LD_INT 3
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: EMPTY
65542: LIST
65543: LIST
65544: LIST
65545: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65546: LD_ADDR_VAR 0 27
65550: PUSH
65551: LD_INT 3
65553: NEG
65554: PUSH
65555: LD_INT 0
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 3
65564: NEG
65565: PUSH
65566: LD_INT 1
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 4
65575: NEG
65576: PUSH
65577: LD_INT 1
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: LIST
65589: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65590: LD_ADDR_VAR 0 28
65594: PUSH
65595: LD_INT 3
65597: NEG
65598: PUSH
65599: LD_INT 3
65601: NEG
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 3
65609: NEG
65610: PUSH
65611: LD_INT 4
65613: NEG
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: PUSH
65619: LD_INT 4
65621: NEG
65622: PUSH
65623: LD_INT 3
65625: NEG
65626: PUSH
65627: EMPTY
65628: LIST
65629: LIST
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: LIST
65635: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65636: LD_ADDR_VAR 0 29
65640: PUSH
65641: LD_INT 1
65643: NEG
65644: PUSH
65645: LD_INT 3
65647: NEG
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: PUSH
65653: LD_INT 0
65655: PUSH
65656: LD_INT 3
65658: NEG
65659: PUSH
65660: EMPTY
65661: LIST
65662: LIST
65663: PUSH
65664: LD_INT 1
65666: PUSH
65667: LD_INT 2
65669: NEG
65670: PUSH
65671: EMPTY
65672: LIST
65673: LIST
65674: PUSH
65675: LD_INT 1
65677: NEG
65678: PUSH
65679: LD_INT 4
65681: NEG
65682: PUSH
65683: EMPTY
65684: LIST
65685: LIST
65686: PUSH
65687: LD_INT 0
65689: PUSH
65690: LD_INT 4
65692: NEG
65693: PUSH
65694: EMPTY
65695: LIST
65696: LIST
65697: PUSH
65698: LD_INT 1
65700: PUSH
65701: LD_INT 3
65703: NEG
65704: PUSH
65705: EMPTY
65706: LIST
65707: LIST
65708: PUSH
65709: LD_INT 1
65711: NEG
65712: PUSH
65713: LD_INT 5
65715: NEG
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: PUSH
65721: LD_INT 0
65723: PUSH
65724: LD_INT 5
65726: NEG
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 1
65734: PUSH
65735: LD_INT 4
65737: NEG
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: NEG
65746: PUSH
65747: LD_INT 6
65749: NEG
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 0
65757: PUSH
65758: LD_INT 6
65760: NEG
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: PUSH
65769: LD_INT 5
65771: NEG
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: EMPTY
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65791: LD_ADDR_VAR 0 30
65795: PUSH
65796: LD_INT 2
65798: PUSH
65799: LD_INT 1
65801: NEG
65802: PUSH
65803: EMPTY
65804: LIST
65805: LIST
65806: PUSH
65807: LD_INT 3
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 3
65819: PUSH
65820: LD_INT 1
65822: PUSH
65823: EMPTY
65824: LIST
65825: LIST
65826: PUSH
65827: LD_INT 3
65829: PUSH
65830: LD_INT 1
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 4
65840: PUSH
65841: LD_INT 0
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 4
65850: PUSH
65851: LD_INT 1
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: PUSH
65858: LD_INT 4
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: EMPTY
65866: LIST
65867: LIST
65868: PUSH
65869: LD_INT 5
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: EMPTY
65876: LIST
65877: LIST
65878: PUSH
65879: LD_INT 5
65881: PUSH
65882: LD_INT 1
65884: PUSH
65885: EMPTY
65886: LIST
65887: LIST
65888: PUSH
65889: LD_INT 5
65891: PUSH
65892: LD_INT 1
65894: NEG
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 6
65902: PUSH
65903: LD_INT 0
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 6
65912: PUSH
65913: LD_INT 1
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65934: LD_ADDR_VAR 0 31
65938: PUSH
65939: LD_INT 3
65941: PUSH
65942: LD_INT 2
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 3
65951: PUSH
65952: LD_INT 3
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 2
65961: PUSH
65962: LD_INT 3
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 4
65971: PUSH
65972: LD_INT 3
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 4
65981: PUSH
65982: LD_INT 4
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 3
65991: PUSH
65992: LD_INT 4
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 5
66001: PUSH
66002: LD_INT 4
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 5
66011: PUSH
66012: LD_INT 5
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 4
66021: PUSH
66022: LD_INT 5
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 6
66031: PUSH
66032: LD_INT 5
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 6
66041: PUSH
66042: LD_INT 6
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 5
66051: PUSH
66052: LD_INT 6
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: LIST
66063: LIST
66064: LIST
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66073: LD_ADDR_VAR 0 32
66077: PUSH
66078: LD_INT 1
66080: PUSH
66081: LD_INT 3
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 0
66090: PUSH
66091: LD_INT 3
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 1
66100: NEG
66101: PUSH
66102: LD_INT 2
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 1
66111: PUSH
66112: LD_INT 4
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 0
66121: PUSH
66122: LD_INT 4
66124: PUSH
66125: EMPTY
66126: LIST
66127: LIST
66128: PUSH
66129: LD_INT 1
66131: NEG
66132: PUSH
66133: LD_INT 3
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 1
66142: PUSH
66143: LD_INT 5
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 0
66152: PUSH
66153: LD_INT 5
66155: PUSH
66156: EMPTY
66157: LIST
66158: LIST
66159: PUSH
66160: LD_INT 1
66162: NEG
66163: PUSH
66164: LD_INT 4
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 1
66173: PUSH
66174: LD_INT 6
66176: PUSH
66177: EMPTY
66178: LIST
66179: LIST
66180: PUSH
66181: LD_INT 0
66183: PUSH
66184: LD_INT 6
66186: PUSH
66187: EMPTY
66188: LIST
66189: LIST
66190: PUSH
66191: LD_INT 1
66193: NEG
66194: PUSH
66195: LD_INT 5
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66216: LD_ADDR_VAR 0 33
66220: PUSH
66221: LD_INT 2
66223: NEG
66224: PUSH
66225: LD_INT 1
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 3
66234: NEG
66235: PUSH
66236: LD_INT 0
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 3
66245: NEG
66246: PUSH
66247: LD_INT 1
66249: NEG
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 3
66257: NEG
66258: PUSH
66259: LD_INT 1
66261: PUSH
66262: EMPTY
66263: LIST
66264: LIST
66265: PUSH
66266: LD_INT 4
66268: NEG
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: EMPTY
66274: LIST
66275: LIST
66276: PUSH
66277: LD_INT 4
66279: NEG
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 4
66291: NEG
66292: PUSH
66293: LD_INT 1
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 5
66302: NEG
66303: PUSH
66304: LD_INT 0
66306: PUSH
66307: EMPTY
66308: LIST
66309: LIST
66310: PUSH
66311: LD_INT 5
66313: NEG
66314: PUSH
66315: LD_INT 1
66317: NEG
66318: PUSH
66319: EMPTY
66320: LIST
66321: LIST
66322: PUSH
66323: LD_INT 5
66325: NEG
66326: PUSH
66327: LD_INT 1
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 6
66336: NEG
66337: PUSH
66338: LD_INT 0
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 6
66347: NEG
66348: PUSH
66349: LD_INT 1
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66371: LD_ADDR_VAR 0 34
66375: PUSH
66376: LD_INT 2
66378: NEG
66379: PUSH
66380: LD_INT 3
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 3
66390: NEG
66391: PUSH
66392: LD_INT 2
66394: NEG
66395: PUSH
66396: EMPTY
66397: LIST
66398: LIST
66399: PUSH
66400: LD_INT 3
66402: NEG
66403: PUSH
66404: LD_INT 3
66406: NEG
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 3
66414: NEG
66415: PUSH
66416: LD_INT 4
66418: NEG
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 4
66426: NEG
66427: PUSH
66428: LD_INT 3
66430: NEG
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: PUSH
66436: LD_INT 4
66438: NEG
66439: PUSH
66440: LD_INT 4
66442: NEG
66443: PUSH
66444: EMPTY
66445: LIST
66446: LIST
66447: PUSH
66448: LD_INT 4
66450: NEG
66451: PUSH
66452: LD_INT 5
66454: NEG
66455: PUSH
66456: EMPTY
66457: LIST
66458: LIST
66459: PUSH
66460: LD_INT 5
66462: NEG
66463: PUSH
66464: LD_INT 4
66466: NEG
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: PUSH
66472: LD_INT 5
66474: NEG
66475: PUSH
66476: LD_INT 5
66478: NEG
66479: PUSH
66480: EMPTY
66481: LIST
66482: LIST
66483: PUSH
66484: LD_INT 5
66486: NEG
66487: PUSH
66488: LD_INT 6
66490: NEG
66491: PUSH
66492: EMPTY
66493: LIST
66494: LIST
66495: PUSH
66496: LD_INT 6
66498: NEG
66499: PUSH
66500: LD_INT 5
66502: NEG
66503: PUSH
66504: EMPTY
66505: LIST
66506: LIST
66507: PUSH
66508: LD_INT 6
66510: NEG
66511: PUSH
66512: LD_INT 6
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: EMPTY
66521: LIST
66522: LIST
66523: LIST
66524: LIST
66525: LIST
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66534: LD_ADDR_VAR 0 41
66538: PUSH
66539: LD_INT 0
66541: PUSH
66542: LD_INT 2
66544: NEG
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 1
66552: NEG
66553: PUSH
66554: LD_INT 3
66556: NEG
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 1
66564: PUSH
66565: LD_INT 2
66567: NEG
66568: PUSH
66569: EMPTY
66570: LIST
66571: LIST
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: LIST
66577: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66578: LD_ADDR_VAR 0 42
66582: PUSH
66583: LD_INT 2
66585: PUSH
66586: LD_INT 0
66588: PUSH
66589: EMPTY
66590: LIST
66591: LIST
66592: PUSH
66593: LD_INT 2
66595: PUSH
66596: LD_INT 1
66598: NEG
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 3
66606: PUSH
66607: LD_INT 1
66609: PUSH
66610: EMPTY
66611: LIST
66612: LIST
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: LIST
66618: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66619: LD_ADDR_VAR 0 43
66623: PUSH
66624: LD_INT 2
66626: PUSH
66627: LD_INT 2
66629: PUSH
66630: EMPTY
66631: LIST
66632: LIST
66633: PUSH
66634: LD_INT 3
66636: PUSH
66637: LD_INT 2
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 2
66646: PUSH
66647: LD_INT 3
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: LIST
66658: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66659: LD_ADDR_VAR 0 44
66663: PUSH
66664: LD_INT 0
66666: PUSH
66667: LD_INT 2
66669: PUSH
66670: EMPTY
66671: LIST
66672: LIST
66673: PUSH
66674: LD_INT 1
66676: PUSH
66677: LD_INT 3
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 1
66686: NEG
66687: PUSH
66688: LD_INT 2
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: LIST
66699: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66700: LD_ADDR_VAR 0 45
66704: PUSH
66705: LD_INT 2
66707: NEG
66708: PUSH
66709: LD_INT 0
66711: PUSH
66712: EMPTY
66713: LIST
66714: LIST
66715: PUSH
66716: LD_INT 2
66718: NEG
66719: PUSH
66720: LD_INT 1
66722: PUSH
66723: EMPTY
66724: LIST
66725: LIST
66726: PUSH
66727: LD_INT 3
66729: NEG
66730: PUSH
66731: LD_INT 1
66733: NEG
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: LIST
66743: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66744: LD_ADDR_VAR 0 46
66748: PUSH
66749: LD_INT 2
66751: NEG
66752: PUSH
66753: LD_INT 2
66755: NEG
66756: PUSH
66757: EMPTY
66758: LIST
66759: LIST
66760: PUSH
66761: LD_INT 2
66763: NEG
66764: PUSH
66765: LD_INT 3
66767: NEG
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 3
66775: NEG
66776: PUSH
66777: LD_INT 2
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: EMPTY
66786: LIST
66787: LIST
66788: LIST
66789: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66790: LD_ADDR_VAR 0 47
66794: PUSH
66795: LD_INT 2
66797: NEG
66798: PUSH
66799: LD_INT 3
66801: NEG
66802: PUSH
66803: EMPTY
66804: LIST
66805: LIST
66806: PUSH
66807: LD_INT 1
66809: NEG
66810: PUSH
66811: LD_INT 3
66813: NEG
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: EMPTY
66820: LIST
66821: LIST
66822: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66823: LD_ADDR_VAR 0 48
66827: PUSH
66828: LD_INT 1
66830: PUSH
66831: LD_INT 2
66833: NEG
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 2
66841: PUSH
66842: LD_INT 1
66844: NEG
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66854: LD_ADDR_VAR 0 49
66858: PUSH
66859: LD_INT 3
66861: PUSH
66862: LD_INT 1
66864: PUSH
66865: EMPTY
66866: LIST
66867: LIST
66868: PUSH
66869: LD_INT 3
66871: PUSH
66872: LD_INT 2
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66883: LD_ADDR_VAR 0 50
66887: PUSH
66888: LD_INT 2
66890: PUSH
66891: LD_INT 3
66893: PUSH
66894: EMPTY
66895: LIST
66896: LIST
66897: PUSH
66898: LD_INT 1
66900: PUSH
66901: LD_INT 3
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66912: LD_ADDR_VAR 0 51
66916: PUSH
66917: LD_INT 1
66919: NEG
66920: PUSH
66921: LD_INT 2
66923: PUSH
66924: EMPTY
66925: LIST
66926: LIST
66927: PUSH
66928: LD_INT 2
66930: NEG
66931: PUSH
66932: LD_INT 1
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66943: LD_ADDR_VAR 0 52
66947: PUSH
66948: LD_INT 3
66950: NEG
66951: PUSH
66952: LD_INT 1
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 3
66962: NEG
66963: PUSH
66964: LD_INT 2
66966: NEG
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: EMPTY
66973: LIST
66974: LIST
66975: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66976: LD_ADDR_VAR 0 53
66980: PUSH
66981: LD_INT 1
66983: NEG
66984: PUSH
66985: LD_INT 3
66987: NEG
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 0
66995: PUSH
66996: LD_INT 3
66998: NEG
66999: PUSH
67000: EMPTY
67001: LIST
67002: LIST
67003: PUSH
67004: LD_INT 1
67006: PUSH
67007: LD_INT 2
67009: NEG
67010: PUSH
67011: EMPTY
67012: LIST
67013: LIST
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: LIST
67019: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67020: LD_ADDR_VAR 0 54
67024: PUSH
67025: LD_INT 2
67027: PUSH
67028: LD_INT 1
67030: NEG
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 3
67038: PUSH
67039: LD_INT 0
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 3
67048: PUSH
67049: LD_INT 1
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: LIST
67060: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67061: LD_ADDR_VAR 0 55
67065: PUSH
67066: LD_INT 3
67068: PUSH
67069: LD_INT 2
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: LD_INT 3
67078: PUSH
67079: LD_INT 3
67081: PUSH
67082: EMPTY
67083: LIST
67084: LIST
67085: PUSH
67086: LD_INT 2
67088: PUSH
67089: LD_INT 3
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: LIST
67100: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67101: LD_ADDR_VAR 0 56
67105: PUSH
67106: LD_INT 1
67108: PUSH
67109: LD_INT 3
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 0
67118: PUSH
67119: LD_INT 3
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 1
67128: NEG
67129: PUSH
67130: LD_INT 2
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: PUSH
67137: EMPTY
67138: LIST
67139: LIST
67140: LIST
67141: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67142: LD_ADDR_VAR 0 57
67146: PUSH
67147: LD_INT 2
67149: NEG
67150: PUSH
67151: LD_INT 1
67153: PUSH
67154: EMPTY
67155: LIST
67156: LIST
67157: PUSH
67158: LD_INT 3
67160: NEG
67161: PUSH
67162: LD_INT 0
67164: PUSH
67165: EMPTY
67166: LIST
67167: LIST
67168: PUSH
67169: LD_INT 3
67171: NEG
67172: PUSH
67173: LD_INT 1
67175: NEG
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: LIST
67185: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67186: LD_ADDR_VAR 0 58
67190: PUSH
67191: LD_INT 2
67193: NEG
67194: PUSH
67195: LD_INT 3
67197: NEG
67198: PUSH
67199: EMPTY
67200: LIST
67201: LIST
67202: PUSH
67203: LD_INT 3
67205: NEG
67206: PUSH
67207: LD_INT 2
67209: NEG
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_INT 3
67217: NEG
67218: PUSH
67219: LD_INT 3
67221: NEG
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: LIST
67231: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67232: LD_ADDR_VAR 0 59
67236: PUSH
67237: LD_INT 1
67239: NEG
67240: PUSH
67241: LD_INT 2
67243: NEG
67244: PUSH
67245: EMPTY
67246: LIST
67247: LIST
67248: PUSH
67249: LD_INT 0
67251: PUSH
67252: LD_INT 2
67254: NEG
67255: PUSH
67256: EMPTY
67257: LIST
67258: LIST
67259: PUSH
67260: LD_INT 1
67262: PUSH
67263: LD_INT 1
67265: NEG
67266: PUSH
67267: EMPTY
67268: LIST
67269: LIST
67270: PUSH
67271: EMPTY
67272: LIST
67273: LIST
67274: LIST
67275: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67276: LD_ADDR_VAR 0 60
67280: PUSH
67281: LD_INT 1
67283: PUSH
67284: LD_INT 1
67286: NEG
67287: PUSH
67288: EMPTY
67289: LIST
67290: LIST
67291: PUSH
67292: LD_INT 2
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 2
67304: PUSH
67305: LD_INT 1
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: EMPTY
67313: LIST
67314: LIST
67315: LIST
67316: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67317: LD_ADDR_VAR 0 61
67321: PUSH
67322: LD_INT 2
67324: PUSH
67325: LD_INT 1
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 2
67334: PUSH
67335: LD_INT 2
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: LD_INT 1
67344: PUSH
67345: LD_INT 2
67347: PUSH
67348: EMPTY
67349: LIST
67350: LIST
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: LIST
67356: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67357: LD_ADDR_VAR 0 62
67361: PUSH
67362: LD_INT 1
67364: PUSH
67365: LD_INT 2
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: LD_INT 2
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 1
67384: NEG
67385: PUSH
67386: LD_INT 1
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: EMPTY
67394: LIST
67395: LIST
67396: LIST
67397: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67398: LD_ADDR_VAR 0 63
67402: PUSH
67403: LD_INT 1
67405: NEG
67406: PUSH
67407: LD_INT 1
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 2
67416: NEG
67417: PUSH
67418: LD_INT 0
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 2
67427: NEG
67428: PUSH
67429: LD_INT 1
67431: NEG
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: LIST
67441: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67442: LD_ADDR_VAR 0 64
67446: PUSH
67447: LD_INT 1
67449: NEG
67450: PUSH
67451: LD_INT 2
67453: NEG
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: PUSH
67459: LD_INT 2
67461: NEG
67462: PUSH
67463: LD_INT 1
67465: NEG
67466: PUSH
67467: EMPTY
67468: LIST
67469: LIST
67470: PUSH
67471: LD_INT 2
67473: NEG
67474: PUSH
67475: LD_INT 2
67477: NEG
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: PUSH
67483: EMPTY
67484: LIST
67485: LIST
67486: LIST
67487: ST_TO_ADDR
// end ; 2 :
67488: GO 70754
67490: LD_INT 2
67492: DOUBLE
67493: EQUAL
67494: IFTRUE 67498
67496: GO 70753
67498: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67499: LD_ADDR_VAR 0 29
67503: PUSH
67504: LD_INT 4
67506: PUSH
67507: LD_INT 0
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: PUSH
67514: LD_INT 4
67516: PUSH
67517: LD_INT 1
67519: NEG
67520: PUSH
67521: EMPTY
67522: LIST
67523: LIST
67524: PUSH
67525: LD_INT 5
67527: PUSH
67528: LD_INT 0
67530: PUSH
67531: EMPTY
67532: LIST
67533: LIST
67534: PUSH
67535: LD_INT 5
67537: PUSH
67538: LD_INT 1
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: PUSH
67545: LD_INT 4
67547: PUSH
67548: LD_INT 1
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: PUSH
67555: LD_INT 3
67557: PUSH
67558: LD_INT 0
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 3
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 3
67578: PUSH
67579: LD_INT 2
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 5
67589: PUSH
67590: LD_INT 2
67592: PUSH
67593: EMPTY
67594: LIST
67595: LIST
67596: PUSH
67597: LD_INT 3
67599: PUSH
67600: LD_INT 3
67602: PUSH
67603: EMPTY
67604: LIST
67605: LIST
67606: PUSH
67607: LD_INT 3
67609: PUSH
67610: LD_INT 2
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: PUSH
67617: LD_INT 4
67619: PUSH
67620: LD_INT 3
67622: PUSH
67623: EMPTY
67624: LIST
67625: LIST
67626: PUSH
67627: LD_INT 4
67629: PUSH
67630: LD_INT 4
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 3
67639: PUSH
67640: LD_INT 4
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 2
67649: PUSH
67650: LD_INT 3
67652: PUSH
67653: EMPTY
67654: LIST
67655: LIST
67656: PUSH
67657: LD_INT 2
67659: PUSH
67660: LD_INT 2
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 4
67669: PUSH
67670: LD_INT 2
67672: PUSH
67673: EMPTY
67674: LIST
67675: LIST
67676: PUSH
67677: LD_INT 2
67679: PUSH
67680: LD_INT 4
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 0
67689: PUSH
67690: LD_INT 4
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: PUSH
67697: LD_INT 0
67699: PUSH
67700: LD_INT 3
67702: PUSH
67703: EMPTY
67704: LIST
67705: LIST
67706: PUSH
67707: LD_INT 1
67709: PUSH
67710: LD_INT 4
67712: PUSH
67713: EMPTY
67714: LIST
67715: LIST
67716: PUSH
67717: LD_INT 1
67719: PUSH
67720: LD_INT 5
67722: PUSH
67723: EMPTY
67724: LIST
67725: LIST
67726: PUSH
67727: LD_INT 0
67729: PUSH
67730: LD_INT 5
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 1
67739: NEG
67740: PUSH
67741: LD_INT 4
67743: PUSH
67744: EMPTY
67745: LIST
67746: LIST
67747: PUSH
67748: LD_INT 1
67750: NEG
67751: PUSH
67752: LD_INT 3
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 2
67761: PUSH
67762: LD_INT 5
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 2
67771: NEG
67772: PUSH
67773: LD_INT 3
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: PUSH
67780: LD_INT 3
67782: NEG
67783: PUSH
67784: LD_INT 0
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 3
67793: NEG
67794: PUSH
67795: LD_INT 1
67797: NEG
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 2
67805: NEG
67806: PUSH
67807: LD_INT 0
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 2
67816: NEG
67817: PUSH
67818: LD_INT 1
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 3
67827: NEG
67828: PUSH
67829: LD_INT 1
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 4
67838: NEG
67839: PUSH
67840: LD_INT 0
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 4
67849: NEG
67850: PUSH
67851: LD_INT 1
67853: NEG
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 4
67861: NEG
67862: PUSH
67863: LD_INT 2
67865: NEG
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: LD_INT 2
67873: NEG
67874: PUSH
67875: LD_INT 2
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 4
67884: NEG
67885: PUSH
67886: LD_INT 4
67888: NEG
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 4
67896: NEG
67897: PUSH
67898: LD_INT 5
67900: NEG
67901: PUSH
67902: EMPTY
67903: LIST
67904: LIST
67905: PUSH
67906: LD_INT 3
67908: NEG
67909: PUSH
67910: LD_INT 4
67912: NEG
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 3
67920: NEG
67921: PUSH
67922: LD_INT 3
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 4
67932: NEG
67933: PUSH
67934: LD_INT 3
67936: NEG
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: LD_INT 5
67944: NEG
67945: PUSH
67946: LD_INT 4
67948: NEG
67949: PUSH
67950: EMPTY
67951: LIST
67952: LIST
67953: PUSH
67954: LD_INT 5
67956: NEG
67957: PUSH
67958: LD_INT 5
67960: NEG
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 3
67968: NEG
67969: PUSH
67970: LD_INT 5
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 5
67980: NEG
67981: PUSH
67982: LD_INT 3
67984: NEG
67985: PUSH
67986: EMPTY
67987: LIST
67988: LIST
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68037: LD_ADDR_VAR 0 30
68041: PUSH
68042: LD_INT 4
68044: PUSH
68045: LD_INT 4
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 4
68054: PUSH
68055: LD_INT 3
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 5
68064: PUSH
68065: LD_INT 4
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 5
68074: PUSH
68075: LD_INT 5
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 4
68084: PUSH
68085: LD_INT 5
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 3
68094: PUSH
68095: LD_INT 4
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 3
68104: PUSH
68105: LD_INT 3
68107: PUSH
68108: EMPTY
68109: LIST
68110: LIST
68111: PUSH
68112: LD_INT 5
68114: PUSH
68115: LD_INT 3
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: PUSH
68122: LD_INT 3
68124: PUSH
68125: LD_INT 5
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: PUSH
68132: LD_INT 0
68134: PUSH
68135: LD_INT 3
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 0
68144: PUSH
68145: LD_INT 2
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 1
68154: PUSH
68155: LD_INT 3
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 1
68164: PUSH
68165: LD_INT 4
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 0
68174: PUSH
68175: LD_INT 4
68177: PUSH
68178: EMPTY
68179: LIST
68180: LIST
68181: PUSH
68182: LD_INT 1
68184: NEG
68185: PUSH
68186: LD_INT 3
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 1
68195: NEG
68196: PUSH
68197: LD_INT 2
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 2
68206: PUSH
68207: LD_INT 4
68209: PUSH
68210: EMPTY
68211: LIST
68212: LIST
68213: PUSH
68214: LD_INT 2
68216: NEG
68217: PUSH
68218: LD_INT 2
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 4
68227: NEG
68228: PUSH
68229: LD_INT 0
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 4
68238: NEG
68239: PUSH
68240: LD_INT 1
68242: NEG
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 3
68250: NEG
68251: PUSH
68252: LD_INT 0
68254: PUSH
68255: EMPTY
68256: LIST
68257: LIST
68258: PUSH
68259: LD_INT 3
68261: NEG
68262: PUSH
68263: LD_INT 1
68265: PUSH
68266: EMPTY
68267: LIST
68268: LIST
68269: PUSH
68270: LD_INT 4
68272: NEG
68273: PUSH
68274: LD_INT 1
68276: PUSH
68277: EMPTY
68278: LIST
68279: LIST
68280: PUSH
68281: LD_INT 5
68283: NEG
68284: PUSH
68285: LD_INT 0
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 5
68294: NEG
68295: PUSH
68296: LD_INT 1
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 5
68306: NEG
68307: PUSH
68308: LD_INT 2
68310: NEG
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 3
68318: NEG
68319: PUSH
68320: LD_INT 2
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 3
68329: NEG
68330: PUSH
68331: LD_INT 3
68333: NEG
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 3
68341: NEG
68342: PUSH
68343: LD_INT 4
68345: NEG
68346: PUSH
68347: EMPTY
68348: LIST
68349: LIST
68350: PUSH
68351: LD_INT 2
68353: NEG
68354: PUSH
68355: LD_INT 3
68357: NEG
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 2
68365: NEG
68366: PUSH
68367: LD_INT 2
68369: NEG
68370: PUSH
68371: EMPTY
68372: LIST
68373: LIST
68374: PUSH
68375: LD_INT 3
68377: NEG
68378: PUSH
68379: LD_INT 2
68381: NEG
68382: PUSH
68383: EMPTY
68384: LIST
68385: LIST
68386: PUSH
68387: LD_INT 4
68389: NEG
68390: PUSH
68391: LD_INT 3
68393: NEG
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 4
68401: NEG
68402: PUSH
68403: LD_INT 4
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 2
68413: NEG
68414: PUSH
68415: LD_INT 4
68417: NEG
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 4
68425: NEG
68426: PUSH
68427: LD_INT 2
68429: NEG
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: LD_INT 0
68437: PUSH
68438: LD_INT 4
68440: NEG
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 0
68448: PUSH
68449: LD_INT 5
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 1
68459: PUSH
68460: LD_INT 4
68462: NEG
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 1
68470: PUSH
68471: LD_INT 3
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: LD_INT 3
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 1
68492: NEG
68493: PUSH
68494: LD_INT 4
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 1
68504: NEG
68505: PUSH
68506: LD_INT 5
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 2
68516: PUSH
68517: LD_INT 3
68519: NEG
68520: PUSH
68521: EMPTY
68522: LIST
68523: LIST
68524: PUSH
68525: LD_INT 2
68527: NEG
68528: PUSH
68529: LD_INT 5
68531: NEG
68532: PUSH
68533: EMPTY
68534: LIST
68535: LIST
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68584: LD_ADDR_VAR 0 31
68588: PUSH
68589: LD_INT 0
68591: PUSH
68592: LD_INT 4
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: LD_INT 3
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 1
68611: PUSH
68612: LD_INT 4
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 1
68621: PUSH
68622: LD_INT 5
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 0
68631: PUSH
68632: LD_INT 5
68634: PUSH
68635: EMPTY
68636: LIST
68637: LIST
68638: PUSH
68639: LD_INT 1
68641: NEG
68642: PUSH
68643: LD_INT 4
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: PUSH
68650: LD_INT 1
68652: NEG
68653: PUSH
68654: LD_INT 3
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 2
68663: PUSH
68664: LD_INT 5
68666: PUSH
68667: EMPTY
68668: LIST
68669: LIST
68670: PUSH
68671: LD_INT 2
68673: NEG
68674: PUSH
68675: LD_INT 3
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 3
68684: NEG
68685: PUSH
68686: LD_INT 0
68688: PUSH
68689: EMPTY
68690: LIST
68691: LIST
68692: PUSH
68693: LD_INT 3
68695: NEG
68696: PUSH
68697: LD_INT 1
68699: NEG
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: PUSH
68705: LD_INT 2
68707: NEG
68708: PUSH
68709: LD_INT 0
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: PUSH
68716: LD_INT 2
68718: NEG
68719: PUSH
68720: LD_INT 1
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: PUSH
68727: LD_INT 3
68729: NEG
68730: PUSH
68731: LD_INT 1
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: PUSH
68738: LD_INT 4
68740: NEG
68741: PUSH
68742: LD_INT 0
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 4
68751: NEG
68752: PUSH
68753: LD_INT 1
68755: NEG
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 4
68763: NEG
68764: PUSH
68765: LD_INT 2
68767: NEG
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 2
68775: NEG
68776: PUSH
68777: LD_INT 2
68779: PUSH
68780: EMPTY
68781: LIST
68782: LIST
68783: PUSH
68784: LD_INT 4
68786: NEG
68787: PUSH
68788: LD_INT 4
68790: NEG
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 4
68798: NEG
68799: PUSH
68800: LD_INT 5
68802: NEG
68803: PUSH
68804: EMPTY
68805: LIST
68806: LIST
68807: PUSH
68808: LD_INT 3
68810: NEG
68811: PUSH
68812: LD_INT 4
68814: NEG
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 3
68822: NEG
68823: PUSH
68824: LD_INT 3
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 4
68834: NEG
68835: PUSH
68836: LD_INT 3
68838: NEG
68839: PUSH
68840: EMPTY
68841: LIST
68842: LIST
68843: PUSH
68844: LD_INT 5
68846: NEG
68847: PUSH
68848: LD_INT 4
68850: NEG
68851: PUSH
68852: EMPTY
68853: LIST
68854: LIST
68855: PUSH
68856: LD_INT 5
68858: NEG
68859: PUSH
68860: LD_INT 5
68862: NEG
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 3
68870: NEG
68871: PUSH
68872: LD_INT 5
68874: NEG
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 5
68882: NEG
68883: PUSH
68884: LD_INT 3
68886: NEG
68887: PUSH
68888: EMPTY
68889: LIST
68890: LIST
68891: PUSH
68892: LD_INT 0
68894: PUSH
68895: LD_INT 3
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 0
68905: PUSH
68906: LD_INT 4
68908: NEG
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: PUSH
68914: LD_INT 1
68916: PUSH
68917: LD_INT 3
68919: NEG
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: PUSH
68925: LD_INT 1
68927: PUSH
68928: LD_INT 2
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 0
68938: PUSH
68939: LD_INT 2
68941: NEG
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 1
68949: NEG
68950: PUSH
68951: LD_INT 3
68953: NEG
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 1
68961: NEG
68962: PUSH
68963: LD_INT 4
68965: NEG
68966: PUSH
68967: EMPTY
68968: LIST
68969: LIST
68970: PUSH
68971: LD_INT 2
68973: PUSH
68974: LD_INT 2
68976: NEG
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: PUSH
68982: LD_INT 2
68984: NEG
68985: PUSH
68986: LD_INT 4
68988: NEG
68989: PUSH
68990: EMPTY
68991: LIST
68992: LIST
68993: PUSH
68994: LD_INT 4
68996: PUSH
68997: LD_INT 0
68999: PUSH
69000: EMPTY
69001: LIST
69002: LIST
69003: PUSH
69004: LD_INT 4
69006: PUSH
69007: LD_INT 1
69009: NEG
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 5
69017: PUSH
69018: LD_INT 0
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: PUSH
69025: LD_INT 5
69027: PUSH
69028: LD_INT 1
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 4
69037: PUSH
69038: LD_INT 1
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: LD_INT 3
69047: PUSH
69048: LD_INT 0
69050: PUSH
69051: EMPTY
69052: LIST
69053: LIST
69054: PUSH
69055: LD_INT 3
69057: PUSH
69058: LD_INT 1
69060: NEG
69061: PUSH
69062: EMPTY
69063: LIST
69064: LIST
69065: PUSH
69066: LD_INT 3
69068: PUSH
69069: LD_INT 2
69071: NEG
69072: PUSH
69073: EMPTY
69074: LIST
69075: LIST
69076: PUSH
69077: LD_INT 5
69079: PUSH
69080: LD_INT 2
69082: PUSH
69083: EMPTY
69084: LIST
69085: LIST
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: LIST
69091: LIST
69092: LIST
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69134: LD_ADDR_VAR 0 32
69138: PUSH
69139: LD_INT 4
69141: NEG
69142: PUSH
69143: LD_INT 0
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 4
69152: NEG
69153: PUSH
69154: LD_INT 1
69156: NEG
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: LD_INT 3
69164: NEG
69165: PUSH
69166: LD_INT 0
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 3
69175: NEG
69176: PUSH
69177: LD_INT 1
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 4
69186: NEG
69187: PUSH
69188: LD_INT 1
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 5
69197: NEG
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: EMPTY
69203: LIST
69204: LIST
69205: PUSH
69206: LD_INT 5
69208: NEG
69209: PUSH
69210: LD_INT 1
69212: NEG
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 5
69220: NEG
69221: PUSH
69222: LD_INT 2
69224: NEG
69225: PUSH
69226: EMPTY
69227: LIST
69228: LIST
69229: PUSH
69230: LD_INT 3
69232: NEG
69233: PUSH
69234: LD_INT 2
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: LD_INT 3
69243: NEG
69244: PUSH
69245: LD_INT 3
69247: NEG
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 3
69255: NEG
69256: PUSH
69257: LD_INT 4
69259: NEG
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 2
69267: NEG
69268: PUSH
69269: LD_INT 3
69271: NEG
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 2
69279: NEG
69280: PUSH
69281: LD_INT 2
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 3
69291: NEG
69292: PUSH
69293: LD_INT 2
69295: NEG
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 4
69303: NEG
69304: PUSH
69305: LD_INT 3
69307: NEG
69308: PUSH
69309: EMPTY
69310: LIST
69311: LIST
69312: PUSH
69313: LD_INT 4
69315: NEG
69316: PUSH
69317: LD_INT 4
69319: NEG
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 2
69327: NEG
69328: PUSH
69329: LD_INT 4
69331: NEG
69332: PUSH
69333: EMPTY
69334: LIST
69335: LIST
69336: PUSH
69337: LD_INT 4
69339: NEG
69340: PUSH
69341: LD_INT 2
69343: NEG
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: LD_INT 4
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 0
69362: PUSH
69363: LD_INT 5
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 1
69373: PUSH
69374: LD_INT 4
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 1
69384: PUSH
69385: LD_INT 3
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 0
69395: PUSH
69396: LD_INT 3
69398: NEG
69399: PUSH
69400: EMPTY
69401: LIST
69402: LIST
69403: PUSH
69404: LD_INT 1
69406: NEG
69407: PUSH
69408: LD_INT 4
69410: NEG
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: PUSH
69416: LD_INT 1
69418: NEG
69419: PUSH
69420: LD_INT 5
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 2
69430: PUSH
69431: LD_INT 3
69433: NEG
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 2
69441: NEG
69442: PUSH
69443: LD_INT 5
69445: NEG
69446: PUSH
69447: EMPTY
69448: LIST
69449: LIST
69450: PUSH
69451: LD_INT 3
69453: PUSH
69454: LD_INT 0
69456: PUSH
69457: EMPTY
69458: LIST
69459: LIST
69460: PUSH
69461: LD_INT 3
69463: PUSH
69464: LD_INT 1
69466: NEG
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: LD_INT 4
69474: PUSH
69475: LD_INT 0
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 4
69484: PUSH
69485: LD_INT 1
69487: PUSH
69488: EMPTY
69489: LIST
69490: LIST
69491: PUSH
69492: LD_INT 3
69494: PUSH
69495: LD_INT 1
69497: PUSH
69498: EMPTY
69499: LIST
69500: LIST
69501: PUSH
69502: LD_INT 2
69504: PUSH
69505: LD_INT 0
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 2
69514: PUSH
69515: LD_INT 1
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 2
69525: PUSH
69526: LD_INT 2
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 4
69536: PUSH
69537: LD_INT 2
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 4
69546: PUSH
69547: LD_INT 4
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 4
69556: PUSH
69557: LD_INT 3
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 5
69566: PUSH
69567: LD_INT 4
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 5
69576: PUSH
69577: LD_INT 5
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 4
69586: PUSH
69587: LD_INT 5
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 3
69596: PUSH
69597: LD_INT 4
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 3
69606: PUSH
69607: LD_INT 3
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: PUSH
69614: LD_INT 5
69616: PUSH
69617: LD_INT 3
69619: PUSH
69620: EMPTY
69621: LIST
69622: LIST
69623: PUSH
69624: LD_INT 3
69626: PUSH
69627: LD_INT 5
69629: PUSH
69630: EMPTY
69631: LIST
69632: LIST
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69681: LD_ADDR_VAR 0 33
69685: PUSH
69686: LD_INT 4
69688: NEG
69689: PUSH
69690: LD_INT 4
69692: NEG
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 4
69700: NEG
69701: PUSH
69702: LD_INT 5
69704: NEG
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 3
69712: NEG
69713: PUSH
69714: LD_INT 4
69716: NEG
69717: PUSH
69718: EMPTY
69719: LIST
69720: LIST
69721: PUSH
69722: LD_INT 3
69724: NEG
69725: PUSH
69726: LD_INT 3
69728: NEG
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 4
69736: NEG
69737: PUSH
69738: LD_INT 3
69740: NEG
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 5
69748: NEG
69749: PUSH
69750: LD_INT 4
69752: NEG
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 5
69760: NEG
69761: PUSH
69762: LD_INT 5
69764: NEG
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 3
69772: NEG
69773: PUSH
69774: LD_INT 5
69776: NEG
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 5
69784: NEG
69785: PUSH
69786: LD_INT 3
69788: NEG
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 0
69796: PUSH
69797: LD_INT 3
69799: NEG
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 0
69807: PUSH
69808: LD_INT 4
69810: NEG
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 1
69818: PUSH
69819: LD_INT 3
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 1
69829: PUSH
69830: LD_INT 2
69832: NEG
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 0
69840: PUSH
69841: LD_INT 2
69843: NEG
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 1
69851: NEG
69852: PUSH
69853: LD_INT 3
69855: NEG
69856: PUSH
69857: EMPTY
69858: LIST
69859: LIST
69860: PUSH
69861: LD_INT 1
69863: NEG
69864: PUSH
69865: LD_INT 4
69867: NEG
69868: PUSH
69869: EMPTY
69870: LIST
69871: LIST
69872: PUSH
69873: LD_INT 2
69875: PUSH
69876: LD_INT 2
69878: NEG
69879: PUSH
69880: EMPTY
69881: LIST
69882: LIST
69883: PUSH
69884: LD_INT 2
69886: NEG
69887: PUSH
69888: LD_INT 4
69890: NEG
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 4
69898: PUSH
69899: LD_INT 0
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 4
69908: PUSH
69909: LD_INT 1
69911: NEG
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: PUSH
69917: LD_INT 5
69919: PUSH
69920: LD_INT 0
69922: PUSH
69923: EMPTY
69924: LIST
69925: LIST
69926: PUSH
69927: LD_INT 5
69929: PUSH
69930: LD_INT 1
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: PUSH
69937: LD_INT 4
69939: PUSH
69940: LD_INT 1
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 3
69949: PUSH
69950: LD_INT 0
69952: PUSH
69953: EMPTY
69954: LIST
69955: LIST
69956: PUSH
69957: LD_INT 3
69959: PUSH
69960: LD_INT 1
69962: NEG
69963: PUSH
69964: EMPTY
69965: LIST
69966: LIST
69967: PUSH
69968: LD_INT 3
69970: PUSH
69971: LD_INT 2
69973: NEG
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 5
69981: PUSH
69982: LD_INT 2
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 3
69991: PUSH
69992: LD_INT 3
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 3
70001: PUSH
70002: LD_INT 2
70004: PUSH
70005: EMPTY
70006: LIST
70007: LIST
70008: PUSH
70009: LD_INT 4
70011: PUSH
70012: LD_INT 3
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 4
70021: PUSH
70022: LD_INT 4
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 3
70031: PUSH
70032: LD_INT 4
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 2
70041: PUSH
70042: LD_INT 3
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 2
70051: PUSH
70052: LD_INT 2
70054: PUSH
70055: EMPTY
70056: LIST
70057: LIST
70058: PUSH
70059: LD_INT 4
70061: PUSH
70062: LD_INT 2
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 2
70071: PUSH
70072: LD_INT 4
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 0
70081: PUSH
70082: LD_INT 4
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 0
70091: PUSH
70092: LD_INT 3
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 1
70101: PUSH
70102: LD_INT 4
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 1
70111: PUSH
70112: LD_INT 5
70114: PUSH
70115: EMPTY
70116: LIST
70117: LIST
70118: PUSH
70119: LD_INT 0
70121: PUSH
70122: LD_INT 5
70124: PUSH
70125: EMPTY
70126: LIST
70127: LIST
70128: PUSH
70129: LD_INT 1
70131: NEG
70132: PUSH
70133: LD_INT 4
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 1
70142: NEG
70143: PUSH
70144: LD_INT 3
70146: PUSH
70147: EMPTY
70148: LIST
70149: LIST
70150: PUSH
70151: LD_INT 2
70153: PUSH
70154: LD_INT 5
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 2
70163: NEG
70164: PUSH
70165: LD_INT 3
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70219: LD_ADDR_VAR 0 34
70223: PUSH
70224: LD_INT 0
70226: PUSH
70227: LD_INT 4
70229: NEG
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 0
70237: PUSH
70238: LD_INT 5
70240: NEG
70241: PUSH
70242: EMPTY
70243: LIST
70244: LIST
70245: PUSH
70246: LD_INT 1
70248: PUSH
70249: LD_INT 4
70251: NEG
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: LD_INT 1
70259: PUSH
70260: LD_INT 3
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 0
70270: PUSH
70271: LD_INT 3
70273: NEG
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: PUSH
70279: LD_INT 1
70281: NEG
70282: PUSH
70283: LD_INT 4
70285: NEG
70286: PUSH
70287: EMPTY
70288: LIST
70289: LIST
70290: PUSH
70291: LD_INT 1
70293: NEG
70294: PUSH
70295: LD_INT 5
70297: NEG
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 2
70305: PUSH
70306: LD_INT 3
70308: NEG
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 2
70316: NEG
70317: PUSH
70318: LD_INT 5
70320: NEG
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 3
70328: PUSH
70329: LD_INT 0
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 3
70338: PUSH
70339: LD_INT 1
70341: NEG
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 4
70349: PUSH
70350: LD_INT 0
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 4
70359: PUSH
70360: LD_INT 1
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 3
70369: PUSH
70370: LD_INT 1
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: PUSH
70377: LD_INT 2
70379: PUSH
70380: LD_INT 0
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 2
70389: PUSH
70390: LD_INT 1
70392: NEG
70393: PUSH
70394: EMPTY
70395: LIST
70396: LIST
70397: PUSH
70398: LD_INT 2
70400: PUSH
70401: LD_INT 2
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 4
70411: PUSH
70412: LD_INT 2
70414: PUSH
70415: EMPTY
70416: LIST
70417: LIST
70418: PUSH
70419: LD_INT 4
70421: PUSH
70422: LD_INT 4
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PUSH
70429: LD_INT 4
70431: PUSH
70432: LD_INT 3
70434: PUSH
70435: EMPTY
70436: LIST
70437: LIST
70438: PUSH
70439: LD_INT 5
70441: PUSH
70442: LD_INT 4
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 5
70451: PUSH
70452: LD_INT 5
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 4
70461: PUSH
70462: LD_INT 5
70464: PUSH
70465: EMPTY
70466: LIST
70467: LIST
70468: PUSH
70469: LD_INT 3
70471: PUSH
70472: LD_INT 4
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 3
70481: PUSH
70482: LD_INT 3
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: PUSH
70489: LD_INT 5
70491: PUSH
70492: LD_INT 3
70494: PUSH
70495: EMPTY
70496: LIST
70497: LIST
70498: PUSH
70499: LD_INT 3
70501: PUSH
70502: LD_INT 5
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 0
70511: PUSH
70512: LD_INT 3
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: PUSH
70519: LD_INT 0
70521: PUSH
70522: LD_INT 2
70524: PUSH
70525: EMPTY
70526: LIST
70527: LIST
70528: PUSH
70529: LD_INT 1
70531: PUSH
70532: LD_INT 3
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 1
70541: PUSH
70542: LD_INT 4
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 0
70551: PUSH
70552: LD_INT 4
70554: PUSH
70555: EMPTY
70556: LIST
70557: LIST
70558: PUSH
70559: LD_INT 1
70561: NEG
70562: PUSH
70563: LD_INT 3
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: PUSH
70570: LD_INT 1
70572: NEG
70573: PUSH
70574: LD_INT 2
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PUSH
70581: LD_INT 2
70583: PUSH
70584: LD_INT 4
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 2
70593: NEG
70594: PUSH
70595: LD_INT 2
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 4
70604: NEG
70605: PUSH
70606: LD_INT 0
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 4
70615: NEG
70616: PUSH
70617: LD_INT 1
70619: NEG
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 3
70627: NEG
70628: PUSH
70629: LD_INT 0
70631: PUSH
70632: EMPTY
70633: LIST
70634: LIST
70635: PUSH
70636: LD_INT 3
70638: NEG
70639: PUSH
70640: LD_INT 1
70642: PUSH
70643: EMPTY
70644: LIST
70645: LIST
70646: PUSH
70647: LD_INT 4
70649: NEG
70650: PUSH
70651: LD_INT 1
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: LD_INT 5
70660: NEG
70661: PUSH
70662: LD_INT 0
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 5
70671: NEG
70672: PUSH
70673: LD_INT 1
70675: NEG
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 5
70683: NEG
70684: PUSH
70685: LD_INT 2
70687: NEG
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 3
70695: NEG
70696: PUSH
70697: LD_INT 2
70699: PUSH
70700: EMPTY
70701: LIST
70702: LIST
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: ST_TO_ADDR
// end ; end ;
70751: GO 70754
70753: POP
// case btype of b_depot , b_warehouse :
70754: LD_VAR 0 1
70758: PUSH
70759: LD_INT 0
70761: DOUBLE
70762: EQUAL
70763: IFTRUE 70773
70765: LD_INT 1
70767: DOUBLE
70768: EQUAL
70769: IFTRUE 70773
70771: GO 70974
70773: POP
// case nation of nation_american :
70774: LD_VAR 0 5
70778: PUSH
70779: LD_INT 1
70781: DOUBLE
70782: EQUAL
70783: IFTRUE 70787
70785: GO 70843
70787: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70788: LD_ADDR_VAR 0 9
70792: PUSH
70793: LD_VAR 0 11
70797: PUSH
70798: LD_VAR 0 12
70802: PUSH
70803: LD_VAR 0 13
70807: PUSH
70808: LD_VAR 0 14
70812: PUSH
70813: LD_VAR 0 15
70817: PUSH
70818: LD_VAR 0 16
70822: PUSH
70823: EMPTY
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: PUSH
70831: LD_VAR 0 4
70835: PUSH
70836: LD_INT 1
70838: PLUS
70839: ARRAY
70840: ST_TO_ADDR
70841: GO 70972
70843: LD_INT 2
70845: DOUBLE
70846: EQUAL
70847: IFTRUE 70851
70849: GO 70907
70851: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70852: LD_ADDR_VAR 0 9
70856: PUSH
70857: LD_VAR 0 17
70861: PUSH
70862: LD_VAR 0 18
70866: PUSH
70867: LD_VAR 0 19
70871: PUSH
70872: LD_VAR 0 20
70876: PUSH
70877: LD_VAR 0 21
70881: PUSH
70882: LD_VAR 0 22
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: PUSH
70895: LD_VAR 0 4
70899: PUSH
70900: LD_INT 1
70902: PLUS
70903: ARRAY
70904: ST_TO_ADDR
70905: GO 70972
70907: LD_INT 3
70909: DOUBLE
70910: EQUAL
70911: IFTRUE 70915
70913: GO 70971
70915: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70916: LD_ADDR_VAR 0 9
70920: PUSH
70921: LD_VAR 0 23
70925: PUSH
70926: LD_VAR 0 24
70930: PUSH
70931: LD_VAR 0 25
70935: PUSH
70936: LD_VAR 0 26
70940: PUSH
70941: LD_VAR 0 27
70945: PUSH
70946: LD_VAR 0 28
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: PUSH
70959: LD_VAR 0 4
70963: PUSH
70964: LD_INT 1
70966: PLUS
70967: ARRAY
70968: ST_TO_ADDR
70969: GO 70972
70971: POP
70972: GO 71527
70974: LD_INT 2
70976: DOUBLE
70977: EQUAL
70978: IFTRUE 70988
70980: LD_INT 3
70982: DOUBLE
70983: EQUAL
70984: IFTRUE 70988
70986: GO 71044
70988: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70989: LD_ADDR_VAR 0 9
70993: PUSH
70994: LD_VAR 0 29
70998: PUSH
70999: LD_VAR 0 30
71003: PUSH
71004: LD_VAR 0 31
71008: PUSH
71009: LD_VAR 0 32
71013: PUSH
71014: LD_VAR 0 33
71018: PUSH
71019: LD_VAR 0 34
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: PUSH
71032: LD_VAR 0 4
71036: PUSH
71037: LD_INT 1
71039: PLUS
71040: ARRAY
71041: ST_TO_ADDR
71042: GO 71527
71044: LD_INT 16
71046: DOUBLE
71047: EQUAL
71048: IFTRUE 71106
71050: LD_INT 17
71052: DOUBLE
71053: EQUAL
71054: IFTRUE 71106
71056: LD_INT 18
71058: DOUBLE
71059: EQUAL
71060: IFTRUE 71106
71062: LD_INT 19
71064: DOUBLE
71065: EQUAL
71066: IFTRUE 71106
71068: LD_INT 22
71070: DOUBLE
71071: EQUAL
71072: IFTRUE 71106
71074: LD_INT 20
71076: DOUBLE
71077: EQUAL
71078: IFTRUE 71106
71080: LD_INT 21
71082: DOUBLE
71083: EQUAL
71084: IFTRUE 71106
71086: LD_INT 23
71088: DOUBLE
71089: EQUAL
71090: IFTRUE 71106
71092: LD_INT 24
71094: DOUBLE
71095: EQUAL
71096: IFTRUE 71106
71098: LD_INT 25
71100: DOUBLE
71101: EQUAL
71102: IFTRUE 71106
71104: GO 71162
71106: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71107: LD_ADDR_VAR 0 9
71111: PUSH
71112: LD_VAR 0 35
71116: PUSH
71117: LD_VAR 0 36
71121: PUSH
71122: LD_VAR 0 37
71126: PUSH
71127: LD_VAR 0 38
71131: PUSH
71132: LD_VAR 0 39
71136: PUSH
71137: LD_VAR 0 40
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: PUSH
71150: LD_VAR 0 4
71154: PUSH
71155: LD_INT 1
71157: PLUS
71158: ARRAY
71159: ST_TO_ADDR
71160: GO 71527
71162: LD_INT 6
71164: DOUBLE
71165: EQUAL
71166: IFTRUE 71218
71168: LD_INT 7
71170: DOUBLE
71171: EQUAL
71172: IFTRUE 71218
71174: LD_INT 8
71176: DOUBLE
71177: EQUAL
71178: IFTRUE 71218
71180: LD_INT 13
71182: DOUBLE
71183: EQUAL
71184: IFTRUE 71218
71186: LD_INT 12
71188: DOUBLE
71189: EQUAL
71190: IFTRUE 71218
71192: LD_INT 15
71194: DOUBLE
71195: EQUAL
71196: IFTRUE 71218
71198: LD_INT 11
71200: DOUBLE
71201: EQUAL
71202: IFTRUE 71218
71204: LD_INT 14
71206: DOUBLE
71207: EQUAL
71208: IFTRUE 71218
71210: LD_INT 10
71212: DOUBLE
71213: EQUAL
71214: IFTRUE 71218
71216: GO 71274
71218: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71219: LD_ADDR_VAR 0 9
71223: PUSH
71224: LD_VAR 0 41
71228: PUSH
71229: LD_VAR 0 42
71233: PUSH
71234: LD_VAR 0 43
71238: PUSH
71239: LD_VAR 0 44
71243: PUSH
71244: LD_VAR 0 45
71248: PUSH
71249: LD_VAR 0 46
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: PUSH
71262: LD_VAR 0 4
71266: PUSH
71267: LD_INT 1
71269: PLUS
71270: ARRAY
71271: ST_TO_ADDR
71272: GO 71527
71274: LD_INT 36
71276: DOUBLE
71277: EQUAL
71278: IFTRUE 71282
71280: GO 71338
71282: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71283: LD_ADDR_VAR 0 9
71287: PUSH
71288: LD_VAR 0 47
71292: PUSH
71293: LD_VAR 0 48
71297: PUSH
71298: LD_VAR 0 49
71302: PUSH
71303: LD_VAR 0 50
71307: PUSH
71308: LD_VAR 0 51
71312: PUSH
71313: LD_VAR 0 52
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: PUSH
71326: LD_VAR 0 4
71330: PUSH
71331: LD_INT 1
71333: PLUS
71334: ARRAY
71335: ST_TO_ADDR
71336: GO 71527
71338: LD_INT 4
71340: DOUBLE
71341: EQUAL
71342: IFTRUE 71364
71344: LD_INT 5
71346: DOUBLE
71347: EQUAL
71348: IFTRUE 71364
71350: LD_INT 34
71352: DOUBLE
71353: EQUAL
71354: IFTRUE 71364
71356: LD_INT 37
71358: DOUBLE
71359: EQUAL
71360: IFTRUE 71364
71362: GO 71420
71364: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71365: LD_ADDR_VAR 0 9
71369: PUSH
71370: LD_VAR 0 53
71374: PUSH
71375: LD_VAR 0 54
71379: PUSH
71380: LD_VAR 0 55
71384: PUSH
71385: LD_VAR 0 56
71389: PUSH
71390: LD_VAR 0 57
71394: PUSH
71395: LD_VAR 0 58
71399: PUSH
71400: EMPTY
71401: LIST
71402: LIST
71403: LIST
71404: LIST
71405: LIST
71406: LIST
71407: PUSH
71408: LD_VAR 0 4
71412: PUSH
71413: LD_INT 1
71415: PLUS
71416: ARRAY
71417: ST_TO_ADDR
71418: GO 71527
71420: LD_INT 31
71422: DOUBLE
71423: EQUAL
71424: IFTRUE 71470
71426: LD_INT 32
71428: DOUBLE
71429: EQUAL
71430: IFTRUE 71470
71432: LD_INT 33
71434: DOUBLE
71435: EQUAL
71436: IFTRUE 71470
71438: LD_INT 27
71440: DOUBLE
71441: EQUAL
71442: IFTRUE 71470
71444: LD_INT 26
71446: DOUBLE
71447: EQUAL
71448: IFTRUE 71470
71450: LD_INT 28
71452: DOUBLE
71453: EQUAL
71454: IFTRUE 71470
71456: LD_INT 29
71458: DOUBLE
71459: EQUAL
71460: IFTRUE 71470
71462: LD_INT 30
71464: DOUBLE
71465: EQUAL
71466: IFTRUE 71470
71468: GO 71526
71470: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71471: LD_ADDR_VAR 0 9
71475: PUSH
71476: LD_VAR 0 59
71480: PUSH
71481: LD_VAR 0 60
71485: PUSH
71486: LD_VAR 0 61
71490: PUSH
71491: LD_VAR 0 62
71495: PUSH
71496: LD_VAR 0 63
71500: PUSH
71501: LD_VAR 0 64
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: PUSH
71514: LD_VAR 0 4
71518: PUSH
71519: LD_INT 1
71521: PLUS
71522: ARRAY
71523: ST_TO_ADDR
71524: GO 71527
71526: POP
// temp_list2 = [ ] ;
71527: LD_ADDR_VAR 0 10
71531: PUSH
71532: EMPTY
71533: ST_TO_ADDR
// for i in temp_list do
71534: LD_ADDR_VAR 0 8
71538: PUSH
71539: LD_VAR 0 9
71543: PUSH
71544: FOR_IN
71545: IFFALSE 71597
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71547: LD_ADDR_VAR 0 10
71551: PUSH
71552: LD_VAR 0 10
71556: PUSH
71557: LD_VAR 0 8
71561: PUSH
71562: LD_INT 1
71564: ARRAY
71565: PUSH
71566: LD_VAR 0 2
71570: PLUS
71571: PUSH
71572: LD_VAR 0 8
71576: PUSH
71577: LD_INT 2
71579: ARRAY
71580: PUSH
71581: LD_VAR 0 3
71585: PLUS
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: EMPTY
71592: LIST
71593: ADD
71594: ST_TO_ADDR
71595: GO 71544
71597: POP
71598: POP
// result = temp_list2 ;
71599: LD_ADDR_VAR 0 7
71603: PUSH
71604: LD_VAR 0 10
71608: ST_TO_ADDR
// end ;
71609: LD_VAR 0 7
71613: RET
// export function EnemyInRange ( unit , dist ) ; begin
71614: LD_INT 0
71616: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71617: LD_ADDR_VAR 0 3
71621: PUSH
71622: LD_VAR 0 1
71626: PPUSH
71627: CALL_OW 255
71631: PPUSH
71632: LD_VAR 0 1
71636: PPUSH
71637: CALL_OW 250
71641: PPUSH
71642: LD_VAR 0 1
71646: PPUSH
71647: CALL_OW 251
71651: PPUSH
71652: LD_VAR 0 2
71656: PPUSH
71657: CALL 44987 0 4
71661: PUSH
71662: LD_INT 4
71664: ARRAY
71665: ST_TO_ADDR
// end ;
71666: LD_VAR 0 3
71670: RET
// export function PlayerSeeMe ( unit ) ; begin
71671: LD_INT 0
71673: PPUSH
// result := See ( your_side , unit ) ;
71674: LD_ADDR_VAR 0 2
71678: PUSH
71679: LD_OWVAR 2
71683: PPUSH
71684: LD_VAR 0 1
71688: PPUSH
71689: CALL_OW 292
71693: ST_TO_ADDR
// end ;
71694: LD_VAR 0 2
71698: RET
// export function ReverseDir ( unit ) ; begin
71699: LD_INT 0
71701: PPUSH
// if not unit then
71702: LD_VAR 0 1
71706: NOT
71707: IFFALSE 71711
// exit ;
71709: GO 71734
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71711: LD_ADDR_VAR 0 2
71715: PUSH
71716: LD_VAR 0 1
71720: PPUSH
71721: CALL_OW 254
71725: PUSH
71726: LD_INT 3
71728: PLUS
71729: PUSH
71730: LD_INT 6
71732: MOD
71733: ST_TO_ADDR
// end ;
71734: LD_VAR 0 2
71738: RET
// export function ReverseArray ( array ) ; var i ; begin
71739: LD_INT 0
71741: PPUSH
71742: PPUSH
// if not array then
71743: LD_VAR 0 1
71747: NOT
71748: IFFALSE 71752
// exit ;
71750: GO 71807
// result := [ ] ;
71752: LD_ADDR_VAR 0 2
71756: PUSH
71757: EMPTY
71758: ST_TO_ADDR
// for i := array downto 1 do
71759: LD_ADDR_VAR 0 3
71763: PUSH
71764: DOUBLE
71765: LD_VAR 0 1
71769: INC
71770: ST_TO_ADDR
71771: LD_INT 1
71773: PUSH
71774: FOR_DOWNTO
71775: IFFALSE 71805
// result := Join ( result , array [ i ] ) ;
71777: LD_ADDR_VAR 0 2
71781: PUSH
71782: LD_VAR 0 2
71786: PPUSH
71787: LD_VAR 0 1
71791: PUSH
71792: LD_VAR 0 3
71796: ARRAY
71797: PPUSH
71798: CALL 76450 0 2
71802: ST_TO_ADDR
71803: GO 71774
71805: POP
71806: POP
// end ;
71807: LD_VAR 0 2
71811: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71812: LD_INT 0
71814: PPUSH
71815: PPUSH
71816: PPUSH
71817: PPUSH
71818: PPUSH
71819: PPUSH
// if not unit or not hexes then
71820: LD_VAR 0 1
71824: NOT
71825: PUSH
71826: LD_VAR 0 2
71830: NOT
71831: OR
71832: IFFALSE 71836
// exit ;
71834: GO 71959
// dist := 9999 ;
71836: LD_ADDR_VAR 0 5
71840: PUSH
71841: LD_INT 9999
71843: ST_TO_ADDR
// for i = 1 to hexes do
71844: LD_ADDR_VAR 0 4
71848: PUSH
71849: DOUBLE
71850: LD_INT 1
71852: DEC
71853: ST_TO_ADDR
71854: LD_VAR 0 2
71858: PUSH
71859: FOR_TO
71860: IFFALSE 71947
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71862: LD_ADDR_VAR 0 6
71866: PUSH
71867: LD_VAR 0 1
71871: PPUSH
71872: LD_VAR 0 2
71876: PUSH
71877: LD_VAR 0 4
71881: ARRAY
71882: PUSH
71883: LD_INT 1
71885: ARRAY
71886: PPUSH
71887: LD_VAR 0 2
71891: PUSH
71892: LD_VAR 0 4
71896: ARRAY
71897: PUSH
71898: LD_INT 2
71900: ARRAY
71901: PPUSH
71902: CALL_OW 297
71906: ST_TO_ADDR
// if tdist < dist then
71907: LD_VAR 0 6
71911: PUSH
71912: LD_VAR 0 5
71916: LESS
71917: IFFALSE 71945
// begin hex := hexes [ i ] ;
71919: LD_ADDR_VAR 0 8
71923: PUSH
71924: LD_VAR 0 2
71928: PUSH
71929: LD_VAR 0 4
71933: ARRAY
71934: ST_TO_ADDR
// dist := tdist ;
71935: LD_ADDR_VAR 0 5
71939: PUSH
71940: LD_VAR 0 6
71944: ST_TO_ADDR
// end ; end ;
71945: GO 71859
71947: POP
71948: POP
// result := hex ;
71949: LD_ADDR_VAR 0 3
71953: PUSH
71954: LD_VAR 0 8
71958: ST_TO_ADDR
// end ;
71959: LD_VAR 0 3
71963: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71964: LD_INT 0
71966: PPUSH
71967: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71968: LD_VAR 0 1
71972: NOT
71973: PUSH
71974: LD_VAR 0 1
71978: PUSH
71979: LD_INT 21
71981: PUSH
71982: LD_INT 2
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: LD_INT 23
71991: PUSH
71992: LD_INT 2
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PPUSH
72003: CALL_OW 69
72007: IN
72008: NOT
72009: OR
72010: IFFALSE 72014
// exit ;
72012: GO 72061
// for i = 1 to 3 do
72014: LD_ADDR_VAR 0 3
72018: PUSH
72019: DOUBLE
72020: LD_INT 1
72022: DEC
72023: ST_TO_ADDR
72024: LD_INT 3
72026: PUSH
72027: FOR_TO
72028: IFFALSE 72059
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72030: LD_VAR 0 1
72034: PPUSH
72035: CALL_OW 250
72039: PPUSH
72040: LD_VAR 0 1
72044: PPUSH
72045: CALL_OW 251
72049: PPUSH
72050: LD_INT 1
72052: PPUSH
72053: CALL_OW 453
72057: GO 72027
72059: POP
72060: POP
// end ;
72061: LD_VAR 0 2
72065: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72066: LD_INT 0
72068: PPUSH
72069: PPUSH
72070: PPUSH
72071: PPUSH
72072: PPUSH
72073: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72074: LD_VAR 0 1
72078: NOT
72079: PUSH
72080: LD_VAR 0 2
72084: NOT
72085: OR
72086: PUSH
72087: LD_VAR 0 1
72091: PPUSH
72092: CALL_OW 314
72096: OR
72097: IFFALSE 72101
// exit ;
72099: GO 72568
// if GetLives ( i ) < 250 then
72101: LD_VAR 0 4
72105: PPUSH
72106: CALL_OW 256
72110: PUSH
72111: LD_INT 250
72113: LESS
72114: IFFALSE 72127
// begin ComAutodestruct ( i ) ;
72116: LD_VAR 0 4
72120: PPUSH
72121: CALL 71964 0 1
// exit ;
72125: GO 72568
// end ; x := GetX ( enemy_unit ) ;
72127: LD_ADDR_VAR 0 7
72131: PUSH
72132: LD_VAR 0 2
72136: PPUSH
72137: CALL_OW 250
72141: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72142: LD_ADDR_VAR 0 8
72146: PUSH
72147: LD_VAR 0 2
72151: PPUSH
72152: CALL_OW 251
72156: ST_TO_ADDR
// if not x or not y then
72157: LD_VAR 0 7
72161: NOT
72162: PUSH
72163: LD_VAR 0 8
72167: NOT
72168: OR
72169: IFFALSE 72173
// exit ;
72171: GO 72568
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72173: LD_ADDR_VAR 0 6
72177: PUSH
72178: LD_VAR 0 7
72182: PPUSH
72183: LD_INT 0
72185: PPUSH
72186: LD_INT 4
72188: PPUSH
72189: CALL_OW 272
72193: PUSH
72194: LD_VAR 0 8
72198: PPUSH
72199: LD_INT 0
72201: PPUSH
72202: LD_INT 4
72204: PPUSH
72205: CALL_OW 273
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_VAR 0 7
72218: PPUSH
72219: LD_INT 1
72221: PPUSH
72222: LD_INT 4
72224: PPUSH
72225: CALL_OW 272
72229: PUSH
72230: LD_VAR 0 8
72234: PPUSH
72235: LD_INT 1
72237: PPUSH
72238: LD_INT 4
72240: PPUSH
72241: CALL_OW 273
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_VAR 0 7
72254: PPUSH
72255: LD_INT 2
72257: PPUSH
72258: LD_INT 4
72260: PPUSH
72261: CALL_OW 272
72265: PUSH
72266: LD_VAR 0 8
72270: PPUSH
72271: LD_INT 2
72273: PPUSH
72274: LD_INT 4
72276: PPUSH
72277: CALL_OW 273
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: LD_VAR 0 7
72290: PPUSH
72291: LD_INT 3
72293: PPUSH
72294: LD_INT 4
72296: PPUSH
72297: CALL_OW 272
72301: PUSH
72302: LD_VAR 0 8
72306: PPUSH
72307: LD_INT 3
72309: PPUSH
72310: LD_INT 4
72312: PPUSH
72313: CALL_OW 273
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_VAR 0 7
72326: PPUSH
72327: LD_INT 4
72329: PPUSH
72330: LD_INT 4
72332: PPUSH
72333: CALL_OW 272
72337: PUSH
72338: LD_VAR 0 8
72342: PPUSH
72343: LD_INT 4
72345: PPUSH
72346: LD_INT 4
72348: PPUSH
72349: CALL_OW 273
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_VAR 0 7
72362: PPUSH
72363: LD_INT 5
72365: PPUSH
72366: LD_INT 4
72368: PPUSH
72369: CALL_OW 272
72373: PUSH
72374: LD_VAR 0 8
72378: PPUSH
72379: LD_INT 5
72381: PPUSH
72382: LD_INT 4
72384: PPUSH
72385: CALL_OW 273
72389: PUSH
72390: EMPTY
72391: LIST
72392: LIST
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: ST_TO_ADDR
// for i = tmp downto 1 do
72402: LD_ADDR_VAR 0 4
72406: PUSH
72407: DOUBLE
72408: LD_VAR 0 6
72412: INC
72413: ST_TO_ADDR
72414: LD_INT 1
72416: PUSH
72417: FOR_DOWNTO
72418: IFFALSE 72519
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72420: LD_VAR 0 6
72424: PUSH
72425: LD_VAR 0 4
72429: ARRAY
72430: PUSH
72431: LD_INT 1
72433: ARRAY
72434: PPUSH
72435: LD_VAR 0 6
72439: PUSH
72440: LD_VAR 0 4
72444: ARRAY
72445: PUSH
72446: LD_INT 2
72448: ARRAY
72449: PPUSH
72450: CALL_OW 488
72454: NOT
72455: PUSH
72456: LD_VAR 0 6
72460: PUSH
72461: LD_VAR 0 4
72465: ARRAY
72466: PUSH
72467: LD_INT 1
72469: ARRAY
72470: PPUSH
72471: LD_VAR 0 6
72475: PUSH
72476: LD_VAR 0 4
72480: ARRAY
72481: PUSH
72482: LD_INT 2
72484: ARRAY
72485: PPUSH
72486: CALL_OW 428
72490: PUSH
72491: LD_INT 0
72493: NONEQUAL
72494: OR
72495: IFFALSE 72517
// tmp := Delete ( tmp , i ) ;
72497: LD_ADDR_VAR 0 6
72501: PUSH
72502: LD_VAR 0 6
72506: PPUSH
72507: LD_VAR 0 4
72511: PPUSH
72512: CALL_OW 3
72516: ST_TO_ADDR
72517: GO 72417
72519: POP
72520: POP
// j := GetClosestHex ( unit , tmp ) ;
72521: LD_ADDR_VAR 0 5
72525: PUSH
72526: LD_VAR 0 1
72530: PPUSH
72531: LD_VAR 0 6
72535: PPUSH
72536: CALL 71812 0 2
72540: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72541: LD_VAR 0 1
72545: PPUSH
72546: LD_VAR 0 5
72550: PUSH
72551: LD_INT 1
72553: ARRAY
72554: PPUSH
72555: LD_VAR 0 5
72559: PUSH
72560: LD_INT 2
72562: ARRAY
72563: PPUSH
72564: CALL_OW 111
// end ;
72568: LD_VAR 0 3
72572: RET
// export function PrepareApemanSoldier ( ) ; begin
72573: LD_INT 0
72575: PPUSH
// uc_nation := 0 ;
72576: LD_ADDR_OWVAR 21
72580: PUSH
72581: LD_INT 0
72583: ST_TO_ADDR
// hc_sex := sex_male ;
72584: LD_ADDR_OWVAR 27
72588: PUSH
72589: LD_INT 1
72591: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72592: LD_ADDR_OWVAR 28
72596: PUSH
72597: LD_INT 15
72599: ST_TO_ADDR
// hc_gallery :=  ;
72600: LD_ADDR_OWVAR 33
72604: PUSH
72605: LD_STRING 
72607: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72608: LD_ADDR_OWVAR 31
72612: PUSH
72613: LD_INT 0
72615: PPUSH
72616: LD_INT 3
72618: PPUSH
72619: CALL_OW 12
72623: PUSH
72624: LD_INT 0
72626: PPUSH
72627: LD_INT 3
72629: PPUSH
72630: CALL_OW 12
72634: PUSH
72635: LD_INT 0
72637: PUSH
72638: LD_INT 0
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: ST_TO_ADDR
// end ;
72647: LD_VAR 0 1
72651: RET
// export function PrepareApemanEngineer ( ) ; begin
72652: LD_INT 0
72654: PPUSH
// uc_nation := 0 ;
72655: LD_ADDR_OWVAR 21
72659: PUSH
72660: LD_INT 0
72662: ST_TO_ADDR
// hc_sex := sex_male ;
72663: LD_ADDR_OWVAR 27
72667: PUSH
72668: LD_INT 1
72670: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72671: LD_ADDR_OWVAR 28
72675: PUSH
72676: LD_INT 16
72678: ST_TO_ADDR
// hc_gallery :=  ;
72679: LD_ADDR_OWVAR 33
72683: PUSH
72684: LD_STRING 
72686: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72687: LD_ADDR_OWVAR 31
72691: PUSH
72692: LD_INT 0
72694: PPUSH
72695: LD_INT 3
72697: PPUSH
72698: CALL_OW 12
72702: PUSH
72703: LD_INT 0
72705: PPUSH
72706: LD_INT 3
72708: PPUSH
72709: CALL_OW 12
72713: PUSH
72714: LD_INT 0
72716: PUSH
72717: LD_INT 0
72719: PUSH
72720: EMPTY
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: ST_TO_ADDR
// end ;
72726: LD_VAR 0 1
72730: RET
// export function PrepareApeman ( agressivity ) ; begin
72731: LD_INT 0
72733: PPUSH
// uc_side := 0 ;
72734: LD_ADDR_OWVAR 20
72738: PUSH
72739: LD_INT 0
72741: ST_TO_ADDR
// uc_nation := 0 ;
72742: LD_ADDR_OWVAR 21
72746: PUSH
72747: LD_INT 0
72749: ST_TO_ADDR
// hc_sex := sex_male ;
72750: LD_ADDR_OWVAR 27
72754: PUSH
72755: LD_INT 1
72757: ST_TO_ADDR
// hc_class := class_apeman ;
72758: LD_ADDR_OWVAR 28
72762: PUSH
72763: LD_INT 12
72765: ST_TO_ADDR
// hc_gallery :=  ;
72766: LD_ADDR_OWVAR 33
72770: PUSH
72771: LD_STRING 
72773: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72774: LD_ADDR_OWVAR 35
72778: PUSH
72779: LD_VAR 0 1
72783: NEG
72784: PPUSH
72785: LD_VAR 0 1
72789: PPUSH
72790: CALL_OW 12
72794: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72795: LD_ADDR_OWVAR 31
72799: PUSH
72800: LD_INT 0
72802: PPUSH
72803: LD_INT 3
72805: PPUSH
72806: CALL_OW 12
72810: PUSH
72811: LD_INT 0
72813: PPUSH
72814: LD_INT 3
72816: PPUSH
72817: CALL_OW 12
72821: PUSH
72822: LD_INT 0
72824: PUSH
72825: LD_INT 0
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: ST_TO_ADDR
// end ;
72834: LD_VAR 0 2
72838: RET
// export function PrepareTiger ( agressivity ) ; begin
72839: LD_INT 0
72841: PPUSH
// uc_side := 0 ;
72842: LD_ADDR_OWVAR 20
72846: PUSH
72847: LD_INT 0
72849: ST_TO_ADDR
// uc_nation := 0 ;
72850: LD_ADDR_OWVAR 21
72854: PUSH
72855: LD_INT 0
72857: ST_TO_ADDR
// hc_class := class_tiger ;
72858: LD_ADDR_OWVAR 28
72862: PUSH
72863: LD_INT 14
72865: ST_TO_ADDR
// hc_gallery :=  ;
72866: LD_ADDR_OWVAR 33
72870: PUSH
72871: LD_STRING 
72873: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72874: LD_ADDR_OWVAR 35
72878: PUSH
72879: LD_VAR 0 1
72883: NEG
72884: PPUSH
72885: LD_VAR 0 1
72889: PPUSH
72890: CALL_OW 12
72894: ST_TO_ADDR
// end ;
72895: LD_VAR 0 2
72899: RET
// export function PrepareEnchidna ( ) ; begin
72900: LD_INT 0
72902: PPUSH
// uc_side := 0 ;
72903: LD_ADDR_OWVAR 20
72907: PUSH
72908: LD_INT 0
72910: ST_TO_ADDR
// uc_nation := 0 ;
72911: LD_ADDR_OWVAR 21
72915: PUSH
72916: LD_INT 0
72918: ST_TO_ADDR
// hc_class := class_baggie ;
72919: LD_ADDR_OWVAR 28
72923: PUSH
72924: LD_INT 13
72926: ST_TO_ADDR
// hc_gallery :=  ;
72927: LD_ADDR_OWVAR 33
72931: PUSH
72932: LD_STRING 
72934: ST_TO_ADDR
// end ;
72935: LD_VAR 0 1
72939: RET
// export function PrepareFrog ( ) ; begin
72940: LD_INT 0
72942: PPUSH
// uc_side := 0 ;
72943: LD_ADDR_OWVAR 20
72947: PUSH
72948: LD_INT 0
72950: ST_TO_ADDR
// uc_nation := 0 ;
72951: LD_ADDR_OWVAR 21
72955: PUSH
72956: LD_INT 0
72958: ST_TO_ADDR
// hc_class := class_frog ;
72959: LD_ADDR_OWVAR 28
72963: PUSH
72964: LD_INT 19
72966: ST_TO_ADDR
// hc_gallery :=  ;
72967: LD_ADDR_OWVAR 33
72971: PUSH
72972: LD_STRING 
72974: ST_TO_ADDR
// end ;
72975: LD_VAR 0 1
72979: RET
// export function PrepareFish ( ) ; begin
72980: LD_INT 0
72982: PPUSH
// uc_side := 0 ;
72983: LD_ADDR_OWVAR 20
72987: PUSH
72988: LD_INT 0
72990: ST_TO_ADDR
// uc_nation := 0 ;
72991: LD_ADDR_OWVAR 21
72995: PUSH
72996: LD_INT 0
72998: ST_TO_ADDR
// hc_class := class_fish ;
72999: LD_ADDR_OWVAR 28
73003: PUSH
73004: LD_INT 20
73006: ST_TO_ADDR
// hc_gallery :=  ;
73007: LD_ADDR_OWVAR 33
73011: PUSH
73012: LD_STRING 
73014: ST_TO_ADDR
// end ;
73015: LD_VAR 0 1
73019: RET
// export function PrepareBird ( ) ; begin
73020: LD_INT 0
73022: PPUSH
// uc_side := 0 ;
73023: LD_ADDR_OWVAR 20
73027: PUSH
73028: LD_INT 0
73030: ST_TO_ADDR
// uc_nation := 0 ;
73031: LD_ADDR_OWVAR 21
73035: PUSH
73036: LD_INT 0
73038: ST_TO_ADDR
// hc_class := class_phororhacos ;
73039: LD_ADDR_OWVAR 28
73043: PUSH
73044: LD_INT 18
73046: ST_TO_ADDR
// hc_gallery :=  ;
73047: LD_ADDR_OWVAR 33
73051: PUSH
73052: LD_STRING 
73054: ST_TO_ADDR
// end ;
73055: LD_VAR 0 1
73059: RET
// export function PrepareHorse ( ) ; begin
73060: LD_INT 0
73062: PPUSH
// uc_side := 0 ;
73063: LD_ADDR_OWVAR 20
73067: PUSH
73068: LD_INT 0
73070: ST_TO_ADDR
// uc_nation := 0 ;
73071: LD_ADDR_OWVAR 21
73075: PUSH
73076: LD_INT 0
73078: ST_TO_ADDR
// hc_class := class_horse ;
73079: LD_ADDR_OWVAR 28
73083: PUSH
73084: LD_INT 21
73086: ST_TO_ADDR
// hc_gallery :=  ;
73087: LD_ADDR_OWVAR 33
73091: PUSH
73092: LD_STRING 
73094: ST_TO_ADDR
// end ;
73095: LD_VAR 0 1
73099: RET
// export function PrepareMastodont ( ) ; begin
73100: LD_INT 0
73102: PPUSH
// uc_side := 0 ;
73103: LD_ADDR_OWVAR 20
73107: PUSH
73108: LD_INT 0
73110: ST_TO_ADDR
// uc_nation := 0 ;
73111: LD_ADDR_OWVAR 21
73115: PUSH
73116: LD_INT 0
73118: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73119: LD_ADDR_OWVAR 37
73123: PUSH
73124: LD_INT 31
73126: ST_TO_ADDR
// vc_control := control_rider ;
73127: LD_ADDR_OWVAR 38
73131: PUSH
73132: LD_INT 4
73134: ST_TO_ADDR
// end ;
73135: LD_VAR 0 1
73139: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73140: LD_INT 0
73142: PPUSH
73143: PPUSH
73144: PPUSH
// uc_side = 0 ;
73145: LD_ADDR_OWVAR 20
73149: PUSH
73150: LD_INT 0
73152: ST_TO_ADDR
// uc_nation = 0 ;
73153: LD_ADDR_OWVAR 21
73157: PUSH
73158: LD_INT 0
73160: ST_TO_ADDR
// InitHc_All ( ) ;
73161: CALL_OW 584
// InitVc ;
73165: CALL_OW 20
// if mastodonts then
73169: LD_VAR 0 6
73173: IFFALSE 73240
// for i = 1 to mastodonts do
73175: LD_ADDR_VAR 0 11
73179: PUSH
73180: DOUBLE
73181: LD_INT 1
73183: DEC
73184: ST_TO_ADDR
73185: LD_VAR 0 6
73189: PUSH
73190: FOR_TO
73191: IFFALSE 73238
// begin vc_chassis := 31 ;
73193: LD_ADDR_OWVAR 37
73197: PUSH
73198: LD_INT 31
73200: ST_TO_ADDR
// vc_control := control_rider ;
73201: LD_ADDR_OWVAR 38
73205: PUSH
73206: LD_INT 4
73208: ST_TO_ADDR
// animal := CreateVehicle ;
73209: LD_ADDR_VAR 0 12
73213: PUSH
73214: CALL_OW 45
73218: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73219: LD_VAR 0 12
73223: PPUSH
73224: LD_VAR 0 8
73228: PPUSH
73229: LD_INT 0
73231: PPUSH
73232: CALL 75368 0 3
// end ;
73236: GO 73190
73238: POP
73239: POP
// if horses then
73240: LD_VAR 0 5
73244: IFFALSE 73311
// for i = 1 to horses do
73246: LD_ADDR_VAR 0 11
73250: PUSH
73251: DOUBLE
73252: LD_INT 1
73254: DEC
73255: ST_TO_ADDR
73256: LD_VAR 0 5
73260: PUSH
73261: FOR_TO
73262: IFFALSE 73309
// begin hc_class := 21 ;
73264: LD_ADDR_OWVAR 28
73268: PUSH
73269: LD_INT 21
73271: ST_TO_ADDR
// hc_gallery :=  ;
73272: LD_ADDR_OWVAR 33
73276: PUSH
73277: LD_STRING 
73279: ST_TO_ADDR
// animal := CreateHuman ;
73280: LD_ADDR_VAR 0 12
73284: PUSH
73285: CALL_OW 44
73289: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73290: LD_VAR 0 12
73294: PPUSH
73295: LD_VAR 0 8
73299: PPUSH
73300: LD_INT 0
73302: PPUSH
73303: CALL 75368 0 3
// end ;
73307: GO 73261
73309: POP
73310: POP
// if birds then
73311: LD_VAR 0 1
73315: IFFALSE 73382
// for i = 1 to birds do
73317: LD_ADDR_VAR 0 11
73321: PUSH
73322: DOUBLE
73323: LD_INT 1
73325: DEC
73326: ST_TO_ADDR
73327: LD_VAR 0 1
73331: PUSH
73332: FOR_TO
73333: IFFALSE 73380
// begin hc_class := 18 ;
73335: LD_ADDR_OWVAR 28
73339: PUSH
73340: LD_INT 18
73342: ST_TO_ADDR
// hc_gallery =  ;
73343: LD_ADDR_OWVAR 33
73347: PUSH
73348: LD_STRING 
73350: ST_TO_ADDR
// animal := CreateHuman ;
73351: LD_ADDR_VAR 0 12
73355: PUSH
73356: CALL_OW 44
73360: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73361: LD_VAR 0 12
73365: PPUSH
73366: LD_VAR 0 8
73370: PPUSH
73371: LD_INT 0
73373: PPUSH
73374: CALL 75368 0 3
// end ;
73378: GO 73332
73380: POP
73381: POP
// if tigers then
73382: LD_VAR 0 2
73386: IFFALSE 73470
// for i = 1 to tigers do
73388: LD_ADDR_VAR 0 11
73392: PUSH
73393: DOUBLE
73394: LD_INT 1
73396: DEC
73397: ST_TO_ADDR
73398: LD_VAR 0 2
73402: PUSH
73403: FOR_TO
73404: IFFALSE 73468
// begin hc_class = class_tiger ;
73406: LD_ADDR_OWVAR 28
73410: PUSH
73411: LD_INT 14
73413: ST_TO_ADDR
// hc_gallery =  ;
73414: LD_ADDR_OWVAR 33
73418: PUSH
73419: LD_STRING 
73421: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73422: LD_ADDR_OWVAR 35
73426: PUSH
73427: LD_INT 7
73429: NEG
73430: PPUSH
73431: LD_INT 7
73433: PPUSH
73434: CALL_OW 12
73438: ST_TO_ADDR
// animal := CreateHuman ;
73439: LD_ADDR_VAR 0 12
73443: PUSH
73444: CALL_OW 44
73448: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73449: LD_VAR 0 12
73453: PPUSH
73454: LD_VAR 0 8
73458: PPUSH
73459: LD_INT 0
73461: PPUSH
73462: CALL 75368 0 3
// end ;
73466: GO 73403
73468: POP
73469: POP
// if apemans then
73470: LD_VAR 0 3
73474: IFFALSE 73597
// for i = 1 to apemans do
73476: LD_ADDR_VAR 0 11
73480: PUSH
73481: DOUBLE
73482: LD_INT 1
73484: DEC
73485: ST_TO_ADDR
73486: LD_VAR 0 3
73490: PUSH
73491: FOR_TO
73492: IFFALSE 73595
// begin hc_class = class_apeman ;
73494: LD_ADDR_OWVAR 28
73498: PUSH
73499: LD_INT 12
73501: ST_TO_ADDR
// hc_gallery =  ;
73502: LD_ADDR_OWVAR 33
73506: PUSH
73507: LD_STRING 
73509: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73510: LD_ADDR_OWVAR 35
73514: PUSH
73515: LD_INT 2
73517: NEG
73518: PPUSH
73519: LD_INT 2
73521: PPUSH
73522: CALL_OW 12
73526: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73527: LD_ADDR_OWVAR 31
73531: PUSH
73532: LD_INT 1
73534: PPUSH
73535: LD_INT 3
73537: PPUSH
73538: CALL_OW 12
73542: PUSH
73543: LD_INT 1
73545: PPUSH
73546: LD_INT 3
73548: PPUSH
73549: CALL_OW 12
73553: PUSH
73554: LD_INT 0
73556: PUSH
73557: LD_INT 0
73559: PUSH
73560: EMPTY
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: ST_TO_ADDR
// animal := CreateHuman ;
73566: LD_ADDR_VAR 0 12
73570: PUSH
73571: CALL_OW 44
73575: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73576: LD_VAR 0 12
73580: PPUSH
73581: LD_VAR 0 8
73585: PPUSH
73586: LD_INT 0
73588: PPUSH
73589: CALL 75368 0 3
// end ;
73593: GO 73491
73595: POP
73596: POP
// if enchidnas then
73597: LD_VAR 0 4
73601: IFFALSE 73668
// for i = 1 to enchidnas do
73603: LD_ADDR_VAR 0 11
73607: PUSH
73608: DOUBLE
73609: LD_INT 1
73611: DEC
73612: ST_TO_ADDR
73613: LD_VAR 0 4
73617: PUSH
73618: FOR_TO
73619: IFFALSE 73666
// begin hc_class = 13 ;
73621: LD_ADDR_OWVAR 28
73625: PUSH
73626: LD_INT 13
73628: ST_TO_ADDR
// hc_gallery =  ;
73629: LD_ADDR_OWVAR 33
73633: PUSH
73634: LD_STRING 
73636: ST_TO_ADDR
// animal := CreateHuman ;
73637: LD_ADDR_VAR 0 12
73641: PUSH
73642: CALL_OW 44
73646: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73647: LD_VAR 0 12
73651: PPUSH
73652: LD_VAR 0 8
73656: PPUSH
73657: LD_INT 0
73659: PPUSH
73660: CALL 75368 0 3
// end ;
73664: GO 73618
73666: POP
73667: POP
// if fishes then
73668: LD_VAR 0 7
73672: IFFALSE 73739
// for i = 1 to fishes do
73674: LD_ADDR_VAR 0 11
73678: PUSH
73679: DOUBLE
73680: LD_INT 1
73682: DEC
73683: ST_TO_ADDR
73684: LD_VAR 0 7
73688: PUSH
73689: FOR_TO
73690: IFFALSE 73737
// begin hc_class = 20 ;
73692: LD_ADDR_OWVAR 28
73696: PUSH
73697: LD_INT 20
73699: ST_TO_ADDR
// hc_gallery =  ;
73700: LD_ADDR_OWVAR 33
73704: PUSH
73705: LD_STRING 
73707: ST_TO_ADDR
// animal := CreateHuman ;
73708: LD_ADDR_VAR 0 12
73712: PUSH
73713: CALL_OW 44
73717: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73718: LD_VAR 0 12
73722: PPUSH
73723: LD_VAR 0 9
73727: PPUSH
73728: LD_INT 0
73730: PPUSH
73731: CALL 75368 0 3
// end ;
73735: GO 73689
73737: POP
73738: POP
// end ;
73739: LD_VAR 0 10
73743: RET
// export function WantHeal ( sci , unit ) ; begin
73744: LD_INT 0
73746: PPUSH
// if GetTaskList ( sci ) > 0 then
73747: LD_VAR 0 1
73751: PPUSH
73752: CALL_OW 437
73756: PUSH
73757: LD_INT 0
73759: GREATER
73760: IFFALSE 73830
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73762: LD_VAR 0 1
73766: PPUSH
73767: CALL_OW 437
73771: PUSH
73772: LD_INT 1
73774: ARRAY
73775: PUSH
73776: LD_INT 1
73778: ARRAY
73779: PUSH
73780: LD_STRING l
73782: EQUAL
73783: PUSH
73784: LD_VAR 0 1
73788: PPUSH
73789: CALL_OW 437
73793: PUSH
73794: LD_INT 1
73796: ARRAY
73797: PUSH
73798: LD_INT 4
73800: ARRAY
73801: PUSH
73802: LD_VAR 0 2
73806: EQUAL
73807: AND
73808: IFFALSE 73820
// result := true else
73810: LD_ADDR_VAR 0 3
73814: PUSH
73815: LD_INT 1
73817: ST_TO_ADDR
73818: GO 73828
// result := false ;
73820: LD_ADDR_VAR 0 3
73824: PUSH
73825: LD_INT 0
73827: ST_TO_ADDR
// end else
73828: GO 73838
// result := false ;
73830: LD_ADDR_VAR 0 3
73834: PUSH
73835: LD_INT 0
73837: ST_TO_ADDR
// end ;
73838: LD_VAR 0 3
73842: RET
// export function HealTarget ( sci ) ; begin
73843: LD_INT 0
73845: PPUSH
// if not sci then
73846: LD_VAR 0 1
73850: NOT
73851: IFFALSE 73855
// exit ;
73853: GO 73920
// result := 0 ;
73855: LD_ADDR_VAR 0 2
73859: PUSH
73860: LD_INT 0
73862: ST_TO_ADDR
// if GetTaskList ( sci ) then
73863: LD_VAR 0 1
73867: PPUSH
73868: CALL_OW 437
73872: IFFALSE 73920
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73874: LD_VAR 0 1
73878: PPUSH
73879: CALL_OW 437
73883: PUSH
73884: LD_INT 1
73886: ARRAY
73887: PUSH
73888: LD_INT 1
73890: ARRAY
73891: PUSH
73892: LD_STRING l
73894: EQUAL
73895: IFFALSE 73920
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73897: LD_ADDR_VAR 0 2
73901: PUSH
73902: LD_VAR 0 1
73906: PPUSH
73907: CALL_OW 437
73911: PUSH
73912: LD_INT 1
73914: ARRAY
73915: PUSH
73916: LD_INT 4
73918: ARRAY
73919: ST_TO_ADDR
// end ;
73920: LD_VAR 0 2
73924: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73925: LD_INT 0
73927: PPUSH
73928: PPUSH
73929: PPUSH
73930: PPUSH
// if not base_units then
73931: LD_VAR 0 1
73935: NOT
73936: IFFALSE 73940
// exit ;
73938: GO 74027
// result := false ;
73940: LD_ADDR_VAR 0 2
73944: PUSH
73945: LD_INT 0
73947: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73948: LD_ADDR_VAR 0 5
73952: PUSH
73953: LD_VAR 0 1
73957: PPUSH
73958: LD_INT 21
73960: PUSH
73961: LD_INT 3
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PPUSH
73968: CALL_OW 72
73972: ST_TO_ADDR
// if not tmp then
73973: LD_VAR 0 5
73977: NOT
73978: IFFALSE 73982
// exit ;
73980: GO 74027
// for i in tmp do
73982: LD_ADDR_VAR 0 3
73986: PUSH
73987: LD_VAR 0 5
73991: PUSH
73992: FOR_IN
73993: IFFALSE 74025
// begin result := EnemyInRange ( i , 22 ) ;
73995: LD_ADDR_VAR 0 2
73999: PUSH
74000: LD_VAR 0 3
74004: PPUSH
74005: LD_INT 22
74007: PPUSH
74008: CALL 71614 0 2
74012: ST_TO_ADDR
// if result then
74013: LD_VAR 0 2
74017: IFFALSE 74023
// exit ;
74019: POP
74020: POP
74021: GO 74027
// end ;
74023: GO 73992
74025: POP
74026: POP
// end ;
74027: LD_VAR 0 2
74031: RET
// export function FilterByTag ( units , tag ) ; begin
74032: LD_INT 0
74034: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74035: LD_ADDR_VAR 0 3
74039: PUSH
74040: LD_VAR 0 1
74044: PPUSH
74045: LD_INT 120
74047: PUSH
74048: LD_VAR 0 2
74052: PUSH
74053: EMPTY
74054: LIST
74055: LIST
74056: PPUSH
74057: CALL_OW 72
74061: ST_TO_ADDR
// end ;
74062: LD_VAR 0 3
74066: RET
// export function IsDriver ( un ) ; begin
74067: LD_INT 0
74069: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74070: LD_ADDR_VAR 0 2
74074: PUSH
74075: LD_VAR 0 1
74079: PUSH
74080: LD_INT 55
74082: PUSH
74083: EMPTY
74084: LIST
74085: PPUSH
74086: CALL_OW 69
74090: IN
74091: ST_TO_ADDR
// end ;
74092: LD_VAR 0 2
74096: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74097: LD_INT 0
74099: PPUSH
74100: PPUSH
// list := [ ] ;
74101: LD_ADDR_VAR 0 5
74105: PUSH
74106: EMPTY
74107: ST_TO_ADDR
// case d of 0 :
74108: LD_VAR 0 3
74112: PUSH
74113: LD_INT 0
74115: DOUBLE
74116: EQUAL
74117: IFTRUE 74121
74119: GO 74254
74121: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74122: LD_ADDR_VAR 0 5
74126: PUSH
74127: LD_VAR 0 1
74131: PUSH
74132: LD_INT 4
74134: MINUS
74135: PUSH
74136: LD_VAR 0 2
74140: PUSH
74141: LD_INT 4
74143: MINUS
74144: PUSH
74145: LD_INT 2
74147: PUSH
74148: EMPTY
74149: LIST
74150: LIST
74151: LIST
74152: PUSH
74153: LD_VAR 0 1
74157: PUSH
74158: LD_INT 3
74160: MINUS
74161: PUSH
74162: LD_VAR 0 2
74166: PUSH
74167: LD_INT 1
74169: PUSH
74170: EMPTY
74171: LIST
74172: LIST
74173: LIST
74174: PUSH
74175: LD_VAR 0 1
74179: PUSH
74180: LD_INT 4
74182: PLUS
74183: PUSH
74184: LD_VAR 0 2
74188: PUSH
74189: LD_INT 4
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: LIST
74196: PUSH
74197: LD_VAR 0 1
74201: PUSH
74202: LD_INT 3
74204: PLUS
74205: PUSH
74206: LD_VAR 0 2
74210: PUSH
74211: LD_INT 3
74213: PLUS
74214: PUSH
74215: LD_INT 5
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: LIST
74222: PUSH
74223: LD_VAR 0 1
74227: PUSH
74228: LD_VAR 0 2
74232: PUSH
74233: LD_INT 4
74235: PLUS
74236: PUSH
74237: LD_INT 0
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: LIST
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: ST_TO_ADDR
// end ; 1 :
74252: GO 74952
74254: LD_INT 1
74256: DOUBLE
74257: EQUAL
74258: IFTRUE 74262
74260: GO 74395
74262: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74263: LD_ADDR_VAR 0 5
74267: PUSH
74268: LD_VAR 0 1
74272: PUSH
74273: LD_VAR 0 2
74277: PUSH
74278: LD_INT 4
74280: MINUS
74281: PUSH
74282: LD_INT 3
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: LIST
74289: PUSH
74290: LD_VAR 0 1
74294: PUSH
74295: LD_INT 3
74297: MINUS
74298: PUSH
74299: LD_VAR 0 2
74303: PUSH
74304: LD_INT 3
74306: MINUS
74307: PUSH
74308: LD_INT 2
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: LIST
74315: PUSH
74316: LD_VAR 0 1
74320: PUSH
74321: LD_INT 4
74323: MINUS
74324: PUSH
74325: LD_VAR 0 2
74329: PUSH
74330: LD_INT 1
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: LIST
74337: PUSH
74338: LD_VAR 0 1
74342: PUSH
74343: LD_VAR 0 2
74347: PUSH
74348: LD_INT 3
74350: PLUS
74351: PUSH
74352: LD_INT 0
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: LIST
74359: PUSH
74360: LD_VAR 0 1
74364: PUSH
74365: LD_INT 4
74367: PLUS
74368: PUSH
74369: LD_VAR 0 2
74373: PUSH
74374: LD_INT 4
74376: PLUS
74377: PUSH
74378: LD_INT 5
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: LIST
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: LIST
74390: LIST
74391: LIST
74392: ST_TO_ADDR
// end ; 2 :
74393: GO 74952
74395: LD_INT 2
74397: DOUBLE
74398: EQUAL
74399: IFTRUE 74403
74401: GO 74532
74403: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74404: LD_ADDR_VAR 0 5
74408: PUSH
74409: LD_VAR 0 1
74413: PUSH
74414: LD_VAR 0 2
74418: PUSH
74419: LD_INT 3
74421: MINUS
74422: PUSH
74423: LD_INT 3
74425: PUSH
74426: EMPTY
74427: LIST
74428: LIST
74429: LIST
74430: PUSH
74431: LD_VAR 0 1
74435: PUSH
74436: LD_INT 4
74438: PLUS
74439: PUSH
74440: LD_VAR 0 2
74444: PUSH
74445: LD_INT 4
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: LIST
74452: PUSH
74453: LD_VAR 0 1
74457: PUSH
74458: LD_VAR 0 2
74462: PUSH
74463: LD_INT 4
74465: PLUS
74466: PUSH
74467: LD_INT 0
74469: PUSH
74470: EMPTY
74471: LIST
74472: LIST
74473: LIST
74474: PUSH
74475: LD_VAR 0 1
74479: PUSH
74480: LD_INT 3
74482: MINUS
74483: PUSH
74484: LD_VAR 0 2
74488: PUSH
74489: LD_INT 1
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: LIST
74496: PUSH
74497: LD_VAR 0 1
74501: PUSH
74502: LD_INT 4
74504: MINUS
74505: PUSH
74506: LD_VAR 0 2
74510: PUSH
74511: LD_INT 4
74513: MINUS
74514: PUSH
74515: LD_INT 2
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: LIST
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: LIST
74527: LIST
74528: LIST
74529: ST_TO_ADDR
// end ; 3 :
74530: GO 74952
74532: LD_INT 3
74534: DOUBLE
74535: EQUAL
74536: IFTRUE 74540
74538: GO 74673
74540: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74541: LD_ADDR_VAR 0 5
74545: PUSH
74546: LD_VAR 0 1
74550: PUSH
74551: LD_INT 3
74553: PLUS
74554: PUSH
74555: LD_VAR 0 2
74559: PUSH
74560: LD_INT 4
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: LIST
74567: PUSH
74568: LD_VAR 0 1
74572: PUSH
74573: LD_INT 4
74575: PLUS
74576: PUSH
74577: LD_VAR 0 2
74581: PUSH
74582: LD_INT 4
74584: PLUS
74585: PUSH
74586: LD_INT 5
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: LIST
74593: PUSH
74594: LD_VAR 0 1
74598: PUSH
74599: LD_INT 4
74601: MINUS
74602: PUSH
74603: LD_VAR 0 2
74607: PUSH
74608: LD_INT 1
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: LIST
74615: PUSH
74616: LD_VAR 0 1
74620: PUSH
74621: LD_VAR 0 2
74625: PUSH
74626: LD_INT 4
74628: MINUS
74629: PUSH
74630: LD_INT 3
74632: PUSH
74633: EMPTY
74634: LIST
74635: LIST
74636: LIST
74637: PUSH
74638: LD_VAR 0 1
74642: PUSH
74643: LD_INT 3
74645: MINUS
74646: PUSH
74647: LD_VAR 0 2
74651: PUSH
74652: LD_INT 3
74654: MINUS
74655: PUSH
74656: LD_INT 2
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: LIST
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: LIST
74668: LIST
74669: LIST
74670: ST_TO_ADDR
// end ; 4 :
74671: GO 74952
74673: LD_INT 4
74675: DOUBLE
74676: EQUAL
74677: IFTRUE 74681
74679: GO 74814
74681: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74682: LD_ADDR_VAR 0 5
74686: PUSH
74687: LD_VAR 0 1
74691: PUSH
74692: LD_VAR 0 2
74696: PUSH
74697: LD_INT 4
74699: PLUS
74700: PUSH
74701: LD_INT 0
74703: PUSH
74704: EMPTY
74705: LIST
74706: LIST
74707: LIST
74708: PUSH
74709: LD_VAR 0 1
74713: PUSH
74714: LD_INT 3
74716: PLUS
74717: PUSH
74718: LD_VAR 0 2
74722: PUSH
74723: LD_INT 3
74725: PLUS
74726: PUSH
74727: LD_INT 5
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: LIST
74734: PUSH
74735: LD_VAR 0 1
74739: PUSH
74740: LD_INT 4
74742: PLUS
74743: PUSH
74744: LD_VAR 0 2
74748: PUSH
74749: LD_INT 4
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: LIST
74756: PUSH
74757: LD_VAR 0 1
74761: PUSH
74762: LD_VAR 0 2
74766: PUSH
74767: LD_INT 3
74769: MINUS
74770: PUSH
74771: LD_INT 3
74773: PUSH
74774: EMPTY
74775: LIST
74776: LIST
74777: LIST
74778: PUSH
74779: LD_VAR 0 1
74783: PUSH
74784: LD_INT 4
74786: MINUS
74787: PUSH
74788: LD_VAR 0 2
74792: PUSH
74793: LD_INT 4
74795: MINUS
74796: PUSH
74797: LD_INT 2
74799: PUSH
74800: EMPTY
74801: LIST
74802: LIST
74803: LIST
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: ST_TO_ADDR
// end ; 5 :
74812: GO 74952
74814: LD_INT 5
74816: DOUBLE
74817: EQUAL
74818: IFTRUE 74822
74820: GO 74951
74822: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74823: LD_ADDR_VAR 0 5
74827: PUSH
74828: LD_VAR 0 1
74832: PUSH
74833: LD_INT 4
74835: MINUS
74836: PUSH
74837: LD_VAR 0 2
74841: PUSH
74842: LD_INT 1
74844: PUSH
74845: EMPTY
74846: LIST
74847: LIST
74848: LIST
74849: PUSH
74850: LD_VAR 0 1
74854: PUSH
74855: LD_VAR 0 2
74859: PUSH
74860: LD_INT 4
74862: MINUS
74863: PUSH
74864: LD_INT 3
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: LIST
74871: PUSH
74872: LD_VAR 0 1
74876: PUSH
74877: LD_INT 4
74879: PLUS
74880: PUSH
74881: LD_VAR 0 2
74885: PUSH
74886: LD_INT 4
74888: PLUS
74889: PUSH
74890: LD_INT 5
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: LIST
74897: PUSH
74898: LD_VAR 0 1
74902: PUSH
74903: LD_INT 3
74905: PLUS
74906: PUSH
74907: LD_VAR 0 2
74911: PUSH
74912: LD_INT 4
74914: PUSH
74915: EMPTY
74916: LIST
74917: LIST
74918: LIST
74919: PUSH
74920: LD_VAR 0 1
74924: PUSH
74925: LD_VAR 0 2
74929: PUSH
74930: LD_INT 3
74932: PLUS
74933: PUSH
74934: LD_INT 0
74936: PUSH
74937: EMPTY
74938: LIST
74939: LIST
74940: LIST
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: LIST
74948: ST_TO_ADDR
// end ; end ;
74949: GO 74952
74951: POP
// result := list ;
74952: LD_ADDR_VAR 0 4
74956: PUSH
74957: LD_VAR 0 5
74961: ST_TO_ADDR
// end ;
74962: LD_VAR 0 4
74966: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74967: LD_INT 0
74969: PPUSH
74970: PPUSH
74971: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74972: LD_VAR 0 1
74976: NOT
74977: PUSH
74978: LD_VAR 0 2
74982: PUSH
74983: LD_INT 1
74985: PUSH
74986: LD_INT 2
74988: PUSH
74989: LD_INT 3
74991: PUSH
74992: LD_INT 4
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: LIST
74999: LIST
75000: IN
75001: NOT
75002: OR
75003: IFFALSE 75007
// exit ;
75005: GO 75090
// tmp := [ ] ;
75007: LD_ADDR_VAR 0 5
75011: PUSH
75012: EMPTY
75013: ST_TO_ADDR
// for i in units do
75014: LD_ADDR_VAR 0 4
75018: PUSH
75019: LD_VAR 0 1
75023: PUSH
75024: FOR_IN
75025: IFFALSE 75059
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75027: LD_ADDR_VAR 0 5
75031: PUSH
75032: LD_VAR 0 5
75036: PPUSH
75037: LD_VAR 0 4
75041: PPUSH
75042: LD_VAR 0 2
75046: PPUSH
75047: CALL_OW 259
75051: PPUSH
75052: CALL 76450 0 2
75056: ST_TO_ADDR
75057: GO 75024
75059: POP
75060: POP
// if not tmp then
75061: LD_VAR 0 5
75065: NOT
75066: IFFALSE 75070
// exit ;
75068: GO 75090
// result := SortListByListDesc ( units , tmp ) ;
75070: LD_ADDR_VAR 0 3
75074: PUSH
75075: LD_VAR 0 1
75079: PPUSH
75080: LD_VAR 0 5
75084: PPUSH
75085: CALL_OW 77
75089: ST_TO_ADDR
// end ;
75090: LD_VAR 0 3
75094: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75095: LD_INT 0
75097: PPUSH
75098: PPUSH
75099: PPUSH
// result := false ;
75100: LD_ADDR_VAR 0 3
75104: PUSH
75105: LD_INT 0
75107: ST_TO_ADDR
// if not building then
75108: LD_VAR 0 2
75112: NOT
75113: IFFALSE 75117
// exit ;
75115: GO 75255
// x := GetX ( building ) ;
75117: LD_ADDR_VAR 0 4
75121: PUSH
75122: LD_VAR 0 2
75126: PPUSH
75127: CALL_OW 250
75131: ST_TO_ADDR
// y := GetY ( building ) ;
75132: LD_ADDR_VAR 0 5
75136: PUSH
75137: LD_VAR 0 2
75141: PPUSH
75142: CALL_OW 251
75146: ST_TO_ADDR
// if not x or not y then
75147: LD_VAR 0 4
75151: NOT
75152: PUSH
75153: LD_VAR 0 5
75157: NOT
75158: OR
75159: IFFALSE 75163
// exit ;
75161: GO 75255
// if GetTaskList ( unit ) then
75163: LD_VAR 0 1
75167: PPUSH
75168: CALL_OW 437
75172: IFFALSE 75255
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75174: LD_STRING e
75176: PUSH
75177: LD_VAR 0 1
75181: PPUSH
75182: CALL_OW 437
75186: PUSH
75187: LD_INT 1
75189: ARRAY
75190: PUSH
75191: LD_INT 1
75193: ARRAY
75194: EQUAL
75195: PUSH
75196: LD_VAR 0 4
75200: PUSH
75201: LD_VAR 0 1
75205: PPUSH
75206: CALL_OW 437
75210: PUSH
75211: LD_INT 1
75213: ARRAY
75214: PUSH
75215: LD_INT 2
75217: ARRAY
75218: EQUAL
75219: AND
75220: PUSH
75221: LD_VAR 0 5
75225: PUSH
75226: LD_VAR 0 1
75230: PPUSH
75231: CALL_OW 437
75235: PUSH
75236: LD_INT 1
75238: ARRAY
75239: PUSH
75240: LD_INT 3
75242: ARRAY
75243: EQUAL
75244: AND
75245: IFFALSE 75255
// result := true end ;
75247: LD_ADDR_VAR 0 3
75251: PUSH
75252: LD_INT 1
75254: ST_TO_ADDR
// end ;
75255: LD_VAR 0 3
75259: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75260: LD_INT 0
75262: PPUSH
// result := false ;
75263: LD_ADDR_VAR 0 4
75267: PUSH
75268: LD_INT 0
75270: ST_TO_ADDR
// if GetTaskList ( unit ) then
75271: LD_VAR 0 1
75275: PPUSH
75276: CALL_OW 437
75280: IFFALSE 75363
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75282: LD_STRING M
75284: PUSH
75285: LD_VAR 0 1
75289: PPUSH
75290: CALL_OW 437
75294: PUSH
75295: LD_INT 1
75297: ARRAY
75298: PUSH
75299: LD_INT 1
75301: ARRAY
75302: EQUAL
75303: PUSH
75304: LD_VAR 0 2
75308: PUSH
75309: LD_VAR 0 1
75313: PPUSH
75314: CALL_OW 437
75318: PUSH
75319: LD_INT 1
75321: ARRAY
75322: PUSH
75323: LD_INT 2
75325: ARRAY
75326: EQUAL
75327: AND
75328: PUSH
75329: LD_VAR 0 3
75333: PUSH
75334: LD_VAR 0 1
75338: PPUSH
75339: CALL_OW 437
75343: PUSH
75344: LD_INT 1
75346: ARRAY
75347: PUSH
75348: LD_INT 3
75350: ARRAY
75351: EQUAL
75352: AND
75353: IFFALSE 75363
// result := true ;
75355: LD_ADDR_VAR 0 4
75359: PUSH
75360: LD_INT 1
75362: ST_TO_ADDR
// end ; end ;
75363: LD_VAR 0 4
75367: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75368: LD_INT 0
75370: PPUSH
75371: PPUSH
75372: PPUSH
75373: PPUSH
// if not unit or not area then
75374: LD_VAR 0 1
75378: NOT
75379: PUSH
75380: LD_VAR 0 2
75384: NOT
75385: OR
75386: IFFALSE 75390
// exit ;
75388: GO 75553
// tmp := AreaToList ( area , i ) ;
75390: LD_ADDR_VAR 0 6
75394: PUSH
75395: LD_VAR 0 2
75399: PPUSH
75400: LD_VAR 0 5
75404: PPUSH
75405: CALL_OW 517
75409: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75410: LD_ADDR_VAR 0 5
75414: PUSH
75415: DOUBLE
75416: LD_INT 1
75418: DEC
75419: ST_TO_ADDR
75420: LD_VAR 0 6
75424: PUSH
75425: LD_INT 1
75427: ARRAY
75428: PUSH
75429: FOR_TO
75430: IFFALSE 75551
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75432: LD_ADDR_VAR 0 7
75436: PUSH
75437: LD_VAR 0 6
75441: PUSH
75442: LD_INT 1
75444: ARRAY
75445: PUSH
75446: LD_VAR 0 5
75450: ARRAY
75451: PUSH
75452: LD_VAR 0 6
75456: PUSH
75457: LD_INT 2
75459: ARRAY
75460: PUSH
75461: LD_VAR 0 5
75465: ARRAY
75466: PUSH
75467: EMPTY
75468: LIST
75469: LIST
75470: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
75471: LD_INT 92
75473: PUSH
75474: LD_VAR 0 7
75478: PUSH
75479: LD_INT 1
75481: ARRAY
75482: PUSH
75483: LD_VAR 0 7
75487: PUSH
75488: LD_INT 2
75490: ARRAY
75491: PUSH
75492: LD_INT 3
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: LIST
75499: LIST
75500: PPUSH
75501: CALL_OW 69
75505: PUSH
75506: LD_INT 0
75508: EQUAL
75509: IFFALSE 75549
// begin PlaceUnitArea ( unit , area , mode ) ;
75511: LD_VAR 0 1
75515: PPUSH
75516: LD_VAR 0 2
75520: PPUSH
75521: LD_VAR 0 3
75525: PPUSH
75526: CALL_OW 49
// result := IsPlaced ( unit ) ;
75530: LD_ADDR_VAR 0 4
75534: PUSH
75535: LD_VAR 0 1
75539: PPUSH
75540: CALL_OW 305
75544: ST_TO_ADDR
// exit ;
75545: POP
75546: POP
75547: GO 75553
// end ; end ;
75549: GO 75429
75551: POP
75552: POP
// end ;
75553: LD_VAR 0 4
75557: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75558: LD_INT 0
75560: PPUSH
75561: PPUSH
75562: PPUSH
// if not side or side > 8 then
75563: LD_VAR 0 1
75567: NOT
75568: PUSH
75569: LD_VAR 0 1
75573: PUSH
75574: LD_INT 8
75576: GREATER
75577: OR
75578: IFFALSE 75582
// exit ;
75580: GO 75769
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75582: LD_ADDR_VAR 0 4
75586: PUSH
75587: LD_INT 22
75589: PUSH
75590: LD_VAR 0 1
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: PUSH
75599: LD_INT 21
75601: PUSH
75602: LD_INT 3
75604: PUSH
75605: EMPTY
75606: LIST
75607: LIST
75608: PUSH
75609: EMPTY
75610: LIST
75611: LIST
75612: PPUSH
75613: CALL_OW 69
75617: ST_TO_ADDR
// if not tmp then
75618: LD_VAR 0 4
75622: NOT
75623: IFFALSE 75627
// exit ;
75625: GO 75769
// enable_addtolog := true ;
75627: LD_ADDR_OWVAR 81
75631: PUSH
75632: LD_INT 1
75634: ST_TO_ADDR
// AddToLog ( [ ) ;
75635: LD_STRING [
75637: PPUSH
75638: CALL_OW 561
// for i in tmp do
75642: LD_ADDR_VAR 0 3
75646: PUSH
75647: LD_VAR 0 4
75651: PUSH
75652: FOR_IN
75653: IFFALSE 75760
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75655: LD_STRING [
75657: PUSH
75658: LD_VAR 0 3
75662: PPUSH
75663: CALL_OW 266
75667: STR
75668: PUSH
75669: LD_STRING , 
75671: STR
75672: PUSH
75673: LD_VAR 0 3
75677: PPUSH
75678: CALL_OW 250
75682: STR
75683: PUSH
75684: LD_STRING , 
75686: STR
75687: PUSH
75688: LD_VAR 0 3
75692: PPUSH
75693: CALL_OW 251
75697: STR
75698: PUSH
75699: LD_STRING , 
75701: STR
75702: PUSH
75703: LD_VAR 0 3
75707: PPUSH
75708: CALL_OW 254
75712: STR
75713: PUSH
75714: LD_STRING , 
75716: STR
75717: PUSH
75718: LD_VAR 0 3
75722: PPUSH
75723: LD_INT 1
75725: PPUSH
75726: CALL_OW 268
75730: STR
75731: PUSH
75732: LD_STRING , 
75734: STR
75735: PUSH
75736: LD_VAR 0 3
75740: PPUSH
75741: LD_INT 2
75743: PPUSH
75744: CALL_OW 268
75748: STR
75749: PUSH
75750: LD_STRING ],
75752: STR
75753: PPUSH
75754: CALL_OW 561
// end ;
75758: GO 75652
75760: POP
75761: POP
// AddToLog ( ]; ) ;
75762: LD_STRING ];
75764: PPUSH
75765: CALL_OW 561
// end ;
75769: LD_VAR 0 2
75773: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75774: LD_INT 0
75776: PPUSH
75777: PPUSH
75778: PPUSH
75779: PPUSH
75780: PPUSH
// if not area or not rate or not max then
75781: LD_VAR 0 1
75785: NOT
75786: PUSH
75787: LD_VAR 0 2
75791: NOT
75792: OR
75793: PUSH
75794: LD_VAR 0 4
75798: NOT
75799: OR
75800: IFFALSE 75804
// exit ;
75802: GO 75993
// while 1 do
75804: LD_INT 1
75806: IFFALSE 75993
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75808: LD_ADDR_VAR 0 9
75812: PUSH
75813: LD_VAR 0 1
75817: PPUSH
75818: LD_INT 1
75820: PPUSH
75821: CALL_OW 287
75825: PUSH
75826: LD_INT 10
75828: MUL
75829: ST_TO_ADDR
// r := rate / 10 ;
75830: LD_ADDR_VAR 0 7
75834: PUSH
75835: LD_VAR 0 2
75839: PUSH
75840: LD_INT 10
75842: DIVREAL
75843: ST_TO_ADDR
// time := 1 1$00 ;
75844: LD_ADDR_VAR 0 8
75848: PUSH
75849: LD_INT 2100
75851: ST_TO_ADDR
// if amount < min then
75852: LD_VAR 0 9
75856: PUSH
75857: LD_VAR 0 3
75861: LESS
75862: IFFALSE 75880
// r := r * 2 else
75864: LD_ADDR_VAR 0 7
75868: PUSH
75869: LD_VAR 0 7
75873: PUSH
75874: LD_INT 2
75876: MUL
75877: ST_TO_ADDR
75878: GO 75906
// if amount > max then
75880: LD_VAR 0 9
75884: PUSH
75885: LD_VAR 0 4
75889: GREATER
75890: IFFALSE 75906
// r := r / 2 ;
75892: LD_ADDR_VAR 0 7
75896: PUSH
75897: LD_VAR 0 7
75901: PUSH
75902: LD_INT 2
75904: DIVREAL
75905: ST_TO_ADDR
// time := time / r ;
75906: LD_ADDR_VAR 0 8
75910: PUSH
75911: LD_VAR 0 8
75915: PUSH
75916: LD_VAR 0 7
75920: DIVREAL
75921: ST_TO_ADDR
// if time < 0 then
75922: LD_VAR 0 8
75926: PUSH
75927: LD_INT 0
75929: LESS
75930: IFFALSE 75947
// time := time * - 1 ;
75932: LD_ADDR_VAR 0 8
75936: PUSH
75937: LD_VAR 0 8
75941: PUSH
75942: LD_INT 1
75944: NEG
75945: MUL
75946: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75947: LD_VAR 0 8
75951: PUSH
75952: LD_INT 35
75954: PPUSH
75955: LD_INT 875
75957: PPUSH
75958: CALL_OW 12
75962: PLUS
75963: PPUSH
75964: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75968: LD_INT 1
75970: PPUSH
75971: LD_INT 5
75973: PPUSH
75974: CALL_OW 12
75978: PPUSH
75979: LD_VAR 0 1
75983: PPUSH
75984: LD_INT 1
75986: PPUSH
75987: CALL_OW 55
// end ;
75991: GO 75804
// end ;
75993: LD_VAR 0 5
75997: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
75998: LD_INT 0
76000: PPUSH
76001: PPUSH
76002: PPUSH
76003: PPUSH
76004: PPUSH
76005: PPUSH
76006: PPUSH
76007: PPUSH
// if not turrets or not factories then
76008: LD_VAR 0 1
76012: NOT
76013: PUSH
76014: LD_VAR 0 2
76018: NOT
76019: OR
76020: IFFALSE 76024
// exit ;
76022: GO 76331
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76024: LD_ADDR_VAR 0 10
76028: PUSH
76029: LD_INT 5
76031: PUSH
76032: LD_INT 6
76034: PUSH
76035: EMPTY
76036: LIST
76037: LIST
76038: PUSH
76039: LD_INT 2
76041: PUSH
76042: LD_INT 4
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: PUSH
76049: LD_INT 3
76051: PUSH
76052: LD_INT 5
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: PUSH
76059: EMPTY
76060: LIST
76061: LIST
76062: LIST
76063: PUSH
76064: LD_INT 24
76066: PUSH
76067: LD_INT 25
76069: PUSH
76070: EMPTY
76071: LIST
76072: LIST
76073: PUSH
76074: LD_INT 23
76076: PUSH
76077: LD_INT 27
76079: PUSH
76080: EMPTY
76081: LIST
76082: LIST
76083: PUSH
76084: EMPTY
76085: LIST
76086: LIST
76087: PUSH
76088: LD_INT 42
76090: PUSH
76091: LD_INT 43
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: PUSH
76098: LD_INT 44
76100: PUSH
76101: LD_INT 46
76103: PUSH
76104: EMPTY
76105: LIST
76106: LIST
76107: PUSH
76108: LD_INT 45
76110: PUSH
76111: LD_INT 47
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: PUSH
76118: EMPTY
76119: LIST
76120: LIST
76121: LIST
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: LIST
76127: ST_TO_ADDR
// result := [ ] ;
76128: LD_ADDR_VAR 0 3
76132: PUSH
76133: EMPTY
76134: ST_TO_ADDR
// for i in turrets do
76135: LD_ADDR_VAR 0 4
76139: PUSH
76140: LD_VAR 0 1
76144: PUSH
76145: FOR_IN
76146: IFFALSE 76329
// begin nat := GetNation ( i ) ;
76148: LD_ADDR_VAR 0 7
76152: PUSH
76153: LD_VAR 0 4
76157: PPUSH
76158: CALL_OW 248
76162: ST_TO_ADDR
// weapon := 0 ;
76163: LD_ADDR_VAR 0 8
76167: PUSH
76168: LD_INT 0
76170: ST_TO_ADDR
// if not nat then
76171: LD_VAR 0 7
76175: NOT
76176: IFFALSE 76180
// continue ;
76178: GO 76145
// for j in list [ nat ] do
76180: LD_ADDR_VAR 0 5
76184: PUSH
76185: LD_VAR 0 10
76189: PUSH
76190: LD_VAR 0 7
76194: ARRAY
76195: PUSH
76196: FOR_IN
76197: IFFALSE 76238
// if GetBWeapon ( i ) = j [ 1 ] then
76199: LD_VAR 0 4
76203: PPUSH
76204: CALL_OW 269
76208: PUSH
76209: LD_VAR 0 5
76213: PUSH
76214: LD_INT 1
76216: ARRAY
76217: EQUAL
76218: IFFALSE 76236
// begin weapon := j [ 2 ] ;
76220: LD_ADDR_VAR 0 8
76224: PUSH
76225: LD_VAR 0 5
76229: PUSH
76230: LD_INT 2
76232: ARRAY
76233: ST_TO_ADDR
// break ;
76234: GO 76238
// end ;
76236: GO 76196
76238: POP
76239: POP
// if not weapon then
76240: LD_VAR 0 8
76244: NOT
76245: IFFALSE 76249
// continue ;
76247: GO 76145
// for k in factories do
76249: LD_ADDR_VAR 0 6
76253: PUSH
76254: LD_VAR 0 2
76258: PUSH
76259: FOR_IN
76260: IFFALSE 76325
// begin weapons := AvailableWeaponList ( k ) ;
76262: LD_ADDR_VAR 0 9
76266: PUSH
76267: LD_VAR 0 6
76271: PPUSH
76272: CALL_OW 478
76276: ST_TO_ADDR
// if not weapons then
76277: LD_VAR 0 9
76281: NOT
76282: IFFALSE 76286
// continue ;
76284: GO 76259
// if weapon in weapons then
76286: LD_VAR 0 8
76290: PUSH
76291: LD_VAR 0 9
76295: IN
76296: IFFALSE 76323
// begin result := [ i , weapon ] ;
76298: LD_ADDR_VAR 0 3
76302: PUSH
76303: LD_VAR 0 4
76307: PUSH
76308: LD_VAR 0 8
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: ST_TO_ADDR
// exit ;
76317: POP
76318: POP
76319: POP
76320: POP
76321: GO 76331
// end ; end ;
76323: GO 76259
76325: POP
76326: POP
// end ;
76327: GO 76145
76329: POP
76330: POP
// end ;
76331: LD_VAR 0 3
76335: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76336: LD_INT 0
76338: PPUSH
// if not side or side > 8 then
76339: LD_VAR 0 3
76343: NOT
76344: PUSH
76345: LD_VAR 0 3
76349: PUSH
76350: LD_INT 8
76352: GREATER
76353: OR
76354: IFFALSE 76358
// exit ;
76356: GO 76417
// if not range then
76358: LD_VAR 0 4
76362: NOT
76363: IFFALSE 76374
// range := - 12 ;
76365: LD_ADDR_VAR 0 4
76369: PUSH
76370: LD_INT 12
76372: NEG
76373: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76374: LD_VAR 0 1
76378: PPUSH
76379: LD_VAR 0 2
76383: PPUSH
76384: LD_VAR 0 3
76388: PPUSH
76389: LD_VAR 0 4
76393: PPUSH
76394: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76398: LD_VAR 0 1
76402: PPUSH
76403: LD_VAR 0 2
76407: PPUSH
76408: LD_VAR 0 3
76412: PPUSH
76413: CALL_OW 331
// end ;
76417: LD_VAR 0 5
76421: RET
// export function Video ( mode ) ; begin
76422: LD_INT 0
76424: PPUSH
// ingame_video = mode ;
76425: LD_ADDR_OWVAR 52
76429: PUSH
76430: LD_VAR 0 1
76434: ST_TO_ADDR
// interface_hidden = mode ;
76435: LD_ADDR_OWVAR 54
76439: PUSH
76440: LD_VAR 0 1
76444: ST_TO_ADDR
// end ;
76445: LD_VAR 0 2
76449: RET
// export function Join ( array , element ) ; begin
76450: LD_INT 0
76452: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76453: LD_ADDR_VAR 0 3
76457: PUSH
76458: LD_VAR 0 1
76462: PPUSH
76463: LD_VAR 0 1
76467: PUSH
76468: LD_INT 1
76470: PLUS
76471: PPUSH
76472: LD_VAR 0 2
76476: PPUSH
76477: CALL_OW 1
76481: ST_TO_ADDR
// end ;
76482: LD_VAR 0 3
76486: RET
// export function JoinUnion ( array , element ) ; begin
76487: LD_INT 0
76489: PPUSH
// result := array union element ;
76490: LD_ADDR_VAR 0 3
76494: PUSH
76495: LD_VAR 0 1
76499: PUSH
76500: LD_VAR 0 2
76504: UNION
76505: ST_TO_ADDR
// end ;
76506: LD_VAR 0 3
76510: RET
// export function GetBehemoths ( side ) ; begin
76511: LD_INT 0
76513: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76514: LD_ADDR_VAR 0 2
76518: PUSH
76519: LD_INT 22
76521: PUSH
76522: LD_VAR 0 1
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: PUSH
76531: LD_INT 31
76533: PUSH
76534: LD_INT 25
76536: PUSH
76537: EMPTY
76538: LIST
76539: LIST
76540: PUSH
76541: EMPTY
76542: LIST
76543: LIST
76544: PPUSH
76545: CALL_OW 69
76549: ST_TO_ADDR
// end ;
76550: LD_VAR 0 2
76554: RET
// export function Shuffle ( array ) ; var i , index ; begin
76555: LD_INT 0
76557: PPUSH
76558: PPUSH
76559: PPUSH
// result := [ ] ;
76560: LD_ADDR_VAR 0 2
76564: PUSH
76565: EMPTY
76566: ST_TO_ADDR
// if not array then
76567: LD_VAR 0 1
76571: NOT
76572: IFFALSE 76576
// exit ;
76574: GO 76675
// Randomize ;
76576: CALL_OW 10
// for i = array downto 1 do
76580: LD_ADDR_VAR 0 3
76584: PUSH
76585: DOUBLE
76586: LD_VAR 0 1
76590: INC
76591: ST_TO_ADDR
76592: LD_INT 1
76594: PUSH
76595: FOR_DOWNTO
76596: IFFALSE 76673
// begin index := rand ( 1 , array ) ;
76598: LD_ADDR_VAR 0 4
76602: PUSH
76603: LD_INT 1
76605: PPUSH
76606: LD_VAR 0 1
76610: PPUSH
76611: CALL_OW 12
76615: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76616: LD_ADDR_VAR 0 2
76620: PUSH
76621: LD_VAR 0 2
76625: PPUSH
76626: LD_VAR 0 2
76630: PUSH
76631: LD_INT 1
76633: PLUS
76634: PPUSH
76635: LD_VAR 0 1
76639: PUSH
76640: LD_VAR 0 4
76644: ARRAY
76645: PPUSH
76646: CALL_OW 2
76650: ST_TO_ADDR
// array := Delete ( array , index ) ;
76651: LD_ADDR_VAR 0 1
76655: PUSH
76656: LD_VAR 0 1
76660: PPUSH
76661: LD_VAR 0 4
76665: PPUSH
76666: CALL_OW 3
76670: ST_TO_ADDR
// end ;
76671: GO 76595
76673: POP
76674: POP
// end ;
76675: LD_VAR 0 2
76679: RET
// export function GetBaseMaterials ( base ) ; begin
76680: LD_INT 0
76682: PPUSH
// result := [ 0 , 0 , 0 ] ;
76683: LD_ADDR_VAR 0 2
76687: PUSH
76688: LD_INT 0
76690: PUSH
76691: LD_INT 0
76693: PUSH
76694: LD_INT 0
76696: PUSH
76697: EMPTY
76698: LIST
76699: LIST
76700: LIST
76701: ST_TO_ADDR
// if not base then
76702: LD_VAR 0 1
76706: NOT
76707: IFFALSE 76711
// exit ;
76709: GO 76760
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76711: LD_ADDR_VAR 0 2
76715: PUSH
76716: LD_VAR 0 1
76720: PPUSH
76721: LD_INT 1
76723: PPUSH
76724: CALL_OW 275
76728: PUSH
76729: LD_VAR 0 1
76733: PPUSH
76734: LD_INT 2
76736: PPUSH
76737: CALL_OW 275
76741: PUSH
76742: LD_VAR 0 1
76746: PPUSH
76747: LD_INT 3
76749: PPUSH
76750: CALL_OW 275
76754: PUSH
76755: EMPTY
76756: LIST
76757: LIST
76758: LIST
76759: ST_TO_ADDR
// end ;
76760: LD_VAR 0 2
76764: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76765: LD_INT 0
76767: PPUSH
76768: PPUSH
// result := array ;
76769: LD_ADDR_VAR 0 3
76773: PUSH
76774: LD_VAR 0 1
76778: ST_TO_ADDR
// if size >= result then
76779: LD_VAR 0 2
76783: PUSH
76784: LD_VAR 0 3
76788: GREATEREQUAL
76789: IFFALSE 76793
// exit ;
76791: GO 76843
// if size then
76793: LD_VAR 0 2
76797: IFFALSE 76843
// for i := array downto size do
76799: LD_ADDR_VAR 0 4
76803: PUSH
76804: DOUBLE
76805: LD_VAR 0 1
76809: INC
76810: ST_TO_ADDR
76811: LD_VAR 0 2
76815: PUSH
76816: FOR_DOWNTO
76817: IFFALSE 76841
// result := Delete ( result , result ) ;
76819: LD_ADDR_VAR 0 3
76823: PUSH
76824: LD_VAR 0 3
76828: PPUSH
76829: LD_VAR 0 3
76833: PPUSH
76834: CALL_OW 3
76838: ST_TO_ADDR
76839: GO 76816
76841: POP
76842: POP
// end ;
76843: LD_VAR 0 3
76847: RET
// export function ComExit ( unit ) ; var tmp ; begin
76848: LD_INT 0
76850: PPUSH
76851: PPUSH
// if not IsInUnit ( unit ) then
76852: LD_VAR 0 1
76856: PPUSH
76857: CALL_OW 310
76861: NOT
76862: IFFALSE 76866
// exit ;
76864: GO 76926
// tmp := IsInUnit ( unit ) ;
76866: LD_ADDR_VAR 0 3
76870: PUSH
76871: LD_VAR 0 1
76875: PPUSH
76876: CALL_OW 310
76880: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76881: LD_VAR 0 3
76885: PPUSH
76886: CALL_OW 247
76890: PUSH
76891: LD_INT 2
76893: EQUAL
76894: IFFALSE 76907
// ComExitVehicle ( unit ) else
76896: LD_VAR 0 1
76900: PPUSH
76901: CALL_OW 121
76905: GO 76916
// ComExitBuilding ( unit ) ;
76907: LD_VAR 0 1
76911: PPUSH
76912: CALL_OW 122
// result := tmp ;
76916: LD_ADDR_VAR 0 2
76920: PUSH
76921: LD_VAR 0 3
76925: ST_TO_ADDR
// end ;
76926: LD_VAR 0 2
76930: RET
// export function ComExitAll ( units ) ; var i ; begin
76931: LD_INT 0
76933: PPUSH
76934: PPUSH
// if not units then
76935: LD_VAR 0 1
76939: NOT
76940: IFFALSE 76944
// exit ;
76942: GO 76970
// for i in units do
76944: LD_ADDR_VAR 0 3
76948: PUSH
76949: LD_VAR 0 1
76953: PUSH
76954: FOR_IN
76955: IFFALSE 76968
// ComExit ( i ) ;
76957: LD_VAR 0 3
76961: PPUSH
76962: CALL 76848 0 1
76966: GO 76954
76968: POP
76969: POP
// end ;
76970: LD_VAR 0 2
76974: RET
// export function ResetHc ; begin
76975: LD_INT 0
76977: PPUSH
// InitHc ;
76978: CALL_OW 19
// hc_importance := 0 ;
76982: LD_ADDR_OWVAR 32
76986: PUSH
76987: LD_INT 0
76989: ST_TO_ADDR
// end ;
76990: LD_VAR 0 1
76994: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
76995: LD_INT 0
76997: PPUSH
76998: PPUSH
76999: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77000: LD_ADDR_VAR 0 6
77004: PUSH
77005: LD_VAR 0 1
77009: PUSH
77010: LD_VAR 0 3
77014: PLUS
77015: PUSH
77016: LD_INT 2
77018: DIV
77019: ST_TO_ADDR
// if _x < 0 then
77020: LD_VAR 0 6
77024: PUSH
77025: LD_INT 0
77027: LESS
77028: IFFALSE 77045
// _x := _x * - 1 ;
77030: LD_ADDR_VAR 0 6
77034: PUSH
77035: LD_VAR 0 6
77039: PUSH
77040: LD_INT 1
77042: NEG
77043: MUL
77044: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77045: LD_ADDR_VAR 0 7
77049: PUSH
77050: LD_VAR 0 2
77054: PUSH
77055: LD_VAR 0 4
77059: PLUS
77060: PUSH
77061: LD_INT 2
77063: DIV
77064: ST_TO_ADDR
// if _y < 0 then
77065: LD_VAR 0 7
77069: PUSH
77070: LD_INT 0
77072: LESS
77073: IFFALSE 77090
// _y := _y * - 1 ;
77075: LD_ADDR_VAR 0 7
77079: PUSH
77080: LD_VAR 0 7
77084: PUSH
77085: LD_INT 1
77087: NEG
77088: MUL
77089: ST_TO_ADDR
// result := [ _x , _y ] ;
77090: LD_ADDR_VAR 0 5
77094: PUSH
77095: LD_VAR 0 6
77099: PUSH
77100: LD_VAR 0 7
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: ST_TO_ADDR
// end ;
77109: LD_VAR 0 5
77113: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77114: LD_INT 0
77116: PPUSH
77117: PPUSH
77118: PPUSH
77119: PPUSH
// task := GetTaskList ( unit ) ;
77120: LD_ADDR_VAR 0 7
77124: PUSH
77125: LD_VAR 0 1
77129: PPUSH
77130: CALL_OW 437
77134: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77135: LD_VAR 0 7
77139: NOT
77140: PUSH
77141: LD_VAR 0 1
77145: PPUSH
77146: LD_VAR 0 2
77150: PPUSH
77151: CALL_OW 308
77155: NOT
77156: AND
77157: IFFALSE 77161
// exit ;
77159: GO 77279
// if IsInArea ( unit , area ) then
77161: LD_VAR 0 1
77165: PPUSH
77166: LD_VAR 0 2
77170: PPUSH
77171: CALL_OW 308
77175: IFFALSE 77193
// begin ComMoveToArea ( unit , goAway ) ;
77177: LD_VAR 0 1
77181: PPUSH
77182: LD_VAR 0 3
77186: PPUSH
77187: CALL_OW 113
// exit ;
77191: GO 77279
// end ; if task [ 1 ] [ 1 ] <> M then
77193: LD_VAR 0 7
77197: PUSH
77198: LD_INT 1
77200: ARRAY
77201: PUSH
77202: LD_INT 1
77204: ARRAY
77205: PUSH
77206: LD_STRING M
77208: NONEQUAL
77209: IFFALSE 77213
// exit ;
77211: GO 77279
// x := task [ 1 ] [ 2 ] ;
77213: LD_ADDR_VAR 0 5
77217: PUSH
77218: LD_VAR 0 7
77222: PUSH
77223: LD_INT 1
77225: ARRAY
77226: PUSH
77227: LD_INT 2
77229: ARRAY
77230: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77231: LD_ADDR_VAR 0 6
77235: PUSH
77236: LD_VAR 0 7
77240: PUSH
77241: LD_INT 1
77243: ARRAY
77244: PUSH
77245: LD_INT 3
77247: ARRAY
77248: ST_TO_ADDR
// if InArea ( x , y , area ) then
77249: LD_VAR 0 5
77253: PPUSH
77254: LD_VAR 0 6
77258: PPUSH
77259: LD_VAR 0 2
77263: PPUSH
77264: CALL_OW 309
77268: IFFALSE 77279
// ComStop ( unit ) ;
77270: LD_VAR 0 1
77274: PPUSH
77275: CALL_OW 141
// end ;
77279: LD_VAR 0 4
77283: RET
// export function Abs ( value ) ; begin
77284: LD_INT 0
77286: PPUSH
// result := value ;
77287: LD_ADDR_VAR 0 2
77291: PUSH
77292: LD_VAR 0 1
77296: ST_TO_ADDR
// if value < 0 then
77297: LD_VAR 0 1
77301: PUSH
77302: LD_INT 0
77304: LESS
77305: IFFALSE 77322
// result := value * - 1 ;
77307: LD_ADDR_VAR 0 2
77311: PUSH
77312: LD_VAR 0 1
77316: PUSH
77317: LD_INT 1
77319: NEG
77320: MUL
77321: ST_TO_ADDR
// end ;
77322: LD_VAR 0 2
77326: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77327: LD_INT 0
77329: PPUSH
77330: PPUSH
77331: PPUSH
77332: PPUSH
77333: PPUSH
77334: PPUSH
77335: PPUSH
77336: PPUSH
// if not unit or not building then
77337: LD_VAR 0 1
77341: NOT
77342: PUSH
77343: LD_VAR 0 2
77347: NOT
77348: OR
77349: IFFALSE 77353
// exit ;
77351: GO 77579
// x := GetX ( building ) ;
77353: LD_ADDR_VAR 0 4
77357: PUSH
77358: LD_VAR 0 2
77362: PPUSH
77363: CALL_OW 250
77367: ST_TO_ADDR
// y := GetY ( building ) ;
77368: LD_ADDR_VAR 0 6
77372: PUSH
77373: LD_VAR 0 2
77377: PPUSH
77378: CALL_OW 251
77382: ST_TO_ADDR
// d := GetDir ( building ) ;
77383: LD_ADDR_VAR 0 8
77387: PUSH
77388: LD_VAR 0 2
77392: PPUSH
77393: CALL_OW 254
77397: ST_TO_ADDR
// r := 4 ;
77398: LD_ADDR_VAR 0 9
77402: PUSH
77403: LD_INT 4
77405: ST_TO_ADDR
// for i := 1 to 5 do
77406: LD_ADDR_VAR 0 10
77410: PUSH
77411: DOUBLE
77412: LD_INT 1
77414: DEC
77415: ST_TO_ADDR
77416: LD_INT 5
77418: PUSH
77419: FOR_TO
77420: IFFALSE 77577
// begin _x := ShiftX ( x , d , r + i ) ;
77422: LD_ADDR_VAR 0 5
77426: PUSH
77427: LD_VAR 0 4
77431: PPUSH
77432: LD_VAR 0 8
77436: PPUSH
77437: LD_VAR 0 9
77441: PUSH
77442: LD_VAR 0 10
77446: PLUS
77447: PPUSH
77448: CALL_OW 272
77452: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77453: LD_ADDR_VAR 0 7
77457: PUSH
77458: LD_VAR 0 6
77462: PPUSH
77463: LD_VAR 0 8
77467: PPUSH
77468: LD_VAR 0 9
77472: PUSH
77473: LD_VAR 0 10
77477: PLUS
77478: PPUSH
77479: CALL_OW 273
77483: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77484: LD_VAR 0 5
77488: PPUSH
77489: LD_VAR 0 7
77493: PPUSH
77494: CALL_OW 488
77498: PUSH
77499: LD_VAR 0 5
77503: PPUSH
77504: LD_VAR 0 7
77508: PPUSH
77509: CALL_OW 428
77513: PPUSH
77514: CALL_OW 247
77518: PUSH
77519: LD_INT 3
77521: PUSH
77522: LD_INT 2
77524: PUSH
77525: EMPTY
77526: LIST
77527: LIST
77528: IN
77529: NOT
77530: AND
77531: IFFALSE 77575
// begin ComMoveXY ( unit , _x , _y ) ;
77533: LD_VAR 0 1
77537: PPUSH
77538: LD_VAR 0 5
77542: PPUSH
77543: LD_VAR 0 7
77547: PPUSH
77548: CALL_OW 111
// result := [ _x , _y ] ;
77552: LD_ADDR_VAR 0 3
77556: PUSH
77557: LD_VAR 0 5
77561: PUSH
77562: LD_VAR 0 7
77566: PUSH
77567: EMPTY
77568: LIST
77569: LIST
77570: ST_TO_ADDR
// exit ;
77571: POP
77572: POP
77573: GO 77579
// end ; end ;
77575: GO 77419
77577: POP
77578: POP
// end ;
77579: LD_VAR 0 3
77583: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77584: LD_INT 0
77586: PPUSH
77587: PPUSH
77588: PPUSH
// result := 0 ;
77589: LD_ADDR_VAR 0 3
77593: PUSH
77594: LD_INT 0
77596: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77597: LD_VAR 0 1
77601: PUSH
77602: LD_INT 0
77604: LESS
77605: PUSH
77606: LD_VAR 0 1
77610: PUSH
77611: LD_INT 8
77613: GREATER
77614: OR
77615: PUSH
77616: LD_VAR 0 2
77620: PUSH
77621: LD_INT 0
77623: LESS
77624: OR
77625: PUSH
77626: LD_VAR 0 2
77630: PUSH
77631: LD_INT 8
77633: GREATER
77634: OR
77635: IFFALSE 77639
// exit ;
77637: GO 77714
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77639: LD_ADDR_VAR 0 4
77643: PUSH
77644: LD_INT 22
77646: PUSH
77647: LD_VAR 0 2
77651: PUSH
77652: EMPTY
77653: LIST
77654: LIST
77655: PPUSH
77656: CALL_OW 69
77660: PUSH
77661: FOR_IN
77662: IFFALSE 77712
// begin un := UnitShoot ( i ) ;
77664: LD_ADDR_VAR 0 5
77668: PUSH
77669: LD_VAR 0 4
77673: PPUSH
77674: CALL_OW 504
77678: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77679: LD_VAR 0 5
77683: PPUSH
77684: CALL_OW 255
77688: PUSH
77689: LD_VAR 0 1
77693: EQUAL
77694: IFFALSE 77710
// begin result := un ;
77696: LD_ADDR_VAR 0 3
77700: PUSH
77701: LD_VAR 0 5
77705: ST_TO_ADDR
// exit ;
77706: POP
77707: POP
77708: GO 77714
// end ; end ;
77710: GO 77661
77712: POP
77713: POP
// end ;
77714: LD_VAR 0 3
77718: RET
// export function GetCargoBay ( units ) ; begin
77719: LD_INT 0
77721: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77722: LD_ADDR_VAR 0 2
77726: PUSH
77727: LD_VAR 0 1
77731: PPUSH
77732: LD_INT 2
77734: PUSH
77735: LD_INT 34
77737: PUSH
77738: LD_INT 12
77740: PUSH
77741: EMPTY
77742: LIST
77743: LIST
77744: PUSH
77745: LD_INT 34
77747: PUSH
77748: LD_INT 51
77750: PUSH
77751: EMPTY
77752: LIST
77753: LIST
77754: PUSH
77755: LD_INT 34
77757: PUSH
77758: LD_INT 32
77760: PUSH
77761: EMPTY
77762: LIST
77763: LIST
77764: PUSH
77765: LD_INT 34
77767: PUSH
77768: LD_INT 89
77770: PUSH
77771: EMPTY
77772: LIST
77773: LIST
77774: PUSH
77775: EMPTY
77776: LIST
77777: LIST
77778: LIST
77779: LIST
77780: LIST
77781: PPUSH
77782: CALL_OW 72
77786: ST_TO_ADDR
// end ;
77787: LD_VAR 0 2
77791: RET
// export function Negate ( value ) ; begin
77792: LD_INT 0
77794: PPUSH
// result := not value ;
77795: LD_ADDR_VAR 0 2
77799: PUSH
77800: LD_VAR 0 1
77804: NOT
77805: ST_TO_ADDR
// end ;
77806: LD_VAR 0 2
77810: RET
// export function Inc ( value ) ; begin
77811: LD_INT 0
77813: PPUSH
// result := value + 1 ;
77814: LD_ADDR_VAR 0 2
77818: PUSH
77819: LD_VAR 0 1
77823: PUSH
77824: LD_INT 1
77826: PLUS
77827: ST_TO_ADDR
// end ;
77828: LD_VAR 0 2
77832: RET
// export function Dec ( value ) ; begin
77833: LD_INT 0
77835: PPUSH
// result := value - 1 ;
77836: LD_ADDR_VAR 0 2
77840: PUSH
77841: LD_VAR 0 1
77845: PUSH
77846: LD_INT 1
77848: MINUS
77849: ST_TO_ADDR
// end ;
77850: LD_VAR 0 2
77854: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77855: LD_INT 0
77857: PPUSH
77858: PPUSH
77859: PPUSH
77860: PPUSH
77861: PPUSH
77862: PPUSH
77863: PPUSH
77864: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77865: LD_VAR 0 1
77869: PPUSH
77870: LD_VAR 0 2
77874: PPUSH
77875: CALL_OW 488
77879: NOT
77880: PUSH
77881: LD_VAR 0 3
77885: PPUSH
77886: LD_VAR 0 4
77890: PPUSH
77891: CALL_OW 488
77895: NOT
77896: OR
77897: IFFALSE 77910
// begin result := - 1 ;
77899: LD_ADDR_VAR 0 5
77903: PUSH
77904: LD_INT 1
77906: NEG
77907: ST_TO_ADDR
// exit ;
77908: GO 78145
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77910: LD_ADDR_VAR 0 12
77914: PUSH
77915: LD_VAR 0 1
77919: PPUSH
77920: LD_VAR 0 2
77924: PPUSH
77925: LD_VAR 0 3
77929: PPUSH
77930: LD_VAR 0 4
77934: PPUSH
77935: CALL 76995 0 4
77939: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77940: LD_ADDR_VAR 0 11
77944: PUSH
77945: LD_VAR 0 1
77949: PPUSH
77950: LD_VAR 0 2
77954: PPUSH
77955: LD_VAR 0 12
77959: PUSH
77960: LD_INT 1
77962: ARRAY
77963: PPUSH
77964: LD_VAR 0 12
77968: PUSH
77969: LD_INT 2
77971: ARRAY
77972: PPUSH
77973: CALL_OW 298
77977: ST_TO_ADDR
// distance := 9999 ;
77978: LD_ADDR_VAR 0 10
77982: PUSH
77983: LD_INT 9999
77985: ST_TO_ADDR
// for i := 0 to 5 do
77986: LD_ADDR_VAR 0 6
77990: PUSH
77991: DOUBLE
77992: LD_INT 0
77994: DEC
77995: ST_TO_ADDR
77996: LD_INT 5
77998: PUSH
77999: FOR_TO
78000: IFFALSE 78143
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78002: LD_ADDR_VAR 0 7
78006: PUSH
78007: LD_VAR 0 1
78011: PPUSH
78012: LD_VAR 0 6
78016: PPUSH
78017: LD_VAR 0 11
78021: PPUSH
78022: CALL_OW 272
78026: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78027: LD_ADDR_VAR 0 8
78031: PUSH
78032: LD_VAR 0 2
78036: PPUSH
78037: LD_VAR 0 6
78041: PPUSH
78042: LD_VAR 0 11
78046: PPUSH
78047: CALL_OW 273
78051: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78052: LD_VAR 0 7
78056: PPUSH
78057: LD_VAR 0 8
78061: PPUSH
78062: CALL_OW 488
78066: NOT
78067: IFFALSE 78071
// continue ;
78069: GO 77999
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78071: LD_ADDR_VAR 0 9
78075: PUSH
78076: LD_VAR 0 12
78080: PUSH
78081: LD_INT 1
78083: ARRAY
78084: PPUSH
78085: LD_VAR 0 12
78089: PUSH
78090: LD_INT 2
78092: ARRAY
78093: PPUSH
78094: LD_VAR 0 7
78098: PPUSH
78099: LD_VAR 0 8
78103: PPUSH
78104: CALL_OW 298
78108: ST_TO_ADDR
// if tmp < distance then
78109: LD_VAR 0 9
78113: PUSH
78114: LD_VAR 0 10
78118: LESS
78119: IFFALSE 78141
// begin result := i ;
78121: LD_ADDR_VAR 0 5
78125: PUSH
78126: LD_VAR 0 6
78130: ST_TO_ADDR
// distance := tmp ;
78131: LD_ADDR_VAR 0 10
78135: PUSH
78136: LD_VAR 0 9
78140: ST_TO_ADDR
// end ; end ;
78141: GO 77999
78143: POP
78144: POP
// end ;
78145: LD_VAR 0 5
78149: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78150: LD_INT 0
78152: PPUSH
78153: PPUSH
// if not driver or not IsInUnit ( driver ) then
78154: LD_VAR 0 1
78158: NOT
78159: PUSH
78160: LD_VAR 0 1
78164: PPUSH
78165: CALL_OW 310
78169: NOT
78170: OR
78171: IFFALSE 78175
// exit ;
78173: GO 78265
// vehicle := IsInUnit ( driver ) ;
78175: LD_ADDR_VAR 0 3
78179: PUSH
78180: LD_VAR 0 1
78184: PPUSH
78185: CALL_OW 310
78189: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78190: LD_VAR 0 1
78194: PPUSH
78195: LD_STRING \
78197: PUSH
78198: LD_INT 0
78200: PUSH
78201: LD_INT 0
78203: PUSH
78204: LD_INT 0
78206: PUSH
78207: LD_INT 0
78209: PUSH
78210: LD_INT 0
78212: PUSH
78213: LD_INT 0
78215: PUSH
78216: EMPTY
78217: LIST
78218: LIST
78219: LIST
78220: LIST
78221: LIST
78222: LIST
78223: LIST
78224: PUSH
78225: LD_STRING E
78227: PUSH
78228: LD_INT 0
78230: PUSH
78231: LD_INT 0
78233: PUSH
78234: LD_VAR 0 3
78238: PUSH
78239: LD_INT 0
78241: PUSH
78242: LD_INT 0
78244: PUSH
78245: LD_INT 0
78247: PUSH
78248: EMPTY
78249: LIST
78250: LIST
78251: LIST
78252: LIST
78253: LIST
78254: LIST
78255: LIST
78256: PUSH
78257: EMPTY
78258: LIST
78259: LIST
78260: PPUSH
78261: CALL_OW 446
// end ;
78265: LD_VAR 0 2
78269: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78270: LD_INT 0
78272: PPUSH
78273: PPUSH
// if not driver or not IsInUnit ( driver ) then
78274: LD_VAR 0 1
78278: NOT
78279: PUSH
78280: LD_VAR 0 1
78284: PPUSH
78285: CALL_OW 310
78289: NOT
78290: OR
78291: IFFALSE 78295
// exit ;
78293: GO 78385
// vehicle := IsInUnit ( driver ) ;
78295: LD_ADDR_VAR 0 3
78299: PUSH
78300: LD_VAR 0 1
78304: PPUSH
78305: CALL_OW 310
78309: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78310: LD_VAR 0 1
78314: PPUSH
78315: LD_STRING \
78317: PUSH
78318: LD_INT 0
78320: PUSH
78321: LD_INT 0
78323: PUSH
78324: LD_INT 0
78326: PUSH
78327: LD_INT 0
78329: PUSH
78330: LD_INT 0
78332: PUSH
78333: LD_INT 0
78335: PUSH
78336: EMPTY
78337: LIST
78338: LIST
78339: LIST
78340: LIST
78341: LIST
78342: LIST
78343: LIST
78344: PUSH
78345: LD_STRING E
78347: PUSH
78348: LD_INT 0
78350: PUSH
78351: LD_INT 0
78353: PUSH
78354: LD_VAR 0 3
78358: PUSH
78359: LD_INT 0
78361: PUSH
78362: LD_INT 0
78364: PUSH
78365: LD_INT 0
78367: PUSH
78368: EMPTY
78369: LIST
78370: LIST
78371: LIST
78372: LIST
78373: LIST
78374: LIST
78375: LIST
78376: PUSH
78377: EMPTY
78378: LIST
78379: LIST
78380: PPUSH
78381: CALL_OW 447
// end ;
78385: LD_VAR 0 2
78389: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78390: LD_INT 0
78392: PPUSH
78393: PPUSH
78394: PPUSH
// tmp := [ ] ;
78395: LD_ADDR_VAR 0 5
78399: PUSH
78400: EMPTY
78401: ST_TO_ADDR
// for i in units do
78402: LD_ADDR_VAR 0 4
78406: PUSH
78407: LD_VAR 0 1
78411: PUSH
78412: FOR_IN
78413: IFFALSE 78451
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78415: LD_ADDR_VAR 0 5
78419: PUSH
78420: LD_VAR 0 5
78424: PPUSH
78425: LD_VAR 0 5
78429: PUSH
78430: LD_INT 1
78432: PLUS
78433: PPUSH
78434: LD_VAR 0 4
78438: PPUSH
78439: CALL_OW 256
78443: PPUSH
78444: CALL_OW 2
78448: ST_TO_ADDR
78449: GO 78412
78451: POP
78452: POP
// if not tmp then
78453: LD_VAR 0 5
78457: NOT
78458: IFFALSE 78462
// exit ;
78460: GO 78510
// if asc then
78462: LD_VAR 0 2
78466: IFFALSE 78490
// result := SortListByListAsc ( units , tmp ) else
78468: LD_ADDR_VAR 0 3
78472: PUSH
78473: LD_VAR 0 1
78477: PPUSH
78478: LD_VAR 0 5
78482: PPUSH
78483: CALL_OW 76
78487: ST_TO_ADDR
78488: GO 78510
// result := SortListByListDesc ( units , tmp ) ;
78490: LD_ADDR_VAR 0 3
78494: PUSH
78495: LD_VAR 0 1
78499: PPUSH
78500: LD_VAR 0 5
78504: PPUSH
78505: CALL_OW 77
78509: ST_TO_ADDR
// end ;
78510: LD_VAR 0 3
78514: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78515: LD_INT 0
78517: PPUSH
78518: PPUSH
// task := GetTaskList ( mech ) ;
78519: LD_ADDR_VAR 0 4
78523: PUSH
78524: LD_VAR 0 1
78528: PPUSH
78529: CALL_OW 437
78533: ST_TO_ADDR
// if not task then
78534: LD_VAR 0 4
78538: NOT
78539: IFFALSE 78543
// exit ;
78541: GO 78585
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78543: LD_ADDR_VAR 0 3
78547: PUSH
78548: LD_VAR 0 4
78552: PUSH
78553: LD_INT 1
78555: ARRAY
78556: PUSH
78557: LD_INT 1
78559: ARRAY
78560: PUSH
78561: LD_STRING r
78563: EQUAL
78564: PUSH
78565: LD_VAR 0 4
78569: PUSH
78570: LD_INT 1
78572: ARRAY
78573: PUSH
78574: LD_INT 4
78576: ARRAY
78577: PUSH
78578: LD_VAR 0 2
78582: EQUAL
78583: AND
78584: ST_TO_ADDR
// end ;
78585: LD_VAR 0 3
78589: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78590: LD_INT 0
78592: PPUSH
// SetDir ( unit , d ) ;
78593: LD_VAR 0 1
78597: PPUSH
78598: LD_VAR 0 4
78602: PPUSH
78603: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78607: LD_VAR 0 1
78611: PPUSH
78612: LD_VAR 0 2
78616: PPUSH
78617: LD_VAR 0 3
78621: PPUSH
78622: LD_VAR 0 5
78626: PPUSH
78627: CALL_OW 48
// end ;
78631: LD_VAR 0 6
78635: RET
// export function ToNaturalNumber ( number ) ; begin
78636: LD_INT 0
78638: PPUSH
// result := number div 1 ;
78639: LD_ADDR_VAR 0 2
78643: PUSH
78644: LD_VAR 0 1
78648: PUSH
78649: LD_INT 1
78651: DIV
78652: ST_TO_ADDR
// if number < 0 then
78653: LD_VAR 0 1
78657: PUSH
78658: LD_INT 0
78660: LESS
78661: IFFALSE 78671
// result := 0 ;
78663: LD_ADDR_VAR 0 2
78667: PUSH
78668: LD_INT 0
78670: ST_TO_ADDR
// end ;
78671: LD_VAR 0 2
78675: RET
// export function SortByClass ( units , class ) ; var un ; begin
78676: LD_INT 0
78678: PPUSH
78679: PPUSH
// if not units or not class then
78680: LD_VAR 0 1
78684: NOT
78685: PUSH
78686: LD_VAR 0 2
78690: NOT
78691: OR
78692: IFFALSE 78696
// exit ;
78694: GO 78791
// result := [ ] ;
78696: LD_ADDR_VAR 0 3
78700: PUSH
78701: EMPTY
78702: ST_TO_ADDR
// for un in units do
78703: LD_ADDR_VAR 0 4
78707: PUSH
78708: LD_VAR 0 1
78712: PUSH
78713: FOR_IN
78714: IFFALSE 78789
// if GetClass ( un ) = class then
78716: LD_VAR 0 4
78720: PPUSH
78721: CALL_OW 257
78725: PUSH
78726: LD_VAR 0 2
78730: EQUAL
78731: IFFALSE 78758
// result := Insert ( result , 1 , un ) else
78733: LD_ADDR_VAR 0 3
78737: PUSH
78738: LD_VAR 0 3
78742: PPUSH
78743: LD_INT 1
78745: PPUSH
78746: LD_VAR 0 4
78750: PPUSH
78751: CALL_OW 2
78755: ST_TO_ADDR
78756: GO 78787
// result := Replace ( result , result + 1 , un ) ;
78758: LD_ADDR_VAR 0 3
78762: PUSH
78763: LD_VAR 0 3
78767: PPUSH
78768: LD_VAR 0 3
78772: PUSH
78773: LD_INT 1
78775: PLUS
78776: PPUSH
78777: LD_VAR 0 4
78781: PPUSH
78782: CALL_OW 1
78786: ST_TO_ADDR
78787: GO 78713
78789: POP
78790: POP
// end ;
78791: LD_VAR 0 3
78795: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78796: LD_INT 0
78798: PPUSH
78799: PPUSH
78800: PPUSH
78801: PPUSH
78802: PPUSH
78803: PPUSH
78804: PPUSH
// result := [ ] ;
78805: LD_ADDR_VAR 0 4
78809: PUSH
78810: EMPTY
78811: ST_TO_ADDR
// if x - r < 0 then
78812: LD_VAR 0 1
78816: PUSH
78817: LD_VAR 0 3
78821: MINUS
78822: PUSH
78823: LD_INT 0
78825: LESS
78826: IFFALSE 78838
// min_x := 0 else
78828: LD_ADDR_VAR 0 8
78832: PUSH
78833: LD_INT 0
78835: ST_TO_ADDR
78836: GO 78854
// min_x := x - r ;
78838: LD_ADDR_VAR 0 8
78842: PUSH
78843: LD_VAR 0 1
78847: PUSH
78848: LD_VAR 0 3
78852: MINUS
78853: ST_TO_ADDR
// if y - r < 0 then
78854: LD_VAR 0 2
78858: PUSH
78859: LD_VAR 0 3
78863: MINUS
78864: PUSH
78865: LD_INT 0
78867: LESS
78868: IFFALSE 78880
// min_y := 0 else
78870: LD_ADDR_VAR 0 7
78874: PUSH
78875: LD_INT 0
78877: ST_TO_ADDR
78878: GO 78896
// min_y := y - r ;
78880: LD_ADDR_VAR 0 7
78884: PUSH
78885: LD_VAR 0 2
78889: PUSH
78890: LD_VAR 0 3
78894: MINUS
78895: ST_TO_ADDR
// max_x := x + r ;
78896: LD_ADDR_VAR 0 9
78900: PUSH
78901: LD_VAR 0 1
78905: PUSH
78906: LD_VAR 0 3
78910: PLUS
78911: ST_TO_ADDR
// max_y := y + r ;
78912: LD_ADDR_VAR 0 10
78916: PUSH
78917: LD_VAR 0 2
78921: PUSH
78922: LD_VAR 0 3
78926: PLUS
78927: ST_TO_ADDR
// for _x = min_x to max_x do
78928: LD_ADDR_VAR 0 5
78932: PUSH
78933: DOUBLE
78934: LD_VAR 0 8
78938: DEC
78939: ST_TO_ADDR
78940: LD_VAR 0 9
78944: PUSH
78945: FOR_TO
78946: IFFALSE 79047
// for _y = min_y to max_y do
78948: LD_ADDR_VAR 0 6
78952: PUSH
78953: DOUBLE
78954: LD_VAR 0 7
78958: DEC
78959: ST_TO_ADDR
78960: LD_VAR 0 10
78964: PUSH
78965: FOR_TO
78966: IFFALSE 79043
// begin if not ValidHex ( _x , _y ) then
78968: LD_VAR 0 5
78972: PPUSH
78973: LD_VAR 0 6
78977: PPUSH
78978: CALL_OW 488
78982: NOT
78983: IFFALSE 78987
// continue ;
78985: GO 78965
// if GetResourceTypeXY ( _x , _y ) then
78987: LD_VAR 0 5
78991: PPUSH
78992: LD_VAR 0 6
78996: PPUSH
78997: CALL_OW 283
79001: IFFALSE 79041
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79003: LD_ADDR_VAR 0 4
79007: PUSH
79008: LD_VAR 0 4
79012: PPUSH
79013: LD_VAR 0 4
79017: PUSH
79018: LD_INT 1
79020: PLUS
79021: PPUSH
79022: LD_VAR 0 5
79026: PUSH
79027: LD_VAR 0 6
79031: PUSH
79032: EMPTY
79033: LIST
79034: LIST
79035: PPUSH
79036: CALL_OW 1
79040: ST_TO_ADDR
// end ;
79041: GO 78965
79043: POP
79044: POP
79045: GO 78945
79047: POP
79048: POP
// end ;
79049: LD_VAR 0 4
79053: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79054: LD_INT 0
79056: PPUSH
79057: PPUSH
79058: PPUSH
79059: PPUSH
79060: PPUSH
79061: PPUSH
79062: PPUSH
79063: PPUSH
// if not units then
79064: LD_VAR 0 1
79068: NOT
79069: IFFALSE 79073
// exit ;
79071: GO 79597
// result := UnitFilter ( units , [ f_ok ] ) ;
79073: LD_ADDR_VAR 0 3
79077: PUSH
79078: LD_VAR 0 1
79082: PPUSH
79083: LD_INT 50
79085: PUSH
79086: EMPTY
79087: LIST
79088: PPUSH
79089: CALL_OW 72
79093: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79094: LD_ADDR_VAR 0 8
79098: PUSH
79099: LD_VAR 0 1
79103: PUSH
79104: LD_INT 1
79106: ARRAY
79107: PPUSH
79108: CALL_OW 255
79112: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79113: LD_ADDR_VAR 0 10
79117: PUSH
79118: LD_INT 29
79120: PUSH
79121: LD_INT 91
79123: PUSH
79124: LD_INT 49
79126: PUSH
79127: EMPTY
79128: LIST
79129: LIST
79130: LIST
79131: ST_TO_ADDR
// if not result then
79132: LD_VAR 0 3
79136: NOT
79137: IFFALSE 79141
// exit ;
79139: GO 79597
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79141: LD_ADDR_VAR 0 5
79145: PUSH
79146: LD_INT 81
79148: PUSH
79149: LD_VAR 0 8
79153: PUSH
79154: EMPTY
79155: LIST
79156: LIST
79157: PPUSH
79158: CALL_OW 69
79162: ST_TO_ADDR
// for i in result do
79163: LD_ADDR_VAR 0 4
79167: PUSH
79168: LD_VAR 0 3
79172: PUSH
79173: FOR_IN
79174: IFFALSE 79595
// begin tag := GetTag ( i ) + 1 ;
79176: LD_ADDR_VAR 0 9
79180: PUSH
79181: LD_VAR 0 4
79185: PPUSH
79186: CALL_OW 110
79190: PUSH
79191: LD_INT 1
79193: PLUS
79194: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79195: LD_ADDR_VAR 0 7
79199: PUSH
79200: LD_VAR 0 4
79204: PPUSH
79205: CALL_OW 250
79209: PPUSH
79210: LD_VAR 0 4
79214: PPUSH
79215: CALL_OW 251
79219: PPUSH
79220: LD_INT 6
79222: PPUSH
79223: CALL 78796 0 3
79227: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79228: LD_VAR 0 4
79232: PPUSH
79233: CALL_OW 247
79237: PUSH
79238: LD_INT 2
79240: EQUAL
79241: PUSH
79242: LD_VAR 0 7
79246: AND
79247: PUSH
79248: LD_VAR 0 4
79252: PPUSH
79253: CALL_OW 264
79257: PUSH
79258: LD_VAR 0 10
79262: IN
79263: NOT
79264: AND
79265: IFFALSE 79304
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79267: LD_VAR 0 4
79271: PPUSH
79272: LD_VAR 0 7
79276: PUSH
79277: LD_INT 1
79279: ARRAY
79280: PUSH
79281: LD_INT 1
79283: ARRAY
79284: PPUSH
79285: LD_VAR 0 7
79289: PUSH
79290: LD_INT 1
79292: ARRAY
79293: PUSH
79294: LD_INT 2
79296: ARRAY
79297: PPUSH
79298: CALL_OW 116
79302: GO 79593
// if path > tag then
79304: LD_VAR 0 2
79308: PUSH
79309: LD_VAR 0 9
79313: GREATER
79314: IFFALSE 79522
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79316: LD_ADDR_VAR 0 6
79320: PUSH
79321: LD_VAR 0 5
79325: PPUSH
79326: LD_INT 91
79328: PUSH
79329: LD_VAR 0 4
79333: PUSH
79334: LD_INT 8
79336: PUSH
79337: EMPTY
79338: LIST
79339: LIST
79340: LIST
79341: PPUSH
79342: CALL_OW 72
79346: ST_TO_ADDR
// if nearEnemy then
79347: LD_VAR 0 6
79351: IFFALSE 79420
// begin if GetWeapon ( i ) = ru_time_lapser then
79353: LD_VAR 0 4
79357: PPUSH
79358: CALL_OW 264
79362: PUSH
79363: LD_INT 49
79365: EQUAL
79366: IFFALSE 79394
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79368: LD_VAR 0 4
79372: PPUSH
79373: LD_VAR 0 6
79377: PPUSH
79378: LD_VAR 0 4
79382: PPUSH
79383: CALL_OW 74
79387: PPUSH
79388: CALL_OW 112
79392: GO 79418
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79394: LD_VAR 0 4
79398: PPUSH
79399: LD_VAR 0 6
79403: PPUSH
79404: LD_VAR 0 4
79408: PPUSH
79409: CALL_OW 74
79413: PPUSH
79414: CALL 80522 0 2
// end else
79418: GO 79520
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79420: LD_VAR 0 4
79424: PPUSH
79425: LD_VAR 0 2
79429: PUSH
79430: LD_VAR 0 9
79434: ARRAY
79435: PUSH
79436: LD_INT 1
79438: ARRAY
79439: PPUSH
79440: LD_VAR 0 2
79444: PUSH
79445: LD_VAR 0 9
79449: ARRAY
79450: PUSH
79451: LD_INT 2
79453: ARRAY
79454: PPUSH
79455: CALL_OW 297
79459: PUSH
79460: LD_INT 6
79462: GREATER
79463: IFFALSE 79506
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79465: LD_VAR 0 4
79469: PPUSH
79470: LD_VAR 0 2
79474: PUSH
79475: LD_VAR 0 9
79479: ARRAY
79480: PUSH
79481: LD_INT 1
79483: ARRAY
79484: PPUSH
79485: LD_VAR 0 2
79489: PUSH
79490: LD_VAR 0 9
79494: ARRAY
79495: PUSH
79496: LD_INT 2
79498: ARRAY
79499: PPUSH
79500: CALL_OW 114
79504: GO 79520
// SetTag ( i , tag ) ;
79506: LD_VAR 0 4
79510: PPUSH
79511: LD_VAR 0 9
79515: PPUSH
79516: CALL_OW 109
// end else
79520: GO 79593
// if enemy then
79522: LD_VAR 0 5
79526: IFFALSE 79593
// begin if GetWeapon ( i ) = ru_time_lapser then
79528: LD_VAR 0 4
79532: PPUSH
79533: CALL_OW 264
79537: PUSH
79538: LD_INT 49
79540: EQUAL
79541: IFFALSE 79569
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79543: LD_VAR 0 4
79547: PPUSH
79548: LD_VAR 0 5
79552: PPUSH
79553: LD_VAR 0 4
79557: PPUSH
79558: CALL_OW 74
79562: PPUSH
79563: CALL_OW 112
79567: GO 79593
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79569: LD_VAR 0 4
79573: PPUSH
79574: LD_VAR 0 5
79578: PPUSH
79579: LD_VAR 0 4
79583: PPUSH
79584: CALL_OW 74
79588: PPUSH
79589: CALL 80522 0 2
// end ; end ;
79593: GO 79173
79595: POP
79596: POP
// end ;
79597: LD_VAR 0 3
79601: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79602: LD_INT 0
79604: PPUSH
79605: PPUSH
79606: PPUSH
// if not unit or IsInUnit ( unit ) then
79607: LD_VAR 0 1
79611: NOT
79612: PUSH
79613: LD_VAR 0 1
79617: PPUSH
79618: CALL_OW 310
79622: OR
79623: IFFALSE 79627
// exit ;
79625: GO 79718
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79627: LD_ADDR_VAR 0 4
79631: PUSH
79632: LD_VAR 0 1
79636: PPUSH
79637: CALL_OW 250
79641: PPUSH
79642: LD_VAR 0 2
79646: PPUSH
79647: LD_INT 1
79649: PPUSH
79650: CALL_OW 272
79654: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79655: LD_ADDR_VAR 0 5
79659: PUSH
79660: LD_VAR 0 1
79664: PPUSH
79665: CALL_OW 251
79669: PPUSH
79670: LD_VAR 0 2
79674: PPUSH
79675: LD_INT 1
79677: PPUSH
79678: CALL_OW 273
79682: ST_TO_ADDR
// if ValidHex ( x , y ) then
79683: LD_VAR 0 4
79687: PPUSH
79688: LD_VAR 0 5
79692: PPUSH
79693: CALL_OW 488
79697: IFFALSE 79718
// ComTurnXY ( unit , x , y ) ;
79699: LD_VAR 0 1
79703: PPUSH
79704: LD_VAR 0 4
79708: PPUSH
79709: LD_VAR 0 5
79713: PPUSH
79714: CALL_OW 118
// end ;
79718: LD_VAR 0 3
79722: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79723: LD_INT 0
79725: PPUSH
79726: PPUSH
// result := false ;
79727: LD_ADDR_VAR 0 3
79731: PUSH
79732: LD_INT 0
79734: ST_TO_ADDR
// if not units then
79735: LD_VAR 0 2
79739: NOT
79740: IFFALSE 79744
// exit ;
79742: GO 79789
// for i in units do
79744: LD_ADDR_VAR 0 4
79748: PUSH
79749: LD_VAR 0 2
79753: PUSH
79754: FOR_IN
79755: IFFALSE 79787
// if See ( side , i ) then
79757: LD_VAR 0 1
79761: PPUSH
79762: LD_VAR 0 4
79766: PPUSH
79767: CALL_OW 292
79771: IFFALSE 79785
// begin result := true ;
79773: LD_ADDR_VAR 0 3
79777: PUSH
79778: LD_INT 1
79780: ST_TO_ADDR
// exit ;
79781: POP
79782: POP
79783: GO 79789
// end ;
79785: GO 79754
79787: POP
79788: POP
// end ;
79789: LD_VAR 0 3
79793: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79794: LD_INT 0
79796: PPUSH
79797: PPUSH
79798: PPUSH
79799: PPUSH
// if not unit or not points then
79800: LD_VAR 0 1
79804: NOT
79805: PUSH
79806: LD_VAR 0 2
79810: NOT
79811: OR
79812: IFFALSE 79816
// exit ;
79814: GO 79906
// dist := 99999 ;
79816: LD_ADDR_VAR 0 5
79820: PUSH
79821: LD_INT 99999
79823: ST_TO_ADDR
// for i in points do
79824: LD_ADDR_VAR 0 4
79828: PUSH
79829: LD_VAR 0 2
79833: PUSH
79834: FOR_IN
79835: IFFALSE 79904
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79837: LD_ADDR_VAR 0 6
79841: PUSH
79842: LD_VAR 0 1
79846: PPUSH
79847: LD_VAR 0 4
79851: PUSH
79852: LD_INT 1
79854: ARRAY
79855: PPUSH
79856: LD_VAR 0 4
79860: PUSH
79861: LD_INT 2
79863: ARRAY
79864: PPUSH
79865: CALL_OW 297
79869: ST_TO_ADDR
// if tmpDist < dist then
79870: LD_VAR 0 6
79874: PUSH
79875: LD_VAR 0 5
79879: LESS
79880: IFFALSE 79902
// begin result := i ;
79882: LD_ADDR_VAR 0 3
79886: PUSH
79887: LD_VAR 0 4
79891: ST_TO_ADDR
// dist := tmpDist ;
79892: LD_ADDR_VAR 0 5
79896: PUSH
79897: LD_VAR 0 6
79901: ST_TO_ADDR
// end ; end ;
79902: GO 79834
79904: POP
79905: POP
// end ;
79906: LD_VAR 0 3
79910: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79911: LD_INT 0
79913: PPUSH
// uc_side := side ;
79914: LD_ADDR_OWVAR 20
79918: PUSH
79919: LD_VAR 0 1
79923: ST_TO_ADDR
// uc_nation := 3 ;
79924: LD_ADDR_OWVAR 21
79928: PUSH
79929: LD_INT 3
79931: ST_TO_ADDR
// vc_chassis := 25 ;
79932: LD_ADDR_OWVAR 37
79936: PUSH
79937: LD_INT 25
79939: ST_TO_ADDR
// vc_engine := engine_siberite ;
79940: LD_ADDR_OWVAR 39
79944: PUSH
79945: LD_INT 3
79947: ST_TO_ADDR
// vc_control := control_computer ;
79948: LD_ADDR_OWVAR 38
79952: PUSH
79953: LD_INT 3
79955: ST_TO_ADDR
// vc_weapon := 59 ;
79956: LD_ADDR_OWVAR 40
79960: PUSH
79961: LD_INT 59
79963: ST_TO_ADDR
// result := CreateVehicle ;
79964: LD_ADDR_VAR 0 5
79968: PUSH
79969: CALL_OW 45
79973: ST_TO_ADDR
// SetDir ( result , d ) ;
79974: LD_VAR 0 5
79978: PPUSH
79979: LD_VAR 0 4
79983: PPUSH
79984: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79988: LD_VAR 0 5
79992: PPUSH
79993: LD_VAR 0 2
79997: PPUSH
79998: LD_VAR 0 3
80002: PPUSH
80003: LD_INT 0
80005: PPUSH
80006: CALL_OW 48
// end ;
80010: LD_VAR 0 5
80014: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80015: LD_INT 0
80017: PPUSH
80018: PPUSH
80019: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80020: LD_ADDR_VAR 0 2
80024: PUSH
80025: LD_INT 0
80027: PUSH
80028: LD_INT 0
80030: PUSH
80031: LD_INT 0
80033: PUSH
80034: LD_INT 0
80036: PUSH
80037: EMPTY
80038: LIST
80039: LIST
80040: LIST
80041: LIST
80042: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80043: LD_VAR 0 1
80047: NOT
80048: PUSH
80049: LD_VAR 0 1
80053: PPUSH
80054: CALL_OW 264
80058: PUSH
80059: LD_INT 12
80061: PUSH
80062: LD_INT 51
80064: PUSH
80065: LD_INT 32
80067: PUSH
80068: LD_INT 89
80070: PUSH
80071: EMPTY
80072: LIST
80073: LIST
80074: LIST
80075: LIST
80076: IN
80077: NOT
80078: OR
80079: IFFALSE 80083
// exit ;
80081: GO 80181
// for i := 1 to 3 do
80083: LD_ADDR_VAR 0 3
80087: PUSH
80088: DOUBLE
80089: LD_INT 1
80091: DEC
80092: ST_TO_ADDR
80093: LD_INT 3
80095: PUSH
80096: FOR_TO
80097: IFFALSE 80179
// begin tmp := GetCargo ( cargo , i ) ;
80099: LD_ADDR_VAR 0 4
80103: PUSH
80104: LD_VAR 0 1
80108: PPUSH
80109: LD_VAR 0 3
80113: PPUSH
80114: CALL_OW 289
80118: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80119: LD_ADDR_VAR 0 2
80123: PUSH
80124: LD_VAR 0 2
80128: PPUSH
80129: LD_VAR 0 3
80133: PPUSH
80134: LD_VAR 0 4
80138: PPUSH
80139: CALL_OW 1
80143: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80144: LD_ADDR_VAR 0 2
80148: PUSH
80149: LD_VAR 0 2
80153: PPUSH
80154: LD_INT 4
80156: PPUSH
80157: LD_VAR 0 2
80161: PUSH
80162: LD_INT 4
80164: ARRAY
80165: PUSH
80166: LD_VAR 0 4
80170: PLUS
80171: PPUSH
80172: CALL_OW 1
80176: ST_TO_ADDR
// end ;
80177: GO 80096
80179: POP
80180: POP
// end ;
80181: LD_VAR 0 2
80185: RET
// export function Length ( array ) ; begin
80186: LD_INT 0
80188: PPUSH
// result := array + 0 ;
80189: LD_ADDR_VAR 0 2
80193: PUSH
80194: LD_VAR 0 1
80198: PUSH
80199: LD_INT 0
80201: PLUS
80202: ST_TO_ADDR
// end ;
80203: LD_VAR 0 2
80207: RET
// export function PrepareArray ( array ) ; begin
80208: LD_INT 0
80210: PPUSH
// result := array diff 0 ;
80211: LD_ADDR_VAR 0 2
80215: PUSH
80216: LD_VAR 0 1
80220: PUSH
80221: LD_INT 0
80223: DIFF
80224: ST_TO_ADDR
// if not result [ 1 ] then
80225: LD_VAR 0 2
80229: PUSH
80230: LD_INT 1
80232: ARRAY
80233: NOT
80234: IFFALSE 80254
// result := Delete ( result , 1 ) ;
80236: LD_ADDR_VAR 0 2
80240: PUSH
80241: LD_VAR 0 2
80245: PPUSH
80246: LD_INT 1
80248: PPUSH
80249: CALL_OW 3
80253: ST_TO_ADDR
// end ;
80254: LD_VAR 0 2
80258: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80259: LD_INT 0
80261: PPUSH
80262: PPUSH
80263: PPUSH
80264: PPUSH
// sibRocketRange := 25 ;
80265: LD_ADDR_VAR 0 6
80269: PUSH
80270: LD_INT 25
80272: ST_TO_ADDR
// result := false ;
80273: LD_ADDR_VAR 0 4
80277: PUSH
80278: LD_INT 0
80280: ST_TO_ADDR
// for i := 0 to 5 do
80281: LD_ADDR_VAR 0 5
80285: PUSH
80286: DOUBLE
80287: LD_INT 0
80289: DEC
80290: ST_TO_ADDR
80291: LD_INT 5
80293: PUSH
80294: FOR_TO
80295: IFFALSE 80362
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80297: LD_VAR 0 1
80301: PPUSH
80302: LD_VAR 0 5
80306: PPUSH
80307: LD_VAR 0 6
80311: PPUSH
80312: CALL_OW 272
80316: PPUSH
80317: LD_VAR 0 2
80321: PPUSH
80322: LD_VAR 0 5
80326: PPUSH
80327: LD_VAR 0 6
80331: PPUSH
80332: CALL_OW 273
80336: PPUSH
80337: LD_VAR 0 3
80341: PPUSH
80342: CALL_OW 309
80346: IFFALSE 80360
// begin result := true ;
80348: LD_ADDR_VAR 0 4
80352: PUSH
80353: LD_INT 1
80355: ST_TO_ADDR
// exit ;
80356: POP
80357: POP
80358: GO 80364
// end ;
80360: GO 80294
80362: POP
80363: POP
// end ;
80364: LD_VAR 0 4
80368: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80369: LD_INT 0
80371: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80372: LD_VAR 0 1
80376: PPUSH
80377: LD_VAR 0 2
80381: PPUSH
80382: LD_INT 0
80384: PPUSH
80385: LD_INT 0
80387: PPUSH
80388: LD_INT 1
80390: PPUSH
80391: LD_INT 0
80393: PPUSH
80394: CALL_OW 587
// end ;
80398: LD_VAR 0 3
80402: RET
// export function CenterOnNow ( unit ) ; begin
80403: LD_INT 0
80405: PPUSH
// result := IsInUnit ( unit ) ;
80406: LD_ADDR_VAR 0 2
80410: PUSH
80411: LD_VAR 0 1
80415: PPUSH
80416: CALL_OW 310
80420: ST_TO_ADDR
// if not result then
80421: LD_VAR 0 2
80425: NOT
80426: IFFALSE 80438
// result := unit ;
80428: LD_ADDR_VAR 0 2
80432: PUSH
80433: LD_VAR 0 1
80437: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
80438: LD_VAR 0 1
80442: PPUSH
80443: CALL_OW 87
// end ;
80447: LD_VAR 0 2
80451: RET
// export function ComMoveHex ( unit , hex ) ; begin
80452: LD_INT 0
80454: PPUSH
// if not hex then
80455: LD_VAR 0 2
80459: NOT
80460: IFFALSE 80464
// exit ;
80462: GO 80517
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
80464: LD_VAR 0 2
80468: PUSH
80469: LD_INT 1
80471: ARRAY
80472: PPUSH
80473: LD_VAR 0 2
80477: PUSH
80478: LD_INT 2
80480: ARRAY
80481: PPUSH
80482: CALL_OW 428
80486: IFFALSE 80490
// exit ;
80488: GO 80517
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
80490: LD_VAR 0 1
80494: PPUSH
80495: LD_VAR 0 2
80499: PUSH
80500: LD_INT 1
80502: ARRAY
80503: PPUSH
80504: LD_VAR 0 2
80508: PUSH
80509: LD_INT 2
80511: ARRAY
80512: PPUSH
80513: CALL_OW 111
// end ;
80517: LD_VAR 0 3
80521: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
80522: LD_INT 0
80524: PPUSH
80525: PPUSH
80526: PPUSH
// if not unit or not enemy then
80527: LD_VAR 0 1
80531: NOT
80532: PUSH
80533: LD_VAR 0 2
80537: NOT
80538: OR
80539: IFFALSE 80543
// exit ;
80541: GO 80667
// x := GetX ( enemy ) ;
80543: LD_ADDR_VAR 0 4
80547: PUSH
80548: LD_VAR 0 2
80552: PPUSH
80553: CALL_OW 250
80557: ST_TO_ADDR
// y := GetY ( enemy ) ;
80558: LD_ADDR_VAR 0 5
80562: PUSH
80563: LD_VAR 0 2
80567: PPUSH
80568: CALL_OW 251
80572: ST_TO_ADDR
// if ValidHex ( x , y ) then
80573: LD_VAR 0 4
80577: PPUSH
80578: LD_VAR 0 5
80582: PPUSH
80583: CALL_OW 488
80587: IFFALSE 80667
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
80589: LD_VAR 0 2
80593: PPUSH
80594: CALL_OW 247
80598: PUSH
80599: LD_INT 3
80601: PUSH
80602: LD_INT 2
80604: PUSH
80605: EMPTY
80606: LIST
80607: LIST
80608: IN
80609: PUSH
80610: LD_VAR 0 1
80614: PPUSH
80615: CALL_OW 255
80619: PPUSH
80620: LD_VAR 0 2
80624: PPUSH
80625: CALL_OW 292
80629: AND
80630: IFFALSE 80648
// ComAttackUnit ( unit , enemy ) else
80632: LD_VAR 0 1
80636: PPUSH
80637: LD_VAR 0 2
80641: PPUSH
80642: CALL_OW 115
80646: GO 80667
// ComAgressiveMove ( unit , x , y ) ;
80648: LD_VAR 0 1
80652: PPUSH
80653: LD_VAR 0 4
80657: PPUSH
80658: LD_VAR 0 5
80662: PPUSH
80663: CALL_OW 114
// end ; end_of_file
80667: LD_VAR 0 3
80671: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80672: LD_VAR 0 1
80676: PUSH
80677: LD_INT 200
80679: DOUBLE
80680: GREATEREQUAL
80681: IFFALSE 80689
80683: LD_INT 299
80685: DOUBLE
80686: LESSEQUAL
80687: IFTRUE 80691
80689: GO 80723
80691: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80692: LD_VAR 0 1
80696: PPUSH
80697: LD_VAR 0 2
80701: PPUSH
80702: LD_VAR 0 3
80706: PPUSH
80707: LD_VAR 0 4
80711: PPUSH
80712: LD_VAR 0 5
80716: PPUSH
80717: CALL 35216 0 5
80721: GO 80800
80723: LD_INT 300
80725: DOUBLE
80726: GREATEREQUAL
80727: IFFALSE 80735
80729: LD_INT 399
80731: DOUBLE
80732: LESSEQUAL
80733: IFTRUE 80737
80735: GO 80799
80737: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80738: LD_VAR 0 1
80742: PPUSH
80743: LD_VAR 0 2
80747: PPUSH
80748: LD_VAR 0 3
80752: PPUSH
80753: LD_VAR 0 4
80757: PPUSH
80758: LD_VAR 0 5
80762: PPUSH
80763: LD_VAR 0 6
80767: PPUSH
80768: LD_VAR 0 7
80772: PPUSH
80773: LD_VAR 0 8
80777: PPUSH
80778: LD_VAR 0 9
80782: PPUSH
80783: LD_VAR 0 10
80787: PPUSH
80788: LD_VAR 0 11
80792: PPUSH
80793: CALL 31541 0 11
80797: GO 80800
80799: POP
// end ;
80800: PPOPN 11
80802: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80803: LD_VAR 0 1
80807: PPUSH
80808: LD_VAR 0 2
80812: PPUSH
80813: LD_VAR 0 3
80817: PPUSH
80818: LD_VAR 0 4
80822: PPUSH
80823: LD_VAR 0 5
80827: PPUSH
80828: CALL 34952 0 5
// end ; end_of_file
80832: PPOPN 5
80834: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80835: LD_VAR 0 1
80839: PPUSH
80840: LD_VAR 0 2
80844: PPUSH
80845: LD_VAR 0 3
80849: PPUSH
80850: LD_VAR 0 4
80854: PPUSH
80855: LD_VAR 0 5
80859: PPUSH
80860: LD_VAR 0 6
80864: PPUSH
80865: CALL 19193 0 6
// end ;
80869: PPOPN 6
80871: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80872: LD_INT 0
80874: PPUSH
// begin if not units then
80875: LD_VAR 0 1
80879: NOT
80880: IFFALSE 80884
// exit ;
80882: GO 80884
// end ;
80884: PPOPN 7
80886: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80887: CALL 19097 0 0
// end ;
80891: PPOPN 1
80893: END
