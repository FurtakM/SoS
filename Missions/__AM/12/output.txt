// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15039 0 0
// PrepareDifficulty ;
  43: CALL 12412 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3776 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3914 0 0
// Action ;
  87: CALL 5578 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 39087 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 39087 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 39087 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 39087 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 39087 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 39087 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 39087 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 39087 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 39087 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 39087 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 39087 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 39087 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 39087 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 76555 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 6
3434: PPUSH
3435: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 112
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 47
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 4
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 129
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 135
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12731 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: LD_INT 22
3582: PUSH
3583: LD_INT 3
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 30
3592: PUSH
3593: LD_INT 32
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: CALL_OW 69
3608: PUSH
3609: FOR_IN
3610: IFFALSE 3650
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3612: LD_INT 3
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_EXP 29
3627: PPUSH
3628: LD_EXP 30
3632: PPUSH
3633: CALL_OW 12
3637: PPUSH
3638: LD_INT 1
3640: PPUSH
3641: LD_INT 1
3643: PPUSH
3644: CALL 12731 0 6
3648: GO 3609
3650: POP
3651: POP
// for i := 1 to 5 do
3652: LD_ADDR_VAR 0 2
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 5
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3769
// begin uc_side := 3 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 3
3675: ST_TO_ADDR
// uc_nation := 3 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 3
3683: ST_TO_ADDR
// hc_gallery :=  ;
3684: LD_ADDR_OWVAR 33
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_name :=  ;
3692: LD_ADDR_OWVAR 26
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3700: LD_INT 0
3702: PPUSH
3703: LD_INT 4
3705: PPUSH
3706: LD_EXP 29
3710: PPUSH
3711: LD_EXP 30
3715: PPUSH
3716: CALL_OW 12
3720: PPUSH
3721: CALL_OW 380
// un := CreateHuman ;
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: CALL_OW 44
3734: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3735: LD_VAR 0 3
3739: PPUSH
3740: LD_INT 3
3742: PPUSH
3743: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3747: LD_ADDR_EXP 27
3751: PUSH
3752: LD_EXP 27
3756: PPUSH
3757: LD_VAR 0 3
3761: PPUSH
3762: CALL 76555 0 2
3766: ST_TO_ADDR
// end ;
3767: GO 3665
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function PrepareWestBase ; var i , un ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3781: LD_INT 10
3783: PPUSH
3784: LD_INT 122
3786: PPUSH
3787: LD_INT 145
3789: PPUSH
3790: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3794: LD_INT 137
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 61
3802: PPUSH
3803: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3807: LD_INT 3
3809: PPUSH
3810: LD_INT 3
3812: PPUSH
3813: LD_INT 6
3815: PPUSH
3816: LD_EXP 29
3820: PPUSH
3821: LD_EXP 30
3825: PPUSH
3826: CALL_OW 12
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_INT 3
3836: PPUSH
3837: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 91
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 4
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12731 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 21
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 3
3901: PPUSH
3902: LD_INT 6
3904: PPUSH
3905: CALL 12731 0 6
// end ;
3909: LD_VAR 0 1
3913: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
3919: PPUSH
// uc_side := 3 ;
3920: LD_ADDR_OWVAR 20
3924: PUSH
3925: LD_INT 3
3927: ST_TO_ADDR
// uc_nation := 3 ;
3928: LD_ADDR_OWVAR 21
3932: PUSH
3933: LD_INT 3
3935: ST_TO_ADDR
// for i := 1 to 5 do
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: DOUBLE
3942: LD_INT 1
3944: DEC
3945: ST_TO_ADDR
3946: LD_INT 5
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4020
// begin hc_gallery :=  ;
3952: LD_ADDR_OWVAR 33
3956: PUSH
3957: LD_STRING 
3959: ST_TO_ADDR
// hc_name :=  ;
3960: LD_ADDR_OWVAR 26
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 9
3973: PPUSH
3974: LD_EXP 29
3978: PPUSH
3979: LD_EXP 30
3983: PPUSH
3984: CALL_OW 12
3988: PPUSH
3989: CALL_OW 380
// un := CreateHuman ;
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: CALL_OW 44
4002: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4003: LD_VAR 0 3
4007: PPUSH
4008: LD_INT 8
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// end ;
4018: GO 3949
4020: POP
4021: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: DOUBLE
4028: LD_INT 1
4030: DEC
4031: ST_TO_ADDR
4032: LD_INT 2
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: LD_OWVAR 67
4054: ARRAY
4055: PUSH
4056: FOR_TO
4057: IFFALSE 4127
// begin hc_gallery :=  ;
4059: LD_ADDR_OWVAR 33
4063: PUSH
4064: LD_STRING 
4066: ST_TO_ADDR
// hc_name :=  ;
4067: LD_ADDR_OWVAR 26
4071: PUSH
4072: LD_STRING 
4074: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4075: LD_INT 0
4077: PPUSH
4078: LD_INT 4
4080: PPUSH
4081: LD_EXP 29
4085: PPUSH
4086: LD_EXP 30
4090: PPUSH
4091: CALL_OW 12
4095: PPUSH
4096: CALL_OW 380
// un := CreateHuman ;
4100: LD_ADDR_VAR 0 3
4104: PUSH
4105: CALL_OW 44
4109: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4110: LD_VAR 0 3
4114: PPUSH
4115: LD_INT 8
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 4056
4127: POP
4128: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: DOUBLE
4135: LD_INT 1
4137: DEC
4138: ST_TO_ADDR
4139: LD_INT 3
4141: PUSH
4142: LD_INT 4
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: LD_INT 5
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: PUSH
4157: LD_OWVAR 67
4161: ARRAY
4162: PUSH
4163: FOR_TO
4164: IFFALSE 4381
// begin vc_engine = 3 ;
4166: LD_ADDR_OWVAR 39
4170: PUSH
4171: LD_INT 3
4173: ST_TO_ADDR
// vc_control = 1 ;
4174: LD_ADDR_OWVAR 38
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4182: LD_ADDR_OWVAR 40
4186: PUSH
4187: LD_INT 42
4189: PUSH
4190: LD_INT 43
4192: PUSH
4193: LD_INT 44
4195: PUSH
4196: LD_INT 45
4198: PUSH
4199: LD_INT 46
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 5
4214: PPUSH
4215: CALL_OW 12
4219: ARRAY
4220: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4221: LD_OWVAR 40
4225: PUSH
4226: LD_INT 46
4228: EQUAL
4229: IFFALSE 4241
// vc_chassis := ru_heavy_tracked else
4231: LD_ADDR_OWVAR 37
4235: PUSH
4236: LD_INT 24
4238: ST_TO_ADDR
4239: GO 4268
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4241: LD_ADDR_OWVAR 37
4245: PUSH
4246: LD_INT 22
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 2
4261: PPUSH
4262: CALL_OW 12
4266: ARRAY
4267: ST_TO_ADDR
// veh := CreateVehicle ;
4268: LD_ADDR_VAR 0 4
4272: PUSH
4273: CALL_OW 45
4277: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4278: LD_VAR 0 4
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4290: LD_VAR 0 4
4294: PPUSH
4295: LD_INT 5
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// hc_gallery :=  ;
4305: LD_ADDR_OWVAR 33
4309: PUSH
4310: LD_STRING 
4312: ST_TO_ADDR
// hc_name :=  ;
4313: LD_ADDR_OWVAR 26
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
4321: LD_INT 0
4323: PPUSH
4324: LD_INT 3
4326: PPUSH
4327: LD_INT 6
4329: PUSH
4330: LD_INT 7
4332: PUSH
4333: LD_INT 8
4335: PUSH
4336: LD_INT 10
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: PUSH
4345: LD_OWVAR 67
4349: ARRAY
4350: PPUSH
4351: CALL_OW 380
// un = CreateHuman ;
4355: LD_ADDR_VAR 0 3
4359: PUSH
4360: CALL_OW 44
4364: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4365: LD_VAR 0 3
4369: PPUSH
4370: LD_VAR 0 4
4374: PPUSH
4375: CALL_OW 52
// end ;
4379: GO 4163
4381: POP
4382: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4383: LD_ADDR_VAR 0 2
4387: PUSH
4388: DOUBLE
4389: LD_INT 1
4391: DEC
4392: ST_TO_ADDR
4393: LD_INT 3
4395: PUSH
4396: LD_INT 4
4398: PUSH
4399: LD_INT 5
4401: PUSH
4402: LD_INT 5
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: PUSH
4411: LD_OWVAR 67
4415: ARRAY
4416: PUSH
4417: FOR_TO
4418: IFFALSE 4565
// begin vc_engine := 3 ;
4420: LD_ADDR_OWVAR 39
4424: PUSH
4425: LD_INT 3
4427: ST_TO_ADDR
// vc_control := 3 ;
4428: LD_ADDR_OWVAR 38
4432: PUSH
4433: LD_INT 3
4435: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4436: LD_ADDR_OWVAR 40
4440: PUSH
4441: LD_INT 42
4443: PUSH
4444: LD_INT 43
4446: PUSH
4447: LD_INT 44
4449: PUSH
4450: LD_INT 45
4452: PUSH
4453: LD_INT 46
4455: PUSH
4456: LD_INT 49
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_INT 1
4469: PPUSH
4470: LD_INT 5
4472: PPUSH
4473: CALL_OW 12
4477: ARRAY
4478: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4479: LD_OWVAR 40
4483: PUSH
4484: LD_INT 46
4486: EQUAL
4487: IFFALSE 4499
// vc_chassis := ru_heavy_tracked else
4489: LD_ADDR_OWVAR 37
4493: PUSH
4494: LD_INT 24
4496: ST_TO_ADDR
4497: GO 4526
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4499: LD_ADDR_OWVAR 37
4503: PUSH
4504: LD_INT 22
4506: PUSH
4507: LD_INT 21
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 1
4516: PPUSH
4517: LD_INT 2
4519: PPUSH
4520: CALL_OW 12
4524: ARRAY
4525: ST_TO_ADDR
// veh := CreateVehicle ;
4526: LD_ADDR_VAR 0 4
4530: PUSH
4531: CALL_OW 45
4535: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4536: LD_VAR 0 4
4540: PPUSH
4541: LD_INT 3
4543: PPUSH
4544: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4548: LD_VAR 0 4
4552: PPUSH
4553: LD_INT 6
4555: PPUSH
4556: LD_INT 0
4558: PPUSH
4559: CALL_OW 49
// end ;
4563: GO 4417
4565: POP
4566: POP
// end ; end_of_file
4567: LD_VAR 0 1
4571: RET
// export function PrepareKurt ; begin
4572: LD_INT 0
4574: PPUSH
// uc_side := 8 ;
4575: LD_ADDR_OWVAR 20
4579: PUSH
4580: LD_INT 8
4582: ST_TO_ADDR
// uc_nation := 2 ;
4583: LD_ADDR_OWVAR 21
4587: PUSH
4588: LD_INT 2
4590: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4591: LD_ADDR_OWVAR 37
4595: PUSH
4596: LD_INT 13
4598: ST_TO_ADDR
// vc_engine := 1 ;
4599: LD_ADDR_OWVAR 39
4603: PUSH
4604: LD_INT 1
4606: ST_TO_ADDR
// vc_control := 1 ;
4607: LD_ADDR_OWVAR 38
4611: PUSH
4612: LD_INT 1
4614: ST_TO_ADDR
// vc_weapon := 24 ;
4615: LD_ADDR_OWVAR 40
4619: PUSH
4620: LD_INT 24
4622: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
4623: LD_ADDR_EXP 18
4627: PUSH
4628: CALL_OW 45
4632: ST_TO_ADDR
// if kurtStatus > 0 then
4633: LD_EXP 19
4637: PUSH
4638: LD_INT 0
4640: GREATER
4641: IFFALSE 4693
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
4643: LD_ADDR_EXP 17
4647: PUSH
4648: LD_STRING Kurt
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: LD_STRING 
4656: PPUSH
4657: CALL 39087 0 3
4661: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4662: LD_EXP 18
4666: PPUSH
4667: LD_INT 4
4669: PPUSH
4670: LD_INT 0
4672: PPUSH
4673: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4677: LD_EXP 17
4681: PPUSH
4682: LD_EXP 18
4686: PPUSH
4687: CALL_OW 52
// end else
4691: GO 4770
// begin hc_name :=  ;
4693: LD_ADDR_OWVAR 26
4697: PUSH
4698: LD_STRING 
4700: ST_TO_ADDR
// hc_gallery :=  ;
4701: LD_ADDR_OWVAR 33
4705: PUSH
4706: LD_STRING 
4708: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4709: LD_INT 1
4711: PPUSH
4712: LD_INT 10
4714: PPUSH
4715: CALL_OW 381
// Kurt := CreateHuman ;
4719: LD_ADDR_EXP 17
4723: PUSH
4724: CALL_OW 44
4728: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4729: LD_EXP 18
4733: PPUSH
4734: LD_INT 4
4736: PPUSH
4737: LD_INT 0
4739: PPUSH
4740: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4744: LD_EXP 17
4748: PPUSH
4749: LD_EXP 18
4753: PPUSH
4754: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4758: LD_EXP 17
4762: PPUSH
4763: LD_STRING AltKurt
4765: PPUSH
4766: CALL_OW 38
// end ; end ;
4770: LD_VAR 0 1
4774: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4775: LD_INT 0
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// for i := 1 to 3 do
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: DOUBLE
4787: LD_INT 1
4789: DEC
4790: ST_TO_ADDR
4791: LD_INT 3
4793: PUSH
4794: FOR_TO
4795: IFFALSE 4916
// begin uc_side := 1 ;
4797: LD_ADDR_OWVAR 20
4801: PUSH
4802: LD_INT 1
4804: ST_TO_ADDR
// uc_nation := 2 ;
4805: LD_ADDR_OWVAR 21
4809: PUSH
4810: LD_INT 2
4812: ST_TO_ADDR
// hc_gallery =  ;
4813: LD_ADDR_OWVAR 33
4817: PUSH
4818: LD_STRING 
4820: ST_TO_ADDR
// hc_name =  ;
4821: LD_ADDR_OWVAR 26
4825: PUSH
4826: LD_STRING 
4828: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4829: LD_EXP 19
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: PUSH
4838: LD_EXP 19
4842: PUSH
4843: LD_INT 2
4845: EQUAL
4846: OR
4847: IFFALSE 4864
// PrepareHuman ( false , 1 , 6 ) else
4849: LD_INT 0
4851: PPUSH
4852: LD_INT 1
4854: PPUSH
4855: LD_INT 6
4857: PPUSH
4858: CALL_OW 380
4862: GO 4877
// PrepareHuman ( false , 1 , 8 ) ;
4864: LD_INT 0
4866: PPUSH
4867: LD_INT 1
4869: PPUSH
4870: LD_INT 8
4872: PPUSH
4873: CALL_OW 380
// un := CreateHuman ;
4877: LD_ADDR_VAR 0 3
4881: PUSH
4882: CALL_OW 44
4886: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4887: LD_VAR 0 3
4891: PPUSH
4892: LD_INT 4
4894: PPUSH
4895: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_INT 4
4906: PPUSH
4907: LD_INT 0
4909: PPUSH
4910: CALL_OW 49
// end ;
4914: GO 4794
4916: POP
4917: POP
// vc_chassis := 14 ;
4918: LD_ADDR_OWVAR 37
4922: PUSH
4923: LD_INT 14
4925: ST_TO_ADDR
// vc_engine := 3 ;
4926: LD_ADDR_OWVAR 39
4930: PUSH
4931: LD_INT 3
4933: ST_TO_ADDR
// vc_control := 1 ;
4934: LD_ADDR_OWVAR 38
4938: PUSH
4939: LD_INT 1
4941: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4942: LD_ADDR_OWVAR 40
4946: PUSH
4947: LD_INT 27
4949: PUSH
4950: LD_INT 26
4952: PUSH
4953: LD_INT 28
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 1
4963: PPUSH
4964: LD_INT 3
4966: PPUSH
4967: CALL_OW 12
4971: ARRAY
4972: ST_TO_ADDR
// veh := CreateVehicle ;
4973: LD_ADDR_VAR 0 4
4977: PUSH
4978: CALL_OW 45
4982: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4983: LD_VAR 0 4
4987: PPUSH
4988: LD_INT 4
4990: PPUSH
4991: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4995: LD_VAR 0 4
4999: PPUSH
5000: LD_INT 4
5002: PPUSH
5003: LD_INT 0
5005: PPUSH
5006: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5010: LD_EXP 19
5014: PUSH
5015: LD_INT 0
5017: EQUAL
5018: PUSH
5019: LD_EXP 19
5023: PUSH
5024: LD_INT 2
5026: EQUAL
5027: OR
5028: IFFALSE 5045
// PrepareHuman ( false , 3 , 6 ) else
5030: LD_INT 0
5032: PPUSH
5033: LD_INT 3
5035: PPUSH
5036: LD_INT 6
5038: PPUSH
5039: CALL_OW 380
5043: GO 5058
// PrepareHuman ( false , 3 , 8 ) ;
5045: LD_INT 0
5047: PPUSH
5048: LD_INT 3
5050: PPUSH
5051: LD_INT 8
5053: PPUSH
5054: CALL_OW 380
// un := CreateHuman ;
5058: LD_ADDR_VAR 0 3
5062: PUSH
5063: CALL_OW 44
5067: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5068: LD_VAR 0 3
5072: PPUSH
5073: LD_VAR 0 4
5077: PPUSH
5078: CALL_OW 52
// vc_chassis := 14 ;
5082: LD_ADDR_OWVAR 37
5086: PUSH
5087: LD_INT 14
5089: ST_TO_ADDR
// vc_engine := 3 ;
5090: LD_ADDR_OWVAR 39
5094: PUSH
5095: LD_INT 3
5097: ST_TO_ADDR
// vc_control := 1 ;
5098: LD_ADDR_OWVAR 38
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5106: LD_ADDR_OWVAR 40
5110: PUSH
5111: LD_INT 27
5113: PUSH
5114: LD_INT 26
5116: PUSH
5117: LD_INT 28
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 1
5127: PPUSH
5128: LD_INT 3
5130: PPUSH
5131: CALL_OW 12
5135: ARRAY
5136: ST_TO_ADDR
// veh := CreateVehicle ;
5137: LD_ADDR_VAR 0 4
5141: PUSH
5142: CALL_OW 45
5146: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5147: LD_VAR 0 4
5151: PPUSH
5152: LD_INT 4
5154: PPUSH
5155: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5159: LD_VAR 0 4
5163: PPUSH
5164: LD_INT 4
5166: PPUSH
5167: LD_INT 0
5169: PPUSH
5170: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5174: LD_EXP 19
5178: PUSH
5179: LD_INT 0
5181: EQUAL
5182: PUSH
5183: LD_EXP 19
5187: PUSH
5188: LD_INT 2
5190: EQUAL
5191: OR
5192: IFFALSE 5209
// PrepareHuman ( false , 4 , 6 ) else
5194: LD_INT 0
5196: PPUSH
5197: LD_INT 4
5199: PPUSH
5200: LD_INT 6
5202: PPUSH
5203: CALL_OW 380
5207: GO 5222
// PrepareHuman ( false , 4 , 8 ) ;
5209: LD_INT 0
5211: PPUSH
5212: LD_INT 4
5214: PPUSH
5215: LD_INT 8
5217: PPUSH
5218: CALL_OW 380
// un := CreateHuman ;
5222: LD_ADDR_VAR 0 3
5226: PUSH
5227: CALL_OW 44
5231: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5232: LD_VAR 0 3
5236: PPUSH
5237: LD_INT 4
5239: PPUSH
5240: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5244: LD_VAR 0 3
5248: PPUSH
5249: LD_VAR 0 4
5253: PPUSH
5254: CALL_OW 52
// vc_chassis := 14 ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := 3 ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := 1 ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := 26 ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 26
5289: ST_TO_ADDR
// veh := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_INT 4
5307: PPUSH
5308: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5312: LD_VAR 0 4
5316: PPUSH
5317: LD_INT 4
5319: PPUSH
5320: LD_INT 0
5322: PPUSH
5323: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5327: LD_EXP 19
5331: PUSH
5332: LD_INT 0
5334: EQUAL
5335: PUSH
5336: LD_EXP 19
5340: PUSH
5341: LD_INT 2
5343: EQUAL
5344: OR
5345: IFFALSE 5362
// PrepareHuman ( false , 2 , 4 ) else
5347: LD_INT 0
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: LD_INT 4
5355: PPUSH
5356: CALL_OW 380
5360: GO 5375
// PrepareHuman ( false , 2 , 8 ) ;
5362: LD_INT 0
5364: PPUSH
5365: LD_INT 2
5367: PPUSH
5368: LD_INT 8
5370: PPUSH
5371: CALL_OW 380
// un := CreateHuman ;
5375: LD_ADDR_VAR 0 3
5379: PUSH
5380: CALL_OW 44
5384: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5385: LD_VAR 0 3
5389: PPUSH
5390: LD_INT 4
5392: PPUSH
5393: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_VAR 0 4
5406: PPUSH
5407: CALL_OW 52
// end ;
5411: LD_VAR 0 1
5415: RET
// export function PrepareAttackLegion ; var i , un ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
// for i := 1 to 4 do
5421: LD_ADDR_VAR 0 2
5425: PUSH
5426: DOUBLE
5427: LD_INT 1
5429: DEC
5430: ST_TO_ADDR
5431: LD_INT 4
5433: PUSH
5434: FOR_TO
5435: IFFALSE 5545
// begin uc_side := 8 ;
5437: LD_ADDR_OWVAR 20
5441: PUSH
5442: LD_INT 8
5444: ST_TO_ADDR
// uc_nation := 2 ;
5445: LD_ADDR_OWVAR 21
5449: PUSH
5450: LD_INT 2
5452: ST_TO_ADDR
// hc_gallery :=  ;
5453: LD_ADDR_OWVAR 33
5457: PUSH
5458: LD_STRING 
5460: ST_TO_ADDR
// hc_name :=  ;
5461: LD_ADDR_OWVAR 26
5465: PUSH
5466: LD_STRING 
5468: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5469: LD_INT 0
5471: PPUSH
5472: LD_INT 1
5474: PUSH
5475: LD_INT 8
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 1
5484: PPUSH
5485: LD_INT 2
5487: PPUSH
5488: CALL_OW 12
5492: ARRAY
5493: PPUSH
5494: LD_INT 6
5496: PPUSH
5497: LD_INT 8
5499: PPUSH
5500: CALL_OW 12
5504: PPUSH
5505: CALL_OW 380
// un := CreateHuman ;
5509: LD_ADDR_VAR 0 3
5513: PUSH
5514: CALL_OW 44
5518: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 19
5526: PPUSH
5527: LD_INT 0
5529: PPUSH
5530: CALL_OW 49
// ComCrawl ( un ) ;
5534: LD_VAR 0 3
5538: PPUSH
5539: CALL_OW 137
// end ;
5543: GO 5434
5545: POP
5546: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5547: LD_INT 1
5549: PPUSH
5550: LD_INT 8
5552: PPUSH
5553: LD_INT 2
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5563: LD_INT 20
5565: PPUSH
5566: LD_INT 3
5568: PPUSH
5569: CALL 14566 0 2
// end ; end_of_file
5573: LD_VAR 0 1
5577: RET
// export function Action ; var i , tmp , group ; begin
5578: LD_INT 0
5580: PPUSH
5581: PPUSH
5582: PPUSH
5583: PPUSH
// InGameOn ;
5584: CALL_OW 8
// music_nat := 1 ;
5588: LD_ADDR_OWVAR 71
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5596: LD_ADDR_VAR 0 4
5600: PUSH
5601: LD_INT 22
5603: PUSH
5604: LD_INT 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: CALL_OW 69
5615: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5616: LD_ADDR_VAR 0 3
5620: PUSH
5621: LD_EXP 1
5625: PPUSH
5626: CALL_OW 310
5630: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5631: LD_VAR 0 3
5635: PPUSH
5636: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5640: LD_VAR 0 4
5644: PPUSH
5645: LD_INT 130
5647: PPUSH
5648: LD_INT 103
5650: PPUSH
5651: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5655: LD_VAR 0 3
5659: PPUSH
5660: LD_INT 114
5662: PPUSH
5663: LD_INT 102
5665: PPUSH
5666: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5670: LD_EXP 1
5674: PPUSH
5675: LD_STRING D1-JMM-1
5677: PPUSH
5678: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5682: LD_VAR 0 3
5686: PPUSH
5687: CALL_OW 87
// if IsOk ( Donaldson ) then
5691: LD_EXP 3
5695: PPUSH
5696: CALL_OW 302
5700: IFFALSE 5765
// begin Say ( Donaldson , D1-Don-1 ) ;
5702: LD_EXP 3
5706: PPUSH
5707: LD_STRING D1-Don-1
5709: PPUSH
5710: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5714: LD_VAR 0 3
5718: PPUSH
5719: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5723: LD_EXP 1
5727: PPUSH
5728: LD_STRING D1-JMM-2
5730: PPUSH
5731: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5744: LD_EXP 3
5748: PPUSH
5749: LD_STRING D1-Don-2
5751: PPUSH
5752: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5756: LD_VAR 0 3
5760: PPUSH
5761: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5765: LD_VAR 0 4
5769: PPUSH
5770: LD_INT 110
5772: PPUSH
5773: LD_INT 101
5775: PPUSH
5776: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5780: LD_INT 35
5782: PPUSH
5783: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5796: LD_INT 1
5798: PPUSH
5799: LD_INT 102
5801: PPUSH
5802: LD_INT 94
5804: PPUSH
5805: CALL_OW 293
5809: IFFALSE 5780
// CenterOnXY ( 102 , 94 ) ;
5811: LD_INT 102
5813: PPUSH
5814: LD_INT 94
5816: PPUSH
5817: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5821: LD_VAR 0 4
5825: PPUSH
5826: LD_INT 26
5828: PUSH
5829: LD_INT 1
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: PPUSH
5836: CALL_OW 72
5840: PPUSH
5841: LD_STRING D1-Sol1-2
5843: PPUSH
5844: LD_STRING 
5846: PPUSH
5847: CALL 12226 0 3
// Say ( JMM , D1-JMM-3 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_STRING D1-JMM-3
5858: PPUSH
5859: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5863: LD_STRING M1
5865: PPUSH
5866: CALL_OW 337
// for i in group do
5870: LD_ADDR_VAR 0 2
5874: PUSH
5875: LD_VAR 0 4
5879: PUSH
5880: FOR_IN
5881: IFFALSE 5900
// ComMoveXY ( i , 95 , 84 ) ;
5883: LD_VAR 0 2
5887: PPUSH
5888: LD_INT 95
5890: PPUSH
5891: LD_INT 84
5893: PPUSH
5894: CALL_OW 111
5898: GO 5880
5900: POP
5901: POP
// end ;
5902: LD_VAR 0 1
5906: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
5907: LD_INT 7
5909: PPUSH
5910: LD_INT 22
5912: PUSH
5913: LD_INT 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 70
5924: PUSH
5925: LD_INT 1
5927: GREATER
5928: IFFALSE 6578
5930: GO 5932
5932: DISABLE
5933: LD_INT 0
5935: PPUSH
5936: PPUSH
5937: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: LD_INT 8
5945: PPUSH
5946: LD_INT 22
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: LD_INT 25
5958: PUSH
5959: LD_INT 9
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PPUSH
5970: CALL_OW 70
5974: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
5975: LD_VAR 0 2
5979: PPUSH
5980: LD_INT 96
5982: PPUSH
5983: LD_INT 85
5985: PPUSH
5986: CALL_OW 154
// for i := 1 to 5 do
5990: LD_ADDR_VAR 0 1
5994: PUSH
5995: DOUBLE
5996: LD_INT 1
5998: DEC
5999: ST_TO_ADDR
6000: LD_INT 5
6002: PUSH
6003: FOR_TO
6004: IFFALSE 6023
// AddComTimeShift ( tmp , 96 , 85 ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_INT 96
6013: PPUSH
6014: LD_INT 85
6016: PPUSH
6017: CALL_OW 214
6021: GO 6003
6023: POP
6024: POP
// wait ( 0 0$2 ) ;
6025: LD_INT 70
6027: PPUSH
6028: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6032: LD_EXP 1
6036: PPUSH
6037: LD_STRING D1a-JMM-1
6039: PPUSH
6040: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6044: LD_EXP 3
6048: PPUSH
6049: LD_STRING D1a-Don-1
6051: PPUSH
6052: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6056: LD_ADDR_VAR 0 1
6060: PUSH
6061: LD_INT 22
6063: PUSH
6064: LD_INT 1
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: PPUSH
6071: CALL_OW 69
6075: PUSH
6076: FOR_IN
6077: IFFALSE 6096
// ComMoveXY ( i , 109 , 102 ) ;
6079: LD_VAR 0 1
6083: PPUSH
6084: LD_INT 109
6086: PPUSH
6087: LD_INT 102
6089: PPUSH
6090: CALL_OW 111
6094: GO 6076
6096: POP
6097: POP
// Say ( JMM , D1a-JMM-2 ) ;
6098: LD_EXP 1
6102: PPUSH
6103: LD_STRING D1a-JMM-2
6105: PPUSH
6106: CALL_OW 88
// wait ( 0 0$10 ) ;
6110: LD_INT 350
6112: PPUSH
6113: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6117: LD_EXP 1
6121: PPUSH
6122: CALL_OW 310
6126: PPUSH
6127: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6131: LD_EXP 3
6135: PPUSH
6136: LD_STRING D1b-Don-1
6138: PPUSH
6139: CALL_OW 88
// if IsOk ( Donaldson ) then
6143: LD_EXP 3
6147: PPUSH
6148: CALL_OW 302
6152: IFFALSE 6166
// Say ( JMM , D1b-JMM-1 ) ;
6154: LD_EXP 1
6158: PPUSH
6159: LD_STRING D1b-JMM-1
6161: PPUSH
6162: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6166: LD_INT 22
6168: PUSH
6169: LD_INT 1
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 26
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 2
6188: PUSH
6189: LD_INT 25
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 3
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 25
6221: PUSH
6222: LD_INT 4
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 25
6231: PUSH
6232: LD_INT 5
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: LD_INT 25
6241: PUSH
6242: LD_INT 8
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: PPUSH
6263: CALL_OW 69
6267: PPUSH
6268: LD_STRING D1b-Sol1-1
6270: PPUSH
6271: LD_STRING 
6273: PPUSH
6274: CALL 12226 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6278: LD_EXP 3
6282: PPUSH
6283: LD_STRING D1b-Don-2
6285: PPUSH
6286: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6290: LD_EXP 1
6294: PPUSH
6295: LD_STRING D1b-JMM-2
6297: PPUSH
6298: CALL_OW 88
// dec := ShowQuery1 ;
6302: LD_ADDR_VAR 0 3
6306: PUSH
6307: CALL 12689 0 0
6311: ST_TO_ADDR
// if dec = 1 then
6312: LD_VAR 0 3
6316: PUSH
6317: LD_INT 1
6319: EQUAL
6320: IFFALSE 6426
// begin Say ( JMM , D2-JMM-1 ) ;
6322: LD_EXP 1
6326: PPUSH
6327: LD_STRING D2-JMM-1
6329: PPUSH
6330: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6334: LD_EXP 15
6338: PPUSH
6339: LD_STRING D2-Pow-1
6341: PPUSH
6342: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6346: LD_EXP 1
6350: PPUSH
6351: LD_STRING D2a-JMM-1
6353: PPUSH
6354: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6358: LD_EXP 15
6362: PPUSH
6363: LD_STRING D2a-Pow-1
6365: PPUSH
6366: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6370: LD_EXP 1
6374: PPUSH
6375: LD_STRING D2a-JMM-2
6377: PPUSH
6378: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6382: LD_EXP 15
6386: PPUSH
6387: LD_STRING D2a-Pow-2
6389: PPUSH
6390: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6394: LD_EXP 1
6398: PPUSH
6399: LD_STRING D2a-JMM-3
6401: PPUSH
6402: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6406: LD_EXP 15
6410: PPUSH
6411: LD_STRING D2a-Pow-3
6413: PPUSH
6414: CALL_OW 94
// secondPass := 2 ;
6418: LD_ADDR_EXP 20
6422: PUSH
6423: LD_INT 2
6425: ST_TO_ADDR
// end ; if dec = 2 then
6426: LD_VAR 0 3
6430: PUSH
6431: LD_INT 2
6433: EQUAL
6434: IFFALSE 6528
// begin Say ( JMM , D2-JMM-1 ) ;
6436: LD_EXP 1
6440: PPUSH
6441: LD_STRING D2-JMM-1
6443: PPUSH
6444: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6448: LD_EXP 15
6452: PPUSH
6453: LD_STRING D2-Pow-1
6455: PPUSH
6456: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6460: LD_EXP 1
6464: PPUSH
6465: LD_STRING D2b-JMM-1
6467: PPUSH
6468: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6472: LD_EXP 15
6476: PPUSH
6477: LD_STRING D2b-Pow-1
6479: PPUSH
6480: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6484: LD_EXP 1
6488: PPUSH
6489: LD_STRING D2c-JMM-1
6491: PPUSH
6492: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6496: LD_EXP 15
6500: PPUSH
6501: LD_STRING D2c-Pow-1
6503: PPUSH
6504: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6508: LD_EXP 1
6512: PPUSH
6513: LD_STRING D2c-JMM-2
6515: PPUSH
6516: CALL_OW 88
// secondPass := 2 ;
6520: LD_ADDR_EXP 20
6524: PUSH
6525: LD_INT 2
6527: ST_TO_ADDR
// end ; if dec = 3 then
6528: LD_VAR 0 3
6532: PUSH
6533: LD_INT 3
6535: EQUAL
6536: IFFALSE 6546
// secondPass := 1 ;
6538: LD_ADDR_EXP 20
6542: PUSH
6543: LD_INT 1
6545: ST_TO_ADDR
// InGameOff ;
6546: CALL_OW 9
// ruAI := 1 ;
6550: LD_ADDR_EXP 34
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6558: LD_INT 1
6560: PPUSH
6561: LD_INT 3
6563: PPUSH
6564: LD_INT 2
6566: PPUSH
6567: LD_INT 1
6569: PPUSH
6570: CALL_OW 80
// SaveForQuickRestart ;
6574: CALL_OW 22
// end ;
6578: PPOPN 3
6580: END
// every 1 1$0 trigger secondPass = 2 do
6581: LD_EXP 20
6585: PUSH
6586: LD_INT 2
6588: EQUAL
6589: IFFALSE 6809
6591: GO 6593
6593: DISABLE
// begin PowellSupport1 ;
6594: CALL 1985 0 0
// DialogueOn ;
6598: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6602: LD_EXP 1
6606: PPUSH
6607: LD_STRING DC1-JMM-1
6609: PPUSH
6610: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6614: LD_EXP 15
6618: PPUSH
6619: LD_STRING DC1-Pow-1
6621: PPUSH
6622: CALL_OW 94
// DialogueOff ;
6626: CALL_OW 7
// wait ( 3 3$0 ) ;
6630: LD_INT 6300
6632: PPUSH
6633: CALL_OW 67
// PowellSupport2 ;
6637: CALL 2466 0 0
// DialogueOn ;
6641: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6645: LD_EXP 1
6649: PPUSH
6650: LD_STRING DC2-JMM-1
6652: PPUSH
6653: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6657: LD_EXP 15
6661: PPUSH
6662: LD_STRING DC2-Pow-1
6664: PPUSH
6665: CALL_OW 94
// DialogueOff ;
6669: CALL_OW 7
// wait ( 3 3$00 ) ;
6673: LD_INT 6300
6675: PPUSH
6676: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6680: LD_INT 35
6682: PPUSH
6683: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 30
6702: PUSH
6703: LD_INT 0
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 30
6712: PUSH
6713: LD_INT 1
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PPUSH
6729: CALL_OW 69
6733: PUSH
6734: LD_INT 11
6736: PPUSH
6737: LD_INT 22
6739: PUSH
6740: LD_INT 3
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PPUSH
6747: CALL_OW 70
6751: NOT
6752: AND
6753: IFFALSE 6680
// wait ( 0 0$10 ) ;
6755: LD_INT 350
6757: PPUSH
6758: CALL_OW 67
// Legion ;
6762: CALL 6810 0 0
// wait ( 5 5$0 ) ;
6766: LD_INT 10500
6768: PPUSH
6769: CALL_OW 67
// PowellSupport3 ;
6773: CALL 3079 0 0
// DialogueOn ;
6777: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6781: LD_EXP 15
6785: PPUSH
6786: LD_STRING DC3-Pow-1
6788: PPUSH
6789: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6793: LD_EXP 1
6797: PPUSH
6798: LD_STRING DC3-JMM-1
6800: PPUSH
6801: CALL_OW 88
// DialogueOff ;
6805: CALL_OW 7
// end ;
6809: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6810: LD_INT 0
6812: PPUSH
6813: PPUSH
6814: PPUSH
6815: PPUSH
6816: PPUSH
6817: PPUSH
6818: PPUSH
6819: PPUSH
6820: PPUSH
6821: PPUSH
6822: PPUSH
6823: PPUSH
6824: PPUSH
6825: PPUSH
6826: PPUSH
6827: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6828: LD_ADDR_VAR 0 5
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 21
6845: PUSH
6846: LD_INT 3
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 30
6868: PUSH
6869: LD_INT 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: ST_TO_ADDR
// crates := 0 ;
6891: LD_ADDR_VAR 0 8
6895: PUSH
6896: LD_INT 0
6898: ST_TO_ADDR
// oil := 0 ;
6899: LD_ADDR_VAR 0 9
6903: PUSH
6904: LD_INT 0
6906: ST_TO_ADDR
// siberite := 0 ;
6907: LD_ADDR_VAR 0 10
6911: PUSH
6912: LD_INT 0
6914: ST_TO_ADDR
// payForNeutral := false ;
6915: LD_ADDR_VAR 0 13
6919: PUSH
6920: LD_INT 0
6922: ST_TO_ADDR
// payForHelp := false ;
6923: LD_ADDR_VAR 0 14
6927: PUSH
6928: LD_INT 0
6930: ST_TO_ADDR
// for i in tmp do
6931: LD_ADDR_VAR 0 2
6935: PUSH
6936: LD_VAR 0 5
6940: PUSH
6941: FOR_IN
6942: IFFALSE 7033
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6944: LD_ADDR_VAR 0 8
6948: PUSH
6949: LD_VAR 0 8
6953: PUSH
6954: LD_VAR 0 2
6958: PPUSH
6959: CALL_OW 274
6963: PPUSH
6964: LD_INT 1
6966: PPUSH
6967: CALL_OW 275
6971: PLUS
6972: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6973: LD_ADDR_VAR 0 9
6977: PUSH
6978: LD_VAR 0 9
6982: PUSH
6983: LD_VAR 0 2
6987: PPUSH
6988: CALL_OW 274
6992: PPUSH
6993: LD_INT 2
6995: PPUSH
6996: CALL_OW 275
7000: PLUS
7001: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7002: LD_ADDR_VAR 0 10
7006: PUSH
7007: LD_VAR 0 10
7011: PUSH
7012: LD_VAR 0 2
7016: PPUSH
7017: CALL_OW 274
7021: PPUSH
7022: LD_INT 3
7024: PPUSH
7025: CALL_OW 275
7029: PLUS
7030: ST_TO_ADDR
// end ;
7031: GO 6941
7033: POP
7034: POP
// PrepareKurt ;
7035: CALL 4572 0 0
// if not Kurt then
7039: LD_EXP 17
7043: NOT
7044: IFFALSE 7048
// exit ;
7046: GO 9167
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7048: LD_EXP 18
7052: PPUSH
7053: LD_INT 144
7055: PPUSH
7056: LD_INT 111
7058: PPUSH
7059: CALL_OW 111
// wait ( 0 0$2 ) ;
7063: LD_INT 70
7065: PPUSH
7066: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7070: LD_INT 167
7072: PPUSH
7073: LD_INT 121
7075: PPUSH
7076: LD_INT 1
7078: PPUSH
7079: LD_INT 10
7081: NEG
7082: PPUSH
7083: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7087: LD_EXP 17
7091: PPUSH
7092: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7096: LD_EXP 17
7100: PPUSH
7101: CALL_OW 87
// wait ( 0 0$1 ) ;
7105: LD_INT 35
7107: PPUSH
7108: CALL_OW 67
// DialogueOn ;
7112: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7116: LD_INT 22
7118: PUSH
7119: LD_INT 1
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 26
7128: PUSH
7129: LD_INT 1
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: LD_INT 25
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 2
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 25
7161: PUSH
7162: LD_INT 3
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 4
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: PPUSH
7213: CALL_OW 69
7217: PPUSH
7218: LD_STRING D3-Sol1-1
7220: PPUSH
7221: LD_STRING 
7223: PPUSH
7224: CALL 12226 0 3
// if KurtStatus then
7228: LD_EXP 19
7232: IFFALSE 7332
// begin Say ( Kurt , D3-Kurt-1 ) ;
7234: LD_EXP 17
7238: PPUSH
7239: LD_STRING D3-Kurt-1
7241: PPUSH
7242: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7246: LD_EXP 1
7250: PPUSH
7251: LD_STRING D3-JMM-1
7253: PPUSH
7254: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7258: LD_EXP 17
7262: PPUSH
7263: LD_STRING D3-Kurt-2
7265: PPUSH
7266: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7270: LD_EXP 1
7274: PPUSH
7275: LD_STRING D3-JMM-2
7277: PPUSH
7278: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7282: LD_EXP 17
7286: PPUSH
7287: LD_STRING D3-Kurt-4
7289: PPUSH
7290: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7294: LD_EXP 1
7298: PPUSH
7299: LD_STRING D3-JMM-4
7301: PPUSH
7302: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7306: LD_EXP 17
7310: PPUSH
7311: LD_STRING D3-Kurt-5
7313: PPUSH
7314: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7318: LD_EXP 17
7322: PPUSH
7323: LD_STRING D3-Kurt-5a
7325: PPUSH
7326: CALL_OW 88
// end else
7330: GO 7428
// begin Say ( Kurt , D3-Kurt-1 ) ;
7332: LD_EXP 17
7336: PPUSH
7337: LD_STRING D3-Kurt-1
7339: PPUSH
7340: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7344: LD_EXP 1
7348: PPUSH
7349: LD_STRING D3-JMM-1
7351: PPUSH
7352: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7356: LD_EXP 17
7360: PPUSH
7361: LD_STRING D3-Kurt-3
7363: PPUSH
7364: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7368: LD_EXP 1
7372: PPUSH
7373: LD_STRING D3-JMM-3
7375: PPUSH
7376: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7380: LD_EXP 17
7384: PPUSH
7385: LD_STRING D3-Kurt-4
7387: PPUSH
7388: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7392: LD_EXP 1
7396: PPUSH
7397: LD_STRING D3-JMM-4
7399: PPUSH
7400: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7404: LD_EXP 17
7408: PPUSH
7409: LD_STRING D3-Kurt-5
7411: PPUSH
7412: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7416: LD_EXP 17
7420: PPUSH
7421: LD_STRING D3-Kurt-5b
7423: PPUSH
7424: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7428: LD_VAR 0 8
7432: PUSH
7433: LD_INT 120
7435: PUSH
7436: LD_INT 60
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_EXP 19
7447: PUSH
7448: LD_INT 1
7450: PLUS
7451: ARRAY
7452: GREATEREQUAL
7453: PUSH
7454: LD_VAR 0 10
7458: PUSH
7459: LD_INT 120
7461: PUSH
7462: LD_INT 60
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_EXP 19
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ARRAY
7478: GREATEREQUAL
7479: AND
7480: IFFALSE 7532
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7482: LD_ADDR_VAR 0 3
7486: PUSH
7487: LD_STRING Q2
7489: PUSH
7490: LD_STRING Q2K
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PUSH
7497: LD_EXP 19
7501: PUSH
7502: LD_INT 1
7504: PLUS
7505: ARRAY
7506: PPUSH
7507: LD_INT 1
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 3
7515: PUSH
7516: LD_INT 4
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 98
7529: ST_TO_ADDR
7530: GO 7576
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7532: LD_ADDR_VAR 0 3
7536: PUSH
7537: LD_STRING Q2
7539: PUSH
7540: LD_STRING Q2K
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_EXP 19
7551: PUSH
7552: LD_INT 1
7554: PLUS
7555: ARRAY
7556: PPUSH
7557: LD_INT 1
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: LD_INT 4
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 98
7575: ST_TO_ADDR
// if dec1 = 1 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 1
7583: EQUAL
7584: IFFALSE 7618
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7586: LD_EXP 1
7590: PPUSH
7591: LD_STRING D3Ka-JMM-1
7593: PPUSH
7594: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7598: LD_EXP 17
7602: PPUSH
7603: LD_STRING D3Ka-Kurt-1
7605: PPUSH
7606: CALL_OW 88
// warWithLegion = 1 ;
7610: LD_ADDR_EXP 23
7614: PUSH
7615: LD_INT 1
7617: ST_TO_ADDR
// end ; if dec1 = 2 then
7618: LD_VAR 0 3
7622: PUSH
7623: LD_INT 2
7625: EQUAL
7626: IFFALSE 7710
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7628: LD_EXP 1
7632: PPUSH
7633: LD_STRING D3Kb-JMM-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7640: LD_EXP 17
7644: PPUSH
7645: LD_STRING D3Kb-Kurt-1
7647: PPUSH
7648: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7652: LD_ADDR_VAR 0 11
7656: PUSH
7657: LD_INT 120
7659: PUSH
7660: LD_INT 60
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_EXP 19
7671: PUSH
7672: LD_INT 1
7674: PLUS
7675: ARRAY
7676: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7677: LD_ADDR_VAR 0 12
7681: PUSH
7682: LD_INT 120
7684: PUSH
7685: LD_INT 60
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_EXP 19
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: ARRAY
7701: ST_TO_ADDR
// payForNeutral := true ;
7702: LD_ADDR_VAR 0 13
7706: PUSH
7707: LD_INT 1
7709: ST_TO_ADDR
// end ; if dec1 = 3 then
7710: LD_VAR 0 3
7714: PUSH
7715: LD_INT 3
7717: EQUAL
7718: IFFALSE 7953
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7720: LD_EXP 1
7724: PPUSH
7725: LD_STRING D3Kc1-JMM-1
7727: PPUSH
7728: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7732: LD_EXP 17
7736: PPUSH
7737: LD_STRING D3Kc1-Kurt-1
7739: PPUSH
7740: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7744: LD_EXP 1
7748: PPUSH
7749: LD_STRING D3Kc1-JMM-2
7751: PPUSH
7752: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7756: LD_EXP 17
7760: PPUSH
7761: LD_STRING D3Kc1-Kurt-2
7763: PPUSH
7764: CALL_OW 88
// askSiberite = 1 ;
7768: LD_ADDR_EXP 25
7772: PUSH
7773: LD_INT 1
7775: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7776: LD_ADDR_VAR 0 4
7780: PUSH
7781: LD_STRING Q2b
7783: PPUSH
7784: LD_INT 1
7786: PUSH
7787: LD_INT 2
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PPUSH
7798: CALL_OW 98
7802: ST_TO_ADDR
// if dec2 = 1 then
7803: LD_VAR 0 4
7807: PUSH
7808: LD_INT 1
7810: EQUAL
7811: IFFALSE 7845
// begin Say ( JMM , D4a-JMM-1 ) ;
7813: LD_EXP 1
7817: PPUSH
7818: LD_STRING D4a-JMM-1
7820: PPUSH
7821: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7825: LD_EXP 17
7829: PPUSH
7830: LD_STRING D4b-Kurt-1
7832: PPUSH
7833: CALL_OW 88
// warWithLegion = 1 ;
7837: LD_ADDR_EXP 23
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// end ; if dec2 = 2 then
7845: LD_VAR 0 4
7849: PUSH
7850: LD_INT 2
7852: EQUAL
7853: IFFALSE 7887
// begin Say ( JMM , D4b-JMM-1 ) ;
7855: LD_EXP 1
7859: PPUSH
7860: LD_STRING D4b-JMM-1
7862: PPUSH
7863: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7867: LD_EXP 17
7871: PPUSH
7872: LD_STRING D4b-Kurt-1
7874: PPUSH
7875: CALL_OW 88
// warWithLegion = 1 ;
7879: LD_ADDR_EXP 23
7883: PUSH
7884: LD_INT 1
7886: ST_TO_ADDR
// end ; if dec2 = 3 then
7887: LD_VAR 0 4
7891: PUSH
7892: LD_INT 3
7894: EQUAL
7895: IFFALSE 7953
// begin Say ( JMM , D4c-JMM-1 ) ;
7897: LD_EXP 1
7901: PPUSH
7902: LD_STRING D4c-JMM-1
7904: PPUSH
7905: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7909: LD_EXP 17
7913: PPUSH
7914: LD_STRING D4c-Kurt-1
7916: PPUSH
7917: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7921: LD_EXP 1
7925: PPUSH
7926: LD_STRING D4c-JMM-2
7928: PPUSH
7929: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7933: LD_EXP 17
7937: PPUSH
7938: LD_STRING D4c-Kurt-2
7940: PPUSH
7941: CALL_OW 88
// fakeInfo = 1 ;
7945: LD_ADDR_EXP 24
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 4
7960: EQUAL
7961: IFFALSE 9023
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7963: LD_EXP 1
7967: PPUSH
7968: LD_STRING D3Kd-JMM-1
7970: PPUSH
7971: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
7975: LD_VAR 0 8
7979: PUSH
7980: LD_INT 200
7982: PUSH
7983: LD_INT 120
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_EXP 19
7994: PUSH
7995: LD_INT 1
7997: PLUS
7998: ARRAY
7999: GREATEREQUAL
8000: PUSH
8001: LD_VAR 0 10
8005: PUSH
8006: LD_INT 200
8008: PUSH
8009: LD_INT 120
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_EXP 19
8020: PUSH
8021: LD_INT 1
8023: PLUS
8024: ARRAY
8025: GREATEREQUAL
8026: AND
8027: IFFALSE 8079
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8029: LD_ADDR_VAR 0 4
8033: PUSH
8034: LD_STRING Q2a
8036: PUSH
8037: LD_STRING Q2aK
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: LD_EXP 19
8048: PUSH
8049: LD_INT 1
8051: PLUS
8052: ARRAY
8053: PPUSH
8054: LD_INT 1
8056: PUSH
8057: LD_INT 2
8059: PUSH
8060: LD_INT 3
8062: PUSH
8063: LD_INT 4
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 98
8076: ST_TO_ADDR
8077: GO 8243
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8079: LD_VAR 0 8
8083: PUSH
8084: LD_INT 120
8086: PUSH
8087: LD_INT 60
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_EXP 19
8098: PUSH
8099: LD_INT 1
8101: PLUS
8102: ARRAY
8103: GREATEREQUAL
8104: PUSH
8105: LD_VAR 0 10
8109: PUSH
8110: LD_INT 120
8112: PUSH
8113: LD_INT 60
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PUSH
8120: LD_EXP 19
8124: PUSH
8125: LD_INT 1
8127: PLUS
8128: ARRAY
8129: GREATEREQUAL
8130: AND
8131: IFFALSE 8179
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8133: LD_ADDR_VAR 0 4
8137: PUSH
8138: LD_STRING Q2a
8140: PUSH
8141: LD_STRING Q2aK
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_EXP 19
8152: PUSH
8153: LD_INT 1
8155: PLUS
8156: ARRAY
8157: PPUSH
8158: LD_INT 1
8160: PUSH
8161: LD_INT 2
8163: PUSH
8164: LD_INT 4
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 98
8176: ST_TO_ADDR
8177: GO 8243
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8179: LD_STRING Q2d
8181: PUSH
8182: LD_STRING Q2dK
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_EXP 19
8193: PUSH
8194: LD_INT 1
8196: PLUS
8197: ARRAY
8198: PPUSH
8199: CALL_OW 97
// dec2 := 0 ;
8203: LD_ADDR_VAR 0 4
8207: PUSH
8208: LD_INT 0
8210: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8211: LD_EXP 1
8215: PPUSH
8216: LD_STRING D3Kc1-JMM-1
8218: PPUSH
8219: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8223: LD_EXP 17
8227: PPUSH
8228: LD_STRING D3Kc2-Kurt-1
8230: PPUSH
8231: CALL_OW 88
// warWithLegion := 1 ;
8235: LD_ADDR_EXP 23
8239: PUSH
8240: LD_INT 1
8242: ST_TO_ADDR
// end ; if dec2 = 1 then
8243: LD_VAR 0 4
8247: PUSH
8248: LD_INT 1
8250: EQUAL
8251: IFFALSE 8285
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8253: LD_EXP 1
8257: PPUSH
8258: LD_STRING D5Ka-JMM-1
8260: PPUSH
8261: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8265: LD_EXP 17
8269: PPUSH
8270: LD_STRING D5Ka-Kurt-1
8272: PPUSH
8273: CALL_OW 88
// warWithLegion = 1 ;
8277: LD_ADDR_EXP 23
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// end ; if dec2 = 2 then
8285: LD_VAR 0 4
8289: PUSH
8290: LD_INT 2
8292: EQUAL
8293: IFFALSE 8377
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8295: LD_EXP 1
8299: PPUSH
8300: LD_STRING D3Kb-JMM-1
8302: PPUSH
8303: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8307: LD_EXP 17
8311: PPUSH
8312: LD_STRING D3Kb-Kurt-1
8314: PPUSH
8315: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8319: LD_ADDR_VAR 0 11
8323: PUSH
8324: LD_INT 120
8326: PUSH
8327: LD_INT 60
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_EXP 19
8338: PUSH
8339: LD_INT 1
8341: PLUS
8342: ARRAY
8343: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8344: LD_ADDR_VAR 0 12
8348: PUSH
8349: LD_INT 120
8351: PUSH
8352: LD_INT 60
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_EXP 19
8363: PUSH
8364: LD_INT 1
8366: PLUS
8367: ARRAY
8368: ST_TO_ADDR
// payForNeutral := true ;
8369: LD_ADDR_VAR 0 13
8373: PUSH
8374: LD_INT 1
8376: ST_TO_ADDR
// end ; if dec2 = 3 then
8377: LD_VAR 0 4
8381: PUSH
8382: LD_INT 3
8384: EQUAL
8385: IFFALSE 8469
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8387: LD_EXP 1
8391: PPUSH
8392: LD_STRING D3Ke-JMM-1
8394: PPUSH
8395: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8399: LD_EXP 17
8403: PPUSH
8404: LD_STRING D3Ke-Kurt-1
8406: PPUSH
8407: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8411: LD_ADDR_VAR 0 11
8415: PUSH
8416: LD_INT 200
8418: PUSH
8419: LD_INT 120
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_EXP 19
8430: PUSH
8431: LD_INT 1
8433: PLUS
8434: ARRAY
8435: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8436: LD_ADDR_VAR 0 12
8440: PUSH
8441: LD_INT 200
8443: PUSH
8444: LD_INT 120
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_EXP 19
8455: PUSH
8456: LD_INT 1
8458: PLUS
8459: ARRAY
8460: ST_TO_ADDR
// payForHelp := true ;
8461: LD_ADDR_VAR 0 14
8465: PUSH
8466: LD_INT 1
8468: ST_TO_ADDR
// end ; if dec2 = 4 then
8469: LD_VAR 0 4
8473: PUSH
8474: LD_INT 4
8476: EQUAL
8477: IFFALSE 8712
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8479: LD_EXP 1
8483: PPUSH
8484: LD_STRING D3Kc1-JMM-1
8486: PPUSH
8487: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8491: LD_EXP 17
8495: PPUSH
8496: LD_STRING D3Kc1-Kurt-1
8498: PPUSH
8499: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8503: LD_EXP 1
8507: PPUSH
8508: LD_STRING D3Kc1-JMM-2
8510: PPUSH
8511: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8515: LD_EXP 17
8519: PPUSH
8520: LD_STRING D3Kc1-Kurt-2
8522: PPUSH
8523: CALL_OW 88
// askSiberite = 1 ;
8527: LD_ADDR_EXP 25
8531: PUSH
8532: LD_INT 1
8534: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8535: LD_ADDR_VAR 0 4
8539: PUSH
8540: LD_STRING Q2b
8542: PPUSH
8543: LD_INT 1
8545: PUSH
8546: LD_INT 2
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 98
8561: ST_TO_ADDR
// if dec2 = 1 then
8562: LD_VAR 0 4
8566: PUSH
8567: LD_INT 1
8569: EQUAL
8570: IFFALSE 8604
// begin Say ( JMM , D4a-JMM-1 ) ;
8572: LD_EXP 1
8576: PPUSH
8577: LD_STRING D4a-JMM-1
8579: PPUSH
8580: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8584: LD_EXP 17
8588: PPUSH
8589: LD_STRING D4b-Kurt-1
8591: PPUSH
8592: CALL_OW 88
// warWithLegion = 1 ;
8596: LD_ADDR_EXP 23
8600: PUSH
8601: LD_INT 1
8603: ST_TO_ADDR
// end ; if dec2 = 2 then
8604: LD_VAR 0 4
8608: PUSH
8609: LD_INT 2
8611: EQUAL
8612: IFFALSE 8646
// begin Say ( JMM , D4b-JMM-1 ) ;
8614: LD_EXP 1
8618: PPUSH
8619: LD_STRING D4b-JMM-1
8621: PPUSH
8622: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_STRING D4b-Kurt-1
8633: PPUSH
8634: CALL_OW 88
// warWithLegion = 1 ;
8638: LD_ADDR_EXP 23
8642: PUSH
8643: LD_INT 1
8645: ST_TO_ADDR
// end ; if dec2 = 3 then
8646: LD_VAR 0 4
8650: PUSH
8651: LD_INT 3
8653: EQUAL
8654: IFFALSE 8712
// begin Say ( JMM , D4c-JMM-1 ) ;
8656: LD_EXP 1
8660: PPUSH
8661: LD_STRING D4c-JMM-1
8663: PPUSH
8664: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8668: LD_EXP 17
8672: PPUSH
8673: LD_STRING D4c-Kurt-1
8675: PPUSH
8676: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8680: LD_EXP 1
8684: PPUSH
8685: LD_STRING D4c-JMM-2
8687: PPUSH
8688: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8692: LD_EXP 17
8696: PPUSH
8697: LD_STRING D4c-Kurt-2
8699: PPUSH
8700: CALL_OW 88
// fakeInfo = 1 ;
8704: LD_ADDR_EXP 24
8708: PUSH
8709: LD_INT 1
8711: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8712: LD_VAR 0 13
8716: PUSH
8717: LD_VAR 0 14
8721: OR
8722: IFFALSE 9023
// begin for i in tmp do
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_VAR 0 5
8733: PUSH
8734: FOR_IN
8735: IFFALSE 9021
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8737: LD_ADDR_VAR 0 6
8741: PUSH
8742: LD_VAR 0 2
8746: PPUSH
8747: CALL_OW 274
8751: PPUSH
8752: LD_INT 1
8754: PPUSH
8755: CALL_OW 275
8759: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8760: LD_ADDR_VAR 0 7
8764: PUSH
8765: LD_VAR 0 2
8769: PPUSH
8770: CALL_OW 274
8774: PPUSH
8775: LD_INT 3
8777: PPUSH
8778: CALL_OW 275
8782: ST_TO_ADDR
// if cr then
8783: LD_VAR 0 11
8787: IFFALSE 8901
// begin if tmp2 and tmp2 < cr then
8789: LD_VAR 0 6
8793: PUSH
8794: LD_VAR 0 6
8798: PUSH
8799: LD_VAR 0 11
8803: LESS
8804: AND
8805: IFFALSE 8853
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL_OW 274
8816: PPUSH
8817: LD_INT 1
8819: PPUSH
8820: LD_VAR 0 11
8824: PUSH
8825: LD_VAR 0 6
8829: MINUS
8830: PPUSH
8831: CALL_OW 277
// cr := cr - tmp2 ;
8835: LD_ADDR_VAR 0 11
8839: PUSH
8840: LD_VAR 0 11
8844: PUSH
8845: LD_VAR 0 6
8849: MINUS
8850: ST_TO_ADDR
// end else
8851: GO 8901
// if tmp2 > cr then
8853: LD_VAR 0 6
8857: PUSH
8858: LD_VAR 0 11
8862: GREATER
8863: IFFALSE 8901
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8865: LD_VAR 0 2
8869: PPUSH
8870: CALL_OW 274
8874: PPUSH
8875: LD_INT 1
8877: PPUSH
8878: LD_VAR 0 6
8882: PUSH
8883: LD_VAR 0 11
8887: MINUS
8888: PPUSH
8889: CALL_OW 277
// cr := 0 ;
8893: LD_ADDR_VAR 0 11
8897: PUSH
8898: LD_INT 0
8900: ST_TO_ADDR
// end ; end ; if sb then
8901: LD_VAR 0 12
8905: IFFALSE 9019
// begin if tmp3 and tmp3 < sb then
8907: LD_VAR 0 7
8911: PUSH
8912: LD_VAR 0 7
8916: PUSH
8917: LD_VAR 0 12
8921: LESS
8922: AND
8923: IFFALSE 8971
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8925: LD_VAR 0 2
8929: PPUSH
8930: CALL_OW 274
8934: PPUSH
8935: LD_INT 3
8937: PPUSH
8938: LD_VAR 0 12
8942: PUSH
8943: LD_VAR 0 7
8947: MINUS
8948: PPUSH
8949: CALL_OW 277
// sb := sb - tmp3 ;
8953: LD_ADDR_VAR 0 12
8957: PUSH
8958: LD_VAR 0 12
8962: PUSH
8963: LD_VAR 0 7
8967: MINUS
8968: ST_TO_ADDR
// end else
8969: GO 9019
// if tmp3 > sb then
8971: LD_VAR 0 7
8975: PUSH
8976: LD_VAR 0 12
8980: GREATER
8981: IFFALSE 9019
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 274
8992: PPUSH
8993: LD_INT 3
8995: PPUSH
8996: LD_VAR 0 7
9000: PUSH
9001: LD_VAR 0 12
9005: MINUS
9006: PPUSH
9007: CALL_OW 277
// sb := 0 ;
9011: LD_ADDR_VAR 0 12
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// end ; end ; end ;
9019: GO 8734
9021: POP
9022: POP
// end ; end ; DialogueOff ;
9023: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9027: LD_INT 167
9029: PPUSH
9030: LD_INT 121
9032: PPUSH
9033: LD_INT 1
9035: PPUSH
9036: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9040: LD_EXP 17
9044: PPUSH
9045: LD_EXP 18
9049: PPUSH
9050: CALL_OW 120
// wait ( 0 0$1 ) ;
9054: LD_INT 35
9056: PPUSH
9057: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9061: LD_EXP 18
9065: PPUSH
9066: LD_INT 4
9068: PPUSH
9069: CALL_OW 113
// wait ( 0 0$3 ) ;
9073: LD_INT 105
9075: PPUSH
9076: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9080: LD_EXP 17
9084: PPUSH
9085: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9089: LD_EXP 18
9093: PPUSH
9094: CALL_OW 64
// wait ( 0 0$3 ) ;
9098: LD_INT 105
9100: PPUSH
9101: CALL_OW 67
// if payForHelp then
9105: LD_VAR 0 14
9109: IFFALSE 9167
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9111: LD_INT 36
9113: PPUSH
9114: LD_INT 57
9116: PPUSH
9117: LD_INT 1
9119: PPUSH
9120: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9124: LD_INT 51
9126: PPUSH
9127: LD_INT 63
9129: PPUSH
9130: LD_INT 1
9132: PPUSH
9133: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9137: LD_INT 93
9139: PPUSH
9140: LD_INT 65
9142: PPUSH
9143: LD_INT 1
9145: PPUSH
9146: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9150: LD_INT 42
9152: PPUSH
9153: LD_INT 12
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: CALL_OW 244
// PrepareLegionForPlayer ;
9163: CALL 4775 0 0
// end ; end ;
9167: LD_VAR 0 1
9171: RET
// every 0 0$10 trigger warWithLegion = 1 do
9172: LD_EXP 23
9176: PUSH
9177: LD_INT 1
9179: EQUAL
9180: IFFALSE 9196
9182: GO 9184
9184: DISABLE
// begin wait ( 0 0$30 ) ;
9185: LD_INT 1050
9187: PPUSH
9188: CALL_OW 67
// PrepareAttackLegion ;
9192: CALL 5416 0 0
// end ;
9196: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9197: LD_INT 120
9199: PUSH
9200: LD_INT 17
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 52
9209: PUSH
9210: EMPTY
9211: LIST
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PPUSH
9217: CALL_OW 69
9221: IFFALSE 9366
9223: GO 9225
9225: DISABLE
9226: LD_INT 0
9228: PPUSH
// begin enable ;
9229: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9230: LD_ADDR_VAR 0 1
9234: PUSH
9235: LD_INT 120
9237: PUSH
9238: LD_INT 17
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 52
9247: PUSH
9248: EMPTY
9249: LIST
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PPUSH
9255: CALL_OW 69
9259: PUSH
9260: FOR_IN
9261: IFFALSE 9364
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9263: LD_VAR 0 1
9267: PPUSH
9268: CALL 80120 0 1
9272: PUSH
9273: LD_INT 4
9275: ARRAY
9276: PUSH
9277: LD_INT 0
9279: EQUAL
9280: PUSH
9281: LD_VAR 0 1
9285: PPUSH
9286: CALL_OW 255
9290: PUSH
9291: LD_INT 1
9293: EQUAL
9294: AND
9295: IFFALSE 9309
// SetSide ( i , 4 ) ;
9297: LD_VAR 0 1
9301: PPUSH
9302: LD_INT 4
9304: PPUSH
9305: CALL_OW 235
// if GetSide ( i ) = 4 then
9309: LD_VAR 0 1
9313: PPUSH
9314: CALL_OW 255
9318: PUSH
9319: LD_INT 4
9321: EQUAL
9322: IFFALSE 9362
// if not IsInArea ( i , PlayerSpawn ) then
9324: LD_VAR 0 1
9328: PPUSH
9329: LD_INT 4
9331: PPUSH
9332: CALL_OW 308
9336: NOT
9337: IFFALSE 9353
// ComMoveToArea ( i , PlayerSpawn ) else
9339: LD_VAR 0 1
9343: PPUSH
9344: LD_INT 4
9346: PPUSH
9347: CALL_OW 113
9351: GO 9362
// RemoveUnit ( i ) ;
9353: LD_VAR 0 1
9357: PPUSH
9358: CALL_OW 64
// end ;
9362: GO 9260
9364: POP
9365: POP
// end ;
9366: PPOPN 1
9368: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
9369: LD_EXP 20
9373: PUSH
9374: LD_INT 1
9376: EQUAL
9377: PUSH
9378: LD_INT 12
9380: PPUSH
9381: LD_INT 22
9383: PUSH
9384: LD_INT 3
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 101
9393: PUSH
9394: LD_INT 1
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: LD_INT 21
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 70
9420: AND
9421: IFFALSE 9970
9423: GO 9425
9425: DISABLE
9426: LD_INT 0
9428: PPUSH
9429: PPUSH
9430: PPUSH
// begin DialogueOn ;
9431: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9435: LD_VAR 0 1
9439: PPUSH
9440: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9444: LD_INT 22
9446: PUSH
9447: LD_INT 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: LD_INT 26
9456: PUSH
9457: LD_INT 1
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: LD_INT 25
9469: PUSH
9470: LD_INT 1
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 25
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: LD_INT 25
9489: PUSH
9490: LD_INT 3
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PUSH
9497: LD_INT 25
9499: PUSH
9500: LD_INT 4
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: LD_INT 25
9509: PUSH
9510: LD_INT 5
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 25
9519: PUSH
9520: LD_INT 8
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: PPUSH
9541: CALL_OW 69
9545: PPUSH
9546: LD_STRING DT1-Sol1-1
9548: PPUSH
9549: LD_STRING DT1-FSol1-1
9551: PPUSH
9552: CALL 12226 0 3
// dec := ShowQuery2 ;
9556: LD_ADDR_VAR 0 3
9560: PUSH
9561: CALL 12710 0 0
9565: ST_TO_ADDR
// if dec = 1 then
9566: LD_VAR 0 3
9570: PUSH
9571: LD_INT 1
9573: EQUAL
9574: IFFALSE 9680
// begin Say ( JMM , D2-JMM-1 ) ;
9576: LD_EXP 1
9580: PPUSH
9581: LD_STRING D2-JMM-1
9583: PPUSH
9584: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9588: LD_EXP 15
9592: PPUSH
9593: LD_STRING D2-Pow-1
9595: PPUSH
9596: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9600: LD_EXP 1
9604: PPUSH
9605: LD_STRING D2a-JMM-1
9607: PPUSH
9608: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9612: LD_EXP 15
9616: PPUSH
9617: LD_STRING D2a-Pow-1
9619: PPUSH
9620: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9624: LD_EXP 1
9628: PPUSH
9629: LD_STRING D2a-JMM-2
9631: PPUSH
9632: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9636: LD_EXP 15
9640: PPUSH
9641: LD_STRING D2a-Pow-2
9643: PPUSH
9644: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9648: LD_EXP 1
9652: PPUSH
9653: LD_STRING D2a-JMM-3
9655: PPUSH
9656: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9660: LD_EXP 15
9664: PPUSH
9665: LD_STRING D2a-Pow-3
9667: PPUSH
9668: CALL_OW 94
// secondPass := 2 ;
9672: LD_ADDR_EXP 20
9676: PUSH
9677: LD_INT 2
9679: ST_TO_ADDR
// end ; if dec = 2 then
9680: LD_VAR 0 3
9684: PUSH
9685: LD_INT 2
9687: EQUAL
9688: IFFALSE 9782
// begin Say ( JMM , D2-JMM-1 ) ;
9690: LD_EXP 1
9694: PPUSH
9695: LD_STRING D2-JMM-1
9697: PPUSH
9698: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9702: LD_EXP 15
9706: PPUSH
9707: LD_STRING D2-Pow-1
9709: PPUSH
9710: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9714: LD_EXP 1
9718: PPUSH
9719: LD_STRING D2b-JMM-1
9721: PPUSH
9722: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9726: LD_EXP 15
9730: PPUSH
9731: LD_STRING D2b-Pow-1
9733: PPUSH
9734: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9738: LD_EXP 1
9742: PPUSH
9743: LD_STRING D2c-JMM-1
9745: PPUSH
9746: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9750: LD_EXP 15
9754: PPUSH
9755: LD_STRING D2c-Pow-1
9757: PPUSH
9758: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9762: LD_EXP 1
9766: PPUSH
9767: LD_STRING D2c-JMM-2
9769: PPUSH
9770: CALL_OW 88
// secondPass := 2 ;
9774: LD_ADDR_EXP 20
9778: PUSH
9779: LD_INT 2
9781: ST_TO_ADDR
// end ; DialogueOff ;
9782: CALL_OW 7
// if secondPass = 2 then
9786: LD_EXP 20
9790: PUSH
9791: LD_INT 2
9793: EQUAL
9794: IFFALSE 9798
// exit ;
9796: GO 9970
// Query ( HelpRequest ) ;
9798: LD_STRING HelpRequest
9800: PPUSH
9801: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
9805: LD_INT 27
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9815: LD_INT 35
9817: PPUSH
9818: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
9822: LD_EXP 1
9826: PPUSH
9827: LD_INT 27
9829: PPUSH
9830: CALL_OW 308
9834: IFFALSE 9815
// SetAreaMapShow ( helpRequestArea , 0 ) ;
9836: LD_INT 27
9838: PPUSH
9839: LD_INT 0
9841: PPUSH
9842: CALL_OW 424
// DialogueOn ;
9846: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
9850: LD_EXP 1
9854: PPUSH
9855: LD_STRING D2-JMM-1
9857: PPUSH
9858: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9862: LD_EXP 15
9866: PPUSH
9867: LD_STRING D2-Pow-1
9869: PPUSH
9870: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9874: LD_EXP 1
9878: PPUSH
9879: LD_STRING D2b-JMM-1
9881: PPUSH
9882: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9886: LD_EXP 15
9890: PPUSH
9891: LD_STRING D2a-Pow-2
9893: PPUSH
9894: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9898: LD_EXP 1
9902: PPUSH
9903: LD_STRING D2a-JMM-3
9905: PPUSH
9906: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9910: LD_EXP 15
9914: PPUSH
9915: LD_STRING D2a-Pow-3
9917: PPUSH
9918: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9922: LD_EXP 1
9926: PPUSH
9927: LD_STRING D2c-JMM-1
9929: PPUSH
9930: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9934: LD_EXP 15
9938: PPUSH
9939: LD_STRING D2c-Pow-1
9941: PPUSH
9942: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9946: LD_EXP 1
9950: PPUSH
9951: LD_STRING D2c-JMM-2
9953: PPUSH
9954: CALL_OW 88
// DialogueOff ;
9958: CALL_OW 7
// secondPass := 2 ;
9962: LD_ADDR_EXP 20
9966: PUSH
9967: LD_INT 2
9969: ST_TO_ADDR
// end ;
9970: PPOPN 3
9972: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
9973: LD_EXP 21
9977: PUSH
9978: LD_INT 1
9980: EQUAL
9981: PUSH
9982: LD_INT 11
9984: PPUSH
9985: LD_INT 22
9987: PUSH
9988: LD_INT 3
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PPUSH
9995: CALL_OW 70
9999: AND
10000: IFFALSE 10481
10002: GO 10004
10004: DISABLE
10005: LD_INT 0
10007: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10008: LD_ADDR_VAR 0 1
10012: PUSH
10013: LD_INT 11
10015: PPUSH
10016: LD_INT 22
10018: PUSH
10019: LD_INT 3
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PPUSH
10026: CALL_OW 70
10030: ST_TO_ADDR
// if not vehicles then
10031: LD_VAR 0 1
10035: NOT
10036: IFFALSE 10040
// exit ;
10038: GO 10481
// repeat wait ( 0 0$1 ) ;
10040: LD_INT 35
10042: PPUSH
10043: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10047: LD_VAR 0 1
10051: PPUSH
10052: LD_INT 101
10054: PUSH
10055: LD_INT 1
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 72
10066: IFFALSE 10040
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10068: LD_VAR 0 1
10072: PPUSH
10073: LD_INT 101
10075: PUSH
10076: LD_INT 1
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PPUSH
10083: CALL_OW 72
10087: PUSH
10088: LD_INT 1
10090: ARRAY
10091: PPUSH
10092: CALL_OW 87
// DialogueOn ;
10096: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10100: LD_INT 22
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 26
10112: PUSH
10113: LD_INT 1
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PUSH
10120: LD_INT 23
10122: PUSH
10123: LD_INT 1
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: LD_INT 25
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 25
10145: PUSH
10146: LD_INT 2
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 25
10155: PUSH
10156: LD_INT 3
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 25
10165: PUSH
10166: LD_INT 4
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PUSH
10173: LD_INT 25
10175: PUSH
10176: LD_INT 5
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 25
10185: PUSH
10186: LD_INT 8
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: PPUSH
10208: CALL_OW 69
10212: PPUSH
10213: LD_STRING DT1-Sol1-1
10215: PPUSH
10216: LD_STRING DT1-FSol1-1
10218: PPUSH
10219: CALL 12226 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10223: LD_EXP 1
10227: PPUSH
10228: LD_STRING DT1-JMM-1
10230: PPUSH
10231: CALL_OW 88
// DialogueOff ;
10235: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10239: LD_INT 175
10241: PPUSH
10242: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10246: LD_INT 11
10248: PPUSH
10249: LD_INT 22
10251: PUSH
10252: LD_INT 3
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 50
10261: PUSH
10262: EMPTY
10263: LIST
10264: PUSH
10265: LD_INT 2
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 2
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 70
10302: PUSH
10303: LD_INT 0
10305: EQUAL
10306: PUSH
10307: LD_EXP 22
10311: PUSH
10312: LD_INT 2
10314: GREATER
10315: AND
10316: IFFALSE 10239
// DialogueOn ;
10318: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10322: LD_EXP 1
10326: PPUSH
10327: LD_STRING DT1a-JMM-1
10329: PPUSH
10330: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10334: LD_INT 22
10336: PUSH
10337: LD_INT 1
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 26
10346: PUSH
10347: LD_INT 1
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 23
10356: PUSH
10357: LD_INT 1
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: LD_INT 25
10369: PUSH
10370: LD_INT 1
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 25
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 25
10389: PUSH
10390: LD_INT 3
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 25
10399: PUSH
10400: LD_INT 4
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 25
10409: PUSH
10410: LD_INT 5
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 25
10419: PUSH
10420: LD_INT 8
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PPUSH
10442: CALL_OW 69
10446: PPUSH
10447: LD_STRING DT1a-Sol1-1
10449: PPUSH
10450: LD_STRING DT1a-FSol1-1
10452: PPUSH
10453: CALL 12226 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10457: LD_EXP 1
10461: PPUSH
10462: LD_STRING DT1a-JMM-2
10464: PPUSH
10465: CALL_OW 88
// DialogueOff ;
10469: CALL_OW 7
// vehicleTeleported := 2 ;
10473: LD_ADDR_EXP 21
10477: PUSH
10478: LD_INT 2
10480: ST_TO_ADDR
// end ;
10481: PPOPN 1
10483: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10484: LD_EXP 21
10488: PUSH
10489: LD_INT 3
10491: EQUAL
10492: PUSH
10493: LD_INT 11
10495: PPUSH
10496: LD_INT 22
10498: PUSH
10499: LD_INT 3
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 101
10508: PUSH
10509: LD_INT 1
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PPUSH
10520: CALL_OW 70
10524: AND
10525: IFFALSE 10810
10527: GO 10529
10529: DISABLE
10530: LD_INT 0
10532: PPUSH
10533: PPUSH
10534: PPUSH
// begin wait ( 0 0$0.3 ) ;
10535: LD_INT 10
10537: PPUSH
10538: CALL_OW 67
// DialogueOn ;
10542: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10546: LD_ADDR_VAR 0 3
10550: PUSH
10551: LD_INT 22
10553: PUSH
10554: LD_INT 1
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 23
10563: PUSH
10564: LD_INT 1
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 26
10573: PUSH
10574: LD_INT 1
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: LD_INT 25
10586: PUSH
10587: LD_INT 1
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 25
10596: PUSH
10597: LD_INT 2
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 25
10606: PUSH
10607: LD_INT 3
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 25
10616: PUSH
10617: LD_INT 4
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 25
10626: PUSH
10627: LD_INT 5
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 25
10636: PUSH
10637: LD_INT 8
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PPUSH
10659: CALL_OW 69
10663: PPUSH
10664: LD_STRING DT2-Sol1-1
10666: PPUSH
10667: LD_STRING DT2-FSol1-1
10669: PPUSH
10670: CALL 12226 0 3
10674: ST_TO_ADDR
// DialogueOff ;
10675: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10679: LD_INT 175
10681: PPUSH
10682: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10686: LD_INT 11
10688: PPUSH
10689: LD_INT 22
10691: PUSH
10692: LD_INT 3
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 50
10701: PUSH
10702: EMPTY
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PPUSH
10709: CALL_OW 70
10713: NOT
10714: IFFALSE 10679
// wait ( 0 0$2 ) ;
10716: LD_INT 70
10718: PPUSH
10719: CALL_OW 67
// vehicleTeleported := 4 ;
10723: LD_ADDR_EXP 21
10727: PUSH
10728: LD_INT 4
10730: ST_TO_ADDR
// DialogueOn ;
10731: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10735: LD_EXP 1
10739: PPUSH
10740: LD_STRING DT2a-JMM-1
10742: PPUSH
10743: CALL_OW 88
// if speaker then
10747: LD_VAR 0 3
10751: IFFALSE 10794
// if GetSex ( speaker ) = 1 then
10753: LD_VAR 0 3
10757: PPUSH
10758: CALL_OW 258
10762: PUSH
10763: LD_INT 1
10765: EQUAL
10766: IFFALSE 10782
// Say ( speaker , DT2a-Sol1-1 ) else
10768: LD_VAR 0 3
10772: PPUSH
10773: LD_STRING DT2a-Sol1-1
10775: PPUSH
10776: CALL_OW 88
10780: GO 10794
// Say ( speaker , DT2a-FSol1-1 ) ;
10782: LD_VAR 0 3
10786: PPUSH
10787: LD_STRING DT2a-FSol1-1
10789: PPUSH
10790: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10794: LD_EXP 3
10798: PPUSH
10799: LD_STRING DT2a-Don-1
10801: PPUSH
10802: CALL_OW 88
// DialogueOff ;
10806: CALL_OW 7
// end ;
10810: PPOPN 3
10812: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10813: LD_INT 1
10815: PPUSH
10816: LD_INT 45
10818: PPUSH
10819: LD_INT 74
10821: PPUSH
10822: CALL_OW 293
10826: IFFALSE 11001
10828: GO 10830
10830: DISABLE
// begin DialogueOn ;
10831: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10835: LD_INT 36
10837: PPUSH
10838: LD_INT 55
10840: PPUSH
10841: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10845: LD_INT 22
10847: PUSH
10848: LD_INT 1
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 23
10857: PUSH
10858: LD_INT 1
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 26
10867: PUSH
10868: LD_INT 1
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: LD_INT 2
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: LD_INT 1
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 25
10890: PUSH
10891: LD_INT 2
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 25
10900: PUSH
10901: LD_INT 3
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 25
10910: PUSH
10911: LD_INT 4
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 25
10920: PUSH
10921: LD_INT 5
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 25
10930: PUSH
10931: LD_INT 8
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PPUSH
10953: CALL_OW 69
10957: PPUSH
10958: LD_STRING D5-Sol1-1
10960: PPUSH
10961: LD_STRING D5-FSol1-
10963: PPUSH
10964: CALL 12226 0 3
// if warWithLegion and IsOk ( Donaldson ) then
10968: LD_EXP 23
10972: PUSH
10973: LD_EXP 3
10977: PPUSH
10978: CALL_OW 302
10982: AND
10983: IFFALSE 10997
// Say ( Donaldson , D5-Don-1 ) ;
10985: LD_EXP 3
10989: PPUSH
10990: LD_STRING D5-Don-1
10992: PPUSH
10993: CALL_OW 88
// DialogueOff ;
10997: CALL_OW 7
// end ;
11001: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11002: LD_INT 1
11004: PPUSH
11005: LD_INT 10
11007: PPUSH
11008: CALL_OW 292
11012: PUSH
11013: LD_INT 1
11015: PPUSH
11016: LD_INT 137
11018: PPUSH
11019: CALL_OW 292
11023: OR
11024: IFFALSE 11179
11026: GO 11028
11028: DISABLE
// begin DialogueOn ;
11029: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11033: LD_INT 22
11035: PUSH
11036: LD_INT 1
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 23
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 26
11055: PUSH
11056: LD_INT 1
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 2
11065: PUSH
11066: LD_INT 25
11068: PUSH
11069: LD_INT 1
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 25
11078: PUSH
11079: LD_INT 2
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 25
11088: PUSH
11089: LD_INT 3
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 25
11098: PUSH
11099: LD_INT 4
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 25
11108: PUSH
11109: LD_INT 5
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 25
11118: PUSH
11119: LD_INT 8
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PPUSH
11141: CALL_OW 69
11145: PPUSH
11146: LD_STRING DT3-Sol1-1
11148: PPUSH
11149: LD_STRING DT3-FSol1-1
11151: PPUSH
11152: CALL 12226 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11156: LD_EXP 1
11160: PPUSH
11161: LD_STRING DT3-JMM-1
11163: PPUSH
11164: CALL_OW 88
// DialogueOff ;
11168: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11172: LD_STRING M2
11174: PPUSH
11175: CALL_OW 337
// end ;
11179: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11180: LD_EXP 35
11184: PUSH
11185: LD_INT 0
11187: EQUAL
11188: PUSH
11189: LD_INT 10
11191: PPUSH
11192: LD_INT 22
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 70
11206: PUSH
11207: LD_INT 10
11209: PPUSH
11210: LD_INT 22
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 3
11222: PUSH
11223: LD_INT 24
11225: PUSH
11226: LD_INT 800
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 21
11239: PUSH
11240: LD_INT 2
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 58
11249: PUSH
11250: EMPTY
11251: LIST
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PPUSH
11259: CALL_OW 70
11263: OR
11264: AND
11265: IFFALSE 11278
11267: GO 11269
11269: DISABLE
// ruEscape := 1 ;
11270: LD_ADDR_EXP 35
11274: PUSH
11275: LD_INT 1
11277: ST_TO_ADDR
11278: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11279: LD_INT 3
11281: PPUSH
11282: CALL_OW 303
11286: PUSH
11287: LD_INT 4
11289: PPUSH
11290: CALL_OW 303
11294: OR
11295: PUSH
11296: LD_EXP 35
11300: PUSH
11301: LD_INT 1
11303: EQUAL
11304: OR
11305: IFFALSE 11894
11307: GO 11309
11309: DISABLE
11310: LD_INT 0
11312: PPUSH
11313: PPUSH
11314: PPUSH
// begin ruAI := 0 ;
11315: LD_ADDR_EXP 34
11319: PUSH
11320: LD_INT 0
11322: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11323: LD_EXP 27
11327: PPUSH
11328: CALL_OW 122
// wait ( 0 0$1 ) ;
11332: LD_INT 35
11334: PPUSH
11335: CALL_OW 67
// DialogueOn ;
11339: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11343: LD_INT 75
11345: PPUSH
11346: LD_INT 21
11348: PPUSH
11349: LD_INT 1
11351: PPUSH
11352: LD_INT 12
11354: PPUSH
11355: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11359: LD_INT 75
11361: PPUSH
11362: LD_INT 21
11364: PPUSH
11365: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11369: LD_INT 10
11371: PPUSH
11372: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11376: LD_EXP 1
11380: PPUSH
11381: LD_STRING D6-JMM-1
11383: PPUSH
11384: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11388: LD_INT 75
11390: PPUSH
11391: LD_INT 21
11393: PPUSH
11394: LD_INT 1
11396: PPUSH
11397: CALL_OW 331
// DialogueOff ;
11401: CALL_OW 7
// for i in RuScientists do
11405: LD_ADDR_VAR 0 1
11409: PUSH
11410: LD_EXP 27
11414: PUSH
11415: FOR_IN
11416: IFFALSE 11452
// begin SetSide ( i , 6 ) ;
11418: LD_VAR 0 1
11422: PPUSH
11423: LD_INT 6
11425: PPUSH
11426: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11430: LD_VAR 0 1
11434: PPUSH
11435: LD_INT 1
11437: PPUSH
11438: LD_INT 3
11440: PPUSH
11441: CALL_OW 12
11445: PPUSH
11446: CALL_OW 109
// end ;
11450: GO 11415
11452: POP
11453: POP
// repeat wait ( 0 0$1 ) ;
11454: LD_INT 35
11456: PPUSH
11457: CALL_OW 67
// for i in RuScientists do
11461: LD_ADDR_VAR 0 1
11465: PUSH
11466: LD_EXP 27
11470: PUSH
11471: FOR_IN
11472: IFFALSE 11885
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_INT 22
11481: PUSH
11482: LD_INT 3
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 91
11491: PUSH
11492: LD_VAR 0 1
11496: PUSH
11497: LD_INT 10
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 21
11507: PUSH
11508: LD_INT 2
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 58
11517: PUSH
11518: EMPTY
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: PPUSH
11527: CALL_OW 69
11531: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11532: LD_VAR 0 3
11536: PUSH
11537: LD_VAR 0 1
11541: PPUSH
11542: CALL_OW 310
11546: NOT
11547: AND
11548: IFFALSE 11576
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11550: LD_VAR 0 1
11554: PPUSH
11555: LD_VAR 0 3
11559: PPUSH
11560: LD_VAR 0 1
11564: PPUSH
11565: CALL_OW 74
11569: PPUSH
11570: CALL_OW 120
// continue ;
11574: GO 11471
// end ; if IsInUnit ( i ) then
11576: LD_VAR 0 1
11580: PPUSH
11581: CALL_OW 310
11585: IFFALSE 11604
// unit := IsInUnit ( i ) else
11587: LD_ADDR_VAR 0 2
11591: PUSH
11592: LD_VAR 0 1
11596: PPUSH
11597: CALL_OW 310
11601: ST_TO_ADDR
11602: GO 11614
// unit := i ;
11604: LD_ADDR_VAR 0 2
11608: PUSH
11609: LD_VAR 0 1
11613: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11614: LD_VAR 0 1
11618: PPUSH
11619: CALL_OW 110
11623: PUSH
11624: LD_INT 1
11626: DOUBLE
11627: EQUAL
11628: IFTRUE 11632
11630: GO 11691
11632: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11633: LD_VAR 0 2
11637: PPUSH
11638: LD_INT 137
11640: PPUSH
11641: CALL_OW 296
11645: PUSH
11646: LD_INT 13
11648: LESS
11649: PUSH
11650: LD_INT 137
11652: PPUSH
11653: CALL_OW 302
11657: AND
11658: IFFALSE 11674
// ComEnterUnit ( unit , rutp ) else
11660: LD_VAR 0 2
11664: PPUSH
11665: LD_INT 137
11667: PPUSH
11668: CALL_OW 120
11672: GO 11689
// ComMoveXY ( unit , 16 , 28 ) ;
11674: LD_VAR 0 2
11678: PPUSH
11679: LD_INT 16
11681: PPUSH
11682: LD_INT 28
11684: PPUSH
11685: CALL_OW 111
// end ; 2 :
11689: GO 11883
11691: LD_INT 2
11693: DOUBLE
11694: EQUAL
11695: IFTRUE 11699
11697: GO 11717
11699: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11700: LD_VAR 0 2
11704: PPUSH
11705: LD_INT 97
11707: PPUSH
11708: LD_INT 2
11710: PPUSH
11711: CALL_OW 111
11715: GO 11883
11717: LD_INT 3
11719: DOUBLE
11720: EQUAL
11721: IFTRUE 11725
11723: GO 11784
11725: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11726: LD_VAR 0 2
11730: PPUSH
11731: LD_INT 137
11733: PPUSH
11734: CALL_OW 296
11738: PUSH
11739: LD_INT 13
11741: LESS
11742: PUSH
11743: LD_INT 137
11745: PPUSH
11746: CALL_OW 302
11750: AND
11751: IFFALSE 11767
// ComEnterUnit ( unit , rutp ) else
11753: LD_VAR 0 2
11757: PPUSH
11758: LD_INT 137
11760: PPUSH
11761: CALL_OW 120
11765: GO 11782
// ComMoveXY ( unit , 128 , 155 ) ;
11767: LD_VAR 0 2
11771: PPUSH
11772: LD_INT 128
11774: PPUSH
11775: LD_INT 155
11777: PPUSH
11778: CALL_OW 111
// end ; 11 :
11782: GO 11883
11784: LD_INT 11
11786: DOUBLE
11787: EQUAL
11788: IFTRUE 11792
11790: GO 11810
11792: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11793: LD_VAR 0 2
11797: PPUSH
11798: LD_INT 16
11800: PPUSH
11801: LD_INT 28
11803: PPUSH
11804: CALL_OW 111
11808: GO 11883
11810: LD_INT 13
11812: DOUBLE
11813: EQUAL
11814: IFTRUE 11818
11816: GO 11856
11818: POP
// begin if IsOk ( ruteleprt ) then
11819: LD_INT 10
11821: PPUSH
11822: CALL_OW 302
11826: IFFALSE 11842
// ComEnterUnit ( unit , ruteleprt ) else
11828: LD_VAR 0 2
11832: PPUSH
11833: LD_INT 10
11835: PPUSH
11836: CALL_OW 120
11840: GO 11854
// SetTag ( unit , 23 ) ;
11842: LD_VAR 0 2
11846: PPUSH
11847: LD_INT 23
11849: PPUSH
11850: CALL_OW 109
// end ; 23 :
11854: GO 11883
11856: LD_INT 23
11858: DOUBLE
11859: EQUAL
11860: IFTRUE 11864
11862: GO 11882
11864: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11865: LD_VAR 0 2
11869: PPUSH
11870: LD_INT 128
11872: PPUSH
11873: LD_INT 155
11875: PPUSH
11876: CALL_OW 111
11880: GO 11883
11882: POP
// end ;
11883: GO 11471
11885: POP
11886: POP
// until not RuScientists ;
11887: LD_EXP 27
11891: NOT
11892: IFFALSE 11454
// end ;
11894: PPOPN 3
11896: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11897: LD_EXP 34
11901: PUSH
11902: LD_INT 0
11904: EQUAL
11905: PUSH
11906: LD_EXP 27
11910: AND
11911: PUSH
11912: LD_INT 22
11914: PUSH
11915: LD_INT 6
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 2
11924: PUSH
11925: LD_INT 95
11927: PUSH
11928: LD_INT 13
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 95
11937: PUSH
11938: LD_INT 14
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 95
11947: PUSH
11948: LD_INT 25
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PPUSH
11965: CALL_OW 69
11969: AND
11970: IFFALSE 12183
11972: GO 11974
11974: DISABLE
11975: LD_INT 0
11977: PPUSH
11978: PPUSH
11979: PPUSH
11980: PPUSH
// begin enable ;
11981: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
11982: LD_ADDR_VAR 0 1
11986: PUSH
11987: LD_INT 22
11989: PUSH
11990: LD_INT 6
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 2
11999: PUSH
12000: LD_INT 95
12002: PUSH
12003: LD_INT 13
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 95
12012: PUSH
12013: LD_INT 14
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 95
12022: PUSH
12023: LD_INT 25
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 69
12044: PUSH
12045: FOR_IN
12046: IFFALSE 12181
// begin if i in RuScientists then
12048: LD_VAR 0 1
12052: PUSH
12053: LD_EXP 27
12057: IN
12058: IFFALSE 12087
// begin RuScientists = RuScientists diff i ;
12060: LD_ADDR_EXP 27
12064: PUSH
12065: LD_EXP 27
12069: PUSH
12070: LD_VAR 0 1
12074: DIFF
12075: ST_TO_ADDR
// RemoveUnit ( i ) ;
12076: LD_VAR 0 1
12080: PPUSH
12081: CALL_OW 64
// continue ;
12085: GO 12045
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12087: LD_VAR 0 1
12091: PUSH
12092: LD_INT 22
12094: PUSH
12095: LD_INT 6
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 33
12104: PUSH
12105: LD_INT 1
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 69
12120: IN
12121: IFFALSE 12179
// begin if IsDrivenBy ( i ) in RuScientists then
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 311
12132: PUSH
12133: LD_EXP 27
12137: IN
12138: IFFALSE 12156
// RuScientists = RuScientists diff i ;
12140: LD_ADDR_EXP 27
12144: PUSH
12145: LD_EXP 27
12149: PUSH
12150: LD_VAR 0 1
12154: DIFF
12155: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12156: LD_VAR 0 1
12160: PPUSH
12161: CALL_OW 311
12165: PPUSH
12166: CALL_OW 64
// RemoveUnit ( i ) ;
12170: LD_VAR 0 1
12174: PPUSH
12175: CALL_OW 64
// end ; end ;
12179: GO 12045
12181: POP
12182: POP
// end ; end_of_file
12183: PPOPN 4
12185: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12186: LD_INT 0
12188: PPUSH
12189: PPUSH
// for i in charactersList do
12190: LD_ADDR_VAR 0 4
12194: PUSH
12195: LD_VAR 0 1
12199: PUSH
12200: FOR_IN
12201: IFFALSE 12219
// SaveCharacters ( i , ident ) ;
12203: LD_VAR 0 4
12207: PPUSH
12208: LD_VAR 0 2
12212: PPUSH
12213: CALL_OW 38
12217: GO 12200
12219: POP
12220: POP
// end ;
12221: LD_VAR 0 3
12225: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12226: LD_INT 0
12228: PPUSH
12229: PPUSH
12230: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12231: LD_ADDR_VAR 0 1
12235: PUSH
12236: LD_VAR 0 1
12240: PUSH
12241: LD_EXP 1
12245: PUSH
12246: LD_EXP 7
12250: PUSH
12251: LD_EXP 3
12255: PUSH
12256: LD_EXP 4
12260: PUSH
12261: LD_EXP 5
12265: PUSH
12266: LD_EXP 2
12270: PUSH
12271: LD_EXP 12
12275: PUSH
12276: LD_EXP 13
12280: PUSH
12281: LD_EXP 9
12285: PUSH
12286: LD_EXP 11
12290: PUSH
12291: LD_EXP 6
12295: PUSH
12296: LD_EXP 8
12300: PUSH
12301: LD_EXP 10
12305: PUSH
12306: LD_EXP 15
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: DIFF
12327: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12328: LD_ADDR_VAR 0 6
12332: PUSH
12333: LD_VAR 0 1
12337: PUSH
12338: LD_INT 1
12340: PPUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 12
12350: ARRAY
12351: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12352: LD_VAR 0 6
12356: PPUSH
12357: CALL_OW 258
12361: PUSH
12362: LD_INT 1
12364: EQUAL
12365: IFFALSE 12383
// Say ( speaker , dialogMID ) else
12367: LD_VAR 0 6
12371: PPUSH
12372: LD_VAR 0 2
12376: PPUSH
12377: CALL_OW 88
12381: GO 12397
// Say ( speaker , dialogFID ) ;
12383: LD_VAR 0 6
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: CALL_OW 88
// result := speaker ;
12397: LD_ADDR_VAR 0 4
12401: PUSH
12402: LD_VAR 0 6
12406: ST_TO_ADDR
// end ;
12407: LD_VAR 0 4
12411: RET
// export function PrepareDifficulty ; var tmp ; begin
12412: LD_INT 0
12414: PPUSH
12415: PPUSH
// if Difficulty = 1 then
12416: LD_OWVAR 67
12420: PUSH
12421: LD_INT 1
12423: EQUAL
12424: IFFALSE 12444
// begin RuSolMinLevel = 8 ;
12426: LD_ADDR_EXP 29
12430: PUSH
12431: LD_INT 8
12433: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12434: LD_ADDR_EXP 30
12438: PUSH
12439: LD_INT 10
12441: ST_TO_ADDR
// end else
12442: GO 12684
// if Difficulty = 2 then
12444: LD_OWVAR 67
12448: PUSH
12449: LD_INT 2
12451: EQUAL
12452: IFFALSE 12548
// begin RuSolMinLevel = 9 ;
12454: LD_ADDR_EXP 29
12458: PUSH
12459: LD_INT 9
12461: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12462: LD_ADDR_EXP 30
12466: PUSH
12467: LD_INT 10
12469: ST_TO_ADDR
// uc_nation = 3 ;
12470: LD_ADDR_OWVAR 21
12474: PUSH
12475: LD_INT 3
12477: ST_TO_ADDR
// uc_side = 3 ;
12478: LD_ADDR_OWVAR 20
12482: PUSH
12483: LD_INT 3
12485: ST_TO_ADDR
// bc_level = 10 ;
12486: LD_ADDR_OWVAR 43
12490: PUSH
12491: LD_INT 10
12493: ST_TO_ADDR
// bc_type = b_turret ;
12494: LD_ADDR_OWVAR 42
12498: PUSH
12499: LD_INT 33
12501: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12502: LD_ADDR_VAR 0 2
12506: PUSH
12507: LD_INT 86
12509: PPUSH
12510: LD_INT 34
12512: PPUSH
12513: LD_INT 2
12515: PPUSH
12516: CALL_OW 47
12520: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12521: LD_VAR 0 2
12525: PPUSH
12526: LD_INT 49
12528: PPUSH
12529: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12533: LD_INT 64
12535: PPUSH
12536: LD_INT 3
12538: PPUSH
12539: LD_INT 1
12541: PPUSH
12542: CALL_OW 322
// end else
12546: GO 12684
// begin RuSolMinLevel = 10 ;
12548: LD_ADDR_EXP 29
12552: PUSH
12553: LD_INT 10
12555: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12556: LD_ADDR_EXP 30
12560: PUSH
12561: LD_INT 10
12563: ST_TO_ADDR
// uc_nation = 3 ;
12564: LD_ADDR_OWVAR 21
12568: PUSH
12569: LD_INT 3
12571: ST_TO_ADDR
// uc_side = 3 ;
12572: LD_ADDR_OWVAR 20
12576: PUSH
12577: LD_INT 3
12579: ST_TO_ADDR
// bc_level = 10 ;
12580: LD_ADDR_OWVAR 43
12584: PUSH
12585: LD_INT 10
12587: ST_TO_ADDR
// bc_type = b_turret ;
12588: LD_ADDR_OWVAR 42
12592: PUSH
12593: LD_INT 33
12595: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12596: LD_ADDR_VAR 0 2
12600: PUSH
12601: LD_INT 86
12603: PPUSH
12604: LD_INT 34
12606: PPUSH
12607: LD_INT 2
12609: PPUSH
12610: CALL_OW 47
12614: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12615: LD_VAR 0 2
12619: PPUSH
12620: LD_INT 49
12622: PPUSH
12623: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12627: LD_ADDR_VAR 0 2
12631: PUSH
12632: LD_INT 93
12634: PPUSH
12635: LD_INT 31
12637: PPUSH
12638: LD_INT 2
12640: PPUSH
12641: CALL_OW 47
12645: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12646: LD_VAR 0 2
12650: PPUSH
12651: LD_INT 49
12653: PPUSH
12654: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12658: LD_INT 64
12660: PPUSH
12661: LD_INT 3
12663: PPUSH
12664: LD_INT 1
12666: PPUSH
12667: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12671: LD_INT 65
12673: PPUSH
12674: LD_INT 3
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: CALL_OW 322
// end ; end ;
12684: LD_VAR 0 1
12688: RET
// export function ShowQuery1 ; begin
12689: LD_INT 0
12691: PPUSH
// result := Query ( Q1 ) ;
12692: LD_ADDR_VAR 0 1
12696: PUSH
12697: LD_STRING Q1
12699: PPUSH
12700: CALL_OW 97
12704: ST_TO_ADDR
// end ;
12705: LD_VAR 0 1
12709: RET
// export function ShowQuery2 ; begin
12710: LD_INT 0
12712: PPUSH
// result := Query ( Q1a ) ;
12713: LD_ADDR_VAR 0 1
12717: PUSH
12718: LD_STRING Q1a
12720: PPUSH
12721: CALL_OW 97
12725: ST_TO_ADDR
// end ;
12726: LD_VAR 0 1
12730: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12731: LD_INT 0
12733: PPUSH
12734: PPUSH
12735: PPUSH
12736: PPUSH
// for i = 1 to count do
12737: LD_ADDR_VAR 0 8
12741: PUSH
12742: DOUBLE
12743: LD_INT 1
12745: DEC
12746: ST_TO_ADDR
12747: LD_VAR 0 6
12751: PUSH
12752: FOR_TO
12753: IFFALSE 12834
// begin uc_side = side ;
12755: LD_ADDR_OWVAR 20
12759: PUSH
12760: LD_VAR 0 1
12764: ST_TO_ADDR
// uc_nation = nation ;
12765: LD_ADDR_OWVAR 21
12769: PUSH
12770: LD_VAR 0 2
12774: ST_TO_ADDR
// hc_gallery =  ;
12775: LD_ADDR_OWVAR 33
12779: PUSH
12780: LD_STRING 
12782: ST_TO_ADDR
// hc_name =  ;
12783: LD_ADDR_OWVAR 26
12787: PUSH
12788: LD_STRING 
12790: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12791: LD_INT 0
12793: PPUSH
12794: LD_VAR 0 5
12798: PPUSH
12799: LD_VAR 0 4
12803: PPUSH
12804: CALL_OW 380
// un = CreateHuman ;
12808: LD_ADDR_VAR 0 10
12812: PUSH
12813: CALL_OW 44
12817: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12818: LD_VAR 0 10
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: CALL_OW 52
// end ;
12832: GO 12752
12834: POP
12835: POP
// end ;
12836: LD_VAR 0 7
12840: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12841: LD_INT 0
12843: PPUSH
12844: PPUSH
12845: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12846: LD_ADDR_VAR 0 6
12850: PUSH
12851: LD_INT 48
12853: PUSH
12854: LD_INT 49
12856: PUSH
12857: LD_INT 50
12859: PUSH
12860: LD_INT 20
12862: PUSH
12863: LD_INT 1
12865: PUSH
12866: LD_INT 51
12868: PUSH
12869: LD_INT 52
12871: PUSH
12872: LD_INT 69
12874: PUSH
12875: LD_INT 39
12877: PUSH
12878: LD_INT 34
12880: PUSH
12881: LD_INT 40
12883: PUSH
12884: LD_INT 53
12886: PUSH
12887: LD_INT 71
12889: PUSH
12890: LD_INT 57
12892: PUSH
12893: LD_INT 58
12895: PUSH
12896: LD_INT 44
12898: PUSH
12899: LD_INT 32
12901: PUSH
12902: LD_INT 27
12904: PUSH
12905: LD_INT 23
12907: PUSH
12908: LD_INT 33
12910: PUSH
12911: LD_INT 59
12913: PUSH
12914: LD_INT 54
12916: PUSH
12917: LD_INT 55
12919: PUSH
12920: LD_INT 56
12922: PUSH
12923: LD_INT 63
12925: PUSH
12926: LD_INT 64
12928: PUSH
12929: LD_INT 65
12931: PUSH
12932: LD_INT 30
12934: PUSH
12935: LD_INT 31
12937: PUSH
12938: LD_INT 21
12940: PUSH
12941: LD_INT 22
12943: PUSH
12944: LD_INT 25
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: ST_TO_ADDR
// for i := 1 to list do
12981: LD_ADDR_VAR 0 5
12985: PUSH
12986: DOUBLE
12987: LD_INT 1
12989: DEC
12990: ST_TO_ADDR
12991: LD_VAR 0 6
12995: PUSH
12996: FOR_TO
12997: IFFALSE 13069
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
12999: LD_VAR 0 6
13003: PUSH
13004: LD_VAR 0 5
13008: ARRAY
13009: PPUSH
13010: LD_VAR 0 1
13014: PPUSH
13015: CALL_OW 321
13019: PUSH
13020: LD_INT 1
13022: EQUAL
13023: PUSH
13024: LD_VAR 0 6
13028: PUSH
13029: LD_VAR 0 5
13033: ARRAY
13034: PPUSH
13035: LD_VAR 0 3
13039: PPUSH
13040: CALL_OW 482
13044: AND
13045: IFFALSE 13067
// AddComResearch ( lab , list [ i ] ) ;
13047: LD_VAR 0 2
13051: PPUSH
13052: LD_VAR 0 6
13056: PUSH
13057: LD_VAR 0 5
13061: ARRAY
13062: PPUSH
13063: CALL_OW 184
13067: GO 12996
13069: POP
13070: POP
// end ;
13071: LD_VAR 0 4
13075: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13076: LD_INT 0
13078: PPUSH
13079: PPUSH
13080: PPUSH
13081: PPUSH
13082: PPUSH
13083: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13084: LD_ADDR_VAR 0 8
13088: PUSH
13089: LD_VAR 0 2
13093: PPUSH
13094: CALL_OW 313
13098: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13099: LD_ADDR_VAR 0 9
13103: PUSH
13104: LD_VAR 0 3
13108: PPUSH
13109: LD_INT 22
13111: PUSH
13112: LD_VAR 0 1
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 25
13123: PUSH
13124: LD_INT 2
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 24
13133: PUSH
13134: LD_INT 750
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 3
13143: PUSH
13144: LD_INT 54
13146: PUSH
13147: EMPTY
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PPUSH
13160: CALL_OW 70
13164: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13165: LD_ADDR_VAR 0 6
13169: PUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: LD_INT 22
13177: PUSH
13178: LD_VAR 0 1
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 21
13189: PUSH
13190: LD_INT 3
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 3
13199: PUSH
13200: LD_INT 24
13202: PUSH
13203: LD_INT 1000
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: PPUSH
13222: CALL_OW 70
13226: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13227: LD_VAR 0 6
13231: NOT
13232: PUSH
13233: LD_INT 22
13235: PUSH
13236: LD_VAR 0 1
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 2
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 24
13257: PUSH
13258: LD_INT 250
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: LIST
13269: PPUSH
13270: CALL_OW 69
13274: NOT
13275: AND
13276: IFFALSE 13280
// exit ;
13278: GO 13438
// if buildingsList and engineerOkInside then
13280: LD_VAR 0 6
13284: PUSH
13285: LD_VAR 0 8
13289: AND
13290: IFFALSE 13301
// ComExitBuilding ( engineerOkInside ) ;
13292: LD_VAR 0 8
13296: PPUSH
13297: CALL_OW 122
// if buildingsList and engineerOkOutside then
13301: LD_VAR 0 6
13305: PUSH
13306: LD_VAR 0 9
13310: AND
13311: IFFALSE 13331
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13313: LD_VAR 0 9
13317: PPUSH
13318: LD_VAR 0 6
13322: PUSH
13323: LD_INT 1
13325: ARRAY
13326: PPUSH
13327: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13331: LD_VAR 0 6
13335: PUSH
13336: LD_INT 0
13338: EQUAL
13339: PUSH
13340: LD_VAR 0 4
13344: PUSH
13345: LD_INT 0
13347: EQUAL
13348: AND
13349: PUSH
13350: LD_VAR 0 9
13354: AND
13355: IFFALSE 13371
// ComEnterUnit ( engineerOkOutside , depot ) ;
13357: LD_VAR 0 9
13361: PPUSH
13362: LD_VAR 0 2
13366: PPUSH
13367: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13371: LD_VAR 0 9
13375: PUSH
13376: LD_VAR 0 6
13380: PUSH
13381: LD_INT 0
13383: EQUAL
13384: AND
13385: PUSH
13386: LD_VAR 0 4
13390: AND
13391: IFFALSE 13438
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13393: LD_VAR 0 9
13397: PPUSH
13398: LD_VAR 0 4
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: LD_VAR 0 4
13411: PUSH
13412: LD_INT 2
13414: ARRAY
13415: PPUSH
13416: LD_VAR 0 4
13420: PUSH
13421: LD_INT 3
13423: ARRAY
13424: PPUSH
13425: LD_VAR 0 4
13429: PUSH
13430: LD_INT 4
13432: ARRAY
13433: PPUSH
13434: CALL_OW 145
// end ;
13438: LD_VAR 0 5
13442: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13443: LD_INT 0
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
13450: PPUSH
13451: PPUSH
13452: PPUSH
13453: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13454: LD_ADDR_VAR 0 6
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_VAR 0 1
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 25
13473: PUSH
13474: LD_INT 4
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 24
13483: PUSH
13484: LD_INT 251
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 69
13500: PUSH
13501: LD_EXP 27
13505: PUSH
13506: EMPTY
13507: LIST
13508: DIFF
13509: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13510: LD_ADDR_VAR 0 7
13514: PUSH
13515: LD_VAR 0 3
13519: PPUSH
13520: LD_INT 22
13522: PUSH
13523: LD_VAR 0 1
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 56
13534: PUSH
13535: EMPTY
13536: LIST
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 4
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 50
13550: PUSH
13551: EMPTY
13552: LIST
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 70
13564: PUSH
13565: LD_EXP 27
13569: PUSH
13570: EMPTY
13571: LIST
13572: DIFF
13573: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13574: LD_ADDR_VAR 0 10
13578: PUSH
13579: LD_VAR 0 3
13583: PPUSH
13584: LD_INT 22
13586: PUSH
13587: LD_VAR 0 1
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 21
13598: PUSH
13599: LD_INT 1
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 3
13608: PUSH
13609: LD_INT 24
13611: PUSH
13612: LD_INT 750
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: PPUSH
13628: CALL_OW 70
13632: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13633: LD_ADDR_VAR 0 11
13637: PUSH
13638: LD_VAR 0 2
13642: PPUSH
13643: LD_INT 22
13645: PUSH
13646: LD_VAR 0 1
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 21
13657: PUSH
13658: LD_INT 1
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 3
13667: PUSH
13668: LD_INT 24
13670: PUSH
13671: LD_INT 1000
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 70
13691: ST_TO_ADDR
// if damageUnits and sciList then
13692: LD_VAR 0 10
13696: PUSH
13697: LD_VAR 0 6
13701: AND
13702: IFFALSE 13718
// ComMoveToArea ( damageUnits , healArea ) ;
13704: LD_VAR 0 10
13708: PPUSH
13709: LD_VAR 0 2
13713: PPUSH
13714: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13718: LD_VAR 0 11
13722: PUSH
13723: LD_VAR 0 6
13727: AND
13728: PUSH
13729: LD_VAR 0 7
13733: PUSH
13734: LD_INT 0
13736: EQUAL
13737: AND
13738: IFFALSE 13784
// for i in buildings do
13740: LD_ADDR_VAR 0 8
13744: PUSH
13745: LD_VAR 0 4
13749: PUSH
13750: FOR_IN
13751: IFFALSE 13782
// begin if UnitsInside ( i ) then
13753: LD_VAR 0 8
13757: PPUSH
13758: CALL_OW 313
13762: IFFALSE 13780
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13764: LD_VAR 0 8
13768: PPUSH
13769: CALL_OW 313
13773: PPUSH
13774: CALL_OW 122
// break ;
13778: GO 13782
// end ; end ;
13780: GO 13750
13782: POP
13783: POP
// if unitsToHeal and sciListOutside then
13784: LD_VAR 0 11
13788: PUSH
13789: LD_VAR 0 7
13793: AND
13794: IFFALSE 13814
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13796: LD_VAR 0 7
13800: PPUSH
13801: LD_VAR 0 11
13805: PUSH
13806: LD_INT 1
13808: ARRAY
13809: PPUSH
13810: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13814: LD_VAR 0 10
13818: PUSH
13819: LD_INT 0
13821: EQUAL
13822: PUSH
13823: LD_VAR 0 11
13827: PUSH
13828: LD_INT 0
13830: EQUAL
13831: AND
13832: PUSH
13833: LD_VAR 0 7
13837: AND
13838: IFFALSE 13906
// begin tmp := buildings ;
13840: LD_ADDR_VAR 0 12
13844: PUSH
13845: LD_VAR 0 4
13849: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13850: LD_ADDR_VAR 0 13
13854: PUSH
13855: LD_INT 1
13857: PPUSH
13858: LD_VAR 0 12
13862: PPUSH
13863: CALL_OW 12
13867: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13868: LD_VAR 0 7
13872: PPUSH
13873: LD_INT 3
13875: PUSH
13876: LD_INT 60
13878: PUSH
13879: EMPTY
13880: LIST
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PPUSH
13886: CALL_OW 72
13890: PPUSH
13891: LD_VAR 0 12
13895: PUSH
13896: LD_VAR 0 13
13900: ARRAY
13901: PPUSH
13902: CALL_OW 120
// end ; end ;
13906: LD_VAR 0 5
13910: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13911: LD_INT 0
13913: PPUSH
13914: PPUSH
13915: PPUSH
13916: PPUSH
13917: PPUSH
13918: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13919: LD_ADDR_VAR 0 7
13923: PUSH
13924: LD_VAR 0 2
13928: PPUSH
13929: LD_INT 22
13931: PUSH
13932: LD_VAR 0 1
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 21
13943: PUSH
13944: LD_INT 2
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 34
13953: PUSH
13954: LD_INT 52
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: LIST
13965: PPUSH
13966: CALL_OW 70
13970: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13971: LD_ADDR_VAR 0 8
13975: PUSH
13976: LD_VAR 0 2
13980: PPUSH
13981: LD_INT 22
13983: PUSH
13984: LD_VAR 0 1
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 21
13995: PUSH
13996: LD_INT 3
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 3
14005: PUSH
14006: LD_INT 24
14008: PUSH
14009: LD_INT 1000
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: PPUSH
14028: CALL_OW 70
14032: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14033: LD_VAR 0 8
14037: PUSH
14038: LD_INT 0
14040: GREATER
14041: PUSH
14042: LD_VAR 0 7
14046: PPUSH
14047: LD_INT 24
14049: PUSH
14050: LD_INT 750
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PPUSH
14057: CALL_OW 72
14061: PUSH
14062: LD_INT 0
14064: GREATER
14065: AND
14066: IFFALSE 14086
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14068: LD_VAR 0 7
14072: PPUSH
14073: LD_VAR 0 8
14077: PUSH
14078: LD_INT 1
14080: ARRAY
14081: PPUSH
14082: CALL_OW 130
// end ;
14086: LD_VAR 0 3
14090: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14095: LD_INT 22
14097: PUSH
14098: LD_VAR 0 1
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 21
14109: PUSH
14110: LD_INT 2
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PPUSH
14121: CALL_OW 69
14125: PUSH
14126: LD_INT 18
14128: PPUSH
14129: LD_INT 22
14131: PUSH
14132: LD_VAR 0 1
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 21
14143: PUSH
14144: LD_INT 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PPUSH
14155: CALL_OW 70
14159: PUSH
14160: LD_VAR 0 3
14164: LESSEQUAL
14165: DIFF
14166: IFFALSE 14233
// for i := 1 to vehCount do
14168: LD_ADDR_VAR 0 9
14172: PUSH
14173: DOUBLE
14174: LD_INT 1
14176: DEC
14177: ST_TO_ADDR
14178: LD_VAR 0 3
14182: PUSH
14183: FOR_TO
14184: IFFALSE 14231
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14186: LD_VAR 0 2
14190: PPUSH
14191: LD_VAR 0 7
14195: PPUSH
14196: LD_VAR 0 5
14200: PPUSH
14201: LD_VAR 0 6
14205: PPUSH
14206: LD_VAR 0 4
14210: PUSH
14211: LD_INT 1
14213: PPUSH
14214: LD_VAR 0 4
14218: PPUSH
14219: CALL_OW 12
14223: ARRAY
14224: PPUSH
14225: CALL_OW 185
14229: GO 14183
14231: POP
14232: POP
// end ;
14233: LD_VAR 0 8
14237: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14238: LD_INT 0
14240: PPUSH
14241: PPUSH
14242: PPUSH
14243: PPUSH
14244: PPUSH
14245: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14246: LD_ADDR_VAR 0 6
14250: PUSH
14251: LD_INT 22
14253: PUSH
14254: LD_VAR 0 1
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 25
14265: PUSH
14266: LD_INT 9
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PPUSH
14277: CALL_OW 69
14281: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14282: LD_ADDR_VAR 0 7
14286: PUSH
14287: LD_INT 81
14289: PUSH
14290: LD_VAR 0 1
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 3
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PPUSH
14320: CALL_OW 69
14324: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14325: LD_ADDR_VAR 0 4
14329: PUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 3
14335: PPUSH
14336: CALL_OW 12
14340: ST_TO_ADDR
// for i := 1 to list do
14341: LD_ADDR_VAR 0 5
14345: PUSH
14346: DOUBLE
14347: LD_INT 1
14349: DEC
14350: ST_TO_ADDR
14351: LD_VAR 0 6
14355: PUSH
14356: FOR_TO
14357: IFFALSE 14559
// for ta in filter do
14359: LD_ADDR_VAR 0 3
14363: PUSH
14364: LD_VAR 0 7
14368: PUSH
14369: FOR_IN
14370: IFFALSE 14555
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14372: LD_VAR 0 6
14376: PUSH
14377: LD_VAR 0 5
14381: ARRAY
14382: PPUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: CALL_OW 296
14392: PUSH
14393: LD_INT 15
14395: LESSEQUAL
14396: IFFALSE 14553
// begin case c of 1 :
14398: LD_VAR 0 4
14402: PUSH
14403: LD_INT 1
14405: DOUBLE
14406: EQUAL
14407: IFTRUE 14411
14409: GO 14449
14411: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14412: LD_VAR 0 6
14416: PUSH
14417: LD_VAR 0 5
14421: ARRAY
14422: PPUSH
14423: LD_VAR 0 3
14427: PPUSH
14428: CALL_OW 250
14432: PPUSH
14433: LD_VAR 0 3
14437: PPUSH
14438: CALL_OW 251
14442: PPUSH
14443: CALL_OW 154
14447: GO 14553
14449: LD_INT 2
14451: DOUBLE
14452: EQUAL
14453: IFTRUE 14457
14455: GO 14521
14457: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14458: LD_VAR 0 6
14462: PUSH
14463: LD_VAR 0 5
14467: ARRAY
14468: PPUSH
14469: LD_VAR 0 3
14473: PPUSH
14474: CALL_OW 250
14478: PUSH
14479: LD_INT 1
14481: NEG
14482: PPUSH
14483: LD_INT 1
14485: PPUSH
14486: CALL_OW 12
14490: PLUS
14491: PPUSH
14492: LD_VAR 0 3
14496: PPUSH
14497: CALL_OW 251
14501: PUSH
14502: LD_INT 1
14504: NEG
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 12
14513: PLUS
14514: PPUSH
14515: CALL_OW 153
14519: GO 14553
14521: LD_INT 3
14523: DOUBLE
14524: EQUAL
14525: IFTRUE 14529
14527: GO 14552
14529: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14530: LD_VAR 0 6
14534: PUSH
14535: LD_VAR 0 5
14539: ARRAY
14540: PPUSH
14541: LD_VAR 0 3
14545: PPUSH
14546: CALL_OW 115
14550: GO 14553
14552: POP
// end ; end ;
14553: GO 14369
14555: POP
14556: POP
14557: GO 14356
14559: POP
14560: POP
// end ;
14561: LD_VAR 0 2
14565: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14566: LD_INT 0
14568: PPUSH
14569: PPUSH
14570: PPUSH
14571: PPUSH
// r := 100 ;
14572: LD_ADDR_VAR 0 5
14576: PUSH
14577: LD_INT 100
14579: ST_TO_ADDR
// x := 0 ;
14580: LD_ADDR_VAR 0 6
14584: PUSH
14585: LD_INT 0
14587: ST_TO_ADDR
// while ( x < n ) do
14588: LD_VAR 0 6
14592: PUSH
14593: LD_VAR 0 2
14597: LESS
14598: IFFALSE 14861
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14600: LD_ADDR_VAR 0 4
14604: PUSH
14605: DOUBLE
14606: LD_INT 1
14608: DEC
14609: ST_TO_ADDR
14610: LD_VAR 0 1
14614: PPUSH
14615: LD_INT 0
14617: PPUSH
14618: CALL_OW 517
14622: PUSH
14623: LD_INT 1
14625: ARRAY
14626: PUSH
14627: FOR_TO
14628: IFFALSE 14857
// begin if r > 50 then
14630: LD_VAR 0 5
14634: PUSH
14635: LD_INT 50
14637: GREATER
14638: IFFALSE 14841
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14640: LD_VAR 0 1
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 517
14652: PUSH
14653: LD_INT 1
14655: ARRAY
14656: PUSH
14657: LD_VAR 0 4
14661: ARRAY
14662: PPUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_INT 0
14670: PPUSH
14671: CALL_OW 517
14675: PUSH
14676: LD_INT 2
14678: ARRAY
14679: PUSH
14680: LD_VAR 0 4
14684: ARRAY
14685: PPUSH
14686: CALL_OW 458
14690: NOT
14691: IFFALSE 14839
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14693: LD_VAR 0 1
14697: PPUSH
14698: LD_INT 0
14700: PPUSH
14701: CALL_OW 517
14705: PUSH
14706: LD_INT 1
14708: ARRAY
14709: PUSH
14710: LD_VAR 0 4
14714: ARRAY
14715: PPUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: LD_INT 0
14723: PPUSH
14724: CALL_OW 517
14728: PUSH
14729: LD_INT 2
14731: ARRAY
14732: PUSH
14733: LD_VAR 0 4
14737: ARRAY
14738: PPUSH
14739: LD_INT 8
14741: PPUSH
14742: LD_INT 0
14744: PPUSH
14745: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14749: LD_ADDR_EXP 37
14753: PUSH
14754: LD_EXP 37
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: LD_VAR 0 1
14766: PPUSH
14767: LD_INT 0
14769: PPUSH
14770: CALL_OW 517
14774: PUSH
14775: LD_INT 1
14777: ARRAY
14778: PUSH
14779: LD_VAR 0 4
14783: ARRAY
14784: PUSH
14785: LD_VAR 0 1
14789: PPUSH
14790: LD_INT 0
14792: PPUSH
14793: CALL_OW 517
14797: PUSH
14798: LD_INT 2
14800: ARRAY
14801: PUSH
14802: LD_VAR 0 4
14806: ARRAY
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PPUSH
14812: CALL_OW 2
14816: ST_TO_ADDR
// r := 0 ;
14817: LD_ADDR_VAR 0 5
14821: PUSH
14822: LD_INT 0
14824: ST_TO_ADDR
// x := x + 1 ;
14825: LD_ADDR_VAR 0 6
14829: PUSH
14830: LD_VAR 0 6
14834: PUSH
14835: LD_INT 1
14837: PLUS
14838: ST_TO_ADDR
// end end else
14839: GO 14855
// r := r + 35 ;
14841: LD_ADDR_VAR 0 5
14845: PUSH
14846: LD_VAR 0 5
14850: PUSH
14851: LD_INT 35
14853: PLUS
14854: ST_TO_ADDR
// end end ;
14855: GO 14627
14857: POP
14858: POP
14859: GO 14588
14861: LD_VAR 0 3
14865: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14866: LD_INT 0
14868: PPUSH
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
// tmp := [ ] ;
14873: LD_ADDR_VAR 0 6
14877: PUSH
14878: EMPTY
14879: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14880: LD_ADDR_VAR 0 7
14884: PUSH
14885: LD_INT 22
14887: PUSH
14888: LD_VAR 0 1
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 30
14899: PUSH
14900: LD_INT 32
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PPUSH
14911: CALL_OW 69
14915: ST_TO_ADDR
// if bunkers then
14916: LD_VAR 0 7
14920: IFFALSE 14990
// for i in bunkers do
14922: LD_ADDR_VAR 0 4
14926: PUSH
14927: LD_VAR 0 7
14931: PUSH
14932: FOR_IN
14933: IFFALSE 14988
// for j in UnitsInside ( i ) do
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_VAR 0 4
14944: PPUSH
14945: CALL_OW 313
14949: PUSH
14950: FOR_IN
14951: IFFALSE 14984
// tmp := Replace ( tmp , tmp + 1 , j ) ;
14953: LD_ADDR_VAR 0 6
14957: PUSH
14958: LD_VAR 0 6
14962: PPUSH
14963: LD_VAR 0 6
14967: PUSH
14968: LD_INT 1
14970: PLUS
14971: PPUSH
14972: LD_VAR 0 5
14976: PPUSH
14977: CALL_OW 1
14981: ST_TO_ADDR
14982: GO 14950
14984: POP
14985: POP
14986: GO 14932
14988: POP
14989: POP
// if tmp then
14990: LD_VAR 0 6
14994: IFFALSE 15034
// begin ComExitBuilding ( tmp ) ;
14996: LD_VAR 0 6
15000: PPUSH
15001: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15005: LD_VAR 0 6
15009: PPUSH
15010: LD_VAR 0 2
15014: PPUSH
15015: CALL_OW 250
15019: PPUSH
15020: LD_VAR 0 2
15024: PPUSH
15025: CALL_OW 251
15029: PPUSH
15030: CALL_OW 174
// end ; end ;
15034: LD_VAR 0 3
15038: RET
// export function CreateNature ; var i , un ; begin
15039: LD_INT 0
15041: PPUSH
15042: PPUSH
15043: PPUSH
// uc_side := 0 ;
15044: LD_ADDR_OWVAR 20
15048: PUSH
15049: LD_INT 0
15051: ST_TO_ADDR
// uc_nation := 0 ;
15052: LD_ADDR_OWVAR 21
15056: PUSH
15057: LD_INT 0
15059: ST_TO_ADDR
// InitHc ;
15060: CALL_OW 19
// hc_class := class_fish ;
15064: LD_ADDR_OWVAR 28
15068: PUSH
15069: LD_INT 20
15071: ST_TO_ADDR
// for i := 1 to 6 do
15072: LD_ADDR_VAR 0 2
15076: PUSH
15077: DOUBLE
15078: LD_INT 1
15080: DEC
15081: ST_TO_ADDR
15082: LD_INT 6
15084: PUSH
15085: FOR_TO
15086: IFFALSE 15105
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15088: CALL_OW 44
15092: PPUSH
15093: LD_INT 22
15095: PPUSH
15096: LD_INT 0
15098: PPUSH
15099: CALL_OW 49
15103: GO 15085
15105: POP
15106: POP
// for i := 1 to Difficulty + 2 do
15107: LD_ADDR_VAR 0 2
15111: PUSH
15112: DOUBLE
15113: LD_INT 1
15115: DEC
15116: ST_TO_ADDR
15117: LD_OWVAR 67
15121: PUSH
15122: LD_INT 2
15124: PLUS
15125: PUSH
15126: FOR_TO
15127: IFFALSE 15236
// begin hc_sex := sex_male ;
15129: LD_ADDR_OWVAR 27
15133: PUSH
15134: LD_INT 1
15136: ST_TO_ADDR
// uc_side := 0 ;
15137: LD_ADDR_OWVAR 20
15141: PUSH
15142: LD_INT 0
15144: ST_TO_ADDR
// uc_nation := nation_nature ;
15145: LD_ADDR_OWVAR 21
15149: PUSH
15150: LD_INT 0
15152: ST_TO_ADDR
// hc_class := class_tiger ;
15153: LD_ADDR_OWVAR 28
15157: PUSH
15158: LD_INT 14
15160: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15161: LD_ADDR_OWVAR 31
15165: PUSH
15166: LD_EXP 30
15170: PUSH
15171: LD_INT 0
15173: PUSH
15174: LD_INT 0
15176: PUSH
15177: LD_INT 0
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15186: LD_ADDR_OWVAR 35
15190: PUSH
15191: LD_INT 5
15193: NEG
15194: PPUSH
15195: LD_INT 5
15197: PPUSH
15198: CALL_OW 12
15202: PUSH
15203: LD_OWVAR 67
15207: MUL
15208: ST_TO_ADDR
// un := CreateHuman ;
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: CALL_OW 44
15218: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15219: LD_VAR 0 3
15223: PPUSH
15224: LD_INT 23
15226: PPUSH
15227: LD_INT 0
15229: PPUSH
15230: CALL_OW 49
// end ;
15234: GO 15126
15236: POP
15237: POP
// for i := 1 to rand ( 3 , 4 ) do
15238: LD_ADDR_VAR 0 2
15242: PUSH
15243: DOUBLE
15244: LD_INT 1
15246: DEC
15247: ST_TO_ADDR
15248: LD_INT 3
15250: PPUSH
15251: LD_INT 4
15253: PPUSH
15254: CALL_OW 12
15258: PUSH
15259: FOR_TO
15260: IFFALSE 15352
// begin hc_sex := sex_male ;
15262: LD_ADDR_OWVAR 27
15266: PUSH
15267: LD_INT 1
15269: ST_TO_ADDR
// uc_side := 0 ;
15270: LD_ADDR_OWVAR 20
15274: PUSH
15275: LD_INT 0
15277: ST_TO_ADDR
// uc_nation := nation_nature ;
15278: LD_ADDR_OWVAR 21
15282: PUSH
15283: LD_INT 0
15285: ST_TO_ADDR
// hc_class := 18 ;
15286: LD_ADDR_OWVAR 28
15290: PUSH
15291: LD_INT 18
15293: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15294: LD_ADDR_OWVAR 31
15298: PUSH
15299: LD_INT 0
15301: PUSH
15302: LD_INT 0
15304: PUSH
15305: LD_INT 0
15307: PUSH
15308: LD_INT 0
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: ST_TO_ADDR
// hc_agressivity := 0 ;
15317: LD_ADDR_OWVAR 35
15321: PUSH
15322: LD_INT 0
15324: ST_TO_ADDR
// un := CreateHuman ;
15325: LD_ADDR_VAR 0 3
15329: PUSH
15330: CALL_OW 44
15334: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15335: LD_VAR 0 3
15339: PPUSH
15340: LD_INT 23
15342: PPUSH
15343: LD_INT 0
15345: PPUSH
15346: CALL_OW 49
// end ;
15350: GO 15259
15352: POP
15353: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15354: LD_ADDR_VAR 0 2
15358: PUSH
15359: DOUBLE
15360: LD_INT 1
15362: DEC
15363: ST_TO_ADDR
15364: LD_INT 4
15366: PUSH
15367: LD_INT 3
15369: PUSH
15370: LD_INT 3
15372: PUSH
15373: LD_INT 3
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: PUSH
15382: LD_OWVAR 67
15386: ARRAY
15387: PUSH
15388: FOR_TO
15389: IFFALSE 15498
// begin hc_sex := sex_male ;
15391: LD_ADDR_OWVAR 27
15395: PUSH
15396: LD_INT 1
15398: ST_TO_ADDR
// uc_side := 0 ;
15399: LD_ADDR_OWVAR 20
15403: PUSH
15404: LD_INT 0
15406: ST_TO_ADDR
// uc_nation := nation_nature ;
15407: LD_ADDR_OWVAR 21
15411: PUSH
15412: LD_INT 0
15414: ST_TO_ADDR
// hc_class := class_apeman ;
15415: LD_ADDR_OWVAR 28
15419: PUSH
15420: LD_INT 12
15422: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15423: LD_ADDR_OWVAR 31
15427: PUSH
15428: LD_INT 0
15430: PPUSH
15431: LD_INT 2
15433: PPUSH
15434: CALL_OW 12
15438: PUSH
15439: LD_INT 0
15441: PUSH
15442: LD_INT 0
15444: PUSH
15445: LD_INT 0
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15454: LD_ADDR_OWVAR 35
15458: PUSH
15459: LD_INT 10
15461: NEG
15462: PPUSH
15463: LD_INT 10
15465: PPUSH
15466: CALL_OW 12
15470: ST_TO_ADDR
// un := CreateHuman ;
15471: LD_ADDR_VAR 0 3
15475: PUSH
15476: CALL_OW 44
15480: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15481: LD_VAR 0 3
15485: PPUSH
15486: LD_INT 26
15488: PPUSH
15489: LD_INT 0
15491: PPUSH
15492: CALL_OW 49
// end ;
15496: GO 15388
15498: POP
15499: POP
// end ; end_of_file
15500: LD_VAR 0 1
15504: RET
// on UnitDestroyed ( unit ) do var i ;
15505: LD_INT 0
15507: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL 34798 0 1
// if unit = JMM then
15517: LD_VAR 0 1
15521: PUSH
15522: LD_EXP 1
15526: EQUAL
15527: IFFALSE 15536
// YouLost ( JMM ) ;
15529: LD_STRING JMM
15531: PPUSH
15532: CALL_OW 104
// if unit in russianTanks then
15536: LD_VAR 0 1
15540: PUSH
15541: LD_EXP 32
15545: IN
15546: IFFALSE 15564
// russianTanks := russianTanks diff unit ;
15548: LD_ADDR_EXP 32
15552: PUSH
15553: LD_EXP 32
15557: PUSH
15558: LD_VAR 0 1
15562: DIFF
15563: ST_TO_ADDR
// if unit in russianTimeLapsers then
15564: LD_VAR 0 1
15568: PUSH
15569: LD_EXP 33
15573: IN
15574: IFFALSE 15592
// russianTimeLapsers := russianTimeLapsers diff unit ;
15576: LD_ADDR_EXP 33
15580: PUSH
15581: LD_EXP 33
15585: PUSH
15586: LD_VAR 0 1
15590: DIFF
15591: ST_TO_ADDR
// if unit in RuScientists then
15592: LD_VAR 0 1
15596: PUSH
15597: LD_EXP 27
15601: IN
15602: IFFALSE 15634
// begin RuScientists := RuScientists diff unit ;
15604: LD_ADDR_EXP 27
15608: PUSH
15609: LD_EXP 27
15613: PUSH
15614: LD_VAR 0 1
15618: DIFF
15619: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15620: LD_ADDR_EXP 28
15624: PUSH
15625: LD_EXP 28
15629: PUSH
15630: LD_INT 1
15632: PLUS
15633: ST_TO_ADDR
// end ; end ;
15634: PPOPN 2
15636: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15637: LD_VAR 0 3
15641: PPUSH
15642: CALL_OW 264
15646: PUSH
15647: LD_INT 9
15649: EQUAL
15650: IFFALSE 15666
// laserCounterDestroy := laserCounterDestroy + 1 ;
15652: LD_ADDR_EXP 43
15656: PUSH
15657: LD_EXP 43
15661: PUSH
15662: LD_INT 1
15664: PLUS
15665: ST_TO_ADDR
// end ;
15666: PPOPN 3
15668: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15669: LD_VAR 0 2
15673: PUSH
15674: LD_INT 22
15676: PUSH
15677: LD_INT 6
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: IN
15689: IFFALSE 15744
// begin if GetType ( human ) = unit_vehicle then
15691: LD_VAR 0 2
15695: PPUSH
15696: CALL_OW 247
15700: PUSH
15701: LD_INT 2
15703: EQUAL
15704: IFFALSE 15721
// human := IsDrivenBy ( human ) ;
15706: LD_ADDR_VAR 0 2
15710: PUSH
15711: LD_VAR 0 2
15715: PPUSH
15716: CALL_OW 311
15720: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15721: LD_VAR 0 2
15725: PPUSH
15726: LD_VAR 0 2
15730: PPUSH
15731: CALL_OW 110
15735: PUSH
15736: LD_INT 10
15738: PLUS
15739: PPUSH
15740: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
15744: LD_VAR 0 2
15748: PPUSH
15749: CALL_OW 255
15753: PUSH
15754: LD_INT 1
15756: EQUAL
15757: PUSH
15758: LD_EXP 40
15762: PUSH
15763: LD_INT 0
15765: EQUAL
15766: AND
15767: IFFALSE 15879
// begin eventVar1 = 1 ;
15769: LD_ADDR_EXP 40
15773: PUSH
15774: LD_INT 1
15776: ST_TO_ADDR
// teleportExplored = 1 ;
15777: LD_ADDR_EXP 26
15781: PUSH
15782: LD_INT 1
15784: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15785: LD_STRING M2a
15787: PPUSH
15788: CALL_OW 337
// wait ( 0 0$2 ) ;
15792: LD_INT 70
15794: PPUSH
15795: CALL_OW 67
// DialogueOn ;
15799: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15803: LD_INT 22
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 21
15815: PUSH
15816: LD_INT 1
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PPUSH
15827: CALL_OW 69
15831: PPUSH
15832: LD_STRING DT3a-Sol1-1
15834: PPUSH
15835: LD_STRING DT3a-FSol1-1
15837: PPUSH
15838: CALL 12226 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15842: LD_EXP 1
15846: PPUSH
15847: LD_STRING DT3a-JMM-1
15849: PPUSH
15850: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15854: LD_VAR 0 2
15858: PPUSH
15859: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15863: LD_EXP 1
15867: PPUSH
15868: LD_STRING DT3a-JMM-1a
15870: PPUSH
15871: CALL_OW 88
// DialogueOff ;
15875: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15879: LD_VAR 0 1
15883: PUSH
15884: LD_INT 10
15886: EQUAL
15887: PUSH
15888: LD_VAR 0 2
15892: PPUSH
15893: CALL_OW 247
15897: PUSH
15898: LD_INT 2
15900: EQUAL
15901: AND
15902: PUSH
15903: LD_VAR 0 2
15907: PPUSH
15908: CALL_OW 255
15912: PUSH
15913: LD_INT 3
15915: EQUAL
15916: AND
15917: IFFALSE 15983
// begin if vehicleTeleported = 0 then
15919: LD_EXP 21
15923: PUSH
15924: LD_INT 0
15926: EQUAL
15927: IFFALSE 15944
// begin wait ( 0 0$03 ) ;
15929: LD_INT 105
15931: PPUSH
15932: CALL_OW 67
// vehicleTeleported := 1 ;
15936: LD_ADDR_EXP 21
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15944: LD_EXP 21
15948: PUSH
15949: LD_INT 2
15951: EQUAL
15952: IFFALSE 15969
// begin wait ( 0 0$03 ) ;
15954: LD_INT 105
15956: PPUSH
15957: CALL_OW 67
// vehicleTeleported := 3 ;
15961: LD_ADDR_EXP 21
15965: PUSH
15966: LD_INT 3
15968: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
15969: LD_ADDR_EXP 22
15973: PUSH
15974: LD_EXP 22
15978: PUSH
15979: LD_INT 1
15981: PLUS
15982: ST_TO_ADDR
// end ; end ;
15983: PPOPN 2
15985: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
15986: LD_VAR 0 1
15990: PPUSH
15991: LD_VAR 0 2
15995: PPUSH
15996: CALL 34918 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL_OW 264
16009: PUSH
16010: LD_INT 7
16012: EQUAL
16013: IFFALSE 16023
// rocketBuilded := true ;
16015: LD_ADDR_EXP 44
16019: PUSH
16020: LD_INT 1
16022: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 255
16032: PUSH
16033: LD_INT 3
16035: NONEQUAL
16036: IFFALSE 16040
// exit ;
16038: GO 16157
// if factory in [ ru_fact , rufab2 ] then
16040: LD_VAR 0 2
16044: PUSH
16045: LD_INT 21
16047: PUSH
16048: LD_INT 112
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: IN
16055: IFFALSE 16157
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 264
16066: PUSH
16067: LD_INT 49
16069: EQUAL
16070: IFFALSE 16106
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16072: LD_ADDR_EXP 33
16076: PUSH
16077: LD_EXP 33
16081: PPUSH
16082: LD_VAR 0 1
16086: PPUSH
16087: CALL 76555 0 2
16091: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16092: LD_VAR 0 1
16096: PPUSH
16097: LD_INT 137
16099: PPUSH
16100: CALL_OW 120
// end else
16104: GO 16157
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16106: LD_VAR 0 1
16110: PPUSH
16111: CALL_OW 264
16115: PUSH
16116: LD_INT 51
16118: PUSH
16119: LD_INT 89
16121: PUSH
16122: LD_INT 52
16124: PUSH
16125: LD_INT 53
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: IN
16134: NOT
16135: IFFALSE 16157
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16137: LD_ADDR_EXP 32
16141: PUSH
16142: LD_EXP 32
16146: PPUSH
16147: LD_VAR 0 1
16151: PPUSH
16152: CALL 76555 0 2
16156: ST_TO_ADDR
// end ; end ; end ;
16157: PPOPN 2
16159: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16160: LD_INT 0
16162: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16163: LD_VAR 0 2
16167: PPUSH
16168: CALL_OW 255
16172: PUSH
16173: LD_INT 3
16175: EQUAL
16176: PUSH
16177: LD_VAR 0 2
16181: PPUSH
16182: CALL_OW 257
16186: PUSH
16187: LD_INT 3
16189: EQUAL
16190: AND
16191: PUSH
16192: LD_INT 21
16194: PPUSH
16195: CALL_OW 255
16199: PUSH
16200: LD_INT 3
16202: EQUAL
16203: AND
16204: PUSH
16205: LD_INT 21
16207: PPUSH
16208: CALL_OW 302
16212: AND
16213: IFFALSE 16227
// ComEnterUnit ( human , ru_fact ) ;
16215: LD_VAR 0 2
16219: PPUSH
16220: LD_INT 21
16222: PPUSH
16223: CALL_OW 120
// end ;
16227: PPOPN 3
16229: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16230: LD_VAR 0 1
16234: PPUSH
16235: CALL 34902 0 1
// end ; end_of_file
16239: PPOPN 1
16241: END
// every 0 0$1 trigger ruAI = 1 do
16242: LD_EXP 34
16246: PUSH
16247: LD_INT 1
16249: EQUAL
16250: IFFALSE 16362
16252: GO 16254
16254: DISABLE
// begin enable ;
16255: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16256: LD_INT 3
16258: PPUSH
16259: LD_INT 6
16261: PPUSH
16262: LD_INT 9
16264: PPUSH
16265: LD_EXP 31
16269: PPUSH
16270: CALL 13076 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16274: LD_INT 3
16276: PPUSH
16277: LD_INT 4
16279: PPUSH
16280: LD_INT 10
16282: PPUSH
16283: LD_EXP 31
16287: PPUSH
16288: CALL 13076 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16292: LD_INT 3
16294: PPUSH
16295: LD_INT 9
16297: PPUSH
16298: CALL 13911 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16302: LD_INT 3
16304: PPUSH
16305: LD_INT 10
16307: PPUSH
16308: CALL 13911 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16312: LD_INT 3
16314: PPUSH
16315: LD_INT 16
16317: PPUSH
16318: LD_INT 9
16320: PPUSH
16321: LD_INT 91
16323: PPUSH
16324: CALL 13443 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16328: LD_INT 3
16330: PPUSH
16331: LD_INT 17
16333: PPUSH
16334: LD_INT 10
16336: PPUSH
16337: LD_INT 47
16339: PUSH
16340: LD_INT 129
16342: PUSH
16343: LD_INT 135
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: CALL 13443 0 4
// IntBazooka ( 3 ) ;
16355: LD_INT 3
16357: PPUSH
16358: CALL 14238 0 1
// end ;
16362: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
16363: LD_EXP 32
16367: PUSH
16368: LD_INT 3
16370: PUSH
16371: LD_INT 4
16373: PUSH
16374: LD_INT 5
16376: PUSH
16377: LD_INT 6
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: PUSH
16386: LD_OWVAR 67
16390: ARRAY
16391: GREATEREQUAL
16392: IFFALSE 16764
16394: GO 16396
16396: DISABLE
16397: LD_INT 0
16399: PPUSH
16400: PPUSH
16401: PPUSH
16402: PPUSH
// begin enable ;
16403: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16404: LD_ADDR_VAR 0 2
16408: PUSH
16409: LD_EXP 32
16413: PUSH
16414: LD_EXP 33
16418: UNION
16419: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16420: LD_ADDR_EXP 32
16424: PUSH
16425: LD_EXP 32
16429: PUSH
16430: LD_VAR 0 2
16434: DIFF
16435: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16436: LD_ADDR_EXP 33
16440: PUSH
16441: LD_EXP 33
16445: PUSH
16446: LD_VAR 0 2
16450: DIFF
16451: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16452: LD_EXP 21
16456: PUSH
16457: LD_INT 4
16459: GREATEREQUAL
16460: IFFALSE 16478
// attackTactic := rand ( 1 , 2 ) ;
16462: LD_ADDR_EXP 36
16466: PUSH
16467: LD_INT 1
16469: PPUSH
16470: LD_INT 2
16472: PPUSH
16473: CALL_OW 12
16477: ST_TO_ADDR
// path := [ [ 93 , 77 ] , [ 107 , 99 ] , [ 123 , 112 ] , [ 140 , 112 ] ] ;
16478: LD_ADDR_VAR 0 4
16482: PUSH
16483: LD_INT 93
16485: PUSH
16486: LD_INT 77
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: PUSH
16493: LD_INT 107
16495: PUSH
16496: LD_INT 99
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 123
16505: PUSH
16506: LD_INT 112
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PUSH
16513: LD_INT 140
16515: PUSH
16516: LD_INT 112
16518: PUSH
16519: EMPTY
16520: LIST
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: ST_TO_ADDR
// if attackTactic < 2 then
16529: LD_EXP 36
16533: PUSH
16534: LD_INT 2
16536: LESS
16537: IFFALSE 16568
// path := [ [ 131 , 136 ] , [ 140 , 112 ] ] ;
16539: LD_ADDR_VAR 0 4
16543: PUSH
16544: LD_INT 131
16546: PUSH
16547: LD_INT 136
16549: PUSH
16550: EMPTY
16551: LIST
16552: LIST
16553: PUSH
16554: LD_INT 140
16556: PUSH
16557: LD_INT 112
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16568: LD_INT 10
16570: PPUSH
16571: CALL_OW 302
16575: IFFALSE 16691
// begin for i in tmp do
16577: LD_ADDR_VAR 0 1
16581: PUSH
16582: LD_VAR 0 2
16586: PUSH
16587: FOR_IN
16588: IFFALSE 16631
// if attackTactic < 2 then
16590: LD_EXP 36
16594: PUSH
16595: LD_INT 2
16597: LESS
16598: IFFALSE 16614
// ComEnterUnit ( i , ruteleprt ) else
16600: LD_VAR 0 1
16604: PPUSH
16605: LD_INT 10
16607: PPUSH
16608: CALL_OW 120
16612: GO 16629
// ComMoveXY ( i , 88 , 69 ) ;
16614: LD_VAR 0 1
16618: PPUSH
16619: LD_INT 88
16621: PPUSH
16622: LD_INT 69
16624: PPUSH
16625: CALL_OW 111
16629: GO 16587
16631: POP
16632: POP
// p := 0 ;
16633: LD_ADDR_VAR 0 3
16637: PUSH
16638: LD_INT 0
16640: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16641: LD_INT 70
16643: PPUSH
16644: CALL_OW 67
// p := Inc ( p ) ;
16648: LD_ADDR_VAR 0 3
16652: PUSH
16653: LD_VAR 0 3
16657: PPUSH
16658: CALL 77916 0 1
16662: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 12 ;
16663: LD_VAR 0 2
16667: PPUSH
16668: LD_INT 60
16670: PUSH
16671: EMPTY
16672: LIST
16673: PPUSH
16674: CALL_OW 72
16678: NOT
16679: PUSH
16680: LD_VAR 0 3
16684: PUSH
16685: LD_INT 12
16687: GREATER
16688: OR
16689: IFFALSE 16641
// end ; repeat wait ( 0 0$1 ) ;
16691: LD_INT 35
16693: PPUSH
16694: CALL_OW 67
// for i in tmp do
16698: LD_ADDR_VAR 0 1
16702: PUSH
16703: LD_VAR 0 2
16707: PUSH
16708: FOR_IN
16709: IFFALSE 16741
// if not IsOk ( i ) then
16711: LD_VAR 0 1
16715: PPUSH
16716: CALL_OW 302
16720: NOT
16721: IFFALSE 16739
// tmp := tmp diff i ;
16723: LD_ADDR_VAR 0 2
16727: PUSH
16728: LD_VAR 0 2
16732: PUSH
16733: LD_VAR 0 1
16737: DIFF
16738: ST_TO_ADDR
16739: GO 16708
16741: POP
16742: POP
// AgressiveMove ( tmp , path ) ;
16743: LD_VAR 0 2
16747: PPUSH
16748: LD_VAR 0 4
16752: PPUSH
16753: CALL 79159 0 2
// until not tmp ;
16757: LD_VAR 0 2
16761: NOT
16762: IFFALSE 16691
// end ;
16764: PPOPN 4
16766: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16767: LD_INT 4
16769: PPUSH
16770: CALL_OW 303
16774: IFFALSE 16789
16776: GO 16778
16778: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16779: LD_INT 3
16781: PPUSH
16782: LD_INT 4
16784: PPUSH
16785: CALL 14866 0 2
16789: END
// every 0 0$1 do
16790: GO 16792
16792: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16793: LD_INT 3
16795: PPUSH
16796: LD_INT 91
16798: PPUSH
16799: LD_INT 3
16801: PPUSH
16802: CALL 12841 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16806: LD_INT 3
16808: PPUSH
16809: LD_INT 47
16811: PPUSH
16812: LD_INT 3
16814: PPUSH
16815: CALL 12841 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16819: LD_INT 3
16821: PPUSH
16822: LD_INT 129
16824: PPUSH
16825: LD_INT 3
16827: PPUSH
16828: CALL 12841 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16832: LD_INT 3
16834: PPUSH
16835: LD_INT 3
16837: PPUSH
16838: LD_INT 3
16840: PPUSH
16841: CALL 12841 0 3
// end ;
16845: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16846: LD_INT 22
16848: PUSH
16849: LD_INT 1
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: LD_INT 21
16858: PUSH
16859: LD_INT 3
16861: PUSH
16862: EMPTY
16863: LIST
16864: LIST
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PPUSH
16870: CALL_OW 69
16874: IFFALSE 16943
16876: GO 16878
16878: DISABLE
// begin wait ( 0 0$40 ) ;
16879: LD_INT 1400
16881: PPUSH
16882: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16886: LD_INT 3
16888: PPUSH
16889: LD_INT 21
16891: PPUSH
16892: LD_INT 3
16894: PUSH
16895: LD_INT 4
16897: PUSH
16898: LD_INT 5
16900: PUSH
16901: LD_INT 6
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: PUSH
16910: LD_OWVAR 67
16914: ARRAY
16915: PPUSH
16916: LD_INT 46
16918: PUSH
16919: LD_INT 45
16921: PUSH
16922: LD_INT 44
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: PPUSH
16930: LD_INT 3
16932: PPUSH
16933: LD_INT 3
16935: PPUSH
16936: LD_INT 24
16938: PPUSH
16939: CALL 14091 0 7
// end ;
16943: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16944: LD_EXP 20
16948: PUSH
16949: LD_INT 2
16951: EQUAL
16952: PUSH
16953: LD_INT 21
16955: PPUSH
16956: CALL_OW 255
16960: PUSH
16961: LD_INT 3
16963: EQUAL
16964: AND
16965: PUSH
16966: LD_INT 112
16968: PPUSH
16969: CALL_OW 255
16973: PUSH
16974: LD_INT 3
16976: EQUAL
16977: AND
16978: PUSH
16979: LD_INT 21
16981: PPUSH
16982: CALL_OW 302
16986: AND
16987: PUSH
16988: LD_INT 112
16990: PPUSH
16991: CALL_OW 302
16995: AND
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_INT 3
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: PUSH
17007: LD_INT 21
17009: PUSH
17010: LD_INT 2
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: PUSH
17017: LD_INT 50
17019: PUSH
17020: EMPTY
17021: LIST
17022: PUSH
17023: LD_INT 3
17025: PUSH
17026: LD_INT 58
17028: PUSH
17029: EMPTY
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: PPUSH
17042: CALL_OW 69
17046: PUSH
17047: LD_INT 18
17049: PPUSH
17050: LD_INT 22
17052: PUSH
17053: LD_INT 3
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PUSH
17060: LD_INT 21
17062: PUSH
17063: LD_INT 2
17065: PUSH
17066: EMPTY
17067: LIST
17068: LIST
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PPUSH
17074: CALL_OW 70
17078: PUSH
17079: LD_INT 0
17081: EQUAL
17082: DIFF
17083: AND
17084: IFFALSE 17210
17086: GO 17088
17088: DISABLE
// begin enable ;
17089: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17090: LD_INT 3
17092: PPUSH
17093: LD_INT 21
17095: PPUSH
17096: LD_INT 3
17098: PUSH
17099: LD_INT 4
17101: PUSH
17102: LD_INT 5
17104: PUSH
17105: LD_INT 6
17107: PUSH
17108: EMPTY
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: PUSH
17114: LD_OWVAR 67
17118: ARRAY
17119: PPUSH
17120: LD_INT 46
17122: PUSH
17123: LD_INT 45
17125: PUSH
17126: LD_INT 44
17128: PUSH
17129: EMPTY
17130: LIST
17131: LIST
17132: LIST
17133: PPUSH
17134: LD_INT 3
17136: PPUSH
17137: LD_INT 3
17139: PPUSH
17140: LD_INT 24
17142: PPUSH
17143: CALL 14091 0 7
// if russianTimeLapsers = 0 then
17147: LD_EXP 33
17151: PUSH
17152: LD_INT 0
17154: EQUAL
17155: IFFALSE 17210
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17157: LD_INT 3
17159: PPUSH
17160: LD_INT 112
17162: PPUSH
17163: LD_INT 1
17165: PUSH
17166: LD_INT 2
17168: PUSH
17169: LD_INT 2
17171: PUSH
17172: LD_INT 2
17174: PUSH
17175: EMPTY
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: PUSH
17181: LD_OWVAR 67
17185: ARRAY
17186: PPUSH
17187: LD_INT 49
17189: PUSH
17190: LD_INT 49
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PPUSH
17197: LD_INT 3
17199: PPUSH
17200: LD_INT 3
17202: PPUSH
17203: LD_INT 24
17205: PPUSH
17206: CALL 14091 0 7
// end ;
17210: END
// every 0 0$1 trigger arabianMines do var i ;
17211: LD_EXP 37
17215: IFFALSE 17336
17217: GO 17219
17219: DISABLE
17220: LD_INT 0
17222: PPUSH
// begin enable ;
17223: ENABLE
// for i in arabianMines do
17224: LD_ADDR_VAR 0 1
17228: PUSH
17229: LD_EXP 37
17233: PUSH
17234: FOR_IN
17235: IFFALSE 17334
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17237: LD_INT 22
17239: PUSH
17240: LD_INT 1
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 92
17249: PUSH
17250: LD_VAR 0 1
17254: PUSH
17255: LD_INT 1
17257: ARRAY
17258: PUSH
17259: LD_VAR 0 1
17263: PUSH
17264: LD_INT 2
17266: ARRAY
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: EMPTY
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PPUSH
17281: CALL_OW 69
17285: IFFALSE 17332
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17287: LD_VAR 0 1
17291: PUSH
17292: LD_INT 1
17294: ARRAY
17295: PPUSH
17296: LD_VAR 0 1
17300: PUSH
17301: LD_INT 2
17303: ARRAY
17304: PPUSH
17305: LD_INT 5
17307: PPUSH
17308: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17312: LD_ADDR_EXP 37
17316: PUSH
17317: LD_EXP 37
17321: PPUSH
17322: LD_VAR 0 1
17326: PPUSH
17327: CALL_OW 3
17331: ST_TO_ADDR
// end ; end ;
17332: GO 17234
17334: POP
17335: POP
// end ;
17336: PPOPN 1
17338: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17339: LD_EXP 21
17343: PUSH
17344: LD_INT 4
17346: GREATEREQUAL
17347: PUSH
17348: LD_EXP 22
17352: PUSH
17353: LD_INT 12
17355: MOD
17356: PUSH
17357: LD_INT 0
17359: EQUAL
17360: AND
17361: IFFALSE 17475
17363: GO 17365
17365: DISABLE
17366: LD_INT 0
17368: PPUSH
17369: PPUSH
// begin enable ;
17370: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17371: LD_ADDR_VAR 0 2
17375: PUSH
17376: LD_INT 122
17378: PUSH
17379: LD_INT 142
17381: PUSH
17382: EMPTY
17383: LIST
17384: LIST
17385: PUSH
17386: LD_INT 101
17388: PUSH
17389: LD_INT 127
17391: PUSH
17392: EMPTY
17393: LIST
17394: LIST
17395: PUSH
17396: LD_INT 104
17398: PUSH
17399: LD_INT 104
17401: PUSH
17402: EMPTY
17403: LIST
17404: LIST
17405: PUSH
17406: LD_INT 46
17408: PUSH
17409: LD_INT 81
17411: PUSH
17412: EMPTY
17413: LIST
17414: LIST
17415: PUSH
17416: EMPTY
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17422: LD_ADDR_VAR 0 1
17426: PUSH
17427: LD_INT 1
17429: PPUSH
17430: LD_INT 4
17432: PPUSH
17433: CALL_OW 12
17437: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17438: LD_INT 10
17440: PPUSH
17441: LD_VAR 0 2
17445: PUSH
17446: LD_VAR 0 1
17450: ARRAY
17451: PUSH
17452: LD_INT 1
17454: ARRAY
17455: PPUSH
17456: LD_VAR 0 2
17460: PUSH
17461: LD_VAR 0 1
17465: ARRAY
17466: PUSH
17467: LD_INT 2
17469: ARRAY
17470: PPUSH
17471: CALL_OW 243
// end ; end_of_file
17475: PPOPN 2
17477: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17478: LD_INT 3
17480: PPUSH
17481: CALL_OW 301
17485: IFFALSE 17706
17487: GO 17489
17489: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
17490: LD_EXP 27
17494: PPUSH
17495: LD_INT 50
17497: PUSH
17498: EMPTY
17499: LIST
17500: PPUSH
17501: CALL_OW 72
17505: IFFALSE 17514
// wait ( 0 0$10 ) ;
17507: LD_INT 350
17509: PPUSH
17510: CALL_OW 67
// DialogueOn ;
17514: CALL_OW 6
// if sciCounter = 0 then
17518: LD_EXP 28
17522: PUSH
17523: LD_INT 0
17525: EQUAL
17526: IFFALSE 17554
// begin Say ( JMM , D7a-JMM-1 ) ;
17528: LD_EXP 1
17532: PPUSH
17533: LD_STRING D7a-JMM-1
17535: PPUSH
17536: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17540: LD_EXP 15
17544: PPUSH
17545: LD_STRING D7a-Pow-1
17547: PPUSH
17548: CALL_OW 94
// end else
17552: GO 17698
// if sciCounter < 6 then
17554: LD_EXP 28
17558: PUSH
17559: LD_INT 6
17561: LESS
17562: IFFALSE 17590
// begin Say ( JMM , D7b-JMM-1 ) ;
17564: LD_EXP 1
17568: PPUSH
17569: LD_STRING D7b-JMM-1
17571: PPUSH
17572: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17576: LD_EXP 15
17580: PPUSH
17581: LD_STRING D7b-Pow-1
17583: PPUSH
17584: CALL_OW 94
// end else
17588: GO 17698
// begin Say ( JMM , D7c-JMM-1 ) ;
17590: LD_EXP 1
17594: PPUSH
17595: LD_STRING D7c-JMM-1
17597: PPUSH
17598: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17602: LD_EXP 15
17606: PPUSH
17607: LD_STRING D7c-Pow-1
17609: PPUSH
17610: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17614: LD_EXP 1
17618: PPUSH
17619: LD_STRING D7d-JMM-1
17621: PPUSH
17622: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17626: LD_EXP 15
17630: PPUSH
17631: LD_STRING D7d-Pow-1
17633: PPUSH
17634: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17638: LD_EXP 1
17642: PPUSH
17643: LD_STRING D7d-JMM-2
17645: PPUSH
17646: CALL_OW 88
// if askSiberite = 1 then
17650: LD_EXP 25
17654: PUSH
17655: LD_INT 1
17657: EQUAL
17658: IFFALSE 17674
// Say ( JMM , D7d-JMM-2a ) else
17660: LD_EXP 1
17664: PPUSH
17665: LD_STRING D7d-JMM-2a
17667: PPUSH
17668: CALL_OW 88
17672: GO 17686
// SayRadio ( Powell , D7d-Pow-2 ) ;
17674: LD_EXP 15
17678: PPUSH
17679: LD_STRING D7d-Pow-2
17681: PPUSH
17682: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17686: LD_EXP 15
17690: PPUSH
17691: LD_STRING D7d-Pow-2a
17693: PPUSH
17694: CALL_OW 94
// end ; DialogueOff ;
17698: CALL_OW 7
// FinishMission ;
17702: CALL 17707 0 0
// end ;
17706: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17707: LD_INT 0
17709: PPUSH
17710: PPUSH
17711: PPUSH
17712: PPUSH
// m1 := false ;
17713: LD_ADDR_VAR 0 2
17717: PUSH
17718: LD_INT 0
17720: ST_TO_ADDR
// m2 := false ;
17721: LD_ADDR_VAR 0 3
17725: PUSH
17726: LD_INT 0
17728: ST_TO_ADDR
// m3 := false ;
17729: LD_ADDR_VAR 0 4
17733: PUSH
17734: LD_INT 0
17736: ST_TO_ADDR
// if not westPathUsed then
17737: LD_EXP 42
17741: NOT
17742: IFFALSE 17751
// SetAchievement ( ACH_PATH ) ;
17744: LD_STRING ACH_PATH
17746: PPUSH
17747: CALL_OW 543
// if not rocketBuilded then
17751: LD_EXP 44
17755: NOT
17756: IFFALSE 17772
// begin wait ( 3 ) ;
17758: LD_INT 3
17760: PPUSH
17761: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17765: LD_STRING ACH_ROCKET
17767: PPUSH
17768: CALL_OW 543
// end ; if tick <= 40 40$00 then
17772: LD_OWVAR 1
17776: PUSH
17777: LD_INT 84000
17779: LESSEQUAL
17780: IFFALSE 17796
// begin wait ( 3 ) ;
17782: LD_INT 3
17784: PPUSH
17785: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17789: LD_STRING ACH_ASPEED_12
17791: PPUSH
17792: CALL_OW 543
// end ; if teleportExplored = 1 then
17796: LD_EXP 26
17800: PUSH
17801: LD_INT 1
17803: EQUAL
17804: IFFALSE 17826
// begin m1 := true ;
17806: LD_ADDR_VAR 0 2
17810: PUSH
17811: LD_INT 1
17813: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17814: LD_STRING Teleport
17816: PPUSH
17817: LD_INT 1
17819: PPUSH
17820: CALL_OW 101
// end else
17824: GO 17837
// AddMedal ( Teleport , - 1 ) ;
17826: LD_STRING Teleport
17828: PPUSH
17829: LD_INT 1
17831: NEG
17832: PPUSH
17833: CALL_OW 101
// if sciCounter > 2 then
17837: LD_EXP 28
17841: PUSH
17842: LD_INT 2
17844: GREATER
17845: IFFALSE 17867
// begin m2 := true ;
17847: LD_ADDR_VAR 0 3
17851: PUSH
17852: LD_INT 1
17854: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17855: LD_STRING Materials
17857: PPUSH
17858: LD_INT 1
17860: PPUSH
17861: CALL_OW 101
// end else
17865: GO 17878
// AddMedal ( Materials , - 1 ) ;
17867: LD_STRING Materials
17869: PPUSH
17870: LD_INT 1
17872: NEG
17873: PPUSH
17874: CALL_OW 101
// if sciCounter >= 6 then
17878: LD_EXP 28
17882: PUSH
17883: LD_INT 6
17885: GREATEREQUAL
17886: IFFALSE 17918
// begin m3 := true ;
17888: LD_ADDR_VAR 0 4
17892: PUSH
17893: LD_INT 1
17895: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17896: LD_STRING Scientists
17898: PPUSH
17899: LD_INT 1
17901: PPUSH
17902: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17906: LD_INT 1
17908: PPUSH
17909: LD_STRING 12_SciDed_1
17911: PPUSH
17912: CALL_OW 39
// end else
17916: GO 17939
// begin AddMedal ( Scientists , - 1 ) ;
17918: LD_STRING Scientists
17920: PPUSH
17921: LD_INT 1
17923: NEG
17924: PPUSH
17925: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17929: LD_INT 0
17931: PPUSH
17932: LD_STRING 12_SciDed_1
17934: PPUSH
17935: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17939: LD_EXP 24
17943: PPUSH
17944: LD_STRING 12_MainDepositFake_1
17946: PPUSH
17947: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
17951: LD_VAR 0 2
17955: PUSH
17956: LD_VAR 0 3
17960: AND
17961: PUSH
17962: LD_VAR 0 4
17966: AND
17967: PUSH
17968: LD_OWVAR 67
17972: PUSH
17973: LD_INT 3
17975: GREATEREQUAL
17976: AND
17977: IFFALSE 17989
// SetAchievementEX ( ACH_AMER , 12 ) ;
17979: LD_STRING ACH_AMER
17981: PPUSH
17982: LD_INT 12
17984: PPUSH
17985: CALL_OW 564
// GiveMedals ( MAIN ) ;
17989: LD_STRING MAIN
17991: PPUSH
17992: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
17996: LD_INT 22
17998: PUSH
17999: LD_INT 1
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: PUSH
18006: LD_INT 23
18008: PUSH
18009: LD_INT 1
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 21
18018: PUSH
18019: LD_INT 1
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: LD_INT 2
18028: PUSH
18029: LD_INT 25
18031: PUSH
18032: LD_INT 1
18034: PUSH
18035: EMPTY
18036: LIST
18037: LIST
18038: PUSH
18039: LD_INT 25
18041: PUSH
18042: LD_INT 2
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 25
18051: PUSH
18052: LD_INT 3
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: LD_INT 25
18061: PUSH
18062: LD_INT 4
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 25
18071: PUSH
18072: LD_INT 5
18074: PUSH
18075: EMPTY
18076: LIST
18077: LIST
18078: PUSH
18079: LD_INT 25
18081: PUSH
18082: LD_INT 8
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: PUSH
18089: EMPTY
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: PPUSH
18104: CALL_OW 69
18108: PPUSH
18109: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18113: LD_EXP 1
18117: PPUSH
18118: LD_EXP 39
18122: PUSH
18123: LD_STRING JMM
18125: STR
18126: PPUSH
18127: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18131: LD_EXP 7
18135: PPUSH
18136: LD_EXP 39
18140: PUSH
18141: LD_STRING Brown
18143: STR
18144: PPUSH
18145: CALL 12186 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18149: LD_EXP 3
18153: PPUSH
18154: LD_EXP 39
18158: PUSH
18159: LD_STRING Donaldson
18161: STR
18162: PPUSH
18163: CALL 12186 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18167: LD_EXP 4
18171: PPUSH
18172: LD_EXP 39
18176: PUSH
18177: LD_STRING Bobby
18179: STR
18180: PPUSH
18181: CALL 12186 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18185: LD_EXP 5
18189: PPUSH
18190: LD_EXP 39
18194: PUSH
18195: LD_STRING Cyrus
18197: STR
18198: PPUSH
18199: CALL 12186 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18203: LD_EXP 2
18207: PPUSH
18208: LD_EXP 39
18212: PUSH
18213: LD_STRING Lisa
18215: STR
18216: PPUSH
18217: CALL 12186 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18221: LD_EXP 12
18225: PPUSH
18226: LD_EXP 39
18230: PUSH
18231: LD_STRING Frank
18233: STR
18234: PPUSH
18235: CALL 12186 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18239: LD_EXP 13
18243: PPUSH
18244: LD_EXP 39
18248: PUSH
18249: LD_STRING Kikuchi
18251: STR
18252: PPUSH
18253: CALL 12186 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18257: LD_EXP 9
18261: PPUSH
18262: LD_EXP 39
18266: PUSH
18267: LD_STRING Houten
18269: STR
18270: PPUSH
18271: CALL 12186 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18275: LD_EXP 11
18279: PPUSH
18280: LD_EXP 39
18284: PUSH
18285: LD_STRING Gary
18287: STR
18288: PPUSH
18289: CALL 12186 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18293: LD_EXP 10
18297: PPUSH
18298: LD_EXP 39
18302: PUSH
18303: LD_STRING Cornell
18305: STR
18306: PPUSH
18307: CALL 12186 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18311: LD_EXP 6
18315: PPUSH
18316: LD_EXP 39
18320: PUSH
18321: LD_STRING Denis
18323: STR
18324: PPUSH
18325: CALL 12186 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18329: LD_EXP 8
18333: PPUSH
18334: LD_EXP 39
18338: PUSH
18339: LD_STRING Gladstone
18341: STR
18342: PPUSH
18343: CALL 12186 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18347: LD_INT 22
18349: PUSH
18350: LD_INT 1
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: LD_INT 23
18359: PUSH
18360: LD_INT 1
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 21
18369: PUSH
18370: LD_INT 1
18372: PUSH
18373: EMPTY
18374: LIST
18375: LIST
18376: PUSH
18377: LD_INT 2
18379: PUSH
18380: LD_INT 25
18382: PUSH
18383: LD_INT 1
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: LD_INT 25
18392: PUSH
18393: LD_INT 2
18395: PUSH
18396: EMPTY
18397: LIST
18398: LIST
18399: PUSH
18400: LD_INT 25
18402: PUSH
18403: LD_INT 3
18405: PUSH
18406: EMPTY
18407: LIST
18408: LIST
18409: PUSH
18410: LD_INT 25
18412: PUSH
18413: LD_INT 4
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 25
18422: PUSH
18423: LD_INT 5
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 25
18432: PUSH
18433: LD_INT 8
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 69
18459: PUSH
18460: LD_EXP 1
18464: PUSH
18465: LD_EXP 7
18469: PUSH
18470: LD_EXP 3
18474: PUSH
18475: LD_EXP 4
18479: PUSH
18480: LD_EXP 5
18484: PUSH
18485: LD_EXP 2
18489: PUSH
18490: LD_EXP 12
18494: PUSH
18495: LD_EXP 8
18499: PUSH
18500: LD_EXP 13
18504: PUSH
18505: LD_EXP 6
18509: PUSH
18510: LD_EXP 9
18514: PUSH
18515: LD_EXP 11
18519: PUSH
18520: LD_EXP 10
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: DIFF
18540: PPUSH
18541: LD_STRING 12_other_survivors
18543: PPUSH
18544: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18548: LD_INT 22
18550: PUSH
18551: LD_INT 1
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 23
18560: PUSH
18561: LD_INT 2
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: LD_INT 21
18570: PUSH
18571: LD_INT 1
18573: PUSH
18574: EMPTY
18575: LIST
18576: LIST
18577: PUSH
18578: LD_INT 2
18580: PUSH
18581: LD_INT 25
18583: PUSH
18584: LD_INT 1
18586: PUSH
18587: EMPTY
18588: LIST
18589: LIST
18590: PUSH
18591: LD_INT 25
18593: PUSH
18594: LD_INT 2
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: PUSH
18601: LD_INT 25
18603: PUSH
18604: LD_INT 3
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 25
18613: PUSH
18614: LD_INT 4
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 25
18623: PUSH
18624: LD_INT 5
18626: PUSH
18627: EMPTY
18628: LIST
18629: LIST
18630: PUSH
18631: LD_INT 25
18633: PUSH
18634: LD_INT 8
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: PPUSH
18656: CALL_OW 69
18660: PPUSH
18661: LD_STRING 12_kurt_squad
18663: PPUSH
18664: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18668: LD_EXP 14
18672: PPUSH
18673: LD_STRING 12_others
18675: PPUSH
18676: CALL_OW 38
// YouWin ;
18680: CALL_OW 103
// end ; end_of_file
18684: LD_VAR 0 1
18688: RET
// every 0 0$01 trigger ruAI do
18689: LD_EXP 34
18693: IFFALSE 19003
18695: GO 18697
18697: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18698: LD_INT 280
18700: PPUSH
18701: CALL_OW 67
// if cratesSpawned < 12 then
18705: LD_EXP 38
18709: PUSH
18710: LD_INT 12
18712: LESS
18713: IFFALSE 18765
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18715: LD_INT 105
18717: PPUSH
18718: LD_INT 350
18720: PPUSH
18721: CALL_OW 12
18725: PPUSH
18726: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18730: LD_INT 3
18732: PPUSH
18733: LD_INT 5
18735: PPUSH
18736: CALL_OW 12
18740: PPUSH
18741: LD_INT 21
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18751: LD_ADDR_EXP 38
18755: PUSH
18756: LD_EXP 38
18760: PUSH
18761: LD_INT 1
18763: PLUS
18764: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18765: LD_EXP 38
18769: PUSH
18770: LD_INT 12
18772: GREATEREQUAL
18773: PUSH
18774: LD_EXP 38
18778: PUSH
18779: LD_INT 32
18781: LESS
18782: AND
18783: IFFALSE 18835
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18785: LD_INT 420
18787: PPUSH
18788: LD_INT 700
18790: PPUSH
18791: CALL_OW 12
18795: PPUSH
18796: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18800: LD_INT 3
18802: PPUSH
18803: LD_INT 5
18805: PPUSH
18806: CALL_OW 12
18810: PPUSH
18811: LD_INT 21
18813: PPUSH
18814: LD_INT 1
18816: PPUSH
18817: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18821: LD_ADDR_EXP 38
18825: PUSH
18826: LD_EXP 38
18830: PUSH
18831: LD_INT 1
18833: PLUS
18834: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18835: LD_EXP 38
18839: PUSH
18840: LD_INT 32
18842: GREATEREQUAL
18843: IFFALSE 18917
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18845: LD_INT 21
18847: PPUSH
18848: CALL_OW 435
18852: PUSH
18853: LD_INT 14
18855: LESS
18856: IFFALSE 18867
// wait ( 0 0$10 ) else
18858: LD_INT 350
18860: PPUSH
18861: CALL_OW 67
18865: GO 18882
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18867: LD_INT 1750
18869: PPUSH
18870: LD_INT 3150
18872: PPUSH
18873: CALL_OW 12
18877: PPUSH
18878: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18882: LD_INT 2
18884: PPUSH
18885: LD_INT 5
18887: PPUSH
18888: CALL_OW 12
18892: PPUSH
18893: LD_INT 21
18895: PPUSH
18896: LD_INT 1
18898: PPUSH
18899: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18903: LD_ADDR_EXP 38
18907: PUSH
18908: LD_EXP 38
18912: PUSH
18913: LD_INT 1
18915: PLUS
18916: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18917: LD_EXP 38
18921: PUSH
18922: LD_INT 110
18924: GREATEREQUAL
18925: IFFALSE 18999
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18927: LD_INT 21
18929: PPUSH
18930: CALL_OW 435
18934: PUSH
18935: LD_INT 14
18937: LESS
18938: IFFALSE 18949
// wait ( 0 0$20 ) else
18940: LD_INT 700
18942: PPUSH
18943: CALL_OW 67
18947: GO 18964
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18949: LD_INT 2450
18951: PPUSH
18952: LD_INT 3850
18954: PPUSH
18955: CALL_OW 12
18959: PPUSH
18960: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
18964: LD_INT 1
18966: PPUSH
18967: LD_INT 5
18969: PPUSH
18970: CALL_OW 12
18974: PPUSH
18975: LD_INT 21
18977: PPUSH
18978: LD_INT 1
18980: PPUSH
18981: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18985: LD_ADDR_EXP 38
18989: PUSH
18990: LD_EXP 38
18994: PUSH
18995: LD_INT 1
18997: PLUS
18998: ST_TO_ADDR
// end ; until false ;
18999: LD_INT 0
19001: IFFALSE 18698
// end ; end_of_file end_of_file
19003: END
// export globalGameSaveCounter ; every 0 0$1 do
19004: GO 19006
19006: DISABLE
// begin enable ;
19007: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19008: LD_STRING updateTimer(
19010: PUSH
19011: LD_OWVAR 1
19015: STR
19016: PUSH
19017: LD_STRING );
19019: STR
19020: PPUSH
19021: CALL_OW 559
// end ;
19025: END
// every 0 0$1 do
19026: GO 19028
19028: DISABLE
// begin globalGameSaveCounter := 0 ;
19029: LD_ADDR_EXP 45
19033: PUSH
19034: LD_INT 0
19036: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19037: LD_STRING setGameSaveCounter(0)
19039: PPUSH
19040: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19044: LD_STRING initStreamRollete();
19046: PPUSH
19047: CALL_OW 559
// InitStreamMode ;
19051: CALL 20377 0 0
// DefineStreamItems ( false ) ;
19055: LD_INT 0
19057: PPUSH
19058: CALL 20841 0 1
// end ;
19062: END
// export function SOS_MapStart ( ) ; begin
19063: LD_INT 0
19065: PPUSH
// if streamModeActive then
19066: LD_EXP 46
19070: IFFALSE 19079
// DefineStreamItems ( true ) ;
19072: LD_INT 1
19074: PPUSH
19075: CALL 20841 0 1
// UpdateLuaVariables ( ) ;
19079: CALL 19096 0 0
// UpdateFactoryWaypoints ( ) ;
19083: CALL 33702 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19087: CALL 33959 0 0
// end ;
19091: LD_VAR 0 1
19095: RET
// function UpdateLuaVariables ( ) ; begin
19096: LD_INT 0
19098: PPUSH
// if globalGameSaveCounter then
19099: LD_EXP 45
19103: IFFALSE 19137
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19105: LD_ADDR_EXP 45
19109: PUSH
19110: LD_EXP 45
19114: PPUSH
19115: CALL 77916 0 1
19119: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19120: LD_STRING setGameSaveCounter(
19122: PUSH
19123: LD_EXP 45
19127: STR
19128: PUSH
19129: LD_STRING )
19131: STR
19132: PPUSH
19133: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19137: LD_STRING setGameDifficulty(
19139: PUSH
19140: LD_OWVAR 67
19144: STR
19145: PUSH
19146: LD_STRING )
19148: STR
19149: PPUSH
19150: CALL_OW 559
// end ;
19154: LD_VAR 0 1
19158: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19159: LD_INT 0
19161: PPUSH
// if p2 = stream_mode then
19162: LD_VAR 0 2
19166: PUSH
19167: LD_INT 100
19169: EQUAL
19170: IFFALSE 20173
// begin if not StreamModeActive then
19172: LD_EXP 46
19176: NOT
19177: IFFALSE 19187
// StreamModeActive := true ;
19179: LD_ADDR_EXP 46
19183: PUSH
19184: LD_INT 1
19186: ST_TO_ADDR
// if p3 = 0 then
19187: LD_VAR 0 3
19191: PUSH
19192: LD_INT 0
19194: EQUAL
19195: IFFALSE 19201
// InitStreamMode ;
19197: CALL 20377 0 0
// if p3 = 1 then
19201: LD_VAR 0 3
19205: PUSH
19206: LD_INT 1
19208: EQUAL
19209: IFFALSE 19219
// sRocket := true ;
19211: LD_ADDR_EXP 51
19215: PUSH
19216: LD_INT 1
19218: ST_TO_ADDR
// if p3 = 2 then
19219: LD_VAR 0 3
19223: PUSH
19224: LD_INT 2
19226: EQUAL
19227: IFFALSE 19237
// sSpeed := true ;
19229: LD_ADDR_EXP 50
19233: PUSH
19234: LD_INT 1
19236: ST_TO_ADDR
// if p3 = 3 then
19237: LD_VAR 0 3
19241: PUSH
19242: LD_INT 3
19244: EQUAL
19245: IFFALSE 19255
// sEngine := true ;
19247: LD_ADDR_EXP 52
19251: PUSH
19252: LD_INT 1
19254: ST_TO_ADDR
// if p3 = 4 then
19255: LD_VAR 0 3
19259: PUSH
19260: LD_INT 4
19262: EQUAL
19263: IFFALSE 19273
// sSpec := true ;
19265: LD_ADDR_EXP 49
19269: PUSH
19270: LD_INT 1
19272: ST_TO_ADDR
// if p3 = 5 then
19273: LD_VAR 0 3
19277: PUSH
19278: LD_INT 5
19280: EQUAL
19281: IFFALSE 19291
// sLevel := true ;
19283: LD_ADDR_EXP 53
19287: PUSH
19288: LD_INT 1
19290: ST_TO_ADDR
// if p3 = 6 then
19291: LD_VAR 0 3
19295: PUSH
19296: LD_INT 6
19298: EQUAL
19299: IFFALSE 19309
// sArmoury := true ;
19301: LD_ADDR_EXP 54
19305: PUSH
19306: LD_INT 1
19308: ST_TO_ADDR
// if p3 = 7 then
19309: LD_VAR 0 3
19313: PUSH
19314: LD_INT 7
19316: EQUAL
19317: IFFALSE 19327
// sRadar := true ;
19319: LD_ADDR_EXP 55
19323: PUSH
19324: LD_INT 1
19326: ST_TO_ADDR
// if p3 = 8 then
19327: LD_VAR 0 3
19331: PUSH
19332: LD_INT 8
19334: EQUAL
19335: IFFALSE 19345
// sBunker := true ;
19337: LD_ADDR_EXP 56
19341: PUSH
19342: LD_INT 1
19344: ST_TO_ADDR
// if p3 = 9 then
19345: LD_VAR 0 3
19349: PUSH
19350: LD_INT 9
19352: EQUAL
19353: IFFALSE 19363
// sHack := true ;
19355: LD_ADDR_EXP 57
19359: PUSH
19360: LD_INT 1
19362: ST_TO_ADDR
// if p3 = 10 then
19363: LD_VAR 0 3
19367: PUSH
19368: LD_INT 10
19370: EQUAL
19371: IFFALSE 19381
// sFire := true ;
19373: LD_ADDR_EXP 58
19377: PUSH
19378: LD_INT 1
19380: ST_TO_ADDR
// if p3 = 11 then
19381: LD_VAR 0 3
19385: PUSH
19386: LD_INT 11
19388: EQUAL
19389: IFFALSE 19399
// sRefresh := true ;
19391: LD_ADDR_EXP 59
19395: PUSH
19396: LD_INT 1
19398: ST_TO_ADDR
// if p3 = 12 then
19399: LD_VAR 0 3
19403: PUSH
19404: LD_INT 12
19406: EQUAL
19407: IFFALSE 19417
// sExp := true ;
19409: LD_ADDR_EXP 60
19413: PUSH
19414: LD_INT 1
19416: ST_TO_ADDR
// if p3 = 13 then
19417: LD_VAR 0 3
19421: PUSH
19422: LD_INT 13
19424: EQUAL
19425: IFFALSE 19435
// sDepot := true ;
19427: LD_ADDR_EXP 61
19431: PUSH
19432: LD_INT 1
19434: ST_TO_ADDR
// if p3 = 14 then
19435: LD_VAR 0 3
19439: PUSH
19440: LD_INT 14
19442: EQUAL
19443: IFFALSE 19453
// sFlag := true ;
19445: LD_ADDR_EXP 62
19449: PUSH
19450: LD_INT 1
19452: ST_TO_ADDR
// if p3 = 15 then
19453: LD_VAR 0 3
19457: PUSH
19458: LD_INT 15
19460: EQUAL
19461: IFFALSE 19471
// sKamikadze := true ;
19463: LD_ADDR_EXP 70
19467: PUSH
19468: LD_INT 1
19470: ST_TO_ADDR
// if p3 = 16 then
19471: LD_VAR 0 3
19475: PUSH
19476: LD_INT 16
19478: EQUAL
19479: IFFALSE 19489
// sTroll := true ;
19481: LD_ADDR_EXP 71
19485: PUSH
19486: LD_INT 1
19488: ST_TO_ADDR
// if p3 = 17 then
19489: LD_VAR 0 3
19493: PUSH
19494: LD_INT 17
19496: EQUAL
19497: IFFALSE 19507
// sSlow := true ;
19499: LD_ADDR_EXP 72
19503: PUSH
19504: LD_INT 1
19506: ST_TO_ADDR
// if p3 = 18 then
19507: LD_VAR 0 3
19511: PUSH
19512: LD_INT 18
19514: EQUAL
19515: IFFALSE 19525
// sLack := true ;
19517: LD_ADDR_EXP 73
19521: PUSH
19522: LD_INT 1
19524: ST_TO_ADDR
// if p3 = 19 then
19525: LD_VAR 0 3
19529: PUSH
19530: LD_INT 19
19532: EQUAL
19533: IFFALSE 19543
// sTank := true ;
19535: LD_ADDR_EXP 75
19539: PUSH
19540: LD_INT 1
19542: ST_TO_ADDR
// if p3 = 20 then
19543: LD_VAR 0 3
19547: PUSH
19548: LD_INT 20
19550: EQUAL
19551: IFFALSE 19561
// sRemote := true ;
19553: LD_ADDR_EXP 76
19557: PUSH
19558: LD_INT 1
19560: ST_TO_ADDR
// if p3 = 21 then
19561: LD_VAR 0 3
19565: PUSH
19566: LD_INT 21
19568: EQUAL
19569: IFFALSE 19579
// sPowell := true ;
19571: LD_ADDR_EXP 77
19575: PUSH
19576: LD_INT 1
19578: ST_TO_ADDR
// if p3 = 22 then
19579: LD_VAR 0 3
19583: PUSH
19584: LD_INT 22
19586: EQUAL
19587: IFFALSE 19597
// sTeleport := true ;
19589: LD_ADDR_EXP 80
19593: PUSH
19594: LD_INT 1
19596: ST_TO_ADDR
// if p3 = 23 then
19597: LD_VAR 0 3
19601: PUSH
19602: LD_INT 23
19604: EQUAL
19605: IFFALSE 19615
// sOilTower := true ;
19607: LD_ADDR_EXP 82
19611: PUSH
19612: LD_INT 1
19614: ST_TO_ADDR
// if p3 = 24 then
19615: LD_VAR 0 3
19619: PUSH
19620: LD_INT 24
19622: EQUAL
19623: IFFALSE 19633
// sShovel := true ;
19625: LD_ADDR_EXP 83
19629: PUSH
19630: LD_INT 1
19632: ST_TO_ADDR
// if p3 = 25 then
19633: LD_VAR 0 3
19637: PUSH
19638: LD_INT 25
19640: EQUAL
19641: IFFALSE 19651
// sSheik := true ;
19643: LD_ADDR_EXP 84
19647: PUSH
19648: LD_INT 1
19650: ST_TO_ADDR
// if p3 = 26 then
19651: LD_VAR 0 3
19655: PUSH
19656: LD_INT 26
19658: EQUAL
19659: IFFALSE 19669
// sEarthquake := true ;
19661: LD_ADDR_EXP 86
19665: PUSH
19666: LD_INT 1
19668: ST_TO_ADDR
// if p3 = 27 then
19669: LD_VAR 0 3
19673: PUSH
19674: LD_INT 27
19676: EQUAL
19677: IFFALSE 19687
// sAI := true ;
19679: LD_ADDR_EXP 87
19683: PUSH
19684: LD_INT 1
19686: ST_TO_ADDR
// if p3 = 28 then
19687: LD_VAR 0 3
19691: PUSH
19692: LD_INT 28
19694: EQUAL
19695: IFFALSE 19705
// sCargo := true ;
19697: LD_ADDR_EXP 90
19701: PUSH
19702: LD_INT 1
19704: ST_TO_ADDR
// if p3 = 29 then
19705: LD_VAR 0 3
19709: PUSH
19710: LD_INT 29
19712: EQUAL
19713: IFFALSE 19723
// sDLaser := true ;
19715: LD_ADDR_EXP 91
19719: PUSH
19720: LD_INT 1
19722: ST_TO_ADDR
// if p3 = 30 then
19723: LD_VAR 0 3
19727: PUSH
19728: LD_INT 30
19730: EQUAL
19731: IFFALSE 19741
// sExchange := true ;
19733: LD_ADDR_EXP 92
19737: PUSH
19738: LD_INT 1
19740: ST_TO_ADDR
// if p3 = 31 then
19741: LD_VAR 0 3
19745: PUSH
19746: LD_INT 31
19748: EQUAL
19749: IFFALSE 19759
// sFac := true ;
19751: LD_ADDR_EXP 93
19755: PUSH
19756: LD_INT 1
19758: ST_TO_ADDR
// if p3 = 32 then
19759: LD_VAR 0 3
19763: PUSH
19764: LD_INT 32
19766: EQUAL
19767: IFFALSE 19777
// sPower := true ;
19769: LD_ADDR_EXP 94
19773: PUSH
19774: LD_INT 1
19776: ST_TO_ADDR
// if p3 = 33 then
19777: LD_VAR 0 3
19781: PUSH
19782: LD_INT 33
19784: EQUAL
19785: IFFALSE 19795
// sRandom := true ;
19787: LD_ADDR_EXP 95
19791: PUSH
19792: LD_INT 1
19794: ST_TO_ADDR
// if p3 = 34 then
19795: LD_VAR 0 3
19799: PUSH
19800: LD_INT 34
19802: EQUAL
19803: IFFALSE 19813
// sShield := true ;
19805: LD_ADDR_EXP 96
19809: PUSH
19810: LD_INT 1
19812: ST_TO_ADDR
// if p3 = 35 then
19813: LD_VAR 0 3
19817: PUSH
19818: LD_INT 35
19820: EQUAL
19821: IFFALSE 19831
// sTime := true ;
19823: LD_ADDR_EXP 97
19827: PUSH
19828: LD_INT 1
19830: ST_TO_ADDR
// if p3 = 36 then
19831: LD_VAR 0 3
19835: PUSH
19836: LD_INT 36
19838: EQUAL
19839: IFFALSE 19849
// sTools := true ;
19841: LD_ADDR_EXP 98
19845: PUSH
19846: LD_INT 1
19848: ST_TO_ADDR
// if p3 = 101 then
19849: LD_VAR 0 3
19853: PUSH
19854: LD_INT 101
19856: EQUAL
19857: IFFALSE 19867
// sSold := true ;
19859: LD_ADDR_EXP 63
19863: PUSH
19864: LD_INT 1
19866: ST_TO_ADDR
// if p3 = 102 then
19867: LD_VAR 0 3
19871: PUSH
19872: LD_INT 102
19874: EQUAL
19875: IFFALSE 19885
// sDiff := true ;
19877: LD_ADDR_EXP 64
19881: PUSH
19882: LD_INT 1
19884: ST_TO_ADDR
// if p3 = 103 then
19885: LD_VAR 0 3
19889: PUSH
19890: LD_INT 103
19892: EQUAL
19893: IFFALSE 19903
// sFog := true ;
19895: LD_ADDR_EXP 67
19899: PUSH
19900: LD_INT 1
19902: ST_TO_ADDR
// if p3 = 104 then
19903: LD_VAR 0 3
19907: PUSH
19908: LD_INT 104
19910: EQUAL
19911: IFFALSE 19921
// sReset := true ;
19913: LD_ADDR_EXP 68
19917: PUSH
19918: LD_INT 1
19920: ST_TO_ADDR
// if p3 = 105 then
19921: LD_VAR 0 3
19925: PUSH
19926: LD_INT 105
19928: EQUAL
19929: IFFALSE 19939
// sSun := true ;
19931: LD_ADDR_EXP 69
19935: PUSH
19936: LD_INT 1
19938: ST_TO_ADDR
// if p3 = 106 then
19939: LD_VAR 0 3
19943: PUSH
19944: LD_INT 106
19946: EQUAL
19947: IFFALSE 19957
// sTiger := true ;
19949: LD_ADDR_EXP 65
19953: PUSH
19954: LD_INT 1
19956: ST_TO_ADDR
// if p3 = 107 then
19957: LD_VAR 0 3
19961: PUSH
19962: LD_INT 107
19964: EQUAL
19965: IFFALSE 19975
// sBomb := true ;
19967: LD_ADDR_EXP 66
19971: PUSH
19972: LD_INT 1
19974: ST_TO_ADDR
// if p3 = 108 then
19975: LD_VAR 0 3
19979: PUSH
19980: LD_INT 108
19982: EQUAL
19983: IFFALSE 19993
// sWound := true ;
19985: LD_ADDR_EXP 74
19989: PUSH
19990: LD_INT 1
19992: ST_TO_ADDR
// if p3 = 109 then
19993: LD_VAR 0 3
19997: PUSH
19998: LD_INT 109
20000: EQUAL
20001: IFFALSE 20011
// sBetray := true ;
20003: LD_ADDR_EXP 78
20007: PUSH
20008: LD_INT 1
20010: ST_TO_ADDR
// if p3 = 110 then
20011: LD_VAR 0 3
20015: PUSH
20016: LD_INT 110
20018: EQUAL
20019: IFFALSE 20029
// sContamin := true ;
20021: LD_ADDR_EXP 79
20025: PUSH
20026: LD_INT 1
20028: ST_TO_ADDR
// if p3 = 111 then
20029: LD_VAR 0 3
20033: PUSH
20034: LD_INT 111
20036: EQUAL
20037: IFFALSE 20047
// sOil := true ;
20039: LD_ADDR_EXP 81
20043: PUSH
20044: LD_INT 1
20046: ST_TO_ADDR
// if p3 = 112 then
20047: LD_VAR 0 3
20051: PUSH
20052: LD_INT 112
20054: EQUAL
20055: IFFALSE 20065
// sStu := true ;
20057: LD_ADDR_EXP 85
20061: PUSH
20062: LD_INT 1
20064: ST_TO_ADDR
// if p3 = 113 then
20065: LD_VAR 0 3
20069: PUSH
20070: LD_INT 113
20072: EQUAL
20073: IFFALSE 20083
// sBazooka := true ;
20075: LD_ADDR_EXP 88
20079: PUSH
20080: LD_INT 1
20082: ST_TO_ADDR
// if p3 = 114 then
20083: LD_VAR 0 3
20087: PUSH
20088: LD_INT 114
20090: EQUAL
20091: IFFALSE 20101
// sMortar := true ;
20093: LD_ADDR_EXP 89
20097: PUSH
20098: LD_INT 1
20100: ST_TO_ADDR
// if p3 = 115 then
20101: LD_VAR 0 3
20105: PUSH
20106: LD_INT 115
20108: EQUAL
20109: IFFALSE 20119
// sRanger := true ;
20111: LD_ADDR_EXP 99
20115: PUSH
20116: LD_INT 1
20118: ST_TO_ADDR
// if p3 = 116 then
20119: LD_VAR 0 3
20123: PUSH
20124: LD_INT 116
20126: EQUAL
20127: IFFALSE 20137
// sComputer := true ;
20129: LD_ADDR_EXP 100
20133: PUSH
20134: LD_INT 1
20136: ST_TO_ADDR
// if p3 = 117 then
20137: LD_VAR 0 3
20141: PUSH
20142: LD_INT 117
20144: EQUAL
20145: IFFALSE 20155
// s30 := true ;
20147: LD_ADDR_EXP 101
20151: PUSH
20152: LD_INT 1
20154: ST_TO_ADDR
// if p3 = 118 then
20155: LD_VAR 0 3
20159: PUSH
20160: LD_INT 118
20162: EQUAL
20163: IFFALSE 20173
// s60 := true ;
20165: LD_ADDR_EXP 102
20169: PUSH
20170: LD_INT 1
20172: ST_TO_ADDR
// end ; if p2 = hack_mode then
20173: LD_VAR 0 2
20177: PUSH
20178: LD_INT 101
20180: EQUAL
20181: IFFALSE 20309
// begin case p3 of 1 :
20183: LD_VAR 0 3
20187: PUSH
20188: LD_INT 1
20190: DOUBLE
20191: EQUAL
20192: IFTRUE 20196
20194: GO 20203
20196: POP
// hHackUnlimitedResources ; 2 :
20197: CALL 32448 0 0
20201: GO 20309
20203: LD_INT 2
20205: DOUBLE
20206: EQUAL
20207: IFTRUE 20211
20209: GO 20218
20211: POP
// hHackSetLevel10 ; 3 :
20212: CALL 32581 0 0
20216: GO 20309
20218: LD_INT 3
20220: DOUBLE
20221: EQUAL
20222: IFTRUE 20226
20224: GO 20233
20226: POP
// hHackSetLevel10YourUnits ; 4 :
20227: CALL 32666 0 0
20231: GO 20309
20233: LD_INT 4
20235: DOUBLE
20236: EQUAL
20237: IFTRUE 20241
20239: GO 20248
20241: POP
// hHackInvincible ; 5 :
20242: CALL 33114 0 0
20246: GO 20309
20248: LD_INT 5
20250: DOUBLE
20251: EQUAL
20252: IFTRUE 20256
20254: GO 20263
20256: POP
// hHackInvisible ; 6 :
20257: CALL 33225 0 0
20261: GO 20309
20263: LD_INT 6
20265: DOUBLE
20266: EQUAL
20267: IFTRUE 20271
20269: GO 20278
20271: POP
// hHackChangeYourSide ; 7 :
20272: CALL 33282 0 0
20276: GO 20309
20278: LD_INT 7
20280: DOUBLE
20281: EQUAL
20282: IFTRUE 20286
20284: GO 20293
20286: POP
// hHackChangeUnitSide ; 8 :
20287: CALL 33324 0 0
20291: GO 20309
20293: LD_INT 8
20295: DOUBLE
20296: EQUAL
20297: IFTRUE 20301
20299: GO 20308
20301: POP
// hHackFog ; end ;
20302: CALL 33425 0 0
20306: GO 20309
20308: POP
// end ; if p2 = game_save_mode then
20309: LD_VAR 0 2
20313: PUSH
20314: LD_INT 102
20316: EQUAL
20317: IFFALSE 20372
// begin if p3 = 1 then
20319: LD_VAR 0 3
20323: PUSH
20324: LD_INT 1
20326: EQUAL
20327: IFFALSE 20339
// globalGameSaveCounter := p4 ;
20329: LD_ADDR_EXP 45
20333: PUSH
20334: LD_VAR 0 4
20338: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20339: LD_VAR 0 3
20343: PUSH
20344: LD_INT 2
20346: EQUAL
20347: PUSH
20348: LD_EXP 45
20352: AND
20353: IFFALSE 20372
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20355: LD_STRING setGameSaveCounter(
20357: PUSH
20358: LD_EXP 45
20362: STR
20363: PUSH
20364: LD_STRING )
20366: STR
20367: PPUSH
20368: CALL_OW 559
// end ; end ;
20372: LD_VAR 0 7
20376: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20377: LD_INT 0
20379: PPUSH
// streamModeActive := false ;
20380: LD_ADDR_EXP 46
20384: PUSH
20385: LD_INT 0
20387: ST_TO_ADDR
// normalCounter := 36 ;
20388: LD_ADDR_EXP 47
20392: PUSH
20393: LD_INT 36
20395: ST_TO_ADDR
// hardcoreCounter := 18 ;
20396: LD_ADDR_EXP 48
20400: PUSH
20401: LD_INT 18
20403: ST_TO_ADDR
// sRocket := false ;
20404: LD_ADDR_EXP 51
20408: PUSH
20409: LD_INT 0
20411: ST_TO_ADDR
// sSpeed := false ;
20412: LD_ADDR_EXP 50
20416: PUSH
20417: LD_INT 0
20419: ST_TO_ADDR
// sEngine := false ;
20420: LD_ADDR_EXP 52
20424: PUSH
20425: LD_INT 0
20427: ST_TO_ADDR
// sSpec := false ;
20428: LD_ADDR_EXP 49
20432: PUSH
20433: LD_INT 0
20435: ST_TO_ADDR
// sLevel := false ;
20436: LD_ADDR_EXP 53
20440: PUSH
20441: LD_INT 0
20443: ST_TO_ADDR
// sArmoury := false ;
20444: LD_ADDR_EXP 54
20448: PUSH
20449: LD_INT 0
20451: ST_TO_ADDR
// sRadar := false ;
20452: LD_ADDR_EXP 55
20456: PUSH
20457: LD_INT 0
20459: ST_TO_ADDR
// sBunker := false ;
20460: LD_ADDR_EXP 56
20464: PUSH
20465: LD_INT 0
20467: ST_TO_ADDR
// sHack := false ;
20468: LD_ADDR_EXP 57
20472: PUSH
20473: LD_INT 0
20475: ST_TO_ADDR
// sFire := false ;
20476: LD_ADDR_EXP 58
20480: PUSH
20481: LD_INT 0
20483: ST_TO_ADDR
// sRefresh := false ;
20484: LD_ADDR_EXP 59
20488: PUSH
20489: LD_INT 0
20491: ST_TO_ADDR
// sExp := false ;
20492: LD_ADDR_EXP 60
20496: PUSH
20497: LD_INT 0
20499: ST_TO_ADDR
// sDepot := false ;
20500: LD_ADDR_EXP 61
20504: PUSH
20505: LD_INT 0
20507: ST_TO_ADDR
// sFlag := false ;
20508: LD_ADDR_EXP 62
20512: PUSH
20513: LD_INT 0
20515: ST_TO_ADDR
// sKamikadze := false ;
20516: LD_ADDR_EXP 70
20520: PUSH
20521: LD_INT 0
20523: ST_TO_ADDR
// sTroll := false ;
20524: LD_ADDR_EXP 71
20528: PUSH
20529: LD_INT 0
20531: ST_TO_ADDR
// sSlow := false ;
20532: LD_ADDR_EXP 72
20536: PUSH
20537: LD_INT 0
20539: ST_TO_ADDR
// sLack := false ;
20540: LD_ADDR_EXP 73
20544: PUSH
20545: LD_INT 0
20547: ST_TO_ADDR
// sTank := false ;
20548: LD_ADDR_EXP 75
20552: PUSH
20553: LD_INT 0
20555: ST_TO_ADDR
// sRemote := false ;
20556: LD_ADDR_EXP 76
20560: PUSH
20561: LD_INT 0
20563: ST_TO_ADDR
// sPowell := false ;
20564: LD_ADDR_EXP 77
20568: PUSH
20569: LD_INT 0
20571: ST_TO_ADDR
// sTeleport := false ;
20572: LD_ADDR_EXP 80
20576: PUSH
20577: LD_INT 0
20579: ST_TO_ADDR
// sOilTower := false ;
20580: LD_ADDR_EXP 82
20584: PUSH
20585: LD_INT 0
20587: ST_TO_ADDR
// sShovel := false ;
20588: LD_ADDR_EXP 83
20592: PUSH
20593: LD_INT 0
20595: ST_TO_ADDR
// sSheik := false ;
20596: LD_ADDR_EXP 84
20600: PUSH
20601: LD_INT 0
20603: ST_TO_ADDR
// sEarthquake := false ;
20604: LD_ADDR_EXP 86
20608: PUSH
20609: LD_INT 0
20611: ST_TO_ADDR
// sAI := false ;
20612: LD_ADDR_EXP 87
20616: PUSH
20617: LD_INT 0
20619: ST_TO_ADDR
// sCargo := false ;
20620: LD_ADDR_EXP 90
20624: PUSH
20625: LD_INT 0
20627: ST_TO_ADDR
// sDLaser := false ;
20628: LD_ADDR_EXP 91
20632: PUSH
20633: LD_INT 0
20635: ST_TO_ADDR
// sExchange := false ;
20636: LD_ADDR_EXP 92
20640: PUSH
20641: LD_INT 0
20643: ST_TO_ADDR
// sFac := false ;
20644: LD_ADDR_EXP 93
20648: PUSH
20649: LD_INT 0
20651: ST_TO_ADDR
// sPower := false ;
20652: LD_ADDR_EXP 94
20656: PUSH
20657: LD_INT 0
20659: ST_TO_ADDR
// sRandom := false ;
20660: LD_ADDR_EXP 95
20664: PUSH
20665: LD_INT 0
20667: ST_TO_ADDR
// sShield := false ;
20668: LD_ADDR_EXP 96
20672: PUSH
20673: LD_INT 0
20675: ST_TO_ADDR
// sTime := false ;
20676: LD_ADDR_EXP 97
20680: PUSH
20681: LD_INT 0
20683: ST_TO_ADDR
// sTools := false ;
20684: LD_ADDR_EXP 98
20688: PUSH
20689: LD_INT 0
20691: ST_TO_ADDR
// sSold := false ;
20692: LD_ADDR_EXP 63
20696: PUSH
20697: LD_INT 0
20699: ST_TO_ADDR
// sDiff := false ;
20700: LD_ADDR_EXP 64
20704: PUSH
20705: LD_INT 0
20707: ST_TO_ADDR
// sFog := false ;
20708: LD_ADDR_EXP 67
20712: PUSH
20713: LD_INT 0
20715: ST_TO_ADDR
// sReset := false ;
20716: LD_ADDR_EXP 68
20720: PUSH
20721: LD_INT 0
20723: ST_TO_ADDR
// sSun := false ;
20724: LD_ADDR_EXP 69
20728: PUSH
20729: LD_INT 0
20731: ST_TO_ADDR
// sTiger := false ;
20732: LD_ADDR_EXP 65
20736: PUSH
20737: LD_INT 0
20739: ST_TO_ADDR
// sBomb := false ;
20740: LD_ADDR_EXP 66
20744: PUSH
20745: LD_INT 0
20747: ST_TO_ADDR
// sWound := false ;
20748: LD_ADDR_EXP 74
20752: PUSH
20753: LD_INT 0
20755: ST_TO_ADDR
// sBetray := false ;
20756: LD_ADDR_EXP 78
20760: PUSH
20761: LD_INT 0
20763: ST_TO_ADDR
// sContamin := false ;
20764: LD_ADDR_EXP 79
20768: PUSH
20769: LD_INT 0
20771: ST_TO_ADDR
// sOil := false ;
20772: LD_ADDR_EXP 81
20776: PUSH
20777: LD_INT 0
20779: ST_TO_ADDR
// sStu := false ;
20780: LD_ADDR_EXP 85
20784: PUSH
20785: LD_INT 0
20787: ST_TO_ADDR
// sBazooka := false ;
20788: LD_ADDR_EXP 88
20792: PUSH
20793: LD_INT 0
20795: ST_TO_ADDR
// sMortar := false ;
20796: LD_ADDR_EXP 89
20800: PUSH
20801: LD_INT 0
20803: ST_TO_ADDR
// sRanger := false ;
20804: LD_ADDR_EXP 99
20808: PUSH
20809: LD_INT 0
20811: ST_TO_ADDR
// sComputer := false ;
20812: LD_ADDR_EXP 100
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// s30 := false ;
20820: LD_ADDR_EXP 101
20824: PUSH
20825: LD_INT 0
20827: ST_TO_ADDR
// s60 := false ;
20828: LD_ADDR_EXP 102
20832: PUSH
20833: LD_INT 0
20835: ST_TO_ADDR
// end ;
20836: LD_VAR 0 1
20840: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20841: LD_INT 0
20843: PPUSH
20844: PPUSH
20845: PPUSH
20846: PPUSH
20847: PPUSH
20848: PPUSH
20849: PPUSH
// result := [ ] ;
20850: LD_ADDR_VAR 0 2
20854: PUSH
20855: EMPTY
20856: ST_TO_ADDR
// if campaign_id = 1 then
20857: LD_OWVAR 69
20861: PUSH
20862: LD_INT 1
20864: EQUAL
20865: IFFALSE 24031
// begin case mission_number of 1 :
20867: LD_OWVAR 70
20871: PUSH
20872: LD_INT 1
20874: DOUBLE
20875: EQUAL
20876: IFTRUE 20880
20878: GO 20956
20880: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20881: LD_ADDR_VAR 0 2
20885: PUSH
20886: LD_INT 2
20888: PUSH
20889: LD_INT 4
20891: PUSH
20892: LD_INT 11
20894: PUSH
20895: LD_INT 12
20897: PUSH
20898: LD_INT 15
20900: PUSH
20901: LD_INT 16
20903: PUSH
20904: LD_INT 22
20906: PUSH
20907: LD_INT 23
20909: PUSH
20910: LD_INT 26
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: LIST
20917: LIST
20918: LIST
20919: LIST
20920: LIST
20921: LIST
20922: LIST
20923: PUSH
20924: LD_INT 101
20926: PUSH
20927: LD_INT 102
20929: PUSH
20930: LD_INT 106
20932: PUSH
20933: LD_INT 116
20935: PUSH
20936: LD_INT 117
20938: PUSH
20939: LD_INT 118
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: LIST
20946: LIST
20947: LIST
20948: LIST
20949: PUSH
20950: EMPTY
20951: LIST
20952: LIST
20953: ST_TO_ADDR
20954: GO 24029
20956: LD_INT 2
20958: DOUBLE
20959: EQUAL
20960: IFTRUE 20964
20962: GO 21048
20964: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20965: LD_ADDR_VAR 0 2
20969: PUSH
20970: LD_INT 2
20972: PUSH
20973: LD_INT 4
20975: PUSH
20976: LD_INT 11
20978: PUSH
20979: LD_INT 12
20981: PUSH
20982: LD_INT 15
20984: PUSH
20985: LD_INT 16
20987: PUSH
20988: LD_INT 22
20990: PUSH
20991: LD_INT 23
20993: PUSH
20994: LD_INT 26
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: PUSH
21008: LD_INT 101
21010: PUSH
21011: LD_INT 102
21013: PUSH
21014: LD_INT 105
21016: PUSH
21017: LD_INT 106
21019: PUSH
21020: LD_INT 108
21022: PUSH
21023: LD_INT 116
21025: PUSH
21026: LD_INT 117
21028: PUSH
21029: LD_INT 118
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: LIST
21039: LIST
21040: LIST
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: ST_TO_ADDR
21046: GO 24029
21048: LD_INT 3
21050: DOUBLE
21051: EQUAL
21052: IFTRUE 21056
21054: GO 21144
21056: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21057: LD_ADDR_VAR 0 2
21061: PUSH
21062: LD_INT 2
21064: PUSH
21065: LD_INT 4
21067: PUSH
21068: LD_INT 5
21070: PUSH
21071: LD_INT 11
21073: PUSH
21074: LD_INT 12
21076: PUSH
21077: LD_INT 15
21079: PUSH
21080: LD_INT 16
21082: PUSH
21083: LD_INT 22
21085: PUSH
21086: LD_INT 26
21088: PUSH
21089: LD_INT 36
21091: PUSH
21092: EMPTY
21093: LIST
21094: LIST
21095: LIST
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: PUSH
21104: LD_INT 101
21106: PUSH
21107: LD_INT 102
21109: PUSH
21110: LD_INT 105
21112: PUSH
21113: LD_INT 106
21115: PUSH
21116: LD_INT 108
21118: PUSH
21119: LD_INT 116
21121: PUSH
21122: LD_INT 117
21124: PUSH
21125: LD_INT 118
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: LIST
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: PUSH
21138: EMPTY
21139: LIST
21140: LIST
21141: ST_TO_ADDR
21142: GO 24029
21144: LD_INT 4
21146: DOUBLE
21147: EQUAL
21148: IFTRUE 21152
21150: GO 21248
21152: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21153: LD_ADDR_VAR 0 2
21157: PUSH
21158: LD_INT 2
21160: PUSH
21161: LD_INT 4
21163: PUSH
21164: LD_INT 5
21166: PUSH
21167: LD_INT 8
21169: PUSH
21170: LD_INT 11
21172: PUSH
21173: LD_INT 12
21175: PUSH
21176: LD_INT 15
21178: PUSH
21179: LD_INT 16
21181: PUSH
21182: LD_INT 22
21184: PUSH
21185: LD_INT 23
21187: PUSH
21188: LD_INT 26
21190: PUSH
21191: LD_INT 36
21193: PUSH
21194: EMPTY
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: PUSH
21208: LD_INT 101
21210: PUSH
21211: LD_INT 102
21213: PUSH
21214: LD_INT 105
21216: PUSH
21217: LD_INT 106
21219: PUSH
21220: LD_INT 108
21222: PUSH
21223: LD_INT 116
21225: PUSH
21226: LD_INT 117
21228: PUSH
21229: LD_INT 118
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: ST_TO_ADDR
21246: GO 24029
21248: LD_INT 5
21250: DOUBLE
21251: EQUAL
21252: IFTRUE 21256
21254: GO 21368
21256: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21257: LD_ADDR_VAR 0 2
21261: PUSH
21262: LD_INT 2
21264: PUSH
21265: LD_INT 4
21267: PUSH
21268: LD_INT 5
21270: PUSH
21271: LD_INT 6
21273: PUSH
21274: LD_INT 8
21276: PUSH
21277: LD_INT 11
21279: PUSH
21280: LD_INT 12
21282: PUSH
21283: LD_INT 15
21285: PUSH
21286: LD_INT 16
21288: PUSH
21289: LD_INT 22
21291: PUSH
21292: LD_INT 23
21294: PUSH
21295: LD_INT 25
21297: PUSH
21298: LD_INT 26
21300: PUSH
21301: LD_INT 36
21303: PUSH
21304: EMPTY
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: LIST
21316: LIST
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 101
21322: PUSH
21323: LD_INT 102
21325: PUSH
21326: LD_INT 105
21328: PUSH
21329: LD_INT 106
21331: PUSH
21332: LD_INT 108
21334: PUSH
21335: LD_INT 109
21337: PUSH
21338: LD_INT 112
21340: PUSH
21341: LD_INT 116
21343: PUSH
21344: LD_INT 117
21346: PUSH
21347: LD_INT 118
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: ST_TO_ADDR
21366: GO 24029
21368: LD_INT 6
21370: DOUBLE
21371: EQUAL
21372: IFTRUE 21376
21374: GO 21508
21376: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21377: LD_ADDR_VAR 0 2
21381: PUSH
21382: LD_INT 2
21384: PUSH
21385: LD_INT 4
21387: PUSH
21388: LD_INT 5
21390: PUSH
21391: LD_INT 6
21393: PUSH
21394: LD_INT 8
21396: PUSH
21397: LD_INT 11
21399: PUSH
21400: LD_INT 12
21402: PUSH
21403: LD_INT 15
21405: PUSH
21406: LD_INT 16
21408: PUSH
21409: LD_INT 20
21411: PUSH
21412: LD_INT 21
21414: PUSH
21415: LD_INT 22
21417: PUSH
21418: LD_INT 23
21420: PUSH
21421: LD_INT 25
21423: PUSH
21424: LD_INT 26
21426: PUSH
21427: LD_INT 30
21429: PUSH
21430: LD_INT 31
21432: PUSH
21433: LD_INT 32
21435: PUSH
21436: LD_INT 36
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: PUSH
21460: LD_INT 101
21462: PUSH
21463: LD_INT 102
21465: PUSH
21466: LD_INT 105
21468: PUSH
21469: LD_INT 106
21471: PUSH
21472: LD_INT 108
21474: PUSH
21475: LD_INT 109
21477: PUSH
21478: LD_INT 112
21480: PUSH
21481: LD_INT 116
21483: PUSH
21484: LD_INT 117
21486: PUSH
21487: LD_INT 118
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: LIST
21501: PUSH
21502: EMPTY
21503: LIST
21504: LIST
21505: ST_TO_ADDR
21506: GO 24029
21508: LD_INT 7
21510: DOUBLE
21511: EQUAL
21512: IFTRUE 21516
21514: GO 21628
21516: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21517: LD_ADDR_VAR 0 2
21521: PUSH
21522: LD_INT 2
21524: PUSH
21525: LD_INT 4
21527: PUSH
21528: LD_INT 5
21530: PUSH
21531: LD_INT 7
21533: PUSH
21534: LD_INT 11
21536: PUSH
21537: LD_INT 12
21539: PUSH
21540: LD_INT 15
21542: PUSH
21543: LD_INT 16
21545: PUSH
21546: LD_INT 20
21548: PUSH
21549: LD_INT 21
21551: PUSH
21552: LD_INT 22
21554: PUSH
21555: LD_INT 23
21557: PUSH
21558: LD_INT 25
21560: PUSH
21561: LD_INT 26
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: LIST
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: LIST
21577: LIST
21578: LIST
21579: PUSH
21580: LD_INT 101
21582: PUSH
21583: LD_INT 102
21585: PUSH
21586: LD_INT 103
21588: PUSH
21589: LD_INT 105
21591: PUSH
21592: LD_INT 106
21594: PUSH
21595: LD_INT 108
21597: PUSH
21598: LD_INT 112
21600: PUSH
21601: LD_INT 116
21603: PUSH
21604: LD_INT 117
21606: PUSH
21607: LD_INT 118
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: PUSH
21622: EMPTY
21623: LIST
21624: LIST
21625: ST_TO_ADDR
21626: GO 24029
21628: LD_INT 8
21630: DOUBLE
21631: EQUAL
21632: IFTRUE 21636
21634: GO 21776
21636: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21637: LD_ADDR_VAR 0 2
21641: PUSH
21642: LD_INT 2
21644: PUSH
21645: LD_INT 4
21647: PUSH
21648: LD_INT 5
21650: PUSH
21651: LD_INT 6
21653: PUSH
21654: LD_INT 7
21656: PUSH
21657: LD_INT 8
21659: PUSH
21660: LD_INT 11
21662: PUSH
21663: LD_INT 12
21665: PUSH
21666: LD_INT 15
21668: PUSH
21669: LD_INT 16
21671: PUSH
21672: LD_INT 20
21674: PUSH
21675: LD_INT 21
21677: PUSH
21678: LD_INT 22
21680: PUSH
21681: LD_INT 23
21683: PUSH
21684: LD_INT 25
21686: PUSH
21687: LD_INT 26
21689: PUSH
21690: LD_INT 30
21692: PUSH
21693: LD_INT 31
21695: PUSH
21696: LD_INT 32
21698: PUSH
21699: LD_INT 36
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: LIST
21706: LIST
21707: LIST
21708: LIST
21709: LIST
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: LIST
21715: LIST
21716: LIST
21717: LIST
21718: LIST
21719: LIST
21720: LIST
21721: LIST
21722: LIST
21723: PUSH
21724: LD_INT 101
21726: PUSH
21727: LD_INT 102
21729: PUSH
21730: LD_INT 103
21732: PUSH
21733: LD_INT 105
21735: PUSH
21736: LD_INT 106
21738: PUSH
21739: LD_INT 108
21741: PUSH
21742: LD_INT 109
21744: PUSH
21745: LD_INT 112
21747: PUSH
21748: LD_INT 116
21750: PUSH
21751: LD_INT 117
21753: PUSH
21754: LD_INT 118
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: ST_TO_ADDR
21774: GO 24029
21776: LD_INT 9
21778: DOUBLE
21779: EQUAL
21780: IFTRUE 21784
21782: GO 21932
21784: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21785: LD_ADDR_VAR 0 2
21789: PUSH
21790: LD_INT 2
21792: PUSH
21793: LD_INT 4
21795: PUSH
21796: LD_INT 5
21798: PUSH
21799: LD_INT 6
21801: PUSH
21802: LD_INT 7
21804: PUSH
21805: LD_INT 8
21807: PUSH
21808: LD_INT 11
21810: PUSH
21811: LD_INT 12
21813: PUSH
21814: LD_INT 15
21816: PUSH
21817: LD_INT 16
21819: PUSH
21820: LD_INT 20
21822: PUSH
21823: LD_INT 21
21825: PUSH
21826: LD_INT 22
21828: PUSH
21829: LD_INT 23
21831: PUSH
21832: LD_INT 25
21834: PUSH
21835: LD_INT 26
21837: PUSH
21838: LD_INT 28
21840: PUSH
21841: LD_INT 30
21843: PUSH
21844: LD_INT 31
21846: PUSH
21847: LD_INT 32
21849: PUSH
21850: LD_INT 36
21852: PUSH
21853: EMPTY
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: PUSH
21876: LD_INT 101
21878: PUSH
21879: LD_INT 102
21881: PUSH
21882: LD_INT 103
21884: PUSH
21885: LD_INT 105
21887: PUSH
21888: LD_INT 106
21890: PUSH
21891: LD_INT 108
21893: PUSH
21894: LD_INT 109
21896: PUSH
21897: LD_INT 112
21899: PUSH
21900: LD_INT 114
21902: PUSH
21903: LD_INT 116
21905: PUSH
21906: LD_INT 117
21908: PUSH
21909: LD_INT 118
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: LIST
21916: LIST
21917: LIST
21918: LIST
21919: LIST
21920: LIST
21921: LIST
21922: LIST
21923: LIST
21924: LIST
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: ST_TO_ADDR
21930: GO 24029
21932: LD_INT 10
21934: DOUBLE
21935: EQUAL
21936: IFTRUE 21940
21938: GO 22136
21940: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21941: LD_ADDR_VAR 0 2
21945: PUSH
21946: LD_INT 2
21948: PUSH
21949: LD_INT 4
21951: PUSH
21952: LD_INT 5
21954: PUSH
21955: LD_INT 6
21957: PUSH
21958: LD_INT 7
21960: PUSH
21961: LD_INT 8
21963: PUSH
21964: LD_INT 9
21966: PUSH
21967: LD_INT 10
21969: PUSH
21970: LD_INT 11
21972: PUSH
21973: LD_INT 12
21975: PUSH
21976: LD_INT 13
21978: PUSH
21979: LD_INT 14
21981: PUSH
21982: LD_INT 15
21984: PUSH
21985: LD_INT 16
21987: PUSH
21988: LD_INT 17
21990: PUSH
21991: LD_INT 18
21993: PUSH
21994: LD_INT 19
21996: PUSH
21997: LD_INT 20
21999: PUSH
22000: LD_INT 21
22002: PUSH
22003: LD_INT 22
22005: PUSH
22006: LD_INT 23
22008: PUSH
22009: LD_INT 24
22011: PUSH
22012: LD_INT 25
22014: PUSH
22015: LD_INT 26
22017: PUSH
22018: LD_INT 28
22020: PUSH
22021: LD_INT 30
22023: PUSH
22024: LD_INT 31
22026: PUSH
22027: LD_INT 32
22029: PUSH
22030: LD_INT 36
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: LIST
22039: LIST
22040: LIST
22041: LIST
22042: LIST
22043: LIST
22044: LIST
22045: LIST
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: PUSH
22064: LD_INT 101
22066: PUSH
22067: LD_INT 102
22069: PUSH
22070: LD_INT 103
22072: PUSH
22073: LD_INT 104
22075: PUSH
22076: LD_INT 105
22078: PUSH
22079: LD_INT 106
22081: PUSH
22082: LD_INT 107
22084: PUSH
22085: LD_INT 108
22087: PUSH
22088: LD_INT 109
22090: PUSH
22091: LD_INT 110
22093: PUSH
22094: LD_INT 111
22096: PUSH
22097: LD_INT 112
22099: PUSH
22100: LD_INT 114
22102: PUSH
22103: LD_INT 116
22105: PUSH
22106: LD_INT 117
22108: PUSH
22109: LD_INT 118
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: LIST
22126: LIST
22127: LIST
22128: LIST
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: ST_TO_ADDR
22134: GO 24029
22136: LD_INT 11
22138: DOUBLE
22139: EQUAL
22140: IFTRUE 22144
22142: GO 22348
22144: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22145: LD_ADDR_VAR 0 2
22149: PUSH
22150: LD_INT 2
22152: PUSH
22153: LD_INT 3
22155: PUSH
22156: LD_INT 4
22158: PUSH
22159: LD_INT 5
22161: PUSH
22162: LD_INT 6
22164: PUSH
22165: LD_INT 7
22167: PUSH
22168: LD_INT 8
22170: PUSH
22171: LD_INT 9
22173: PUSH
22174: LD_INT 10
22176: PUSH
22177: LD_INT 11
22179: PUSH
22180: LD_INT 12
22182: PUSH
22183: LD_INT 13
22185: PUSH
22186: LD_INT 14
22188: PUSH
22189: LD_INT 15
22191: PUSH
22192: LD_INT 16
22194: PUSH
22195: LD_INT 17
22197: PUSH
22198: LD_INT 18
22200: PUSH
22201: LD_INT 19
22203: PUSH
22204: LD_INT 20
22206: PUSH
22207: LD_INT 21
22209: PUSH
22210: LD_INT 22
22212: PUSH
22213: LD_INT 23
22215: PUSH
22216: LD_INT 24
22218: PUSH
22219: LD_INT 25
22221: PUSH
22222: LD_INT 26
22224: PUSH
22225: LD_INT 28
22227: PUSH
22228: LD_INT 30
22230: PUSH
22231: LD_INT 31
22233: PUSH
22234: LD_INT 32
22236: PUSH
22237: LD_INT 34
22239: PUSH
22240: LD_INT 36
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: LIST
22248: LIST
22249: LIST
22250: LIST
22251: LIST
22252: LIST
22253: LIST
22254: LIST
22255: LIST
22256: LIST
22257: LIST
22258: LIST
22259: LIST
22260: LIST
22261: LIST
22262: LIST
22263: LIST
22264: LIST
22265: LIST
22266: LIST
22267: LIST
22268: LIST
22269: LIST
22270: LIST
22271: LIST
22272: LIST
22273: LIST
22274: LIST
22275: PUSH
22276: LD_INT 101
22278: PUSH
22279: LD_INT 102
22281: PUSH
22282: LD_INT 103
22284: PUSH
22285: LD_INT 104
22287: PUSH
22288: LD_INT 105
22290: PUSH
22291: LD_INT 106
22293: PUSH
22294: LD_INT 107
22296: PUSH
22297: LD_INT 108
22299: PUSH
22300: LD_INT 109
22302: PUSH
22303: LD_INT 110
22305: PUSH
22306: LD_INT 111
22308: PUSH
22309: LD_INT 112
22311: PUSH
22312: LD_INT 114
22314: PUSH
22315: LD_INT 116
22317: PUSH
22318: LD_INT 117
22320: PUSH
22321: LD_INT 118
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: PUSH
22342: EMPTY
22343: LIST
22344: LIST
22345: ST_TO_ADDR
22346: GO 24029
22348: LD_INT 12
22350: DOUBLE
22351: EQUAL
22352: IFTRUE 22356
22354: GO 22576
22356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22357: LD_ADDR_VAR 0 2
22361: PUSH
22362: LD_INT 1
22364: PUSH
22365: LD_INT 2
22367: PUSH
22368: LD_INT 3
22370: PUSH
22371: LD_INT 4
22373: PUSH
22374: LD_INT 5
22376: PUSH
22377: LD_INT 6
22379: PUSH
22380: LD_INT 7
22382: PUSH
22383: LD_INT 8
22385: PUSH
22386: LD_INT 9
22388: PUSH
22389: LD_INT 10
22391: PUSH
22392: LD_INT 11
22394: PUSH
22395: LD_INT 12
22397: PUSH
22398: LD_INT 13
22400: PUSH
22401: LD_INT 14
22403: PUSH
22404: LD_INT 15
22406: PUSH
22407: LD_INT 16
22409: PUSH
22410: LD_INT 17
22412: PUSH
22413: LD_INT 18
22415: PUSH
22416: LD_INT 19
22418: PUSH
22419: LD_INT 20
22421: PUSH
22422: LD_INT 21
22424: PUSH
22425: LD_INT 22
22427: PUSH
22428: LD_INT 23
22430: PUSH
22431: LD_INT 24
22433: PUSH
22434: LD_INT 25
22436: PUSH
22437: LD_INT 26
22439: PUSH
22440: LD_INT 27
22442: PUSH
22443: LD_INT 28
22445: PUSH
22446: LD_INT 30
22448: PUSH
22449: LD_INT 31
22451: PUSH
22452: LD_INT 32
22454: PUSH
22455: LD_INT 33
22457: PUSH
22458: LD_INT 34
22460: PUSH
22461: LD_INT 36
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 101
22502: PUSH
22503: LD_INT 102
22505: PUSH
22506: LD_INT 103
22508: PUSH
22509: LD_INT 104
22511: PUSH
22512: LD_INT 105
22514: PUSH
22515: LD_INT 106
22517: PUSH
22518: LD_INT 107
22520: PUSH
22521: LD_INT 108
22523: PUSH
22524: LD_INT 109
22526: PUSH
22527: LD_INT 110
22529: PUSH
22530: LD_INT 111
22532: PUSH
22533: LD_INT 112
22535: PUSH
22536: LD_INT 113
22538: PUSH
22539: LD_INT 114
22541: PUSH
22542: LD_INT 116
22544: PUSH
22545: LD_INT 117
22547: PUSH
22548: LD_INT 118
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: ST_TO_ADDR
22574: GO 24029
22576: LD_INT 13
22578: DOUBLE
22579: EQUAL
22580: IFTRUE 22584
22582: GO 22792
22584: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22585: LD_ADDR_VAR 0 2
22589: PUSH
22590: LD_INT 1
22592: PUSH
22593: LD_INT 2
22595: PUSH
22596: LD_INT 3
22598: PUSH
22599: LD_INT 4
22601: PUSH
22602: LD_INT 5
22604: PUSH
22605: LD_INT 8
22607: PUSH
22608: LD_INT 9
22610: PUSH
22611: LD_INT 10
22613: PUSH
22614: LD_INT 11
22616: PUSH
22617: LD_INT 12
22619: PUSH
22620: LD_INT 14
22622: PUSH
22623: LD_INT 15
22625: PUSH
22626: LD_INT 16
22628: PUSH
22629: LD_INT 17
22631: PUSH
22632: LD_INT 18
22634: PUSH
22635: LD_INT 19
22637: PUSH
22638: LD_INT 20
22640: PUSH
22641: LD_INT 21
22643: PUSH
22644: LD_INT 22
22646: PUSH
22647: LD_INT 23
22649: PUSH
22650: LD_INT 24
22652: PUSH
22653: LD_INT 25
22655: PUSH
22656: LD_INT 26
22658: PUSH
22659: LD_INT 27
22661: PUSH
22662: LD_INT 28
22664: PUSH
22665: LD_INT 30
22667: PUSH
22668: LD_INT 31
22670: PUSH
22671: LD_INT 32
22673: PUSH
22674: LD_INT 33
22676: PUSH
22677: LD_INT 34
22679: PUSH
22680: LD_INT 36
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: LIST
22715: PUSH
22716: LD_INT 101
22718: PUSH
22719: LD_INT 102
22721: PUSH
22722: LD_INT 103
22724: PUSH
22725: LD_INT 104
22727: PUSH
22728: LD_INT 105
22730: PUSH
22731: LD_INT 106
22733: PUSH
22734: LD_INT 107
22736: PUSH
22737: LD_INT 108
22739: PUSH
22740: LD_INT 109
22742: PUSH
22743: LD_INT 110
22745: PUSH
22746: LD_INT 111
22748: PUSH
22749: LD_INT 112
22751: PUSH
22752: LD_INT 113
22754: PUSH
22755: LD_INT 114
22757: PUSH
22758: LD_INT 116
22760: PUSH
22761: LD_INT 117
22763: PUSH
22764: LD_INT 118
22766: PUSH
22767: EMPTY
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: PUSH
22786: EMPTY
22787: LIST
22788: LIST
22789: ST_TO_ADDR
22790: GO 24029
22792: LD_INT 14
22794: DOUBLE
22795: EQUAL
22796: IFTRUE 22800
22798: GO 23024
22800: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22801: LD_ADDR_VAR 0 2
22805: PUSH
22806: LD_INT 1
22808: PUSH
22809: LD_INT 2
22811: PUSH
22812: LD_INT 3
22814: PUSH
22815: LD_INT 4
22817: PUSH
22818: LD_INT 5
22820: PUSH
22821: LD_INT 6
22823: PUSH
22824: LD_INT 7
22826: PUSH
22827: LD_INT 8
22829: PUSH
22830: LD_INT 9
22832: PUSH
22833: LD_INT 10
22835: PUSH
22836: LD_INT 11
22838: PUSH
22839: LD_INT 12
22841: PUSH
22842: LD_INT 13
22844: PUSH
22845: LD_INT 14
22847: PUSH
22848: LD_INT 15
22850: PUSH
22851: LD_INT 16
22853: PUSH
22854: LD_INT 17
22856: PUSH
22857: LD_INT 18
22859: PUSH
22860: LD_INT 19
22862: PUSH
22863: LD_INT 20
22865: PUSH
22866: LD_INT 21
22868: PUSH
22869: LD_INT 22
22871: PUSH
22872: LD_INT 23
22874: PUSH
22875: LD_INT 24
22877: PUSH
22878: LD_INT 25
22880: PUSH
22881: LD_INT 26
22883: PUSH
22884: LD_INT 27
22886: PUSH
22887: LD_INT 28
22889: PUSH
22890: LD_INT 29
22892: PUSH
22893: LD_INT 30
22895: PUSH
22896: LD_INT 31
22898: PUSH
22899: LD_INT 32
22901: PUSH
22902: LD_INT 33
22904: PUSH
22905: LD_INT 34
22907: PUSH
22908: LD_INT 36
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: LIST
22941: LIST
22942: LIST
22943: LIST
22944: LIST
22945: LIST
22946: LIST
22947: PUSH
22948: LD_INT 101
22950: PUSH
22951: LD_INT 102
22953: PUSH
22954: LD_INT 103
22956: PUSH
22957: LD_INT 104
22959: PUSH
22960: LD_INT 105
22962: PUSH
22963: LD_INT 106
22965: PUSH
22966: LD_INT 107
22968: PUSH
22969: LD_INT 108
22971: PUSH
22972: LD_INT 109
22974: PUSH
22975: LD_INT 110
22977: PUSH
22978: LD_INT 111
22980: PUSH
22981: LD_INT 112
22983: PUSH
22984: LD_INT 113
22986: PUSH
22987: LD_INT 114
22989: PUSH
22990: LD_INT 116
22992: PUSH
22993: LD_INT 117
22995: PUSH
22996: LD_INT 118
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: ST_TO_ADDR
23022: GO 24029
23024: LD_INT 15
23026: DOUBLE
23027: EQUAL
23028: IFTRUE 23032
23030: GO 23256
23032: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23033: LD_ADDR_VAR 0 2
23037: PUSH
23038: LD_INT 1
23040: PUSH
23041: LD_INT 2
23043: PUSH
23044: LD_INT 3
23046: PUSH
23047: LD_INT 4
23049: PUSH
23050: LD_INT 5
23052: PUSH
23053: LD_INT 6
23055: PUSH
23056: LD_INT 7
23058: PUSH
23059: LD_INT 8
23061: PUSH
23062: LD_INT 9
23064: PUSH
23065: LD_INT 10
23067: PUSH
23068: LD_INT 11
23070: PUSH
23071: LD_INT 12
23073: PUSH
23074: LD_INT 13
23076: PUSH
23077: LD_INT 14
23079: PUSH
23080: LD_INT 15
23082: PUSH
23083: LD_INT 16
23085: PUSH
23086: LD_INT 17
23088: PUSH
23089: LD_INT 18
23091: PUSH
23092: LD_INT 19
23094: PUSH
23095: LD_INT 20
23097: PUSH
23098: LD_INT 21
23100: PUSH
23101: LD_INT 22
23103: PUSH
23104: LD_INT 23
23106: PUSH
23107: LD_INT 24
23109: PUSH
23110: LD_INT 25
23112: PUSH
23113: LD_INT 26
23115: PUSH
23116: LD_INT 27
23118: PUSH
23119: LD_INT 28
23121: PUSH
23122: LD_INT 29
23124: PUSH
23125: LD_INT 30
23127: PUSH
23128: LD_INT 31
23130: PUSH
23131: LD_INT 32
23133: PUSH
23134: LD_INT 33
23136: PUSH
23137: LD_INT 34
23139: PUSH
23140: LD_INT 36
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: LIST
23155: LIST
23156: LIST
23157: LIST
23158: LIST
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: LIST
23165: LIST
23166: LIST
23167: LIST
23168: LIST
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 101
23182: PUSH
23183: LD_INT 102
23185: PUSH
23186: LD_INT 103
23188: PUSH
23189: LD_INT 104
23191: PUSH
23192: LD_INT 105
23194: PUSH
23195: LD_INT 106
23197: PUSH
23198: LD_INT 107
23200: PUSH
23201: LD_INT 108
23203: PUSH
23204: LD_INT 109
23206: PUSH
23207: LD_INT 110
23209: PUSH
23210: LD_INT 111
23212: PUSH
23213: LD_INT 112
23215: PUSH
23216: LD_INT 113
23218: PUSH
23219: LD_INT 114
23221: PUSH
23222: LD_INT 116
23224: PUSH
23225: LD_INT 117
23227: PUSH
23228: LD_INT 118
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: PUSH
23250: EMPTY
23251: LIST
23252: LIST
23253: ST_TO_ADDR
23254: GO 24029
23256: LD_INT 16
23258: DOUBLE
23259: EQUAL
23260: IFTRUE 23264
23262: GO 23400
23264: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23265: LD_ADDR_VAR 0 2
23269: PUSH
23270: LD_INT 2
23272: PUSH
23273: LD_INT 4
23275: PUSH
23276: LD_INT 5
23278: PUSH
23279: LD_INT 7
23281: PUSH
23282: LD_INT 11
23284: PUSH
23285: LD_INT 12
23287: PUSH
23288: LD_INT 15
23290: PUSH
23291: LD_INT 16
23293: PUSH
23294: LD_INT 20
23296: PUSH
23297: LD_INT 21
23299: PUSH
23300: LD_INT 22
23302: PUSH
23303: LD_INT 23
23305: PUSH
23306: LD_INT 25
23308: PUSH
23309: LD_INT 26
23311: PUSH
23312: LD_INT 30
23314: PUSH
23315: LD_INT 31
23317: PUSH
23318: LD_INT 32
23320: PUSH
23321: LD_INT 33
23323: PUSH
23324: LD_INT 34
23326: PUSH
23327: EMPTY
23328: LIST
23329: LIST
23330: LIST
23331: LIST
23332: LIST
23333: LIST
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: LIST
23343: LIST
23344: LIST
23345: LIST
23346: LIST
23347: PUSH
23348: LD_INT 101
23350: PUSH
23351: LD_INT 102
23353: PUSH
23354: LD_INT 103
23356: PUSH
23357: LD_INT 106
23359: PUSH
23360: LD_INT 108
23362: PUSH
23363: LD_INT 112
23365: PUSH
23366: LD_INT 113
23368: PUSH
23369: LD_INT 114
23371: PUSH
23372: LD_INT 116
23374: PUSH
23375: LD_INT 117
23377: PUSH
23378: LD_INT 118
23380: PUSH
23381: EMPTY
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: LIST
23387: LIST
23388: LIST
23389: LIST
23390: LIST
23391: LIST
23392: LIST
23393: PUSH
23394: EMPTY
23395: LIST
23396: LIST
23397: ST_TO_ADDR
23398: GO 24029
23400: LD_INT 17
23402: DOUBLE
23403: EQUAL
23404: IFTRUE 23408
23406: GO 23632
23408: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23409: LD_ADDR_VAR 0 2
23413: PUSH
23414: LD_INT 1
23416: PUSH
23417: LD_INT 2
23419: PUSH
23420: LD_INT 3
23422: PUSH
23423: LD_INT 4
23425: PUSH
23426: LD_INT 5
23428: PUSH
23429: LD_INT 6
23431: PUSH
23432: LD_INT 7
23434: PUSH
23435: LD_INT 8
23437: PUSH
23438: LD_INT 9
23440: PUSH
23441: LD_INT 10
23443: PUSH
23444: LD_INT 11
23446: PUSH
23447: LD_INT 12
23449: PUSH
23450: LD_INT 13
23452: PUSH
23453: LD_INT 14
23455: PUSH
23456: LD_INT 15
23458: PUSH
23459: LD_INT 16
23461: PUSH
23462: LD_INT 17
23464: PUSH
23465: LD_INT 18
23467: PUSH
23468: LD_INT 19
23470: PUSH
23471: LD_INT 20
23473: PUSH
23474: LD_INT 21
23476: PUSH
23477: LD_INT 22
23479: PUSH
23480: LD_INT 23
23482: PUSH
23483: LD_INT 24
23485: PUSH
23486: LD_INT 25
23488: PUSH
23489: LD_INT 26
23491: PUSH
23492: LD_INT 27
23494: PUSH
23495: LD_INT 28
23497: PUSH
23498: LD_INT 29
23500: PUSH
23501: LD_INT 30
23503: PUSH
23504: LD_INT 31
23506: PUSH
23507: LD_INT 32
23509: PUSH
23510: LD_INT 33
23512: PUSH
23513: LD_INT 34
23515: PUSH
23516: LD_INT 36
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: LIST
23529: LIST
23530: LIST
23531: LIST
23532: LIST
23533: LIST
23534: LIST
23535: LIST
23536: LIST
23537: LIST
23538: LIST
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: LIST
23546: LIST
23547: LIST
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: LIST
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 101
23558: PUSH
23559: LD_INT 102
23561: PUSH
23562: LD_INT 103
23564: PUSH
23565: LD_INT 104
23567: PUSH
23568: LD_INT 105
23570: PUSH
23571: LD_INT 106
23573: PUSH
23574: LD_INT 107
23576: PUSH
23577: LD_INT 108
23579: PUSH
23580: LD_INT 109
23582: PUSH
23583: LD_INT 110
23585: PUSH
23586: LD_INT 111
23588: PUSH
23589: LD_INT 112
23591: PUSH
23592: LD_INT 113
23594: PUSH
23595: LD_INT 114
23597: PUSH
23598: LD_INT 116
23600: PUSH
23601: LD_INT 117
23603: PUSH
23604: LD_INT 118
23606: PUSH
23607: EMPTY
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: PUSH
23626: EMPTY
23627: LIST
23628: LIST
23629: ST_TO_ADDR
23630: GO 24029
23632: LD_INT 18
23634: DOUBLE
23635: EQUAL
23636: IFTRUE 23640
23638: GO 23788
23640: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23641: LD_ADDR_VAR 0 2
23645: PUSH
23646: LD_INT 2
23648: PUSH
23649: LD_INT 4
23651: PUSH
23652: LD_INT 5
23654: PUSH
23655: LD_INT 7
23657: PUSH
23658: LD_INT 11
23660: PUSH
23661: LD_INT 12
23663: PUSH
23664: LD_INT 15
23666: PUSH
23667: LD_INT 16
23669: PUSH
23670: LD_INT 20
23672: PUSH
23673: LD_INT 21
23675: PUSH
23676: LD_INT 22
23678: PUSH
23679: LD_INT 23
23681: PUSH
23682: LD_INT 25
23684: PUSH
23685: LD_INT 26
23687: PUSH
23688: LD_INT 30
23690: PUSH
23691: LD_INT 31
23693: PUSH
23694: LD_INT 32
23696: PUSH
23697: LD_INT 33
23699: PUSH
23700: LD_INT 34
23702: PUSH
23703: LD_INT 35
23705: PUSH
23706: LD_INT 36
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: PUSH
23732: LD_INT 101
23734: PUSH
23735: LD_INT 102
23737: PUSH
23738: LD_INT 103
23740: PUSH
23741: LD_INT 106
23743: PUSH
23744: LD_INT 108
23746: PUSH
23747: LD_INT 112
23749: PUSH
23750: LD_INT 113
23752: PUSH
23753: LD_INT 114
23755: PUSH
23756: LD_INT 115
23758: PUSH
23759: LD_INT 116
23761: PUSH
23762: LD_INT 117
23764: PUSH
23765: LD_INT 118
23767: PUSH
23768: EMPTY
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: PUSH
23782: EMPTY
23783: LIST
23784: LIST
23785: ST_TO_ADDR
23786: GO 24029
23788: LD_INT 19
23790: DOUBLE
23791: EQUAL
23792: IFTRUE 23796
23794: GO 24028
23796: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23797: LD_ADDR_VAR 0 2
23801: PUSH
23802: LD_INT 1
23804: PUSH
23805: LD_INT 2
23807: PUSH
23808: LD_INT 3
23810: PUSH
23811: LD_INT 4
23813: PUSH
23814: LD_INT 5
23816: PUSH
23817: LD_INT 6
23819: PUSH
23820: LD_INT 7
23822: PUSH
23823: LD_INT 8
23825: PUSH
23826: LD_INT 9
23828: PUSH
23829: LD_INT 10
23831: PUSH
23832: LD_INT 11
23834: PUSH
23835: LD_INT 12
23837: PUSH
23838: LD_INT 13
23840: PUSH
23841: LD_INT 14
23843: PUSH
23844: LD_INT 15
23846: PUSH
23847: LD_INT 16
23849: PUSH
23850: LD_INT 17
23852: PUSH
23853: LD_INT 18
23855: PUSH
23856: LD_INT 19
23858: PUSH
23859: LD_INT 20
23861: PUSH
23862: LD_INT 21
23864: PUSH
23865: LD_INT 22
23867: PUSH
23868: LD_INT 23
23870: PUSH
23871: LD_INT 24
23873: PUSH
23874: LD_INT 25
23876: PUSH
23877: LD_INT 26
23879: PUSH
23880: LD_INT 27
23882: PUSH
23883: LD_INT 28
23885: PUSH
23886: LD_INT 29
23888: PUSH
23889: LD_INT 30
23891: PUSH
23892: LD_INT 31
23894: PUSH
23895: LD_INT 32
23897: PUSH
23898: LD_INT 33
23900: PUSH
23901: LD_INT 34
23903: PUSH
23904: LD_INT 35
23906: PUSH
23907: LD_INT 36
23909: PUSH
23910: EMPTY
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: LIST
23935: LIST
23936: LIST
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: LIST
23942: LIST
23943: LIST
23944: LIST
23945: LIST
23946: LIST
23947: PUSH
23948: LD_INT 101
23950: PUSH
23951: LD_INT 102
23953: PUSH
23954: LD_INT 103
23956: PUSH
23957: LD_INT 104
23959: PUSH
23960: LD_INT 105
23962: PUSH
23963: LD_INT 106
23965: PUSH
23966: LD_INT 107
23968: PUSH
23969: LD_INT 108
23971: PUSH
23972: LD_INT 109
23974: PUSH
23975: LD_INT 110
23977: PUSH
23978: LD_INT 111
23980: PUSH
23981: LD_INT 112
23983: PUSH
23984: LD_INT 113
23986: PUSH
23987: LD_INT 114
23989: PUSH
23990: LD_INT 115
23992: PUSH
23993: LD_INT 116
23995: PUSH
23996: LD_INT 117
23998: PUSH
23999: LD_INT 118
24001: PUSH
24002: EMPTY
24003: LIST
24004: LIST
24005: LIST
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: LIST
24011: LIST
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: PUSH
24022: EMPTY
24023: LIST
24024: LIST
24025: ST_TO_ADDR
24026: GO 24029
24028: POP
// end else
24029: GO 24260
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24031: LD_ADDR_VAR 0 2
24035: PUSH
24036: LD_INT 1
24038: PUSH
24039: LD_INT 2
24041: PUSH
24042: LD_INT 3
24044: PUSH
24045: LD_INT 4
24047: PUSH
24048: LD_INT 5
24050: PUSH
24051: LD_INT 6
24053: PUSH
24054: LD_INT 7
24056: PUSH
24057: LD_INT 8
24059: PUSH
24060: LD_INT 9
24062: PUSH
24063: LD_INT 10
24065: PUSH
24066: LD_INT 11
24068: PUSH
24069: LD_INT 12
24071: PUSH
24072: LD_INT 13
24074: PUSH
24075: LD_INT 14
24077: PUSH
24078: LD_INT 15
24080: PUSH
24081: LD_INT 16
24083: PUSH
24084: LD_INT 17
24086: PUSH
24087: LD_INT 18
24089: PUSH
24090: LD_INT 19
24092: PUSH
24093: LD_INT 20
24095: PUSH
24096: LD_INT 21
24098: PUSH
24099: LD_INT 22
24101: PUSH
24102: LD_INT 23
24104: PUSH
24105: LD_INT 24
24107: PUSH
24108: LD_INT 25
24110: PUSH
24111: LD_INT 26
24113: PUSH
24114: LD_INT 27
24116: PUSH
24117: LD_INT 28
24119: PUSH
24120: LD_INT 29
24122: PUSH
24123: LD_INT 30
24125: PUSH
24126: LD_INT 31
24128: PUSH
24129: LD_INT 32
24131: PUSH
24132: LD_INT 33
24134: PUSH
24135: LD_INT 34
24137: PUSH
24138: LD_INT 35
24140: PUSH
24141: LD_INT 36
24143: PUSH
24144: EMPTY
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: PUSH
24182: LD_INT 101
24184: PUSH
24185: LD_INT 102
24187: PUSH
24188: LD_INT 103
24190: PUSH
24191: LD_INT 104
24193: PUSH
24194: LD_INT 105
24196: PUSH
24197: LD_INT 106
24199: PUSH
24200: LD_INT 107
24202: PUSH
24203: LD_INT 108
24205: PUSH
24206: LD_INT 109
24208: PUSH
24209: LD_INT 110
24211: PUSH
24212: LD_INT 111
24214: PUSH
24215: LD_INT 112
24217: PUSH
24218: LD_INT 113
24220: PUSH
24221: LD_INT 114
24223: PUSH
24224: LD_INT 115
24226: PUSH
24227: LD_INT 116
24229: PUSH
24230: LD_INT 117
24232: PUSH
24233: LD_INT 118
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: LIST
24240: LIST
24241: LIST
24242: LIST
24243: LIST
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: LIST
24252: LIST
24253: LIST
24254: LIST
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: ST_TO_ADDR
// if result then
24260: LD_VAR 0 2
24264: IFFALSE 25050
// begin normal :=  ;
24266: LD_ADDR_VAR 0 5
24270: PUSH
24271: LD_STRING 
24273: ST_TO_ADDR
// hardcore :=  ;
24274: LD_ADDR_VAR 0 6
24278: PUSH
24279: LD_STRING 
24281: ST_TO_ADDR
// active :=  ;
24282: LD_ADDR_VAR 0 7
24286: PUSH
24287: LD_STRING 
24289: ST_TO_ADDR
// for i = 1 to normalCounter do
24290: LD_ADDR_VAR 0 8
24294: PUSH
24295: DOUBLE
24296: LD_INT 1
24298: DEC
24299: ST_TO_ADDR
24300: LD_EXP 47
24304: PUSH
24305: FOR_TO
24306: IFFALSE 24407
// begin tmp := 0 ;
24308: LD_ADDR_VAR 0 3
24312: PUSH
24313: LD_STRING 0
24315: ST_TO_ADDR
// if result [ 1 ] then
24316: LD_VAR 0 2
24320: PUSH
24321: LD_INT 1
24323: ARRAY
24324: IFFALSE 24389
// if result [ 1 ] [ 1 ] = i then
24326: LD_VAR 0 2
24330: PUSH
24331: LD_INT 1
24333: ARRAY
24334: PUSH
24335: LD_INT 1
24337: ARRAY
24338: PUSH
24339: LD_VAR 0 8
24343: EQUAL
24344: IFFALSE 24389
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24346: LD_ADDR_VAR 0 2
24350: PUSH
24351: LD_VAR 0 2
24355: PPUSH
24356: LD_INT 1
24358: PPUSH
24359: LD_VAR 0 2
24363: PUSH
24364: LD_INT 1
24366: ARRAY
24367: PPUSH
24368: LD_INT 1
24370: PPUSH
24371: CALL_OW 3
24375: PPUSH
24376: CALL_OW 1
24380: ST_TO_ADDR
// tmp := 1 ;
24381: LD_ADDR_VAR 0 3
24385: PUSH
24386: LD_STRING 1
24388: ST_TO_ADDR
// end ; normal := normal & tmp ;
24389: LD_ADDR_VAR 0 5
24393: PUSH
24394: LD_VAR 0 5
24398: PUSH
24399: LD_VAR 0 3
24403: STR
24404: ST_TO_ADDR
// end ;
24405: GO 24305
24407: POP
24408: POP
// for i = 1 to hardcoreCounter do
24409: LD_ADDR_VAR 0 8
24413: PUSH
24414: DOUBLE
24415: LD_INT 1
24417: DEC
24418: ST_TO_ADDR
24419: LD_EXP 48
24423: PUSH
24424: FOR_TO
24425: IFFALSE 24530
// begin tmp := 0 ;
24427: LD_ADDR_VAR 0 3
24431: PUSH
24432: LD_STRING 0
24434: ST_TO_ADDR
// if result [ 2 ] then
24435: LD_VAR 0 2
24439: PUSH
24440: LD_INT 2
24442: ARRAY
24443: IFFALSE 24512
// if result [ 2 ] [ 1 ] = 100 + i then
24445: LD_VAR 0 2
24449: PUSH
24450: LD_INT 2
24452: ARRAY
24453: PUSH
24454: LD_INT 1
24456: ARRAY
24457: PUSH
24458: LD_INT 100
24460: PUSH
24461: LD_VAR 0 8
24465: PLUS
24466: EQUAL
24467: IFFALSE 24512
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24469: LD_ADDR_VAR 0 2
24473: PUSH
24474: LD_VAR 0 2
24478: PPUSH
24479: LD_INT 2
24481: PPUSH
24482: LD_VAR 0 2
24486: PUSH
24487: LD_INT 2
24489: ARRAY
24490: PPUSH
24491: LD_INT 1
24493: PPUSH
24494: CALL_OW 3
24498: PPUSH
24499: CALL_OW 1
24503: ST_TO_ADDR
// tmp := 1 ;
24504: LD_ADDR_VAR 0 3
24508: PUSH
24509: LD_STRING 1
24511: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24512: LD_ADDR_VAR 0 6
24516: PUSH
24517: LD_VAR 0 6
24521: PUSH
24522: LD_VAR 0 3
24526: STR
24527: ST_TO_ADDR
// end ;
24528: GO 24424
24530: POP
24531: POP
// if isGameLoad then
24532: LD_VAR 0 1
24536: IFFALSE 25011
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24538: LD_ADDR_VAR 0 4
24542: PUSH
24543: LD_EXP 51
24547: PUSH
24548: LD_EXP 50
24552: PUSH
24553: LD_EXP 52
24557: PUSH
24558: LD_EXP 49
24562: PUSH
24563: LD_EXP 53
24567: PUSH
24568: LD_EXP 54
24572: PUSH
24573: LD_EXP 55
24577: PUSH
24578: LD_EXP 56
24582: PUSH
24583: LD_EXP 57
24587: PUSH
24588: LD_EXP 58
24592: PUSH
24593: LD_EXP 59
24597: PUSH
24598: LD_EXP 60
24602: PUSH
24603: LD_EXP 61
24607: PUSH
24608: LD_EXP 62
24612: PUSH
24613: LD_EXP 70
24617: PUSH
24618: LD_EXP 71
24622: PUSH
24623: LD_EXP 72
24627: PUSH
24628: LD_EXP 73
24632: PUSH
24633: LD_EXP 75
24637: PUSH
24638: LD_EXP 76
24642: PUSH
24643: LD_EXP 77
24647: PUSH
24648: LD_EXP 80
24652: PUSH
24653: LD_EXP 82
24657: PUSH
24658: LD_EXP 83
24662: PUSH
24663: LD_EXP 84
24667: PUSH
24668: LD_EXP 86
24672: PUSH
24673: LD_EXP 87
24677: PUSH
24678: LD_EXP 90
24682: PUSH
24683: LD_EXP 91
24687: PUSH
24688: LD_EXP 92
24692: PUSH
24693: LD_EXP 93
24697: PUSH
24698: LD_EXP 94
24702: PUSH
24703: LD_EXP 95
24707: PUSH
24708: LD_EXP 96
24712: PUSH
24713: LD_EXP 97
24717: PUSH
24718: LD_EXP 98
24722: PUSH
24723: LD_EXP 63
24727: PUSH
24728: LD_EXP 64
24732: PUSH
24733: LD_EXP 67
24737: PUSH
24738: LD_EXP 68
24742: PUSH
24743: LD_EXP 69
24747: PUSH
24748: LD_EXP 65
24752: PUSH
24753: LD_EXP 66
24757: PUSH
24758: LD_EXP 74
24762: PUSH
24763: LD_EXP 78
24767: PUSH
24768: LD_EXP 79
24772: PUSH
24773: LD_EXP 81
24777: PUSH
24778: LD_EXP 85
24782: PUSH
24783: LD_EXP 88
24787: PUSH
24788: LD_EXP 89
24792: PUSH
24793: LD_EXP 99
24797: PUSH
24798: LD_EXP 100
24802: PUSH
24803: LD_EXP 101
24807: PUSH
24808: LD_EXP 102
24812: PUSH
24813: EMPTY
24814: LIST
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: LIST
24820: LIST
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: LIST
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: LIST
24854: LIST
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: LIST
24861: LIST
24862: LIST
24863: LIST
24864: LIST
24865: LIST
24866: LIST
24867: LIST
24868: ST_TO_ADDR
// tmp :=  ;
24869: LD_ADDR_VAR 0 3
24873: PUSH
24874: LD_STRING 
24876: ST_TO_ADDR
// for i = 1 to normalCounter do
24877: LD_ADDR_VAR 0 8
24881: PUSH
24882: DOUBLE
24883: LD_INT 1
24885: DEC
24886: ST_TO_ADDR
24887: LD_EXP 47
24891: PUSH
24892: FOR_TO
24893: IFFALSE 24929
// begin if flags [ i ] then
24895: LD_VAR 0 4
24899: PUSH
24900: LD_VAR 0 8
24904: ARRAY
24905: IFFALSE 24927
// tmp := tmp & i & ; ;
24907: LD_ADDR_VAR 0 3
24911: PUSH
24912: LD_VAR 0 3
24916: PUSH
24917: LD_VAR 0 8
24921: STR
24922: PUSH
24923: LD_STRING ;
24925: STR
24926: ST_TO_ADDR
// end ;
24927: GO 24892
24929: POP
24930: POP
// for i = 1 to hardcoreCounter do
24931: LD_ADDR_VAR 0 8
24935: PUSH
24936: DOUBLE
24937: LD_INT 1
24939: DEC
24940: ST_TO_ADDR
24941: LD_EXP 48
24945: PUSH
24946: FOR_TO
24947: IFFALSE 24993
// begin if flags [ normalCounter + i ] then
24949: LD_VAR 0 4
24953: PUSH
24954: LD_EXP 47
24958: PUSH
24959: LD_VAR 0 8
24963: PLUS
24964: ARRAY
24965: IFFALSE 24991
// tmp := tmp & ( 100 + i ) & ; ;
24967: LD_ADDR_VAR 0 3
24971: PUSH
24972: LD_VAR 0 3
24976: PUSH
24977: LD_INT 100
24979: PUSH
24980: LD_VAR 0 8
24984: PLUS
24985: STR
24986: PUSH
24987: LD_STRING ;
24989: STR
24990: ST_TO_ADDR
// end ;
24991: GO 24946
24993: POP
24994: POP
// if tmp then
24995: LD_VAR 0 3
24999: IFFALSE 25011
// active := tmp ;
25001: LD_ADDR_VAR 0 7
25005: PUSH
25006: LD_VAR 0 3
25010: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25011: LD_STRING getStreamItemsFromMission("
25013: PUSH
25014: LD_VAR 0 5
25018: STR
25019: PUSH
25020: LD_STRING ","
25022: STR
25023: PUSH
25024: LD_VAR 0 6
25028: STR
25029: PUSH
25030: LD_STRING ","
25032: STR
25033: PUSH
25034: LD_VAR 0 7
25038: STR
25039: PUSH
25040: LD_STRING ")
25042: STR
25043: PPUSH
25044: CALL_OW 559
// end else
25048: GO 25057
// ToLua ( getStreamItemsFromMission("","","") ) ;
25050: LD_STRING getStreamItemsFromMission("","","")
25052: PPUSH
25053: CALL_OW 559
// end ;
25057: LD_VAR 0 2
25061: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25062: LD_EXP 46
25066: PUSH
25067: LD_EXP 51
25071: AND
25072: IFFALSE 25196
25074: GO 25076
25076: DISABLE
25077: LD_INT 0
25079: PPUSH
25080: PPUSH
// begin enable ;
25081: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25082: LD_ADDR_VAR 0 2
25086: PUSH
25087: LD_INT 22
25089: PUSH
25090: LD_OWVAR 2
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 2
25101: PUSH
25102: LD_INT 34
25104: PUSH
25105: LD_INT 7
25107: PUSH
25108: EMPTY
25109: LIST
25110: LIST
25111: PUSH
25112: LD_INT 34
25114: PUSH
25115: LD_INT 45
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: PUSH
25122: LD_INT 34
25124: PUSH
25125: LD_INT 28
25127: PUSH
25128: EMPTY
25129: LIST
25130: LIST
25131: PUSH
25132: LD_INT 34
25134: PUSH
25135: LD_INT 47
25137: PUSH
25138: EMPTY
25139: LIST
25140: LIST
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: LIST
25146: LIST
25147: LIST
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PPUSH
25153: CALL_OW 69
25157: ST_TO_ADDR
// if not tmp then
25158: LD_VAR 0 2
25162: NOT
25163: IFFALSE 25167
// exit ;
25165: GO 25196
// for i in tmp do
25167: LD_ADDR_VAR 0 1
25171: PUSH
25172: LD_VAR 0 2
25176: PUSH
25177: FOR_IN
25178: IFFALSE 25194
// begin SetLives ( i , 0 ) ;
25180: LD_VAR 0 1
25184: PPUSH
25185: LD_INT 0
25187: PPUSH
25188: CALL_OW 234
// end ;
25192: GO 25177
25194: POP
25195: POP
// end ;
25196: PPOPN 2
25198: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25199: LD_EXP 46
25203: PUSH
25204: LD_EXP 52
25208: AND
25209: IFFALSE 25293
25211: GO 25213
25213: DISABLE
25214: LD_INT 0
25216: PPUSH
25217: PPUSH
// begin enable ;
25218: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25219: LD_ADDR_VAR 0 2
25223: PUSH
25224: LD_INT 22
25226: PUSH
25227: LD_OWVAR 2
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: PUSH
25236: LD_INT 32
25238: PUSH
25239: LD_INT 3
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: EMPTY
25247: LIST
25248: LIST
25249: PPUSH
25250: CALL_OW 69
25254: ST_TO_ADDR
// if not tmp then
25255: LD_VAR 0 2
25259: NOT
25260: IFFALSE 25264
// exit ;
25262: GO 25293
// for i in tmp do
25264: LD_ADDR_VAR 0 1
25268: PUSH
25269: LD_VAR 0 2
25273: PUSH
25274: FOR_IN
25275: IFFALSE 25291
// begin SetLives ( i , 0 ) ;
25277: LD_VAR 0 1
25281: PPUSH
25282: LD_INT 0
25284: PPUSH
25285: CALL_OW 234
// end ;
25289: GO 25274
25291: POP
25292: POP
// end ;
25293: PPOPN 2
25295: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25296: LD_EXP 46
25300: PUSH
25301: LD_EXP 49
25305: AND
25306: IFFALSE 25399
25308: GO 25310
25310: DISABLE
25311: LD_INT 0
25313: PPUSH
// begin enable ;
25314: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25315: LD_ADDR_VAR 0 1
25319: PUSH
25320: LD_INT 22
25322: PUSH
25323: LD_OWVAR 2
25327: PUSH
25328: EMPTY
25329: LIST
25330: LIST
25331: PUSH
25332: LD_INT 2
25334: PUSH
25335: LD_INT 25
25337: PUSH
25338: LD_INT 5
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: LD_INT 25
25347: PUSH
25348: LD_INT 9
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: PUSH
25355: LD_INT 25
25357: PUSH
25358: LD_INT 8
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PPUSH
25375: CALL_OW 69
25379: PUSH
25380: FOR_IN
25381: IFFALSE 25397
// begin SetClass ( i , 1 ) ;
25383: LD_VAR 0 1
25387: PPUSH
25388: LD_INT 1
25390: PPUSH
25391: CALL_OW 336
// end ;
25395: GO 25380
25397: POP
25398: POP
// end ;
25399: PPOPN 1
25401: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25402: LD_EXP 46
25406: PUSH
25407: LD_EXP 50
25411: AND
25412: PUSH
25413: LD_OWVAR 65
25417: PUSH
25418: LD_INT 7
25420: LESS
25421: AND
25422: IFFALSE 25436
25424: GO 25426
25426: DISABLE
// begin enable ;
25427: ENABLE
// game_speed := 7 ;
25428: LD_ADDR_OWVAR 65
25432: PUSH
25433: LD_INT 7
25435: ST_TO_ADDR
// end ;
25436: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25437: LD_EXP 46
25441: PUSH
25442: LD_EXP 53
25446: AND
25447: IFFALSE 25649
25449: GO 25451
25451: DISABLE
25452: LD_INT 0
25454: PPUSH
25455: PPUSH
25456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25457: LD_ADDR_VAR 0 3
25461: PUSH
25462: LD_INT 81
25464: PUSH
25465: LD_OWVAR 2
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 21
25476: PUSH
25477: LD_INT 1
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: PPUSH
25488: CALL_OW 69
25492: ST_TO_ADDR
// if not tmp then
25493: LD_VAR 0 3
25497: NOT
25498: IFFALSE 25502
// exit ;
25500: GO 25649
// if tmp > 5 then
25502: LD_VAR 0 3
25506: PUSH
25507: LD_INT 5
25509: GREATER
25510: IFFALSE 25522
// k := 5 else
25512: LD_ADDR_VAR 0 2
25516: PUSH
25517: LD_INT 5
25519: ST_TO_ADDR
25520: GO 25532
// k := tmp ;
25522: LD_ADDR_VAR 0 2
25526: PUSH
25527: LD_VAR 0 3
25531: ST_TO_ADDR
// for i := 1 to k do
25532: LD_ADDR_VAR 0 1
25536: PUSH
25537: DOUBLE
25538: LD_INT 1
25540: DEC
25541: ST_TO_ADDR
25542: LD_VAR 0 2
25546: PUSH
25547: FOR_TO
25548: IFFALSE 25647
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25550: LD_VAR 0 3
25554: PUSH
25555: LD_VAR 0 1
25559: ARRAY
25560: PPUSH
25561: LD_VAR 0 1
25565: PUSH
25566: LD_INT 4
25568: MOD
25569: PUSH
25570: LD_INT 1
25572: PLUS
25573: PPUSH
25574: CALL_OW 259
25578: PUSH
25579: LD_INT 10
25581: LESS
25582: IFFALSE 25645
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25584: LD_VAR 0 3
25588: PUSH
25589: LD_VAR 0 1
25593: ARRAY
25594: PPUSH
25595: LD_VAR 0 1
25599: PUSH
25600: LD_INT 4
25602: MOD
25603: PUSH
25604: LD_INT 1
25606: PLUS
25607: PPUSH
25608: LD_VAR 0 3
25612: PUSH
25613: LD_VAR 0 1
25617: ARRAY
25618: PPUSH
25619: LD_VAR 0 1
25623: PUSH
25624: LD_INT 4
25626: MOD
25627: PUSH
25628: LD_INT 1
25630: PLUS
25631: PPUSH
25632: CALL_OW 259
25636: PUSH
25637: LD_INT 1
25639: PLUS
25640: PPUSH
25641: CALL_OW 237
25645: GO 25547
25647: POP
25648: POP
// end ;
25649: PPOPN 3
25651: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25652: LD_EXP 46
25656: PUSH
25657: LD_EXP 54
25661: AND
25662: IFFALSE 25682
25664: GO 25666
25666: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25667: LD_INT 4
25669: PPUSH
25670: LD_OWVAR 2
25674: PPUSH
25675: LD_INT 0
25677: PPUSH
25678: CALL_OW 324
25682: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25683: LD_EXP 46
25687: PUSH
25688: LD_EXP 83
25692: AND
25693: IFFALSE 25713
25695: GO 25697
25697: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25698: LD_INT 19
25700: PPUSH
25701: LD_OWVAR 2
25705: PPUSH
25706: LD_INT 0
25708: PPUSH
25709: CALL_OW 324
25713: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25714: LD_EXP 46
25718: PUSH
25719: LD_EXP 55
25723: AND
25724: IFFALSE 25826
25726: GO 25728
25728: DISABLE
25729: LD_INT 0
25731: PPUSH
25732: PPUSH
// begin enable ;
25733: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25734: LD_ADDR_VAR 0 2
25738: PUSH
25739: LD_INT 22
25741: PUSH
25742: LD_OWVAR 2
25746: PUSH
25747: EMPTY
25748: LIST
25749: LIST
25750: PUSH
25751: LD_INT 2
25753: PUSH
25754: LD_INT 34
25756: PUSH
25757: LD_INT 11
25759: PUSH
25760: EMPTY
25761: LIST
25762: LIST
25763: PUSH
25764: LD_INT 34
25766: PUSH
25767: LD_INT 30
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: LIST
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PPUSH
25783: CALL_OW 69
25787: ST_TO_ADDR
// if not tmp then
25788: LD_VAR 0 2
25792: NOT
25793: IFFALSE 25797
// exit ;
25795: GO 25826
// for i in tmp do
25797: LD_ADDR_VAR 0 1
25801: PUSH
25802: LD_VAR 0 2
25806: PUSH
25807: FOR_IN
25808: IFFALSE 25824
// begin SetLives ( i , 0 ) ;
25810: LD_VAR 0 1
25814: PPUSH
25815: LD_INT 0
25817: PPUSH
25818: CALL_OW 234
// end ;
25822: GO 25807
25824: POP
25825: POP
// end ;
25826: PPOPN 2
25828: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25829: LD_EXP 46
25833: PUSH
25834: LD_EXP 56
25838: AND
25839: IFFALSE 25859
25841: GO 25843
25843: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25844: LD_INT 32
25846: PPUSH
25847: LD_OWVAR 2
25851: PPUSH
25852: LD_INT 0
25854: PPUSH
25855: CALL_OW 324
25859: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25860: LD_EXP 46
25864: PUSH
25865: LD_EXP 57
25869: AND
25870: IFFALSE 26051
25872: GO 25874
25874: DISABLE
25875: LD_INT 0
25877: PPUSH
25878: PPUSH
25879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25880: LD_ADDR_VAR 0 2
25884: PUSH
25885: LD_INT 22
25887: PUSH
25888: LD_OWVAR 2
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 33
25899: PUSH
25900: LD_INT 3
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PPUSH
25911: CALL_OW 69
25915: ST_TO_ADDR
// if not tmp then
25916: LD_VAR 0 2
25920: NOT
25921: IFFALSE 25925
// exit ;
25923: GO 26051
// side := 0 ;
25925: LD_ADDR_VAR 0 3
25929: PUSH
25930: LD_INT 0
25932: ST_TO_ADDR
// for i := 1 to 8 do
25933: LD_ADDR_VAR 0 1
25937: PUSH
25938: DOUBLE
25939: LD_INT 1
25941: DEC
25942: ST_TO_ADDR
25943: LD_INT 8
25945: PUSH
25946: FOR_TO
25947: IFFALSE 25995
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25949: LD_OWVAR 2
25953: PUSH
25954: LD_VAR 0 1
25958: NONEQUAL
25959: PUSH
25960: LD_OWVAR 2
25964: PPUSH
25965: LD_VAR 0 1
25969: PPUSH
25970: CALL_OW 81
25974: PUSH
25975: LD_INT 2
25977: EQUAL
25978: AND
25979: IFFALSE 25993
// begin side := i ;
25981: LD_ADDR_VAR 0 3
25985: PUSH
25986: LD_VAR 0 1
25990: ST_TO_ADDR
// break ;
25991: GO 25995
// end ;
25993: GO 25946
25995: POP
25996: POP
// if not side then
25997: LD_VAR 0 3
26001: NOT
26002: IFFALSE 26006
// exit ;
26004: GO 26051
// for i := 1 to tmp do
26006: LD_ADDR_VAR 0 1
26010: PUSH
26011: DOUBLE
26012: LD_INT 1
26014: DEC
26015: ST_TO_ADDR
26016: LD_VAR 0 2
26020: PUSH
26021: FOR_TO
26022: IFFALSE 26049
// if Prob ( 60 ) then
26024: LD_INT 60
26026: PPUSH
26027: CALL_OW 13
26031: IFFALSE 26047
// SetSide ( i , side ) ;
26033: LD_VAR 0 1
26037: PPUSH
26038: LD_VAR 0 3
26042: PPUSH
26043: CALL_OW 235
26047: GO 26021
26049: POP
26050: POP
// end ;
26051: PPOPN 3
26053: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26054: LD_EXP 46
26058: PUSH
26059: LD_EXP 59
26063: AND
26064: IFFALSE 26183
26066: GO 26068
26068: DISABLE
26069: LD_INT 0
26071: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26072: LD_ADDR_VAR 0 1
26076: PUSH
26077: LD_INT 22
26079: PUSH
26080: LD_OWVAR 2
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 21
26091: PUSH
26092: LD_INT 1
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: PUSH
26099: LD_INT 3
26101: PUSH
26102: LD_INT 23
26104: PUSH
26105: LD_INT 0
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: LIST
26120: PPUSH
26121: CALL_OW 69
26125: PUSH
26126: FOR_IN
26127: IFFALSE 26181
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26129: LD_VAR 0 1
26133: PPUSH
26134: CALL_OW 257
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: LD_INT 2
26144: PUSH
26145: LD_INT 3
26147: PUSH
26148: LD_INT 4
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: LIST
26155: LIST
26156: IN
26157: IFFALSE 26179
// SetClass ( un , rand ( 1 , 4 ) ) ;
26159: LD_VAR 0 1
26163: PPUSH
26164: LD_INT 1
26166: PPUSH
26167: LD_INT 4
26169: PPUSH
26170: CALL_OW 12
26174: PPUSH
26175: CALL_OW 336
26179: GO 26126
26181: POP
26182: POP
// end ;
26183: PPOPN 1
26185: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26186: LD_EXP 46
26190: PUSH
26191: LD_EXP 58
26195: AND
26196: IFFALSE 26275
26198: GO 26200
26200: DISABLE
26201: LD_INT 0
26203: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26204: LD_ADDR_VAR 0 1
26208: PUSH
26209: LD_INT 22
26211: PUSH
26212: LD_OWVAR 2
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: PUSH
26221: LD_INT 21
26223: PUSH
26224: LD_INT 3
26226: PUSH
26227: EMPTY
26228: LIST
26229: LIST
26230: PUSH
26231: EMPTY
26232: LIST
26233: LIST
26234: PPUSH
26235: CALL_OW 69
26239: ST_TO_ADDR
// if not tmp then
26240: LD_VAR 0 1
26244: NOT
26245: IFFALSE 26249
// exit ;
26247: GO 26275
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26249: LD_VAR 0 1
26253: PUSH
26254: LD_INT 1
26256: PPUSH
26257: LD_VAR 0 1
26261: PPUSH
26262: CALL_OW 12
26266: ARRAY
26267: PPUSH
26268: LD_INT 100
26270: PPUSH
26271: CALL_OW 234
// end ;
26275: PPOPN 1
26277: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26278: LD_EXP 46
26282: PUSH
26283: LD_EXP 60
26287: AND
26288: IFFALSE 26386
26290: GO 26292
26292: DISABLE
26293: LD_INT 0
26295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26296: LD_ADDR_VAR 0 1
26300: PUSH
26301: LD_INT 22
26303: PUSH
26304: LD_OWVAR 2
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 21
26315: PUSH
26316: LD_INT 1
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: PPUSH
26327: CALL_OW 69
26331: ST_TO_ADDR
// if not tmp then
26332: LD_VAR 0 1
26336: NOT
26337: IFFALSE 26341
// exit ;
26339: GO 26386
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26341: LD_VAR 0 1
26345: PUSH
26346: LD_INT 1
26348: PPUSH
26349: LD_VAR 0 1
26353: PPUSH
26354: CALL_OW 12
26358: ARRAY
26359: PPUSH
26360: LD_INT 1
26362: PPUSH
26363: LD_INT 4
26365: PPUSH
26366: CALL_OW 12
26370: PPUSH
26371: LD_INT 3000
26373: PPUSH
26374: LD_INT 9000
26376: PPUSH
26377: CALL_OW 12
26381: PPUSH
26382: CALL_OW 492
// end ;
26386: PPOPN 1
26388: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26389: LD_EXP 46
26393: PUSH
26394: LD_EXP 61
26398: AND
26399: IFFALSE 26419
26401: GO 26403
26403: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26404: LD_INT 1
26406: PPUSH
26407: LD_OWVAR 2
26411: PPUSH
26412: LD_INT 0
26414: PPUSH
26415: CALL_OW 324
26419: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26420: LD_EXP 46
26424: PUSH
26425: LD_EXP 62
26429: AND
26430: IFFALSE 26513
26432: GO 26434
26434: DISABLE
26435: LD_INT 0
26437: PPUSH
26438: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26439: LD_ADDR_VAR 0 2
26443: PUSH
26444: LD_INT 22
26446: PUSH
26447: LD_OWVAR 2
26451: PUSH
26452: EMPTY
26453: LIST
26454: LIST
26455: PUSH
26456: LD_INT 21
26458: PUSH
26459: LD_INT 3
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: EMPTY
26467: LIST
26468: LIST
26469: PPUSH
26470: CALL_OW 69
26474: ST_TO_ADDR
// if not tmp then
26475: LD_VAR 0 2
26479: NOT
26480: IFFALSE 26484
// exit ;
26482: GO 26513
// for i in tmp do
26484: LD_ADDR_VAR 0 1
26488: PUSH
26489: LD_VAR 0 2
26493: PUSH
26494: FOR_IN
26495: IFFALSE 26511
// SetBLevel ( i , 10 ) ;
26497: LD_VAR 0 1
26501: PPUSH
26502: LD_INT 10
26504: PPUSH
26505: CALL_OW 241
26509: GO 26494
26511: POP
26512: POP
// end ;
26513: PPOPN 2
26515: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26516: LD_EXP 46
26520: PUSH
26521: LD_EXP 63
26525: AND
26526: IFFALSE 26637
26528: GO 26530
26530: DISABLE
26531: LD_INT 0
26533: PPUSH
26534: PPUSH
26535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26536: LD_ADDR_VAR 0 3
26540: PUSH
26541: LD_INT 22
26543: PUSH
26544: LD_OWVAR 2
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: PUSH
26553: LD_INT 25
26555: PUSH
26556: LD_INT 1
26558: PUSH
26559: EMPTY
26560: LIST
26561: LIST
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PPUSH
26567: CALL_OW 69
26571: ST_TO_ADDR
// if not tmp then
26572: LD_VAR 0 3
26576: NOT
26577: IFFALSE 26581
// exit ;
26579: GO 26637
// un := tmp [ rand ( 1 , tmp ) ] ;
26581: LD_ADDR_VAR 0 2
26585: PUSH
26586: LD_VAR 0 3
26590: PUSH
26591: LD_INT 1
26593: PPUSH
26594: LD_VAR 0 3
26598: PPUSH
26599: CALL_OW 12
26603: ARRAY
26604: ST_TO_ADDR
// if Crawls ( un ) then
26605: LD_VAR 0 2
26609: PPUSH
26610: CALL_OW 318
26614: IFFALSE 26625
// ComWalk ( un ) ;
26616: LD_VAR 0 2
26620: PPUSH
26621: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26625: LD_VAR 0 2
26629: PPUSH
26630: LD_INT 5
26632: PPUSH
26633: CALL_OW 336
// end ;
26637: PPOPN 3
26639: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26640: LD_EXP 46
26644: PUSH
26645: LD_EXP 64
26649: AND
26650: PUSH
26651: LD_OWVAR 67
26655: PUSH
26656: LD_INT 4
26658: LESS
26659: AND
26660: IFFALSE 26679
26662: GO 26664
26664: DISABLE
// begin Difficulty := Difficulty + 1 ;
26665: LD_ADDR_OWVAR 67
26669: PUSH
26670: LD_OWVAR 67
26674: PUSH
26675: LD_INT 1
26677: PLUS
26678: ST_TO_ADDR
// end ;
26679: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26680: LD_EXP 46
26684: PUSH
26685: LD_EXP 65
26689: AND
26690: IFFALSE 26793
26692: GO 26694
26694: DISABLE
26695: LD_INT 0
26697: PPUSH
// begin for i := 1 to 5 do
26698: LD_ADDR_VAR 0 1
26702: PUSH
26703: DOUBLE
26704: LD_INT 1
26706: DEC
26707: ST_TO_ADDR
26708: LD_INT 5
26710: PUSH
26711: FOR_TO
26712: IFFALSE 26791
// begin uc_nation := nation_nature ;
26714: LD_ADDR_OWVAR 21
26718: PUSH
26719: LD_INT 0
26721: ST_TO_ADDR
// uc_side := 0 ;
26722: LD_ADDR_OWVAR 20
26726: PUSH
26727: LD_INT 0
26729: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26730: LD_ADDR_OWVAR 29
26734: PUSH
26735: LD_INT 12
26737: PUSH
26738: LD_INT 12
26740: PUSH
26741: EMPTY
26742: LIST
26743: LIST
26744: ST_TO_ADDR
// hc_agressivity := 20 ;
26745: LD_ADDR_OWVAR 35
26749: PUSH
26750: LD_INT 20
26752: ST_TO_ADDR
// hc_class := class_tiger ;
26753: LD_ADDR_OWVAR 28
26757: PUSH
26758: LD_INT 14
26760: ST_TO_ADDR
// hc_gallery :=  ;
26761: LD_ADDR_OWVAR 33
26765: PUSH
26766: LD_STRING 
26768: ST_TO_ADDR
// hc_name :=  ;
26769: LD_ADDR_OWVAR 26
26773: PUSH
26774: LD_STRING 
26776: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26777: CALL_OW 44
26781: PPUSH
26782: LD_INT 0
26784: PPUSH
26785: CALL_OW 51
// end ;
26789: GO 26711
26791: POP
26792: POP
// end ;
26793: PPOPN 1
26795: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26796: LD_EXP 46
26800: PUSH
26801: LD_EXP 66
26805: AND
26806: IFFALSE 26815
26808: GO 26810
26810: DISABLE
// StreamSibBomb ;
26811: CALL 26816 0 0
26815: END
// export function StreamSibBomb ; var i , x , y ; begin
26816: LD_INT 0
26818: PPUSH
26819: PPUSH
26820: PPUSH
26821: PPUSH
// result := false ;
26822: LD_ADDR_VAR 0 1
26826: PUSH
26827: LD_INT 0
26829: ST_TO_ADDR
// for i := 1 to 16 do
26830: LD_ADDR_VAR 0 2
26834: PUSH
26835: DOUBLE
26836: LD_INT 1
26838: DEC
26839: ST_TO_ADDR
26840: LD_INT 16
26842: PUSH
26843: FOR_TO
26844: IFFALSE 27043
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26846: LD_ADDR_VAR 0 3
26850: PUSH
26851: LD_INT 10
26853: PUSH
26854: LD_INT 20
26856: PUSH
26857: LD_INT 30
26859: PUSH
26860: LD_INT 40
26862: PUSH
26863: LD_INT 50
26865: PUSH
26866: LD_INT 60
26868: PUSH
26869: LD_INT 70
26871: PUSH
26872: LD_INT 80
26874: PUSH
26875: LD_INT 90
26877: PUSH
26878: LD_INT 100
26880: PUSH
26881: LD_INT 110
26883: PUSH
26884: LD_INT 120
26886: PUSH
26887: LD_INT 130
26889: PUSH
26890: LD_INT 140
26892: PUSH
26893: LD_INT 150
26895: PUSH
26896: EMPTY
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: PUSH
26913: LD_INT 1
26915: PPUSH
26916: LD_INT 15
26918: PPUSH
26919: CALL_OW 12
26923: ARRAY
26924: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26925: LD_ADDR_VAR 0 4
26929: PUSH
26930: LD_INT 10
26932: PUSH
26933: LD_INT 20
26935: PUSH
26936: LD_INT 30
26938: PUSH
26939: LD_INT 40
26941: PUSH
26942: LD_INT 50
26944: PUSH
26945: LD_INT 60
26947: PUSH
26948: LD_INT 70
26950: PUSH
26951: LD_INT 80
26953: PUSH
26954: LD_INT 90
26956: PUSH
26957: LD_INT 100
26959: PUSH
26960: LD_INT 110
26962: PUSH
26963: LD_INT 120
26965: PUSH
26966: LD_INT 130
26968: PUSH
26969: LD_INT 140
26971: PUSH
26972: LD_INT 150
26974: PUSH
26975: EMPTY
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: PPUSH
26995: LD_INT 15
26997: PPUSH
26998: CALL_OW 12
27002: ARRAY
27003: ST_TO_ADDR
// if ValidHex ( x , y ) then
27004: LD_VAR 0 3
27008: PPUSH
27009: LD_VAR 0 4
27013: PPUSH
27014: CALL_OW 488
27018: IFFALSE 27041
// begin result := [ x , y ] ;
27020: LD_ADDR_VAR 0 1
27024: PUSH
27025: LD_VAR 0 3
27029: PUSH
27030: LD_VAR 0 4
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: ST_TO_ADDR
// break ;
27039: GO 27043
// end ; end ;
27041: GO 26843
27043: POP
27044: POP
// if result then
27045: LD_VAR 0 1
27049: IFFALSE 27109
// begin ToLua ( playSibBomb() ) ;
27051: LD_STRING playSibBomb()
27053: PPUSH
27054: CALL_OW 559
// wait ( 0 0$14 ) ;
27058: LD_INT 490
27060: PPUSH
27061: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27065: LD_VAR 0 1
27069: PUSH
27070: LD_INT 1
27072: ARRAY
27073: PPUSH
27074: LD_VAR 0 1
27078: PUSH
27079: LD_INT 2
27081: ARRAY
27082: PPUSH
27083: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27087: LD_VAR 0 1
27091: PUSH
27092: LD_INT 1
27094: ARRAY
27095: PPUSH
27096: LD_VAR 0 1
27100: PUSH
27101: LD_INT 2
27103: ARRAY
27104: PPUSH
27105: CALL_OW 429
// end ; end ;
27109: LD_VAR 0 1
27113: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27114: LD_EXP 46
27118: PUSH
27119: LD_EXP 68
27123: AND
27124: IFFALSE 27136
27126: GO 27128
27128: DISABLE
// YouLost (  ) ;
27129: LD_STRING 
27131: PPUSH
27132: CALL_OW 104
27136: END
// every 0 0$1 trigger StreamModeActive and sFog do
27137: LD_EXP 46
27141: PUSH
27142: LD_EXP 67
27146: AND
27147: IFFALSE 27161
27149: GO 27151
27151: DISABLE
// FogOff ( your_side ) ;
27152: LD_OWVAR 2
27156: PPUSH
27157: CALL_OW 344
27161: END
// every 0 0$1 trigger StreamModeActive and sSun do
27162: LD_EXP 46
27166: PUSH
27167: LD_EXP 69
27171: AND
27172: IFFALSE 27200
27174: GO 27176
27176: DISABLE
// begin solar_recharge_percent := 0 ;
27177: LD_ADDR_OWVAR 79
27181: PUSH
27182: LD_INT 0
27184: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27185: LD_INT 10500
27187: PPUSH
27188: CALL_OW 67
// solar_recharge_percent := 100 ;
27192: LD_ADDR_OWVAR 79
27196: PUSH
27197: LD_INT 100
27199: ST_TO_ADDR
// end ;
27200: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27201: LD_EXP 46
27205: PUSH
27206: LD_EXP 70
27210: AND
27211: IFFALSE 27450
27213: GO 27215
27215: DISABLE
27216: LD_INT 0
27218: PPUSH
27219: PPUSH
27220: PPUSH
// begin tmp := [ ] ;
27221: LD_ADDR_VAR 0 3
27225: PUSH
27226: EMPTY
27227: ST_TO_ADDR
// for i := 1 to 6 do
27228: LD_ADDR_VAR 0 1
27232: PUSH
27233: DOUBLE
27234: LD_INT 1
27236: DEC
27237: ST_TO_ADDR
27238: LD_INT 6
27240: PUSH
27241: FOR_TO
27242: IFFALSE 27347
// begin uc_nation := nation_nature ;
27244: LD_ADDR_OWVAR 21
27248: PUSH
27249: LD_INT 0
27251: ST_TO_ADDR
// uc_side := 0 ;
27252: LD_ADDR_OWVAR 20
27256: PUSH
27257: LD_INT 0
27259: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27260: LD_ADDR_OWVAR 29
27264: PUSH
27265: LD_INT 12
27267: PUSH
27268: LD_INT 12
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: ST_TO_ADDR
// hc_agressivity := 20 ;
27275: LD_ADDR_OWVAR 35
27279: PUSH
27280: LD_INT 20
27282: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27283: LD_ADDR_OWVAR 28
27287: PUSH
27288: LD_INT 17
27290: ST_TO_ADDR
// hc_gallery :=  ;
27291: LD_ADDR_OWVAR 33
27295: PUSH
27296: LD_STRING 
27298: ST_TO_ADDR
// hc_name :=  ;
27299: LD_ADDR_OWVAR 26
27303: PUSH
27304: LD_STRING 
27306: ST_TO_ADDR
// un := CreateHuman ;
27307: LD_ADDR_VAR 0 2
27311: PUSH
27312: CALL_OW 44
27316: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27317: LD_VAR 0 2
27321: PPUSH
27322: LD_INT 1
27324: PPUSH
27325: CALL_OW 51
// tmp := tmp ^ un ;
27329: LD_ADDR_VAR 0 3
27333: PUSH
27334: LD_VAR 0 3
27338: PUSH
27339: LD_VAR 0 2
27343: ADD
27344: ST_TO_ADDR
// end ;
27345: GO 27241
27347: POP
27348: POP
// repeat wait ( 0 0$1 ) ;
27349: LD_INT 35
27351: PPUSH
27352: CALL_OW 67
// for un in tmp do
27356: LD_ADDR_VAR 0 2
27360: PUSH
27361: LD_VAR 0 3
27365: PUSH
27366: FOR_IN
27367: IFFALSE 27441
// begin if IsDead ( un ) then
27369: LD_VAR 0 2
27373: PPUSH
27374: CALL_OW 301
27378: IFFALSE 27398
// begin tmp := tmp diff un ;
27380: LD_ADDR_VAR 0 3
27384: PUSH
27385: LD_VAR 0 3
27389: PUSH
27390: LD_VAR 0 2
27394: DIFF
27395: ST_TO_ADDR
// continue ;
27396: GO 27366
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27398: LD_VAR 0 2
27402: PPUSH
27403: LD_INT 3
27405: PUSH
27406: LD_INT 22
27408: PUSH
27409: LD_INT 0
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PPUSH
27420: CALL_OW 69
27424: PPUSH
27425: LD_VAR 0 2
27429: PPUSH
27430: CALL_OW 74
27434: PPUSH
27435: CALL_OW 115
// end ;
27439: GO 27366
27441: POP
27442: POP
// until not tmp ;
27443: LD_VAR 0 3
27447: NOT
27448: IFFALSE 27349
// end ;
27450: PPOPN 3
27452: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27453: LD_EXP 46
27457: PUSH
27458: LD_EXP 71
27462: AND
27463: IFFALSE 27517
27465: GO 27467
27467: DISABLE
// begin ToLua ( displayTroll(); ) ;
27468: LD_STRING displayTroll();
27470: PPUSH
27471: CALL_OW 559
// wait ( 3 3$00 ) ;
27475: LD_INT 6300
27477: PPUSH
27478: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27482: LD_STRING hideTroll();
27484: PPUSH
27485: CALL_OW 559
// wait ( 1 1$00 ) ;
27489: LD_INT 2100
27491: PPUSH
27492: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27496: LD_STRING displayTroll();
27498: PPUSH
27499: CALL_OW 559
// wait ( 1 1$00 ) ;
27503: LD_INT 2100
27505: PPUSH
27506: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27510: LD_STRING hideTroll();
27512: PPUSH
27513: CALL_OW 559
// end ;
27517: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27518: LD_EXP 46
27522: PUSH
27523: LD_EXP 72
27527: AND
27528: IFFALSE 27591
27530: GO 27532
27532: DISABLE
27533: LD_INT 0
27535: PPUSH
// begin p := 0 ;
27536: LD_ADDR_VAR 0 1
27540: PUSH
27541: LD_INT 0
27543: ST_TO_ADDR
// repeat game_speed := 1 ;
27544: LD_ADDR_OWVAR 65
27548: PUSH
27549: LD_INT 1
27551: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27552: LD_INT 35
27554: PPUSH
27555: CALL_OW 67
// p := p + 1 ;
27559: LD_ADDR_VAR 0 1
27563: PUSH
27564: LD_VAR 0 1
27568: PUSH
27569: LD_INT 1
27571: PLUS
27572: ST_TO_ADDR
// until p >= 60 ;
27573: LD_VAR 0 1
27577: PUSH
27578: LD_INT 60
27580: GREATEREQUAL
27581: IFFALSE 27544
// game_speed := 4 ;
27583: LD_ADDR_OWVAR 65
27587: PUSH
27588: LD_INT 4
27590: ST_TO_ADDR
// end ;
27591: PPOPN 1
27593: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27594: LD_EXP 46
27598: PUSH
27599: LD_EXP 73
27603: AND
27604: IFFALSE 27750
27606: GO 27608
27608: DISABLE
27609: LD_INT 0
27611: PPUSH
27612: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27613: LD_ADDR_VAR 0 1
27617: PUSH
27618: LD_INT 22
27620: PUSH
27621: LD_OWVAR 2
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 2
27632: PUSH
27633: LD_INT 30
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 30
27645: PUSH
27646: LD_INT 1
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: LIST
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PPUSH
27662: CALL_OW 69
27666: ST_TO_ADDR
// if not depot then
27667: LD_VAR 0 1
27671: NOT
27672: IFFALSE 27676
// exit ;
27674: GO 27750
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27676: LD_ADDR_VAR 0 2
27680: PUSH
27681: LD_VAR 0 1
27685: PUSH
27686: LD_INT 1
27688: PPUSH
27689: LD_VAR 0 1
27693: PPUSH
27694: CALL_OW 12
27698: ARRAY
27699: PPUSH
27700: CALL_OW 274
27704: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27705: LD_VAR 0 2
27709: PPUSH
27710: LD_INT 1
27712: PPUSH
27713: LD_INT 0
27715: PPUSH
27716: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27720: LD_VAR 0 2
27724: PPUSH
27725: LD_INT 2
27727: PPUSH
27728: LD_INT 0
27730: PPUSH
27731: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27735: LD_VAR 0 2
27739: PPUSH
27740: LD_INT 3
27742: PPUSH
27743: LD_INT 0
27745: PPUSH
27746: CALL_OW 277
// end ;
27750: PPOPN 2
27752: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27753: LD_EXP 46
27757: PUSH
27758: LD_EXP 74
27762: AND
27763: IFFALSE 27860
27765: GO 27767
27767: DISABLE
27768: LD_INT 0
27770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27771: LD_ADDR_VAR 0 1
27775: PUSH
27776: LD_INT 22
27778: PUSH
27779: LD_OWVAR 2
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 21
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 3
27800: PUSH
27801: LD_INT 23
27803: PUSH
27804: LD_INT 0
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: EMPTY
27812: LIST
27813: LIST
27814: PUSH
27815: EMPTY
27816: LIST
27817: LIST
27818: LIST
27819: PPUSH
27820: CALL_OW 69
27824: ST_TO_ADDR
// if not tmp then
27825: LD_VAR 0 1
27829: NOT
27830: IFFALSE 27834
// exit ;
27832: GO 27860
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27834: LD_VAR 0 1
27838: PUSH
27839: LD_INT 1
27841: PPUSH
27842: LD_VAR 0 1
27846: PPUSH
27847: CALL_OW 12
27851: ARRAY
27852: PPUSH
27853: LD_INT 200
27855: PPUSH
27856: CALL_OW 234
// end ;
27860: PPOPN 1
27862: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27863: LD_EXP 46
27867: PUSH
27868: LD_EXP 75
27872: AND
27873: IFFALSE 27952
27875: GO 27877
27877: DISABLE
27878: LD_INT 0
27880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27881: LD_ADDR_VAR 0 1
27885: PUSH
27886: LD_INT 22
27888: PUSH
27889: LD_OWVAR 2
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: PUSH
27898: LD_INT 21
27900: PUSH
27901: LD_INT 2
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: PPUSH
27912: CALL_OW 69
27916: ST_TO_ADDR
// if not tmp then
27917: LD_VAR 0 1
27921: NOT
27922: IFFALSE 27926
// exit ;
27924: GO 27952
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27926: LD_VAR 0 1
27930: PUSH
27931: LD_INT 1
27933: PPUSH
27934: LD_VAR 0 1
27938: PPUSH
27939: CALL_OW 12
27943: ARRAY
27944: PPUSH
27945: LD_INT 60
27947: PPUSH
27948: CALL_OW 234
// end ;
27952: PPOPN 1
27954: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27955: LD_EXP 46
27959: PUSH
27960: LD_EXP 76
27964: AND
27965: IFFALSE 28064
27967: GO 27969
27969: DISABLE
27970: LD_INT 0
27972: PPUSH
27973: PPUSH
// begin enable ;
27974: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27975: LD_ADDR_VAR 0 1
27979: PUSH
27980: LD_INT 22
27982: PUSH
27983: LD_OWVAR 2
27987: PUSH
27988: EMPTY
27989: LIST
27990: LIST
27991: PUSH
27992: LD_INT 61
27994: PUSH
27995: EMPTY
27996: LIST
27997: PUSH
27998: LD_INT 33
28000: PUSH
28001: LD_INT 2
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: EMPTY
28009: LIST
28010: LIST
28011: LIST
28012: PPUSH
28013: CALL_OW 69
28017: ST_TO_ADDR
// if not tmp then
28018: LD_VAR 0 1
28022: NOT
28023: IFFALSE 28027
// exit ;
28025: GO 28064
// for i in tmp do
28027: LD_ADDR_VAR 0 2
28031: PUSH
28032: LD_VAR 0 1
28036: PUSH
28037: FOR_IN
28038: IFFALSE 28062
// if IsControledBy ( i ) then
28040: LD_VAR 0 2
28044: PPUSH
28045: CALL_OW 312
28049: IFFALSE 28060
// ComUnlink ( i ) ;
28051: LD_VAR 0 2
28055: PPUSH
28056: CALL_OW 136
28060: GO 28037
28062: POP
28063: POP
// end ;
28064: PPOPN 2
28066: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28067: LD_EXP 46
28071: PUSH
28072: LD_EXP 77
28076: AND
28077: IFFALSE 28217
28079: GO 28081
28081: DISABLE
28082: LD_INT 0
28084: PPUSH
28085: PPUSH
// begin ToLua ( displayPowell(); ) ;
28086: LD_STRING displayPowell();
28088: PPUSH
28089: CALL_OW 559
// uc_side := 0 ;
28093: LD_ADDR_OWVAR 20
28097: PUSH
28098: LD_INT 0
28100: ST_TO_ADDR
// uc_nation := 2 ;
28101: LD_ADDR_OWVAR 21
28105: PUSH
28106: LD_INT 2
28108: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28109: LD_ADDR_OWVAR 37
28113: PUSH
28114: LD_INT 14
28116: ST_TO_ADDR
// vc_engine := engine_siberite ;
28117: LD_ADDR_OWVAR 39
28121: PUSH
28122: LD_INT 3
28124: ST_TO_ADDR
// vc_control := control_apeman ;
28125: LD_ADDR_OWVAR 38
28129: PUSH
28130: LD_INT 5
28132: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28133: LD_ADDR_OWVAR 40
28137: PUSH
28138: LD_INT 29
28140: ST_TO_ADDR
// un := CreateVehicle ;
28141: LD_ADDR_VAR 0 2
28145: PUSH
28146: CALL_OW 45
28150: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28151: LD_VAR 0 2
28155: PPUSH
28156: LD_INT 1
28158: PPUSH
28159: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28163: LD_INT 35
28165: PPUSH
28166: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28170: LD_VAR 0 2
28174: PPUSH
28175: LD_INT 22
28177: PUSH
28178: LD_OWVAR 2
28182: PUSH
28183: EMPTY
28184: LIST
28185: LIST
28186: PPUSH
28187: CALL_OW 69
28191: PPUSH
28192: LD_VAR 0 2
28196: PPUSH
28197: CALL_OW 74
28201: PPUSH
28202: CALL_OW 115
// until IsDead ( un ) ;
28206: LD_VAR 0 2
28210: PPUSH
28211: CALL_OW 301
28215: IFFALSE 28163
// end ;
28217: PPOPN 2
28219: END
// every 0 0$1 trigger StreamModeActive and sStu do
28220: LD_EXP 46
28224: PUSH
28225: LD_EXP 85
28229: AND
28230: IFFALSE 28246
28232: GO 28234
28234: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28235: LD_STRING displayStucuk();
28237: PPUSH
28238: CALL_OW 559
// ResetFog ;
28242: CALL_OW 335
// end ;
28246: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28247: LD_EXP 46
28251: PUSH
28252: LD_EXP 78
28256: AND
28257: IFFALSE 28398
28259: GO 28261
28261: DISABLE
28262: LD_INT 0
28264: PPUSH
28265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28266: LD_ADDR_VAR 0 2
28270: PUSH
28271: LD_INT 22
28273: PUSH
28274: LD_OWVAR 2
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 21
28285: PUSH
28286: LD_INT 1
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PPUSH
28297: CALL_OW 69
28301: ST_TO_ADDR
// if not tmp then
28302: LD_VAR 0 2
28306: NOT
28307: IFFALSE 28311
// exit ;
28309: GO 28398
// un := tmp [ rand ( 1 , tmp ) ] ;
28311: LD_ADDR_VAR 0 1
28315: PUSH
28316: LD_VAR 0 2
28320: PUSH
28321: LD_INT 1
28323: PPUSH
28324: LD_VAR 0 2
28328: PPUSH
28329: CALL_OW 12
28333: ARRAY
28334: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28335: LD_VAR 0 1
28339: PPUSH
28340: LD_INT 0
28342: PPUSH
28343: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28347: LD_VAR 0 1
28351: PPUSH
28352: LD_OWVAR 3
28356: PUSH
28357: LD_VAR 0 1
28361: DIFF
28362: PPUSH
28363: LD_VAR 0 1
28367: PPUSH
28368: CALL_OW 74
28372: PPUSH
28373: CALL_OW 115
// wait ( 0 0$20 ) ;
28377: LD_INT 700
28379: PPUSH
28380: CALL_OW 67
// SetSide ( un , your_side ) ;
28384: LD_VAR 0 1
28388: PPUSH
28389: LD_OWVAR 2
28393: PPUSH
28394: CALL_OW 235
// end ;
28398: PPOPN 2
28400: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28401: LD_EXP 46
28405: PUSH
28406: LD_EXP 79
28410: AND
28411: IFFALSE 28517
28413: GO 28415
28415: DISABLE
28416: LD_INT 0
28418: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28419: LD_ADDR_VAR 0 1
28423: PUSH
28424: LD_INT 22
28426: PUSH
28427: LD_OWVAR 2
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 2
28438: PUSH
28439: LD_INT 30
28441: PUSH
28442: LD_INT 0
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 30
28451: PUSH
28452: LD_INT 1
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: LIST
28463: PUSH
28464: EMPTY
28465: LIST
28466: LIST
28467: PPUSH
28468: CALL_OW 69
28472: ST_TO_ADDR
// if not depot then
28473: LD_VAR 0 1
28477: NOT
28478: IFFALSE 28482
// exit ;
28480: GO 28517
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28482: LD_VAR 0 1
28486: PUSH
28487: LD_INT 1
28489: ARRAY
28490: PPUSH
28491: CALL_OW 250
28495: PPUSH
28496: LD_VAR 0 1
28500: PUSH
28501: LD_INT 1
28503: ARRAY
28504: PPUSH
28505: CALL_OW 251
28509: PPUSH
28510: LD_INT 70
28512: PPUSH
28513: CALL_OW 495
// end ;
28517: PPOPN 1
28519: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28520: LD_EXP 46
28524: PUSH
28525: LD_EXP 80
28529: AND
28530: IFFALSE 28741
28532: GO 28534
28534: DISABLE
28535: LD_INT 0
28537: PPUSH
28538: PPUSH
28539: PPUSH
28540: PPUSH
28541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28542: LD_ADDR_VAR 0 5
28546: PUSH
28547: LD_INT 22
28549: PUSH
28550: LD_OWVAR 2
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: LD_INT 21
28561: PUSH
28562: LD_INT 1
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PPUSH
28573: CALL_OW 69
28577: ST_TO_ADDR
// if not tmp then
28578: LD_VAR 0 5
28582: NOT
28583: IFFALSE 28587
// exit ;
28585: GO 28741
// for i in tmp do
28587: LD_ADDR_VAR 0 1
28591: PUSH
28592: LD_VAR 0 5
28596: PUSH
28597: FOR_IN
28598: IFFALSE 28739
// begin d := rand ( 0 , 5 ) ;
28600: LD_ADDR_VAR 0 4
28604: PUSH
28605: LD_INT 0
28607: PPUSH
28608: LD_INT 5
28610: PPUSH
28611: CALL_OW 12
28615: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28616: LD_ADDR_VAR 0 2
28620: PUSH
28621: LD_VAR 0 1
28625: PPUSH
28626: CALL_OW 250
28630: PPUSH
28631: LD_VAR 0 4
28635: PPUSH
28636: LD_INT 3
28638: PPUSH
28639: LD_INT 12
28641: PPUSH
28642: CALL_OW 12
28646: PPUSH
28647: CALL_OW 272
28651: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28652: LD_ADDR_VAR 0 3
28656: PUSH
28657: LD_VAR 0 1
28661: PPUSH
28662: CALL_OW 251
28666: PPUSH
28667: LD_VAR 0 4
28671: PPUSH
28672: LD_INT 3
28674: PPUSH
28675: LD_INT 12
28677: PPUSH
28678: CALL_OW 12
28682: PPUSH
28683: CALL_OW 273
28687: ST_TO_ADDR
// if ValidHex ( x , y ) then
28688: LD_VAR 0 2
28692: PPUSH
28693: LD_VAR 0 3
28697: PPUSH
28698: CALL_OW 488
28702: IFFALSE 28737
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28704: LD_VAR 0 1
28708: PPUSH
28709: LD_VAR 0 2
28713: PPUSH
28714: LD_VAR 0 3
28718: PPUSH
28719: LD_INT 3
28721: PPUSH
28722: LD_INT 6
28724: PPUSH
28725: CALL_OW 12
28729: PPUSH
28730: LD_INT 1
28732: PPUSH
28733: CALL_OW 483
// end ;
28737: GO 28597
28739: POP
28740: POP
// end ;
28741: PPOPN 5
28743: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28744: LD_EXP 46
28748: PUSH
28749: LD_EXP 81
28753: AND
28754: IFFALSE 28848
28756: GO 28758
28758: DISABLE
28759: LD_INT 0
28761: PPUSH
28762: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28763: LD_ADDR_VAR 0 2
28767: PUSH
28768: LD_INT 22
28770: PUSH
28771: LD_OWVAR 2
28775: PUSH
28776: EMPTY
28777: LIST
28778: LIST
28779: PUSH
28780: LD_INT 32
28782: PUSH
28783: LD_INT 1
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 21
28792: PUSH
28793: LD_INT 2
28795: PUSH
28796: EMPTY
28797: LIST
28798: LIST
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: LIST
28804: PPUSH
28805: CALL_OW 69
28809: ST_TO_ADDR
// if not tmp then
28810: LD_VAR 0 2
28814: NOT
28815: IFFALSE 28819
// exit ;
28817: GO 28848
// for i in tmp do
28819: LD_ADDR_VAR 0 1
28823: PUSH
28824: LD_VAR 0 2
28828: PUSH
28829: FOR_IN
28830: IFFALSE 28846
// SetFuel ( i , 0 ) ;
28832: LD_VAR 0 1
28836: PPUSH
28837: LD_INT 0
28839: PPUSH
28840: CALL_OW 240
28844: GO 28829
28846: POP
28847: POP
// end ;
28848: PPOPN 2
28850: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28851: LD_EXP 46
28855: PUSH
28856: LD_EXP 82
28860: AND
28861: IFFALSE 28927
28863: GO 28865
28865: DISABLE
28866: LD_INT 0
28868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28869: LD_ADDR_VAR 0 1
28873: PUSH
28874: LD_INT 22
28876: PUSH
28877: LD_OWVAR 2
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 30
28888: PUSH
28889: LD_INT 29
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: EMPTY
28897: LIST
28898: LIST
28899: PPUSH
28900: CALL_OW 69
28904: ST_TO_ADDR
// if not tmp then
28905: LD_VAR 0 1
28909: NOT
28910: IFFALSE 28914
// exit ;
28912: GO 28927
// DestroyUnit ( tmp [ 1 ] ) ;
28914: LD_VAR 0 1
28918: PUSH
28919: LD_INT 1
28921: ARRAY
28922: PPUSH
28923: CALL_OW 65
// end ;
28927: PPOPN 1
28929: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28930: LD_EXP 46
28934: PUSH
28935: LD_EXP 84
28939: AND
28940: IFFALSE 29069
28942: GO 28944
28944: DISABLE
28945: LD_INT 0
28947: PPUSH
// begin uc_side := 0 ;
28948: LD_ADDR_OWVAR 20
28952: PUSH
28953: LD_INT 0
28955: ST_TO_ADDR
// uc_nation := nation_arabian ;
28956: LD_ADDR_OWVAR 21
28960: PUSH
28961: LD_INT 2
28963: ST_TO_ADDR
// hc_gallery :=  ;
28964: LD_ADDR_OWVAR 33
28968: PUSH
28969: LD_STRING 
28971: ST_TO_ADDR
// hc_name :=  ;
28972: LD_ADDR_OWVAR 26
28976: PUSH
28977: LD_STRING 
28979: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28980: LD_INT 1
28982: PPUSH
28983: LD_INT 11
28985: PPUSH
28986: LD_INT 10
28988: PPUSH
28989: CALL_OW 380
// un := CreateHuman ;
28993: LD_ADDR_VAR 0 1
28997: PUSH
28998: CALL_OW 44
29002: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29003: LD_VAR 0 1
29007: PPUSH
29008: LD_INT 1
29010: PPUSH
29011: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29015: LD_INT 35
29017: PPUSH
29018: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29022: LD_VAR 0 1
29026: PPUSH
29027: LD_INT 22
29029: PUSH
29030: LD_OWVAR 2
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PPUSH
29039: CALL_OW 69
29043: PPUSH
29044: LD_VAR 0 1
29048: PPUSH
29049: CALL_OW 74
29053: PPUSH
29054: CALL_OW 115
// until IsDead ( un ) ;
29058: LD_VAR 0 1
29062: PPUSH
29063: CALL_OW 301
29067: IFFALSE 29015
// end ;
29069: PPOPN 1
29071: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29072: LD_EXP 46
29076: PUSH
29077: LD_EXP 86
29081: AND
29082: IFFALSE 29094
29084: GO 29086
29086: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29087: LD_STRING earthquake(getX(game), 0, 32)
29089: PPUSH
29090: CALL_OW 559
29094: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29095: LD_EXP 46
29099: PUSH
29100: LD_EXP 87
29104: AND
29105: IFFALSE 29196
29107: GO 29109
29109: DISABLE
29110: LD_INT 0
29112: PPUSH
// begin enable ;
29113: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29114: LD_ADDR_VAR 0 1
29118: PUSH
29119: LD_INT 22
29121: PUSH
29122: LD_OWVAR 2
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: PUSH
29131: LD_INT 21
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: EMPTY
29138: LIST
29139: LIST
29140: PUSH
29141: LD_INT 33
29143: PUSH
29144: LD_INT 3
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: EMPTY
29152: LIST
29153: LIST
29154: LIST
29155: PPUSH
29156: CALL_OW 69
29160: ST_TO_ADDR
// if not tmp then
29161: LD_VAR 0 1
29165: NOT
29166: IFFALSE 29170
// exit ;
29168: GO 29196
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29170: LD_VAR 0 1
29174: PUSH
29175: LD_INT 1
29177: PPUSH
29178: LD_VAR 0 1
29182: PPUSH
29183: CALL_OW 12
29187: ARRAY
29188: PPUSH
29189: LD_INT 1
29191: PPUSH
29192: CALL_OW 234
// end ;
29196: PPOPN 1
29198: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29199: LD_EXP 46
29203: PUSH
29204: LD_EXP 88
29208: AND
29209: IFFALSE 29350
29211: GO 29213
29213: DISABLE
29214: LD_INT 0
29216: PPUSH
29217: PPUSH
29218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29219: LD_ADDR_VAR 0 3
29223: PUSH
29224: LD_INT 22
29226: PUSH
29227: LD_OWVAR 2
29231: PUSH
29232: EMPTY
29233: LIST
29234: LIST
29235: PUSH
29236: LD_INT 25
29238: PUSH
29239: LD_INT 1
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PPUSH
29250: CALL_OW 69
29254: ST_TO_ADDR
// if not tmp then
29255: LD_VAR 0 3
29259: NOT
29260: IFFALSE 29264
// exit ;
29262: GO 29350
// un := tmp [ rand ( 1 , tmp ) ] ;
29264: LD_ADDR_VAR 0 2
29268: PUSH
29269: LD_VAR 0 3
29273: PUSH
29274: LD_INT 1
29276: PPUSH
29277: LD_VAR 0 3
29281: PPUSH
29282: CALL_OW 12
29286: ARRAY
29287: ST_TO_ADDR
// if Crawls ( un ) then
29288: LD_VAR 0 2
29292: PPUSH
29293: CALL_OW 318
29297: IFFALSE 29308
// ComWalk ( un ) ;
29299: LD_VAR 0 2
29303: PPUSH
29304: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29308: LD_VAR 0 2
29312: PPUSH
29313: LD_INT 9
29315: PPUSH
29316: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29320: LD_INT 28
29322: PPUSH
29323: LD_OWVAR 2
29327: PPUSH
29328: LD_INT 2
29330: PPUSH
29331: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29335: LD_INT 29
29337: PPUSH
29338: LD_OWVAR 2
29342: PPUSH
29343: LD_INT 2
29345: PPUSH
29346: CALL_OW 322
// end ;
29350: PPOPN 3
29352: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29353: LD_EXP 46
29357: PUSH
29358: LD_EXP 89
29362: AND
29363: IFFALSE 29474
29365: GO 29367
29367: DISABLE
29368: LD_INT 0
29370: PPUSH
29371: PPUSH
29372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29373: LD_ADDR_VAR 0 3
29377: PUSH
29378: LD_INT 22
29380: PUSH
29381: LD_OWVAR 2
29385: PUSH
29386: EMPTY
29387: LIST
29388: LIST
29389: PUSH
29390: LD_INT 25
29392: PUSH
29393: LD_INT 1
29395: PUSH
29396: EMPTY
29397: LIST
29398: LIST
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PPUSH
29404: CALL_OW 69
29408: ST_TO_ADDR
// if not tmp then
29409: LD_VAR 0 3
29413: NOT
29414: IFFALSE 29418
// exit ;
29416: GO 29474
// un := tmp [ rand ( 1 , tmp ) ] ;
29418: LD_ADDR_VAR 0 2
29422: PUSH
29423: LD_VAR 0 3
29427: PUSH
29428: LD_INT 1
29430: PPUSH
29431: LD_VAR 0 3
29435: PPUSH
29436: CALL_OW 12
29440: ARRAY
29441: ST_TO_ADDR
// if Crawls ( un ) then
29442: LD_VAR 0 2
29446: PPUSH
29447: CALL_OW 318
29451: IFFALSE 29462
// ComWalk ( un ) ;
29453: LD_VAR 0 2
29457: PPUSH
29458: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29462: LD_VAR 0 2
29466: PPUSH
29467: LD_INT 8
29469: PPUSH
29470: CALL_OW 336
// end ;
29474: PPOPN 3
29476: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29477: LD_EXP 46
29481: PUSH
29482: LD_EXP 90
29486: AND
29487: IFFALSE 29631
29489: GO 29491
29491: DISABLE
29492: LD_INT 0
29494: PPUSH
29495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29496: LD_ADDR_VAR 0 2
29500: PUSH
29501: LD_INT 22
29503: PUSH
29504: LD_OWVAR 2
29508: PUSH
29509: EMPTY
29510: LIST
29511: LIST
29512: PUSH
29513: LD_INT 21
29515: PUSH
29516: LD_INT 2
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: PUSH
29523: LD_INT 2
29525: PUSH
29526: LD_INT 34
29528: PUSH
29529: LD_INT 12
29531: PUSH
29532: EMPTY
29533: LIST
29534: LIST
29535: PUSH
29536: LD_INT 34
29538: PUSH
29539: LD_INT 51
29541: PUSH
29542: EMPTY
29543: LIST
29544: LIST
29545: PUSH
29546: LD_INT 34
29548: PUSH
29549: LD_INT 32
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: PUSH
29556: EMPTY
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: PUSH
29562: EMPTY
29563: LIST
29564: LIST
29565: LIST
29566: PPUSH
29567: CALL_OW 69
29571: ST_TO_ADDR
// if not tmp then
29572: LD_VAR 0 2
29576: NOT
29577: IFFALSE 29581
// exit ;
29579: GO 29631
// for i in tmp do
29581: LD_ADDR_VAR 0 1
29585: PUSH
29586: LD_VAR 0 2
29590: PUSH
29591: FOR_IN
29592: IFFALSE 29629
// if GetCargo ( i , mat_artifact ) = 0 then
29594: LD_VAR 0 1
29598: PPUSH
29599: LD_INT 4
29601: PPUSH
29602: CALL_OW 289
29606: PUSH
29607: LD_INT 0
29609: EQUAL
29610: IFFALSE 29627
// SetCargo ( i , mat_siberit , 100 ) ;
29612: LD_VAR 0 1
29616: PPUSH
29617: LD_INT 3
29619: PPUSH
29620: LD_INT 100
29622: PPUSH
29623: CALL_OW 290
29627: GO 29591
29629: POP
29630: POP
// end ;
29631: PPOPN 2
29633: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29634: LD_EXP 46
29638: PUSH
29639: LD_EXP 91
29643: AND
29644: IFFALSE 29827
29646: GO 29648
29648: DISABLE
29649: LD_INT 0
29651: PPUSH
29652: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29653: LD_ADDR_VAR 0 2
29657: PUSH
29658: LD_INT 22
29660: PUSH
29661: LD_OWVAR 2
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PPUSH
29670: CALL_OW 69
29674: ST_TO_ADDR
// if not tmp then
29675: LD_VAR 0 2
29679: NOT
29680: IFFALSE 29684
// exit ;
29682: GO 29827
// for i := 1 to 2 do
29684: LD_ADDR_VAR 0 1
29688: PUSH
29689: DOUBLE
29690: LD_INT 1
29692: DEC
29693: ST_TO_ADDR
29694: LD_INT 2
29696: PUSH
29697: FOR_TO
29698: IFFALSE 29825
// begin uc_side := your_side ;
29700: LD_ADDR_OWVAR 20
29704: PUSH
29705: LD_OWVAR 2
29709: ST_TO_ADDR
// uc_nation := nation_american ;
29710: LD_ADDR_OWVAR 21
29714: PUSH
29715: LD_INT 1
29717: ST_TO_ADDR
// vc_chassis := us_morphling ;
29718: LD_ADDR_OWVAR 37
29722: PUSH
29723: LD_INT 5
29725: ST_TO_ADDR
// vc_engine := engine_siberite ;
29726: LD_ADDR_OWVAR 39
29730: PUSH
29731: LD_INT 3
29733: ST_TO_ADDR
// vc_control := control_computer ;
29734: LD_ADDR_OWVAR 38
29738: PUSH
29739: LD_INT 3
29741: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29742: LD_ADDR_OWVAR 40
29746: PUSH
29747: LD_INT 10
29749: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29750: LD_VAR 0 2
29754: PUSH
29755: LD_INT 1
29757: ARRAY
29758: PPUSH
29759: CALL_OW 310
29763: NOT
29764: IFFALSE 29811
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29766: CALL_OW 45
29770: PPUSH
29771: LD_VAR 0 2
29775: PUSH
29776: LD_INT 1
29778: ARRAY
29779: PPUSH
29780: CALL_OW 250
29784: PPUSH
29785: LD_VAR 0 2
29789: PUSH
29790: LD_INT 1
29792: ARRAY
29793: PPUSH
29794: CALL_OW 251
29798: PPUSH
29799: LD_INT 12
29801: PPUSH
29802: LD_INT 1
29804: PPUSH
29805: CALL_OW 50
29809: GO 29823
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29811: CALL_OW 45
29815: PPUSH
29816: LD_INT 1
29818: PPUSH
29819: CALL_OW 51
// end ;
29823: GO 29697
29825: POP
29826: POP
// end ;
29827: PPOPN 2
29829: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29830: LD_EXP 46
29834: PUSH
29835: LD_EXP 92
29839: AND
29840: IFFALSE 30062
29842: GO 29844
29844: DISABLE
29845: LD_INT 0
29847: PPUSH
29848: PPUSH
29849: PPUSH
29850: PPUSH
29851: PPUSH
29852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29853: LD_ADDR_VAR 0 6
29857: PUSH
29858: LD_INT 22
29860: PUSH
29861: LD_OWVAR 2
29865: PUSH
29866: EMPTY
29867: LIST
29868: LIST
29869: PUSH
29870: LD_INT 21
29872: PUSH
29873: LD_INT 1
29875: PUSH
29876: EMPTY
29877: LIST
29878: LIST
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: LD_INT 23
29885: PUSH
29886: LD_INT 0
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: EMPTY
29898: LIST
29899: LIST
29900: LIST
29901: PPUSH
29902: CALL_OW 69
29906: ST_TO_ADDR
// if not tmp then
29907: LD_VAR 0 6
29911: NOT
29912: IFFALSE 29916
// exit ;
29914: GO 30062
// s1 := rand ( 1 , 4 ) ;
29916: LD_ADDR_VAR 0 2
29920: PUSH
29921: LD_INT 1
29923: PPUSH
29924: LD_INT 4
29926: PPUSH
29927: CALL_OW 12
29931: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29932: LD_ADDR_VAR 0 4
29936: PUSH
29937: LD_VAR 0 6
29941: PUSH
29942: LD_INT 1
29944: ARRAY
29945: PPUSH
29946: LD_VAR 0 2
29950: PPUSH
29951: CALL_OW 259
29955: ST_TO_ADDR
// if s1 = 1 then
29956: LD_VAR 0 2
29960: PUSH
29961: LD_INT 1
29963: EQUAL
29964: IFFALSE 29984
// s2 := rand ( 2 , 4 ) else
29966: LD_ADDR_VAR 0 3
29970: PUSH
29971: LD_INT 2
29973: PPUSH
29974: LD_INT 4
29976: PPUSH
29977: CALL_OW 12
29981: ST_TO_ADDR
29982: GO 29992
// s2 := 1 ;
29984: LD_ADDR_VAR 0 3
29988: PUSH
29989: LD_INT 1
29991: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29992: LD_ADDR_VAR 0 5
29996: PUSH
29997: LD_VAR 0 6
30001: PUSH
30002: LD_INT 1
30004: ARRAY
30005: PPUSH
30006: LD_VAR 0 3
30010: PPUSH
30011: CALL_OW 259
30015: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30016: LD_VAR 0 6
30020: PUSH
30021: LD_INT 1
30023: ARRAY
30024: PPUSH
30025: LD_VAR 0 2
30029: PPUSH
30030: LD_VAR 0 5
30034: PPUSH
30035: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30039: LD_VAR 0 6
30043: PUSH
30044: LD_INT 1
30046: ARRAY
30047: PPUSH
30048: LD_VAR 0 3
30052: PPUSH
30053: LD_VAR 0 4
30057: PPUSH
30058: CALL_OW 237
// end ;
30062: PPOPN 6
30064: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30065: LD_EXP 46
30069: PUSH
30070: LD_EXP 93
30074: AND
30075: IFFALSE 30154
30077: GO 30079
30079: DISABLE
30080: LD_INT 0
30082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30083: LD_ADDR_VAR 0 1
30087: PUSH
30088: LD_INT 22
30090: PUSH
30091: LD_OWVAR 2
30095: PUSH
30096: EMPTY
30097: LIST
30098: LIST
30099: PUSH
30100: LD_INT 30
30102: PUSH
30103: LD_INT 3
30105: PUSH
30106: EMPTY
30107: LIST
30108: LIST
30109: PUSH
30110: EMPTY
30111: LIST
30112: LIST
30113: PPUSH
30114: CALL_OW 69
30118: ST_TO_ADDR
// if not tmp then
30119: LD_VAR 0 1
30123: NOT
30124: IFFALSE 30128
// exit ;
30126: GO 30154
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30128: LD_VAR 0 1
30132: PUSH
30133: LD_INT 1
30135: PPUSH
30136: LD_VAR 0 1
30140: PPUSH
30141: CALL_OW 12
30145: ARRAY
30146: PPUSH
30147: LD_INT 1
30149: PPUSH
30150: CALL_OW 234
// end ;
30154: PPOPN 1
30156: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30157: LD_EXP 46
30161: PUSH
30162: LD_EXP 94
30166: AND
30167: IFFALSE 30279
30169: GO 30171
30171: DISABLE
30172: LD_INT 0
30174: PPUSH
30175: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30176: LD_ADDR_VAR 0 2
30180: PUSH
30181: LD_INT 22
30183: PUSH
30184: LD_OWVAR 2
30188: PUSH
30189: EMPTY
30190: LIST
30191: LIST
30192: PUSH
30193: LD_INT 2
30195: PUSH
30196: LD_INT 30
30198: PUSH
30199: LD_INT 27
30201: PUSH
30202: EMPTY
30203: LIST
30204: LIST
30205: PUSH
30206: LD_INT 30
30208: PUSH
30209: LD_INT 26
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 30
30218: PUSH
30219: LD_INT 28
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PPUSH
30236: CALL_OW 69
30240: ST_TO_ADDR
// if not tmp then
30241: LD_VAR 0 2
30245: NOT
30246: IFFALSE 30250
// exit ;
30248: GO 30279
// for i in tmp do
30250: LD_ADDR_VAR 0 1
30254: PUSH
30255: LD_VAR 0 2
30259: PUSH
30260: FOR_IN
30261: IFFALSE 30277
// SetLives ( i , 1 ) ;
30263: LD_VAR 0 1
30267: PPUSH
30268: LD_INT 1
30270: PPUSH
30271: CALL_OW 234
30275: GO 30260
30277: POP
30278: POP
// end ;
30279: PPOPN 2
30281: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30282: LD_EXP 46
30286: PUSH
30287: LD_EXP 95
30291: AND
30292: IFFALSE 30579
30294: GO 30296
30296: DISABLE
30297: LD_INT 0
30299: PPUSH
30300: PPUSH
30301: PPUSH
// begin i := rand ( 1 , 7 ) ;
30302: LD_ADDR_VAR 0 1
30306: PUSH
30307: LD_INT 1
30309: PPUSH
30310: LD_INT 7
30312: PPUSH
30313: CALL_OW 12
30317: ST_TO_ADDR
// case i of 1 :
30318: LD_VAR 0 1
30322: PUSH
30323: LD_INT 1
30325: DOUBLE
30326: EQUAL
30327: IFTRUE 30331
30329: GO 30341
30331: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30332: LD_STRING earthquake(getX(game), 0, 32)
30334: PPUSH
30335: CALL_OW 559
30339: GO 30579
30341: LD_INT 2
30343: DOUBLE
30344: EQUAL
30345: IFTRUE 30349
30347: GO 30363
30349: POP
// begin ToLua ( displayStucuk(); ) ;
30350: LD_STRING displayStucuk();
30352: PPUSH
30353: CALL_OW 559
// ResetFog ;
30357: CALL_OW 335
// end ; 3 :
30361: GO 30579
30363: LD_INT 3
30365: DOUBLE
30366: EQUAL
30367: IFTRUE 30371
30369: GO 30475
30371: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30372: LD_ADDR_VAR 0 2
30376: PUSH
30377: LD_INT 22
30379: PUSH
30380: LD_OWVAR 2
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 25
30391: PUSH
30392: LD_INT 1
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: PPUSH
30403: CALL_OW 69
30407: ST_TO_ADDR
// if not tmp then
30408: LD_VAR 0 2
30412: NOT
30413: IFFALSE 30417
// exit ;
30415: GO 30579
// un := tmp [ rand ( 1 , tmp ) ] ;
30417: LD_ADDR_VAR 0 3
30421: PUSH
30422: LD_VAR 0 2
30426: PUSH
30427: LD_INT 1
30429: PPUSH
30430: LD_VAR 0 2
30434: PPUSH
30435: CALL_OW 12
30439: ARRAY
30440: ST_TO_ADDR
// if Crawls ( un ) then
30441: LD_VAR 0 3
30445: PPUSH
30446: CALL_OW 318
30450: IFFALSE 30461
// ComWalk ( un ) ;
30452: LD_VAR 0 3
30456: PPUSH
30457: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30461: LD_VAR 0 3
30465: PPUSH
30466: LD_INT 8
30468: PPUSH
30469: CALL_OW 336
// end ; 4 :
30473: GO 30579
30475: LD_INT 4
30477: DOUBLE
30478: EQUAL
30479: IFTRUE 30483
30481: GO 30557
30483: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30484: LD_ADDR_VAR 0 2
30488: PUSH
30489: LD_INT 22
30491: PUSH
30492: LD_OWVAR 2
30496: PUSH
30497: EMPTY
30498: LIST
30499: LIST
30500: PUSH
30501: LD_INT 30
30503: PUSH
30504: LD_INT 29
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PPUSH
30515: CALL_OW 69
30519: ST_TO_ADDR
// if not tmp then
30520: LD_VAR 0 2
30524: NOT
30525: IFFALSE 30529
// exit ;
30527: GO 30579
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30529: LD_VAR 0 2
30533: PUSH
30534: LD_INT 1
30536: ARRAY
30537: PPUSH
30538: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30542: LD_VAR 0 2
30546: PUSH
30547: LD_INT 1
30549: ARRAY
30550: PPUSH
30551: CALL_OW 65
// end ; 5 .. 7 :
30555: GO 30579
30557: LD_INT 5
30559: DOUBLE
30560: GREATEREQUAL
30561: IFFALSE 30569
30563: LD_INT 7
30565: DOUBLE
30566: LESSEQUAL
30567: IFTRUE 30571
30569: GO 30578
30571: POP
// StreamSibBomb ; end ;
30572: CALL 26816 0 0
30576: GO 30579
30578: POP
// end ;
30579: PPOPN 3
30581: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30582: LD_EXP 46
30586: PUSH
30587: LD_EXP 96
30591: AND
30592: IFFALSE 30748
30594: GO 30596
30596: DISABLE
30597: LD_INT 0
30599: PPUSH
30600: PPUSH
30601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30602: LD_ADDR_VAR 0 2
30606: PUSH
30607: LD_INT 81
30609: PUSH
30610: LD_OWVAR 2
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 2
30621: PUSH
30622: LD_INT 21
30624: PUSH
30625: LD_INT 1
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 21
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: EMPTY
30639: LIST
30640: LIST
30641: PUSH
30642: EMPTY
30643: LIST
30644: LIST
30645: LIST
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PPUSH
30651: CALL_OW 69
30655: ST_TO_ADDR
// if not tmp then
30656: LD_VAR 0 2
30660: NOT
30661: IFFALSE 30665
// exit ;
30663: GO 30748
// p := 0 ;
30665: LD_ADDR_VAR 0 3
30669: PUSH
30670: LD_INT 0
30672: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30673: LD_INT 35
30675: PPUSH
30676: CALL_OW 67
// p := p + 1 ;
30680: LD_ADDR_VAR 0 3
30684: PUSH
30685: LD_VAR 0 3
30689: PUSH
30690: LD_INT 1
30692: PLUS
30693: ST_TO_ADDR
// for i in tmp do
30694: LD_ADDR_VAR 0 1
30698: PUSH
30699: LD_VAR 0 2
30703: PUSH
30704: FOR_IN
30705: IFFALSE 30736
// if GetLives ( i ) < 1000 then
30707: LD_VAR 0 1
30711: PPUSH
30712: CALL_OW 256
30716: PUSH
30717: LD_INT 1000
30719: LESS
30720: IFFALSE 30734
// SetLives ( i , 1000 ) ;
30722: LD_VAR 0 1
30726: PPUSH
30727: LD_INT 1000
30729: PPUSH
30730: CALL_OW 234
30734: GO 30704
30736: POP
30737: POP
// until p > 20 ;
30738: LD_VAR 0 3
30742: PUSH
30743: LD_INT 20
30745: GREATER
30746: IFFALSE 30673
// end ;
30748: PPOPN 3
30750: END
// every 0 0$1 trigger StreamModeActive and sTime do
30751: LD_EXP 46
30755: PUSH
30756: LD_EXP 97
30760: AND
30761: IFFALSE 30796
30763: GO 30765
30765: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30766: LD_INT 28
30768: PPUSH
30769: LD_OWVAR 2
30773: PPUSH
30774: LD_INT 2
30776: PPUSH
30777: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30781: LD_INT 30
30783: PPUSH
30784: LD_OWVAR 2
30788: PPUSH
30789: LD_INT 2
30791: PPUSH
30792: CALL_OW 322
// end ;
30796: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30797: LD_EXP 46
30801: PUSH
30802: LD_EXP 98
30806: AND
30807: IFFALSE 30928
30809: GO 30811
30811: DISABLE
30812: LD_INT 0
30814: PPUSH
30815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30816: LD_ADDR_VAR 0 2
30820: PUSH
30821: LD_INT 22
30823: PUSH
30824: LD_OWVAR 2
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: PUSH
30833: LD_INT 21
30835: PUSH
30836: LD_INT 1
30838: PUSH
30839: EMPTY
30840: LIST
30841: LIST
30842: PUSH
30843: LD_INT 3
30845: PUSH
30846: LD_INT 23
30848: PUSH
30849: LD_INT 0
30851: PUSH
30852: EMPTY
30853: LIST
30854: LIST
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: LIST
30864: PPUSH
30865: CALL_OW 69
30869: ST_TO_ADDR
// if not tmp then
30870: LD_VAR 0 2
30874: NOT
30875: IFFALSE 30879
// exit ;
30877: GO 30928
// for i in tmp do
30879: LD_ADDR_VAR 0 1
30883: PUSH
30884: LD_VAR 0 2
30888: PUSH
30889: FOR_IN
30890: IFFALSE 30926
// begin if Crawls ( i ) then
30892: LD_VAR 0 1
30896: PPUSH
30897: CALL_OW 318
30901: IFFALSE 30912
// ComWalk ( i ) ;
30903: LD_VAR 0 1
30907: PPUSH
30908: CALL_OW 138
// SetClass ( i , 2 ) ;
30912: LD_VAR 0 1
30916: PPUSH
30917: LD_INT 2
30919: PPUSH
30920: CALL_OW 336
// end ;
30924: GO 30889
30926: POP
30927: POP
// end ;
30928: PPOPN 2
30930: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30931: LD_EXP 46
30935: PUSH
30936: LD_EXP 99
30940: AND
30941: IFFALSE 31229
30943: GO 30945
30945: DISABLE
30946: LD_INT 0
30948: PPUSH
30949: PPUSH
30950: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30951: LD_OWVAR 2
30955: PPUSH
30956: LD_INT 9
30958: PPUSH
30959: LD_INT 1
30961: PPUSH
30962: LD_INT 1
30964: PPUSH
30965: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30969: LD_INT 9
30971: PPUSH
30972: LD_OWVAR 2
30976: PPUSH
30977: CALL_OW 343
// uc_side := 9 ;
30981: LD_ADDR_OWVAR 20
30985: PUSH
30986: LD_INT 9
30988: ST_TO_ADDR
// uc_nation := 2 ;
30989: LD_ADDR_OWVAR 21
30993: PUSH
30994: LD_INT 2
30996: ST_TO_ADDR
// hc_name := Dark Warrior ;
30997: LD_ADDR_OWVAR 26
31001: PUSH
31002: LD_STRING Dark Warrior
31004: ST_TO_ADDR
// hc_gallery :=  ;
31005: LD_ADDR_OWVAR 33
31009: PUSH
31010: LD_STRING 
31012: ST_TO_ADDR
// hc_noskilllimit := true ;
31013: LD_ADDR_OWVAR 76
31017: PUSH
31018: LD_INT 1
31020: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31021: LD_ADDR_OWVAR 31
31025: PUSH
31026: LD_INT 30
31028: PUSH
31029: LD_INT 30
31031: PUSH
31032: LD_INT 30
31034: PUSH
31035: LD_INT 30
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: ST_TO_ADDR
// un := CreateHuman ;
31044: LD_ADDR_VAR 0 3
31048: PUSH
31049: CALL_OW 44
31053: ST_TO_ADDR
// hc_noskilllimit := false ;
31054: LD_ADDR_OWVAR 76
31058: PUSH
31059: LD_INT 0
31061: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31062: LD_VAR 0 3
31066: PPUSH
31067: LD_INT 1
31069: PPUSH
31070: CALL_OW 51
// ToLua ( playRanger() ) ;
31074: LD_STRING playRanger()
31076: PPUSH
31077: CALL_OW 559
// p := 0 ;
31081: LD_ADDR_VAR 0 2
31085: PUSH
31086: LD_INT 0
31088: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31089: LD_INT 35
31091: PPUSH
31092: CALL_OW 67
// p := p + 1 ;
31096: LD_ADDR_VAR 0 2
31100: PUSH
31101: LD_VAR 0 2
31105: PUSH
31106: LD_INT 1
31108: PLUS
31109: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31110: LD_VAR 0 3
31114: PPUSH
31115: CALL_OW 256
31119: PUSH
31120: LD_INT 1000
31122: LESS
31123: IFFALSE 31137
// SetLives ( un , 1000 ) ;
31125: LD_VAR 0 3
31129: PPUSH
31130: LD_INT 1000
31132: PPUSH
31133: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31137: LD_VAR 0 3
31141: PPUSH
31142: LD_INT 81
31144: PUSH
31145: LD_OWVAR 2
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 91
31156: PUSH
31157: LD_VAR 0 3
31161: PUSH
31162: LD_INT 30
31164: PUSH
31165: EMPTY
31166: LIST
31167: LIST
31168: LIST
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PPUSH
31174: CALL_OW 69
31178: PPUSH
31179: LD_VAR 0 3
31183: PPUSH
31184: CALL_OW 74
31188: PPUSH
31189: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31193: LD_VAR 0 2
31197: PUSH
31198: LD_INT 80
31200: GREATER
31201: PUSH
31202: LD_VAR 0 3
31206: PPUSH
31207: CALL_OW 301
31211: OR
31212: IFFALSE 31089
// if un then
31214: LD_VAR 0 3
31218: IFFALSE 31229
// RemoveUnit ( un ) ;
31220: LD_VAR 0 3
31224: PPUSH
31225: CALL_OW 64
// end ;
31229: PPOPN 3
31231: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31232: LD_EXP 100
31236: IFFALSE 31352
31238: GO 31240
31240: DISABLE
31241: LD_INT 0
31243: PPUSH
31244: PPUSH
31245: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31246: LD_ADDR_VAR 0 2
31250: PUSH
31251: LD_INT 81
31253: PUSH
31254: LD_OWVAR 2
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: PUSH
31263: LD_INT 21
31265: PUSH
31266: LD_INT 1
31268: PUSH
31269: EMPTY
31270: LIST
31271: LIST
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PPUSH
31277: CALL_OW 69
31281: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31282: LD_STRING playComputer()
31284: PPUSH
31285: CALL_OW 559
// if not tmp then
31289: LD_VAR 0 2
31293: NOT
31294: IFFALSE 31298
// exit ;
31296: GO 31352
// for i in tmp do
31298: LD_ADDR_VAR 0 1
31302: PUSH
31303: LD_VAR 0 2
31307: PUSH
31308: FOR_IN
31309: IFFALSE 31350
// for j := 1 to 4 do
31311: LD_ADDR_VAR 0 3
31315: PUSH
31316: DOUBLE
31317: LD_INT 1
31319: DEC
31320: ST_TO_ADDR
31321: LD_INT 4
31323: PUSH
31324: FOR_TO
31325: IFFALSE 31346
// SetSkill ( i , j , 10 ) ;
31327: LD_VAR 0 1
31331: PPUSH
31332: LD_VAR 0 3
31336: PPUSH
31337: LD_INT 10
31339: PPUSH
31340: CALL_OW 237
31344: GO 31324
31346: POP
31347: POP
31348: GO 31308
31350: POP
31351: POP
// end ;
31352: PPOPN 3
31354: END
// every 0 0$1 trigger s30 do var i , tmp ;
31355: LD_EXP 101
31359: IFFALSE 31428
31361: GO 31363
31363: DISABLE
31364: LD_INT 0
31366: PPUSH
31367: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31368: LD_ADDR_VAR 0 2
31372: PUSH
31373: LD_INT 22
31375: PUSH
31376: LD_OWVAR 2
31380: PUSH
31381: EMPTY
31382: LIST
31383: LIST
31384: PPUSH
31385: CALL_OW 69
31389: ST_TO_ADDR
// if not tmp then
31390: LD_VAR 0 2
31394: NOT
31395: IFFALSE 31399
// exit ;
31397: GO 31428
// for i in tmp do
31399: LD_ADDR_VAR 0 1
31403: PUSH
31404: LD_VAR 0 2
31408: PUSH
31409: FOR_IN
31410: IFFALSE 31426
// SetLives ( i , 300 ) ;
31412: LD_VAR 0 1
31416: PPUSH
31417: LD_INT 300
31419: PPUSH
31420: CALL_OW 234
31424: GO 31409
31426: POP
31427: POP
// end ;
31428: PPOPN 2
31430: END
// every 0 0$1 trigger s60 do var i , tmp ;
31431: LD_EXP 102
31435: IFFALSE 31504
31437: GO 31439
31439: DISABLE
31440: LD_INT 0
31442: PPUSH
31443: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31444: LD_ADDR_VAR 0 2
31448: PUSH
31449: LD_INT 22
31451: PUSH
31452: LD_OWVAR 2
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PPUSH
31461: CALL_OW 69
31465: ST_TO_ADDR
// if not tmp then
31466: LD_VAR 0 2
31470: NOT
31471: IFFALSE 31475
// exit ;
31473: GO 31504
// for i in tmp do
31475: LD_ADDR_VAR 0 1
31479: PUSH
31480: LD_VAR 0 2
31484: PUSH
31485: FOR_IN
31486: IFFALSE 31502
// SetLives ( i , 600 ) ;
31488: LD_VAR 0 1
31492: PPUSH
31493: LD_INT 600
31495: PPUSH
31496: CALL_OW 234
31500: GO 31485
31502: POP
31503: POP
// end ;
31504: PPOPN 2
31506: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31507: LD_INT 0
31509: PPUSH
// case cmd of 301 :
31510: LD_VAR 0 1
31514: PUSH
31515: LD_INT 301
31517: DOUBLE
31518: EQUAL
31519: IFTRUE 31523
31521: GO 31555
31523: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31524: LD_VAR 0 6
31528: PPUSH
31529: LD_VAR 0 7
31533: PPUSH
31534: LD_VAR 0 8
31538: PPUSH
31539: LD_VAR 0 4
31543: PPUSH
31544: LD_VAR 0 5
31548: PPUSH
31549: CALL 32756 0 5
31553: GO 31676
31555: LD_INT 302
31557: DOUBLE
31558: EQUAL
31559: IFTRUE 31563
31561: GO 31600
31563: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31564: LD_VAR 0 6
31568: PPUSH
31569: LD_VAR 0 7
31573: PPUSH
31574: LD_VAR 0 8
31578: PPUSH
31579: LD_VAR 0 9
31583: PPUSH
31584: LD_VAR 0 4
31588: PPUSH
31589: LD_VAR 0 5
31593: PPUSH
31594: CALL 32847 0 6
31598: GO 31676
31600: LD_INT 303
31602: DOUBLE
31603: EQUAL
31604: IFTRUE 31608
31606: GO 31645
31608: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31609: LD_VAR 0 6
31613: PPUSH
31614: LD_VAR 0 7
31618: PPUSH
31619: LD_VAR 0 8
31623: PPUSH
31624: LD_VAR 0 9
31628: PPUSH
31629: LD_VAR 0 4
31633: PPUSH
31634: LD_VAR 0 5
31638: PPUSH
31639: CALL 31681 0 6
31643: GO 31676
31645: LD_INT 304
31647: DOUBLE
31648: EQUAL
31649: IFTRUE 31653
31651: GO 31675
31653: POP
// hHackTeleport ( unit , x , y ) ; end ;
31654: LD_VAR 0 2
31658: PPUSH
31659: LD_VAR 0 4
31663: PPUSH
31664: LD_VAR 0 5
31668: PPUSH
31669: CALL 33440 0 3
31673: GO 31676
31675: POP
// end ;
31676: LD_VAR 0 12
31680: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31681: LD_INT 0
31683: PPUSH
31684: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31685: LD_VAR 0 1
31689: PUSH
31690: LD_INT 1
31692: LESS
31693: PUSH
31694: LD_VAR 0 1
31698: PUSH
31699: LD_INT 3
31701: GREATER
31702: OR
31703: PUSH
31704: LD_VAR 0 5
31708: PPUSH
31709: LD_VAR 0 6
31713: PPUSH
31714: CALL_OW 428
31718: OR
31719: IFFALSE 31723
// exit ;
31721: GO 32443
// uc_side := your_side ;
31723: LD_ADDR_OWVAR 20
31727: PUSH
31728: LD_OWVAR 2
31732: ST_TO_ADDR
// uc_nation := nation ;
31733: LD_ADDR_OWVAR 21
31737: PUSH
31738: LD_VAR 0 1
31742: ST_TO_ADDR
// bc_level = 1 ;
31743: LD_ADDR_OWVAR 43
31747: PUSH
31748: LD_INT 1
31750: ST_TO_ADDR
// case btype of 1 :
31751: LD_VAR 0 2
31755: PUSH
31756: LD_INT 1
31758: DOUBLE
31759: EQUAL
31760: IFTRUE 31764
31762: GO 31775
31764: POP
// bc_type := b_depot ; 2 :
31765: LD_ADDR_OWVAR 42
31769: PUSH
31770: LD_INT 0
31772: ST_TO_ADDR
31773: GO 32387
31775: LD_INT 2
31777: DOUBLE
31778: EQUAL
31779: IFTRUE 31783
31781: GO 31794
31783: POP
// bc_type := b_warehouse ; 3 :
31784: LD_ADDR_OWVAR 42
31788: PUSH
31789: LD_INT 1
31791: ST_TO_ADDR
31792: GO 32387
31794: LD_INT 3
31796: DOUBLE
31797: EQUAL
31798: IFTRUE 31802
31800: GO 31813
31802: POP
// bc_type := b_lab ; 4 .. 9 :
31803: LD_ADDR_OWVAR 42
31807: PUSH
31808: LD_INT 6
31810: ST_TO_ADDR
31811: GO 32387
31813: LD_INT 4
31815: DOUBLE
31816: GREATEREQUAL
31817: IFFALSE 31825
31819: LD_INT 9
31821: DOUBLE
31822: LESSEQUAL
31823: IFTRUE 31827
31825: GO 31879
31827: POP
// begin bc_type := b_lab_half ;
31828: LD_ADDR_OWVAR 42
31832: PUSH
31833: LD_INT 7
31835: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31836: LD_ADDR_OWVAR 44
31840: PUSH
31841: LD_INT 10
31843: PUSH
31844: LD_INT 11
31846: PUSH
31847: LD_INT 12
31849: PUSH
31850: LD_INT 15
31852: PUSH
31853: LD_INT 14
31855: PUSH
31856: LD_INT 13
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: PUSH
31867: LD_VAR 0 2
31871: PUSH
31872: LD_INT 3
31874: MINUS
31875: ARRAY
31876: ST_TO_ADDR
// end ; 10 .. 13 :
31877: GO 32387
31879: LD_INT 10
31881: DOUBLE
31882: GREATEREQUAL
31883: IFFALSE 31891
31885: LD_INT 13
31887: DOUBLE
31888: LESSEQUAL
31889: IFTRUE 31893
31891: GO 31970
31893: POP
// begin bc_type := b_lab_full ;
31894: LD_ADDR_OWVAR 42
31898: PUSH
31899: LD_INT 8
31901: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31902: LD_ADDR_OWVAR 44
31906: PUSH
31907: LD_INT 10
31909: PUSH
31910: LD_INT 12
31912: PUSH
31913: LD_INT 14
31915: PUSH
31916: LD_INT 13
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: PUSH
31925: LD_VAR 0 2
31929: PUSH
31930: LD_INT 9
31932: MINUS
31933: ARRAY
31934: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31935: LD_ADDR_OWVAR 45
31939: PUSH
31940: LD_INT 11
31942: PUSH
31943: LD_INT 15
31945: PUSH
31946: LD_INT 12
31948: PUSH
31949: LD_INT 15
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: LIST
31956: LIST
31957: PUSH
31958: LD_VAR 0 2
31962: PUSH
31963: LD_INT 9
31965: MINUS
31966: ARRAY
31967: ST_TO_ADDR
// end ; 14 :
31968: GO 32387
31970: LD_INT 14
31972: DOUBLE
31973: EQUAL
31974: IFTRUE 31978
31976: GO 31989
31978: POP
// bc_type := b_workshop ; 15 :
31979: LD_ADDR_OWVAR 42
31983: PUSH
31984: LD_INT 2
31986: ST_TO_ADDR
31987: GO 32387
31989: LD_INT 15
31991: DOUBLE
31992: EQUAL
31993: IFTRUE 31997
31995: GO 32008
31997: POP
// bc_type := b_factory ; 16 :
31998: LD_ADDR_OWVAR 42
32002: PUSH
32003: LD_INT 3
32005: ST_TO_ADDR
32006: GO 32387
32008: LD_INT 16
32010: DOUBLE
32011: EQUAL
32012: IFTRUE 32016
32014: GO 32027
32016: POP
// bc_type := b_ext_gun ; 17 :
32017: LD_ADDR_OWVAR 42
32021: PUSH
32022: LD_INT 17
32024: ST_TO_ADDR
32025: GO 32387
32027: LD_INT 17
32029: DOUBLE
32030: EQUAL
32031: IFTRUE 32035
32033: GO 32063
32035: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32036: LD_ADDR_OWVAR 42
32040: PUSH
32041: LD_INT 19
32043: PUSH
32044: LD_INT 23
32046: PUSH
32047: LD_INT 19
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: LIST
32054: PUSH
32055: LD_VAR 0 1
32059: ARRAY
32060: ST_TO_ADDR
32061: GO 32387
32063: LD_INT 18
32065: DOUBLE
32066: EQUAL
32067: IFTRUE 32071
32069: GO 32082
32071: POP
// bc_type := b_ext_radar ; 19 :
32072: LD_ADDR_OWVAR 42
32076: PUSH
32077: LD_INT 20
32079: ST_TO_ADDR
32080: GO 32387
32082: LD_INT 19
32084: DOUBLE
32085: EQUAL
32086: IFTRUE 32090
32088: GO 32101
32090: POP
// bc_type := b_ext_radio ; 20 :
32091: LD_ADDR_OWVAR 42
32095: PUSH
32096: LD_INT 22
32098: ST_TO_ADDR
32099: GO 32387
32101: LD_INT 20
32103: DOUBLE
32104: EQUAL
32105: IFTRUE 32109
32107: GO 32120
32109: POP
// bc_type := b_ext_siberium ; 21 :
32110: LD_ADDR_OWVAR 42
32114: PUSH
32115: LD_INT 21
32117: ST_TO_ADDR
32118: GO 32387
32120: LD_INT 21
32122: DOUBLE
32123: EQUAL
32124: IFTRUE 32128
32126: GO 32139
32128: POP
// bc_type := b_ext_computer ; 22 :
32129: LD_ADDR_OWVAR 42
32133: PUSH
32134: LD_INT 24
32136: ST_TO_ADDR
32137: GO 32387
32139: LD_INT 22
32141: DOUBLE
32142: EQUAL
32143: IFTRUE 32147
32145: GO 32158
32147: POP
// bc_type := b_ext_track ; 23 :
32148: LD_ADDR_OWVAR 42
32152: PUSH
32153: LD_INT 16
32155: ST_TO_ADDR
32156: GO 32387
32158: LD_INT 23
32160: DOUBLE
32161: EQUAL
32162: IFTRUE 32166
32164: GO 32177
32166: POP
// bc_type := b_ext_laser ; 24 :
32167: LD_ADDR_OWVAR 42
32171: PUSH
32172: LD_INT 25
32174: ST_TO_ADDR
32175: GO 32387
32177: LD_INT 24
32179: DOUBLE
32180: EQUAL
32181: IFTRUE 32185
32183: GO 32196
32185: POP
// bc_type := b_control_tower ; 25 :
32186: LD_ADDR_OWVAR 42
32190: PUSH
32191: LD_INT 36
32193: ST_TO_ADDR
32194: GO 32387
32196: LD_INT 25
32198: DOUBLE
32199: EQUAL
32200: IFTRUE 32204
32202: GO 32215
32204: POP
// bc_type := b_breastwork ; 26 :
32205: LD_ADDR_OWVAR 42
32209: PUSH
32210: LD_INT 31
32212: ST_TO_ADDR
32213: GO 32387
32215: LD_INT 26
32217: DOUBLE
32218: EQUAL
32219: IFTRUE 32223
32221: GO 32234
32223: POP
// bc_type := b_bunker ; 27 :
32224: LD_ADDR_OWVAR 42
32228: PUSH
32229: LD_INT 32
32231: ST_TO_ADDR
32232: GO 32387
32234: LD_INT 27
32236: DOUBLE
32237: EQUAL
32238: IFTRUE 32242
32240: GO 32253
32242: POP
// bc_type := b_turret ; 28 :
32243: LD_ADDR_OWVAR 42
32247: PUSH
32248: LD_INT 33
32250: ST_TO_ADDR
32251: GO 32387
32253: LD_INT 28
32255: DOUBLE
32256: EQUAL
32257: IFTRUE 32261
32259: GO 32272
32261: POP
// bc_type := b_armoury ; 29 :
32262: LD_ADDR_OWVAR 42
32266: PUSH
32267: LD_INT 4
32269: ST_TO_ADDR
32270: GO 32387
32272: LD_INT 29
32274: DOUBLE
32275: EQUAL
32276: IFTRUE 32280
32278: GO 32291
32280: POP
// bc_type := b_barracks ; 30 :
32281: LD_ADDR_OWVAR 42
32285: PUSH
32286: LD_INT 5
32288: ST_TO_ADDR
32289: GO 32387
32291: LD_INT 30
32293: DOUBLE
32294: EQUAL
32295: IFTRUE 32299
32297: GO 32310
32299: POP
// bc_type := b_solar_power ; 31 :
32300: LD_ADDR_OWVAR 42
32304: PUSH
32305: LD_INT 27
32307: ST_TO_ADDR
32308: GO 32387
32310: LD_INT 31
32312: DOUBLE
32313: EQUAL
32314: IFTRUE 32318
32316: GO 32329
32318: POP
// bc_type := b_oil_power ; 32 :
32319: LD_ADDR_OWVAR 42
32323: PUSH
32324: LD_INT 26
32326: ST_TO_ADDR
32327: GO 32387
32329: LD_INT 32
32331: DOUBLE
32332: EQUAL
32333: IFTRUE 32337
32335: GO 32348
32337: POP
// bc_type := b_siberite_power ; 33 :
32338: LD_ADDR_OWVAR 42
32342: PUSH
32343: LD_INT 28
32345: ST_TO_ADDR
32346: GO 32387
32348: LD_INT 33
32350: DOUBLE
32351: EQUAL
32352: IFTRUE 32356
32354: GO 32367
32356: POP
// bc_type := b_oil_mine ; 34 :
32357: LD_ADDR_OWVAR 42
32361: PUSH
32362: LD_INT 29
32364: ST_TO_ADDR
32365: GO 32387
32367: LD_INT 34
32369: DOUBLE
32370: EQUAL
32371: IFTRUE 32375
32373: GO 32386
32375: POP
// bc_type := b_siberite_mine ; end ;
32376: LD_ADDR_OWVAR 42
32380: PUSH
32381: LD_INT 30
32383: ST_TO_ADDR
32384: GO 32387
32386: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32387: LD_ADDR_VAR 0 8
32391: PUSH
32392: LD_VAR 0 5
32396: PPUSH
32397: LD_VAR 0 6
32401: PPUSH
32402: LD_VAR 0 3
32406: PPUSH
32407: CALL_OW 47
32411: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32412: LD_OWVAR 42
32416: PUSH
32417: LD_INT 32
32419: PUSH
32420: LD_INT 33
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: IN
32427: IFFALSE 32443
// PlaceWeaponTurret ( b , weapon ) ;
32429: LD_VAR 0 8
32433: PPUSH
32434: LD_VAR 0 4
32438: PPUSH
32439: CALL_OW 431
// end ;
32443: LD_VAR 0 7
32447: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32448: LD_INT 0
32450: PPUSH
32451: PPUSH
32452: PPUSH
32453: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32454: LD_ADDR_VAR 0 4
32458: PUSH
32459: LD_INT 22
32461: PUSH
32462: LD_OWVAR 2
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 2
32473: PUSH
32474: LD_INT 30
32476: PUSH
32477: LD_INT 0
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 30
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: EMPTY
32491: LIST
32492: LIST
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: LIST
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PPUSH
32503: CALL_OW 69
32507: ST_TO_ADDR
// if not tmp then
32508: LD_VAR 0 4
32512: NOT
32513: IFFALSE 32517
// exit ;
32515: GO 32576
// for i in tmp do
32517: LD_ADDR_VAR 0 2
32521: PUSH
32522: LD_VAR 0 4
32526: PUSH
32527: FOR_IN
32528: IFFALSE 32574
// for j = 1 to 3 do
32530: LD_ADDR_VAR 0 3
32534: PUSH
32535: DOUBLE
32536: LD_INT 1
32538: DEC
32539: ST_TO_ADDR
32540: LD_INT 3
32542: PUSH
32543: FOR_TO
32544: IFFALSE 32570
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32546: LD_VAR 0 2
32550: PPUSH
32551: CALL_OW 274
32555: PPUSH
32556: LD_VAR 0 3
32560: PPUSH
32561: LD_INT 99999
32563: PPUSH
32564: CALL_OW 277
32568: GO 32543
32570: POP
32571: POP
32572: GO 32527
32574: POP
32575: POP
// end ;
32576: LD_VAR 0 1
32580: RET
// export function hHackSetLevel10 ; var i , j ; begin
32581: LD_INT 0
32583: PPUSH
32584: PPUSH
32585: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32586: LD_ADDR_VAR 0 2
32590: PUSH
32591: LD_INT 21
32593: PUSH
32594: LD_INT 1
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PPUSH
32601: CALL_OW 69
32605: PUSH
32606: FOR_IN
32607: IFFALSE 32659
// if IsSelected ( i ) then
32609: LD_VAR 0 2
32613: PPUSH
32614: CALL_OW 306
32618: IFFALSE 32657
// begin for j := 1 to 4 do
32620: LD_ADDR_VAR 0 3
32624: PUSH
32625: DOUBLE
32626: LD_INT 1
32628: DEC
32629: ST_TO_ADDR
32630: LD_INT 4
32632: PUSH
32633: FOR_TO
32634: IFFALSE 32655
// SetSkill ( i , j , 10 ) ;
32636: LD_VAR 0 2
32640: PPUSH
32641: LD_VAR 0 3
32645: PPUSH
32646: LD_INT 10
32648: PPUSH
32649: CALL_OW 237
32653: GO 32633
32655: POP
32656: POP
// end ;
32657: GO 32606
32659: POP
32660: POP
// end ;
32661: LD_VAR 0 1
32665: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32666: LD_INT 0
32668: PPUSH
32669: PPUSH
32670: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32671: LD_ADDR_VAR 0 2
32675: PUSH
32676: LD_INT 22
32678: PUSH
32679: LD_OWVAR 2
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: LD_INT 21
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PPUSH
32702: CALL_OW 69
32706: PUSH
32707: FOR_IN
32708: IFFALSE 32749
// begin for j := 1 to 4 do
32710: LD_ADDR_VAR 0 3
32714: PUSH
32715: DOUBLE
32716: LD_INT 1
32718: DEC
32719: ST_TO_ADDR
32720: LD_INT 4
32722: PUSH
32723: FOR_TO
32724: IFFALSE 32745
// SetSkill ( i , j , 10 ) ;
32726: LD_VAR 0 2
32730: PPUSH
32731: LD_VAR 0 3
32735: PPUSH
32736: LD_INT 10
32738: PPUSH
32739: CALL_OW 237
32743: GO 32723
32745: POP
32746: POP
// end ;
32747: GO 32707
32749: POP
32750: POP
// end ;
32751: LD_VAR 0 1
32755: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32756: LD_INT 0
32758: PPUSH
// uc_side := your_side ;
32759: LD_ADDR_OWVAR 20
32763: PUSH
32764: LD_OWVAR 2
32768: ST_TO_ADDR
// uc_nation := nation ;
32769: LD_ADDR_OWVAR 21
32773: PUSH
32774: LD_VAR 0 1
32778: ST_TO_ADDR
// InitHc ;
32779: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32783: LD_INT 0
32785: PPUSH
32786: LD_VAR 0 2
32790: PPUSH
32791: LD_VAR 0 3
32795: PPUSH
32796: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32800: LD_VAR 0 4
32804: PPUSH
32805: LD_VAR 0 5
32809: PPUSH
32810: CALL_OW 428
32814: PUSH
32815: LD_INT 0
32817: EQUAL
32818: IFFALSE 32842
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32820: CALL_OW 44
32824: PPUSH
32825: LD_VAR 0 4
32829: PPUSH
32830: LD_VAR 0 5
32834: PPUSH
32835: LD_INT 1
32837: PPUSH
32838: CALL_OW 48
// end ;
32842: LD_VAR 0 6
32846: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32847: LD_INT 0
32849: PPUSH
32850: PPUSH
// uc_side := your_side ;
32851: LD_ADDR_OWVAR 20
32855: PUSH
32856: LD_OWVAR 2
32860: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32861: LD_VAR 0 1
32865: PUSH
32866: LD_INT 1
32868: PUSH
32869: LD_INT 2
32871: PUSH
32872: LD_INT 3
32874: PUSH
32875: LD_INT 4
32877: PUSH
32878: LD_INT 5
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: IN
32888: IFFALSE 32900
// uc_nation := nation_american else
32890: LD_ADDR_OWVAR 21
32894: PUSH
32895: LD_INT 1
32897: ST_TO_ADDR
32898: GO 32943
// if chassis in [ 11 , 12 , 13 , 14 ] then
32900: LD_VAR 0 1
32904: PUSH
32905: LD_INT 11
32907: PUSH
32908: LD_INT 12
32910: PUSH
32911: LD_INT 13
32913: PUSH
32914: LD_INT 14
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: IN
32923: IFFALSE 32935
// uc_nation := nation_arabian else
32925: LD_ADDR_OWVAR 21
32929: PUSH
32930: LD_INT 2
32932: ST_TO_ADDR
32933: GO 32943
// uc_nation := nation_russian ;
32935: LD_ADDR_OWVAR 21
32939: PUSH
32940: LD_INT 3
32942: ST_TO_ADDR
// vc_chassis := chassis ;
32943: LD_ADDR_OWVAR 37
32947: PUSH
32948: LD_VAR 0 1
32952: ST_TO_ADDR
// vc_engine := engine ;
32953: LD_ADDR_OWVAR 39
32957: PUSH
32958: LD_VAR 0 2
32962: ST_TO_ADDR
// vc_control := control ;
32963: LD_ADDR_OWVAR 38
32967: PUSH
32968: LD_VAR 0 3
32972: ST_TO_ADDR
// vc_weapon := weapon ;
32973: LD_ADDR_OWVAR 40
32977: PUSH
32978: LD_VAR 0 4
32982: ST_TO_ADDR
// un := CreateVehicle ;
32983: LD_ADDR_VAR 0 8
32987: PUSH
32988: CALL_OW 45
32992: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32993: LD_VAR 0 8
32997: PPUSH
32998: LD_INT 0
33000: PPUSH
33001: LD_INT 5
33003: PPUSH
33004: CALL_OW 12
33008: PPUSH
33009: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33013: LD_VAR 0 8
33017: PPUSH
33018: LD_VAR 0 5
33022: PPUSH
33023: LD_VAR 0 6
33027: PPUSH
33028: LD_INT 1
33030: PPUSH
33031: CALL_OW 48
// end ;
33035: LD_VAR 0 7
33039: RET
// export hInvincible ; every 1 do
33040: GO 33042
33042: DISABLE
// hInvincible := [ ] ;
33043: LD_ADDR_EXP 103
33047: PUSH
33048: EMPTY
33049: ST_TO_ADDR
33050: END
// every 10 do var i ;
33051: GO 33053
33053: DISABLE
33054: LD_INT 0
33056: PPUSH
// begin enable ;
33057: ENABLE
// if not hInvincible then
33058: LD_EXP 103
33062: NOT
33063: IFFALSE 33067
// exit ;
33065: GO 33111
// for i in hInvincible do
33067: LD_ADDR_VAR 0 1
33071: PUSH
33072: LD_EXP 103
33076: PUSH
33077: FOR_IN
33078: IFFALSE 33109
// if GetLives ( i ) < 1000 then
33080: LD_VAR 0 1
33084: PPUSH
33085: CALL_OW 256
33089: PUSH
33090: LD_INT 1000
33092: LESS
33093: IFFALSE 33107
// SetLives ( i , 1000 ) ;
33095: LD_VAR 0 1
33099: PPUSH
33100: LD_INT 1000
33102: PPUSH
33103: CALL_OW 234
33107: GO 33077
33109: POP
33110: POP
// end ;
33111: PPOPN 1
33113: END
// export function hHackInvincible ; var i ; begin
33114: LD_INT 0
33116: PPUSH
33117: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33118: LD_ADDR_VAR 0 2
33122: PUSH
33123: LD_INT 2
33125: PUSH
33126: LD_INT 21
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: EMPTY
33133: LIST
33134: LIST
33135: PUSH
33136: LD_INT 21
33138: PUSH
33139: LD_INT 2
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: LIST
33150: PPUSH
33151: CALL_OW 69
33155: PUSH
33156: FOR_IN
33157: IFFALSE 33218
// if IsSelected ( i ) then
33159: LD_VAR 0 2
33163: PPUSH
33164: CALL_OW 306
33168: IFFALSE 33216
// begin if i in hInvincible then
33170: LD_VAR 0 2
33174: PUSH
33175: LD_EXP 103
33179: IN
33180: IFFALSE 33200
// hInvincible := hInvincible diff i else
33182: LD_ADDR_EXP 103
33186: PUSH
33187: LD_EXP 103
33191: PUSH
33192: LD_VAR 0 2
33196: DIFF
33197: ST_TO_ADDR
33198: GO 33216
// hInvincible := hInvincible union i ;
33200: LD_ADDR_EXP 103
33204: PUSH
33205: LD_EXP 103
33209: PUSH
33210: LD_VAR 0 2
33214: UNION
33215: ST_TO_ADDR
// end ;
33216: GO 33156
33218: POP
33219: POP
// end ;
33220: LD_VAR 0 1
33224: RET
// export function hHackInvisible ; var i , j ; begin
33225: LD_INT 0
33227: PPUSH
33228: PPUSH
33229: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33230: LD_ADDR_VAR 0 2
33234: PUSH
33235: LD_INT 21
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PPUSH
33245: CALL_OW 69
33249: PUSH
33250: FOR_IN
33251: IFFALSE 33275
// if IsSelected ( i ) then
33253: LD_VAR 0 2
33257: PPUSH
33258: CALL_OW 306
33262: IFFALSE 33273
// ComForceInvisible ( i ) ;
33264: LD_VAR 0 2
33268: PPUSH
33269: CALL_OW 496
33273: GO 33250
33275: POP
33276: POP
// end ;
33277: LD_VAR 0 1
33281: RET
// export function hHackChangeYourSide ; begin
33282: LD_INT 0
33284: PPUSH
// if your_side = 8 then
33285: LD_OWVAR 2
33289: PUSH
33290: LD_INT 8
33292: EQUAL
33293: IFFALSE 33305
// your_side := 0 else
33295: LD_ADDR_OWVAR 2
33299: PUSH
33300: LD_INT 0
33302: ST_TO_ADDR
33303: GO 33319
// your_side := your_side + 1 ;
33305: LD_ADDR_OWVAR 2
33309: PUSH
33310: LD_OWVAR 2
33314: PUSH
33315: LD_INT 1
33317: PLUS
33318: ST_TO_ADDR
// end ;
33319: LD_VAR 0 1
33323: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33324: LD_INT 0
33326: PPUSH
33327: PPUSH
33328: PPUSH
// for i in all_units do
33329: LD_ADDR_VAR 0 2
33333: PUSH
33334: LD_OWVAR 3
33338: PUSH
33339: FOR_IN
33340: IFFALSE 33418
// if IsSelected ( i ) then
33342: LD_VAR 0 2
33346: PPUSH
33347: CALL_OW 306
33351: IFFALSE 33416
// begin j := GetSide ( i ) ;
33353: LD_ADDR_VAR 0 3
33357: PUSH
33358: LD_VAR 0 2
33362: PPUSH
33363: CALL_OW 255
33367: ST_TO_ADDR
// if j = 8 then
33368: LD_VAR 0 3
33372: PUSH
33373: LD_INT 8
33375: EQUAL
33376: IFFALSE 33388
// j := 0 else
33378: LD_ADDR_VAR 0 3
33382: PUSH
33383: LD_INT 0
33385: ST_TO_ADDR
33386: GO 33402
// j := j + 1 ;
33388: LD_ADDR_VAR 0 3
33392: PUSH
33393: LD_VAR 0 3
33397: PUSH
33398: LD_INT 1
33400: PLUS
33401: ST_TO_ADDR
// SetSide ( i , j ) ;
33402: LD_VAR 0 2
33406: PPUSH
33407: LD_VAR 0 3
33411: PPUSH
33412: CALL_OW 235
// end ;
33416: GO 33339
33418: POP
33419: POP
// end ;
33420: LD_VAR 0 1
33424: RET
// export function hHackFog ; begin
33425: LD_INT 0
33427: PPUSH
// FogOff ( true ) ;
33428: LD_INT 1
33430: PPUSH
33431: CALL_OW 344
// end ;
33435: LD_VAR 0 1
33439: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33440: LD_INT 0
33442: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33443: LD_VAR 0 1
33447: PPUSH
33448: LD_VAR 0 2
33452: PPUSH
33453: LD_VAR 0 3
33457: PPUSH
33458: LD_INT 1
33460: PPUSH
33461: LD_INT 1
33463: PPUSH
33464: CALL_OW 483
// CenterOnXY ( x , y ) ;
33468: LD_VAR 0 2
33472: PPUSH
33473: LD_VAR 0 3
33477: PPUSH
33478: CALL_OW 84
// end ;
33482: LD_VAR 0 4
33486: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33487: LD_INT 0
33489: PPUSH
33490: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33491: LD_VAR 0 1
33495: NOT
33496: PUSH
33497: LD_VAR 0 2
33501: PPUSH
33502: LD_VAR 0 3
33506: PPUSH
33507: CALL_OW 488
33511: NOT
33512: OR
33513: PUSH
33514: LD_VAR 0 1
33518: PPUSH
33519: CALL_OW 266
33523: PUSH
33524: LD_INT 3
33526: NONEQUAL
33527: PUSH
33528: LD_VAR 0 1
33532: PPUSH
33533: CALL_OW 247
33537: PUSH
33538: LD_INT 1
33540: EQUAL
33541: NOT
33542: AND
33543: OR
33544: IFFALSE 33548
// exit ;
33546: GO 33697
// if GetType ( factory ) = unit_human then
33548: LD_VAR 0 1
33552: PPUSH
33553: CALL_OW 247
33557: PUSH
33558: LD_INT 1
33560: EQUAL
33561: IFFALSE 33578
// factory := IsInUnit ( factory ) ;
33563: LD_ADDR_VAR 0 1
33567: PUSH
33568: LD_VAR 0 1
33572: PPUSH
33573: CALL_OW 310
33577: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33578: LD_VAR 0 1
33582: PPUSH
33583: CALL_OW 266
33587: PUSH
33588: LD_INT 3
33590: NONEQUAL
33591: IFFALSE 33595
// exit ;
33593: GO 33697
// if HexInfo ( x , y ) = factory then
33595: LD_VAR 0 2
33599: PPUSH
33600: LD_VAR 0 3
33604: PPUSH
33605: CALL_OW 428
33609: PUSH
33610: LD_VAR 0 1
33614: EQUAL
33615: IFFALSE 33642
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33617: LD_ADDR_EXP 104
33621: PUSH
33622: LD_EXP 104
33626: PPUSH
33627: LD_VAR 0 1
33631: PPUSH
33632: LD_INT 0
33634: PPUSH
33635: CALL_OW 1
33639: ST_TO_ADDR
33640: GO 33693
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33642: LD_ADDR_EXP 104
33646: PUSH
33647: LD_EXP 104
33651: PPUSH
33652: LD_VAR 0 1
33656: PPUSH
33657: LD_VAR 0 1
33661: PPUSH
33662: CALL_OW 255
33666: PUSH
33667: LD_VAR 0 1
33671: PUSH
33672: LD_VAR 0 2
33676: PUSH
33677: LD_VAR 0 3
33681: PUSH
33682: EMPTY
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: PPUSH
33688: CALL_OW 1
33692: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33693: CALL 33702 0 0
// end ;
33697: LD_VAR 0 4
33701: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33702: LD_INT 0
33704: PPUSH
33705: PPUSH
33706: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33707: LD_STRING resetFactoryWaypoint();
33709: PPUSH
33710: CALL_OW 559
// if factoryWaypoints then
33714: LD_EXP 104
33718: IFFALSE 33844
// begin list := PrepareArray ( factoryWaypoints ) ;
33720: LD_ADDR_VAR 0 3
33724: PUSH
33725: LD_EXP 104
33729: PPUSH
33730: CALL 80313 0 1
33734: ST_TO_ADDR
// for i := 1 to list do
33735: LD_ADDR_VAR 0 2
33739: PUSH
33740: DOUBLE
33741: LD_INT 1
33743: DEC
33744: ST_TO_ADDR
33745: LD_VAR 0 3
33749: PUSH
33750: FOR_TO
33751: IFFALSE 33842
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33753: LD_STRING setFactoryWaypointXY(
33755: PUSH
33756: LD_VAR 0 3
33760: PUSH
33761: LD_VAR 0 2
33765: ARRAY
33766: PUSH
33767: LD_INT 1
33769: ARRAY
33770: STR
33771: PUSH
33772: LD_STRING ,
33774: STR
33775: PUSH
33776: LD_VAR 0 3
33780: PUSH
33781: LD_VAR 0 2
33785: ARRAY
33786: PUSH
33787: LD_INT 2
33789: ARRAY
33790: STR
33791: PUSH
33792: LD_STRING ,
33794: STR
33795: PUSH
33796: LD_VAR 0 3
33800: PUSH
33801: LD_VAR 0 2
33805: ARRAY
33806: PUSH
33807: LD_INT 3
33809: ARRAY
33810: STR
33811: PUSH
33812: LD_STRING ,
33814: STR
33815: PUSH
33816: LD_VAR 0 3
33820: PUSH
33821: LD_VAR 0 2
33825: ARRAY
33826: PUSH
33827: LD_INT 4
33829: ARRAY
33830: STR
33831: PUSH
33832: LD_STRING )
33834: STR
33835: PPUSH
33836: CALL_OW 559
33840: GO 33750
33842: POP
33843: POP
// end ; end ;
33844: LD_VAR 0 1
33848: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33849: LD_INT 0
33851: PPUSH
// if HexInfo ( x , y ) = warehouse then
33852: LD_VAR 0 2
33856: PPUSH
33857: LD_VAR 0 3
33861: PPUSH
33862: CALL_OW 428
33866: PUSH
33867: LD_VAR 0 1
33871: EQUAL
33872: IFFALSE 33899
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33874: LD_ADDR_EXP 105
33878: PUSH
33879: LD_EXP 105
33883: PPUSH
33884: LD_VAR 0 1
33888: PPUSH
33889: LD_INT 0
33891: PPUSH
33892: CALL_OW 1
33896: ST_TO_ADDR
33897: GO 33950
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33899: LD_ADDR_EXP 105
33903: PUSH
33904: LD_EXP 105
33908: PPUSH
33909: LD_VAR 0 1
33913: PPUSH
33914: LD_VAR 0 1
33918: PPUSH
33919: CALL_OW 255
33923: PUSH
33924: LD_VAR 0 1
33928: PUSH
33929: LD_VAR 0 2
33933: PUSH
33934: LD_VAR 0 3
33938: PUSH
33939: EMPTY
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: PPUSH
33945: CALL_OW 1
33949: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33950: CALL 33959 0 0
// end ;
33954: LD_VAR 0 4
33958: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33959: LD_INT 0
33961: PPUSH
33962: PPUSH
33963: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33964: LD_STRING resetWarehouseGatheringPoints();
33966: PPUSH
33967: CALL_OW 559
// if warehouseGatheringPoints then
33971: LD_EXP 105
33975: IFFALSE 34101
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33977: LD_ADDR_VAR 0 3
33981: PUSH
33982: LD_EXP 105
33986: PPUSH
33987: CALL 80313 0 1
33991: ST_TO_ADDR
// for i := 1 to list do
33992: LD_ADDR_VAR 0 2
33996: PUSH
33997: DOUBLE
33998: LD_INT 1
34000: DEC
34001: ST_TO_ADDR
34002: LD_VAR 0 3
34006: PUSH
34007: FOR_TO
34008: IFFALSE 34099
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34010: LD_STRING setWarehouseGatheringPointXY(
34012: PUSH
34013: LD_VAR 0 3
34017: PUSH
34018: LD_VAR 0 2
34022: ARRAY
34023: PUSH
34024: LD_INT 1
34026: ARRAY
34027: STR
34028: PUSH
34029: LD_STRING ,
34031: STR
34032: PUSH
34033: LD_VAR 0 3
34037: PUSH
34038: LD_VAR 0 2
34042: ARRAY
34043: PUSH
34044: LD_INT 2
34046: ARRAY
34047: STR
34048: PUSH
34049: LD_STRING ,
34051: STR
34052: PUSH
34053: LD_VAR 0 3
34057: PUSH
34058: LD_VAR 0 2
34062: ARRAY
34063: PUSH
34064: LD_INT 3
34066: ARRAY
34067: STR
34068: PUSH
34069: LD_STRING ,
34071: STR
34072: PUSH
34073: LD_VAR 0 3
34077: PUSH
34078: LD_VAR 0 2
34082: ARRAY
34083: PUSH
34084: LD_INT 4
34086: ARRAY
34087: STR
34088: PUSH
34089: LD_STRING )
34091: STR
34092: PPUSH
34093: CALL_OW 559
34097: GO 34007
34099: POP
34100: POP
// end ; end ;
34101: LD_VAR 0 1
34105: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34106: LD_EXP 105
34110: IFFALSE 34795
34112: GO 34114
34114: DISABLE
34115: LD_INT 0
34117: PPUSH
34118: PPUSH
34119: PPUSH
34120: PPUSH
34121: PPUSH
34122: PPUSH
34123: PPUSH
34124: PPUSH
34125: PPUSH
// begin enable ;
34126: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34127: LD_ADDR_VAR 0 3
34131: PUSH
34132: LD_EXP 105
34136: PPUSH
34137: CALL 80313 0 1
34141: ST_TO_ADDR
// if not list then
34142: LD_VAR 0 3
34146: NOT
34147: IFFALSE 34151
// exit ;
34149: GO 34795
// for i := 1 to list do
34151: LD_ADDR_VAR 0 1
34155: PUSH
34156: DOUBLE
34157: LD_INT 1
34159: DEC
34160: ST_TO_ADDR
34161: LD_VAR 0 3
34165: PUSH
34166: FOR_TO
34167: IFFALSE 34793
// begin depot := list [ i ] [ 2 ] ;
34169: LD_ADDR_VAR 0 8
34173: PUSH
34174: LD_VAR 0 3
34178: PUSH
34179: LD_VAR 0 1
34183: ARRAY
34184: PUSH
34185: LD_INT 2
34187: ARRAY
34188: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34189: LD_ADDR_VAR 0 5
34193: PUSH
34194: LD_VAR 0 3
34198: PUSH
34199: LD_VAR 0 1
34203: ARRAY
34204: PUSH
34205: LD_INT 1
34207: ARRAY
34208: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34209: LD_VAR 0 8
34213: PPUSH
34214: CALL_OW 301
34218: PUSH
34219: LD_VAR 0 5
34223: PUSH
34224: LD_VAR 0 8
34228: PPUSH
34229: CALL_OW 255
34233: NONEQUAL
34234: OR
34235: IFFALSE 34264
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34237: LD_ADDR_EXP 105
34241: PUSH
34242: LD_EXP 105
34246: PPUSH
34247: LD_VAR 0 8
34251: PPUSH
34252: LD_INT 0
34254: PPUSH
34255: CALL_OW 1
34259: ST_TO_ADDR
// exit ;
34260: POP
34261: POP
34262: GO 34795
// end ; x := list [ i ] [ 3 ] ;
34264: LD_ADDR_VAR 0 6
34268: PUSH
34269: LD_VAR 0 3
34273: PUSH
34274: LD_VAR 0 1
34278: ARRAY
34279: PUSH
34280: LD_INT 3
34282: ARRAY
34283: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34284: LD_ADDR_VAR 0 7
34288: PUSH
34289: LD_VAR 0 3
34293: PUSH
34294: LD_VAR 0 1
34298: ARRAY
34299: PUSH
34300: LD_INT 4
34302: ARRAY
34303: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34304: LD_ADDR_VAR 0 9
34308: PUSH
34309: LD_VAR 0 6
34313: PPUSH
34314: LD_VAR 0 7
34318: PPUSH
34319: LD_INT 16
34321: PPUSH
34322: CALL 78901 0 3
34326: ST_TO_ADDR
// if not cratesNearbyPoint then
34327: LD_VAR 0 9
34331: NOT
34332: IFFALSE 34338
// exit ;
34334: POP
34335: POP
34336: GO 34795
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34338: LD_ADDR_VAR 0 4
34342: PUSH
34343: LD_INT 22
34345: PUSH
34346: LD_VAR 0 5
34350: PUSH
34351: EMPTY
34352: LIST
34353: LIST
34354: PUSH
34355: LD_INT 3
34357: PUSH
34358: LD_INT 60
34360: PUSH
34361: EMPTY
34362: LIST
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 91
34370: PUSH
34371: LD_VAR 0 8
34375: PUSH
34376: LD_INT 6
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 2
34386: PUSH
34387: LD_INT 25
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: EMPTY
34394: LIST
34395: LIST
34396: PUSH
34397: LD_INT 25
34399: PUSH
34400: LD_INT 16
34402: PUSH
34403: EMPTY
34404: LIST
34405: LIST
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: LIST
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: PPUSH
34418: CALL_OW 69
34422: PUSH
34423: LD_VAR 0 8
34427: PPUSH
34428: CALL_OW 313
34432: PPUSH
34433: LD_INT 3
34435: PUSH
34436: LD_INT 60
34438: PUSH
34439: EMPTY
34440: LIST
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: PUSH
34446: LD_INT 2
34448: PUSH
34449: LD_INT 25
34451: PUSH
34452: LD_INT 2
34454: PUSH
34455: EMPTY
34456: LIST
34457: LIST
34458: PUSH
34459: LD_INT 25
34461: PUSH
34462: LD_INT 16
34464: PUSH
34465: EMPTY
34466: LIST
34467: LIST
34468: PUSH
34469: EMPTY
34470: LIST
34471: LIST
34472: LIST
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PPUSH
34478: CALL_OW 72
34482: UNION
34483: ST_TO_ADDR
// if tmp then
34484: LD_VAR 0 4
34488: IFFALSE 34568
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34490: LD_ADDR_VAR 0 4
34494: PUSH
34495: LD_VAR 0 4
34499: PPUSH
34500: LD_INT 3
34502: PPUSH
34503: CALL 76870 0 2
34507: ST_TO_ADDR
// for j in tmp do
34508: LD_ADDR_VAR 0 2
34512: PUSH
34513: LD_VAR 0 4
34517: PUSH
34518: FOR_IN
34519: IFFALSE 34562
// begin if IsInUnit ( j ) then
34521: LD_VAR 0 2
34525: PPUSH
34526: CALL_OW 310
34530: IFFALSE 34541
// ComExit ( j ) ;
34532: LD_VAR 0 2
34536: PPUSH
34537: CALL 76953 0 1
// AddComCollect ( j , x , y ) ;
34541: LD_VAR 0 2
34545: PPUSH
34546: LD_VAR 0 6
34550: PPUSH
34551: LD_VAR 0 7
34555: PPUSH
34556: CALL_OW 177
// end ;
34560: GO 34518
34562: POP
34563: POP
// exit ;
34564: POP
34565: POP
34566: GO 34795
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34568: LD_ADDR_VAR 0 4
34572: PUSH
34573: LD_INT 22
34575: PUSH
34576: LD_VAR 0 5
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 91
34587: PUSH
34588: LD_VAR 0 8
34592: PUSH
34593: LD_INT 8
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 2
34603: PUSH
34604: LD_INT 34
34606: PUSH
34607: LD_INT 12
34609: PUSH
34610: EMPTY
34611: LIST
34612: LIST
34613: PUSH
34614: LD_INT 34
34616: PUSH
34617: LD_INT 51
34619: PUSH
34620: EMPTY
34621: LIST
34622: LIST
34623: PUSH
34624: LD_INT 34
34626: PUSH
34627: LD_INT 32
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: PUSH
34634: LD_INT 34
34636: PUSH
34637: LD_INT 89
34639: PUSH
34640: EMPTY
34641: LIST
34642: LIST
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: LIST
34655: PPUSH
34656: CALL_OW 69
34660: ST_TO_ADDR
// if tmp then
34661: LD_VAR 0 4
34665: IFFALSE 34791
// begin for j in tmp do
34667: LD_ADDR_VAR 0 2
34671: PUSH
34672: LD_VAR 0 4
34676: PUSH
34677: FOR_IN
34678: IFFALSE 34789
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34680: LD_VAR 0 2
34684: PPUSH
34685: CALL_OW 262
34689: PUSH
34690: LD_INT 3
34692: EQUAL
34693: PUSH
34694: LD_VAR 0 2
34698: PPUSH
34699: CALL_OW 261
34703: PUSH
34704: LD_INT 20
34706: GREATER
34707: OR
34708: PUSH
34709: LD_VAR 0 2
34713: PPUSH
34714: CALL_OW 314
34718: NOT
34719: AND
34720: PUSH
34721: LD_VAR 0 2
34725: PPUSH
34726: CALL_OW 263
34730: PUSH
34731: LD_INT 1
34733: NONEQUAL
34734: PUSH
34735: LD_VAR 0 2
34739: PPUSH
34740: CALL_OW 311
34744: OR
34745: AND
34746: IFFALSE 34787
// begin ComCollect ( j , x , y ) ;
34748: LD_VAR 0 2
34752: PPUSH
34753: LD_VAR 0 6
34757: PPUSH
34758: LD_VAR 0 7
34762: PPUSH
34763: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34767: LD_VAR 0 2
34771: PPUSH
34772: LD_VAR 0 8
34776: PPUSH
34777: CALL_OW 172
// exit ;
34781: POP
34782: POP
34783: POP
34784: POP
34785: GO 34795
// end ;
34787: GO 34677
34789: POP
34790: POP
// end ; end ;
34791: GO 34166
34793: POP
34794: POP
// end ; end_of_file
34795: PPOPN 9
34797: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34798: LD_INT 0
34800: PPUSH
34801: PPUSH
34802: PPUSH
34803: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34804: LD_VAR 0 1
34808: PPUSH
34809: CALL_OW 264
34813: PUSH
34814: LD_INT 91
34816: EQUAL
34817: IFFALSE 34889
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34819: LD_INT 68
34821: PPUSH
34822: LD_VAR 0 1
34826: PPUSH
34827: CALL_OW 255
34831: PPUSH
34832: CALL_OW 321
34836: PUSH
34837: LD_INT 2
34839: EQUAL
34840: IFFALSE 34852
// eff := 70 else
34842: LD_ADDR_VAR 0 4
34846: PUSH
34847: LD_INT 70
34849: ST_TO_ADDR
34850: GO 34860
// eff := 30 ;
34852: LD_ADDR_VAR 0 4
34856: PUSH
34857: LD_INT 30
34859: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34860: LD_VAR 0 1
34864: PPUSH
34865: CALL_OW 250
34869: PPUSH
34870: LD_VAR 0 1
34874: PPUSH
34875: CALL_OW 251
34879: PPUSH
34880: LD_VAR 0 4
34884: PPUSH
34885: CALL_OW 495
// end ; end ;
34889: LD_VAR 0 2
34893: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34894: LD_INT 0
34896: PPUSH
// end ;
34897: LD_VAR 0 4
34901: RET
// export function SOS_Command ( cmd ) ; begin
34902: LD_INT 0
34904: PPUSH
// end ;
34905: LD_VAR 0 2
34909: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34910: LD_INT 0
34912: PPUSH
// end ;
34913: LD_VAR 0 6
34917: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34918: LD_INT 0
34920: PPUSH
34921: PPUSH
// if not vehicle or not factory then
34922: LD_VAR 0 1
34926: NOT
34927: PUSH
34928: LD_VAR 0 2
34932: NOT
34933: OR
34934: IFFALSE 34938
// exit ;
34936: GO 35169
// if factoryWaypoints >= factory then
34938: LD_EXP 104
34942: PUSH
34943: LD_VAR 0 2
34947: GREATEREQUAL
34948: IFFALSE 35169
// if factoryWaypoints [ factory ] then
34950: LD_EXP 104
34954: PUSH
34955: LD_VAR 0 2
34959: ARRAY
34960: IFFALSE 35169
// begin if GetControl ( vehicle ) = control_manual then
34962: LD_VAR 0 1
34966: PPUSH
34967: CALL_OW 263
34971: PUSH
34972: LD_INT 1
34974: EQUAL
34975: IFFALSE 35056
// begin driver := IsDrivenBy ( vehicle ) ;
34977: LD_ADDR_VAR 0 4
34981: PUSH
34982: LD_VAR 0 1
34986: PPUSH
34987: CALL_OW 311
34991: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34992: LD_VAR 0 4
34996: PPUSH
34997: LD_EXP 104
35001: PUSH
35002: LD_VAR 0 2
35006: ARRAY
35007: PUSH
35008: LD_INT 3
35010: ARRAY
35011: PPUSH
35012: LD_EXP 104
35016: PUSH
35017: LD_VAR 0 2
35021: ARRAY
35022: PUSH
35023: LD_INT 4
35025: ARRAY
35026: PPUSH
35027: CALL_OW 171
// AddComExitVehicle ( driver ) ;
35031: LD_VAR 0 4
35035: PPUSH
35036: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
35040: LD_VAR 0 4
35044: PPUSH
35045: LD_VAR 0 2
35049: PPUSH
35050: CALL_OW 180
// end else
35054: GO 35169
// if GetControl ( vehicle ) = control_remote then
35056: LD_VAR 0 1
35060: PPUSH
35061: CALL_OW 263
35065: PUSH
35066: LD_INT 2
35068: EQUAL
35069: IFFALSE 35130
// begin wait ( 0 0$2 ) ;
35071: LD_INT 70
35073: PPUSH
35074: CALL_OW 67
// if Connect ( vehicle ) then
35078: LD_VAR 0 1
35082: PPUSH
35083: CALL 47193 0 1
35087: IFFALSE 35128
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35089: LD_VAR 0 1
35093: PPUSH
35094: LD_EXP 104
35098: PUSH
35099: LD_VAR 0 2
35103: ARRAY
35104: PUSH
35105: LD_INT 3
35107: ARRAY
35108: PPUSH
35109: LD_EXP 104
35113: PUSH
35114: LD_VAR 0 2
35118: ARRAY
35119: PUSH
35120: LD_INT 4
35122: ARRAY
35123: PPUSH
35124: CALL_OW 171
// end else
35128: GO 35169
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35130: LD_VAR 0 1
35134: PPUSH
35135: LD_EXP 104
35139: PUSH
35140: LD_VAR 0 2
35144: ARRAY
35145: PUSH
35146: LD_INT 3
35148: ARRAY
35149: PPUSH
35150: LD_EXP 104
35154: PUSH
35155: LD_VAR 0 2
35159: ARRAY
35160: PUSH
35161: LD_INT 4
35163: ARRAY
35164: PPUSH
35165: CALL_OW 171
// end ; end ;
35169: LD_VAR 0 3
35173: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35174: LD_INT 0
35176: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35177: LD_VAR 0 1
35181: PUSH
35182: LD_INT 250
35184: EQUAL
35185: PUSH
35186: LD_VAR 0 2
35190: PPUSH
35191: CALL_OW 264
35195: PUSH
35196: LD_INT 81
35198: EQUAL
35199: AND
35200: IFFALSE 35221
// MinerPlaceMine ( unit , x , y ) ;
35202: LD_VAR 0 2
35206: PPUSH
35207: LD_VAR 0 4
35211: PPUSH
35212: LD_VAR 0 5
35216: PPUSH
35217: CALL 37606 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35221: LD_VAR 0 1
35225: PUSH
35226: LD_INT 251
35228: EQUAL
35229: PUSH
35230: LD_VAR 0 2
35234: PPUSH
35235: CALL_OW 264
35239: PUSH
35240: LD_INT 81
35242: EQUAL
35243: AND
35244: IFFALSE 35265
// MinerDetonateMine ( unit , x , y ) ;
35246: LD_VAR 0 2
35250: PPUSH
35251: LD_VAR 0 4
35255: PPUSH
35256: LD_VAR 0 5
35260: PPUSH
35261: CALL 37881 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35265: LD_VAR 0 1
35269: PUSH
35270: LD_INT 252
35272: EQUAL
35273: PUSH
35274: LD_VAR 0 2
35278: PPUSH
35279: CALL_OW 264
35283: PUSH
35284: LD_INT 81
35286: EQUAL
35287: AND
35288: IFFALSE 35309
// MinerCreateMinefield ( unit , x , y ) ;
35290: LD_VAR 0 2
35294: PPUSH
35295: LD_VAR 0 4
35299: PPUSH
35300: LD_VAR 0 5
35304: PPUSH
35305: CALL 38298 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35309: LD_VAR 0 1
35313: PUSH
35314: LD_INT 253
35316: EQUAL
35317: PUSH
35318: LD_VAR 0 2
35322: PPUSH
35323: CALL_OW 257
35327: PUSH
35328: LD_INT 5
35330: EQUAL
35331: AND
35332: IFFALSE 35353
// ComBinocular ( unit , x , y ) ;
35334: LD_VAR 0 2
35338: PPUSH
35339: LD_VAR 0 4
35343: PPUSH
35344: LD_VAR 0 5
35348: PPUSH
35349: CALL 38667 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35353: LD_VAR 0 1
35357: PUSH
35358: LD_INT 254
35360: EQUAL
35361: PUSH
35362: LD_VAR 0 2
35366: PPUSH
35367: CALL_OW 264
35371: PUSH
35372: LD_INT 99
35374: EQUAL
35375: AND
35376: PUSH
35377: LD_VAR 0 3
35381: PPUSH
35382: CALL_OW 263
35386: PUSH
35387: LD_INT 3
35389: EQUAL
35390: AND
35391: IFFALSE 35407
// HackDestroyVehicle ( unit , selectedUnit ) ;
35393: LD_VAR 0 2
35397: PPUSH
35398: LD_VAR 0 3
35402: PPUSH
35403: CALL 36970 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35407: LD_VAR 0 1
35411: PUSH
35412: LD_INT 255
35414: EQUAL
35415: PUSH
35416: LD_VAR 0 2
35420: PPUSH
35421: CALL_OW 264
35425: PUSH
35426: LD_INT 14
35428: PUSH
35429: LD_INT 53
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: IN
35436: AND
35437: PUSH
35438: LD_VAR 0 4
35442: PPUSH
35443: LD_VAR 0 5
35447: PPUSH
35448: CALL_OW 488
35452: AND
35453: IFFALSE 35477
// CutTreeXYR ( unit , x , y , 12 ) ;
35455: LD_VAR 0 2
35459: PPUSH
35460: LD_VAR 0 4
35464: PPUSH
35465: LD_VAR 0 5
35469: PPUSH
35470: LD_INT 12
35472: PPUSH
35473: CALL 35540 0 4
// if cmd = 256 then
35477: LD_VAR 0 1
35481: PUSH
35482: LD_INT 256
35484: EQUAL
35485: IFFALSE 35506
// SetFactoryWaypoint ( unit , x , y ) ;
35487: LD_VAR 0 2
35491: PPUSH
35492: LD_VAR 0 4
35496: PPUSH
35497: LD_VAR 0 5
35501: PPUSH
35502: CALL 33487 0 3
// if cmd = 257 then
35506: LD_VAR 0 1
35510: PUSH
35511: LD_INT 257
35513: EQUAL
35514: IFFALSE 35535
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35516: LD_VAR 0 2
35520: PPUSH
35521: LD_VAR 0 4
35525: PPUSH
35526: LD_VAR 0 5
35530: PPUSH
35531: CALL 33849 0 3
// end ;
35535: LD_VAR 0 6
35539: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35540: LD_INT 0
35542: PPUSH
35543: PPUSH
35544: PPUSH
35545: PPUSH
35546: PPUSH
35547: PPUSH
35548: PPUSH
35549: PPUSH
35550: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35551: LD_VAR 0 1
35555: NOT
35556: PUSH
35557: LD_VAR 0 2
35561: PPUSH
35562: LD_VAR 0 3
35566: PPUSH
35567: CALL_OW 488
35571: NOT
35572: OR
35573: PUSH
35574: LD_VAR 0 4
35578: NOT
35579: OR
35580: IFFALSE 35584
// exit ;
35582: GO 35924
// list := [ ] ;
35584: LD_ADDR_VAR 0 13
35588: PUSH
35589: EMPTY
35590: ST_TO_ADDR
// if x - r < 0 then
35591: LD_VAR 0 2
35595: PUSH
35596: LD_VAR 0 4
35600: MINUS
35601: PUSH
35602: LD_INT 0
35604: LESS
35605: IFFALSE 35617
// min_x := 0 else
35607: LD_ADDR_VAR 0 7
35611: PUSH
35612: LD_INT 0
35614: ST_TO_ADDR
35615: GO 35633
// min_x := x - r ;
35617: LD_ADDR_VAR 0 7
35621: PUSH
35622: LD_VAR 0 2
35626: PUSH
35627: LD_VAR 0 4
35631: MINUS
35632: ST_TO_ADDR
// if y - r < 0 then
35633: LD_VAR 0 3
35637: PUSH
35638: LD_VAR 0 4
35642: MINUS
35643: PUSH
35644: LD_INT 0
35646: LESS
35647: IFFALSE 35659
// min_y := 0 else
35649: LD_ADDR_VAR 0 8
35653: PUSH
35654: LD_INT 0
35656: ST_TO_ADDR
35657: GO 35675
// min_y := y - r ;
35659: LD_ADDR_VAR 0 8
35663: PUSH
35664: LD_VAR 0 3
35668: PUSH
35669: LD_VAR 0 4
35673: MINUS
35674: ST_TO_ADDR
// max_x := x + r ;
35675: LD_ADDR_VAR 0 9
35679: PUSH
35680: LD_VAR 0 2
35684: PUSH
35685: LD_VAR 0 4
35689: PLUS
35690: ST_TO_ADDR
// max_y := y + r ;
35691: LD_ADDR_VAR 0 10
35695: PUSH
35696: LD_VAR 0 3
35700: PUSH
35701: LD_VAR 0 4
35705: PLUS
35706: ST_TO_ADDR
// for _x = min_x to max_x do
35707: LD_ADDR_VAR 0 11
35711: PUSH
35712: DOUBLE
35713: LD_VAR 0 7
35717: DEC
35718: ST_TO_ADDR
35719: LD_VAR 0 9
35723: PUSH
35724: FOR_TO
35725: IFFALSE 35842
// for _y = min_y to max_y do
35727: LD_ADDR_VAR 0 12
35731: PUSH
35732: DOUBLE
35733: LD_VAR 0 8
35737: DEC
35738: ST_TO_ADDR
35739: LD_VAR 0 10
35743: PUSH
35744: FOR_TO
35745: IFFALSE 35838
// begin if not ValidHex ( _x , _y ) then
35747: LD_VAR 0 11
35751: PPUSH
35752: LD_VAR 0 12
35756: PPUSH
35757: CALL_OW 488
35761: NOT
35762: IFFALSE 35766
// continue ;
35764: GO 35744
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35766: LD_VAR 0 11
35770: PPUSH
35771: LD_VAR 0 12
35775: PPUSH
35776: CALL_OW 351
35780: PUSH
35781: LD_VAR 0 11
35785: PPUSH
35786: LD_VAR 0 12
35790: PPUSH
35791: CALL_OW 554
35795: AND
35796: IFFALSE 35836
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35798: LD_ADDR_VAR 0 13
35802: PUSH
35803: LD_VAR 0 13
35807: PPUSH
35808: LD_VAR 0 13
35812: PUSH
35813: LD_INT 1
35815: PLUS
35816: PPUSH
35817: LD_VAR 0 11
35821: PUSH
35822: LD_VAR 0 12
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PPUSH
35831: CALL_OW 2
35835: ST_TO_ADDR
// end ;
35836: GO 35744
35838: POP
35839: POP
35840: GO 35724
35842: POP
35843: POP
// if not list then
35844: LD_VAR 0 13
35848: NOT
35849: IFFALSE 35853
// exit ;
35851: GO 35924
// for i in list do
35853: LD_ADDR_VAR 0 6
35857: PUSH
35858: LD_VAR 0 13
35862: PUSH
35863: FOR_IN
35864: IFFALSE 35922
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35866: LD_VAR 0 1
35870: PPUSH
35871: LD_STRING M
35873: PUSH
35874: LD_VAR 0 6
35878: PUSH
35879: LD_INT 1
35881: ARRAY
35882: PUSH
35883: LD_VAR 0 6
35887: PUSH
35888: LD_INT 2
35890: ARRAY
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: LD_INT 0
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: LD_INT 0
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: PUSH
35913: EMPTY
35914: LIST
35915: PPUSH
35916: CALL_OW 447
35920: GO 35863
35922: POP
35923: POP
// end ;
35924: LD_VAR 0 5
35928: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35929: LD_EXP 107
35933: NOT
35934: IFFALSE 35984
35936: GO 35938
35938: DISABLE
// begin initHack := true ;
35939: LD_ADDR_EXP 107
35943: PUSH
35944: LD_INT 1
35946: ST_TO_ADDR
// hackTanks := [ ] ;
35947: LD_ADDR_EXP 108
35951: PUSH
35952: EMPTY
35953: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35954: LD_ADDR_EXP 109
35958: PUSH
35959: EMPTY
35960: ST_TO_ADDR
// hackLimit := 3 ;
35961: LD_ADDR_EXP 110
35965: PUSH
35966: LD_INT 3
35968: ST_TO_ADDR
// hackDist := 12 ;
35969: LD_ADDR_EXP 111
35973: PUSH
35974: LD_INT 12
35976: ST_TO_ADDR
// hackCounter := [ ] ;
35977: LD_ADDR_EXP 112
35981: PUSH
35982: EMPTY
35983: ST_TO_ADDR
// end ;
35984: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35985: LD_EXP 107
35989: PUSH
35990: LD_INT 34
35992: PUSH
35993: LD_INT 99
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PPUSH
36000: CALL_OW 69
36004: AND
36005: IFFALSE 36258
36007: GO 36009
36009: DISABLE
36010: LD_INT 0
36012: PPUSH
36013: PPUSH
// begin enable ;
36014: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
36015: LD_ADDR_VAR 0 1
36019: PUSH
36020: LD_INT 34
36022: PUSH
36023: LD_INT 99
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PPUSH
36030: CALL_OW 69
36034: PUSH
36035: FOR_IN
36036: IFFALSE 36256
// begin if not i in hackTanks then
36038: LD_VAR 0 1
36042: PUSH
36043: LD_EXP 108
36047: IN
36048: NOT
36049: IFFALSE 36132
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
36051: LD_ADDR_EXP 108
36055: PUSH
36056: LD_EXP 108
36060: PPUSH
36061: LD_EXP 108
36065: PUSH
36066: LD_INT 1
36068: PLUS
36069: PPUSH
36070: LD_VAR 0 1
36074: PPUSH
36075: CALL_OW 1
36079: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
36080: LD_ADDR_EXP 109
36084: PUSH
36085: LD_EXP 109
36089: PPUSH
36090: LD_EXP 109
36094: PUSH
36095: LD_INT 1
36097: PLUS
36098: PPUSH
36099: EMPTY
36100: PPUSH
36101: CALL_OW 1
36105: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36106: LD_ADDR_EXP 112
36110: PUSH
36111: LD_EXP 112
36115: PPUSH
36116: LD_EXP 112
36120: PUSH
36121: LD_INT 1
36123: PLUS
36124: PPUSH
36125: EMPTY
36126: PPUSH
36127: CALL_OW 1
36131: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36132: LD_VAR 0 1
36136: PPUSH
36137: CALL_OW 302
36141: NOT
36142: IFFALSE 36155
// begin HackUnlinkAll ( i ) ;
36144: LD_VAR 0 1
36148: PPUSH
36149: CALL 36261 0 1
// continue ;
36153: GO 36035
// end ; HackCheckCapturedStatus ( i ) ;
36155: LD_VAR 0 1
36159: PPUSH
36160: CALL 36704 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36164: LD_ADDR_VAR 0 2
36168: PUSH
36169: LD_INT 81
36171: PUSH
36172: LD_VAR 0 1
36176: PPUSH
36177: CALL_OW 255
36181: PUSH
36182: EMPTY
36183: LIST
36184: LIST
36185: PUSH
36186: LD_INT 33
36188: PUSH
36189: LD_INT 3
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 91
36198: PUSH
36199: LD_VAR 0 1
36203: PUSH
36204: LD_EXP 111
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 50
36216: PUSH
36217: EMPTY
36218: LIST
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: PPUSH
36226: CALL_OW 69
36230: ST_TO_ADDR
// if not tmp then
36231: LD_VAR 0 2
36235: NOT
36236: IFFALSE 36240
// continue ;
36238: GO 36035
// HackLink ( i , tmp ) ;
36240: LD_VAR 0 1
36244: PPUSH
36245: LD_VAR 0 2
36249: PPUSH
36250: CALL 36397 0 2
// end ;
36254: GO 36035
36256: POP
36257: POP
// end ;
36258: PPOPN 2
36260: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36261: LD_INT 0
36263: PPUSH
36264: PPUSH
36265: PPUSH
// if not hack in hackTanks then
36266: LD_VAR 0 1
36270: PUSH
36271: LD_EXP 108
36275: IN
36276: NOT
36277: IFFALSE 36281
// exit ;
36279: GO 36392
// index := GetElementIndex ( hackTanks , hack ) ;
36281: LD_ADDR_VAR 0 4
36285: PUSH
36286: LD_EXP 108
36290: PPUSH
36291: LD_VAR 0 1
36295: PPUSH
36296: CALL 44009 0 2
36300: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36301: LD_EXP 109
36305: PUSH
36306: LD_VAR 0 4
36310: ARRAY
36311: IFFALSE 36392
// begin for i in hackTanksCaptured [ index ] do
36313: LD_ADDR_VAR 0 3
36317: PUSH
36318: LD_EXP 109
36322: PUSH
36323: LD_VAR 0 4
36327: ARRAY
36328: PUSH
36329: FOR_IN
36330: IFFALSE 36356
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36332: LD_VAR 0 3
36336: PUSH
36337: LD_INT 1
36339: ARRAY
36340: PPUSH
36341: LD_VAR 0 3
36345: PUSH
36346: LD_INT 2
36348: ARRAY
36349: PPUSH
36350: CALL_OW 235
36354: GO 36329
36356: POP
36357: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36358: LD_ADDR_EXP 109
36362: PUSH
36363: LD_EXP 109
36367: PPUSH
36368: LD_VAR 0 4
36372: PPUSH
36373: EMPTY
36374: PPUSH
36375: CALL_OW 1
36379: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36380: LD_VAR 0 1
36384: PPUSH
36385: LD_INT 0
36387: PPUSH
36388: CALL_OW 505
// end ; end ;
36392: LD_VAR 0 2
36396: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36397: LD_INT 0
36399: PPUSH
36400: PPUSH
36401: PPUSH
// if not hack in hackTanks or not vehicles then
36402: LD_VAR 0 1
36406: PUSH
36407: LD_EXP 108
36411: IN
36412: NOT
36413: PUSH
36414: LD_VAR 0 2
36418: NOT
36419: OR
36420: IFFALSE 36424
// exit ;
36422: GO 36699
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36424: LD_ADDR_VAR 0 2
36428: PUSH
36429: LD_VAR 0 1
36433: PPUSH
36434: LD_VAR 0 2
36438: PPUSH
36439: LD_INT 1
36441: PPUSH
36442: LD_INT 1
36444: PPUSH
36445: CALL 44659 0 4
36449: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36450: LD_ADDR_VAR 0 5
36454: PUSH
36455: LD_EXP 108
36459: PPUSH
36460: LD_VAR 0 1
36464: PPUSH
36465: CALL 44009 0 2
36469: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36470: LD_EXP 109
36474: PUSH
36475: LD_VAR 0 5
36479: ARRAY
36480: PUSH
36481: LD_EXP 110
36485: LESS
36486: IFFALSE 36675
// begin for i := 1 to vehicles do
36488: LD_ADDR_VAR 0 4
36492: PUSH
36493: DOUBLE
36494: LD_INT 1
36496: DEC
36497: ST_TO_ADDR
36498: LD_VAR 0 2
36502: PUSH
36503: FOR_TO
36504: IFFALSE 36673
// begin if hackTanksCaptured [ index ] = hackLimit then
36506: LD_EXP 109
36510: PUSH
36511: LD_VAR 0 5
36515: ARRAY
36516: PUSH
36517: LD_EXP 110
36521: EQUAL
36522: IFFALSE 36526
// break ;
36524: GO 36673
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36526: LD_ADDR_EXP 112
36530: PUSH
36531: LD_EXP 112
36535: PPUSH
36536: LD_VAR 0 5
36540: PPUSH
36541: LD_EXP 112
36545: PUSH
36546: LD_VAR 0 5
36550: ARRAY
36551: PUSH
36552: LD_INT 1
36554: PLUS
36555: PPUSH
36556: CALL_OW 1
36560: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36561: LD_ADDR_EXP 109
36565: PUSH
36566: LD_EXP 109
36570: PPUSH
36571: LD_VAR 0 5
36575: PUSH
36576: LD_EXP 109
36580: PUSH
36581: LD_VAR 0 5
36585: ARRAY
36586: PUSH
36587: LD_INT 1
36589: PLUS
36590: PUSH
36591: EMPTY
36592: LIST
36593: LIST
36594: PPUSH
36595: LD_VAR 0 2
36599: PUSH
36600: LD_VAR 0 4
36604: ARRAY
36605: PUSH
36606: LD_VAR 0 2
36610: PUSH
36611: LD_VAR 0 4
36615: ARRAY
36616: PPUSH
36617: CALL_OW 255
36621: PUSH
36622: EMPTY
36623: LIST
36624: LIST
36625: PPUSH
36626: CALL 44224 0 3
36630: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36631: LD_VAR 0 2
36635: PUSH
36636: LD_VAR 0 4
36640: ARRAY
36641: PPUSH
36642: LD_VAR 0 1
36646: PPUSH
36647: CALL_OW 255
36651: PPUSH
36652: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36656: LD_VAR 0 2
36660: PUSH
36661: LD_VAR 0 4
36665: ARRAY
36666: PPUSH
36667: CALL_OW 141
// end ;
36671: GO 36503
36673: POP
36674: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36675: LD_VAR 0 1
36679: PPUSH
36680: LD_EXP 109
36684: PUSH
36685: LD_VAR 0 5
36689: ARRAY
36690: PUSH
36691: LD_INT 0
36693: PLUS
36694: PPUSH
36695: CALL_OW 505
// end ;
36699: LD_VAR 0 3
36703: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36704: LD_INT 0
36706: PPUSH
36707: PPUSH
36708: PPUSH
36709: PPUSH
// if not hack in hackTanks then
36710: LD_VAR 0 1
36714: PUSH
36715: LD_EXP 108
36719: IN
36720: NOT
36721: IFFALSE 36725
// exit ;
36723: GO 36965
// index := GetElementIndex ( hackTanks , hack ) ;
36725: LD_ADDR_VAR 0 4
36729: PUSH
36730: LD_EXP 108
36734: PPUSH
36735: LD_VAR 0 1
36739: PPUSH
36740: CALL 44009 0 2
36744: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36745: LD_ADDR_VAR 0 3
36749: PUSH
36750: DOUBLE
36751: LD_EXP 109
36755: PUSH
36756: LD_VAR 0 4
36760: ARRAY
36761: INC
36762: ST_TO_ADDR
36763: LD_INT 1
36765: PUSH
36766: FOR_DOWNTO
36767: IFFALSE 36939
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36769: LD_ADDR_VAR 0 5
36773: PUSH
36774: LD_EXP 109
36778: PUSH
36779: LD_VAR 0 4
36783: ARRAY
36784: PUSH
36785: LD_VAR 0 3
36789: ARRAY
36790: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36791: LD_VAR 0 5
36795: PUSH
36796: LD_INT 1
36798: ARRAY
36799: PPUSH
36800: CALL_OW 302
36804: NOT
36805: PUSH
36806: LD_VAR 0 5
36810: PUSH
36811: LD_INT 1
36813: ARRAY
36814: PPUSH
36815: CALL_OW 255
36819: PUSH
36820: LD_VAR 0 1
36824: PPUSH
36825: CALL_OW 255
36829: NONEQUAL
36830: OR
36831: IFFALSE 36937
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36833: LD_VAR 0 5
36837: PUSH
36838: LD_INT 1
36840: ARRAY
36841: PPUSH
36842: CALL_OW 305
36846: PUSH
36847: LD_VAR 0 5
36851: PUSH
36852: LD_INT 1
36854: ARRAY
36855: PPUSH
36856: CALL_OW 255
36860: PUSH
36861: LD_VAR 0 1
36865: PPUSH
36866: CALL_OW 255
36870: EQUAL
36871: AND
36872: IFFALSE 36896
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36874: LD_VAR 0 5
36878: PUSH
36879: LD_INT 1
36881: ARRAY
36882: PPUSH
36883: LD_VAR 0 5
36887: PUSH
36888: LD_INT 2
36890: ARRAY
36891: PPUSH
36892: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36896: LD_ADDR_EXP 109
36900: PUSH
36901: LD_EXP 109
36905: PPUSH
36906: LD_VAR 0 4
36910: PPUSH
36911: LD_EXP 109
36915: PUSH
36916: LD_VAR 0 4
36920: ARRAY
36921: PPUSH
36922: LD_VAR 0 3
36926: PPUSH
36927: CALL_OW 3
36931: PPUSH
36932: CALL_OW 1
36936: ST_TO_ADDR
// end ; end ;
36937: GO 36766
36939: POP
36940: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36941: LD_VAR 0 1
36945: PPUSH
36946: LD_EXP 109
36950: PUSH
36951: LD_VAR 0 4
36955: ARRAY
36956: PUSH
36957: LD_INT 0
36959: PLUS
36960: PPUSH
36961: CALL_OW 505
// end ;
36965: LD_VAR 0 2
36969: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36970: LD_INT 0
36972: PPUSH
36973: PPUSH
36974: PPUSH
36975: PPUSH
// if not hack in hackTanks then
36976: LD_VAR 0 1
36980: PUSH
36981: LD_EXP 108
36985: IN
36986: NOT
36987: IFFALSE 36991
// exit ;
36989: GO 37076
// index := GetElementIndex ( hackTanks , hack ) ;
36991: LD_ADDR_VAR 0 5
36995: PUSH
36996: LD_EXP 108
37000: PPUSH
37001: LD_VAR 0 1
37005: PPUSH
37006: CALL 44009 0 2
37010: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
37011: LD_ADDR_VAR 0 4
37015: PUSH
37016: DOUBLE
37017: LD_INT 1
37019: DEC
37020: ST_TO_ADDR
37021: LD_EXP 109
37025: PUSH
37026: LD_VAR 0 5
37030: ARRAY
37031: PUSH
37032: FOR_TO
37033: IFFALSE 37074
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
37035: LD_EXP 109
37039: PUSH
37040: LD_VAR 0 5
37044: ARRAY
37045: PUSH
37046: LD_VAR 0 4
37050: ARRAY
37051: PUSH
37052: LD_INT 1
37054: ARRAY
37055: PUSH
37056: LD_VAR 0 2
37060: EQUAL
37061: IFFALSE 37072
// KillUnit ( vehicle ) ;
37063: LD_VAR 0 2
37067: PPUSH
37068: CALL_OW 66
37072: GO 37032
37074: POP
37075: POP
// end ;
37076: LD_VAR 0 3
37080: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
37081: LD_EXP 113
37085: NOT
37086: IFFALSE 37121
37088: GO 37090
37090: DISABLE
// begin initMiner := true ;
37091: LD_ADDR_EXP 113
37095: PUSH
37096: LD_INT 1
37098: ST_TO_ADDR
// minersList := [ ] ;
37099: LD_ADDR_EXP 114
37103: PUSH
37104: EMPTY
37105: ST_TO_ADDR
// minerMinesList := [ ] ;
37106: LD_ADDR_EXP 115
37110: PUSH
37111: EMPTY
37112: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37113: LD_ADDR_EXP 116
37117: PUSH
37118: LD_INT 5
37120: ST_TO_ADDR
// end ;
37121: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37122: LD_EXP 113
37126: PUSH
37127: LD_INT 34
37129: PUSH
37130: LD_INT 81
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PPUSH
37137: CALL_OW 69
37141: AND
37142: IFFALSE 37603
37144: GO 37146
37146: DISABLE
37147: LD_INT 0
37149: PPUSH
37150: PPUSH
37151: PPUSH
37152: PPUSH
// begin enable ;
37153: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37154: LD_ADDR_VAR 0 1
37158: PUSH
37159: LD_INT 34
37161: PUSH
37162: LD_INT 81
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PPUSH
37169: CALL_OW 69
37173: PUSH
37174: FOR_IN
37175: IFFALSE 37247
// begin if not i in minersList then
37177: LD_VAR 0 1
37181: PUSH
37182: LD_EXP 114
37186: IN
37187: NOT
37188: IFFALSE 37245
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37190: LD_ADDR_EXP 114
37194: PUSH
37195: LD_EXP 114
37199: PPUSH
37200: LD_EXP 114
37204: PUSH
37205: LD_INT 1
37207: PLUS
37208: PPUSH
37209: LD_VAR 0 1
37213: PPUSH
37214: CALL_OW 1
37218: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37219: LD_ADDR_EXP 115
37223: PUSH
37224: LD_EXP 115
37228: PPUSH
37229: LD_EXP 115
37233: PUSH
37234: LD_INT 1
37236: PLUS
37237: PPUSH
37238: EMPTY
37239: PPUSH
37240: CALL_OW 1
37244: ST_TO_ADDR
// end end ;
37245: GO 37174
37247: POP
37248: POP
// for i := minerMinesList downto 1 do
37249: LD_ADDR_VAR 0 1
37253: PUSH
37254: DOUBLE
37255: LD_EXP 115
37259: INC
37260: ST_TO_ADDR
37261: LD_INT 1
37263: PUSH
37264: FOR_DOWNTO
37265: IFFALSE 37601
// begin if IsLive ( minersList [ i ] ) then
37267: LD_EXP 114
37271: PUSH
37272: LD_VAR 0 1
37276: ARRAY
37277: PPUSH
37278: CALL_OW 300
37282: IFFALSE 37310
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37284: LD_EXP 114
37288: PUSH
37289: LD_VAR 0 1
37293: ARRAY
37294: PPUSH
37295: LD_EXP 115
37299: PUSH
37300: LD_VAR 0 1
37304: ARRAY
37305: PPUSH
37306: CALL_OW 505
// if not minerMinesList [ i ] then
37310: LD_EXP 115
37314: PUSH
37315: LD_VAR 0 1
37319: ARRAY
37320: NOT
37321: IFFALSE 37325
// continue ;
37323: GO 37264
// for j := minerMinesList [ i ] downto 1 do
37325: LD_ADDR_VAR 0 2
37329: PUSH
37330: DOUBLE
37331: LD_EXP 115
37335: PUSH
37336: LD_VAR 0 1
37340: ARRAY
37341: INC
37342: ST_TO_ADDR
37343: LD_INT 1
37345: PUSH
37346: FOR_DOWNTO
37347: IFFALSE 37597
// begin side := GetSide ( minersList [ i ] ) ;
37349: LD_ADDR_VAR 0 3
37353: PUSH
37354: LD_EXP 114
37358: PUSH
37359: LD_VAR 0 1
37363: ARRAY
37364: PPUSH
37365: CALL_OW 255
37369: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37370: LD_ADDR_VAR 0 4
37374: PUSH
37375: LD_EXP 115
37379: PUSH
37380: LD_VAR 0 1
37384: ARRAY
37385: PUSH
37386: LD_VAR 0 2
37390: ARRAY
37391: PUSH
37392: LD_INT 1
37394: ARRAY
37395: PPUSH
37396: LD_EXP 115
37400: PUSH
37401: LD_VAR 0 1
37405: ARRAY
37406: PUSH
37407: LD_VAR 0 2
37411: ARRAY
37412: PUSH
37413: LD_INT 2
37415: ARRAY
37416: PPUSH
37417: CALL_OW 428
37421: ST_TO_ADDR
// if not tmp then
37422: LD_VAR 0 4
37426: NOT
37427: IFFALSE 37431
// continue ;
37429: GO 37346
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37431: LD_VAR 0 4
37435: PUSH
37436: LD_INT 81
37438: PUSH
37439: LD_VAR 0 3
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PPUSH
37448: CALL_OW 69
37452: IN
37453: PUSH
37454: LD_EXP 115
37458: PUSH
37459: LD_VAR 0 1
37463: ARRAY
37464: PUSH
37465: LD_VAR 0 2
37469: ARRAY
37470: PUSH
37471: LD_INT 1
37473: ARRAY
37474: PPUSH
37475: LD_EXP 115
37479: PUSH
37480: LD_VAR 0 1
37484: ARRAY
37485: PUSH
37486: LD_VAR 0 2
37490: ARRAY
37491: PUSH
37492: LD_INT 2
37494: ARRAY
37495: PPUSH
37496: CALL_OW 458
37500: AND
37501: IFFALSE 37595
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37503: LD_EXP 115
37507: PUSH
37508: LD_VAR 0 1
37512: ARRAY
37513: PUSH
37514: LD_VAR 0 2
37518: ARRAY
37519: PUSH
37520: LD_INT 1
37522: ARRAY
37523: PPUSH
37524: LD_EXP 115
37528: PUSH
37529: LD_VAR 0 1
37533: ARRAY
37534: PUSH
37535: LD_VAR 0 2
37539: ARRAY
37540: PUSH
37541: LD_INT 2
37543: ARRAY
37544: PPUSH
37545: LD_VAR 0 3
37549: PPUSH
37550: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37554: LD_ADDR_EXP 115
37558: PUSH
37559: LD_EXP 115
37563: PPUSH
37564: LD_VAR 0 1
37568: PPUSH
37569: LD_EXP 115
37573: PUSH
37574: LD_VAR 0 1
37578: ARRAY
37579: PPUSH
37580: LD_VAR 0 2
37584: PPUSH
37585: CALL_OW 3
37589: PPUSH
37590: CALL_OW 1
37594: ST_TO_ADDR
// end ; end ;
37595: GO 37346
37597: POP
37598: POP
// end ;
37599: GO 37264
37601: POP
37602: POP
// end ;
37603: PPOPN 4
37605: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37606: LD_INT 0
37608: PPUSH
37609: PPUSH
// result := false ;
37610: LD_ADDR_VAR 0 4
37614: PUSH
37615: LD_INT 0
37617: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37618: LD_VAR 0 1
37622: PPUSH
37623: CALL_OW 264
37627: PUSH
37628: LD_INT 81
37630: EQUAL
37631: NOT
37632: IFFALSE 37636
// exit ;
37634: GO 37876
// index := GetElementIndex ( minersList , unit ) ;
37636: LD_ADDR_VAR 0 5
37640: PUSH
37641: LD_EXP 114
37645: PPUSH
37646: LD_VAR 0 1
37650: PPUSH
37651: CALL 44009 0 2
37655: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37656: LD_EXP 115
37660: PUSH
37661: LD_VAR 0 5
37665: ARRAY
37666: PUSH
37667: LD_EXP 116
37671: GREATEREQUAL
37672: IFFALSE 37676
// exit ;
37674: GO 37876
// ComMoveXY ( unit , x , y ) ;
37676: LD_VAR 0 1
37680: PPUSH
37681: LD_VAR 0 2
37685: PPUSH
37686: LD_VAR 0 3
37690: PPUSH
37691: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37695: LD_INT 35
37697: PPUSH
37698: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37702: LD_VAR 0 1
37706: PPUSH
37707: LD_VAR 0 2
37711: PPUSH
37712: LD_VAR 0 3
37716: PPUSH
37717: CALL 75364 0 3
37721: NOT
37722: PUSH
37723: LD_VAR 0 1
37727: PPUSH
37728: CALL_OW 314
37732: AND
37733: IFFALSE 37737
// exit ;
37735: GO 37876
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37737: LD_VAR 0 2
37741: PPUSH
37742: LD_VAR 0 3
37746: PPUSH
37747: CALL_OW 428
37751: PUSH
37752: LD_VAR 0 1
37756: EQUAL
37757: PUSH
37758: LD_VAR 0 1
37762: PPUSH
37763: CALL_OW 314
37767: NOT
37768: AND
37769: IFFALSE 37695
// PlaySoundXY ( x , y , PlantMine ) ;
37771: LD_VAR 0 2
37775: PPUSH
37776: LD_VAR 0 3
37780: PPUSH
37781: LD_STRING PlantMine
37783: PPUSH
37784: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37788: LD_VAR 0 2
37792: PPUSH
37793: LD_VAR 0 3
37797: PPUSH
37798: LD_VAR 0 1
37802: PPUSH
37803: CALL_OW 255
37807: PPUSH
37808: LD_INT 0
37810: PPUSH
37811: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37815: LD_ADDR_EXP 115
37819: PUSH
37820: LD_EXP 115
37824: PPUSH
37825: LD_VAR 0 5
37829: PUSH
37830: LD_EXP 115
37834: PUSH
37835: LD_VAR 0 5
37839: ARRAY
37840: PUSH
37841: LD_INT 1
37843: PLUS
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PPUSH
37849: LD_VAR 0 2
37853: PUSH
37854: LD_VAR 0 3
37858: PUSH
37859: EMPTY
37860: LIST
37861: LIST
37862: PPUSH
37863: CALL 44224 0 3
37867: ST_TO_ADDR
// result := true ;
37868: LD_ADDR_VAR 0 4
37872: PUSH
37873: LD_INT 1
37875: ST_TO_ADDR
// end ;
37876: LD_VAR 0 4
37880: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37881: LD_INT 0
37883: PPUSH
37884: PPUSH
37885: PPUSH
// if not unit in minersList then
37886: LD_VAR 0 1
37890: PUSH
37891: LD_EXP 114
37895: IN
37896: NOT
37897: IFFALSE 37901
// exit ;
37899: GO 38293
// index := GetElementIndex ( minersList , unit ) ;
37901: LD_ADDR_VAR 0 6
37905: PUSH
37906: LD_EXP 114
37910: PPUSH
37911: LD_VAR 0 1
37915: PPUSH
37916: CALL 44009 0 2
37920: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37921: LD_ADDR_VAR 0 5
37925: PUSH
37926: DOUBLE
37927: LD_EXP 115
37931: PUSH
37932: LD_VAR 0 6
37936: ARRAY
37937: INC
37938: ST_TO_ADDR
37939: LD_INT 1
37941: PUSH
37942: FOR_DOWNTO
37943: IFFALSE 38104
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37945: LD_EXP 115
37949: PUSH
37950: LD_VAR 0 6
37954: ARRAY
37955: PUSH
37956: LD_VAR 0 5
37960: ARRAY
37961: PUSH
37962: LD_INT 1
37964: ARRAY
37965: PUSH
37966: LD_VAR 0 2
37970: EQUAL
37971: PUSH
37972: LD_EXP 115
37976: PUSH
37977: LD_VAR 0 6
37981: ARRAY
37982: PUSH
37983: LD_VAR 0 5
37987: ARRAY
37988: PUSH
37989: LD_INT 2
37991: ARRAY
37992: PUSH
37993: LD_VAR 0 3
37997: EQUAL
37998: AND
37999: IFFALSE 38102
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38001: LD_EXP 115
38005: PUSH
38006: LD_VAR 0 6
38010: ARRAY
38011: PUSH
38012: LD_VAR 0 5
38016: ARRAY
38017: PUSH
38018: LD_INT 1
38020: ARRAY
38021: PPUSH
38022: LD_EXP 115
38026: PUSH
38027: LD_VAR 0 6
38031: ARRAY
38032: PUSH
38033: LD_VAR 0 5
38037: ARRAY
38038: PUSH
38039: LD_INT 2
38041: ARRAY
38042: PPUSH
38043: LD_VAR 0 1
38047: PPUSH
38048: CALL_OW 255
38052: PPUSH
38053: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38057: LD_ADDR_EXP 115
38061: PUSH
38062: LD_EXP 115
38066: PPUSH
38067: LD_VAR 0 6
38071: PPUSH
38072: LD_EXP 115
38076: PUSH
38077: LD_VAR 0 6
38081: ARRAY
38082: PPUSH
38083: LD_VAR 0 5
38087: PPUSH
38088: CALL_OW 3
38092: PPUSH
38093: CALL_OW 1
38097: ST_TO_ADDR
// exit ;
38098: POP
38099: POP
38100: GO 38293
// end ; end ;
38102: GO 37942
38104: POP
38105: POP
// for i := minerMinesList [ index ] downto 1 do
38106: LD_ADDR_VAR 0 5
38110: PUSH
38111: DOUBLE
38112: LD_EXP 115
38116: PUSH
38117: LD_VAR 0 6
38121: ARRAY
38122: INC
38123: ST_TO_ADDR
38124: LD_INT 1
38126: PUSH
38127: FOR_DOWNTO
38128: IFFALSE 38291
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38130: LD_EXP 115
38134: PUSH
38135: LD_VAR 0 6
38139: ARRAY
38140: PUSH
38141: LD_VAR 0 5
38145: ARRAY
38146: PUSH
38147: LD_INT 1
38149: ARRAY
38150: PPUSH
38151: LD_EXP 115
38155: PUSH
38156: LD_VAR 0 6
38160: ARRAY
38161: PUSH
38162: LD_VAR 0 5
38166: ARRAY
38167: PUSH
38168: LD_INT 2
38170: ARRAY
38171: PPUSH
38172: LD_VAR 0 2
38176: PPUSH
38177: LD_VAR 0 3
38181: PPUSH
38182: CALL_OW 298
38186: PUSH
38187: LD_INT 6
38189: LESS
38190: IFFALSE 38289
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38192: LD_EXP 115
38196: PUSH
38197: LD_VAR 0 6
38201: ARRAY
38202: PUSH
38203: LD_VAR 0 5
38207: ARRAY
38208: PUSH
38209: LD_INT 1
38211: ARRAY
38212: PPUSH
38213: LD_EXP 115
38217: PUSH
38218: LD_VAR 0 6
38222: ARRAY
38223: PUSH
38224: LD_VAR 0 5
38228: ARRAY
38229: PUSH
38230: LD_INT 2
38232: ARRAY
38233: PPUSH
38234: LD_VAR 0 1
38238: PPUSH
38239: CALL_OW 255
38243: PPUSH
38244: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38248: LD_ADDR_EXP 115
38252: PUSH
38253: LD_EXP 115
38257: PPUSH
38258: LD_VAR 0 6
38262: PPUSH
38263: LD_EXP 115
38267: PUSH
38268: LD_VAR 0 6
38272: ARRAY
38273: PPUSH
38274: LD_VAR 0 5
38278: PPUSH
38279: CALL_OW 3
38283: PPUSH
38284: CALL_OW 1
38288: ST_TO_ADDR
// end ; end ;
38289: GO 38127
38291: POP
38292: POP
// end ;
38293: LD_VAR 0 4
38297: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38298: LD_INT 0
38300: PPUSH
38301: PPUSH
38302: PPUSH
38303: PPUSH
38304: PPUSH
38305: PPUSH
38306: PPUSH
38307: PPUSH
38308: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38309: LD_VAR 0 1
38313: PPUSH
38314: CALL_OW 264
38318: PUSH
38319: LD_INT 81
38321: EQUAL
38322: NOT
38323: PUSH
38324: LD_VAR 0 1
38328: PUSH
38329: LD_EXP 114
38333: IN
38334: NOT
38335: OR
38336: IFFALSE 38340
// exit ;
38338: GO 38662
// index := GetElementIndex ( minersList , unit ) ;
38340: LD_ADDR_VAR 0 6
38344: PUSH
38345: LD_EXP 114
38349: PPUSH
38350: LD_VAR 0 1
38354: PPUSH
38355: CALL 44009 0 2
38359: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38360: LD_ADDR_VAR 0 8
38364: PUSH
38365: LD_EXP 116
38369: PUSH
38370: LD_EXP 115
38374: PUSH
38375: LD_VAR 0 6
38379: ARRAY
38380: MINUS
38381: ST_TO_ADDR
// if not minesFreeAmount then
38382: LD_VAR 0 8
38386: NOT
38387: IFFALSE 38391
// exit ;
38389: GO 38662
// tmp := [ ] ;
38391: LD_ADDR_VAR 0 7
38395: PUSH
38396: EMPTY
38397: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38398: LD_ADDR_VAR 0 5
38402: PUSH
38403: DOUBLE
38404: LD_INT 1
38406: DEC
38407: ST_TO_ADDR
38408: LD_VAR 0 8
38412: PUSH
38413: FOR_TO
38414: IFFALSE 38609
// begin _d := rand ( 0 , 5 ) ;
38416: LD_ADDR_VAR 0 11
38420: PUSH
38421: LD_INT 0
38423: PPUSH
38424: LD_INT 5
38426: PPUSH
38427: CALL_OW 12
38431: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38432: LD_ADDR_VAR 0 12
38436: PUSH
38437: LD_INT 2
38439: PPUSH
38440: LD_INT 6
38442: PPUSH
38443: CALL_OW 12
38447: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38448: LD_ADDR_VAR 0 9
38452: PUSH
38453: LD_VAR 0 2
38457: PPUSH
38458: LD_VAR 0 11
38462: PPUSH
38463: LD_VAR 0 12
38467: PPUSH
38468: CALL_OW 272
38472: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38473: LD_ADDR_VAR 0 10
38477: PUSH
38478: LD_VAR 0 3
38482: PPUSH
38483: LD_VAR 0 11
38487: PPUSH
38488: LD_VAR 0 12
38492: PPUSH
38493: CALL_OW 273
38497: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38498: LD_VAR 0 9
38502: PPUSH
38503: LD_VAR 0 10
38507: PPUSH
38508: CALL_OW 488
38512: PUSH
38513: LD_VAR 0 9
38517: PUSH
38518: LD_VAR 0 10
38522: PUSH
38523: EMPTY
38524: LIST
38525: LIST
38526: PUSH
38527: LD_VAR 0 7
38531: IN
38532: NOT
38533: AND
38534: PUSH
38535: LD_VAR 0 9
38539: PPUSH
38540: LD_VAR 0 10
38544: PPUSH
38545: CALL_OW 458
38549: NOT
38550: AND
38551: IFFALSE 38593
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38553: LD_ADDR_VAR 0 7
38557: PUSH
38558: LD_VAR 0 7
38562: PPUSH
38563: LD_VAR 0 7
38567: PUSH
38568: LD_INT 1
38570: PLUS
38571: PPUSH
38572: LD_VAR 0 9
38576: PUSH
38577: LD_VAR 0 10
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PPUSH
38586: CALL_OW 1
38590: ST_TO_ADDR
38591: GO 38607
// i := i - 1 ;
38593: LD_ADDR_VAR 0 5
38597: PUSH
38598: LD_VAR 0 5
38602: PUSH
38603: LD_INT 1
38605: MINUS
38606: ST_TO_ADDR
// end ;
38607: GO 38413
38609: POP
38610: POP
// for i in tmp do
38611: LD_ADDR_VAR 0 5
38615: PUSH
38616: LD_VAR 0 7
38620: PUSH
38621: FOR_IN
38622: IFFALSE 38660
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38624: LD_VAR 0 1
38628: PPUSH
38629: LD_VAR 0 5
38633: PUSH
38634: LD_INT 1
38636: ARRAY
38637: PPUSH
38638: LD_VAR 0 5
38642: PUSH
38643: LD_INT 2
38645: ARRAY
38646: PPUSH
38647: CALL 37606 0 3
38651: NOT
38652: IFFALSE 38658
// exit ;
38654: POP
38655: POP
38656: GO 38662
38658: GO 38621
38660: POP
38661: POP
// end ;
38662: LD_VAR 0 4
38666: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38667: LD_INT 0
38669: PPUSH
38670: PPUSH
38671: PPUSH
38672: PPUSH
38673: PPUSH
38674: PPUSH
38675: PPUSH
// if not GetClass ( unit ) = class_sniper then
38676: LD_VAR 0 1
38680: PPUSH
38681: CALL_OW 257
38685: PUSH
38686: LD_INT 5
38688: EQUAL
38689: NOT
38690: IFFALSE 38694
// exit ;
38692: GO 39082
// dist := 8 ;
38694: LD_ADDR_VAR 0 5
38698: PUSH
38699: LD_INT 8
38701: ST_TO_ADDR
// viewRange := 12 ;
38702: LD_ADDR_VAR 0 7
38706: PUSH
38707: LD_INT 12
38709: ST_TO_ADDR
// side := GetSide ( unit ) ;
38710: LD_ADDR_VAR 0 6
38714: PUSH
38715: LD_VAR 0 1
38719: PPUSH
38720: CALL_OW 255
38724: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38725: LD_INT 61
38727: PPUSH
38728: LD_VAR 0 6
38732: PPUSH
38733: CALL_OW 321
38737: PUSH
38738: LD_INT 2
38740: EQUAL
38741: IFFALSE 38751
// viewRange := 16 ;
38743: LD_ADDR_VAR 0 7
38747: PUSH
38748: LD_INT 16
38750: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38751: LD_VAR 0 1
38755: PPUSH
38756: LD_VAR 0 2
38760: PPUSH
38761: LD_VAR 0 3
38765: PPUSH
38766: CALL_OW 297
38770: PUSH
38771: LD_VAR 0 5
38775: GREATER
38776: IFFALSE 38855
// begin ComMoveXY ( unit , x , y ) ;
38778: LD_VAR 0 1
38782: PPUSH
38783: LD_VAR 0 2
38787: PPUSH
38788: LD_VAR 0 3
38792: PPUSH
38793: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38797: LD_INT 35
38799: PPUSH
38800: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38804: LD_VAR 0 1
38808: PPUSH
38809: LD_VAR 0 2
38813: PPUSH
38814: LD_VAR 0 3
38818: PPUSH
38819: CALL 75364 0 3
38823: NOT
38824: IFFALSE 38828
// exit ;
38826: GO 39082
// until GetDistUnitXY ( unit , x , y ) < dist ;
38828: LD_VAR 0 1
38832: PPUSH
38833: LD_VAR 0 2
38837: PPUSH
38838: LD_VAR 0 3
38842: PPUSH
38843: CALL_OW 297
38847: PUSH
38848: LD_VAR 0 5
38852: LESS
38853: IFFALSE 38797
// end ; ComTurnXY ( unit , x , y ) ;
38855: LD_VAR 0 1
38859: PPUSH
38860: LD_VAR 0 2
38864: PPUSH
38865: LD_VAR 0 3
38869: PPUSH
38870: CALL_OW 118
// wait ( 5 ) ;
38874: LD_INT 5
38876: PPUSH
38877: CALL_OW 67
// _d := GetDir ( unit ) ;
38881: LD_ADDR_VAR 0 10
38885: PUSH
38886: LD_VAR 0 1
38890: PPUSH
38891: CALL_OW 254
38895: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38896: LD_ADDR_VAR 0 8
38900: PUSH
38901: LD_VAR 0 1
38905: PPUSH
38906: CALL_OW 250
38910: PPUSH
38911: LD_VAR 0 10
38915: PPUSH
38916: LD_VAR 0 5
38920: PPUSH
38921: CALL_OW 272
38925: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38926: LD_ADDR_VAR 0 9
38930: PUSH
38931: LD_VAR 0 1
38935: PPUSH
38936: CALL_OW 251
38940: PPUSH
38941: LD_VAR 0 10
38945: PPUSH
38946: LD_VAR 0 5
38950: PPUSH
38951: CALL_OW 273
38955: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38956: LD_VAR 0 8
38960: PPUSH
38961: LD_VAR 0 9
38965: PPUSH
38966: CALL_OW 488
38970: NOT
38971: IFFALSE 38975
// exit ;
38973: GO 39082
// ComAnimCustom ( unit , 1 ) ;
38975: LD_VAR 0 1
38979: PPUSH
38980: LD_INT 1
38982: PPUSH
38983: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38987: LD_VAR 0 8
38991: PPUSH
38992: LD_VAR 0 9
38996: PPUSH
38997: LD_VAR 0 6
39001: PPUSH
39002: LD_VAR 0 7
39006: PPUSH
39007: CALL_OW 330
// repeat wait ( 1 ) ;
39011: LD_INT 1
39013: PPUSH
39014: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
39018: LD_VAR 0 1
39022: PPUSH
39023: CALL_OW 316
39027: PUSH
39028: LD_VAR 0 1
39032: PPUSH
39033: CALL_OW 314
39037: OR
39038: PUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: CALL_OW 302
39048: NOT
39049: OR
39050: PUSH
39051: LD_VAR 0 1
39055: PPUSH
39056: CALL_OW 301
39060: OR
39061: IFFALSE 39011
// RemoveSeeing ( _x , _y , side ) ;
39063: LD_VAR 0 8
39067: PPUSH
39068: LD_VAR 0 9
39072: PPUSH
39073: LD_VAR 0 6
39077: PPUSH
39078: CALL_OW 331
// end ; end_of_file
39082: LD_VAR 0 4
39086: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
39087: LD_INT 0
39089: PPUSH
39090: PPUSH
// if exist_mode then
39091: LD_VAR 0 2
39095: IFFALSE 39120
// unit := CreateCharacter ( prefix & ident ) else
39097: LD_ADDR_VAR 0 5
39101: PUSH
39102: LD_VAR 0 3
39106: PUSH
39107: LD_VAR 0 1
39111: STR
39112: PPUSH
39113: CALL_OW 34
39117: ST_TO_ADDR
39118: GO 39135
// unit := NewCharacter ( ident ) ;
39120: LD_ADDR_VAR 0 5
39124: PUSH
39125: LD_VAR 0 1
39129: PPUSH
39130: CALL_OW 25
39134: ST_TO_ADDR
// result := unit ;
39135: LD_ADDR_VAR 0 4
39139: PUSH
39140: LD_VAR 0 5
39144: ST_TO_ADDR
// end ;
39145: LD_VAR 0 4
39149: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39150: LD_INT 0
39152: PPUSH
39153: PPUSH
// if not side or not nation then
39154: LD_VAR 0 1
39158: NOT
39159: PUSH
39160: LD_VAR 0 2
39164: NOT
39165: OR
39166: IFFALSE 39170
// exit ;
39168: GO 39938
// case nation of nation_american :
39170: LD_VAR 0 2
39174: PUSH
39175: LD_INT 1
39177: DOUBLE
39178: EQUAL
39179: IFTRUE 39183
39181: GO 39397
39183: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39184: LD_ADDR_VAR 0 4
39188: PUSH
39189: LD_INT 35
39191: PUSH
39192: LD_INT 45
39194: PUSH
39195: LD_INT 46
39197: PUSH
39198: LD_INT 47
39200: PUSH
39201: LD_INT 82
39203: PUSH
39204: LD_INT 83
39206: PUSH
39207: LD_INT 84
39209: PUSH
39210: LD_INT 85
39212: PUSH
39213: LD_INT 86
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: LD_INT 2
39221: PUSH
39222: LD_INT 6
39224: PUSH
39225: LD_INT 15
39227: PUSH
39228: LD_INT 16
39230: PUSH
39231: LD_INT 7
39233: PUSH
39234: LD_INT 12
39236: PUSH
39237: LD_INT 13
39239: PUSH
39240: LD_INT 10
39242: PUSH
39243: LD_INT 14
39245: PUSH
39246: LD_INT 20
39248: PUSH
39249: LD_INT 21
39251: PUSH
39252: LD_INT 22
39254: PUSH
39255: LD_INT 25
39257: PUSH
39258: LD_INT 32
39260: PUSH
39261: LD_INT 27
39263: PUSH
39264: LD_INT 36
39266: PUSH
39267: LD_INT 69
39269: PUSH
39270: LD_INT 39
39272: PUSH
39273: LD_INT 34
39275: PUSH
39276: LD_INT 40
39278: PUSH
39279: LD_INT 48
39281: PUSH
39282: LD_INT 49
39284: PUSH
39285: LD_INT 50
39287: PUSH
39288: LD_INT 51
39290: PUSH
39291: LD_INT 52
39293: PUSH
39294: LD_INT 53
39296: PUSH
39297: LD_INT 54
39299: PUSH
39300: LD_INT 55
39302: PUSH
39303: LD_INT 56
39305: PUSH
39306: LD_INT 57
39308: PUSH
39309: LD_INT 58
39311: PUSH
39312: LD_INT 59
39314: PUSH
39315: LD_INT 60
39317: PUSH
39318: LD_INT 61
39320: PUSH
39321: LD_INT 62
39323: PUSH
39324: LD_INT 80
39326: PUSH
39327: LD_INT 82
39329: PUSH
39330: LD_INT 83
39332: PUSH
39333: LD_INT 84
39335: PUSH
39336: LD_INT 85
39338: PUSH
39339: LD_INT 86
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: LIST
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: ST_TO_ADDR
39395: GO 39862
39397: LD_INT 2
39399: DOUBLE
39400: EQUAL
39401: IFTRUE 39405
39403: GO 39631
39405: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39406: LD_ADDR_VAR 0 4
39410: PUSH
39411: LD_INT 35
39413: PUSH
39414: LD_INT 45
39416: PUSH
39417: LD_INT 46
39419: PUSH
39420: LD_INT 47
39422: PUSH
39423: LD_INT 82
39425: PUSH
39426: LD_INT 83
39428: PUSH
39429: LD_INT 84
39431: PUSH
39432: LD_INT 85
39434: PUSH
39435: LD_INT 87
39437: PUSH
39438: LD_INT 70
39440: PUSH
39441: LD_INT 1
39443: PUSH
39444: LD_INT 11
39446: PUSH
39447: LD_INT 3
39449: PUSH
39450: LD_INT 4
39452: PUSH
39453: LD_INT 5
39455: PUSH
39456: LD_INT 6
39458: PUSH
39459: LD_INT 15
39461: PUSH
39462: LD_INT 18
39464: PUSH
39465: LD_INT 7
39467: PUSH
39468: LD_INT 17
39470: PUSH
39471: LD_INT 8
39473: PUSH
39474: LD_INT 20
39476: PUSH
39477: LD_INT 21
39479: PUSH
39480: LD_INT 22
39482: PUSH
39483: LD_INT 72
39485: PUSH
39486: LD_INT 26
39488: PUSH
39489: LD_INT 69
39491: PUSH
39492: LD_INT 39
39494: PUSH
39495: LD_INT 40
39497: PUSH
39498: LD_INT 41
39500: PUSH
39501: LD_INT 42
39503: PUSH
39504: LD_INT 43
39506: PUSH
39507: LD_INT 48
39509: PUSH
39510: LD_INT 49
39512: PUSH
39513: LD_INT 50
39515: PUSH
39516: LD_INT 51
39518: PUSH
39519: LD_INT 52
39521: PUSH
39522: LD_INT 53
39524: PUSH
39525: LD_INT 54
39527: PUSH
39528: LD_INT 55
39530: PUSH
39531: LD_INT 56
39533: PUSH
39534: LD_INT 60
39536: PUSH
39537: LD_INT 61
39539: PUSH
39540: LD_INT 62
39542: PUSH
39543: LD_INT 66
39545: PUSH
39546: LD_INT 67
39548: PUSH
39549: LD_INT 68
39551: PUSH
39552: LD_INT 81
39554: PUSH
39555: LD_INT 82
39557: PUSH
39558: LD_INT 83
39560: PUSH
39561: LD_INT 84
39563: PUSH
39564: LD_INT 85
39566: PUSH
39567: LD_INT 87
39569: PUSH
39570: LD_INT 88
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: LIST
39620: LIST
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: LIST
39626: LIST
39627: LIST
39628: ST_TO_ADDR
39629: GO 39862
39631: LD_INT 3
39633: DOUBLE
39634: EQUAL
39635: IFTRUE 39639
39637: GO 39861
39639: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39640: LD_ADDR_VAR 0 4
39644: PUSH
39645: LD_INT 46
39647: PUSH
39648: LD_INT 47
39650: PUSH
39651: LD_INT 1
39653: PUSH
39654: LD_INT 2
39656: PUSH
39657: LD_INT 82
39659: PUSH
39660: LD_INT 83
39662: PUSH
39663: LD_INT 84
39665: PUSH
39666: LD_INT 85
39668: PUSH
39669: LD_INT 86
39671: PUSH
39672: LD_INT 11
39674: PUSH
39675: LD_INT 9
39677: PUSH
39678: LD_INT 20
39680: PUSH
39681: LD_INT 19
39683: PUSH
39684: LD_INT 21
39686: PUSH
39687: LD_INT 24
39689: PUSH
39690: LD_INT 22
39692: PUSH
39693: LD_INT 25
39695: PUSH
39696: LD_INT 28
39698: PUSH
39699: LD_INT 29
39701: PUSH
39702: LD_INT 30
39704: PUSH
39705: LD_INT 31
39707: PUSH
39708: LD_INT 37
39710: PUSH
39711: LD_INT 38
39713: PUSH
39714: LD_INT 32
39716: PUSH
39717: LD_INT 27
39719: PUSH
39720: LD_INT 33
39722: PUSH
39723: LD_INT 69
39725: PUSH
39726: LD_INT 39
39728: PUSH
39729: LD_INT 34
39731: PUSH
39732: LD_INT 40
39734: PUSH
39735: LD_INT 71
39737: PUSH
39738: LD_INT 23
39740: PUSH
39741: LD_INT 44
39743: PUSH
39744: LD_INT 48
39746: PUSH
39747: LD_INT 49
39749: PUSH
39750: LD_INT 50
39752: PUSH
39753: LD_INT 51
39755: PUSH
39756: LD_INT 52
39758: PUSH
39759: LD_INT 53
39761: PUSH
39762: LD_INT 54
39764: PUSH
39765: LD_INT 55
39767: PUSH
39768: LD_INT 56
39770: PUSH
39771: LD_INT 57
39773: PUSH
39774: LD_INT 58
39776: PUSH
39777: LD_INT 59
39779: PUSH
39780: LD_INT 63
39782: PUSH
39783: LD_INT 64
39785: PUSH
39786: LD_INT 65
39788: PUSH
39789: LD_INT 82
39791: PUSH
39792: LD_INT 83
39794: PUSH
39795: LD_INT 84
39797: PUSH
39798: LD_INT 85
39800: PUSH
39801: LD_INT 86
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: ST_TO_ADDR
39859: GO 39862
39861: POP
// if state > - 1 and state < 3 then
39862: LD_VAR 0 3
39866: PUSH
39867: LD_INT 1
39869: NEG
39870: GREATER
39871: PUSH
39872: LD_VAR 0 3
39876: PUSH
39877: LD_INT 3
39879: LESS
39880: AND
39881: IFFALSE 39938
// for i in result do
39883: LD_ADDR_VAR 0 5
39887: PUSH
39888: LD_VAR 0 4
39892: PUSH
39893: FOR_IN
39894: IFFALSE 39936
// if GetTech ( i , side ) <> state then
39896: LD_VAR 0 5
39900: PPUSH
39901: LD_VAR 0 1
39905: PPUSH
39906: CALL_OW 321
39910: PUSH
39911: LD_VAR 0 3
39915: NONEQUAL
39916: IFFALSE 39934
// result := result diff i ;
39918: LD_ADDR_VAR 0 4
39922: PUSH
39923: LD_VAR 0 4
39927: PUSH
39928: LD_VAR 0 5
39932: DIFF
39933: ST_TO_ADDR
39934: GO 39893
39936: POP
39937: POP
// end ;
39938: LD_VAR 0 4
39942: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39943: LD_INT 0
39945: PPUSH
39946: PPUSH
39947: PPUSH
// result := true ;
39948: LD_ADDR_VAR 0 3
39952: PUSH
39953: LD_INT 1
39955: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39956: LD_ADDR_VAR 0 5
39960: PUSH
39961: LD_VAR 0 2
39965: PPUSH
39966: CALL_OW 480
39970: ST_TO_ADDR
// if not tmp then
39971: LD_VAR 0 5
39975: NOT
39976: IFFALSE 39980
// exit ;
39978: GO 40029
// for i in tmp do
39980: LD_ADDR_VAR 0 4
39984: PUSH
39985: LD_VAR 0 5
39989: PUSH
39990: FOR_IN
39991: IFFALSE 40027
// if GetTech ( i , side ) <> state_researched then
39993: LD_VAR 0 4
39997: PPUSH
39998: LD_VAR 0 1
40002: PPUSH
40003: CALL_OW 321
40007: PUSH
40008: LD_INT 2
40010: NONEQUAL
40011: IFFALSE 40025
// begin result := false ;
40013: LD_ADDR_VAR 0 3
40017: PUSH
40018: LD_INT 0
40020: ST_TO_ADDR
// exit ;
40021: POP
40022: POP
40023: GO 40029
// end ;
40025: GO 39990
40027: POP
40028: POP
// end ;
40029: LD_VAR 0 3
40033: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
40034: LD_INT 0
40036: PPUSH
40037: PPUSH
40038: PPUSH
40039: PPUSH
40040: PPUSH
40041: PPUSH
40042: PPUSH
40043: PPUSH
40044: PPUSH
40045: PPUSH
40046: PPUSH
40047: PPUSH
40048: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
40049: LD_VAR 0 1
40053: NOT
40054: PUSH
40055: LD_VAR 0 1
40059: PPUSH
40060: CALL_OW 257
40064: PUSH
40065: LD_INT 9
40067: NONEQUAL
40068: OR
40069: IFFALSE 40073
// exit ;
40071: GO 40646
// side := GetSide ( unit ) ;
40073: LD_ADDR_VAR 0 9
40077: PUSH
40078: LD_VAR 0 1
40082: PPUSH
40083: CALL_OW 255
40087: ST_TO_ADDR
// tech_space := tech_spacanom ;
40088: LD_ADDR_VAR 0 12
40092: PUSH
40093: LD_INT 29
40095: ST_TO_ADDR
// tech_time := tech_taurad ;
40096: LD_ADDR_VAR 0 13
40100: PUSH
40101: LD_INT 28
40103: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40104: LD_ADDR_VAR 0 11
40108: PUSH
40109: LD_VAR 0 1
40113: PPUSH
40114: CALL_OW 310
40118: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40119: LD_VAR 0 11
40123: PPUSH
40124: CALL_OW 247
40128: PUSH
40129: LD_INT 2
40131: EQUAL
40132: IFFALSE 40136
// exit ;
40134: GO 40646
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40136: LD_ADDR_VAR 0 8
40140: PUSH
40141: LD_INT 81
40143: PUSH
40144: LD_VAR 0 9
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: PUSH
40153: LD_INT 3
40155: PUSH
40156: LD_INT 21
40158: PUSH
40159: LD_INT 3
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: EMPTY
40167: LIST
40168: LIST
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PPUSH
40174: CALL_OW 69
40178: ST_TO_ADDR
// if not tmp then
40179: LD_VAR 0 8
40183: NOT
40184: IFFALSE 40188
// exit ;
40186: GO 40646
// if in_unit then
40188: LD_VAR 0 11
40192: IFFALSE 40216
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40194: LD_ADDR_VAR 0 10
40198: PUSH
40199: LD_VAR 0 8
40203: PPUSH
40204: LD_VAR 0 11
40208: PPUSH
40209: CALL_OW 74
40213: ST_TO_ADDR
40214: GO 40236
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40216: LD_ADDR_VAR 0 10
40220: PUSH
40221: LD_VAR 0 8
40225: PPUSH
40226: LD_VAR 0 1
40230: PPUSH
40231: CALL_OW 74
40235: ST_TO_ADDR
// if not enemy then
40236: LD_VAR 0 10
40240: NOT
40241: IFFALSE 40245
// exit ;
40243: GO 40646
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40245: LD_VAR 0 11
40249: PUSH
40250: LD_VAR 0 11
40254: PPUSH
40255: LD_VAR 0 10
40259: PPUSH
40260: CALL_OW 296
40264: PUSH
40265: LD_INT 13
40267: GREATER
40268: AND
40269: PUSH
40270: LD_VAR 0 1
40274: PPUSH
40275: LD_VAR 0 10
40279: PPUSH
40280: CALL_OW 296
40284: PUSH
40285: LD_INT 12
40287: GREATER
40288: OR
40289: IFFALSE 40293
// exit ;
40291: GO 40646
// missile := [ 1 ] ;
40293: LD_ADDR_VAR 0 14
40297: PUSH
40298: LD_INT 1
40300: PUSH
40301: EMPTY
40302: LIST
40303: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40304: LD_VAR 0 9
40308: PPUSH
40309: LD_VAR 0 12
40313: PPUSH
40314: CALL_OW 325
40318: IFFALSE 40347
// missile := Replace ( missile , missile + 1 , 2 ) ;
40320: LD_ADDR_VAR 0 14
40324: PUSH
40325: LD_VAR 0 14
40329: PPUSH
40330: LD_VAR 0 14
40334: PUSH
40335: LD_INT 1
40337: PLUS
40338: PPUSH
40339: LD_INT 2
40341: PPUSH
40342: CALL_OW 1
40346: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40347: LD_VAR 0 9
40351: PPUSH
40352: LD_VAR 0 13
40356: PPUSH
40357: CALL_OW 325
40361: PUSH
40362: LD_VAR 0 10
40366: PPUSH
40367: CALL_OW 255
40371: PPUSH
40372: LD_VAR 0 13
40376: PPUSH
40377: CALL_OW 325
40381: NOT
40382: AND
40383: IFFALSE 40412
// missile := Replace ( missile , missile + 1 , 3 ) ;
40385: LD_ADDR_VAR 0 14
40389: PUSH
40390: LD_VAR 0 14
40394: PPUSH
40395: LD_VAR 0 14
40399: PUSH
40400: LD_INT 1
40402: PLUS
40403: PPUSH
40404: LD_INT 3
40406: PPUSH
40407: CALL_OW 1
40411: ST_TO_ADDR
// if missile < 2 then
40412: LD_VAR 0 14
40416: PUSH
40417: LD_INT 2
40419: LESS
40420: IFFALSE 40424
// exit ;
40422: GO 40646
// x := GetX ( enemy ) ;
40424: LD_ADDR_VAR 0 4
40428: PUSH
40429: LD_VAR 0 10
40433: PPUSH
40434: CALL_OW 250
40438: ST_TO_ADDR
// y := GetY ( enemy ) ;
40439: LD_ADDR_VAR 0 5
40443: PUSH
40444: LD_VAR 0 10
40448: PPUSH
40449: CALL_OW 251
40453: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40454: LD_ADDR_VAR 0 6
40458: PUSH
40459: LD_VAR 0 4
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PPUSH
40468: LD_INT 1
40470: PPUSH
40471: CALL_OW 12
40475: PLUS
40476: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40477: LD_ADDR_VAR 0 7
40481: PUSH
40482: LD_VAR 0 5
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PPUSH
40491: LD_INT 1
40493: PPUSH
40494: CALL_OW 12
40498: PLUS
40499: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40500: LD_VAR 0 6
40504: PPUSH
40505: LD_VAR 0 7
40509: PPUSH
40510: CALL_OW 488
40514: NOT
40515: IFFALSE 40537
// begin _x := x ;
40517: LD_ADDR_VAR 0 6
40521: PUSH
40522: LD_VAR 0 4
40526: ST_TO_ADDR
// _y := y ;
40527: LD_ADDR_VAR 0 7
40531: PUSH
40532: LD_VAR 0 5
40536: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40537: LD_ADDR_VAR 0 3
40541: PUSH
40542: LD_INT 1
40544: PPUSH
40545: LD_VAR 0 14
40549: PPUSH
40550: CALL_OW 12
40554: ST_TO_ADDR
// case i of 1 :
40555: LD_VAR 0 3
40559: PUSH
40560: LD_INT 1
40562: DOUBLE
40563: EQUAL
40564: IFTRUE 40568
40566: GO 40585
40568: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40569: LD_VAR 0 1
40573: PPUSH
40574: LD_VAR 0 10
40578: PPUSH
40579: CALL_OW 115
40583: GO 40646
40585: LD_INT 2
40587: DOUBLE
40588: EQUAL
40589: IFTRUE 40593
40591: GO 40615
40593: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40594: LD_VAR 0 1
40598: PPUSH
40599: LD_VAR 0 6
40603: PPUSH
40604: LD_VAR 0 7
40608: PPUSH
40609: CALL_OW 153
40613: GO 40646
40615: LD_INT 3
40617: DOUBLE
40618: EQUAL
40619: IFTRUE 40623
40621: GO 40645
40623: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40624: LD_VAR 0 1
40628: PPUSH
40629: LD_VAR 0 6
40633: PPUSH
40634: LD_VAR 0 7
40638: PPUSH
40639: CALL_OW 154
40643: GO 40646
40645: POP
// end ;
40646: LD_VAR 0 2
40650: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40651: LD_INT 0
40653: PPUSH
40654: PPUSH
40655: PPUSH
40656: PPUSH
40657: PPUSH
40658: PPUSH
// if not unit or not building then
40659: LD_VAR 0 1
40663: NOT
40664: PUSH
40665: LD_VAR 0 2
40669: NOT
40670: OR
40671: IFFALSE 40675
// exit ;
40673: GO 40833
// x := GetX ( building ) ;
40675: LD_ADDR_VAR 0 5
40679: PUSH
40680: LD_VAR 0 2
40684: PPUSH
40685: CALL_OW 250
40689: ST_TO_ADDR
// y := GetY ( building ) ;
40690: LD_ADDR_VAR 0 6
40694: PUSH
40695: LD_VAR 0 2
40699: PPUSH
40700: CALL_OW 251
40704: ST_TO_ADDR
// for i = 0 to 5 do
40705: LD_ADDR_VAR 0 4
40709: PUSH
40710: DOUBLE
40711: LD_INT 0
40713: DEC
40714: ST_TO_ADDR
40715: LD_INT 5
40717: PUSH
40718: FOR_TO
40719: IFFALSE 40831
// begin _x := ShiftX ( x , i , 3 ) ;
40721: LD_ADDR_VAR 0 7
40725: PUSH
40726: LD_VAR 0 5
40730: PPUSH
40731: LD_VAR 0 4
40735: PPUSH
40736: LD_INT 3
40738: PPUSH
40739: CALL_OW 272
40743: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40744: LD_ADDR_VAR 0 8
40748: PUSH
40749: LD_VAR 0 6
40753: PPUSH
40754: LD_VAR 0 4
40758: PPUSH
40759: LD_INT 3
40761: PPUSH
40762: CALL_OW 273
40766: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40767: LD_VAR 0 7
40771: PPUSH
40772: LD_VAR 0 8
40776: PPUSH
40777: CALL_OW 488
40781: NOT
40782: IFFALSE 40786
// continue ;
40784: GO 40718
// if HexInfo ( _x , _y ) = 0 then
40786: LD_VAR 0 7
40790: PPUSH
40791: LD_VAR 0 8
40795: PPUSH
40796: CALL_OW 428
40800: PUSH
40801: LD_INT 0
40803: EQUAL
40804: IFFALSE 40829
// begin ComMoveXY ( unit , _x , _y ) ;
40806: LD_VAR 0 1
40810: PPUSH
40811: LD_VAR 0 7
40815: PPUSH
40816: LD_VAR 0 8
40820: PPUSH
40821: CALL_OW 111
// exit ;
40825: POP
40826: POP
40827: GO 40833
// end ; end ;
40829: GO 40718
40831: POP
40832: POP
// end ;
40833: LD_VAR 0 3
40837: RET
// export function ScanBase ( side , base_area ) ; begin
40838: LD_INT 0
40840: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40841: LD_ADDR_VAR 0 3
40845: PUSH
40846: LD_VAR 0 2
40850: PPUSH
40851: LD_INT 81
40853: PUSH
40854: LD_VAR 0 1
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PPUSH
40863: CALL_OW 70
40867: ST_TO_ADDR
// end ;
40868: LD_VAR 0 3
40872: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40873: LD_INT 0
40875: PPUSH
40876: PPUSH
40877: PPUSH
40878: PPUSH
// result := false ;
40879: LD_ADDR_VAR 0 2
40883: PUSH
40884: LD_INT 0
40886: ST_TO_ADDR
// side := GetSide ( unit ) ;
40887: LD_ADDR_VAR 0 3
40891: PUSH
40892: LD_VAR 0 1
40896: PPUSH
40897: CALL_OW 255
40901: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40902: LD_ADDR_VAR 0 4
40906: PUSH
40907: LD_VAR 0 1
40911: PPUSH
40912: CALL_OW 248
40916: ST_TO_ADDR
// case nat of 1 :
40917: LD_VAR 0 4
40921: PUSH
40922: LD_INT 1
40924: DOUBLE
40925: EQUAL
40926: IFTRUE 40930
40928: GO 40941
40930: POP
// tech := tech_lassight ; 2 :
40931: LD_ADDR_VAR 0 5
40935: PUSH
40936: LD_INT 12
40938: ST_TO_ADDR
40939: GO 40980
40941: LD_INT 2
40943: DOUBLE
40944: EQUAL
40945: IFTRUE 40949
40947: GO 40960
40949: POP
// tech := tech_mortar ; 3 :
40950: LD_ADDR_VAR 0 5
40954: PUSH
40955: LD_INT 41
40957: ST_TO_ADDR
40958: GO 40980
40960: LD_INT 3
40962: DOUBLE
40963: EQUAL
40964: IFTRUE 40968
40966: GO 40979
40968: POP
// tech := tech_bazooka ; end ;
40969: LD_ADDR_VAR 0 5
40973: PUSH
40974: LD_INT 44
40976: ST_TO_ADDR
40977: GO 40980
40979: POP
// if Researched ( side , tech ) then
40980: LD_VAR 0 3
40984: PPUSH
40985: LD_VAR 0 5
40989: PPUSH
40990: CALL_OW 325
40994: IFFALSE 41021
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40996: LD_ADDR_VAR 0 2
41000: PUSH
41001: LD_INT 5
41003: PUSH
41004: LD_INT 8
41006: PUSH
41007: LD_INT 9
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: LIST
41014: PUSH
41015: LD_VAR 0 4
41019: ARRAY
41020: ST_TO_ADDR
// end ;
41021: LD_VAR 0 2
41025: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
41026: LD_INT 0
41028: PPUSH
41029: PPUSH
41030: PPUSH
// if not mines then
41031: LD_VAR 0 2
41035: NOT
41036: IFFALSE 41040
// exit ;
41038: GO 41184
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41040: LD_ADDR_VAR 0 5
41044: PUSH
41045: LD_INT 81
41047: PUSH
41048: LD_VAR 0 1
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 3
41059: PUSH
41060: LD_INT 21
41062: PUSH
41063: LD_INT 3
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PPUSH
41078: CALL_OW 69
41082: ST_TO_ADDR
// for i in mines do
41083: LD_ADDR_VAR 0 4
41087: PUSH
41088: LD_VAR 0 2
41092: PUSH
41093: FOR_IN
41094: IFFALSE 41182
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
41096: LD_VAR 0 4
41100: PUSH
41101: LD_INT 1
41103: ARRAY
41104: PPUSH
41105: LD_VAR 0 4
41109: PUSH
41110: LD_INT 2
41112: ARRAY
41113: PPUSH
41114: CALL_OW 458
41118: NOT
41119: IFFALSE 41123
// continue ;
41121: GO 41093
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41123: LD_VAR 0 4
41127: PUSH
41128: LD_INT 1
41130: ARRAY
41131: PPUSH
41132: LD_VAR 0 4
41136: PUSH
41137: LD_INT 2
41139: ARRAY
41140: PPUSH
41141: CALL_OW 428
41145: PUSH
41146: LD_VAR 0 5
41150: IN
41151: IFFALSE 41180
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41153: LD_VAR 0 4
41157: PUSH
41158: LD_INT 1
41160: ARRAY
41161: PPUSH
41162: LD_VAR 0 4
41166: PUSH
41167: LD_INT 2
41169: ARRAY
41170: PPUSH
41171: LD_VAR 0 1
41175: PPUSH
41176: CALL_OW 456
// end ;
41180: GO 41093
41182: POP
41183: POP
// end ;
41184: LD_VAR 0 3
41188: RET
// export function Count ( array ) ; var i ; begin
41189: LD_INT 0
41191: PPUSH
41192: PPUSH
// result := 0 ;
41193: LD_ADDR_VAR 0 2
41197: PUSH
41198: LD_INT 0
41200: ST_TO_ADDR
// for i in array do
41201: LD_ADDR_VAR 0 3
41205: PUSH
41206: LD_VAR 0 1
41210: PUSH
41211: FOR_IN
41212: IFFALSE 41236
// if i then
41214: LD_VAR 0 3
41218: IFFALSE 41234
// result := result + 1 ;
41220: LD_ADDR_VAR 0 2
41224: PUSH
41225: LD_VAR 0 2
41229: PUSH
41230: LD_INT 1
41232: PLUS
41233: ST_TO_ADDR
41234: GO 41211
41236: POP
41237: POP
// end ;
41238: LD_VAR 0 2
41242: RET
// export function IsEmpty ( building ) ; begin
41243: LD_INT 0
41245: PPUSH
// if not building then
41246: LD_VAR 0 1
41250: NOT
41251: IFFALSE 41255
// exit ;
41253: GO 41298
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41255: LD_ADDR_VAR 0 2
41259: PUSH
41260: LD_VAR 0 1
41264: PUSH
41265: LD_INT 22
41267: PUSH
41268: LD_VAR 0 1
41272: PPUSH
41273: CALL_OW 255
41277: PUSH
41278: EMPTY
41279: LIST
41280: LIST
41281: PUSH
41282: LD_INT 58
41284: PUSH
41285: EMPTY
41286: LIST
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PPUSH
41292: CALL_OW 69
41296: IN
41297: ST_TO_ADDR
// end ;
41298: LD_VAR 0 2
41302: RET
// export function IsNotFull ( building ) ; var places ; begin
41303: LD_INT 0
41305: PPUSH
41306: PPUSH
// if not building then
41307: LD_VAR 0 1
41311: NOT
41312: IFFALSE 41316
// exit ;
41314: GO 41487
// result := false ;
41316: LD_ADDR_VAR 0 2
41320: PUSH
41321: LD_INT 0
41323: ST_TO_ADDR
// places := 0 ;
41324: LD_ADDR_VAR 0 3
41328: PUSH
41329: LD_INT 0
41331: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41332: LD_VAR 0 1
41336: PPUSH
41337: CALL_OW 266
41341: PUSH
41342: LD_INT 0
41344: DOUBLE
41345: EQUAL
41346: IFTRUE 41404
41348: LD_INT 1
41350: DOUBLE
41351: EQUAL
41352: IFTRUE 41404
41354: LD_INT 6
41356: DOUBLE
41357: EQUAL
41358: IFTRUE 41404
41360: LD_INT 7
41362: DOUBLE
41363: EQUAL
41364: IFTRUE 41404
41366: LD_INT 8
41368: DOUBLE
41369: EQUAL
41370: IFTRUE 41404
41372: LD_INT 4
41374: DOUBLE
41375: EQUAL
41376: IFTRUE 41404
41378: LD_INT 5
41380: DOUBLE
41381: EQUAL
41382: IFTRUE 41404
41384: LD_INT 2
41386: DOUBLE
41387: EQUAL
41388: IFTRUE 41404
41390: LD_INT 3
41392: DOUBLE
41393: EQUAL
41394: IFTRUE 41404
41396: LD_INT 35
41398: DOUBLE
41399: EQUAL
41400: IFTRUE 41404
41402: GO 41415
41404: POP
// places := 6 ; b_bunker , b_breastwork :
41405: LD_ADDR_VAR 0 3
41409: PUSH
41410: LD_INT 6
41412: ST_TO_ADDR
41413: GO 41460
41415: LD_INT 32
41417: DOUBLE
41418: EQUAL
41419: IFTRUE 41429
41421: LD_INT 31
41423: DOUBLE
41424: EQUAL
41425: IFTRUE 41429
41427: GO 41440
41429: POP
// places := 1 ; b_control_tower :
41430: LD_ADDR_VAR 0 3
41434: PUSH
41435: LD_INT 1
41437: ST_TO_ADDR
41438: GO 41460
41440: LD_INT 36
41442: DOUBLE
41443: EQUAL
41444: IFTRUE 41448
41446: GO 41459
41448: POP
// places := 3 ; end ;
41449: LD_ADDR_VAR 0 3
41453: PUSH
41454: LD_INT 3
41456: ST_TO_ADDR
41457: GO 41460
41459: POP
// if places then
41460: LD_VAR 0 3
41464: IFFALSE 41487
// result := UnitsInside ( building ) < places ;
41466: LD_ADDR_VAR 0 2
41470: PUSH
41471: LD_VAR 0 1
41475: PPUSH
41476: CALL_OW 313
41480: PUSH
41481: LD_VAR 0 3
41485: LESS
41486: ST_TO_ADDR
// end ;
41487: LD_VAR 0 2
41491: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41492: LD_INT 0
41494: PPUSH
41495: PPUSH
41496: PPUSH
41497: PPUSH
// tmp := [ ] ;
41498: LD_ADDR_VAR 0 3
41502: PUSH
41503: EMPTY
41504: ST_TO_ADDR
// list := [ ] ;
41505: LD_ADDR_VAR 0 5
41509: PUSH
41510: EMPTY
41511: ST_TO_ADDR
// for i = 16 to 25 do
41512: LD_ADDR_VAR 0 4
41516: PUSH
41517: DOUBLE
41518: LD_INT 16
41520: DEC
41521: ST_TO_ADDR
41522: LD_INT 25
41524: PUSH
41525: FOR_TO
41526: IFFALSE 41599
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41528: LD_ADDR_VAR 0 3
41532: PUSH
41533: LD_VAR 0 3
41537: PUSH
41538: LD_INT 22
41540: PUSH
41541: LD_VAR 0 1
41545: PPUSH
41546: CALL_OW 255
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 91
41557: PUSH
41558: LD_VAR 0 1
41562: PUSH
41563: LD_INT 6
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 30
41573: PUSH
41574: LD_VAR 0 4
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: EMPTY
41584: LIST
41585: LIST
41586: LIST
41587: PUSH
41588: EMPTY
41589: LIST
41590: PPUSH
41591: CALL_OW 69
41595: ADD
41596: ST_TO_ADDR
41597: GO 41525
41599: POP
41600: POP
// for i = 1 to tmp do
41601: LD_ADDR_VAR 0 4
41605: PUSH
41606: DOUBLE
41607: LD_INT 1
41609: DEC
41610: ST_TO_ADDR
41611: LD_VAR 0 3
41615: PUSH
41616: FOR_TO
41617: IFFALSE 41705
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41619: LD_ADDR_VAR 0 5
41623: PUSH
41624: LD_VAR 0 5
41628: PUSH
41629: LD_VAR 0 3
41633: PUSH
41634: LD_VAR 0 4
41638: ARRAY
41639: PPUSH
41640: CALL_OW 266
41644: PUSH
41645: LD_VAR 0 3
41649: PUSH
41650: LD_VAR 0 4
41654: ARRAY
41655: PPUSH
41656: CALL_OW 250
41660: PUSH
41661: LD_VAR 0 3
41665: PUSH
41666: LD_VAR 0 4
41670: ARRAY
41671: PPUSH
41672: CALL_OW 251
41676: PUSH
41677: LD_VAR 0 3
41681: PUSH
41682: LD_VAR 0 4
41686: ARRAY
41687: PPUSH
41688: CALL_OW 254
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: LIST
41697: LIST
41698: PUSH
41699: EMPTY
41700: LIST
41701: ADD
41702: ST_TO_ADDR
41703: GO 41616
41705: POP
41706: POP
// result := list ;
41707: LD_ADDR_VAR 0 2
41711: PUSH
41712: LD_VAR 0 5
41716: ST_TO_ADDR
// end ;
41717: LD_VAR 0 2
41721: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41722: LD_INT 0
41724: PPUSH
41725: PPUSH
41726: PPUSH
41727: PPUSH
41728: PPUSH
41729: PPUSH
41730: PPUSH
// if not factory then
41731: LD_VAR 0 1
41735: NOT
41736: IFFALSE 41740
// exit ;
41738: GO 42333
// if control = control_apeman then
41740: LD_VAR 0 4
41744: PUSH
41745: LD_INT 5
41747: EQUAL
41748: IFFALSE 41857
// begin tmp := UnitsInside ( factory ) ;
41750: LD_ADDR_VAR 0 8
41754: PUSH
41755: LD_VAR 0 1
41759: PPUSH
41760: CALL_OW 313
41764: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41765: LD_VAR 0 8
41769: PPUSH
41770: LD_INT 25
41772: PUSH
41773: LD_INT 12
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PPUSH
41780: CALL_OW 72
41784: NOT
41785: IFFALSE 41795
// control := control_manual ;
41787: LD_ADDR_VAR 0 4
41791: PUSH
41792: LD_INT 1
41794: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41795: LD_ADDR_VAR 0 8
41799: PUSH
41800: LD_VAR 0 1
41804: PPUSH
41805: CALL 41492 0 1
41809: ST_TO_ADDR
// if tmp then
41810: LD_VAR 0 8
41814: IFFALSE 41857
// begin for i in tmp do
41816: LD_ADDR_VAR 0 7
41820: PUSH
41821: LD_VAR 0 8
41825: PUSH
41826: FOR_IN
41827: IFFALSE 41855
// if i [ 1 ] = b_ext_radio then
41829: LD_VAR 0 7
41833: PUSH
41834: LD_INT 1
41836: ARRAY
41837: PUSH
41838: LD_INT 22
41840: EQUAL
41841: IFFALSE 41853
// begin control := control_remote ;
41843: LD_ADDR_VAR 0 4
41847: PUSH
41848: LD_INT 2
41850: ST_TO_ADDR
// break ;
41851: GO 41855
// end ;
41853: GO 41826
41855: POP
41856: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41857: LD_VAR 0 1
41861: PPUSH
41862: LD_VAR 0 2
41866: PPUSH
41867: LD_VAR 0 3
41871: PPUSH
41872: LD_VAR 0 4
41876: PPUSH
41877: LD_VAR 0 5
41881: PPUSH
41882: CALL_OW 448
41886: IFFALSE 41921
// begin result := [ chassis , engine , control , weapon ] ;
41888: LD_ADDR_VAR 0 6
41892: PUSH
41893: LD_VAR 0 2
41897: PUSH
41898: LD_VAR 0 3
41902: PUSH
41903: LD_VAR 0 4
41907: PUSH
41908: LD_VAR 0 5
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: ST_TO_ADDR
// exit ;
41919: GO 42333
// end ; _chassis := AvailableChassisList ( factory ) ;
41921: LD_ADDR_VAR 0 9
41925: PUSH
41926: LD_VAR 0 1
41930: PPUSH
41931: CALL_OW 475
41935: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41936: LD_ADDR_VAR 0 11
41940: PUSH
41941: LD_VAR 0 1
41945: PPUSH
41946: CALL_OW 476
41950: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41951: LD_ADDR_VAR 0 12
41955: PUSH
41956: LD_VAR 0 1
41960: PPUSH
41961: CALL_OW 477
41965: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41966: LD_ADDR_VAR 0 10
41970: PUSH
41971: LD_VAR 0 1
41975: PPUSH
41976: CALL_OW 478
41980: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41981: LD_VAR 0 9
41985: NOT
41986: PUSH
41987: LD_VAR 0 11
41991: NOT
41992: OR
41993: PUSH
41994: LD_VAR 0 12
41998: NOT
41999: OR
42000: PUSH
42001: LD_VAR 0 10
42005: NOT
42006: OR
42007: IFFALSE 42042
// begin result := [ chassis , engine , control , weapon ] ;
42009: LD_ADDR_VAR 0 6
42013: PUSH
42014: LD_VAR 0 2
42018: PUSH
42019: LD_VAR 0 3
42023: PUSH
42024: LD_VAR 0 4
42028: PUSH
42029: LD_VAR 0 5
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: ST_TO_ADDR
// exit ;
42040: GO 42333
// end ; if not chassis in _chassis then
42042: LD_VAR 0 2
42046: PUSH
42047: LD_VAR 0 9
42051: IN
42052: NOT
42053: IFFALSE 42079
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
42055: LD_ADDR_VAR 0 2
42059: PUSH
42060: LD_VAR 0 9
42064: PUSH
42065: LD_INT 1
42067: PPUSH
42068: LD_VAR 0 9
42072: PPUSH
42073: CALL_OW 12
42077: ARRAY
42078: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
42079: LD_VAR 0 2
42083: PPUSH
42084: LD_VAR 0 3
42088: PPUSH
42089: CALL 42338 0 2
42093: NOT
42094: IFFALSE 42153
// repeat engine := _engine [ 1 ] ;
42096: LD_ADDR_VAR 0 3
42100: PUSH
42101: LD_VAR 0 11
42105: PUSH
42106: LD_INT 1
42108: ARRAY
42109: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42110: LD_ADDR_VAR 0 11
42114: PUSH
42115: LD_VAR 0 11
42119: PPUSH
42120: LD_INT 1
42122: PPUSH
42123: CALL_OW 3
42127: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42128: LD_VAR 0 2
42132: PPUSH
42133: LD_VAR 0 3
42137: PPUSH
42138: CALL 42338 0 2
42142: PUSH
42143: LD_VAR 0 11
42147: PUSH
42148: EMPTY
42149: EQUAL
42150: OR
42151: IFFALSE 42096
// if not control in _control then
42153: LD_VAR 0 4
42157: PUSH
42158: LD_VAR 0 12
42162: IN
42163: NOT
42164: IFFALSE 42190
// control := _control [ rand ( 1 , _control ) ] ;
42166: LD_ADDR_VAR 0 4
42170: PUSH
42171: LD_VAR 0 12
42175: PUSH
42176: LD_INT 1
42178: PPUSH
42179: LD_VAR 0 12
42183: PPUSH
42184: CALL_OW 12
42188: ARRAY
42189: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42190: LD_VAR 0 2
42194: PPUSH
42195: LD_VAR 0 5
42199: PPUSH
42200: CALL 42558 0 2
42204: NOT
42205: IFFALSE 42264
// repeat weapon := _weapon [ 1 ] ;
42207: LD_ADDR_VAR 0 5
42211: PUSH
42212: LD_VAR 0 10
42216: PUSH
42217: LD_INT 1
42219: ARRAY
42220: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42221: LD_ADDR_VAR 0 10
42225: PUSH
42226: LD_VAR 0 10
42230: PPUSH
42231: LD_INT 1
42233: PPUSH
42234: CALL_OW 3
42238: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42239: LD_VAR 0 2
42243: PPUSH
42244: LD_VAR 0 5
42248: PPUSH
42249: CALL 42558 0 2
42253: PUSH
42254: LD_VAR 0 10
42258: PUSH
42259: EMPTY
42260: EQUAL
42261: OR
42262: IFFALSE 42207
// result := [ ] ;
42264: LD_ADDR_VAR 0 6
42268: PUSH
42269: EMPTY
42270: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42271: LD_VAR 0 1
42275: PPUSH
42276: LD_VAR 0 2
42280: PPUSH
42281: LD_VAR 0 3
42285: PPUSH
42286: LD_VAR 0 4
42290: PPUSH
42291: LD_VAR 0 5
42295: PPUSH
42296: CALL_OW 448
42300: IFFALSE 42333
// result := [ chassis , engine , control , weapon ] ;
42302: LD_ADDR_VAR 0 6
42306: PUSH
42307: LD_VAR 0 2
42311: PUSH
42312: LD_VAR 0 3
42316: PUSH
42317: LD_VAR 0 4
42321: PUSH
42322: LD_VAR 0 5
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: LIST
42331: LIST
42332: ST_TO_ADDR
// end ;
42333: LD_VAR 0 6
42337: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42338: LD_INT 0
42340: PPUSH
// if not chassis or not engine then
42341: LD_VAR 0 1
42345: NOT
42346: PUSH
42347: LD_VAR 0 2
42351: NOT
42352: OR
42353: IFFALSE 42357
// exit ;
42355: GO 42553
// case engine of engine_solar :
42357: LD_VAR 0 2
42361: PUSH
42362: LD_INT 2
42364: DOUBLE
42365: EQUAL
42366: IFTRUE 42370
42368: GO 42408
42370: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42371: LD_ADDR_VAR 0 3
42375: PUSH
42376: LD_INT 11
42378: PUSH
42379: LD_INT 12
42381: PUSH
42382: LD_INT 13
42384: PUSH
42385: LD_INT 14
42387: PUSH
42388: LD_INT 1
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: LD_INT 3
42396: PUSH
42397: EMPTY
42398: LIST
42399: LIST
42400: LIST
42401: LIST
42402: LIST
42403: LIST
42404: LIST
42405: ST_TO_ADDR
42406: GO 42537
42408: LD_INT 1
42410: DOUBLE
42411: EQUAL
42412: IFTRUE 42416
42414: GO 42478
42416: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42417: LD_ADDR_VAR 0 3
42421: PUSH
42422: LD_INT 11
42424: PUSH
42425: LD_INT 12
42427: PUSH
42428: LD_INT 13
42430: PUSH
42431: LD_INT 14
42433: PUSH
42434: LD_INT 1
42436: PUSH
42437: LD_INT 2
42439: PUSH
42440: LD_INT 3
42442: PUSH
42443: LD_INT 4
42445: PUSH
42446: LD_INT 5
42448: PUSH
42449: LD_INT 21
42451: PUSH
42452: LD_INT 23
42454: PUSH
42455: LD_INT 22
42457: PUSH
42458: LD_INT 24
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: ST_TO_ADDR
42476: GO 42537
42478: LD_INT 3
42480: DOUBLE
42481: EQUAL
42482: IFTRUE 42486
42484: GO 42536
42486: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42487: LD_ADDR_VAR 0 3
42491: PUSH
42492: LD_INT 13
42494: PUSH
42495: LD_INT 14
42497: PUSH
42498: LD_INT 2
42500: PUSH
42501: LD_INT 3
42503: PUSH
42504: LD_INT 4
42506: PUSH
42507: LD_INT 5
42509: PUSH
42510: LD_INT 21
42512: PUSH
42513: LD_INT 22
42515: PUSH
42516: LD_INT 23
42518: PUSH
42519: LD_INT 24
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: ST_TO_ADDR
42534: GO 42537
42536: POP
// result := ( chassis in result ) ;
42537: LD_ADDR_VAR 0 3
42541: PUSH
42542: LD_VAR 0 1
42546: PUSH
42547: LD_VAR 0 3
42551: IN
42552: ST_TO_ADDR
// end ;
42553: LD_VAR 0 3
42557: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42558: LD_INT 0
42560: PPUSH
// if not chassis or not weapon then
42561: LD_VAR 0 1
42565: NOT
42566: PUSH
42567: LD_VAR 0 2
42571: NOT
42572: OR
42573: IFFALSE 42577
// exit ;
42575: GO 43637
// case weapon of us_machine_gun :
42577: LD_VAR 0 2
42581: PUSH
42582: LD_INT 2
42584: DOUBLE
42585: EQUAL
42586: IFTRUE 42590
42588: GO 42620
42590: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42591: LD_ADDR_VAR 0 3
42595: PUSH
42596: LD_INT 1
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: LD_INT 3
42604: PUSH
42605: LD_INT 4
42607: PUSH
42608: LD_INT 5
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: ST_TO_ADDR
42618: GO 43621
42620: LD_INT 3
42622: DOUBLE
42623: EQUAL
42624: IFTRUE 42628
42626: GO 42658
42628: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42629: LD_ADDR_VAR 0 3
42633: PUSH
42634: LD_INT 1
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: LD_INT 3
42642: PUSH
42643: LD_INT 4
42645: PUSH
42646: LD_INT 5
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: ST_TO_ADDR
42656: GO 43621
42658: LD_INT 11
42660: DOUBLE
42661: EQUAL
42662: IFTRUE 42666
42664: GO 42696
42666: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42667: LD_ADDR_VAR 0 3
42671: PUSH
42672: LD_INT 1
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: LD_INT 3
42680: PUSH
42681: LD_INT 4
42683: PUSH
42684: LD_INT 5
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: ST_TO_ADDR
42694: GO 43621
42696: LD_INT 4
42698: DOUBLE
42699: EQUAL
42700: IFTRUE 42704
42702: GO 42730
42704: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42705: LD_ADDR_VAR 0 3
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: LD_INT 3
42715: PUSH
42716: LD_INT 4
42718: PUSH
42719: LD_INT 5
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: LIST
42726: LIST
42727: ST_TO_ADDR
42728: GO 43621
42730: LD_INT 5
42732: DOUBLE
42733: EQUAL
42734: IFTRUE 42738
42736: GO 42764
42738: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42739: LD_ADDR_VAR 0 3
42743: PUSH
42744: LD_INT 2
42746: PUSH
42747: LD_INT 3
42749: PUSH
42750: LD_INT 4
42752: PUSH
42753: LD_INT 5
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: ST_TO_ADDR
42762: GO 43621
42764: LD_INT 9
42766: DOUBLE
42767: EQUAL
42768: IFTRUE 42772
42770: GO 42798
42772: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42773: LD_ADDR_VAR 0 3
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: LD_INT 3
42783: PUSH
42784: LD_INT 4
42786: PUSH
42787: LD_INT 5
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: ST_TO_ADDR
42796: GO 43621
42798: LD_INT 7
42800: DOUBLE
42801: EQUAL
42802: IFTRUE 42806
42804: GO 42832
42806: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42807: LD_ADDR_VAR 0 3
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: LD_INT 3
42817: PUSH
42818: LD_INT 4
42820: PUSH
42821: LD_INT 5
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: ST_TO_ADDR
42830: GO 43621
42832: LD_INT 12
42834: DOUBLE
42835: EQUAL
42836: IFTRUE 42840
42838: GO 42866
42840: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42841: LD_ADDR_VAR 0 3
42845: PUSH
42846: LD_INT 2
42848: PUSH
42849: LD_INT 3
42851: PUSH
42852: LD_INT 4
42854: PUSH
42855: LD_INT 5
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: ST_TO_ADDR
42864: GO 43621
42866: LD_INT 13
42868: DOUBLE
42869: EQUAL
42870: IFTRUE 42874
42872: GO 42900
42874: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42875: LD_ADDR_VAR 0 3
42879: PUSH
42880: LD_INT 2
42882: PUSH
42883: LD_INT 3
42885: PUSH
42886: LD_INT 4
42888: PUSH
42889: LD_INT 5
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: LIST
42896: LIST
42897: ST_TO_ADDR
42898: GO 43621
42900: LD_INT 14
42902: DOUBLE
42903: EQUAL
42904: IFTRUE 42908
42906: GO 42926
42908: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42909: LD_ADDR_VAR 0 3
42913: PUSH
42914: LD_INT 4
42916: PUSH
42917: LD_INT 5
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: ST_TO_ADDR
42924: GO 43621
42926: LD_INT 6
42928: DOUBLE
42929: EQUAL
42930: IFTRUE 42934
42932: GO 42952
42934: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42935: LD_ADDR_VAR 0 3
42939: PUSH
42940: LD_INT 4
42942: PUSH
42943: LD_INT 5
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: ST_TO_ADDR
42950: GO 43621
42952: LD_INT 10
42954: DOUBLE
42955: EQUAL
42956: IFTRUE 42960
42958: GO 42978
42960: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42961: LD_ADDR_VAR 0 3
42965: PUSH
42966: LD_INT 4
42968: PUSH
42969: LD_INT 5
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: ST_TO_ADDR
42976: GO 43621
42978: LD_INT 22
42980: DOUBLE
42981: EQUAL
42982: IFTRUE 42986
42984: GO 43012
42986: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42987: LD_ADDR_VAR 0 3
42991: PUSH
42992: LD_INT 11
42994: PUSH
42995: LD_INT 12
42997: PUSH
42998: LD_INT 13
43000: PUSH
43001: LD_INT 14
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: LIST
43008: LIST
43009: ST_TO_ADDR
43010: GO 43621
43012: LD_INT 23
43014: DOUBLE
43015: EQUAL
43016: IFTRUE 43020
43018: GO 43046
43020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
43021: LD_ADDR_VAR 0 3
43025: PUSH
43026: LD_INT 11
43028: PUSH
43029: LD_INT 12
43031: PUSH
43032: LD_INT 13
43034: PUSH
43035: LD_INT 14
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: ST_TO_ADDR
43044: GO 43621
43046: LD_INT 24
43048: DOUBLE
43049: EQUAL
43050: IFTRUE 43054
43052: GO 43080
43054: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
43055: LD_ADDR_VAR 0 3
43059: PUSH
43060: LD_INT 11
43062: PUSH
43063: LD_INT 12
43065: PUSH
43066: LD_INT 13
43068: PUSH
43069: LD_INT 14
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: ST_TO_ADDR
43078: GO 43621
43080: LD_INT 30
43082: DOUBLE
43083: EQUAL
43084: IFTRUE 43088
43086: GO 43114
43088: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
43089: LD_ADDR_VAR 0 3
43093: PUSH
43094: LD_INT 11
43096: PUSH
43097: LD_INT 12
43099: PUSH
43100: LD_INT 13
43102: PUSH
43103: LD_INT 14
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: ST_TO_ADDR
43112: GO 43621
43114: LD_INT 25
43116: DOUBLE
43117: EQUAL
43118: IFTRUE 43122
43120: GO 43140
43122: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43123: LD_ADDR_VAR 0 3
43127: PUSH
43128: LD_INT 13
43130: PUSH
43131: LD_INT 14
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: ST_TO_ADDR
43138: GO 43621
43140: LD_INT 27
43142: DOUBLE
43143: EQUAL
43144: IFTRUE 43148
43146: GO 43166
43148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43149: LD_ADDR_VAR 0 3
43153: PUSH
43154: LD_INT 13
43156: PUSH
43157: LD_INT 14
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: ST_TO_ADDR
43164: GO 43621
43166: LD_INT 92
43168: DOUBLE
43169: EQUAL
43170: IFTRUE 43174
43172: GO 43200
43174: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43175: LD_ADDR_VAR 0 3
43179: PUSH
43180: LD_INT 11
43182: PUSH
43183: LD_INT 12
43185: PUSH
43186: LD_INT 13
43188: PUSH
43189: LD_INT 14
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: ST_TO_ADDR
43198: GO 43621
43200: LD_INT 28
43202: DOUBLE
43203: EQUAL
43204: IFTRUE 43208
43206: GO 43226
43208: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43209: LD_ADDR_VAR 0 3
43213: PUSH
43214: LD_INT 13
43216: PUSH
43217: LD_INT 14
43219: PUSH
43220: EMPTY
43221: LIST
43222: LIST
43223: ST_TO_ADDR
43224: GO 43621
43226: LD_INT 29
43228: DOUBLE
43229: EQUAL
43230: IFTRUE 43234
43232: GO 43252
43234: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43235: LD_ADDR_VAR 0 3
43239: PUSH
43240: LD_INT 13
43242: PUSH
43243: LD_INT 14
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: ST_TO_ADDR
43250: GO 43621
43252: LD_INT 31
43254: DOUBLE
43255: EQUAL
43256: IFTRUE 43260
43258: GO 43278
43260: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43261: LD_ADDR_VAR 0 3
43265: PUSH
43266: LD_INT 13
43268: PUSH
43269: LD_INT 14
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: ST_TO_ADDR
43276: GO 43621
43278: LD_INT 26
43280: DOUBLE
43281: EQUAL
43282: IFTRUE 43286
43284: GO 43304
43286: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43287: LD_ADDR_VAR 0 3
43291: PUSH
43292: LD_INT 13
43294: PUSH
43295: LD_INT 14
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: ST_TO_ADDR
43302: GO 43621
43304: LD_INT 42
43306: DOUBLE
43307: EQUAL
43308: IFTRUE 43312
43310: GO 43338
43312: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43313: LD_ADDR_VAR 0 3
43317: PUSH
43318: LD_INT 21
43320: PUSH
43321: LD_INT 22
43323: PUSH
43324: LD_INT 23
43326: PUSH
43327: LD_INT 24
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: ST_TO_ADDR
43336: GO 43621
43338: LD_INT 43
43340: DOUBLE
43341: EQUAL
43342: IFTRUE 43346
43344: GO 43372
43346: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43347: LD_ADDR_VAR 0 3
43351: PUSH
43352: LD_INT 21
43354: PUSH
43355: LD_INT 22
43357: PUSH
43358: LD_INT 23
43360: PUSH
43361: LD_INT 24
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: ST_TO_ADDR
43370: GO 43621
43372: LD_INT 44
43374: DOUBLE
43375: EQUAL
43376: IFTRUE 43380
43378: GO 43406
43380: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43381: LD_ADDR_VAR 0 3
43385: PUSH
43386: LD_INT 21
43388: PUSH
43389: LD_INT 22
43391: PUSH
43392: LD_INT 23
43394: PUSH
43395: LD_INT 24
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: ST_TO_ADDR
43404: GO 43621
43406: LD_INT 45
43408: DOUBLE
43409: EQUAL
43410: IFTRUE 43414
43412: GO 43440
43414: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43415: LD_ADDR_VAR 0 3
43419: PUSH
43420: LD_INT 21
43422: PUSH
43423: LD_INT 22
43425: PUSH
43426: LD_INT 23
43428: PUSH
43429: LD_INT 24
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: LIST
43436: LIST
43437: ST_TO_ADDR
43438: GO 43621
43440: LD_INT 49
43442: DOUBLE
43443: EQUAL
43444: IFTRUE 43448
43446: GO 43474
43448: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43449: LD_ADDR_VAR 0 3
43453: PUSH
43454: LD_INT 21
43456: PUSH
43457: LD_INT 22
43459: PUSH
43460: LD_INT 23
43462: PUSH
43463: LD_INT 24
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: ST_TO_ADDR
43472: GO 43621
43474: LD_INT 51
43476: DOUBLE
43477: EQUAL
43478: IFTRUE 43482
43480: GO 43508
43482: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43483: LD_ADDR_VAR 0 3
43487: PUSH
43488: LD_INT 21
43490: PUSH
43491: LD_INT 22
43493: PUSH
43494: LD_INT 23
43496: PUSH
43497: LD_INT 24
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: ST_TO_ADDR
43506: GO 43621
43508: LD_INT 52
43510: DOUBLE
43511: EQUAL
43512: IFTRUE 43516
43514: GO 43542
43516: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43517: LD_ADDR_VAR 0 3
43521: PUSH
43522: LD_INT 21
43524: PUSH
43525: LD_INT 22
43527: PUSH
43528: LD_INT 23
43530: PUSH
43531: LD_INT 24
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: ST_TO_ADDR
43540: GO 43621
43542: LD_INT 53
43544: DOUBLE
43545: EQUAL
43546: IFTRUE 43550
43548: GO 43568
43550: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43551: LD_ADDR_VAR 0 3
43555: PUSH
43556: LD_INT 23
43558: PUSH
43559: LD_INT 24
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: ST_TO_ADDR
43566: GO 43621
43568: LD_INT 46
43570: DOUBLE
43571: EQUAL
43572: IFTRUE 43576
43574: GO 43594
43576: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43577: LD_ADDR_VAR 0 3
43581: PUSH
43582: LD_INT 23
43584: PUSH
43585: LD_INT 24
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: ST_TO_ADDR
43592: GO 43621
43594: LD_INT 47
43596: DOUBLE
43597: EQUAL
43598: IFTRUE 43602
43600: GO 43620
43602: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43603: LD_ADDR_VAR 0 3
43607: PUSH
43608: LD_INT 23
43610: PUSH
43611: LD_INT 24
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: ST_TO_ADDR
43618: GO 43621
43620: POP
// result := ( chassis in result ) ;
43621: LD_ADDR_VAR 0 3
43625: PUSH
43626: LD_VAR 0 1
43630: PUSH
43631: LD_VAR 0 3
43635: IN
43636: ST_TO_ADDR
// end ;
43637: LD_VAR 0 3
43641: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43642: LD_INT 0
43644: PPUSH
43645: PPUSH
43646: PPUSH
43647: PPUSH
43648: PPUSH
43649: PPUSH
43650: PPUSH
// result := array ;
43651: LD_ADDR_VAR 0 5
43655: PUSH
43656: LD_VAR 0 1
43660: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43661: LD_VAR 0 1
43665: NOT
43666: PUSH
43667: LD_VAR 0 2
43671: NOT
43672: OR
43673: PUSH
43674: LD_VAR 0 3
43678: NOT
43679: OR
43680: PUSH
43681: LD_VAR 0 2
43685: PUSH
43686: LD_VAR 0 1
43690: GREATER
43691: OR
43692: PUSH
43693: LD_VAR 0 3
43697: PUSH
43698: LD_VAR 0 1
43702: GREATER
43703: OR
43704: IFFALSE 43708
// exit ;
43706: GO 44004
// if direction then
43708: LD_VAR 0 4
43712: IFFALSE 43776
// begin d := 1 ;
43714: LD_ADDR_VAR 0 9
43718: PUSH
43719: LD_INT 1
43721: ST_TO_ADDR
// if i_from > i_to then
43722: LD_VAR 0 2
43726: PUSH
43727: LD_VAR 0 3
43731: GREATER
43732: IFFALSE 43758
// length := ( array - i_from ) + i_to else
43734: LD_ADDR_VAR 0 11
43738: PUSH
43739: LD_VAR 0 1
43743: PUSH
43744: LD_VAR 0 2
43748: MINUS
43749: PUSH
43750: LD_VAR 0 3
43754: PLUS
43755: ST_TO_ADDR
43756: GO 43774
// length := i_to - i_from ;
43758: LD_ADDR_VAR 0 11
43762: PUSH
43763: LD_VAR 0 3
43767: PUSH
43768: LD_VAR 0 2
43772: MINUS
43773: ST_TO_ADDR
// end else
43774: GO 43837
// begin d := - 1 ;
43776: LD_ADDR_VAR 0 9
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: ST_TO_ADDR
// if i_from > i_to then
43785: LD_VAR 0 2
43789: PUSH
43790: LD_VAR 0 3
43794: GREATER
43795: IFFALSE 43815
// length := i_from - i_to else
43797: LD_ADDR_VAR 0 11
43801: PUSH
43802: LD_VAR 0 2
43806: PUSH
43807: LD_VAR 0 3
43811: MINUS
43812: ST_TO_ADDR
43813: GO 43837
// length := ( array - i_to ) + i_from ;
43815: LD_ADDR_VAR 0 11
43819: PUSH
43820: LD_VAR 0 1
43824: PUSH
43825: LD_VAR 0 3
43829: MINUS
43830: PUSH
43831: LD_VAR 0 2
43835: PLUS
43836: ST_TO_ADDR
// end ; if not length then
43837: LD_VAR 0 11
43841: NOT
43842: IFFALSE 43846
// exit ;
43844: GO 44004
// tmp := array ;
43846: LD_ADDR_VAR 0 10
43850: PUSH
43851: LD_VAR 0 1
43855: ST_TO_ADDR
// for i = 1 to length do
43856: LD_ADDR_VAR 0 6
43860: PUSH
43861: DOUBLE
43862: LD_INT 1
43864: DEC
43865: ST_TO_ADDR
43866: LD_VAR 0 11
43870: PUSH
43871: FOR_TO
43872: IFFALSE 43992
// begin for j = 1 to array do
43874: LD_ADDR_VAR 0 7
43878: PUSH
43879: DOUBLE
43880: LD_INT 1
43882: DEC
43883: ST_TO_ADDR
43884: LD_VAR 0 1
43888: PUSH
43889: FOR_TO
43890: IFFALSE 43978
// begin k := j + d ;
43892: LD_ADDR_VAR 0 8
43896: PUSH
43897: LD_VAR 0 7
43901: PUSH
43902: LD_VAR 0 9
43906: PLUS
43907: ST_TO_ADDR
// if k > array then
43908: LD_VAR 0 8
43912: PUSH
43913: LD_VAR 0 1
43917: GREATER
43918: IFFALSE 43928
// k := 1 ;
43920: LD_ADDR_VAR 0 8
43924: PUSH
43925: LD_INT 1
43927: ST_TO_ADDR
// if not k then
43928: LD_VAR 0 8
43932: NOT
43933: IFFALSE 43945
// k := array ;
43935: LD_ADDR_VAR 0 8
43939: PUSH
43940: LD_VAR 0 1
43944: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43945: LD_ADDR_VAR 0 10
43949: PUSH
43950: LD_VAR 0 10
43954: PPUSH
43955: LD_VAR 0 8
43959: PPUSH
43960: LD_VAR 0 1
43964: PUSH
43965: LD_VAR 0 7
43969: ARRAY
43970: PPUSH
43971: CALL_OW 1
43975: ST_TO_ADDR
// end ;
43976: GO 43889
43978: POP
43979: POP
// array := tmp ;
43980: LD_ADDR_VAR 0 1
43984: PUSH
43985: LD_VAR 0 10
43989: ST_TO_ADDR
// end ;
43990: GO 43871
43992: POP
43993: POP
// result := array ;
43994: LD_ADDR_VAR 0 5
43998: PUSH
43999: LD_VAR 0 1
44003: ST_TO_ADDR
// end ;
44004: LD_VAR 0 5
44008: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
44009: LD_INT 0
44011: PPUSH
44012: PPUSH
// result := 0 ;
44013: LD_ADDR_VAR 0 3
44017: PUSH
44018: LD_INT 0
44020: ST_TO_ADDR
// if not array or not value in array then
44021: LD_VAR 0 1
44025: NOT
44026: PUSH
44027: LD_VAR 0 2
44031: PUSH
44032: LD_VAR 0 1
44036: IN
44037: NOT
44038: OR
44039: IFFALSE 44043
// exit ;
44041: GO 44097
// for i = 1 to array do
44043: LD_ADDR_VAR 0 4
44047: PUSH
44048: DOUBLE
44049: LD_INT 1
44051: DEC
44052: ST_TO_ADDR
44053: LD_VAR 0 1
44057: PUSH
44058: FOR_TO
44059: IFFALSE 44095
// if value = array [ i ] then
44061: LD_VAR 0 2
44065: PUSH
44066: LD_VAR 0 1
44070: PUSH
44071: LD_VAR 0 4
44075: ARRAY
44076: EQUAL
44077: IFFALSE 44093
// begin result := i ;
44079: LD_ADDR_VAR 0 3
44083: PUSH
44084: LD_VAR 0 4
44088: ST_TO_ADDR
// exit ;
44089: POP
44090: POP
44091: GO 44097
// end ;
44093: GO 44058
44095: POP
44096: POP
// end ;
44097: LD_VAR 0 3
44101: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44102: LD_INT 0
44104: PPUSH
// vc_chassis := chassis ;
44105: LD_ADDR_OWVAR 37
44109: PUSH
44110: LD_VAR 0 1
44114: ST_TO_ADDR
// vc_engine := engine ;
44115: LD_ADDR_OWVAR 39
44119: PUSH
44120: LD_VAR 0 2
44124: ST_TO_ADDR
// vc_control := control ;
44125: LD_ADDR_OWVAR 38
44129: PUSH
44130: LD_VAR 0 3
44134: ST_TO_ADDR
// vc_weapon := weapon ;
44135: LD_ADDR_OWVAR 40
44139: PUSH
44140: LD_VAR 0 4
44144: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44145: LD_ADDR_OWVAR 41
44149: PUSH
44150: LD_VAR 0 5
44154: ST_TO_ADDR
// end ;
44155: LD_VAR 0 6
44159: RET
// export function WantPlant ( unit ) ; var task ; begin
44160: LD_INT 0
44162: PPUSH
44163: PPUSH
// result := false ;
44164: LD_ADDR_VAR 0 2
44168: PUSH
44169: LD_INT 0
44171: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44172: LD_ADDR_VAR 0 3
44176: PUSH
44177: LD_VAR 0 1
44181: PPUSH
44182: CALL_OW 437
44186: ST_TO_ADDR
// if task then
44187: LD_VAR 0 3
44191: IFFALSE 44219
// if task [ 1 ] [ 1 ] = p then
44193: LD_VAR 0 3
44197: PUSH
44198: LD_INT 1
44200: ARRAY
44201: PUSH
44202: LD_INT 1
44204: ARRAY
44205: PUSH
44206: LD_STRING p
44208: EQUAL
44209: IFFALSE 44219
// result := true ;
44211: LD_ADDR_VAR 0 2
44215: PUSH
44216: LD_INT 1
44218: ST_TO_ADDR
// end ;
44219: LD_VAR 0 2
44223: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44224: LD_INT 0
44226: PPUSH
44227: PPUSH
44228: PPUSH
44229: PPUSH
// if pos < 1 then
44230: LD_VAR 0 2
44234: PUSH
44235: LD_INT 1
44237: LESS
44238: IFFALSE 44242
// exit ;
44240: GO 44545
// if pos = 1 then
44242: LD_VAR 0 2
44246: PUSH
44247: LD_INT 1
44249: EQUAL
44250: IFFALSE 44283
// result := Replace ( arr , pos [ 1 ] , value ) else
44252: LD_ADDR_VAR 0 4
44256: PUSH
44257: LD_VAR 0 1
44261: PPUSH
44262: LD_VAR 0 2
44266: PUSH
44267: LD_INT 1
44269: ARRAY
44270: PPUSH
44271: LD_VAR 0 3
44275: PPUSH
44276: CALL_OW 1
44280: ST_TO_ADDR
44281: GO 44545
// begin tmp := arr ;
44283: LD_ADDR_VAR 0 6
44287: PUSH
44288: LD_VAR 0 1
44292: ST_TO_ADDR
// s_arr := [ tmp ] ;
44293: LD_ADDR_VAR 0 7
44297: PUSH
44298: LD_VAR 0 6
44302: PUSH
44303: EMPTY
44304: LIST
44305: ST_TO_ADDR
// for i = 1 to pos - 1 do
44306: LD_ADDR_VAR 0 5
44310: PUSH
44311: DOUBLE
44312: LD_INT 1
44314: DEC
44315: ST_TO_ADDR
44316: LD_VAR 0 2
44320: PUSH
44321: LD_INT 1
44323: MINUS
44324: PUSH
44325: FOR_TO
44326: IFFALSE 44371
// begin tmp := tmp [ pos [ i ] ] ;
44328: LD_ADDR_VAR 0 6
44332: PUSH
44333: LD_VAR 0 6
44337: PUSH
44338: LD_VAR 0 2
44342: PUSH
44343: LD_VAR 0 5
44347: ARRAY
44348: ARRAY
44349: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44350: LD_ADDR_VAR 0 7
44354: PUSH
44355: LD_VAR 0 7
44359: PUSH
44360: LD_VAR 0 6
44364: PUSH
44365: EMPTY
44366: LIST
44367: ADD
44368: ST_TO_ADDR
// end ;
44369: GO 44325
44371: POP
44372: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44373: LD_ADDR_VAR 0 6
44377: PUSH
44378: LD_VAR 0 6
44382: PPUSH
44383: LD_VAR 0 2
44387: PUSH
44388: LD_VAR 0 2
44392: ARRAY
44393: PPUSH
44394: LD_VAR 0 3
44398: PPUSH
44399: CALL_OW 1
44403: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44404: LD_ADDR_VAR 0 7
44408: PUSH
44409: LD_VAR 0 7
44413: PPUSH
44414: LD_VAR 0 7
44418: PPUSH
44419: LD_VAR 0 6
44423: PPUSH
44424: CALL_OW 1
44428: ST_TO_ADDR
// for i = s_arr downto 2 do
44429: LD_ADDR_VAR 0 5
44433: PUSH
44434: DOUBLE
44435: LD_VAR 0 7
44439: INC
44440: ST_TO_ADDR
44441: LD_INT 2
44443: PUSH
44444: FOR_DOWNTO
44445: IFFALSE 44529
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44447: LD_ADDR_VAR 0 6
44451: PUSH
44452: LD_VAR 0 7
44456: PUSH
44457: LD_VAR 0 5
44461: PUSH
44462: LD_INT 1
44464: MINUS
44465: ARRAY
44466: PPUSH
44467: LD_VAR 0 2
44471: PUSH
44472: LD_VAR 0 5
44476: PUSH
44477: LD_INT 1
44479: MINUS
44480: ARRAY
44481: PPUSH
44482: LD_VAR 0 7
44486: PUSH
44487: LD_VAR 0 5
44491: ARRAY
44492: PPUSH
44493: CALL_OW 1
44497: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44498: LD_ADDR_VAR 0 7
44502: PUSH
44503: LD_VAR 0 7
44507: PPUSH
44508: LD_VAR 0 5
44512: PUSH
44513: LD_INT 1
44515: MINUS
44516: PPUSH
44517: LD_VAR 0 6
44521: PPUSH
44522: CALL_OW 1
44526: ST_TO_ADDR
// end ;
44527: GO 44444
44529: POP
44530: POP
// result := s_arr [ 1 ] ;
44531: LD_ADDR_VAR 0 4
44535: PUSH
44536: LD_VAR 0 7
44540: PUSH
44541: LD_INT 1
44543: ARRAY
44544: ST_TO_ADDR
// end ; end ;
44545: LD_VAR 0 4
44549: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44550: LD_INT 0
44552: PPUSH
44553: PPUSH
// if not list then
44554: LD_VAR 0 1
44558: NOT
44559: IFFALSE 44563
// exit ;
44561: GO 44654
// i := list [ pos1 ] ;
44563: LD_ADDR_VAR 0 5
44567: PUSH
44568: LD_VAR 0 1
44572: PUSH
44573: LD_VAR 0 2
44577: ARRAY
44578: ST_TO_ADDR
// if not i then
44579: LD_VAR 0 5
44583: NOT
44584: IFFALSE 44588
// exit ;
44586: GO 44654
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44588: LD_ADDR_VAR 0 1
44592: PUSH
44593: LD_VAR 0 1
44597: PPUSH
44598: LD_VAR 0 2
44602: PPUSH
44603: LD_VAR 0 1
44607: PUSH
44608: LD_VAR 0 3
44612: ARRAY
44613: PPUSH
44614: CALL_OW 1
44618: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44619: LD_ADDR_VAR 0 1
44623: PUSH
44624: LD_VAR 0 1
44628: PPUSH
44629: LD_VAR 0 3
44633: PPUSH
44634: LD_VAR 0 5
44638: PPUSH
44639: CALL_OW 1
44643: ST_TO_ADDR
// result := list ;
44644: LD_ADDR_VAR 0 4
44648: PUSH
44649: LD_VAR 0 1
44653: ST_TO_ADDR
// end ;
44654: LD_VAR 0 4
44658: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44659: LD_INT 0
44661: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44662: LD_ADDR_VAR 0 5
44666: PUSH
44667: LD_VAR 0 1
44671: PPUSH
44672: CALL_OW 250
44676: PPUSH
44677: LD_VAR 0 1
44681: PPUSH
44682: CALL_OW 251
44686: PPUSH
44687: LD_VAR 0 2
44691: PPUSH
44692: LD_VAR 0 3
44696: PPUSH
44697: LD_VAR 0 4
44701: PPUSH
44702: CALL 44712 0 5
44706: ST_TO_ADDR
// end ;
44707: LD_VAR 0 5
44711: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44712: LD_INT 0
44714: PPUSH
44715: PPUSH
44716: PPUSH
44717: PPUSH
// if not list then
44718: LD_VAR 0 3
44722: NOT
44723: IFFALSE 44727
// exit ;
44725: GO 45115
// result := [ ] ;
44727: LD_ADDR_VAR 0 6
44731: PUSH
44732: EMPTY
44733: ST_TO_ADDR
// for i in list do
44734: LD_ADDR_VAR 0 7
44738: PUSH
44739: LD_VAR 0 3
44743: PUSH
44744: FOR_IN
44745: IFFALSE 44947
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44747: LD_ADDR_VAR 0 9
44751: PUSH
44752: LD_VAR 0 7
44756: PPUSH
44757: LD_VAR 0 1
44761: PPUSH
44762: LD_VAR 0 2
44766: PPUSH
44767: CALL_OW 297
44771: ST_TO_ADDR
// if not result then
44772: LD_VAR 0 6
44776: NOT
44777: IFFALSE 44803
// result := [ [ i , tmp ] ] else
44779: LD_ADDR_VAR 0 6
44783: PUSH
44784: LD_VAR 0 7
44788: PUSH
44789: LD_VAR 0 9
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: EMPTY
44799: LIST
44800: ST_TO_ADDR
44801: GO 44945
// begin if result [ result ] [ 2 ] < tmp then
44803: LD_VAR 0 6
44807: PUSH
44808: LD_VAR 0 6
44812: ARRAY
44813: PUSH
44814: LD_INT 2
44816: ARRAY
44817: PUSH
44818: LD_VAR 0 9
44822: LESS
44823: IFFALSE 44865
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44825: LD_ADDR_VAR 0 6
44829: PUSH
44830: LD_VAR 0 6
44834: PPUSH
44835: LD_VAR 0 6
44839: PUSH
44840: LD_INT 1
44842: PLUS
44843: PPUSH
44844: LD_VAR 0 7
44848: PUSH
44849: LD_VAR 0 9
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PPUSH
44858: CALL_OW 2
44862: ST_TO_ADDR
44863: GO 44945
// for j = 1 to result do
44865: LD_ADDR_VAR 0 8
44869: PUSH
44870: DOUBLE
44871: LD_INT 1
44873: DEC
44874: ST_TO_ADDR
44875: LD_VAR 0 6
44879: PUSH
44880: FOR_TO
44881: IFFALSE 44943
// begin if tmp < result [ j ] [ 2 ] then
44883: LD_VAR 0 9
44887: PUSH
44888: LD_VAR 0 6
44892: PUSH
44893: LD_VAR 0 8
44897: ARRAY
44898: PUSH
44899: LD_INT 2
44901: ARRAY
44902: LESS
44903: IFFALSE 44941
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44905: LD_ADDR_VAR 0 6
44909: PUSH
44910: LD_VAR 0 6
44914: PPUSH
44915: LD_VAR 0 8
44919: PPUSH
44920: LD_VAR 0 7
44924: PUSH
44925: LD_VAR 0 9
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PPUSH
44934: CALL_OW 2
44938: ST_TO_ADDR
// break ;
44939: GO 44943
// end ; end ;
44941: GO 44880
44943: POP
44944: POP
// end ; end ;
44945: GO 44744
44947: POP
44948: POP
// if result and not asc then
44949: LD_VAR 0 6
44953: PUSH
44954: LD_VAR 0 4
44958: NOT
44959: AND
44960: IFFALSE 45035
// begin tmp := result ;
44962: LD_ADDR_VAR 0 9
44966: PUSH
44967: LD_VAR 0 6
44971: ST_TO_ADDR
// for i = tmp downto 1 do
44972: LD_ADDR_VAR 0 7
44976: PUSH
44977: DOUBLE
44978: LD_VAR 0 9
44982: INC
44983: ST_TO_ADDR
44984: LD_INT 1
44986: PUSH
44987: FOR_DOWNTO
44988: IFFALSE 45033
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44990: LD_ADDR_VAR 0 6
44994: PUSH
44995: LD_VAR 0 6
44999: PPUSH
45000: LD_VAR 0 9
45004: PUSH
45005: LD_VAR 0 7
45009: MINUS
45010: PUSH
45011: LD_INT 1
45013: PLUS
45014: PPUSH
45015: LD_VAR 0 9
45019: PUSH
45020: LD_VAR 0 7
45024: ARRAY
45025: PPUSH
45026: CALL_OW 1
45030: ST_TO_ADDR
45031: GO 44987
45033: POP
45034: POP
// end ; tmp := [ ] ;
45035: LD_ADDR_VAR 0 9
45039: PUSH
45040: EMPTY
45041: ST_TO_ADDR
// if mode then
45042: LD_VAR 0 5
45046: IFFALSE 45115
// begin for i = 1 to result do
45048: LD_ADDR_VAR 0 7
45052: PUSH
45053: DOUBLE
45054: LD_INT 1
45056: DEC
45057: ST_TO_ADDR
45058: LD_VAR 0 6
45062: PUSH
45063: FOR_TO
45064: IFFALSE 45103
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
45066: LD_ADDR_VAR 0 9
45070: PUSH
45071: LD_VAR 0 9
45075: PPUSH
45076: LD_VAR 0 7
45080: PPUSH
45081: LD_VAR 0 6
45085: PUSH
45086: LD_VAR 0 7
45090: ARRAY
45091: PUSH
45092: LD_INT 1
45094: ARRAY
45095: PPUSH
45096: CALL_OW 1
45100: ST_TO_ADDR
45101: GO 45063
45103: POP
45104: POP
// result := tmp ;
45105: LD_ADDR_VAR 0 6
45109: PUSH
45110: LD_VAR 0 9
45114: ST_TO_ADDR
// end ; end ;
45115: LD_VAR 0 6
45119: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45120: LD_INT 0
45122: PPUSH
45123: PPUSH
45124: PPUSH
45125: PPUSH
45126: PPUSH
45127: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45128: LD_ADDR_VAR 0 5
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 0
45138: PUSH
45139: LD_INT 0
45141: PUSH
45142: EMPTY
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: ST_TO_ADDR
// if not x or not y then
45150: LD_VAR 0 2
45154: NOT
45155: PUSH
45156: LD_VAR 0 3
45160: NOT
45161: OR
45162: IFFALSE 45166
// exit ;
45164: GO 46816
// if not range then
45166: LD_VAR 0 4
45170: NOT
45171: IFFALSE 45181
// range := 10 ;
45173: LD_ADDR_VAR 0 4
45177: PUSH
45178: LD_INT 10
45180: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45181: LD_ADDR_VAR 0 8
45185: PUSH
45186: LD_INT 81
45188: PUSH
45189: LD_VAR 0 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 92
45200: PUSH
45201: LD_VAR 0 2
45205: PUSH
45206: LD_VAR 0 3
45210: PUSH
45211: LD_VAR 0 4
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 3
45224: PUSH
45225: LD_INT 21
45227: PUSH
45228: LD_INT 3
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: PPUSH
45244: CALL_OW 69
45248: ST_TO_ADDR
// if not tmp then
45249: LD_VAR 0 8
45253: NOT
45254: IFFALSE 45258
// exit ;
45256: GO 46816
// for i in tmp do
45258: LD_ADDR_VAR 0 6
45262: PUSH
45263: LD_VAR 0 8
45267: PUSH
45268: FOR_IN
45269: IFFALSE 46791
// begin points := [ 0 , 0 , 0 ] ;
45271: LD_ADDR_VAR 0 9
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 0
45281: PUSH
45282: LD_INT 0
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: LIST
45289: ST_TO_ADDR
// bpoints := 1 ;
45290: LD_ADDR_VAR 0 10
45294: PUSH
45295: LD_INT 1
45297: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45298: LD_VAR 0 6
45302: PPUSH
45303: CALL_OW 247
45307: PUSH
45308: LD_INT 1
45310: DOUBLE
45311: EQUAL
45312: IFTRUE 45316
45314: GO 45894
45316: POP
// begin if GetClass ( i ) = 1 then
45317: LD_VAR 0 6
45321: PPUSH
45322: CALL_OW 257
45326: PUSH
45327: LD_INT 1
45329: EQUAL
45330: IFFALSE 45351
// points := [ 10 , 5 , 3 ] ;
45332: LD_ADDR_VAR 0 9
45336: PUSH
45337: LD_INT 10
45339: PUSH
45340: LD_INT 5
45342: PUSH
45343: LD_INT 3
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: LIST
45350: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45351: LD_VAR 0 6
45355: PPUSH
45356: CALL_OW 257
45360: PUSH
45361: LD_INT 2
45363: PUSH
45364: LD_INT 3
45366: PUSH
45367: LD_INT 4
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: LIST
45374: IN
45375: IFFALSE 45396
// points := [ 3 , 2 , 1 ] ;
45377: LD_ADDR_VAR 0 9
45381: PUSH
45382: LD_INT 3
45384: PUSH
45385: LD_INT 2
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: LIST
45395: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45396: LD_VAR 0 6
45400: PPUSH
45401: CALL_OW 257
45405: PUSH
45406: LD_INT 5
45408: EQUAL
45409: IFFALSE 45430
// points := [ 130 , 5 , 2 ] ;
45411: LD_ADDR_VAR 0 9
45415: PUSH
45416: LD_INT 130
45418: PUSH
45419: LD_INT 5
45421: PUSH
45422: LD_INT 2
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45430: LD_VAR 0 6
45434: PPUSH
45435: CALL_OW 257
45439: PUSH
45440: LD_INT 8
45442: EQUAL
45443: IFFALSE 45464
// points := [ 35 , 35 , 30 ] ;
45445: LD_ADDR_VAR 0 9
45449: PUSH
45450: LD_INT 35
45452: PUSH
45453: LD_INT 35
45455: PUSH
45456: LD_INT 30
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: LIST
45463: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45464: LD_VAR 0 6
45468: PPUSH
45469: CALL_OW 257
45473: PUSH
45474: LD_INT 9
45476: EQUAL
45477: IFFALSE 45498
// points := [ 20 , 55 , 40 ] ;
45479: LD_ADDR_VAR 0 9
45483: PUSH
45484: LD_INT 20
45486: PUSH
45487: LD_INT 55
45489: PUSH
45490: LD_INT 40
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: LIST
45497: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45498: LD_VAR 0 6
45502: PPUSH
45503: CALL_OW 257
45507: PUSH
45508: LD_INT 12
45510: PUSH
45511: LD_INT 16
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: IN
45518: IFFALSE 45539
// points := [ 5 , 3 , 2 ] ;
45520: LD_ADDR_VAR 0 9
45524: PUSH
45525: LD_INT 5
45527: PUSH
45528: LD_INT 3
45530: PUSH
45531: LD_INT 2
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: LIST
45538: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45539: LD_VAR 0 6
45543: PPUSH
45544: CALL_OW 257
45548: PUSH
45549: LD_INT 17
45551: EQUAL
45552: IFFALSE 45573
// points := [ 100 , 50 , 75 ] ;
45554: LD_ADDR_VAR 0 9
45558: PUSH
45559: LD_INT 100
45561: PUSH
45562: LD_INT 50
45564: PUSH
45565: LD_INT 75
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: LIST
45572: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45573: LD_VAR 0 6
45577: PPUSH
45578: CALL_OW 257
45582: PUSH
45583: LD_INT 15
45585: EQUAL
45586: IFFALSE 45607
// points := [ 10 , 5 , 3 ] ;
45588: LD_ADDR_VAR 0 9
45592: PUSH
45593: LD_INT 10
45595: PUSH
45596: LD_INT 5
45598: PUSH
45599: LD_INT 3
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45607: LD_VAR 0 6
45611: PPUSH
45612: CALL_OW 257
45616: PUSH
45617: LD_INT 14
45619: EQUAL
45620: IFFALSE 45641
// points := [ 10 , 0 , 0 ] ;
45622: LD_ADDR_VAR 0 9
45626: PUSH
45627: LD_INT 10
45629: PUSH
45630: LD_INT 0
45632: PUSH
45633: LD_INT 0
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: LIST
45640: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45641: LD_VAR 0 6
45645: PPUSH
45646: CALL_OW 257
45650: PUSH
45651: LD_INT 11
45653: EQUAL
45654: IFFALSE 45675
// points := [ 30 , 10 , 5 ] ;
45656: LD_ADDR_VAR 0 9
45660: PUSH
45661: LD_INT 30
45663: PUSH
45664: LD_INT 10
45666: PUSH
45667: LD_INT 5
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: LIST
45674: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45675: LD_VAR 0 1
45679: PPUSH
45680: LD_INT 5
45682: PPUSH
45683: CALL_OW 321
45687: PUSH
45688: LD_INT 2
45690: EQUAL
45691: IFFALSE 45708
// bpoints := bpoints * 1.8 ;
45693: LD_ADDR_VAR 0 10
45697: PUSH
45698: LD_VAR 0 10
45702: PUSH
45703: LD_REAL  1.80000000000000E+0000
45706: MUL
45707: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45708: LD_VAR 0 6
45712: PPUSH
45713: CALL_OW 257
45717: PUSH
45718: LD_INT 1
45720: PUSH
45721: LD_INT 2
45723: PUSH
45724: LD_INT 3
45726: PUSH
45727: LD_INT 4
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: IN
45736: PUSH
45737: LD_VAR 0 1
45741: PPUSH
45742: LD_INT 51
45744: PPUSH
45745: CALL_OW 321
45749: PUSH
45750: LD_INT 2
45752: EQUAL
45753: AND
45754: IFFALSE 45771
// bpoints := bpoints * 1.2 ;
45756: LD_ADDR_VAR 0 10
45760: PUSH
45761: LD_VAR 0 10
45765: PUSH
45766: LD_REAL  1.20000000000000E+0000
45769: MUL
45770: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45771: LD_VAR 0 6
45775: PPUSH
45776: CALL_OW 257
45780: PUSH
45781: LD_INT 5
45783: PUSH
45784: LD_INT 7
45786: PUSH
45787: LD_INT 9
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: LIST
45794: IN
45795: PUSH
45796: LD_VAR 0 1
45800: PPUSH
45801: LD_INT 52
45803: PPUSH
45804: CALL_OW 321
45808: PUSH
45809: LD_INT 2
45811: EQUAL
45812: AND
45813: IFFALSE 45830
// bpoints := bpoints * 1.5 ;
45815: LD_ADDR_VAR 0 10
45819: PUSH
45820: LD_VAR 0 10
45824: PUSH
45825: LD_REAL  1.50000000000000E+0000
45828: MUL
45829: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45830: LD_VAR 0 1
45834: PPUSH
45835: LD_INT 66
45837: PPUSH
45838: CALL_OW 321
45842: PUSH
45843: LD_INT 2
45845: EQUAL
45846: IFFALSE 45863
// bpoints := bpoints * 1.1 ;
45848: LD_ADDR_VAR 0 10
45852: PUSH
45853: LD_VAR 0 10
45857: PUSH
45858: LD_REAL  1.10000000000000E+0000
45861: MUL
45862: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45863: LD_ADDR_VAR 0 10
45867: PUSH
45868: LD_VAR 0 10
45872: PUSH
45873: LD_VAR 0 6
45877: PPUSH
45878: LD_INT 1
45880: PPUSH
45881: CALL_OW 259
45885: PUSH
45886: LD_REAL  1.15000000000000E+0000
45889: MUL
45890: MUL
45891: ST_TO_ADDR
// end ; unit_vehicle :
45892: GO 46720
45894: LD_INT 2
45896: DOUBLE
45897: EQUAL
45898: IFTRUE 45902
45900: GO 46708
45902: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45903: LD_VAR 0 6
45907: PPUSH
45908: CALL_OW 264
45912: PUSH
45913: LD_INT 2
45915: PUSH
45916: LD_INT 42
45918: PUSH
45919: LD_INT 24
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: LIST
45926: IN
45927: IFFALSE 45948
// points := [ 25 , 5 , 3 ] ;
45929: LD_ADDR_VAR 0 9
45933: PUSH
45934: LD_INT 25
45936: PUSH
45937: LD_INT 5
45939: PUSH
45940: LD_INT 3
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: LIST
45947: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45948: LD_VAR 0 6
45952: PPUSH
45953: CALL_OW 264
45957: PUSH
45958: LD_INT 4
45960: PUSH
45961: LD_INT 43
45963: PUSH
45964: LD_INT 25
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: LIST
45971: IN
45972: IFFALSE 45993
// points := [ 40 , 15 , 5 ] ;
45974: LD_ADDR_VAR 0 9
45978: PUSH
45979: LD_INT 40
45981: PUSH
45982: LD_INT 15
45984: PUSH
45985: LD_INT 5
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: LIST
45992: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45993: LD_VAR 0 6
45997: PPUSH
45998: CALL_OW 264
46002: PUSH
46003: LD_INT 3
46005: PUSH
46006: LD_INT 23
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: IN
46013: IFFALSE 46034
// points := [ 7 , 25 , 8 ] ;
46015: LD_ADDR_VAR 0 9
46019: PUSH
46020: LD_INT 7
46022: PUSH
46023: LD_INT 25
46025: PUSH
46026: LD_INT 8
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: LIST
46033: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
46034: LD_VAR 0 6
46038: PPUSH
46039: CALL_OW 264
46043: PUSH
46044: LD_INT 5
46046: PUSH
46047: LD_INT 27
46049: PUSH
46050: LD_INT 44
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: IN
46058: IFFALSE 46079
// points := [ 14 , 50 , 16 ] ;
46060: LD_ADDR_VAR 0 9
46064: PUSH
46065: LD_INT 14
46067: PUSH
46068: LD_INT 50
46070: PUSH
46071: LD_INT 16
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: LIST
46078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
46079: LD_VAR 0 6
46083: PPUSH
46084: CALL_OW 264
46088: PUSH
46089: LD_INT 6
46091: PUSH
46092: LD_INT 46
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: IN
46099: IFFALSE 46120
// points := [ 32 , 120 , 70 ] ;
46101: LD_ADDR_VAR 0 9
46105: PUSH
46106: LD_INT 32
46108: PUSH
46109: LD_INT 120
46111: PUSH
46112: LD_INT 70
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: LIST
46119: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46120: LD_VAR 0 6
46124: PPUSH
46125: CALL_OW 264
46129: PUSH
46130: LD_INT 7
46132: PUSH
46133: LD_INT 28
46135: PUSH
46136: LD_INT 45
46138: PUSH
46139: LD_INT 92
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: IN
46148: IFFALSE 46169
// points := [ 35 , 20 , 45 ] ;
46150: LD_ADDR_VAR 0 9
46154: PUSH
46155: LD_INT 35
46157: PUSH
46158: LD_INT 20
46160: PUSH
46161: LD_INT 45
46163: PUSH
46164: EMPTY
46165: LIST
46166: LIST
46167: LIST
46168: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46169: LD_VAR 0 6
46173: PPUSH
46174: CALL_OW 264
46178: PUSH
46179: LD_INT 47
46181: PUSH
46182: EMPTY
46183: LIST
46184: IN
46185: IFFALSE 46206
// points := [ 67 , 45 , 75 ] ;
46187: LD_ADDR_VAR 0 9
46191: PUSH
46192: LD_INT 67
46194: PUSH
46195: LD_INT 45
46197: PUSH
46198: LD_INT 75
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: LIST
46205: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46206: LD_VAR 0 6
46210: PPUSH
46211: CALL_OW 264
46215: PUSH
46216: LD_INT 26
46218: PUSH
46219: EMPTY
46220: LIST
46221: IN
46222: IFFALSE 46243
// points := [ 120 , 30 , 80 ] ;
46224: LD_ADDR_VAR 0 9
46228: PUSH
46229: LD_INT 120
46231: PUSH
46232: LD_INT 30
46234: PUSH
46235: LD_INT 80
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: LIST
46242: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46243: LD_VAR 0 6
46247: PPUSH
46248: CALL_OW 264
46252: PUSH
46253: LD_INT 22
46255: PUSH
46256: EMPTY
46257: LIST
46258: IN
46259: IFFALSE 46280
// points := [ 40 , 1 , 1 ] ;
46261: LD_ADDR_VAR 0 9
46265: PUSH
46266: LD_INT 40
46268: PUSH
46269: LD_INT 1
46271: PUSH
46272: LD_INT 1
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: LIST
46279: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46280: LD_VAR 0 6
46284: PPUSH
46285: CALL_OW 264
46289: PUSH
46290: LD_INT 29
46292: PUSH
46293: EMPTY
46294: LIST
46295: IN
46296: IFFALSE 46317
// points := [ 70 , 200 , 400 ] ;
46298: LD_ADDR_VAR 0 9
46302: PUSH
46303: LD_INT 70
46305: PUSH
46306: LD_INT 200
46308: PUSH
46309: LD_INT 400
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46317: LD_VAR 0 6
46321: PPUSH
46322: CALL_OW 264
46326: PUSH
46327: LD_INT 14
46329: PUSH
46330: LD_INT 53
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: IN
46337: IFFALSE 46358
// points := [ 40 , 10 , 20 ] ;
46339: LD_ADDR_VAR 0 9
46343: PUSH
46344: LD_INT 40
46346: PUSH
46347: LD_INT 10
46349: PUSH
46350: LD_INT 20
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: LIST
46357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46358: LD_VAR 0 6
46362: PPUSH
46363: CALL_OW 264
46367: PUSH
46368: LD_INT 9
46370: PUSH
46371: EMPTY
46372: LIST
46373: IN
46374: IFFALSE 46395
// points := [ 5 , 70 , 20 ] ;
46376: LD_ADDR_VAR 0 9
46380: PUSH
46381: LD_INT 5
46383: PUSH
46384: LD_INT 70
46386: PUSH
46387: LD_INT 20
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: LIST
46394: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46395: LD_VAR 0 6
46399: PPUSH
46400: CALL_OW 264
46404: PUSH
46405: LD_INT 10
46407: PUSH
46408: EMPTY
46409: LIST
46410: IN
46411: IFFALSE 46432
// points := [ 35 , 110 , 70 ] ;
46413: LD_ADDR_VAR 0 9
46417: PUSH
46418: LD_INT 35
46420: PUSH
46421: LD_INT 110
46423: PUSH
46424: LD_INT 70
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46432: LD_VAR 0 6
46436: PPUSH
46437: CALL_OW 265
46441: PUSH
46442: LD_INT 25
46444: EQUAL
46445: IFFALSE 46466
// points := [ 80 , 65 , 100 ] ;
46447: LD_ADDR_VAR 0 9
46451: PUSH
46452: LD_INT 80
46454: PUSH
46455: LD_INT 65
46457: PUSH
46458: LD_INT 100
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: LIST
46465: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46466: LD_VAR 0 6
46470: PPUSH
46471: CALL_OW 263
46475: PUSH
46476: LD_INT 1
46478: EQUAL
46479: IFFALSE 46514
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46481: LD_ADDR_VAR 0 10
46485: PUSH
46486: LD_VAR 0 10
46490: PUSH
46491: LD_VAR 0 6
46495: PPUSH
46496: CALL_OW 311
46500: PPUSH
46501: LD_INT 3
46503: PPUSH
46504: CALL_OW 259
46508: PUSH
46509: LD_INT 4
46511: MUL
46512: MUL
46513: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46514: LD_VAR 0 6
46518: PPUSH
46519: CALL_OW 263
46523: PUSH
46524: LD_INT 2
46526: EQUAL
46527: IFFALSE 46578
// begin j := IsControledBy ( i ) ;
46529: LD_ADDR_VAR 0 7
46533: PUSH
46534: LD_VAR 0 6
46538: PPUSH
46539: CALL_OW 312
46543: ST_TO_ADDR
// if j then
46544: LD_VAR 0 7
46548: IFFALSE 46578
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46550: LD_ADDR_VAR 0 10
46554: PUSH
46555: LD_VAR 0 10
46559: PUSH
46560: LD_VAR 0 7
46564: PPUSH
46565: LD_INT 3
46567: PPUSH
46568: CALL_OW 259
46572: PUSH
46573: LD_INT 3
46575: MUL
46576: MUL
46577: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46578: LD_VAR 0 6
46582: PPUSH
46583: CALL_OW 264
46587: PUSH
46588: LD_INT 5
46590: PUSH
46591: LD_INT 6
46593: PUSH
46594: LD_INT 46
46596: PUSH
46597: LD_INT 44
46599: PUSH
46600: LD_INT 47
46602: PUSH
46603: LD_INT 45
46605: PUSH
46606: LD_INT 28
46608: PUSH
46609: LD_INT 7
46611: PUSH
46612: LD_INT 27
46614: PUSH
46615: LD_INT 29
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: LIST
46624: LIST
46625: LIST
46626: LIST
46627: LIST
46628: LIST
46629: IN
46630: PUSH
46631: LD_VAR 0 1
46635: PPUSH
46636: LD_INT 52
46638: PPUSH
46639: CALL_OW 321
46643: PUSH
46644: LD_INT 2
46646: EQUAL
46647: AND
46648: IFFALSE 46665
// bpoints := bpoints * 1.2 ;
46650: LD_ADDR_VAR 0 10
46654: PUSH
46655: LD_VAR 0 10
46659: PUSH
46660: LD_REAL  1.20000000000000E+0000
46663: MUL
46664: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46665: LD_VAR 0 6
46669: PPUSH
46670: CALL_OW 264
46674: PUSH
46675: LD_INT 6
46677: PUSH
46678: LD_INT 46
46680: PUSH
46681: LD_INT 47
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: LIST
46688: IN
46689: IFFALSE 46706
// bpoints := bpoints * 1.2 ;
46691: LD_ADDR_VAR 0 10
46695: PUSH
46696: LD_VAR 0 10
46700: PUSH
46701: LD_REAL  1.20000000000000E+0000
46704: MUL
46705: ST_TO_ADDR
// end ; unit_building :
46706: GO 46720
46708: LD_INT 3
46710: DOUBLE
46711: EQUAL
46712: IFTRUE 46716
46714: GO 46719
46716: POP
// ; end ;
46717: GO 46720
46719: POP
// for j = 1 to 3 do
46720: LD_ADDR_VAR 0 7
46724: PUSH
46725: DOUBLE
46726: LD_INT 1
46728: DEC
46729: ST_TO_ADDR
46730: LD_INT 3
46732: PUSH
46733: FOR_TO
46734: IFFALSE 46787
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46736: LD_ADDR_VAR 0 5
46740: PUSH
46741: LD_VAR 0 5
46745: PPUSH
46746: LD_VAR 0 7
46750: PPUSH
46751: LD_VAR 0 5
46755: PUSH
46756: LD_VAR 0 7
46760: ARRAY
46761: PUSH
46762: LD_VAR 0 9
46766: PUSH
46767: LD_VAR 0 7
46771: ARRAY
46772: PUSH
46773: LD_VAR 0 10
46777: MUL
46778: PLUS
46779: PPUSH
46780: CALL_OW 1
46784: ST_TO_ADDR
46785: GO 46733
46787: POP
46788: POP
// end ;
46789: GO 45268
46791: POP
46792: POP
// result := Replace ( result , 4 , tmp ) ;
46793: LD_ADDR_VAR 0 5
46797: PUSH
46798: LD_VAR 0 5
46802: PPUSH
46803: LD_INT 4
46805: PPUSH
46806: LD_VAR 0 8
46810: PPUSH
46811: CALL_OW 1
46815: ST_TO_ADDR
// end ;
46816: LD_VAR 0 5
46820: RET
// export function DangerAtRange ( unit , range ) ; begin
46821: LD_INT 0
46823: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46824: LD_ADDR_VAR 0 3
46828: PUSH
46829: LD_VAR 0 1
46833: PPUSH
46834: CALL_OW 255
46838: PPUSH
46839: LD_VAR 0 1
46843: PPUSH
46844: CALL_OW 250
46848: PPUSH
46849: LD_VAR 0 1
46853: PPUSH
46854: CALL_OW 251
46858: PPUSH
46859: LD_VAR 0 2
46863: PPUSH
46864: CALL 45120 0 4
46868: ST_TO_ADDR
// end ;
46869: LD_VAR 0 3
46873: RET
// export function DangerInArea ( side , area ) ; begin
46874: LD_INT 0
46876: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46877: LD_ADDR_VAR 0 3
46881: PUSH
46882: LD_VAR 0 2
46886: PPUSH
46887: LD_INT 81
46889: PUSH
46890: LD_VAR 0 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PPUSH
46899: CALL_OW 70
46903: ST_TO_ADDR
// end ;
46904: LD_VAR 0 3
46908: RET
// export function IsExtension ( b ) ; begin
46909: LD_INT 0
46911: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46912: LD_ADDR_VAR 0 2
46916: PUSH
46917: LD_VAR 0 1
46921: PUSH
46922: LD_INT 23
46924: PUSH
46925: LD_INT 20
46927: PUSH
46928: LD_INT 22
46930: PUSH
46931: LD_INT 17
46933: PUSH
46934: LD_INT 24
46936: PUSH
46937: LD_INT 21
46939: PUSH
46940: LD_INT 19
46942: PUSH
46943: LD_INT 16
46945: PUSH
46946: LD_INT 25
46948: PUSH
46949: LD_INT 18
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: LIST
46956: LIST
46957: LIST
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: IN
46964: ST_TO_ADDR
// end ;
46965: LD_VAR 0 2
46969: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46970: LD_INT 0
46972: PPUSH
46973: PPUSH
46974: PPUSH
// result := [ ] ;
46975: LD_ADDR_VAR 0 4
46979: PUSH
46980: EMPTY
46981: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46982: LD_ADDR_VAR 0 5
46986: PUSH
46987: LD_VAR 0 2
46991: PPUSH
46992: LD_INT 21
46994: PUSH
46995: LD_INT 3
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PPUSH
47002: CALL_OW 70
47006: ST_TO_ADDR
// if not tmp then
47007: LD_VAR 0 5
47011: NOT
47012: IFFALSE 47016
// exit ;
47014: GO 47080
// if checkLink then
47016: LD_VAR 0 3
47020: IFFALSE 47070
// begin for i in tmp do
47022: LD_ADDR_VAR 0 6
47026: PUSH
47027: LD_VAR 0 5
47031: PUSH
47032: FOR_IN
47033: IFFALSE 47068
// if GetBase ( i ) <> base then
47035: LD_VAR 0 6
47039: PPUSH
47040: CALL_OW 274
47044: PUSH
47045: LD_VAR 0 1
47049: NONEQUAL
47050: IFFALSE 47066
// ComLinkToBase ( base , i ) ;
47052: LD_VAR 0 1
47056: PPUSH
47057: LD_VAR 0 6
47061: PPUSH
47062: CALL_OW 169
47066: GO 47032
47068: POP
47069: POP
// end ; result := tmp ;
47070: LD_ADDR_VAR 0 4
47074: PUSH
47075: LD_VAR 0 5
47079: ST_TO_ADDR
// end ;
47080: LD_VAR 0 4
47084: RET
// export function ComComplete ( units , b ) ; var i ; begin
47085: LD_INT 0
47087: PPUSH
47088: PPUSH
// if not units then
47089: LD_VAR 0 1
47093: NOT
47094: IFFALSE 47098
// exit ;
47096: GO 47188
// for i in units do
47098: LD_ADDR_VAR 0 4
47102: PUSH
47103: LD_VAR 0 1
47107: PUSH
47108: FOR_IN
47109: IFFALSE 47186
// if BuildingStatus ( b ) = bs_build then
47111: LD_VAR 0 2
47115: PPUSH
47116: CALL_OW 461
47120: PUSH
47121: LD_INT 1
47123: EQUAL
47124: IFFALSE 47184
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47126: LD_VAR 0 4
47130: PPUSH
47131: LD_STRING h
47133: PUSH
47134: LD_VAR 0 2
47138: PPUSH
47139: CALL_OW 250
47143: PUSH
47144: LD_VAR 0 2
47148: PPUSH
47149: CALL_OW 251
47153: PUSH
47154: LD_VAR 0 2
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: LD_INT 0
47164: PUSH
47165: LD_INT 0
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: PUSH
47177: EMPTY
47178: LIST
47179: PPUSH
47180: CALL_OW 446
47184: GO 47108
47186: POP
47187: POP
// end ;
47188: LD_VAR 0 3
47192: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47193: LD_INT 0
47195: PPUSH
47196: PPUSH
47197: PPUSH
47198: PPUSH
47199: PPUSH
47200: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47201: LD_VAR 0 1
47205: NOT
47206: PUSH
47207: LD_VAR 0 1
47211: PPUSH
47212: CALL_OW 263
47216: PUSH
47217: LD_INT 2
47219: NONEQUAL
47220: OR
47221: IFFALSE 47225
// exit ;
47223: GO 47541
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47225: LD_ADDR_VAR 0 6
47229: PUSH
47230: LD_INT 22
47232: PUSH
47233: LD_VAR 0 1
47237: PPUSH
47238: CALL_OW 255
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: LD_INT 30
47252: PUSH
47253: LD_INT 36
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 34
47262: PUSH
47263: LD_INT 31
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: EMPTY
47271: LIST
47272: LIST
47273: LIST
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PPUSH
47279: CALL_OW 69
47283: ST_TO_ADDR
// if not tmp then
47284: LD_VAR 0 6
47288: NOT
47289: IFFALSE 47293
// exit ;
47291: GO 47541
// result := [ ] ;
47293: LD_ADDR_VAR 0 2
47297: PUSH
47298: EMPTY
47299: ST_TO_ADDR
// for i in tmp do
47300: LD_ADDR_VAR 0 3
47304: PUSH
47305: LD_VAR 0 6
47309: PUSH
47310: FOR_IN
47311: IFFALSE 47382
// begin t := UnitsInside ( i ) ;
47313: LD_ADDR_VAR 0 4
47317: PUSH
47318: LD_VAR 0 3
47322: PPUSH
47323: CALL_OW 313
47327: ST_TO_ADDR
// if t then
47328: LD_VAR 0 4
47332: IFFALSE 47380
// for j in t do
47334: LD_ADDR_VAR 0 7
47338: PUSH
47339: LD_VAR 0 4
47343: PUSH
47344: FOR_IN
47345: IFFALSE 47378
// result := Replace ( result , result + 1 , j ) ;
47347: LD_ADDR_VAR 0 2
47351: PUSH
47352: LD_VAR 0 2
47356: PPUSH
47357: LD_VAR 0 2
47361: PUSH
47362: LD_INT 1
47364: PLUS
47365: PPUSH
47366: LD_VAR 0 7
47370: PPUSH
47371: CALL_OW 1
47375: ST_TO_ADDR
47376: GO 47344
47378: POP
47379: POP
// end ;
47380: GO 47310
47382: POP
47383: POP
// if not result then
47384: LD_VAR 0 2
47388: NOT
47389: IFFALSE 47393
// exit ;
47391: GO 47541
// mech := result [ 1 ] ;
47393: LD_ADDR_VAR 0 5
47397: PUSH
47398: LD_VAR 0 2
47402: PUSH
47403: LD_INT 1
47405: ARRAY
47406: ST_TO_ADDR
// if result > 1 then
47407: LD_VAR 0 2
47411: PUSH
47412: LD_INT 1
47414: GREATER
47415: IFFALSE 47527
// begin for i = 2 to result do
47417: LD_ADDR_VAR 0 3
47421: PUSH
47422: DOUBLE
47423: LD_INT 2
47425: DEC
47426: ST_TO_ADDR
47427: LD_VAR 0 2
47431: PUSH
47432: FOR_TO
47433: IFFALSE 47525
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47435: LD_ADDR_VAR 0 4
47439: PUSH
47440: LD_VAR 0 2
47444: PUSH
47445: LD_VAR 0 3
47449: ARRAY
47450: PPUSH
47451: LD_INT 3
47453: PPUSH
47454: CALL_OW 259
47458: PUSH
47459: LD_VAR 0 2
47463: PUSH
47464: LD_VAR 0 3
47468: ARRAY
47469: PPUSH
47470: CALL_OW 432
47474: MINUS
47475: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47476: LD_VAR 0 4
47480: PUSH
47481: LD_VAR 0 5
47485: PPUSH
47486: LD_INT 3
47488: PPUSH
47489: CALL_OW 259
47493: PUSH
47494: LD_VAR 0 5
47498: PPUSH
47499: CALL_OW 432
47503: MINUS
47504: GREATEREQUAL
47505: IFFALSE 47523
// mech := result [ i ] ;
47507: LD_ADDR_VAR 0 5
47511: PUSH
47512: LD_VAR 0 2
47516: PUSH
47517: LD_VAR 0 3
47521: ARRAY
47522: ST_TO_ADDR
// end ;
47523: GO 47432
47525: POP
47526: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47527: LD_VAR 0 1
47531: PPUSH
47532: LD_VAR 0 5
47536: PPUSH
47537: CALL_OW 135
// end ;
47541: LD_VAR 0 2
47545: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47546: LD_INT 0
47548: PPUSH
47549: PPUSH
47550: PPUSH
47551: PPUSH
47552: PPUSH
47553: PPUSH
47554: PPUSH
47555: PPUSH
47556: PPUSH
47557: PPUSH
47558: PPUSH
47559: PPUSH
47560: PPUSH
// result := [ ] ;
47561: LD_ADDR_VAR 0 7
47565: PUSH
47566: EMPTY
47567: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47568: LD_VAR 0 1
47572: PPUSH
47573: CALL_OW 266
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 1
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: IN
47588: NOT
47589: IFFALSE 47593
// exit ;
47591: GO 49227
// if name then
47593: LD_VAR 0 3
47597: IFFALSE 47613
// SetBName ( base_dep , name ) ;
47599: LD_VAR 0 1
47603: PPUSH
47604: LD_VAR 0 3
47608: PPUSH
47609: CALL_OW 500
// base := GetBase ( base_dep ) ;
47613: LD_ADDR_VAR 0 15
47617: PUSH
47618: LD_VAR 0 1
47622: PPUSH
47623: CALL_OW 274
47627: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47628: LD_ADDR_VAR 0 16
47632: PUSH
47633: LD_VAR 0 1
47637: PPUSH
47638: CALL_OW 255
47642: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47643: LD_ADDR_VAR 0 17
47647: PUSH
47648: LD_VAR 0 1
47652: PPUSH
47653: CALL_OW 248
47657: ST_TO_ADDR
// if sources then
47658: LD_VAR 0 5
47662: IFFALSE 47709
// for i = 1 to 3 do
47664: LD_ADDR_VAR 0 8
47668: PUSH
47669: DOUBLE
47670: LD_INT 1
47672: DEC
47673: ST_TO_ADDR
47674: LD_INT 3
47676: PUSH
47677: FOR_TO
47678: IFFALSE 47707
// AddResourceType ( base , i , sources [ i ] ) ;
47680: LD_VAR 0 15
47684: PPUSH
47685: LD_VAR 0 8
47689: PPUSH
47690: LD_VAR 0 5
47694: PUSH
47695: LD_VAR 0 8
47699: ARRAY
47700: PPUSH
47701: CALL_OW 276
47705: GO 47677
47707: POP
47708: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47709: LD_ADDR_VAR 0 18
47713: PUSH
47714: LD_VAR 0 15
47718: PPUSH
47719: LD_VAR 0 2
47723: PPUSH
47724: LD_INT 1
47726: PPUSH
47727: CALL 46970 0 3
47731: ST_TO_ADDR
// InitHc ;
47732: CALL_OW 19
// InitUc ;
47736: CALL_OW 18
// uc_side := side ;
47740: LD_ADDR_OWVAR 20
47744: PUSH
47745: LD_VAR 0 16
47749: ST_TO_ADDR
// uc_nation := nation ;
47750: LD_ADDR_OWVAR 21
47754: PUSH
47755: LD_VAR 0 17
47759: ST_TO_ADDR
// if buildings then
47760: LD_VAR 0 18
47764: IFFALSE 49086
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47766: LD_ADDR_VAR 0 19
47770: PUSH
47771: LD_VAR 0 18
47775: PPUSH
47776: LD_INT 2
47778: PUSH
47779: LD_INT 30
47781: PUSH
47782: LD_INT 29
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 30
47791: PUSH
47792: LD_INT 30
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: LIST
47803: PPUSH
47804: CALL_OW 72
47808: ST_TO_ADDR
// if tmp then
47809: LD_VAR 0 19
47813: IFFALSE 47861
// for i in tmp do
47815: LD_ADDR_VAR 0 8
47819: PUSH
47820: LD_VAR 0 19
47824: PUSH
47825: FOR_IN
47826: IFFALSE 47859
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47828: LD_VAR 0 8
47832: PPUSH
47833: CALL_OW 250
47837: PPUSH
47838: LD_VAR 0 8
47842: PPUSH
47843: CALL_OW 251
47847: PPUSH
47848: LD_VAR 0 16
47852: PPUSH
47853: CALL_OW 441
47857: GO 47825
47859: POP
47860: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47861: LD_VAR 0 18
47865: PPUSH
47866: LD_INT 2
47868: PUSH
47869: LD_INT 30
47871: PUSH
47872: LD_INT 32
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 30
47881: PUSH
47882: LD_INT 33
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: LIST
47893: PPUSH
47894: CALL_OW 72
47898: IFFALSE 47986
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47900: LD_ADDR_VAR 0 8
47904: PUSH
47905: LD_VAR 0 18
47909: PPUSH
47910: LD_INT 2
47912: PUSH
47913: LD_INT 30
47915: PUSH
47916: LD_INT 32
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 30
47925: PUSH
47926: LD_INT 33
47928: PUSH
47929: EMPTY
47930: LIST
47931: LIST
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: LIST
47937: PPUSH
47938: CALL_OW 72
47942: PUSH
47943: FOR_IN
47944: IFFALSE 47984
// begin if not GetBWeapon ( i ) then
47946: LD_VAR 0 8
47950: PPUSH
47951: CALL_OW 269
47955: NOT
47956: IFFALSE 47982
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47958: LD_VAR 0 8
47962: PPUSH
47963: LD_VAR 0 8
47967: PPUSH
47968: LD_VAR 0 2
47972: PPUSH
47973: CALL 49232 0 2
47977: PPUSH
47978: CALL_OW 431
// end ;
47982: GO 47943
47984: POP
47985: POP
// end ; for i = 1 to personel do
47986: LD_ADDR_VAR 0 8
47990: PUSH
47991: DOUBLE
47992: LD_INT 1
47994: DEC
47995: ST_TO_ADDR
47996: LD_VAR 0 6
48000: PUSH
48001: FOR_TO
48002: IFFALSE 49066
// begin if i > 4 then
48004: LD_VAR 0 8
48008: PUSH
48009: LD_INT 4
48011: GREATER
48012: IFFALSE 48016
// break ;
48014: GO 49066
// case i of 1 :
48016: LD_VAR 0 8
48020: PUSH
48021: LD_INT 1
48023: DOUBLE
48024: EQUAL
48025: IFTRUE 48029
48027: GO 48109
48029: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
48030: LD_ADDR_VAR 0 12
48034: PUSH
48035: LD_VAR 0 18
48039: PPUSH
48040: LD_INT 22
48042: PUSH
48043: LD_VAR 0 16
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 58
48054: PUSH
48055: EMPTY
48056: LIST
48057: PUSH
48058: LD_INT 2
48060: PUSH
48061: LD_INT 30
48063: PUSH
48064: LD_INT 32
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 30
48073: PUSH
48074: LD_INT 4
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 30
48083: PUSH
48084: LD_INT 5
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: LIST
48095: LIST
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: PPUSH
48102: CALL_OW 72
48106: ST_TO_ADDR
48107: GO 48331
48109: LD_INT 2
48111: DOUBLE
48112: EQUAL
48113: IFTRUE 48117
48115: GO 48179
48117: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48118: LD_ADDR_VAR 0 12
48122: PUSH
48123: LD_VAR 0 18
48127: PPUSH
48128: LD_INT 22
48130: PUSH
48131: LD_VAR 0 16
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 30
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 30
48155: PUSH
48156: LD_INT 1
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: LIST
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PPUSH
48172: CALL_OW 72
48176: ST_TO_ADDR
48177: GO 48331
48179: LD_INT 3
48181: DOUBLE
48182: EQUAL
48183: IFTRUE 48187
48185: GO 48249
48187: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48188: LD_ADDR_VAR 0 12
48192: PUSH
48193: LD_VAR 0 18
48197: PPUSH
48198: LD_INT 22
48200: PUSH
48201: LD_VAR 0 16
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 2
48212: PUSH
48213: LD_INT 30
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 30
48225: PUSH
48226: LD_INT 3
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: LIST
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PPUSH
48242: CALL_OW 72
48246: ST_TO_ADDR
48247: GO 48331
48249: LD_INT 4
48251: DOUBLE
48252: EQUAL
48253: IFTRUE 48257
48255: GO 48330
48257: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48258: LD_ADDR_VAR 0 12
48262: PUSH
48263: LD_VAR 0 18
48267: PPUSH
48268: LD_INT 22
48270: PUSH
48271: LD_VAR 0 16
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 30
48285: PUSH
48286: LD_INT 6
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 30
48295: PUSH
48296: LD_INT 7
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 30
48305: PUSH
48306: LD_INT 8
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PPUSH
48323: CALL_OW 72
48327: ST_TO_ADDR
48328: GO 48331
48330: POP
// if i = 1 then
48331: LD_VAR 0 8
48335: PUSH
48336: LD_INT 1
48338: EQUAL
48339: IFFALSE 48450
// begin tmp := [ ] ;
48341: LD_ADDR_VAR 0 19
48345: PUSH
48346: EMPTY
48347: ST_TO_ADDR
// for j in f do
48348: LD_ADDR_VAR 0 9
48352: PUSH
48353: LD_VAR 0 12
48357: PUSH
48358: FOR_IN
48359: IFFALSE 48432
// if GetBType ( j ) = b_bunker then
48361: LD_VAR 0 9
48365: PPUSH
48366: CALL_OW 266
48370: PUSH
48371: LD_INT 32
48373: EQUAL
48374: IFFALSE 48401
// tmp := Insert ( tmp , 1 , j ) else
48376: LD_ADDR_VAR 0 19
48380: PUSH
48381: LD_VAR 0 19
48385: PPUSH
48386: LD_INT 1
48388: PPUSH
48389: LD_VAR 0 9
48393: PPUSH
48394: CALL_OW 2
48398: ST_TO_ADDR
48399: GO 48430
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48401: LD_ADDR_VAR 0 19
48405: PUSH
48406: LD_VAR 0 19
48410: PPUSH
48411: LD_VAR 0 19
48415: PUSH
48416: LD_INT 1
48418: PLUS
48419: PPUSH
48420: LD_VAR 0 9
48424: PPUSH
48425: CALL_OW 2
48429: ST_TO_ADDR
48430: GO 48358
48432: POP
48433: POP
// if tmp then
48434: LD_VAR 0 19
48438: IFFALSE 48450
// f := tmp ;
48440: LD_ADDR_VAR 0 12
48444: PUSH
48445: LD_VAR 0 19
48449: ST_TO_ADDR
// end ; x := personel [ i ] ;
48450: LD_ADDR_VAR 0 13
48454: PUSH
48455: LD_VAR 0 6
48459: PUSH
48460: LD_VAR 0 8
48464: ARRAY
48465: ST_TO_ADDR
// if x = - 1 then
48466: LD_VAR 0 13
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: EQUAL
48475: IFFALSE 48684
// begin for j in f do
48477: LD_ADDR_VAR 0 9
48481: PUSH
48482: LD_VAR 0 12
48486: PUSH
48487: FOR_IN
48488: IFFALSE 48680
// repeat InitHc ;
48490: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48494: LD_VAR 0 9
48498: PPUSH
48499: CALL_OW 266
48503: PUSH
48504: LD_INT 5
48506: EQUAL
48507: IFFALSE 48577
// begin if UnitsInside ( j ) < 3 then
48509: LD_VAR 0 9
48513: PPUSH
48514: CALL_OW 313
48518: PUSH
48519: LD_INT 3
48521: LESS
48522: IFFALSE 48558
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48524: LD_INT 0
48526: PPUSH
48527: LD_INT 5
48529: PUSH
48530: LD_INT 8
48532: PUSH
48533: LD_INT 9
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: LIST
48540: PUSH
48541: LD_VAR 0 17
48545: ARRAY
48546: PPUSH
48547: LD_VAR 0 4
48551: PPUSH
48552: CALL_OW 380
48556: GO 48575
// PrepareHuman ( false , i , skill ) ;
48558: LD_INT 0
48560: PPUSH
48561: LD_VAR 0 8
48565: PPUSH
48566: LD_VAR 0 4
48570: PPUSH
48571: CALL_OW 380
// end else
48575: GO 48594
// PrepareHuman ( false , i , skill ) ;
48577: LD_INT 0
48579: PPUSH
48580: LD_VAR 0 8
48584: PPUSH
48585: LD_VAR 0 4
48589: PPUSH
48590: CALL_OW 380
// un := CreateHuman ;
48594: LD_ADDR_VAR 0 14
48598: PUSH
48599: CALL_OW 44
48603: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48604: LD_ADDR_VAR 0 7
48608: PUSH
48609: LD_VAR 0 7
48613: PPUSH
48614: LD_INT 1
48616: PPUSH
48617: LD_VAR 0 14
48621: PPUSH
48622: CALL_OW 2
48626: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48627: LD_VAR 0 14
48631: PPUSH
48632: LD_VAR 0 9
48636: PPUSH
48637: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48641: LD_VAR 0 9
48645: PPUSH
48646: CALL_OW 313
48650: PUSH
48651: LD_INT 6
48653: EQUAL
48654: PUSH
48655: LD_VAR 0 9
48659: PPUSH
48660: CALL_OW 266
48664: PUSH
48665: LD_INT 32
48667: PUSH
48668: LD_INT 31
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: IN
48675: OR
48676: IFFALSE 48490
48678: GO 48487
48680: POP
48681: POP
// end else
48682: GO 49064
// for j = 1 to x do
48684: LD_ADDR_VAR 0 9
48688: PUSH
48689: DOUBLE
48690: LD_INT 1
48692: DEC
48693: ST_TO_ADDR
48694: LD_VAR 0 13
48698: PUSH
48699: FOR_TO
48700: IFFALSE 49062
// begin InitHc ;
48702: CALL_OW 19
// if not f then
48706: LD_VAR 0 12
48710: NOT
48711: IFFALSE 48800
// begin PrepareHuman ( false , i , skill ) ;
48713: LD_INT 0
48715: PPUSH
48716: LD_VAR 0 8
48720: PPUSH
48721: LD_VAR 0 4
48725: PPUSH
48726: CALL_OW 380
// un := CreateHuman ;
48730: LD_ADDR_VAR 0 14
48734: PUSH
48735: CALL_OW 44
48739: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48740: LD_ADDR_VAR 0 7
48744: PUSH
48745: LD_VAR 0 7
48749: PPUSH
48750: LD_INT 1
48752: PPUSH
48753: LD_VAR 0 14
48757: PPUSH
48758: CALL_OW 2
48762: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48763: LD_VAR 0 14
48767: PPUSH
48768: LD_VAR 0 1
48772: PPUSH
48773: CALL_OW 250
48777: PPUSH
48778: LD_VAR 0 1
48782: PPUSH
48783: CALL_OW 251
48787: PPUSH
48788: LD_INT 10
48790: PPUSH
48791: LD_INT 0
48793: PPUSH
48794: CALL_OW 50
// continue ;
48798: GO 48699
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48800: LD_VAR 0 12
48804: PUSH
48805: LD_INT 1
48807: ARRAY
48808: PPUSH
48809: CALL_OW 313
48813: PUSH
48814: LD_VAR 0 12
48818: PUSH
48819: LD_INT 1
48821: ARRAY
48822: PPUSH
48823: CALL_OW 266
48827: PUSH
48828: LD_INT 32
48830: PUSH
48831: LD_INT 31
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: IN
48838: AND
48839: PUSH
48840: LD_VAR 0 12
48844: PUSH
48845: LD_INT 1
48847: ARRAY
48848: PPUSH
48849: CALL_OW 313
48853: PUSH
48854: LD_INT 6
48856: EQUAL
48857: OR
48858: IFFALSE 48878
// f := Delete ( f , 1 ) ;
48860: LD_ADDR_VAR 0 12
48864: PUSH
48865: LD_VAR 0 12
48869: PPUSH
48870: LD_INT 1
48872: PPUSH
48873: CALL_OW 3
48877: ST_TO_ADDR
// if not f then
48878: LD_VAR 0 12
48882: NOT
48883: IFFALSE 48901
// begin x := x + 2 ;
48885: LD_ADDR_VAR 0 13
48889: PUSH
48890: LD_VAR 0 13
48894: PUSH
48895: LD_INT 2
48897: PLUS
48898: ST_TO_ADDR
// continue ;
48899: GO 48699
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48901: LD_VAR 0 12
48905: PUSH
48906: LD_INT 1
48908: ARRAY
48909: PPUSH
48910: CALL_OW 266
48914: PUSH
48915: LD_INT 5
48917: EQUAL
48918: IFFALSE 48992
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48920: LD_VAR 0 12
48924: PUSH
48925: LD_INT 1
48927: ARRAY
48928: PPUSH
48929: CALL_OW 313
48933: PUSH
48934: LD_INT 3
48936: LESS
48937: IFFALSE 48973
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48939: LD_INT 0
48941: PPUSH
48942: LD_INT 5
48944: PUSH
48945: LD_INT 8
48947: PUSH
48948: LD_INT 9
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: LIST
48955: PUSH
48956: LD_VAR 0 17
48960: ARRAY
48961: PPUSH
48962: LD_VAR 0 4
48966: PPUSH
48967: CALL_OW 380
48971: GO 48990
// PrepareHuman ( false , i , skill ) ;
48973: LD_INT 0
48975: PPUSH
48976: LD_VAR 0 8
48980: PPUSH
48981: LD_VAR 0 4
48985: PPUSH
48986: CALL_OW 380
// end else
48990: GO 49009
// PrepareHuman ( false , i , skill ) ;
48992: LD_INT 0
48994: PPUSH
48995: LD_VAR 0 8
48999: PPUSH
49000: LD_VAR 0 4
49004: PPUSH
49005: CALL_OW 380
// un := CreateHuman ;
49009: LD_ADDR_VAR 0 14
49013: PUSH
49014: CALL_OW 44
49018: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
49019: LD_ADDR_VAR 0 7
49023: PUSH
49024: LD_VAR 0 7
49028: PPUSH
49029: LD_INT 1
49031: PPUSH
49032: LD_VAR 0 14
49036: PPUSH
49037: CALL_OW 2
49041: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
49042: LD_VAR 0 14
49046: PPUSH
49047: LD_VAR 0 12
49051: PUSH
49052: LD_INT 1
49054: ARRAY
49055: PPUSH
49056: CALL_OW 52
// end ;
49060: GO 48699
49062: POP
49063: POP
// end ;
49064: GO 48001
49066: POP
49067: POP
// result := result ^ buildings ;
49068: LD_ADDR_VAR 0 7
49072: PUSH
49073: LD_VAR 0 7
49077: PUSH
49078: LD_VAR 0 18
49082: ADD
49083: ST_TO_ADDR
// end else
49084: GO 49227
// begin for i = 1 to personel do
49086: LD_ADDR_VAR 0 8
49090: PUSH
49091: DOUBLE
49092: LD_INT 1
49094: DEC
49095: ST_TO_ADDR
49096: LD_VAR 0 6
49100: PUSH
49101: FOR_TO
49102: IFFALSE 49225
// begin if i > 4 then
49104: LD_VAR 0 8
49108: PUSH
49109: LD_INT 4
49111: GREATER
49112: IFFALSE 49116
// break ;
49114: GO 49225
// x := personel [ i ] ;
49116: LD_ADDR_VAR 0 13
49120: PUSH
49121: LD_VAR 0 6
49125: PUSH
49126: LD_VAR 0 8
49130: ARRAY
49131: ST_TO_ADDR
// if x = - 1 then
49132: LD_VAR 0 13
49136: PUSH
49137: LD_INT 1
49139: NEG
49140: EQUAL
49141: IFFALSE 49145
// continue ;
49143: GO 49101
// PrepareHuman ( false , i , skill ) ;
49145: LD_INT 0
49147: PPUSH
49148: LD_VAR 0 8
49152: PPUSH
49153: LD_VAR 0 4
49157: PPUSH
49158: CALL_OW 380
// un := CreateHuman ;
49162: LD_ADDR_VAR 0 14
49166: PUSH
49167: CALL_OW 44
49171: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49172: LD_VAR 0 14
49176: PPUSH
49177: LD_VAR 0 1
49181: PPUSH
49182: CALL_OW 250
49186: PPUSH
49187: LD_VAR 0 1
49191: PPUSH
49192: CALL_OW 251
49196: PPUSH
49197: LD_INT 10
49199: PPUSH
49200: LD_INT 0
49202: PPUSH
49203: CALL_OW 50
// result := result ^ un ;
49207: LD_ADDR_VAR 0 7
49211: PUSH
49212: LD_VAR 0 7
49216: PUSH
49217: LD_VAR 0 14
49221: ADD
49222: ST_TO_ADDR
// end ;
49223: GO 49101
49225: POP
49226: POP
// end ; end ;
49227: LD_VAR 0 7
49231: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49232: LD_INT 0
49234: PPUSH
49235: PPUSH
49236: PPUSH
49237: PPUSH
49238: PPUSH
49239: PPUSH
49240: PPUSH
49241: PPUSH
49242: PPUSH
49243: PPUSH
49244: PPUSH
49245: PPUSH
49246: PPUSH
49247: PPUSH
49248: PPUSH
49249: PPUSH
// result := false ;
49250: LD_ADDR_VAR 0 3
49254: PUSH
49255: LD_INT 0
49257: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49258: LD_VAR 0 1
49262: NOT
49263: PUSH
49264: LD_VAR 0 1
49268: PPUSH
49269: CALL_OW 266
49273: PUSH
49274: LD_INT 32
49276: PUSH
49277: LD_INT 33
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: IN
49284: NOT
49285: OR
49286: IFFALSE 49290
// exit ;
49288: GO 50399
// nat := GetNation ( tower ) ;
49290: LD_ADDR_VAR 0 12
49294: PUSH
49295: LD_VAR 0 1
49299: PPUSH
49300: CALL_OW 248
49304: ST_TO_ADDR
// side := GetSide ( tower ) ;
49305: LD_ADDR_VAR 0 16
49309: PUSH
49310: LD_VAR 0 1
49314: PPUSH
49315: CALL_OW 255
49319: ST_TO_ADDR
// x := GetX ( tower ) ;
49320: LD_ADDR_VAR 0 10
49324: PUSH
49325: LD_VAR 0 1
49329: PPUSH
49330: CALL_OW 250
49334: ST_TO_ADDR
// y := GetY ( tower ) ;
49335: LD_ADDR_VAR 0 11
49339: PUSH
49340: LD_VAR 0 1
49344: PPUSH
49345: CALL_OW 251
49349: ST_TO_ADDR
// if not x or not y then
49350: LD_VAR 0 10
49354: NOT
49355: PUSH
49356: LD_VAR 0 11
49360: NOT
49361: OR
49362: IFFALSE 49366
// exit ;
49364: GO 50399
// weapon := 0 ;
49366: LD_ADDR_VAR 0 18
49370: PUSH
49371: LD_INT 0
49373: ST_TO_ADDR
// fac_list := [ ] ;
49374: LD_ADDR_VAR 0 17
49378: PUSH
49379: EMPTY
49380: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49381: LD_ADDR_VAR 0 6
49385: PUSH
49386: LD_VAR 0 1
49390: PPUSH
49391: CALL_OW 274
49395: PPUSH
49396: LD_VAR 0 2
49400: PPUSH
49401: LD_INT 0
49403: PPUSH
49404: CALL 46970 0 3
49408: PPUSH
49409: LD_INT 30
49411: PUSH
49412: LD_INT 3
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PPUSH
49419: CALL_OW 72
49423: ST_TO_ADDR
// if not factories then
49424: LD_VAR 0 6
49428: NOT
49429: IFFALSE 49433
// exit ;
49431: GO 50399
// for i in factories do
49433: LD_ADDR_VAR 0 8
49437: PUSH
49438: LD_VAR 0 6
49442: PUSH
49443: FOR_IN
49444: IFFALSE 49469
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49446: LD_ADDR_VAR 0 17
49450: PUSH
49451: LD_VAR 0 17
49455: PUSH
49456: LD_VAR 0 8
49460: PPUSH
49461: CALL_OW 478
49465: UNION
49466: ST_TO_ADDR
49467: GO 49443
49469: POP
49470: POP
// if not fac_list then
49471: LD_VAR 0 17
49475: NOT
49476: IFFALSE 49480
// exit ;
49478: GO 50399
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49480: LD_ADDR_VAR 0 5
49484: PUSH
49485: LD_INT 4
49487: PUSH
49488: LD_INT 5
49490: PUSH
49491: LD_INT 9
49493: PUSH
49494: LD_INT 10
49496: PUSH
49497: LD_INT 6
49499: PUSH
49500: LD_INT 7
49502: PUSH
49503: LD_INT 11
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 27
49517: PUSH
49518: LD_INT 28
49520: PUSH
49521: LD_INT 26
49523: PUSH
49524: LD_INT 30
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 43
49535: PUSH
49536: LD_INT 44
49538: PUSH
49539: LD_INT 46
49541: PUSH
49542: LD_INT 45
49544: PUSH
49545: LD_INT 47
49547: PUSH
49548: LD_INT 49
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: LIST
49563: PUSH
49564: LD_VAR 0 12
49568: ARRAY
49569: ST_TO_ADDR
// list := list isect fac_list ;
49570: LD_ADDR_VAR 0 5
49574: PUSH
49575: LD_VAR 0 5
49579: PUSH
49580: LD_VAR 0 17
49584: ISECT
49585: ST_TO_ADDR
// if not list then
49586: LD_VAR 0 5
49590: NOT
49591: IFFALSE 49595
// exit ;
49593: GO 50399
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49595: LD_VAR 0 12
49599: PUSH
49600: LD_INT 3
49602: EQUAL
49603: PUSH
49604: LD_INT 49
49606: PUSH
49607: LD_VAR 0 5
49611: IN
49612: AND
49613: PUSH
49614: LD_INT 31
49616: PPUSH
49617: LD_VAR 0 16
49621: PPUSH
49622: CALL_OW 321
49626: PUSH
49627: LD_INT 2
49629: EQUAL
49630: AND
49631: IFFALSE 49691
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49633: LD_INT 22
49635: PUSH
49636: LD_VAR 0 16
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: PUSH
49645: LD_INT 35
49647: PUSH
49648: LD_INT 49
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 91
49657: PUSH
49658: LD_VAR 0 1
49662: PUSH
49663: LD_INT 10
49665: PUSH
49666: EMPTY
49667: LIST
49668: LIST
49669: LIST
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: LIST
49675: PPUSH
49676: CALL_OW 69
49680: NOT
49681: IFFALSE 49691
// weapon := ru_time_lapser ;
49683: LD_ADDR_VAR 0 18
49687: PUSH
49688: LD_INT 49
49690: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49691: LD_VAR 0 12
49695: PUSH
49696: LD_INT 1
49698: PUSH
49699: LD_INT 2
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: IN
49706: PUSH
49707: LD_INT 11
49709: PUSH
49710: LD_VAR 0 5
49714: IN
49715: PUSH
49716: LD_INT 30
49718: PUSH
49719: LD_VAR 0 5
49723: IN
49724: OR
49725: AND
49726: PUSH
49727: LD_INT 6
49729: PPUSH
49730: LD_VAR 0 16
49734: PPUSH
49735: CALL_OW 321
49739: PUSH
49740: LD_INT 2
49742: EQUAL
49743: AND
49744: IFFALSE 49909
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49746: LD_INT 22
49748: PUSH
49749: LD_VAR 0 16
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: PUSH
49761: LD_INT 35
49763: PUSH
49764: LD_INT 11
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 35
49773: PUSH
49774: LD_INT 30
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 91
49788: PUSH
49789: LD_VAR 0 1
49793: PUSH
49794: LD_INT 18
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: LIST
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: LIST
49806: PPUSH
49807: CALL_OW 69
49811: NOT
49812: PUSH
49813: LD_INT 22
49815: PUSH
49816: LD_VAR 0 16
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: LD_INT 30
49830: PUSH
49831: LD_INT 32
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 30
49840: PUSH
49841: LD_INT 33
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 91
49855: PUSH
49856: LD_VAR 0 1
49860: PUSH
49861: LD_INT 12
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: LIST
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: LIST
49873: PUSH
49874: EMPTY
49875: LIST
49876: PPUSH
49877: CALL_OW 69
49881: PUSH
49882: LD_INT 2
49884: GREATER
49885: AND
49886: IFFALSE 49909
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49888: LD_ADDR_VAR 0 18
49892: PUSH
49893: LD_INT 11
49895: PUSH
49896: LD_INT 30
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_VAR 0 12
49907: ARRAY
49908: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49909: LD_VAR 0 18
49913: NOT
49914: PUSH
49915: LD_INT 40
49917: PPUSH
49918: LD_VAR 0 16
49922: PPUSH
49923: CALL_OW 321
49927: PUSH
49928: LD_INT 2
49930: EQUAL
49931: AND
49932: PUSH
49933: LD_INT 7
49935: PUSH
49936: LD_VAR 0 5
49940: IN
49941: PUSH
49942: LD_INT 28
49944: PUSH
49945: LD_VAR 0 5
49949: IN
49950: OR
49951: PUSH
49952: LD_INT 45
49954: PUSH
49955: LD_VAR 0 5
49959: IN
49960: OR
49961: AND
49962: IFFALSE 50216
// begin hex := GetHexInfo ( x , y ) ;
49964: LD_ADDR_VAR 0 4
49968: PUSH
49969: LD_VAR 0 10
49973: PPUSH
49974: LD_VAR 0 11
49978: PPUSH
49979: CALL_OW 546
49983: ST_TO_ADDR
// if hex [ 1 ] then
49984: LD_VAR 0 4
49988: PUSH
49989: LD_INT 1
49991: ARRAY
49992: IFFALSE 49996
// exit ;
49994: GO 50399
// height := hex [ 2 ] ;
49996: LD_ADDR_VAR 0 15
50000: PUSH
50001: LD_VAR 0 4
50005: PUSH
50006: LD_INT 2
50008: ARRAY
50009: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
50010: LD_ADDR_VAR 0 14
50014: PUSH
50015: LD_INT 0
50017: PUSH
50018: LD_INT 2
50020: PUSH
50021: LD_INT 3
50023: PUSH
50024: LD_INT 5
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: ST_TO_ADDR
// for i in tmp do
50033: LD_ADDR_VAR 0 8
50037: PUSH
50038: LD_VAR 0 14
50042: PUSH
50043: FOR_IN
50044: IFFALSE 50214
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
50046: LD_ADDR_VAR 0 9
50050: PUSH
50051: LD_VAR 0 10
50055: PPUSH
50056: LD_VAR 0 8
50060: PPUSH
50061: LD_INT 5
50063: PPUSH
50064: CALL_OW 272
50068: PUSH
50069: LD_VAR 0 11
50073: PPUSH
50074: LD_VAR 0 8
50078: PPUSH
50079: LD_INT 5
50081: PPUSH
50082: CALL_OW 273
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
50091: LD_VAR 0 9
50095: PUSH
50096: LD_INT 1
50098: ARRAY
50099: PPUSH
50100: LD_VAR 0 9
50104: PUSH
50105: LD_INT 2
50107: ARRAY
50108: PPUSH
50109: CALL_OW 488
50113: IFFALSE 50212
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50115: LD_ADDR_VAR 0 4
50119: PUSH
50120: LD_VAR 0 9
50124: PUSH
50125: LD_INT 1
50127: ARRAY
50128: PPUSH
50129: LD_VAR 0 9
50133: PUSH
50134: LD_INT 2
50136: ARRAY
50137: PPUSH
50138: CALL_OW 546
50142: ST_TO_ADDR
// if hex [ 1 ] then
50143: LD_VAR 0 4
50147: PUSH
50148: LD_INT 1
50150: ARRAY
50151: IFFALSE 50155
// continue ;
50153: GO 50043
// h := hex [ 2 ] ;
50155: LD_ADDR_VAR 0 13
50159: PUSH
50160: LD_VAR 0 4
50164: PUSH
50165: LD_INT 2
50167: ARRAY
50168: ST_TO_ADDR
// if h + 7 < height then
50169: LD_VAR 0 13
50173: PUSH
50174: LD_INT 7
50176: PLUS
50177: PUSH
50178: LD_VAR 0 15
50182: LESS
50183: IFFALSE 50212
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50185: LD_ADDR_VAR 0 18
50189: PUSH
50190: LD_INT 7
50192: PUSH
50193: LD_INT 28
50195: PUSH
50196: LD_INT 45
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: LIST
50203: PUSH
50204: LD_VAR 0 12
50208: ARRAY
50209: ST_TO_ADDR
// break ;
50210: GO 50214
// end ; end ; end ;
50212: GO 50043
50214: POP
50215: POP
// end ; if not weapon then
50216: LD_VAR 0 18
50220: NOT
50221: IFFALSE 50281
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50223: LD_ADDR_VAR 0 5
50227: PUSH
50228: LD_VAR 0 5
50232: PUSH
50233: LD_INT 11
50235: PUSH
50236: LD_INT 30
50238: PUSH
50239: LD_INT 49
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: LIST
50246: DIFF
50247: ST_TO_ADDR
// if not list then
50248: LD_VAR 0 5
50252: NOT
50253: IFFALSE 50257
// exit ;
50255: GO 50399
// weapon := list [ rand ( 1 , list ) ] ;
50257: LD_ADDR_VAR 0 18
50261: PUSH
50262: LD_VAR 0 5
50266: PUSH
50267: LD_INT 1
50269: PPUSH
50270: LD_VAR 0 5
50274: PPUSH
50275: CALL_OW 12
50279: ARRAY
50280: ST_TO_ADDR
// end ; if weapon then
50281: LD_VAR 0 18
50285: IFFALSE 50399
// begin tmp := CostOfWeapon ( weapon ) ;
50287: LD_ADDR_VAR 0 14
50291: PUSH
50292: LD_VAR 0 18
50296: PPUSH
50297: CALL_OW 451
50301: ST_TO_ADDR
// j := GetBase ( tower ) ;
50302: LD_ADDR_VAR 0 9
50306: PUSH
50307: LD_VAR 0 1
50311: PPUSH
50312: CALL_OW 274
50316: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50317: LD_VAR 0 9
50321: PPUSH
50322: LD_INT 1
50324: PPUSH
50325: CALL_OW 275
50329: PUSH
50330: LD_VAR 0 14
50334: PUSH
50335: LD_INT 1
50337: ARRAY
50338: GREATEREQUAL
50339: PUSH
50340: LD_VAR 0 9
50344: PPUSH
50345: LD_INT 2
50347: PPUSH
50348: CALL_OW 275
50352: PUSH
50353: LD_VAR 0 14
50357: PUSH
50358: LD_INT 2
50360: ARRAY
50361: GREATEREQUAL
50362: AND
50363: PUSH
50364: LD_VAR 0 9
50368: PPUSH
50369: LD_INT 3
50371: PPUSH
50372: CALL_OW 275
50376: PUSH
50377: LD_VAR 0 14
50381: PUSH
50382: LD_INT 3
50384: ARRAY
50385: GREATEREQUAL
50386: AND
50387: IFFALSE 50399
// result := weapon ;
50389: LD_ADDR_VAR 0 3
50393: PUSH
50394: LD_VAR 0 18
50398: ST_TO_ADDR
// end ; end ;
50399: LD_VAR 0 3
50403: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50404: LD_INT 0
50406: PPUSH
50407: PPUSH
// result := true ;
50408: LD_ADDR_VAR 0 3
50412: PUSH
50413: LD_INT 1
50415: ST_TO_ADDR
// if array1 = array2 then
50416: LD_VAR 0 1
50420: PUSH
50421: LD_VAR 0 2
50425: EQUAL
50426: IFFALSE 50486
// begin for i = 1 to array1 do
50428: LD_ADDR_VAR 0 4
50432: PUSH
50433: DOUBLE
50434: LD_INT 1
50436: DEC
50437: ST_TO_ADDR
50438: LD_VAR 0 1
50442: PUSH
50443: FOR_TO
50444: IFFALSE 50482
// if array1 [ i ] <> array2 [ i ] then
50446: LD_VAR 0 1
50450: PUSH
50451: LD_VAR 0 4
50455: ARRAY
50456: PUSH
50457: LD_VAR 0 2
50461: PUSH
50462: LD_VAR 0 4
50466: ARRAY
50467: NONEQUAL
50468: IFFALSE 50480
// begin result := false ;
50470: LD_ADDR_VAR 0 3
50474: PUSH
50475: LD_INT 0
50477: ST_TO_ADDR
// break ;
50478: GO 50482
// end ;
50480: GO 50443
50482: POP
50483: POP
// end else
50484: GO 50494
// result := false ;
50486: LD_ADDR_VAR 0 3
50490: PUSH
50491: LD_INT 0
50493: ST_TO_ADDR
// end ;
50494: LD_VAR 0 3
50498: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50499: LD_INT 0
50501: PPUSH
50502: PPUSH
// if not array1 or not array2 then
50503: LD_VAR 0 1
50507: NOT
50508: PUSH
50509: LD_VAR 0 2
50513: NOT
50514: OR
50515: IFFALSE 50519
// exit ;
50517: GO 50583
// result := true ;
50519: LD_ADDR_VAR 0 3
50523: PUSH
50524: LD_INT 1
50526: ST_TO_ADDR
// for i = 1 to array1 do
50527: LD_ADDR_VAR 0 4
50531: PUSH
50532: DOUBLE
50533: LD_INT 1
50535: DEC
50536: ST_TO_ADDR
50537: LD_VAR 0 1
50541: PUSH
50542: FOR_TO
50543: IFFALSE 50581
// if array1 [ i ] <> array2 [ i ] then
50545: LD_VAR 0 1
50549: PUSH
50550: LD_VAR 0 4
50554: ARRAY
50555: PUSH
50556: LD_VAR 0 2
50560: PUSH
50561: LD_VAR 0 4
50565: ARRAY
50566: NONEQUAL
50567: IFFALSE 50579
// begin result := false ;
50569: LD_ADDR_VAR 0 3
50573: PUSH
50574: LD_INT 0
50576: ST_TO_ADDR
// break ;
50577: GO 50581
// end ;
50579: GO 50542
50581: POP
50582: POP
// end ;
50583: LD_VAR 0 3
50587: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50588: LD_INT 0
50590: PPUSH
50591: PPUSH
50592: PPUSH
// pom := GetBase ( fac ) ;
50593: LD_ADDR_VAR 0 5
50597: PUSH
50598: LD_VAR 0 1
50602: PPUSH
50603: CALL_OW 274
50607: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50608: LD_ADDR_VAR 0 4
50612: PUSH
50613: LD_VAR 0 2
50617: PUSH
50618: LD_INT 1
50620: ARRAY
50621: PPUSH
50622: LD_VAR 0 2
50626: PUSH
50627: LD_INT 2
50629: ARRAY
50630: PPUSH
50631: LD_VAR 0 2
50635: PUSH
50636: LD_INT 3
50638: ARRAY
50639: PPUSH
50640: LD_VAR 0 2
50644: PUSH
50645: LD_INT 4
50647: ARRAY
50648: PPUSH
50649: CALL_OW 449
50653: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50654: LD_ADDR_VAR 0 3
50658: PUSH
50659: LD_VAR 0 5
50663: PPUSH
50664: LD_INT 1
50666: PPUSH
50667: CALL_OW 275
50671: PUSH
50672: LD_VAR 0 4
50676: PUSH
50677: LD_INT 1
50679: ARRAY
50680: GREATEREQUAL
50681: PUSH
50682: LD_VAR 0 5
50686: PPUSH
50687: LD_INT 2
50689: PPUSH
50690: CALL_OW 275
50694: PUSH
50695: LD_VAR 0 4
50699: PUSH
50700: LD_INT 2
50702: ARRAY
50703: GREATEREQUAL
50704: AND
50705: PUSH
50706: LD_VAR 0 5
50710: PPUSH
50711: LD_INT 3
50713: PPUSH
50714: CALL_OW 275
50718: PUSH
50719: LD_VAR 0 4
50723: PUSH
50724: LD_INT 3
50726: ARRAY
50727: GREATEREQUAL
50728: AND
50729: ST_TO_ADDR
// end ;
50730: LD_VAR 0 3
50734: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50735: LD_INT 0
50737: PPUSH
50738: PPUSH
50739: PPUSH
50740: PPUSH
// pom := GetBase ( building ) ;
50741: LD_ADDR_VAR 0 3
50745: PUSH
50746: LD_VAR 0 1
50750: PPUSH
50751: CALL_OW 274
50755: ST_TO_ADDR
// if not pom then
50756: LD_VAR 0 3
50760: NOT
50761: IFFALSE 50765
// exit ;
50763: GO 50935
// btype := GetBType ( building ) ;
50765: LD_ADDR_VAR 0 5
50769: PUSH
50770: LD_VAR 0 1
50774: PPUSH
50775: CALL_OW 266
50779: ST_TO_ADDR
// if btype = b_armoury then
50780: LD_VAR 0 5
50784: PUSH
50785: LD_INT 4
50787: EQUAL
50788: IFFALSE 50798
// btype := b_barracks ;
50790: LD_ADDR_VAR 0 5
50794: PUSH
50795: LD_INT 5
50797: ST_TO_ADDR
// if btype = b_depot then
50798: LD_VAR 0 5
50802: PUSH
50803: LD_INT 0
50805: EQUAL
50806: IFFALSE 50816
// btype := b_warehouse ;
50808: LD_ADDR_VAR 0 5
50812: PUSH
50813: LD_INT 1
50815: ST_TO_ADDR
// if btype = b_workshop then
50816: LD_VAR 0 5
50820: PUSH
50821: LD_INT 2
50823: EQUAL
50824: IFFALSE 50834
// btype := b_factory ;
50826: LD_ADDR_VAR 0 5
50830: PUSH
50831: LD_INT 3
50833: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50834: LD_ADDR_VAR 0 4
50838: PUSH
50839: LD_VAR 0 5
50843: PPUSH
50844: LD_VAR 0 1
50848: PPUSH
50849: CALL_OW 248
50853: PPUSH
50854: CALL_OW 450
50858: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50859: LD_ADDR_VAR 0 2
50863: PUSH
50864: LD_VAR 0 3
50868: PPUSH
50869: LD_INT 1
50871: PPUSH
50872: CALL_OW 275
50876: PUSH
50877: LD_VAR 0 4
50881: PUSH
50882: LD_INT 1
50884: ARRAY
50885: GREATEREQUAL
50886: PUSH
50887: LD_VAR 0 3
50891: PPUSH
50892: LD_INT 2
50894: PPUSH
50895: CALL_OW 275
50899: PUSH
50900: LD_VAR 0 4
50904: PUSH
50905: LD_INT 2
50907: ARRAY
50908: GREATEREQUAL
50909: AND
50910: PUSH
50911: LD_VAR 0 3
50915: PPUSH
50916: LD_INT 3
50918: PPUSH
50919: CALL_OW 275
50923: PUSH
50924: LD_VAR 0 4
50928: PUSH
50929: LD_INT 3
50931: ARRAY
50932: GREATEREQUAL
50933: AND
50934: ST_TO_ADDR
// end ;
50935: LD_VAR 0 2
50939: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50940: LD_INT 0
50942: PPUSH
50943: PPUSH
50944: PPUSH
// pom := GetBase ( building ) ;
50945: LD_ADDR_VAR 0 4
50949: PUSH
50950: LD_VAR 0 1
50954: PPUSH
50955: CALL_OW 274
50959: ST_TO_ADDR
// if not pom then
50960: LD_VAR 0 4
50964: NOT
50965: IFFALSE 50969
// exit ;
50967: GO 51070
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50969: LD_ADDR_VAR 0 5
50973: PUSH
50974: LD_VAR 0 2
50978: PPUSH
50979: LD_VAR 0 1
50983: PPUSH
50984: CALL_OW 248
50988: PPUSH
50989: CALL_OW 450
50993: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50994: LD_ADDR_VAR 0 3
50998: PUSH
50999: LD_VAR 0 4
51003: PPUSH
51004: LD_INT 1
51006: PPUSH
51007: CALL_OW 275
51011: PUSH
51012: LD_VAR 0 5
51016: PUSH
51017: LD_INT 1
51019: ARRAY
51020: GREATEREQUAL
51021: PUSH
51022: LD_VAR 0 4
51026: PPUSH
51027: LD_INT 2
51029: PPUSH
51030: CALL_OW 275
51034: PUSH
51035: LD_VAR 0 5
51039: PUSH
51040: LD_INT 2
51042: ARRAY
51043: GREATEREQUAL
51044: AND
51045: PUSH
51046: LD_VAR 0 4
51050: PPUSH
51051: LD_INT 3
51053: PPUSH
51054: CALL_OW 275
51058: PUSH
51059: LD_VAR 0 5
51063: PUSH
51064: LD_INT 3
51066: ARRAY
51067: GREATEREQUAL
51068: AND
51069: ST_TO_ADDR
// end ;
51070: LD_VAR 0 3
51074: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
51075: LD_INT 0
51077: PPUSH
51078: PPUSH
51079: PPUSH
51080: PPUSH
51081: PPUSH
51082: PPUSH
51083: PPUSH
51084: PPUSH
51085: PPUSH
51086: PPUSH
51087: PPUSH
// result := false ;
51088: LD_ADDR_VAR 0 8
51092: PUSH
51093: LD_INT 0
51095: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
51096: LD_VAR 0 5
51100: NOT
51101: PUSH
51102: LD_VAR 0 1
51106: NOT
51107: OR
51108: PUSH
51109: LD_VAR 0 2
51113: NOT
51114: OR
51115: PUSH
51116: LD_VAR 0 3
51120: NOT
51121: OR
51122: IFFALSE 51126
// exit ;
51124: GO 51940
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51126: LD_ADDR_VAR 0 14
51130: PUSH
51131: LD_VAR 0 1
51135: PPUSH
51136: LD_VAR 0 2
51140: PPUSH
51141: LD_VAR 0 3
51145: PPUSH
51146: LD_VAR 0 4
51150: PPUSH
51151: LD_VAR 0 5
51155: PUSH
51156: LD_INT 1
51158: ARRAY
51159: PPUSH
51160: CALL_OW 248
51164: PPUSH
51165: LD_INT 0
51167: PPUSH
51168: CALL 53173 0 6
51172: ST_TO_ADDR
// if not hexes then
51173: LD_VAR 0 14
51177: NOT
51178: IFFALSE 51182
// exit ;
51180: GO 51940
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51182: LD_ADDR_VAR 0 17
51186: PUSH
51187: LD_VAR 0 5
51191: PPUSH
51192: LD_INT 22
51194: PUSH
51195: LD_VAR 0 13
51199: PPUSH
51200: CALL_OW 255
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: LD_INT 30
51214: PUSH
51215: LD_INT 0
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 30
51224: PUSH
51225: LD_INT 1
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: LIST
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PPUSH
51241: CALL_OW 72
51245: ST_TO_ADDR
// for i = 1 to hexes do
51246: LD_ADDR_VAR 0 9
51250: PUSH
51251: DOUBLE
51252: LD_INT 1
51254: DEC
51255: ST_TO_ADDR
51256: LD_VAR 0 14
51260: PUSH
51261: FOR_TO
51262: IFFALSE 51938
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51264: LD_ADDR_VAR 0 13
51268: PUSH
51269: LD_VAR 0 14
51273: PUSH
51274: LD_VAR 0 9
51278: ARRAY
51279: PUSH
51280: LD_INT 1
51282: ARRAY
51283: PPUSH
51284: LD_VAR 0 14
51288: PUSH
51289: LD_VAR 0 9
51293: ARRAY
51294: PUSH
51295: LD_INT 2
51297: ARRAY
51298: PPUSH
51299: CALL_OW 428
51303: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51304: LD_VAR 0 14
51308: PUSH
51309: LD_VAR 0 9
51313: ARRAY
51314: PUSH
51315: LD_INT 1
51317: ARRAY
51318: PPUSH
51319: LD_VAR 0 14
51323: PUSH
51324: LD_VAR 0 9
51328: ARRAY
51329: PUSH
51330: LD_INT 2
51332: ARRAY
51333: PPUSH
51334: CALL_OW 351
51338: PUSH
51339: LD_VAR 0 14
51343: PUSH
51344: LD_VAR 0 9
51348: ARRAY
51349: PUSH
51350: LD_INT 1
51352: ARRAY
51353: PPUSH
51354: LD_VAR 0 14
51358: PUSH
51359: LD_VAR 0 9
51363: ARRAY
51364: PUSH
51365: LD_INT 2
51367: ARRAY
51368: PPUSH
51369: CALL_OW 488
51373: NOT
51374: OR
51375: PUSH
51376: LD_VAR 0 13
51380: PPUSH
51381: CALL_OW 247
51385: PUSH
51386: LD_INT 3
51388: EQUAL
51389: OR
51390: IFFALSE 51396
// exit ;
51392: POP
51393: POP
51394: GO 51940
// if not tmp then
51396: LD_VAR 0 13
51400: NOT
51401: IFFALSE 51405
// continue ;
51403: GO 51261
// result := true ;
51405: LD_ADDR_VAR 0 8
51409: PUSH
51410: LD_INT 1
51412: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51413: LD_VAR 0 6
51417: PUSH
51418: LD_VAR 0 13
51422: PPUSH
51423: CALL_OW 247
51427: PUSH
51428: LD_INT 2
51430: EQUAL
51431: AND
51432: PUSH
51433: LD_VAR 0 13
51437: PPUSH
51438: CALL_OW 263
51442: PUSH
51443: LD_INT 1
51445: EQUAL
51446: AND
51447: IFFALSE 51611
// begin if IsDrivenBy ( tmp ) then
51449: LD_VAR 0 13
51453: PPUSH
51454: CALL_OW 311
51458: IFFALSE 51462
// continue ;
51460: GO 51261
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51462: LD_VAR 0 6
51466: PPUSH
51467: LD_INT 3
51469: PUSH
51470: LD_INT 60
51472: PUSH
51473: EMPTY
51474: LIST
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 3
51482: PUSH
51483: LD_INT 55
51485: PUSH
51486: EMPTY
51487: LIST
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PPUSH
51497: CALL_OW 72
51501: IFFALSE 51609
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51503: LD_ADDR_VAR 0 18
51507: PUSH
51508: LD_VAR 0 6
51512: PPUSH
51513: LD_INT 3
51515: PUSH
51516: LD_INT 60
51518: PUSH
51519: EMPTY
51520: LIST
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 3
51528: PUSH
51529: LD_INT 55
51531: PUSH
51532: EMPTY
51533: LIST
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PPUSH
51543: CALL_OW 72
51547: PUSH
51548: LD_INT 1
51550: ARRAY
51551: ST_TO_ADDR
// if IsInUnit ( driver ) then
51552: LD_VAR 0 18
51556: PPUSH
51557: CALL_OW 310
51561: IFFALSE 51572
// ComExit ( driver ) ;
51563: LD_VAR 0 18
51567: PPUSH
51568: CALL 76953 0 1
// AddComEnterUnit ( driver , tmp ) ;
51572: LD_VAR 0 18
51576: PPUSH
51577: LD_VAR 0 13
51581: PPUSH
51582: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51586: LD_VAR 0 18
51590: PPUSH
51591: LD_VAR 0 7
51595: PPUSH
51596: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51600: LD_VAR 0 18
51604: PPUSH
51605: CALL_OW 181
// end ; continue ;
51609: GO 51261
// end ; if not cleaners or not tmp in cleaners then
51611: LD_VAR 0 6
51615: NOT
51616: PUSH
51617: LD_VAR 0 13
51621: PUSH
51622: LD_VAR 0 6
51626: IN
51627: NOT
51628: OR
51629: IFFALSE 51936
// begin if dep then
51631: LD_VAR 0 17
51635: IFFALSE 51771
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51637: LD_ADDR_VAR 0 16
51641: PUSH
51642: LD_VAR 0 17
51646: PUSH
51647: LD_INT 1
51649: ARRAY
51650: PPUSH
51651: CALL_OW 250
51655: PPUSH
51656: LD_VAR 0 17
51660: PUSH
51661: LD_INT 1
51663: ARRAY
51664: PPUSH
51665: CALL_OW 254
51669: PPUSH
51670: LD_INT 5
51672: PPUSH
51673: CALL_OW 272
51677: PUSH
51678: LD_VAR 0 17
51682: PUSH
51683: LD_INT 1
51685: ARRAY
51686: PPUSH
51687: CALL_OW 251
51691: PPUSH
51692: LD_VAR 0 17
51696: PUSH
51697: LD_INT 1
51699: ARRAY
51700: PPUSH
51701: CALL_OW 254
51705: PPUSH
51706: LD_INT 5
51708: PPUSH
51709: CALL_OW 273
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51718: LD_VAR 0 16
51722: PUSH
51723: LD_INT 1
51725: ARRAY
51726: PPUSH
51727: LD_VAR 0 16
51731: PUSH
51732: LD_INT 2
51734: ARRAY
51735: PPUSH
51736: CALL_OW 488
51740: IFFALSE 51771
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51742: LD_VAR 0 13
51746: PPUSH
51747: LD_VAR 0 16
51751: PUSH
51752: LD_INT 1
51754: ARRAY
51755: PPUSH
51756: LD_VAR 0 16
51760: PUSH
51761: LD_INT 2
51763: ARRAY
51764: PPUSH
51765: CALL_OW 111
// continue ;
51769: GO 51261
// end ; end ; r := GetDir ( tmp ) ;
51771: LD_ADDR_VAR 0 15
51775: PUSH
51776: LD_VAR 0 13
51780: PPUSH
51781: CALL_OW 254
51785: ST_TO_ADDR
// if r = 5 then
51786: LD_VAR 0 15
51790: PUSH
51791: LD_INT 5
51793: EQUAL
51794: IFFALSE 51804
// r := 0 ;
51796: LD_ADDR_VAR 0 15
51800: PUSH
51801: LD_INT 0
51803: ST_TO_ADDR
// for j = r to 5 do
51804: LD_ADDR_VAR 0 10
51808: PUSH
51809: DOUBLE
51810: LD_VAR 0 15
51814: DEC
51815: ST_TO_ADDR
51816: LD_INT 5
51818: PUSH
51819: FOR_TO
51820: IFFALSE 51934
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51822: LD_ADDR_VAR 0 11
51826: PUSH
51827: LD_VAR 0 13
51831: PPUSH
51832: CALL_OW 250
51836: PPUSH
51837: LD_VAR 0 10
51841: PPUSH
51842: LD_INT 2
51844: PPUSH
51845: CALL_OW 272
51849: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51850: LD_ADDR_VAR 0 12
51854: PUSH
51855: LD_VAR 0 13
51859: PPUSH
51860: CALL_OW 251
51864: PPUSH
51865: LD_VAR 0 10
51869: PPUSH
51870: LD_INT 2
51872: PPUSH
51873: CALL_OW 273
51877: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51878: LD_VAR 0 11
51882: PPUSH
51883: LD_VAR 0 12
51887: PPUSH
51888: CALL_OW 488
51892: PUSH
51893: LD_VAR 0 11
51897: PPUSH
51898: LD_VAR 0 12
51902: PPUSH
51903: CALL_OW 428
51907: NOT
51908: AND
51909: IFFALSE 51932
// begin ComMoveXY ( tmp , _x , _y ) ;
51911: LD_VAR 0 13
51915: PPUSH
51916: LD_VAR 0 11
51920: PPUSH
51921: LD_VAR 0 12
51925: PPUSH
51926: CALL_OW 111
// break ;
51930: GO 51934
// end ; end ;
51932: GO 51819
51934: POP
51935: POP
// end ; end ;
51936: GO 51261
51938: POP
51939: POP
// end ;
51940: LD_VAR 0 8
51944: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51945: LD_INT 0
51947: PPUSH
// result := true ;
51948: LD_ADDR_VAR 0 3
51952: PUSH
51953: LD_INT 1
51955: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51956: LD_VAR 0 2
51960: PUSH
51961: LD_INT 24
51963: DOUBLE
51964: EQUAL
51965: IFTRUE 51975
51967: LD_INT 33
51969: DOUBLE
51970: EQUAL
51971: IFTRUE 51975
51973: GO 52000
51975: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51976: LD_ADDR_VAR 0 3
51980: PUSH
51981: LD_INT 32
51983: PPUSH
51984: LD_VAR 0 1
51988: PPUSH
51989: CALL_OW 321
51993: PUSH
51994: LD_INT 2
51996: EQUAL
51997: ST_TO_ADDR
51998: GO 52316
52000: LD_INT 20
52002: DOUBLE
52003: EQUAL
52004: IFTRUE 52008
52006: GO 52033
52008: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
52009: LD_ADDR_VAR 0 3
52013: PUSH
52014: LD_INT 6
52016: PPUSH
52017: LD_VAR 0 1
52021: PPUSH
52022: CALL_OW 321
52026: PUSH
52027: LD_INT 2
52029: EQUAL
52030: ST_TO_ADDR
52031: GO 52316
52033: LD_INT 22
52035: DOUBLE
52036: EQUAL
52037: IFTRUE 52047
52039: LD_INT 36
52041: DOUBLE
52042: EQUAL
52043: IFTRUE 52047
52045: GO 52072
52047: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
52048: LD_ADDR_VAR 0 3
52052: PUSH
52053: LD_INT 15
52055: PPUSH
52056: LD_VAR 0 1
52060: PPUSH
52061: CALL_OW 321
52065: PUSH
52066: LD_INT 2
52068: EQUAL
52069: ST_TO_ADDR
52070: GO 52316
52072: LD_INT 30
52074: DOUBLE
52075: EQUAL
52076: IFTRUE 52080
52078: GO 52105
52080: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
52081: LD_ADDR_VAR 0 3
52085: PUSH
52086: LD_INT 20
52088: PPUSH
52089: LD_VAR 0 1
52093: PPUSH
52094: CALL_OW 321
52098: PUSH
52099: LD_INT 2
52101: EQUAL
52102: ST_TO_ADDR
52103: GO 52316
52105: LD_INT 28
52107: DOUBLE
52108: EQUAL
52109: IFTRUE 52119
52111: LD_INT 21
52113: DOUBLE
52114: EQUAL
52115: IFTRUE 52119
52117: GO 52144
52119: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52120: LD_ADDR_VAR 0 3
52124: PUSH
52125: LD_INT 21
52127: PPUSH
52128: LD_VAR 0 1
52132: PPUSH
52133: CALL_OW 321
52137: PUSH
52138: LD_INT 2
52140: EQUAL
52141: ST_TO_ADDR
52142: GO 52316
52144: LD_INT 16
52146: DOUBLE
52147: EQUAL
52148: IFTRUE 52152
52150: GO 52177
52152: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52153: LD_ADDR_VAR 0 3
52157: PUSH
52158: LD_INT 84
52160: PPUSH
52161: LD_VAR 0 1
52165: PPUSH
52166: CALL_OW 321
52170: PUSH
52171: LD_INT 2
52173: EQUAL
52174: ST_TO_ADDR
52175: GO 52316
52177: LD_INT 19
52179: DOUBLE
52180: EQUAL
52181: IFTRUE 52191
52183: LD_INT 23
52185: DOUBLE
52186: EQUAL
52187: IFTRUE 52191
52189: GO 52216
52191: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52192: LD_ADDR_VAR 0 3
52196: PUSH
52197: LD_INT 83
52199: PPUSH
52200: LD_VAR 0 1
52204: PPUSH
52205: CALL_OW 321
52209: PUSH
52210: LD_INT 2
52212: EQUAL
52213: ST_TO_ADDR
52214: GO 52316
52216: LD_INT 17
52218: DOUBLE
52219: EQUAL
52220: IFTRUE 52224
52222: GO 52249
52224: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52225: LD_ADDR_VAR 0 3
52229: PUSH
52230: LD_INT 39
52232: PPUSH
52233: LD_VAR 0 1
52237: PPUSH
52238: CALL_OW 321
52242: PUSH
52243: LD_INT 2
52245: EQUAL
52246: ST_TO_ADDR
52247: GO 52316
52249: LD_INT 18
52251: DOUBLE
52252: EQUAL
52253: IFTRUE 52257
52255: GO 52282
52257: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52258: LD_ADDR_VAR 0 3
52262: PUSH
52263: LD_INT 40
52265: PPUSH
52266: LD_VAR 0 1
52270: PPUSH
52271: CALL_OW 321
52275: PUSH
52276: LD_INT 2
52278: EQUAL
52279: ST_TO_ADDR
52280: GO 52316
52282: LD_INT 27
52284: DOUBLE
52285: EQUAL
52286: IFTRUE 52290
52288: GO 52315
52290: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52291: LD_ADDR_VAR 0 3
52295: PUSH
52296: LD_INT 35
52298: PPUSH
52299: LD_VAR 0 1
52303: PPUSH
52304: CALL_OW 321
52308: PUSH
52309: LD_INT 2
52311: EQUAL
52312: ST_TO_ADDR
52313: GO 52316
52315: POP
// end ;
52316: LD_VAR 0 3
52320: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52321: LD_INT 0
52323: PPUSH
52324: PPUSH
52325: PPUSH
52326: PPUSH
52327: PPUSH
52328: PPUSH
52329: PPUSH
52330: PPUSH
52331: PPUSH
52332: PPUSH
52333: PPUSH
// result := false ;
52334: LD_ADDR_VAR 0 6
52338: PUSH
52339: LD_INT 0
52341: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52342: LD_VAR 0 1
52346: NOT
52347: PUSH
52348: LD_VAR 0 1
52352: PPUSH
52353: CALL_OW 266
52357: PUSH
52358: LD_INT 0
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: IN
52368: NOT
52369: OR
52370: PUSH
52371: LD_VAR 0 2
52375: NOT
52376: OR
52377: PUSH
52378: LD_VAR 0 5
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: LD_INT 1
52388: PUSH
52389: LD_INT 2
52391: PUSH
52392: LD_INT 3
52394: PUSH
52395: LD_INT 4
52397: PUSH
52398: LD_INT 5
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: IN
52409: NOT
52410: OR
52411: PUSH
52412: LD_VAR 0 3
52416: PPUSH
52417: LD_VAR 0 4
52421: PPUSH
52422: CALL_OW 488
52426: NOT
52427: OR
52428: IFFALSE 52432
// exit ;
52430: GO 53168
// side := GetSide ( depot ) ;
52432: LD_ADDR_VAR 0 9
52436: PUSH
52437: LD_VAR 0 1
52441: PPUSH
52442: CALL_OW 255
52446: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52447: LD_VAR 0 9
52451: PPUSH
52452: LD_VAR 0 2
52456: PPUSH
52457: CALL 51945 0 2
52461: NOT
52462: IFFALSE 52466
// exit ;
52464: GO 53168
// pom := GetBase ( depot ) ;
52466: LD_ADDR_VAR 0 10
52470: PUSH
52471: LD_VAR 0 1
52475: PPUSH
52476: CALL_OW 274
52480: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52481: LD_ADDR_VAR 0 11
52485: PUSH
52486: LD_VAR 0 2
52490: PPUSH
52491: LD_VAR 0 1
52495: PPUSH
52496: CALL_OW 248
52500: PPUSH
52501: CALL_OW 450
52505: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52506: LD_VAR 0 10
52510: PPUSH
52511: LD_INT 1
52513: PPUSH
52514: CALL_OW 275
52518: PUSH
52519: LD_VAR 0 11
52523: PUSH
52524: LD_INT 1
52526: ARRAY
52527: GREATEREQUAL
52528: PUSH
52529: LD_VAR 0 10
52533: PPUSH
52534: LD_INT 2
52536: PPUSH
52537: CALL_OW 275
52541: PUSH
52542: LD_VAR 0 11
52546: PUSH
52547: LD_INT 2
52549: ARRAY
52550: GREATEREQUAL
52551: AND
52552: PUSH
52553: LD_VAR 0 10
52557: PPUSH
52558: LD_INT 3
52560: PPUSH
52561: CALL_OW 275
52565: PUSH
52566: LD_VAR 0 11
52570: PUSH
52571: LD_INT 3
52573: ARRAY
52574: GREATEREQUAL
52575: AND
52576: NOT
52577: IFFALSE 52581
// exit ;
52579: GO 53168
// if GetBType ( depot ) = b_depot then
52581: LD_VAR 0 1
52585: PPUSH
52586: CALL_OW 266
52590: PUSH
52591: LD_INT 0
52593: EQUAL
52594: IFFALSE 52606
// dist := 28 else
52596: LD_ADDR_VAR 0 14
52600: PUSH
52601: LD_INT 28
52603: ST_TO_ADDR
52604: GO 52614
// dist := 36 ;
52606: LD_ADDR_VAR 0 14
52610: PUSH
52611: LD_INT 36
52613: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52614: LD_VAR 0 1
52618: PPUSH
52619: LD_VAR 0 3
52623: PPUSH
52624: LD_VAR 0 4
52628: PPUSH
52629: CALL_OW 297
52633: PUSH
52634: LD_VAR 0 14
52638: GREATER
52639: IFFALSE 52643
// exit ;
52641: GO 53168
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52643: LD_ADDR_VAR 0 12
52647: PUSH
52648: LD_VAR 0 2
52652: PPUSH
52653: LD_VAR 0 3
52657: PPUSH
52658: LD_VAR 0 4
52662: PPUSH
52663: LD_VAR 0 5
52667: PPUSH
52668: LD_VAR 0 1
52672: PPUSH
52673: CALL_OW 248
52677: PPUSH
52678: LD_INT 0
52680: PPUSH
52681: CALL 53173 0 6
52685: ST_TO_ADDR
// if not hexes then
52686: LD_VAR 0 12
52690: NOT
52691: IFFALSE 52695
// exit ;
52693: GO 53168
// hex := GetHexInfo ( x , y ) ;
52695: LD_ADDR_VAR 0 15
52699: PUSH
52700: LD_VAR 0 3
52704: PPUSH
52705: LD_VAR 0 4
52709: PPUSH
52710: CALL_OW 546
52714: ST_TO_ADDR
// if hex [ 1 ] then
52715: LD_VAR 0 15
52719: PUSH
52720: LD_INT 1
52722: ARRAY
52723: IFFALSE 52727
// exit ;
52725: GO 53168
// height := hex [ 2 ] ;
52727: LD_ADDR_VAR 0 13
52731: PUSH
52732: LD_VAR 0 15
52736: PUSH
52737: LD_INT 2
52739: ARRAY
52740: ST_TO_ADDR
// for i = 1 to hexes do
52741: LD_ADDR_VAR 0 7
52745: PUSH
52746: DOUBLE
52747: LD_INT 1
52749: DEC
52750: ST_TO_ADDR
52751: LD_VAR 0 12
52755: PUSH
52756: FOR_TO
52757: IFFALSE 53087
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52759: LD_VAR 0 12
52763: PUSH
52764: LD_VAR 0 7
52768: ARRAY
52769: PUSH
52770: LD_INT 1
52772: ARRAY
52773: PPUSH
52774: LD_VAR 0 12
52778: PUSH
52779: LD_VAR 0 7
52783: ARRAY
52784: PUSH
52785: LD_INT 2
52787: ARRAY
52788: PPUSH
52789: CALL_OW 488
52793: NOT
52794: PUSH
52795: LD_VAR 0 12
52799: PUSH
52800: LD_VAR 0 7
52804: ARRAY
52805: PUSH
52806: LD_INT 1
52808: ARRAY
52809: PPUSH
52810: LD_VAR 0 12
52814: PUSH
52815: LD_VAR 0 7
52819: ARRAY
52820: PUSH
52821: LD_INT 2
52823: ARRAY
52824: PPUSH
52825: CALL_OW 428
52829: PUSH
52830: LD_INT 0
52832: GREATER
52833: OR
52834: PUSH
52835: LD_VAR 0 12
52839: PUSH
52840: LD_VAR 0 7
52844: ARRAY
52845: PUSH
52846: LD_INT 1
52848: ARRAY
52849: PPUSH
52850: LD_VAR 0 12
52854: PUSH
52855: LD_VAR 0 7
52859: ARRAY
52860: PUSH
52861: LD_INT 2
52863: ARRAY
52864: PPUSH
52865: CALL_OW 351
52869: OR
52870: IFFALSE 52876
// exit ;
52872: POP
52873: POP
52874: GO 53168
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52876: LD_ADDR_VAR 0 8
52880: PUSH
52881: LD_VAR 0 12
52885: PUSH
52886: LD_VAR 0 7
52890: ARRAY
52891: PUSH
52892: LD_INT 1
52894: ARRAY
52895: PPUSH
52896: LD_VAR 0 12
52900: PUSH
52901: LD_VAR 0 7
52905: ARRAY
52906: PUSH
52907: LD_INT 2
52909: ARRAY
52910: PPUSH
52911: CALL_OW 546
52915: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52916: LD_VAR 0 8
52920: PUSH
52921: LD_INT 1
52923: ARRAY
52924: PUSH
52925: LD_VAR 0 8
52929: PUSH
52930: LD_INT 2
52932: ARRAY
52933: PUSH
52934: LD_VAR 0 13
52938: PUSH
52939: LD_INT 2
52941: PLUS
52942: GREATER
52943: OR
52944: PUSH
52945: LD_VAR 0 8
52949: PUSH
52950: LD_INT 2
52952: ARRAY
52953: PUSH
52954: LD_VAR 0 13
52958: PUSH
52959: LD_INT 2
52961: MINUS
52962: LESS
52963: OR
52964: PUSH
52965: LD_VAR 0 8
52969: PUSH
52970: LD_INT 3
52972: ARRAY
52973: PUSH
52974: LD_INT 0
52976: PUSH
52977: LD_INT 8
52979: PUSH
52980: LD_INT 9
52982: PUSH
52983: LD_INT 10
52985: PUSH
52986: LD_INT 11
52988: PUSH
52989: LD_INT 12
52991: PUSH
52992: LD_INT 13
52994: PUSH
52995: LD_INT 16
52997: PUSH
52998: LD_INT 17
53000: PUSH
53001: LD_INT 18
53003: PUSH
53004: LD_INT 19
53006: PUSH
53007: LD_INT 20
53009: PUSH
53010: LD_INT 21
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: IN
53028: NOT
53029: OR
53030: PUSH
53031: LD_VAR 0 8
53035: PUSH
53036: LD_INT 5
53038: ARRAY
53039: NOT
53040: OR
53041: PUSH
53042: LD_VAR 0 8
53046: PUSH
53047: LD_INT 6
53049: ARRAY
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: LD_INT 2
53056: PUSH
53057: LD_INT 7
53059: PUSH
53060: LD_INT 9
53062: PUSH
53063: LD_INT 10
53065: PUSH
53066: LD_INT 11
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: IN
53077: NOT
53078: OR
53079: IFFALSE 53085
// exit ;
53081: POP
53082: POP
53083: GO 53168
// end ;
53085: GO 52756
53087: POP
53088: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
53089: LD_VAR 0 9
53093: PPUSH
53094: LD_VAR 0 3
53098: PPUSH
53099: LD_VAR 0 4
53103: PPUSH
53104: LD_INT 20
53106: PPUSH
53107: CALL 45120 0 4
53111: PUSH
53112: LD_INT 4
53114: ARRAY
53115: IFFALSE 53119
// exit ;
53117: GO 53168
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53119: LD_VAR 0 2
53123: PUSH
53124: LD_INT 29
53126: PUSH
53127: LD_INT 30
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: IN
53134: PUSH
53135: LD_VAR 0 3
53139: PPUSH
53140: LD_VAR 0 4
53144: PPUSH
53145: LD_VAR 0 9
53149: PPUSH
53150: CALL_OW 440
53154: NOT
53155: AND
53156: IFFALSE 53160
// exit ;
53158: GO 53168
// result := true ;
53160: LD_ADDR_VAR 0 6
53164: PUSH
53165: LD_INT 1
53167: ST_TO_ADDR
// end ;
53168: LD_VAR 0 6
53172: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53173: LD_INT 0
53175: PPUSH
53176: PPUSH
53177: PPUSH
53178: PPUSH
53179: PPUSH
53180: PPUSH
53181: PPUSH
53182: PPUSH
53183: PPUSH
53184: PPUSH
53185: PPUSH
53186: PPUSH
53187: PPUSH
53188: PPUSH
53189: PPUSH
53190: PPUSH
53191: PPUSH
53192: PPUSH
53193: PPUSH
53194: PPUSH
53195: PPUSH
53196: PPUSH
53197: PPUSH
53198: PPUSH
53199: PPUSH
53200: PPUSH
53201: PPUSH
53202: PPUSH
53203: PPUSH
53204: PPUSH
53205: PPUSH
53206: PPUSH
53207: PPUSH
53208: PPUSH
53209: PPUSH
53210: PPUSH
53211: PPUSH
53212: PPUSH
53213: PPUSH
53214: PPUSH
53215: PPUSH
53216: PPUSH
53217: PPUSH
53218: PPUSH
53219: PPUSH
53220: PPUSH
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
53225: PPUSH
53226: PPUSH
53227: PPUSH
53228: PPUSH
53229: PPUSH
53230: PPUSH
53231: PPUSH
53232: PPUSH
// result = [ ] ;
53233: LD_ADDR_VAR 0 7
53237: PUSH
53238: EMPTY
53239: ST_TO_ADDR
// temp_list = [ ] ;
53240: LD_ADDR_VAR 0 9
53244: PUSH
53245: EMPTY
53246: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53247: LD_VAR 0 4
53251: PUSH
53252: LD_INT 0
53254: PUSH
53255: LD_INT 1
53257: PUSH
53258: LD_INT 2
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: LD_INT 4
53266: PUSH
53267: LD_INT 5
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: LIST
53274: LIST
53275: LIST
53276: LIST
53277: IN
53278: NOT
53279: PUSH
53280: LD_VAR 0 1
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 1
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: IN
53295: PUSH
53296: LD_VAR 0 5
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: LD_INT 3
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: LIST
53314: IN
53315: NOT
53316: AND
53317: OR
53318: IFFALSE 53322
// exit ;
53320: GO 71713
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53322: LD_VAR 0 1
53326: PUSH
53327: LD_INT 6
53329: PUSH
53330: LD_INT 7
53332: PUSH
53333: LD_INT 8
53335: PUSH
53336: LD_INT 13
53338: PUSH
53339: LD_INT 12
53341: PUSH
53342: LD_INT 15
53344: PUSH
53345: LD_INT 11
53347: PUSH
53348: LD_INT 14
53350: PUSH
53351: LD_INT 10
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: LIST
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: IN
53365: IFFALSE 53375
// btype = b_lab ;
53367: LD_ADDR_VAR 0 1
53371: PUSH
53372: LD_INT 6
53374: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53375: LD_VAR 0 6
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 2
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: LIST
53393: IN
53394: NOT
53395: PUSH
53396: LD_VAR 0 1
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 2
53409: PUSH
53410: LD_INT 3
53412: PUSH
53413: LD_INT 6
53415: PUSH
53416: LD_INT 36
53418: PUSH
53419: LD_INT 4
53421: PUSH
53422: LD_INT 5
53424: PUSH
53425: LD_INT 31
53427: PUSH
53428: LD_INT 32
53430: PUSH
53431: LD_INT 33
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: IN
53447: NOT
53448: PUSH
53449: LD_VAR 0 6
53453: PUSH
53454: LD_INT 1
53456: EQUAL
53457: AND
53458: OR
53459: PUSH
53460: LD_VAR 0 1
53464: PUSH
53465: LD_INT 2
53467: PUSH
53468: LD_INT 3
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: IN
53475: NOT
53476: PUSH
53477: LD_VAR 0 6
53481: PUSH
53482: LD_INT 2
53484: EQUAL
53485: AND
53486: OR
53487: IFFALSE 53497
// mode = 0 ;
53489: LD_ADDR_VAR 0 6
53493: PUSH
53494: LD_INT 0
53496: ST_TO_ADDR
// case mode of 0 :
53497: LD_VAR 0 6
53501: PUSH
53502: LD_INT 0
53504: DOUBLE
53505: EQUAL
53506: IFTRUE 53510
53508: GO 64963
53510: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53511: LD_ADDR_VAR 0 11
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 0
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 0
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: LD_INT 1
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 0
53559: PUSH
53560: LD_INT 1
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 1
53569: NEG
53570: PUSH
53571: LD_INT 0
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 1
53580: NEG
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 1
53592: NEG
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 0
53604: PUSH
53605: LD_INT 2
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 1
53615: PUSH
53616: LD_INT 1
53618: NEG
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 1
53646: NEG
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: LD_INT 3
53660: PUSH
53661: EMPTY
53662: LIST
53663: LIST
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: LD_INT 3
53670: PUSH
53671: EMPTY
53672: LIST
53673: LIST
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53704: LD_ADDR_VAR 0 12
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 1
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 0
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 1
53762: NEG
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 1
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 2
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 1
53816: NEG
53817: PUSH
53818: LD_INT 1
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 2
53827: NEG
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 3
53861: NEG
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 3
53872: NEG
53873: PUSH
53874: LD_INT 1
53876: NEG
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: LIST
53896: LIST
53897: LIST
53898: LIST
53899: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53900: LD_ADDR_VAR 0 13
53904: PUSH
53905: LD_INT 0
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 1
53928: PUSH
53929: LD_INT 0
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: PUSH
53939: LD_INT 1
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: LD_INT 1
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: LD_INT 0
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: NEG
53970: PUSH
53971: LD_INT 1
53973: NEG
53974: PUSH
53975: EMPTY
53976: LIST
53977: LIST
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: LD_INT 2
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 1
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: LD_INT 2
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: LD_INT 2
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 2
54023: NEG
54024: PUSH
54025: LD_INT 1
54027: NEG
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: LD_INT 2
54039: NEG
54040: PUSH
54041: EMPTY
54042: LIST
54043: LIST
54044: PUSH
54045: LD_INT 2
54047: NEG
54048: PUSH
54049: LD_INT 3
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 3
54071: NEG
54072: PUSH
54073: LD_INT 3
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: EMPTY
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54099: LD_ADDR_VAR 0 14
54103: PUSH
54104: LD_INT 0
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 0
54116: PUSH
54117: LD_INT 1
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 1
54127: PUSH
54128: LD_INT 0
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: LD_INT 1
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 1
54157: NEG
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 1
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 0
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 1
54203: PUSH
54204: LD_INT 1
54206: NEG
54207: PUSH
54208: EMPTY
54209: LIST
54210: LIST
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: LD_INT 2
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 0
54224: PUSH
54225: LD_INT 2
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: NEG
54235: PUSH
54236: LD_INT 1
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: LD_INT 3
54249: NEG
54250: PUSH
54251: EMPTY
54252: LIST
54253: LIST
54254: PUSH
54255: LD_INT 0
54257: PUSH
54258: LD_INT 3
54260: NEG
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: LD_INT 2
54271: NEG
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: LIST
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54295: LD_ADDR_VAR 0 15
54299: PUSH
54300: LD_INT 0
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 0
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: LD_INT 0
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: EMPTY
54338: LIST
54339: LIST
54340: PUSH
54341: LD_INT 0
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: NEG
54354: PUSH
54355: LD_INT 0
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 1
54364: NEG
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: EMPTY
54371: LIST
54372: LIST
54373: PUSH
54374: LD_INT 1
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 2
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 2
54418: NEG
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: NEG
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: LD_INT 1
54444: NEG
54445: PUSH
54446: EMPTY
54447: LIST
54448: LIST
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: EMPTY
54457: LIST
54458: LIST
54459: PUSH
54460: LD_INT 3
54462: PUSH
54463: LD_INT 1
54465: PUSH
54466: EMPTY
54467: LIST
54468: LIST
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54488: LD_ADDR_VAR 0 16
54492: PUSH
54493: LD_INT 0
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 0
54519: PUSH
54520: EMPTY
54521: LIST
54522: LIST
54523: PUSH
54524: LD_INT 1
54526: PUSH
54527: LD_INT 1
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 0
54536: PUSH
54537: LD_INT 1
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 1
54546: NEG
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: LD_INT 2
54573: NEG
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 2
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 2
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: LD_INT 3
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 3
54645: PUSH
54646: LD_INT 3
54648: PUSH
54649: EMPTY
54650: LIST
54651: LIST
54652: PUSH
54653: LD_INT 2
54655: PUSH
54656: LD_INT 3
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54681: LD_ADDR_VAR 0 17
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 0
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: LD_INT 1
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: LD_INT 0
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 1
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 1
54762: NEG
54763: PUSH
54764: LD_INT 2
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 0
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: PUSH
54786: LD_INT 1
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: PUSH
54797: LD_INT 0
54799: PUSH
54800: EMPTY
54801: LIST
54802: LIST
54803: PUSH
54804: LD_INT 2
54806: PUSH
54807: LD_INT 1
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 2
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: EMPTY
54821: LIST
54822: LIST
54823: PUSH
54824: LD_INT 1
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: EMPTY
54831: LIST
54832: LIST
54833: PUSH
54834: LD_INT 0
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: PUSH
54844: LD_INT 1
54846: NEG
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 2
54857: NEG
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54911: LD_ADDR_VAR 0 18
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 1
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 2
55046: PUSH
55047: LD_INT 2
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: LD_INT 2
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: LD_INT 2
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 2
55087: NEG
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 2
55098: NEG
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55141: LD_ADDR_VAR 0 19
55145: PUSH
55146: LD_INT 0
55148: PUSH
55149: LD_INT 0
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 0
55158: PUSH
55159: LD_INT 1
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 1
55179: PUSH
55180: LD_INT 1
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: NEG
55200: PUSH
55201: LD_INT 0
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 1
55222: NEG
55223: PUSH
55224: LD_INT 2
55226: NEG
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 2
55237: NEG
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 2
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: LD_INT 2
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: PUSH
55287: LD_INT 2
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 0
55296: PUSH
55297: LD_INT 2
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 1
55306: NEG
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: LD_INT 0
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: LD_INT 2
55344: NEG
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55371: LD_ADDR_VAR 0 20
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 0
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 0
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: PUSH
55407: LD_INT 1
55409: PUSH
55410: LD_INT 1
55412: PUSH
55413: EMPTY
55414: LIST
55415: LIST
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 1
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 1
55429: NEG
55430: PUSH
55431: LD_INT 0
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: LD_INT 1
55444: NEG
55445: PUSH
55446: EMPTY
55447: LIST
55448: LIST
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: LD_INT 2
55456: NEG
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 2
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 1
55475: PUSH
55476: LD_INT 1
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 2
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: LD_INT 2
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 2
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 0
55526: PUSH
55527: LD_INT 2
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: NEG
55548: PUSH
55549: LD_INT 0
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 2
55570: NEG
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55601: LD_ADDR_VAR 0 21
55605: PUSH
55606: LD_INT 0
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 1
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 0
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 1
55659: NEG
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: LD_INT 1
55674: NEG
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 2
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 2
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 1
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 2
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: LD_INT 2
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 2
55800: NEG
55801: PUSH
55802: LD_INT 2
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: LIST
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55831: LD_ADDR_VAR 0 22
55835: PUSH
55836: LD_INT 0
55838: PUSH
55839: LD_INT 0
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: LD_INT 1
55851: NEG
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 1
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: PUSH
55870: LD_INT 1
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 0
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: EMPTY
55884: LIST
55885: LIST
55886: PUSH
55887: LD_INT 1
55889: NEG
55890: PUSH
55891: LD_INT 0
55893: PUSH
55894: EMPTY
55895: LIST
55896: LIST
55897: PUSH
55898: LD_INT 1
55900: NEG
55901: PUSH
55902: LD_INT 1
55904: NEG
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 2
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: EMPTY
55941: LIST
55942: LIST
55943: PUSH
55944: LD_INT 2
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 2
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 1
55976: PUSH
55977: LD_INT 2
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 0
55986: PUSH
55987: LD_INT 2
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: PUSH
55994: LD_INT 1
55996: NEG
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 2
56007: NEG
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 2
56018: NEG
56019: PUSH
56020: LD_INT 1
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 2
56030: NEG
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
56061: LD_ADDR_VAR 0 23
56065: PUSH
56066: LD_INT 0
56068: PUSH
56069: LD_INT 0
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 0
56078: PUSH
56079: LD_INT 1
56081: NEG
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 1
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: LD_INT 1
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: LD_INT 1
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: PUSH
56117: LD_INT 1
56119: NEG
56120: PUSH
56121: LD_INT 0
56123: PUSH
56124: EMPTY
56125: LIST
56126: LIST
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: LD_INT 1
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: LD_INT 2
56146: NEG
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 2
56157: NEG
56158: PUSH
56159: EMPTY
56160: LIST
56161: LIST
56162: PUSH
56163: LD_INT 1
56165: PUSH
56166: LD_INT 1
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 2
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 2
56196: PUSH
56197: LD_INT 2
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 0
56216: PUSH
56217: LD_INT 2
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: LD_INT 2
56237: NEG
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 2
56248: NEG
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: LD_INT 2
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: LD_INT 3
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 1
56284: NEG
56285: PUSH
56286: LD_INT 3
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 1
56296: PUSH
56297: LD_INT 2
56299: NEG
56300: PUSH
56301: EMPTY
56302: LIST
56303: LIST
56304: PUSH
56305: LD_INT 2
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: PUSH
56316: EMPTY
56317: LIST
56318: LIST
56319: LIST
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: LIST
56340: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56341: LD_ADDR_VAR 0 24
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: LD_INT 0
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: LD_INT 1
56361: NEG
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 1
56379: PUSH
56380: LD_INT 1
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 1
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 1
56410: NEG
56411: PUSH
56412: LD_INT 1
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: NEG
56423: PUSH
56424: LD_INT 2
56426: NEG
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 2
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: LD_INT 0
56459: PUSH
56460: EMPTY
56461: LIST
56462: LIST
56463: PUSH
56464: LD_INT 2
56466: PUSH
56467: LD_INT 1
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 2
56476: PUSH
56477: LD_INT 2
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: LD_INT 2
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 2
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 1
56506: NEG
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 2
56517: NEG
56518: PUSH
56519: LD_INT 0
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 2
56528: NEG
56529: PUSH
56530: LD_INT 1
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 2
56540: NEG
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: PUSH
56553: LD_INT 2
56555: NEG
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 2
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 3
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 3
56584: PUSH
56585: LD_INT 2
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56617: LD_ADDR_VAR 0 25
56621: PUSH
56622: LD_INT 0
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 0
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 1
56645: PUSH
56646: LD_INT 0
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 0
56665: PUSH
56666: LD_INT 1
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: NEG
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: LD_INT 1
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: LD_INT 2
56713: NEG
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: LD_INT 1
56724: NEG
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 2
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: LD_INT 1
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 1
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: NEG
56783: PUSH
56784: LD_INT 1
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 2
56793: NEG
56794: PUSH
56795: LD_INT 0
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: NEG
56805: PUSH
56806: LD_INT 1
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: LD_INT 2
56816: NEG
56817: PUSH
56818: LD_INT 2
56820: NEG
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 3
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 3
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 2
56848: PUSH
56849: LD_INT 3
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 1
56858: PUSH
56859: LD_INT 3
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56891: LD_ADDR_VAR 0 26
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: LD_INT 0
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 0
56908: PUSH
56909: LD_INT 1
56911: NEG
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: PUSH
56917: LD_INT 1
56919: PUSH
56920: LD_INT 0
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 0
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: NEG
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 1
56960: NEG
56961: PUSH
56962: LD_INT 1
56964: NEG
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 1
56972: NEG
56973: PUSH
56974: LD_INT 2
56976: NEG
56977: PUSH
56978: EMPTY
56979: LIST
56980: LIST
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: LD_INT 2
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: LD_INT 1
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: LD_INT 0
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: PUSH
57017: LD_INT 1
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: PUSH
57024: LD_INT 2
57026: PUSH
57027: LD_INT 2
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: LD_INT 2
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: LD_INT 0
57046: PUSH
57047: LD_INT 2
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: LD_INT 1
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 2
57067: NEG
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: LD_INT 2
57078: NEG
57079: PUSH
57080: LD_INT 1
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 2
57090: NEG
57091: PUSH
57092: LD_INT 2
57094: NEG
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 2
57102: PUSH
57103: LD_INT 3
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: PUSH
57110: LD_INT 1
57112: PUSH
57113: LD_INT 3
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 1
57122: NEG
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: LIST
57164: LIST
57165: LIST
57166: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57167: LD_ADDR_VAR 0 27
57171: PUSH
57172: LD_INT 0
57174: PUSH
57175: LD_INT 0
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: PUSH
57182: LD_INT 0
57184: PUSH
57185: LD_INT 1
57187: NEG
57188: PUSH
57189: EMPTY
57190: LIST
57191: LIST
57192: PUSH
57193: LD_INT 1
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: PUSH
57203: LD_INT 1
57205: PUSH
57206: LD_INT 1
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: LD_INT 1
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 1
57225: NEG
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: LD_INT 1
57240: NEG
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: PUSH
57246: LD_INT 1
57248: NEG
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 0
57260: PUSH
57261: LD_INT 2
57263: NEG
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 2
57292: PUSH
57293: LD_INT 1
57295: PUSH
57296: EMPTY
57297: LIST
57298: LIST
57299: PUSH
57300: LD_INT 2
57302: PUSH
57303: LD_INT 2
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 2
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: LD_INT 0
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 2
57354: NEG
57355: PUSH
57356: LD_INT 1
57358: NEG
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: PUSH
57364: LD_INT 2
57366: NEG
57367: PUSH
57368: LD_INT 2
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: LD_INT 2
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: LD_INT 1
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 3
57400: NEG
57401: PUSH
57402: LD_INT 1
57404: NEG
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 3
57412: NEG
57413: PUSH
57414: LD_INT 2
57416: NEG
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57447: LD_ADDR_VAR 0 28
57451: PUSH
57452: LD_INT 0
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 0
57464: PUSH
57465: LD_INT 1
57467: NEG
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: LD_INT 0
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: LD_INT 1
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: LD_INT 0
57509: PUSH
57510: EMPTY
57511: LIST
57512: LIST
57513: PUSH
57514: LD_INT 1
57516: NEG
57517: PUSH
57518: LD_INT 1
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 2
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 0
57540: PUSH
57541: LD_INT 2
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: PUSH
57552: LD_INT 1
57554: NEG
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 2
57562: PUSH
57563: LD_INT 0
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 2
57572: PUSH
57573: LD_INT 1
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 2
57582: PUSH
57583: LD_INT 2
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 1
57592: PUSH
57593: LD_INT 2
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 0
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: LD_INT 1
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 2
57623: NEG
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 2
57634: NEG
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: EMPTY
57641: LIST
57642: LIST
57643: PUSH
57644: LD_INT 2
57646: NEG
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: LD_INT 3
57662: NEG
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 1
57670: NEG
57671: PUSH
57672: LD_INT 3
57674: NEG
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 3
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 3
57694: NEG
57695: PUSH
57696: LD_INT 2
57698: NEG
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: LIST
57723: LIST
57724: LIST
57725: LIST
57726: LIST
57727: LIST
57728: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57729: LD_ADDR_VAR 0 29
57733: PUSH
57734: LD_INT 0
57736: PUSH
57737: LD_INT 0
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 1
57757: PUSH
57758: LD_INT 0
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 1
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 0
57777: PUSH
57778: LD_INT 1
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: LD_INT 0
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: LD_INT 1
57802: NEG
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: NEG
57811: PUSH
57812: LD_INT 2
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 0
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: LD_INT 0
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 2
57854: PUSH
57855: LD_INT 1
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 1
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 0
57874: PUSH
57875: LD_INT 2
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 1
57884: NEG
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 2
57895: NEG
57896: PUSH
57897: LD_INT 1
57899: NEG
57900: PUSH
57901: EMPTY
57902: LIST
57903: LIST
57904: PUSH
57905: LD_INT 2
57907: NEG
57908: PUSH
57909: LD_INT 2
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 2
57919: NEG
57920: PUSH
57921: LD_INT 3
57923: NEG
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 2
57931: PUSH
57932: LD_INT 1
57934: NEG
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: LD_INT 1
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: LD_INT 3
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 2
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 3
57973: NEG
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: EMPTY
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58008: LD_ADDR_VAR 0 30
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: LD_INT 0
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: PUSH
58023: LD_INT 0
58025: PUSH
58026: LD_INT 1
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: LD_INT 0
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 1
58046: PUSH
58047: LD_INT 1
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 0
58056: PUSH
58057: LD_INT 1
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: NEG
58067: PUSH
58068: LD_INT 0
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: NEG
58078: PUSH
58079: LD_INT 1
58081: NEG
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 1
58089: NEG
58090: PUSH
58091: LD_INT 2
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 0
58101: PUSH
58102: LD_INT 2
58104: NEG
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PUSH
58110: LD_INT 1
58112: PUSH
58113: LD_INT 1
58115: NEG
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: LD_INT 1
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 2
58143: PUSH
58144: LD_INT 2
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 1
58153: PUSH
58154: LD_INT 2
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 1
58163: NEG
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 2
58174: NEG
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 2
58185: NEG
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: LD_INT 1
58197: NEG
58198: PUSH
58199: LD_INT 3
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 1
58209: PUSH
58210: LD_INT 2
58212: NEG
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: PUSH
58221: LD_INT 2
58223: PUSH
58224: EMPTY
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 2
58230: PUSH
58231: LD_INT 3
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 2
58240: NEG
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 3
58251: NEG
58252: PUSH
58253: LD_INT 1
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58286: LD_ADDR_VAR 0 31
58290: PUSH
58291: LD_INT 0
58293: PUSH
58294: LD_INT 0
58296: PUSH
58297: EMPTY
58298: LIST
58299: LIST
58300: PUSH
58301: LD_INT 0
58303: PUSH
58304: LD_INT 1
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: LD_INT 0
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 1
58324: PUSH
58325: LD_INT 1
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 1
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: NEG
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: LD_INT 2
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: LD_INT 1
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 2
58390: PUSH
58391: LD_INT 0
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 2
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 2
58410: PUSH
58411: LD_INT 2
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: LD_INT 2
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: LD_INT 1
58440: NEG
58441: PUSH
58442: LD_INT 1
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 2
58451: NEG
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: EMPTY
58458: LIST
58459: LIST
58460: PUSH
58461: LD_INT 2
58463: NEG
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 2
58475: NEG
58476: PUSH
58477: LD_INT 3
58479: NEG
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: LD_INT 1
58490: NEG
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 3
58511: PUSH
58512: EMPTY
58513: LIST
58514: LIST
58515: PUSH
58516: LD_INT 1
58518: NEG
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 3
58529: NEG
58530: PUSH
58531: LD_INT 2
58533: NEG
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58564: LD_ADDR_VAR 0 32
58568: PUSH
58569: LD_INT 0
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 0
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: PUSH
58593: LD_INT 0
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: LD_INT 1
58602: PUSH
58603: LD_INT 1
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: LD_INT 1
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 1
58622: NEG
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: LD_INT 1
58637: NEG
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 1
58645: NEG
58646: PUSH
58647: LD_INT 2
58649: NEG
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: LD_INT 1
58671: NEG
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 2
58689: PUSH
58690: LD_INT 2
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 0
58709: PUSH
58710: LD_INT 2
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: LD_INT 1
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: LD_INT 2
58730: NEG
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 1
58753: NEG
58754: PUSH
58755: LD_INT 3
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 1
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: LD_INT 3
58776: PUSH
58777: LD_INT 2
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 2
58786: PUSH
58787: LD_INT 3
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 3
58807: NEG
58808: PUSH
58809: LD_INT 1
58811: NEG
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58842: LD_ADDR_VAR 0 33
58846: PUSH
58847: LD_INT 0
58849: PUSH
58850: LD_INT 0
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 1
58862: NEG
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 1
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: PUSH
58881: LD_INT 1
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: LD_INT 1
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 1
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: EMPTY
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 1
58923: NEG
58924: PUSH
58925: LD_INT 2
58927: NEG
58928: PUSH
58929: EMPTY
58930: LIST
58931: LIST
58932: PUSH
58933: LD_INT 1
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 0
58976: PUSH
58977: LD_INT 2
58979: PUSH
58980: EMPTY
58981: LIST
58982: LIST
58983: PUSH
58984: LD_INT 1
58986: NEG
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 2
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 2
59020: NEG
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 2
59032: NEG
59033: PUSH
59034: LD_INT 3
59036: NEG
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: LD_INT 2
59044: PUSH
59045: LD_INT 1
59047: NEG
59048: PUSH
59049: EMPTY
59050: LIST
59051: LIST
59052: PUSH
59053: LD_INT 3
59055: PUSH
59056: LD_INT 1
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: LD_INT 1
59065: PUSH
59066: LD_INT 3
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: LD_INT 2
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: LD_INT 2
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59121: LD_ADDR_VAR 0 34
59125: PUSH
59126: LD_INT 0
59128: PUSH
59129: LD_INT 0
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 0
59138: PUSH
59139: LD_INT 1
59141: NEG
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: PUSH
59147: LD_INT 1
59149: PUSH
59150: LD_INT 0
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 1
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: LD_INT 0
59169: PUSH
59170: LD_INT 1
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: LD_INT 0
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 1
59190: NEG
59191: PUSH
59192: LD_INT 1
59194: NEG
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 1
59202: NEG
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 0
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 1
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 2
59236: PUSH
59237: LD_INT 1
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: LD_INT 2
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 1
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: NEG
59267: PUSH
59268: LD_INT 1
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 2
59277: NEG
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 2
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: NEG
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 2
59300: NEG
59301: PUSH
59302: LD_INT 2
59304: NEG
59305: PUSH
59306: EMPTY
59307: LIST
59308: LIST
59309: PUSH
59310: LD_INT 1
59312: NEG
59313: PUSH
59314: LD_INT 3
59316: NEG
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: LD_INT 2
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 3
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: PUSH
59346: LD_INT 3
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 2
59355: NEG
59356: PUSH
59357: LD_INT 1
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59401: LD_ADDR_VAR 0 35
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 0
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 1
59429: PUSH
59430: LD_INT 0
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 1
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 0
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 0
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: LD_INT 1
59474: NEG
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: PUSH
59480: LD_INT 2
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 2
59492: NEG
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: LIST
59506: LIST
59507: LIST
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59513: LD_ADDR_VAR 0 36
59517: PUSH
59518: LD_INT 0
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 1
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: LD_INT 1
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 0
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: EMPTY
59566: LIST
59567: LIST
59568: PUSH
59569: LD_INT 1
59571: NEG
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 1
59582: NEG
59583: PUSH
59584: LD_INT 1
59586: NEG
59587: PUSH
59588: EMPTY
59589: LIST
59590: LIST
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: PUSH
59607: LD_INT 2
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59625: LD_ADDR_VAR 0 37
59629: PUSH
59630: LD_INT 0
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 0
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 1
59653: PUSH
59654: LD_INT 0
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 0
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 1
59683: NEG
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 1
59694: NEG
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: LD_INT 1
59709: NEG
59710: PUSH
59711: EMPTY
59712: LIST
59713: LIST
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: LD_INT 1
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59737: LD_ADDR_VAR 0 38
59741: PUSH
59742: LD_INT 0
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: LD_INT 1
59757: NEG
59758: PUSH
59759: EMPTY
59760: LIST
59761: LIST
59762: PUSH
59763: LD_INT 1
59765: PUSH
59766: LD_INT 0
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 0
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: NEG
59796: PUSH
59797: LD_INT 0
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: PUSH
59804: LD_INT 1
59806: NEG
59807: PUSH
59808: LD_INT 1
59810: NEG
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59849: LD_ADDR_VAR 0 39
59853: PUSH
59854: LD_INT 0
59856: PUSH
59857: LD_INT 0
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: LD_INT 1
59869: NEG
59870: PUSH
59871: EMPTY
59872: LIST
59873: LIST
59874: PUSH
59875: LD_INT 1
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 1
59907: NEG
59908: PUSH
59909: LD_INT 0
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 1
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 2
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59961: LD_ADDR_VAR 0 40
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: LD_INT 0
59978: PUSH
59979: LD_INT 1
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 1
59989: PUSH
59990: LD_INT 0
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PUSH
59997: LD_INT 1
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: EMPTY
60004: LIST
60005: LIST
60006: PUSH
60007: LD_INT 0
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: LD_INT 0
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: PUSH
60028: LD_INT 1
60030: NEG
60031: PUSH
60032: LD_INT 1
60034: NEG
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: LD_INT 1
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: EMPTY
60048: LIST
60049: LIST
60050: PUSH
60051: LD_INT 1
60053: NEG
60054: PUSH
60055: LD_INT 1
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: LIST
60070: LIST
60071: LIST
60072: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60073: LD_ADDR_VAR 0 41
60077: PUSH
60078: LD_INT 0
60080: PUSH
60081: LD_INT 0
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: LD_INT 1
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: LD_INT 0
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: LD_INT 1
60114: PUSH
60115: EMPTY
60116: LIST
60117: LIST
60118: PUSH
60119: LD_INT 0
60121: PUSH
60122: LD_INT 1
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PUSH
60129: LD_INT 1
60131: NEG
60132: PUSH
60133: LD_INT 0
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: LD_INT 1
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: LD_INT 2
60158: NEG
60159: PUSH
60160: EMPTY
60161: LIST
60162: LIST
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 2
60177: PUSH
60178: LD_INT 0
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: LD_INT 1
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: LD_INT 2
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 1
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 1
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 2
60228: NEG
60229: PUSH
60230: LD_INT 0
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: NEG
60240: PUSH
60241: LD_INT 1
60243: NEG
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: PUSH
60249: LD_INT 2
60251: NEG
60252: PUSH
60253: LD_INT 2
60255: NEG
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PUSH
60261: LD_INT 2
60263: NEG
60264: PUSH
60265: LD_INT 3
60267: NEG
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 2
60275: PUSH
60276: LD_INT 1
60278: NEG
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: PUSH
60284: LD_INT 3
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 3
60296: PUSH
60297: LD_INT 1
60299: PUSH
60300: EMPTY
60301: LIST
60302: LIST
60303: PUSH
60304: LD_INT 3
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 3
60316: PUSH
60317: LD_INT 3
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 2
60326: PUSH
60327: LD_INT 3
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 2
60336: NEG
60337: PUSH
60338: LD_INT 1
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 3
60347: NEG
60348: PUSH
60349: LD_INT 0
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 3
60358: NEG
60359: PUSH
60360: LD_INT 1
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 3
60370: NEG
60371: PUSH
60372: LD_INT 2
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 3
60382: NEG
60383: PUSH
60384: LD_INT 3
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: LIST
60407: LIST
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: LIST
60414: LIST
60415: LIST
60416: LIST
60417: LIST
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60423: LD_ADDR_VAR 0 42
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: LD_INT 0
60433: PUSH
60434: EMPTY
60435: LIST
60436: LIST
60437: PUSH
60438: LD_INT 0
60440: PUSH
60441: LD_INT 1
60443: NEG
60444: PUSH
60445: EMPTY
60446: LIST
60447: LIST
60448: PUSH
60449: LD_INT 1
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 1
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: LD_INT 0
60471: PUSH
60472: LD_INT 1
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: LD_INT 0
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: NEG
60493: PUSH
60494: LD_INT 1
60496: NEG
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 1
60504: NEG
60505: PUSH
60506: LD_INT 2
60508: NEG
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: LD_INT 2
60519: NEG
60520: PUSH
60521: EMPTY
60522: LIST
60523: LIST
60524: PUSH
60525: LD_INT 1
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 2
60538: PUSH
60539: LD_INT 1
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 2
60548: PUSH
60549: LD_INT 2
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: LD_INT 2
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_INT 2
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 2
60589: NEG
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 2
60601: NEG
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 2
60613: NEG
60614: PUSH
60615: LD_INT 3
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: EMPTY
60632: LIST
60633: LIST
60634: PUSH
60635: LD_INT 0
60637: PUSH
60638: LD_INT 3
60640: NEG
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: PUSH
60646: LD_INT 1
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 3
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 3
60669: PUSH
60670: LD_INT 3
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: LD_INT 3
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 1
60689: PUSH
60690: LD_INT 3
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: LD_INT 3
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: LD_INT 3
60720: NEG
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 3
60732: NEG
60733: PUSH
60734: LD_INT 3
60736: NEG
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: LIST
60746: LIST
60747: LIST
60748: LIST
60749: LIST
60750: LIST
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: LIST
60770: LIST
60771: LIST
60772: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60773: LD_ADDR_VAR 0 43
60777: PUSH
60778: LD_INT 0
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: LD_INT 1
60793: NEG
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 1
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: PUSH
60812: LD_INT 1
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: LD_INT 1
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 1
60831: NEG
60832: PUSH
60833: LD_INT 0
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: PUSH
60840: LD_INT 1
60842: NEG
60843: PUSH
60844: LD_INT 1
60846: NEG
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 1
60854: NEG
60855: PUSH
60856: LD_INT 2
60858: NEG
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 0
60866: PUSH
60867: LD_INT 2
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 1
60877: PUSH
60878: LD_INT 1
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 2
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 2
60898: PUSH
60899: LD_INT 1
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: LD_INT 2
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 0
60918: PUSH
60919: LD_INT 2
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: NEG
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 2
60939: NEG
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: LD_INT 1
60954: NEG
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 1
60962: NEG
60963: PUSH
60964: LD_INT 3
60966: NEG
60967: PUSH
60968: EMPTY
60969: LIST
60970: LIST
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: LD_INT 3
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 1
60985: PUSH
60986: LD_INT 2
60988: NEG
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: LD_INT 1
60999: NEG
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 3
61007: PUSH
61008: LD_INT 0
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 3
61017: PUSH
61018: LD_INT 1
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: LD_INT 3
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: LD_INT 3
61040: PUSH
61041: EMPTY
61042: LIST
61043: LIST
61044: PUSH
61045: LD_INT 1
61047: NEG
61048: PUSH
61049: LD_INT 2
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 2
61058: NEG
61059: PUSH
61060: LD_INT 1
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 3
61069: NEG
61070: PUSH
61071: LD_INT 0
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: LD_INT 1
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: EMPTY
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: LIST
61120: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61121: LD_ADDR_VAR 0 44
61125: PUSH
61126: LD_INT 0
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 1
61141: NEG
61142: PUSH
61143: EMPTY
61144: LIST
61145: LIST
61146: PUSH
61147: LD_INT 1
61149: PUSH
61150: LD_INT 0
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 1
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: PUSH
61167: LD_INT 0
61169: PUSH
61170: LD_INT 1
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 1
61179: NEG
61180: PUSH
61181: LD_INT 0
61183: PUSH
61184: EMPTY
61185: LIST
61186: LIST
61187: PUSH
61188: LD_INT 1
61190: NEG
61191: PUSH
61192: LD_INT 1
61194: NEG
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 1
61202: NEG
61203: PUSH
61204: LD_INT 2
61206: NEG
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: PUSH
61212: LD_INT 1
61214: PUSH
61215: LD_INT 1
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 2
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 2
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 2
61245: PUSH
61246: LD_INT 2
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 1
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 1
61265: NEG
61266: PUSH
61267: LD_INT 1
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 2
61276: NEG
61277: PUSH
61278: LD_INT 0
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: LD_INT 1
61291: NEG
61292: PUSH
61293: EMPTY
61294: LIST
61295: LIST
61296: PUSH
61297: LD_INT 2
61299: NEG
61300: PUSH
61301: LD_INT 2
61303: NEG
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 2
61311: NEG
61312: PUSH
61313: LD_INT 3
61315: NEG
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 2
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: LD_INT 3
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 3
61344: PUSH
61345: LD_INT 1
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 3
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 3
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 2
61374: PUSH
61375: LD_INT 3
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 2
61384: NEG
61385: PUSH
61386: LD_INT 1
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 3
61395: NEG
61396: PUSH
61397: LD_INT 0
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 3
61406: NEG
61407: PUSH
61408: LD_INT 1
61410: NEG
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: LD_INT 3
61418: NEG
61419: PUSH
61420: LD_INT 2
61422: NEG
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 3
61430: NEG
61431: PUSH
61432: LD_INT 3
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: LIST
61444: LIST
61445: LIST
61446: LIST
61447: LIST
61448: LIST
61449: LIST
61450: LIST
61451: LIST
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: LIST
61457: LIST
61458: LIST
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61471: LD_ADDR_VAR 0 45
61475: PUSH
61476: LD_INT 0
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: LD_INT 1
61491: NEG
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 1
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 1
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: LD_INT 0
61519: PUSH
61520: LD_INT 1
61522: PUSH
61523: EMPTY
61524: LIST
61525: LIST
61526: PUSH
61527: LD_INT 1
61529: NEG
61530: PUSH
61531: LD_INT 0
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: LD_INT 1
61544: NEG
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: LD_INT 2
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 0
61564: PUSH
61565: LD_INT 2
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: LD_INT 1
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: LD_INT 1
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 1
61606: PUSH
61607: LD_INT 2
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 2
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: PUSH
61624: LD_INT 1
61626: NEG
61627: PUSH
61628: LD_INT 1
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 2
61637: NEG
61638: PUSH
61639: LD_INT 1
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 2
61649: NEG
61650: PUSH
61651: LD_INT 2
61653: NEG
61654: PUSH
61655: EMPTY
61656: LIST
61657: LIST
61658: PUSH
61659: LD_INT 2
61661: NEG
61662: PUSH
61663: LD_INT 3
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: NEG
61674: PUSH
61675: LD_INT 3
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: LD_INT 3
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: LD_INT 2
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 3
61717: PUSH
61718: LD_INT 3
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 2
61727: PUSH
61728: LD_INT 3
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 1
61737: PUSH
61738: LD_INT 3
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: LD_INT 3
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: LD_INT 2
61761: PUSH
61762: EMPTY
61763: LIST
61764: LIST
61765: PUSH
61766: LD_INT 3
61768: NEG
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 3
61780: NEG
61781: PUSH
61782: LD_INT 3
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: LIST
61805: LIST
61806: LIST
61807: LIST
61808: LIST
61809: LIST
61810: LIST
61811: LIST
61812: LIST
61813: LIST
61814: LIST
61815: LIST
61816: LIST
61817: LIST
61818: LIST
61819: LIST
61820: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61821: LD_ADDR_VAR 0 46
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: EMPTY
61833: LIST
61834: LIST
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 1
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 1
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 0
61869: PUSH
61870: LD_INT 1
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 1
61879: NEG
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 1
61890: NEG
61891: PUSH
61892: LD_INT 1
61894: NEG
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 1
61902: NEG
61903: PUSH
61904: LD_INT 2
61906: NEG
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 0
61914: PUSH
61915: LD_INT 2
61917: NEG
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 1
61925: PUSH
61926: LD_INT 1
61928: NEG
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 2
61936: PUSH
61937: LD_INT 0
61939: PUSH
61940: EMPTY
61941: LIST
61942: LIST
61943: PUSH
61944: LD_INT 2
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 1
61956: PUSH
61957: LD_INT 2
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: NEG
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 2
61987: NEG
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 2
61998: NEG
61999: PUSH
62000: LD_INT 1
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: NEG
62011: PUSH
62012: LD_INT 3
62014: NEG
62015: PUSH
62016: EMPTY
62017: LIST
62018: LIST
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: LD_INT 3
62025: NEG
62026: PUSH
62027: EMPTY
62028: LIST
62029: LIST
62030: PUSH
62031: LD_INT 1
62033: PUSH
62034: LD_INT 2
62036: NEG
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: LD_INT 1
62047: NEG
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 3
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 3
62065: PUSH
62066: LD_INT 1
62068: PUSH
62069: EMPTY
62070: LIST
62071: LIST
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: LD_INT 3
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: LD_INT 3
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: NEG
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 2
62106: NEG
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 3
62117: NEG
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 3
62128: NEG
62129: PUSH
62130: LD_INT 1
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: LIST
62142: LIST
62143: LIST
62144: LIST
62145: LIST
62146: LIST
62147: LIST
62148: LIST
62149: LIST
62150: LIST
62151: LIST
62152: LIST
62153: LIST
62154: LIST
62155: LIST
62156: LIST
62157: LIST
62158: LIST
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62169: LD_ADDR_VAR 0 47
62173: PUSH
62174: LD_INT 0
62176: PUSH
62177: LD_INT 0
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 0
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 1
62197: PUSH
62198: LD_INT 0
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: PUSH
62208: LD_INT 1
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 0
62217: PUSH
62218: LD_INT 1
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 1
62227: NEG
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 1
62238: NEG
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: LD_INT 2
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 2
62284: NEG
62285: PUSH
62286: LD_INT 1
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 2
62296: NEG
62297: PUSH
62298: LD_INT 2
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62320: LD_ADDR_VAR 0 48
62324: PUSH
62325: LD_INT 0
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 0
62337: PUSH
62338: LD_INT 1
62340: NEG
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: LD_INT 0
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: LD_INT 1
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: LD_INT 1
62371: PUSH
62372: EMPTY
62373: LIST
62374: LIST
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 1
62389: NEG
62390: PUSH
62391: LD_INT 1
62393: NEG
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 1
62401: NEG
62402: PUSH
62403: LD_INT 2
62405: NEG
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 0
62413: PUSH
62414: LD_INT 2
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: PUSH
62425: LD_INT 1
62427: NEG
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 2
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: LD_INT 2
62445: PUSH
62446: LD_INT 1
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62467: LD_ADDR_VAR 0 49
62471: PUSH
62472: LD_INT 0
62474: PUSH
62475: LD_INT 0
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: LD_INT 1
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 1
62495: PUSH
62496: LD_INT 0
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PUSH
62503: LD_INT 1
62505: PUSH
62506: LD_INT 1
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 1
62525: NEG
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: NEG
62537: PUSH
62538: LD_INT 1
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 1
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 2
62559: PUSH
62560: LD_INT 0
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 2
62569: PUSH
62570: LD_INT 1
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: PUSH
62580: LD_INT 2
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: LD_INT 2
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62611: LD_ADDR_VAR 0 50
62615: PUSH
62616: LD_INT 0
62618: PUSH
62619: LD_INT 0
62621: PUSH
62622: EMPTY
62623: LIST
62624: LIST
62625: PUSH
62626: LD_INT 0
62628: PUSH
62629: LD_INT 1
62631: NEG
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: LD_INT 0
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 1
62649: PUSH
62650: LD_INT 1
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_INT 1
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: LD_INT 1
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 2
62692: PUSH
62693: LD_INT 1
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 2
62702: PUSH
62703: LD_INT 2
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: LD_INT 2
62715: PUSH
62716: EMPTY
62717: LIST
62718: LIST
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: LD_INT 2
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 1
62732: NEG
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62755: LD_ADDR_VAR 0 51
62759: PUSH
62760: LD_INT 0
62762: PUSH
62763: LD_INT 0
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: LD_INT 1
62775: NEG
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 1
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 1
62793: PUSH
62794: LD_INT 1
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 1
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: LD_INT 0
62817: PUSH
62818: EMPTY
62819: LIST
62820: LIST
62821: PUSH
62822: LD_INT 1
62824: NEG
62825: PUSH
62826: LD_INT 1
62828: NEG
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: PUSH
62834: LD_INT 1
62836: PUSH
62837: LD_INT 2
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 0
62846: PUSH
62847: LD_INT 2
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PUSH
62854: LD_INT 1
62856: NEG
62857: PUSH
62858: LD_INT 1
62860: PUSH
62861: EMPTY
62862: LIST
62863: LIST
62864: PUSH
62865: LD_INT 2
62867: NEG
62868: PUSH
62869: LD_INT 0
62871: PUSH
62872: EMPTY
62873: LIST
62874: LIST
62875: PUSH
62876: LD_INT 2
62878: NEG
62879: PUSH
62880: LD_INT 1
62882: NEG
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62902: LD_ADDR_VAR 0 52
62906: PUSH
62907: LD_INT 0
62909: PUSH
62910: LD_INT 0
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: LD_INT 0
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 1
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 0
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 1
62960: NEG
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: NEG
62972: PUSH
62973: LD_INT 1
62975: NEG
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: NEG
62984: PUSH
62985: LD_INT 2
62987: NEG
62988: PUSH
62989: EMPTY
62990: LIST
62991: LIST
62992: PUSH
62993: LD_INT 1
62995: NEG
62996: PUSH
62997: LD_INT 1
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 2
63006: NEG
63007: PUSH
63008: LD_INT 0
63010: PUSH
63011: EMPTY
63012: LIST
63013: LIST
63014: PUSH
63015: LD_INT 2
63017: NEG
63018: PUSH
63019: LD_INT 1
63021: NEG
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 2
63029: NEG
63030: PUSH
63031: LD_INT 2
63033: NEG
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63053: LD_ADDR_VAR 0 53
63057: PUSH
63058: LD_INT 0
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: LD_INT 1
63073: NEG
63074: PUSH
63075: EMPTY
63076: LIST
63077: LIST
63078: PUSH
63079: LD_INT 1
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 1
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: LD_INT 1
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 0
63115: PUSH
63116: EMPTY
63117: LIST
63118: LIST
63119: PUSH
63120: LD_INT 1
63122: NEG
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: NEG
63135: PUSH
63136: LD_INT 2
63138: NEG
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 0
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 1
63157: PUSH
63158: LD_INT 1
63160: NEG
63161: PUSH
63162: EMPTY
63163: LIST
63164: LIST
63165: PUSH
63166: LD_INT 2
63168: PUSH
63169: LD_INT 0
63171: PUSH
63172: EMPTY
63173: LIST
63174: LIST
63175: PUSH
63176: LD_INT 2
63178: PUSH
63179: LD_INT 1
63181: PUSH
63182: EMPTY
63183: LIST
63184: LIST
63185: PUSH
63186: LD_INT 2
63188: PUSH
63189: LD_INT 2
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: EMPTY
63203: LIST
63204: LIST
63205: PUSH
63206: LD_INT 0
63208: PUSH
63209: LD_INT 2
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: EMPTY
63224: LIST
63225: LIST
63226: PUSH
63227: LD_INT 2
63229: NEG
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 2
63240: NEG
63241: PUSH
63242: LD_INT 1
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 2
63252: NEG
63253: PUSH
63254: LD_INT 2
63256: NEG
63257: PUSH
63258: EMPTY
63259: LIST
63260: LIST
63261: PUSH
63262: EMPTY
63263: LIST
63264: LIST
63265: LIST
63266: LIST
63267: LIST
63268: LIST
63269: LIST
63270: LIST
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: LIST
63276: LIST
63277: LIST
63278: LIST
63279: LIST
63280: LIST
63281: LIST
63282: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63283: LD_ADDR_VAR 0 54
63287: PUSH
63288: LD_INT 0
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: LD_INT 1
63311: PUSH
63312: LD_INT 0
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: PUSH
63322: LD_INT 1
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: LD_INT 1
63334: PUSH
63335: EMPTY
63336: LIST
63337: LIST
63338: PUSH
63339: LD_INT 1
63341: NEG
63342: PUSH
63343: LD_INT 0
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 1
63352: NEG
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: NEG
63365: PUSH
63366: LD_INT 2
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 0
63376: PUSH
63377: LD_INT 2
63379: NEG
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: LD_INT 1
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: PUSH
63399: LD_INT 0
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 2
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 2
63418: PUSH
63419: LD_INT 2
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 1
63428: PUSH
63429: LD_INT 2
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 2
63459: NEG
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 2
63470: NEG
63471: PUSH
63472: LD_INT 1
63474: NEG
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: LD_INT 2
63482: NEG
63483: PUSH
63484: LD_INT 2
63486: NEG
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63513: LD_ADDR_VAR 0 55
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 1
63533: NEG
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: LD_INT 0
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: LD_INT 1
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: LD_INT 1
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: LD_INT 1
63586: NEG
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: LD_INT 2
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 0
63606: PUSH
63607: LD_INT 2
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 1
63617: PUSH
63618: LD_INT 1
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 2
63628: PUSH
63629: LD_INT 0
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 2
63638: PUSH
63639: LD_INT 1
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 2
63648: PUSH
63649: LD_INT 2
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 1
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: EMPTY
63663: LIST
63664: LIST
63665: PUSH
63666: LD_INT 0
63668: PUSH
63669: LD_INT 2
63671: PUSH
63672: EMPTY
63673: LIST
63674: LIST
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 2
63689: NEG
63690: PUSH
63691: LD_INT 0
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 2
63700: NEG
63701: PUSH
63702: LD_INT 1
63704: NEG
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 2
63712: NEG
63713: PUSH
63714: LD_INT 2
63716: NEG
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: LIST
63726: LIST
63727: LIST
63728: LIST
63729: LIST
63730: LIST
63731: LIST
63732: LIST
63733: LIST
63734: LIST
63735: LIST
63736: LIST
63737: LIST
63738: LIST
63739: LIST
63740: LIST
63741: LIST
63742: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63743: LD_ADDR_VAR 0 56
63747: PUSH
63748: LD_INT 0
63750: PUSH
63751: LD_INT 0
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: LD_INT 1
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 1
63771: PUSH
63772: LD_INT 0
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 1
63781: PUSH
63782: LD_INT 1
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: PUSH
63789: LD_INT 0
63791: PUSH
63792: LD_INT 1
63794: PUSH
63795: EMPTY
63796: LIST
63797: LIST
63798: PUSH
63799: LD_INT 1
63801: NEG
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 1
63812: NEG
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 1
63824: NEG
63825: PUSH
63826: LD_INT 2
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 2
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 2
63858: PUSH
63859: LD_INT 0
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 2
63868: PUSH
63869: LD_INT 1
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 2
63878: PUSH
63879: LD_INT 2
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: LD_INT 2
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: LD_INT 2
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 2
63919: NEG
63920: PUSH
63921: LD_INT 0
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 2
63930: NEG
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 2
63942: NEG
63943: PUSH
63944: LD_INT 2
63946: NEG
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: LIST
63967: LIST
63968: LIST
63969: LIST
63970: LIST
63971: LIST
63972: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63973: LD_ADDR_VAR 0 57
63977: PUSH
63978: LD_INT 0
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 1
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 1
64011: PUSH
64012: LD_INT 1
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 0
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: NEG
64032: PUSH
64033: LD_INT 0
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 1
64042: NEG
64043: PUSH
64044: LD_INT 1
64046: NEG
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 1
64054: NEG
64055: PUSH
64056: LD_INT 2
64058: NEG
64059: PUSH
64060: EMPTY
64061: LIST
64062: LIST
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: LD_INT 2
64069: NEG
64070: PUSH
64071: EMPTY
64072: LIST
64073: LIST
64074: PUSH
64075: LD_INT 1
64077: PUSH
64078: LD_INT 1
64080: NEG
64081: PUSH
64082: EMPTY
64083: LIST
64084: LIST
64085: PUSH
64086: LD_INT 2
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: EMPTY
64093: LIST
64094: LIST
64095: PUSH
64096: LD_INT 2
64098: PUSH
64099: LD_INT 1
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 2
64108: PUSH
64109: LD_INT 2
64111: PUSH
64112: EMPTY
64113: LIST
64114: LIST
64115: PUSH
64116: LD_INT 1
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 0
64128: PUSH
64129: LD_INT 2
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: PUSH
64136: LD_INT 1
64138: NEG
64139: PUSH
64140: LD_INT 1
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: LD_INT 2
64149: NEG
64150: PUSH
64151: LD_INT 0
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: LD_INT 2
64160: NEG
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 2
64172: NEG
64173: PUSH
64174: LD_INT 2
64176: NEG
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: EMPTY
64183: LIST
64184: LIST
64185: LIST
64186: LIST
64187: LIST
64188: LIST
64189: LIST
64190: LIST
64191: LIST
64192: LIST
64193: LIST
64194: LIST
64195: LIST
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64203: LD_ADDR_VAR 0 58
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 0
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: LD_INT 0
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: PUSH
64239: LD_INT 1
64241: PUSH
64242: LD_INT 1
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 0
64251: PUSH
64252: LD_INT 1
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: LD_INT 1
64276: NEG
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 1
64284: NEG
64285: PUSH
64286: LD_INT 2
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 0
64296: PUSH
64297: LD_INT 2
64299: NEG
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: LD_INT 1
64310: NEG
64311: PUSH
64312: EMPTY
64313: LIST
64314: LIST
64315: PUSH
64316: LD_INT 2
64318: PUSH
64319: LD_INT 0
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 2
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 2
64338: PUSH
64339: LD_INT 2
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 1
64348: PUSH
64349: LD_INT 2
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 0
64358: PUSH
64359: LD_INT 2
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: LD_INT 1
64368: NEG
64369: PUSH
64370: LD_INT 1
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 2
64379: NEG
64380: PUSH
64381: LD_INT 0
64383: PUSH
64384: EMPTY
64385: LIST
64386: LIST
64387: PUSH
64388: LD_INT 2
64390: NEG
64391: PUSH
64392: LD_INT 1
64394: NEG
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 2
64402: NEG
64403: PUSH
64404: LD_INT 2
64406: NEG
64407: PUSH
64408: EMPTY
64409: LIST
64410: LIST
64411: PUSH
64412: EMPTY
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64433: LD_ADDR_VAR 0 59
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: LD_INT 0
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: LD_INT 1
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: LD_INT 0
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 1
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 0
64481: PUSH
64482: LD_INT 1
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: NEG
64492: PUSH
64493: LD_INT 0
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: PUSH
64500: LD_INT 1
64502: NEG
64503: PUSH
64504: LD_INT 1
64506: NEG
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64521: LD_ADDR_VAR 0 60
64525: PUSH
64526: LD_INT 0
64528: PUSH
64529: LD_INT 0
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 0
64538: PUSH
64539: LD_INT 1
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 1
64549: PUSH
64550: LD_INT 0
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: PUSH
64557: LD_INT 1
64559: PUSH
64560: LD_INT 1
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 0
64569: PUSH
64570: LD_INT 1
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: LD_INT 0
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 1
64590: NEG
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64609: LD_ADDR_VAR 0 61
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: LD_INT 0
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 0
64626: PUSH
64627: LD_INT 1
64629: NEG
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 1
64637: PUSH
64638: LD_INT 0
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 1
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 0
64657: PUSH
64658: LD_INT 1
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: LD_INT 0
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 1
64678: NEG
64679: PUSH
64680: LD_INT 1
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64697: LD_ADDR_VAR 0 62
64701: PUSH
64702: LD_INT 0
64704: PUSH
64705: LD_INT 0
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 0
64714: PUSH
64715: LD_INT 1
64717: NEG
64718: PUSH
64719: EMPTY
64720: LIST
64721: LIST
64722: PUSH
64723: LD_INT 1
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 1
64735: PUSH
64736: LD_INT 1
64738: PUSH
64739: EMPTY
64740: LIST
64741: LIST
64742: PUSH
64743: LD_INT 0
64745: PUSH
64746: LD_INT 1
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: EMPTY
64761: LIST
64762: LIST
64763: PUSH
64764: LD_INT 1
64766: NEG
64767: PUSH
64768: LD_INT 1
64770: NEG
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: LIST
64780: LIST
64781: LIST
64782: LIST
64783: LIST
64784: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64785: LD_ADDR_VAR 0 63
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: LD_INT 0
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: EMPTY
64808: LIST
64809: LIST
64810: PUSH
64811: LD_INT 1
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: EMPTY
64828: LIST
64829: LIST
64830: PUSH
64831: LD_INT 0
64833: PUSH
64834: LD_INT 1
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: LD_INT 1
64858: NEG
64859: PUSH
64860: EMPTY
64861: LIST
64862: LIST
64863: PUSH
64864: EMPTY
64865: LIST
64866: LIST
64867: LIST
64868: LIST
64869: LIST
64870: LIST
64871: LIST
64872: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64873: LD_ADDR_VAR 0 64
64877: PUSH
64878: LD_INT 0
64880: PUSH
64881: LD_INT 0
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 0
64890: PUSH
64891: LD_INT 1
64893: NEG
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 1
64901: PUSH
64902: LD_INT 0
64904: PUSH
64905: EMPTY
64906: LIST
64907: LIST
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: LD_INT 1
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: PUSH
64919: LD_INT 0
64921: PUSH
64922: LD_INT 1
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: LD_INT 0
64935: PUSH
64936: EMPTY
64937: LIST
64938: LIST
64939: PUSH
64940: LD_INT 1
64942: NEG
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: LIST
64956: LIST
64957: LIST
64958: LIST
64959: LIST
64960: ST_TO_ADDR
// end ; 1 :
64961: GO 70858
64963: LD_INT 1
64965: DOUBLE
64966: EQUAL
64967: IFTRUE 64971
64969: GO 67594
64971: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64972: LD_ADDR_VAR 0 11
64976: PUSH
64977: LD_INT 1
64979: NEG
64980: PUSH
64981: LD_INT 3
64983: NEG
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: PUSH
64989: LD_INT 0
64991: PUSH
64992: LD_INT 3
64994: NEG
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 1
65002: PUSH
65003: LD_INT 2
65005: NEG
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: LIST
65015: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65016: LD_ADDR_VAR 0 12
65020: PUSH
65021: LD_INT 2
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 3
65034: PUSH
65035: LD_INT 0
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 3
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: EMPTY
65049: LIST
65050: LIST
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: LIST
65056: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65057: LD_ADDR_VAR 0 13
65061: PUSH
65062: LD_INT 3
65064: PUSH
65065: LD_INT 2
65067: PUSH
65068: EMPTY
65069: LIST
65070: LIST
65071: PUSH
65072: LD_INT 3
65074: PUSH
65075: LD_INT 3
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 2
65084: PUSH
65085: LD_INT 3
65087: PUSH
65088: EMPTY
65089: LIST
65090: LIST
65091: PUSH
65092: EMPTY
65093: LIST
65094: LIST
65095: LIST
65096: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65097: LD_ADDR_VAR 0 14
65101: PUSH
65102: LD_INT 1
65104: PUSH
65105: LD_INT 3
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 0
65114: PUSH
65115: LD_INT 3
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 1
65124: NEG
65125: PUSH
65126: LD_INT 2
65128: PUSH
65129: EMPTY
65130: LIST
65131: LIST
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: LIST
65137: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65138: LD_ADDR_VAR 0 15
65142: PUSH
65143: LD_INT 2
65145: NEG
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: EMPTY
65151: LIST
65152: LIST
65153: PUSH
65154: LD_INT 3
65156: NEG
65157: PUSH
65158: LD_INT 0
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PUSH
65165: LD_INT 3
65167: NEG
65168: PUSH
65169: LD_INT 1
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: LIST
65181: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65182: LD_ADDR_VAR 0 16
65186: PUSH
65187: LD_INT 2
65189: NEG
65190: PUSH
65191: LD_INT 3
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 3
65201: NEG
65202: PUSH
65203: LD_INT 2
65205: NEG
65206: PUSH
65207: EMPTY
65208: LIST
65209: LIST
65210: PUSH
65211: LD_INT 3
65213: NEG
65214: PUSH
65215: LD_INT 3
65217: NEG
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: LIST
65227: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65228: LD_ADDR_VAR 0 17
65232: PUSH
65233: LD_INT 1
65235: NEG
65236: PUSH
65237: LD_INT 3
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 0
65247: PUSH
65248: LD_INT 3
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: LD_INT 2
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: EMPTY
65268: LIST
65269: LIST
65270: LIST
65271: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65272: LD_ADDR_VAR 0 18
65276: PUSH
65277: LD_INT 2
65279: PUSH
65280: LD_INT 1
65282: NEG
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 3
65290: PUSH
65291: LD_INT 0
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 3
65300: PUSH
65301: LD_INT 1
65303: PUSH
65304: EMPTY
65305: LIST
65306: LIST
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: LIST
65312: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65313: LD_ADDR_VAR 0 19
65317: PUSH
65318: LD_INT 3
65320: PUSH
65321: LD_INT 2
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: PUSH
65328: LD_INT 3
65330: PUSH
65331: LD_INT 3
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: PUSH
65338: LD_INT 2
65340: PUSH
65341: LD_INT 3
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: LIST
65352: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65353: LD_ADDR_VAR 0 20
65357: PUSH
65358: LD_INT 1
65360: PUSH
65361: LD_INT 3
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 0
65370: PUSH
65371: LD_INT 3
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 1
65380: NEG
65381: PUSH
65382: LD_INT 2
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: LIST
65393: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65394: LD_ADDR_VAR 0 21
65398: PUSH
65399: LD_INT 2
65401: NEG
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: EMPTY
65407: LIST
65408: LIST
65409: PUSH
65410: LD_INT 3
65412: NEG
65413: PUSH
65414: LD_INT 0
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 3
65423: NEG
65424: PUSH
65425: LD_INT 1
65427: NEG
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: EMPTY
65434: LIST
65435: LIST
65436: LIST
65437: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65438: LD_ADDR_VAR 0 22
65442: PUSH
65443: LD_INT 2
65445: NEG
65446: PUSH
65447: LD_INT 3
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 3
65457: NEG
65458: PUSH
65459: LD_INT 2
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 3
65469: NEG
65470: PUSH
65471: LD_INT 3
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: LIST
65483: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65484: LD_ADDR_VAR 0 23
65488: PUSH
65489: LD_INT 0
65491: PUSH
65492: LD_INT 3
65494: NEG
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 1
65502: NEG
65503: PUSH
65504: LD_INT 4
65506: NEG
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 1
65514: PUSH
65515: LD_INT 3
65517: NEG
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: EMPTY
65524: LIST
65525: LIST
65526: LIST
65527: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65528: LD_ADDR_VAR 0 24
65532: PUSH
65533: LD_INT 3
65535: PUSH
65536: LD_INT 0
65538: PUSH
65539: EMPTY
65540: LIST
65541: LIST
65542: PUSH
65543: LD_INT 3
65545: PUSH
65546: LD_INT 1
65548: NEG
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 4
65556: PUSH
65557: LD_INT 1
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: LIST
65568: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65569: LD_ADDR_VAR 0 25
65573: PUSH
65574: LD_INT 3
65576: PUSH
65577: LD_INT 3
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 4
65586: PUSH
65587: LD_INT 3
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 3
65596: PUSH
65597: LD_INT 4
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: EMPTY
65605: LIST
65606: LIST
65607: LIST
65608: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65609: LD_ADDR_VAR 0 26
65613: PUSH
65614: LD_INT 0
65616: PUSH
65617: LD_INT 3
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 1
65626: PUSH
65627: LD_INT 4
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 1
65636: NEG
65637: PUSH
65638: LD_INT 3
65640: PUSH
65641: EMPTY
65642: LIST
65643: LIST
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: LIST
65649: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65650: LD_ADDR_VAR 0 27
65654: PUSH
65655: LD_INT 3
65657: NEG
65658: PUSH
65659: LD_INT 0
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 3
65668: NEG
65669: PUSH
65670: LD_INT 1
65672: PUSH
65673: EMPTY
65674: LIST
65675: LIST
65676: PUSH
65677: LD_INT 4
65679: NEG
65680: PUSH
65681: LD_INT 1
65683: NEG
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: LIST
65693: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65694: LD_ADDR_VAR 0 28
65698: PUSH
65699: LD_INT 3
65701: NEG
65702: PUSH
65703: LD_INT 3
65705: NEG
65706: PUSH
65707: EMPTY
65708: LIST
65709: LIST
65710: PUSH
65711: LD_INT 3
65713: NEG
65714: PUSH
65715: LD_INT 4
65717: NEG
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 4
65725: NEG
65726: PUSH
65727: LD_INT 3
65729: NEG
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: EMPTY
65736: LIST
65737: LIST
65738: LIST
65739: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65740: LD_ADDR_VAR 0 29
65744: PUSH
65745: LD_INT 1
65747: NEG
65748: PUSH
65749: LD_INT 3
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 0
65759: PUSH
65760: LD_INT 3
65762: NEG
65763: PUSH
65764: EMPTY
65765: LIST
65766: LIST
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: LD_INT 2
65773: NEG
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 1
65781: NEG
65782: PUSH
65783: LD_INT 4
65785: NEG
65786: PUSH
65787: EMPTY
65788: LIST
65789: LIST
65790: PUSH
65791: LD_INT 0
65793: PUSH
65794: LD_INT 4
65796: NEG
65797: PUSH
65798: EMPTY
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 1
65804: PUSH
65805: LD_INT 3
65807: NEG
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 1
65815: NEG
65816: PUSH
65817: LD_INT 5
65819: NEG
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: PUSH
65825: LD_INT 0
65827: PUSH
65828: LD_INT 5
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 1
65838: PUSH
65839: LD_INT 4
65841: NEG
65842: PUSH
65843: EMPTY
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 1
65849: NEG
65850: PUSH
65851: LD_INT 6
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 0
65861: PUSH
65862: LD_INT 6
65864: NEG
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 1
65872: PUSH
65873: LD_INT 5
65875: NEG
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65895: LD_ADDR_VAR 0 30
65899: PUSH
65900: LD_INT 2
65902: PUSH
65903: LD_INT 1
65905: NEG
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: PUSH
65911: LD_INT 3
65913: PUSH
65914: LD_INT 0
65916: PUSH
65917: EMPTY
65918: LIST
65919: LIST
65920: PUSH
65921: LD_INT 3
65923: PUSH
65924: LD_INT 1
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 3
65933: PUSH
65934: LD_INT 1
65936: NEG
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 4
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 4
65954: PUSH
65955: LD_INT 1
65957: PUSH
65958: EMPTY
65959: LIST
65960: LIST
65961: PUSH
65962: LD_INT 4
65964: PUSH
65965: LD_INT 1
65967: NEG
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 5
65975: PUSH
65976: LD_INT 0
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 5
65985: PUSH
65986: LD_INT 1
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 5
65995: PUSH
65996: LD_INT 1
65998: NEG
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 6
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 6
66016: PUSH
66017: LD_INT 1
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: LIST
66032: LIST
66033: LIST
66034: LIST
66035: LIST
66036: LIST
66037: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
66038: LD_ADDR_VAR 0 31
66042: PUSH
66043: LD_INT 3
66045: PUSH
66046: LD_INT 2
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: PUSH
66053: LD_INT 3
66055: PUSH
66056: LD_INT 3
66058: PUSH
66059: EMPTY
66060: LIST
66061: LIST
66062: PUSH
66063: LD_INT 2
66065: PUSH
66066: LD_INT 3
66068: PUSH
66069: EMPTY
66070: LIST
66071: LIST
66072: PUSH
66073: LD_INT 4
66075: PUSH
66076: LD_INT 3
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: PUSH
66083: LD_INT 4
66085: PUSH
66086: LD_INT 4
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 3
66095: PUSH
66096: LD_INT 4
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 5
66105: PUSH
66106: LD_INT 4
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 5
66115: PUSH
66116: LD_INT 5
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 4
66125: PUSH
66126: LD_INT 5
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: PUSH
66133: LD_INT 6
66135: PUSH
66136: LD_INT 5
66138: PUSH
66139: EMPTY
66140: LIST
66141: LIST
66142: PUSH
66143: LD_INT 6
66145: PUSH
66146: LD_INT 6
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 5
66155: PUSH
66156: LD_INT 6
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66177: LD_ADDR_VAR 0 32
66181: PUSH
66182: LD_INT 1
66184: PUSH
66185: LD_INT 3
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 0
66194: PUSH
66195: LD_INT 3
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 1
66204: NEG
66205: PUSH
66206: LD_INT 2
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 1
66215: PUSH
66216: LD_INT 4
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 0
66225: PUSH
66226: LD_INT 4
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: PUSH
66233: LD_INT 1
66235: NEG
66236: PUSH
66237: LD_INT 3
66239: PUSH
66240: EMPTY
66241: LIST
66242: LIST
66243: PUSH
66244: LD_INT 1
66246: PUSH
66247: LD_INT 5
66249: PUSH
66250: EMPTY
66251: LIST
66252: LIST
66253: PUSH
66254: LD_INT 0
66256: PUSH
66257: LD_INT 5
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: PUSH
66264: LD_INT 1
66266: NEG
66267: PUSH
66268: LD_INT 4
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 1
66277: PUSH
66278: LD_INT 6
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 0
66287: PUSH
66288: LD_INT 6
66290: PUSH
66291: EMPTY
66292: LIST
66293: LIST
66294: PUSH
66295: LD_INT 1
66297: NEG
66298: PUSH
66299: LD_INT 5
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66320: LD_ADDR_VAR 0 33
66324: PUSH
66325: LD_INT 2
66327: NEG
66328: PUSH
66329: LD_INT 1
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 3
66338: NEG
66339: PUSH
66340: LD_INT 0
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 3
66349: NEG
66350: PUSH
66351: LD_INT 1
66353: NEG
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 3
66361: NEG
66362: PUSH
66363: LD_INT 1
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 4
66372: NEG
66373: PUSH
66374: LD_INT 0
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_INT 4
66383: NEG
66384: PUSH
66385: LD_INT 1
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 4
66395: NEG
66396: PUSH
66397: LD_INT 1
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 5
66406: NEG
66407: PUSH
66408: LD_INT 0
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 5
66417: NEG
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: PUSH
66427: LD_INT 5
66429: NEG
66430: PUSH
66431: LD_INT 1
66433: PUSH
66434: EMPTY
66435: LIST
66436: LIST
66437: PUSH
66438: LD_INT 6
66440: NEG
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 6
66451: NEG
66452: PUSH
66453: LD_INT 1
66455: NEG
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: LIST
66465: LIST
66466: LIST
66467: LIST
66468: LIST
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66475: LD_ADDR_VAR 0 34
66479: PUSH
66480: LD_INT 2
66482: NEG
66483: PUSH
66484: LD_INT 3
66486: NEG
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 3
66494: NEG
66495: PUSH
66496: LD_INT 2
66498: NEG
66499: PUSH
66500: EMPTY
66501: LIST
66502: LIST
66503: PUSH
66504: LD_INT 3
66506: NEG
66507: PUSH
66508: LD_INT 3
66510: NEG
66511: PUSH
66512: EMPTY
66513: LIST
66514: LIST
66515: PUSH
66516: LD_INT 3
66518: NEG
66519: PUSH
66520: LD_INT 4
66522: NEG
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_INT 4
66530: NEG
66531: PUSH
66532: LD_INT 3
66534: NEG
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 4
66542: NEG
66543: PUSH
66544: LD_INT 4
66546: NEG
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 4
66554: NEG
66555: PUSH
66556: LD_INT 5
66558: NEG
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 5
66566: NEG
66567: PUSH
66568: LD_INT 4
66570: NEG
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: PUSH
66576: LD_INT 5
66578: NEG
66579: PUSH
66580: LD_INT 5
66582: NEG
66583: PUSH
66584: EMPTY
66585: LIST
66586: LIST
66587: PUSH
66588: LD_INT 5
66590: NEG
66591: PUSH
66592: LD_INT 6
66594: NEG
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 6
66602: NEG
66603: PUSH
66604: LD_INT 5
66606: NEG
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: PUSH
66612: LD_INT 6
66614: NEG
66615: PUSH
66616: LD_INT 6
66618: NEG
66619: PUSH
66620: EMPTY
66621: LIST
66622: LIST
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66638: LD_ADDR_VAR 0 41
66642: PUSH
66643: LD_INT 0
66645: PUSH
66646: LD_INT 2
66648: NEG
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 1
66656: NEG
66657: PUSH
66658: LD_INT 3
66660: NEG
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: LD_INT 2
66671: NEG
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: LIST
66681: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66682: LD_ADDR_VAR 0 42
66686: PUSH
66687: LD_INT 2
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: EMPTY
66694: LIST
66695: LIST
66696: PUSH
66697: LD_INT 2
66699: PUSH
66700: LD_INT 1
66702: NEG
66703: PUSH
66704: EMPTY
66705: LIST
66706: LIST
66707: PUSH
66708: LD_INT 3
66710: PUSH
66711: LD_INT 1
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: EMPTY
66719: LIST
66720: LIST
66721: LIST
66722: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66723: LD_ADDR_VAR 0 43
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: LD_INT 2
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 3
66740: PUSH
66741: LD_INT 2
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 2
66750: PUSH
66751: LD_INT 3
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: LIST
66762: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66763: LD_ADDR_VAR 0 44
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: LD_INT 2
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 1
66780: PUSH
66781: LD_INT 3
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 1
66790: NEG
66791: PUSH
66792: LD_INT 2
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: EMPTY
66800: LIST
66801: LIST
66802: LIST
66803: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66804: LD_ADDR_VAR 0 45
66808: PUSH
66809: LD_INT 2
66811: NEG
66812: PUSH
66813: LD_INT 0
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 2
66822: NEG
66823: PUSH
66824: LD_INT 1
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 3
66833: NEG
66834: PUSH
66835: LD_INT 1
66837: NEG
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: LIST
66847: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66848: LD_ADDR_VAR 0 46
66852: PUSH
66853: LD_INT 2
66855: NEG
66856: PUSH
66857: LD_INT 2
66859: NEG
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 2
66867: NEG
66868: PUSH
66869: LD_INT 3
66871: NEG
66872: PUSH
66873: EMPTY
66874: LIST
66875: LIST
66876: PUSH
66877: LD_INT 3
66879: NEG
66880: PUSH
66881: LD_INT 2
66883: NEG
66884: PUSH
66885: EMPTY
66886: LIST
66887: LIST
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: LIST
66893: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66894: LD_ADDR_VAR 0 47
66898: PUSH
66899: LD_INT 2
66901: NEG
66902: PUSH
66903: LD_INT 3
66905: NEG
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: LD_INT 3
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: EMPTY
66924: LIST
66925: LIST
66926: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66927: LD_ADDR_VAR 0 48
66931: PUSH
66932: LD_INT 1
66934: PUSH
66935: LD_INT 2
66937: NEG
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 2
66945: PUSH
66946: LD_INT 1
66948: NEG
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66958: LD_ADDR_VAR 0 49
66962: PUSH
66963: LD_INT 3
66965: PUSH
66966: LD_INT 1
66968: PUSH
66969: EMPTY
66970: LIST
66971: LIST
66972: PUSH
66973: LD_INT 3
66975: PUSH
66976: LD_INT 2
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: EMPTY
66984: LIST
66985: LIST
66986: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66987: LD_ADDR_VAR 0 50
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: LD_INT 3
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 1
67004: PUSH
67005: LD_INT 3
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: EMPTY
67013: LIST
67014: LIST
67015: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67016: LD_ADDR_VAR 0 51
67020: PUSH
67021: LD_INT 1
67023: NEG
67024: PUSH
67025: LD_INT 2
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 2
67034: NEG
67035: PUSH
67036: LD_INT 1
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: EMPTY
67044: LIST
67045: LIST
67046: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67047: LD_ADDR_VAR 0 52
67051: PUSH
67052: LD_INT 3
67054: NEG
67055: PUSH
67056: LD_INT 1
67058: NEG
67059: PUSH
67060: EMPTY
67061: LIST
67062: LIST
67063: PUSH
67064: LD_INT 3
67066: NEG
67067: PUSH
67068: LD_INT 2
67070: NEG
67071: PUSH
67072: EMPTY
67073: LIST
67074: LIST
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67080: LD_ADDR_VAR 0 53
67084: PUSH
67085: LD_INT 1
67087: NEG
67088: PUSH
67089: LD_INT 3
67091: NEG
67092: PUSH
67093: EMPTY
67094: LIST
67095: LIST
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: LD_INT 3
67102: NEG
67103: PUSH
67104: EMPTY
67105: LIST
67106: LIST
67107: PUSH
67108: LD_INT 1
67110: PUSH
67111: LD_INT 2
67113: NEG
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: LIST
67123: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67124: LD_ADDR_VAR 0 54
67128: PUSH
67129: LD_INT 2
67131: PUSH
67132: LD_INT 1
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 3
67142: PUSH
67143: LD_INT 0
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: LD_INT 3
67152: PUSH
67153: LD_INT 1
67155: PUSH
67156: EMPTY
67157: LIST
67158: LIST
67159: PUSH
67160: EMPTY
67161: LIST
67162: LIST
67163: LIST
67164: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67165: LD_ADDR_VAR 0 55
67169: PUSH
67170: LD_INT 3
67172: PUSH
67173: LD_INT 2
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 3
67182: PUSH
67183: LD_INT 3
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: LD_INT 3
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: EMPTY
67201: LIST
67202: LIST
67203: LIST
67204: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67205: LD_ADDR_VAR 0 56
67209: PUSH
67210: LD_INT 1
67212: PUSH
67213: LD_INT 3
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: LD_INT 3
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 1
67232: NEG
67233: PUSH
67234: LD_INT 2
67236: PUSH
67237: EMPTY
67238: LIST
67239: LIST
67240: PUSH
67241: EMPTY
67242: LIST
67243: LIST
67244: LIST
67245: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67246: LD_ADDR_VAR 0 57
67250: PUSH
67251: LD_INT 2
67253: NEG
67254: PUSH
67255: LD_INT 1
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 3
67264: NEG
67265: PUSH
67266: LD_INT 0
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 3
67275: NEG
67276: PUSH
67277: LD_INT 1
67279: NEG
67280: PUSH
67281: EMPTY
67282: LIST
67283: LIST
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: LIST
67289: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67290: LD_ADDR_VAR 0 58
67294: PUSH
67295: LD_INT 2
67297: NEG
67298: PUSH
67299: LD_INT 3
67301: NEG
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 3
67309: NEG
67310: PUSH
67311: LD_INT 2
67313: NEG
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 3
67321: NEG
67322: PUSH
67323: LD_INT 3
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: LIST
67335: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67336: LD_ADDR_VAR 0 59
67340: PUSH
67341: LD_INT 1
67343: NEG
67344: PUSH
67345: LD_INT 2
67347: NEG
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: PUSH
67353: LD_INT 0
67355: PUSH
67356: LD_INT 2
67358: NEG
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 1
67366: PUSH
67367: LD_INT 1
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: EMPTY
67376: LIST
67377: LIST
67378: LIST
67379: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67380: LD_ADDR_VAR 0 60
67384: PUSH
67385: LD_INT 1
67387: PUSH
67388: LD_INT 1
67390: NEG
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 2
67398: PUSH
67399: LD_INT 0
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 2
67408: PUSH
67409: LD_INT 1
67411: PUSH
67412: EMPTY
67413: LIST
67414: LIST
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: LIST
67420: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67421: LD_ADDR_VAR 0 61
67425: PUSH
67426: LD_INT 2
67428: PUSH
67429: LD_INT 1
67431: PUSH
67432: EMPTY
67433: LIST
67434: LIST
67435: PUSH
67436: LD_INT 2
67438: PUSH
67439: LD_INT 2
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 1
67448: PUSH
67449: LD_INT 2
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: LIST
67460: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67461: LD_ADDR_VAR 0 62
67465: PUSH
67466: LD_INT 1
67468: PUSH
67469: LD_INT 2
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 0
67478: PUSH
67479: LD_INT 2
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 1
67488: NEG
67489: PUSH
67490: LD_INT 1
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: LIST
67501: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67502: LD_ADDR_VAR 0 63
67506: PUSH
67507: LD_INT 1
67509: NEG
67510: PUSH
67511: LD_INT 1
67513: PUSH
67514: EMPTY
67515: LIST
67516: LIST
67517: PUSH
67518: LD_INT 2
67520: NEG
67521: PUSH
67522: LD_INT 0
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 2
67531: NEG
67532: PUSH
67533: LD_INT 1
67535: NEG
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: EMPTY
67542: LIST
67543: LIST
67544: LIST
67545: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67546: LD_ADDR_VAR 0 64
67550: PUSH
67551: LD_INT 1
67553: NEG
67554: PUSH
67555: LD_INT 2
67557: NEG
67558: PUSH
67559: EMPTY
67560: LIST
67561: LIST
67562: PUSH
67563: LD_INT 2
67565: NEG
67566: PUSH
67567: LD_INT 1
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 2
67577: NEG
67578: PUSH
67579: LD_INT 2
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: LIST
67591: ST_TO_ADDR
// end ; 2 :
67592: GO 70858
67594: LD_INT 2
67596: DOUBLE
67597: EQUAL
67598: IFTRUE 67602
67600: GO 70857
67602: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67603: LD_ADDR_VAR 0 29
67607: PUSH
67608: LD_INT 4
67610: PUSH
67611: LD_INT 0
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 4
67620: PUSH
67621: LD_INT 1
67623: NEG
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: LD_INT 5
67631: PUSH
67632: LD_INT 0
67634: PUSH
67635: EMPTY
67636: LIST
67637: LIST
67638: PUSH
67639: LD_INT 5
67641: PUSH
67642: LD_INT 1
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 4
67651: PUSH
67652: LD_INT 1
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 3
67661: PUSH
67662: LD_INT 0
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 3
67671: PUSH
67672: LD_INT 1
67674: NEG
67675: PUSH
67676: EMPTY
67677: LIST
67678: LIST
67679: PUSH
67680: LD_INT 3
67682: PUSH
67683: LD_INT 2
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 5
67693: PUSH
67694: LD_INT 2
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 3
67703: PUSH
67704: LD_INT 3
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 3
67713: PUSH
67714: LD_INT 2
67716: PUSH
67717: EMPTY
67718: LIST
67719: LIST
67720: PUSH
67721: LD_INT 4
67723: PUSH
67724: LD_INT 3
67726: PUSH
67727: EMPTY
67728: LIST
67729: LIST
67730: PUSH
67731: LD_INT 4
67733: PUSH
67734: LD_INT 4
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: PUSH
67741: LD_INT 3
67743: PUSH
67744: LD_INT 4
67746: PUSH
67747: EMPTY
67748: LIST
67749: LIST
67750: PUSH
67751: LD_INT 2
67753: PUSH
67754: LD_INT 3
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 2
67763: PUSH
67764: LD_INT 2
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 4
67773: PUSH
67774: LD_INT 2
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 2
67783: PUSH
67784: LD_INT 4
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 0
67793: PUSH
67794: LD_INT 4
67796: PUSH
67797: EMPTY
67798: LIST
67799: LIST
67800: PUSH
67801: LD_INT 0
67803: PUSH
67804: LD_INT 3
67806: PUSH
67807: EMPTY
67808: LIST
67809: LIST
67810: PUSH
67811: LD_INT 1
67813: PUSH
67814: LD_INT 4
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 1
67823: PUSH
67824: LD_INT 5
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 0
67833: PUSH
67834: LD_INT 5
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 1
67843: NEG
67844: PUSH
67845: LD_INT 4
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 1
67854: NEG
67855: PUSH
67856: LD_INT 3
67858: PUSH
67859: EMPTY
67860: LIST
67861: LIST
67862: PUSH
67863: LD_INT 2
67865: PUSH
67866: LD_INT 5
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 2
67875: NEG
67876: PUSH
67877: LD_INT 3
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 3
67886: NEG
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 3
67897: NEG
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 2
67909: NEG
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 2
67920: NEG
67921: PUSH
67922: LD_INT 1
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 3
67931: NEG
67932: PUSH
67933: LD_INT 1
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: LD_INT 4
67942: NEG
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 4
67953: NEG
67954: PUSH
67955: LD_INT 1
67957: NEG
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 4
67965: NEG
67966: PUSH
67967: LD_INT 2
67969: NEG
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 2
67977: NEG
67978: PUSH
67979: LD_INT 2
67981: PUSH
67982: EMPTY
67983: LIST
67984: LIST
67985: PUSH
67986: LD_INT 4
67988: NEG
67989: PUSH
67990: LD_INT 4
67992: NEG
67993: PUSH
67994: EMPTY
67995: LIST
67996: LIST
67997: PUSH
67998: LD_INT 4
68000: NEG
68001: PUSH
68002: LD_INT 5
68004: NEG
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 3
68012: NEG
68013: PUSH
68014: LD_INT 4
68016: NEG
68017: PUSH
68018: EMPTY
68019: LIST
68020: LIST
68021: PUSH
68022: LD_INT 3
68024: NEG
68025: PUSH
68026: LD_INT 3
68028: NEG
68029: PUSH
68030: EMPTY
68031: LIST
68032: LIST
68033: PUSH
68034: LD_INT 4
68036: NEG
68037: PUSH
68038: LD_INT 3
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 5
68048: NEG
68049: PUSH
68050: LD_INT 4
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 5
68060: NEG
68061: PUSH
68062: LD_INT 5
68064: NEG
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 3
68072: NEG
68073: PUSH
68074: LD_INT 5
68076: NEG
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 5
68084: NEG
68085: PUSH
68086: LD_INT 3
68088: NEG
68089: PUSH
68090: EMPTY
68091: LIST
68092: LIST
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: LIST
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: LIST
68134: LIST
68135: LIST
68136: LIST
68137: LIST
68138: LIST
68139: LIST
68140: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68141: LD_ADDR_VAR 0 30
68145: PUSH
68146: LD_INT 4
68148: PUSH
68149: LD_INT 4
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 4
68158: PUSH
68159: LD_INT 3
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 5
68168: PUSH
68169: LD_INT 4
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 5
68178: PUSH
68179: LD_INT 5
68181: PUSH
68182: EMPTY
68183: LIST
68184: LIST
68185: PUSH
68186: LD_INT 4
68188: PUSH
68189: LD_INT 5
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: PUSH
68196: LD_INT 3
68198: PUSH
68199: LD_INT 4
68201: PUSH
68202: EMPTY
68203: LIST
68204: LIST
68205: PUSH
68206: LD_INT 3
68208: PUSH
68209: LD_INT 3
68211: PUSH
68212: EMPTY
68213: LIST
68214: LIST
68215: PUSH
68216: LD_INT 5
68218: PUSH
68219: LD_INT 3
68221: PUSH
68222: EMPTY
68223: LIST
68224: LIST
68225: PUSH
68226: LD_INT 3
68228: PUSH
68229: LD_INT 5
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 0
68238: PUSH
68239: LD_INT 3
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 0
68248: PUSH
68249: LD_INT 2
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 1
68258: PUSH
68259: LD_INT 3
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: PUSH
68266: LD_INT 1
68268: PUSH
68269: LD_INT 4
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 0
68278: PUSH
68279: LD_INT 4
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 1
68288: NEG
68289: PUSH
68290: LD_INT 3
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 1
68299: NEG
68300: PUSH
68301: LD_INT 2
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 2
68310: PUSH
68311: LD_INT 4
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 2
68320: NEG
68321: PUSH
68322: LD_INT 2
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 4
68331: NEG
68332: PUSH
68333: LD_INT 0
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 4
68342: NEG
68343: PUSH
68344: LD_INT 1
68346: NEG
68347: PUSH
68348: EMPTY
68349: LIST
68350: LIST
68351: PUSH
68352: LD_INT 3
68354: NEG
68355: PUSH
68356: LD_INT 0
68358: PUSH
68359: EMPTY
68360: LIST
68361: LIST
68362: PUSH
68363: LD_INT 3
68365: NEG
68366: PUSH
68367: LD_INT 1
68369: PUSH
68370: EMPTY
68371: LIST
68372: LIST
68373: PUSH
68374: LD_INT 4
68376: NEG
68377: PUSH
68378: LD_INT 1
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 5
68387: NEG
68388: PUSH
68389: LD_INT 0
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 5
68398: NEG
68399: PUSH
68400: LD_INT 1
68402: NEG
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 5
68410: NEG
68411: PUSH
68412: LD_INT 2
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 3
68422: NEG
68423: PUSH
68424: LD_INT 2
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 3
68433: NEG
68434: PUSH
68435: LD_INT 3
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 3
68445: NEG
68446: PUSH
68447: LD_INT 4
68449: NEG
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: PUSH
68455: LD_INT 2
68457: NEG
68458: PUSH
68459: LD_INT 3
68461: NEG
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 2
68469: NEG
68470: PUSH
68471: LD_INT 2
68473: NEG
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 3
68481: NEG
68482: PUSH
68483: LD_INT 2
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 4
68493: NEG
68494: PUSH
68495: LD_INT 3
68497: NEG
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 4
68505: NEG
68506: PUSH
68507: LD_INT 4
68509: NEG
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 2
68517: NEG
68518: PUSH
68519: LD_INT 4
68521: NEG
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 4
68529: NEG
68530: PUSH
68531: LD_INT 2
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: LD_INT 4
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 0
68552: PUSH
68553: LD_INT 5
68555: NEG
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: PUSH
68561: LD_INT 1
68563: PUSH
68564: LD_INT 4
68566: NEG
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 1
68574: PUSH
68575: LD_INT 3
68577: NEG
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: LD_INT 3
68588: NEG
68589: PUSH
68590: EMPTY
68591: LIST
68592: LIST
68593: PUSH
68594: LD_INT 1
68596: NEG
68597: PUSH
68598: LD_INT 4
68600: NEG
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 1
68608: NEG
68609: PUSH
68610: LD_INT 5
68612: NEG
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 2
68620: PUSH
68621: LD_INT 3
68623: NEG
68624: PUSH
68625: EMPTY
68626: LIST
68627: LIST
68628: PUSH
68629: LD_INT 2
68631: NEG
68632: PUSH
68633: LD_INT 5
68635: NEG
68636: PUSH
68637: EMPTY
68638: LIST
68639: LIST
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: LIST
68670: LIST
68671: LIST
68672: LIST
68673: LIST
68674: LIST
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: LIST
68680: LIST
68681: LIST
68682: LIST
68683: LIST
68684: LIST
68685: LIST
68686: LIST
68687: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68688: LD_ADDR_VAR 0 31
68692: PUSH
68693: LD_INT 0
68695: PUSH
68696: LD_INT 4
68698: PUSH
68699: EMPTY
68700: LIST
68701: LIST
68702: PUSH
68703: LD_INT 0
68705: PUSH
68706: LD_INT 3
68708: PUSH
68709: EMPTY
68710: LIST
68711: LIST
68712: PUSH
68713: LD_INT 1
68715: PUSH
68716: LD_INT 4
68718: PUSH
68719: EMPTY
68720: LIST
68721: LIST
68722: PUSH
68723: LD_INT 1
68725: PUSH
68726: LD_INT 5
68728: PUSH
68729: EMPTY
68730: LIST
68731: LIST
68732: PUSH
68733: LD_INT 0
68735: PUSH
68736: LD_INT 5
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 1
68745: NEG
68746: PUSH
68747: LD_INT 4
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 1
68756: NEG
68757: PUSH
68758: LD_INT 3
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 2
68767: PUSH
68768: LD_INT 5
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 2
68777: NEG
68778: PUSH
68779: LD_INT 3
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 3
68788: NEG
68789: PUSH
68790: LD_INT 0
68792: PUSH
68793: EMPTY
68794: LIST
68795: LIST
68796: PUSH
68797: LD_INT 3
68799: NEG
68800: PUSH
68801: LD_INT 1
68803: NEG
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 2
68811: NEG
68812: PUSH
68813: LD_INT 0
68815: PUSH
68816: EMPTY
68817: LIST
68818: LIST
68819: PUSH
68820: LD_INT 2
68822: NEG
68823: PUSH
68824: LD_INT 1
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 3
68833: NEG
68834: PUSH
68835: LD_INT 1
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 4
68844: NEG
68845: PUSH
68846: LD_INT 0
68848: PUSH
68849: EMPTY
68850: LIST
68851: LIST
68852: PUSH
68853: LD_INT 4
68855: NEG
68856: PUSH
68857: LD_INT 1
68859: NEG
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 4
68867: NEG
68868: PUSH
68869: LD_INT 2
68871: NEG
68872: PUSH
68873: EMPTY
68874: LIST
68875: LIST
68876: PUSH
68877: LD_INT 2
68879: NEG
68880: PUSH
68881: LD_INT 2
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 4
68890: NEG
68891: PUSH
68892: LD_INT 4
68894: NEG
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 4
68902: NEG
68903: PUSH
68904: LD_INT 5
68906: NEG
68907: PUSH
68908: EMPTY
68909: LIST
68910: LIST
68911: PUSH
68912: LD_INT 3
68914: NEG
68915: PUSH
68916: LD_INT 4
68918: NEG
68919: PUSH
68920: EMPTY
68921: LIST
68922: LIST
68923: PUSH
68924: LD_INT 3
68926: NEG
68927: PUSH
68928: LD_INT 3
68930: NEG
68931: PUSH
68932: EMPTY
68933: LIST
68934: LIST
68935: PUSH
68936: LD_INT 4
68938: NEG
68939: PUSH
68940: LD_INT 3
68942: NEG
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 5
68950: NEG
68951: PUSH
68952: LD_INT 4
68954: NEG
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: PUSH
68960: LD_INT 5
68962: NEG
68963: PUSH
68964: LD_INT 5
68966: NEG
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: PUSH
68972: LD_INT 3
68974: NEG
68975: PUSH
68976: LD_INT 5
68978: NEG
68979: PUSH
68980: EMPTY
68981: LIST
68982: LIST
68983: PUSH
68984: LD_INT 5
68986: NEG
68987: PUSH
68988: LD_INT 3
68990: NEG
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 0
68998: PUSH
68999: LD_INT 3
69001: NEG
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 0
69009: PUSH
69010: LD_INT 4
69012: NEG
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 1
69020: PUSH
69021: LD_INT 3
69023: NEG
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 1
69031: PUSH
69032: LD_INT 2
69034: NEG
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 0
69042: PUSH
69043: LD_INT 2
69045: NEG
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: PUSH
69051: LD_INT 1
69053: NEG
69054: PUSH
69055: LD_INT 3
69057: NEG
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 1
69065: NEG
69066: PUSH
69067: LD_INT 4
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: LD_INT 2
69077: PUSH
69078: LD_INT 2
69080: NEG
69081: PUSH
69082: EMPTY
69083: LIST
69084: LIST
69085: PUSH
69086: LD_INT 2
69088: NEG
69089: PUSH
69090: LD_INT 4
69092: NEG
69093: PUSH
69094: EMPTY
69095: LIST
69096: LIST
69097: PUSH
69098: LD_INT 4
69100: PUSH
69101: LD_INT 0
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 4
69110: PUSH
69111: LD_INT 1
69113: NEG
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 5
69121: PUSH
69122: LD_INT 0
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 5
69131: PUSH
69132: LD_INT 1
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 4
69141: PUSH
69142: LD_INT 1
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 3
69151: PUSH
69152: LD_INT 0
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 3
69161: PUSH
69162: LD_INT 1
69164: NEG
69165: PUSH
69166: EMPTY
69167: LIST
69168: LIST
69169: PUSH
69170: LD_INT 3
69172: PUSH
69173: LD_INT 2
69175: NEG
69176: PUSH
69177: EMPTY
69178: LIST
69179: LIST
69180: PUSH
69181: LD_INT 5
69183: PUSH
69184: LD_INT 2
69186: PUSH
69187: EMPTY
69188: LIST
69189: LIST
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69238: LD_ADDR_VAR 0 32
69242: PUSH
69243: LD_INT 4
69245: NEG
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 4
69256: NEG
69257: PUSH
69258: LD_INT 1
69260: NEG
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 3
69268: NEG
69269: PUSH
69270: LD_INT 0
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 3
69279: NEG
69280: PUSH
69281: LD_INT 1
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: PUSH
69288: LD_INT 4
69290: NEG
69291: PUSH
69292: LD_INT 1
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: LD_INT 5
69301: NEG
69302: PUSH
69303: LD_INT 0
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 5
69312: NEG
69313: PUSH
69314: LD_INT 1
69316: NEG
69317: PUSH
69318: EMPTY
69319: LIST
69320: LIST
69321: PUSH
69322: LD_INT 5
69324: NEG
69325: PUSH
69326: LD_INT 2
69328: NEG
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 3
69336: NEG
69337: PUSH
69338: LD_INT 2
69340: PUSH
69341: EMPTY
69342: LIST
69343: LIST
69344: PUSH
69345: LD_INT 3
69347: NEG
69348: PUSH
69349: LD_INT 3
69351: NEG
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 3
69359: NEG
69360: PUSH
69361: LD_INT 4
69363: NEG
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: PUSH
69369: LD_INT 2
69371: NEG
69372: PUSH
69373: LD_INT 3
69375: NEG
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PUSH
69381: LD_INT 2
69383: NEG
69384: PUSH
69385: LD_INT 2
69387: NEG
69388: PUSH
69389: EMPTY
69390: LIST
69391: LIST
69392: PUSH
69393: LD_INT 3
69395: NEG
69396: PUSH
69397: LD_INT 2
69399: NEG
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 4
69407: NEG
69408: PUSH
69409: LD_INT 3
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 4
69419: NEG
69420: PUSH
69421: LD_INT 4
69423: NEG
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 2
69431: NEG
69432: PUSH
69433: LD_INT 4
69435: NEG
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 4
69443: NEG
69444: PUSH
69445: LD_INT 2
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: LD_INT 0
69455: PUSH
69456: LD_INT 4
69458: NEG
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 0
69466: PUSH
69467: LD_INT 5
69469: NEG
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 1
69477: PUSH
69478: LD_INT 4
69480: NEG
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 1
69488: PUSH
69489: LD_INT 3
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 0
69499: PUSH
69500: LD_INT 3
69502: NEG
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 1
69510: NEG
69511: PUSH
69512: LD_INT 4
69514: NEG
69515: PUSH
69516: EMPTY
69517: LIST
69518: LIST
69519: PUSH
69520: LD_INT 1
69522: NEG
69523: PUSH
69524: LD_INT 5
69526: NEG
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 2
69534: PUSH
69535: LD_INT 3
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 2
69545: NEG
69546: PUSH
69547: LD_INT 5
69549: NEG
69550: PUSH
69551: EMPTY
69552: LIST
69553: LIST
69554: PUSH
69555: LD_INT 3
69557: PUSH
69558: LD_INT 0
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 3
69567: PUSH
69568: LD_INT 1
69570: NEG
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 4
69578: PUSH
69579: LD_INT 0
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 4
69588: PUSH
69589: LD_INT 1
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: PUSH
69596: LD_INT 3
69598: PUSH
69599: LD_INT 1
69601: PUSH
69602: EMPTY
69603: LIST
69604: LIST
69605: PUSH
69606: LD_INT 2
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 2
69618: PUSH
69619: LD_INT 1
69621: NEG
69622: PUSH
69623: EMPTY
69624: LIST
69625: LIST
69626: PUSH
69627: LD_INT 2
69629: PUSH
69630: LD_INT 2
69632: NEG
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 4
69640: PUSH
69641: LD_INT 2
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 4
69650: PUSH
69651: LD_INT 4
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 4
69660: PUSH
69661: LD_INT 3
69663: PUSH
69664: EMPTY
69665: LIST
69666: LIST
69667: PUSH
69668: LD_INT 5
69670: PUSH
69671: LD_INT 4
69673: PUSH
69674: EMPTY
69675: LIST
69676: LIST
69677: PUSH
69678: LD_INT 5
69680: PUSH
69681: LD_INT 5
69683: PUSH
69684: EMPTY
69685: LIST
69686: LIST
69687: PUSH
69688: LD_INT 4
69690: PUSH
69691: LD_INT 5
69693: PUSH
69694: EMPTY
69695: LIST
69696: LIST
69697: PUSH
69698: LD_INT 3
69700: PUSH
69701: LD_INT 4
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 3
69710: PUSH
69711: LD_INT 3
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 5
69720: PUSH
69721: LD_INT 3
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 3
69730: PUSH
69731: LD_INT 5
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: EMPTY
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: LIST
69775: LIST
69776: LIST
69777: LIST
69778: LIST
69779: LIST
69780: LIST
69781: LIST
69782: LIST
69783: LIST
69784: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69785: LD_ADDR_VAR 0 33
69789: PUSH
69790: LD_INT 4
69792: NEG
69793: PUSH
69794: LD_INT 4
69796: NEG
69797: PUSH
69798: EMPTY
69799: LIST
69800: LIST
69801: PUSH
69802: LD_INT 4
69804: NEG
69805: PUSH
69806: LD_INT 5
69808: NEG
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 3
69816: NEG
69817: PUSH
69818: LD_INT 4
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 3
69828: NEG
69829: PUSH
69830: LD_INT 3
69832: NEG
69833: PUSH
69834: EMPTY
69835: LIST
69836: LIST
69837: PUSH
69838: LD_INT 4
69840: NEG
69841: PUSH
69842: LD_INT 3
69844: NEG
69845: PUSH
69846: EMPTY
69847: LIST
69848: LIST
69849: PUSH
69850: LD_INT 5
69852: NEG
69853: PUSH
69854: LD_INT 4
69856: NEG
69857: PUSH
69858: EMPTY
69859: LIST
69860: LIST
69861: PUSH
69862: LD_INT 5
69864: NEG
69865: PUSH
69866: LD_INT 5
69868: NEG
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 3
69876: NEG
69877: PUSH
69878: LD_INT 5
69880: NEG
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: PUSH
69886: LD_INT 5
69888: NEG
69889: PUSH
69890: LD_INT 3
69892: NEG
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 0
69900: PUSH
69901: LD_INT 3
69903: NEG
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: LD_INT 4
69914: NEG
69915: PUSH
69916: EMPTY
69917: LIST
69918: LIST
69919: PUSH
69920: LD_INT 1
69922: PUSH
69923: LD_INT 3
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 1
69933: PUSH
69934: LD_INT 2
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 0
69944: PUSH
69945: LD_INT 2
69947: NEG
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 1
69955: NEG
69956: PUSH
69957: LD_INT 3
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 1
69967: NEG
69968: PUSH
69969: LD_INT 4
69971: NEG
69972: PUSH
69973: EMPTY
69974: LIST
69975: LIST
69976: PUSH
69977: LD_INT 2
69979: PUSH
69980: LD_INT 2
69982: NEG
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 2
69990: NEG
69991: PUSH
69992: LD_INT 4
69994: NEG
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 4
70002: PUSH
70003: LD_INT 0
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 4
70012: PUSH
70013: LD_INT 1
70015: NEG
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 5
70023: PUSH
70024: LD_INT 0
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 5
70033: PUSH
70034: LD_INT 1
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: LD_INT 4
70043: PUSH
70044: LD_INT 1
70046: PUSH
70047: EMPTY
70048: LIST
70049: LIST
70050: PUSH
70051: LD_INT 3
70053: PUSH
70054: LD_INT 0
70056: PUSH
70057: EMPTY
70058: LIST
70059: LIST
70060: PUSH
70061: LD_INT 3
70063: PUSH
70064: LD_INT 1
70066: NEG
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 3
70074: PUSH
70075: LD_INT 2
70077: NEG
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 5
70085: PUSH
70086: LD_INT 2
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 3
70095: PUSH
70096: LD_INT 3
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 3
70105: PUSH
70106: LD_INT 2
70108: PUSH
70109: EMPTY
70110: LIST
70111: LIST
70112: PUSH
70113: LD_INT 4
70115: PUSH
70116: LD_INT 3
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 4
70125: PUSH
70126: LD_INT 4
70128: PUSH
70129: EMPTY
70130: LIST
70131: LIST
70132: PUSH
70133: LD_INT 3
70135: PUSH
70136: LD_INT 4
70138: PUSH
70139: EMPTY
70140: LIST
70141: LIST
70142: PUSH
70143: LD_INT 2
70145: PUSH
70146: LD_INT 3
70148: PUSH
70149: EMPTY
70150: LIST
70151: LIST
70152: PUSH
70153: LD_INT 2
70155: PUSH
70156: LD_INT 2
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: PUSH
70163: LD_INT 4
70165: PUSH
70166: LD_INT 2
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 2
70175: PUSH
70176: LD_INT 4
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 0
70185: PUSH
70186: LD_INT 4
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 0
70195: PUSH
70196: LD_INT 3
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 1
70205: PUSH
70206: LD_INT 4
70208: PUSH
70209: EMPTY
70210: LIST
70211: LIST
70212: PUSH
70213: LD_INT 1
70215: PUSH
70216: LD_INT 5
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 0
70225: PUSH
70226: LD_INT 5
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 1
70235: NEG
70236: PUSH
70237: LD_INT 4
70239: PUSH
70240: EMPTY
70241: LIST
70242: LIST
70243: PUSH
70244: LD_INT 1
70246: NEG
70247: PUSH
70248: LD_INT 3
70250: PUSH
70251: EMPTY
70252: LIST
70253: LIST
70254: PUSH
70255: LD_INT 2
70257: PUSH
70258: LD_INT 5
70260: PUSH
70261: EMPTY
70262: LIST
70263: LIST
70264: PUSH
70265: LD_INT 2
70267: NEG
70268: PUSH
70269: LD_INT 3
70271: PUSH
70272: EMPTY
70273: LIST
70274: LIST
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: LIST
70280: LIST
70281: LIST
70282: LIST
70283: LIST
70284: LIST
70285: LIST
70286: LIST
70287: LIST
70288: LIST
70289: LIST
70290: LIST
70291: LIST
70292: LIST
70293: LIST
70294: LIST
70295: LIST
70296: LIST
70297: LIST
70298: LIST
70299: LIST
70300: LIST
70301: LIST
70302: LIST
70303: LIST
70304: LIST
70305: LIST
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70323: LD_ADDR_VAR 0 34
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: LD_INT 4
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 0
70341: PUSH
70342: LD_INT 5
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 1
70352: PUSH
70353: LD_INT 4
70355: NEG
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 1
70363: PUSH
70364: LD_INT 3
70366: NEG
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 0
70374: PUSH
70375: LD_INT 3
70377: NEG
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 1
70385: NEG
70386: PUSH
70387: LD_INT 4
70389: NEG
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 1
70397: NEG
70398: PUSH
70399: LD_INT 5
70401: NEG
70402: PUSH
70403: EMPTY
70404: LIST
70405: LIST
70406: PUSH
70407: LD_INT 2
70409: PUSH
70410: LD_INT 3
70412: NEG
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: PUSH
70418: LD_INT 2
70420: NEG
70421: PUSH
70422: LD_INT 5
70424: NEG
70425: PUSH
70426: EMPTY
70427: LIST
70428: LIST
70429: PUSH
70430: LD_INT 3
70432: PUSH
70433: LD_INT 0
70435: PUSH
70436: EMPTY
70437: LIST
70438: LIST
70439: PUSH
70440: LD_INT 3
70442: PUSH
70443: LD_INT 1
70445: NEG
70446: PUSH
70447: EMPTY
70448: LIST
70449: LIST
70450: PUSH
70451: LD_INT 4
70453: PUSH
70454: LD_INT 0
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: LD_INT 4
70463: PUSH
70464: LD_INT 1
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 3
70473: PUSH
70474: LD_INT 1
70476: PUSH
70477: EMPTY
70478: LIST
70479: LIST
70480: PUSH
70481: LD_INT 2
70483: PUSH
70484: LD_INT 0
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: PUSH
70491: LD_INT 2
70493: PUSH
70494: LD_INT 1
70496: NEG
70497: PUSH
70498: EMPTY
70499: LIST
70500: LIST
70501: PUSH
70502: LD_INT 2
70504: PUSH
70505: LD_INT 2
70507: NEG
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: PUSH
70513: LD_INT 4
70515: PUSH
70516: LD_INT 2
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 4
70525: PUSH
70526: LD_INT 4
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 4
70535: PUSH
70536: LD_INT 3
70538: PUSH
70539: EMPTY
70540: LIST
70541: LIST
70542: PUSH
70543: LD_INT 5
70545: PUSH
70546: LD_INT 4
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 5
70555: PUSH
70556: LD_INT 5
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 4
70565: PUSH
70566: LD_INT 5
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 3
70575: PUSH
70576: LD_INT 4
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: PUSH
70583: LD_INT 3
70585: PUSH
70586: LD_INT 3
70588: PUSH
70589: EMPTY
70590: LIST
70591: LIST
70592: PUSH
70593: LD_INT 5
70595: PUSH
70596: LD_INT 3
70598: PUSH
70599: EMPTY
70600: LIST
70601: LIST
70602: PUSH
70603: LD_INT 3
70605: PUSH
70606: LD_INT 5
70608: PUSH
70609: EMPTY
70610: LIST
70611: LIST
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: LD_INT 3
70618: PUSH
70619: EMPTY
70620: LIST
70621: LIST
70622: PUSH
70623: LD_INT 0
70625: PUSH
70626: LD_INT 2
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: PUSH
70633: LD_INT 1
70635: PUSH
70636: LD_INT 3
70638: PUSH
70639: EMPTY
70640: LIST
70641: LIST
70642: PUSH
70643: LD_INT 1
70645: PUSH
70646: LD_INT 4
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 0
70655: PUSH
70656: LD_INT 4
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 1
70665: NEG
70666: PUSH
70667: LD_INT 3
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 1
70676: NEG
70677: PUSH
70678: LD_INT 2
70680: PUSH
70681: EMPTY
70682: LIST
70683: LIST
70684: PUSH
70685: LD_INT 2
70687: PUSH
70688: LD_INT 4
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: PUSH
70695: LD_INT 2
70697: NEG
70698: PUSH
70699: LD_INT 2
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 4
70708: NEG
70709: PUSH
70710: LD_INT 0
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 4
70719: NEG
70720: PUSH
70721: LD_INT 1
70723: NEG
70724: PUSH
70725: EMPTY
70726: LIST
70727: LIST
70728: PUSH
70729: LD_INT 3
70731: NEG
70732: PUSH
70733: LD_INT 0
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 3
70742: NEG
70743: PUSH
70744: LD_INT 1
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 4
70753: NEG
70754: PUSH
70755: LD_INT 1
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 5
70764: NEG
70765: PUSH
70766: LD_INT 0
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 5
70775: NEG
70776: PUSH
70777: LD_INT 1
70779: NEG
70780: PUSH
70781: EMPTY
70782: LIST
70783: LIST
70784: PUSH
70785: LD_INT 5
70787: NEG
70788: PUSH
70789: LD_INT 2
70791: NEG
70792: PUSH
70793: EMPTY
70794: LIST
70795: LIST
70796: PUSH
70797: LD_INT 3
70799: NEG
70800: PUSH
70801: LD_INT 2
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: LIST
70840: LIST
70841: LIST
70842: LIST
70843: LIST
70844: LIST
70845: LIST
70846: LIST
70847: LIST
70848: LIST
70849: LIST
70850: LIST
70851: LIST
70852: LIST
70853: LIST
70854: ST_TO_ADDR
// end ; end ;
70855: GO 70858
70857: POP
// case btype of b_depot , b_warehouse :
70858: LD_VAR 0 1
70862: PUSH
70863: LD_INT 0
70865: DOUBLE
70866: EQUAL
70867: IFTRUE 70877
70869: LD_INT 1
70871: DOUBLE
70872: EQUAL
70873: IFTRUE 70877
70875: GO 71078
70877: POP
// case nation of nation_american :
70878: LD_VAR 0 5
70882: PUSH
70883: LD_INT 1
70885: DOUBLE
70886: EQUAL
70887: IFTRUE 70891
70889: GO 70947
70891: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70892: LD_ADDR_VAR 0 9
70896: PUSH
70897: LD_VAR 0 11
70901: PUSH
70902: LD_VAR 0 12
70906: PUSH
70907: LD_VAR 0 13
70911: PUSH
70912: LD_VAR 0 14
70916: PUSH
70917: LD_VAR 0 15
70921: PUSH
70922: LD_VAR 0 16
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: PUSH
70935: LD_VAR 0 4
70939: PUSH
70940: LD_INT 1
70942: PLUS
70943: ARRAY
70944: ST_TO_ADDR
70945: GO 71076
70947: LD_INT 2
70949: DOUBLE
70950: EQUAL
70951: IFTRUE 70955
70953: GO 71011
70955: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70956: LD_ADDR_VAR 0 9
70960: PUSH
70961: LD_VAR 0 17
70965: PUSH
70966: LD_VAR 0 18
70970: PUSH
70971: LD_VAR 0 19
70975: PUSH
70976: LD_VAR 0 20
70980: PUSH
70981: LD_VAR 0 21
70985: PUSH
70986: LD_VAR 0 22
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: PUSH
70999: LD_VAR 0 4
71003: PUSH
71004: LD_INT 1
71006: PLUS
71007: ARRAY
71008: ST_TO_ADDR
71009: GO 71076
71011: LD_INT 3
71013: DOUBLE
71014: EQUAL
71015: IFTRUE 71019
71017: GO 71075
71019: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
71020: LD_ADDR_VAR 0 9
71024: PUSH
71025: LD_VAR 0 23
71029: PUSH
71030: LD_VAR 0 24
71034: PUSH
71035: LD_VAR 0 25
71039: PUSH
71040: LD_VAR 0 26
71044: PUSH
71045: LD_VAR 0 27
71049: PUSH
71050: LD_VAR 0 28
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: LIST
71059: LIST
71060: LIST
71061: LIST
71062: PUSH
71063: LD_VAR 0 4
71067: PUSH
71068: LD_INT 1
71070: PLUS
71071: ARRAY
71072: ST_TO_ADDR
71073: GO 71076
71075: POP
71076: GO 71631
71078: LD_INT 2
71080: DOUBLE
71081: EQUAL
71082: IFTRUE 71092
71084: LD_INT 3
71086: DOUBLE
71087: EQUAL
71088: IFTRUE 71092
71090: GO 71148
71092: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
71093: LD_ADDR_VAR 0 9
71097: PUSH
71098: LD_VAR 0 29
71102: PUSH
71103: LD_VAR 0 30
71107: PUSH
71108: LD_VAR 0 31
71112: PUSH
71113: LD_VAR 0 32
71117: PUSH
71118: LD_VAR 0 33
71122: PUSH
71123: LD_VAR 0 34
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: PUSH
71136: LD_VAR 0 4
71140: PUSH
71141: LD_INT 1
71143: PLUS
71144: ARRAY
71145: ST_TO_ADDR
71146: GO 71631
71148: LD_INT 16
71150: DOUBLE
71151: EQUAL
71152: IFTRUE 71210
71154: LD_INT 17
71156: DOUBLE
71157: EQUAL
71158: IFTRUE 71210
71160: LD_INT 18
71162: DOUBLE
71163: EQUAL
71164: IFTRUE 71210
71166: LD_INT 19
71168: DOUBLE
71169: EQUAL
71170: IFTRUE 71210
71172: LD_INT 22
71174: DOUBLE
71175: EQUAL
71176: IFTRUE 71210
71178: LD_INT 20
71180: DOUBLE
71181: EQUAL
71182: IFTRUE 71210
71184: LD_INT 21
71186: DOUBLE
71187: EQUAL
71188: IFTRUE 71210
71190: LD_INT 23
71192: DOUBLE
71193: EQUAL
71194: IFTRUE 71210
71196: LD_INT 24
71198: DOUBLE
71199: EQUAL
71200: IFTRUE 71210
71202: LD_INT 25
71204: DOUBLE
71205: EQUAL
71206: IFTRUE 71210
71208: GO 71266
71210: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71211: LD_ADDR_VAR 0 9
71215: PUSH
71216: LD_VAR 0 35
71220: PUSH
71221: LD_VAR 0 36
71225: PUSH
71226: LD_VAR 0 37
71230: PUSH
71231: LD_VAR 0 38
71235: PUSH
71236: LD_VAR 0 39
71240: PUSH
71241: LD_VAR 0 40
71245: PUSH
71246: EMPTY
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: PUSH
71254: LD_VAR 0 4
71258: PUSH
71259: LD_INT 1
71261: PLUS
71262: ARRAY
71263: ST_TO_ADDR
71264: GO 71631
71266: LD_INT 6
71268: DOUBLE
71269: EQUAL
71270: IFTRUE 71322
71272: LD_INT 7
71274: DOUBLE
71275: EQUAL
71276: IFTRUE 71322
71278: LD_INT 8
71280: DOUBLE
71281: EQUAL
71282: IFTRUE 71322
71284: LD_INT 13
71286: DOUBLE
71287: EQUAL
71288: IFTRUE 71322
71290: LD_INT 12
71292: DOUBLE
71293: EQUAL
71294: IFTRUE 71322
71296: LD_INT 15
71298: DOUBLE
71299: EQUAL
71300: IFTRUE 71322
71302: LD_INT 11
71304: DOUBLE
71305: EQUAL
71306: IFTRUE 71322
71308: LD_INT 14
71310: DOUBLE
71311: EQUAL
71312: IFTRUE 71322
71314: LD_INT 10
71316: DOUBLE
71317: EQUAL
71318: IFTRUE 71322
71320: GO 71378
71322: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71323: LD_ADDR_VAR 0 9
71327: PUSH
71328: LD_VAR 0 41
71332: PUSH
71333: LD_VAR 0 42
71337: PUSH
71338: LD_VAR 0 43
71342: PUSH
71343: LD_VAR 0 44
71347: PUSH
71348: LD_VAR 0 45
71352: PUSH
71353: LD_VAR 0 46
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: PUSH
71366: LD_VAR 0 4
71370: PUSH
71371: LD_INT 1
71373: PLUS
71374: ARRAY
71375: ST_TO_ADDR
71376: GO 71631
71378: LD_INT 36
71380: DOUBLE
71381: EQUAL
71382: IFTRUE 71386
71384: GO 71442
71386: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71387: LD_ADDR_VAR 0 9
71391: PUSH
71392: LD_VAR 0 47
71396: PUSH
71397: LD_VAR 0 48
71401: PUSH
71402: LD_VAR 0 49
71406: PUSH
71407: LD_VAR 0 50
71411: PUSH
71412: LD_VAR 0 51
71416: PUSH
71417: LD_VAR 0 52
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: PUSH
71430: LD_VAR 0 4
71434: PUSH
71435: LD_INT 1
71437: PLUS
71438: ARRAY
71439: ST_TO_ADDR
71440: GO 71631
71442: LD_INT 4
71444: DOUBLE
71445: EQUAL
71446: IFTRUE 71468
71448: LD_INT 5
71450: DOUBLE
71451: EQUAL
71452: IFTRUE 71468
71454: LD_INT 34
71456: DOUBLE
71457: EQUAL
71458: IFTRUE 71468
71460: LD_INT 37
71462: DOUBLE
71463: EQUAL
71464: IFTRUE 71468
71466: GO 71524
71468: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71469: LD_ADDR_VAR 0 9
71473: PUSH
71474: LD_VAR 0 53
71478: PUSH
71479: LD_VAR 0 54
71483: PUSH
71484: LD_VAR 0 55
71488: PUSH
71489: LD_VAR 0 56
71493: PUSH
71494: LD_VAR 0 57
71498: PUSH
71499: LD_VAR 0 58
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: PUSH
71512: LD_VAR 0 4
71516: PUSH
71517: LD_INT 1
71519: PLUS
71520: ARRAY
71521: ST_TO_ADDR
71522: GO 71631
71524: LD_INT 31
71526: DOUBLE
71527: EQUAL
71528: IFTRUE 71574
71530: LD_INT 32
71532: DOUBLE
71533: EQUAL
71534: IFTRUE 71574
71536: LD_INT 33
71538: DOUBLE
71539: EQUAL
71540: IFTRUE 71574
71542: LD_INT 27
71544: DOUBLE
71545: EQUAL
71546: IFTRUE 71574
71548: LD_INT 26
71550: DOUBLE
71551: EQUAL
71552: IFTRUE 71574
71554: LD_INT 28
71556: DOUBLE
71557: EQUAL
71558: IFTRUE 71574
71560: LD_INT 29
71562: DOUBLE
71563: EQUAL
71564: IFTRUE 71574
71566: LD_INT 30
71568: DOUBLE
71569: EQUAL
71570: IFTRUE 71574
71572: GO 71630
71574: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71575: LD_ADDR_VAR 0 9
71579: PUSH
71580: LD_VAR 0 59
71584: PUSH
71585: LD_VAR 0 60
71589: PUSH
71590: LD_VAR 0 61
71594: PUSH
71595: LD_VAR 0 62
71599: PUSH
71600: LD_VAR 0 63
71604: PUSH
71605: LD_VAR 0 64
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: PUSH
71618: LD_VAR 0 4
71622: PUSH
71623: LD_INT 1
71625: PLUS
71626: ARRAY
71627: ST_TO_ADDR
71628: GO 71631
71630: POP
// temp_list2 = [ ] ;
71631: LD_ADDR_VAR 0 10
71635: PUSH
71636: EMPTY
71637: ST_TO_ADDR
// for i in temp_list do
71638: LD_ADDR_VAR 0 8
71642: PUSH
71643: LD_VAR 0 9
71647: PUSH
71648: FOR_IN
71649: IFFALSE 71701
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71651: LD_ADDR_VAR 0 10
71655: PUSH
71656: LD_VAR 0 10
71660: PUSH
71661: LD_VAR 0 8
71665: PUSH
71666: LD_INT 1
71668: ARRAY
71669: PUSH
71670: LD_VAR 0 2
71674: PLUS
71675: PUSH
71676: LD_VAR 0 8
71680: PUSH
71681: LD_INT 2
71683: ARRAY
71684: PUSH
71685: LD_VAR 0 3
71689: PLUS
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: EMPTY
71696: LIST
71697: ADD
71698: ST_TO_ADDR
71699: GO 71648
71701: POP
71702: POP
// result = temp_list2 ;
71703: LD_ADDR_VAR 0 7
71707: PUSH
71708: LD_VAR 0 10
71712: ST_TO_ADDR
// end ;
71713: LD_VAR 0 7
71717: RET
// export function EnemyInRange ( unit , dist ) ; begin
71718: LD_INT 0
71720: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71721: LD_ADDR_VAR 0 3
71725: PUSH
71726: LD_VAR 0 1
71730: PPUSH
71731: CALL_OW 255
71735: PPUSH
71736: LD_VAR 0 1
71740: PPUSH
71741: CALL_OW 250
71745: PPUSH
71746: LD_VAR 0 1
71750: PPUSH
71751: CALL_OW 251
71755: PPUSH
71756: LD_VAR 0 2
71760: PPUSH
71761: CALL 45120 0 4
71765: PUSH
71766: LD_INT 4
71768: ARRAY
71769: ST_TO_ADDR
// end ;
71770: LD_VAR 0 3
71774: RET
// export function PlayerSeeMe ( unit ) ; begin
71775: LD_INT 0
71777: PPUSH
// result := See ( your_side , unit ) ;
71778: LD_ADDR_VAR 0 2
71782: PUSH
71783: LD_OWVAR 2
71787: PPUSH
71788: LD_VAR 0 1
71792: PPUSH
71793: CALL_OW 292
71797: ST_TO_ADDR
// end ;
71798: LD_VAR 0 2
71802: RET
// export function ReverseDir ( unit ) ; begin
71803: LD_INT 0
71805: PPUSH
// if not unit then
71806: LD_VAR 0 1
71810: NOT
71811: IFFALSE 71815
// exit ;
71813: GO 71838
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71815: LD_ADDR_VAR 0 2
71819: PUSH
71820: LD_VAR 0 1
71824: PPUSH
71825: CALL_OW 254
71829: PUSH
71830: LD_INT 3
71832: PLUS
71833: PUSH
71834: LD_INT 6
71836: MOD
71837: ST_TO_ADDR
// end ;
71838: LD_VAR 0 2
71842: RET
// export function ReverseArray ( array ) ; var i ; begin
71843: LD_INT 0
71845: PPUSH
71846: PPUSH
// if not array then
71847: LD_VAR 0 1
71851: NOT
71852: IFFALSE 71856
// exit ;
71854: GO 71911
// result := [ ] ;
71856: LD_ADDR_VAR 0 2
71860: PUSH
71861: EMPTY
71862: ST_TO_ADDR
// for i := array downto 1 do
71863: LD_ADDR_VAR 0 3
71867: PUSH
71868: DOUBLE
71869: LD_VAR 0 1
71873: INC
71874: ST_TO_ADDR
71875: LD_INT 1
71877: PUSH
71878: FOR_DOWNTO
71879: IFFALSE 71909
// result := Join ( result , array [ i ] ) ;
71881: LD_ADDR_VAR 0 2
71885: PUSH
71886: LD_VAR 0 2
71890: PPUSH
71891: LD_VAR 0 1
71895: PUSH
71896: LD_VAR 0 3
71900: ARRAY
71901: PPUSH
71902: CALL 76555 0 2
71906: ST_TO_ADDR
71907: GO 71878
71909: POP
71910: POP
// end ;
71911: LD_VAR 0 2
71915: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71916: LD_INT 0
71918: PPUSH
71919: PPUSH
71920: PPUSH
71921: PPUSH
71922: PPUSH
71923: PPUSH
// if not unit or not hexes then
71924: LD_VAR 0 1
71928: NOT
71929: PUSH
71930: LD_VAR 0 2
71934: NOT
71935: OR
71936: IFFALSE 71940
// exit ;
71938: GO 72063
// dist := 9999 ;
71940: LD_ADDR_VAR 0 5
71944: PUSH
71945: LD_INT 9999
71947: ST_TO_ADDR
// for i = 1 to hexes do
71948: LD_ADDR_VAR 0 4
71952: PUSH
71953: DOUBLE
71954: LD_INT 1
71956: DEC
71957: ST_TO_ADDR
71958: LD_VAR 0 2
71962: PUSH
71963: FOR_TO
71964: IFFALSE 72051
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71966: LD_ADDR_VAR 0 6
71970: PUSH
71971: LD_VAR 0 1
71975: PPUSH
71976: LD_VAR 0 2
71980: PUSH
71981: LD_VAR 0 4
71985: ARRAY
71986: PUSH
71987: LD_INT 1
71989: ARRAY
71990: PPUSH
71991: LD_VAR 0 2
71995: PUSH
71996: LD_VAR 0 4
72000: ARRAY
72001: PUSH
72002: LD_INT 2
72004: ARRAY
72005: PPUSH
72006: CALL_OW 297
72010: ST_TO_ADDR
// if tdist < dist then
72011: LD_VAR 0 6
72015: PUSH
72016: LD_VAR 0 5
72020: LESS
72021: IFFALSE 72049
// begin hex := hexes [ i ] ;
72023: LD_ADDR_VAR 0 8
72027: PUSH
72028: LD_VAR 0 2
72032: PUSH
72033: LD_VAR 0 4
72037: ARRAY
72038: ST_TO_ADDR
// dist := tdist ;
72039: LD_ADDR_VAR 0 5
72043: PUSH
72044: LD_VAR 0 6
72048: ST_TO_ADDR
// end ; end ;
72049: GO 71963
72051: POP
72052: POP
// result := hex ;
72053: LD_ADDR_VAR 0 3
72057: PUSH
72058: LD_VAR 0 8
72062: ST_TO_ADDR
// end ;
72063: LD_VAR 0 3
72067: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
72068: LD_INT 0
72070: PPUSH
72071: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
72072: LD_VAR 0 1
72076: NOT
72077: PUSH
72078: LD_VAR 0 1
72082: PUSH
72083: LD_INT 21
72085: PUSH
72086: LD_INT 2
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 23
72095: PUSH
72096: LD_INT 2
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PPUSH
72107: CALL_OW 69
72111: IN
72112: NOT
72113: OR
72114: IFFALSE 72118
// exit ;
72116: GO 72165
// for i = 1 to 3 do
72118: LD_ADDR_VAR 0 3
72122: PUSH
72123: DOUBLE
72124: LD_INT 1
72126: DEC
72127: ST_TO_ADDR
72128: LD_INT 3
72130: PUSH
72131: FOR_TO
72132: IFFALSE 72163
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72134: LD_VAR 0 1
72138: PPUSH
72139: CALL_OW 250
72143: PPUSH
72144: LD_VAR 0 1
72148: PPUSH
72149: CALL_OW 251
72153: PPUSH
72154: LD_INT 1
72156: PPUSH
72157: CALL_OW 453
72161: GO 72131
72163: POP
72164: POP
// end ;
72165: LD_VAR 0 2
72169: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72170: LD_INT 0
72172: PPUSH
72173: PPUSH
72174: PPUSH
72175: PPUSH
72176: PPUSH
72177: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72178: LD_VAR 0 1
72182: NOT
72183: PUSH
72184: LD_VAR 0 2
72188: NOT
72189: OR
72190: PUSH
72191: LD_VAR 0 1
72195: PPUSH
72196: CALL_OW 314
72200: OR
72201: IFFALSE 72205
// exit ;
72203: GO 72672
// if GetLives ( i ) < 250 then
72205: LD_VAR 0 4
72209: PPUSH
72210: CALL_OW 256
72214: PUSH
72215: LD_INT 250
72217: LESS
72218: IFFALSE 72231
// begin ComAutodestruct ( i ) ;
72220: LD_VAR 0 4
72224: PPUSH
72225: CALL 72068 0 1
// exit ;
72229: GO 72672
// end ; x := GetX ( enemy_unit ) ;
72231: LD_ADDR_VAR 0 7
72235: PUSH
72236: LD_VAR 0 2
72240: PPUSH
72241: CALL_OW 250
72245: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72246: LD_ADDR_VAR 0 8
72250: PUSH
72251: LD_VAR 0 2
72255: PPUSH
72256: CALL_OW 251
72260: ST_TO_ADDR
// if not x or not y then
72261: LD_VAR 0 7
72265: NOT
72266: PUSH
72267: LD_VAR 0 8
72271: NOT
72272: OR
72273: IFFALSE 72277
// exit ;
72275: GO 72672
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72277: LD_ADDR_VAR 0 6
72281: PUSH
72282: LD_VAR 0 7
72286: PPUSH
72287: LD_INT 0
72289: PPUSH
72290: LD_INT 4
72292: PPUSH
72293: CALL_OW 272
72297: PUSH
72298: LD_VAR 0 8
72302: PPUSH
72303: LD_INT 0
72305: PPUSH
72306: LD_INT 4
72308: PPUSH
72309: CALL_OW 273
72313: PUSH
72314: EMPTY
72315: LIST
72316: LIST
72317: PUSH
72318: LD_VAR 0 7
72322: PPUSH
72323: LD_INT 1
72325: PPUSH
72326: LD_INT 4
72328: PPUSH
72329: CALL_OW 272
72333: PUSH
72334: LD_VAR 0 8
72338: PPUSH
72339: LD_INT 1
72341: PPUSH
72342: LD_INT 4
72344: PPUSH
72345: CALL_OW 273
72349: PUSH
72350: EMPTY
72351: LIST
72352: LIST
72353: PUSH
72354: LD_VAR 0 7
72358: PPUSH
72359: LD_INT 2
72361: PPUSH
72362: LD_INT 4
72364: PPUSH
72365: CALL_OW 272
72369: PUSH
72370: LD_VAR 0 8
72374: PPUSH
72375: LD_INT 2
72377: PPUSH
72378: LD_INT 4
72380: PPUSH
72381: CALL_OW 273
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_VAR 0 7
72394: PPUSH
72395: LD_INT 3
72397: PPUSH
72398: LD_INT 4
72400: PPUSH
72401: CALL_OW 272
72405: PUSH
72406: LD_VAR 0 8
72410: PPUSH
72411: LD_INT 3
72413: PPUSH
72414: LD_INT 4
72416: PPUSH
72417: CALL_OW 273
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: PUSH
72426: LD_VAR 0 7
72430: PPUSH
72431: LD_INT 4
72433: PPUSH
72434: LD_INT 4
72436: PPUSH
72437: CALL_OW 272
72441: PUSH
72442: LD_VAR 0 8
72446: PPUSH
72447: LD_INT 4
72449: PPUSH
72450: LD_INT 4
72452: PPUSH
72453: CALL_OW 273
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_VAR 0 7
72466: PPUSH
72467: LD_INT 5
72469: PPUSH
72470: LD_INT 4
72472: PPUSH
72473: CALL_OW 272
72477: PUSH
72478: LD_VAR 0 8
72482: PPUSH
72483: LD_INT 5
72485: PPUSH
72486: LD_INT 4
72488: PPUSH
72489: CALL_OW 273
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: EMPTY
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: ST_TO_ADDR
// for i = tmp downto 1 do
72506: LD_ADDR_VAR 0 4
72510: PUSH
72511: DOUBLE
72512: LD_VAR 0 6
72516: INC
72517: ST_TO_ADDR
72518: LD_INT 1
72520: PUSH
72521: FOR_DOWNTO
72522: IFFALSE 72623
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72524: LD_VAR 0 6
72528: PUSH
72529: LD_VAR 0 4
72533: ARRAY
72534: PUSH
72535: LD_INT 1
72537: ARRAY
72538: PPUSH
72539: LD_VAR 0 6
72543: PUSH
72544: LD_VAR 0 4
72548: ARRAY
72549: PUSH
72550: LD_INT 2
72552: ARRAY
72553: PPUSH
72554: CALL_OW 488
72558: NOT
72559: PUSH
72560: LD_VAR 0 6
72564: PUSH
72565: LD_VAR 0 4
72569: ARRAY
72570: PUSH
72571: LD_INT 1
72573: ARRAY
72574: PPUSH
72575: LD_VAR 0 6
72579: PUSH
72580: LD_VAR 0 4
72584: ARRAY
72585: PUSH
72586: LD_INT 2
72588: ARRAY
72589: PPUSH
72590: CALL_OW 428
72594: PUSH
72595: LD_INT 0
72597: NONEQUAL
72598: OR
72599: IFFALSE 72621
// tmp := Delete ( tmp , i ) ;
72601: LD_ADDR_VAR 0 6
72605: PUSH
72606: LD_VAR 0 6
72610: PPUSH
72611: LD_VAR 0 4
72615: PPUSH
72616: CALL_OW 3
72620: ST_TO_ADDR
72621: GO 72521
72623: POP
72624: POP
// j := GetClosestHex ( unit , tmp ) ;
72625: LD_ADDR_VAR 0 5
72629: PUSH
72630: LD_VAR 0 1
72634: PPUSH
72635: LD_VAR 0 6
72639: PPUSH
72640: CALL 71916 0 2
72644: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72645: LD_VAR 0 1
72649: PPUSH
72650: LD_VAR 0 5
72654: PUSH
72655: LD_INT 1
72657: ARRAY
72658: PPUSH
72659: LD_VAR 0 5
72663: PUSH
72664: LD_INT 2
72666: ARRAY
72667: PPUSH
72668: CALL_OW 111
// end ;
72672: LD_VAR 0 3
72676: RET
// export function PrepareApemanSoldier ( ) ; begin
72677: LD_INT 0
72679: PPUSH
// uc_nation := 0 ;
72680: LD_ADDR_OWVAR 21
72684: PUSH
72685: LD_INT 0
72687: ST_TO_ADDR
// hc_sex := sex_male ;
72688: LD_ADDR_OWVAR 27
72692: PUSH
72693: LD_INT 1
72695: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72696: LD_ADDR_OWVAR 28
72700: PUSH
72701: LD_INT 15
72703: ST_TO_ADDR
// hc_gallery :=  ;
72704: LD_ADDR_OWVAR 33
72708: PUSH
72709: LD_STRING 
72711: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72712: LD_ADDR_OWVAR 31
72716: PUSH
72717: LD_INT 0
72719: PPUSH
72720: LD_INT 3
72722: PPUSH
72723: CALL_OW 12
72727: PUSH
72728: LD_INT 0
72730: PPUSH
72731: LD_INT 3
72733: PPUSH
72734: CALL_OW 12
72738: PUSH
72739: LD_INT 0
72741: PUSH
72742: LD_INT 0
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: LIST
72749: LIST
72750: ST_TO_ADDR
// end ;
72751: LD_VAR 0 1
72755: RET
// export function PrepareApemanEngineer ( ) ; begin
72756: LD_INT 0
72758: PPUSH
// uc_nation := 0 ;
72759: LD_ADDR_OWVAR 21
72763: PUSH
72764: LD_INT 0
72766: ST_TO_ADDR
// hc_sex := sex_male ;
72767: LD_ADDR_OWVAR 27
72771: PUSH
72772: LD_INT 1
72774: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72775: LD_ADDR_OWVAR 28
72779: PUSH
72780: LD_INT 16
72782: ST_TO_ADDR
// hc_gallery :=  ;
72783: LD_ADDR_OWVAR 33
72787: PUSH
72788: LD_STRING 
72790: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72791: LD_ADDR_OWVAR 31
72795: PUSH
72796: LD_INT 0
72798: PPUSH
72799: LD_INT 3
72801: PPUSH
72802: CALL_OW 12
72806: PUSH
72807: LD_INT 0
72809: PPUSH
72810: LD_INT 3
72812: PPUSH
72813: CALL_OW 12
72817: PUSH
72818: LD_INT 0
72820: PUSH
72821: LD_INT 0
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: ST_TO_ADDR
// end ;
72830: LD_VAR 0 1
72834: RET
// export function PrepareApeman ( agressivity ) ; begin
72835: LD_INT 0
72837: PPUSH
// uc_side := 0 ;
72838: LD_ADDR_OWVAR 20
72842: PUSH
72843: LD_INT 0
72845: ST_TO_ADDR
// uc_nation := 0 ;
72846: LD_ADDR_OWVAR 21
72850: PUSH
72851: LD_INT 0
72853: ST_TO_ADDR
// hc_sex := sex_male ;
72854: LD_ADDR_OWVAR 27
72858: PUSH
72859: LD_INT 1
72861: ST_TO_ADDR
// hc_class := class_apeman ;
72862: LD_ADDR_OWVAR 28
72866: PUSH
72867: LD_INT 12
72869: ST_TO_ADDR
// hc_gallery :=  ;
72870: LD_ADDR_OWVAR 33
72874: PUSH
72875: LD_STRING 
72877: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72878: LD_ADDR_OWVAR 35
72882: PUSH
72883: LD_VAR 0 1
72887: NEG
72888: PPUSH
72889: LD_VAR 0 1
72893: PPUSH
72894: CALL_OW 12
72898: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72899: LD_ADDR_OWVAR 31
72903: PUSH
72904: LD_INT 0
72906: PPUSH
72907: LD_INT 3
72909: PPUSH
72910: CALL_OW 12
72914: PUSH
72915: LD_INT 0
72917: PPUSH
72918: LD_INT 3
72920: PPUSH
72921: CALL_OW 12
72925: PUSH
72926: LD_INT 0
72928: PUSH
72929: LD_INT 0
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: LIST
72936: LIST
72937: ST_TO_ADDR
// end ;
72938: LD_VAR 0 2
72942: RET
// export function PrepareTiger ( agressivity ) ; begin
72943: LD_INT 0
72945: PPUSH
// uc_side := 0 ;
72946: LD_ADDR_OWVAR 20
72950: PUSH
72951: LD_INT 0
72953: ST_TO_ADDR
// uc_nation := 0 ;
72954: LD_ADDR_OWVAR 21
72958: PUSH
72959: LD_INT 0
72961: ST_TO_ADDR
// hc_class := class_tiger ;
72962: LD_ADDR_OWVAR 28
72966: PUSH
72967: LD_INT 14
72969: ST_TO_ADDR
// hc_gallery :=  ;
72970: LD_ADDR_OWVAR 33
72974: PUSH
72975: LD_STRING 
72977: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72978: LD_ADDR_OWVAR 35
72982: PUSH
72983: LD_VAR 0 1
72987: NEG
72988: PPUSH
72989: LD_VAR 0 1
72993: PPUSH
72994: CALL_OW 12
72998: ST_TO_ADDR
// end ;
72999: LD_VAR 0 2
73003: RET
// export function PrepareEnchidna ( ) ; begin
73004: LD_INT 0
73006: PPUSH
// uc_side := 0 ;
73007: LD_ADDR_OWVAR 20
73011: PUSH
73012: LD_INT 0
73014: ST_TO_ADDR
// uc_nation := 0 ;
73015: LD_ADDR_OWVAR 21
73019: PUSH
73020: LD_INT 0
73022: ST_TO_ADDR
// hc_class := class_baggie ;
73023: LD_ADDR_OWVAR 28
73027: PUSH
73028: LD_INT 13
73030: ST_TO_ADDR
// hc_gallery :=  ;
73031: LD_ADDR_OWVAR 33
73035: PUSH
73036: LD_STRING 
73038: ST_TO_ADDR
// end ;
73039: LD_VAR 0 1
73043: RET
// export function PrepareFrog ( ) ; begin
73044: LD_INT 0
73046: PPUSH
// uc_side := 0 ;
73047: LD_ADDR_OWVAR 20
73051: PUSH
73052: LD_INT 0
73054: ST_TO_ADDR
// uc_nation := 0 ;
73055: LD_ADDR_OWVAR 21
73059: PUSH
73060: LD_INT 0
73062: ST_TO_ADDR
// hc_class := class_frog ;
73063: LD_ADDR_OWVAR 28
73067: PUSH
73068: LD_INT 19
73070: ST_TO_ADDR
// hc_gallery :=  ;
73071: LD_ADDR_OWVAR 33
73075: PUSH
73076: LD_STRING 
73078: ST_TO_ADDR
// end ;
73079: LD_VAR 0 1
73083: RET
// export function PrepareFish ( ) ; begin
73084: LD_INT 0
73086: PPUSH
// uc_side := 0 ;
73087: LD_ADDR_OWVAR 20
73091: PUSH
73092: LD_INT 0
73094: ST_TO_ADDR
// uc_nation := 0 ;
73095: LD_ADDR_OWVAR 21
73099: PUSH
73100: LD_INT 0
73102: ST_TO_ADDR
// hc_class := class_fish ;
73103: LD_ADDR_OWVAR 28
73107: PUSH
73108: LD_INT 20
73110: ST_TO_ADDR
// hc_gallery :=  ;
73111: LD_ADDR_OWVAR 33
73115: PUSH
73116: LD_STRING 
73118: ST_TO_ADDR
// end ;
73119: LD_VAR 0 1
73123: RET
// export function PrepareBird ( ) ; begin
73124: LD_INT 0
73126: PPUSH
// uc_side := 0 ;
73127: LD_ADDR_OWVAR 20
73131: PUSH
73132: LD_INT 0
73134: ST_TO_ADDR
// uc_nation := 0 ;
73135: LD_ADDR_OWVAR 21
73139: PUSH
73140: LD_INT 0
73142: ST_TO_ADDR
// hc_class := class_phororhacos ;
73143: LD_ADDR_OWVAR 28
73147: PUSH
73148: LD_INT 18
73150: ST_TO_ADDR
// hc_gallery :=  ;
73151: LD_ADDR_OWVAR 33
73155: PUSH
73156: LD_STRING 
73158: ST_TO_ADDR
// end ;
73159: LD_VAR 0 1
73163: RET
// export function PrepareHorse ( ) ; begin
73164: LD_INT 0
73166: PPUSH
// uc_side := 0 ;
73167: LD_ADDR_OWVAR 20
73171: PUSH
73172: LD_INT 0
73174: ST_TO_ADDR
// uc_nation := 0 ;
73175: LD_ADDR_OWVAR 21
73179: PUSH
73180: LD_INT 0
73182: ST_TO_ADDR
// hc_class := class_horse ;
73183: LD_ADDR_OWVAR 28
73187: PUSH
73188: LD_INT 21
73190: ST_TO_ADDR
// hc_gallery :=  ;
73191: LD_ADDR_OWVAR 33
73195: PUSH
73196: LD_STRING 
73198: ST_TO_ADDR
// end ;
73199: LD_VAR 0 1
73203: RET
// export function PrepareMastodont ( ) ; begin
73204: LD_INT 0
73206: PPUSH
// uc_side := 0 ;
73207: LD_ADDR_OWVAR 20
73211: PUSH
73212: LD_INT 0
73214: ST_TO_ADDR
// uc_nation := 0 ;
73215: LD_ADDR_OWVAR 21
73219: PUSH
73220: LD_INT 0
73222: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73223: LD_ADDR_OWVAR 37
73227: PUSH
73228: LD_INT 31
73230: ST_TO_ADDR
// vc_control := control_rider ;
73231: LD_ADDR_OWVAR 38
73235: PUSH
73236: LD_INT 4
73238: ST_TO_ADDR
// end ;
73239: LD_VAR 0 1
73243: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73244: LD_INT 0
73246: PPUSH
73247: PPUSH
73248: PPUSH
// uc_side = 0 ;
73249: LD_ADDR_OWVAR 20
73253: PUSH
73254: LD_INT 0
73256: ST_TO_ADDR
// uc_nation = 0 ;
73257: LD_ADDR_OWVAR 21
73261: PUSH
73262: LD_INT 0
73264: ST_TO_ADDR
// InitHc_All ( ) ;
73265: CALL_OW 584
// InitVc ;
73269: CALL_OW 20
// if mastodonts then
73273: LD_VAR 0 6
73277: IFFALSE 73344
// for i = 1 to mastodonts do
73279: LD_ADDR_VAR 0 11
73283: PUSH
73284: DOUBLE
73285: LD_INT 1
73287: DEC
73288: ST_TO_ADDR
73289: LD_VAR 0 6
73293: PUSH
73294: FOR_TO
73295: IFFALSE 73342
// begin vc_chassis := 31 ;
73297: LD_ADDR_OWVAR 37
73301: PUSH
73302: LD_INT 31
73304: ST_TO_ADDR
// vc_control := control_rider ;
73305: LD_ADDR_OWVAR 38
73309: PUSH
73310: LD_INT 4
73312: ST_TO_ADDR
// animal := CreateVehicle ;
73313: LD_ADDR_VAR 0 12
73317: PUSH
73318: CALL_OW 45
73322: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73323: LD_VAR 0 12
73327: PPUSH
73328: LD_VAR 0 8
73332: PPUSH
73333: LD_INT 0
73335: PPUSH
73336: CALL 75472 0 3
// end ;
73340: GO 73294
73342: POP
73343: POP
// if horses then
73344: LD_VAR 0 5
73348: IFFALSE 73415
// for i = 1 to horses do
73350: LD_ADDR_VAR 0 11
73354: PUSH
73355: DOUBLE
73356: LD_INT 1
73358: DEC
73359: ST_TO_ADDR
73360: LD_VAR 0 5
73364: PUSH
73365: FOR_TO
73366: IFFALSE 73413
// begin hc_class := 21 ;
73368: LD_ADDR_OWVAR 28
73372: PUSH
73373: LD_INT 21
73375: ST_TO_ADDR
// hc_gallery :=  ;
73376: LD_ADDR_OWVAR 33
73380: PUSH
73381: LD_STRING 
73383: ST_TO_ADDR
// animal := CreateHuman ;
73384: LD_ADDR_VAR 0 12
73388: PUSH
73389: CALL_OW 44
73393: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73394: LD_VAR 0 12
73398: PPUSH
73399: LD_VAR 0 8
73403: PPUSH
73404: LD_INT 0
73406: PPUSH
73407: CALL 75472 0 3
// end ;
73411: GO 73365
73413: POP
73414: POP
// if birds then
73415: LD_VAR 0 1
73419: IFFALSE 73486
// for i = 1 to birds do
73421: LD_ADDR_VAR 0 11
73425: PUSH
73426: DOUBLE
73427: LD_INT 1
73429: DEC
73430: ST_TO_ADDR
73431: LD_VAR 0 1
73435: PUSH
73436: FOR_TO
73437: IFFALSE 73484
// begin hc_class = 18 ;
73439: LD_ADDR_OWVAR 28
73443: PUSH
73444: LD_INT 18
73446: ST_TO_ADDR
// hc_gallery =  ;
73447: LD_ADDR_OWVAR 33
73451: PUSH
73452: LD_STRING 
73454: ST_TO_ADDR
// animal := CreateHuman ;
73455: LD_ADDR_VAR 0 12
73459: PUSH
73460: CALL_OW 44
73464: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73465: LD_VAR 0 12
73469: PPUSH
73470: LD_VAR 0 8
73474: PPUSH
73475: LD_INT 0
73477: PPUSH
73478: CALL 75472 0 3
// end ;
73482: GO 73436
73484: POP
73485: POP
// if tigers then
73486: LD_VAR 0 2
73490: IFFALSE 73574
// for i = 1 to tigers do
73492: LD_ADDR_VAR 0 11
73496: PUSH
73497: DOUBLE
73498: LD_INT 1
73500: DEC
73501: ST_TO_ADDR
73502: LD_VAR 0 2
73506: PUSH
73507: FOR_TO
73508: IFFALSE 73572
// begin hc_class = class_tiger ;
73510: LD_ADDR_OWVAR 28
73514: PUSH
73515: LD_INT 14
73517: ST_TO_ADDR
// hc_gallery =  ;
73518: LD_ADDR_OWVAR 33
73522: PUSH
73523: LD_STRING 
73525: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73526: LD_ADDR_OWVAR 35
73530: PUSH
73531: LD_INT 7
73533: NEG
73534: PPUSH
73535: LD_INT 7
73537: PPUSH
73538: CALL_OW 12
73542: ST_TO_ADDR
// animal := CreateHuman ;
73543: LD_ADDR_VAR 0 12
73547: PUSH
73548: CALL_OW 44
73552: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73553: LD_VAR 0 12
73557: PPUSH
73558: LD_VAR 0 8
73562: PPUSH
73563: LD_INT 0
73565: PPUSH
73566: CALL 75472 0 3
// end ;
73570: GO 73507
73572: POP
73573: POP
// if apemans then
73574: LD_VAR 0 3
73578: IFFALSE 73701
// for i = 1 to apemans do
73580: LD_ADDR_VAR 0 11
73584: PUSH
73585: DOUBLE
73586: LD_INT 1
73588: DEC
73589: ST_TO_ADDR
73590: LD_VAR 0 3
73594: PUSH
73595: FOR_TO
73596: IFFALSE 73699
// begin hc_class = class_apeman ;
73598: LD_ADDR_OWVAR 28
73602: PUSH
73603: LD_INT 12
73605: ST_TO_ADDR
// hc_gallery =  ;
73606: LD_ADDR_OWVAR 33
73610: PUSH
73611: LD_STRING 
73613: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73614: LD_ADDR_OWVAR 35
73618: PUSH
73619: LD_INT 2
73621: NEG
73622: PPUSH
73623: LD_INT 2
73625: PPUSH
73626: CALL_OW 12
73630: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73631: LD_ADDR_OWVAR 31
73635: PUSH
73636: LD_INT 1
73638: PPUSH
73639: LD_INT 3
73641: PPUSH
73642: CALL_OW 12
73646: PUSH
73647: LD_INT 1
73649: PPUSH
73650: LD_INT 3
73652: PPUSH
73653: CALL_OW 12
73657: PUSH
73658: LD_INT 0
73660: PUSH
73661: LD_INT 0
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: ST_TO_ADDR
// animal := CreateHuman ;
73670: LD_ADDR_VAR 0 12
73674: PUSH
73675: CALL_OW 44
73679: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73680: LD_VAR 0 12
73684: PPUSH
73685: LD_VAR 0 8
73689: PPUSH
73690: LD_INT 0
73692: PPUSH
73693: CALL 75472 0 3
// end ;
73697: GO 73595
73699: POP
73700: POP
// if enchidnas then
73701: LD_VAR 0 4
73705: IFFALSE 73772
// for i = 1 to enchidnas do
73707: LD_ADDR_VAR 0 11
73711: PUSH
73712: DOUBLE
73713: LD_INT 1
73715: DEC
73716: ST_TO_ADDR
73717: LD_VAR 0 4
73721: PUSH
73722: FOR_TO
73723: IFFALSE 73770
// begin hc_class = 13 ;
73725: LD_ADDR_OWVAR 28
73729: PUSH
73730: LD_INT 13
73732: ST_TO_ADDR
// hc_gallery =  ;
73733: LD_ADDR_OWVAR 33
73737: PUSH
73738: LD_STRING 
73740: ST_TO_ADDR
// animal := CreateHuman ;
73741: LD_ADDR_VAR 0 12
73745: PUSH
73746: CALL_OW 44
73750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73751: LD_VAR 0 12
73755: PPUSH
73756: LD_VAR 0 8
73760: PPUSH
73761: LD_INT 0
73763: PPUSH
73764: CALL 75472 0 3
// end ;
73768: GO 73722
73770: POP
73771: POP
// if fishes then
73772: LD_VAR 0 7
73776: IFFALSE 73843
// for i = 1 to fishes do
73778: LD_ADDR_VAR 0 11
73782: PUSH
73783: DOUBLE
73784: LD_INT 1
73786: DEC
73787: ST_TO_ADDR
73788: LD_VAR 0 7
73792: PUSH
73793: FOR_TO
73794: IFFALSE 73841
// begin hc_class = 20 ;
73796: LD_ADDR_OWVAR 28
73800: PUSH
73801: LD_INT 20
73803: ST_TO_ADDR
// hc_gallery =  ;
73804: LD_ADDR_OWVAR 33
73808: PUSH
73809: LD_STRING 
73811: ST_TO_ADDR
// animal := CreateHuman ;
73812: LD_ADDR_VAR 0 12
73816: PUSH
73817: CALL_OW 44
73821: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73822: LD_VAR 0 12
73826: PPUSH
73827: LD_VAR 0 9
73831: PPUSH
73832: LD_INT 0
73834: PPUSH
73835: CALL 75472 0 3
// end ;
73839: GO 73793
73841: POP
73842: POP
// end ;
73843: LD_VAR 0 10
73847: RET
// export function WantHeal ( sci , unit ) ; begin
73848: LD_INT 0
73850: PPUSH
// if GetTaskList ( sci ) > 0 then
73851: LD_VAR 0 1
73855: PPUSH
73856: CALL_OW 437
73860: PUSH
73861: LD_INT 0
73863: GREATER
73864: IFFALSE 73934
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73866: LD_VAR 0 1
73870: PPUSH
73871: CALL_OW 437
73875: PUSH
73876: LD_INT 1
73878: ARRAY
73879: PUSH
73880: LD_INT 1
73882: ARRAY
73883: PUSH
73884: LD_STRING l
73886: EQUAL
73887: PUSH
73888: LD_VAR 0 1
73892: PPUSH
73893: CALL_OW 437
73897: PUSH
73898: LD_INT 1
73900: ARRAY
73901: PUSH
73902: LD_INT 4
73904: ARRAY
73905: PUSH
73906: LD_VAR 0 2
73910: EQUAL
73911: AND
73912: IFFALSE 73924
// result := true else
73914: LD_ADDR_VAR 0 3
73918: PUSH
73919: LD_INT 1
73921: ST_TO_ADDR
73922: GO 73932
// result := false ;
73924: LD_ADDR_VAR 0 3
73928: PUSH
73929: LD_INT 0
73931: ST_TO_ADDR
// end else
73932: GO 73942
// result := false ;
73934: LD_ADDR_VAR 0 3
73938: PUSH
73939: LD_INT 0
73941: ST_TO_ADDR
// end ;
73942: LD_VAR 0 3
73946: RET
// export function HealTarget ( sci ) ; begin
73947: LD_INT 0
73949: PPUSH
// if not sci then
73950: LD_VAR 0 1
73954: NOT
73955: IFFALSE 73959
// exit ;
73957: GO 74024
// result := 0 ;
73959: LD_ADDR_VAR 0 2
73963: PUSH
73964: LD_INT 0
73966: ST_TO_ADDR
// if GetTaskList ( sci ) then
73967: LD_VAR 0 1
73971: PPUSH
73972: CALL_OW 437
73976: IFFALSE 74024
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73978: LD_VAR 0 1
73982: PPUSH
73983: CALL_OW 437
73987: PUSH
73988: LD_INT 1
73990: ARRAY
73991: PUSH
73992: LD_INT 1
73994: ARRAY
73995: PUSH
73996: LD_STRING l
73998: EQUAL
73999: IFFALSE 74024
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
74001: LD_ADDR_VAR 0 2
74005: PUSH
74006: LD_VAR 0 1
74010: PPUSH
74011: CALL_OW 437
74015: PUSH
74016: LD_INT 1
74018: ARRAY
74019: PUSH
74020: LD_INT 4
74022: ARRAY
74023: ST_TO_ADDR
// end ;
74024: LD_VAR 0 2
74028: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
74029: LD_INT 0
74031: PPUSH
74032: PPUSH
74033: PPUSH
74034: PPUSH
// if not base_units then
74035: LD_VAR 0 1
74039: NOT
74040: IFFALSE 74044
// exit ;
74042: GO 74131
// result := false ;
74044: LD_ADDR_VAR 0 2
74048: PUSH
74049: LD_INT 0
74051: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
74052: LD_ADDR_VAR 0 5
74056: PUSH
74057: LD_VAR 0 1
74061: PPUSH
74062: LD_INT 21
74064: PUSH
74065: LD_INT 3
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PPUSH
74072: CALL_OW 72
74076: ST_TO_ADDR
// if not tmp then
74077: LD_VAR 0 5
74081: NOT
74082: IFFALSE 74086
// exit ;
74084: GO 74131
// for i in tmp do
74086: LD_ADDR_VAR 0 3
74090: PUSH
74091: LD_VAR 0 5
74095: PUSH
74096: FOR_IN
74097: IFFALSE 74129
// begin result := EnemyInRange ( i , 22 ) ;
74099: LD_ADDR_VAR 0 2
74103: PUSH
74104: LD_VAR 0 3
74108: PPUSH
74109: LD_INT 22
74111: PPUSH
74112: CALL 71718 0 2
74116: ST_TO_ADDR
// if result then
74117: LD_VAR 0 2
74121: IFFALSE 74127
// exit ;
74123: POP
74124: POP
74125: GO 74131
// end ;
74127: GO 74096
74129: POP
74130: POP
// end ;
74131: LD_VAR 0 2
74135: RET
// export function FilterByTag ( units , tag ) ; begin
74136: LD_INT 0
74138: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74139: LD_ADDR_VAR 0 3
74143: PUSH
74144: LD_VAR 0 1
74148: PPUSH
74149: LD_INT 120
74151: PUSH
74152: LD_VAR 0 2
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: PPUSH
74161: CALL_OW 72
74165: ST_TO_ADDR
// end ;
74166: LD_VAR 0 3
74170: RET
// export function IsDriver ( un ) ; begin
74171: LD_INT 0
74173: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74174: LD_ADDR_VAR 0 2
74178: PUSH
74179: LD_VAR 0 1
74183: PUSH
74184: LD_INT 55
74186: PUSH
74187: EMPTY
74188: LIST
74189: PPUSH
74190: CALL_OW 69
74194: IN
74195: ST_TO_ADDR
// end ;
74196: LD_VAR 0 2
74200: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74201: LD_INT 0
74203: PPUSH
74204: PPUSH
// list := [ ] ;
74205: LD_ADDR_VAR 0 5
74209: PUSH
74210: EMPTY
74211: ST_TO_ADDR
// case d of 0 :
74212: LD_VAR 0 3
74216: PUSH
74217: LD_INT 0
74219: DOUBLE
74220: EQUAL
74221: IFTRUE 74225
74223: GO 74358
74225: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74226: LD_ADDR_VAR 0 5
74230: PUSH
74231: LD_VAR 0 1
74235: PUSH
74236: LD_INT 4
74238: MINUS
74239: PUSH
74240: LD_VAR 0 2
74244: PUSH
74245: LD_INT 4
74247: MINUS
74248: PUSH
74249: LD_INT 2
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: LIST
74256: PUSH
74257: LD_VAR 0 1
74261: PUSH
74262: LD_INT 3
74264: MINUS
74265: PUSH
74266: LD_VAR 0 2
74270: PUSH
74271: LD_INT 1
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: LIST
74278: PUSH
74279: LD_VAR 0 1
74283: PUSH
74284: LD_INT 4
74286: PLUS
74287: PUSH
74288: LD_VAR 0 2
74292: PUSH
74293: LD_INT 4
74295: PUSH
74296: EMPTY
74297: LIST
74298: LIST
74299: LIST
74300: PUSH
74301: LD_VAR 0 1
74305: PUSH
74306: LD_INT 3
74308: PLUS
74309: PUSH
74310: LD_VAR 0 2
74314: PUSH
74315: LD_INT 3
74317: PLUS
74318: PUSH
74319: LD_INT 5
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: LIST
74326: PUSH
74327: LD_VAR 0 1
74331: PUSH
74332: LD_VAR 0 2
74336: PUSH
74337: LD_INT 4
74339: PLUS
74340: PUSH
74341: LD_INT 0
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: LIST
74348: PUSH
74349: EMPTY
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: ST_TO_ADDR
// end ; 1 :
74356: GO 75056
74358: LD_INT 1
74360: DOUBLE
74361: EQUAL
74362: IFTRUE 74366
74364: GO 74499
74366: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74367: LD_ADDR_VAR 0 5
74371: PUSH
74372: LD_VAR 0 1
74376: PUSH
74377: LD_VAR 0 2
74381: PUSH
74382: LD_INT 4
74384: MINUS
74385: PUSH
74386: LD_INT 3
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: LIST
74393: PUSH
74394: LD_VAR 0 1
74398: PUSH
74399: LD_INT 3
74401: MINUS
74402: PUSH
74403: LD_VAR 0 2
74407: PUSH
74408: LD_INT 3
74410: MINUS
74411: PUSH
74412: LD_INT 2
74414: PUSH
74415: EMPTY
74416: LIST
74417: LIST
74418: LIST
74419: PUSH
74420: LD_VAR 0 1
74424: PUSH
74425: LD_INT 4
74427: MINUS
74428: PUSH
74429: LD_VAR 0 2
74433: PUSH
74434: LD_INT 1
74436: PUSH
74437: EMPTY
74438: LIST
74439: LIST
74440: LIST
74441: PUSH
74442: LD_VAR 0 1
74446: PUSH
74447: LD_VAR 0 2
74451: PUSH
74452: LD_INT 3
74454: PLUS
74455: PUSH
74456: LD_INT 0
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: LIST
74463: PUSH
74464: LD_VAR 0 1
74468: PUSH
74469: LD_INT 4
74471: PLUS
74472: PUSH
74473: LD_VAR 0 2
74477: PUSH
74478: LD_INT 4
74480: PLUS
74481: PUSH
74482: LD_INT 5
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: LIST
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: ST_TO_ADDR
// end ; 2 :
74497: GO 75056
74499: LD_INT 2
74501: DOUBLE
74502: EQUAL
74503: IFTRUE 74507
74505: GO 74636
74507: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74508: LD_ADDR_VAR 0 5
74512: PUSH
74513: LD_VAR 0 1
74517: PUSH
74518: LD_VAR 0 2
74522: PUSH
74523: LD_INT 3
74525: MINUS
74526: PUSH
74527: LD_INT 3
74529: PUSH
74530: EMPTY
74531: LIST
74532: LIST
74533: LIST
74534: PUSH
74535: LD_VAR 0 1
74539: PUSH
74540: LD_INT 4
74542: PLUS
74543: PUSH
74544: LD_VAR 0 2
74548: PUSH
74549: LD_INT 4
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: LIST
74556: PUSH
74557: LD_VAR 0 1
74561: PUSH
74562: LD_VAR 0 2
74566: PUSH
74567: LD_INT 4
74569: PLUS
74570: PUSH
74571: LD_INT 0
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: LIST
74578: PUSH
74579: LD_VAR 0 1
74583: PUSH
74584: LD_INT 3
74586: MINUS
74587: PUSH
74588: LD_VAR 0 2
74592: PUSH
74593: LD_INT 1
74595: PUSH
74596: EMPTY
74597: LIST
74598: LIST
74599: LIST
74600: PUSH
74601: LD_VAR 0 1
74605: PUSH
74606: LD_INT 4
74608: MINUS
74609: PUSH
74610: LD_VAR 0 2
74614: PUSH
74615: LD_INT 4
74617: MINUS
74618: PUSH
74619: LD_INT 2
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: LIST
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: ST_TO_ADDR
// end ; 3 :
74634: GO 75056
74636: LD_INT 3
74638: DOUBLE
74639: EQUAL
74640: IFTRUE 74644
74642: GO 74777
74644: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74645: LD_ADDR_VAR 0 5
74649: PUSH
74650: LD_VAR 0 1
74654: PUSH
74655: LD_INT 3
74657: PLUS
74658: PUSH
74659: LD_VAR 0 2
74663: PUSH
74664: LD_INT 4
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: LIST
74671: PUSH
74672: LD_VAR 0 1
74676: PUSH
74677: LD_INT 4
74679: PLUS
74680: PUSH
74681: LD_VAR 0 2
74685: PUSH
74686: LD_INT 4
74688: PLUS
74689: PUSH
74690: LD_INT 5
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: LIST
74697: PUSH
74698: LD_VAR 0 1
74702: PUSH
74703: LD_INT 4
74705: MINUS
74706: PUSH
74707: LD_VAR 0 2
74711: PUSH
74712: LD_INT 1
74714: PUSH
74715: EMPTY
74716: LIST
74717: LIST
74718: LIST
74719: PUSH
74720: LD_VAR 0 1
74724: PUSH
74725: LD_VAR 0 2
74729: PUSH
74730: LD_INT 4
74732: MINUS
74733: PUSH
74734: LD_INT 3
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: LIST
74741: PUSH
74742: LD_VAR 0 1
74746: PUSH
74747: LD_INT 3
74749: MINUS
74750: PUSH
74751: LD_VAR 0 2
74755: PUSH
74756: LD_INT 3
74758: MINUS
74759: PUSH
74760: LD_INT 2
74762: PUSH
74763: EMPTY
74764: LIST
74765: LIST
74766: LIST
74767: PUSH
74768: EMPTY
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: ST_TO_ADDR
// end ; 4 :
74775: GO 75056
74777: LD_INT 4
74779: DOUBLE
74780: EQUAL
74781: IFTRUE 74785
74783: GO 74918
74785: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74786: LD_ADDR_VAR 0 5
74790: PUSH
74791: LD_VAR 0 1
74795: PUSH
74796: LD_VAR 0 2
74800: PUSH
74801: LD_INT 4
74803: PLUS
74804: PUSH
74805: LD_INT 0
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: LIST
74812: PUSH
74813: LD_VAR 0 1
74817: PUSH
74818: LD_INT 3
74820: PLUS
74821: PUSH
74822: LD_VAR 0 2
74826: PUSH
74827: LD_INT 3
74829: PLUS
74830: PUSH
74831: LD_INT 5
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: LIST
74838: PUSH
74839: LD_VAR 0 1
74843: PUSH
74844: LD_INT 4
74846: PLUS
74847: PUSH
74848: LD_VAR 0 2
74852: PUSH
74853: LD_INT 4
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: LIST
74860: PUSH
74861: LD_VAR 0 1
74865: PUSH
74866: LD_VAR 0 2
74870: PUSH
74871: LD_INT 3
74873: MINUS
74874: PUSH
74875: LD_INT 3
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: LIST
74882: PUSH
74883: LD_VAR 0 1
74887: PUSH
74888: LD_INT 4
74890: MINUS
74891: PUSH
74892: LD_VAR 0 2
74896: PUSH
74897: LD_INT 4
74899: MINUS
74900: PUSH
74901: LD_INT 2
74903: PUSH
74904: EMPTY
74905: LIST
74906: LIST
74907: LIST
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: ST_TO_ADDR
// end ; 5 :
74916: GO 75056
74918: LD_INT 5
74920: DOUBLE
74921: EQUAL
74922: IFTRUE 74926
74924: GO 75055
74926: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74927: LD_ADDR_VAR 0 5
74931: PUSH
74932: LD_VAR 0 1
74936: PUSH
74937: LD_INT 4
74939: MINUS
74940: PUSH
74941: LD_VAR 0 2
74945: PUSH
74946: LD_INT 1
74948: PUSH
74949: EMPTY
74950: LIST
74951: LIST
74952: LIST
74953: PUSH
74954: LD_VAR 0 1
74958: PUSH
74959: LD_VAR 0 2
74963: PUSH
74964: LD_INT 4
74966: MINUS
74967: PUSH
74968: LD_INT 3
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: LIST
74975: PUSH
74976: LD_VAR 0 1
74980: PUSH
74981: LD_INT 4
74983: PLUS
74984: PUSH
74985: LD_VAR 0 2
74989: PUSH
74990: LD_INT 4
74992: PLUS
74993: PUSH
74994: LD_INT 5
74996: PUSH
74997: EMPTY
74998: LIST
74999: LIST
75000: LIST
75001: PUSH
75002: LD_VAR 0 1
75006: PUSH
75007: LD_INT 3
75009: PLUS
75010: PUSH
75011: LD_VAR 0 2
75015: PUSH
75016: LD_INT 4
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: LIST
75023: PUSH
75024: LD_VAR 0 1
75028: PUSH
75029: LD_VAR 0 2
75033: PUSH
75034: LD_INT 3
75036: PLUS
75037: PUSH
75038: LD_INT 0
75040: PUSH
75041: EMPTY
75042: LIST
75043: LIST
75044: LIST
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: LIST
75052: ST_TO_ADDR
// end ; end ;
75053: GO 75056
75055: POP
// result := list ;
75056: LD_ADDR_VAR 0 4
75060: PUSH
75061: LD_VAR 0 5
75065: ST_TO_ADDR
// end ;
75066: LD_VAR 0 4
75070: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
75071: LD_INT 0
75073: PPUSH
75074: PPUSH
75075: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
75076: LD_VAR 0 1
75080: NOT
75081: PUSH
75082: LD_VAR 0 2
75086: PUSH
75087: LD_INT 1
75089: PUSH
75090: LD_INT 2
75092: PUSH
75093: LD_INT 3
75095: PUSH
75096: LD_INT 4
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: LIST
75103: LIST
75104: IN
75105: NOT
75106: OR
75107: IFFALSE 75111
// exit ;
75109: GO 75194
// tmp := [ ] ;
75111: LD_ADDR_VAR 0 5
75115: PUSH
75116: EMPTY
75117: ST_TO_ADDR
// for i in units do
75118: LD_ADDR_VAR 0 4
75122: PUSH
75123: LD_VAR 0 1
75127: PUSH
75128: FOR_IN
75129: IFFALSE 75163
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75131: LD_ADDR_VAR 0 5
75135: PUSH
75136: LD_VAR 0 5
75140: PPUSH
75141: LD_VAR 0 4
75145: PPUSH
75146: LD_VAR 0 2
75150: PPUSH
75151: CALL_OW 259
75155: PPUSH
75156: CALL 76555 0 2
75160: ST_TO_ADDR
75161: GO 75128
75163: POP
75164: POP
// if not tmp then
75165: LD_VAR 0 5
75169: NOT
75170: IFFALSE 75174
// exit ;
75172: GO 75194
// result := SortListByListDesc ( units , tmp ) ;
75174: LD_ADDR_VAR 0 3
75178: PUSH
75179: LD_VAR 0 1
75183: PPUSH
75184: LD_VAR 0 5
75188: PPUSH
75189: CALL_OW 77
75193: ST_TO_ADDR
// end ;
75194: LD_VAR 0 3
75198: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75199: LD_INT 0
75201: PPUSH
75202: PPUSH
75203: PPUSH
// result := false ;
75204: LD_ADDR_VAR 0 3
75208: PUSH
75209: LD_INT 0
75211: ST_TO_ADDR
// if not building then
75212: LD_VAR 0 2
75216: NOT
75217: IFFALSE 75221
// exit ;
75219: GO 75359
// x := GetX ( building ) ;
75221: LD_ADDR_VAR 0 4
75225: PUSH
75226: LD_VAR 0 2
75230: PPUSH
75231: CALL_OW 250
75235: ST_TO_ADDR
// y := GetY ( building ) ;
75236: LD_ADDR_VAR 0 5
75240: PUSH
75241: LD_VAR 0 2
75245: PPUSH
75246: CALL_OW 251
75250: ST_TO_ADDR
// if not x or not y then
75251: LD_VAR 0 4
75255: NOT
75256: PUSH
75257: LD_VAR 0 5
75261: NOT
75262: OR
75263: IFFALSE 75267
// exit ;
75265: GO 75359
// if GetTaskList ( unit ) then
75267: LD_VAR 0 1
75271: PPUSH
75272: CALL_OW 437
75276: IFFALSE 75359
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75278: LD_STRING e
75280: PUSH
75281: LD_VAR 0 1
75285: PPUSH
75286: CALL_OW 437
75290: PUSH
75291: LD_INT 1
75293: ARRAY
75294: PUSH
75295: LD_INT 1
75297: ARRAY
75298: EQUAL
75299: PUSH
75300: LD_VAR 0 4
75304: PUSH
75305: LD_VAR 0 1
75309: PPUSH
75310: CALL_OW 437
75314: PUSH
75315: LD_INT 1
75317: ARRAY
75318: PUSH
75319: LD_INT 2
75321: ARRAY
75322: EQUAL
75323: AND
75324: PUSH
75325: LD_VAR 0 5
75329: PUSH
75330: LD_VAR 0 1
75334: PPUSH
75335: CALL_OW 437
75339: PUSH
75340: LD_INT 1
75342: ARRAY
75343: PUSH
75344: LD_INT 3
75346: ARRAY
75347: EQUAL
75348: AND
75349: IFFALSE 75359
// result := true end ;
75351: LD_ADDR_VAR 0 3
75355: PUSH
75356: LD_INT 1
75358: ST_TO_ADDR
// end ;
75359: LD_VAR 0 3
75363: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75364: LD_INT 0
75366: PPUSH
// result := false ;
75367: LD_ADDR_VAR 0 4
75371: PUSH
75372: LD_INT 0
75374: ST_TO_ADDR
// if GetTaskList ( unit ) then
75375: LD_VAR 0 1
75379: PPUSH
75380: CALL_OW 437
75384: IFFALSE 75467
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75386: LD_STRING M
75388: PUSH
75389: LD_VAR 0 1
75393: PPUSH
75394: CALL_OW 437
75398: PUSH
75399: LD_INT 1
75401: ARRAY
75402: PUSH
75403: LD_INT 1
75405: ARRAY
75406: EQUAL
75407: PUSH
75408: LD_VAR 0 2
75412: PUSH
75413: LD_VAR 0 1
75417: PPUSH
75418: CALL_OW 437
75422: PUSH
75423: LD_INT 1
75425: ARRAY
75426: PUSH
75427: LD_INT 2
75429: ARRAY
75430: EQUAL
75431: AND
75432: PUSH
75433: LD_VAR 0 3
75437: PUSH
75438: LD_VAR 0 1
75442: PPUSH
75443: CALL_OW 437
75447: PUSH
75448: LD_INT 1
75450: ARRAY
75451: PUSH
75452: LD_INT 3
75454: ARRAY
75455: EQUAL
75456: AND
75457: IFFALSE 75467
// result := true ;
75459: LD_ADDR_VAR 0 4
75463: PUSH
75464: LD_INT 1
75466: ST_TO_ADDR
// end ; end ;
75467: LD_VAR 0 4
75471: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75472: LD_INT 0
75474: PPUSH
75475: PPUSH
75476: PPUSH
75477: PPUSH
// if not unit or not area then
75478: LD_VAR 0 1
75482: NOT
75483: PUSH
75484: LD_VAR 0 2
75488: NOT
75489: OR
75490: IFFALSE 75494
// exit ;
75492: GO 75658
// tmp := AreaToList ( area , i ) ;
75494: LD_ADDR_VAR 0 6
75498: PUSH
75499: LD_VAR 0 2
75503: PPUSH
75504: LD_VAR 0 5
75508: PPUSH
75509: CALL_OW 517
75513: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75514: LD_ADDR_VAR 0 5
75518: PUSH
75519: DOUBLE
75520: LD_INT 1
75522: DEC
75523: ST_TO_ADDR
75524: LD_VAR 0 6
75528: PUSH
75529: LD_INT 1
75531: ARRAY
75532: PUSH
75533: FOR_TO
75534: IFFALSE 75656
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75536: LD_ADDR_VAR 0 7
75540: PUSH
75541: LD_VAR 0 6
75545: PUSH
75546: LD_INT 1
75548: ARRAY
75549: PUSH
75550: LD_VAR 0 5
75554: ARRAY
75555: PUSH
75556: LD_VAR 0 6
75560: PUSH
75561: LD_INT 2
75563: ARRAY
75564: PUSH
75565: LD_VAR 0 5
75569: ARRAY
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75575: LD_VAR 0 7
75579: PUSH
75580: LD_INT 1
75582: ARRAY
75583: PPUSH
75584: LD_VAR 0 7
75588: PUSH
75589: LD_INT 2
75591: ARRAY
75592: PPUSH
75593: CALL_OW 428
75597: PUSH
75598: LD_INT 0
75600: EQUAL
75601: IFFALSE 75654
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75603: LD_VAR 0 1
75607: PPUSH
75608: LD_VAR 0 7
75612: PUSH
75613: LD_INT 1
75615: ARRAY
75616: PPUSH
75617: LD_VAR 0 7
75621: PUSH
75622: LD_INT 2
75624: ARRAY
75625: PPUSH
75626: LD_VAR 0 3
75630: PPUSH
75631: CALL_OW 48
// result := IsPlaced ( unit ) ;
75635: LD_ADDR_VAR 0 4
75639: PUSH
75640: LD_VAR 0 1
75644: PPUSH
75645: CALL_OW 305
75649: ST_TO_ADDR
// exit ;
75650: POP
75651: POP
75652: GO 75658
// end ; end ;
75654: GO 75533
75656: POP
75657: POP
// end ;
75658: LD_VAR 0 4
75662: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75663: LD_INT 0
75665: PPUSH
75666: PPUSH
75667: PPUSH
// if not side or side > 8 then
75668: LD_VAR 0 1
75672: NOT
75673: PUSH
75674: LD_VAR 0 1
75678: PUSH
75679: LD_INT 8
75681: GREATER
75682: OR
75683: IFFALSE 75687
// exit ;
75685: GO 75874
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75687: LD_ADDR_VAR 0 4
75691: PUSH
75692: LD_INT 22
75694: PUSH
75695: LD_VAR 0 1
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: PUSH
75704: LD_INT 21
75706: PUSH
75707: LD_INT 3
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PPUSH
75718: CALL_OW 69
75722: ST_TO_ADDR
// if not tmp then
75723: LD_VAR 0 4
75727: NOT
75728: IFFALSE 75732
// exit ;
75730: GO 75874
// enable_addtolog := true ;
75732: LD_ADDR_OWVAR 81
75736: PUSH
75737: LD_INT 1
75739: ST_TO_ADDR
// AddToLog ( [ ) ;
75740: LD_STRING [
75742: PPUSH
75743: CALL_OW 561
// for i in tmp do
75747: LD_ADDR_VAR 0 3
75751: PUSH
75752: LD_VAR 0 4
75756: PUSH
75757: FOR_IN
75758: IFFALSE 75865
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75760: LD_STRING [
75762: PUSH
75763: LD_VAR 0 3
75767: PPUSH
75768: CALL_OW 266
75772: STR
75773: PUSH
75774: LD_STRING , 
75776: STR
75777: PUSH
75778: LD_VAR 0 3
75782: PPUSH
75783: CALL_OW 250
75787: STR
75788: PUSH
75789: LD_STRING , 
75791: STR
75792: PUSH
75793: LD_VAR 0 3
75797: PPUSH
75798: CALL_OW 251
75802: STR
75803: PUSH
75804: LD_STRING , 
75806: STR
75807: PUSH
75808: LD_VAR 0 3
75812: PPUSH
75813: CALL_OW 254
75817: STR
75818: PUSH
75819: LD_STRING , 
75821: STR
75822: PUSH
75823: LD_VAR 0 3
75827: PPUSH
75828: LD_INT 1
75830: PPUSH
75831: CALL_OW 268
75835: STR
75836: PUSH
75837: LD_STRING , 
75839: STR
75840: PUSH
75841: LD_VAR 0 3
75845: PPUSH
75846: LD_INT 2
75848: PPUSH
75849: CALL_OW 268
75853: STR
75854: PUSH
75855: LD_STRING ],
75857: STR
75858: PPUSH
75859: CALL_OW 561
// end ;
75863: GO 75757
75865: POP
75866: POP
// AddToLog ( ]; ) ;
75867: LD_STRING ];
75869: PPUSH
75870: CALL_OW 561
// end ;
75874: LD_VAR 0 2
75878: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75879: LD_INT 0
75881: PPUSH
75882: PPUSH
75883: PPUSH
75884: PPUSH
75885: PPUSH
// if not area or not rate or not max then
75886: LD_VAR 0 1
75890: NOT
75891: PUSH
75892: LD_VAR 0 2
75896: NOT
75897: OR
75898: PUSH
75899: LD_VAR 0 4
75903: NOT
75904: OR
75905: IFFALSE 75909
// exit ;
75907: GO 76098
// while 1 do
75909: LD_INT 1
75911: IFFALSE 76098
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75913: LD_ADDR_VAR 0 9
75917: PUSH
75918: LD_VAR 0 1
75922: PPUSH
75923: LD_INT 1
75925: PPUSH
75926: CALL_OW 287
75930: PUSH
75931: LD_INT 10
75933: MUL
75934: ST_TO_ADDR
// r := rate / 10 ;
75935: LD_ADDR_VAR 0 7
75939: PUSH
75940: LD_VAR 0 2
75944: PUSH
75945: LD_INT 10
75947: DIVREAL
75948: ST_TO_ADDR
// time := 1 1$00 ;
75949: LD_ADDR_VAR 0 8
75953: PUSH
75954: LD_INT 2100
75956: ST_TO_ADDR
// if amount < min then
75957: LD_VAR 0 9
75961: PUSH
75962: LD_VAR 0 3
75966: LESS
75967: IFFALSE 75985
// r := r * 2 else
75969: LD_ADDR_VAR 0 7
75973: PUSH
75974: LD_VAR 0 7
75978: PUSH
75979: LD_INT 2
75981: MUL
75982: ST_TO_ADDR
75983: GO 76011
// if amount > max then
75985: LD_VAR 0 9
75989: PUSH
75990: LD_VAR 0 4
75994: GREATER
75995: IFFALSE 76011
// r := r / 2 ;
75997: LD_ADDR_VAR 0 7
76001: PUSH
76002: LD_VAR 0 7
76006: PUSH
76007: LD_INT 2
76009: DIVREAL
76010: ST_TO_ADDR
// time := time / r ;
76011: LD_ADDR_VAR 0 8
76015: PUSH
76016: LD_VAR 0 8
76020: PUSH
76021: LD_VAR 0 7
76025: DIVREAL
76026: ST_TO_ADDR
// if time < 0 then
76027: LD_VAR 0 8
76031: PUSH
76032: LD_INT 0
76034: LESS
76035: IFFALSE 76052
// time := time * - 1 ;
76037: LD_ADDR_VAR 0 8
76041: PUSH
76042: LD_VAR 0 8
76046: PUSH
76047: LD_INT 1
76049: NEG
76050: MUL
76051: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
76052: LD_VAR 0 8
76056: PUSH
76057: LD_INT 35
76059: PPUSH
76060: LD_INT 875
76062: PPUSH
76063: CALL_OW 12
76067: PLUS
76068: PPUSH
76069: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
76073: LD_INT 1
76075: PPUSH
76076: LD_INT 5
76078: PPUSH
76079: CALL_OW 12
76083: PPUSH
76084: LD_VAR 0 1
76088: PPUSH
76089: LD_INT 1
76091: PPUSH
76092: CALL_OW 55
// end ;
76096: GO 75909
// end ;
76098: LD_VAR 0 5
76102: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76103: LD_INT 0
76105: PPUSH
76106: PPUSH
76107: PPUSH
76108: PPUSH
76109: PPUSH
76110: PPUSH
76111: PPUSH
76112: PPUSH
// if not turrets or not factories then
76113: LD_VAR 0 1
76117: NOT
76118: PUSH
76119: LD_VAR 0 2
76123: NOT
76124: OR
76125: IFFALSE 76129
// exit ;
76127: GO 76436
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76129: LD_ADDR_VAR 0 10
76133: PUSH
76134: LD_INT 5
76136: PUSH
76137: LD_INT 6
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: PUSH
76144: LD_INT 2
76146: PUSH
76147: LD_INT 4
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: PUSH
76154: LD_INT 3
76156: PUSH
76157: LD_INT 5
76159: PUSH
76160: EMPTY
76161: LIST
76162: LIST
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: LIST
76168: PUSH
76169: LD_INT 24
76171: PUSH
76172: LD_INT 25
76174: PUSH
76175: EMPTY
76176: LIST
76177: LIST
76178: PUSH
76179: LD_INT 23
76181: PUSH
76182: LD_INT 27
76184: PUSH
76185: EMPTY
76186: LIST
76187: LIST
76188: PUSH
76189: EMPTY
76190: LIST
76191: LIST
76192: PUSH
76193: LD_INT 42
76195: PUSH
76196: LD_INT 43
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: PUSH
76203: LD_INT 44
76205: PUSH
76206: LD_INT 46
76208: PUSH
76209: EMPTY
76210: LIST
76211: LIST
76212: PUSH
76213: LD_INT 45
76215: PUSH
76216: LD_INT 47
76218: PUSH
76219: EMPTY
76220: LIST
76221: LIST
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: LIST
76227: PUSH
76228: EMPTY
76229: LIST
76230: LIST
76231: LIST
76232: ST_TO_ADDR
// result := [ ] ;
76233: LD_ADDR_VAR 0 3
76237: PUSH
76238: EMPTY
76239: ST_TO_ADDR
// for i in turrets do
76240: LD_ADDR_VAR 0 4
76244: PUSH
76245: LD_VAR 0 1
76249: PUSH
76250: FOR_IN
76251: IFFALSE 76434
// begin nat := GetNation ( i ) ;
76253: LD_ADDR_VAR 0 7
76257: PUSH
76258: LD_VAR 0 4
76262: PPUSH
76263: CALL_OW 248
76267: ST_TO_ADDR
// weapon := 0 ;
76268: LD_ADDR_VAR 0 8
76272: PUSH
76273: LD_INT 0
76275: ST_TO_ADDR
// if not nat then
76276: LD_VAR 0 7
76280: NOT
76281: IFFALSE 76285
// continue ;
76283: GO 76250
// for j in list [ nat ] do
76285: LD_ADDR_VAR 0 5
76289: PUSH
76290: LD_VAR 0 10
76294: PUSH
76295: LD_VAR 0 7
76299: ARRAY
76300: PUSH
76301: FOR_IN
76302: IFFALSE 76343
// if GetBWeapon ( i ) = j [ 1 ] then
76304: LD_VAR 0 4
76308: PPUSH
76309: CALL_OW 269
76313: PUSH
76314: LD_VAR 0 5
76318: PUSH
76319: LD_INT 1
76321: ARRAY
76322: EQUAL
76323: IFFALSE 76341
// begin weapon := j [ 2 ] ;
76325: LD_ADDR_VAR 0 8
76329: PUSH
76330: LD_VAR 0 5
76334: PUSH
76335: LD_INT 2
76337: ARRAY
76338: ST_TO_ADDR
// break ;
76339: GO 76343
// end ;
76341: GO 76301
76343: POP
76344: POP
// if not weapon then
76345: LD_VAR 0 8
76349: NOT
76350: IFFALSE 76354
// continue ;
76352: GO 76250
// for k in factories do
76354: LD_ADDR_VAR 0 6
76358: PUSH
76359: LD_VAR 0 2
76363: PUSH
76364: FOR_IN
76365: IFFALSE 76430
// begin weapons := AvailableWeaponList ( k ) ;
76367: LD_ADDR_VAR 0 9
76371: PUSH
76372: LD_VAR 0 6
76376: PPUSH
76377: CALL_OW 478
76381: ST_TO_ADDR
// if not weapons then
76382: LD_VAR 0 9
76386: NOT
76387: IFFALSE 76391
// continue ;
76389: GO 76364
// if weapon in weapons then
76391: LD_VAR 0 8
76395: PUSH
76396: LD_VAR 0 9
76400: IN
76401: IFFALSE 76428
// begin result := [ i , weapon ] ;
76403: LD_ADDR_VAR 0 3
76407: PUSH
76408: LD_VAR 0 4
76412: PUSH
76413: LD_VAR 0 8
76417: PUSH
76418: EMPTY
76419: LIST
76420: LIST
76421: ST_TO_ADDR
// exit ;
76422: POP
76423: POP
76424: POP
76425: POP
76426: GO 76436
// end ; end ;
76428: GO 76364
76430: POP
76431: POP
// end ;
76432: GO 76250
76434: POP
76435: POP
// end ;
76436: LD_VAR 0 3
76440: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76441: LD_INT 0
76443: PPUSH
// if not side or side > 8 then
76444: LD_VAR 0 3
76448: NOT
76449: PUSH
76450: LD_VAR 0 3
76454: PUSH
76455: LD_INT 8
76457: GREATER
76458: OR
76459: IFFALSE 76463
// exit ;
76461: GO 76522
// if not range then
76463: LD_VAR 0 4
76467: NOT
76468: IFFALSE 76479
// range := - 12 ;
76470: LD_ADDR_VAR 0 4
76474: PUSH
76475: LD_INT 12
76477: NEG
76478: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76479: LD_VAR 0 1
76483: PPUSH
76484: LD_VAR 0 2
76488: PPUSH
76489: LD_VAR 0 3
76493: PPUSH
76494: LD_VAR 0 4
76498: PPUSH
76499: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76503: LD_VAR 0 1
76507: PPUSH
76508: LD_VAR 0 2
76512: PPUSH
76513: LD_VAR 0 3
76517: PPUSH
76518: CALL_OW 331
// end ;
76522: LD_VAR 0 5
76526: RET
// export function Video ( mode ) ; begin
76527: LD_INT 0
76529: PPUSH
// ingame_video = mode ;
76530: LD_ADDR_OWVAR 52
76534: PUSH
76535: LD_VAR 0 1
76539: ST_TO_ADDR
// interface_hidden = mode ;
76540: LD_ADDR_OWVAR 54
76544: PUSH
76545: LD_VAR 0 1
76549: ST_TO_ADDR
// end ;
76550: LD_VAR 0 2
76554: RET
// export function Join ( array , element ) ; begin
76555: LD_INT 0
76557: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76558: LD_ADDR_VAR 0 3
76562: PUSH
76563: LD_VAR 0 1
76567: PPUSH
76568: LD_VAR 0 1
76572: PUSH
76573: LD_INT 1
76575: PLUS
76576: PPUSH
76577: LD_VAR 0 2
76581: PPUSH
76582: CALL_OW 1
76586: ST_TO_ADDR
// end ;
76587: LD_VAR 0 3
76591: RET
// export function JoinUnion ( array , element ) ; begin
76592: LD_INT 0
76594: PPUSH
// result := array union element ;
76595: LD_ADDR_VAR 0 3
76599: PUSH
76600: LD_VAR 0 1
76604: PUSH
76605: LD_VAR 0 2
76609: UNION
76610: ST_TO_ADDR
// end ;
76611: LD_VAR 0 3
76615: RET
// export function GetBehemoths ( side ) ; begin
76616: LD_INT 0
76618: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76619: LD_ADDR_VAR 0 2
76623: PUSH
76624: LD_INT 22
76626: PUSH
76627: LD_VAR 0 1
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: PUSH
76636: LD_INT 31
76638: PUSH
76639: LD_INT 25
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PUSH
76646: EMPTY
76647: LIST
76648: LIST
76649: PPUSH
76650: CALL_OW 69
76654: ST_TO_ADDR
// end ;
76655: LD_VAR 0 2
76659: RET
// export function Shuffle ( array ) ; var i , index ; begin
76660: LD_INT 0
76662: PPUSH
76663: PPUSH
76664: PPUSH
// result := [ ] ;
76665: LD_ADDR_VAR 0 2
76669: PUSH
76670: EMPTY
76671: ST_TO_ADDR
// if not array then
76672: LD_VAR 0 1
76676: NOT
76677: IFFALSE 76681
// exit ;
76679: GO 76780
// Randomize ;
76681: CALL_OW 10
// for i = array downto 1 do
76685: LD_ADDR_VAR 0 3
76689: PUSH
76690: DOUBLE
76691: LD_VAR 0 1
76695: INC
76696: ST_TO_ADDR
76697: LD_INT 1
76699: PUSH
76700: FOR_DOWNTO
76701: IFFALSE 76778
// begin index := rand ( 1 , array ) ;
76703: LD_ADDR_VAR 0 4
76707: PUSH
76708: LD_INT 1
76710: PPUSH
76711: LD_VAR 0 1
76715: PPUSH
76716: CALL_OW 12
76720: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76721: LD_ADDR_VAR 0 2
76725: PUSH
76726: LD_VAR 0 2
76730: PPUSH
76731: LD_VAR 0 2
76735: PUSH
76736: LD_INT 1
76738: PLUS
76739: PPUSH
76740: LD_VAR 0 1
76744: PUSH
76745: LD_VAR 0 4
76749: ARRAY
76750: PPUSH
76751: CALL_OW 2
76755: ST_TO_ADDR
// array := Delete ( array , index ) ;
76756: LD_ADDR_VAR 0 1
76760: PUSH
76761: LD_VAR 0 1
76765: PPUSH
76766: LD_VAR 0 4
76770: PPUSH
76771: CALL_OW 3
76775: ST_TO_ADDR
// end ;
76776: GO 76700
76778: POP
76779: POP
// end ;
76780: LD_VAR 0 2
76784: RET
// export function GetBaseMaterials ( base ) ; begin
76785: LD_INT 0
76787: PPUSH
// result := [ 0 , 0 , 0 ] ;
76788: LD_ADDR_VAR 0 2
76792: PUSH
76793: LD_INT 0
76795: PUSH
76796: LD_INT 0
76798: PUSH
76799: LD_INT 0
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: LIST
76806: ST_TO_ADDR
// if not base then
76807: LD_VAR 0 1
76811: NOT
76812: IFFALSE 76816
// exit ;
76814: GO 76865
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76816: LD_ADDR_VAR 0 2
76820: PUSH
76821: LD_VAR 0 1
76825: PPUSH
76826: LD_INT 1
76828: PPUSH
76829: CALL_OW 275
76833: PUSH
76834: LD_VAR 0 1
76838: PPUSH
76839: LD_INT 2
76841: PPUSH
76842: CALL_OW 275
76846: PUSH
76847: LD_VAR 0 1
76851: PPUSH
76852: LD_INT 3
76854: PPUSH
76855: CALL_OW 275
76859: PUSH
76860: EMPTY
76861: LIST
76862: LIST
76863: LIST
76864: ST_TO_ADDR
// end ;
76865: LD_VAR 0 2
76869: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76870: LD_INT 0
76872: PPUSH
76873: PPUSH
// result := array ;
76874: LD_ADDR_VAR 0 3
76878: PUSH
76879: LD_VAR 0 1
76883: ST_TO_ADDR
// if size >= result then
76884: LD_VAR 0 2
76888: PUSH
76889: LD_VAR 0 3
76893: GREATEREQUAL
76894: IFFALSE 76898
// exit ;
76896: GO 76948
// if size then
76898: LD_VAR 0 2
76902: IFFALSE 76948
// for i := array downto size do
76904: LD_ADDR_VAR 0 4
76908: PUSH
76909: DOUBLE
76910: LD_VAR 0 1
76914: INC
76915: ST_TO_ADDR
76916: LD_VAR 0 2
76920: PUSH
76921: FOR_DOWNTO
76922: IFFALSE 76946
// result := Delete ( result , result ) ;
76924: LD_ADDR_VAR 0 3
76928: PUSH
76929: LD_VAR 0 3
76933: PPUSH
76934: LD_VAR 0 3
76938: PPUSH
76939: CALL_OW 3
76943: ST_TO_ADDR
76944: GO 76921
76946: POP
76947: POP
// end ;
76948: LD_VAR 0 3
76952: RET
// export function ComExit ( unit ) ; var tmp ; begin
76953: LD_INT 0
76955: PPUSH
76956: PPUSH
// if not IsInUnit ( unit ) then
76957: LD_VAR 0 1
76961: PPUSH
76962: CALL_OW 310
76966: NOT
76967: IFFALSE 76971
// exit ;
76969: GO 77031
// tmp := IsInUnit ( unit ) ;
76971: LD_ADDR_VAR 0 3
76975: PUSH
76976: LD_VAR 0 1
76980: PPUSH
76981: CALL_OW 310
76985: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76986: LD_VAR 0 3
76990: PPUSH
76991: CALL_OW 247
76995: PUSH
76996: LD_INT 2
76998: EQUAL
76999: IFFALSE 77012
// ComExitVehicle ( unit ) else
77001: LD_VAR 0 1
77005: PPUSH
77006: CALL_OW 121
77010: GO 77021
// ComExitBuilding ( unit ) ;
77012: LD_VAR 0 1
77016: PPUSH
77017: CALL_OW 122
// result := tmp ;
77021: LD_ADDR_VAR 0 2
77025: PUSH
77026: LD_VAR 0 3
77030: ST_TO_ADDR
// end ;
77031: LD_VAR 0 2
77035: RET
// export function ComExitAll ( units ) ; var i ; begin
77036: LD_INT 0
77038: PPUSH
77039: PPUSH
// if not units then
77040: LD_VAR 0 1
77044: NOT
77045: IFFALSE 77049
// exit ;
77047: GO 77075
// for i in units do
77049: LD_ADDR_VAR 0 3
77053: PUSH
77054: LD_VAR 0 1
77058: PUSH
77059: FOR_IN
77060: IFFALSE 77073
// ComExit ( i ) ;
77062: LD_VAR 0 3
77066: PPUSH
77067: CALL 76953 0 1
77071: GO 77059
77073: POP
77074: POP
// end ;
77075: LD_VAR 0 2
77079: RET
// export function ResetHc ; begin
77080: LD_INT 0
77082: PPUSH
// InitHc ;
77083: CALL_OW 19
// hc_importance := 0 ;
77087: LD_ADDR_OWVAR 32
77091: PUSH
77092: LD_INT 0
77094: ST_TO_ADDR
// end ;
77095: LD_VAR 0 1
77099: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77100: LD_INT 0
77102: PPUSH
77103: PPUSH
77104: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77105: LD_ADDR_VAR 0 6
77109: PUSH
77110: LD_VAR 0 1
77114: PUSH
77115: LD_VAR 0 3
77119: PLUS
77120: PUSH
77121: LD_INT 2
77123: DIV
77124: ST_TO_ADDR
// if _x < 0 then
77125: LD_VAR 0 6
77129: PUSH
77130: LD_INT 0
77132: LESS
77133: IFFALSE 77150
// _x := _x * - 1 ;
77135: LD_ADDR_VAR 0 6
77139: PUSH
77140: LD_VAR 0 6
77144: PUSH
77145: LD_INT 1
77147: NEG
77148: MUL
77149: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77150: LD_ADDR_VAR 0 7
77154: PUSH
77155: LD_VAR 0 2
77159: PUSH
77160: LD_VAR 0 4
77164: PLUS
77165: PUSH
77166: LD_INT 2
77168: DIV
77169: ST_TO_ADDR
// if _y < 0 then
77170: LD_VAR 0 7
77174: PUSH
77175: LD_INT 0
77177: LESS
77178: IFFALSE 77195
// _y := _y * - 1 ;
77180: LD_ADDR_VAR 0 7
77184: PUSH
77185: LD_VAR 0 7
77189: PUSH
77190: LD_INT 1
77192: NEG
77193: MUL
77194: ST_TO_ADDR
// result := [ _x , _y ] ;
77195: LD_ADDR_VAR 0 5
77199: PUSH
77200: LD_VAR 0 6
77204: PUSH
77205: LD_VAR 0 7
77209: PUSH
77210: EMPTY
77211: LIST
77212: LIST
77213: ST_TO_ADDR
// end ;
77214: LD_VAR 0 5
77218: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77219: LD_INT 0
77221: PPUSH
77222: PPUSH
77223: PPUSH
77224: PPUSH
// task := GetTaskList ( unit ) ;
77225: LD_ADDR_VAR 0 7
77229: PUSH
77230: LD_VAR 0 1
77234: PPUSH
77235: CALL_OW 437
77239: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77240: LD_VAR 0 7
77244: NOT
77245: PUSH
77246: LD_VAR 0 1
77250: PPUSH
77251: LD_VAR 0 2
77255: PPUSH
77256: CALL_OW 308
77260: NOT
77261: AND
77262: IFFALSE 77266
// exit ;
77264: GO 77384
// if IsInArea ( unit , area ) then
77266: LD_VAR 0 1
77270: PPUSH
77271: LD_VAR 0 2
77275: PPUSH
77276: CALL_OW 308
77280: IFFALSE 77298
// begin ComMoveToArea ( unit , goAway ) ;
77282: LD_VAR 0 1
77286: PPUSH
77287: LD_VAR 0 3
77291: PPUSH
77292: CALL_OW 113
// exit ;
77296: GO 77384
// end ; if task [ 1 ] [ 1 ] <> M then
77298: LD_VAR 0 7
77302: PUSH
77303: LD_INT 1
77305: ARRAY
77306: PUSH
77307: LD_INT 1
77309: ARRAY
77310: PUSH
77311: LD_STRING M
77313: NONEQUAL
77314: IFFALSE 77318
// exit ;
77316: GO 77384
// x := task [ 1 ] [ 2 ] ;
77318: LD_ADDR_VAR 0 5
77322: PUSH
77323: LD_VAR 0 7
77327: PUSH
77328: LD_INT 1
77330: ARRAY
77331: PUSH
77332: LD_INT 2
77334: ARRAY
77335: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77336: LD_ADDR_VAR 0 6
77340: PUSH
77341: LD_VAR 0 7
77345: PUSH
77346: LD_INT 1
77348: ARRAY
77349: PUSH
77350: LD_INT 3
77352: ARRAY
77353: ST_TO_ADDR
// if InArea ( x , y , area ) then
77354: LD_VAR 0 5
77358: PPUSH
77359: LD_VAR 0 6
77363: PPUSH
77364: LD_VAR 0 2
77368: PPUSH
77369: CALL_OW 309
77373: IFFALSE 77384
// ComStop ( unit ) ;
77375: LD_VAR 0 1
77379: PPUSH
77380: CALL_OW 141
// end ;
77384: LD_VAR 0 4
77388: RET
// export function Abs ( value ) ; begin
77389: LD_INT 0
77391: PPUSH
// result := value ;
77392: LD_ADDR_VAR 0 2
77396: PUSH
77397: LD_VAR 0 1
77401: ST_TO_ADDR
// if value < 0 then
77402: LD_VAR 0 1
77406: PUSH
77407: LD_INT 0
77409: LESS
77410: IFFALSE 77427
// result := value * - 1 ;
77412: LD_ADDR_VAR 0 2
77416: PUSH
77417: LD_VAR 0 1
77421: PUSH
77422: LD_INT 1
77424: NEG
77425: MUL
77426: ST_TO_ADDR
// end ;
77427: LD_VAR 0 2
77431: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77432: LD_INT 0
77434: PPUSH
77435: PPUSH
77436: PPUSH
77437: PPUSH
77438: PPUSH
77439: PPUSH
77440: PPUSH
77441: PPUSH
// if not unit or not building then
77442: LD_VAR 0 1
77446: NOT
77447: PUSH
77448: LD_VAR 0 2
77452: NOT
77453: OR
77454: IFFALSE 77458
// exit ;
77456: GO 77684
// x := GetX ( building ) ;
77458: LD_ADDR_VAR 0 4
77462: PUSH
77463: LD_VAR 0 2
77467: PPUSH
77468: CALL_OW 250
77472: ST_TO_ADDR
// y := GetY ( building ) ;
77473: LD_ADDR_VAR 0 6
77477: PUSH
77478: LD_VAR 0 2
77482: PPUSH
77483: CALL_OW 251
77487: ST_TO_ADDR
// d := GetDir ( building ) ;
77488: LD_ADDR_VAR 0 8
77492: PUSH
77493: LD_VAR 0 2
77497: PPUSH
77498: CALL_OW 254
77502: ST_TO_ADDR
// r := 4 ;
77503: LD_ADDR_VAR 0 9
77507: PUSH
77508: LD_INT 4
77510: ST_TO_ADDR
// for i := 1 to 5 do
77511: LD_ADDR_VAR 0 10
77515: PUSH
77516: DOUBLE
77517: LD_INT 1
77519: DEC
77520: ST_TO_ADDR
77521: LD_INT 5
77523: PUSH
77524: FOR_TO
77525: IFFALSE 77682
// begin _x := ShiftX ( x , d , r + i ) ;
77527: LD_ADDR_VAR 0 5
77531: PUSH
77532: LD_VAR 0 4
77536: PPUSH
77537: LD_VAR 0 8
77541: PPUSH
77542: LD_VAR 0 9
77546: PUSH
77547: LD_VAR 0 10
77551: PLUS
77552: PPUSH
77553: CALL_OW 272
77557: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77558: LD_ADDR_VAR 0 7
77562: PUSH
77563: LD_VAR 0 6
77567: PPUSH
77568: LD_VAR 0 8
77572: PPUSH
77573: LD_VAR 0 9
77577: PUSH
77578: LD_VAR 0 10
77582: PLUS
77583: PPUSH
77584: CALL_OW 273
77588: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77589: LD_VAR 0 5
77593: PPUSH
77594: LD_VAR 0 7
77598: PPUSH
77599: CALL_OW 488
77603: PUSH
77604: LD_VAR 0 5
77608: PPUSH
77609: LD_VAR 0 7
77613: PPUSH
77614: CALL_OW 428
77618: PPUSH
77619: CALL_OW 247
77623: PUSH
77624: LD_INT 3
77626: PUSH
77627: LD_INT 2
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: IN
77634: NOT
77635: AND
77636: IFFALSE 77680
// begin ComMoveXY ( unit , _x , _y ) ;
77638: LD_VAR 0 1
77642: PPUSH
77643: LD_VAR 0 5
77647: PPUSH
77648: LD_VAR 0 7
77652: PPUSH
77653: CALL_OW 111
// result := [ _x , _y ] ;
77657: LD_ADDR_VAR 0 3
77661: PUSH
77662: LD_VAR 0 5
77666: PUSH
77667: LD_VAR 0 7
77671: PUSH
77672: EMPTY
77673: LIST
77674: LIST
77675: ST_TO_ADDR
// exit ;
77676: POP
77677: POP
77678: GO 77684
// end ; end ;
77680: GO 77524
77682: POP
77683: POP
// end ;
77684: LD_VAR 0 3
77688: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77689: LD_INT 0
77691: PPUSH
77692: PPUSH
77693: PPUSH
// result := 0 ;
77694: LD_ADDR_VAR 0 3
77698: PUSH
77699: LD_INT 0
77701: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77702: LD_VAR 0 1
77706: PUSH
77707: LD_INT 0
77709: LESS
77710: PUSH
77711: LD_VAR 0 1
77715: PUSH
77716: LD_INT 8
77718: GREATER
77719: OR
77720: PUSH
77721: LD_VAR 0 2
77725: PUSH
77726: LD_INT 0
77728: LESS
77729: OR
77730: PUSH
77731: LD_VAR 0 2
77735: PUSH
77736: LD_INT 8
77738: GREATER
77739: OR
77740: IFFALSE 77744
// exit ;
77742: GO 77819
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77744: LD_ADDR_VAR 0 4
77748: PUSH
77749: LD_INT 22
77751: PUSH
77752: LD_VAR 0 2
77756: PUSH
77757: EMPTY
77758: LIST
77759: LIST
77760: PPUSH
77761: CALL_OW 69
77765: PUSH
77766: FOR_IN
77767: IFFALSE 77817
// begin un := UnitShoot ( i ) ;
77769: LD_ADDR_VAR 0 5
77773: PUSH
77774: LD_VAR 0 4
77778: PPUSH
77779: CALL_OW 504
77783: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77784: LD_VAR 0 5
77788: PPUSH
77789: CALL_OW 255
77793: PUSH
77794: LD_VAR 0 1
77798: EQUAL
77799: IFFALSE 77815
// begin result := un ;
77801: LD_ADDR_VAR 0 3
77805: PUSH
77806: LD_VAR 0 5
77810: ST_TO_ADDR
// exit ;
77811: POP
77812: POP
77813: GO 77819
// end ; end ;
77815: GO 77766
77817: POP
77818: POP
// end ;
77819: LD_VAR 0 3
77823: RET
// export function GetCargoBay ( units ) ; begin
77824: LD_INT 0
77826: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77827: LD_ADDR_VAR 0 2
77831: PUSH
77832: LD_VAR 0 1
77836: PPUSH
77837: LD_INT 2
77839: PUSH
77840: LD_INT 34
77842: PUSH
77843: LD_INT 12
77845: PUSH
77846: EMPTY
77847: LIST
77848: LIST
77849: PUSH
77850: LD_INT 34
77852: PUSH
77853: LD_INT 51
77855: PUSH
77856: EMPTY
77857: LIST
77858: LIST
77859: PUSH
77860: LD_INT 34
77862: PUSH
77863: LD_INT 32
77865: PUSH
77866: EMPTY
77867: LIST
77868: LIST
77869: PUSH
77870: LD_INT 34
77872: PUSH
77873: LD_INT 89
77875: PUSH
77876: EMPTY
77877: LIST
77878: LIST
77879: PUSH
77880: EMPTY
77881: LIST
77882: LIST
77883: LIST
77884: LIST
77885: LIST
77886: PPUSH
77887: CALL_OW 72
77891: ST_TO_ADDR
// end ;
77892: LD_VAR 0 2
77896: RET
// export function Negate ( value ) ; begin
77897: LD_INT 0
77899: PPUSH
// result := not value ;
77900: LD_ADDR_VAR 0 2
77904: PUSH
77905: LD_VAR 0 1
77909: NOT
77910: ST_TO_ADDR
// end ;
77911: LD_VAR 0 2
77915: RET
// export function Inc ( value ) ; begin
77916: LD_INT 0
77918: PPUSH
// result := value + 1 ;
77919: LD_ADDR_VAR 0 2
77923: PUSH
77924: LD_VAR 0 1
77928: PUSH
77929: LD_INT 1
77931: PLUS
77932: ST_TO_ADDR
// end ;
77933: LD_VAR 0 2
77937: RET
// export function Dec ( value ) ; begin
77938: LD_INT 0
77940: PPUSH
// result := value - 1 ;
77941: LD_ADDR_VAR 0 2
77945: PUSH
77946: LD_VAR 0 1
77950: PUSH
77951: LD_INT 1
77953: MINUS
77954: ST_TO_ADDR
// end ;
77955: LD_VAR 0 2
77959: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77960: LD_INT 0
77962: PPUSH
77963: PPUSH
77964: PPUSH
77965: PPUSH
77966: PPUSH
77967: PPUSH
77968: PPUSH
77969: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77970: LD_VAR 0 1
77974: PPUSH
77975: LD_VAR 0 2
77979: PPUSH
77980: CALL_OW 488
77984: NOT
77985: PUSH
77986: LD_VAR 0 3
77990: PPUSH
77991: LD_VAR 0 4
77995: PPUSH
77996: CALL_OW 488
78000: NOT
78001: OR
78002: IFFALSE 78015
// begin result := - 1 ;
78004: LD_ADDR_VAR 0 5
78008: PUSH
78009: LD_INT 1
78011: NEG
78012: ST_TO_ADDR
// exit ;
78013: GO 78250
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
78015: LD_ADDR_VAR 0 12
78019: PUSH
78020: LD_VAR 0 1
78024: PPUSH
78025: LD_VAR 0 2
78029: PPUSH
78030: LD_VAR 0 3
78034: PPUSH
78035: LD_VAR 0 4
78039: PPUSH
78040: CALL 77100 0 4
78044: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
78045: LD_ADDR_VAR 0 11
78049: PUSH
78050: LD_VAR 0 1
78054: PPUSH
78055: LD_VAR 0 2
78059: PPUSH
78060: LD_VAR 0 12
78064: PUSH
78065: LD_INT 1
78067: ARRAY
78068: PPUSH
78069: LD_VAR 0 12
78073: PUSH
78074: LD_INT 2
78076: ARRAY
78077: PPUSH
78078: CALL_OW 298
78082: ST_TO_ADDR
// distance := 9999 ;
78083: LD_ADDR_VAR 0 10
78087: PUSH
78088: LD_INT 9999
78090: ST_TO_ADDR
// for i := 0 to 5 do
78091: LD_ADDR_VAR 0 6
78095: PUSH
78096: DOUBLE
78097: LD_INT 0
78099: DEC
78100: ST_TO_ADDR
78101: LD_INT 5
78103: PUSH
78104: FOR_TO
78105: IFFALSE 78248
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78107: LD_ADDR_VAR 0 7
78111: PUSH
78112: LD_VAR 0 1
78116: PPUSH
78117: LD_VAR 0 6
78121: PPUSH
78122: LD_VAR 0 11
78126: PPUSH
78127: CALL_OW 272
78131: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78132: LD_ADDR_VAR 0 8
78136: PUSH
78137: LD_VAR 0 2
78141: PPUSH
78142: LD_VAR 0 6
78146: PPUSH
78147: LD_VAR 0 11
78151: PPUSH
78152: CALL_OW 273
78156: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78157: LD_VAR 0 7
78161: PPUSH
78162: LD_VAR 0 8
78166: PPUSH
78167: CALL_OW 488
78171: NOT
78172: IFFALSE 78176
// continue ;
78174: GO 78104
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78176: LD_ADDR_VAR 0 9
78180: PUSH
78181: LD_VAR 0 12
78185: PUSH
78186: LD_INT 1
78188: ARRAY
78189: PPUSH
78190: LD_VAR 0 12
78194: PUSH
78195: LD_INT 2
78197: ARRAY
78198: PPUSH
78199: LD_VAR 0 7
78203: PPUSH
78204: LD_VAR 0 8
78208: PPUSH
78209: CALL_OW 298
78213: ST_TO_ADDR
// if tmp < distance then
78214: LD_VAR 0 9
78218: PUSH
78219: LD_VAR 0 10
78223: LESS
78224: IFFALSE 78246
// begin result := i ;
78226: LD_ADDR_VAR 0 5
78230: PUSH
78231: LD_VAR 0 6
78235: ST_TO_ADDR
// distance := tmp ;
78236: LD_ADDR_VAR 0 10
78240: PUSH
78241: LD_VAR 0 9
78245: ST_TO_ADDR
// end ; end ;
78246: GO 78104
78248: POP
78249: POP
// end ;
78250: LD_VAR 0 5
78254: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78255: LD_INT 0
78257: PPUSH
78258: PPUSH
// if not driver or not IsInUnit ( driver ) then
78259: LD_VAR 0 1
78263: NOT
78264: PUSH
78265: LD_VAR 0 1
78269: PPUSH
78270: CALL_OW 310
78274: NOT
78275: OR
78276: IFFALSE 78280
// exit ;
78278: GO 78370
// vehicle := IsInUnit ( driver ) ;
78280: LD_ADDR_VAR 0 3
78284: PUSH
78285: LD_VAR 0 1
78289: PPUSH
78290: CALL_OW 310
78294: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78295: LD_VAR 0 1
78299: PPUSH
78300: LD_STRING \
78302: PUSH
78303: LD_INT 0
78305: PUSH
78306: LD_INT 0
78308: PUSH
78309: LD_INT 0
78311: PUSH
78312: LD_INT 0
78314: PUSH
78315: LD_INT 0
78317: PUSH
78318: LD_INT 0
78320: PUSH
78321: EMPTY
78322: LIST
78323: LIST
78324: LIST
78325: LIST
78326: LIST
78327: LIST
78328: LIST
78329: PUSH
78330: LD_STRING E
78332: PUSH
78333: LD_INT 0
78335: PUSH
78336: LD_INT 0
78338: PUSH
78339: LD_VAR 0 3
78343: PUSH
78344: LD_INT 0
78346: PUSH
78347: LD_INT 0
78349: PUSH
78350: LD_INT 0
78352: PUSH
78353: EMPTY
78354: LIST
78355: LIST
78356: LIST
78357: LIST
78358: LIST
78359: LIST
78360: LIST
78361: PUSH
78362: EMPTY
78363: LIST
78364: LIST
78365: PPUSH
78366: CALL_OW 446
// end ;
78370: LD_VAR 0 2
78374: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78375: LD_INT 0
78377: PPUSH
78378: PPUSH
// if not driver or not IsInUnit ( driver ) then
78379: LD_VAR 0 1
78383: NOT
78384: PUSH
78385: LD_VAR 0 1
78389: PPUSH
78390: CALL_OW 310
78394: NOT
78395: OR
78396: IFFALSE 78400
// exit ;
78398: GO 78490
// vehicle := IsInUnit ( driver ) ;
78400: LD_ADDR_VAR 0 3
78404: PUSH
78405: LD_VAR 0 1
78409: PPUSH
78410: CALL_OW 310
78414: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78415: LD_VAR 0 1
78419: PPUSH
78420: LD_STRING \
78422: PUSH
78423: LD_INT 0
78425: PUSH
78426: LD_INT 0
78428: PUSH
78429: LD_INT 0
78431: PUSH
78432: LD_INT 0
78434: PUSH
78435: LD_INT 0
78437: PUSH
78438: LD_INT 0
78440: PUSH
78441: EMPTY
78442: LIST
78443: LIST
78444: LIST
78445: LIST
78446: LIST
78447: LIST
78448: LIST
78449: PUSH
78450: LD_STRING E
78452: PUSH
78453: LD_INT 0
78455: PUSH
78456: LD_INT 0
78458: PUSH
78459: LD_VAR 0 3
78463: PUSH
78464: LD_INT 0
78466: PUSH
78467: LD_INT 0
78469: PUSH
78470: LD_INT 0
78472: PUSH
78473: EMPTY
78474: LIST
78475: LIST
78476: LIST
78477: LIST
78478: LIST
78479: LIST
78480: LIST
78481: PUSH
78482: EMPTY
78483: LIST
78484: LIST
78485: PPUSH
78486: CALL_OW 447
// end ;
78490: LD_VAR 0 2
78494: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78495: LD_INT 0
78497: PPUSH
78498: PPUSH
78499: PPUSH
// tmp := [ ] ;
78500: LD_ADDR_VAR 0 5
78504: PUSH
78505: EMPTY
78506: ST_TO_ADDR
// for i in units do
78507: LD_ADDR_VAR 0 4
78511: PUSH
78512: LD_VAR 0 1
78516: PUSH
78517: FOR_IN
78518: IFFALSE 78556
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78520: LD_ADDR_VAR 0 5
78524: PUSH
78525: LD_VAR 0 5
78529: PPUSH
78530: LD_VAR 0 5
78534: PUSH
78535: LD_INT 1
78537: PLUS
78538: PPUSH
78539: LD_VAR 0 4
78543: PPUSH
78544: CALL_OW 256
78548: PPUSH
78549: CALL_OW 2
78553: ST_TO_ADDR
78554: GO 78517
78556: POP
78557: POP
// if not tmp then
78558: LD_VAR 0 5
78562: NOT
78563: IFFALSE 78567
// exit ;
78565: GO 78615
// if asc then
78567: LD_VAR 0 2
78571: IFFALSE 78595
// result := SortListByListAsc ( units , tmp ) else
78573: LD_ADDR_VAR 0 3
78577: PUSH
78578: LD_VAR 0 1
78582: PPUSH
78583: LD_VAR 0 5
78587: PPUSH
78588: CALL_OW 76
78592: ST_TO_ADDR
78593: GO 78615
// result := SortListByListDesc ( units , tmp ) ;
78595: LD_ADDR_VAR 0 3
78599: PUSH
78600: LD_VAR 0 1
78604: PPUSH
78605: LD_VAR 0 5
78609: PPUSH
78610: CALL_OW 77
78614: ST_TO_ADDR
// end ;
78615: LD_VAR 0 3
78619: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78620: LD_INT 0
78622: PPUSH
78623: PPUSH
// task := GetTaskList ( mech ) ;
78624: LD_ADDR_VAR 0 4
78628: PUSH
78629: LD_VAR 0 1
78633: PPUSH
78634: CALL_OW 437
78638: ST_TO_ADDR
// if not task then
78639: LD_VAR 0 4
78643: NOT
78644: IFFALSE 78648
// exit ;
78646: GO 78690
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78648: LD_ADDR_VAR 0 3
78652: PUSH
78653: LD_VAR 0 4
78657: PUSH
78658: LD_INT 1
78660: ARRAY
78661: PUSH
78662: LD_INT 1
78664: ARRAY
78665: PUSH
78666: LD_STRING r
78668: EQUAL
78669: PUSH
78670: LD_VAR 0 4
78674: PUSH
78675: LD_INT 1
78677: ARRAY
78678: PUSH
78679: LD_INT 4
78681: ARRAY
78682: PUSH
78683: LD_VAR 0 2
78687: EQUAL
78688: AND
78689: ST_TO_ADDR
// end ;
78690: LD_VAR 0 3
78694: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78695: LD_INT 0
78697: PPUSH
// SetDir ( unit , d ) ;
78698: LD_VAR 0 1
78702: PPUSH
78703: LD_VAR 0 4
78707: PPUSH
78708: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78712: LD_VAR 0 1
78716: PPUSH
78717: LD_VAR 0 2
78721: PPUSH
78722: LD_VAR 0 3
78726: PPUSH
78727: LD_VAR 0 5
78731: PPUSH
78732: CALL_OW 48
// end ;
78736: LD_VAR 0 6
78740: RET
// export function ToNaturalNumber ( number ) ; begin
78741: LD_INT 0
78743: PPUSH
// result := number div 1 ;
78744: LD_ADDR_VAR 0 2
78748: PUSH
78749: LD_VAR 0 1
78753: PUSH
78754: LD_INT 1
78756: DIV
78757: ST_TO_ADDR
// if number < 0 then
78758: LD_VAR 0 1
78762: PUSH
78763: LD_INT 0
78765: LESS
78766: IFFALSE 78776
// result := 0 ;
78768: LD_ADDR_VAR 0 2
78772: PUSH
78773: LD_INT 0
78775: ST_TO_ADDR
// end ;
78776: LD_VAR 0 2
78780: RET
// export function SortByClass ( units , class ) ; var un ; begin
78781: LD_INT 0
78783: PPUSH
78784: PPUSH
// if not units or not class then
78785: LD_VAR 0 1
78789: NOT
78790: PUSH
78791: LD_VAR 0 2
78795: NOT
78796: OR
78797: IFFALSE 78801
// exit ;
78799: GO 78896
// result := [ ] ;
78801: LD_ADDR_VAR 0 3
78805: PUSH
78806: EMPTY
78807: ST_TO_ADDR
// for un in units do
78808: LD_ADDR_VAR 0 4
78812: PUSH
78813: LD_VAR 0 1
78817: PUSH
78818: FOR_IN
78819: IFFALSE 78894
// if GetClass ( un ) = class then
78821: LD_VAR 0 4
78825: PPUSH
78826: CALL_OW 257
78830: PUSH
78831: LD_VAR 0 2
78835: EQUAL
78836: IFFALSE 78863
// result := Insert ( result , 1 , un ) else
78838: LD_ADDR_VAR 0 3
78842: PUSH
78843: LD_VAR 0 3
78847: PPUSH
78848: LD_INT 1
78850: PPUSH
78851: LD_VAR 0 4
78855: PPUSH
78856: CALL_OW 2
78860: ST_TO_ADDR
78861: GO 78892
// result := Replace ( result , result + 1 , un ) ;
78863: LD_ADDR_VAR 0 3
78867: PUSH
78868: LD_VAR 0 3
78872: PPUSH
78873: LD_VAR 0 3
78877: PUSH
78878: LD_INT 1
78880: PLUS
78881: PPUSH
78882: LD_VAR 0 4
78886: PPUSH
78887: CALL_OW 1
78891: ST_TO_ADDR
78892: GO 78818
78894: POP
78895: POP
// end ;
78896: LD_VAR 0 3
78900: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78901: LD_INT 0
78903: PPUSH
78904: PPUSH
78905: PPUSH
78906: PPUSH
78907: PPUSH
78908: PPUSH
78909: PPUSH
// result := [ ] ;
78910: LD_ADDR_VAR 0 4
78914: PUSH
78915: EMPTY
78916: ST_TO_ADDR
// if x - r < 0 then
78917: LD_VAR 0 1
78921: PUSH
78922: LD_VAR 0 3
78926: MINUS
78927: PUSH
78928: LD_INT 0
78930: LESS
78931: IFFALSE 78943
// min_x := 0 else
78933: LD_ADDR_VAR 0 8
78937: PUSH
78938: LD_INT 0
78940: ST_TO_ADDR
78941: GO 78959
// min_x := x - r ;
78943: LD_ADDR_VAR 0 8
78947: PUSH
78948: LD_VAR 0 1
78952: PUSH
78953: LD_VAR 0 3
78957: MINUS
78958: ST_TO_ADDR
// if y - r < 0 then
78959: LD_VAR 0 2
78963: PUSH
78964: LD_VAR 0 3
78968: MINUS
78969: PUSH
78970: LD_INT 0
78972: LESS
78973: IFFALSE 78985
// min_y := 0 else
78975: LD_ADDR_VAR 0 7
78979: PUSH
78980: LD_INT 0
78982: ST_TO_ADDR
78983: GO 79001
// min_y := y - r ;
78985: LD_ADDR_VAR 0 7
78989: PUSH
78990: LD_VAR 0 2
78994: PUSH
78995: LD_VAR 0 3
78999: MINUS
79000: ST_TO_ADDR
// max_x := x + r ;
79001: LD_ADDR_VAR 0 9
79005: PUSH
79006: LD_VAR 0 1
79010: PUSH
79011: LD_VAR 0 3
79015: PLUS
79016: ST_TO_ADDR
// max_y := y + r ;
79017: LD_ADDR_VAR 0 10
79021: PUSH
79022: LD_VAR 0 2
79026: PUSH
79027: LD_VAR 0 3
79031: PLUS
79032: ST_TO_ADDR
// for _x = min_x to max_x do
79033: LD_ADDR_VAR 0 5
79037: PUSH
79038: DOUBLE
79039: LD_VAR 0 8
79043: DEC
79044: ST_TO_ADDR
79045: LD_VAR 0 9
79049: PUSH
79050: FOR_TO
79051: IFFALSE 79152
// for _y = min_y to max_y do
79053: LD_ADDR_VAR 0 6
79057: PUSH
79058: DOUBLE
79059: LD_VAR 0 7
79063: DEC
79064: ST_TO_ADDR
79065: LD_VAR 0 10
79069: PUSH
79070: FOR_TO
79071: IFFALSE 79148
// begin if not ValidHex ( _x , _y ) then
79073: LD_VAR 0 5
79077: PPUSH
79078: LD_VAR 0 6
79082: PPUSH
79083: CALL_OW 488
79087: NOT
79088: IFFALSE 79092
// continue ;
79090: GO 79070
// if GetResourceTypeXY ( _x , _y ) then
79092: LD_VAR 0 5
79096: PPUSH
79097: LD_VAR 0 6
79101: PPUSH
79102: CALL_OW 283
79106: IFFALSE 79146
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79108: LD_ADDR_VAR 0 4
79112: PUSH
79113: LD_VAR 0 4
79117: PPUSH
79118: LD_VAR 0 4
79122: PUSH
79123: LD_INT 1
79125: PLUS
79126: PPUSH
79127: LD_VAR 0 5
79131: PUSH
79132: LD_VAR 0 6
79136: PUSH
79137: EMPTY
79138: LIST
79139: LIST
79140: PPUSH
79141: CALL_OW 1
79145: ST_TO_ADDR
// end ;
79146: GO 79070
79148: POP
79149: POP
79150: GO 79050
79152: POP
79153: POP
// end ;
79154: LD_VAR 0 4
79158: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79159: LD_INT 0
79161: PPUSH
79162: PPUSH
79163: PPUSH
79164: PPUSH
79165: PPUSH
79166: PPUSH
79167: PPUSH
79168: PPUSH
// if not units then
79169: LD_VAR 0 1
79173: NOT
79174: IFFALSE 79178
// exit ;
79176: GO 79702
// result := UnitFilter ( units , [ f_ok ] ) ;
79178: LD_ADDR_VAR 0 3
79182: PUSH
79183: LD_VAR 0 1
79187: PPUSH
79188: LD_INT 50
79190: PUSH
79191: EMPTY
79192: LIST
79193: PPUSH
79194: CALL_OW 72
79198: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79199: LD_ADDR_VAR 0 8
79203: PUSH
79204: LD_VAR 0 1
79208: PUSH
79209: LD_INT 1
79211: ARRAY
79212: PPUSH
79213: CALL_OW 255
79217: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79218: LD_ADDR_VAR 0 10
79222: PUSH
79223: LD_INT 29
79225: PUSH
79226: LD_INT 91
79228: PUSH
79229: LD_INT 49
79231: PUSH
79232: EMPTY
79233: LIST
79234: LIST
79235: LIST
79236: ST_TO_ADDR
// if not result then
79237: LD_VAR 0 3
79241: NOT
79242: IFFALSE 79246
// exit ;
79244: GO 79702
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79246: LD_ADDR_VAR 0 5
79250: PUSH
79251: LD_INT 81
79253: PUSH
79254: LD_VAR 0 8
79258: PUSH
79259: EMPTY
79260: LIST
79261: LIST
79262: PPUSH
79263: CALL_OW 69
79267: ST_TO_ADDR
// for i in result do
79268: LD_ADDR_VAR 0 4
79272: PUSH
79273: LD_VAR 0 3
79277: PUSH
79278: FOR_IN
79279: IFFALSE 79700
// begin tag := GetTag ( i ) + 1 ;
79281: LD_ADDR_VAR 0 9
79285: PUSH
79286: LD_VAR 0 4
79290: PPUSH
79291: CALL_OW 110
79295: PUSH
79296: LD_INT 1
79298: PLUS
79299: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79300: LD_ADDR_VAR 0 7
79304: PUSH
79305: LD_VAR 0 4
79309: PPUSH
79310: CALL_OW 250
79314: PPUSH
79315: LD_VAR 0 4
79319: PPUSH
79320: CALL_OW 251
79324: PPUSH
79325: LD_INT 6
79327: PPUSH
79328: CALL 78901 0 3
79332: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79333: LD_VAR 0 4
79337: PPUSH
79338: CALL_OW 247
79342: PUSH
79343: LD_INT 2
79345: EQUAL
79346: PUSH
79347: LD_VAR 0 7
79351: AND
79352: PUSH
79353: LD_VAR 0 4
79357: PPUSH
79358: CALL_OW 264
79362: PUSH
79363: LD_VAR 0 10
79367: IN
79368: NOT
79369: AND
79370: IFFALSE 79409
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79372: LD_VAR 0 4
79376: PPUSH
79377: LD_VAR 0 7
79381: PUSH
79382: LD_INT 1
79384: ARRAY
79385: PUSH
79386: LD_INT 1
79388: ARRAY
79389: PPUSH
79390: LD_VAR 0 7
79394: PUSH
79395: LD_INT 1
79397: ARRAY
79398: PUSH
79399: LD_INT 2
79401: ARRAY
79402: PPUSH
79403: CALL_OW 116
79407: GO 79698
// if path > tag then
79409: LD_VAR 0 2
79413: PUSH
79414: LD_VAR 0 9
79418: GREATER
79419: IFFALSE 79627
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79421: LD_ADDR_VAR 0 6
79425: PUSH
79426: LD_VAR 0 5
79430: PPUSH
79431: LD_INT 91
79433: PUSH
79434: LD_VAR 0 4
79438: PUSH
79439: LD_INT 8
79441: PUSH
79442: EMPTY
79443: LIST
79444: LIST
79445: LIST
79446: PPUSH
79447: CALL_OW 72
79451: ST_TO_ADDR
// if nearEnemy then
79452: LD_VAR 0 6
79456: IFFALSE 79525
// begin if GetWeapon ( i ) = ru_time_lapser then
79458: LD_VAR 0 4
79462: PPUSH
79463: CALL_OW 264
79467: PUSH
79468: LD_INT 49
79470: EQUAL
79471: IFFALSE 79499
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79473: LD_VAR 0 4
79477: PPUSH
79478: LD_VAR 0 6
79482: PPUSH
79483: LD_VAR 0 4
79487: PPUSH
79488: CALL_OW 74
79492: PPUSH
79493: CALL_OW 112
79497: GO 79523
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79499: LD_VAR 0 4
79503: PPUSH
79504: LD_VAR 0 6
79508: PPUSH
79509: LD_VAR 0 4
79513: PPUSH
79514: CALL_OW 74
79518: PPUSH
79519: CALL_OW 115
// end else
79523: GO 79625
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79525: LD_VAR 0 4
79529: PPUSH
79530: LD_VAR 0 2
79534: PUSH
79535: LD_VAR 0 9
79539: ARRAY
79540: PUSH
79541: LD_INT 1
79543: ARRAY
79544: PPUSH
79545: LD_VAR 0 2
79549: PUSH
79550: LD_VAR 0 9
79554: ARRAY
79555: PUSH
79556: LD_INT 2
79558: ARRAY
79559: PPUSH
79560: CALL_OW 297
79564: PUSH
79565: LD_INT 6
79567: GREATER
79568: IFFALSE 79611
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79570: LD_VAR 0 4
79574: PPUSH
79575: LD_VAR 0 2
79579: PUSH
79580: LD_VAR 0 9
79584: ARRAY
79585: PUSH
79586: LD_INT 1
79588: ARRAY
79589: PPUSH
79590: LD_VAR 0 2
79594: PUSH
79595: LD_VAR 0 9
79599: ARRAY
79600: PUSH
79601: LD_INT 2
79603: ARRAY
79604: PPUSH
79605: CALL_OW 114
79609: GO 79625
// SetTag ( i , tag ) ;
79611: LD_VAR 0 4
79615: PPUSH
79616: LD_VAR 0 9
79620: PPUSH
79621: CALL_OW 109
// end else
79625: GO 79698
// if enemy then
79627: LD_VAR 0 5
79631: IFFALSE 79698
// begin if GetWeapon ( i ) = ru_time_lapser then
79633: LD_VAR 0 4
79637: PPUSH
79638: CALL_OW 264
79642: PUSH
79643: LD_INT 49
79645: EQUAL
79646: IFFALSE 79674
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79648: LD_VAR 0 4
79652: PPUSH
79653: LD_VAR 0 5
79657: PPUSH
79658: LD_VAR 0 4
79662: PPUSH
79663: CALL_OW 74
79667: PPUSH
79668: CALL_OW 112
79672: GO 79698
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79674: LD_VAR 0 4
79678: PPUSH
79679: LD_VAR 0 5
79683: PPUSH
79684: LD_VAR 0 4
79688: PPUSH
79689: CALL_OW 74
79693: PPUSH
79694: CALL_OW 115
// end ; end ;
79698: GO 79278
79700: POP
79701: POP
// end ;
79702: LD_VAR 0 3
79706: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79707: LD_INT 0
79709: PPUSH
79710: PPUSH
79711: PPUSH
// if not unit or IsInUnit ( unit ) then
79712: LD_VAR 0 1
79716: NOT
79717: PUSH
79718: LD_VAR 0 1
79722: PPUSH
79723: CALL_OW 310
79727: OR
79728: IFFALSE 79732
// exit ;
79730: GO 79823
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79732: LD_ADDR_VAR 0 4
79736: PUSH
79737: LD_VAR 0 1
79741: PPUSH
79742: CALL_OW 250
79746: PPUSH
79747: LD_VAR 0 2
79751: PPUSH
79752: LD_INT 1
79754: PPUSH
79755: CALL_OW 272
79759: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79760: LD_ADDR_VAR 0 5
79764: PUSH
79765: LD_VAR 0 1
79769: PPUSH
79770: CALL_OW 251
79774: PPUSH
79775: LD_VAR 0 2
79779: PPUSH
79780: LD_INT 1
79782: PPUSH
79783: CALL_OW 273
79787: ST_TO_ADDR
// if ValidHex ( x , y ) then
79788: LD_VAR 0 4
79792: PPUSH
79793: LD_VAR 0 5
79797: PPUSH
79798: CALL_OW 488
79802: IFFALSE 79823
// ComTurnXY ( unit , x , y ) ;
79804: LD_VAR 0 1
79808: PPUSH
79809: LD_VAR 0 4
79813: PPUSH
79814: LD_VAR 0 5
79818: PPUSH
79819: CALL_OW 118
// end ;
79823: LD_VAR 0 3
79827: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79828: LD_INT 0
79830: PPUSH
79831: PPUSH
// result := false ;
79832: LD_ADDR_VAR 0 3
79836: PUSH
79837: LD_INT 0
79839: ST_TO_ADDR
// if not units then
79840: LD_VAR 0 2
79844: NOT
79845: IFFALSE 79849
// exit ;
79847: GO 79894
// for i in units do
79849: LD_ADDR_VAR 0 4
79853: PUSH
79854: LD_VAR 0 2
79858: PUSH
79859: FOR_IN
79860: IFFALSE 79892
// if See ( side , i ) then
79862: LD_VAR 0 1
79866: PPUSH
79867: LD_VAR 0 4
79871: PPUSH
79872: CALL_OW 292
79876: IFFALSE 79890
// begin result := true ;
79878: LD_ADDR_VAR 0 3
79882: PUSH
79883: LD_INT 1
79885: ST_TO_ADDR
// exit ;
79886: POP
79887: POP
79888: GO 79894
// end ;
79890: GO 79859
79892: POP
79893: POP
// end ;
79894: LD_VAR 0 3
79898: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79899: LD_INT 0
79901: PPUSH
79902: PPUSH
79903: PPUSH
79904: PPUSH
// if not unit or not points then
79905: LD_VAR 0 1
79909: NOT
79910: PUSH
79911: LD_VAR 0 2
79915: NOT
79916: OR
79917: IFFALSE 79921
// exit ;
79919: GO 80011
// dist := 99999 ;
79921: LD_ADDR_VAR 0 5
79925: PUSH
79926: LD_INT 99999
79928: ST_TO_ADDR
// for i in points do
79929: LD_ADDR_VAR 0 4
79933: PUSH
79934: LD_VAR 0 2
79938: PUSH
79939: FOR_IN
79940: IFFALSE 80009
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79942: LD_ADDR_VAR 0 6
79946: PUSH
79947: LD_VAR 0 1
79951: PPUSH
79952: LD_VAR 0 4
79956: PUSH
79957: LD_INT 1
79959: ARRAY
79960: PPUSH
79961: LD_VAR 0 4
79965: PUSH
79966: LD_INT 2
79968: ARRAY
79969: PPUSH
79970: CALL_OW 297
79974: ST_TO_ADDR
// if tmpDist < dist then
79975: LD_VAR 0 6
79979: PUSH
79980: LD_VAR 0 5
79984: LESS
79985: IFFALSE 80007
// begin result := i ;
79987: LD_ADDR_VAR 0 3
79991: PUSH
79992: LD_VAR 0 4
79996: ST_TO_ADDR
// dist := tmpDist ;
79997: LD_ADDR_VAR 0 5
80001: PUSH
80002: LD_VAR 0 6
80006: ST_TO_ADDR
// end ; end ;
80007: GO 79939
80009: POP
80010: POP
// end ;
80011: LD_VAR 0 3
80015: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
80016: LD_INT 0
80018: PPUSH
// uc_side := side ;
80019: LD_ADDR_OWVAR 20
80023: PUSH
80024: LD_VAR 0 1
80028: ST_TO_ADDR
// uc_nation := 3 ;
80029: LD_ADDR_OWVAR 21
80033: PUSH
80034: LD_INT 3
80036: ST_TO_ADDR
// vc_chassis := 25 ;
80037: LD_ADDR_OWVAR 37
80041: PUSH
80042: LD_INT 25
80044: ST_TO_ADDR
// vc_engine := engine_siberite ;
80045: LD_ADDR_OWVAR 39
80049: PUSH
80050: LD_INT 3
80052: ST_TO_ADDR
// vc_control := control_computer ;
80053: LD_ADDR_OWVAR 38
80057: PUSH
80058: LD_INT 3
80060: ST_TO_ADDR
// vc_weapon := 59 ;
80061: LD_ADDR_OWVAR 40
80065: PUSH
80066: LD_INT 59
80068: ST_TO_ADDR
// result := CreateVehicle ;
80069: LD_ADDR_VAR 0 5
80073: PUSH
80074: CALL_OW 45
80078: ST_TO_ADDR
// SetDir ( result , d ) ;
80079: LD_VAR 0 5
80083: PPUSH
80084: LD_VAR 0 4
80088: PPUSH
80089: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
80093: LD_VAR 0 5
80097: PPUSH
80098: LD_VAR 0 2
80102: PPUSH
80103: LD_VAR 0 3
80107: PPUSH
80108: LD_INT 0
80110: PPUSH
80111: CALL_OW 48
// end ;
80115: LD_VAR 0 5
80119: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80120: LD_INT 0
80122: PPUSH
80123: PPUSH
80124: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80125: LD_ADDR_VAR 0 2
80129: PUSH
80130: LD_INT 0
80132: PUSH
80133: LD_INT 0
80135: PUSH
80136: LD_INT 0
80138: PUSH
80139: LD_INT 0
80141: PUSH
80142: EMPTY
80143: LIST
80144: LIST
80145: LIST
80146: LIST
80147: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80148: LD_VAR 0 1
80152: NOT
80153: PUSH
80154: LD_VAR 0 1
80158: PPUSH
80159: CALL_OW 264
80163: PUSH
80164: LD_INT 12
80166: PUSH
80167: LD_INT 51
80169: PUSH
80170: LD_INT 32
80172: PUSH
80173: LD_INT 89
80175: PUSH
80176: EMPTY
80177: LIST
80178: LIST
80179: LIST
80180: LIST
80181: IN
80182: NOT
80183: OR
80184: IFFALSE 80188
// exit ;
80186: GO 80286
// for i := 1 to 3 do
80188: LD_ADDR_VAR 0 3
80192: PUSH
80193: DOUBLE
80194: LD_INT 1
80196: DEC
80197: ST_TO_ADDR
80198: LD_INT 3
80200: PUSH
80201: FOR_TO
80202: IFFALSE 80284
// begin tmp := GetCargo ( cargo , i ) ;
80204: LD_ADDR_VAR 0 4
80208: PUSH
80209: LD_VAR 0 1
80213: PPUSH
80214: LD_VAR 0 3
80218: PPUSH
80219: CALL_OW 289
80223: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80224: LD_ADDR_VAR 0 2
80228: PUSH
80229: LD_VAR 0 2
80233: PPUSH
80234: LD_VAR 0 3
80238: PPUSH
80239: LD_VAR 0 4
80243: PPUSH
80244: CALL_OW 1
80248: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80249: LD_ADDR_VAR 0 2
80253: PUSH
80254: LD_VAR 0 2
80258: PPUSH
80259: LD_INT 4
80261: PPUSH
80262: LD_VAR 0 2
80266: PUSH
80267: LD_INT 4
80269: ARRAY
80270: PUSH
80271: LD_VAR 0 4
80275: PLUS
80276: PPUSH
80277: CALL_OW 1
80281: ST_TO_ADDR
// end ;
80282: GO 80201
80284: POP
80285: POP
// end ;
80286: LD_VAR 0 2
80290: RET
// export function Length ( array ) ; begin
80291: LD_INT 0
80293: PPUSH
// result := array + 0 ;
80294: LD_ADDR_VAR 0 2
80298: PUSH
80299: LD_VAR 0 1
80303: PUSH
80304: LD_INT 0
80306: PLUS
80307: ST_TO_ADDR
// end ;
80308: LD_VAR 0 2
80312: RET
// export function PrepareArray ( array ) ; begin
80313: LD_INT 0
80315: PPUSH
// result := array diff 0 ;
80316: LD_ADDR_VAR 0 2
80320: PUSH
80321: LD_VAR 0 1
80325: PUSH
80326: LD_INT 0
80328: DIFF
80329: ST_TO_ADDR
// if not result [ 1 ] then
80330: LD_VAR 0 2
80334: PUSH
80335: LD_INT 1
80337: ARRAY
80338: NOT
80339: IFFALSE 80359
// result := Delete ( result , 1 ) ;
80341: LD_ADDR_VAR 0 2
80345: PUSH
80346: LD_VAR 0 2
80350: PPUSH
80351: LD_INT 1
80353: PPUSH
80354: CALL_OW 3
80358: ST_TO_ADDR
// end ;
80359: LD_VAR 0 2
80363: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80364: LD_INT 0
80366: PPUSH
80367: PPUSH
80368: PPUSH
80369: PPUSH
// sibRocketRange := 25 ;
80370: LD_ADDR_VAR 0 6
80374: PUSH
80375: LD_INT 25
80377: ST_TO_ADDR
// result := false ;
80378: LD_ADDR_VAR 0 4
80382: PUSH
80383: LD_INT 0
80385: ST_TO_ADDR
// for i := 0 to 5 do
80386: LD_ADDR_VAR 0 5
80390: PUSH
80391: DOUBLE
80392: LD_INT 0
80394: DEC
80395: ST_TO_ADDR
80396: LD_INT 5
80398: PUSH
80399: FOR_TO
80400: IFFALSE 80467
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80402: LD_VAR 0 1
80406: PPUSH
80407: LD_VAR 0 5
80411: PPUSH
80412: LD_VAR 0 6
80416: PPUSH
80417: CALL_OW 272
80421: PPUSH
80422: LD_VAR 0 2
80426: PPUSH
80427: LD_VAR 0 5
80431: PPUSH
80432: LD_VAR 0 6
80436: PPUSH
80437: CALL_OW 273
80441: PPUSH
80442: LD_VAR 0 3
80446: PPUSH
80447: CALL_OW 309
80451: IFFALSE 80465
// begin result := true ;
80453: LD_ADDR_VAR 0 4
80457: PUSH
80458: LD_INT 1
80460: ST_TO_ADDR
// exit ;
80461: POP
80462: POP
80463: GO 80469
// end ;
80465: GO 80399
80467: POP
80468: POP
// end ;
80469: LD_VAR 0 4
80473: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80474: LD_INT 0
80476: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80477: LD_VAR 0 1
80481: PPUSH
80482: LD_VAR 0 2
80486: PPUSH
80487: LD_INT 0
80489: PPUSH
80490: LD_INT 0
80492: PPUSH
80493: LD_INT 1
80495: PPUSH
80496: LD_INT 0
80498: PPUSH
80499: CALL_OW 587
// end ; end_of_file
80503: LD_VAR 0 3
80507: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80508: LD_VAR 0 1
80512: PUSH
80513: LD_INT 200
80515: DOUBLE
80516: GREATEREQUAL
80517: IFFALSE 80525
80519: LD_INT 299
80521: DOUBLE
80522: LESSEQUAL
80523: IFTRUE 80527
80525: GO 80559
80527: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80528: LD_VAR 0 1
80532: PPUSH
80533: LD_VAR 0 2
80537: PPUSH
80538: LD_VAR 0 3
80542: PPUSH
80543: LD_VAR 0 4
80547: PPUSH
80548: LD_VAR 0 5
80552: PPUSH
80553: CALL 35174 0 5
80557: GO 80636
80559: LD_INT 300
80561: DOUBLE
80562: GREATEREQUAL
80563: IFFALSE 80571
80565: LD_INT 399
80567: DOUBLE
80568: LESSEQUAL
80569: IFTRUE 80573
80571: GO 80635
80573: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80574: LD_VAR 0 1
80578: PPUSH
80579: LD_VAR 0 2
80583: PPUSH
80584: LD_VAR 0 3
80588: PPUSH
80589: LD_VAR 0 4
80593: PPUSH
80594: LD_VAR 0 5
80598: PPUSH
80599: LD_VAR 0 6
80603: PPUSH
80604: LD_VAR 0 7
80608: PPUSH
80609: LD_VAR 0 8
80613: PPUSH
80614: LD_VAR 0 9
80618: PPUSH
80619: LD_VAR 0 10
80623: PPUSH
80624: LD_VAR 0 11
80628: PPUSH
80629: CALL 31507 0 11
80633: GO 80636
80635: POP
// end ;
80636: PPOPN 11
80638: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80639: LD_VAR 0 1
80643: PPUSH
80644: LD_VAR 0 2
80648: PPUSH
80649: LD_VAR 0 3
80653: PPUSH
80654: LD_VAR 0 4
80658: PPUSH
80659: LD_VAR 0 5
80663: PPUSH
80664: CALL 34910 0 5
// end ; end_of_file
80668: PPOPN 5
80670: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80671: LD_VAR 0 1
80675: PPUSH
80676: LD_VAR 0 2
80680: PPUSH
80681: LD_VAR 0 3
80685: PPUSH
80686: LD_VAR 0 4
80690: PPUSH
80691: LD_VAR 0 5
80695: PPUSH
80696: LD_VAR 0 6
80700: PPUSH
80701: CALL 19159 0 6
// end ;
80705: PPOPN 6
80707: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80708: LD_INT 0
80710: PPUSH
// begin if not units then
80711: LD_VAR 0 1
80715: NOT
80716: IFFALSE 80720
// exit ;
80718: GO 80720
// end ;
80720: PPOPN 7
80722: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80723: CALL 19063 0 0
// end ;
80727: PPOPN 1
80729: END
