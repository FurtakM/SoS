// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15039 0 0
// PrepareDifficulty ;
  43: CALL 12412 0 0
// PrepareVehicles ;
  47: CALL 1780 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1362 0 4
// PrepareAmericanHeroes ;
  67: CALL 652 0 0
// PrepareRussianCommander ;
  71: CALL 3253 0 0
// PrepareWestBase ;
  75: CALL 3776 0 0
// PrepareEastBase ;
  79: CALL 3332 0 0
// PrepareOtherRussians ;
  83: CALL 3914 0 0
// Action ;
  87: CALL 5578 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// end ;
 282: LD_VAR 0 1
 286: RET
// every 0 0$1 trigger debugMode do var i ;
 287: LD_EXP 41
 291: IFFALSE 597
 293: GO 295
 295: DISABLE
 296: LD_INT 0
 298: PPUSH
// begin enable ;
 299: ENABLE
// FogOff ( true ) ;
 300: LD_INT 1
 302: PPUSH
 303: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 307: LD_ADDR_VAR 0 1
 311: PUSH
 312: LD_INT 22
 314: PUSH
 315: LD_INT 1
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: PUSH
 322: LD_INT 21
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PPUSH
 336: CALL_OW 69
 340: PUSH
 341: FOR_IN
 342: IFFALSE 358
// SetLives ( i , 1000 ) ;
 344: LD_VAR 0 1
 348: PPUSH
 349: LD_INT 1000
 351: PPUSH
 352: CALL_OW 234
 356: GO 341
 358: POP
 359: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 360: LD_ADDR_VAR 0 1
 364: PUSH
 365: LD_INT 22
 367: PUSH
 368: LD_INT 1
 370: PUSH
 371: EMPTY
 372: LIST
 373: LIST
 374: PUSH
 375: LD_INT 2
 377: PUSH
 378: LD_INT 30
 380: PUSH
 381: LD_INT 0
 383: PUSH
 384: EMPTY
 385: LIST
 386: LIST
 387: PUSH
 388: LD_INT 30
 390: PUSH
 391: LD_INT 1
 393: PUSH
 394: EMPTY
 395: LIST
 396: LIST
 397: PUSH
 398: EMPTY
 399: LIST
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 437
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: CALL_OW 274
 424: PPUSH
 425: LD_INT 1
 427: PPUSH
 428: LD_INT 9999
 430: PPUSH
 431: CALL_OW 277
 435: GO 412
 437: POP
 438: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 439: LD_ADDR_VAR 0 1
 443: PUSH
 444: LD_INT 22
 446: PUSH
 447: LD_INT 1
 449: PUSH
 450: EMPTY
 451: LIST
 452: LIST
 453: PUSH
 454: LD_INT 2
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 0
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: LD_INT 30
 469: PUSH
 470: LD_INT 1
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: LIST
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PPUSH
 486: CALL_OW 69
 490: PUSH
 491: FOR_IN
 492: IFFALSE 516
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 494: LD_VAR 0 1
 498: PPUSH
 499: CALL_OW 274
 503: PPUSH
 504: LD_INT 2
 506: PPUSH
 507: LD_INT 9999
 509: PPUSH
 510: CALL_OW 277
 514: GO 491
 516: POP
 517: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 518: LD_ADDR_VAR 0 1
 522: PUSH
 523: LD_INT 22
 525: PUSH
 526: LD_INT 1
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PUSH
 533: LD_INT 2
 535: PUSH
 536: LD_INT 30
 538: PUSH
 539: LD_INT 0
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: PUSH
 546: LD_INT 30
 548: PUSH
 549: LD_INT 1
 551: PUSH
 552: EMPTY
 553: LIST
 554: LIST
 555: PUSH
 556: EMPTY
 557: LIST
 558: LIST
 559: LIST
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: PPUSH
 565: CALL_OW 69
 569: PUSH
 570: FOR_IN
 571: IFFALSE 595
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 573: LD_VAR 0 1
 577: PPUSH
 578: CALL_OW 274
 582: PPUSH
 583: LD_INT 3
 585: PPUSH
 586: LD_INT 9999
 588: PPUSH
 589: CALL_OW 277
 593: GO 570
 595: POP
 596: POP
// end ;
 597: PPOPN 1
 599: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 600: LD_INT 24
 602: PPUSH
 603: LD_INT 22
 605: PUSH
 606: LD_INT 1
 608: PUSH
 609: EMPTY
 610: LIST
 611: LIST
 612: PPUSH
 613: CALL_OW 70
 617: IFFALSE 630
 619: GO 621
 621: DISABLE
// westPathUsed := true ;
 622: LD_ADDR_EXP 42
 626: PUSH
 627: LD_INT 1
 629: ST_TO_ADDR
 630: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 631: LD_EXP 43
 635: PUSH
 636: LD_INT 3
 638: GREATEREQUAL
 639: IFFALSE 651
 641: GO 643
 643: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 644: LD_STRING ACH_LASER
 646: PPUSH
 647: CALL_OW 543
 651: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 652: LD_INT 0
 654: PPUSH
 655: PPUSH
 656: PPUSH
// uc_side := 1 ;
 657: LD_ADDR_OWVAR 20
 661: PUSH
 662: LD_INT 1
 664: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 665: LD_ADDR_EXP 14
 669: PUSH
 670: LD_STRING 11c_others
 672: PPUSH
 673: CALL_OW 31
 677: PUSH
 678: LD_STRING 11_others
 680: PPUSH
 681: CALL_OW 31
 685: UNION
 686: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 687: LD_ADDR_EXP 1
 691: PUSH
 692: LD_STRING JMM
 694: PPUSH
 695: LD_INT 1
 697: PPUSH
 698: LD_STRING 11_
 700: PPUSH
 701: CALL 38988 0 3
 705: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 706: LD_EXP 1
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 718: LD_EXP 1
 722: PPUSH
 723: LD_INT 22
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: LD_INT 58
 745: PUSH
 746: EMPTY
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: LIST
 753: PPUSH
 754: CALL_OW 69
 758: PUSH
 759: LD_INT 1
 761: ARRAY
 762: PPUSH
 763: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 767: LD_STRING 11_Lisa
 769: PPUSH
 770: CALL_OW 28
 774: IFFALSE 824
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 776: LD_ADDR_EXP 2
 780: PUSH
 781: LD_STRING Lisa
 783: PPUSH
 784: LD_INT 1
 786: PPUSH
 787: LD_STRING 11_
 789: PPUSH
 790: CALL 38988 0 3
 794: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 795: LD_EXP 2
 799: PPUSH
 800: LD_INT 1
 802: PPUSH
 803: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 807: LD_EXP 2
 811: PPUSH
 812: LD_INT 4
 814: PPUSH
 815: LD_INT 0
 817: PPUSH
 818: CALL_OW 49
// end else
 822: GO 840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 824: LD_INT 4
 826: PPUSH
 827: LD_INT 0
 829: PPUSH
 830: LD_INT 1
 832: PPUSH
 833: LD_INT 0
 835: PPUSH
 836: CALL 1362 0 4
// if TestCharacters ( 11_Donaldson ) then
 840: LD_STRING 11_Donaldson
 842: PPUSH
 843: CALL_OW 28
 847: IFFALSE 897
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 849: LD_ADDR_EXP 3
 853: PUSH
 854: LD_STRING Donaldson
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: LD_STRING 11_
 862: PPUSH
 863: CALL 38988 0 3
 867: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 868: LD_EXP 3
 872: PPUSH
 873: LD_INT 1
 875: PPUSH
 876: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 880: LD_EXP 3
 884: PPUSH
 885: LD_INT 4
 887: PPUSH
 888: LD_INT 0
 890: PPUSH
 891: CALL_OW 49
// end else
 895: GO 913
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 897: LD_INT 4
 899: PPUSH
 900: LD_INT 0
 902: PPUSH
 903: LD_INT 1
 905: PPUSH
 906: LD_INT 0
 908: PPUSH
 909: CALL 1362 0 4
// if TestCharacters ( 11_Cyrus ) then
 913: LD_STRING 11_Cyrus
 915: PPUSH
 916: CALL_OW 28
 920: IFFALSE 970
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 922: LD_ADDR_EXP 5
 926: PUSH
 927: LD_STRING Cyrus
 929: PPUSH
 930: LD_INT 1
 932: PPUSH
 933: LD_STRING 11_
 935: PPUSH
 936: CALL 38988 0 3
 940: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 941: LD_EXP 5
 945: PPUSH
 946: LD_INT 1
 948: PPUSH
 949: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 953: LD_EXP 5
 957: PPUSH
 958: LD_INT 4
 960: PPUSH
 961: LD_INT 0
 963: PPUSH
 964: CALL_OW 49
// end else
 968: GO 986
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 970: LD_INT 4
 972: PPUSH
 973: LD_INT 0
 975: PPUSH
 976: LD_INT 1
 978: PPUSH
 979: LD_INT 0
 981: PPUSH
 982: CALL 1362 0 4
// if TestCharacters ( 11_Denis ) then
 986: LD_STRING 11_Denis
 988: PPUSH
 989: CALL_OW 28
 993: IFFALSE 1043
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
 995: LD_ADDR_EXP 6
 999: PUSH
1000: LD_STRING Denis
1002: PPUSH
1003: LD_INT 1
1005: PPUSH
1006: LD_STRING 11_
1008: PPUSH
1009: CALL 38988 0 3
1013: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1014: LD_EXP 6
1018: PPUSH
1019: LD_INT 4
1021: PPUSH
1022: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1026: LD_EXP 6
1030: PPUSH
1031: LD_INT 4
1033: PPUSH
1034: LD_INT 0
1036: PPUSH
1037: CALL_OW 49
// end else
1041: GO 1059
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1043: LD_INT 4
1045: PPUSH
1046: LD_INT 0
1048: PPUSH
1049: LD_INT 1
1051: PPUSH
1052: LD_INT 0
1054: PPUSH
1055: CALL 1362 0 4
// if TestCharacters ( 11_Frank ) then
1059: LD_STRING 11_Frank
1061: PPUSH
1062: CALL_OW 28
1066: IFFALSE 1116
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1068: LD_ADDR_EXP 12
1072: PUSH
1073: LD_STRING Frank
1075: PPUSH
1076: LD_INT 1
1078: PPUSH
1079: LD_STRING 11_
1081: PPUSH
1082: CALL 38988 0 3
1086: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1087: LD_EXP 12
1091: PPUSH
1092: LD_INT 1
1094: PPUSH
1095: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1099: LD_EXP 12
1103: PPUSH
1104: LD_INT 4
1106: PPUSH
1107: LD_INT 0
1109: PPUSH
1110: CALL_OW 49
// end else
1114: GO 1132
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1116: LD_INT 4
1118: PPUSH
1119: LD_INT 0
1121: PPUSH
1122: LD_INT 1
1124: PPUSH
1125: LD_INT 0
1127: PPUSH
1128: CALL 1362 0 4
// if TestCharacters ( 11_Cornell ) then
1132: LD_STRING 11_Cornell
1134: PPUSH
1135: CALL_OW 28
1139: IFFALSE 1189
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1141: LD_ADDR_EXP 10
1145: PUSH
1146: LD_STRING Cornell
1148: PPUSH
1149: LD_INT 1
1151: PPUSH
1152: LD_STRING 11_
1154: PPUSH
1155: CALL 38988 0 3
1159: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1160: LD_EXP 10
1164: PPUSH
1165: LD_INT 1
1167: PPUSH
1168: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1172: LD_EXP 10
1176: PPUSH
1177: LD_INT 4
1179: PPUSH
1180: LD_INT 0
1182: PPUSH
1183: CALL_OW 49
// end else
1187: GO 1205
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1189: LD_INT 4
1191: PPUSH
1192: LD_INT 0
1194: PPUSH
1195: LD_INT 1
1197: PPUSH
1198: LD_INT 0
1200: PPUSH
1201: CALL 1362 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_EXP 14
1214: PPUSH
1215: LD_INT 26
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 72
1229: ST_TO_ADDR
// if not tmp then
1230: LD_VAR 0 2
1234: NOT
1235: IFFALSE 1264
// begin PrepareSoldier ( sex_male , 8 ) ;
1237: LD_INT 1
1239: PPUSH
1240: LD_INT 8
1242: PPUSH
1243: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1247: CALL_OW 44
1251: PPUSH
1252: LD_INT 4
1254: PPUSH
1255: LD_INT 0
1257: PPUSH
1258: CALL_OW 49
// end else
1262: GO 1338
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1264: LD_VAR 0 2
1268: PUSH
1269: LD_INT 1
1271: ARRAY
1272: PPUSH
1273: CALL_OW 257
1277: PUSH
1278: LD_INT 1
1280: NONEQUAL
1281: IFFALSE 1299
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1283: LD_VAR 0 2
1287: PUSH
1288: LD_INT 1
1290: ARRAY
1291: PPUSH
1292: LD_INT 1
1294: PPUSH
1295: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1299: LD_VAR 0 2
1303: PUSH
1304: LD_INT 1
1306: ARRAY
1307: PPUSH
1308: LD_INT 4
1310: PPUSH
1311: LD_INT 0
1313: PPUSH
1314: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1318: LD_ADDR_EXP 14
1322: PUSH
1323: LD_EXP 14
1327: PUSH
1328: LD_VAR 0 2
1332: PUSH
1333: LD_INT 1
1335: ARRAY
1336: DIFF
1337: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1338: LD_ADDR_EXP 15
1342: PUSH
1343: LD_STRING Powell
1345: PPUSH
1346: LD_INT 0
1348: PPUSH
1349: LD_STRING 
1351: PPUSH
1352: CALL 38988 0 3
1356: ST_TO_ADDR
// end ;
1357: LD_VAR 0 1
1361: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1362: LD_INT 0
1364: PPUSH
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
// if mech = 1 then
1369: LD_VAR 0 4
1373: PUSH
1374: LD_INT 1
1376: EQUAL
1377: IFFALSE 1610
// begin if others11 then
1379: LD_EXP 14
1383: IFFALSE 1550
// begin for i := 1 to others11 - 1 do
1385: LD_ADDR_VAR 0 6
1389: PUSH
1390: DOUBLE
1391: LD_INT 1
1393: DEC
1394: ST_TO_ADDR
1395: LD_EXP 14
1399: PUSH
1400: LD_INT 1
1402: MINUS
1403: PUSH
1404: FOR_TO
1405: IFFALSE 1487
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1407: LD_EXP 14
1411: PUSH
1412: LD_VAR 0 6
1416: ARRAY
1417: PPUSH
1418: LD_INT 3
1420: PPUSH
1421: CALL_OW 259
1425: PUSH
1426: LD_EXP 14
1430: PUSH
1431: LD_VAR 0 6
1435: PUSH
1436: LD_INT 1
1438: PLUS
1439: ARRAY
1440: PPUSH
1441: LD_INT 3
1443: PPUSH
1444: CALL_OW 259
1448: LESS
1449: IFFALSE 1485
// begin mecha = others11 [ i + 1 ] ;
1451: LD_ADDR_VAR 0 9
1455: PUSH
1456: LD_EXP 14
1460: PUSH
1461: LD_VAR 0 6
1465: PUSH
1466: LD_INT 1
1468: PLUS
1469: ARRAY
1470: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1471: LD_VAR 0 9
1475: PPUSH
1476: LD_INT 3
1478: PPUSH
1479: CALL_OW 336
// break ;
1483: GO 1487
// end ; end ;
1485: GO 1404
1487: POP
1488: POP
// if spawnMode = 1 then
1489: LD_VAR 0 3
1493: PUSH
1494: LD_INT 1
1496: EQUAL
1497: IFFALSE 1518
// PlaceUnitArea ( mecha , area , false ) else
1499: LD_VAR 0 9
1503: PPUSH
1504: LD_VAR 0 1
1508: PPUSH
1509: LD_INT 0
1511: PPUSH
1512: CALL_OW 49
1516: GO 1532
// PlaceHumanInUnit ( mecha , veh ) ;
1518: LD_VAR 0 9
1522: PPUSH
1523: LD_VAR 0 2
1527: PPUSH
1528: CALL_OW 52
// others11 := others11 diff mecha ;
1532: LD_ADDR_EXP 14
1536: PUSH
1537: LD_EXP 14
1541: PUSH
1542: LD_VAR 0 9
1546: DIFF
1547: ST_TO_ADDR
// end else
1548: GO 1608
// begin hc_name :=  ;
1550: LD_ADDR_OWVAR 26
1554: PUSH
1555: LD_STRING 
1557: ST_TO_ADDR
// hc_gallery :=  ;
1558: LD_ADDR_OWVAR 33
1562: PUSH
1563: LD_STRING 
1565: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1566: LD_INT 0
1568: PPUSH
1569: LD_INT 7
1571: PPUSH
1572: LD_INT 9
1574: PPUSH
1575: CALL_OW 12
1579: PPUSH
1580: CALL_OW 383
// un := CreateHuman ;
1584: LD_ADDR_VAR 0 7
1588: PUSH
1589: CALL_OW 44
1593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1594: LD_VAR 0 7
1598: PPUSH
1599: LD_VAR 0 2
1603: PPUSH
1604: CALL_OW 52
// end ; end else
1608: GO 1775
// begin if others11 then
1610: LD_EXP 14
1614: IFFALSE 1687
// begin if spawnMode = 1 then
1616: LD_VAR 0 3
1620: PUSH
1621: LD_INT 1
1623: EQUAL
1624: IFFALSE 1649
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1626: LD_EXP 14
1630: PUSH
1631: LD_INT 1
1633: ARRAY
1634: PPUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 0
1642: PPUSH
1643: CALL_OW 49
1647: GO 1667
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1649: LD_EXP 14
1653: PUSH
1654: LD_INT 1
1656: ARRAY
1657: PPUSH
1658: LD_VAR 0 2
1662: PPUSH
1663: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1667: LD_ADDR_EXP 14
1671: PUSH
1672: LD_EXP 14
1676: PPUSH
1677: LD_INT 1
1679: PPUSH
1680: CALL_OW 3
1684: ST_TO_ADDR
// end else
1685: GO 1775
// begin hc_name :=  ;
1687: LD_ADDR_OWVAR 26
1691: PUSH
1692: LD_STRING 
1694: ST_TO_ADDR
// hc_gallery :=  ;
1695: LD_ADDR_OWVAR 33
1699: PUSH
1700: LD_STRING 
1702: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1703: LD_INT 0
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 2
1711: PUSH
1712: LD_INT 3
1714: PUSH
1715: LD_INT 4
1717: PUSH
1718: EMPTY
1719: LIST
1720: LIST
1721: LIST
1722: LIST
1723: PUSH
1724: LD_INT 1
1726: PPUSH
1727: LD_INT 4
1729: PPUSH
1730: CALL_OW 12
1734: ARRAY
1735: PPUSH
1736: LD_INT 7
1738: PPUSH
1739: LD_INT 9
1741: PPUSH
1742: CALL_OW 12
1746: PPUSH
1747: CALL_OW 380
// un := CreateHuman ;
1751: LD_ADDR_VAR 0 7
1755: PUSH
1756: CALL_OW 44
1760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1761: LD_VAR 0 7
1765: PPUSH
1766: LD_VAR 0 2
1770: PPUSH
1771: CALL_OW 52
// end ; end ; end ;
1775: LD_VAR 0 5
1779: RET
// export function PrepareVehicles ; var veh ; begin
1780: LD_INT 0
1782: PPUSH
1783: PPUSH
// uc_side := 1 ;
1784: LD_ADDR_OWVAR 20
1788: PUSH
1789: LD_INT 1
1791: ST_TO_ADDR
// uc_nation := 1 ;
1792: LD_ADDR_OWVAR 21
1796: PUSH
1797: LD_INT 1
1799: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1800: LD_ADDR_OWVAR 37
1804: PUSH
1805: LD_INT 3
1807: ST_TO_ADDR
// vc_engine := engine_siberite ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 3
1815: ST_TO_ADDR
// vc_control := control_computer ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 3
1823: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 4
1831: ST_TO_ADDR
// veh := CreateVehicle ;
1832: LD_ADDR_VAR 0 2
1836: PUSH
1837: CALL_OW 45
1841: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1842: LD_VAR 0 2
1846: PPUSH
1847: LD_INT 4
1849: PPUSH
1850: LD_INT 0
1852: PPUSH
1853: CALL_OW 49
// vc_weapon := us_double_gun ;
1857: LD_ADDR_OWVAR 40
1861: PUSH
1862: LD_INT 5
1864: ST_TO_ADDR
// vc_control := control_manual ;
1865: LD_ADDR_OWVAR 38
1869: PUSH
1870: LD_INT 1
1872: ST_TO_ADDR
// veh := CreateVehicle ;
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: CALL_OW 45
1882: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1883: LD_VAR 0 2
1887: PPUSH
1888: LD_INT 4
1890: PPUSH
1891: LD_INT 0
1893: PPUSH
1894: CALL_OW 49
// vc_weapon := us_light_gun ;
1898: LD_ADDR_OWVAR 40
1902: PUSH
1903: LD_INT 3
1905: ST_TO_ADDR
// vc_control := control_computer ;
1906: LD_ADDR_OWVAR 38
1910: PUSH
1911: LD_INT 3
1913: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1914: LD_ADDR_OWVAR 37
1918: PUSH
1919: LD_INT 2
1921: ST_TO_ADDR
// veh := CreateVehicle ;
1922: LD_ADDR_VAR 0 2
1926: PUSH
1927: CALL_OW 45
1931: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1932: LD_VAR 0 2
1936: PPUSH
1937: LD_INT 4
1939: PPUSH
1940: LD_INT 0
1942: PPUSH
1943: CALL_OW 49
// vc_weapon := us_gatling_gun ;
1947: LD_ADDR_OWVAR 40
1951: PUSH
1952: LD_INT 4
1954: ST_TO_ADDR
// veh := CreateVehicle ;
1955: LD_ADDR_VAR 0 2
1959: PUSH
1960: CALL_OW 45
1964: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1965: LD_VAR 0 2
1969: PPUSH
1970: LD_INT 4
1972: PPUSH
1973: LD_INT 0
1975: PPUSH
1976: CALL_OW 49
// end ;
1980: LD_VAR 0 1
1984: RET
// export function PowellSupport1 ; var veh , un ; begin
1985: LD_INT 0
1987: PPUSH
1988: PPUSH
1989: PPUSH
// uc_side := 1 ;
1990: LD_ADDR_OWVAR 20
1994: PUSH
1995: LD_INT 1
1997: ST_TO_ADDR
// uc_nation := 1 ;
1998: LD_ADDR_OWVAR 21
2002: PUSH
2003: LD_INT 1
2005: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2006: LD_STRING 11_Brown
2008: PPUSH
2009: CALL_OW 28
2013: IFFALSE 2063
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2015: LD_ADDR_EXP 7
2019: PUSH
2020: LD_STRING Brown
2022: PPUSH
2023: LD_INT 1
2025: PPUSH
2026: LD_STRING 11_
2028: PPUSH
2029: CALL 38988 0 3
2033: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2034: LD_EXP 7
2038: PPUSH
2039: LD_INT 2
2041: PPUSH
2042: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 4
2053: PPUSH
2054: LD_INT 0
2056: PPUSH
2057: CALL_OW 49
// end else
2061: GO 2079
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2063: LD_INT 4
2065: PPUSH
2066: LD_INT 0
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 0
2074: PPUSH
2075: CALL 1362 0 4
// if TestCharacters ( 11_Gary ) then
2079: LD_STRING 11_Gary
2081: PPUSH
2082: CALL_OW 28
2086: IFFALSE 2136
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2088: LD_ADDR_EXP 11
2092: PUSH
2093: LD_STRING Gary
2095: PPUSH
2096: LD_INT 1
2098: PPUSH
2099: LD_STRING 11_
2101: PPUSH
2102: CALL 38988 0 3
2106: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2107: LD_EXP 11
2111: PPUSH
2112: LD_INT 2
2114: PPUSH
2115: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2119: LD_EXP 11
2123: PPUSH
2124: LD_INT 4
2126: PPUSH
2127: LD_INT 0
2129: PPUSH
2130: CALL_OW 49
// end else
2134: GO 2152
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2136: LD_INT 4
2138: PPUSH
2139: LD_INT 0
2141: PPUSH
2142: LD_INT 1
2144: PPUSH
2145: LD_INT 0
2147: PPUSH
2148: CALL 1362 0 4
// vc_chassis := us_medium_tracked ;
2152: LD_ADDR_OWVAR 37
2156: PUSH
2157: LD_INT 3
2159: ST_TO_ADDR
// vc_engine := engine_siberite ;
2160: LD_ADDR_OWVAR 39
2164: PUSH
2165: LD_INT 3
2167: ST_TO_ADDR
// vc_control := control_manual ;
2168: LD_ADDR_OWVAR 38
2172: PUSH
2173: LD_INT 1
2175: ST_TO_ADDR
// vc_weapon := us_crane ;
2176: LD_ADDR_OWVAR 40
2180: PUSH
2181: LD_INT 13
2183: ST_TO_ADDR
// veh := CreateVehicle ;
2184: LD_ADDR_VAR 0 2
2188: PUSH
2189: CALL_OW 45
2193: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2194: LD_VAR 0 2
2198: PPUSH
2199: LD_INT 4
2201: PPUSH
2202: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2206: LD_VAR 0 2
2210: PPUSH
2211: LD_INT 4
2213: PPUSH
2214: LD_INT 0
2216: PPUSH
2217: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2221: LD_INT 4
2223: PPUSH
2224: LD_VAR 0 2
2228: PPUSH
2229: LD_INT 2
2231: PPUSH
2232: LD_INT 1
2234: PPUSH
2235: CALL 1362 0 4
// vc_weapon := us_laser ;
2239: LD_ADDR_OWVAR 40
2243: PUSH
2244: LD_INT 9
2246: ST_TO_ADDR
// veh := CreateVehicle ;
2247: LD_ADDR_VAR 0 2
2251: PUSH
2252: CALL_OW 45
2256: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2257: LD_VAR 0 2
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2269: LD_VAR 0 2
2273: PPUSH
2274: LD_INT 4
2276: PPUSH
2277: LD_INT 0
2279: PPUSH
2280: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2284: LD_INT 4
2286: PPUSH
2287: LD_VAR 0 2
2291: PPUSH
2292: LD_INT 2
2294: PPUSH
2295: LD_INT 1
2297: PPUSH
2298: CALL 1362 0 4
// vc_control := control_computer ;
2302: LD_ADDR_OWVAR 38
2306: PUSH
2307: LD_INT 3
2309: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2310: LD_ADDR_OWVAR 40
2314: PUSH
2315: LD_INT 12
2317: ST_TO_ADDR
// veh := CreateVehicle ;
2318: LD_ADDR_VAR 0 2
2322: PUSH
2323: CALL_OW 45
2327: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2328: LD_VAR 0 2
2332: PPUSH
2333: LD_INT 17
2335: PPUSH
2336: CALL_OW 109
// SetDir ( veh , 4 ) ;
2340: LD_VAR 0 2
2344: PPUSH
2345: LD_INT 4
2347: PPUSH
2348: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2352: LD_VAR 0 2
2356: PPUSH
2357: LD_INT 4
2359: PPUSH
2360: LD_INT 0
2362: PPUSH
2363: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2367: LD_VAR 0 2
2371: PPUSH
2372: LD_INT 3
2374: PPUSH
2375: LD_INT 100
2377: PPUSH
2378: CALL_OW 291
// veh := CreateVehicle ;
2382: LD_ADDR_VAR 0 2
2386: PUSH
2387: CALL_OW 45
2391: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2392: LD_VAR 0 2
2396: PPUSH
2397: LD_INT 17
2399: PPUSH
2400: CALL_OW 109
// SetDir ( veh , 4 ) ;
2404: LD_VAR 0 2
2408: PPUSH
2409: LD_INT 4
2411: PPUSH
2412: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2416: LD_VAR 0 2
2420: PPUSH
2421: LD_INT 4
2423: PPUSH
2424: LD_INT 0
2426: PPUSH
2427: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2431: LD_VAR 0 2
2435: PPUSH
2436: LD_INT 3
2438: PPUSH
2439: LD_INT 20
2441: PPUSH
2442: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 80
2456: PPUSH
2457: CALL_OW 291
// end ;
2461: LD_VAR 0 1
2465: RET
// export function PowellSupport2 ; var veh , un ; begin
2466: LD_INT 0
2468: PPUSH
2469: PPUSH
2470: PPUSH
// uc_side := 1 ;
2471: LD_ADDR_OWVAR 20
2475: PUSH
2476: LD_INT 1
2478: ST_TO_ADDR
// uc_nation := 1 ;
2479: LD_ADDR_OWVAR 21
2483: PUSH
2484: LD_INT 1
2486: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2487: LD_ADDR_OWVAR 37
2491: PUSH
2492: LD_INT 2
2494: ST_TO_ADDR
// vc_engine := engine_siberite ;
2495: LD_ADDR_OWVAR 39
2499: PUSH
2500: LD_INT 3
2502: ST_TO_ADDR
// vc_control := control_computer ;
2503: LD_ADDR_OWVAR 38
2507: PUSH
2508: LD_INT 3
2510: ST_TO_ADDR
// vc_weapon := us_light_gun ;
2511: LD_ADDR_OWVAR 40
2515: PUSH
2516: LD_INT 3
2518: ST_TO_ADDR
// veh := CreateVehicle ;
2519: LD_ADDR_VAR 0 2
2523: PUSH
2524: CALL_OW 45
2528: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2529: LD_VAR 0 2
2533: PPUSH
2534: LD_INT 4
2536: PPUSH
2537: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2541: LD_VAR 0 2
2545: PPUSH
2546: LD_INT 4
2548: PPUSH
2549: LD_INT 0
2551: PPUSH
2552: CALL_OW 49
// vc_control := control_manual ;
2556: LD_ADDR_OWVAR 38
2560: PUSH
2561: LD_INT 1
2563: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2564: LD_ADDR_OWVAR 37
2568: PUSH
2569: LD_INT 2
2571: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2572: LD_ADDR_OWVAR 40
2576: PUSH
2577: LD_INT 5
2579: ST_TO_ADDR
// veh := CreateVehicle ;
2580: LD_ADDR_VAR 0 2
2584: PUSH
2585: CALL_OW 45
2589: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2590: LD_VAR 0 2
2594: PPUSH
2595: LD_INT 4
2597: PPUSH
2598: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2602: LD_VAR 0 2
2606: PPUSH
2607: LD_INT 4
2609: PPUSH
2610: LD_INT 0
2612: PPUSH
2613: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2617: LD_STRING 11_Bobby
2619: PPUSH
2620: CALL_OW 28
2624: IFFALSE 2673
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2626: LD_ADDR_EXP 4
2630: PUSH
2631: LD_STRING Bobby
2633: PPUSH
2634: LD_INT 1
2636: PPUSH
2637: LD_STRING 11_
2639: PPUSH
2640: CALL 38988 0 3
2644: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2645: LD_EXP 4
2649: PPUSH
2650: LD_INT 3
2652: PPUSH
2653: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2657: LD_EXP 4
2661: PPUSH
2662: LD_VAR 0 2
2666: PPUSH
2667: CALL_OW 52
// end else
2671: GO 2691
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2673: LD_INT 0
2675: PPUSH
2676: LD_VAR 0 2
2680: PPUSH
2681: LD_INT 2
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL 1362 0 4
// if TestCharacters ( 11_Houten ) then
2691: LD_STRING 11_Houten
2693: PPUSH
2694: CALL_OW 28
2698: IFFALSE 2748
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2700: LD_ADDR_EXP 9
2704: PUSH
2705: LD_STRING Houten
2707: PPUSH
2708: LD_INT 1
2710: PPUSH
2711: LD_STRING 11_
2713: PPUSH
2714: CALL 38988 0 3
2718: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2719: LD_EXP 9
2723: PPUSH
2724: LD_INT 1
2726: PPUSH
2727: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2731: LD_EXP 9
2735: PPUSH
2736: LD_INT 4
2738: PPUSH
2739: LD_INT 0
2741: PPUSH
2742: CALL_OW 49
// end else
2746: GO 2764
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2748: LD_INT 4
2750: PPUSH
2751: LD_INT 0
2753: PPUSH
2754: LD_INT 1
2756: PPUSH
2757: LD_INT 0
2759: PPUSH
2760: CALL 1362 0 4
// vc_control := control_computer ;
2764: LD_ADDR_OWVAR 38
2768: PUSH
2769: LD_INT 3
2771: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2772: LD_ADDR_OWVAR 40
2776: PUSH
2777: LD_INT 12
2779: ST_TO_ADDR
// veh := CreateVehicle ;
2780: LD_ADDR_VAR 0 2
2784: PUSH
2785: CALL_OW 45
2789: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2790: LD_VAR 0 2
2794: PPUSH
2795: LD_INT 4
2797: PPUSH
2798: CALL_OW 233
// SetTag ( veh , 17 ) ;
2802: LD_VAR 0 2
2806: PPUSH
2807: LD_INT 17
2809: PPUSH
2810: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2814: LD_VAR 0 2
2818: PPUSH
2819: LD_INT 1
2821: PPUSH
2822: LD_INT 100
2824: PPUSH
2825: CALL_OW 291
// veh := CreateVehicle ;
2829: LD_ADDR_VAR 0 2
2833: PUSH
2834: CALL_OW 45
2838: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2839: LD_VAR 0 2
2843: PPUSH
2844: LD_INT 4
2846: PPUSH
2847: CALL_OW 233
// SetTag ( veh , 17 ) ;
2851: LD_VAR 0 2
2855: PPUSH
2856: LD_INT 17
2858: PPUSH
2859: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2863: LD_VAR 0 2
2867: PPUSH
2868: LD_INT 4
2870: PPUSH
2871: LD_INT 0
2873: PPUSH
2874: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2878: LD_VAR 0 2
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 100
2888: PPUSH
2889: CALL_OW 291
// veh := CreateVehicle ;
2893: LD_ADDR_VAR 0 2
2897: PUSH
2898: CALL_OW 45
2902: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2903: LD_VAR 0 2
2907: PPUSH
2908: LD_INT 4
2910: PPUSH
2911: CALL_OW 233
// SetTag ( veh , 17 ) ;
2915: LD_VAR 0 2
2919: PPUSH
2920: LD_INT 17
2922: PPUSH
2923: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2927: LD_VAR 0 2
2931: PPUSH
2932: LD_INT 4
2934: PPUSH
2935: LD_INT 0
2937: PPUSH
2938: CALL_OW 49
// if kurtStatus then
2942: LD_EXP 19
2946: IFFALSE 2980
// begin AddCargo ( veh , mat_siberit , 60 ) ;
2948: LD_VAR 0 2
2952: PPUSH
2953: LD_INT 3
2955: PPUSH
2956: LD_INT 60
2958: PPUSH
2959: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
2963: LD_VAR 0 2
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 40
2973: PPUSH
2974: CALL_OW 291
// end else
2978: GO 2995
// AddCargo ( veh , mat_cans , 100 ) ;
2980: LD_VAR 0 2
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 100
2990: PPUSH
2991: CALL_OW 291
// veh := CreateVehicle ;
2995: LD_ADDR_VAR 0 2
2999: PUSH
3000: CALL_OW 45
3004: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3005: LD_VAR 0 2
3009: PPUSH
3010: LD_INT 4
3012: PPUSH
3013: CALL_OW 233
// SetTag ( veh , 17 ) ;
3017: LD_VAR 0 2
3021: PPUSH
3022: LD_INT 17
3024: PPUSH
3025: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3029: LD_VAR 0 2
3033: PPUSH
3034: LD_INT 4
3036: PPUSH
3037: LD_INT 0
3039: PPUSH
3040: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3044: LD_VAR 0 2
3048: PPUSH
3049: LD_INT 2
3051: PPUSH
3052: LD_INT 60
3054: PPUSH
3055: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3059: LD_VAR 0 2
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 40
3069: PPUSH
3070: CALL_OW 291
// end ;
3074: LD_VAR 0 1
3078: RET
// export function PowellSupport3 ; var i , cargo ; begin
3079: LD_INT 0
3081: PPUSH
3082: PPUSH
3083: PPUSH
// uc_side := 1 ;
3084: LD_ADDR_OWVAR 20
3088: PUSH
3089: LD_INT 1
3091: ST_TO_ADDR
// uc_nation := 1 ;
3092: LD_ADDR_OWVAR 21
3096: PUSH
3097: LD_INT 1
3099: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3100: LD_INT 4
3102: PPUSH
3103: LD_INT 0
3105: PPUSH
3106: LD_INT 1
3108: PPUSH
3109: LD_INT 0
3111: PPUSH
3112: CALL 1362 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3116: LD_INT 4
3118: PPUSH
3119: LD_INT 0
3121: PPUSH
3122: LD_INT 1
3124: PPUSH
3125: LD_INT 0
3127: PPUSH
3128: CALL 1362 0 4
// for i := 1 to 2 do
3132: LD_ADDR_VAR 0 2
3136: PUSH
3137: DOUBLE
3138: LD_INT 1
3140: DEC
3141: ST_TO_ADDR
3142: LD_INT 2
3144: PUSH
3145: FOR_TO
3146: IFFALSE 3246
// begin vc_chassis := us_medium_wheeled ;
3148: LD_ADDR_OWVAR 37
3152: PUSH
3153: LD_INT 2
3155: ST_TO_ADDR
// vc_engine := engine_siberite ;
3156: LD_ADDR_OWVAR 39
3160: PUSH
3161: LD_INT 3
3163: ST_TO_ADDR
// vc_control = control_computer ;
3164: LD_ADDR_OWVAR 38
3168: PUSH
3169: LD_INT 3
3171: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3172: LD_ADDR_OWVAR 40
3176: PUSH
3177: LD_INT 12
3179: ST_TO_ADDR
// cargo := CreateVehicle ;
3180: LD_ADDR_VAR 0 3
3184: PUSH
3185: CALL_OW 45
3189: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3190: LD_VAR 0 3
3194: PPUSH
3195: LD_INT 4
3197: PPUSH
3198: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3202: LD_VAR 0 3
3206: PPUSH
3207: LD_INT 17
3209: PPUSH
3210: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3214: LD_VAR 0 3
3218: PPUSH
3219: LD_INT 4
3221: PPUSH
3222: LD_INT 0
3224: PPUSH
3225: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3229: LD_VAR 0 3
3233: PPUSH
3234: LD_INT 1
3236: PPUSH
3237: LD_INT 100
3239: PPUSH
3240: CALL_OW 291
// end ;
3244: GO 3145
3246: POP
3247: POP
// end ; end_of_file
3248: LD_VAR 0 1
3252: RET
// export function PrepareRussianCommander ; begin
3253: LD_INT 0
3255: PPUSH
// uc_side := 3 ;
3256: LD_ADDR_OWVAR 20
3260: PUSH
3261: LD_INT 3
3263: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3264: LD_ADDR_EXP 16
3268: PUSH
3269: LD_STRING Davidov
3271: PPUSH
3272: LD_INT 0
3274: PPUSH
3275: LD_STRING 
3277: PPUSH
3278: CALL 38988 0 3
3282: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3283: LD_EXP 16
3287: PPUSH
3288: LD_INT 3
3290: PPUSH
3291: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3295: LD_ADDR_EXP 27
3299: PUSH
3300: LD_EXP 27
3304: PPUSH
3305: LD_EXP 16
3309: PPUSH
3310: CALL 76456 0 2
3314: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3315: LD_EXP 27
3319: PPUSH
3320: LD_INT 4
3322: PPUSH
3323: CALL_OW 336
// end ;
3327: LD_VAR 0 1
3331: RET
// export function PrepareEastBase ; var i , un ; begin
3332: LD_INT 0
3334: PPUSH
3335: PPUSH
3336: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3337: LD_INT 3
3339: PPUSH
3340: LD_INT 3
3342: PPUSH
3343: LD_INT 121
3345: PPUSH
3346: LD_EXP 29
3350: PPUSH
3351: LD_EXP 30
3355: PPUSH
3356: CALL_OW 12
3360: PPUSH
3361: LD_INT 1
3363: PPUSH
3364: LD_INT 3
3366: PPUSH
3367: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3371: LD_INT 3
3373: PPUSH
3374: LD_INT 3
3376: PPUSH
3377: LD_INT 121
3379: PPUSH
3380: LD_EXP 29
3384: PPUSH
3385: LD_EXP 30
3389: PPUSH
3390: CALL_OW 12
3394: PPUSH
3395: LD_INT 9
3397: PPUSH
3398: LD_INT 3
3400: PPUSH
3401: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3405: LD_INT 3
3407: PPUSH
3408: LD_INT 3
3410: PPUSH
3411: LD_INT 4
3413: PPUSH
3414: LD_EXP 29
3418: PPUSH
3419: LD_EXP 30
3423: PPUSH
3424: CALL_OW 12
3428: PPUSH
3429: LD_INT 2
3431: PPUSH
3432: LD_INT 6
3434: PPUSH
3435: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3439: LD_INT 3
3441: PPUSH
3442: LD_INT 3
3444: PPUSH
3445: LD_INT 112
3447: PPUSH
3448: LD_EXP 29
3452: PPUSH
3453: LD_EXP 30
3457: PPUSH
3458: CALL_OW 12
3462: PPUSH
3463: LD_INT 3
3465: PPUSH
3466: LD_INT 6
3468: PPUSH
3469: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3473: LD_INT 3
3475: PPUSH
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 47
3481: PPUSH
3482: LD_EXP 29
3486: PPUSH
3487: LD_EXP 30
3491: PPUSH
3492: CALL_OW 12
3496: PPUSH
3497: LD_INT 4
3499: PPUSH
3500: LD_INT 6
3502: PPUSH
3503: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3507: LD_INT 3
3509: PPUSH
3510: LD_INT 3
3512: PPUSH
3513: LD_INT 129
3515: PPUSH
3516: LD_EXP 29
3520: PPUSH
3521: LD_EXP 30
3525: PPUSH
3526: CALL_OW 12
3530: PPUSH
3531: LD_INT 4
3533: PPUSH
3534: LD_INT 6
3536: PPUSH
3537: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3541: LD_INT 3
3543: PPUSH
3544: LD_INT 3
3546: PPUSH
3547: LD_INT 135
3549: PPUSH
3550: LD_EXP 29
3554: PPUSH
3555: LD_EXP 30
3559: PPUSH
3560: CALL_OW 12
3564: PPUSH
3565: LD_INT 4
3567: PPUSH
3568: LD_INT 6
3570: PPUSH
3571: CALL 12731 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3575: LD_ADDR_VAR 0 2
3579: PUSH
3580: LD_INT 22
3582: PUSH
3583: LD_INT 3
3585: PUSH
3586: EMPTY
3587: LIST
3588: LIST
3589: PUSH
3590: LD_INT 30
3592: PUSH
3593: LD_INT 32
3595: PUSH
3596: EMPTY
3597: LIST
3598: LIST
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: CALL_OW 69
3608: PUSH
3609: FOR_IN
3610: IFFALSE 3650
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3612: LD_INT 3
3614: PPUSH
3615: LD_INT 3
3617: PPUSH
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_EXP 29
3627: PPUSH
3628: LD_EXP 30
3632: PPUSH
3633: CALL_OW 12
3637: PPUSH
3638: LD_INT 1
3640: PPUSH
3641: LD_INT 1
3643: PPUSH
3644: CALL 12731 0 6
3648: GO 3609
3650: POP
3651: POP
// for i := 1 to 5 do
3652: LD_ADDR_VAR 0 2
3656: PUSH
3657: DOUBLE
3658: LD_INT 1
3660: DEC
3661: ST_TO_ADDR
3662: LD_INT 5
3664: PUSH
3665: FOR_TO
3666: IFFALSE 3769
// begin uc_side := 3 ;
3668: LD_ADDR_OWVAR 20
3672: PUSH
3673: LD_INT 3
3675: ST_TO_ADDR
// uc_nation := 3 ;
3676: LD_ADDR_OWVAR 21
3680: PUSH
3681: LD_INT 3
3683: ST_TO_ADDR
// hc_gallery :=  ;
3684: LD_ADDR_OWVAR 33
3688: PUSH
3689: LD_STRING 
3691: ST_TO_ADDR
// hc_name :=  ;
3692: LD_ADDR_OWVAR 26
3696: PUSH
3697: LD_STRING 
3699: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3700: LD_INT 0
3702: PPUSH
3703: LD_INT 4
3705: PPUSH
3706: LD_EXP 29
3710: PPUSH
3711: LD_EXP 30
3715: PPUSH
3716: CALL_OW 12
3720: PPUSH
3721: CALL_OW 380
// un := CreateHuman ;
3725: LD_ADDR_VAR 0 3
3729: PUSH
3730: CALL_OW 44
3734: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3735: LD_VAR 0 3
3739: PPUSH
3740: LD_INT 3
3742: PPUSH
3743: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
3747: LD_ADDR_EXP 27
3751: PUSH
3752: LD_EXP 27
3756: PPUSH
3757: LD_VAR 0 3
3761: PPUSH
3762: CALL 76456 0 2
3766: ST_TO_ADDR
// end ;
3767: GO 3665
3769: POP
3770: POP
// end ;
3771: LD_VAR 0 1
3775: RET
// export function PrepareWestBase ; var i , un ; begin
3776: LD_INT 0
3778: PPUSH
3779: PPUSH
3780: PPUSH
// TeleportExit ( ruteleprt , 122 , 145 ) ;
3781: LD_INT 10
3783: PPUSH
3784: LD_INT 122
3786: PPUSH
3787: LD_INT 145
3789: PPUSH
3790: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
3794: LD_INT 137
3796: PPUSH
3797: LD_INT 84
3799: PPUSH
3800: LD_INT 61
3802: PPUSH
3803: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3807: LD_INT 3
3809: PPUSH
3810: LD_INT 3
3812: PPUSH
3813: LD_INT 6
3815: PPUSH
3816: LD_EXP 29
3820: PPUSH
3821: LD_EXP 30
3825: PPUSH
3826: CALL_OW 12
3830: PPUSH
3831: LD_INT 2
3833: PPUSH
3834: LD_INT 3
3836: PPUSH
3837: CALL 12731 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3841: LD_INT 3
3843: PPUSH
3844: LD_INT 3
3846: PPUSH
3847: LD_INT 91
3849: PPUSH
3850: LD_EXP 29
3854: PPUSH
3855: LD_EXP 30
3859: PPUSH
3860: CALL_OW 12
3864: PPUSH
3865: LD_INT 4
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: CALL 12731 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3875: LD_INT 3
3877: PPUSH
3878: LD_INT 3
3880: PPUSH
3881: LD_INT 21
3883: PPUSH
3884: LD_EXP 29
3888: PPUSH
3889: LD_EXP 30
3893: PPUSH
3894: CALL_OW 12
3898: PPUSH
3899: LD_INT 3
3901: PPUSH
3902: LD_INT 6
3904: PPUSH
3905: CALL 12731 0 6
// end ;
3909: LD_VAR 0 1
3913: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3914: LD_INT 0
3916: PPUSH
3917: PPUSH
3918: PPUSH
3919: PPUSH
// uc_side := 3 ;
3920: LD_ADDR_OWVAR 20
3924: PUSH
3925: LD_INT 3
3927: ST_TO_ADDR
// uc_nation := 3 ;
3928: LD_ADDR_OWVAR 21
3932: PUSH
3933: LD_INT 3
3935: ST_TO_ADDR
// for i := 1 to 5 do
3936: LD_ADDR_VAR 0 2
3940: PUSH
3941: DOUBLE
3942: LD_INT 1
3944: DEC
3945: ST_TO_ADDR
3946: LD_INT 5
3948: PUSH
3949: FOR_TO
3950: IFFALSE 4020
// begin hc_gallery :=  ;
3952: LD_ADDR_OWVAR 33
3956: PUSH
3957: LD_STRING 
3959: ST_TO_ADDR
// hc_name :=  ;
3960: LD_ADDR_OWVAR 26
3964: PUSH
3965: LD_STRING 
3967: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3968: LD_INT 0
3970: PPUSH
3971: LD_INT 9
3973: PPUSH
3974: LD_EXP 29
3978: PPUSH
3979: LD_EXP 30
3983: PPUSH
3984: CALL_OW 12
3988: PPUSH
3989: CALL_OW 380
// un := CreateHuman ;
3993: LD_ADDR_VAR 0 3
3997: PUSH
3998: CALL_OW 44
4002: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4003: LD_VAR 0 3
4007: PPUSH
4008: LD_INT 8
4010: PPUSH
4011: LD_INT 0
4013: PPUSH
4014: CALL_OW 49
// end ;
4018: GO 3949
4020: POP
4021: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4022: LD_ADDR_VAR 0 2
4026: PUSH
4027: DOUBLE
4028: LD_INT 1
4030: DEC
4031: ST_TO_ADDR
4032: LD_INT 2
4034: PUSH
4035: LD_INT 3
4037: PUSH
4038: LD_INT 4
4040: PUSH
4041: LD_INT 4
4043: PUSH
4044: EMPTY
4045: LIST
4046: LIST
4047: LIST
4048: LIST
4049: PUSH
4050: LD_OWVAR 67
4054: ARRAY
4055: PUSH
4056: FOR_TO
4057: IFFALSE 4127
// begin hc_gallery :=  ;
4059: LD_ADDR_OWVAR 33
4063: PUSH
4064: LD_STRING 
4066: ST_TO_ADDR
// hc_name :=  ;
4067: LD_ADDR_OWVAR 26
4071: PUSH
4072: LD_STRING 
4074: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4075: LD_INT 0
4077: PPUSH
4078: LD_INT 4
4080: PPUSH
4081: LD_EXP 29
4085: PPUSH
4086: LD_EXP 30
4090: PPUSH
4091: CALL_OW 12
4095: PPUSH
4096: CALL_OW 380
// un := CreateHuman ;
4100: LD_ADDR_VAR 0 3
4104: PUSH
4105: CALL_OW 44
4109: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4110: LD_VAR 0 3
4114: PPUSH
4115: LD_INT 8
4117: PPUSH
4118: LD_INT 0
4120: PPUSH
4121: CALL_OW 49
// end ;
4125: GO 4056
4127: POP
4128: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: DOUBLE
4135: LD_INT 1
4137: DEC
4138: ST_TO_ADDR
4139: LD_INT 3
4141: PUSH
4142: LD_INT 4
4144: PUSH
4145: LD_INT 5
4147: PUSH
4148: LD_INT 5
4150: PUSH
4151: EMPTY
4152: LIST
4153: LIST
4154: LIST
4155: LIST
4156: PUSH
4157: LD_OWVAR 67
4161: ARRAY
4162: PUSH
4163: FOR_TO
4164: IFFALSE 4381
// begin vc_engine = 3 ;
4166: LD_ADDR_OWVAR 39
4170: PUSH
4171: LD_INT 3
4173: ST_TO_ADDR
// vc_control = 1 ;
4174: LD_ADDR_OWVAR 38
4178: PUSH
4179: LD_INT 1
4181: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4182: LD_ADDR_OWVAR 40
4186: PUSH
4187: LD_INT 42
4189: PUSH
4190: LD_INT 43
4192: PUSH
4193: LD_INT 44
4195: PUSH
4196: LD_INT 45
4198: PUSH
4199: LD_INT 46
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: LIST
4206: LIST
4207: LIST
4208: PUSH
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 5
4214: PPUSH
4215: CALL_OW 12
4219: ARRAY
4220: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4221: LD_OWVAR 40
4225: PUSH
4226: LD_INT 46
4228: EQUAL
4229: IFFALSE 4241
// vc_chassis := ru_heavy_tracked else
4231: LD_ADDR_OWVAR 37
4235: PUSH
4236: LD_INT 24
4238: ST_TO_ADDR
4239: GO 4268
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4241: LD_ADDR_OWVAR 37
4245: PUSH
4246: LD_INT 22
4248: PUSH
4249: LD_INT 21
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: PUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 2
4261: PPUSH
4262: CALL_OW 12
4266: ARRAY
4267: ST_TO_ADDR
// veh := CreateVehicle ;
4268: LD_ADDR_VAR 0 4
4272: PUSH
4273: CALL_OW 45
4277: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4278: LD_VAR 0 4
4282: PPUSH
4283: LD_INT 3
4285: PPUSH
4286: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4290: LD_VAR 0 4
4294: PPUSH
4295: LD_INT 5
4297: PPUSH
4298: LD_INT 0
4300: PPUSH
4301: CALL_OW 49
// hc_gallery :=  ;
4305: LD_ADDR_OWVAR 33
4309: PUSH
4310: LD_STRING 
4312: ST_TO_ADDR
// hc_name :=  ;
4313: LD_ADDR_OWVAR 26
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
4321: LD_INT 0
4323: PPUSH
4324: LD_INT 3
4326: PPUSH
4327: LD_INT 6
4329: PUSH
4330: LD_INT 7
4332: PUSH
4333: LD_INT 8
4335: PUSH
4336: LD_INT 10
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: PUSH
4345: LD_OWVAR 67
4349: ARRAY
4350: PPUSH
4351: CALL_OW 380
// un = CreateHuman ;
4355: LD_ADDR_VAR 0 3
4359: PUSH
4360: CALL_OW 44
4364: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4365: LD_VAR 0 3
4369: PPUSH
4370: LD_VAR 0 4
4374: PPUSH
4375: CALL_OW 52
// end ;
4379: GO 4163
4381: POP
4382: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4383: LD_ADDR_VAR 0 2
4387: PUSH
4388: DOUBLE
4389: LD_INT 1
4391: DEC
4392: ST_TO_ADDR
4393: LD_INT 3
4395: PUSH
4396: LD_INT 4
4398: PUSH
4399: LD_INT 5
4401: PUSH
4402: LD_INT 5
4404: PUSH
4405: EMPTY
4406: LIST
4407: LIST
4408: LIST
4409: LIST
4410: PUSH
4411: LD_OWVAR 67
4415: ARRAY
4416: PUSH
4417: FOR_TO
4418: IFFALSE 4565
// begin vc_engine := 3 ;
4420: LD_ADDR_OWVAR 39
4424: PUSH
4425: LD_INT 3
4427: ST_TO_ADDR
// vc_control := 3 ;
4428: LD_ADDR_OWVAR 38
4432: PUSH
4433: LD_INT 3
4435: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4436: LD_ADDR_OWVAR 40
4440: PUSH
4441: LD_INT 42
4443: PUSH
4444: LD_INT 43
4446: PUSH
4447: LD_INT 44
4449: PUSH
4450: LD_INT 45
4452: PUSH
4453: LD_INT 46
4455: PUSH
4456: LD_INT 49
4458: PUSH
4459: EMPTY
4460: LIST
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_INT 1
4469: PPUSH
4470: LD_INT 5
4472: PPUSH
4473: CALL_OW 12
4477: ARRAY
4478: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4479: LD_OWVAR 40
4483: PUSH
4484: LD_INT 46
4486: EQUAL
4487: IFFALSE 4499
// vc_chassis := ru_heavy_tracked else
4489: LD_ADDR_OWVAR 37
4493: PUSH
4494: LD_INT 24
4496: ST_TO_ADDR
4497: GO 4526
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4499: LD_ADDR_OWVAR 37
4503: PUSH
4504: LD_INT 22
4506: PUSH
4507: LD_INT 21
4509: PUSH
4510: EMPTY
4511: LIST
4512: LIST
4513: PUSH
4514: LD_INT 1
4516: PPUSH
4517: LD_INT 2
4519: PPUSH
4520: CALL_OW 12
4524: ARRAY
4525: ST_TO_ADDR
// veh := CreateVehicle ;
4526: LD_ADDR_VAR 0 4
4530: PUSH
4531: CALL_OW 45
4535: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4536: LD_VAR 0 4
4540: PPUSH
4541: LD_INT 3
4543: PPUSH
4544: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4548: LD_VAR 0 4
4552: PPUSH
4553: LD_INT 6
4555: PPUSH
4556: LD_INT 0
4558: PPUSH
4559: CALL_OW 49
// end ;
4563: GO 4417
4565: POP
4566: POP
// end ; end_of_file
4567: LD_VAR 0 1
4571: RET
// export function PrepareKurt ; begin
4572: LD_INT 0
4574: PPUSH
// uc_side := 8 ;
4575: LD_ADDR_OWVAR 20
4579: PUSH
4580: LD_INT 8
4582: ST_TO_ADDR
// uc_nation := 2 ;
4583: LD_ADDR_OWVAR 21
4587: PUSH
4588: LD_INT 2
4590: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4591: LD_ADDR_OWVAR 37
4595: PUSH
4596: LD_INT 13
4598: ST_TO_ADDR
// vc_engine := 1 ;
4599: LD_ADDR_OWVAR 39
4603: PUSH
4604: LD_INT 1
4606: ST_TO_ADDR
// vc_control := 1 ;
4607: LD_ADDR_OWVAR 38
4611: PUSH
4612: LD_INT 1
4614: ST_TO_ADDR
// vc_weapon := 24 ;
4615: LD_ADDR_OWVAR 40
4619: PUSH
4620: LD_INT 24
4622: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
4623: LD_ADDR_EXP 18
4627: PUSH
4628: CALL_OW 45
4632: ST_TO_ADDR
// if kurtStatus > 0 then
4633: LD_EXP 19
4637: PUSH
4638: LD_INT 0
4640: GREATER
4641: IFFALSE 4693
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
4643: LD_ADDR_EXP 17
4647: PUSH
4648: LD_STRING Kurt
4650: PPUSH
4651: LD_INT 0
4653: PPUSH
4654: LD_STRING 
4656: PPUSH
4657: CALL 38988 0 3
4661: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4662: LD_EXP 18
4666: PPUSH
4667: LD_INT 4
4669: PPUSH
4670: LD_INT 0
4672: PPUSH
4673: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4677: LD_EXP 17
4681: PPUSH
4682: LD_EXP 18
4686: PPUSH
4687: CALL_OW 52
// end else
4691: GO 4770
// begin hc_name :=  ;
4693: LD_ADDR_OWVAR 26
4697: PUSH
4698: LD_STRING 
4700: ST_TO_ADDR
// hc_gallery :=  ;
4701: LD_ADDR_OWVAR 33
4705: PUSH
4706: LD_STRING 
4708: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4709: LD_INT 1
4711: PPUSH
4712: LD_INT 10
4714: PPUSH
4715: CALL_OW 381
// Kurt := CreateHuman ;
4719: LD_ADDR_EXP 17
4723: PUSH
4724: CALL_OW 44
4728: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4729: LD_EXP 18
4733: PPUSH
4734: LD_INT 4
4736: PPUSH
4737: LD_INT 0
4739: PPUSH
4740: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4744: LD_EXP 17
4748: PPUSH
4749: LD_EXP 18
4753: PPUSH
4754: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4758: LD_EXP 17
4762: PPUSH
4763: LD_STRING AltKurt
4765: PPUSH
4766: CALL_OW 38
// end ; end ;
4770: LD_VAR 0 1
4774: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4775: LD_INT 0
4777: PPUSH
4778: PPUSH
4779: PPUSH
4780: PPUSH
// for i := 1 to 3 do
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: DOUBLE
4787: LD_INT 1
4789: DEC
4790: ST_TO_ADDR
4791: LD_INT 3
4793: PUSH
4794: FOR_TO
4795: IFFALSE 4916
// begin uc_side := 1 ;
4797: LD_ADDR_OWVAR 20
4801: PUSH
4802: LD_INT 1
4804: ST_TO_ADDR
// uc_nation := 2 ;
4805: LD_ADDR_OWVAR 21
4809: PUSH
4810: LD_INT 2
4812: ST_TO_ADDR
// hc_gallery =  ;
4813: LD_ADDR_OWVAR 33
4817: PUSH
4818: LD_STRING 
4820: ST_TO_ADDR
// hc_name =  ;
4821: LD_ADDR_OWVAR 26
4825: PUSH
4826: LD_STRING 
4828: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4829: LD_EXP 19
4833: PUSH
4834: LD_INT 0
4836: EQUAL
4837: PUSH
4838: LD_EXP 19
4842: PUSH
4843: LD_INT 2
4845: EQUAL
4846: OR
4847: IFFALSE 4864
// PrepareHuman ( false , 1 , 6 ) else
4849: LD_INT 0
4851: PPUSH
4852: LD_INT 1
4854: PPUSH
4855: LD_INT 6
4857: PPUSH
4858: CALL_OW 380
4862: GO 4877
// PrepareHuman ( false , 1 , 8 ) ;
4864: LD_INT 0
4866: PPUSH
4867: LD_INT 1
4869: PPUSH
4870: LD_INT 8
4872: PPUSH
4873: CALL_OW 380
// un := CreateHuman ;
4877: LD_ADDR_VAR 0 3
4881: PUSH
4882: CALL_OW 44
4886: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4887: LD_VAR 0 3
4891: PPUSH
4892: LD_INT 4
4894: PPUSH
4895: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4899: LD_VAR 0 3
4903: PPUSH
4904: LD_INT 4
4906: PPUSH
4907: LD_INT 0
4909: PPUSH
4910: CALL_OW 49
// end ;
4914: GO 4794
4916: POP
4917: POP
// vc_chassis := 14 ;
4918: LD_ADDR_OWVAR 37
4922: PUSH
4923: LD_INT 14
4925: ST_TO_ADDR
// vc_engine := 3 ;
4926: LD_ADDR_OWVAR 39
4930: PUSH
4931: LD_INT 3
4933: ST_TO_ADDR
// vc_control := 1 ;
4934: LD_ADDR_OWVAR 38
4938: PUSH
4939: LD_INT 1
4941: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4942: LD_ADDR_OWVAR 40
4946: PUSH
4947: LD_INT 27
4949: PUSH
4950: LD_INT 26
4952: PUSH
4953: LD_INT 28
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 1
4963: PPUSH
4964: LD_INT 3
4966: PPUSH
4967: CALL_OW 12
4971: ARRAY
4972: ST_TO_ADDR
// veh := CreateVehicle ;
4973: LD_ADDR_VAR 0 4
4977: PUSH
4978: CALL_OW 45
4982: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4983: LD_VAR 0 4
4987: PPUSH
4988: LD_INT 4
4990: PPUSH
4991: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4995: LD_VAR 0 4
4999: PPUSH
5000: LD_INT 4
5002: PPUSH
5003: LD_INT 0
5005: PPUSH
5006: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5010: LD_EXP 19
5014: PUSH
5015: LD_INT 0
5017: EQUAL
5018: PUSH
5019: LD_EXP 19
5023: PUSH
5024: LD_INT 2
5026: EQUAL
5027: OR
5028: IFFALSE 5045
// PrepareHuman ( false , 3 , 6 ) else
5030: LD_INT 0
5032: PPUSH
5033: LD_INT 3
5035: PPUSH
5036: LD_INT 6
5038: PPUSH
5039: CALL_OW 380
5043: GO 5058
// PrepareHuman ( false , 3 , 8 ) ;
5045: LD_INT 0
5047: PPUSH
5048: LD_INT 3
5050: PPUSH
5051: LD_INT 8
5053: PPUSH
5054: CALL_OW 380
// un := CreateHuman ;
5058: LD_ADDR_VAR 0 3
5062: PUSH
5063: CALL_OW 44
5067: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5068: LD_VAR 0 3
5072: PPUSH
5073: LD_VAR 0 4
5077: PPUSH
5078: CALL_OW 52
// vc_chassis := 14 ;
5082: LD_ADDR_OWVAR 37
5086: PUSH
5087: LD_INT 14
5089: ST_TO_ADDR
// vc_engine := 3 ;
5090: LD_ADDR_OWVAR 39
5094: PUSH
5095: LD_INT 3
5097: ST_TO_ADDR
// vc_control := 1 ;
5098: LD_ADDR_OWVAR 38
5102: PUSH
5103: LD_INT 1
5105: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5106: LD_ADDR_OWVAR 40
5110: PUSH
5111: LD_INT 27
5113: PUSH
5114: LD_INT 26
5116: PUSH
5117: LD_INT 28
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: LIST
5124: PUSH
5125: LD_INT 1
5127: PPUSH
5128: LD_INT 3
5130: PPUSH
5131: CALL_OW 12
5135: ARRAY
5136: ST_TO_ADDR
// veh := CreateVehicle ;
5137: LD_ADDR_VAR 0 4
5141: PUSH
5142: CALL_OW 45
5146: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5147: LD_VAR 0 4
5151: PPUSH
5152: LD_INT 4
5154: PPUSH
5155: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5159: LD_VAR 0 4
5163: PPUSH
5164: LD_INT 4
5166: PPUSH
5167: LD_INT 0
5169: PPUSH
5170: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5174: LD_EXP 19
5178: PUSH
5179: LD_INT 0
5181: EQUAL
5182: PUSH
5183: LD_EXP 19
5187: PUSH
5188: LD_INT 2
5190: EQUAL
5191: OR
5192: IFFALSE 5209
// PrepareHuman ( false , 4 , 6 ) else
5194: LD_INT 0
5196: PPUSH
5197: LD_INT 4
5199: PPUSH
5200: LD_INT 6
5202: PPUSH
5203: CALL_OW 380
5207: GO 5222
// PrepareHuman ( false , 4 , 8 ) ;
5209: LD_INT 0
5211: PPUSH
5212: LD_INT 4
5214: PPUSH
5215: LD_INT 8
5217: PPUSH
5218: CALL_OW 380
// un := CreateHuman ;
5222: LD_ADDR_VAR 0 3
5226: PUSH
5227: CALL_OW 44
5231: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5232: LD_VAR 0 3
5236: PPUSH
5237: LD_INT 4
5239: PPUSH
5240: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5244: LD_VAR 0 3
5248: PPUSH
5249: LD_VAR 0 4
5253: PPUSH
5254: CALL_OW 52
// vc_chassis := 14 ;
5258: LD_ADDR_OWVAR 37
5262: PUSH
5263: LD_INT 14
5265: ST_TO_ADDR
// vc_engine := 3 ;
5266: LD_ADDR_OWVAR 39
5270: PUSH
5271: LD_INT 3
5273: ST_TO_ADDR
// vc_control := 1 ;
5274: LD_ADDR_OWVAR 38
5278: PUSH
5279: LD_INT 1
5281: ST_TO_ADDR
// vc_weapon := 26 ;
5282: LD_ADDR_OWVAR 40
5286: PUSH
5287: LD_INT 26
5289: ST_TO_ADDR
// veh := CreateVehicle ;
5290: LD_ADDR_VAR 0 4
5294: PUSH
5295: CALL_OW 45
5299: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5300: LD_VAR 0 4
5304: PPUSH
5305: LD_INT 4
5307: PPUSH
5308: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5312: LD_VAR 0 4
5316: PPUSH
5317: LD_INT 4
5319: PPUSH
5320: LD_INT 0
5322: PPUSH
5323: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5327: LD_EXP 19
5331: PUSH
5332: LD_INT 0
5334: EQUAL
5335: PUSH
5336: LD_EXP 19
5340: PUSH
5341: LD_INT 2
5343: EQUAL
5344: OR
5345: IFFALSE 5362
// PrepareHuman ( false , 2 , 4 ) else
5347: LD_INT 0
5349: PPUSH
5350: LD_INT 2
5352: PPUSH
5353: LD_INT 4
5355: PPUSH
5356: CALL_OW 380
5360: GO 5375
// PrepareHuman ( false , 2 , 8 ) ;
5362: LD_INT 0
5364: PPUSH
5365: LD_INT 2
5367: PPUSH
5368: LD_INT 8
5370: PPUSH
5371: CALL_OW 380
// un := CreateHuman ;
5375: LD_ADDR_VAR 0 3
5379: PUSH
5380: CALL_OW 44
5384: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5385: LD_VAR 0 3
5389: PPUSH
5390: LD_INT 4
5392: PPUSH
5393: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5397: LD_VAR 0 3
5401: PPUSH
5402: LD_VAR 0 4
5406: PPUSH
5407: CALL_OW 52
// end ;
5411: LD_VAR 0 1
5415: RET
// export function PrepareAttackLegion ; var i , un ; begin
5416: LD_INT 0
5418: PPUSH
5419: PPUSH
5420: PPUSH
// for i := 1 to 4 do
5421: LD_ADDR_VAR 0 2
5425: PUSH
5426: DOUBLE
5427: LD_INT 1
5429: DEC
5430: ST_TO_ADDR
5431: LD_INT 4
5433: PUSH
5434: FOR_TO
5435: IFFALSE 5545
// begin uc_side := 8 ;
5437: LD_ADDR_OWVAR 20
5441: PUSH
5442: LD_INT 8
5444: ST_TO_ADDR
// uc_nation := 2 ;
5445: LD_ADDR_OWVAR 21
5449: PUSH
5450: LD_INT 2
5452: ST_TO_ADDR
// hc_gallery :=  ;
5453: LD_ADDR_OWVAR 33
5457: PUSH
5458: LD_STRING 
5460: ST_TO_ADDR
// hc_name :=  ;
5461: LD_ADDR_OWVAR 26
5465: PUSH
5466: LD_STRING 
5468: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5469: LD_INT 0
5471: PPUSH
5472: LD_INT 1
5474: PUSH
5475: LD_INT 8
5477: PUSH
5478: EMPTY
5479: LIST
5480: LIST
5481: PUSH
5482: LD_INT 1
5484: PPUSH
5485: LD_INT 2
5487: PPUSH
5488: CALL_OW 12
5492: ARRAY
5493: PPUSH
5494: LD_INT 6
5496: PPUSH
5497: LD_INT 8
5499: PPUSH
5500: CALL_OW 12
5504: PPUSH
5505: CALL_OW 380
// un := CreateHuman ;
5509: LD_ADDR_VAR 0 3
5513: PUSH
5514: CALL_OW 44
5518: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5519: LD_VAR 0 3
5523: PPUSH
5524: LD_INT 19
5526: PPUSH
5527: LD_INT 0
5529: PPUSH
5530: CALL_OW 49
// ComCrawl ( un ) ;
5534: LD_VAR 0 3
5538: PPUSH
5539: CALL_OW 137
// end ;
5543: GO 5434
5545: POP
5546: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5547: LD_INT 1
5549: PPUSH
5550: LD_INT 8
5552: PPUSH
5553: LD_INT 2
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5563: LD_INT 20
5565: PPUSH
5566: LD_INT 3
5568: PPUSH
5569: CALL 14566 0 2
// end ; end_of_file
5573: LD_VAR 0 1
5577: RET
// export function Action ; var i , tmp , group ; begin
5578: LD_INT 0
5580: PPUSH
5581: PPUSH
5582: PPUSH
5583: PPUSH
// InGameOn ;
5584: CALL_OW 8
// music_nat := 1 ;
5588: LD_ADDR_OWVAR 71
5592: PUSH
5593: LD_INT 1
5595: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5596: LD_ADDR_VAR 0 4
5600: PUSH
5601: LD_INT 22
5603: PUSH
5604: LD_INT 1
5606: PUSH
5607: EMPTY
5608: LIST
5609: LIST
5610: PPUSH
5611: CALL_OW 69
5615: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
5616: LD_ADDR_VAR 0 3
5620: PUSH
5621: LD_EXP 1
5625: PPUSH
5626: CALL_OW 310
5630: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
5631: LD_VAR 0 3
5635: PPUSH
5636: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
5640: LD_VAR 0 4
5644: PPUSH
5645: LD_INT 130
5647: PPUSH
5648: LD_INT 103
5650: PPUSH
5651: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
5655: LD_VAR 0 3
5659: PPUSH
5660: LD_INT 114
5662: PPUSH
5663: LD_INT 102
5665: PPUSH
5666: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5670: LD_EXP 1
5674: PPUSH
5675: LD_STRING D1-JMM-1
5677: PPUSH
5678: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5682: LD_VAR 0 3
5686: PPUSH
5687: CALL_OW 87
// if IsOk ( Donaldson ) then
5691: LD_EXP 3
5695: PPUSH
5696: CALL_OW 302
5700: IFFALSE 5765
// begin Say ( Donaldson , D1-Don-1 ) ;
5702: LD_EXP 3
5706: PPUSH
5707: LD_STRING D1-Don-1
5709: PPUSH
5710: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5714: LD_VAR 0 3
5718: PPUSH
5719: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5723: LD_EXP 1
5727: PPUSH
5728: LD_STRING D1-JMM-2
5730: PPUSH
5731: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5735: LD_VAR 0 3
5739: PPUSH
5740: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5744: LD_EXP 3
5748: PPUSH
5749: LD_STRING D1-Don-2
5751: PPUSH
5752: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
5756: LD_VAR 0 3
5760: PPUSH
5761: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
5765: LD_VAR 0 4
5769: PPUSH
5770: LD_INT 110
5772: PPUSH
5773: LD_INT 101
5775: PPUSH
5776: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
5780: LD_INT 35
5782: PPUSH
5783: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
5787: LD_VAR 0 3
5791: PPUSH
5792: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
5796: LD_INT 1
5798: PPUSH
5799: LD_INT 102
5801: PPUSH
5802: LD_INT 94
5804: PPUSH
5805: CALL_OW 293
5809: IFFALSE 5780
// CenterOnXY ( 102 , 94 ) ;
5811: LD_INT 102
5813: PPUSH
5814: LD_INT 94
5816: PPUSH
5817: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
5821: LD_VAR 0 4
5825: PPUSH
5826: LD_INT 26
5828: PUSH
5829: LD_INT 1
5831: PUSH
5832: EMPTY
5833: LIST
5834: LIST
5835: PPUSH
5836: CALL_OW 72
5840: PPUSH
5841: LD_STRING D1-Sol1-2
5843: PPUSH
5844: LD_STRING 
5846: PPUSH
5847: CALL 12226 0 3
// Say ( JMM , D1-JMM-3 ) ;
5851: LD_EXP 1
5855: PPUSH
5856: LD_STRING D1-JMM-3
5858: PPUSH
5859: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5863: LD_STRING M1
5865: PPUSH
5866: CALL_OW 337
// for i in group do
5870: LD_ADDR_VAR 0 2
5874: PUSH
5875: LD_VAR 0 4
5879: PUSH
5880: FOR_IN
5881: IFFALSE 5900
// ComMoveXY ( i , 95 , 84 ) ;
5883: LD_VAR 0 2
5887: PPUSH
5888: LD_INT 95
5890: PPUSH
5891: LD_INT 84
5893: PPUSH
5894: CALL_OW 111
5898: GO 5880
5900: POP
5901: POP
// end ;
5902: LD_VAR 0 1
5906: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
5907: LD_INT 7
5909: PPUSH
5910: LD_INT 22
5912: PUSH
5913: LD_INT 1
5915: PUSH
5916: EMPTY
5917: LIST
5918: LIST
5919: PPUSH
5920: CALL_OW 70
5924: PUSH
5925: LD_INT 1
5927: GREATER
5928: IFFALSE 6578
5930: GO 5932
5932: DISABLE
5933: LD_INT 0
5935: PPUSH
5936: PPUSH
5937: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: LD_INT 8
5945: PPUSH
5946: LD_INT 22
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: LD_INT 25
5958: PUSH
5959: LD_INT 9
5961: PUSH
5962: EMPTY
5963: LIST
5964: LIST
5965: PUSH
5966: EMPTY
5967: LIST
5968: LIST
5969: PPUSH
5970: CALL_OW 70
5974: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
5975: LD_VAR 0 2
5979: PPUSH
5980: LD_INT 96
5982: PPUSH
5983: LD_INT 85
5985: PPUSH
5986: CALL_OW 154
// for i := 1 to 5 do
5990: LD_ADDR_VAR 0 1
5994: PUSH
5995: DOUBLE
5996: LD_INT 1
5998: DEC
5999: ST_TO_ADDR
6000: LD_INT 5
6002: PUSH
6003: FOR_TO
6004: IFFALSE 6023
// AddComTimeShift ( tmp , 96 , 85 ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_INT 96
6013: PPUSH
6014: LD_INT 85
6016: PPUSH
6017: CALL_OW 214
6021: GO 6003
6023: POP
6024: POP
// wait ( 0 0$2 ) ;
6025: LD_INT 70
6027: PPUSH
6028: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6032: LD_EXP 1
6036: PPUSH
6037: LD_STRING D1a-JMM-1
6039: PPUSH
6040: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6044: LD_EXP 3
6048: PPUSH
6049: LD_STRING D1a-Don-1
6051: PPUSH
6052: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6056: LD_ADDR_VAR 0 1
6060: PUSH
6061: LD_INT 22
6063: PUSH
6064: LD_INT 1
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: PPUSH
6071: CALL_OW 69
6075: PUSH
6076: FOR_IN
6077: IFFALSE 6096
// ComMoveXY ( i , 109 , 102 ) ;
6079: LD_VAR 0 1
6083: PPUSH
6084: LD_INT 109
6086: PPUSH
6087: LD_INT 102
6089: PPUSH
6090: CALL_OW 111
6094: GO 6076
6096: POP
6097: POP
// Say ( JMM , D1a-JMM-2 ) ;
6098: LD_EXP 1
6102: PPUSH
6103: LD_STRING D1a-JMM-2
6105: PPUSH
6106: CALL_OW 88
// wait ( 0 0$10 ) ;
6110: LD_INT 350
6112: PPUSH
6113: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6117: LD_EXP 1
6121: PPUSH
6122: CALL_OW 310
6126: PPUSH
6127: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6131: LD_EXP 3
6135: PPUSH
6136: LD_STRING D1b-Don-1
6138: PPUSH
6139: CALL_OW 88
// if IsOk ( Donaldson ) then
6143: LD_EXP 3
6147: PPUSH
6148: CALL_OW 302
6152: IFFALSE 6166
// Say ( JMM , D1b-JMM-1 ) ;
6154: LD_EXP 1
6158: PPUSH
6159: LD_STRING D1b-JMM-1
6161: PPUSH
6162: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6166: LD_INT 22
6168: PUSH
6169: LD_INT 1
6171: PUSH
6172: EMPTY
6173: LIST
6174: LIST
6175: PUSH
6176: LD_INT 26
6178: PUSH
6179: LD_INT 1
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PUSH
6186: LD_INT 2
6188: PUSH
6189: LD_INT 25
6191: PUSH
6192: LD_INT 1
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 25
6201: PUSH
6202: LD_INT 2
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 3
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 25
6221: PUSH
6222: LD_INT 4
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: LD_INT 25
6231: PUSH
6232: LD_INT 5
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PUSH
6239: LD_INT 25
6241: PUSH
6242: LD_INT 8
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: PUSH
6249: EMPTY
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: PPUSH
6263: CALL_OW 69
6267: PPUSH
6268: LD_STRING D1b-Sol1-1
6270: PPUSH
6271: LD_STRING 
6273: PPUSH
6274: CALL 12226 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6278: LD_EXP 3
6282: PPUSH
6283: LD_STRING D1b-Don-2
6285: PPUSH
6286: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6290: LD_EXP 1
6294: PPUSH
6295: LD_STRING D1b-JMM-2
6297: PPUSH
6298: CALL_OW 88
// dec := ShowQuery1 ;
6302: LD_ADDR_VAR 0 3
6306: PUSH
6307: CALL 12689 0 0
6311: ST_TO_ADDR
// if dec = 1 then
6312: LD_VAR 0 3
6316: PUSH
6317: LD_INT 1
6319: EQUAL
6320: IFFALSE 6426
// begin Say ( JMM , D2-JMM-1 ) ;
6322: LD_EXP 1
6326: PPUSH
6327: LD_STRING D2-JMM-1
6329: PPUSH
6330: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6334: LD_EXP 15
6338: PPUSH
6339: LD_STRING D2-Pow-1
6341: PPUSH
6342: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6346: LD_EXP 1
6350: PPUSH
6351: LD_STRING D2a-JMM-1
6353: PPUSH
6354: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6358: LD_EXP 15
6362: PPUSH
6363: LD_STRING D2a-Pow-1
6365: PPUSH
6366: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6370: LD_EXP 1
6374: PPUSH
6375: LD_STRING D2a-JMM-2
6377: PPUSH
6378: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6382: LD_EXP 15
6386: PPUSH
6387: LD_STRING D2a-Pow-2
6389: PPUSH
6390: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6394: LD_EXP 1
6398: PPUSH
6399: LD_STRING D2a-JMM-3
6401: PPUSH
6402: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6406: LD_EXP 15
6410: PPUSH
6411: LD_STRING D2a-Pow-3
6413: PPUSH
6414: CALL_OW 94
// secondPass := 2 ;
6418: LD_ADDR_EXP 20
6422: PUSH
6423: LD_INT 2
6425: ST_TO_ADDR
// end ; if dec = 2 then
6426: LD_VAR 0 3
6430: PUSH
6431: LD_INT 2
6433: EQUAL
6434: IFFALSE 6528
// begin Say ( JMM , D2-JMM-1 ) ;
6436: LD_EXP 1
6440: PPUSH
6441: LD_STRING D2-JMM-1
6443: PPUSH
6444: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6448: LD_EXP 15
6452: PPUSH
6453: LD_STRING D2-Pow-1
6455: PPUSH
6456: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6460: LD_EXP 1
6464: PPUSH
6465: LD_STRING D2b-JMM-1
6467: PPUSH
6468: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6472: LD_EXP 15
6476: PPUSH
6477: LD_STRING D2b-Pow-1
6479: PPUSH
6480: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6484: LD_EXP 1
6488: PPUSH
6489: LD_STRING D2c-JMM-1
6491: PPUSH
6492: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6496: LD_EXP 15
6500: PPUSH
6501: LD_STRING D2c-Pow-1
6503: PPUSH
6504: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6508: LD_EXP 1
6512: PPUSH
6513: LD_STRING D2c-JMM-2
6515: PPUSH
6516: CALL_OW 88
// secondPass := 2 ;
6520: LD_ADDR_EXP 20
6524: PUSH
6525: LD_INT 2
6527: ST_TO_ADDR
// end ; if dec = 3 then
6528: LD_VAR 0 3
6532: PUSH
6533: LD_INT 3
6535: EQUAL
6536: IFFALSE 6546
// secondPass := 1 ;
6538: LD_ADDR_EXP 20
6542: PUSH
6543: LD_INT 1
6545: ST_TO_ADDR
// InGameOff ;
6546: CALL_OW 9
// ruAI := 1 ;
6550: LD_ADDR_EXP 34
6554: PUSH
6555: LD_INT 1
6557: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6558: LD_INT 1
6560: PPUSH
6561: LD_INT 3
6563: PPUSH
6564: LD_INT 2
6566: PPUSH
6567: LD_INT 1
6569: PPUSH
6570: CALL_OW 80
// SaveForQuickRestart ;
6574: CALL_OW 22
// end ;
6578: PPOPN 3
6580: END
// every 1 1$0 trigger secondPass = 2 do
6581: LD_EXP 20
6585: PUSH
6586: LD_INT 2
6588: EQUAL
6589: IFFALSE 6809
6591: GO 6593
6593: DISABLE
// begin PowellSupport1 ;
6594: CALL 1985 0 0
// DialogueOn ;
6598: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6602: LD_EXP 1
6606: PPUSH
6607: LD_STRING DC1-JMM-1
6609: PPUSH
6610: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6614: LD_EXP 15
6618: PPUSH
6619: LD_STRING DC1-Pow-1
6621: PPUSH
6622: CALL_OW 94
// DialogueOff ;
6626: CALL_OW 7
// wait ( 3 3$0 ) ;
6630: LD_INT 6300
6632: PPUSH
6633: CALL_OW 67
// PowellSupport2 ;
6637: CALL 2466 0 0
// DialogueOn ;
6641: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6645: LD_EXP 1
6649: PPUSH
6650: LD_STRING DC2-JMM-1
6652: PPUSH
6653: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6657: LD_EXP 15
6661: PPUSH
6662: LD_STRING DC2-Pow-1
6664: PPUSH
6665: CALL_OW 94
// DialogueOff ;
6669: CALL_OW 7
// wait ( 3 3$00 ) ;
6673: LD_INT 6300
6675: PPUSH
6676: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6680: LD_INT 35
6682: PPUSH
6683: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6687: LD_INT 22
6689: PUSH
6690: LD_INT 1
6692: PUSH
6693: EMPTY
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 2
6699: PUSH
6700: LD_INT 30
6702: PUSH
6703: LD_INT 0
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 30
6712: PUSH
6713: LD_INT 1
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: LIST
6724: PUSH
6725: EMPTY
6726: LIST
6727: LIST
6728: PPUSH
6729: CALL_OW 69
6733: PUSH
6734: LD_INT 11
6736: PPUSH
6737: LD_INT 22
6739: PUSH
6740: LD_INT 3
6742: PUSH
6743: EMPTY
6744: LIST
6745: LIST
6746: PPUSH
6747: CALL_OW 70
6751: NOT
6752: AND
6753: IFFALSE 6680
// wait ( 0 0$10 ) ;
6755: LD_INT 350
6757: PPUSH
6758: CALL_OW 67
// Legion ;
6762: CALL 6810 0 0
// wait ( 5 5$0 ) ;
6766: LD_INT 10500
6768: PPUSH
6769: CALL_OW 67
// PowellSupport3 ;
6773: CALL 3079 0 0
// DialogueOn ;
6777: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6781: LD_EXP 15
6785: PPUSH
6786: LD_STRING DC3-Pow-1
6788: PPUSH
6789: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6793: LD_EXP 1
6797: PPUSH
6798: LD_STRING DC3-JMM-1
6800: PPUSH
6801: CALL_OW 88
// DialogueOff ;
6805: CALL_OW 7
// end ;
6809: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6810: LD_INT 0
6812: PPUSH
6813: PPUSH
6814: PPUSH
6815: PPUSH
6816: PPUSH
6817: PPUSH
6818: PPUSH
6819: PPUSH
6820: PPUSH
6821: PPUSH
6822: PPUSH
6823: PPUSH
6824: PPUSH
6825: PPUSH
6826: PPUSH
6827: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6828: LD_ADDR_VAR 0 5
6832: PUSH
6833: LD_INT 22
6835: PUSH
6836: LD_INT 1
6838: PUSH
6839: EMPTY
6840: LIST
6841: LIST
6842: PUSH
6843: LD_INT 21
6845: PUSH
6846: LD_INT 3
6848: PUSH
6849: EMPTY
6850: LIST
6851: LIST
6852: PUSH
6853: LD_INT 2
6855: PUSH
6856: LD_INT 30
6858: PUSH
6859: LD_INT 0
6861: PUSH
6862: EMPTY
6863: LIST
6864: LIST
6865: PUSH
6866: LD_INT 30
6868: PUSH
6869: LD_INT 1
6871: PUSH
6872: EMPTY
6873: LIST
6874: LIST
6875: PUSH
6876: EMPTY
6877: LIST
6878: LIST
6879: LIST
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: LIST
6885: PPUSH
6886: CALL_OW 69
6890: ST_TO_ADDR
// crates := 0 ;
6891: LD_ADDR_VAR 0 8
6895: PUSH
6896: LD_INT 0
6898: ST_TO_ADDR
// oil := 0 ;
6899: LD_ADDR_VAR 0 9
6903: PUSH
6904: LD_INT 0
6906: ST_TO_ADDR
// siberite := 0 ;
6907: LD_ADDR_VAR 0 10
6911: PUSH
6912: LD_INT 0
6914: ST_TO_ADDR
// payForNeutral := false ;
6915: LD_ADDR_VAR 0 13
6919: PUSH
6920: LD_INT 0
6922: ST_TO_ADDR
// payForHelp := false ;
6923: LD_ADDR_VAR 0 14
6927: PUSH
6928: LD_INT 0
6930: ST_TO_ADDR
// for i in tmp do
6931: LD_ADDR_VAR 0 2
6935: PUSH
6936: LD_VAR 0 5
6940: PUSH
6941: FOR_IN
6942: IFFALSE 7033
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6944: LD_ADDR_VAR 0 8
6948: PUSH
6949: LD_VAR 0 8
6953: PUSH
6954: LD_VAR 0 2
6958: PPUSH
6959: CALL_OW 274
6963: PPUSH
6964: LD_INT 1
6966: PPUSH
6967: CALL_OW 275
6971: PLUS
6972: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6973: LD_ADDR_VAR 0 9
6977: PUSH
6978: LD_VAR 0 9
6982: PUSH
6983: LD_VAR 0 2
6987: PPUSH
6988: CALL_OW 274
6992: PPUSH
6993: LD_INT 2
6995: PPUSH
6996: CALL_OW 275
7000: PLUS
7001: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7002: LD_ADDR_VAR 0 10
7006: PUSH
7007: LD_VAR 0 10
7011: PUSH
7012: LD_VAR 0 2
7016: PPUSH
7017: CALL_OW 274
7021: PPUSH
7022: LD_INT 3
7024: PPUSH
7025: CALL_OW 275
7029: PLUS
7030: ST_TO_ADDR
// end ;
7031: GO 6941
7033: POP
7034: POP
// PrepareKurt ;
7035: CALL 4572 0 0
// if not Kurt then
7039: LD_EXP 17
7043: NOT
7044: IFFALSE 7048
// exit ;
7046: GO 9167
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7048: LD_EXP 18
7052: PPUSH
7053: LD_INT 144
7055: PPUSH
7056: LD_INT 111
7058: PPUSH
7059: CALL_OW 111
// wait ( 0 0$2 ) ;
7063: LD_INT 70
7065: PPUSH
7066: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7070: LD_INT 167
7072: PPUSH
7073: LD_INT 121
7075: PPUSH
7076: LD_INT 1
7078: PPUSH
7079: LD_INT 10
7081: NEG
7082: PPUSH
7083: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7087: LD_EXP 17
7091: PPUSH
7092: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7096: LD_EXP 17
7100: PPUSH
7101: CALL_OW 87
// wait ( 0 0$1 ) ;
7105: LD_INT 35
7107: PPUSH
7108: CALL_OW 67
// DialogueOn ;
7112: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7116: LD_INT 22
7118: PUSH
7119: LD_INT 1
7121: PUSH
7122: EMPTY
7123: LIST
7124: LIST
7125: PUSH
7126: LD_INT 26
7128: PUSH
7129: LD_INT 1
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 2
7138: PUSH
7139: LD_INT 25
7141: PUSH
7142: LD_INT 1
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 2
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 25
7161: PUSH
7162: LD_INT 3
7164: PUSH
7165: EMPTY
7166: LIST
7167: LIST
7168: PUSH
7169: LD_INT 25
7171: PUSH
7172: LD_INT 4
7174: PUSH
7175: EMPTY
7176: LIST
7177: LIST
7178: PUSH
7179: LD_INT 25
7181: PUSH
7182: LD_INT 5
7184: PUSH
7185: EMPTY
7186: LIST
7187: LIST
7188: PUSH
7189: LD_INT 25
7191: PUSH
7192: LD_INT 8
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: PUSH
7199: EMPTY
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: LIST
7207: PUSH
7208: EMPTY
7209: LIST
7210: LIST
7211: LIST
7212: PPUSH
7213: CALL_OW 69
7217: PPUSH
7218: LD_STRING D3-Sol1-1
7220: PPUSH
7221: LD_STRING 
7223: PPUSH
7224: CALL 12226 0 3
// if KurtStatus then
7228: LD_EXP 19
7232: IFFALSE 7332
// begin Say ( Kurt , D3-Kurt-1 ) ;
7234: LD_EXP 17
7238: PPUSH
7239: LD_STRING D3-Kurt-1
7241: PPUSH
7242: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7246: LD_EXP 1
7250: PPUSH
7251: LD_STRING D3-JMM-1
7253: PPUSH
7254: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7258: LD_EXP 17
7262: PPUSH
7263: LD_STRING D3-Kurt-2
7265: PPUSH
7266: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7270: LD_EXP 1
7274: PPUSH
7275: LD_STRING D3-JMM-2
7277: PPUSH
7278: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7282: LD_EXP 17
7286: PPUSH
7287: LD_STRING D3-Kurt-4
7289: PPUSH
7290: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7294: LD_EXP 1
7298: PPUSH
7299: LD_STRING D3-JMM-4
7301: PPUSH
7302: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7306: LD_EXP 17
7310: PPUSH
7311: LD_STRING D3-Kurt-5
7313: PPUSH
7314: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7318: LD_EXP 17
7322: PPUSH
7323: LD_STRING D3-Kurt-5a
7325: PPUSH
7326: CALL_OW 88
// end else
7330: GO 7428
// begin Say ( Kurt , D3-Kurt-1 ) ;
7332: LD_EXP 17
7336: PPUSH
7337: LD_STRING D3-Kurt-1
7339: PPUSH
7340: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7344: LD_EXP 1
7348: PPUSH
7349: LD_STRING D3-JMM-1
7351: PPUSH
7352: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7356: LD_EXP 17
7360: PPUSH
7361: LD_STRING D3-Kurt-3
7363: PPUSH
7364: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7368: LD_EXP 1
7372: PPUSH
7373: LD_STRING D3-JMM-3
7375: PPUSH
7376: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7380: LD_EXP 17
7384: PPUSH
7385: LD_STRING D3-Kurt-4
7387: PPUSH
7388: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7392: LD_EXP 1
7396: PPUSH
7397: LD_STRING D3-JMM-4
7399: PPUSH
7400: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7404: LD_EXP 17
7408: PPUSH
7409: LD_STRING D3-Kurt-5
7411: PPUSH
7412: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7416: LD_EXP 17
7420: PPUSH
7421: LD_STRING D3-Kurt-5b
7423: PPUSH
7424: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7428: LD_VAR 0 8
7432: PUSH
7433: LD_INT 120
7435: PUSH
7436: LD_INT 60
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: LD_EXP 19
7447: PUSH
7448: LD_INT 1
7450: PLUS
7451: ARRAY
7452: GREATEREQUAL
7453: PUSH
7454: LD_VAR 0 10
7458: PUSH
7459: LD_INT 120
7461: PUSH
7462: LD_INT 60
7464: PUSH
7465: EMPTY
7466: LIST
7467: LIST
7468: PUSH
7469: LD_EXP 19
7473: PUSH
7474: LD_INT 1
7476: PLUS
7477: ARRAY
7478: GREATEREQUAL
7479: AND
7480: IFFALSE 7532
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7482: LD_ADDR_VAR 0 3
7486: PUSH
7487: LD_STRING Q2
7489: PUSH
7490: LD_STRING Q2K
7492: PUSH
7493: EMPTY
7494: LIST
7495: LIST
7496: PUSH
7497: LD_EXP 19
7501: PUSH
7502: LD_INT 1
7504: PLUS
7505: ARRAY
7506: PPUSH
7507: LD_INT 1
7509: PUSH
7510: LD_INT 2
7512: PUSH
7513: LD_INT 3
7515: PUSH
7516: LD_INT 4
7518: PUSH
7519: EMPTY
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: PPUSH
7525: CALL_OW 98
7529: ST_TO_ADDR
7530: GO 7576
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7532: LD_ADDR_VAR 0 3
7536: PUSH
7537: LD_STRING Q2
7539: PUSH
7540: LD_STRING Q2K
7542: PUSH
7543: EMPTY
7544: LIST
7545: LIST
7546: PUSH
7547: LD_EXP 19
7551: PUSH
7552: LD_INT 1
7554: PLUS
7555: ARRAY
7556: PPUSH
7557: LD_INT 1
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: LD_INT 4
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: LIST
7570: PPUSH
7571: CALL_OW 98
7575: ST_TO_ADDR
// if dec1 = 1 then
7576: LD_VAR 0 3
7580: PUSH
7581: LD_INT 1
7583: EQUAL
7584: IFFALSE 7618
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7586: LD_EXP 1
7590: PPUSH
7591: LD_STRING D3Ka-JMM-1
7593: PPUSH
7594: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7598: LD_EXP 17
7602: PPUSH
7603: LD_STRING D3Ka-Kurt-1
7605: PPUSH
7606: CALL_OW 88
// warWithLegion = 1 ;
7610: LD_ADDR_EXP 23
7614: PUSH
7615: LD_INT 1
7617: ST_TO_ADDR
// end ; if dec1 = 2 then
7618: LD_VAR 0 3
7622: PUSH
7623: LD_INT 2
7625: EQUAL
7626: IFFALSE 7710
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7628: LD_EXP 1
7632: PPUSH
7633: LD_STRING D3Kb-JMM-1
7635: PPUSH
7636: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7640: LD_EXP 17
7644: PPUSH
7645: LD_STRING D3Kb-Kurt-1
7647: PPUSH
7648: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7652: LD_ADDR_VAR 0 11
7656: PUSH
7657: LD_INT 120
7659: PUSH
7660: LD_INT 60
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: PUSH
7667: LD_EXP 19
7671: PUSH
7672: LD_INT 1
7674: PLUS
7675: ARRAY
7676: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7677: LD_ADDR_VAR 0 12
7681: PUSH
7682: LD_INT 120
7684: PUSH
7685: LD_INT 60
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: PUSH
7692: LD_EXP 19
7696: PUSH
7697: LD_INT 1
7699: PLUS
7700: ARRAY
7701: ST_TO_ADDR
// payForNeutral := true ;
7702: LD_ADDR_VAR 0 13
7706: PUSH
7707: LD_INT 1
7709: ST_TO_ADDR
// end ; if dec1 = 3 then
7710: LD_VAR 0 3
7714: PUSH
7715: LD_INT 3
7717: EQUAL
7718: IFFALSE 7953
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7720: LD_EXP 1
7724: PPUSH
7725: LD_STRING D3Kc1-JMM-1
7727: PPUSH
7728: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7732: LD_EXP 17
7736: PPUSH
7737: LD_STRING D3Kc1-Kurt-1
7739: PPUSH
7740: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7744: LD_EXP 1
7748: PPUSH
7749: LD_STRING D3Kc1-JMM-2
7751: PPUSH
7752: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7756: LD_EXP 17
7760: PPUSH
7761: LD_STRING D3Kc1-Kurt-2
7763: PPUSH
7764: CALL_OW 88
// askSiberite = 1 ;
7768: LD_ADDR_EXP 25
7772: PUSH
7773: LD_INT 1
7775: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7776: LD_ADDR_VAR 0 4
7780: PUSH
7781: LD_STRING Q2b
7783: PPUSH
7784: LD_INT 1
7786: PUSH
7787: LD_INT 2
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: LIST
7797: PPUSH
7798: CALL_OW 98
7802: ST_TO_ADDR
// if dec2 = 1 then
7803: LD_VAR 0 4
7807: PUSH
7808: LD_INT 1
7810: EQUAL
7811: IFFALSE 7845
// begin Say ( JMM , D4a-JMM-1 ) ;
7813: LD_EXP 1
7817: PPUSH
7818: LD_STRING D4a-JMM-1
7820: PPUSH
7821: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7825: LD_EXP 17
7829: PPUSH
7830: LD_STRING D4b-Kurt-1
7832: PPUSH
7833: CALL_OW 88
// warWithLegion = 1 ;
7837: LD_ADDR_EXP 23
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// end ; if dec2 = 2 then
7845: LD_VAR 0 4
7849: PUSH
7850: LD_INT 2
7852: EQUAL
7853: IFFALSE 7887
// begin Say ( JMM , D4b-JMM-1 ) ;
7855: LD_EXP 1
7859: PPUSH
7860: LD_STRING D4b-JMM-1
7862: PPUSH
7863: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7867: LD_EXP 17
7871: PPUSH
7872: LD_STRING D4b-Kurt-1
7874: PPUSH
7875: CALL_OW 88
// warWithLegion = 1 ;
7879: LD_ADDR_EXP 23
7883: PUSH
7884: LD_INT 1
7886: ST_TO_ADDR
// end ; if dec2 = 3 then
7887: LD_VAR 0 4
7891: PUSH
7892: LD_INT 3
7894: EQUAL
7895: IFFALSE 7953
// begin Say ( JMM , D4c-JMM-1 ) ;
7897: LD_EXP 1
7901: PPUSH
7902: LD_STRING D4c-JMM-1
7904: PPUSH
7905: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7909: LD_EXP 17
7913: PPUSH
7914: LD_STRING D4c-Kurt-1
7916: PPUSH
7917: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7921: LD_EXP 1
7925: PPUSH
7926: LD_STRING D4c-JMM-2
7928: PPUSH
7929: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7933: LD_EXP 17
7937: PPUSH
7938: LD_STRING D4c-Kurt-2
7940: PPUSH
7941: CALL_OW 88
// fakeInfo = 1 ;
7945: LD_ADDR_EXP 24
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 4
7960: EQUAL
7961: IFFALSE 9023
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7963: LD_EXP 1
7967: PPUSH
7968: LD_STRING D3Kd-JMM-1
7970: PPUSH
7971: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
7975: LD_VAR 0 8
7979: PUSH
7980: LD_INT 200
7982: PUSH
7983: LD_INT 120
7985: PUSH
7986: EMPTY
7987: LIST
7988: LIST
7989: PUSH
7990: LD_EXP 19
7994: PUSH
7995: LD_INT 1
7997: PLUS
7998: ARRAY
7999: GREATEREQUAL
8000: PUSH
8001: LD_VAR 0 10
8005: PUSH
8006: LD_INT 200
8008: PUSH
8009: LD_INT 120
8011: PUSH
8012: EMPTY
8013: LIST
8014: LIST
8015: PUSH
8016: LD_EXP 19
8020: PUSH
8021: LD_INT 1
8023: PLUS
8024: ARRAY
8025: GREATEREQUAL
8026: AND
8027: IFFALSE 8079
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8029: LD_ADDR_VAR 0 4
8033: PUSH
8034: LD_STRING Q2a
8036: PUSH
8037: LD_STRING Q2aK
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: LD_EXP 19
8048: PUSH
8049: LD_INT 1
8051: PLUS
8052: ARRAY
8053: PPUSH
8054: LD_INT 1
8056: PUSH
8057: LD_INT 2
8059: PUSH
8060: LD_INT 3
8062: PUSH
8063: LD_INT 4
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PPUSH
8072: CALL_OW 98
8076: ST_TO_ADDR
8077: GO 8243
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8079: LD_VAR 0 8
8083: PUSH
8084: LD_INT 120
8086: PUSH
8087: LD_INT 60
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_EXP 19
8098: PUSH
8099: LD_INT 1
8101: PLUS
8102: ARRAY
8103: GREATEREQUAL
8104: PUSH
8105: LD_VAR 0 10
8109: PUSH
8110: LD_INT 120
8112: PUSH
8113: LD_INT 60
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: PUSH
8120: LD_EXP 19
8124: PUSH
8125: LD_INT 1
8127: PLUS
8128: ARRAY
8129: GREATEREQUAL
8130: AND
8131: IFFALSE 8179
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8133: LD_ADDR_VAR 0 4
8137: PUSH
8138: LD_STRING Q2a
8140: PUSH
8141: LD_STRING Q2aK
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_EXP 19
8152: PUSH
8153: LD_INT 1
8155: PLUS
8156: ARRAY
8157: PPUSH
8158: LD_INT 1
8160: PUSH
8161: LD_INT 2
8163: PUSH
8164: LD_INT 4
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: LIST
8171: PPUSH
8172: CALL_OW 98
8176: ST_TO_ADDR
8177: GO 8243
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8179: LD_STRING Q2d
8181: PUSH
8182: LD_STRING Q2dK
8184: PUSH
8185: EMPTY
8186: LIST
8187: LIST
8188: PUSH
8189: LD_EXP 19
8193: PUSH
8194: LD_INT 1
8196: PLUS
8197: ARRAY
8198: PPUSH
8199: CALL_OW 97
// dec2 := 0 ;
8203: LD_ADDR_VAR 0 4
8207: PUSH
8208: LD_INT 0
8210: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8211: LD_EXP 1
8215: PPUSH
8216: LD_STRING D3Kc1-JMM-1
8218: PPUSH
8219: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8223: LD_EXP 17
8227: PPUSH
8228: LD_STRING D3Kc2-Kurt-1
8230: PPUSH
8231: CALL_OW 88
// warWithLegion := 1 ;
8235: LD_ADDR_EXP 23
8239: PUSH
8240: LD_INT 1
8242: ST_TO_ADDR
// end ; if dec2 = 1 then
8243: LD_VAR 0 4
8247: PUSH
8248: LD_INT 1
8250: EQUAL
8251: IFFALSE 8285
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8253: LD_EXP 1
8257: PPUSH
8258: LD_STRING D5Ka-JMM-1
8260: PPUSH
8261: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8265: LD_EXP 17
8269: PPUSH
8270: LD_STRING D5Ka-Kurt-1
8272: PPUSH
8273: CALL_OW 88
// warWithLegion = 1 ;
8277: LD_ADDR_EXP 23
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// end ; if dec2 = 2 then
8285: LD_VAR 0 4
8289: PUSH
8290: LD_INT 2
8292: EQUAL
8293: IFFALSE 8377
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8295: LD_EXP 1
8299: PPUSH
8300: LD_STRING D3Kb-JMM-1
8302: PPUSH
8303: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8307: LD_EXP 17
8311: PPUSH
8312: LD_STRING D3Kb-Kurt-1
8314: PPUSH
8315: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8319: LD_ADDR_VAR 0 11
8323: PUSH
8324: LD_INT 120
8326: PUSH
8327: LD_INT 60
8329: PUSH
8330: EMPTY
8331: LIST
8332: LIST
8333: PUSH
8334: LD_EXP 19
8338: PUSH
8339: LD_INT 1
8341: PLUS
8342: ARRAY
8343: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8344: LD_ADDR_VAR 0 12
8348: PUSH
8349: LD_INT 120
8351: PUSH
8352: LD_INT 60
8354: PUSH
8355: EMPTY
8356: LIST
8357: LIST
8358: PUSH
8359: LD_EXP 19
8363: PUSH
8364: LD_INT 1
8366: PLUS
8367: ARRAY
8368: ST_TO_ADDR
// payForNeutral := true ;
8369: LD_ADDR_VAR 0 13
8373: PUSH
8374: LD_INT 1
8376: ST_TO_ADDR
// end ; if dec2 = 3 then
8377: LD_VAR 0 4
8381: PUSH
8382: LD_INT 3
8384: EQUAL
8385: IFFALSE 8469
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8387: LD_EXP 1
8391: PPUSH
8392: LD_STRING D3Ke-JMM-1
8394: PPUSH
8395: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8399: LD_EXP 17
8403: PPUSH
8404: LD_STRING D3Ke-Kurt-1
8406: PPUSH
8407: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8411: LD_ADDR_VAR 0 11
8415: PUSH
8416: LD_INT 200
8418: PUSH
8419: LD_INT 120
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_EXP 19
8430: PUSH
8431: LD_INT 1
8433: PLUS
8434: ARRAY
8435: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8436: LD_ADDR_VAR 0 12
8440: PUSH
8441: LD_INT 200
8443: PUSH
8444: LD_INT 120
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_EXP 19
8455: PUSH
8456: LD_INT 1
8458: PLUS
8459: ARRAY
8460: ST_TO_ADDR
// payForHelp := true ;
8461: LD_ADDR_VAR 0 14
8465: PUSH
8466: LD_INT 1
8468: ST_TO_ADDR
// end ; if dec2 = 4 then
8469: LD_VAR 0 4
8473: PUSH
8474: LD_INT 4
8476: EQUAL
8477: IFFALSE 8712
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8479: LD_EXP 1
8483: PPUSH
8484: LD_STRING D3Kc1-JMM-1
8486: PPUSH
8487: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8491: LD_EXP 17
8495: PPUSH
8496: LD_STRING D3Kc1-Kurt-1
8498: PPUSH
8499: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8503: LD_EXP 1
8507: PPUSH
8508: LD_STRING D3Kc1-JMM-2
8510: PPUSH
8511: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8515: LD_EXP 17
8519: PPUSH
8520: LD_STRING D3Kc1-Kurt-2
8522: PPUSH
8523: CALL_OW 88
// askSiberite = 1 ;
8527: LD_ADDR_EXP 25
8531: PUSH
8532: LD_INT 1
8534: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8535: LD_ADDR_VAR 0 4
8539: PUSH
8540: LD_STRING Q2b
8542: PPUSH
8543: LD_INT 1
8545: PUSH
8546: LD_INT 2
8548: PUSH
8549: LD_INT 3
8551: PUSH
8552: EMPTY
8553: LIST
8554: LIST
8555: LIST
8556: PPUSH
8557: CALL_OW 98
8561: ST_TO_ADDR
// if dec2 = 1 then
8562: LD_VAR 0 4
8566: PUSH
8567: LD_INT 1
8569: EQUAL
8570: IFFALSE 8604
// begin Say ( JMM , D4a-JMM-1 ) ;
8572: LD_EXP 1
8576: PPUSH
8577: LD_STRING D4a-JMM-1
8579: PPUSH
8580: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8584: LD_EXP 17
8588: PPUSH
8589: LD_STRING D4b-Kurt-1
8591: PPUSH
8592: CALL_OW 88
// warWithLegion = 1 ;
8596: LD_ADDR_EXP 23
8600: PUSH
8601: LD_INT 1
8603: ST_TO_ADDR
// end ; if dec2 = 2 then
8604: LD_VAR 0 4
8608: PUSH
8609: LD_INT 2
8611: EQUAL
8612: IFFALSE 8646
// begin Say ( JMM , D4b-JMM-1 ) ;
8614: LD_EXP 1
8618: PPUSH
8619: LD_STRING D4b-JMM-1
8621: PPUSH
8622: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_STRING D4b-Kurt-1
8633: PPUSH
8634: CALL_OW 88
// warWithLegion = 1 ;
8638: LD_ADDR_EXP 23
8642: PUSH
8643: LD_INT 1
8645: ST_TO_ADDR
// end ; if dec2 = 3 then
8646: LD_VAR 0 4
8650: PUSH
8651: LD_INT 3
8653: EQUAL
8654: IFFALSE 8712
// begin Say ( JMM , D4c-JMM-1 ) ;
8656: LD_EXP 1
8660: PPUSH
8661: LD_STRING D4c-JMM-1
8663: PPUSH
8664: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8668: LD_EXP 17
8672: PPUSH
8673: LD_STRING D4c-Kurt-1
8675: PPUSH
8676: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8680: LD_EXP 1
8684: PPUSH
8685: LD_STRING D4c-JMM-2
8687: PPUSH
8688: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8692: LD_EXP 17
8696: PPUSH
8697: LD_STRING D4c-Kurt-2
8699: PPUSH
8700: CALL_OW 88
// fakeInfo = 1 ;
8704: LD_ADDR_EXP 24
8708: PUSH
8709: LD_INT 1
8711: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8712: LD_VAR 0 13
8716: PUSH
8717: LD_VAR 0 14
8721: OR
8722: IFFALSE 9023
// begin for i in tmp do
8724: LD_ADDR_VAR 0 2
8728: PUSH
8729: LD_VAR 0 5
8733: PUSH
8734: FOR_IN
8735: IFFALSE 9021
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8737: LD_ADDR_VAR 0 6
8741: PUSH
8742: LD_VAR 0 2
8746: PPUSH
8747: CALL_OW 274
8751: PPUSH
8752: LD_INT 1
8754: PPUSH
8755: CALL_OW 275
8759: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8760: LD_ADDR_VAR 0 7
8764: PUSH
8765: LD_VAR 0 2
8769: PPUSH
8770: CALL_OW 274
8774: PPUSH
8775: LD_INT 3
8777: PPUSH
8778: CALL_OW 275
8782: ST_TO_ADDR
// if cr then
8783: LD_VAR 0 11
8787: IFFALSE 8901
// begin if tmp2 and tmp2 < cr then
8789: LD_VAR 0 6
8793: PUSH
8794: LD_VAR 0 6
8798: PUSH
8799: LD_VAR 0 11
8803: LESS
8804: AND
8805: IFFALSE 8853
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8807: LD_VAR 0 2
8811: PPUSH
8812: CALL_OW 274
8816: PPUSH
8817: LD_INT 1
8819: PPUSH
8820: LD_VAR 0 11
8824: PUSH
8825: LD_VAR 0 6
8829: MINUS
8830: PPUSH
8831: CALL_OW 277
// cr := cr - tmp2 ;
8835: LD_ADDR_VAR 0 11
8839: PUSH
8840: LD_VAR 0 11
8844: PUSH
8845: LD_VAR 0 6
8849: MINUS
8850: ST_TO_ADDR
// end else
8851: GO 8901
// if tmp2 > cr then
8853: LD_VAR 0 6
8857: PUSH
8858: LD_VAR 0 11
8862: GREATER
8863: IFFALSE 8901
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8865: LD_VAR 0 2
8869: PPUSH
8870: CALL_OW 274
8874: PPUSH
8875: LD_INT 1
8877: PPUSH
8878: LD_VAR 0 6
8882: PUSH
8883: LD_VAR 0 11
8887: MINUS
8888: PPUSH
8889: CALL_OW 277
// cr := 0 ;
8893: LD_ADDR_VAR 0 11
8897: PUSH
8898: LD_INT 0
8900: ST_TO_ADDR
// end ; end ; if sb then
8901: LD_VAR 0 12
8905: IFFALSE 9019
// begin if tmp3 and tmp3 < sb then
8907: LD_VAR 0 7
8911: PUSH
8912: LD_VAR 0 7
8916: PUSH
8917: LD_VAR 0 12
8921: LESS
8922: AND
8923: IFFALSE 8971
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8925: LD_VAR 0 2
8929: PPUSH
8930: CALL_OW 274
8934: PPUSH
8935: LD_INT 3
8937: PPUSH
8938: LD_VAR 0 12
8942: PUSH
8943: LD_VAR 0 7
8947: MINUS
8948: PPUSH
8949: CALL_OW 277
// sb := sb - tmp3 ;
8953: LD_ADDR_VAR 0 12
8957: PUSH
8958: LD_VAR 0 12
8962: PUSH
8963: LD_VAR 0 7
8967: MINUS
8968: ST_TO_ADDR
// end else
8969: GO 9019
// if tmp3 > sb then
8971: LD_VAR 0 7
8975: PUSH
8976: LD_VAR 0 12
8980: GREATER
8981: IFFALSE 9019
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
8983: LD_VAR 0 2
8987: PPUSH
8988: CALL_OW 274
8992: PPUSH
8993: LD_INT 3
8995: PPUSH
8996: LD_VAR 0 7
9000: PUSH
9001: LD_VAR 0 12
9005: MINUS
9006: PPUSH
9007: CALL_OW 277
// sb := 0 ;
9011: LD_ADDR_VAR 0 12
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// end ; end ; end ;
9019: GO 8734
9021: POP
9022: POP
// end ; end ; DialogueOff ;
9023: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9027: LD_INT 167
9029: PPUSH
9030: LD_INT 121
9032: PPUSH
9033: LD_INT 1
9035: PPUSH
9036: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9040: LD_EXP 17
9044: PPUSH
9045: LD_EXP 18
9049: PPUSH
9050: CALL_OW 120
// wait ( 0 0$1 ) ;
9054: LD_INT 35
9056: PPUSH
9057: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9061: LD_EXP 18
9065: PPUSH
9066: LD_INT 4
9068: PPUSH
9069: CALL_OW 113
// wait ( 0 0$3 ) ;
9073: LD_INT 105
9075: PPUSH
9076: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9080: LD_EXP 17
9084: PPUSH
9085: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9089: LD_EXP 18
9093: PPUSH
9094: CALL_OW 64
// wait ( 0 0$3 ) ;
9098: LD_INT 105
9100: PPUSH
9101: CALL_OW 67
// if payForHelp then
9105: LD_VAR 0 14
9109: IFFALSE 9167
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9111: LD_INT 36
9113: PPUSH
9114: LD_INT 57
9116: PPUSH
9117: LD_INT 1
9119: PPUSH
9120: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9124: LD_INT 51
9126: PPUSH
9127: LD_INT 63
9129: PPUSH
9130: LD_INT 1
9132: PPUSH
9133: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9137: LD_INT 93
9139: PPUSH
9140: LD_INT 65
9142: PPUSH
9143: LD_INT 1
9145: PPUSH
9146: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9150: LD_INT 42
9152: PPUSH
9153: LD_INT 12
9155: PPUSH
9156: LD_INT 1
9158: PPUSH
9159: CALL_OW 244
// PrepareLegionForPlayer ;
9163: CALL 4775 0 0
// end ; end ;
9167: LD_VAR 0 1
9171: RET
// every 0 0$10 trigger warWithLegion = 1 do
9172: LD_EXP 23
9176: PUSH
9177: LD_INT 1
9179: EQUAL
9180: IFFALSE 9196
9182: GO 9184
9184: DISABLE
// begin wait ( 0 0$30 ) ;
9185: LD_INT 1050
9187: PPUSH
9188: CALL_OW 67
// PrepareAttackLegion ;
9192: CALL 5416 0 0
// end ;
9196: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9197: LD_INT 120
9199: PUSH
9200: LD_INT 17
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 52
9209: PUSH
9210: EMPTY
9211: LIST
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PPUSH
9217: CALL_OW 69
9221: IFFALSE 9366
9223: GO 9225
9225: DISABLE
9226: LD_INT 0
9228: PPUSH
// begin enable ;
9229: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9230: LD_ADDR_VAR 0 1
9234: PUSH
9235: LD_INT 120
9237: PUSH
9238: LD_INT 17
9240: PUSH
9241: EMPTY
9242: LIST
9243: LIST
9244: PUSH
9245: LD_INT 52
9247: PUSH
9248: EMPTY
9249: LIST
9250: PUSH
9251: EMPTY
9252: LIST
9253: LIST
9254: PPUSH
9255: CALL_OW 69
9259: PUSH
9260: FOR_IN
9261: IFFALSE 9364
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9263: LD_VAR 0 1
9267: PPUSH
9268: CALL 80021 0 1
9272: PUSH
9273: LD_INT 4
9275: ARRAY
9276: PUSH
9277: LD_INT 0
9279: EQUAL
9280: PUSH
9281: LD_VAR 0 1
9285: PPUSH
9286: CALL_OW 255
9290: PUSH
9291: LD_INT 1
9293: EQUAL
9294: AND
9295: IFFALSE 9309
// SetSide ( i , 4 ) ;
9297: LD_VAR 0 1
9301: PPUSH
9302: LD_INT 4
9304: PPUSH
9305: CALL_OW 235
// if GetSide ( i ) = 4 then
9309: LD_VAR 0 1
9313: PPUSH
9314: CALL_OW 255
9318: PUSH
9319: LD_INT 4
9321: EQUAL
9322: IFFALSE 9362
// if not IsInArea ( i , PlayerSpawn ) then
9324: LD_VAR 0 1
9328: PPUSH
9329: LD_INT 4
9331: PPUSH
9332: CALL_OW 308
9336: NOT
9337: IFFALSE 9353
// ComMoveToArea ( i , PlayerSpawn ) else
9339: LD_VAR 0 1
9343: PPUSH
9344: LD_INT 4
9346: PPUSH
9347: CALL_OW 113
9351: GO 9362
// RemoveUnit ( i ) ;
9353: LD_VAR 0 1
9357: PPUSH
9358: CALL_OW 64
// end ;
9362: GO 9260
9364: POP
9365: POP
// end ;
9366: PPOPN 1
9368: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
9369: LD_EXP 20
9373: PUSH
9374: LD_INT 1
9376: EQUAL
9377: PUSH
9378: LD_INT 12
9380: PPUSH
9381: LD_INT 22
9383: PUSH
9384: LD_INT 3
9386: PUSH
9387: EMPTY
9388: LIST
9389: LIST
9390: PUSH
9391: LD_INT 101
9393: PUSH
9394: LD_INT 1
9396: PUSH
9397: EMPTY
9398: LIST
9399: LIST
9400: PUSH
9401: LD_INT 21
9403: PUSH
9404: LD_INT 2
9406: PUSH
9407: EMPTY
9408: LIST
9409: LIST
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: LIST
9415: PPUSH
9416: CALL_OW 70
9420: AND
9421: IFFALSE 9970
9423: GO 9425
9425: DISABLE
9426: LD_INT 0
9428: PPUSH
9429: PPUSH
9430: PPUSH
// begin DialogueOn ;
9431: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9435: LD_VAR 0 1
9439: PPUSH
9440: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9444: LD_INT 22
9446: PUSH
9447: LD_INT 1
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PUSH
9454: LD_INT 26
9456: PUSH
9457: LD_INT 1
9459: PUSH
9460: EMPTY
9461: LIST
9462: LIST
9463: PUSH
9464: LD_INT 2
9466: PUSH
9467: LD_INT 25
9469: PUSH
9470: LD_INT 1
9472: PUSH
9473: EMPTY
9474: LIST
9475: LIST
9476: PUSH
9477: LD_INT 25
9479: PUSH
9480: LD_INT 2
9482: PUSH
9483: EMPTY
9484: LIST
9485: LIST
9486: PUSH
9487: LD_INT 25
9489: PUSH
9490: LD_INT 3
9492: PUSH
9493: EMPTY
9494: LIST
9495: LIST
9496: PUSH
9497: LD_INT 25
9499: PUSH
9500: LD_INT 4
9502: PUSH
9503: EMPTY
9504: LIST
9505: LIST
9506: PUSH
9507: LD_INT 25
9509: PUSH
9510: LD_INT 5
9512: PUSH
9513: EMPTY
9514: LIST
9515: LIST
9516: PUSH
9517: LD_INT 25
9519: PUSH
9520: LD_INT 8
9522: PUSH
9523: EMPTY
9524: LIST
9525: LIST
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: LIST
9540: PPUSH
9541: CALL_OW 69
9545: PPUSH
9546: LD_STRING DT1-Sol1-1
9548: PPUSH
9549: LD_STRING DT1-FSol1-1
9551: PPUSH
9552: CALL 12226 0 3
// dec := ShowQuery2 ;
9556: LD_ADDR_VAR 0 3
9560: PUSH
9561: CALL 12710 0 0
9565: ST_TO_ADDR
// if dec = 1 then
9566: LD_VAR 0 3
9570: PUSH
9571: LD_INT 1
9573: EQUAL
9574: IFFALSE 9680
// begin Say ( JMM , D2-JMM-1 ) ;
9576: LD_EXP 1
9580: PPUSH
9581: LD_STRING D2-JMM-1
9583: PPUSH
9584: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9588: LD_EXP 15
9592: PPUSH
9593: LD_STRING D2-Pow-1
9595: PPUSH
9596: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9600: LD_EXP 1
9604: PPUSH
9605: LD_STRING D2a-JMM-1
9607: PPUSH
9608: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9612: LD_EXP 15
9616: PPUSH
9617: LD_STRING D2a-Pow-1
9619: PPUSH
9620: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9624: LD_EXP 1
9628: PPUSH
9629: LD_STRING D2a-JMM-2
9631: PPUSH
9632: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9636: LD_EXP 15
9640: PPUSH
9641: LD_STRING D2a-Pow-2
9643: PPUSH
9644: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9648: LD_EXP 1
9652: PPUSH
9653: LD_STRING D2a-JMM-3
9655: PPUSH
9656: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9660: LD_EXP 15
9664: PPUSH
9665: LD_STRING D2a-Pow-3
9667: PPUSH
9668: CALL_OW 94
// secondPass := 2 ;
9672: LD_ADDR_EXP 20
9676: PUSH
9677: LD_INT 2
9679: ST_TO_ADDR
// end ; if dec = 2 then
9680: LD_VAR 0 3
9684: PUSH
9685: LD_INT 2
9687: EQUAL
9688: IFFALSE 9782
// begin Say ( JMM , D2-JMM-1 ) ;
9690: LD_EXP 1
9694: PPUSH
9695: LD_STRING D2-JMM-1
9697: PPUSH
9698: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9702: LD_EXP 15
9706: PPUSH
9707: LD_STRING D2-Pow-1
9709: PPUSH
9710: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9714: LD_EXP 1
9718: PPUSH
9719: LD_STRING D2b-JMM-1
9721: PPUSH
9722: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
9726: LD_EXP 15
9730: PPUSH
9731: LD_STRING D2b-Pow-1
9733: PPUSH
9734: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9738: LD_EXP 1
9742: PPUSH
9743: LD_STRING D2c-JMM-1
9745: PPUSH
9746: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9750: LD_EXP 15
9754: PPUSH
9755: LD_STRING D2c-Pow-1
9757: PPUSH
9758: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9762: LD_EXP 1
9766: PPUSH
9767: LD_STRING D2c-JMM-2
9769: PPUSH
9770: CALL_OW 88
// secondPass := 2 ;
9774: LD_ADDR_EXP 20
9778: PUSH
9779: LD_INT 2
9781: ST_TO_ADDR
// end ; DialogueOff ;
9782: CALL_OW 7
// if secondPass = 2 then
9786: LD_EXP 20
9790: PUSH
9791: LD_INT 2
9793: EQUAL
9794: IFFALSE 9798
// exit ;
9796: GO 9970
// Query ( HelpRequest ) ;
9798: LD_STRING HelpRequest
9800: PPUSH
9801: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
9805: LD_INT 27
9807: PPUSH
9808: LD_INT 1
9810: PPUSH
9811: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
9815: LD_INT 35
9817: PPUSH
9818: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
9822: LD_EXP 1
9826: PPUSH
9827: LD_INT 27
9829: PPUSH
9830: CALL_OW 308
9834: IFFALSE 9815
// SetAreaMapShow ( helpRequestArea , 0 ) ;
9836: LD_INT 27
9838: PPUSH
9839: LD_INT 0
9841: PPUSH
9842: CALL_OW 424
// DialogueOn ;
9846: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
9850: LD_EXP 1
9854: PPUSH
9855: LD_STRING D2-JMM-1
9857: PPUSH
9858: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9862: LD_EXP 15
9866: PPUSH
9867: LD_STRING D2-Pow-1
9869: PPUSH
9870: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
9874: LD_EXP 1
9878: PPUSH
9879: LD_STRING D2b-JMM-1
9881: PPUSH
9882: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9886: LD_EXP 15
9890: PPUSH
9891: LD_STRING D2a-Pow-2
9893: PPUSH
9894: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9898: LD_EXP 1
9902: PPUSH
9903: LD_STRING D2a-JMM-3
9905: PPUSH
9906: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
9910: LD_EXP 15
9914: PPUSH
9915: LD_STRING D2a-Pow-3
9917: PPUSH
9918: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
9922: LD_EXP 1
9926: PPUSH
9927: LD_STRING D2c-JMM-1
9929: PPUSH
9930: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
9934: LD_EXP 15
9938: PPUSH
9939: LD_STRING D2c-Pow-1
9941: PPUSH
9942: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
9946: LD_EXP 1
9950: PPUSH
9951: LD_STRING D2c-JMM-2
9953: PPUSH
9954: CALL_OW 88
// DialogueOff ;
9958: CALL_OW 7
// secondPass := 2 ;
9962: LD_ADDR_EXP 20
9966: PUSH
9967: LD_INT 2
9969: ST_TO_ADDR
// end ;
9970: PPOPN 3
9972: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
9973: LD_EXP 21
9977: PUSH
9978: LD_INT 1
9980: EQUAL
9981: PUSH
9982: LD_INT 11
9984: PPUSH
9985: LD_INT 22
9987: PUSH
9988: LD_INT 3
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PPUSH
9995: CALL_OW 70
9999: AND
10000: IFFALSE 10481
10002: GO 10004
10004: DISABLE
10005: LD_INT 0
10007: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10008: LD_ADDR_VAR 0 1
10012: PUSH
10013: LD_INT 11
10015: PPUSH
10016: LD_INT 22
10018: PUSH
10019: LD_INT 3
10021: PUSH
10022: EMPTY
10023: LIST
10024: LIST
10025: PPUSH
10026: CALL_OW 70
10030: ST_TO_ADDR
// if not vehicles then
10031: LD_VAR 0 1
10035: NOT
10036: IFFALSE 10040
// exit ;
10038: GO 10481
// repeat wait ( 0 0$1 ) ;
10040: LD_INT 35
10042: PPUSH
10043: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10047: LD_VAR 0 1
10051: PPUSH
10052: LD_INT 101
10054: PUSH
10055: LD_INT 1
10057: PUSH
10058: EMPTY
10059: LIST
10060: LIST
10061: PPUSH
10062: CALL_OW 72
10066: IFFALSE 10040
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10068: LD_VAR 0 1
10072: PPUSH
10073: LD_INT 101
10075: PUSH
10076: LD_INT 1
10078: PUSH
10079: EMPTY
10080: LIST
10081: LIST
10082: PPUSH
10083: CALL_OW 72
10087: PUSH
10088: LD_INT 1
10090: ARRAY
10091: PPUSH
10092: CALL_OW 87
// DialogueOn ;
10096: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10100: LD_INT 22
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: EMPTY
10107: LIST
10108: LIST
10109: PUSH
10110: LD_INT 26
10112: PUSH
10113: LD_INT 1
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: PUSH
10120: LD_INT 23
10122: PUSH
10123: LD_INT 1
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: LD_INT 25
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: PUSH
10143: LD_INT 25
10145: PUSH
10146: LD_INT 2
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 25
10155: PUSH
10156: LD_INT 3
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 25
10165: PUSH
10166: LD_INT 4
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PUSH
10173: LD_INT 25
10175: PUSH
10176: LD_INT 5
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 25
10185: PUSH
10186: LD_INT 8
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: LIST
10206: LIST
10207: PPUSH
10208: CALL_OW 69
10212: PPUSH
10213: LD_STRING DT1-Sol1-1
10215: PPUSH
10216: LD_STRING DT1-FSol1-1
10218: PPUSH
10219: CALL 12226 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10223: LD_EXP 1
10227: PPUSH
10228: LD_STRING DT1-JMM-1
10230: PPUSH
10231: CALL_OW 88
// DialogueOff ;
10235: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10239: LD_INT 175
10241: PPUSH
10242: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10246: LD_INT 11
10248: PPUSH
10249: LD_INT 22
10251: PUSH
10252: LD_INT 3
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: LD_INT 50
10261: PUSH
10262: EMPTY
10263: LIST
10264: PUSH
10265: LD_INT 2
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 2
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PUSH
10278: LD_INT 21
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 70
10302: PUSH
10303: LD_INT 0
10305: EQUAL
10306: PUSH
10307: LD_EXP 22
10311: PUSH
10312: LD_INT 2
10314: GREATER
10315: AND
10316: IFFALSE 10239
// DialogueOn ;
10318: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10322: LD_EXP 1
10326: PPUSH
10327: LD_STRING DT1a-JMM-1
10329: PPUSH
10330: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10334: LD_INT 22
10336: PUSH
10337: LD_INT 1
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 26
10346: PUSH
10347: LD_INT 1
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 23
10356: PUSH
10357: LD_INT 1
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: LD_INT 2
10366: PUSH
10367: LD_INT 25
10369: PUSH
10370: LD_INT 1
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: PUSH
10377: LD_INT 25
10379: PUSH
10380: LD_INT 2
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 25
10389: PUSH
10390: LD_INT 3
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 25
10399: PUSH
10400: LD_INT 4
10402: PUSH
10403: EMPTY
10404: LIST
10405: LIST
10406: PUSH
10407: LD_INT 25
10409: PUSH
10410: LD_INT 5
10412: PUSH
10413: EMPTY
10414: LIST
10415: LIST
10416: PUSH
10417: LD_INT 25
10419: PUSH
10420: LD_INT 8
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: EMPTY
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PPUSH
10442: CALL_OW 69
10446: PPUSH
10447: LD_STRING DT1a-Sol1-1
10449: PPUSH
10450: LD_STRING DT1a-FSol1-1
10452: PPUSH
10453: CALL 12226 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10457: LD_EXP 1
10461: PPUSH
10462: LD_STRING DT1a-JMM-2
10464: PPUSH
10465: CALL_OW 88
// DialogueOff ;
10469: CALL_OW 7
// vehicleTeleported := 2 ;
10473: LD_ADDR_EXP 21
10477: PUSH
10478: LD_INT 2
10480: ST_TO_ADDR
// end ;
10481: PPOPN 1
10483: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10484: LD_EXP 21
10488: PUSH
10489: LD_INT 3
10491: EQUAL
10492: PUSH
10493: LD_INT 11
10495: PPUSH
10496: LD_INT 22
10498: PUSH
10499: LD_INT 3
10501: PUSH
10502: EMPTY
10503: LIST
10504: LIST
10505: PUSH
10506: LD_INT 101
10508: PUSH
10509: LD_INT 1
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: PPUSH
10520: CALL_OW 70
10524: AND
10525: IFFALSE 10810
10527: GO 10529
10529: DISABLE
10530: LD_INT 0
10532: PPUSH
10533: PPUSH
10534: PPUSH
// begin wait ( 0 0$0.3 ) ;
10535: LD_INT 10
10537: PPUSH
10538: CALL_OW 67
// DialogueOn ;
10542: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10546: LD_ADDR_VAR 0 3
10550: PUSH
10551: LD_INT 22
10553: PUSH
10554: LD_INT 1
10556: PUSH
10557: EMPTY
10558: LIST
10559: LIST
10560: PUSH
10561: LD_INT 23
10563: PUSH
10564: LD_INT 1
10566: PUSH
10567: EMPTY
10568: LIST
10569: LIST
10570: PUSH
10571: LD_INT 26
10573: PUSH
10574: LD_INT 1
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: PUSH
10581: LD_INT 2
10583: PUSH
10584: LD_INT 25
10586: PUSH
10587: LD_INT 1
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: PUSH
10594: LD_INT 25
10596: PUSH
10597: LD_INT 2
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: PUSH
10604: LD_INT 25
10606: PUSH
10607: LD_INT 3
10609: PUSH
10610: EMPTY
10611: LIST
10612: LIST
10613: PUSH
10614: LD_INT 25
10616: PUSH
10617: LD_INT 4
10619: PUSH
10620: EMPTY
10621: LIST
10622: LIST
10623: PUSH
10624: LD_INT 25
10626: PUSH
10627: LD_INT 5
10629: PUSH
10630: EMPTY
10631: LIST
10632: LIST
10633: PUSH
10634: LD_INT 25
10636: PUSH
10637: LD_INT 8
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: PUSH
10653: EMPTY
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: PPUSH
10659: CALL_OW 69
10663: PPUSH
10664: LD_STRING DT2-Sol1-1
10666: PPUSH
10667: LD_STRING DT2-FSol1-1
10669: PPUSH
10670: CALL 12226 0 3
10674: ST_TO_ADDR
// DialogueOff ;
10675: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
10679: LD_INT 175
10681: PPUSH
10682: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
10686: LD_INT 11
10688: PPUSH
10689: LD_INT 22
10691: PUSH
10692: LD_INT 3
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 50
10701: PUSH
10702: EMPTY
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: PPUSH
10709: CALL_OW 70
10713: NOT
10714: IFFALSE 10679
// wait ( 0 0$2 ) ;
10716: LD_INT 70
10718: PPUSH
10719: CALL_OW 67
// vehicleTeleported := 4 ;
10723: LD_ADDR_EXP 21
10727: PUSH
10728: LD_INT 4
10730: ST_TO_ADDR
// DialogueOn ;
10731: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10735: LD_EXP 1
10739: PPUSH
10740: LD_STRING DT2a-JMM-1
10742: PPUSH
10743: CALL_OW 88
// if speaker then
10747: LD_VAR 0 3
10751: IFFALSE 10794
// if GetSex ( speaker ) = 1 then
10753: LD_VAR 0 3
10757: PPUSH
10758: CALL_OW 258
10762: PUSH
10763: LD_INT 1
10765: EQUAL
10766: IFFALSE 10782
// Say ( speaker , DT2a-Sol1-1 ) else
10768: LD_VAR 0 3
10772: PPUSH
10773: LD_STRING DT2a-Sol1-1
10775: PPUSH
10776: CALL_OW 88
10780: GO 10794
// Say ( speaker , DT2a-FSol1-1 ) ;
10782: LD_VAR 0 3
10786: PPUSH
10787: LD_STRING DT2a-FSol1-1
10789: PPUSH
10790: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10794: LD_EXP 3
10798: PPUSH
10799: LD_STRING DT2a-Don-1
10801: PPUSH
10802: CALL_OW 88
// DialogueOff ;
10806: CALL_OW 7
// end ;
10810: PPOPN 3
10812: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10813: LD_INT 1
10815: PPUSH
10816: LD_INT 45
10818: PPUSH
10819: LD_INT 74
10821: PPUSH
10822: CALL_OW 293
10826: IFFALSE 11001
10828: GO 10830
10830: DISABLE
// begin DialogueOn ;
10831: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10835: LD_INT 36
10837: PPUSH
10838: LD_INT 55
10840: PPUSH
10841: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10845: LD_INT 22
10847: PUSH
10848: LD_INT 1
10850: PUSH
10851: EMPTY
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 23
10857: PUSH
10858: LD_INT 1
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: PUSH
10865: LD_INT 26
10867: PUSH
10868: LD_INT 1
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: PUSH
10875: LD_INT 2
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: LD_INT 1
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: PUSH
10888: LD_INT 25
10890: PUSH
10891: LD_INT 2
10893: PUSH
10894: EMPTY
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 25
10900: PUSH
10901: LD_INT 3
10903: PUSH
10904: EMPTY
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 25
10910: PUSH
10911: LD_INT 4
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: PUSH
10918: LD_INT 25
10920: PUSH
10921: LD_INT 5
10923: PUSH
10924: EMPTY
10925: LIST
10926: LIST
10927: PUSH
10928: LD_INT 25
10930: PUSH
10931: LD_INT 8
10933: PUSH
10934: EMPTY
10935: LIST
10936: LIST
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PPUSH
10953: CALL_OW 69
10957: PPUSH
10958: LD_STRING D5-Sol1-1
10960: PPUSH
10961: LD_STRING D5-FSol1-
10963: PPUSH
10964: CALL 12226 0 3
// if warWithLegion and IsOk ( Donaldson ) then
10968: LD_EXP 23
10972: PUSH
10973: LD_EXP 3
10977: PPUSH
10978: CALL_OW 302
10982: AND
10983: IFFALSE 10997
// Say ( Donaldson , D5-Don-1 ) ;
10985: LD_EXP 3
10989: PPUSH
10990: LD_STRING D5-Don-1
10992: PPUSH
10993: CALL_OW 88
// DialogueOff ;
10997: CALL_OW 7
// end ;
11001: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11002: LD_INT 1
11004: PPUSH
11005: LD_INT 10
11007: PPUSH
11008: CALL_OW 292
11012: PUSH
11013: LD_INT 1
11015: PPUSH
11016: LD_INT 137
11018: PPUSH
11019: CALL_OW 292
11023: OR
11024: IFFALSE 11179
11026: GO 11028
11028: DISABLE
// begin DialogueOn ;
11029: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11033: LD_INT 22
11035: PUSH
11036: LD_INT 1
11038: PUSH
11039: EMPTY
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 23
11045: PUSH
11046: LD_INT 1
11048: PUSH
11049: EMPTY
11050: LIST
11051: LIST
11052: PUSH
11053: LD_INT 26
11055: PUSH
11056: LD_INT 1
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 2
11065: PUSH
11066: LD_INT 25
11068: PUSH
11069: LD_INT 1
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PUSH
11076: LD_INT 25
11078: PUSH
11079: LD_INT 2
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PUSH
11086: LD_INT 25
11088: PUSH
11089: LD_INT 3
11091: PUSH
11092: EMPTY
11093: LIST
11094: LIST
11095: PUSH
11096: LD_INT 25
11098: PUSH
11099: LD_INT 4
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 25
11108: PUSH
11109: LD_INT 5
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: PUSH
11116: LD_INT 25
11118: PUSH
11119: LD_INT 8
11121: PUSH
11122: EMPTY
11123: LIST
11124: LIST
11125: PUSH
11126: EMPTY
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PPUSH
11141: CALL_OW 69
11145: PPUSH
11146: LD_STRING DT3-Sol1-1
11148: PPUSH
11149: LD_STRING DT3-FSol1-1
11151: PPUSH
11152: CALL 12226 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11156: LD_EXP 1
11160: PPUSH
11161: LD_STRING DT3-JMM-1
11163: PPUSH
11164: CALL_OW 88
// DialogueOff ;
11168: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11172: LD_STRING M2
11174: PPUSH
11175: CALL_OW 337
// end ;
11179: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) do
11180: LD_EXP 35
11184: PUSH
11185: LD_INT 0
11187: EQUAL
11188: PUSH
11189: LD_INT 10
11191: PPUSH
11192: LD_INT 22
11194: PUSH
11195: LD_INT 1
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: PPUSH
11202: CALL_OW 70
11206: PUSH
11207: LD_INT 10
11209: PPUSH
11210: LD_INT 22
11212: PUSH
11213: LD_INT 3
11215: PUSH
11216: EMPTY
11217: LIST
11218: LIST
11219: PUSH
11220: LD_INT 3
11222: PUSH
11223: LD_INT 24
11225: PUSH
11226: LD_INT 800
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 21
11239: PUSH
11240: LD_INT 2
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: LD_INT 58
11249: PUSH
11250: EMPTY
11251: LIST
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PPUSH
11259: CALL_OW 70
11263: OR
11264: AND
11265: IFFALSE 11278
11267: GO 11269
11269: DISABLE
// ruEscape := 1 ;
11270: LD_ADDR_EXP 35
11274: PUSH
11275: LD_INT 1
11277: ST_TO_ADDR
11278: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11279: LD_INT 3
11281: PPUSH
11282: CALL_OW 303
11286: PUSH
11287: LD_INT 4
11289: PPUSH
11290: CALL_OW 303
11294: OR
11295: PUSH
11296: LD_EXP 35
11300: PUSH
11301: LD_INT 1
11303: EQUAL
11304: OR
11305: IFFALSE 11894
11307: GO 11309
11309: DISABLE
11310: LD_INT 0
11312: PPUSH
11313: PPUSH
11314: PPUSH
// begin ruAI := 0 ;
11315: LD_ADDR_EXP 34
11319: PUSH
11320: LD_INT 0
11322: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11323: LD_EXP 27
11327: PPUSH
11328: CALL_OW 122
// wait ( 0 0$1 ) ;
11332: LD_INT 35
11334: PPUSH
11335: CALL_OW 67
// DialogueOn ;
11339: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11343: LD_INT 75
11345: PPUSH
11346: LD_INT 21
11348: PPUSH
11349: LD_INT 1
11351: PPUSH
11352: LD_INT 12
11354: PPUSH
11355: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11359: LD_INT 75
11361: PPUSH
11362: LD_INT 21
11364: PPUSH
11365: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11369: LD_INT 10
11371: PPUSH
11372: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11376: LD_EXP 1
11380: PPUSH
11381: LD_STRING D6-JMM-1
11383: PPUSH
11384: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11388: LD_INT 75
11390: PPUSH
11391: LD_INT 21
11393: PPUSH
11394: LD_INT 1
11396: PPUSH
11397: CALL_OW 331
// DialogueOff ;
11401: CALL_OW 7
// for i in RuScientists do
11405: LD_ADDR_VAR 0 1
11409: PUSH
11410: LD_EXP 27
11414: PUSH
11415: FOR_IN
11416: IFFALSE 11452
// begin SetSide ( i , 6 ) ;
11418: LD_VAR 0 1
11422: PPUSH
11423: LD_INT 6
11425: PPUSH
11426: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11430: LD_VAR 0 1
11434: PPUSH
11435: LD_INT 1
11437: PPUSH
11438: LD_INT 3
11440: PPUSH
11441: CALL_OW 12
11445: PPUSH
11446: CALL_OW 109
// end ;
11450: GO 11415
11452: POP
11453: POP
// repeat wait ( 0 0$1 ) ;
11454: LD_INT 35
11456: PPUSH
11457: CALL_OW 67
// for i in RuScientists do
11461: LD_ADDR_VAR 0 1
11465: PUSH
11466: LD_EXP 27
11470: PUSH
11471: FOR_IN
11472: IFFALSE 11885
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11474: LD_ADDR_VAR 0 3
11478: PUSH
11479: LD_INT 22
11481: PUSH
11482: LD_INT 3
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 91
11491: PUSH
11492: LD_VAR 0 1
11496: PUSH
11497: LD_INT 10
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 21
11507: PUSH
11508: LD_INT 2
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 58
11517: PUSH
11518: EMPTY
11519: LIST
11520: PUSH
11521: EMPTY
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: PPUSH
11527: CALL_OW 69
11531: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11532: LD_VAR 0 3
11536: PUSH
11537: LD_VAR 0 1
11541: PPUSH
11542: CALL_OW 310
11546: NOT
11547: AND
11548: IFFALSE 11576
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11550: LD_VAR 0 1
11554: PPUSH
11555: LD_VAR 0 3
11559: PPUSH
11560: LD_VAR 0 1
11564: PPUSH
11565: CALL_OW 74
11569: PPUSH
11570: CALL_OW 120
// continue ;
11574: GO 11471
// end ; if IsInUnit ( i ) then
11576: LD_VAR 0 1
11580: PPUSH
11581: CALL_OW 310
11585: IFFALSE 11604
// unit := IsInUnit ( i ) else
11587: LD_ADDR_VAR 0 2
11591: PUSH
11592: LD_VAR 0 1
11596: PPUSH
11597: CALL_OW 310
11601: ST_TO_ADDR
11602: GO 11614
// unit := i ;
11604: LD_ADDR_VAR 0 2
11608: PUSH
11609: LD_VAR 0 1
11613: ST_TO_ADDR
// case GetTag ( i ) of 1 :
11614: LD_VAR 0 1
11618: PPUSH
11619: CALL_OW 110
11623: PUSH
11624: LD_INT 1
11626: DOUBLE
11627: EQUAL
11628: IFTRUE 11632
11630: GO 11691
11632: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11633: LD_VAR 0 2
11637: PPUSH
11638: LD_INT 137
11640: PPUSH
11641: CALL_OW 296
11645: PUSH
11646: LD_INT 13
11648: LESS
11649: PUSH
11650: LD_INT 137
11652: PPUSH
11653: CALL_OW 302
11657: AND
11658: IFFALSE 11674
// ComEnterUnit ( unit , rutp ) else
11660: LD_VAR 0 2
11664: PPUSH
11665: LD_INT 137
11667: PPUSH
11668: CALL_OW 120
11672: GO 11689
// ComMoveXY ( unit , 16 , 28 ) ;
11674: LD_VAR 0 2
11678: PPUSH
11679: LD_INT 16
11681: PPUSH
11682: LD_INT 28
11684: PPUSH
11685: CALL_OW 111
// end ; 2 :
11689: GO 11883
11691: LD_INT 2
11693: DOUBLE
11694: EQUAL
11695: IFTRUE 11699
11697: GO 11717
11699: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
11700: LD_VAR 0 2
11704: PPUSH
11705: LD_INT 97
11707: PPUSH
11708: LD_INT 2
11710: PPUSH
11711: CALL_OW 111
11715: GO 11883
11717: LD_INT 3
11719: DOUBLE
11720: EQUAL
11721: IFTRUE 11725
11723: GO 11784
11725: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
11726: LD_VAR 0 2
11730: PPUSH
11731: LD_INT 137
11733: PPUSH
11734: CALL_OW 296
11738: PUSH
11739: LD_INT 13
11741: LESS
11742: PUSH
11743: LD_INT 137
11745: PPUSH
11746: CALL_OW 302
11750: AND
11751: IFFALSE 11767
// ComEnterUnit ( unit , rutp ) else
11753: LD_VAR 0 2
11757: PPUSH
11758: LD_INT 137
11760: PPUSH
11761: CALL_OW 120
11765: GO 11782
// ComMoveXY ( unit , 128 , 155 ) ;
11767: LD_VAR 0 2
11771: PPUSH
11772: LD_INT 128
11774: PPUSH
11775: LD_INT 155
11777: PPUSH
11778: CALL_OW 111
// end ; 11 :
11782: GO 11883
11784: LD_INT 11
11786: DOUBLE
11787: EQUAL
11788: IFTRUE 11792
11790: GO 11810
11792: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
11793: LD_VAR 0 2
11797: PPUSH
11798: LD_INT 16
11800: PPUSH
11801: LD_INT 28
11803: PPUSH
11804: CALL_OW 111
11808: GO 11883
11810: LD_INT 13
11812: DOUBLE
11813: EQUAL
11814: IFTRUE 11818
11816: GO 11856
11818: POP
// begin if IsOk ( ruteleprt ) then
11819: LD_INT 10
11821: PPUSH
11822: CALL_OW 302
11826: IFFALSE 11842
// ComEnterUnit ( unit , ruteleprt ) else
11828: LD_VAR 0 2
11832: PPUSH
11833: LD_INT 10
11835: PPUSH
11836: CALL_OW 120
11840: GO 11854
// SetTag ( unit , 23 ) ;
11842: LD_VAR 0 2
11846: PPUSH
11847: LD_INT 23
11849: PPUSH
11850: CALL_OW 109
// end ; 23 :
11854: GO 11883
11856: LD_INT 23
11858: DOUBLE
11859: EQUAL
11860: IFTRUE 11864
11862: GO 11882
11864: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
11865: LD_VAR 0 2
11869: PPUSH
11870: LD_INT 128
11872: PPUSH
11873: LD_INT 155
11875: PPUSH
11876: CALL_OW 111
11880: GO 11883
11882: POP
// end ;
11883: GO 11471
11885: POP
11886: POP
// until not RuScientists ;
11887: LD_EXP 27
11891: NOT
11892: IFFALSE 11454
// end ;
11894: PPOPN 3
11896: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
11897: LD_EXP 34
11901: PUSH
11902: LD_INT 0
11904: EQUAL
11905: PUSH
11906: LD_EXP 27
11910: AND
11911: PUSH
11912: LD_INT 22
11914: PUSH
11915: LD_INT 6
11917: PUSH
11918: EMPTY
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 2
11924: PUSH
11925: LD_INT 95
11927: PUSH
11928: LD_INT 13
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: PUSH
11935: LD_INT 95
11937: PUSH
11938: LD_INT 14
11940: PUSH
11941: EMPTY
11942: LIST
11943: LIST
11944: PUSH
11945: LD_INT 95
11947: PUSH
11948: LD_INT 25
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: LIST
11959: LIST
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PPUSH
11965: CALL_OW 69
11969: AND
11970: IFFALSE 12183
11972: GO 11974
11974: DISABLE
11975: LD_INT 0
11977: PPUSH
11978: PPUSH
11979: PPUSH
11980: PPUSH
// begin enable ;
11981: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
11982: LD_ADDR_VAR 0 1
11986: PUSH
11987: LD_INT 22
11989: PUSH
11990: LD_INT 6
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: PUSH
11997: LD_INT 2
11999: PUSH
12000: LD_INT 95
12002: PUSH
12003: LD_INT 13
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 95
12012: PUSH
12013: LD_INT 14
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 95
12022: PUSH
12023: LD_INT 25
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: PPUSH
12040: CALL_OW 69
12044: PUSH
12045: FOR_IN
12046: IFFALSE 12181
// begin if i in RuScientists then
12048: LD_VAR 0 1
12052: PUSH
12053: LD_EXP 27
12057: IN
12058: IFFALSE 12087
// begin RuScientists = RuScientists diff i ;
12060: LD_ADDR_EXP 27
12064: PUSH
12065: LD_EXP 27
12069: PUSH
12070: LD_VAR 0 1
12074: DIFF
12075: ST_TO_ADDR
// RemoveUnit ( i ) ;
12076: LD_VAR 0 1
12080: PPUSH
12081: CALL_OW 64
// continue ;
12085: GO 12045
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12087: LD_VAR 0 1
12091: PUSH
12092: LD_INT 22
12094: PUSH
12095: LD_INT 6
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 33
12104: PUSH
12105: LD_INT 1
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: PPUSH
12116: CALL_OW 69
12120: IN
12121: IFFALSE 12179
// begin if IsDrivenBy ( i ) in RuScientists then
12123: LD_VAR 0 1
12127: PPUSH
12128: CALL_OW 311
12132: PUSH
12133: LD_EXP 27
12137: IN
12138: IFFALSE 12156
// RuScientists = RuScientists diff i ;
12140: LD_ADDR_EXP 27
12144: PUSH
12145: LD_EXP 27
12149: PUSH
12150: LD_VAR 0 1
12154: DIFF
12155: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12156: LD_VAR 0 1
12160: PPUSH
12161: CALL_OW 311
12165: PPUSH
12166: CALL_OW 64
// RemoveUnit ( i ) ;
12170: LD_VAR 0 1
12174: PPUSH
12175: CALL_OW 64
// end ; end ;
12179: GO 12045
12181: POP
12182: POP
// end ; end_of_file
12183: PPOPN 4
12185: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12186: LD_INT 0
12188: PPUSH
12189: PPUSH
// for i in charactersList do
12190: LD_ADDR_VAR 0 4
12194: PUSH
12195: LD_VAR 0 1
12199: PUSH
12200: FOR_IN
12201: IFFALSE 12219
// SaveCharacters ( i , ident ) ;
12203: LD_VAR 0 4
12207: PPUSH
12208: LD_VAR 0 2
12212: PPUSH
12213: CALL_OW 38
12217: GO 12200
12219: POP
12220: POP
// end ;
12221: LD_VAR 0 3
12225: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12226: LD_INT 0
12228: PPUSH
12229: PPUSH
12230: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12231: LD_ADDR_VAR 0 1
12235: PUSH
12236: LD_VAR 0 1
12240: PUSH
12241: LD_EXP 1
12245: PUSH
12246: LD_EXP 7
12250: PUSH
12251: LD_EXP 3
12255: PUSH
12256: LD_EXP 4
12260: PUSH
12261: LD_EXP 5
12265: PUSH
12266: LD_EXP 2
12270: PUSH
12271: LD_EXP 12
12275: PUSH
12276: LD_EXP 13
12280: PUSH
12281: LD_EXP 9
12285: PUSH
12286: LD_EXP 11
12290: PUSH
12291: LD_EXP 6
12295: PUSH
12296: LD_EXP 8
12300: PUSH
12301: LD_EXP 10
12305: PUSH
12306: LD_EXP 15
12310: PUSH
12311: EMPTY
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: DIFF
12327: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12328: LD_ADDR_VAR 0 6
12332: PUSH
12333: LD_VAR 0 1
12337: PUSH
12338: LD_INT 1
12340: PPUSH
12341: LD_VAR 0 1
12345: PPUSH
12346: CALL_OW 12
12350: ARRAY
12351: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12352: LD_VAR 0 6
12356: PPUSH
12357: CALL_OW 258
12361: PUSH
12362: LD_INT 1
12364: EQUAL
12365: IFFALSE 12383
// Say ( speaker , dialogMID ) else
12367: LD_VAR 0 6
12371: PPUSH
12372: LD_VAR 0 2
12376: PPUSH
12377: CALL_OW 88
12381: GO 12397
// Say ( speaker , dialogFID ) ;
12383: LD_VAR 0 6
12387: PPUSH
12388: LD_VAR 0 3
12392: PPUSH
12393: CALL_OW 88
// result := speaker ;
12397: LD_ADDR_VAR 0 4
12401: PUSH
12402: LD_VAR 0 6
12406: ST_TO_ADDR
// end ;
12407: LD_VAR 0 4
12411: RET
// export function PrepareDifficulty ; var tmp ; begin
12412: LD_INT 0
12414: PPUSH
12415: PPUSH
// if Difficulty = 1 then
12416: LD_OWVAR 67
12420: PUSH
12421: LD_INT 1
12423: EQUAL
12424: IFFALSE 12444
// begin RuSolMinLevel = 8 ;
12426: LD_ADDR_EXP 29
12430: PUSH
12431: LD_INT 8
12433: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12434: LD_ADDR_EXP 30
12438: PUSH
12439: LD_INT 10
12441: ST_TO_ADDR
// end else
12442: GO 12684
// if Difficulty = 2 then
12444: LD_OWVAR 67
12448: PUSH
12449: LD_INT 2
12451: EQUAL
12452: IFFALSE 12548
// begin RuSolMinLevel = 9 ;
12454: LD_ADDR_EXP 29
12458: PUSH
12459: LD_INT 9
12461: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12462: LD_ADDR_EXP 30
12466: PUSH
12467: LD_INT 10
12469: ST_TO_ADDR
// uc_nation = 3 ;
12470: LD_ADDR_OWVAR 21
12474: PUSH
12475: LD_INT 3
12477: ST_TO_ADDR
// uc_side = 3 ;
12478: LD_ADDR_OWVAR 20
12482: PUSH
12483: LD_INT 3
12485: ST_TO_ADDR
// bc_level = 10 ;
12486: LD_ADDR_OWVAR 43
12490: PUSH
12491: LD_INT 10
12493: ST_TO_ADDR
// bc_type = b_turret ;
12494: LD_ADDR_OWVAR 42
12498: PUSH
12499: LD_INT 33
12501: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12502: LD_ADDR_VAR 0 2
12506: PUSH
12507: LD_INT 86
12509: PPUSH
12510: LD_INT 34
12512: PPUSH
12513: LD_INT 2
12515: PPUSH
12516: CALL_OW 47
12520: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12521: LD_VAR 0 2
12525: PPUSH
12526: LD_INT 49
12528: PPUSH
12529: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12533: LD_INT 64
12535: PPUSH
12536: LD_INT 3
12538: PPUSH
12539: LD_INT 1
12541: PPUSH
12542: CALL_OW 322
// end else
12546: GO 12684
// begin RuSolMinLevel = 10 ;
12548: LD_ADDR_EXP 29
12552: PUSH
12553: LD_INT 10
12555: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12556: LD_ADDR_EXP 30
12560: PUSH
12561: LD_INT 10
12563: ST_TO_ADDR
// uc_nation = 3 ;
12564: LD_ADDR_OWVAR 21
12568: PUSH
12569: LD_INT 3
12571: ST_TO_ADDR
// uc_side = 3 ;
12572: LD_ADDR_OWVAR 20
12576: PUSH
12577: LD_INT 3
12579: ST_TO_ADDR
// bc_level = 10 ;
12580: LD_ADDR_OWVAR 43
12584: PUSH
12585: LD_INT 10
12587: ST_TO_ADDR
// bc_type = b_turret ;
12588: LD_ADDR_OWVAR 42
12592: PUSH
12593: LD_INT 33
12595: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12596: LD_ADDR_VAR 0 2
12600: PUSH
12601: LD_INT 86
12603: PPUSH
12604: LD_INT 34
12606: PPUSH
12607: LD_INT 2
12609: PPUSH
12610: CALL_OW 47
12614: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12615: LD_VAR 0 2
12619: PPUSH
12620: LD_INT 49
12622: PPUSH
12623: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12627: LD_ADDR_VAR 0 2
12631: PUSH
12632: LD_INT 93
12634: PPUSH
12635: LD_INT 31
12637: PPUSH
12638: LD_INT 2
12640: PPUSH
12641: CALL_OW 47
12645: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12646: LD_VAR 0 2
12650: PPUSH
12651: LD_INT 49
12653: PPUSH
12654: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12658: LD_INT 64
12660: PPUSH
12661: LD_INT 3
12663: PPUSH
12664: LD_INT 1
12666: PPUSH
12667: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12671: LD_INT 65
12673: PPUSH
12674: LD_INT 3
12676: PPUSH
12677: LD_INT 1
12679: PPUSH
12680: CALL_OW 322
// end ; end ;
12684: LD_VAR 0 1
12688: RET
// export function ShowQuery1 ; begin
12689: LD_INT 0
12691: PPUSH
// result := Query ( Q1 ) ;
12692: LD_ADDR_VAR 0 1
12696: PUSH
12697: LD_STRING Q1
12699: PPUSH
12700: CALL_OW 97
12704: ST_TO_ADDR
// end ;
12705: LD_VAR 0 1
12709: RET
// export function ShowQuery2 ; begin
12710: LD_INT 0
12712: PPUSH
// result := Query ( Q1a ) ;
12713: LD_ADDR_VAR 0 1
12717: PUSH
12718: LD_STRING Q1a
12720: PPUSH
12721: CALL_OW 97
12725: ST_TO_ADDR
// end ;
12726: LD_VAR 0 1
12730: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
12731: LD_INT 0
12733: PPUSH
12734: PPUSH
12735: PPUSH
12736: PPUSH
// for i = 1 to count do
12737: LD_ADDR_VAR 0 8
12741: PUSH
12742: DOUBLE
12743: LD_INT 1
12745: DEC
12746: ST_TO_ADDR
12747: LD_VAR 0 6
12751: PUSH
12752: FOR_TO
12753: IFFALSE 12834
// begin uc_side = side ;
12755: LD_ADDR_OWVAR 20
12759: PUSH
12760: LD_VAR 0 1
12764: ST_TO_ADDR
// uc_nation = nation ;
12765: LD_ADDR_OWVAR 21
12769: PUSH
12770: LD_VAR 0 2
12774: ST_TO_ADDR
// hc_gallery =  ;
12775: LD_ADDR_OWVAR 33
12779: PUSH
12780: LD_STRING 
12782: ST_TO_ADDR
// hc_name =  ;
12783: LD_ADDR_OWVAR 26
12787: PUSH
12788: LD_STRING 
12790: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12791: LD_INT 0
12793: PPUSH
12794: LD_VAR 0 5
12798: PPUSH
12799: LD_VAR 0 4
12803: PPUSH
12804: CALL_OW 380
// un = CreateHuman ;
12808: LD_ADDR_VAR 0 10
12812: PUSH
12813: CALL_OW 44
12817: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12818: LD_VAR 0 10
12822: PPUSH
12823: LD_VAR 0 3
12827: PPUSH
12828: CALL_OW 52
// end ;
12832: GO 12752
12834: POP
12835: POP
// end ;
12836: LD_VAR 0 7
12840: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
12841: LD_INT 0
12843: PPUSH
12844: PPUSH
12845: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12846: LD_ADDR_VAR 0 6
12850: PUSH
12851: LD_INT 48
12853: PUSH
12854: LD_INT 49
12856: PUSH
12857: LD_INT 50
12859: PUSH
12860: LD_INT 20
12862: PUSH
12863: LD_INT 1
12865: PUSH
12866: LD_INT 51
12868: PUSH
12869: LD_INT 52
12871: PUSH
12872: LD_INT 69
12874: PUSH
12875: LD_INT 39
12877: PUSH
12878: LD_INT 34
12880: PUSH
12881: LD_INT 40
12883: PUSH
12884: LD_INT 53
12886: PUSH
12887: LD_INT 71
12889: PUSH
12890: LD_INT 57
12892: PUSH
12893: LD_INT 58
12895: PUSH
12896: LD_INT 44
12898: PUSH
12899: LD_INT 32
12901: PUSH
12902: LD_INT 27
12904: PUSH
12905: LD_INT 23
12907: PUSH
12908: LD_INT 33
12910: PUSH
12911: LD_INT 59
12913: PUSH
12914: LD_INT 54
12916: PUSH
12917: LD_INT 55
12919: PUSH
12920: LD_INT 56
12922: PUSH
12923: LD_INT 63
12925: PUSH
12926: LD_INT 64
12928: PUSH
12929: LD_INT 65
12931: PUSH
12932: LD_INT 30
12934: PUSH
12935: LD_INT 31
12937: PUSH
12938: LD_INT 21
12940: PUSH
12941: LD_INT 22
12943: PUSH
12944: LD_INT 25
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: ST_TO_ADDR
// for i := 1 to list do
12981: LD_ADDR_VAR 0 5
12985: PUSH
12986: DOUBLE
12987: LD_INT 1
12989: DEC
12990: ST_TO_ADDR
12991: LD_VAR 0 6
12995: PUSH
12996: FOR_TO
12997: IFFALSE 13069
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
12999: LD_VAR 0 6
13003: PUSH
13004: LD_VAR 0 5
13008: ARRAY
13009: PPUSH
13010: LD_VAR 0 1
13014: PPUSH
13015: CALL_OW 321
13019: PUSH
13020: LD_INT 1
13022: EQUAL
13023: PUSH
13024: LD_VAR 0 6
13028: PUSH
13029: LD_VAR 0 5
13033: ARRAY
13034: PPUSH
13035: LD_VAR 0 3
13039: PPUSH
13040: CALL_OW 482
13044: AND
13045: IFFALSE 13067
// AddComResearch ( lab , list [ i ] ) ;
13047: LD_VAR 0 2
13051: PPUSH
13052: LD_VAR 0 6
13056: PUSH
13057: LD_VAR 0 5
13061: ARRAY
13062: PPUSH
13063: CALL_OW 184
13067: GO 12996
13069: POP
13070: POP
// end ;
13071: LD_VAR 0 4
13075: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13076: LD_INT 0
13078: PPUSH
13079: PPUSH
13080: PPUSH
13081: PPUSH
13082: PPUSH
13083: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13084: LD_ADDR_VAR 0 8
13088: PUSH
13089: LD_VAR 0 2
13093: PPUSH
13094: CALL_OW 313
13098: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13099: LD_ADDR_VAR 0 9
13103: PUSH
13104: LD_VAR 0 3
13108: PPUSH
13109: LD_INT 22
13111: PUSH
13112: LD_VAR 0 1
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PUSH
13121: LD_INT 25
13123: PUSH
13124: LD_INT 2
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: PUSH
13131: LD_INT 24
13133: PUSH
13134: LD_INT 750
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: PUSH
13141: LD_INT 3
13143: PUSH
13144: LD_INT 54
13146: PUSH
13147: EMPTY
13148: LIST
13149: PUSH
13150: EMPTY
13151: LIST
13152: LIST
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PPUSH
13160: CALL_OW 70
13164: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13165: LD_ADDR_VAR 0 6
13169: PUSH
13170: LD_VAR 0 3
13174: PPUSH
13175: LD_INT 22
13177: PUSH
13178: LD_VAR 0 1
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 21
13189: PUSH
13190: LD_INT 3
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: PUSH
13197: LD_INT 3
13199: PUSH
13200: LD_INT 24
13202: PUSH
13203: LD_INT 1000
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: EMPTY
13211: LIST
13212: LIST
13213: PUSH
13214: EMPTY
13215: LIST
13216: LIST
13217: LIST
13218: PUSH
13219: EMPTY
13220: LIST
13221: PPUSH
13222: CALL_OW 70
13226: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13227: LD_VAR 0 6
13231: NOT
13232: PUSH
13233: LD_INT 22
13235: PUSH
13236: LD_VAR 0 1
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: LD_INT 25
13247: PUSH
13248: LD_INT 2
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 24
13257: PUSH
13258: LD_INT 250
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: PUSH
13265: EMPTY
13266: LIST
13267: LIST
13268: LIST
13269: PPUSH
13270: CALL_OW 69
13274: NOT
13275: AND
13276: IFFALSE 13280
// exit ;
13278: GO 13438
// if buildingsList and engineerOkInside then
13280: LD_VAR 0 6
13284: PUSH
13285: LD_VAR 0 8
13289: AND
13290: IFFALSE 13301
// ComExitBuilding ( engineerOkInside ) ;
13292: LD_VAR 0 8
13296: PPUSH
13297: CALL_OW 122
// if buildingsList and engineerOkOutside then
13301: LD_VAR 0 6
13305: PUSH
13306: LD_VAR 0 9
13310: AND
13311: IFFALSE 13331
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13313: LD_VAR 0 9
13317: PPUSH
13318: LD_VAR 0 6
13322: PUSH
13323: LD_INT 1
13325: ARRAY
13326: PPUSH
13327: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13331: LD_VAR 0 6
13335: PUSH
13336: LD_INT 0
13338: EQUAL
13339: PUSH
13340: LD_VAR 0 4
13344: PUSH
13345: LD_INT 0
13347: EQUAL
13348: AND
13349: PUSH
13350: LD_VAR 0 9
13354: AND
13355: IFFALSE 13371
// ComEnterUnit ( engineerOkOutside , depot ) ;
13357: LD_VAR 0 9
13361: PPUSH
13362: LD_VAR 0 2
13366: PPUSH
13367: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13371: LD_VAR 0 9
13375: PUSH
13376: LD_VAR 0 6
13380: PUSH
13381: LD_INT 0
13383: EQUAL
13384: AND
13385: PUSH
13386: LD_VAR 0 4
13390: AND
13391: IFFALSE 13438
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13393: LD_VAR 0 9
13397: PPUSH
13398: LD_VAR 0 4
13402: PUSH
13403: LD_INT 1
13405: ARRAY
13406: PPUSH
13407: LD_VAR 0 4
13411: PUSH
13412: LD_INT 2
13414: ARRAY
13415: PPUSH
13416: LD_VAR 0 4
13420: PUSH
13421: LD_INT 3
13423: ARRAY
13424: PPUSH
13425: LD_VAR 0 4
13429: PUSH
13430: LD_INT 4
13432: ARRAY
13433: PPUSH
13434: CALL_OW 145
// end ;
13438: LD_VAR 0 5
13442: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13443: LD_INT 0
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
13449: PPUSH
13450: PPUSH
13451: PPUSH
13452: PPUSH
13453: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13454: LD_ADDR_VAR 0 6
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_VAR 0 1
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: PUSH
13471: LD_INT 25
13473: PUSH
13474: LD_INT 4
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: LD_INT 24
13483: PUSH
13484: LD_INT 251
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: PPUSH
13496: CALL_OW 69
13500: PUSH
13501: LD_EXP 27
13505: PUSH
13506: EMPTY
13507: LIST
13508: DIFF
13509: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13510: LD_ADDR_VAR 0 7
13514: PUSH
13515: LD_VAR 0 3
13519: PPUSH
13520: LD_INT 22
13522: PUSH
13523: LD_VAR 0 1
13527: PUSH
13528: EMPTY
13529: LIST
13530: LIST
13531: PUSH
13532: LD_INT 56
13534: PUSH
13535: EMPTY
13536: LIST
13537: PUSH
13538: LD_INT 25
13540: PUSH
13541: LD_INT 4
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: PUSH
13548: LD_INT 50
13550: PUSH
13551: EMPTY
13552: LIST
13553: PUSH
13554: EMPTY
13555: LIST
13556: LIST
13557: LIST
13558: LIST
13559: PPUSH
13560: CALL_OW 70
13564: PUSH
13565: LD_EXP 27
13569: PUSH
13570: EMPTY
13571: LIST
13572: DIFF
13573: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13574: LD_ADDR_VAR 0 10
13578: PUSH
13579: LD_VAR 0 3
13583: PPUSH
13584: LD_INT 22
13586: PUSH
13587: LD_VAR 0 1
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 21
13598: PUSH
13599: LD_INT 1
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 3
13608: PUSH
13609: LD_INT 24
13611: PUSH
13612: LD_INT 750
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: PUSH
13619: EMPTY
13620: LIST
13621: LIST
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: PPUSH
13628: CALL_OW 70
13632: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13633: LD_ADDR_VAR 0 11
13637: PUSH
13638: LD_VAR 0 2
13642: PPUSH
13643: LD_INT 22
13645: PUSH
13646: LD_VAR 0 1
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 21
13657: PUSH
13658: LD_INT 1
13660: PUSH
13661: EMPTY
13662: LIST
13663: LIST
13664: PUSH
13665: LD_INT 3
13667: PUSH
13668: LD_INT 24
13670: PUSH
13671: LD_INT 1000
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: PPUSH
13687: CALL_OW 70
13691: ST_TO_ADDR
// if damageUnits and sciList then
13692: LD_VAR 0 10
13696: PUSH
13697: LD_VAR 0 6
13701: AND
13702: IFFALSE 13718
// ComMoveToArea ( damageUnits , healArea ) ;
13704: LD_VAR 0 10
13708: PPUSH
13709: LD_VAR 0 2
13713: PPUSH
13714: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
13718: LD_VAR 0 11
13722: PUSH
13723: LD_VAR 0 6
13727: AND
13728: PUSH
13729: LD_VAR 0 7
13733: PUSH
13734: LD_INT 0
13736: EQUAL
13737: AND
13738: IFFALSE 13784
// for i in buildings do
13740: LD_ADDR_VAR 0 8
13744: PUSH
13745: LD_VAR 0 4
13749: PUSH
13750: FOR_IN
13751: IFFALSE 13782
// begin if UnitsInside ( i ) then
13753: LD_VAR 0 8
13757: PPUSH
13758: CALL_OW 313
13762: IFFALSE 13780
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
13764: LD_VAR 0 8
13768: PPUSH
13769: CALL_OW 313
13773: PPUSH
13774: CALL_OW 122
// break ;
13778: GO 13782
// end ; end ;
13780: GO 13750
13782: POP
13783: POP
// if unitsToHeal and sciListOutside then
13784: LD_VAR 0 11
13788: PUSH
13789: LD_VAR 0 7
13793: AND
13794: IFFALSE 13814
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
13796: LD_VAR 0 7
13800: PPUSH
13801: LD_VAR 0 11
13805: PUSH
13806: LD_INT 1
13808: ARRAY
13809: PPUSH
13810: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
13814: LD_VAR 0 10
13818: PUSH
13819: LD_INT 0
13821: EQUAL
13822: PUSH
13823: LD_VAR 0 11
13827: PUSH
13828: LD_INT 0
13830: EQUAL
13831: AND
13832: PUSH
13833: LD_VAR 0 7
13837: AND
13838: IFFALSE 13906
// begin tmp := buildings ;
13840: LD_ADDR_VAR 0 12
13844: PUSH
13845: LD_VAR 0 4
13849: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
13850: LD_ADDR_VAR 0 13
13854: PUSH
13855: LD_INT 1
13857: PPUSH
13858: LD_VAR 0 12
13862: PPUSH
13863: CALL_OW 12
13867: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13868: LD_VAR 0 7
13872: PPUSH
13873: LD_INT 3
13875: PUSH
13876: LD_INT 60
13878: PUSH
13879: EMPTY
13880: LIST
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PPUSH
13886: CALL_OW 72
13890: PPUSH
13891: LD_VAR 0 12
13895: PUSH
13896: LD_VAR 0 13
13900: ARRAY
13901: PPUSH
13902: CALL_OW 120
// end ; end ;
13906: LD_VAR 0 5
13910: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
13911: LD_INT 0
13913: PPUSH
13914: PPUSH
13915: PPUSH
13916: PPUSH
13917: PPUSH
13918: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
13919: LD_ADDR_VAR 0 7
13923: PUSH
13924: LD_VAR 0 2
13928: PPUSH
13929: LD_INT 22
13931: PUSH
13932: LD_VAR 0 1
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: PUSH
13941: LD_INT 21
13943: PUSH
13944: LD_INT 2
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: PUSH
13951: LD_INT 34
13953: PUSH
13954: LD_INT 52
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PUSH
13961: EMPTY
13962: LIST
13963: LIST
13964: LIST
13965: PPUSH
13966: CALL_OW 70
13970: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13971: LD_ADDR_VAR 0 8
13975: PUSH
13976: LD_VAR 0 2
13980: PPUSH
13981: LD_INT 22
13983: PUSH
13984: LD_VAR 0 1
13988: PUSH
13989: EMPTY
13990: LIST
13991: LIST
13992: PUSH
13993: LD_INT 21
13995: PUSH
13996: LD_INT 3
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 3
14005: PUSH
14006: LD_INT 24
14008: PUSH
14009: LD_INT 1000
14011: PUSH
14012: EMPTY
14013: LIST
14014: LIST
14015: PUSH
14016: EMPTY
14017: LIST
14018: LIST
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: LIST
14024: PUSH
14025: EMPTY
14026: LIST
14027: PPUSH
14028: CALL_OW 70
14032: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14033: LD_VAR 0 8
14037: PUSH
14038: LD_INT 0
14040: GREATER
14041: PUSH
14042: LD_VAR 0 7
14046: PPUSH
14047: LD_INT 24
14049: PUSH
14050: LD_INT 750
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PPUSH
14057: CALL_OW 72
14061: PUSH
14062: LD_INT 0
14064: GREATER
14065: AND
14066: IFFALSE 14086
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14068: LD_VAR 0 7
14072: PPUSH
14073: LD_VAR 0 8
14077: PUSH
14078: LD_INT 1
14080: ARRAY
14081: PPUSH
14082: CALL_OW 130
// end ;
14086: LD_VAR 0 3
14090: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14095: LD_INT 22
14097: PUSH
14098: LD_VAR 0 1
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 21
14109: PUSH
14110: LD_INT 2
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PPUSH
14121: CALL_OW 69
14125: PUSH
14126: LD_INT 18
14128: PPUSH
14129: LD_INT 22
14131: PUSH
14132: LD_VAR 0 1
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: PUSH
14141: LD_INT 21
14143: PUSH
14144: LD_INT 2
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PPUSH
14155: CALL_OW 70
14159: PUSH
14160: LD_VAR 0 3
14164: LESSEQUAL
14165: DIFF
14166: IFFALSE 14233
// for i := 1 to vehCount do
14168: LD_ADDR_VAR 0 9
14172: PUSH
14173: DOUBLE
14174: LD_INT 1
14176: DEC
14177: ST_TO_ADDR
14178: LD_VAR 0 3
14182: PUSH
14183: FOR_TO
14184: IFFALSE 14231
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14186: LD_VAR 0 2
14190: PPUSH
14191: LD_VAR 0 7
14195: PPUSH
14196: LD_VAR 0 5
14200: PPUSH
14201: LD_VAR 0 6
14205: PPUSH
14206: LD_VAR 0 4
14210: PUSH
14211: LD_INT 1
14213: PPUSH
14214: LD_VAR 0 4
14218: PPUSH
14219: CALL_OW 12
14223: ARRAY
14224: PPUSH
14225: CALL_OW 185
14229: GO 14183
14231: POP
14232: POP
// end ;
14233: LD_VAR 0 8
14237: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14238: LD_INT 0
14240: PPUSH
14241: PPUSH
14242: PPUSH
14243: PPUSH
14244: PPUSH
14245: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14246: LD_ADDR_VAR 0 6
14250: PUSH
14251: LD_INT 22
14253: PUSH
14254: LD_VAR 0 1
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: PUSH
14263: LD_INT 25
14265: PUSH
14266: LD_INT 9
14268: PUSH
14269: EMPTY
14270: LIST
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: PPUSH
14277: CALL_OW 69
14281: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14282: LD_ADDR_VAR 0 7
14286: PUSH
14287: LD_INT 81
14289: PUSH
14290: LD_VAR 0 1
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 3
14301: PUSH
14302: LD_INT 21
14304: PUSH
14305: LD_INT 3
14307: PUSH
14308: EMPTY
14309: LIST
14310: LIST
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: PUSH
14316: EMPTY
14317: LIST
14318: LIST
14319: PPUSH
14320: CALL_OW 69
14324: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14325: LD_ADDR_VAR 0 4
14329: PUSH
14330: LD_INT 1
14332: PPUSH
14333: LD_INT 3
14335: PPUSH
14336: CALL_OW 12
14340: ST_TO_ADDR
// for i := 1 to list do
14341: LD_ADDR_VAR 0 5
14345: PUSH
14346: DOUBLE
14347: LD_INT 1
14349: DEC
14350: ST_TO_ADDR
14351: LD_VAR 0 6
14355: PUSH
14356: FOR_TO
14357: IFFALSE 14559
// for ta in filter do
14359: LD_ADDR_VAR 0 3
14363: PUSH
14364: LD_VAR 0 7
14368: PUSH
14369: FOR_IN
14370: IFFALSE 14555
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14372: LD_VAR 0 6
14376: PUSH
14377: LD_VAR 0 5
14381: ARRAY
14382: PPUSH
14383: LD_VAR 0 3
14387: PPUSH
14388: CALL_OW 296
14392: PUSH
14393: LD_INT 15
14395: LESSEQUAL
14396: IFFALSE 14553
// begin case c of 1 :
14398: LD_VAR 0 4
14402: PUSH
14403: LD_INT 1
14405: DOUBLE
14406: EQUAL
14407: IFTRUE 14411
14409: GO 14449
14411: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14412: LD_VAR 0 6
14416: PUSH
14417: LD_VAR 0 5
14421: ARRAY
14422: PPUSH
14423: LD_VAR 0 3
14427: PPUSH
14428: CALL_OW 250
14432: PPUSH
14433: LD_VAR 0 3
14437: PPUSH
14438: CALL_OW 251
14442: PPUSH
14443: CALL_OW 154
14447: GO 14553
14449: LD_INT 2
14451: DOUBLE
14452: EQUAL
14453: IFTRUE 14457
14455: GO 14521
14457: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14458: LD_VAR 0 6
14462: PUSH
14463: LD_VAR 0 5
14467: ARRAY
14468: PPUSH
14469: LD_VAR 0 3
14473: PPUSH
14474: CALL_OW 250
14478: PUSH
14479: LD_INT 1
14481: NEG
14482: PPUSH
14483: LD_INT 1
14485: PPUSH
14486: CALL_OW 12
14490: PLUS
14491: PPUSH
14492: LD_VAR 0 3
14496: PPUSH
14497: CALL_OW 251
14501: PUSH
14502: LD_INT 1
14504: NEG
14505: PPUSH
14506: LD_INT 1
14508: PPUSH
14509: CALL_OW 12
14513: PLUS
14514: PPUSH
14515: CALL_OW 153
14519: GO 14553
14521: LD_INT 3
14523: DOUBLE
14524: EQUAL
14525: IFTRUE 14529
14527: GO 14552
14529: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14530: LD_VAR 0 6
14534: PUSH
14535: LD_VAR 0 5
14539: ARRAY
14540: PPUSH
14541: LD_VAR 0 3
14545: PPUSH
14546: CALL_OW 115
14550: GO 14553
14552: POP
// end ; end ;
14553: GO 14369
14555: POP
14556: POP
14557: GO 14356
14559: POP
14560: POP
// end ;
14561: LD_VAR 0 2
14565: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14566: LD_INT 0
14568: PPUSH
14569: PPUSH
14570: PPUSH
14571: PPUSH
// r := 100 ;
14572: LD_ADDR_VAR 0 5
14576: PUSH
14577: LD_INT 100
14579: ST_TO_ADDR
// x := 0 ;
14580: LD_ADDR_VAR 0 6
14584: PUSH
14585: LD_INT 0
14587: ST_TO_ADDR
// while ( x < n ) do
14588: LD_VAR 0 6
14592: PUSH
14593: LD_VAR 0 2
14597: LESS
14598: IFFALSE 14861
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
14600: LD_ADDR_VAR 0 4
14604: PUSH
14605: DOUBLE
14606: LD_INT 1
14608: DEC
14609: ST_TO_ADDR
14610: LD_VAR 0 1
14614: PPUSH
14615: LD_INT 0
14617: PPUSH
14618: CALL_OW 517
14622: PUSH
14623: LD_INT 1
14625: ARRAY
14626: PUSH
14627: FOR_TO
14628: IFFALSE 14857
// begin if r > 50 then
14630: LD_VAR 0 5
14634: PUSH
14635: LD_INT 50
14637: GREATER
14638: IFFALSE 14841
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
14640: LD_VAR 0 1
14644: PPUSH
14645: LD_INT 0
14647: PPUSH
14648: CALL_OW 517
14652: PUSH
14653: LD_INT 1
14655: ARRAY
14656: PUSH
14657: LD_VAR 0 4
14661: ARRAY
14662: PPUSH
14663: LD_VAR 0 1
14667: PPUSH
14668: LD_INT 0
14670: PPUSH
14671: CALL_OW 517
14675: PUSH
14676: LD_INT 2
14678: ARRAY
14679: PUSH
14680: LD_VAR 0 4
14684: ARRAY
14685: PPUSH
14686: CALL_OW 458
14690: NOT
14691: IFFALSE 14839
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
14693: LD_VAR 0 1
14697: PPUSH
14698: LD_INT 0
14700: PPUSH
14701: CALL_OW 517
14705: PUSH
14706: LD_INT 1
14708: ARRAY
14709: PUSH
14710: LD_VAR 0 4
14714: ARRAY
14715: PPUSH
14716: LD_VAR 0 1
14720: PPUSH
14721: LD_INT 0
14723: PPUSH
14724: CALL_OW 517
14728: PUSH
14729: LD_INT 2
14731: ARRAY
14732: PUSH
14733: LD_VAR 0 4
14737: ARRAY
14738: PPUSH
14739: LD_INT 8
14741: PPUSH
14742: LD_INT 0
14744: PPUSH
14745: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
14749: LD_ADDR_EXP 37
14753: PUSH
14754: LD_EXP 37
14758: PPUSH
14759: LD_INT 1
14761: PPUSH
14762: LD_VAR 0 1
14766: PPUSH
14767: LD_INT 0
14769: PPUSH
14770: CALL_OW 517
14774: PUSH
14775: LD_INT 1
14777: ARRAY
14778: PUSH
14779: LD_VAR 0 4
14783: ARRAY
14784: PUSH
14785: LD_VAR 0 1
14789: PPUSH
14790: LD_INT 0
14792: PPUSH
14793: CALL_OW 517
14797: PUSH
14798: LD_INT 2
14800: ARRAY
14801: PUSH
14802: LD_VAR 0 4
14806: ARRAY
14807: PUSH
14808: EMPTY
14809: LIST
14810: LIST
14811: PPUSH
14812: CALL_OW 2
14816: ST_TO_ADDR
// r := 0 ;
14817: LD_ADDR_VAR 0 5
14821: PUSH
14822: LD_INT 0
14824: ST_TO_ADDR
// x := x + 1 ;
14825: LD_ADDR_VAR 0 6
14829: PUSH
14830: LD_VAR 0 6
14834: PUSH
14835: LD_INT 1
14837: PLUS
14838: ST_TO_ADDR
// end end else
14839: GO 14855
// r := r + 35 ;
14841: LD_ADDR_VAR 0 5
14845: PUSH
14846: LD_VAR 0 5
14850: PUSH
14851: LD_INT 35
14853: PLUS
14854: ST_TO_ADDR
// end end ;
14855: GO 14627
14857: POP
14858: POP
14859: GO 14588
14861: LD_VAR 0 3
14865: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
14866: LD_INT 0
14868: PPUSH
14869: PPUSH
14870: PPUSH
14871: PPUSH
14872: PPUSH
// tmp := [ ] ;
14873: LD_ADDR_VAR 0 6
14877: PUSH
14878: EMPTY
14879: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
14880: LD_ADDR_VAR 0 7
14884: PUSH
14885: LD_INT 22
14887: PUSH
14888: LD_VAR 0 1
14892: PUSH
14893: EMPTY
14894: LIST
14895: LIST
14896: PUSH
14897: LD_INT 30
14899: PUSH
14900: LD_INT 32
14902: PUSH
14903: EMPTY
14904: LIST
14905: LIST
14906: PUSH
14907: EMPTY
14908: LIST
14909: LIST
14910: PPUSH
14911: CALL_OW 69
14915: ST_TO_ADDR
// if bunkers then
14916: LD_VAR 0 7
14920: IFFALSE 14990
// for i in bunkers do
14922: LD_ADDR_VAR 0 4
14926: PUSH
14927: LD_VAR 0 7
14931: PUSH
14932: FOR_IN
14933: IFFALSE 14988
// for j in UnitsInside ( i ) do
14935: LD_ADDR_VAR 0 5
14939: PUSH
14940: LD_VAR 0 4
14944: PPUSH
14945: CALL_OW 313
14949: PUSH
14950: FOR_IN
14951: IFFALSE 14984
// tmp := Replace ( tmp , tmp + 1 , j ) ;
14953: LD_ADDR_VAR 0 6
14957: PUSH
14958: LD_VAR 0 6
14962: PPUSH
14963: LD_VAR 0 6
14967: PUSH
14968: LD_INT 1
14970: PLUS
14971: PPUSH
14972: LD_VAR 0 5
14976: PPUSH
14977: CALL_OW 1
14981: ST_TO_ADDR
14982: GO 14950
14984: POP
14985: POP
14986: GO 14932
14988: POP
14989: POP
// if tmp then
14990: LD_VAR 0 6
14994: IFFALSE 15034
// begin ComExitBuilding ( tmp ) ;
14996: LD_VAR 0 6
15000: PPUSH
15001: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15005: LD_VAR 0 6
15009: PPUSH
15010: LD_VAR 0 2
15014: PPUSH
15015: CALL_OW 250
15019: PPUSH
15020: LD_VAR 0 2
15024: PPUSH
15025: CALL_OW 251
15029: PPUSH
15030: CALL_OW 174
// end ; end ;
15034: LD_VAR 0 3
15038: RET
// export function CreateNature ; var i , un ; begin
15039: LD_INT 0
15041: PPUSH
15042: PPUSH
15043: PPUSH
// uc_side := 0 ;
15044: LD_ADDR_OWVAR 20
15048: PUSH
15049: LD_INT 0
15051: ST_TO_ADDR
// uc_nation := 0 ;
15052: LD_ADDR_OWVAR 21
15056: PUSH
15057: LD_INT 0
15059: ST_TO_ADDR
// InitHc ;
15060: CALL_OW 19
// hc_class := class_fish ;
15064: LD_ADDR_OWVAR 28
15068: PUSH
15069: LD_INT 20
15071: ST_TO_ADDR
// for i := 1 to 6 do
15072: LD_ADDR_VAR 0 2
15076: PUSH
15077: DOUBLE
15078: LD_INT 1
15080: DEC
15081: ST_TO_ADDR
15082: LD_INT 6
15084: PUSH
15085: FOR_TO
15086: IFFALSE 15105
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15088: CALL_OW 44
15092: PPUSH
15093: LD_INT 22
15095: PPUSH
15096: LD_INT 0
15098: PPUSH
15099: CALL_OW 49
15103: GO 15085
15105: POP
15106: POP
// for i := 1 to Difficulty + 2 do
15107: LD_ADDR_VAR 0 2
15111: PUSH
15112: DOUBLE
15113: LD_INT 1
15115: DEC
15116: ST_TO_ADDR
15117: LD_OWVAR 67
15121: PUSH
15122: LD_INT 2
15124: PLUS
15125: PUSH
15126: FOR_TO
15127: IFFALSE 15236
// begin hc_sex := sex_male ;
15129: LD_ADDR_OWVAR 27
15133: PUSH
15134: LD_INT 1
15136: ST_TO_ADDR
// uc_side := 0 ;
15137: LD_ADDR_OWVAR 20
15141: PUSH
15142: LD_INT 0
15144: ST_TO_ADDR
// uc_nation := nation_nature ;
15145: LD_ADDR_OWVAR 21
15149: PUSH
15150: LD_INT 0
15152: ST_TO_ADDR
// hc_class := class_tiger ;
15153: LD_ADDR_OWVAR 28
15157: PUSH
15158: LD_INT 14
15160: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15161: LD_ADDR_OWVAR 31
15165: PUSH
15166: LD_EXP 30
15170: PUSH
15171: LD_INT 0
15173: PUSH
15174: LD_INT 0
15176: PUSH
15177: LD_INT 0
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15186: LD_ADDR_OWVAR 35
15190: PUSH
15191: LD_INT 5
15193: NEG
15194: PPUSH
15195: LD_INT 5
15197: PPUSH
15198: CALL_OW 12
15202: PUSH
15203: LD_OWVAR 67
15207: MUL
15208: ST_TO_ADDR
// un := CreateHuman ;
15209: LD_ADDR_VAR 0 3
15213: PUSH
15214: CALL_OW 44
15218: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15219: LD_VAR 0 3
15223: PPUSH
15224: LD_INT 23
15226: PPUSH
15227: LD_INT 0
15229: PPUSH
15230: CALL_OW 49
// end ;
15234: GO 15126
15236: POP
15237: POP
// for i := 1 to rand ( 3 , 4 ) do
15238: LD_ADDR_VAR 0 2
15242: PUSH
15243: DOUBLE
15244: LD_INT 1
15246: DEC
15247: ST_TO_ADDR
15248: LD_INT 3
15250: PPUSH
15251: LD_INT 4
15253: PPUSH
15254: CALL_OW 12
15258: PUSH
15259: FOR_TO
15260: IFFALSE 15352
// begin hc_sex := sex_male ;
15262: LD_ADDR_OWVAR 27
15266: PUSH
15267: LD_INT 1
15269: ST_TO_ADDR
// uc_side := 0 ;
15270: LD_ADDR_OWVAR 20
15274: PUSH
15275: LD_INT 0
15277: ST_TO_ADDR
// uc_nation := nation_nature ;
15278: LD_ADDR_OWVAR 21
15282: PUSH
15283: LD_INT 0
15285: ST_TO_ADDR
// hc_class := 18 ;
15286: LD_ADDR_OWVAR 28
15290: PUSH
15291: LD_INT 18
15293: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15294: LD_ADDR_OWVAR 31
15298: PUSH
15299: LD_INT 0
15301: PUSH
15302: LD_INT 0
15304: PUSH
15305: LD_INT 0
15307: PUSH
15308: LD_INT 0
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: ST_TO_ADDR
// hc_agressivity := 0 ;
15317: LD_ADDR_OWVAR 35
15321: PUSH
15322: LD_INT 0
15324: ST_TO_ADDR
// un := CreateHuman ;
15325: LD_ADDR_VAR 0 3
15329: PUSH
15330: CALL_OW 44
15334: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15335: LD_VAR 0 3
15339: PPUSH
15340: LD_INT 23
15342: PPUSH
15343: LD_INT 0
15345: PPUSH
15346: CALL_OW 49
// end ;
15350: GO 15259
15352: POP
15353: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15354: LD_ADDR_VAR 0 2
15358: PUSH
15359: DOUBLE
15360: LD_INT 1
15362: DEC
15363: ST_TO_ADDR
15364: LD_INT 4
15366: PUSH
15367: LD_INT 3
15369: PUSH
15370: LD_INT 3
15372: PUSH
15373: LD_INT 3
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: PUSH
15382: LD_OWVAR 67
15386: ARRAY
15387: PUSH
15388: FOR_TO
15389: IFFALSE 15498
// begin hc_sex := sex_male ;
15391: LD_ADDR_OWVAR 27
15395: PUSH
15396: LD_INT 1
15398: ST_TO_ADDR
// uc_side := 0 ;
15399: LD_ADDR_OWVAR 20
15403: PUSH
15404: LD_INT 0
15406: ST_TO_ADDR
// uc_nation := nation_nature ;
15407: LD_ADDR_OWVAR 21
15411: PUSH
15412: LD_INT 0
15414: ST_TO_ADDR
// hc_class := class_apeman ;
15415: LD_ADDR_OWVAR 28
15419: PUSH
15420: LD_INT 12
15422: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15423: LD_ADDR_OWVAR 31
15427: PUSH
15428: LD_INT 0
15430: PPUSH
15431: LD_INT 2
15433: PPUSH
15434: CALL_OW 12
15438: PUSH
15439: LD_INT 0
15441: PUSH
15442: LD_INT 0
15444: PUSH
15445: LD_INT 0
15447: PUSH
15448: EMPTY
15449: LIST
15450: LIST
15451: LIST
15452: LIST
15453: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15454: LD_ADDR_OWVAR 35
15458: PUSH
15459: LD_INT 10
15461: NEG
15462: PPUSH
15463: LD_INT 10
15465: PPUSH
15466: CALL_OW 12
15470: ST_TO_ADDR
// un := CreateHuman ;
15471: LD_ADDR_VAR 0 3
15475: PUSH
15476: CALL_OW 44
15480: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15481: LD_VAR 0 3
15485: PPUSH
15486: LD_INT 26
15488: PPUSH
15489: LD_INT 0
15491: PPUSH
15492: CALL_OW 49
// end ;
15496: GO 15388
15498: POP
15499: POP
// end ; end_of_file
15500: LD_VAR 0 1
15504: RET
// on UnitDestroyed ( unit ) do var i ;
15505: LD_INT 0
15507: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15508: LD_VAR 0 1
15512: PPUSH
15513: CALL 34699 0 1
// if unit = JMM then
15517: LD_VAR 0 1
15521: PUSH
15522: LD_EXP 1
15526: EQUAL
15527: IFFALSE 15536
// YouLost ( JMM ) ;
15529: LD_STRING JMM
15531: PPUSH
15532: CALL_OW 104
// if unit in russianTanks then
15536: LD_VAR 0 1
15540: PUSH
15541: LD_EXP 32
15545: IN
15546: IFFALSE 15564
// russianTanks := russianTanks diff unit ;
15548: LD_ADDR_EXP 32
15552: PUSH
15553: LD_EXP 32
15557: PUSH
15558: LD_VAR 0 1
15562: DIFF
15563: ST_TO_ADDR
// if unit in russianTimeLapsers then
15564: LD_VAR 0 1
15568: PUSH
15569: LD_EXP 33
15573: IN
15574: IFFALSE 15592
// russianTimeLapsers := russianTimeLapsers diff unit ;
15576: LD_ADDR_EXP 33
15580: PUSH
15581: LD_EXP 33
15585: PUSH
15586: LD_VAR 0 1
15590: DIFF
15591: ST_TO_ADDR
// if unit in RuScientists then
15592: LD_VAR 0 1
15596: PUSH
15597: LD_EXP 27
15601: IN
15602: IFFALSE 15634
// begin RuScientists := RuScientists diff unit ;
15604: LD_ADDR_EXP 27
15608: PUSH
15609: LD_EXP 27
15613: PUSH
15614: LD_VAR 0 1
15618: DIFF
15619: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
15620: LD_ADDR_EXP 28
15624: PUSH
15625: LD_EXP 28
15629: PUSH
15630: LD_INT 1
15632: PLUS
15633: ST_TO_ADDR
// end ; end ;
15634: PPOPN 2
15636: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
15637: LD_VAR 0 3
15641: PPUSH
15642: CALL_OW 264
15646: PUSH
15647: LD_INT 9
15649: EQUAL
15650: IFFALSE 15666
// laserCounterDestroy := laserCounterDestroy + 1 ;
15652: LD_ADDR_EXP 43
15656: PUSH
15657: LD_EXP 43
15661: PUSH
15662: LD_INT 1
15664: PLUS
15665: ST_TO_ADDR
// end ;
15666: PPOPN 3
15668: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
15669: LD_VAR 0 2
15673: PUSH
15674: LD_INT 22
15676: PUSH
15677: LD_INT 6
15679: PUSH
15680: EMPTY
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: IN
15689: IFFALSE 15744
// begin if GetType ( human ) = unit_vehicle then
15691: LD_VAR 0 2
15695: PPUSH
15696: CALL_OW 247
15700: PUSH
15701: LD_INT 2
15703: EQUAL
15704: IFFALSE 15721
// human := IsDrivenBy ( human ) ;
15706: LD_ADDR_VAR 0 2
15710: PUSH
15711: LD_VAR 0 2
15715: PPUSH
15716: CALL_OW 311
15720: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
15721: LD_VAR 0 2
15725: PPUSH
15726: LD_VAR 0 2
15730: PPUSH
15731: CALL_OW 110
15735: PUSH
15736: LD_INT 10
15738: PLUS
15739: PPUSH
15740: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
15744: LD_VAR 0 2
15748: PPUSH
15749: CALL_OW 255
15753: PUSH
15754: LD_INT 1
15756: EQUAL
15757: PUSH
15758: LD_EXP 40
15762: PUSH
15763: LD_INT 0
15765: EQUAL
15766: AND
15767: IFFALSE 15879
// begin eventVar1 = 1 ;
15769: LD_ADDR_EXP 40
15773: PUSH
15774: LD_INT 1
15776: ST_TO_ADDR
// teleportExplored = 1 ;
15777: LD_ADDR_EXP 26
15781: PUSH
15782: LD_INT 1
15784: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
15785: LD_STRING M2a
15787: PPUSH
15788: CALL_OW 337
// wait ( 0 0$2 ) ;
15792: LD_INT 70
15794: PPUSH
15795: CALL_OW 67
// DialogueOn ;
15799: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
15803: LD_INT 22
15805: PUSH
15806: LD_INT 1
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 21
15815: PUSH
15816: LD_INT 1
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: PPUSH
15827: CALL_OW 69
15831: PPUSH
15832: LD_STRING DT3a-Sol1-1
15834: PPUSH
15835: LD_STRING DT3a-FSol1-1
15837: PPUSH
15838: CALL 12226 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
15842: LD_EXP 1
15846: PPUSH
15847: LD_STRING DT3a-JMM-1
15849: PPUSH
15850: CALL_OW 88
// CenterNowOnUnits ( human ) ;
15854: LD_VAR 0 2
15858: PPUSH
15859: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
15863: LD_EXP 1
15867: PPUSH
15868: LD_STRING DT3a-JMM-1a
15870: PPUSH
15871: CALL_OW 88
// DialogueOff ;
15875: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
15879: LD_VAR 0 1
15883: PUSH
15884: LD_INT 10
15886: EQUAL
15887: PUSH
15888: LD_VAR 0 2
15892: PPUSH
15893: CALL_OW 247
15897: PUSH
15898: LD_INT 2
15900: EQUAL
15901: AND
15902: PUSH
15903: LD_VAR 0 2
15907: PPUSH
15908: CALL_OW 255
15912: PUSH
15913: LD_INT 3
15915: EQUAL
15916: AND
15917: IFFALSE 15983
// begin if vehicleTeleported = 0 then
15919: LD_EXP 21
15923: PUSH
15924: LD_INT 0
15926: EQUAL
15927: IFFALSE 15944
// begin wait ( 0 0$03 ) ;
15929: LD_INT 105
15931: PPUSH
15932: CALL_OW 67
// vehicleTeleported := 1 ;
15936: LD_ADDR_EXP 21
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
15944: LD_EXP 21
15948: PUSH
15949: LD_INT 2
15951: EQUAL
15952: IFFALSE 15969
// begin wait ( 0 0$03 ) ;
15954: LD_INT 105
15956: PPUSH
15957: CALL_OW 67
// vehicleTeleported := 3 ;
15961: LD_ADDR_EXP 21
15965: PUSH
15966: LD_INT 3
15968: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
15969: LD_ADDR_EXP 22
15973: PUSH
15974: LD_EXP 22
15978: PUSH
15979: LD_INT 1
15981: PLUS
15982: ST_TO_ADDR
// end ; end ;
15983: PPOPN 2
15985: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
15986: LD_VAR 0 1
15990: PPUSH
15991: LD_VAR 0 2
15995: PPUSH
15996: CALL 34819 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16000: LD_VAR 0 1
16004: PPUSH
16005: CALL_OW 264
16009: PUSH
16010: LD_INT 7
16012: EQUAL
16013: IFFALSE 16023
// rocketBuilded := true ;
16015: LD_ADDR_EXP 44
16019: PUSH
16020: LD_INT 1
16022: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16023: LD_VAR 0 1
16027: PPUSH
16028: CALL_OW 255
16032: PUSH
16033: LD_INT 3
16035: NONEQUAL
16036: IFFALSE 16040
// exit ;
16038: GO 16157
// if factory in [ ru_fact , rufab2 ] then
16040: LD_VAR 0 2
16044: PUSH
16045: LD_INT 21
16047: PUSH
16048: LD_INT 112
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: IN
16055: IFFALSE 16157
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16057: LD_VAR 0 1
16061: PPUSH
16062: CALL_OW 264
16066: PUSH
16067: LD_INT 49
16069: EQUAL
16070: IFFALSE 16106
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16072: LD_ADDR_EXP 33
16076: PUSH
16077: LD_EXP 33
16081: PPUSH
16082: LD_VAR 0 1
16086: PPUSH
16087: CALL 76456 0 2
16091: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16092: LD_VAR 0 1
16096: PPUSH
16097: LD_INT 137
16099: PPUSH
16100: CALL_OW 120
// end else
16104: GO 16157
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16106: LD_VAR 0 1
16110: PPUSH
16111: CALL_OW 264
16115: PUSH
16116: LD_INT 51
16118: PUSH
16119: LD_INT 89
16121: PUSH
16122: LD_INT 52
16124: PUSH
16125: LD_INT 53
16127: PUSH
16128: EMPTY
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: IN
16134: NOT
16135: IFFALSE 16157
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16137: LD_ADDR_EXP 32
16141: PUSH
16142: LD_EXP 32
16146: PPUSH
16147: LD_VAR 0 1
16151: PPUSH
16152: CALL 76456 0 2
16156: ST_TO_ADDR
// end ; end ; end ;
16157: PPOPN 2
16159: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16160: LD_INT 0
16162: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16163: LD_VAR 0 2
16167: PPUSH
16168: CALL_OW 255
16172: PUSH
16173: LD_INT 3
16175: EQUAL
16176: PUSH
16177: LD_VAR 0 2
16181: PPUSH
16182: CALL_OW 257
16186: PUSH
16187: LD_INT 3
16189: EQUAL
16190: AND
16191: PUSH
16192: LD_INT 21
16194: PPUSH
16195: CALL_OW 255
16199: PUSH
16200: LD_INT 3
16202: EQUAL
16203: AND
16204: PUSH
16205: LD_INT 21
16207: PPUSH
16208: CALL_OW 302
16212: AND
16213: IFFALSE 16227
// ComEnterUnit ( human , ru_fact ) ;
16215: LD_VAR 0 2
16219: PPUSH
16220: LD_INT 21
16222: PPUSH
16223: CALL_OW 120
// end ;
16227: PPOPN 3
16229: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16230: LD_VAR 0 1
16234: PPUSH
16235: CALL 34803 0 1
// end ; end_of_file
16239: PPOPN 1
16241: END
// every 0 0$1 trigger ruAI = 1 do
16242: LD_EXP 34
16246: PUSH
16247: LD_INT 1
16249: EQUAL
16250: IFFALSE 16362
16252: GO 16254
16254: DISABLE
// begin enable ;
16255: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16256: LD_INT 3
16258: PPUSH
16259: LD_INT 6
16261: PPUSH
16262: LD_INT 9
16264: PPUSH
16265: LD_EXP 31
16269: PPUSH
16270: CALL 13076 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16274: LD_INT 3
16276: PPUSH
16277: LD_INT 4
16279: PPUSH
16280: LD_INT 10
16282: PPUSH
16283: LD_EXP 31
16287: PPUSH
16288: CALL 13076 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16292: LD_INT 3
16294: PPUSH
16295: LD_INT 9
16297: PPUSH
16298: CALL 13911 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16302: LD_INT 3
16304: PPUSH
16305: LD_INT 10
16307: PPUSH
16308: CALL 13911 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16312: LD_INT 3
16314: PPUSH
16315: LD_INT 16
16317: PPUSH
16318: LD_INT 9
16320: PPUSH
16321: LD_INT 91
16323: PPUSH
16324: CALL 13443 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16328: LD_INT 3
16330: PPUSH
16331: LD_INT 17
16333: PPUSH
16334: LD_INT 10
16336: PPUSH
16337: LD_INT 47
16339: PUSH
16340: LD_INT 129
16342: PUSH
16343: LD_INT 135
16345: PUSH
16346: EMPTY
16347: LIST
16348: LIST
16349: LIST
16350: PPUSH
16351: CALL 13443 0 4
// IntBazooka ( 3 ) ;
16355: LD_INT 3
16357: PPUSH
16358: CALL 14238 0 1
// end ;
16362: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p ;
16363: LD_EXP 32
16367: PUSH
16368: LD_INT 3
16370: PUSH
16371: LD_INT 4
16373: PUSH
16374: LD_INT 5
16376: PUSH
16377: LD_INT 6
16379: PUSH
16380: EMPTY
16381: LIST
16382: LIST
16383: LIST
16384: LIST
16385: PUSH
16386: LD_OWVAR 67
16390: ARRAY
16391: GREATEREQUAL
16392: IFFALSE 16671
16394: GO 16396
16396: DISABLE
16397: LD_INT 0
16399: PPUSH
16400: PPUSH
16401: PPUSH
// begin enable ;
16402: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16403: LD_ADDR_VAR 0 2
16407: PUSH
16408: LD_EXP 32
16412: PUSH
16413: LD_EXP 33
16417: UNION
16418: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16419: LD_ADDR_EXP 32
16423: PUSH
16424: LD_EXP 32
16428: PUSH
16429: LD_VAR 0 2
16433: DIFF
16434: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16435: LD_ADDR_EXP 33
16439: PUSH
16440: LD_EXP 33
16444: PUSH
16445: LD_VAR 0 2
16449: DIFF
16450: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16451: LD_EXP 21
16455: PUSH
16456: LD_INT 4
16458: GREATEREQUAL
16459: IFFALSE 16477
// attackTactic := rand ( 1 , 2 ) ;
16461: LD_ADDR_EXP 36
16465: PUSH
16466: LD_INT 1
16468: PPUSH
16469: LD_INT 2
16471: PPUSH
16472: CALL_OW 12
16476: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16477: LD_INT 10
16479: PPUSH
16480: CALL_OW 302
16484: IFFALSE 16593
// begin for i in tmp do
16486: LD_ADDR_VAR 0 1
16490: PUSH
16491: LD_VAR 0 2
16495: PUSH
16496: FOR_IN
16497: IFFALSE 16540
// if attackTactic < 2 then
16499: LD_EXP 36
16503: PUSH
16504: LD_INT 2
16506: LESS
16507: IFFALSE 16523
// ComEnterUnit ( i , ruteleprt ) else
16509: LD_VAR 0 1
16513: PPUSH
16514: LD_INT 10
16516: PPUSH
16517: CALL_OW 120
16521: GO 16538
// ComMoveXY ( i , 88 , 69 ) ;
16523: LD_VAR 0 1
16527: PPUSH
16528: LD_INT 88
16530: PPUSH
16531: LD_INT 69
16533: PPUSH
16534: CALL_OW 111
16538: GO 16496
16540: POP
16541: POP
// p := 0 ;
16542: LD_ADDR_VAR 0 3
16546: PUSH
16547: LD_INT 0
16549: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
16550: LD_INT 70
16552: PPUSH
16553: CALL_OW 67
// p := 2 ;
16557: LD_ADDR_VAR 0 3
16561: PUSH
16562: LD_INT 2
16564: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
16565: LD_VAR 0 2
16569: PPUSH
16570: LD_INT 60
16572: PUSH
16573: EMPTY
16574: LIST
16575: PPUSH
16576: CALL_OW 72
16580: NOT
16581: PUSH
16582: LD_VAR 0 3
16586: PUSH
16587: LD_INT 30
16589: GREATER
16590: OR
16591: IFFALSE 16550
// end ; repeat wait ( 0 0$1 ) ;
16593: LD_INT 35
16595: PPUSH
16596: CALL_OW 67
// for i in tmp do
16600: LD_ADDR_VAR 0 1
16604: PUSH
16605: LD_VAR 0 2
16609: PUSH
16610: FOR_IN
16611: IFFALSE 16643
// if not IsOk ( i ) then
16613: LD_VAR 0 1
16617: PPUSH
16618: CALL_OW 302
16622: NOT
16623: IFFALSE 16641
// tmp := tmp diff i ;
16625: LD_ADDR_VAR 0 2
16629: PUSH
16630: LD_VAR 0 2
16634: PUSH
16635: LD_VAR 0 1
16639: DIFF
16640: ST_TO_ADDR
16641: GO 16610
16643: POP
16644: POP
// AgressiveMove ( tmp , [ 140 , 112 ] ) ;
16645: LD_VAR 0 2
16649: PPUSH
16650: LD_INT 140
16652: PUSH
16653: LD_INT 112
16655: PUSH
16656: EMPTY
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL 79060 0 2
// until not tmp ;
16664: LD_VAR 0 2
16668: NOT
16669: IFFALSE 16593
// end ;
16671: PPOPN 3
16673: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
16674: LD_INT 4
16676: PPUSH
16677: CALL_OW 303
16681: IFFALSE 16696
16683: GO 16685
16685: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
16686: LD_INT 3
16688: PPUSH
16689: LD_INT 4
16691: PPUSH
16692: CALL 14866 0 2
16696: END
// every 0 0$1 do
16697: GO 16699
16699: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
16700: LD_INT 3
16702: PPUSH
16703: LD_INT 91
16705: PPUSH
16706: LD_INT 3
16708: PPUSH
16709: CALL 12841 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
16713: LD_INT 3
16715: PPUSH
16716: LD_INT 47
16718: PPUSH
16719: LD_INT 3
16721: PPUSH
16722: CALL 12841 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
16726: LD_INT 3
16728: PPUSH
16729: LD_INT 129
16731: PPUSH
16732: LD_INT 3
16734: PPUSH
16735: CALL 12841 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
16739: LD_INT 3
16741: PPUSH
16742: LD_INT 3
16744: PPUSH
16745: LD_INT 3
16747: PPUSH
16748: CALL 12841 0 3
// end ;
16752: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
16753: LD_INT 22
16755: PUSH
16756: LD_INT 1
16758: PUSH
16759: EMPTY
16760: LIST
16761: LIST
16762: PUSH
16763: LD_INT 21
16765: PUSH
16766: LD_INT 3
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: PPUSH
16777: CALL_OW 69
16781: IFFALSE 16850
16783: GO 16785
16785: DISABLE
// begin wait ( 0 0$40 ) ;
16786: LD_INT 1400
16788: PPUSH
16789: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16793: LD_INT 3
16795: PPUSH
16796: LD_INT 21
16798: PPUSH
16799: LD_INT 3
16801: PUSH
16802: LD_INT 4
16804: PUSH
16805: LD_INT 5
16807: PUSH
16808: LD_INT 6
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: PUSH
16817: LD_OWVAR 67
16821: ARRAY
16822: PPUSH
16823: LD_INT 46
16825: PUSH
16826: LD_INT 45
16828: PUSH
16829: LD_INT 44
16831: PUSH
16832: EMPTY
16833: LIST
16834: LIST
16835: LIST
16836: PPUSH
16837: LD_INT 3
16839: PPUSH
16840: LD_INT 3
16842: PPUSH
16843: LD_INT 24
16845: PPUSH
16846: CALL 14091 0 7
// end ;
16850: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
16851: LD_EXP 20
16855: PUSH
16856: LD_INT 2
16858: EQUAL
16859: PUSH
16860: LD_INT 21
16862: PPUSH
16863: CALL_OW 255
16867: PUSH
16868: LD_INT 3
16870: EQUAL
16871: AND
16872: PUSH
16873: LD_INT 112
16875: PPUSH
16876: CALL_OW 255
16880: PUSH
16881: LD_INT 3
16883: EQUAL
16884: AND
16885: PUSH
16886: LD_INT 21
16888: PPUSH
16889: CALL_OW 302
16893: AND
16894: PUSH
16895: LD_INT 112
16897: PPUSH
16898: CALL_OW 302
16902: AND
16903: PUSH
16904: LD_INT 22
16906: PUSH
16907: LD_INT 3
16909: PUSH
16910: EMPTY
16911: LIST
16912: LIST
16913: PUSH
16914: LD_INT 21
16916: PUSH
16917: LD_INT 2
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: PUSH
16924: LD_INT 50
16926: PUSH
16927: EMPTY
16928: LIST
16929: PUSH
16930: LD_INT 3
16932: PUSH
16933: LD_INT 58
16935: PUSH
16936: EMPTY
16937: LIST
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: PPUSH
16949: CALL_OW 69
16953: PUSH
16954: LD_INT 18
16956: PPUSH
16957: LD_INT 22
16959: PUSH
16960: LD_INT 3
16962: PUSH
16963: EMPTY
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 21
16969: PUSH
16970: LD_INT 2
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: EMPTY
16978: LIST
16979: LIST
16980: PPUSH
16981: CALL_OW 70
16985: PUSH
16986: LD_INT 0
16988: EQUAL
16989: DIFF
16990: AND
16991: IFFALSE 17117
16993: GO 16995
16995: DISABLE
// begin enable ;
16996: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
16997: LD_INT 3
16999: PPUSH
17000: LD_INT 21
17002: PPUSH
17003: LD_INT 3
17005: PUSH
17006: LD_INT 4
17008: PUSH
17009: LD_INT 5
17011: PUSH
17012: LD_INT 6
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: PUSH
17021: LD_OWVAR 67
17025: ARRAY
17026: PPUSH
17027: LD_INT 46
17029: PUSH
17030: LD_INT 45
17032: PUSH
17033: LD_INT 44
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: PPUSH
17041: LD_INT 3
17043: PPUSH
17044: LD_INT 3
17046: PPUSH
17047: LD_INT 24
17049: PPUSH
17050: CALL 14091 0 7
// if russianTimeLapsers = 0 then
17054: LD_EXP 33
17058: PUSH
17059: LD_INT 0
17061: EQUAL
17062: IFFALSE 17117
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17064: LD_INT 3
17066: PPUSH
17067: LD_INT 112
17069: PPUSH
17070: LD_INT 1
17072: PUSH
17073: LD_INT 2
17075: PUSH
17076: LD_INT 2
17078: PUSH
17079: LD_INT 2
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: PUSH
17088: LD_OWVAR 67
17092: ARRAY
17093: PPUSH
17094: LD_INT 49
17096: PUSH
17097: LD_INT 49
17099: PUSH
17100: EMPTY
17101: LIST
17102: LIST
17103: PPUSH
17104: LD_INT 3
17106: PPUSH
17107: LD_INT 3
17109: PPUSH
17110: LD_INT 24
17112: PPUSH
17113: CALL 14091 0 7
// end ;
17117: END
// every 0 0$1 trigger arabianMines do var i ;
17118: LD_EXP 37
17122: IFFALSE 17243
17124: GO 17126
17126: DISABLE
17127: LD_INT 0
17129: PPUSH
// begin enable ;
17130: ENABLE
// for i in arabianMines do
17131: LD_ADDR_VAR 0 1
17135: PUSH
17136: LD_EXP 37
17140: PUSH
17141: FOR_IN
17142: IFFALSE 17241
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17144: LD_INT 22
17146: PUSH
17147: LD_INT 1
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: PUSH
17154: LD_INT 92
17156: PUSH
17157: LD_VAR 0 1
17161: PUSH
17162: LD_INT 1
17164: ARRAY
17165: PUSH
17166: LD_VAR 0 1
17170: PUSH
17171: LD_INT 2
17173: ARRAY
17174: PUSH
17175: LD_INT 3
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PPUSH
17188: CALL_OW 69
17192: IFFALSE 17239
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17194: LD_VAR 0 1
17198: PUSH
17199: LD_INT 1
17201: ARRAY
17202: PPUSH
17203: LD_VAR 0 1
17207: PUSH
17208: LD_INT 2
17210: ARRAY
17211: PPUSH
17212: LD_INT 5
17214: PPUSH
17215: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17219: LD_ADDR_EXP 37
17223: PUSH
17224: LD_EXP 37
17228: PPUSH
17229: LD_VAR 0 1
17233: PPUSH
17234: CALL_OW 3
17238: ST_TO_ADDR
// end ; end ;
17239: GO 17141
17241: POP
17242: POP
// end ;
17243: PPOPN 1
17245: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17246: LD_EXP 21
17250: PUSH
17251: LD_INT 4
17253: GREATEREQUAL
17254: PUSH
17255: LD_EXP 22
17259: PUSH
17260: LD_INT 12
17262: MOD
17263: PUSH
17264: LD_INT 0
17266: EQUAL
17267: AND
17268: IFFALSE 17382
17270: GO 17272
17272: DISABLE
17273: LD_INT 0
17275: PPUSH
17276: PPUSH
// begin enable ;
17277: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17278: LD_ADDR_VAR 0 2
17282: PUSH
17283: LD_INT 122
17285: PUSH
17286: LD_INT 142
17288: PUSH
17289: EMPTY
17290: LIST
17291: LIST
17292: PUSH
17293: LD_INT 101
17295: PUSH
17296: LD_INT 127
17298: PUSH
17299: EMPTY
17300: LIST
17301: LIST
17302: PUSH
17303: LD_INT 104
17305: PUSH
17306: LD_INT 104
17308: PUSH
17309: EMPTY
17310: LIST
17311: LIST
17312: PUSH
17313: LD_INT 46
17315: PUSH
17316: LD_INT 81
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17329: LD_ADDR_VAR 0 1
17333: PUSH
17334: LD_INT 1
17336: PPUSH
17337: LD_INT 4
17339: PPUSH
17340: CALL_OW 12
17344: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17345: LD_INT 10
17347: PPUSH
17348: LD_VAR 0 2
17352: PUSH
17353: LD_VAR 0 1
17357: ARRAY
17358: PUSH
17359: LD_INT 1
17361: ARRAY
17362: PPUSH
17363: LD_VAR 0 2
17367: PUSH
17368: LD_VAR 0 1
17372: ARRAY
17373: PUSH
17374: LD_INT 2
17376: ARRAY
17377: PPUSH
17378: CALL_OW 243
// end ; end_of_file
17382: PPOPN 2
17384: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17385: LD_INT 3
17387: PPUSH
17388: CALL_OW 301
17392: IFFALSE 17613
17394: GO 17396
17396: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
17397: LD_EXP 27
17401: PPUSH
17402: LD_INT 50
17404: PUSH
17405: EMPTY
17406: LIST
17407: PPUSH
17408: CALL_OW 72
17412: IFFALSE 17421
// wait ( 0 0$10 ) ;
17414: LD_INT 350
17416: PPUSH
17417: CALL_OW 67
// DialogueOn ;
17421: CALL_OW 6
// if sciCounter = 0 then
17425: LD_EXP 28
17429: PUSH
17430: LD_INT 0
17432: EQUAL
17433: IFFALSE 17461
// begin Say ( JMM , D7a-JMM-1 ) ;
17435: LD_EXP 1
17439: PPUSH
17440: LD_STRING D7a-JMM-1
17442: PPUSH
17443: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17447: LD_EXP 15
17451: PPUSH
17452: LD_STRING D7a-Pow-1
17454: PPUSH
17455: CALL_OW 94
// end else
17459: GO 17605
// if sciCounter < 6 then
17461: LD_EXP 28
17465: PUSH
17466: LD_INT 6
17468: LESS
17469: IFFALSE 17497
// begin Say ( JMM , D7b-JMM-1 ) ;
17471: LD_EXP 1
17475: PPUSH
17476: LD_STRING D7b-JMM-1
17478: PPUSH
17479: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17483: LD_EXP 15
17487: PPUSH
17488: LD_STRING D7b-Pow-1
17490: PPUSH
17491: CALL_OW 94
// end else
17495: GO 17605
// begin Say ( JMM , D7c-JMM-1 ) ;
17497: LD_EXP 1
17501: PPUSH
17502: LD_STRING D7c-JMM-1
17504: PPUSH
17505: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
17509: LD_EXP 15
17513: PPUSH
17514: LD_STRING D7c-Pow-1
17516: PPUSH
17517: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
17521: LD_EXP 1
17525: PPUSH
17526: LD_STRING D7d-JMM-1
17528: PPUSH
17529: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
17533: LD_EXP 15
17537: PPUSH
17538: LD_STRING D7d-Pow-1
17540: PPUSH
17541: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
17545: LD_EXP 1
17549: PPUSH
17550: LD_STRING D7d-JMM-2
17552: PPUSH
17553: CALL_OW 88
// if askSiberite = 1 then
17557: LD_EXP 25
17561: PUSH
17562: LD_INT 1
17564: EQUAL
17565: IFFALSE 17581
// Say ( JMM , D7d-JMM-2a ) else
17567: LD_EXP 1
17571: PPUSH
17572: LD_STRING D7d-JMM-2a
17574: PPUSH
17575: CALL_OW 88
17579: GO 17593
// SayRadio ( Powell , D7d-Pow-2 ) ;
17581: LD_EXP 15
17585: PPUSH
17586: LD_STRING D7d-Pow-2
17588: PPUSH
17589: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
17593: LD_EXP 15
17597: PPUSH
17598: LD_STRING D7d-Pow-2a
17600: PPUSH
17601: CALL_OW 94
// end ; DialogueOff ;
17605: CALL_OW 7
// FinishMission ;
17609: CALL 17614 0 0
// end ;
17613: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
17614: LD_INT 0
17616: PPUSH
17617: PPUSH
17618: PPUSH
17619: PPUSH
// m1 := false ;
17620: LD_ADDR_VAR 0 2
17624: PUSH
17625: LD_INT 0
17627: ST_TO_ADDR
// m2 := false ;
17628: LD_ADDR_VAR 0 3
17632: PUSH
17633: LD_INT 0
17635: ST_TO_ADDR
// m3 := false ;
17636: LD_ADDR_VAR 0 4
17640: PUSH
17641: LD_INT 0
17643: ST_TO_ADDR
// if not westPathUsed then
17644: LD_EXP 42
17648: NOT
17649: IFFALSE 17658
// SetAchievement ( ACH_PATH ) ;
17651: LD_STRING ACH_PATH
17653: PPUSH
17654: CALL_OW 543
// if not rocketBuilded then
17658: LD_EXP 44
17662: NOT
17663: IFFALSE 17679
// begin wait ( 3 ) ;
17665: LD_INT 3
17667: PPUSH
17668: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
17672: LD_STRING ACH_ROCKET
17674: PPUSH
17675: CALL_OW 543
// end ; if tick <= 40 40$00 then
17679: LD_OWVAR 1
17683: PUSH
17684: LD_INT 84000
17686: LESSEQUAL
17687: IFFALSE 17703
// begin wait ( 3 ) ;
17689: LD_INT 3
17691: PPUSH
17692: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
17696: LD_STRING ACH_ASPEED_12
17698: PPUSH
17699: CALL_OW 543
// end ; if teleportExplored = 1 then
17703: LD_EXP 26
17707: PUSH
17708: LD_INT 1
17710: EQUAL
17711: IFFALSE 17733
// begin m1 := true ;
17713: LD_ADDR_VAR 0 2
17717: PUSH
17718: LD_INT 1
17720: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
17721: LD_STRING Teleport
17723: PPUSH
17724: LD_INT 1
17726: PPUSH
17727: CALL_OW 101
// end else
17731: GO 17744
// AddMedal ( Teleport , - 1 ) ;
17733: LD_STRING Teleport
17735: PPUSH
17736: LD_INT 1
17738: NEG
17739: PPUSH
17740: CALL_OW 101
// if sciCounter > 2 then
17744: LD_EXP 28
17748: PUSH
17749: LD_INT 2
17751: GREATER
17752: IFFALSE 17774
// begin m2 := true ;
17754: LD_ADDR_VAR 0 3
17758: PUSH
17759: LD_INT 1
17761: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
17762: LD_STRING Materials
17764: PPUSH
17765: LD_INT 1
17767: PPUSH
17768: CALL_OW 101
// end else
17772: GO 17785
// AddMedal ( Materials , - 1 ) ;
17774: LD_STRING Materials
17776: PPUSH
17777: LD_INT 1
17779: NEG
17780: PPUSH
17781: CALL_OW 101
// if sciCounter >= 6 then
17785: LD_EXP 28
17789: PUSH
17790: LD_INT 6
17792: GREATEREQUAL
17793: IFFALSE 17825
// begin m3 := true ;
17795: LD_ADDR_VAR 0 4
17799: PUSH
17800: LD_INT 1
17802: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
17803: LD_STRING Scientists
17805: PPUSH
17806: LD_INT 1
17808: PPUSH
17809: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
17813: LD_INT 1
17815: PPUSH
17816: LD_STRING 12_SciDed_1
17818: PPUSH
17819: CALL_OW 39
// end else
17823: GO 17846
// begin AddMedal ( Scientists , - 1 ) ;
17825: LD_STRING Scientists
17827: PPUSH
17828: LD_INT 1
17830: NEG
17831: PPUSH
17832: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
17836: LD_INT 0
17838: PPUSH
17839: LD_STRING 12_SciDed_1
17841: PPUSH
17842: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
17846: LD_EXP 24
17850: PPUSH
17851: LD_STRING 12_MainDepositFake_1
17853: PPUSH
17854: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
17858: LD_VAR 0 2
17862: PUSH
17863: LD_VAR 0 3
17867: AND
17868: PUSH
17869: LD_VAR 0 4
17873: AND
17874: PUSH
17875: LD_OWVAR 67
17879: PUSH
17880: LD_INT 3
17882: GREATEREQUAL
17883: AND
17884: IFFALSE 17896
// SetAchievementEX ( ACH_AMER , 12 ) ;
17886: LD_STRING ACH_AMER
17888: PPUSH
17889: LD_INT 12
17891: PPUSH
17892: CALL_OW 564
// GiveMedals ( MAIN ) ;
17896: LD_STRING MAIN
17898: PPUSH
17899: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
17903: LD_INT 22
17905: PUSH
17906: LD_INT 1
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PUSH
17913: LD_INT 21
17915: PUSH
17916: LD_INT 1
17918: PUSH
17919: EMPTY
17920: LIST
17921: LIST
17922: PUSH
17923: LD_INT 2
17925: PUSH
17926: LD_INT 25
17928: PUSH
17929: LD_INT 1
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 25
17938: PUSH
17939: LD_INT 2
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: LD_INT 25
17948: PUSH
17949: LD_INT 3
17951: PUSH
17952: EMPTY
17953: LIST
17954: LIST
17955: PUSH
17956: LD_INT 25
17958: PUSH
17959: LD_INT 4
17961: PUSH
17962: EMPTY
17963: LIST
17964: LIST
17965: PUSH
17966: LD_INT 25
17968: PUSH
17969: LD_INT 5
17971: PUSH
17972: EMPTY
17973: LIST
17974: LIST
17975: PUSH
17976: LD_INT 25
17978: PUSH
17979: LD_INT 8
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: PUSH
17986: EMPTY
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: PPUSH
18000: CALL_OW 69
18004: PPUSH
18005: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18009: LD_EXP 1
18013: PPUSH
18014: LD_EXP 39
18018: PUSH
18019: LD_STRING JMM
18021: STR
18022: PPUSH
18023: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18027: LD_EXP 7
18031: PPUSH
18032: LD_EXP 39
18036: PUSH
18037: LD_STRING Brown
18039: STR
18040: PPUSH
18041: CALL 12186 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18045: LD_EXP 3
18049: PPUSH
18050: LD_EXP 39
18054: PUSH
18055: LD_STRING Donaldson
18057: STR
18058: PPUSH
18059: CALL 12186 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18063: LD_EXP 4
18067: PPUSH
18068: LD_EXP 39
18072: PUSH
18073: LD_STRING Bobby
18075: STR
18076: PPUSH
18077: CALL 12186 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18081: LD_EXP 5
18085: PPUSH
18086: LD_EXP 39
18090: PUSH
18091: LD_STRING Cyrus
18093: STR
18094: PPUSH
18095: CALL 12186 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18099: LD_EXP 2
18103: PPUSH
18104: LD_EXP 39
18108: PUSH
18109: LD_STRING Lisa
18111: STR
18112: PPUSH
18113: CALL 12186 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18117: LD_EXP 12
18121: PPUSH
18122: LD_EXP 39
18126: PUSH
18127: LD_STRING Frank
18129: STR
18130: PPUSH
18131: CALL 12186 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18135: LD_EXP 13
18139: PPUSH
18140: LD_EXP 39
18144: PUSH
18145: LD_STRING Kikuchi
18147: STR
18148: PPUSH
18149: CALL 12186 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18153: LD_EXP 9
18157: PPUSH
18158: LD_EXP 39
18162: PUSH
18163: LD_STRING Houten
18165: STR
18166: PPUSH
18167: CALL 12186 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18171: LD_EXP 11
18175: PPUSH
18176: LD_EXP 39
18180: PUSH
18181: LD_STRING Gary
18183: STR
18184: PPUSH
18185: CALL 12186 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18189: LD_EXP 10
18193: PPUSH
18194: LD_EXP 39
18198: PUSH
18199: LD_STRING Cornell
18201: STR
18202: PPUSH
18203: CALL 12186 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18207: LD_EXP 6
18211: PPUSH
18212: LD_EXP 39
18216: PUSH
18217: LD_STRING Denis
18219: STR
18220: PPUSH
18221: CALL 12186 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18225: LD_EXP 8
18229: PPUSH
18230: LD_EXP 39
18234: PUSH
18235: LD_STRING Gladstone
18237: STR
18238: PPUSH
18239: CALL 12186 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18243: LD_INT 22
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 23
18255: PUSH
18256: LD_INT 1
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: LD_INT 21
18265: PUSH
18266: LD_INT 1
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 2
18275: PUSH
18276: LD_INT 25
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: EMPTY
18283: LIST
18284: LIST
18285: PUSH
18286: LD_INT 25
18288: PUSH
18289: LD_INT 2
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 25
18298: PUSH
18299: LD_INT 3
18301: PUSH
18302: EMPTY
18303: LIST
18304: LIST
18305: PUSH
18306: LD_INT 25
18308: PUSH
18309: LD_INT 4
18311: PUSH
18312: EMPTY
18313: LIST
18314: LIST
18315: PUSH
18316: LD_INT 25
18318: PUSH
18319: LD_INT 5
18321: PUSH
18322: EMPTY
18323: LIST
18324: LIST
18325: PUSH
18326: LD_INT 25
18328: PUSH
18329: LD_INT 8
18331: PUSH
18332: EMPTY
18333: LIST
18334: LIST
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: PPUSH
18351: CALL_OW 69
18355: PUSH
18356: LD_EXP 1
18360: PUSH
18361: LD_EXP 7
18365: PUSH
18366: LD_EXP 3
18370: PUSH
18371: LD_EXP 4
18375: PUSH
18376: LD_EXP 5
18380: PUSH
18381: LD_EXP 2
18385: PUSH
18386: LD_EXP 12
18390: PUSH
18391: LD_EXP 8
18395: PUSH
18396: LD_EXP 13
18400: PUSH
18401: LD_EXP 6
18405: PUSH
18406: LD_EXP 9
18410: PUSH
18411: LD_EXP 11
18415: PUSH
18416: LD_EXP 10
18420: PUSH
18421: EMPTY
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: DIFF
18436: PPUSH
18437: LD_STRING 12_other_survivors
18439: PPUSH
18440: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18444: LD_INT 22
18446: PUSH
18447: LD_INT 1
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 23
18456: PUSH
18457: LD_INT 2
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: LD_INT 21
18466: PUSH
18467: LD_INT 1
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PUSH
18474: LD_INT 2
18476: PUSH
18477: LD_INT 25
18479: PUSH
18480: LD_INT 1
18482: PUSH
18483: EMPTY
18484: LIST
18485: LIST
18486: PUSH
18487: LD_INT 25
18489: PUSH
18490: LD_INT 2
18492: PUSH
18493: EMPTY
18494: LIST
18495: LIST
18496: PUSH
18497: LD_INT 25
18499: PUSH
18500: LD_INT 3
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 25
18509: PUSH
18510: LD_INT 4
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 25
18519: PUSH
18520: LD_INT 5
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: PUSH
18527: LD_INT 25
18529: PUSH
18530: LD_INT 8
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: PPUSH
18552: CALL_OW 69
18556: PPUSH
18557: LD_STRING 12_kurt_squad
18559: PPUSH
18560: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
18564: LD_EXP 14
18568: PPUSH
18569: LD_STRING 12_others
18571: PPUSH
18572: CALL_OW 38
// YouWin ;
18576: CALL_OW 103
// end ; end_of_file
18580: LD_VAR 0 1
18584: RET
// every 0 0$01 trigger ruAI do
18585: LD_EXP 34
18589: IFFALSE 18899
18591: GO 18593
18593: DISABLE
// begin repeat wait ( 0 0$08 ) ;
18594: LD_INT 280
18596: PPUSH
18597: CALL_OW 67
// if cratesSpawned < 12 then
18601: LD_EXP 38
18605: PUSH
18606: LD_INT 12
18608: LESS
18609: IFFALSE 18661
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
18611: LD_INT 105
18613: PPUSH
18614: LD_INT 350
18616: PPUSH
18617: CALL_OW 12
18621: PPUSH
18622: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18626: LD_INT 3
18628: PPUSH
18629: LD_INT 5
18631: PPUSH
18632: CALL_OW 12
18636: PPUSH
18637: LD_INT 21
18639: PPUSH
18640: LD_INT 1
18642: PPUSH
18643: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18647: LD_ADDR_EXP 38
18651: PUSH
18652: LD_EXP 38
18656: PUSH
18657: LD_INT 1
18659: PLUS
18660: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
18661: LD_EXP 38
18665: PUSH
18666: LD_INT 12
18668: GREATEREQUAL
18669: PUSH
18670: LD_EXP 38
18674: PUSH
18675: LD_INT 32
18677: LESS
18678: AND
18679: IFFALSE 18731
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
18681: LD_INT 420
18683: PPUSH
18684: LD_INT 700
18686: PPUSH
18687: CALL_OW 12
18691: PPUSH
18692: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
18696: LD_INT 3
18698: PPUSH
18699: LD_INT 5
18701: PPUSH
18702: CALL_OW 12
18706: PPUSH
18707: LD_INT 21
18709: PPUSH
18710: LD_INT 1
18712: PPUSH
18713: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18717: LD_ADDR_EXP 38
18721: PUSH
18722: LD_EXP 38
18726: PUSH
18727: LD_INT 1
18729: PLUS
18730: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
18731: LD_EXP 38
18735: PUSH
18736: LD_INT 32
18738: GREATEREQUAL
18739: IFFALSE 18813
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18741: LD_INT 21
18743: PPUSH
18744: CALL_OW 435
18748: PUSH
18749: LD_INT 14
18751: LESS
18752: IFFALSE 18763
// wait ( 0 0$10 ) else
18754: LD_INT 350
18756: PPUSH
18757: CALL_OW 67
18761: GO 18778
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
18763: LD_INT 1750
18765: PPUSH
18766: LD_INT 3150
18768: PPUSH
18769: CALL_OW 12
18773: PPUSH
18774: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
18778: LD_INT 2
18780: PPUSH
18781: LD_INT 5
18783: PPUSH
18784: CALL_OW 12
18788: PPUSH
18789: LD_INT 21
18791: PPUSH
18792: LD_INT 1
18794: PPUSH
18795: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18799: LD_ADDR_EXP 38
18803: PUSH
18804: LD_EXP 38
18808: PUSH
18809: LD_INT 1
18811: PLUS
18812: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
18813: LD_EXP 38
18817: PUSH
18818: LD_INT 110
18820: GREATEREQUAL
18821: IFFALSE 18895
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
18823: LD_INT 21
18825: PPUSH
18826: CALL_OW 435
18830: PUSH
18831: LD_INT 14
18833: LESS
18834: IFFALSE 18845
// wait ( 0 0$20 ) else
18836: LD_INT 700
18838: PPUSH
18839: CALL_OW 67
18843: GO 18860
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
18845: LD_INT 2450
18847: PPUSH
18848: LD_INT 3850
18850: PPUSH
18851: CALL_OW 12
18855: PPUSH
18856: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
18860: LD_INT 1
18862: PPUSH
18863: LD_INT 5
18865: PPUSH
18866: CALL_OW 12
18870: PPUSH
18871: LD_INT 21
18873: PPUSH
18874: LD_INT 1
18876: PPUSH
18877: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
18881: LD_ADDR_EXP 38
18885: PUSH
18886: LD_EXP 38
18890: PUSH
18891: LD_INT 1
18893: PLUS
18894: ST_TO_ADDR
// end ; until false ;
18895: LD_INT 0
18897: IFFALSE 18594
// end ; end_of_file end_of_file
18899: END
// every 0 0$1 do
18900: GO 18902
18902: DISABLE
// begin enable ;
18903: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
18904: LD_STRING updateTimer(
18906: PUSH
18907: LD_OWVAR 1
18911: STR
18912: PUSH
18913: LD_STRING );
18915: STR
18916: PPUSH
18917: CALL_OW 559
// end ;
18921: END
// export function SOS_MapStart ( ) ; begin
18922: LD_INT 0
18924: PPUSH
// if streamModeActive then
18925: LD_EXP 46
18929: IFFALSE 18938
// DefineStreamItems ( true ) ;
18931: LD_INT 1
18933: PPUSH
18934: CALL 20742 0 1
// UpdateLuaVariables ( ) ;
18938: CALL 18955 0 0
// UpdateFactoryWaypoints ( ) ;
18942: CALL 33603 0 0
// UpdateWarehouseGatheringPoints ( ) ;
18946: CALL 33860 0 0
// end ;
18950: LD_VAR 0 1
18954: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
18955: LD_INT 0
18957: PPUSH
// if not globalGameSaveCounter then
18958: LD_EXP 45
18962: NOT
18963: IFFALSE 18974
// ToLua ( setGameSaveCounter(0) ) else
18965: LD_STRING setGameSaveCounter(0)
18967: PPUSH
18968: CALL_OW 559
18972: GO 19006
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
18974: LD_ADDR_EXP 45
18978: PUSH
18979: LD_EXP 45
18983: PPUSH
18984: CALL 77817 0 1
18988: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
18989: LD_STRING setGameSaveCounter(
18991: PUSH
18992: LD_EXP 45
18996: STR
18997: PUSH
18998: LD_STRING )
19000: STR
19001: PPUSH
19002: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19006: LD_STRING setGameDifficulty(
19008: PUSH
19009: LD_OWVAR 67
19013: STR
19014: PUSH
19015: LD_STRING )
19017: STR
19018: PPUSH
19019: CALL_OW 559
// end ;
19023: LD_VAR 0 1
19027: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19028: LD_INT 0
19030: PPUSH
// if p2 = stream_mode then
19031: LD_VAR 0 2
19035: PUSH
19036: LD_INT 100
19038: EQUAL
19039: IFFALSE 20042
// begin if not StreamModeActive then
19041: LD_EXP 46
19045: NOT
19046: IFFALSE 19056
// StreamModeActive := true ;
19048: LD_ADDR_EXP 46
19052: PUSH
19053: LD_INT 1
19055: ST_TO_ADDR
// if p3 = 0 then
19056: LD_VAR 0 3
19060: PUSH
19061: LD_INT 0
19063: EQUAL
19064: IFFALSE 19070
// InitStreamMode ;
19066: CALL 20278 0 0
// if p3 = 1 then
19070: LD_VAR 0 3
19074: PUSH
19075: LD_INT 1
19077: EQUAL
19078: IFFALSE 19088
// sRocket := true ;
19080: LD_ADDR_EXP 51
19084: PUSH
19085: LD_INT 1
19087: ST_TO_ADDR
// if p3 = 2 then
19088: LD_VAR 0 3
19092: PUSH
19093: LD_INT 2
19095: EQUAL
19096: IFFALSE 19106
// sSpeed := true ;
19098: LD_ADDR_EXP 50
19102: PUSH
19103: LD_INT 1
19105: ST_TO_ADDR
// if p3 = 3 then
19106: LD_VAR 0 3
19110: PUSH
19111: LD_INT 3
19113: EQUAL
19114: IFFALSE 19124
// sEngine := true ;
19116: LD_ADDR_EXP 52
19120: PUSH
19121: LD_INT 1
19123: ST_TO_ADDR
// if p3 = 4 then
19124: LD_VAR 0 3
19128: PUSH
19129: LD_INT 4
19131: EQUAL
19132: IFFALSE 19142
// sSpec := true ;
19134: LD_ADDR_EXP 49
19138: PUSH
19139: LD_INT 1
19141: ST_TO_ADDR
// if p3 = 5 then
19142: LD_VAR 0 3
19146: PUSH
19147: LD_INT 5
19149: EQUAL
19150: IFFALSE 19160
// sLevel := true ;
19152: LD_ADDR_EXP 53
19156: PUSH
19157: LD_INT 1
19159: ST_TO_ADDR
// if p3 = 6 then
19160: LD_VAR 0 3
19164: PUSH
19165: LD_INT 6
19167: EQUAL
19168: IFFALSE 19178
// sArmoury := true ;
19170: LD_ADDR_EXP 54
19174: PUSH
19175: LD_INT 1
19177: ST_TO_ADDR
// if p3 = 7 then
19178: LD_VAR 0 3
19182: PUSH
19183: LD_INT 7
19185: EQUAL
19186: IFFALSE 19196
// sRadar := true ;
19188: LD_ADDR_EXP 55
19192: PUSH
19193: LD_INT 1
19195: ST_TO_ADDR
// if p3 = 8 then
19196: LD_VAR 0 3
19200: PUSH
19201: LD_INT 8
19203: EQUAL
19204: IFFALSE 19214
// sBunker := true ;
19206: LD_ADDR_EXP 56
19210: PUSH
19211: LD_INT 1
19213: ST_TO_ADDR
// if p3 = 9 then
19214: LD_VAR 0 3
19218: PUSH
19219: LD_INT 9
19221: EQUAL
19222: IFFALSE 19232
// sHack := true ;
19224: LD_ADDR_EXP 57
19228: PUSH
19229: LD_INT 1
19231: ST_TO_ADDR
// if p3 = 10 then
19232: LD_VAR 0 3
19236: PUSH
19237: LD_INT 10
19239: EQUAL
19240: IFFALSE 19250
// sFire := true ;
19242: LD_ADDR_EXP 58
19246: PUSH
19247: LD_INT 1
19249: ST_TO_ADDR
// if p3 = 11 then
19250: LD_VAR 0 3
19254: PUSH
19255: LD_INT 11
19257: EQUAL
19258: IFFALSE 19268
// sRefresh := true ;
19260: LD_ADDR_EXP 59
19264: PUSH
19265: LD_INT 1
19267: ST_TO_ADDR
// if p3 = 12 then
19268: LD_VAR 0 3
19272: PUSH
19273: LD_INT 12
19275: EQUAL
19276: IFFALSE 19286
// sExp := true ;
19278: LD_ADDR_EXP 60
19282: PUSH
19283: LD_INT 1
19285: ST_TO_ADDR
// if p3 = 13 then
19286: LD_VAR 0 3
19290: PUSH
19291: LD_INT 13
19293: EQUAL
19294: IFFALSE 19304
// sDepot := true ;
19296: LD_ADDR_EXP 61
19300: PUSH
19301: LD_INT 1
19303: ST_TO_ADDR
// if p3 = 14 then
19304: LD_VAR 0 3
19308: PUSH
19309: LD_INT 14
19311: EQUAL
19312: IFFALSE 19322
// sFlag := true ;
19314: LD_ADDR_EXP 62
19318: PUSH
19319: LD_INT 1
19321: ST_TO_ADDR
// if p3 = 15 then
19322: LD_VAR 0 3
19326: PUSH
19327: LD_INT 15
19329: EQUAL
19330: IFFALSE 19340
// sKamikadze := true ;
19332: LD_ADDR_EXP 70
19336: PUSH
19337: LD_INT 1
19339: ST_TO_ADDR
// if p3 = 16 then
19340: LD_VAR 0 3
19344: PUSH
19345: LD_INT 16
19347: EQUAL
19348: IFFALSE 19358
// sTroll := true ;
19350: LD_ADDR_EXP 71
19354: PUSH
19355: LD_INT 1
19357: ST_TO_ADDR
// if p3 = 17 then
19358: LD_VAR 0 3
19362: PUSH
19363: LD_INT 17
19365: EQUAL
19366: IFFALSE 19376
// sSlow := true ;
19368: LD_ADDR_EXP 72
19372: PUSH
19373: LD_INT 1
19375: ST_TO_ADDR
// if p3 = 18 then
19376: LD_VAR 0 3
19380: PUSH
19381: LD_INT 18
19383: EQUAL
19384: IFFALSE 19394
// sLack := true ;
19386: LD_ADDR_EXP 73
19390: PUSH
19391: LD_INT 1
19393: ST_TO_ADDR
// if p3 = 19 then
19394: LD_VAR 0 3
19398: PUSH
19399: LD_INT 19
19401: EQUAL
19402: IFFALSE 19412
// sTank := true ;
19404: LD_ADDR_EXP 75
19408: PUSH
19409: LD_INT 1
19411: ST_TO_ADDR
// if p3 = 20 then
19412: LD_VAR 0 3
19416: PUSH
19417: LD_INT 20
19419: EQUAL
19420: IFFALSE 19430
// sRemote := true ;
19422: LD_ADDR_EXP 76
19426: PUSH
19427: LD_INT 1
19429: ST_TO_ADDR
// if p3 = 21 then
19430: LD_VAR 0 3
19434: PUSH
19435: LD_INT 21
19437: EQUAL
19438: IFFALSE 19448
// sPowell := true ;
19440: LD_ADDR_EXP 77
19444: PUSH
19445: LD_INT 1
19447: ST_TO_ADDR
// if p3 = 22 then
19448: LD_VAR 0 3
19452: PUSH
19453: LD_INT 22
19455: EQUAL
19456: IFFALSE 19466
// sTeleport := true ;
19458: LD_ADDR_EXP 80
19462: PUSH
19463: LD_INT 1
19465: ST_TO_ADDR
// if p3 = 23 then
19466: LD_VAR 0 3
19470: PUSH
19471: LD_INT 23
19473: EQUAL
19474: IFFALSE 19484
// sOilTower := true ;
19476: LD_ADDR_EXP 82
19480: PUSH
19481: LD_INT 1
19483: ST_TO_ADDR
// if p3 = 24 then
19484: LD_VAR 0 3
19488: PUSH
19489: LD_INT 24
19491: EQUAL
19492: IFFALSE 19502
// sShovel := true ;
19494: LD_ADDR_EXP 83
19498: PUSH
19499: LD_INT 1
19501: ST_TO_ADDR
// if p3 = 25 then
19502: LD_VAR 0 3
19506: PUSH
19507: LD_INT 25
19509: EQUAL
19510: IFFALSE 19520
// sSheik := true ;
19512: LD_ADDR_EXP 84
19516: PUSH
19517: LD_INT 1
19519: ST_TO_ADDR
// if p3 = 26 then
19520: LD_VAR 0 3
19524: PUSH
19525: LD_INT 26
19527: EQUAL
19528: IFFALSE 19538
// sEarthquake := true ;
19530: LD_ADDR_EXP 86
19534: PUSH
19535: LD_INT 1
19537: ST_TO_ADDR
// if p3 = 27 then
19538: LD_VAR 0 3
19542: PUSH
19543: LD_INT 27
19545: EQUAL
19546: IFFALSE 19556
// sAI := true ;
19548: LD_ADDR_EXP 87
19552: PUSH
19553: LD_INT 1
19555: ST_TO_ADDR
// if p3 = 28 then
19556: LD_VAR 0 3
19560: PUSH
19561: LD_INT 28
19563: EQUAL
19564: IFFALSE 19574
// sCargo := true ;
19566: LD_ADDR_EXP 90
19570: PUSH
19571: LD_INT 1
19573: ST_TO_ADDR
// if p3 = 29 then
19574: LD_VAR 0 3
19578: PUSH
19579: LD_INT 29
19581: EQUAL
19582: IFFALSE 19592
// sDLaser := true ;
19584: LD_ADDR_EXP 91
19588: PUSH
19589: LD_INT 1
19591: ST_TO_ADDR
// if p3 = 30 then
19592: LD_VAR 0 3
19596: PUSH
19597: LD_INT 30
19599: EQUAL
19600: IFFALSE 19610
// sExchange := true ;
19602: LD_ADDR_EXP 92
19606: PUSH
19607: LD_INT 1
19609: ST_TO_ADDR
// if p3 = 31 then
19610: LD_VAR 0 3
19614: PUSH
19615: LD_INT 31
19617: EQUAL
19618: IFFALSE 19628
// sFac := true ;
19620: LD_ADDR_EXP 93
19624: PUSH
19625: LD_INT 1
19627: ST_TO_ADDR
// if p3 = 32 then
19628: LD_VAR 0 3
19632: PUSH
19633: LD_INT 32
19635: EQUAL
19636: IFFALSE 19646
// sPower := true ;
19638: LD_ADDR_EXP 94
19642: PUSH
19643: LD_INT 1
19645: ST_TO_ADDR
// if p3 = 33 then
19646: LD_VAR 0 3
19650: PUSH
19651: LD_INT 33
19653: EQUAL
19654: IFFALSE 19664
// sRandom := true ;
19656: LD_ADDR_EXP 95
19660: PUSH
19661: LD_INT 1
19663: ST_TO_ADDR
// if p3 = 34 then
19664: LD_VAR 0 3
19668: PUSH
19669: LD_INT 34
19671: EQUAL
19672: IFFALSE 19682
// sShield := true ;
19674: LD_ADDR_EXP 96
19678: PUSH
19679: LD_INT 1
19681: ST_TO_ADDR
// if p3 = 35 then
19682: LD_VAR 0 3
19686: PUSH
19687: LD_INT 35
19689: EQUAL
19690: IFFALSE 19700
// sTime := true ;
19692: LD_ADDR_EXP 97
19696: PUSH
19697: LD_INT 1
19699: ST_TO_ADDR
// if p3 = 36 then
19700: LD_VAR 0 3
19704: PUSH
19705: LD_INT 36
19707: EQUAL
19708: IFFALSE 19718
// sTools := true ;
19710: LD_ADDR_EXP 98
19714: PUSH
19715: LD_INT 1
19717: ST_TO_ADDR
// if p3 = 101 then
19718: LD_VAR 0 3
19722: PUSH
19723: LD_INT 101
19725: EQUAL
19726: IFFALSE 19736
// sSold := true ;
19728: LD_ADDR_EXP 63
19732: PUSH
19733: LD_INT 1
19735: ST_TO_ADDR
// if p3 = 102 then
19736: LD_VAR 0 3
19740: PUSH
19741: LD_INT 102
19743: EQUAL
19744: IFFALSE 19754
// sDiff := true ;
19746: LD_ADDR_EXP 64
19750: PUSH
19751: LD_INT 1
19753: ST_TO_ADDR
// if p3 = 103 then
19754: LD_VAR 0 3
19758: PUSH
19759: LD_INT 103
19761: EQUAL
19762: IFFALSE 19772
// sFog := true ;
19764: LD_ADDR_EXP 67
19768: PUSH
19769: LD_INT 1
19771: ST_TO_ADDR
// if p3 = 104 then
19772: LD_VAR 0 3
19776: PUSH
19777: LD_INT 104
19779: EQUAL
19780: IFFALSE 19790
// sReset := true ;
19782: LD_ADDR_EXP 68
19786: PUSH
19787: LD_INT 1
19789: ST_TO_ADDR
// if p3 = 105 then
19790: LD_VAR 0 3
19794: PUSH
19795: LD_INT 105
19797: EQUAL
19798: IFFALSE 19808
// sSun := true ;
19800: LD_ADDR_EXP 69
19804: PUSH
19805: LD_INT 1
19807: ST_TO_ADDR
// if p3 = 106 then
19808: LD_VAR 0 3
19812: PUSH
19813: LD_INT 106
19815: EQUAL
19816: IFFALSE 19826
// sTiger := true ;
19818: LD_ADDR_EXP 65
19822: PUSH
19823: LD_INT 1
19825: ST_TO_ADDR
// if p3 = 107 then
19826: LD_VAR 0 3
19830: PUSH
19831: LD_INT 107
19833: EQUAL
19834: IFFALSE 19844
// sBomb := true ;
19836: LD_ADDR_EXP 66
19840: PUSH
19841: LD_INT 1
19843: ST_TO_ADDR
// if p3 = 108 then
19844: LD_VAR 0 3
19848: PUSH
19849: LD_INT 108
19851: EQUAL
19852: IFFALSE 19862
// sWound := true ;
19854: LD_ADDR_EXP 74
19858: PUSH
19859: LD_INT 1
19861: ST_TO_ADDR
// if p3 = 109 then
19862: LD_VAR 0 3
19866: PUSH
19867: LD_INT 109
19869: EQUAL
19870: IFFALSE 19880
// sBetray := true ;
19872: LD_ADDR_EXP 78
19876: PUSH
19877: LD_INT 1
19879: ST_TO_ADDR
// if p3 = 110 then
19880: LD_VAR 0 3
19884: PUSH
19885: LD_INT 110
19887: EQUAL
19888: IFFALSE 19898
// sContamin := true ;
19890: LD_ADDR_EXP 79
19894: PUSH
19895: LD_INT 1
19897: ST_TO_ADDR
// if p3 = 111 then
19898: LD_VAR 0 3
19902: PUSH
19903: LD_INT 111
19905: EQUAL
19906: IFFALSE 19916
// sOil := true ;
19908: LD_ADDR_EXP 81
19912: PUSH
19913: LD_INT 1
19915: ST_TO_ADDR
// if p3 = 112 then
19916: LD_VAR 0 3
19920: PUSH
19921: LD_INT 112
19923: EQUAL
19924: IFFALSE 19934
// sStu := true ;
19926: LD_ADDR_EXP 85
19930: PUSH
19931: LD_INT 1
19933: ST_TO_ADDR
// if p3 = 113 then
19934: LD_VAR 0 3
19938: PUSH
19939: LD_INT 113
19941: EQUAL
19942: IFFALSE 19952
// sBazooka := true ;
19944: LD_ADDR_EXP 88
19948: PUSH
19949: LD_INT 1
19951: ST_TO_ADDR
// if p3 = 114 then
19952: LD_VAR 0 3
19956: PUSH
19957: LD_INT 114
19959: EQUAL
19960: IFFALSE 19970
// sMortar := true ;
19962: LD_ADDR_EXP 89
19966: PUSH
19967: LD_INT 1
19969: ST_TO_ADDR
// if p3 = 115 then
19970: LD_VAR 0 3
19974: PUSH
19975: LD_INT 115
19977: EQUAL
19978: IFFALSE 19988
// sRanger := true ;
19980: LD_ADDR_EXP 99
19984: PUSH
19985: LD_INT 1
19987: ST_TO_ADDR
// if p3 = 116 then
19988: LD_VAR 0 3
19992: PUSH
19993: LD_INT 116
19995: EQUAL
19996: IFFALSE 20006
// sComputer := true ;
19998: LD_ADDR_EXP 100
20002: PUSH
20003: LD_INT 1
20005: ST_TO_ADDR
// if p3 = 117 then
20006: LD_VAR 0 3
20010: PUSH
20011: LD_INT 117
20013: EQUAL
20014: IFFALSE 20024
// s30 := true ;
20016: LD_ADDR_EXP 101
20020: PUSH
20021: LD_INT 1
20023: ST_TO_ADDR
// if p3 = 118 then
20024: LD_VAR 0 3
20028: PUSH
20029: LD_INT 118
20031: EQUAL
20032: IFFALSE 20042
// s60 := true ;
20034: LD_ADDR_EXP 102
20038: PUSH
20039: LD_INT 1
20041: ST_TO_ADDR
// end ; if p2 = hack_mode then
20042: LD_VAR 0 2
20046: PUSH
20047: LD_INT 101
20049: EQUAL
20050: IFFALSE 20178
// begin case p3 of 1 :
20052: LD_VAR 0 3
20056: PUSH
20057: LD_INT 1
20059: DOUBLE
20060: EQUAL
20061: IFTRUE 20065
20063: GO 20072
20065: POP
// hHackUnlimitedResources ; 2 :
20066: CALL 32349 0 0
20070: GO 20178
20072: LD_INT 2
20074: DOUBLE
20075: EQUAL
20076: IFTRUE 20080
20078: GO 20087
20080: POP
// hHackSetLevel10 ; 3 :
20081: CALL 32482 0 0
20085: GO 20178
20087: LD_INT 3
20089: DOUBLE
20090: EQUAL
20091: IFTRUE 20095
20093: GO 20102
20095: POP
// hHackSetLevel10YourUnits ; 4 :
20096: CALL 32567 0 0
20100: GO 20178
20102: LD_INT 4
20104: DOUBLE
20105: EQUAL
20106: IFTRUE 20110
20108: GO 20117
20110: POP
// hHackInvincible ; 5 :
20111: CALL 33015 0 0
20115: GO 20178
20117: LD_INT 5
20119: DOUBLE
20120: EQUAL
20121: IFTRUE 20125
20123: GO 20132
20125: POP
// hHackInvisible ; 6 :
20126: CALL 33126 0 0
20130: GO 20178
20132: LD_INT 6
20134: DOUBLE
20135: EQUAL
20136: IFTRUE 20140
20138: GO 20147
20140: POP
// hHackChangeYourSide ; 7 :
20141: CALL 33183 0 0
20145: GO 20178
20147: LD_INT 7
20149: DOUBLE
20150: EQUAL
20151: IFTRUE 20155
20153: GO 20162
20155: POP
// hHackChangeUnitSide ; 8 :
20156: CALL 33225 0 0
20160: GO 20178
20162: LD_INT 8
20164: DOUBLE
20165: EQUAL
20166: IFTRUE 20170
20168: GO 20177
20170: POP
// hHackFog ; end ;
20171: CALL 33326 0 0
20175: GO 20178
20177: POP
// end ; if p2 = game_save_mode then
20178: LD_VAR 0 2
20182: PUSH
20183: LD_INT 102
20185: EQUAL
20186: IFFALSE 20251
// begin if p3 = 1 then
20188: LD_VAR 0 3
20192: PUSH
20193: LD_INT 1
20195: EQUAL
20196: IFFALSE 20208
// globalGameSaveCounter := p4 ;
20198: LD_ADDR_EXP 45
20202: PUSH
20203: LD_VAR 0 4
20207: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20208: LD_VAR 0 3
20212: PUSH
20213: LD_INT 2
20215: EQUAL
20216: PUSH
20217: LD_EXP 45
20221: AND
20222: IFFALSE 20241
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20224: LD_STRING setGameSaveCounter(
20226: PUSH
20227: LD_EXP 45
20231: STR
20232: PUSH
20233: LD_STRING )
20235: STR
20236: PPUSH
20237: CALL_OW 559
// display_strings := globalGameSaveCounter ;
20241: LD_ADDR_OWVAR 47
20245: PUSH
20246: LD_EXP 45
20250: ST_TO_ADDR
// end ; end ;
20251: LD_VAR 0 7
20255: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
20256: GO 20258
20258: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
20259: LD_STRING initStreamRollete();
20261: PPUSH
20262: CALL_OW 559
// InitStreamMode ;
20266: CALL 20278 0 0
// DefineStreamItems ( false ) ;
20270: LD_INT 0
20272: PPUSH
20273: CALL 20742 0 1
// end ;
20277: END
// function InitStreamMode ; begin
20278: LD_INT 0
20280: PPUSH
// streamModeActive := false ;
20281: LD_ADDR_EXP 46
20285: PUSH
20286: LD_INT 0
20288: ST_TO_ADDR
// normalCounter := 36 ;
20289: LD_ADDR_EXP 47
20293: PUSH
20294: LD_INT 36
20296: ST_TO_ADDR
// hardcoreCounter := 18 ;
20297: LD_ADDR_EXP 48
20301: PUSH
20302: LD_INT 18
20304: ST_TO_ADDR
// sRocket := false ;
20305: LD_ADDR_EXP 51
20309: PUSH
20310: LD_INT 0
20312: ST_TO_ADDR
// sSpeed := false ;
20313: LD_ADDR_EXP 50
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// sEngine := false ;
20321: LD_ADDR_EXP 52
20325: PUSH
20326: LD_INT 0
20328: ST_TO_ADDR
// sSpec := false ;
20329: LD_ADDR_EXP 49
20333: PUSH
20334: LD_INT 0
20336: ST_TO_ADDR
// sLevel := false ;
20337: LD_ADDR_EXP 53
20341: PUSH
20342: LD_INT 0
20344: ST_TO_ADDR
// sArmoury := false ;
20345: LD_ADDR_EXP 54
20349: PUSH
20350: LD_INT 0
20352: ST_TO_ADDR
// sRadar := false ;
20353: LD_ADDR_EXP 55
20357: PUSH
20358: LD_INT 0
20360: ST_TO_ADDR
// sBunker := false ;
20361: LD_ADDR_EXP 56
20365: PUSH
20366: LD_INT 0
20368: ST_TO_ADDR
// sHack := false ;
20369: LD_ADDR_EXP 57
20373: PUSH
20374: LD_INT 0
20376: ST_TO_ADDR
// sFire := false ;
20377: LD_ADDR_EXP 58
20381: PUSH
20382: LD_INT 0
20384: ST_TO_ADDR
// sRefresh := false ;
20385: LD_ADDR_EXP 59
20389: PUSH
20390: LD_INT 0
20392: ST_TO_ADDR
// sExp := false ;
20393: LD_ADDR_EXP 60
20397: PUSH
20398: LD_INT 0
20400: ST_TO_ADDR
// sDepot := false ;
20401: LD_ADDR_EXP 61
20405: PUSH
20406: LD_INT 0
20408: ST_TO_ADDR
// sFlag := false ;
20409: LD_ADDR_EXP 62
20413: PUSH
20414: LD_INT 0
20416: ST_TO_ADDR
// sKamikadze := false ;
20417: LD_ADDR_EXP 70
20421: PUSH
20422: LD_INT 0
20424: ST_TO_ADDR
// sTroll := false ;
20425: LD_ADDR_EXP 71
20429: PUSH
20430: LD_INT 0
20432: ST_TO_ADDR
// sSlow := false ;
20433: LD_ADDR_EXP 72
20437: PUSH
20438: LD_INT 0
20440: ST_TO_ADDR
// sLack := false ;
20441: LD_ADDR_EXP 73
20445: PUSH
20446: LD_INT 0
20448: ST_TO_ADDR
// sTank := false ;
20449: LD_ADDR_EXP 75
20453: PUSH
20454: LD_INT 0
20456: ST_TO_ADDR
// sRemote := false ;
20457: LD_ADDR_EXP 76
20461: PUSH
20462: LD_INT 0
20464: ST_TO_ADDR
// sPowell := false ;
20465: LD_ADDR_EXP 77
20469: PUSH
20470: LD_INT 0
20472: ST_TO_ADDR
// sTeleport := false ;
20473: LD_ADDR_EXP 80
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// sOilTower := false ;
20481: LD_ADDR_EXP 82
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// sShovel := false ;
20489: LD_ADDR_EXP 83
20493: PUSH
20494: LD_INT 0
20496: ST_TO_ADDR
// sSheik := false ;
20497: LD_ADDR_EXP 84
20501: PUSH
20502: LD_INT 0
20504: ST_TO_ADDR
// sEarthquake := false ;
20505: LD_ADDR_EXP 86
20509: PUSH
20510: LD_INT 0
20512: ST_TO_ADDR
// sAI := false ;
20513: LD_ADDR_EXP 87
20517: PUSH
20518: LD_INT 0
20520: ST_TO_ADDR
// sCargo := false ;
20521: LD_ADDR_EXP 90
20525: PUSH
20526: LD_INT 0
20528: ST_TO_ADDR
// sDLaser := false ;
20529: LD_ADDR_EXP 91
20533: PUSH
20534: LD_INT 0
20536: ST_TO_ADDR
// sExchange := false ;
20537: LD_ADDR_EXP 92
20541: PUSH
20542: LD_INT 0
20544: ST_TO_ADDR
// sFac := false ;
20545: LD_ADDR_EXP 93
20549: PUSH
20550: LD_INT 0
20552: ST_TO_ADDR
// sPower := false ;
20553: LD_ADDR_EXP 94
20557: PUSH
20558: LD_INT 0
20560: ST_TO_ADDR
// sRandom := false ;
20561: LD_ADDR_EXP 95
20565: PUSH
20566: LD_INT 0
20568: ST_TO_ADDR
// sShield := false ;
20569: LD_ADDR_EXP 96
20573: PUSH
20574: LD_INT 0
20576: ST_TO_ADDR
// sTime := false ;
20577: LD_ADDR_EXP 97
20581: PUSH
20582: LD_INT 0
20584: ST_TO_ADDR
// sTools := false ;
20585: LD_ADDR_EXP 98
20589: PUSH
20590: LD_INT 0
20592: ST_TO_ADDR
// sSold := false ;
20593: LD_ADDR_EXP 63
20597: PUSH
20598: LD_INT 0
20600: ST_TO_ADDR
// sDiff := false ;
20601: LD_ADDR_EXP 64
20605: PUSH
20606: LD_INT 0
20608: ST_TO_ADDR
// sFog := false ;
20609: LD_ADDR_EXP 67
20613: PUSH
20614: LD_INT 0
20616: ST_TO_ADDR
// sReset := false ;
20617: LD_ADDR_EXP 68
20621: PUSH
20622: LD_INT 0
20624: ST_TO_ADDR
// sSun := false ;
20625: LD_ADDR_EXP 69
20629: PUSH
20630: LD_INT 0
20632: ST_TO_ADDR
// sTiger := false ;
20633: LD_ADDR_EXP 65
20637: PUSH
20638: LD_INT 0
20640: ST_TO_ADDR
// sBomb := false ;
20641: LD_ADDR_EXP 66
20645: PUSH
20646: LD_INT 0
20648: ST_TO_ADDR
// sWound := false ;
20649: LD_ADDR_EXP 74
20653: PUSH
20654: LD_INT 0
20656: ST_TO_ADDR
// sBetray := false ;
20657: LD_ADDR_EXP 78
20661: PUSH
20662: LD_INT 0
20664: ST_TO_ADDR
// sContamin := false ;
20665: LD_ADDR_EXP 79
20669: PUSH
20670: LD_INT 0
20672: ST_TO_ADDR
// sOil := false ;
20673: LD_ADDR_EXP 81
20677: PUSH
20678: LD_INT 0
20680: ST_TO_ADDR
// sStu := false ;
20681: LD_ADDR_EXP 85
20685: PUSH
20686: LD_INT 0
20688: ST_TO_ADDR
// sBazooka := false ;
20689: LD_ADDR_EXP 88
20693: PUSH
20694: LD_INT 0
20696: ST_TO_ADDR
// sMortar := false ;
20697: LD_ADDR_EXP 89
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// sRanger := false ;
20705: LD_ADDR_EXP 99
20709: PUSH
20710: LD_INT 0
20712: ST_TO_ADDR
// sComputer := false ;
20713: LD_ADDR_EXP 100
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// s30 := false ;
20721: LD_ADDR_EXP 101
20725: PUSH
20726: LD_INT 0
20728: ST_TO_ADDR
// s60 := false ;
20729: LD_ADDR_EXP 102
20733: PUSH
20734: LD_INT 0
20736: ST_TO_ADDR
// end ;
20737: LD_VAR 0 1
20741: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
20742: LD_INT 0
20744: PPUSH
20745: PPUSH
20746: PPUSH
20747: PPUSH
20748: PPUSH
20749: PPUSH
20750: PPUSH
// result := [ ] ;
20751: LD_ADDR_VAR 0 2
20755: PUSH
20756: EMPTY
20757: ST_TO_ADDR
// if campaign_id = 1 then
20758: LD_OWVAR 69
20762: PUSH
20763: LD_INT 1
20765: EQUAL
20766: IFFALSE 23932
// begin case mission_number of 1 :
20768: LD_OWVAR 70
20772: PUSH
20773: LD_INT 1
20775: DOUBLE
20776: EQUAL
20777: IFTRUE 20781
20779: GO 20857
20781: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
20782: LD_ADDR_VAR 0 2
20786: PUSH
20787: LD_INT 2
20789: PUSH
20790: LD_INT 4
20792: PUSH
20793: LD_INT 11
20795: PUSH
20796: LD_INT 12
20798: PUSH
20799: LD_INT 15
20801: PUSH
20802: LD_INT 16
20804: PUSH
20805: LD_INT 22
20807: PUSH
20808: LD_INT 23
20810: PUSH
20811: LD_INT 26
20813: PUSH
20814: EMPTY
20815: LIST
20816: LIST
20817: LIST
20818: LIST
20819: LIST
20820: LIST
20821: LIST
20822: LIST
20823: LIST
20824: PUSH
20825: LD_INT 101
20827: PUSH
20828: LD_INT 102
20830: PUSH
20831: LD_INT 106
20833: PUSH
20834: LD_INT 116
20836: PUSH
20837: LD_INT 117
20839: PUSH
20840: LD_INT 118
20842: PUSH
20843: EMPTY
20844: LIST
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: LIST
20850: PUSH
20851: EMPTY
20852: LIST
20853: LIST
20854: ST_TO_ADDR
20855: GO 23930
20857: LD_INT 2
20859: DOUBLE
20860: EQUAL
20861: IFTRUE 20865
20863: GO 20949
20865: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
20866: LD_ADDR_VAR 0 2
20870: PUSH
20871: LD_INT 2
20873: PUSH
20874: LD_INT 4
20876: PUSH
20877: LD_INT 11
20879: PUSH
20880: LD_INT 12
20882: PUSH
20883: LD_INT 15
20885: PUSH
20886: LD_INT 16
20888: PUSH
20889: LD_INT 22
20891: PUSH
20892: LD_INT 23
20894: PUSH
20895: LD_INT 26
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: LIST
20902: LIST
20903: LIST
20904: LIST
20905: LIST
20906: LIST
20907: LIST
20908: PUSH
20909: LD_INT 101
20911: PUSH
20912: LD_INT 102
20914: PUSH
20915: LD_INT 105
20917: PUSH
20918: LD_INT 106
20920: PUSH
20921: LD_INT 108
20923: PUSH
20924: LD_INT 116
20926: PUSH
20927: LD_INT 117
20929: PUSH
20930: LD_INT 118
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: LIST
20937: LIST
20938: LIST
20939: LIST
20940: LIST
20941: LIST
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: ST_TO_ADDR
20947: GO 23930
20949: LD_INT 3
20951: DOUBLE
20952: EQUAL
20953: IFTRUE 20957
20955: GO 21045
20957: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
20958: LD_ADDR_VAR 0 2
20962: PUSH
20963: LD_INT 2
20965: PUSH
20966: LD_INT 4
20968: PUSH
20969: LD_INT 5
20971: PUSH
20972: LD_INT 11
20974: PUSH
20975: LD_INT 12
20977: PUSH
20978: LD_INT 15
20980: PUSH
20981: LD_INT 16
20983: PUSH
20984: LD_INT 22
20986: PUSH
20987: LD_INT 26
20989: PUSH
20990: LD_INT 36
20992: PUSH
20993: EMPTY
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: PUSH
21005: LD_INT 101
21007: PUSH
21008: LD_INT 102
21010: PUSH
21011: LD_INT 105
21013: PUSH
21014: LD_INT 106
21016: PUSH
21017: LD_INT 108
21019: PUSH
21020: LD_INT 116
21022: PUSH
21023: LD_INT 117
21025: PUSH
21026: LD_INT 118
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: LIST
21037: LIST
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: ST_TO_ADDR
21043: GO 23930
21045: LD_INT 4
21047: DOUBLE
21048: EQUAL
21049: IFTRUE 21053
21051: GO 21149
21053: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21054: LD_ADDR_VAR 0 2
21058: PUSH
21059: LD_INT 2
21061: PUSH
21062: LD_INT 4
21064: PUSH
21065: LD_INT 5
21067: PUSH
21068: LD_INT 8
21070: PUSH
21071: LD_INT 11
21073: PUSH
21074: LD_INT 12
21076: PUSH
21077: LD_INT 15
21079: PUSH
21080: LD_INT 16
21082: PUSH
21083: LD_INT 22
21085: PUSH
21086: LD_INT 23
21088: PUSH
21089: LD_INT 26
21091: PUSH
21092: LD_INT 36
21094: PUSH
21095: EMPTY
21096: LIST
21097: LIST
21098: LIST
21099: LIST
21100: LIST
21101: LIST
21102: LIST
21103: LIST
21104: LIST
21105: LIST
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 101
21111: PUSH
21112: LD_INT 102
21114: PUSH
21115: LD_INT 105
21117: PUSH
21118: LD_INT 106
21120: PUSH
21121: LD_INT 108
21123: PUSH
21124: LD_INT 116
21126: PUSH
21127: LD_INT 117
21129: PUSH
21130: LD_INT 118
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: LIST
21140: LIST
21141: LIST
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: ST_TO_ADDR
21147: GO 23930
21149: LD_INT 5
21151: DOUBLE
21152: EQUAL
21153: IFTRUE 21157
21155: GO 21269
21157: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21158: LD_ADDR_VAR 0 2
21162: PUSH
21163: LD_INT 2
21165: PUSH
21166: LD_INT 4
21168: PUSH
21169: LD_INT 5
21171: PUSH
21172: LD_INT 6
21174: PUSH
21175: LD_INT 8
21177: PUSH
21178: LD_INT 11
21180: PUSH
21181: LD_INT 12
21183: PUSH
21184: LD_INT 15
21186: PUSH
21187: LD_INT 16
21189: PUSH
21190: LD_INT 22
21192: PUSH
21193: LD_INT 23
21195: PUSH
21196: LD_INT 25
21198: PUSH
21199: LD_INT 26
21201: PUSH
21202: LD_INT 36
21204: PUSH
21205: EMPTY
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: PUSH
21221: LD_INT 101
21223: PUSH
21224: LD_INT 102
21226: PUSH
21227: LD_INT 105
21229: PUSH
21230: LD_INT 106
21232: PUSH
21233: LD_INT 108
21235: PUSH
21236: LD_INT 109
21238: PUSH
21239: LD_INT 112
21241: PUSH
21242: LD_INT 116
21244: PUSH
21245: LD_INT 117
21247: PUSH
21248: LD_INT 118
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: PUSH
21263: EMPTY
21264: LIST
21265: LIST
21266: ST_TO_ADDR
21267: GO 23930
21269: LD_INT 6
21271: DOUBLE
21272: EQUAL
21273: IFTRUE 21277
21275: GO 21409
21277: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21278: LD_ADDR_VAR 0 2
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: LD_INT 4
21288: PUSH
21289: LD_INT 5
21291: PUSH
21292: LD_INT 6
21294: PUSH
21295: LD_INT 8
21297: PUSH
21298: LD_INT 11
21300: PUSH
21301: LD_INT 12
21303: PUSH
21304: LD_INT 15
21306: PUSH
21307: LD_INT 16
21309: PUSH
21310: LD_INT 20
21312: PUSH
21313: LD_INT 21
21315: PUSH
21316: LD_INT 22
21318: PUSH
21319: LD_INT 23
21321: PUSH
21322: LD_INT 25
21324: PUSH
21325: LD_INT 26
21327: PUSH
21328: LD_INT 30
21330: PUSH
21331: LD_INT 31
21333: PUSH
21334: LD_INT 32
21336: PUSH
21337: LD_INT 36
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: LIST
21344: LIST
21345: LIST
21346: LIST
21347: LIST
21348: LIST
21349: LIST
21350: LIST
21351: LIST
21352: LIST
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: PUSH
21361: LD_INT 101
21363: PUSH
21364: LD_INT 102
21366: PUSH
21367: LD_INT 105
21369: PUSH
21370: LD_INT 106
21372: PUSH
21373: LD_INT 108
21375: PUSH
21376: LD_INT 109
21378: PUSH
21379: LD_INT 112
21381: PUSH
21382: LD_INT 116
21384: PUSH
21385: LD_INT 117
21387: PUSH
21388: LD_INT 118
21390: PUSH
21391: EMPTY
21392: LIST
21393: LIST
21394: LIST
21395: LIST
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: LIST
21402: PUSH
21403: EMPTY
21404: LIST
21405: LIST
21406: ST_TO_ADDR
21407: GO 23930
21409: LD_INT 7
21411: DOUBLE
21412: EQUAL
21413: IFTRUE 21417
21415: GO 21529
21417: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21418: LD_ADDR_VAR 0 2
21422: PUSH
21423: LD_INT 2
21425: PUSH
21426: LD_INT 4
21428: PUSH
21429: LD_INT 5
21431: PUSH
21432: LD_INT 7
21434: PUSH
21435: LD_INT 11
21437: PUSH
21438: LD_INT 12
21440: PUSH
21441: LD_INT 15
21443: PUSH
21444: LD_INT 16
21446: PUSH
21447: LD_INT 20
21449: PUSH
21450: LD_INT 21
21452: PUSH
21453: LD_INT 22
21455: PUSH
21456: LD_INT 23
21458: PUSH
21459: LD_INT 25
21461: PUSH
21462: LD_INT 26
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: PUSH
21481: LD_INT 101
21483: PUSH
21484: LD_INT 102
21486: PUSH
21487: LD_INT 103
21489: PUSH
21490: LD_INT 105
21492: PUSH
21493: LD_INT 106
21495: PUSH
21496: LD_INT 108
21498: PUSH
21499: LD_INT 112
21501: PUSH
21502: LD_INT 116
21504: PUSH
21505: LD_INT 117
21507: PUSH
21508: LD_INT 118
21510: PUSH
21511: EMPTY
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: PUSH
21523: EMPTY
21524: LIST
21525: LIST
21526: ST_TO_ADDR
21527: GO 23930
21529: LD_INT 8
21531: DOUBLE
21532: EQUAL
21533: IFTRUE 21537
21535: GO 21677
21537: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
21538: LD_ADDR_VAR 0 2
21542: PUSH
21543: LD_INT 2
21545: PUSH
21546: LD_INT 4
21548: PUSH
21549: LD_INT 5
21551: PUSH
21552: LD_INT 6
21554: PUSH
21555: LD_INT 7
21557: PUSH
21558: LD_INT 8
21560: PUSH
21561: LD_INT 11
21563: PUSH
21564: LD_INT 12
21566: PUSH
21567: LD_INT 15
21569: PUSH
21570: LD_INT 16
21572: PUSH
21573: LD_INT 20
21575: PUSH
21576: LD_INT 21
21578: PUSH
21579: LD_INT 22
21581: PUSH
21582: LD_INT 23
21584: PUSH
21585: LD_INT 25
21587: PUSH
21588: LD_INT 26
21590: PUSH
21591: LD_INT 30
21593: PUSH
21594: LD_INT 31
21596: PUSH
21597: LD_INT 32
21599: PUSH
21600: LD_INT 36
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 101
21627: PUSH
21628: LD_INT 102
21630: PUSH
21631: LD_INT 103
21633: PUSH
21634: LD_INT 105
21636: PUSH
21637: LD_INT 106
21639: PUSH
21640: LD_INT 108
21642: PUSH
21643: LD_INT 109
21645: PUSH
21646: LD_INT 112
21648: PUSH
21649: LD_INT 116
21651: PUSH
21652: LD_INT 117
21654: PUSH
21655: LD_INT 118
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: LIST
21662: LIST
21663: LIST
21664: LIST
21665: LIST
21666: LIST
21667: LIST
21668: LIST
21669: LIST
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: ST_TO_ADDR
21675: GO 23930
21677: LD_INT 9
21679: DOUBLE
21680: EQUAL
21681: IFTRUE 21685
21683: GO 21833
21685: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
21686: LD_ADDR_VAR 0 2
21690: PUSH
21691: LD_INT 2
21693: PUSH
21694: LD_INT 4
21696: PUSH
21697: LD_INT 5
21699: PUSH
21700: LD_INT 6
21702: PUSH
21703: LD_INT 7
21705: PUSH
21706: LD_INT 8
21708: PUSH
21709: LD_INT 11
21711: PUSH
21712: LD_INT 12
21714: PUSH
21715: LD_INT 15
21717: PUSH
21718: LD_INT 16
21720: PUSH
21721: LD_INT 20
21723: PUSH
21724: LD_INT 21
21726: PUSH
21727: LD_INT 22
21729: PUSH
21730: LD_INT 23
21732: PUSH
21733: LD_INT 25
21735: PUSH
21736: LD_INT 26
21738: PUSH
21739: LD_INT 28
21741: PUSH
21742: LD_INT 30
21744: PUSH
21745: LD_INT 31
21747: PUSH
21748: LD_INT 32
21750: PUSH
21751: LD_INT 36
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 101
21779: PUSH
21780: LD_INT 102
21782: PUSH
21783: LD_INT 103
21785: PUSH
21786: LD_INT 105
21788: PUSH
21789: LD_INT 106
21791: PUSH
21792: LD_INT 108
21794: PUSH
21795: LD_INT 109
21797: PUSH
21798: LD_INT 112
21800: PUSH
21801: LD_INT 114
21803: PUSH
21804: LD_INT 116
21806: PUSH
21807: LD_INT 117
21809: PUSH
21810: LD_INT 118
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: LIST
21817: LIST
21818: LIST
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: PUSH
21827: EMPTY
21828: LIST
21829: LIST
21830: ST_TO_ADDR
21831: GO 23930
21833: LD_INT 10
21835: DOUBLE
21836: EQUAL
21837: IFTRUE 21841
21839: GO 22037
21841: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
21842: LD_ADDR_VAR 0 2
21846: PUSH
21847: LD_INT 2
21849: PUSH
21850: LD_INT 4
21852: PUSH
21853: LD_INT 5
21855: PUSH
21856: LD_INT 6
21858: PUSH
21859: LD_INT 7
21861: PUSH
21862: LD_INT 8
21864: PUSH
21865: LD_INT 9
21867: PUSH
21868: LD_INT 10
21870: PUSH
21871: LD_INT 11
21873: PUSH
21874: LD_INT 12
21876: PUSH
21877: LD_INT 13
21879: PUSH
21880: LD_INT 14
21882: PUSH
21883: LD_INT 15
21885: PUSH
21886: LD_INT 16
21888: PUSH
21889: LD_INT 17
21891: PUSH
21892: LD_INT 18
21894: PUSH
21895: LD_INT 19
21897: PUSH
21898: LD_INT 20
21900: PUSH
21901: LD_INT 21
21903: PUSH
21904: LD_INT 22
21906: PUSH
21907: LD_INT 23
21909: PUSH
21910: LD_INT 24
21912: PUSH
21913: LD_INT 25
21915: PUSH
21916: LD_INT 26
21918: PUSH
21919: LD_INT 28
21921: PUSH
21922: LD_INT 30
21924: PUSH
21925: LD_INT 31
21927: PUSH
21928: LD_INT 32
21930: PUSH
21931: LD_INT 36
21933: PUSH
21934: EMPTY
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: LIST
21941: LIST
21942: LIST
21943: LIST
21944: LIST
21945: LIST
21946: LIST
21947: LIST
21948: LIST
21949: LIST
21950: LIST
21951: LIST
21952: LIST
21953: LIST
21954: LIST
21955: LIST
21956: LIST
21957: LIST
21958: LIST
21959: LIST
21960: LIST
21961: LIST
21962: LIST
21963: LIST
21964: PUSH
21965: LD_INT 101
21967: PUSH
21968: LD_INT 102
21970: PUSH
21971: LD_INT 103
21973: PUSH
21974: LD_INT 104
21976: PUSH
21977: LD_INT 105
21979: PUSH
21980: LD_INT 106
21982: PUSH
21983: LD_INT 107
21985: PUSH
21986: LD_INT 108
21988: PUSH
21989: LD_INT 109
21991: PUSH
21992: LD_INT 110
21994: PUSH
21995: LD_INT 111
21997: PUSH
21998: LD_INT 112
22000: PUSH
22001: LD_INT 114
22003: PUSH
22004: LD_INT 116
22006: PUSH
22007: LD_INT 117
22009: PUSH
22010: LD_INT 118
22012: PUSH
22013: EMPTY
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: LIST
22020: LIST
22021: LIST
22022: LIST
22023: LIST
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: LIST
22029: LIST
22030: PUSH
22031: EMPTY
22032: LIST
22033: LIST
22034: ST_TO_ADDR
22035: GO 23930
22037: LD_INT 11
22039: DOUBLE
22040: EQUAL
22041: IFTRUE 22045
22043: GO 22249
22045: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22046: LD_ADDR_VAR 0 2
22050: PUSH
22051: LD_INT 2
22053: PUSH
22054: LD_INT 3
22056: PUSH
22057: LD_INT 4
22059: PUSH
22060: LD_INT 5
22062: PUSH
22063: LD_INT 6
22065: PUSH
22066: LD_INT 7
22068: PUSH
22069: LD_INT 8
22071: PUSH
22072: LD_INT 9
22074: PUSH
22075: LD_INT 10
22077: PUSH
22078: LD_INT 11
22080: PUSH
22081: LD_INT 12
22083: PUSH
22084: LD_INT 13
22086: PUSH
22087: LD_INT 14
22089: PUSH
22090: LD_INT 15
22092: PUSH
22093: LD_INT 16
22095: PUSH
22096: LD_INT 17
22098: PUSH
22099: LD_INT 18
22101: PUSH
22102: LD_INT 19
22104: PUSH
22105: LD_INT 20
22107: PUSH
22108: LD_INT 21
22110: PUSH
22111: LD_INT 22
22113: PUSH
22114: LD_INT 23
22116: PUSH
22117: LD_INT 24
22119: PUSH
22120: LD_INT 25
22122: PUSH
22123: LD_INT 26
22125: PUSH
22126: LD_INT 28
22128: PUSH
22129: LD_INT 30
22131: PUSH
22132: LD_INT 31
22134: PUSH
22135: LD_INT 32
22137: PUSH
22138: LD_INT 34
22140: PUSH
22141: LD_INT 36
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: LIST
22163: LIST
22164: LIST
22165: LIST
22166: LIST
22167: LIST
22168: LIST
22169: LIST
22170: LIST
22171: LIST
22172: LIST
22173: LIST
22174: LIST
22175: LIST
22176: PUSH
22177: LD_INT 101
22179: PUSH
22180: LD_INT 102
22182: PUSH
22183: LD_INT 103
22185: PUSH
22186: LD_INT 104
22188: PUSH
22189: LD_INT 105
22191: PUSH
22192: LD_INT 106
22194: PUSH
22195: LD_INT 107
22197: PUSH
22198: LD_INT 108
22200: PUSH
22201: LD_INT 109
22203: PUSH
22204: LD_INT 110
22206: PUSH
22207: LD_INT 111
22209: PUSH
22210: LD_INT 112
22212: PUSH
22213: LD_INT 114
22215: PUSH
22216: LD_INT 116
22218: PUSH
22219: LD_INT 117
22221: PUSH
22222: LD_INT 118
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: LIST
22229: LIST
22230: LIST
22231: LIST
22232: LIST
22233: LIST
22234: LIST
22235: LIST
22236: LIST
22237: LIST
22238: LIST
22239: LIST
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: ST_TO_ADDR
22247: GO 23930
22249: LD_INT 12
22251: DOUBLE
22252: EQUAL
22253: IFTRUE 22257
22255: GO 22477
22257: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22258: LD_ADDR_VAR 0 2
22262: PUSH
22263: LD_INT 1
22265: PUSH
22266: LD_INT 2
22268: PUSH
22269: LD_INT 3
22271: PUSH
22272: LD_INT 4
22274: PUSH
22275: LD_INT 5
22277: PUSH
22278: LD_INT 6
22280: PUSH
22281: LD_INT 7
22283: PUSH
22284: LD_INT 8
22286: PUSH
22287: LD_INT 9
22289: PUSH
22290: LD_INT 10
22292: PUSH
22293: LD_INT 11
22295: PUSH
22296: LD_INT 12
22298: PUSH
22299: LD_INT 13
22301: PUSH
22302: LD_INT 14
22304: PUSH
22305: LD_INT 15
22307: PUSH
22308: LD_INT 16
22310: PUSH
22311: LD_INT 17
22313: PUSH
22314: LD_INT 18
22316: PUSH
22317: LD_INT 19
22319: PUSH
22320: LD_INT 20
22322: PUSH
22323: LD_INT 21
22325: PUSH
22326: LD_INT 22
22328: PUSH
22329: LD_INT 23
22331: PUSH
22332: LD_INT 24
22334: PUSH
22335: LD_INT 25
22337: PUSH
22338: LD_INT 26
22340: PUSH
22341: LD_INT 27
22343: PUSH
22344: LD_INT 28
22346: PUSH
22347: LD_INT 30
22349: PUSH
22350: LD_INT 31
22352: PUSH
22353: LD_INT 32
22355: PUSH
22356: LD_INT 33
22358: PUSH
22359: LD_INT 34
22361: PUSH
22362: LD_INT 36
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: LIST
22369: LIST
22370: LIST
22371: LIST
22372: LIST
22373: LIST
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: LIST
22379: LIST
22380: LIST
22381: LIST
22382: LIST
22383: LIST
22384: LIST
22385: LIST
22386: LIST
22387: LIST
22388: LIST
22389: LIST
22390: LIST
22391: LIST
22392: LIST
22393: LIST
22394: LIST
22395: LIST
22396: LIST
22397: LIST
22398: LIST
22399: LIST
22400: PUSH
22401: LD_INT 101
22403: PUSH
22404: LD_INT 102
22406: PUSH
22407: LD_INT 103
22409: PUSH
22410: LD_INT 104
22412: PUSH
22413: LD_INT 105
22415: PUSH
22416: LD_INT 106
22418: PUSH
22419: LD_INT 107
22421: PUSH
22422: LD_INT 108
22424: PUSH
22425: LD_INT 109
22427: PUSH
22428: LD_INT 110
22430: PUSH
22431: LD_INT 111
22433: PUSH
22434: LD_INT 112
22436: PUSH
22437: LD_INT 113
22439: PUSH
22440: LD_INT 114
22442: PUSH
22443: LD_INT 116
22445: PUSH
22446: LD_INT 117
22448: PUSH
22449: LD_INT 118
22451: PUSH
22452: EMPTY
22453: LIST
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: LIST
22459: LIST
22460: LIST
22461: LIST
22462: LIST
22463: LIST
22464: LIST
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: LIST
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: ST_TO_ADDR
22475: GO 23930
22477: LD_INT 13
22479: DOUBLE
22480: EQUAL
22481: IFTRUE 22485
22483: GO 22693
22485: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
22486: LD_ADDR_VAR 0 2
22490: PUSH
22491: LD_INT 1
22493: PUSH
22494: LD_INT 2
22496: PUSH
22497: LD_INT 3
22499: PUSH
22500: LD_INT 4
22502: PUSH
22503: LD_INT 5
22505: PUSH
22506: LD_INT 8
22508: PUSH
22509: LD_INT 9
22511: PUSH
22512: LD_INT 10
22514: PUSH
22515: LD_INT 11
22517: PUSH
22518: LD_INT 12
22520: PUSH
22521: LD_INT 14
22523: PUSH
22524: LD_INT 15
22526: PUSH
22527: LD_INT 16
22529: PUSH
22530: LD_INT 17
22532: PUSH
22533: LD_INT 18
22535: PUSH
22536: LD_INT 19
22538: PUSH
22539: LD_INT 20
22541: PUSH
22542: LD_INT 21
22544: PUSH
22545: LD_INT 22
22547: PUSH
22548: LD_INT 23
22550: PUSH
22551: LD_INT 24
22553: PUSH
22554: LD_INT 25
22556: PUSH
22557: LD_INT 26
22559: PUSH
22560: LD_INT 27
22562: PUSH
22563: LD_INT 28
22565: PUSH
22566: LD_INT 30
22568: PUSH
22569: LD_INT 31
22571: PUSH
22572: LD_INT 32
22574: PUSH
22575: LD_INT 33
22577: PUSH
22578: LD_INT 34
22580: PUSH
22581: LD_INT 36
22583: PUSH
22584: EMPTY
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: LIST
22596: LIST
22597: LIST
22598: LIST
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: LIST
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: LIST
22612: LIST
22613: LIST
22614: LIST
22615: LIST
22616: PUSH
22617: LD_INT 101
22619: PUSH
22620: LD_INT 102
22622: PUSH
22623: LD_INT 103
22625: PUSH
22626: LD_INT 104
22628: PUSH
22629: LD_INT 105
22631: PUSH
22632: LD_INT 106
22634: PUSH
22635: LD_INT 107
22637: PUSH
22638: LD_INT 108
22640: PUSH
22641: LD_INT 109
22643: PUSH
22644: LD_INT 110
22646: PUSH
22647: LD_INT 111
22649: PUSH
22650: LD_INT 112
22652: PUSH
22653: LD_INT 113
22655: PUSH
22656: LD_INT 114
22658: PUSH
22659: LD_INT 116
22661: PUSH
22662: LD_INT 117
22664: PUSH
22665: LD_INT 118
22667: PUSH
22668: EMPTY
22669: LIST
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: LIST
22675: LIST
22676: LIST
22677: LIST
22678: LIST
22679: LIST
22680: LIST
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: LIST
22686: PUSH
22687: EMPTY
22688: LIST
22689: LIST
22690: ST_TO_ADDR
22691: GO 23930
22693: LD_INT 14
22695: DOUBLE
22696: EQUAL
22697: IFTRUE 22701
22699: GO 22925
22701: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
22702: LD_ADDR_VAR 0 2
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: LD_INT 2
22712: PUSH
22713: LD_INT 3
22715: PUSH
22716: LD_INT 4
22718: PUSH
22719: LD_INT 5
22721: PUSH
22722: LD_INT 6
22724: PUSH
22725: LD_INT 7
22727: PUSH
22728: LD_INT 8
22730: PUSH
22731: LD_INT 9
22733: PUSH
22734: LD_INT 10
22736: PUSH
22737: LD_INT 11
22739: PUSH
22740: LD_INT 12
22742: PUSH
22743: LD_INT 13
22745: PUSH
22746: LD_INT 14
22748: PUSH
22749: LD_INT 15
22751: PUSH
22752: LD_INT 16
22754: PUSH
22755: LD_INT 17
22757: PUSH
22758: LD_INT 18
22760: PUSH
22761: LD_INT 19
22763: PUSH
22764: LD_INT 20
22766: PUSH
22767: LD_INT 21
22769: PUSH
22770: LD_INT 22
22772: PUSH
22773: LD_INT 23
22775: PUSH
22776: LD_INT 24
22778: PUSH
22779: LD_INT 25
22781: PUSH
22782: LD_INT 26
22784: PUSH
22785: LD_INT 27
22787: PUSH
22788: LD_INT 28
22790: PUSH
22791: LD_INT 29
22793: PUSH
22794: LD_INT 30
22796: PUSH
22797: LD_INT 31
22799: PUSH
22800: LD_INT 32
22802: PUSH
22803: LD_INT 33
22805: PUSH
22806: LD_INT 34
22808: PUSH
22809: LD_INT 36
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: LIST
22821: LIST
22822: LIST
22823: LIST
22824: LIST
22825: LIST
22826: LIST
22827: LIST
22828: LIST
22829: LIST
22830: LIST
22831: LIST
22832: LIST
22833: LIST
22834: LIST
22835: LIST
22836: LIST
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: PUSH
22849: LD_INT 101
22851: PUSH
22852: LD_INT 102
22854: PUSH
22855: LD_INT 103
22857: PUSH
22858: LD_INT 104
22860: PUSH
22861: LD_INT 105
22863: PUSH
22864: LD_INT 106
22866: PUSH
22867: LD_INT 107
22869: PUSH
22870: LD_INT 108
22872: PUSH
22873: LD_INT 109
22875: PUSH
22876: LD_INT 110
22878: PUSH
22879: LD_INT 111
22881: PUSH
22882: LD_INT 112
22884: PUSH
22885: LD_INT 113
22887: PUSH
22888: LD_INT 114
22890: PUSH
22891: LD_INT 116
22893: PUSH
22894: LD_INT 117
22896: PUSH
22897: LD_INT 118
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: LIST
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: PUSH
22919: EMPTY
22920: LIST
22921: LIST
22922: ST_TO_ADDR
22923: GO 23930
22925: LD_INT 15
22927: DOUBLE
22928: EQUAL
22929: IFTRUE 22933
22931: GO 23157
22933: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
22934: LD_ADDR_VAR 0 2
22938: PUSH
22939: LD_INT 1
22941: PUSH
22942: LD_INT 2
22944: PUSH
22945: LD_INT 3
22947: PUSH
22948: LD_INT 4
22950: PUSH
22951: LD_INT 5
22953: PUSH
22954: LD_INT 6
22956: PUSH
22957: LD_INT 7
22959: PUSH
22960: LD_INT 8
22962: PUSH
22963: LD_INT 9
22965: PUSH
22966: LD_INT 10
22968: PUSH
22969: LD_INT 11
22971: PUSH
22972: LD_INT 12
22974: PUSH
22975: LD_INT 13
22977: PUSH
22978: LD_INT 14
22980: PUSH
22981: LD_INT 15
22983: PUSH
22984: LD_INT 16
22986: PUSH
22987: LD_INT 17
22989: PUSH
22990: LD_INT 18
22992: PUSH
22993: LD_INT 19
22995: PUSH
22996: LD_INT 20
22998: PUSH
22999: LD_INT 21
23001: PUSH
23002: LD_INT 22
23004: PUSH
23005: LD_INT 23
23007: PUSH
23008: LD_INT 24
23010: PUSH
23011: LD_INT 25
23013: PUSH
23014: LD_INT 26
23016: PUSH
23017: LD_INT 27
23019: PUSH
23020: LD_INT 28
23022: PUSH
23023: LD_INT 29
23025: PUSH
23026: LD_INT 30
23028: PUSH
23029: LD_INT 31
23031: PUSH
23032: LD_INT 32
23034: PUSH
23035: LD_INT 33
23037: PUSH
23038: LD_INT 34
23040: PUSH
23041: LD_INT 36
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: LIST
23053: LIST
23054: LIST
23055: LIST
23056: LIST
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: LIST
23062: LIST
23063: LIST
23064: LIST
23065: LIST
23066: LIST
23067: LIST
23068: LIST
23069: LIST
23070: LIST
23071: LIST
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: LIST
23077: LIST
23078: LIST
23079: LIST
23080: PUSH
23081: LD_INT 101
23083: PUSH
23084: LD_INT 102
23086: PUSH
23087: LD_INT 103
23089: PUSH
23090: LD_INT 104
23092: PUSH
23093: LD_INT 105
23095: PUSH
23096: LD_INT 106
23098: PUSH
23099: LD_INT 107
23101: PUSH
23102: LD_INT 108
23104: PUSH
23105: LD_INT 109
23107: PUSH
23108: LD_INT 110
23110: PUSH
23111: LD_INT 111
23113: PUSH
23114: LD_INT 112
23116: PUSH
23117: LD_INT 113
23119: PUSH
23120: LD_INT 114
23122: PUSH
23123: LD_INT 116
23125: PUSH
23126: LD_INT 117
23128: PUSH
23129: LD_INT 118
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: ST_TO_ADDR
23155: GO 23930
23157: LD_INT 16
23159: DOUBLE
23160: EQUAL
23161: IFTRUE 23165
23163: GO 23301
23165: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23166: LD_ADDR_VAR 0 2
23170: PUSH
23171: LD_INT 2
23173: PUSH
23174: LD_INT 4
23176: PUSH
23177: LD_INT 5
23179: PUSH
23180: LD_INT 7
23182: PUSH
23183: LD_INT 11
23185: PUSH
23186: LD_INT 12
23188: PUSH
23189: LD_INT 15
23191: PUSH
23192: LD_INT 16
23194: PUSH
23195: LD_INT 20
23197: PUSH
23198: LD_INT 21
23200: PUSH
23201: LD_INT 22
23203: PUSH
23204: LD_INT 23
23206: PUSH
23207: LD_INT 25
23209: PUSH
23210: LD_INT 26
23212: PUSH
23213: LD_INT 30
23215: PUSH
23216: LD_INT 31
23218: PUSH
23219: LD_INT 32
23221: PUSH
23222: LD_INT 33
23224: PUSH
23225: LD_INT 34
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 101
23251: PUSH
23252: LD_INT 102
23254: PUSH
23255: LD_INT 103
23257: PUSH
23258: LD_INT 106
23260: PUSH
23261: LD_INT 108
23263: PUSH
23264: LD_INT 112
23266: PUSH
23267: LD_INT 113
23269: PUSH
23270: LD_INT 114
23272: PUSH
23273: LD_INT 116
23275: PUSH
23276: LD_INT 117
23278: PUSH
23279: LD_INT 118
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: LIST
23286: LIST
23287: LIST
23288: LIST
23289: LIST
23290: LIST
23291: LIST
23292: LIST
23293: LIST
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: ST_TO_ADDR
23299: GO 23930
23301: LD_INT 17
23303: DOUBLE
23304: EQUAL
23305: IFTRUE 23309
23307: GO 23533
23309: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23310: LD_ADDR_VAR 0 2
23314: PUSH
23315: LD_INT 1
23317: PUSH
23318: LD_INT 2
23320: PUSH
23321: LD_INT 3
23323: PUSH
23324: LD_INT 4
23326: PUSH
23327: LD_INT 5
23329: PUSH
23330: LD_INT 6
23332: PUSH
23333: LD_INT 7
23335: PUSH
23336: LD_INT 8
23338: PUSH
23339: LD_INT 9
23341: PUSH
23342: LD_INT 10
23344: PUSH
23345: LD_INT 11
23347: PUSH
23348: LD_INT 12
23350: PUSH
23351: LD_INT 13
23353: PUSH
23354: LD_INT 14
23356: PUSH
23357: LD_INT 15
23359: PUSH
23360: LD_INT 16
23362: PUSH
23363: LD_INT 17
23365: PUSH
23366: LD_INT 18
23368: PUSH
23369: LD_INT 19
23371: PUSH
23372: LD_INT 20
23374: PUSH
23375: LD_INT 21
23377: PUSH
23378: LD_INT 22
23380: PUSH
23381: LD_INT 23
23383: PUSH
23384: LD_INT 24
23386: PUSH
23387: LD_INT 25
23389: PUSH
23390: LD_INT 26
23392: PUSH
23393: LD_INT 27
23395: PUSH
23396: LD_INT 28
23398: PUSH
23399: LD_INT 29
23401: PUSH
23402: LD_INT 30
23404: PUSH
23405: LD_INT 31
23407: PUSH
23408: LD_INT 32
23410: PUSH
23411: LD_INT 33
23413: PUSH
23414: LD_INT 34
23416: PUSH
23417: LD_INT 36
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: LIST
23430: LIST
23431: LIST
23432: LIST
23433: LIST
23434: LIST
23435: LIST
23436: LIST
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: PUSH
23457: LD_INT 101
23459: PUSH
23460: LD_INT 102
23462: PUSH
23463: LD_INT 103
23465: PUSH
23466: LD_INT 104
23468: PUSH
23469: LD_INT 105
23471: PUSH
23472: LD_INT 106
23474: PUSH
23475: LD_INT 107
23477: PUSH
23478: LD_INT 108
23480: PUSH
23481: LD_INT 109
23483: PUSH
23484: LD_INT 110
23486: PUSH
23487: LD_INT 111
23489: PUSH
23490: LD_INT 112
23492: PUSH
23493: LD_INT 113
23495: PUSH
23496: LD_INT 114
23498: PUSH
23499: LD_INT 116
23501: PUSH
23502: LD_INT 117
23504: PUSH
23505: LD_INT 118
23507: PUSH
23508: EMPTY
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: LIST
23515: LIST
23516: LIST
23517: LIST
23518: LIST
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: LIST
23524: LIST
23525: LIST
23526: PUSH
23527: EMPTY
23528: LIST
23529: LIST
23530: ST_TO_ADDR
23531: GO 23930
23533: LD_INT 18
23535: DOUBLE
23536: EQUAL
23537: IFTRUE 23541
23539: GO 23689
23541: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
23542: LD_ADDR_VAR 0 2
23546: PUSH
23547: LD_INT 2
23549: PUSH
23550: LD_INT 4
23552: PUSH
23553: LD_INT 5
23555: PUSH
23556: LD_INT 7
23558: PUSH
23559: LD_INT 11
23561: PUSH
23562: LD_INT 12
23564: PUSH
23565: LD_INT 15
23567: PUSH
23568: LD_INT 16
23570: PUSH
23571: LD_INT 20
23573: PUSH
23574: LD_INT 21
23576: PUSH
23577: LD_INT 22
23579: PUSH
23580: LD_INT 23
23582: PUSH
23583: LD_INT 25
23585: PUSH
23586: LD_INT 26
23588: PUSH
23589: LD_INT 30
23591: PUSH
23592: LD_INT 31
23594: PUSH
23595: LD_INT 32
23597: PUSH
23598: LD_INT 33
23600: PUSH
23601: LD_INT 34
23603: PUSH
23604: LD_INT 35
23606: PUSH
23607: LD_INT 36
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: LIST
23624: LIST
23625: LIST
23626: LIST
23627: LIST
23628: LIST
23629: LIST
23630: LIST
23631: LIST
23632: PUSH
23633: LD_INT 101
23635: PUSH
23636: LD_INT 102
23638: PUSH
23639: LD_INT 103
23641: PUSH
23642: LD_INT 106
23644: PUSH
23645: LD_INT 108
23647: PUSH
23648: LD_INT 112
23650: PUSH
23651: LD_INT 113
23653: PUSH
23654: LD_INT 114
23656: PUSH
23657: LD_INT 115
23659: PUSH
23660: LD_INT 116
23662: PUSH
23663: LD_INT 117
23665: PUSH
23666: LD_INT 118
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: ST_TO_ADDR
23687: GO 23930
23689: LD_INT 19
23691: DOUBLE
23692: EQUAL
23693: IFTRUE 23697
23695: GO 23929
23697: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
23698: LD_ADDR_VAR 0 2
23702: PUSH
23703: LD_INT 1
23705: PUSH
23706: LD_INT 2
23708: PUSH
23709: LD_INT 3
23711: PUSH
23712: LD_INT 4
23714: PUSH
23715: LD_INT 5
23717: PUSH
23718: LD_INT 6
23720: PUSH
23721: LD_INT 7
23723: PUSH
23724: LD_INT 8
23726: PUSH
23727: LD_INT 9
23729: PUSH
23730: LD_INT 10
23732: PUSH
23733: LD_INT 11
23735: PUSH
23736: LD_INT 12
23738: PUSH
23739: LD_INT 13
23741: PUSH
23742: LD_INT 14
23744: PUSH
23745: LD_INT 15
23747: PUSH
23748: LD_INT 16
23750: PUSH
23751: LD_INT 17
23753: PUSH
23754: LD_INT 18
23756: PUSH
23757: LD_INT 19
23759: PUSH
23760: LD_INT 20
23762: PUSH
23763: LD_INT 21
23765: PUSH
23766: LD_INT 22
23768: PUSH
23769: LD_INT 23
23771: PUSH
23772: LD_INT 24
23774: PUSH
23775: LD_INT 25
23777: PUSH
23778: LD_INT 26
23780: PUSH
23781: LD_INT 27
23783: PUSH
23784: LD_INT 28
23786: PUSH
23787: LD_INT 29
23789: PUSH
23790: LD_INT 30
23792: PUSH
23793: LD_INT 31
23795: PUSH
23796: LD_INT 32
23798: PUSH
23799: LD_INT 33
23801: PUSH
23802: LD_INT 34
23804: PUSH
23805: LD_INT 35
23807: PUSH
23808: LD_INT 36
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 101
23851: PUSH
23852: LD_INT 102
23854: PUSH
23855: LD_INT 103
23857: PUSH
23858: LD_INT 104
23860: PUSH
23861: LD_INT 105
23863: PUSH
23864: LD_INT 106
23866: PUSH
23867: LD_INT 107
23869: PUSH
23870: LD_INT 108
23872: PUSH
23873: LD_INT 109
23875: PUSH
23876: LD_INT 110
23878: PUSH
23879: LD_INT 111
23881: PUSH
23882: LD_INT 112
23884: PUSH
23885: LD_INT 113
23887: PUSH
23888: LD_INT 114
23890: PUSH
23891: LD_INT 115
23893: PUSH
23894: LD_INT 116
23896: PUSH
23897: LD_INT 117
23899: PUSH
23900: LD_INT 118
23902: PUSH
23903: EMPTY
23904: LIST
23905: LIST
23906: LIST
23907: LIST
23908: LIST
23909: LIST
23910: LIST
23911: LIST
23912: LIST
23913: LIST
23914: LIST
23915: LIST
23916: LIST
23917: LIST
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: PUSH
23923: EMPTY
23924: LIST
23925: LIST
23926: ST_TO_ADDR
23927: GO 23930
23929: POP
// end else
23930: GO 24161
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
23932: LD_ADDR_VAR 0 2
23936: PUSH
23937: LD_INT 1
23939: PUSH
23940: LD_INT 2
23942: PUSH
23943: LD_INT 3
23945: PUSH
23946: LD_INT 4
23948: PUSH
23949: LD_INT 5
23951: PUSH
23952: LD_INT 6
23954: PUSH
23955: LD_INT 7
23957: PUSH
23958: LD_INT 8
23960: PUSH
23961: LD_INT 9
23963: PUSH
23964: LD_INT 10
23966: PUSH
23967: LD_INT 11
23969: PUSH
23970: LD_INT 12
23972: PUSH
23973: LD_INT 13
23975: PUSH
23976: LD_INT 14
23978: PUSH
23979: LD_INT 15
23981: PUSH
23982: LD_INT 16
23984: PUSH
23985: LD_INT 17
23987: PUSH
23988: LD_INT 18
23990: PUSH
23991: LD_INT 19
23993: PUSH
23994: LD_INT 20
23996: PUSH
23997: LD_INT 21
23999: PUSH
24000: LD_INT 22
24002: PUSH
24003: LD_INT 23
24005: PUSH
24006: LD_INT 24
24008: PUSH
24009: LD_INT 25
24011: PUSH
24012: LD_INT 26
24014: PUSH
24015: LD_INT 27
24017: PUSH
24018: LD_INT 28
24020: PUSH
24021: LD_INT 29
24023: PUSH
24024: LD_INT 30
24026: PUSH
24027: LD_INT 31
24029: PUSH
24030: LD_INT 32
24032: PUSH
24033: LD_INT 33
24035: PUSH
24036: LD_INT 34
24038: PUSH
24039: LD_INT 35
24041: PUSH
24042: LD_INT 36
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 101
24085: PUSH
24086: LD_INT 102
24088: PUSH
24089: LD_INT 103
24091: PUSH
24092: LD_INT 104
24094: PUSH
24095: LD_INT 105
24097: PUSH
24098: LD_INT 106
24100: PUSH
24101: LD_INT 107
24103: PUSH
24104: LD_INT 108
24106: PUSH
24107: LD_INT 109
24109: PUSH
24110: LD_INT 110
24112: PUSH
24113: LD_INT 111
24115: PUSH
24116: LD_INT 112
24118: PUSH
24119: LD_INT 113
24121: PUSH
24122: LD_INT 114
24124: PUSH
24125: LD_INT 115
24127: PUSH
24128: LD_INT 116
24130: PUSH
24131: LD_INT 117
24133: PUSH
24134: LD_INT 118
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: ST_TO_ADDR
// if result then
24161: LD_VAR 0 2
24165: IFFALSE 24951
// begin normal :=  ;
24167: LD_ADDR_VAR 0 5
24171: PUSH
24172: LD_STRING 
24174: ST_TO_ADDR
// hardcore :=  ;
24175: LD_ADDR_VAR 0 6
24179: PUSH
24180: LD_STRING 
24182: ST_TO_ADDR
// active :=  ;
24183: LD_ADDR_VAR 0 7
24187: PUSH
24188: LD_STRING 
24190: ST_TO_ADDR
// for i = 1 to normalCounter do
24191: LD_ADDR_VAR 0 8
24195: PUSH
24196: DOUBLE
24197: LD_INT 1
24199: DEC
24200: ST_TO_ADDR
24201: LD_EXP 47
24205: PUSH
24206: FOR_TO
24207: IFFALSE 24308
// begin tmp := 0 ;
24209: LD_ADDR_VAR 0 3
24213: PUSH
24214: LD_STRING 0
24216: ST_TO_ADDR
// if result [ 1 ] then
24217: LD_VAR 0 2
24221: PUSH
24222: LD_INT 1
24224: ARRAY
24225: IFFALSE 24290
// if result [ 1 ] [ 1 ] = i then
24227: LD_VAR 0 2
24231: PUSH
24232: LD_INT 1
24234: ARRAY
24235: PUSH
24236: LD_INT 1
24238: ARRAY
24239: PUSH
24240: LD_VAR 0 8
24244: EQUAL
24245: IFFALSE 24290
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24247: LD_ADDR_VAR 0 2
24251: PUSH
24252: LD_VAR 0 2
24256: PPUSH
24257: LD_INT 1
24259: PPUSH
24260: LD_VAR 0 2
24264: PUSH
24265: LD_INT 1
24267: ARRAY
24268: PPUSH
24269: LD_INT 1
24271: PPUSH
24272: CALL_OW 3
24276: PPUSH
24277: CALL_OW 1
24281: ST_TO_ADDR
// tmp := 1 ;
24282: LD_ADDR_VAR 0 3
24286: PUSH
24287: LD_STRING 1
24289: ST_TO_ADDR
// end ; normal := normal & tmp ;
24290: LD_ADDR_VAR 0 5
24294: PUSH
24295: LD_VAR 0 5
24299: PUSH
24300: LD_VAR 0 3
24304: STR
24305: ST_TO_ADDR
// end ;
24306: GO 24206
24308: POP
24309: POP
// for i = 1 to hardcoreCounter do
24310: LD_ADDR_VAR 0 8
24314: PUSH
24315: DOUBLE
24316: LD_INT 1
24318: DEC
24319: ST_TO_ADDR
24320: LD_EXP 48
24324: PUSH
24325: FOR_TO
24326: IFFALSE 24431
// begin tmp := 0 ;
24328: LD_ADDR_VAR 0 3
24332: PUSH
24333: LD_STRING 0
24335: ST_TO_ADDR
// if result [ 2 ] then
24336: LD_VAR 0 2
24340: PUSH
24341: LD_INT 2
24343: ARRAY
24344: IFFALSE 24413
// if result [ 2 ] [ 1 ] = 100 + i then
24346: LD_VAR 0 2
24350: PUSH
24351: LD_INT 2
24353: ARRAY
24354: PUSH
24355: LD_INT 1
24357: ARRAY
24358: PUSH
24359: LD_INT 100
24361: PUSH
24362: LD_VAR 0 8
24366: PLUS
24367: EQUAL
24368: IFFALSE 24413
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24370: LD_ADDR_VAR 0 2
24374: PUSH
24375: LD_VAR 0 2
24379: PPUSH
24380: LD_INT 2
24382: PPUSH
24383: LD_VAR 0 2
24387: PUSH
24388: LD_INT 2
24390: ARRAY
24391: PPUSH
24392: LD_INT 1
24394: PPUSH
24395: CALL_OW 3
24399: PPUSH
24400: CALL_OW 1
24404: ST_TO_ADDR
// tmp := 1 ;
24405: LD_ADDR_VAR 0 3
24409: PUSH
24410: LD_STRING 1
24412: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24413: LD_ADDR_VAR 0 6
24417: PUSH
24418: LD_VAR 0 6
24422: PUSH
24423: LD_VAR 0 3
24427: STR
24428: ST_TO_ADDR
// end ;
24429: GO 24325
24431: POP
24432: POP
// if isGameLoad then
24433: LD_VAR 0 1
24437: IFFALSE 24912
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24439: LD_ADDR_VAR 0 4
24443: PUSH
24444: LD_EXP 51
24448: PUSH
24449: LD_EXP 50
24453: PUSH
24454: LD_EXP 52
24458: PUSH
24459: LD_EXP 49
24463: PUSH
24464: LD_EXP 53
24468: PUSH
24469: LD_EXP 54
24473: PUSH
24474: LD_EXP 55
24478: PUSH
24479: LD_EXP 56
24483: PUSH
24484: LD_EXP 57
24488: PUSH
24489: LD_EXP 58
24493: PUSH
24494: LD_EXP 59
24498: PUSH
24499: LD_EXP 60
24503: PUSH
24504: LD_EXP 61
24508: PUSH
24509: LD_EXP 62
24513: PUSH
24514: LD_EXP 70
24518: PUSH
24519: LD_EXP 71
24523: PUSH
24524: LD_EXP 72
24528: PUSH
24529: LD_EXP 73
24533: PUSH
24534: LD_EXP 75
24538: PUSH
24539: LD_EXP 76
24543: PUSH
24544: LD_EXP 77
24548: PUSH
24549: LD_EXP 80
24553: PUSH
24554: LD_EXP 82
24558: PUSH
24559: LD_EXP 83
24563: PUSH
24564: LD_EXP 84
24568: PUSH
24569: LD_EXP 86
24573: PUSH
24574: LD_EXP 87
24578: PUSH
24579: LD_EXP 90
24583: PUSH
24584: LD_EXP 91
24588: PUSH
24589: LD_EXP 92
24593: PUSH
24594: LD_EXP 93
24598: PUSH
24599: LD_EXP 94
24603: PUSH
24604: LD_EXP 95
24608: PUSH
24609: LD_EXP 96
24613: PUSH
24614: LD_EXP 97
24618: PUSH
24619: LD_EXP 98
24623: PUSH
24624: LD_EXP 63
24628: PUSH
24629: LD_EXP 64
24633: PUSH
24634: LD_EXP 67
24638: PUSH
24639: LD_EXP 68
24643: PUSH
24644: LD_EXP 69
24648: PUSH
24649: LD_EXP 65
24653: PUSH
24654: LD_EXP 66
24658: PUSH
24659: LD_EXP 74
24663: PUSH
24664: LD_EXP 78
24668: PUSH
24669: LD_EXP 79
24673: PUSH
24674: LD_EXP 81
24678: PUSH
24679: LD_EXP 85
24683: PUSH
24684: LD_EXP 88
24688: PUSH
24689: LD_EXP 89
24693: PUSH
24694: LD_EXP 99
24698: PUSH
24699: LD_EXP 100
24703: PUSH
24704: LD_EXP 101
24708: PUSH
24709: LD_EXP 102
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: LIST
24751: LIST
24752: LIST
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: LIST
24758: LIST
24759: LIST
24760: LIST
24761: LIST
24762: LIST
24763: LIST
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: ST_TO_ADDR
// tmp :=  ;
24770: LD_ADDR_VAR 0 3
24774: PUSH
24775: LD_STRING 
24777: ST_TO_ADDR
// for i = 1 to normalCounter do
24778: LD_ADDR_VAR 0 8
24782: PUSH
24783: DOUBLE
24784: LD_INT 1
24786: DEC
24787: ST_TO_ADDR
24788: LD_EXP 47
24792: PUSH
24793: FOR_TO
24794: IFFALSE 24830
// begin if flags [ i ] then
24796: LD_VAR 0 4
24800: PUSH
24801: LD_VAR 0 8
24805: ARRAY
24806: IFFALSE 24828
// tmp := tmp & i & ; ;
24808: LD_ADDR_VAR 0 3
24812: PUSH
24813: LD_VAR 0 3
24817: PUSH
24818: LD_VAR 0 8
24822: STR
24823: PUSH
24824: LD_STRING ;
24826: STR
24827: ST_TO_ADDR
// end ;
24828: GO 24793
24830: POP
24831: POP
// for i = 1 to hardcoreCounter do
24832: LD_ADDR_VAR 0 8
24836: PUSH
24837: DOUBLE
24838: LD_INT 1
24840: DEC
24841: ST_TO_ADDR
24842: LD_EXP 48
24846: PUSH
24847: FOR_TO
24848: IFFALSE 24894
// begin if flags [ normalCounter + i ] then
24850: LD_VAR 0 4
24854: PUSH
24855: LD_EXP 47
24859: PUSH
24860: LD_VAR 0 8
24864: PLUS
24865: ARRAY
24866: IFFALSE 24892
// tmp := tmp & ( 100 + i ) & ; ;
24868: LD_ADDR_VAR 0 3
24872: PUSH
24873: LD_VAR 0 3
24877: PUSH
24878: LD_INT 100
24880: PUSH
24881: LD_VAR 0 8
24885: PLUS
24886: STR
24887: PUSH
24888: LD_STRING ;
24890: STR
24891: ST_TO_ADDR
// end ;
24892: GO 24847
24894: POP
24895: POP
// if tmp then
24896: LD_VAR 0 3
24900: IFFALSE 24912
// active := tmp ;
24902: LD_ADDR_VAR 0 7
24906: PUSH
24907: LD_VAR 0 3
24911: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
24912: LD_STRING getStreamItemsFromMission("
24914: PUSH
24915: LD_VAR 0 5
24919: STR
24920: PUSH
24921: LD_STRING ","
24923: STR
24924: PUSH
24925: LD_VAR 0 6
24929: STR
24930: PUSH
24931: LD_STRING ","
24933: STR
24934: PUSH
24935: LD_VAR 0 7
24939: STR
24940: PUSH
24941: LD_STRING ")
24943: STR
24944: PPUSH
24945: CALL_OW 559
// end else
24949: GO 24958
// ToLua ( getStreamItemsFromMission("","","") ) ;
24951: LD_STRING getStreamItemsFromMission("","","")
24953: PPUSH
24954: CALL_OW 559
// end ;
24958: LD_VAR 0 2
24962: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
24963: LD_EXP 46
24967: PUSH
24968: LD_EXP 51
24972: AND
24973: IFFALSE 25097
24975: GO 24977
24977: DISABLE
24978: LD_INT 0
24980: PPUSH
24981: PPUSH
// begin enable ;
24982: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
24983: LD_ADDR_VAR 0 2
24987: PUSH
24988: LD_INT 22
24990: PUSH
24991: LD_OWVAR 2
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 2
25002: PUSH
25003: LD_INT 34
25005: PUSH
25006: LD_INT 7
25008: PUSH
25009: EMPTY
25010: LIST
25011: LIST
25012: PUSH
25013: LD_INT 34
25015: PUSH
25016: LD_INT 45
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PUSH
25023: LD_INT 34
25025: PUSH
25026: LD_INT 28
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PUSH
25033: LD_INT 34
25035: PUSH
25036: LD_INT 47
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: PUSH
25050: EMPTY
25051: LIST
25052: LIST
25053: PPUSH
25054: CALL_OW 69
25058: ST_TO_ADDR
// if not tmp then
25059: LD_VAR 0 2
25063: NOT
25064: IFFALSE 25068
// exit ;
25066: GO 25097
// for i in tmp do
25068: LD_ADDR_VAR 0 1
25072: PUSH
25073: LD_VAR 0 2
25077: PUSH
25078: FOR_IN
25079: IFFALSE 25095
// begin SetLives ( i , 0 ) ;
25081: LD_VAR 0 1
25085: PPUSH
25086: LD_INT 0
25088: PPUSH
25089: CALL_OW 234
// end ;
25093: GO 25078
25095: POP
25096: POP
// end ;
25097: PPOPN 2
25099: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25100: LD_EXP 46
25104: PUSH
25105: LD_EXP 52
25109: AND
25110: IFFALSE 25194
25112: GO 25114
25114: DISABLE
25115: LD_INT 0
25117: PPUSH
25118: PPUSH
// begin enable ;
25119: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25120: LD_ADDR_VAR 0 2
25124: PUSH
25125: LD_INT 22
25127: PUSH
25128: LD_OWVAR 2
25132: PUSH
25133: EMPTY
25134: LIST
25135: LIST
25136: PUSH
25137: LD_INT 32
25139: PUSH
25140: LD_INT 3
25142: PUSH
25143: EMPTY
25144: LIST
25145: LIST
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PPUSH
25151: CALL_OW 69
25155: ST_TO_ADDR
// if not tmp then
25156: LD_VAR 0 2
25160: NOT
25161: IFFALSE 25165
// exit ;
25163: GO 25194
// for i in tmp do
25165: LD_ADDR_VAR 0 1
25169: PUSH
25170: LD_VAR 0 2
25174: PUSH
25175: FOR_IN
25176: IFFALSE 25192
// begin SetLives ( i , 0 ) ;
25178: LD_VAR 0 1
25182: PPUSH
25183: LD_INT 0
25185: PPUSH
25186: CALL_OW 234
// end ;
25190: GO 25175
25192: POP
25193: POP
// end ;
25194: PPOPN 2
25196: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25197: LD_EXP 46
25201: PUSH
25202: LD_EXP 49
25206: AND
25207: IFFALSE 25300
25209: GO 25211
25211: DISABLE
25212: LD_INT 0
25214: PPUSH
// begin enable ;
25215: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25216: LD_ADDR_VAR 0 1
25220: PUSH
25221: LD_INT 22
25223: PUSH
25224: LD_OWVAR 2
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 2
25235: PUSH
25236: LD_INT 25
25238: PUSH
25239: LD_INT 5
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PUSH
25246: LD_INT 25
25248: PUSH
25249: LD_INT 9
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: PUSH
25256: LD_INT 25
25258: PUSH
25259: LD_INT 8
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: PUSH
25272: EMPTY
25273: LIST
25274: LIST
25275: PPUSH
25276: CALL_OW 69
25280: PUSH
25281: FOR_IN
25282: IFFALSE 25298
// begin SetClass ( i , 1 ) ;
25284: LD_VAR 0 1
25288: PPUSH
25289: LD_INT 1
25291: PPUSH
25292: CALL_OW 336
// end ;
25296: GO 25281
25298: POP
25299: POP
// end ;
25300: PPOPN 1
25302: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25303: LD_EXP 46
25307: PUSH
25308: LD_EXP 50
25312: AND
25313: PUSH
25314: LD_OWVAR 65
25318: PUSH
25319: LD_INT 7
25321: LESS
25322: AND
25323: IFFALSE 25337
25325: GO 25327
25327: DISABLE
// begin enable ;
25328: ENABLE
// game_speed := 7 ;
25329: LD_ADDR_OWVAR 65
25333: PUSH
25334: LD_INT 7
25336: ST_TO_ADDR
// end ;
25337: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25338: LD_EXP 46
25342: PUSH
25343: LD_EXP 53
25347: AND
25348: IFFALSE 25550
25350: GO 25352
25352: DISABLE
25353: LD_INT 0
25355: PPUSH
25356: PPUSH
25357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25358: LD_ADDR_VAR 0 3
25362: PUSH
25363: LD_INT 81
25365: PUSH
25366: LD_OWVAR 2
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 21
25377: PUSH
25378: LD_INT 1
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PPUSH
25389: CALL_OW 69
25393: ST_TO_ADDR
// if not tmp then
25394: LD_VAR 0 3
25398: NOT
25399: IFFALSE 25403
// exit ;
25401: GO 25550
// if tmp > 5 then
25403: LD_VAR 0 3
25407: PUSH
25408: LD_INT 5
25410: GREATER
25411: IFFALSE 25423
// k := 5 else
25413: LD_ADDR_VAR 0 2
25417: PUSH
25418: LD_INT 5
25420: ST_TO_ADDR
25421: GO 25433
// k := tmp ;
25423: LD_ADDR_VAR 0 2
25427: PUSH
25428: LD_VAR 0 3
25432: ST_TO_ADDR
// for i := 1 to k do
25433: LD_ADDR_VAR 0 1
25437: PUSH
25438: DOUBLE
25439: LD_INT 1
25441: DEC
25442: ST_TO_ADDR
25443: LD_VAR 0 2
25447: PUSH
25448: FOR_TO
25449: IFFALSE 25548
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25451: LD_VAR 0 3
25455: PUSH
25456: LD_VAR 0 1
25460: ARRAY
25461: PPUSH
25462: LD_VAR 0 1
25466: PUSH
25467: LD_INT 4
25469: MOD
25470: PUSH
25471: LD_INT 1
25473: PLUS
25474: PPUSH
25475: CALL_OW 259
25479: PUSH
25480: LD_INT 10
25482: LESS
25483: IFFALSE 25546
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
25485: LD_VAR 0 3
25489: PUSH
25490: LD_VAR 0 1
25494: ARRAY
25495: PPUSH
25496: LD_VAR 0 1
25500: PUSH
25501: LD_INT 4
25503: MOD
25504: PUSH
25505: LD_INT 1
25507: PLUS
25508: PPUSH
25509: LD_VAR 0 3
25513: PUSH
25514: LD_VAR 0 1
25518: ARRAY
25519: PPUSH
25520: LD_VAR 0 1
25524: PUSH
25525: LD_INT 4
25527: MOD
25528: PUSH
25529: LD_INT 1
25531: PLUS
25532: PPUSH
25533: CALL_OW 259
25537: PUSH
25538: LD_INT 1
25540: PLUS
25541: PPUSH
25542: CALL_OW 237
25546: GO 25448
25548: POP
25549: POP
// end ;
25550: PPOPN 3
25552: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
25553: LD_EXP 46
25557: PUSH
25558: LD_EXP 54
25562: AND
25563: IFFALSE 25583
25565: GO 25567
25567: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
25568: LD_INT 4
25570: PPUSH
25571: LD_OWVAR 2
25575: PPUSH
25576: LD_INT 0
25578: PPUSH
25579: CALL_OW 324
25583: END
// every 0 0$1 trigger StreamModeActive and sShovel do
25584: LD_EXP 46
25588: PUSH
25589: LD_EXP 83
25593: AND
25594: IFFALSE 25614
25596: GO 25598
25598: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
25599: LD_INT 19
25601: PPUSH
25602: LD_OWVAR 2
25606: PPUSH
25607: LD_INT 0
25609: PPUSH
25610: CALL_OW 324
25614: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
25615: LD_EXP 46
25619: PUSH
25620: LD_EXP 55
25624: AND
25625: IFFALSE 25727
25627: GO 25629
25629: DISABLE
25630: LD_INT 0
25632: PPUSH
25633: PPUSH
// begin enable ;
25634: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
25635: LD_ADDR_VAR 0 2
25639: PUSH
25640: LD_INT 22
25642: PUSH
25643: LD_OWVAR 2
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 2
25654: PUSH
25655: LD_INT 34
25657: PUSH
25658: LD_INT 11
25660: PUSH
25661: EMPTY
25662: LIST
25663: LIST
25664: PUSH
25665: LD_INT 34
25667: PUSH
25668: LD_INT 30
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: LIST
25679: PUSH
25680: EMPTY
25681: LIST
25682: LIST
25683: PPUSH
25684: CALL_OW 69
25688: ST_TO_ADDR
// if not tmp then
25689: LD_VAR 0 2
25693: NOT
25694: IFFALSE 25698
// exit ;
25696: GO 25727
// for i in tmp do
25698: LD_ADDR_VAR 0 1
25702: PUSH
25703: LD_VAR 0 2
25707: PUSH
25708: FOR_IN
25709: IFFALSE 25725
// begin SetLives ( i , 0 ) ;
25711: LD_VAR 0 1
25715: PPUSH
25716: LD_INT 0
25718: PPUSH
25719: CALL_OW 234
// end ;
25723: GO 25708
25725: POP
25726: POP
// end ;
25727: PPOPN 2
25729: END
// every 0 0$1 trigger StreamModeActive and sBunker do
25730: LD_EXP 46
25734: PUSH
25735: LD_EXP 56
25739: AND
25740: IFFALSE 25760
25742: GO 25744
25744: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
25745: LD_INT 32
25747: PPUSH
25748: LD_OWVAR 2
25752: PPUSH
25753: LD_INT 0
25755: PPUSH
25756: CALL_OW 324
25760: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
25761: LD_EXP 46
25765: PUSH
25766: LD_EXP 57
25770: AND
25771: IFFALSE 25952
25773: GO 25775
25775: DISABLE
25776: LD_INT 0
25778: PPUSH
25779: PPUSH
25780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
25781: LD_ADDR_VAR 0 2
25785: PUSH
25786: LD_INT 22
25788: PUSH
25789: LD_OWVAR 2
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 33
25800: PUSH
25801: LD_INT 3
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: PPUSH
25812: CALL_OW 69
25816: ST_TO_ADDR
// if not tmp then
25817: LD_VAR 0 2
25821: NOT
25822: IFFALSE 25826
// exit ;
25824: GO 25952
// side := 0 ;
25826: LD_ADDR_VAR 0 3
25830: PUSH
25831: LD_INT 0
25833: ST_TO_ADDR
// for i := 1 to 8 do
25834: LD_ADDR_VAR 0 1
25838: PUSH
25839: DOUBLE
25840: LD_INT 1
25842: DEC
25843: ST_TO_ADDR
25844: LD_INT 8
25846: PUSH
25847: FOR_TO
25848: IFFALSE 25896
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
25850: LD_OWVAR 2
25854: PUSH
25855: LD_VAR 0 1
25859: NONEQUAL
25860: PUSH
25861: LD_OWVAR 2
25865: PPUSH
25866: LD_VAR 0 1
25870: PPUSH
25871: CALL_OW 81
25875: PUSH
25876: LD_INT 2
25878: EQUAL
25879: AND
25880: IFFALSE 25894
// begin side := i ;
25882: LD_ADDR_VAR 0 3
25886: PUSH
25887: LD_VAR 0 1
25891: ST_TO_ADDR
// break ;
25892: GO 25896
// end ;
25894: GO 25847
25896: POP
25897: POP
// if not side then
25898: LD_VAR 0 3
25902: NOT
25903: IFFALSE 25907
// exit ;
25905: GO 25952
// for i := 1 to tmp do
25907: LD_ADDR_VAR 0 1
25911: PUSH
25912: DOUBLE
25913: LD_INT 1
25915: DEC
25916: ST_TO_ADDR
25917: LD_VAR 0 2
25921: PUSH
25922: FOR_TO
25923: IFFALSE 25950
// if Prob ( 60 ) then
25925: LD_INT 60
25927: PPUSH
25928: CALL_OW 13
25932: IFFALSE 25948
// SetSide ( i , side ) ;
25934: LD_VAR 0 1
25938: PPUSH
25939: LD_VAR 0 3
25943: PPUSH
25944: CALL_OW 235
25948: GO 25922
25950: POP
25951: POP
// end ;
25952: PPOPN 3
25954: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
25955: LD_EXP 46
25959: PUSH
25960: LD_EXP 59
25964: AND
25965: IFFALSE 26084
25967: GO 25969
25969: DISABLE
25970: LD_INT 0
25972: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
25973: LD_ADDR_VAR 0 1
25977: PUSH
25978: LD_INT 22
25980: PUSH
25981: LD_OWVAR 2
25985: PUSH
25986: EMPTY
25987: LIST
25988: LIST
25989: PUSH
25990: LD_INT 21
25992: PUSH
25993: LD_INT 1
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 3
26002: PUSH
26003: LD_INT 23
26005: PUSH
26006: LD_INT 0
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: EMPTY
26018: LIST
26019: LIST
26020: LIST
26021: PPUSH
26022: CALL_OW 69
26026: PUSH
26027: FOR_IN
26028: IFFALSE 26082
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26030: LD_VAR 0 1
26034: PPUSH
26035: CALL_OW 257
26039: PUSH
26040: LD_INT 1
26042: PUSH
26043: LD_INT 2
26045: PUSH
26046: LD_INT 3
26048: PUSH
26049: LD_INT 4
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: IN
26058: IFFALSE 26080
// SetClass ( un , rand ( 1 , 4 ) ) ;
26060: LD_VAR 0 1
26064: PPUSH
26065: LD_INT 1
26067: PPUSH
26068: LD_INT 4
26070: PPUSH
26071: CALL_OW 12
26075: PPUSH
26076: CALL_OW 336
26080: GO 26027
26082: POP
26083: POP
// end ;
26084: PPOPN 1
26086: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26087: LD_EXP 46
26091: PUSH
26092: LD_EXP 58
26096: AND
26097: IFFALSE 26176
26099: GO 26101
26101: DISABLE
26102: LD_INT 0
26104: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26105: LD_ADDR_VAR 0 1
26109: PUSH
26110: LD_INT 22
26112: PUSH
26113: LD_OWVAR 2
26117: PUSH
26118: EMPTY
26119: LIST
26120: LIST
26121: PUSH
26122: LD_INT 21
26124: PUSH
26125: LD_INT 3
26127: PUSH
26128: EMPTY
26129: LIST
26130: LIST
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PPUSH
26136: CALL_OW 69
26140: ST_TO_ADDR
// if not tmp then
26141: LD_VAR 0 1
26145: NOT
26146: IFFALSE 26150
// exit ;
26148: GO 26176
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26150: LD_VAR 0 1
26154: PUSH
26155: LD_INT 1
26157: PPUSH
26158: LD_VAR 0 1
26162: PPUSH
26163: CALL_OW 12
26167: ARRAY
26168: PPUSH
26169: LD_INT 100
26171: PPUSH
26172: CALL_OW 234
// end ;
26176: PPOPN 1
26178: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26179: LD_EXP 46
26183: PUSH
26184: LD_EXP 60
26188: AND
26189: IFFALSE 26287
26191: GO 26193
26193: DISABLE
26194: LD_INT 0
26196: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26197: LD_ADDR_VAR 0 1
26201: PUSH
26202: LD_INT 22
26204: PUSH
26205: LD_OWVAR 2
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: PUSH
26214: LD_INT 21
26216: PUSH
26217: LD_INT 1
26219: PUSH
26220: EMPTY
26221: LIST
26222: LIST
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PPUSH
26228: CALL_OW 69
26232: ST_TO_ADDR
// if not tmp then
26233: LD_VAR 0 1
26237: NOT
26238: IFFALSE 26242
// exit ;
26240: GO 26287
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26242: LD_VAR 0 1
26246: PUSH
26247: LD_INT 1
26249: PPUSH
26250: LD_VAR 0 1
26254: PPUSH
26255: CALL_OW 12
26259: ARRAY
26260: PPUSH
26261: LD_INT 1
26263: PPUSH
26264: LD_INT 4
26266: PPUSH
26267: CALL_OW 12
26271: PPUSH
26272: LD_INT 3000
26274: PPUSH
26275: LD_INT 9000
26277: PPUSH
26278: CALL_OW 12
26282: PPUSH
26283: CALL_OW 492
// end ;
26287: PPOPN 1
26289: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26290: LD_EXP 46
26294: PUSH
26295: LD_EXP 61
26299: AND
26300: IFFALSE 26320
26302: GO 26304
26304: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26305: LD_INT 1
26307: PPUSH
26308: LD_OWVAR 2
26312: PPUSH
26313: LD_INT 0
26315: PPUSH
26316: CALL_OW 324
26320: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26321: LD_EXP 46
26325: PUSH
26326: LD_EXP 62
26330: AND
26331: IFFALSE 26414
26333: GO 26335
26335: DISABLE
26336: LD_INT 0
26338: PPUSH
26339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26340: LD_ADDR_VAR 0 2
26344: PUSH
26345: LD_INT 22
26347: PUSH
26348: LD_OWVAR 2
26352: PUSH
26353: EMPTY
26354: LIST
26355: LIST
26356: PUSH
26357: LD_INT 21
26359: PUSH
26360: LD_INT 3
26362: PUSH
26363: EMPTY
26364: LIST
26365: LIST
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PPUSH
26371: CALL_OW 69
26375: ST_TO_ADDR
// if not tmp then
26376: LD_VAR 0 2
26380: NOT
26381: IFFALSE 26385
// exit ;
26383: GO 26414
// for i in tmp do
26385: LD_ADDR_VAR 0 1
26389: PUSH
26390: LD_VAR 0 2
26394: PUSH
26395: FOR_IN
26396: IFFALSE 26412
// SetBLevel ( i , 10 ) ;
26398: LD_VAR 0 1
26402: PPUSH
26403: LD_INT 10
26405: PPUSH
26406: CALL_OW 241
26410: GO 26395
26412: POP
26413: POP
// end ;
26414: PPOPN 2
26416: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26417: LD_EXP 46
26421: PUSH
26422: LD_EXP 63
26426: AND
26427: IFFALSE 26538
26429: GO 26431
26431: DISABLE
26432: LD_INT 0
26434: PPUSH
26435: PPUSH
26436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26437: LD_ADDR_VAR 0 3
26441: PUSH
26442: LD_INT 22
26444: PUSH
26445: LD_OWVAR 2
26449: PUSH
26450: EMPTY
26451: LIST
26452: LIST
26453: PUSH
26454: LD_INT 25
26456: PUSH
26457: LD_INT 1
26459: PUSH
26460: EMPTY
26461: LIST
26462: LIST
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PPUSH
26468: CALL_OW 69
26472: ST_TO_ADDR
// if not tmp then
26473: LD_VAR 0 3
26477: NOT
26478: IFFALSE 26482
// exit ;
26480: GO 26538
// un := tmp [ rand ( 1 , tmp ) ] ;
26482: LD_ADDR_VAR 0 2
26486: PUSH
26487: LD_VAR 0 3
26491: PUSH
26492: LD_INT 1
26494: PPUSH
26495: LD_VAR 0 3
26499: PPUSH
26500: CALL_OW 12
26504: ARRAY
26505: ST_TO_ADDR
// if Crawls ( un ) then
26506: LD_VAR 0 2
26510: PPUSH
26511: CALL_OW 318
26515: IFFALSE 26526
// ComWalk ( un ) ;
26517: LD_VAR 0 2
26521: PPUSH
26522: CALL_OW 138
// SetClass ( un , class_sniper ) ;
26526: LD_VAR 0 2
26530: PPUSH
26531: LD_INT 5
26533: PPUSH
26534: CALL_OW 336
// end ;
26538: PPOPN 3
26540: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
26541: LD_EXP 46
26545: PUSH
26546: LD_EXP 64
26550: AND
26551: PUSH
26552: LD_OWVAR 67
26556: PUSH
26557: LD_INT 4
26559: LESS
26560: AND
26561: IFFALSE 26580
26563: GO 26565
26565: DISABLE
// begin Difficulty := Difficulty + 1 ;
26566: LD_ADDR_OWVAR 67
26570: PUSH
26571: LD_OWVAR 67
26575: PUSH
26576: LD_INT 1
26578: PLUS
26579: ST_TO_ADDR
// end ;
26580: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
26581: LD_EXP 46
26585: PUSH
26586: LD_EXP 65
26590: AND
26591: IFFALSE 26694
26593: GO 26595
26595: DISABLE
26596: LD_INT 0
26598: PPUSH
// begin for i := 1 to 5 do
26599: LD_ADDR_VAR 0 1
26603: PUSH
26604: DOUBLE
26605: LD_INT 1
26607: DEC
26608: ST_TO_ADDR
26609: LD_INT 5
26611: PUSH
26612: FOR_TO
26613: IFFALSE 26692
// begin uc_nation := nation_nature ;
26615: LD_ADDR_OWVAR 21
26619: PUSH
26620: LD_INT 0
26622: ST_TO_ADDR
// uc_side := 0 ;
26623: LD_ADDR_OWVAR 20
26627: PUSH
26628: LD_INT 0
26630: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
26631: LD_ADDR_OWVAR 29
26635: PUSH
26636: LD_INT 12
26638: PUSH
26639: LD_INT 12
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: ST_TO_ADDR
// hc_agressivity := 20 ;
26646: LD_ADDR_OWVAR 35
26650: PUSH
26651: LD_INT 20
26653: ST_TO_ADDR
// hc_class := class_tiger ;
26654: LD_ADDR_OWVAR 28
26658: PUSH
26659: LD_INT 14
26661: ST_TO_ADDR
// hc_gallery :=  ;
26662: LD_ADDR_OWVAR 33
26666: PUSH
26667: LD_STRING 
26669: ST_TO_ADDR
// hc_name :=  ;
26670: LD_ADDR_OWVAR 26
26674: PUSH
26675: LD_STRING 
26677: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
26678: CALL_OW 44
26682: PPUSH
26683: LD_INT 0
26685: PPUSH
26686: CALL_OW 51
// end ;
26690: GO 26612
26692: POP
26693: POP
// end ;
26694: PPOPN 1
26696: END
// every 0 0$1 trigger StreamModeActive and sBomb do
26697: LD_EXP 46
26701: PUSH
26702: LD_EXP 66
26706: AND
26707: IFFALSE 26716
26709: GO 26711
26711: DISABLE
// StreamSibBomb ;
26712: CALL 26717 0 0
26716: END
// export function StreamSibBomb ; var i , x , y ; begin
26717: LD_INT 0
26719: PPUSH
26720: PPUSH
26721: PPUSH
26722: PPUSH
// result := false ;
26723: LD_ADDR_VAR 0 1
26727: PUSH
26728: LD_INT 0
26730: ST_TO_ADDR
// for i := 1 to 16 do
26731: LD_ADDR_VAR 0 2
26735: PUSH
26736: DOUBLE
26737: LD_INT 1
26739: DEC
26740: ST_TO_ADDR
26741: LD_INT 16
26743: PUSH
26744: FOR_TO
26745: IFFALSE 26944
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26747: LD_ADDR_VAR 0 3
26751: PUSH
26752: LD_INT 10
26754: PUSH
26755: LD_INT 20
26757: PUSH
26758: LD_INT 30
26760: PUSH
26761: LD_INT 40
26763: PUSH
26764: LD_INT 50
26766: PUSH
26767: LD_INT 60
26769: PUSH
26770: LD_INT 70
26772: PUSH
26773: LD_INT 80
26775: PUSH
26776: LD_INT 90
26778: PUSH
26779: LD_INT 100
26781: PUSH
26782: LD_INT 110
26784: PUSH
26785: LD_INT 120
26787: PUSH
26788: LD_INT 130
26790: PUSH
26791: LD_INT 140
26793: PUSH
26794: LD_INT 150
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: LIST
26801: LIST
26802: LIST
26803: LIST
26804: LIST
26805: LIST
26806: LIST
26807: LIST
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: LIST
26813: PUSH
26814: LD_INT 1
26816: PPUSH
26817: LD_INT 15
26819: PPUSH
26820: CALL_OW 12
26824: ARRAY
26825: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
26826: LD_ADDR_VAR 0 4
26830: PUSH
26831: LD_INT 10
26833: PUSH
26834: LD_INT 20
26836: PUSH
26837: LD_INT 30
26839: PUSH
26840: LD_INT 40
26842: PUSH
26843: LD_INT 50
26845: PUSH
26846: LD_INT 60
26848: PUSH
26849: LD_INT 70
26851: PUSH
26852: LD_INT 80
26854: PUSH
26855: LD_INT 90
26857: PUSH
26858: LD_INT 100
26860: PUSH
26861: LD_INT 110
26863: PUSH
26864: LD_INT 120
26866: PUSH
26867: LD_INT 130
26869: PUSH
26870: LD_INT 140
26872: PUSH
26873: LD_INT 150
26875: PUSH
26876: EMPTY
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: PUSH
26893: LD_INT 1
26895: PPUSH
26896: LD_INT 15
26898: PPUSH
26899: CALL_OW 12
26903: ARRAY
26904: ST_TO_ADDR
// if ValidHex ( x , y ) then
26905: LD_VAR 0 3
26909: PPUSH
26910: LD_VAR 0 4
26914: PPUSH
26915: CALL_OW 488
26919: IFFALSE 26942
// begin result := [ x , y ] ;
26921: LD_ADDR_VAR 0 1
26925: PUSH
26926: LD_VAR 0 3
26930: PUSH
26931: LD_VAR 0 4
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: ST_TO_ADDR
// break ;
26940: GO 26944
// end ; end ;
26942: GO 26744
26944: POP
26945: POP
// if result then
26946: LD_VAR 0 1
26950: IFFALSE 27010
// begin ToLua ( playSibBomb() ) ;
26952: LD_STRING playSibBomb()
26954: PPUSH
26955: CALL_OW 559
// wait ( 0 0$14 ) ;
26959: LD_INT 490
26961: PPUSH
26962: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
26966: LD_VAR 0 1
26970: PUSH
26971: LD_INT 1
26973: ARRAY
26974: PPUSH
26975: LD_VAR 0 1
26979: PUSH
26980: LD_INT 2
26982: ARRAY
26983: PPUSH
26984: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
26988: LD_VAR 0 1
26992: PUSH
26993: LD_INT 1
26995: ARRAY
26996: PPUSH
26997: LD_VAR 0 1
27001: PUSH
27002: LD_INT 2
27004: ARRAY
27005: PPUSH
27006: CALL_OW 429
// end ; end ;
27010: LD_VAR 0 1
27014: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27015: LD_EXP 46
27019: PUSH
27020: LD_EXP 68
27024: AND
27025: IFFALSE 27037
27027: GO 27029
27029: DISABLE
// YouLost (  ) ;
27030: LD_STRING 
27032: PPUSH
27033: CALL_OW 104
27037: END
// every 0 0$1 trigger StreamModeActive and sFog do
27038: LD_EXP 46
27042: PUSH
27043: LD_EXP 67
27047: AND
27048: IFFALSE 27062
27050: GO 27052
27052: DISABLE
// FogOff ( your_side ) ;
27053: LD_OWVAR 2
27057: PPUSH
27058: CALL_OW 344
27062: END
// every 0 0$1 trigger StreamModeActive and sSun do
27063: LD_EXP 46
27067: PUSH
27068: LD_EXP 69
27072: AND
27073: IFFALSE 27101
27075: GO 27077
27077: DISABLE
// begin solar_recharge_percent := 0 ;
27078: LD_ADDR_OWVAR 79
27082: PUSH
27083: LD_INT 0
27085: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27086: LD_INT 10500
27088: PPUSH
27089: CALL_OW 67
// solar_recharge_percent := 100 ;
27093: LD_ADDR_OWVAR 79
27097: PUSH
27098: LD_INT 100
27100: ST_TO_ADDR
// end ;
27101: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27102: LD_EXP 46
27106: PUSH
27107: LD_EXP 70
27111: AND
27112: IFFALSE 27351
27114: GO 27116
27116: DISABLE
27117: LD_INT 0
27119: PPUSH
27120: PPUSH
27121: PPUSH
// begin tmp := [ ] ;
27122: LD_ADDR_VAR 0 3
27126: PUSH
27127: EMPTY
27128: ST_TO_ADDR
// for i := 1 to 6 do
27129: LD_ADDR_VAR 0 1
27133: PUSH
27134: DOUBLE
27135: LD_INT 1
27137: DEC
27138: ST_TO_ADDR
27139: LD_INT 6
27141: PUSH
27142: FOR_TO
27143: IFFALSE 27248
// begin uc_nation := nation_nature ;
27145: LD_ADDR_OWVAR 21
27149: PUSH
27150: LD_INT 0
27152: ST_TO_ADDR
// uc_side := 0 ;
27153: LD_ADDR_OWVAR 20
27157: PUSH
27158: LD_INT 0
27160: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27161: LD_ADDR_OWVAR 29
27165: PUSH
27166: LD_INT 12
27168: PUSH
27169: LD_INT 12
27171: PUSH
27172: EMPTY
27173: LIST
27174: LIST
27175: ST_TO_ADDR
// hc_agressivity := 20 ;
27176: LD_ADDR_OWVAR 35
27180: PUSH
27181: LD_INT 20
27183: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27184: LD_ADDR_OWVAR 28
27188: PUSH
27189: LD_INT 17
27191: ST_TO_ADDR
// hc_gallery :=  ;
27192: LD_ADDR_OWVAR 33
27196: PUSH
27197: LD_STRING 
27199: ST_TO_ADDR
// hc_name :=  ;
27200: LD_ADDR_OWVAR 26
27204: PUSH
27205: LD_STRING 
27207: ST_TO_ADDR
// un := CreateHuman ;
27208: LD_ADDR_VAR 0 2
27212: PUSH
27213: CALL_OW 44
27217: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27218: LD_VAR 0 2
27222: PPUSH
27223: LD_INT 1
27225: PPUSH
27226: CALL_OW 51
// tmp := tmp ^ un ;
27230: LD_ADDR_VAR 0 3
27234: PUSH
27235: LD_VAR 0 3
27239: PUSH
27240: LD_VAR 0 2
27244: ADD
27245: ST_TO_ADDR
// end ;
27246: GO 27142
27248: POP
27249: POP
// repeat wait ( 0 0$1 ) ;
27250: LD_INT 35
27252: PPUSH
27253: CALL_OW 67
// for un in tmp do
27257: LD_ADDR_VAR 0 2
27261: PUSH
27262: LD_VAR 0 3
27266: PUSH
27267: FOR_IN
27268: IFFALSE 27342
// begin if IsDead ( un ) then
27270: LD_VAR 0 2
27274: PPUSH
27275: CALL_OW 301
27279: IFFALSE 27299
// begin tmp := tmp diff un ;
27281: LD_ADDR_VAR 0 3
27285: PUSH
27286: LD_VAR 0 3
27290: PUSH
27291: LD_VAR 0 2
27295: DIFF
27296: ST_TO_ADDR
// continue ;
27297: GO 27267
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27299: LD_VAR 0 2
27303: PPUSH
27304: LD_INT 3
27306: PUSH
27307: LD_INT 22
27309: PUSH
27310: LD_INT 0
27312: PUSH
27313: EMPTY
27314: LIST
27315: LIST
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PPUSH
27321: CALL_OW 69
27325: PPUSH
27326: LD_VAR 0 2
27330: PPUSH
27331: CALL_OW 74
27335: PPUSH
27336: CALL_OW 115
// end ;
27340: GO 27267
27342: POP
27343: POP
// until not tmp ;
27344: LD_VAR 0 3
27348: NOT
27349: IFFALSE 27250
// end ;
27351: PPOPN 3
27353: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27354: LD_EXP 46
27358: PUSH
27359: LD_EXP 71
27363: AND
27364: IFFALSE 27418
27366: GO 27368
27368: DISABLE
// begin ToLua ( displayTroll(); ) ;
27369: LD_STRING displayTroll();
27371: PPUSH
27372: CALL_OW 559
// wait ( 3 3$00 ) ;
27376: LD_INT 6300
27378: PPUSH
27379: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27383: LD_STRING hideTroll();
27385: PPUSH
27386: CALL_OW 559
// wait ( 1 1$00 ) ;
27390: LD_INT 2100
27392: PPUSH
27393: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27397: LD_STRING displayTroll();
27399: PPUSH
27400: CALL_OW 559
// wait ( 1 1$00 ) ;
27404: LD_INT 2100
27406: PPUSH
27407: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27411: LD_STRING hideTroll();
27413: PPUSH
27414: CALL_OW 559
// end ;
27418: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27419: LD_EXP 46
27423: PUSH
27424: LD_EXP 72
27428: AND
27429: IFFALSE 27492
27431: GO 27433
27433: DISABLE
27434: LD_INT 0
27436: PPUSH
// begin p := 0 ;
27437: LD_ADDR_VAR 0 1
27441: PUSH
27442: LD_INT 0
27444: ST_TO_ADDR
// repeat game_speed := 1 ;
27445: LD_ADDR_OWVAR 65
27449: PUSH
27450: LD_INT 1
27452: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27453: LD_INT 35
27455: PPUSH
27456: CALL_OW 67
// p := p + 1 ;
27460: LD_ADDR_VAR 0 1
27464: PUSH
27465: LD_VAR 0 1
27469: PUSH
27470: LD_INT 1
27472: PLUS
27473: ST_TO_ADDR
// until p >= 60 ;
27474: LD_VAR 0 1
27478: PUSH
27479: LD_INT 60
27481: GREATEREQUAL
27482: IFFALSE 27445
// game_speed := 4 ;
27484: LD_ADDR_OWVAR 65
27488: PUSH
27489: LD_INT 4
27491: ST_TO_ADDR
// end ;
27492: PPOPN 1
27494: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
27495: LD_EXP 46
27499: PUSH
27500: LD_EXP 73
27504: AND
27505: IFFALSE 27651
27507: GO 27509
27509: DISABLE
27510: LD_INT 0
27512: PPUSH
27513: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27514: LD_ADDR_VAR 0 1
27518: PUSH
27519: LD_INT 22
27521: PUSH
27522: LD_OWVAR 2
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: LD_INT 30
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 30
27546: PUSH
27547: LD_INT 1
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: LIST
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: PPUSH
27563: CALL_OW 69
27567: ST_TO_ADDR
// if not depot then
27568: LD_VAR 0 1
27572: NOT
27573: IFFALSE 27577
// exit ;
27575: GO 27651
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
27577: LD_ADDR_VAR 0 2
27581: PUSH
27582: LD_VAR 0 1
27586: PUSH
27587: LD_INT 1
27589: PPUSH
27590: LD_VAR 0 1
27594: PPUSH
27595: CALL_OW 12
27599: ARRAY
27600: PPUSH
27601: CALL_OW 274
27605: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
27606: LD_VAR 0 2
27610: PPUSH
27611: LD_INT 1
27613: PPUSH
27614: LD_INT 0
27616: PPUSH
27617: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
27621: LD_VAR 0 2
27625: PPUSH
27626: LD_INT 2
27628: PPUSH
27629: LD_INT 0
27631: PPUSH
27632: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
27636: LD_VAR 0 2
27640: PPUSH
27641: LD_INT 3
27643: PPUSH
27644: LD_INT 0
27646: PPUSH
27647: CALL_OW 277
// end ;
27651: PPOPN 2
27653: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
27654: LD_EXP 46
27658: PUSH
27659: LD_EXP 74
27663: AND
27664: IFFALSE 27761
27666: GO 27668
27668: DISABLE
27669: LD_INT 0
27671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
27672: LD_ADDR_VAR 0 1
27676: PUSH
27677: LD_INT 22
27679: PUSH
27680: LD_OWVAR 2
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 21
27691: PUSH
27692: LD_INT 1
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: PUSH
27699: LD_INT 3
27701: PUSH
27702: LD_INT 23
27704: PUSH
27705: LD_INT 0
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: PPUSH
27721: CALL_OW 69
27725: ST_TO_ADDR
// if not tmp then
27726: LD_VAR 0 1
27730: NOT
27731: IFFALSE 27735
// exit ;
27733: GO 27761
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
27735: LD_VAR 0 1
27739: PUSH
27740: LD_INT 1
27742: PPUSH
27743: LD_VAR 0 1
27747: PPUSH
27748: CALL_OW 12
27752: ARRAY
27753: PPUSH
27754: LD_INT 200
27756: PPUSH
27757: CALL_OW 234
// end ;
27761: PPOPN 1
27763: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
27764: LD_EXP 46
27768: PUSH
27769: LD_EXP 75
27773: AND
27774: IFFALSE 27853
27776: GO 27778
27778: DISABLE
27779: LD_INT 0
27781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
27782: LD_ADDR_VAR 0 1
27786: PUSH
27787: LD_INT 22
27789: PUSH
27790: LD_OWVAR 2
27794: PUSH
27795: EMPTY
27796: LIST
27797: LIST
27798: PUSH
27799: LD_INT 21
27801: PUSH
27802: LD_INT 2
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: EMPTY
27810: LIST
27811: LIST
27812: PPUSH
27813: CALL_OW 69
27817: ST_TO_ADDR
// if not tmp then
27818: LD_VAR 0 1
27822: NOT
27823: IFFALSE 27827
// exit ;
27825: GO 27853
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
27827: LD_VAR 0 1
27831: PUSH
27832: LD_INT 1
27834: PPUSH
27835: LD_VAR 0 1
27839: PPUSH
27840: CALL_OW 12
27844: ARRAY
27845: PPUSH
27846: LD_INT 60
27848: PPUSH
27849: CALL_OW 234
// end ;
27853: PPOPN 1
27855: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
27856: LD_EXP 46
27860: PUSH
27861: LD_EXP 76
27865: AND
27866: IFFALSE 27965
27868: GO 27870
27870: DISABLE
27871: LD_INT 0
27873: PPUSH
27874: PPUSH
// begin enable ;
27875: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
27876: LD_ADDR_VAR 0 1
27880: PUSH
27881: LD_INT 22
27883: PUSH
27884: LD_OWVAR 2
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 61
27895: PUSH
27896: EMPTY
27897: LIST
27898: PUSH
27899: LD_INT 33
27901: PUSH
27902: LD_INT 2
27904: PUSH
27905: EMPTY
27906: LIST
27907: LIST
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: PPUSH
27914: CALL_OW 69
27918: ST_TO_ADDR
// if not tmp then
27919: LD_VAR 0 1
27923: NOT
27924: IFFALSE 27928
// exit ;
27926: GO 27965
// for i in tmp do
27928: LD_ADDR_VAR 0 2
27932: PUSH
27933: LD_VAR 0 1
27937: PUSH
27938: FOR_IN
27939: IFFALSE 27963
// if IsControledBy ( i ) then
27941: LD_VAR 0 2
27945: PPUSH
27946: CALL_OW 312
27950: IFFALSE 27961
// ComUnlink ( i ) ;
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 136
27961: GO 27938
27963: POP
27964: POP
// end ;
27965: PPOPN 2
27967: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
27968: LD_EXP 46
27972: PUSH
27973: LD_EXP 77
27977: AND
27978: IFFALSE 28118
27980: GO 27982
27982: DISABLE
27983: LD_INT 0
27985: PPUSH
27986: PPUSH
// begin ToLua ( displayPowell(); ) ;
27987: LD_STRING displayPowell();
27989: PPUSH
27990: CALL_OW 559
// uc_side := 0 ;
27994: LD_ADDR_OWVAR 20
27998: PUSH
27999: LD_INT 0
28001: ST_TO_ADDR
// uc_nation := 2 ;
28002: LD_ADDR_OWVAR 21
28006: PUSH
28007: LD_INT 2
28009: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28010: LD_ADDR_OWVAR 37
28014: PUSH
28015: LD_INT 14
28017: ST_TO_ADDR
// vc_engine := engine_siberite ;
28018: LD_ADDR_OWVAR 39
28022: PUSH
28023: LD_INT 3
28025: ST_TO_ADDR
// vc_control := control_apeman ;
28026: LD_ADDR_OWVAR 38
28030: PUSH
28031: LD_INT 5
28033: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28034: LD_ADDR_OWVAR 40
28038: PUSH
28039: LD_INT 29
28041: ST_TO_ADDR
// un := CreateVehicle ;
28042: LD_ADDR_VAR 0 2
28046: PUSH
28047: CALL_OW 45
28051: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28052: LD_VAR 0 2
28056: PPUSH
28057: LD_INT 1
28059: PPUSH
28060: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28064: LD_INT 35
28066: PPUSH
28067: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28071: LD_VAR 0 2
28075: PPUSH
28076: LD_INT 22
28078: PUSH
28079: LD_OWVAR 2
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PPUSH
28088: CALL_OW 69
28092: PPUSH
28093: LD_VAR 0 2
28097: PPUSH
28098: CALL_OW 74
28102: PPUSH
28103: CALL_OW 115
// until IsDead ( un ) ;
28107: LD_VAR 0 2
28111: PPUSH
28112: CALL_OW 301
28116: IFFALSE 28064
// end ;
28118: PPOPN 2
28120: END
// every 0 0$1 trigger StreamModeActive and sStu do
28121: LD_EXP 46
28125: PUSH
28126: LD_EXP 85
28130: AND
28131: IFFALSE 28147
28133: GO 28135
28135: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28136: LD_STRING displayStucuk();
28138: PPUSH
28139: CALL_OW 559
// ResetFog ;
28143: CALL_OW 335
// end ;
28147: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28148: LD_EXP 46
28152: PUSH
28153: LD_EXP 78
28157: AND
28158: IFFALSE 28299
28160: GO 28162
28162: DISABLE
28163: LD_INT 0
28165: PPUSH
28166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28167: LD_ADDR_VAR 0 2
28171: PUSH
28172: LD_INT 22
28174: PUSH
28175: LD_OWVAR 2
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 21
28186: PUSH
28187: LD_INT 1
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PPUSH
28198: CALL_OW 69
28202: ST_TO_ADDR
// if not tmp then
28203: LD_VAR 0 2
28207: NOT
28208: IFFALSE 28212
// exit ;
28210: GO 28299
// un := tmp [ rand ( 1 , tmp ) ] ;
28212: LD_ADDR_VAR 0 1
28216: PUSH
28217: LD_VAR 0 2
28221: PUSH
28222: LD_INT 1
28224: PPUSH
28225: LD_VAR 0 2
28229: PPUSH
28230: CALL_OW 12
28234: ARRAY
28235: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28236: LD_VAR 0 1
28240: PPUSH
28241: LD_INT 0
28243: PPUSH
28244: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28248: LD_VAR 0 1
28252: PPUSH
28253: LD_OWVAR 3
28257: PUSH
28258: LD_VAR 0 1
28262: DIFF
28263: PPUSH
28264: LD_VAR 0 1
28268: PPUSH
28269: CALL_OW 74
28273: PPUSH
28274: CALL_OW 115
// wait ( 0 0$20 ) ;
28278: LD_INT 700
28280: PPUSH
28281: CALL_OW 67
// SetSide ( un , your_side ) ;
28285: LD_VAR 0 1
28289: PPUSH
28290: LD_OWVAR 2
28294: PPUSH
28295: CALL_OW 235
// end ;
28299: PPOPN 2
28301: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28302: LD_EXP 46
28306: PUSH
28307: LD_EXP 79
28311: AND
28312: IFFALSE 28418
28314: GO 28316
28316: DISABLE
28317: LD_INT 0
28319: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28320: LD_ADDR_VAR 0 1
28324: PUSH
28325: LD_INT 22
28327: PUSH
28328: LD_OWVAR 2
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 2
28339: PUSH
28340: LD_INT 30
28342: PUSH
28343: LD_INT 0
28345: PUSH
28346: EMPTY
28347: LIST
28348: LIST
28349: PUSH
28350: LD_INT 30
28352: PUSH
28353: LD_INT 1
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: LIST
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PPUSH
28369: CALL_OW 69
28373: ST_TO_ADDR
// if not depot then
28374: LD_VAR 0 1
28378: NOT
28379: IFFALSE 28383
// exit ;
28381: GO 28418
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28383: LD_VAR 0 1
28387: PUSH
28388: LD_INT 1
28390: ARRAY
28391: PPUSH
28392: CALL_OW 250
28396: PPUSH
28397: LD_VAR 0 1
28401: PUSH
28402: LD_INT 1
28404: ARRAY
28405: PPUSH
28406: CALL_OW 251
28410: PPUSH
28411: LD_INT 70
28413: PPUSH
28414: CALL_OW 495
// end ;
28418: PPOPN 1
28420: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28421: LD_EXP 46
28425: PUSH
28426: LD_EXP 80
28430: AND
28431: IFFALSE 28642
28433: GO 28435
28435: DISABLE
28436: LD_INT 0
28438: PPUSH
28439: PPUSH
28440: PPUSH
28441: PPUSH
28442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28443: LD_ADDR_VAR 0 5
28447: PUSH
28448: LD_INT 22
28450: PUSH
28451: LD_OWVAR 2
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 21
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PPUSH
28474: CALL_OW 69
28478: ST_TO_ADDR
// if not tmp then
28479: LD_VAR 0 5
28483: NOT
28484: IFFALSE 28488
// exit ;
28486: GO 28642
// for i in tmp do
28488: LD_ADDR_VAR 0 1
28492: PUSH
28493: LD_VAR 0 5
28497: PUSH
28498: FOR_IN
28499: IFFALSE 28640
// begin d := rand ( 0 , 5 ) ;
28501: LD_ADDR_VAR 0 4
28505: PUSH
28506: LD_INT 0
28508: PPUSH
28509: LD_INT 5
28511: PPUSH
28512: CALL_OW 12
28516: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
28517: LD_ADDR_VAR 0 2
28521: PUSH
28522: LD_VAR 0 1
28526: PPUSH
28527: CALL_OW 250
28531: PPUSH
28532: LD_VAR 0 4
28536: PPUSH
28537: LD_INT 3
28539: PPUSH
28540: LD_INT 12
28542: PPUSH
28543: CALL_OW 12
28547: PPUSH
28548: CALL_OW 272
28552: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
28553: LD_ADDR_VAR 0 3
28557: PUSH
28558: LD_VAR 0 1
28562: PPUSH
28563: CALL_OW 251
28567: PPUSH
28568: LD_VAR 0 4
28572: PPUSH
28573: LD_INT 3
28575: PPUSH
28576: LD_INT 12
28578: PPUSH
28579: CALL_OW 12
28583: PPUSH
28584: CALL_OW 273
28588: ST_TO_ADDR
// if ValidHex ( x , y ) then
28589: LD_VAR 0 2
28593: PPUSH
28594: LD_VAR 0 3
28598: PPUSH
28599: CALL_OW 488
28603: IFFALSE 28638
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
28605: LD_VAR 0 1
28609: PPUSH
28610: LD_VAR 0 2
28614: PPUSH
28615: LD_VAR 0 3
28619: PPUSH
28620: LD_INT 3
28622: PPUSH
28623: LD_INT 6
28625: PPUSH
28626: CALL_OW 12
28630: PPUSH
28631: LD_INT 1
28633: PPUSH
28634: CALL_OW 483
// end ;
28638: GO 28498
28640: POP
28641: POP
// end ;
28642: PPOPN 5
28644: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
28645: LD_EXP 46
28649: PUSH
28650: LD_EXP 81
28654: AND
28655: IFFALSE 28749
28657: GO 28659
28659: DISABLE
28660: LD_INT 0
28662: PPUSH
28663: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
28664: LD_ADDR_VAR 0 2
28668: PUSH
28669: LD_INT 22
28671: PUSH
28672: LD_OWVAR 2
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 32
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 21
28693: PUSH
28694: LD_INT 2
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: PPUSH
28706: CALL_OW 69
28710: ST_TO_ADDR
// if not tmp then
28711: LD_VAR 0 2
28715: NOT
28716: IFFALSE 28720
// exit ;
28718: GO 28749
// for i in tmp do
28720: LD_ADDR_VAR 0 1
28724: PUSH
28725: LD_VAR 0 2
28729: PUSH
28730: FOR_IN
28731: IFFALSE 28747
// SetFuel ( i , 0 ) ;
28733: LD_VAR 0 1
28737: PPUSH
28738: LD_INT 0
28740: PPUSH
28741: CALL_OW 240
28745: GO 28730
28747: POP
28748: POP
// end ;
28749: PPOPN 2
28751: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
28752: LD_EXP 46
28756: PUSH
28757: LD_EXP 82
28761: AND
28762: IFFALSE 28828
28764: GO 28766
28766: DISABLE
28767: LD_INT 0
28769: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
28770: LD_ADDR_VAR 0 1
28774: PUSH
28775: LD_INT 22
28777: PUSH
28778: LD_OWVAR 2
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 30
28789: PUSH
28790: LD_INT 29
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: EMPTY
28798: LIST
28799: LIST
28800: PPUSH
28801: CALL_OW 69
28805: ST_TO_ADDR
// if not tmp then
28806: LD_VAR 0 1
28810: NOT
28811: IFFALSE 28815
// exit ;
28813: GO 28828
// DestroyUnit ( tmp [ 1 ] ) ;
28815: LD_VAR 0 1
28819: PUSH
28820: LD_INT 1
28822: ARRAY
28823: PPUSH
28824: CALL_OW 65
// end ;
28828: PPOPN 1
28830: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
28831: LD_EXP 46
28835: PUSH
28836: LD_EXP 84
28840: AND
28841: IFFALSE 28970
28843: GO 28845
28845: DISABLE
28846: LD_INT 0
28848: PPUSH
// begin uc_side := 0 ;
28849: LD_ADDR_OWVAR 20
28853: PUSH
28854: LD_INT 0
28856: ST_TO_ADDR
// uc_nation := nation_arabian ;
28857: LD_ADDR_OWVAR 21
28861: PUSH
28862: LD_INT 2
28864: ST_TO_ADDR
// hc_gallery :=  ;
28865: LD_ADDR_OWVAR 33
28869: PUSH
28870: LD_STRING 
28872: ST_TO_ADDR
// hc_name :=  ;
28873: LD_ADDR_OWVAR 26
28877: PUSH
28878: LD_STRING 
28880: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
28881: LD_INT 1
28883: PPUSH
28884: LD_INT 11
28886: PPUSH
28887: LD_INT 10
28889: PPUSH
28890: CALL_OW 380
// un := CreateHuman ;
28894: LD_ADDR_VAR 0 1
28898: PUSH
28899: CALL_OW 44
28903: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28904: LD_VAR 0 1
28908: PPUSH
28909: LD_INT 1
28911: PPUSH
28912: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28916: LD_INT 35
28918: PPUSH
28919: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28923: LD_VAR 0 1
28927: PPUSH
28928: LD_INT 22
28930: PUSH
28931: LD_OWVAR 2
28935: PUSH
28936: EMPTY
28937: LIST
28938: LIST
28939: PPUSH
28940: CALL_OW 69
28944: PPUSH
28945: LD_VAR 0 1
28949: PPUSH
28950: CALL_OW 74
28954: PPUSH
28955: CALL_OW 115
// until IsDead ( un ) ;
28959: LD_VAR 0 1
28963: PPUSH
28964: CALL_OW 301
28968: IFFALSE 28916
// end ;
28970: PPOPN 1
28972: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
28973: LD_EXP 46
28977: PUSH
28978: LD_EXP 86
28982: AND
28983: IFFALSE 28995
28985: GO 28987
28987: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
28988: LD_STRING earthquake(getX(game), 0, 32)
28990: PPUSH
28991: CALL_OW 559
28995: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
28996: LD_EXP 46
29000: PUSH
29001: LD_EXP 87
29005: AND
29006: IFFALSE 29097
29008: GO 29010
29010: DISABLE
29011: LD_INT 0
29013: PPUSH
// begin enable ;
29014: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29015: LD_ADDR_VAR 0 1
29019: PUSH
29020: LD_INT 22
29022: PUSH
29023: LD_OWVAR 2
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PUSH
29032: LD_INT 21
29034: PUSH
29035: LD_INT 2
29037: PUSH
29038: EMPTY
29039: LIST
29040: LIST
29041: PUSH
29042: LD_INT 33
29044: PUSH
29045: LD_INT 3
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: PUSH
29052: EMPTY
29053: LIST
29054: LIST
29055: LIST
29056: PPUSH
29057: CALL_OW 69
29061: ST_TO_ADDR
// if not tmp then
29062: LD_VAR 0 1
29066: NOT
29067: IFFALSE 29071
// exit ;
29069: GO 29097
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29071: LD_VAR 0 1
29075: PUSH
29076: LD_INT 1
29078: PPUSH
29079: LD_VAR 0 1
29083: PPUSH
29084: CALL_OW 12
29088: ARRAY
29089: PPUSH
29090: LD_INT 1
29092: PPUSH
29093: CALL_OW 234
// end ;
29097: PPOPN 1
29099: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29100: LD_EXP 46
29104: PUSH
29105: LD_EXP 88
29109: AND
29110: IFFALSE 29251
29112: GO 29114
29114: DISABLE
29115: LD_INT 0
29117: PPUSH
29118: PPUSH
29119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29120: LD_ADDR_VAR 0 3
29124: PUSH
29125: LD_INT 22
29127: PUSH
29128: LD_OWVAR 2
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PUSH
29137: LD_INT 25
29139: PUSH
29140: LD_INT 1
29142: PUSH
29143: EMPTY
29144: LIST
29145: LIST
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PPUSH
29151: CALL_OW 69
29155: ST_TO_ADDR
// if not tmp then
29156: LD_VAR 0 3
29160: NOT
29161: IFFALSE 29165
// exit ;
29163: GO 29251
// un := tmp [ rand ( 1 , tmp ) ] ;
29165: LD_ADDR_VAR 0 2
29169: PUSH
29170: LD_VAR 0 3
29174: PUSH
29175: LD_INT 1
29177: PPUSH
29178: LD_VAR 0 3
29182: PPUSH
29183: CALL_OW 12
29187: ARRAY
29188: ST_TO_ADDR
// if Crawls ( un ) then
29189: LD_VAR 0 2
29193: PPUSH
29194: CALL_OW 318
29198: IFFALSE 29209
// ComWalk ( un ) ;
29200: LD_VAR 0 2
29204: PPUSH
29205: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29209: LD_VAR 0 2
29213: PPUSH
29214: LD_INT 9
29216: PPUSH
29217: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29221: LD_INT 28
29223: PPUSH
29224: LD_OWVAR 2
29228: PPUSH
29229: LD_INT 2
29231: PPUSH
29232: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29236: LD_INT 29
29238: PPUSH
29239: LD_OWVAR 2
29243: PPUSH
29244: LD_INT 2
29246: PPUSH
29247: CALL_OW 322
// end ;
29251: PPOPN 3
29253: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29254: LD_EXP 46
29258: PUSH
29259: LD_EXP 89
29263: AND
29264: IFFALSE 29375
29266: GO 29268
29268: DISABLE
29269: LD_INT 0
29271: PPUSH
29272: PPUSH
29273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29274: LD_ADDR_VAR 0 3
29278: PUSH
29279: LD_INT 22
29281: PUSH
29282: LD_OWVAR 2
29286: PUSH
29287: EMPTY
29288: LIST
29289: LIST
29290: PUSH
29291: LD_INT 25
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: PPUSH
29305: CALL_OW 69
29309: ST_TO_ADDR
// if not tmp then
29310: LD_VAR 0 3
29314: NOT
29315: IFFALSE 29319
// exit ;
29317: GO 29375
// un := tmp [ rand ( 1 , tmp ) ] ;
29319: LD_ADDR_VAR 0 2
29323: PUSH
29324: LD_VAR 0 3
29328: PUSH
29329: LD_INT 1
29331: PPUSH
29332: LD_VAR 0 3
29336: PPUSH
29337: CALL_OW 12
29341: ARRAY
29342: ST_TO_ADDR
// if Crawls ( un ) then
29343: LD_VAR 0 2
29347: PPUSH
29348: CALL_OW 318
29352: IFFALSE 29363
// ComWalk ( un ) ;
29354: LD_VAR 0 2
29358: PPUSH
29359: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29363: LD_VAR 0 2
29367: PPUSH
29368: LD_INT 8
29370: PPUSH
29371: CALL_OW 336
// end ;
29375: PPOPN 3
29377: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29378: LD_EXP 46
29382: PUSH
29383: LD_EXP 90
29387: AND
29388: IFFALSE 29532
29390: GO 29392
29392: DISABLE
29393: LD_INT 0
29395: PPUSH
29396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29397: LD_ADDR_VAR 0 2
29401: PUSH
29402: LD_INT 22
29404: PUSH
29405: LD_OWVAR 2
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 21
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 2
29426: PUSH
29427: LD_INT 34
29429: PUSH
29430: LD_INT 12
29432: PUSH
29433: EMPTY
29434: LIST
29435: LIST
29436: PUSH
29437: LD_INT 34
29439: PUSH
29440: LD_INT 51
29442: PUSH
29443: EMPTY
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 34
29449: PUSH
29450: LD_INT 32
29452: PUSH
29453: EMPTY
29454: LIST
29455: LIST
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: LIST
29467: PPUSH
29468: CALL_OW 69
29472: ST_TO_ADDR
// if not tmp then
29473: LD_VAR 0 2
29477: NOT
29478: IFFALSE 29482
// exit ;
29480: GO 29532
// for i in tmp do
29482: LD_ADDR_VAR 0 1
29486: PUSH
29487: LD_VAR 0 2
29491: PUSH
29492: FOR_IN
29493: IFFALSE 29530
// if GetCargo ( i , mat_artifact ) = 0 then
29495: LD_VAR 0 1
29499: PPUSH
29500: LD_INT 4
29502: PPUSH
29503: CALL_OW 289
29507: PUSH
29508: LD_INT 0
29510: EQUAL
29511: IFFALSE 29528
// SetCargo ( i , mat_siberit , 100 ) ;
29513: LD_VAR 0 1
29517: PPUSH
29518: LD_INT 3
29520: PPUSH
29521: LD_INT 100
29523: PPUSH
29524: CALL_OW 290
29528: GO 29492
29530: POP
29531: POP
// end ;
29532: PPOPN 2
29534: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
29535: LD_EXP 46
29539: PUSH
29540: LD_EXP 91
29544: AND
29545: IFFALSE 29728
29547: GO 29549
29549: DISABLE
29550: LD_INT 0
29552: PPUSH
29553: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
29554: LD_ADDR_VAR 0 2
29558: PUSH
29559: LD_INT 22
29561: PUSH
29562: LD_OWVAR 2
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: PPUSH
29571: CALL_OW 69
29575: ST_TO_ADDR
// if not tmp then
29576: LD_VAR 0 2
29580: NOT
29581: IFFALSE 29585
// exit ;
29583: GO 29728
// for i := 1 to 2 do
29585: LD_ADDR_VAR 0 1
29589: PUSH
29590: DOUBLE
29591: LD_INT 1
29593: DEC
29594: ST_TO_ADDR
29595: LD_INT 2
29597: PUSH
29598: FOR_TO
29599: IFFALSE 29726
// begin uc_side := your_side ;
29601: LD_ADDR_OWVAR 20
29605: PUSH
29606: LD_OWVAR 2
29610: ST_TO_ADDR
// uc_nation := nation_american ;
29611: LD_ADDR_OWVAR 21
29615: PUSH
29616: LD_INT 1
29618: ST_TO_ADDR
// vc_chassis := us_morphling ;
29619: LD_ADDR_OWVAR 37
29623: PUSH
29624: LD_INT 5
29626: ST_TO_ADDR
// vc_engine := engine_siberite ;
29627: LD_ADDR_OWVAR 39
29631: PUSH
29632: LD_INT 3
29634: ST_TO_ADDR
// vc_control := control_computer ;
29635: LD_ADDR_OWVAR 38
29639: PUSH
29640: LD_INT 3
29642: ST_TO_ADDR
// vc_weapon := us_double_laser ;
29643: LD_ADDR_OWVAR 40
29647: PUSH
29648: LD_INT 10
29650: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
29651: LD_VAR 0 2
29655: PUSH
29656: LD_INT 1
29658: ARRAY
29659: PPUSH
29660: CALL_OW 310
29664: NOT
29665: IFFALSE 29712
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
29667: CALL_OW 45
29671: PPUSH
29672: LD_VAR 0 2
29676: PUSH
29677: LD_INT 1
29679: ARRAY
29680: PPUSH
29681: CALL_OW 250
29685: PPUSH
29686: LD_VAR 0 2
29690: PUSH
29691: LD_INT 1
29693: ARRAY
29694: PPUSH
29695: CALL_OW 251
29699: PPUSH
29700: LD_INT 12
29702: PPUSH
29703: LD_INT 1
29705: PPUSH
29706: CALL_OW 50
29710: GO 29724
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
29712: CALL_OW 45
29716: PPUSH
29717: LD_INT 1
29719: PPUSH
29720: CALL_OW 51
// end ;
29724: GO 29598
29726: POP
29727: POP
// end ;
29728: PPOPN 2
29730: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
29731: LD_EXP 46
29735: PUSH
29736: LD_EXP 92
29740: AND
29741: IFFALSE 29963
29743: GO 29745
29745: DISABLE
29746: LD_INT 0
29748: PPUSH
29749: PPUSH
29750: PPUSH
29751: PPUSH
29752: PPUSH
29753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
29754: LD_ADDR_VAR 0 6
29758: PUSH
29759: LD_INT 22
29761: PUSH
29762: LD_OWVAR 2
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 21
29773: PUSH
29774: LD_INT 1
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: LD_INT 3
29783: PUSH
29784: LD_INT 23
29786: PUSH
29787: LD_INT 0
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: EMPTY
29799: LIST
29800: LIST
29801: LIST
29802: PPUSH
29803: CALL_OW 69
29807: ST_TO_ADDR
// if not tmp then
29808: LD_VAR 0 6
29812: NOT
29813: IFFALSE 29817
// exit ;
29815: GO 29963
// s1 := rand ( 1 , 4 ) ;
29817: LD_ADDR_VAR 0 2
29821: PUSH
29822: LD_INT 1
29824: PPUSH
29825: LD_INT 4
29827: PPUSH
29828: CALL_OW 12
29832: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
29833: LD_ADDR_VAR 0 4
29837: PUSH
29838: LD_VAR 0 6
29842: PUSH
29843: LD_INT 1
29845: ARRAY
29846: PPUSH
29847: LD_VAR 0 2
29851: PPUSH
29852: CALL_OW 259
29856: ST_TO_ADDR
// if s1 = 1 then
29857: LD_VAR 0 2
29861: PUSH
29862: LD_INT 1
29864: EQUAL
29865: IFFALSE 29885
// s2 := rand ( 2 , 4 ) else
29867: LD_ADDR_VAR 0 3
29871: PUSH
29872: LD_INT 2
29874: PPUSH
29875: LD_INT 4
29877: PPUSH
29878: CALL_OW 12
29882: ST_TO_ADDR
29883: GO 29893
// s2 := 1 ;
29885: LD_ADDR_VAR 0 3
29889: PUSH
29890: LD_INT 1
29892: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
29893: LD_ADDR_VAR 0 5
29897: PUSH
29898: LD_VAR 0 6
29902: PUSH
29903: LD_INT 1
29905: ARRAY
29906: PPUSH
29907: LD_VAR 0 3
29911: PPUSH
29912: CALL_OW 259
29916: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
29917: LD_VAR 0 6
29921: PUSH
29922: LD_INT 1
29924: ARRAY
29925: PPUSH
29926: LD_VAR 0 2
29930: PPUSH
29931: LD_VAR 0 5
29935: PPUSH
29936: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
29940: LD_VAR 0 6
29944: PUSH
29945: LD_INT 1
29947: ARRAY
29948: PPUSH
29949: LD_VAR 0 3
29953: PPUSH
29954: LD_VAR 0 4
29958: PPUSH
29959: CALL_OW 237
// end ;
29963: PPOPN 6
29965: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
29966: LD_EXP 46
29970: PUSH
29971: LD_EXP 93
29975: AND
29976: IFFALSE 30055
29978: GO 29980
29980: DISABLE
29981: LD_INT 0
29983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
29984: LD_ADDR_VAR 0 1
29988: PUSH
29989: LD_INT 22
29991: PUSH
29992: LD_OWVAR 2
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 30
30003: PUSH
30004: LD_INT 3
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PPUSH
30015: CALL_OW 69
30019: ST_TO_ADDR
// if not tmp then
30020: LD_VAR 0 1
30024: NOT
30025: IFFALSE 30029
// exit ;
30027: GO 30055
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30029: LD_VAR 0 1
30033: PUSH
30034: LD_INT 1
30036: PPUSH
30037: LD_VAR 0 1
30041: PPUSH
30042: CALL_OW 12
30046: ARRAY
30047: PPUSH
30048: LD_INT 1
30050: PPUSH
30051: CALL_OW 234
// end ;
30055: PPOPN 1
30057: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30058: LD_EXP 46
30062: PUSH
30063: LD_EXP 94
30067: AND
30068: IFFALSE 30180
30070: GO 30072
30072: DISABLE
30073: LD_INT 0
30075: PPUSH
30076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30077: LD_ADDR_VAR 0 2
30081: PUSH
30082: LD_INT 22
30084: PUSH
30085: LD_OWVAR 2
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 2
30096: PUSH
30097: LD_INT 30
30099: PUSH
30100: LD_INT 27
30102: PUSH
30103: EMPTY
30104: LIST
30105: LIST
30106: PUSH
30107: LD_INT 30
30109: PUSH
30110: LD_INT 26
30112: PUSH
30113: EMPTY
30114: LIST
30115: LIST
30116: PUSH
30117: LD_INT 30
30119: PUSH
30120: LD_INT 28
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: PUSH
30133: EMPTY
30134: LIST
30135: LIST
30136: PPUSH
30137: CALL_OW 69
30141: ST_TO_ADDR
// if not tmp then
30142: LD_VAR 0 2
30146: NOT
30147: IFFALSE 30151
// exit ;
30149: GO 30180
// for i in tmp do
30151: LD_ADDR_VAR 0 1
30155: PUSH
30156: LD_VAR 0 2
30160: PUSH
30161: FOR_IN
30162: IFFALSE 30178
// SetLives ( i , 1 ) ;
30164: LD_VAR 0 1
30168: PPUSH
30169: LD_INT 1
30171: PPUSH
30172: CALL_OW 234
30176: GO 30161
30178: POP
30179: POP
// end ;
30180: PPOPN 2
30182: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30183: LD_EXP 46
30187: PUSH
30188: LD_EXP 95
30192: AND
30193: IFFALSE 30480
30195: GO 30197
30197: DISABLE
30198: LD_INT 0
30200: PPUSH
30201: PPUSH
30202: PPUSH
// begin i := rand ( 1 , 7 ) ;
30203: LD_ADDR_VAR 0 1
30207: PUSH
30208: LD_INT 1
30210: PPUSH
30211: LD_INT 7
30213: PPUSH
30214: CALL_OW 12
30218: ST_TO_ADDR
// case i of 1 :
30219: LD_VAR 0 1
30223: PUSH
30224: LD_INT 1
30226: DOUBLE
30227: EQUAL
30228: IFTRUE 30232
30230: GO 30242
30232: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30233: LD_STRING earthquake(getX(game), 0, 32)
30235: PPUSH
30236: CALL_OW 559
30240: GO 30480
30242: LD_INT 2
30244: DOUBLE
30245: EQUAL
30246: IFTRUE 30250
30248: GO 30264
30250: POP
// begin ToLua ( displayStucuk(); ) ;
30251: LD_STRING displayStucuk();
30253: PPUSH
30254: CALL_OW 559
// ResetFog ;
30258: CALL_OW 335
// end ; 3 :
30262: GO 30480
30264: LD_INT 3
30266: DOUBLE
30267: EQUAL
30268: IFTRUE 30272
30270: GO 30376
30272: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30273: LD_ADDR_VAR 0 2
30277: PUSH
30278: LD_INT 22
30280: PUSH
30281: LD_OWVAR 2
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PUSH
30290: LD_INT 25
30292: PUSH
30293: LD_INT 1
30295: PUSH
30296: EMPTY
30297: LIST
30298: LIST
30299: PUSH
30300: EMPTY
30301: LIST
30302: LIST
30303: PPUSH
30304: CALL_OW 69
30308: ST_TO_ADDR
// if not tmp then
30309: LD_VAR 0 2
30313: NOT
30314: IFFALSE 30318
// exit ;
30316: GO 30480
// un := tmp [ rand ( 1 , tmp ) ] ;
30318: LD_ADDR_VAR 0 3
30322: PUSH
30323: LD_VAR 0 2
30327: PUSH
30328: LD_INT 1
30330: PPUSH
30331: LD_VAR 0 2
30335: PPUSH
30336: CALL_OW 12
30340: ARRAY
30341: ST_TO_ADDR
// if Crawls ( un ) then
30342: LD_VAR 0 3
30346: PPUSH
30347: CALL_OW 318
30351: IFFALSE 30362
// ComWalk ( un ) ;
30353: LD_VAR 0 3
30357: PPUSH
30358: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30362: LD_VAR 0 3
30366: PPUSH
30367: LD_INT 8
30369: PPUSH
30370: CALL_OW 336
// end ; 4 :
30374: GO 30480
30376: LD_INT 4
30378: DOUBLE
30379: EQUAL
30380: IFTRUE 30384
30382: GO 30458
30384: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30385: LD_ADDR_VAR 0 2
30389: PUSH
30390: LD_INT 22
30392: PUSH
30393: LD_OWVAR 2
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 30
30404: PUSH
30405: LD_INT 29
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PPUSH
30416: CALL_OW 69
30420: ST_TO_ADDR
// if not tmp then
30421: LD_VAR 0 2
30425: NOT
30426: IFFALSE 30430
// exit ;
30428: GO 30480
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30430: LD_VAR 0 2
30434: PUSH
30435: LD_INT 1
30437: ARRAY
30438: PPUSH
30439: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30443: LD_VAR 0 2
30447: PUSH
30448: LD_INT 1
30450: ARRAY
30451: PPUSH
30452: CALL_OW 65
// end ; 5 .. 7 :
30456: GO 30480
30458: LD_INT 5
30460: DOUBLE
30461: GREATEREQUAL
30462: IFFALSE 30470
30464: LD_INT 7
30466: DOUBLE
30467: LESSEQUAL
30468: IFTRUE 30472
30470: GO 30479
30472: POP
// StreamSibBomb ; end ;
30473: CALL 26717 0 0
30477: GO 30480
30479: POP
// end ;
30480: PPOPN 3
30482: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
30483: LD_EXP 46
30487: PUSH
30488: LD_EXP 96
30492: AND
30493: IFFALSE 30649
30495: GO 30497
30497: DISABLE
30498: LD_INT 0
30500: PPUSH
30501: PPUSH
30502: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
30503: LD_ADDR_VAR 0 2
30507: PUSH
30508: LD_INT 81
30510: PUSH
30511: LD_OWVAR 2
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 2
30522: PUSH
30523: LD_INT 21
30525: PUSH
30526: LD_INT 1
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 21
30535: PUSH
30536: LD_INT 2
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: LIST
30547: PUSH
30548: EMPTY
30549: LIST
30550: LIST
30551: PPUSH
30552: CALL_OW 69
30556: ST_TO_ADDR
// if not tmp then
30557: LD_VAR 0 2
30561: NOT
30562: IFFALSE 30566
// exit ;
30564: GO 30649
// p := 0 ;
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: LD_INT 0
30573: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30574: LD_INT 35
30576: PPUSH
30577: CALL_OW 67
// p := p + 1 ;
30581: LD_ADDR_VAR 0 3
30585: PUSH
30586: LD_VAR 0 3
30590: PUSH
30591: LD_INT 1
30593: PLUS
30594: ST_TO_ADDR
// for i in tmp do
30595: LD_ADDR_VAR 0 1
30599: PUSH
30600: LD_VAR 0 2
30604: PUSH
30605: FOR_IN
30606: IFFALSE 30637
// if GetLives ( i ) < 1000 then
30608: LD_VAR 0 1
30612: PPUSH
30613: CALL_OW 256
30617: PUSH
30618: LD_INT 1000
30620: LESS
30621: IFFALSE 30635
// SetLives ( i , 1000 ) ;
30623: LD_VAR 0 1
30627: PPUSH
30628: LD_INT 1000
30630: PPUSH
30631: CALL_OW 234
30635: GO 30605
30637: POP
30638: POP
// until p > 20 ;
30639: LD_VAR 0 3
30643: PUSH
30644: LD_INT 20
30646: GREATER
30647: IFFALSE 30574
// end ;
30649: PPOPN 3
30651: END
// every 0 0$1 trigger StreamModeActive and sTime do
30652: LD_EXP 46
30656: PUSH
30657: LD_EXP 97
30661: AND
30662: IFFALSE 30697
30664: GO 30666
30666: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
30667: LD_INT 28
30669: PPUSH
30670: LD_OWVAR 2
30674: PPUSH
30675: LD_INT 2
30677: PPUSH
30678: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
30682: LD_INT 30
30684: PPUSH
30685: LD_OWVAR 2
30689: PPUSH
30690: LD_INT 2
30692: PPUSH
30693: CALL_OW 322
// end ;
30697: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
30698: LD_EXP 46
30702: PUSH
30703: LD_EXP 98
30707: AND
30708: IFFALSE 30829
30710: GO 30712
30712: DISABLE
30713: LD_INT 0
30715: PPUSH
30716: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30717: LD_ADDR_VAR 0 2
30721: PUSH
30722: LD_INT 22
30724: PUSH
30725: LD_OWVAR 2
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 21
30736: PUSH
30737: LD_INT 1
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: LD_INT 3
30746: PUSH
30747: LD_INT 23
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PUSH
30757: EMPTY
30758: LIST
30759: LIST
30760: PUSH
30761: EMPTY
30762: LIST
30763: LIST
30764: LIST
30765: PPUSH
30766: CALL_OW 69
30770: ST_TO_ADDR
// if not tmp then
30771: LD_VAR 0 2
30775: NOT
30776: IFFALSE 30780
// exit ;
30778: GO 30829
// for i in tmp do
30780: LD_ADDR_VAR 0 1
30784: PUSH
30785: LD_VAR 0 2
30789: PUSH
30790: FOR_IN
30791: IFFALSE 30827
// begin if Crawls ( i ) then
30793: LD_VAR 0 1
30797: PPUSH
30798: CALL_OW 318
30802: IFFALSE 30813
// ComWalk ( i ) ;
30804: LD_VAR 0 1
30808: PPUSH
30809: CALL_OW 138
// SetClass ( i , 2 ) ;
30813: LD_VAR 0 1
30817: PPUSH
30818: LD_INT 2
30820: PPUSH
30821: CALL_OW 336
// end ;
30825: GO 30790
30827: POP
30828: POP
// end ;
30829: PPOPN 2
30831: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
30832: LD_EXP 46
30836: PUSH
30837: LD_EXP 99
30841: AND
30842: IFFALSE 31130
30844: GO 30846
30846: DISABLE
30847: LD_INT 0
30849: PPUSH
30850: PPUSH
30851: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
30852: LD_OWVAR 2
30856: PPUSH
30857: LD_INT 9
30859: PPUSH
30860: LD_INT 1
30862: PPUSH
30863: LD_INT 1
30865: PPUSH
30866: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
30870: LD_INT 9
30872: PPUSH
30873: LD_OWVAR 2
30877: PPUSH
30878: CALL_OW 343
// uc_side := 9 ;
30882: LD_ADDR_OWVAR 20
30886: PUSH
30887: LD_INT 9
30889: ST_TO_ADDR
// uc_nation := 2 ;
30890: LD_ADDR_OWVAR 21
30894: PUSH
30895: LD_INT 2
30897: ST_TO_ADDR
// hc_name := Dark Warrior ;
30898: LD_ADDR_OWVAR 26
30902: PUSH
30903: LD_STRING Dark Warrior
30905: ST_TO_ADDR
// hc_gallery :=  ;
30906: LD_ADDR_OWVAR 33
30910: PUSH
30911: LD_STRING 
30913: ST_TO_ADDR
// hc_noskilllimit := true ;
30914: LD_ADDR_OWVAR 76
30918: PUSH
30919: LD_INT 1
30921: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
30922: LD_ADDR_OWVAR 31
30926: PUSH
30927: LD_INT 30
30929: PUSH
30930: LD_INT 30
30932: PUSH
30933: LD_INT 30
30935: PUSH
30936: LD_INT 30
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: ST_TO_ADDR
// un := CreateHuman ;
30945: LD_ADDR_VAR 0 3
30949: PUSH
30950: CALL_OW 44
30954: ST_TO_ADDR
// hc_noskilllimit := false ;
30955: LD_ADDR_OWVAR 76
30959: PUSH
30960: LD_INT 0
30962: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
30963: LD_VAR 0 3
30967: PPUSH
30968: LD_INT 1
30970: PPUSH
30971: CALL_OW 51
// ToLua ( playRanger() ) ;
30975: LD_STRING playRanger()
30977: PPUSH
30978: CALL_OW 559
// p := 0 ;
30982: LD_ADDR_VAR 0 2
30986: PUSH
30987: LD_INT 0
30989: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
30990: LD_INT 35
30992: PPUSH
30993: CALL_OW 67
// p := p + 1 ;
30997: LD_ADDR_VAR 0 2
31001: PUSH
31002: LD_VAR 0 2
31006: PUSH
31007: LD_INT 1
31009: PLUS
31010: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31011: LD_VAR 0 3
31015: PPUSH
31016: CALL_OW 256
31020: PUSH
31021: LD_INT 1000
31023: LESS
31024: IFFALSE 31038
// SetLives ( un , 1000 ) ;
31026: LD_VAR 0 3
31030: PPUSH
31031: LD_INT 1000
31033: PPUSH
31034: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31038: LD_VAR 0 3
31042: PPUSH
31043: LD_INT 81
31045: PUSH
31046: LD_OWVAR 2
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 91
31057: PUSH
31058: LD_VAR 0 3
31062: PUSH
31063: LD_INT 30
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: LIST
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PPUSH
31075: CALL_OW 69
31079: PPUSH
31080: LD_VAR 0 3
31084: PPUSH
31085: CALL_OW 74
31089: PPUSH
31090: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31094: LD_VAR 0 2
31098: PUSH
31099: LD_INT 80
31101: GREATER
31102: PUSH
31103: LD_VAR 0 3
31107: PPUSH
31108: CALL_OW 301
31112: OR
31113: IFFALSE 30990
// if un then
31115: LD_VAR 0 3
31119: IFFALSE 31130
// RemoveUnit ( un ) ;
31121: LD_VAR 0 3
31125: PPUSH
31126: CALL_OW 64
// end ;
31130: PPOPN 3
31132: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31133: LD_EXP 100
31137: IFFALSE 31253
31139: GO 31141
31141: DISABLE
31142: LD_INT 0
31144: PPUSH
31145: PPUSH
31146: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31147: LD_ADDR_VAR 0 2
31151: PUSH
31152: LD_INT 81
31154: PUSH
31155: LD_OWVAR 2
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: LD_INT 21
31166: PUSH
31167: LD_INT 1
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PPUSH
31178: CALL_OW 69
31182: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31183: LD_STRING playComputer()
31185: PPUSH
31186: CALL_OW 559
// if not tmp then
31190: LD_VAR 0 2
31194: NOT
31195: IFFALSE 31199
// exit ;
31197: GO 31253
// for i in tmp do
31199: LD_ADDR_VAR 0 1
31203: PUSH
31204: LD_VAR 0 2
31208: PUSH
31209: FOR_IN
31210: IFFALSE 31251
// for j := 1 to 4 do
31212: LD_ADDR_VAR 0 3
31216: PUSH
31217: DOUBLE
31218: LD_INT 1
31220: DEC
31221: ST_TO_ADDR
31222: LD_INT 4
31224: PUSH
31225: FOR_TO
31226: IFFALSE 31247
// SetSkill ( i , j , 10 ) ;
31228: LD_VAR 0 1
31232: PPUSH
31233: LD_VAR 0 3
31237: PPUSH
31238: LD_INT 10
31240: PPUSH
31241: CALL_OW 237
31245: GO 31225
31247: POP
31248: POP
31249: GO 31209
31251: POP
31252: POP
// end ;
31253: PPOPN 3
31255: END
// every 0 0$1 trigger s30 do var i , tmp ;
31256: LD_EXP 101
31260: IFFALSE 31329
31262: GO 31264
31264: DISABLE
31265: LD_INT 0
31267: PPUSH
31268: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31269: LD_ADDR_VAR 0 2
31273: PUSH
31274: LD_INT 22
31276: PUSH
31277: LD_OWVAR 2
31281: PUSH
31282: EMPTY
31283: LIST
31284: LIST
31285: PPUSH
31286: CALL_OW 69
31290: ST_TO_ADDR
// if not tmp then
31291: LD_VAR 0 2
31295: NOT
31296: IFFALSE 31300
// exit ;
31298: GO 31329
// for i in tmp do
31300: LD_ADDR_VAR 0 1
31304: PUSH
31305: LD_VAR 0 2
31309: PUSH
31310: FOR_IN
31311: IFFALSE 31327
// SetLives ( i , 300 ) ;
31313: LD_VAR 0 1
31317: PPUSH
31318: LD_INT 300
31320: PPUSH
31321: CALL_OW 234
31325: GO 31310
31327: POP
31328: POP
// end ;
31329: PPOPN 2
31331: END
// every 0 0$1 trigger s60 do var i , tmp ;
31332: LD_EXP 102
31336: IFFALSE 31405
31338: GO 31340
31340: DISABLE
31341: LD_INT 0
31343: PPUSH
31344: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31345: LD_ADDR_VAR 0 2
31349: PUSH
31350: LD_INT 22
31352: PUSH
31353: LD_OWVAR 2
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PPUSH
31362: CALL_OW 69
31366: ST_TO_ADDR
// if not tmp then
31367: LD_VAR 0 2
31371: NOT
31372: IFFALSE 31376
// exit ;
31374: GO 31405
// for i in tmp do
31376: LD_ADDR_VAR 0 1
31380: PUSH
31381: LD_VAR 0 2
31385: PUSH
31386: FOR_IN
31387: IFFALSE 31403
// SetLives ( i , 600 ) ;
31389: LD_VAR 0 1
31393: PPUSH
31394: LD_INT 600
31396: PPUSH
31397: CALL_OW 234
31401: GO 31386
31403: POP
31404: POP
// end ;
31405: PPOPN 2
31407: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31408: LD_INT 0
31410: PPUSH
// case cmd of 301 :
31411: LD_VAR 0 1
31415: PUSH
31416: LD_INT 301
31418: DOUBLE
31419: EQUAL
31420: IFTRUE 31424
31422: GO 31456
31424: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31425: LD_VAR 0 6
31429: PPUSH
31430: LD_VAR 0 7
31434: PPUSH
31435: LD_VAR 0 8
31439: PPUSH
31440: LD_VAR 0 4
31444: PPUSH
31445: LD_VAR 0 5
31449: PPUSH
31450: CALL 32657 0 5
31454: GO 31577
31456: LD_INT 302
31458: DOUBLE
31459: EQUAL
31460: IFTRUE 31464
31462: GO 31501
31464: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
31465: LD_VAR 0 6
31469: PPUSH
31470: LD_VAR 0 7
31474: PPUSH
31475: LD_VAR 0 8
31479: PPUSH
31480: LD_VAR 0 9
31484: PPUSH
31485: LD_VAR 0 4
31489: PPUSH
31490: LD_VAR 0 5
31494: PPUSH
31495: CALL 32748 0 6
31499: GO 31577
31501: LD_INT 303
31503: DOUBLE
31504: EQUAL
31505: IFTRUE 31509
31507: GO 31546
31509: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
31510: LD_VAR 0 6
31514: PPUSH
31515: LD_VAR 0 7
31519: PPUSH
31520: LD_VAR 0 8
31524: PPUSH
31525: LD_VAR 0 9
31529: PPUSH
31530: LD_VAR 0 4
31534: PPUSH
31535: LD_VAR 0 5
31539: PPUSH
31540: CALL 31582 0 6
31544: GO 31577
31546: LD_INT 304
31548: DOUBLE
31549: EQUAL
31550: IFTRUE 31554
31552: GO 31576
31554: POP
// hHackTeleport ( unit , x , y ) ; end ;
31555: LD_VAR 0 2
31559: PPUSH
31560: LD_VAR 0 4
31564: PPUSH
31565: LD_VAR 0 5
31569: PPUSH
31570: CALL 33341 0 3
31574: GO 31577
31576: POP
// end ;
31577: LD_VAR 0 12
31581: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
31582: LD_INT 0
31584: PPUSH
31585: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
31586: LD_VAR 0 1
31590: PUSH
31591: LD_INT 1
31593: LESS
31594: PUSH
31595: LD_VAR 0 1
31599: PUSH
31600: LD_INT 3
31602: GREATER
31603: OR
31604: PUSH
31605: LD_VAR 0 5
31609: PPUSH
31610: LD_VAR 0 6
31614: PPUSH
31615: CALL_OW 428
31619: OR
31620: IFFALSE 31624
// exit ;
31622: GO 32344
// uc_side := your_side ;
31624: LD_ADDR_OWVAR 20
31628: PUSH
31629: LD_OWVAR 2
31633: ST_TO_ADDR
// uc_nation := nation ;
31634: LD_ADDR_OWVAR 21
31638: PUSH
31639: LD_VAR 0 1
31643: ST_TO_ADDR
// bc_level = 1 ;
31644: LD_ADDR_OWVAR 43
31648: PUSH
31649: LD_INT 1
31651: ST_TO_ADDR
// case btype of 1 :
31652: LD_VAR 0 2
31656: PUSH
31657: LD_INT 1
31659: DOUBLE
31660: EQUAL
31661: IFTRUE 31665
31663: GO 31676
31665: POP
// bc_type := b_depot ; 2 :
31666: LD_ADDR_OWVAR 42
31670: PUSH
31671: LD_INT 0
31673: ST_TO_ADDR
31674: GO 32288
31676: LD_INT 2
31678: DOUBLE
31679: EQUAL
31680: IFTRUE 31684
31682: GO 31695
31684: POP
// bc_type := b_warehouse ; 3 :
31685: LD_ADDR_OWVAR 42
31689: PUSH
31690: LD_INT 1
31692: ST_TO_ADDR
31693: GO 32288
31695: LD_INT 3
31697: DOUBLE
31698: EQUAL
31699: IFTRUE 31703
31701: GO 31714
31703: POP
// bc_type := b_lab ; 4 .. 9 :
31704: LD_ADDR_OWVAR 42
31708: PUSH
31709: LD_INT 6
31711: ST_TO_ADDR
31712: GO 32288
31714: LD_INT 4
31716: DOUBLE
31717: GREATEREQUAL
31718: IFFALSE 31726
31720: LD_INT 9
31722: DOUBLE
31723: LESSEQUAL
31724: IFTRUE 31728
31726: GO 31780
31728: POP
// begin bc_type := b_lab_half ;
31729: LD_ADDR_OWVAR 42
31733: PUSH
31734: LD_INT 7
31736: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
31737: LD_ADDR_OWVAR 44
31741: PUSH
31742: LD_INT 10
31744: PUSH
31745: LD_INT 11
31747: PUSH
31748: LD_INT 12
31750: PUSH
31751: LD_INT 15
31753: PUSH
31754: LD_INT 14
31756: PUSH
31757: LD_INT 13
31759: PUSH
31760: EMPTY
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: PUSH
31768: LD_VAR 0 2
31772: PUSH
31773: LD_INT 3
31775: MINUS
31776: ARRAY
31777: ST_TO_ADDR
// end ; 10 .. 13 :
31778: GO 32288
31780: LD_INT 10
31782: DOUBLE
31783: GREATEREQUAL
31784: IFFALSE 31792
31786: LD_INT 13
31788: DOUBLE
31789: LESSEQUAL
31790: IFTRUE 31794
31792: GO 31871
31794: POP
// begin bc_type := b_lab_full ;
31795: LD_ADDR_OWVAR 42
31799: PUSH
31800: LD_INT 8
31802: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
31803: LD_ADDR_OWVAR 44
31807: PUSH
31808: LD_INT 10
31810: PUSH
31811: LD_INT 12
31813: PUSH
31814: LD_INT 14
31816: PUSH
31817: LD_INT 13
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: LIST
31824: LIST
31825: PUSH
31826: LD_VAR 0 2
31830: PUSH
31831: LD_INT 9
31833: MINUS
31834: ARRAY
31835: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
31836: LD_ADDR_OWVAR 45
31840: PUSH
31841: LD_INT 11
31843: PUSH
31844: LD_INT 15
31846: PUSH
31847: LD_INT 12
31849: PUSH
31850: LD_INT 15
31852: PUSH
31853: EMPTY
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: PUSH
31859: LD_VAR 0 2
31863: PUSH
31864: LD_INT 9
31866: MINUS
31867: ARRAY
31868: ST_TO_ADDR
// end ; 14 :
31869: GO 32288
31871: LD_INT 14
31873: DOUBLE
31874: EQUAL
31875: IFTRUE 31879
31877: GO 31890
31879: POP
// bc_type := b_workshop ; 15 :
31880: LD_ADDR_OWVAR 42
31884: PUSH
31885: LD_INT 2
31887: ST_TO_ADDR
31888: GO 32288
31890: LD_INT 15
31892: DOUBLE
31893: EQUAL
31894: IFTRUE 31898
31896: GO 31909
31898: POP
// bc_type := b_factory ; 16 :
31899: LD_ADDR_OWVAR 42
31903: PUSH
31904: LD_INT 3
31906: ST_TO_ADDR
31907: GO 32288
31909: LD_INT 16
31911: DOUBLE
31912: EQUAL
31913: IFTRUE 31917
31915: GO 31928
31917: POP
// bc_type := b_ext_gun ; 17 :
31918: LD_ADDR_OWVAR 42
31922: PUSH
31923: LD_INT 17
31925: ST_TO_ADDR
31926: GO 32288
31928: LD_INT 17
31930: DOUBLE
31931: EQUAL
31932: IFTRUE 31936
31934: GO 31964
31936: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
31937: LD_ADDR_OWVAR 42
31941: PUSH
31942: LD_INT 19
31944: PUSH
31945: LD_INT 23
31947: PUSH
31948: LD_INT 19
31950: PUSH
31951: EMPTY
31952: LIST
31953: LIST
31954: LIST
31955: PUSH
31956: LD_VAR 0 1
31960: ARRAY
31961: ST_TO_ADDR
31962: GO 32288
31964: LD_INT 18
31966: DOUBLE
31967: EQUAL
31968: IFTRUE 31972
31970: GO 31983
31972: POP
// bc_type := b_ext_radar ; 19 :
31973: LD_ADDR_OWVAR 42
31977: PUSH
31978: LD_INT 20
31980: ST_TO_ADDR
31981: GO 32288
31983: LD_INT 19
31985: DOUBLE
31986: EQUAL
31987: IFTRUE 31991
31989: GO 32002
31991: POP
// bc_type := b_ext_radio ; 20 :
31992: LD_ADDR_OWVAR 42
31996: PUSH
31997: LD_INT 22
31999: ST_TO_ADDR
32000: GO 32288
32002: LD_INT 20
32004: DOUBLE
32005: EQUAL
32006: IFTRUE 32010
32008: GO 32021
32010: POP
// bc_type := b_ext_siberium ; 21 :
32011: LD_ADDR_OWVAR 42
32015: PUSH
32016: LD_INT 21
32018: ST_TO_ADDR
32019: GO 32288
32021: LD_INT 21
32023: DOUBLE
32024: EQUAL
32025: IFTRUE 32029
32027: GO 32040
32029: POP
// bc_type := b_ext_computer ; 22 :
32030: LD_ADDR_OWVAR 42
32034: PUSH
32035: LD_INT 24
32037: ST_TO_ADDR
32038: GO 32288
32040: LD_INT 22
32042: DOUBLE
32043: EQUAL
32044: IFTRUE 32048
32046: GO 32059
32048: POP
// bc_type := b_ext_track ; 23 :
32049: LD_ADDR_OWVAR 42
32053: PUSH
32054: LD_INT 16
32056: ST_TO_ADDR
32057: GO 32288
32059: LD_INT 23
32061: DOUBLE
32062: EQUAL
32063: IFTRUE 32067
32065: GO 32078
32067: POP
// bc_type := b_ext_laser ; 24 :
32068: LD_ADDR_OWVAR 42
32072: PUSH
32073: LD_INT 25
32075: ST_TO_ADDR
32076: GO 32288
32078: LD_INT 24
32080: DOUBLE
32081: EQUAL
32082: IFTRUE 32086
32084: GO 32097
32086: POP
// bc_type := b_control_tower ; 25 :
32087: LD_ADDR_OWVAR 42
32091: PUSH
32092: LD_INT 36
32094: ST_TO_ADDR
32095: GO 32288
32097: LD_INT 25
32099: DOUBLE
32100: EQUAL
32101: IFTRUE 32105
32103: GO 32116
32105: POP
// bc_type := b_breastwork ; 26 :
32106: LD_ADDR_OWVAR 42
32110: PUSH
32111: LD_INT 31
32113: ST_TO_ADDR
32114: GO 32288
32116: LD_INT 26
32118: DOUBLE
32119: EQUAL
32120: IFTRUE 32124
32122: GO 32135
32124: POP
// bc_type := b_bunker ; 27 :
32125: LD_ADDR_OWVAR 42
32129: PUSH
32130: LD_INT 32
32132: ST_TO_ADDR
32133: GO 32288
32135: LD_INT 27
32137: DOUBLE
32138: EQUAL
32139: IFTRUE 32143
32141: GO 32154
32143: POP
// bc_type := b_turret ; 28 :
32144: LD_ADDR_OWVAR 42
32148: PUSH
32149: LD_INT 33
32151: ST_TO_ADDR
32152: GO 32288
32154: LD_INT 28
32156: DOUBLE
32157: EQUAL
32158: IFTRUE 32162
32160: GO 32173
32162: POP
// bc_type := b_armoury ; 29 :
32163: LD_ADDR_OWVAR 42
32167: PUSH
32168: LD_INT 4
32170: ST_TO_ADDR
32171: GO 32288
32173: LD_INT 29
32175: DOUBLE
32176: EQUAL
32177: IFTRUE 32181
32179: GO 32192
32181: POP
// bc_type := b_barracks ; 30 :
32182: LD_ADDR_OWVAR 42
32186: PUSH
32187: LD_INT 5
32189: ST_TO_ADDR
32190: GO 32288
32192: LD_INT 30
32194: DOUBLE
32195: EQUAL
32196: IFTRUE 32200
32198: GO 32211
32200: POP
// bc_type := b_solar_power ; 31 :
32201: LD_ADDR_OWVAR 42
32205: PUSH
32206: LD_INT 27
32208: ST_TO_ADDR
32209: GO 32288
32211: LD_INT 31
32213: DOUBLE
32214: EQUAL
32215: IFTRUE 32219
32217: GO 32230
32219: POP
// bc_type := b_oil_power ; 32 :
32220: LD_ADDR_OWVAR 42
32224: PUSH
32225: LD_INT 26
32227: ST_TO_ADDR
32228: GO 32288
32230: LD_INT 32
32232: DOUBLE
32233: EQUAL
32234: IFTRUE 32238
32236: GO 32249
32238: POP
// bc_type := b_siberite_power ; 33 :
32239: LD_ADDR_OWVAR 42
32243: PUSH
32244: LD_INT 28
32246: ST_TO_ADDR
32247: GO 32288
32249: LD_INT 33
32251: DOUBLE
32252: EQUAL
32253: IFTRUE 32257
32255: GO 32268
32257: POP
// bc_type := b_oil_mine ; 34 :
32258: LD_ADDR_OWVAR 42
32262: PUSH
32263: LD_INT 29
32265: ST_TO_ADDR
32266: GO 32288
32268: LD_INT 34
32270: DOUBLE
32271: EQUAL
32272: IFTRUE 32276
32274: GO 32287
32276: POP
// bc_type := b_siberite_mine ; end ;
32277: LD_ADDR_OWVAR 42
32281: PUSH
32282: LD_INT 30
32284: ST_TO_ADDR
32285: GO 32288
32287: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32288: LD_ADDR_VAR 0 8
32292: PUSH
32293: LD_VAR 0 5
32297: PPUSH
32298: LD_VAR 0 6
32302: PPUSH
32303: LD_VAR 0 3
32307: PPUSH
32308: CALL_OW 47
32312: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32313: LD_OWVAR 42
32317: PUSH
32318: LD_INT 32
32320: PUSH
32321: LD_INT 33
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: IN
32328: IFFALSE 32344
// PlaceWeaponTurret ( b , weapon ) ;
32330: LD_VAR 0 8
32334: PPUSH
32335: LD_VAR 0 4
32339: PPUSH
32340: CALL_OW 431
// end ;
32344: LD_VAR 0 7
32348: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32349: LD_INT 0
32351: PPUSH
32352: PPUSH
32353: PPUSH
32354: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32355: LD_ADDR_VAR 0 4
32359: PUSH
32360: LD_INT 22
32362: PUSH
32363: LD_OWVAR 2
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 2
32374: PUSH
32375: LD_INT 30
32377: PUSH
32378: LD_INT 0
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 30
32387: PUSH
32388: LD_INT 1
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: EMPTY
32396: LIST
32397: LIST
32398: LIST
32399: PUSH
32400: EMPTY
32401: LIST
32402: LIST
32403: PPUSH
32404: CALL_OW 69
32408: ST_TO_ADDR
// if not tmp then
32409: LD_VAR 0 4
32413: NOT
32414: IFFALSE 32418
// exit ;
32416: GO 32477
// for i in tmp do
32418: LD_ADDR_VAR 0 2
32422: PUSH
32423: LD_VAR 0 4
32427: PUSH
32428: FOR_IN
32429: IFFALSE 32475
// for j = 1 to 3 do
32431: LD_ADDR_VAR 0 3
32435: PUSH
32436: DOUBLE
32437: LD_INT 1
32439: DEC
32440: ST_TO_ADDR
32441: LD_INT 3
32443: PUSH
32444: FOR_TO
32445: IFFALSE 32471
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32447: LD_VAR 0 2
32451: PPUSH
32452: CALL_OW 274
32456: PPUSH
32457: LD_VAR 0 3
32461: PPUSH
32462: LD_INT 99999
32464: PPUSH
32465: CALL_OW 277
32469: GO 32444
32471: POP
32472: POP
32473: GO 32428
32475: POP
32476: POP
// end ;
32477: LD_VAR 0 1
32481: RET
// export function hHackSetLevel10 ; var i , j ; begin
32482: LD_INT 0
32484: PPUSH
32485: PPUSH
32486: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
32487: LD_ADDR_VAR 0 2
32491: PUSH
32492: LD_INT 21
32494: PUSH
32495: LD_INT 1
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PPUSH
32502: CALL_OW 69
32506: PUSH
32507: FOR_IN
32508: IFFALSE 32560
// if IsSelected ( i ) then
32510: LD_VAR 0 2
32514: PPUSH
32515: CALL_OW 306
32519: IFFALSE 32558
// begin for j := 1 to 4 do
32521: LD_ADDR_VAR 0 3
32525: PUSH
32526: DOUBLE
32527: LD_INT 1
32529: DEC
32530: ST_TO_ADDR
32531: LD_INT 4
32533: PUSH
32534: FOR_TO
32535: IFFALSE 32556
// SetSkill ( i , j , 10 ) ;
32537: LD_VAR 0 2
32541: PPUSH
32542: LD_VAR 0 3
32546: PPUSH
32547: LD_INT 10
32549: PPUSH
32550: CALL_OW 237
32554: GO 32534
32556: POP
32557: POP
// end ;
32558: GO 32507
32560: POP
32561: POP
// end ;
32562: LD_VAR 0 1
32566: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
32567: LD_INT 0
32569: PPUSH
32570: PPUSH
32571: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
32572: LD_ADDR_VAR 0 2
32576: PUSH
32577: LD_INT 22
32579: PUSH
32580: LD_OWVAR 2
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 21
32591: PUSH
32592: LD_INT 1
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PPUSH
32603: CALL_OW 69
32607: PUSH
32608: FOR_IN
32609: IFFALSE 32650
// begin for j := 1 to 4 do
32611: LD_ADDR_VAR 0 3
32615: PUSH
32616: DOUBLE
32617: LD_INT 1
32619: DEC
32620: ST_TO_ADDR
32621: LD_INT 4
32623: PUSH
32624: FOR_TO
32625: IFFALSE 32646
// SetSkill ( i , j , 10 ) ;
32627: LD_VAR 0 2
32631: PPUSH
32632: LD_VAR 0 3
32636: PPUSH
32637: LD_INT 10
32639: PPUSH
32640: CALL_OW 237
32644: GO 32624
32646: POP
32647: POP
// end ;
32648: GO 32608
32650: POP
32651: POP
// end ;
32652: LD_VAR 0 1
32656: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
32657: LD_INT 0
32659: PPUSH
// uc_side := your_side ;
32660: LD_ADDR_OWVAR 20
32664: PUSH
32665: LD_OWVAR 2
32669: ST_TO_ADDR
// uc_nation := nation ;
32670: LD_ADDR_OWVAR 21
32674: PUSH
32675: LD_VAR 0 1
32679: ST_TO_ADDR
// InitHc ;
32680: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
32684: LD_INT 0
32686: PPUSH
32687: LD_VAR 0 2
32691: PPUSH
32692: LD_VAR 0 3
32696: PPUSH
32697: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
32701: LD_VAR 0 4
32705: PPUSH
32706: LD_VAR 0 5
32710: PPUSH
32711: CALL_OW 428
32715: PUSH
32716: LD_INT 0
32718: EQUAL
32719: IFFALSE 32743
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
32721: CALL_OW 44
32725: PPUSH
32726: LD_VAR 0 4
32730: PPUSH
32731: LD_VAR 0 5
32735: PPUSH
32736: LD_INT 1
32738: PPUSH
32739: CALL_OW 48
// end ;
32743: LD_VAR 0 6
32747: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
32748: LD_INT 0
32750: PPUSH
32751: PPUSH
// uc_side := your_side ;
32752: LD_ADDR_OWVAR 20
32756: PUSH
32757: LD_OWVAR 2
32761: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
32762: LD_VAR 0 1
32766: PUSH
32767: LD_INT 1
32769: PUSH
32770: LD_INT 2
32772: PUSH
32773: LD_INT 3
32775: PUSH
32776: LD_INT 4
32778: PUSH
32779: LD_INT 5
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: IN
32789: IFFALSE 32801
// uc_nation := nation_american else
32791: LD_ADDR_OWVAR 21
32795: PUSH
32796: LD_INT 1
32798: ST_TO_ADDR
32799: GO 32844
// if chassis in [ 11 , 12 , 13 , 14 ] then
32801: LD_VAR 0 1
32805: PUSH
32806: LD_INT 11
32808: PUSH
32809: LD_INT 12
32811: PUSH
32812: LD_INT 13
32814: PUSH
32815: LD_INT 14
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: IN
32824: IFFALSE 32836
// uc_nation := nation_arabian else
32826: LD_ADDR_OWVAR 21
32830: PUSH
32831: LD_INT 2
32833: ST_TO_ADDR
32834: GO 32844
// uc_nation := nation_russian ;
32836: LD_ADDR_OWVAR 21
32840: PUSH
32841: LD_INT 3
32843: ST_TO_ADDR
// vc_chassis := chassis ;
32844: LD_ADDR_OWVAR 37
32848: PUSH
32849: LD_VAR 0 1
32853: ST_TO_ADDR
// vc_engine := engine ;
32854: LD_ADDR_OWVAR 39
32858: PUSH
32859: LD_VAR 0 2
32863: ST_TO_ADDR
// vc_control := control ;
32864: LD_ADDR_OWVAR 38
32868: PUSH
32869: LD_VAR 0 3
32873: ST_TO_ADDR
// vc_weapon := weapon ;
32874: LD_ADDR_OWVAR 40
32878: PUSH
32879: LD_VAR 0 4
32883: ST_TO_ADDR
// un := CreateVehicle ;
32884: LD_ADDR_VAR 0 8
32888: PUSH
32889: CALL_OW 45
32893: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
32894: LD_VAR 0 8
32898: PPUSH
32899: LD_INT 0
32901: PPUSH
32902: LD_INT 5
32904: PPUSH
32905: CALL_OW 12
32909: PPUSH
32910: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
32914: LD_VAR 0 8
32918: PPUSH
32919: LD_VAR 0 5
32923: PPUSH
32924: LD_VAR 0 6
32928: PPUSH
32929: LD_INT 1
32931: PPUSH
32932: CALL_OW 48
// end ;
32936: LD_VAR 0 7
32940: RET
// export hInvincible ; every 1 do
32941: GO 32943
32943: DISABLE
// hInvincible := [ ] ;
32944: LD_ADDR_EXP 103
32948: PUSH
32949: EMPTY
32950: ST_TO_ADDR
32951: END
// every 10 do var i ;
32952: GO 32954
32954: DISABLE
32955: LD_INT 0
32957: PPUSH
// begin enable ;
32958: ENABLE
// if not hInvincible then
32959: LD_EXP 103
32963: NOT
32964: IFFALSE 32968
// exit ;
32966: GO 33012
// for i in hInvincible do
32968: LD_ADDR_VAR 0 1
32972: PUSH
32973: LD_EXP 103
32977: PUSH
32978: FOR_IN
32979: IFFALSE 33010
// if GetLives ( i ) < 1000 then
32981: LD_VAR 0 1
32985: PPUSH
32986: CALL_OW 256
32990: PUSH
32991: LD_INT 1000
32993: LESS
32994: IFFALSE 33008
// SetLives ( i , 1000 ) ;
32996: LD_VAR 0 1
33000: PPUSH
33001: LD_INT 1000
33003: PPUSH
33004: CALL_OW 234
33008: GO 32978
33010: POP
33011: POP
// end ;
33012: PPOPN 1
33014: END
// export function hHackInvincible ; var i ; begin
33015: LD_INT 0
33017: PPUSH
33018: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33019: LD_ADDR_VAR 0 2
33023: PUSH
33024: LD_INT 2
33026: PUSH
33027: LD_INT 21
33029: PUSH
33030: LD_INT 1
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 21
33039: PUSH
33040: LD_INT 2
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: PPUSH
33052: CALL_OW 69
33056: PUSH
33057: FOR_IN
33058: IFFALSE 33119
// if IsSelected ( i ) then
33060: LD_VAR 0 2
33064: PPUSH
33065: CALL_OW 306
33069: IFFALSE 33117
// begin if i in hInvincible then
33071: LD_VAR 0 2
33075: PUSH
33076: LD_EXP 103
33080: IN
33081: IFFALSE 33101
// hInvincible := hInvincible diff i else
33083: LD_ADDR_EXP 103
33087: PUSH
33088: LD_EXP 103
33092: PUSH
33093: LD_VAR 0 2
33097: DIFF
33098: ST_TO_ADDR
33099: GO 33117
// hInvincible := hInvincible union i ;
33101: LD_ADDR_EXP 103
33105: PUSH
33106: LD_EXP 103
33110: PUSH
33111: LD_VAR 0 2
33115: UNION
33116: ST_TO_ADDR
// end ;
33117: GO 33057
33119: POP
33120: POP
// end ;
33121: LD_VAR 0 1
33125: RET
// export function hHackInvisible ; var i , j ; begin
33126: LD_INT 0
33128: PPUSH
33129: PPUSH
33130: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33131: LD_ADDR_VAR 0 2
33135: PUSH
33136: LD_INT 21
33138: PUSH
33139: LD_INT 1
33141: PUSH
33142: EMPTY
33143: LIST
33144: LIST
33145: PPUSH
33146: CALL_OW 69
33150: PUSH
33151: FOR_IN
33152: IFFALSE 33176
// if IsSelected ( i ) then
33154: LD_VAR 0 2
33158: PPUSH
33159: CALL_OW 306
33163: IFFALSE 33174
// ComForceInvisible ( i ) ;
33165: LD_VAR 0 2
33169: PPUSH
33170: CALL_OW 496
33174: GO 33151
33176: POP
33177: POP
// end ;
33178: LD_VAR 0 1
33182: RET
// export function hHackChangeYourSide ; begin
33183: LD_INT 0
33185: PPUSH
// if your_side = 8 then
33186: LD_OWVAR 2
33190: PUSH
33191: LD_INT 8
33193: EQUAL
33194: IFFALSE 33206
// your_side := 0 else
33196: LD_ADDR_OWVAR 2
33200: PUSH
33201: LD_INT 0
33203: ST_TO_ADDR
33204: GO 33220
// your_side := your_side + 1 ;
33206: LD_ADDR_OWVAR 2
33210: PUSH
33211: LD_OWVAR 2
33215: PUSH
33216: LD_INT 1
33218: PLUS
33219: ST_TO_ADDR
// end ;
33220: LD_VAR 0 1
33224: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33225: LD_INT 0
33227: PPUSH
33228: PPUSH
33229: PPUSH
// for i in all_units do
33230: LD_ADDR_VAR 0 2
33234: PUSH
33235: LD_OWVAR 3
33239: PUSH
33240: FOR_IN
33241: IFFALSE 33319
// if IsSelected ( i ) then
33243: LD_VAR 0 2
33247: PPUSH
33248: CALL_OW 306
33252: IFFALSE 33317
// begin j := GetSide ( i ) ;
33254: LD_ADDR_VAR 0 3
33258: PUSH
33259: LD_VAR 0 2
33263: PPUSH
33264: CALL_OW 255
33268: ST_TO_ADDR
// if j = 8 then
33269: LD_VAR 0 3
33273: PUSH
33274: LD_INT 8
33276: EQUAL
33277: IFFALSE 33289
// j := 0 else
33279: LD_ADDR_VAR 0 3
33283: PUSH
33284: LD_INT 0
33286: ST_TO_ADDR
33287: GO 33303
// j := j + 1 ;
33289: LD_ADDR_VAR 0 3
33293: PUSH
33294: LD_VAR 0 3
33298: PUSH
33299: LD_INT 1
33301: PLUS
33302: ST_TO_ADDR
// SetSide ( i , j ) ;
33303: LD_VAR 0 2
33307: PPUSH
33308: LD_VAR 0 3
33312: PPUSH
33313: CALL_OW 235
// end ;
33317: GO 33240
33319: POP
33320: POP
// end ;
33321: LD_VAR 0 1
33325: RET
// export function hHackFog ; begin
33326: LD_INT 0
33328: PPUSH
// FogOff ( true ) ;
33329: LD_INT 1
33331: PPUSH
33332: CALL_OW 344
// end ;
33336: LD_VAR 0 1
33340: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33341: LD_INT 0
33343: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33344: LD_VAR 0 1
33348: PPUSH
33349: LD_VAR 0 2
33353: PPUSH
33354: LD_VAR 0 3
33358: PPUSH
33359: LD_INT 1
33361: PPUSH
33362: LD_INT 1
33364: PPUSH
33365: CALL_OW 483
// CenterOnXY ( x , y ) ;
33369: LD_VAR 0 2
33373: PPUSH
33374: LD_VAR 0 3
33378: PPUSH
33379: CALL_OW 84
// end ;
33383: LD_VAR 0 4
33387: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33388: LD_INT 0
33390: PPUSH
33391: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33392: LD_VAR 0 1
33396: NOT
33397: PUSH
33398: LD_VAR 0 2
33402: PPUSH
33403: LD_VAR 0 3
33407: PPUSH
33408: CALL_OW 488
33412: NOT
33413: OR
33414: PUSH
33415: LD_VAR 0 1
33419: PPUSH
33420: CALL_OW 266
33424: PUSH
33425: LD_INT 3
33427: NONEQUAL
33428: PUSH
33429: LD_VAR 0 1
33433: PPUSH
33434: CALL_OW 247
33438: PUSH
33439: LD_INT 1
33441: EQUAL
33442: NOT
33443: AND
33444: OR
33445: IFFALSE 33449
// exit ;
33447: GO 33598
// if GetType ( factory ) = unit_human then
33449: LD_VAR 0 1
33453: PPUSH
33454: CALL_OW 247
33458: PUSH
33459: LD_INT 1
33461: EQUAL
33462: IFFALSE 33479
// factory := IsInUnit ( factory ) ;
33464: LD_ADDR_VAR 0 1
33468: PUSH
33469: LD_VAR 0 1
33473: PPUSH
33474: CALL_OW 310
33478: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
33479: LD_VAR 0 1
33483: PPUSH
33484: CALL_OW 266
33488: PUSH
33489: LD_INT 3
33491: NONEQUAL
33492: IFFALSE 33496
// exit ;
33494: GO 33598
// if HexInfo ( x , y ) = factory then
33496: LD_VAR 0 2
33500: PPUSH
33501: LD_VAR 0 3
33505: PPUSH
33506: CALL_OW 428
33510: PUSH
33511: LD_VAR 0 1
33515: EQUAL
33516: IFFALSE 33543
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
33518: LD_ADDR_EXP 104
33522: PUSH
33523: LD_EXP 104
33527: PPUSH
33528: LD_VAR 0 1
33532: PPUSH
33533: LD_INT 0
33535: PPUSH
33536: CALL_OW 1
33540: ST_TO_ADDR
33541: GO 33594
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
33543: LD_ADDR_EXP 104
33547: PUSH
33548: LD_EXP 104
33552: PPUSH
33553: LD_VAR 0 1
33557: PPUSH
33558: LD_VAR 0 1
33562: PPUSH
33563: CALL_OW 255
33567: PUSH
33568: LD_VAR 0 1
33572: PUSH
33573: LD_VAR 0 2
33577: PUSH
33578: LD_VAR 0 3
33582: PUSH
33583: EMPTY
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: PPUSH
33589: CALL_OW 1
33593: ST_TO_ADDR
// UpdateFactoryWaypoints ;
33594: CALL 33603 0 0
// end ;
33598: LD_VAR 0 4
33602: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
33603: LD_INT 0
33605: PPUSH
33606: PPUSH
33607: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
33608: LD_STRING resetFactoryWaypoint();
33610: PPUSH
33611: CALL_OW 559
// if factoryWaypoints then
33615: LD_EXP 104
33619: IFFALSE 33745
// begin list := PrepareArray ( factoryWaypoints ) ;
33621: LD_ADDR_VAR 0 3
33625: PUSH
33626: LD_EXP 104
33630: PPUSH
33631: CALL 80214 0 1
33635: ST_TO_ADDR
// for i := 1 to list do
33636: LD_ADDR_VAR 0 2
33640: PUSH
33641: DOUBLE
33642: LD_INT 1
33644: DEC
33645: ST_TO_ADDR
33646: LD_VAR 0 3
33650: PUSH
33651: FOR_TO
33652: IFFALSE 33743
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33654: LD_STRING setFactoryWaypointXY(
33656: PUSH
33657: LD_VAR 0 3
33661: PUSH
33662: LD_VAR 0 2
33666: ARRAY
33667: PUSH
33668: LD_INT 1
33670: ARRAY
33671: STR
33672: PUSH
33673: LD_STRING ,
33675: STR
33676: PUSH
33677: LD_VAR 0 3
33681: PUSH
33682: LD_VAR 0 2
33686: ARRAY
33687: PUSH
33688: LD_INT 2
33690: ARRAY
33691: STR
33692: PUSH
33693: LD_STRING ,
33695: STR
33696: PUSH
33697: LD_VAR 0 3
33701: PUSH
33702: LD_VAR 0 2
33706: ARRAY
33707: PUSH
33708: LD_INT 3
33710: ARRAY
33711: STR
33712: PUSH
33713: LD_STRING ,
33715: STR
33716: PUSH
33717: LD_VAR 0 3
33721: PUSH
33722: LD_VAR 0 2
33726: ARRAY
33727: PUSH
33728: LD_INT 4
33730: ARRAY
33731: STR
33732: PUSH
33733: LD_STRING )
33735: STR
33736: PPUSH
33737: CALL_OW 559
33741: GO 33651
33743: POP
33744: POP
// end ; end ;
33745: LD_VAR 0 1
33749: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
33750: LD_INT 0
33752: PPUSH
// if HexInfo ( x , y ) = warehouse then
33753: LD_VAR 0 2
33757: PPUSH
33758: LD_VAR 0 3
33762: PPUSH
33763: CALL_OW 428
33767: PUSH
33768: LD_VAR 0 1
33772: EQUAL
33773: IFFALSE 33800
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
33775: LD_ADDR_EXP 105
33779: PUSH
33780: LD_EXP 105
33784: PPUSH
33785: LD_VAR 0 1
33789: PPUSH
33790: LD_INT 0
33792: PPUSH
33793: CALL_OW 1
33797: ST_TO_ADDR
33798: GO 33851
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
33800: LD_ADDR_EXP 105
33804: PUSH
33805: LD_EXP 105
33809: PPUSH
33810: LD_VAR 0 1
33814: PPUSH
33815: LD_VAR 0 1
33819: PPUSH
33820: CALL_OW 255
33824: PUSH
33825: LD_VAR 0 1
33829: PUSH
33830: LD_VAR 0 2
33834: PUSH
33835: LD_VAR 0 3
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: LIST
33844: LIST
33845: PPUSH
33846: CALL_OW 1
33850: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
33851: CALL 33860 0 0
// end ;
33855: LD_VAR 0 4
33859: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
33860: LD_INT 0
33862: PPUSH
33863: PPUSH
33864: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
33865: LD_STRING resetWarehouseGatheringPoints();
33867: PPUSH
33868: CALL_OW 559
// if warehouseGatheringPoints then
33872: LD_EXP 105
33876: IFFALSE 34002
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
33878: LD_ADDR_VAR 0 3
33882: PUSH
33883: LD_EXP 105
33887: PPUSH
33888: CALL 80214 0 1
33892: ST_TO_ADDR
// for i := 1 to list do
33893: LD_ADDR_VAR 0 2
33897: PUSH
33898: DOUBLE
33899: LD_INT 1
33901: DEC
33902: ST_TO_ADDR
33903: LD_VAR 0 3
33907: PUSH
33908: FOR_TO
33909: IFFALSE 34000
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
33911: LD_STRING setWarehouseGatheringPointXY(
33913: PUSH
33914: LD_VAR 0 3
33918: PUSH
33919: LD_VAR 0 2
33923: ARRAY
33924: PUSH
33925: LD_INT 1
33927: ARRAY
33928: STR
33929: PUSH
33930: LD_STRING ,
33932: STR
33933: PUSH
33934: LD_VAR 0 3
33938: PUSH
33939: LD_VAR 0 2
33943: ARRAY
33944: PUSH
33945: LD_INT 2
33947: ARRAY
33948: STR
33949: PUSH
33950: LD_STRING ,
33952: STR
33953: PUSH
33954: LD_VAR 0 3
33958: PUSH
33959: LD_VAR 0 2
33963: ARRAY
33964: PUSH
33965: LD_INT 3
33967: ARRAY
33968: STR
33969: PUSH
33970: LD_STRING ,
33972: STR
33973: PUSH
33974: LD_VAR 0 3
33978: PUSH
33979: LD_VAR 0 2
33983: ARRAY
33984: PUSH
33985: LD_INT 4
33987: ARRAY
33988: STR
33989: PUSH
33990: LD_STRING )
33992: STR
33993: PPUSH
33994: CALL_OW 559
33998: GO 33908
34000: POP
34001: POP
// end ; end ;
34002: LD_VAR 0 1
34006: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34007: LD_EXP 105
34011: IFFALSE 34696
34013: GO 34015
34015: DISABLE
34016: LD_INT 0
34018: PPUSH
34019: PPUSH
34020: PPUSH
34021: PPUSH
34022: PPUSH
34023: PPUSH
34024: PPUSH
34025: PPUSH
34026: PPUSH
// begin enable ;
34027: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34028: LD_ADDR_VAR 0 3
34032: PUSH
34033: LD_EXP 105
34037: PPUSH
34038: CALL 80214 0 1
34042: ST_TO_ADDR
// if not list then
34043: LD_VAR 0 3
34047: NOT
34048: IFFALSE 34052
// exit ;
34050: GO 34696
// for i := 1 to list do
34052: LD_ADDR_VAR 0 1
34056: PUSH
34057: DOUBLE
34058: LD_INT 1
34060: DEC
34061: ST_TO_ADDR
34062: LD_VAR 0 3
34066: PUSH
34067: FOR_TO
34068: IFFALSE 34694
// begin depot := list [ i ] [ 2 ] ;
34070: LD_ADDR_VAR 0 8
34074: PUSH
34075: LD_VAR 0 3
34079: PUSH
34080: LD_VAR 0 1
34084: ARRAY
34085: PUSH
34086: LD_INT 2
34088: ARRAY
34089: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34090: LD_ADDR_VAR 0 5
34094: PUSH
34095: LD_VAR 0 3
34099: PUSH
34100: LD_VAR 0 1
34104: ARRAY
34105: PUSH
34106: LD_INT 1
34108: ARRAY
34109: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34110: LD_VAR 0 8
34114: PPUSH
34115: CALL_OW 301
34119: PUSH
34120: LD_VAR 0 5
34124: PUSH
34125: LD_VAR 0 8
34129: PPUSH
34130: CALL_OW 255
34134: NONEQUAL
34135: OR
34136: IFFALSE 34165
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34138: LD_ADDR_EXP 105
34142: PUSH
34143: LD_EXP 105
34147: PPUSH
34148: LD_VAR 0 8
34152: PPUSH
34153: LD_INT 0
34155: PPUSH
34156: CALL_OW 1
34160: ST_TO_ADDR
// exit ;
34161: POP
34162: POP
34163: GO 34696
// end ; x := list [ i ] [ 3 ] ;
34165: LD_ADDR_VAR 0 6
34169: PUSH
34170: LD_VAR 0 3
34174: PUSH
34175: LD_VAR 0 1
34179: ARRAY
34180: PUSH
34181: LD_INT 3
34183: ARRAY
34184: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34185: LD_ADDR_VAR 0 7
34189: PUSH
34190: LD_VAR 0 3
34194: PUSH
34195: LD_VAR 0 1
34199: ARRAY
34200: PUSH
34201: LD_INT 4
34203: ARRAY
34204: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34205: LD_ADDR_VAR 0 9
34209: PUSH
34210: LD_VAR 0 6
34214: PPUSH
34215: LD_VAR 0 7
34219: PPUSH
34220: LD_INT 16
34222: PPUSH
34223: CALL 78802 0 3
34227: ST_TO_ADDR
// if not cratesNearbyPoint then
34228: LD_VAR 0 9
34232: NOT
34233: IFFALSE 34239
// exit ;
34235: POP
34236: POP
34237: GO 34696
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34239: LD_ADDR_VAR 0 4
34243: PUSH
34244: LD_INT 22
34246: PUSH
34247: LD_VAR 0 5
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 3
34258: PUSH
34259: LD_INT 60
34261: PUSH
34262: EMPTY
34263: LIST
34264: PUSH
34265: EMPTY
34266: LIST
34267: LIST
34268: PUSH
34269: LD_INT 91
34271: PUSH
34272: LD_VAR 0 8
34276: PUSH
34277: LD_INT 6
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 2
34287: PUSH
34288: LD_INT 25
34290: PUSH
34291: LD_INT 2
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 25
34300: PUSH
34301: LD_INT 16
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: LIST
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: PPUSH
34319: CALL_OW 69
34323: PUSH
34324: LD_VAR 0 8
34328: PPUSH
34329: CALL_OW 313
34333: PPUSH
34334: LD_INT 3
34336: PUSH
34337: LD_INT 60
34339: PUSH
34340: EMPTY
34341: LIST
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: LD_INT 25
34352: PUSH
34353: LD_INT 2
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 25
34362: PUSH
34363: LD_INT 16
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: LIST
34374: PUSH
34375: EMPTY
34376: LIST
34377: LIST
34378: PPUSH
34379: CALL_OW 72
34383: UNION
34384: ST_TO_ADDR
// if tmp then
34385: LD_VAR 0 4
34389: IFFALSE 34469
// begin tmp := ShrinkArray ( tmp , 3 ) ;
34391: LD_ADDR_VAR 0 4
34395: PUSH
34396: LD_VAR 0 4
34400: PPUSH
34401: LD_INT 3
34403: PPUSH
34404: CALL 76771 0 2
34408: ST_TO_ADDR
// for j in tmp do
34409: LD_ADDR_VAR 0 2
34413: PUSH
34414: LD_VAR 0 4
34418: PUSH
34419: FOR_IN
34420: IFFALSE 34463
// begin if IsInUnit ( j ) then
34422: LD_VAR 0 2
34426: PPUSH
34427: CALL_OW 310
34431: IFFALSE 34442
// ComExit ( j ) ;
34433: LD_VAR 0 2
34437: PPUSH
34438: CALL 76854 0 1
// AddComCollect ( j , x , y ) ;
34442: LD_VAR 0 2
34446: PPUSH
34447: LD_VAR 0 6
34451: PPUSH
34452: LD_VAR 0 7
34456: PPUSH
34457: CALL_OW 177
// end ;
34461: GO 34419
34463: POP
34464: POP
// exit ;
34465: POP
34466: POP
34467: GO 34696
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
34469: LD_ADDR_VAR 0 4
34473: PUSH
34474: LD_INT 22
34476: PUSH
34477: LD_VAR 0 5
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: PUSH
34486: LD_INT 91
34488: PUSH
34489: LD_VAR 0 8
34493: PUSH
34494: LD_INT 8
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 2
34504: PUSH
34505: LD_INT 34
34507: PUSH
34508: LD_INT 12
34510: PUSH
34511: EMPTY
34512: LIST
34513: LIST
34514: PUSH
34515: LD_INT 34
34517: PUSH
34518: LD_INT 51
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 34
34527: PUSH
34528: LD_INT 32
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PUSH
34535: LD_INT 34
34537: PUSH
34538: LD_INT 89
34540: PUSH
34541: EMPTY
34542: LIST
34543: LIST
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: LIST
34556: PPUSH
34557: CALL_OW 69
34561: ST_TO_ADDR
// if tmp then
34562: LD_VAR 0 4
34566: IFFALSE 34692
// begin for j in tmp do
34568: LD_ADDR_VAR 0 2
34572: PUSH
34573: LD_VAR 0 4
34577: PUSH
34578: FOR_IN
34579: IFFALSE 34690
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
34581: LD_VAR 0 2
34585: PPUSH
34586: CALL_OW 262
34590: PUSH
34591: LD_INT 3
34593: EQUAL
34594: PUSH
34595: LD_VAR 0 2
34599: PPUSH
34600: CALL_OW 261
34604: PUSH
34605: LD_INT 20
34607: GREATER
34608: OR
34609: PUSH
34610: LD_VAR 0 2
34614: PPUSH
34615: CALL_OW 314
34619: NOT
34620: AND
34621: PUSH
34622: LD_VAR 0 2
34626: PPUSH
34627: CALL_OW 263
34631: PUSH
34632: LD_INT 1
34634: NONEQUAL
34635: PUSH
34636: LD_VAR 0 2
34640: PPUSH
34641: CALL_OW 311
34645: OR
34646: AND
34647: IFFALSE 34688
// begin ComCollect ( j , x , y ) ;
34649: LD_VAR 0 2
34653: PPUSH
34654: LD_VAR 0 6
34658: PPUSH
34659: LD_VAR 0 7
34663: PPUSH
34664: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
34668: LD_VAR 0 2
34672: PPUSH
34673: LD_VAR 0 8
34677: PPUSH
34678: CALL_OW 172
// exit ;
34682: POP
34683: POP
34684: POP
34685: POP
34686: GO 34696
// end ;
34688: GO 34578
34690: POP
34691: POP
// end ; end ;
34692: GO 34067
34694: POP
34695: POP
// end ; end_of_file
34696: PPOPN 9
34698: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
34699: LD_INT 0
34701: PPUSH
34702: PPUSH
34703: PPUSH
34704: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34705: LD_VAR 0 1
34709: PPUSH
34710: CALL_OW 264
34714: PUSH
34715: LD_INT 91
34717: EQUAL
34718: IFFALSE 34790
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34720: LD_INT 68
34722: PPUSH
34723: LD_VAR 0 1
34727: PPUSH
34728: CALL_OW 255
34732: PPUSH
34733: CALL_OW 321
34737: PUSH
34738: LD_INT 2
34740: EQUAL
34741: IFFALSE 34753
// eff := 70 else
34743: LD_ADDR_VAR 0 4
34747: PUSH
34748: LD_INT 70
34750: ST_TO_ADDR
34751: GO 34761
// eff := 30 ;
34753: LD_ADDR_VAR 0 4
34757: PUSH
34758: LD_INT 30
34760: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34761: LD_VAR 0 1
34765: PPUSH
34766: CALL_OW 250
34770: PPUSH
34771: LD_VAR 0 1
34775: PPUSH
34776: CALL_OW 251
34780: PPUSH
34781: LD_VAR 0 4
34785: PPUSH
34786: CALL_OW 495
// end ; end ;
34790: LD_VAR 0 2
34794: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
34795: LD_INT 0
34797: PPUSH
// end ;
34798: LD_VAR 0 4
34802: RET
// export function SOS_Command ( cmd ) ; begin
34803: LD_INT 0
34805: PPUSH
// end ;
34806: LD_VAR 0 2
34810: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
34811: LD_INT 0
34813: PPUSH
// end ;
34814: LD_VAR 0 6
34818: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
34819: LD_INT 0
34821: PPUSH
34822: PPUSH
// if not vehicle or not factory then
34823: LD_VAR 0 1
34827: NOT
34828: PUSH
34829: LD_VAR 0 2
34833: NOT
34834: OR
34835: IFFALSE 34839
// exit ;
34837: GO 35070
// if factoryWaypoints >= factory then
34839: LD_EXP 104
34843: PUSH
34844: LD_VAR 0 2
34848: GREATEREQUAL
34849: IFFALSE 35070
// if factoryWaypoints [ factory ] then
34851: LD_EXP 104
34855: PUSH
34856: LD_VAR 0 2
34860: ARRAY
34861: IFFALSE 35070
// begin if GetControl ( vehicle ) = control_manual then
34863: LD_VAR 0 1
34867: PPUSH
34868: CALL_OW 263
34872: PUSH
34873: LD_INT 1
34875: EQUAL
34876: IFFALSE 34957
// begin driver := IsDrivenBy ( vehicle ) ;
34878: LD_ADDR_VAR 0 4
34882: PUSH
34883: LD_VAR 0 1
34887: PPUSH
34888: CALL_OW 311
34892: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34893: LD_VAR 0 4
34897: PPUSH
34898: LD_EXP 104
34902: PUSH
34903: LD_VAR 0 2
34907: ARRAY
34908: PUSH
34909: LD_INT 3
34911: ARRAY
34912: PPUSH
34913: LD_EXP 104
34917: PUSH
34918: LD_VAR 0 2
34922: ARRAY
34923: PUSH
34924: LD_INT 4
34926: ARRAY
34927: PPUSH
34928: CALL_OW 171
// AddComExitVehicle ( driver ) ;
34932: LD_VAR 0 4
34936: PPUSH
34937: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
34941: LD_VAR 0 4
34945: PPUSH
34946: LD_VAR 0 2
34950: PPUSH
34951: CALL_OW 180
// end else
34955: GO 35070
// if GetControl ( vehicle ) = control_remote then
34957: LD_VAR 0 1
34961: PPUSH
34962: CALL_OW 263
34966: PUSH
34967: LD_INT 2
34969: EQUAL
34970: IFFALSE 35031
// begin wait ( 0 0$2 ) ;
34972: LD_INT 70
34974: PPUSH
34975: CALL_OW 67
// if Connect ( vehicle ) then
34979: LD_VAR 0 1
34983: PPUSH
34984: CALL 47094 0 1
34988: IFFALSE 35029
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
34990: LD_VAR 0 1
34994: PPUSH
34995: LD_EXP 104
34999: PUSH
35000: LD_VAR 0 2
35004: ARRAY
35005: PUSH
35006: LD_INT 3
35008: ARRAY
35009: PPUSH
35010: LD_EXP 104
35014: PUSH
35015: LD_VAR 0 2
35019: ARRAY
35020: PUSH
35021: LD_INT 4
35023: ARRAY
35024: PPUSH
35025: CALL_OW 171
// end else
35029: GO 35070
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
35031: LD_VAR 0 1
35035: PPUSH
35036: LD_EXP 104
35040: PUSH
35041: LD_VAR 0 2
35045: ARRAY
35046: PUSH
35047: LD_INT 3
35049: ARRAY
35050: PPUSH
35051: LD_EXP 104
35055: PUSH
35056: LD_VAR 0 2
35060: ARRAY
35061: PUSH
35062: LD_INT 4
35064: ARRAY
35065: PPUSH
35066: CALL_OW 171
// end ; end ;
35070: LD_VAR 0 3
35074: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
35075: LD_INT 0
35077: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
35078: LD_VAR 0 1
35082: PUSH
35083: LD_INT 250
35085: EQUAL
35086: PUSH
35087: LD_VAR 0 2
35091: PPUSH
35092: CALL_OW 264
35096: PUSH
35097: LD_INT 81
35099: EQUAL
35100: AND
35101: IFFALSE 35122
// MinerPlaceMine ( unit , x , y ) ;
35103: LD_VAR 0 2
35107: PPUSH
35108: LD_VAR 0 4
35112: PPUSH
35113: LD_VAR 0 5
35117: PPUSH
35118: CALL 37507 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
35122: LD_VAR 0 1
35126: PUSH
35127: LD_INT 251
35129: EQUAL
35130: PUSH
35131: LD_VAR 0 2
35135: PPUSH
35136: CALL_OW 264
35140: PUSH
35141: LD_INT 81
35143: EQUAL
35144: AND
35145: IFFALSE 35166
// MinerDetonateMine ( unit , x , y ) ;
35147: LD_VAR 0 2
35151: PPUSH
35152: LD_VAR 0 4
35156: PPUSH
35157: LD_VAR 0 5
35161: PPUSH
35162: CALL 37782 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
35166: LD_VAR 0 1
35170: PUSH
35171: LD_INT 252
35173: EQUAL
35174: PUSH
35175: LD_VAR 0 2
35179: PPUSH
35180: CALL_OW 264
35184: PUSH
35185: LD_INT 81
35187: EQUAL
35188: AND
35189: IFFALSE 35210
// MinerCreateMinefield ( unit , x , y ) ;
35191: LD_VAR 0 2
35195: PPUSH
35196: LD_VAR 0 4
35200: PPUSH
35201: LD_VAR 0 5
35205: PPUSH
35206: CALL 38199 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
35210: LD_VAR 0 1
35214: PUSH
35215: LD_INT 253
35217: EQUAL
35218: PUSH
35219: LD_VAR 0 2
35223: PPUSH
35224: CALL_OW 257
35228: PUSH
35229: LD_INT 5
35231: EQUAL
35232: AND
35233: IFFALSE 35254
// ComBinocular ( unit , x , y ) ;
35235: LD_VAR 0 2
35239: PPUSH
35240: LD_VAR 0 4
35244: PPUSH
35245: LD_VAR 0 5
35249: PPUSH
35250: CALL 38568 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
35254: LD_VAR 0 1
35258: PUSH
35259: LD_INT 254
35261: EQUAL
35262: PUSH
35263: LD_VAR 0 2
35267: PPUSH
35268: CALL_OW 264
35272: PUSH
35273: LD_INT 99
35275: EQUAL
35276: AND
35277: PUSH
35278: LD_VAR 0 3
35282: PPUSH
35283: CALL_OW 263
35287: PUSH
35288: LD_INT 3
35290: EQUAL
35291: AND
35292: IFFALSE 35308
// HackDestroyVehicle ( unit , selectedUnit ) ;
35294: LD_VAR 0 2
35298: PPUSH
35299: LD_VAR 0 3
35303: PPUSH
35304: CALL 36871 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
35308: LD_VAR 0 1
35312: PUSH
35313: LD_INT 255
35315: EQUAL
35316: PUSH
35317: LD_VAR 0 2
35321: PPUSH
35322: CALL_OW 264
35326: PUSH
35327: LD_INT 14
35329: PUSH
35330: LD_INT 53
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: IN
35337: AND
35338: PUSH
35339: LD_VAR 0 4
35343: PPUSH
35344: LD_VAR 0 5
35348: PPUSH
35349: CALL_OW 488
35353: AND
35354: IFFALSE 35378
// CutTreeXYR ( unit , x , y , 12 ) ;
35356: LD_VAR 0 2
35360: PPUSH
35361: LD_VAR 0 4
35365: PPUSH
35366: LD_VAR 0 5
35370: PPUSH
35371: LD_INT 12
35373: PPUSH
35374: CALL 35441 0 4
// if cmd = 256 then
35378: LD_VAR 0 1
35382: PUSH
35383: LD_INT 256
35385: EQUAL
35386: IFFALSE 35407
// SetFactoryWaypoint ( unit , x , y ) ;
35388: LD_VAR 0 2
35392: PPUSH
35393: LD_VAR 0 4
35397: PPUSH
35398: LD_VAR 0 5
35402: PPUSH
35403: CALL 33388 0 3
// if cmd = 257 then
35407: LD_VAR 0 1
35411: PUSH
35412: LD_INT 257
35414: EQUAL
35415: IFFALSE 35436
// SetWarehouseGatheringPoint ( unit , x , y ) ;
35417: LD_VAR 0 2
35421: PPUSH
35422: LD_VAR 0 4
35426: PPUSH
35427: LD_VAR 0 5
35431: PPUSH
35432: CALL 33750 0 3
// end ;
35436: LD_VAR 0 6
35440: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
35441: LD_INT 0
35443: PPUSH
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
35452: LD_VAR 0 1
35456: NOT
35457: PUSH
35458: LD_VAR 0 2
35462: PPUSH
35463: LD_VAR 0 3
35467: PPUSH
35468: CALL_OW 488
35472: NOT
35473: OR
35474: PUSH
35475: LD_VAR 0 4
35479: NOT
35480: OR
35481: IFFALSE 35485
// exit ;
35483: GO 35825
// list := [ ] ;
35485: LD_ADDR_VAR 0 13
35489: PUSH
35490: EMPTY
35491: ST_TO_ADDR
// if x - r < 0 then
35492: LD_VAR 0 2
35496: PUSH
35497: LD_VAR 0 4
35501: MINUS
35502: PUSH
35503: LD_INT 0
35505: LESS
35506: IFFALSE 35518
// min_x := 0 else
35508: LD_ADDR_VAR 0 7
35512: PUSH
35513: LD_INT 0
35515: ST_TO_ADDR
35516: GO 35534
// min_x := x - r ;
35518: LD_ADDR_VAR 0 7
35522: PUSH
35523: LD_VAR 0 2
35527: PUSH
35528: LD_VAR 0 4
35532: MINUS
35533: ST_TO_ADDR
// if y - r < 0 then
35534: LD_VAR 0 3
35538: PUSH
35539: LD_VAR 0 4
35543: MINUS
35544: PUSH
35545: LD_INT 0
35547: LESS
35548: IFFALSE 35560
// min_y := 0 else
35550: LD_ADDR_VAR 0 8
35554: PUSH
35555: LD_INT 0
35557: ST_TO_ADDR
35558: GO 35576
// min_y := y - r ;
35560: LD_ADDR_VAR 0 8
35564: PUSH
35565: LD_VAR 0 3
35569: PUSH
35570: LD_VAR 0 4
35574: MINUS
35575: ST_TO_ADDR
// max_x := x + r ;
35576: LD_ADDR_VAR 0 9
35580: PUSH
35581: LD_VAR 0 2
35585: PUSH
35586: LD_VAR 0 4
35590: PLUS
35591: ST_TO_ADDR
// max_y := y + r ;
35592: LD_ADDR_VAR 0 10
35596: PUSH
35597: LD_VAR 0 3
35601: PUSH
35602: LD_VAR 0 4
35606: PLUS
35607: ST_TO_ADDR
// for _x = min_x to max_x do
35608: LD_ADDR_VAR 0 11
35612: PUSH
35613: DOUBLE
35614: LD_VAR 0 7
35618: DEC
35619: ST_TO_ADDR
35620: LD_VAR 0 9
35624: PUSH
35625: FOR_TO
35626: IFFALSE 35743
// for _y = min_y to max_y do
35628: LD_ADDR_VAR 0 12
35632: PUSH
35633: DOUBLE
35634: LD_VAR 0 8
35638: DEC
35639: ST_TO_ADDR
35640: LD_VAR 0 10
35644: PUSH
35645: FOR_TO
35646: IFFALSE 35739
// begin if not ValidHex ( _x , _y ) then
35648: LD_VAR 0 11
35652: PPUSH
35653: LD_VAR 0 12
35657: PPUSH
35658: CALL_OW 488
35662: NOT
35663: IFFALSE 35667
// continue ;
35665: GO 35645
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
35667: LD_VAR 0 11
35671: PPUSH
35672: LD_VAR 0 12
35676: PPUSH
35677: CALL_OW 351
35681: PUSH
35682: LD_VAR 0 11
35686: PPUSH
35687: LD_VAR 0 12
35691: PPUSH
35692: CALL_OW 554
35696: AND
35697: IFFALSE 35737
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
35699: LD_ADDR_VAR 0 13
35703: PUSH
35704: LD_VAR 0 13
35708: PPUSH
35709: LD_VAR 0 13
35713: PUSH
35714: LD_INT 1
35716: PLUS
35717: PPUSH
35718: LD_VAR 0 11
35722: PUSH
35723: LD_VAR 0 12
35727: PUSH
35728: EMPTY
35729: LIST
35730: LIST
35731: PPUSH
35732: CALL_OW 2
35736: ST_TO_ADDR
// end ;
35737: GO 35645
35739: POP
35740: POP
35741: GO 35625
35743: POP
35744: POP
// if not list then
35745: LD_VAR 0 13
35749: NOT
35750: IFFALSE 35754
// exit ;
35752: GO 35825
// for i in list do
35754: LD_ADDR_VAR 0 6
35758: PUSH
35759: LD_VAR 0 13
35763: PUSH
35764: FOR_IN
35765: IFFALSE 35823
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
35767: LD_VAR 0 1
35771: PPUSH
35772: LD_STRING M
35774: PUSH
35775: LD_VAR 0 6
35779: PUSH
35780: LD_INT 1
35782: ARRAY
35783: PUSH
35784: LD_VAR 0 6
35788: PUSH
35789: LD_INT 2
35791: ARRAY
35792: PUSH
35793: LD_INT 0
35795: PUSH
35796: LD_INT 0
35798: PUSH
35799: LD_INT 0
35801: PUSH
35802: LD_INT 0
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: PUSH
35814: EMPTY
35815: LIST
35816: PPUSH
35817: CALL_OW 447
35821: GO 35764
35823: POP
35824: POP
// end ;
35825: LD_VAR 0 5
35829: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
35830: LD_EXP 107
35834: NOT
35835: IFFALSE 35885
35837: GO 35839
35839: DISABLE
// begin initHack := true ;
35840: LD_ADDR_EXP 107
35844: PUSH
35845: LD_INT 1
35847: ST_TO_ADDR
// hackTanks := [ ] ;
35848: LD_ADDR_EXP 108
35852: PUSH
35853: EMPTY
35854: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
35855: LD_ADDR_EXP 109
35859: PUSH
35860: EMPTY
35861: ST_TO_ADDR
// hackLimit := 3 ;
35862: LD_ADDR_EXP 110
35866: PUSH
35867: LD_INT 3
35869: ST_TO_ADDR
// hackDist := 12 ;
35870: LD_ADDR_EXP 111
35874: PUSH
35875: LD_INT 12
35877: ST_TO_ADDR
// hackCounter := [ ] ;
35878: LD_ADDR_EXP 112
35882: PUSH
35883: EMPTY
35884: ST_TO_ADDR
// end ;
35885: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
35886: LD_EXP 107
35890: PUSH
35891: LD_INT 34
35893: PUSH
35894: LD_INT 99
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PPUSH
35901: CALL_OW 69
35905: AND
35906: IFFALSE 36159
35908: GO 35910
35910: DISABLE
35911: LD_INT 0
35913: PPUSH
35914: PPUSH
// begin enable ;
35915: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
35916: LD_ADDR_VAR 0 1
35920: PUSH
35921: LD_INT 34
35923: PUSH
35924: LD_INT 99
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PPUSH
35931: CALL_OW 69
35935: PUSH
35936: FOR_IN
35937: IFFALSE 36157
// begin if not i in hackTanks then
35939: LD_VAR 0 1
35943: PUSH
35944: LD_EXP 108
35948: IN
35949: NOT
35950: IFFALSE 36033
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
35952: LD_ADDR_EXP 108
35956: PUSH
35957: LD_EXP 108
35961: PPUSH
35962: LD_EXP 108
35966: PUSH
35967: LD_INT 1
35969: PLUS
35970: PPUSH
35971: LD_VAR 0 1
35975: PPUSH
35976: CALL_OW 1
35980: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
35981: LD_ADDR_EXP 109
35985: PUSH
35986: LD_EXP 109
35990: PPUSH
35991: LD_EXP 109
35995: PUSH
35996: LD_INT 1
35998: PLUS
35999: PPUSH
36000: EMPTY
36001: PPUSH
36002: CALL_OW 1
36006: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
36007: LD_ADDR_EXP 112
36011: PUSH
36012: LD_EXP 112
36016: PPUSH
36017: LD_EXP 112
36021: PUSH
36022: LD_INT 1
36024: PLUS
36025: PPUSH
36026: EMPTY
36027: PPUSH
36028: CALL_OW 1
36032: ST_TO_ADDR
// end ; if not IsOk ( i ) then
36033: LD_VAR 0 1
36037: PPUSH
36038: CALL_OW 302
36042: NOT
36043: IFFALSE 36056
// begin HackUnlinkAll ( i ) ;
36045: LD_VAR 0 1
36049: PPUSH
36050: CALL 36162 0 1
// continue ;
36054: GO 35936
// end ; HackCheckCapturedStatus ( i ) ;
36056: LD_VAR 0 1
36060: PPUSH
36061: CALL 36605 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
36065: LD_ADDR_VAR 0 2
36069: PUSH
36070: LD_INT 81
36072: PUSH
36073: LD_VAR 0 1
36077: PPUSH
36078: CALL_OW 255
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 33
36089: PUSH
36090: LD_INT 3
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 91
36099: PUSH
36100: LD_VAR 0 1
36104: PUSH
36105: LD_EXP 111
36109: PUSH
36110: EMPTY
36111: LIST
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 50
36117: PUSH
36118: EMPTY
36119: LIST
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: PPUSH
36127: CALL_OW 69
36131: ST_TO_ADDR
// if not tmp then
36132: LD_VAR 0 2
36136: NOT
36137: IFFALSE 36141
// continue ;
36139: GO 35936
// HackLink ( i , tmp ) ;
36141: LD_VAR 0 1
36145: PPUSH
36146: LD_VAR 0 2
36150: PPUSH
36151: CALL 36298 0 2
// end ;
36155: GO 35936
36157: POP
36158: POP
// end ;
36159: PPOPN 2
36161: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
36162: LD_INT 0
36164: PPUSH
36165: PPUSH
36166: PPUSH
// if not hack in hackTanks then
36167: LD_VAR 0 1
36171: PUSH
36172: LD_EXP 108
36176: IN
36177: NOT
36178: IFFALSE 36182
// exit ;
36180: GO 36293
// index := GetElementIndex ( hackTanks , hack ) ;
36182: LD_ADDR_VAR 0 4
36186: PUSH
36187: LD_EXP 108
36191: PPUSH
36192: LD_VAR 0 1
36196: PPUSH
36197: CALL 43910 0 2
36201: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
36202: LD_EXP 109
36206: PUSH
36207: LD_VAR 0 4
36211: ARRAY
36212: IFFALSE 36293
// begin for i in hackTanksCaptured [ index ] do
36214: LD_ADDR_VAR 0 3
36218: PUSH
36219: LD_EXP 109
36223: PUSH
36224: LD_VAR 0 4
36228: ARRAY
36229: PUSH
36230: FOR_IN
36231: IFFALSE 36257
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
36233: LD_VAR 0 3
36237: PUSH
36238: LD_INT 1
36240: ARRAY
36241: PPUSH
36242: LD_VAR 0 3
36246: PUSH
36247: LD_INT 2
36249: ARRAY
36250: PPUSH
36251: CALL_OW 235
36255: GO 36230
36257: POP
36258: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
36259: LD_ADDR_EXP 109
36263: PUSH
36264: LD_EXP 109
36268: PPUSH
36269: LD_VAR 0 4
36273: PPUSH
36274: EMPTY
36275: PPUSH
36276: CALL_OW 1
36280: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
36281: LD_VAR 0 1
36285: PPUSH
36286: LD_INT 0
36288: PPUSH
36289: CALL_OW 505
// end ; end ;
36293: LD_VAR 0 2
36297: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
36298: LD_INT 0
36300: PPUSH
36301: PPUSH
36302: PPUSH
// if not hack in hackTanks or not vehicles then
36303: LD_VAR 0 1
36307: PUSH
36308: LD_EXP 108
36312: IN
36313: NOT
36314: PUSH
36315: LD_VAR 0 2
36319: NOT
36320: OR
36321: IFFALSE 36325
// exit ;
36323: GO 36600
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
36325: LD_ADDR_VAR 0 2
36329: PUSH
36330: LD_VAR 0 1
36334: PPUSH
36335: LD_VAR 0 2
36339: PPUSH
36340: LD_INT 1
36342: PPUSH
36343: LD_INT 1
36345: PPUSH
36346: CALL 44560 0 4
36350: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
36351: LD_ADDR_VAR 0 5
36355: PUSH
36356: LD_EXP 108
36360: PPUSH
36361: LD_VAR 0 1
36365: PPUSH
36366: CALL 43910 0 2
36370: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
36371: LD_EXP 109
36375: PUSH
36376: LD_VAR 0 5
36380: ARRAY
36381: PUSH
36382: LD_EXP 110
36386: LESS
36387: IFFALSE 36576
// begin for i := 1 to vehicles do
36389: LD_ADDR_VAR 0 4
36393: PUSH
36394: DOUBLE
36395: LD_INT 1
36397: DEC
36398: ST_TO_ADDR
36399: LD_VAR 0 2
36403: PUSH
36404: FOR_TO
36405: IFFALSE 36574
// begin if hackTanksCaptured [ index ] = hackLimit then
36407: LD_EXP 109
36411: PUSH
36412: LD_VAR 0 5
36416: ARRAY
36417: PUSH
36418: LD_EXP 110
36422: EQUAL
36423: IFFALSE 36427
// break ;
36425: GO 36574
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
36427: LD_ADDR_EXP 112
36431: PUSH
36432: LD_EXP 112
36436: PPUSH
36437: LD_VAR 0 5
36441: PPUSH
36442: LD_EXP 112
36446: PUSH
36447: LD_VAR 0 5
36451: ARRAY
36452: PUSH
36453: LD_INT 1
36455: PLUS
36456: PPUSH
36457: CALL_OW 1
36461: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
36462: LD_ADDR_EXP 109
36466: PUSH
36467: LD_EXP 109
36471: PPUSH
36472: LD_VAR 0 5
36476: PUSH
36477: LD_EXP 109
36481: PUSH
36482: LD_VAR 0 5
36486: ARRAY
36487: PUSH
36488: LD_INT 1
36490: PLUS
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PPUSH
36496: LD_VAR 0 2
36500: PUSH
36501: LD_VAR 0 4
36505: ARRAY
36506: PUSH
36507: LD_VAR 0 2
36511: PUSH
36512: LD_VAR 0 4
36516: ARRAY
36517: PPUSH
36518: CALL_OW 255
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PPUSH
36527: CALL 44125 0 3
36531: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
36532: LD_VAR 0 2
36536: PUSH
36537: LD_VAR 0 4
36541: ARRAY
36542: PPUSH
36543: LD_VAR 0 1
36547: PPUSH
36548: CALL_OW 255
36552: PPUSH
36553: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
36557: LD_VAR 0 2
36561: PUSH
36562: LD_VAR 0 4
36566: ARRAY
36567: PPUSH
36568: CALL_OW 141
// end ;
36572: GO 36404
36574: POP
36575: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36576: LD_VAR 0 1
36580: PPUSH
36581: LD_EXP 109
36585: PUSH
36586: LD_VAR 0 5
36590: ARRAY
36591: PUSH
36592: LD_INT 0
36594: PLUS
36595: PPUSH
36596: CALL_OW 505
// end ;
36600: LD_VAR 0 3
36604: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
36605: LD_INT 0
36607: PPUSH
36608: PPUSH
36609: PPUSH
36610: PPUSH
// if not hack in hackTanks then
36611: LD_VAR 0 1
36615: PUSH
36616: LD_EXP 108
36620: IN
36621: NOT
36622: IFFALSE 36626
// exit ;
36624: GO 36866
// index := GetElementIndex ( hackTanks , hack ) ;
36626: LD_ADDR_VAR 0 4
36630: PUSH
36631: LD_EXP 108
36635: PPUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL 43910 0 2
36645: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
36646: LD_ADDR_VAR 0 3
36650: PUSH
36651: DOUBLE
36652: LD_EXP 109
36656: PUSH
36657: LD_VAR 0 4
36661: ARRAY
36662: INC
36663: ST_TO_ADDR
36664: LD_INT 1
36666: PUSH
36667: FOR_DOWNTO
36668: IFFALSE 36840
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
36670: LD_ADDR_VAR 0 5
36674: PUSH
36675: LD_EXP 109
36679: PUSH
36680: LD_VAR 0 4
36684: ARRAY
36685: PUSH
36686: LD_VAR 0 3
36690: ARRAY
36691: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
36692: LD_VAR 0 5
36696: PUSH
36697: LD_INT 1
36699: ARRAY
36700: PPUSH
36701: CALL_OW 302
36705: NOT
36706: PUSH
36707: LD_VAR 0 5
36711: PUSH
36712: LD_INT 1
36714: ARRAY
36715: PPUSH
36716: CALL_OW 255
36720: PUSH
36721: LD_VAR 0 1
36725: PPUSH
36726: CALL_OW 255
36730: NONEQUAL
36731: OR
36732: IFFALSE 36838
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
36734: LD_VAR 0 5
36738: PUSH
36739: LD_INT 1
36741: ARRAY
36742: PPUSH
36743: CALL_OW 305
36747: PUSH
36748: LD_VAR 0 5
36752: PUSH
36753: LD_INT 1
36755: ARRAY
36756: PPUSH
36757: CALL_OW 255
36761: PUSH
36762: LD_VAR 0 1
36766: PPUSH
36767: CALL_OW 255
36771: EQUAL
36772: AND
36773: IFFALSE 36797
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
36775: LD_VAR 0 5
36779: PUSH
36780: LD_INT 1
36782: ARRAY
36783: PPUSH
36784: LD_VAR 0 5
36788: PUSH
36789: LD_INT 2
36791: ARRAY
36792: PPUSH
36793: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
36797: LD_ADDR_EXP 109
36801: PUSH
36802: LD_EXP 109
36806: PPUSH
36807: LD_VAR 0 4
36811: PPUSH
36812: LD_EXP 109
36816: PUSH
36817: LD_VAR 0 4
36821: ARRAY
36822: PPUSH
36823: LD_VAR 0 3
36827: PPUSH
36828: CALL_OW 3
36832: PPUSH
36833: CALL_OW 1
36837: ST_TO_ADDR
// end ; end ;
36838: GO 36667
36840: POP
36841: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
36842: LD_VAR 0 1
36846: PPUSH
36847: LD_EXP 109
36851: PUSH
36852: LD_VAR 0 4
36856: ARRAY
36857: PUSH
36858: LD_INT 0
36860: PLUS
36861: PPUSH
36862: CALL_OW 505
// end ;
36866: LD_VAR 0 2
36870: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
36871: LD_INT 0
36873: PPUSH
36874: PPUSH
36875: PPUSH
36876: PPUSH
// if not hack in hackTanks then
36877: LD_VAR 0 1
36881: PUSH
36882: LD_EXP 108
36886: IN
36887: NOT
36888: IFFALSE 36892
// exit ;
36890: GO 36977
// index := GetElementIndex ( hackTanks , hack ) ;
36892: LD_ADDR_VAR 0 5
36896: PUSH
36897: LD_EXP 108
36901: PPUSH
36902: LD_VAR 0 1
36906: PPUSH
36907: CALL 43910 0 2
36911: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
36912: LD_ADDR_VAR 0 4
36916: PUSH
36917: DOUBLE
36918: LD_INT 1
36920: DEC
36921: ST_TO_ADDR
36922: LD_EXP 109
36926: PUSH
36927: LD_VAR 0 5
36931: ARRAY
36932: PUSH
36933: FOR_TO
36934: IFFALSE 36975
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
36936: LD_EXP 109
36940: PUSH
36941: LD_VAR 0 5
36945: ARRAY
36946: PUSH
36947: LD_VAR 0 4
36951: ARRAY
36952: PUSH
36953: LD_INT 1
36955: ARRAY
36956: PUSH
36957: LD_VAR 0 2
36961: EQUAL
36962: IFFALSE 36973
// KillUnit ( vehicle ) ;
36964: LD_VAR 0 2
36968: PPUSH
36969: CALL_OW 66
36973: GO 36933
36975: POP
36976: POP
// end ;
36977: LD_VAR 0 3
36981: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
36982: LD_EXP 113
36986: NOT
36987: IFFALSE 37022
36989: GO 36991
36991: DISABLE
// begin initMiner := true ;
36992: LD_ADDR_EXP 113
36996: PUSH
36997: LD_INT 1
36999: ST_TO_ADDR
// minersList := [ ] ;
37000: LD_ADDR_EXP 114
37004: PUSH
37005: EMPTY
37006: ST_TO_ADDR
// minerMinesList := [ ] ;
37007: LD_ADDR_EXP 115
37011: PUSH
37012: EMPTY
37013: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
37014: LD_ADDR_EXP 116
37018: PUSH
37019: LD_INT 5
37021: ST_TO_ADDR
// end ;
37022: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
37023: LD_EXP 113
37027: PUSH
37028: LD_INT 34
37030: PUSH
37031: LD_INT 81
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PPUSH
37038: CALL_OW 69
37042: AND
37043: IFFALSE 37504
37045: GO 37047
37047: DISABLE
37048: LD_INT 0
37050: PPUSH
37051: PPUSH
37052: PPUSH
37053: PPUSH
// begin enable ;
37054: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
37055: LD_ADDR_VAR 0 1
37059: PUSH
37060: LD_INT 34
37062: PUSH
37063: LD_INT 81
37065: PUSH
37066: EMPTY
37067: LIST
37068: LIST
37069: PPUSH
37070: CALL_OW 69
37074: PUSH
37075: FOR_IN
37076: IFFALSE 37148
// begin if not i in minersList then
37078: LD_VAR 0 1
37082: PUSH
37083: LD_EXP 114
37087: IN
37088: NOT
37089: IFFALSE 37146
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
37091: LD_ADDR_EXP 114
37095: PUSH
37096: LD_EXP 114
37100: PPUSH
37101: LD_EXP 114
37105: PUSH
37106: LD_INT 1
37108: PLUS
37109: PPUSH
37110: LD_VAR 0 1
37114: PPUSH
37115: CALL_OW 1
37119: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
37120: LD_ADDR_EXP 115
37124: PUSH
37125: LD_EXP 115
37129: PPUSH
37130: LD_EXP 115
37134: PUSH
37135: LD_INT 1
37137: PLUS
37138: PPUSH
37139: EMPTY
37140: PPUSH
37141: CALL_OW 1
37145: ST_TO_ADDR
// end end ;
37146: GO 37075
37148: POP
37149: POP
// for i := minerMinesList downto 1 do
37150: LD_ADDR_VAR 0 1
37154: PUSH
37155: DOUBLE
37156: LD_EXP 115
37160: INC
37161: ST_TO_ADDR
37162: LD_INT 1
37164: PUSH
37165: FOR_DOWNTO
37166: IFFALSE 37502
// begin if IsLive ( minersList [ i ] ) then
37168: LD_EXP 114
37172: PUSH
37173: LD_VAR 0 1
37177: ARRAY
37178: PPUSH
37179: CALL_OW 300
37183: IFFALSE 37211
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
37185: LD_EXP 114
37189: PUSH
37190: LD_VAR 0 1
37194: ARRAY
37195: PPUSH
37196: LD_EXP 115
37200: PUSH
37201: LD_VAR 0 1
37205: ARRAY
37206: PPUSH
37207: CALL_OW 505
// if not minerMinesList [ i ] then
37211: LD_EXP 115
37215: PUSH
37216: LD_VAR 0 1
37220: ARRAY
37221: NOT
37222: IFFALSE 37226
// continue ;
37224: GO 37165
// for j := minerMinesList [ i ] downto 1 do
37226: LD_ADDR_VAR 0 2
37230: PUSH
37231: DOUBLE
37232: LD_EXP 115
37236: PUSH
37237: LD_VAR 0 1
37241: ARRAY
37242: INC
37243: ST_TO_ADDR
37244: LD_INT 1
37246: PUSH
37247: FOR_DOWNTO
37248: IFFALSE 37498
// begin side := GetSide ( minersList [ i ] ) ;
37250: LD_ADDR_VAR 0 3
37254: PUSH
37255: LD_EXP 114
37259: PUSH
37260: LD_VAR 0 1
37264: ARRAY
37265: PPUSH
37266: CALL_OW 255
37270: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
37271: LD_ADDR_VAR 0 4
37275: PUSH
37276: LD_EXP 115
37280: PUSH
37281: LD_VAR 0 1
37285: ARRAY
37286: PUSH
37287: LD_VAR 0 2
37291: ARRAY
37292: PUSH
37293: LD_INT 1
37295: ARRAY
37296: PPUSH
37297: LD_EXP 115
37301: PUSH
37302: LD_VAR 0 1
37306: ARRAY
37307: PUSH
37308: LD_VAR 0 2
37312: ARRAY
37313: PUSH
37314: LD_INT 2
37316: ARRAY
37317: PPUSH
37318: CALL_OW 428
37322: ST_TO_ADDR
// if not tmp then
37323: LD_VAR 0 4
37327: NOT
37328: IFFALSE 37332
// continue ;
37330: GO 37247
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
37332: LD_VAR 0 4
37336: PUSH
37337: LD_INT 81
37339: PUSH
37340: LD_VAR 0 3
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PPUSH
37349: CALL_OW 69
37353: IN
37354: PUSH
37355: LD_EXP 115
37359: PUSH
37360: LD_VAR 0 1
37364: ARRAY
37365: PUSH
37366: LD_VAR 0 2
37370: ARRAY
37371: PUSH
37372: LD_INT 1
37374: ARRAY
37375: PPUSH
37376: LD_EXP 115
37380: PUSH
37381: LD_VAR 0 1
37385: ARRAY
37386: PUSH
37387: LD_VAR 0 2
37391: ARRAY
37392: PUSH
37393: LD_INT 2
37395: ARRAY
37396: PPUSH
37397: CALL_OW 458
37401: AND
37402: IFFALSE 37496
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
37404: LD_EXP 115
37408: PUSH
37409: LD_VAR 0 1
37413: ARRAY
37414: PUSH
37415: LD_VAR 0 2
37419: ARRAY
37420: PUSH
37421: LD_INT 1
37423: ARRAY
37424: PPUSH
37425: LD_EXP 115
37429: PUSH
37430: LD_VAR 0 1
37434: ARRAY
37435: PUSH
37436: LD_VAR 0 2
37440: ARRAY
37441: PUSH
37442: LD_INT 2
37444: ARRAY
37445: PPUSH
37446: LD_VAR 0 3
37450: PPUSH
37451: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
37455: LD_ADDR_EXP 115
37459: PUSH
37460: LD_EXP 115
37464: PPUSH
37465: LD_VAR 0 1
37469: PPUSH
37470: LD_EXP 115
37474: PUSH
37475: LD_VAR 0 1
37479: ARRAY
37480: PPUSH
37481: LD_VAR 0 2
37485: PPUSH
37486: CALL_OW 3
37490: PPUSH
37491: CALL_OW 1
37495: ST_TO_ADDR
// end ; end ;
37496: GO 37247
37498: POP
37499: POP
// end ;
37500: GO 37165
37502: POP
37503: POP
// end ;
37504: PPOPN 4
37506: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
37507: LD_INT 0
37509: PPUSH
37510: PPUSH
// result := false ;
37511: LD_ADDR_VAR 0 4
37515: PUSH
37516: LD_INT 0
37518: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
37519: LD_VAR 0 1
37523: PPUSH
37524: CALL_OW 264
37528: PUSH
37529: LD_INT 81
37531: EQUAL
37532: NOT
37533: IFFALSE 37537
// exit ;
37535: GO 37777
// index := GetElementIndex ( minersList , unit ) ;
37537: LD_ADDR_VAR 0 5
37541: PUSH
37542: LD_EXP 114
37546: PPUSH
37547: LD_VAR 0 1
37551: PPUSH
37552: CALL 43910 0 2
37556: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
37557: LD_EXP 115
37561: PUSH
37562: LD_VAR 0 5
37566: ARRAY
37567: PUSH
37568: LD_EXP 116
37572: GREATEREQUAL
37573: IFFALSE 37577
// exit ;
37575: GO 37777
// ComMoveXY ( unit , x , y ) ;
37577: LD_VAR 0 1
37581: PPUSH
37582: LD_VAR 0 2
37586: PPUSH
37587: LD_VAR 0 3
37591: PPUSH
37592: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
37596: LD_INT 35
37598: PPUSH
37599: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
37603: LD_VAR 0 1
37607: PPUSH
37608: LD_VAR 0 2
37612: PPUSH
37613: LD_VAR 0 3
37617: PPUSH
37618: CALL 75265 0 3
37622: NOT
37623: PUSH
37624: LD_VAR 0 1
37628: PPUSH
37629: CALL_OW 314
37633: AND
37634: IFFALSE 37638
// exit ;
37636: GO 37777
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
37638: LD_VAR 0 2
37642: PPUSH
37643: LD_VAR 0 3
37647: PPUSH
37648: CALL_OW 428
37652: PUSH
37653: LD_VAR 0 1
37657: EQUAL
37658: PUSH
37659: LD_VAR 0 1
37663: PPUSH
37664: CALL_OW 314
37668: NOT
37669: AND
37670: IFFALSE 37596
// PlaySoundXY ( x , y , PlantMine ) ;
37672: LD_VAR 0 2
37676: PPUSH
37677: LD_VAR 0 3
37681: PPUSH
37682: LD_STRING PlantMine
37684: PPUSH
37685: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
37689: LD_VAR 0 2
37693: PPUSH
37694: LD_VAR 0 3
37698: PPUSH
37699: LD_VAR 0 1
37703: PPUSH
37704: CALL_OW 255
37708: PPUSH
37709: LD_INT 0
37711: PPUSH
37712: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
37716: LD_ADDR_EXP 115
37720: PUSH
37721: LD_EXP 115
37725: PPUSH
37726: LD_VAR 0 5
37730: PUSH
37731: LD_EXP 115
37735: PUSH
37736: LD_VAR 0 5
37740: ARRAY
37741: PUSH
37742: LD_INT 1
37744: PLUS
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PPUSH
37750: LD_VAR 0 2
37754: PUSH
37755: LD_VAR 0 3
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PPUSH
37764: CALL 44125 0 3
37768: ST_TO_ADDR
// result := true ;
37769: LD_ADDR_VAR 0 4
37773: PUSH
37774: LD_INT 1
37776: ST_TO_ADDR
// end ;
37777: LD_VAR 0 4
37781: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
37782: LD_INT 0
37784: PPUSH
37785: PPUSH
37786: PPUSH
// if not unit in minersList then
37787: LD_VAR 0 1
37791: PUSH
37792: LD_EXP 114
37796: IN
37797: NOT
37798: IFFALSE 37802
// exit ;
37800: GO 38194
// index := GetElementIndex ( minersList , unit ) ;
37802: LD_ADDR_VAR 0 6
37806: PUSH
37807: LD_EXP 114
37811: PPUSH
37812: LD_VAR 0 1
37816: PPUSH
37817: CALL 43910 0 2
37821: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
37822: LD_ADDR_VAR 0 5
37826: PUSH
37827: DOUBLE
37828: LD_EXP 115
37832: PUSH
37833: LD_VAR 0 6
37837: ARRAY
37838: INC
37839: ST_TO_ADDR
37840: LD_INT 1
37842: PUSH
37843: FOR_DOWNTO
37844: IFFALSE 38005
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
37846: LD_EXP 115
37850: PUSH
37851: LD_VAR 0 6
37855: ARRAY
37856: PUSH
37857: LD_VAR 0 5
37861: ARRAY
37862: PUSH
37863: LD_INT 1
37865: ARRAY
37866: PUSH
37867: LD_VAR 0 2
37871: EQUAL
37872: PUSH
37873: LD_EXP 115
37877: PUSH
37878: LD_VAR 0 6
37882: ARRAY
37883: PUSH
37884: LD_VAR 0 5
37888: ARRAY
37889: PUSH
37890: LD_INT 2
37892: ARRAY
37893: PUSH
37894: LD_VAR 0 3
37898: EQUAL
37899: AND
37900: IFFALSE 38003
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
37902: LD_EXP 115
37906: PUSH
37907: LD_VAR 0 6
37911: ARRAY
37912: PUSH
37913: LD_VAR 0 5
37917: ARRAY
37918: PUSH
37919: LD_INT 1
37921: ARRAY
37922: PPUSH
37923: LD_EXP 115
37927: PUSH
37928: LD_VAR 0 6
37932: ARRAY
37933: PUSH
37934: LD_VAR 0 5
37938: ARRAY
37939: PUSH
37940: LD_INT 2
37942: ARRAY
37943: PPUSH
37944: LD_VAR 0 1
37948: PPUSH
37949: CALL_OW 255
37953: PPUSH
37954: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
37958: LD_ADDR_EXP 115
37962: PUSH
37963: LD_EXP 115
37967: PPUSH
37968: LD_VAR 0 6
37972: PPUSH
37973: LD_EXP 115
37977: PUSH
37978: LD_VAR 0 6
37982: ARRAY
37983: PPUSH
37984: LD_VAR 0 5
37988: PPUSH
37989: CALL_OW 3
37993: PPUSH
37994: CALL_OW 1
37998: ST_TO_ADDR
// exit ;
37999: POP
38000: POP
38001: GO 38194
// end ; end ;
38003: GO 37843
38005: POP
38006: POP
// for i := minerMinesList [ index ] downto 1 do
38007: LD_ADDR_VAR 0 5
38011: PUSH
38012: DOUBLE
38013: LD_EXP 115
38017: PUSH
38018: LD_VAR 0 6
38022: ARRAY
38023: INC
38024: ST_TO_ADDR
38025: LD_INT 1
38027: PUSH
38028: FOR_DOWNTO
38029: IFFALSE 38192
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
38031: LD_EXP 115
38035: PUSH
38036: LD_VAR 0 6
38040: ARRAY
38041: PUSH
38042: LD_VAR 0 5
38046: ARRAY
38047: PUSH
38048: LD_INT 1
38050: ARRAY
38051: PPUSH
38052: LD_EXP 115
38056: PUSH
38057: LD_VAR 0 6
38061: ARRAY
38062: PUSH
38063: LD_VAR 0 5
38067: ARRAY
38068: PUSH
38069: LD_INT 2
38071: ARRAY
38072: PPUSH
38073: LD_VAR 0 2
38077: PPUSH
38078: LD_VAR 0 3
38082: PPUSH
38083: CALL_OW 298
38087: PUSH
38088: LD_INT 6
38090: LESS
38091: IFFALSE 38190
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
38093: LD_EXP 115
38097: PUSH
38098: LD_VAR 0 6
38102: ARRAY
38103: PUSH
38104: LD_VAR 0 5
38108: ARRAY
38109: PUSH
38110: LD_INT 1
38112: ARRAY
38113: PPUSH
38114: LD_EXP 115
38118: PUSH
38119: LD_VAR 0 6
38123: ARRAY
38124: PUSH
38125: LD_VAR 0 5
38129: ARRAY
38130: PUSH
38131: LD_INT 2
38133: ARRAY
38134: PPUSH
38135: LD_VAR 0 1
38139: PPUSH
38140: CALL_OW 255
38144: PPUSH
38145: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
38149: LD_ADDR_EXP 115
38153: PUSH
38154: LD_EXP 115
38158: PPUSH
38159: LD_VAR 0 6
38163: PPUSH
38164: LD_EXP 115
38168: PUSH
38169: LD_VAR 0 6
38173: ARRAY
38174: PPUSH
38175: LD_VAR 0 5
38179: PPUSH
38180: CALL_OW 3
38184: PPUSH
38185: CALL_OW 1
38189: ST_TO_ADDR
// end ; end ;
38190: GO 38028
38192: POP
38193: POP
// end ;
38194: LD_VAR 0 4
38198: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
38199: LD_INT 0
38201: PPUSH
38202: PPUSH
38203: PPUSH
38204: PPUSH
38205: PPUSH
38206: PPUSH
38207: PPUSH
38208: PPUSH
38209: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
38210: LD_VAR 0 1
38214: PPUSH
38215: CALL_OW 264
38219: PUSH
38220: LD_INT 81
38222: EQUAL
38223: NOT
38224: PUSH
38225: LD_VAR 0 1
38229: PUSH
38230: LD_EXP 114
38234: IN
38235: NOT
38236: OR
38237: IFFALSE 38241
// exit ;
38239: GO 38563
// index := GetElementIndex ( minersList , unit ) ;
38241: LD_ADDR_VAR 0 6
38245: PUSH
38246: LD_EXP 114
38250: PPUSH
38251: LD_VAR 0 1
38255: PPUSH
38256: CALL 43910 0 2
38260: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
38261: LD_ADDR_VAR 0 8
38265: PUSH
38266: LD_EXP 116
38270: PUSH
38271: LD_EXP 115
38275: PUSH
38276: LD_VAR 0 6
38280: ARRAY
38281: MINUS
38282: ST_TO_ADDR
// if not minesFreeAmount then
38283: LD_VAR 0 8
38287: NOT
38288: IFFALSE 38292
// exit ;
38290: GO 38563
// tmp := [ ] ;
38292: LD_ADDR_VAR 0 7
38296: PUSH
38297: EMPTY
38298: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
38299: LD_ADDR_VAR 0 5
38303: PUSH
38304: DOUBLE
38305: LD_INT 1
38307: DEC
38308: ST_TO_ADDR
38309: LD_VAR 0 8
38313: PUSH
38314: FOR_TO
38315: IFFALSE 38510
// begin _d := rand ( 0 , 5 ) ;
38317: LD_ADDR_VAR 0 11
38321: PUSH
38322: LD_INT 0
38324: PPUSH
38325: LD_INT 5
38327: PPUSH
38328: CALL_OW 12
38332: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
38333: LD_ADDR_VAR 0 12
38337: PUSH
38338: LD_INT 2
38340: PPUSH
38341: LD_INT 6
38343: PPUSH
38344: CALL_OW 12
38348: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
38349: LD_ADDR_VAR 0 9
38353: PUSH
38354: LD_VAR 0 2
38358: PPUSH
38359: LD_VAR 0 11
38363: PPUSH
38364: LD_VAR 0 12
38368: PPUSH
38369: CALL_OW 272
38373: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
38374: LD_ADDR_VAR 0 10
38378: PUSH
38379: LD_VAR 0 3
38383: PPUSH
38384: LD_VAR 0 11
38388: PPUSH
38389: LD_VAR 0 12
38393: PPUSH
38394: CALL_OW 273
38398: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
38399: LD_VAR 0 9
38403: PPUSH
38404: LD_VAR 0 10
38408: PPUSH
38409: CALL_OW 488
38413: PUSH
38414: LD_VAR 0 9
38418: PUSH
38419: LD_VAR 0 10
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_VAR 0 7
38432: IN
38433: NOT
38434: AND
38435: PUSH
38436: LD_VAR 0 9
38440: PPUSH
38441: LD_VAR 0 10
38445: PPUSH
38446: CALL_OW 458
38450: NOT
38451: AND
38452: IFFALSE 38494
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
38454: LD_ADDR_VAR 0 7
38458: PUSH
38459: LD_VAR 0 7
38463: PPUSH
38464: LD_VAR 0 7
38468: PUSH
38469: LD_INT 1
38471: PLUS
38472: PPUSH
38473: LD_VAR 0 9
38477: PUSH
38478: LD_VAR 0 10
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PPUSH
38487: CALL_OW 1
38491: ST_TO_ADDR
38492: GO 38508
// i := i - 1 ;
38494: LD_ADDR_VAR 0 5
38498: PUSH
38499: LD_VAR 0 5
38503: PUSH
38504: LD_INT 1
38506: MINUS
38507: ST_TO_ADDR
// end ;
38508: GO 38314
38510: POP
38511: POP
// for i in tmp do
38512: LD_ADDR_VAR 0 5
38516: PUSH
38517: LD_VAR 0 7
38521: PUSH
38522: FOR_IN
38523: IFFALSE 38561
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
38525: LD_VAR 0 1
38529: PPUSH
38530: LD_VAR 0 5
38534: PUSH
38535: LD_INT 1
38537: ARRAY
38538: PPUSH
38539: LD_VAR 0 5
38543: PUSH
38544: LD_INT 2
38546: ARRAY
38547: PPUSH
38548: CALL 37507 0 3
38552: NOT
38553: IFFALSE 38559
// exit ;
38555: POP
38556: POP
38557: GO 38563
38559: GO 38522
38561: POP
38562: POP
// end ;
38563: LD_VAR 0 4
38567: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
38568: LD_INT 0
38570: PPUSH
38571: PPUSH
38572: PPUSH
38573: PPUSH
38574: PPUSH
38575: PPUSH
38576: PPUSH
// if not GetClass ( unit ) = class_sniper then
38577: LD_VAR 0 1
38581: PPUSH
38582: CALL_OW 257
38586: PUSH
38587: LD_INT 5
38589: EQUAL
38590: NOT
38591: IFFALSE 38595
// exit ;
38593: GO 38983
// dist := 8 ;
38595: LD_ADDR_VAR 0 5
38599: PUSH
38600: LD_INT 8
38602: ST_TO_ADDR
// viewRange := 12 ;
38603: LD_ADDR_VAR 0 7
38607: PUSH
38608: LD_INT 12
38610: ST_TO_ADDR
// side := GetSide ( unit ) ;
38611: LD_ADDR_VAR 0 6
38615: PUSH
38616: LD_VAR 0 1
38620: PPUSH
38621: CALL_OW 255
38625: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
38626: LD_INT 61
38628: PPUSH
38629: LD_VAR 0 6
38633: PPUSH
38634: CALL_OW 321
38638: PUSH
38639: LD_INT 2
38641: EQUAL
38642: IFFALSE 38652
// viewRange := 16 ;
38644: LD_ADDR_VAR 0 7
38648: PUSH
38649: LD_INT 16
38651: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
38652: LD_VAR 0 1
38656: PPUSH
38657: LD_VAR 0 2
38661: PPUSH
38662: LD_VAR 0 3
38666: PPUSH
38667: CALL_OW 297
38671: PUSH
38672: LD_VAR 0 5
38676: GREATER
38677: IFFALSE 38756
// begin ComMoveXY ( unit , x , y ) ;
38679: LD_VAR 0 1
38683: PPUSH
38684: LD_VAR 0 2
38688: PPUSH
38689: LD_VAR 0 3
38693: PPUSH
38694: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
38698: LD_INT 35
38700: PPUSH
38701: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
38705: LD_VAR 0 1
38709: PPUSH
38710: LD_VAR 0 2
38714: PPUSH
38715: LD_VAR 0 3
38719: PPUSH
38720: CALL 75265 0 3
38724: NOT
38725: IFFALSE 38729
// exit ;
38727: GO 38983
// until GetDistUnitXY ( unit , x , y ) < dist ;
38729: LD_VAR 0 1
38733: PPUSH
38734: LD_VAR 0 2
38738: PPUSH
38739: LD_VAR 0 3
38743: PPUSH
38744: CALL_OW 297
38748: PUSH
38749: LD_VAR 0 5
38753: LESS
38754: IFFALSE 38698
// end ; ComTurnXY ( unit , x , y ) ;
38756: LD_VAR 0 1
38760: PPUSH
38761: LD_VAR 0 2
38765: PPUSH
38766: LD_VAR 0 3
38770: PPUSH
38771: CALL_OW 118
// wait ( 5 ) ;
38775: LD_INT 5
38777: PPUSH
38778: CALL_OW 67
// _d := GetDir ( unit ) ;
38782: LD_ADDR_VAR 0 10
38786: PUSH
38787: LD_VAR 0 1
38791: PPUSH
38792: CALL_OW 254
38796: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
38797: LD_ADDR_VAR 0 8
38801: PUSH
38802: LD_VAR 0 1
38806: PPUSH
38807: CALL_OW 250
38811: PPUSH
38812: LD_VAR 0 10
38816: PPUSH
38817: LD_VAR 0 5
38821: PPUSH
38822: CALL_OW 272
38826: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
38827: LD_ADDR_VAR 0 9
38831: PUSH
38832: LD_VAR 0 1
38836: PPUSH
38837: CALL_OW 251
38841: PPUSH
38842: LD_VAR 0 10
38846: PPUSH
38847: LD_VAR 0 5
38851: PPUSH
38852: CALL_OW 273
38856: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
38857: LD_VAR 0 8
38861: PPUSH
38862: LD_VAR 0 9
38866: PPUSH
38867: CALL_OW 488
38871: NOT
38872: IFFALSE 38876
// exit ;
38874: GO 38983
// ComAnimCustom ( unit , 1 ) ;
38876: LD_VAR 0 1
38880: PPUSH
38881: LD_INT 1
38883: PPUSH
38884: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
38888: LD_VAR 0 8
38892: PPUSH
38893: LD_VAR 0 9
38897: PPUSH
38898: LD_VAR 0 6
38902: PPUSH
38903: LD_VAR 0 7
38907: PPUSH
38908: CALL_OW 330
// repeat wait ( 1 ) ;
38912: LD_INT 1
38914: PPUSH
38915: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
38919: LD_VAR 0 1
38923: PPUSH
38924: CALL_OW 316
38928: PUSH
38929: LD_VAR 0 1
38933: PPUSH
38934: CALL_OW 314
38938: OR
38939: PUSH
38940: LD_VAR 0 1
38944: PPUSH
38945: CALL_OW 302
38949: NOT
38950: OR
38951: PUSH
38952: LD_VAR 0 1
38956: PPUSH
38957: CALL_OW 301
38961: OR
38962: IFFALSE 38912
// RemoveSeeing ( _x , _y , side ) ;
38964: LD_VAR 0 8
38968: PPUSH
38969: LD_VAR 0 9
38973: PPUSH
38974: LD_VAR 0 6
38978: PPUSH
38979: CALL_OW 331
// end ; end_of_file
38983: LD_VAR 0 4
38987: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
38988: LD_INT 0
38990: PPUSH
38991: PPUSH
// if exist_mode then
38992: LD_VAR 0 2
38996: IFFALSE 39021
// unit := CreateCharacter ( prefix & ident ) else
38998: LD_ADDR_VAR 0 5
39002: PUSH
39003: LD_VAR 0 3
39007: PUSH
39008: LD_VAR 0 1
39012: STR
39013: PPUSH
39014: CALL_OW 34
39018: ST_TO_ADDR
39019: GO 39036
// unit := NewCharacter ( ident ) ;
39021: LD_ADDR_VAR 0 5
39025: PUSH
39026: LD_VAR 0 1
39030: PPUSH
39031: CALL_OW 25
39035: ST_TO_ADDR
// result := unit ;
39036: LD_ADDR_VAR 0 4
39040: PUSH
39041: LD_VAR 0 5
39045: ST_TO_ADDR
// end ;
39046: LD_VAR 0 4
39050: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
39051: LD_INT 0
39053: PPUSH
39054: PPUSH
// if not side or not nation then
39055: LD_VAR 0 1
39059: NOT
39060: PUSH
39061: LD_VAR 0 2
39065: NOT
39066: OR
39067: IFFALSE 39071
// exit ;
39069: GO 39839
// case nation of nation_american :
39071: LD_VAR 0 2
39075: PUSH
39076: LD_INT 1
39078: DOUBLE
39079: EQUAL
39080: IFTRUE 39084
39082: GO 39298
39084: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
39085: LD_ADDR_VAR 0 4
39089: PUSH
39090: LD_INT 35
39092: PUSH
39093: LD_INT 45
39095: PUSH
39096: LD_INT 46
39098: PUSH
39099: LD_INT 47
39101: PUSH
39102: LD_INT 82
39104: PUSH
39105: LD_INT 83
39107: PUSH
39108: LD_INT 84
39110: PUSH
39111: LD_INT 85
39113: PUSH
39114: LD_INT 86
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: LD_INT 2
39122: PUSH
39123: LD_INT 6
39125: PUSH
39126: LD_INT 15
39128: PUSH
39129: LD_INT 16
39131: PUSH
39132: LD_INT 7
39134: PUSH
39135: LD_INT 12
39137: PUSH
39138: LD_INT 13
39140: PUSH
39141: LD_INT 10
39143: PUSH
39144: LD_INT 14
39146: PUSH
39147: LD_INT 20
39149: PUSH
39150: LD_INT 21
39152: PUSH
39153: LD_INT 22
39155: PUSH
39156: LD_INT 25
39158: PUSH
39159: LD_INT 32
39161: PUSH
39162: LD_INT 27
39164: PUSH
39165: LD_INT 36
39167: PUSH
39168: LD_INT 69
39170: PUSH
39171: LD_INT 39
39173: PUSH
39174: LD_INT 34
39176: PUSH
39177: LD_INT 40
39179: PUSH
39180: LD_INT 48
39182: PUSH
39183: LD_INT 49
39185: PUSH
39186: LD_INT 50
39188: PUSH
39189: LD_INT 51
39191: PUSH
39192: LD_INT 52
39194: PUSH
39195: LD_INT 53
39197: PUSH
39198: LD_INT 54
39200: PUSH
39201: LD_INT 55
39203: PUSH
39204: LD_INT 56
39206: PUSH
39207: LD_INT 57
39209: PUSH
39210: LD_INT 58
39212: PUSH
39213: LD_INT 59
39215: PUSH
39216: LD_INT 60
39218: PUSH
39219: LD_INT 61
39221: PUSH
39222: LD_INT 62
39224: PUSH
39225: LD_INT 80
39227: PUSH
39228: LD_INT 82
39230: PUSH
39231: LD_INT 83
39233: PUSH
39234: LD_INT 84
39236: PUSH
39237: LD_INT 85
39239: PUSH
39240: LD_INT 86
39242: PUSH
39243: EMPTY
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: ST_TO_ADDR
39296: GO 39763
39298: LD_INT 2
39300: DOUBLE
39301: EQUAL
39302: IFTRUE 39306
39304: GO 39532
39306: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
39307: LD_ADDR_VAR 0 4
39311: PUSH
39312: LD_INT 35
39314: PUSH
39315: LD_INT 45
39317: PUSH
39318: LD_INT 46
39320: PUSH
39321: LD_INT 47
39323: PUSH
39324: LD_INT 82
39326: PUSH
39327: LD_INT 83
39329: PUSH
39330: LD_INT 84
39332: PUSH
39333: LD_INT 85
39335: PUSH
39336: LD_INT 87
39338: PUSH
39339: LD_INT 70
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: LD_INT 11
39347: PUSH
39348: LD_INT 3
39350: PUSH
39351: LD_INT 4
39353: PUSH
39354: LD_INT 5
39356: PUSH
39357: LD_INT 6
39359: PUSH
39360: LD_INT 15
39362: PUSH
39363: LD_INT 18
39365: PUSH
39366: LD_INT 7
39368: PUSH
39369: LD_INT 17
39371: PUSH
39372: LD_INT 8
39374: PUSH
39375: LD_INT 20
39377: PUSH
39378: LD_INT 21
39380: PUSH
39381: LD_INT 22
39383: PUSH
39384: LD_INT 72
39386: PUSH
39387: LD_INT 26
39389: PUSH
39390: LD_INT 69
39392: PUSH
39393: LD_INT 39
39395: PUSH
39396: LD_INT 40
39398: PUSH
39399: LD_INT 41
39401: PUSH
39402: LD_INT 42
39404: PUSH
39405: LD_INT 43
39407: PUSH
39408: LD_INT 48
39410: PUSH
39411: LD_INT 49
39413: PUSH
39414: LD_INT 50
39416: PUSH
39417: LD_INT 51
39419: PUSH
39420: LD_INT 52
39422: PUSH
39423: LD_INT 53
39425: PUSH
39426: LD_INT 54
39428: PUSH
39429: LD_INT 55
39431: PUSH
39432: LD_INT 56
39434: PUSH
39435: LD_INT 60
39437: PUSH
39438: LD_INT 61
39440: PUSH
39441: LD_INT 62
39443: PUSH
39444: LD_INT 66
39446: PUSH
39447: LD_INT 67
39449: PUSH
39450: LD_INT 68
39452: PUSH
39453: LD_INT 81
39455: PUSH
39456: LD_INT 82
39458: PUSH
39459: LD_INT 83
39461: PUSH
39462: LD_INT 84
39464: PUSH
39465: LD_INT 85
39467: PUSH
39468: LD_INT 87
39470: PUSH
39471: LD_INT 88
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: ST_TO_ADDR
39530: GO 39763
39532: LD_INT 3
39534: DOUBLE
39535: EQUAL
39536: IFTRUE 39540
39538: GO 39762
39540: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
39541: LD_ADDR_VAR 0 4
39545: PUSH
39546: LD_INT 46
39548: PUSH
39549: LD_INT 47
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: LD_INT 2
39557: PUSH
39558: LD_INT 82
39560: PUSH
39561: LD_INT 83
39563: PUSH
39564: LD_INT 84
39566: PUSH
39567: LD_INT 85
39569: PUSH
39570: LD_INT 86
39572: PUSH
39573: LD_INT 11
39575: PUSH
39576: LD_INT 9
39578: PUSH
39579: LD_INT 20
39581: PUSH
39582: LD_INT 19
39584: PUSH
39585: LD_INT 21
39587: PUSH
39588: LD_INT 24
39590: PUSH
39591: LD_INT 22
39593: PUSH
39594: LD_INT 25
39596: PUSH
39597: LD_INT 28
39599: PUSH
39600: LD_INT 29
39602: PUSH
39603: LD_INT 30
39605: PUSH
39606: LD_INT 31
39608: PUSH
39609: LD_INT 37
39611: PUSH
39612: LD_INT 38
39614: PUSH
39615: LD_INT 32
39617: PUSH
39618: LD_INT 27
39620: PUSH
39621: LD_INT 33
39623: PUSH
39624: LD_INT 69
39626: PUSH
39627: LD_INT 39
39629: PUSH
39630: LD_INT 34
39632: PUSH
39633: LD_INT 40
39635: PUSH
39636: LD_INT 71
39638: PUSH
39639: LD_INT 23
39641: PUSH
39642: LD_INT 44
39644: PUSH
39645: LD_INT 48
39647: PUSH
39648: LD_INT 49
39650: PUSH
39651: LD_INT 50
39653: PUSH
39654: LD_INT 51
39656: PUSH
39657: LD_INT 52
39659: PUSH
39660: LD_INT 53
39662: PUSH
39663: LD_INT 54
39665: PUSH
39666: LD_INT 55
39668: PUSH
39669: LD_INT 56
39671: PUSH
39672: LD_INT 57
39674: PUSH
39675: LD_INT 58
39677: PUSH
39678: LD_INT 59
39680: PUSH
39681: LD_INT 63
39683: PUSH
39684: LD_INT 64
39686: PUSH
39687: LD_INT 65
39689: PUSH
39690: LD_INT 82
39692: PUSH
39693: LD_INT 83
39695: PUSH
39696: LD_INT 84
39698: PUSH
39699: LD_INT 85
39701: PUSH
39702: LD_INT 86
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: ST_TO_ADDR
39760: GO 39763
39762: POP
// if state > - 1 and state < 3 then
39763: LD_VAR 0 3
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: GREATER
39772: PUSH
39773: LD_VAR 0 3
39777: PUSH
39778: LD_INT 3
39780: LESS
39781: AND
39782: IFFALSE 39839
// for i in result do
39784: LD_ADDR_VAR 0 5
39788: PUSH
39789: LD_VAR 0 4
39793: PUSH
39794: FOR_IN
39795: IFFALSE 39837
// if GetTech ( i , side ) <> state then
39797: LD_VAR 0 5
39801: PPUSH
39802: LD_VAR 0 1
39806: PPUSH
39807: CALL_OW 321
39811: PUSH
39812: LD_VAR 0 3
39816: NONEQUAL
39817: IFFALSE 39835
// result := result diff i ;
39819: LD_ADDR_VAR 0 4
39823: PUSH
39824: LD_VAR 0 4
39828: PUSH
39829: LD_VAR 0 5
39833: DIFF
39834: ST_TO_ADDR
39835: GO 39794
39837: POP
39838: POP
// end ;
39839: LD_VAR 0 4
39843: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
39844: LD_INT 0
39846: PPUSH
39847: PPUSH
39848: PPUSH
// result := true ;
39849: LD_ADDR_VAR 0 3
39853: PUSH
39854: LD_INT 1
39856: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
39857: LD_ADDR_VAR 0 5
39861: PUSH
39862: LD_VAR 0 2
39866: PPUSH
39867: CALL_OW 480
39871: ST_TO_ADDR
// if not tmp then
39872: LD_VAR 0 5
39876: NOT
39877: IFFALSE 39881
// exit ;
39879: GO 39930
// for i in tmp do
39881: LD_ADDR_VAR 0 4
39885: PUSH
39886: LD_VAR 0 5
39890: PUSH
39891: FOR_IN
39892: IFFALSE 39928
// if GetTech ( i , side ) <> state_researched then
39894: LD_VAR 0 4
39898: PPUSH
39899: LD_VAR 0 1
39903: PPUSH
39904: CALL_OW 321
39908: PUSH
39909: LD_INT 2
39911: NONEQUAL
39912: IFFALSE 39926
// begin result := false ;
39914: LD_ADDR_VAR 0 3
39918: PUSH
39919: LD_INT 0
39921: ST_TO_ADDR
// exit ;
39922: POP
39923: POP
39924: GO 39930
// end ;
39926: GO 39891
39928: POP
39929: POP
// end ;
39930: LD_VAR 0 3
39934: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
39935: LD_INT 0
39937: PPUSH
39938: PPUSH
39939: PPUSH
39940: PPUSH
39941: PPUSH
39942: PPUSH
39943: PPUSH
39944: PPUSH
39945: PPUSH
39946: PPUSH
39947: PPUSH
39948: PPUSH
39949: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
39950: LD_VAR 0 1
39954: NOT
39955: PUSH
39956: LD_VAR 0 1
39960: PPUSH
39961: CALL_OW 257
39965: PUSH
39966: LD_INT 9
39968: NONEQUAL
39969: OR
39970: IFFALSE 39974
// exit ;
39972: GO 40547
// side := GetSide ( unit ) ;
39974: LD_ADDR_VAR 0 9
39978: PUSH
39979: LD_VAR 0 1
39983: PPUSH
39984: CALL_OW 255
39988: ST_TO_ADDR
// tech_space := tech_spacanom ;
39989: LD_ADDR_VAR 0 12
39993: PUSH
39994: LD_INT 29
39996: ST_TO_ADDR
// tech_time := tech_taurad ;
39997: LD_ADDR_VAR 0 13
40001: PUSH
40002: LD_INT 28
40004: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
40005: LD_ADDR_VAR 0 11
40009: PUSH
40010: LD_VAR 0 1
40014: PPUSH
40015: CALL_OW 310
40019: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
40020: LD_VAR 0 11
40024: PPUSH
40025: CALL_OW 247
40029: PUSH
40030: LD_INT 2
40032: EQUAL
40033: IFFALSE 40037
// exit ;
40035: GO 40547
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40037: LD_ADDR_VAR 0 8
40041: PUSH
40042: LD_INT 81
40044: PUSH
40045: LD_VAR 0 9
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 3
40056: PUSH
40057: LD_INT 21
40059: PUSH
40060: LD_INT 3
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PPUSH
40075: CALL_OW 69
40079: ST_TO_ADDR
// if not tmp then
40080: LD_VAR 0 8
40084: NOT
40085: IFFALSE 40089
// exit ;
40087: GO 40547
// if in_unit then
40089: LD_VAR 0 11
40093: IFFALSE 40117
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
40095: LD_ADDR_VAR 0 10
40099: PUSH
40100: LD_VAR 0 8
40104: PPUSH
40105: LD_VAR 0 11
40109: PPUSH
40110: CALL_OW 74
40114: ST_TO_ADDR
40115: GO 40137
// enemy := NearestUnitToUnit ( tmp , unit ) ;
40117: LD_ADDR_VAR 0 10
40121: PUSH
40122: LD_VAR 0 8
40126: PPUSH
40127: LD_VAR 0 1
40131: PPUSH
40132: CALL_OW 74
40136: ST_TO_ADDR
// if not enemy then
40137: LD_VAR 0 10
40141: NOT
40142: IFFALSE 40146
// exit ;
40144: GO 40547
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
40146: LD_VAR 0 11
40150: PUSH
40151: LD_VAR 0 11
40155: PPUSH
40156: LD_VAR 0 10
40160: PPUSH
40161: CALL_OW 296
40165: PUSH
40166: LD_INT 13
40168: GREATER
40169: AND
40170: PUSH
40171: LD_VAR 0 1
40175: PPUSH
40176: LD_VAR 0 10
40180: PPUSH
40181: CALL_OW 296
40185: PUSH
40186: LD_INT 12
40188: GREATER
40189: OR
40190: IFFALSE 40194
// exit ;
40192: GO 40547
// missile := [ 1 ] ;
40194: LD_ADDR_VAR 0 14
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: EMPTY
40203: LIST
40204: ST_TO_ADDR
// if Researched ( side , tech_space ) then
40205: LD_VAR 0 9
40209: PPUSH
40210: LD_VAR 0 12
40214: PPUSH
40215: CALL_OW 325
40219: IFFALSE 40248
// missile := Replace ( missile , missile + 1 , 2 ) ;
40221: LD_ADDR_VAR 0 14
40225: PUSH
40226: LD_VAR 0 14
40230: PPUSH
40231: LD_VAR 0 14
40235: PUSH
40236: LD_INT 1
40238: PLUS
40239: PPUSH
40240: LD_INT 2
40242: PPUSH
40243: CALL_OW 1
40247: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
40248: LD_VAR 0 9
40252: PPUSH
40253: LD_VAR 0 13
40257: PPUSH
40258: CALL_OW 325
40262: PUSH
40263: LD_VAR 0 10
40267: PPUSH
40268: CALL_OW 255
40272: PPUSH
40273: LD_VAR 0 13
40277: PPUSH
40278: CALL_OW 325
40282: NOT
40283: AND
40284: IFFALSE 40313
// missile := Replace ( missile , missile + 1 , 3 ) ;
40286: LD_ADDR_VAR 0 14
40290: PUSH
40291: LD_VAR 0 14
40295: PPUSH
40296: LD_VAR 0 14
40300: PUSH
40301: LD_INT 1
40303: PLUS
40304: PPUSH
40305: LD_INT 3
40307: PPUSH
40308: CALL_OW 1
40312: ST_TO_ADDR
// if missile < 2 then
40313: LD_VAR 0 14
40317: PUSH
40318: LD_INT 2
40320: LESS
40321: IFFALSE 40325
// exit ;
40323: GO 40547
// x := GetX ( enemy ) ;
40325: LD_ADDR_VAR 0 4
40329: PUSH
40330: LD_VAR 0 10
40334: PPUSH
40335: CALL_OW 250
40339: ST_TO_ADDR
// y := GetY ( enemy ) ;
40340: LD_ADDR_VAR 0 5
40344: PUSH
40345: LD_VAR 0 10
40349: PPUSH
40350: CALL_OW 251
40354: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
40355: LD_ADDR_VAR 0 6
40359: PUSH
40360: LD_VAR 0 4
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PPUSH
40369: LD_INT 1
40371: PPUSH
40372: CALL_OW 12
40376: PLUS
40377: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
40378: LD_ADDR_VAR 0 7
40382: PUSH
40383: LD_VAR 0 5
40387: PUSH
40388: LD_INT 1
40390: NEG
40391: PPUSH
40392: LD_INT 1
40394: PPUSH
40395: CALL_OW 12
40399: PLUS
40400: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40401: LD_VAR 0 6
40405: PPUSH
40406: LD_VAR 0 7
40410: PPUSH
40411: CALL_OW 488
40415: NOT
40416: IFFALSE 40438
// begin _x := x ;
40418: LD_ADDR_VAR 0 6
40422: PUSH
40423: LD_VAR 0 4
40427: ST_TO_ADDR
// _y := y ;
40428: LD_ADDR_VAR 0 7
40432: PUSH
40433: LD_VAR 0 5
40437: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
40438: LD_ADDR_VAR 0 3
40442: PUSH
40443: LD_INT 1
40445: PPUSH
40446: LD_VAR 0 14
40450: PPUSH
40451: CALL_OW 12
40455: ST_TO_ADDR
// case i of 1 :
40456: LD_VAR 0 3
40460: PUSH
40461: LD_INT 1
40463: DOUBLE
40464: EQUAL
40465: IFTRUE 40469
40467: GO 40486
40469: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
40470: LD_VAR 0 1
40474: PPUSH
40475: LD_VAR 0 10
40479: PPUSH
40480: CALL_OW 115
40484: GO 40547
40486: LD_INT 2
40488: DOUBLE
40489: EQUAL
40490: IFTRUE 40494
40492: GO 40516
40494: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
40495: LD_VAR 0 1
40499: PPUSH
40500: LD_VAR 0 6
40504: PPUSH
40505: LD_VAR 0 7
40509: PPUSH
40510: CALL_OW 153
40514: GO 40547
40516: LD_INT 3
40518: DOUBLE
40519: EQUAL
40520: IFTRUE 40524
40522: GO 40546
40524: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
40525: LD_VAR 0 1
40529: PPUSH
40530: LD_VAR 0 6
40534: PPUSH
40535: LD_VAR 0 7
40539: PPUSH
40540: CALL_OW 154
40544: GO 40547
40546: POP
// end ;
40547: LD_VAR 0 2
40551: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
40552: LD_INT 0
40554: PPUSH
40555: PPUSH
40556: PPUSH
40557: PPUSH
40558: PPUSH
40559: PPUSH
// if not unit or not building then
40560: LD_VAR 0 1
40564: NOT
40565: PUSH
40566: LD_VAR 0 2
40570: NOT
40571: OR
40572: IFFALSE 40576
// exit ;
40574: GO 40734
// x := GetX ( building ) ;
40576: LD_ADDR_VAR 0 5
40580: PUSH
40581: LD_VAR 0 2
40585: PPUSH
40586: CALL_OW 250
40590: ST_TO_ADDR
// y := GetY ( building ) ;
40591: LD_ADDR_VAR 0 6
40595: PUSH
40596: LD_VAR 0 2
40600: PPUSH
40601: CALL_OW 251
40605: ST_TO_ADDR
// for i = 0 to 5 do
40606: LD_ADDR_VAR 0 4
40610: PUSH
40611: DOUBLE
40612: LD_INT 0
40614: DEC
40615: ST_TO_ADDR
40616: LD_INT 5
40618: PUSH
40619: FOR_TO
40620: IFFALSE 40732
// begin _x := ShiftX ( x , i , 3 ) ;
40622: LD_ADDR_VAR 0 7
40626: PUSH
40627: LD_VAR 0 5
40631: PPUSH
40632: LD_VAR 0 4
40636: PPUSH
40637: LD_INT 3
40639: PPUSH
40640: CALL_OW 272
40644: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
40645: LD_ADDR_VAR 0 8
40649: PUSH
40650: LD_VAR 0 6
40654: PPUSH
40655: LD_VAR 0 4
40659: PPUSH
40660: LD_INT 3
40662: PPUSH
40663: CALL_OW 273
40667: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40668: LD_VAR 0 7
40672: PPUSH
40673: LD_VAR 0 8
40677: PPUSH
40678: CALL_OW 488
40682: NOT
40683: IFFALSE 40687
// continue ;
40685: GO 40619
// if HexInfo ( _x , _y ) = 0 then
40687: LD_VAR 0 7
40691: PPUSH
40692: LD_VAR 0 8
40696: PPUSH
40697: CALL_OW 428
40701: PUSH
40702: LD_INT 0
40704: EQUAL
40705: IFFALSE 40730
// begin ComMoveXY ( unit , _x , _y ) ;
40707: LD_VAR 0 1
40711: PPUSH
40712: LD_VAR 0 7
40716: PPUSH
40717: LD_VAR 0 8
40721: PPUSH
40722: CALL_OW 111
// exit ;
40726: POP
40727: POP
40728: GO 40734
// end ; end ;
40730: GO 40619
40732: POP
40733: POP
// end ;
40734: LD_VAR 0 3
40738: RET
// export function ScanBase ( side , base_area ) ; begin
40739: LD_INT 0
40741: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
40742: LD_ADDR_VAR 0 3
40746: PUSH
40747: LD_VAR 0 2
40751: PPUSH
40752: LD_INT 81
40754: PUSH
40755: LD_VAR 0 1
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PPUSH
40764: CALL_OW 70
40768: ST_TO_ADDR
// end ;
40769: LD_VAR 0 3
40773: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
40774: LD_INT 0
40776: PPUSH
40777: PPUSH
40778: PPUSH
40779: PPUSH
// result := false ;
40780: LD_ADDR_VAR 0 2
40784: PUSH
40785: LD_INT 0
40787: ST_TO_ADDR
// side := GetSide ( unit ) ;
40788: LD_ADDR_VAR 0 3
40792: PUSH
40793: LD_VAR 0 1
40797: PPUSH
40798: CALL_OW 255
40802: ST_TO_ADDR
// nat := GetNation ( unit ) ;
40803: LD_ADDR_VAR 0 4
40807: PUSH
40808: LD_VAR 0 1
40812: PPUSH
40813: CALL_OW 248
40817: ST_TO_ADDR
// case nat of 1 :
40818: LD_VAR 0 4
40822: PUSH
40823: LD_INT 1
40825: DOUBLE
40826: EQUAL
40827: IFTRUE 40831
40829: GO 40842
40831: POP
// tech := tech_lassight ; 2 :
40832: LD_ADDR_VAR 0 5
40836: PUSH
40837: LD_INT 12
40839: ST_TO_ADDR
40840: GO 40881
40842: LD_INT 2
40844: DOUBLE
40845: EQUAL
40846: IFTRUE 40850
40848: GO 40861
40850: POP
// tech := tech_mortar ; 3 :
40851: LD_ADDR_VAR 0 5
40855: PUSH
40856: LD_INT 41
40858: ST_TO_ADDR
40859: GO 40881
40861: LD_INT 3
40863: DOUBLE
40864: EQUAL
40865: IFTRUE 40869
40867: GO 40880
40869: POP
// tech := tech_bazooka ; end ;
40870: LD_ADDR_VAR 0 5
40874: PUSH
40875: LD_INT 44
40877: ST_TO_ADDR
40878: GO 40881
40880: POP
// if Researched ( side , tech ) then
40881: LD_VAR 0 3
40885: PPUSH
40886: LD_VAR 0 5
40890: PPUSH
40891: CALL_OW 325
40895: IFFALSE 40922
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
40897: LD_ADDR_VAR 0 2
40901: PUSH
40902: LD_INT 5
40904: PUSH
40905: LD_INT 8
40907: PUSH
40908: LD_INT 9
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: LIST
40915: PUSH
40916: LD_VAR 0 4
40920: ARRAY
40921: ST_TO_ADDR
// end ;
40922: LD_VAR 0 2
40926: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
40927: LD_INT 0
40929: PPUSH
40930: PPUSH
40931: PPUSH
// if not mines then
40932: LD_VAR 0 2
40936: NOT
40937: IFFALSE 40941
// exit ;
40939: GO 41085
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40941: LD_ADDR_VAR 0 5
40945: PUSH
40946: LD_INT 81
40948: PUSH
40949: LD_VAR 0 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 3
40960: PUSH
40961: LD_INT 21
40963: PUSH
40964: LD_INT 3
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PPUSH
40979: CALL_OW 69
40983: ST_TO_ADDR
// for i in mines do
40984: LD_ADDR_VAR 0 4
40988: PUSH
40989: LD_VAR 0 2
40993: PUSH
40994: FOR_IN
40995: IFFALSE 41083
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
40997: LD_VAR 0 4
41001: PUSH
41002: LD_INT 1
41004: ARRAY
41005: PPUSH
41006: LD_VAR 0 4
41010: PUSH
41011: LD_INT 2
41013: ARRAY
41014: PPUSH
41015: CALL_OW 458
41019: NOT
41020: IFFALSE 41024
// continue ;
41022: GO 40994
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
41024: LD_VAR 0 4
41028: PUSH
41029: LD_INT 1
41031: ARRAY
41032: PPUSH
41033: LD_VAR 0 4
41037: PUSH
41038: LD_INT 2
41040: ARRAY
41041: PPUSH
41042: CALL_OW 428
41046: PUSH
41047: LD_VAR 0 5
41051: IN
41052: IFFALSE 41081
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
41054: LD_VAR 0 4
41058: PUSH
41059: LD_INT 1
41061: ARRAY
41062: PPUSH
41063: LD_VAR 0 4
41067: PUSH
41068: LD_INT 2
41070: ARRAY
41071: PPUSH
41072: LD_VAR 0 1
41076: PPUSH
41077: CALL_OW 456
// end ;
41081: GO 40994
41083: POP
41084: POP
// end ;
41085: LD_VAR 0 3
41089: RET
// export function Count ( array ) ; var i ; begin
41090: LD_INT 0
41092: PPUSH
41093: PPUSH
// result := 0 ;
41094: LD_ADDR_VAR 0 2
41098: PUSH
41099: LD_INT 0
41101: ST_TO_ADDR
// for i in array do
41102: LD_ADDR_VAR 0 3
41106: PUSH
41107: LD_VAR 0 1
41111: PUSH
41112: FOR_IN
41113: IFFALSE 41137
// if i then
41115: LD_VAR 0 3
41119: IFFALSE 41135
// result := result + 1 ;
41121: LD_ADDR_VAR 0 2
41125: PUSH
41126: LD_VAR 0 2
41130: PUSH
41131: LD_INT 1
41133: PLUS
41134: ST_TO_ADDR
41135: GO 41112
41137: POP
41138: POP
// end ;
41139: LD_VAR 0 2
41143: RET
// export function IsEmpty ( building ) ; begin
41144: LD_INT 0
41146: PPUSH
// if not building then
41147: LD_VAR 0 1
41151: NOT
41152: IFFALSE 41156
// exit ;
41154: GO 41199
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
41156: LD_ADDR_VAR 0 2
41160: PUSH
41161: LD_VAR 0 1
41165: PUSH
41166: LD_INT 22
41168: PUSH
41169: LD_VAR 0 1
41173: PPUSH
41174: CALL_OW 255
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 58
41185: PUSH
41186: EMPTY
41187: LIST
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PPUSH
41193: CALL_OW 69
41197: IN
41198: ST_TO_ADDR
// end ;
41199: LD_VAR 0 2
41203: RET
// export function IsNotFull ( building ) ; var places ; begin
41204: LD_INT 0
41206: PPUSH
41207: PPUSH
// if not building then
41208: LD_VAR 0 1
41212: NOT
41213: IFFALSE 41217
// exit ;
41215: GO 41388
// result := false ;
41217: LD_ADDR_VAR 0 2
41221: PUSH
41222: LD_INT 0
41224: ST_TO_ADDR
// places := 0 ;
41225: LD_ADDR_VAR 0 3
41229: PUSH
41230: LD_INT 0
41232: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
41233: LD_VAR 0 1
41237: PPUSH
41238: CALL_OW 266
41242: PUSH
41243: LD_INT 0
41245: DOUBLE
41246: EQUAL
41247: IFTRUE 41305
41249: LD_INT 1
41251: DOUBLE
41252: EQUAL
41253: IFTRUE 41305
41255: LD_INT 6
41257: DOUBLE
41258: EQUAL
41259: IFTRUE 41305
41261: LD_INT 7
41263: DOUBLE
41264: EQUAL
41265: IFTRUE 41305
41267: LD_INT 8
41269: DOUBLE
41270: EQUAL
41271: IFTRUE 41305
41273: LD_INT 4
41275: DOUBLE
41276: EQUAL
41277: IFTRUE 41305
41279: LD_INT 5
41281: DOUBLE
41282: EQUAL
41283: IFTRUE 41305
41285: LD_INT 2
41287: DOUBLE
41288: EQUAL
41289: IFTRUE 41305
41291: LD_INT 3
41293: DOUBLE
41294: EQUAL
41295: IFTRUE 41305
41297: LD_INT 35
41299: DOUBLE
41300: EQUAL
41301: IFTRUE 41305
41303: GO 41316
41305: POP
// places := 6 ; b_bunker , b_breastwork :
41306: LD_ADDR_VAR 0 3
41310: PUSH
41311: LD_INT 6
41313: ST_TO_ADDR
41314: GO 41361
41316: LD_INT 32
41318: DOUBLE
41319: EQUAL
41320: IFTRUE 41330
41322: LD_INT 31
41324: DOUBLE
41325: EQUAL
41326: IFTRUE 41330
41328: GO 41341
41330: POP
// places := 1 ; b_control_tower :
41331: LD_ADDR_VAR 0 3
41335: PUSH
41336: LD_INT 1
41338: ST_TO_ADDR
41339: GO 41361
41341: LD_INT 36
41343: DOUBLE
41344: EQUAL
41345: IFTRUE 41349
41347: GO 41360
41349: POP
// places := 3 ; end ;
41350: LD_ADDR_VAR 0 3
41354: PUSH
41355: LD_INT 3
41357: ST_TO_ADDR
41358: GO 41361
41360: POP
// if places then
41361: LD_VAR 0 3
41365: IFFALSE 41388
// result := UnitsInside ( building ) < places ;
41367: LD_ADDR_VAR 0 2
41371: PUSH
41372: LD_VAR 0 1
41376: PPUSH
41377: CALL_OW 313
41381: PUSH
41382: LD_VAR 0 3
41386: LESS
41387: ST_TO_ADDR
// end ;
41388: LD_VAR 0 2
41392: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
41393: LD_INT 0
41395: PPUSH
41396: PPUSH
41397: PPUSH
41398: PPUSH
// tmp := [ ] ;
41399: LD_ADDR_VAR 0 3
41403: PUSH
41404: EMPTY
41405: ST_TO_ADDR
// list := [ ] ;
41406: LD_ADDR_VAR 0 5
41410: PUSH
41411: EMPTY
41412: ST_TO_ADDR
// for i = 16 to 25 do
41413: LD_ADDR_VAR 0 4
41417: PUSH
41418: DOUBLE
41419: LD_INT 16
41421: DEC
41422: ST_TO_ADDR
41423: LD_INT 25
41425: PUSH
41426: FOR_TO
41427: IFFALSE 41500
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
41429: LD_ADDR_VAR 0 3
41433: PUSH
41434: LD_VAR 0 3
41438: PUSH
41439: LD_INT 22
41441: PUSH
41442: LD_VAR 0 1
41446: PPUSH
41447: CALL_OW 255
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 91
41458: PUSH
41459: LD_VAR 0 1
41463: PUSH
41464: LD_INT 6
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 30
41474: PUSH
41475: LD_VAR 0 4
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: LIST
41488: PUSH
41489: EMPTY
41490: LIST
41491: PPUSH
41492: CALL_OW 69
41496: ADD
41497: ST_TO_ADDR
41498: GO 41426
41500: POP
41501: POP
// for i = 1 to tmp do
41502: LD_ADDR_VAR 0 4
41506: PUSH
41507: DOUBLE
41508: LD_INT 1
41510: DEC
41511: ST_TO_ADDR
41512: LD_VAR 0 3
41516: PUSH
41517: FOR_TO
41518: IFFALSE 41606
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
41520: LD_ADDR_VAR 0 5
41524: PUSH
41525: LD_VAR 0 5
41529: PUSH
41530: LD_VAR 0 3
41534: PUSH
41535: LD_VAR 0 4
41539: ARRAY
41540: PPUSH
41541: CALL_OW 266
41545: PUSH
41546: LD_VAR 0 3
41550: PUSH
41551: LD_VAR 0 4
41555: ARRAY
41556: PPUSH
41557: CALL_OW 250
41561: PUSH
41562: LD_VAR 0 3
41566: PUSH
41567: LD_VAR 0 4
41571: ARRAY
41572: PPUSH
41573: CALL_OW 251
41577: PUSH
41578: LD_VAR 0 3
41582: PUSH
41583: LD_VAR 0 4
41587: ARRAY
41588: PPUSH
41589: CALL_OW 254
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: PUSH
41600: EMPTY
41601: LIST
41602: ADD
41603: ST_TO_ADDR
41604: GO 41517
41606: POP
41607: POP
// result := list ;
41608: LD_ADDR_VAR 0 2
41612: PUSH
41613: LD_VAR 0 5
41617: ST_TO_ADDR
// end ;
41618: LD_VAR 0 2
41622: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
41623: LD_INT 0
41625: PPUSH
41626: PPUSH
41627: PPUSH
41628: PPUSH
41629: PPUSH
41630: PPUSH
41631: PPUSH
// if not factory then
41632: LD_VAR 0 1
41636: NOT
41637: IFFALSE 41641
// exit ;
41639: GO 42234
// if control = control_apeman then
41641: LD_VAR 0 4
41645: PUSH
41646: LD_INT 5
41648: EQUAL
41649: IFFALSE 41758
// begin tmp := UnitsInside ( factory ) ;
41651: LD_ADDR_VAR 0 8
41655: PUSH
41656: LD_VAR 0 1
41660: PPUSH
41661: CALL_OW 313
41665: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
41666: LD_VAR 0 8
41670: PPUSH
41671: LD_INT 25
41673: PUSH
41674: LD_INT 12
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PPUSH
41681: CALL_OW 72
41685: NOT
41686: IFFALSE 41696
// control := control_manual ;
41688: LD_ADDR_VAR 0 4
41692: PUSH
41693: LD_INT 1
41695: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
41696: LD_ADDR_VAR 0 8
41700: PUSH
41701: LD_VAR 0 1
41705: PPUSH
41706: CALL 41393 0 1
41710: ST_TO_ADDR
// if tmp then
41711: LD_VAR 0 8
41715: IFFALSE 41758
// begin for i in tmp do
41717: LD_ADDR_VAR 0 7
41721: PUSH
41722: LD_VAR 0 8
41726: PUSH
41727: FOR_IN
41728: IFFALSE 41756
// if i [ 1 ] = b_ext_radio then
41730: LD_VAR 0 7
41734: PUSH
41735: LD_INT 1
41737: ARRAY
41738: PUSH
41739: LD_INT 22
41741: EQUAL
41742: IFFALSE 41754
// begin control := control_remote ;
41744: LD_ADDR_VAR 0 4
41748: PUSH
41749: LD_INT 2
41751: ST_TO_ADDR
// break ;
41752: GO 41756
// end ;
41754: GO 41727
41756: POP
41757: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
41758: LD_VAR 0 1
41762: PPUSH
41763: LD_VAR 0 2
41767: PPUSH
41768: LD_VAR 0 3
41772: PPUSH
41773: LD_VAR 0 4
41777: PPUSH
41778: LD_VAR 0 5
41782: PPUSH
41783: CALL_OW 448
41787: IFFALSE 41822
// begin result := [ chassis , engine , control , weapon ] ;
41789: LD_ADDR_VAR 0 6
41793: PUSH
41794: LD_VAR 0 2
41798: PUSH
41799: LD_VAR 0 3
41803: PUSH
41804: LD_VAR 0 4
41808: PUSH
41809: LD_VAR 0 5
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: ST_TO_ADDR
// exit ;
41820: GO 42234
// end ; _chassis := AvailableChassisList ( factory ) ;
41822: LD_ADDR_VAR 0 9
41826: PUSH
41827: LD_VAR 0 1
41831: PPUSH
41832: CALL_OW 475
41836: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
41837: LD_ADDR_VAR 0 11
41841: PUSH
41842: LD_VAR 0 1
41846: PPUSH
41847: CALL_OW 476
41851: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
41852: LD_ADDR_VAR 0 12
41856: PUSH
41857: LD_VAR 0 1
41861: PPUSH
41862: CALL_OW 477
41866: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
41867: LD_ADDR_VAR 0 10
41871: PUSH
41872: LD_VAR 0 1
41876: PPUSH
41877: CALL_OW 478
41881: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
41882: LD_VAR 0 9
41886: NOT
41887: PUSH
41888: LD_VAR 0 11
41892: NOT
41893: OR
41894: PUSH
41895: LD_VAR 0 12
41899: NOT
41900: OR
41901: PUSH
41902: LD_VAR 0 10
41906: NOT
41907: OR
41908: IFFALSE 41943
// begin result := [ chassis , engine , control , weapon ] ;
41910: LD_ADDR_VAR 0 6
41914: PUSH
41915: LD_VAR 0 2
41919: PUSH
41920: LD_VAR 0 3
41924: PUSH
41925: LD_VAR 0 4
41929: PUSH
41930: LD_VAR 0 5
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: ST_TO_ADDR
// exit ;
41941: GO 42234
// end ; if not chassis in _chassis then
41943: LD_VAR 0 2
41947: PUSH
41948: LD_VAR 0 9
41952: IN
41953: NOT
41954: IFFALSE 41980
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
41956: LD_ADDR_VAR 0 2
41960: PUSH
41961: LD_VAR 0 9
41965: PUSH
41966: LD_INT 1
41968: PPUSH
41969: LD_VAR 0 9
41973: PPUSH
41974: CALL_OW 12
41978: ARRAY
41979: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
41980: LD_VAR 0 2
41984: PPUSH
41985: LD_VAR 0 3
41989: PPUSH
41990: CALL 42239 0 2
41994: NOT
41995: IFFALSE 42054
// repeat engine := _engine [ 1 ] ;
41997: LD_ADDR_VAR 0 3
42001: PUSH
42002: LD_VAR 0 11
42006: PUSH
42007: LD_INT 1
42009: ARRAY
42010: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
42011: LD_ADDR_VAR 0 11
42015: PUSH
42016: LD_VAR 0 11
42020: PPUSH
42021: LD_INT 1
42023: PPUSH
42024: CALL_OW 3
42028: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
42029: LD_VAR 0 2
42033: PPUSH
42034: LD_VAR 0 3
42038: PPUSH
42039: CALL 42239 0 2
42043: PUSH
42044: LD_VAR 0 11
42048: PUSH
42049: EMPTY
42050: EQUAL
42051: OR
42052: IFFALSE 41997
// if not control in _control then
42054: LD_VAR 0 4
42058: PUSH
42059: LD_VAR 0 12
42063: IN
42064: NOT
42065: IFFALSE 42091
// control := _control [ rand ( 1 , _control ) ] ;
42067: LD_ADDR_VAR 0 4
42071: PUSH
42072: LD_VAR 0 12
42076: PUSH
42077: LD_INT 1
42079: PPUSH
42080: LD_VAR 0 12
42084: PPUSH
42085: CALL_OW 12
42089: ARRAY
42090: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
42091: LD_VAR 0 2
42095: PPUSH
42096: LD_VAR 0 5
42100: PPUSH
42101: CALL 42459 0 2
42105: NOT
42106: IFFALSE 42165
// repeat weapon := _weapon [ 1 ] ;
42108: LD_ADDR_VAR 0 5
42112: PUSH
42113: LD_VAR 0 10
42117: PUSH
42118: LD_INT 1
42120: ARRAY
42121: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
42122: LD_ADDR_VAR 0 10
42126: PUSH
42127: LD_VAR 0 10
42131: PPUSH
42132: LD_INT 1
42134: PPUSH
42135: CALL_OW 3
42139: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
42140: LD_VAR 0 2
42144: PPUSH
42145: LD_VAR 0 5
42149: PPUSH
42150: CALL 42459 0 2
42154: PUSH
42155: LD_VAR 0 10
42159: PUSH
42160: EMPTY
42161: EQUAL
42162: OR
42163: IFFALSE 42108
// result := [ ] ;
42165: LD_ADDR_VAR 0 6
42169: PUSH
42170: EMPTY
42171: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
42172: LD_VAR 0 1
42176: PPUSH
42177: LD_VAR 0 2
42181: PPUSH
42182: LD_VAR 0 3
42186: PPUSH
42187: LD_VAR 0 4
42191: PPUSH
42192: LD_VAR 0 5
42196: PPUSH
42197: CALL_OW 448
42201: IFFALSE 42234
// result := [ chassis , engine , control , weapon ] ;
42203: LD_ADDR_VAR 0 6
42207: PUSH
42208: LD_VAR 0 2
42212: PUSH
42213: LD_VAR 0 3
42217: PUSH
42218: LD_VAR 0 4
42222: PUSH
42223: LD_VAR 0 5
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: ST_TO_ADDR
// end ;
42234: LD_VAR 0 6
42238: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
42239: LD_INT 0
42241: PPUSH
// if not chassis or not engine then
42242: LD_VAR 0 1
42246: NOT
42247: PUSH
42248: LD_VAR 0 2
42252: NOT
42253: OR
42254: IFFALSE 42258
// exit ;
42256: GO 42454
// case engine of engine_solar :
42258: LD_VAR 0 2
42262: PUSH
42263: LD_INT 2
42265: DOUBLE
42266: EQUAL
42267: IFTRUE 42271
42269: GO 42309
42271: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
42272: LD_ADDR_VAR 0 3
42276: PUSH
42277: LD_INT 11
42279: PUSH
42280: LD_INT 12
42282: PUSH
42283: LD_INT 13
42285: PUSH
42286: LD_INT 14
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: LD_INT 2
42294: PUSH
42295: LD_INT 3
42297: PUSH
42298: EMPTY
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: ST_TO_ADDR
42307: GO 42438
42309: LD_INT 1
42311: DOUBLE
42312: EQUAL
42313: IFTRUE 42317
42315: GO 42379
42317: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
42318: LD_ADDR_VAR 0 3
42322: PUSH
42323: LD_INT 11
42325: PUSH
42326: LD_INT 12
42328: PUSH
42329: LD_INT 13
42331: PUSH
42332: LD_INT 14
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 2
42340: PUSH
42341: LD_INT 3
42343: PUSH
42344: LD_INT 4
42346: PUSH
42347: LD_INT 5
42349: PUSH
42350: LD_INT 21
42352: PUSH
42353: LD_INT 23
42355: PUSH
42356: LD_INT 22
42358: PUSH
42359: LD_INT 24
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: ST_TO_ADDR
42377: GO 42438
42379: LD_INT 3
42381: DOUBLE
42382: EQUAL
42383: IFTRUE 42387
42385: GO 42437
42387: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
42388: LD_ADDR_VAR 0 3
42392: PUSH
42393: LD_INT 13
42395: PUSH
42396: LD_INT 14
42398: PUSH
42399: LD_INT 2
42401: PUSH
42402: LD_INT 3
42404: PUSH
42405: LD_INT 4
42407: PUSH
42408: LD_INT 5
42410: PUSH
42411: LD_INT 21
42413: PUSH
42414: LD_INT 22
42416: PUSH
42417: LD_INT 23
42419: PUSH
42420: LD_INT 24
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: ST_TO_ADDR
42435: GO 42438
42437: POP
// result := ( chassis in result ) ;
42438: LD_ADDR_VAR 0 3
42442: PUSH
42443: LD_VAR 0 1
42447: PUSH
42448: LD_VAR 0 3
42452: IN
42453: ST_TO_ADDR
// end ;
42454: LD_VAR 0 3
42458: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
42459: LD_INT 0
42461: PPUSH
// if not chassis or not weapon then
42462: LD_VAR 0 1
42466: NOT
42467: PUSH
42468: LD_VAR 0 2
42472: NOT
42473: OR
42474: IFFALSE 42478
// exit ;
42476: GO 43538
// case weapon of us_machine_gun :
42478: LD_VAR 0 2
42482: PUSH
42483: LD_INT 2
42485: DOUBLE
42486: EQUAL
42487: IFTRUE 42491
42489: GO 42521
42491: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
42492: LD_ADDR_VAR 0 3
42496: PUSH
42497: LD_INT 1
42499: PUSH
42500: LD_INT 2
42502: PUSH
42503: LD_INT 3
42505: PUSH
42506: LD_INT 4
42508: PUSH
42509: LD_INT 5
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: ST_TO_ADDR
42519: GO 43522
42521: LD_INT 3
42523: DOUBLE
42524: EQUAL
42525: IFTRUE 42529
42527: GO 42559
42529: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
42530: LD_ADDR_VAR 0 3
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: LD_INT 2
42540: PUSH
42541: LD_INT 3
42543: PUSH
42544: LD_INT 4
42546: PUSH
42547: LD_INT 5
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: ST_TO_ADDR
42557: GO 43522
42559: LD_INT 11
42561: DOUBLE
42562: EQUAL
42563: IFTRUE 42567
42565: GO 42597
42567: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
42568: LD_ADDR_VAR 0 3
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: LD_INT 2
42578: PUSH
42579: LD_INT 3
42581: PUSH
42582: LD_INT 4
42584: PUSH
42585: LD_INT 5
42587: PUSH
42588: EMPTY
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: ST_TO_ADDR
42595: GO 43522
42597: LD_INT 4
42599: DOUBLE
42600: EQUAL
42601: IFTRUE 42605
42603: GO 42631
42605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
42606: LD_ADDR_VAR 0 3
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: LD_INT 3
42616: PUSH
42617: LD_INT 4
42619: PUSH
42620: LD_INT 5
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: LIST
42627: LIST
42628: ST_TO_ADDR
42629: GO 43522
42631: LD_INT 5
42633: DOUBLE
42634: EQUAL
42635: IFTRUE 42639
42637: GO 42665
42639: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
42640: LD_ADDR_VAR 0 3
42644: PUSH
42645: LD_INT 2
42647: PUSH
42648: LD_INT 3
42650: PUSH
42651: LD_INT 4
42653: PUSH
42654: LD_INT 5
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: ST_TO_ADDR
42663: GO 43522
42665: LD_INT 9
42667: DOUBLE
42668: EQUAL
42669: IFTRUE 42673
42671: GO 42699
42673: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
42674: LD_ADDR_VAR 0 3
42678: PUSH
42679: LD_INT 2
42681: PUSH
42682: LD_INT 3
42684: PUSH
42685: LD_INT 4
42687: PUSH
42688: LD_INT 5
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: ST_TO_ADDR
42697: GO 43522
42699: LD_INT 7
42701: DOUBLE
42702: EQUAL
42703: IFTRUE 42707
42705: GO 42733
42707: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
42708: LD_ADDR_VAR 0 3
42712: PUSH
42713: LD_INT 2
42715: PUSH
42716: LD_INT 3
42718: PUSH
42719: LD_INT 4
42721: PUSH
42722: LD_INT 5
42724: PUSH
42725: EMPTY
42726: LIST
42727: LIST
42728: LIST
42729: LIST
42730: ST_TO_ADDR
42731: GO 43522
42733: LD_INT 12
42735: DOUBLE
42736: EQUAL
42737: IFTRUE 42741
42739: GO 42767
42741: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
42742: LD_ADDR_VAR 0 3
42746: PUSH
42747: LD_INT 2
42749: PUSH
42750: LD_INT 3
42752: PUSH
42753: LD_INT 4
42755: PUSH
42756: LD_INT 5
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: ST_TO_ADDR
42765: GO 43522
42767: LD_INT 13
42769: DOUBLE
42770: EQUAL
42771: IFTRUE 42775
42773: GO 42801
42775: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
42776: LD_ADDR_VAR 0 3
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: LD_INT 3
42786: PUSH
42787: LD_INT 4
42789: PUSH
42790: LD_INT 5
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: ST_TO_ADDR
42799: GO 43522
42801: LD_INT 14
42803: DOUBLE
42804: EQUAL
42805: IFTRUE 42809
42807: GO 42827
42809: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
42810: LD_ADDR_VAR 0 3
42814: PUSH
42815: LD_INT 4
42817: PUSH
42818: LD_INT 5
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: ST_TO_ADDR
42825: GO 43522
42827: LD_INT 6
42829: DOUBLE
42830: EQUAL
42831: IFTRUE 42835
42833: GO 42853
42835: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
42836: LD_ADDR_VAR 0 3
42840: PUSH
42841: LD_INT 4
42843: PUSH
42844: LD_INT 5
42846: PUSH
42847: EMPTY
42848: LIST
42849: LIST
42850: ST_TO_ADDR
42851: GO 43522
42853: LD_INT 10
42855: DOUBLE
42856: EQUAL
42857: IFTRUE 42861
42859: GO 42879
42861: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
42862: LD_ADDR_VAR 0 3
42866: PUSH
42867: LD_INT 4
42869: PUSH
42870: LD_INT 5
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: ST_TO_ADDR
42877: GO 43522
42879: LD_INT 22
42881: DOUBLE
42882: EQUAL
42883: IFTRUE 42887
42885: GO 42913
42887: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
42888: LD_ADDR_VAR 0 3
42892: PUSH
42893: LD_INT 11
42895: PUSH
42896: LD_INT 12
42898: PUSH
42899: LD_INT 13
42901: PUSH
42902: LD_INT 14
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: LIST
42910: ST_TO_ADDR
42911: GO 43522
42913: LD_INT 23
42915: DOUBLE
42916: EQUAL
42917: IFTRUE 42921
42919: GO 42947
42921: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
42922: LD_ADDR_VAR 0 3
42926: PUSH
42927: LD_INT 11
42929: PUSH
42930: LD_INT 12
42932: PUSH
42933: LD_INT 13
42935: PUSH
42936: LD_INT 14
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: ST_TO_ADDR
42945: GO 43522
42947: LD_INT 24
42949: DOUBLE
42950: EQUAL
42951: IFTRUE 42955
42953: GO 42981
42955: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
42956: LD_ADDR_VAR 0 3
42960: PUSH
42961: LD_INT 11
42963: PUSH
42964: LD_INT 12
42966: PUSH
42967: LD_INT 13
42969: PUSH
42970: LD_INT 14
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: ST_TO_ADDR
42979: GO 43522
42981: LD_INT 30
42983: DOUBLE
42984: EQUAL
42985: IFTRUE 42989
42987: GO 43015
42989: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
42990: LD_ADDR_VAR 0 3
42994: PUSH
42995: LD_INT 11
42997: PUSH
42998: LD_INT 12
43000: PUSH
43001: LD_INT 13
43003: PUSH
43004: LD_INT 14
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: ST_TO_ADDR
43013: GO 43522
43015: LD_INT 25
43017: DOUBLE
43018: EQUAL
43019: IFTRUE 43023
43021: GO 43041
43023: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
43024: LD_ADDR_VAR 0 3
43028: PUSH
43029: LD_INT 13
43031: PUSH
43032: LD_INT 14
43034: PUSH
43035: EMPTY
43036: LIST
43037: LIST
43038: ST_TO_ADDR
43039: GO 43522
43041: LD_INT 27
43043: DOUBLE
43044: EQUAL
43045: IFTRUE 43049
43047: GO 43067
43049: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
43050: LD_ADDR_VAR 0 3
43054: PUSH
43055: LD_INT 13
43057: PUSH
43058: LD_INT 14
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: ST_TO_ADDR
43065: GO 43522
43067: LD_INT 92
43069: DOUBLE
43070: EQUAL
43071: IFTRUE 43075
43073: GO 43101
43075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
43076: LD_ADDR_VAR 0 3
43080: PUSH
43081: LD_INT 11
43083: PUSH
43084: LD_INT 12
43086: PUSH
43087: LD_INT 13
43089: PUSH
43090: LD_INT 14
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: LIST
43097: LIST
43098: ST_TO_ADDR
43099: GO 43522
43101: LD_INT 28
43103: DOUBLE
43104: EQUAL
43105: IFTRUE 43109
43107: GO 43127
43109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
43110: LD_ADDR_VAR 0 3
43114: PUSH
43115: LD_INT 13
43117: PUSH
43118: LD_INT 14
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: ST_TO_ADDR
43125: GO 43522
43127: LD_INT 29
43129: DOUBLE
43130: EQUAL
43131: IFTRUE 43135
43133: GO 43153
43135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
43136: LD_ADDR_VAR 0 3
43140: PUSH
43141: LD_INT 13
43143: PUSH
43144: LD_INT 14
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: ST_TO_ADDR
43151: GO 43522
43153: LD_INT 31
43155: DOUBLE
43156: EQUAL
43157: IFTRUE 43161
43159: GO 43179
43161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
43162: LD_ADDR_VAR 0 3
43166: PUSH
43167: LD_INT 13
43169: PUSH
43170: LD_INT 14
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: ST_TO_ADDR
43177: GO 43522
43179: LD_INT 26
43181: DOUBLE
43182: EQUAL
43183: IFTRUE 43187
43185: GO 43205
43187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
43188: LD_ADDR_VAR 0 3
43192: PUSH
43193: LD_INT 13
43195: PUSH
43196: LD_INT 14
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: ST_TO_ADDR
43203: GO 43522
43205: LD_INT 42
43207: DOUBLE
43208: EQUAL
43209: IFTRUE 43213
43211: GO 43239
43213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
43214: LD_ADDR_VAR 0 3
43218: PUSH
43219: LD_INT 21
43221: PUSH
43222: LD_INT 22
43224: PUSH
43225: LD_INT 23
43227: PUSH
43228: LD_INT 24
43230: PUSH
43231: EMPTY
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: ST_TO_ADDR
43237: GO 43522
43239: LD_INT 43
43241: DOUBLE
43242: EQUAL
43243: IFTRUE 43247
43245: GO 43273
43247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
43248: LD_ADDR_VAR 0 3
43252: PUSH
43253: LD_INT 21
43255: PUSH
43256: LD_INT 22
43258: PUSH
43259: LD_INT 23
43261: PUSH
43262: LD_INT 24
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: ST_TO_ADDR
43271: GO 43522
43273: LD_INT 44
43275: DOUBLE
43276: EQUAL
43277: IFTRUE 43281
43279: GO 43307
43281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
43282: LD_ADDR_VAR 0 3
43286: PUSH
43287: LD_INT 21
43289: PUSH
43290: LD_INT 22
43292: PUSH
43293: LD_INT 23
43295: PUSH
43296: LD_INT 24
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: ST_TO_ADDR
43305: GO 43522
43307: LD_INT 45
43309: DOUBLE
43310: EQUAL
43311: IFTRUE 43315
43313: GO 43341
43315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
43316: LD_ADDR_VAR 0 3
43320: PUSH
43321: LD_INT 21
43323: PUSH
43324: LD_INT 22
43326: PUSH
43327: LD_INT 23
43329: PUSH
43330: LD_INT 24
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: ST_TO_ADDR
43339: GO 43522
43341: LD_INT 49
43343: DOUBLE
43344: EQUAL
43345: IFTRUE 43349
43347: GO 43375
43349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
43350: LD_ADDR_VAR 0 3
43354: PUSH
43355: LD_INT 21
43357: PUSH
43358: LD_INT 22
43360: PUSH
43361: LD_INT 23
43363: PUSH
43364: LD_INT 24
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: ST_TO_ADDR
43373: GO 43522
43375: LD_INT 51
43377: DOUBLE
43378: EQUAL
43379: IFTRUE 43383
43381: GO 43409
43383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
43384: LD_ADDR_VAR 0 3
43388: PUSH
43389: LD_INT 21
43391: PUSH
43392: LD_INT 22
43394: PUSH
43395: LD_INT 23
43397: PUSH
43398: LD_INT 24
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: ST_TO_ADDR
43407: GO 43522
43409: LD_INT 52
43411: DOUBLE
43412: EQUAL
43413: IFTRUE 43417
43415: GO 43443
43417: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
43418: LD_ADDR_VAR 0 3
43422: PUSH
43423: LD_INT 21
43425: PUSH
43426: LD_INT 22
43428: PUSH
43429: LD_INT 23
43431: PUSH
43432: LD_INT 24
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: LIST
43439: LIST
43440: ST_TO_ADDR
43441: GO 43522
43443: LD_INT 53
43445: DOUBLE
43446: EQUAL
43447: IFTRUE 43451
43449: GO 43469
43451: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
43452: LD_ADDR_VAR 0 3
43456: PUSH
43457: LD_INT 23
43459: PUSH
43460: LD_INT 24
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: ST_TO_ADDR
43467: GO 43522
43469: LD_INT 46
43471: DOUBLE
43472: EQUAL
43473: IFTRUE 43477
43475: GO 43495
43477: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
43478: LD_ADDR_VAR 0 3
43482: PUSH
43483: LD_INT 23
43485: PUSH
43486: LD_INT 24
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: ST_TO_ADDR
43493: GO 43522
43495: LD_INT 47
43497: DOUBLE
43498: EQUAL
43499: IFTRUE 43503
43501: GO 43521
43503: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
43504: LD_ADDR_VAR 0 3
43508: PUSH
43509: LD_INT 23
43511: PUSH
43512: LD_INT 24
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: ST_TO_ADDR
43519: GO 43522
43521: POP
// result := ( chassis in result ) ;
43522: LD_ADDR_VAR 0 3
43526: PUSH
43527: LD_VAR 0 1
43531: PUSH
43532: LD_VAR 0 3
43536: IN
43537: ST_TO_ADDR
// end ;
43538: LD_VAR 0 3
43542: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
43543: LD_INT 0
43545: PPUSH
43546: PPUSH
43547: PPUSH
43548: PPUSH
43549: PPUSH
43550: PPUSH
43551: PPUSH
// result := array ;
43552: LD_ADDR_VAR 0 5
43556: PUSH
43557: LD_VAR 0 1
43561: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
43562: LD_VAR 0 1
43566: NOT
43567: PUSH
43568: LD_VAR 0 2
43572: NOT
43573: OR
43574: PUSH
43575: LD_VAR 0 3
43579: NOT
43580: OR
43581: PUSH
43582: LD_VAR 0 2
43586: PUSH
43587: LD_VAR 0 1
43591: GREATER
43592: OR
43593: PUSH
43594: LD_VAR 0 3
43598: PUSH
43599: LD_VAR 0 1
43603: GREATER
43604: OR
43605: IFFALSE 43609
// exit ;
43607: GO 43905
// if direction then
43609: LD_VAR 0 4
43613: IFFALSE 43677
// begin d := 1 ;
43615: LD_ADDR_VAR 0 9
43619: PUSH
43620: LD_INT 1
43622: ST_TO_ADDR
// if i_from > i_to then
43623: LD_VAR 0 2
43627: PUSH
43628: LD_VAR 0 3
43632: GREATER
43633: IFFALSE 43659
// length := ( array - i_from ) + i_to else
43635: LD_ADDR_VAR 0 11
43639: PUSH
43640: LD_VAR 0 1
43644: PUSH
43645: LD_VAR 0 2
43649: MINUS
43650: PUSH
43651: LD_VAR 0 3
43655: PLUS
43656: ST_TO_ADDR
43657: GO 43675
// length := i_to - i_from ;
43659: LD_ADDR_VAR 0 11
43663: PUSH
43664: LD_VAR 0 3
43668: PUSH
43669: LD_VAR 0 2
43673: MINUS
43674: ST_TO_ADDR
// end else
43675: GO 43738
// begin d := - 1 ;
43677: LD_ADDR_VAR 0 9
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: ST_TO_ADDR
// if i_from > i_to then
43686: LD_VAR 0 2
43690: PUSH
43691: LD_VAR 0 3
43695: GREATER
43696: IFFALSE 43716
// length := i_from - i_to else
43698: LD_ADDR_VAR 0 11
43702: PUSH
43703: LD_VAR 0 2
43707: PUSH
43708: LD_VAR 0 3
43712: MINUS
43713: ST_TO_ADDR
43714: GO 43738
// length := ( array - i_to ) + i_from ;
43716: LD_ADDR_VAR 0 11
43720: PUSH
43721: LD_VAR 0 1
43725: PUSH
43726: LD_VAR 0 3
43730: MINUS
43731: PUSH
43732: LD_VAR 0 2
43736: PLUS
43737: ST_TO_ADDR
// end ; if not length then
43738: LD_VAR 0 11
43742: NOT
43743: IFFALSE 43747
// exit ;
43745: GO 43905
// tmp := array ;
43747: LD_ADDR_VAR 0 10
43751: PUSH
43752: LD_VAR 0 1
43756: ST_TO_ADDR
// for i = 1 to length do
43757: LD_ADDR_VAR 0 6
43761: PUSH
43762: DOUBLE
43763: LD_INT 1
43765: DEC
43766: ST_TO_ADDR
43767: LD_VAR 0 11
43771: PUSH
43772: FOR_TO
43773: IFFALSE 43893
// begin for j = 1 to array do
43775: LD_ADDR_VAR 0 7
43779: PUSH
43780: DOUBLE
43781: LD_INT 1
43783: DEC
43784: ST_TO_ADDR
43785: LD_VAR 0 1
43789: PUSH
43790: FOR_TO
43791: IFFALSE 43879
// begin k := j + d ;
43793: LD_ADDR_VAR 0 8
43797: PUSH
43798: LD_VAR 0 7
43802: PUSH
43803: LD_VAR 0 9
43807: PLUS
43808: ST_TO_ADDR
// if k > array then
43809: LD_VAR 0 8
43813: PUSH
43814: LD_VAR 0 1
43818: GREATER
43819: IFFALSE 43829
// k := 1 ;
43821: LD_ADDR_VAR 0 8
43825: PUSH
43826: LD_INT 1
43828: ST_TO_ADDR
// if not k then
43829: LD_VAR 0 8
43833: NOT
43834: IFFALSE 43846
// k := array ;
43836: LD_ADDR_VAR 0 8
43840: PUSH
43841: LD_VAR 0 1
43845: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
43846: LD_ADDR_VAR 0 10
43850: PUSH
43851: LD_VAR 0 10
43855: PPUSH
43856: LD_VAR 0 8
43860: PPUSH
43861: LD_VAR 0 1
43865: PUSH
43866: LD_VAR 0 7
43870: ARRAY
43871: PPUSH
43872: CALL_OW 1
43876: ST_TO_ADDR
// end ;
43877: GO 43790
43879: POP
43880: POP
// array := tmp ;
43881: LD_ADDR_VAR 0 1
43885: PUSH
43886: LD_VAR 0 10
43890: ST_TO_ADDR
// end ;
43891: GO 43772
43893: POP
43894: POP
// result := array ;
43895: LD_ADDR_VAR 0 5
43899: PUSH
43900: LD_VAR 0 1
43904: ST_TO_ADDR
// end ;
43905: LD_VAR 0 5
43909: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
43910: LD_INT 0
43912: PPUSH
43913: PPUSH
// result := 0 ;
43914: LD_ADDR_VAR 0 3
43918: PUSH
43919: LD_INT 0
43921: ST_TO_ADDR
// if not array or not value in array then
43922: LD_VAR 0 1
43926: NOT
43927: PUSH
43928: LD_VAR 0 2
43932: PUSH
43933: LD_VAR 0 1
43937: IN
43938: NOT
43939: OR
43940: IFFALSE 43944
// exit ;
43942: GO 43998
// for i = 1 to array do
43944: LD_ADDR_VAR 0 4
43948: PUSH
43949: DOUBLE
43950: LD_INT 1
43952: DEC
43953: ST_TO_ADDR
43954: LD_VAR 0 1
43958: PUSH
43959: FOR_TO
43960: IFFALSE 43996
// if value = array [ i ] then
43962: LD_VAR 0 2
43966: PUSH
43967: LD_VAR 0 1
43971: PUSH
43972: LD_VAR 0 4
43976: ARRAY
43977: EQUAL
43978: IFFALSE 43994
// begin result := i ;
43980: LD_ADDR_VAR 0 3
43984: PUSH
43985: LD_VAR 0 4
43989: ST_TO_ADDR
// exit ;
43990: POP
43991: POP
43992: GO 43998
// end ;
43994: GO 43959
43996: POP
43997: POP
// end ;
43998: LD_VAR 0 3
44002: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
44003: LD_INT 0
44005: PPUSH
// vc_chassis := chassis ;
44006: LD_ADDR_OWVAR 37
44010: PUSH
44011: LD_VAR 0 1
44015: ST_TO_ADDR
// vc_engine := engine ;
44016: LD_ADDR_OWVAR 39
44020: PUSH
44021: LD_VAR 0 2
44025: ST_TO_ADDR
// vc_control := control ;
44026: LD_ADDR_OWVAR 38
44030: PUSH
44031: LD_VAR 0 3
44035: ST_TO_ADDR
// vc_weapon := weapon ;
44036: LD_ADDR_OWVAR 40
44040: PUSH
44041: LD_VAR 0 4
44045: ST_TO_ADDR
// vc_fuel_battery := fuel ;
44046: LD_ADDR_OWVAR 41
44050: PUSH
44051: LD_VAR 0 5
44055: ST_TO_ADDR
// end ;
44056: LD_VAR 0 6
44060: RET
// export function WantPlant ( unit ) ; var task ; begin
44061: LD_INT 0
44063: PPUSH
44064: PPUSH
// result := false ;
44065: LD_ADDR_VAR 0 2
44069: PUSH
44070: LD_INT 0
44072: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
44073: LD_ADDR_VAR 0 3
44077: PUSH
44078: LD_VAR 0 1
44082: PPUSH
44083: CALL_OW 437
44087: ST_TO_ADDR
// if task then
44088: LD_VAR 0 3
44092: IFFALSE 44120
// if task [ 1 ] [ 1 ] = p then
44094: LD_VAR 0 3
44098: PUSH
44099: LD_INT 1
44101: ARRAY
44102: PUSH
44103: LD_INT 1
44105: ARRAY
44106: PUSH
44107: LD_STRING p
44109: EQUAL
44110: IFFALSE 44120
// result := true ;
44112: LD_ADDR_VAR 0 2
44116: PUSH
44117: LD_INT 1
44119: ST_TO_ADDR
// end ;
44120: LD_VAR 0 2
44124: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
44125: LD_INT 0
44127: PPUSH
44128: PPUSH
44129: PPUSH
44130: PPUSH
// if pos < 1 then
44131: LD_VAR 0 2
44135: PUSH
44136: LD_INT 1
44138: LESS
44139: IFFALSE 44143
// exit ;
44141: GO 44446
// if pos = 1 then
44143: LD_VAR 0 2
44147: PUSH
44148: LD_INT 1
44150: EQUAL
44151: IFFALSE 44184
// result := Replace ( arr , pos [ 1 ] , value ) else
44153: LD_ADDR_VAR 0 4
44157: PUSH
44158: LD_VAR 0 1
44162: PPUSH
44163: LD_VAR 0 2
44167: PUSH
44168: LD_INT 1
44170: ARRAY
44171: PPUSH
44172: LD_VAR 0 3
44176: PPUSH
44177: CALL_OW 1
44181: ST_TO_ADDR
44182: GO 44446
// begin tmp := arr ;
44184: LD_ADDR_VAR 0 6
44188: PUSH
44189: LD_VAR 0 1
44193: ST_TO_ADDR
// s_arr := [ tmp ] ;
44194: LD_ADDR_VAR 0 7
44198: PUSH
44199: LD_VAR 0 6
44203: PUSH
44204: EMPTY
44205: LIST
44206: ST_TO_ADDR
// for i = 1 to pos - 1 do
44207: LD_ADDR_VAR 0 5
44211: PUSH
44212: DOUBLE
44213: LD_INT 1
44215: DEC
44216: ST_TO_ADDR
44217: LD_VAR 0 2
44221: PUSH
44222: LD_INT 1
44224: MINUS
44225: PUSH
44226: FOR_TO
44227: IFFALSE 44272
// begin tmp := tmp [ pos [ i ] ] ;
44229: LD_ADDR_VAR 0 6
44233: PUSH
44234: LD_VAR 0 6
44238: PUSH
44239: LD_VAR 0 2
44243: PUSH
44244: LD_VAR 0 5
44248: ARRAY
44249: ARRAY
44250: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
44251: LD_ADDR_VAR 0 7
44255: PUSH
44256: LD_VAR 0 7
44260: PUSH
44261: LD_VAR 0 6
44265: PUSH
44266: EMPTY
44267: LIST
44268: ADD
44269: ST_TO_ADDR
// end ;
44270: GO 44226
44272: POP
44273: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
44274: LD_ADDR_VAR 0 6
44278: PUSH
44279: LD_VAR 0 6
44283: PPUSH
44284: LD_VAR 0 2
44288: PUSH
44289: LD_VAR 0 2
44293: ARRAY
44294: PPUSH
44295: LD_VAR 0 3
44299: PPUSH
44300: CALL_OW 1
44304: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
44305: LD_ADDR_VAR 0 7
44309: PUSH
44310: LD_VAR 0 7
44314: PPUSH
44315: LD_VAR 0 7
44319: PPUSH
44320: LD_VAR 0 6
44324: PPUSH
44325: CALL_OW 1
44329: ST_TO_ADDR
// for i = s_arr downto 2 do
44330: LD_ADDR_VAR 0 5
44334: PUSH
44335: DOUBLE
44336: LD_VAR 0 7
44340: INC
44341: ST_TO_ADDR
44342: LD_INT 2
44344: PUSH
44345: FOR_DOWNTO
44346: IFFALSE 44430
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
44348: LD_ADDR_VAR 0 6
44352: PUSH
44353: LD_VAR 0 7
44357: PUSH
44358: LD_VAR 0 5
44362: PUSH
44363: LD_INT 1
44365: MINUS
44366: ARRAY
44367: PPUSH
44368: LD_VAR 0 2
44372: PUSH
44373: LD_VAR 0 5
44377: PUSH
44378: LD_INT 1
44380: MINUS
44381: ARRAY
44382: PPUSH
44383: LD_VAR 0 7
44387: PUSH
44388: LD_VAR 0 5
44392: ARRAY
44393: PPUSH
44394: CALL_OW 1
44398: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
44399: LD_ADDR_VAR 0 7
44403: PUSH
44404: LD_VAR 0 7
44408: PPUSH
44409: LD_VAR 0 5
44413: PUSH
44414: LD_INT 1
44416: MINUS
44417: PPUSH
44418: LD_VAR 0 6
44422: PPUSH
44423: CALL_OW 1
44427: ST_TO_ADDR
// end ;
44428: GO 44345
44430: POP
44431: POP
// result := s_arr [ 1 ] ;
44432: LD_ADDR_VAR 0 4
44436: PUSH
44437: LD_VAR 0 7
44441: PUSH
44442: LD_INT 1
44444: ARRAY
44445: ST_TO_ADDR
// end ; end ;
44446: LD_VAR 0 4
44450: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
44451: LD_INT 0
44453: PPUSH
44454: PPUSH
// if not list then
44455: LD_VAR 0 1
44459: NOT
44460: IFFALSE 44464
// exit ;
44462: GO 44555
// i := list [ pos1 ] ;
44464: LD_ADDR_VAR 0 5
44468: PUSH
44469: LD_VAR 0 1
44473: PUSH
44474: LD_VAR 0 2
44478: ARRAY
44479: ST_TO_ADDR
// if not i then
44480: LD_VAR 0 5
44484: NOT
44485: IFFALSE 44489
// exit ;
44487: GO 44555
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
44489: LD_ADDR_VAR 0 1
44493: PUSH
44494: LD_VAR 0 1
44498: PPUSH
44499: LD_VAR 0 2
44503: PPUSH
44504: LD_VAR 0 1
44508: PUSH
44509: LD_VAR 0 3
44513: ARRAY
44514: PPUSH
44515: CALL_OW 1
44519: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
44520: LD_ADDR_VAR 0 1
44524: PUSH
44525: LD_VAR 0 1
44529: PPUSH
44530: LD_VAR 0 3
44534: PPUSH
44535: LD_VAR 0 5
44539: PPUSH
44540: CALL_OW 1
44544: ST_TO_ADDR
// result := list ;
44545: LD_ADDR_VAR 0 4
44549: PUSH
44550: LD_VAR 0 1
44554: ST_TO_ADDR
// end ;
44555: LD_VAR 0 4
44559: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
44560: LD_INT 0
44562: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
44563: LD_ADDR_VAR 0 5
44567: PUSH
44568: LD_VAR 0 1
44572: PPUSH
44573: CALL_OW 250
44577: PPUSH
44578: LD_VAR 0 1
44582: PPUSH
44583: CALL_OW 251
44587: PPUSH
44588: LD_VAR 0 2
44592: PPUSH
44593: LD_VAR 0 3
44597: PPUSH
44598: LD_VAR 0 4
44602: PPUSH
44603: CALL 44613 0 5
44607: ST_TO_ADDR
// end ;
44608: LD_VAR 0 5
44612: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
44613: LD_INT 0
44615: PPUSH
44616: PPUSH
44617: PPUSH
44618: PPUSH
// if not list then
44619: LD_VAR 0 3
44623: NOT
44624: IFFALSE 44628
// exit ;
44626: GO 45016
// result := [ ] ;
44628: LD_ADDR_VAR 0 6
44632: PUSH
44633: EMPTY
44634: ST_TO_ADDR
// for i in list do
44635: LD_ADDR_VAR 0 7
44639: PUSH
44640: LD_VAR 0 3
44644: PUSH
44645: FOR_IN
44646: IFFALSE 44848
// begin tmp := GetDistUnitXY ( i , x , y ) ;
44648: LD_ADDR_VAR 0 9
44652: PUSH
44653: LD_VAR 0 7
44657: PPUSH
44658: LD_VAR 0 1
44662: PPUSH
44663: LD_VAR 0 2
44667: PPUSH
44668: CALL_OW 297
44672: ST_TO_ADDR
// if not result then
44673: LD_VAR 0 6
44677: NOT
44678: IFFALSE 44704
// result := [ [ i , tmp ] ] else
44680: LD_ADDR_VAR 0 6
44684: PUSH
44685: LD_VAR 0 7
44689: PUSH
44690: LD_VAR 0 9
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: EMPTY
44700: LIST
44701: ST_TO_ADDR
44702: GO 44846
// begin if result [ result ] [ 2 ] < tmp then
44704: LD_VAR 0 6
44708: PUSH
44709: LD_VAR 0 6
44713: ARRAY
44714: PUSH
44715: LD_INT 2
44717: ARRAY
44718: PUSH
44719: LD_VAR 0 9
44723: LESS
44724: IFFALSE 44766
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
44726: LD_ADDR_VAR 0 6
44730: PUSH
44731: LD_VAR 0 6
44735: PPUSH
44736: LD_VAR 0 6
44740: PUSH
44741: LD_INT 1
44743: PLUS
44744: PPUSH
44745: LD_VAR 0 7
44749: PUSH
44750: LD_VAR 0 9
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PPUSH
44759: CALL_OW 2
44763: ST_TO_ADDR
44764: GO 44846
// for j = 1 to result do
44766: LD_ADDR_VAR 0 8
44770: PUSH
44771: DOUBLE
44772: LD_INT 1
44774: DEC
44775: ST_TO_ADDR
44776: LD_VAR 0 6
44780: PUSH
44781: FOR_TO
44782: IFFALSE 44844
// begin if tmp < result [ j ] [ 2 ] then
44784: LD_VAR 0 9
44788: PUSH
44789: LD_VAR 0 6
44793: PUSH
44794: LD_VAR 0 8
44798: ARRAY
44799: PUSH
44800: LD_INT 2
44802: ARRAY
44803: LESS
44804: IFFALSE 44842
// begin result := Insert ( result , j , [ i , tmp ] ) ;
44806: LD_ADDR_VAR 0 6
44810: PUSH
44811: LD_VAR 0 6
44815: PPUSH
44816: LD_VAR 0 8
44820: PPUSH
44821: LD_VAR 0 7
44825: PUSH
44826: LD_VAR 0 9
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PPUSH
44835: CALL_OW 2
44839: ST_TO_ADDR
// break ;
44840: GO 44844
// end ; end ;
44842: GO 44781
44844: POP
44845: POP
// end ; end ;
44846: GO 44645
44848: POP
44849: POP
// if result and not asc then
44850: LD_VAR 0 6
44854: PUSH
44855: LD_VAR 0 4
44859: NOT
44860: AND
44861: IFFALSE 44936
// begin tmp := result ;
44863: LD_ADDR_VAR 0 9
44867: PUSH
44868: LD_VAR 0 6
44872: ST_TO_ADDR
// for i = tmp downto 1 do
44873: LD_ADDR_VAR 0 7
44877: PUSH
44878: DOUBLE
44879: LD_VAR 0 9
44883: INC
44884: ST_TO_ADDR
44885: LD_INT 1
44887: PUSH
44888: FOR_DOWNTO
44889: IFFALSE 44934
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
44891: LD_ADDR_VAR 0 6
44895: PUSH
44896: LD_VAR 0 6
44900: PPUSH
44901: LD_VAR 0 9
44905: PUSH
44906: LD_VAR 0 7
44910: MINUS
44911: PUSH
44912: LD_INT 1
44914: PLUS
44915: PPUSH
44916: LD_VAR 0 9
44920: PUSH
44921: LD_VAR 0 7
44925: ARRAY
44926: PPUSH
44927: CALL_OW 1
44931: ST_TO_ADDR
44932: GO 44888
44934: POP
44935: POP
// end ; tmp := [ ] ;
44936: LD_ADDR_VAR 0 9
44940: PUSH
44941: EMPTY
44942: ST_TO_ADDR
// if mode then
44943: LD_VAR 0 5
44947: IFFALSE 45016
// begin for i = 1 to result do
44949: LD_ADDR_VAR 0 7
44953: PUSH
44954: DOUBLE
44955: LD_INT 1
44957: DEC
44958: ST_TO_ADDR
44959: LD_VAR 0 6
44963: PUSH
44964: FOR_TO
44965: IFFALSE 45004
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
44967: LD_ADDR_VAR 0 9
44971: PUSH
44972: LD_VAR 0 9
44976: PPUSH
44977: LD_VAR 0 7
44981: PPUSH
44982: LD_VAR 0 6
44986: PUSH
44987: LD_VAR 0 7
44991: ARRAY
44992: PUSH
44993: LD_INT 1
44995: ARRAY
44996: PPUSH
44997: CALL_OW 1
45001: ST_TO_ADDR
45002: GO 44964
45004: POP
45005: POP
// result := tmp ;
45006: LD_ADDR_VAR 0 6
45010: PUSH
45011: LD_VAR 0 9
45015: ST_TO_ADDR
// end ; end ;
45016: LD_VAR 0 6
45020: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
45021: LD_INT 0
45023: PPUSH
45024: PPUSH
45025: PPUSH
45026: PPUSH
45027: PPUSH
45028: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
45029: LD_ADDR_VAR 0 5
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: LD_INT 0
45039: PUSH
45040: LD_INT 0
45042: PUSH
45043: EMPTY
45044: PUSH
45045: EMPTY
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: ST_TO_ADDR
// if not x or not y then
45051: LD_VAR 0 2
45055: NOT
45056: PUSH
45057: LD_VAR 0 3
45061: NOT
45062: OR
45063: IFFALSE 45067
// exit ;
45065: GO 46717
// if not range then
45067: LD_VAR 0 4
45071: NOT
45072: IFFALSE 45082
// range := 10 ;
45074: LD_ADDR_VAR 0 4
45078: PUSH
45079: LD_INT 10
45081: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
45082: LD_ADDR_VAR 0 8
45086: PUSH
45087: LD_INT 81
45089: PUSH
45090: LD_VAR 0 1
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 92
45101: PUSH
45102: LD_VAR 0 2
45106: PUSH
45107: LD_VAR 0 3
45111: PUSH
45112: LD_VAR 0 4
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 3
45125: PUSH
45126: LD_INT 21
45128: PUSH
45129: LD_INT 3
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: LIST
45144: PPUSH
45145: CALL_OW 69
45149: ST_TO_ADDR
// if not tmp then
45150: LD_VAR 0 8
45154: NOT
45155: IFFALSE 45159
// exit ;
45157: GO 46717
// for i in tmp do
45159: LD_ADDR_VAR 0 6
45163: PUSH
45164: LD_VAR 0 8
45168: PUSH
45169: FOR_IN
45170: IFFALSE 46692
// begin points := [ 0 , 0 , 0 ] ;
45172: LD_ADDR_VAR 0 9
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: LIST
45190: ST_TO_ADDR
// bpoints := 1 ;
45191: LD_ADDR_VAR 0 10
45195: PUSH
45196: LD_INT 1
45198: ST_TO_ADDR
// case GetType ( i ) of unit_human :
45199: LD_VAR 0 6
45203: PPUSH
45204: CALL_OW 247
45208: PUSH
45209: LD_INT 1
45211: DOUBLE
45212: EQUAL
45213: IFTRUE 45217
45215: GO 45795
45217: POP
// begin if GetClass ( i ) = 1 then
45218: LD_VAR 0 6
45222: PPUSH
45223: CALL_OW 257
45227: PUSH
45228: LD_INT 1
45230: EQUAL
45231: IFFALSE 45252
// points := [ 10 , 5 , 3 ] ;
45233: LD_ADDR_VAR 0 9
45237: PUSH
45238: LD_INT 10
45240: PUSH
45241: LD_INT 5
45243: PUSH
45244: LD_INT 3
45246: PUSH
45247: EMPTY
45248: LIST
45249: LIST
45250: LIST
45251: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
45252: LD_VAR 0 6
45256: PPUSH
45257: CALL_OW 257
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: LD_INT 3
45267: PUSH
45268: LD_INT 4
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: LIST
45275: IN
45276: IFFALSE 45297
// points := [ 3 , 2 , 1 ] ;
45278: LD_ADDR_VAR 0 9
45282: PUSH
45283: LD_INT 3
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: LIST
45296: ST_TO_ADDR
// if GetClass ( i ) = 5 then
45297: LD_VAR 0 6
45301: PPUSH
45302: CALL_OW 257
45306: PUSH
45307: LD_INT 5
45309: EQUAL
45310: IFFALSE 45331
// points := [ 130 , 5 , 2 ] ;
45312: LD_ADDR_VAR 0 9
45316: PUSH
45317: LD_INT 130
45319: PUSH
45320: LD_INT 5
45322: PUSH
45323: LD_INT 2
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: LIST
45330: ST_TO_ADDR
// if GetClass ( i ) = 8 then
45331: LD_VAR 0 6
45335: PPUSH
45336: CALL_OW 257
45340: PUSH
45341: LD_INT 8
45343: EQUAL
45344: IFFALSE 45365
// points := [ 35 , 35 , 30 ] ;
45346: LD_ADDR_VAR 0 9
45350: PUSH
45351: LD_INT 35
45353: PUSH
45354: LD_INT 35
45356: PUSH
45357: LD_INT 30
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: LIST
45364: ST_TO_ADDR
// if GetClass ( i ) = 9 then
45365: LD_VAR 0 6
45369: PPUSH
45370: CALL_OW 257
45374: PUSH
45375: LD_INT 9
45377: EQUAL
45378: IFFALSE 45399
// points := [ 20 , 55 , 40 ] ;
45380: LD_ADDR_VAR 0 9
45384: PUSH
45385: LD_INT 20
45387: PUSH
45388: LD_INT 55
45390: PUSH
45391: LD_INT 40
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: LIST
45398: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
45399: LD_VAR 0 6
45403: PPUSH
45404: CALL_OW 257
45408: PUSH
45409: LD_INT 12
45411: PUSH
45412: LD_INT 16
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: IN
45419: IFFALSE 45440
// points := [ 5 , 3 , 2 ] ;
45421: LD_ADDR_VAR 0 9
45425: PUSH
45426: LD_INT 5
45428: PUSH
45429: LD_INT 3
45431: PUSH
45432: LD_INT 2
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: LIST
45439: ST_TO_ADDR
// if GetClass ( i ) = 17 then
45440: LD_VAR 0 6
45444: PPUSH
45445: CALL_OW 257
45449: PUSH
45450: LD_INT 17
45452: EQUAL
45453: IFFALSE 45474
// points := [ 100 , 50 , 75 ] ;
45455: LD_ADDR_VAR 0 9
45459: PUSH
45460: LD_INT 100
45462: PUSH
45463: LD_INT 50
45465: PUSH
45466: LD_INT 75
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: LIST
45473: ST_TO_ADDR
// if GetClass ( i ) = 15 then
45474: LD_VAR 0 6
45478: PPUSH
45479: CALL_OW 257
45483: PUSH
45484: LD_INT 15
45486: EQUAL
45487: IFFALSE 45508
// points := [ 10 , 5 , 3 ] ;
45489: LD_ADDR_VAR 0 9
45493: PUSH
45494: LD_INT 10
45496: PUSH
45497: LD_INT 5
45499: PUSH
45500: LD_INT 3
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: LIST
45507: ST_TO_ADDR
// if GetClass ( i ) = 14 then
45508: LD_VAR 0 6
45512: PPUSH
45513: CALL_OW 257
45517: PUSH
45518: LD_INT 14
45520: EQUAL
45521: IFFALSE 45542
// points := [ 10 , 0 , 0 ] ;
45523: LD_ADDR_VAR 0 9
45527: PUSH
45528: LD_INT 10
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: LD_INT 0
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: ST_TO_ADDR
// if GetClass ( i ) = 11 then
45542: LD_VAR 0 6
45546: PPUSH
45547: CALL_OW 257
45551: PUSH
45552: LD_INT 11
45554: EQUAL
45555: IFFALSE 45576
// points := [ 30 , 10 , 5 ] ;
45557: LD_ADDR_VAR 0 9
45561: PUSH
45562: LD_INT 30
45564: PUSH
45565: LD_INT 10
45567: PUSH
45568: LD_INT 5
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: LIST
45575: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
45576: LD_VAR 0 1
45580: PPUSH
45581: LD_INT 5
45583: PPUSH
45584: CALL_OW 321
45588: PUSH
45589: LD_INT 2
45591: EQUAL
45592: IFFALSE 45609
// bpoints := bpoints * 1.8 ;
45594: LD_ADDR_VAR 0 10
45598: PUSH
45599: LD_VAR 0 10
45603: PUSH
45604: LD_REAL  1.80000000000000E+0000
45607: MUL
45608: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
45609: LD_VAR 0 6
45613: PPUSH
45614: CALL_OW 257
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: LD_INT 3
45627: PUSH
45628: LD_INT 4
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: LIST
45635: LIST
45636: IN
45637: PUSH
45638: LD_VAR 0 1
45642: PPUSH
45643: LD_INT 51
45645: PPUSH
45646: CALL_OW 321
45650: PUSH
45651: LD_INT 2
45653: EQUAL
45654: AND
45655: IFFALSE 45672
// bpoints := bpoints * 1.2 ;
45657: LD_ADDR_VAR 0 10
45661: PUSH
45662: LD_VAR 0 10
45666: PUSH
45667: LD_REAL  1.20000000000000E+0000
45670: MUL
45671: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
45672: LD_VAR 0 6
45676: PPUSH
45677: CALL_OW 257
45681: PUSH
45682: LD_INT 5
45684: PUSH
45685: LD_INT 7
45687: PUSH
45688: LD_INT 9
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: LIST
45695: IN
45696: PUSH
45697: LD_VAR 0 1
45701: PPUSH
45702: LD_INT 52
45704: PPUSH
45705: CALL_OW 321
45709: PUSH
45710: LD_INT 2
45712: EQUAL
45713: AND
45714: IFFALSE 45731
// bpoints := bpoints * 1.5 ;
45716: LD_ADDR_VAR 0 10
45720: PUSH
45721: LD_VAR 0 10
45725: PUSH
45726: LD_REAL  1.50000000000000E+0000
45729: MUL
45730: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
45731: LD_VAR 0 1
45735: PPUSH
45736: LD_INT 66
45738: PPUSH
45739: CALL_OW 321
45743: PUSH
45744: LD_INT 2
45746: EQUAL
45747: IFFALSE 45764
// bpoints := bpoints * 1.1 ;
45749: LD_ADDR_VAR 0 10
45753: PUSH
45754: LD_VAR 0 10
45758: PUSH
45759: LD_REAL  1.10000000000000E+0000
45762: MUL
45763: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
45764: LD_ADDR_VAR 0 10
45768: PUSH
45769: LD_VAR 0 10
45773: PUSH
45774: LD_VAR 0 6
45778: PPUSH
45779: LD_INT 1
45781: PPUSH
45782: CALL_OW 259
45786: PUSH
45787: LD_REAL  1.15000000000000E+0000
45790: MUL
45791: MUL
45792: ST_TO_ADDR
// end ; unit_vehicle :
45793: GO 46621
45795: LD_INT 2
45797: DOUBLE
45798: EQUAL
45799: IFTRUE 45803
45801: GO 46609
45803: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
45804: LD_VAR 0 6
45808: PPUSH
45809: CALL_OW 264
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 42
45819: PUSH
45820: LD_INT 24
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: LIST
45827: IN
45828: IFFALSE 45849
// points := [ 25 , 5 , 3 ] ;
45830: LD_ADDR_VAR 0 9
45834: PUSH
45835: LD_INT 25
45837: PUSH
45838: LD_INT 5
45840: PUSH
45841: LD_INT 3
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: LIST
45848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
45849: LD_VAR 0 6
45853: PPUSH
45854: CALL_OW 264
45858: PUSH
45859: LD_INT 4
45861: PUSH
45862: LD_INT 43
45864: PUSH
45865: LD_INT 25
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: LIST
45872: IN
45873: IFFALSE 45894
// points := [ 40 , 15 , 5 ] ;
45875: LD_ADDR_VAR 0 9
45879: PUSH
45880: LD_INT 40
45882: PUSH
45883: LD_INT 15
45885: PUSH
45886: LD_INT 5
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: LIST
45893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
45894: LD_VAR 0 6
45898: PPUSH
45899: CALL_OW 264
45903: PUSH
45904: LD_INT 3
45906: PUSH
45907: LD_INT 23
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: IN
45914: IFFALSE 45935
// points := [ 7 , 25 , 8 ] ;
45916: LD_ADDR_VAR 0 9
45920: PUSH
45921: LD_INT 7
45923: PUSH
45924: LD_INT 25
45926: PUSH
45927: LD_INT 8
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: LIST
45934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
45935: LD_VAR 0 6
45939: PPUSH
45940: CALL_OW 264
45944: PUSH
45945: LD_INT 5
45947: PUSH
45948: LD_INT 27
45950: PUSH
45951: LD_INT 44
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: LIST
45958: IN
45959: IFFALSE 45980
// points := [ 14 , 50 , 16 ] ;
45961: LD_ADDR_VAR 0 9
45965: PUSH
45966: LD_INT 14
45968: PUSH
45969: LD_INT 50
45971: PUSH
45972: LD_INT 16
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: LIST
45979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
45980: LD_VAR 0 6
45984: PPUSH
45985: CALL_OW 264
45989: PUSH
45990: LD_INT 6
45992: PUSH
45993: LD_INT 46
45995: PUSH
45996: EMPTY
45997: LIST
45998: LIST
45999: IN
46000: IFFALSE 46021
// points := [ 32 , 120 , 70 ] ;
46002: LD_ADDR_VAR 0 9
46006: PUSH
46007: LD_INT 32
46009: PUSH
46010: LD_INT 120
46012: PUSH
46013: LD_INT 70
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: LIST
46020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
46021: LD_VAR 0 6
46025: PPUSH
46026: CALL_OW 264
46030: PUSH
46031: LD_INT 7
46033: PUSH
46034: LD_INT 28
46036: PUSH
46037: LD_INT 45
46039: PUSH
46040: LD_INT 92
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: IN
46049: IFFALSE 46070
// points := [ 35 , 20 , 45 ] ;
46051: LD_ADDR_VAR 0 9
46055: PUSH
46056: LD_INT 35
46058: PUSH
46059: LD_INT 20
46061: PUSH
46062: LD_INT 45
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: LIST
46069: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
46070: LD_VAR 0 6
46074: PPUSH
46075: CALL_OW 264
46079: PUSH
46080: LD_INT 47
46082: PUSH
46083: EMPTY
46084: LIST
46085: IN
46086: IFFALSE 46107
// points := [ 67 , 45 , 75 ] ;
46088: LD_ADDR_VAR 0 9
46092: PUSH
46093: LD_INT 67
46095: PUSH
46096: LD_INT 45
46098: PUSH
46099: LD_INT 75
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: LIST
46106: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
46107: LD_VAR 0 6
46111: PPUSH
46112: CALL_OW 264
46116: PUSH
46117: LD_INT 26
46119: PUSH
46120: EMPTY
46121: LIST
46122: IN
46123: IFFALSE 46144
// points := [ 120 , 30 , 80 ] ;
46125: LD_ADDR_VAR 0 9
46129: PUSH
46130: LD_INT 120
46132: PUSH
46133: LD_INT 30
46135: PUSH
46136: LD_INT 80
46138: PUSH
46139: EMPTY
46140: LIST
46141: LIST
46142: LIST
46143: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
46144: LD_VAR 0 6
46148: PPUSH
46149: CALL_OW 264
46153: PUSH
46154: LD_INT 22
46156: PUSH
46157: EMPTY
46158: LIST
46159: IN
46160: IFFALSE 46181
// points := [ 40 , 1 , 1 ] ;
46162: LD_ADDR_VAR 0 9
46166: PUSH
46167: LD_INT 40
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 1
46175: PUSH
46176: EMPTY
46177: LIST
46178: LIST
46179: LIST
46180: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
46181: LD_VAR 0 6
46185: PPUSH
46186: CALL_OW 264
46190: PUSH
46191: LD_INT 29
46193: PUSH
46194: EMPTY
46195: LIST
46196: IN
46197: IFFALSE 46218
// points := [ 70 , 200 , 400 ] ;
46199: LD_ADDR_VAR 0 9
46203: PUSH
46204: LD_INT 70
46206: PUSH
46207: LD_INT 200
46209: PUSH
46210: LD_INT 400
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: LIST
46217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
46218: LD_VAR 0 6
46222: PPUSH
46223: CALL_OW 264
46227: PUSH
46228: LD_INT 14
46230: PUSH
46231: LD_INT 53
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: IN
46238: IFFALSE 46259
// points := [ 40 , 10 , 20 ] ;
46240: LD_ADDR_VAR 0 9
46244: PUSH
46245: LD_INT 40
46247: PUSH
46248: LD_INT 10
46250: PUSH
46251: LD_INT 20
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: LIST
46258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
46259: LD_VAR 0 6
46263: PPUSH
46264: CALL_OW 264
46268: PUSH
46269: LD_INT 9
46271: PUSH
46272: EMPTY
46273: LIST
46274: IN
46275: IFFALSE 46296
// points := [ 5 , 70 , 20 ] ;
46277: LD_ADDR_VAR 0 9
46281: PUSH
46282: LD_INT 5
46284: PUSH
46285: LD_INT 70
46287: PUSH
46288: LD_INT 20
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: LIST
46295: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
46296: LD_VAR 0 6
46300: PPUSH
46301: CALL_OW 264
46305: PUSH
46306: LD_INT 10
46308: PUSH
46309: EMPTY
46310: LIST
46311: IN
46312: IFFALSE 46333
// points := [ 35 , 110 , 70 ] ;
46314: LD_ADDR_VAR 0 9
46318: PUSH
46319: LD_INT 35
46321: PUSH
46322: LD_INT 110
46324: PUSH
46325: LD_INT 70
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
46333: LD_VAR 0 6
46337: PPUSH
46338: CALL_OW 265
46342: PUSH
46343: LD_INT 25
46345: EQUAL
46346: IFFALSE 46367
// points := [ 80 , 65 , 100 ] ;
46348: LD_ADDR_VAR 0 9
46352: PUSH
46353: LD_INT 80
46355: PUSH
46356: LD_INT 65
46358: PUSH
46359: LD_INT 100
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: LIST
46366: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
46367: LD_VAR 0 6
46371: PPUSH
46372: CALL_OW 263
46376: PUSH
46377: LD_INT 1
46379: EQUAL
46380: IFFALSE 46415
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
46382: LD_ADDR_VAR 0 10
46386: PUSH
46387: LD_VAR 0 10
46391: PUSH
46392: LD_VAR 0 6
46396: PPUSH
46397: CALL_OW 311
46401: PPUSH
46402: LD_INT 3
46404: PPUSH
46405: CALL_OW 259
46409: PUSH
46410: LD_INT 4
46412: MUL
46413: MUL
46414: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
46415: LD_VAR 0 6
46419: PPUSH
46420: CALL_OW 263
46424: PUSH
46425: LD_INT 2
46427: EQUAL
46428: IFFALSE 46479
// begin j := IsControledBy ( i ) ;
46430: LD_ADDR_VAR 0 7
46434: PUSH
46435: LD_VAR 0 6
46439: PPUSH
46440: CALL_OW 312
46444: ST_TO_ADDR
// if j then
46445: LD_VAR 0 7
46449: IFFALSE 46479
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
46451: LD_ADDR_VAR 0 10
46455: PUSH
46456: LD_VAR 0 10
46460: PUSH
46461: LD_VAR 0 7
46465: PPUSH
46466: LD_INT 3
46468: PPUSH
46469: CALL_OW 259
46473: PUSH
46474: LD_INT 3
46476: MUL
46477: MUL
46478: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
46479: LD_VAR 0 6
46483: PPUSH
46484: CALL_OW 264
46488: PUSH
46489: LD_INT 5
46491: PUSH
46492: LD_INT 6
46494: PUSH
46495: LD_INT 46
46497: PUSH
46498: LD_INT 44
46500: PUSH
46501: LD_INT 47
46503: PUSH
46504: LD_INT 45
46506: PUSH
46507: LD_INT 28
46509: PUSH
46510: LD_INT 7
46512: PUSH
46513: LD_INT 27
46515: PUSH
46516: LD_INT 29
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: IN
46531: PUSH
46532: LD_VAR 0 1
46536: PPUSH
46537: LD_INT 52
46539: PPUSH
46540: CALL_OW 321
46544: PUSH
46545: LD_INT 2
46547: EQUAL
46548: AND
46549: IFFALSE 46566
// bpoints := bpoints * 1.2 ;
46551: LD_ADDR_VAR 0 10
46555: PUSH
46556: LD_VAR 0 10
46560: PUSH
46561: LD_REAL  1.20000000000000E+0000
46564: MUL
46565: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
46566: LD_VAR 0 6
46570: PPUSH
46571: CALL_OW 264
46575: PUSH
46576: LD_INT 6
46578: PUSH
46579: LD_INT 46
46581: PUSH
46582: LD_INT 47
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: LIST
46589: IN
46590: IFFALSE 46607
// bpoints := bpoints * 1.2 ;
46592: LD_ADDR_VAR 0 10
46596: PUSH
46597: LD_VAR 0 10
46601: PUSH
46602: LD_REAL  1.20000000000000E+0000
46605: MUL
46606: ST_TO_ADDR
// end ; unit_building :
46607: GO 46621
46609: LD_INT 3
46611: DOUBLE
46612: EQUAL
46613: IFTRUE 46617
46615: GO 46620
46617: POP
// ; end ;
46618: GO 46621
46620: POP
// for j = 1 to 3 do
46621: LD_ADDR_VAR 0 7
46625: PUSH
46626: DOUBLE
46627: LD_INT 1
46629: DEC
46630: ST_TO_ADDR
46631: LD_INT 3
46633: PUSH
46634: FOR_TO
46635: IFFALSE 46688
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
46637: LD_ADDR_VAR 0 5
46641: PUSH
46642: LD_VAR 0 5
46646: PPUSH
46647: LD_VAR 0 7
46651: PPUSH
46652: LD_VAR 0 5
46656: PUSH
46657: LD_VAR 0 7
46661: ARRAY
46662: PUSH
46663: LD_VAR 0 9
46667: PUSH
46668: LD_VAR 0 7
46672: ARRAY
46673: PUSH
46674: LD_VAR 0 10
46678: MUL
46679: PLUS
46680: PPUSH
46681: CALL_OW 1
46685: ST_TO_ADDR
46686: GO 46634
46688: POP
46689: POP
// end ;
46690: GO 45169
46692: POP
46693: POP
// result := Replace ( result , 4 , tmp ) ;
46694: LD_ADDR_VAR 0 5
46698: PUSH
46699: LD_VAR 0 5
46703: PPUSH
46704: LD_INT 4
46706: PPUSH
46707: LD_VAR 0 8
46711: PPUSH
46712: CALL_OW 1
46716: ST_TO_ADDR
// end ;
46717: LD_VAR 0 5
46721: RET
// export function DangerAtRange ( unit , range ) ; begin
46722: LD_INT 0
46724: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
46725: LD_ADDR_VAR 0 3
46729: PUSH
46730: LD_VAR 0 1
46734: PPUSH
46735: CALL_OW 255
46739: PPUSH
46740: LD_VAR 0 1
46744: PPUSH
46745: CALL_OW 250
46749: PPUSH
46750: LD_VAR 0 1
46754: PPUSH
46755: CALL_OW 251
46759: PPUSH
46760: LD_VAR 0 2
46764: PPUSH
46765: CALL 45021 0 4
46769: ST_TO_ADDR
// end ;
46770: LD_VAR 0 3
46774: RET
// export function DangerInArea ( side , area ) ; begin
46775: LD_INT 0
46777: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
46778: LD_ADDR_VAR 0 3
46782: PUSH
46783: LD_VAR 0 2
46787: PPUSH
46788: LD_INT 81
46790: PUSH
46791: LD_VAR 0 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PPUSH
46800: CALL_OW 70
46804: ST_TO_ADDR
// end ;
46805: LD_VAR 0 3
46809: RET
// export function IsExtension ( b ) ; begin
46810: LD_INT 0
46812: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
46813: LD_ADDR_VAR 0 2
46817: PUSH
46818: LD_VAR 0 1
46822: PUSH
46823: LD_INT 23
46825: PUSH
46826: LD_INT 20
46828: PUSH
46829: LD_INT 22
46831: PUSH
46832: LD_INT 17
46834: PUSH
46835: LD_INT 24
46837: PUSH
46838: LD_INT 21
46840: PUSH
46841: LD_INT 19
46843: PUSH
46844: LD_INT 16
46846: PUSH
46847: LD_INT 25
46849: PUSH
46850: LD_INT 18
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: LIST
46860: LIST
46861: LIST
46862: LIST
46863: LIST
46864: IN
46865: ST_TO_ADDR
// end ;
46866: LD_VAR 0 2
46870: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
46871: LD_INT 0
46873: PPUSH
46874: PPUSH
46875: PPUSH
// result := [ ] ;
46876: LD_ADDR_VAR 0 4
46880: PUSH
46881: EMPTY
46882: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
46883: LD_ADDR_VAR 0 5
46887: PUSH
46888: LD_VAR 0 2
46892: PPUSH
46893: LD_INT 21
46895: PUSH
46896: LD_INT 3
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PPUSH
46903: CALL_OW 70
46907: ST_TO_ADDR
// if not tmp then
46908: LD_VAR 0 5
46912: NOT
46913: IFFALSE 46917
// exit ;
46915: GO 46981
// if checkLink then
46917: LD_VAR 0 3
46921: IFFALSE 46971
// begin for i in tmp do
46923: LD_ADDR_VAR 0 6
46927: PUSH
46928: LD_VAR 0 5
46932: PUSH
46933: FOR_IN
46934: IFFALSE 46969
// if GetBase ( i ) <> base then
46936: LD_VAR 0 6
46940: PPUSH
46941: CALL_OW 274
46945: PUSH
46946: LD_VAR 0 1
46950: NONEQUAL
46951: IFFALSE 46967
// ComLinkToBase ( base , i ) ;
46953: LD_VAR 0 1
46957: PPUSH
46958: LD_VAR 0 6
46962: PPUSH
46963: CALL_OW 169
46967: GO 46933
46969: POP
46970: POP
// end ; result := tmp ;
46971: LD_ADDR_VAR 0 4
46975: PUSH
46976: LD_VAR 0 5
46980: ST_TO_ADDR
// end ;
46981: LD_VAR 0 4
46985: RET
// export function ComComplete ( units , b ) ; var i ; begin
46986: LD_INT 0
46988: PPUSH
46989: PPUSH
// if not units then
46990: LD_VAR 0 1
46994: NOT
46995: IFFALSE 46999
// exit ;
46997: GO 47089
// for i in units do
46999: LD_ADDR_VAR 0 4
47003: PUSH
47004: LD_VAR 0 1
47008: PUSH
47009: FOR_IN
47010: IFFALSE 47087
// if BuildingStatus ( b ) = bs_build then
47012: LD_VAR 0 2
47016: PPUSH
47017: CALL_OW 461
47021: PUSH
47022: LD_INT 1
47024: EQUAL
47025: IFFALSE 47085
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
47027: LD_VAR 0 4
47031: PPUSH
47032: LD_STRING h
47034: PUSH
47035: LD_VAR 0 2
47039: PPUSH
47040: CALL_OW 250
47044: PUSH
47045: LD_VAR 0 2
47049: PPUSH
47050: CALL_OW 251
47054: PUSH
47055: LD_VAR 0 2
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: LIST
47077: PUSH
47078: EMPTY
47079: LIST
47080: PPUSH
47081: CALL_OW 446
47085: GO 47009
47087: POP
47088: POP
// end ;
47089: LD_VAR 0 3
47093: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
47094: LD_INT 0
47096: PPUSH
47097: PPUSH
47098: PPUSH
47099: PPUSH
47100: PPUSH
47101: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
47102: LD_VAR 0 1
47106: NOT
47107: PUSH
47108: LD_VAR 0 1
47112: PPUSH
47113: CALL_OW 263
47117: PUSH
47118: LD_INT 2
47120: NONEQUAL
47121: OR
47122: IFFALSE 47126
// exit ;
47124: GO 47442
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
47126: LD_ADDR_VAR 0 6
47130: PUSH
47131: LD_INT 22
47133: PUSH
47134: LD_VAR 0 1
47138: PPUSH
47139: CALL_OW 255
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 2
47150: PUSH
47151: LD_INT 30
47153: PUSH
47154: LD_INT 36
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 34
47163: PUSH
47164: LD_INT 31
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: LIST
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PPUSH
47180: CALL_OW 69
47184: ST_TO_ADDR
// if not tmp then
47185: LD_VAR 0 6
47189: NOT
47190: IFFALSE 47194
// exit ;
47192: GO 47442
// result := [ ] ;
47194: LD_ADDR_VAR 0 2
47198: PUSH
47199: EMPTY
47200: ST_TO_ADDR
// for i in tmp do
47201: LD_ADDR_VAR 0 3
47205: PUSH
47206: LD_VAR 0 6
47210: PUSH
47211: FOR_IN
47212: IFFALSE 47283
// begin t := UnitsInside ( i ) ;
47214: LD_ADDR_VAR 0 4
47218: PUSH
47219: LD_VAR 0 3
47223: PPUSH
47224: CALL_OW 313
47228: ST_TO_ADDR
// if t then
47229: LD_VAR 0 4
47233: IFFALSE 47281
// for j in t do
47235: LD_ADDR_VAR 0 7
47239: PUSH
47240: LD_VAR 0 4
47244: PUSH
47245: FOR_IN
47246: IFFALSE 47279
// result := Replace ( result , result + 1 , j ) ;
47248: LD_ADDR_VAR 0 2
47252: PUSH
47253: LD_VAR 0 2
47257: PPUSH
47258: LD_VAR 0 2
47262: PUSH
47263: LD_INT 1
47265: PLUS
47266: PPUSH
47267: LD_VAR 0 7
47271: PPUSH
47272: CALL_OW 1
47276: ST_TO_ADDR
47277: GO 47245
47279: POP
47280: POP
// end ;
47281: GO 47211
47283: POP
47284: POP
// if not result then
47285: LD_VAR 0 2
47289: NOT
47290: IFFALSE 47294
// exit ;
47292: GO 47442
// mech := result [ 1 ] ;
47294: LD_ADDR_VAR 0 5
47298: PUSH
47299: LD_VAR 0 2
47303: PUSH
47304: LD_INT 1
47306: ARRAY
47307: ST_TO_ADDR
// if result > 1 then
47308: LD_VAR 0 2
47312: PUSH
47313: LD_INT 1
47315: GREATER
47316: IFFALSE 47428
// begin for i = 2 to result do
47318: LD_ADDR_VAR 0 3
47322: PUSH
47323: DOUBLE
47324: LD_INT 2
47326: DEC
47327: ST_TO_ADDR
47328: LD_VAR 0 2
47332: PUSH
47333: FOR_TO
47334: IFFALSE 47426
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
47336: LD_ADDR_VAR 0 4
47340: PUSH
47341: LD_VAR 0 2
47345: PUSH
47346: LD_VAR 0 3
47350: ARRAY
47351: PPUSH
47352: LD_INT 3
47354: PPUSH
47355: CALL_OW 259
47359: PUSH
47360: LD_VAR 0 2
47364: PUSH
47365: LD_VAR 0 3
47369: ARRAY
47370: PPUSH
47371: CALL_OW 432
47375: MINUS
47376: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
47377: LD_VAR 0 4
47381: PUSH
47382: LD_VAR 0 5
47386: PPUSH
47387: LD_INT 3
47389: PPUSH
47390: CALL_OW 259
47394: PUSH
47395: LD_VAR 0 5
47399: PPUSH
47400: CALL_OW 432
47404: MINUS
47405: GREATEREQUAL
47406: IFFALSE 47424
// mech := result [ i ] ;
47408: LD_ADDR_VAR 0 5
47412: PUSH
47413: LD_VAR 0 2
47417: PUSH
47418: LD_VAR 0 3
47422: ARRAY
47423: ST_TO_ADDR
// end ;
47424: GO 47333
47426: POP
47427: POP
// end ; ComLinkTo ( vehicle , mech ) ;
47428: LD_VAR 0 1
47432: PPUSH
47433: LD_VAR 0 5
47437: PPUSH
47438: CALL_OW 135
// end ;
47442: LD_VAR 0 2
47446: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
47447: LD_INT 0
47449: PPUSH
47450: PPUSH
47451: PPUSH
47452: PPUSH
47453: PPUSH
47454: PPUSH
47455: PPUSH
47456: PPUSH
47457: PPUSH
47458: PPUSH
47459: PPUSH
47460: PPUSH
47461: PPUSH
// result := [ ] ;
47462: LD_ADDR_VAR 0 7
47466: PUSH
47467: EMPTY
47468: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
47469: LD_VAR 0 1
47473: PPUSH
47474: CALL_OW 266
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: LD_INT 1
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: IN
47489: NOT
47490: IFFALSE 47494
// exit ;
47492: GO 49128
// if name then
47494: LD_VAR 0 3
47498: IFFALSE 47514
// SetBName ( base_dep , name ) ;
47500: LD_VAR 0 1
47504: PPUSH
47505: LD_VAR 0 3
47509: PPUSH
47510: CALL_OW 500
// base := GetBase ( base_dep ) ;
47514: LD_ADDR_VAR 0 15
47518: PUSH
47519: LD_VAR 0 1
47523: PPUSH
47524: CALL_OW 274
47528: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
47529: LD_ADDR_VAR 0 16
47533: PUSH
47534: LD_VAR 0 1
47538: PPUSH
47539: CALL_OW 255
47543: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
47544: LD_ADDR_VAR 0 17
47548: PUSH
47549: LD_VAR 0 1
47553: PPUSH
47554: CALL_OW 248
47558: ST_TO_ADDR
// if sources then
47559: LD_VAR 0 5
47563: IFFALSE 47610
// for i = 1 to 3 do
47565: LD_ADDR_VAR 0 8
47569: PUSH
47570: DOUBLE
47571: LD_INT 1
47573: DEC
47574: ST_TO_ADDR
47575: LD_INT 3
47577: PUSH
47578: FOR_TO
47579: IFFALSE 47608
// AddResourceType ( base , i , sources [ i ] ) ;
47581: LD_VAR 0 15
47585: PPUSH
47586: LD_VAR 0 8
47590: PPUSH
47591: LD_VAR 0 5
47595: PUSH
47596: LD_VAR 0 8
47600: ARRAY
47601: PPUSH
47602: CALL_OW 276
47606: GO 47578
47608: POP
47609: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
47610: LD_ADDR_VAR 0 18
47614: PUSH
47615: LD_VAR 0 15
47619: PPUSH
47620: LD_VAR 0 2
47624: PPUSH
47625: LD_INT 1
47627: PPUSH
47628: CALL 46871 0 3
47632: ST_TO_ADDR
// InitHc ;
47633: CALL_OW 19
// InitUc ;
47637: CALL_OW 18
// uc_side := side ;
47641: LD_ADDR_OWVAR 20
47645: PUSH
47646: LD_VAR 0 16
47650: ST_TO_ADDR
// uc_nation := nation ;
47651: LD_ADDR_OWVAR 21
47655: PUSH
47656: LD_VAR 0 17
47660: ST_TO_ADDR
// if buildings then
47661: LD_VAR 0 18
47665: IFFALSE 48987
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
47667: LD_ADDR_VAR 0 19
47671: PUSH
47672: LD_VAR 0 18
47676: PPUSH
47677: LD_INT 2
47679: PUSH
47680: LD_INT 30
47682: PUSH
47683: LD_INT 29
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 30
47692: PUSH
47693: LD_INT 30
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: LIST
47704: PPUSH
47705: CALL_OW 72
47709: ST_TO_ADDR
// if tmp then
47710: LD_VAR 0 19
47714: IFFALSE 47762
// for i in tmp do
47716: LD_ADDR_VAR 0 8
47720: PUSH
47721: LD_VAR 0 19
47725: PUSH
47726: FOR_IN
47727: IFFALSE 47760
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
47729: LD_VAR 0 8
47733: PPUSH
47734: CALL_OW 250
47738: PPUSH
47739: LD_VAR 0 8
47743: PPUSH
47744: CALL_OW 251
47748: PPUSH
47749: LD_VAR 0 16
47753: PPUSH
47754: CALL_OW 441
47758: GO 47726
47760: POP
47761: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
47762: LD_VAR 0 18
47766: PPUSH
47767: LD_INT 2
47769: PUSH
47770: LD_INT 30
47772: PUSH
47773: LD_INT 32
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 30
47782: PUSH
47783: LD_INT 33
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: LIST
47794: PPUSH
47795: CALL_OW 72
47799: IFFALSE 47887
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
47801: LD_ADDR_VAR 0 8
47805: PUSH
47806: LD_VAR 0 18
47810: PPUSH
47811: LD_INT 2
47813: PUSH
47814: LD_INT 30
47816: PUSH
47817: LD_INT 32
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 30
47826: PUSH
47827: LD_INT 33
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: LIST
47838: PPUSH
47839: CALL_OW 72
47843: PUSH
47844: FOR_IN
47845: IFFALSE 47885
// begin if not GetBWeapon ( i ) then
47847: LD_VAR 0 8
47851: PPUSH
47852: CALL_OW 269
47856: NOT
47857: IFFALSE 47883
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
47859: LD_VAR 0 8
47863: PPUSH
47864: LD_VAR 0 8
47868: PPUSH
47869: LD_VAR 0 2
47873: PPUSH
47874: CALL 49133 0 2
47878: PPUSH
47879: CALL_OW 431
// end ;
47883: GO 47844
47885: POP
47886: POP
// end ; for i = 1 to personel do
47887: LD_ADDR_VAR 0 8
47891: PUSH
47892: DOUBLE
47893: LD_INT 1
47895: DEC
47896: ST_TO_ADDR
47897: LD_VAR 0 6
47901: PUSH
47902: FOR_TO
47903: IFFALSE 48967
// begin if i > 4 then
47905: LD_VAR 0 8
47909: PUSH
47910: LD_INT 4
47912: GREATER
47913: IFFALSE 47917
// break ;
47915: GO 48967
// case i of 1 :
47917: LD_VAR 0 8
47921: PUSH
47922: LD_INT 1
47924: DOUBLE
47925: EQUAL
47926: IFTRUE 47930
47928: GO 48010
47930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
47931: LD_ADDR_VAR 0 12
47935: PUSH
47936: LD_VAR 0 18
47940: PPUSH
47941: LD_INT 22
47943: PUSH
47944: LD_VAR 0 16
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 58
47955: PUSH
47956: EMPTY
47957: LIST
47958: PUSH
47959: LD_INT 2
47961: PUSH
47962: LD_INT 30
47964: PUSH
47965: LD_INT 32
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 30
47974: PUSH
47975: LD_INT 4
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 30
47984: PUSH
47985: LD_INT 5
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: LIST
48002: PPUSH
48003: CALL_OW 72
48007: ST_TO_ADDR
48008: GO 48232
48010: LD_INT 2
48012: DOUBLE
48013: EQUAL
48014: IFTRUE 48018
48016: GO 48080
48018: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
48019: LD_ADDR_VAR 0 12
48023: PUSH
48024: LD_VAR 0 18
48028: PPUSH
48029: LD_INT 22
48031: PUSH
48032: LD_VAR 0 16
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 2
48043: PUSH
48044: LD_INT 30
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 30
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: LIST
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PPUSH
48073: CALL_OW 72
48077: ST_TO_ADDR
48078: GO 48232
48080: LD_INT 3
48082: DOUBLE
48083: EQUAL
48084: IFTRUE 48088
48086: GO 48150
48088: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
48089: LD_ADDR_VAR 0 12
48093: PUSH
48094: LD_VAR 0 18
48098: PPUSH
48099: LD_INT 22
48101: PUSH
48102: LD_VAR 0 16
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: LD_INT 30
48116: PUSH
48117: LD_INT 2
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 30
48126: PUSH
48127: LD_INT 3
48129: PUSH
48130: EMPTY
48131: LIST
48132: LIST
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: LIST
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PPUSH
48143: CALL_OW 72
48147: ST_TO_ADDR
48148: GO 48232
48150: LD_INT 4
48152: DOUBLE
48153: EQUAL
48154: IFTRUE 48158
48156: GO 48231
48158: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
48159: LD_ADDR_VAR 0 12
48163: PUSH
48164: LD_VAR 0 18
48168: PPUSH
48169: LD_INT 22
48171: PUSH
48172: LD_VAR 0 16
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 2
48183: PUSH
48184: LD_INT 30
48186: PUSH
48187: LD_INT 6
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 30
48196: PUSH
48197: LD_INT 7
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 30
48206: PUSH
48207: LD_INT 8
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PPUSH
48224: CALL_OW 72
48228: ST_TO_ADDR
48229: GO 48232
48231: POP
// if i = 1 then
48232: LD_VAR 0 8
48236: PUSH
48237: LD_INT 1
48239: EQUAL
48240: IFFALSE 48351
// begin tmp := [ ] ;
48242: LD_ADDR_VAR 0 19
48246: PUSH
48247: EMPTY
48248: ST_TO_ADDR
// for j in f do
48249: LD_ADDR_VAR 0 9
48253: PUSH
48254: LD_VAR 0 12
48258: PUSH
48259: FOR_IN
48260: IFFALSE 48333
// if GetBType ( j ) = b_bunker then
48262: LD_VAR 0 9
48266: PPUSH
48267: CALL_OW 266
48271: PUSH
48272: LD_INT 32
48274: EQUAL
48275: IFFALSE 48302
// tmp := Insert ( tmp , 1 , j ) else
48277: LD_ADDR_VAR 0 19
48281: PUSH
48282: LD_VAR 0 19
48286: PPUSH
48287: LD_INT 1
48289: PPUSH
48290: LD_VAR 0 9
48294: PPUSH
48295: CALL_OW 2
48299: ST_TO_ADDR
48300: GO 48331
// tmp := Insert ( tmp , tmp + 1 , j ) ;
48302: LD_ADDR_VAR 0 19
48306: PUSH
48307: LD_VAR 0 19
48311: PPUSH
48312: LD_VAR 0 19
48316: PUSH
48317: LD_INT 1
48319: PLUS
48320: PPUSH
48321: LD_VAR 0 9
48325: PPUSH
48326: CALL_OW 2
48330: ST_TO_ADDR
48331: GO 48259
48333: POP
48334: POP
// if tmp then
48335: LD_VAR 0 19
48339: IFFALSE 48351
// f := tmp ;
48341: LD_ADDR_VAR 0 12
48345: PUSH
48346: LD_VAR 0 19
48350: ST_TO_ADDR
// end ; x := personel [ i ] ;
48351: LD_ADDR_VAR 0 13
48355: PUSH
48356: LD_VAR 0 6
48360: PUSH
48361: LD_VAR 0 8
48365: ARRAY
48366: ST_TO_ADDR
// if x = - 1 then
48367: LD_VAR 0 13
48371: PUSH
48372: LD_INT 1
48374: NEG
48375: EQUAL
48376: IFFALSE 48585
// begin for j in f do
48378: LD_ADDR_VAR 0 9
48382: PUSH
48383: LD_VAR 0 12
48387: PUSH
48388: FOR_IN
48389: IFFALSE 48581
// repeat InitHc ;
48391: CALL_OW 19
// if GetBType ( j ) = b_barracks then
48395: LD_VAR 0 9
48399: PPUSH
48400: CALL_OW 266
48404: PUSH
48405: LD_INT 5
48407: EQUAL
48408: IFFALSE 48478
// begin if UnitsInside ( j ) < 3 then
48410: LD_VAR 0 9
48414: PPUSH
48415: CALL_OW 313
48419: PUSH
48420: LD_INT 3
48422: LESS
48423: IFFALSE 48459
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48425: LD_INT 0
48427: PPUSH
48428: LD_INT 5
48430: PUSH
48431: LD_INT 8
48433: PUSH
48434: LD_INT 9
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: LIST
48441: PUSH
48442: LD_VAR 0 17
48446: ARRAY
48447: PPUSH
48448: LD_VAR 0 4
48452: PPUSH
48453: CALL_OW 380
48457: GO 48476
// PrepareHuman ( false , i , skill ) ;
48459: LD_INT 0
48461: PPUSH
48462: LD_VAR 0 8
48466: PPUSH
48467: LD_VAR 0 4
48471: PPUSH
48472: CALL_OW 380
// end else
48476: GO 48495
// PrepareHuman ( false , i , skill ) ;
48478: LD_INT 0
48480: PPUSH
48481: LD_VAR 0 8
48485: PPUSH
48486: LD_VAR 0 4
48490: PPUSH
48491: CALL_OW 380
// un := CreateHuman ;
48495: LD_ADDR_VAR 0 14
48499: PUSH
48500: CALL_OW 44
48504: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48505: LD_ADDR_VAR 0 7
48509: PUSH
48510: LD_VAR 0 7
48514: PPUSH
48515: LD_INT 1
48517: PPUSH
48518: LD_VAR 0 14
48522: PPUSH
48523: CALL_OW 2
48527: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
48528: LD_VAR 0 14
48532: PPUSH
48533: LD_VAR 0 9
48537: PPUSH
48538: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
48542: LD_VAR 0 9
48546: PPUSH
48547: CALL_OW 313
48551: PUSH
48552: LD_INT 6
48554: EQUAL
48555: PUSH
48556: LD_VAR 0 9
48560: PPUSH
48561: CALL_OW 266
48565: PUSH
48566: LD_INT 32
48568: PUSH
48569: LD_INT 31
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: IN
48576: OR
48577: IFFALSE 48391
48579: GO 48388
48581: POP
48582: POP
// end else
48583: GO 48965
// for j = 1 to x do
48585: LD_ADDR_VAR 0 9
48589: PUSH
48590: DOUBLE
48591: LD_INT 1
48593: DEC
48594: ST_TO_ADDR
48595: LD_VAR 0 13
48599: PUSH
48600: FOR_TO
48601: IFFALSE 48963
// begin InitHc ;
48603: CALL_OW 19
// if not f then
48607: LD_VAR 0 12
48611: NOT
48612: IFFALSE 48701
// begin PrepareHuman ( false , i , skill ) ;
48614: LD_INT 0
48616: PPUSH
48617: LD_VAR 0 8
48621: PPUSH
48622: LD_VAR 0 4
48626: PPUSH
48627: CALL_OW 380
// un := CreateHuman ;
48631: LD_ADDR_VAR 0 14
48635: PUSH
48636: CALL_OW 44
48640: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48641: LD_ADDR_VAR 0 7
48645: PUSH
48646: LD_VAR 0 7
48650: PPUSH
48651: LD_INT 1
48653: PPUSH
48654: LD_VAR 0 14
48658: PPUSH
48659: CALL_OW 2
48663: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
48664: LD_VAR 0 14
48668: PPUSH
48669: LD_VAR 0 1
48673: PPUSH
48674: CALL_OW 250
48678: PPUSH
48679: LD_VAR 0 1
48683: PPUSH
48684: CALL_OW 251
48688: PPUSH
48689: LD_INT 10
48691: PPUSH
48692: LD_INT 0
48694: PPUSH
48695: CALL_OW 50
// continue ;
48699: GO 48600
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
48701: LD_VAR 0 12
48705: PUSH
48706: LD_INT 1
48708: ARRAY
48709: PPUSH
48710: CALL_OW 313
48714: PUSH
48715: LD_VAR 0 12
48719: PUSH
48720: LD_INT 1
48722: ARRAY
48723: PPUSH
48724: CALL_OW 266
48728: PUSH
48729: LD_INT 32
48731: PUSH
48732: LD_INT 31
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: IN
48739: AND
48740: PUSH
48741: LD_VAR 0 12
48745: PUSH
48746: LD_INT 1
48748: ARRAY
48749: PPUSH
48750: CALL_OW 313
48754: PUSH
48755: LD_INT 6
48757: EQUAL
48758: OR
48759: IFFALSE 48779
// f := Delete ( f , 1 ) ;
48761: LD_ADDR_VAR 0 12
48765: PUSH
48766: LD_VAR 0 12
48770: PPUSH
48771: LD_INT 1
48773: PPUSH
48774: CALL_OW 3
48778: ST_TO_ADDR
// if not f then
48779: LD_VAR 0 12
48783: NOT
48784: IFFALSE 48802
// begin x := x + 2 ;
48786: LD_ADDR_VAR 0 13
48790: PUSH
48791: LD_VAR 0 13
48795: PUSH
48796: LD_INT 2
48798: PLUS
48799: ST_TO_ADDR
// continue ;
48800: GO 48600
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
48802: LD_VAR 0 12
48806: PUSH
48807: LD_INT 1
48809: ARRAY
48810: PPUSH
48811: CALL_OW 266
48815: PUSH
48816: LD_INT 5
48818: EQUAL
48819: IFFALSE 48893
// begin if UnitsInside ( f [ 1 ] ) < 3 then
48821: LD_VAR 0 12
48825: PUSH
48826: LD_INT 1
48828: ARRAY
48829: PPUSH
48830: CALL_OW 313
48834: PUSH
48835: LD_INT 3
48837: LESS
48838: IFFALSE 48874
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
48840: LD_INT 0
48842: PPUSH
48843: LD_INT 5
48845: PUSH
48846: LD_INT 8
48848: PUSH
48849: LD_INT 9
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: LIST
48856: PUSH
48857: LD_VAR 0 17
48861: ARRAY
48862: PPUSH
48863: LD_VAR 0 4
48867: PPUSH
48868: CALL_OW 380
48872: GO 48891
// PrepareHuman ( false , i , skill ) ;
48874: LD_INT 0
48876: PPUSH
48877: LD_VAR 0 8
48881: PPUSH
48882: LD_VAR 0 4
48886: PPUSH
48887: CALL_OW 380
// end else
48891: GO 48910
// PrepareHuman ( false , i , skill ) ;
48893: LD_INT 0
48895: PPUSH
48896: LD_VAR 0 8
48900: PPUSH
48901: LD_VAR 0 4
48905: PPUSH
48906: CALL_OW 380
// un := CreateHuman ;
48910: LD_ADDR_VAR 0 14
48914: PUSH
48915: CALL_OW 44
48919: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
48920: LD_ADDR_VAR 0 7
48924: PUSH
48925: LD_VAR 0 7
48929: PPUSH
48930: LD_INT 1
48932: PPUSH
48933: LD_VAR 0 14
48937: PPUSH
48938: CALL_OW 2
48942: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
48943: LD_VAR 0 14
48947: PPUSH
48948: LD_VAR 0 12
48952: PUSH
48953: LD_INT 1
48955: ARRAY
48956: PPUSH
48957: CALL_OW 52
// end ;
48961: GO 48600
48963: POP
48964: POP
// end ;
48965: GO 47902
48967: POP
48968: POP
// result := result ^ buildings ;
48969: LD_ADDR_VAR 0 7
48973: PUSH
48974: LD_VAR 0 7
48978: PUSH
48979: LD_VAR 0 18
48983: ADD
48984: ST_TO_ADDR
// end else
48985: GO 49128
// begin for i = 1 to personel do
48987: LD_ADDR_VAR 0 8
48991: PUSH
48992: DOUBLE
48993: LD_INT 1
48995: DEC
48996: ST_TO_ADDR
48997: LD_VAR 0 6
49001: PUSH
49002: FOR_TO
49003: IFFALSE 49126
// begin if i > 4 then
49005: LD_VAR 0 8
49009: PUSH
49010: LD_INT 4
49012: GREATER
49013: IFFALSE 49017
// break ;
49015: GO 49126
// x := personel [ i ] ;
49017: LD_ADDR_VAR 0 13
49021: PUSH
49022: LD_VAR 0 6
49026: PUSH
49027: LD_VAR 0 8
49031: ARRAY
49032: ST_TO_ADDR
// if x = - 1 then
49033: LD_VAR 0 13
49037: PUSH
49038: LD_INT 1
49040: NEG
49041: EQUAL
49042: IFFALSE 49046
// continue ;
49044: GO 49002
// PrepareHuman ( false , i , skill ) ;
49046: LD_INT 0
49048: PPUSH
49049: LD_VAR 0 8
49053: PPUSH
49054: LD_VAR 0 4
49058: PPUSH
49059: CALL_OW 380
// un := CreateHuman ;
49063: LD_ADDR_VAR 0 14
49067: PUSH
49068: CALL_OW 44
49072: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
49073: LD_VAR 0 14
49077: PPUSH
49078: LD_VAR 0 1
49082: PPUSH
49083: CALL_OW 250
49087: PPUSH
49088: LD_VAR 0 1
49092: PPUSH
49093: CALL_OW 251
49097: PPUSH
49098: LD_INT 10
49100: PPUSH
49101: LD_INT 0
49103: PPUSH
49104: CALL_OW 50
// result := result ^ un ;
49108: LD_ADDR_VAR 0 7
49112: PUSH
49113: LD_VAR 0 7
49117: PUSH
49118: LD_VAR 0 14
49122: ADD
49123: ST_TO_ADDR
// end ;
49124: GO 49002
49126: POP
49127: POP
// end ; end ;
49128: LD_VAR 0 7
49132: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
49133: LD_INT 0
49135: PPUSH
49136: PPUSH
49137: PPUSH
49138: PPUSH
49139: PPUSH
49140: PPUSH
49141: PPUSH
49142: PPUSH
49143: PPUSH
49144: PPUSH
49145: PPUSH
49146: PPUSH
49147: PPUSH
49148: PPUSH
49149: PPUSH
49150: PPUSH
// result := false ;
49151: LD_ADDR_VAR 0 3
49155: PUSH
49156: LD_INT 0
49158: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
49159: LD_VAR 0 1
49163: NOT
49164: PUSH
49165: LD_VAR 0 1
49169: PPUSH
49170: CALL_OW 266
49174: PUSH
49175: LD_INT 32
49177: PUSH
49178: LD_INT 33
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: IN
49185: NOT
49186: OR
49187: IFFALSE 49191
// exit ;
49189: GO 50300
// nat := GetNation ( tower ) ;
49191: LD_ADDR_VAR 0 12
49195: PUSH
49196: LD_VAR 0 1
49200: PPUSH
49201: CALL_OW 248
49205: ST_TO_ADDR
// side := GetSide ( tower ) ;
49206: LD_ADDR_VAR 0 16
49210: PUSH
49211: LD_VAR 0 1
49215: PPUSH
49216: CALL_OW 255
49220: ST_TO_ADDR
// x := GetX ( tower ) ;
49221: LD_ADDR_VAR 0 10
49225: PUSH
49226: LD_VAR 0 1
49230: PPUSH
49231: CALL_OW 250
49235: ST_TO_ADDR
// y := GetY ( tower ) ;
49236: LD_ADDR_VAR 0 11
49240: PUSH
49241: LD_VAR 0 1
49245: PPUSH
49246: CALL_OW 251
49250: ST_TO_ADDR
// if not x or not y then
49251: LD_VAR 0 10
49255: NOT
49256: PUSH
49257: LD_VAR 0 11
49261: NOT
49262: OR
49263: IFFALSE 49267
// exit ;
49265: GO 50300
// weapon := 0 ;
49267: LD_ADDR_VAR 0 18
49271: PUSH
49272: LD_INT 0
49274: ST_TO_ADDR
// fac_list := [ ] ;
49275: LD_ADDR_VAR 0 17
49279: PUSH
49280: EMPTY
49281: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
49282: LD_ADDR_VAR 0 6
49286: PUSH
49287: LD_VAR 0 1
49291: PPUSH
49292: CALL_OW 274
49296: PPUSH
49297: LD_VAR 0 2
49301: PPUSH
49302: LD_INT 0
49304: PPUSH
49305: CALL 46871 0 3
49309: PPUSH
49310: LD_INT 30
49312: PUSH
49313: LD_INT 3
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PPUSH
49320: CALL_OW 72
49324: ST_TO_ADDR
// if not factories then
49325: LD_VAR 0 6
49329: NOT
49330: IFFALSE 49334
// exit ;
49332: GO 50300
// for i in factories do
49334: LD_ADDR_VAR 0 8
49338: PUSH
49339: LD_VAR 0 6
49343: PUSH
49344: FOR_IN
49345: IFFALSE 49370
// fac_list := fac_list union AvailableWeaponList ( i ) ;
49347: LD_ADDR_VAR 0 17
49351: PUSH
49352: LD_VAR 0 17
49356: PUSH
49357: LD_VAR 0 8
49361: PPUSH
49362: CALL_OW 478
49366: UNION
49367: ST_TO_ADDR
49368: GO 49344
49370: POP
49371: POP
// if not fac_list then
49372: LD_VAR 0 17
49376: NOT
49377: IFFALSE 49381
// exit ;
49379: GO 50300
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
49381: LD_ADDR_VAR 0 5
49385: PUSH
49386: LD_INT 4
49388: PUSH
49389: LD_INT 5
49391: PUSH
49392: LD_INT 9
49394: PUSH
49395: LD_INT 10
49397: PUSH
49398: LD_INT 6
49400: PUSH
49401: LD_INT 7
49403: PUSH
49404: LD_INT 11
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 27
49418: PUSH
49419: LD_INT 28
49421: PUSH
49422: LD_INT 26
49424: PUSH
49425: LD_INT 30
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 43
49436: PUSH
49437: LD_INT 44
49439: PUSH
49440: LD_INT 46
49442: PUSH
49443: LD_INT 45
49445: PUSH
49446: LD_INT 47
49448: PUSH
49449: LD_INT 49
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: LIST
49464: PUSH
49465: LD_VAR 0 12
49469: ARRAY
49470: ST_TO_ADDR
// list := list isect fac_list ;
49471: LD_ADDR_VAR 0 5
49475: PUSH
49476: LD_VAR 0 5
49480: PUSH
49481: LD_VAR 0 17
49485: ISECT
49486: ST_TO_ADDR
// if not list then
49487: LD_VAR 0 5
49491: NOT
49492: IFFALSE 49496
// exit ;
49494: GO 50300
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
49496: LD_VAR 0 12
49500: PUSH
49501: LD_INT 3
49503: EQUAL
49504: PUSH
49505: LD_INT 49
49507: PUSH
49508: LD_VAR 0 5
49512: IN
49513: AND
49514: PUSH
49515: LD_INT 31
49517: PPUSH
49518: LD_VAR 0 16
49522: PPUSH
49523: CALL_OW 321
49527: PUSH
49528: LD_INT 2
49530: EQUAL
49531: AND
49532: IFFALSE 49592
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
49534: LD_INT 22
49536: PUSH
49537: LD_VAR 0 16
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 35
49548: PUSH
49549: LD_INT 49
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 91
49558: PUSH
49559: LD_VAR 0 1
49563: PUSH
49564: LD_INT 10
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: LIST
49576: PPUSH
49577: CALL_OW 69
49581: NOT
49582: IFFALSE 49592
// weapon := ru_time_lapser ;
49584: LD_ADDR_VAR 0 18
49588: PUSH
49589: LD_INT 49
49591: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
49592: LD_VAR 0 12
49596: PUSH
49597: LD_INT 1
49599: PUSH
49600: LD_INT 2
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: IN
49607: PUSH
49608: LD_INT 11
49610: PUSH
49611: LD_VAR 0 5
49615: IN
49616: PUSH
49617: LD_INT 30
49619: PUSH
49620: LD_VAR 0 5
49624: IN
49625: OR
49626: AND
49627: PUSH
49628: LD_INT 6
49630: PPUSH
49631: LD_VAR 0 16
49635: PPUSH
49636: CALL_OW 321
49640: PUSH
49641: LD_INT 2
49643: EQUAL
49644: AND
49645: IFFALSE 49810
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
49647: LD_INT 22
49649: PUSH
49650: LD_VAR 0 16
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 2
49661: PUSH
49662: LD_INT 35
49664: PUSH
49665: LD_INT 11
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 35
49674: PUSH
49675: LD_INT 30
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 91
49689: PUSH
49690: LD_VAR 0 1
49694: PUSH
49695: LD_INT 18
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: LIST
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: LIST
49707: PPUSH
49708: CALL_OW 69
49712: NOT
49713: PUSH
49714: LD_INT 22
49716: PUSH
49717: LD_VAR 0 16
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: LD_INT 30
49731: PUSH
49732: LD_INT 32
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 30
49741: PUSH
49742: LD_INT 33
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 91
49756: PUSH
49757: LD_VAR 0 1
49761: PUSH
49762: LD_INT 12
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: LIST
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: LIST
49774: PUSH
49775: EMPTY
49776: LIST
49777: PPUSH
49778: CALL_OW 69
49782: PUSH
49783: LD_INT 2
49785: GREATER
49786: AND
49787: IFFALSE 49810
// weapon := [ us_radar , ar_radar ] [ nat ] ;
49789: LD_ADDR_VAR 0 18
49793: PUSH
49794: LD_INT 11
49796: PUSH
49797: LD_INT 30
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_VAR 0 12
49808: ARRAY
49809: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
49810: LD_VAR 0 18
49814: NOT
49815: PUSH
49816: LD_INT 40
49818: PPUSH
49819: LD_VAR 0 16
49823: PPUSH
49824: CALL_OW 321
49828: PUSH
49829: LD_INT 2
49831: EQUAL
49832: AND
49833: PUSH
49834: LD_INT 7
49836: PUSH
49837: LD_VAR 0 5
49841: IN
49842: PUSH
49843: LD_INT 28
49845: PUSH
49846: LD_VAR 0 5
49850: IN
49851: OR
49852: PUSH
49853: LD_INT 45
49855: PUSH
49856: LD_VAR 0 5
49860: IN
49861: OR
49862: AND
49863: IFFALSE 50117
// begin hex := GetHexInfo ( x , y ) ;
49865: LD_ADDR_VAR 0 4
49869: PUSH
49870: LD_VAR 0 10
49874: PPUSH
49875: LD_VAR 0 11
49879: PPUSH
49880: CALL_OW 546
49884: ST_TO_ADDR
// if hex [ 1 ] then
49885: LD_VAR 0 4
49889: PUSH
49890: LD_INT 1
49892: ARRAY
49893: IFFALSE 49897
// exit ;
49895: GO 50300
// height := hex [ 2 ] ;
49897: LD_ADDR_VAR 0 15
49901: PUSH
49902: LD_VAR 0 4
49906: PUSH
49907: LD_INT 2
49909: ARRAY
49910: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
49911: LD_ADDR_VAR 0 14
49915: PUSH
49916: LD_INT 0
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: LD_INT 3
49924: PUSH
49925: LD_INT 5
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: ST_TO_ADDR
// for i in tmp do
49934: LD_ADDR_VAR 0 8
49938: PUSH
49939: LD_VAR 0 14
49943: PUSH
49944: FOR_IN
49945: IFFALSE 50115
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
49947: LD_ADDR_VAR 0 9
49951: PUSH
49952: LD_VAR 0 10
49956: PPUSH
49957: LD_VAR 0 8
49961: PPUSH
49962: LD_INT 5
49964: PPUSH
49965: CALL_OW 272
49969: PUSH
49970: LD_VAR 0 11
49974: PPUSH
49975: LD_VAR 0 8
49979: PPUSH
49980: LD_INT 5
49982: PPUSH
49983: CALL_OW 273
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
49992: LD_VAR 0 9
49996: PUSH
49997: LD_INT 1
49999: ARRAY
50000: PPUSH
50001: LD_VAR 0 9
50005: PUSH
50006: LD_INT 2
50008: ARRAY
50009: PPUSH
50010: CALL_OW 488
50014: IFFALSE 50113
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
50016: LD_ADDR_VAR 0 4
50020: PUSH
50021: LD_VAR 0 9
50025: PUSH
50026: LD_INT 1
50028: ARRAY
50029: PPUSH
50030: LD_VAR 0 9
50034: PUSH
50035: LD_INT 2
50037: ARRAY
50038: PPUSH
50039: CALL_OW 546
50043: ST_TO_ADDR
// if hex [ 1 ] then
50044: LD_VAR 0 4
50048: PUSH
50049: LD_INT 1
50051: ARRAY
50052: IFFALSE 50056
// continue ;
50054: GO 49944
// h := hex [ 2 ] ;
50056: LD_ADDR_VAR 0 13
50060: PUSH
50061: LD_VAR 0 4
50065: PUSH
50066: LD_INT 2
50068: ARRAY
50069: ST_TO_ADDR
// if h + 7 < height then
50070: LD_VAR 0 13
50074: PUSH
50075: LD_INT 7
50077: PLUS
50078: PUSH
50079: LD_VAR 0 15
50083: LESS
50084: IFFALSE 50113
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
50086: LD_ADDR_VAR 0 18
50090: PUSH
50091: LD_INT 7
50093: PUSH
50094: LD_INT 28
50096: PUSH
50097: LD_INT 45
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: LIST
50104: PUSH
50105: LD_VAR 0 12
50109: ARRAY
50110: ST_TO_ADDR
// break ;
50111: GO 50115
// end ; end ; end ;
50113: GO 49944
50115: POP
50116: POP
// end ; if not weapon then
50117: LD_VAR 0 18
50121: NOT
50122: IFFALSE 50182
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
50124: LD_ADDR_VAR 0 5
50128: PUSH
50129: LD_VAR 0 5
50133: PUSH
50134: LD_INT 11
50136: PUSH
50137: LD_INT 30
50139: PUSH
50140: LD_INT 49
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: DIFF
50148: ST_TO_ADDR
// if not list then
50149: LD_VAR 0 5
50153: NOT
50154: IFFALSE 50158
// exit ;
50156: GO 50300
// weapon := list [ rand ( 1 , list ) ] ;
50158: LD_ADDR_VAR 0 18
50162: PUSH
50163: LD_VAR 0 5
50167: PUSH
50168: LD_INT 1
50170: PPUSH
50171: LD_VAR 0 5
50175: PPUSH
50176: CALL_OW 12
50180: ARRAY
50181: ST_TO_ADDR
// end ; if weapon then
50182: LD_VAR 0 18
50186: IFFALSE 50300
// begin tmp := CostOfWeapon ( weapon ) ;
50188: LD_ADDR_VAR 0 14
50192: PUSH
50193: LD_VAR 0 18
50197: PPUSH
50198: CALL_OW 451
50202: ST_TO_ADDR
// j := GetBase ( tower ) ;
50203: LD_ADDR_VAR 0 9
50207: PUSH
50208: LD_VAR 0 1
50212: PPUSH
50213: CALL_OW 274
50217: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
50218: LD_VAR 0 9
50222: PPUSH
50223: LD_INT 1
50225: PPUSH
50226: CALL_OW 275
50230: PUSH
50231: LD_VAR 0 14
50235: PUSH
50236: LD_INT 1
50238: ARRAY
50239: GREATEREQUAL
50240: PUSH
50241: LD_VAR 0 9
50245: PPUSH
50246: LD_INT 2
50248: PPUSH
50249: CALL_OW 275
50253: PUSH
50254: LD_VAR 0 14
50258: PUSH
50259: LD_INT 2
50261: ARRAY
50262: GREATEREQUAL
50263: AND
50264: PUSH
50265: LD_VAR 0 9
50269: PPUSH
50270: LD_INT 3
50272: PPUSH
50273: CALL_OW 275
50277: PUSH
50278: LD_VAR 0 14
50282: PUSH
50283: LD_INT 3
50285: ARRAY
50286: GREATEREQUAL
50287: AND
50288: IFFALSE 50300
// result := weapon ;
50290: LD_ADDR_VAR 0 3
50294: PUSH
50295: LD_VAR 0 18
50299: ST_TO_ADDR
// end ; end ;
50300: LD_VAR 0 3
50304: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
50305: LD_INT 0
50307: PPUSH
50308: PPUSH
// result := true ;
50309: LD_ADDR_VAR 0 3
50313: PUSH
50314: LD_INT 1
50316: ST_TO_ADDR
// if array1 = array2 then
50317: LD_VAR 0 1
50321: PUSH
50322: LD_VAR 0 2
50326: EQUAL
50327: IFFALSE 50387
// begin for i = 1 to array1 do
50329: LD_ADDR_VAR 0 4
50333: PUSH
50334: DOUBLE
50335: LD_INT 1
50337: DEC
50338: ST_TO_ADDR
50339: LD_VAR 0 1
50343: PUSH
50344: FOR_TO
50345: IFFALSE 50383
// if array1 [ i ] <> array2 [ i ] then
50347: LD_VAR 0 1
50351: PUSH
50352: LD_VAR 0 4
50356: ARRAY
50357: PUSH
50358: LD_VAR 0 2
50362: PUSH
50363: LD_VAR 0 4
50367: ARRAY
50368: NONEQUAL
50369: IFFALSE 50381
// begin result := false ;
50371: LD_ADDR_VAR 0 3
50375: PUSH
50376: LD_INT 0
50378: ST_TO_ADDR
// break ;
50379: GO 50383
// end ;
50381: GO 50344
50383: POP
50384: POP
// end else
50385: GO 50395
// result := false ;
50387: LD_ADDR_VAR 0 3
50391: PUSH
50392: LD_INT 0
50394: ST_TO_ADDR
// end ;
50395: LD_VAR 0 3
50399: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
50400: LD_INT 0
50402: PPUSH
50403: PPUSH
// if not array1 or not array2 then
50404: LD_VAR 0 1
50408: NOT
50409: PUSH
50410: LD_VAR 0 2
50414: NOT
50415: OR
50416: IFFALSE 50420
// exit ;
50418: GO 50484
// result := true ;
50420: LD_ADDR_VAR 0 3
50424: PUSH
50425: LD_INT 1
50427: ST_TO_ADDR
// for i = 1 to array1 do
50428: LD_ADDR_VAR 0 4
50432: PUSH
50433: DOUBLE
50434: LD_INT 1
50436: DEC
50437: ST_TO_ADDR
50438: LD_VAR 0 1
50442: PUSH
50443: FOR_TO
50444: IFFALSE 50482
// if array1 [ i ] <> array2 [ i ] then
50446: LD_VAR 0 1
50450: PUSH
50451: LD_VAR 0 4
50455: ARRAY
50456: PUSH
50457: LD_VAR 0 2
50461: PUSH
50462: LD_VAR 0 4
50466: ARRAY
50467: NONEQUAL
50468: IFFALSE 50480
// begin result := false ;
50470: LD_ADDR_VAR 0 3
50474: PUSH
50475: LD_INT 0
50477: ST_TO_ADDR
// break ;
50478: GO 50482
// end ;
50480: GO 50443
50482: POP
50483: POP
// end ;
50484: LD_VAR 0 3
50488: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
50489: LD_INT 0
50491: PPUSH
50492: PPUSH
50493: PPUSH
// pom := GetBase ( fac ) ;
50494: LD_ADDR_VAR 0 5
50498: PUSH
50499: LD_VAR 0 1
50503: PPUSH
50504: CALL_OW 274
50508: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
50509: LD_ADDR_VAR 0 4
50513: PUSH
50514: LD_VAR 0 2
50518: PUSH
50519: LD_INT 1
50521: ARRAY
50522: PPUSH
50523: LD_VAR 0 2
50527: PUSH
50528: LD_INT 2
50530: ARRAY
50531: PPUSH
50532: LD_VAR 0 2
50536: PUSH
50537: LD_INT 3
50539: ARRAY
50540: PPUSH
50541: LD_VAR 0 2
50545: PUSH
50546: LD_INT 4
50548: ARRAY
50549: PPUSH
50550: CALL_OW 449
50554: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50555: LD_ADDR_VAR 0 3
50559: PUSH
50560: LD_VAR 0 5
50564: PPUSH
50565: LD_INT 1
50567: PPUSH
50568: CALL_OW 275
50572: PUSH
50573: LD_VAR 0 4
50577: PUSH
50578: LD_INT 1
50580: ARRAY
50581: GREATEREQUAL
50582: PUSH
50583: LD_VAR 0 5
50587: PPUSH
50588: LD_INT 2
50590: PPUSH
50591: CALL_OW 275
50595: PUSH
50596: LD_VAR 0 4
50600: PUSH
50601: LD_INT 2
50603: ARRAY
50604: GREATEREQUAL
50605: AND
50606: PUSH
50607: LD_VAR 0 5
50611: PPUSH
50612: LD_INT 3
50614: PPUSH
50615: CALL_OW 275
50619: PUSH
50620: LD_VAR 0 4
50624: PUSH
50625: LD_INT 3
50627: ARRAY
50628: GREATEREQUAL
50629: AND
50630: ST_TO_ADDR
// end ;
50631: LD_VAR 0 3
50635: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
50636: LD_INT 0
50638: PPUSH
50639: PPUSH
50640: PPUSH
50641: PPUSH
// pom := GetBase ( building ) ;
50642: LD_ADDR_VAR 0 3
50646: PUSH
50647: LD_VAR 0 1
50651: PPUSH
50652: CALL_OW 274
50656: ST_TO_ADDR
// if not pom then
50657: LD_VAR 0 3
50661: NOT
50662: IFFALSE 50666
// exit ;
50664: GO 50836
// btype := GetBType ( building ) ;
50666: LD_ADDR_VAR 0 5
50670: PUSH
50671: LD_VAR 0 1
50675: PPUSH
50676: CALL_OW 266
50680: ST_TO_ADDR
// if btype = b_armoury then
50681: LD_VAR 0 5
50685: PUSH
50686: LD_INT 4
50688: EQUAL
50689: IFFALSE 50699
// btype := b_barracks ;
50691: LD_ADDR_VAR 0 5
50695: PUSH
50696: LD_INT 5
50698: ST_TO_ADDR
// if btype = b_depot then
50699: LD_VAR 0 5
50703: PUSH
50704: LD_INT 0
50706: EQUAL
50707: IFFALSE 50717
// btype := b_warehouse ;
50709: LD_ADDR_VAR 0 5
50713: PUSH
50714: LD_INT 1
50716: ST_TO_ADDR
// if btype = b_workshop then
50717: LD_VAR 0 5
50721: PUSH
50722: LD_INT 2
50724: EQUAL
50725: IFFALSE 50735
// btype := b_factory ;
50727: LD_ADDR_VAR 0 5
50731: PUSH
50732: LD_INT 3
50734: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50735: LD_ADDR_VAR 0 4
50739: PUSH
50740: LD_VAR 0 5
50744: PPUSH
50745: LD_VAR 0 1
50749: PPUSH
50750: CALL_OW 248
50754: PPUSH
50755: CALL_OW 450
50759: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50760: LD_ADDR_VAR 0 2
50764: PUSH
50765: LD_VAR 0 3
50769: PPUSH
50770: LD_INT 1
50772: PPUSH
50773: CALL_OW 275
50777: PUSH
50778: LD_VAR 0 4
50782: PUSH
50783: LD_INT 1
50785: ARRAY
50786: GREATEREQUAL
50787: PUSH
50788: LD_VAR 0 3
50792: PPUSH
50793: LD_INT 2
50795: PPUSH
50796: CALL_OW 275
50800: PUSH
50801: LD_VAR 0 4
50805: PUSH
50806: LD_INT 2
50808: ARRAY
50809: GREATEREQUAL
50810: AND
50811: PUSH
50812: LD_VAR 0 3
50816: PPUSH
50817: LD_INT 3
50819: PPUSH
50820: CALL_OW 275
50824: PUSH
50825: LD_VAR 0 4
50829: PUSH
50830: LD_INT 3
50832: ARRAY
50833: GREATEREQUAL
50834: AND
50835: ST_TO_ADDR
// end ;
50836: LD_VAR 0 2
50840: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
50841: LD_INT 0
50843: PPUSH
50844: PPUSH
50845: PPUSH
// pom := GetBase ( building ) ;
50846: LD_ADDR_VAR 0 4
50850: PUSH
50851: LD_VAR 0 1
50855: PPUSH
50856: CALL_OW 274
50860: ST_TO_ADDR
// if not pom then
50861: LD_VAR 0 4
50865: NOT
50866: IFFALSE 50870
// exit ;
50868: GO 50971
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
50870: LD_ADDR_VAR 0 5
50874: PUSH
50875: LD_VAR 0 2
50879: PPUSH
50880: LD_VAR 0 1
50884: PPUSH
50885: CALL_OW 248
50889: PPUSH
50890: CALL_OW 450
50894: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
50895: LD_ADDR_VAR 0 3
50899: PUSH
50900: LD_VAR 0 4
50904: PPUSH
50905: LD_INT 1
50907: PPUSH
50908: CALL_OW 275
50912: PUSH
50913: LD_VAR 0 5
50917: PUSH
50918: LD_INT 1
50920: ARRAY
50921: GREATEREQUAL
50922: PUSH
50923: LD_VAR 0 4
50927: PPUSH
50928: LD_INT 2
50930: PPUSH
50931: CALL_OW 275
50935: PUSH
50936: LD_VAR 0 5
50940: PUSH
50941: LD_INT 2
50943: ARRAY
50944: GREATEREQUAL
50945: AND
50946: PUSH
50947: LD_VAR 0 4
50951: PPUSH
50952: LD_INT 3
50954: PPUSH
50955: CALL_OW 275
50959: PUSH
50960: LD_VAR 0 5
50964: PUSH
50965: LD_INT 3
50967: ARRAY
50968: GREATEREQUAL
50969: AND
50970: ST_TO_ADDR
// end ;
50971: LD_VAR 0 3
50975: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
50976: LD_INT 0
50978: PPUSH
50979: PPUSH
50980: PPUSH
50981: PPUSH
50982: PPUSH
50983: PPUSH
50984: PPUSH
50985: PPUSH
50986: PPUSH
50987: PPUSH
50988: PPUSH
// result := false ;
50989: LD_ADDR_VAR 0 8
50993: PUSH
50994: LD_INT 0
50996: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
50997: LD_VAR 0 5
51001: NOT
51002: PUSH
51003: LD_VAR 0 1
51007: NOT
51008: OR
51009: PUSH
51010: LD_VAR 0 2
51014: NOT
51015: OR
51016: PUSH
51017: LD_VAR 0 3
51021: NOT
51022: OR
51023: IFFALSE 51027
// exit ;
51025: GO 51841
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
51027: LD_ADDR_VAR 0 14
51031: PUSH
51032: LD_VAR 0 1
51036: PPUSH
51037: LD_VAR 0 2
51041: PPUSH
51042: LD_VAR 0 3
51046: PPUSH
51047: LD_VAR 0 4
51051: PPUSH
51052: LD_VAR 0 5
51056: PUSH
51057: LD_INT 1
51059: ARRAY
51060: PPUSH
51061: CALL_OW 248
51065: PPUSH
51066: LD_INT 0
51068: PPUSH
51069: CALL 53074 0 6
51073: ST_TO_ADDR
// if not hexes then
51074: LD_VAR 0 14
51078: NOT
51079: IFFALSE 51083
// exit ;
51081: GO 51841
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
51083: LD_ADDR_VAR 0 17
51087: PUSH
51088: LD_VAR 0 5
51092: PPUSH
51093: LD_INT 22
51095: PUSH
51096: LD_VAR 0 13
51100: PPUSH
51101: CALL_OW 255
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: LD_INT 30
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 30
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PPUSH
51142: CALL_OW 72
51146: ST_TO_ADDR
// for i = 1 to hexes do
51147: LD_ADDR_VAR 0 9
51151: PUSH
51152: DOUBLE
51153: LD_INT 1
51155: DEC
51156: ST_TO_ADDR
51157: LD_VAR 0 14
51161: PUSH
51162: FOR_TO
51163: IFFALSE 51839
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
51165: LD_ADDR_VAR 0 13
51169: PUSH
51170: LD_VAR 0 14
51174: PUSH
51175: LD_VAR 0 9
51179: ARRAY
51180: PUSH
51181: LD_INT 1
51183: ARRAY
51184: PPUSH
51185: LD_VAR 0 14
51189: PUSH
51190: LD_VAR 0 9
51194: ARRAY
51195: PUSH
51196: LD_INT 2
51198: ARRAY
51199: PPUSH
51200: CALL_OW 428
51204: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
51205: LD_VAR 0 14
51209: PUSH
51210: LD_VAR 0 9
51214: ARRAY
51215: PUSH
51216: LD_INT 1
51218: ARRAY
51219: PPUSH
51220: LD_VAR 0 14
51224: PUSH
51225: LD_VAR 0 9
51229: ARRAY
51230: PUSH
51231: LD_INT 2
51233: ARRAY
51234: PPUSH
51235: CALL_OW 351
51239: PUSH
51240: LD_VAR 0 14
51244: PUSH
51245: LD_VAR 0 9
51249: ARRAY
51250: PUSH
51251: LD_INT 1
51253: ARRAY
51254: PPUSH
51255: LD_VAR 0 14
51259: PUSH
51260: LD_VAR 0 9
51264: ARRAY
51265: PUSH
51266: LD_INT 2
51268: ARRAY
51269: PPUSH
51270: CALL_OW 488
51274: NOT
51275: OR
51276: PUSH
51277: LD_VAR 0 13
51281: PPUSH
51282: CALL_OW 247
51286: PUSH
51287: LD_INT 3
51289: EQUAL
51290: OR
51291: IFFALSE 51297
// exit ;
51293: POP
51294: POP
51295: GO 51841
// if not tmp then
51297: LD_VAR 0 13
51301: NOT
51302: IFFALSE 51306
// continue ;
51304: GO 51162
// result := true ;
51306: LD_ADDR_VAR 0 8
51310: PUSH
51311: LD_INT 1
51313: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
51314: LD_VAR 0 6
51318: PUSH
51319: LD_VAR 0 13
51323: PPUSH
51324: CALL_OW 247
51328: PUSH
51329: LD_INT 2
51331: EQUAL
51332: AND
51333: PUSH
51334: LD_VAR 0 13
51338: PPUSH
51339: CALL_OW 263
51343: PUSH
51344: LD_INT 1
51346: EQUAL
51347: AND
51348: IFFALSE 51512
// begin if IsDrivenBy ( tmp ) then
51350: LD_VAR 0 13
51354: PPUSH
51355: CALL_OW 311
51359: IFFALSE 51363
// continue ;
51361: GO 51162
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
51363: LD_VAR 0 6
51367: PPUSH
51368: LD_INT 3
51370: PUSH
51371: LD_INT 60
51373: PUSH
51374: EMPTY
51375: LIST
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 3
51383: PUSH
51384: LD_INT 55
51386: PUSH
51387: EMPTY
51388: LIST
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PPUSH
51398: CALL_OW 72
51402: IFFALSE 51510
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
51404: LD_ADDR_VAR 0 18
51408: PUSH
51409: LD_VAR 0 6
51413: PPUSH
51414: LD_INT 3
51416: PUSH
51417: LD_INT 60
51419: PUSH
51420: EMPTY
51421: LIST
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 3
51429: PUSH
51430: LD_INT 55
51432: PUSH
51433: EMPTY
51434: LIST
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PPUSH
51444: CALL_OW 72
51448: PUSH
51449: LD_INT 1
51451: ARRAY
51452: ST_TO_ADDR
// if IsInUnit ( driver ) then
51453: LD_VAR 0 18
51457: PPUSH
51458: CALL_OW 310
51462: IFFALSE 51473
// ComExit ( driver ) ;
51464: LD_VAR 0 18
51468: PPUSH
51469: CALL 76854 0 1
// AddComEnterUnit ( driver , tmp ) ;
51473: LD_VAR 0 18
51477: PPUSH
51478: LD_VAR 0 13
51482: PPUSH
51483: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
51487: LD_VAR 0 18
51491: PPUSH
51492: LD_VAR 0 7
51496: PPUSH
51497: CALL_OW 173
// AddComExitVehicle ( driver ) ;
51501: LD_VAR 0 18
51505: PPUSH
51506: CALL_OW 181
// end ; continue ;
51510: GO 51162
// end ; if not cleaners or not tmp in cleaners then
51512: LD_VAR 0 6
51516: NOT
51517: PUSH
51518: LD_VAR 0 13
51522: PUSH
51523: LD_VAR 0 6
51527: IN
51528: NOT
51529: OR
51530: IFFALSE 51837
// begin if dep then
51532: LD_VAR 0 17
51536: IFFALSE 51672
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
51538: LD_ADDR_VAR 0 16
51542: PUSH
51543: LD_VAR 0 17
51547: PUSH
51548: LD_INT 1
51550: ARRAY
51551: PPUSH
51552: CALL_OW 250
51556: PPUSH
51557: LD_VAR 0 17
51561: PUSH
51562: LD_INT 1
51564: ARRAY
51565: PPUSH
51566: CALL_OW 254
51570: PPUSH
51571: LD_INT 5
51573: PPUSH
51574: CALL_OW 272
51578: PUSH
51579: LD_VAR 0 17
51583: PUSH
51584: LD_INT 1
51586: ARRAY
51587: PPUSH
51588: CALL_OW 251
51592: PPUSH
51593: LD_VAR 0 17
51597: PUSH
51598: LD_INT 1
51600: ARRAY
51601: PPUSH
51602: CALL_OW 254
51606: PPUSH
51607: LD_INT 5
51609: PPUSH
51610: CALL_OW 273
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
51619: LD_VAR 0 16
51623: PUSH
51624: LD_INT 1
51626: ARRAY
51627: PPUSH
51628: LD_VAR 0 16
51632: PUSH
51633: LD_INT 2
51635: ARRAY
51636: PPUSH
51637: CALL_OW 488
51641: IFFALSE 51672
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
51643: LD_VAR 0 13
51647: PPUSH
51648: LD_VAR 0 16
51652: PUSH
51653: LD_INT 1
51655: ARRAY
51656: PPUSH
51657: LD_VAR 0 16
51661: PUSH
51662: LD_INT 2
51664: ARRAY
51665: PPUSH
51666: CALL_OW 111
// continue ;
51670: GO 51162
// end ; end ; r := GetDir ( tmp ) ;
51672: LD_ADDR_VAR 0 15
51676: PUSH
51677: LD_VAR 0 13
51681: PPUSH
51682: CALL_OW 254
51686: ST_TO_ADDR
// if r = 5 then
51687: LD_VAR 0 15
51691: PUSH
51692: LD_INT 5
51694: EQUAL
51695: IFFALSE 51705
// r := 0 ;
51697: LD_ADDR_VAR 0 15
51701: PUSH
51702: LD_INT 0
51704: ST_TO_ADDR
// for j = r to 5 do
51705: LD_ADDR_VAR 0 10
51709: PUSH
51710: DOUBLE
51711: LD_VAR 0 15
51715: DEC
51716: ST_TO_ADDR
51717: LD_INT 5
51719: PUSH
51720: FOR_TO
51721: IFFALSE 51835
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
51723: LD_ADDR_VAR 0 11
51727: PUSH
51728: LD_VAR 0 13
51732: PPUSH
51733: CALL_OW 250
51737: PPUSH
51738: LD_VAR 0 10
51742: PPUSH
51743: LD_INT 2
51745: PPUSH
51746: CALL_OW 272
51750: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
51751: LD_ADDR_VAR 0 12
51755: PUSH
51756: LD_VAR 0 13
51760: PPUSH
51761: CALL_OW 251
51765: PPUSH
51766: LD_VAR 0 10
51770: PPUSH
51771: LD_INT 2
51773: PPUSH
51774: CALL_OW 273
51778: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
51779: LD_VAR 0 11
51783: PPUSH
51784: LD_VAR 0 12
51788: PPUSH
51789: CALL_OW 488
51793: PUSH
51794: LD_VAR 0 11
51798: PPUSH
51799: LD_VAR 0 12
51803: PPUSH
51804: CALL_OW 428
51808: NOT
51809: AND
51810: IFFALSE 51833
// begin ComMoveXY ( tmp , _x , _y ) ;
51812: LD_VAR 0 13
51816: PPUSH
51817: LD_VAR 0 11
51821: PPUSH
51822: LD_VAR 0 12
51826: PPUSH
51827: CALL_OW 111
// break ;
51831: GO 51835
// end ; end ;
51833: GO 51720
51835: POP
51836: POP
// end ; end ;
51837: GO 51162
51839: POP
51840: POP
// end ;
51841: LD_VAR 0 8
51845: RET
// export function BuildingTechInvented ( side , btype ) ; begin
51846: LD_INT 0
51848: PPUSH
// result := true ;
51849: LD_ADDR_VAR 0 3
51853: PUSH
51854: LD_INT 1
51856: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
51857: LD_VAR 0 2
51861: PUSH
51862: LD_INT 24
51864: DOUBLE
51865: EQUAL
51866: IFTRUE 51876
51868: LD_INT 33
51870: DOUBLE
51871: EQUAL
51872: IFTRUE 51876
51874: GO 51901
51876: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
51877: LD_ADDR_VAR 0 3
51881: PUSH
51882: LD_INT 32
51884: PPUSH
51885: LD_VAR 0 1
51889: PPUSH
51890: CALL_OW 321
51894: PUSH
51895: LD_INT 2
51897: EQUAL
51898: ST_TO_ADDR
51899: GO 52217
51901: LD_INT 20
51903: DOUBLE
51904: EQUAL
51905: IFTRUE 51909
51907: GO 51934
51909: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
51910: LD_ADDR_VAR 0 3
51914: PUSH
51915: LD_INT 6
51917: PPUSH
51918: LD_VAR 0 1
51922: PPUSH
51923: CALL_OW 321
51927: PUSH
51928: LD_INT 2
51930: EQUAL
51931: ST_TO_ADDR
51932: GO 52217
51934: LD_INT 22
51936: DOUBLE
51937: EQUAL
51938: IFTRUE 51948
51940: LD_INT 36
51942: DOUBLE
51943: EQUAL
51944: IFTRUE 51948
51946: GO 51973
51948: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
51949: LD_ADDR_VAR 0 3
51953: PUSH
51954: LD_INT 15
51956: PPUSH
51957: LD_VAR 0 1
51961: PPUSH
51962: CALL_OW 321
51966: PUSH
51967: LD_INT 2
51969: EQUAL
51970: ST_TO_ADDR
51971: GO 52217
51973: LD_INT 30
51975: DOUBLE
51976: EQUAL
51977: IFTRUE 51981
51979: GO 52006
51981: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
51982: LD_ADDR_VAR 0 3
51986: PUSH
51987: LD_INT 20
51989: PPUSH
51990: LD_VAR 0 1
51994: PPUSH
51995: CALL_OW 321
51999: PUSH
52000: LD_INT 2
52002: EQUAL
52003: ST_TO_ADDR
52004: GO 52217
52006: LD_INT 28
52008: DOUBLE
52009: EQUAL
52010: IFTRUE 52020
52012: LD_INT 21
52014: DOUBLE
52015: EQUAL
52016: IFTRUE 52020
52018: GO 52045
52020: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
52021: LD_ADDR_VAR 0 3
52025: PUSH
52026: LD_INT 21
52028: PPUSH
52029: LD_VAR 0 1
52033: PPUSH
52034: CALL_OW 321
52038: PUSH
52039: LD_INT 2
52041: EQUAL
52042: ST_TO_ADDR
52043: GO 52217
52045: LD_INT 16
52047: DOUBLE
52048: EQUAL
52049: IFTRUE 52053
52051: GO 52078
52053: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
52054: LD_ADDR_VAR 0 3
52058: PUSH
52059: LD_INT 84
52061: PPUSH
52062: LD_VAR 0 1
52066: PPUSH
52067: CALL_OW 321
52071: PUSH
52072: LD_INT 2
52074: EQUAL
52075: ST_TO_ADDR
52076: GO 52217
52078: LD_INT 19
52080: DOUBLE
52081: EQUAL
52082: IFTRUE 52092
52084: LD_INT 23
52086: DOUBLE
52087: EQUAL
52088: IFTRUE 52092
52090: GO 52117
52092: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
52093: LD_ADDR_VAR 0 3
52097: PUSH
52098: LD_INT 83
52100: PPUSH
52101: LD_VAR 0 1
52105: PPUSH
52106: CALL_OW 321
52110: PUSH
52111: LD_INT 2
52113: EQUAL
52114: ST_TO_ADDR
52115: GO 52217
52117: LD_INT 17
52119: DOUBLE
52120: EQUAL
52121: IFTRUE 52125
52123: GO 52150
52125: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
52126: LD_ADDR_VAR 0 3
52130: PUSH
52131: LD_INT 39
52133: PPUSH
52134: LD_VAR 0 1
52138: PPUSH
52139: CALL_OW 321
52143: PUSH
52144: LD_INT 2
52146: EQUAL
52147: ST_TO_ADDR
52148: GO 52217
52150: LD_INT 18
52152: DOUBLE
52153: EQUAL
52154: IFTRUE 52158
52156: GO 52183
52158: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
52159: LD_ADDR_VAR 0 3
52163: PUSH
52164: LD_INT 40
52166: PPUSH
52167: LD_VAR 0 1
52171: PPUSH
52172: CALL_OW 321
52176: PUSH
52177: LD_INT 2
52179: EQUAL
52180: ST_TO_ADDR
52181: GO 52217
52183: LD_INT 27
52185: DOUBLE
52186: EQUAL
52187: IFTRUE 52191
52189: GO 52216
52191: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
52192: LD_ADDR_VAR 0 3
52196: PUSH
52197: LD_INT 35
52199: PPUSH
52200: LD_VAR 0 1
52204: PPUSH
52205: CALL_OW 321
52209: PUSH
52210: LD_INT 2
52212: EQUAL
52213: ST_TO_ADDR
52214: GO 52217
52216: POP
// end ;
52217: LD_VAR 0 3
52221: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
52222: LD_INT 0
52224: PPUSH
52225: PPUSH
52226: PPUSH
52227: PPUSH
52228: PPUSH
52229: PPUSH
52230: PPUSH
52231: PPUSH
52232: PPUSH
52233: PPUSH
52234: PPUSH
// result := false ;
52235: LD_ADDR_VAR 0 6
52239: PUSH
52240: LD_INT 0
52242: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
52243: LD_VAR 0 1
52247: NOT
52248: PUSH
52249: LD_VAR 0 1
52253: PPUSH
52254: CALL_OW 266
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: IN
52269: NOT
52270: OR
52271: PUSH
52272: LD_VAR 0 2
52276: NOT
52277: OR
52278: PUSH
52279: LD_VAR 0 5
52283: PUSH
52284: LD_INT 0
52286: PUSH
52287: LD_INT 1
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: LD_INT 3
52295: PUSH
52296: LD_INT 4
52298: PUSH
52299: LD_INT 5
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: IN
52310: NOT
52311: OR
52312: PUSH
52313: LD_VAR 0 3
52317: PPUSH
52318: LD_VAR 0 4
52322: PPUSH
52323: CALL_OW 488
52327: NOT
52328: OR
52329: IFFALSE 52333
// exit ;
52331: GO 53069
// side := GetSide ( depot ) ;
52333: LD_ADDR_VAR 0 9
52337: PUSH
52338: LD_VAR 0 1
52342: PPUSH
52343: CALL_OW 255
52347: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
52348: LD_VAR 0 9
52352: PPUSH
52353: LD_VAR 0 2
52357: PPUSH
52358: CALL 51846 0 2
52362: NOT
52363: IFFALSE 52367
// exit ;
52365: GO 53069
// pom := GetBase ( depot ) ;
52367: LD_ADDR_VAR 0 10
52371: PUSH
52372: LD_VAR 0 1
52376: PPUSH
52377: CALL_OW 274
52381: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52382: LD_ADDR_VAR 0 11
52386: PUSH
52387: LD_VAR 0 2
52391: PPUSH
52392: LD_VAR 0 1
52396: PPUSH
52397: CALL_OW 248
52401: PPUSH
52402: CALL_OW 450
52406: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
52407: LD_VAR 0 10
52411: PPUSH
52412: LD_INT 1
52414: PPUSH
52415: CALL_OW 275
52419: PUSH
52420: LD_VAR 0 11
52424: PUSH
52425: LD_INT 1
52427: ARRAY
52428: GREATEREQUAL
52429: PUSH
52430: LD_VAR 0 10
52434: PPUSH
52435: LD_INT 2
52437: PPUSH
52438: CALL_OW 275
52442: PUSH
52443: LD_VAR 0 11
52447: PUSH
52448: LD_INT 2
52450: ARRAY
52451: GREATEREQUAL
52452: AND
52453: PUSH
52454: LD_VAR 0 10
52458: PPUSH
52459: LD_INT 3
52461: PPUSH
52462: CALL_OW 275
52466: PUSH
52467: LD_VAR 0 11
52471: PUSH
52472: LD_INT 3
52474: ARRAY
52475: GREATEREQUAL
52476: AND
52477: NOT
52478: IFFALSE 52482
// exit ;
52480: GO 53069
// if GetBType ( depot ) = b_depot then
52482: LD_VAR 0 1
52486: PPUSH
52487: CALL_OW 266
52491: PUSH
52492: LD_INT 0
52494: EQUAL
52495: IFFALSE 52507
// dist := 28 else
52497: LD_ADDR_VAR 0 14
52501: PUSH
52502: LD_INT 28
52504: ST_TO_ADDR
52505: GO 52515
// dist := 36 ;
52507: LD_ADDR_VAR 0 14
52511: PUSH
52512: LD_INT 36
52514: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
52515: LD_VAR 0 1
52519: PPUSH
52520: LD_VAR 0 3
52524: PPUSH
52525: LD_VAR 0 4
52529: PPUSH
52530: CALL_OW 297
52534: PUSH
52535: LD_VAR 0 14
52539: GREATER
52540: IFFALSE 52544
// exit ;
52542: GO 53069
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
52544: LD_ADDR_VAR 0 12
52548: PUSH
52549: LD_VAR 0 2
52553: PPUSH
52554: LD_VAR 0 3
52558: PPUSH
52559: LD_VAR 0 4
52563: PPUSH
52564: LD_VAR 0 5
52568: PPUSH
52569: LD_VAR 0 1
52573: PPUSH
52574: CALL_OW 248
52578: PPUSH
52579: LD_INT 0
52581: PPUSH
52582: CALL 53074 0 6
52586: ST_TO_ADDR
// if not hexes then
52587: LD_VAR 0 12
52591: NOT
52592: IFFALSE 52596
// exit ;
52594: GO 53069
// hex := GetHexInfo ( x , y ) ;
52596: LD_ADDR_VAR 0 15
52600: PUSH
52601: LD_VAR 0 3
52605: PPUSH
52606: LD_VAR 0 4
52610: PPUSH
52611: CALL_OW 546
52615: ST_TO_ADDR
// if hex [ 1 ] then
52616: LD_VAR 0 15
52620: PUSH
52621: LD_INT 1
52623: ARRAY
52624: IFFALSE 52628
// exit ;
52626: GO 53069
// height := hex [ 2 ] ;
52628: LD_ADDR_VAR 0 13
52632: PUSH
52633: LD_VAR 0 15
52637: PUSH
52638: LD_INT 2
52640: ARRAY
52641: ST_TO_ADDR
// for i = 1 to hexes do
52642: LD_ADDR_VAR 0 7
52646: PUSH
52647: DOUBLE
52648: LD_INT 1
52650: DEC
52651: ST_TO_ADDR
52652: LD_VAR 0 12
52656: PUSH
52657: FOR_TO
52658: IFFALSE 52988
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
52660: LD_VAR 0 12
52664: PUSH
52665: LD_VAR 0 7
52669: ARRAY
52670: PUSH
52671: LD_INT 1
52673: ARRAY
52674: PPUSH
52675: LD_VAR 0 12
52679: PUSH
52680: LD_VAR 0 7
52684: ARRAY
52685: PUSH
52686: LD_INT 2
52688: ARRAY
52689: PPUSH
52690: CALL_OW 488
52694: NOT
52695: PUSH
52696: LD_VAR 0 12
52700: PUSH
52701: LD_VAR 0 7
52705: ARRAY
52706: PUSH
52707: LD_INT 1
52709: ARRAY
52710: PPUSH
52711: LD_VAR 0 12
52715: PUSH
52716: LD_VAR 0 7
52720: ARRAY
52721: PUSH
52722: LD_INT 2
52724: ARRAY
52725: PPUSH
52726: CALL_OW 428
52730: PUSH
52731: LD_INT 0
52733: GREATER
52734: OR
52735: PUSH
52736: LD_VAR 0 12
52740: PUSH
52741: LD_VAR 0 7
52745: ARRAY
52746: PUSH
52747: LD_INT 1
52749: ARRAY
52750: PPUSH
52751: LD_VAR 0 12
52755: PUSH
52756: LD_VAR 0 7
52760: ARRAY
52761: PUSH
52762: LD_INT 2
52764: ARRAY
52765: PPUSH
52766: CALL_OW 351
52770: OR
52771: IFFALSE 52777
// exit ;
52773: POP
52774: POP
52775: GO 53069
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52777: LD_ADDR_VAR 0 8
52781: PUSH
52782: LD_VAR 0 12
52786: PUSH
52787: LD_VAR 0 7
52791: ARRAY
52792: PUSH
52793: LD_INT 1
52795: ARRAY
52796: PPUSH
52797: LD_VAR 0 12
52801: PUSH
52802: LD_VAR 0 7
52806: ARRAY
52807: PUSH
52808: LD_INT 2
52810: ARRAY
52811: PPUSH
52812: CALL_OW 546
52816: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
52817: LD_VAR 0 8
52821: PUSH
52822: LD_INT 1
52824: ARRAY
52825: PUSH
52826: LD_VAR 0 8
52830: PUSH
52831: LD_INT 2
52833: ARRAY
52834: PUSH
52835: LD_VAR 0 13
52839: PUSH
52840: LD_INT 2
52842: PLUS
52843: GREATER
52844: OR
52845: PUSH
52846: LD_VAR 0 8
52850: PUSH
52851: LD_INT 2
52853: ARRAY
52854: PUSH
52855: LD_VAR 0 13
52859: PUSH
52860: LD_INT 2
52862: MINUS
52863: LESS
52864: OR
52865: PUSH
52866: LD_VAR 0 8
52870: PUSH
52871: LD_INT 3
52873: ARRAY
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 8
52880: PUSH
52881: LD_INT 9
52883: PUSH
52884: LD_INT 10
52886: PUSH
52887: LD_INT 11
52889: PUSH
52890: LD_INT 12
52892: PUSH
52893: LD_INT 13
52895: PUSH
52896: LD_INT 16
52898: PUSH
52899: LD_INT 17
52901: PUSH
52902: LD_INT 18
52904: PUSH
52905: LD_INT 19
52907: PUSH
52908: LD_INT 20
52910: PUSH
52911: LD_INT 21
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: IN
52929: NOT
52930: OR
52931: PUSH
52932: LD_VAR 0 8
52936: PUSH
52937: LD_INT 5
52939: ARRAY
52940: NOT
52941: OR
52942: PUSH
52943: LD_VAR 0 8
52947: PUSH
52948: LD_INT 6
52950: ARRAY
52951: PUSH
52952: LD_INT 1
52954: PUSH
52955: LD_INT 2
52957: PUSH
52958: LD_INT 7
52960: PUSH
52961: LD_INT 9
52963: PUSH
52964: LD_INT 10
52966: PUSH
52967: LD_INT 11
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: IN
52978: NOT
52979: OR
52980: IFFALSE 52986
// exit ;
52982: POP
52983: POP
52984: GO 53069
// end ;
52986: GO 52657
52988: POP
52989: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
52990: LD_VAR 0 9
52994: PPUSH
52995: LD_VAR 0 3
52999: PPUSH
53000: LD_VAR 0 4
53004: PPUSH
53005: LD_INT 20
53007: PPUSH
53008: CALL 45021 0 4
53012: PUSH
53013: LD_INT 4
53015: ARRAY
53016: IFFALSE 53020
// exit ;
53018: GO 53069
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
53020: LD_VAR 0 2
53024: PUSH
53025: LD_INT 29
53027: PUSH
53028: LD_INT 30
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: IN
53035: PUSH
53036: LD_VAR 0 3
53040: PPUSH
53041: LD_VAR 0 4
53045: PPUSH
53046: LD_VAR 0 9
53050: PPUSH
53051: CALL_OW 440
53055: NOT
53056: AND
53057: IFFALSE 53061
// exit ;
53059: GO 53069
// result := true ;
53061: LD_ADDR_VAR 0 6
53065: PUSH
53066: LD_INT 1
53068: ST_TO_ADDR
// end ;
53069: LD_VAR 0 6
53073: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
53074: LD_INT 0
53076: PPUSH
53077: PPUSH
53078: PPUSH
53079: PPUSH
53080: PPUSH
53081: PPUSH
53082: PPUSH
53083: PPUSH
53084: PPUSH
53085: PPUSH
53086: PPUSH
53087: PPUSH
53088: PPUSH
53089: PPUSH
53090: PPUSH
53091: PPUSH
53092: PPUSH
53093: PPUSH
53094: PPUSH
53095: PPUSH
53096: PPUSH
53097: PPUSH
53098: PPUSH
53099: PPUSH
53100: PPUSH
53101: PPUSH
53102: PPUSH
53103: PPUSH
53104: PPUSH
53105: PPUSH
53106: PPUSH
53107: PPUSH
53108: PPUSH
53109: PPUSH
53110: PPUSH
53111: PPUSH
53112: PPUSH
53113: PPUSH
53114: PPUSH
53115: PPUSH
53116: PPUSH
53117: PPUSH
53118: PPUSH
53119: PPUSH
53120: PPUSH
53121: PPUSH
53122: PPUSH
53123: PPUSH
53124: PPUSH
53125: PPUSH
53126: PPUSH
53127: PPUSH
53128: PPUSH
53129: PPUSH
53130: PPUSH
53131: PPUSH
53132: PPUSH
53133: PPUSH
// result = [ ] ;
53134: LD_ADDR_VAR 0 7
53138: PUSH
53139: EMPTY
53140: ST_TO_ADDR
// temp_list = [ ] ;
53141: LD_ADDR_VAR 0 9
53145: PUSH
53146: EMPTY
53147: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
53148: LD_VAR 0 4
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: LD_INT 2
53161: PUSH
53162: LD_INT 3
53164: PUSH
53165: LD_INT 4
53167: PUSH
53168: LD_INT 5
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: IN
53179: NOT
53180: PUSH
53181: LD_VAR 0 1
53185: PUSH
53186: LD_INT 0
53188: PUSH
53189: LD_INT 1
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: IN
53196: PUSH
53197: LD_VAR 0 5
53201: PUSH
53202: LD_INT 1
53204: PUSH
53205: LD_INT 2
53207: PUSH
53208: LD_INT 3
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: IN
53216: NOT
53217: AND
53218: OR
53219: IFFALSE 53223
// exit ;
53221: GO 71614
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
53223: LD_VAR 0 1
53227: PUSH
53228: LD_INT 6
53230: PUSH
53231: LD_INT 7
53233: PUSH
53234: LD_INT 8
53236: PUSH
53237: LD_INT 13
53239: PUSH
53240: LD_INT 12
53242: PUSH
53243: LD_INT 15
53245: PUSH
53246: LD_INT 11
53248: PUSH
53249: LD_INT 14
53251: PUSH
53252: LD_INT 10
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: IN
53266: IFFALSE 53276
// btype = b_lab ;
53268: LD_ADDR_VAR 0 1
53272: PUSH
53273: LD_INT 6
53275: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
53276: LD_VAR 0 6
53280: PUSH
53281: LD_INT 0
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: IN
53295: NOT
53296: PUSH
53297: LD_VAR 0 1
53301: PUSH
53302: LD_INT 0
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: LD_INT 6
53316: PUSH
53317: LD_INT 36
53319: PUSH
53320: LD_INT 4
53322: PUSH
53323: LD_INT 5
53325: PUSH
53326: LD_INT 31
53328: PUSH
53329: LD_INT 32
53331: PUSH
53332: LD_INT 33
53334: PUSH
53335: EMPTY
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: IN
53348: NOT
53349: PUSH
53350: LD_VAR 0 6
53354: PUSH
53355: LD_INT 1
53357: EQUAL
53358: AND
53359: OR
53360: PUSH
53361: LD_VAR 0 1
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: IN
53376: NOT
53377: PUSH
53378: LD_VAR 0 6
53382: PUSH
53383: LD_INT 2
53385: EQUAL
53386: AND
53387: OR
53388: IFFALSE 53398
// mode = 0 ;
53390: LD_ADDR_VAR 0 6
53394: PUSH
53395: LD_INT 0
53397: ST_TO_ADDR
// case mode of 0 :
53398: LD_VAR 0 6
53402: PUSH
53403: LD_INT 0
53405: DOUBLE
53406: EQUAL
53407: IFTRUE 53411
53409: GO 64864
53411: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53412: LD_ADDR_VAR 0 11
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 0
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 0
53429: PUSH
53430: LD_INT 1
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 0
53460: PUSH
53461: LD_INT 1
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: NEG
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: LD_INT 2
53497: NEG
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 1
53547: NEG
53548: PUSH
53549: LD_INT 1
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 1
53558: PUSH
53559: LD_INT 3
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 0
53568: PUSH
53569: LD_INT 3
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: LD_INT 2
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53605: LD_ADDR_VAR 0 12
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: PUSH
53687: LD_INT 1
53689: NEG
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 2
53697: PUSH
53698: LD_INT 0
53700: PUSH
53701: EMPTY
53702: LIST
53703: LIST
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 1
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: LD_INT 0
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 2
53739: NEG
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 3
53762: NEG
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 3
53773: NEG
53774: PUSH
53775: LD_INT 1
53777: NEG
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53801: LD_ADDR_VAR 0 13
53805: PUSH
53806: LD_INT 0
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 0
53832: PUSH
53833: EMPTY
53834: LIST
53835: LIST
53836: PUSH
53837: LD_INT 1
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 1
53859: NEG
53860: PUSH
53861: LD_INT 0
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: LD_INT 1
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 1
53882: NEG
53883: PUSH
53884: LD_INT 2
53886: NEG
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 2
53936: NEG
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 2
53948: NEG
53949: PUSH
53950: LD_INT 3
53952: NEG
53953: PUSH
53954: EMPTY
53955: LIST
53956: LIST
53957: PUSH
53958: LD_INT 3
53960: NEG
53961: PUSH
53962: LD_INT 2
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 3
53972: NEG
53973: PUSH
53974: LD_INT 3
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54000: LD_ADDR_VAR 0 14
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: PUSH
54029: LD_INT 0
54031: PUSH
54032: EMPTY
54033: LIST
54034: LIST
54035: PUSH
54036: LD_INT 1
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 1
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: LD_INT 0
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: NEG
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 1
54081: NEG
54082: PUSH
54083: LD_INT 2
54085: NEG
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 0
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: PUSH
54105: LD_INT 1
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 1
54115: PUSH
54116: LD_INT 2
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 2
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 1
54146: NEG
54147: PUSH
54148: LD_INT 3
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 1
54169: PUSH
54170: LD_INT 2
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54196: LD_ADDR_VAR 0 15
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: LD_INT 0
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 1
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 2
54319: NEG
54320: PUSH
54321: LD_INT 0
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 2
54342: PUSH
54343: LD_INT 1
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 3
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 3
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: LIST
54375: LIST
54376: LIST
54377: LIST
54378: LIST
54379: LIST
54380: LIST
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54389: LD_ADDR_VAR 0 16
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: LD_INT 1
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: LD_INT 1
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: EMPTY
54497: LIST
54498: LIST
54499: PUSH
54500: LD_INT 1
54502: PUSH
54503: LD_INT 2
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 2
54512: NEG
54513: PUSH
54514: LD_INT 1
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: LD_INT 2
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 3
54536: PUSH
54537: LD_INT 2
54539: PUSH
54540: EMPTY
54541: LIST
54542: LIST
54543: PUSH
54544: LD_INT 3
54546: PUSH
54547: LD_INT 3
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 2
54556: PUSH
54557: LD_INT 3
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54582: LD_ADDR_VAR 0 17
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 0
54630: PUSH
54631: LD_INT 1
54633: PUSH
54634: EMPTY
54635: LIST
54636: LIST
54637: PUSH
54638: LD_INT 1
54640: NEG
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: NEG
54652: PUSH
54653: LD_INT 1
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 1
54663: NEG
54664: PUSH
54665: LD_INT 2
54667: NEG
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: LD_INT 2
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 1
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: LD_INT 1
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: LD_INT 2
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: PUSH
54735: LD_INT 0
54737: PUSH
54738: LD_INT 2
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 1
54747: NEG
54748: PUSH
54749: LD_INT 1
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 2
54758: NEG
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 2
54769: NEG
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: LD_INT 2
54781: NEG
54782: PUSH
54783: LD_INT 2
54785: NEG
54786: PUSH
54787: EMPTY
54788: LIST
54789: LIST
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54812: LD_ADDR_VAR 0 18
54816: PUSH
54817: LD_INT 0
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: LD_INT 0
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: LD_INT 1
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: NEG
54871: PUSH
54872: LD_INT 0
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: LD_INT 1
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 1
54893: NEG
54894: PUSH
54895: LD_INT 2
54897: NEG
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 0
54905: PUSH
54906: LD_INT 2
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: PUSH
54917: LD_INT 1
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 2
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 2
54937: PUSH
54938: LD_INT 1
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 2
54947: PUSH
54948: LD_INT 2
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: LD_INT 2
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 2
54988: NEG
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 2
54999: NEG
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: NEG
55012: PUSH
55013: LD_INT 2
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: EMPTY
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55042: LD_ADDR_VAR 0 19
55046: PUSH
55047: LD_INT 0
55049: PUSH
55050: LD_INT 0
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: PUSH
55057: LD_INT 0
55059: PUSH
55060: LD_INT 1
55062: NEG
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 1
55070: PUSH
55071: LD_INT 0
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: LD_INT 1
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 1
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: LD_INT 0
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 1
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 1
55123: NEG
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 0
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 1
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 2
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: LD_INT 1
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: LD_INT 2
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 2
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 2
55229: NEG
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: LD_INT 2
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: EMPTY
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55272: LD_ADDR_VAR 0 20
55276: PUSH
55277: LD_INT 0
55279: PUSH
55280: LD_INT 0
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 0
55289: PUSH
55290: LD_INT 1
55292: NEG
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 1
55300: PUSH
55301: LD_INT 0
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: LD_INT 1
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: LD_INT 1
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: LD_INT 0
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 1
55341: NEG
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: PUSH
55351: LD_INT 1
55353: NEG
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 0
55365: PUSH
55366: LD_INT 2
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: PUSH
55377: LD_INT 1
55379: NEG
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: PUSH
55388: LD_INT 0
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: LD_INT 1
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: LD_INT 2
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 2
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 2
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55502: LD_ADDR_VAR 0 21
55506: PUSH
55507: LD_INT 0
55509: PUSH
55510: LD_INT 0
55512: PUSH
55513: EMPTY
55514: LIST
55515: LIST
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: LD_INT 1
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 1
55530: PUSH
55531: LD_INT 0
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: LD_INT 1
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: LD_INT 1
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 0
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: LD_INT 1
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: LD_INT 2
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 0
55595: PUSH
55596: LD_INT 2
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: LD_INT 1
55609: NEG
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 2
55617: PUSH
55618: LD_INT 0
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 2
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: LD_INT 2
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 2
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 2
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: NEG
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 2
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 2
55701: NEG
55702: PUSH
55703: LD_INT 2
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: EMPTY
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55732: LD_ADDR_VAR 0 22
55736: PUSH
55737: LD_INT 0
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 0
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: PUSH
55761: LD_INT 0
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: LD_INT 0
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 1
55801: NEG
55802: PUSH
55803: LD_INT 1
55805: NEG
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 2
55817: NEG
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 1
55836: PUSH
55837: LD_INT 1
55839: NEG
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 2
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 2
55867: PUSH
55868: LD_INT 2
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 2
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 2
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 2
55919: NEG
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 2
55931: NEG
55932: PUSH
55933: LD_INT 2
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
55962: LD_ADDR_VAR 0 23
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: LD_INT 0
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 0
55979: PUSH
55980: LD_INT 1
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 0
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: LD_INT 1
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 1
56031: NEG
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: LD_INT 2
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 2
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: LD_INT 1
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 2
56097: PUSH
56098: LD_INT 2
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: LD_INT 2
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 2
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 2
56138: NEG
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: LD_INT 1
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: NEG
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: LD_INT 3
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: LD_INT 3
56189: NEG
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: LD_INT 2
56200: NEG
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 2
56208: PUSH
56209: LD_INT 1
56211: NEG
56212: PUSH
56213: EMPTY
56214: LIST
56215: LIST
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
56242: LD_ADDR_VAR 0 24
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: LD_INT 0
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 0
56259: PUSH
56260: LD_INT 1
56262: NEG
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: LD_INT 0
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: LD_INT 1
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 1
56300: NEG
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: PUSH
56309: LD_INT 1
56311: NEG
56312: PUSH
56313: LD_INT 1
56315: NEG
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: LD_INT 2
56327: NEG
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 1
56349: NEG
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: LD_INT 0
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 2
56367: PUSH
56368: LD_INT 1
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 2
56377: PUSH
56378: LD_INT 2
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: LD_INT 2
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 0
56397: PUSH
56398: LD_INT 2
56400: PUSH
56401: EMPTY
56402: LIST
56403: LIST
56404: PUSH
56405: LD_INT 1
56407: NEG
56408: PUSH
56409: LD_INT 1
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 2
56418: NEG
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PUSH
56427: LD_INT 2
56429: NEG
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 2
56441: NEG
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 2
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 3
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: LIST
56505: LIST
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
56518: LD_ADDR_VAR 0 25
56522: PUSH
56523: LD_INT 0
56525: PUSH
56526: LD_INT 0
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 0
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: LD_INT 0
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: LD_INT 1
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: LD_INT 1
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: LD_INT 0
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 1
56591: NEG
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: LD_INT 2
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 0
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 2
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 2
56653: PUSH
56654: LD_INT 2
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 2
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 2
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 2
56694: NEG
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: LD_INT 1
56709: NEG
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 2
56717: NEG
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 3
56729: PUSH
56730: LD_INT 1
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 3
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: LD_INT 3
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 1
56759: PUSH
56760: LD_INT 3
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
56792: LD_ADDR_VAR 0 26
56796: PUSH
56797: LD_INT 0
56799: PUSH
56800: LD_INT 0
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: LD_INT 1
56812: NEG
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 1
56820: PUSH
56821: LD_INT 0
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: LD_INT 1
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 0
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 1
56850: NEG
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 1
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: NEG
56874: PUSH
56875: LD_INT 2
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 0
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 2
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 2
56917: PUSH
56918: LD_INT 1
56920: PUSH
56921: EMPTY
56922: LIST
56923: LIST
56924: PUSH
56925: LD_INT 2
56927: PUSH
56928: LD_INT 2
56930: PUSH
56931: EMPTY
56932: LIST
56933: LIST
56934: PUSH
56935: LD_INT 1
56937: PUSH
56938: LD_INT 2
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: PUSH
56945: LD_INT 0
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: PUSH
56959: LD_INT 1
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 2
56968: NEG
56969: PUSH
56970: LD_INT 0
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: EMPTY
56986: LIST
56987: LIST
56988: PUSH
56989: LD_INT 2
56991: NEG
56992: PUSH
56993: LD_INT 2
56995: NEG
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: LD_INT 3
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: LD_INT 3
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: LD_INT 2
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 2
57034: NEG
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57068: LD_ADDR_VAR 0 27
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: LD_INT 0
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 1
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: LD_INT 1
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: LD_INT 0
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: NEG
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: LD_INT 2
57153: NEG
57154: PUSH
57155: EMPTY
57156: LIST
57157: LIST
57158: PUSH
57159: LD_INT 0
57161: PUSH
57162: LD_INT 2
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 1
57172: PUSH
57173: LD_INT 1
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 0
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 2
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: LD_INT 2
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 2
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 1
57233: NEG
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 2
57244: NEG
57245: PUSH
57246: LD_INT 0
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 2
57255: NEG
57256: PUSH
57257: LD_INT 1
57259: NEG
57260: PUSH
57261: EMPTY
57262: LIST
57263: LIST
57264: PUSH
57265: LD_INT 2
57267: NEG
57268: PUSH
57269: LD_INT 2
57271: NEG
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: NEG
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: EMPTY
57285: LIST
57286: LIST
57287: PUSH
57288: LD_INT 2
57290: NEG
57291: PUSH
57292: LD_INT 1
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 3
57301: NEG
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: PUSH
57311: LD_INT 3
57313: NEG
57314: PUSH
57315: LD_INT 2
57317: NEG
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57348: LD_ADDR_VAR 0 28
57352: PUSH
57353: LD_INT 0
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 0
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: PUSH
57377: LD_INT 0
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: LD_INT 1
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: PUSH
57404: LD_INT 1
57406: NEG
57407: PUSH
57408: LD_INT 0
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 1
57417: NEG
57418: PUSH
57419: LD_INT 1
57421: NEG
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 1
57429: NEG
57430: PUSH
57431: LD_INT 2
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 0
57441: PUSH
57442: LD_INT 2
57444: NEG
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 1
57452: PUSH
57453: LD_INT 1
57455: NEG
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: LD_INT 1
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 2
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: PUSH
57494: LD_INT 2
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: LD_INT 2
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: LD_INT 1
57517: PUSH
57518: EMPTY
57519: LIST
57520: LIST
57521: PUSH
57522: LD_INT 2
57524: NEG
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: LD_INT 2
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 2
57559: NEG
57560: PUSH
57561: LD_INT 3
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 1
57571: NEG
57572: PUSH
57573: LD_INT 3
57575: NEG
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 3
57583: NEG
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: LD_INT 2
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
57630: LD_ADDR_VAR 0 29
57634: PUSH
57635: LD_INT 0
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 0
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 0
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 1
57688: NEG
57689: PUSH
57690: LD_INT 0
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: NEG
57700: PUSH
57701: LD_INT 1
57703: NEG
57704: PUSH
57705: EMPTY
57706: LIST
57707: LIST
57708: PUSH
57709: LD_INT 1
57711: NEG
57712: PUSH
57713: LD_INT 2
57715: NEG
57716: PUSH
57717: EMPTY
57718: LIST
57719: LIST
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: LD_INT 2
57726: NEG
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: PUSH
57735: LD_INT 1
57737: NEG
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: LD_INT 0
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 2
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: PUSH
57766: LD_INT 2
57768: PUSH
57769: EMPTY
57770: LIST
57771: LIST
57772: PUSH
57773: LD_INT 0
57775: PUSH
57776: LD_INT 2
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 1
57785: NEG
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: LD_INT 1
57800: NEG
57801: PUSH
57802: EMPTY
57803: LIST
57804: LIST
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: LD_INT 2
57812: NEG
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 2
57820: NEG
57821: PUSH
57822: LD_INT 3
57824: NEG
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: LD_INT 1
57835: NEG
57836: PUSH
57837: EMPTY
57838: LIST
57839: LIST
57840: PUSH
57841: LD_INT 3
57843: PUSH
57844: LD_INT 1
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 1
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: LD_INT 1
57863: NEG
57864: PUSH
57865: LD_INT 2
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 3
57874: NEG
57875: PUSH
57876: LD_INT 2
57878: NEG
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57909: LD_ADDR_VAR 0 30
57913: PUSH
57914: LD_INT 0
57916: PUSH
57917: LD_INT 0
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 0
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 1
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 1
57947: PUSH
57948: LD_INT 1
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 1
57967: NEG
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 1
57990: NEG
57991: PUSH
57992: LD_INT 2
57994: NEG
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 2
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: LD_INT 1
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 2
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 2
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 2
58044: PUSH
58045: LD_INT 2
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: LD_INT 2
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: NEG
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: NEG
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 2
58086: NEG
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: LD_INT 3
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 1
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 3
58121: PUSH
58122: LD_INT 2
58124: PUSH
58125: EMPTY
58126: LIST
58127: LIST
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: LD_INT 3
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 2
58141: NEG
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58187: LD_ADDR_VAR 0 31
58191: PUSH
58192: LD_INT 0
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 0
58204: PUSH
58205: LD_INT 1
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 1
58215: PUSH
58216: LD_INT 0
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: EMPTY
58230: LIST
58231: LIST
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: LD_INT 1
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: NEG
58246: PUSH
58247: LD_INT 0
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 1
58268: NEG
58269: PUSH
58270: LD_INT 2
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 1
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: LD_INT 2
58291: PUSH
58292: LD_INT 0
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 2
58301: PUSH
58302: LD_INT 1
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 2
58311: PUSH
58312: LD_INT 2
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 1
58321: PUSH
58322: LD_INT 2
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 2
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: LD_INT 1
58341: NEG
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: LD_INT 2
58352: NEG
58353: PUSH
58354: LD_INT 1
58356: NEG
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: LD_INT 2
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 2
58376: NEG
58377: PUSH
58378: LD_INT 3
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 2
58388: PUSH
58389: LD_INT 1
58391: NEG
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: EMPTY
58414: LIST
58415: LIST
58416: PUSH
58417: LD_INT 1
58419: NEG
58420: PUSH
58421: LD_INT 2
58423: PUSH
58424: EMPTY
58425: LIST
58426: LIST
58427: PUSH
58428: LD_INT 3
58430: NEG
58431: PUSH
58432: LD_INT 2
58434: NEG
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: LIST
58454: LIST
58455: LIST
58456: LIST
58457: LIST
58458: LIST
58459: LIST
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58465: LD_ADDR_VAR 0 32
58469: PUSH
58470: LD_INT 0
58472: PUSH
58473: LD_INT 0
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 1
58485: NEG
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: PUSH
58491: LD_INT 1
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: LD_INT 1
58503: PUSH
58504: LD_INT 1
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: PUSH
58521: LD_INT 1
58523: NEG
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: PUSH
58532: LD_INT 1
58534: NEG
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: EMPTY
58553: LIST
58554: LIST
58555: PUSH
58556: LD_INT 0
58558: PUSH
58559: LD_INT 2
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: LD_INT 1
58572: NEG
58573: PUSH
58574: EMPTY
58575: LIST
58576: LIST
58577: PUSH
58578: LD_INT 2
58580: PUSH
58581: LD_INT 1
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 1
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 0
58610: PUSH
58611: LD_INT 2
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: NEG
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 2
58631: NEG
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 2
58642: NEG
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: LD_INT 3
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 1
58666: PUSH
58667: LD_INT 2
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 3
58677: PUSH
58678: LD_INT 2
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: LD_INT 3
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 3
58708: NEG
58709: PUSH
58710: LD_INT 1
58712: NEG
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: LIST
58731: LIST
58732: LIST
58733: LIST
58734: LIST
58735: LIST
58736: LIST
58737: LIST
58738: LIST
58739: LIST
58740: LIST
58741: LIST
58742: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
58743: LD_ADDR_VAR 0 33
58747: PUSH
58748: LD_INT 0
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 0
58760: PUSH
58761: LD_INT 1
58763: NEG
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 1
58771: PUSH
58772: LD_INT 0
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: LD_INT 1
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: PUSH
58799: LD_INT 1
58801: NEG
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 1
58824: NEG
58825: PUSH
58826: LD_INT 2
58828: NEG
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 1
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: PUSH
58845: LD_INT 2
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 2
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: LD_INT 1
58867: PUSH
58868: LD_INT 2
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: LD_INT 2
58880: PUSH
58881: EMPTY
58882: LIST
58883: LIST
58884: PUSH
58885: LD_INT 1
58887: NEG
58888: PUSH
58889: LD_INT 1
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 2
58898: NEG
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: EMPTY
58904: LIST
58905: LIST
58906: PUSH
58907: LD_INT 2
58909: NEG
58910: PUSH
58911: LD_INT 1
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 2
58921: NEG
58922: PUSH
58923: LD_INT 2
58925: NEG
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 2
58933: NEG
58934: PUSH
58935: LD_INT 3
58937: NEG
58938: PUSH
58939: EMPTY
58940: LIST
58941: LIST
58942: PUSH
58943: LD_INT 2
58945: PUSH
58946: LD_INT 1
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: PUSH
58957: LD_INT 1
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: LD_INT 3
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: LD_INT 2
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 3
58987: NEG
58988: PUSH
58989: LD_INT 2
58991: NEG
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: LIST
59009: LIST
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59022: LD_ADDR_VAR 0 34
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: LD_INT 1
59103: NEG
59104: PUSH
59105: LD_INT 2
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 0
59115: PUSH
59116: LD_INT 2
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 1
59126: PUSH
59127: LD_INT 1
59129: NEG
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: LD_INT 1
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 2
59147: PUSH
59148: LD_INT 2
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 1
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 1
59167: NEG
59168: PUSH
59169: LD_INT 1
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: PUSH
59176: LD_INT 2
59178: NEG
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 2
59189: NEG
59190: PUSH
59191: LD_INT 1
59193: NEG
59194: PUSH
59195: EMPTY
59196: LIST
59197: LIST
59198: PUSH
59199: LD_INT 2
59201: NEG
59202: PUSH
59203: LD_INT 2
59205: NEG
59206: PUSH
59207: EMPTY
59208: LIST
59209: LIST
59210: PUSH
59211: LD_INT 1
59213: NEG
59214: PUSH
59215: LD_INT 3
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 1
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: LD_INT 3
59236: PUSH
59237: LD_INT 2
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: LD_INT 3
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: PUSH
59254: LD_INT 2
59256: NEG
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 3
59267: NEG
59268: PUSH
59269: LD_INT 1
59271: NEG
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: EMPTY
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59302: LD_ADDR_VAR 0 35
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: LD_INT 0
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: LD_INT 1
59322: NEG
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: LD_INT 1
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: LD_INT 1
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: LD_INT 0
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: LD_INT 1
59371: NEG
59372: PUSH
59373: LD_INT 1
59375: NEG
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: LD_INT 2
59383: PUSH
59384: LD_INT 1
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: PUSH
59391: LD_INT 2
59393: NEG
59394: PUSH
59395: LD_INT 1
59397: NEG
59398: PUSH
59399: EMPTY
59400: LIST
59401: LIST
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59414: LD_ADDR_VAR 0 36
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: LD_INT 0
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 0
59431: PUSH
59432: LD_INT 1
59434: NEG
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 1
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 1
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 1
59483: NEG
59484: PUSH
59485: LD_INT 1
59487: NEG
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 1
59495: NEG
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: LD_INT 2
59510: PUSH
59511: EMPTY
59512: LIST
59513: LIST
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59526: LD_ADDR_VAR 0 37
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: LD_INT 1
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: LD_INT 0
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 0
59574: PUSH
59575: LD_INT 1
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: LD_INT 1
59584: NEG
59585: PUSH
59586: LD_INT 0
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: EMPTY
59602: LIST
59603: LIST
59604: PUSH
59605: LD_INT 1
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
59638: LD_ADDR_VAR 0 38
59642: PUSH
59643: LD_INT 0
59645: PUSH
59646: LD_INT 0
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: LD_INT 1
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 1
59666: PUSH
59667: LD_INT 0
59669: PUSH
59670: EMPTY
59671: LIST
59672: LIST
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: LD_INT 1
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: EMPTY
59691: LIST
59692: LIST
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: LD_INT 0
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: PUSH
59705: LD_INT 1
59707: NEG
59708: PUSH
59709: LD_INT 1
59711: NEG
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 2
59719: PUSH
59720: LD_INT 1
59722: PUSH
59723: EMPTY
59724: LIST
59725: LIST
59726: PUSH
59727: LD_INT 2
59729: NEG
59730: PUSH
59731: LD_INT 1
59733: NEG
59734: PUSH
59735: EMPTY
59736: LIST
59737: LIST
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
59750: LD_ADDR_VAR 0 39
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: EMPTY
59762: LIST
59763: LIST
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: LD_INT 1
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 1
59778: PUSH
59779: LD_INT 0
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: EMPTY
59793: LIST
59794: LIST
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: LD_INT 1
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: NEG
59809: PUSH
59810: LD_INT 0
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: LD_INT 1
59819: NEG
59820: PUSH
59821: LD_INT 1
59823: NEG
59824: PUSH
59825: EMPTY
59826: LIST
59827: LIST
59828: PUSH
59829: LD_INT 1
59831: NEG
59832: PUSH
59833: LD_INT 2
59835: NEG
59836: PUSH
59837: EMPTY
59838: LIST
59839: LIST
59840: PUSH
59841: LD_INT 1
59843: PUSH
59844: LD_INT 2
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: LIST
59859: LIST
59860: LIST
59861: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
59862: LD_ADDR_VAR 0 40
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: LD_INT 0
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: PUSH
59877: LD_INT 0
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: LD_INT 0
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: LD_INT 1
59903: PUSH
59904: EMPTY
59905: LIST
59906: LIST
59907: PUSH
59908: LD_INT 0
59910: PUSH
59911: LD_INT 1
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: LD_INT 1
59920: NEG
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: PUSH
59929: LD_INT 1
59931: NEG
59932: PUSH
59933: LD_INT 1
59935: NEG
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 1
59943: PUSH
59944: LD_INT 1
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: EMPTY
59964: LIST
59965: LIST
59966: LIST
59967: LIST
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59974: LD_ADDR_VAR 0 41
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: LD_INT 0
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 0
59991: PUSH
59992: LD_INT 1
59994: NEG
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 0
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 1
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 0
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: LD_INT 1
60032: NEG
60033: PUSH
60034: LD_INT 0
60036: PUSH
60037: EMPTY
60038: LIST
60039: LIST
60040: PUSH
60041: LD_INT 1
60043: NEG
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: LD_INT 2
60059: NEG
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 1
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 2
60078: PUSH
60079: LD_INT 0
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 2
60088: PUSH
60089: LD_INT 1
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 2
60098: PUSH
60099: LD_INT 2
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 1
60108: PUSH
60109: LD_INT 2
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 1
60118: NEG
60119: PUSH
60120: LD_INT 1
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 2
60129: NEG
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 2
60140: NEG
60141: PUSH
60142: LD_INT 1
60144: NEG
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 2
60152: NEG
60153: PUSH
60154: LD_INT 2
60156: NEG
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: PUSH
60162: LD_INT 2
60164: NEG
60165: PUSH
60166: LD_INT 3
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 2
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 3
60187: PUSH
60188: LD_INT 0
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: LD_INT 2
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: LD_INT 3
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: LD_INT 3
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: NEG
60238: PUSH
60239: LD_INT 1
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 3
60248: NEG
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 3
60259: NEG
60260: PUSH
60261: LD_INT 1
60263: NEG
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 3
60271: NEG
60272: PUSH
60273: LD_INT 2
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 3
60283: NEG
60284: PUSH
60285: LD_INT 3
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: LIST
60297: LIST
60298: LIST
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60324: LD_ADDR_VAR 0 42
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: PUSH
60339: LD_INT 0
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: LD_INT 0
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 1
60362: PUSH
60363: LD_INT 1
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 0
60372: PUSH
60373: LD_INT 1
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 1
60382: NEG
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 1
60393: NEG
60394: PUSH
60395: LD_INT 1
60397: NEG
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 1
60405: NEG
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: EMPTY
60412: LIST
60413: LIST
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: LD_INT 2
60420: NEG
60421: PUSH
60422: EMPTY
60423: LIST
60424: LIST
60425: PUSH
60426: LD_INT 1
60428: PUSH
60429: LD_INT 1
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: LD_INT 2
60439: PUSH
60440: LD_INT 1
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: LD_INT 2
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 1
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_INT 1
60479: NEG
60480: PUSH
60481: LD_INT 1
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 2
60490: NEG
60491: PUSH
60492: LD_INT 1
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: NEG
60503: PUSH
60504: LD_INT 2
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 2
60514: NEG
60515: PUSH
60516: LD_INT 3
60518: NEG
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: LD_INT 3
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: LD_INT 0
60538: PUSH
60539: LD_INT 3
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 1
60549: PUSH
60550: LD_INT 2
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 3
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 3
60570: PUSH
60571: LD_INT 3
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 2
60580: PUSH
60581: LD_INT 3
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 1
60590: PUSH
60591: LD_INT 3
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: LD_INT 3
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: LD_INT 2
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 3
60621: NEG
60622: PUSH
60623: LD_INT 2
60625: NEG
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: PUSH
60631: LD_INT 3
60633: NEG
60634: PUSH
60635: LD_INT 3
60637: NEG
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: LIST
60647: LIST
60648: LIST
60649: LIST
60650: LIST
60651: LIST
60652: LIST
60653: LIST
60654: LIST
60655: LIST
60656: LIST
60657: LIST
60658: LIST
60659: LIST
60660: LIST
60661: LIST
60662: LIST
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: LIST
60671: LIST
60672: LIST
60673: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60674: LD_ADDR_VAR 0 43
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 0
60691: PUSH
60692: LD_INT 1
60694: NEG
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 1
60712: PUSH
60713: LD_INT 1
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 0
60722: PUSH
60723: LD_INT 1
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: LD_INT 0
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: LD_INT 1
60747: NEG
60748: PUSH
60749: EMPTY
60750: LIST
60751: LIST
60752: PUSH
60753: LD_INT 1
60755: NEG
60756: PUSH
60757: LD_INT 2
60759: NEG
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: LD_INT 2
60770: NEG
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 1
60778: PUSH
60779: LD_INT 1
60781: NEG
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: PUSH
60787: LD_INT 2
60789: PUSH
60790: LD_INT 0
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 2
60799: PUSH
60800: LD_INT 1
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: LD_INT 1
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: LD_INT 2
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: LD_INT 1
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 2
60840: NEG
60841: PUSH
60842: LD_INT 0
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: NEG
60852: PUSH
60853: LD_INT 1
60855: NEG
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 1
60863: NEG
60864: PUSH
60865: LD_INT 3
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 0
60875: PUSH
60876: LD_INT 3
60878: NEG
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: PUSH
60884: LD_INT 1
60886: PUSH
60887: LD_INT 2
60889: NEG
60890: PUSH
60891: EMPTY
60892: LIST
60893: LIST
60894: PUSH
60895: LD_INT 2
60897: PUSH
60898: LD_INT 1
60900: NEG
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 3
60918: PUSH
60919: LD_INT 1
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 1
60928: PUSH
60929: LD_INT 3
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: LD_INT 3
60941: PUSH
60942: EMPTY
60943: LIST
60944: LIST
60945: PUSH
60946: LD_INT 1
60948: NEG
60949: PUSH
60950: LD_INT 2
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: NEG
60960: PUSH
60961: LD_INT 1
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 3
60970: NEG
60971: PUSH
60972: LD_INT 0
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: LD_INT 3
60981: NEG
60982: PUSH
60983: LD_INT 1
60985: NEG
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61022: LD_ADDR_VAR 0 44
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 0
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 1
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 1
61060: PUSH
61061: LD_INT 1
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 0
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 1
61080: NEG
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: EMPTY
61086: LIST
61087: LIST
61088: PUSH
61089: LD_INT 1
61091: NEG
61092: PUSH
61093: LD_INT 1
61095: NEG
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 1
61103: NEG
61104: PUSH
61105: LD_INT 2
61107: NEG
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: LD_INT 1
61118: NEG
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: PUSH
61124: LD_INT 2
61126: PUSH
61127: LD_INT 0
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 2
61136: PUSH
61137: LD_INT 1
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: LD_INT 2
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 1
61156: PUSH
61157: LD_INT 2
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: PUSH
61168: LD_INT 1
61170: PUSH
61171: EMPTY
61172: LIST
61173: LIST
61174: PUSH
61175: LD_INT 2
61177: NEG
61178: PUSH
61179: LD_INT 0
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: NEG
61189: PUSH
61190: LD_INT 1
61192: NEG
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: PUSH
61198: LD_INT 2
61200: NEG
61201: PUSH
61202: LD_INT 2
61204: NEG
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: LD_INT 3
61216: NEG
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: LD_INT 1
61227: NEG
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: LD_INT 3
61235: PUSH
61236: LD_INT 0
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 3
61245: PUSH
61246: LD_INT 1
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 3
61255: PUSH
61256: LD_INT 2
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 3
61265: PUSH
61266: LD_INT 3
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: PUSH
61273: LD_INT 2
61275: PUSH
61276: LD_INT 3
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: LD_INT 3
61296: NEG
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 3
61307: NEG
61308: PUSH
61309: LD_INT 1
61311: NEG
61312: PUSH
61313: EMPTY
61314: LIST
61315: LIST
61316: PUSH
61317: LD_INT 3
61319: NEG
61320: PUSH
61321: LD_INT 2
61323: NEG
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 3
61331: NEG
61332: PUSH
61333: LD_INT 3
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61372: LD_ADDR_VAR 0 45
61376: PUSH
61377: LD_INT 0
61379: PUSH
61380: LD_INT 0
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 0
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: LD_INT 0
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 1
61410: PUSH
61411: LD_INT 1
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 0
61420: PUSH
61421: LD_INT 1
61423: PUSH
61424: EMPTY
61425: LIST
61426: LIST
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: LD_INT 0
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 1
61441: NEG
61442: PUSH
61443: LD_INT 1
61445: NEG
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 1
61453: NEG
61454: PUSH
61455: LD_INT 2
61457: NEG
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 0
61465: PUSH
61466: LD_INT 2
61468: NEG
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 1
61476: PUSH
61477: LD_INT 1
61479: NEG
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 2
61487: PUSH
61488: LD_INT 1
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 2
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 2
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 2
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: LD_INT 1
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 2
61538: NEG
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 2
61550: NEG
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 2
61562: NEG
61563: PUSH
61564: LD_INT 3
61566: NEG
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 1
61574: NEG
61575: PUSH
61576: LD_INT 3
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 0
61586: PUSH
61587: LD_INT 3
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: LD_INT 2
61600: NEG
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 3
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 2
61628: PUSH
61629: LD_INT 3
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: LD_INT 3
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 0
61648: PUSH
61649: LD_INT 3
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: LD_INT 2
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 3
61669: NEG
61670: PUSH
61671: LD_INT 2
61673: NEG
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 3
61681: NEG
61682: PUSH
61683: LD_INT 3
61685: NEG
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: LIST
61714: LIST
61715: LIST
61716: LIST
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61722: LD_ADDR_VAR 0 46
61726: PUSH
61727: LD_INT 0
61729: PUSH
61730: LD_INT 0
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 0
61739: PUSH
61740: LD_INT 1
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 1
61750: PUSH
61751: LD_INT 0
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 1
61760: PUSH
61761: LD_INT 1
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 1
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: NEG
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: LD_INT 1
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: NEG
61804: PUSH
61805: LD_INT 2
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: LD_INT 2
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 1
61826: PUSH
61827: LD_INT 1
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 2
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 2
61847: PUSH
61848: LD_INT 1
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: LD_INT 2
61870: PUSH
61871: EMPTY
61872: LIST
61873: LIST
61874: PUSH
61875: LD_INT 1
61877: NEG
61878: PUSH
61879: LD_INT 1
61881: PUSH
61882: EMPTY
61883: LIST
61884: LIST
61885: PUSH
61886: LD_INT 2
61888: NEG
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: EMPTY
61894: LIST
61895: LIST
61896: PUSH
61897: LD_INT 2
61899: NEG
61900: PUSH
61901: LD_INT 1
61903: NEG
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: NEG
61912: PUSH
61913: LD_INT 3
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: LD_INT 3
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: LD_INT 2
61937: NEG
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 2
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 3
61956: PUSH
61957: LD_INT 0
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 3
61966: PUSH
61967: LD_INT 1
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 1
61976: PUSH
61977: LD_INT 3
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 0
61986: PUSH
61987: LD_INT 3
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 1
61996: NEG
61997: PUSH
61998: LD_INT 2
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 2
62007: NEG
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: LD_INT 0
62022: PUSH
62023: EMPTY
62024: LIST
62025: LIST
62026: PUSH
62027: LD_INT 3
62029: NEG
62030: PUSH
62031: LD_INT 1
62033: NEG
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: EMPTY
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62070: LD_ADDR_VAR 0 47
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 0
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: EMPTY
62103: LIST
62104: LIST
62105: PUSH
62106: LD_INT 1
62108: PUSH
62109: LD_INT 1
62111: PUSH
62112: EMPTY
62113: LIST
62114: LIST
62115: PUSH
62116: LD_INT 0
62118: PUSH
62119: LD_INT 1
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 0
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: LD_INT 1
62143: NEG
62144: PUSH
62145: EMPTY
62146: LIST
62147: LIST
62148: PUSH
62149: LD_INT 1
62151: NEG
62152: PUSH
62153: LD_INT 2
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 0
62163: PUSH
62164: LD_INT 2
62166: NEG
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: LD_INT 1
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 2
62197: NEG
62198: PUSH
62199: LD_INT 2
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62221: LD_ADDR_VAR 0 48
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 0
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 1
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: LD_INT 0
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: LD_INT 1
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 1
62302: NEG
62303: PUSH
62304: LD_INT 2
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 0
62314: PUSH
62315: LD_INT 2
62317: NEG
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: LD_INT 1
62325: PUSH
62326: LD_INT 1
62328: NEG
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: PUSH
62334: LD_INT 2
62336: PUSH
62337: LD_INT 0
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 2
62346: PUSH
62347: LD_INT 1
62349: PUSH
62350: EMPTY
62351: LIST
62352: LIST
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62368: LD_ADDR_VAR 0 49
62372: PUSH
62373: LD_INT 0
62375: PUSH
62376: LD_INT 0
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: LD_INT 1
62388: NEG
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 1
62396: PUSH
62397: LD_INT 0
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: LD_INT 1
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 0
62416: PUSH
62417: LD_INT 1
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 1
62426: NEG
62427: PUSH
62428: LD_INT 0
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: LD_INT 1
62441: NEG
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: PUSH
62447: LD_INT 1
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 2
62460: PUSH
62461: LD_INT 0
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 2
62470: PUSH
62471: LD_INT 1
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 2
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: EMPTY
62485: LIST
62486: LIST
62487: PUSH
62488: LD_INT 1
62490: PUSH
62491: LD_INT 2
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: LIST
62502: LIST
62503: LIST
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62512: LD_ADDR_VAR 0 50
62516: PUSH
62517: LD_INT 0
62519: PUSH
62520: LD_INT 0
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: LD_INT 0
62529: PUSH
62530: LD_INT 1
62532: NEG
62533: PUSH
62534: EMPTY
62535: LIST
62536: LIST
62537: PUSH
62538: LD_INT 1
62540: PUSH
62541: LD_INT 0
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 1
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 0
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 1
62570: NEG
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: LD_INT 1
62596: PUSH
62597: EMPTY
62598: LIST
62599: LIST
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: LD_INT 2
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 1
62613: PUSH
62614: LD_INT 2
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PUSH
62621: LD_INT 0
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: EMPTY
62628: LIST
62629: LIST
62630: PUSH
62631: LD_INT 1
62633: NEG
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62656: LD_ADDR_VAR 0 51
62660: PUSH
62661: LD_INT 0
62663: PUSH
62664: LD_INT 0
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: EMPTY
62679: LIST
62680: LIST
62681: PUSH
62682: LD_INT 1
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: EMPTY
62689: LIST
62690: LIST
62691: PUSH
62692: LD_INT 1
62694: PUSH
62695: LD_INT 1
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 0
62704: PUSH
62705: LD_INT 1
62707: PUSH
62708: EMPTY
62709: LIST
62710: LIST
62711: PUSH
62712: LD_INT 1
62714: NEG
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 1
62725: NEG
62726: PUSH
62727: LD_INT 1
62729: NEG
62730: PUSH
62731: EMPTY
62732: LIST
62733: LIST
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: LD_INT 2
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: LD_INT 2
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: LD_INT 1
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 2
62768: NEG
62769: PUSH
62770: LD_INT 0
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 2
62779: NEG
62780: PUSH
62781: LD_INT 1
62783: NEG
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62803: LD_ADDR_VAR 0 52
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: LD_INT 0
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 0
62820: PUSH
62821: LD_INT 1
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 1
62831: PUSH
62832: LD_INT 0
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 1
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 0
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 1
62872: NEG
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 1
62896: NEG
62897: PUSH
62898: LD_INT 1
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 2
62907: NEG
62908: PUSH
62909: LD_INT 0
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 2
62918: NEG
62919: PUSH
62920: LD_INT 1
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 2
62930: NEG
62931: PUSH
62932: LD_INT 2
62934: NEG
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: EMPTY
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62954: LD_ADDR_VAR 0 53
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 0
62971: PUSH
62972: LD_INT 1
62974: NEG
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 1
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: LD_INT 1
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 0
63002: PUSH
63003: LD_INT 1
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 1
63012: NEG
63013: PUSH
63014: LD_INT 0
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 1
63023: NEG
63024: PUSH
63025: LD_INT 1
63027: NEG
63028: PUSH
63029: EMPTY
63030: LIST
63031: LIST
63032: PUSH
63033: LD_INT 1
63035: NEG
63036: PUSH
63037: LD_INT 2
63039: NEG
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 0
63047: PUSH
63048: LD_INT 2
63050: NEG
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 1
63058: PUSH
63059: LD_INT 1
63061: NEG
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: LD_INT 2
63069: PUSH
63070: LD_INT 0
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 2
63079: PUSH
63080: LD_INT 1
63082: PUSH
63083: EMPTY
63084: LIST
63085: LIST
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: LD_INT 2
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 1
63099: PUSH
63100: LD_INT 2
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 0
63109: PUSH
63110: LD_INT 2
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 1
63119: NEG
63120: PUSH
63121: LD_INT 1
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: PUSH
63128: LD_INT 2
63130: NEG
63131: PUSH
63132: LD_INT 0
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: PUSH
63139: LD_INT 2
63141: NEG
63142: PUSH
63143: LD_INT 1
63145: NEG
63146: PUSH
63147: EMPTY
63148: LIST
63149: LIST
63150: PUSH
63151: LD_INT 2
63153: NEG
63154: PUSH
63155: LD_INT 2
63157: NEG
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: LIST
63183: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63184: LD_ADDR_VAR 0 54
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: LD_INT 0
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 0
63201: PUSH
63202: LD_INT 1
63204: NEG
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: PUSH
63210: LD_INT 1
63212: PUSH
63213: LD_INT 0
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 1
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 0
63232: PUSH
63233: LD_INT 1
63235: PUSH
63236: EMPTY
63237: LIST
63238: LIST
63239: PUSH
63240: LD_INT 1
63242: NEG
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: LD_INT 1
63257: NEG
63258: PUSH
63259: EMPTY
63260: LIST
63261: LIST
63262: PUSH
63263: LD_INT 1
63265: NEG
63266: PUSH
63267: LD_INT 2
63269: NEG
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: LD_INT 2
63280: NEG
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 1
63288: PUSH
63289: LD_INT 1
63291: NEG
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 2
63299: PUSH
63300: LD_INT 0
63302: PUSH
63303: EMPTY
63304: LIST
63305: LIST
63306: PUSH
63307: LD_INT 2
63309: PUSH
63310: LD_INT 1
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 2
63319: PUSH
63320: LD_INT 2
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 1
63329: PUSH
63330: LD_INT 2
63332: PUSH
63333: EMPTY
63334: LIST
63335: LIST
63336: PUSH
63337: LD_INT 0
63339: PUSH
63340: LD_INT 2
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 1
63349: NEG
63350: PUSH
63351: LD_INT 1
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: PUSH
63358: LD_INT 2
63360: NEG
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: PUSH
63369: LD_INT 2
63371: NEG
63372: PUSH
63373: LD_INT 1
63375: NEG
63376: PUSH
63377: EMPTY
63378: LIST
63379: LIST
63380: PUSH
63381: LD_INT 2
63383: NEG
63384: PUSH
63385: LD_INT 2
63387: NEG
63388: PUSH
63389: EMPTY
63390: LIST
63391: LIST
63392: PUSH
63393: EMPTY
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63414: LD_ADDR_VAR 0 55
63418: PUSH
63419: LD_INT 0
63421: PUSH
63422: LD_INT 0
63424: PUSH
63425: EMPTY
63426: LIST
63427: LIST
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: LD_INT 1
63442: PUSH
63443: LD_INT 0
63445: PUSH
63446: EMPTY
63447: LIST
63448: LIST
63449: PUSH
63450: LD_INT 1
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 0
63462: PUSH
63463: LD_INT 1
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 1
63483: NEG
63484: PUSH
63485: LD_INT 1
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 1
63495: NEG
63496: PUSH
63497: LD_INT 2
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 0
63507: PUSH
63508: LD_INT 2
63510: NEG
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 1
63518: PUSH
63519: LD_INT 1
63521: NEG
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PUSH
63527: LD_INT 2
63529: PUSH
63530: LD_INT 0
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PUSH
63537: LD_INT 2
63539: PUSH
63540: LD_INT 1
63542: PUSH
63543: EMPTY
63544: LIST
63545: LIST
63546: PUSH
63547: LD_INT 2
63549: PUSH
63550: LD_INT 2
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 1
63559: PUSH
63560: LD_INT 2
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 0
63569: PUSH
63570: LD_INT 2
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 1
63579: NEG
63580: PUSH
63581: LD_INT 1
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 2
63590: NEG
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 2
63601: NEG
63602: PUSH
63603: LD_INT 1
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: LD_INT 2
63613: NEG
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: LIST
63627: LIST
63628: LIST
63629: LIST
63630: LIST
63631: LIST
63632: LIST
63633: LIST
63634: LIST
63635: LIST
63636: LIST
63637: LIST
63638: LIST
63639: LIST
63640: LIST
63641: LIST
63642: LIST
63643: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63644: LD_ADDR_VAR 0 56
63648: PUSH
63649: LD_INT 0
63651: PUSH
63652: LD_INT 0
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: LD_INT 1
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: LD_INT 0
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 1
63682: PUSH
63683: LD_INT 1
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 0
63692: PUSH
63693: LD_INT 1
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 1
63702: NEG
63703: PUSH
63704: LD_INT 0
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PUSH
63723: LD_INT 1
63725: NEG
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: LD_INT 2
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 1
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 2
63759: PUSH
63760: LD_INT 0
63762: PUSH
63763: EMPTY
63764: LIST
63765: LIST
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: LD_INT 1
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 2
63779: PUSH
63780: LD_INT 2
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 1
63789: PUSH
63790: LD_INT 2
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: LD_INT 2
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 1
63809: NEG
63810: PUSH
63811: LD_INT 1
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 2
63820: NEG
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 2
63831: NEG
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: NEG
63844: PUSH
63845: LD_INT 2
63847: NEG
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: LIST
63857: LIST
63858: LIST
63859: LIST
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63874: LD_ADDR_VAR 0 57
63878: PUSH
63879: LD_INT 0
63881: PUSH
63882: LD_INT 0
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 0
63891: PUSH
63892: LD_INT 1
63894: NEG
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 1
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: LD_INT 1
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 1
63932: NEG
63933: PUSH
63934: LD_INT 0
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 1
63943: NEG
63944: PUSH
63945: LD_INT 1
63947: NEG
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: LD_INT 2
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 0
63967: PUSH
63968: LD_INT 2
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 1
63978: PUSH
63979: LD_INT 1
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 2
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 2
63999: PUSH
64000: LD_INT 1
64002: PUSH
64003: EMPTY
64004: LIST
64005: LIST
64006: PUSH
64007: LD_INT 2
64009: PUSH
64010: LD_INT 2
64012: PUSH
64013: EMPTY
64014: LIST
64015: LIST
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: LD_INT 2
64022: PUSH
64023: EMPTY
64024: LIST
64025: LIST
64026: PUSH
64027: LD_INT 0
64029: PUSH
64030: LD_INT 2
64032: PUSH
64033: EMPTY
64034: LIST
64035: LIST
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: LD_INT 1
64043: PUSH
64044: EMPTY
64045: LIST
64046: LIST
64047: PUSH
64048: LD_INT 2
64050: NEG
64051: PUSH
64052: LD_INT 0
64054: PUSH
64055: EMPTY
64056: LIST
64057: LIST
64058: PUSH
64059: LD_INT 2
64061: NEG
64062: PUSH
64063: LD_INT 1
64065: NEG
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 2
64073: NEG
64074: PUSH
64075: LD_INT 2
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64104: LD_ADDR_VAR 0 58
64108: PUSH
64109: LD_INT 0
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: PUSH
64119: LD_INT 0
64121: PUSH
64122: LD_INT 1
64124: NEG
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 1
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 1
64142: PUSH
64143: LD_INT 1
64145: PUSH
64146: EMPTY
64147: LIST
64148: LIST
64149: PUSH
64150: LD_INT 0
64152: PUSH
64153: LD_INT 1
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 1
64162: NEG
64163: PUSH
64164: LD_INT 0
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 1
64173: NEG
64174: PUSH
64175: LD_INT 1
64177: NEG
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 1
64185: NEG
64186: PUSH
64187: LD_INT 2
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 0
64197: PUSH
64198: LD_INT 2
64200: NEG
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 1
64208: PUSH
64209: LD_INT 1
64211: NEG
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 2
64219: PUSH
64220: LD_INT 0
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 2
64229: PUSH
64230: LD_INT 1
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_INT 2
64239: PUSH
64240: LD_INT 2
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: PUSH
64247: LD_INT 1
64249: PUSH
64250: LD_INT 2
64252: PUSH
64253: EMPTY
64254: LIST
64255: LIST
64256: PUSH
64257: LD_INT 0
64259: PUSH
64260: LD_INT 2
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: LD_INT 1
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 2
64280: NEG
64281: PUSH
64282: LD_INT 0
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: LD_INT 1
64295: NEG
64296: PUSH
64297: EMPTY
64298: LIST
64299: LIST
64300: PUSH
64301: LD_INT 2
64303: NEG
64304: PUSH
64305: LD_INT 2
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: LIST
64317: LIST
64318: LIST
64319: LIST
64320: LIST
64321: LIST
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: LIST
64329: LIST
64330: LIST
64331: LIST
64332: LIST
64333: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64334: LD_ADDR_VAR 0 59
64338: PUSH
64339: LD_INT 0
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 0
64351: PUSH
64352: LD_INT 1
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 1
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 1
64372: PUSH
64373: LD_INT 1
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 0
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 1
64392: NEG
64393: PUSH
64394: LD_INT 0
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 1
64403: NEG
64404: PUSH
64405: LD_INT 1
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64422: LD_ADDR_VAR 0 60
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 0
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: LD_INT 1
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 1
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: LD_INT 1
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 0
64470: PUSH
64471: LD_INT 1
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 1
64480: NEG
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: PUSH
64489: LD_INT 1
64491: NEG
64492: PUSH
64493: LD_INT 1
64495: NEG
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64510: LD_ADDR_VAR 0 61
64514: PUSH
64515: LD_INT 0
64517: PUSH
64518: LD_INT 0
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: PUSH
64525: LD_INT 0
64527: PUSH
64528: LD_INT 1
64530: NEG
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 1
64538: PUSH
64539: LD_INT 0
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 1
64548: PUSH
64549: LD_INT 1
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 0
64558: PUSH
64559: LD_INT 1
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 1
64568: NEG
64569: PUSH
64570: LD_INT 0
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 1
64579: NEG
64580: PUSH
64581: LD_INT 1
64583: NEG
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64598: LD_ADDR_VAR 0 62
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: LD_INT 0
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: LD_INT 1
64618: NEG
64619: PUSH
64620: EMPTY
64621: LIST
64622: LIST
64623: PUSH
64624: LD_INT 1
64626: PUSH
64627: LD_INT 0
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 1
64636: PUSH
64637: LD_INT 1
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: PUSH
64644: LD_INT 0
64646: PUSH
64647: LD_INT 1
64649: PUSH
64650: EMPTY
64651: LIST
64652: LIST
64653: PUSH
64654: LD_INT 1
64656: NEG
64657: PUSH
64658: LD_INT 0
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: NEG
64668: PUSH
64669: LD_INT 1
64671: NEG
64672: PUSH
64673: EMPTY
64674: LIST
64675: LIST
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64686: LD_ADDR_VAR 0 63
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: LD_INT 0
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 0
64703: PUSH
64704: LD_INT 1
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 1
64714: PUSH
64715: LD_INT 0
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 1
64724: PUSH
64725: LD_INT 1
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: LD_INT 1
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 1
64744: NEG
64745: PUSH
64746: LD_INT 0
64748: PUSH
64749: EMPTY
64750: LIST
64751: LIST
64752: PUSH
64753: LD_INT 1
64755: NEG
64756: PUSH
64757: LD_INT 1
64759: NEG
64760: PUSH
64761: EMPTY
64762: LIST
64763: LIST
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
64774: LD_ADDR_VAR 0 64
64778: PUSH
64779: LD_INT 0
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 0
64791: PUSH
64792: LD_INT 1
64794: NEG
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 1
64802: PUSH
64803: LD_INT 0
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: PUSH
64813: LD_INT 1
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 0
64822: PUSH
64823: LD_INT 1
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 1
64832: NEG
64833: PUSH
64834: LD_INT 0
64836: PUSH
64837: EMPTY
64838: LIST
64839: LIST
64840: PUSH
64841: LD_INT 1
64843: NEG
64844: PUSH
64845: LD_INT 1
64847: NEG
64848: PUSH
64849: EMPTY
64850: LIST
64851: LIST
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: LIST
64861: ST_TO_ADDR
// end ; 1 :
64862: GO 70759
64864: LD_INT 1
64866: DOUBLE
64867: EQUAL
64868: IFTRUE 64872
64870: GO 67495
64872: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64873: LD_ADDR_VAR 0 11
64877: PUSH
64878: LD_INT 1
64880: NEG
64881: PUSH
64882: LD_INT 3
64884: NEG
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 0
64892: PUSH
64893: LD_INT 3
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 1
64903: PUSH
64904: LD_INT 2
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: LIST
64916: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64917: LD_ADDR_VAR 0 12
64921: PUSH
64922: LD_INT 2
64924: PUSH
64925: LD_INT 1
64927: NEG
64928: PUSH
64929: EMPTY
64930: LIST
64931: LIST
64932: PUSH
64933: LD_INT 3
64935: PUSH
64936: LD_INT 0
64938: PUSH
64939: EMPTY
64940: LIST
64941: LIST
64942: PUSH
64943: LD_INT 3
64945: PUSH
64946: LD_INT 1
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: LIST
64957: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64958: LD_ADDR_VAR 0 13
64962: PUSH
64963: LD_INT 3
64965: PUSH
64966: LD_INT 2
64968: PUSH
64969: EMPTY
64970: LIST
64971: LIST
64972: PUSH
64973: LD_INT 3
64975: PUSH
64976: LD_INT 3
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 2
64985: PUSH
64986: LD_INT 3
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: LIST
64997: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64998: LD_ADDR_VAR 0 14
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: LD_INT 3
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 0
65015: PUSH
65016: LD_INT 3
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 1
65025: NEG
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: EMPTY
65031: LIST
65032: LIST
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: LIST
65038: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65039: LD_ADDR_VAR 0 15
65043: PUSH
65044: LD_INT 2
65046: NEG
65047: PUSH
65048: LD_INT 1
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 3
65057: NEG
65058: PUSH
65059: LD_INT 0
65061: PUSH
65062: EMPTY
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 3
65068: NEG
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65083: LD_ADDR_VAR 0 16
65087: PUSH
65088: LD_INT 2
65090: NEG
65091: PUSH
65092: LD_INT 3
65094: NEG
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 3
65102: NEG
65103: PUSH
65104: LD_INT 2
65106: NEG
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 3
65114: NEG
65115: PUSH
65116: LD_INT 3
65118: NEG
65119: PUSH
65120: EMPTY
65121: LIST
65122: LIST
65123: PUSH
65124: EMPTY
65125: LIST
65126: LIST
65127: LIST
65128: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65129: LD_ADDR_VAR 0 17
65133: PUSH
65134: LD_INT 1
65136: NEG
65137: PUSH
65138: LD_INT 3
65140: NEG
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 0
65148: PUSH
65149: LD_INT 3
65151: NEG
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 1
65159: PUSH
65160: LD_INT 2
65162: NEG
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: LIST
65172: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65173: LD_ADDR_VAR 0 18
65177: PUSH
65178: LD_INT 2
65180: PUSH
65181: LD_INT 1
65183: NEG
65184: PUSH
65185: EMPTY
65186: LIST
65187: LIST
65188: PUSH
65189: LD_INT 3
65191: PUSH
65192: LD_INT 0
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 3
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: EMPTY
65206: LIST
65207: LIST
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: LIST
65213: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65214: LD_ADDR_VAR 0 19
65218: PUSH
65219: LD_INT 3
65221: PUSH
65222: LD_INT 2
65224: PUSH
65225: EMPTY
65226: LIST
65227: LIST
65228: PUSH
65229: LD_INT 3
65231: PUSH
65232: LD_INT 3
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 2
65241: PUSH
65242: LD_INT 3
65244: PUSH
65245: EMPTY
65246: LIST
65247: LIST
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: LIST
65253: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65254: LD_ADDR_VAR 0 20
65258: PUSH
65259: LD_INT 1
65261: PUSH
65262: LD_INT 3
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 0
65271: PUSH
65272: LD_INT 3
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 1
65281: NEG
65282: PUSH
65283: LD_INT 2
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: EMPTY
65291: LIST
65292: LIST
65293: LIST
65294: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65295: LD_ADDR_VAR 0 21
65299: PUSH
65300: LD_INT 2
65302: NEG
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: EMPTY
65308: LIST
65309: LIST
65310: PUSH
65311: LD_INT 3
65313: NEG
65314: PUSH
65315: LD_INT 0
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 3
65324: NEG
65325: PUSH
65326: LD_INT 1
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: EMPTY
65335: LIST
65336: LIST
65337: LIST
65338: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65339: LD_ADDR_VAR 0 22
65343: PUSH
65344: LD_INT 2
65346: NEG
65347: PUSH
65348: LD_INT 3
65350: NEG
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 3
65358: NEG
65359: PUSH
65360: LD_INT 2
65362: NEG
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 3
65370: NEG
65371: PUSH
65372: LD_INT 3
65374: NEG
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: LIST
65384: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
65385: LD_ADDR_VAR 0 23
65389: PUSH
65390: LD_INT 0
65392: PUSH
65393: LD_INT 3
65395: NEG
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 1
65403: NEG
65404: PUSH
65405: LD_INT 4
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: LD_INT 3
65418: NEG
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: LIST
65428: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
65429: LD_ADDR_VAR 0 24
65433: PUSH
65434: LD_INT 3
65436: PUSH
65437: LD_INT 0
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 3
65446: PUSH
65447: LD_INT 1
65449: NEG
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 4
65457: PUSH
65458: LD_INT 1
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: LIST
65469: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
65470: LD_ADDR_VAR 0 25
65474: PUSH
65475: LD_INT 3
65477: PUSH
65478: LD_INT 3
65480: PUSH
65481: EMPTY
65482: LIST
65483: LIST
65484: PUSH
65485: LD_INT 4
65487: PUSH
65488: LD_INT 3
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 3
65497: PUSH
65498: LD_INT 4
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: LIST
65509: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
65510: LD_ADDR_VAR 0 26
65514: PUSH
65515: LD_INT 0
65517: PUSH
65518: LD_INT 3
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 1
65527: PUSH
65528: LD_INT 4
65530: PUSH
65531: EMPTY
65532: LIST
65533: LIST
65534: PUSH
65535: LD_INT 1
65537: NEG
65538: PUSH
65539: LD_INT 3
65541: PUSH
65542: EMPTY
65543: LIST
65544: LIST
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: LIST
65550: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
65551: LD_ADDR_VAR 0 27
65555: PUSH
65556: LD_INT 3
65558: NEG
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 3
65569: NEG
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 4
65580: NEG
65581: PUSH
65582: LD_INT 1
65584: NEG
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: LIST
65594: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
65595: LD_ADDR_VAR 0 28
65599: PUSH
65600: LD_INT 3
65602: NEG
65603: PUSH
65604: LD_INT 3
65606: NEG
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 3
65614: NEG
65615: PUSH
65616: LD_INT 4
65618: NEG
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 4
65626: NEG
65627: PUSH
65628: LD_INT 3
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: LIST
65640: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
65641: LD_ADDR_VAR 0 29
65645: PUSH
65646: LD_INT 1
65648: NEG
65649: PUSH
65650: LD_INT 3
65652: NEG
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 0
65660: PUSH
65661: LD_INT 3
65663: NEG
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: PUSH
65672: LD_INT 2
65674: NEG
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: LD_INT 4
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 0
65694: PUSH
65695: LD_INT 4
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: LD_INT 3
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 1
65716: NEG
65717: PUSH
65718: LD_INT 5
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 0
65728: PUSH
65729: LD_INT 5
65731: NEG
65732: PUSH
65733: EMPTY
65734: LIST
65735: LIST
65736: PUSH
65737: LD_INT 1
65739: PUSH
65740: LD_INT 4
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 1
65750: NEG
65751: PUSH
65752: LD_INT 6
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 0
65762: PUSH
65763: LD_INT 6
65765: NEG
65766: PUSH
65767: EMPTY
65768: LIST
65769: LIST
65770: PUSH
65771: LD_INT 1
65773: PUSH
65774: LD_INT 5
65776: NEG
65777: PUSH
65778: EMPTY
65779: LIST
65780: LIST
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
65796: LD_ADDR_VAR 0 30
65800: PUSH
65801: LD_INT 2
65803: PUSH
65804: LD_INT 1
65806: NEG
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 3
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 3
65824: PUSH
65825: LD_INT 1
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 3
65834: PUSH
65835: LD_INT 1
65837: NEG
65838: PUSH
65839: EMPTY
65840: LIST
65841: LIST
65842: PUSH
65843: LD_INT 4
65845: PUSH
65846: LD_INT 0
65848: PUSH
65849: EMPTY
65850: LIST
65851: LIST
65852: PUSH
65853: LD_INT 4
65855: PUSH
65856: LD_INT 1
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 4
65865: PUSH
65866: LD_INT 1
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 5
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 5
65886: PUSH
65887: LD_INT 1
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: PUSH
65894: LD_INT 5
65896: PUSH
65897: LD_INT 1
65899: NEG
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 6
65907: PUSH
65908: LD_INT 0
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 6
65917: PUSH
65918: LD_INT 1
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: EMPTY
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
65939: LD_ADDR_VAR 0 31
65943: PUSH
65944: LD_INT 3
65946: PUSH
65947: LD_INT 2
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 3
65956: PUSH
65957: LD_INT 3
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 2
65966: PUSH
65967: LD_INT 3
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: PUSH
65974: LD_INT 4
65976: PUSH
65977: LD_INT 3
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: LD_INT 4
65986: PUSH
65987: LD_INT 4
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 3
65996: PUSH
65997: LD_INT 4
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 5
66006: PUSH
66007: LD_INT 4
66009: PUSH
66010: EMPTY
66011: LIST
66012: LIST
66013: PUSH
66014: LD_INT 5
66016: PUSH
66017: LD_INT 5
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 4
66026: PUSH
66027: LD_INT 5
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 6
66036: PUSH
66037: LD_INT 5
66039: PUSH
66040: EMPTY
66041: LIST
66042: LIST
66043: PUSH
66044: LD_INT 6
66046: PUSH
66047: LD_INT 6
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 5
66056: PUSH
66057: LD_INT 6
66059: PUSH
66060: EMPTY
66061: LIST
66062: LIST
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: LIST
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: LIST
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
66078: LD_ADDR_VAR 0 32
66082: PUSH
66083: LD_INT 1
66085: PUSH
66086: LD_INT 3
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 0
66095: PUSH
66096: LD_INT 3
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 1
66105: NEG
66106: PUSH
66107: LD_INT 2
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 1
66116: PUSH
66117: LD_INT 4
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: PUSH
66124: LD_INT 0
66126: PUSH
66127: LD_INT 4
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 1
66136: NEG
66137: PUSH
66138: LD_INT 3
66140: PUSH
66141: EMPTY
66142: LIST
66143: LIST
66144: PUSH
66145: LD_INT 1
66147: PUSH
66148: LD_INT 5
66150: PUSH
66151: EMPTY
66152: LIST
66153: LIST
66154: PUSH
66155: LD_INT 0
66157: PUSH
66158: LD_INT 5
66160: PUSH
66161: EMPTY
66162: LIST
66163: LIST
66164: PUSH
66165: LD_INT 1
66167: NEG
66168: PUSH
66169: LD_INT 4
66171: PUSH
66172: EMPTY
66173: LIST
66174: LIST
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: LD_INT 6
66181: PUSH
66182: EMPTY
66183: LIST
66184: LIST
66185: PUSH
66186: LD_INT 0
66188: PUSH
66189: LD_INT 6
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: LD_INT 1
66198: NEG
66199: PUSH
66200: LD_INT 5
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: LIST
66217: LIST
66218: LIST
66219: LIST
66220: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
66221: LD_ADDR_VAR 0 33
66225: PUSH
66226: LD_INT 2
66228: NEG
66229: PUSH
66230: LD_INT 1
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 3
66239: NEG
66240: PUSH
66241: LD_INT 0
66243: PUSH
66244: EMPTY
66245: LIST
66246: LIST
66247: PUSH
66248: LD_INT 3
66250: NEG
66251: PUSH
66252: LD_INT 1
66254: NEG
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 3
66262: NEG
66263: PUSH
66264: LD_INT 1
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 4
66273: NEG
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 4
66284: NEG
66285: PUSH
66286: LD_INT 1
66288: NEG
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 4
66296: NEG
66297: PUSH
66298: LD_INT 1
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 5
66307: NEG
66308: PUSH
66309: LD_INT 0
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 5
66318: NEG
66319: PUSH
66320: LD_INT 1
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 5
66330: NEG
66331: PUSH
66332: LD_INT 1
66334: PUSH
66335: EMPTY
66336: LIST
66337: LIST
66338: PUSH
66339: LD_INT 6
66341: NEG
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 6
66352: NEG
66353: PUSH
66354: LD_INT 1
66356: NEG
66357: PUSH
66358: EMPTY
66359: LIST
66360: LIST
66361: PUSH
66362: EMPTY
66363: LIST
66364: LIST
66365: LIST
66366: LIST
66367: LIST
66368: LIST
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
66376: LD_ADDR_VAR 0 34
66380: PUSH
66381: LD_INT 2
66383: NEG
66384: PUSH
66385: LD_INT 3
66387: NEG
66388: PUSH
66389: EMPTY
66390: LIST
66391: LIST
66392: PUSH
66393: LD_INT 3
66395: NEG
66396: PUSH
66397: LD_INT 2
66399: NEG
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 3
66407: NEG
66408: PUSH
66409: LD_INT 3
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 3
66419: NEG
66420: PUSH
66421: LD_INT 4
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 4
66431: NEG
66432: PUSH
66433: LD_INT 3
66435: NEG
66436: PUSH
66437: EMPTY
66438: LIST
66439: LIST
66440: PUSH
66441: LD_INT 4
66443: NEG
66444: PUSH
66445: LD_INT 4
66447: NEG
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 4
66455: NEG
66456: PUSH
66457: LD_INT 5
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 5
66467: NEG
66468: PUSH
66469: LD_INT 4
66471: NEG
66472: PUSH
66473: EMPTY
66474: LIST
66475: LIST
66476: PUSH
66477: LD_INT 5
66479: NEG
66480: PUSH
66481: LD_INT 5
66483: NEG
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 5
66491: NEG
66492: PUSH
66493: LD_INT 6
66495: NEG
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: PUSH
66501: LD_INT 6
66503: NEG
66504: PUSH
66505: LD_INT 5
66507: NEG
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 6
66515: NEG
66516: PUSH
66517: LD_INT 6
66519: NEG
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: LIST
66529: LIST
66530: LIST
66531: LIST
66532: LIST
66533: LIST
66534: LIST
66535: LIST
66536: LIST
66537: LIST
66538: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
66539: LD_ADDR_VAR 0 41
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: LD_INT 2
66549: NEG
66550: PUSH
66551: EMPTY
66552: LIST
66553: LIST
66554: PUSH
66555: LD_INT 1
66557: NEG
66558: PUSH
66559: LD_INT 3
66561: NEG
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 1
66569: PUSH
66570: LD_INT 2
66572: NEG
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: LIST
66582: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
66583: LD_ADDR_VAR 0 42
66587: PUSH
66588: LD_INT 2
66590: PUSH
66591: LD_INT 0
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PUSH
66598: LD_INT 2
66600: PUSH
66601: LD_INT 1
66603: NEG
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: LD_INT 3
66611: PUSH
66612: LD_INT 1
66614: PUSH
66615: EMPTY
66616: LIST
66617: LIST
66618: PUSH
66619: EMPTY
66620: LIST
66621: LIST
66622: LIST
66623: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
66624: LD_ADDR_VAR 0 43
66628: PUSH
66629: LD_INT 2
66631: PUSH
66632: LD_INT 2
66634: PUSH
66635: EMPTY
66636: LIST
66637: LIST
66638: PUSH
66639: LD_INT 3
66641: PUSH
66642: LD_INT 2
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 2
66651: PUSH
66652: LD_INT 3
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: LIST
66663: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
66664: LD_ADDR_VAR 0 44
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: LD_INT 2
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: PUSH
66682: LD_INT 3
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 1
66691: NEG
66692: PUSH
66693: LD_INT 2
66695: PUSH
66696: EMPTY
66697: LIST
66698: LIST
66699: PUSH
66700: EMPTY
66701: LIST
66702: LIST
66703: LIST
66704: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66705: LD_ADDR_VAR 0 45
66709: PUSH
66710: LD_INT 2
66712: NEG
66713: PUSH
66714: LD_INT 0
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: LD_INT 2
66723: NEG
66724: PUSH
66725: LD_INT 1
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: LD_INT 3
66734: NEG
66735: PUSH
66736: LD_INT 1
66738: NEG
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: LIST
66748: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
66749: LD_ADDR_VAR 0 46
66753: PUSH
66754: LD_INT 2
66756: NEG
66757: PUSH
66758: LD_INT 2
66760: NEG
66761: PUSH
66762: EMPTY
66763: LIST
66764: LIST
66765: PUSH
66766: LD_INT 2
66768: NEG
66769: PUSH
66770: LD_INT 3
66772: NEG
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 3
66780: NEG
66781: PUSH
66782: LD_INT 2
66784: NEG
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: EMPTY
66791: LIST
66792: LIST
66793: LIST
66794: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
66795: LD_ADDR_VAR 0 47
66799: PUSH
66800: LD_INT 2
66802: NEG
66803: PUSH
66804: LD_INT 3
66806: NEG
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 1
66814: NEG
66815: PUSH
66816: LD_INT 3
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: EMPTY
66825: LIST
66826: LIST
66827: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66828: LD_ADDR_VAR 0 48
66832: PUSH
66833: LD_INT 1
66835: PUSH
66836: LD_INT 2
66838: NEG
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 2
66846: PUSH
66847: LD_INT 1
66849: NEG
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
66859: LD_ADDR_VAR 0 49
66863: PUSH
66864: LD_INT 3
66866: PUSH
66867: LD_INT 1
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 3
66876: PUSH
66877: LD_INT 2
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: EMPTY
66885: LIST
66886: LIST
66887: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
66888: LD_ADDR_VAR 0 50
66892: PUSH
66893: LD_INT 2
66895: PUSH
66896: LD_INT 3
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 1
66905: PUSH
66906: LD_INT 3
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: EMPTY
66914: LIST
66915: LIST
66916: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66917: LD_ADDR_VAR 0 51
66921: PUSH
66922: LD_INT 1
66924: NEG
66925: PUSH
66926: LD_INT 2
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 2
66935: NEG
66936: PUSH
66937: LD_INT 1
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
66948: LD_ADDR_VAR 0 52
66952: PUSH
66953: LD_INT 3
66955: NEG
66956: PUSH
66957: LD_INT 1
66959: NEG
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 3
66967: NEG
66968: PUSH
66969: LD_INT 2
66971: NEG
66972: PUSH
66973: EMPTY
66974: LIST
66975: LIST
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66981: LD_ADDR_VAR 0 53
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: LD_INT 3
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 0
67000: PUSH
67001: LD_INT 3
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 1
67011: PUSH
67012: LD_INT 2
67014: NEG
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: LIST
67024: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67025: LD_ADDR_VAR 0 54
67029: PUSH
67030: LD_INT 2
67032: PUSH
67033: LD_INT 1
67035: NEG
67036: PUSH
67037: EMPTY
67038: LIST
67039: LIST
67040: PUSH
67041: LD_INT 3
67043: PUSH
67044: LD_INT 0
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: PUSH
67051: LD_INT 3
67053: PUSH
67054: LD_INT 1
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: PUSH
67061: EMPTY
67062: LIST
67063: LIST
67064: LIST
67065: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67066: LD_ADDR_VAR 0 55
67070: PUSH
67071: LD_INT 3
67073: PUSH
67074: LD_INT 2
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 3
67083: PUSH
67084: LD_INT 3
67086: PUSH
67087: EMPTY
67088: LIST
67089: LIST
67090: PUSH
67091: LD_INT 2
67093: PUSH
67094: LD_INT 3
67096: PUSH
67097: EMPTY
67098: LIST
67099: LIST
67100: PUSH
67101: EMPTY
67102: LIST
67103: LIST
67104: LIST
67105: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67106: LD_ADDR_VAR 0 56
67110: PUSH
67111: LD_INT 1
67113: PUSH
67114: LD_INT 3
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 0
67123: PUSH
67124: LD_INT 3
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 1
67133: NEG
67134: PUSH
67135: LD_INT 2
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: LIST
67146: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67147: LD_ADDR_VAR 0 57
67151: PUSH
67152: LD_INT 2
67154: NEG
67155: PUSH
67156: LD_INT 1
67158: PUSH
67159: EMPTY
67160: LIST
67161: LIST
67162: PUSH
67163: LD_INT 3
67165: NEG
67166: PUSH
67167: LD_INT 0
67169: PUSH
67170: EMPTY
67171: LIST
67172: LIST
67173: PUSH
67174: LD_INT 3
67176: NEG
67177: PUSH
67178: LD_INT 1
67180: NEG
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: LIST
67190: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67191: LD_ADDR_VAR 0 58
67195: PUSH
67196: LD_INT 2
67198: NEG
67199: PUSH
67200: LD_INT 3
67202: NEG
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: LD_INT 3
67210: NEG
67211: PUSH
67212: LD_INT 2
67214: NEG
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 3
67222: NEG
67223: PUSH
67224: LD_INT 3
67226: NEG
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: LIST
67236: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
67237: LD_ADDR_VAR 0 59
67241: PUSH
67242: LD_INT 1
67244: NEG
67245: PUSH
67246: LD_INT 2
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 0
67256: PUSH
67257: LD_INT 2
67259: NEG
67260: PUSH
67261: EMPTY
67262: LIST
67263: LIST
67264: PUSH
67265: LD_INT 1
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: LIST
67280: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
67281: LD_ADDR_VAR 0 60
67285: PUSH
67286: LD_INT 1
67288: PUSH
67289: LD_INT 1
67291: NEG
67292: PUSH
67293: EMPTY
67294: LIST
67295: LIST
67296: PUSH
67297: LD_INT 2
67299: PUSH
67300: LD_INT 0
67302: PUSH
67303: EMPTY
67304: LIST
67305: LIST
67306: PUSH
67307: LD_INT 2
67309: PUSH
67310: LD_INT 1
67312: PUSH
67313: EMPTY
67314: LIST
67315: LIST
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: LIST
67321: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
67322: LD_ADDR_VAR 0 61
67326: PUSH
67327: LD_INT 2
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: EMPTY
67334: LIST
67335: LIST
67336: PUSH
67337: LD_INT 2
67339: PUSH
67340: LD_INT 2
67342: PUSH
67343: EMPTY
67344: LIST
67345: LIST
67346: PUSH
67347: LD_INT 1
67349: PUSH
67350: LD_INT 2
67352: PUSH
67353: EMPTY
67354: LIST
67355: LIST
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: LIST
67361: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
67362: LD_ADDR_VAR 0 62
67366: PUSH
67367: LD_INT 1
67369: PUSH
67370: LD_INT 2
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 0
67379: PUSH
67380: LD_INT 2
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: LD_INT 1
67389: NEG
67390: PUSH
67391: LD_INT 1
67393: PUSH
67394: EMPTY
67395: LIST
67396: LIST
67397: PUSH
67398: EMPTY
67399: LIST
67400: LIST
67401: LIST
67402: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
67403: LD_ADDR_VAR 0 63
67407: PUSH
67408: LD_INT 1
67410: NEG
67411: PUSH
67412: LD_INT 1
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: PUSH
67419: LD_INT 2
67421: NEG
67422: PUSH
67423: LD_INT 0
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 2
67432: NEG
67433: PUSH
67434: LD_INT 1
67436: NEG
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: LIST
67446: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67447: LD_ADDR_VAR 0 64
67451: PUSH
67452: LD_INT 1
67454: NEG
67455: PUSH
67456: LD_INT 2
67458: NEG
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 2
67466: NEG
67467: PUSH
67468: LD_INT 1
67470: NEG
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 2
67478: NEG
67479: PUSH
67480: LD_INT 2
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: LIST
67492: ST_TO_ADDR
// end ; 2 :
67493: GO 70759
67495: LD_INT 2
67497: DOUBLE
67498: EQUAL
67499: IFTRUE 67503
67501: GO 70758
67503: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
67504: LD_ADDR_VAR 0 29
67508: PUSH
67509: LD_INT 4
67511: PUSH
67512: LD_INT 0
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 4
67521: PUSH
67522: LD_INT 1
67524: NEG
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 5
67532: PUSH
67533: LD_INT 0
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 5
67542: PUSH
67543: LD_INT 1
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 4
67552: PUSH
67553: LD_INT 1
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: LD_INT 3
67562: PUSH
67563: LD_INT 0
67565: PUSH
67566: EMPTY
67567: LIST
67568: LIST
67569: PUSH
67570: LD_INT 3
67572: PUSH
67573: LD_INT 1
67575: NEG
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: LD_INT 3
67583: PUSH
67584: LD_INT 2
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 5
67594: PUSH
67595: LD_INT 2
67597: PUSH
67598: EMPTY
67599: LIST
67600: LIST
67601: PUSH
67602: LD_INT 3
67604: PUSH
67605: LD_INT 3
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: LD_INT 3
67614: PUSH
67615: LD_INT 2
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 4
67624: PUSH
67625: LD_INT 3
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: PUSH
67632: LD_INT 4
67634: PUSH
67635: LD_INT 4
67637: PUSH
67638: EMPTY
67639: LIST
67640: LIST
67641: PUSH
67642: LD_INT 3
67644: PUSH
67645: LD_INT 4
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 2
67654: PUSH
67655: LD_INT 3
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 2
67664: PUSH
67665: LD_INT 2
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 4
67674: PUSH
67675: LD_INT 2
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 2
67684: PUSH
67685: LD_INT 4
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 0
67694: PUSH
67695: LD_INT 4
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 0
67704: PUSH
67705: LD_INT 3
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: LD_INT 1
67714: PUSH
67715: LD_INT 4
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 1
67724: PUSH
67725: LD_INT 5
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: PUSH
67732: LD_INT 0
67734: PUSH
67735: LD_INT 5
67737: PUSH
67738: EMPTY
67739: LIST
67740: LIST
67741: PUSH
67742: LD_INT 1
67744: NEG
67745: PUSH
67746: LD_INT 4
67748: PUSH
67749: EMPTY
67750: LIST
67751: LIST
67752: PUSH
67753: LD_INT 1
67755: NEG
67756: PUSH
67757: LD_INT 3
67759: PUSH
67760: EMPTY
67761: LIST
67762: LIST
67763: PUSH
67764: LD_INT 2
67766: PUSH
67767: LD_INT 5
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: PUSH
67774: LD_INT 2
67776: NEG
67777: PUSH
67778: LD_INT 3
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: PUSH
67785: LD_INT 3
67787: NEG
67788: PUSH
67789: LD_INT 0
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 3
67798: NEG
67799: PUSH
67800: LD_INT 1
67802: NEG
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 2
67810: NEG
67811: PUSH
67812: LD_INT 0
67814: PUSH
67815: EMPTY
67816: LIST
67817: LIST
67818: PUSH
67819: LD_INT 2
67821: NEG
67822: PUSH
67823: LD_INT 1
67825: PUSH
67826: EMPTY
67827: LIST
67828: LIST
67829: PUSH
67830: LD_INT 3
67832: NEG
67833: PUSH
67834: LD_INT 1
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 4
67843: NEG
67844: PUSH
67845: LD_INT 0
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 4
67854: NEG
67855: PUSH
67856: LD_INT 1
67858: NEG
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 4
67866: NEG
67867: PUSH
67868: LD_INT 2
67870: NEG
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: PUSH
67876: LD_INT 2
67878: NEG
67879: PUSH
67880: LD_INT 2
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 4
67889: NEG
67890: PUSH
67891: LD_INT 4
67893: NEG
67894: PUSH
67895: EMPTY
67896: LIST
67897: LIST
67898: PUSH
67899: LD_INT 4
67901: NEG
67902: PUSH
67903: LD_INT 5
67905: NEG
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 3
67913: NEG
67914: PUSH
67915: LD_INT 4
67917: NEG
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 3
67925: NEG
67926: PUSH
67927: LD_INT 3
67929: NEG
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: PUSH
67935: LD_INT 4
67937: NEG
67938: PUSH
67939: LD_INT 3
67941: NEG
67942: PUSH
67943: EMPTY
67944: LIST
67945: LIST
67946: PUSH
67947: LD_INT 5
67949: NEG
67950: PUSH
67951: LD_INT 4
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 5
67961: NEG
67962: PUSH
67963: LD_INT 5
67965: NEG
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 3
67973: NEG
67974: PUSH
67975: LD_INT 5
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 5
67985: NEG
67986: PUSH
67987: LD_INT 3
67989: NEG
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: EMPTY
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: LIST
68018: LIST
68019: LIST
68020: LIST
68021: LIST
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: LIST
68028: LIST
68029: LIST
68030: LIST
68031: LIST
68032: LIST
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: LIST
68038: LIST
68039: LIST
68040: LIST
68041: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
68042: LD_ADDR_VAR 0 30
68046: PUSH
68047: LD_INT 4
68049: PUSH
68050: LD_INT 4
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 4
68059: PUSH
68060: LD_INT 3
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 5
68069: PUSH
68070: LD_INT 4
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: LD_INT 5
68079: PUSH
68080: LD_INT 5
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: PUSH
68087: LD_INT 4
68089: PUSH
68090: LD_INT 5
68092: PUSH
68093: EMPTY
68094: LIST
68095: LIST
68096: PUSH
68097: LD_INT 3
68099: PUSH
68100: LD_INT 4
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 3
68109: PUSH
68110: LD_INT 3
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 5
68119: PUSH
68120: LD_INT 3
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: LD_INT 3
68129: PUSH
68130: LD_INT 5
68132: PUSH
68133: EMPTY
68134: LIST
68135: LIST
68136: PUSH
68137: LD_INT 0
68139: PUSH
68140: LD_INT 3
68142: PUSH
68143: EMPTY
68144: LIST
68145: LIST
68146: PUSH
68147: LD_INT 0
68149: PUSH
68150: LD_INT 2
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 1
68159: PUSH
68160: LD_INT 3
68162: PUSH
68163: EMPTY
68164: LIST
68165: LIST
68166: PUSH
68167: LD_INT 1
68169: PUSH
68170: LD_INT 4
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: PUSH
68177: LD_INT 0
68179: PUSH
68180: LD_INT 4
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 1
68189: NEG
68190: PUSH
68191: LD_INT 3
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 1
68200: NEG
68201: PUSH
68202: LD_INT 2
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 2
68211: PUSH
68212: LD_INT 4
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 2
68221: NEG
68222: PUSH
68223: LD_INT 2
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 4
68232: NEG
68233: PUSH
68234: LD_INT 0
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 4
68243: NEG
68244: PUSH
68245: LD_INT 1
68247: NEG
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 3
68255: NEG
68256: PUSH
68257: LD_INT 0
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 3
68266: NEG
68267: PUSH
68268: LD_INT 1
68270: PUSH
68271: EMPTY
68272: LIST
68273: LIST
68274: PUSH
68275: LD_INT 4
68277: NEG
68278: PUSH
68279: LD_INT 1
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 5
68288: NEG
68289: PUSH
68290: LD_INT 0
68292: PUSH
68293: EMPTY
68294: LIST
68295: LIST
68296: PUSH
68297: LD_INT 5
68299: NEG
68300: PUSH
68301: LD_INT 1
68303: NEG
68304: PUSH
68305: EMPTY
68306: LIST
68307: LIST
68308: PUSH
68309: LD_INT 5
68311: NEG
68312: PUSH
68313: LD_INT 2
68315: NEG
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 3
68323: NEG
68324: PUSH
68325: LD_INT 2
68327: PUSH
68328: EMPTY
68329: LIST
68330: LIST
68331: PUSH
68332: LD_INT 3
68334: NEG
68335: PUSH
68336: LD_INT 3
68338: NEG
68339: PUSH
68340: EMPTY
68341: LIST
68342: LIST
68343: PUSH
68344: LD_INT 3
68346: NEG
68347: PUSH
68348: LD_INT 4
68350: NEG
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 2
68358: NEG
68359: PUSH
68360: LD_INT 3
68362: NEG
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 2
68370: NEG
68371: PUSH
68372: LD_INT 2
68374: NEG
68375: PUSH
68376: EMPTY
68377: LIST
68378: LIST
68379: PUSH
68380: LD_INT 3
68382: NEG
68383: PUSH
68384: LD_INT 2
68386: NEG
68387: PUSH
68388: EMPTY
68389: LIST
68390: LIST
68391: PUSH
68392: LD_INT 4
68394: NEG
68395: PUSH
68396: LD_INT 3
68398: NEG
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 4
68406: NEG
68407: PUSH
68408: LD_INT 4
68410: NEG
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 2
68418: NEG
68419: PUSH
68420: LD_INT 4
68422: NEG
68423: PUSH
68424: EMPTY
68425: LIST
68426: LIST
68427: PUSH
68428: LD_INT 4
68430: NEG
68431: PUSH
68432: LD_INT 2
68434: NEG
68435: PUSH
68436: EMPTY
68437: LIST
68438: LIST
68439: PUSH
68440: LD_INT 0
68442: PUSH
68443: LD_INT 4
68445: NEG
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 0
68453: PUSH
68454: LD_INT 5
68456: NEG
68457: PUSH
68458: EMPTY
68459: LIST
68460: LIST
68461: PUSH
68462: LD_INT 1
68464: PUSH
68465: LD_INT 4
68467: NEG
68468: PUSH
68469: EMPTY
68470: LIST
68471: LIST
68472: PUSH
68473: LD_INT 1
68475: PUSH
68476: LD_INT 3
68478: NEG
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 0
68486: PUSH
68487: LD_INT 3
68489: NEG
68490: PUSH
68491: EMPTY
68492: LIST
68493: LIST
68494: PUSH
68495: LD_INT 1
68497: NEG
68498: PUSH
68499: LD_INT 4
68501: NEG
68502: PUSH
68503: EMPTY
68504: LIST
68505: LIST
68506: PUSH
68507: LD_INT 1
68509: NEG
68510: PUSH
68511: LD_INT 5
68513: NEG
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 2
68521: PUSH
68522: LD_INT 3
68524: NEG
68525: PUSH
68526: EMPTY
68527: LIST
68528: LIST
68529: PUSH
68530: LD_INT 2
68532: NEG
68533: PUSH
68534: LD_INT 5
68536: NEG
68537: PUSH
68538: EMPTY
68539: LIST
68540: LIST
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: LIST
68546: LIST
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: LIST
68576: LIST
68577: LIST
68578: LIST
68579: LIST
68580: LIST
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
68589: LD_ADDR_VAR 0 31
68593: PUSH
68594: LD_INT 0
68596: PUSH
68597: LD_INT 4
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: PUSH
68604: LD_INT 0
68606: PUSH
68607: LD_INT 3
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 1
68616: PUSH
68617: LD_INT 4
68619: PUSH
68620: EMPTY
68621: LIST
68622: LIST
68623: PUSH
68624: LD_INT 1
68626: PUSH
68627: LD_INT 5
68629: PUSH
68630: EMPTY
68631: LIST
68632: LIST
68633: PUSH
68634: LD_INT 0
68636: PUSH
68637: LD_INT 5
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: PUSH
68644: LD_INT 1
68646: NEG
68647: PUSH
68648: LD_INT 4
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: PUSH
68655: LD_INT 1
68657: NEG
68658: PUSH
68659: LD_INT 3
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 2
68668: PUSH
68669: LD_INT 5
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 2
68678: NEG
68679: PUSH
68680: LD_INT 3
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PUSH
68687: LD_INT 3
68689: NEG
68690: PUSH
68691: LD_INT 0
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 3
68700: NEG
68701: PUSH
68702: LD_INT 1
68704: NEG
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 2
68712: NEG
68713: PUSH
68714: LD_INT 0
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 2
68723: NEG
68724: PUSH
68725: LD_INT 1
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 3
68734: NEG
68735: PUSH
68736: LD_INT 1
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 4
68745: NEG
68746: PUSH
68747: LD_INT 0
68749: PUSH
68750: EMPTY
68751: LIST
68752: LIST
68753: PUSH
68754: LD_INT 4
68756: NEG
68757: PUSH
68758: LD_INT 1
68760: NEG
68761: PUSH
68762: EMPTY
68763: LIST
68764: LIST
68765: PUSH
68766: LD_INT 4
68768: NEG
68769: PUSH
68770: LD_INT 2
68772: NEG
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 2
68780: NEG
68781: PUSH
68782: LD_INT 2
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 4
68791: NEG
68792: PUSH
68793: LD_INT 4
68795: NEG
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 4
68803: NEG
68804: PUSH
68805: LD_INT 5
68807: NEG
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 3
68815: NEG
68816: PUSH
68817: LD_INT 4
68819: NEG
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: LD_INT 3
68827: NEG
68828: PUSH
68829: LD_INT 3
68831: NEG
68832: PUSH
68833: EMPTY
68834: LIST
68835: LIST
68836: PUSH
68837: LD_INT 4
68839: NEG
68840: PUSH
68841: LD_INT 3
68843: NEG
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: PUSH
68849: LD_INT 5
68851: NEG
68852: PUSH
68853: LD_INT 4
68855: NEG
68856: PUSH
68857: EMPTY
68858: LIST
68859: LIST
68860: PUSH
68861: LD_INT 5
68863: NEG
68864: PUSH
68865: LD_INT 5
68867: NEG
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PUSH
68873: LD_INT 3
68875: NEG
68876: PUSH
68877: LD_INT 5
68879: NEG
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: PUSH
68885: LD_INT 5
68887: NEG
68888: PUSH
68889: LD_INT 3
68891: NEG
68892: PUSH
68893: EMPTY
68894: LIST
68895: LIST
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: LD_INT 3
68902: NEG
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 0
68910: PUSH
68911: LD_INT 4
68913: NEG
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 1
68921: PUSH
68922: LD_INT 3
68924: NEG
68925: PUSH
68926: EMPTY
68927: LIST
68928: LIST
68929: PUSH
68930: LD_INT 1
68932: PUSH
68933: LD_INT 2
68935: NEG
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 0
68943: PUSH
68944: LD_INT 2
68946: NEG
68947: PUSH
68948: EMPTY
68949: LIST
68950: LIST
68951: PUSH
68952: LD_INT 1
68954: NEG
68955: PUSH
68956: LD_INT 3
68958: NEG
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 1
68966: NEG
68967: PUSH
68968: LD_INT 4
68970: NEG
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 2
68978: PUSH
68979: LD_INT 2
68981: NEG
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 2
68989: NEG
68990: PUSH
68991: LD_INT 4
68993: NEG
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 4
69001: PUSH
69002: LD_INT 0
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 4
69011: PUSH
69012: LD_INT 1
69014: NEG
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 5
69022: PUSH
69023: LD_INT 0
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 5
69032: PUSH
69033: LD_INT 1
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 4
69042: PUSH
69043: LD_INT 1
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 3
69052: PUSH
69053: LD_INT 0
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 3
69062: PUSH
69063: LD_INT 1
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 3
69073: PUSH
69074: LD_INT 2
69076: NEG
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 5
69084: PUSH
69085: LD_INT 2
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: LIST
69096: LIST
69097: LIST
69098: LIST
69099: LIST
69100: LIST
69101: LIST
69102: LIST
69103: LIST
69104: LIST
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
69139: LD_ADDR_VAR 0 32
69143: PUSH
69144: LD_INT 4
69146: NEG
69147: PUSH
69148: LD_INT 0
69150: PUSH
69151: EMPTY
69152: LIST
69153: LIST
69154: PUSH
69155: LD_INT 4
69157: NEG
69158: PUSH
69159: LD_INT 1
69161: NEG
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 3
69169: NEG
69170: PUSH
69171: LD_INT 0
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 3
69180: NEG
69181: PUSH
69182: LD_INT 1
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 4
69191: NEG
69192: PUSH
69193: LD_INT 1
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 5
69202: NEG
69203: PUSH
69204: LD_INT 0
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 5
69213: NEG
69214: PUSH
69215: LD_INT 1
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 5
69225: NEG
69226: PUSH
69227: LD_INT 2
69229: NEG
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: LD_INT 3
69237: NEG
69238: PUSH
69239: LD_INT 2
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 3
69248: NEG
69249: PUSH
69250: LD_INT 3
69252: NEG
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: PUSH
69258: LD_INT 3
69260: NEG
69261: PUSH
69262: LD_INT 4
69264: NEG
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 2
69272: NEG
69273: PUSH
69274: LD_INT 3
69276: NEG
69277: PUSH
69278: EMPTY
69279: LIST
69280: LIST
69281: PUSH
69282: LD_INT 2
69284: NEG
69285: PUSH
69286: LD_INT 2
69288: NEG
69289: PUSH
69290: EMPTY
69291: LIST
69292: LIST
69293: PUSH
69294: LD_INT 3
69296: NEG
69297: PUSH
69298: LD_INT 2
69300: NEG
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: PUSH
69306: LD_INT 4
69308: NEG
69309: PUSH
69310: LD_INT 3
69312: NEG
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 4
69320: NEG
69321: PUSH
69322: LD_INT 4
69324: NEG
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 2
69332: NEG
69333: PUSH
69334: LD_INT 4
69336: NEG
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 4
69344: NEG
69345: PUSH
69346: LD_INT 2
69348: NEG
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 0
69356: PUSH
69357: LD_INT 4
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 0
69367: PUSH
69368: LD_INT 5
69370: NEG
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 1
69378: PUSH
69379: LD_INT 4
69381: NEG
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 1
69389: PUSH
69390: LD_INT 3
69392: NEG
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 0
69400: PUSH
69401: LD_INT 3
69403: NEG
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 1
69411: NEG
69412: PUSH
69413: LD_INT 4
69415: NEG
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 1
69423: NEG
69424: PUSH
69425: LD_INT 5
69427: NEG
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 2
69435: PUSH
69436: LD_INT 3
69438: NEG
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 2
69446: NEG
69447: PUSH
69448: LD_INT 5
69450: NEG
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 3
69458: PUSH
69459: LD_INT 0
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 3
69468: PUSH
69469: LD_INT 1
69471: NEG
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 4
69479: PUSH
69480: LD_INT 0
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 4
69489: PUSH
69490: LD_INT 1
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 3
69499: PUSH
69500: LD_INT 1
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 2
69509: PUSH
69510: LD_INT 0
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 2
69519: PUSH
69520: LD_INT 1
69522: NEG
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: PUSH
69528: LD_INT 2
69530: PUSH
69531: LD_INT 2
69533: NEG
69534: PUSH
69535: EMPTY
69536: LIST
69537: LIST
69538: PUSH
69539: LD_INT 4
69541: PUSH
69542: LD_INT 2
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: PUSH
69549: LD_INT 4
69551: PUSH
69552: LD_INT 4
69554: PUSH
69555: EMPTY
69556: LIST
69557: LIST
69558: PUSH
69559: LD_INT 4
69561: PUSH
69562: LD_INT 3
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: PUSH
69569: LD_INT 5
69571: PUSH
69572: LD_INT 4
69574: PUSH
69575: EMPTY
69576: LIST
69577: LIST
69578: PUSH
69579: LD_INT 5
69581: PUSH
69582: LD_INT 5
69584: PUSH
69585: EMPTY
69586: LIST
69587: LIST
69588: PUSH
69589: LD_INT 4
69591: PUSH
69592: LD_INT 5
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 3
69601: PUSH
69602: LD_INT 4
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 3
69611: PUSH
69612: LD_INT 3
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 5
69621: PUSH
69622: LD_INT 3
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 3
69631: PUSH
69632: LD_INT 5
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
69686: LD_ADDR_VAR 0 33
69690: PUSH
69691: LD_INT 4
69693: NEG
69694: PUSH
69695: LD_INT 4
69697: NEG
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 4
69705: NEG
69706: PUSH
69707: LD_INT 5
69709: NEG
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 3
69717: NEG
69718: PUSH
69719: LD_INT 4
69721: NEG
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 3
69729: NEG
69730: PUSH
69731: LD_INT 3
69733: NEG
69734: PUSH
69735: EMPTY
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 4
69741: NEG
69742: PUSH
69743: LD_INT 3
69745: NEG
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 5
69753: NEG
69754: PUSH
69755: LD_INT 4
69757: NEG
69758: PUSH
69759: EMPTY
69760: LIST
69761: LIST
69762: PUSH
69763: LD_INT 5
69765: NEG
69766: PUSH
69767: LD_INT 5
69769: NEG
69770: PUSH
69771: EMPTY
69772: LIST
69773: LIST
69774: PUSH
69775: LD_INT 3
69777: NEG
69778: PUSH
69779: LD_INT 5
69781: NEG
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 5
69789: NEG
69790: PUSH
69791: LD_INT 3
69793: NEG
69794: PUSH
69795: EMPTY
69796: LIST
69797: LIST
69798: PUSH
69799: LD_INT 0
69801: PUSH
69802: LD_INT 3
69804: NEG
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 0
69812: PUSH
69813: LD_INT 4
69815: NEG
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 1
69823: PUSH
69824: LD_INT 3
69826: NEG
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 1
69834: PUSH
69835: LD_INT 2
69837: NEG
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 0
69845: PUSH
69846: LD_INT 2
69848: NEG
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 1
69856: NEG
69857: PUSH
69858: LD_INT 3
69860: NEG
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 1
69868: NEG
69869: PUSH
69870: LD_INT 4
69872: NEG
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 2
69880: PUSH
69881: LD_INT 2
69883: NEG
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 2
69891: NEG
69892: PUSH
69893: LD_INT 4
69895: NEG
69896: PUSH
69897: EMPTY
69898: LIST
69899: LIST
69900: PUSH
69901: LD_INT 4
69903: PUSH
69904: LD_INT 0
69906: PUSH
69907: EMPTY
69908: LIST
69909: LIST
69910: PUSH
69911: LD_INT 4
69913: PUSH
69914: LD_INT 1
69916: NEG
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 5
69924: PUSH
69925: LD_INT 0
69927: PUSH
69928: EMPTY
69929: LIST
69930: LIST
69931: PUSH
69932: LD_INT 5
69934: PUSH
69935: LD_INT 1
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 4
69944: PUSH
69945: LD_INT 1
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 3
69954: PUSH
69955: LD_INT 0
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 3
69964: PUSH
69965: LD_INT 1
69967: NEG
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 3
69975: PUSH
69976: LD_INT 2
69978: NEG
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 5
69986: PUSH
69987: LD_INT 2
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 3
69996: PUSH
69997: LD_INT 3
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 3
70006: PUSH
70007: LD_INT 2
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 4
70016: PUSH
70017: LD_INT 3
70019: PUSH
70020: EMPTY
70021: LIST
70022: LIST
70023: PUSH
70024: LD_INT 4
70026: PUSH
70027: LD_INT 4
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 3
70036: PUSH
70037: LD_INT 4
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 2
70046: PUSH
70047: LD_INT 3
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: PUSH
70054: LD_INT 2
70056: PUSH
70057: LD_INT 2
70059: PUSH
70060: EMPTY
70061: LIST
70062: LIST
70063: PUSH
70064: LD_INT 4
70066: PUSH
70067: LD_INT 2
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 2
70076: PUSH
70077: LD_INT 4
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 0
70086: PUSH
70087: LD_INT 4
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 0
70096: PUSH
70097: LD_INT 3
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 1
70106: PUSH
70107: LD_INT 4
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 1
70116: PUSH
70117: LD_INT 5
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 0
70126: PUSH
70127: LD_INT 5
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 1
70136: NEG
70137: PUSH
70138: LD_INT 4
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 1
70147: NEG
70148: PUSH
70149: LD_INT 3
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 2
70158: PUSH
70159: LD_INT 5
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 2
70168: NEG
70169: PUSH
70170: LD_INT 3
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: LIST
70205: LIST
70206: LIST
70207: LIST
70208: LIST
70209: LIST
70210: LIST
70211: LIST
70212: LIST
70213: LIST
70214: LIST
70215: LIST
70216: LIST
70217: LIST
70218: LIST
70219: LIST
70220: LIST
70221: LIST
70222: LIST
70223: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
70224: LD_ADDR_VAR 0 34
70228: PUSH
70229: LD_INT 0
70231: PUSH
70232: LD_INT 4
70234: NEG
70235: PUSH
70236: EMPTY
70237: LIST
70238: LIST
70239: PUSH
70240: LD_INT 0
70242: PUSH
70243: LD_INT 5
70245: NEG
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 1
70253: PUSH
70254: LD_INT 4
70256: NEG
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 1
70264: PUSH
70265: LD_INT 3
70267: NEG
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 0
70275: PUSH
70276: LD_INT 3
70278: NEG
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 1
70286: NEG
70287: PUSH
70288: LD_INT 4
70290: NEG
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 1
70298: NEG
70299: PUSH
70300: LD_INT 5
70302: NEG
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 2
70310: PUSH
70311: LD_INT 3
70313: NEG
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 2
70321: NEG
70322: PUSH
70323: LD_INT 5
70325: NEG
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 3
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 3
70343: PUSH
70344: LD_INT 1
70346: NEG
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 4
70354: PUSH
70355: LD_INT 0
70357: PUSH
70358: EMPTY
70359: LIST
70360: LIST
70361: PUSH
70362: LD_INT 4
70364: PUSH
70365: LD_INT 1
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: PUSH
70372: LD_INT 3
70374: PUSH
70375: LD_INT 1
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: PUSH
70382: LD_INT 2
70384: PUSH
70385: LD_INT 0
70387: PUSH
70388: EMPTY
70389: LIST
70390: LIST
70391: PUSH
70392: LD_INT 2
70394: PUSH
70395: LD_INT 1
70397: NEG
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 2
70405: PUSH
70406: LD_INT 2
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 4
70416: PUSH
70417: LD_INT 2
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 4
70426: PUSH
70427: LD_INT 4
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 4
70436: PUSH
70437: LD_INT 3
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 5
70446: PUSH
70447: LD_INT 4
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 5
70456: PUSH
70457: LD_INT 5
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 4
70466: PUSH
70467: LD_INT 5
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 3
70476: PUSH
70477: LD_INT 4
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 3
70486: PUSH
70487: LD_INT 3
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 5
70496: PUSH
70497: LD_INT 3
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 3
70506: PUSH
70507: LD_INT 5
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 0
70516: PUSH
70517: LD_INT 3
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 0
70526: PUSH
70527: LD_INT 2
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 1
70536: PUSH
70537: LD_INT 3
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 1
70546: PUSH
70547: LD_INT 4
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 0
70556: PUSH
70557: LD_INT 4
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 1
70566: NEG
70567: PUSH
70568: LD_INT 3
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 1
70577: NEG
70578: PUSH
70579: LD_INT 2
70581: PUSH
70582: EMPTY
70583: LIST
70584: LIST
70585: PUSH
70586: LD_INT 2
70588: PUSH
70589: LD_INT 4
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 2
70598: NEG
70599: PUSH
70600: LD_INT 2
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 4
70609: NEG
70610: PUSH
70611: LD_INT 0
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 4
70620: NEG
70621: PUSH
70622: LD_INT 1
70624: NEG
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 3
70632: NEG
70633: PUSH
70634: LD_INT 0
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 3
70643: NEG
70644: PUSH
70645: LD_INT 1
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: LD_INT 4
70654: NEG
70655: PUSH
70656: LD_INT 1
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 5
70665: NEG
70666: PUSH
70667: LD_INT 0
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 5
70676: NEG
70677: PUSH
70678: LD_INT 1
70680: NEG
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 5
70688: NEG
70689: PUSH
70690: LD_INT 2
70692: NEG
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: PUSH
70698: LD_INT 3
70700: NEG
70701: PUSH
70702: LD_INT 2
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: LIST
70713: LIST
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: LIST
70742: LIST
70743: LIST
70744: LIST
70745: LIST
70746: LIST
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: ST_TO_ADDR
// end ; end ;
70756: GO 70759
70758: POP
// case btype of b_depot , b_warehouse :
70759: LD_VAR 0 1
70763: PUSH
70764: LD_INT 0
70766: DOUBLE
70767: EQUAL
70768: IFTRUE 70778
70770: LD_INT 1
70772: DOUBLE
70773: EQUAL
70774: IFTRUE 70778
70776: GO 70979
70778: POP
// case nation of nation_american :
70779: LD_VAR 0 5
70783: PUSH
70784: LD_INT 1
70786: DOUBLE
70787: EQUAL
70788: IFTRUE 70792
70790: GO 70848
70792: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
70793: LD_ADDR_VAR 0 9
70797: PUSH
70798: LD_VAR 0 11
70802: PUSH
70803: LD_VAR 0 12
70807: PUSH
70808: LD_VAR 0 13
70812: PUSH
70813: LD_VAR 0 14
70817: PUSH
70818: LD_VAR 0 15
70822: PUSH
70823: LD_VAR 0 16
70827: PUSH
70828: EMPTY
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: PUSH
70836: LD_VAR 0 4
70840: PUSH
70841: LD_INT 1
70843: PLUS
70844: ARRAY
70845: ST_TO_ADDR
70846: GO 70977
70848: LD_INT 2
70850: DOUBLE
70851: EQUAL
70852: IFTRUE 70856
70854: GO 70912
70856: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
70857: LD_ADDR_VAR 0 9
70861: PUSH
70862: LD_VAR 0 17
70866: PUSH
70867: LD_VAR 0 18
70871: PUSH
70872: LD_VAR 0 19
70876: PUSH
70877: LD_VAR 0 20
70881: PUSH
70882: LD_VAR 0 21
70886: PUSH
70887: LD_VAR 0 22
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: LIST
70896: LIST
70897: LIST
70898: LIST
70899: PUSH
70900: LD_VAR 0 4
70904: PUSH
70905: LD_INT 1
70907: PLUS
70908: ARRAY
70909: ST_TO_ADDR
70910: GO 70977
70912: LD_INT 3
70914: DOUBLE
70915: EQUAL
70916: IFTRUE 70920
70918: GO 70976
70920: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
70921: LD_ADDR_VAR 0 9
70925: PUSH
70926: LD_VAR 0 23
70930: PUSH
70931: LD_VAR 0 24
70935: PUSH
70936: LD_VAR 0 25
70940: PUSH
70941: LD_VAR 0 26
70945: PUSH
70946: LD_VAR 0 27
70950: PUSH
70951: LD_VAR 0 28
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: PUSH
70964: LD_VAR 0 4
70968: PUSH
70969: LD_INT 1
70971: PLUS
70972: ARRAY
70973: ST_TO_ADDR
70974: GO 70977
70976: POP
70977: GO 71532
70979: LD_INT 2
70981: DOUBLE
70982: EQUAL
70983: IFTRUE 70993
70985: LD_INT 3
70987: DOUBLE
70988: EQUAL
70989: IFTRUE 70993
70991: GO 71049
70993: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
70994: LD_ADDR_VAR 0 9
70998: PUSH
70999: LD_VAR 0 29
71003: PUSH
71004: LD_VAR 0 30
71008: PUSH
71009: LD_VAR 0 31
71013: PUSH
71014: LD_VAR 0 32
71018: PUSH
71019: LD_VAR 0 33
71023: PUSH
71024: LD_VAR 0 34
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: PUSH
71037: LD_VAR 0 4
71041: PUSH
71042: LD_INT 1
71044: PLUS
71045: ARRAY
71046: ST_TO_ADDR
71047: GO 71532
71049: LD_INT 16
71051: DOUBLE
71052: EQUAL
71053: IFTRUE 71111
71055: LD_INT 17
71057: DOUBLE
71058: EQUAL
71059: IFTRUE 71111
71061: LD_INT 18
71063: DOUBLE
71064: EQUAL
71065: IFTRUE 71111
71067: LD_INT 19
71069: DOUBLE
71070: EQUAL
71071: IFTRUE 71111
71073: LD_INT 22
71075: DOUBLE
71076: EQUAL
71077: IFTRUE 71111
71079: LD_INT 20
71081: DOUBLE
71082: EQUAL
71083: IFTRUE 71111
71085: LD_INT 21
71087: DOUBLE
71088: EQUAL
71089: IFTRUE 71111
71091: LD_INT 23
71093: DOUBLE
71094: EQUAL
71095: IFTRUE 71111
71097: LD_INT 24
71099: DOUBLE
71100: EQUAL
71101: IFTRUE 71111
71103: LD_INT 25
71105: DOUBLE
71106: EQUAL
71107: IFTRUE 71111
71109: GO 71167
71111: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
71112: LD_ADDR_VAR 0 9
71116: PUSH
71117: LD_VAR 0 35
71121: PUSH
71122: LD_VAR 0 36
71126: PUSH
71127: LD_VAR 0 37
71131: PUSH
71132: LD_VAR 0 38
71136: PUSH
71137: LD_VAR 0 39
71141: PUSH
71142: LD_VAR 0 40
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: PUSH
71155: LD_VAR 0 4
71159: PUSH
71160: LD_INT 1
71162: PLUS
71163: ARRAY
71164: ST_TO_ADDR
71165: GO 71532
71167: LD_INT 6
71169: DOUBLE
71170: EQUAL
71171: IFTRUE 71223
71173: LD_INT 7
71175: DOUBLE
71176: EQUAL
71177: IFTRUE 71223
71179: LD_INT 8
71181: DOUBLE
71182: EQUAL
71183: IFTRUE 71223
71185: LD_INT 13
71187: DOUBLE
71188: EQUAL
71189: IFTRUE 71223
71191: LD_INT 12
71193: DOUBLE
71194: EQUAL
71195: IFTRUE 71223
71197: LD_INT 15
71199: DOUBLE
71200: EQUAL
71201: IFTRUE 71223
71203: LD_INT 11
71205: DOUBLE
71206: EQUAL
71207: IFTRUE 71223
71209: LD_INT 14
71211: DOUBLE
71212: EQUAL
71213: IFTRUE 71223
71215: LD_INT 10
71217: DOUBLE
71218: EQUAL
71219: IFTRUE 71223
71221: GO 71279
71223: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
71224: LD_ADDR_VAR 0 9
71228: PUSH
71229: LD_VAR 0 41
71233: PUSH
71234: LD_VAR 0 42
71238: PUSH
71239: LD_VAR 0 43
71243: PUSH
71244: LD_VAR 0 44
71248: PUSH
71249: LD_VAR 0 45
71253: PUSH
71254: LD_VAR 0 46
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: PUSH
71267: LD_VAR 0 4
71271: PUSH
71272: LD_INT 1
71274: PLUS
71275: ARRAY
71276: ST_TO_ADDR
71277: GO 71532
71279: LD_INT 36
71281: DOUBLE
71282: EQUAL
71283: IFTRUE 71287
71285: GO 71343
71287: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
71288: LD_ADDR_VAR 0 9
71292: PUSH
71293: LD_VAR 0 47
71297: PUSH
71298: LD_VAR 0 48
71302: PUSH
71303: LD_VAR 0 49
71307: PUSH
71308: LD_VAR 0 50
71312: PUSH
71313: LD_VAR 0 51
71317: PUSH
71318: LD_VAR 0 52
71322: PUSH
71323: EMPTY
71324: LIST
71325: LIST
71326: LIST
71327: LIST
71328: LIST
71329: LIST
71330: PUSH
71331: LD_VAR 0 4
71335: PUSH
71336: LD_INT 1
71338: PLUS
71339: ARRAY
71340: ST_TO_ADDR
71341: GO 71532
71343: LD_INT 4
71345: DOUBLE
71346: EQUAL
71347: IFTRUE 71369
71349: LD_INT 5
71351: DOUBLE
71352: EQUAL
71353: IFTRUE 71369
71355: LD_INT 34
71357: DOUBLE
71358: EQUAL
71359: IFTRUE 71369
71361: LD_INT 37
71363: DOUBLE
71364: EQUAL
71365: IFTRUE 71369
71367: GO 71425
71369: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
71370: LD_ADDR_VAR 0 9
71374: PUSH
71375: LD_VAR 0 53
71379: PUSH
71380: LD_VAR 0 54
71384: PUSH
71385: LD_VAR 0 55
71389: PUSH
71390: LD_VAR 0 56
71394: PUSH
71395: LD_VAR 0 57
71399: PUSH
71400: LD_VAR 0 58
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: PUSH
71413: LD_VAR 0 4
71417: PUSH
71418: LD_INT 1
71420: PLUS
71421: ARRAY
71422: ST_TO_ADDR
71423: GO 71532
71425: LD_INT 31
71427: DOUBLE
71428: EQUAL
71429: IFTRUE 71475
71431: LD_INT 32
71433: DOUBLE
71434: EQUAL
71435: IFTRUE 71475
71437: LD_INT 33
71439: DOUBLE
71440: EQUAL
71441: IFTRUE 71475
71443: LD_INT 27
71445: DOUBLE
71446: EQUAL
71447: IFTRUE 71475
71449: LD_INT 26
71451: DOUBLE
71452: EQUAL
71453: IFTRUE 71475
71455: LD_INT 28
71457: DOUBLE
71458: EQUAL
71459: IFTRUE 71475
71461: LD_INT 29
71463: DOUBLE
71464: EQUAL
71465: IFTRUE 71475
71467: LD_INT 30
71469: DOUBLE
71470: EQUAL
71471: IFTRUE 71475
71473: GO 71531
71475: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
71476: LD_ADDR_VAR 0 9
71480: PUSH
71481: LD_VAR 0 59
71485: PUSH
71486: LD_VAR 0 60
71490: PUSH
71491: LD_VAR 0 61
71495: PUSH
71496: LD_VAR 0 62
71500: PUSH
71501: LD_VAR 0 63
71505: PUSH
71506: LD_VAR 0 64
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: PUSH
71519: LD_VAR 0 4
71523: PUSH
71524: LD_INT 1
71526: PLUS
71527: ARRAY
71528: ST_TO_ADDR
71529: GO 71532
71531: POP
// temp_list2 = [ ] ;
71532: LD_ADDR_VAR 0 10
71536: PUSH
71537: EMPTY
71538: ST_TO_ADDR
// for i in temp_list do
71539: LD_ADDR_VAR 0 8
71543: PUSH
71544: LD_VAR 0 9
71548: PUSH
71549: FOR_IN
71550: IFFALSE 71602
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
71552: LD_ADDR_VAR 0 10
71556: PUSH
71557: LD_VAR 0 10
71561: PUSH
71562: LD_VAR 0 8
71566: PUSH
71567: LD_INT 1
71569: ARRAY
71570: PUSH
71571: LD_VAR 0 2
71575: PLUS
71576: PUSH
71577: LD_VAR 0 8
71581: PUSH
71582: LD_INT 2
71584: ARRAY
71585: PUSH
71586: LD_VAR 0 3
71590: PLUS
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: EMPTY
71597: LIST
71598: ADD
71599: ST_TO_ADDR
71600: GO 71549
71602: POP
71603: POP
// result = temp_list2 ;
71604: LD_ADDR_VAR 0 7
71608: PUSH
71609: LD_VAR 0 10
71613: ST_TO_ADDR
// end ;
71614: LD_VAR 0 7
71618: RET
// export function EnemyInRange ( unit , dist ) ; begin
71619: LD_INT 0
71621: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
71622: LD_ADDR_VAR 0 3
71626: PUSH
71627: LD_VAR 0 1
71631: PPUSH
71632: CALL_OW 255
71636: PPUSH
71637: LD_VAR 0 1
71641: PPUSH
71642: CALL_OW 250
71646: PPUSH
71647: LD_VAR 0 1
71651: PPUSH
71652: CALL_OW 251
71656: PPUSH
71657: LD_VAR 0 2
71661: PPUSH
71662: CALL 45021 0 4
71666: PUSH
71667: LD_INT 4
71669: ARRAY
71670: ST_TO_ADDR
// end ;
71671: LD_VAR 0 3
71675: RET
// export function PlayerSeeMe ( unit ) ; begin
71676: LD_INT 0
71678: PPUSH
// result := See ( your_side , unit ) ;
71679: LD_ADDR_VAR 0 2
71683: PUSH
71684: LD_OWVAR 2
71688: PPUSH
71689: LD_VAR 0 1
71693: PPUSH
71694: CALL_OW 292
71698: ST_TO_ADDR
// end ;
71699: LD_VAR 0 2
71703: RET
// export function ReverseDir ( unit ) ; begin
71704: LD_INT 0
71706: PPUSH
// if not unit then
71707: LD_VAR 0 1
71711: NOT
71712: IFFALSE 71716
// exit ;
71714: GO 71739
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
71716: LD_ADDR_VAR 0 2
71720: PUSH
71721: LD_VAR 0 1
71725: PPUSH
71726: CALL_OW 254
71730: PUSH
71731: LD_INT 3
71733: PLUS
71734: PUSH
71735: LD_INT 6
71737: MOD
71738: ST_TO_ADDR
// end ;
71739: LD_VAR 0 2
71743: RET
// export function ReverseArray ( array ) ; var i ; begin
71744: LD_INT 0
71746: PPUSH
71747: PPUSH
// if not array then
71748: LD_VAR 0 1
71752: NOT
71753: IFFALSE 71757
// exit ;
71755: GO 71812
// result := [ ] ;
71757: LD_ADDR_VAR 0 2
71761: PUSH
71762: EMPTY
71763: ST_TO_ADDR
// for i := array downto 1 do
71764: LD_ADDR_VAR 0 3
71768: PUSH
71769: DOUBLE
71770: LD_VAR 0 1
71774: INC
71775: ST_TO_ADDR
71776: LD_INT 1
71778: PUSH
71779: FOR_DOWNTO
71780: IFFALSE 71810
// result := Join ( result , array [ i ] ) ;
71782: LD_ADDR_VAR 0 2
71786: PUSH
71787: LD_VAR 0 2
71791: PPUSH
71792: LD_VAR 0 1
71796: PUSH
71797: LD_VAR 0 3
71801: ARRAY
71802: PPUSH
71803: CALL 76456 0 2
71807: ST_TO_ADDR
71808: GO 71779
71810: POP
71811: POP
// end ;
71812: LD_VAR 0 2
71816: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
71817: LD_INT 0
71819: PPUSH
71820: PPUSH
71821: PPUSH
71822: PPUSH
71823: PPUSH
71824: PPUSH
// if not unit or not hexes then
71825: LD_VAR 0 1
71829: NOT
71830: PUSH
71831: LD_VAR 0 2
71835: NOT
71836: OR
71837: IFFALSE 71841
// exit ;
71839: GO 71964
// dist := 9999 ;
71841: LD_ADDR_VAR 0 5
71845: PUSH
71846: LD_INT 9999
71848: ST_TO_ADDR
// for i = 1 to hexes do
71849: LD_ADDR_VAR 0 4
71853: PUSH
71854: DOUBLE
71855: LD_INT 1
71857: DEC
71858: ST_TO_ADDR
71859: LD_VAR 0 2
71863: PUSH
71864: FOR_TO
71865: IFFALSE 71952
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71867: LD_ADDR_VAR 0 6
71871: PUSH
71872: LD_VAR 0 1
71876: PPUSH
71877: LD_VAR 0 2
71881: PUSH
71882: LD_VAR 0 4
71886: ARRAY
71887: PUSH
71888: LD_INT 1
71890: ARRAY
71891: PPUSH
71892: LD_VAR 0 2
71896: PUSH
71897: LD_VAR 0 4
71901: ARRAY
71902: PUSH
71903: LD_INT 2
71905: ARRAY
71906: PPUSH
71907: CALL_OW 297
71911: ST_TO_ADDR
// if tdist < dist then
71912: LD_VAR 0 6
71916: PUSH
71917: LD_VAR 0 5
71921: LESS
71922: IFFALSE 71950
// begin hex := hexes [ i ] ;
71924: LD_ADDR_VAR 0 8
71928: PUSH
71929: LD_VAR 0 2
71933: PUSH
71934: LD_VAR 0 4
71938: ARRAY
71939: ST_TO_ADDR
// dist := tdist ;
71940: LD_ADDR_VAR 0 5
71944: PUSH
71945: LD_VAR 0 6
71949: ST_TO_ADDR
// end ; end ;
71950: GO 71864
71952: POP
71953: POP
// result := hex ;
71954: LD_ADDR_VAR 0 3
71958: PUSH
71959: LD_VAR 0 8
71963: ST_TO_ADDR
// end ;
71964: LD_VAR 0 3
71968: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
71969: LD_INT 0
71971: PPUSH
71972: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
71973: LD_VAR 0 1
71977: NOT
71978: PUSH
71979: LD_VAR 0 1
71983: PUSH
71984: LD_INT 21
71986: PUSH
71987: LD_INT 2
71989: PUSH
71990: EMPTY
71991: LIST
71992: LIST
71993: PUSH
71994: LD_INT 23
71996: PUSH
71997: LD_INT 2
71999: PUSH
72000: EMPTY
72001: LIST
72002: LIST
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PPUSH
72008: CALL_OW 69
72012: IN
72013: NOT
72014: OR
72015: IFFALSE 72019
// exit ;
72017: GO 72066
// for i = 1 to 3 do
72019: LD_ADDR_VAR 0 3
72023: PUSH
72024: DOUBLE
72025: LD_INT 1
72027: DEC
72028: ST_TO_ADDR
72029: LD_INT 3
72031: PUSH
72032: FOR_TO
72033: IFFALSE 72064
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
72035: LD_VAR 0 1
72039: PPUSH
72040: CALL_OW 250
72044: PPUSH
72045: LD_VAR 0 1
72049: PPUSH
72050: CALL_OW 251
72054: PPUSH
72055: LD_INT 1
72057: PPUSH
72058: CALL_OW 453
72062: GO 72032
72064: POP
72065: POP
// end ;
72066: LD_VAR 0 2
72070: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
72071: LD_INT 0
72073: PPUSH
72074: PPUSH
72075: PPUSH
72076: PPUSH
72077: PPUSH
72078: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
72079: LD_VAR 0 1
72083: NOT
72084: PUSH
72085: LD_VAR 0 2
72089: NOT
72090: OR
72091: PUSH
72092: LD_VAR 0 1
72096: PPUSH
72097: CALL_OW 314
72101: OR
72102: IFFALSE 72106
// exit ;
72104: GO 72573
// if GetLives ( i ) < 250 then
72106: LD_VAR 0 4
72110: PPUSH
72111: CALL_OW 256
72115: PUSH
72116: LD_INT 250
72118: LESS
72119: IFFALSE 72132
// begin ComAutodestruct ( i ) ;
72121: LD_VAR 0 4
72125: PPUSH
72126: CALL 71969 0 1
// exit ;
72130: GO 72573
// end ; x := GetX ( enemy_unit ) ;
72132: LD_ADDR_VAR 0 7
72136: PUSH
72137: LD_VAR 0 2
72141: PPUSH
72142: CALL_OW 250
72146: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
72147: LD_ADDR_VAR 0 8
72151: PUSH
72152: LD_VAR 0 2
72156: PPUSH
72157: CALL_OW 251
72161: ST_TO_ADDR
// if not x or not y then
72162: LD_VAR 0 7
72166: NOT
72167: PUSH
72168: LD_VAR 0 8
72172: NOT
72173: OR
72174: IFFALSE 72178
// exit ;
72176: GO 72573
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
72178: LD_ADDR_VAR 0 6
72182: PUSH
72183: LD_VAR 0 7
72187: PPUSH
72188: LD_INT 0
72190: PPUSH
72191: LD_INT 4
72193: PPUSH
72194: CALL_OW 272
72198: PUSH
72199: LD_VAR 0 8
72203: PPUSH
72204: LD_INT 0
72206: PPUSH
72207: LD_INT 4
72209: PPUSH
72210: CALL_OW 273
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_VAR 0 7
72223: PPUSH
72224: LD_INT 1
72226: PPUSH
72227: LD_INT 4
72229: PPUSH
72230: CALL_OW 272
72234: PUSH
72235: LD_VAR 0 8
72239: PPUSH
72240: LD_INT 1
72242: PPUSH
72243: LD_INT 4
72245: PPUSH
72246: CALL_OW 273
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_VAR 0 7
72259: PPUSH
72260: LD_INT 2
72262: PPUSH
72263: LD_INT 4
72265: PPUSH
72266: CALL_OW 272
72270: PUSH
72271: LD_VAR 0 8
72275: PPUSH
72276: LD_INT 2
72278: PPUSH
72279: LD_INT 4
72281: PPUSH
72282: CALL_OW 273
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_VAR 0 7
72295: PPUSH
72296: LD_INT 3
72298: PPUSH
72299: LD_INT 4
72301: PPUSH
72302: CALL_OW 272
72306: PUSH
72307: LD_VAR 0 8
72311: PPUSH
72312: LD_INT 3
72314: PPUSH
72315: LD_INT 4
72317: PPUSH
72318: CALL_OW 273
72322: PUSH
72323: EMPTY
72324: LIST
72325: LIST
72326: PUSH
72327: LD_VAR 0 7
72331: PPUSH
72332: LD_INT 4
72334: PPUSH
72335: LD_INT 4
72337: PPUSH
72338: CALL_OW 272
72342: PUSH
72343: LD_VAR 0 8
72347: PPUSH
72348: LD_INT 4
72350: PPUSH
72351: LD_INT 4
72353: PPUSH
72354: CALL_OW 273
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_VAR 0 7
72367: PPUSH
72368: LD_INT 5
72370: PPUSH
72371: LD_INT 4
72373: PPUSH
72374: CALL_OW 272
72378: PUSH
72379: LD_VAR 0 8
72383: PPUSH
72384: LD_INT 5
72386: PPUSH
72387: LD_INT 4
72389: PPUSH
72390: CALL_OW 273
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: ST_TO_ADDR
// for i = tmp downto 1 do
72407: LD_ADDR_VAR 0 4
72411: PUSH
72412: DOUBLE
72413: LD_VAR 0 6
72417: INC
72418: ST_TO_ADDR
72419: LD_INT 1
72421: PUSH
72422: FOR_DOWNTO
72423: IFFALSE 72524
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
72425: LD_VAR 0 6
72429: PUSH
72430: LD_VAR 0 4
72434: ARRAY
72435: PUSH
72436: LD_INT 1
72438: ARRAY
72439: PPUSH
72440: LD_VAR 0 6
72444: PUSH
72445: LD_VAR 0 4
72449: ARRAY
72450: PUSH
72451: LD_INT 2
72453: ARRAY
72454: PPUSH
72455: CALL_OW 488
72459: NOT
72460: PUSH
72461: LD_VAR 0 6
72465: PUSH
72466: LD_VAR 0 4
72470: ARRAY
72471: PUSH
72472: LD_INT 1
72474: ARRAY
72475: PPUSH
72476: LD_VAR 0 6
72480: PUSH
72481: LD_VAR 0 4
72485: ARRAY
72486: PUSH
72487: LD_INT 2
72489: ARRAY
72490: PPUSH
72491: CALL_OW 428
72495: PUSH
72496: LD_INT 0
72498: NONEQUAL
72499: OR
72500: IFFALSE 72522
// tmp := Delete ( tmp , i ) ;
72502: LD_ADDR_VAR 0 6
72506: PUSH
72507: LD_VAR 0 6
72511: PPUSH
72512: LD_VAR 0 4
72516: PPUSH
72517: CALL_OW 3
72521: ST_TO_ADDR
72522: GO 72422
72524: POP
72525: POP
// j := GetClosestHex ( unit , tmp ) ;
72526: LD_ADDR_VAR 0 5
72530: PUSH
72531: LD_VAR 0 1
72535: PPUSH
72536: LD_VAR 0 6
72540: PPUSH
72541: CALL 71817 0 2
72545: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
72546: LD_VAR 0 1
72550: PPUSH
72551: LD_VAR 0 5
72555: PUSH
72556: LD_INT 1
72558: ARRAY
72559: PPUSH
72560: LD_VAR 0 5
72564: PUSH
72565: LD_INT 2
72567: ARRAY
72568: PPUSH
72569: CALL_OW 111
// end ;
72573: LD_VAR 0 3
72577: RET
// export function PrepareApemanSoldier ( ) ; begin
72578: LD_INT 0
72580: PPUSH
// uc_nation := 0 ;
72581: LD_ADDR_OWVAR 21
72585: PUSH
72586: LD_INT 0
72588: ST_TO_ADDR
// hc_sex := sex_male ;
72589: LD_ADDR_OWVAR 27
72593: PUSH
72594: LD_INT 1
72596: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
72597: LD_ADDR_OWVAR 28
72601: PUSH
72602: LD_INT 15
72604: ST_TO_ADDR
// hc_gallery :=  ;
72605: LD_ADDR_OWVAR 33
72609: PUSH
72610: LD_STRING 
72612: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72613: LD_ADDR_OWVAR 31
72617: PUSH
72618: LD_INT 0
72620: PPUSH
72621: LD_INT 3
72623: PPUSH
72624: CALL_OW 12
72628: PUSH
72629: LD_INT 0
72631: PPUSH
72632: LD_INT 3
72634: PPUSH
72635: CALL_OW 12
72639: PUSH
72640: LD_INT 0
72642: PUSH
72643: LD_INT 0
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: ST_TO_ADDR
// end ;
72652: LD_VAR 0 1
72656: RET
// export function PrepareApemanEngineer ( ) ; begin
72657: LD_INT 0
72659: PPUSH
// uc_nation := 0 ;
72660: LD_ADDR_OWVAR 21
72664: PUSH
72665: LD_INT 0
72667: ST_TO_ADDR
// hc_sex := sex_male ;
72668: LD_ADDR_OWVAR 27
72672: PUSH
72673: LD_INT 1
72675: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
72676: LD_ADDR_OWVAR 28
72680: PUSH
72681: LD_INT 16
72683: ST_TO_ADDR
// hc_gallery :=  ;
72684: LD_ADDR_OWVAR 33
72688: PUSH
72689: LD_STRING 
72691: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72692: LD_ADDR_OWVAR 31
72696: PUSH
72697: LD_INT 0
72699: PPUSH
72700: LD_INT 3
72702: PPUSH
72703: CALL_OW 12
72707: PUSH
72708: LD_INT 0
72710: PPUSH
72711: LD_INT 3
72713: PPUSH
72714: CALL_OW 12
72718: PUSH
72719: LD_INT 0
72721: PUSH
72722: LD_INT 0
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: ST_TO_ADDR
// end ;
72731: LD_VAR 0 1
72735: RET
// export function PrepareApeman ( agressivity ) ; begin
72736: LD_INT 0
72738: PPUSH
// uc_side := 0 ;
72739: LD_ADDR_OWVAR 20
72743: PUSH
72744: LD_INT 0
72746: ST_TO_ADDR
// uc_nation := 0 ;
72747: LD_ADDR_OWVAR 21
72751: PUSH
72752: LD_INT 0
72754: ST_TO_ADDR
// hc_sex := sex_male ;
72755: LD_ADDR_OWVAR 27
72759: PUSH
72760: LD_INT 1
72762: ST_TO_ADDR
// hc_class := class_apeman ;
72763: LD_ADDR_OWVAR 28
72767: PUSH
72768: LD_INT 12
72770: ST_TO_ADDR
// hc_gallery :=  ;
72771: LD_ADDR_OWVAR 33
72775: PUSH
72776: LD_STRING 
72778: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72779: LD_ADDR_OWVAR 35
72783: PUSH
72784: LD_VAR 0 1
72788: NEG
72789: PPUSH
72790: LD_VAR 0 1
72794: PPUSH
72795: CALL_OW 12
72799: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
72800: LD_ADDR_OWVAR 31
72804: PUSH
72805: LD_INT 0
72807: PPUSH
72808: LD_INT 3
72810: PPUSH
72811: CALL_OW 12
72815: PUSH
72816: LD_INT 0
72818: PPUSH
72819: LD_INT 3
72821: PPUSH
72822: CALL_OW 12
72826: PUSH
72827: LD_INT 0
72829: PUSH
72830: LD_INT 0
72832: PUSH
72833: EMPTY
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: ST_TO_ADDR
// end ;
72839: LD_VAR 0 2
72843: RET
// export function PrepareTiger ( agressivity ) ; begin
72844: LD_INT 0
72846: PPUSH
// uc_side := 0 ;
72847: LD_ADDR_OWVAR 20
72851: PUSH
72852: LD_INT 0
72854: ST_TO_ADDR
// uc_nation := 0 ;
72855: LD_ADDR_OWVAR 21
72859: PUSH
72860: LD_INT 0
72862: ST_TO_ADDR
// hc_class := class_tiger ;
72863: LD_ADDR_OWVAR 28
72867: PUSH
72868: LD_INT 14
72870: ST_TO_ADDR
// hc_gallery :=  ;
72871: LD_ADDR_OWVAR 33
72875: PUSH
72876: LD_STRING 
72878: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
72879: LD_ADDR_OWVAR 35
72883: PUSH
72884: LD_VAR 0 1
72888: NEG
72889: PPUSH
72890: LD_VAR 0 1
72894: PPUSH
72895: CALL_OW 12
72899: ST_TO_ADDR
// end ;
72900: LD_VAR 0 2
72904: RET
// export function PrepareEnchidna ( ) ; begin
72905: LD_INT 0
72907: PPUSH
// uc_side := 0 ;
72908: LD_ADDR_OWVAR 20
72912: PUSH
72913: LD_INT 0
72915: ST_TO_ADDR
// uc_nation := 0 ;
72916: LD_ADDR_OWVAR 21
72920: PUSH
72921: LD_INT 0
72923: ST_TO_ADDR
// hc_class := class_baggie ;
72924: LD_ADDR_OWVAR 28
72928: PUSH
72929: LD_INT 13
72931: ST_TO_ADDR
// hc_gallery :=  ;
72932: LD_ADDR_OWVAR 33
72936: PUSH
72937: LD_STRING 
72939: ST_TO_ADDR
// end ;
72940: LD_VAR 0 1
72944: RET
// export function PrepareFrog ( ) ; begin
72945: LD_INT 0
72947: PPUSH
// uc_side := 0 ;
72948: LD_ADDR_OWVAR 20
72952: PUSH
72953: LD_INT 0
72955: ST_TO_ADDR
// uc_nation := 0 ;
72956: LD_ADDR_OWVAR 21
72960: PUSH
72961: LD_INT 0
72963: ST_TO_ADDR
// hc_class := class_frog ;
72964: LD_ADDR_OWVAR 28
72968: PUSH
72969: LD_INT 19
72971: ST_TO_ADDR
// hc_gallery :=  ;
72972: LD_ADDR_OWVAR 33
72976: PUSH
72977: LD_STRING 
72979: ST_TO_ADDR
// end ;
72980: LD_VAR 0 1
72984: RET
// export function PrepareFish ( ) ; begin
72985: LD_INT 0
72987: PPUSH
// uc_side := 0 ;
72988: LD_ADDR_OWVAR 20
72992: PUSH
72993: LD_INT 0
72995: ST_TO_ADDR
// uc_nation := 0 ;
72996: LD_ADDR_OWVAR 21
73000: PUSH
73001: LD_INT 0
73003: ST_TO_ADDR
// hc_class := class_fish ;
73004: LD_ADDR_OWVAR 28
73008: PUSH
73009: LD_INT 20
73011: ST_TO_ADDR
// hc_gallery :=  ;
73012: LD_ADDR_OWVAR 33
73016: PUSH
73017: LD_STRING 
73019: ST_TO_ADDR
// end ;
73020: LD_VAR 0 1
73024: RET
// export function PrepareBird ( ) ; begin
73025: LD_INT 0
73027: PPUSH
// uc_side := 0 ;
73028: LD_ADDR_OWVAR 20
73032: PUSH
73033: LD_INT 0
73035: ST_TO_ADDR
// uc_nation := 0 ;
73036: LD_ADDR_OWVAR 21
73040: PUSH
73041: LD_INT 0
73043: ST_TO_ADDR
// hc_class := class_phororhacos ;
73044: LD_ADDR_OWVAR 28
73048: PUSH
73049: LD_INT 18
73051: ST_TO_ADDR
// hc_gallery :=  ;
73052: LD_ADDR_OWVAR 33
73056: PUSH
73057: LD_STRING 
73059: ST_TO_ADDR
// end ;
73060: LD_VAR 0 1
73064: RET
// export function PrepareHorse ( ) ; begin
73065: LD_INT 0
73067: PPUSH
// uc_side := 0 ;
73068: LD_ADDR_OWVAR 20
73072: PUSH
73073: LD_INT 0
73075: ST_TO_ADDR
// uc_nation := 0 ;
73076: LD_ADDR_OWVAR 21
73080: PUSH
73081: LD_INT 0
73083: ST_TO_ADDR
// hc_class := class_horse ;
73084: LD_ADDR_OWVAR 28
73088: PUSH
73089: LD_INT 21
73091: ST_TO_ADDR
// hc_gallery :=  ;
73092: LD_ADDR_OWVAR 33
73096: PUSH
73097: LD_STRING 
73099: ST_TO_ADDR
// end ;
73100: LD_VAR 0 1
73104: RET
// export function PrepareMastodont ( ) ; begin
73105: LD_INT 0
73107: PPUSH
// uc_side := 0 ;
73108: LD_ADDR_OWVAR 20
73112: PUSH
73113: LD_INT 0
73115: ST_TO_ADDR
// uc_nation := 0 ;
73116: LD_ADDR_OWVAR 21
73120: PUSH
73121: LD_INT 0
73123: ST_TO_ADDR
// vc_chassis := class_mastodont ;
73124: LD_ADDR_OWVAR 37
73128: PUSH
73129: LD_INT 31
73131: ST_TO_ADDR
// vc_control := control_rider ;
73132: LD_ADDR_OWVAR 38
73136: PUSH
73137: LD_INT 4
73139: ST_TO_ADDR
// end ;
73140: LD_VAR 0 1
73144: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
73145: LD_INT 0
73147: PPUSH
73148: PPUSH
73149: PPUSH
// uc_side = 0 ;
73150: LD_ADDR_OWVAR 20
73154: PUSH
73155: LD_INT 0
73157: ST_TO_ADDR
// uc_nation = 0 ;
73158: LD_ADDR_OWVAR 21
73162: PUSH
73163: LD_INT 0
73165: ST_TO_ADDR
// InitHc_All ( ) ;
73166: CALL_OW 584
// InitVc ;
73170: CALL_OW 20
// if mastodonts then
73174: LD_VAR 0 6
73178: IFFALSE 73245
// for i = 1 to mastodonts do
73180: LD_ADDR_VAR 0 11
73184: PUSH
73185: DOUBLE
73186: LD_INT 1
73188: DEC
73189: ST_TO_ADDR
73190: LD_VAR 0 6
73194: PUSH
73195: FOR_TO
73196: IFFALSE 73243
// begin vc_chassis := 31 ;
73198: LD_ADDR_OWVAR 37
73202: PUSH
73203: LD_INT 31
73205: ST_TO_ADDR
// vc_control := control_rider ;
73206: LD_ADDR_OWVAR 38
73210: PUSH
73211: LD_INT 4
73213: ST_TO_ADDR
// animal := CreateVehicle ;
73214: LD_ADDR_VAR 0 12
73218: PUSH
73219: CALL_OW 45
73223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73224: LD_VAR 0 12
73228: PPUSH
73229: LD_VAR 0 8
73233: PPUSH
73234: LD_INT 0
73236: PPUSH
73237: CALL 75373 0 3
// end ;
73241: GO 73195
73243: POP
73244: POP
// if horses then
73245: LD_VAR 0 5
73249: IFFALSE 73316
// for i = 1 to horses do
73251: LD_ADDR_VAR 0 11
73255: PUSH
73256: DOUBLE
73257: LD_INT 1
73259: DEC
73260: ST_TO_ADDR
73261: LD_VAR 0 5
73265: PUSH
73266: FOR_TO
73267: IFFALSE 73314
// begin hc_class := 21 ;
73269: LD_ADDR_OWVAR 28
73273: PUSH
73274: LD_INT 21
73276: ST_TO_ADDR
// hc_gallery :=  ;
73277: LD_ADDR_OWVAR 33
73281: PUSH
73282: LD_STRING 
73284: ST_TO_ADDR
// animal := CreateHuman ;
73285: LD_ADDR_VAR 0 12
73289: PUSH
73290: CALL_OW 44
73294: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73295: LD_VAR 0 12
73299: PPUSH
73300: LD_VAR 0 8
73304: PPUSH
73305: LD_INT 0
73307: PPUSH
73308: CALL 75373 0 3
// end ;
73312: GO 73266
73314: POP
73315: POP
// if birds then
73316: LD_VAR 0 1
73320: IFFALSE 73387
// for i = 1 to birds do
73322: LD_ADDR_VAR 0 11
73326: PUSH
73327: DOUBLE
73328: LD_INT 1
73330: DEC
73331: ST_TO_ADDR
73332: LD_VAR 0 1
73336: PUSH
73337: FOR_TO
73338: IFFALSE 73385
// begin hc_class = 18 ;
73340: LD_ADDR_OWVAR 28
73344: PUSH
73345: LD_INT 18
73347: ST_TO_ADDR
// hc_gallery =  ;
73348: LD_ADDR_OWVAR 33
73352: PUSH
73353: LD_STRING 
73355: ST_TO_ADDR
// animal := CreateHuman ;
73356: LD_ADDR_VAR 0 12
73360: PUSH
73361: CALL_OW 44
73365: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73366: LD_VAR 0 12
73370: PPUSH
73371: LD_VAR 0 8
73375: PPUSH
73376: LD_INT 0
73378: PPUSH
73379: CALL 75373 0 3
// end ;
73383: GO 73337
73385: POP
73386: POP
// if tigers then
73387: LD_VAR 0 2
73391: IFFALSE 73475
// for i = 1 to tigers do
73393: LD_ADDR_VAR 0 11
73397: PUSH
73398: DOUBLE
73399: LD_INT 1
73401: DEC
73402: ST_TO_ADDR
73403: LD_VAR 0 2
73407: PUSH
73408: FOR_TO
73409: IFFALSE 73473
// begin hc_class = class_tiger ;
73411: LD_ADDR_OWVAR 28
73415: PUSH
73416: LD_INT 14
73418: ST_TO_ADDR
// hc_gallery =  ;
73419: LD_ADDR_OWVAR 33
73423: PUSH
73424: LD_STRING 
73426: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
73427: LD_ADDR_OWVAR 35
73431: PUSH
73432: LD_INT 7
73434: NEG
73435: PPUSH
73436: LD_INT 7
73438: PPUSH
73439: CALL_OW 12
73443: ST_TO_ADDR
// animal := CreateHuman ;
73444: LD_ADDR_VAR 0 12
73448: PUSH
73449: CALL_OW 44
73453: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73454: LD_VAR 0 12
73458: PPUSH
73459: LD_VAR 0 8
73463: PPUSH
73464: LD_INT 0
73466: PPUSH
73467: CALL 75373 0 3
// end ;
73471: GO 73408
73473: POP
73474: POP
// if apemans then
73475: LD_VAR 0 3
73479: IFFALSE 73602
// for i = 1 to apemans do
73481: LD_ADDR_VAR 0 11
73485: PUSH
73486: DOUBLE
73487: LD_INT 1
73489: DEC
73490: ST_TO_ADDR
73491: LD_VAR 0 3
73495: PUSH
73496: FOR_TO
73497: IFFALSE 73600
// begin hc_class = class_apeman ;
73499: LD_ADDR_OWVAR 28
73503: PUSH
73504: LD_INT 12
73506: ST_TO_ADDR
// hc_gallery =  ;
73507: LD_ADDR_OWVAR 33
73511: PUSH
73512: LD_STRING 
73514: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
73515: LD_ADDR_OWVAR 35
73519: PUSH
73520: LD_INT 2
73522: NEG
73523: PPUSH
73524: LD_INT 2
73526: PPUSH
73527: CALL_OW 12
73531: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
73532: LD_ADDR_OWVAR 31
73536: PUSH
73537: LD_INT 1
73539: PPUSH
73540: LD_INT 3
73542: PPUSH
73543: CALL_OW 12
73547: PUSH
73548: LD_INT 1
73550: PPUSH
73551: LD_INT 3
73553: PPUSH
73554: CALL_OW 12
73558: PUSH
73559: LD_INT 0
73561: PUSH
73562: LD_INT 0
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: ST_TO_ADDR
// animal := CreateHuman ;
73571: LD_ADDR_VAR 0 12
73575: PUSH
73576: CALL_OW 44
73580: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73581: LD_VAR 0 12
73585: PPUSH
73586: LD_VAR 0 8
73590: PPUSH
73591: LD_INT 0
73593: PPUSH
73594: CALL 75373 0 3
// end ;
73598: GO 73496
73600: POP
73601: POP
// if enchidnas then
73602: LD_VAR 0 4
73606: IFFALSE 73673
// for i = 1 to enchidnas do
73608: LD_ADDR_VAR 0 11
73612: PUSH
73613: DOUBLE
73614: LD_INT 1
73616: DEC
73617: ST_TO_ADDR
73618: LD_VAR 0 4
73622: PUSH
73623: FOR_TO
73624: IFFALSE 73671
// begin hc_class = 13 ;
73626: LD_ADDR_OWVAR 28
73630: PUSH
73631: LD_INT 13
73633: ST_TO_ADDR
// hc_gallery =  ;
73634: LD_ADDR_OWVAR 33
73638: PUSH
73639: LD_STRING 
73641: ST_TO_ADDR
// animal := CreateHuman ;
73642: LD_ADDR_VAR 0 12
73646: PUSH
73647: CALL_OW 44
73651: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
73652: LD_VAR 0 12
73656: PPUSH
73657: LD_VAR 0 8
73661: PPUSH
73662: LD_INT 0
73664: PPUSH
73665: CALL 75373 0 3
// end ;
73669: GO 73623
73671: POP
73672: POP
// if fishes then
73673: LD_VAR 0 7
73677: IFFALSE 73744
// for i = 1 to fishes do
73679: LD_ADDR_VAR 0 11
73683: PUSH
73684: DOUBLE
73685: LD_INT 1
73687: DEC
73688: ST_TO_ADDR
73689: LD_VAR 0 7
73693: PUSH
73694: FOR_TO
73695: IFFALSE 73742
// begin hc_class = 20 ;
73697: LD_ADDR_OWVAR 28
73701: PUSH
73702: LD_INT 20
73704: ST_TO_ADDR
// hc_gallery =  ;
73705: LD_ADDR_OWVAR 33
73709: PUSH
73710: LD_STRING 
73712: ST_TO_ADDR
// animal := CreateHuman ;
73713: LD_ADDR_VAR 0 12
73717: PUSH
73718: CALL_OW 44
73722: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
73723: LD_VAR 0 12
73727: PPUSH
73728: LD_VAR 0 9
73732: PPUSH
73733: LD_INT 0
73735: PPUSH
73736: CALL 75373 0 3
// end ;
73740: GO 73694
73742: POP
73743: POP
// end ;
73744: LD_VAR 0 10
73748: RET
// export function WantHeal ( sci , unit ) ; begin
73749: LD_INT 0
73751: PPUSH
// if GetTaskList ( sci ) > 0 then
73752: LD_VAR 0 1
73756: PPUSH
73757: CALL_OW 437
73761: PUSH
73762: LD_INT 0
73764: GREATER
73765: IFFALSE 73835
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
73767: LD_VAR 0 1
73771: PPUSH
73772: CALL_OW 437
73776: PUSH
73777: LD_INT 1
73779: ARRAY
73780: PUSH
73781: LD_INT 1
73783: ARRAY
73784: PUSH
73785: LD_STRING l
73787: EQUAL
73788: PUSH
73789: LD_VAR 0 1
73793: PPUSH
73794: CALL_OW 437
73798: PUSH
73799: LD_INT 1
73801: ARRAY
73802: PUSH
73803: LD_INT 4
73805: ARRAY
73806: PUSH
73807: LD_VAR 0 2
73811: EQUAL
73812: AND
73813: IFFALSE 73825
// result := true else
73815: LD_ADDR_VAR 0 3
73819: PUSH
73820: LD_INT 1
73822: ST_TO_ADDR
73823: GO 73833
// result := false ;
73825: LD_ADDR_VAR 0 3
73829: PUSH
73830: LD_INT 0
73832: ST_TO_ADDR
// end else
73833: GO 73843
// result := false ;
73835: LD_ADDR_VAR 0 3
73839: PUSH
73840: LD_INT 0
73842: ST_TO_ADDR
// end ;
73843: LD_VAR 0 3
73847: RET
// export function HealTarget ( sci ) ; begin
73848: LD_INT 0
73850: PPUSH
// if not sci then
73851: LD_VAR 0 1
73855: NOT
73856: IFFALSE 73860
// exit ;
73858: GO 73925
// result := 0 ;
73860: LD_ADDR_VAR 0 2
73864: PUSH
73865: LD_INT 0
73867: ST_TO_ADDR
// if GetTaskList ( sci ) then
73868: LD_VAR 0 1
73872: PPUSH
73873: CALL_OW 437
73877: IFFALSE 73925
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
73879: LD_VAR 0 1
73883: PPUSH
73884: CALL_OW 437
73888: PUSH
73889: LD_INT 1
73891: ARRAY
73892: PUSH
73893: LD_INT 1
73895: ARRAY
73896: PUSH
73897: LD_STRING l
73899: EQUAL
73900: IFFALSE 73925
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
73902: LD_ADDR_VAR 0 2
73906: PUSH
73907: LD_VAR 0 1
73911: PPUSH
73912: CALL_OW 437
73916: PUSH
73917: LD_INT 1
73919: ARRAY
73920: PUSH
73921: LD_INT 4
73923: ARRAY
73924: ST_TO_ADDR
// end ;
73925: LD_VAR 0 2
73929: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
73930: LD_INT 0
73932: PPUSH
73933: PPUSH
73934: PPUSH
73935: PPUSH
// if not base_units then
73936: LD_VAR 0 1
73940: NOT
73941: IFFALSE 73945
// exit ;
73943: GO 74032
// result := false ;
73945: LD_ADDR_VAR 0 2
73949: PUSH
73950: LD_INT 0
73952: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
73953: LD_ADDR_VAR 0 5
73957: PUSH
73958: LD_VAR 0 1
73962: PPUSH
73963: LD_INT 21
73965: PUSH
73966: LD_INT 3
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: PPUSH
73973: CALL_OW 72
73977: ST_TO_ADDR
// if not tmp then
73978: LD_VAR 0 5
73982: NOT
73983: IFFALSE 73987
// exit ;
73985: GO 74032
// for i in tmp do
73987: LD_ADDR_VAR 0 3
73991: PUSH
73992: LD_VAR 0 5
73996: PUSH
73997: FOR_IN
73998: IFFALSE 74030
// begin result := EnemyInRange ( i , 22 ) ;
74000: LD_ADDR_VAR 0 2
74004: PUSH
74005: LD_VAR 0 3
74009: PPUSH
74010: LD_INT 22
74012: PPUSH
74013: CALL 71619 0 2
74017: ST_TO_ADDR
// if result then
74018: LD_VAR 0 2
74022: IFFALSE 74028
// exit ;
74024: POP
74025: POP
74026: GO 74032
// end ;
74028: GO 73997
74030: POP
74031: POP
// end ;
74032: LD_VAR 0 2
74036: RET
// export function FilterByTag ( units , tag ) ; begin
74037: LD_INT 0
74039: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
74040: LD_ADDR_VAR 0 3
74044: PUSH
74045: LD_VAR 0 1
74049: PPUSH
74050: LD_INT 120
74052: PUSH
74053: LD_VAR 0 2
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PPUSH
74062: CALL_OW 72
74066: ST_TO_ADDR
// end ;
74067: LD_VAR 0 3
74071: RET
// export function IsDriver ( un ) ; begin
74072: LD_INT 0
74074: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
74075: LD_ADDR_VAR 0 2
74079: PUSH
74080: LD_VAR 0 1
74084: PUSH
74085: LD_INT 55
74087: PUSH
74088: EMPTY
74089: LIST
74090: PPUSH
74091: CALL_OW 69
74095: IN
74096: ST_TO_ADDR
// end ;
74097: LD_VAR 0 2
74101: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
74102: LD_INT 0
74104: PPUSH
74105: PPUSH
// list := [ ] ;
74106: LD_ADDR_VAR 0 5
74110: PUSH
74111: EMPTY
74112: ST_TO_ADDR
// case d of 0 :
74113: LD_VAR 0 3
74117: PUSH
74118: LD_INT 0
74120: DOUBLE
74121: EQUAL
74122: IFTRUE 74126
74124: GO 74259
74126: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
74127: LD_ADDR_VAR 0 5
74131: PUSH
74132: LD_VAR 0 1
74136: PUSH
74137: LD_INT 4
74139: MINUS
74140: PUSH
74141: LD_VAR 0 2
74145: PUSH
74146: LD_INT 4
74148: MINUS
74149: PUSH
74150: LD_INT 2
74152: PUSH
74153: EMPTY
74154: LIST
74155: LIST
74156: LIST
74157: PUSH
74158: LD_VAR 0 1
74162: PUSH
74163: LD_INT 3
74165: MINUS
74166: PUSH
74167: LD_VAR 0 2
74171: PUSH
74172: LD_INT 1
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: LIST
74179: PUSH
74180: LD_VAR 0 1
74184: PUSH
74185: LD_INT 4
74187: PLUS
74188: PUSH
74189: LD_VAR 0 2
74193: PUSH
74194: LD_INT 4
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: LIST
74201: PUSH
74202: LD_VAR 0 1
74206: PUSH
74207: LD_INT 3
74209: PLUS
74210: PUSH
74211: LD_VAR 0 2
74215: PUSH
74216: LD_INT 3
74218: PLUS
74219: PUSH
74220: LD_INT 5
74222: PUSH
74223: EMPTY
74224: LIST
74225: LIST
74226: LIST
74227: PUSH
74228: LD_VAR 0 1
74232: PUSH
74233: LD_VAR 0 2
74237: PUSH
74238: LD_INT 4
74240: PLUS
74241: PUSH
74242: LD_INT 0
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: LIST
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: ST_TO_ADDR
// end ; 1 :
74257: GO 74957
74259: LD_INT 1
74261: DOUBLE
74262: EQUAL
74263: IFTRUE 74267
74265: GO 74400
74267: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
74268: LD_ADDR_VAR 0 5
74272: PUSH
74273: LD_VAR 0 1
74277: PUSH
74278: LD_VAR 0 2
74282: PUSH
74283: LD_INT 4
74285: MINUS
74286: PUSH
74287: LD_INT 3
74289: PUSH
74290: EMPTY
74291: LIST
74292: LIST
74293: LIST
74294: PUSH
74295: LD_VAR 0 1
74299: PUSH
74300: LD_INT 3
74302: MINUS
74303: PUSH
74304: LD_VAR 0 2
74308: PUSH
74309: LD_INT 3
74311: MINUS
74312: PUSH
74313: LD_INT 2
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: LIST
74320: PUSH
74321: LD_VAR 0 1
74325: PUSH
74326: LD_INT 4
74328: MINUS
74329: PUSH
74330: LD_VAR 0 2
74334: PUSH
74335: LD_INT 1
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: LIST
74342: PUSH
74343: LD_VAR 0 1
74347: PUSH
74348: LD_VAR 0 2
74352: PUSH
74353: LD_INT 3
74355: PLUS
74356: PUSH
74357: LD_INT 0
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: LIST
74364: PUSH
74365: LD_VAR 0 1
74369: PUSH
74370: LD_INT 4
74372: PLUS
74373: PUSH
74374: LD_VAR 0 2
74378: PUSH
74379: LD_INT 4
74381: PLUS
74382: PUSH
74383: LD_INT 5
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: LIST
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: ST_TO_ADDR
// end ; 2 :
74398: GO 74957
74400: LD_INT 2
74402: DOUBLE
74403: EQUAL
74404: IFTRUE 74408
74406: GO 74537
74408: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
74409: LD_ADDR_VAR 0 5
74413: PUSH
74414: LD_VAR 0 1
74418: PUSH
74419: LD_VAR 0 2
74423: PUSH
74424: LD_INT 3
74426: MINUS
74427: PUSH
74428: LD_INT 3
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: LIST
74435: PUSH
74436: LD_VAR 0 1
74440: PUSH
74441: LD_INT 4
74443: PLUS
74444: PUSH
74445: LD_VAR 0 2
74449: PUSH
74450: LD_INT 4
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: LIST
74457: PUSH
74458: LD_VAR 0 1
74462: PUSH
74463: LD_VAR 0 2
74467: PUSH
74468: LD_INT 4
74470: PLUS
74471: PUSH
74472: LD_INT 0
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: LIST
74479: PUSH
74480: LD_VAR 0 1
74484: PUSH
74485: LD_INT 3
74487: MINUS
74488: PUSH
74489: LD_VAR 0 2
74493: PUSH
74494: LD_INT 1
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: LIST
74501: PUSH
74502: LD_VAR 0 1
74506: PUSH
74507: LD_INT 4
74509: MINUS
74510: PUSH
74511: LD_VAR 0 2
74515: PUSH
74516: LD_INT 4
74518: MINUS
74519: PUSH
74520: LD_INT 2
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: LIST
74527: PUSH
74528: EMPTY
74529: LIST
74530: LIST
74531: LIST
74532: LIST
74533: LIST
74534: ST_TO_ADDR
// end ; 3 :
74535: GO 74957
74537: LD_INT 3
74539: DOUBLE
74540: EQUAL
74541: IFTRUE 74545
74543: GO 74678
74545: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
74546: LD_ADDR_VAR 0 5
74550: PUSH
74551: LD_VAR 0 1
74555: PUSH
74556: LD_INT 3
74558: PLUS
74559: PUSH
74560: LD_VAR 0 2
74564: PUSH
74565: LD_INT 4
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: LIST
74572: PUSH
74573: LD_VAR 0 1
74577: PUSH
74578: LD_INT 4
74580: PLUS
74581: PUSH
74582: LD_VAR 0 2
74586: PUSH
74587: LD_INT 4
74589: PLUS
74590: PUSH
74591: LD_INT 5
74593: PUSH
74594: EMPTY
74595: LIST
74596: LIST
74597: LIST
74598: PUSH
74599: LD_VAR 0 1
74603: PUSH
74604: LD_INT 4
74606: MINUS
74607: PUSH
74608: LD_VAR 0 2
74612: PUSH
74613: LD_INT 1
74615: PUSH
74616: EMPTY
74617: LIST
74618: LIST
74619: LIST
74620: PUSH
74621: LD_VAR 0 1
74625: PUSH
74626: LD_VAR 0 2
74630: PUSH
74631: LD_INT 4
74633: MINUS
74634: PUSH
74635: LD_INT 3
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: LIST
74642: PUSH
74643: LD_VAR 0 1
74647: PUSH
74648: LD_INT 3
74650: MINUS
74651: PUSH
74652: LD_VAR 0 2
74656: PUSH
74657: LD_INT 3
74659: MINUS
74660: PUSH
74661: LD_INT 2
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: LIST
74668: PUSH
74669: EMPTY
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: ST_TO_ADDR
// end ; 4 :
74676: GO 74957
74678: LD_INT 4
74680: DOUBLE
74681: EQUAL
74682: IFTRUE 74686
74684: GO 74819
74686: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
74687: LD_ADDR_VAR 0 5
74691: PUSH
74692: LD_VAR 0 1
74696: PUSH
74697: LD_VAR 0 2
74701: PUSH
74702: LD_INT 4
74704: PLUS
74705: PUSH
74706: LD_INT 0
74708: PUSH
74709: EMPTY
74710: LIST
74711: LIST
74712: LIST
74713: PUSH
74714: LD_VAR 0 1
74718: PUSH
74719: LD_INT 3
74721: PLUS
74722: PUSH
74723: LD_VAR 0 2
74727: PUSH
74728: LD_INT 3
74730: PLUS
74731: PUSH
74732: LD_INT 5
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: LIST
74739: PUSH
74740: LD_VAR 0 1
74744: PUSH
74745: LD_INT 4
74747: PLUS
74748: PUSH
74749: LD_VAR 0 2
74753: PUSH
74754: LD_INT 4
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: LIST
74761: PUSH
74762: LD_VAR 0 1
74766: PUSH
74767: LD_VAR 0 2
74771: PUSH
74772: LD_INT 3
74774: MINUS
74775: PUSH
74776: LD_INT 3
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: LIST
74783: PUSH
74784: LD_VAR 0 1
74788: PUSH
74789: LD_INT 4
74791: MINUS
74792: PUSH
74793: LD_VAR 0 2
74797: PUSH
74798: LD_INT 4
74800: MINUS
74801: PUSH
74802: LD_INT 2
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: LIST
74809: PUSH
74810: EMPTY
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: ST_TO_ADDR
// end ; 5 :
74817: GO 74957
74819: LD_INT 5
74821: DOUBLE
74822: EQUAL
74823: IFTRUE 74827
74825: GO 74956
74827: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
74828: LD_ADDR_VAR 0 5
74832: PUSH
74833: LD_VAR 0 1
74837: PUSH
74838: LD_INT 4
74840: MINUS
74841: PUSH
74842: LD_VAR 0 2
74846: PUSH
74847: LD_INT 1
74849: PUSH
74850: EMPTY
74851: LIST
74852: LIST
74853: LIST
74854: PUSH
74855: LD_VAR 0 1
74859: PUSH
74860: LD_VAR 0 2
74864: PUSH
74865: LD_INT 4
74867: MINUS
74868: PUSH
74869: LD_INT 3
74871: PUSH
74872: EMPTY
74873: LIST
74874: LIST
74875: LIST
74876: PUSH
74877: LD_VAR 0 1
74881: PUSH
74882: LD_INT 4
74884: PLUS
74885: PUSH
74886: LD_VAR 0 2
74890: PUSH
74891: LD_INT 4
74893: PLUS
74894: PUSH
74895: LD_INT 5
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: LIST
74902: PUSH
74903: LD_VAR 0 1
74907: PUSH
74908: LD_INT 3
74910: PLUS
74911: PUSH
74912: LD_VAR 0 2
74916: PUSH
74917: LD_INT 4
74919: PUSH
74920: EMPTY
74921: LIST
74922: LIST
74923: LIST
74924: PUSH
74925: LD_VAR 0 1
74929: PUSH
74930: LD_VAR 0 2
74934: PUSH
74935: LD_INT 3
74937: PLUS
74938: PUSH
74939: LD_INT 0
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: LIST
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: LIST
74953: ST_TO_ADDR
// end ; end ;
74954: GO 74957
74956: POP
// result := list ;
74957: LD_ADDR_VAR 0 4
74961: PUSH
74962: LD_VAR 0 5
74966: ST_TO_ADDR
// end ;
74967: LD_VAR 0 4
74971: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
74972: LD_INT 0
74974: PPUSH
74975: PPUSH
74976: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
74977: LD_VAR 0 1
74981: NOT
74982: PUSH
74983: LD_VAR 0 2
74987: PUSH
74988: LD_INT 1
74990: PUSH
74991: LD_INT 2
74993: PUSH
74994: LD_INT 3
74996: PUSH
74997: LD_INT 4
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: LIST
75004: LIST
75005: IN
75006: NOT
75007: OR
75008: IFFALSE 75012
// exit ;
75010: GO 75095
// tmp := [ ] ;
75012: LD_ADDR_VAR 0 5
75016: PUSH
75017: EMPTY
75018: ST_TO_ADDR
// for i in units do
75019: LD_ADDR_VAR 0 4
75023: PUSH
75024: LD_VAR 0 1
75028: PUSH
75029: FOR_IN
75030: IFFALSE 75064
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
75032: LD_ADDR_VAR 0 5
75036: PUSH
75037: LD_VAR 0 5
75041: PPUSH
75042: LD_VAR 0 4
75046: PPUSH
75047: LD_VAR 0 2
75051: PPUSH
75052: CALL_OW 259
75056: PPUSH
75057: CALL 76456 0 2
75061: ST_TO_ADDR
75062: GO 75029
75064: POP
75065: POP
// if not tmp then
75066: LD_VAR 0 5
75070: NOT
75071: IFFALSE 75075
// exit ;
75073: GO 75095
// result := SortListByListDesc ( units , tmp ) ;
75075: LD_ADDR_VAR 0 3
75079: PUSH
75080: LD_VAR 0 1
75084: PPUSH
75085: LD_VAR 0 5
75089: PPUSH
75090: CALL_OW 77
75094: ST_TO_ADDR
// end ;
75095: LD_VAR 0 3
75099: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
75100: LD_INT 0
75102: PPUSH
75103: PPUSH
75104: PPUSH
// result := false ;
75105: LD_ADDR_VAR 0 3
75109: PUSH
75110: LD_INT 0
75112: ST_TO_ADDR
// if not building then
75113: LD_VAR 0 2
75117: NOT
75118: IFFALSE 75122
// exit ;
75120: GO 75260
// x := GetX ( building ) ;
75122: LD_ADDR_VAR 0 4
75126: PUSH
75127: LD_VAR 0 2
75131: PPUSH
75132: CALL_OW 250
75136: ST_TO_ADDR
// y := GetY ( building ) ;
75137: LD_ADDR_VAR 0 5
75141: PUSH
75142: LD_VAR 0 2
75146: PPUSH
75147: CALL_OW 251
75151: ST_TO_ADDR
// if not x or not y then
75152: LD_VAR 0 4
75156: NOT
75157: PUSH
75158: LD_VAR 0 5
75162: NOT
75163: OR
75164: IFFALSE 75168
// exit ;
75166: GO 75260
// if GetTaskList ( unit ) then
75168: LD_VAR 0 1
75172: PPUSH
75173: CALL_OW 437
75177: IFFALSE 75260
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75179: LD_STRING e
75181: PUSH
75182: LD_VAR 0 1
75186: PPUSH
75187: CALL_OW 437
75191: PUSH
75192: LD_INT 1
75194: ARRAY
75195: PUSH
75196: LD_INT 1
75198: ARRAY
75199: EQUAL
75200: PUSH
75201: LD_VAR 0 4
75205: PUSH
75206: LD_VAR 0 1
75210: PPUSH
75211: CALL_OW 437
75215: PUSH
75216: LD_INT 1
75218: ARRAY
75219: PUSH
75220: LD_INT 2
75222: ARRAY
75223: EQUAL
75224: AND
75225: PUSH
75226: LD_VAR 0 5
75230: PUSH
75231: LD_VAR 0 1
75235: PPUSH
75236: CALL_OW 437
75240: PUSH
75241: LD_INT 1
75243: ARRAY
75244: PUSH
75245: LD_INT 3
75247: ARRAY
75248: EQUAL
75249: AND
75250: IFFALSE 75260
// result := true end ;
75252: LD_ADDR_VAR 0 3
75256: PUSH
75257: LD_INT 1
75259: ST_TO_ADDR
// end ;
75260: LD_VAR 0 3
75264: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
75265: LD_INT 0
75267: PPUSH
// result := false ;
75268: LD_ADDR_VAR 0 4
75272: PUSH
75273: LD_INT 0
75275: ST_TO_ADDR
// if GetTaskList ( unit ) then
75276: LD_VAR 0 1
75280: PPUSH
75281: CALL_OW 437
75285: IFFALSE 75368
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
75287: LD_STRING M
75289: PUSH
75290: LD_VAR 0 1
75294: PPUSH
75295: CALL_OW 437
75299: PUSH
75300: LD_INT 1
75302: ARRAY
75303: PUSH
75304: LD_INT 1
75306: ARRAY
75307: EQUAL
75308: PUSH
75309: LD_VAR 0 2
75313: PUSH
75314: LD_VAR 0 1
75318: PPUSH
75319: CALL_OW 437
75323: PUSH
75324: LD_INT 1
75326: ARRAY
75327: PUSH
75328: LD_INT 2
75330: ARRAY
75331: EQUAL
75332: AND
75333: PUSH
75334: LD_VAR 0 3
75338: PUSH
75339: LD_VAR 0 1
75343: PPUSH
75344: CALL_OW 437
75348: PUSH
75349: LD_INT 1
75351: ARRAY
75352: PUSH
75353: LD_INT 3
75355: ARRAY
75356: EQUAL
75357: AND
75358: IFFALSE 75368
// result := true ;
75360: LD_ADDR_VAR 0 4
75364: PUSH
75365: LD_INT 1
75367: ST_TO_ADDR
// end ; end ;
75368: LD_VAR 0 4
75372: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
75373: LD_INT 0
75375: PPUSH
75376: PPUSH
75377: PPUSH
75378: PPUSH
// if not unit or not area then
75379: LD_VAR 0 1
75383: NOT
75384: PUSH
75385: LD_VAR 0 2
75389: NOT
75390: OR
75391: IFFALSE 75395
// exit ;
75393: GO 75559
// tmp := AreaToList ( area , i ) ;
75395: LD_ADDR_VAR 0 6
75399: PUSH
75400: LD_VAR 0 2
75404: PPUSH
75405: LD_VAR 0 5
75409: PPUSH
75410: CALL_OW 517
75414: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
75415: LD_ADDR_VAR 0 5
75419: PUSH
75420: DOUBLE
75421: LD_INT 1
75423: DEC
75424: ST_TO_ADDR
75425: LD_VAR 0 6
75429: PUSH
75430: LD_INT 1
75432: ARRAY
75433: PUSH
75434: FOR_TO
75435: IFFALSE 75557
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
75437: LD_ADDR_VAR 0 7
75441: PUSH
75442: LD_VAR 0 6
75446: PUSH
75447: LD_INT 1
75449: ARRAY
75450: PUSH
75451: LD_VAR 0 5
75455: ARRAY
75456: PUSH
75457: LD_VAR 0 6
75461: PUSH
75462: LD_INT 2
75464: ARRAY
75465: PUSH
75466: LD_VAR 0 5
75470: ARRAY
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
75476: LD_VAR 0 7
75480: PUSH
75481: LD_INT 1
75483: ARRAY
75484: PPUSH
75485: LD_VAR 0 7
75489: PUSH
75490: LD_INT 2
75492: ARRAY
75493: PPUSH
75494: CALL_OW 428
75498: PUSH
75499: LD_INT 0
75501: EQUAL
75502: IFFALSE 75555
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
75504: LD_VAR 0 1
75508: PPUSH
75509: LD_VAR 0 7
75513: PUSH
75514: LD_INT 1
75516: ARRAY
75517: PPUSH
75518: LD_VAR 0 7
75522: PUSH
75523: LD_INT 2
75525: ARRAY
75526: PPUSH
75527: LD_VAR 0 3
75531: PPUSH
75532: CALL_OW 48
// result := IsPlaced ( unit ) ;
75536: LD_ADDR_VAR 0 4
75540: PUSH
75541: LD_VAR 0 1
75545: PPUSH
75546: CALL_OW 305
75550: ST_TO_ADDR
// exit ;
75551: POP
75552: POP
75553: GO 75559
// end ; end ;
75555: GO 75434
75557: POP
75558: POP
// end ;
75559: LD_VAR 0 4
75563: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
75564: LD_INT 0
75566: PPUSH
75567: PPUSH
75568: PPUSH
// if not side or side > 8 then
75569: LD_VAR 0 1
75573: NOT
75574: PUSH
75575: LD_VAR 0 1
75579: PUSH
75580: LD_INT 8
75582: GREATER
75583: OR
75584: IFFALSE 75588
// exit ;
75586: GO 75775
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
75588: LD_ADDR_VAR 0 4
75592: PUSH
75593: LD_INT 22
75595: PUSH
75596: LD_VAR 0 1
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: PUSH
75605: LD_INT 21
75607: PUSH
75608: LD_INT 3
75610: PUSH
75611: EMPTY
75612: LIST
75613: LIST
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: PPUSH
75619: CALL_OW 69
75623: ST_TO_ADDR
// if not tmp then
75624: LD_VAR 0 4
75628: NOT
75629: IFFALSE 75633
// exit ;
75631: GO 75775
// enable_addtolog := true ;
75633: LD_ADDR_OWVAR 81
75637: PUSH
75638: LD_INT 1
75640: ST_TO_ADDR
// AddToLog ( [ ) ;
75641: LD_STRING [
75643: PPUSH
75644: CALL_OW 561
// for i in tmp do
75648: LD_ADDR_VAR 0 3
75652: PUSH
75653: LD_VAR 0 4
75657: PUSH
75658: FOR_IN
75659: IFFALSE 75766
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
75661: LD_STRING [
75663: PUSH
75664: LD_VAR 0 3
75668: PPUSH
75669: CALL_OW 266
75673: STR
75674: PUSH
75675: LD_STRING , 
75677: STR
75678: PUSH
75679: LD_VAR 0 3
75683: PPUSH
75684: CALL_OW 250
75688: STR
75689: PUSH
75690: LD_STRING , 
75692: STR
75693: PUSH
75694: LD_VAR 0 3
75698: PPUSH
75699: CALL_OW 251
75703: STR
75704: PUSH
75705: LD_STRING , 
75707: STR
75708: PUSH
75709: LD_VAR 0 3
75713: PPUSH
75714: CALL_OW 254
75718: STR
75719: PUSH
75720: LD_STRING , 
75722: STR
75723: PUSH
75724: LD_VAR 0 3
75728: PPUSH
75729: LD_INT 1
75731: PPUSH
75732: CALL_OW 268
75736: STR
75737: PUSH
75738: LD_STRING , 
75740: STR
75741: PUSH
75742: LD_VAR 0 3
75746: PPUSH
75747: LD_INT 2
75749: PPUSH
75750: CALL_OW 268
75754: STR
75755: PUSH
75756: LD_STRING ],
75758: STR
75759: PPUSH
75760: CALL_OW 561
// end ;
75764: GO 75658
75766: POP
75767: POP
// AddToLog ( ]; ) ;
75768: LD_STRING ];
75770: PPUSH
75771: CALL_OW 561
// end ;
75775: LD_VAR 0 2
75779: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
75780: LD_INT 0
75782: PPUSH
75783: PPUSH
75784: PPUSH
75785: PPUSH
75786: PPUSH
// if not area or not rate or not max then
75787: LD_VAR 0 1
75791: NOT
75792: PUSH
75793: LD_VAR 0 2
75797: NOT
75798: OR
75799: PUSH
75800: LD_VAR 0 4
75804: NOT
75805: OR
75806: IFFALSE 75810
// exit ;
75808: GO 75999
// while 1 do
75810: LD_INT 1
75812: IFFALSE 75999
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
75814: LD_ADDR_VAR 0 9
75818: PUSH
75819: LD_VAR 0 1
75823: PPUSH
75824: LD_INT 1
75826: PPUSH
75827: CALL_OW 287
75831: PUSH
75832: LD_INT 10
75834: MUL
75835: ST_TO_ADDR
// r := rate / 10 ;
75836: LD_ADDR_VAR 0 7
75840: PUSH
75841: LD_VAR 0 2
75845: PUSH
75846: LD_INT 10
75848: DIVREAL
75849: ST_TO_ADDR
// time := 1 1$00 ;
75850: LD_ADDR_VAR 0 8
75854: PUSH
75855: LD_INT 2100
75857: ST_TO_ADDR
// if amount < min then
75858: LD_VAR 0 9
75862: PUSH
75863: LD_VAR 0 3
75867: LESS
75868: IFFALSE 75886
// r := r * 2 else
75870: LD_ADDR_VAR 0 7
75874: PUSH
75875: LD_VAR 0 7
75879: PUSH
75880: LD_INT 2
75882: MUL
75883: ST_TO_ADDR
75884: GO 75912
// if amount > max then
75886: LD_VAR 0 9
75890: PUSH
75891: LD_VAR 0 4
75895: GREATER
75896: IFFALSE 75912
// r := r / 2 ;
75898: LD_ADDR_VAR 0 7
75902: PUSH
75903: LD_VAR 0 7
75907: PUSH
75908: LD_INT 2
75910: DIVREAL
75911: ST_TO_ADDR
// time := time / r ;
75912: LD_ADDR_VAR 0 8
75916: PUSH
75917: LD_VAR 0 8
75921: PUSH
75922: LD_VAR 0 7
75926: DIVREAL
75927: ST_TO_ADDR
// if time < 0 then
75928: LD_VAR 0 8
75932: PUSH
75933: LD_INT 0
75935: LESS
75936: IFFALSE 75953
// time := time * - 1 ;
75938: LD_ADDR_VAR 0 8
75942: PUSH
75943: LD_VAR 0 8
75947: PUSH
75948: LD_INT 1
75950: NEG
75951: MUL
75952: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
75953: LD_VAR 0 8
75957: PUSH
75958: LD_INT 35
75960: PPUSH
75961: LD_INT 875
75963: PPUSH
75964: CALL_OW 12
75968: PLUS
75969: PPUSH
75970: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
75974: LD_INT 1
75976: PPUSH
75977: LD_INT 5
75979: PPUSH
75980: CALL_OW 12
75984: PPUSH
75985: LD_VAR 0 1
75989: PPUSH
75990: LD_INT 1
75992: PPUSH
75993: CALL_OW 55
// end ;
75997: GO 75810
// end ;
75999: LD_VAR 0 5
76003: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
76004: LD_INT 0
76006: PPUSH
76007: PPUSH
76008: PPUSH
76009: PPUSH
76010: PPUSH
76011: PPUSH
76012: PPUSH
76013: PPUSH
// if not turrets or not factories then
76014: LD_VAR 0 1
76018: NOT
76019: PUSH
76020: LD_VAR 0 2
76024: NOT
76025: OR
76026: IFFALSE 76030
// exit ;
76028: GO 76337
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
76030: LD_ADDR_VAR 0 10
76034: PUSH
76035: LD_INT 5
76037: PUSH
76038: LD_INT 6
76040: PUSH
76041: EMPTY
76042: LIST
76043: LIST
76044: PUSH
76045: LD_INT 2
76047: PUSH
76048: LD_INT 4
76050: PUSH
76051: EMPTY
76052: LIST
76053: LIST
76054: PUSH
76055: LD_INT 3
76057: PUSH
76058: LD_INT 5
76060: PUSH
76061: EMPTY
76062: LIST
76063: LIST
76064: PUSH
76065: EMPTY
76066: LIST
76067: LIST
76068: LIST
76069: PUSH
76070: LD_INT 24
76072: PUSH
76073: LD_INT 25
76075: PUSH
76076: EMPTY
76077: LIST
76078: LIST
76079: PUSH
76080: LD_INT 23
76082: PUSH
76083: LD_INT 27
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: PUSH
76090: EMPTY
76091: LIST
76092: LIST
76093: PUSH
76094: LD_INT 42
76096: PUSH
76097: LD_INT 43
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: PUSH
76104: LD_INT 44
76106: PUSH
76107: LD_INT 46
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: LD_INT 45
76116: PUSH
76117: LD_INT 47
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: PUSH
76124: EMPTY
76125: LIST
76126: LIST
76127: LIST
76128: PUSH
76129: EMPTY
76130: LIST
76131: LIST
76132: LIST
76133: ST_TO_ADDR
// result := [ ] ;
76134: LD_ADDR_VAR 0 3
76138: PUSH
76139: EMPTY
76140: ST_TO_ADDR
// for i in turrets do
76141: LD_ADDR_VAR 0 4
76145: PUSH
76146: LD_VAR 0 1
76150: PUSH
76151: FOR_IN
76152: IFFALSE 76335
// begin nat := GetNation ( i ) ;
76154: LD_ADDR_VAR 0 7
76158: PUSH
76159: LD_VAR 0 4
76163: PPUSH
76164: CALL_OW 248
76168: ST_TO_ADDR
// weapon := 0 ;
76169: LD_ADDR_VAR 0 8
76173: PUSH
76174: LD_INT 0
76176: ST_TO_ADDR
// if not nat then
76177: LD_VAR 0 7
76181: NOT
76182: IFFALSE 76186
// continue ;
76184: GO 76151
// for j in list [ nat ] do
76186: LD_ADDR_VAR 0 5
76190: PUSH
76191: LD_VAR 0 10
76195: PUSH
76196: LD_VAR 0 7
76200: ARRAY
76201: PUSH
76202: FOR_IN
76203: IFFALSE 76244
// if GetBWeapon ( i ) = j [ 1 ] then
76205: LD_VAR 0 4
76209: PPUSH
76210: CALL_OW 269
76214: PUSH
76215: LD_VAR 0 5
76219: PUSH
76220: LD_INT 1
76222: ARRAY
76223: EQUAL
76224: IFFALSE 76242
// begin weapon := j [ 2 ] ;
76226: LD_ADDR_VAR 0 8
76230: PUSH
76231: LD_VAR 0 5
76235: PUSH
76236: LD_INT 2
76238: ARRAY
76239: ST_TO_ADDR
// break ;
76240: GO 76244
// end ;
76242: GO 76202
76244: POP
76245: POP
// if not weapon then
76246: LD_VAR 0 8
76250: NOT
76251: IFFALSE 76255
// continue ;
76253: GO 76151
// for k in factories do
76255: LD_ADDR_VAR 0 6
76259: PUSH
76260: LD_VAR 0 2
76264: PUSH
76265: FOR_IN
76266: IFFALSE 76331
// begin weapons := AvailableWeaponList ( k ) ;
76268: LD_ADDR_VAR 0 9
76272: PUSH
76273: LD_VAR 0 6
76277: PPUSH
76278: CALL_OW 478
76282: ST_TO_ADDR
// if not weapons then
76283: LD_VAR 0 9
76287: NOT
76288: IFFALSE 76292
// continue ;
76290: GO 76265
// if weapon in weapons then
76292: LD_VAR 0 8
76296: PUSH
76297: LD_VAR 0 9
76301: IN
76302: IFFALSE 76329
// begin result := [ i , weapon ] ;
76304: LD_ADDR_VAR 0 3
76308: PUSH
76309: LD_VAR 0 4
76313: PUSH
76314: LD_VAR 0 8
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: ST_TO_ADDR
// exit ;
76323: POP
76324: POP
76325: POP
76326: POP
76327: GO 76337
// end ; end ;
76329: GO 76265
76331: POP
76332: POP
// end ;
76333: GO 76151
76335: POP
76336: POP
// end ;
76337: LD_VAR 0 3
76341: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
76342: LD_INT 0
76344: PPUSH
// if not side or side > 8 then
76345: LD_VAR 0 3
76349: NOT
76350: PUSH
76351: LD_VAR 0 3
76355: PUSH
76356: LD_INT 8
76358: GREATER
76359: OR
76360: IFFALSE 76364
// exit ;
76362: GO 76423
// if not range then
76364: LD_VAR 0 4
76368: NOT
76369: IFFALSE 76380
// range := - 12 ;
76371: LD_ADDR_VAR 0 4
76375: PUSH
76376: LD_INT 12
76378: NEG
76379: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
76380: LD_VAR 0 1
76384: PPUSH
76385: LD_VAR 0 2
76389: PPUSH
76390: LD_VAR 0 3
76394: PPUSH
76395: LD_VAR 0 4
76399: PPUSH
76400: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
76404: LD_VAR 0 1
76408: PPUSH
76409: LD_VAR 0 2
76413: PPUSH
76414: LD_VAR 0 3
76418: PPUSH
76419: CALL_OW 331
// end ;
76423: LD_VAR 0 5
76427: RET
// export function Video ( mode ) ; begin
76428: LD_INT 0
76430: PPUSH
// ingame_video = mode ;
76431: LD_ADDR_OWVAR 52
76435: PUSH
76436: LD_VAR 0 1
76440: ST_TO_ADDR
// interface_hidden = mode ;
76441: LD_ADDR_OWVAR 54
76445: PUSH
76446: LD_VAR 0 1
76450: ST_TO_ADDR
// end ;
76451: LD_VAR 0 2
76455: RET
// export function Join ( array , element ) ; begin
76456: LD_INT 0
76458: PPUSH
// result := Replace ( array , array + 1 , element ) ;
76459: LD_ADDR_VAR 0 3
76463: PUSH
76464: LD_VAR 0 1
76468: PPUSH
76469: LD_VAR 0 1
76473: PUSH
76474: LD_INT 1
76476: PLUS
76477: PPUSH
76478: LD_VAR 0 2
76482: PPUSH
76483: CALL_OW 1
76487: ST_TO_ADDR
// end ;
76488: LD_VAR 0 3
76492: RET
// export function JoinUnion ( array , element ) ; begin
76493: LD_INT 0
76495: PPUSH
// result := array union element ;
76496: LD_ADDR_VAR 0 3
76500: PUSH
76501: LD_VAR 0 1
76505: PUSH
76506: LD_VAR 0 2
76510: UNION
76511: ST_TO_ADDR
// end ;
76512: LD_VAR 0 3
76516: RET
// export function GetBehemoths ( side ) ; begin
76517: LD_INT 0
76519: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
76520: LD_ADDR_VAR 0 2
76524: PUSH
76525: LD_INT 22
76527: PUSH
76528: LD_VAR 0 1
76532: PUSH
76533: EMPTY
76534: LIST
76535: LIST
76536: PUSH
76537: LD_INT 31
76539: PUSH
76540: LD_INT 25
76542: PUSH
76543: EMPTY
76544: LIST
76545: LIST
76546: PUSH
76547: EMPTY
76548: LIST
76549: LIST
76550: PPUSH
76551: CALL_OW 69
76555: ST_TO_ADDR
// end ;
76556: LD_VAR 0 2
76560: RET
// export function Shuffle ( array ) ; var i , index ; begin
76561: LD_INT 0
76563: PPUSH
76564: PPUSH
76565: PPUSH
// result := [ ] ;
76566: LD_ADDR_VAR 0 2
76570: PUSH
76571: EMPTY
76572: ST_TO_ADDR
// if not array then
76573: LD_VAR 0 1
76577: NOT
76578: IFFALSE 76582
// exit ;
76580: GO 76681
// Randomize ;
76582: CALL_OW 10
// for i = array downto 1 do
76586: LD_ADDR_VAR 0 3
76590: PUSH
76591: DOUBLE
76592: LD_VAR 0 1
76596: INC
76597: ST_TO_ADDR
76598: LD_INT 1
76600: PUSH
76601: FOR_DOWNTO
76602: IFFALSE 76679
// begin index := rand ( 1 , array ) ;
76604: LD_ADDR_VAR 0 4
76608: PUSH
76609: LD_INT 1
76611: PPUSH
76612: LD_VAR 0 1
76616: PPUSH
76617: CALL_OW 12
76621: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
76622: LD_ADDR_VAR 0 2
76626: PUSH
76627: LD_VAR 0 2
76631: PPUSH
76632: LD_VAR 0 2
76636: PUSH
76637: LD_INT 1
76639: PLUS
76640: PPUSH
76641: LD_VAR 0 1
76645: PUSH
76646: LD_VAR 0 4
76650: ARRAY
76651: PPUSH
76652: CALL_OW 2
76656: ST_TO_ADDR
// array := Delete ( array , index ) ;
76657: LD_ADDR_VAR 0 1
76661: PUSH
76662: LD_VAR 0 1
76666: PPUSH
76667: LD_VAR 0 4
76671: PPUSH
76672: CALL_OW 3
76676: ST_TO_ADDR
// end ;
76677: GO 76601
76679: POP
76680: POP
// end ;
76681: LD_VAR 0 2
76685: RET
// export function GetBaseMaterials ( base ) ; begin
76686: LD_INT 0
76688: PPUSH
// result := [ 0 , 0 , 0 ] ;
76689: LD_ADDR_VAR 0 2
76693: PUSH
76694: LD_INT 0
76696: PUSH
76697: LD_INT 0
76699: PUSH
76700: LD_INT 0
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: LIST
76707: ST_TO_ADDR
// if not base then
76708: LD_VAR 0 1
76712: NOT
76713: IFFALSE 76717
// exit ;
76715: GO 76766
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
76717: LD_ADDR_VAR 0 2
76721: PUSH
76722: LD_VAR 0 1
76726: PPUSH
76727: LD_INT 1
76729: PPUSH
76730: CALL_OW 275
76734: PUSH
76735: LD_VAR 0 1
76739: PPUSH
76740: LD_INT 2
76742: PPUSH
76743: CALL_OW 275
76747: PUSH
76748: LD_VAR 0 1
76752: PPUSH
76753: LD_INT 3
76755: PPUSH
76756: CALL_OW 275
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: LIST
76765: ST_TO_ADDR
// end ;
76766: LD_VAR 0 2
76770: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
76771: LD_INT 0
76773: PPUSH
76774: PPUSH
// result := array ;
76775: LD_ADDR_VAR 0 3
76779: PUSH
76780: LD_VAR 0 1
76784: ST_TO_ADDR
// if size >= result then
76785: LD_VAR 0 2
76789: PUSH
76790: LD_VAR 0 3
76794: GREATEREQUAL
76795: IFFALSE 76799
// exit ;
76797: GO 76849
// if size then
76799: LD_VAR 0 2
76803: IFFALSE 76849
// for i := array downto size do
76805: LD_ADDR_VAR 0 4
76809: PUSH
76810: DOUBLE
76811: LD_VAR 0 1
76815: INC
76816: ST_TO_ADDR
76817: LD_VAR 0 2
76821: PUSH
76822: FOR_DOWNTO
76823: IFFALSE 76847
// result := Delete ( result , result ) ;
76825: LD_ADDR_VAR 0 3
76829: PUSH
76830: LD_VAR 0 3
76834: PPUSH
76835: LD_VAR 0 3
76839: PPUSH
76840: CALL_OW 3
76844: ST_TO_ADDR
76845: GO 76822
76847: POP
76848: POP
// end ;
76849: LD_VAR 0 3
76853: RET
// export function ComExit ( unit ) ; var tmp ; begin
76854: LD_INT 0
76856: PPUSH
76857: PPUSH
// if not IsInUnit ( unit ) then
76858: LD_VAR 0 1
76862: PPUSH
76863: CALL_OW 310
76867: NOT
76868: IFFALSE 76872
// exit ;
76870: GO 76932
// tmp := IsInUnit ( unit ) ;
76872: LD_ADDR_VAR 0 3
76876: PUSH
76877: LD_VAR 0 1
76881: PPUSH
76882: CALL_OW 310
76886: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
76887: LD_VAR 0 3
76891: PPUSH
76892: CALL_OW 247
76896: PUSH
76897: LD_INT 2
76899: EQUAL
76900: IFFALSE 76913
// ComExitVehicle ( unit ) else
76902: LD_VAR 0 1
76906: PPUSH
76907: CALL_OW 121
76911: GO 76922
// ComExitBuilding ( unit ) ;
76913: LD_VAR 0 1
76917: PPUSH
76918: CALL_OW 122
// result := tmp ;
76922: LD_ADDR_VAR 0 2
76926: PUSH
76927: LD_VAR 0 3
76931: ST_TO_ADDR
// end ;
76932: LD_VAR 0 2
76936: RET
// export function ComExitAll ( units ) ; var i ; begin
76937: LD_INT 0
76939: PPUSH
76940: PPUSH
// if not units then
76941: LD_VAR 0 1
76945: NOT
76946: IFFALSE 76950
// exit ;
76948: GO 76976
// for i in units do
76950: LD_ADDR_VAR 0 3
76954: PUSH
76955: LD_VAR 0 1
76959: PUSH
76960: FOR_IN
76961: IFFALSE 76974
// ComExit ( i ) ;
76963: LD_VAR 0 3
76967: PPUSH
76968: CALL 76854 0 1
76972: GO 76960
76974: POP
76975: POP
// end ;
76976: LD_VAR 0 2
76980: RET
// export function ResetHc ; begin
76981: LD_INT 0
76983: PPUSH
// InitHc ;
76984: CALL_OW 19
// hc_importance := 0 ;
76988: LD_ADDR_OWVAR 32
76992: PUSH
76993: LD_INT 0
76995: ST_TO_ADDR
// end ;
76996: LD_VAR 0 1
77000: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
77001: LD_INT 0
77003: PPUSH
77004: PPUSH
77005: PPUSH
// _x := ( x1 + x2 ) div 2 ;
77006: LD_ADDR_VAR 0 6
77010: PUSH
77011: LD_VAR 0 1
77015: PUSH
77016: LD_VAR 0 3
77020: PLUS
77021: PUSH
77022: LD_INT 2
77024: DIV
77025: ST_TO_ADDR
// if _x < 0 then
77026: LD_VAR 0 6
77030: PUSH
77031: LD_INT 0
77033: LESS
77034: IFFALSE 77051
// _x := _x * - 1 ;
77036: LD_ADDR_VAR 0 6
77040: PUSH
77041: LD_VAR 0 6
77045: PUSH
77046: LD_INT 1
77048: NEG
77049: MUL
77050: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
77051: LD_ADDR_VAR 0 7
77055: PUSH
77056: LD_VAR 0 2
77060: PUSH
77061: LD_VAR 0 4
77065: PLUS
77066: PUSH
77067: LD_INT 2
77069: DIV
77070: ST_TO_ADDR
// if _y < 0 then
77071: LD_VAR 0 7
77075: PUSH
77076: LD_INT 0
77078: LESS
77079: IFFALSE 77096
// _y := _y * - 1 ;
77081: LD_ADDR_VAR 0 7
77085: PUSH
77086: LD_VAR 0 7
77090: PUSH
77091: LD_INT 1
77093: NEG
77094: MUL
77095: ST_TO_ADDR
// result := [ _x , _y ] ;
77096: LD_ADDR_VAR 0 5
77100: PUSH
77101: LD_VAR 0 6
77105: PUSH
77106: LD_VAR 0 7
77110: PUSH
77111: EMPTY
77112: LIST
77113: LIST
77114: ST_TO_ADDR
// end ;
77115: LD_VAR 0 5
77119: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
77120: LD_INT 0
77122: PPUSH
77123: PPUSH
77124: PPUSH
77125: PPUSH
// task := GetTaskList ( unit ) ;
77126: LD_ADDR_VAR 0 7
77130: PUSH
77131: LD_VAR 0 1
77135: PPUSH
77136: CALL_OW 437
77140: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
77141: LD_VAR 0 7
77145: NOT
77146: PUSH
77147: LD_VAR 0 1
77151: PPUSH
77152: LD_VAR 0 2
77156: PPUSH
77157: CALL_OW 308
77161: NOT
77162: AND
77163: IFFALSE 77167
// exit ;
77165: GO 77285
// if IsInArea ( unit , area ) then
77167: LD_VAR 0 1
77171: PPUSH
77172: LD_VAR 0 2
77176: PPUSH
77177: CALL_OW 308
77181: IFFALSE 77199
// begin ComMoveToArea ( unit , goAway ) ;
77183: LD_VAR 0 1
77187: PPUSH
77188: LD_VAR 0 3
77192: PPUSH
77193: CALL_OW 113
// exit ;
77197: GO 77285
// end ; if task [ 1 ] [ 1 ] <> M then
77199: LD_VAR 0 7
77203: PUSH
77204: LD_INT 1
77206: ARRAY
77207: PUSH
77208: LD_INT 1
77210: ARRAY
77211: PUSH
77212: LD_STRING M
77214: NONEQUAL
77215: IFFALSE 77219
// exit ;
77217: GO 77285
// x := task [ 1 ] [ 2 ] ;
77219: LD_ADDR_VAR 0 5
77223: PUSH
77224: LD_VAR 0 7
77228: PUSH
77229: LD_INT 1
77231: ARRAY
77232: PUSH
77233: LD_INT 2
77235: ARRAY
77236: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
77237: LD_ADDR_VAR 0 6
77241: PUSH
77242: LD_VAR 0 7
77246: PUSH
77247: LD_INT 1
77249: ARRAY
77250: PUSH
77251: LD_INT 3
77253: ARRAY
77254: ST_TO_ADDR
// if InArea ( x , y , area ) then
77255: LD_VAR 0 5
77259: PPUSH
77260: LD_VAR 0 6
77264: PPUSH
77265: LD_VAR 0 2
77269: PPUSH
77270: CALL_OW 309
77274: IFFALSE 77285
// ComStop ( unit ) ;
77276: LD_VAR 0 1
77280: PPUSH
77281: CALL_OW 141
// end ;
77285: LD_VAR 0 4
77289: RET
// export function Abs ( value ) ; begin
77290: LD_INT 0
77292: PPUSH
// result := value ;
77293: LD_ADDR_VAR 0 2
77297: PUSH
77298: LD_VAR 0 1
77302: ST_TO_ADDR
// if value < 0 then
77303: LD_VAR 0 1
77307: PUSH
77308: LD_INT 0
77310: LESS
77311: IFFALSE 77328
// result := value * - 1 ;
77313: LD_ADDR_VAR 0 2
77317: PUSH
77318: LD_VAR 0 1
77322: PUSH
77323: LD_INT 1
77325: NEG
77326: MUL
77327: ST_TO_ADDR
// end ;
77328: LD_VAR 0 2
77332: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
77333: LD_INT 0
77335: PPUSH
77336: PPUSH
77337: PPUSH
77338: PPUSH
77339: PPUSH
77340: PPUSH
77341: PPUSH
77342: PPUSH
// if not unit or not building then
77343: LD_VAR 0 1
77347: NOT
77348: PUSH
77349: LD_VAR 0 2
77353: NOT
77354: OR
77355: IFFALSE 77359
// exit ;
77357: GO 77585
// x := GetX ( building ) ;
77359: LD_ADDR_VAR 0 4
77363: PUSH
77364: LD_VAR 0 2
77368: PPUSH
77369: CALL_OW 250
77373: ST_TO_ADDR
// y := GetY ( building ) ;
77374: LD_ADDR_VAR 0 6
77378: PUSH
77379: LD_VAR 0 2
77383: PPUSH
77384: CALL_OW 251
77388: ST_TO_ADDR
// d := GetDir ( building ) ;
77389: LD_ADDR_VAR 0 8
77393: PUSH
77394: LD_VAR 0 2
77398: PPUSH
77399: CALL_OW 254
77403: ST_TO_ADDR
// r := 4 ;
77404: LD_ADDR_VAR 0 9
77408: PUSH
77409: LD_INT 4
77411: ST_TO_ADDR
// for i := 1 to 5 do
77412: LD_ADDR_VAR 0 10
77416: PUSH
77417: DOUBLE
77418: LD_INT 1
77420: DEC
77421: ST_TO_ADDR
77422: LD_INT 5
77424: PUSH
77425: FOR_TO
77426: IFFALSE 77583
// begin _x := ShiftX ( x , d , r + i ) ;
77428: LD_ADDR_VAR 0 5
77432: PUSH
77433: LD_VAR 0 4
77437: PPUSH
77438: LD_VAR 0 8
77442: PPUSH
77443: LD_VAR 0 9
77447: PUSH
77448: LD_VAR 0 10
77452: PLUS
77453: PPUSH
77454: CALL_OW 272
77458: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
77459: LD_ADDR_VAR 0 7
77463: PUSH
77464: LD_VAR 0 6
77468: PPUSH
77469: LD_VAR 0 8
77473: PPUSH
77474: LD_VAR 0 9
77478: PUSH
77479: LD_VAR 0 10
77483: PLUS
77484: PPUSH
77485: CALL_OW 273
77489: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
77490: LD_VAR 0 5
77494: PPUSH
77495: LD_VAR 0 7
77499: PPUSH
77500: CALL_OW 488
77504: PUSH
77505: LD_VAR 0 5
77509: PPUSH
77510: LD_VAR 0 7
77514: PPUSH
77515: CALL_OW 428
77519: PPUSH
77520: CALL_OW 247
77524: PUSH
77525: LD_INT 3
77527: PUSH
77528: LD_INT 2
77530: PUSH
77531: EMPTY
77532: LIST
77533: LIST
77534: IN
77535: NOT
77536: AND
77537: IFFALSE 77581
// begin ComMoveXY ( unit , _x , _y ) ;
77539: LD_VAR 0 1
77543: PPUSH
77544: LD_VAR 0 5
77548: PPUSH
77549: LD_VAR 0 7
77553: PPUSH
77554: CALL_OW 111
// result := [ _x , _y ] ;
77558: LD_ADDR_VAR 0 3
77562: PUSH
77563: LD_VAR 0 5
77567: PUSH
77568: LD_VAR 0 7
77572: PUSH
77573: EMPTY
77574: LIST
77575: LIST
77576: ST_TO_ADDR
// exit ;
77577: POP
77578: POP
77579: GO 77585
// end ; end ;
77581: GO 77425
77583: POP
77584: POP
// end ;
77585: LD_VAR 0 3
77589: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
77590: LD_INT 0
77592: PPUSH
77593: PPUSH
77594: PPUSH
// result := 0 ;
77595: LD_ADDR_VAR 0 3
77599: PUSH
77600: LD_INT 0
77602: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
77603: LD_VAR 0 1
77607: PUSH
77608: LD_INT 0
77610: LESS
77611: PUSH
77612: LD_VAR 0 1
77616: PUSH
77617: LD_INT 8
77619: GREATER
77620: OR
77621: PUSH
77622: LD_VAR 0 2
77626: PUSH
77627: LD_INT 0
77629: LESS
77630: OR
77631: PUSH
77632: LD_VAR 0 2
77636: PUSH
77637: LD_INT 8
77639: GREATER
77640: OR
77641: IFFALSE 77645
// exit ;
77643: GO 77720
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
77645: LD_ADDR_VAR 0 4
77649: PUSH
77650: LD_INT 22
77652: PUSH
77653: LD_VAR 0 2
77657: PUSH
77658: EMPTY
77659: LIST
77660: LIST
77661: PPUSH
77662: CALL_OW 69
77666: PUSH
77667: FOR_IN
77668: IFFALSE 77718
// begin un := UnitShoot ( i ) ;
77670: LD_ADDR_VAR 0 5
77674: PUSH
77675: LD_VAR 0 4
77679: PPUSH
77680: CALL_OW 504
77684: ST_TO_ADDR
// if GetSide ( un ) = side1 then
77685: LD_VAR 0 5
77689: PPUSH
77690: CALL_OW 255
77694: PUSH
77695: LD_VAR 0 1
77699: EQUAL
77700: IFFALSE 77716
// begin result := un ;
77702: LD_ADDR_VAR 0 3
77706: PUSH
77707: LD_VAR 0 5
77711: ST_TO_ADDR
// exit ;
77712: POP
77713: POP
77714: GO 77720
// end ; end ;
77716: GO 77667
77718: POP
77719: POP
// end ;
77720: LD_VAR 0 3
77724: RET
// export function GetCargoBay ( units ) ; begin
77725: LD_INT 0
77727: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
77728: LD_ADDR_VAR 0 2
77732: PUSH
77733: LD_VAR 0 1
77737: PPUSH
77738: LD_INT 2
77740: PUSH
77741: LD_INT 34
77743: PUSH
77744: LD_INT 12
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: PUSH
77751: LD_INT 34
77753: PUSH
77754: LD_INT 51
77756: PUSH
77757: EMPTY
77758: LIST
77759: LIST
77760: PUSH
77761: LD_INT 34
77763: PUSH
77764: LD_INT 32
77766: PUSH
77767: EMPTY
77768: LIST
77769: LIST
77770: PUSH
77771: LD_INT 34
77773: PUSH
77774: LD_INT 89
77776: PUSH
77777: EMPTY
77778: LIST
77779: LIST
77780: PUSH
77781: EMPTY
77782: LIST
77783: LIST
77784: LIST
77785: LIST
77786: LIST
77787: PPUSH
77788: CALL_OW 72
77792: ST_TO_ADDR
// end ;
77793: LD_VAR 0 2
77797: RET
// export function Negate ( value ) ; begin
77798: LD_INT 0
77800: PPUSH
// result := not value ;
77801: LD_ADDR_VAR 0 2
77805: PUSH
77806: LD_VAR 0 1
77810: NOT
77811: ST_TO_ADDR
// end ;
77812: LD_VAR 0 2
77816: RET
// export function Inc ( value ) ; begin
77817: LD_INT 0
77819: PPUSH
// result := value + 1 ;
77820: LD_ADDR_VAR 0 2
77824: PUSH
77825: LD_VAR 0 1
77829: PUSH
77830: LD_INT 1
77832: PLUS
77833: ST_TO_ADDR
// end ;
77834: LD_VAR 0 2
77838: RET
// export function Dec ( value ) ; begin
77839: LD_INT 0
77841: PPUSH
// result := value - 1 ;
77842: LD_ADDR_VAR 0 2
77846: PUSH
77847: LD_VAR 0 1
77851: PUSH
77852: LD_INT 1
77854: MINUS
77855: ST_TO_ADDR
// end ;
77856: LD_VAR 0 2
77860: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
77861: LD_INT 0
77863: PPUSH
77864: PPUSH
77865: PPUSH
77866: PPUSH
77867: PPUSH
77868: PPUSH
77869: PPUSH
77870: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
77871: LD_VAR 0 1
77875: PPUSH
77876: LD_VAR 0 2
77880: PPUSH
77881: CALL_OW 488
77885: NOT
77886: PUSH
77887: LD_VAR 0 3
77891: PPUSH
77892: LD_VAR 0 4
77896: PPUSH
77897: CALL_OW 488
77901: NOT
77902: OR
77903: IFFALSE 77916
// begin result := - 1 ;
77905: LD_ADDR_VAR 0 5
77909: PUSH
77910: LD_INT 1
77912: NEG
77913: ST_TO_ADDR
// exit ;
77914: GO 78151
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
77916: LD_ADDR_VAR 0 12
77920: PUSH
77921: LD_VAR 0 1
77925: PPUSH
77926: LD_VAR 0 2
77930: PPUSH
77931: LD_VAR 0 3
77935: PPUSH
77936: LD_VAR 0 4
77940: PPUSH
77941: CALL 77001 0 4
77945: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
77946: LD_ADDR_VAR 0 11
77950: PUSH
77951: LD_VAR 0 1
77955: PPUSH
77956: LD_VAR 0 2
77960: PPUSH
77961: LD_VAR 0 12
77965: PUSH
77966: LD_INT 1
77968: ARRAY
77969: PPUSH
77970: LD_VAR 0 12
77974: PUSH
77975: LD_INT 2
77977: ARRAY
77978: PPUSH
77979: CALL_OW 298
77983: ST_TO_ADDR
// distance := 9999 ;
77984: LD_ADDR_VAR 0 10
77988: PUSH
77989: LD_INT 9999
77991: ST_TO_ADDR
// for i := 0 to 5 do
77992: LD_ADDR_VAR 0 6
77996: PUSH
77997: DOUBLE
77998: LD_INT 0
78000: DEC
78001: ST_TO_ADDR
78002: LD_INT 5
78004: PUSH
78005: FOR_TO
78006: IFFALSE 78149
// begin _x := ShiftX ( x1 , i , centerDist ) ;
78008: LD_ADDR_VAR 0 7
78012: PUSH
78013: LD_VAR 0 1
78017: PPUSH
78018: LD_VAR 0 6
78022: PPUSH
78023: LD_VAR 0 11
78027: PPUSH
78028: CALL_OW 272
78032: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
78033: LD_ADDR_VAR 0 8
78037: PUSH
78038: LD_VAR 0 2
78042: PPUSH
78043: LD_VAR 0 6
78047: PPUSH
78048: LD_VAR 0 11
78052: PPUSH
78053: CALL_OW 273
78057: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
78058: LD_VAR 0 7
78062: PPUSH
78063: LD_VAR 0 8
78067: PPUSH
78068: CALL_OW 488
78072: NOT
78073: IFFALSE 78077
// continue ;
78075: GO 78005
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
78077: LD_ADDR_VAR 0 9
78081: PUSH
78082: LD_VAR 0 12
78086: PUSH
78087: LD_INT 1
78089: ARRAY
78090: PPUSH
78091: LD_VAR 0 12
78095: PUSH
78096: LD_INT 2
78098: ARRAY
78099: PPUSH
78100: LD_VAR 0 7
78104: PPUSH
78105: LD_VAR 0 8
78109: PPUSH
78110: CALL_OW 298
78114: ST_TO_ADDR
// if tmp < distance then
78115: LD_VAR 0 9
78119: PUSH
78120: LD_VAR 0 10
78124: LESS
78125: IFFALSE 78147
// begin result := i ;
78127: LD_ADDR_VAR 0 5
78131: PUSH
78132: LD_VAR 0 6
78136: ST_TO_ADDR
// distance := tmp ;
78137: LD_ADDR_VAR 0 10
78141: PUSH
78142: LD_VAR 0 9
78146: ST_TO_ADDR
// end ; end ;
78147: GO 78005
78149: POP
78150: POP
// end ;
78151: LD_VAR 0 5
78155: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78156: LD_INT 0
78158: PPUSH
78159: PPUSH
// if not driver or not IsInUnit ( driver ) then
78160: LD_VAR 0 1
78164: NOT
78165: PUSH
78166: LD_VAR 0 1
78170: PPUSH
78171: CALL_OW 310
78175: NOT
78176: OR
78177: IFFALSE 78181
// exit ;
78179: GO 78271
// vehicle := IsInUnit ( driver ) ;
78181: LD_ADDR_VAR 0 3
78185: PUSH
78186: LD_VAR 0 1
78190: PPUSH
78191: CALL_OW 310
78195: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78196: LD_VAR 0 1
78200: PPUSH
78201: LD_STRING \
78203: PUSH
78204: LD_INT 0
78206: PUSH
78207: LD_INT 0
78209: PUSH
78210: LD_INT 0
78212: PUSH
78213: LD_INT 0
78215: PUSH
78216: LD_INT 0
78218: PUSH
78219: LD_INT 0
78221: PUSH
78222: EMPTY
78223: LIST
78224: LIST
78225: LIST
78226: LIST
78227: LIST
78228: LIST
78229: LIST
78230: PUSH
78231: LD_STRING E
78233: PUSH
78234: LD_INT 0
78236: PUSH
78237: LD_INT 0
78239: PUSH
78240: LD_VAR 0 3
78244: PUSH
78245: LD_INT 0
78247: PUSH
78248: LD_INT 0
78250: PUSH
78251: LD_INT 0
78253: PUSH
78254: EMPTY
78255: LIST
78256: LIST
78257: LIST
78258: LIST
78259: LIST
78260: LIST
78261: LIST
78262: PUSH
78263: EMPTY
78264: LIST
78265: LIST
78266: PPUSH
78267: CALL_OW 446
// end ;
78271: LD_VAR 0 2
78275: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
78276: LD_INT 0
78278: PPUSH
78279: PPUSH
// if not driver or not IsInUnit ( driver ) then
78280: LD_VAR 0 1
78284: NOT
78285: PUSH
78286: LD_VAR 0 1
78290: PPUSH
78291: CALL_OW 310
78295: NOT
78296: OR
78297: IFFALSE 78301
// exit ;
78299: GO 78391
// vehicle := IsInUnit ( driver ) ;
78301: LD_ADDR_VAR 0 3
78305: PUSH
78306: LD_VAR 0 1
78310: PPUSH
78311: CALL_OW 310
78315: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
78316: LD_VAR 0 1
78320: PPUSH
78321: LD_STRING \
78323: PUSH
78324: LD_INT 0
78326: PUSH
78327: LD_INT 0
78329: PUSH
78330: LD_INT 0
78332: PUSH
78333: LD_INT 0
78335: PUSH
78336: LD_INT 0
78338: PUSH
78339: LD_INT 0
78341: PUSH
78342: EMPTY
78343: LIST
78344: LIST
78345: LIST
78346: LIST
78347: LIST
78348: LIST
78349: LIST
78350: PUSH
78351: LD_STRING E
78353: PUSH
78354: LD_INT 0
78356: PUSH
78357: LD_INT 0
78359: PUSH
78360: LD_VAR 0 3
78364: PUSH
78365: LD_INT 0
78367: PUSH
78368: LD_INT 0
78370: PUSH
78371: LD_INT 0
78373: PUSH
78374: EMPTY
78375: LIST
78376: LIST
78377: LIST
78378: LIST
78379: LIST
78380: LIST
78381: LIST
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: PPUSH
78387: CALL_OW 447
// end ;
78391: LD_VAR 0 2
78395: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
78396: LD_INT 0
78398: PPUSH
78399: PPUSH
78400: PPUSH
// tmp := [ ] ;
78401: LD_ADDR_VAR 0 5
78405: PUSH
78406: EMPTY
78407: ST_TO_ADDR
// for i in units do
78408: LD_ADDR_VAR 0 4
78412: PUSH
78413: LD_VAR 0 1
78417: PUSH
78418: FOR_IN
78419: IFFALSE 78457
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
78421: LD_ADDR_VAR 0 5
78425: PUSH
78426: LD_VAR 0 5
78430: PPUSH
78431: LD_VAR 0 5
78435: PUSH
78436: LD_INT 1
78438: PLUS
78439: PPUSH
78440: LD_VAR 0 4
78444: PPUSH
78445: CALL_OW 256
78449: PPUSH
78450: CALL_OW 2
78454: ST_TO_ADDR
78455: GO 78418
78457: POP
78458: POP
// if not tmp then
78459: LD_VAR 0 5
78463: NOT
78464: IFFALSE 78468
// exit ;
78466: GO 78516
// if asc then
78468: LD_VAR 0 2
78472: IFFALSE 78496
// result := SortListByListAsc ( units , tmp ) else
78474: LD_ADDR_VAR 0 3
78478: PUSH
78479: LD_VAR 0 1
78483: PPUSH
78484: LD_VAR 0 5
78488: PPUSH
78489: CALL_OW 76
78493: ST_TO_ADDR
78494: GO 78516
// result := SortListByListDesc ( units , tmp ) ;
78496: LD_ADDR_VAR 0 3
78500: PUSH
78501: LD_VAR 0 1
78505: PPUSH
78506: LD_VAR 0 5
78510: PPUSH
78511: CALL_OW 77
78515: ST_TO_ADDR
// end ;
78516: LD_VAR 0 3
78520: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
78521: LD_INT 0
78523: PPUSH
78524: PPUSH
// task := GetTaskList ( mech ) ;
78525: LD_ADDR_VAR 0 4
78529: PUSH
78530: LD_VAR 0 1
78534: PPUSH
78535: CALL_OW 437
78539: ST_TO_ADDR
// if not task then
78540: LD_VAR 0 4
78544: NOT
78545: IFFALSE 78549
// exit ;
78547: GO 78591
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
78549: LD_ADDR_VAR 0 3
78553: PUSH
78554: LD_VAR 0 4
78558: PUSH
78559: LD_INT 1
78561: ARRAY
78562: PUSH
78563: LD_INT 1
78565: ARRAY
78566: PUSH
78567: LD_STRING r
78569: EQUAL
78570: PUSH
78571: LD_VAR 0 4
78575: PUSH
78576: LD_INT 1
78578: ARRAY
78579: PUSH
78580: LD_INT 4
78582: ARRAY
78583: PUSH
78584: LD_VAR 0 2
78588: EQUAL
78589: AND
78590: ST_TO_ADDR
// end ;
78591: LD_VAR 0 3
78595: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
78596: LD_INT 0
78598: PPUSH
// SetDir ( unit , d ) ;
78599: LD_VAR 0 1
78603: PPUSH
78604: LD_VAR 0 4
78608: PPUSH
78609: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
78613: LD_VAR 0 1
78617: PPUSH
78618: LD_VAR 0 2
78622: PPUSH
78623: LD_VAR 0 3
78627: PPUSH
78628: LD_VAR 0 5
78632: PPUSH
78633: CALL_OW 48
// end ;
78637: LD_VAR 0 6
78641: RET
// export function ToNaturalNumber ( number ) ; begin
78642: LD_INT 0
78644: PPUSH
// result := number div 1 ;
78645: LD_ADDR_VAR 0 2
78649: PUSH
78650: LD_VAR 0 1
78654: PUSH
78655: LD_INT 1
78657: DIV
78658: ST_TO_ADDR
// if number < 0 then
78659: LD_VAR 0 1
78663: PUSH
78664: LD_INT 0
78666: LESS
78667: IFFALSE 78677
// result := 0 ;
78669: LD_ADDR_VAR 0 2
78673: PUSH
78674: LD_INT 0
78676: ST_TO_ADDR
// end ;
78677: LD_VAR 0 2
78681: RET
// export function SortByClass ( units , class ) ; var un ; begin
78682: LD_INT 0
78684: PPUSH
78685: PPUSH
// if not units or not class then
78686: LD_VAR 0 1
78690: NOT
78691: PUSH
78692: LD_VAR 0 2
78696: NOT
78697: OR
78698: IFFALSE 78702
// exit ;
78700: GO 78797
// result := [ ] ;
78702: LD_ADDR_VAR 0 3
78706: PUSH
78707: EMPTY
78708: ST_TO_ADDR
// for un in units do
78709: LD_ADDR_VAR 0 4
78713: PUSH
78714: LD_VAR 0 1
78718: PUSH
78719: FOR_IN
78720: IFFALSE 78795
// if GetClass ( un ) = class then
78722: LD_VAR 0 4
78726: PPUSH
78727: CALL_OW 257
78731: PUSH
78732: LD_VAR 0 2
78736: EQUAL
78737: IFFALSE 78764
// result := Insert ( result , 1 , un ) else
78739: LD_ADDR_VAR 0 3
78743: PUSH
78744: LD_VAR 0 3
78748: PPUSH
78749: LD_INT 1
78751: PPUSH
78752: LD_VAR 0 4
78756: PPUSH
78757: CALL_OW 2
78761: ST_TO_ADDR
78762: GO 78793
// result := Replace ( result , result + 1 , un ) ;
78764: LD_ADDR_VAR 0 3
78768: PUSH
78769: LD_VAR 0 3
78773: PPUSH
78774: LD_VAR 0 3
78778: PUSH
78779: LD_INT 1
78781: PLUS
78782: PPUSH
78783: LD_VAR 0 4
78787: PPUSH
78788: CALL_OW 1
78792: ST_TO_ADDR
78793: GO 78719
78795: POP
78796: POP
// end ;
78797: LD_VAR 0 3
78801: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
78802: LD_INT 0
78804: PPUSH
78805: PPUSH
78806: PPUSH
78807: PPUSH
78808: PPUSH
78809: PPUSH
78810: PPUSH
// result := [ ] ;
78811: LD_ADDR_VAR 0 4
78815: PUSH
78816: EMPTY
78817: ST_TO_ADDR
// if x - r < 0 then
78818: LD_VAR 0 1
78822: PUSH
78823: LD_VAR 0 3
78827: MINUS
78828: PUSH
78829: LD_INT 0
78831: LESS
78832: IFFALSE 78844
// min_x := 0 else
78834: LD_ADDR_VAR 0 8
78838: PUSH
78839: LD_INT 0
78841: ST_TO_ADDR
78842: GO 78860
// min_x := x - r ;
78844: LD_ADDR_VAR 0 8
78848: PUSH
78849: LD_VAR 0 1
78853: PUSH
78854: LD_VAR 0 3
78858: MINUS
78859: ST_TO_ADDR
// if y - r < 0 then
78860: LD_VAR 0 2
78864: PUSH
78865: LD_VAR 0 3
78869: MINUS
78870: PUSH
78871: LD_INT 0
78873: LESS
78874: IFFALSE 78886
// min_y := 0 else
78876: LD_ADDR_VAR 0 7
78880: PUSH
78881: LD_INT 0
78883: ST_TO_ADDR
78884: GO 78902
// min_y := y - r ;
78886: LD_ADDR_VAR 0 7
78890: PUSH
78891: LD_VAR 0 2
78895: PUSH
78896: LD_VAR 0 3
78900: MINUS
78901: ST_TO_ADDR
// max_x := x + r ;
78902: LD_ADDR_VAR 0 9
78906: PUSH
78907: LD_VAR 0 1
78911: PUSH
78912: LD_VAR 0 3
78916: PLUS
78917: ST_TO_ADDR
// max_y := y + r ;
78918: LD_ADDR_VAR 0 10
78922: PUSH
78923: LD_VAR 0 2
78927: PUSH
78928: LD_VAR 0 3
78932: PLUS
78933: ST_TO_ADDR
// for _x = min_x to max_x do
78934: LD_ADDR_VAR 0 5
78938: PUSH
78939: DOUBLE
78940: LD_VAR 0 8
78944: DEC
78945: ST_TO_ADDR
78946: LD_VAR 0 9
78950: PUSH
78951: FOR_TO
78952: IFFALSE 79053
// for _y = min_y to max_y do
78954: LD_ADDR_VAR 0 6
78958: PUSH
78959: DOUBLE
78960: LD_VAR 0 7
78964: DEC
78965: ST_TO_ADDR
78966: LD_VAR 0 10
78970: PUSH
78971: FOR_TO
78972: IFFALSE 79049
// begin if not ValidHex ( _x , _y ) then
78974: LD_VAR 0 5
78978: PPUSH
78979: LD_VAR 0 6
78983: PPUSH
78984: CALL_OW 488
78988: NOT
78989: IFFALSE 78993
// continue ;
78991: GO 78971
// if GetResourceTypeXY ( _x , _y ) then
78993: LD_VAR 0 5
78997: PPUSH
78998: LD_VAR 0 6
79002: PPUSH
79003: CALL_OW 283
79007: IFFALSE 79047
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
79009: LD_ADDR_VAR 0 4
79013: PUSH
79014: LD_VAR 0 4
79018: PPUSH
79019: LD_VAR 0 4
79023: PUSH
79024: LD_INT 1
79026: PLUS
79027: PPUSH
79028: LD_VAR 0 5
79032: PUSH
79033: LD_VAR 0 6
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PPUSH
79042: CALL_OW 1
79046: ST_TO_ADDR
// end ;
79047: GO 78971
79049: POP
79050: POP
79051: GO 78951
79053: POP
79054: POP
// end ;
79055: LD_VAR 0 4
79059: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
79060: LD_INT 0
79062: PPUSH
79063: PPUSH
79064: PPUSH
79065: PPUSH
79066: PPUSH
79067: PPUSH
79068: PPUSH
79069: PPUSH
// if not units then
79070: LD_VAR 0 1
79074: NOT
79075: IFFALSE 79079
// exit ;
79077: GO 79603
// result := UnitFilter ( units , [ f_ok ] ) ;
79079: LD_ADDR_VAR 0 3
79083: PUSH
79084: LD_VAR 0 1
79088: PPUSH
79089: LD_INT 50
79091: PUSH
79092: EMPTY
79093: LIST
79094: PPUSH
79095: CALL_OW 72
79099: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
79100: LD_ADDR_VAR 0 8
79104: PUSH
79105: LD_VAR 0 1
79109: PUSH
79110: LD_INT 1
79112: ARRAY
79113: PPUSH
79114: CALL_OW 255
79118: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
79119: LD_ADDR_VAR 0 10
79123: PUSH
79124: LD_INT 29
79126: PUSH
79127: LD_INT 91
79129: PUSH
79130: LD_INT 49
79132: PUSH
79133: EMPTY
79134: LIST
79135: LIST
79136: LIST
79137: ST_TO_ADDR
// if not result then
79138: LD_VAR 0 3
79142: NOT
79143: IFFALSE 79147
// exit ;
79145: GO 79603
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
79147: LD_ADDR_VAR 0 5
79151: PUSH
79152: LD_INT 81
79154: PUSH
79155: LD_VAR 0 8
79159: PUSH
79160: EMPTY
79161: LIST
79162: LIST
79163: PPUSH
79164: CALL_OW 69
79168: ST_TO_ADDR
// for i in result do
79169: LD_ADDR_VAR 0 4
79173: PUSH
79174: LD_VAR 0 3
79178: PUSH
79179: FOR_IN
79180: IFFALSE 79601
// begin tag := GetTag ( i ) + 1 ;
79182: LD_ADDR_VAR 0 9
79186: PUSH
79187: LD_VAR 0 4
79191: PPUSH
79192: CALL_OW 110
79196: PUSH
79197: LD_INT 1
79199: PLUS
79200: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
79201: LD_ADDR_VAR 0 7
79205: PUSH
79206: LD_VAR 0 4
79210: PPUSH
79211: CALL_OW 250
79215: PPUSH
79216: LD_VAR 0 4
79220: PPUSH
79221: CALL_OW 251
79225: PPUSH
79226: LD_INT 6
79228: PPUSH
79229: CALL 78802 0 3
79233: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
79234: LD_VAR 0 4
79238: PPUSH
79239: CALL_OW 247
79243: PUSH
79244: LD_INT 2
79246: EQUAL
79247: PUSH
79248: LD_VAR 0 7
79252: AND
79253: PUSH
79254: LD_VAR 0 4
79258: PPUSH
79259: CALL_OW 264
79263: PUSH
79264: LD_VAR 0 10
79268: IN
79269: NOT
79270: AND
79271: IFFALSE 79310
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
79273: LD_VAR 0 4
79277: PPUSH
79278: LD_VAR 0 7
79282: PUSH
79283: LD_INT 1
79285: ARRAY
79286: PUSH
79287: LD_INT 1
79289: ARRAY
79290: PPUSH
79291: LD_VAR 0 7
79295: PUSH
79296: LD_INT 1
79298: ARRAY
79299: PUSH
79300: LD_INT 2
79302: ARRAY
79303: PPUSH
79304: CALL_OW 116
79308: GO 79599
// if path > tag then
79310: LD_VAR 0 2
79314: PUSH
79315: LD_VAR 0 9
79319: GREATER
79320: IFFALSE 79528
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
79322: LD_ADDR_VAR 0 6
79326: PUSH
79327: LD_VAR 0 5
79331: PPUSH
79332: LD_INT 91
79334: PUSH
79335: LD_VAR 0 4
79339: PUSH
79340: LD_INT 8
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: LIST
79347: PPUSH
79348: CALL_OW 72
79352: ST_TO_ADDR
// if nearEnemy then
79353: LD_VAR 0 6
79357: IFFALSE 79426
// begin if GetWeapon ( i ) = ru_time_lapser then
79359: LD_VAR 0 4
79363: PPUSH
79364: CALL_OW 264
79368: PUSH
79369: LD_INT 49
79371: EQUAL
79372: IFFALSE 79400
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
79374: LD_VAR 0 4
79378: PPUSH
79379: LD_VAR 0 6
79383: PPUSH
79384: LD_VAR 0 4
79388: PPUSH
79389: CALL_OW 74
79393: PPUSH
79394: CALL_OW 112
79398: GO 79424
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
79400: LD_VAR 0 4
79404: PPUSH
79405: LD_VAR 0 6
79409: PPUSH
79410: LD_VAR 0 4
79414: PPUSH
79415: CALL_OW 74
79419: PPUSH
79420: CALL_OW 115
// end else
79424: GO 79526
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
79426: LD_VAR 0 4
79430: PPUSH
79431: LD_VAR 0 2
79435: PUSH
79436: LD_VAR 0 9
79440: ARRAY
79441: PUSH
79442: LD_INT 1
79444: ARRAY
79445: PPUSH
79446: LD_VAR 0 2
79450: PUSH
79451: LD_VAR 0 9
79455: ARRAY
79456: PUSH
79457: LD_INT 2
79459: ARRAY
79460: PPUSH
79461: CALL_OW 297
79465: PUSH
79466: LD_INT 6
79468: GREATER
79469: IFFALSE 79512
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
79471: LD_VAR 0 4
79475: PPUSH
79476: LD_VAR 0 2
79480: PUSH
79481: LD_VAR 0 9
79485: ARRAY
79486: PUSH
79487: LD_INT 1
79489: ARRAY
79490: PPUSH
79491: LD_VAR 0 2
79495: PUSH
79496: LD_VAR 0 9
79500: ARRAY
79501: PUSH
79502: LD_INT 2
79504: ARRAY
79505: PPUSH
79506: CALL_OW 114
79510: GO 79526
// SetTag ( i , tag ) ;
79512: LD_VAR 0 4
79516: PPUSH
79517: LD_VAR 0 9
79521: PPUSH
79522: CALL_OW 109
// end else
79526: GO 79599
// if enemy then
79528: LD_VAR 0 5
79532: IFFALSE 79599
// begin if GetWeapon ( i ) = ru_time_lapser then
79534: LD_VAR 0 4
79538: PPUSH
79539: CALL_OW 264
79543: PUSH
79544: LD_INT 49
79546: EQUAL
79547: IFFALSE 79575
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
79549: LD_VAR 0 4
79553: PPUSH
79554: LD_VAR 0 5
79558: PPUSH
79559: LD_VAR 0 4
79563: PPUSH
79564: CALL_OW 74
79568: PPUSH
79569: CALL_OW 112
79573: GO 79599
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
79575: LD_VAR 0 4
79579: PPUSH
79580: LD_VAR 0 5
79584: PPUSH
79585: LD_VAR 0 4
79589: PPUSH
79590: CALL_OW 74
79594: PPUSH
79595: CALL_OW 115
// end ; end ;
79599: GO 79179
79601: POP
79602: POP
// end ;
79603: LD_VAR 0 3
79607: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
79608: LD_INT 0
79610: PPUSH
79611: PPUSH
79612: PPUSH
// if not unit or IsInUnit ( unit ) then
79613: LD_VAR 0 1
79617: NOT
79618: PUSH
79619: LD_VAR 0 1
79623: PPUSH
79624: CALL_OW 310
79628: OR
79629: IFFALSE 79633
// exit ;
79631: GO 79724
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
79633: LD_ADDR_VAR 0 4
79637: PUSH
79638: LD_VAR 0 1
79642: PPUSH
79643: CALL_OW 250
79647: PPUSH
79648: LD_VAR 0 2
79652: PPUSH
79653: LD_INT 1
79655: PPUSH
79656: CALL_OW 272
79660: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
79661: LD_ADDR_VAR 0 5
79665: PUSH
79666: LD_VAR 0 1
79670: PPUSH
79671: CALL_OW 251
79675: PPUSH
79676: LD_VAR 0 2
79680: PPUSH
79681: LD_INT 1
79683: PPUSH
79684: CALL_OW 273
79688: ST_TO_ADDR
// if ValidHex ( x , y ) then
79689: LD_VAR 0 4
79693: PPUSH
79694: LD_VAR 0 5
79698: PPUSH
79699: CALL_OW 488
79703: IFFALSE 79724
// ComTurnXY ( unit , x , y ) ;
79705: LD_VAR 0 1
79709: PPUSH
79710: LD_VAR 0 4
79714: PPUSH
79715: LD_VAR 0 5
79719: PPUSH
79720: CALL_OW 118
// end ;
79724: LD_VAR 0 3
79728: RET
// export function SeeUnits ( side , units ) ; var i ; begin
79729: LD_INT 0
79731: PPUSH
79732: PPUSH
// result := false ;
79733: LD_ADDR_VAR 0 3
79737: PUSH
79738: LD_INT 0
79740: ST_TO_ADDR
// if not units then
79741: LD_VAR 0 2
79745: NOT
79746: IFFALSE 79750
// exit ;
79748: GO 79795
// for i in units do
79750: LD_ADDR_VAR 0 4
79754: PUSH
79755: LD_VAR 0 2
79759: PUSH
79760: FOR_IN
79761: IFFALSE 79793
// if See ( side , i ) then
79763: LD_VAR 0 1
79767: PPUSH
79768: LD_VAR 0 4
79772: PPUSH
79773: CALL_OW 292
79777: IFFALSE 79791
// begin result := true ;
79779: LD_ADDR_VAR 0 3
79783: PUSH
79784: LD_INT 1
79786: ST_TO_ADDR
// exit ;
79787: POP
79788: POP
79789: GO 79795
// end ;
79791: GO 79760
79793: POP
79794: POP
// end ;
79795: LD_VAR 0 3
79799: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
79800: LD_INT 0
79802: PPUSH
79803: PPUSH
79804: PPUSH
79805: PPUSH
// if not unit or not points then
79806: LD_VAR 0 1
79810: NOT
79811: PUSH
79812: LD_VAR 0 2
79816: NOT
79817: OR
79818: IFFALSE 79822
// exit ;
79820: GO 79912
// dist := 99999 ;
79822: LD_ADDR_VAR 0 5
79826: PUSH
79827: LD_INT 99999
79829: ST_TO_ADDR
// for i in points do
79830: LD_ADDR_VAR 0 4
79834: PUSH
79835: LD_VAR 0 2
79839: PUSH
79840: FOR_IN
79841: IFFALSE 79910
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
79843: LD_ADDR_VAR 0 6
79847: PUSH
79848: LD_VAR 0 1
79852: PPUSH
79853: LD_VAR 0 4
79857: PUSH
79858: LD_INT 1
79860: ARRAY
79861: PPUSH
79862: LD_VAR 0 4
79866: PUSH
79867: LD_INT 2
79869: ARRAY
79870: PPUSH
79871: CALL_OW 297
79875: ST_TO_ADDR
// if tmpDist < dist then
79876: LD_VAR 0 6
79880: PUSH
79881: LD_VAR 0 5
79885: LESS
79886: IFFALSE 79908
// begin result := i ;
79888: LD_ADDR_VAR 0 3
79892: PUSH
79893: LD_VAR 0 4
79897: ST_TO_ADDR
// dist := tmpDist ;
79898: LD_ADDR_VAR 0 5
79902: PUSH
79903: LD_VAR 0 6
79907: ST_TO_ADDR
// end ; end ;
79908: GO 79840
79910: POP
79911: POP
// end ;
79912: LD_VAR 0 3
79916: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
79917: LD_INT 0
79919: PPUSH
// uc_side := side ;
79920: LD_ADDR_OWVAR 20
79924: PUSH
79925: LD_VAR 0 1
79929: ST_TO_ADDR
// uc_nation := 3 ;
79930: LD_ADDR_OWVAR 21
79934: PUSH
79935: LD_INT 3
79937: ST_TO_ADDR
// vc_chassis := 25 ;
79938: LD_ADDR_OWVAR 37
79942: PUSH
79943: LD_INT 25
79945: ST_TO_ADDR
// vc_engine := engine_siberite ;
79946: LD_ADDR_OWVAR 39
79950: PUSH
79951: LD_INT 3
79953: ST_TO_ADDR
// vc_control := control_computer ;
79954: LD_ADDR_OWVAR 38
79958: PUSH
79959: LD_INT 3
79961: ST_TO_ADDR
// vc_weapon := 59 ;
79962: LD_ADDR_OWVAR 40
79966: PUSH
79967: LD_INT 59
79969: ST_TO_ADDR
// result := CreateVehicle ;
79970: LD_ADDR_VAR 0 5
79974: PUSH
79975: CALL_OW 45
79979: ST_TO_ADDR
// SetDir ( result , d ) ;
79980: LD_VAR 0 5
79984: PPUSH
79985: LD_VAR 0 4
79989: PPUSH
79990: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
79994: LD_VAR 0 5
79998: PPUSH
79999: LD_VAR 0 2
80003: PPUSH
80004: LD_VAR 0 3
80008: PPUSH
80009: LD_INT 0
80011: PPUSH
80012: CALL_OW 48
// end ;
80016: LD_VAR 0 5
80020: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
80021: LD_INT 0
80023: PPUSH
80024: PPUSH
80025: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
80026: LD_ADDR_VAR 0 2
80030: PUSH
80031: LD_INT 0
80033: PUSH
80034: LD_INT 0
80036: PUSH
80037: LD_INT 0
80039: PUSH
80040: LD_INT 0
80042: PUSH
80043: EMPTY
80044: LIST
80045: LIST
80046: LIST
80047: LIST
80048: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
80049: LD_VAR 0 1
80053: NOT
80054: PUSH
80055: LD_VAR 0 1
80059: PPUSH
80060: CALL_OW 264
80064: PUSH
80065: LD_INT 12
80067: PUSH
80068: LD_INT 51
80070: PUSH
80071: LD_INT 32
80073: PUSH
80074: LD_INT 89
80076: PUSH
80077: EMPTY
80078: LIST
80079: LIST
80080: LIST
80081: LIST
80082: IN
80083: NOT
80084: OR
80085: IFFALSE 80089
// exit ;
80087: GO 80187
// for i := 1 to 3 do
80089: LD_ADDR_VAR 0 3
80093: PUSH
80094: DOUBLE
80095: LD_INT 1
80097: DEC
80098: ST_TO_ADDR
80099: LD_INT 3
80101: PUSH
80102: FOR_TO
80103: IFFALSE 80185
// begin tmp := GetCargo ( cargo , i ) ;
80105: LD_ADDR_VAR 0 4
80109: PUSH
80110: LD_VAR 0 1
80114: PPUSH
80115: LD_VAR 0 3
80119: PPUSH
80120: CALL_OW 289
80124: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
80125: LD_ADDR_VAR 0 2
80129: PUSH
80130: LD_VAR 0 2
80134: PPUSH
80135: LD_VAR 0 3
80139: PPUSH
80140: LD_VAR 0 4
80144: PPUSH
80145: CALL_OW 1
80149: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
80150: LD_ADDR_VAR 0 2
80154: PUSH
80155: LD_VAR 0 2
80159: PPUSH
80160: LD_INT 4
80162: PPUSH
80163: LD_VAR 0 2
80167: PUSH
80168: LD_INT 4
80170: ARRAY
80171: PUSH
80172: LD_VAR 0 4
80176: PLUS
80177: PPUSH
80178: CALL_OW 1
80182: ST_TO_ADDR
// end ;
80183: GO 80102
80185: POP
80186: POP
// end ;
80187: LD_VAR 0 2
80191: RET
// export function Length ( array ) ; begin
80192: LD_INT 0
80194: PPUSH
// result := array + 0 ;
80195: LD_ADDR_VAR 0 2
80199: PUSH
80200: LD_VAR 0 1
80204: PUSH
80205: LD_INT 0
80207: PLUS
80208: ST_TO_ADDR
// end ;
80209: LD_VAR 0 2
80213: RET
// export function PrepareArray ( array ) ; begin
80214: LD_INT 0
80216: PPUSH
// result := array diff 0 ;
80217: LD_ADDR_VAR 0 2
80221: PUSH
80222: LD_VAR 0 1
80226: PUSH
80227: LD_INT 0
80229: DIFF
80230: ST_TO_ADDR
// if not result [ 1 ] then
80231: LD_VAR 0 2
80235: PUSH
80236: LD_INT 1
80238: ARRAY
80239: NOT
80240: IFFALSE 80260
// result := Delete ( result , 1 ) ;
80242: LD_ADDR_VAR 0 2
80246: PUSH
80247: LD_VAR 0 2
80251: PPUSH
80252: LD_INT 1
80254: PPUSH
80255: CALL_OW 3
80259: ST_TO_ADDR
// end ;
80260: LD_VAR 0 2
80264: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
80265: LD_INT 0
80267: PPUSH
80268: PPUSH
80269: PPUSH
80270: PPUSH
// sibRocketRange := 25 ;
80271: LD_ADDR_VAR 0 6
80275: PUSH
80276: LD_INT 25
80278: ST_TO_ADDR
// result := false ;
80279: LD_ADDR_VAR 0 4
80283: PUSH
80284: LD_INT 0
80286: ST_TO_ADDR
// for i := 0 to 5 do
80287: LD_ADDR_VAR 0 5
80291: PUSH
80292: DOUBLE
80293: LD_INT 0
80295: DEC
80296: ST_TO_ADDR
80297: LD_INT 5
80299: PUSH
80300: FOR_TO
80301: IFFALSE 80368
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
80303: LD_VAR 0 1
80307: PPUSH
80308: LD_VAR 0 5
80312: PPUSH
80313: LD_VAR 0 6
80317: PPUSH
80318: CALL_OW 272
80322: PPUSH
80323: LD_VAR 0 2
80327: PPUSH
80328: LD_VAR 0 5
80332: PPUSH
80333: LD_VAR 0 6
80337: PPUSH
80338: CALL_OW 273
80342: PPUSH
80343: LD_VAR 0 3
80347: PPUSH
80348: CALL_OW 309
80352: IFFALSE 80366
// begin result := true ;
80354: LD_ADDR_VAR 0 4
80358: PUSH
80359: LD_INT 1
80361: ST_TO_ADDR
// exit ;
80362: POP
80363: POP
80364: GO 80370
// end ;
80366: GO 80300
80368: POP
80369: POP
// end ;
80370: LD_VAR 0 4
80374: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
80375: LD_INT 0
80377: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
80378: LD_VAR 0 1
80382: PPUSH
80383: LD_VAR 0 2
80387: PPUSH
80388: LD_INT 0
80390: PPUSH
80391: LD_INT 0
80393: PPUSH
80394: LD_INT 1
80396: PPUSH
80397: LD_INT 0
80399: PPUSH
80400: CALL_OW 587
// end ; end_of_file
80404: LD_VAR 0 3
80408: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
80409: LD_VAR 0 1
80413: PUSH
80414: LD_INT 200
80416: DOUBLE
80417: GREATEREQUAL
80418: IFFALSE 80426
80420: LD_INT 299
80422: DOUBLE
80423: LESSEQUAL
80424: IFTRUE 80428
80426: GO 80460
80428: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
80429: LD_VAR 0 1
80433: PPUSH
80434: LD_VAR 0 2
80438: PPUSH
80439: LD_VAR 0 3
80443: PPUSH
80444: LD_VAR 0 4
80448: PPUSH
80449: LD_VAR 0 5
80453: PPUSH
80454: CALL 35075 0 5
80458: GO 80537
80460: LD_INT 300
80462: DOUBLE
80463: GREATEREQUAL
80464: IFFALSE 80472
80466: LD_INT 399
80468: DOUBLE
80469: LESSEQUAL
80470: IFTRUE 80474
80472: GO 80536
80474: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
80475: LD_VAR 0 1
80479: PPUSH
80480: LD_VAR 0 2
80484: PPUSH
80485: LD_VAR 0 3
80489: PPUSH
80490: LD_VAR 0 4
80494: PPUSH
80495: LD_VAR 0 5
80499: PPUSH
80500: LD_VAR 0 6
80504: PPUSH
80505: LD_VAR 0 7
80509: PPUSH
80510: LD_VAR 0 8
80514: PPUSH
80515: LD_VAR 0 9
80519: PPUSH
80520: LD_VAR 0 10
80524: PPUSH
80525: LD_VAR 0 11
80529: PPUSH
80530: CALL 31408 0 11
80534: GO 80537
80536: POP
// end ;
80537: PPOPN 11
80539: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
80540: LD_VAR 0 1
80544: PPUSH
80545: LD_VAR 0 2
80549: PPUSH
80550: LD_VAR 0 3
80554: PPUSH
80555: LD_VAR 0 4
80559: PPUSH
80560: LD_VAR 0 5
80564: PPUSH
80565: CALL 34811 0 5
// end ; end_of_file
80569: PPOPN 5
80571: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
80572: LD_VAR 0 1
80576: PPUSH
80577: LD_VAR 0 2
80581: PPUSH
80582: LD_VAR 0 3
80586: PPUSH
80587: LD_VAR 0 4
80591: PPUSH
80592: LD_VAR 0 5
80596: PPUSH
80597: LD_VAR 0 6
80601: PPUSH
80602: CALL 19028 0 6
// end ;
80606: PPOPN 6
80608: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
80609: LD_INT 0
80611: PPUSH
// begin if not units then
80612: LD_VAR 0 1
80616: NOT
80617: IFFALSE 80621
// exit ;
80619: GO 80621
// end ;
80621: PPOPN 7
80623: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
80624: CALL 18922 0 0
// end ;
80628: PPOPN 1
80630: END
