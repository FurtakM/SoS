// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; export westPathUsed , laserCounterDestroy , rocketBuilded , cratesAllow ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// Init ;
  15: CALL 92 0 0
// SetBName ( rueastdepot , ryutin ) ;
  19: LD_INT 4
  21: PPUSH
  22: LD_STRING ryutin
  24: PPUSH
  25: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  29: LD_INT 6
  31: PPUSH
  32: LD_STRING yegorov
  34: PPUSH
  35: CALL_OW 500
// CreateNature ;
  39: CALL 15455 0 0
// PrepareDifficulty ;
  43: CALL 12828 0 0
// PrepareVehicles ;
  47: CALL 1800 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
  51: LD_INT 4
  53: PPUSH
  54: LD_INT 0
  56: PPUSH
  57: LD_INT 1
  59: PPUSH
  60: LD_INT 0
  62: PPUSH
  63: CALL 1370 0 4
// PrepareAmericanHeroes ;
  67: CALL 660 0 0
// PrepareRussianCommander ;
  71: CALL 3337 0 0
// PrepareWestBase ;
  75: CALL 4062 0 0
// PrepareEastBase ;
  79: CALL 3416 0 0
// PrepareOtherRussians ;
  83: CALL 4288 0 0
// Action ;
  87: CALL 5973 0 0
// end ;
  91: END
// function Init ; begin
  92: LD_INT 0
  94: PPUSH
// RuScientists := [ ] ;
  95: LD_ADDR_EXP 27
  99: PUSH
 100: EMPTY
 101: ST_TO_ADDR
// sciCounter := 0 ;
 102: LD_ADDR_EXP 28
 106: PUSH
 107: LD_INT 0
 109: ST_TO_ADDR
// ruDestroyedBuildings := [ ] ;
 110: LD_ADDR_EXP 31
 114: PUSH
 115: EMPTY
 116: ST_TO_ADDR
// russianTanks := [ ] ;
 117: LD_ADDR_EXP 32
 121: PUSH
 122: EMPTY
 123: ST_TO_ADDR
// russianTimeLapsers := [ ] ;
 124: LD_ADDR_EXP 33
 128: PUSH
 129: EMPTY
 130: ST_TO_ADDR
// arabianMines := [ ] ;
 131: LD_ADDR_EXP 37
 135: PUSH
 136: EMPTY
 137: ST_TO_ADDR
// kurtStatus := LoadVariable ( 06_KurtStatus_1 , 0 ) ;
 138: LD_ADDR_EXP 19
 142: PUSH
 143: LD_STRING 06_KurtStatus_1
 145: PPUSH
 146: LD_INT 0
 148: PPUSH
 149: CALL_OW 30
 153: ST_TO_ADDR
// secondPass := 0 ;
 154: LD_ADDR_EXP 20
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// teleportExplored := 0 ;
 162: LD_ADDR_EXP 26
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// attackTactic := 0 ;
 170: LD_ADDR_EXP 36
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// tpCounter := 0 ;
 178: LD_ADDR_EXP 22
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// askSiberite := 0 ;
 186: LD_ADDR_EXP 25
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// warWithLegion := 0 ;
 194: LD_ADDR_EXP 23
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// fakeInfo := 0 ;
 202: LD_ADDR_EXP 24
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// cratesSpawned := 0 ;
 210: LD_ADDR_EXP 38
 214: PUSH
 215: LD_INT 0
 217: ST_TO_ADDR
// ruAI := 0 ;
 218: LD_ADDR_EXP 34
 222: PUSH
 223: LD_INT 0
 225: ST_TO_ADDR
// ruEscape := 0 ;
 226: LD_ADDR_EXP 35
 230: PUSH
 231: LD_INT 0
 233: ST_TO_ADDR
// eventVar1 := 0 ;
 234: LD_ADDR_EXP 40
 238: PUSH
 239: LD_INT 0
 241: ST_TO_ADDR
// mission_prefix := 12_ ;
 242: LD_ADDR_EXP 39
 246: PUSH
 247: LD_STRING 12_
 249: ST_TO_ADDR
// debugMode := 0 ;
 250: LD_ADDR_EXP 41
 254: PUSH
 255: LD_INT 0
 257: ST_TO_ADDR
// westPathUsed := false ;
 258: LD_ADDR_EXP 42
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// laserCounterDestroy := 0 ;
 266: LD_ADDR_EXP 43
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// rocketBuilded := false ;
 274: LD_ADDR_EXP 44
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// cratesAllow := false ;
 282: LD_ADDR_EXP 45
 286: PUSH
 287: LD_INT 0
 289: ST_TO_ADDR
// end ;
 290: LD_VAR 0 1
 294: RET
// every 0 0$1 trigger debugMode do var i ;
 295: LD_EXP 41
 299: IFFALSE 605
 301: GO 303
 303: DISABLE
 304: LD_INT 0
 306: PPUSH
// begin enable ;
 307: ENABLE
// FogOff ( true ) ;
 308: LD_INT 1
 310: PPUSH
 311: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 315: LD_ADDR_VAR 0 1
 319: PUSH
 320: LD_INT 22
 322: PUSH
 323: LD_INT 1
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: PUSH
 330: LD_INT 21
 332: PUSH
 333: LD_INT 1
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PPUSH
 344: CALL_OW 69
 348: PUSH
 349: FOR_IN
 350: IFFALSE 366
// SetLives ( i , 1000 ) ;
 352: LD_VAR 0 1
 356: PPUSH
 357: LD_INT 1000
 359: PPUSH
 360: CALL_OW 234
 364: GO 349
 366: POP
 367: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 368: LD_ADDR_VAR 0 1
 372: PUSH
 373: LD_INT 22
 375: PUSH
 376: LD_INT 1
 378: PUSH
 379: EMPTY
 380: LIST
 381: LIST
 382: PUSH
 383: LD_INT 2
 385: PUSH
 386: LD_INT 30
 388: PUSH
 389: LD_INT 0
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PUSH
 396: LD_INT 30
 398: PUSH
 399: LD_INT 1
 401: PUSH
 402: EMPTY
 403: LIST
 404: LIST
 405: PUSH
 406: EMPTY
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PPUSH
 415: CALL_OW 69
 419: PUSH
 420: FOR_IN
 421: IFFALSE 445
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 423: LD_VAR 0 1
 427: PPUSH
 428: CALL_OW 274
 432: PPUSH
 433: LD_INT 1
 435: PPUSH
 436: LD_INT 9999
 438: PPUSH
 439: CALL_OW 277
 443: GO 420
 445: POP
 446: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 447: LD_ADDR_VAR 0 1
 451: PUSH
 452: LD_INT 22
 454: PUSH
 455: LD_INT 1
 457: PUSH
 458: EMPTY
 459: LIST
 460: LIST
 461: PUSH
 462: LD_INT 2
 464: PUSH
 465: LD_INT 30
 467: PUSH
 468: LD_INT 0
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: PUSH
 475: LD_INT 30
 477: PUSH
 478: LD_INT 1
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PUSH
 485: EMPTY
 486: LIST
 487: LIST
 488: LIST
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PPUSH
 494: CALL_OW 69
 498: PUSH
 499: FOR_IN
 500: IFFALSE 524
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 502: LD_VAR 0 1
 506: PPUSH
 507: CALL_OW 274
 511: PPUSH
 512: LD_INT 2
 514: PPUSH
 515: LD_INT 9999
 517: PPUSH
 518: CALL_OW 277
 522: GO 499
 524: POP
 525: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 526: LD_ADDR_VAR 0 1
 530: PUSH
 531: LD_INT 22
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: LD_INT 2
 543: PUSH
 544: LD_INT 30
 546: PUSH
 547: LD_INT 0
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: PUSH
 554: LD_INT 30
 556: PUSH
 557: LD_INT 1
 559: PUSH
 560: EMPTY
 561: LIST
 562: LIST
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: PUSH
 578: FOR_IN
 579: IFFALSE 603
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 581: LD_VAR 0 1
 585: PPUSH
 586: CALL_OW 274
 590: PPUSH
 591: LD_INT 3
 593: PPUSH
 594: LD_INT 9999
 596: PPUSH
 597: CALL_OW 277
 601: GO 578
 603: POP
 604: POP
// end ;
 605: PPOPN 1
 607: END
// every 0 0$1 trigger FilterUnitsInArea ( westPathArea , [ f_side , 1 ] ) do
 608: LD_INT 24
 610: PPUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PPUSH
 621: CALL_OW 70
 625: IFFALSE 638
 627: GO 629
 629: DISABLE
// westPathUsed := true ;
 630: LD_ADDR_EXP 42
 634: PUSH
 635: LD_INT 1
 637: ST_TO_ADDR
 638: END
// every 0 0$1 trigger laserCounterDestroy >= 3 do
 639: LD_EXP 43
 643: PUSH
 644: LD_INT 3
 646: GREATEREQUAL
 647: IFFALSE 659
 649: GO 651
 651: DISABLE
// SetAchievement ( ACH_LASER ) ; end_of_file
 652: LD_STRING ACH_LASER
 654: PPUSH
 655: CALL_OW 543
 659: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 660: LD_INT 0
 662: PPUSH
 663: PPUSH
 664: PPUSH
// uc_side := 1 ;
 665: LD_ADDR_OWVAR 20
 669: PUSH
 670: LD_INT 1
 672: ST_TO_ADDR
// others11 := CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 673: LD_ADDR_EXP 14
 677: PUSH
 678: LD_STRING 11c_others
 680: PPUSH
 681: CALL_OW 31
 685: PUSH
 686: LD_STRING 11_others
 688: PPUSH
 689: CALL_OW 31
 693: UNION
 694: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , true , 11_ ) ;
 695: LD_ADDR_EXP 1
 699: PUSH
 700: LD_STRING JMM
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: LD_STRING 11_
 708: PPUSH
 709: CALL 40737 0 3
 713: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 714: LD_EXP 1
 718: PPUSH
 719: LD_INT 1
 721: PPUSH
 722: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 726: LD_EXP 1
 730: PPUSH
 731: LD_INT 22
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PUSH
 741: LD_INT 21
 743: PUSH
 744: LD_INT 2
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: LD_INT 58
 753: PUSH
 754: EMPTY
 755: LIST
 756: PUSH
 757: EMPTY
 758: LIST
 759: LIST
 760: LIST
 761: PPUSH
 762: CALL_OW 69
 766: PUSH
 767: LD_INT 1
 769: ARRAY
 770: PPUSH
 771: CALL_OW 52
// if TestCharacters ( 11_Lisa ) then
 775: LD_STRING 11_Lisa
 777: PPUSH
 778: CALL_OW 28
 782: IFFALSE 832
// begin Lisa := PrepareUnit ( Lisa , true , 11_ ) ;
 784: LD_ADDR_EXP 2
 788: PUSH
 789: LD_STRING Lisa
 791: PPUSH
 792: LD_INT 1
 794: PPUSH
 795: LD_STRING 11_
 797: PPUSH
 798: CALL 40737 0 3
 802: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 803: LD_EXP 2
 807: PPUSH
 808: LD_INT 1
 810: PPUSH
 811: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 815: LD_EXP 2
 819: PPUSH
 820: LD_INT 4
 822: PPUSH
 823: LD_INT 0
 825: PPUSH
 826: CALL_OW 49
// end else
 830: GO 848
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 832: LD_INT 4
 834: PPUSH
 835: LD_INT 0
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: LD_INT 0
 843: PPUSH
 844: CALL 1370 0 4
// if TestCharacters ( 11_Donaldson ) then
 848: LD_STRING 11_Donaldson
 850: PPUSH
 851: CALL_OW 28
 855: IFFALSE 905
// begin Donaldson := PrepareUnit ( Donaldson , true , 11_ ) ;
 857: LD_ADDR_EXP 3
 861: PUSH
 862: LD_STRING Donaldson
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_STRING 11_
 870: PPUSH
 871: CALL 40737 0 3
 875: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 876: LD_EXP 3
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 888: LD_EXP 3
 892: PPUSH
 893: LD_INT 4
 895: PPUSH
 896: LD_INT 0
 898: PPUSH
 899: CALL_OW 49
// end else
 903: GO 921
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 905: LD_INT 4
 907: PPUSH
 908: LD_INT 0
 910: PPUSH
 911: LD_INT 1
 913: PPUSH
 914: LD_INT 0
 916: PPUSH
 917: CALL 1370 0 4
// if TestCharacters ( 11_Cyrus ) then
 921: LD_STRING 11_Cyrus
 923: PPUSH
 924: CALL_OW 28
 928: IFFALSE 978
// begin Cyrus := PrepareUnit ( Cyrus , true , 11_ ) ;
 930: LD_ADDR_EXP 5
 934: PUSH
 935: LD_STRING Cyrus
 937: PPUSH
 938: LD_INT 1
 940: PPUSH
 941: LD_STRING 11_
 943: PPUSH
 944: CALL 40737 0 3
 948: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 949: LD_EXP 5
 953: PPUSH
 954: LD_INT 1
 956: PPUSH
 957: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 961: LD_EXP 5
 965: PPUSH
 966: LD_INT 4
 968: PPUSH
 969: LD_INT 0
 971: PPUSH
 972: CALL_OW 49
// end else
 976: GO 994
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 978: LD_INT 4
 980: PPUSH
 981: LD_INT 0
 983: PPUSH
 984: LD_INT 1
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: CALL 1370 0 4
// if TestCharacters ( 11_Denis ) then
 994: LD_STRING 11_Denis
 996: PPUSH
 997: CALL_OW 28
1001: IFFALSE 1051
// begin Denis := PrepareUnit ( Denis , true , 11_ ) ;
1003: LD_ADDR_EXP 6
1007: PUSH
1008: LD_STRING Denis
1010: PPUSH
1011: LD_INT 1
1013: PPUSH
1014: LD_STRING 11_
1016: PPUSH
1017: CALL 40737 0 3
1021: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
1022: LD_EXP 6
1026: PPUSH
1027: LD_INT 4
1029: PPUSH
1030: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
1034: LD_EXP 6
1038: PPUSH
1039: LD_INT 4
1041: PPUSH
1042: LD_INT 0
1044: PPUSH
1045: CALL_OW 49
// end else
1049: GO 1067
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1051: LD_INT 4
1053: PPUSH
1054: LD_INT 0
1056: PPUSH
1057: LD_INT 1
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL 1370 0 4
// if TestCharacters ( 11_Frank ) then
1067: LD_STRING 11_Frank
1069: PPUSH
1070: CALL_OW 28
1074: IFFALSE 1124
// begin Frank := PrepareUnit ( Frank , true , 11_ ) ;
1076: LD_ADDR_EXP 12
1080: PUSH
1081: LD_STRING Frank
1083: PPUSH
1084: LD_INT 1
1086: PPUSH
1087: LD_STRING 11_
1089: PPUSH
1090: CALL 40737 0 3
1094: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
1095: LD_EXP 12
1099: PPUSH
1100: LD_INT 1
1102: PPUSH
1103: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1107: LD_EXP 12
1111: PPUSH
1112: LD_INT 4
1114: PPUSH
1115: LD_INT 0
1117: PPUSH
1118: CALL_OW 49
// end else
1122: GO 1140
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1124: LD_INT 4
1126: PPUSH
1127: LD_INT 0
1129: PPUSH
1130: LD_INT 1
1132: PPUSH
1133: LD_INT 0
1135: PPUSH
1136: CALL 1370 0 4
// if TestCharacters ( 11_Cornell ) then
1140: LD_STRING 11_Cornell
1142: PPUSH
1143: CALL_OW 28
1147: IFFALSE 1197
// begin Cornel := PrepareUnit ( Cornell , true , 11_ ) ;
1149: LD_ADDR_EXP 10
1153: PUSH
1154: LD_STRING Cornell
1156: PPUSH
1157: LD_INT 1
1159: PPUSH
1160: LD_STRING 11_
1162: PPUSH
1163: CALL 40737 0 3
1167: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1168: LD_EXP 10
1172: PPUSH
1173: LD_INT 1
1175: PPUSH
1176: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1180: LD_EXP 10
1184: PPUSH
1185: LD_INT 4
1187: PPUSH
1188: LD_INT 0
1190: PPUSH
1191: CALL_OW 49
// end else
1195: GO 1213
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1197: LD_INT 4
1199: PPUSH
1200: LD_INT 0
1202: PPUSH
1203: LD_INT 1
1205: PPUSH
1206: LD_INT 0
1208: PPUSH
1209: CALL 1370 0 4
// tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1213: LD_ADDR_VAR 0 2
1217: PUSH
1218: LD_EXP 14
1222: PPUSH
1223: LD_INT 26
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: EMPTY
1230: LIST
1231: LIST
1232: PPUSH
1233: CALL_OW 72
1237: ST_TO_ADDR
// if not tmp then
1238: LD_VAR 0 2
1242: NOT
1243: IFFALSE 1272
// begin PrepareSoldier ( sex_male , 8 ) ;
1245: LD_INT 1
1247: PPUSH
1248: LD_INT 8
1250: PPUSH
1251: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1255: CALL_OW 44
1259: PPUSH
1260: LD_INT 4
1262: PPUSH
1263: LD_INT 0
1265: PPUSH
1266: CALL_OW 49
// end else
1270: GO 1346
// begin if GetClass ( tmp [ 1 ] ) <> class_soldier then
1272: LD_VAR 0 2
1276: PUSH
1277: LD_INT 1
1279: ARRAY
1280: PPUSH
1281: CALL_OW 257
1285: PUSH
1286: LD_INT 1
1288: NONEQUAL
1289: IFFALSE 1307
// SetClass ( tmp [ 1 ] , class_soldier ) ;
1291: LD_VAR 0 2
1295: PUSH
1296: LD_INT 1
1298: ARRAY
1299: PPUSH
1300: LD_INT 1
1302: PPUSH
1303: CALL_OW 336
// PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1307: LD_VAR 0 2
1311: PUSH
1312: LD_INT 1
1314: ARRAY
1315: PPUSH
1316: LD_INT 4
1318: PPUSH
1319: LD_INT 0
1321: PPUSH
1322: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1326: LD_ADDR_EXP 14
1330: PUSH
1331: LD_EXP 14
1335: PUSH
1336: LD_VAR 0 2
1340: PUSH
1341: LD_INT 1
1343: ARRAY
1344: DIFF
1345: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ,  ) ;
1346: LD_ADDR_EXP 15
1350: PUSH
1351: LD_STRING Powell
1353: PPUSH
1354: LD_INT 0
1356: PPUSH
1357: LD_STRING 
1359: PPUSH
1360: CALL 40737 0 3
1364: ST_TO_ADDR
// end ;
1365: LD_VAR 0 1
1369: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1370: LD_INT 0
1372: PPUSH
1373: PPUSH
1374: PPUSH
1375: PPUSH
1376: PPUSH
// if mech = 1 then
1377: LD_VAR 0 4
1381: PUSH
1382: LD_INT 1
1384: EQUAL
1385: IFFALSE 1630
// begin if others11 then
1387: LD_EXP 14
1391: IFFALSE 1570
// begin for i := 1 to others11 - 1 do
1393: LD_ADDR_VAR 0 6
1397: PUSH
1398: DOUBLE
1399: LD_INT 1
1401: DEC
1402: ST_TO_ADDR
1403: LD_EXP 14
1407: PUSH
1408: LD_INT 1
1410: MINUS
1411: PUSH
1412: FOR_TO
1413: IFFALSE 1495
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1415: LD_EXP 14
1419: PUSH
1420: LD_VAR 0 6
1424: ARRAY
1425: PPUSH
1426: LD_INT 3
1428: PPUSH
1429: CALL_OW 259
1433: PUSH
1434: LD_EXP 14
1438: PUSH
1439: LD_VAR 0 6
1443: PUSH
1444: LD_INT 1
1446: PLUS
1447: ARRAY
1448: PPUSH
1449: LD_INT 3
1451: PPUSH
1452: CALL_OW 259
1456: LESS
1457: IFFALSE 1493
// begin mecha = others11 [ i + 1 ] ;
1459: LD_ADDR_VAR 0 9
1463: PUSH
1464: LD_EXP 14
1468: PUSH
1469: LD_VAR 0 6
1473: PUSH
1474: LD_INT 1
1476: PLUS
1477: ARRAY
1478: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1479: LD_VAR 0 9
1483: PPUSH
1484: LD_INT 3
1486: PPUSH
1487: CALL_OW 336
// break ;
1491: GO 1495
// end ; end ;
1493: GO 1412
1495: POP
1496: POP
// if spawnMode = 1 then
1497: LD_VAR 0 3
1501: PUSH
1502: LD_INT 1
1504: EQUAL
1505: IFFALSE 1538
// begin SetClass ( mecha , class_soldier ) ;
1507: LD_VAR 0 9
1511: PPUSH
1512: LD_INT 1
1514: PPUSH
1515: CALL_OW 336
// PlaceUnitArea ( mecha , area , false ) ;
1519: LD_VAR 0 9
1523: PPUSH
1524: LD_VAR 0 1
1528: PPUSH
1529: LD_INT 0
1531: PPUSH
1532: CALL_OW 49
// end else
1536: GO 1552
// PlaceHumanInUnit ( mecha , veh ) ;
1538: LD_VAR 0 9
1542: PPUSH
1543: LD_VAR 0 2
1547: PPUSH
1548: CALL_OW 52
// others11 := others11 diff mecha ;
1552: LD_ADDR_EXP 14
1556: PUSH
1557: LD_EXP 14
1561: PUSH
1562: LD_VAR 0 9
1566: DIFF
1567: ST_TO_ADDR
// end else
1568: GO 1628
// begin hc_name :=  ;
1570: LD_ADDR_OWVAR 26
1574: PUSH
1575: LD_STRING 
1577: ST_TO_ADDR
// hc_gallery :=  ;
1578: LD_ADDR_OWVAR 33
1582: PUSH
1583: LD_STRING 
1585: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1586: LD_INT 0
1588: PPUSH
1589: LD_INT 7
1591: PPUSH
1592: LD_INT 9
1594: PPUSH
1595: CALL_OW 12
1599: PPUSH
1600: CALL_OW 383
// un := CreateHuman ;
1604: LD_ADDR_VAR 0 7
1608: PUSH
1609: CALL_OW 44
1613: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1614: LD_VAR 0 7
1618: PPUSH
1619: LD_VAR 0 2
1623: PPUSH
1624: CALL_OW 52
// end ; end else
1628: GO 1795
// begin if others11 then
1630: LD_EXP 14
1634: IFFALSE 1707
// begin if spawnMode = 1 then
1636: LD_VAR 0 3
1640: PUSH
1641: LD_INT 1
1643: EQUAL
1644: IFFALSE 1669
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1646: LD_EXP 14
1650: PUSH
1651: LD_INT 1
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 1
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 49
1667: GO 1687
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1669: LD_EXP 14
1673: PUSH
1674: LD_INT 1
1676: ARRAY
1677: PPUSH
1678: LD_VAR 0 2
1682: PPUSH
1683: CALL_OW 52
// others11 := Delete ( others11 , 1 ) ;
1687: LD_ADDR_EXP 14
1691: PUSH
1692: LD_EXP 14
1696: PPUSH
1697: LD_INT 1
1699: PPUSH
1700: CALL_OW 3
1704: ST_TO_ADDR
// end else
1705: GO 1795
// begin hc_name :=  ;
1707: LD_ADDR_OWVAR 26
1711: PUSH
1712: LD_STRING 
1714: ST_TO_ADDR
// hc_gallery :=  ;
1715: LD_ADDR_OWVAR 33
1719: PUSH
1720: LD_STRING 
1722: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1723: LD_INT 0
1725: PPUSH
1726: LD_INT 1
1728: PUSH
1729: LD_INT 2
1731: PUSH
1732: LD_INT 3
1734: PUSH
1735: LD_INT 4
1737: PUSH
1738: EMPTY
1739: LIST
1740: LIST
1741: LIST
1742: LIST
1743: PUSH
1744: LD_INT 1
1746: PPUSH
1747: LD_INT 4
1749: PPUSH
1750: CALL_OW 12
1754: ARRAY
1755: PPUSH
1756: LD_INT 7
1758: PPUSH
1759: LD_INT 9
1761: PPUSH
1762: CALL_OW 12
1766: PPUSH
1767: CALL_OW 380
// un := CreateHuman ;
1771: LD_ADDR_VAR 0 7
1775: PUSH
1776: CALL_OW 44
1780: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1781: LD_VAR 0 7
1785: PPUSH
1786: LD_VAR 0 2
1790: PPUSH
1791: CALL_OW 52
// end ; end ; end ;
1795: LD_VAR 0 5
1799: RET
// export function PrepareVehicles ; var veh ; begin
1800: LD_INT 0
1802: PPUSH
1803: PPUSH
// uc_side := 1 ;
1804: LD_ADDR_OWVAR 20
1808: PUSH
1809: LD_INT 1
1811: ST_TO_ADDR
// uc_nation := 1 ;
1812: LD_ADDR_OWVAR 21
1816: PUSH
1817: LD_INT 1
1819: ST_TO_ADDR
// vc_chassis := us_medium_tracked ;
1820: LD_ADDR_OWVAR 37
1824: PUSH
1825: LD_INT 3
1827: ST_TO_ADDR
// vc_engine := engine_siberite ;
1828: LD_ADDR_OWVAR 39
1832: PUSH
1833: LD_INT 3
1835: ST_TO_ADDR
// vc_control := control_computer ;
1836: LD_ADDR_OWVAR 38
1840: PUSH
1841: LD_INT 3
1843: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1844: LD_ADDR_OWVAR 40
1848: PUSH
1849: LD_INT 4
1851: ST_TO_ADDR
// veh := CreateVehicle ;
1852: LD_ADDR_VAR 0 2
1856: PUSH
1857: CALL_OW 45
1861: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1862: LD_VAR 0 2
1866: PPUSH
1867: LD_INT 4
1869: PPUSH
1870: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1874: LD_VAR 0 2
1878: PPUSH
1879: LD_INT 4
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 49
// vc_weapon := us_double_gun ;
1889: LD_ADDR_OWVAR 40
1893: PUSH
1894: LD_INT 5
1896: ST_TO_ADDR
// vc_control := control_manual ;
1897: LD_ADDR_OWVAR 38
1901: PUSH
1902: LD_INT 1
1904: ST_TO_ADDR
// veh := CreateVehicle ;
1905: LD_ADDR_VAR 0 2
1909: PUSH
1910: CALL_OW 45
1914: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1915: LD_VAR 0 2
1919: PPUSH
1920: LD_INT 4
1922: PPUSH
1923: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1927: LD_VAR 0 2
1931: PPUSH
1932: LD_INT 4
1934: PPUSH
1935: LD_INT 0
1937: PPUSH
1938: CALL_OW 49
// vc_weapon := us_radar ;
1942: LD_ADDR_OWVAR 40
1946: PUSH
1947: LD_INT 11
1949: ST_TO_ADDR
// vc_control := control_computer ;
1950: LD_ADDR_OWVAR 38
1954: PUSH
1955: LD_INT 3
1957: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
1958: LD_ADDR_OWVAR 37
1962: PUSH
1963: LD_INT 2
1965: ST_TO_ADDR
// veh := CreateVehicle ;
1966: LD_ADDR_VAR 0 2
1970: PUSH
1971: CALL_OW 45
1975: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
1976: LD_VAR 0 2
1980: PPUSH
1981: LD_INT 4
1983: PPUSH
1984: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1988: LD_VAR 0 2
1992: PPUSH
1993: LD_INT 4
1995: PPUSH
1996: LD_INT 0
1998: PPUSH
1999: CALL_OW 49
// vc_weapon := us_double_gun ;
2003: LD_ADDR_OWVAR 40
2007: PUSH
2008: LD_INT 5
2010: ST_TO_ADDR
// veh := CreateVehicle ;
2011: LD_ADDR_VAR 0 2
2015: PUSH
2016: CALL_OW 45
2020: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2021: LD_VAR 0 2
2025: PPUSH
2026: LD_INT 4
2028: PPUSH
2029: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2033: LD_VAR 0 2
2037: PPUSH
2038: LD_INT 4
2040: PPUSH
2041: LD_INT 0
2043: PPUSH
2044: CALL_OW 49
// end ;
2048: LD_VAR 0 1
2052: RET
// export function PowellSupport1 ; var veh , un ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
// uc_side := 1 ;
2058: LD_ADDR_OWVAR 20
2062: PUSH
2063: LD_INT 1
2065: ST_TO_ADDR
// uc_nation := 1 ;
2066: LD_ADDR_OWVAR 21
2070: PUSH
2071: LD_INT 1
2073: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) then
2074: LD_STRING 11_Brown
2076: PPUSH
2077: CALL_OW 28
2081: IFFALSE 2131
// begin Brown := PrepareUnit ( Brown , true , 11_ ) ;
2083: LD_ADDR_EXP 7
2087: PUSH
2088: LD_STRING Brown
2090: PPUSH
2091: LD_INT 1
2093: PPUSH
2094: LD_STRING 11_
2096: PPUSH
2097: CALL 40737 0 3
2101: ST_TO_ADDR
// SetClass ( Brown , class_engineer ) ;
2102: LD_EXP 7
2106: PPUSH
2107: LD_INT 2
2109: PPUSH
2110: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
2114: LD_EXP 7
2118: PPUSH
2119: LD_INT 4
2121: PPUSH
2122: LD_INT 0
2124: PPUSH
2125: CALL_OW 49
// end else
2129: GO 2147
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2131: LD_INT 4
2133: PPUSH
2134: LD_INT 0
2136: PPUSH
2137: LD_INT 1
2139: PPUSH
2140: LD_INT 0
2142: PPUSH
2143: CALL 1370 0 4
// if TestCharacters ( 11_Gary ) then
2147: LD_STRING 11_Gary
2149: PPUSH
2150: CALL_OW 28
2154: IFFALSE 2204
// begin Gary := PrepareUnit ( Gary , true , 11_ ) ;
2156: LD_ADDR_EXP 11
2160: PUSH
2161: LD_STRING Gary
2163: PPUSH
2164: LD_INT 1
2166: PPUSH
2167: LD_STRING 11_
2169: PPUSH
2170: CALL 40737 0 3
2174: ST_TO_ADDR
// SetClass ( Gary , class_engineer ) ;
2175: LD_EXP 11
2179: PPUSH
2180: LD_INT 2
2182: PPUSH
2183: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
2187: LD_EXP 11
2191: PPUSH
2192: LD_INT 4
2194: PPUSH
2195: LD_INT 0
2197: PPUSH
2198: CALL_OW 49
// end else
2202: GO 2220
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2204: LD_INT 4
2206: PPUSH
2207: LD_INT 0
2209: PPUSH
2210: LD_INT 1
2212: PPUSH
2213: LD_INT 0
2215: PPUSH
2216: CALL 1370 0 4
// vc_chassis := us_medium_tracked ;
2220: LD_ADDR_OWVAR 37
2224: PUSH
2225: LD_INT 3
2227: ST_TO_ADDR
// vc_engine := engine_siberite ;
2228: LD_ADDR_OWVAR 39
2232: PUSH
2233: LD_INT 3
2235: ST_TO_ADDR
// vc_control := control_manual ;
2236: LD_ADDR_OWVAR 38
2240: PUSH
2241: LD_INT 1
2243: ST_TO_ADDR
// vc_weapon := us_crane ;
2244: LD_ADDR_OWVAR 40
2248: PUSH
2249: LD_INT 13
2251: ST_TO_ADDR
// veh := CreateVehicle ;
2252: LD_ADDR_VAR 0 2
2256: PUSH
2257: CALL_OW 45
2261: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 4
2269: PPUSH
2270: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2274: LD_VAR 0 2
2278: PPUSH
2279: LD_INT 4
2281: PPUSH
2282: LD_INT 0
2284: PPUSH
2285: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2289: LD_INT 4
2291: PPUSH
2292: LD_VAR 0 2
2296: PPUSH
2297: LD_INT 2
2299: PPUSH
2300: LD_INT 1
2302: PPUSH
2303: CALL 1370 0 4
// vc_weapon := us_laser ;
2307: LD_ADDR_OWVAR 40
2311: PUSH
2312: LD_INT 9
2314: ST_TO_ADDR
// veh := CreateVehicle ;
2315: LD_ADDR_VAR 0 2
2319: PUSH
2320: CALL_OW 45
2324: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2325: LD_VAR 0 2
2329: PPUSH
2330: LD_INT 4
2332: PPUSH
2333: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2337: LD_VAR 0 2
2341: PPUSH
2342: LD_INT 4
2344: PPUSH
2345: LD_INT 0
2347: PPUSH
2348: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2352: LD_INT 4
2354: PPUSH
2355: LD_VAR 0 2
2359: PPUSH
2360: LD_INT 2
2362: PPUSH
2363: LD_INT 1
2365: PPUSH
2366: CALL 1370 0 4
// vc_control := control_computer ;
2370: LD_ADDR_OWVAR 38
2374: PUSH
2375: LD_INT 3
2377: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2378: LD_ADDR_OWVAR 40
2382: PUSH
2383: LD_INT 12
2385: ST_TO_ADDR
// veh := CreateVehicle ;
2386: LD_ADDR_VAR 0 2
2390: PUSH
2391: CALL_OW 45
2395: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2396: LD_VAR 0 2
2400: PPUSH
2401: LD_INT 17
2403: PPUSH
2404: CALL_OW 109
// SetDir ( veh , 4 ) ;
2408: LD_VAR 0 2
2412: PPUSH
2413: LD_INT 4
2415: PPUSH
2416: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2420: LD_VAR 0 2
2424: PPUSH
2425: LD_INT 4
2427: PPUSH
2428: LD_INT 0
2430: PPUSH
2431: CALL_OW 49
// AddCargo ( veh , mat_siberit , 100 ) ;
2435: LD_VAR 0 2
2439: PPUSH
2440: LD_INT 3
2442: PPUSH
2443: LD_INT 100
2445: PPUSH
2446: CALL_OW 291
// veh := CreateVehicle ;
2450: LD_ADDR_VAR 0 2
2454: PUSH
2455: CALL_OW 45
2459: ST_TO_ADDR
// SetTag ( veh , 17 ) ;
2460: LD_VAR 0 2
2464: PPUSH
2465: LD_INT 17
2467: PPUSH
2468: CALL_OW 109
// SetDir ( veh , 4 ) ;
2472: LD_VAR 0 2
2476: PPUSH
2477: LD_INT 4
2479: PPUSH
2480: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2484: LD_VAR 0 2
2488: PPUSH
2489: LD_INT 4
2491: PPUSH
2492: LD_INT 0
2494: PPUSH
2495: CALL_OW 49
// AddCargo ( veh , mat_siberit , 20 ) ;
2499: LD_VAR 0 2
2503: PPUSH
2504: LD_INT 3
2506: PPUSH
2507: LD_INT 20
2509: PPUSH
2510: CALL_OW 291
// AddCargo ( veh , mat_cans , 80 ) ;
2514: LD_VAR 0 2
2518: PPUSH
2519: LD_INT 1
2521: PPUSH
2522: LD_INT 80
2524: PPUSH
2525: CALL_OW 291
// end ;
2529: LD_VAR 0 1
2533: RET
// export function PowellSupport2 ; var veh , un ; begin
2534: LD_INT 0
2536: PPUSH
2537: PPUSH
2538: PPUSH
// uc_side := 1 ;
2539: LD_ADDR_OWVAR 20
2543: PUSH
2544: LD_INT 1
2546: ST_TO_ADDR
// uc_nation := 1 ;
2547: LD_ADDR_OWVAR 21
2551: PUSH
2552: LD_INT 1
2554: ST_TO_ADDR
// vc_engine := engine_siberite ;
2555: LD_ADDR_OWVAR 39
2559: PUSH
2560: LD_INT 3
2562: ST_TO_ADDR
// vc_control := control_computer ;
2563: LD_ADDR_OWVAR 38
2567: PUSH
2568: LD_INT 3
2570: ST_TO_ADDR
// vc_chassis := us_medium_wheeled ;
2571: LD_ADDR_OWVAR 37
2575: PUSH
2576: LD_INT 2
2578: ST_TO_ADDR
// vc_weapon := us_double_gun ;
2579: LD_ADDR_OWVAR 40
2583: PUSH
2584: LD_INT 5
2586: ST_TO_ADDR
// veh := CreateVehicle ;
2587: LD_ADDR_VAR 0 2
2591: PUSH
2592: CALL_OW 45
2596: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2597: LD_VAR 0 2
2601: PPUSH
2602: LD_INT 4
2604: PPUSH
2605: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2609: LD_VAR 0 2
2613: PPUSH
2614: LD_INT 4
2616: PPUSH
2617: LD_INT 0
2619: PPUSH
2620: CALL_OW 49
// vc_chassis := us_heavy_tracked ;
2624: LD_ADDR_OWVAR 37
2628: PUSH
2629: LD_INT 4
2631: ST_TO_ADDR
// vc_engine := engine_siberite ;
2632: LD_ADDR_OWVAR 39
2636: PUSH
2637: LD_INT 3
2639: ST_TO_ADDR
// vc_control := control_manual ;
2640: LD_ADDR_OWVAR 38
2644: PUSH
2645: LD_INT 1
2647: ST_TO_ADDR
// vc_weapon := us_heavy_gun ;
2648: LD_ADDR_OWVAR 40
2652: PUSH
2653: LD_INT 6
2655: ST_TO_ADDR
// veh := CreateVehicle ;
2656: LD_ADDR_VAR 0 2
2660: PUSH
2661: CALL_OW 45
2665: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2666: LD_VAR 0 2
2670: PPUSH
2671: LD_INT 4
2673: PPUSH
2674: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2678: LD_VAR 0 2
2682: PPUSH
2683: LD_INT 4
2685: PPUSH
2686: LD_INT 0
2688: PPUSH
2689: CALL_OW 49
// if TestCharacters ( 11_Bobby ) then
2693: LD_STRING 11_Bobby
2695: PPUSH
2696: CALL_OW 28
2700: IFFALSE 2749
// begin Bobby := PrepareUnit ( Bobby , true , 11_ ) ;
2702: LD_ADDR_EXP 4
2706: PUSH
2707: LD_STRING Bobby
2709: PPUSH
2710: LD_INT 1
2712: PPUSH
2713: LD_STRING 11_
2715: PPUSH
2716: CALL 40737 0 3
2720: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2721: LD_EXP 4
2725: PPUSH
2726: LD_INT 3
2728: PPUSH
2729: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2733: LD_EXP 4
2737: PPUSH
2738: LD_VAR 0 2
2742: PPUSH
2743: CALL_OW 52
// end else
2747: GO 2767
// PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2749: LD_INT 0
2751: PPUSH
2752: LD_VAR 0 2
2756: PPUSH
2757: LD_INT 2
2759: PPUSH
2760: LD_INT 0
2762: PPUSH
2763: CALL 1370 0 4
// if TestCharacters ( 11_Houten ) then
2767: LD_STRING 11_Houten
2769: PPUSH
2770: CALL_OW 28
2774: IFFALSE 2824
// begin Houten := PrepareUnit ( Houten , true , 11_ ) ;
2776: LD_ADDR_EXP 9
2780: PUSH
2781: LD_STRING Houten
2783: PPUSH
2784: LD_INT 1
2786: PPUSH
2787: LD_STRING 11_
2789: PPUSH
2790: CALL 40737 0 3
2794: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2795: LD_EXP 9
2799: PPUSH
2800: LD_INT 1
2802: PPUSH
2803: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2807: LD_EXP 9
2811: PPUSH
2812: LD_INT 4
2814: PPUSH
2815: LD_INT 0
2817: PPUSH
2818: CALL_OW 49
// end else
2822: GO 2840
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2824: LD_INT 4
2826: PPUSH
2827: LD_INT 0
2829: PPUSH
2830: LD_INT 1
2832: PPUSH
2833: LD_INT 0
2835: PPUSH
2836: CALL 1370 0 4
// vc_chassis := us_medium_wheeled ;
2840: LD_ADDR_OWVAR 37
2844: PUSH
2845: LD_INT 2
2847: ST_TO_ADDR
// vc_control := control_computer ;
2848: LD_ADDR_OWVAR 38
2852: PUSH
2853: LD_INT 3
2855: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
2856: LD_ADDR_OWVAR 40
2860: PUSH
2861: LD_INT 12
2863: ST_TO_ADDR
// veh := CreateVehicle ;
2864: LD_ADDR_VAR 0 2
2868: PUSH
2869: CALL_OW 45
2873: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2874: LD_VAR 0 2
2878: PPUSH
2879: LD_INT 4
2881: PPUSH
2882: CALL_OW 233
// SetTag ( veh , 17 ) ;
2886: LD_VAR 0 2
2890: PPUSH
2891: LD_INT 17
2893: PPUSH
2894: CALL_OW 109
// AddCargo ( veh , mat_cans , 100 ) ;
2898: LD_VAR 0 2
2902: PPUSH
2903: LD_INT 1
2905: PPUSH
2906: LD_INT 100
2908: PPUSH
2909: CALL_OW 291
// veh := CreateVehicle ;
2913: LD_ADDR_VAR 0 2
2917: PUSH
2918: CALL_OW 45
2922: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2923: LD_VAR 0 2
2927: PPUSH
2928: LD_INT 4
2930: PPUSH
2931: CALL_OW 233
// SetTag ( veh , 17 ) ;
2935: LD_VAR 0 2
2939: PPUSH
2940: LD_INT 17
2942: PPUSH
2943: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2947: LD_VAR 0 2
2951: PPUSH
2952: LD_INT 4
2954: PPUSH
2955: LD_INT 0
2957: PPUSH
2958: CALL_OW 49
// AddCargo ( veh , mat_cans , 100 ) ;
2962: LD_VAR 0 2
2966: PPUSH
2967: LD_INT 1
2969: PPUSH
2970: LD_INT 100
2972: PPUSH
2973: CALL_OW 291
// veh := CreateVehicle ;
2977: LD_ADDR_VAR 0 2
2981: PUSH
2982: CALL_OW 45
2986: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2987: LD_VAR 0 2
2991: PPUSH
2992: LD_INT 4
2994: PPUSH
2995: CALL_OW 233
// SetTag ( veh , 17 ) ;
2999: LD_VAR 0 2
3003: PPUSH
3004: LD_INT 17
3006: PPUSH
3007: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3011: LD_VAR 0 2
3015: PPUSH
3016: LD_INT 4
3018: PPUSH
3019: LD_INT 0
3021: PPUSH
3022: CALL_OW 49
// if kurtStatus then
3026: LD_EXP 19
3030: IFFALSE 3064
// begin AddCargo ( veh , mat_siberit , 60 ) ;
3032: LD_VAR 0 2
3036: PPUSH
3037: LD_INT 3
3039: PPUSH
3040: LD_INT 60
3042: PPUSH
3043: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3047: LD_VAR 0 2
3051: PPUSH
3052: LD_INT 1
3054: PPUSH
3055: LD_INT 40
3057: PPUSH
3058: CALL_OW 291
// end else
3062: GO 3079
// AddCargo ( veh , mat_cans , 100 ) ;
3064: LD_VAR 0 2
3068: PPUSH
3069: LD_INT 1
3071: PPUSH
3072: LD_INT 100
3074: PPUSH
3075: CALL_OW 291
// veh := CreateVehicle ;
3079: LD_ADDR_VAR 0 2
3083: PUSH
3084: CALL_OW 45
3088: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_INT 4
3096: PPUSH
3097: CALL_OW 233
// SetTag ( veh , 17 ) ;
3101: LD_VAR 0 2
3105: PPUSH
3106: LD_INT 17
3108: PPUSH
3109: CALL_OW 109
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
3113: LD_VAR 0 2
3117: PPUSH
3118: LD_INT 4
3120: PPUSH
3121: LD_INT 0
3123: PPUSH
3124: CALL_OW 49
// AddCargo ( veh , mat_oil , 60 ) ;
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_INT 2
3135: PPUSH
3136: LD_INT 60
3138: PPUSH
3139: CALL_OW 291
// AddCargo ( veh , mat_cans , 40 ) ;
3143: LD_VAR 0 2
3147: PPUSH
3148: LD_INT 1
3150: PPUSH
3151: LD_INT 40
3153: PPUSH
3154: CALL_OW 291
// end ;
3158: LD_VAR 0 1
3162: RET
// export function PowellSupport3 ; var i , cargo ; begin
3163: LD_INT 0
3165: PPUSH
3166: PPUSH
3167: PPUSH
// uc_side := 1 ;
3168: LD_ADDR_OWVAR 20
3172: PUSH
3173: LD_INT 1
3175: ST_TO_ADDR
// uc_nation := 1 ;
3176: LD_ADDR_OWVAR 21
3180: PUSH
3181: LD_INT 1
3183: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3184: LD_INT 4
3186: PPUSH
3187: LD_INT 0
3189: PPUSH
3190: LD_INT 1
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: CALL 1370 0 4
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
3200: LD_INT 4
3202: PPUSH
3203: LD_INT 0
3205: PPUSH
3206: LD_INT 1
3208: PPUSH
3209: LD_INT 0
3211: PPUSH
3212: CALL 1370 0 4
// for i := 1 to 2 do
3216: LD_ADDR_VAR 0 2
3220: PUSH
3221: DOUBLE
3222: LD_INT 1
3224: DEC
3225: ST_TO_ADDR
3226: LD_INT 2
3228: PUSH
3229: FOR_TO
3230: IFFALSE 3330
// begin vc_chassis := us_medium_wheeled ;
3232: LD_ADDR_OWVAR 37
3236: PUSH
3237: LD_INT 2
3239: ST_TO_ADDR
// vc_engine := engine_siberite ;
3240: LD_ADDR_OWVAR 39
3244: PUSH
3245: LD_INT 3
3247: ST_TO_ADDR
// vc_control = control_computer ;
3248: LD_ADDR_OWVAR 38
3252: PUSH
3253: LD_INT 3
3255: ST_TO_ADDR
// vc_weapon := us_cargo_bay ;
3256: LD_ADDR_OWVAR 40
3260: PUSH
3261: LD_INT 12
3263: ST_TO_ADDR
// cargo := CreateVehicle ;
3264: LD_ADDR_VAR 0 3
3268: PUSH
3269: CALL_OW 45
3273: ST_TO_ADDR
// SetDir ( cargo , 4 ) ;
3274: LD_VAR 0 3
3278: PPUSH
3279: LD_INT 4
3281: PPUSH
3282: CALL_OW 233
// SetTag ( cargo , 17 ) ;
3286: LD_VAR 0 3
3290: PPUSH
3291: LD_INT 17
3293: PPUSH
3294: CALL_OW 109
// PlaceUnitArea ( cargo , PlayerSpawn , false ) ;
3298: LD_VAR 0 3
3302: PPUSH
3303: LD_INT 4
3305: PPUSH
3306: LD_INT 0
3308: PPUSH
3309: CALL_OW 49
// AddCargo ( cargo , mat_cans , 100 ) ;
3313: LD_VAR 0 3
3317: PPUSH
3318: LD_INT 1
3320: PPUSH
3321: LD_INT 100
3323: PPUSH
3324: CALL_OW 291
// end ;
3328: GO 3229
3330: POP
3331: POP
// end ; end_of_file
3332: LD_VAR 0 1
3336: RET
// export function PrepareRussianCommander ; begin
3337: LD_INT 0
3339: PPUSH
// uc_side := 3 ;
3340: LD_ADDR_OWVAR 20
3344: PUSH
3345: LD_INT 3
3347: ST_TO_ADDR
// Davidov := PrepareUnit ( Davidov , false ,  ) ;
3348: LD_ADDR_EXP 16
3352: PUSH
3353: LD_STRING Davidov
3355: PPUSH
3356: LD_INT 0
3358: PPUSH
3359: LD_STRING 
3361: PPUSH
3362: CALL 40737 0 3
3366: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3367: LD_EXP 16
3371: PPUSH
3372: LD_INT 3
3374: PPUSH
3375: CALL_OW 52
// RuScientists := Join ( RuScientists , Davidov ) ;
3379: LD_ADDR_EXP 27
3383: PUSH
3384: LD_EXP 27
3388: PPUSH
3389: LD_EXP 16
3393: PPUSH
3394: CALL 78532 0 2
3398: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3399: LD_EXP 27
3403: PPUSH
3404: LD_INT 4
3406: PPUSH
3407: CALL_OW 336
// end ;
3411: LD_VAR 0 1
3415: RET
// export function PrepareEastBase ; var i , un ; begin
3416: LD_INT 0
3418: PPUSH
3419: PPUSH
3420: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , [ 2 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3421: LD_INT 3
3423: PPUSH
3424: LD_INT 3
3426: PPUSH
3427: LD_INT 121
3429: PPUSH
3430: LD_EXP 29
3434: PPUSH
3435: LD_EXP 30
3439: PPUSH
3440: CALL_OW 12
3444: PPUSH
3445: LD_INT 1
3447: PPUSH
3448: LD_INT 2
3450: PUSH
3451: LD_INT 2
3453: PUSH
3454: LD_INT 3
3456: PUSH
3457: LD_INT 3
3459: PUSH
3460: EMPTY
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: PUSH
3466: LD_OWVAR 67
3470: ARRAY
3471: PPUSH
3472: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 1 , 2 , 3 , 3 ] [ Difficulty ] ) ;
3476: LD_INT 3
3478: PPUSH
3479: LD_INT 3
3481: PPUSH
3482: LD_INT 121
3484: PPUSH
3485: LD_EXP 29
3489: PPUSH
3490: LD_EXP 30
3494: PPUSH
3495: CALL_OW 12
3499: PPUSH
3500: LD_INT 9
3502: PPUSH
3503: LD_INT 1
3505: PUSH
3506: LD_INT 2
3508: PUSH
3509: LD_INT 3
3511: PUSH
3512: LD_INT 3
3514: PUSH
3515: EMPTY
3516: LIST
3517: LIST
3518: LIST
3519: LIST
3520: PUSH
3521: LD_OWVAR 67
3525: ARRAY
3526: PPUSH
3527: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rubar3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3531: LD_INT 3
3533: PPUSH
3534: LD_INT 3
3536: PPUSH
3537: LD_INT 226
3539: PPUSH
3540: LD_EXP 29
3544: PPUSH
3545: LD_EXP 30
3549: PPUSH
3550: CALL_OW 12
3554: PPUSH
3555: LD_INT 9
3557: PPUSH
3558: LD_INT 2
3560: PUSH
3561: LD_INT 3
3563: PUSH
3564: LD_INT 4
3566: PUSH
3567: LD_INT 5
3569: PUSH
3570: EMPTY
3571: LIST
3572: LIST
3573: LIST
3574: LIST
3575: PUSH
3576: LD_OWVAR 67
3580: ARRAY
3581: PPUSH
3582: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3586: LD_INT 3
3588: PPUSH
3589: LD_INT 3
3591: PPUSH
3592: LD_INT 4
3594: PPUSH
3595: LD_EXP 29
3599: PPUSH
3600: LD_EXP 30
3604: PPUSH
3605: CALL_OW 12
3609: PPUSH
3610: LD_INT 2
3612: PPUSH
3613: LD_INT 3
3615: PUSH
3616: LD_INT 4
3618: PUSH
3619: LD_INT 5
3621: PUSH
3622: LD_INT 6
3624: PUSH
3625: EMPTY
3626: LIST
3627: LIST
3628: LIST
3629: LIST
3630: PUSH
3631: LD_OWVAR 67
3635: ARRAY
3636: PPUSH
3637: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 4 , 5 , 6 ] [ Difficulty ] ) ;
3641: LD_INT 3
3643: PPUSH
3644: LD_INT 3
3646: PPUSH
3647: LD_INT 112
3649: PPUSH
3650: LD_EXP 29
3654: PPUSH
3655: LD_EXP 30
3659: PPUSH
3660: CALL_OW 12
3664: PPUSH
3665: LD_INT 3
3667: PPUSH
3668: LD_INT 4
3670: PUSH
3671: LD_INT 4
3673: PUSH
3674: LD_INT 5
3676: PUSH
3677: LD_INT 6
3679: PUSH
3680: EMPTY
3681: LIST
3682: LIST
3683: LIST
3684: LIST
3685: PUSH
3686: LD_OWVAR 67
3690: ARRAY
3691: PPUSH
3692: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3696: LD_INT 3
3698: PPUSH
3699: LD_INT 3
3701: PPUSH
3702: LD_INT 47
3704: PPUSH
3705: LD_EXP 29
3709: PPUSH
3710: LD_EXP 30
3714: PPUSH
3715: CALL_OW 12
3719: PPUSH
3720: LD_INT 4
3722: PPUSH
3723: LD_INT 2
3725: PUSH
3726: LD_INT 3
3728: PUSH
3729: LD_INT 4
3731: PUSH
3732: LD_INT 5
3734: PUSH
3735: EMPTY
3736: LIST
3737: LIST
3738: LIST
3739: LIST
3740: PUSH
3741: LD_OWVAR 67
3745: ARRAY
3746: PPUSH
3747: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3751: LD_INT 3
3753: PPUSH
3754: LD_INT 3
3756: PPUSH
3757: LD_INT 129
3759: PPUSH
3760: LD_EXP 29
3764: PPUSH
3765: LD_EXP 30
3769: PPUSH
3770: CALL_OW 12
3774: PPUSH
3775: LD_INT 4
3777: PPUSH
3778: LD_INT 2
3780: PUSH
3781: LD_INT 3
3783: PUSH
3784: LD_INT 4
3786: PUSH
3787: LD_INT 5
3789: PUSH
3790: EMPTY
3791: LIST
3792: LIST
3793: LIST
3794: LIST
3795: PUSH
3796: LD_OWVAR 67
3800: ARRAY
3801: PPUSH
3802: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , [ 2 , 3 , 4 , 5 ] [ Difficulty ] ) ;
3806: LD_INT 3
3808: PPUSH
3809: LD_INT 3
3811: PPUSH
3812: LD_INT 135
3814: PPUSH
3815: LD_EXP 29
3819: PPUSH
3820: LD_EXP 30
3824: PPUSH
3825: CALL_OW 12
3829: PPUSH
3830: LD_INT 4
3832: PPUSH
3833: LD_INT 2
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: LD_INT 4
3841: PUSH
3842: LD_INT 5
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: PUSH
3851: LD_OWVAR 67
3855: ARRAY
3856: PPUSH
3857: CALL 13147 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3861: LD_ADDR_VAR 0 2
3865: PUSH
3866: LD_INT 22
3868: PUSH
3869: LD_INT 3
3871: PUSH
3872: EMPTY
3873: LIST
3874: LIST
3875: PUSH
3876: LD_INT 30
3878: PUSH
3879: LD_INT 32
3881: PUSH
3882: EMPTY
3883: LIST
3884: LIST
3885: PUSH
3886: EMPTY
3887: LIST
3888: LIST
3889: PPUSH
3890: CALL_OW 69
3894: PUSH
3895: FOR_IN
3896: IFFALSE 3936
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3898: LD_INT 3
3900: PPUSH
3901: LD_INT 3
3903: PPUSH
3904: LD_VAR 0 2
3908: PPUSH
3909: LD_EXP 29
3913: PPUSH
3914: LD_EXP 30
3918: PPUSH
3919: CALL_OW 12
3923: PPUSH
3924: LD_INT 1
3926: PPUSH
3927: LD_INT 1
3929: PPUSH
3930: CALL 13147 0 6
3934: GO 3895
3936: POP
3937: POP
// for i := 1 to 5 do
3938: LD_ADDR_VAR 0 2
3942: PUSH
3943: DOUBLE
3944: LD_INT 1
3946: DEC
3947: ST_TO_ADDR
3948: LD_INT 5
3950: PUSH
3951: FOR_TO
3952: IFFALSE 4055
// begin uc_side := 3 ;
3954: LD_ADDR_OWVAR 20
3958: PUSH
3959: LD_INT 3
3961: ST_TO_ADDR
// uc_nation := 3 ;
3962: LD_ADDR_OWVAR 21
3966: PUSH
3967: LD_INT 3
3969: ST_TO_ADDR
// hc_gallery :=  ;
3970: LD_ADDR_OWVAR 33
3974: PUSH
3975: LD_STRING 
3977: ST_TO_ADDR
// hc_name :=  ;
3978: LD_ADDR_OWVAR 26
3982: PUSH
3983: LD_STRING 
3985: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3986: LD_INT 0
3988: PPUSH
3989: LD_INT 4
3991: PPUSH
3992: LD_EXP 29
3996: PPUSH
3997: LD_EXP 30
4001: PPUSH
4002: CALL_OW 12
4006: PPUSH
4007: CALL_OW 380
// un := CreateHuman ;
4011: LD_ADDR_VAR 0 3
4015: PUSH
4016: CALL_OW 44
4020: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
4021: LD_VAR 0 3
4025: PPUSH
4026: LD_INT 3
4028: PPUSH
4029: CALL_OW 52
// RuScientists := Join ( RuScientists , un ) ;
4033: LD_ADDR_EXP 27
4037: PUSH
4038: LD_EXP 27
4042: PPUSH
4043: LD_VAR 0 3
4047: PPUSH
4048: CALL 78532 0 2
4052: ST_TO_ADDR
// end ;
4053: GO 3951
4055: POP
4056: POP
// end ;
4057: LD_VAR 0 1
4061: RET
// export function PrepareWestBase ; var i , un ; begin
4062: LD_INT 0
4064: PPUSH
4065: PPUSH
4066: PPUSH
// if Difficulty = 1 then
4067: LD_OWVAR 67
4071: PUSH
4072: LD_INT 1
4074: EQUAL
4075: IFFALSE 4113
// for i in FilterAllUnits ( [ f_inarea , delBuildingsArea ] ) do
4077: LD_ADDR_VAR 0 2
4081: PUSH
4082: LD_INT 95
4084: PUSH
4085: LD_INT 28
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PPUSH
4092: CALL_OW 69
4096: PUSH
4097: FOR_IN
4098: IFFALSE 4111
// RemoveUnit ( i ) ;
4100: LD_VAR 0 2
4104: PPUSH
4105: CALL_OW 64
4109: GO 4097
4111: POP
4112: POP
// TeleportExit ( ruteleprt , 122 , 145 ) ;
4113: LD_INT 10
4115: PPUSH
4116: LD_INT 122
4118: PPUSH
4119: LD_INT 145
4121: PPUSH
4122: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
4126: LD_INT 137
4128: PPUSH
4129: LD_INT 84
4131: PPUSH
4132: LD_INT 61
4134: PPUSH
4135: CALL_OW 243
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ) ;
4139: LD_INT 3
4141: PPUSH
4142: LD_INT 3
4144: PPUSH
4145: LD_INT 6
4147: PPUSH
4148: LD_EXP 29
4152: PPUSH
4153: LD_EXP 30
4157: PPUSH
4158: CALL_OW 12
4162: PPUSH
4163: LD_INT 2
4165: PPUSH
4166: LD_INT 2
4168: PUSH
4169: LD_INT 3
4171: PUSH
4172: LD_INT 3
4174: PUSH
4175: LD_INT 3
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: LIST
4182: LIST
4183: PUSH
4184: LD_OWVAR 67
4188: ARRAY
4189: PPUSH
4190: CALL 13147 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
4194: LD_INT 3
4196: PPUSH
4197: LD_INT 3
4199: PPUSH
4200: LD_INT 91
4202: PPUSH
4203: LD_EXP 29
4207: PPUSH
4208: LD_EXP 30
4212: PPUSH
4213: CALL_OW 12
4217: PPUSH
4218: LD_INT 4
4220: PPUSH
4221: LD_INT 3
4223: PPUSH
4224: CALL 13147 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] ) ;
4228: LD_INT 3
4230: PPUSH
4231: LD_INT 3
4233: PPUSH
4234: LD_INT 21
4236: PPUSH
4237: LD_EXP 29
4241: PPUSH
4242: LD_EXP 30
4246: PPUSH
4247: CALL_OW 12
4251: PPUSH
4252: LD_INT 3
4254: PPUSH
4255: LD_INT 4
4257: PUSH
4258: LD_INT 5
4260: PUSH
4261: LD_INT 6
4263: PUSH
4264: LD_INT 6
4266: PUSH
4267: EMPTY
4268: LIST
4269: LIST
4270: LIST
4271: LIST
4272: PUSH
4273: LD_OWVAR 67
4277: ARRAY
4278: PPUSH
4279: CALL 13147 0 6
// end ;
4283: LD_VAR 0 1
4287: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
4288: LD_INT 0
4290: PPUSH
4291: PPUSH
4292: PPUSH
4293: PPUSH
// uc_side := 3 ;
4294: LD_ADDR_OWVAR 20
4298: PUSH
4299: LD_INT 3
4301: ST_TO_ADDR
// uc_nation := 3 ;
4302: LD_ADDR_OWVAR 21
4306: PUSH
4307: LD_INT 3
4309: ST_TO_ADDR
// for i := 1 to [ 4 , 5 , 5 , 5 ] [ Difficulty ] do
4310: LD_ADDR_VAR 0 2
4314: PUSH
4315: DOUBLE
4316: LD_INT 1
4318: DEC
4319: ST_TO_ADDR
4320: LD_INT 4
4322: PUSH
4323: LD_INT 5
4325: PUSH
4326: LD_INT 5
4328: PUSH
4329: LD_INT 5
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: PUSH
4338: LD_OWVAR 67
4342: ARRAY
4343: PUSH
4344: FOR_TO
4345: IFFALSE 4415
// begin hc_gallery :=  ;
4347: LD_ADDR_OWVAR 33
4351: PUSH
4352: LD_STRING 
4354: ST_TO_ADDR
// hc_name :=  ;
4355: LD_ADDR_OWVAR 26
4359: PUSH
4360: LD_STRING 
4362: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4363: LD_INT 0
4365: PPUSH
4366: LD_INT 9
4368: PPUSH
4369: LD_EXP 29
4373: PPUSH
4374: LD_EXP 30
4378: PPUSH
4379: CALL_OW 12
4383: PPUSH
4384: CALL_OW 380
// un := CreateHuman ;
4388: LD_ADDR_VAR 0 3
4392: PUSH
4393: CALL_OW 44
4397: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4398: LD_VAR 0 3
4402: PPUSH
4403: LD_INT 8
4405: PPUSH
4406: LD_INT 0
4408: PPUSH
4409: CALL_OW 49
// end ;
4413: GO 4344
4415: POP
4416: POP
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
4417: LD_ADDR_VAR 0 2
4421: PUSH
4422: DOUBLE
4423: LD_INT 1
4425: DEC
4426: ST_TO_ADDR
4427: LD_INT 2
4429: PUSH
4430: LD_INT 3
4432: PUSH
4433: LD_INT 4
4435: PUSH
4436: LD_INT 4
4438: PUSH
4439: EMPTY
4440: LIST
4441: LIST
4442: LIST
4443: LIST
4444: PUSH
4445: LD_OWVAR 67
4449: ARRAY
4450: PUSH
4451: FOR_TO
4452: IFFALSE 4522
// begin hc_gallery :=  ;
4454: LD_ADDR_OWVAR 33
4458: PUSH
4459: LD_STRING 
4461: ST_TO_ADDR
// hc_name :=  ;
4462: LD_ADDR_OWVAR 26
4466: PUSH
4467: LD_STRING 
4469: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
4470: LD_INT 0
4472: PPUSH
4473: LD_INT 4
4475: PPUSH
4476: LD_EXP 29
4480: PPUSH
4481: LD_EXP 30
4485: PPUSH
4486: CALL_OW 12
4490: PPUSH
4491: CALL_OW 380
// un := CreateHuman ;
4495: LD_ADDR_VAR 0 3
4499: PUSH
4500: CALL_OW 44
4504: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
4505: LD_VAR 0 3
4509: PPUSH
4510: LD_INT 8
4512: PPUSH
4513: LD_INT 0
4515: PPUSH
4516: CALL_OW 49
// end ;
4520: GO 4451
4522: POP
4523: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4524: LD_ADDR_VAR 0 2
4528: PUSH
4529: DOUBLE
4530: LD_INT 1
4532: DEC
4533: ST_TO_ADDR
4534: LD_INT 3
4536: PUSH
4537: LD_INT 4
4539: PUSH
4540: LD_INT 5
4542: PUSH
4543: LD_INT 5
4545: PUSH
4546: EMPTY
4547: LIST
4548: LIST
4549: LIST
4550: LIST
4551: PUSH
4552: LD_OWVAR 67
4556: ARRAY
4557: PUSH
4558: FOR_TO
4559: IFFALSE 4776
// begin vc_engine = 3 ;
4561: LD_ADDR_OWVAR 39
4565: PUSH
4566: LD_INT 3
4568: ST_TO_ADDR
// vc_control = 1 ;
4569: LD_ADDR_OWVAR 38
4573: PUSH
4574: LD_INT 1
4576: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ rand ( 1 , 5 ) ] ;
4577: LD_ADDR_OWVAR 40
4581: PUSH
4582: LD_INT 42
4584: PUSH
4585: LD_INT 43
4587: PUSH
4588: LD_INT 44
4590: PUSH
4591: LD_INT 45
4593: PUSH
4594: LD_INT 46
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: LIST
4601: LIST
4602: LIST
4603: PUSH
4604: LD_INT 1
4606: PPUSH
4607: LD_INT 5
4609: PPUSH
4610: CALL_OW 12
4614: ARRAY
4615: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4616: LD_OWVAR 40
4620: PUSH
4621: LD_INT 46
4623: EQUAL
4624: IFFALSE 4636
// vc_chassis := ru_heavy_tracked else
4626: LD_ADDR_OWVAR 37
4630: PUSH
4631: LD_INT 24
4633: ST_TO_ADDR
4634: GO 4663
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4636: LD_ADDR_OWVAR 37
4640: PUSH
4641: LD_INT 22
4643: PUSH
4644: LD_INT 21
4646: PUSH
4647: EMPTY
4648: LIST
4649: LIST
4650: PUSH
4651: LD_INT 1
4653: PPUSH
4654: LD_INT 2
4656: PPUSH
4657: CALL_OW 12
4661: ARRAY
4662: ST_TO_ADDR
// veh := CreateVehicle ;
4663: LD_ADDR_VAR 0 4
4667: PUSH
4668: CALL_OW 45
4672: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4673: LD_VAR 0 4
4677: PPUSH
4678: LD_INT 3
4680: PPUSH
4681: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4685: LD_VAR 0 4
4689: PPUSH
4690: LD_INT 5
4692: PPUSH
4693: LD_INT 0
4695: PPUSH
4696: CALL_OW 49
// hc_gallery :=  ;
4700: LD_ADDR_OWVAR 33
4704: PUSH
4705: LD_STRING 
4707: ST_TO_ADDR
// hc_name :=  ;
4708: LD_ADDR_OWVAR 26
4712: PUSH
4713: LD_STRING 
4715: ST_TO_ADDR
// PrepareHuman ( false , 3 , [ 6 , 7 , 8 , 10 ] [ Difficulty ] ) ;
4716: LD_INT 0
4718: PPUSH
4719: LD_INT 3
4721: PPUSH
4722: LD_INT 6
4724: PUSH
4725: LD_INT 7
4727: PUSH
4728: LD_INT 8
4730: PUSH
4731: LD_INT 10
4733: PUSH
4734: EMPTY
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: PUSH
4740: LD_OWVAR 67
4744: ARRAY
4745: PPUSH
4746: CALL_OW 380
// un = CreateHuman ;
4750: LD_ADDR_VAR 0 3
4754: PUSH
4755: CALL_OW 44
4759: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_VAR 0 4
4769: PPUSH
4770: CALL_OW 52
// end ;
4774: GO 4558
4776: POP
4777: POP
// for i := 1 to [ 3 , 4 , 5 , 5 ] [ Difficulty ] do
4778: LD_ADDR_VAR 0 2
4782: PUSH
4783: DOUBLE
4784: LD_INT 1
4786: DEC
4787: ST_TO_ADDR
4788: LD_INT 3
4790: PUSH
4791: LD_INT 4
4793: PUSH
4794: LD_INT 5
4796: PUSH
4797: LD_INT 5
4799: PUSH
4800: EMPTY
4801: LIST
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: LD_OWVAR 67
4810: ARRAY
4811: PUSH
4812: FOR_TO
4813: IFFALSE 4960
// begin vc_engine := 3 ;
4815: LD_ADDR_OWVAR 39
4819: PUSH
4820: LD_INT 3
4822: ST_TO_ADDR
// vc_control := 3 ;
4823: LD_ADDR_OWVAR 38
4827: PUSH
4828: LD_INT 3
4830: ST_TO_ADDR
// vc_weapon := [ 42 , 43 , 44 , 45 , 46 , 49 ] [ rand ( 1 , 5 ) ] ;
4831: LD_ADDR_OWVAR 40
4835: PUSH
4836: LD_INT 42
4838: PUSH
4839: LD_INT 43
4841: PUSH
4842: LD_INT 44
4844: PUSH
4845: LD_INT 45
4847: PUSH
4848: LD_INT 46
4850: PUSH
4851: LD_INT 49
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: PUSH
4862: LD_INT 1
4864: PPUSH
4865: LD_INT 5
4867: PPUSH
4868: CALL_OW 12
4872: ARRAY
4873: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4874: LD_OWVAR 40
4878: PUSH
4879: LD_INT 46
4881: EQUAL
4882: IFFALSE 4894
// vc_chassis := ru_heavy_tracked else
4884: LD_ADDR_OWVAR 37
4888: PUSH
4889: LD_INT 24
4891: ST_TO_ADDR
4892: GO 4921
// vc_chassis := [ ru_medium_tracked , ru_medium_wheeled ] [ rand ( 1 , 2 ) ] ;
4894: LD_ADDR_OWVAR 37
4898: PUSH
4899: LD_INT 22
4901: PUSH
4902: LD_INT 21
4904: PUSH
4905: EMPTY
4906: LIST
4907: LIST
4908: PUSH
4909: LD_INT 1
4911: PPUSH
4912: LD_INT 2
4914: PPUSH
4915: CALL_OW 12
4919: ARRAY
4920: ST_TO_ADDR
// veh := CreateVehicle ;
4921: LD_ADDR_VAR 0 4
4925: PUSH
4926: CALL_OW 45
4930: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4931: LD_VAR 0 4
4935: PPUSH
4936: LD_INT 3
4938: PPUSH
4939: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4943: LD_VAR 0 4
4947: PPUSH
4948: LD_INT 6
4950: PPUSH
4951: LD_INT 0
4953: PPUSH
4954: CALL_OW 49
// end ;
4958: GO 4812
4960: POP
4961: POP
// end ; end_of_file
4962: LD_VAR 0 1
4966: RET
// export function PrepareKurt ; begin
4967: LD_INT 0
4969: PPUSH
// uc_side := 8 ;
4970: LD_ADDR_OWVAR 20
4974: PUSH
4975: LD_INT 8
4977: ST_TO_ADDR
// uc_nation := 2 ;
4978: LD_ADDR_OWVAR 21
4982: PUSH
4983: LD_INT 2
4985: ST_TO_ADDR
// vc_chassis := ar_medium_trike ;
4986: LD_ADDR_OWVAR 37
4990: PUSH
4991: LD_INT 13
4993: ST_TO_ADDR
// vc_engine := 1 ;
4994: LD_ADDR_OWVAR 39
4998: PUSH
4999: LD_INT 1
5001: ST_TO_ADDR
// vc_control := 1 ;
5002: LD_ADDR_OWVAR 38
5006: PUSH
5007: LD_INT 1
5009: ST_TO_ADDR
// vc_weapon := 24 ;
5010: LD_ADDR_OWVAR 40
5014: PUSH
5015: LD_INT 24
5017: ST_TO_ADDR
// KurtVeh := CreateVehicle ;
5018: LD_ADDR_EXP 18
5022: PUSH
5023: CALL_OW 45
5027: ST_TO_ADDR
// if kurtStatus > 0 then
5028: LD_EXP 19
5032: PUSH
5033: LD_INT 0
5035: GREATER
5036: IFFALSE 5088
// begin Kurt := PrepareUnit ( Kurt , false ,  ) ;
5038: LD_ADDR_EXP 17
5042: PUSH
5043: LD_STRING Kurt
5045: PPUSH
5046: LD_INT 0
5048: PPUSH
5049: LD_STRING 
5051: PPUSH
5052: CALL 40737 0 3
5056: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5057: LD_EXP 18
5061: PPUSH
5062: LD_INT 4
5064: PPUSH
5065: LD_INT 0
5067: PPUSH
5068: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5072: LD_EXP 17
5076: PPUSH
5077: LD_EXP 18
5081: PPUSH
5082: CALL_OW 52
// end else
5086: GO 5165
// begin hc_name :=  ;
5088: LD_ADDR_OWVAR 26
5092: PUSH
5093: LD_STRING 
5095: ST_TO_ADDR
// hc_gallery :=  ;
5096: LD_ADDR_OWVAR 33
5100: PUSH
5101: LD_STRING 
5103: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
5104: LD_INT 1
5106: PPUSH
5107: LD_INT 10
5109: PPUSH
5110: CALL_OW 381
// Kurt := CreateHuman ;
5114: LD_ADDR_EXP 17
5118: PUSH
5119: CALL_OW 44
5123: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
5124: LD_EXP 18
5128: PPUSH
5129: LD_INT 4
5131: PPUSH
5132: LD_INT 0
5134: PPUSH
5135: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
5139: LD_EXP 17
5143: PPUSH
5144: LD_EXP 18
5148: PPUSH
5149: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
5153: LD_EXP 17
5157: PPUSH
5158: LD_STRING AltKurt
5160: PPUSH
5161: CALL_OW 38
// end ; end ;
5165: LD_VAR 0 1
5169: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
5170: LD_INT 0
5172: PPUSH
5173: PPUSH
5174: PPUSH
5175: PPUSH
// for i := 1 to 3 do
5176: LD_ADDR_VAR 0 2
5180: PUSH
5181: DOUBLE
5182: LD_INT 1
5184: DEC
5185: ST_TO_ADDR
5186: LD_INT 3
5188: PUSH
5189: FOR_TO
5190: IFFALSE 5311
// begin uc_side := 1 ;
5192: LD_ADDR_OWVAR 20
5196: PUSH
5197: LD_INT 1
5199: ST_TO_ADDR
// uc_nation := 2 ;
5200: LD_ADDR_OWVAR 21
5204: PUSH
5205: LD_INT 2
5207: ST_TO_ADDR
// hc_gallery =  ;
5208: LD_ADDR_OWVAR 33
5212: PUSH
5213: LD_STRING 
5215: ST_TO_ADDR
// hc_name =  ;
5216: LD_ADDR_OWVAR 26
5220: PUSH
5221: LD_STRING 
5223: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
5224: LD_EXP 19
5228: PUSH
5229: LD_INT 0
5231: EQUAL
5232: PUSH
5233: LD_EXP 19
5237: PUSH
5238: LD_INT 2
5240: EQUAL
5241: OR
5242: IFFALSE 5259
// PrepareHuman ( false , 1 , 6 ) else
5244: LD_INT 0
5246: PPUSH
5247: LD_INT 1
5249: PPUSH
5250: LD_INT 6
5252: PPUSH
5253: CALL_OW 380
5257: GO 5272
// PrepareHuman ( false , 1 , 8 ) ;
5259: LD_INT 0
5261: PPUSH
5262: LD_INT 1
5264: PPUSH
5265: LD_INT 8
5267: PPUSH
5268: CALL_OW 380
// un := CreateHuman ;
5272: LD_ADDR_VAR 0 3
5276: PUSH
5277: CALL_OW 44
5281: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5282: LD_VAR 0 3
5286: PPUSH
5287: LD_INT 4
5289: PPUSH
5290: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
5294: LD_VAR 0 3
5298: PPUSH
5299: LD_INT 4
5301: PPUSH
5302: LD_INT 0
5304: PPUSH
5305: CALL_OW 49
// end ;
5309: GO 5189
5311: POP
5312: POP
// vc_chassis := 14 ;
5313: LD_ADDR_OWVAR 37
5317: PUSH
5318: LD_INT 14
5320: ST_TO_ADDR
// vc_engine := 3 ;
5321: LD_ADDR_OWVAR 39
5325: PUSH
5326: LD_INT 3
5328: ST_TO_ADDR
// vc_control := 1 ;
5329: LD_ADDR_OWVAR 38
5333: PUSH
5334: LD_INT 1
5336: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
5337: LD_ADDR_OWVAR 40
5341: PUSH
5342: LD_INT 27
5344: PUSH
5345: LD_INT 26
5347: PUSH
5348: LD_INT 28
5350: PUSH
5351: EMPTY
5352: LIST
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 1
5358: PPUSH
5359: LD_INT 3
5361: PPUSH
5362: CALL_OW 12
5366: ARRAY
5367: ST_TO_ADDR
// veh := CreateVehicle ;
5368: LD_ADDR_VAR 0 4
5372: PUSH
5373: CALL_OW 45
5377: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5378: LD_VAR 0 4
5382: PPUSH
5383: LD_INT 4
5385: PPUSH
5386: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5390: LD_VAR 0 4
5394: PPUSH
5395: LD_INT 4
5397: PPUSH
5398: LD_INT 0
5400: PPUSH
5401: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5405: LD_EXP 19
5409: PUSH
5410: LD_INT 0
5412: EQUAL
5413: PUSH
5414: LD_EXP 19
5418: PUSH
5419: LD_INT 2
5421: EQUAL
5422: OR
5423: IFFALSE 5440
// PrepareHuman ( false , 3 , 6 ) else
5425: LD_INT 0
5427: PPUSH
5428: LD_INT 3
5430: PPUSH
5431: LD_INT 6
5433: PPUSH
5434: CALL_OW 380
5438: GO 5453
// PrepareHuman ( false , 3 , 8 ) ;
5440: LD_INT 0
5442: PPUSH
5443: LD_INT 3
5445: PPUSH
5446: LD_INT 8
5448: PPUSH
5449: CALL_OW 380
// un := CreateHuman ;
5453: LD_ADDR_VAR 0 3
5457: PUSH
5458: CALL_OW 44
5462: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
5463: LD_VAR 0 3
5467: PPUSH
5468: LD_VAR 0 4
5472: PPUSH
5473: CALL_OW 52
// vc_chassis := 14 ;
5477: LD_ADDR_OWVAR 37
5481: PUSH
5482: LD_INT 14
5484: ST_TO_ADDR
// vc_engine := 3 ;
5485: LD_ADDR_OWVAR 39
5489: PUSH
5490: LD_INT 3
5492: ST_TO_ADDR
// vc_control := 1 ;
5493: LD_ADDR_OWVAR 38
5497: PUSH
5498: LD_INT 1
5500: ST_TO_ADDR
// vc_weapon := [ 27 , 26 , 28 ] [ rand ( 1 , 3 ) ] ;
5501: LD_ADDR_OWVAR 40
5505: PUSH
5506: LD_INT 27
5508: PUSH
5509: LD_INT 26
5511: PUSH
5512: LD_INT 28
5514: PUSH
5515: EMPTY
5516: LIST
5517: LIST
5518: LIST
5519: PUSH
5520: LD_INT 1
5522: PPUSH
5523: LD_INT 3
5525: PPUSH
5526: CALL_OW 12
5530: ARRAY
5531: ST_TO_ADDR
// veh := CreateVehicle ;
5532: LD_ADDR_VAR 0 4
5536: PUSH
5537: CALL_OW 45
5541: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5542: LD_VAR 0 4
5546: PPUSH
5547: LD_INT 4
5549: PPUSH
5550: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5554: LD_VAR 0 4
5558: PPUSH
5559: LD_INT 4
5561: PPUSH
5562: LD_INT 0
5564: PPUSH
5565: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5569: LD_EXP 19
5573: PUSH
5574: LD_INT 0
5576: EQUAL
5577: PUSH
5578: LD_EXP 19
5582: PUSH
5583: LD_INT 2
5585: EQUAL
5586: OR
5587: IFFALSE 5604
// PrepareHuman ( false , 4 , 6 ) else
5589: LD_INT 0
5591: PPUSH
5592: LD_INT 4
5594: PPUSH
5595: LD_INT 6
5597: PPUSH
5598: CALL_OW 380
5602: GO 5617
// PrepareHuman ( false , 4 , 8 ) ;
5604: LD_INT 0
5606: PPUSH
5607: LD_INT 4
5609: PPUSH
5610: LD_INT 8
5612: PPUSH
5613: CALL_OW 380
// un := CreateHuman ;
5617: LD_ADDR_VAR 0 3
5621: PUSH
5622: CALL_OW 44
5626: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5627: LD_VAR 0 3
5631: PPUSH
5632: LD_INT 4
5634: PPUSH
5635: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5639: LD_VAR 0 3
5643: PPUSH
5644: LD_VAR 0 4
5648: PPUSH
5649: CALL_OW 52
// vc_chassis := 14 ;
5653: LD_ADDR_OWVAR 37
5657: PUSH
5658: LD_INT 14
5660: ST_TO_ADDR
// vc_engine := 3 ;
5661: LD_ADDR_OWVAR 39
5665: PUSH
5666: LD_INT 3
5668: ST_TO_ADDR
// vc_control := 1 ;
5669: LD_ADDR_OWVAR 38
5673: PUSH
5674: LD_INT 1
5676: ST_TO_ADDR
// vc_weapon := 26 ;
5677: LD_ADDR_OWVAR 40
5681: PUSH
5682: LD_INT 26
5684: ST_TO_ADDR
// veh := CreateVehicle ;
5685: LD_ADDR_VAR 0 4
5689: PUSH
5690: CALL_OW 45
5694: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5695: LD_VAR 0 4
5699: PPUSH
5700: LD_INT 4
5702: PPUSH
5703: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5707: LD_VAR 0 4
5711: PPUSH
5712: LD_INT 4
5714: PPUSH
5715: LD_INT 0
5717: PPUSH
5718: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5722: LD_EXP 19
5726: PUSH
5727: LD_INT 0
5729: EQUAL
5730: PUSH
5731: LD_EXP 19
5735: PUSH
5736: LD_INT 2
5738: EQUAL
5739: OR
5740: IFFALSE 5757
// PrepareHuman ( false , 2 , 4 ) else
5742: LD_INT 0
5744: PPUSH
5745: LD_INT 2
5747: PPUSH
5748: LD_INT 4
5750: PPUSH
5751: CALL_OW 380
5755: GO 5770
// PrepareHuman ( false , 2 , 8 ) ;
5757: LD_INT 0
5759: PPUSH
5760: LD_INT 2
5762: PPUSH
5763: LD_INT 8
5765: PPUSH
5766: CALL_OW 380
// un := CreateHuman ;
5770: LD_ADDR_VAR 0 3
5774: PUSH
5775: CALL_OW 44
5779: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5780: LD_VAR 0 3
5784: PPUSH
5785: LD_INT 4
5787: PPUSH
5788: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5792: LD_VAR 0 3
5796: PPUSH
5797: LD_VAR 0 4
5801: PPUSH
5802: CALL_OW 52
// end ;
5806: LD_VAR 0 1
5810: RET
// export function PrepareAttackLegion ; var i , un ; begin
5811: LD_INT 0
5813: PPUSH
5814: PPUSH
5815: PPUSH
// for i := 1 to 4 do
5816: LD_ADDR_VAR 0 2
5820: PUSH
5821: DOUBLE
5822: LD_INT 1
5824: DEC
5825: ST_TO_ADDR
5826: LD_INT 4
5828: PUSH
5829: FOR_TO
5830: IFFALSE 5940
// begin uc_side := 8 ;
5832: LD_ADDR_OWVAR 20
5836: PUSH
5837: LD_INT 8
5839: ST_TO_ADDR
// uc_nation := 2 ;
5840: LD_ADDR_OWVAR 21
5844: PUSH
5845: LD_INT 2
5847: ST_TO_ADDR
// hc_gallery :=  ;
5848: LD_ADDR_OWVAR 33
5852: PUSH
5853: LD_STRING 
5855: ST_TO_ADDR
// hc_name :=  ;
5856: LD_ADDR_OWVAR 26
5860: PUSH
5861: LD_STRING 
5863: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5864: LD_INT 0
5866: PPUSH
5867: LD_INT 1
5869: PUSH
5870: LD_INT 8
5872: PUSH
5873: EMPTY
5874: LIST
5875: LIST
5876: PUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_INT 2
5882: PPUSH
5883: CALL_OW 12
5887: ARRAY
5888: PPUSH
5889: LD_INT 6
5891: PPUSH
5892: LD_INT 8
5894: PPUSH
5895: CALL_OW 12
5899: PPUSH
5900: CALL_OW 380
// un := CreateHuman ;
5904: LD_ADDR_VAR 0 3
5908: PUSH
5909: CALL_OW 44
5913: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5914: LD_VAR 0 3
5918: PPUSH
5919: LD_INT 19
5921: PPUSH
5922: LD_INT 0
5924: PPUSH
5925: CALL_OW 49
// ComCrawl ( un ) ;
5929: LD_VAR 0 3
5933: PPUSH
5934: CALL_OW 137
// end ;
5938: GO 5829
5940: POP
5941: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5942: LD_INT 1
5944: PPUSH
5945: LD_INT 8
5947: PPUSH
5948: LD_INT 2
5950: PPUSH
5951: LD_INT 1
5953: PPUSH
5954: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5958: LD_INT 20
5960: PPUSH
5961: LD_INT 3
5963: PPUSH
5964: CALL 14982 0 2
// end ; end_of_file
5968: LD_VAR 0 1
5972: RET
// export function Action ; var i , tmp , group ; begin
5973: LD_INT 0
5975: PPUSH
5976: PPUSH
5977: PPUSH
5978: PPUSH
// InGameOn ;
5979: CALL_OW 8
// music_nat := 1 ;
5983: LD_ADDR_OWVAR 71
5987: PUSH
5988: LD_INT 1
5990: ST_TO_ADDR
// group := FilterAllUnits ( [ f_side , 1 ] ) ;
5991: LD_ADDR_VAR 0 4
5995: PUSH
5996: LD_INT 22
5998: PUSH
5999: LD_INT 1
6001: PUSH
6002: EMPTY
6003: LIST
6004: LIST
6005: PPUSH
6006: CALL_OW 69
6010: ST_TO_ADDR
// tmp := IsInUnit ( JMM ) ;
6011: LD_ADDR_VAR 0 3
6015: PUSH
6016: LD_EXP 1
6020: PPUSH
6021: CALL_OW 310
6025: ST_TO_ADDR
// CenterNowOnUnits ( tmp ) ;
6026: LD_VAR 0 3
6030: PPUSH
6031: CALL_OW 87
// ComMoveXY ( group , 130 , 103 ) ;
6035: LD_VAR 0 4
6039: PPUSH
6040: LD_INT 130
6042: PPUSH
6043: LD_INT 103
6045: PPUSH
6046: CALL_OW 111
// AddComMoveXY ( tmp , 114 , 102 ) ;
6050: LD_VAR 0 3
6054: PPUSH
6055: LD_INT 114
6057: PPUSH
6058: LD_INT 102
6060: PPUSH
6061: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
6065: LD_EXP 1
6069: PPUSH
6070: LD_STRING D1-JMM-1
6072: PPUSH
6073: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6077: LD_VAR 0 3
6081: PPUSH
6082: CALL_OW 87
// if IsOk ( Donaldson ) then
6086: LD_EXP 3
6090: PPUSH
6091: CALL_OW 302
6095: IFFALSE 6160
// begin Say ( Donaldson , D1-Don-1 ) ;
6097: LD_EXP 3
6101: PPUSH
6102: LD_STRING D1-Don-1
6104: PPUSH
6105: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6109: LD_VAR 0 3
6113: PPUSH
6114: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
6118: LD_EXP 1
6122: PPUSH
6123: LD_STRING D1-JMM-2
6125: PPUSH
6126: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6130: LD_VAR 0 3
6134: PPUSH
6135: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
6139: LD_EXP 3
6143: PPUSH
6144: LD_STRING D1-Don-2
6146: PPUSH
6147: CALL_OW 88
// CenterNowOnUnits ( tmp ) ;
6151: LD_VAR 0 3
6155: PPUSH
6156: CALL_OW 87
// end ; AddComMoveXY ( group , 110 , 101 ) ;
6160: LD_VAR 0 4
6164: PPUSH
6165: LD_INT 110
6167: PPUSH
6168: LD_INT 101
6170: PPUSH
6171: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
6175: LD_INT 35
6177: PPUSH
6178: CALL_OW 67
// CenterNowOnUnits ( tmp ) ;
6182: LD_VAR 0 3
6186: PPUSH
6187: CALL_OW 87
// until SeeXY ( 1 , 102 , 94 ) ;
6191: LD_INT 1
6193: PPUSH
6194: LD_INT 102
6196: PPUSH
6197: LD_INT 94
6199: PPUSH
6200: CALL_OW 293
6204: IFFALSE 6175
// CenterOnXY ( 102 , 94 ) ;
6206: LD_INT 102
6208: PPUSH
6209: LD_INT 94
6211: PPUSH
6212: CALL_OW 84
// DialogRandom ( UnitFilter ( group , [ f_sex , sex_male ] ) , D1-Sol1-2 ,  ) ;
6216: LD_VAR 0 4
6220: PPUSH
6221: LD_INT 26
6223: PUSH
6224: LD_INT 1
6226: PUSH
6227: EMPTY
6228: LIST
6229: LIST
6230: PPUSH
6231: CALL_OW 72
6235: PPUSH
6236: LD_STRING D1-Sol1-2
6238: PPUSH
6239: LD_STRING 
6241: PPUSH
6242: CALL 12642 0 3
// Say ( JMM , D1-JMM-3 ) ;
6246: LD_EXP 1
6250: PPUSH
6251: LD_STRING D1-JMM-3
6253: PPUSH
6254: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
6258: LD_STRING M1
6260: PPUSH
6261: CALL_OW 337
// for i in group do
6265: LD_ADDR_VAR 0 2
6269: PUSH
6270: LD_VAR 0 4
6274: PUSH
6275: FOR_IN
6276: IFFALSE 6295
// ComMoveXY ( i , 95 , 84 ) ;
6278: LD_VAR 0 2
6282: PPUSH
6283: LD_INT 95
6285: PPUSH
6286: LD_INT 84
6288: PPUSH
6289: CALL_OW 111
6293: GO 6275
6295: POP
6296: POP
// end ;
6297: LD_VAR 0 1
6301: RET
// every 0 0$1 trigger FilterUnitsInArea ( WaterPass , [ f_side , 1 ] ) > 1 do var i , tmp , dec ;
6302: LD_INT 7
6304: PPUSH
6305: LD_INT 22
6307: PUSH
6308: LD_INT 1
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: PPUSH
6315: CALL_OW 70
6319: PUSH
6320: LD_INT 1
6322: GREATER
6323: IFFALSE 6973
6325: GO 6327
6327: DISABLE
6328: LD_INT 0
6330: PPUSH
6331: PPUSH
6332: PPUSH
// begin tmp := FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
6333: LD_ADDR_VAR 0 2
6337: PUSH
6338: LD_INT 8
6340: PPUSH
6341: LD_INT 22
6343: PUSH
6344: LD_INT 3
6346: PUSH
6347: EMPTY
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 25
6353: PUSH
6354: LD_INT 9
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PPUSH
6365: CALL_OW 70
6369: ST_TO_ADDR
// ComTimeShift ( tmp , 96 , 85 ) ;
6370: LD_VAR 0 2
6374: PPUSH
6375: LD_INT 96
6377: PPUSH
6378: LD_INT 85
6380: PPUSH
6381: CALL_OW 154
// for i := 1 to 5 do
6385: LD_ADDR_VAR 0 1
6389: PUSH
6390: DOUBLE
6391: LD_INT 1
6393: DEC
6394: ST_TO_ADDR
6395: LD_INT 5
6397: PUSH
6398: FOR_TO
6399: IFFALSE 6418
// AddComTimeShift ( tmp , 96 , 85 ) ;
6401: LD_VAR 0 2
6405: PPUSH
6406: LD_INT 96
6408: PPUSH
6409: LD_INT 85
6411: PPUSH
6412: CALL_OW 214
6416: GO 6398
6418: POP
6419: POP
// wait ( 0 0$2 ) ;
6420: LD_INT 70
6422: PPUSH
6423: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6427: LD_EXP 1
6431: PPUSH
6432: LD_STRING D1a-JMM-1
6434: PPUSH
6435: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6439: LD_EXP 3
6443: PPUSH
6444: LD_STRING D1a-Don-1
6446: PPUSH
6447: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_INT 22
6458: PUSH
6459: LD_INT 1
6461: PUSH
6462: EMPTY
6463: LIST
6464: LIST
6465: PPUSH
6466: CALL_OW 69
6470: PUSH
6471: FOR_IN
6472: IFFALSE 6491
// ComMoveXY ( i , 109 , 102 ) ;
6474: LD_VAR 0 1
6478: PPUSH
6479: LD_INT 109
6481: PPUSH
6482: LD_INT 102
6484: PPUSH
6485: CALL_OW 111
6489: GO 6471
6491: POP
6492: POP
// Say ( JMM , D1a-JMM-2 ) ;
6493: LD_EXP 1
6497: PPUSH
6498: LD_STRING D1a-JMM-2
6500: PPUSH
6501: CALL_OW 88
// wait ( 0 0$10 ) ;
6505: LD_INT 350
6507: PPUSH
6508: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6512: LD_EXP 1
6516: PPUSH
6517: CALL_OW 310
6521: PPUSH
6522: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6526: LD_EXP 3
6530: PPUSH
6531: LD_STRING D1b-Don-1
6533: PPUSH
6534: CALL_OW 88
// if IsOk ( Donaldson ) then
6538: LD_EXP 3
6542: PPUSH
6543: CALL_OW 302
6547: IFFALSE 6561
// Say ( JMM , D1b-JMM-1 ) ;
6549: LD_EXP 1
6553: PPUSH
6554: LD_STRING D1b-JMM-1
6556: PPUSH
6557: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6561: LD_INT 22
6563: PUSH
6564: LD_INT 1
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 26
6573: PUSH
6574: LD_INT 1
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: PUSH
6581: LD_INT 2
6583: PUSH
6584: LD_INT 25
6586: PUSH
6587: LD_INT 1
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: PUSH
6594: LD_INT 25
6596: PUSH
6597: LD_INT 2
6599: PUSH
6600: EMPTY
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 25
6606: PUSH
6607: LD_INT 3
6609: PUSH
6610: EMPTY
6611: LIST
6612: LIST
6613: PUSH
6614: LD_INT 25
6616: PUSH
6617: LD_INT 4
6619: PUSH
6620: EMPTY
6621: LIST
6622: LIST
6623: PUSH
6624: LD_INT 25
6626: PUSH
6627: LD_INT 5
6629: PUSH
6630: EMPTY
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 25
6636: PUSH
6637: LD_INT 8
6639: PUSH
6640: EMPTY
6641: LIST
6642: LIST
6643: PUSH
6644: EMPTY
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: LIST
6657: PPUSH
6658: CALL_OW 69
6662: PPUSH
6663: LD_STRING D1b-Sol1-1
6665: PPUSH
6666: LD_STRING 
6668: PPUSH
6669: CALL 12642 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6673: LD_EXP 3
6677: PPUSH
6678: LD_STRING D1b-Don-2
6680: PPUSH
6681: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6685: LD_EXP 1
6689: PPUSH
6690: LD_STRING D1b-JMM-2
6692: PPUSH
6693: CALL_OW 88
// dec := ShowQuery1 ;
6697: LD_ADDR_VAR 0 3
6701: PUSH
6702: CALL 13105 0 0
6706: ST_TO_ADDR
// if dec = 1 then
6707: LD_VAR 0 3
6711: PUSH
6712: LD_INT 1
6714: EQUAL
6715: IFFALSE 6821
// begin Say ( JMM , D2-JMM-1 ) ;
6717: LD_EXP 1
6721: PPUSH
6722: LD_STRING D2-JMM-1
6724: PPUSH
6725: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6729: LD_EXP 15
6733: PPUSH
6734: LD_STRING D2-Pow-1
6736: PPUSH
6737: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6741: LD_EXP 1
6745: PPUSH
6746: LD_STRING D2a-JMM-1
6748: PPUSH
6749: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6753: LD_EXP 15
6757: PPUSH
6758: LD_STRING D2a-Pow-1
6760: PPUSH
6761: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6765: LD_EXP 1
6769: PPUSH
6770: LD_STRING D2a-JMM-2
6772: PPUSH
6773: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6777: LD_EXP 15
6781: PPUSH
6782: LD_STRING D2a-Pow-2
6784: PPUSH
6785: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6789: LD_EXP 1
6793: PPUSH
6794: LD_STRING D2a-JMM-3
6796: PPUSH
6797: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6801: LD_EXP 15
6805: PPUSH
6806: LD_STRING D2a-Pow-3
6808: PPUSH
6809: CALL_OW 94
// secondPass := 2 ;
6813: LD_ADDR_EXP 20
6817: PUSH
6818: LD_INT 2
6820: ST_TO_ADDR
// end ; if dec = 2 then
6821: LD_VAR 0 3
6825: PUSH
6826: LD_INT 2
6828: EQUAL
6829: IFFALSE 6923
// begin Say ( JMM , D2-JMM-1 ) ;
6831: LD_EXP 1
6835: PPUSH
6836: LD_STRING D2-JMM-1
6838: PPUSH
6839: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6843: LD_EXP 15
6847: PPUSH
6848: LD_STRING D2-Pow-1
6850: PPUSH
6851: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6855: LD_EXP 1
6859: PPUSH
6860: LD_STRING D2b-JMM-1
6862: PPUSH
6863: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6867: LD_EXP 15
6871: PPUSH
6872: LD_STRING D2b-Pow-1
6874: PPUSH
6875: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6879: LD_EXP 1
6883: PPUSH
6884: LD_STRING D2c-JMM-1
6886: PPUSH
6887: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6891: LD_EXP 15
6895: PPUSH
6896: LD_STRING D2c-Pow-1
6898: PPUSH
6899: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6903: LD_EXP 1
6907: PPUSH
6908: LD_STRING D2c-JMM-2
6910: PPUSH
6911: CALL_OW 88
// secondPass := 2 ;
6915: LD_ADDR_EXP 20
6919: PUSH
6920: LD_INT 2
6922: ST_TO_ADDR
// end ; if dec = 3 then
6923: LD_VAR 0 3
6927: PUSH
6928: LD_INT 3
6930: EQUAL
6931: IFFALSE 6941
// secondPass := 1 ;
6933: LD_ADDR_EXP 20
6937: PUSH
6938: LD_INT 1
6940: ST_TO_ADDR
// InGameOff ;
6941: CALL_OW 9
// ruAI := true ;
6945: LD_ADDR_EXP 34
6949: PUSH
6950: LD_INT 1
6952: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6953: LD_INT 1
6955: PPUSH
6956: LD_INT 3
6958: PPUSH
6959: LD_INT 2
6961: PPUSH
6962: LD_INT 1
6964: PPUSH
6965: CALL_OW 80
// SaveForQuickRestart ;
6969: CALL_OW 22
// end ;
6973: PPOPN 3
6975: END
// every 1 1$0 trigger secondPass = 2 do
6976: LD_EXP 20
6980: PUSH
6981: LD_INT 2
6983: EQUAL
6984: IFFALSE 7212
6986: GO 6988
6988: DISABLE
// begin cratesAllow := true ;
6989: LD_ADDR_EXP 45
6993: PUSH
6994: LD_INT 1
6996: ST_TO_ADDR
// PowellSupport1 ;
6997: CALL 2053 0 0
// DialogueOn ;
7001: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
7005: LD_EXP 1
7009: PPUSH
7010: LD_STRING DC1-JMM-1
7012: PPUSH
7013: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
7017: LD_EXP 15
7021: PPUSH
7022: LD_STRING DC1-Pow-1
7024: PPUSH
7025: CALL_OW 94
// DialogueOff ;
7029: CALL_OW 7
// wait ( 3 3$0 ) ;
7033: LD_INT 6300
7035: PPUSH
7036: CALL_OW 67
// PowellSupport2 ;
7040: CALL 2534 0 0
// DialogueOn ;
7044: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
7048: LD_EXP 1
7052: PPUSH
7053: LD_STRING DC2-JMM-1
7055: PPUSH
7056: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
7060: LD_EXP 15
7064: PPUSH
7065: LD_STRING DC2-Pow-1
7067: PPUSH
7068: CALL_OW 94
// DialogueOff ;
7072: CALL_OW 7
// wait ( 3 3$00 ) ;
7076: LD_INT 6300
7078: PPUSH
7079: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7083: LD_INT 35
7085: PPUSH
7086: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
7090: LD_INT 22
7092: PUSH
7093: LD_INT 1
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: PUSH
7100: LD_INT 2
7102: PUSH
7103: LD_INT 30
7105: PUSH
7106: LD_INT 0
7108: PUSH
7109: EMPTY
7110: LIST
7111: LIST
7112: PUSH
7113: LD_INT 30
7115: PUSH
7116: LD_INT 1
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PUSH
7128: EMPTY
7129: LIST
7130: LIST
7131: PPUSH
7132: CALL_OW 69
7136: PUSH
7137: LD_INT 11
7139: PPUSH
7140: LD_INT 22
7142: PUSH
7143: LD_INT 3
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PPUSH
7150: CALL_OW 70
7154: NOT
7155: AND
7156: IFFALSE 7083
// wait ( 0 0$10 ) ;
7158: LD_INT 350
7160: PPUSH
7161: CALL_OW 67
// Legion ;
7165: CALL 7213 0 0
// wait ( 5 5$0 ) ;
7169: LD_INT 10500
7171: PPUSH
7172: CALL_OW 67
// PowellSupport3 ;
7176: CALL 3163 0 0
// DialogueOn ;
7180: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
7184: LD_EXP 15
7188: PPUSH
7189: LD_STRING DC3-Pow-1
7191: PPUSH
7192: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
7196: LD_EXP 1
7200: PPUSH
7201: LD_STRING DC3-JMM-1
7203: PPUSH
7204: CALL_OW 88
// DialogueOff ;
7208: CALL_OW 7
// end ;
7212: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
7213: LD_INT 0
7215: PPUSH
7216: PPUSH
7217: PPUSH
7218: PPUSH
7219: PPUSH
7220: PPUSH
7221: PPUSH
7222: PPUSH
7223: PPUSH
7224: PPUSH
7225: PPUSH
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
7231: LD_ADDR_VAR 0 5
7235: PUSH
7236: LD_INT 22
7238: PUSH
7239: LD_INT 1
7241: PUSH
7242: EMPTY
7243: LIST
7244: LIST
7245: PUSH
7246: LD_INT 21
7248: PUSH
7249: LD_INT 3
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 2
7258: PUSH
7259: LD_INT 30
7261: PUSH
7262: LD_INT 0
7264: PUSH
7265: EMPTY
7266: LIST
7267: LIST
7268: PUSH
7269: LD_INT 30
7271: PUSH
7272: LD_INT 1
7274: PUSH
7275: EMPTY
7276: LIST
7277: LIST
7278: PUSH
7279: EMPTY
7280: LIST
7281: LIST
7282: LIST
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: LIST
7288: PPUSH
7289: CALL_OW 69
7293: ST_TO_ADDR
// crates := 0 ;
7294: LD_ADDR_VAR 0 8
7298: PUSH
7299: LD_INT 0
7301: ST_TO_ADDR
// oil := 0 ;
7302: LD_ADDR_VAR 0 9
7306: PUSH
7307: LD_INT 0
7309: ST_TO_ADDR
// siberite := 0 ;
7310: LD_ADDR_VAR 0 10
7314: PUSH
7315: LD_INT 0
7317: ST_TO_ADDR
// payForNeutral := false ;
7318: LD_ADDR_VAR 0 13
7322: PUSH
7323: LD_INT 0
7325: ST_TO_ADDR
// payForHelp := false ;
7326: LD_ADDR_VAR 0 14
7330: PUSH
7331: LD_INT 0
7333: ST_TO_ADDR
// for i in tmp do
7334: LD_ADDR_VAR 0 2
7338: PUSH
7339: LD_VAR 0 5
7343: PUSH
7344: FOR_IN
7345: IFFALSE 7436
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
7347: LD_ADDR_VAR 0 8
7351: PUSH
7352: LD_VAR 0 8
7356: PUSH
7357: LD_VAR 0 2
7361: PPUSH
7362: CALL_OW 274
7366: PPUSH
7367: LD_INT 1
7369: PPUSH
7370: CALL_OW 275
7374: PLUS
7375: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
7376: LD_ADDR_VAR 0 9
7380: PUSH
7381: LD_VAR 0 9
7385: PUSH
7386: LD_VAR 0 2
7390: PPUSH
7391: CALL_OW 274
7395: PPUSH
7396: LD_INT 2
7398: PPUSH
7399: CALL_OW 275
7403: PLUS
7404: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
7405: LD_ADDR_VAR 0 10
7409: PUSH
7410: LD_VAR 0 10
7414: PUSH
7415: LD_VAR 0 2
7419: PPUSH
7420: CALL_OW 274
7424: PPUSH
7425: LD_INT 3
7427: PPUSH
7428: CALL_OW 275
7432: PLUS
7433: ST_TO_ADDR
// end ;
7434: GO 7344
7436: POP
7437: POP
// PrepareKurt ;
7438: CALL 4967 0 0
// if not Kurt then
7442: LD_EXP 17
7446: NOT
7447: IFFALSE 7451
// exit ;
7449: GO 9570
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7451: LD_EXP 18
7455: PPUSH
7456: LD_INT 144
7458: PPUSH
7459: LD_INT 111
7461: PPUSH
7462: CALL_OW 111
// wait ( 0 0$2 ) ;
7466: LD_INT 70
7468: PPUSH
7469: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7473: LD_INT 167
7475: PPUSH
7476: LD_INT 121
7478: PPUSH
7479: LD_INT 1
7481: PPUSH
7482: LD_INT 10
7484: NEG
7485: PPUSH
7486: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7490: LD_EXP 17
7494: PPUSH
7495: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7499: LD_EXP 17
7503: PPUSH
7504: CALL_OW 87
// wait ( 0 0$1 ) ;
7508: LD_INT 35
7510: PPUSH
7511: CALL_OW 67
// DialogueOn ;
7515: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7519: LD_INT 22
7521: PUSH
7522: LD_INT 1
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 26
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 2
7541: PUSH
7542: LD_INT 25
7544: PUSH
7545: LD_INT 1
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: LD_INT 25
7554: PUSH
7555: LD_INT 2
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 25
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: LD_INT 25
7574: PUSH
7575: LD_INT 4
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: LD_INT 25
7584: PUSH
7585: LD_INT 5
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: PUSH
7592: LD_INT 25
7594: PUSH
7595: LD_INT 8
7597: PUSH
7598: EMPTY
7599: LIST
7600: LIST
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: LIST
7615: PPUSH
7616: CALL_OW 69
7620: PPUSH
7621: LD_STRING D3-Sol1-1
7623: PPUSH
7624: LD_STRING 
7626: PPUSH
7627: CALL 12642 0 3
// if KurtStatus then
7631: LD_EXP 19
7635: IFFALSE 7735
// begin Say ( Kurt , D3-Kurt-1 ) ;
7637: LD_EXP 17
7641: PPUSH
7642: LD_STRING D3-Kurt-1
7644: PPUSH
7645: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7649: LD_EXP 1
7653: PPUSH
7654: LD_STRING D3-JMM-1
7656: PPUSH
7657: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7661: LD_EXP 17
7665: PPUSH
7666: LD_STRING D3-Kurt-2
7668: PPUSH
7669: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7673: LD_EXP 1
7677: PPUSH
7678: LD_STRING D3-JMM-2
7680: PPUSH
7681: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7685: LD_EXP 17
7689: PPUSH
7690: LD_STRING D3-Kurt-4
7692: PPUSH
7693: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7697: LD_EXP 1
7701: PPUSH
7702: LD_STRING D3-JMM-4
7704: PPUSH
7705: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7709: LD_EXP 17
7713: PPUSH
7714: LD_STRING D3-Kurt-5
7716: PPUSH
7717: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7721: LD_EXP 17
7725: PPUSH
7726: LD_STRING D3-Kurt-5a
7728: PPUSH
7729: CALL_OW 88
// end else
7733: GO 7831
// begin Say ( Kurt , D3-Kurt-1 ) ;
7735: LD_EXP 17
7739: PPUSH
7740: LD_STRING D3-Kurt-1
7742: PPUSH
7743: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7747: LD_EXP 1
7751: PPUSH
7752: LD_STRING D3-JMM-1
7754: PPUSH
7755: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7759: LD_EXP 17
7763: PPUSH
7764: LD_STRING D3-Kurt-3
7766: PPUSH
7767: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7771: LD_EXP 1
7775: PPUSH
7776: LD_STRING D3-JMM-3
7778: PPUSH
7779: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7783: LD_EXP 17
7787: PPUSH
7788: LD_STRING D3-Kurt-4
7790: PPUSH
7791: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7795: LD_EXP 1
7799: PPUSH
7800: LD_STRING D3-JMM-4
7802: PPUSH
7803: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7807: LD_EXP 17
7811: PPUSH
7812: LD_STRING D3-Kurt-5
7814: PPUSH
7815: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7819: LD_EXP 17
7823: PPUSH
7824: LD_STRING D3-Kurt-5b
7826: PPUSH
7827: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7831: LD_VAR 0 8
7835: PUSH
7836: LD_INT 120
7838: PUSH
7839: LD_INT 60
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: PUSH
7846: LD_EXP 19
7850: PUSH
7851: LD_INT 1
7853: PLUS
7854: ARRAY
7855: GREATEREQUAL
7856: PUSH
7857: LD_VAR 0 10
7861: PUSH
7862: LD_INT 120
7864: PUSH
7865: LD_INT 60
7867: PUSH
7868: EMPTY
7869: LIST
7870: LIST
7871: PUSH
7872: LD_EXP 19
7876: PUSH
7877: LD_INT 1
7879: PLUS
7880: ARRAY
7881: GREATEREQUAL
7882: AND
7883: IFFALSE 7935
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7885: LD_ADDR_VAR 0 3
7889: PUSH
7890: LD_STRING Q2
7892: PUSH
7893: LD_STRING Q2K
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PUSH
7900: LD_EXP 19
7904: PUSH
7905: LD_INT 1
7907: PLUS
7908: ARRAY
7909: PPUSH
7910: LD_INT 1
7912: PUSH
7913: LD_INT 2
7915: PUSH
7916: LD_INT 3
7918: PUSH
7919: LD_INT 4
7921: PUSH
7922: EMPTY
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 98
7932: ST_TO_ADDR
7933: GO 7979
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7935: LD_ADDR_VAR 0 3
7939: PUSH
7940: LD_STRING Q2
7942: PUSH
7943: LD_STRING Q2K
7945: PUSH
7946: EMPTY
7947: LIST
7948: LIST
7949: PUSH
7950: LD_EXP 19
7954: PUSH
7955: LD_INT 1
7957: PLUS
7958: ARRAY
7959: PPUSH
7960: LD_INT 1
7962: PUSH
7963: LD_INT 3
7965: PUSH
7966: LD_INT 4
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: LIST
7973: PPUSH
7974: CALL_OW 98
7978: ST_TO_ADDR
// if dec1 = 1 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 1
7986: EQUAL
7987: IFFALSE 8021
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7989: LD_EXP 1
7993: PPUSH
7994: LD_STRING D3Ka-JMM-1
7996: PPUSH
7997: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
8001: LD_EXP 17
8005: PPUSH
8006: LD_STRING D3Ka-Kurt-1
8008: PPUSH
8009: CALL_OW 88
// warWithLegion = 1 ;
8013: LD_ADDR_EXP 23
8017: PUSH
8018: LD_INT 1
8020: ST_TO_ADDR
// end ; if dec1 = 2 then
8021: LD_VAR 0 3
8025: PUSH
8026: LD_INT 2
8028: EQUAL
8029: IFFALSE 8113
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8031: LD_EXP 1
8035: PPUSH
8036: LD_STRING D3Kb-JMM-1
8038: PPUSH
8039: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8043: LD_EXP 17
8047: PPUSH
8048: LD_STRING D3Kb-Kurt-1
8050: PPUSH
8051: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8055: LD_ADDR_VAR 0 11
8059: PUSH
8060: LD_INT 120
8062: PUSH
8063: LD_INT 60
8065: PUSH
8066: EMPTY
8067: LIST
8068: LIST
8069: PUSH
8070: LD_EXP 19
8074: PUSH
8075: LD_INT 1
8077: PLUS
8078: ARRAY
8079: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8080: LD_ADDR_VAR 0 12
8084: PUSH
8085: LD_INT 120
8087: PUSH
8088: LD_INT 60
8090: PUSH
8091: EMPTY
8092: LIST
8093: LIST
8094: PUSH
8095: LD_EXP 19
8099: PUSH
8100: LD_INT 1
8102: PLUS
8103: ARRAY
8104: ST_TO_ADDR
// payForNeutral := true ;
8105: LD_ADDR_VAR 0 13
8109: PUSH
8110: LD_INT 1
8112: ST_TO_ADDR
// end ; if dec1 = 3 then
8113: LD_VAR 0 3
8117: PUSH
8118: LD_INT 3
8120: EQUAL
8121: IFFALSE 8356
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8123: LD_EXP 1
8127: PPUSH
8128: LD_STRING D3Kc1-JMM-1
8130: PPUSH
8131: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8135: LD_EXP 17
8139: PPUSH
8140: LD_STRING D3Kc1-Kurt-1
8142: PPUSH
8143: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8147: LD_EXP 1
8151: PPUSH
8152: LD_STRING D3Kc1-JMM-2
8154: PPUSH
8155: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8159: LD_EXP 17
8163: PPUSH
8164: LD_STRING D3Kc1-Kurt-2
8166: PPUSH
8167: CALL_OW 88
// askSiberite = 1 ;
8171: LD_ADDR_EXP 25
8175: PUSH
8176: LD_INT 1
8178: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8179: LD_ADDR_VAR 0 4
8183: PUSH
8184: LD_STRING Q2b
8186: PPUSH
8187: LD_INT 1
8189: PUSH
8190: LD_INT 2
8192: PUSH
8193: LD_INT 3
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 98
8205: ST_TO_ADDR
// if dec2 = 1 then
8206: LD_VAR 0 4
8210: PUSH
8211: LD_INT 1
8213: EQUAL
8214: IFFALSE 8248
// begin Say ( JMM , D4a-JMM-1 ) ;
8216: LD_EXP 1
8220: PPUSH
8221: LD_STRING D4a-JMM-1
8223: PPUSH
8224: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8228: LD_EXP 17
8232: PPUSH
8233: LD_STRING D4b-Kurt-1
8235: PPUSH
8236: CALL_OW 88
// warWithLegion = 1 ;
8240: LD_ADDR_EXP 23
8244: PUSH
8245: LD_INT 1
8247: ST_TO_ADDR
// end ; if dec2 = 2 then
8248: LD_VAR 0 4
8252: PUSH
8253: LD_INT 2
8255: EQUAL
8256: IFFALSE 8290
// begin Say ( JMM , D4b-JMM-1 ) ;
8258: LD_EXP 1
8262: PPUSH
8263: LD_STRING D4b-JMM-1
8265: PPUSH
8266: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8270: LD_EXP 17
8274: PPUSH
8275: LD_STRING D4b-Kurt-1
8277: PPUSH
8278: CALL_OW 88
// warWithLegion = 1 ;
8282: LD_ADDR_EXP 23
8286: PUSH
8287: LD_INT 1
8289: ST_TO_ADDR
// end ; if dec2 = 3 then
8290: LD_VAR 0 4
8294: PUSH
8295: LD_INT 3
8297: EQUAL
8298: IFFALSE 8356
// begin Say ( JMM , D4c-JMM-1 ) ;
8300: LD_EXP 1
8304: PPUSH
8305: LD_STRING D4c-JMM-1
8307: PPUSH
8308: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8312: LD_EXP 17
8316: PPUSH
8317: LD_STRING D4c-Kurt-1
8319: PPUSH
8320: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8324: LD_EXP 1
8328: PPUSH
8329: LD_STRING D4c-JMM-2
8331: PPUSH
8332: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8336: LD_EXP 17
8340: PPUSH
8341: LD_STRING D4c-Kurt-2
8343: PPUSH
8344: CALL_OW 88
// fakeInfo = 1 ;
8348: LD_ADDR_EXP 24
8352: PUSH
8353: LD_INT 1
8355: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 4
8363: EQUAL
8364: IFFALSE 9426
// begin Say ( JMM , D3Kd-JMM-1 ) ;
8366: LD_EXP 1
8370: PPUSH
8371: LD_STRING D3Kd-JMM-1
8373: PPUSH
8374: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
8378: LD_VAR 0 8
8382: PUSH
8383: LD_INT 200
8385: PUSH
8386: LD_INT 120
8388: PUSH
8389: EMPTY
8390: LIST
8391: LIST
8392: PUSH
8393: LD_EXP 19
8397: PUSH
8398: LD_INT 1
8400: PLUS
8401: ARRAY
8402: GREATEREQUAL
8403: PUSH
8404: LD_VAR 0 10
8408: PUSH
8409: LD_INT 200
8411: PUSH
8412: LD_INT 120
8414: PUSH
8415: EMPTY
8416: LIST
8417: LIST
8418: PUSH
8419: LD_EXP 19
8423: PUSH
8424: LD_INT 1
8426: PLUS
8427: ARRAY
8428: GREATEREQUAL
8429: AND
8430: IFFALSE 8482
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8432: LD_ADDR_VAR 0 4
8436: PUSH
8437: LD_STRING Q2a
8439: PUSH
8440: LD_STRING Q2aK
8442: PUSH
8443: EMPTY
8444: LIST
8445: LIST
8446: PUSH
8447: LD_EXP 19
8451: PUSH
8452: LD_INT 1
8454: PLUS
8455: ARRAY
8456: PPUSH
8457: LD_INT 1
8459: PUSH
8460: LD_INT 2
8462: PUSH
8463: LD_INT 3
8465: PUSH
8466: LD_INT 4
8468: PUSH
8469: EMPTY
8470: LIST
8471: LIST
8472: LIST
8473: LIST
8474: PPUSH
8475: CALL_OW 98
8479: ST_TO_ADDR
8480: GO 8646
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8482: LD_VAR 0 8
8486: PUSH
8487: LD_INT 120
8489: PUSH
8490: LD_INT 60
8492: PUSH
8493: EMPTY
8494: LIST
8495: LIST
8496: PUSH
8497: LD_EXP 19
8501: PUSH
8502: LD_INT 1
8504: PLUS
8505: ARRAY
8506: GREATEREQUAL
8507: PUSH
8508: LD_VAR 0 10
8512: PUSH
8513: LD_INT 120
8515: PUSH
8516: LD_INT 60
8518: PUSH
8519: EMPTY
8520: LIST
8521: LIST
8522: PUSH
8523: LD_EXP 19
8527: PUSH
8528: LD_INT 1
8530: PLUS
8531: ARRAY
8532: GREATEREQUAL
8533: AND
8534: IFFALSE 8582
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8536: LD_ADDR_VAR 0 4
8540: PUSH
8541: LD_STRING Q2a
8543: PUSH
8544: LD_STRING Q2aK
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PUSH
8551: LD_EXP 19
8555: PUSH
8556: LD_INT 1
8558: PLUS
8559: ARRAY
8560: PPUSH
8561: LD_INT 1
8563: PUSH
8564: LD_INT 2
8566: PUSH
8567: LD_INT 4
8569: PUSH
8570: EMPTY
8571: LIST
8572: LIST
8573: LIST
8574: PPUSH
8575: CALL_OW 98
8579: ST_TO_ADDR
8580: GO 8646
// begin Query ( [ Q2d , Q2dK ] [ KurtStatus + 1 ] ) ;
8582: LD_STRING Q2d
8584: PUSH
8585: LD_STRING Q2dK
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: LD_EXP 19
8596: PUSH
8597: LD_INT 1
8599: PLUS
8600: ARRAY
8601: PPUSH
8602: CALL_OW 97
// dec2 := 0 ;
8606: LD_ADDR_VAR 0 4
8610: PUSH
8611: LD_INT 0
8613: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8614: LD_EXP 1
8618: PPUSH
8619: LD_STRING D3Kc1-JMM-1
8621: PPUSH
8622: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_STRING D3Kc2-Kurt-1
8633: PPUSH
8634: CALL_OW 88
// warWithLegion := 1 ;
8638: LD_ADDR_EXP 23
8642: PUSH
8643: LD_INT 1
8645: ST_TO_ADDR
// end ; if dec2 = 1 then
8646: LD_VAR 0 4
8650: PUSH
8651: LD_INT 1
8653: EQUAL
8654: IFFALSE 8688
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8656: LD_EXP 1
8660: PPUSH
8661: LD_STRING D5Ka-JMM-1
8663: PPUSH
8664: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8668: LD_EXP 17
8672: PPUSH
8673: LD_STRING D5Ka-Kurt-1
8675: PPUSH
8676: CALL_OW 88
// warWithLegion = 1 ;
8680: LD_ADDR_EXP 23
8684: PUSH
8685: LD_INT 1
8687: ST_TO_ADDR
// end ; if dec2 = 2 then
8688: LD_VAR 0 4
8692: PUSH
8693: LD_INT 2
8695: EQUAL
8696: IFFALSE 8780
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8698: LD_EXP 1
8702: PPUSH
8703: LD_STRING D3Kb-JMM-1
8705: PPUSH
8706: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8710: LD_EXP 17
8714: PPUSH
8715: LD_STRING D3Kb-Kurt-1
8717: PPUSH
8718: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8722: LD_ADDR_VAR 0 11
8726: PUSH
8727: LD_INT 120
8729: PUSH
8730: LD_INT 60
8732: PUSH
8733: EMPTY
8734: LIST
8735: LIST
8736: PUSH
8737: LD_EXP 19
8741: PUSH
8742: LD_INT 1
8744: PLUS
8745: ARRAY
8746: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8747: LD_ADDR_VAR 0 12
8751: PUSH
8752: LD_INT 120
8754: PUSH
8755: LD_INT 60
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_EXP 19
8766: PUSH
8767: LD_INT 1
8769: PLUS
8770: ARRAY
8771: ST_TO_ADDR
// payForNeutral := true ;
8772: LD_ADDR_VAR 0 13
8776: PUSH
8777: LD_INT 1
8779: ST_TO_ADDR
// end ; if dec2 = 3 then
8780: LD_VAR 0 4
8784: PUSH
8785: LD_INT 3
8787: EQUAL
8788: IFFALSE 8872
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8790: LD_EXP 1
8794: PPUSH
8795: LD_STRING D3Ke-JMM-1
8797: PPUSH
8798: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8802: LD_EXP 17
8806: PPUSH
8807: LD_STRING D3Ke-Kurt-1
8809: PPUSH
8810: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8814: LD_ADDR_VAR 0 11
8818: PUSH
8819: LD_INT 200
8821: PUSH
8822: LD_INT 120
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PUSH
8829: LD_EXP 19
8833: PUSH
8834: LD_INT 1
8836: PLUS
8837: ARRAY
8838: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8839: LD_ADDR_VAR 0 12
8843: PUSH
8844: LD_INT 200
8846: PUSH
8847: LD_INT 120
8849: PUSH
8850: EMPTY
8851: LIST
8852: LIST
8853: PUSH
8854: LD_EXP 19
8858: PUSH
8859: LD_INT 1
8861: PLUS
8862: ARRAY
8863: ST_TO_ADDR
// payForHelp := true ;
8864: LD_ADDR_VAR 0 14
8868: PUSH
8869: LD_INT 1
8871: ST_TO_ADDR
// end ; if dec2 = 4 then
8872: LD_VAR 0 4
8876: PUSH
8877: LD_INT 4
8879: EQUAL
8880: IFFALSE 9115
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8882: LD_EXP 1
8886: PPUSH
8887: LD_STRING D3Kc1-JMM-1
8889: PPUSH
8890: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8894: LD_EXP 17
8898: PPUSH
8899: LD_STRING D3Kc1-Kurt-1
8901: PPUSH
8902: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8906: LD_EXP 1
8910: PPUSH
8911: LD_STRING D3Kc1-JMM-2
8913: PPUSH
8914: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8918: LD_EXP 17
8922: PPUSH
8923: LD_STRING D3Kc1-Kurt-2
8925: PPUSH
8926: CALL_OW 88
// askSiberite = 1 ;
8930: LD_ADDR_EXP 25
8934: PUSH
8935: LD_INT 1
8937: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8938: LD_ADDR_VAR 0 4
8942: PUSH
8943: LD_STRING Q2b
8945: PPUSH
8946: LD_INT 1
8948: PUSH
8949: LD_INT 2
8951: PUSH
8952: LD_INT 3
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PPUSH
8960: CALL_OW 98
8964: ST_TO_ADDR
// if dec2 = 1 then
8965: LD_VAR 0 4
8969: PUSH
8970: LD_INT 1
8972: EQUAL
8973: IFFALSE 9007
// begin Say ( JMM , D4a-JMM-1 ) ;
8975: LD_EXP 1
8979: PPUSH
8980: LD_STRING D4a-JMM-1
8982: PPUSH
8983: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8987: LD_EXP 17
8991: PPUSH
8992: LD_STRING D4b-Kurt-1
8994: PPUSH
8995: CALL_OW 88
// warWithLegion = 1 ;
8999: LD_ADDR_EXP 23
9003: PUSH
9004: LD_INT 1
9006: ST_TO_ADDR
// end ; if dec2 = 2 then
9007: LD_VAR 0 4
9011: PUSH
9012: LD_INT 2
9014: EQUAL
9015: IFFALSE 9049
// begin Say ( JMM , D4b-JMM-1 ) ;
9017: LD_EXP 1
9021: PPUSH
9022: LD_STRING D4b-JMM-1
9024: PPUSH
9025: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
9029: LD_EXP 17
9033: PPUSH
9034: LD_STRING D4b-Kurt-1
9036: PPUSH
9037: CALL_OW 88
// warWithLegion = 1 ;
9041: LD_ADDR_EXP 23
9045: PUSH
9046: LD_INT 1
9048: ST_TO_ADDR
// end ; if dec2 = 3 then
9049: LD_VAR 0 4
9053: PUSH
9054: LD_INT 3
9056: EQUAL
9057: IFFALSE 9115
// begin Say ( JMM , D4c-JMM-1 ) ;
9059: LD_EXP 1
9063: PPUSH
9064: LD_STRING D4c-JMM-1
9066: PPUSH
9067: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
9071: LD_EXP 17
9075: PPUSH
9076: LD_STRING D4c-Kurt-1
9078: PPUSH
9079: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
9083: LD_EXP 1
9087: PPUSH
9088: LD_STRING D4c-JMM-2
9090: PPUSH
9091: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
9095: LD_EXP 17
9099: PPUSH
9100: LD_STRING D4c-Kurt-2
9102: PPUSH
9103: CALL_OW 88
// fakeInfo = 1 ;
9107: LD_ADDR_EXP 24
9111: PUSH
9112: LD_INT 1
9114: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
9115: LD_VAR 0 13
9119: PUSH
9120: LD_VAR 0 14
9124: OR
9125: IFFALSE 9426
// begin for i in tmp do
9127: LD_ADDR_VAR 0 2
9131: PUSH
9132: LD_VAR 0 5
9136: PUSH
9137: FOR_IN
9138: IFFALSE 9424
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
9140: LD_ADDR_VAR 0 6
9144: PUSH
9145: LD_VAR 0 2
9149: PPUSH
9150: CALL_OW 274
9154: PPUSH
9155: LD_INT 1
9157: PPUSH
9158: CALL_OW 275
9162: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
9163: LD_ADDR_VAR 0 7
9167: PUSH
9168: LD_VAR 0 2
9172: PPUSH
9173: CALL_OW 274
9177: PPUSH
9178: LD_INT 3
9180: PPUSH
9181: CALL_OW 275
9185: ST_TO_ADDR
// if cr then
9186: LD_VAR 0 11
9190: IFFALSE 9304
// begin if tmp2 and tmp2 < cr then
9192: LD_VAR 0 6
9196: PUSH
9197: LD_VAR 0 6
9201: PUSH
9202: LD_VAR 0 11
9206: LESS
9207: AND
9208: IFFALSE 9256
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
9210: LD_VAR 0 2
9214: PPUSH
9215: CALL_OW 274
9219: PPUSH
9220: LD_INT 1
9222: PPUSH
9223: LD_VAR 0 11
9227: PUSH
9228: LD_VAR 0 6
9232: MINUS
9233: PPUSH
9234: CALL_OW 277
// cr := cr - tmp2 ;
9238: LD_ADDR_VAR 0 11
9242: PUSH
9243: LD_VAR 0 11
9247: PUSH
9248: LD_VAR 0 6
9252: MINUS
9253: ST_TO_ADDR
// end else
9254: GO 9304
// if tmp2 > cr then
9256: LD_VAR 0 6
9260: PUSH
9261: LD_VAR 0 11
9265: GREATER
9266: IFFALSE 9304
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
9268: LD_VAR 0 2
9272: PPUSH
9273: CALL_OW 274
9277: PPUSH
9278: LD_INT 1
9280: PPUSH
9281: LD_VAR 0 6
9285: PUSH
9286: LD_VAR 0 11
9290: MINUS
9291: PPUSH
9292: CALL_OW 277
// cr := 0 ;
9296: LD_ADDR_VAR 0 11
9300: PUSH
9301: LD_INT 0
9303: ST_TO_ADDR
// end ; end ; if sb then
9304: LD_VAR 0 12
9308: IFFALSE 9422
// begin if tmp3 and tmp3 < sb then
9310: LD_VAR 0 7
9314: PUSH
9315: LD_VAR 0 7
9319: PUSH
9320: LD_VAR 0 12
9324: LESS
9325: AND
9326: IFFALSE 9374
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
9328: LD_VAR 0 2
9332: PPUSH
9333: CALL_OW 274
9337: PPUSH
9338: LD_INT 3
9340: PPUSH
9341: LD_VAR 0 12
9345: PUSH
9346: LD_VAR 0 7
9350: MINUS
9351: PPUSH
9352: CALL_OW 277
// sb := sb - tmp3 ;
9356: LD_ADDR_VAR 0 12
9360: PUSH
9361: LD_VAR 0 12
9365: PUSH
9366: LD_VAR 0 7
9370: MINUS
9371: ST_TO_ADDR
// end else
9372: GO 9422
// if tmp3 > sb then
9374: LD_VAR 0 7
9378: PUSH
9379: LD_VAR 0 12
9383: GREATER
9384: IFFALSE 9422
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
9386: LD_VAR 0 2
9390: PPUSH
9391: CALL_OW 274
9395: PPUSH
9396: LD_INT 3
9398: PPUSH
9399: LD_VAR 0 7
9403: PUSH
9404: LD_VAR 0 12
9408: MINUS
9409: PPUSH
9410: CALL_OW 277
// sb := 0 ;
9414: LD_ADDR_VAR 0 12
9418: PUSH
9419: LD_INT 0
9421: ST_TO_ADDR
// end ; end ; end ;
9422: GO 9137
9424: POP
9425: POP
// end ; end ; DialogueOff ;
9426: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
9430: LD_INT 167
9432: PPUSH
9433: LD_INT 121
9435: PPUSH
9436: LD_INT 1
9438: PPUSH
9439: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9443: LD_EXP 17
9447: PPUSH
9448: LD_EXP 18
9452: PPUSH
9453: CALL_OW 120
// wait ( 0 0$1 ) ;
9457: LD_INT 35
9459: PPUSH
9460: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9464: LD_EXP 18
9468: PPUSH
9469: LD_INT 4
9471: PPUSH
9472: CALL_OW 113
// wait ( 0 0$3 ) ;
9476: LD_INT 105
9478: PPUSH
9479: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9483: LD_EXP 17
9487: PPUSH
9488: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9492: LD_EXP 18
9496: PPUSH
9497: CALL_OW 64
// wait ( 0 0$3 ) ;
9501: LD_INT 105
9503: PPUSH
9504: CALL_OW 67
// if payForHelp then
9508: LD_VAR 0 14
9512: IFFALSE 9570
// begin HiddenCamera ( 36 , 57 , 1 ) ;
9514: LD_INT 36
9516: PPUSH
9517: LD_INT 57
9519: PPUSH
9520: LD_INT 1
9522: PPUSH
9523: CALL_OW 244
// HiddenCamera ( 51 , 63 , 1 ) ;
9527: LD_INT 51
9529: PPUSH
9530: LD_INT 63
9532: PPUSH
9533: LD_INT 1
9535: PPUSH
9536: CALL_OW 244
// HiddenCamera ( 93 , 65 , 1 ) ;
9540: LD_INT 93
9542: PPUSH
9543: LD_INT 65
9545: PPUSH
9546: LD_INT 1
9548: PPUSH
9549: CALL_OW 244
// HiddenCamera ( 42 , 12 , 1 ) ;
9553: LD_INT 42
9555: PPUSH
9556: LD_INT 12
9558: PPUSH
9559: LD_INT 1
9561: PPUSH
9562: CALL_OW 244
// PrepareLegionForPlayer ;
9566: CALL 5170 0 0
// end ; end ;
9570: LD_VAR 0 1
9574: RET
// every 0 0$10 trigger warWithLegion = 1 do
9575: LD_EXP 23
9579: PUSH
9580: LD_INT 1
9582: EQUAL
9583: IFFALSE 9599
9585: GO 9587
9587: DISABLE
// begin wait ( 0 0$30 ) ;
9588: LD_INT 1050
9590: PPUSH
9591: CALL_OW 67
// PrepareAttackLegion ;
9595: CALL 5811 0 0
// end ;
9599: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do var i ;
9600: LD_INT 120
9602: PUSH
9603: LD_INT 17
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: PUSH
9610: LD_INT 52
9612: PUSH
9613: EMPTY
9614: LIST
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PPUSH
9620: CALL_OW 69
9624: IFFALSE 9769
9626: GO 9628
9628: DISABLE
9629: LD_INT 0
9631: PPUSH
// begin enable ;
9632: ENABLE
// for i in FilterAllUnits ( [ [ f_tag , 17 ] , [ f_placed ] ] ) do
9633: LD_ADDR_VAR 0 1
9637: PUSH
9638: LD_INT 120
9640: PUSH
9641: LD_INT 17
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PUSH
9648: LD_INT 52
9650: PUSH
9651: EMPTY
9652: LIST
9653: PUSH
9654: EMPTY
9655: LIST
9656: LIST
9657: PPUSH
9658: CALL_OW 69
9662: PUSH
9663: FOR_IN
9664: IFFALSE 9767
// begin if GetMultiCargo ( i ) [ 4 ] = 0 and GetSide ( i ) = 1 then
9666: LD_VAR 0 1
9670: PPUSH
9671: CALL 82107 0 1
9675: PUSH
9676: LD_INT 4
9678: ARRAY
9679: PUSH
9680: LD_INT 0
9682: EQUAL
9683: PUSH
9684: LD_VAR 0 1
9688: PPUSH
9689: CALL_OW 255
9693: PUSH
9694: LD_INT 1
9696: EQUAL
9697: AND
9698: IFFALSE 9712
// SetSide ( i , 4 ) ;
9700: LD_VAR 0 1
9704: PPUSH
9705: LD_INT 4
9707: PPUSH
9708: CALL_OW 235
// if GetSide ( i ) = 4 then
9712: LD_VAR 0 1
9716: PPUSH
9717: CALL_OW 255
9721: PUSH
9722: LD_INT 4
9724: EQUAL
9725: IFFALSE 9765
// if not IsInArea ( i , PlayerSpawn ) then
9727: LD_VAR 0 1
9731: PPUSH
9732: LD_INT 4
9734: PPUSH
9735: CALL_OW 308
9739: NOT
9740: IFFALSE 9756
// ComMoveToArea ( i , PlayerSpawn ) else
9742: LD_VAR 0 1
9746: PPUSH
9747: LD_INT 4
9749: PPUSH
9750: CALL_OW 113
9754: GO 9765
// RemoveUnit ( i ) ;
9756: LD_VAR 0 1
9760: PPUSH
9761: CALL_OW 64
// end ;
9765: GO 9663
9767: POP
9768: POP
// end ;
9769: PPOPN 1
9771: END
// every 0 0$3 trigger secondPass = 1 and FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_type , unit_vehicle ] ] ) do var i , enemyVehs , dec ;
9772: LD_EXP 20
9776: PUSH
9777: LD_INT 1
9779: EQUAL
9780: PUSH
9781: LD_INT 12
9783: PPUSH
9784: LD_INT 22
9786: PUSH
9787: LD_INT 3
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 101
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: LD_INT 21
9806: PUSH
9807: LD_INT 2
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PUSH
9814: EMPTY
9815: LIST
9816: LIST
9817: LIST
9818: PPUSH
9819: CALL_OW 70
9823: AND
9824: IFFALSE 10373
9826: GO 9828
9828: DISABLE
9829: LD_INT 0
9831: PPUSH
9832: PPUSH
9833: PPUSH
// begin DialogueOn ;
9834: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9838: LD_VAR 0 1
9842: PPUSH
9843: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9847: LD_INT 22
9849: PUSH
9850: LD_INT 1
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: PUSH
9857: LD_INT 26
9859: PUSH
9860: LD_INT 1
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 2
9869: PUSH
9870: LD_INT 25
9872: PUSH
9873: LD_INT 1
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 25
9882: PUSH
9883: LD_INT 2
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: LD_INT 25
9892: PUSH
9893: LD_INT 3
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: PUSH
9900: LD_INT 25
9902: PUSH
9903: LD_INT 4
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: PUSH
9910: LD_INT 25
9912: PUSH
9913: LD_INT 5
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 25
9922: PUSH
9923: LD_INT 8
9925: PUSH
9926: EMPTY
9927: LIST
9928: LIST
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: PUSH
9939: EMPTY
9940: LIST
9941: LIST
9942: LIST
9943: PPUSH
9944: CALL_OW 69
9948: PPUSH
9949: LD_STRING DT1-Sol1-1
9951: PPUSH
9952: LD_STRING DT1-FSol1-1
9954: PPUSH
9955: CALL 12642 0 3
// dec := ShowQuery2 ;
9959: LD_ADDR_VAR 0 3
9963: PUSH
9964: CALL 13126 0 0
9968: ST_TO_ADDR
// if dec = 1 then
9969: LD_VAR 0 3
9973: PUSH
9974: LD_INT 1
9976: EQUAL
9977: IFFALSE 10083
// begin Say ( JMM , D2-JMM-1 ) ;
9979: LD_EXP 1
9983: PPUSH
9984: LD_STRING D2-JMM-1
9986: PPUSH
9987: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9991: LD_EXP 15
9995: PPUSH
9996: LD_STRING D2-Pow-1
9998: PPUSH
9999: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
10003: LD_EXP 1
10007: PPUSH
10008: LD_STRING D2a-JMM-1
10010: PPUSH
10011: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
10015: LD_EXP 15
10019: PPUSH
10020: LD_STRING D2a-Pow-1
10022: PPUSH
10023: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
10027: LD_EXP 1
10031: PPUSH
10032: LD_STRING D2a-JMM-2
10034: PPUSH
10035: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10039: LD_EXP 15
10043: PPUSH
10044: LD_STRING D2a-Pow-2
10046: PPUSH
10047: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10051: LD_EXP 1
10055: PPUSH
10056: LD_STRING D2a-JMM-3
10058: PPUSH
10059: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10063: LD_EXP 15
10067: PPUSH
10068: LD_STRING D2a-Pow-3
10070: PPUSH
10071: CALL_OW 94
// secondPass := 2 ;
10075: LD_ADDR_EXP 20
10079: PUSH
10080: LD_INT 2
10082: ST_TO_ADDR
// end ; if dec = 2 then
10083: LD_VAR 0 3
10087: PUSH
10088: LD_INT 2
10090: EQUAL
10091: IFFALSE 10185
// begin Say ( JMM , D2-JMM-1 ) ;
10093: LD_EXP 1
10097: PPUSH
10098: LD_STRING D2-JMM-1
10100: PPUSH
10101: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10105: LD_EXP 15
10109: PPUSH
10110: LD_STRING D2-Pow-1
10112: PPUSH
10113: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10117: LD_EXP 1
10121: PPUSH
10122: LD_STRING D2b-JMM-1
10124: PPUSH
10125: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10129: LD_EXP 15
10133: PPUSH
10134: LD_STRING D2b-Pow-1
10136: PPUSH
10137: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10141: LD_EXP 1
10145: PPUSH
10146: LD_STRING D2c-JMM-1
10148: PPUSH
10149: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10153: LD_EXP 15
10157: PPUSH
10158: LD_STRING D2c-Pow-1
10160: PPUSH
10161: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10165: LD_EXP 1
10169: PPUSH
10170: LD_STRING D2c-JMM-2
10172: PPUSH
10173: CALL_OW 88
// secondPass := 2 ;
10177: LD_ADDR_EXP 20
10181: PUSH
10182: LD_INT 2
10184: ST_TO_ADDR
// end ; DialogueOff ;
10185: CALL_OW 7
// if secondPass = 2 then
10189: LD_EXP 20
10193: PUSH
10194: LD_INT 2
10196: EQUAL
10197: IFFALSE 10201
// exit ;
10199: GO 10373
// Query ( HelpRequest ) ;
10201: LD_STRING HelpRequest
10203: PPUSH
10204: CALL_OW 97
// SetAreaMapShow ( helpRequestArea , 1 ) ;
10208: LD_INT 27
10210: PPUSH
10211: LD_INT 1
10213: PPUSH
10214: CALL_OW 424
// repeat wait ( 0 0$1 ) ;
10218: LD_INT 35
10220: PPUSH
10221: CALL_OW 67
// until IsInArea ( JMM , helpRequestArea ) ;
10225: LD_EXP 1
10229: PPUSH
10230: LD_INT 27
10232: PPUSH
10233: CALL_OW 308
10237: IFFALSE 10218
// SetAreaMapShow ( helpRequestArea , 0 ) ;
10239: LD_INT 27
10241: PPUSH
10242: LD_INT 0
10244: PPUSH
10245: CALL_OW 424
// DialogueOn ;
10249: CALL_OW 6
// Say ( JMM , D2-JMM-1 ) ;
10253: LD_EXP 1
10257: PPUSH
10258: LD_STRING D2-JMM-1
10260: PPUSH
10261: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10265: LD_EXP 15
10269: PPUSH
10270: LD_STRING D2-Pow-1
10272: PPUSH
10273: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10277: LD_EXP 1
10281: PPUSH
10282: LD_STRING D2b-JMM-1
10284: PPUSH
10285: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
10289: LD_EXP 15
10293: PPUSH
10294: LD_STRING D2a-Pow-2
10296: PPUSH
10297: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
10301: LD_EXP 1
10305: PPUSH
10306: LD_STRING D2a-JMM-3
10308: PPUSH
10309: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10313: LD_EXP 15
10317: PPUSH
10318: LD_STRING D2a-Pow-3
10320: PPUSH
10321: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10325: LD_EXP 1
10329: PPUSH
10330: LD_STRING D2c-JMM-1
10332: PPUSH
10333: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10337: LD_EXP 15
10341: PPUSH
10342: LD_STRING D2c-Pow-1
10344: PPUSH
10345: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10349: LD_EXP 1
10353: PPUSH
10354: LD_STRING D2c-JMM-2
10356: PPUSH
10357: CALL_OW 88
// DialogueOff ;
10361: CALL_OW 7
// secondPass := 2 ;
10365: LD_ADDR_EXP 20
10369: PUSH
10370: LD_INT 2
10372: ST_TO_ADDR
// end ;
10373: PPOPN 3
10375: END
// every 0 0$1 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) do var vehicles ;
10376: LD_EXP 21
10380: PUSH
10381: LD_INT 1
10383: EQUAL
10384: PUSH
10385: LD_INT 11
10387: PPUSH
10388: LD_INT 22
10390: PUSH
10391: LD_INT 3
10393: PUSH
10394: EMPTY
10395: LIST
10396: LIST
10397: PPUSH
10398: CALL_OW 70
10402: AND
10403: IFFALSE 10884
10405: GO 10407
10407: DISABLE
10408: LD_INT 0
10410: PPUSH
// begin vehicles := FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
10411: LD_ADDR_VAR 0 1
10415: PUSH
10416: LD_INT 11
10418: PPUSH
10419: LD_INT 22
10421: PUSH
10422: LD_INT 3
10424: PUSH
10425: EMPTY
10426: LIST
10427: LIST
10428: PPUSH
10429: CALL_OW 70
10433: ST_TO_ADDR
// if not vehicles then
10434: LD_VAR 0 1
10438: NOT
10439: IFFALSE 10443
// exit ;
10441: GO 10884
// repeat wait ( 0 0$1 ) ;
10443: LD_INT 35
10445: PPUSH
10446: CALL_OW 67
// until UnitFilter ( vehicles , [ f_see , 1 ] ) ;
10450: LD_VAR 0 1
10454: PPUSH
10455: LD_INT 101
10457: PUSH
10458: LD_INT 1
10460: PUSH
10461: EMPTY
10462: LIST
10463: LIST
10464: PPUSH
10465: CALL_OW 72
10469: IFFALSE 10443
// CenterNowOnUnits ( UnitFilter ( vehicles , [ f_see , 1 ] ) [ 1 ] ) ;
10471: LD_VAR 0 1
10475: PPUSH
10476: LD_INT 101
10478: PUSH
10479: LD_INT 1
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: PPUSH
10486: CALL_OW 72
10490: PUSH
10491: LD_INT 1
10493: ARRAY
10494: PPUSH
10495: CALL_OW 87
// DialogueOn ;
10499: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10503: LD_INT 22
10505: PUSH
10506: LD_INT 1
10508: PUSH
10509: EMPTY
10510: LIST
10511: LIST
10512: PUSH
10513: LD_INT 26
10515: PUSH
10516: LD_INT 1
10518: PUSH
10519: EMPTY
10520: LIST
10521: LIST
10522: PUSH
10523: LD_INT 23
10525: PUSH
10526: LD_INT 1
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 2
10535: PUSH
10536: LD_INT 25
10538: PUSH
10539: LD_INT 1
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 25
10548: PUSH
10549: LD_INT 2
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: PUSH
10556: LD_INT 25
10558: PUSH
10559: LD_INT 3
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: PUSH
10566: LD_INT 25
10568: PUSH
10569: LD_INT 4
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: PUSH
10576: LD_INT 25
10578: PUSH
10579: LD_INT 5
10581: PUSH
10582: EMPTY
10583: LIST
10584: LIST
10585: PUSH
10586: LD_INT 25
10588: PUSH
10589: LD_INT 8
10591: PUSH
10592: EMPTY
10593: LIST
10594: LIST
10595: PUSH
10596: EMPTY
10597: LIST
10598: LIST
10599: LIST
10600: LIST
10601: LIST
10602: LIST
10603: LIST
10604: PUSH
10605: EMPTY
10606: LIST
10607: LIST
10608: LIST
10609: LIST
10610: PPUSH
10611: CALL_OW 69
10615: PPUSH
10616: LD_STRING DT1-Sol1-1
10618: PPUSH
10619: LD_STRING DT1-FSol1-1
10621: PPUSH
10622: CALL 12642 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10626: LD_EXP 1
10630: PPUSH
10631: LD_STRING DT1-JMM-1
10633: PPUSH
10634: CALL_OW 88
// DialogueOff ;
10638: CALL_OW 7
// repeat wait ( 0 0$05 ) ;
10642: LD_INT 175
10644: PPUSH
10645: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter > 2 ;
10649: LD_INT 11
10651: PPUSH
10652: LD_INT 22
10654: PUSH
10655: LD_INT 3
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 50
10664: PUSH
10665: EMPTY
10666: LIST
10667: PUSH
10668: LD_INT 2
10670: PUSH
10671: LD_INT 21
10673: PUSH
10674: LD_INT 2
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: PUSH
10681: LD_INT 21
10683: PUSH
10684: LD_INT 1
10686: PUSH
10687: EMPTY
10688: LIST
10689: LIST
10690: PUSH
10691: EMPTY
10692: LIST
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: PPUSH
10701: CALL_OW 70
10705: PUSH
10706: LD_INT 0
10708: EQUAL
10709: PUSH
10710: LD_EXP 22
10714: PUSH
10715: LD_INT 2
10717: GREATER
10718: AND
10719: IFFALSE 10642
// DialogueOn ;
10721: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10725: LD_EXP 1
10729: PPUSH
10730: LD_STRING DT1a-JMM-1
10732: PPUSH
10733: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_nation , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10737: LD_INT 22
10739: PUSH
10740: LD_INT 1
10742: PUSH
10743: EMPTY
10744: LIST
10745: LIST
10746: PUSH
10747: LD_INT 26
10749: PUSH
10750: LD_INT 1
10752: PUSH
10753: EMPTY
10754: LIST
10755: LIST
10756: PUSH
10757: LD_INT 23
10759: PUSH
10760: LD_INT 1
10762: PUSH
10763: EMPTY
10764: LIST
10765: LIST
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: LD_INT 25
10772: PUSH
10773: LD_INT 1
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: LD_INT 25
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: EMPTY
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 25
10792: PUSH
10793: LD_INT 3
10795: PUSH
10796: EMPTY
10797: LIST
10798: LIST
10799: PUSH
10800: LD_INT 25
10802: PUSH
10803: LD_INT 4
10805: PUSH
10806: EMPTY
10807: LIST
10808: LIST
10809: PUSH
10810: LD_INT 25
10812: PUSH
10813: LD_INT 5
10815: PUSH
10816: EMPTY
10817: LIST
10818: LIST
10819: PUSH
10820: LD_INT 25
10822: PUSH
10823: LD_INT 8
10825: PUSH
10826: EMPTY
10827: LIST
10828: LIST
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: LIST
10834: LIST
10835: LIST
10836: LIST
10837: LIST
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: PPUSH
10845: CALL_OW 69
10849: PPUSH
10850: LD_STRING DT1a-Sol1-1
10852: PPUSH
10853: LD_STRING DT1a-FSol1-1
10855: PPUSH
10856: CALL 12642 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10860: LD_EXP 1
10864: PPUSH
10865: LD_STRING DT1a-JMM-2
10867: PPUSH
10868: CALL_OW 88
// DialogueOff ;
10872: CALL_OW 7
// vehicleTeleported := 2 ;
10876: LD_ADDR_EXP 21
10880: PUSH
10881: LD_INT 2
10883: ST_TO_ADDR
// end ;
10884: PPOPN 1
10886: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10887: LD_EXP 21
10891: PUSH
10892: LD_INT 3
10894: EQUAL
10895: PUSH
10896: LD_INT 11
10898: PPUSH
10899: LD_INT 22
10901: PUSH
10902: LD_INT 3
10904: PUSH
10905: EMPTY
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 101
10911: PUSH
10912: LD_INT 1
10914: PUSH
10915: EMPTY
10916: LIST
10917: LIST
10918: PUSH
10919: EMPTY
10920: LIST
10921: LIST
10922: PPUSH
10923: CALL_OW 70
10927: AND
10928: IFFALSE 11213
10930: GO 10932
10932: DISABLE
10933: LD_INT 0
10935: PPUSH
10936: PPUSH
10937: PPUSH
// begin wait ( 0 0$0.3 ) ;
10938: LD_INT 10
10940: PPUSH
10941: CALL_OW 67
// DialogueOn ;
10945: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10949: LD_ADDR_VAR 0 3
10953: PUSH
10954: LD_INT 22
10956: PUSH
10957: LD_INT 1
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: LD_INT 23
10966: PUSH
10967: LD_INT 1
10969: PUSH
10970: EMPTY
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 26
10976: PUSH
10977: LD_INT 1
10979: PUSH
10980: EMPTY
10981: LIST
10982: LIST
10983: PUSH
10984: LD_INT 2
10986: PUSH
10987: LD_INT 25
10989: PUSH
10990: LD_INT 1
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 25
10999: PUSH
11000: LD_INT 2
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 25
11009: PUSH
11010: LD_INT 3
11012: PUSH
11013: EMPTY
11014: LIST
11015: LIST
11016: PUSH
11017: LD_INT 25
11019: PUSH
11020: LD_INT 4
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PUSH
11027: LD_INT 25
11029: PUSH
11030: LD_INT 5
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: PUSH
11037: LD_INT 25
11039: PUSH
11040: LD_INT 8
11042: PUSH
11043: EMPTY
11044: LIST
11045: LIST
11046: PUSH
11047: EMPTY
11048: LIST
11049: LIST
11050: LIST
11051: LIST
11052: LIST
11053: LIST
11054: LIST
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: LIST
11060: LIST
11061: PPUSH
11062: CALL_OW 69
11066: PPUSH
11067: LD_STRING DT2-Sol1-1
11069: PPUSH
11070: LD_STRING DT2-FSol1-1
11072: PPUSH
11073: CALL 12642 0 3
11077: ST_TO_ADDR
// DialogueOff ;
11078: CALL_OW 7
// repeat wait ( 0 0$5 ) ;
11082: LD_INT 175
11084: PPUSH
11085: CALL_OW 67
// until not FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_ok ] ] ) ;
11089: LD_INT 11
11091: PPUSH
11092: LD_INT 22
11094: PUSH
11095: LD_INT 3
11097: PUSH
11098: EMPTY
11099: LIST
11100: LIST
11101: PUSH
11102: LD_INT 50
11104: PUSH
11105: EMPTY
11106: LIST
11107: PUSH
11108: EMPTY
11109: LIST
11110: LIST
11111: PPUSH
11112: CALL_OW 70
11116: NOT
11117: IFFALSE 11082
// wait ( 0 0$2 ) ;
11119: LD_INT 70
11121: PPUSH
11122: CALL_OW 67
// vehicleTeleported := 4 ;
11126: LD_ADDR_EXP 21
11130: PUSH
11131: LD_INT 4
11133: ST_TO_ADDR
// DialogueOn ;
11134: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
11138: LD_EXP 1
11142: PPUSH
11143: LD_STRING DT2a-JMM-1
11145: PPUSH
11146: CALL_OW 88
// if speaker then
11150: LD_VAR 0 3
11154: IFFALSE 11197
// if GetSex ( speaker ) = 1 then
11156: LD_VAR 0 3
11160: PPUSH
11161: CALL_OW 258
11165: PUSH
11166: LD_INT 1
11168: EQUAL
11169: IFFALSE 11185
// Say ( speaker , DT2a-Sol1-1 ) else
11171: LD_VAR 0 3
11175: PPUSH
11176: LD_STRING DT2a-Sol1-1
11178: PPUSH
11179: CALL_OW 88
11183: GO 11197
// Say ( speaker , DT2a-FSol1-1 ) ;
11185: LD_VAR 0 3
11189: PPUSH
11190: LD_STRING DT2a-FSol1-1
11192: PPUSH
11193: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
11197: LD_EXP 3
11201: PPUSH
11202: LD_STRING DT2a-Don-1
11204: PPUSH
11205: CALL_OW 88
// DialogueOff ;
11209: CALL_OW 7
// end ;
11213: PPOPN 3
11215: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
11216: LD_INT 1
11218: PPUSH
11219: LD_INT 45
11221: PPUSH
11222: LD_INT 74
11224: PPUSH
11225: CALL_OW 293
11229: IFFALSE 11404
11231: GO 11233
11233: DISABLE
// begin DialogueOn ;
11234: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
11238: LD_INT 36
11240: PPUSH
11241: LD_INT 55
11243: PPUSH
11244: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
11248: LD_INT 22
11250: PUSH
11251: LD_INT 1
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 23
11260: PUSH
11261: LD_INT 1
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 26
11270: PUSH
11271: LD_INT 1
11273: PUSH
11274: EMPTY
11275: LIST
11276: LIST
11277: PUSH
11278: LD_INT 2
11280: PUSH
11281: LD_INT 25
11283: PUSH
11284: LD_INT 1
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: PUSH
11291: LD_INT 25
11293: PUSH
11294: LD_INT 2
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PUSH
11301: LD_INT 25
11303: PUSH
11304: LD_INT 3
11306: PUSH
11307: EMPTY
11308: LIST
11309: LIST
11310: PUSH
11311: LD_INT 25
11313: PUSH
11314: LD_INT 4
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 25
11323: PUSH
11324: LD_INT 5
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: PUSH
11331: LD_INT 25
11333: PUSH
11334: LD_INT 8
11336: PUSH
11337: EMPTY
11338: LIST
11339: LIST
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: PPUSH
11356: CALL_OW 69
11360: PPUSH
11361: LD_STRING D5-Sol1-1
11363: PPUSH
11364: LD_STRING D5-FSol1-
11366: PPUSH
11367: CALL 12642 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11371: LD_EXP 23
11375: PUSH
11376: LD_EXP 3
11380: PPUSH
11381: CALL_OW 302
11385: AND
11386: IFFALSE 11400
// Say ( Donaldson , D5-Don-1 ) ;
11388: LD_EXP 3
11392: PPUSH
11393: LD_STRING D5-Don-1
11395: PPUSH
11396: CALL_OW 88
// DialogueOff ;
11400: CALL_OW 7
// end ;
11404: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11405: LD_INT 1
11407: PPUSH
11408: LD_INT 10
11410: PPUSH
11411: CALL_OW 292
11415: PUSH
11416: LD_INT 1
11418: PPUSH
11419: LD_INT 137
11421: PPUSH
11422: CALL_OW 292
11426: OR
11427: IFFALSE 11582
11429: GO 11431
11431: DISABLE
// begin DialogueOn ;
11432: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11436: LD_INT 22
11438: PUSH
11439: LD_INT 1
11441: PUSH
11442: EMPTY
11443: LIST
11444: LIST
11445: PUSH
11446: LD_INT 23
11448: PUSH
11449: LD_INT 1
11451: PUSH
11452: EMPTY
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 26
11458: PUSH
11459: LD_INT 1
11461: PUSH
11462: EMPTY
11463: LIST
11464: LIST
11465: PUSH
11466: LD_INT 2
11468: PUSH
11469: LD_INT 25
11471: PUSH
11472: LD_INT 1
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 25
11481: PUSH
11482: LD_INT 2
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 25
11491: PUSH
11492: LD_INT 3
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: PUSH
11499: LD_INT 25
11501: PUSH
11502: LD_INT 4
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: PUSH
11509: LD_INT 25
11511: PUSH
11512: LD_INT 5
11514: PUSH
11515: EMPTY
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 25
11521: PUSH
11522: LD_INT 8
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: EMPTY
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: PUSH
11538: EMPTY
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: PPUSH
11544: CALL_OW 69
11548: PPUSH
11549: LD_STRING DT3-Sol1-1
11551: PPUSH
11552: LD_STRING DT3-FSol1-1
11554: PPUSH
11555: CALL 12642 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11559: LD_EXP 1
11563: PPUSH
11564: LD_STRING DT3-JMM-1
11566: PPUSH
11567: CALL_OW 88
// DialogueOff ;
11571: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11575: LD_STRING M2
11577: PPUSH
11578: CALL_OW 337
// end ;
11582: END
// every 0 0$1 trigger ruEscape = 0 and ( FilterUnitsInArea ( RuEastBase , [ f_side , 1 ] ) or FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_not , [ f_lives , 800 ] ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ) or GetLives ( rutp ) < 900 do
11583: LD_EXP 35
11587: PUSH
11588: LD_INT 0
11590: EQUAL
11591: PUSH
11592: LD_INT 10
11594: PPUSH
11595: LD_INT 22
11597: PUSH
11598: LD_INT 1
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: PPUSH
11605: CALL_OW 70
11609: PUSH
11610: LD_INT 10
11612: PPUSH
11613: LD_INT 22
11615: PUSH
11616: LD_INT 3
11618: PUSH
11619: EMPTY
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 3
11625: PUSH
11626: LD_INT 24
11628: PUSH
11629: LD_INT 800
11631: PUSH
11632: EMPTY
11633: LIST
11634: LIST
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: LD_INT 21
11642: PUSH
11643: LD_INT 2
11645: PUSH
11646: EMPTY
11647: LIST
11648: LIST
11649: PUSH
11650: LD_INT 58
11652: PUSH
11653: EMPTY
11654: LIST
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: PPUSH
11662: CALL_OW 70
11666: OR
11667: AND
11668: PUSH
11669: LD_INT 137
11671: PPUSH
11672: CALL_OW 256
11676: PUSH
11677: LD_INT 900
11679: LESS
11680: OR
11681: IFFALSE 11694
11683: GO 11685
11685: DISABLE
// ruEscape := 1 ;
11686: LD_ADDR_EXP 35
11690: PUSH
11691: LD_INT 1
11693: ST_TO_ADDR
11694: END
// every 0 0$3 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or ruEscape = 1 do var i , unit , tmp ;
11695: LD_INT 3
11697: PPUSH
11698: CALL_OW 303
11702: PUSH
11703: LD_INT 4
11705: PPUSH
11706: CALL_OW 303
11710: OR
11711: PUSH
11712: LD_EXP 35
11716: PUSH
11717: LD_INT 1
11719: EQUAL
11720: OR
11721: IFFALSE 12310
11723: GO 11725
11725: DISABLE
11726: LD_INT 0
11728: PPUSH
11729: PPUSH
11730: PPUSH
// begin ruAI := 0 ;
11731: LD_ADDR_EXP 34
11735: PUSH
11736: LD_INT 0
11738: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11739: LD_EXP 27
11743: PPUSH
11744: CALL_OW 122
// wait ( 0 0$1 ) ;
11748: LD_INT 35
11750: PPUSH
11751: CALL_OW 67
// DialogueOn ;
11755: CALL_OW 6
// PlaceSeeing ( 75 , 21 , 1 , 12 ) ;
11759: LD_INT 75
11761: PPUSH
11762: LD_INT 21
11764: PPUSH
11765: LD_INT 1
11767: PPUSH
11768: LD_INT 12
11770: PPUSH
11771: CALL_OW 330
// CenterNowOnXY ( 75 , 21 ) ;
11775: LD_INT 75
11777: PPUSH
11778: LD_INT 21
11780: PPUSH
11781: CALL_OW 86
// dwait ( 0 0$0.3 ) ;
11785: LD_INT 10
11787: PPUSH
11788: CALL_OW 68
// Say ( JMM , D6-JMM-1 ) ;
11792: LD_EXP 1
11796: PPUSH
11797: LD_STRING D6-JMM-1
11799: PPUSH
11800: CALL_OW 88
// RemoveSeeing ( 75 , 21 , 1 ) ;
11804: LD_INT 75
11806: PPUSH
11807: LD_INT 21
11809: PPUSH
11810: LD_INT 1
11812: PPUSH
11813: CALL_OW 331
// DialogueOff ;
11817: CALL_OW 7
// for i in RuScientists do
11821: LD_ADDR_VAR 0 1
11825: PUSH
11826: LD_EXP 27
11830: PUSH
11831: FOR_IN
11832: IFFALSE 11868
// begin SetSide ( i , 6 ) ;
11834: LD_VAR 0 1
11838: PPUSH
11839: LD_INT 6
11841: PPUSH
11842: CALL_OW 235
// SetTag ( i , rand ( 1 , 3 ) ) ;
11846: LD_VAR 0 1
11850: PPUSH
11851: LD_INT 1
11853: PPUSH
11854: LD_INT 3
11856: PPUSH
11857: CALL_OW 12
11861: PPUSH
11862: CALL_OW 109
// end ;
11866: GO 11831
11868: POP
11869: POP
// repeat wait ( 0 0$1 ) ;
11870: LD_INT 35
11872: PPUSH
11873: CALL_OW 67
// for i in RuScientists do
11877: LD_ADDR_VAR 0 1
11881: PUSH
11882: LD_EXP 27
11886: PUSH
11887: FOR_IN
11888: IFFALSE 12301
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_dist , i , 10 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11890: LD_ADDR_VAR 0 3
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_INT 3
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 91
11907: PUSH
11908: LD_VAR 0 1
11912: PUSH
11913: LD_INT 10
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 21
11923: PUSH
11924: LD_INT 2
11926: PUSH
11927: EMPTY
11928: LIST
11929: LIST
11930: PUSH
11931: LD_INT 58
11933: PUSH
11934: EMPTY
11935: LIST
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: LIST
11941: LIST
11942: PPUSH
11943: CALL_OW 69
11947: ST_TO_ADDR
// if tmp and not IsInUnit ( i ) then
11948: LD_VAR 0 3
11952: PUSH
11953: LD_VAR 0 1
11957: PPUSH
11958: CALL_OW 310
11962: NOT
11963: AND
11964: IFFALSE 11992
// begin ComEnterUnit ( i , NearestUnitToUnit ( tmp , i ) ) ;
11966: LD_VAR 0 1
11970: PPUSH
11971: LD_VAR 0 3
11975: PPUSH
11976: LD_VAR 0 1
11980: PPUSH
11981: CALL_OW 74
11985: PPUSH
11986: CALL_OW 120
// continue ;
11990: GO 11887
// end ; if IsInUnit ( i ) then
11992: LD_VAR 0 1
11996: PPUSH
11997: CALL_OW 310
12001: IFFALSE 12020
// unit := IsInUnit ( i ) else
12003: LD_ADDR_VAR 0 2
12007: PUSH
12008: LD_VAR 0 1
12012: PPUSH
12013: CALL_OW 310
12017: ST_TO_ADDR
12018: GO 12030
// unit := i ;
12020: LD_ADDR_VAR 0 2
12024: PUSH
12025: LD_VAR 0 1
12029: ST_TO_ADDR
// case GetTag ( i ) of 1 :
12030: LD_VAR 0 1
12034: PPUSH
12035: CALL_OW 110
12039: PUSH
12040: LD_INT 1
12042: DOUBLE
12043: EQUAL
12044: IFTRUE 12048
12046: GO 12107
12048: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12049: LD_VAR 0 2
12053: PPUSH
12054: LD_INT 137
12056: PPUSH
12057: CALL_OW 296
12061: PUSH
12062: LD_INT 13
12064: LESS
12065: PUSH
12066: LD_INT 137
12068: PPUSH
12069: CALL_OW 302
12073: AND
12074: IFFALSE 12090
// ComEnterUnit ( unit , rutp ) else
12076: LD_VAR 0 2
12080: PPUSH
12081: LD_INT 137
12083: PPUSH
12084: CALL_OW 120
12088: GO 12105
// ComMoveXY ( unit , 16 , 28 ) ;
12090: LD_VAR 0 2
12094: PPUSH
12095: LD_INT 16
12097: PPUSH
12098: LD_INT 28
12100: PPUSH
12101: CALL_OW 111
// end ; 2 :
12105: GO 12299
12107: LD_INT 2
12109: DOUBLE
12110: EQUAL
12111: IFTRUE 12115
12113: GO 12133
12115: POP
// ComMoveXY ( unit , 97 , 2 ) ; 3 :
12116: LD_VAR 0 2
12120: PPUSH
12121: LD_INT 97
12123: PPUSH
12124: LD_INT 2
12126: PPUSH
12127: CALL_OW 111
12131: GO 12299
12133: LD_INT 3
12135: DOUBLE
12136: EQUAL
12137: IFTRUE 12141
12139: GO 12200
12141: POP
// begin if GetDistUnits ( unit , rutp ) < 13 and IsOk ( rutp ) then
12142: LD_VAR 0 2
12146: PPUSH
12147: LD_INT 137
12149: PPUSH
12150: CALL_OW 296
12154: PUSH
12155: LD_INT 13
12157: LESS
12158: PUSH
12159: LD_INT 137
12161: PPUSH
12162: CALL_OW 302
12166: AND
12167: IFFALSE 12183
// ComEnterUnit ( unit , rutp ) else
12169: LD_VAR 0 2
12173: PPUSH
12174: LD_INT 137
12176: PPUSH
12177: CALL_OW 120
12181: GO 12198
// ComMoveXY ( unit , 128 , 155 ) ;
12183: LD_VAR 0 2
12187: PPUSH
12188: LD_INT 128
12190: PPUSH
12191: LD_INT 155
12193: PPUSH
12194: CALL_OW 111
// end ; 11 :
12198: GO 12299
12200: LD_INT 11
12202: DOUBLE
12203: EQUAL
12204: IFTRUE 12208
12206: GO 12226
12208: POP
// ComMoveXY ( unit , 16 , 28 ) ; 13 :
12209: LD_VAR 0 2
12213: PPUSH
12214: LD_INT 16
12216: PPUSH
12217: LD_INT 28
12219: PPUSH
12220: CALL_OW 111
12224: GO 12299
12226: LD_INT 13
12228: DOUBLE
12229: EQUAL
12230: IFTRUE 12234
12232: GO 12272
12234: POP
// begin if IsOk ( ruteleprt ) then
12235: LD_INT 10
12237: PPUSH
12238: CALL_OW 302
12242: IFFALSE 12258
// ComEnterUnit ( unit , ruteleprt ) else
12244: LD_VAR 0 2
12248: PPUSH
12249: LD_INT 10
12251: PPUSH
12252: CALL_OW 120
12256: GO 12270
// SetTag ( unit , 23 ) ;
12258: LD_VAR 0 2
12262: PPUSH
12263: LD_INT 23
12265: PPUSH
12266: CALL_OW 109
// end ; 23 :
12270: GO 12299
12272: LD_INT 23
12274: DOUBLE
12275: EQUAL
12276: IFTRUE 12280
12278: GO 12298
12280: POP
// ComMoveXY ( unit , 128 , 155 ) ; end ;
12281: LD_VAR 0 2
12285: PPUSH
12286: LD_INT 128
12288: PPUSH
12289: LD_INT 155
12291: PPUSH
12292: CALL_OW 111
12296: GO 12299
12298: POP
// end ;
12299: GO 11887
12301: POP
12302: POP
// until not RuScientists ;
12303: LD_EXP 27
12307: NOT
12308: IFFALSE 11870
// end ;
12310: PPOPN 3
12312: END
// every 0 0$1 trigger ruAI = 0 and RuScientists and FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do var i , unit , veh , tmp ;
12313: LD_EXP 34
12317: PUSH
12318: LD_INT 0
12320: EQUAL
12321: PUSH
12322: LD_EXP 27
12326: AND
12327: PUSH
12328: LD_INT 22
12330: PUSH
12331: LD_INT 6
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: PUSH
12338: LD_INT 2
12340: PUSH
12341: LD_INT 95
12343: PUSH
12344: LD_INT 13
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PUSH
12351: LD_INT 95
12353: PUSH
12354: LD_INT 14
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 95
12363: PUSH
12364: LD_INT 25
12366: PUSH
12367: EMPTY
12368: LIST
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: EMPTY
12378: LIST
12379: LIST
12380: PPUSH
12381: CALL_OW 69
12385: AND
12386: IFFALSE 12599
12388: GO 12390
12390: DISABLE
12391: LD_INT 0
12393: PPUSH
12394: PPUSH
12395: PPUSH
12396: PPUSH
// begin enable ;
12397: ENABLE
// for i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] , [ f_inarea , EscapeArea3 ] ] ] ) do
12398: LD_ADDR_VAR 0 1
12402: PUSH
12403: LD_INT 22
12405: PUSH
12406: LD_INT 6
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: LD_INT 2
12415: PUSH
12416: LD_INT 95
12418: PUSH
12419: LD_INT 13
12421: PUSH
12422: EMPTY
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 95
12428: PUSH
12429: LD_INT 14
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: PUSH
12436: LD_INT 95
12438: PUSH
12439: LD_INT 25
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: PPUSH
12456: CALL_OW 69
12460: PUSH
12461: FOR_IN
12462: IFFALSE 12597
// begin if i in RuScientists then
12464: LD_VAR 0 1
12468: PUSH
12469: LD_EXP 27
12473: IN
12474: IFFALSE 12503
// begin RuScientists = RuScientists diff i ;
12476: LD_ADDR_EXP 27
12480: PUSH
12481: LD_EXP 27
12485: PUSH
12486: LD_VAR 0 1
12490: DIFF
12491: ST_TO_ADDR
// RemoveUnit ( i ) ;
12492: LD_VAR 0 1
12496: PPUSH
12497: CALL_OW 64
// continue ;
12501: GO 12461
// end ; if i in FilterAllUnits ( [ [ f_side , 6 ] , [ f_control , control_manual ] ] ) then
12503: LD_VAR 0 1
12507: PUSH
12508: LD_INT 22
12510: PUSH
12511: LD_INT 6
12513: PUSH
12514: EMPTY
12515: LIST
12516: LIST
12517: PUSH
12518: LD_INT 33
12520: PUSH
12521: LD_INT 1
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: PPUSH
12532: CALL_OW 69
12536: IN
12537: IFFALSE 12595
// begin if IsDrivenBy ( i ) in RuScientists then
12539: LD_VAR 0 1
12543: PPUSH
12544: CALL_OW 311
12548: PUSH
12549: LD_EXP 27
12553: IN
12554: IFFALSE 12572
// RuScientists = RuScientists diff i ;
12556: LD_ADDR_EXP 27
12560: PUSH
12561: LD_EXP 27
12565: PUSH
12566: LD_VAR 0 1
12570: DIFF
12571: ST_TO_ADDR
// RemoveUnit ( IsDrivenBy ( i ) ) ;
12572: LD_VAR 0 1
12576: PPUSH
12577: CALL_OW 311
12581: PPUSH
12582: CALL_OW 64
// RemoveUnit ( i ) ;
12586: LD_VAR 0 1
12590: PPUSH
12591: CALL_OW 64
// end ; end ;
12595: GO 12461
12597: POP
12598: POP
// end ; end_of_file
12599: PPOPN 4
12601: END
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12602: LD_INT 0
12604: PPUSH
12605: PPUSH
// for i in charactersList do
12606: LD_ADDR_VAR 0 4
12610: PUSH
12611: LD_VAR 0 1
12615: PUSH
12616: FOR_IN
12617: IFFALSE 12635
// SaveCharacters ( i , ident ) ;
12619: LD_VAR 0 4
12623: PPUSH
12624: LD_VAR 0 2
12628: PPUSH
12629: CALL_OW 38
12633: GO 12616
12635: POP
12636: POP
// end ;
12637: LD_VAR 0 3
12641: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12642: LD_INT 0
12644: PPUSH
12645: PPUSH
12646: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12647: LD_ADDR_VAR 0 1
12651: PUSH
12652: LD_VAR 0 1
12656: PUSH
12657: LD_EXP 1
12661: PUSH
12662: LD_EXP 7
12666: PUSH
12667: LD_EXP 3
12671: PUSH
12672: LD_EXP 4
12676: PUSH
12677: LD_EXP 5
12681: PUSH
12682: LD_EXP 2
12686: PUSH
12687: LD_EXP 12
12691: PUSH
12692: LD_EXP 13
12696: PUSH
12697: LD_EXP 9
12701: PUSH
12702: LD_EXP 11
12706: PUSH
12707: LD_EXP 6
12711: PUSH
12712: LD_EXP 8
12716: PUSH
12717: LD_EXP 10
12721: PUSH
12722: LD_EXP 15
12726: PUSH
12727: EMPTY
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: DIFF
12743: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12744: LD_ADDR_VAR 0 6
12748: PUSH
12749: LD_VAR 0 1
12753: PUSH
12754: LD_INT 1
12756: PPUSH
12757: LD_VAR 0 1
12761: PPUSH
12762: CALL_OW 12
12766: ARRAY
12767: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12768: LD_VAR 0 6
12772: PPUSH
12773: CALL_OW 258
12777: PUSH
12778: LD_INT 1
12780: EQUAL
12781: IFFALSE 12799
// Say ( speaker , dialogMID ) else
12783: LD_VAR 0 6
12787: PPUSH
12788: LD_VAR 0 2
12792: PPUSH
12793: CALL_OW 88
12797: GO 12813
// Say ( speaker , dialogFID ) ;
12799: LD_VAR 0 6
12803: PPUSH
12804: LD_VAR 0 3
12808: PPUSH
12809: CALL_OW 88
// result := speaker ;
12813: LD_ADDR_VAR 0 4
12817: PUSH
12818: LD_VAR 0 6
12822: ST_TO_ADDR
// end ;
12823: LD_VAR 0 4
12827: RET
// export function PrepareDifficulty ; var tmp ; begin
12828: LD_INT 0
12830: PPUSH
12831: PPUSH
// if Difficulty = 1 then
12832: LD_OWVAR 67
12836: PUSH
12837: LD_INT 1
12839: EQUAL
12840: IFFALSE 12860
// begin RuSolMinLevel = 6 ;
12842: LD_ADDR_EXP 29
12846: PUSH
12847: LD_INT 6
12849: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
12850: LD_ADDR_EXP 30
12854: PUSH
12855: LD_INT 8
12857: ST_TO_ADDR
// end else
12858: GO 13100
// if Difficulty = 2 then
12860: LD_OWVAR 67
12864: PUSH
12865: LD_INT 2
12867: EQUAL
12868: IFFALSE 12964
// begin RuSolMinLevel = 7 ;
12870: LD_ADDR_EXP 29
12874: PUSH
12875: LD_INT 7
12877: ST_TO_ADDR
// RuSolMaxLevel = 9 ;
12878: LD_ADDR_EXP 30
12882: PUSH
12883: LD_INT 9
12885: ST_TO_ADDR
// uc_nation = 3 ;
12886: LD_ADDR_OWVAR 21
12890: PUSH
12891: LD_INT 3
12893: ST_TO_ADDR
// uc_side = 3 ;
12894: LD_ADDR_OWVAR 20
12898: PUSH
12899: LD_INT 3
12901: ST_TO_ADDR
// bc_level = 10 ;
12902: LD_ADDR_OWVAR 43
12906: PUSH
12907: LD_INT 10
12909: ST_TO_ADDR
// bc_type = b_turret ;
12910: LD_ADDR_OWVAR 42
12914: PUSH
12915: LD_INT 33
12917: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12918: LD_ADDR_VAR 0 2
12922: PUSH
12923: LD_INT 86
12925: PPUSH
12926: LD_INT 34
12928: PPUSH
12929: LD_INT 2
12931: PPUSH
12932: CALL_OW 47
12936: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12937: LD_VAR 0 2
12941: PPUSH
12942: LD_INT 49
12944: PPUSH
12945: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12949: LD_INT 64
12951: PPUSH
12952: LD_INT 3
12954: PPUSH
12955: LD_INT 1
12957: PPUSH
12958: CALL_OW 322
// end else
12962: GO 13100
// begin RuSolMinLevel = 8 ;
12964: LD_ADDR_EXP 29
12968: PUSH
12969: LD_INT 8
12971: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12972: LD_ADDR_EXP 30
12976: PUSH
12977: LD_INT 10
12979: ST_TO_ADDR
// uc_nation = 3 ;
12980: LD_ADDR_OWVAR 21
12984: PUSH
12985: LD_INT 3
12987: ST_TO_ADDR
// uc_side = 3 ;
12988: LD_ADDR_OWVAR 20
12992: PUSH
12993: LD_INT 3
12995: ST_TO_ADDR
// bc_level = 10 ;
12996: LD_ADDR_OWVAR 43
13000: PUSH
13001: LD_INT 10
13003: ST_TO_ADDR
// bc_type = b_turret ;
13004: LD_ADDR_OWVAR 42
13008: PUSH
13009: LD_INT 33
13011: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
13012: LD_ADDR_VAR 0 2
13016: PUSH
13017: LD_INT 86
13019: PPUSH
13020: LD_INT 34
13022: PPUSH
13023: LD_INT 2
13025: PPUSH
13026: CALL_OW 47
13030: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13031: LD_VAR 0 2
13035: PPUSH
13036: LD_INT 49
13038: PPUSH
13039: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
13043: LD_ADDR_VAR 0 2
13047: PUSH
13048: LD_INT 93
13050: PPUSH
13051: LD_INT 31
13053: PPUSH
13054: LD_INT 2
13056: PPUSH
13057: CALL_OW 47
13061: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
13062: LD_VAR 0 2
13066: PPUSH
13067: LD_INT 49
13069: PPUSH
13070: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
13074: LD_INT 64
13076: PPUSH
13077: LD_INT 3
13079: PPUSH
13080: LD_INT 1
13082: PPUSH
13083: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
13087: LD_INT 65
13089: PPUSH
13090: LD_INT 3
13092: PPUSH
13093: LD_INT 1
13095: PPUSH
13096: CALL_OW 322
// end ; end ;
13100: LD_VAR 0 1
13104: RET
// export function ShowQuery1 ; begin
13105: LD_INT 0
13107: PPUSH
// result := Query ( Q1 ) ;
13108: LD_ADDR_VAR 0 1
13112: PUSH
13113: LD_STRING Q1
13115: PPUSH
13116: CALL_OW 97
13120: ST_TO_ADDR
// end ;
13121: LD_VAR 0 1
13125: RET
// export function ShowQuery2 ; begin
13126: LD_INT 0
13128: PPUSH
// result := Query ( Q1a ) ;
13129: LD_ADDR_VAR 0 1
13133: PUSH
13134: LD_STRING Q1a
13136: PPUSH
13137: CALL_OW 97
13141: ST_TO_ADDR
// end ;
13142: LD_VAR 0 1
13146: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un ; begin
13147: LD_INT 0
13149: PPUSH
13150: PPUSH
13151: PPUSH
13152: PPUSH
// for i = 1 to count do
13153: LD_ADDR_VAR 0 8
13157: PUSH
13158: DOUBLE
13159: LD_INT 1
13161: DEC
13162: ST_TO_ADDR
13163: LD_VAR 0 6
13167: PUSH
13168: FOR_TO
13169: IFFALSE 13250
// begin uc_side = side ;
13171: LD_ADDR_OWVAR 20
13175: PUSH
13176: LD_VAR 0 1
13180: ST_TO_ADDR
// uc_nation = nation ;
13181: LD_ADDR_OWVAR 21
13185: PUSH
13186: LD_VAR 0 2
13190: ST_TO_ADDR
// hc_gallery =  ;
13191: LD_ADDR_OWVAR 33
13195: PUSH
13196: LD_STRING 
13198: ST_TO_ADDR
// hc_name =  ;
13199: LD_ADDR_OWVAR 26
13203: PUSH
13204: LD_STRING 
13206: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
13207: LD_INT 0
13209: PPUSH
13210: LD_VAR 0 5
13214: PPUSH
13215: LD_VAR 0 4
13219: PPUSH
13220: CALL_OW 380
// un = CreateHuman ;
13224: LD_ADDR_VAR 0 10
13228: PUSH
13229: CALL_OW 44
13233: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
13234: LD_VAR 0 10
13238: PPUSH
13239: LD_VAR 0 3
13243: PPUSH
13244: CALL_OW 52
// end ;
13248: GO 13168
13250: POP
13251: POP
// end ;
13252: LD_VAR 0 7
13256: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , list ; begin
13257: LD_INT 0
13259: PPUSH
13260: PPUSH
13261: PPUSH
// list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
13262: LD_ADDR_VAR 0 6
13266: PUSH
13267: LD_INT 48
13269: PUSH
13270: LD_INT 49
13272: PUSH
13273: LD_INT 50
13275: PUSH
13276: LD_INT 20
13278: PUSH
13279: LD_INT 1
13281: PUSH
13282: LD_INT 51
13284: PUSH
13285: LD_INT 52
13287: PUSH
13288: LD_INT 69
13290: PUSH
13291: LD_INT 39
13293: PUSH
13294: LD_INT 34
13296: PUSH
13297: LD_INT 40
13299: PUSH
13300: LD_INT 53
13302: PUSH
13303: LD_INT 71
13305: PUSH
13306: LD_INT 57
13308: PUSH
13309: LD_INT 58
13311: PUSH
13312: LD_INT 44
13314: PUSH
13315: LD_INT 32
13317: PUSH
13318: LD_INT 27
13320: PUSH
13321: LD_INT 23
13323: PUSH
13324: LD_INT 33
13326: PUSH
13327: LD_INT 59
13329: PUSH
13330: LD_INT 54
13332: PUSH
13333: LD_INT 55
13335: PUSH
13336: LD_INT 56
13338: PUSH
13339: LD_INT 63
13341: PUSH
13342: LD_INT 64
13344: PUSH
13345: LD_INT 65
13347: PUSH
13348: LD_INT 30
13350: PUSH
13351: LD_INT 31
13353: PUSH
13354: LD_INT 21
13356: PUSH
13357: LD_INT 22
13359: PUSH
13360: LD_INT 25
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: LIST
13396: ST_TO_ADDR
// for i := 1 to list do
13397: LD_ADDR_VAR 0 5
13401: PUSH
13402: DOUBLE
13403: LD_INT 1
13405: DEC
13406: ST_TO_ADDR
13407: LD_VAR 0 6
13411: PUSH
13412: FOR_TO
13413: IFFALSE 13485
// if GetTech ( list [ i ] , side ) = state_enabled and TechNationAvailable ( list [ i ] , nation ) then
13415: LD_VAR 0 6
13419: PUSH
13420: LD_VAR 0 5
13424: ARRAY
13425: PPUSH
13426: LD_VAR 0 1
13430: PPUSH
13431: CALL_OW 321
13435: PUSH
13436: LD_INT 1
13438: EQUAL
13439: PUSH
13440: LD_VAR 0 6
13444: PUSH
13445: LD_VAR 0 5
13449: ARRAY
13450: PPUSH
13451: LD_VAR 0 3
13455: PPUSH
13456: CALL_OW 482
13460: AND
13461: IFFALSE 13483
// AddComResearch ( lab , list [ i ] ) ;
13463: LD_VAR 0 2
13467: PPUSH
13468: LD_VAR 0 6
13472: PUSH
13473: LD_VAR 0 5
13477: ARRAY
13478: PPUSH
13479: CALL_OW 184
13483: GO 13412
13485: POP
13486: POP
// end ;
13487: LD_VAR 0 4
13491: RET
// export function RepairAndRebuildBase ( side , depot , area , destroyedBuildings ) ; var buildingsList , i , engineerOkInside , engineerOkOutside , j ; begin
13492: LD_INT 0
13494: PPUSH
13495: PPUSH
13496: PPUSH
13497: PPUSH
13498: PPUSH
13499: PPUSH
// engineerOkInside := UnitsInside ( depot ) ;
13500: LD_ADDR_VAR 0 8
13504: PUSH
13505: LD_VAR 0 2
13509: PPUSH
13510: CALL_OW 313
13514: ST_TO_ADDR
// engineerOkOutside := FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13515: LD_ADDR_VAR 0 9
13519: PUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: LD_INT 22
13527: PUSH
13528: LD_VAR 0 1
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: PUSH
13537: LD_INT 25
13539: PUSH
13540: LD_INT 2
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 24
13549: PUSH
13550: LD_INT 750
13552: PUSH
13553: EMPTY
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 3
13559: PUSH
13560: LD_INT 54
13562: PUSH
13563: EMPTY
13564: LIST
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: PPUSH
13576: CALL_OW 70
13580: ST_TO_ADDR
// buildingsList := FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13581: LD_ADDR_VAR 0 6
13585: PUSH
13586: LD_VAR 0 3
13590: PPUSH
13591: LD_INT 22
13593: PUSH
13594: LD_VAR 0 1
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 21
13605: PUSH
13606: LD_INT 3
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 3
13615: PUSH
13616: LD_INT 24
13618: PUSH
13619: LD_INT 1000
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: EMPTY
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: PUSH
13635: EMPTY
13636: LIST
13637: PPUSH
13638: CALL_OW 70
13642: ST_TO_ADDR
// if not buildingsList and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13643: LD_VAR 0 6
13647: NOT
13648: PUSH
13649: LD_INT 22
13651: PUSH
13652: LD_VAR 0 1
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: PUSH
13661: LD_INT 25
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 24
13673: PUSH
13674: LD_INT 250
13676: PUSH
13677: EMPTY
13678: LIST
13679: LIST
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: LIST
13685: PPUSH
13686: CALL_OW 69
13690: NOT
13691: AND
13692: IFFALSE 13696
// exit ;
13694: GO 13854
// if buildingsList and engineerOkInside then
13696: LD_VAR 0 6
13700: PUSH
13701: LD_VAR 0 8
13705: AND
13706: IFFALSE 13717
// ComExitBuilding ( engineerOkInside ) ;
13708: LD_VAR 0 8
13712: PPUSH
13713: CALL_OW 122
// if buildingsList and engineerOkOutside then
13717: LD_VAR 0 6
13721: PUSH
13722: LD_VAR 0 9
13726: AND
13727: IFFALSE 13747
// ComRepairBuilding ( engineerOkOutside , buildingsList [ 1 ] ) ;
13729: LD_VAR 0 9
13733: PPUSH
13734: LD_VAR 0 6
13738: PUSH
13739: LD_INT 1
13741: ARRAY
13742: PPUSH
13743: CALL_OW 130
// if buildingsList = 0 and destroyedBuildings = 0 and engineerOkOutside then
13747: LD_VAR 0 6
13751: PUSH
13752: LD_INT 0
13754: EQUAL
13755: PUSH
13756: LD_VAR 0 4
13760: PUSH
13761: LD_INT 0
13763: EQUAL
13764: AND
13765: PUSH
13766: LD_VAR 0 9
13770: AND
13771: IFFALSE 13787
// ComEnterUnit ( engineerOkOutside , depot ) ;
13773: LD_VAR 0 9
13777: PPUSH
13778: LD_VAR 0 2
13782: PPUSH
13783: CALL_OW 120
// if engineerOkOutside and buildingsList = 0 and destroyedBuildings then
13787: LD_VAR 0 9
13791: PUSH
13792: LD_VAR 0 6
13796: PUSH
13797: LD_INT 0
13799: EQUAL
13800: AND
13801: PUSH
13802: LD_VAR 0 4
13806: AND
13807: IFFALSE 13854
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13809: LD_VAR 0 9
13813: PPUSH
13814: LD_VAR 0 4
13818: PUSH
13819: LD_INT 1
13821: ARRAY
13822: PPUSH
13823: LD_VAR 0 4
13827: PUSH
13828: LD_INT 2
13830: ARRAY
13831: PPUSH
13832: LD_VAR 0 4
13836: PUSH
13837: LD_INT 3
13839: ARRAY
13840: PPUSH
13841: LD_VAR 0 4
13845: PUSH
13846: LD_INT 4
13848: ARRAY
13849: PPUSH
13850: CALL_OW 145
// end ;
13854: LD_VAR 0 5
13858: RET
// export function HealUnitInBase ( side , healArea , baseArea , buildings ) ; var sciList , sciListOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13859: LD_INT 0
13861: PPUSH
13862: PPUSH
13863: PPUSH
13864: PPUSH
13865: PPUSH
13866: PPUSH
13867: PPUSH
13868: PPUSH
13869: PPUSH
// sciList = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13870: LD_ADDR_VAR 0 6
13874: PUSH
13875: LD_INT 22
13877: PUSH
13878: LD_VAR 0 1
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 25
13889: PUSH
13890: LD_INT 4
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 24
13899: PUSH
13900: LD_INT 251
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: LIST
13911: PPUSH
13912: CALL_OW 69
13916: PUSH
13917: LD_EXP 27
13921: PUSH
13922: EMPTY
13923: LIST
13924: DIFF
13925: ST_TO_ADDR
// sciListOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_outside ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13926: LD_ADDR_VAR 0 7
13930: PUSH
13931: LD_VAR 0 3
13935: PPUSH
13936: LD_INT 22
13938: PUSH
13939: LD_VAR 0 1
13943: PUSH
13944: EMPTY
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 56
13950: PUSH
13951: EMPTY
13952: LIST
13953: PUSH
13954: LD_INT 25
13956: PUSH
13957: LD_INT 4
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: LD_INT 50
13966: PUSH
13967: EMPTY
13968: LIST
13969: PUSH
13970: EMPTY
13971: LIST
13972: LIST
13973: LIST
13974: LIST
13975: PPUSH
13976: CALL_OW 70
13980: PUSH
13981: LD_EXP 27
13985: PUSH
13986: EMPTY
13987: LIST
13988: DIFF
13989: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13990: LD_ADDR_VAR 0 10
13994: PUSH
13995: LD_VAR 0 3
13999: PPUSH
14000: LD_INT 22
14002: PUSH
14003: LD_VAR 0 1
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 21
14014: PUSH
14015: LD_INT 1
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: LD_INT 3
14024: PUSH
14025: LD_INT 24
14027: PUSH
14028: LD_INT 750
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: PPUSH
14044: CALL_OW 70
14048: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14049: LD_ADDR_VAR 0 11
14053: PUSH
14054: LD_VAR 0 2
14058: PPUSH
14059: LD_INT 22
14061: PUSH
14062: LD_VAR 0 1
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 21
14073: PUSH
14074: LD_INT 1
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: PUSH
14081: LD_INT 3
14083: PUSH
14084: LD_INT 24
14086: PUSH
14087: LD_INT 1000
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: LIST
14102: PPUSH
14103: CALL_OW 70
14107: ST_TO_ADDR
// if damageUnits and sciList then
14108: LD_VAR 0 10
14112: PUSH
14113: LD_VAR 0 6
14117: AND
14118: IFFALSE 14134
// ComMoveToArea ( damageUnits , healArea ) ;
14120: LD_VAR 0 10
14124: PPUSH
14125: LD_VAR 0 2
14129: PPUSH
14130: CALL_OW 113
// if unitsToHeal and sciList and sciListOutside = 0 then
14134: LD_VAR 0 11
14138: PUSH
14139: LD_VAR 0 6
14143: AND
14144: PUSH
14145: LD_VAR 0 7
14149: PUSH
14150: LD_INT 0
14152: EQUAL
14153: AND
14154: IFFALSE 14200
// for i in buildings do
14156: LD_ADDR_VAR 0 8
14160: PUSH
14161: LD_VAR 0 4
14165: PUSH
14166: FOR_IN
14167: IFFALSE 14198
// begin if UnitsInside ( i ) then
14169: LD_VAR 0 8
14173: PPUSH
14174: CALL_OW 313
14178: IFFALSE 14196
// begin ComExitBuilding ( UnitsInside ( i ) ) ;
14180: LD_VAR 0 8
14184: PPUSH
14185: CALL_OW 313
14189: PPUSH
14190: CALL_OW 122
// break ;
14194: GO 14198
// end ; end ;
14196: GO 14166
14198: POP
14199: POP
// if unitsToHeal and sciListOutside then
14200: LD_VAR 0 11
14204: PUSH
14205: LD_VAR 0 7
14209: AND
14210: IFFALSE 14230
// ComHeal ( sciListOutside , unitsToHeal [ 1 ] ) ;
14212: LD_VAR 0 7
14216: PPUSH
14217: LD_VAR 0 11
14221: PUSH
14222: LD_INT 1
14224: ARRAY
14225: PPUSH
14226: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sciListOutside then
14230: LD_VAR 0 10
14234: PUSH
14235: LD_INT 0
14237: EQUAL
14238: PUSH
14239: LD_VAR 0 11
14243: PUSH
14244: LD_INT 0
14246: EQUAL
14247: AND
14248: PUSH
14249: LD_VAR 0 7
14253: AND
14254: IFFALSE 14322
// begin tmp := buildings ;
14256: LD_ADDR_VAR 0 12
14260: PUSH
14261: LD_VAR 0 4
14265: ST_TO_ADDR
// rnd := rand ( 1 , tmp ) ;
14266: LD_ADDR_VAR 0 13
14270: PUSH
14271: LD_INT 1
14273: PPUSH
14274: LD_VAR 0 12
14278: PPUSH
14279: CALL_OW 12
14283: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sciListOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
14284: LD_VAR 0 7
14288: PPUSH
14289: LD_INT 3
14291: PUSH
14292: LD_INT 60
14294: PUSH
14295: EMPTY
14296: LIST
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: PPUSH
14302: CALL_OW 72
14306: PPUSH
14307: LD_VAR 0 12
14311: PUSH
14312: LD_VAR 0 13
14316: ARRAY
14317: PPUSH
14318: CALL_OW 120
// end ; end ;
14322: LD_VAR 0 5
14326: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
14334: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14335: LD_ADDR_VAR 0 7
14339: PUSH
14340: LD_VAR 0 2
14344: PPUSH
14345: LD_INT 22
14347: PUSH
14348: LD_VAR 0 1
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 21
14359: PUSH
14360: LD_INT 2
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 34
14369: PUSH
14370: LD_INT 52
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: PPUSH
14382: CALL_OW 70
14386: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14387: LD_ADDR_VAR 0 8
14391: PUSH
14392: LD_VAR 0 2
14396: PPUSH
14397: LD_INT 22
14399: PUSH
14400: LD_VAR 0 1
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 21
14411: PUSH
14412: LD_INT 3
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 3
14421: PUSH
14422: LD_INT 24
14424: PUSH
14425: LD_INT 1000
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: PUSH
14441: EMPTY
14442: LIST
14443: PPUSH
14444: CALL_OW 70
14448: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14449: LD_VAR 0 8
14453: PUSH
14454: LD_INT 0
14456: GREATER
14457: PUSH
14458: LD_VAR 0 7
14462: PPUSH
14463: LD_INT 24
14465: PUSH
14466: LD_INT 750
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PPUSH
14473: CALL_OW 72
14477: PUSH
14478: LD_INT 0
14480: GREATER
14481: AND
14482: IFFALSE 14502
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14484: LD_VAR 0 7
14488: PPUSH
14489: LD_VAR 0 8
14493: PUSH
14494: LD_INT 1
14496: ARRAY
14497: PPUSH
14498: CALL_OW 130
// end ;
14502: LD_VAR 0 3
14506: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14507: LD_INT 0
14509: PPUSH
14510: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14511: LD_INT 22
14513: PUSH
14514: LD_VAR 0 1
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: LD_INT 21
14525: PUSH
14526: LD_INT 2
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PPUSH
14537: CALL_OW 69
14541: PUSH
14542: LD_INT 18
14544: PPUSH
14545: LD_INT 22
14547: PUSH
14548: LD_VAR 0 1
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 2
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PPUSH
14571: CALL_OW 70
14575: PUSH
14576: LD_VAR 0 3
14580: LESSEQUAL
14581: DIFF
14582: IFFALSE 14649
// for i := 1 to vehCount do
14584: LD_ADDR_VAR 0 9
14588: PUSH
14589: DOUBLE
14590: LD_INT 1
14592: DEC
14593: ST_TO_ADDR
14594: LD_VAR 0 3
14598: PUSH
14599: FOR_TO
14600: IFFALSE 14647
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14602: LD_VAR 0 2
14606: PPUSH
14607: LD_VAR 0 7
14611: PPUSH
14612: LD_VAR 0 5
14616: PPUSH
14617: LD_VAR 0 6
14621: PPUSH
14622: LD_VAR 0 4
14626: PUSH
14627: LD_INT 1
14629: PPUSH
14630: LD_VAR 0 4
14634: PPUSH
14635: CALL_OW 12
14639: ARRAY
14640: PPUSH
14641: CALL_OW 185
14645: GO 14599
14647: POP
14648: POP
// end ;
14649: LD_VAR 0 8
14653: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
14654: LD_INT 0
14656: PPUSH
14657: PPUSH
14658: PPUSH
14659: PPUSH
14660: PPUSH
14661: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14662: LD_ADDR_VAR 0 6
14666: PUSH
14667: LD_INT 22
14669: PUSH
14670: LD_VAR 0 1
14674: PUSH
14675: EMPTY
14676: LIST
14677: LIST
14678: PUSH
14679: LD_INT 25
14681: PUSH
14682: LD_INT 9
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: PPUSH
14693: CALL_OW 69
14697: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14698: LD_ADDR_VAR 0 7
14702: PUSH
14703: LD_INT 81
14705: PUSH
14706: LD_VAR 0 1
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 3
14717: PUSH
14718: LD_INT 21
14720: PUSH
14721: LD_INT 3
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: PPUSH
14736: CALL_OW 69
14740: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14741: LD_ADDR_VAR 0 4
14745: PUSH
14746: LD_INT 1
14748: PPUSH
14749: LD_INT 3
14751: PPUSH
14752: CALL_OW 12
14756: ST_TO_ADDR
// for i := 1 to list do
14757: LD_ADDR_VAR 0 5
14761: PUSH
14762: DOUBLE
14763: LD_INT 1
14765: DEC
14766: ST_TO_ADDR
14767: LD_VAR 0 6
14771: PUSH
14772: FOR_TO
14773: IFFALSE 14975
// for ta in filter do
14775: LD_ADDR_VAR 0 3
14779: PUSH
14780: LD_VAR 0 7
14784: PUSH
14785: FOR_IN
14786: IFFALSE 14971
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14788: LD_VAR 0 6
14792: PUSH
14793: LD_VAR 0 5
14797: ARRAY
14798: PPUSH
14799: LD_VAR 0 3
14803: PPUSH
14804: CALL_OW 296
14808: PUSH
14809: LD_INT 15
14811: LESSEQUAL
14812: IFFALSE 14969
// begin case c of 1 :
14814: LD_VAR 0 4
14818: PUSH
14819: LD_INT 1
14821: DOUBLE
14822: EQUAL
14823: IFTRUE 14827
14825: GO 14865
14827: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
14828: LD_VAR 0 6
14832: PUSH
14833: LD_VAR 0 5
14837: ARRAY
14838: PPUSH
14839: LD_VAR 0 3
14843: PPUSH
14844: CALL_OW 250
14848: PPUSH
14849: LD_VAR 0 3
14853: PPUSH
14854: CALL_OW 251
14858: PPUSH
14859: CALL_OW 154
14863: GO 14969
14865: LD_INT 2
14867: DOUBLE
14868: EQUAL
14869: IFTRUE 14873
14871: GO 14937
14873: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
14874: LD_VAR 0 6
14878: PUSH
14879: LD_VAR 0 5
14883: ARRAY
14884: PPUSH
14885: LD_VAR 0 3
14889: PPUSH
14890: CALL_OW 250
14894: PUSH
14895: LD_INT 1
14897: NEG
14898: PPUSH
14899: LD_INT 1
14901: PPUSH
14902: CALL_OW 12
14906: PLUS
14907: PPUSH
14908: LD_VAR 0 3
14912: PPUSH
14913: CALL_OW 251
14917: PUSH
14918: LD_INT 1
14920: NEG
14921: PPUSH
14922: LD_INT 1
14924: PPUSH
14925: CALL_OW 12
14929: PLUS
14930: PPUSH
14931: CALL_OW 153
14935: GO 14969
14937: LD_INT 3
14939: DOUBLE
14940: EQUAL
14941: IFTRUE 14945
14943: GO 14968
14945: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14946: LD_VAR 0 6
14950: PUSH
14951: LD_VAR 0 5
14955: ARRAY
14956: PPUSH
14957: LD_VAR 0 3
14961: PPUSH
14962: CALL_OW 115
14966: GO 14969
14968: POP
// end ; end ;
14969: GO 14785
14971: POP
14972: POP
14973: GO 14772
14975: POP
14976: POP
// end ;
14977: LD_VAR 0 2
14981: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
14982: LD_INT 0
14984: PPUSH
14985: PPUSH
14986: PPUSH
14987: PPUSH
// r := 100 ;
14988: LD_ADDR_VAR 0 5
14992: PUSH
14993: LD_INT 100
14995: ST_TO_ADDR
// x := 0 ;
14996: LD_ADDR_VAR 0 6
15000: PUSH
15001: LD_INT 0
15003: ST_TO_ADDR
// while ( x < n ) do
15004: LD_VAR 0 6
15008: PUSH
15009: LD_VAR 0 2
15013: LESS
15014: IFFALSE 15277
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15016: LD_ADDR_VAR 0 4
15020: PUSH
15021: DOUBLE
15022: LD_INT 1
15024: DEC
15025: ST_TO_ADDR
15026: LD_VAR 0 1
15030: PPUSH
15031: LD_INT 0
15033: PPUSH
15034: CALL_OW 517
15038: PUSH
15039: LD_INT 1
15041: ARRAY
15042: PUSH
15043: FOR_TO
15044: IFFALSE 15273
// begin if r > 50 then
15046: LD_VAR 0 5
15050: PUSH
15051: LD_INT 50
15053: GREATER
15054: IFFALSE 15257
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15056: LD_VAR 0 1
15060: PPUSH
15061: LD_INT 0
15063: PPUSH
15064: CALL_OW 517
15068: PUSH
15069: LD_INT 1
15071: ARRAY
15072: PUSH
15073: LD_VAR 0 4
15077: ARRAY
15078: PPUSH
15079: LD_VAR 0 1
15083: PPUSH
15084: LD_INT 0
15086: PPUSH
15087: CALL_OW 517
15091: PUSH
15092: LD_INT 2
15094: ARRAY
15095: PUSH
15096: LD_VAR 0 4
15100: ARRAY
15101: PPUSH
15102: CALL_OW 458
15106: NOT
15107: IFFALSE 15255
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15109: LD_VAR 0 1
15113: PPUSH
15114: LD_INT 0
15116: PPUSH
15117: CALL_OW 517
15121: PUSH
15122: LD_INT 1
15124: ARRAY
15125: PUSH
15126: LD_VAR 0 4
15130: ARRAY
15131: PPUSH
15132: LD_VAR 0 1
15136: PPUSH
15137: LD_INT 0
15139: PPUSH
15140: CALL_OW 517
15144: PUSH
15145: LD_INT 2
15147: ARRAY
15148: PUSH
15149: LD_VAR 0 4
15153: ARRAY
15154: PPUSH
15155: LD_INT 8
15157: PPUSH
15158: LD_INT 0
15160: PPUSH
15161: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15165: LD_ADDR_EXP 37
15169: PUSH
15170: LD_EXP 37
15174: PPUSH
15175: LD_INT 1
15177: PPUSH
15178: LD_VAR 0 1
15182: PPUSH
15183: LD_INT 0
15185: PPUSH
15186: CALL_OW 517
15190: PUSH
15191: LD_INT 1
15193: ARRAY
15194: PUSH
15195: LD_VAR 0 4
15199: ARRAY
15200: PUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: LD_INT 0
15208: PPUSH
15209: CALL_OW 517
15213: PUSH
15214: LD_INT 2
15216: ARRAY
15217: PUSH
15218: LD_VAR 0 4
15222: ARRAY
15223: PUSH
15224: EMPTY
15225: LIST
15226: LIST
15227: PPUSH
15228: CALL_OW 2
15232: ST_TO_ADDR
// r := 0 ;
15233: LD_ADDR_VAR 0 5
15237: PUSH
15238: LD_INT 0
15240: ST_TO_ADDR
// x := x + 1 ;
15241: LD_ADDR_VAR 0 6
15245: PUSH
15246: LD_VAR 0 6
15250: PUSH
15251: LD_INT 1
15253: PLUS
15254: ST_TO_ADDR
// end end else
15255: GO 15271
// r := r + 35 ;
15257: LD_ADDR_VAR 0 5
15261: PUSH
15262: LD_VAR 0 5
15266: PUSH
15267: LD_INT 35
15269: PLUS
15270: ST_TO_ADDR
// end end ;
15271: GO 15043
15273: POP
15274: POP
15275: GO 15004
15277: LD_VAR 0 3
15281: RET
// export function DefendDepot ( side , build ) ; var i , j , tmp , bunkers ; begin
15282: LD_INT 0
15284: PPUSH
15285: PPUSH
15286: PPUSH
15287: PPUSH
15288: PPUSH
// tmp := [ ] ;
15289: LD_ADDR_VAR 0 6
15293: PUSH
15294: EMPTY
15295: ST_TO_ADDR
// bunkers := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) ;
15296: LD_ADDR_VAR 0 7
15300: PUSH
15301: LD_INT 22
15303: PUSH
15304: LD_VAR 0 1
15308: PUSH
15309: EMPTY
15310: LIST
15311: LIST
15312: PUSH
15313: LD_INT 30
15315: PUSH
15316: LD_INT 32
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PPUSH
15327: CALL_OW 69
15331: ST_TO_ADDR
// if bunkers then
15332: LD_VAR 0 7
15336: IFFALSE 15406
// for i in bunkers do
15338: LD_ADDR_VAR 0 4
15342: PUSH
15343: LD_VAR 0 7
15347: PUSH
15348: FOR_IN
15349: IFFALSE 15404
// for j in UnitsInside ( i ) do
15351: LD_ADDR_VAR 0 5
15355: PUSH
15356: LD_VAR 0 4
15360: PPUSH
15361: CALL_OW 313
15365: PUSH
15366: FOR_IN
15367: IFFALSE 15400
// tmp := Replace ( tmp , tmp + 1 , j ) ;
15369: LD_ADDR_VAR 0 6
15373: PUSH
15374: LD_VAR 0 6
15378: PPUSH
15379: LD_VAR 0 6
15383: PUSH
15384: LD_INT 1
15386: PLUS
15387: PPUSH
15388: LD_VAR 0 5
15392: PPUSH
15393: CALL_OW 1
15397: ST_TO_ADDR
15398: GO 15366
15400: POP
15401: POP
15402: GO 15348
15404: POP
15405: POP
// if tmp then
15406: LD_VAR 0 6
15410: IFFALSE 15450
// begin ComExitBuilding ( tmp ) ;
15412: LD_VAR 0 6
15416: PPUSH
15417: CALL_OW 122
// AddComAgressiveMove ( tmp , GetX ( build ) , GetY ( build ) ) ;
15421: LD_VAR 0 6
15425: PPUSH
15426: LD_VAR 0 2
15430: PPUSH
15431: CALL_OW 250
15435: PPUSH
15436: LD_VAR 0 2
15440: PPUSH
15441: CALL_OW 251
15445: PPUSH
15446: CALL_OW 174
// end ; end ;
15450: LD_VAR 0 3
15454: RET
// export function CreateNature ; var i , un ; begin
15455: LD_INT 0
15457: PPUSH
15458: PPUSH
15459: PPUSH
// uc_side := 0 ;
15460: LD_ADDR_OWVAR 20
15464: PUSH
15465: LD_INT 0
15467: ST_TO_ADDR
// uc_nation := 0 ;
15468: LD_ADDR_OWVAR 21
15472: PUSH
15473: LD_INT 0
15475: ST_TO_ADDR
// InitHc ;
15476: CALL_OW 19
// hc_class := class_fish ;
15480: LD_ADDR_OWVAR 28
15484: PUSH
15485: LD_INT 20
15487: ST_TO_ADDR
// for i := 1 to 6 do
15488: LD_ADDR_VAR 0 2
15492: PUSH
15493: DOUBLE
15494: LD_INT 1
15496: DEC
15497: ST_TO_ADDR
15498: LD_INT 6
15500: PUSH
15501: FOR_TO
15502: IFFALSE 15521
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15504: CALL_OW 44
15508: PPUSH
15509: LD_INT 22
15511: PPUSH
15512: LD_INT 0
15514: PPUSH
15515: CALL_OW 49
15519: GO 15501
15521: POP
15522: POP
// for i := 1 to Difficulty + 2 do
15523: LD_ADDR_VAR 0 2
15527: PUSH
15528: DOUBLE
15529: LD_INT 1
15531: DEC
15532: ST_TO_ADDR
15533: LD_OWVAR 67
15537: PUSH
15538: LD_INT 2
15540: PLUS
15541: PUSH
15542: FOR_TO
15543: IFFALSE 15652
// begin hc_sex := sex_male ;
15545: LD_ADDR_OWVAR 27
15549: PUSH
15550: LD_INT 1
15552: ST_TO_ADDR
// uc_side := 0 ;
15553: LD_ADDR_OWVAR 20
15557: PUSH
15558: LD_INT 0
15560: ST_TO_ADDR
// uc_nation := nation_nature ;
15561: LD_ADDR_OWVAR 21
15565: PUSH
15566: LD_INT 0
15568: ST_TO_ADDR
// hc_class := class_tiger ;
15569: LD_ADDR_OWVAR 28
15573: PUSH
15574: LD_INT 14
15576: ST_TO_ADDR
// hc_skills := [ RuSolMaxLevel , 0 , 0 , 0 ] ;
15577: LD_ADDR_OWVAR 31
15581: PUSH
15582: LD_EXP 30
15586: PUSH
15587: LD_INT 0
15589: PUSH
15590: LD_INT 0
15592: PUSH
15593: LD_INT 0
15595: PUSH
15596: EMPTY
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: ST_TO_ADDR
// hc_agressivity := rand ( - 5 , 5 ) * Difficulty ;
15602: LD_ADDR_OWVAR 35
15606: PUSH
15607: LD_INT 5
15609: NEG
15610: PPUSH
15611: LD_INT 5
15613: PPUSH
15614: CALL_OW 12
15618: PUSH
15619: LD_OWVAR 67
15623: MUL
15624: ST_TO_ADDR
// un := CreateHuman ;
15625: LD_ADDR_VAR 0 3
15629: PUSH
15630: CALL_OW 44
15634: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15635: LD_VAR 0 3
15639: PPUSH
15640: LD_INT 23
15642: PPUSH
15643: LD_INT 0
15645: PPUSH
15646: CALL_OW 49
// end ;
15650: GO 15542
15652: POP
15653: POP
// for i := 1 to rand ( 3 , 4 ) do
15654: LD_ADDR_VAR 0 2
15658: PUSH
15659: DOUBLE
15660: LD_INT 1
15662: DEC
15663: ST_TO_ADDR
15664: LD_INT 3
15666: PPUSH
15667: LD_INT 4
15669: PPUSH
15670: CALL_OW 12
15674: PUSH
15675: FOR_TO
15676: IFFALSE 15768
// begin hc_sex := sex_male ;
15678: LD_ADDR_OWVAR 27
15682: PUSH
15683: LD_INT 1
15685: ST_TO_ADDR
// uc_side := 0 ;
15686: LD_ADDR_OWVAR 20
15690: PUSH
15691: LD_INT 0
15693: ST_TO_ADDR
// uc_nation := nation_nature ;
15694: LD_ADDR_OWVAR 21
15698: PUSH
15699: LD_INT 0
15701: ST_TO_ADDR
// hc_class := 18 ;
15702: LD_ADDR_OWVAR 28
15706: PUSH
15707: LD_INT 18
15709: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15710: LD_ADDR_OWVAR 31
15714: PUSH
15715: LD_INT 0
15717: PUSH
15718: LD_INT 0
15720: PUSH
15721: LD_INT 0
15723: PUSH
15724: LD_INT 0
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: ST_TO_ADDR
// hc_agressivity := 0 ;
15733: LD_ADDR_OWVAR 35
15737: PUSH
15738: LD_INT 0
15740: ST_TO_ADDR
// un := CreateHuman ;
15741: LD_ADDR_VAR 0 3
15745: PUSH
15746: CALL_OW 44
15750: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
15751: LD_VAR 0 3
15755: PPUSH
15756: LD_INT 23
15758: PPUSH
15759: LD_INT 0
15761: PPUSH
15762: CALL_OW 49
// end ;
15766: GO 15675
15768: POP
15769: POP
// for i := 1 to [ 4 , 3 , 3 , 3 ] [ Difficulty ] do
15770: LD_ADDR_VAR 0 2
15774: PUSH
15775: DOUBLE
15776: LD_INT 1
15778: DEC
15779: ST_TO_ADDR
15780: LD_INT 4
15782: PUSH
15783: LD_INT 3
15785: PUSH
15786: LD_INT 3
15788: PUSH
15789: LD_INT 3
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: PUSH
15798: LD_OWVAR 67
15802: ARRAY
15803: PUSH
15804: FOR_TO
15805: IFFALSE 15914
// begin hc_sex := sex_male ;
15807: LD_ADDR_OWVAR 27
15811: PUSH
15812: LD_INT 1
15814: ST_TO_ADDR
// uc_side := 0 ;
15815: LD_ADDR_OWVAR 20
15819: PUSH
15820: LD_INT 0
15822: ST_TO_ADDR
// uc_nation := nation_nature ;
15823: LD_ADDR_OWVAR 21
15827: PUSH
15828: LD_INT 0
15830: ST_TO_ADDR
// hc_class := class_apeman ;
15831: LD_ADDR_OWVAR 28
15835: PUSH
15836: LD_INT 12
15838: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 2 ) , 0 , 0 , 0 ] ;
15839: LD_ADDR_OWVAR 31
15843: PUSH
15844: LD_INT 0
15846: PPUSH
15847: LD_INT 2
15849: PPUSH
15850: CALL_OW 12
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: LD_INT 0
15860: PUSH
15861: LD_INT 0
15863: PUSH
15864: EMPTY
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: ST_TO_ADDR
// hc_agressivity = rand ( - 10 , 10 ) ;
15870: LD_ADDR_OWVAR 35
15874: PUSH
15875: LD_INT 10
15877: NEG
15878: PPUSH
15879: LD_INT 10
15881: PPUSH
15882: CALL_OW 12
15886: ST_TO_ADDR
// un := CreateHuman ;
15887: LD_ADDR_VAR 0 3
15891: PUSH
15892: CALL_OW 44
15896: ST_TO_ADDR
// PlaceUnitArea ( un , ApeNatureArea , false ) ;
15897: LD_VAR 0 3
15901: PPUSH
15902: LD_INT 26
15904: PPUSH
15905: LD_INT 0
15907: PPUSH
15908: CALL_OW 49
// end ;
15912: GO 15804
15914: POP
15915: POP
// end ; end_of_file
15916: LD_VAR 0 1
15920: RET
// on UnitDestroyed ( unit ) do var i ;
15921: LD_INT 0
15923: PPUSH
// begin SOS_UnitDestroyed ( unit ) ;
15924: LD_VAR 0 1
15928: PPUSH
15929: CALL 35373 0 1
// if unit = JMM then
15933: LD_VAR 0 1
15937: PUSH
15938: LD_EXP 1
15942: EQUAL
15943: IFFALSE 15952
// YouLost ( JMM ) ;
15945: LD_STRING JMM
15947: PPUSH
15948: CALL_OW 104
// if unit in russianTanks then
15952: LD_VAR 0 1
15956: PUSH
15957: LD_EXP 32
15961: IN
15962: IFFALSE 15980
// russianTanks := russianTanks diff unit ;
15964: LD_ADDR_EXP 32
15968: PUSH
15969: LD_EXP 32
15973: PUSH
15974: LD_VAR 0 1
15978: DIFF
15979: ST_TO_ADDR
// if unit in russianTimeLapsers then
15980: LD_VAR 0 1
15984: PUSH
15985: LD_EXP 33
15989: IN
15990: IFFALSE 16008
// russianTimeLapsers := russianTimeLapsers diff unit ;
15992: LD_ADDR_EXP 33
15996: PUSH
15997: LD_EXP 33
16001: PUSH
16002: LD_VAR 0 1
16006: DIFF
16007: ST_TO_ADDR
// if unit in RuScientists then
16008: LD_VAR 0 1
16012: PUSH
16013: LD_EXP 27
16017: IN
16018: IFFALSE 16050
// begin RuScientists := RuScientists diff unit ;
16020: LD_ADDR_EXP 27
16024: PUSH
16025: LD_EXP 27
16029: PUSH
16030: LD_VAR 0 1
16034: DIFF
16035: ST_TO_ADDR
// sciCounter := sciCounter + 1 ;
16036: LD_ADDR_EXP 28
16040: PUSH
16041: LD_EXP 28
16045: PUSH
16046: LD_INT 1
16048: PLUS
16049: ST_TO_ADDR
// end ; end ;
16050: PPOPN 2
16052: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if GetWeapon ( killerUnit ) = us_laser then
16053: LD_VAR 0 3
16057: PPUSH
16058: CALL_OW 264
16062: PUSH
16063: LD_INT 9
16065: EQUAL
16066: IFFALSE 16082
// laserCounterDestroy := laserCounterDestroy + 1 ;
16068: LD_ADDR_EXP 43
16072: PUSH
16073: LD_EXP 43
16077: PUSH
16078: LD_INT 1
16080: PLUS
16081: ST_TO_ADDR
// end ;
16082: PPOPN 3
16084: END
// on UnitTeleported ( building , human ) do begin if human in FilterAllUnits ( [ f_side , 6 ] ) then
16085: LD_VAR 0 2
16089: PUSH
16090: LD_INT 22
16092: PUSH
16093: LD_INT 6
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL_OW 69
16104: IN
16105: IFFALSE 16160
// begin if GetType ( human ) = unit_vehicle then
16107: LD_VAR 0 2
16111: PPUSH
16112: CALL_OW 247
16116: PUSH
16117: LD_INT 2
16119: EQUAL
16120: IFFALSE 16137
// human := IsDrivenBy ( human ) ;
16122: LD_ADDR_VAR 0 2
16126: PUSH
16127: LD_VAR 0 2
16131: PPUSH
16132: CALL_OW 311
16136: ST_TO_ADDR
// SetTag ( human , GetTag ( human ) + 10 ) ;
16137: LD_VAR 0 2
16141: PPUSH
16142: LD_VAR 0 2
16146: PPUSH
16147: CALL_OW 110
16151: PUSH
16152: LD_INT 10
16154: PLUS
16155: PPUSH
16156: CALL_OW 109
// end ; if GetSide ( human ) = 1 and eventVar1 = 0 then
16160: LD_VAR 0 2
16164: PPUSH
16165: CALL_OW 255
16169: PUSH
16170: LD_INT 1
16172: EQUAL
16173: PUSH
16174: LD_EXP 40
16178: PUSH
16179: LD_INT 0
16181: EQUAL
16182: AND
16183: IFFALSE 16295
// begin eventVar1 = 1 ;
16185: LD_ADDR_EXP 40
16189: PUSH
16190: LD_INT 1
16192: ST_TO_ADDR
// teleportExplored = 1 ;
16193: LD_ADDR_EXP 26
16197: PUSH
16198: LD_INT 1
16200: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16201: LD_STRING M2a
16203: PPUSH
16204: CALL_OW 337
// wait ( 0 0$2 ) ;
16208: LD_INT 70
16210: PPUSH
16211: CALL_OW 67
// DialogueOn ;
16215: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16219: LD_INT 22
16221: PUSH
16222: LD_INT 1
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 21
16231: PUSH
16232: LD_INT 1
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: PUSH
16239: EMPTY
16240: LIST
16241: LIST
16242: PPUSH
16243: CALL_OW 69
16247: PPUSH
16248: LD_STRING DT3a-Sol1-1
16250: PPUSH
16251: LD_STRING DT3a-FSol1-1
16253: PPUSH
16254: CALL 12642 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16258: LD_EXP 1
16262: PPUSH
16263: LD_STRING DT3a-JMM-1
16265: PPUSH
16266: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16270: LD_VAR 0 2
16274: PPUSH
16275: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16279: LD_EXP 1
16283: PPUSH
16284: LD_STRING DT3a-JMM-1a
16286: PPUSH
16287: CALL_OW 88
// DialogueOff ;
16291: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16295: LD_VAR 0 1
16299: PUSH
16300: LD_INT 10
16302: EQUAL
16303: PUSH
16304: LD_VAR 0 2
16308: PPUSH
16309: CALL_OW 247
16313: PUSH
16314: LD_INT 2
16316: EQUAL
16317: AND
16318: PUSH
16319: LD_VAR 0 2
16323: PPUSH
16324: CALL_OW 255
16328: PUSH
16329: LD_INT 3
16331: EQUAL
16332: AND
16333: IFFALSE 16399
// begin if vehicleTeleported = 0 then
16335: LD_EXP 21
16339: PUSH
16340: LD_INT 0
16342: EQUAL
16343: IFFALSE 16360
// begin wait ( 0 0$03 ) ;
16345: LD_INT 105
16347: PPUSH
16348: CALL_OW 67
// vehicleTeleported := 1 ;
16352: LD_ADDR_EXP 21
16356: PUSH
16357: LD_INT 1
16359: ST_TO_ADDR
// end ; if vehicleTeleported = 2 then
16360: LD_EXP 21
16364: PUSH
16365: LD_INT 2
16367: EQUAL
16368: IFFALSE 16385
// begin wait ( 0 0$03 ) ;
16370: LD_INT 105
16372: PPUSH
16373: CALL_OW 67
// vehicleTeleported := 3 ;
16377: LD_ADDR_EXP 21
16381: PUSH
16382: LD_INT 3
16384: ST_TO_ADDR
// end ; tpCounter := tpCounter + 1 ;
16385: LD_ADDR_EXP 22
16389: PUSH
16390: LD_EXP 22
16394: PUSH
16395: LD_INT 1
16397: PLUS
16398: ST_TO_ADDR
// end ; end ;
16399: PPOPN 2
16401: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
16402: LD_VAR 0 1
16406: PPUSH
16407: LD_VAR 0 2
16411: PPUSH
16412: CALL 35431 0 2
// if GetWeapon ( vehicle ) = us_rocket_launcher then
16416: LD_VAR 0 1
16420: PPUSH
16421: CALL_OW 264
16425: PUSH
16426: LD_INT 7
16428: EQUAL
16429: IFFALSE 16439
// rocketBuilded := true ;
16431: LD_ADDR_EXP 44
16435: PUSH
16436: LD_INT 1
16438: ST_TO_ADDR
// if GetSide ( vehicle ) <> 3 then
16439: LD_VAR 0 1
16443: PPUSH
16444: CALL_OW 255
16448: PUSH
16449: LD_INT 3
16451: NONEQUAL
16452: IFFALSE 16456
// exit ;
16454: GO 16573
// if factory in [ ru_fact , rufab2 ] then
16456: LD_VAR 0 2
16460: PUSH
16461: LD_INT 21
16463: PUSH
16464: LD_INT 112
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: IN
16471: IFFALSE 16573
// begin if GetWeapon ( vehicle ) = ru_time_lapser then
16473: LD_VAR 0 1
16477: PPUSH
16478: CALL_OW 264
16482: PUSH
16483: LD_INT 49
16485: EQUAL
16486: IFFALSE 16522
// begin russianTimeLapsers := Join ( russianTimeLapsers , vehicle ) ;
16488: LD_ADDR_EXP 33
16492: PUSH
16493: LD_EXP 33
16497: PPUSH
16498: LD_VAR 0 1
16502: PPUSH
16503: CALL 78532 0 2
16507: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
16508: LD_VAR 0 1
16512: PPUSH
16513: LD_INT 137
16515: PPUSH
16516: CALL_OW 120
// end else
16520: GO 16573
// if not GetWeapon ( vehicle ) in [ ru_cargo_bay , ru_big_cargo_bay , ru_crane , ru_bulldozer ] then
16522: LD_VAR 0 1
16526: PPUSH
16527: CALL_OW 264
16531: PUSH
16532: LD_INT 51
16534: PUSH
16535: LD_INT 89
16537: PUSH
16538: LD_INT 52
16540: PUSH
16541: LD_INT 53
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: LIST
16548: LIST
16549: IN
16550: NOT
16551: IFFALSE 16573
// begin russianTanks := Join ( russianTanks , vehicle ) ;
16553: LD_ADDR_EXP 32
16557: PUSH
16558: LD_EXP 32
16562: PPUSH
16563: LD_VAR 0 1
16567: PPUSH
16568: CALL 78532 0 2
16572: ST_TO_ADDR
// end ; end ; end ;
16573: PPOPN 2
16575: END
// on LeaveVehicle ( vehicle , human ) do var i ;
16576: LD_INT 0
16578: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
16579: LD_VAR 0 2
16583: PPUSH
16584: CALL_OW 255
16588: PUSH
16589: LD_INT 3
16591: EQUAL
16592: PUSH
16593: LD_VAR 0 2
16597: PPUSH
16598: CALL_OW 257
16602: PUSH
16603: LD_INT 3
16605: EQUAL
16606: AND
16607: PUSH
16608: LD_INT 21
16610: PPUSH
16611: CALL_OW 255
16615: PUSH
16616: LD_INT 3
16618: EQUAL
16619: AND
16620: PUSH
16621: LD_INT 21
16623: PPUSH
16624: CALL_OW 302
16628: AND
16629: IFFALSE 16643
// ComEnterUnit ( human , ru_fact ) ;
16631: LD_VAR 0 2
16635: PPUSH
16636: LD_INT 21
16638: PPUSH
16639: CALL_OW 120
// end ;
16643: PPOPN 3
16645: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
16646: LD_VAR 0 1
16650: PPUSH
16651: CALL 35415 0 1
// end ; end_of_file
16655: PPOPN 1
16657: END
// every 0 0$1 trigger ruAI = 1 do
16658: LD_EXP 34
16662: PUSH
16663: LD_INT 1
16665: EQUAL
16666: IFFALSE 16778
16668: GO 16670
16670: DISABLE
// begin enable ;
16671: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
16672: LD_INT 3
16674: PPUSH
16675: LD_INT 6
16677: PPUSH
16678: LD_INT 9
16680: PPUSH
16681: LD_EXP 31
16685: PPUSH
16686: CALL 13492 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
16690: LD_INT 3
16692: PPUSH
16693: LD_INT 4
16695: PPUSH
16696: LD_INT 10
16698: PPUSH
16699: LD_EXP 31
16703: PPUSH
16704: CALL 13492 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
16708: LD_INT 3
16710: PPUSH
16711: LD_INT 9
16713: PPUSH
16714: CALL 14327 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
16718: LD_INT 3
16720: PPUSH
16721: LD_INT 10
16723: PPUSH
16724: CALL 14327 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
16728: LD_INT 3
16730: PPUSH
16731: LD_INT 16
16733: PPUSH
16734: LD_INT 9
16736: PPUSH
16737: LD_INT 91
16739: PPUSH
16740: CALL 13859 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
16744: LD_INT 3
16746: PPUSH
16747: LD_INT 17
16749: PPUSH
16750: LD_INT 10
16752: PPUSH
16753: LD_INT 47
16755: PUSH
16756: LD_INT 129
16758: PUSH
16759: LD_INT 135
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: LIST
16766: PPUSH
16767: CALL 13859 0 4
// IntBazooka ( 3 ) ;
16771: LD_INT 3
16773: PPUSH
16774: CALL 14654 0 1
// end ;
16778: END
// every 0 0$50 trigger russianTanks >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do var i , tmp , p , path ;
16779: LD_EXP 32
16783: PUSH
16784: LD_INT 3
16786: PUSH
16787: LD_INT 4
16789: PUSH
16790: LD_INT 5
16792: PUSH
16793: LD_INT 6
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: PUSH
16802: LD_OWVAR 67
16806: ARRAY
16807: GREATEREQUAL
16808: IFFALSE 17180
16810: GO 16812
16812: DISABLE
16813: LD_INT 0
16815: PPUSH
16816: PPUSH
16817: PPUSH
16818: PPUSH
// begin enable ;
16819: ENABLE
// tmp := russianTanks union russianTimeLapsers ;
16820: LD_ADDR_VAR 0 2
16824: PUSH
16825: LD_EXP 32
16829: PUSH
16830: LD_EXP 33
16834: UNION
16835: ST_TO_ADDR
// russianTanks := russianTanks diff tmp ;
16836: LD_ADDR_EXP 32
16840: PUSH
16841: LD_EXP 32
16845: PUSH
16846: LD_VAR 0 2
16850: DIFF
16851: ST_TO_ADDR
// russianTimeLapsers := russianTimeLapsers diff tmp ;
16852: LD_ADDR_EXP 33
16856: PUSH
16857: LD_EXP 33
16861: PUSH
16862: LD_VAR 0 2
16866: DIFF
16867: ST_TO_ADDR
// if vehicleTeleported >= 4 then
16868: LD_EXP 21
16872: PUSH
16873: LD_INT 4
16875: GREATEREQUAL
16876: IFFALSE 16894
// attackTactic := rand ( 1 , 2 ) ;
16878: LD_ADDR_EXP 36
16882: PUSH
16883: LD_INT 1
16885: PPUSH
16886: LD_INT 2
16888: PPUSH
16889: CALL_OW 12
16893: ST_TO_ADDR
// path := [ [ 93 , 77 ] , [ 107 , 99 ] , [ 123 , 112 ] , [ 140 , 112 ] ] ;
16894: LD_ADDR_VAR 0 4
16898: PUSH
16899: LD_INT 93
16901: PUSH
16902: LD_INT 77
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 107
16911: PUSH
16912: LD_INT 99
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: PUSH
16919: LD_INT 123
16921: PUSH
16922: LD_INT 112
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 140
16931: PUSH
16932: LD_INT 112
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: ST_TO_ADDR
// if attackTactic < 2 then
16945: LD_EXP 36
16949: PUSH
16950: LD_INT 2
16952: LESS
16953: IFFALSE 16984
// path := [ [ 131 , 136 ] , [ 140 , 112 ] ] ;
16955: LD_ADDR_VAR 0 4
16959: PUSH
16960: LD_INT 131
16962: PUSH
16963: LD_INT 136
16965: PUSH
16966: EMPTY
16967: LIST
16968: LIST
16969: PUSH
16970: LD_INT 140
16972: PUSH
16973: LD_INT 112
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: ST_TO_ADDR
// if IsOk ( ruteleprt ) then
16984: LD_INT 10
16986: PPUSH
16987: CALL_OW 302
16991: IFFALSE 17107
// begin for i in tmp do
16993: LD_ADDR_VAR 0 1
16997: PUSH
16998: LD_VAR 0 2
17002: PUSH
17003: FOR_IN
17004: IFFALSE 17047
// if attackTactic < 2 then
17006: LD_EXP 36
17010: PUSH
17011: LD_INT 2
17013: LESS
17014: IFFALSE 17030
// ComEnterUnit ( i , ruteleprt ) else
17016: LD_VAR 0 1
17020: PPUSH
17021: LD_INT 10
17023: PPUSH
17024: CALL_OW 120
17028: GO 17045
// ComMoveXY ( i , 88 , 69 ) ;
17030: LD_VAR 0 1
17034: PPUSH
17035: LD_INT 88
17037: PPUSH
17038: LD_INT 69
17040: PPUSH
17041: CALL_OW 111
17045: GO 17003
17047: POP
17048: POP
// p := 0 ;
17049: LD_ADDR_VAR 0 3
17053: PUSH
17054: LD_INT 0
17056: ST_TO_ADDR
// repeat wait ( 0 0$2 ) ;
17057: LD_INT 70
17059: PPUSH
17060: CALL_OW 67
// p := Inc ( p ) ;
17064: LD_ADDR_VAR 0 3
17068: PUSH
17069: LD_VAR 0 3
17073: PPUSH
17074: CALL 79893 0 1
17078: ST_TO_ADDR
// until not UnitFilter ( tmp , [ f_hastask ] ) or p > 30 ;
17079: LD_VAR 0 2
17083: PPUSH
17084: LD_INT 60
17086: PUSH
17087: EMPTY
17088: LIST
17089: PPUSH
17090: CALL_OW 72
17094: NOT
17095: PUSH
17096: LD_VAR 0 3
17100: PUSH
17101: LD_INT 30
17103: GREATER
17104: OR
17105: IFFALSE 17057
// end ; repeat wait ( 0 0$1 ) ;
17107: LD_INT 35
17109: PPUSH
17110: CALL_OW 67
// for i in tmp do
17114: LD_ADDR_VAR 0 1
17118: PUSH
17119: LD_VAR 0 2
17123: PUSH
17124: FOR_IN
17125: IFFALSE 17157
// if not IsOk ( i ) then
17127: LD_VAR 0 1
17131: PPUSH
17132: CALL_OW 302
17136: NOT
17137: IFFALSE 17155
// tmp := tmp diff i ;
17139: LD_ADDR_VAR 0 2
17143: PUSH
17144: LD_VAR 0 2
17148: PUSH
17149: LD_VAR 0 1
17153: DIFF
17154: ST_TO_ADDR
17155: GO 17124
17157: POP
17158: POP
// AgressiveMove ( tmp , path ) ;
17159: LD_VAR 0 2
17163: PPUSH
17164: LD_VAR 0 4
17168: PPUSH
17169: CALL 81142 0 2
// until not tmp ;
17173: LD_VAR 0 2
17177: NOT
17178: IFFALSE 17107
// end ;
17180: PPOPN 4
17182: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17183: LD_INT 4
17185: PPUSH
17186: CALL_OW 303
17190: IFFALSE 17205
17192: GO 17194
17194: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17195: LD_INT 3
17197: PPUSH
17198: LD_INT 4
17200: PPUSH
17201: CALL 15282 0 2
17205: END
// every 0 0$1 do
17206: GO 17208
17208: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17209: LD_INT 3
17211: PPUSH
17212: LD_INT 91
17214: PPUSH
17215: LD_INT 3
17217: PPUSH
17218: CALL 13257 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17222: LD_INT 3
17224: PPUSH
17225: LD_INT 47
17227: PPUSH
17228: LD_INT 3
17230: PPUSH
17231: CALL 13257 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17235: LD_INT 3
17237: PPUSH
17238: LD_INT 129
17240: PPUSH
17241: LD_INT 3
17243: PPUSH
17244: CALL 13257 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17248: LD_INT 3
17250: PPUSH
17251: LD_INT 3
17253: PPUSH
17254: LD_INT 3
17256: PPUSH
17257: CALL 13257 0 3
// end ;
17261: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) do
17262: LD_INT 22
17264: PUSH
17265: LD_INT 1
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 21
17274: PUSH
17275: LD_INT 3
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PUSH
17282: EMPTY
17283: LIST
17284: LIST
17285: PPUSH
17286: CALL_OW 69
17290: IFFALSE 17359
17292: GO 17294
17294: DISABLE
// begin wait ( 0 0$40 ) ;
17295: LD_INT 1400
17297: PPUSH
17298: CALL_OW 67
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17302: LD_INT 3
17304: PPUSH
17305: LD_INT 21
17307: PPUSH
17308: LD_INT 3
17310: PUSH
17311: LD_INT 4
17313: PUSH
17314: LD_INT 5
17316: PUSH
17317: LD_INT 6
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: PUSH
17326: LD_OWVAR 67
17330: ARRAY
17331: PPUSH
17332: LD_INT 46
17334: PUSH
17335: LD_INT 45
17337: PUSH
17338: LD_INT 44
17340: PUSH
17341: EMPTY
17342: LIST
17343: LIST
17344: LIST
17345: PPUSH
17346: LD_INT 3
17348: PPUSH
17349: LD_INT 3
17351: PPUSH
17352: LD_INT 24
17354: PPUSH
17355: CALL 14507 0 7
// end ;
17359: END
// every 6 6$0 + 2 2$00 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17360: LD_EXP 20
17364: PUSH
17365: LD_INT 2
17367: EQUAL
17368: PUSH
17369: LD_INT 21
17371: PPUSH
17372: CALL_OW 255
17376: PUSH
17377: LD_INT 3
17379: EQUAL
17380: AND
17381: PUSH
17382: LD_INT 112
17384: PPUSH
17385: CALL_OW 255
17389: PUSH
17390: LD_INT 3
17392: EQUAL
17393: AND
17394: PUSH
17395: LD_INT 21
17397: PPUSH
17398: CALL_OW 302
17402: AND
17403: PUSH
17404: LD_INT 112
17406: PPUSH
17407: CALL_OW 302
17411: AND
17412: PUSH
17413: LD_INT 22
17415: PUSH
17416: LD_INT 3
17418: PUSH
17419: EMPTY
17420: LIST
17421: LIST
17422: PUSH
17423: LD_INT 21
17425: PUSH
17426: LD_INT 2
17428: PUSH
17429: EMPTY
17430: LIST
17431: LIST
17432: PUSH
17433: LD_INT 50
17435: PUSH
17436: EMPTY
17437: LIST
17438: PUSH
17439: LD_INT 3
17441: PUSH
17442: LD_INT 58
17444: PUSH
17445: EMPTY
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: LIST
17456: LIST
17457: PPUSH
17458: CALL_OW 69
17462: PUSH
17463: LD_INT 18
17465: PPUSH
17466: LD_INT 22
17468: PUSH
17469: LD_INT 3
17471: PUSH
17472: EMPTY
17473: LIST
17474: LIST
17475: PUSH
17476: LD_INT 21
17478: PUSH
17479: LD_INT 2
17481: PUSH
17482: EMPTY
17483: LIST
17484: LIST
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: PPUSH
17490: CALL_OW 70
17494: PUSH
17495: LD_INT 0
17497: EQUAL
17498: DIFF
17499: AND
17500: IFFALSE 17626
17502: GO 17504
17504: DISABLE
// begin enable ;
17505: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17506: LD_INT 3
17508: PPUSH
17509: LD_INT 21
17511: PPUSH
17512: LD_INT 3
17514: PUSH
17515: LD_INT 4
17517: PUSH
17518: LD_INT 5
17520: PUSH
17521: LD_INT 6
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: PUSH
17530: LD_OWVAR 67
17534: ARRAY
17535: PPUSH
17536: LD_INT 46
17538: PUSH
17539: LD_INT 45
17541: PUSH
17542: LD_INT 44
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: PPUSH
17550: LD_INT 3
17552: PPUSH
17553: LD_INT 3
17555: PPUSH
17556: LD_INT 24
17558: PPUSH
17559: CALL 14507 0 7
// if russianTimeLapsers = 0 then
17563: LD_EXP 33
17567: PUSH
17568: LD_INT 0
17570: EQUAL
17571: IFFALSE 17626
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17573: LD_INT 3
17575: PPUSH
17576: LD_INT 112
17578: PPUSH
17579: LD_INT 1
17581: PUSH
17582: LD_INT 2
17584: PUSH
17585: LD_INT 2
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: LIST
17595: LIST
17596: PUSH
17597: LD_OWVAR 67
17601: ARRAY
17602: PPUSH
17603: LD_INT 49
17605: PUSH
17606: LD_INT 49
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: LD_INT 3
17615: PPUSH
17616: LD_INT 3
17618: PPUSH
17619: LD_INT 24
17621: PPUSH
17622: CALL 14507 0 7
// end ;
17626: END
// every 0 0$1 trigger arabianMines do var i ;
17627: LD_EXP 37
17631: IFFALSE 17752
17633: GO 17635
17635: DISABLE
17636: LD_INT 0
17638: PPUSH
// begin enable ;
17639: ENABLE
// for i in arabianMines do
17640: LD_ADDR_VAR 0 1
17644: PUSH
17645: LD_EXP 37
17649: PUSH
17650: FOR_IN
17651: IFFALSE 17750
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
17653: LD_INT 22
17655: PUSH
17656: LD_INT 1
17658: PUSH
17659: EMPTY
17660: LIST
17661: LIST
17662: PUSH
17663: LD_INT 92
17665: PUSH
17666: LD_VAR 0 1
17670: PUSH
17671: LD_INT 1
17673: ARRAY
17674: PUSH
17675: LD_VAR 0 1
17679: PUSH
17680: LD_INT 2
17682: ARRAY
17683: PUSH
17684: LD_INT 3
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: PUSH
17693: EMPTY
17694: LIST
17695: LIST
17696: PPUSH
17697: CALL_OW 69
17701: IFFALSE 17748
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
17703: LD_VAR 0 1
17707: PUSH
17708: LD_INT 1
17710: ARRAY
17711: PPUSH
17712: LD_VAR 0 1
17716: PUSH
17717: LD_INT 2
17719: ARRAY
17720: PPUSH
17721: LD_INT 5
17723: PPUSH
17724: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
17728: LD_ADDR_EXP 37
17732: PUSH
17733: LD_EXP 37
17737: PPUSH
17738: LD_VAR 0 1
17742: PPUSH
17743: CALL_OW 3
17747: ST_TO_ADDR
// end ; end ;
17748: GO 17650
17750: POP
17751: POP
// end ;
17752: PPOPN 1
17754: END
// every 0 0$10 trigger vehicleTeleported >= 4 and tpCounter mod 12 = 0 do var i , hexes ;
17755: LD_EXP 21
17759: PUSH
17760: LD_INT 4
17762: GREATEREQUAL
17763: PUSH
17764: LD_EXP 22
17768: PUSH
17769: LD_INT 12
17771: MOD
17772: PUSH
17773: LD_INT 0
17775: EQUAL
17776: AND
17777: IFFALSE 17891
17779: GO 17781
17781: DISABLE
17782: LD_INT 0
17784: PPUSH
17785: PPUSH
// begin enable ;
17786: ENABLE
// hexes := [ [ 122 , 142 ] , [ 101 , 127 ] , [ 104 , 104 ] , [ 46 , 81 ] ] ;
17787: LD_ADDR_VAR 0 2
17791: PUSH
17792: LD_INT 122
17794: PUSH
17795: LD_INT 142
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PUSH
17802: LD_INT 101
17804: PUSH
17805: LD_INT 127
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: PUSH
17812: LD_INT 104
17814: PUSH
17815: LD_INT 104
17817: PUSH
17818: EMPTY
17819: LIST
17820: LIST
17821: PUSH
17822: LD_INT 46
17824: PUSH
17825: LD_INT 81
17827: PUSH
17828: EMPTY
17829: LIST
17830: LIST
17831: PUSH
17832: EMPTY
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: ST_TO_ADDR
// i := rand ( 1 , 4 ) ;
17838: LD_ADDR_VAR 0 1
17842: PUSH
17843: LD_INT 1
17845: PPUSH
17846: LD_INT 4
17848: PPUSH
17849: CALL_OW 12
17853: ST_TO_ADDR
// TeleportExit ( ruteleprt , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
17854: LD_INT 10
17856: PPUSH
17857: LD_VAR 0 2
17861: PUSH
17862: LD_VAR 0 1
17866: ARRAY
17867: PUSH
17868: LD_INT 1
17870: ARRAY
17871: PPUSH
17872: LD_VAR 0 2
17876: PUSH
17877: LD_VAR 0 1
17881: ARRAY
17882: PUSH
17883: LD_INT 2
17885: ARRAY
17886: PPUSH
17887: CALL_OW 243
// end ; end_of_file
17891: PPOPN 2
17893: END
// every 0 0$1 trigger IsDead ( ruheadlab ) do
17894: LD_INT 3
17896: PPUSH
17897: CALL_OW 301
17901: IFFALSE 18122
17903: GO 17905
17905: DISABLE
// begin if UnitFilter ( RuScientists , [ f_ok ] ) then
17906: LD_EXP 27
17910: PPUSH
17911: LD_INT 50
17913: PUSH
17914: EMPTY
17915: LIST
17916: PPUSH
17917: CALL_OW 72
17921: IFFALSE 17930
// wait ( 0 0$10 ) ;
17923: LD_INT 350
17925: PPUSH
17926: CALL_OW 67
// DialogueOn ;
17930: CALL_OW 6
// if sciCounter = 0 then
17934: LD_EXP 28
17938: PUSH
17939: LD_INT 0
17941: EQUAL
17942: IFFALSE 17970
// begin Say ( JMM , D7a-JMM-1 ) ;
17944: LD_EXP 1
17948: PPUSH
17949: LD_STRING D7a-JMM-1
17951: PPUSH
17952: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
17956: LD_EXP 15
17960: PPUSH
17961: LD_STRING D7a-Pow-1
17963: PPUSH
17964: CALL_OW 94
// end else
17968: GO 18114
// if sciCounter < 6 then
17970: LD_EXP 28
17974: PUSH
17975: LD_INT 6
17977: LESS
17978: IFFALSE 18006
// begin Say ( JMM , D7b-JMM-1 ) ;
17980: LD_EXP 1
17984: PPUSH
17985: LD_STRING D7b-JMM-1
17987: PPUSH
17988: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
17992: LD_EXP 15
17996: PPUSH
17997: LD_STRING D7b-Pow-1
17999: PPUSH
18000: CALL_OW 94
// end else
18004: GO 18114
// begin Say ( JMM , D7c-JMM-1 ) ;
18006: LD_EXP 1
18010: PPUSH
18011: LD_STRING D7c-JMM-1
18013: PPUSH
18014: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18018: LD_EXP 15
18022: PPUSH
18023: LD_STRING D7c-Pow-1
18025: PPUSH
18026: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18030: LD_EXP 1
18034: PPUSH
18035: LD_STRING D7d-JMM-1
18037: PPUSH
18038: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18042: LD_EXP 15
18046: PPUSH
18047: LD_STRING D7d-Pow-1
18049: PPUSH
18050: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18054: LD_EXP 1
18058: PPUSH
18059: LD_STRING D7d-JMM-2
18061: PPUSH
18062: CALL_OW 88
// if askSiberite = 1 then
18066: LD_EXP 25
18070: PUSH
18071: LD_INT 1
18073: EQUAL
18074: IFFALSE 18090
// Say ( JMM , D7d-JMM-2a ) else
18076: LD_EXP 1
18080: PPUSH
18081: LD_STRING D7d-JMM-2a
18083: PPUSH
18084: CALL_OW 88
18088: GO 18102
// SayRadio ( Powell , D7d-Pow-2 ) ;
18090: LD_EXP 15
18094: PPUSH
18095: LD_STRING D7d-Pow-2
18097: PPUSH
18098: CALL_OW 94
// SayRadio ( Powell , D7d-Pow-2a ) ;
18102: LD_EXP 15
18106: PPUSH
18107: LD_STRING D7d-Pow-2a
18109: PPUSH
18110: CALL_OW 94
// end ; DialogueOff ;
18114: CALL_OW 7
// FinishMission ;
18118: CALL 18123 0 0
// end ;
18122: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
18123: LD_INT 0
18125: PPUSH
18126: PPUSH
18127: PPUSH
18128: PPUSH
// m1 := false ;
18129: LD_ADDR_VAR 0 2
18133: PUSH
18134: LD_INT 0
18136: ST_TO_ADDR
// m2 := false ;
18137: LD_ADDR_VAR 0 3
18141: PUSH
18142: LD_INT 0
18144: ST_TO_ADDR
// m3 := false ;
18145: LD_ADDR_VAR 0 4
18149: PUSH
18150: LD_INT 0
18152: ST_TO_ADDR
// if not westPathUsed then
18153: LD_EXP 42
18157: NOT
18158: IFFALSE 18167
// SetAchievement ( ACH_PATH ) ;
18160: LD_STRING ACH_PATH
18162: PPUSH
18163: CALL_OW 543
// if not rocketBuilded then
18167: LD_EXP 44
18171: NOT
18172: IFFALSE 18188
// begin wait ( 3 ) ;
18174: LD_INT 3
18176: PPUSH
18177: CALL_OW 67
// SetAchievement ( ACH_ROCKET ) ;
18181: LD_STRING ACH_ROCKET
18183: PPUSH
18184: CALL_OW 543
// end ; if tick <= 40 40$00 then
18188: LD_OWVAR 1
18192: PUSH
18193: LD_INT 84000
18195: LESSEQUAL
18196: IFFALSE 18212
// begin wait ( 3 ) ;
18198: LD_INT 3
18200: PPUSH
18201: CALL_OW 67
// SetAchievement ( ACH_ASPEED_12 ) ;
18205: LD_STRING ACH_ASPEED_12
18207: PPUSH
18208: CALL_OW 543
// end ; if teleportExplored = 1 then
18212: LD_EXP 26
18216: PUSH
18217: LD_INT 1
18219: EQUAL
18220: IFFALSE 18242
// begin m1 := true ;
18222: LD_ADDR_VAR 0 2
18226: PUSH
18227: LD_INT 1
18229: ST_TO_ADDR
// AddMedal ( Teleport , 1 ) ;
18230: LD_STRING Teleport
18232: PPUSH
18233: LD_INT 1
18235: PPUSH
18236: CALL_OW 101
// end else
18240: GO 18253
// AddMedal ( Teleport , - 1 ) ;
18242: LD_STRING Teleport
18244: PPUSH
18245: LD_INT 1
18247: NEG
18248: PPUSH
18249: CALL_OW 101
// if sciCounter > 2 then
18253: LD_EXP 28
18257: PUSH
18258: LD_INT 2
18260: GREATER
18261: IFFALSE 18283
// begin m2 := true ;
18263: LD_ADDR_VAR 0 3
18267: PUSH
18268: LD_INT 1
18270: ST_TO_ADDR
// AddMedal ( Materials , 1 ) ;
18271: LD_STRING Materials
18273: PPUSH
18274: LD_INT 1
18276: PPUSH
18277: CALL_OW 101
// end else
18281: GO 18294
// AddMedal ( Materials , - 1 ) ;
18283: LD_STRING Materials
18285: PPUSH
18286: LD_INT 1
18288: NEG
18289: PPUSH
18290: CALL_OW 101
// if sciCounter >= 6 then
18294: LD_EXP 28
18298: PUSH
18299: LD_INT 6
18301: GREATEREQUAL
18302: IFFALSE 18334
// begin m3 := true ;
18304: LD_ADDR_VAR 0 4
18308: PUSH
18309: LD_INT 1
18311: ST_TO_ADDR
// AddMedal ( Scientists , 1 ) ;
18312: LD_STRING Scientists
18314: PPUSH
18315: LD_INT 1
18317: PPUSH
18318: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18322: LD_INT 1
18324: PPUSH
18325: LD_STRING 12_SciDed_1
18327: PPUSH
18328: CALL_OW 39
// end else
18332: GO 18355
// begin AddMedal ( Scientists , - 1 ) ;
18334: LD_STRING Scientists
18336: PPUSH
18337: LD_INT 1
18339: NEG
18340: PPUSH
18341: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18345: LD_INT 0
18347: PPUSH
18348: LD_STRING 12_SciDed_1
18350: PPUSH
18351: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18355: LD_EXP 24
18359: PPUSH
18360: LD_STRING 12_MainDepositFake_1
18362: PPUSH
18363: CALL_OW 39
// if m1 and m2 and m3 and Difficulty >= 3 then
18367: LD_VAR 0 2
18371: PUSH
18372: LD_VAR 0 3
18376: AND
18377: PUSH
18378: LD_VAR 0 4
18382: AND
18383: PUSH
18384: LD_OWVAR 67
18388: PUSH
18389: LD_INT 3
18391: GREATEREQUAL
18392: AND
18393: IFFALSE 18405
// SetAchievementEX ( ACH_AMER , 12 ) ;
18395: LD_STRING ACH_AMER
18397: PPUSH
18398: LD_INT 12
18400: PPUSH
18401: CALL_OW 564
// GiveMedals ( MAIN ) ;
18405: LD_STRING MAIN
18407: PPUSH
18408: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18412: LD_INT 22
18414: PUSH
18415: LD_INT 1
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: PUSH
18422: LD_INT 23
18424: PUSH
18425: LD_INT 1
18427: PUSH
18428: EMPTY
18429: LIST
18430: LIST
18431: PUSH
18432: LD_INT 21
18434: PUSH
18435: LD_INT 1
18437: PUSH
18438: EMPTY
18439: LIST
18440: LIST
18441: PUSH
18442: LD_INT 2
18444: PUSH
18445: LD_INT 25
18447: PUSH
18448: LD_INT 1
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 25
18457: PUSH
18458: LD_INT 2
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: LD_INT 25
18467: PUSH
18468: LD_INT 3
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PUSH
18475: LD_INT 25
18477: PUSH
18478: LD_INT 4
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PUSH
18485: LD_INT 25
18487: PUSH
18488: LD_INT 5
18490: PUSH
18491: EMPTY
18492: LIST
18493: LIST
18494: PUSH
18495: LD_INT 25
18497: PUSH
18498: LD_INT 8
18500: PUSH
18501: EMPTY
18502: LIST
18503: LIST
18504: PUSH
18505: EMPTY
18506: LIST
18507: LIST
18508: LIST
18509: LIST
18510: LIST
18511: LIST
18512: LIST
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: LIST
18519: PPUSH
18520: CALL_OW 69
18524: PPUSH
18525: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18529: LD_EXP 1
18533: PPUSH
18534: LD_EXP 39
18538: PUSH
18539: LD_STRING JMM
18541: STR
18542: PPUSH
18543: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18547: LD_EXP 7
18551: PPUSH
18552: LD_EXP 39
18556: PUSH
18557: LD_STRING Brown
18559: STR
18560: PPUSH
18561: CALL 12602 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18565: LD_EXP 3
18569: PPUSH
18570: LD_EXP 39
18574: PUSH
18575: LD_STRING Donaldson
18577: STR
18578: PPUSH
18579: CALL 12602 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18583: LD_EXP 4
18587: PPUSH
18588: LD_EXP 39
18592: PUSH
18593: LD_STRING Bobby
18595: STR
18596: PPUSH
18597: CALL 12602 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18601: LD_EXP 5
18605: PPUSH
18606: LD_EXP 39
18610: PUSH
18611: LD_STRING Cyrus
18613: STR
18614: PPUSH
18615: CALL 12602 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18619: LD_EXP 2
18623: PPUSH
18624: LD_EXP 39
18628: PUSH
18629: LD_STRING Lisa
18631: STR
18632: PPUSH
18633: CALL 12602 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18637: LD_EXP 12
18641: PPUSH
18642: LD_EXP 39
18646: PUSH
18647: LD_STRING Frank
18649: STR
18650: PPUSH
18651: CALL 12602 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18655: LD_EXP 13
18659: PPUSH
18660: LD_EXP 39
18664: PUSH
18665: LD_STRING Kikuchi
18667: STR
18668: PPUSH
18669: CALL 12602 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18673: LD_EXP 9
18677: PPUSH
18678: LD_EXP 39
18682: PUSH
18683: LD_STRING Houten
18685: STR
18686: PPUSH
18687: CALL 12602 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18691: LD_EXP 11
18695: PPUSH
18696: LD_EXP 39
18700: PUSH
18701: LD_STRING Gary
18703: STR
18704: PPUSH
18705: CALL 12602 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18709: LD_EXP 10
18713: PPUSH
18714: LD_EXP 39
18718: PUSH
18719: LD_STRING Cornell
18721: STR
18722: PPUSH
18723: CALL 12602 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18727: LD_EXP 6
18731: PPUSH
18732: LD_EXP 39
18736: PUSH
18737: LD_STRING Denis
18739: STR
18740: PPUSH
18741: CALL 12602 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18745: LD_EXP 8
18749: PPUSH
18750: LD_EXP 39
18754: PUSH
18755: LD_STRING Gladstone
18757: STR
18758: PPUSH
18759: CALL 12602 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18763: LD_INT 22
18765: PUSH
18766: LD_INT 1
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PUSH
18773: LD_INT 23
18775: PUSH
18776: LD_INT 1
18778: PUSH
18779: EMPTY
18780: LIST
18781: LIST
18782: PUSH
18783: LD_INT 21
18785: PUSH
18786: LD_INT 1
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: PUSH
18793: LD_INT 2
18795: PUSH
18796: LD_INT 25
18798: PUSH
18799: LD_INT 1
18801: PUSH
18802: EMPTY
18803: LIST
18804: LIST
18805: PUSH
18806: LD_INT 25
18808: PUSH
18809: LD_INT 2
18811: PUSH
18812: EMPTY
18813: LIST
18814: LIST
18815: PUSH
18816: LD_INT 25
18818: PUSH
18819: LD_INT 3
18821: PUSH
18822: EMPTY
18823: LIST
18824: LIST
18825: PUSH
18826: LD_INT 25
18828: PUSH
18829: LD_INT 4
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 25
18838: PUSH
18839: LD_INT 5
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: PUSH
18846: LD_INT 25
18848: PUSH
18849: LD_INT 8
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: LIST
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: PPUSH
18871: CALL_OW 69
18875: PUSH
18876: LD_EXP 1
18880: PUSH
18881: LD_EXP 7
18885: PUSH
18886: LD_EXP 3
18890: PUSH
18891: LD_EXP 4
18895: PUSH
18896: LD_EXP 5
18900: PUSH
18901: LD_EXP 2
18905: PUSH
18906: LD_EXP 12
18910: PUSH
18911: LD_EXP 8
18915: PUSH
18916: LD_EXP 13
18920: PUSH
18921: LD_EXP 6
18925: PUSH
18926: LD_EXP 9
18930: PUSH
18931: LD_EXP 11
18935: PUSH
18936: LD_EXP 10
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: LIST
18945: LIST
18946: LIST
18947: LIST
18948: LIST
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: DIFF
18956: PPUSH
18957: LD_STRING 12_other_survivors
18959: PPUSH
18960: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
18964: LD_INT 22
18966: PUSH
18967: LD_INT 1
18969: PUSH
18970: EMPTY
18971: LIST
18972: LIST
18973: PUSH
18974: LD_INT 23
18976: PUSH
18977: LD_INT 2
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PUSH
18984: LD_INT 21
18986: PUSH
18987: LD_INT 1
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: LD_INT 25
18999: PUSH
19000: LD_INT 1
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 25
19009: PUSH
19010: LD_INT 2
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: LD_INT 25
19019: PUSH
19020: LD_INT 3
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PUSH
19027: LD_INT 25
19029: PUSH
19030: LD_INT 4
19032: PUSH
19033: EMPTY
19034: LIST
19035: LIST
19036: PUSH
19037: LD_INT 25
19039: PUSH
19040: LD_INT 5
19042: PUSH
19043: EMPTY
19044: LIST
19045: LIST
19046: PUSH
19047: LD_INT 25
19049: PUSH
19050: LD_INT 8
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: PUSH
19066: EMPTY
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: PPUSH
19072: CALL_OW 69
19076: PPUSH
19077: LD_STRING 12_kurt_squad
19079: PPUSH
19080: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19084: LD_EXP 14
19088: PPUSH
19089: LD_STRING 12_others
19091: PPUSH
19092: CALL_OW 38
// YouWin ;
19096: CALL_OW 103
// end ; end_of_file
19100: LD_VAR 0 1
19104: RET
// every 0 0$01 trigger ruAI and cratesAllow do
19105: LD_EXP 34
19109: PUSH
19110: LD_EXP 45
19114: AND
19115: IFFALSE 19425
19117: GO 19119
19119: DISABLE
// begin repeat wait ( 0 0$08 ) ;
19120: LD_INT 280
19122: PPUSH
19123: CALL_OW 67
// if cratesSpawned < 12 then
19127: LD_EXP 38
19131: PUSH
19132: LD_INT 12
19134: LESS
19135: IFFALSE 19187
// begin wait ( rand ( 0 0$3 , 0 0$10 ) ) ;
19137: LD_INT 105
19139: PPUSH
19140: LD_INT 350
19142: PPUSH
19143: CALL_OW 12
19147: PPUSH
19148: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19152: LD_INT 3
19154: PPUSH
19155: LD_INT 5
19157: PPUSH
19158: CALL_OW 12
19162: PPUSH
19163: LD_INT 21
19165: PPUSH
19166: LD_INT 1
19168: PPUSH
19169: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19173: LD_ADDR_EXP 38
19177: PUSH
19178: LD_EXP 38
19182: PUSH
19183: LD_INT 1
19185: PLUS
19186: ST_TO_ADDR
// end ; if cratesSpawned >= 12 and cratesSpawned < 32 then
19187: LD_EXP 38
19191: PUSH
19192: LD_INT 12
19194: GREATEREQUAL
19195: PUSH
19196: LD_EXP 38
19200: PUSH
19201: LD_INT 32
19203: LESS
19204: AND
19205: IFFALSE 19257
// begin wait ( rand ( 0 0$12 , 0 0$20 ) ) ;
19207: LD_INT 420
19209: PPUSH
19210: LD_INT 700
19212: PPUSH
19213: CALL_OW 12
19217: PPUSH
19218: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19222: LD_INT 3
19224: PPUSH
19225: LD_INT 5
19227: PPUSH
19228: CALL_OW 12
19232: PPUSH
19233: LD_INT 21
19235: PPUSH
19236: LD_INT 1
19238: PPUSH
19239: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19243: LD_ADDR_EXP 38
19247: PUSH
19248: LD_EXP 38
19252: PUSH
19253: LD_INT 1
19255: PLUS
19256: ST_TO_ADDR
// end ; if cratesSpawned >= 32 then
19257: LD_EXP 38
19261: PUSH
19262: LD_INT 32
19264: GREATEREQUAL
19265: IFFALSE 19339
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19267: LD_INT 21
19269: PPUSH
19270: CALL_OW 435
19274: PUSH
19275: LD_INT 14
19277: LESS
19278: IFFALSE 19289
// wait ( 0 0$10 ) else
19280: LD_INT 350
19282: PPUSH
19283: CALL_OW 67
19287: GO 19304
// wait ( rand ( 0 0$50 , 1 1$30 ) ) ;
19289: LD_INT 1750
19291: PPUSH
19292: LD_INT 3150
19294: PPUSH
19295: CALL_OW 12
19299: PPUSH
19300: CALL_OW 67
// CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
19304: LD_INT 2
19306: PPUSH
19307: LD_INT 5
19309: PPUSH
19310: CALL_OW 12
19314: PPUSH
19315: LD_INT 21
19317: PPUSH
19318: LD_INT 1
19320: PPUSH
19321: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19325: LD_ADDR_EXP 38
19329: PUSH
19330: LD_EXP 38
19334: PUSH
19335: LD_INT 1
19337: PLUS
19338: ST_TO_ADDR
// end ; if cratesSpawned >= 110 then
19339: LD_EXP 38
19343: PUSH
19344: LD_INT 110
19346: GREATEREQUAL
19347: IFFALSE 19421
// begin if GetListOfCratesInArea ( CratesArea ) < 14 then
19349: LD_INT 21
19351: PPUSH
19352: CALL_OW 435
19356: PUSH
19357: LD_INT 14
19359: LESS
19360: IFFALSE 19371
// wait ( 0 0$20 ) else
19362: LD_INT 700
19364: PPUSH
19365: CALL_OW 67
19369: GO 19386
// wait ( rand ( 1 1$10 , 1 1$50 ) ) ;
19371: LD_INT 2450
19373: PPUSH
19374: LD_INT 3850
19376: PPUSH
19377: CALL_OW 12
19381: PPUSH
19382: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
19386: LD_INT 1
19388: PPUSH
19389: LD_INT 5
19391: PPUSH
19392: CALL_OW 12
19396: PPUSH
19397: LD_INT 21
19399: PPUSH
19400: LD_INT 1
19402: PPUSH
19403: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19407: LD_ADDR_EXP 38
19411: PUSH
19412: LD_EXP 38
19416: PUSH
19417: LD_INT 1
19419: PLUS
19420: ST_TO_ADDR
// end ; until false ;
19421: LD_INT 0
19423: IFFALSE 19120
// end ; end_of_file end_of_file
19425: END
// export globalGameSaveCounter ; every 0 0$1 do
19426: GO 19428
19428: DISABLE
// begin enable ;
19429: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
19430: LD_STRING updateTimer(
19432: PUSH
19433: LD_OWVAR 1
19437: STR
19438: PUSH
19439: LD_STRING );
19441: STR
19442: PPUSH
19443: CALL_OW 559
// end ;
19447: END
// every 0 0$1 do
19448: GO 19450
19450: DISABLE
// begin globalGameSaveCounter := 0 ;
19451: LD_ADDR_EXP 46
19455: PUSH
19456: LD_INT 0
19458: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
19459: LD_STRING setGameSaveCounter(0)
19461: PPUSH
19462: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
19466: LD_STRING initStreamRollete();
19468: PPUSH
19469: CALL_OW 559
// InitStreamMode ;
19473: CALL 20816 0 0
// DefineStreamItems ( false ) ;
19477: LD_INT 0
19479: PPUSH
19480: CALL 21280 0 1
// end ;
19484: END
// export function SOS_MapStart ( ) ; begin
19485: LD_INT 0
19487: PPUSH
// if streamModeActive then
19488: LD_EXP 47
19492: IFFALSE 19501
// DefineStreamItems ( true ) ;
19494: LD_INT 1
19496: PPUSH
19497: CALL 21280 0 1
// UpdateLuaVariables ( ) ;
19501: CALL 19518 0 0
// UpdateFactoryWaypoints ( ) ;
19505: CALL 34282 0 0
// UpdateWarehouseGatheringPoints ( ) ;
19509: CALL 34534 0 0
// end ;
19513: LD_VAR 0 1
19517: RET
// function UpdateLuaVariables ( ) ; begin
19518: LD_INT 0
19520: PPUSH
// if globalGameSaveCounter then
19521: LD_EXP 46
19525: IFFALSE 19559
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
19527: LD_ADDR_EXP 46
19531: PUSH
19532: LD_EXP 46
19536: PPUSH
19537: CALL 79893 0 1
19541: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
19542: LD_STRING setGameSaveCounter(
19544: PUSH
19545: LD_EXP 46
19549: STR
19550: PUSH
19551: LD_STRING )
19553: STR
19554: PPUSH
19555: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
19559: LD_STRING setGameDifficulty(
19561: PUSH
19562: LD_OWVAR 67
19566: STR
19567: PUSH
19568: LD_STRING )
19570: STR
19571: PPUSH
19572: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
19576: LD_STRING displayDifficulty(
19578: PUSH
19579: LD_OWVAR 67
19583: STR
19584: PUSH
19585: LD_STRING )
19587: STR
19588: PPUSH
19589: CALL_OW 559
// end ;
19593: LD_VAR 0 1
19597: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19598: LD_INT 0
19600: PPUSH
// if p2 = stream_mode then
19601: LD_VAR 0 2
19605: PUSH
19606: LD_INT 100
19608: EQUAL
19609: IFFALSE 20612
// begin if not StreamModeActive then
19611: LD_EXP 47
19615: NOT
19616: IFFALSE 19626
// StreamModeActive := true ;
19618: LD_ADDR_EXP 47
19622: PUSH
19623: LD_INT 1
19625: ST_TO_ADDR
// if p3 = 0 then
19626: LD_VAR 0 3
19630: PUSH
19631: LD_INT 0
19633: EQUAL
19634: IFFALSE 19640
// InitStreamMode ;
19636: CALL 20816 0 0
// if p3 = 1 then
19640: LD_VAR 0 3
19644: PUSH
19645: LD_INT 1
19647: EQUAL
19648: IFFALSE 19658
// sRocket := true ;
19650: LD_ADDR_EXP 52
19654: PUSH
19655: LD_INT 1
19657: ST_TO_ADDR
// if p3 = 2 then
19658: LD_VAR 0 3
19662: PUSH
19663: LD_INT 2
19665: EQUAL
19666: IFFALSE 19676
// sSpeed := true ;
19668: LD_ADDR_EXP 51
19672: PUSH
19673: LD_INT 1
19675: ST_TO_ADDR
// if p3 = 3 then
19676: LD_VAR 0 3
19680: PUSH
19681: LD_INT 3
19683: EQUAL
19684: IFFALSE 19694
// sEngine := true ;
19686: LD_ADDR_EXP 53
19690: PUSH
19691: LD_INT 1
19693: ST_TO_ADDR
// if p3 = 4 then
19694: LD_VAR 0 3
19698: PUSH
19699: LD_INT 4
19701: EQUAL
19702: IFFALSE 19712
// sSpec := true ;
19704: LD_ADDR_EXP 50
19708: PUSH
19709: LD_INT 1
19711: ST_TO_ADDR
// if p3 = 5 then
19712: LD_VAR 0 3
19716: PUSH
19717: LD_INT 5
19719: EQUAL
19720: IFFALSE 19730
// sLevel := true ;
19722: LD_ADDR_EXP 54
19726: PUSH
19727: LD_INT 1
19729: ST_TO_ADDR
// if p3 = 6 then
19730: LD_VAR 0 3
19734: PUSH
19735: LD_INT 6
19737: EQUAL
19738: IFFALSE 19748
// sArmoury := true ;
19740: LD_ADDR_EXP 55
19744: PUSH
19745: LD_INT 1
19747: ST_TO_ADDR
// if p3 = 7 then
19748: LD_VAR 0 3
19752: PUSH
19753: LD_INT 7
19755: EQUAL
19756: IFFALSE 19766
// sRadar := true ;
19758: LD_ADDR_EXP 56
19762: PUSH
19763: LD_INT 1
19765: ST_TO_ADDR
// if p3 = 8 then
19766: LD_VAR 0 3
19770: PUSH
19771: LD_INT 8
19773: EQUAL
19774: IFFALSE 19784
// sBunker := true ;
19776: LD_ADDR_EXP 57
19780: PUSH
19781: LD_INT 1
19783: ST_TO_ADDR
// if p3 = 9 then
19784: LD_VAR 0 3
19788: PUSH
19789: LD_INT 9
19791: EQUAL
19792: IFFALSE 19802
// sHack := true ;
19794: LD_ADDR_EXP 58
19798: PUSH
19799: LD_INT 1
19801: ST_TO_ADDR
// if p3 = 10 then
19802: LD_VAR 0 3
19806: PUSH
19807: LD_INT 10
19809: EQUAL
19810: IFFALSE 19820
// sFire := true ;
19812: LD_ADDR_EXP 59
19816: PUSH
19817: LD_INT 1
19819: ST_TO_ADDR
// if p3 = 11 then
19820: LD_VAR 0 3
19824: PUSH
19825: LD_INT 11
19827: EQUAL
19828: IFFALSE 19838
// sRefresh := true ;
19830: LD_ADDR_EXP 60
19834: PUSH
19835: LD_INT 1
19837: ST_TO_ADDR
// if p3 = 12 then
19838: LD_VAR 0 3
19842: PUSH
19843: LD_INT 12
19845: EQUAL
19846: IFFALSE 19856
// sExp := true ;
19848: LD_ADDR_EXP 61
19852: PUSH
19853: LD_INT 1
19855: ST_TO_ADDR
// if p3 = 13 then
19856: LD_VAR 0 3
19860: PUSH
19861: LD_INT 13
19863: EQUAL
19864: IFFALSE 19874
// sDepot := true ;
19866: LD_ADDR_EXP 62
19870: PUSH
19871: LD_INT 1
19873: ST_TO_ADDR
// if p3 = 14 then
19874: LD_VAR 0 3
19878: PUSH
19879: LD_INT 14
19881: EQUAL
19882: IFFALSE 19892
// sFlag := true ;
19884: LD_ADDR_EXP 63
19888: PUSH
19889: LD_INT 1
19891: ST_TO_ADDR
// if p3 = 15 then
19892: LD_VAR 0 3
19896: PUSH
19897: LD_INT 15
19899: EQUAL
19900: IFFALSE 19910
// sKamikadze := true ;
19902: LD_ADDR_EXP 71
19906: PUSH
19907: LD_INT 1
19909: ST_TO_ADDR
// if p3 = 16 then
19910: LD_VAR 0 3
19914: PUSH
19915: LD_INT 16
19917: EQUAL
19918: IFFALSE 19928
// sTroll := true ;
19920: LD_ADDR_EXP 72
19924: PUSH
19925: LD_INT 1
19927: ST_TO_ADDR
// if p3 = 17 then
19928: LD_VAR 0 3
19932: PUSH
19933: LD_INT 17
19935: EQUAL
19936: IFFALSE 19946
// sSlow := true ;
19938: LD_ADDR_EXP 73
19942: PUSH
19943: LD_INT 1
19945: ST_TO_ADDR
// if p3 = 18 then
19946: LD_VAR 0 3
19950: PUSH
19951: LD_INT 18
19953: EQUAL
19954: IFFALSE 19964
// sLack := true ;
19956: LD_ADDR_EXP 74
19960: PUSH
19961: LD_INT 1
19963: ST_TO_ADDR
// if p3 = 19 then
19964: LD_VAR 0 3
19968: PUSH
19969: LD_INT 19
19971: EQUAL
19972: IFFALSE 19982
// sTank := true ;
19974: LD_ADDR_EXP 76
19978: PUSH
19979: LD_INT 1
19981: ST_TO_ADDR
// if p3 = 20 then
19982: LD_VAR 0 3
19986: PUSH
19987: LD_INT 20
19989: EQUAL
19990: IFFALSE 20000
// sRemote := true ;
19992: LD_ADDR_EXP 77
19996: PUSH
19997: LD_INT 1
19999: ST_TO_ADDR
// if p3 = 21 then
20000: LD_VAR 0 3
20004: PUSH
20005: LD_INT 21
20007: EQUAL
20008: IFFALSE 20018
// sPowell := true ;
20010: LD_ADDR_EXP 78
20014: PUSH
20015: LD_INT 1
20017: ST_TO_ADDR
// if p3 = 22 then
20018: LD_VAR 0 3
20022: PUSH
20023: LD_INT 22
20025: EQUAL
20026: IFFALSE 20036
// sTeleport := true ;
20028: LD_ADDR_EXP 81
20032: PUSH
20033: LD_INT 1
20035: ST_TO_ADDR
// if p3 = 23 then
20036: LD_VAR 0 3
20040: PUSH
20041: LD_INT 23
20043: EQUAL
20044: IFFALSE 20054
// sOilTower := true ;
20046: LD_ADDR_EXP 83
20050: PUSH
20051: LD_INT 1
20053: ST_TO_ADDR
// if p3 = 24 then
20054: LD_VAR 0 3
20058: PUSH
20059: LD_INT 24
20061: EQUAL
20062: IFFALSE 20072
// sShovel := true ;
20064: LD_ADDR_EXP 84
20068: PUSH
20069: LD_INT 1
20071: ST_TO_ADDR
// if p3 = 25 then
20072: LD_VAR 0 3
20076: PUSH
20077: LD_INT 25
20079: EQUAL
20080: IFFALSE 20090
// sSheik := true ;
20082: LD_ADDR_EXP 85
20086: PUSH
20087: LD_INT 1
20089: ST_TO_ADDR
// if p3 = 26 then
20090: LD_VAR 0 3
20094: PUSH
20095: LD_INT 26
20097: EQUAL
20098: IFFALSE 20108
// sEarthquake := true ;
20100: LD_ADDR_EXP 87
20104: PUSH
20105: LD_INT 1
20107: ST_TO_ADDR
// if p3 = 27 then
20108: LD_VAR 0 3
20112: PUSH
20113: LD_INT 27
20115: EQUAL
20116: IFFALSE 20126
// sAI := true ;
20118: LD_ADDR_EXP 88
20122: PUSH
20123: LD_INT 1
20125: ST_TO_ADDR
// if p3 = 28 then
20126: LD_VAR 0 3
20130: PUSH
20131: LD_INT 28
20133: EQUAL
20134: IFFALSE 20144
// sCargo := true ;
20136: LD_ADDR_EXP 91
20140: PUSH
20141: LD_INT 1
20143: ST_TO_ADDR
// if p3 = 29 then
20144: LD_VAR 0 3
20148: PUSH
20149: LD_INT 29
20151: EQUAL
20152: IFFALSE 20162
// sDLaser := true ;
20154: LD_ADDR_EXP 92
20158: PUSH
20159: LD_INT 1
20161: ST_TO_ADDR
// if p3 = 30 then
20162: LD_VAR 0 3
20166: PUSH
20167: LD_INT 30
20169: EQUAL
20170: IFFALSE 20180
// sExchange := true ;
20172: LD_ADDR_EXP 93
20176: PUSH
20177: LD_INT 1
20179: ST_TO_ADDR
// if p3 = 31 then
20180: LD_VAR 0 3
20184: PUSH
20185: LD_INT 31
20187: EQUAL
20188: IFFALSE 20198
// sFac := true ;
20190: LD_ADDR_EXP 94
20194: PUSH
20195: LD_INT 1
20197: ST_TO_ADDR
// if p3 = 32 then
20198: LD_VAR 0 3
20202: PUSH
20203: LD_INT 32
20205: EQUAL
20206: IFFALSE 20216
// sPower := true ;
20208: LD_ADDR_EXP 95
20212: PUSH
20213: LD_INT 1
20215: ST_TO_ADDR
// if p3 = 33 then
20216: LD_VAR 0 3
20220: PUSH
20221: LD_INT 33
20223: EQUAL
20224: IFFALSE 20234
// sRandom := true ;
20226: LD_ADDR_EXP 96
20230: PUSH
20231: LD_INT 1
20233: ST_TO_ADDR
// if p3 = 34 then
20234: LD_VAR 0 3
20238: PUSH
20239: LD_INT 34
20241: EQUAL
20242: IFFALSE 20252
// sShield := true ;
20244: LD_ADDR_EXP 97
20248: PUSH
20249: LD_INT 1
20251: ST_TO_ADDR
// if p3 = 35 then
20252: LD_VAR 0 3
20256: PUSH
20257: LD_INT 35
20259: EQUAL
20260: IFFALSE 20270
// sTime := true ;
20262: LD_ADDR_EXP 98
20266: PUSH
20267: LD_INT 1
20269: ST_TO_ADDR
// if p3 = 36 then
20270: LD_VAR 0 3
20274: PUSH
20275: LD_INT 36
20277: EQUAL
20278: IFFALSE 20288
// sTools := true ;
20280: LD_ADDR_EXP 99
20284: PUSH
20285: LD_INT 1
20287: ST_TO_ADDR
// if p3 = 101 then
20288: LD_VAR 0 3
20292: PUSH
20293: LD_INT 101
20295: EQUAL
20296: IFFALSE 20306
// sSold := true ;
20298: LD_ADDR_EXP 64
20302: PUSH
20303: LD_INT 1
20305: ST_TO_ADDR
// if p3 = 102 then
20306: LD_VAR 0 3
20310: PUSH
20311: LD_INT 102
20313: EQUAL
20314: IFFALSE 20324
// sDiff := true ;
20316: LD_ADDR_EXP 65
20320: PUSH
20321: LD_INT 1
20323: ST_TO_ADDR
// if p3 = 103 then
20324: LD_VAR 0 3
20328: PUSH
20329: LD_INT 103
20331: EQUAL
20332: IFFALSE 20342
// sFog := true ;
20334: LD_ADDR_EXP 68
20338: PUSH
20339: LD_INT 1
20341: ST_TO_ADDR
// if p3 = 104 then
20342: LD_VAR 0 3
20346: PUSH
20347: LD_INT 104
20349: EQUAL
20350: IFFALSE 20360
// sReset := true ;
20352: LD_ADDR_EXP 69
20356: PUSH
20357: LD_INT 1
20359: ST_TO_ADDR
// if p3 = 105 then
20360: LD_VAR 0 3
20364: PUSH
20365: LD_INT 105
20367: EQUAL
20368: IFFALSE 20378
// sSun := true ;
20370: LD_ADDR_EXP 70
20374: PUSH
20375: LD_INT 1
20377: ST_TO_ADDR
// if p3 = 106 then
20378: LD_VAR 0 3
20382: PUSH
20383: LD_INT 106
20385: EQUAL
20386: IFFALSE 20396
// sTiger := true ;
20388: LD_ADDR_EXP 66
20392: PUSH
20393: LD_INT 1
20395: ST_TO_ADDR
// if p3 = 107 then
20396: LD_VAR 0 3
20400: PUSH
20401: LD_INT 107
20403: EQUAL
20404: IFFALSE 20414
// sBomb := true ;
20406: LD_ADDR_EXP 67
20410: PUSH
20411: LD_INT 1
20413: ST_TO_ADDR
// if p3 = 108 then
20414: LD_VAR 0 3
20418: PUSH
20419: LD_INT 108
20421: EQUAL
20422: IFFALSE 20432
// sWound := true ;
20424: LD_ADDR_EXP 75
20428: PUSH
20429: LD_INT 1
20431: ST_TO_ADDR
// if p3 = 109 then
20432: LD_VAR 0 3
20436: PUSH
20437: LD_INT 109
20439: EQUAL
20440: IFFALSE 20450
// sBetray := true ;
20442: LD_ADDR_EXP 79
20446: PUSH
20447: LD_INT 1
20449: ST_TO_ADDR
// if p3 = 110 then
20450: LD_VAR 0 3
20454: PUSH
20455: LD_INT 110
20457: EQUAL
20458: IFFALSE 20468
// sContamin := true ;
20460: LD_ADDR_EXP 80
20464: PUSH
20465: LD_INT 1
20467: ST_TO_ADDR
// if p3 = 111 then
20468: LD_VAR 0 3
20472: PUSH
20473: LD_INT 111
20475: EQUAL
20476: IFFALSE 20486
// sOil := true ;
20478: LD_ADDR_EXP 82
20482: PUSH
20483: LD_INT 1
20485: ST_TO_ADDR
// if p3 = 112 then
20486: LD_VAR 0 3
20490: PUSH
20491: LD_INT 112
20493: EQUAL
20494: IFFALSE 20504
// sStu := true ;
20496: LD_ADDR_EXP 86
20500: PUSH
20501: LD_INT 1
20503: ST_TO_ADDR
// if p3 = 113 then
20504: LD_VAR 0 3
20508: PUSH
20509: LD_INT 113
20511: EQUAL
20512: IFFALSE 20522
// sBazooka := true ;
20514: LD_ADDR_EXP 89
20518: PUSH
20519: LD_INT 1
20521: ST_TO_ADDR
// if p3 = 114 then
20522: LD_VAR 0 3
20526: PUSH
20527: LD_INT 114
20529: EQUAL
20530: IFFALSE 20540
// sMortar := true ;
20532: LD_ADDR_EXP 90
20536: PUSH
20537: LD_INT 1
20539: ST_TO_ADDR
// if p3 = 115 then
20540: LD_VAR 0 3
20544: PUSH
20545: LD_INT 115
20547: EQUAL
20548: IFFALSE 20558
// sRanger := true ;
20550: LD_ADDR_EXP 100
20554: PUSH
20555: LD_INT 1
20557: ST_TO_ADDR
// if p3 = 116 then
20558: LD_VAR 0 3
20562: PUSH
20563: LD_INT 116
20565: EQUAL
20566: IFFALSE 20576
// sComputer := true ;
20568: LD_ADDR_EXP 101
20572: PUSH
20573: LD_INT 1
20575: ST_TO_ADDR
// if p3 = 117 then
20576: LD_VAR 0 3
20580: PUSH
20581: LD_INT 117
20583: EQUAL
20584: IFFALSE 20594
// s30 := true ;
20586: LD_ADDR_EXP 102
20590: PUSH
20591: LD_INT 1
20593: ST_TO_ADDR
// if p3 = 118 then
20594: LD_VAR 0 3
20598: PUSH
20599: LD_INT 118
20601: EQUAL
20602: IFFALSE 20612
// s60 := true ;
20604: LD_ADDR_EXP 103
20608: PUSH
20609: LD_INT 1
20611: ST_TO_ADDR
// end ; if p2 = hack_mode then
20612: LD_VAR 0 2
20616: PUSH
20617: LD_INT 101
20619: EQUAL
20620: IFFALSE 20748
// begin case p3 of 1 :
20622: LD_VAR 0 3
20626: PUSH
20627: LD_INT 1
20629: DOUBLE
20630: EQUAL
20631: IFTRUE 20635
20633: GO 20642
20635: POP
// hHackUnlimitedResources ; 2 :
20636: CALL 32895 0 0
20640: GO 20748
20642: LD_INT 2
20644: DOUBLE
20645: EQUAL
20646: IFTRUE 20650
20648: GO 20657
20650: POP
// hHackSetLevel10 ; 3 :
20651: CALL 33028 0 0
20655: GO 20748
20657: LD_INT 3
20659: DOUBLE
20660: EQUAL
20661: IFTRUE 20665
20663: GO 20672
20665: POP
// hHackSetLevel10YourUnits ; 4 :
20666: CALL 33113 0 0
20670: GO 20748
20672: LD_INT 4
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20687
20680: POP
// hHackInvincible ; 5 :
20681: CALL 33561 0 0
20685: GO 20748
20687: LD_INT 5
20689: DOUBLE
20690: EQUAL
20691: IFTRUE 20695
20693: GO 20702
20695: POP
// hHackInvisible ; 6 :
20696: CALL 33672 0 0
20700: GO 20748
20702: LD_INT 6
20704: DOUBLE
20705: EQUAL
20706: IFTRUE 20710
20708: GO 20717
20710: POP
// hHackChangeYourSide ; 7 :
20711: CALL 33729 0 0
20715: GO 20748
20717: LD_INT 7
20719: DOUBLE
20720: EQUAL
20721: IFTRUE 20725
20723: GO 20732
20725: POP
// hHackChangeUnitSide ; 8 :
20726: CALL 33771 0 0
20730: GO 20748
20732: LD_INT 8
20734: DOUBLE
20735: EQUAL
20736: IFTRUE 20740
20738: GO 20747
20740: POP
// hHackFog ; end ;
20741: CALL 33872 0 0
20745: GO 20748
20747: POP
// end ; if p2 = game_save_mode then
20748: LD_VAR 0 2
20752: PUSH
20753: LD_INT 102
20755: EQUAL
20756: IFFALSE 20811
// begin if p3 = 1 then
20758: LD_VAR 0 3
20762: PUSH
20763: LD_INT 1
20765: EQUAL
20766: IFFALSE 20778
// globalGameSaveCounter := p4 ;
20768: LD_ADDR_EXP 46
20772: PUSH
20773: LD_VAR 0 4
20777: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
20778: LD_VAR 0 3
20782: PUSH
20783: LD_INT 2
20785: EQUAL
20786: PUSH
20787: LD_EXP 46
20791: AND
20792: IFFALSE 20811
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
20794: LD_STRING setGameSaveCounter(
20796: PUSH
20797: LD_EXP 46
20801: STR
20802: PUSH
20803: LD_STRING )
20805: STR
20806: PPUSH
20807: CALL_OW 559
// end ; end ;
20811: LD_VAR 0 7
20815: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
20816: LD_INT 0
20818: PPUSH
// streamModeActive := false ;
20819: LD_ADDR_EXP 47
20823: PUSH
20824: LD_INT 0
20826: ST_TO_ADDR
// normalCounter := 36 ;
20827: LD_ADDR_EXP 48
20831: PUSH
20832: LD_INT 36
20834: ST_TO_ADDR
// hardcoreCounter := 18 ;
20835: LD_ADDR_EXP 49
20839: PUSH
20840: LD_INT 18
20842: ST_TO_ADDR
// sRocket := false ;
20843: LD_ADDR_EXP 52
20847: PUSH
20848: LD_INT 0
20850: ST_TO_ADDR
// sSpeed := false ;
20851: LD_ADDR_EXP 51
20855: PUSH
20856: LD_INT 0
20858: ST_TO_ADDR
// sEngine := false ;
20859: LD_ADDR_EXP 53
20863: PUSH
20864: LD_INT 0
20866: ST_TO_ADDR
// sSpec := false ;
20867: LD_ADDR_EXP 50
20871: PUSH
20872: LD_INT 0
20874: ST_TO_ADDR
// sLevel := false ;
20875: LD_ADDR_EXP 54
20879: PUSH
20880: LD_INT 0
20882: ST_TO_ADDR
// sArmoury := false ;
20883: LD_ADDR_EXP 55
20887: PUSH
20888: LD_INT 0
20890: ST_TO_ADDR
// sRadar := false ;
20891: LD_ADDR_EXP 56
20895: PUSH
20896: LD_INT 0
20898: ST_TO_ADDR
// sBunker := false ;
20899: LD_ADDR_EXP 57
20903: PUSH
20904: LD_INT 0
20906: ST_TO_ADDR
// sHack := false ;
20907: LD_ADDR_EXP 58
20911: PUSH
20912: LD_INT 0
20914: ST_TO_ADDR
// sFire := false ;
20915: LD_ADDR_EXP 59
20919: PUSH
20920: LD_INT 0
20922: ST_TO_ADDR
// sRefresh := false ;
20923: LD_ADDR_EXP 60
20927: PUSH
20928: LD_INT 0
20930: ST_TO_ADDR
// sExp := false ;
20931: LD_ADDR_EXP 61
20935: PUSH
20936: LD_INT 0
20938: ST_TO_ADDR
// sDepot := false ;
20939: LD_ADDR_EXP 62
20943: PUSH
20944: LD_INT 0
20946: ST_TO_ADDR
// sFlag := false ;
20947: LD_ADDR_EXP 63
20951: PUSH
20952: LD_INT 0
20954: ST_TO_ADDR
// sKamikadze := false ;
20955: LD_ADDR_EXP 71
20959: PUSH
20960: LD_INT 0
20962: ST_TO_ADDR
// sTroll := false ;
20963: LD_ADDR_EXP 72
20967: PUSH
20968: LD_INT 0
20970: ST_TO_ADDR
// sSlow := false ;
20971: LD_ADDR_EXP 73
20975: PUSH
20976: LD_INT 0
20978: ST_TO_ADDR
// sLack := false ;
20979: LD_ADDR_EXP 74
20983: PUSH
20984: LD_INT 0
20986: ST_TO_ADDR
// sTank := false ;
20987: LD_ADDR_EXP 76
20991: PUSH
20992: LD_INT 0
20994: ST_TO_ADDR
// sRemote := false ;
20995: LD_ADDR_EXP 77
20999: PUSH
21000: LD_INT 0
21002: ST_TO_ADDR
// sPowell := false ;
21003: LD_ADDR_EXP 78
21007: PUSH
21008: LD_INT 0
21010: ST_TO_ADDR
// sTeleport := false ;
21011: LD_ADDR_EXP 81
21015: PUSH
21016: LD_INT 0
21018: ST_TO_ADDR
// sOilTower := false ;
21019: LD_ADDR_EXP 83
21023: PUSH
21024: LD_INT 0
21026: ST_TO_ADDR
// sShovel := false ;
21027: LD_ADDR_EXP 84
21031: PUSH
21032: LD_INT 0
21034: ST_TO_ADDR
// sSheik := false ;
21035: LD_ADDR_EXP 85
21039: PUSH
21040: LD_INT 0
21042: ST_TO_ADDR
// sEarthquake := false ;
21043: LD_ADDR_EXP 87
21047: PUSH
21048: LD_INT 0
21050: ST_TO_ADDR
// sAI := false ;
21051: LD_ADDR_EXP 88
21055: PUSH
21056: LD_INT 0
21058: ST_TO_ADDR
// sCargo := false ;
21059: LD_ADDR_EXP 91
21063: PUSH
21064: LD_INT 0
21066: ST_TO_ADDR
// sDLaser := false ;
21067: LD_ADDR_EXP 92
21071: PUSH
21072: LD_INT 0
21074: ST_TO_ADDR
// sExchange := false ;
21075: LD_ADDR_EXP 93
21079: PUSH
21080: LD_INT 0
21082: ST_TO_ADDR
// sFac := false ;
21083: LD_ADDR_EXP 94
21087: PUSH
21088: LD_INT 0
21090: ST_TO_ADDR
// sPower := false ;
21091: LD_ADDR_EXP 95
21095: PUSH
21096: LD_INT 0
21098: ST_TO_ADDR
// sRandom := false ;
21099: LD_ADDR_EXP 96
21103: PUSH
21104: LD_INT 0
21106: ST_TO_ADDR
// sShield := false ;
21107: LD_ADDR_EXP 97
21111: PUSH
21112: LD_INT 0
21114: ST_TO_ADDR
// sTime := false ;
21115: LD_ADDR_EXP 98
21119: PUSH
21120: LD_INT 0
21122: ST_TO_ADDR
// sTools := false ;
21123: LD_ADDR_EXP 99
21127: PUSH
21128: LD_INT 0
21130: ST_TO_ADDR
// sSold := false ;
21131: LD_ADDR_EXP 64
21135: PUSH
21136: LD_INT 0
21138: ST_TO_ADDR
// sDiff := false ;
21139: LD_ADDR_EXP 65
21143: PUSH
21144: LD_INT 0
21146: ST_TO_ADDR
// sFog := false ;
21147: LD_ADDR_EXP 68
21151: PUSH
21152: LD_INT 0
21154: ST_TO_ADDR
// sReset := false ;
21155: LD_ADDR_EXP 69
21159: PUSH
21160: LD_INT 0
21162: ST_TO_ADDR
// sSun := false ;
21163: LD_ADDR_EXP 70
21167: PUSH
21168: LD_INT 0
21170: ST_TO_ADDR
// sTiger := false ;
21171: LD_ADDR_EXP 66
21175: PUSH
21176: LD_INT 0
21178: ST_TO_ADDR
// sBomb := false ;
21179: LD_ADDR_EXP 67
21183: PUSH
21184: LD_INT 0
21186: ST_TO_ADDR
// sWound := false ;
21187: LD_ADDR_EXP 75
21191: PUSH
21192: LD_INT 0
21194: ST_TO_ADDR
// sBetray := false ;
21195: LD_ADDR_EXP 79
21199: PUSH
21200: LD_INT 0
21202: ST_TO_ADDR
// sContamin := false ;
21203: LD_ADDR_EXP 80
21207: PUSH
21208: LD_INT 0
21210: ST_TO_ADDR
// sOil := false ;
21211: LD_ADDR_EXP 82
21215: PUSH
21216: LD_INT 0
21218: ST_TO_ADDR
// sStu := false ;
21219: LD_ADDR_EXP 86
21223: PUSH
21224: LD_INT 0
21226: ST_TO_ADDR
// sBazooka := false ;
21227: LD_ADDR_EXP 89
21231: PUSH
21232: LD_INT 0
21234: ST_TO_ADDR
// sMortar := false ;
21235: LD_ADDR_EXP 90
21239: PUSH
21240: LD_INT 0
21242: ST_TO_ADDR
// sRanger := false ;
21243: LD_ADDR_EXP 100
21247: PUSH
21248: LD_INT 0
21250: ST_TO_ADDR
// sComputer := false ;
21251: LD_ADDR_EXP 101
21255: PUSH
21256: LD_INT 0
21258: ST_TO_ADDR
// s30 := false ;
21259: LD_ADDR_EXP 102
21263: PUSH
21264: LD_INT 0
21266: ST_TO_ADDR
// s60 := false ;
21267: LD_ADDR_EXP 103
21271: PUSH
21272: LD_INT 0
21274: ST_TO_ADDR
// end ;
21275: LD_VAR 0 1
21279: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
21280: LD_INT 0
21282: PPUSH
21283: PPUSH
21284: PPUSH
21285: PPUSH
21286: PPUSH
21287: PPUSH
21288: PPUSH
// result := [ ] ;
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: EMPTY
21295: ST_TO_ADDR
// if campaign_id = 1 then
21296: LD_OWVAR 69
21300: PUSH
21301: LD_INT 1
21303: EQUAL
21304: IFFALSE 24470
// begin case mission_number of 1 :
21306: LD_OWVAR 70
21310: PUSH
21311: LD_INT 1
21313: DOUBLE
21314: EQUAL
21315: IFTRUE 21319
21317: GO 21395
21319: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
21320: LD_ADDR_VAR 0 2
21324: PUSH
21325: LD_INT 2
21327: PUSH
21328: LD_INT 4
21330: PUSH
21331: LD_INT 11
21333: PUSH
21334: LD_INT 12
21336: PUSH
21337: LD_INT 15
21339: PUSH
21340: LD_INT 16
21342: PUSH
21343: LD_INT 22
21345: PUSH
21346: LD_INT 23
21348: PUSH
21349: LD_INT 26
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: PUSH
21363: LD_INT 101
21365: PUSH
21366: LD_INT 102
21368: PUSH
21369: LD_INT 106
21371: PUSH
21372: LD_INT 116
21374: PUSH
21375: LD_INT 117
21377: PUSH
21378: LD_INT 118
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: LIST
21387: LIST
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: ST_TO_ADDR
21393: GO 24468
21395: LD_INT 2
21397: DOUBLE
21398: EQUAL
21399: IFTRUE 21403
21401: GO 21487
21403: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
21404: LD_ADDR_VAR 0 2
21408: PUSH
21409: LD_INT 2
21411: PUSH
21412: LD_INT 4
21414: PUSH
21415: LD_INT 11
21417: PUSH
21418: LD_INT 12
21420: PUSH
21421: LD_INT 15
21423: PUSH
21424: LD_INT 16
21426: PUSH
21427: LD_INT 22
21429: PUSH
21430: LD_INT 23
21432: PUSH
21433: LD_INT 26
21435: PUSH
21436: EMPTY
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: PUSH
21447: LD_INT 101
21449: PUSH
21450: LD_INT 102
21452: PUSH
21453: LD_INT 105
21455: PUSH
21456: LD_INT 106
21458: PUSH
21459: LD_INT 108
21461: PUSH
21462: LD_INT 116
21464: PUSH
21465: LD_INT 117
21467: PUSH
21468: LD_INT 118
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: ST_TO_ADDR
21485: GO 24468
21487: LD_INT 3
21489: DOUBLE
21490: EQUAL
21491: IFTRUE 21495
21493: GO 21583
21495: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
21496: LD_ADDR_VAR 0 2
21500: PUSH
21501: LD_INT 2
21503: PUSH
21504: LD_INT 4
21506: PUSH
21507: LD_INT 5
21509: PUSH
21510: LD_INT 11
21512: PUSH
21513: LD_INT 12
21515: PUSH
21516: LD_INT 15
21518: PUSH
21519: LD_INT 16
21521: PUSH
21522: LD_INT 22
21524: PUSH
21525: LD_INT 26
21527: PUSH
21528: LD_INT 36
21530: PUSH
21531: EMPTY
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: PUSH
21543: LD_INT 101
21545: PUSH
21546: LD_INT 102
21548: PUSH
21549: LD_INT 105
21551: PUSH
21552: LD_INT 106
21554: PUSH
21555: LD_INT 108
21557: PUSH
21558: LD_INT 116
21560: PUSH
21561: LD_INT 117
21563: PUSH
21564: LD_INT 118
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: LIST
21571: LIST
21572: LIST
21573: LIST
21574: LIST
21575: LIST
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: ST_TO_ADDR
21581: GO 24468
21583: LD_INT 4
21585: DOUBLE
21586: EQUAL
21587: IFTRUE 21591
21589: GO 21687
21591: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
21592: LD_ADDR_VAR 0 2
21596: PUSH
21597: LD_INT 2
21599: PUSH
21600: LD_INT 4
21602: PUSH
21603: LD_INT 5
21605: PUSH
21606: LD_INT 8
21608: PUSH
21609: LD_INT 11
21611: PUSH
21612: LD_INT 12
21614: PUSH
21615: LD_INT 15
21617: PUSH
21618: LD_INT 16
21620: PUSH
21621: LD_INT 22
21623: PUSH
21624: LD_INT 23
21626: PUSH
21627: LD_INT 26
21629: PUSH
21630: LD_INT 36
21632: PUSH
21633: EMPTY
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: PUSH
21647: LD_INT 101
21649: PUSH
21650: LD_INT 102
21652: PUSH
21653: LD_INT 105
21655: PUSH
21656: LD_INT 106
21658: PUSH
21659: LD_INT 108
21661: PUSH
21662: LD_INT 116
21664: PUSH
21665: LD_INT 117
21667: PUSH
21668: LD_INT 118
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: LIST
21678: LIST
21679: LIST
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: ST_TO_ADDR
21685: GO 24468
21687: LD_INT 5
21689: DOUBLE
21690: EQUAL
21691: IFTRUE 21695
21693: GO 21807
21695: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
21696: LD_ADDR_VAR 0 2
21700: PUSH
21701: LD_INT 2
21703: PUSH
21704: LD_INT 4
21706: PUSH
21707: LD_INT 5
21709: PUSH
21710: LD_INT 6
21712: PUSH
21713: LD_INT 8
21715: PUSH
21716: LD_INT 11
21718: PUSH
21719: LD_INT 12
21721: PUSH
21722: LD_INT 15
21724: PUSH
21725: LD_INT 16
21727: PUSH
21728: LD_INT 22
21730: PUSH
21731: LD_INT 23
21733: PUSH
21734: LD_INT 25
21736: PUSH
21737: LD_INT 26
21739: PUSH
21740: LD_INT 36
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: PUSH
21759: LD_INT 101
21761: PUSH
21762: LD_INT 102
21764: PUSH
21765: LD_INT 105
21767: PUSH
21768: LD_INT 106
21770: PUSH
21771: LD_INT 108
21773: PUSH
21774: LD_INT 109
21776: PUSH
21777: LD_INT 112
21779: PUSH
21780: LD_INT 116
21782: PUSH
21783: LD_INT 117
21785: PUSH
21786: LD_INT 118
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: LIST
21793: LIST
21794: LIST
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: LIST
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: ST_TO_ADDR
21805: GO 24468
21807: LD_INT 6
21809: DOUBLE
21810: EQUAL
21811: IFTRUE 21815
21813: GO 21947
21815: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
21816: LD_ADDR_VAR 0 2
21820: PUSH
21821: LD_INT 2
21823: PUSH
21824: LD_INT 4
21826: PUSH
21827: LD_INT 5
21829: PUSH
21830: LD_INT 6
21832: PUSH
21833: LD_INT 8
21835: PUSH
21836: LD_INT 11
21838: PUSH
21839: LD_INT 12
21841: PUSH
21842: LD_INT 15
21844: PUSH
21845: LD_INT 16
21847: PUSH
21848: LD_INT 20
21850: PUSH
21851: LD_INT 21
21853: PUSH
21854: LD_INT 22
21856: PUSH
21857: LD_INT 23
21859: PUSH
21860: LD_INT 25
21862: PUSH
21863: LD_INT 26
21865: PUSH
21866: LD_INT 30
21868: PUSH
21869: LD_INT 31
21871: PUSH
21872: LD_INT 32
21874: PUSH
21875: LD_INT 36
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: LIST
21896: LIST
21897: LIST
21898: PUSH
21899: LD_INT 101
21901: PUSH
21902: LD_INT 102
21904: PUSH
21905: LD_INT 105
21907: PUSH
21908: LD_INT 106
21910: PUSH
21911: LD_INT 108
21913: PUSH
21914: LD_INT 109
21916: PUSH
21917: LD_INT 112
21919: PUSH
21920: LD_INT 116
21922: PUSH
21923: LD_INT 117
21925: PUSH
21926: LD_INT 118
21928: PUSH
21929: EMPTY
21930: LIST
21931: LIST
21932: LIST
21933: LIST
21934: LIST
21935: LIST
21936: LIST
21937: LIST
21938: LIST
21939: LIST
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: ST_TO_ADDR
21945: GO 24468
21947: LD_INT 7
21949: DOUBLE
21950: EQUAL
21951: IFTRUE 21955
21953: GO 22067
21955: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
21956: LD_ADDR_VAR 0 2
21960: PUSH
21961: LD_INT 2
21963: PUSH
21964: LD_INT 4
21966: PUSH
21967: LD_INT 5
21969: PUSH
21970: LD_INT 7
21972: PUSH
21973: LD_INT 11
21975: PUSH
21976: LD_INT 12
21978: PUSH
21979: LD_INT 15
21981: PUSH
21982: LD_INT 16
21984: PUSH
21985: LD_INT 20
21987: PUSH
21988: LD_INT 21
21990: PUSH
21991: LD_INT 22
21993: PUSH
21994: LD_INT 23
21996: PUSH
21997: LD_INT 25
21999: PUSH
22000: LD_INT 26
22002: PUSH
22003: EMPTY
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: PUSH
22019: LD_INT 101
22021: PUSH
22022: LD_INT 102
22024: PUSH
22025: LD_INT 103
22027: PUSH
22028: LD_INT 105
22030: PUSH
22031: LD_INT 106
22033: PUSH
22034: LD_INT 108
22036: PUSH
22037: LD_INT 112
22039: PUSH
22040: LD_INT 116
22042: PUSH
22043: LD_INT 117
22045: PUSH
22046: LD_INT 118
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: PUSH
22061: EMPTY
22062: LIST
22063: LIST
22064: ST_TO_ADDR
22065: GO 24468
22067: LD_INT 8
22069: DOUBLE
22070: EQUAL
22071: IFTRUE 22075
22073: GO 22215
22075: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
22076: LD_ADDR_VAR 0 2
22080: PUSH
22081: LD_INT 2
22083: PUSH
22084: LD_INT 4
22086: PUSH
22087: LD_INT 5
22089: PUSH
22090: LD_INT 6
22092: PUSH
22093: LD_INT 7
22095: PUSH
22096: LD_INT 8
22098: PUSH
22099: LD_INT 11
22101: PUSH
22102: LD_INT 12
22104: PUSH
22105: LD_INT 15
22107: PUSH
22108: LD_INT 16
22110: PUSH
22111: LD_INT 20
22113: PUSH
22114: LD_INT 21
22116: PUSH
22117: LD_INT 22
22119: PUSH
22120: LD_INT 23
22122: PUSH
22123: LD_INT 25
22125: PUSH
22126: LD_INT 26
22128: PUSH
22129: LD_INT 30
22131: PUSH
22132: LD_INT 31
22134: PUSH
22135: LD_INT 32
22137: PUSH
22138: LD_INT 36
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: LIST
22151: LIST
22152: LIST
22153: LIST
22154: LIST
22155: LIST
22156: LIST
22157: LIST
22158: LIST
22159: LIST
22160: LIST
22161: LIST
22162: PUSH
22163: LD_INT 101
22165: PUSH
22166: LD_INT 102
22168: PUSH
22169: LD_INT 103
22171: PUSH
22172: LD_INT 105
22174: PUSH
22175: LD_INT 106
22177: PUSH
22178: LD_INT 108
22180: PUSH
22181: LD_INT 109
22183: PUSH
22184: LD_INT 112
22186: PUSH
22187: LD_INT 116
22189: PUSH
22190: LD_INT 117
22192: PUSH
22193: LD_INT 118
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: LIST
22202: LIST
22203: LIST
22204: LIST
22205: LIST
22206: LIST
22207: LIST
22208: PUSH
22209: EMPTY
22210: LIST
22211: LIST
22212: ST_TO_ADDR
22213: GO 24468
22215: LD_INT 9
22217: DOUBLE
22218: EQUAL
22219: IFTRUE 22223
22221: GO 22371
22223: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
22224: LD_ADDR_VAR 0 2
22228: PUSH
22229: LD_INT 2
22231: PUSH
22232: LD_INT 4
22234: PUSH
22235: LD_INT 5
22237: PUSH
22238: LD_INT 6
22240: PUSH
22241: LD_INT 7
22243: PUSH
22244: LD_INT 8
22246: PUSH
22247: LD_INT 11
22249: PUSH
22250: LD_INT 12
22252: PUSH
22253: LD_INT 15
22255: PUSH
22256: LD_INT 16
22258: PUSH
22259: LD_INT 20
22261: PUSH
22262: LD_INT 21
22264: PUSH
22265: LD_INT 22
22267: PUSH
22268: LD_INT 23
22270: PUSH
22271: LD_INT 25
22273: PUSH
22274: LD_INT 26
22276: PUSH
22277: LD_INT 28
22279: PUSH
22280: LD_INT 30
22282: PUSH
22283: LD_INT 31
22285: PUSH
22286: LD_INT 32
22288: PUSH
22289: LD_INT 36
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: LIST
22296: LIST
22297: LIST
22298: LIST
22299: LIST
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: LIST
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: PUSH
22315: LD_INT 101
22317: PUSH
22318: LD_INT 102
22320: PUSH
22321: LD_INT 103
22323: PUSH
22324: LD_INT 105
22326: PUSH
22327: LD_INT 106
22329: PUSH
22330: LD_INT 108
22332: PUSH
22333: LD_INT 109
22335: PUSH
22336: LD_INT 112
22338: PUSH
22339: LD_INT 114
22341: PUSH
22342: LD_INT 116
22344: PUSH
22345: LD_INT 117
22347: PUSH
22348: LD_INT 118
22350: PUSH
22351: EMPTY
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: LIST
22357: LIST
22358: LIST
22359: LIST
22360: LIST
22361: LIST
22362: LIST
22363: LIST
22364: PUSH
22365: EMPTY
22366: LIST
22367: LIST
22368: ST_TO_ADDR
22369: GO 24468
22371: LD_INT 10
22373: DOUBLE
22374: EQUAL
22375: IFTRUE 22379
22377: GO 22575
22379: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
22380: LD_ADDR_VAR 0 2
22384: PUSH
22385: LD_INT 2
22387: PUSH
22388: LD_INT 4
22390: PUSH
22391: LD_INT 5
22393: PUSH
22394: LD_INT 6
22396: PUSH
22397: LD_INT 7
22399: PUSH
22400: LD_INT 8
22402: PUSH
22403: LD_INT 9
22405: PUSH
22406: LD_INT 10
22408: PUSH
22409: LD_INT 11
22411: PUSH
22412: LD_INT 12
22414: PUSH
22415: LD_INT 13
22417: PUSH
22418: LD_INT 14
22420: PUSH
22421: LD_INT 15
22423: PUSH
22424: LD_INT 16
22426: PUSH
22427: LD_INT 17
22429: PUSH
22430: LD_INT 18
22432: PUSH
22433: LD_INT 19
22435: PUSH
22436: LD_INT 20
22438: PUSH
22439: LD_INT 21
22441: PUSH
22442: LD_INT 22
22444: PUSH
22445: LD_INT 23
22447: PUSH
22448: LD_INT 24
22450: PUSH
22451: LD_INT 25
22453: PUSH
22454: LD_INT 26
22456: PUSH
22457: LD_INT 28
22459: PUSH
22460: LD_INT 30
22462: PUSH
22463: LD_INT 31
22465: PUSH
22466: LD_INT 32
22468: PUSH
22469: LD_INT 36
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: LIST
22477: LIST
22478: LIST
22479: LIST
22480: LIST
22481: LIST
22482: LIST
22483: LIST
22484: LIST
22485: LIST
22486: LIST
22487: LIST
22488: LIST
22489: LIST
22490: LIST
22491: LIST
22492: LIST
22493: LIST
22494: LIST
22495: LIST
22496: LIST
22497: LIST
22498: LIST
22499: LIST
22500: LIST
22501: LIST
22502: PUSH
22503: LD_INT 101
22505: PUSH
22506: LD_INT 102
22508: PUSH
22509: LD_INT 103
22511: PUSH
22512: LD_INT 104
22514: PUSH
22515: LD_INT 105
22517: PUSH
22518: LD_INT 106
22520: PUSH
22521: LD_INT 107
22523: PUSH
22524: LD_INT 108
22526: PUSH
22527: LD_INT 109
22529: PUSH
22530: LD_INT 110
22532: PUSH
22533: LD_INT 111
22535: PUSH
22536: LD_INT 112
22538: PUSH
22539: LD_INT 114
22541: PUSH
22542: LD_INT 116
22544: PUSH
22545: LD_INT 117
22547: PUSH
22548: LD_INT 118
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: PUSH
22569: EMPTY
22570: LIST
22571: LIST
22572: ST_TO_ADDR
22573: GO 24468
22575: LD_INT 11
22577: DOUBLE
22578: EQUAL
22579: IFTRUE 22583
22581: GO 22787
22583: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
22584: LD_ADDR_VAR 0 2
22588: PUSH
22589: LD_INT 2
22591: PUSH
22592: LD_INT 3
22594: PUSH
22595: LD_INT 4
22597: PUSH
22598: LD_INT 5
22600: PUSH
22601: LD_INT 6
22603: PUSH
22604: LD_INT 7
22606: PUSH
22607: LD_INT 8
22609: PUSH
22610: LD_INT 9
22612: PUSH
22613: LD_INT 10
22615: PUSH
22616: LD_INT 11
22618: PUSH
22619: LD_INT 12
22621: PUSH
22622: LD_INT 13
22624: PUSH
22625: LD_INT 14
22627: PUSH
22628: LD_INT 15
22630: PUSH
22631: LD_INT 16
22633: PUSH
22634: LD_INT 17
22636: PUSH
22637: LD_INT 18
22639: PUSH
22640: LD_INT 19
22642: PUSH
22643: LD_INT 20
22645: PUSH
22646: LD_INT 21
22648: PUSH
22649: LD_INT 22
22651: PUSH
22652: LD_INT 23
22654: PUSH
22655: LD_INT 24
22657: PUSH
22658: LD_INT 25
22660: PUSH
22661: LD_INT 26
22663: PUSH
22664: LD_INT 28
22666: PUSH
22667: LD_INT 30
22669: PUSH
22670: LD_INT 31
22672: PUSH
22673: LD_INT 32
22675: PUSH
22676: LD_INT 34
22678: PUSH
22679: LD_INT 36
22681: PUSH
22682: EMPTY
22683: LIST
22684: LIST
22685: LIST
22686: LIST
22687: LIST
22688: LIST
22689: LIST
22690: LIST
22691: LIST
22692: LIST
22693: LIST
22694: LIST
22695: LIST
22696: LIST
22697: LIST
22698: LIST
22699: LIST
22700: LIST
22701: LIST
22702: LIST
22703: LIST
22704: LIST
22705: LIST
22706: LIST
22707: LIST
22708: LIST
22709: LIST
22710: LIST
22711: LIST
22712: LIST
22713: LIST
22714: PUSH
22715: LD_INT 101
22717: PUSH
22718: LD_INT 102
22720: PUSH
22721: LD_INT 103
22723: PUSH
22724: LD_INT 104
22726: PUSH
22727: LD_INT 105
22729: PUSH
22730: LD_INT 106
22732: PUSH
22733: LD_INT 107
22735: PUSH
22736: LD_INT 108
22738: PUSH
22739: LD_INT 109
22741: PUSH
22742: LD_INT 110
22744: PUSH
22745: LD_INT 111
22747: PUSH
22748: LD_INT 112
22750: PUSH
22751: LD_INT 114
22753: PUSH
22754: LD_INT 116
22756: PUSH
22757: LD_INT 117
22759: PUSH
22760: LD_INT 118
22762: PUSH
22763: EMPTY
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: PUSH
22781: EMPTY
22782: LIST
22783: LIST
22784: ST_TO_ADDR
22785: GO 24468
22787: LD_INT 12
22789: DOUBLE
22790: EQUAL
22791: IFTRUE 22795
22793: GO 23015
22795: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
22796: LD_ADDR_VAR 0 2
22800: PUSH
22801: LD_INT 1
22803: PUSH
22804: LD_INT 2
22806: PUSH
22807: LD_INT 3
22809: PUSH
22810: LD_INT 4
22812: PUSH
22813: LD_INT 5
22815: PUSH
22816: LD_INT 6
22818: PUSH
22819: LD_INT 7
22821: PUSH
22822: LD_INT 8
22824: PUSH
22825: LD_INT 9
22827: PUSH
22828: LD_INT 10
22830: PUSH
22831: LD_INT 11
22833: PUSH
22834: LD_INT 12
22836: PUSH
22837: LD_INT 13
22839: PUSH
22840: LD_INT 14
22842: PUSH
22843: LD_INT 15
22845: PUSH
22846: LD_INT 16
22848: PUSH
22849: LD_INT 17
22851: PUSH
22852: LD_INT 18
22854: PUSH
22855: LD_INT 19
22857: PUSH
22858: LD_INT 20
22860: PUSH
22861: LD_INT 21
22863: PUSH
22864: LD_INT 22
22866: PUSH
22867: LD_INT 23
22869: PUSH
22870: LD_INT 24
22872: PUSH
22873: LD_INT 25
22875: PUSH
22876: LD_INT 26
22878: PUSH
22879: LD_INT 27
22881: PUSH
22882: LD_INT 28
22884: PUSH
22885: LD_INT 30
22887: PUSH
22888: LD_INT 31
22890: PUSH
22891: LD_INT 32
22893: PUSH
22894: LD_INT 33
22896: PUSH
22897: LD_INT 34
22899: PUSH
22900: LD_INT 36
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: LIST
22907: LIST
22908: LIST
22909: LIST
22910: LIST
22911: LIST
22912: LIST
22913: LIST
22914: LIST
22915: LIST
22916: LIST
22917: LIST
22918: LIST
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: LIST
22924: LIST
22925: LIST
22926: LIST
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: LIST
22932: LIST
22933: LIST
22934: LIST
22935: LIST
22936: LIST
22937: LIST
22938: PUSH
22939: LD_INT 101
22941: PUSH
22942: LD_INT 102
22944: PUSH
22945: LD_INT 103
22947: PUSH
22948: LD_INT 104
22950: PUSH
22951: LD_INT 105
22953: PUSH
22954: LD_INT 106
22956: PUSH
22957: LD_INT 107
22959: PUSH
22960: LD_INT 108
22962: PUSH
22963: LD_INT 109
22965: PUSH
22966: LD_INT 110
22968: PUSH
22969: LD_INT 111
22971: PUSH
22972: LD_INT 112
22974: PUSH
22975: LD_INT 113
22977: PUSH
22978: LD_INT 114
22980: PUSH
22981: LD_INT 116
22983: PUSH
22984: LD_INT 117
22986: PUSH
22987: LD_INT 118
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: LIST
22994: LIST
22995: LIST
22996: LIST
22997: LIST
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: PUSH
23009: EMPTY
23010: LIST
23011: LIST
23012: ST_TO_ADDR
23013: GO 24468
23015: LD_INT 13
23017: DOUBLE
23018: EQUAL
23019: IFTRUE 23023
23021: GO 23231
23023: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
23024: LD_ADDR_VAR 0 2
23028: PUSH
23029: LD_INT 1
23031: PUSH
23032: LD_INT 2
23034: PUSH
23035: LD_INT 3
23037: PUSH
23038: LD_INT 4
23040: PUSH
23041: LD_INT 5
23043: PUSH
23044: LD_INT 8
23046: PUSH
23047: LD_INT 9
23049: PUSH
23050: LD_INT 10
23052: PUSH
23053: LD_INT 11
23055: PUSH
23056: LD_INT 12
23058: PUSH
23059: LD_INT 14
23061: PUSH
23062: LD_INT 15
23064: PUSH
23065: LD_INT 16
23067: PUSH
23068: LD_INT 17
23070: PUSH
23071: LD_INT 18
23073: PUSH
23074: LD_INT 19
23076: PUSH
23077: LD_INT 20
23079: PUSH
23080: LD_INT 21
23082: PUSH
23083: LD_INT 22
23085: PUSH
23086: LD_INT 23
23088: PUSH
23089: LD_INT 24
23091: PUSH
23092: LD_INT 25
23094: PUSH
23095: LD_INT 26
23097: PUSH
23098: LD_INT 27
23100: PUSH
23101: LD_INT 28
23103: PUSH
23104: LD_INT 30
23106: PUSH
23107: LD_INT 31
23109: PUSH
23110: LD_INT 32
23112: PUSH
23113: LD_INT 33
23115: PUSH
23116: LD_INT 34
23118: PUSH
23119: LD_INT 36
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: LIST
23126: LIST
23127: LIST
23128: LIST
23129: LIST
23130: LIST
23131: LIST
23132: LIST
23133: LIST
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: LIST
23142: LIST
23143: LIST
23144: LIST
23145: LIST
23146: LIST
23147: LIST
23148: LIST
23149: LIST
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 101
23157: PUSH
23158: LD_INT 102
23160: PUSH
23161: LD_INT 103
23163: PUSH
23164: LD_INT 104
23166: PUSH
23167: LD_INT 105
23169: PUSH
23170: LD_INT 106
23172: PUSH
23173: LD_INT 107
23175: PUSH
23176: LD_INT 108
23178: PUSH
23179: LD_INT 109
23181: PUSH
23182: LD_INT 110
23184: PUSH
23185: LD_INT 111
23187: PUSH
23188: LD_INT 112
23190: PUSH
23191: LD_INT 113
23193: PUSH
23194: LD_INT 114
23196: PUSH
23197: LD_INT 116
23199: PUSH
23200: LD_INT 117
23202: PUSH
23203: LD_INT 118
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: LIST
23210: LIST
23211: LIST
23212: LIST
23213: LIST
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: LIST
23219: LIST
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: PUSH
23225: EMPTY
23226: LIST
23227: LIST
23228: ST_TO_ADDR
23229: GO 24468
23231: LD_INT 14
23233: DOUBLE
23234: EQUAL
23235: IFTRUE 23239
23237: GO 23463
23239: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
23240: LD_ADDR_VAR 0 2
23244: PUSH
23245: LD_INT 1
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 3
23253: PUSH
23254: LD_INT 4
23256: PUSH
23257: LD_INT 5
23259: PUSH
23260: LD_INT 6
23262: PUSH
23263: LD_INT 7
23265: PUSH
23266: LD_INT 8
23268: PUSH
23269: LD_INT 9
23271: PUSH
23272: LD_INT 10
23274: PUSH
23275: LD_INT 11
23277: PUSH
23278: LD_INT 12
23280: PUSH
23281: LD_INT 13
23283: PUSH
23284: LD_INT 14
23286: PUSH
23287: LD_INT 15
23289: PUSH
23290: LD_INT 16
23292: PUSH
23293: LD_INT 17
23295: PUSH
23296: LD_INT 18
23298: PUSH
23299: LD_INT 19
23301: PUSH
23302: LD_INT 20
23304: PUSH
23305: LD_INT 21
23307: PUSH
23308: LD_INT 22
23310: PUSH
23311: LD_INT 23
23313: PUSH
23314: LD_INT 24
23316: PUSH
23317: LD_INT 25
23319: PUSH
23320: LD_INT 26
23322: PUSH
23323: LD_INT 27
23325: PUSH
23326: LD_INT 28
23328: PUSH
23329: LD_INT 29
23331: PUSH
23332: LD_INT 30
23334: PUSH
23335: LD_INT 31
23337: PUSH
23338: LD_INT 32
23340: PUSH
23341: LD_INT 33
23343: PUSH
23344: LD_INT 34
23346: PUSH
23347: LD_INT 36
23349: PUSH
23350: EMPTY
23351: LIST
23352: LIST
23353: LIST
23354: LIST
23355: LIST
23356: LIST
23357: LIST
23358: LIST
23359: LIST
23360: LIST
23361: LIST
23362: LIST
23363: LIST
23364: LIST
23365: LIST
23366: LIST
23367: LIST
23368: LIST
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: LIST
23375: LIST
23376: LIST
23377: LIST
23378: LIST
23379: LIST
23380: LIST
23381: LIST
23382: LIST
23383: LIST
23384: LIST
23385: LIST
23386: PUSH
23387: LD_INT 101
23389: PUSH
23390: LD_INT 102
23392: PUSH
23393: LD_INT 103
23395: PUSH
23396: LD_INT 104
23398: PUSH
23399: LD_INT 105
23401: PUSH
23402: LD_INT 106
23404: PUSH
23405: LD_INT 107
23407: PUSH
23408: LD_INT 108
23410: PUSH
23411: LD_INT 109
23413: PUSH
23414: LD_INT 110
23416: PUSH
23417: LD_INT 111
23419: PUSH
23420: LD_INT 112
23422: PUSH
23423: LD_INT 113
23425: PUSH
23426: LD_INT 114
23428: PUSH
23429: LD_INT 116
23431: PUSH
23432: LD_INT 117
23434: PUSH
23435: LD_INT 118
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: LIST
23442: LIST
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: LIST
23448: LIST
23449: LIST
23450: LIST
23451: LIST
23452: LIST
23453: LIST
23454: LIST
23455: LIST
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: ST_TO_ADDR
23461: GO 24468
23463: LD_INT 15
23465: DOUBLE
23466: EQUAL
23467: IFTRUE 23471
23469: GO 23695
23471: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
23472: LD_ADDR_VAR 0 2
23476: PUSH
23477: LD_INT 1
23479: PUSH
23480: LD_INT 2
23482: PUSH
23483: LD_INT 3
23485: PUSH
23486: LD_INT 4
23488: PUSH
23489: LD_INT 5
23491: PUSH
23492: LD_INT 6
23494: PUSH
23495: LD_INT 7
23497: PUSH
23498: LD_INT 8
23500: PUSH
23501: LD_INT 9
23503: PUSH
23504: LD_INT 10
23506: PUSH
23507: LD_INT 11
23509: PUSH
23510: LD_INT 12
23512: PUSH
23513: LD_INT 13
23515: PUSH
23516: LD_INT 14
23518: PUSH
23519: LD_INT 15
23521: PUSH
23522: LD_INT 16
23524: PUSH
23525: LD_INT 17
23527: PUSH
23528: LD_INT 18
23530: PUSH
23531: LD_INT 19
23533: PUSH
23534: LD_INT 20
23536: PUSH
23537: LD_INT 21
23539: PUSH
23540: LD_INT 22
23542: PUSH
23543: LD_INT 23
23545: PUSH
23546: LD_INT 24
23548: PUSH
23549: LD_INT 25
23551: PUSH
23552: LD_INT 26
23554: PUSH
23555: LD_INT 27
23557: PUSH
23558: LD_INT 28
23560: PUSH
23561: LD_INT 29
23563: PUSH
23564: LD_INT 30
23566: PUSH
23567: LD_INT 31
23569: PUSH
23570: LD_INT 32
23572: PUSH
23573: LD_INT 33
23575: PUSH
23576: LD_INT 34
23578: PUSH
23579: LD_INT 36
23581: PUSH
23582: EMPTY
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 101
23621: PUSH
23622: LD_INT 102
23624: PUSH
23625: LD_INT 103
23627: PUSH
23628: LD_INT 104
23630: PUSH
23631: LD_INT 105
23633: PUSH
23634: LD_INT 106
23636: PUSH
23637: LD_INT 107
23639: PUSH
23640: LD_INT 108
23642: PUSH
23643: LD_INT 109
23645: PUSH
23646: LD_INT 110
23648: PUSH
23649: LD_INT 111
23651: PUSH
23652: LD_INT 112
23654: PUSH
23655: LD_INT 113
23657: PUSH
23658: LD_INT 114
23660: PUSH
23661: LD_INT 116
23663: PUSH
23664: LD_INT 117
23666: PUSH
23667: LD_INT 118
23669: PUSH
23670: EMPTY
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: LIST
23685: LIST
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: ST_TO_ADDR
23693: GO 24468
23695: LD_INT 16
23697: DOUBLE
23698: EQUAL
23699: IFTRUE 23703
23701: GO 23839
23703: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
23704: LD_ADDR_VAR 0 2
23708: PUSH
23709: LD_INT 2
23711: PUSH
23712: LD_INT 4
23714: PUSH
23715: LD_INT 5
23717: PUSH
23718: LD_INT 7
23720: PUSH
23721: LD_INT 11
23723: PUSH
23724: LD_INT 12
23726: PUSH
23727: LD_INT 15
23729: PUSH
23730: LD_INT 16
23732: PUSH
23733: LD_INT 20
23735: PUSH
23736: LD_INT 21
23738: PUSH
23739: LD_INT 22
23741: PUSH
23742: LD_INT 23
23744: PUSH
23745: LD_INT 25
23747: PUSH
23748: LD_INT 26
23750: PUSH
23751: LD_INT 30
23753: PUSH
23754: LD_INT 31
23756: PUSH
23757: LD_INT 32
23759: PUSH
23760: LD_INT 33
23762: PUSH
23763: LD_INT 34
23765: PUSH
23766: EMPTY
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: LIST
23773: LIST
23774: LIST
23775: LIST
23776: LIST
23777: LIST
23778: LIST
23779: LIST
23780: LIST
23781: LIST
23782: LIST
23783: LIST
23784: LIST
23785: LIST
23786: PUSH
23787: LD_INT 101
23789: PUSH
23790: LD_INT 102
23792: PUSH
23793: LD_INT 103
23795: PUSH
23796: LD_INT 106
23798: PUSH
23799: LD_INT 108
23801: PUSH
23802: LD_INT 112
23804: PUSH
23805: LD_INT 113
23807: PUSH
23808: LD_INT 114
23810: PUSH
23811: LD_INT 116
23813: PUSH
23814: LD_INT 117
23816: PUSH
23817: LD_INT 118
23819: PUSH
23820: EMPTY
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: ST_TO_ADDR
23837: GO 24468
23839: LD_INT 17
23841: DOUBLE
23842: EQUAL
23843: IFTRUE 23847
23845: GO 24071
23847: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
23848: LD_ADDR_VAR 0 2
23852: PUSH
23853: LD_INT 1
23855: PUSH
23856: LD_INT 2
23858: PUSH
23859: LD_INT 3
23861: PUSH
23862: LD_INT 4
23864: PUSH
23865: LD_INT 5
23867: PUSH
23868: LD_INT 6
23870: PUSH
23871: LD_INT 7
23873: PUSH
23874: LD_INT 8
23876: PUSH
23877: LD_INT 9
23879: PUSH
23880: LD_INT 10
23882: PUSH
23883: LD_INT 11
23885: PUSH
23886: LD_INT 12
23888: PUSH
23889: LD_INT 13
23891: PUSH
23892: LD_INT 14
23894: PUSH
23895: LD_INT 15
23897: PUSH
23898: LD_INT 16
23900: PUSH
23901: LD_INT 17
23903: PUSH
23904: LD_INT 18
23906: PUSH
23907: LD_INT 19
23909: PUSH
23910: LD_INT 20
23912: PUSH
23913: LD_INT 21
23915: PUSH
23916: LD_INT 22
23918: PUSH
23919: LD_INT 23
23921: PUSH
23922: LD_INT 24
23924: PUSH
23925: LD_INT 25
23927: PUSH
23928: LD_INT 26
23930: PUSH
23931: LD_INT 27
23933: PUSH
23934: LD_INT 28
23936: PUSH
23937: LD_INT 29
23939: PUSH
23940: LD_INT 30
23942: PUSH
23943: LD_INT 31
23945: PUSH
23946: LD_INT 32
23948: PUSH
23949: LD_INT 33
23951: PUSH
23952: LD_INT 34
23954: PUSH
23955: LD_INT 36
23957: PUSH
23958: EMPTY
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 101
23997: PUSH
23998: LD_INT 102
24000: PUSH
24001: LD_INT 103
24003: PUSH
24004: LD_INT 104
24006: PUSH
24007: LD_INT 105
24009: PUSH
24010: LD_INT 106
24012: PUSH
24013: LD_INT 107
24015: PUSH
24016: LD_INT 108
24018: PUSH
24019: LD_INT 109
24021: PUSH
24022: LD_INT 110
24024: PUSH
24025: LD_INT 111
24027: PUSH
24028: LD_INT 112
24030: PUSH
24031: LD_INT 113
24033: PUSH
24034: LD_INT 114
24036: PUSH
24037: LD_INT 116
24039: PUSH
24040: LD_INT 117
24042: PUSH
24043: LD_INT 118
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: PUSH
24065: EMPTY
24066: LIST
24067: LIST
24068: ST_TO_ADDR
24069: GO 24468
24071: LD_INT 18
24073: DOUBLE
24074: EQUAL
24075: IFTRUE 24079
24077: GO 24227
24079: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
24080: LD_ADDR_VAR 0 2
24084: PUSH
24085: LD_INT 2
24087: PUSH
24088: LD_INT 4
24090: PUSH
24091: LD_INT 5
24093: PUSH
24094: LD_INT 7
24096: PUSH
24097: LD_INT 11
24099: PUSH
24100: LD_INT 12
24102: PUSH
24103: LD_INT 15
24105: PUSH
24106: LD_INT 16
24108: PUSH
24109: LD_INT 20
24111: PUSH
24112: LD_INT 21
24114: PUSH
24115: LD_INT 22
24117: PUSH
24118: LD_INT 23
24120: PUSH
24121: LD_INT 25
24123: PUSH
24124: LD_INT 26
24126: PUSH
24127: LD_INT 30
24129: PUSH
24130: LD_INT 31
24132: PUSH
24133: LD_INT 32
24135: PUSH
24136: LD_INT 33
24138: PUSH
24139: LD_INT 34
24141: PUSH
24142: LD_INT 35
24144: PUSH
24145: LD_INT 36
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 101
24173: PUSH
24174: LD_INT 102
24176: PUSH
24177: LD_INT 103
24179: PUSH
24180: LD_INT 106
24182: PUSH
24183: LD_INT 108
24185: PUSH
24186: LD_INT 112
24188: PUSH
24189: LD_INT 113
24191: PUSH
24192: LD_INT 114
24194: PUSH
24195: LD_INT 115
24197: PUSH
24198: LD_INT 116
24200: PUSH
24201: LD_INT 117
24203: PUSH
24204: LD_INT 118
24206: PUSH
24207: EMPTY
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: PUSH
24221: EMPTY
24222: LIST
24223: LIST
24224: ST_TO_ADDR
24225: GO 24468
24227: LD_INT 19
24229: DOUBLE
24230: EQUAL
24231: IFTRUE 24235
24233: GO 24467
24235: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
24236: LD_ADDR_VAR 0 2
24240: PUSH
24241: LD_INT 1
24243: PUSH
24244: LD_INT 2
24246: PUSH
24247: LD_INT 3
24249: PUSH
24250: LD_INT 4
24252: PUSH
24253: LD_INT 5
24255: PUSH
24256: LD_INT 6
24258: PUSH
24259: LD_INT 7
24261: PUSH
24262: LD_INT 8
24264: PUSH
24265: LD_INT 9
24267: PUSH
24268: LD_INT 10
24270: PUSH
24271: LD_INT 11
24273: PUSH
24274: LD_INT 12
24276: PUSH
24277: LD_INT 13
24279: PUSH
24280: LD_INT 14
24282: PUSH
24283: LD_INT 15
24285: PUSH
24286: LD_INT 16
24288: PUSH
24289: LD_INT 17
24291: PUSH
24292: LD_INT 18
24294: PUSH
24295: LD_INT 19
24297: PUSH
24298: LD_INT 20
24300: PUSH
24301: LD_INT 21
24303: PUSH
24304: LD_INT 22
24306: PUSH
24307: LD_INT 23
24309: PUSH
24310: LD_INT 24
24312: PUSH
24313: LD_INT 25
24315: PUSH
24316: LD_INT 26
24318: PUSH
24319: LD_INT 27
24321: PUSH
24322: LD_INT 28
24324: PUSH
24325: LD_INT 29
24327: PUSH
24328: LD_INT 30
24330: PUSH
24331: LD_INT 31
24333: PUSH
24334: LD_INT 32
24336: PUSH
24337: LD_INT 33
24339: PUSH
24340: LD_INT 34
24342: PUSH
24343: LD_INT 35
24345: PUSH
24346: LD_INT 36
24348: PUSH
24349: EMPTY
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: LIST
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: LIST
24369: LIST
24370: LIST
24371: LIST
24372: LIST
24373: LIST
24374: LIST
24375: LIST
24376: LIST
24377: LIST
24378: LIST
24379: LIST
24380: LIST
24381: LIST
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 101
24389: PUSH
24390: LD_INT 102
24392: PUSH
24393: LD_INT 103
24395: PUSH
24396: LD_INT 104
24398: PUSH
24399: LD_INT 105
24401: PUSH
24402: LD_INT 106
24404: PUSH
24405: LD_INT 107
24407: PUSH
24408: LD_INT 108
24410: PUSH
24411: LD_INT 109
24413: PUSH
24414: LD_INT 110
24416: PUSH
24417: LD_INT 111
24419: PUSH
24420: LD_INT 112
24422: PUSH
24423: LD_INT 113
24425: PUSH
24426: LD_INT 114
24428: PUSH
24429: LD_INT 115
24431: PUSH
24432: LD_INT 116
24434: PUSH
24435: LD_INT 117
24437: PUSH
24438: LD_INT 118
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: ST_TO_ADDR
24465: GO 24468
24467: POP
// end else
24468: GO 24699
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
24470: LD_ADDR_VAR 0 2
24474: PUSH
24475: LD_INT 1
24477: PUSH
24478: LD_INT 2
24480: PUSH
24481: LD_INT 3
24483: PUSH
24484: LD_INT 4
24486: PUSH
24487: LD_INT 5
24489: PUSH
24490: LD_INT 6
24492: PUSH
24493: LD_INT 7
24495: PUSH
24496: LD_INT 8
24498: PUSH
24499: LD_INT 9
24501: PUSH
24502: LD_INT 10
24504: PUSH
24505: LD_INT 11
24507: PUSH
24508: LD_INT 12
24510: PUSH
24511: LD_INT 13
24513: PUSH
24514: LD_INT 14
24516: PUSH
24517: LD_INT 15
24519: PUSH
24520: LD_INT 16
24522: PUSH
24523: LD_INT 17
24525: PUSH
24526: LD_INT 18
24528: PUSH
24529: LD_INT 19
24531: PUSH
24532: LD_INT 20
24534: PUSH
24535: LD_INT 21
24537: PUSH
24538: LD_INT 22
24540: PUSH
24541: LD_INT 23
24543: PUSH
24544: LD_INT 24
24546: PUSH
24547: LD_INT 25
24549: PUSH
24550: LD_INT 26
24552: PUSH
24553: LD_INT 27
24555: PUSH
24556: LD_INT 28
24558: PUSH
24559: LD_INT 29
24561: PUSH
24562: LD_INT 30
24564: PUSH
24565: LD_INT 31
24567: PUSH
24568: LD_INT 32
24570: PUSH
24571: LD_INT 33
24573: PUSH
24574: LD_INT 34
24576: PUSH
24577: LD_INT 35
24579: PUSH
24580: LD_INT 36
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: LIST
24590: LIST
24591: LIST
24592: LIST
24593: LIST
24594: LIST
24595: LIST
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: LIST
24604: LIST
24605: LIST
24606: LIST
24607: LIST
24608: LIST
24609: LIST
24610: LIST
24611: LIST
24612: LIST
24613: LIST
24614: LIST
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 101
24623: PUSH
24624: LD_INT 102
24626: PUSH
24627: LD_INT 103
24629: PUSH
24630: LD_INT 104
24632: PUSH
24633: LD_INT 105
24635: PUSH
24636: LD_INT 106
24638: PUSH
24639: LD_INT 107
24641: PUSH
24642: LD_INT 108
24644: PUSH
24645: LD_INT 109
24647: PUSH
24648: LD_INT 110
24650: PUSH
24651: LD_INT 111
24653: PUSH
24654: LD_INT 112
24656: PUSH
24657: LD_INT 113
24659: PUSH
24660: LD_INT 114
24662: PUSH
24663: LD_INT 115
24665: PUSH
24666: LD_INT 116
24668: PUSH
24669: LD_INT 117
24671: PUSH
24672: LD_INT 118
24674: PUSH
24675: EMPTY
24676: LIST
24677: LIST
24678: LIST
24679: LIST
24680: LIST
24681: LIST
24682: LIST
24683: LIST
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: LIST
24691: LIST
24692: LIST
24693: LIST
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: ST_TO_ADDR
// if result then
24699: LD_VAR 0 2
24703: IFFALSE 25489
// begin normal :=  ;
24705: LD_ADDR_VAR 0 5
24709: PUSH
24710: LD_STRING 
24712: ST_TO_ADDR
// hardcore :=  ;
24713: LD_ADDR_VAR 0 6
24717: PUSH
24718: LD_STRING 
24720: ST_TO_ADDR
// active :=  ;
24721: LD_ADDR_VAR 0 7
24725: PUSH
24726: LD_STRING 
24728: ST_TO_ADDR
// for i = 1 to normalCounter do
24729: LD_ADDR_VAR 0 8
24733: PUSH
24734: DOUBLE
24735: LD_INT 1
24737: DEC
24738: ST_TO_ADDR
24739: LD_EXP 48
24743: PUSH
24744: FOR_TO
24745: IFFALSE 24846
// begin tmp := 0 ;
24747: LD_ADDR_VAR 0 3
24751: PUSH
24752: LD_STRING 0
24754: ST_TO_ADDR
// if result [ 1 ] then
24755: LD_VAR 0 2
24759: PUSH
24760: LD_INT 1
24762: ARRAY
24763: IFFALSE 24828
// if result [ 1 ] [ 1 ] = i then
24765: LD_VAR 0 2
24769: PUSH
24770: LD_INT 1
24772: ARRAY
24773: PUSH
24774: LD_INT 1
24776: ARRAY
24777: PUSH
24778: LD_VAR 0 8
24782: EQUAL
24783: IFFALSE 24828
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
24785: LD_ADDR_VAR 0 2
24789: PUSH
24790: LD_VAR 0 2
24794: PPUSH
24795: LD_INT 1
24797: PPUSH
24798: LD_VAR 0 2
24802: PUSH
24803: LD_INT 1
24805: ARRAY
24806: PPUSH
24807: LD_INT 1
24809: PPUSH
24810: CALL_OW 3
24814: PPUSH
24815: CALL_OW 1
24819: ST_TO_ADDR
// tmp := 1 ;
24820: LD_ADDR_VAR 0 3
24824: PUSH
24825: LD_STRING 1
24827: ST_TO_ADDR
// end ; normal := normal & tmp ;
24828: LD_ADDR_VAR 0 5
24832: PUSH
24833: LD_VAR 0 5
24837: PUSH
24838: LD_VAR 0 3
24842: STR
24843: ST_TO_ADDR
// end ;
24844: GO 24744
24846: POP
24847: POP
// for i = 1 to hardcoreCounter do
24848: LD_ADDR_VAR 0 8
24852: PUSH
24853: DOUBLE
24854: LD_INT 1
24856: DEC
24857: ST_TO_ADDR
24858: LD_EXP 49
24862: PUSH
24863: FOR_TO
24864: IFFALSE 24969
// begin tmp := 0 ;
24866: LD_ADDR_VAR 0 3
24870: PUSH
24871: LD_STRING 0
24873: ST_TO_ADDR
// if result [ 2 ] then
24874: LD_VAR 0 2
24878: PUSH
24879: LD_INT 2
24881: ARRAY
24882: IFFALSE 24951
// if result [ 2 ] [ 1 ] = 100 + i then
24884: LD_VAR 0 2
24888: PUSH
24889: LD_INT 2
24891: ARRAY
24892: PUSH
24893: LD_INT 1
24895: ARRAY
24896: PUSH
24897: LD_INT 100
24899: PUSH
24900: LD_VAR 0 8
24904: PLUS
24905: EQUAL
24906: IFFALSE 24951
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
24908: LD_ADDR_VAR 0 2
24912: PUSH
24913: LD_VAR 0 2
24917: PPUSH
24918: LD_INT 2
24920: PPUSH
24921: LD_VAR 0 2
24925: PUSH
24926: LD_INT 2
24928: ARRAY
24929: PPUSH
24930: LD_INT 1
24932: PPUSH
24933: CALL_OW 3
24937: PPUSH
24938: CALL_OW 1
24942: ST_TO_ADDR
// tmp := 1 ;
24943: LD_ADDR_VAR 0 3
24947: PUSH
24948: LD_STRING 1
24950: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
24951: LD_ADDR_VAR 0 6
24955: PUSH
24956: LD_VAR 0 6
24960: PUSH
24961: LD_VAR 0 3
24965: STR
24966: ST_TO_ADDR
// end ;
24967: GO 24863
24969: POP
24970: POP
// if isGameLoad then
24971: LD_VAR 0 1
24975: IFFALSE 25450
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
24977: LD_ADDR_VAR 0 4
24981: PUSH
24982: LD_EXP 52
24986: PUSH
24987: LD_EXP 51
24991: PUSH
24992: LD_EXP 53
24996: PUSH
24997: LD_EXP 50
25001: PUSH
25002: LD_EXP 54
25006: PUSH
25007: LD_EXP 55
25011: PUSH
25012: LD_EXP 56
25016: PUSH
25017: LD_EXP 57
25021: PUSH
25022: LD_EXP 58
25026: PUSH
25027: LD_EXP 59
25031: PUSH
25032: LD_EXP 60
25036: PUSH
25037: LD_EXP 61
25041: PUSH
25042: LD_EXP 62
25046: PUSH
25047: LD_EXP 63
25051: PUSH
25052: LD_EXP 71
25056: PUSH
25057: LD_EXP 72
25061: PUSH
25062: LD_EXP 73
25066: PUSH
25067: LD_EXP 74
25071: PUSH
25072: LD_EXP 76
25076: PUSH
25077: LD_EXP 77
25081: PUSH
25082: LD_EXP 78
25086: PUSH
25087: LD_EXP 81
25091: PUSH
25092: LD_EXP 83
25096: PUSH
25097: LD_EXP 84
25101: PUSH
25102: LD_EXP 85
25106: PUSH
25107: LD_EXP 87
25111: PUSH
25112: LD_EXP 88
25116: PUSH
25117: LD_EXP 91
25121: PUSH
25122: LD_EXP 92
25126: PUSH
25127: LD_EXP 93
25131: PUSH
25132: LD_EXP 94
25136: PUSH
25137: LD_EXP 95
25141: PUSH
25142: LD_EXP 96
25146: PUSH
25147: LD_EXP 97
25151: PUSH
25152: LD_EXP 98
25156: PUSH
25157: LD_EXP 99
25161: PUSH
25162: LD_EXP 64
25166: PUSH
25167: LD_EXP 65
25171: PUSH
25172: LD_EXP 68
25176: PUSH
25177: LD_EXP 69
25181: PUSH
25182: LD_EXP 70
25186: PUSH
25187: LD_EXP 66
25191: PUSH
25192: LD_EXP 67
25196: PUSH
25197: LD_EXP 75
25201: PUSH
25202: LD_EXP 79
25206: PUSH
25207: LD_EXP 80
25211: PUSH
25212: LD_EXP 82
25216: PUSH
25217: LD_EXP 86
25221: PUSH
25222: LD_EXP 89
25226: PUSH
25227: LD_EXP 90
25231: PUSH
25232: LD_EXP 100
25236: PUSH
25237: LD_EXP 101
25241: PUSH
25242: LD_EXP 102
25246: PUSH
25247: LD_EXP 103
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: LIST
25256: LIST
25257: LIST
25258: LIST
25259: LIST
25260: LIST
25261: LIST
25262: LIST
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: LIST
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: ST_TO_ADDR
// tmp :=  ;
25308: LD_ADDR_VAR 0 3
25312: PUSH
25313: LD_STRING 
25315: ST_TO_ADDR
// for i = 1 to normalCounter do
25316: LD_ADDR_VAR 0 8
25320: PUSH
25321: DOUBLE
25322: LD_INT 1
25324: DEC
25325: ST_TO_ADDR
25326: LD_EXP 48
25330: PUSH
25331: FOR_TO
25332: IFFALSE 25368
// begin if flags [ i ] then
25334: LD_VAR 0 4
25338: PUSH
25339: LD_VAR 0 8
25343: ARRAY
25344: IFFALSE 25366
// tmp := tmp & i & ; ;
25346: LD_ADDR_VAR 0 3
25350: PUSH
25351: LD_VAR 0 3
25355: PUSH
25356: LD_VAR 0 8
25360: STR
25361: PUSH
25362: LD_STRING ;
25364: STR
25365: ST_TO_ADDR
// end ;
25366: GO 25331
25368: POP
25369: POP
// for i = 1 to hardcoreCounter do
25370: LD_ADDR_VAR 0 8
25374: PUSH
25375: DOUBLE
25376: LD_INT 1
25378: DEC
25379: ST_TO_ADDR
25380: LD_EXP 49
25384: PUSH
25385: FOR_TO
25386: IFFALSE 25432
// begin if flags [ normalCounter + i ] then
25388: LD_VAR 0 4
25392: PUSH
25393: LD_EXP 48
25397: PUSH
25398: LD_VAR 0 8
25402: PLUS
25403: ARRAY
25404: IFFALSE 25430
// tmp := tmp & ( 100 + i ) & ; ;
25406: LD_ADDR_VAR 0 3
25410: PUSH
25411: LD_VAR 0 3
25415: PUSH
25416: LD_INT 100
25418: PUSH
25419: LD_VAR 0 8
25423: PLUS
25424: STR
25425: PUSH
25426: LD_STRING ;
25428: STR
25429: ST_TO_ADDR
// end ;
25430: GO 25385
25432: POP
25433: POP
// if tmp then
25434: LD_VAR 0 3
25438: IFFALSE 25450
// active := tmp ;
25440: LD_ADDR_VAR 0 7
25444: PUSH
25445: LD_VAR 0 3
25449: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
25450: LD_STRING getStreamItemsFromMission("
25452: PUSH
25453: LD_VAR 0 5
25457: STR
25458: PUSH
25459: LD_STRING ","
25461: STR
25462: PUSH
25463: LD_VAR 0 6
25467: STR
25468: PUSH
25469: LD_STRING ","
25471: STR
25472: PUSH
25473: LD_VAR 0 7
25477: STR
25478: PUSH
25479: LD_STRING ")
25481: STR
25482: PPUSH
25483: CALL_OW 559
// end else
25487: GO 25496
// ToLua ( getStreamItemsFromMission("","","") ) ;
25489: LD_STRING getStreamItemsFromMission("","","")
25491: PPUSH
25492: CALL_OW 559
// end ;
25496: LD_VAR 0 2
25500: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
25501: LD_EXP 47
25505: PUSH
25506: LD_EXP 52
25510: AND
25511: IFFALSE 25635
25513: GO 25515
25515: DISABLE
25516: LD_INT 0
25518: PPUSH
25519: PPUSH
// begin enable ;
25520: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
25521: LD_ADDR_VAR 0 2
25525: PUSH
25526: LD_INT 22
25528: PUSH
25529: LD_OWVAR 2
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 2
25540: PUSH
25541: LD_INT 34
25543: PUSH
25544: LD_INT 7
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 34
25553: PUSH
25554: LD_INT 45
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 34
25563: PUSH
25564: LD_INT 28
25566: PUSH
25567: EMPTY
25568: LIST
25569: LIST
25570: PUSH
25571: LD_INT 34
25573: PUSH
25574: LD_INT 47
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: PUSH
25588: EMPTY
25589: LIST
25590: LIST
25591: PPUSH
25592: CALL_OW 69
25596: ST_TO_ADDR
// if not tmp then
25597: LD_VAR 0 2
25601: NOT
25602: IFFALSE 25606
// exit ;
25604: GO 25635
// for i in tmp do
25606: LD_ADDR_VAR 0 1
25610: PUSH
25611: LD_VAR 0 2
25615: PUSH
25616: FOR_IN
25617: IFFALSE 25633
// begin SetLives ( i , 0 ) ;
25619: LD_VAR 0 1
25623: PPUSH
25624: LD_INT 0
25626: PPUSH
25627: CALL_OW 234
// end ;
25631: GO 25616
25633: POP
25634: POP
// end ;
25635: PPOPN 2
25637: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
25638: LD_EXP 47
25642: PUSH
25643: LD_EXP 53
25647: AND
25648: IFFALSE 25732
25650: GO 25652
25652: DISABLE
25653: LD_INT 0
25655: PPUSH
25656: PPUSH
// begin enable ;
25657: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
25658: LD_ADDR_VAR 0 2
25662: PUSH
25663: LD_INT 22
25665: PUSH
25666: LD_OWVAR 2
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 32
25677: PUSH
25678: LD_INT 3
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PPUSH
25689: CALL_OW 69
25693: ST_TO_ADDR
// if not tmp then
25694: LD_VAR 0 2
25698: NOT
25699: IFFALSE 25703
// exit ;
25701: GO 25732
// for i in tmp do
25703: LD_ADDR_VAR 0 1
25707: PUSH
25708: LD_VAR 0 2
25712: PUSH
25713: FOR_IN
25714: IFFALSE 25730
// begin SetLives ( i , 0 ) ;
25716: LD_VAR 0 1
25720: PPUSH
25721: LD_INT 0
25723: PPUSH
25724: CALL_OW 234
// end ;
25728: GO 25713
25730: POP
25731: POP
// end ;
25732: PPOPN 2
25734: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
25735: LD_EXP 47
25739: PUSH
25740: LD_EXP 50
25744: AND
25745: IFFALSE 25838
25747: GO 25749
25749: DISABLE
25750: LD_INT 0
25752: PPUSH
// begin enable ;
25753: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
25754: LD_ADDR_VAR 0 1
25758: PUSH
25759: LD_INT 22
25761: PUSH
25762: LD_OWVAR 2
25766: PUSH
25767: EMPTY
25768: LIST
25769: LIST
25770: PUSH
25771: LD_INT 2
25773: PUSH
25774: LD_INT 25
25776: PUSH
25777: LD_INT 5
25779: PUSH
25780: EMPTY
25781: LIST
25782: LIST
25783: PUSH
25784: LD_INT 25
25786: PUSH
25787: LD_INT 9
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PUSH
25794: LD_INT 25
25796: PUSH
25797: LD_INT 8
25799: PUSH
25800: EMPTY
25801: LIST
25802: LIST
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: LIST
25808: LIST
25809: PUSH
25810: EMPTY
25811: LIST
25812: LIST
25813: PPUSH
25814: CALL_OW 69
25818: PUSH
25819: FOR_IN
25820: IFFALSE 25836
// begin SetClass ( i , 1 ) ;
25822: LD_VAR 0 1
25826: PPUSH
25827: LD_INT 1
25829: PPUSH
25830: CALL_OW 336
// end ;
25834: GO 25819
25836: POP
25837: POP
// end ;
25838: PPOPN 1
25840: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
25841: LD_EXP 47
25845: PUSH
25846: LD_EXP 51
25850: AND
25851: PUSH
25852: LD_OWVAR 65
25856: PUSH
25857: LD_INT 7
25859: LESS
25860: AND
25861: IFFALSE 25875
25863: GO 25865
25865: DISABLE
// begin enable ;
25866: ENABLE
// game_speed := 7 ;
25867: LD_ADDR_OWVAR 65
25871: PUSH
25872: LD_INT 7
25874: ST_TO_ADDR
// end ;
25875: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
25876: LD_EXP 47
25880: PUSH
25881: LD_EXP 54
25885: AND
25886: IFFALSE 26088
25888: GO 25890
25890: DISABLE
25891: LD_INT 0
25893: PPUSH
25894: PPUSH
25895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
25896: LD_ADDR_VAR 0 3
25900: PUSH
25901: LD_INT 81
25903: PUSH
25904: LD_OWVAR 2
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 21
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: EMPTY
25924: LIST
25925: LIST
25926: PPUSH
25927: CALL_OW 69
25931: ST_TO_ADDR
// if not tmp then
25932: LD_VAR 0 3
25936: NOT
25937: IFFALSE 25941
// exit ;
25939: GO 26088
// if tmp > 5 then
25941: LD_VAR 0 3
25945: PUSH
25946: LD_INT 5
25948: GREATER
25949: IFFALSE 25961
// k := 5 else
25951: LD_ADDR_VAR 0 2
25955: PUSH
25956: LD_INT 5
25958: ST_TO_ADDR
25959: GO 25971
// k := tmp ;
25961: LD_ADDR_VAR 0 2
25965: PUSH
25966: LD_VAR 0 3
25970: ST_TO_ADDR
// for i := 1 to k do
25971: LD_ADDR_VAR 0 1
25975: PUSH
25976: DOUBLE
25977: LD_INT 1
25979: DEC
25980: ST_TO_ADDR
25981: LD_VAR 0 2
25985: PUSH
25986: FOR_TO
25987: IFFALSE 26086
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
25989: LD_VAR 0 3
25993: PUSH
25994: LD_VAR 0 1
25998: ARRAY
25999: PPUSH
26000: LD_VAR 0 1
26004: PUSH
26005: LD_INT 4
26007: MOD
26008: PUSH
26009: LD_INT 1
26011: PLUS
26012: PPUSH
26013: CALL_OW 259
26017: PUSH
26018: LD_INT 10
26020: LESS
26021: IFFALSE 26084
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
26023: LD_VAR 0 3
26027: PUSH
26028: LD_VAR 0 1
26032: ARRAY
26033: PPUSH
26034: LD_VAR 0 1
26038: PUSH
26039: LD_INT 4
26041: MOD
26042: PUSH
26043: LD_INT 1
26045: PLUS
26046: PPUSH
26047: LD_VAR 0 3
26051: PUSH
26052: LD_VAR 0 1
26056: ARRAY
26057: PPUSH
26058: LD_VAR 0 1
26062: PUSH
26063: LD_INT 4
26065: MOD
26066: PUSH
26067: LD_INT 1
26069: PLUS
26070: PPUSH
26071: CALL_OW 259
26075: PUSH
26076: LD_INT 1
26078: PLUS
26079: PPUSH
26080: CALL_OW 237
26084: GO 25986
26086: POP
26087: POP
// end ;
26088: PPOPN 3
26090: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
26091: LD_EXP 47
26095: PUSH
26096: LD_EXP 55
26100: AND
26101: IFFALSE 26121
26103: GO 26105
26105: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
26106: LD_INT 4
26108: PPUSH
26109: LD_OWVAR 2
26113: PPUSH
26114: LD_INT 0
26116: PPUSH
26117: CALL_OW 324
26121: END
// every 0 0$1 trigger StreamModeActive and sShovel do
26122: LD_EXP 47
26126: PUSH
26127: LD_EXP 84
26131: AND
26132: IFFALSE 26152
26134: GO 26136
26136: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
26137: LD_INT 19
26139: PPUSH
26140: LD_OWVAR 2
26144: PPUSH
26145: LD_INT 0
26147: PPUSH
26148: CALL_OW 324
26152: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
26153: LD_EXP 47
26157: PUSH
26158: LD_EXP 56
26162: AND
26163: IFFALSE 26265
26165: GO 26167
26167: DISABLE
26168: LD_INT 0
26170: PPUSH
26171: PPUSH
// begin enable ;
26172: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
26173: LD_ADDR_VAR 0 2
26177: PUSH
26178: LD_INT 22
26180: PUSH
26181: LD_OWVAR 2
26185: PUSH
26186: EMPTY
26187: LIST
26188: LIST
26189: PUSH
26190: LD_INT 2
26192: PUSH
26193: LD_INT 34
26195: PUSH
26196: LD_INT 11
26198: PUSH
26199: EMPTY
26200: LIST
26201: LIST
26202: PUSH
26203: LD_INT 34
26205: PUSH
26206: LD_INT 30
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: LIST
26217: PUSH
26218: EMPTY
26219: LIST
26220: LIST
26221: PPUSH
26222: CALL_OW 69
26226: ST_TO_ADDR
// if not tmp then
26227: LD_VAR 0 2
26231: NOT
26232: IFFALSE 26236
// exit ;
26234: GO 26265
// for i in tmp do
26236: LD_ADDR_VAR 0 1
26240: PUSH
26241: LD_VAR 0 2
26245: PUSH
26246: FOR_IN
26247: IFFALSE 26263
// begin SetLives ( i , 0 ) ;
26249: LD_VAR 0 1
26253: PPUSH
26254: LD_INT 0
26256: PPUSH
26257: CALL_OW 234
// end ;
26261: GO 26246
26263: POP
26264: POP
// end ;
26265: PPOPN 2
26267: END
// every 0 0$1 trigger StreamModeActive and sBunker do
26268: LD_EXP 47
26272: PUSH
26273: LD_EXP 57
26277: AND
26278: IFFALSE 26298
26280: GO 26282
26282: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
26283: LD_INT 32
26285: PPUSH
26286: LD_OWVAR 2
26290: PPUSH
26291: LD_INT 0
26293: PPUSH
26294: CALL_OW 324
26298: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
26299: LD_EXP 47
26303: PUSH
26304: LD_EXP 58
26308: AND
26309: IFFALSE 26490
26311: GO 26313
26313: DISABLE
26314: LD_INT 0
26316: PPUSH
26317: PPUSH
26318: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
26319: LD_ADDR_VAR 0 2
26323: PUSH
26324: LD_INT 22
26326: PUSH
26327: LD_OWVAR 2
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 33
26338: PUSH
26339: LD_INT 3
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PPUSH
26350: CALL_OW 69
26354: ST_TO_ADDR
// if not tmp then
26355: LD_VAR 0 2
26359: NOT
26360: IFFALSE 26364
// exit ;
26362: GO 26490
// side := 0 ;
26364: LD_ADDR_VAR 0 3
26368: PUSH
26369: LD_INT 0
26371: ST_TO_ADDR
// for i := 1 to 8 do
26372: LD_ADDR_VAR 0 1
26376: PUSH
26377: DOUBLE
26378: LD_INT 1
26380: DEC
26381: ST_TO_ADDR
26382: LD_INT 8
26384: PUSH
26385: FOR_TO
26386: IFFALSE 26434
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
26388: LD_OWVAR 2
26392: PUSH
26393: LD_VAR 0 1
26397: NONEQUAL
26398: PUSH
26399: LD_OWVAR 2
26403: PPUSH
26404: LD_VAR 0 1
26408: PPUSH
26409: CALL_OW 81
26413: PUSH
26414: LD_INT 2
26416: EQUAL
26417: AND
26418: IFFALSE 26432
// begin side := i ;
26420: LD_ADDR_VAR 0 3
26424: PUSH
26425: LD_VAR 0 1
26429: ST_TO_ADDR
// break ;
26430: GO 26434
// end ;
26432: GO 26385
26434: POP
26435: POP
// if not side then
26436: LD_VAR 0 3
26440: NOT
26441: IFFALSE 26445
// exit ;
26443: GO 26490
// for i := 1 to tmp do
26445: LD_ADDR_VAR 0 1
26449: PUSH
26450: DOUBLE
26451: LD_INT 1
26453: DEC
26454: ST_TO_ADDR
26455: LD_VAR 0 2
26459: PUSH
26460: FOR_TO
26461: IFFALSE 26488
// if Prob ( 60 ) then
26463: LD_INT 60
26465: PPUSH
26466: CALL_OW 13
26470: IFFALSE 26486
// SetSide ( i , side ) ;
26472: LD_VAR 0 1
26476: PPUSH
26477: LD_VAR 0 3
26481: PPUSH
26482: CALL_OW 235
26486: GO 26460
26488: POP
26489: POP
// end ;
26490: PPOPN 3
26492: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
26493: LD_EXP 47
26497: PUSH
26498: LD_EXP 60
26502: AND
26503: IFFALSE 26622
26505: GO 26507
26507: DISABLE
26508: LD_INT 0
26510: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
26511: LD_ADDR_VAR 0 1
26515: PUSH
26516: LD_INT 22
26518: PUSH
26519: LD_OWVAR 2
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PUSH
26528: LD_INT 21
26530: PUSH
26531: LD_INT 1
26533: PUSH
26534: EMPTY
26535: LIST
26536: LIST
26537: PUSH
26538: LD_INT 3
26540: PUSH
26541: LD_INT 23
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: LIST
26559: PPUSH
26560: CALL_OW 69
26564: PUSH
26565: FOR_IN
26566: IFFALSE 26620
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
26568: LD_VAR 0 1
26572: PPUSH
26573: CALL_OW 257
26577: PUSH
26578: LD_INT 1
26580: PUSH
26581: LD_INT 2
26583: PUSH
26584: LD_INT 3
26586: PUSH
26587: LD_INT 4
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: LIST
26594: LIST
26595: IN
26596: IFFALSE 26618
// SetClass ( un , rand ( 1 , 4 ) ) ;
26598: LD_VAR 0 1
26602: PPUSH
26603: LD_INT 1
26605: PPUSH
26606: LD_INT 4
26608: PPUSH
26609: CALL_OW 12
26613: PPUSH
26614: CALL_OW 336
26618: GO 26565
26620: POP
26621: POP
// end ;
26622: PPOPN 1
26624: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
26625: LD_EXP 47
26629: PUSH
26630: LD_EXP 59
26634: AND
26635: IFFALSE 26714
26637: GO 26639
26639: DISABLE
26640: LD_INT 0
26642: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26643: LD_ADDR_VAR 0 1
26647: PUSH
26648: LD_INT 22
26650: PUSH
26651: LD_OWVAR 2
26655: PUSH
26656: EMPTY
26657: LIST
26658: LIST
26659: PUSH
26660: LD_INT 21
26662: PUSH
26663: LD_INT 3
26665: PUSH
26666: EMPTY
26667: LIST
26668: LIST
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PPUSH
26674: CALL_OW 69
26678: ST_TO_ADDR
// if not tmp then
26679: LD_VAR 0 1
26683: NOT
26684: IFFALSE 26688
// exit ;
26686: GO 26714
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
26688: LD_VAR 0 1
26692: PUSH
26693: LD_INT 1
26695: PPUSH
26696: LD_VAR 0 1
26700: PPUSH
26701: CALL_OW 12
26705: ARRAY
26706: PPUSH
26707: LD_INT 100
26709: PPUSH
26710: CALL_OW 234
// end ;
26714: PPOPN 1
26716: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
26717: LD_EXP 47
26721: PUSH
26722: LD_EXP 61
26726: AND
26727: IFFALSE 26825
26729: GO 26731
26731: DISABLE
26732: LD_INT 0
26734: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
26735: LD_ADDR_VAR 0 1
26739: PUSH
26740: LD_INT 22
26742: PUSH
26743: LD_OWVAR 2
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 21
26754: PUSH
26755: LD_INT 1
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: EMPTY
26763: LIST
26764: LIST
26765: PPUSH
26766: CALL_OW 69
26770: ST_TO_ADDR
// if not tmp then
26771: LD_VAR 0 1
26775: NOT
26776: IFFALSE 26780
// exit ;
26778: GO 26825
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
26780: LD_VAR 0 1
26784: PUSH
26785: LD_INT 1
26787: PPUSH
26788: LD_VAR 0 1
26792: PPUSH
26793: CALL_OW 12
26797: ARRAY
26798: PPUSH
26799: LD_INT 1
26801: PPUSH
26802: LD_INT 4
26804: PPUSH
26805: CALL_OW 12
26809: PPUSH
26810: LD_INT 3000
26812: PPUSH
26813: LD_INT 9000
26815: PPUSH
26816: CALL_OW 12
26820: PPUSH
26821: CALL_OW 492
// end ;
26825: PPOPN 1
26827: END
// every 0 0$1 trigger StreamModeActive and sDepot do
26828: LD_EXP 47
26832: PUSH
26833: LD_EXP 62
26837: AND
26838: IFFALSE 26858
26840: GO 26842
26842: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
26843: LD_INT 1
26845: PPUSH
26846: LD_OWVAR 2
26850: PPUSH
26851: LD_INT 0
26853: PPUSH
26854: CALL_OW 324
26858: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
26859: LD_EXP 47
26863: PUSH
26864: LD_EXP 63
26868: AND
26869: IFFALSE 26952
26871: GO 26873
26873: DISABLE
26874: LD_INT 0
26876: PPUSH
26877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
26878: LD_ADDR_VAR 0 2
26882: PUSH
26883: LD_INT 22
26885: PUSH
26886: LD_OWVAR 2
26890: PUSH
26891: EMPTY
26892: LIST
26893: LIST
26894: PUSH
26895: LD_INT 21
26897: PUSH
26898: LD_INT 3
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: PPUSH
26909: CALL_OW 69
26913: ST_TO_ADDR
// if not tmp then
26914: LD_VAR 0 2
26918: NOT
26919: IFFALSE 26923
// exit ;
26921: GO 26952
// for i in tmp do
26923: LD_ADDR_VAR 0 1
26927: PUSH
26928: LD_VAR 0 2
26932: PUSH
26933: FOR_IN
26934: IFFALSE 26950
// SetBLevel ( i , 10 ) ;
26936: LD_VAR 0 1
26940: PPUSH
26941: LD_INT 10
26943: PPUSH
26944: CALL_OW 241
26948: GO 26933
26950: POP
26951: POP
// end ;
26952: PPOPN 2
26954: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
26955: LD_EXP 47
26959: PUSH
26960: LD_EXP 64
26964: AND
26965: IFFALSE 27076
26967: GO 26969
26969: DISABLE
26970: LD_INT 0
26972: PPUSH
26973: PPUSH
26974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26975: LD_ADDR_VAR 0 3
26979: PUSH
26980: LD_INT 22
26982: PUSH
26983: LD_OWVAR 2
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 25
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PPUSH
27006: CALL_OW 69
27010: ST_TO_ADDR
// if not tmp then
27011: LD_VAR 0 3
27015: NOT
27016: IFFALSE 27020
// exit ;
27018: GO 27076
// un := tmp [ rand ( 1 , tmp ) ] ;
27020: LD_ADDR_VAR 0 2
27024: PUSH
27025: LD_VAR 0 3
27029: PUSH
27030: LD_INT 1
27032: PPUSH
27033: LD_VAR 0 3
27037: PPUSH
27038: CALL_OW 12
27042: ARRAY
27043: ST_TO_ADDR
// if Crawls ( un ) then
27044: LD_VAR 0 2
27048: PPUSH
27049: CALL_OW 318
27053: IFFALSE 27064
// ComWalk ( un ) ;
27055: LD_VAR 0 2
27059: PPUSH
27060: CALL_OW 138
// SetClass ( un , class_sniper ) ;
27064: LD_VAR 0 2
27068: PPUSH
27069: LD_INT 5
27071: PPUSH
27072: CALL_OW 336
// end ;
27076: PPOPN 3
27078: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
27079: LD_EXP 47
27083: PUSH
27084: LD_EXP 65
27088: AND
27089: PUSH
27090: LD_OWVAR 67
27094: PUSH
27095: LD_INT 4
27097: LESS
27098: AND
27099: IFFALSE 27118
27101: GO 27103
27103: DISABLE
// begin Difficulty := Difficulty + 1 ;
27104: LD_ADDR_OWVAR 67
27108: PUSH
27109: LD_OWVAR 67
27113: PUSH
27114: LD_INT 1
27116: PLUS
27117: ST_TO_ADDR
// end ;
27118: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
27119: LD_EXP 47
27123: PUSH
27124: LD_EXP 66
27128: AND
27129: IFFALSE 27232
27131: GO 27133
27133: DISABLE
27134: LD_INT 0
27136: PPUSH
// begin for i := 1 to 5 do
27137: LD_ADDR_VAR 0 1
27141: PUSH
27142: DOUBLE
27143: LD_INT 1
27145: DEC
27146: ST_TO_ADDR
27147: LD_INT 5
27149: PUSH
27150: FOR_TO
27151: IFFALSE 27230
// begin uc_nation := nation_nature ;
27153: LD_ADDR_OWVAR 21
27157: PUSH
27158: LD_INT 0
27160: ST_TO_ADDR
// uc_side := 0 ;
27161: LD_ADDR_OWVAR 20
27165: PUSH
27166: LD_INT 0
27168: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27169: LD_ADDR_OWVAR 29
27173: PUSH
27174: LD_INT 12
27176: PUSH
27177: LD_INT 12
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: ST_TO_ADDR
// hc_agressivity := 20 ;
27184: LD_ADDR_OWVAR 35
27188: PUSH
27189: LD_INT 20
27191: ST_TO_ADDR
// hc_class := class_tiger ;
27192: LD_ADDR_OWVAR 28
27196: PUSH
27197: LD_INT 14
27199: ST_TO_ADDR
// hc_gallery :=  ;
27200: LD_ADDR_OWVAR 33
27204: PUSH
27205: LD_STRING 
27207: ST_TO_ADDR
// hc_name :=  ;
27208: LD_ADDR_OWVAR 26
27212: PUSH
27213: LD_STRING 
27215: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
27216: CALL_OW 44
27220: PPUSH
27221: LD_INT 0
27223: PPUSH
27224: CALL_OW 51
// end ;
27228: GO 27150
27230: POP
27231: POP
// end ;
27232: PPOPN 1
27234: END
// every 0 0$1 trigger StreamModeActive and sBomb do
27235: LD_EXP 47
27239: PUSH
27240: LD_EXP 67
27244: AND
27245: IFFALSE 27254
27247: GO 27249
27249: DISABLE
// StreamSibBomb ;
27250: CALL 27255 0 0
27254: END
// export function StreamSibBomb ; var i , x , y ; begin
27255: LD_INT 0
27257: PPUSH
27258: PPUSH
27259: PPUSH
27260: PPUSH
// result := false ;
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_INT 0
27268: ST_TO_ADDR
// for i := 1 to 16 do
27269: LD_ADDR_VAR 0 2
27273: PUSH
27274: DOUBLE
27275: LD_INT 1
27277: DEC
27278: ST_TO_ADDR
27279: LD_INT 16
27281: PUSH
27282: FOR_TO
27283: IFFALSE 27482
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27285: LD_ADDR_VAR 0 3
27289: PUSH
27290: LD_INT 10
27292: PUSH
27293: LD_INT 20
27295: PUSH
27296: LD_INT 30
27298: PUSH
27299: LD_INT 40
27301: PUSH
27302: LD_INT 50
27304: PUSH
27305: LD_INT 60
27307: PUSH
27308: LD_INT 70
27310: PUSH
27311: LD_INT 80
27313: PUSH
27314: LD_INT 90
27316: PUSH
27317: LD_INT 100
27319: PUSH
27320: LD_INT 110
27322: PUSH
27323: LD_INT 120
27325: PUSH
27326: LD_INT 130
27328: PUSH
27329: LD_INT 140
27331: PUSH
27332: LD_INT 150
27334: PUSH
27335: EMPTY
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: PUSH
27352: LD_INT 1
27354: PPUSH
27355: LD_INT 15
27357: PPUSH
27358: CALL_OW 12
27362: ARRAY
27363: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
27364: LD_ADDR_VAR 0 4
27368: PUSH
27369: LD_INT 10
27371: PUSH
27372: LD_INT 20
27374: PUSH
27375: LD_INT 30
27377: PUSH
27378: LD_INT 40
27380: PUSH
27381: LD_INT 50
27383: PUSH
27384: LD_INT 60
27386: PUSH
27387: LD_INT 70
27389: PUSH
27390: LD_INT 80
27392: PUSH
27393: LD_INT 90
27395: PUSH
27396: LD_INT 100
27398: PUSH
27399: LD_INT 110
27401: PUSH
27402: LD_INT 120
27404: PUSH
27405: LD_INT 130
27407: PUSH
27408: LD_INT 140
27410: PUSH
27411: LD_INT 150
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: PUSH
27431: LD_INT 1
27433: PPUSH
27434: LD_INT 15
27436: PPUSH
27437: CALL_OW 12
27441: ARRAY
27442: ST_TO_ADDR
// if ValidHex ( x , y ) then
27443: LD_VAR 0 3
27447: PPUSH
27448: LD_VAR 0 4
27452: PPUSH
27453: CALL_OW 488
27457: IFFALSE 27480
// begin result := [ x , y ] ;
27459: LD_ADDR_VAR 0 1
27463: PUSH
27464: LD_VAR 0 3
27468: PUSH
27469: LD_VAR 0 4
27473: PUSH
27474: EMPTY
27475: LIST
27476: LIST
27477: ST_TO_ADDR
// break ;
27478: GO 27482
// end ; end ;
27480: GO 27282
27482: POP
27483: POP
// if result then
27484: LD_VAR 0 1
27488: IFFALSE 27548
// begin ToLua ( playSibBomb() ) ;
27490: LD_STRING playSibBomb()
27492: PPUSH
27493: CALL_OW 559
// wait ( 0 0$14 ) ;
27497: LD_INT 490
27499: PPUSH
27500: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
27504: LD_VAR 0 1
27508: PUSH
27509: LD_INT 1
27511: ARRAY
27512: PPUSH
27513: LD_VAR 0 1
27517: PUSH
27518: LD_INT 2
27520: ARRAY
27521: PPUSH
27522: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
27526: LD_VAR 0 1
27530: PUSH
27531: LD_INT 1
27533: ARRAY
27534: PPUSH
27535: LD_VAR 0 1
27539: PUSH
27540: LD_INT 2
27542: ARRAY
27543: PPUSH
27544: CALL_OW 429
// end ; end ;
27548: LD_VAR 0 1
27552: RET
// every 0 0$1 trigger StreamModeActive and sReset do
27553: LD_EXP 47
27557: PUSH
27558: LD_EXP 69
27562: AND
27563: IFFALSE 27575
27565: GO 27567
27567: DISABLE
// YouLost (  ) ;
27568: LD_STRING 
27570: PPUSH
27571: CALL_OW 104
27575: END
// every 0 0$1 trigger StreamModeActive and sFog do
27576: LD_EXP 47
27580: PUSH
27581: LD_EXP 68
27585: AND
27586: IFFALSE 27600
27588: GO 27590
27590: DISABLE
// FogOff ( your_side ) ;
27591: LD_OWVAR 2
27595: PPUSH
27596: CALL_OW 344
27600: END
// every 0 0$1 trigger StreamModeActive and sSun do
27601: LD_EXP 47
27605: PUSH
27606: LD_EXP 70
27610: AND
27611: IFFALSE 27639
27613: GO 27615
27615: DISABLE
// begin solar_recharge_percent := 0 ;
27616: LD_ADDR_OWVAR 79
27620: PUSH
27621: LD_INT 0
27623: ST_TO_ADDR
// wait ( 5 5$00 ) ;
27624: LD_INT 10500
27626: PPUSH
27627: CALL_OW 67
// solar_recharge_percent := 100 ;
27631: LD_ADDR_OWVAR 79
27635: PUSH
27636: LD_INT 100
27638: ST_TO_ADDR
// end ;
27639: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
27640: LD_EXP 47
27644: PUSH
27645: LD_EXP 71
27649: AND
27650: IFFALSE 27889
27652: GO 27654
27654: DISABLE
27655: LD_INT 0
27657: PPUSH
27658: PPUSH
27659: PPUSH
// begin tmp := [ ] ;
27660: LD_ADDR_VAR 0 3
27664: PUSH
27665: EMPTY
27666: ST_TO_ADDR
// for i := 1 to 6 do
27667: LD_ADDR_VAR 0 1
27671: PUSH
27672: DOUBLE
27673: LD_INT 1
27675: DEC
27676: ST_TO_ADDR
27677: LD_INT 6
27679: PUSH
27680: FOR_TO
27681: IFFALSE 27786
// begin uc_nation := nation_nature ;
27683: LD_ADDR_OWVAR 21
27687: PUSH
27688: LD_INT 0
27690: ST_TO_ADDR
// uc_side := 0 ;
27691: LD_ADDR_OWVAR 20
27695: PUSH
27696: LD_INT 0
27698: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
27699: LD_ADDR_OWVAR 29
27703: PUSH
27704: LD_INT 12
27706: PUSH
27707: LD_INT 12
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: ST_TO_ADDR
// hc_agressivity := 20 ;
27714: LD_ADDR_OWVAR 35
27718: PUSH
27719: LD_INT 20
27721: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
27722: LD_ADDR_OWVAR 28
27726: PUSH
27727: LD_INT 17
27729: ST_TO_ADDR
// hc_gallery :=  ;
27730: LD_ADDR_OWVAR 33
27734: PUSH
27735: LD_STRING 
27737: ST_TO_ADDR
// hc_name :=  ;
27738: LD_ADDR_OWVAR 26
27742: PUSH
27743: LD_STRING 
27745: ST_TO_ADDR
// un := CreateHuman ;
27746: LD_ADDR_VAR 0 2
27750: PUSH
27751: CALL_OW 44
27755: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
27756: LD_VAR 0 2
27760: PPUSH
27761: LD_INT 1
27763: PPUSH
27764: CALL_OW 51
// tmp := tmp ^ un ;
27768: LD_ADDR_VAR 0 3
27772: PUSH
27773: LD_VAR 0 3
27777: PUSH
27778: LD_VAR 0 2
27782: ADD
27783: ST_TO_ADDR
// end ;
27784: GO 27680
27786: POP
27787: POP
// repeat wait ( 0 0$1 ) ;
27788: LD_INT 35
27790: PPUSH
27791: CALL_OW 67
// for un in tmp do
27795: LD_ADDR_VAR 0 2
27799: PUSH
27800: LD_VAR 0 3
27804: PUSH
27805: FOR_IN
27806: IFFALSE 27880
// begin if IsDead ( un ) then
27808: LD_VAR 0 2
27812: PPUSH
27813: CALL_OW 301
27817: IFFALSE 27837
// begin tmp := tmp diff un ;
27819: LD_ADDR_VAR 0 3
27823: PUSH
27824: LD_VAR 0 3
27828: PUSH
27829: LD_VAR 0 2
27833: DIFF
27834: ST_TO_ADDR
// continue ;
27835: GO 27805
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
27837: LD_VAR 0 2
27841: PPUSH
27842: LD_INT 3
27844: PUSH
27845: LD_INT 22
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: EMPTY
27856: LIST
27857: LIST
27858: PPUSH
27859: CALL_OW 69
27863: PPUSH
27864: LD_VAR 0 2
27868: PPUSH
27869: CALL_OW 74
27873: PPUSH
27874: CALL_OW 115
// end ;
27878: GO 27805
27880: POP
27881: POP
// until not tmp ;
27882: LD_VAR 0 3
27886: NOT
27887: IFFALSE 27788
// end ;
27889: PPOPN 3
27891: END
// every 0 0$1 trigger StreamModeActive and sTroll do
27892: LD_EXP 47
27896: PUSH
27897: LD_EXP 72
27901: AND
27902: IFFALSE 27956
27904: GO 27906
27906: DISABLE
// begin ToLua ( displayTroll(); ) ;
27907: LD_STRING displayTroll();
27909: PPUSH
27910: CALL_OW 559
// wait ( 3 3$00 ) ;
27914: LD_INT 6300
27916: PPUSH
27917: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27921: LD_STRING hideTroll();
27923: PPUSH
27924: CALL_OW 559
// wait ( 1 1$00 ) ;
27928: LD_INT 2100
27930: PPUSH
27931: CALL_OW 67
// ToLua ( displayTroll(); ) ;
27935: LD_STRING displayTroll();
27937: PPUSH
27938: CALL_OW 559
// wait ( 1 1$00 ) ;
27942: LD_INT 2100
27944: PPUSH
27945: CALL_OW 67
// ToLua ( hideTroll(); ) ;
27949: LD_STRING hideTroll();
27951: PPUSH
27952: CALL_OW 559
// end ;
27956: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
27957: LD_EXP 47
27961: PUSH
27962: LD_EXP 73
27966: AND
27967: IFFALSE 28030
27969: GO 27971
27971: DISABLE
27972: LD_INT 0
27974: PPUSH
// begin p := 0 ;
27975: LD_ADDR_VAR 0 1
27979: PUSH
27980: LD_INT 0
27982: ST_TO_ADDR
// repeat game_speed := 1 ;
27983: LD_ADDR_OWVAR 65
27987: PUSH
27988: LD_INT 1
27990: ST_TO_ADDR
// wait ( 0 0$1 ) ;
27991: LD_INT 35
27993: PPUSH
27994: CALL_OW 67
// p := p + 1 ;
27998: LD_ADDR_VAR 0 1
28002: PUSH
28003: LD_VAR 0 1
28007: PUSH
28008: LD_INT 1
28010: PLUS
28011: ST_TO_ADDR
// until p >= 60 ;
28012: LD_VAR 0 1
28016: PUSH
28017: LD_INT 60
28019: GREATEREQUAL
28020: IFFALSE 27983
// game_speed := 4 ;
28022: LD_ADDR_OWVAR 65
28026: PUSH
28027: LD_INT 4
28029: ST_TO_ADDR
// end ;
28030: PPOPN 1
28032: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
28033: LD_EXP 47
28037: PUSH
28038: LD_EXP 74
28042: AND
28043: IFFALSE 28189
28045: GO 28047
28047: DISABLE
28048: LD_INT 0
28050: PPUSH
28051: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28052: LD_ADDR_VAR 0 1
28056: PUSH
28057: LD_INT 22
28059: PUSH
28060: LD_OWVAR 2
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 2
28071: PUSH
28072: LD_INT 30
28074: PUSH
28075: LD_INT 0
28077: PUSH
28078: EMPTY
28079: LIST
28080: LIST
28081: PUSH
28082: LD_INT 30
28084: PUSH
28085: LD_INT 1
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: LIST
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PPUSH
28101: CALL_OW 69
28105: ST_TO_ADDR
// if not depot then
28106: LD_VAR 0 1
28110: NOT
28111: IFFALSE 28115
// exit ;
28113: GO 28189
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
28115: LD_ADDR_VAR 0 2
28119: PUSH
28120: LD_VAR 0 1
28124: PUSH
28125: LD_INT 1
28127: PPUSH
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL_OW 12
28137: ARRAY
28138: PPUSH
28139: CALL_OW 274
28143: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
28144: LD_VAR 0 2
28148: PPUSH
28149: LD_INT 1
28151: PPUSH
28152: LD_INT 0
28154: PPUSH
28155: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
28159: LD_VAR 0 2
28163: PPUSH
28164: LD_INT 2
28166: PPUSH
28167: LD_INT 0
28169: PPUSH
28170: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
28174: LD_VAR 0 2
28178: PPUSH
28179: LD_INT 3
28181: PPUSH
28182: LD_INT 0
28184: PPUSH
28185: CALL_OW 277
// end ;
28189: PPOPN 2
28191: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
28192: LD_EXP 47
28196: PUSH
28197: LD_EXP 75
28201: AND
28202: IFFALSE 28299
28204: GO 28206
28206: DISABLE
28207: LD_INT 0
28209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
28210: LD_ADDR_VAR 0 1
28214: PUSH
28215: LD_INT 22
28217: PUSH
28218: LD_OWVAR 2
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: PUSH
28227: LD_INT 21
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 3
28239: PUSH
28240: LD_INT 23
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: EMPTY
28255: LIST
28256: LIST
28257: LIST
28258: PPUSH
28259: CALL_OW 69
28263: ST_TO_ADDR
// if not tmp then
28264: LD_VAR 0 1
28268: NOT
28269: IFFALSE 28273
// exit ;
28271: GO 28299
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
28273: LD_VAR 0 1
28277: PUSH
28278: LD_INT 1
28280: PPUSH
28281: LD_VAR 0 1
28285: PPUSH
28286: CALL_OW 12
28290: ARRAY
28291: PPUSH
28292: LD_INT 200
28294: PPUSH
28295: CALL_OW 234
// end ;
28299: PPOPN 1
28301: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
28302: LD_EXP 47
28306: PUSH
28307: LD_EXP 76
28311: AND
28312: IFFALSE 28391
28314: GO 28316
28316: DISABLE
28317: LD_INT 0
28319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
28320: LD_ADDR_VAR 0 1
28324: PUSH
28325: LD_INT 22
28327: PUSH
28328: LD_OWVAR 2
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PUSH
28337: LD_INT 21
28339: PUSH
28340: LD_INT 2
28342: PUSH
28343: EMPTY
28344: LIST
28345: LIST
28346: PUSH
28347: EMPTY
28348: LIST
28349: LIST
28350: PPUSH
28351: CALL_OW 69
28355: ST_TO_ADDR
// if not tmp then
28356: LD_VAR 0 1
28360: NOT
28361: IFFALSE 28365
// exit ;
28363: GO 28391
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
28365: LD_VAR 0 1
28369: PUSH
28370: LD_INT 1
28372: PPUSH
28373: LD_VAR 0 1
28377: PPUSH
28378: CALL_OW 12
28382: ARRAY
28383: PPUSH
28384: LD_INT 60
28386: PPUSH
28387: CALL_OW 234
// end ;
28391: PPOPN 1
28393: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
28394: LD_EXP 47
28398: PUSH
28399: LD_EXP 77
28403: AND
28404: IFFALSE 28503
28406: GO 28408
28408: DISABLE
28409: LD_INT 0
28411: PPUSH
28412: PPUSH
// begin enable ;
28413: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
28414: LD_ADDR_VAR 0 1
28418: PUSH
28419: LD_INT 22
28421: PUSH
28422: LD_OWVAR 2
28426: PUSH
28427: EMPTY
28428: LIST
28429: LIST
28430: PUSH
28431: LD_INT 61
28433: PUSH
28434: EMPTY
28435: LIST
28436: PUSH
28437: LD_INT 33
28439: PUSH
28440: LD_INT 2
28442: PUSH
28443: EMPTY
28444: LIST
28445: LIST
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: PPUSH
28452: CALL_OW 69
28456: ST_TO_ADDR
// if not tmp then
28457: LD_VAR 0 1
28461: NOT
28462: IFFALSE 28466
// exit ;
28464: GO 28503
// for i in tmp do
28466: LD_ADDR_VAR 0 2
28470: PUSH
28471: LD_VAR 0 1
28475: PUSH
28476: FOR_IN
28477: IFFALSE 28501
// if IsControledBy ( i ) then
28479: LD_VAR 0 2
28483: PPUSH
28484: CALL_OW 312
28488: IFFALSE 28499
// ComUnlink ( i ) ;
28490: LD_VAR 0 2
28494: PPUSH
28495: CALL_OW 136
28499: GO 28476
28501: POP
28502: POP
// end ;
28503: PPOPN 2
28505: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
28506: LD_EXP 47
28510: PUSH
28511: LD_EXP 78
28515: AND
28516: IFFALSE 28656
28518: GO 28520
28520: DISABLE
28521: LD_INT 0
28523: PPUSH
28524: PPUSH
// begin ToLua ( displayPowell(); ) ;
28525: LD_STRING displayPowell();
28527: PPUSH
28528: CALL_OW 559
// uc_side := 0 ;
28532: LD_ADDR_OWVAR 20
28536: PUSH
28537: LD_INT 0
28539: ST_TO_ADDR
// uc_nation := 2 ;
28540: LD_ADDR_OWVAR 21
28544: PUSH
28545: LD_INT 2
28547: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
28548: LD_ADDR_OWVAR 37
28552: PUSH
28553: LD_INT 14
28555: ST_TO_ADDR
// vc_engine := engine_siberite ;
28556: LD_ADDR_OWVAR 39
28560: PUSH
28561: LD_INT 3
28563: ST_TO_ADDR
// vc_control := control_apeman ;
28564: LD_ADDR_OWVAR 38
28568: PUSH
28569: LD_INT 5
28571: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
28572: LD_ADDR_OWVAR 40
28576: PUSH
28577: LD_INT 29
28579: ST_TO_ADDR
// un := CreateVehicle ;
28580: LD_ADDR_VAR 0 2
28584: PUSH
28585: CALL_OW 45
28589: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
28590: LD_VAR 0 2
28594: PPUSH
28595: LD_INT 1
28597: PPUSH
28598: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
28602: LD_INT 35
28604: PPUSH
28605: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
28609: LD_VAR 0 2
28613: PPUSH
28614: LD_INT 22
28616: PUSH
28617: LD_OWVAR 2
28621: PUSH
28622: EMPTY
28623: LIST
28624: LIST
28625: PPUSH
28626: CALL_OW 69
28630: PPUSH
28631: LD_VAR 0 2
28635: PPUSH
28636: CALL_OW 74
28640: PPUSH
28641: CALL_OW 115
// until IsDead ( un ) ;
28645: LD_VAR 0 2
28649: PPUSH
28650: CALL_OW 301
28654: IFFALSE 28602
// end ;
28656: PPOPN 2
28658: END
// every 0 0$1 trigger StreamModeActive and sStu do
28659: LD_EXP 47
28663: PUSH
28664: LD_EXP 86
28668: AND
28669: IFFALSE 28685
28671: GO 28673
28673: DISABLE
// begin ToLua ( displayStucuk(); ) ;
28674: LD_STRING displayStucuk();
28676: PPUSH
28677: CALL_OW 559
// ResetFog ;
28681: CALL_OW 335
// end ;
28685: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
28686: LD_EXP 47
28690: PUSH
28691: LD_EXP 79
28695: AND
28696: IFFALSE 28837
28698: GO 28700
28700: DISABLE
28701: LD_INT 0
28703: PPUSH
28704: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28705: LD_ADDR_VAR 0 2
28709: PUSH
28710: LD_INT 22
28712: PUSH
28713: LD_OWVAR 2
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 21
28724: PUSH
28725: LD_INT 1
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: PPUSH
28736: CALL_OW 69
28740: ST_TO_ADDR
// if not tmp then
28741: LD_VAR 0 2
28745: NOT
28746: IFFALSE 28750
// exit ;
28748: GO 28837
// un := tmp [ rand ( 1 , tmp ) ] ;
28750: LD_ADDR_VAR 0 1
28754: PUSH
28755: LD_VAR 0 2
28759: PUSH
28760: LD_INT 1
28762: PPUSH
28763: LD_VAR 0 2
28767: PPUSH
28768: CALL_OW 12
28772: ARRAY
28773: ST_TO_ADDR
// SetSide ( un , 0 ) ;
28774: LD_VAR 0 1
28778: PPUSH
28779: LD_INT 0
28781: PPUSH
28782: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
28786: LD_VAR 0 1
28790: PPUSH
28791: LD_OWVAR 3
28795: PUSH
28796: LD_VAR 0 1
28800: DIFF
28801: PPUSH
28802: LD_VAR 0 1
28806: PPUSH
28807: CALL_OW 74
28811: PPUSH
28812: CALL_OW 115
// wait ( 0 0$20 ) ;
28816: LD_INT 700
28818: PPUSH
28819: CALL_OW 67
// SetSide ( un , your_side ) ;
28823: LD_VAR 0 1
28827: PPUSH
28828: LD_OWVAR 2
28832: PPUSH
28833: CALL_OW 235
// end ;
28837: PPOPN 2
28839: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
28840: LD_EXP 47
28844: PUSH
28845: LD_EXP 80
28849: AND
28850: IFFALSE 28956
28852: GO 28854
28854: DISABLE
28855: LD_INT 0
28857: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28858: LD_ADDR_VAR 0 1
28862: PUSH
28863: LD_INT 22
28865: PUSH
28866: LD_OWVAR 2
28870: PUSH
28871: EMPTY
28872: LIST
28873: LIST
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: LD_INT 30
28880: PUSH
28881: LD_INT 0
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 30
28890: PUSH
28891: LD_INT 1
28893: PUSH
28894: EMPTY
28895: LIST
28896: LIST
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: LIST
28902: PUSH
28903: EMPTY
28904: LIST
28905: LIST
28906: PPUSH
28907: CALL_OW 69
28911: ST_TO_ADDR
// if not depot then
28912: LD_VAR 0 1
28916: NOT
28917: IFFALSE 28921
// exit ;
28919: GO 28956
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
28921: LD_VAR 0 1
28925: PUSH
28926: LD_INT 1
28928: ARRAY
28929: PPUSH
28930: CALL_OW 250
28934: PPUSH
28935: LD_VAR 0 1
28939: PUSH
28940: LD_INT 1
28942: ARRAY
28943: PPUSH
28944: CALL_OW 251
28948: PPUSH
28949: LD_INT 70
28951: PPUSH
28952: CALL_OW 495
// end ;
28956: PPOPN 1
28958: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
28959: LD_EXP 47
28963: PUSH
28964: LD_EXP 81
28968: AND
28969: IFFALSE 29180
28971: GO 28973
28973: DISABLE
28974: LD_INT 0
28976: PPUSH
28977: PPUSH
28978: PPUSH
28979: PPUSH
28980: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
28981: LD_ADDR_VAR 0 5
28985: PUSH
28986: LD_INT 22
28988: PUSH
28989: LD_OWVAR 2
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 21
29000: PUSH
29001: LD_INT 1
29003: PUSH
29004: EMPTY
29005: LIST
29006: LIST
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PPUSH
29012: CALL_OW 69
29016: ST_TO_ADDR
// if not tmp then
29017: LD_VAR 0 5
29021: NOT
29022: IFFALSE 29026
// exit ;
29024: GO 29180
// for i in tmp do
29026: LD_ADDR_VAR 0 1
29030: PUSH
29031: LD_VAR 0 5
29035: PUSH
29036: FOR_IN
29037: IFFALSE 29178
// begin d := rand ( 0 , 5 ) ;
29039: LD_ADDR_VAR 0 4
29043: PUSH
29044: LD_INT 0
29046: PPUSH
29047: LD_INT 5
29049: PPUSH
29050: CALL_OW 12
29054: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
29055: LD_ADDR_VAR 0 2
29059: PUSH
29060: LD_VAR 0 1
29064: PPUSH
29065: CALL_OW 250
29069: PPUSH
29070: LD_VAR 0 4
29074: PPUSH
29075: LD_INT 3
29077: PPUSH
29078: LD_INT 12
29080: PPUSH
29081: CALL_OW 12
29085: PPUSH
29086: CALL_OW 272
29090: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
29091: LD_ADDR_VAR 0 3
29095: PUSH
29096: LD_VAR 0 1
29100: PPUSH
29101: CALL_OW 251
29105: PPUSH
29106: LD_VAR 0 4
29110: PPUSH
29111: LD_INT 3
29113: PPUSH
29114: LD_INT 12
29116: PPUSH
29117: CALL_OW 12
29121: PPUSH
29122: CALL_OW 273
29126: ST_TO_ADDR
// if ValidHex ( x , y ) then
29127: LD_VAR 0 2
29131: PPUSH
29132: LD_VAR 0 3
29136: PPUSH
29137: CALL_OW 488
29141: IFFALSE 29176
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
29143: LD_VAR 0 1
29147: PPUSH
29148: LD_VAR 0 2
29152: PPUSH
29153: LD_VAR 0 3
29157: PPUSH
29158: LD_INT 3
29160: PPUSH
29161: LD_INT 6
29163: PPUSH
29164: CALL_OW 12
29168: PPUSH
29169: LD_INT 1
29171: PPUSH
29172: CALL_OW 483
// end ;
29176: GO 29036
29178: POP
29179: POP
// end ;
29180: PPOPN 5
29182: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
29183: LD_EXP 47
29187: PUSH
29188: LD_EXP 82
29192: AND
29193: IFFALSE 29287
29195: GO 29197
29197: DISABLE
29198: LD_INT 0
29200: PPUSH
29201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
29202: LD_ADDR_VAR 0 2
29206: PUSH
29207: LD_INT 22
29209: PUSH
29210: LD_OWVAR 2
29214: PUSH
29215: EMPTY
29216: LIST
29217: LIST
29218: PUSH
29219: LD_INT 32
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 21
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: PPUSH
29244: CALL_OW 69
29248: ST_TO_ADDR
// if not tmp then
29249: LD_VAR 0 2
29253: NOT
29254: IFFALSE 29258
// exit ;
29256: GO 29287
// for i in tmp do
29258: LD_ADDR_VAR 0 1
29262: PUSH
29263: LD_VAR 0 2
29267: PUSH
29268: FOR_IN
29269: IFFALSE 29285
// SetFuel ( i , 0 ) ;
29271: LD_VAR 0 1
29275: PPUSH
29276: LD_INT 0
29278: PPUSH
29279: CALL_OW 240
29283: GO 29268
29285: POP
29286: POP
// end ;
29287: PPOPN 2
29289: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
29290: LD_EXP 47
29294: PUSH
29295: LD_EXP 83
29299: AND
29300: IFFALSE 29366
29302: GO 29304
29304: DISABLE
29305: LD_INT 0
29307: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
29308: LD_ADDR_VAR 0 1
29312: PUSH
29313: LD_INT 22
29315: PUSH
29316: LD_OWVAR 2
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: PUSH
29325: LD_INT 30
29327: PUSH
29328: LD_INT 29
29330: PUSH
29331: EMPTY
29332: LIST
29333: LIST
29334: PUSH
29335: EMPTY
29336: LIST
29337: LIST
29338: PPUSH
29339: CALL_OW 69
29343: ST_TO_ADDR
// if not tmp then
29344: LD_VAR 0 1
29348: NOT
29349: IFFALSE 29353
// exit ;
29351: GO 29366
// DestroyUnit ( tmp [ 1 ] ) ;
29353: LD_VAR 0 1
29357: PUSH
29358: LD_INT 1
29360: ARRAY
29361: PPUSH
29362: CALL_OW 65
// end ;
29366: PPOPN 1
29368: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
29369: LD_EXP 47
29373: PUSH
29374: LD_EXP 85
29378: AND
29379: IFFALSE 29508
29381: GO 29383
29383: DISABLE
29384: LD_INT 0
29386: PPUSH
// begin uc_side := 0 ;
29387: LD_ADDR_OWVAR 20
29391: PUSH
29392: LD_INT 0
29394: ST_TO_ADDR
// uc_nation := nation_arabian ;
29395: LD_ADDR_OWVAR 21
29399: PUSH
29400: LD_INT 2
29402: ST_TO_ADDR
// hc_gallery :=  ;
29403: LD_ADDR_OWVAR 33
29407: PUSH
29408: LD_STRING 
29410: ST_TO_ADDR
// hc_name :=  ;
29411: LD_ADDR_OWVAR 26
29415: PUSH
29416: LD_STRING 
29418: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
29419: LD_INT 1
29421: PPUSH
29422: LD_INT 11
29424: PPUSH
29425: LD_INT 10
29427: PPUSH
29428: CALL_OW 380
// un := CreateHuman ;
29432: LD_ADDR_VAR 0 1
29436: PUSH
29437: CALL_OW 44
29441: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
29442: LD_VAR 0 1
29446: PPUSH
29447: LD_INT 1
29449: PPUSH
29450: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
29454: LD_INT 35
29456: PPUSH
29457: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
29461: LD_VAR 0 1
29465: PPUSH
29466: LD_INT 22
29468: PUSH
29469: LD_OWVAR 2
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PPUSH
29478: CALL_OW 69
29482: PPUSH
29483: LD_VAR 0 1
29487: PPUSH
29488: CALL_OW 74
29492: PPUSH
29493: CALL_OW 115
// until IsDead ( un ) ;
29497: LD_VAR 0 1
29501: PPUSH
29502: CALL_OW 301
29506: IFFALSE 29454
// end ;
29508: PPOPN 1
29510: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
29511: LD_EXP 47
29515: PUSH
29516: LD_EXP 87
29520: AND
29521: IFFALSE 29533
29523: GO 29525
29525: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
29526: LD_STRING earthquake(getX(game), 0, 32)
29528: PPUSH
29529: CALL_OW 559
29533: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
29534: LD_EXP 47
29538: PUSH
29539: LD_EXP 88
29543: AND
29544: IFFALSE 29635
29546: GO 29548
29548: DISABLE
29549: LD_INT 0
29551: PPUSH
// begin enable ;
29552: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_INT 22
29560: PUSH
29561: LD_OWVAR 2
29565: PUSH
29566: EMPTY
29567: LIST
29568: LIST
29569: PUSH
29570: LD_INT 21
29572: PUSH
29573: LD_INT 2
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: PUSH
29580: LD_INT 33
29582: PUSH
29583: LD_INT 3
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: LIST
29594: PPUSH
29595: CALL_OW 69
29599: ST_TO_ADDR
// if not tmp then
29600: LD_VAR 0 1
29604: NOT
29605: IFFALSE 29609
// exit ;
29607: GO 29635
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
29609: LD_VAR 0 1
29613: PUSH
29614: LD_INT 1
29616: PPUSH
29617: LD_VAR 0 1
29621: PPUSH
29622: CALL_OW 12
29626: ARRAY
29627: PPUSH
29628: LD_INT 1
29630: PPUSH
29631: CALL_OW 234
// end ;
29635: PPOPN 1
29637: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
29638: LD_EXP 47
29642: PUSH
29643: LD_EXP 89
29647: AND
29648: IFFALSE 29789
29650: GO 29652
29652: DISABLE
29653: LD_INT 0
29655: PPUSH
29656: PPUSH
29657: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29658: LD_ADDR_VAR 0 3
29662: PUSH
29663: LD_INT 22
29665: PUSH
29666: LD_OWVAR 2
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: LD_INT 25
29677: PUSH
29678: LD_INT 1
29680: PUSH
29681: EMPTY
29682: LIST
29683: LIST
29684: PUSH
29685: EMPTY
29686: LIST
29687: LIST
29688: PPUSH
29689: CALL_OW 69
29693: ST_TO_ADDR
// if not tmp then
29694: LD_VAR 0 3
29698: NOT
29699: IFFALSE 29703
// exit ;
29701: GO 29789
// un := tmp [ rand ( 1 , tmp ) ] ;
29703: LD_ADDR_VAR 0 2
29707: PUSH
29708: LD_VAR 0 3
29712: PUSH
29713: LD_INT 1
29715: PPUSH
29716: LD_VAR 0 3
29720: PPUSH
29721: CALL_OW 12
29725: ARRAY
29726: ST_TO_ADDR
// if Crawls ( un ) then
29727: LD_VAR 0 2
29731: PPUSH
29732: CALL_OW 318
29736: IFFALSE 29747
// ComWalk ( un ) ;
29738: LD_VAR 0 2
29742: PPUSH
29743: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
29747: LD_VAR 0 2
29751: PPUSH
29752: LD_INT 9
29754: PPUSH
29755: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
29759: LD_INT 28
29761: PPUSH
29762: LD_OWVAR 2
29766: PPUSH
29767: LD_INT 2
29769: PPUSH
29770: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
29774: LD_INT 29
29776: PPUSH
29777: LD_OWVAR 2
29781: PPUSH
29782: LD_INT 2
29784: PPUSH
29785: CALL_OW 322
// end ;
29789: PPOPN 3
29791: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
29792: LD_EXP 47
29796: PUSH
29797: LD_EXP 90
29801: AND
29802: IFFALSE 29913
29804: GO 29806
29806: DISABLE
29807: LD_INT 0
29809: PPUSH
29810: PPUSH
29811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
29812: LD_ADDR_VAR 0 3
29816: PUSH
29817: LD_INT 22
29819: PUSH
29820: LD_OWVAR 2
29824: PUSH
29825: EMPTY
29826: LIST
29827: LIST
29828: PUSH
29829: LD_INT 25
29831: PUSH
29832: LD_INT 1
29834: PUSH
29835: EMPTY
29836: LIST
29837: LIST
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: PPUSH
29843: CALL_OW 69
29847: ST_TO_ADDR
// if not tmp then
29848: LD_VAR 0 3
29852: NOT
29853: IFFALSE 29857
// exit ;
29855: GO 29913
// un := tmp [ rand ( 1 , tmp ) ] ;
29857: LD_ADDR_VAR 0 2
29861: PUSH
29862: LD_VAR 0 3
29866: PUSH
29867: LD_INT 1
29869: PPUSH
29870: LD_VAR 0 3
29874: PPUSH
29875: CALL_OW 12
29879: ARRAY
29880: ST_TO_ADDR
// if Crawls ( un ) then
29881: LD_VAR 0 2
29885: PPUSH
29886: CALL_OW 318
29890: IFFALSE 29901
// ComWalk ( un ) ;
29892: LD_VAR 0 2
29896: PPUSH
29897: CALL_OW 138
// SetClass ( un , class_mortar ) ;
29901: LD_VAR 0 2
29905: PPUSH
29906: LD_INT 8
29908: PPUSH
29909: CALL_OW 336
// end ;
29913: PPOPN 3
29915: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
29916: LD_EXP 47
29920: PUSH
29921: LD_EXP 91
29925: AND
29926: IFFALSE 30070
29928: GO 29930
29930: DISABLE
29931: LD_INT 0
29933: PPUSH
29934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
29935: LD_ADDR_VAR 0 2
29939: PUSH
29940: LD_INT 22
29942: PUSH
29943: LD_OWVAR 2
29947: PUSH
29948: EMPTY
29949: LIST
29950: LIST
29951: PUSH
29952: LD_INT 21
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: EMPTY
29959: LIST
29960: LIST
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: LD_INT 34
29967: PUSH
29968: LD_INT 12
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 34
29977: PUSH
29978: LD_INT 51
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 34
29987: PUSH
29988: LD_INT 32
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: LIST
29999: LIST
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: PPUSH
30006: CALL_OW 69
30010: ST_TO_ADDR
// if not tmp then
30011: LD_VAR 0 2
30015: NOT
30016: IFFALSE 30020
// exit ;
30018: GO 30070
// for i in tmp do
30020: LD_ADDR_VAR 0 1
30024: PUSH
30025: LD_VAR 0 2
30029: PUSH
30030: FOR_IN
30031: IFFALSE 30068
// if GetCargo ( i , mat_artifact ) = 0 then
30033: LD_VAR 0 1
30037: PPUSH
30038: LD_INT 4
30040: PPUSH
30041: CALL_OW 289
30045: PUSH
30046: LD_INT 0
30048: EQUAL
30049: IFFALSE 30066
// SetCargo ( i , mat_siberit , 100 ) ;
30051: LD_VAR 0 1
30055: PPUSH
30056: LD_INT 3
30058: PPUSH
30059: LD_INT 100
30061: PPUSH
30062: CALL_OW 290
30066: GO 30030
30068: POP
30069: POP
// end ;
30070: PPOPN 2
30072: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
30073: LD_EXP 47
30077: PUSH
30078: LD_EXP 92
30082: AND
30083: IFFALSE 30266
30085: GO 30087
30087: DISABLE
30088: LD_INT 0
30090: PPUSH
30091: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
30092: LD_ADDR_VAR 0 2
30096: PUSH
30097: LD_INT 22
30099: PUSH
30100: LD_OWVAR 2
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PPUSH
30109: CALL_OW 69
30113: ST_TO_ADDR
// if not tmp then
30114: LD_VAR 0 2
30118: NOT
30119: IFFALSE 30123
// exit ;
30121: GO 30266
// for i := 1 to 2 do
30123: LD_ADDR_VAR 0 1
30127: PUSH
30128: DOUBLE
30129: LD_INT 1
30131: DEC
30132: ST_TO_ADDR
30133: LD_INT 2
30135: PUSH
30136: FOR_TO
30137: IFFALSE 30264
// begin uc_side := your_side ;
30139: LD_ADDR_OWVAR 20
30143: PUSH
30144: LD_OWVAR 2
30148: ST_TO_ADDR
// uc_nation := nation_american ;
30149: LD_ADDR_OWVAR 21
30153: PUSH
30154: LD_INT 1
30156: ST_TO_ADDR
// vc_chassis := us_morphling ;
30157: LD_ADDR_OWVAR 37
30161: PUSH
30162: LD_INT 5
30164: ST_TO_ADDR
// vc_engine := engine_siberite ;
30165: LD_ADDR_OWVAR 39
30169: PUSH
30170: LD_INT 3
30172: ST_TO_ADDR
// vc_control := control_computer ;
30173: LD_ADDR_OWVAR 38
30177: PUSH
30178: LD_INT 3
30180: ST_TO_ADDR
// vc_weapon := us_double_laser ;
30181: LD_ADDR_OWVAR 40
30185: PUSH
30186: LD_INT 10
30188: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
30189: LD_VAR 0 2
30193: PUSH
30194: LD_INT 1
30196: ARRAY
30197: PPUSH
30198: CALL_OW 310
30202: NOT
30203: IFFALSE 30250
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
30205: CALL_OW 45
30209: PPUSH
30210: LD_VAR 0 2
30214: PUSH
30215: LD_INT 1
30217: ARRAY
30218: PPUSH
30219: CALL_OW 250
30223: PPUSH
30224: LD_VAR 0 2
30228: PUSH
30229: LD_INT 1
30231: ARRAY
30232: PPUSH
30233: CALL_OW 251
30237: PPUSH
30238: LD_INT 12
30240: PPUSH
30241: LD_INT 1
30243: PPUSH
30244: CALL_OW 50
30248: GO 30262
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
30250: CALL_OW 45
30254: PPUSH
30255: LD_INT 1
30257: PPUSH
30258: CALL_OW 51
// end ;
30262: GO 30136
30264: POP
30265: POP
// end ;
30266: PPOPN 2
30268: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
30269: LD_EXP 47
30273: PUSH
30274: LD_EXP 93
30278: AND
30279: IFFALSE 30501
30281: GO 30283
30283: DISABLE
30284: LD_INT 0
30286: PPUSH
30287: PPUSH
30288: PPUSH
30289: PPUSH
30290: PPUSH
30291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
30292: LD_ADDR_VAR 0 6
30296: PUSH
30297: LD_INT 22
30299: PUSH
30300: LD_OWVAR 2
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: LD_INT 21
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 3
30321: PUSH
30322: LD_INT 23
30324: PUSH
30325: LD_INT 0
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: LIST
30340: PPUSH
30341: CALL_OW 69
30345: ST_TO_ADDR
// if not tmp then
30346: LD_VAR 0 6
30350: NOT
30351: IFFALSE 30355
// exit ;
30353: GO 30501
// s1 := rand ( 1 , 4 ) ;
30355: LD_ADDR_VAR 0 2
30359: PUSH
30360: LD_INT 1
30362: PPUSH
30363: LD_INT 4
30365: PPUSH
30366: CALL_OW 12
30370: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
30371: LD_ADDR_VAR 0 4
30375: PUSH
30376: LD_VAR 0 6
30380: PUSH
30381: LD_INT 1
30383: ARRAY
30384: PPUSH
30385: LD_VAR 0 2
30389: PPUSH
30390: CALL_OW 259
30394: ST_TO_ADDR
// if s1 = 1 then
30395: LD_VAR 0 2
30399: PUSH
30400: LD_INT 1
30402: EQUAL
30403: IFFALSE 30423
// s2 := rand ( 2 , 4 ) else
30405: LD_ADDR_VAR 0 3
30409: PUSH
30410: LD_INT 2
30412: PPUSH
30413: LD_INT 4
30415: PPUSH
30416: CALL_OW 12
30420: ST_TO_ADDR
30421: GO 30431
// s2 := 1 ;
30423: LD_ADDR_VAR 0 3
30427: PUSH
30428: LD_INT 1
30430: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
30431: LD_ADDR_VAR 0 5
30435: PUSH
30436: LD_VAR 0 6
30440: PUSH
30441: LD_INT 1
30443: ARRAY
30444: PPUSH
30445: LD_VAR 0 3
30449: PPUSH
30450: CALL_OW 259
30454: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
30455: LD_VAR 0 6
30459: PUSH
30460: LD_INT 1
30462: ARRAY
30463: PPUSH
30464: LD_VAR 0 2
30468: PPUSH
30469: LD_VAR 0 5
30473: PPUSH
30474: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
30478: LD_VAR 0 6
30482: PUSH
30483: LD_INT 1
30485: ARRAY
30486: PPUSH
30487: LD_VAR 0 3
30491: PPUSH
30492: LD_VAR 0 4
30496: PPUSH
30497: CALL_OW 237
// end ;
30501: PPOPN 6
30503: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
30504: LD_EXP 47
30508: PUSH
30509: LD_EXP 94
30513: AND
30514: IFFALSE 30593
30516: GO 30518
30518: DISABLE
30519: LD_INT 0
30521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
30522: LD_ADDR_VAR 0 1
30526: PUSH
30527: LD_INT 22
30529: PUSH
30530: LD_OWVAR 2
30534: PUSH
30535: EMPTY
30536: LIST
30537: LIST
30538: PUSH
30539: LD_INT 30
30541: PUSH
30542: LD_INT 3
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PPUSH
30553: CALL_OW 69
30557: ST_TO_ADDR
// if not tmp then
30558: LD_VAR 0 1
30562: NOT
30563: IFFALSE 30567
// exit ;
30565: GO 30593
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
30567: LD_VAR 0 1
30571: PUSH
30572: LD_INT 1
30574: PPUSH
30575: LD_VAR 0 1
30579: PPUSH
30580: CALL_OW 12
30584: ARRAY
30585: PPUSH
30586: LD_INT 1
30588: PPUSH
30589: CALL_OW 234
// end ;
30593: PPOPN 1
30595: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
30596: LD_EXP 47
30600: PUSH
30601: LD_EXP 95
30605: AND
30606: IFFALSE 30718
30608: GO 30610
30610: DISABLE
30611: LD_INT 0
30613: PPUSH
30614: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
30615: LD_ADDR_VAR 0 2
30619: PUSH
30620: LD_INT 22
30622: PUSH
30623: LD_OWVAR 2
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: PUSH
30632: LD_INT 2
30634: PUSH
30635: LD_INT 30
30637: PUSH
30638: LD_INT 27
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 30
30647: PUSH
30648: LD_INT 26
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 30
30657: PUSH
30658: LD_INT 28
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: PUSH
30671: EMPTY
30672: LIST
30673: LIST
30674: PPUSH
30675: CALL_OW 69
30679: ST_TO_ADDR
// if not tmp then
30680: LD_VAR 0 2
30684: NOT
30685: IFFALSE 30689
// exit ;
30687: GO 30718
// for i in tmp do
30689: LD_ADDR_VAR 0 1
30693: PUSH
30694: LD_VAR 0 2
30698: PUSH
30699: FOR_IN
30700: IFFALSE 30716
// SetLives ( i , 1 ) ;
30702: LD_VAR 0 1
30706: PPUSH
30707: LD_INT 1
30709: PPUSH
30710: CALL_OW 234
30714: GO 30699
30716: POP
30717: POP
// end ;
30718: PPOPN 2
30720: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
30721: LD_EXP 47
30725: PUSH
30726: LD_EXP 96
30730: AND
30731: IFFALSE 31018
30733: GO 30735
30735: DISABLE
30736: LD_INT 0
30738: PPUSH
30739: PPUSH
30740: PPUSH
// begin i := rand ( 1 , 7 ) ;
30741: LD_ADDR_VAR 0 1
30745: PUSH
30746: LD_INT 1
30748: PPUSH
30749: LD_INT 7
30751: PPUSH
30752: CALL_OW 12
30756: ST_TO_ADDR
// case i of 1 :
30757: LD_VAR 0 1
30761: PUSH
30762: LD_INT 1
30764: DOUBLE
30765: EQUAL
30766: IFTRUE 30770
30768: GO 30780
30770: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
30771: LD_STRING earthquake(getX(game), 0, 32)
30773: PPUSH
30774: CALL_OW 559
30778: GO 31018
30780: LD_INT 2
30782: DOUBLE
30783: EQUAL
30784: IFTRUE 30788
30786: GO 30802
30788: POP
// begin ToLua ( displayStucuk(); ) ;
30789: LD_STRING displayStucuk();
30791: PPUSH
30792: CALL_OW 559
// ResetFog ;
30796: CALL_OW 335
// end ; 3 :
30800: GO 31018
30802: LD_INT 3
30804: DOUBLE
30805: EQUAL
30806: IFTRUE 30810
30808: GO 30914
30810: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
30811: LD_ADDR_VAR 0 2
30815: PUSH
30816: LD_INT 22
30818: PUSH
30819: LD_OWVAR 2
30823: PUSH
30824: EMPTY
30825: LIST
30826: LIST
30827: PUSH
30828: LD_INT 25
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PPUSH
30842: CALL_OW 69
30846: ST_TO_ADDR
// if not tmp then
30847: LD_VAR 0 2
30851: NOT
30852: IFFALSE 30856
// exit ;
30854: GO 31018
// un := tmp [ rand ( 1 , tmp ) ] ;
30856: LD_ADDR_VAR 0 3
30860: PUSH
30861: LD_VAR 0 2
30865: PUSH
30866: LD_INT 1
30868: PPUSH
30869: LD_VAR 0 2
30873: PPUSH
30874: CALL_OW 12
30878: ARRAY
30879: ST_TO_ADDR
// if Crawls ( un ) then
30880: LD_VAR 0 3
30884: PPUSH
30885: CALL_OW 318
30889: IFFALSE 30900
// ComWalk ( un ) ;
30891: LD_VAR 0 3
30895: PPUSH
30896: CALL_OW 138
// SetClass ( un , class_mortar ) ;
30900: LD_VAR 0 3
30904: PPUSH
30905: LD_INT 8
30907: PPUSH
30908: CALL_OW 336
// end ; 4 :
30912: GO 31018
30914: LD_INT 4
30916: DOUBLE
30917: EQUAL
30918: IFTRUE 30922
30920: GO 30996
30922: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
30923: LD_ADDR_VAR 0 2
30927: PUSH
30928: LD_INT 22
30930: PUSH
30931: LD_OWVAR 2
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 30
30942: PUSH
30943: LD_INT 29
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: PUSH
30950: EMPTY
30951: LIST
30952: LIST
30953: PPUSH
30954: CALL_OW 69
30958: ST_TO_ADDR
// if not tmp then
30959: LD_VAR 0 2
30963: NOT
30964: IFFALSE 30968
// exit ;
30966: GO 31018
// CenterNowOnUnits ( tmp [ 1 ] ) ;
30968: LD_VAR 0 2
30972: PUSH
30973: LD_INT 1
30975: ARRAY
30976: PPUSH
30977: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
30981: LD_VAR 0 2
30985: PUSH
30986: LD_INT 1
30988: ARRAY
30989: PPUSH
30990: CALL_OW 65
// end ; 5 .. 7 :
30994: GO 31018
30996: LD_INT 5
30998: DOUBLE
30999: GREATEREQUAL
31000: IFFALSE 31008
31002: LD_INT 7
31004: DOUBLE
31005: LESSEQUAL
31006: IFTRUE 31010
31008: GO 31017
31010: POP
// StreamSibBomb ; end ;
31011: CALL 27255 0 0
31015: GO 31018
31017: POP
// end ;
31018: PPOPN 3
31020: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
31021: LD_EXP 47
31025: PUSH
31026: LD_EXP 97
31030: AND
31031: IFFALSE 31187
31033: GO 31035
31035: DISABLE
31036: LD_INT 0
31038: PPUSH
31039: PPUSH
31040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
31041: LD_ADDR_VAR 0 2
31045: PUSH
31046: LD_INT 81
31048: PUSH
31049: LD_OWVAR 2
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: PUSH
31058: LD_INT 2
31060: PUSH
31061: LD_INT 21
31063: PUSH
31064: LD_INT 1
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 21
31073: PUSH
31074: LD_INT 2
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: LIST
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PPUSH
31090: CALL_OW 69
31094: ST_TO_ADDR
// if not tmp then
31095: LD_VAR 0 2
31099: NOT
31100: IFFALSE 31104
// exit ;
31102: GO 31187
// p := 0 ;
31104: LD_ADDR_VAR 0 3
31108: PUSH
31109: LD_INT 0
31111: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31112: LD_INT 35
31114: PPUSH
31115: CALL_OW 67
// p := p + 1 ;
31119: LD_ADDR_VAR 0 3
31123: PUSH
31124: LD_VAR 0 3
31128: PUSH
31129: LD_INT 1
31131: PLUS
31132: ST_TO_ADDR
// for i in tmp do
31133: LD_ADDR_VAR 0 1
31137: PUSH
31138: LD_VAR 0 2
31142: PUSH
31143: FOR_IN
31144: IFFALSE 31175
// if GetLives ( i ) < 1000 then
31146: LD_VAR 0 1
31150: PPUSH
31151: CALL_OW 256
31155: PUSH
31156: LD_INT 1000
31158: LESS
31159: IFFALSE 31173
// SetLives ( i , 1000 ) ;
31161: LD_VAR 0 1
31165: PPUSH
31166: LD_INT 1000
31168: PPUSH
31169: CALL_OW 234
31173: GO 31143
31175: POP
31176: POP
// until p > 20 ;
31177: LD_VAR 0 3
31181: PUSH
31182: LD_INT 20
31184: GREATER
31185: IFFALSE 31112
// end ;
31187: PPOPN 3
31189: END
// every 0 0$1 trigger StreamModeActive and sTime do
31190: LD_EXP 47
31194: PUSH
31195: LD_EXP 98
31199: AND
31200: IFFALSE 31235
31202: GO 31204
31204: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
31205: LD_INT 28
31207: PPUSH
31208: LD_OWVAR 2
31212: PPUSH
31213: LD_INT 2
31215: PPUSH
31216: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
31220: LD_INT 30
31222: PPUSH
31223: LD_OWVAR 2
31227: PPUSH
31228: LD_INT 2
31230: PPUSH
31231: CALL_OW 322
// end ;
31235: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
31236: LD_EXP 47
31240: PUSH
31241: LD_EXP 99
31245: AND
31246: IFFALSE 31367
31248: GO 31250
31250: DISABLE
31251: LD_INT 0
31253: PPUSH
31254: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
31255: LD_ADDR_VAR 0 2
31259: PUSH
31260: LD_INT 22
31262: PUSH
31263: LD_OWVAR 2
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 21
31274: PUSH
31275: LD_INT 1
31277: PUSH
31278: EMPTY
31279: LIST
31280: LIST
31281: PUSH
31282: LD_INT 3
31284: PUSH
31285: LD_INT 23
31287: PUSH
31288: LD_INT 0
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: EMPTY
31300: LIST
31301: LIST
31302: LIST
31303: PPUSH
31304: CALL_OW 69
31308: ST_TO_ADDR
// if not tmp then
31309: LD_VAR 0 2
31313: NOT
31314: IFFALSE 31318
// exit ;
31316: GO 31367
// for i in tmp do
31318: LD_ADDR_VAR 0 1
31322: PUSH
31323: LD_VAR 0 2
31327: PUSH
31328: FOR_IN
31329: IFFALSE 31365
// begin if Crawls ( i ) then
31331: LD_VAR 0 1
31335: PPUSH
31336: CALL_OW 318
31340: IFFALSE 31351
// ComWalk ( i ) ;
31342: LD_VAR 0 1
31346: PPUSH
31347: CALL_OW 138
// SetClass ( i , 2 ) ;
31351: LD_VAR 0 1
31355: PPUSH
31356: LD_INT 2
31358: PPUSH
31359: CALL_OW 336
// end ;
31363: GO 31328
31365: POP
31366: POP
// end ;
31367: PPOPN 2
31369: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
31370: LD_EXP 47
31374: PUSH
31375: LD_EXP 100
31379: AND
31380: IFFALSE 31668
31382: GO 31384
31384: DISABLE
31385: LD_INT 0
31387: PPUSH
31388: PPUSH
31389: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
31390: LD_OWVAR 2
31394: PPUSH
31395: LD_INT 9
31397: PPUSH
31398: LD_INT 1
31400: PPUSH
31401: LD_INT 1
31403: PPUSH
31404: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
31408: LD_INT 9
31410: PPUSH
31411: LD_OWVAR 2
31415: PPUSH
31416: CALL_OW 343
// uc_side := 9 ;
31420: LD_ADDR_OWVAR 20
31424: PUSH
31425: LD_INT 9
31427: ST_TO_ADDR
// uc_nation := 2 ;
31428: LD_ADDR_OWVAR 21
31432: PUSH
31433: LD_INT 2
31435: ST_TO_ADDR
// hc_name := Dark Warrior ;
31436: LD_ADDR_OWVAR 26
31440: PUSH
31441: LD_STRING Dark Warrior
31443: ST_TO_ADDR
// hc_gallery :=  ;
31444: LD_ADDR_OWVAR 33
31448: PUSH
31449: LD_STRING 
31451: ST_TO_ADDR
// hc_noskilllimit := true ;
31452: LD_ADDR_OWVAR 76
31456: PUSH
31457: LD_INT 1
31459: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
31460: LD_ADDR_OWVAR 31
31464: PUSH
31465: LD_INT 30
31467: PUSH
31468: LD_INT 30
31470: PUSH
31471: LD_INT 30
31473: PUSH
31474: LD_INT 30
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: ST_TO_ADDR
// un := CreateHuman ;
31483: LD_ADDR_VAR 0 3
31487: PUSH
31488: CALL_OW 44
31492: ST_TO_ADDR
// hc_noskilllimit := false ;
31493: LD_ADDR_OWVAR 76
31497: PUSH
31498: LD_INT 0
31500: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
31501: LD_VAR 0 3
31505: PPUSH
31506: LD_INT 1
31508: PPUSH
31509: CALL_OW 51
// ToLua ( playRanger() ) ;
31513: LD_STRING playRanger()
31515: PPUSH
31516: CALL_OW 559
// p := 0 ;
31520: LD_ADDR_VAR 0 2
31524: PUSH
31525: LD_INT 0
31527: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
31528: LD_INT 35
31530: PPUSH
31531: CALL_OW 67
// p := p + 1 ;
31535: LD_ADDR_VAR 0 2
31539: PUSH
31540: LD_VAR 0 2
31544: PUSH
31545: LD_INT 1
31547: PLUS
31548: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
31549: LD_VAR 0 3
31553: PPUSH
31554: CALL_OW 256
31558: PUSH
31559: LD_INT 1000
31561: LESS
31562: IFFALSE 31576
// SetLives ( un , 1000 ) ;
31564: LD_VAR 0 3
31568: PPUSH
31569: LD_INT 1000
31571: PPUSH
31572: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
31576: LD_VAR 0 3
31580: PPUSH
31581: LD_INT 81
31583: PUSH
31584: LD_OWVAR 2
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 91
31595: PUSH
31596: LD_VAR 0 3
31600: PUSH
31601: LD_INT 30
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: LIST
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PPUSH
31613: CALL_OW 69
31617: PPUSH
31618: LD_VAR 0 3
31622: PPUSH
31623: CALL_OW 74
31627: PPUSH
31628: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
31632: LD_VAR 0 2
31636: PUSH
31637: LD_INT 80
31639: GREATER
31640: PUSH
31641: LD_VAR 0 3
31645: PPUSH
31646: CALL_OW 301
31650: OR
31651: IFFALSE 31528
// if un then
31653: LD_VAR 0 3
31657: IFFALSE 31668
// RemoveUnit ( un ) ;
31659: LD_VAR 0 3
31663: PPUSH
31664: CALL_OW 64
// end ;
31668: PPOPN 3
31670: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
31671: LD_EXP 101
31675: IFFALSE 31791
31677: GO 31679
31679: DISABLE
31680: LD_INT 0
31682: PPUSH
31683: PPUSH
31684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
31685: LD_ADDR_VAR 0 2
31689: PUSH
31690: LD_INT 81
31692: PUSH
31693: LD_OWVAR 2
31697: PUSH
31698: EMPTY
31699: LIST
31700: LIST
31701: PUSH
31702: LD_INT 21
31704: PUSH
31705: LD_INT 1
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: EMPTY
31713: LIST
31714: LIST
31715: PPUSH
31716: CALL_OW 69
31720: ST_TO_ADDR
// ToLua ( playComputer() ) ;
31721: LD_STRING playComputer()
31723: PPUSH
31724: CALL_OW 559
// if not tmp then
31728: LD_VAR 0 2
31732: NOT
31733: IFFALSE 31737
// exit ;
31735: GO 31791
// for i in tmp do
31737: LD_ADDR_VAR 0 1
31741: PUSH
31742: LD_VAR 0 2
31746: PUSH
31747: FOR_IN
31748: IFFALSE 31789
// for j := 1 to 4 do
31750: LD_ADDR_VAR 0 3
31754: PUSH
31755: DOUBLE
31756: LD_INT 1
31758: DEC
31759: ST_TO_ADDR
31760: LD_INT 4
31762: PUSH
31763: FOR_TO
31764: IFFALSE 31785
// SetSkill ( i , j , 10 ) ;
31766: LD_VAR 0 1
31770: PPUSH
31771: LD_VAR 0 3
31775: PPUSH
31776: LD_INT 10
31778: PPUSH
31779: CALL_OW 237
31783: GO 31763
31785: POP
31786: POP
31787: GO 31747
31789: POP
31790: POP
// end ;
31791: PPOPN 3
31793: END
// every 0 0$1 trigger s30 do var i , tmp ;
31794: LD_EXP 102
31798: IFFALSE 31867
31800: GO 31802
31802: DISABLE
31803: LD_INT 0
31805: PPUSH
31806: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31807: LD_ADDR_VAR 0 2
31811: PUSH
31812: LD_INT 22
31814: PUSH
31815: LD_OWVAR 2
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PPUSH
31824: CALL_OW 69
31828: ST_TO_ADDR
// if not tmp then
31829: LD_VAR 0 2
31833: NOT
31834: IFFALSE 31838
// exit ;
31836: GO 31867
// for i in tmp do
31838: LD_ADDR_VAR 0 1
31842: PUSH
31843: LD_VAR 0 2
31847: PUSH
31848: FOR_IN
31849: IFFALSE 31865
// SetLives ( i , 300 ) ;
31851: LD_VAR 0 1
31855: PPUSH
31856: LD_INT 300
31858: PPUSH
31859: CALL_OW 234
31863: GO 31848
31865: POP
31866: POP
// end ;
31867: PPOPN 2
31869: END
// every 0 0$1 trigger s60 do var i , tmp ;
31870: LD_EXP 103
31874: IFFALSE 31943
31876: GO 31878
31878: DISABLE
31879: LD_INT 0
31881: PPUSH
31882: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
31883: LD_ADDR_VAR 0 2
31887: PUSH
31888: LD_INT 22
31890: PUSH
31891: LD_OWVAR 2
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: PPUSH
31900: CALL_OW 69
31904: ST_TO_ADDR
// if not tmp then
31905: LD_VAR 0 2
31909: NOT
31910: IFFALSE 31914
// exit ;
31912: GO 31943
// for i in tmp do
31914: LD_ADDR_VAR 0 1
31918: PUSH
31919: LD_VAR 0 2
31923: PUSH
31924: FOR_IN
31925: IFFALSE 31941
// SetLives ( i , 600 ) ;
31927: LD_VAR 0 1
31931: PPUSH
31932: LD_INT 600
31934: PPUSH
31935: CALL_OW 234
31939: GO 31924
31941: POP
31942: POP
// end ;
31943: PPOPN 2
31945: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31946: LD_INT 0
31948: PPUSH
// case cmd of 301 :
31949: LD_VAR 0 1
31953: PUSH
31954: LD_INT 301
31956: DOUBLE
31957: EQUAL
31958: IFTRUE 31962
31960: GO 31994
31962: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
31963: LD_VAR 0 6
31967: PPUSH
31968: LD_VAR 0 7
31972: PPUSH
31973: LD_VAR 0 8
31977: PPUSH
31978: LD_VAR 0 4
31982: PPUSH
31983: LD_VAR 0 5
31987: PPUSH
31988: CALL 33203 0 5
31992: GO 32115
31994: LD_INT 302
31996: DOUBLE
31997: EQUAL
31998: IFTRUE 32002
32000: GO 32039
32002: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
32003: LD_VAR 0 6
32007: PPUSH
32008: LD_VAR 0 7
32012: PPUSH
32013: LD_VAR 0 8
32017: PPUSH
32018: LD_VAR 0 9
32022: PPUSH
32023: LD_VAR 0 4
32027: PPUSH
32028: LD_VAR 0 5
32032: PPUSH
32033: CALL 33294 0 6
32037: GO 32115
32039: LD_INT 303
32041: DOUBLE
32042: EQUAL
32043: IFTRUE 32047
32045: GO 32084
32047: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
32048: LD_VAR 0 6
32052: PPUSH
32053: LD_VAR 0 7
32057: PPUSH
32058: LD_VAR 0 8
32062: PPUSH
32063: LD_VAR 0 9
32067: PPUSH
32068: LD_VAR 0 4
32072: PPUSH
32073: LD_VAR 0 5
32077: PPUSH
32078: CALL 32120 0 6
32082: GO 32115
32084: LD_INT 304
32086: DOUBLE
32087: EQUAL
32088: IFTRUE 32092
32090: GO 32114
32092: POP
// hHackTeleport ( unit , x , y ) ; end ;
32093: LD_VAR 0 2
32097: PPUSH
32098: LD_VAR 0 4
32102: PPUSH
32103: LD_VAR 0 5
32107: PPUSH
32108: CALL 33887 0 3
32112: GO 32115
32114: POP
// end ;
32115: LD_VAR 0 12
32119: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
32120: LD_INT 0
32122: PPUSH
32123: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
32124: LD_VAR 0 1
32128: PUSH
32129: LD_INT 1
32131: LESS
32132: PUSH
32133: LD_VAR 0 1
32137: PUSH
32138: LD_INT 3
32140: GREATER
32141: OR
32142: PUSH
32143: LD_VAR 0 5
32147: PPUSH
32148: LD_VAR 0 6
32152: PPUSH
32153: CALL_OW 428
32157: OR
32158: IFFALSE 32162
// exit ;
32160: GO 32890
// uc_side := your_side ;
32162: LD_ADDR_OWVAR 20
32166: PUSH
32167: LD_OWVAR 2
32171: ST_TO_ADDR
// uc_nation := nation ;
32172: LD_ADDR_OWVAR 21
32176: PUSH
32177: LD_VAR 0 1
32181: ST_TO_ADDR
// bc_level = 1 ;
32182: LD_ADDR_OWVAR 43
32186: PUSH
32187: LD_INT 1
32189: ST_TO_ADDR
// case btype of 1 :
32190: LD_VAR 0 2
32194: PUSH
32195: LD_INT 1
32197: DOUBLE
32198: EQUAL
32199: IFTRUE 32203
32201: GO 32214
32203: POP
// bc_type := b_depot ; 2 :
32204: LD_ADDR_OWVAR 42
32208: PUSH
32209: LD_INT 0
32211: ST_TO_ADDR
32212: GO 32834
32214: LD_INT 2
32216: DOUBLE
32217: EQUAL
32218: IFTRUE 32222
32220: GO 32233
32222: POP
// bc_type := b_warehouse ; 3 :
32223: LD_ADDR_OWVAR 42
32227: PUSH
32228: LD_INT 1
32230: ST_TO_ADDR
32231: GO 32834
32233: LD_INT 3
32235: DOUBLE
32236: EQUAL
32237: IFTRUE 32241
32239: GO 32252
32241: POP
// bc_type := b_lab ; 4 .. 9 :
32242: LD_ADDR_OWVAR 42
32246: PUSH
32247: LD_INT 6
32249: ST_TO_ADDR
32250: GO 32834
32252: LD_INT 4
32254: DOUBLE
32255: GREATEREQUAL
32256: IFFALSE 32264
32258: LD_INT 9
32260: DOUBLE
32261: LESSEQUAL
32262: IFTRUE 32266
32264: GO 32326
32266: POP
// begin bc_type := b_lab_half ;
32267: LD_ADDR_OWVAR 42
32271: PUSH
32272: LD_INT 7
32274: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
32275: LD_ADDR_OWVAR 44
32279: PUSH
32280: LD_INT 10
32282: PUSH
32283: LD_INT 11
32285: PUSH
32286: LD_INT 12
32288: PUSH
32289: LD_INT 15
32291: PUSH
32292: LD_INT 14
32294: PUSH
32295: LD_INT 13
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: PUSH
32306: LD_VAR 0 2
32310: PUSH
32311: LD_INT 3
32313: MINUS
32314: ARRAY
32315: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
32316: LD_ADDR_OWVAR 45
32320: PUSH
32321: LD_INT 9
32323: ST_TO_ADDR
// end ; 10 .. 13 :
32324: GO 32834
32326: LD_INT 10
32328: DOUBLE
32329: GREATEREQUAL
32330: IFFALSE 32338
32332: LD_INT 13
32334: DOUBLE
32335: LESSEQUAL
32336: IFTRUE 32340
32338: GO 32417
32340: POP
// begin bc_type := b_lab_full ;
32341: LD_ADDR_OWVAR 42
32345: PUSH
32346: LD_INT 8
32348: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
32349: LD_ADDR_OWVAR 44
32353: PUSH
32354: LD_INT 10
32356: PUSH
32357: LD_INT 12
32359: PUSH
32360: LD_INT 14
32362: PUSH
32363: LD_INT 13
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: PUSH
32372: LD_VAR 0 2
32376: PUSH
32377: LD_INT 9
32379: MINUS
32380: ARRAY
32381: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
32382: LD_ADDR_OWVAR 45
32386: PUSH
32387: LD_INT 11
32389: PUSH
32390: LD_INT 15
32392: PUSH
32393: LD_INT 12
32395: PUSH
32396: LD_INT 15
32398: PUSH
32399: EMPTY
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: PUSH
32405: LD_VAR 0 2
32409: PUSH
32410: LD_INT 9
32412: MINUS
32413: ARRAY
32414: ST_TO_ADDR
// end ; 14 :
32415: GO 32834
32417: LD_INT 14
32419: DOUBLE
32420: EQUAL
32421: IFTRUE 32425
32423: GO 32436
32425: POP
// bc_type := b_workshop ; 15 :
32426: LD_ADDR_OWVAR 42
32430: PUSH
32431: LD_INT 2
32433: ST_TO_ADDR
32434: GO 32834
32436: LD_INT 15
32438: DOUBLE
32439: EQUAL
32440: IFTRUE 32444
32442: GO 32455
32444: POP
// bc_type := b_factory ; 16 :
32445: LD_ADDR_OWVAR 42
32449: PUSH
32450: LD_INT 3
32452: ST_TO_ADDR
32453: GO 32834
32455: LD_INT 16
32457: DOUBLE
32458: EQUAL
32459: IFTRUE 32463
32461: GO 32474
32463: POP
// bc_type := b_ext_gun ; 17 :
32464: LD_ADDR_OWVAR 42
32468: PUSH
32469: LD_INT 17
32471: ST_TO_ADDR
32472: GO 32834
32474: LD_INT 17
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32510
32482: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
32483: LD_ADDR_OWVAR 42
32487: PUSH
32488: LD_INT 19
32490: PUSH
32491: LD_INT 23
32493: PUSH
32494: LD_INT 19
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: LIST
32501: PUSH
32502: LD_VAR 0 1
32506: ARRAY
32507: ST_TO_ADDR
32508: GO 32834
32510: LD_INT 18
32512: DOUBLE
32513: EQUAL
32514: IFTRUE 32518
32516: GO 32529
32518: POP
// bc_type := b_ext_radar ; 19 :
32519: LD_ADDR_OWVAR 42
32523: PUSH
32524: LD_INT 20
32526: ST_TO_ADDR
32527: GO 32834
32529: LD_INT 19
32531: DOUBLE
32532: EQUAL
32533: IFTRUE 32537
32535: GO 32548
32537: POP
// bc_type := b_ext_radio ; 20 :
32538: LD_ADDR_OWVAR 42
32542: PUSH
32543: LD_INT 22
32545: ST_TO_ADDR
32546: GO 32834
32548: LD_INT 20
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 32567
32556: POP
// bc_type := b_ext_siberium ; 21 :
32557: LD_ADDR_OWVAR 42
32561: PUSH
32562: LD_INT 21
32564: ST_TO_ADDR
32565: GO 32834
32567: LD_INT 21
32569: DOUBLE
32570: EQUAL
32571: IFTRUE 32575
32573: GO 32586
32575: POP
// bc_type := b_ext_computer ; 22 :
32576: LD_ADDR_OWVAR 42
32580: PUSH
32581: LD_INT 24
32583: ST_TO_ADDR
32584: GO 32834
32586: LD_INT 22
32588: DOUBLE
32589: EQUAL
32590: IFTRUE 32594
32592: GO 32605
32594: POP
// bc_type := b_ext_track ; 23 :
32595: LD_ADDR_OWVAR 42
32599: PUSH
32600: LD_INT 16
32602: ST_TO_ADDR
32603: GO 32834
32605: LD_INT 23
32607: DOUBLE
32608: EQUAL
32609: IFTRUE 32613
32611: GO 32624
32613: POP
// bc_type := b_ext_laser ; 24 :
32614: LD_ADDR_OWVAR 42
32618: PUSH
32619: LD_INT 25
32621: ST_TO_ADDR
32622: GO 32834
32624: LD_INT 24
32626: DOUBLE
32627: EQUAL
32628: IFTRUE 32632
32630: GO 32643
32632: POP
// bc_type := b_control_tower ; 25 :
32633: LD_ADDR_OWVAR 42
32637: PUSH
32638: LD_INT 36
32640: ST_TO_ADDR
32641: GO 32834
32643: LD_INT 25
32645: DOUBLE
32646: EQUAL
32647: IFTRUE 32651
32649: GO 32662
32651: POP
// bc_type := b_breastwork ; 26 :
32652: LD_ADDR_OWVAR 42
32656: PUSH
32657: LD_INT 31
32659: ST_TO_ADDR
32660: GO 32834
32662: LD_INT 26
32664: DOUBLE
32665: EQUAL
32666: IFTRUE 32670
32668: GO 32681
32670: POP
// bc_type := b_bunker ; 27 :
32671: LD_ADDR_OWVAR 42
32675: PUSH
32676: LD_INT 32
32678: ST_TO_ADDR
32679: GO 32834
32681: LD_INT 27
32683: DOUBLE
32684: EQUAL
32685: IFTRUE 32689
32687: GO 32700
32689: POP
// bc_type := b_turret ; 28 :
32690: LD_ADDR_OWVAR 42
32694: PUSH
32695: LD_INT 33
32697: ST_TO_ADDR
32698: GO 32834
32700: LD_INT 28
32702: DOUBLE
32703: EQUAL
32704: IFTRUE 32708
32706: GO 32719
32708: POP
// bc_type := b_armoury ; 29 :
32709: LD_ADDR_OWVAR 42
32713: PUSH
32714: LD_INT 4
32716: ST_TO_ADDR
32717: GO 32834
32719: LD_INT 29
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32738
32727: POP
// bc_type := b_barracks ; 30 :
32728: LD_ADDR_OWVAR 42
32732: PUSH
32733: LD_INT 5
32735: ST_TO_ADDR
32736: GO 32834
32738: LD_INT 30
32740: DOUBLE
32741: EQUAL
32742: IFTRUE 32746
32744: GO 32757
32746: POP
// bc_type := b_solar_power ; 31 :
32747: LD_ADDR_OWVAR 42
32751: PUSH
32752: LD_INT 27
32754: ST_TO_ADDR
32755: GO 32834
32757: LD_INT 31
32759: DOUBLE
32760: EQUAL
32761: IFTRUE 32765
32763: GO 32776
32765: POP
// bc_type := b_oil_power ; 32 :
32766: LD_ADDR_OWVAR 42
32770: PUSH
32771: LD_INT 26
32773: ST_TO_ADDR
32774: GO 32834
32776: LD_INT 32
32778: DOUBLE
32779: EQUAL
32780: IFTRUE 32784
32782: GO 32795
32784: POP
// bc_type := b_siberite_power ; 33 :
32785: LD_ADDR_OWVAR 42
32789: PUSH
32790: LD_INT 28
32792: ST_TO_ADDR
32793: GO 32834
32795: LD_INT 33
32797: DOUBLE
32798: EQUAL
32799: IFTRUE 32803
32801: GO 32814
32803: POP
// bc_type := b_oil_mine ; 34 :
32804: LD_ADDR_OWVAR 42
32808: PUSH
32809: LD_INT 29
32811: ST_TO_ADDR
32812: GO 32834
32814: LD_INT 34
32816: DOUBLE
32817: EQUAL
32818: IFTRUE 32822
32820: GO 32833
32822: POP
// bc_type := b_siberite_mine ; end ;
32823: LD_ADDR_OWVAR 42
32827: PUSH
32828: LD_INT 30
32830: ST_TO_ADDR
32831: GO 32834
32833: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
32834: LD_ADDR_VAR 0 8
32838: PUSH
32839: LD_VAR 0 5
32843: PPUSH
32844: LD_VAR 0 6
32848: PPUSH
32849: LD_VAR 0 3
32853: PPUSH
32854: CALL_OW 47
32858: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
32859: LD_OWVAR 42
32863: PUSH
32864: LD_INT 32
32866: PUSH
32867: LD_INT 33
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: IN
32874: IFFALSE 32890
// PlaceWeaponTurret ( b , weapon ) ;
32876: LD_VAR 0 8
32880: PPUSH
32881: LD_VAR 0 4
32885: PPUSH
32886: CALL_OW 431
// end ;
32890: LD_VAR 0 7
32894: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
32895: LD_INT 0
32897: PPUSH
32898: PPUSH
32899: PPUSH
32900: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32901: LD_ADDR_VAR 0 4
32905: PUSH
32906: LD_INT 22
32908: PUSH
32909: LD_OWVAR 2
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 2
32920: PUSH
32921: LD_INT 30
32923: PUSH
32924: LD_INT 0
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 30
32933: PUSH
32934: LD_INT 1
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: LIST
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: PPUSH
32950: CALL_OW 69
32954: ST_TO_ADDR
// if not tmp then
32955: LD_VAR 0 4
32959: NOT
32960: IFFALSE 32964
// exit ;
32962: GO 33023
// for i in tmp do
32964: LD_ADDR_VAR 0 2
32968: PUSH
32969: LD_VAR 0 4
32973: PUSH
32974: FOR_IN
32975: IFFALSE 33021
// for j = 1 to 3 do
32977: LD_ADDR_VAR 0 3
32981: PUSH
32982: DOUBLE
32983: LD_INT 1
32985: DEC
32986: ST_TO_ADDR
32987: LD_INT 3
32989: PUSH
32990: FOR_TO
32991: IFFALSE 33017
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
32993: LD_VAR 0 2
32997: PPUSH
32998: CALL_OW 274
33002: PPUSH
33003: LD_VAR 0 3
33007: PPUSH
33008: LD_INT 99999
33010: PPUSH
33011: CALL_OW 277
33015: GO 32990
33017: POP
33018: POP
33019: GO 32974
33021: POP
33022: POP
// end ;
33023: LD_VAR 0 1
33027: RET
// export function hHackSetLevel10 ; var i , j ; begin
33028: LD_INT 0
33030: PPUSH
33031: PPUSH
33032: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33033: LD_ADDR_VAR 0 2
33037: PUSH
33038: LD_INT 21
33040: PUSH
33041: LD_INT 1
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PPUSH
33048: CALL_OW 69
33052: PUSH
33053: FOR_IN
33054: IFFALSE 33106
// if IsSelected ( i ) then
33056: LD_VAR 0 2
33060: PPUSH
33061: CALL_OW 306
33065: IFFALSE 33104
// begin for j := 1 to 4 do
33067: LD_ADDR_VAR 0 3
33071: PUSH
33072: DOUBLE
33073: LD_INT 1
33075: DEC
33076: ST_TO_ADDR
33077: LD_INT 4
33079: PUSH
33080: FOR_TO
33081: IFFALSE 33102
// SetSkill ( i , j , 10 ) ;
33083: LD_VAR 0 2
33087: PPUSH
33088: LD_VAR 0 3
33092: PPUSH
33093: LD_INT 10
33095: PPUSH
33096: CALL_OW 237
33100: GO 33080
33102: POP
33103: POP
// end ;
33104: GO 33053
33106: POP
33107: POP
// end ;
33108: LD_VAR 0 1
33112: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
33113: LD_INT 0
33115: PPUSH
33116: PPUSH
33117: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
33118: LD_ADDR_VAR 0 2
33122: PUSH
33123: LD_INT 22
33125: PUSH
33126: LD_OWVAR 2
33130: PUSH
33131: EMPTY
33132: LIST
33133: LIST
33134: PUSH
33135: LD_INT 21
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PPUSH
33149: CALL_OW 69
33153: PUSH
33154: FOR_IN
33155: IFFALSE 33196
// begin for j := 1 to 4 do
33157: LD_ADDR_VAR 0 3
33161: PUSH
33162: DOUBLE
33163: LD_INT 1
33165: DEC
33166: ST_TO_ADDR
33167: LD_INT 4
33169: PUSH
33170: FOR_TO
33171: IFFALSE 33192
// SetSkill ( i , j , 10 ) ;
33173: LD_VAR 0 2
33177: PPUSH
33178: LD_VAR 0 3
33182: PPUSH
33183: LD_INT 10
33185: PPUSH
33186: CALL_OW 237
33190: GO 33170
33192: POP
33193: POP
// end ;
33194: GO 33154
33196: POP
33197: POP
// end ;
33198: LD_VAR 0 1
33202: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
33203: LD_INT 0
33205: PPUSH
// uc_side := your_side ;
33206: LD_ADDR_OWVAR 20
33210: PUSH
33211: LD_OWVAR 2
33215: ST_TO_ADDR
// uc_nation := nation ;
33216: LD_ADDR_OWVAR 21
33220: PUSH
33221: LD_VAR 0 1
33225: ST_TO_ADDR
// InitHc ;
33226: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
33230: LD_INT 0
33232: PPUSH
33233: LD_VAR 0 2
33237: PPUSH
33238: LD_VAR 0 3
33242: PPUSH
33243: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
33247: LD_VAR 0 4
33251: PPUSH
33252: LD_VAR 0 5
33256: PPUSH
33257: CALL_OW 428
33261: PUSH
33262: LD_INT 0
33264: EQUAL
33265: IFFALSE 33289
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
33267: CALL_OW 44
33271: PPUSH
33272: LD_VAR 0 4
33276: PPUSH
33277: LD_VAR 0 5
33281: PPUSH
33282: LD_INT 1
33284: PPUSH
33285: CALL_OW 48
// end ;
33289: LD_VAR 0 6
33293: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
33294: LD_INT 0
33296: PPUSH
33297: PPUSH
// uc_side := your_side ;
33298: LD_ADDR_OWVAR 20
33302: PUSH
33303: LD_OWVAR 2
33307: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
33308: LD_VAR 0 1
33312: PUSH
33313: LD_INT 1
33315: PUSH
33316: LD_INT 2
33318: PUSH
33319: LD_INT 3
33321: PUSH
33322: LD_INT 4
33324: PUSH
33325: LD_INT 5
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: IN
33335: IFFALSE 33347
// uc_nation := nation_american else
33337: LD_ADDR_OWVAR 21
33341: PUSH
33342: LD_INT 1
33344: ST_TO_ADDR
33345: GO 33390
// if chassis in [ 11 , 12 , 13 , 14 ] then
33347: LD_VAR 0 1
33351: PUSH
33352: LD_INT 11
33354: PUSH
33355: LD_INT 12
33357: PUSH
33358: LD_INT 13
33360: PUSH
33361: LD_INT 14
33363: PUSH
33364: EMPTY
33365: LIST
33366: LIST
33367: LIST
33368: LIST
33369: IN
33370: IFFALSE 33382
// uc_nation := nation_arabian else
33372: LD_ADDR_OWVAR 21
33376: PUSH
33377: LD_INT 2
33379: ST_TO_ADDR
33380: GO 33390
// uc_nation := nation_russian ;
33382: LD_ADDR_OWVAR 21
33386: PUSH
33387: LD_INT 3
33389: ST_TO_ADDR
// vc_chassis := chassis ;
33390: LD_ADDR_OWVAR 37
33394: PUSH
33395: LD_VAR 0 1
33399: ST_TO_ADDR
// vc_engine := engine ;
33400: LD_ADDR_OWVAR 39
33404: PUSH
33405: LD_VAR 0 2
33409: ST_TO_ADDR
// vc_control := control ;
33410: LD_ADDR_OWVAR 38
33414: PUSH
33415: LD_VAR 0 3
33419: ST_TO_ADDR
// vc_weapon := weapon ;
33420: LD_ADDR_OWVAR 40
33424: PUSH
33425: LD_VAR 0 4
33429: ST_TO_ADDR
// un := CreateVehicle ;
33430: LD_ADDR_VAR 0 8
33434: PUSH
33435: CALL_OW 45
33439: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
33440: LD_VAR 0 8
33444: PPUSH
33445: LD_INT 0
33447: PPUSH
33448: LD_INT 5
33450: PPUSH
33451: CALL_OW 12
33455: PPUSH
33456: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
33460: LD_VAR 0 8
33464: PPUSH
33465: LD_VAR 0 5
33469: PPUSH
33470: LD_VAR 0 6
33474: PPUSH
33475: LD_INT 1
33477: PPUSH
33478: CALL_OW 48
// end ;
33482: LD_VAR 0 7
33486: RET
// export hInvincible ; every 1 do
33487: GO 33489
33489: DISABLE
// hInvincible := [ ] ;
33490: LD_ADDR_EXP 104
33494: PUSH
33495: EMPTY
33496: ST_TO_ADDR
33497: END
// every 10 do var i ;
33498: GO 33500
33500: DISABLE
33501: LD_INT 0
33503: PPUSH
// begin enable ;
33504: ENABLE
// if not hInvincible then
33505: LD_EXP 104
33509: NOT
33510: IFFALSE 33514
// exit ;
33512: GO 33558
// for i in hInvincible do
33514: LD_ADDR_VAR 0 1
33518: PUSH
33519: LD_EXP 104
33523: PUSH
33524: FOR_IN
33525: IFFALSE 33556
// if GetLives ( i ) < 1000 then
33527: LD_VAR 0 1
33531: PPUSH
33532: CALL_OW 256
33536: PUSH
33537: LD_INT 1000
33539: LESS
33540: IFFALSE 33554
// SetLives ( i , 1000 ) ;
33542: LD_VAR 0 1
33546: PPUSH
33547: LD_INT 1000
33549: PPUSH
33550: CALL_OW 234
33554: GO 33524
33556: POP
33557: POP
// end ;
33558: PPOPN 1
33560: END
// export function hHackInvincible ; var i ; begin
33561: LD_INT 0
33563: PPUSH
33564: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
33565: LD_ADDR_VAR 0 2
33569: PUSH
33570: LD_INT 2
33572: PUSH
33573: LD_INT 21
33575: PUSH
33576: LD_INT 1
33578: PUSH
33579: EMPTY
33580: LIST
33581: LIST
33582: PUSH
33583: LD_INT 21
33585: PUSH
33586: LD_INT 2
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: LIST
33597: PPUSH
33598: CALL_OW 69
33602: PUSH
33603: FOR_IN
33604: IFFALSE 33665
// if IsSelected ( i ) then
33606: LD_VAR 0 2
33610: PPUSH
33611: CALL_OW 306
33615: IFFALSE 33663
// begin if i in hInvincible then
33617: LD_VAR 0 2
33621: PUSH
33622: LD_EXP 104
33626: IN
33627: IFFALSE 33647
// hInvincible := hInvincible diff i else
33629: LD_ADDR_EXP 104
33633: PUSH
33634: LD_EXP 104
33638: PUSH
33639: LD_VAR 0 2
33643: DIFF
33644: ST_TO_ADDR
33645: GO 33663
// hInvincible := hInvincible union i ;
33647: LD_ADDR_EXP 104
33651: PUSH
33652: LD_EXP 104
33656: PUSH
33657: LD_VAR 0 2
33661: UNION
33662: ST_TO_ADDR
// end ;
33663: GO 33603
33665: POP
33666: POP
// end ;
33667: LD_VAR 0 1
33671: RET
// export function hHackInvisible ; var i , j ; begin
33672: LD_INT 0
33674: PPUSH
33675: PPUSH
33676: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
33677: LD_ADDR_VAR 0 2
33681: PUSH
33682: LD_INT 21
33684: PUSH
33685: LD_INT 1
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: PPUSH
33692: CALL_OW 69
33696: PUSH
33697: FOR_IN
33698: IFFALSE 33722
// if IsSelected ( i ) then
33700: LD_VAR 0 2
33704: PPUSH
33705: CALL_OW 306
33709: IFFALSE 33720
// ComForceInvisible ( i ) ;
33711: LD_VAR 0 2
33715: PPUSH
33716: CALL_OW 496
33720: GO 33697
33722: POP
33723: POP
// end ;
33724: LD_VAR 0 1
33728: RET
// export function hHackChangeYourSide ; begin
33729: LD_INT 0
33731: PPUSH
// if your_side = 8 then
33732: LD_OWVAR 2
33736: PUSH
33737: LD_INT 8
33739: EQUAL
33740: IFFALSE 33752
// your_side := 0 else
33742: LD_ADDR_OWVAR 2
33746: PUSH
33747: LD_INT 0
33749: ST_TO_ADDR
33750: GO 33766
// your_side := your_side + 1 ;
33752: LD_ADDR_OWVAR 2
33756: PUSH
33757: LD_OWVAR 2
33761: PUSH
33762: LD_INT 1
33764: PLUS
33765: ST_TO_ADDR
// end ;
33766: LD_VAR 0 1
33770: RET
// export function hHackChangeUnitSide ; var i , j ; begin
33771: LD_INT 0
33773: PPUSH
33774: PPUSH
33775: PPUSH
// for i in all_units do
33776: LD_ADDR_VAR 0 2
33780: PUSH
33781: LD_OWVAR 3
33785: PUSH
33786: FOR_IN
33787: IFFALSE 33865
// if IsSelected ( i ) then
33789: LD_VAR 0 2
33793: PPUSH
33794: CALL_OW 306
33798: IFFALSE 33863
// begin j := GetSide ( i ) ;
33800: LD_ADDR_VAR 0 3
33804: PUSH
33805: LD_VAR 0 2
33809: PPUSH
33810: CALL_OW 255
33814: ST_TO_ADDR
// if j = 8 then
33815: LD_VAR 0 3
33819: PUSH
33820: LD_INT 8
33822: EQUAL
33823: IFFALSE 33835
// j := 0 else
33825: LD_ADDR_VAR 0 3
33829: PUSH
33830: LD_INT 0
33832: ST_TO_ADDR
33833: GO 33849
// j := j + 1 ;
33835: LD_ADDR_VAR 0 3
33839: PUSH
33840: LD_VAR 0 3
33844: PUSH
33845: LD_INT 1
33847: PLUS
33848: ST_TO_ADDR
// SetSide ( i , j ) ;
33849: LD_VAR 0 2
33853: PPUSH
33854: LD_VAR 0 3
33858: PPUSH
33859: CALL_OW 235
// end ;
33863: GO 33786
33865: POP
33866: POP
// end ;
33867: LD_VAR 0 1
33871: RET
// export function hHackFog ; begin
33872: LD_INT 0
33874: PPUSH
// FogOff ( true ) ;
33875: LD_INT 1
33877: PPUSH
33878: CALL_OW 344
// end ;
33882: LD_VAR 0 1
33886: RET
// export function hHackTeleport ( unit , x , y ) ; begin
33887: LD_INT 0
33889: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
33890: LD_VAR 0 1
33894: PPUSH
33895: LD_VAR 0 2
33899: PPUSH
33900: LD_VAR 0 3
33904: PPUSH
33905: LD_INT 1
33907: PPUSH
33908: LD_INT 1
33910: PPUSH
33911: CALL_OW 483
// CenterOnXY ( x , y ) ;
33915: LD_VAR 0 2
33919: PPUSH
33920: LD_VAR 0 3
33924: PPUSH
33925: CALL_OW 84
// end ;
33929: LD_VAR 0 4
33933: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
33934: LD_INT 0
33936: PPUSH
33937: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
33938: LD_VAR 0 1
33942: NOT
33943: PUSH
33944: LD_VAR 0 2
33948: PPUSH
33949: LD_VAR 0 3
33953: PPUSH
33954: CALL_OW 488
33958: NOT
33959: OR
33960: PUSH
33961: LD_VAR 0 1
33965: PPUSH
33966: CALL_OW 266
33970: PUSH
33971: LD_INT 3
33973: NONEQUAL
33974: PUSH
33975: LD_VAR 0 1
33979: PPUSH
33980: CALL_OW 247
33984: PUSH
33985: LD_INT 1
33987: EQUAL
33988: NOT
33989: AND
33990: OR
33991: IFFALSE 33995
// exit ;
33993: GO 34277
// if GetType ( factory ) = unit_human then
33995: LD_VAR 0 1
33999: PPUSH
34000: CALL_OW 247
34004: PUSH
34005: LD_INT 1
34007: EQUAL
34008: IFFALSE 34025
// factory := IsInUnit ( factory ) ;
34010: LD_ADDR_VAR 0 1
34014: PUSH
34015: LD_VAR 0 1
34019: PPUSH
34020: CALL_OW 310
34024: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
34025: LD_VAR 0 1
34029: PPUSH
34030: CALL_OW 266
34034: PUSH
34035: LD_INT 3
34037: NONEQUAL
34038: IFFALSE 34042
// exit ;
34040: GO 34277
// for i := 1 to Count ( factoryWaypoints ) do
34042: LD_ADDR_VAR 0 5
34046: PUSH
34047: DOUBLE
34048: LD_INT 1
34050: DEC
34051: ST_TO_ADDR
34052: LD_EXP 105
34056: PPUSH
34057: CALL 42923 0 1
34061: PUSH
34062: FOR_TO
34063: IFFALSE 34225
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
34065: LD_VAR 0 2
34069: PPUSH
34070: LD_VAR 0 3
34074: PPUSH
34075: CALL_OW 428
34079: PUSH
34080: LD_EXP 105
34084: PUSH
34085: LD_VAR 0 5
34089: ARRAY
34090: PUSH
34091: LD_INT 2
34093: ARRAY
34094: EQUAL
34095: IFFALSE 34127
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34097: LD_ADDR_EXP 105
34101: PUSH
34102: LD_EXP 105
34106: PPUSH
34107: LD_VAR 0 5
34111: PPUSH
34112: CALL_OW 3
34116: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34117: CALL 34282 0 0
// exit ;
34121: POP
34122: POP
34123: GO 34277
// end else
34125: GO 34223
// if factory = factoryWaypoints [ i ] [ 2 ] then
34127: LD_VAR 0 1
34131: PUSH
34132: LD_EXP 105
34136: PUSH
34137: LD_VAR 0 5
34141: ARRAY
34142: PUSH
34143: LD_INT 2
34145: ARRAY
34146: EQUAL
34147: IFFALSE 34223
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
34149: LD_ADDR_EXP 105
34153: PUSH
34154: LD_EXP 105
34158: PPUSH
34159: LD_VAR 0 5
34163: PPUSH
34164: CALL_OW 3
34168: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34169: LD_ADDR_EXP 105
34173: PUSH
34174: LD_EXP 105
34178: PPUSH
34179: LD_VAR 0 1
34183: PPUSH
34184: CALL_OW 255
34188: PUSH
34189: LD_VAR 0 1
34193: PUSH
34194: LD_VAR 0 2
34198: PUSH
34199: LD_VAR 0 3
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: PPUSH
34210: CALL 78532 0 2
34214: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34215: CALL 34282 0 0
// exit ;
34219: POP
34220: POP
34221: GO 34277
// end ; end ;
34223: GO 34062
34225: POP
34226: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
34227: LD_ADDR_EXP 105
34231: PUSH
34232: LD_EXP 105
34236: PPUSH
34237: LD_VAR 0 1
34241: PPUSH
34242: CALL_OW 255
34246: PUSH
34247: LD_VAR 0 1
34251: PUSH
34252: LD_VAR 0 2
34256: PUSH
34257: LD_VAR 0 3
34261: PUSH
34262: EMPTY
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: PPUSH
34268: CALL 78532 0 2
34272: ST_TO_ADDR
// UpdateFactoryWaypoints ;
34273: CALL 34282 0 0
// end ;
34277: LD_VAR 0 4
34281: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
34282: LD_INT 0
34284: PPUSH
34285: PPUSH
34286: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
34287: LD_STRING resetFactoryWaypoint();
34289: PPUSH
34290: CALL_OW 559
// if factoryWaypoints then
34294: LD_EXP 105
34298: IFFALSE 34419
// begin list := factoryWaypoints ;
34300: LD_ADDR_VAR 0 3
34304: PUSH
34305: LD_EXP 105
34309: ST_TO_ADDR
// for i := 1 to list do
34310: LD_ADDR_VAR 0 2
34314: PUSH
34315: DOUBLE
34316: LD_INT 1
34318: DEC
34319: ST_TO_ADDR
34320: LD_VAR 0 3
34324: PUSH
34325: FOR_TO
34326: IFFALSE 34417
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34328: LD_STRING setFactoryWaypointXY(
34330: PUSH
34331: LD_VAR 0 3
34335: PUSH
34336: LD_VAR 0 2
34340: ARRAY
34341: PUSH
34342: LD_INT 1
34344: ARRAY
34345: STR
34346: PUSH
34347: LD_STRING ,
34349: STR
34350: PUSH
34351: LD_VAR 0 3
34355: PUSH
34356: LD_VAR 0 2
34360: ARRAY
34361: PUSH
34362: LD_INT 2
34364: ARRAY
34365: STR
34366: PUSH
34367: LD_STRING ,
34369: STR
34370: PUSH
34371: LD_VAR 0 3
34375: PUSH
34376: LD_VAR 0 2
34380: ARRAY
34381: PUSH
34382: LD_INT 3
34384: ARRAY
34385: STR
34386: PUSH
34387: LD_STRING ,
34389: STR
34390: PUSH
34391: LD_VAR 0 3
34395: PUSH
34396: LD_VAR 0 2
34400: ARRAY
34401: PUSH
34402: LD_INT 4
34404: ARRAY
34405: STR
34406: PUSH
34407: LD_STRING )
34409: STR
34410: PPUSH
34411: CALL_OW 559
34415: GO 34325
34417: POP
34418: POP
// end ; end ;
34419: LD_VAR 0 1
34423: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
34424: LD_INT 0
34426: PPUSH
// if HexInfo ( x , y ) = warehouse then
34427: LD_VAR 0 2
34431: PPUSH
34432: LD_VAR 0 3
34436: PPUSH
34437: CALL_OW 428
34441: PUSH
34442: LD_VAR 0 1
34446: EQUAL
34447: IFFALSE 34474
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
34449: LD_ADDR_EXP 107
34453: PUSH
34454: LD_EXP 107
34458: PPUSH
34459: LD_VAR 0 1
34463: PPUSH
34464: LD_INT 0
34466: PPUSH
34467: CALL_OW 1
34471: ST_TO_ADDR
34472: GO 34525
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
34474: LD_ADDR_EXP 107
34478: PUSH
34479: LD_EXP 107
34483: PPUSH
34484: LD_VAR 0 1
34488: PPUSH
34489: LD_VAR 0 1
34493: PPUSH
34494: CALL_OW 255
34498: PUSH
34499: LD_VAR 0 1
34503: PUSH
34504: LD_VAR 0 2
34508: PUSH
34509: LD_VAR 0 3
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: PPUSH
34520: CALL_OW 1
34524: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
34525: CALL 34534 0 0
// end ;
34529: LD_VAR 0 4
34533: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
34534: LD_INT 0
34536: PPUSH
34537: PPUSH
34538: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
34539: LD_STRING resetWarehouseGatheringPoints();
34541: PPUSH
34542: CALL_OW 559
// if warehouseGatheringPoints then
34546: LD_EXP 107
34550: IFFALSE 34676
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
34552: LD_ADDR_VAR 0 3
34556: PUSH
34557: LD_EXP 107
34561: PPUSH
34562: CALL 82300 0 1
34566: ST_TO_ADDR
// for i := 1 to list do
34567: LD_ADDR_VAR 0 2
34571: PUSH
34572: DOUBLE
34573: LD_INT 1
34575: DEC
34576: ST_TO_ADDR
34577: LD_VAR 0 3
34581: PUSH
34582: FOR_TO
34583: IFFALSE 34674
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
34585: LD_STRING setWarehouseGatheringPointXY(
34587: PUSH
34588: LD_VAR 0 3
34592: PUSH
34593: LD_VAR 0 2
34597: ARRAY
34598: PUSH
34599: LD_INT 1
34601: ARRAY
34602: STR
34603: PUSH
34604: LD_STRING ,
34606: STR
34607: PUSH
34608: LD_VAR 0 3
34612: PUSH
34613: LD_VAR 0 2
34617: ARRAY
34618: PUSH
34619: LD_INT 2
34621: ARRAY
34622: STR
34623: PUSH
34624: LD_STRING ,
34626: STR
34627: PUSH
34628: LD_VAR 0 3
34632: PUSH
34633: LD_VAR 0 2
34637: ARRAY
34638: PUSH
34639: LD_INT 3
34641: ARRAY
34642: STR
34643: PUSH
34644: LD_STRING ,
34646: STR
34647: PUSH
34648: LD_VAR 0 3
34652: PUSH
34653: LD_VAR 0 2
34657: ARRAY
34658: PUSH
34659: LD_INT 4
34661: ARRAY
34662: STR
34663: PUSH
34664: LD_STRING )
34666: STR
34667: PPUSH
34668: CALL_OW 559
34672: GO 34582
34674: POP
34675: POP
// end ; end ;
34676: LD_VAR 0 1
34680: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
34681: LD_EXP 107
34685: IFFALSE 35370
34687: GO 34689
34689: DISABLE
34690: LD_INT 0
34692: PPUSH
34693: PPUSH
34694: PPUSH
34695: PPUSH
34696: PPUSH
34697: PPUSH
34698: PPUSH
34699: PPUSH
34700: PPUSH
// begin enable ;
34701: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
34702: LD_ADDR_VAR 0 3
34706: PUSH
34707: LD_EXP 107
34711: PPUSH
34712: CALL 82300 0 1
34716: ST_TO_ADDR
// if not list then
34717: LD_VAR 0 3
34721: NOT
34722: IFFALSE 34726
// exit ;
34724: GO 35370
// for i := 1 to list do
34726: LD_ADDR_VAR 0 1
34730: PUSH
34731: DOUBLE
34732: LD_INT 1
34734: DEC
34735: ST_TO_ADDR
34736: LD_VAR 0 3
34740: PUSH
34741: FOR_TO
34742: IFFALSE 35368
// begin depot := list [ i ] [ 2 ] ;
34744: LD_ADDR_VAR 0 8
34748: PUSH
34749: LD_VAR 0 3
34753: PUSH
34754: LD_VAR 0 1
34758: ARRAY
34759: PUSH
34760: LD_INT 2
34762: ARRAY
34763: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
34764: LD_ADDR_VAR 0 5
34768: PUSH
34769: LD_VAR 0 3
34773: PUSH
34774: LD_VAR 0 1
34778: ARRAY
34779: PUSH
34780: LD_INT 1
34782: ARRAY
34783: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
34784: LD_VAR 0 8
34788: PPUSH
34789: CALL_OW 301
34793: PUSH
34794: LD_VAR 0 5
34798: PUSH
34799: LD_VAR 0 8
34803: PPUSH
34804: CALL_OW 255
34808: NONEQUAL
34809: OR
34810: IFFALSE 34839
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
34812: LD_ADDR_EXP 107
34816: PUSH
34817: LD_EXP 107
34821: PPUSH
34822: LD_VAR 0 8
34826: PPUSH
34827: LD_INT 0
34829: PPUSH
34830: CALL_OW 1
34834: ST_TO_ADDR
// exit ;
34835: POP
34836: POP
34837: GO 35370
// end ; x := list [ i ] [ 3 ] ;
34839: LD_ADDR_VAR 0 6
34843: PUSH
34844: LD_VAR 0 3
34848: PUSH
34849: LD_VAR 0 1
34853: ARRAY
34854: PUSH
34855: LD_INT 3
34857: ARRAY
34858: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
34859: LD_ADDR_VAR 0 7
34863: PUSH
34864: LD_VAR 0 3
34868: PUSH
34869: LD_VAR 0 1
34873: ARRAY
34874: PUSH
34875: LD_INT 4
34877: ARRAY
34878: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
34879: LD_ADDR_VAR 0 9
34883: PUSH
34884: LD_VAR 0 6
34888: PPUSH
34889: LD_VAR 0 7
34893: PPUSH
34894: LD_INT 16
34896: PPUSH
34897: CALL 80884 0 3
34901: ST_TO_ADDR
// if not cratesNearbyPoint then
34902: LD_VAR 0 9
34906: NOT
34907: IFFALSE 34913
// exit ;
34909: POP
34910: POP
34911: GO 35370
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
34913: LD_ADDR_VAR 0 4
34917: PUSH
34918: LD_INT 22
34920: PUSH
34921: LD_VAR 0 5
34925: PUSH
34926: EMPTY
34927: LIST
34928: LIST
34929: PUSH
34930: LD_INT 3
34932: PUSH
34933: LD_INT 60
34935: PUSH
34936: EMPTY
34937: LIST
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 91
34945: PUSH
34946: LD_VAR 0 8
34950: PUSH
34951: LD_INT 6
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: LIST
34958: PUSH
34959: LD_INT 2
34961: PUSH
34962: LD_INT 25
34964: PUSH
34965: LD_INT 2
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: PUSH
34972: LD_INT 25
34974: PUSH
34975: LD_INT 16
34977: PUSH
34978: EMPTY
34979: LIST
34980: LIST
34981: PUSH
34982: EMPTY
34983: LIST
34984: LIST
34985: LIST
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: PPUSH
34993: CALL_OW 69
34997: PUSH
34998: LD_VAR 0 8
35002: PPUSH
35003: CALL_OW 313
35007: PPUSH
35008: LD_INT 3
35010: PUSH
35011: LD_INT 60
35013: PUSH
35014: EMPTY
35015: LIST
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: PUSH
35021: LD_INT 2
35023: PUSH
35024: LD_INT 25
35026: PUSH
35027: LD_INT 2
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 25
35036: PUSH
35037: LD_INT 16
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: EMPTY
35045: LIST
35046: LIST
35047: LIST
35048: PUSH
35049: EMPTY
35050: LIST
35051: LIST
35052: PPUSH
35053: CALL_OW 72
35057: UNION
35058: ST_TO_ADDR
// if tmp then
35059: LD_VAR 0 4
35063: IFFALSE 35143
// begin tmp := ShrinkArray ( tmp , 3 ) ;
35065: LD_ADDR_VAR 0 4
35069: PUSH
35070: LD_VAR 0 4
35074: PPUSH
35075: LD_INT 3
35077: PPUSH
35078: CALL 78847 0 2
35082: ST_TO_ADDR
// for j in tmp do
35083: LD_ADDR_VAR 0 2
35087: PUSH
35088: LD_VAR 0 4
35092: PUSH
35093: FOR_IN
35094: IFFALSE 35137
// begin if IsInUnit ( j ) then
35096: LD_VAR 0 2
35100: PPUSH
35101: CALL_OW 310
35105: IFFALSE 35116
// ComExit ( j ) ;
35107: LD_VAR 0 2
35111: PPUSH
35112: CALL 78930 0 1
// AddComCollect ( j , x , y ) ;
35116: LD_VAR 0 2
35120: PPUSH
35121: LD_VAR 0 6
35125: PPUSH
35126: LD_VAR 0 7
35130: PPUSH
35131: CALL_OW 177
// end ;
35135: GO 35093
35137: POP
35138: POP
// exit ;
35139: POP
35140: POP
35141: GO 35370
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
35143: LD_ADDR_VAR 0 4
35147: PUSH
35148: LD_INT 22
35150: PUSH
35151: LD_VAR 0 5
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 91
35162: PUSH
35163: LD_VAR 0 8
35167: PUSH
35168: LD_INT 8
35170: PUSH
35171: EMPTY
35172: LIST
35173: LIST
35174: LIST
35175: PUSH
35176: LD_INT 2
35178: PUSH
35179: LD_INT 34
35181: PUSH
35182: LD_INT 12
35184: PUSH
35185: EMPTY
35186: LIST
35187: LIST
35188: PUSH
35189: LD_INT 34
35191: PUSH
35192: LD_INT 51
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: PUSH
35199: LD_INT 34
35201: PUSH
35202: LD_INT 32
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 34
35211: PUSH
35212: LD_INT 89
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: LIST
35230: PPUSH
35231: CALL_OW 69
35235: ST_TO_ADDR
// if tmp then
35236: LD_VAR 0 4
35240: IFFALSE 35366
// begin for j in tmp do
35242: LD_ADDR_VAR 0 2
35246: PUSH
35247: LD_VAR 0 4
35251: PUSH
35252: FOR_IN
35253: IFFALSE 35364
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
35255: LD_VAR 0 2
35259: PPUSH
35260: CALL_OW 262
35264: PUSH
35265: LD_INT 3
35267: EQUAL
35268: PUSH
35269: LD_VAR 0 2
35273: PPUSH
35274: CALL_OW 261
35278: PUSH
35279: LD_INT 20
35281: GREATER
35282: OR
35283: PUSH
35284: LD_VAR 0 2
35288: PPUSH
35289: CALL_OW 314
35293: NOT
35294: AND
35295: PUSH
35296: LD_VAR 0 2
35300: PPUSH
35301: CALL_OW 263
35305: PUSH
35306: LD_INT 1
35308: NONEQUAL
35309: PUSH
35310: LD_VAR 0 2
35314: PPUSH
35315: CALL_OW 311
35319: OR
35320: AND
35321: IFFALSE 35362
// begin ComCollect ( j , x , y ) ;
35323: LD_VAR 0 2
35327: PPUSH
35328: LD_VAR 0 6
35332: PPUSH
35333: LD_VAR 0 7
35337: PPUSH
35338: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
35342: LD_VAR 0 2
35346: PPUSH
35347: LD_VAR 0 8
35351: PPUSH
35352: CALL_OW 172
// exit ;
35356: POP
35357: POP
35358: POP
35359: POP
35360: GO 35370
// end ;
35362: GO 35252
35364: POP
35365: POP
// end ; end ;
35366: GO 34741
35368: POP
35369: POP
// end ; end_of_file
35370: PPOPN 9
35372: END
// export function SOS_UnitDestroyed ( un ) ; begin
35373: LD_INT 0
35375: PPUSH
// ComRadiation ( un ) ;
35376: LD_VAR 0 1
35380: PPUSH
35381: CALL 36442 0 1
// end ;
35385: LD_VAR 0 2
35389: RET
// export function SOS_UnitKamikazed ( un ) ; begin
35390: LD_INT 0
35392: PPUSH
// ComRadiation ( un ) ;
35393: LD_VAR 0 1
35397: PPUSH
35398: CALL 36442 0 1
// end ;
35402: LD_VAR 0 2
35406: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
35407: LD_INT 0
35409: PPUSH
// end ;
35410: LD_VAR 0 4
35414: RET
// export function SOS_Command ( cmd ) ; begin
35415: LD_INT 0
35417: PPUSH
// end ;
35418: LD_VAR 0 2
35422: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
35423: LD_INT 0
35425: PPUSH
// end ;
35426: LD_VAR 0 6
35430: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
35431: LD_INT 0
35433: PPUSH
35434: PPUSH
35435: PPUSH
35436: PPUSH
// if not vehicle or not factory then
35437: LD_VAR 0 1
35441: NOT
35442: PUSH
35443: LD_VAR 0 2
35447: NOT
35448: OR
35449: IFFALSE 35453
// exit ;
35451: GO 36033
// if not factoryWaypoints then
35453: LD_EXP 105
35457: NOT
35458: IFFALSE 35462
// exit ;
35460: GO 36033
// for i := 1 to Count ( factoryWaypoints ) do
35462: LD_ADDR_VAR 0 4
35466: PUSH
35467: DOUBLE
35468: LD_INT 1
35470: DEC
35471: ST_TO_ADDR
35472: LD_EXP 105
35476: PPUSH
35477: CALL 42923 0 1
35481: PUSH
35482: FOR_TO
35483: IFFALSE 36031
// if factoryWaypoints [ i ] [ 2 ] = factory then
35485: LD_EXP 105
35489: PUSH
35490: LD_VAR 0 4
35494: ARRAY
35495: PUSH
35496: LD_INT 2
35498: ARRAY
35499: PUSH
35500: LD_VAR 0 2
35504: EQUAL
35505: IFFALSE 36029
// begin if GetControl ( vehicle ) = control_manual then
35507: LD_VAR 0 1
35511: PPUSH
35512: CALL_OW 263
35516: PUSH
35517: LD_INT 1
35519: EQUAL
35520: IFFALSE 35882
// begin driver := IsDrivenBy ( vehicle ) ;
35522: LD_ADDR_VAR 0 5
35526: PUSH
35527: LD_VAR 0 1
35531: PPUSH
35532: CALL_OW 311
35536: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
35537: LD_VAR 0 5
35541: PUSH
35542: LD_EXP 106
35546: IN
35547: PUSH
35548: LD_VAR 0 1
35552: PUSH
35553: LD_EXP 106
35557: IN
35558: OR
35559: IFFALSE 35565
// exit ;
35561: POP
35562: POP
35563: GO 36033
// if not HasTask ( driver ) then
35565: LD_VAR 0 5
35569: PPUSH
35570: CALL_OW 314
35574: NOT
35575: IFFALSE 35880
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
35577: LD_ADDR_EXP 106
35581: PUSH
35582: LD_EXP 106
35586: PPUSH
35587: LD_VAR 0 5
35591: PPUSH
35592: CALL 78532 0 2
35596: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
35597: LD_ADDR_EXP 106
35601: PUSH
35602: LD_EXP 106
35606: PPUSH
35607: LD_VAR 0 1
35611: PPUSH
35612: CALL 78532 0 2
35616: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35617: LD_ADDR_VAR 0 6
35621: PUSH
35622: LD_EXP 105
35626: PUSH
35627: LD_VAR 0 4
35631: ARRAY
35632: PUSH
35633: LD_INT 3
35635: ARRAY
35636: PPUSH
35637: LD_EXP 105
35641: PUSH
35642: LD_VAR 0 4
35646: ARRAY
35647: PUSH
35648: LD_INT 4
35650: ARRAY
35651: PPUSH
35652: CALL_OW 428
35656: ST_TO_ADDR
// if hex then
35657: LD_VAR 0 6
35661: IFFALSE 35679
// ComMoveUnit ( driver , hex ) else
35663: LD_VAR 0 5
35667: PPUSH
35668: LD_VAR 0 6
35672: PPUSH
35673: CALL_OW 112
35677: GO 35763
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
35679: LD_VAR 0 1
35683: PPUSH
35684: LD_EXP 105
35688: PUSH
35689: LD_VAR 0 4
35693: ARRAY
35694: PUSH
35695: LD_INT 3
35697: ARRAY
35698: PPUSH
35699: LD_EXP 105
35703: PUSH
35704: LD_VAR 0 4
35708: ARRAY
35709: PUSH
35710: LD_INT 4
35712: ARRAY
35713: PPUSH
35714: CALL_OW 297
35718: PUSH
35719: LD_INT 0
35721: GREATER
35722: IFFALSE 35763
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35724: LD_VAR 0 5
35728: PPUSH
35729: LD_EXP 105
35733: PUSH
35734: LD_VAR 0 4
35738: ARRAY
35739: PUSH
35740: LD_INT 3
35742: ARRAY
35743: PPUSH
35744: LD_EXP 105
35748: PUSH
35749: LD_VAR 0 4
35753: ARRAY
35754: PUSH
35755: LD_INT 4
35757: ARRAY
35758: PPUSH
35759: CALL_OW 111
// AddComExitVehicle ( driver ) ;
35763: LD_VAR 0 5
35767: PPUSH
35768: CALL_OW 181
// if Multiplayer then
35772: LD_OWVAR 4
35776: IFFALSE 35825
// begin repeat wait ( 10 ) ;
35778: LD_INT 10
35780: PPUSH
35781: CALL_OW 67
// until not IsInUnit ( driver ) ;
35785: LD_VAR 0 5
35789: PPUSH
35790: CALL_OW 310
35794: NOT
35795: IFFALSE 35778
// if not HasTask ( driver ) then
35797: LD_VAR 0 5
35801: PPUSH
35802: CALL_OW 314
35806: NOT
35807: IFFALSE 35823
// ComEnterUnit ( driver , factory ) ;
35809: LD_VAR 0 5
35813: PPUSH
35814: LD_VAR 0 2
35818: PPUSH
35819: CALL_OW 120
// end else
35823: GO 35839
// AddComEnterUnit ( driver , factory ) ;
35825: LD_VAR 0 5
35829: PPUSH
35830: LD_VAR 0 2
35834: PPUSH
35835: CALL_OW 180
// wait ( 0 0$1 ) ;
35839: LD_INT 35
35841: PPUSH
35842: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
35846: LD_ADDR_EXP 106
35850: PUSH
35851: LD_EXP 106
35855: PUSH
35856: LD_VAR 0 5
35860: DIFF
35861: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
35862: LD_ADDR_EXP 106
35866: PUSH
35867: LD_EXP 106
35871: PUSH
35872: LD_VAR 0 1
35876: DIFF
35877: ST_TO_ADDR
// break ;
35878: GO 36031
// end ; end else
35880: GO 36029
// if GetControl ( vehicle ) = control_remote then
35882: LD_VAR 0 1
35886: PPUSH
35887: CALL_OW 263
35891: PUSH
35892: LD_INT 2
35894: EQUAL
35895: IFFALSE 35981
// begin wait ( 0 0$2 ) ;
35897: LD_INT 70
35899: PPUSH
35900: CALL_OW 67
// repeat wait ( 10 ) ;
35904: LD_INT 10
35906: PPUSH
35907: CALL_OW 67
// Connect ( vehicle ) ;
35911: LD_VAR 0 1
35915: PPUSH
35916: CALL 49129 0 1
// until IsControledBy ( vehicle ) ;
35920: LD_VAR 0 1
35924: PPUSH
35925: CALL_OW 312
35929: IFFALSE 35904
// wait ( 10 ) ;
35931: LD_INT 10
35933: PPUSH
35934: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35938: LD_VAR 0 1
35942: PPUSH
35943: LD_EXP 105
35947: PUSH
35948: LD_VAR 0 4
35952: ARRAY
35953: PUSH
35954: LD_INT 3
35956: ARRAY
35957: PPUSH
35958: LD_EXP 105
35962: PUSH
35963: LD_VAR 0 4
35967: ARRAY
35968: PUSH
35969: LD_INT 4
35971: ARRAY
35972: PPUSH
35973: CALL_OW 111
// break ;
35977: GO 36031
// end else
35979: GO 36029
// begin wait ( 0 0$3 ) ;
35981: LD_INT 105
35983: PPUSH
35984: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
35988: LD_VAR 0 1
35992: PPUSH
35993: LD_EXP 105
35997: PUSH
35998: LD_VAR 0 4
36002: ARRAY
36003: PUSH
36004: LD_INT 3
36006: ARRAY
36007: PPUSH
36008: LD_EXP 105
36012: PUSH
36013: LD_VAR 0 4
36017: ARRAY
36018: PUSH
36019: LD_INT 4
36021: ARRAY
36022: PPUSH
36023: CALL_OW 111
// break ;
36027: GO 36031
// end ; end ;
36029: GO 35482
36031: POP
36032: POP
// end ;
36033: LD_VAR 0 3
36037: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
36038: LD_INT 0
36040: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
36041: LD_VAR 0 1
36045: PUSH
36046: LD_INT 250
36048: EQUAL
36049: PUSH
36050: LD_VAR 0 2
36054: PPUSH
36055: CALL_OW 264
36059: PUSH
36060: LD_INT 81
36062: EQUAL
36063: AND
36064: IFFALSE 36085
// MinerPlaceMine ( unit , x , y ) ;
36066: LD_VAR 0 2
36070: PPUSH
36071: LD_VAR 0 4
36075: PPUSH
36076: LD_VAR 0 5
36080: PPUSH
36081: CALL 39177 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
36085: LD_VAR 0 1
36089: PUSH
36090: LD_INT 251
36092: EQUAL
36093: PUSH
36094: LD_VAR 0 2
36098: PPUSH
36099: CALL_OW 264
36103: PUSH
36104: LD_INT 81
36106: EQUAL
36107: AND
36108: IFFALSE 36129
// MinerDetonateMine ( unit , x , y ) ;
36110: LD_VAR 0 2
36114: PPUSH
36115: LD_VAR 0 4
36119: PPUSH
36120: LD_VAR 0 5
36124: PPUSH
36125: CALL 39452 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
36129: LD_VAR 0 1
36133: PUSH
36134: LD_INT 252
36136: EQUAL
36137: PUSH
36138: LD_VAR 0 2
36142: PPUSH
36143: CALL_OW 264
36147: PUSH
36148: LD_INT 81
36150: EQUAL
36151: AND
36152: IFFALSE 36173
// MinerCreateMinefield ( unit , x , y ) ;
36154: LD_VAR 0 2
36158: PPUSH
36159: LD_VAR 0 4
36163: PPUSH
36164: LD_VAR 0 5
36168: PPUSH
36169: CALL 39869 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
36173: LD_VAR 0 1
36177: PUSH
36178: LD_INT 253
36180: EQUAL
36181: PUSH
36182: LD_VAR 0 2
36186: PPUSH
36187: CALL_OW 257
36191: PUSH
36192: LD_INT 5
36194: EQUAL
36195: AND
36196: IFFALSE 36217
// ComBinocular ( unit , x , y ) ;
36198: LD_VAR 0 2
36202: PPUSH
36203: LD_VAR 0 4
36207: PPUSH
36208: LD_VAR 0 5
36212: PPUSH
36213: CALL 40238 0 3
// if selectedUnit then
36217: LD_VAR 0 3
36221: IFFALSE 36277
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
36223: LD_VAR 0 1
36227: PUSH
36228: LD_INT 254
36230: EQUAL
36231: PUSH
36232: LD_VAR 0 2
36236: PPUSH
36237: CALL_OW 264
36241: PUSH
36242: LD_INT 99
36244: EQUAL
36245: AND
36246: PUSH
36247: LD_VAR 0 3
36251: PPUSH
36252: CALL_OW 263
36256: PUSH
36257: LD_INT 3
36259: EQUAL
36260: AND
36261: IFFALSE 36277
// HackDestroyVehicle ( unit , selectedUnit ) ;
36263: LD_VAR 0 2
36267: PPUSH
36268: LD_VAR 0 3
36272: PPUSH
36273: CALL 38541 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
36277: LD_VAR 0 1
36281: PUSH
36282: LD_INT 255
36284: EQUAL
36285: PUSH
36286: LD_VAR 0 2
36290: PPUSH
36291: CALL_OW 264
36295: PUSH
36296: LD_INT 14
36298: PUSH
36299: LD_INT 53
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: IN
36306: AND
36307: PUSH
36308: LD_VAR 0 4
36312: PPUSH
36313: LD_VAR 0 5
36317: PPUSH
36318: CALL_OW 488
36322: AND
36323: IFFALSE 36347
// CutTreeXYR ( unit , x , y , 12 ) ;
36325: LD_VAR 0 2
36329: PPUSH
36330: LD_VAR 0 4
36334: PPUSH
36335: LD_VAR 0 5
36339: PPUSH
36340: LD_INT 12
36342: PPUSH
36343: CALL 36538 0 4
// if cmd = 256 then
36347: LD_VAR 0 1
36351: PUSH
36352: LD_INT 256
36354: EQUAL
36355: IFFALSE 36376
// SetFactoryWaypoint ( unit , x , y ) ;
36357: LD_VAR 0 2
36361: PPUSH
36362: LD_VAR 0 4
36366: PPUSH
36367: LD_VAR 0 5
36371: PPUSH
36372: CALL 33934 0 3
// if cmd = 257 then
36376: LD_VAR 0 1
36380: PUSH
36381: LD_INT 257
36383: EQUAL
36384: IFFALSE 36405
// SetWarehouseGatheringPoint ( unit , x , y ) ;
36386: LD_VAR 0 2
36390: PPUSH
36391: LD_VAR 0 4
36395: PPUSH
36396: LD_VAR 0 5
36400: PPUSH
36401: CALL 34424 0 3
// if cmd = 258 then
36405: LD_VAR 0 1
36409: PUSH
36410: LD_INT 258
36412: EQUAL
36413: IFFALSE 36437
// BurnTreeXYR ( unit , x , y , 8 ) ;
36415: LD_VAR 0 2
36419: PPUSH
36420: LD_VAR 0 4
36424: PPUSH
36425: LD_VAR 0 5
36429: PPUSH
36430: LD_INT 8
36432: PPUSH
36433: CALL 36932 0 4
// end ;
36437: LD_VAR 0 6
36441: RET
// export function ComRadiation ( un ) ; var eff ; begin
36442: LD_INT 0
36444: PPUSH
36445: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
36446: LD_VAR 0 1
36450: PPUSH
36451: CALL_OW 264
36455: PUSH
36456: LD_INT 91
36458: NONEQUAL
36459: IFFALSE 36463
// exit ;
36461: GO 36533
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
36463: LD_INT 68
36465: PPUSH
36466: LD_VAR 0 1
36470: PPUSH
36471: CALL_OW 255
36475: PPUSH
36476: CALL_OW 321
36480: PUSH
36481: LD_INT 2
36483: EQUAL
36484: IFFALSE 36496
// eff := 50 else
36486: LD_ADDR_VAR 0 3
36490: PUSH
36491: LD_INT 50
36493: ST_TO_ADDR
36494: GO 36504
// eff := 25 ;
36496: LD_ADDR_VAR 0 3
36500: PUSH
36501: LD_INT 25
36503: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
36504: LD_VAR 0 1
36508: PPUSH
36509: CALL_OW 250
36513: PPUSH
36514: LD_VAR 0 1
36518: PPUSH
36519: CALL_OW 251
36523: PPUSH
36524: LD_VAR 0 3
36528: PPUSH
36529: CALL_OW 495
// end ;
36533: LD_VAR 0 2
36537: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
36538: LD_INT 0
36540: PPUSH
36541: PPUSH
36542: PPUSH
36543: PPUSH
36544: PPUSH
36545: PPUSH
36546: PPUSH
36547: PPUSH
36548: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
36549: LD_VAR 0 1
36553: PPUSH
36554: CALL_OW 302
36558: NOT
36559: PUSH
36560: LD_VAR 0 2
36564: PPUSH
36565: LD_VAR 0 3
36569: PPUSH
36570: CALL_OW 488
36574: NOT
36575: OR
36576: PUSH
36577: LD_VAR 0 4
36581: NOT
36582: OR
36583: IFFALSE 36587
// exit ;
36585: GO 36927
// list := [ ] ;
36587: LD_ADDR_VAR 0 13
36591: PUSH
36592: EMPTY
36593: ST_TO_ADDR
// if x - r < 0 then
36594: LD_VAR 0 2
36598: PUSH
36599: LD_VAR 0 4
36603: MINUS
36604: PUSH
36605: LD_INT 0
36607: LESS
36608: IFFALSE 36620
// min_x := 0 else
36610: LD_ADDR_VAR 0 7
36614: PUSH
36615: LD_INT 0
36617: ST_TO_ADDR
36618: GO 36636
// min_x := x - r ;
36620: LD_ADDR_VAR 0 7
36624: PUSH
36625: LD_VAR 0 2
36629: PUSH
36630: LD_VAR 0 4
36634: MINUS
36635: ST_TO_ADDR
// if y - r < 0 then
36636: LD_VAR 0 3
36640: PUSH
36641: LD_VAR 0 4
36645: MINUS
36646: PUSH
36647: LD_INT 0
36649: LESS
36650: IFFALSE 36662
// min_y := 0 else
36652: LD_ADDR_VAR 0 8
36656: PUSH
36657: LD_INT 0
36659: ST_TO_ADDR
36660: GO 36678
// min_y := y - r ;
36662: LD_ADDR_VAR 0 8
36666: PUSH
36667: LD_VAR 0 3
36671: PUSH
36672: LD_VAR 0 4
36676: MINUS
36677: ST_TO_ADDR
// max_x := x + r ;
36678: LD_ADDR_VAR 0 9
36682: PUSH
36683: LD_VAR 0 2
36687: PUSH
36688: LD_VAR 0 4
36692: PLUS
36693: ST_TO_ADDR
// max_y := y + r ;
36694: LD_ADDR_VAR 0 10
36698: PUSH
36699: LD_VAR 0 3
36703: PUSH
36704: LD_VAR 0 4
36708: PLUS
36709: ST_TO_ADDR
// for _x = min_x to max_x do
36710: LD_ADDR_VAR 0 11
36714: PUSH
36715: DOUBLE
36716: LD_VAR 0 7
36720: DEC
36721: ST_TO_ADDR
36722: LD_VAR 0 9
36726: PUSH
36727: FOR_TO
36728: IFFALSE 36845
// for _y = min_y to max_y do
36730: LD_ADDR_VAR 0 12
36734: PUSH
36735: DOUBLE
36736: LD_VAR 0 8
36740: DEC
36741: ST_TO_ADDR
36742: LD_VAR 0 10
36746: PUSH
36747: FOR_TO
36748: IFFALSE 36841
// begin if not ValidHex ( _x , _y ) then
36750: LD_VAR 0 11
36754: PPUSH
36755: LD_VAR 0 12
36759: PPUSH
36760: CALL_OW 488
36764: NOT
36765: IFFALSE 36769
// continue ;
36767: GO 36747
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
36769: LD_VAR 0 11
36773: PPUSH
36774: LD_VAR 0 12
36778: PPUSH
36779: CALL_OW 351
36783: PUSH
36784: LD_VAR 0 11
36788: PPUSH
36789: LD_VAR 0 12
36793: PPUSH
36794: CALL_OW 554
36798: AND
36799: IFFALSE 36839
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
36801: LD_ADDR_VAR 0 13
36805: PUSH
36806: LD_VAR 0 13
36810: PPUSH
36811: LD_VAR 0 13
36815: PUSH
36816: LD_INT 1
36818: PLUS
36819: PPUSH
36820: LD_VAR 0 11
36824: PUSH
36825: LD_VAR 0 12
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PPUSH
36834: CALL_OW 2
36838: ST_TO_ADDR
// end ;
36839: GO 36747
36841: POP
36842: POP
36843: GO 36727
36845: POP
36846: POP
// if not list then
36847: LD_VAR 0 13
36851: NOT
36852: IFFALSE 36856
// exit ;
36854: GO 36927
// for i in list do
36856: LD_ADDR_VAR 0 6
36860: PUSH
36861: LD_VAR 0 13
36865: PUSH
36866: FOR_IN
36867: IFFALSE 36925
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
36869: LD_VAR 0 1
36873: PPUSH
36874: LD_STRING M
36876: PUSH
36877: LD_VAR 0 6
36881: PUSH
36882: LD_INT 1
36884: ARRAY
36885: PUSH
36886: LD_VAR 0 6
36890: PUSH
36891: LD_INT 2
36893: ARRAY
36894: PUSH
36895: LD_INT 0
36897: PUSH
36898: LD_INT 0
36900: PUSH
36901: LD_INT 0
36903: PUSH
36904: LD_INT 0
36906: PUSH
36907: EMPTY
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: PUSH
36916: EMPTY
36917: LIST
36918: PPUSH
36919: CALL_OW 447
36923: GO 36866
36925: POP
36926: POP
// end ;
36927: LD_VAR 0 5
36931: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
36932: LD_INT 0
36934: PPUSH
36935: PPUSH
36936: PPUSH
36937: PPUSH
36938: PPUSH
36939: PPUSH
36940: PPUSH
36941: PPUSH
36942: PPUSH
36943: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
36944: LD_VAR 0 1
36948: PPUSH
36949: CALL_OW 302
36953: NOT
36954: PUSH
36955: LD_VAR 0 2
36959: PPUSH
36960: LD_VAR 0 3
36964: PPUSH
36965: CALL_OW 488
36969: NOT
36970: OR
36971: PUSH
36972: LD_VAR 0 4
36976: NOT
36977: OR
36978: IFFALSE 36982
// exit ;
36980: GO 37495
// list := [ ] ;
36982: LD_ADDR_VAR 0 13
36986: PUSH
36987: EMPTY
36988: ST_TO_ADDR
// if x - r < 0 then
36989: LD_VAR 0 2
36993: PUSH
36994: LD_VAR 0 4
36998: MINUS
36999: PUSH
37000: LD_INT 0
37002: LESS
37003: IFFALSE 37015
// min_x := 0 else
37005: LD_ADDR_VAR 0 7
37009: PUSH
37010: LD_INT 0
37012: ST_TO_ADDR
37013: GO 37031
// min_x := x - r ;
37015: LD_ADDR_VAR 0 7
37019: PUSH
37020: LD_VAR 0 2
37024: PUSH
37025: LD_VAR 0 4
37029: MINUS
37030: ST_TO_ADDR
// if y - r < 0 then
37031: LD_VAR 0 3
37035: PUSH
37036: LD_VAR 0 4
37040: MINUS
37041: PUSH
37042: LD_INT 0
37044: LESS
37045: IFFALSE 37057
// min_y := 0 else
37047: LD_ADDR_VAR 0 8
37051: PUSH
37052: LD_INT 0
37054: ST_TO_ADDR
37055: GO 37073
// min_y := y - r ;
37057: LD_ADDR_VAR 0 8
37061: PUSH
37062: LD_VAR 0 3
37066: PUSH
37067: LD_VAR 0 4
37071: MINUS
37072: ST_TO_ADDR
// max_x := x + r ;
37073: LD_ADDR_VAR 0 9
37077: PUSH
37078: LD_VAR 0 2
37082: PUSH
37083: LD_VAR 0 4
37087: PLUS
37088: ST_TO_ADDR
// max_y := y + r ;
37089: LD_ADDR_VAR 0 10
37093: PUSH
37094: LD_VAR 0 3
37098: PUSH
37099: LD_VAR 0 4
37103: PLUS
37104: ST_TO_ADDR
// for _x = min_x to max_x do
37105: LD_ADDR_VAR 0 11
37109: PUSH
37110: DOUBLE
37111: LD_VAR 0 7
37115: DEC
37116: ST_TO_ADDR
37117: LD_VAR 0 9
37121: PUSH
37122: FOR_TO
37123: IFFALSE 37240
// for _y = min_y to max_y do
37125: LD_ADDR_VAR 0 12
37129: PUSH
37130: DOUBLE
37131: LD_VAR 0 8
37135: DEC
37136: ST_TO_ADDR
37137: LD_VAR 0 10
37141: PUSH
37142: FOR_TO
37143: IFFALSE 37236
// begin if not ValidHex ( _x , _y ) then
37145: LD_VAR 0 11
37149: PPUSH
37150: LD_VAR 0 12
37154: PPUSH
37155: CALL_OW 488
37159: NOT
37160: IFFALSE 37164
// continue ;
37162: GO 37142
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
37164: LD_VAR 0 11
37168: PPUSH
37169: LD_VAR 0 12
37173: PPUSH
37174: CALL_OW 351
37178: PUSH
37179: LD_VAR 0 11
37183: PPUSH
37184: LD_VAR 0 12
37188: PPUSH
37189: CALL_OW 554
37193: AND
37194: IFFALSE 37234
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
37196: LD_ADDR_VAR 0 13
37200: PUSH
37201: LD_VAR 0 13
37205: PPUSH
37206: LD_VAR 0 13
37210: PUSH
37211: LD_INT 1
37213: PLUS
37214: PPUSH
37215: LD_VAR 0 11
37219: PUSH
37220: LD_VAR 0 12
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: PPUSH
37229: CALL_OW 2
37233: ST_TO_ADDR
// end ;
37234: GO 37142
37236: POP
37237: POP
37238: GO 37122
37240: POP
37241: POP
// if not list then
37242: LD_VAR 0 13
37246: NOT
37247: IFFALSE 37251
// exit ;
37249: GO 37495
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
37251: LD_ADDR_VAR 0 13
37255: PUSH
37256: LD_VAR 0 1
37260: PPUSH
37261: LD_VAR 0 13
37265: PPUSH
37266: LD_INT 1
37268: PPUSH
37269: LD_INT 1
37271: PPUSH
37272: CALL 46271 0 4
37276: ST_TO_ADDR
// ComStop ( flame ) ;
37277: LD_VAR 0 1
37281: PPUSH
37282: CALL_OW 141
// for i in list do
37286: LD_ADDR_VAR 0 6
37290: PUSH
37291: LD_VAR 0 13
37295: PUSH
37296: FOR_IN
37297: IFFALSE 37328
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
37299: LD_VAR 0 1
37303: PPUSH
37304: LD_VAR 0 6
37308: PUSH
37309: LD_INT 1
37311: ARRAY
37312: PPUSH
37313: LD_VAR 0 6
37317: PUSH
37318: LD_INT 2
37320: ARRAY
37321: PPUSH
37322: CALL_OW 176
37326: GO 37296
37328: POP
37329: POP
// repeat wait ( 0 0$1 ) ;
37330: LD_INT 35
37332: PPUSH
37333: CALL_OW 67
// task := GetTaskList ( flame ) ;
37337: LD_ADDR_VAR 0 14
37341: PUSH
37342: LD_VAR 0 1
37346: PPUSH
37347: CALL_OW 437
37351: ST_TO_ADDR
// if not task then
37352: LD_VAR 0 14
37356: NOT
37357: IFFALSE 37361
// exit ;
37359: GO 37495
// if task [ 1 ] [ 1 ] <> | then
37361: LD_VAR 0 14
37365: PUSH
37366: LD_INT 1
37368: ARRAY
37369: PUSH
37370: LD_INT 1
37372: ARRAY
37373: PUSH
37374: LD_STRING |
37376: NONEQUAL
37377: IFFALSE 37381
// exit ;
37379: GO 37495
// _x := task [ 1 ] [ 2 ] ;
37381: LD_ADDR_VAR 0 11
37385: PUSH
37386: LD_VAR 0 14
37390: PUSH
37391: LD_INT 1
37393: ARRAY
37394: PUSH
37395: LD_INT 2
37397: ARRAY
37398: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
37399: LD_ADDR_VAR 0 12
37403: PUSH
37404: LD_VAR 0 14
37408: PUSH
37409: LD_INT 1
37411: ARRAY
37412: PUSH
37413: LD_INT 3
37415: ARRAY
37416: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
37417: LD_VAR 0 11
37421: PPUSH
37422: LD_VAR 0 12
37426: PPUSH
37427: CALL_OW 351
37431: NOT
37432: PUSH
37433: LD_VAR 0 11
37437: PPUSH
37438: LD_VAR 0 12
37442: PPUSH
37443: CALL_OW 554
37447: NOT
37448: OR
37449: IFFALSE 37483
// begin task := Delete ( task , 1 ) ;
37451: LD_ADDR_VAR 0 14
37455: PUSH
37456: LD_VAR 0 14
37460: PPUSH
37461: LD_INT 1
37463: PPUSH
37464: CALL_OW 3
37468: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
37469: LD_VAR 0 1
37473: PPUSH
37474: LD_VAR 0 14
37478: PPUSH
37479: CALL_OW 446
// end ; until not HasTask ( flame ) ;
37483: LD_VAR 0 1
37487: PPUSH
37488: CALL_OW 314
37492: NOT
37493: IFFALSE 37330
// end ;
37495: LD_VAR 0 5
37499: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
37500: LD_EXP 109
37504: NOT
37505: IFFALSE 37555
37507: GO 37509
37509: DISABLE
// begin initHack := true ;
37510: LD_ADDR_EXP 109
37514: PUSH
37515: LD_INT 1
37517: ST_TO_ADDR
// hackTanks := [ ] ;
37518: LD_ADDR_EXP 110
37522: PUSH
37523: EMPTY
37524: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
37525: LD_ADDR_EXP 111
37529: PUSH
37530: EMPTY
37531: ST_TO_ADDR
// hackLimit := 3 ;
37532: LD_ADDR_EXP 112
37536: PUSH
37537: LD_INT 3
37539: ST_TO_ADDR
// hackDist := 12 ;
37540: LD_ADDR_EXP 113
37544: PUSH
37545: LD_INT 12
37547: ST_TO_ADDR
// hackCounter := [ ] ;
37548: LD_ADDR_EXP 114
37552: PUSH
37553: EMPTY
37554: ST_TO_ADDR
// end ;
37555: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
37556: LD_EXP 109
37560: PUSH
37561: LD_INT 34
37563: PUSH
37564: LD_INT 99
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PPUSH
37571: CALL_OW 69
37575: AND
37576: IFFALSE 37829
37578: GO 37580
37580: DISABLE
37581: LD_INT 0
37583: PPUSH
37584: PPUSH
// begin enable ;
37585: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
37586: LD_ADDR_VAR 0 1
37590: PUSH
37591: LD_INT 34
37593: PUSH
37594: LD_INT 99
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PPUSH
37601: CALL_OW 69
37605: PUSH
37606: FOR_IN
37607: IFFALSE 37827
// begin if not i in hackTanks then
37609: LD_VAR 0 1
37613: PUSH
37614: LD_EXP 110
37618: IN
37619: NOT
37620: IFFALSE 37703
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
37622: LD_ADDR_EXP 110
37626: PUSH
37627: LD_EXP 110
37631: PPUSH
37632: LD_EXP 110
37636: PUSH
37637: LD_INT 1
37639: PLUS
37640: PPUSH
37641: LD_VAR 0 1
37645: PPUSH
37646: CALL_OW 1
37650: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
37651: LD_ADDR_EXP 111
37655: PUSH
37656: LD_EXP 111
37660: PPUSH
37661: LD_EXP 111
37665: PUSH
37666: LD_INT 1
37668: PLUS
37669: PPUSH
37670: EMPTY
37671: PPUSH
37672: CALL_OW 1
37676: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
37677: LD_ADDR_EXP 114
37681: PUSH
37682: LD_EXP 114
37686: PPUSH
37687: LD_EXP 114
37691: PUSH
37692: LD_INT 1
37694: PLUS
37695: PPUSH
37696: EMPTY
37697: PPUSH
37698: CALL_OW 1
37702: ST_TO_ADDR
// end ; if not IsOk ( i ) then
37703: LD_VAR 0 1
37707: PPUSH
37708: CALL_OW 302
37712: NOT
37713: IFFALSE 37726
// begin HackUnlinkAll ( i ) ;
37715: LD_VAR 0 1
37719: PPUSH
37720: CALL 37832 0 1
// continue ;
37724: GO 37606
// end ; HackCheckCapturedStatus ( i ) ;
37726: LD_VAR 0 1
37730: PPUSH
37731: CALL 38275 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
37735: LD_ADDR_VAR 0 2
37739: PUSH
37740: LD_INT 81
37742: PUSH
37743: LD_VAR 0 1
37747: PPUSH
37748: CALL_OW 255
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 33
37759: PUSH
37760: LD_INT 3
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 91
37769: PUSH
37770: LD_VAR 0 1
37774: PUSH
37775: LD_EXP 113
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 50
37787: PUSH
37788: EMPTY
37789: LIST
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: PPUSH
37797: CALL_OW 69
37801: ST_TO_ADDR
// if not tmp then
37802: LD_VAR 0 2
37806: NOT
37807: IFFALSE 37811
// continue ;
37809: GO 37606
// HackLink ( i , tmp ) ;
37811: LD_VAR 0 1
37815: PPUSH
37816: LD_VAR 0 2
37820: PPUSH
37821: CALL 37968 0 2
// end ;
37825: GO 37606
37827: POP
37828: POP
// end ;
37829: PPOPN 2
37831: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
37832: LD_INT 0
37834: PPUSH
37835: PPUSH
37836: PPUSH
// if not hack in hackTanks then
37837: LD_VAR 0 1
37841: PUSH
37842: LD_EXP 110
37846: IN
37847: NOT
37848: IFFALSE 37852
// exit ;
37850: GO 37963
// index := GetElementIndex ( hackTanks , hack ) ;
37852: LD_ADDR_VAR 0 4
37856: PUSH
37857: LD_EXP 110
37861: PPUSH
37862: LD_VAR 0 1
37866: PPUSH
37867: CALL 45568 0 2
37871: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
37872: LD_EXP 111
37876: PUSH
37877: LD_VAR 0 4
37881: ARRAY
37882: IFFALSE 37963
// begin for i in hackTanksCaptured [ index ] do
37884: LD_ADDR_VAR 0 3
37888: PUSH
37889: LD_EXP 111
37893: PUSH
37894: LD_VAR 0 4
37898: ARRAY
37899: PUSH
37900: FOR_IN
37901: IFFALSE 37927
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
37903: LD_VAR 0 3
37907: PUSH
37908: LD_INT 1
37910: ARRAY
37911: PPUSH
37912: LD_VAR 0 3
37916: PUSH
37917: LD_INT 2
37919: ARRAY
37920: PPUSH
37921: CALL_OW 235
37925: GO 37900
37927: POP
37928: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
37929: LD_ADDR_EXP 111
37933: PUSH
37934: LD_EXP 111
37938: PPUSH
37939: LD_VAR 0 4
37943: PPUSH
37944: EMPTY
37945: PPUSH
37946: CALL_OW 1
37950: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
37951: LD_VAR 0 1
37955: PPUSH
37956: LD_INT 0
37958: PPUSH
37959: CALL_OW 505
// end ; end ;
37963: LD_VAR 0 2
37967: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
37968: LD_INT 0
37970: PPUSH
37971: PPUSH
37972: PPUSH
// if not hack in hackTanks or not vehicles then
37973: LD_VAR 0 1
37977: PUSH
37978: LD_EXP 110
37982: IN
37983: NOT
37984: PUSH
37985: LD_VAR 0 2
37989: NOT
37990: OR
37991: IFFALSE 37995
// exit ;
37993: GO 38270
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
37995: LD_ADDR_VAR 0 2
37999: PUSH
38000: LD_VAR 0 1
38004: PPUSH
38005: LD_VAR 0 2
38009: PPUSH
38010: LD_INT 1
38012: PPUSH
38013: LD_INT 1
38015: PPUSH
38016: CALL 46218 0 4
38020: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
38021: LD_ADDR_VAR 0 5
38025: PUSH
38026: LD_EXP 110
38030: PPUSH
38031: LD_VAR 0 1
38035: PPUSH
38036: CALL 45568 0 2
38040: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
38041: LD_EXP 111
38045: PUSH
38046: LD_VAR 0 5
38050: ARRAY
38051: PUSH
38052: LD_EXP 112
38056: LESS
38057: IFFALSE 38246
// begin for i := 1 to vehicles do
38059: LD_ADDR_VAR 0 4
38063: PUSH
38064: DOUBLE
38065: LD_INT 1
38067: DEC
38068: ST_TO_ADDR
38069: LD_VAR 0 2
38073: PUSH
38074: FOR_TO
38075: IFFALSE 38244
// begin if hackTanksCaptured [ index ] = hackLimit then
38077: LD_EXP 111
38081: PUSH
38082: LD_VAR 0 5
38086: ARRAY
38087: PUSH
38088: LD_EXP 112
38092: EQUAL
38093: IFFALSE 38097
// break ;
38095: GO 38244
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
38097: LD_ADDR_EXP 114
38101: PUSH
38102: LD_EXP 114
38106: PPUSH
38107: LD_VAR 0 5
38111: PPUSH
38112: LD_EXP 114
38116: PUSH
38117: LD_VAR 0 5
38121: ARRAY
38122: PUSH
38123: LD_INT 1
38125: PLUS
38126: PPUSH
38127: CALL_OW 1
38131: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
38132: LD_ADDR_EXP 111
38136: PUSH
38137: LD_EXP 111
38141: PPUSH
38142: LD_VAR 0 5
38146: PUSH
38147: LD_EXP 111
38151: PUSH
38152: LD_VAR 0 5
38156: ARRAY
38157: PUSH
38158: LD_INT 1
38160: PLUS
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: PPUSH
38166: LD_VAR 0 2
38170: PUSH
38171: LD_VAR 0 4
38175: ARRAY
38176: PUSH
38177: LD_VAR 0 2
38181: PUSH
38182: LD_VAR 0 4
38186: ARRAY
38187: PPUSH
38188: CALL_OW 255
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PPUSH
38197: CALL 45783 0 3
38201: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
38202: LD_VAR 0 2
38206: PUSH
38207: LD_VAR 0 4
38211: ARRAY
38212: PPUSH
38213: LD_VAR 0 1
38217: PPUSH
38218: CALL_OW 255
38222: PPUSH
38223: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
38227: LD_VAR 0 2
38231: PUSH
38232: LD_VAR 0 4
38236: ARRAY
38237: PPUSH
38238: CALL_OW 141
// end ;
38242: GO 38074
38244: POP
38245: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38246: LD_VAR 0 1
38250: PPUSH
38251: LD_EXP 111
38255: PUSH
38256: LD_VAR 0 5
38260: ARRAY
38261: PUSH
38262: LD_INT 0
38264: PLUS
38265: PPUSH
38266: CALL_OW 505
// end ;
38270: LD_VAR 0 3
38274: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
38275: LD_INT 0
38277: PPUSH
38278: PPUSH
38279: PPUSH
38280: PPUSH
// if not hack in hackTanks then
38281: LD_VAR 0 1
38285: PUSH
38286: LD_EXP 110
38290: IN
38291: NOT
38292: IFFALSE 38296
// exit ;
38294: GO 38536
// index := GetElementIndex ( hackTanks , hack ) ;
38296: LD_ADDR_VAR 0 4
38300: PUSH
38301: LD_EXP 110
38305: PPUSH
38306: LD_VAR 0 1
38310: PPUSH
38311: CALL 45568 0 2
38315: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
38316: LD_ADDR_VAR 0 3
38320: PUSH
38321: DOUBLE
38322: LD_EXP 111
38326: PUSH
38327: LD_VAR 0 4
38331: ARRAY
38332: INC
38333: ST_TO_ADDR
38334: LD_INT 1
38336: PUSH
38337: FOR_DOWNTO
38338: IFFALSE 38510
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
38340: LD_ADDR_VAR 0 5
38344: PUSH
38345: LD_EXP 111
38349: PUSH
38350: LD_VAR 0 4
38354: ARRAY
38355: PUSH
38356: LD_VAR 0 3
38360: ARRAY
38361: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
38362: LD_VAR 0 5
38366: PUSH
38367: LD_INT 1
38369: ARRAY
38370: PPUSH
38371: CALL_OW 302
38375: NOT
38376: PUSH
38377: LD_VAR 0 5
38381: PUSH
38382: LD_INT 1
38384: ARRAY
38385: PPUSH
38386: CALL_OW 255
38390: PUSH
38391: LD_VAR 0 1
38395: PPUSH
38396: CALL_OW 255
38400: NONEQUAL
38401: OR
38402: IFFALSE 38508
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
38404: LD_VAR 0 5
38408: PUSH
38409: LD_INT 1
38411: ARRAY
38412: PPUSH
38413: CALL_OW 305
38417: PUSH
38418: LD_VAR 0 5
38422: PUSH
38423: LD_INT 1
38425: ARRAY
38426: PPUSH
38427: CALL_OW 255
38431: PUSH
38432: LD_VAR 0 1
38436: PPUSH
38437: CALL_OW 255
38441: EQUAL
38442: AND
38443: IFFALSE 38467
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
38445: LD_VAR 0 5
38449: PUSH
38450: LD_INT 1
38452: ARRAY
38453: PPUSH
38454: LD_VAR 0 5
38458: PUSH
38459: LD_INT 2
38461: ARRAY
38462: PPUSH
38463: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
38467: LD_ADDR_EXP 111
38471: PUSH
38472: LD_EXP 111
38476: PPUSH
38477: LD_VAR 0 4
38481: PPUSH
38482: LD_EXP 111
38486: PUSH
38487: LD_VAR 0 4
38491: ARRAY
38492: PPUSH
38493: LD_VAR 0 3
38497: PPUSH
38498: CALL_OW 3
38502: PPUSH
38503: CALL_OW 1
38507: ST_TO_ADDR
// end ; end ;
38508: GO 38337
38510: POP
38511: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
38512: LD_VAR 0 1
38516: PPUSH
38517: LD_EXP 111
38521: PUSH
38522: LD_VAR 0 4
38526: ARRAY
38527: PUSH
38528: LD_INT 0
38530: PLUS
38531: PPUSH
38532: CALL_OW 505
// end ;
38536: LD_VAR 0 2
38540: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
38541: LD_INT 0
38543: PPUSH
38544: PPUSH
38545: PPUSH
38546: PPUSH
// if not hack in hackTanks then
38547: LD_VAR 0 1
38551: PUSH
38552: LD_EXP 110
38556: IN
38557: NOT
38558: IFFALSE 38562
// exit ;
38560: GO 38647
// index := GetElementIndex ( hackTanks , hack ) ;
38562: LD_ADDR_VAR 0 5
38566: PUSH
38567: LD_EXP 110
38571: PPUSH
38572: LD_VAR 0 1
38576: PPUSH
38577: CALL 45568 0 2
38581: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
38582: LD_ADDR_VAR 0 4
38586: PUSH
38587: DOUBLE
38588: LD_INT 1
38590: DEC
38591: ST_TO_ADDR
38592: LD_EXP 111
38596: PUSH
38597: LD_VAR 0 5
38601: ARRAY
38602: PUSH
38603: FOR_TO
38604: IFFALSE 38645
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
38606: LD_EXP 111
38610: PUSH
38611: LD_VAR 0 5
38615: ARRAY
38616: PUSH
38617: LD_VAR 0 4
38621: ARRAY
38622: PUSH
38623: LD_INT 1
38625: ARRAY
38626: PUSH
38627: LD_VAR 0 2
38631: EQUAL
38632: IFFALSE 38643
// KillUnit ( vehicle ) ;
38634: LD_VAR 0 2
38638: PPUSH
38639: CALL_OW 66
38643: GO 38603
38645: POP
38646: POP
// end ;
38647: LD_VAR 0 3
38651: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
38652: LD_EXP 115
38656: NOT
38657: IFFALSE 38692
38659: GO 38661
38661: DISABLE
// begin initMiner := true ;
38662: LD_ADDR_EXP 115
38666: PUSH
38667: LD_INT 1
38669: ST_TO_ADDR
// minersList := [ ] ;
38670: LD_ADDR_EXP 116
38674: PUSH
38675: EMPTY
38676: ST_TO_ADDR
// minerMinesList := [ ] ;
38677: LD_ADDR_EXP 117
38681: PUSH
38682: EMPTY
38683: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
38684: LD_ADDR_EXP 118
38688: PUSH
38689: LD_INT 5
38691: ST_TO_ADDR
// end ;
38692: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
38693: LD_EXP 115
38697: PUSH
38698: LD_INT 34
38700: PUSH
38701: LD_INT 81
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PPUSH
38708: CALL_OW 69
38712: AND
38713: IFFALSE 39174
38715: GO 38717
38717: DISABLE
38718: LD_INT 0
38720: PPUSH
38721: PPUSH
38722: PPUSH
38723: PPUSH
// begin enable ;
38724: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
38725: LD_ADDR_VAR 0 1
38729: PUSH
38730: LD_INT 34
38732: PUSH
38733: LD_INT 81
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: PPUSH
38740: CALL_OW 69
38744: PUSH
38745: FOR_IN
38746: IFFALSE 38818
// begin if not i in minersList then
38748: LD_VAR 0 1
38752: PUSH
38753: LD_EXP 116
38757: IN
38758: NOT
38759: IFFALSE 38816
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
38761: LD_ADDR_EXP 116
38765: PUSH
38766: LD_EXP 116
38770: PPUSH
38771: LD_EXP 116
38775: PUSH
38776: LD_INT 1
38778: PLUS
38779: PPUSH
38780: LD_VAR 0 1
38784: PPUSH
38785: CALL_OW 1
38789: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
38790: LD_ADDR_EXP 117
38794: PUSH
38795: LD_EXP 117
38799: PPUSH
38800: LD_EXP 117
38804: PUSH
38805: LD_INT 1
38807: PLUS
38808: PPUSH
38809: EMPTY
38810: PPUSH
38811: CALL_OW 1
38815: ST_TO_ADDR
// end end ;
38816: GO 38745
38818: POP
38819: POP
// for i := minerMinesList downto 1 do
38820: LD_ADDR_VAR 0 1
38824: PUSH
38825: DOUBLE
38826: LD_EXP 117
38830: INC
38831: ST_TO_ADDR
38832: LD_INT 1
38834: PUSH
38835: FOR_DOWNTO
38836: IFFALSE 39172
// begin if IsLive ( minersList [ i ] ) then
38838: LD_EXP 116
38842: PUSH
38843: LD_VAR 0 1
38847: ARRAY
38848: PPUSH
38849: CALL_OW 300
38853: IFFALSE 38881
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
38855: LD_EXP 116
38859: PUSH
38860: LD_VAR 0 1
38864: ARRAY
38865: PPUSH
38866: LD_EXP 117
38870: PUSH
38871: LD_VAR 0 1
38875: ARRAY
38876: PPUSH
38877: CALL_OW 505
// if not minerMinesList [ i ] then
38881: LD_EXP 117
38885: PUSH
38886: LD_VAR 0 1
38890: ARRAY
38891: NOT
38892: IFFALSE 38896
// continue ;
38894: GO 38835
// for j := minerMinesList [ i ] downto 1 do
38896: LD_ADDR_VAR 0 2
38900: PUSH
38901: DOUBLE
38902: LD_EXP 117
38906: PUSH
38907: LD_VAR 0 1
38911: ARRAY
38912: INC
38913: ST_TO_ADDR
38914: LD_INT 1
38916: PUSH
38917: FOR_DOWNTO
38918: IFFALSE 39168
// begin side := GetSide ( minersList [ i ] ) ;
38920: LD_ADDR_VAR 0 3
38924: PUSH
38925: LD_EXP 116
38929: PUSH
38930: LD_VAR 0 1
38934: ARRAY
38935: PPUSH
38936: CALL_OW 255
38940: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
38941: LD_ADDR_VAR 0 4
38945: PUSH
38946: LD_EXP 117
38950: PUSH
38951: LD_VAR 0 1
38955: ARRAY
38956: PUSH
38957: LD_VAR 0 2
38961: ARRAY
38962: PUSH
38963: LD_INT 1
38965: ARRAY
38966: PPUSH
38967: LD_EXP 117
38971: PUSH
38972: LD_VAR 0 1
38976: ARRAY
38977: PUSH
38978: LD_VAR 0 2
38982: ARRAY
38983: PUSH
38984: LD_INT 2
38986: ARRAY
38987: PPUSH
38988: CALL_OW 428
38992: ST_TO_ADDR
// if not tmp then
38993: LD_VAR 0 4
38997: NOT
38998: IFFALSE 39002
// continue ;
39000: GO 38917
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
39002: LD_VAR 0 4
39006: PUSH
39007: LD_INT 81
39009: PUSH
39010: LD_VAR 0 3
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PPUSH
39019: CALL_OW 69
39023: IN
39024: PUSH
39025: LD_EXP 117
39029: PUSH
39030: LD_VAR 0 1
39034: ARRAY
39035: PUSH
39036: LD_VAR 0 2
39040: ARRAY
39041: PUSH
39042: LD_INT 1
39044: ARRAY
39045: PPUSH
39046: LD_EXP 117
39050: PUSH
39051: LD_VAR 0 1
39055: ARRAY
39056: PUSH
39057: LD_VAR 0 2
39061: ARRAY
39062: PUSH
39063: LD_INT 2
39065: ARRAY
39066: PPUSH
39067: CALL_OW 458
39071: AND
39072: IFFALSE 39166
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
39074: LD_EXP 117
39078: PUSH
39079: LD_VAR 0 1
39083: ARRAY
39084: PUSH
39085: LD_VAR 0 2
39089: ARRAY
39090: PUSH
39091: LD_INT 1
39093: ARRAY
39094: PPUSH
39095: LD_EXP 117
39099: PUSH
39100: LD_VAR 0 1
39104: ARRAY
39105: PUSH
39106: LD_VAR 0 2
39110: ARRAY
39111: PUSH
39112: LD_INT 2
39114: ARRAY
39115: PPUSH
39116: LD_VAR 0 3
39120: PPUSH
39121: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
39125: LD_ADDR_EXP 117
39129: PUSH
39130: LD_EXP 117
39134: PPUSH
39135: LD_VAR 0 1
39139: PPUSH
39140: LD_EXP 117
39144: PUSH
39145: LD_VAR 0 1
39149: ARRAY
39150: PPUSH
39151: LD_VAR 0 2
39155: PPUSH
39156: CALL_OW 3
39160: PPUSH
39161: CALL_OW 1
39165: ST_TO_ADDR
// end ; end ;
39166: GO 38917
39168: POP
39169: POP
// end ;
39170: GO 38835
39172: POP
39173: POP
// end ;
39174: PPOPN 4
39176: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
39177: LD_INT 0
39179: PPUSH
39180: PPUSH
// result := false ;
39181: LD_ADDR_VAR 0 4
39185: PUSH
39186: LD_INT 0
39188: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
39189: LD_VAR 0 1
39193: PPUSH
39194: CALL_OW 264
39198: PUSH
39199: LD_INT 81
39201: EQUAL
39202: NOT
39203: IFFALSE 39207
// exit ;
39205: GO 39447
// index := GetElementIndex ( minersList , unit ) ;
39207: LD_ADDR_VAR 0 5
39211: PUSH
39212: LD_EXP 116
39216: PPUSH
39217: LD_VAR 0 1
39221: PPUSH
39222: CALL 45568 0 2
39226: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
39227: LD_EXP 117
39231: PUSH
39232: LD_VAR 0 5
39236: ARRAY
39237: PUSH
39238: LD_EXP 118
39242: GREATEREQUAL
39243: IFFALSE 39247
// exit ;
39245: GO 39447
// ComMoveXY ( unit , x , y ) ;
39247: LD_VAR 0 1
39251: PPUSH
39252: LD_VAR 0 2
39256: PPUSH
39257: LD_VAR 0 3
39261: PPUSH
39262: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
39266: LD_INT 35
39268: PPUSH
39269: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
39273: LD_VAR 0 1
39277: PPUSH
39278: LD_VAR 0 2
39282: PPUSH
39283: LD_VAR 0 3
39287: PPUSH
39288: CALL 77329 0 3
39292: NOT
39293: PUSH
39294: LD_VAR 0 1
39298: PPUSH
39299: CALL_OW 314
39303: AND
39304: IFFALSE 39308
// exit ;
39306: GO 39447
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
39308: LD_VAR 0 2
39312: PPUSH
39313: LD_VAR 0 3
39317: PPUSH
39318: CALL_OW 428
39322: PUSH
39323: LD_VAR 0 1
39327: EQUAL
39328: PUSH
39329: LD_VAR 0 1
39333: PPUSH
39334: CALL_OW 314
39338: NOT
39339: AND
39340: IFFALSE 39266
// PlaySoundXY ( x , y , PlantMine ) ;
39342: LD_VAR 0 2
39346: PPUSH
39347: LD_VAR 0 3
39351: PPUSH
39352: LD_STRING PlantMine
39354: PPUSH
39355: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
39359: LD_VAR 0 2
39363: PPUSH
39364: LD_VAR 0 3
39368: PPUSH
39369: LD_VAR 0 1
39373: PPUSH
39374: CALL_OW 255
39378: PPUSH
39379: LD_INT 0
39381: PPUSH
39382: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
39386: LD_ADDR_EXP 117
39390: PUSH
39391: LD_EXP 117
39395: PPUSH
39396: LD_VAR 0 5
39400: PUSH
39401: LD_EXP 117
39405: PUSH
39406: LD_VAR 0 5
39410: ARRAY
39411: PUSH
39412: LD_INT 1
39414: PLUS
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PPUSH
39420: LD_VAR 0 2
39424: PUSH
39425: LD_VAR 0 3
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PPUSH
39434: CALL 45783 0 3
39438: ST_TO_ADDR
// result := true ;
39439: LD_ADDR_VAR 0 4
39443: PUSH
39444: LD_INT 1
39446: ST_TO_ADDR
// end ;
39447: LD_VAR 0 4
39451: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
39452: LD_INT 0
39454: PPUSH
39455: PPUSH
39456: PPUSH
// if not unit in minersList then
39457: LD_VAR 0 1
39461: PUSH
39462: LD_EXP 116
39466: IN
39467: NOT
39468: IFFALSE 39472
// exit ;
39470: GO 39864
// index := GetElementIndex ( minersList , unit ) ;
39472: LD_ADDR_VAR 0 6
39476: PUSH
39477: LD_EXP 116
39481: PPUSH
39482: LD_VAR 0 1
39486: PPUSH
39487: CALL 45568 0 2
39491: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
39492: LD_ADDR_VAR 0 5
39496: PUSH
39497: DOUBLE
39498: LD_EXP 117
39502: PUSH
39503: LD_VAR 0 6
39507: ARRAY
39508: INC
39509: ST_TO_ADDR
39510: LD_INT 1
39512: PUSH
39513: FOR_DOWNTO
39514: IFFALSE 39675
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
39516: LD_EXP 117
39520: PUSH
39521: LD_VAR 0 6
39525: ARRAY
39526: PUSH
39527: LD_VAR 0 5
39531: ARRAY
39532: PUSH
39533: LD_INT 1
39535: ARRAY
39536: PUSH
39537: LD_VAR 0 2
39541: EQUAL
39542: PUSH
39543: LD_EXP 117
39547: PUSH
39548: LD_VAR 0 6
39552: ARRAY
39553: PUSH
39554: LD_VAR 0 5
39558: ARRAY
39559: PUSH
39560: LD_INT 2
39562: ARRAY
39563: PUSH
39564: LD_VAR 0 3
39568: EQUAL
39569: AND
39570: IFFALSE 39673
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39572: LD_EXP 117
39576: PUSH
39577: LD_VAR 0 6
39581: ARRAY
39582: PUSH
39583: LD_VAR 0 5
39587: ARRAY
39588: PUSH
39589: LD_INT 1
39591: ARRAY
39592: PPUSH
39593: LD_EXP 117
39597: PUSH
39598: LD_VAR 0 6
39602: ARRAY
39603: PUSH
39604: LD_VAR 0 5
39608: ARRAY
39609: PUSH
39610: LD_INT 2
39612: ARRAY
39613: PPUSH
39614: LD_VAR 0 1
39618: PPUSH
39619: CALL_OW 255
39623: PPUSH
39624: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39628: LD_ADDR_EXP 117
39632: PUSH
39633: LD_EXP 117
39637: PPUSH
39638: LD_VAR 0 6
39642: PPUSH
39643: LD_EXP 117
39647: PUSH
39648: LD_VAR 0 6
39652: ARRAY
39653: PPUSH
39654: LD_VAR 0 5
39658: PPUSH
39659: CALL_OW 3
39663: PPUSH
39664: CALL_OW 1
39668: ST_TO_ADDR
// exit ;
39669: POP
39670: POP
39671: GO 39864
// end ; end ;
39673: GO 39513
39675: POP
39676: POP
// for i := minerMinesList [ index ] downto 1 do
39677: LD_ADDR_VAR 0 5
39681: PUSH
39682: DOUBLE
39683: LD_EXP 117
39687: PUSH
39688: LD_VAR 0 6
39692: ARRAY
39693: INC
39694: ST_TO_ADDR
39695: LD_INT 1
39697: PUSH
39698: FOR_DOWNTO
39699: IFFALSE 39862
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
39701: LD_EXP 117
39705: PUSH
39706: LD_VAR 0 6
39710: ARRAY
39711: PUSH
39712: LD_VAR 0 5
39716: ARRAY
39717: PUSH
39718: LD_INT 1
39720: ARRAY
39721: PPUSH
39722: LD_EXP 117
39726: PUSH
39727: LD_VAR 0 6
39731: ARRAY
39732: PUSH
39733: LD_VAR 0 5
39737: ARRAY
39738: PUSH
39739: LD_INT 2
39741: ARRAY
39742: PPUSH
39743: LD_VAR 0 2
39747: PPUSH
39748: LD_VAR 0 3
39752: PPUSH
39753: CALL_OW 298
39757: PUSH
39758: LD_INT 6
39760: LESS
39761: IFFALSE 39860
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
39763: LD_EXP 117
39767: PUSH
39768: LD_VAR 0 6
39772: ARRAY
39773: PUSH
39774: LD_VAR 0 5
39778: ARRAY
39779: PUSH
39780: LD_INT 1
39782: ARRAY
39783: PPUSH
39784: LD_EXP 117
39788: PUSH
39789: LD_VAR 0 6
39793: ARRAY
39794: PUSH
39795: LD_VAR 0 5
39799: ARRAY
39800: PUSH
39801: LD_INT 2
39803: ARRAY
39804: PPUSH
39805: LD_VAR 0 1
39809: PPUSH
39810: CALL_OW 255
39814: PPUSH
39815: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
39819: LD_ADDR_EXP 117
39823: PUSH
39824: LD_EXP 117
39828: PPUSH
39829: LD_VAR 0 6
39833: PPUSH
39834: LD_EXP 117
39838: PUSH
39839: LD_VAR 0 6
39843: ARRAY
39844: PPUSH
39845: LD_VAR 0 5
39849: PPUSH
39850: CALL_OW 3
39854: PPUSH
39855: CALL_OW 1
39859: ST_TO_ADDR
// end ; end ;
39860: GO 39698
39862: POP
39863: POP
// end ;
39864: LD_VAR 0 4
39868: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
39869: LD_INT 0
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
39880: LD_VAR 0 1
39884: PPUSH
39885: CALL_OW 264
39889: PUSH
39890: LD_INT 81
39892: EQUAL
39893: NOT
39894: PUSH
39895: LD_VAR 0 1
39899: PUSH
39900: LD_EXP 116
39904: IN
39905: NOT
39906: OR
39907: IFFALSE 39911
// exit ;
39909: GO 40233
// index := GetElementIndex ( minersList , unit ) ;
39911: LD_ADDR_VAR 0 6
39915: PUSH
39916: LD_EXP 116
39920: PPUSH
39921: LD_VAR 0 1
39925: PPUSH
39926: CALL 45568 0 2
39930: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
39931: LD_ADDR_VAR 0 8
39935: PUSH
39936: LD_EXP 118
39940: PUSH
39941: LD_EXP 117
39945: PUSH
39946: LD_VAR 0 6
39950: ARRAY
39951: MINUS
39952: ST_TO_ADDR
// if not minesFreeAmount then
39953: LD_VAR 0 8
39957: NOT
39958: IFFALSE 39962
// exit ;
39960: GO 40233
// tmp := [ ] ;
39962: LD_ADDR_VAR 0 7
39966: PUSH
39967: EMPTY
39968: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
39969: LD_ADDR_VAR 0 5
39973: PUSH
39974: DOUBLE
39975: LD_INT 1
39977: DEC
39978: ST_TO_ADDR
39979: LD_VAR 0 8
39983: PUSH
39984: FOR_TO
39985: IFFALSE 40180
// begin _d := rand ( 0 , 5 ) ;
39987: LD_ADDR_VAR 0 11
39991: PUSH
39992: LD_INT 0
39994: PPUSH
39995: LD_INT 5
39997: PPUSH
39998: CALL_OW 12
40002: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
40003: LD_ADDR_VAR 0 12
40007: PUSH
40008: LD_INT 2
40010: PPUSH
40011: LD_INT 6
40013: PPUSH
40014: CALL_OW 12
40018: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
40019: LD_ADDR_VAR 0 9
40023: PUSH
40024: LD_VAR 0 2
40028: PPUSH
40029: LD_VAR 0 11
40033: PPUSH
40034: LD_VAR 0 12
40038: PPUSH
40039: CALL_OW 272
40043: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
40044: LD_ADDR_VAR 0 10
40048: PUSH
40049: LD_VAR 0 3
40053: PPUSH
40054: LD_VAR 0 11
40058: PPUSH
40059: LD_VAR 0 12
40063: PPUSH
40064: CALL_OW 273
40068: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
40069: LD_VAR 0 9
40073: PPUSH
40074: LD_VAR 0 10
40078: PPUSH
40079: CALL_OW 488
40083: PUSH
40084: LD_VAR 0 9
40088: PUSH
40089: LD_VAR 0 10
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: PUSH
40098: LD_VAR 0 7
40102: IN
40103: NOT
40104: AND
40105: PUSH
40106: LD_VAR 0 9
40110: PPUSH
40111: LD_VAR 0 10
40115: PPUSH
40116: CALL_OW 458
40120: NOT
40121: AND
40122: IFFALSE 40164
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
40124: LD_ADDR_VAR 0 7
40128: PUSH
40129: LD_VAR 0 7
40133: PPUSH
40134: LD_VAR 0 7
40138: PUSH
40139: LD_INT 1
40141: PLUS
40142: PPUSH
40143: LD_VAR 0 9
40147: PUSH
40148: LD_VAR 0 10
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PPUSH
40157: CALL_OW 1
40161: ST_TO_ADDR
40162: GO 40178
// i := i - 1 ;
40164: LD_ADDR_VAR 0 5
40168: PUSH
40169: LD_VAR 0 5
40173: PUSH
40174: LD_INT 1
40176: MINUS
40177: ST_TO_ADDR
// end ;
40178: GO 39984
40180: POP
40181: POP
// for i in tmp do
40182: LD_ADDR_VAR 0 5
40186: PUSH
40187: LD_VAR 0 7
40191: PUSH
40192: FOR_IN
40193: IFFALSE 40231
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
40195: LD_VAR 0 1
40199: PPUSH
40200: LD_VAR 0 5
40204: PUSH
40205: LD_INT 1
40207: ARRAY
40208: PPUSH
40209: LD_VAR 0 5
40213: PUSH
40214: LD_INT 2
40216: ARRAY
40217: PPUSH
40218: CALL 39177 0 3
40222: NOT
40223: IFFALSE 40229
// exit ;
40225: POP
40226: POP
40227: GO 40233
40229: GO 40192
40231: POP
40232: POP
// end ;
40233: LD_VAR 0 4
40237: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
40238: LD_INT 0
40240: PPUSH
40241: PPUSH
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
40246: PPUSH
40247: PPUSH
40248: PPUSH
// if GetClass ( unit ) <> class_sniper then
40249: LD_VAR 0 1
40253: PPUSH
40254: CALL_OW 257
40258: PUSH
40259: LD_INT 5
40261: NONEQUAL
40262: IFFALSE 40266
// exit ;
40264: GO 40732
// dist := 8 ;
40266: LD_ADDR_VAR 0 5
40270: PUSH
40271: LD_INT 8
40273: ST_TO_ADDR
// viewRange := 12 ;
40274: LD_ADDR_VAR 0 8
40278: PUSH
40279: LD_INT 12
40281: ST_TO_ADDR
// side := GetSide ( unit ) ;
40282: LD_ADDR_VAR 0 6
40286: PUSH
40287: LD_VAR 0 1
40291: PPUSH
40292: CALL_OW 255
40296: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
40297: LD_INT 61
40299: PPUSH
40300: LD_VAR 0 6
40304: PPUSH
40305: CALL_OW 321
40309: PUSH
40310: LD_INT 2
40312: EQUAL
40313: IFFALSE 40323
// viewRange := 16 ;
40315: LD_ADDR_VAR 0 8
40319: PUSH
40320: LD_INT 16
40322: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
40323: LD_VAR 0 1
40327: PPUSH
40328: LD_VAR 0 2
40332: PPUSH
40333: LD_VAR 0 3
40337: PPUSH
40338: CALL_OW 297
40342: PUSH
40343: LD_VAR 0 5
40347: GREATER
40348: IFFALSE 40427
// begin ComMoveXY ( unit , x , y ) ;
40350: LD_VAR 0 1
40354: PPUSH
40355: LD_VAR 0 2
40359: PPUSH
40360: LD_VAR 0 3
40364: PPUSH
40365: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
40369: LD_INT 35
40371: PPUSH
40372: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
40376: LD_VAR 0 1
40380: PPUSH
40381: LD_VAR 0 2
40385: PPUSH
40386: LD_VAR 0 3
40390: PPUSH
40391: CALL 77329 0 3
40395: NOT
40396: IFFALSE 40400
// exit ;
40398: GO 40732
// until GetDistUnitXY ( unit , x , y ) < dist ;
40400: LD_VAR 0 1
40404: PPUSH
40405: LD_VAR 0 2
40409: PPUSH
40410: LD_VAR 0 3
40414: PPUSH
40415: CALL_OW 297
40419: PUSH
40420: LD_VAR 0 5
40424: LESS
40425: IFFALSE 40369
// end ; ComTurnXY ( unit , x , y ) ;
40427: LD_VAR 0 1
40431: PPUSH
40432: LD_VAR 0 2
40436: PPUSH
40437: LD_VAR 0 3
40441: PPUSH
40442: CALL_OW 118
// repeat if Multiplayer then
40446: LD_OWVAR 4
40450: IFFALSE 40461
// wait ( 35 ) else
40452: LD_INT 35
40454: PPUSH
40455: CALL_OW 67
40459: GO 40468
// wait ( 5 ) ;
40461: LD_INT 5
40463: PPUSH
40464: CALL_OW 67
// _d := GetDir ( unit ) ;
40468: LD_ADDR_VAR 0 11
40472: PUSH
40473: LD_VAR 0 1
40477: PPUSH
40478: CALL_OW 254
40482: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
40483: LD_ADDR_VAR 0 7
40487: PUSH
40488: LD_VAR 0 1
40492: PPUSH
40493: CALL_OW 250
40497: PPUSH
40498: LD_VAR 0 1
40502: PPUSH
40503: CALL_OW 251
40507: PPUSH
40508: LD_VAR 0 2
40512: PPUSH
40513: LD_VAR 0 3
40517: PPUSH
40518: CALL 79937 0 4
40522: ST_TO_ADDR
// until dir = _d ;
40523: LD_VAR 0 7
40527: PUSH
40528: LD_VAR 0 11
40532: EQUAL
40533: IFFALSE 40446
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
40535: LD_ADDR_VAR 0 9
40539: PUSH
40540: LD_VAR 0 1
40544: PPUSH
40545: CALL_OW 250
40549: PPUSH
40550: LD_VAR 0 7
40554: PPUSH
40555: LD_VAR 0 5
40559: PPUSH
40560: CALL_OW 272
40564: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
40565: LD_ADDR_VAR 0 10
40569: PUSH
40570: LD_VAR 0 1
40574: PPUSH
40575: CALL_OW 251
40579: PPUSH
40580: LD_VAR 0 7
40584: PPUSH
40585: LD_VAR 0 5
40589: PPUSH
40590: CALL_OW 273
40594: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
40595: LD_VAR 0 9
40599: PPUSH
40600: LD_VAR 0 10
40604: PPUSH
40605: CALL_OW 488
40609: NOT
40610: IFFALSE 40614
// exit ;
40612: GO 40732
// ComAnimCustom ( unit , 1 ) ;
40614: LD_VAR 0 1
40618: PPUSH
40619: LD_INT 1
40621: PPUSH
40622: CALL_OW 592
// p := 0 ;
40626: LD_ADDR_VAR 0 12
40630: PUSH
40631: LD_INT 0
40633: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
40634: LD_VAR 0 9
40638: PPUSH
40639: LD_VAR 0 10
40643: PPUSH
40644: LD_VAR 0 6
40648: PPUSH
40649: LD_VAR 0 8
40653: PPUSH
40654: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
40658: LD_INT 35
40660: PPUSH
40661: CALL_OW 67
// p := Inc ( p ) ;
40665: LD_ADDR_VAR 0 12
40669: PUSH
40670: LD_VAR 0 12
40674: PPUSH
40675: CALL 79893 0 1
40679: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
40680: LD_VAR 0 12
40684: PUSH
40685: LD_INT 3
40687: EQUAL
40688: PUSH
40689: LD_VAR 0 1
40693: PPUSH
40694: CALL_OW 302
40698: NOT
40699: OR
40700: PUSH
40701: LD_VAR 0 1
40705: PPUSH
40706: CALL_OW 301
40710: OR
40711: IFFALSE 40658
// RemoveSeeing ( _x , _y , side ) ;
40713: LD_VAR 0 9
40717: PPUSH
40718: LD_VAR 0 10
40722: PPUSH
40723: LD_VAR 0 6
40727: PPUSH
40728: CALL_OW 331
// end ; end_of_file
40732: LD_VAR 0 4
40736: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
40737: LD_INT 0
40739: PPUSH
40740: PPUSH
// if exist_mode then
40741: LD_VAR 0 2
40745: IFFALSE 40791
// begin unit := CreateCharacter ( prefix & ident ) ;
40747: LD_ADDR_VAR 0 5
40751: PUSH
40752: LD_VAR 0 3
40756: PUSH
40757: LD_VAR 0 1
40761: STR
40762: PPUSH
40763: CALL_OW 34
40767: ST_TO_ADDR
// if unit then
40768: LD_VAR 0 5
40772: IFFALSE 40789
// DeleteCharacters ( prefix & ident ) ;
40774: LD_VAR 0 3
40778: PUSH
40779: LD_VAR 0 1
40783: STR
40784: PPUSH
40785: CALL_OW 40
// end else
40789: GO 40806
// unit := NewCharacter ( ident ) ;
40791: LD_ADDR_VAR 0 5
40795: PUSH
40796: LD_VAR 0 1
40800: PPUSH
40801: CALL_OW 25
40805: ST_TO_ADDR
// result := unit ;
40806: LD_ADDR_VAR 0 4
40810: PUSH
40811: LD_VAR 0 5
40815: ST_TO_ADDR
// end ;
40816: LD_VAR 0 4
40820: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
40821: LD_INT 0
40823: PPUSH
40824: PPUSH
// if exist_mode then
40825: LD_VAR 0 2
40829: IFFALSE 40854
// unit := CreateCharacter ( prefix & ident ) else
40831: LD_ADDR_VAR 0 5
40835: PUSH
40836: LD_VAR 0 3
40840: PUSH
40841: LD_VAR 0 1
40845: STR
40846: PPUSH
40847: CALL_OW 34
40851: ST_TO_ADDR
40852: GO 40869
// unit := NewCharacter ( ident ) ;
40854: LD_ADDR_VAR 0 5
40858: PUSH
40859: LD_VAR 0 1
40863: PPUSH
40864: CALL_OW 25
40868: ST_TO_ADDR
// result := unit ;
40869: LD_ADDR_VAR 0 4
40873: PUSH
40874: LD_VAR 0 5
40878: ST_TO_ADDR
// end ;
40879: LD_VAR 0 4
40883: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
40884: LD_INT 0
40886: PPUSH
40887: PPUSH
// if not side or not nation then
40888: LD_VAR 0 1
40892: NOT
40893: PUSH
40894: LD_VAR 0 2
40898: NOT
40899: OR
40900: IFFALSE 40904
// exit ;
40902: GO 41672
// case nation of nation_american :
40904: LD_VAR 0 2
40908: PUSH
40909: LD_INT 1
40911: DOUBLE
40912: EQUAL
40913: IFTRUE 40917
40915: GO 41131
40917: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
40918: LD_ADDR_VAR 0 4
40922: PUSH
40923: LD_INT 35
40925: PUSH
40926: LD_INT 45
40928: PUSH
40929: LD_INT 46
40931: PUSH
40932: LD_INT 47
40934: PUSH
40935: LD_INT 82
40937: PUSH
40938: LD_INT 83
40940: PUSH
40941: LD_INT 84
40943: PUSH
40944: LD_INT 85
40946: PUSH
40947: LD_INT 86
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: LD_INT 2
40955: PUSH
40956: LD_INT 6
40958: PUSH
40959: LD_INT 15
40961: PUSH
40962: LD_INT 16
40964: PUSH
40965: LD_INT 7
40967: PUSH
40968: LD_INT 12
40970: PUSH
40971: LD_INT 13
40973: PUSH
40974: LD_INT 10
40976: PUSH
40977: LD_INT 14
40979: PUSH
40980: LD_INT 20
40982: PUSH
40983: LD_INT 21
40985: PUSH
40986: LD_INT 22
40988: PUSH
40989: LD_INT 25
40991: PUSH
40992: LD_INT 32
40994: PUSH
40995: LD_INT 27
40997: PUSH
40998: LD_INT 36
41000: PUSH
41001: LD_INT 69
41003: PUSH
41004: LD_INT 39
41006: PUSH
41007: LD_INT 34
41009: PUSH
41010: LD_INT 40
41012: PUSH
41013: LD_INT 48
41015: PUSH
41016: LD_INT 49
41018: PUSH
41019: LD_INT 50
41021: PUSH
41022: LD_INT 51
41024: PUSH
41025: LD_INT 52
41027: PUSH
41028: LD_INT 53
41030: PUSH
41031: LD_INT 54
41033: PUSH
41034: LD_INT 55
41036: PUSH
41037: LD_INT 56
41039: PUSH
41040: LD_INT 57
41042: PUSH
41043: LD_INT 58
41045: PUSH
41046: LD_INT 59
41048: PUSH
41049: LD_INT 60
41051: PUSH
41052: LD_INT 61
41054: PUSH
41055: LD_INT 62
41057: PUSH
41058: LD_INT 80
41060: PUSH
41061: LD_INT 82
41063: PUSH
41064: LD_INT 83
41066: PUSH
41067: LD_INT 84
41069: PUSH
41070: LD_INT 85
41072: PUSH
41073: LD_INT 86
41075: PUSH
41076: EMPTY
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: ST_TO_ADDR
41129: GO 41596
41131: LD_INT 2
41133: DOUBLE
41134: EQUAL
41135: IFTRUE 41139
41137: GO 41365
41139: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
41140: LD_ADDR_VAR 0 4
41144: PUSH
41145: LD_INT 35
41147: PUSH
41148: LD_INT 45
41150: PUSH
41151: LD_INT 46
41153: PUSH
41154: LD_INT 47
41156: PUSH
41157: LD_INT 82
41159: PUSH
41160: LD_INT 83
41162: PUSH
41163: LD_INT 84
41165: PUSH
41166: LD_INT 85
41168: PUSH
41169: LD_INT 87
41171: PUSH
41172: LD_INT 70
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: LD_INT 11
41180: PUSH
41181: LD_INT 3
41183: PUSH
41184: LD_INT 4
41186: PUSH
41187: LD_INT 5
41189: PUSH
41190: LD_INT 6
41192: PUSH
41193: LD_INT 15
41195: PUSH
41196: LD_INT 18
41198: PUSH
41199: LD_INT 7
41201: PUSH
41202: LD_INT 17
41204: PUSH
41205: LD_INT 8
41207: PUSH
41208: LD_INT 20
41210: PUSH
41211: LD_INT 21
41213: PUSH
41214: LD_INT 22
41216: PUSH
41217: LD_INT 72
41219: PUSH
41220: LD_INT 26
41222: PUSH
41223: LD_INT 69
41225: PUSH
41226: LD_INT 39
41228: PUSH
41229: LD_INT 40
41231: PUSH
41232: LD_INT 41
41234: PUSH
41235: LD_INT 42
41237: PUSH
41238: LD_INT 43
41240: PUSH
41241: LD_INT 48
41243: PUSH
41244: LD_INT 49
41246: PUSH
41247: LD_INT 50
41249: PUSH
41250: LD_INT 51
41252: PUSH
41253: LD_INT 52
41255: PUSH
41256: LD_INT 53
41258: PUSH
41259: LD_INT 54
41261: PUSH
41262: LD_INT 55
41264: PUSH
41265: LD_INT 56
41267: PUSH
41268: LD_INT 60
41270: PUSH
41271: LD_INT 61
41273: PUSH
41274: LD_INT 62
41276: PUSH
41277: LD_INT 66
41279: PUSH
41280: LD_INT 67
41282: PUSH
41283: LD_INT 68
41285: PUSH
41286: LD_INT 81
41288: PUSH
41289: LD_INT 82
41291: PUSH
41292: LD_INT 83
41294: PUSH
41295: LD_INT 84
41297: PUSH
41298: LD_INT 85
41300: PUSH
41301: LD_INT 87
41303: PUSH
41304: LD_INT 88
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: LIST
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: LIST
41352: LIST
41353: LIST
41354: LIST
41355: LIST
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: ST_TO_ADDR
41363: GO 41596
41365: LD_INT 3
41367: DOUBLE
41368: EQUAL
41369: IFTRUE 41373
41371: GO 41595
41373: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
41374: LD_ADDR_VAR 0 4
41378: PUSH
41379: LD_INT 46
41381: PUSH
41382: LD_INT 47
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: LD_INT 82
41393: PUSH
41394: LD_INT 83
41396: PUSH
41397: LD_INT 84
41399: PUSH
41400: LD_INT 85
41402: PUSH
41403: LD_INT 86
41405: PUSH
41406: LD_INT 11
41408: PUSH
41409: LD_INT 9
41411: PUSH
41412: LD_INT 20
41414: PUSH
41415: LD_INT 19
41417: PUSH
41418: LD_INT 21
41420: PUSH
41421: LD_INT 24
41423: PUSH
41424: LD_INT 22
41426: PUSH
41427: LD_INT 25
41429: PUSH
41430: LD_INT 28
41432: PUSH
41433: LD_INT 29
41435: PUSH
41436: LD_INT 30
41438: PUSH
41439: LD_INT 31
41441: PUSH
41442: LD_INT 37
41444: PUSH
41445: LD_INT 38
41447: PUSH
41448: LD_INT 32
41450: PUSH
41451: LD_INT 27
41453: PUSH
41454: LD_INT 33
41456: PUSH
41457: LD_INT 69
41459: PUSH
41460: LD_INT 39
41462: PUSH
41463: LD_INT 34
41465: PUSH
41466: LD_INT 40
41468: PUSH
41469: LD_INT 71
41471: PUSH
41472: LD_INT 23
41474: PUSH
41475: LD_INT 44
41477: PUSH
41478: LD_INT 48
41480: PUSH
41481: LD_INT 49
41483: PUSH
41484: LD_INT 50
41486: PUSH
41487: LD_INT 51
41489: PUSH
41490: LD_INT 52
41492: PUSH
41493: LD_INT 53
41495: PUSH
41496: LD_INT 54
41498: PUSH
41499: LD_INT 55
41501: PUSH
41502: LD_INT 56
41504: PUSH
41505: LD_INT 57
41507: PUSH
41508: LD_INT 58
41510: PUSH
41511: LD_INT 59
41513: PUSH
41514: LD_INT 63
41516: PUSH
41517: LD_INT 64
41519: PUSH
41520: LD_INT 65
41522: PUSH
41523: LD_INT 82
41525: PUSH
41526: LD_INT 83
41528: PUSH
41529: LD_INT 84
41531: PUSH
41532: LD_INT 85
41534: PUSH
41535: LD_INT 86
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: ST_TO_ADDR
41593: GO 41596
41595: POP
// if state > - 1 and state < 3 then
41596: LD_VAR 0 3
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: GREATER
41605: PUSH
41606: LD_VAR 0 3
41610: PUSH
41611: LD_INT 3
41613: LESS
41614: AND
41615: IFFALSE 41672
// for i in result do
41617: LD_ADDR_VAR 0 5
41621: PUSH
41622: LD_VAR 0 4
41626: PUSH
41627: FOR_IN
41628: IFFALSE 41670
// if GetTech ( i , side ) <> state then
41630: LD_VAR 0 5
41634: PPUSH
41635: LD_VAR 0 1
41639: PPUSH
41640: CALL_OW 321
41644: PUSH
41645: LD_VAR 0 3
41649: NONEQUAL
41650: IFFALSE 41668
// result := result diff i ;
41652: LD_ADDR_VAR 0 4
41656: PUSH
41657: LD_VAR 0 4
41661: PUSH
41662: LD_VAR 0 5
41666: DIFF
41667: ST_TO_ADDR
41668: GO 41627
41670: POP
41671: POP
// end ;
41672: LD_VAR 0 4
41676: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
41677: LD_INT 0
41679: PPUSH
41680: PPUSH
41681: PPUSH
// result := true ;
41682: LD_ADDR_VAR 0 3
41686: PUSH
41687: LD_INT 1
41689: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
41690: LD_ADDR_VAR 0 5
41694: PUSH
41695: LD_VAR 0 2
41699: PPUSH
41700: CALL_OW 480
41704: ST_TO_ADDR
// if not tmp then
41705: LD_VAR 0 5
41709: NOT
41710: IFFALSE 41714
// exit ;
41712: GO 41763
// for i in tmp do
41714: LD_ADDR_VAR 0 4
41718: PUSH
41719: LD_VAR 0 5
41723: PUSH
41724: FOR_IN
41725: IFFALSE 41761
// if GetTech ( i , side ) <> state_researched then
41727: LD_VAR 0 4
41731: PPUSH
41732: LD_VAR 0 1
41736: PPUSH
41737: CALL_OW 321
41741: PUSH
41742: LD_INT 2
41744: NONEQUAL
41745: IFFALSE 41759
// begin result := false ;
41747: LD_ADDR_VAR 0 3
41751: PUSH
41752: LD_INT 0
41754: ST_TO_ADDR
// exit ;
41755: POP
41756: POP
41757: GO 41763
// end ;
41759: GO 41724
41761: POP
41762: POP
// end ;
41763: LD_VAR 0 3
41767: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
41768: LD_INT 0
41770: PPUSH
41771: PPUSH
41772: PPUSH
41773: PPUSH
41774: PPUSH
41775: PPUSH
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
41782: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
41783: LD_VAR 0 1
41787: NOT
41788: PUSH
41789: LD_VAR 0 1
41793: PPUSH
41794: CALL_OW 257
41798: PUSH
41799: LD_INT 9
41801: NONEQUAL
41802: OR
41803: IFFALSE 41807
// exit ;
41805: GO 42380
// side := GetSide ( unit ) ;
41807: LD_ADDR_VAR 0 9
41811: PUSH
41812: LD_VAR 0 1
41816: PPUSH
41817: CALL_OW 255
41821: ST_TO_ADDR
// tech_space := tech_spacanom ;
41822: LD_ADDR_VAR 0 12
41826: PUSH
41827: LD_INT 29
41829: ST_TO_ADDR
// tech_time := tech_taurad ;
41830: LD_ADDR_VAR 0 13
41834: PUSH
41835: LD_INT 28
41837: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
41838: LD_ADDR_VAR 0 11
41842: PUSH
41843: LD_VAR 0 1
41847: PPUSH
41848: CALL_OW 310
41852: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
41853: LD_VAR 0 11
41857: PPUSH
41858: CALL_OW 247
41862: PUSH
41863: LD_INT 2
41865: EQUAL
41866: IFFALSE 41870
// exit ;
41868: GO 42380
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41870: LD_ADDR_VAR 0 8
41874: PUSH
41875: LD_INT 81
41877: PUSH
41878: LD_VAR 0 9
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 3
41889: PUSH
41890: LD_INT 21
41892: PUSH
41893: LD_INT 3
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PPUSH
41908: CALL_OW 69
41912: ST_TO_ADDR
// if not tmp then
41913: LD_VAR 0 8
41917: NOT
41918: IFFALSE 41922
// exit ;
41920: GO 42380
// if in_unit then
41922: LD_VAR 0 11
41926: IFFALSE 41950
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
41928: LD_ADDR_VAR 0 10
41932: PUSH
41933: LD_VAR 0 8
41937: PPUSH
41938: LD_VAR 0 11
41942: PPUSH
41943: CALL_OW 74
41947: ST_TO_ADDR
41948: GO 41970
// enemy := NearestUnitToUnit ( tmp , unit ) ;
41950: LD_ADDR_VAR 0 10
41954: PUSH
41955: LD_VAR 0 8
41959: PPUSH
41960: LD_VAR 0 1
41964: PPUSH
41965: CALL_OW 74
41969: ST_TO_ADDR
// if not enemy then
41970: LD_VAR 0 10
41974: NOT
41975: IFFALSE 41979
// exit ;
41977: GO 42380
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
41979: LD_VAR 0 11
41983: PUSH
41984: LD_VAR 0 11
41988: PPUSH
41989: LD_VAR 0 10
41993: PPUSH
41994: CALL_OW 296
41998: PUSH
41999: LD_INT 13
42001: GREATER
42002: AND
42003: PUSH
42004: LD_VAR 0 1
42008: PPUSH
42009: LD_VAR 0 10
42013: PPUSH
42014: CALL_OW 296
42018: PUSH
42019: LD_INT 12
42021: GREATER
42022: OR
42023: IFFALSE 42027
// exit ;
42025: GO 42380
// missile := [ 1 ] ;
42027: LD_ADDR_VAR 0 14
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: EMPTY
42036: LIST
42037: ST_TO_ADDR
// if Researched ( side , tech_space ) then
42038: LD_VAR 0 9
42042: PPUSH
42043: LD_VAR 0 12
42047: PPUSH
42048: CALL_OW 325
42052: IFFALSE 42081
// missile := Replace ( missile , missile + 1 , 2 ) ;
42054: LD_ADDR_VAR 0 14
42058: PUSH
42059: LD_VAR 0 14
42063: PPUSH
42064: LD_VAR 0 14
42068: PUSH
42069: LD_INT 1
42071: PLUS
42072: PPUSH
42073: LD_INT 2
42075: PPUSH
42076: CALL_OW 1
42080: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
42081: LD_VAR 0 9
42085: PPUSH
42086: LD_VAR 0 13
42090: PPUSH
42091: CALL_OW 325
42095: PUSH
42096: LD_VAR 0 10
42100: PPUSH
42101: CALL_OW 255
42105: PPUSH
42106: LD_VAR 0 13
42110: PPUSH
42111: CALL_OW 325
42115: NOT
42116: AND
42117: IFFALSE 42146
// missile := Replace ( missile , missile + 1 , 3 ) ;
42119: LD_ADDR_VAR 0 14
42123: PUSH
42124: LD_VAR 0 14
42128: PPUSH
42129: LD_VAR 0 14
42133: PUSH
42134: LD_INT 1
42136: PLUS
42137: PPUSH
42138: LD_INT 3
42140: PPUSH
42141: CALL_OW 1
42145: ST_TO_ADDR
// if missile < 2 then
42146: LD_VAR 0 14
42150: PUSH
42151: LD_INT 2
42153: LESS
42154: IFFALSE 42158
// exit ;
42156: GO 42380
// x := GetX ( enemy ) ;
42158: LD_ADDR_VAR 0 4
42162: PUSH
42163: LD_VAR 0 10
42167: PPUSH
42168: CALL_OW 250
42172: ST_TO_ADDR
// y := GetY ( enemy ) ;
42173: LD_ADDR_VAR 0 5
42177: PUSH
42178: LD_VAR 0 10
42182: PPUSH
42183: CALL_OW 251
42187: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
42188: LD_ADDR_VAR 0 6
42192: PUSH
42193: LD_VAR 0 4
42197: PUSH
42198: LD_INT 1
42200: NEG
42201: PPUSH
42202: LD_INT 1
42204: PPUSH
42205: CALL_OW 12
42209: PLUS
42210: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
42211: LD_ADDR_VAR 0 7
42215: PUSH
42216: LD_VAR 0 5
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PPUSH
42225: LD_INT 1
42227: PPUSH
42228: CALL_OW 12
42232: PLUS
42233: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42234: LD_VAR 0 6
42238: PPUSH
42239: LD_VAR 0 7
42243: PPUSH
42244: CALL_OW 488
42248: NOT
42249: IFFALSE 42271
// begin _x := x ;
42251: LD_ADDR_VAR 0 6
42255: PUSH
42256: LD_VAR 0 4
42260: ST_TO_ADDR
// _y := y ;
42261: LD_ADDR_VAR 0 7
42265: PUSH
42266: LD_VAR 0 5
42270: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
42271: LD_ADDR_VAR 0 3
42275: PUSH
42276: LD_INT 1
42278: PPUSH
42279: LD_VAR 0 14
42283: PPUSH
42284: CALL_OW 12
42288: ST_TO_ADDR
// case i of 1 :
42289: LD_VAR 0 3
42293: PUSH
42294: LD_INT 1
42296: DOUBLE
42297: EQUAL
42298: IFTRUE 42302
42300: GO 42319
42302: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
42303: LD_VAR 0 1
42307: PPUSH
42308: LD_VAR 0 10
42312: PPUSH
42313: CALL_OW 115
42317: GO 42380
42319: LD_INT 2
42321: DOUBLE
42322: EQUAL
42323: IFTRUE 42327
42325: GO 42349
42327: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
42328: LD_VAR 0 1
42332: PPUSH
42333: LD_VAR 0 6
42337: PPUSH
42338: LD_VAR 0 7
42342: PPUSH
42343: CALL_OW 153
42347: GO 42380
42349: LD_INT 3
42351: DOUBLE
42352: EQUAL
42353: IFTRUE 42357
42355: GO 42379
42357: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
42358: LD_VAR 0 1
42362: PPUSH
42363: LD_VAR 0 6
42367: PPUSH
42368: LD_VAR 0 7
42372: PPUSH
42373: CALL_OW 154
42377: GO 42380
42379: POP
// end ;
42380: LD_VAR 0 2
42384: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
42385: LD_INT 0
42387: PPUSH
42388: PPUSH
42389: PPUSH
42390: PPUSH
42391: PPUSH
42392: PPUSH
// if not unit or not building then
42393: LD_VAR 0 1
42397: NOT
42398: PUSH
42399: LD_VAR 0 2
42403: NOT
42404: OR
42405: IFFALSE 42409
// exit ;
42407: GO 42567
// x := GetX ( building ) ;
42409: LD_ADDR_VAR 0 5
42413: PUSH
42414: LD_VAR 0 2
42418: PPUSH
42419: CALL_OW 250
42423: ST_TO_ADDR
// y := GetY ( building ) ;
42424: LD_ADDR_VAR 0 6
42428: PUSH
42429: LD_VAR 0 2
42433: PPUSH
42434: CALL_OW 251
42438: ST_TO_ADDR
// for i = 0 to 5 do
42439: LD_ADDR_VAR 0 4
42443: PUSH
42444: DOUBLE
42445: LD_INT 0
42447: DEC
42448: ST_TO_ADDR
42449: LD_INT 5
42451: PUSH
42452: FOR_TO
42453: IFFALSE 42565
// begin _x := ShiftX ( x , i , 3 ) ;
42455: LD_ADDR_VAR 0 7
42459: PUSH
42460: LD_VAR 0 5
42464: PPUSH
42465: LD_VAR 0 4
42469: PPUSH
42470: LD_INT 3
42472: PPUSH
42473: CALL_OW 272
42477: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
42478: LD_ADDR_VAR 0 8
42482: PUSH
42483: LD_VAR 0 6
42487: PPUSH
42488: LD_VAR 0 4
42492: PPUSH
42493: LD_INT 3
42495: PPUSH
42496: CALL_OW 273
42500: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
42501: LD_VAR 0 7
42505: PPUSH
42506: LD_VAR 0 8
42510: PPUSH
42511: CALL_OW 488
42515: NOT
42516: IFFALSE 42520
// continue ;
42518: GO 42452
// if HexInfo ( _x , _y ) = 0 then
42520: LD_VAR 0 7
42524: PPUSH
42525: LD_VAR 0 8
42529: PPUSH
42530: CALL_OW 428
42534: PUSH
42535: LD_INT 0
42537: EQUAL
42538: IFFALSE 42563
// begin ComMoveXY ( unit , _x , _y ) ;
42540: LD_VAR 0 1
42544: PPUSH
42545: LD_VAR 0 7
42549: PPUSH
42550: LD_VAR 0 8
42554: PPUSH
42555: CALL_OW 111
// exit ;
42559: POP
42560: POP
42561: GO 42567
// end ; end ;
42563: GO 42452
42565: POP
42566: POP
// end ;
42567: LD_VAR 0 3
42571: RET
// export function ScanBase ( side , base_area ) ; begin
42572: LD_INT 0
42574: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
42575: LD_ADDR_VAR 0 3
42579: PUSH
42580: LD_VAR 0 2
42584: PPUSH
42585: LD_INT 81
42587: PUSH
42588: LD_VAR 0 1
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PPUSH
42597: CALL_OW 70
42601: ST_TO_ADDR
// end ;
42602: LD_VAR 0 3
42606: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
42607: LD_INT 0
42609: PPUSH
42610: PPUSH
42611: PPUSH
42612: PPUSH
// result := false ;
42613: LD_ADDR_VAR 0 2
42617: PUSH
42618: LD_INT 0
42620: ST_TO_ADDR
// side := GetSide ( unit ) ;
42621: LD_ADDR_VAR 0 3
42625: PUSH
42626: LD_VAR 0 1
42630: PPUSH
42631: CALL_OW 255
42635: ST_TO_ADDR
// nat := GetNation ( unit ) ;
42636: LD_ADDR_VAR 0 4
42640: PUSH
42641: LD_VAR 0 1
42645: PPUSH
42646: CALL_OW 248
42650: ST_TO_ADDR
// case nat of 1 :
42651: LD_VAR 0 4
42655: PUSH
42656: LD_INT 1
42658: DOUBLE
42659: EQUAL
42660: IFTRUE 42664
42662: GO 42675
42664: POP
// tech := tech_lassight ; 2 :
42665: LD_ADDR_VAR 0 5
42669: PUSH
42670: LD_INT 12
42672: ST_TO_ADDR
42673: GO 42714
42675: LD_INT 2
42677: DOUBLE
42678: EQUAL
42679: IFTRUE 42683
42681: GO 42694
42683: POP
// tech := tech_mortar ; 3 :
42684: LD_ADDR_VAR 0 5
42688: PUSH
42689: LD_INT 41
42691: ST_TO_ADDR
42692: GO 42714
42694: LD_INT 3
42696: DOUBLE
42697: EQUAL
42698: IFTRUE 42702
42700: GO 42713
42702: POP
// tech := tech_bazooka ; end ;
42703: LD_ADDR_VAR 0 5
42707: PUSH
42708: LD_INT 44
42710: ST_TO_ADDR
42711: GO 42714
42713: POP
// if Researched ( side , tech ) then
42714: LD_VAR 0 3
42718: PPUSH
42719: LD_VAR 0 5
42723: PPUSH
42724: CALL_OW 325
42728: IFFALSE 42755
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
42730: LD_ADDR_VAR 0 2
42734: PUSH
42735: LD_INT 5
42737: PUSH
42738: LD_INT 8
42740: PUSH
42741: LD_INT 9
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: LIST
42748: PUSH
42749: LD_VAR 0 4
42753: ARRAY
42754: ST_TO_ADDR
// end ;
42755: LD_VAR 0 2
42759: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
42760: LD_INT 0
42762: PPUSH
42763: PPUSH
42764: PPUSH
// if not mines then
42765: LD_VAR 0 2
42769: NOT
42770: IFFALSE 42774
// exit ;
42772: GO 42918
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
42774: LD_ADDR_VAR 0 5
42778: PUSH
42779: LD_INT 81
42781: PUSH
42782: LD_VAR 0 1
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 3
42793: PUSH
42794: LD_INT 21
42796: PUSH
42797: LD_INT 3
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PPUSH
42812: CALL_OW 69
42816: ST_TO_ADDR
// for i in mines do
42817: LD_ADDR_VAR 0 4
42821: PUSH
42822: LD_VAR 0 2
42826: PUSH
42827: FOR_IN
42828: IFFALSE 42916
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
42830: LD_VAR 0 4
42834: PUSH
42835: LD_INT 1
42837: ARRAY
42838: PPUSH
42839: LD_VAR 0 4
42843: PUSH
42844: LD_INT 2
42846: ARRAY
42847: PPUSH
42848: CALL_OW 458
42852: NOT
42853: IFFALSE 42857
// continue ;
42855: GO 42827
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
42857: LD_VAR 0 4
42861: PUSH
42862: LD_INT 1
42864: ARRAY
42865: PPUSH
42866: LD_VAR 0 4
42870: PUSH
42871: LD_INT 2
42873: ARRAY
42874: PPUSH
42875: CALL_OW 428
42879: PUSH
42880: LD_VAR 0 5
42884: IN
42885: IFFALSE 42914
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
42887: LD_VAR 0 4
42891: PUSH
42892: LD_INT 1
42894: ARRAY
42895: PPUSH
42896: LD_VAR 0 4
42900: PUSH
42901: LD_INT 2
42903: ARRAY
42904: PPUSH
42905: LD_VAR 0 1
42909: PPUSH
42910: CALL_OW 456
// end ;
42914: GO 42827
42916: POP
42917: POP
// end ;
42918: LD_VAR 0 3
42922: RET
// export function Count ( array ) ; begin
42923: LD_INT 0
42925: PPUSH
// result := array + 0 ;
42926: LD_ADDR_VAR 0 2
42930: PUSH
42931: LD_VAR 0 1
42935: PUSH
42936: LD_INT 0
42938: PLUS
42939: ST_TO_ADDR
// end ;
42940: LD_VAR 0 2
42944: RET
// export function IsEmpty ( building ) ; begin
42945: LD_INT 0
42947: PPUSH
// if not building then
42948: LD_VAR 0 1
42952: NOT
42953: IFFALSE 42957
// exit ;
42955: GO 43000
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
42957: LD_ADDR_VAR 0 2
42961: PUSH
42962: LD_VAR 0 1
42966: PUSH
42967: LD_INT 22
42969: PUSH
42970: LD_VAR 0 1
42974: PPUSH
42975: CALL_OW 255
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 58
42986: PUSH
42987: EMPTY
42988: LIST
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PPUSH
42994: CALL_OW 69
42998: IN
42999: ST_TO_ADDR
// end ;
43000: LD_VAR 0 2
43004: RET
// export function IsNotFull ( building ) ; var places ; begin
43005: LD_INT 0
43007: PPUSH
43008: PPUSH
// if not building then
43009: LD_VAR 0 1
43013: NOT
43014: IFFALSE 43018
// exit ;
43016: GO 43046
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
43018: LD_ADDR_VAR 0 2
43022: PUSH
43023: LD_VAR 0 1
43027: PPUSH
43028: LD_INT 3
43030: PUSH
43031: LD_INT 62
43033: PUSH
43034: EMPTY
43035: LIST
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PPUSH
43041: CALL_OW 72
43045: ST_TO_ADDR
// end ;
43046: LD_VAR 0 2
43050: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
43051: LD_INT 0
43053: PPUSH
43054: PPUSH
43055: PPUSH
43056: PPUSH
// tmp := [ ] ;
43057: LD_ADDR_VAR 0 3
43061: PUSH
43062: EMPTY
43063: ST_TO_ADDR
// list := [ ] ;
43064: LD_ADDR_VAR 0 5
43068: PUSH
43069: EMPTY
43070: ST_TO_ADDR
// for i = 16 to 25 do
43071: LD_ADDR_VAR 0 4
43075: PUSH
43076: DOUBLE
43077: LD_INT 16
43079: DEC
43080: ST_TO_ADDR
43081: LD_INT 25
43083: PUSH
43084: FOR_TO
43085: IFFALSE 43158
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
43087: LD_ADDR_VAR 0 3
43091: PUSH
43092: LD_VAR 0 3
43096: PUSH
43097: LD_INT 22
43099: PUSH
43100: LD_VAR 0 1
43104: PPUSH
43105: CALL_OW 255
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 91
43116: PUSH
43117: LD_VAR 0 1
43121: PUSH
43122: LD_INT 6
43124: PUSH
43125: EMPTY
43126: LIST
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 30
43132: PUSH
43133: LD_VAR 0 4
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: LIST
43146: PUSH
43147: EMPTY
43148: LIST
43149: PPUSH
43150: CALL_OW 69
43154: ADD
43155: ST_TO_ADDR
43156: GO 43084
43158: POP
43159: POP
// for i = 1 to tmp do
43160: LD_ADDR_VAR 0 4
43164: PUSH
43165: DOUBLE
43166: LD_INT 1
43168: DEC
43169: ST_TO_ADDR
43170: LD_VAR 0 3
43174: PUSH
43175: FOR_TO
43176: IFFALSE 43264
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
43178: LD_ADDR_VAR 0 5
43182: PUSH
43183: LD_VAR 0 5
43187: PUSH
43188: LD_VAR 0 3
43192: PUSH
43193: LD_VAR 0 4
43197: ARRAY
43198: PPUSH
43199: CALL_OW 266
43203: PUSH
43204: LD_VAR 0 3
43208: PUSH
43209: LD_VAR 0 4
43213: ARRAY
43214: PPUSH
43215: CALL_OW 250
43219: PUSH
43220: LD_VAR 0 3
43224: PUSH
43225: LD_VAR 0 4
43229: ARRAY
43230: PPUSH
43231: CALL_OW 251
43235: PUSH
43236: LD_VAR 0 3
43240: PUSH
43241: LD_VAR 0 4
43245: ARRAY
43246: PPUSH
43247: CALL_OW 254
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: PUSH
43258: EMPTY
43259: LIST
43260: ADD
43261: ST_TO_ADDR
43262: GO 43175
43264: POP
43265: POP
// result := list ;
43266: LD_ADDR_VAR 0 2
43270: PUSH
43271: LD_VAR 0 5
43275: ST_TO_ADDR
// end ;
43276: LD_VAR 0 2
43280: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
43281: LD_INT 0
43283: PPUSH
43284: PPUSH
43285: PPUSH
43286: PPUSH
43287: PPUSH
43288: PPUSH
43289: PPUSH
// if not factory then
43290: LD_VAR 0 1
43294: NOT
43295: IFFALSE 43299
// exit ;
43297: GO 43892
// if control = control_apeman then
43299: LD_VAR 0 4
43303: PUSH
43304: LD_INT 5
43306: EQUAL
43307: IFFALSE 43416
// begin tmp := UnitsInside ( factory ) ;
43309: LD_ADDR_VAR 0 8
43313: PUSH
43314: LD_VAR 0 1
43318: PPUSH
43319: CALL_OW 313
43323: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
43324: LD_VAR 0 8
43328: PPUSH
43329: LD_INT 25
43331: PUSH
43332: LD_INT 12
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PPUSH
43339: CALL_OW 72
43343: NOT
43344: IFFALSE 43354
// control := control_manual ;
43346: LD_ADDR_VAR 0 4
43350: PUSH
43351: LD_INT 1
43353: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
43354: LD_ADDR_VAR 0 8
43358: PUSH
43359: LD_VAR 0 1
43363: PPUSH
43364: CALL 43051 0 1
43368: ST_TO_ADDR
// if tmp then
43369: LD_VAR 0 8
43373: IFFALSE 43416
// begin for i in tmp do
43375: LD_ADDR_VAR 0 7
43379: PUSH
43380: LD_VAR 0 8
43384: PUSH
43385: FOR_IN
43386: IFFALSE 43414
// if i [ 1 ] = b_ext_radio then
43388: LD_VAR 0 7
43392: PUSH
43393: LD_INT 1
43395: ARRAY
43396: PUSH
43397: LD_INT 22
43399: EQUAL
43400: IFFALSE 43412
// begin control := control_remote ;
43402: LD_ADDR_VAR 0 4
43406: PUSH
43407: LD_INT 2
43409: ST_TO_ADDR
// break ;
43410: GO 43414
// end ;
43412: GO 43385
43414: POP
43415: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43416: LD_VAR 0 1
43420: PPUSH
43421: LD_VAR 0 2
43425: PPUSH
43426: LD_VAR 0 3
43430: PPUSH
43431: LD_VAR 0 4
43435: PPUSH
43436: LD_VAR 0 5
43440: PPUSH
43441: CALL_OW 448
43445: IFFALSE 43480
// begin result := [ chassis , engine , control , weapon ] ;
43447: LD_ADDR_VAR 0 6
43451: PUSH
43452: LD_VAR 0 2
43456: PUSH
43457: LD_VAR 0 3
43461: PUSH
43462: LD_VAR 0 4
43466: PUSH
43467: LD_VAR 0 5
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: ST_TO_ADDR
// exit ;
43478: GO 43892
// end ; _chassis := AvailableChassisList ( factory ) ;
43480: LD_ADDR_VAR 0 9
43484: PUSH
43485: LD_VAR 0 1
43489: PPUSH
43490: CALL_OW 475
43494: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
43495: LD_ADDR_VAR 0 11
43499: PUSH
43500: LD_VAR 0 1
43504: PPUSH
43505: CALL_OW 476
43509: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
43510: LD_ADDR_VAR 0 12
43514: PUSH
43515: LD_VAR 0 1
43519: PPUSH
43520: CALL_OW 477
43524: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
43525: LD_ADDR_VAR 0 10
43529: PUSH
43530: LD_VAR 0 1
43534: PPUSH
43535: CALL_OW 478
43539: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
43540: LD_VAR 0 9
43544: NOT
43545: PUSH
43546: LD_VAR 0 11
43550: NOT
43551: OR
43552: PUSH
43553: LD_VAR 0 12
43557: NOT
43558: OR
43559: PUSH
43560: LD_VAR 0 10
43564: NOT
43565: OR
43566: IFFALSE 43601
// begin result := [ chassis , engine , control , weapon ] ;
43568: LD_ADDR_VAR 0 6
43572: PUSH
43573: LD_VAR 0 2
43577: PUSH
43578: LD_VAR 0 3
43582: PUSH
43583: LD_VAR 0 4
43587: PUSH
43588: LD_VAR 0 5
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: ST_TO_ADDR
// exit ;
43599: GO 43892
// end ; if not chassis in _chassis then
43601: LD_VAR 0 2
43605: PUSH
43606: LD_VAR 0 9
43610: IN
43611: NOT
43612: IFFALSE 43638
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
43614: LD_ADDR_VAR 0 2
43618: PUSH
43619: LD_VAR 0 9
43623: PUSH
43624: LD_INT 1
43626: PPUSH
43627: LD_VAR 0 9
43631: PPUSH
43632: CALL_OW 12
43636: ARRAY
43637: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
43638: LD_VAR 0 2
43642: PPUSH
43643: LD_VAR 0 3
43647: PPUSH
43648: CALL 43897 0 2
43652: NOT
43653: IFFALSE 43712
// repeat engine := _engine [ 1 ] ;
43655: LD_ADDR_VAR 0 3
43659: PUSH
43660: LD_VAR 0 11
43664: PUSH
43665: LD_INT 1
43667: ARRAY
43668: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
43669: LD_ADDR_VAR 0 11
43673: PUSH
43674: LD_VAR 0 11
43678: PPUSH
43679: LD_INT 1
43681: PPUSH
43682: CALL_OW 3
43686: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
43687: LD_VAR 0 2
43691: PPUSH
43692: LD_VAR 0 3
43696: PPUSH
43697: CALL 43897 0 2
43701: PUSH
43702: LD_VAR 0 11
43706: PUSH
43707: EMPTY
43708: EQUAL
43709: OR
43710: IFFALSE 43655
// if not control in _control then
43712: LD_VAR 0 4
43716: PUSH
43717: LD_VAR 0 12
43721: IN
43722: NOT
43723: IFFALSE 43749
// control := _control [ rand ( 1 , _control ) ] ;
43725: LD_ADDR_VAR 0 4
43729: PUSH
43730: LD_VAR 0 12
43734: PUSH
43735: LD_INT 1
43737: PPUSH
43738: LD_VAR 0 12
43742: PPUSH
43743: CALL_OW 12
43747: ARRAY
43748: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
43749: LD_VAR 0 2
43753: PPUSH
43754: LD_VAR 0 5
43758: PPUSH
43759: CALL 44117 0 2
43763: NOT
43764: IFFALSE 43823
// repeat weapon := _weapon [ 1 ] ;
43766: LD_ADDR_VAR 0 5
43770: PUSH
43771: LD_VAR 0 10
43775: PUSH
43776: LD_INT 1
43778: ARRAY
43779: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
43780: LD_ADDR_VAR 0 10
43784: PUSH
43785: LD_VAR 0 10
43789: PPUSH
43790: LD_INT 1
43792: PPUSH
43793: CALL_OW 3
43797: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
43798: LD_VAR 0 2
43802: PPUSH
43803: LD_VAR 0 5
43807: PPUSH
43808: CALL 44117 0 2
43812: PUSH
43813: LD_VAR 0 10
43817: PUSH
43818: EMPTY
43819: EQUAL
43820: OR
43821: IFFALSE 43766
// result := [ ] ;
43823: LD_ADDR_VAR 0 6
43827: PUSH
43828: EMPTY
43829: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
43830: LD_VAR 0 1
43834: PPUSH
43835: LD_VAR 0 2
43839: PPUSH
43840: LD_VAR 0 3
43844: PPUSH
43845: LD_VAR 0 4
43849: PPUSH
43850: LD_VAR 0 5
43854: PPUSH
43855: CALL_OW 448
43859: IFFALSE 43892
// result := [ chassis , engine , control , weapon ] ;
43861: LD_ADDR_VAR 0 6
43865: PUSH
43866: LD_VAR 0 2
43870: PUSH
43871: LD_VAR 0 3
43875: PUSH
43876: LD_VAR 0 4
43880: PUSH
43881: LD_VAR 0 5
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: LIST
43890: LIST
43891: ST_TO_ADDR
// end ;
43892: LD_VAR 0 6
43896: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
43897: LD_INT 0
43899: PPUSH
// if not chassis or not engine then
43900: LD_VAR 0 1
43904: NOT
43905: PUSH
43906: LD_VAR 0 2
43910: NOT
43911: OR
43912: IFFALSE 43916
// exit ;
43914: GO 44112
// case engine of engine_solar :
43916: LD_VAR 0 2
43920: PUSH
43921: LD_INT 2
43923: DOUBLE
43924: EQUAL
43925: IFTRUE 43929
43927: GO 43967
43929: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
43930: LD_ADDR_VAR 0 3
43934: PUSH
43935: LD_INT 11
43937: PUSH
43938: LD_INT 12
43940: PUSH
43941: LD_INT 13
43943: PUSH
43944: LD_INT 14
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 2
43952: PUSH
43953: LD_INT 3
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: ST_TO_ADDR
43965: GO 44096
43967: LD_INT 1
43969: DOUBLE
43970: EQUAL
43971: IFTRUE 43975
43973: GO 44037
43975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
43976: LD_ADDR_VAR 0 3
43980: PUSH
43981: LD_INT 11
43983: PUSH
43984: LD_INT 12
43986: PUSH
43987: LD_INT 13
43989: PUSH
43990: LD_INT 14
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: LD_INT 2
43998: PUSH
43999: LD_INT 3
44001: PUSH
44002: LD_INT 4
44004: PUSH
44005: LD_INT 5
44007: PUSH
44008: LD_INT 21
44010: PUSH
44011: LD_INT 23
44013: PUSH
44014: LD_INT 22
44016: PUSH
44017: LD_INT 24
44019: PUSH
44020: EMPTY
44021: LIST
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: ST_TO_ADDR
44035: GO 44096
44037: LD_INT 3
44039: DOUBLE
44040: EQUAL
44041: IFTRUE 44045
44043: GO 44095
44045: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
44046: LD_ADDR_VAR 0 3
44050: PUSH
44051: LD_INT 13
44053: PUSH
44054: LD_INT 14
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: LD_INT 3
44062: PUSH
44063: LD_INT 4
44065: PUSH
44066: LD_INT 5
44068: PUSH
44069: LD_INT 21
44071: PUSH
44072: LD_INT 22
44074: PUSH
44075: LD_INT 23
44077: PUSH
44078: LD_INT 24
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: ST_TO_ADDR
44093: GO 44096
44095: POP
// result := ( chassis in result ) ;
44096: LD_ADDR_VAR 0 3
44100: PUSH
44101: LD_VAR 0 1
44105: PUSH
44106: LD_VAR 0 3
44110: IN
44111: ST_TO_ADDR
// end ;
44112: LD_VAR 0 3
44116: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
44117: LD_INT 0
44119: PPUSH
// if not chassis or not weapon then
44120: LD_VAR 0 1
44124: NOT
44125: PUSH
44126: LD_VAR 0 2
44130: NOT
44131: OR
44132: IFFALSE 44136
// exit ;
44134: GO 45196
// case weapon of us_machine_gun :
44136: LD_VAR 0 2
44140: PUSH
44141: LD_INT 2
44143: DOUBLE
44144: EQUAL
44145: IFTRUE 44149
44147: GO 44179
44149: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
44150: LD_ADDR_VAR 0 3
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: LD_INT 2
44160: PUSH
44161: LD_INT 3
44163: PUSH
44164: LD_INT 4
44166: PUSH
44167: LD_INT 5
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: ST_TO_ADDR
44177: GO 45180
44179: LD_INT 3
44181: DOUBLE
44182: EQUAL
44183: IFTRUE 44187
44185: GO 44217
44187: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
44188: LD_ADDR_VAR 0 3
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: LD_INT 2
44198: PUSH
44199: LD_INT 3
44201: PUSH
44202: LD_INT 4
44204: PUSH
44205: LD_INT 5
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: ST_TO_ADDR
44215: GO 45180
44217: LD_INT 11
44219: DOUBLE
44220: EQUAL
44221: IFTRUE 44225
44223: GO 44255
44225: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
44226: LD_ADDR_VAR 0 3
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 3
44239: PUSH
44240: LD_INT 4
44242: PUSH
44243: LD_INT 5
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: ST_TO_ADDR
44253: GO 45180
44255: LD_INT 4
44257: DOUBLE
44258: EQUAL
44259: IFTRUE 44263
44261: GO 44289
44263: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
44264: LD_ADDR_VAR 0 3
44268: PUSH
44269: LD_INT 2
44271: PUSH
44272: LD_INT 3
44274: PUSH
44275: LD_INT 4
44277: PUSH
44278: LD_INT 5
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: ST_TO_ADDR
44287: GO 45180
44289: LD_INT 5
44291: DOUBLE
44292: EQUAL
44293: IFTRUE 44297
44295: GO 44323
44297: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
44298: LD_ADDR_VAR 0 3
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: LD_INT 3
44308: PUSH
44309: LD_INT 4
44311: PUSH
44312: LD_INT 5
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: ST_TO_ADDR
44321: GO 45180
44323: LD_INT 9
44325: DOUBLE
44326: EQUAL
44327: IFTRUE 44331
44329: GO 44357
44331: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
44332: LD_ADDR_VAR 0 3
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 3
44342: PUSH
44343: LD_INT 4
44345: PUSH
44346: LD_INT 5
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: ST_TO_ADDR
44355: GO 45180
44357: LD_INT 7
44359: DOUBLE
44360: EQUAL
44361: IFTRUE 44365
44363: GO 44391
44365: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
44366: LD_ADDR_VAR 0 3
44370: PUSH
44371: LD_INT 2
44373: PUSH
44374: LD_INT 3
44376: PUSH
44377: LD_INT 4
44379: PUSH
44380: LD_INT 5
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: ST_TO_ADDR
44389: GO 45180
44391: LD_INT 12
44393: DOUBLE
44394: EQUAL
44395: IFTRUE 44399
44397: GO 44425
44399: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
44400: LD_ADDR_VAR 0 3
44404: PUSH
44405: LD_INT 2
44407: PUSH
44408: LD_INT 3
44410: PUSH
44411: LD_INT 4
44413: PUSH
44414: LD_INT 5
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: ST_TO_ADDR
44423: GO 45180
44425: LD_INT 13
44427: DOUBLE
44428: EQUAL
44429: IFTRUE 44433
44431: GO 44459
44433: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
44434: LD_ADDR_VAR 0 3
44438: PUSH
44439: LD_INT 2
44441: PUSH
44442: LD_INT 3
44444: PUSH
44445: LD_INT 4
44447: PUSH
44448: LD_INT 5
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: LIST
44455: LIST
44456: ST_TO_ADDR
44457: GO 45180
44459: LD_INT 14
44461: DOUBLE
44462: EQUAL
44463: IFTRUE 44467
44465: GO 44485
44467: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
44468: LD_ADDR_VAR 0 3
44472: PUSH
44473: LD_INT 4
44475: PUSH
44476: LD_INT 5
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: ST_TO_ADDR
44483: GO 45180
44485: LD_INT 6
44487: DOUBLE
44488: EQUAL
44489: IFTRUE 44493
44491: GO 44511
44493: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
44494: LD_ADDR_VAR 0 3
44498: PUSH
44499: LD_INT 4
44501: PUSH
44502: LD_INT 5
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: ST_TO_ADDR
44509: GO 45180
44511: LD_INT 10
44513: DOUBLE
44514: EQUAL
44515: IFTRUE 44519
44517: GO 44537
44519: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
44520: LD_ADDR_VAR 0 3
44524: PUSH
44525: LD_INT 4
44527: PUSH
44528: LD_INT 5
44530: PUSH
44531: EMPTY
44532: LIST
44533: LIST
44534: ST_TO_ADDR
44535: GO 45180
44537: LD_INT 22
44539: DOUBLE
44540: EQUAL
44541: IFTRUE 44545
44543: GO 44571
44545: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
44546: LD_ADDR_VAR 0 3
44550: PUSH
44551: LD_INT 11
44553: PUSH
44554: LD_INT 12
44556: PUSH
44557: LD_INT 13
44559: PUSH
44560: LD_INT 14
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: LIST
44567: LIST
44568: ST_TO_ADDR
44569: GO 45180
44571: LD_INT 23
44573: DOUBLE
44574: EQUAL
44575: IFTRUE 44579
44577: GO 44605
44579: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
44580: LD_ADDR_VAR 0 3
44584: PUSH
44585: LD_INT 11
44587: PUSH
44588: LD_INT 12
44590: PUSH
44591: LD_INT 13
44593: PUSH
44594: LD_INT 14
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: ST_TO_ADDR
44603: GO 45180
44605: LD_INT 24
44607: DOUBLE
44608: EQUAL
44609: IFTRUE 44613
44611: GO 44639
44613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
44614: LD_ADDR_VAR 0 3
44618: PUSH
44619: LD_INT 11
44621: PUSH
44622: LD_INT 12
44624: PUSH
44625: LD_INT 13
44627: PUSH
44628: LD_INT 14
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: ST_TO_ADDR
44637: GO 45180
44639: LD_INT 30
44641: DOUBLE
44642: EQUAL
44643: IFTRUE 44647
44645: GO 44673
44647: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
44648: LD_ADDR_VAR 0 3
44652: PUSH
44653: LD_INT 11
44655: PUSH
44656: LD_INT 12
44658: PUSH
44659: LD_INT 13
44661: PUSH
44662: LD_INT 14
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: LIST
44669: LIST
44670: ST_TO_ADDR
44671: GO 45180
44673: LD_INT 25
44675: DOUBLE
44676: EQUAL
44677: IFTRUE 44681
44679: GO 44699
44681: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
44682: LD_ADDR_VAR 0 3
44686: PUSH
44687: LD_INT 13
44689: PUSH
44690: LD_INT 14
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: ST_TO_ADDR
44697: GO 45180
44699: LD_INT 27
44701: DOUBLE
44702: EQUAL
44703: IFTRUE 44707
44705: GO 44725
44707: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
44708: LD_ADDR_VAR 0 3
44712: PUSH
44713: LD_INT 13
44715: PUSH
44716: LD_INT 14
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: ST_TO_ADDR
44723: GO 45180
44725: LD_INT 92
44727: DOUBLE
44728: EQUAL
44729: IFTRUE 44733
44731: GO 44759
44733: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
44734: LD_ADDR_VAR 0 3
44738: PUSH
44739: LD_INT 11
44741: PUSH
44742: LD_INT 12
44744: PUSH
44745: LD_INT 13
44747: PUSH
44748: LD_INT 14
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: LIST
44755: LIST
44756: ST_TO_ADDR
44757: GO 45180
44759: LD_INT 28
44761: DOUBLE
44762: EQUAL
44763: IFTRUE 44767
44765: GO 44785
44767: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
44768: LD_ADDR_VAR 0 3
44772: PUSH
44773: LD_INT 13
44775: PUSH
44776: LD_INT 14
44778: PUSH
44779: EMPTY
44780: LIST
44781: LIST
44782: ST_TO_ADDR
44783: GO 45180
44785: LD_INT 29
44787: DOUBLE
44788: EQUAL
44789: IFTRUE 44793
44791: GO 44811
44793: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
44794: LD_ADDR_VAR 0 3
44798: PUSH
44799: LD_INT 13
44801: PUSH
44802: LD_INT 14
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: ST_TO_ADDR
44809: GO 45180
44811: LD_INT 31
44813: DOUBLE
44814: EQUAL
44815: IFTRUE 44819
44817: GO 44837
44819: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
44820: LD_ADDR_VAR 0 3
44824: PUSH
44825: LD_INT 13
44827: PUSH
44828: LD_INT 14
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: ST_TO_ADDR
44835: GO 45180
44837: LD_INT 26
44839: DOUBLE
44840: EQUAL
44841: IFTRUE 44845
44843: GO 44863
44845: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
44846: LD_ADDR_VAR 0 3
44850: PUSH
44851: LD_INT 13
44853: PUSH
44854: LD_INT 14
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: ST_TO_ADDR
44861: GO 45180
44863: LD_INT 42
44865: DOUBLE
44866: EQUAL
44867: IFTRUE 44871
44869: GO 44897
44871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
44872: LD_ADDR_VAR 0 3
44876: PUSH
44877: LD_INT 21
44879: PUSH
44880: LD_INT 22
44882: PUSH
44883: LD_INT 23
44885: PUSH
44886: LD_INT 24
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: ST_TO_ADDR
44895: GO 45180
44897: LD_INT 43
44899: DOUBLE
44900: EQUAL
44901: IFTRUE 44905
44903: GO 44931
44905: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
44906: LD_ADDR_VAR 0 3
44910: PUSH
44911: LD_INT 21
44913: PUSH
44914: LD_INT 22
44916: PUSH
44917: LD_INT 23
44919: PUSH
44920: LD_INT 24
44922: PUSH
44923: EMPTY
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: ST_TO_ADDR
44929: GO 45180
44931: LD_INT 44
44933: DOUBLE
44934: EQUAL
44935: IFTRUE 44939
44937: GO 44965
44939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
44940: LD_ADDR_VAR 0 3
44944: PUSH
44945: LD_INT 21
44947: PUSH
44948: LD_INT 22
44950: PUSH
44951: LD_INT 23
44953: PUSH
44954: LD_INT 24
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: ST_TO_ADDR
44963: GO 45180
44965: LD_INT 45
44967: DOUBLE
44968: EQUAL
44969: IFTRUE 44973
44971: GO 44999
44973: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
44974: LD_ADDR_VAR 0 3
44978: PUSH
44979: LD_INT 21
44981: PUSH
44982: LD_INT 22
44984: PUSH
44985: LD_INT 23
44987: PUSH
44988: LD_INT 24
44990: PUSH
44991: EMPTY
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: ST_TO_ADDR
44997: GO 45180
44999: LD_INT 49
45001: DOUBLE
45002: EQUAL
45003: IFTRUE 45007
45005: GO 45033
45007: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
45008: LD_ADDR_VAR 0 3
45012: PUSH
45013: LD_INT 21
45015: PUSH
45016: LD_INT 22
45018: PUSH
45019: LD_INT 23
45021: PUSH
45022: LD_INT 24
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: LIST
45029: LIST
45030: ST_TO_ADDR
45031: GO 45180
45033: LD_INT 51
45035: DOUBLE
45036: EQUAL
45037: IFTRUE 45041
45039: GO 45067
45041: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
45042: LD_ADDR_VAR 0 3
45046: PUSH
45047: LD_INT 21
45049: PUSH
45050: LD_INT 22
45052: PUSH
45053: LD_INT 23
45055: PUSH
45056: LD_INT 24
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: ST_TO_ADDR
45065: GO 45180
45067: LD_INT 52
45069: DOUBLE
45070: EQUAL
45071: IFTRUE 45075
45073: GO 45101
45075: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
45076: LD_ADDR_VAR 0 3
45080: PUSH
45081: LD_INT 21
45083: PUSH
45084: LD_INT 22
45086: PUSH
45087: LD_INT 23
45089: PUSH
45090: LD_INT 24
45092: PUSH
45093: EMPTY
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: ST_TO_ADDR
45099: GO 45180
45101: LD_INT 53
45103: DOUBLE
45104: EQUAL
45105: IFTRUE 45109
45107: GO 45127
45109: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
45110: LD_ADDR_VAR 0 3
45114: PUSH
45115: LD_INT 23
45117: PUSH
45118: LD_INT 24
45120: PUSH
45121: EMPTY
45122: LIST
45123: LIST
45124: ST_TO_ADDR
45125: GO 45180
45127: LD_INT 46
45129: DOUBLE
45130: EQUAL
45131: IFTRUE 45135
45133: GO 45153
45135: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
45136: LD_ADDR_VAR 0 3
45140: PUSH
45141: LD_INT 23
45143: PUSH
45144: LD_INT 24
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: ST_TO_ADDR
45151: GO 45180
45153: LD_INT 47
45155: DOUBLE
45156: EQUAL
45157: IFTRUE 45161
45159: GO 45179
45161: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
45162: LD_ADDR_VAR 0 3
45166: PUSH
45167: LD_INT 23
45169: PUSH
45170: LD_INT 24
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: ST_TO_ADDR
45177: GO 45180
45179: POP
// result := ( chassis in result ) ;
45180: LD_ADDR_VAR 0 3
45184: PUSH
45185: LD_VAR 0 1
45189: PUSH
45190: LD_VAR 0 3
45194: IN
45195: ST_TO_ADDR
// end ;
45196: LD_VAR 0 3
45200: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
45201: LD_INT 0
45203: PPUSH
45204: PPUSH
45205: PPUSH
45206: PPUSH
45207: PPUSH
45208: PPUSH
45209: PPUSH
// result := array ;
45210: LD_ADDR_VAR 0 5
45214: PUSH
45215: LD_VAR 0 1
45219: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
45220: LD_VAR 0 1
45224: NOT
45225: PUSH
45226: LD_VAR 0 2
45230: NOT
45231: OR
45232: PUSH
45233: LD_VAR 0 3
45237: NOT
45238: OR
45239: PUSH
45240: LD_VAR 0 2
45244: PUSH
45245: LD_VAR 0 1
45249: GREATER
45250: OR
45251: PUSH
45252: LD_VAR 0 3
45256: PUSH
45257: LD_VAR 0 1
45261: GREATER
45262: OR
45263: IFFALSE 45267
// exit ;
45265: GO 45563
// if direction then
45267: LD_VAR 0 4
45271: IFFALSE 45335
// begin d := 1 ;
45273: LD_ADDR_VAR 0 9
45277: PUSH
45278: LD_INT 1
45280: ST_TO_ADDR
// if i_from > i_to then
45281: LD_VAR 0 2
45285: PUSH
45286: LD_VAR 0 3
45290: GREATER
45291: IFFALSE 45317
// length := ( array - i_from ) + i_to else
45293: LD_ADDR_VAR 0 11
45297: PUSH
45298: LD_VAR 0 1
45302: PUSH
45303: LD_VAR 0 2
45307: MINUS
45308: PUSH
45309: LD_VAR 0 3
45313: PLUS
45314: ST_TO_ADDR
45315: GO 45333
// length := i_to - i_from ;
45317: LD_ADDR_VAR 0 11
45321: PUSH
45322: LD_VAR 0 3
45326: PUSH
45327: LD_VAR 0 2
45331: MINUS
45332: ST_TO_ADDR
// end else
45333: GO 45396
// begin d := - 1 ;
45335: LD_ADDR_VAR 0 9
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: ST_TO_ADDR
// if i_from > i_to then
45344: LD_VAR 0 2
45348: PUSH
45349: LD_VAR 0 3
45353: GREATER
45354: IFFALSE 45374
// length := i_from - i_to else
45356: LD_ADDR_VAR 0 11
45360: PUSH
45361: LD_VAR 0 2
45365: PUSH
45366: LD_VAR 0 3
45370: MINUS
45371: ST_TO_ADDR
45372: GO 45396
// length := ( array - i_to ) + i_from ;
45374: LD_ADDR_VAR 0 11
45378: PUSH
45379: LD_VAR 0 1
45383: PUSH
45384: LD_VAR 0 3
45388: MINUS
45389: PUSH
45390: LD_VAR 0 2
45394: PLUS
45395: ST_TO_ADDR
// end ; if not length then
45396: LD_VAR 0 11
45400: NOT
45401: IFFALSE 45405
// exit ;
45403: GO 45563
// tmp := array ;
45405: LD_ADDR_VAR 0 10
45409: PUSH
45410: LD_VAR 0 1
45414: ST_TO_ADDR
// for i = 1 to length do
45415: LD_ADDR_VAR 0 6
45419: PUSH
45420: DOUBLE
45421: LD_INT 1
45423: DEC
45424: ST_TO_ADDR
45425: LD_VAR 0 11
45429: PUSH
45430: FOR_TO
45431: IFFALSE 45551
// begin for j = 1 to array do
45433: LD_ADDR_VAR 0 7
45437: PUSH
45438: DOUBLE
45439: LD_INT 1
45441: DEC
45442: ST_TO_ADDR
45443: LD_VAR 0 1
45447: PUSH
45448: FOR_TO
45449: IFFALSE 45537
// begin k := j + d ;
45451: LD_ADDR_VAR 0 8
45455: PUSH
45456: LD_VAR 0 7
45460: PUSH
45461: LD_VAR 0 9
45465: PLUS
45466: ST_TO_ADDR
// if k > array then
45467: LD_VAR 0 8
45471: PUSH
45472: LD_VAR 0 1
45476: GREATER
45477: IFFALSE 45487
// k := 1 ;
45479: LD_ADDR_VAR 0 8
45483: PUSH
45484: LD_INT 1
45486: ST_TO_ADDR
// if not k then
45487: LD_VAR 0 8
45491: NOT
45492: IFFALSE 45504
// k := array ;
45494: LD_ADDR_VAR 0 8
45498: PUSH
45499: LD_VAR 0 1
45503: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
45504: LD_ADDR_VAR 0 10
45508: PUSH
45509: LD_VAR 0 10
45513: PPUSH
45514: LD_VAR 0 8
45518: PPUSH
45519: LD_VAR 0 1
45523: PUSH
45524: LD_VAR 0 7
45528: ARRAY
45529: PPUSH
45530: CALL_OW 1
45534: ST_TO_ADDR
// end ;
45535: GO 45448
45537: POP
45538: POP
// array := tmp ;
45539: LD_ADDR_VAR 0 1
45543: PUSH
45544: LD_VAR 0 10
45548: ST_TO_ADDR
// end ;
45549: GO 45430
45551: POP
45552: POP
// result := array ;
45553: LD_ADDR_VAR 0 5
45557: PUSH
45558: LD_VAR 0 1
45562: ST_TO_ADDR
// end ;
45563: LD_VAR 0 5
45567: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
45568: LD_INT 0
45570: PPUSH
45571: PPUSH
// result := 0 ;
45572: LD_ADDR_VAR 0 3
45576: PUSH
45577: LD_INT 0
45579: ST_TO_ADDR
// if not array or not value in array then
45580: LD_VAR 0 1
45584: NOT
45585: PUSH
45586: LD_VAR 0 2
45590: PUSH
45591: LD_VAR 0 1
45595: IN
45596: NOT
45597: OR
45598: IFFALSE 45602
// exit ;
45600: GO 45656
// for i = 1 to array do
45602: LD_ADDR_VAR 0 4
45606: PUSH
45607: DOUBLE
45608: LD_INT 1
45610: DEC
45611: ST_TO_ADDR
45612: LD_VAR 0 1
45616: PUSH
45617: FOR_TO
45618: IFFALSE 45654
// if value = array [ i ] then
45620: LD_VAR 0 2
45624: PUSH
45625: LD_VAR 0 1
45629: PUSH
45630: LD_VAR 0 4
45634: ARRAY
45635: EQUAL
45636: IFFALSE 45652
// begin result := i ;
45638: LD_ADDR_VAR 0 3
45642: PUSH
45643: LD_VAR 0 4
45647: ST_TO_ADDR
// exit ;
45648: POP
45649: POP
45650: GO 45656
// end ;
45652: GO 45617
45654: POP
45655: POP
// end ;
45656: LD_VAR 0 3
45660: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
45661: LD_INT 0
45663: PPUSH
// vc_chassis := chassis ;
45664: LD_ADDR_OWVAR 37
45668: PUSH
45669: LD_VAR 0 1
45673: ST_TO_ADDR
// vc_engine := engine ;
45674: LD_ADDR_OWVAR 39
45678: PUSH
45679: LD_VAR 0 2
45683: ST_TO_ADDR
// vc_control := control ;
45684: LD_ADDR_OWVAR 38
45688: PUSH
45689: LD_VAR 0 3
45693: ST_TO_ADDR
// vc_weapon := weapon ;
45694: LD_ADDR_OWVAR 40
45698: PUSH
45699: LD_VAR 0 4
45703: ST_TO_ADDR
// vc_fuel_battery := fuel ;
45704: LD_ADDR_OWVAR 41
45708: PUSH
45709: LD_VAR 0 5
45713: ST_TO_ADDR
// end ;
45714: LD_VAR 0 6
45718: RET
// export function WantPlant ( unit ) ; var task ; begin
45719: LD_INT 0
45721: PPUSH
45722: PPUSH
// result := false ;
45723: LD_ADDR_VAR 0 2
45727: PUSH
45728: LD_INT 0
45730: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
45731: LD_ADDR_VAR 0 3
45735: PUSH
45736: LD_VAR 0 1
45740: PPUSH
45741: CALL_OW 437
45745: ST_TO_ADDR
// if task then
45746: LD_VAR 0 3
45750: IFFALSE 45778
// if task [ 1 ] [ 1 ] = p then
45752: LD_VAR 0 3
45756: PUSH
45757: LD_INT 1
45759: ARRAY
45760: PUSH
45761: LD_INT 1
45763: ARRAY
45764: PUSH
45765: LD_STRING p
45767: EQUAL
45768: IFFALSE 45778
// result := true ;
45770: LD_ADDR_VAR 0 2
45774: PUSH
45775: LD_INT 1
45777: ST_TO_ADDR
// end ;
45778: LD_VAR 0 2
45782: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
45783: LD_INT 0
45785: PPUSH
45786: PPUSH
45787: PPUSH
45788: PPUSH
// if pos < 1 then
45789: LD_VAR 0 2
45793: PUSH
45794: LD_INT 1
45796: LESS
45797: IFFALSE 45801
// exit ;
45799: GO 46104
// if pos = 1 then
45801: LD_VAR 0 2
45805: PUSH
45806: LD_INT 1
45808: EQUAL
45809: IFFALSE 45842
// result := Replace ( arr , pos [ 1 ] , value ) else
45811: LD_ADDR_VAR 0 4
45815: PUSH
45816: LD_VAR 0 1
45820: PPUSH
45821: LD_VAR 0 2
45825: PUSH
45826: LD_INT 1
45828: ARRAY
45829: PPUSH
45830: LD_VAR 0 3
45834: PPUSH
45835: CALL_OW 1
45839: ST_TO_ADDR
45840: GO 46104
// begin tmp := arr ;
45842: LD_ADDR_VAR 0 6
45846: PUSH
45847: LD_VAR 0 1
45851: ST_TO_ADDR
// s_arr := [ tmp ] ;
45852: LD_ADDR_VAR 0 7
45856: PUSH
45857: LD_VAR 0 6
45861: PUSH
45862: EMPTY
45863: LIST
45864: ST_TO_ADDR
// for i = 1 to pos - 1 do
45865: LD_ADDR_VAR 0 5
45869: PUSH
45870: DOUBLE
45871: LD_INT 1
45873: DEC
45874: ST_TO_ADDR
45875: LD_VAR 0 2
45879: PUSH
45880: LD_INT 1
45882: MINUS
45883: PUSH
45884: FOR_TO
45885: IFFALSE 45930
// begin tmp := tmp [ pos [ i ] ] ;
45887: LD_ADDR_VAR 0 6
45891: PUSH
45892: LD_VAR 0 6
45896: PUSH
45897: LD_VAR 0 2
45901: PUSH
45902: LD_VAR 0 5
45906: ARRAY
45907: ARRAY
45908: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
45909: LD_ADDR_VAR 0 7
45913: PUSH
45914: LD_VAR 0 7
45918: PUSH
45919: LD_VAR 0 6
45923: PUSH
45924: EMPTY
45925: LIST
45926: ADD
45927: ST_TO_ADDR
// end ;
45928: GO 45884
45930: POP
45931: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
45932: LD_ADDR_VAR 0 6
45936: PUSH
45937: LD_VAR 0 6
45941: PPUSH
45942: LD_VAR 0 2
45946: PUSH
45947: LD_VAR 0 2
45951: ARRAY
45952: PPUSH
45953: LD_VAR 0 3
45957: PPUSH
45958: CALL_OW 1
45962: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
45963: LD_ADDR_VAR 0 7
45967: PUSH
45968: LD_VAR 0 7
45972: PPUSH
45973: LD_VAR 0 7
45977: PPUSH
45978: LD_VAR 0 6
45982: PPUSH
45983: CALL_OW 1
45987: ST_TO_ADDR
// for i = s_arr downto 2 do
45988: LD_ADDR_VAR 0 5
45992: PUSH
45993: DOUBLE
45994: LD_VAR 0 7
45998: INC
45999: ST_TO_ADDR
46000: LD_INT 2
46002: PUSH
46003: FOR_DOWNTO
46004: IFFALSE 46088
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
46006: LD_ADDR_VAR 0 6
46010: PUSH
46011: LD_VAR 0 7
46015: PUSH
46016: LD_VAR 0 5
46020: PUSH
46021: LD_INT 1
46023: MINUS
46024: ARRAY
46025: PPUSH
46026: LD_VAR 0 2
46030: PUSH
46031: LD_VAR 0 5
46035: PUSH
46036: LD_INT 1
46038: MINUS
46039: ARRAY
46040: PPUSH
46041: LD_VAR 0 7
46045: PUSH
46046: LD_VAR 0 5
46050: ARRAY
46051: PPUSH
46052: CALL_OW 1
46056: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
46057: LD_ADDR_VAR 0 7
46061: PUSH
46062: LD_VAR 0 7
46066: PPUSH
46067: LD_VAR 0 5
46071: PUSH
46072: LD_INT 1
46074: MINUS
46075: PPUSH
46076: LD_VAR 0 6
46080: PPUSH
46081: CALL_OW 1
46085: ST_TO_ADDR
// end ;
46086: GO 46003
46088: POP
46089: POP
// result := s_arr [ 1 ] ;
46090: LD_ADDR_VAR 0 4
46094: PUSH
46095: LD_VAR 0 7
46099: PUSH
46100: LD_INT 1
46102: ARRAY
46103: ST_TO_ADDR
// end ; end ;
46104: LD_VAR 0 4
46108: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
46109: LD_INT 0
46111: PPUSH
46112: PPUSH
// if not list then
46113: LD_VAR 0 1
46117: NOT
46118: IFFALSE 46122
// exit ;
46120: GO 46213
// i := list [ pos1 ] ;
46122: LD_ADDR_VAR 0 5
46126: PUSH
46127: LD_VAR 0 1
46131: PUSH
46132: LD_VAR 0 2
46136: ARRAY
46137: ST_TO_ADDR
// if not i then
46138: LD_VAR 0 5
46142: NOT
46143: IFFALSE 46147
// exit ;
46145: GO 46213
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
46147: LD_ADDR_VAR 0 1
46151: PUSH
46152: LD_VAR 0 1
46156: PPUSH
46157: LD_VAR 0 2
46161: PPUSH
46162: LD_VAR 0 1
46166: PUSH
46167: LD_VAR 0 3
46171: ARRAY
46172: PPUSH
46173: CALL_OW 1
46177: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
46178: LD_ADDR_VAR 0 1
46182: PUSH
46183: LD_VAR 0 1
46187: PPUSH
46188: LD_VAR 0 3
46192: PPUSH
46193: LD_VAR 0 5
46197: PPUSH
46198: CALL_OW 1
46202: ST_TO_ADDR
// result := list ;
46203: LD_ADDR_VAR 0 4
46207: PUSH
46208: LD_VAR 0 1
46212: ST_TO_ADDR
// end ;
46213: LD_VAR 0 4
46217: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
46218: LD_INT 0
46220: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
46221: LD_ADDR_VAR 0 5
46225: PUSH
46226: LD_VAR 0 1
46230: PPUSH
46231: CALL_OW 250
46235: PPUSH
46236: LD_VAR 0 1
46240: PPUSH
46241: CALL_OW 251
46245: PPUSH
46246: LD_VAR 0 2
46250: PPUSH
46251: LD_VAR 0 3
46255: PPUSH
46256: LD_VAR 0 4
46260: PPUSH
46261: CALL 46639 0 5
46265: ST_TO_ADDR
// end ;
46266: LD_VAR 0 5
46270: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
46271: LD_INT 0
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
// if not list or not unit then
46277: LD_VAR 0 2
46281: NOT
46282: PUSH
46283: LD_VAR 0 1
46287: NOT
46288: OR
46289: IFFALSE 46293
// exit ;
46291: GO 46634
// result := [ ] ;
46293: LD_ADDR_VAR 0 5
46297: PUSH
46298: EMPTY
46299: ST_TO_ADDR
// for i in list do
46300: LD_ADDR_VAR 0 6
46304: PUSH
46305: LD_VAR 0 2
46309: PUSH
46310: FOR_IN
46311: IFFALSE 46529
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
46313: LD_ADDR_VAR 0 8
46317: PUSH
46318: LD_VAR 0 1
46322: PPUSH
46323: LD_VAR 0 6
46327: PUSH
46328: LD_INT 1
46330: ARRAY
46331: PPUSH
46332: LD_VAR 0 6
46336: PUSH
46337: LD_INT 2
46339: ARRAY
46340: PPUSH
46341: CALL_OW 297
46345: ST_TO_ADDR
// if not Count ( result ) then
46346: LD_VAR 0 5
46350: PPUSH
46351: CALL 42923 0 1
46355: NOT
46356: IFFALSE 46389
// begin result := Join ( result , [ i , tmp ] ) ;
46358: LD_ADDR_VAR 0 5
46362: PUSH
46363: LD_VAR 0 5
46367: PPUSH
46368: LD_VAR 0 6
46372: PUSH
46373: LD_VAR 0 8
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PPUSH
46382: CALL 78532 0 2
46386: ST_TO_ADDR
// continue ;
46387: GO 46310
// end ; if result [ result ] [ 2 ] <= tmp then
46389: LD_VAR 0 5
46393: PUSH
46394: LD_VAR 0 5
46398: ARRAY
46399: PUSH
46400: LD_INT 2
46402: ARRAY
46403: PUSH
46404: LD_VAR 0 8
46408: LESSEQUAL
46409: IFFALSE 46442
// result := Join ( result , [ i , tmp ] ) else
46411: LD_ADDR_VAR 0 5
46415: PUSH
46416: LD_VAR 0 5
46420: PPUSH
46421: LD_VAR 0 6
46425: PUSH
46426: LD_VAR 0 8
46430: PUSH
46431: EMPTY
46432: LIST
46433: LIST
46434: PPUSH
46435: CALL 78532 0 2
46439: ST_TO_ADDR
46440: GO 46527
// begin for j := 1 to Count ( result ) do
46442: LD_ADDR_VAR 0 7
46446: PUSH
46447: DOUBLE
46448: LD_INT 1
46450: DEC
46451: ST_TO_ADDR
46452: LD_VAR 0 5
46456: PPUSH
46457: CALL 42923 0 1
46461: PUSH
46462: FOR_TO
46463: IFFALSE 46525
// begin if tmp < result [ j ] [ 2 ] then
46465: LD_VAR 0 8
46469: PUSH
46470: LD_VAR 0 5
46474: PUSH
46475: LD_VAR 0 7
46479: ARRAY
46480: PUSH
46481: LD_INT 2
46483: ARRAY
46484: LESS
46485: IFFALSE 46523
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46487: LD_ADDR_VAR 0 5
46491: PUSH
46492: LD_VAR 0 5
46496: PPUSH
46497: LD_VAR 0 7
46501: PPUSH
46502: LD_VAR 0 6
46506: PUSH
46507: LD_VAR 0 8
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PPUSH
46516: CALL_OW 2
46520: ST_TO_ADDR
// break ;
46521: GO 46525
// end ; end ;
46523: GO 46462
46525: POP
46526: POP
// end ; end ;
46527: GO 46310
46529: POP
46530: POP
// if result and not asc then
46531: LD_VAR 0 5
46535: PUSH
46536: LD_VAR 0 3
46540: NOT
46541: AND
46542: IFFALSE 46559
// result := ReverseArray ( result ) ;
46544: LD_ADDR_VAR 0 5
46548: PUSH
46549: LD_VAR 0 5
46553: PPUSH
46554: CALL 73799 0 1
46558: ST_TO_ADDR
// tmp := [ ] ;
46559: LD_ADDR_VAR 0 8
46563: PUSH
46564: EMPTY
46565: ST_TO_ADDR
// if mode then
46566: LD_VAR 0 4
46570: IFFALSE 46634
// begin for i := 1 to result do
46572: LD_ADDR_VAR 0 6
46576: PUSH
46577: DOUBLE
46578: LD_INT 1
46580: DEC
46581: ST_TO_ADDR
46582: LD_VAR 0 5
46586: PUSH
46587: FOR_TO
46588: IFFALSE 46622
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
46590: LD_ADDR_VAR 0 8
46594: PUSH
46595: LD_VAR 0 8
46599: PPUSH
46600: LD_VAR 0 5
46604: PUSH
46605: LD_VAR 0 6
46609: ARRAY
46610: PUSH
46611: LD_INT 1
46613: ARRAY
46614: PPUSH
46615: CALL 78532 0 2
46619: ST_TO_ADDR
46620: GO 46587
46622: POP
46623: POP
// result := tmp ;
46624: LD_ADDR_VAR 0 5
46628: PUSH
46629: LD_VAR 0 8
46633: ST_TO_ADDR
// end ; end ;
46634: LD_VAR 0 5
46638: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
46639: LD_INT 0
46641: PPUSH
46642: PPUSH
46643: PPUSH
46644: PPUSH
// if not list then
46645: LD_VAR 0 3
46649: NOT
46650: IFFALSE 46654
// exit ;
46652: GO 47042
// result := [ ] ;
46654: LD_ADDR_VAR 0 6
46658: PUSH
46659: EMPTY
46660: ST_TO_ADDR
// for i in list do
46661: LD_ADDR_VAR 0 7
46665: PUSH
46666: LD_VAR 0 3
46670: PUSH
46671: FOR_IN
46672: IFFALSE 46874
// begin tmp := GetDistUnitXY ( i , x , y ) ;
46674: LD_ADDR_VAR 0 9
46678: PUSH
46679: LD_VAR 0 7
46683: PPUSH
46684: LD_VAR 0 1
46688: PPUSH
46689: LD_VAR 0 2
46693: PPUSH
46694: CALL_OW 297
46698: ST_TO_ADDR
// if not result then
46699: LD_VAR 0 6
46703: NOT
46704: IFFALSE 46730
// result := [ [ i , tmp ] ] else
46706: LD_ADDR_VAR 0 6
46710: PUSH
46711: LD_VAR 0 7
46715: PUSH
46716: LD_VAR 0 9
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: EMPTY
46726: LIST
46727: ST_TO_ADDR
46728: GO 46872
// begin if result [ result ] [ 2 ] <= tmp then
46730: LD_VAR 0 6
46734: PUSH
46735: LD_VAR 0 6
46739: ARRAY
46740: PUSH
46741: LD_INT 2
46743: ARRAY
46744: PUSH
46745: LD_VAR 0 9
46749: LESSEQUAL
46750: IFFALSE 46792
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
46752: LD_ADDR_VAR 0 6
46756: PUSH
46757: LD_VAR 0 6
46761: PPUSH
46762: LD_VAR 0 6
46766: PUSH
46767: LD_INT 1
46769: PLUS
46770: PPUSH
46771: LD_VAR 0 7
46775: PUSH
46776: LD_VAR 0 9
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PPUSH
46785: CALL_OW 2
46789: ST_TO_ADDR
46790: GO 46872
// for j := 1 to result do
46792: LD_ADDR_VAR 0 8
46796: PUSH
46797: DOUBLE
46798: LD_INT 1
46800: DEC
46801: ST_TO_ADDR
46802: LD_VAR 0 6
46806: PUSH
46807: FOR_TO
46808: IFFALSE 46870
// begin if tmp < result [ j ] [ 2 ] then
46810: LD_VAR 0 9
46814: PUSH
46815: LD_VAR 0 6
46819: PUSH
46820: LD_VAR 0 8
46824: ARRAY
46825: PUSH
46826: LD_INT 2
46828: ARRAY
46829: LESS
46830: IFFALSE 46868
// begin result := Insert ( result , j , [ i , tmp ] ) ;
46832: LD_ADDR_VAR 0 6
46836: PUSH
46837: LD_VAR 0 6
46841: PPUSH
46842: LD_VAR 0 8
46846: PPUSH
46847: LD_VAR 0 7
46851: PUSH
46852: LD_VAR 0 9
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PPUSH
46861: CALL_OW 2
46865: ST_TO_ADDR
// break ;
46866: GO 46870
// end ; end ;
46868: GO 46807
46870: POP
46871: POP
// end ; end ;
46872: GO 46671
46874: POP
46875: POP
// if result and not asc then
46876: LD_VAR 0 6
46880: PUSH
46881: LD_VAR 0 4
46885: NOT
46886: AND
46887: IFFALSE 46962
// begin tmp := result ;
46889: LD_ADDR_VAR 0 9
46893: PUSH
46894: LD_VAR 0 6
46898: ST_TO_ADDR
// for i = tmp downto 1 do
46899: LD_ADDR_VAR 0 7
46903: PUSH
46904: DOUBLE
46905: LD_VAR 0 9
46909: INC
46910: ST_TO_ADDR
46911: LD_INT 1
46913: PUSH
46914: FOR_DOWNTO
46915: IFFALSE 46960
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
46917: LD_ADDR_VAR 0 6
46921: PUSH
46922: LD_VAR 0 6
46926: PPUSH
46927: LD_VAR 0 9
46931: PUSH
46932: LD_VAR 0 7
46936: MINUS
46937: PUSH
46938: LD_INT 1
46940: PLUS
46941: PPUSH
46942: LD_VAR 0 9
46946: PUSH
46947: LD_VAR 0 7
46951: ARRAY
46952: PPUSH
46953: CALL_OW 1
46957: ST_TO_ADDR
46958: GO 46914
46960: POP
46961: POP
// end ; tmp := [ ] ;
46962: LD_ADDR_VAR 0 9
46966: PUSH
46967: EMPTY
46968: ST_TO_ADDR
// if mode then
46969: LD_VAR 0 5
46973: IFFALSE 47042
// begin for i = 1 to result do
46975: LD_ADDR_VAR 0 7
46979: PUSH
46980: DOUBLE
46981: LD_INT 1
46983: DEC
46984: ST_TO_ADDR
46985: LD_VAR 0 6
46989: PUSH
46990: FOR_TO
46991: IFFALSE 47030
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
46993: LD_ADDR_VAR 0 9
46997: PUSH
46998: LD_VAR 0 9
47002: PPUSH
47003: LD_VAR 0 7
47007: PPUSH
47008: LD_VAR 0 6
47012: PUSH
47013: LD_VAR 0 7
47017: ARRAY
47018: PUSH
47019: LD_INT 1
47021: ARRAY
47022: PPUSH
47023: CALL_OW 1
47027: ST_TO_ADDR
47028: GO 46990
47030: POP
47031: POP
// result := tmp ;
47032: LD_ADDR_VAR 0 6
47036: PUSH
47037: LD_VAR 0 9
47041: ST_TO_ADDR
// end ; end ;
47042: LD_VAR 0 6
47046: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
47047: LD_INT 0
47049: PPUSH
47050: PPUSH
47051: PPUSH
47052: PPUSH
47053: PPUSH
47054: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
47055: LD_ADDR_VAR 0 5
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: LD_INT 0
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: EMPTY
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: ST_TO_ADDR
// if not x or not y then
47077: LD_VAR 0 2
47081: NOT
47082: PUSH
47083: LD_VAR 0 3
47087: NOT
47088: OR
47089: IFFALSE 47093
// exit ;
47091: GO 48743
// if not range then
47093: LD_VAR 0 4
47097: NOT
47098: IFFALSE 47108
// range := 10 ;
47100: LD_ADDR_VAR 0 4
47104: PUSH
47105: LD_INT 10
47107: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
47108: LD_ADDR_VAR 0 8
47112: PUSH
47113: LD_INT 81
47115: PUSH
47116: LD_VAR 0 1
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 92
47127: PUSH
47128: LD_VAR 0 2
47132: PUSH
47133: LD_VAR 0 3
47137: PUSH
47138: LD_VAR 0 4
47142: PUSH
47143: EMPTY
47144: LIST
47145: LIST
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 3
47151: PUSH
47152: LD_INT 21
47154: PUSH
47155: LD_INT 3
47157: PUSH
47158: EMPTY
47159: LIST
47160: LIST
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: LIST
47170: PPUSH
47171: CALL_OW 69
47175: ST_TO_ADDR
// if not tmp then
47176: LD_VAR 0 8
47180: NOT
47181: IFFALSE 47185
// exit ;
47183: GO 48743
// for i in tmp do
47185: LD_ADDR_VAR 0 6
47189: PUSH
47190: LD_VAR 0 8
47194: PUSH
47195: FOR_IN
47196: IFFALSE 48718
// begin points := [ 0 , 0 , 0 ] ;
47198: LD_ADDR_VAR 0 9
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 0
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: LIST
47216: ST_TO_ADDR
// bpoints := 1 ;
47217: LD_ADDR_VAR 0 10
47221: PUSH
47222: LD_INT 1
47224: ST_TO_ADDR
// case GetType ( i ) of unit_human :
47225: LD_VAR 0 6
47229: PPUSH
47230: CALL_OW 247
47234: PUSH
47235: LD_INT 1
47237: DOUBLE
47238: EQUAL
47239: IFTRUE 47243
47241: GO 47821
47243: POP
// begin if GetClass ( i ) = 1 then
47244: LD_VAR 0 6
47248: PPUSH
47249: CALL_OW 257
47253: PUSH
47254: LD_INT 1
47256: EQUAL
47257: IFFALSE 47278
// points := [ 10 , 5 , 3 ] ;
47259: LD_ADDR_VAR 0 9
47263: PUSH
47264: LD_INT 10
47266: PUSH
47267: LD_INT 5
47269: PUSH
47270: LD_INT 3
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: LIST
47277: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
47278: LD_VAR 0 6
47282: PPUSH
47283: CALL_OW 257
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: LD_INT 3
47293: PUSH
47294: LD_INT 4
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: IN
47302: IFFALSE 47323
// points := [ 3 , 2 , 1 ] ;
47304: LD_ADDR_VAR 0 9
47308: PUSH
47309: LD_INT 3
47311: PUSH
47312: LD_INT 2
47314: PUSH
47315: LD_INT 1
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: LIST
47322: ST_TO_ADDR
// if GetClass ( i ) = 5 then
47323: LD_VAR 0 6
47327: PPUSH
47328: CALL_OW 257
47332: PUSH
47333: LD_INT 5
47335: EQUAL
47336: IFFALSE 47357
// points := [ 130 , 5 , 2 ] ;
47338: LD_ADDR_VAR 0 9
47342: PUSH
47343: LD_INT 130
47345: PUSH
47346: LD_INT 5
47348: PUSH
47349: LD_INT 2
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: ST_TO_ADDR
// if GetClass ( i ) = 8 then
47357: LD_VAR 0 6
47361: PPUSH
47362: CALL_OW 257
47366: PUSH
47367: LD_INT 8
47369: EQUAL
47370: IFFALSE 47391
// points := [ 35 , 35 , 30 ] ;
47372: LD_ADDR_VAR 0 9
47376: PUSH
47377: LD_INT 35
47379: PUSH
47380: LD_INT 35
47382: PUSH
47383: LD_INT 30
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: LIST
47390: ST_TO_ADDR
// if GetClass ( i ) = 9 then
47391: LD_VAR 0 6
47395: PPUSH
47396: CALL_OW 257
47400: PUSH
47401: LD_INT 9
47403: EQUAL
47404: IFFALSE 47425
// points := [ 20 , 55 , 40 ] ;
47406: LD_ADDR_VAR 0 9
47410: PUSH
47411: LD_INT 20
47413: PUSH
47414: LD_INT 55
47416: PUSH
47417: LD_INT 40
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: LIST
47424: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
47425: LD_VAR 0 6
47429: PPUSH
47430: CALL_OW 257
47434: PUSH
47435: LD_INT 12
47437: PUSH
47438: LD_INT 16
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: IN
47445: IFFALSE 47466
// points := [ 5 , 3 , 2 ] ;
47447: LD_ADDR_VAR 0 9
47451: PUSH
47452: LD_INT 5
47454: PUSH
47455: LD_INT 3
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: ST_TO_ADDR
// if GetClass ( i ) = 17 then
47466: LD_VAR 0 6
47470: PPUSH
47471: CALL_OW 257
47475: PUSH
47476: LD_INT 17
47478: EQUAL
47479: IFFALSE 47500
// points := [ 100 , 50 , 75 ] ;
47481: LD_ADDR_VAR 0 9
47485: PUSH
47486: LD_INT 100
47488: PUSH
47489: LD_INT 50
47491: PUSH
47492: LD_INT 75
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: LIST
47499: ST_TO_ADDR
// if GetClass ( i ) = 15 then
47500: LD_VAR 0 6
47504: PPUSH
47505: CALL_OW 257
47509: PUSH
47510: LD_INT 15
47512: EQUAL
47513: IFFALSE 47534
// points := [ 10 , 5 , 3 ] ;
47515: LD_ADDR_VAR 0 9
47519: PUSH
47520: LD_INT 10
47522: PUSH
47523: LD_INT 5
47525: PUSH
47526: LD_INT 3
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: LIST
47533: ST_TO_ADDR
// if GetClass ( i ) = 14 then
47534: LD_VAR 0 6
47538: PPUSH
47539: CALL_OW 257
47543: PUSH
47544: LD_INT 14
47546: EQUAL
47547: IFFALSE 47568
// points := [ 10 , 0 , 0 ] ;
47549: LD_ADDR_VAR 0 9
47553: PUSH
47554: LD_INT 10
47556: PUSH
47557: LD_INT 0
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: LIST
47567: ST_TO_ADDR
// if GetClass ( i ) = 11 then
47568: LD_VAR 0 6
47572: PPUSH
47573: CALL_OW 257
47577: PUSH
47578: LD_INT 11
47580: EQUAL
47581: IFFALSE 47602
// points := [ 30 , 10 , 5 ] ;
47583: LD_ADDR_VAR 0 9
47587: PUSH
47588: LD_INT 30
47590: PUSH
47591: LD_INT 10
47593: PUSH
47594: LD_INT 5
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: LIST
47601: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
47602: LD_VAR 0 1
47606: PPUSH
47607: LD_INT 5
47609: PPUSH
47610: CALL_OW 321
47614: PUSH
47615: LD_INT 2
47617: EQUAL
47618: IFFALSE 47635
// bpoints := bpoints * 1.8 ;
47620: LD_ADDR_VAR 0 10
47624: PUSH
47625: LD_VAR 0 10
47629: PUSH
47630: LD_REAL  1.80000000000000E+0000
47633: MUL
47634: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
47635: LD_VAR 0 6
47639: PPUSH
47640: CALL_OW 257
47644: PUSH
47645: LD_INT 1
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 3
47653: PUSH
47654: LD_INT 4
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: LIST
47661: LIST
47662: IN
47663: PUSH
47664: LD_VAR 0 1
47668: PPUSH
47669: LD_INT 51
47671: PPUSH
47672: CALL_OW 321
47676: PUSH
47677: LD_INT 2
47679: EQUAL
47680: AND
47681: IFFALSE 47698
// bpoints := bpoints * 1.2 ;
47683: LD_ADDR_VAR 0 10
47687: PUSH
47688: LD_VAR 0 10
47692: PUSH
47693: LD_REAL  1.20000000000000E+0000
47696: MUL
47697: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
47698: LD_VAR 0 6
47702: PPUSH
47703: CALL_OW 257
47707: PUSH
47708: LD_INT 5
47710: PUSH
47711: LD_INT 7
47713: PUSH
47714: LD_INT 9
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: IN
47722: PUSH
47723: LD_VAR 0 1
47727: PPUSH
47728: LD_INT 52
47730: PPUSH
47731: CALL_OW 321
47735: PUSH
47736: LD_INT 2
47738: EQUAL
47739: AND
47740: IFFALSE 47757
// bpoints := bpoints * 1.5 ;
47742: LD_ADDR_VAR 0 10
47746: PUSH
47747: LD_VAR 0 10
47751: PUSH
47752: LD_REAL  1.50000000000000E+0000
47755: MUL
47756: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
47757: LD_VAR 0 1
47761: PPUSH
47762: LD_INT 66
47764: PPUSH
47765: CALL_OW 321
47769: PUSH
47770: LD_INT 2
47772: EQUAL
47773: IFFALSE 47790
// bpoints := bpoints * 1.1 ;
47775: LD_ADDR_VAR 0 10
47779: PUSH
47780: LD_VAR 0 10
47784: PUSH
47785: LD_REAL  1.10000000000000E+0000
47788: MUL
47789: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
47790: LD_ADDR_VAR 0 10
47794: PUSH
47795: LD_VAR 0 10
47799: PUSH
47800: LD_VAR 0 6
47804: PPUSH
47805: LD_INT 1
47807: PPUSH
47808: CALL_OW 259
47812: PUSH
47813: LD_REAL  1.15000000000000E+0000
47816: MUL
47817: MUL
47818: ST_TO_ADDR
// end ; unit_vehicle :
47819: GO 48647
47821: LD_INT 2
47823: DOUBLE
47824: EQUAL
47825: IFTRUE 47829
47827: GO 48635
47829: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
47830: LD_VAR 0 6
47834: PPUSH
47835: CALL_OW 264
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: LD_INT 42
47845: PUSH
47846: LD_INT 24
47848: PUSH
47849: EMPTY
47850: LIST
47851: LIST
47852: LIST
47853: IN
47854: IFFALSE 47875
// points := [ 25 , 5 , 3 ] ;
47856: LD_ADDR_VAR 0 9
47860: PUSH
47861: LD_INT 25
47863: PUSH
47864: LD_INT 5
47866: PUSH
47867: LD_INT 3
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: LIST
47874: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
47875: LD_VAR 0 6
47879: PPUSH
47880: CALL_OW 264
47884: PUSH
47885: LD_INT 4
47887: PUSH
47888: LD_INT 43
47890: PUSH
47891: LD_INT 25
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: LIST
47898: IN
47899: IFFALSE 47920
// points := [ 40 , 15 , 5 ] ;
47901: LD_ADDR_VAR 0 9
47905: PUSH
47906: LD_INT 40
47908: PUSH
47909: LD_INT 15
47911: PUSH
47912: LD_INT 5
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: LIST
47919: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
47920: LD_VAR 0 6
47924: PPUSH
47925: CALL_OW 264
47929: PUSH
47930: LD_INT 3
47932: PUSH
47933: LD_INT 23
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: IN
47940: IFFALSE 47961
// points := [ 7 , 25 , 8 ] ;
47942: LD_ADDR_VAR 0 9
47946: PUSH
47947: LD_INT 7
47949: PUSH
47950: LD_INT 25
47952: PUSH
47953: LD_INT 8
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: LIST
47960: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
47961: LD_VAR 0 6
47965: PPUSH
47966: CALL_OW 264
47970: PUSH
47971: LD_INT 5
47973: PUSH
47974: LD_INT 27
47976: PUSH
47977: LD_INT 44
47979: PUSH
47980: EMPTY
47981: LIST
47982: LIST
47983: LIST
47984: IN
47985: IFFALSE 48006
// points := [ 14 , 50 , 16 ] ;
47987: LD_ADDR_VAR 0 9
47991: PUSH
47992: LD_INT 14
47994: PUSH
47995: LD_INT 50
47997: PUSH
47998: LD_INT 16
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: LIST
48005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
48006: LD_VAR 0 6
48010: PPUSH
48011: CALL_OW 264
48015: PUSH
48016: LD_INT 6
48018: PUSH
48019: LD_INT 46
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: IN
48026: IFFALSE 48047
// points := [ 32 , 120 , 70 ] ;
48028: LD_ADDR_VAR 0 9
48032: PUSH
48033: LD_INT 32
48035: PUSH
48036: LD_INT 120
48038: PUSH
48039: LD_INT 70
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: LIST
48046: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
48047: LD_VAR 0 6
48051: PPUSH
48052: CALL_OW 264
48056: PUSH
48057: LD_INT 7
48059: PUSH
48060: LD_INT 28
48062: PUSH
48063: LD_INT 45
48065: PUSH
48066: LD_INT 92
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: LIST
48074: IN
48075: IFFALSE 48096
// points := [ 35 , 20 , 45 ] ;
48077: LD_ADDR_VAR 0 9
48081: PUSH
48082: LD_INT 35
48084: PUSH
48085: LD_INT 20
48087: PUSH
48088: LD_INT 45
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: LIST
48095: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
48096: LD_VAR 0 6
48100: PPUSH
48101: CALL_OW 264
48105: PUSH
48106: LD_INT 47
48108: PUSH
48109: EMPTY
48110: LIST
48111: IN
48112: IFFALSE 48133
// points := [ 67 , 45 , 75 ] ;
48114: LD_ADDR_VAR 0 9
48118: PUSH
48119: LD_INT 67
48121: PUSH
48122: LD_INT 45
48124: PUSH
48125: LD_INT 75
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: LIST
48132: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
48133: LD_VAR 0 6
48137: PPUSH
48138: CALL_OW 264
48142: PUSH
48143: LD_INT 26
48145: PUSH
48146: EMPTY
48147: LIST
48148: IN
48149: IFFALSE 48170
// points := [ 120 , 30 , 80 ] ;
48151: LD_ADDR_VAR 0 9
48155: PUSH
48156: LD_INT 120
48158: PUSH
48159: LD_INT 30
48161: PUSH
48162: LD_INT 80
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: LIST
48169: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
48170: LD_VAR 0 6
48174: PPUSH
48175: CALL_OW 264
48179: PUSH
48180: LD_INT 22
48182: PUSH
48183: EMPTY
48184: LIST
48185: IN
48186: IFFALSE 48207
// points := [ 40 , 1 , 1 ] ;
48188: LD_ADDR_VAR 0 9
48192: PUSH
48193: LD_INT 40
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: LIST
48206: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
48207: LD_VAR 0 6
48211: PPUSH
48212: CALL_OW 264
48216: PUSH
48217: LD_INT 29
48219: PUSH
48220: EMPTY
48221: LIST
48222: IN
48223: IFFALSE 48244
// points := [ 70 , 200 , 400 ] ;
48225: LD_ADDR_VAR 0 9
48229: PUSH
48230: LD_INT 70
48232: PUSH
48233: LD_INT 200
48235: PUSH
48236: LD_INT 400
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: LIST
48243: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
48244: LD_VAR 0 6
48248: PPUSH
48249: CALL_OW 264
48253: PUSH
48254: LD_INT 14
48256: PUSH
48257: LD_INT 53
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: IN
48264: IFFALSE 48285
// points := [ 40 , 10 , 20 ] ;
48266: LD_ADDR_VAR 0 9
48270: PUSH
48271: LD_INT 40
48273: PUSH
48274: LD_INT 10
48276: PUSH
48277: LD_INT 20
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: LIST
48284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
48285: LD_VAR 0 6
48289: PPUSH
48290: CALL_OW 264
48294: PUSH
48295: LD_INT 9
48297: PUSH
48298: EMPTY
48299: LIST
48300: IN
48301: IFFALSE 48322
// points := [ 5 , 70 , 20 ] ;
48303: LD_ADDR_VAR 0 9
48307: PUSH
48308: LD_INT 5
48310: PUSH
48311: LD_INT 70
48313: PUSH
48314: LD_INT 20
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
48322: LD_VAR 0 6
48326: PPUSH
48327: CALL_OW 264
48331: PUSH
48332: LD_INT 10
48334: PUSH
48335: EMPTY
48336: LIST
48337: IN
48338: IFFALSE 48359
// points := [ 35 , 110 , 70 ] ;
48340: LD_ADDR_VAR 0 9
48344: PUSH
48345: LD_INT 35
48347: PUSH
48348: LD_INT 110
48350: PUSH
48351: LD_INT 70
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: LIST
48358: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
48359: LD_VAR 0 6
48363: PPUSH
48364: CALL_OW 265
48368: PUSH
48369: LD_INT 25
48371: EQUAL
48372: IFFALSE 48393
// points := [ 80 , 65 , 100 ] ;
48374: LD_ADDR_VAR 0 9
48378: PUSH
48379: LD_INT 80
48381: PUSH
48382: LD_INT 65
48384: PUSH
48385: LD_INT 100
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: LIST
48392: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
48393: LD_VAR 0 6
48397: PPUSH
48398: CALL_OW 263
48402: PUSH
48403: LD_INT 1
48405: EQUAL
48406: IFFALSE 48441
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
48408: LD_ADDR_VAR 0 10
48412: PUSH
48413: LD_VAR 0 10
48417: PUSH
48418: LD_VAR 0 6
48422: PPUSH
48423: CALL_OW 311
48427: PPUSH
48428: LD_INT 3
48430: PPUSH
48431: CALL_OW 259
48435: PUSH
48436: LD_INT 4
48438: MUL
48439: MUL
48440: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
48441: LD_VAR 0 6
48445: PPUSH
48446: CALL_OW 263
48450: PUSH
48451: LD_INT 2
48453: EQUAL
48454: IFFALSE 48505
// begin j := IsControledBy ( i ) ;
48456: LD_ADDR_VAR 0 7
48460: PUSH
48461: LD_VAR 0 6
48465: PPUSH
48466: CALL_OW 312
48470: ST_TO_ADDR
// if j then
48471: LD_VAR 0 7
48475: IFFALSE 48505
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
48477: LD_ADDR_VAR 0 10
48481: PUSH
48482: LD_VAR 0 10
48486: PUSH
48487: LD_VAR 0 7
48491: PPUSH
48492: LD_INT 3
48494: PPUSH
48495: CALL_OW 259
48499: PUSH
48500: LD_INT 3
48502: MUL
48503: MUL
48504: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
48505: LD_VAR 0 6
48509: PPUSH
48510: CALL_OW 264
48514: PUSH
48515: LD_INT 5
48517: PUSH
48518: LD_INT 6
48520: PUSH
48521: LD_INT 46
48523: PUSH
48524: LD_INT 44
48526: PUSH
48527: LD_INT 47
48529: PUSH
48530: LD_INT 45
48532: PUSH
48533: LD_INT 28
48535: PUSH
48536: LD_INT 7
48538: PUSH
48539: LD_INT 27
48541: PUSH
48542: LD_INT 29
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: LIST
48552: LIST
48553: LIST
48554: LIST
48555: LIST
48556: IN
48557: PUSH
48558: LD_VAR 0 1
48562: PPUSH
48563: LD_INT 52
48565: PPUSH
48566: CALL_OW 321
48570: PUSH
48571: LD_INT 2
48573: EQUAL
48574: AND
48575: IFFALSE 48592
// bpoints := bpoints * 1.2 ;
48577: LD_ADDR_VAR 0 10
48581: PUSH
48582: LD_VAR 0 10
48586: PUSH
48587: LD_REAL  1.20000000000000E+0000
48590: MUL
48591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
48592: LD_VAR 0 6
48596: PPUSH
48597: CALL_OW 264
48601: PUSH
48602: LD_INT 6
48604: PUSH
48605: LD_INT 46
48607: PUSH
48608: LD_INT 47
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: LIST
48615: IN
48616: IFFALSE 48633
// bpoints := bpoints * 1.2 ;
48618: LD_ADDR_VAR 0 10
48622: PUSH
48623: LD_VAR 0 10
48627: PUSH
48628: LD_REAL  1.20000000000000E+0000
48631: MUL
48632: ST_TO_ADDR
// end ; unit_building :
48633: GO 48647
48635: LD_INT 3
48637: DOUBLE
48638: EQUAL
48639: IFTRUE 48643
48641: GO 48646
48643: POP
// ; end ;
48644: GO 48647
48646: POP
// for j = 1 to 3 do
48647: LD_ADDR_VAR 0 7
48651: PUSH
48652: DOUBLE
48653: LD_INT 1
48655: DEC
48656: ST_TO_ADDR
48657: LD_INT 3
48659: PUSH
48660: FOR_TO
48661: IFFALSE 48714
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
48663: LD_ADDR_VAR 0 5
48667: PUSH
48668: LD_VAR 0 5
48672: PPUSH
48673: LD_VAR 0 7
48677: PPUSH
48678: LD_VAR 0 5
48682: PUSH
48683: LD_VAR 0 7
48687: ARRAY
48688: PUSH
48689: LD_VAR 0 9
48693: PUSH
48694: LD_VAR 0 7
48698: ARRAY
48699: PUSH
48700: LD_VAR 0 10
48704: MUL
48705: PLUS
48706: PPUSH
48707: CALL_OW 1
48711: ST_TO_ADDR
48712: GO 48660
48714: POP
48715: POP
// end ;
48716: GO 47195
48718: POP
48719: POP
// result := Replace ( result , 4 , tmp ) ;
48720: LD_ADDR_VAR 0 5
48724: PUSH
48725: LD_VAR 0 5
48729: PPUSH
48730: LD_INT 4
48732: PPUSH
48733: LD_VAR 0 8
48737: PPUSH
48738: CALL_OW 1
48742: ST_TO_ADDR
// end ;
48743: LD_VAR 0 5
48747: RET
// export function DangerAtRange ( unit , range ) ; begin
48748: LD_INT 0
48750: PPUSH
// if not unit then
48751: LD_VAR 0 1
48755: NOT
48756: IFFALSE 48760
// exit ;
48758: GO 48805
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
48760: LD_ADDR_VAR 0 3
48764: PUSH
48765: LD_VAR 0 1
48769: PPUSH
48770: CALL_OW 255
48774: PPUSH
48775: LD_VAR 0 1
48779: PPUSH
48780: CALL_OW 250
48784: PPUSH
48785: LD_VAR 0 1
48789: PPUSH
48790: CALL_OW 251
48794: PPUSH
48795: LD_VAR 0 2
48799: PPUSH
48800: CALL 47047 0 4
48804: ST_TO_ADDR
// end ;
48805: LD_VAR 0 3
48809: RET
// export function DangerInArea ( side , area ) ; begin
48810: LD_INT 0
48812: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
48813: LD_ADDR_VAR 0 3
48817: PUSH
48818: LD_VAR 0 2
48822: PPUSH
48823: LD_INT 81
48825: PUSH
48826: LD_VAR 0 1
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PPUSH
48835: CALL_OW 70
48839: ST_TO_ADDR
// end ;
48840: LD_VAR 0 3
48844: RET
// export function IsExtension ( b ) ; begin
48845: LD_INT 0
48847: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
48848: LD_ADDR_VAR 0 2
48852: PUSH
48853: LD_VAR 0 1
48857: PUSH
48858: LD_INT 23
48860: PUSH
48861: LD_INT 20
48863: PUSH
48864: LD_INT 22
48866: PUSH
48867: LD_INT 17
48869: PUSH
48870: LD_INT 24
48872: PUSH
48873: LD_INT 21
48875: PUSH
48876: LD_INT 19
48878: PUSH
48879: LD_INT 16
48881: PUSH
48882: LD_INT 25
48884: PUSH
48885: LD_INT 18
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: IN
48900: ST_TO_ADDR
// end ;
48901: LD_VAR 0 2
48905: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
48906: LD_INT 0
48908: PPUSH
48909: PPUSH
48910: PPUSH
// result := [ ] ;
48911: LD_ADDR_VAR 0 4
48915: PUSH
48916: EMPTY
48917: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
48918: LD_ADDR_VAR 0 5
48922: PUSH
48923: LD_VAR 0 2
48927: PPUSH
48928: LD_INT 21
48930: PUSH
48931: LD_INT 3
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PPUSH
48938: CALL_OW 70
48942: ST_TO_ADDR
// if not tmp then
48943: LD_VAR 0 5
48947: NOT
48948: IFFALSE 48952
// exit ;
48950: GO 49016
// if checkLink then
48952: LD_VAR 0 3
48956: IFFALSE 49006
// begin for i in tmp do
48958: LD_ADDR_VAR 0 6
48962: PUSH
48963: LD_VAR 0 5
48967: PUSH
48968: FOR_IN
48969: IFFALSE 49004
// if GetBase ( i ) <> base then
48971: LD_VAR 0 6
48975: PPUSH
48976: CALL_OW 274
48980: PUSH
48981: LD_VAR 0 1
48985: NONEQUAL
48986: IFFALSE 49002
// ComLinkToBase ( base , i ) ;
48988: LD_VAR 0 1
48992: PPUSH
48993: LD_VAR 0 6
48997: PPUSH
48998: CALL_OW 169
49002: GO 48968
49004: POP
49005: POP
// end ; result := tmp ;
49006: LD_ADDR_VAR 0 4
49010: PUSH
49011: LD_VAR 0 5
49015: ST_TO_ADDR
// end ;
49016: LD_VAR 0 4
49020: RET
// export function ComComplete ( units , b ) ; var i ; begin
49021: LD_INT 0
49023: PPUSH
49024: PPUSH
// if not units then
49025: LD_VAR 0 1
49029: NOT
49030: IFFALSE 49034
// exit ;
49032: GO 49124
// for i in units do
49034: LD_ADDR_VAR 0 4
49038: PUSH
49039: LD_VAR 0 1
49043: PUSH
49044: FOR_IN
49045: IFFALSE 49122
// if BuildingStatus ( b ) = bs_build then
49047: LD_VAR 0 2
49051: PPUSH
49052: CALL_OW 461
49056: PUSH
49057: LD_INT 1
49059: EQUAL
49060: IFFALSE 49120
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
49062: LD_VAR 0 4
49066: PPUSH
49067: LD_STRING h
49069: PUSH
49070: LD_VAR 0 2
49074: PPUSH
49075: CALL_OW 250
49079: PUSH
49080: LD_VAR 0 2
49084: PPUSH
49085: CALL_OW 251
49089: PUSH
49090: LD_VAR 0 2
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: PUSH
49113: EMPTY
49114: LIST
49115: PPUSH
49116: CALL_OW 446
49120: GO 49044
49122: POP
49123: POP
// end ;
49124: LD_VAR 0 3
49128: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
49129: LD_INT 0
49131: PPUSH
49132: PPUSH
49133: PPUSH
49134: PPUSH
49135: PPUSH
49136: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
49137: LD_VAR 0 1
49141: NOT
49142: PUSH
49143: LD_VAR 0 1
49147: PPUSH
49148: CALL_OW 263
49152: PUSH
49153: LD_INT 2
49155: NONEQUAL
49156: OR
49157: IFFALSE 49161
// exit ;
49159: GO 49477
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
49161: LD_ADDR_VAR 0 6
49165: PUSH
49166: LD_INT 22
49168: PUSH
49169: LD_VAR 0 1
49173: PPUSH
49174: CALL_OW 255
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 30
49188: PUSH
49189: LD_INT 36
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 34
49198: PUSH
49199: LD_INT 31
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: LIST
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PPUSH
49215: CALL_OW 69
49219: ST_TO_ADDR
// if not tmp then
49220: LD_VAR 0 6
49224: NOT
49225: IFFALSE 49229
// exit ;
49227: GO 49477
// result := [ ] ;
49229: LD_ADDR_VAR 0 2
49233: PUSH
49234: EMPTY
49235: ST_TO_ADDR
// for i in tmp do
49236: LD_ADDR_VAR 0 3
49240: PUSH
49241: LD_VAR 0 6
49245: PUSH
49246: FOR_IN
49247: IFFALSE 49318
// begin t := UnitsInside ( i ) ;
49249: LD_ADDR_VAR 0 4
49253: PUSH
49254: LD_VAR 0 3
49258: PPUSH
49259: CALL_OW 313
49263: ST_TO_ADDR
// if t then
49264: LD_VAR 0 4
49268: IFFALSE 49316
// for j in t do
49270: LD_ADDR_VAR 0 7
49274: PUSH
49275: LD_VAR 0 4
49279: PUSH
49280: FOR_IN
49281: IFFALSE 49314
// result := Replace ( result , result + 1 , j ) ;
49283: LD_ADDR_VAR 0 2
49287: PUSH
49288: LD_VAR 0 2
49292: PPUSH
49293: LD_VAR 0 2
49297: PUSH
49298: LD_INT 1
49300: PLUS
49301: PPUSH
49302: LD_VAR 0 7
49306: PPUSH
49307: CALL_OW 1
49311: ST_TO_ADDR
49312: GO 49280
49314: POP
49315: POP
// end ;
49316: GO 49246
49318: POP
49319: POP
// if not result then
49320: LD_VAR 0 2
49324: NOT
49325: IFFALSE 49329
// exit ;
49327: GO 49477
// mech := result [ 1 ] ;
49329: LD_ADDR_VAR 0 5
49333: PUSH
49334: LD_VAR 0 2
49338: PUSH
49339: LD_INT 1
49341: ARRAY
49342: ST_TO_ADDR
// if result > 1 then
49343: LD_VAR 0 2
49347: PUSH
49348: LD_INT 1
49350: GREATER
49351: IFFALSE 49463
// begin for i = 2 to result do
49353: LD_ADDR_VAR 0 3
49357: PUSH
49358: DOUBLE
49359: LD_INT 2
49361: DEC
49362: ST_TO_ADDR
49363: LD_VAR 0 2
49367: PUSH
49368: FOR_TO
49369: IFFALSE 49461
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
49371: LD_ADDR_VAR 0 4
49375: PUSH
49376: LD_VAR 0 2
49380: PUSH
49381: LD_VAR 0 3
49385: ARRAY
49386: PPUSH
49387: LD_INT 3
49389: PPUSH
49390: CALL_OW 259
49394: PUSH
49395: LD_VAR 0 2
49399: PUSH
49400: LD_VAR 0 3
49404: ARRAY
49405: PPUSH
49406: CALL_OW 432
49410: MINUS
49411: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
49412: LD_VAR 0 4
49416: PUSH
49417: LD_VAR 0 5
49421: PPUSH
49422: LD_INT 3
49424: PPUSH
49425: CALL_OW 259
49429: PUSH
49430: LD_VAR 0 5
49434: PPUSH
49435: CALL_OW 432
49439: MINUS
49440: GREATEREQUAL
49441: IFFALSE 49459
// mech := result [ i ] ;
49443: LD_ADDR_VAR 0 5
49447: PUSH
49448: LD_VAR 0 2
49452: PUSH
49453: LD_VAR 0 3
49457: ARRAY
49458: ST_TO_ADDR
// end ;
49459: GO 49368
49461: POP
49462: POP
// end ; ComLinkTo ( vehicle , mech ) ;
49463: LD_VAR 0 1
49467: PPUSH
49468: LD_VAR 0 5
49472: PPUSH
49473: CALL_OW 135
// end ;
49477: LD_VAR 0 2
49481: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
49482: LD_INT 0
49484: PPUSH
49485: PPUSH
49486: PPUSH
49487: PPUSH
49488: PPUSH
49489: PPUSH
49490: PPUSH
49491: PPUSH
49492: PPUSH
49493: PPUSH
49494: PPUSH
49495: PPUSH
49496: PPUSH
// result := [ ] ;
49497: LD_ADDR_VAR 0 7
49501: PUSH
49502: EMPTY
49503: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
49504: LD_VAR 0 1
49508: PPUSH
49509: CALL_OW 266
49513: PUSH
49514: LD_INT 0
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: IN
49524: NOT
49525: IFFALSE 49529
// exit ;
49527: GO 51163
// if name then
49529: LD_VAR 0 3
49533: IFFALSE 49549
// SetBName ( base_dep , name ) ;
49535: LD_VAR 0 1
49539: PPUSH
49540: LD_VAR 0 3
49544: PPUSH
49545: CALL_OW 500
// base := GetBase ( base_dep ) ;
49549: LD_ADDR_VAR 0 15
49553: PUSH
49554: LD_VAR 0 1
49558: PPUSH
49559: CALL_OW 274
49563: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
49564: LD_ADDR_VAR 0 16
49568: PUSH
49569: LD_VAR 0 1
49573: PPUSH
49574: CALL_OW 255
49578: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
49579: LD_ADDR_VAR 0 17
49583: PUSH
49584: LD_VAR 0 1
49588: PPUSH
49589: CALL_OW 248
49593: ST_TO_ADDR
// if sources then
49594: LD_VAR 0 5
49598: IFFALSE 49645
// for i = 1 to 3 do
49600: LD_ADDR_VAR 0 8
49604: PUSH
49605: DOUBLE
49606: LD_INT 1
49608: DEC
49609: ST_TO_ADDR
49610: LD_INT 3
49612: PUSH
49613: FOR_TO
49614: IFFALSE 49643
// AddResourceType ( base , i , sources [ i ] ) ;
49616: LD_VAR 0 15
49620: PPUSH
49621: LD_VAR 0 8
49625: PPUSH
49626: LD_VAR 0 5
49630: PUSH
49631: LD_VAR 0 8
49635: ARRAY
49636: PPUSH
49637: CALL_OW 276
49641: GO 49613
49643: POP
49644: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
49645: LD_ADDR_VAR 0 18
49649: PUSH
49650: LD_VAR 0 15
49654: PPUSH
49655: LD_VAR 0 2
49659: PPUSH
49660: LD_INT 1
49662: PPUSH
49663: CALL 48906 0 3
49667: ST_TO_ADDR
// InitHc ;
49668: CALL_OW 19
// InitUc ;
49672: CALL_OW 18
// uc_side := side ;
49676: LD_ADDR_OWVAR 20
49680: PUSH
49681: LD_VAR 0 16
49685: ST_TO_ADDR
// uc_nation := nation ;
49686: LD_ADDR_OWVAR 21
49690: PUSH
49691: LD_VAR 0 17
49695: ST_TO_ADDR
// if buildings then
49696: LD_VAR 0 18
49700: IFFALSE 51022
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
49702: LD_ADDR_VAR 0 19
49706: PUSH
49707: LD_VAR 0 18
49711: PPUSH
49712: LD_INT 2
49714: PUSH
49715: LD_INT 30
49717: PUSH
49718: LD_INT 29
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 30
49727: PUSH
49728: LD_INT 30
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: LIST
49739: PPUSH
49740: CALL_OW 72
49744: ST_TO_ADDR
// if tmp then
49745: LD_VAR 0 19
49749: IFFALSE 49797
// for i in tmp do
49751: LD_ADDR_VAR 0 8
49755: PUSH
49756: LD_VAR 0 19
49760: PUSH
49761: FOR_IN
49762: IFFALSE 49795
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
49764: LD_VAR 0 8
49768: PPUSH
49769: CALL_OW 250
49773: PPUSH
49774: LD_VAR 0 8
49778: PPUSH
49779: CALL_OW 251
49783: PPUSH
49784: LD_VAR 0 16
49788: PPUSH
49789: CALL_OW 441
49793: GO 49761
49795: POP
49796: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
49797: LD_VAR 0 18
49801: PPUSH
49802: LD_INT 2
49804: PUSH
49805: LD_INT 30
49807: PUSH
49808: LD_INT 32
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 30
49817: PUSH
49818: LD_INT 33
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: LIST
49829: PPUSH
49830: CALL_OW 72
49834: IFFALSE 49922
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
49836: LD_ADDR_VAR 0 8
49840: PUSH
49841: LD_VAR 0 18
49845: PPUSH
49846: LD_INT 2
49848: PUSH
49849: LD_INT 30
49851: PUSH
49852: LD_INT 32
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 30
49861: PUSH
49862: LD_INT 33
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: LIST
49873: PPUSH
49874: CALL_OW 72
49878: PUSH
49879: FOR_IN
49880: IFFALSE 49920
// begin if not GetBWeapon ( i ) then
49882: LD_VAR 0 8
49886: PPUSH
49887: CALL_OW 269
49891: NOT
49892: IFFALSE 49918
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
49894: LD_VAR 0 8
49898: PPUSH
49899: LD_VAR 0 8
49903: PPUSH
49904: LD_VAR 0 2
49908: PPUSH
49909: CALL 51168 0 2
49913: PPUSH
49914: CALL_OW 431
// end ;
49918: GO 49879
49920: POP
49921: POP
// end ; for i = 1 to personel do
49922: LD_ADDR_VAR 0 8
49926: PUSH
49927: DOUBLE
49928: LD_INT 1
49930: DEC
49931: ST_TO_ADDR
49932: LD_VAR 0 6
49936: PUSH
49937: FOR_TO
49938: IFFALSE 51002
// begin if i > 4 then
49940: LD_VAR 0 8
49944: PUSH
49945: LD_INT 4
49947: GREATER
49948: IFFALSE 49952
// break ;
49950: GO 51002
// case i of 1 :
49952: LD_VAR 0 8
49956: PUSH
49957: LD_INT 1
49959: DOUBLE
49960: EQUAL
49961: IFTRUE 49965
49963: GO 50045
49965: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
49966: LD_ADDR_VAR 0 12
49970: PUSH
49971: LD_VAR 0 18
49975: PPUSH
49976: LD_INT 22
49978: PUSH
49979: LD_VAR 0 16
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 58
49990: PUSH
49991: EMPTY
49992: LIST
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: LD_INT 30
49999: PUSH
50000: LD_INT 32
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 30
50009: PUSH
50010: LD_INT 4
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 30
50019: PUSH
50020: LD_INT 5
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: LIST
50037: PPUSH
50038: CALL_OW 72
50042: ST_TO_ADDR
50043: GO 50267
50045: LD_INT 2
50047: DOUBLE
50048: EQUAL
50049: IFTRUE 50053
50051: GO 50115
50053: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
50054: LD_ADDR_VAR 0 12
50058: PUSH
50059: LD_VAR 0 18
50063: PPUSH
50064: LD_INT 22
50066: PUSH
50067: LD_VAR 0 16
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 2
50078: PUSH
50079: LD_INT 30
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 30
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: LIST
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PPUSH
50108: CALL_OW 72
50112: ST_TO_ADDR
50113: GO 50267
50115: LD_INT 3
50117: DOUBLE
50118: EQUAL
50119: IFTRUE 50123
50121: GO 50185
50123: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
50124: LD_ADDR_VAR 0 12
50128: PUSH
50129: LD_VAR 0 18
50133: PPUSH
50134: LD_INT 22
50136: PUSH
50137: LD_VAR 0 16
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 2
50148: PUSH
50149: LD_INT 30
50151: PUSH
50152: LD_INT 2
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 30
50161: PUSH
50162: LD_INT 3
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: LIST
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PPUSH
50178: CALL_OW 72
50182: ST_TO_ADDR
50183: GO 50267
50185: LD_INT 4
50187: DOUBLE
50188: EQUAL
50189: IFTRUE 50193
50191: GO 50266
50193: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
50194: LD_ADDR_VAR 0 12
50198: PUSH
50199: LD_VAR 0 18
50203: PPUSH
50204: LD_INT 22
50206: PUSH
50207: LD_VAR 0 16
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: LD_INT 30
50221: PUSH
50222: LD_INT 6
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 30
50231: PUSH
50232: LD_INT 7
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 30
50241: PUSH
50242: LD_INT 8
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PPUSH
50259: CALL_OW 72
50263: ST_TO_ADDR
50264: GO 50267
50266: POP
// if i = 1 then
50267: LD_VAR 0 8
50271: PUSH
50272: LD_INT 1
50274: EQUAL
50275: IFFALSE 50386
// begin tmp := [ ] ;
50277: LD_ADDR_VAR 0 19
50281: PUSH
50282: EMPTY
50283: ST_TO_ADDR
// for j in f do
50284: LD_ADDR_VAR 0 9
50288: PUSH
50289: LD_VAR 0 12
50293: PUSH
50294: FOR_IN
50295: IFFALSE 50368
// if GetBType ( j ) = b_bunker then
50297: LD_VAR 0 9
50301: PPUSH
50302: CALL_OW 266
50306: PUSH
50307: LD_INT 32
50309: EQUAL
50310: IFFALSE 50337
// tmp := Insert ( tmp , 1 , j ) else
50312: LD_ADDR_VAR 0 19
50316: PUSH
50317: LD_VAR 0 19
50321: PPUSH
50322: LD_INT 1
50324: PPUSH
50325: LD_VAR 0 9
50329: PPUSH
50330: CALL_OW 2
50334: ST_TO_ADDR
50335: GO 50366
// tmp := Insert ( tmp , tmp + 1 , j ) ;
50337: LD_ADDR_VAR 0 19
50341: PUSH
50342: LD_VAR 0 19
50346: PPUSH
50347: LD_VAR 0 19
50351: PUSH
50352: LD_INT 1
50354: PLUS
50355: PPUSH
50356: LD_VAR 0 9
50360: PPUSH
50361: CALL_OW 2
50365: ST_TO_ADDR
50366: GO 50294
50368: POP
50369: POP
// if tmp then
50370: LD_VAR 0 19
50374: IFFALSE 50386
// f := tmp ;
50376: LD_ADDR_VAR 0 12
50380: PUSH
50381: LD_VAR 0 19
50385: ST_TO_ADDR
// end ; x := personel [ i ] ;
50386: LD_ADDR_VAR 0 13
50390: PUSH
50391: LD_VAR 0 6
50395: PUSH
50396: LD_VAR 0 8
50400: ARRAY
50401: ST_TO_ADDR
// if x = - 1 then
50402: LD_VAR 0 13
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: EQUAL
50411: IFFALSE 50620
// begin for j in f do
50413: LD_ADDR_VAR 0 9
50417: PUSH
50418: LD_VAR 0 12
50422: PUSH
50423: FOR_IN
50424: IFFALSE 50616
// repeat InitHc ;
50426: CALL_OW 19
// if GetBType ( j ) = b_barracks then
50430: LD_VAR 0 9
50434: PPUSH
50435: CALL_OW 266
50439: PUSH
50440: LD_INT 5
50442: EQUAL
50443: IFFALSE 50513
// begin if UnitsInside ( j ) < 3 then
50445: LD_VAR 0 9
50449: PPUSH
50450: CALL_OW 313
50454: PUSH
50455: LD_INT 3
50457: LESS
50458: IFFALSE 50494
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50460: LD_INT 0
50462: PPUSH
50463: LD_INT 5
50465: PUSH
50466: LD_INT 8
50468: PUSH
50469: LD_INT 9
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: LIST
50476: PUSH
50477: LD_VAR 0 17
50481: ARRAY
50482: PPUSH
50483: LD_VAR 0 4
50487: PPUSH
50488: CALL_OW 380
50492: GO 50511
// PrepareHuman ( false , i , skill ) ;
50494: LD_INT 0
50496: PPUSH
50497: LD_VAR 0 8
50501: PPUSH
50502: LD_VAR 0 4
50506: PPUSH
50507: CALL_OW 380
// end else
50511: GO 50530
// PrepareHuman ( false , i , skill ) ;
50513: LD_INT 0
50515: PPUSH
50516: LD_VAR 0 8
50520: PPUSH
50521: LD_VAR 0 4
50525: PPUSH
50526: CALL_OW 380
// un := CreateHuman ;
50530: LD_ADDR_VAR 0 14
50534: PUSH
50535: CALL_OW 44
50539: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50540: LD_ADDR_VAR 0 7
50544: PUSH
50545: LD_VAR 0 7
50549: PPUSH
50550: LD_INT 1
50552: PPUSH
50553: LD_VAR 0 14
50557: PPUSH
50558: CALL_OW 2
50562: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
50563: LD_VAR 0 14
50567: PPUSH
50568: LD_VAR 0 9
50572: PPUSH
50573: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
50577: LD_VAR 0 9
50581: PPUSH
50582: CALL_OW 313
50586: PUSH
50587: LD_INT 6
50589: EQUAL
50590: PUSH
50591: LD_VAR 0 9
50595: PPUSH
50596: CALL_OW 266
50600: PUSH
50601: LD_INT 32
50603: PUSH
50604: LD_INT 31
50606: PUSH
50607: EMPTY
50608: LIST
50609: LIST
50610: IN
50611: OR
50612: IFFALSE 50426
50614: GO 50423
50616: POP
50617: POP
// end else
50618: GO 51000
// for j = 1 to x do
50620: LD_ADDR_VAR 0 9
50624: PUSH
50625: DOUBLE
50626: LD_INT 1
50628: DEC
50629: ST_TO_ADDR
50630: LD_VAR 0 13
50634: PUSH
50635: FOR_TO
50636: IFFALSE 50998
// begin InitHc ;
50638: CALL_OW 19
// if not f then
50642: LD_VAR 0 12
50646: NOT
50647: IFFALSE 50736
// begin PrepareHuman ( false , i , skill ) ;
50649: LD_INT 0
50651: PPUSH
50652: LD_VAR 0 8
50656: PPUSH
50657: LD_VAR 0 4
50661: PPUSH
50662: CALL_OW 380
// un := CreateHuman ;
50666: LD_ADDR_VAR 0 14
50670: PUSH
50671: CALL_OW 44
50675: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50676: LD_ADDR_VAR 0 7
50680: PUSH
50681: LD_VAR 0 7
50685: PPUSH
50686: LD_INT 1
50688: PPUSH
50689: LD_VAR 0 14
50693: PPUSH
50694: CALL_OW 2
50698: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
50699: LD_VAR 0 14
50703: PPUSH
50704: LD_VAR 0 1
50708: PPUSH
50709: CALL_OW 250
50713: PPUSH
50714: LD_VAR 0 1
50718: PPUSH
50719: CALL_OW 251
50723: PPUSH
50724: LD_INT 10
50726: PPUSH
50727: LD_INT 0
50729: PPUSH
50730: CALL_OW 50
// continue ;
50734: GO 50635
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
50736: LD_VAR 0 12
50740: PUSH
50741: LD_INT 1
50743: ARRAY
50744: PPUSH
50745: CALL_OW 313
50749: PUSH
50750: LD_VAR 0 12
50754: PUSH
50755: LD_INT 1
50757: ARRAY
50758: PPUSH
50759: CALL_OW 266
50763: PUSH
50764: LD_INT 32
50766: PUSH
50767: LD_INT 31
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: IN
50774: AND
50775: PUSH
50776: LD_VAR 0 12
50780: PUSH
50781: LD_INT 1
50783: ARRAY
50784: PPUSH
50785: CALL_OW 313
50789: PUSH
50790: LD_INT 6
50792: EQUAL
50793: OR
50794: IFFALSE 50814
// f := Delete ( f , 1 ) ;
50796: LD_ADDR_VAR 0 12
50800: PUSH
50801: LD_VAR 0 12
50805: PPUSH
50806: LD_INT 1
50808: PPUSH
50809: CALL_OW 3
50813: ST_TO_ADDR
// if not f then
50814: LD_VAR 0 12
50818: NOT
50819: IFFALSE 50837
// begin x := x + 2 ;
50821: LD_ADDR_VAR 0 13
50825: PUSH
50826: LD_VAR 0 13
50830: PUSH
50831: LD_INT 2
50833: PLUS
50834: ST_TO_ADDR
// continue ;
50835: GO 50635
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
50837: LD_VAR 0 12
50841: PUSH
50842: LD_INT 1
50844: ARRAY
50845: PPUSH
50846: CALL_OW 266
50850: PUSH
50851: LD_INT 5
50853: EQUAL
50854: IFFALSE 50928
// begin if UnitsInside ( f [ 1 ] ) < 3 then
50856: LD_VAR 0 12
50860: PUSH
50861: LD_INT 1
50863: ARRAY
50864: PPUSH
50865: CALL_OW 313
50869: PUSH
50870: LD_INT 3
50872: LESS
50873: IFFALSE 50909
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
50875: LD_INT 0
50877: PPUSH
50878: LD_INT 5
50880: PUSH
50881: LD_INT 8
50883: PUSH
50884: LD_INT 9
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: LIST
50891: PUSH
50892: LD_VAR 0 17
50896: ARRAY
50897: PPUSH
50898: LD_VAR 0 4
50902: PPUSH
50903: CALL_OW 380
50907: GO 50926
// PrepareHuman ( false , i , skill ) ;
50909: LD_INT 0
50911: PPUSH
50912: LD_VAR 0 8
50916: PPUSH
50917: LD_VAR 0 4
50921: PPUSH
50922: CALL_OW 380
// end else
50926: GO 50945
// PrepareHuman ( false , i , skill ) ;
50928: LD_INT 0
50930: PPUSH
50931: LD_VAR 0 8
50935: PPUSH
50936: LD_VAR 0 4
50940: PPUSH
50941: CALL_OW 380
// un := CreateHuman ;
50945: LD_ADDR_VAR 0 14
50949: PUSH
50950: CALL_OW 44
50954: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
50955: LD_ADDR_VAR 0 7
50959: PUSH
50960: LD_VAR 0 7
50964: PPUSH
50965: LD_INT 1
50967: PPUSH
50968: LD_VAR 0 14
50972: PPUSH
50973: CALL_OW 2
50977: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
50978: LD_VAR 0 14
50982: PPUSH
50983: LD_VAR 0 12
50987: PUSH
50988: LD_INT 1
50990: ARRAY
50991: PPUSH
50992: CALL_OW 52
// end ;
50996: GO 50635
50998: POP
50999: POP
// end ;
51000: GO 49937
51002: POP
51003: POP
// result := result ^ buildings ;
51004: LD_ADDR_VAR 0 7
51008: PUSH
51009: LD_VAR 0 7
51013: PUSH
51014: LD_VAR 0 18
51018: ADD
51019: ST_TO_ADDR
// end else
51020: GO 51163
// begin for i = 1 to personel do
51022: LD_ADDR_VAR 0 8
51026: PUSH
51027: DOUBLE
51028: LD_INT 1
51030: DEC
51031: ST_TO_ADDR
51032: LD_VAR 0 6
51036: PUSH
51037: FOR_TO
51038: IFFALSE 51161
// begin if i > 4 then
51040: LD_VAR 0 8
51044: PUSH
51045: LD_INT 4
51047: GREATER
51048: IFFALSE 51052
// break ;
51050: GO 51161
// x := personel [ i ] ;
51052: LD_ADDR_VAR 0 13
51056: PUSH
51057: LD_VAR 0 6
51061: PUSH
51062: LD_VAR 0 8
51066: ARRAY
51067: ST_TO_ADDR
// if x = - 1 then
51068: LD_VAR 0 13
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: EQUAL
51077: IFFALSE 51081
// continue ;
51079: GO 51037
// PrepareHuman ( false , i , skill ) ;
51081: LD_INT 0
51083: PPUSH
51084: LD_VAR 0 8
51088: PPUSH
51089: LD_VAR 0 4
51093: PPUSH
51094: CALL_OW 380
// un := CreateHuman ;
51098: LD_ADDR_VAR 0 14
51102: PUSH
51103: CALL_OW 44
51107: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
51108: LD_VAR 0 14
51112: PPUSH
51113: LD_VAR 0 1
51117: PPUSH
51118: CALL_OW 250
51122: PPUSH
51123: LD_VAR 0 1
51127: PPUSH
51128: CALL_OW 251
51132: PPUSH
51133: LD_INT 10
51135: PPUSH
51136: LD_INT 0
51138: PPUSH
51139: CALL_OW 50
// result := result ^ un ;
51143: LD_ADDR_VAR 0 7
51147: PUSH
51148: LD_VAR 0 7
51152: PUSH
51153: LD_VAR 0 14
51157: ADD
51158: ST_TO_ADDR
// end ;
51159: GO 51037
51161: POP
51162: POP
// end ; end ;
51163: LD_VAR 0 7
51167: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
51168: LD_INT 0
51170: PPUSH
51171: PPUSH
51172: PPUSH
51173: PPUSH
51174: PPUSH
51175: PPUSH
51176: PPUSH
51177: PPUSH
51178: PPUSH
51179: PPUSH
51180: PPUSH
51181: PPUSH
51182: PPUSH
51183: PPUSH
51184: PPUSH
51185: PPUSH
// result := false ;
51186: LD_ADDR_VAR 0 3
51190: PUSH
51191: LD_INT 0
51193: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
51194: LD_VAR 0 1
51198: NOT
51199: PUSH
51200: LD_VAR 0 1
51204: PPUSH
51205: CALL_OW 266
51209: PUSH
51210: LD_INT 32
51212: PUSH
51213: LD_INT 33
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: IN
51220: NOT
51221: OR
51222: IFFALSE 51226
// exit ;
51224: GO 52335
// nat := GetNation ( tower ) ;
51226: LD_ADDR_VAR 0 12
51230: PUSH
51231: LD_VAR 0 1
51235: PPUSH
51236: CALL_OW 248
51240: ST_TO_ADDR
// side := GetSide ( tower ) ;
51241: LD_ADDR_VAR 0 16
51245: PUSH
51246: LD_VAR 0 1
51250: PPUSH
51251: CALL_OW 255
51255: ST_TO_ADDR
// x := GetX ( tower ) ;
51256: LD_ADDR_VAR 0 10
51260: PUSH
51261: LD_VAR 0 1
51265: PPUSH
51266: CALL_OW 250
51270: ST_TO_ADDR
// y := GetY ( tower ) ;
51271: LD_ADDR_VAR 0 11
51275: PUSH
51276: LD_VAR 0 1
51280: PPUSH
51281: CALL_OW 251
51285: ST_TO_ADDR
// if not x or not y then
51286: LD_VAR 0 10
51290: NOT
51291: PUSH
51292: LD_VAR 0 11
51296: NOT
51297: OR
51298: IFFALSE 51302
// exit ;
51300: GO 52335
// weapon := 0 ;
51302: LD_ADDR_VAR 0 18
51306: PUSH
51307: LD_INT 0
51309: ST_TO_ADDR
// fac_list := [ ] ;
51310: LD_ADDR_VAR 0 17
51314: PUSH
51315: EMPTY
51316: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
51317: LD_ADDR_VAR 0 6
51321: PUSH
51322: LD_VAR 0 1
51326: PPUSH
51327: CALL_OW 274
51331: PPUSH
51332: LD_VAR 0 2
51336: PPUSH
51337: LD_INT 0
51339: PPUSH
51340: CALL 48906 0 3
51344: PPUSH
51345: LD_INT 30
51347: PUSH
51348: LD_INT 3
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PPUSH
51355: CALL_OW 72
51359: ST_TO_ADDR
// if not factories then
51360: LD_VAR 0 6
51364: NOT
51365: IFFALSE 51369
// exit ;
51367: GO 52335
// for i in factories do
51369: LD_ADDR_VAR 0 8
51373: PUSH
51374: LD_VAR 0 6
51378: PUSH
51379: FOR_IN
51380: IFFALSE 51405
// fac_list := fac_list union AvailableWeaponList ( i ) ;
51382: LD_ADDR_VAR 0 17
51386: PUSH
51387: LD_VAR 0 17
51391: PUSH
51392: LD_VAR 0 8
51396: PPUSH
51397: CALL_OW 478
51401: UNION
51402: ST_TO_ADDR
51403: GO 51379
51405: POP
51406: POP
// if not fac_list then
51407: LD_VAR 0 17
51411: NOT
51412: IFFALSE 51416
// exit ;
51414: GO 52335
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
51416: LD_ADDR_VAR 0 5
51420: PUSH
51421: LD_INT 4
51423: PUSH
51424: LD_INT 5
51426: PUSH
51427: LD_INT 9
51429: PUSH
51430: LD_INT 10
51432: PUSH
51433: LD_INT 6
51435: PUSH
51436: LD_INT 7
51438: PUSH
51439: LD_INT 11
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 27
51453: PUSH
51454: LD_INT 28
51456: PUSH
51457: LD_INT 26
51459: PUSH
51460: LD_INT 30
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 43
51471: PUSH
51472: LD_INT 44
51474: PUSH
51475: LD_INT 46
51477: PUSH
51478: LD_INT 45
51480: PUSH
51481: LD_INT 47
51483: PUSH
51484: LD_INT 49
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: LIST
51499: PUSH
51500: LD_VAR 0 12
51504: ARRAY
51505: ST_TO_ADDR
// list := list isect fac_list ;
51506: LD_ADDR_VAR 0 5
51510: PUSH
51511: LD_VAR 0 5
51515: PUSH
51516: LD_VAR 0 17
51520: ISECT
51521: ST_TO_ADDR
// if not list then
51522: LD_VAR 0 5
51526: NOT
51527: IFFALSE 51531
// exit ;
51529: GO 52335
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
51531: LD_VAR 0 12
51535: PUSH
51536: LD_INT 3
51538: EQUAL
51539: PUSH
51540: LD_INT 49
51542: PUSH
51543: LD_VAR 0 5
51547: IN
51548: AND
51549: PUSH
51550: LD_INT 31
51552: PPUSH
51553: LD_VAR 0 16
51557: PPUSH
51558: CALL_OW 321
51562: PUSH
51563: LD_INT 2
51565: EQUAL
51566: AND
51567: IFFALSE 51627
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
51569: LD_INT 22
51571: PUSH
51572: LD_VAR 0 16
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 35
51583: PUSH
51584: LD_INT 49
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 91
51593: PUSH
51594: LD_VAR 0 1
51598: PUSH
51599: LD_INT 10
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: LIST
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: PPUSH
51612: CALL_OW 69
51616: NOT
51617: IFFALSE 51627
// weapon := ru_time_lapser ;
51619: LD_ADDR_VAR 0 18
51623: PUSH
51624: LD_INT 49
51626: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
51627: LD_VAR 0 12
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 2
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: IN
51642: PUSH
51643: LD_INT 11
51645: PUSH
51646: LD_VAR 0 5
51650: IN
51651: PUSH
51652: LD_INT 30
51654: PUSH
51655: LD_VAR 0 5
51659: IN
51660: OR
51661: AND
51662: PUSH
51663: LD_INT 6
51665: PPUSH
51666: LD_VAR 0 16
51670: PPUSH
51671: CALL_OW 321
51675: PUSH
51676: LD_INT 2
51678: EQUAL
51679: AND
51680: IFFALSE 51845
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
51682: LD_INT 22
51684: PUSH
51685: LD_VAR 0 16
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: LD_INT 35
51699: PUSH
51700: LD_INT 11
51702: PUSH
51703: EMPTY
51704: LIST
51705: LIST
51706: PUSH
51707: LD_INT 35
51709: PUSH
51710: LD_INT 30
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 91
51724: PUSH
51725: LD_VAR 0 1
51729: PUSH
51730: LD_INT 18
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: LIST
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: LIST
51742: PPUSH
51743: CALL_OW 69
51747: NOT
51748: PUSH
51749: LD_INT 22
51751: PUSH
51752: LD_VAR 0 16
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: LD_INT 30
51766: PUSH
51767: LD_INT 32
51769: PUSH
51770: EMPTY
51771: LIST
51772: LIST
51773: PUSH
51774: LD_INT 30
51776: PUSH
51777: LD_INT 33
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 91
51791: PUSH
51792: LD_VAR 0 1
51796: PUSH
51797: LD_INT 12
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: LIST
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: LIST
51809: PUSH
51810: EMPTY
51811: LIST
51812: PPUSH
51813: CALL_OW 69
51817: PUSH
51818: LD_INT 2
51820: GREATER
51821: AND
51822: IFFALSE 51845
// weapon := [ us_radar , ar_radar ] [ nat ] ;
51824: LD_ADDR_VAR 0 18
51828: PUSH
51829: LD_INT 11
51831: PUSH
51832: LD_INT 30
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_VAR 0 12
51843: ARRAY
51844: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
51845: LD_VAR 0 18
51849: NOT
51850: PUSH
51851: LD_INT 40
51853: PPUSH
51854: LD_VAR 0 16
51858: PPUSH
51859: CALL_OW 321
51863: PUSH
51864: LD_INT 2
51866: EQUAL
51867: AND
51868: PUSH
51869: LD_INT 7
51871: PUSH
51872: LD_VAR 0 5
51876: IN
51877: PUSH
51878: LD_INT 28
51880: PUSH
51881: LD_VAR 0 5
51885: IN
51886: OR
51887: PUSH
51888: LD_INT 45
51890: PUSH
51891: LD_VAR 0 5
51895: IN
51896: OR
51897: AND
51898: IFFALSE 52152
// begin hex := GetHexInfo ( x , y ) ;
51900: LD_ADDR_VAR 0 4
51904: PUSH
51905: LD_VAR 0 10
51909: PPUSH
51910: LD_VAR 0 11
51914: PPUSH
51915: CALL_OW 546
51919: ST_TO_ADDR
// if hex [ 1 ] then
51920: LD_VAR 0 4
51924: PUSH
51925: LD_INT 1
51927: ARRAY
51928: IFFALSE 51932
// exit ;
51930: GO 52335
// height := hex [ 2 ] ;
51932: LD_ADDR_VAR 0 15
51936: PUSH
51937: LD_VAR 0 4
51941: PUSH
51942: LD_INT 2
51944: ARRAY
51945: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
51946: LD_ADDR_VAR 0 14
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: LD_INT 3
51959: PUSH
51960: LD_INT 5
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: LIST
51967: LIST
51968: ST_TO_ADDR
// for i in tmp do
51969: LD_ADDR_VAR 0 8
51973: PUSH
51974: LD_VAR 0 14
51978: PUSH
51979: FOR_IN
51980: IFFALSE 52150
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
51982: LD_ADDR_VAR 0 9
51986: PUSH
51987: LD_VAR 0 10
51991: PPUSH
51992: LD_VAR 0 8
51996: PPUSH
51997: LD_INT 5
51999: PPUSH
52000: CALL_OW 272
52004: PUSH
52005: LD_VAR 0 11
52009: PPUSH
52010: LD_VAR 0 8
52014: PPUSH
52015: LD_INT 5
52017: PPUSH
52018: CALL_OW 273
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
52027: LD_VAR 0 9
52031: PUSH
52032: LD_INT 1
52034: ARRAY
52035: PPUSH
52036: LD_VAR 0 9
52040: PUSH
52041: LD_INT 2
52043: ARRAY
52044: PPUSH
52045: CALL_OW 488
52049: IFFALSE 52148
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
52051: LD_ADDR_VAR 0 4
52055: PUSH
52056: LD_VAR 0 9
52060: PUSH
52061: LD_INT 1
52063: ARRAY
52064: PPUSH
52065: LD_VAR 0 9
52069: PUSH
52070: LD_INT 2
52072: ARRAY
52073: PPUSH
52074: CALL_OW 546
52078: ST_TO_ADDR
// if hex [ 1 ] then
52079: LD_VAR 0 4
52083: PUSH
52084: LD_INT 1
52086: ARRAY
52087: IFFALSE 52091
// continue ;
52089: GO 51979
// h := hex [ 2 ] ;
52091: LD_ADDR_VAR 0 13
52095: PUSH
52096: LD_VAR 0 4
52100: PUSH
52101: LD_INT 2
52103: ARRAY
52104: ST_TO_ADDR
// if h + 7 < height then
52105: LD_VAR 0 13
52109: PUSH
52110: LD_INT 7
52112: PLUS
52113: PUSH
52114: LD_VAR 0 15
52118: LESS
52119: IFFALSE 52148
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
52121: LD_ADDR_VAR 0 18
52125: PUSH
52126: LD_INT 7
52128: PUSH
52129: LD_INT 28
52131: PUSH
52132: LD_INT 45
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: LIST
52139: PUSH
52140: LD_VAR 0 12
52144: ARRAY
52145: ST_TO_ADDR
// break ;
52146: GO 52150
// end ; end ; end ;
52148: GO 51979
52150: POP
52151: POP
// end ; if not weapon then
52152: LD_VAR 0 18
52156: NOT
52157: IFFALSE 52217
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
52159: LD_ADDR_VAR 0 5
52163: PUSH
52164: LD_VAR 0 5
52168: PUSH
52169: LD_INT 11
52171: PUSH
52172: LD_INT 30
52174: PUSH
52175: LD_INT 49
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: LIST
52182: DIFF
52183: ST_TO_ADDR
// if not list then
52184: LD_VAR 0 5
52188: NOT
52189: IFFALSE 52193
// exit ;
52191: GO 52335
// weapon := list [ rand ( 1 , list ) ] ;
52193: LD_ADDR_VAR 0 18
52197: PUSH
52198: LD_VAR 0 5
52202: PUSH
52203: LD_INT 1
52205: PPUSH
52206: LD_VAR 0 5
52210: PPUSH
52211: CALL_OW 12
52215: ARRAY
52216: ST_TO_ADDR
// end ; if weapon then
52217: LD_VAR 0 18
52221: IFFALSE 52335
// begin tmp := CostOfWeapon ( weapon ) ;
52223: LD_ADDR_VAR 0 14
52227: PUSH
52228: LD_VAR 0 18
52232: PPUSH
52233: CALL_OW 451
52237: ST_TO_ADDR
// j := GetBase ( tower ) ;
52238: LD_ADDR_VAR 0 9
52242: PUSH
52243: LD_VAR 0 1
52247: PPUSH
52248: CALL_OW 274
52252: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
52253: LD_VAR 0 9
52257: PPUSH
52258: LD_INT 1
52260: PPUSH
52261: CALL_OW 275
52265: PUSH
52266: LD_VAR 0 14
52270: PUSH
52271: LD_INT 1
52273: ARRAY
52274: GREATEREQUAL
52275: PUSH
52276: LD_VAR 0 9
52280: PPUSH
52281: LD_INT 2
52283: PPUSH
52284: CALL_OW 275
52288: PUSH
52289: LD_VAR 0 14
52293: PUSH
52294: LD_INT 2
52296: ARRAY
52297: GREATEREQUAL
52298: AND
52299: PUSH
52300: LD_VAR 0 9
52304: PPUSH
52305: LD_INT 3
52307: PPUSH
52308: CALL_OW 275
52312: PUSH
52313: LD_VAR 0 14
52317: PUSH
52318: LD_INT 3
52320: ARRAY
52321: GREATEREQUAL
52322: AND
52323: IFFALSE 52335
// result := weapon ;
52325: LD_ADDR_VAR 0 3
52329: PUSH
52330: LD_VAR 0 18
52334: ST_TO_ADDR
// end ; end ;
52335: LD_VAR 0 3
52339: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
52340: LD_INT 0
52342: PPUSH
52343: PPUSH
// result := true ;
52344: LD_ADDR_VAR 0 3
52348: PUSH
52349: LD_INT 1
52351: ST_TO_ADDR
// if array1 = array2 then
52352: LD_VAR 0 1
52356: PUSH
52357: LD_VAR 0 2
52361: EQUAL
52362: IFFALSE 52422
// begin for i = 1 to array1 do
52364: LD_ADDR_VAR 0 4
52368: PUSH
52369: DOUBLE
52370: LD_INT 1
52372: DEC
52373: ST_TO_ADDR
52374: LD_VAR 0 1
52378: PUSH
52379: FOR_TO
52380: IFFALSE 52418
// if array1 [ i ] <> array2 [ i ] then
52382: LD_VAR 0 1
52386: PUSH
52387: LD_VAR 0 4
52391: ARRAY
52392: PUSH
52393: LD_VAR 0 2
52397: PUSH
52398: LD_VAR 0 4
52402: ARRAY
52403: NONEQUAL
52404: IFFALSE 52416
// begin result := false ;
52406: LD_ADDR_VAR 0 3
52410: PUSH
52411: LD_INT 0
52413: ST_TO_ADDR
// break ;
52414: GO 52418
// end ;
52416: GO 52379
52418: POP
52419: POP
// end else
52420: GO 52430
// result := false ;
52422: LD_ADDR_VAR 0 3
52426: PUSH
52427: LD_INT 0
52429: ST_TO_ADDR
// end ;
52430: LD_VAR 0 3
52434: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
52435: LD_INT 0
52437: PPUSH
52438: PPUSH
// if not array1 or not array2 then
52439: LD_VAR 0 1
52443: NOT
52444: PUSH
52445: LD_VAR 0 2
52449: NOT
52450: OR
52451: IFFALSE 52455
// exit ;
52453: GO 52519
// result := true ;
52455: LD_ADDR_VAR 0 3
52459: PUSH
52460: LD_INT 1
52462: ST_TO_ADDR
// for i = 1 to array1 do
52463: LD_ADDR_VAR 0 4
52467: PUSH
52468: DOUBLE
52469: LD_INT 1
52471: DEC
52472: ST_TO_ADDR
52473: LD_VAR 0 1
52477: PUSH
52478: FOR_TO
52479: IFFALSE 52517
// if array1 [ i ] <> array2 [ i ] then
52481: LD_VAR 0 1
52485: PUSH
52486: LD_VAR 0 4
52490: ARRAY
52491: PUSH
52492: LD_VAR 0 2
52496: PUSH
52497: LD_VAR 0 4
52501: ARRAY
52502: NONEQUAL
52503: IFFALSE 52515
// begin result := false ;
52505: LD_ADDR_VAR 0 3
52509: PUSH
52510: LD_INT 0
52512: ST_TO_ADDR
// break ;
52513: GO 52517
// end ;
52515: GO 52478
52517: POP
52518: POP
// end ;
52519: LD_VAR 0 3
52523: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
52524: LD_INT 0
52526: PPUSH
52527: PPUSH
52528: PPUSH
// pom := GetBase ( fac ) ;
52529: LD_ADDR_VAR 0 5
52533: PUSH
52534: LD_VAR 0 1
52538: PPUSH
52539: CALL_OW 274
52543: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
52544: LD_ADDR_VAR 0 4
52548: PUSH
52549: LD_VAR 0 2
52553: PUSH
52554: LD_INT 1
52556: ARRAY
52557: PPUSH
52558: LD_VAR 0 2
52562: PUSH
52563: LD_INT 2
52565: ARRAY
52566: PPUSH
52567: LD_VAR 0 2
52571: PUSH
52572: LD_INT 3
52574: ARRAY
52575: PPUSH
52576: LD_VAR 0 2
52580: PUSH
52581: LD_INT 4
52583: ARRAY
52584: PPUSH
52585: CALL_OW 449
52589: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52590: LD_ADDR_VAR 0 3
52594: PUSH
52595: LD_VAR 0 5
52599: PPUSH
52600: LD_INT 1
52602: PPUSH
52603: CALL_OW 275
52607: PUSH
52608: LD_VAR 0 4
52612: PUSH
52613: LD_INT 1
52615: ARRAY
52616: GREATEREQUAL
52617: PUSH
52618: LD_VAR 0 5
52622: PPUSH
52623: LD_INT 2
52625: PPUSH
52626: CALL_OW 275
52630: PUSH
52631: LD_VAR 0 4
52635: PUSH
52636: LD_INT 2
52638: ARRAY
52639: GREATEREQUAL
52640: AND
52641: PUSH
52642: LD_VAR 0 5
52646: PPUSH
52647: LD_INT 3
52649: PPUSH
52650: CALL_OW 275
52654: PUSH
52655: LD_VAR 0 4
52659: PUSH
52660: LD_INT 3
52662: ARRAY
52663: GREATEREQUAL
52664: AND
52665: ST_TO_ADDR
// end ;
52666: LD_VAR 0 3
52670: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
52671: LD_INT 0
52673: PPUSH
52674: PPUSH
52675: PPUSH
52676: PPUSH
// pom := GetBase ( building ) ;
52677: LD_ADDR_VAR 0 3
52681: PUSH
52682: LD_VAR 0 1
52686: PPUSH
52687: CALL_OW 274
52691: ST_TO_ADDR
// if not pom then
52692: LD_VAR 0 3
52696: NOT
52697: IFFALSE 52701
// exit ;
52699: GO 52871
// btype := GetBType ( building ) ;
52701: LD_ADDR_VAR 0 5
52705: PUSH
52706: LD_VAR 0 1
52710: PPUSH
52711: CALL_OW 266
52715: ST_TO_ADDR
// if btype = b_armoury then
52716: LD_VAR 0 5
52720: PUSH
52721: LD_INT 4
52723: EQUAL
52724: IFFALSE 52734
// btype := b_barracks ;
52726: LD_ADDR_VAR 0 5
52730: PUSH
52731: LD_INT 5
52733: ST_TO_ADDR
// if btype = b_depot then
52734: LD_VAR 0 5
52738: PUSH
52739: LD_INT 0
52741: EQUAL
52742: IFFALSE 52752
// btype := b_warehouse ;
52744: LD_ADDR_VAR 0 5
52748: PUSH
52749: LD_INT 1
52751: ST_TO_ADDR
// if btype = b_workshop then
52752: LD_VAR 0 5
52756: PUSH
52757: LD_INT 2
52759: EQUAL
52760: IFFALSE 52770
// btype := b_factory ;
52762: LD_ADDR_VAR 0 5
52766: PUSH
52767: LD_INT 3
52769: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52770: LD_ADDR_VAR 0 4
52774: PUSH
52775: LD_VAR 0 5
52779: PPUSH
52780: LD_VAR 0 1
52784: PPUSH
52785: CALL_OW 248
52789: PPUSH
52790: CALL_OW 450
52794: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52795: LD_ADDR_VAR 0 2
52799: PUSH
52800: LD_VAR 0 3
52804: PPUSH
52805: LD_INT 1
52807: PPUSH
52808: CALL_OW 275
52812: PUSH
52813: LD_VAR 0 4
52817: PUSH
52818: LD_INT 1
52820: ARRAY
52821: GREATEREQUAL
52822: PUSH
52823: LD_VAR 0 3
52827: PPUSH
52828: LD_INT 2
52830: PPUSH
52831: CALL_OW 275
52835: PUSH
52836: LD_VAR 0 4
52840: PUSH
52841: LD_INT 2
52843: ARRAY
52844: GREATEREQUAL
52845: AND
52846: PUSH
52847: LD_VAR 0 3
52851: PPUSH
52852: LD_INT 3
52854: PPUSH
52855: CALL_OW 275
52859: PUSH
52860: LD_VAR 0 4
52864: PUSH
52865: LD_INT 3
52867: ARRAY
52868: GREATEREQUAL
52869: AND
52870: ST_TO_ADDR
// end ;
52871: LD_VAR 0 2
52875: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
52876: LD_INT 0
52878: PPUSH
52879: PPUSH
52880: PPUSH
// pom := GetBase ( building ) ;
52881: LD_ADDR_VAR 0 4
52885: PUSH
52886: LD_VAR 0 1
52890: PPUSH
52891: CALL_OW 274
52895: ST_TO_ADDR
// if not pom then
52896: LD_VAR 0 4
52900: NOT
52901: IFFALSE 52905
// exit ;
52903: GO 53006
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
52905: LD_ADDR_VAR 0 5
52909: PUSH
52910: LD_VAR 0 2
52914: PPUSH
52915: LD_VAR 0 1
52919: PPUSH
52920: CALL_OW 248
52924: PPUSH
52925: CALL_OW 450
52929: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
52930: LD_ADDR_VAR 0 3
52934: PUSH
52935: LD_VAR 0 4
52939: PPUSH
52940: LD_INT 1
52942: PPUSH
52943: CALL_OW 275
52947: PUSH
52948: LD_VAR 0 5
52952: PUSH
52953: LD_INT 1
52955: ARRAY
52956: GREATEREQUAL
52957: PUSH
52958: LD_VAR 0 4
52962: PPUSH
52963: LD_INT 2
52965: PPUSH
52966: CALL_OW 275
52970: PUSH
52971: LD_VAR 0 5
52975: PUSH
52976: LD_INT 2
52978: ARRAY
52979: GREATEREQUAL
52980: AND
52981: PUSH
52982: LD_VAR 0 4
52986: PPUSH
52987: LD_INT 3
52989: PPUSH
52990: CALL_OW 275
52994: PUSH
52995: LD_VAR 0 5
52999: PUSH
53000: LD_INT 3
53002: ARRAY
53003: GREATEREQUAL
53004: AND
53005: ST_TO_ADDR
// end ;
53006: LD_VAR 0 3
53010: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
53011: LD_INT 0
53013: PPUSH
53014: PPUSH
53015: PPUSH
53016: PPUSH
53017: PPUSH
53018: PPUSH
53019: PPUSH
53020: PPUSH
53021: PPUSH
53022: PPUSH
53023: PPUSH
// result := false ;
53024: LD_ADDR_VAR 0 8
53028: PUSH
53029: LD_INT 0
53031: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
53032: LD_VAR 0 5
53036: NOT
53037: PUSH
53038: LD_VAR 0 1
53042: NOT
53043: OR
53044: PUSH
53045: LD_VAR 0 2
53049: NOT
53050: OR
53051: PUSH
53052: LD_VAR 0 3
53056: NOT
53057: OR
53058: IFFALSE 53062
// exit ;
53060: GO 53876
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
53062: LD_ADDR_VAR 0 14
53066: PUSH
53067: LD_VAR 0 1
53071: PPUSH
53072: LD_VAR 0 2
53076: PPUSH
53077: LD_VAR 0 3
53081: PPUSH
53082: LD_VAR 0 4
53086: PPUSH
53087: LD_VAR 0 5
53091: PUSH
53092: LD_INT 1
53094: ARRAY
53095: PPUSH
53096: CALL_OW 248
53100: PPUSH
53101: LD_INT 0
53103: PPUSH
53104: CALL 55129 0 6
53108: ST_TO_ADDR
// if not hexes then
53109: LD_VAR 0 14
53113: NOT
53114: IFFALSE 53118
// exit ;
53116: GO 53876
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
53118: LD_ADDR_VAR 0 17
53122: PUSH
53123: LD_VAR 0 5
53127: PPUSH
53128: LD_INT 22
53130: PUSH
53131: LD_VAR 0 13
53135: PPUSH
53136: CALL_OW 255
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: PUSH
53148: LD_INT 30
53150: PUSH
53151: LD_INT 0
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 30
53160: PUSH
53161: LD_INT 1
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PPUSH
53177: CALL_OW 72
53181: ST_TO_ADDR
// for i = 1 to hexes do
53182: LD_ADDR_VAR 0 9
53186: PUSH
53187: DOUBLE
53188: LD_INT 1
53190: DEC
53191: ST_TO_ADDR
53192: LD_VAR 0 14
53196: PUSH
53197: FOR_TO
53198: IFFALSE 53874
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53200: LD_ADDR_VAR 0 13
53204: PUSH
53205: LD_VAR 0 14
53209: PUSH
53210: LD_VAR 0 9
53214: ARRAY
53215: PUSH
53216: LD_INT 1
53218: ARRAY
53219: PPUSH
53220: LD_VAR 0 14
53224: PUSH
53225: LD_VAR 0 9
53229: ARRAY
53230: PUSH
53231: LD_INT 2
53233: ARRAY
53234: PPUSH
53235: CALL_OW 428
53239: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
53240: LD_VAR 0 14
53244: PUSH
53245: LD_VAR 0 9
53249: ARRAY
53250: PUSH
53251: LD_INT 1
53253: ARRAY
53254: PPUSH
53255: LD_VAR 0 14
53259: PUSH
53260: LD_VAR 0 9
53264: ARRAY
53265: PUSH
53266: LD_INT 2
53268: ARRAY
53269: PPUSH
53270: CALL_OW 351
53274: PUSH
53275: LD_VAR 0 14
53279: PUSH
53280: LD_VAR 0 9
53284: ARRAY
53285: PUSH
53286: LD_INT 1
53288: ARRAY
53289: PPUSH
53290: LD_VAR 0 14
53294: PUSH
53295: LD_VAR 0 9
53299: ARRAY
53300: PUSH
53301: LD_INT 2
53303: ARRAY
53304: PPUSH
53305: CALL_OW 488
53309: NOT
53310: OR
53311: PUSH
53312: LD_VAR 0 13
53316: PPUSH
53317: CALL_OW 247
53321: PUSH
53322: LD_INT 3
53324: EQUAL
53325: OR
53326: IFFALSE 53332
// exit ;
53328: POP
53329: POP
53330: GO 53876
// if not tmp then
53332: LD_VAR 0 13
53336: NOT
53337: IFFALSE 53341
// continue ;
53339: GO 53197
// result := true ;
53341: LD_ADDR_VAR 0 8
53345: PUSH
53346: LD_INT 1
53348: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
53349: LD_VAR 0 6
53353: PUSH
53354: LD_VAR 0 13
53358: PPUSH
53359: CALL_OW 247
53363: PUSH
53364: LD_INT 2
53366: EQUAL
53367: AND
53368: PUSH
53369: LD_VAR 0 13
53373: PPUSH
53374: CALL_OW 263
53378: PUSH
53379: LD_INT 1
53381: EQUAL
53382: AND
53383: IFFALSE 53547
// begin if IsDrivenBy ( tmp ) then
53385: LD_VAR 0 13
53389: PPUSH
53390: CALL_OW 311
53394: IFFALSE 53398
// continue ;
53396: GO 53197
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
53398: LD_VAR 0 6
53402: PPUSH
53403: LD_INT 3
53405: PUSH
53406: LD_INT 60
53408: PUSH
53409: EMPTY
53410: LIST
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: LD_INT 55
53421: PUSH
53422: EMPTY
53423: LIST
53424: PUSH
53425: EMPTY
53426: LIST
53427: LIST
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PPUSH
53433: CALL_OW 72
53437: IFFALSE 53545
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
53439: LD_ADDR_VAR 0 18
53443: PUSH
53444: LD_VAR 0 6
53448: PPUSH
53449: LD_INT 3
53451: PUSH
53452: LD_INT 60
53454: PUSH
53455: EMPTY
53456: LIST
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 3
53464: PUSH
53465: LD_INT 55
53467: PUSH
53468: EMPTY
53469: LIST
53470: PUSH
53471: EMPTY
53472: LIST
53473: LIST
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PPUSH
53479: CALL_OW 72
53483: PUSH
53484: LD_INT 1
53486: ARRAY
53487: ST_TO_ADDR
// if IsInUnit ( driver ) then
53488: LD_VAR 0 18
53492: PPUSH
53493: CALL_OW 310
53497: IFFALSE 53508
// ComExit ( driver ) ;
53499: LD_VAR 0 18
53503: PPUSH
53504: CALL 78930 0 1
// AddComEnterUnit ( driver , tmp ) ;
53508: LD_VAR 0 18
53512: PPUSH
53513: LD_VAR 0 13
53517: PPUSH
53518: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
53522: LD_VAR 0 18
53526: PPUSH
53527: LD_VAR 0 7
53531: PPUSH
53532: CALL_OW 173
// AddComExitVehicle ( driver ) ;
53536: LD_VAR 0 18
53540: PPUSH
53541: CALL_OW 181
// end ; continue ;
53545: GO 53197
// end ; if not cleaners or not tmp in cleaners then
53547: LD_VAR 0 6
53551: NOT
53552: PUSH
53553: LD_VAR 0 13
53557: PUSH
53558: LD_VAR 0 6
53562: IN
53563: NOT
53564: OR
53565: IFFALSE 53872
// begin if dep then
53567: LD_VAR 0 17
53571: IFFALSE 53707
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
53573: LD_ADDR_VAR 0 16
53577: PUSH
53578: LD_VAR 0 17
53582: PUSH
53583: LD_INT 1
53585: ARRAY
53586: PPUSH
53587: CALL_OW 250
53591: PPUSH
53592: LD_VAR 0 17
53596: PUSH
53597: LD_INT 1
53599: ARRAY
53600: PPUSH
53601: CALL_OW 254
53605: PPUSH
53606: LD_INT 5
53608: PPUSH
53609: CALL_OW 272
53613: PUSH
53614: LD_VAR 0 17
53618: PUSH
53619: LD_INT 1
53621: ARRAY
53622: PPUSH
53623: CALL_OW 251
53627: PPUSH
53628: LD_VAR 0 17
53632: PUSH
53633: LD_INT 1
53635: ARRAY
53636: PPUSH
53637: CALL_OW 254
53641: PPUSH
53642: LD_INT 5
53644: PPUSH
53645: CALL_OW 273
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
53654: LD_VAR 0 16
53658: PUSH
53659: LD_INT 1
53661: ARRAY
53662: PPUSH
53663: LD_VAR 0 16
53667: PUSH
53668: LD_INT 2
53670: ARRAY
53671: PPUSH
53672: CALL_OW 488
53676: IFFALSE 53707
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
53678: LD_VAR 0 13
53682: PPUSH
53683: LD_VAR 0 16
53687: PUSH
53688: LD_INT 1
53690: ARRAY
53691: PPUSH
53692: LD_VAR 0 16
53696: PUSH
53697: LD_INT 2
53699: ARRAY
53700: PPUSH
53701: CALL_OW 111
// continue ;
53705: GO 53197
// end ; end ; r := GetDir ( tmp ) ;
53707: LD_ADDR_VAR 0 15
53711: PUSH
53712: LD_VAR 0 13
53716: PPUSH
53717: CALL_OW 254
53721: ST_TO_ADDR
// if r = 5 then
53722: LD_VAR 0 15
53726: PUSH
53727: LD_INT 5
53729: EQUAL
53730: IFFALSE 53740
// r := 0 ;
53732: LD_ADDR_VAR 0 15
53736: PUSH
53737: LD_INT 0
53739: ST_TO_ADDR
// for j = r to 5 do
53740: LD_ADDR_VAR 0 10
53744: PUSH
53745: DOUBLE
53746: LD_VAR 0 15
53750: DEC
53751: ST_TO_ADDR
53752: LD_INT 5
53754: PUSH
53755: FOR_TO
53756: IFFALSE 53870
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
53758: LD_ADDR_VAR 0 11
53762: PUSH
53763: LD_VAR 0 13
53767: PPUSH
53768: CALL_OW 250
53772: PPUSH
53773: LD_VAR 0 10
53777: PPUSH
53778: LD_INT 2
53780: PPUSH
53781: CALL_OW 272
53785: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
53786: LD_ADDR_VAR 0 12
53790: PUSH
53791: LD_VAR 0 13
53795: PPUSH
53796: CALL_OW 251
53800: PPUSH
53801: LD_VAR 0 10
53805: PPUSH
53806: LD_INT 2
53808: PPUSH
53809: CALL_OW 273
53813: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
53814: LD_VAR 0 11
53818: PPUSH
53819: LD_VAR 0 12
53823: PPUSH
53824: CALL_OW 488
53828: PUSH
53829: LD_VAR 0 11
53833: PPUSH
53834: LD_VAR 0 12
53838: PPUSH
53839: CALL_OW 428
53843: NOT
53844: AND
53845: IFFALSE 53868
// begin ComMoveXY ( tmp , _x , _y ) ;
53847: LD_VAR 0 13
53851: PPUSH
53852: LD_VAR 0 11
53856: PPUSH
53857: LD_VAR 0 12
53861: PPUSH
53862: CALL_OW 111
// break ;
53866: GO 53870
// end ; end ;
53868: GO 53755
53870: POP
53871: POP
// end ; end ;
53872: GO 53197
53874: POP
53875: POP
// end ;
53876: LD_VAR 0 8
53880: RET
// export function BuildingTechInvented ( side , btype ) ; begin
53881: LD_INT 0
53883: PPUSH
// result := true ;
53884: LD_ADDR_VAR 0 3
53888: PUSH
53889: LD_INT 1
53891: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
53892: LD_VAR 0 2
53896: PUSH
53897: LD_INT 24
53899: DOUBLE
53900: EQUAL
53901: IFTRUE 53911
53903: LD_INT 33
53905: DOUBLE
53906: EQUAL
53907: IFTRUE 53911
53909: GO 53936
53911: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
53912: LD_ADDR_VAR 0 3
53916: PUSH
53917: LD_INT 32
53919: PPUSH
53920: LD_VAR 0 1
53924: PPUSH
53925: CALL_OW 321
53929: PUSH
53930: LD_INT 2
53932: EQUAL
53933: ST_TO_ADDR
53934: GO 54252
53936: LD_INT 20
53938: DOUBLE
53939: EQUAL
53940: IFTRUE 53944
53942: GO 53969
53944: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
53945: LD_ADDR_VAR 0 3
53949: PUSH
53950: LD_INT 6
53952: PPUSH
53953: LD_VAR 0 1
53957: PPUSH
53958: CALL_OW 321
53962: PUSH
53963: LD_INT 2
53965: EQUAL
53966: ST_TO_ADDR
53967: GO 54252
53969: LD_INT 22
53971: DOUBLE
53972: EQUAL
53973: IFTRUE 53983
53975: LD_INT 36
53977: DOUBLE
53978: EQUAL
53979: IFTRUE 53983
53981: GO 54008
53983: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
53984: LD_ADDR_VAR 0 3
53988: PUSH
53989: LD_INT 15
53991: PPUSH
53992: LD_VAR 0 1
53996: PPUSH
53997: CALL_OW 321
54001: PUSH
54002: LD_INT 2
54004: EQUAL
54005: ST_TO_ADDR
54006: GO 54252
54008: LD_INT 30
54010: DOUBLE
54011: EQUAL
54012: IFTRUE 54016
54014: GO 54041
54016: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
54017: LD_ADDR_VAR 0 3
54021: PUSH
54022: LD_INT 20
54024: PPUSH
54025: LD_VAR 0 1
54029: PPUSH
54030: CALL_OW 321
54034: PUSH
54035: LD_INT 2
54037: EQUAL
54038: ST_TO_ADDR
54039: GO 54252
54041: LD_INT 28
54043: DOUBLE
54044: EQUAL
54045: IFTRUE 54055
54047: LD_INT 21
54049: DOUBLE
54050: EQUAL
54051: IFTRUE 54055
54053: GO 54080
54055: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
54056: LD_ADDR_VAR 0 3
54060: PUSH
54061: LD_INT 21
54063: PPUSH
54064: LD_VAR 0 1
54068: PPUSH
54069: CALL_OW 321
54073: PUSH
54074: LD_INT 2
54076: EQUAL
54077: ST_TO_ADDR
54078: GO 54252
54080: LD_INT 16
54082: DOUBLE
54083: EQUAL
54084: IFTRUE 54088
54086: GO 54113
54088: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
54089: LD_ADDR_VAR 0 3
54093: PUSH
54094: LD_INT 84
54096: PPUSH
54097: LD_VAR 0 1
54101: PPUSH
54102: CALL_OW 321
54106: PUSH
54107: LD_INT 2
54109: EQUAL
54110: ST_TO_ADDR
54111: GO 54252
54113: LD_INT 19
54115: DOUBLE
54116: EQUAL
54117: IFTRUE 54127
54119: LD_INT 23
54121: DOUBLE
54122: EQUAL
54123: IFTRUE 54127
54125: GO 54152
54127: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
54128: LD_ADDR_VAR 0 3
54132: PUSH
54133: LD_INT 83
54135: PPUSH
54136: LD_VAR 0 1
54140: PPUSH
54141: CALL_OW 321
54145: PUSH
54146: LD_INT 2
54148: EQUAL
54149: ST_TO_ADDR
54150: GO 54252
54152: LD_INT 17
54154: DOUBLE
54155: EQUAL
54156: IFTRUE 54160
54158: GO 54185
54160: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
54161: LD_ADDR_VAR 0 3
54165: PUSH
54166: LD_INT 39
54168: PPUSH
54169: LD_VAR 0 1
54173: PPUSH
54174: CALL_OW 321
54178: PUSH
54179: LD_INT 2
54181: EQUAL
54182: ST_TO_ADDR
54183: GO 54252
54185: LD_INT 18
54187: DOUBLE
54188: EQUAL
54189: IFTRUE 54193
54191: GO 54218
54193: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
54194: LD_ADDR_VAR 0 3
54198: PUSH
54199: LD_INT 40
54201: PPUSH
54202: LD_VAR 0 1
54206: PPUSH
54207: CALL_OW 321
54211: PUSH
54212: LD_INT 2
54214: EQUAL
54215: ST_TO_ADDR
54216: GO 54252
54218: LD_INT 27
54220: DOUBLE
54221: EQUAL
54222: IFTRUE 54226
54224: GO 54251
54226: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
54227: LD_ADDR_VAR 0 3
54231: PUSH
54232: LD_INT 35
54234: PPUSH
54235: LD_VAR 0 1
54239: PPUSH
54240: CALL_OW 321
54244: PUSH
54245: LD_INT 2
54247: EQUAL
54248: ST_TO_ADDR
54249: GO 54252
54251: POP
// end ;
54252: LD_VAR 0 3
54256: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
54257: LD_INT 0
54259: PPUSH
54260: PPUSH
54261: PPUSH
54262: PPUSH
54263: PPUSH
54264: PPUSH
54265: PPUSH
54266: PPUSH
54267: PPUSH
54268: PPUSH
54269: PPUSH
// result := false ;
54270: LD_ADDR_VAR 0 6
54274: PUSH
54275: LD_INT 0
54277: ST_TO_ADDR
// if btype = b_depot then
54278: LD_VAR 0 2
54282: PUSH
54283: LD_INT 0
54285: EQUAL
54286: IFFALSE 54298
// begin result := true ;
54288: LD_ADDR_VAR 0 6
54292: PUSH
54293: LD_INT 1
54295: ST_TO_ADDR
// exit ;
54296: GO 55124
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
54298: LD_VAR 0 1
54302: NOT
54303: PUSH
54304: LD_VAR 0 1
54308: PPUSH
54309: CALL_OW 266
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 1
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: IN
54324: NOT
54325: OR
54326: PUSH
54327: LD_VAR 0 2
54331: NOT
54332: OR
54333: PUSH
54334: LD_VAR 0 5
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: LD_INT 4
54353: PUSH
54354: LD_INT 5
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: LIST
54364: IN
54365: NOT
54366: OR
54367: PUSH
54368: LD_VAR 0 3
54372: PPUSH
54373: LD_VAR 0 4
54377: PPUSH
54378: CALL_OW 488
54382: NOT
54383: OR
54384: IFFALSE 54388
// exit ;
54386: GO 55124
// side := GetSide ( depot ) ;
54388: LD_ADDR_VAR 0 9
54392: PUSH
54393: LD_VAR 0 1
54397: PPUSH
54398: CALL_OW 255
54402: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
54403: LD_VAR 0 9
54407: PPUSH
54408: LD_VAR 0 2
54412: PPUSH
54413: CALL 53881 0 2
54417: NOT
54418: IFFALSE 54422
// exit ;
54420: GO 55124
// pom := GetBase ( depot ) ;
54422: LD_ADDR_VAR 0 10
54426: PUSH
54427: LD_VAR 0 1
54431: PPUSH
54432: CALL_OW 274
54436: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
54437: LD_ADDR_VAR 0 11
54441: PUSH
54442: LD_VAR 0 2
54446: PPUSH
54447: LD_VAR 0 1
54451: PPUSH
54452: CALL_OW 248
54456: PPUSH
54457: CALL_OW 450
54461: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
54462: LD_VAR 0 10
54466: PPUSH
54467: LD_INT 1
54469: PPUSH
54470: CALL_OW 275
54474: PUSH
54475: LD_VAR 0 11
54479: PUSH
54480: LD_INT 1
54482: ARRAY
54483: GREATEREQUAL
54484: PUSH
54485: LD_VAR 0 10
54489: PPUSH
54490: LD_INT 2
54492: PPUSH
54493: CALL_OW 275
54497: PUSH
54498: LD_VAR 0 11
54502: PUSH
54503: LD_INT 2
54505: ARRAY
54506: GREATEREQUAL
54507: AND
54508: PUSH
54509: LD_VAR 0 10
54513: PPUSH
54514: LD_INT 3
54516: PPUSH
54517: CALL_OW 275
54521: PUSH
54522: LD_VAR 0 11
54526: PUSH
54527: LD_INT 3
54529: ARRAY
54530: GREATEREQUAL
54531: AND
54532: NOT
54533: IFFALSE 54537
// exit ;
54535: GO 55124
// if GetBType ( depot ) = b_depot then
54537: LD_VAR 0 1
54541: PPUSH
54542: CALL_OW 266
54546: PUSH
54547: LD_INT 0
54549: EQUAL
54550: IFFALSE 54562
// dist := 28 else
54552: LD_ADDR_VAR 0 14
54556: PUSH
54557: LD_INT 28
54559: ST_TO_ADDR
54560: GO 54570
// dist := 36 ;
54562: LD_ADDR_VAR 0 14
54566: PUSH
54567: LD_INT 36
54569: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
54570: LD_VAR 0 1
54574: PPUSH
54575: LD_VAR 0 3
54579: PPUSH
54580: LD_VAR 0 4
54584: PPUSH
54585: CALL_OW 297
54589: PUSH
54590: LD_VAR 0 14
54594: GREATER
54595: IFFALSE 54599
// exit ;
54597: GO 55124
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
54599: LD_ADDR_VAR 0 12
54603: PUSH
54604: LD_VAR 0 2
54608: PPUSH
54609: LD_VAR 0 3
54613: PPUSH
54614: LD_VAR 0 4
54618: PPUSH
54619: LD_VAR 0 5
54623: PPUSH
54624: LD_VAR 0 1
54628: PPUSH
54629: CALL_OW 248
54633: PPUSH
54634: LD_INT 0
54636: PPUSH
54637: CALL 55129 0 6
54641: ST_TO_ADDR
// if not hexes then
54642: LD_VAR 0 12
54646: NOT
54647: IFFALSE 54651
// exit ;
54649: GO 55124
// hex := GetHexInfo ( x , y ) ;
54651: LD_ADDR_VAR 0 15
54655: PUSH
54656: LD_VAR 0 3
54660: PPUSH
54661: LD_VAR 0 4
54665: PPUSH
54666: CALL_OW 546
54670: ST_TO_ADDR
// if hex [ 1 ] then
54671: LD_VAR 0 15
54675: PUSH
54676: LD_INT 1
54678: ARRAY
54679: IFFALSE 54683
// exit ;
54681: GO 55124
// height := hex [ 2 ] ;
54683: LD_ADDR_VAR 0 13
54687: PUSH
54688: LD_VAR 0 15
54692: PUSH
54693: LD_INT 2
54695: ARRAY
54696: ST_TO_ADDR
// for i = 1 to hexes do
54697: LD_ADDR_VAR 0 7
54701: PUSH
54702: DOUBLE
54703: LD_INT 1
54705: DEC
54706: ST_TO_ADDR
54707: LD_VAR 0 12
54711: PUSH
54712: FOR_TO
54713: IFFALSE 55043
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
54715: LD_VAR 0 12
54719: PUSH
54720: LD_VAR 0 7
54724: ARRAY
54725: PUSH
54726: LD_INT 1
54728: ARRAY
54729: PPUSH
54730: LD_VAR 0 12
54734: PUSH
54735: LD_VAR 0 7
54739: ARRAY
54740: PUSH
54741: LD_INT 2
54743: ARRAY
54744: PPUSH
54745: CALL_OW 488
54749: NOT
54750: PUSH
54751: LD_VAR 0 12
54755: PUSH
54756: LD_VAR 0 7
54760: ARRAY
54761: PUSH
54762: LD_INT 1
54764: ARRAY
54765: PPUSH
54766: LD_VAR 0 12
54770: PUSH
54771: LD_VAR 0 7
54775: ARRAY
54776: PUSH
54777: LD_INT 2
54779: ARRAY
54780: PPUSH
54781: CALL_OW 428
54785: PUSH
54786: LD_INT 0
54788: GREATER
54789: OR
54790: PUSH
54791: LD_VAR 0 12
54795: PUSH
54796: LD_VAR 0 7
54800: ARRAY
54801: PUSH
54802: LD_INT 1
54804: ARRAY
54805: PPUSH
54806: LD_VAR 0 12
54810: PUSH
54811: LD_VAR 0 7
54815: ARRAY
54816: PUSH
54817: LD_INT 2
54819: ARRAY
54820: PPUSH
54821: CALL_OW 351
54825: OR
54826: IFFALSE 54832
// exit ;
54828: POP
54829: POP
54830: GO 55124
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54832: LD_ADDR_VAR 0 8
54836: PUSH
54837: LD_VAR 0 12
54841: PUSH
54842: LD_VAR 0 7
54846: ARRAY
54847: PUSH
54848: LD_INT 1
54850: ARRAY
54851: PPUSH
54852: LD_VAR 0 12
54856: PUSH
54857: LD_VAR 0 7
54861: ARRAY
54862: PUSH
54863: LD_INT 2
54865: ARRAY
54866: PPUSH
54867: CALL_OW 546
54871: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
54872: LD_VAR 0 8
54876: PUSH
54877: LD_INT 1
54879: ARRAY
54880: PUSH
54881: LD_VAR 0 8
54885: PUSH
54886: LD_INT 2
54888: ARRAY
54889: PUSH
54890: LD_VAR 0 13
54894: PUSH
54895: LD_INT 2
54897: PLUS
54898: GREATER
54899: OR
54900: PUSH
54901: LD_VAR 0 8
54905: PUSH
54906: LD_INT 2
54908: ARRAY
54909: PUSH
54910: LD_VAR 0 13
54914: PUSH
54915: LD_INT 2
54917: MINUS
54918: LESS
54919: OR
54920: PUSH
54921: LD_VAR 0 8
54925: PUSH
54926: LD_INT 3
54928: ARRAY
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 8
54935: PUSH
54936: LD_INT 9
54938: PUSH
54939: LD_INT 10
54941: PUSH
54942: LD_INT 11
54944: PUSH
54945: LD_INT 12
54947: PUSH
54948: LD_INT 13
54950: PUSH
54951: LD_INT 16
54953: PUSH
54954: LD_INT 17
54956: PUSH
54957: LD_INT 18
54959: PUSH
54960: LD_INT 19
54962: PUSH
54963: LD_INT 20
54965: PUSH
54966: LD_INT 21
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: LIST
54982: LIST
54983: IN
54984: NOT
54985: OR
54986: PUSH
54987: LD_VAR 0 8
54991: PUSH
54992: LD_INT 5
54994: ARRAY
54995: NOT
54996: OR
54997: PUSH
54998: LD_VAR 0 8
55002: PUSH
55003: LD_INT 6
55005: ARRAY
55006: PUSH
55007: LD_INT 1
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: LD_INT 7
55015: PUSH
55016: LD_INT 9
55018: PUSH
55019: LD_INT 10
55021: PUSH
55022: LD_INT 11
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: IN
55033: NOT
55034: OR
55035: IFFALSE 55041
// exit ;
55037: POP
55038: POP
55039: GO 55124
// end ;
55041: GO 54712
55043: POP
55044: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
55045: LD_VAR 0 9
55049: PPUSH
55050: LD_VAR 0 3
55054: PPUSH
55055: LD_VAR 0 4
55059: PPUSH
55060: LD_INT 20
55062: PPUSH
55063: CALL 47047 0 4
55067: PUSH
55068: LD_INT 4
55070: ARRAY
55071: IFFALSE 55075
// exit ;
55073: GO 55124
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
55075: LD_VAR 0 2
55079: PUSH
55080: LD_INT 29
55082: PUSH
55083: LD_INT 30
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: IN
55090: PUSH
55091: LD_VAR 0 3
55095: PPUSH
55096: LD_VAR 0 4
55100: PPUSH
55101: LD_VAR 0 9
55105: PPUSH
55106: CALL_OW 440
55110: NOT
55111: AND
55112: IFFALSE 55116
// exit ;
55114: GO 55124
// result := true ;
55116: LD_ADDR_VAR 0 6
55120: PUSH
55121: LD_INT 1
55123: ST_TO_ADDR
// end ;
55124: LD_VAR 0 6
55128: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
55129: LD_INT 0
55131: PPUSH
55132: PPUSH
55133: PPUSH
55134: PPUSH
55135: PPUSH
55136: PPUSH
55137: PPUSH
55138: PPUSH
55139: PPUSH
55140: PPUSH
55141: PPUSH
55142: PPUSH
55143: PPUSH
55144: PPUSH
55145: PPUSH
55146: PPUSH
55147: PPUSH
55148: PPUSH
55149: PPUSH
55150: PPUSH
55151: PPUSH
55152: PPUSH
55153: PPUSH
55154: PPUSH
55155: PPUSH
55156: PPUSH
55157: PPUSH
55158: PPUSH
55159: PPUSH
55160: PPUSH
55161: PPUSH
55162: PPUSH
55163: PPUSH
55164: PPUSH
55165: PPUSH
55166: PPUSH
55167: PPUSH
55168: PPUSH
55169: PPUSH
55170: PPUSH
55171: PPUSH
55172: PPUSH
55173: PPUSH
55174: PPUSH
55175: PPUSH
55176: PPUSH
55177: PPUSH
55178: PPUSH
55179: PPUSH
55180: PPUSH
55181: PPUSH
55182: PPUSH
55183: PPUSH
55184: PPUSH
55185: PPUSH
55186: PPUSH
55187: PPUSH
55188: PPUSH
// result = [ ] ;
55189: LD_ADDR_VAR 0 7
55193: PUSH
55194: EMPTY
55195: ST_TO_ADDR
// temp_list = [ ] ;
55196: LD_ADDR_VAR 0 9
55200: PUSH
55201: EMPTY
55202: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
55203: LD_VAR 0 4
55207: PUSH
55208: LD_INT 0
55210: PUSH
55211: LD_INT 1
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: LD_INT 3
55219: PUSH
55220: LD_INT 4
55222: PUSH
55223: LD_INT 5
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: IN
55234: NOT
55235: PUSH
55236: LD_VAR 0 1
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: LD_INT 1
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: IN
55251: PUSH
55252: LD_VAR 0 5
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: LD_INT 3
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: LIST
55270: IN
55271: NOT
55272: AND
55273: OR
55274: IFFALSE 55278
// exit ;
55276: GO 73669
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
55278: LD_VAR 0 1
55282: PUSH
55283: LD_INT 6
55285: PUSH
55286: LD_INT 7
55288: PUSH
55289: LD_INT 8
55291: PUSH
55292: LD_INT 13
55294: PUSH
55295: LD_INT 12
55297: PUSH
55298: LD_INT 15
55300: PUSH
55301: LD_INT 11
55303: PUSH
55304: LD_INT 14
55306: PUSH
55307: LD_INT 10
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: IN
55321: IFFALSE 55331
// btype = b_lab ;
55323: LD_ADDR_VAR 0 1
55327: PUSH
55328: LD_INT 6
55330: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
55331: LD_VAR 0 6
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 1
55341: PUSH
55342: LD_INT 2
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: LIST
55349: IN
55350: NOT
55351: PUSH
55352: LD_VAR 0 1
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 1
55362: PUSH
55363: LD_INT 2
55365: PUSH
55366: LD_INT 3
55368: PUSH
55369: LD_INT 6
55371: PUSH
55372: LD_INT 36
55374: PUSH
55375: LD_INT 4
55377: PUSH
55378: LD_INT 5
55380: PUSH
55381: LD_INT 31
55383: PUSH
55384: LD_INT 32
55386: PUSH
55387: LD_INT 33
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: IN
55403: NOT
55404: PUSH
55405: LD_VAR 0 6
55409: PUSH
55410: LD_INT 1
55412: EQUAL
55413: AND
55414: OR
55415: PUSH
55416: LD_VAR 0 1
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: LD_INT 3
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: IN
55431: NOT
55432: PUSH
55433: LD_VAR 0 6
55437: PUSH
55438: LD_INT 2
55440: EQUAL
55441: AND
55442: OR
55443: IFFALSE 55453
// mode = 0 ;
55445: LD_ADDR_VAR 0 6
55449: PUSH
55450: LD_INT 0
55452: ST_TO_ADDR
// case mode of 0 :
55453: LD_VAR 0 6
55457: PUSH
55458: LD_INT 0
55460: DOUBLE
55461: EQUAL
55462: IFTRUE 55466
55464: GO 66919
55466: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55467: LD_ADDR_VAR 0 11
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: LD_INT 0
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: PUSH
55482: LD_INT 0
55484: PUSH
55485: LD_INT 1
55487: NEG
55488: PUSH
55489: EMPTY
55490: LIST
55491: LIST
55492: PUSH
55493: LD_INT 1
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 0
55515: PUSH
55516: LD_INT 1
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: NEG
55526: PUSH
55527: LD_INT 0
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: NEG
55537: PUSH
55538: LD_INT 1
55540: NEG
55541: PUSH
55542: EMPTY
55543: LIST
55544: LIST
55545: PUSH
55546: LD_INT 1
55548: NEG
55549: PUSH
55550: LD_INT 2
55552: NEG
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: LD_INT 2
55563: NEG
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 1
55571: PUSH
55572: LD_INT 1
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 1
55582: PUSH
55583: LD_INT 2
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 0
55592: PUSH
55593: LD_INT 2
55595: PUSH
55596: EMPTY
55597: LIST
55598: LIST
55599: PUSH
55600: LD_INT 1
55602: NEG
55603: PUSH
55604: LD_INT 1
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: PUSH
55611: LD_INT 1
55613: PUSH
55614: LD_INT 3
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 0
55623: PUSH
55624: LD_INT 3
55626: PUSH
55627: EMPTY
55628: LIST
55629: LIST
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: LD_INT 2
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55660: LD_ADDR_VAR 0 12
55664: PUSH
55665: LD_INT 0
55667: PUSH
55668: LD_INT 0
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 0
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 1
55688: PUSH
55689: LD_INT 0
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: LD_INT 1
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: LD_INT 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: LD_INT 0
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 2
55752: PUSH
55753: LD_INT 0
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 2
55762: PUSH
55763: LD_INT 1
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 2
55783: NEG
55784: PUSH
55785: LD_INT 0
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 2
55794: NEG
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 2
55806: NEG
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 3
55817: NEG
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 3
55828: NEG
55829: PUSH
55830: LD_INT 1
55832: NEG
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55856: LD_ADDR_VAR 0 13
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: LD_INT 0
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 0
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 1
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: LD_INT 1
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: EMPTY
55932: LIST
55933: LIST
55934: PUSH
55935: LD_INT 1
55937: NEG
55938: PUSH
55939: LD_INT 2
55941: NEG
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 2
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: PUSH
55960: LD_INT 2
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: LD_INT 2
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: PUSH
55989: LD_INT 2
55991: NEG
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 2
56003: NEG
56004: PUSH
56005: LD_INT 3
56007: NEG
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 3
56015: NEG
56016: PUSH
56017: LD_INT 2
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 3
56027: NEG
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: LIST
56041: LIST
56042: LIST
56043: LIST
56044: LIST
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56055: LD_ADDR_VAR 0 14
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 0
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 0
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 1
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 0
56103: PUSH
56104: LD_INT 1
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 1
56136: NEG
56137: PUSH
56138: LD_INT 2
56140: NEG
56141: PUSH
56142: EMPTY
56143: LIST
56144: LIST
56145: PUSH
56146: LD_INT 0
56148: PUSH
56149: LD_INT 2
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: PUSH
56160: LD_INT 1
56162: NEG
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 2
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 2
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 1
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 3
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 3
56216: NEG
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 2
56227: NEG
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: LIST
56242: LIST
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56251: LD_ADDR_VAR 0 15
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: LD_INT 0
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 0
56268: PUSH
56269: LD_INT 1
56271: NEG
56272: PUSH
56273: EMPTY
56274: LIST
56275: LIST
56276: PUSH
56277: LD_INT 1
56279: PUSH
56280: LD_INT 0
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 1
56289: PUSH
56290: LD_INT 1
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 0
56299: PUSH
56300: LD_INT 1
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 1
56309: NEG
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: LD_INT 1
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 1
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 2
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 2
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 1
56363: NEG
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 2
56374: NEG
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: EMPTY
56380: LIST
56381: LIST
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: LD_INT 1
56389: NEG
56390: PUSH
56391: EMPTY
56392: LIST
56393: LIST
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: LD_INT 1
56400: NEG
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 3
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: LD_INT 3
56418: PUSH
56419: LD_INT 1
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: EMPTY
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56444: LD_ADDR_VAR 0 16
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 0
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: PUSH
56473: LD_INT 0
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 1
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: LD_INT 0
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: LD_INT 1
56517: NEG
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: LD_INT 2
56529: NEG
56530: PUSH
56531: EMPTY
56532: LIST
56533: LIST
56534: PUSH
56535: LD_INT 2
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 2
56547: PUSH
56548: LD_INT 2
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 2
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 2
56567: NEG
56568: PUSH
56569: LD_INT 1
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 2
56579: NEG
56580: PUSH
56581: LD_INT 2
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 3
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 3
56601: PUSH
56602: LD_INT 3
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56637: LD_ADDR_VAR 0 17
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 1
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 1
56675: PUSH
56676: LD_INT 1
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 0
56685: PUSH
56686: LD_INT 1
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: LD_INT 0
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 1
56718: NEG
56719: PUSH
56720: LD_INT 2
56722: NEG
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 0
56730: PUSH
56731: LD_INT 2
56733: NEG
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: PUSH
56739: LD_INT 1
56741: PUSH
56742: LD_INT 1
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 2
56752: PUSH
56753: LD_INT 0
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 2
56772: PUSH
56773: LD_INT 2
56775: PUSH
56776: EMPTY
56777: LIST
56778: LIST
56779: PUSH
56780: LD_INT 1
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 0
56792: PUSH
56793: LD_INT 2
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 1
56802: NEG
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56867: LD_ADDR_VAR 0 18
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: LD_INT 0
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 0
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 1
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: PUSH
56906: LD_INT 1
56908: PUSH
56909: EMPTY
56910: LIST
56911: LIST
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: NEG
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 0
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: PUSH
56969: LD_INT 1
56971: PUSH
56972: LD_INT 1
56974: NEG
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 2
56982: PUSH
56983: LD_INT 0
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 2
56992: PUSH
56993: LD_INT 1
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 2
57002: PUSH
57003: LD_INT 2
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: PUSH
57013: LD_INT 2
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 0
57022: PUSH
57023: LD_INT 2
57025: PUSH
57026: EMPTY
57027: LIST
57028: LIST
57029: PUSH
57030: LD_INT 1
57032: NEG
57033: PUSH
57034: LD_INT 1
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 2
57043: NEG
57044: PUSH
57045: LD_INT 0
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: LD_INT 1
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: LD_INT 2
57066: NEG
57067: PUSH
57068: LD_INT 2
57070: NEG
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57097: LD_ADDR_VAR 0 19
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: EMPTY
57120: LIST
57121: LIST
57122: PUSH
57123: LD_INT 1
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PUSH
57133: LD_INT 1
57135: PUSH
57136: LD_INT 1
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 0
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: LD_INT 1
57204: NEG
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: LD_INT 0
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: LD_INT 1
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: LD_INT 2
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 2
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 2
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: NEG
57274: PUSH
57275: LD_INT 0
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: LD_INT 1
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 2
57296: NEG
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57327: LD_ADDR_VAR 0 20
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: LD_INT 0
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 0
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: EMPTY
57350: LIST
57351: LIST
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: LD_INT 0
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 1
57365: PUSH
57366: LD_INT 1
57368: PUSH
57369: EMPTY
57370: LIST
57371: LIST
57372: PUSH
57373: LD_INT 0
57375: PUSH
57376: LD_INT 1
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: NEG
57409: PUSH
57410: LD_INT 2
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: LD_INT 2
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 2
57442: PUSH
57443: LD_INT 0
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: PUSH
57450: LD_INT 2
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: LD_INT 2
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 0
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: NEG
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_INT 2
57503: NEG
57504: PUSH
57505: LD_INT 0
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 2
57526: NEG
57527: PUSH
57528: LD_INT 2
57530: NEG
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: LIST
57545: LIST
57546: LIST
57547: LIST
57548: LIST
57549: LIST
57550: LIST
57551: LIST
57552: LIST
57553: LIST
57554: LIST
57555: LIST
57556: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57557: LD_ADDR_VAR 0 21
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: LD_INT 0
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 0
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 1
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 1
57595: PUSH
57596: LD_INT 1
57598: PUSH
57599: EMPTY
57600: LIST
57601: LIST
57602: PUSH
57603: LD_INT 0
57605: PUSH
57606: LD_INT 1
57608: PUSH
57609: EMPTY
57610: LIST
57611: LIST
57612: PUSH
57613: LD_INT 1
57615: NEG
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 1
57626: NEG
57627: PUSH
57628: LD_INT 1
57630: NEG
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: NEG
57639: PUSH
57640: LD_INT 2
57642: NEG
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: LD_INT 2
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: LD_INT 1
57664: NEG
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 2
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 1
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: PUSH
57693: LD_INT 2
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 2
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 2
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 1
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 2
57733: NEG
57734: PUSH
57735: LD_INT 0
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: NEG
57745: PUSH
57746: LD_INT 1
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 2
57756: NEG
57757: PUSH
57758: LD_INT 2
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: EMPTY
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57787: LD_ADDR_VAR 0 22
57791: PUSH
57792: LD_INT 0
57794: PUSH
57795: LD_INT 0
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 0
57804: PUSH
57805: LD_INT 1
57807: NEG
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: LD_INT 0
57818: PUSH
57819: EMPTY
57820: LIST
57821: LIST
57822: PUSH
57823: LD_INT 1
57825: PUSH
57826: LD_INT 1
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: PUSH
57833: LD_INT 0
57835: PUSH
57836: LD_INT 1
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: LD_INT 0
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 1
57856: NEG
57857: PUSH
57858: LD_INT 1
57860: NEG
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: NEG
57869: PUSH
57870: LD_INT 2
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 0
57880: PUSH
57881: LD_INT 2
57883: NEG
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 1
57891: PUSH
57892: LD_INT 1
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 2
57902: PUSH
57903: LD_INT 0
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 2
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: LD_INT 2
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: LD_INT 2
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: LD_INT 2
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: LD_INT 1
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PUSH
57961: LD_INT 2
57963: NEG
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: EMPTY
57969: LIST
57970: LIST
57971: PUSH
57972: LD_INT 2
57974: NEG
57975: PUSH
57976: LD_INT 1
57978: NEG
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 2
57986: NEG
57987: PUSH
57988: LD_INT 2
57990: NEG
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: LIST
58009: LIST
58010: LIST
58011: LIST
58012: LIST
58013: LIST
58014: LIST
58015: LIST
58016: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58017: LD_ADDR_VAR 0 23
58021: PUSH
58022: LD_INT 0
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 0
58034: PUSH
58035: LD_INT 1
58037: NEG
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 1
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: PUSH
58053: LD_INT 1
58055: PUSH
58056: LD_INT 1
58058: PUSH
58059: EMPTY
58060: LIST
58061: LIST
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: LD_INT 1
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: LD_INT 0
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: LD_INT 1
58090: NEG
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: NEG
58099: PUSH
58100: LD_INT 2
58102: NEG
58103: PUSH
58104: EMPTY
58105: LIST
58106: LIST
58107: PUSH
58108: LD_INT 0
58110: PUSH
58111: LD_INT 2
58113: NEG
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: LD_INT 1
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: PUSH
58130: LD_INT 2
58132: PUSH
58133: LD_INT 0
58135: PUSH
58136: EMPTY
58137: LIST
58138: LIST
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: LD_INT 1
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: LD_INT 2
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: LD_INT 2
58165: PUSH
58166: EMPTY
58167: LIST
58168: LIST
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: LD_INT 2
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 1
58182: NEG
58183: PUSH
58184: LD_INT 1
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: NEG
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: NEG
58205: PUSH
58206: LD_INT 1
58208: NEG
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 2
58216: NEG
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 2
58228: NEG
58229: PUSH
58230: LD_INT 3
58232: NEG
58233: PUSH
58234: EMPTY
58235: LIST
58236: LIST
58237: PUSH
58238: LD_INT 1
58240: NEG
58241: PUSH
58242: LD_INT 3
58244: NEG
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: LD_INT 2
58255: NEG
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: PUSH
58261: LD_INT 2
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: LIST
58276: LIST
58277: LIST
58278: LIST
58279: LIST
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
58297: LD_ADDR_VAR 0 24
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: LD_INT 0
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 0
58314: PUSH
58315: LD_INT 1
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 1
58325: PUSH
58326: LD_INT 0
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: LD_INT 1
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 1
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 1
58366: NEG
58367: PUSH
58368: LD_INT 1
58370: NEG
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: LD_INT 1
58378: NEG
58379: PUSH
58380: LD_INT 2
58382: NEG
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 1
58401: PUSH
58402: LD_INT 1
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 2
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 2
58422: PUSH
58423: LD_INT 1
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 1
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 0
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 1
58462: NEG
58463: PUSH
58464: LD_INT 1
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 2
58473: NEG
58474: PUSH
58475: LD_INT 0
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 2
58484: NEG
58485: PUSH
58486: LD_INT 1
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 2
58496: NEG
58497: PUSH
58498: LD_INT 2
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 1
58508: PUSH
58509: LD_INT 2
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 2
58519: PUSH
58520: LD_INT 1
58522: NEG
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 3
58530: PUSH
58531: LD_INT 1
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: PUSH
58538: LD_INT 3
58540: PUSH
58541: LD_INT 2
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: EMPTY
58549: LIST
58550: LIST
58551: LIST
58552: LIST
58553: LIST
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
58573: LD_ADDR_VAR 0 25
58577: PUSH
58578: LD_INT 0
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: EMPTY
58585: LIST
58586: LIST
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: PUSH
58599: LD_INT 1
58601: PUSH
58602: LD_INT 0
58604: PUSH
58605: EMPTY
58606: LIST
58607: LIST
58608: PUSH
58609: LD_INT 1
58611: PUSH
58612: LD_INT 1
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: LD_INT 1
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: LD_INT 0
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: LD_INT 1
58642: NEG
58643: PUSH
58644: LD_INT 1
58646: NEG
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: LD_INT 2
58658: NEG
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: LD_INT 2
58669: NEG
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: PUSH
58675: LD_INT 1
58677: PUSH
58678: LD_INT 1
58680: NEG
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 2
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 2
58708: PUSH
58709: LD_INT 2
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: LD_INT 2
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 2
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: NEG
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 2
58749: NEG
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 2
58760: NEG
58761: PUSH
58762: LD_INT 1
58764: NEG
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: PUSH
58770: LD_INT 2
58772: NEG
58773: PUSH
58774: LD_INT 2
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 3
58784: PUSH
58785: LD_INT 1
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 3
58794: PUSH
58795: LD_INT 2
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 3
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: PUSH
58812: LD_INT 1
58814: PUSH
58815: LD_INT 3
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58847: LD_ADDR_VAR 0 26
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: LD_INT 0
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: LD_INT 1
58867: NEG
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PUSH
58873: LD_INT 1
58875: PUSH
58876: LD_INT 0
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: LD_INT 1
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: LD_INT 1
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: LD_INT 0
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: NEG
58917: PUSH
58918: LD_INT 1
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: PUSH
58930: LD_INT 2
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 0
58940: PUSH
58941: LD_INT 2
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 2
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 2
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 2
58982: PUSH
58983: LD_INT 2
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: LD_INT 1
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: NEG
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 2
59034: NEG
59035: PUSH
59036: LD_INT 1
59038: NEG
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 2
59046: NEG
59047: PUSH
59048: LD_INT 2
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 3
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: LD_INT 3
59071: PUSH
59072: EMPTY
59073: LIST
59074: LIST
59075: PUSH
59076: LD_INT 1
59078: NEG
59079: PUSH
59080: LD_INT 2
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 2
59089: NEG
59090: PUSH
59091: LD_INT 1
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: LIST
59113: LIST
59114: LIST
59115: LIST
59116: LIST
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59123: LD_ADDR_VAR 0 27
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 1
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: LD_INT 0
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: LD_INT 1
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: LD_INT 1
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: NEG
59182: PUSH
59183: LD_INT 0
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 1
59192: NEG
59193: PUSH
59194: LD_INT 1
59196: NEG
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 1
59204: NEG
59205: PUSH
59206: LD_INT 2
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: LD_INT 0
59216: PUSH
59217: LD_INT 2
59219: NEG
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: LD_INT 1
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: LD_INT 1
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: LD_INT 2
59261: PUSH
59262: EMPTY
59263: LIST
59264: LIST
59265: PUSH
59266: LD_INT 1
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 2
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 1
59288: NEG
59289: PUSH
59290: LD_INT 1
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 2
59299: NEG
59300: PUSH
59301: LD_INT 0
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 2
59310: NEG
59311: PUSH
59312: LD_INT 1
59314: NEG
59315: PUSH
59316: EMPTY
59317: LIST
59318: LIST
59319: PUSH
59320: LD_INT 2
59322: NEG
59323: PUSH
59324: LD_INT 2
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 2
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: LD_INT 1
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 3
59356: NEG
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 3
59368: NEG
59369: PUSH
59370: LD_INT 2
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: LIST
59399: LIST
59400: LIST
59401: LIST
59402: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59403: LD_ADDR_VAR 0 28
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 0
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: LD_INT 0
59420: PUSH
59421: LD_INT 1
59423: NEG
59424: PUSH
59425: EMPTY
59426: LIST
59427: LIST
59428: PUSH
59429: LD_INT 1
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 1
59441: PUSH
59442: LD_INT 1
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: LD_INT 1
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 1
59461: NEG
59462: PUSH
59463: LD_INT 0
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: NEG
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 1
59484: NEG
59485: PUSH
59486: LD_INT 2
59488: NEG
59489: PUSH
59490: EMPTY
59491: LIST
59492: LIST
59493: PUSH
59494: LD_INT 0
59496: PUSH
59497: LD_INT 2
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 1
59507: PUSH
59508: LD_INT 1
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: PUSH
59519: LD_INT 0
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: LD_INT 2
59528: PUSH
59529: LD_INT 1
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: LD_INT 2
59538: PUSH
59539: LD_INT 2
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 1
59548: PUSH
59549: LD_INT 2
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 0
59558: PUSH
59559: LD_INT 2
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: PUSH
59566: LD_INT 1
59568: NEG
59569: PUSH
59570: LD_INT 1
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 2
59579: NEG
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: LD_INT 1
59594: NEG
59595: PUSH
59596: EMPTY
59597: LIST
59598: LIST
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: LD_INT 2
59606: NEG
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: LD_INT 3
59618: NEG
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 1
59626: NEG
59627: PUSH
59628: LD_INT 3
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 3
59638: NEG
59639: PUSH
59640: LD_INT 1
59642: NEG
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 3
59650: NEG
59651: PUSH
59652: LD_INT 2
59654: NEG
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: LIST
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: LIST
59675: LIST
59676: LIST
59677: LIST
59678: LIST
59679: LIST
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
59685: LD_ADDR_VAR 0 29
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 0
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: LD_INT 1
59705: NEG
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: LD_INT 0
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: LD_INT 1
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 1
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: NEG
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 1
59754: NEG
59755: PUSH
59756: LD_INT 1
59758: NEG
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 1
59766: NEG
59767: PUSH
59768: LD_INT 2
59770: NEG
59771: PUSH
59772: EMPTY
59773: LIST
59774: LIST
59775: PUSH
59776: LD_INT 0
59778: PUSH
59779: LD_INT 2
59781: NEG
59782: PUSH
59783: EMPTY
59784: LIST
59785: LIST
59786: PUSH
59787: LD_INT 1
59789: PUSH
59790: LD_INT 1
59792: NEG
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: PUSH
59798: LD_INT 2
59800: PUSH
59801: LD_INT 0
59803: PUSH
59804: EMPTY
59805: LIST
59806: LIST
59807: PUSH
59808: LD_INT 2
59810: PUSH
59811: LD_INT 1
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 1
59820: PUSH
59821: LD_INT 2
59823: PUSH
59824: EMPTY
59825: LIST
59826: LIST
59827: PUSH
59828: LD_INT 0
59830: PUSH
59831: LD_INT 2
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: LD_INT 1
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: LD_INT 2
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 2
59875: NEG
59876: PUSH
59877: LD_INT 3
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 2
59887: PUSH
59888: LD_INT 1
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 3
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 1
59908: PUSH
59909: LD_INT 3
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 1
59918: NEG
59919: PUSH
59920: LD_INT 2
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 3
59929: NEG
59930: PUSH
59931: LD_INT 2
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: LIST
59943: LIST
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: LIST
59957: LIST
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: LIST
59963: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59964: LD_ADDR_VAR 0 30
59968: PUSH
59969: LD_INT 0
59971: PUSH
59972: LD_INT 0
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 0
59981: PUSH
59982: LD_INT 1
59984: NEG
59985: PUSH
59986: EMPTY
59987: LIST
59988: LIST
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: LD_INT 0
59995: PUSH
59996: EMPTY
59997: LIST
59998: LIST
59999: PUSH
60000: LD_INT 1
60002: PUSH
60003: LD_INT 1
60005: PUSH
60006: EMPTY
60007: LIST
60008: LIST
60009: PUSH
60010: LD_INT 0
60012: PUSH
60013: LD_INT 1
60015: PUSH
60016: EMPTY
60017: LIST
60018: LIST
60019: PUSH
60020: LD_INT 1
60022: NEG
60023: PUSH
60024: LD_INT 0
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: LD_INT 1
60037: NEG
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 1
60045: NEG
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 0
60057: PUSH
60058: LD_INT 2
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: LD_INT 1
60071: NEG
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 2
60079: PUSH
60080: LD_INT 0
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: PUSH
60090: LD_INT 1
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 2
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 1
60109: PUSH
60110: LD_INT 2
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 1
60119: NEG
60120: PUSH
60121: LD_INT 1
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 2
60130: NEG
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 2
60141: NEG
60142: PUSH
60143: LD_INT 1
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: LD_INT 1
60153: NEG
60154: PUSH
60155: LD_INT 3
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: PUSH
60166: LD_INT 2
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: LD_INT 3
60176: PUSH
60177: LD_INT 2
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: LD_INT 3
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: LD_INT 1
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 3
60207: NEG
60208: PUSH
60209: LD_INT 1
60211: NEG
60212: PUSH
60213: EMPTY
60214: LIST
60215: LIST
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: LIST
60239: LIST
60240: LIST
60241: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60242: LD_ADDR_VAR 0 31
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: LD_INT 0
60252: PUSH
60253: EMPTY
60254: LIST
60255: LIST
60256: PUSH
60257: LD_INT 0
60259: PUSH
60260: LD_INT 1
60262: NEG
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 1
60280: PUSH
60281: LD_INT 1
60283: PUSH
60284: EMPTY
60285: LIST
60286: LIST
60287: PUSH
60288: LD_INT 0
60290: PUSH
60291: LD_INT 1
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: LD_INT 0
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 1
60311: NEG
60312: PUSH
60313: LD_INT 1
60315: NEG
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: PUSH
60321: LD_INT 1
60323: NEG
60324: PUSH
60325: LD_INT 2
60327: NEG
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_INT 1
60335: PUSH
60336: LD_INT 1
60338: NEG
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 2
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: PUSH
60364: LD_INT 2
60366: PUSH
60367: LD_INT 2
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 1
60376: PUSH
60377: LD_INT 2
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 0
60386: PUSH
60387: LD_INT 2
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 1
60396: NEG
60397: PUSH
60398: LD_INT 1
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_INT 2
60407: NEG
60408: PUSH
60409: LD_INT 1
60411: NEG
60412: PUSH
60413: EMPTY
60414: LIST
60415: LIST
60416: PUSH
60417: LD_INT 2
60419: NEG
60420: PUSH
60421: LD_INT 2
60423: NEG
60424: PUSH
60425: EMPTY
60426: LIST
60427: LIST
60428: PUSH
60429: LD_INT 2
60431: NEG
60432: PUSH
60433: LD_INT 3
60435: NEG
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_INT 2
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: EMPTY
60449: LIST
60450: LIST
60451: PUSH
60452: LD_INT 3
60454: PUSH
60455: LD_INT 1
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: LD_INT 3
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 2
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 3
60485: NEG
60486: PUSH
60487: LD_INT 2
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: LIST
60504: LIST
60505: LIST
60506: LIST
60507: LIST
60508: LIST
60509: LIST
60510: LIST
60511: LIST
60512: LIST
60513: LIST
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60520: LD_ADDR_VAR 0 32
60524: PUSH
60525: LD_INT 0
60527: PUSH
60528: LD_INT 0
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: EMPTY
60543: LIST
60544: LIST
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: LD_INT 0
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: PUSH
60556: LD_INT 1
60558: PUSH
60559: LD_INT 1
60561: PUSH
60562: EMPTY
60563: LIST
60564: LIST
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: LD_INT 1
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 1
60578: NEG
60579: PUSH
60580: LD_INT 0
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 1
60589: NEG
60590: PUSH
60591: LD_INT 1
60593: NEG
60594: PUSH
60595: EMPTY
60596: LIST
60597: LIST
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: EMPTY
60608: LIST
60609: LIST
60610: PUSH
60611: LD_INT 0
60613: PUSH
60614: LD_INT 2
60616: NEG
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: LD_INT 2
60635: PUSH
60636: LD_INT 1
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: PUSH
60643: LD_INT 2
60645: PUSH
60646: LD_INT 2
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 1
60655: PUSH
60656: LD_INT 2
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 2
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 1
60675: NEG
60676: PUSH
60677: LD_INT 1
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 2
60686: NEG
60687: PUSH
60688: LD_INT 0
60690: PUSH
60691: EMPTY
60692: LIST
60693: LIST
60694: PUSH
60695: LD_INT 2
60697: NEG
60698: PUSH
60699: LD_INT 1
60701: NEG
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 3
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: LD_INT 2
60724: NEG
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 3
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 2
60742: PUSH
60743: LD_INT 3
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 2
60752: NEG
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 3
60763: NEG
60764: PUSH
60765: LD_INT 1
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: LIST
60787: LIST
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
60798: LD_ADDR_VAR 0 33
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 0
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 0
60815: PUSH
60816: LD_INT 1
60818: NEG
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: LD_INT 0
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: PUSH
60834: LD_INT 1
60836: PUSH
60837: LD_INT 1
60839: PUSH
60840: EMPTY
60841: LIST
60842: LIST
60843: PUSH
60844: LD_INT 0
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 1
60856: NEG
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 1
60879: NEG
60880: PUSH
60881: LD_INT 2
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 1
60891: PUSH
60892: LD_INT 1
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 2
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: LD_INT 1
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: PUSH
60923: LD_INT 2
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 0
60932: PUSH
60933: LD_INT 2
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: NEG
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 2
60964: NEG
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 2
60976: NEG
60977: PUSH
60978: LD_INT 2
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 2
60988: NEG
60989: PUSH
60990: LD_INT 3
60992: NEG
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: EMPTY
61006: LIST
61007: LIST
61008: PUSH
61009: LD_INT 3
61011: PUSH
61012: LD_INT 1
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 1
61021: PUSH
61022: LD_INT 3
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 1
61031: NEG
61032: PUSH
61033: LD_INT 2
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 3
61042: NEG
61043: PUSH
61044: LD_INT 2
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: LIST
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61077: LD_ADDR_VAR 0 34
61081: PUSH
61082: LD_INT 0
61084: PUSH
61085: LD_INT 0
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 1
61105: PUSH
61106: LD_INT 0
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: LD_INT 1
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: LD_INT 0
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: LD_INT 1
61146: NEG
61147: PUSH
61148: LD_INT 1
61150: NEG
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 1
61158: NEG
61159: PUSH
61160: LD_INT 2
61162: NEG
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: LD_INT 2
61173: NEG
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: LD_INT 1
61184: NEG
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: PUSH
61190: LD_INT 2
61192: PUSH
61193: LD_INT 1
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: PUSH
61200: LD_INT 2
61202: PUSH
61203: LD_INT 2
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: LD_INT 2
61215: PUSH
61216: EMPTY
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 1
61222: NEG
61223: PUSH
61224: LD_INT 1
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 2
61233: NEG
61234: PUSH
61235: LD_INT 0
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 2
61244: NEG
61245: PUSH
61246: LD_INT 1
61248: NEG
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 2
61256: NEG
61257: PUSH
61258: LD_INT 2
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 1
61268: NEG
61269: PUSH
61270: LD_INT 3
61272: NEG
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 1
61280: PUSH
61281: LD_INT 2
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 3
61291: PUSH
61292: LD_INT 2
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 2
61301: PUSH
61302: LD_INT 3
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: LD_INT 2
61311: NEG
61312: PUSH
61313: LD_INT 1
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 3
61322: NEG
61323: PUSH
61324: LD_INT 1
61326: NEG
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: LIST
61336: LIST
61337: LIST
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61357: LD_ADDR_VAR 0 35
61361: PUSH
61362: LD_INT 0
61364: PUSH
61365: LD_INT 0
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 0
61374: PUSH
61375: LD_INT 1
61377: NEG
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 1
61385: PUSH
61386: LD_INT 0
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: LD_INT 1
61398: PUSH
61399: EMPTY
61400: LIST
61401: LIST
61402: PUSH
61403: LD_INT 0
61405: PUSH
61406: LD_INT 1
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: LD_INT 1
61415: NEG
61416: PUSH
61417: LD_INT 0
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: LD_INT 1
61430: NEG
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: LD_INT 2
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: EMPTY
61443: LIST
61444: LIST
61445: PUSH
61446: LD_INT 2
61448: NEG
61449: PUSH
61450: LD_INT 1
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61469: LD_ADDR_VAR 0 36
61473: PUSH
61474: LD_INT 0
61476: PUSH
61477: LD_INT 0
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 0
61486: PUSH
61487: LD_INT 1
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 1
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 1
61507: PUSH
61508: LD_INT 1
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 0
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 1
61527: NEG
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: NEG
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: LD_INT 2
61554: NEG
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 1
61562: PUSH
61563: LD_INT 2
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61581: LD_ADDR_VAR 0 37
61585: PUSH
61586: LD_INT 0
61588: PUSH
61589: LD_INT 0
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: LD_INT 1
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: LD_INT 0
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 1
61619: PUSH
61620: LD_INT 1
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 0
61629: PUSH
61630: LD_INT 1
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 1
61639: NEG
61640: PUSH
61641: LD_INT 0
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: LD_INT 1
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: LD_INT 1
61665: NEG
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 1
61673: NEG
61674: PUSH
61675: LD_INT 1
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
61693: LD_ADDR_VAR 0 38
61697: PUSH
61698: LD_INT 0
61700: PUSH
61701: LD_INT 0
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 0
61710: PUSH
61711: LD_INT 1
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 1
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PUSH
61729: LD_INT 1
61731: PUSH
61732: LD_INT 1
61734: PUSH
61735: EMPTY
61736: LIST
61737: LIST
61738: PUSH
61739: LD_INT 0
61741: PUSH
61742: LD_INT 1
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: LD_INT 0
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: LD_INT 1
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 2
61774: PUSH
61775: LD_INT 1
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: NEG
61785: PUSH
61786: LD_INT 1
61788: NEG
61789: PUSH
61790: EMPTY
61791: LIST
61792: LIST
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: LIST
61800: LIST
61801: LIST
61802: LIST
61803: LIST
61804: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
61805: LD_ADDR_VAR 0 39
61809: PUSH
61810: LD_INT 0
61812: PUSH
61813: LD_INT 0
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: LD_INT 1
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 1
61833: PUSH
61834: LD_INT 0
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: LD_INT 1
61846: PUSH
61847: EMPTY
61848: LIST
61849: LIST
61850: PUSH
61851: LD_INT 0
61853: PUSH
61854: LD_INT 1
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 1
61863: NEG
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 1
61874: NEG
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 1
61886: NEG
61887: PUSH
61888: LD_INT 2
61890: NEG
61891: PUSH
61892: EMPTY
61893: LIST
61894: LIST
61895: PUSH
61896: LD_INT 1
61898: PUSH
61899: LD_INT 2
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
61917: LD_ADDR_VAR 0 40
61921: PUSH
61922: LD_INT 0
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: LD_INT 1
61937: NEG
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 1
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 0
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: LD_INT 0
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 1
61986: NEG
61987: PUSH
61988: LD_INT 1
61990: NEG
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 1
61998: PUSH
61999: LD_INT 1
62001: NEG
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 1
62009: NEG
62010: PUSH
62011: LD_INT 1
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62029: LD_ADDR_VAR 0 41
62033: PUSH
62034: LD_INT 0
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 0
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 1
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 1
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: NEG
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 1
62098: NEG
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 1
62110: NEG
62111: PUSH
62112: LD_INT 2
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 1
62122: PUSH
62123: LD_INT 1
62125: NEG
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 2
62133: PUSH
62134: LD_INT 0
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 2
62143: PUSH
62144: LD_INT 1
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 2
62153: PUSH
62154: LD_INT 2
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 2
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 1
62173: NEG
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 2
62184: NEG
62185: PUSH
62186: LD_INT 0
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 2
62195: NEG
62196: PUSH
62197: LD_INT 1
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: LD_INT 2
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: LD_INT 3
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 2
62231: PUSH
62232: LD_INT 1
62234: NEG
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 3
62242: PUSH
62243: LD_INT 0
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 3
62252: PUSH
62253: LD_INT 1
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 3
62262: PUSH
62263: LD_INT 2
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: PUSH
62270: LD_INT 3
62272: PUSH
62273: LD_INT 3
62275: PUSH
62276: EMPTY
62277: LIST
62278: LIST
62279: PUSH
62280: LD_INT 2
62282: PUSH
62283: LD_INT 3
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 2
62292: NEG
62293: PUSH
62294: LD_INT 1
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 3
62303: NEG
62304: PUSH
62305: LD_INT 0
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 3
62314: NEG
62315: PUSH
62316: LD_INT 1
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 3
62326: NEG
62327: PUSH
62328: LD_INT 2
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 3
62338: NEG
62339: PUSH
62340: LD_INT 3
62342: NEG
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: LIST
62370: LIST
62371: LIST
62372: LIST
62373: LIST
62374: LIST
62375: LIST
62376: LIST
62377: LIST
62378: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62379: LD_ADDR_VAR 0 42
62383: PUSH
62384: LD_INT 0
62386: PUSH
62387: LD_INT 0
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 0
62396: PUSH
62397: LD_INT 1
62399: NEG
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: LD_INT 0
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: LD_INT 1
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 1
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 2
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 2
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: LD_INT 1
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: LD_INT 2
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 1
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 0
62524: PUSH
62525: LD_INT 2
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 1
62534: NEG
62535: PUSH
62536: LD_INT 1
62538: PUSH
62539: EMPTY
62540: LIST
62541: LIST
62542: PUSH
62543: LD_INT 2
62545: NEG
62546: PUSH
62547: LD_INT 1
62549: NEG
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 2
62557: NEG
62558: PUSH
62559: LD_INT 2
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 2
62569: NEG
62570: PUSH
62571: LD_INT 3
62573: NEG
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: LD_INT 3
62585: NEG
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 0
62593: PUSH
62594: LD_INT 3
62596: NEG
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 1
62604: PUSH
62605: LD_INT 2
62607: NEG
62608: PUSH
62609: EMPTY
62610: LIST
62611: LIST
62612: PUSH
62613: LD_INT 3
62615: PUSH
62616: LD_INT 2
62618: PUSH
62619: EMPTY
62620: LIST
62621: LIST
62622: PUSH
62623: LD_INT 3
62625: PUSH
62626: LD_INT 3
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 2
62635: PUSH
62636: LD_INT 3
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: PUSH
62643: LD_INT 1
62645: PUSH
62646: LD_INT 3
62648: PUSH
62649: EMPTY
62650: LIST
62651: LIST
62652: PUSH
62653: LD_INT 0
62655: PUSH
62656: LD_INT 3
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: LD_INT 2
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 3
62676: NEG
62677: PUSH
62678: LD_INT 2
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 3
62688: NEG
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62729: LD_ADDR_VAR 0 43
62733: PUSH
62734: LD_INT 0
62736: PUSH
62737: LD_INT 0
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: LD_INT 1
62749: NEG
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: PUSH
62758: LD_INT 0
62760: PUSH
62761: EMPTY
62762: LIST
62763: LIST
62764: PUSH
62765: LD_INT 1
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 0
62777: PUSH
62778: LD_INT 1
62780: PUSH
62781: EMPTY
62782: LIST
62783: LIST
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: LD_INT 0
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 1
62798: NEG
62799: PUSH
62800: LD_INT 1
62802: NEG
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 1
62810: NEG
62811: PUSH
62812: LD_INT 2
62814: NEG
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 0
62822: PUSH
62823: LD_INT 2
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 1
62833: PUSH
62834: LD_INT 1
62836: NEG
62837: PUSH
62838: EMPTY
62839: LIST
62840: LIST
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 2
62854: PUSH
62855: LD_INT 1
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: LD_INT 2
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: LD_INT 2
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: LD_INT 1
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 2
62895: NEG
62896: PUSH
62897: LD_INT 0
62899: PUSH
62900: EMPTY
62901: LIST
62902: LIST
62903: PUSH
62904: LD_INT 2
62906: NEG
62907: PUSH
62908: LD_INT 1
62910: NEG
62911: PUSH
62912: EMPTY
62913: LIST
62914: LIST
62915: PUSH
62916: LD_INT 1
62918: NEG
62919: PUSH
62920: LD_INT 3
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 0
62930: PUSH
62931: LD_INT 3
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 1
62941: PUSH
62942: LD_INT 2
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 2
62952: PUSH
62953: LD_INT 1
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 3
62963: PUSH
62964: LD_INT 0
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 3
62973: PUSH
62974: LD_INT 1
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: LD_INT 1
62983: PUSH
62984: LD_INT 3
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 0
62993: PUSH
62994: LD_INT 3
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 1
63003: NEG
63004: PUSH
63005: LD_INT 2
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 2
63014: NEG
63015: PUSH
63016: LD_INT 1
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 3
63025: NEG
63026: PUSH
63027: LD_INT 0
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 3
63036: NEG
63037: PUSH
63038: LD_INT 1
63040: NEG
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: LIST
63056: LIST
63057: LIST
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: LIST
63065: LIST
63066: LIST
63067: LIST
63068: LIST
63069: LIST
63070: LIST
63071: LIST
63072: LIST
63073: LIST
63074: LIST
63075: LIST
63076: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63077: LD_ADDR_VAR 0 44
63081: PUSH
63082: LD_INT 0
63084: PUSH
63085: LD_INT 0
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: LD_INT 1
63097: NEG
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 1
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 1
63115: PUSH
63116: LD_INT 1
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 0
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 1
63135: NEG
63136: PUSH
63137: LD_INT 0
63139: PUSH
63140: EMPTY
63141: LIST
63142: LIST
63143: PUSH
63144: LD_INT 1
63146: NEG
63147: PUSH
63148: LD_INT 1
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: LD_INT 2
63162: NEG
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 1
63170: PUSH
63171: LD_INT 1
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 2
63181: PUSH
63182: LD_INT 0
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 2
63191: PUSH
63192: LD_INT 1
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 2
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 1
63211: PUSH
63212: LD_INT 2
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 2
63232: NEG
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 2
63243: NEG
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 2
63255: NEG
63256: PUSH
63257: LD_INT 2
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 2
63267: NEG
63268: PUSH
63269: LD_INT 3
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 2
63279: PUSH
63280: LD_INT 1
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 3
63290: PUSH
63291: LD_INT 0
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 3
63300: PUSH
63301: LD_INT 1
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 3
63310: PUSH
63311: LD_INT 2
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: PUSH
63318: LD_INT 3
63320: PUSH
63321: LD_INT 3
63323: PUSH
63324: EMPTY
63325: LIST
63326: LIST
63327: PUSH
63328: LD_INT 2
63330: PUSH
63331: LD_INT 3
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 2
63340: NEG
63341: PUSH
63342: LD_INT 1
63344: PUSH
63345: EMPTY
63346: LIST
63347: LIST
63348: PUSH
63349: LD_INT 3
63351: NEG
63352: PUSH
63353: LD_INT 0
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 3
63362: NEG
63363: PUSH
63364: LD_INT 1
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 3
63374: NEG
63375: PUSH
63376: LD_INT 2
63378: NEG
63379: PUSH
63380: EMPTY
63381: LIST
63382: LIST
63383: PUSH
63384: LD_INT 3
63386: NEG
63387: PUSH
63388: LD_INT 3
63390: NEG
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: EMPTY
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63427: LD_ADDR_VAR 0 45
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 0
63444: PUSH
63445: LD_INT 1
63447: NEG
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: LD_INT 0
63458: PUSH
63459: EMPTY
63460: LIST
63461: LIST
63462: PUSH
63463: LD_INT 1
63465: PUSH
63466: LD_INT 1
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 0
63475: PUSH
63476: LD_INT 1
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 1
63485: NEG
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 1
63496: NEG
63497: PUSH
63498: LD_INT 1
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 1
63508: NEG
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 2
63523: NEG
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 1
63531: PUSH
63532: LD_INT 1
63534: NEG
63535: PUSH
63536: EMPTY
63537: LIST
63538: LIST
63539: PUSH
63540: LD_INT 2
63542: PUSH
63543: LD_INT 1
63545: PUSH
63546: EMPTY
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 2
63552: PUSH
63553: LD_INT 2
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 1
63562: PUSH
63563: LD_INT 2
63565: PUSH
63566: EMPTY
63567: LIST
63568: LIST
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: EMPTY
63577: LIST
63578: LIST
63579: PUSH
63580: LD_INT 1
63582: NEG
63583: PUSH
63584: LD_INT 1
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: PUSH
63591: LD_INT 2
63593: NEG
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 2
63605: NEG
63606: PUSH
63607: LD_INT 2
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 2
63617: NEG
63618: PUSH
63619: LD_INT 3
63621: NEG
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 1
63629: NEG
63630: PUSH
63631: LD_INT 3
63633: NEG
63634: PUSH
63635: EMPTY
63636: LIST
63637: LIST
63638: PUSH
63639: LD_INT 0
63641: PUSH
63642: LD_INT 3
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: PUSH
63653: LD_INT 2
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 3
63663: PUSH
63664: LD_INT 2
63666: PUSH
63667: EMPTY
63668: LIST
63669: LIST
63670: PUSH
63671: LD_INT 3
63673: PUSH
63674: LD_INT 3
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 2
63683: PUSH
63684: LD_INT 3
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: PUSH
63694: LD_INT 3
63696: PUSH
63697: EMPTY
63698: LIST
63699: LIST
63700: PUSH
63701: LD_INT 0
63703: PUSH
63704: LD_INT 3
63706: PUSH
63707: EMPTY
63708: LIST
63709: LIST
63710: PUSH
63711: LD_INT 1
63713: NEG
63714: PUSH
63715: LD_INT 2
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: PUSH
63722: LD_INT 3
63724: NEG
63725: PUSH
63726: LD_INT 2
63728: NEG
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 3
63736: NEG
63737: PUSH
63738: LD_INT 3
63740: NEG
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: LIST
63770: LIST
63771: LIST
63772: LIST
63773: LIST
63774: LIST
63775: LIST
63776: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63777: LD_ADDR_VAR 0 46
63781: PUSH
63782: LD_INT 0
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 0
63794: PUSH
63795: LD_INT 1
63797: NEG
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: PUSH
63803: LD_INT 1
63805: PUSH
63806: LD_INT 0
63808: PUSH
63809: EMPTY
63810: LIST
63811: LIST
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: LD_INT 1
63818: PUSH
63819: EMPTY
63820: LIST
63821: LIST
63822: PUSH
63823: LD_INT 0
63825: PUSH
63826: LD_INT 1
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: LD_INT 0
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 1
63846: NEG
63847: PUSH
63848: LD_INT 1
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 1
63858: NEG
63859: PUSH
63860: LD_INT 2
63862: NEG
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: PUSH
63868: LD_INT 0
63870: PUSH
63871: LD_INT 2
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 1
63881: PUSH
63882: LD_INT 1
63884: NEG
63885: PUSH
63886: EMPTY
63887: LIST
63888: LIST
63889: PUSH
63890: LD_INT 2
63892: PUSH
63893: LD_INT 0
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: LD_INT 2
63902: PUSH
63903: LD_INT 1
63905: PUSH
63906: EMPTY
63907: LIST
63908: LIST
63909: PUSH
63910: LD_INT 1
63912: PUSH
63913: LD_INT 2
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 0
63922: PUSH
63923: LD_INT 2
63925: PUSH
63926: EMPTY
63927: LIST
63928: LIST
63929: PUSH
63930: LD_INT 1
63932: NEG
63933: PUSH
63934: LD_INT 1
63936: PUSH
63937: EMPTY
63938: LIST
63939: LIST
63940: PUSH
63941: LD_INT 2
63943: NEG
63944: PUSH
63945: LD_INT 0
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: PUSH
63952: LD_INT 2
63954: NEG
63955: PUSH
63956: LD_INT 1
63958: NEG
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 1
63966: NEG
63967: PUSH
63968: LD_INT 3
63970: NEG
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: LD_INT 3
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: LD_INT 2
63992: NEG
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 2
64000: PUSH
64001: LD_INT 1
64003: NEG
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 3
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 3
64021: PUSH
64022: LD_INT 1
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: LD_INT 3
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: LD_INT 3
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: LD_INT 2
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 2
64062: NEG
64063: PUSH
64064: LD_INT 1
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 3
64073: NEG
64074: PUSH
64075: LD_INT 0
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 3
64084: NEG
64085: PUSH
64086: LD_INT 1
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64125: LD_ADDR_VAR 0 47
64129: PUSH
64130: LD_INT 0
64132: PUSH
64133: LD_INT 0
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_INT 0
64142: PUSH
64143: LD_INT 1
64145: NEG
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: LD_INT 0
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 1
64163: PUSH
64164: LD_INT 1
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 0
64173: PUSH
64174: LD_INT 1
64176: PUSH
64177: EMPTY
64178: LIST
64179: LIST
64180: PUSH
64181: LD_INT 1
64183: NEG
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 1
64194: NEG
64195: PUSH
64196: LD_INT 1
64198: NEG
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 1
64206: NEG
64207: PUSH
64208: LD_INT 2
64210: NEG
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PUSH
64216: LD_INT 0
64218: PUSH
64219: LD_INT 2
64221: NEG
64222: PUSH
64223: EMPTY
64224: LIST
64225: LIST
64226: PUSH
64227: LD_INT 1
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 2
64240: NEG
64241: PUSH
64242: LD_INT 1
64244: NEG
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 2
64252: NEG
64253: PUSH
64254: LD_INT 2
64256: NEG
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: EMPTY
64263: LIST
64264: LIST
64265: LIST
64266: LIST
64267: LIST
64268: LIST
64269: LIST
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: LIST
64275: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
64276: LD_ADDR_VAR 0 48
64280: PUSH
64281: LD_INT 0
64283: PUSH
64284: LD_INT 0
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: LD_INT 1
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: LD_INT 0
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 1
64314: PUSH
64315: LD_INT 1
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 0
64324: PUSH
64325: LD_INT 1
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: NEG
64335: PUSH
64336: LD_INT 0
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 1
64345: NEG
64346: PUSH
64347: LD_INT 1
64349: NEG
64350: PUSH
64351: EMPTY
64352: LIST
64353: LIST
64354: PUSH
64355: LD_INT 1
64357: NEG
64358: PUSH
64359: LD_INT 2
64361: NEG
64362: PUSH
64363: EMPTY
64364: LIST
64365: LIST
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 2
64372: NEG
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: LD_INT 1
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 2
64391: PUSH
64392: LD_INT 0
64394: PUSH
64395: EMPTY
64396: LIST
64397: LIST
64398: PUSH
64399: LD_INT 2
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: LIST
64413: LIST
64414: LIST
64415: LIST
64416: LIST
64417: LIST
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
64423: LD_ADDR_VAR 0 49
64427: PUSH
64428: LD_INT 0
64430: PUSH
64431: LD_INT 0
64433: PUSH
64434: EMPTY
64435: LIST
64436: LIST
64437: PUSH
64438: LD_INT 0
64440: PUSH
64441: LD_INT 1
64443: NEG
64444: PUSH
64445: EMPTY
64446: LIST
64447: LIST
64448: PUSH
64449: LD_INT 1
64451: PUSH
64452: LD_INT 0
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: LD_INT 1
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: LD_INT 1
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 1
64481: NEG
64482: PUSH
64483: LD_INT 0
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 1
64492: NEG
64493: PUSH
64494: LD_INT 1
64496: NEG
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 1
64504: PUSH
64505: LD_INT 1
64507: NEG
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 2
64515: PUSH
64516: LD_INT 0
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 2
64525: PUSH
64526: LD_INT 1
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 2
64535: PUSH
64536: LD_INT 2
64538: PUSH
64539: EMPTY
64540: LIST
64541: LIST
64542: PUSH
64543: LD_INT 1
64545: PUSH
64546: LD_INT 2
64548: PUSH
64549: EMPTY
64550: LIST
64551: LIST
64552: PUSH
64553: EMPTY
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
64567: LD_ADDR_VAR 0 50
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 0
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: LD_INT 1
64587: NEG
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: EMPTY
64600: LIST
64601: LIST
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: LD_INT 1
64608: PUSH
64609: EMPTY
64610: LIST
64611: LIST
64612: PUSH
64613: LD_INT 0
64615: PUSH
64616: LD_INT 1
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: PUSH
64623: LD_INT 1
64625: NEG
64626: PUSH
64627: LD_INT 0
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_INT 1
64636: NEG
64637: PUSH
64638: LD_INT 1
64640: NEG
64641: PUSH
64642: EMPTY
64643: LIST
64644: LIST
64645: PUSH
64646: LD_INT 2
64648: PUSH
64649: LD_INT 1
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PUSH
64656: LD_INT 2
64658: PUSH
64659: LD_INT 2
64661: PUSH
64662: EMPTY
64663: LIST
64664: LIST
64665: PUSH
64666: LD_INT 1
64668: PUSH
64669: LD_INT 2
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: LD_INT 2
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: PUSH
64686: LD_INT 1
64688: NEG
64689: PUSH
64690: LD_INT 1
64692: PUSH
64693: EMPTY
64694: LIST
64695: LIST
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
64711: LD_ADDR_VAR 0 51
64715: PUSH
64716: LD_INT 0
64718: PUSH
64719: LD_INT 0
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: PUSH
64726: LD_INT 0
64728: PUSH
64729: LD_INT 1
64731: NEG
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 1
64739: PUSH
64740: LD_INT 0
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: LD_INT 1
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: LD_INT 1
64784: NEG
64785: PUSH
64786: EMPTY
64787: LIST
64788: LIST
64789: PUSH
64790: LD_INT 1
64792: PUSH
64793: LD_INT 2
64795: PUSH
64796: EMPTY
64797: LIST
64798: LIST
64799: PUSH
64800: LD_INT 0
64802: PUSH
64803: LD_INT 2
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 1
64812: NEG
64813: PUSH
64814: LD_INT 1
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 2
64823: NEG
64824: PUSH
64825: LD_INT 0
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 2
64834: NEG
64835: PUSH
64836: LD_INT 1
64838: NEG
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: LIST
64854: LIST
64855: LIST
64856: LIST
64857: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64858: LD_ADDR_VAR 0 52
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: LD_INT 0
64868: PUSH
64869: EMPTY
64870: LIST
64871: LIST
64872: PUSH
64873: LD_INT 0
64875: PUSH
64876: LD_INT 1
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 1
64886: PUSH
64887: LD_INT 0
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 1
64896: PUSH
64897: LD_INT 1
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 0
64906: PUSH
64907: LD_INT 1
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: PUSH
64914: LD_INT 1
64916: NEG
64917: PUSH
64918: LD_INT 0
64920: PUSH
64921: EMPTY
64922: LIST
64923: LIST
64924: PUSH
64925: LD_INT 1
64927: NEG
64928: PUSH
64929: LD_INT 1
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: LD_INT 2
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: NEG
64952: PUSH
64953: LD_INT 1
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 2
64962: NEG
64963: PUSH
64964: LD_INT 0
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 2
64973: NEG
64974: PUSH
64975: LD_INT 1
64977: NEG
64978: PUSH
64979: EMPTY
64980: LIST
64981: LIST
64982: PUSH
64983: LD_INT 2
64985: NEG
64986: PUSH
64987: LD_INT 2
64989: NEG
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: PUSH
64995: EMPTY
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: LIST
65004: LIST
65005: LIST
65006: LIST
65007: LIST
65008: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65009: LD_ADDR_VAR 0 53
65013: PUSH
65014: LD_INT 0
65016: PUSH
65017: LD_INT 0
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 0
65026: PUSH
65027: LD_INT 1
65029: NEG
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 1
65037: PUSH
65038: LD_INT 0
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 1
65047: PUSH
65048: LD_INT 1
65050: PUSH
65051: EMPTY
65052: LIST
65053: LIST
65054: PUSH
65055: LD_INT 0
65057: PUSH
65058: LD_INT 1
65060: PUSH
65061: EMPTY
65062: LIST
65063: LIST
65064: PUSH
65065: LD_INT 1
65067: NEG
65068: PUSH
65069: LD_INT 0
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 1
65078: NEG
65079: PUSH
65080: LD_INT 1
65082: NEG
65083: PUSH
65084: EMPTY
65085: LIST
65086: LIST
65087: PUSH
65088: LD_INT 1
65090: NEG
65091: PUSH
65092: LD_INT 2
65094: NEG
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: LD_INT 2
65105: NEG
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: PUSH
65111: LD_INT 1
65113: PUSH
65114: LD_INT 1
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 2
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 2
65134: PUSH
65135: LD_INT 1
65137: PUSH
65138: EMPTY
65139: LIST
65140: LIST
65141: PUSH
65142: LD_INT 2
65144: PUSH
65145: LD_INT 2
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 1
65154: PUSH
65155: LD_INT 2
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 0
65164: PUSH
65165: LD_INT 2
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 1
65174: NEG
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 2
65185: NEG
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 2
65196: NEG
65197: PUSH
65198: LD_INT 1
65200: NEG
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 2
65208: NEG
65209: PUSH
65210: LD_INT 2
65212: NEG
65213: PUSH
65214: EMPTY
65215: LIST
65216: LIST
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65239: LD_ADDR_VAR 0 54
65243: PUSH
65244: LD_INT 0
65246: PUSH
65247: LD_INT 0
65249: PUSH
65250: EMPTY
65251: LIST
65252: LIST
65253: PUSH
65254: LD_INT 0
65256: PUSH
65257: LD_INT 1
65259: NEG
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: PUSH
65265: LD_INT 1
65267: PUSH
65268: LD_INT 0
65270: PUSH
65271: EMPTY
65272: LIST
65273: LIST
65274: PUSH
65275: LD_INT 1
65277: PUSH
65278: LD_INT 1
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 0
65287: PUSH
65288: LD_INT 1
65290: PUSH
65291: EMPTY
65292: LIST
65293: LIST
65294: PUSH
65295: LD_INT 1
65297: NEG
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 1
65308: NEG
65309: PUSH
65310: LD_INT 1
65312: NEG
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 1
65320: NEG
65321: PUSH
65322: LD_INT 2
65324: NEG
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 0
65332: PUSH
65333: LD_INT 2
65335: NEG
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: LD_INT 1
65343: PUSH
65344: LD_INT 1
65346: NEG
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PUSH
65352: LD_INT 2
65354: PUSH
65355: LD_INT 0
65357: PUSH
65358: EMPTY
65359: LIST
65360: LIST
65361: PUSH
65362: LD_INT 2
65364: PUSH
65365: LD_INT 1
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 2
65374: PUSH
65375: LD_INT 2
65377: PUSH
65378: EMPTY
65379: LIST
65380: LIST
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: LD_INT 2
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 0
65394: PUSH
65395: LD_INT 2
65397: PUSH
65398: EMPTY
65399: LIST
65400: LIST
65401: PUSH
65402: LD_INT 1
65404: NEG
65405: PUSH
65406: LD_INT 1
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 2
65415: NEG
65416: PUSH
65417: LD_INT 0
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: PUSH
65424: LD_INT 2
65426: NEG
65427: PUSH
65428: LD_INT 1
65430: NEG
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: PUSH
65436: LD_INT 2
65438: NEG
65439: PUSH
65440: LD_INT 2
65442: NEG
65443: PUSH
65444: EMPTY
65445: LIST
65446: LIST
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: LIST
65452: LIST
65453: LIST
65454: LIST
65455: LIST
65456: LIST
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: LIST
65467: LIST
65468: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65469: LD_ADDR_VAR 0 55
65473: PUSH
65474: LD_INT 0
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: EMPTY
65481: LIST
65482: LIST
65483: PUSH
65484: LD_INT 0
65486: PUSH
65487: LD_INT 1
65489: NEG
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PUSH
65495: LD_INT 1
65497: PUSH
65498: LD_INT 0
65500: PUSH
65501: EMPTY
65502: LIST
65503: LIST
65504: PUSH
65505: LD_INT 1
65507: PUSH
65508: LD_INT 1
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: PUSH
65515: LD_INT 0
65517: PUSH
65518: LD_INT 1
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_INT 1
65527: NEG
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: PUSH
65536: LD_INT 1
65538: NEG
65539: PUSH
65540: LD_INT 1
65542: NEG
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 1
65550: NEG
65551: PUSH
65552: LD_INT 2
65554: NEG
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: LD_INT 2
65565: NEG
65566: PUSH
65567: EMPTY
65568: LIST
65569: LIST
65570: PUSH
65571: LD_INT 1
65573: PUSH
65574: LD_INT 1
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 2
65584: PUSH
65585: LD_INT 0
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 2
65594: PUSH
65595: LD_INT 1
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 2
65604: PUSH
65605: LD_INT 2
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: PUSH
65612: LD_INT 1
65614: PUSH
65615: LD_INT 2
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 0
65624: PUSH
65625: LD_INT 2
65627: PUSH
65628: EMPTY
65629: LIST
65630: LIST
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: LD_INT 1
65638: PUSH
65639: EMPTY
65640: LIST
65641: LIST
65642: PUSH
65643: LD_INT 2
65645: NEG
65646: PUSH
65647: LD_INT 0
65649: PUSH
65650: EMPTY
65651: LIST
65652: LIST
65653: PUSH
65654: LD_INT 2
65656: NEG
65657: PUSH
65658: LD_INT 1
65660: NEG
65661: PUSH
65662: EMPTY
65663: LIST
65664: LIST
65665: PUSH
65666: LD_INT 2
65668: NEG
65669: PUSH
65670: LD_INT 2
65672: NEG
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65699: LD_ADDR_VAR 0 56
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: LD_INT 1
65719: NEG
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 1
65737: PUSH
65738: LD_INT 1
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 1
65757: NEG
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: PUSH
65770: LD_INT 1
65772: NEG
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: LD_INT 2
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: LD_INT 2
65795: NEG
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PUSH
65801: LD_INT 1
65803: PUSH
65804: LD_INT 1
65806: NEG
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: LD_INT 2
65814: PUSH
65815: LD_INT 0
65817: PUSH
65818: EMPTY
65819: LIST
65820: LIST
65821: PUSH
65822: LD_INT 2
65824: PUSH
65825: LD_INT 1
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 2
65834: PUSH
65835: LD_INT 2
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 1
65844: PUSH
65845: LD_INT 2
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 2
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: LD_INT 1
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 2
65875: NEG
65876: PUSH
65877: LD_INT 0
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 2
65886: NEG
65887: PUSH
65888: LD_INT 1
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 2
65898: NEG
65899: PUSH
65900: LD_INT 2
65902: NEG
65903: PUSH
65904: EMPTY
65905: LIST
65906: LIST
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: LIST
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65929: LD_ADDR_VAR 0 57
65933: PUSH
65934: LD_INT 0
65936: PUSH
65937: LD_INT 0
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 0
65946: PUSH
65947: LD_INT 1
65949: NEG
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 1
65957: PUSH
65958: LD_INT 0
65960: PUSH
65961: EMPTY
65962: LIST
65963: LIST
65964: PUSH
65965: LD_INT 1
65967: PUSH
65968: LD_INT 1
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 0
65977: PUSH
65978: LD_INT 1
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 1
65987: NEG
65988: PUSH
65989: LD_INT 0
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: PUSH
65996: LD_INT 1
65998: NEG
65999: PUSH
66000: LD_INT 1
66002: NEG
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: PUSH
66008: LD_INT 1
66010: NEG
66011: PUSH
66012: LD_INT 2
66014: NEG
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 0
66022: PUSH
66023: LD_INT 2
66025: NEG
66026: PUSH
66027: EMPTY
66028: LIST
66029: LIST
66030: PUSH
66031: LD_INT 1
66033: PUSH
66034: LD_INT 1
66036: NEG
66037: PUSH
66038: EMPTY
66039: LIST
66040: LIST
66041: PUSH
66042: LD_INT 2
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 2
66054: PUSH
66055: LD_INT 1
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 2
66064: PUSH
66065: LD_INT 2
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 1
66074: PUSH
66075: LD_INT 2
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 0
66084: PUSH
66085: LD_INT 2
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 1
66094: NEG
66095: PUSH
66096: LD_INT 1
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 2
66105: NEG
66106: PUSH
66107: LD_INT 0
66109: PUSH
66110: EMPTY
66111: LIST
66112: LIST
66113: PUSH
66114: LD_INT 2
66116: NEG
66117: PUSH
66118: LD_INT 1
66120: NEG
66121: PUSH
66122: EMPTY
66123: LIST
66124: LIST
66125: PUSH
66126: LD_INT 2
66128: NEG
66129: PUSH
66130: LD_INT 2
66132: NEG
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: LIST
66142: LIST
66143: LIST
66144: LIST
66145: LIST
66146: LIST
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66159: LD_ADDR_VAR 0 58
66163: PUSH
66164: LD_INT 0
66166: PUSH
66167: LD_INT 0
66169: PUSH
66170: EMPTY
66171: LIST
66172: LIST
66173: PUSH
66174: LD_INT 0
66176: PUSH
66177: LD_INT 1
66179: NEG
66180: PUSH
66181: EMPTY
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 1
66187: PUSH
66188: LD_INT 0
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 1
66197: PUSH
66198: LD_INT 1
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 0
66207: PUSH
66208: LD_INT 1
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: NEG
66218: PUSH
66219: LD_INT 0
66221: PUSH
66222: EMPTY
66223: LIST
66224: LIST
66225: PUSH
66226: LD_INT 1
66228: NEG
66229: PUSH
66230: LD_INT 1
66232: NEG
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: PUSH
66238: LD_INT 1
66240: NEG
66241: PUSH
66242: LD_INT 2
66244: NEG
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 0
66252: PUSH
66253: LD_INT 2
66255: NEG
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 1
66263: PUSH
66264: LD_INT 1
66266: NEG
66267: PUSH
66268: EMPTY
66269: LIST
66270: LIST
66271: PUSH
66272: LD_INT 2
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: EMPTY
66279: LIST
66280: LIST
66281: PUSH
66282: LD_INT 2
66284: PUSH
66285: LD_INT 1
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 2
66294: PUSH
66295: LD_INT 2
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 1
66304: PUSH
66305: LD_INT 2
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 0
66314: PUSH
66315: LD_INT 2
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: LD_INT 1
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: PUSH
66333: LD_INT 2
66335: NEG
66336: PUSH
66337: LD_INT 0
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: PUSH
66344: LD_INT 2
66346: NEG
66347: PUSH
66348: LD_INT 1
66350: NEG
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: LD_INT 2
66358: NEG
66359: PUSH
66360: LD_INT 2
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: EMPTY
66369: LIST
66370: LIST
66371: LIST
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66389: LD_ADDR_VAR 0 59
66393: PUSH
66394: LD_INT 0
66396: PUSH
66397: LD_INT 0
66399: PUSH
66400: EMPTY
66401: LIST
66402: LIST
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: LD_INT 1
66409: NEG
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: PUSH
66415: LD_INT 1
66417: PUSH
66418: LD_INT 0
66420: PUSH
66421: EMPTY
66422: LIST
66423: LIST
66424: PUSH
66425: LD_INT 1
66427: PUSH
66428: LD_INT 1
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 0
66437: PUSH
66438: LD_INT 1
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: NEG
66448: PUSH
66449: LD_INT 0
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_INT 1
66458: NEG
66459: PUSH
66460: LD_INT 1
66462: NEG
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: LIST
66472: LIST
66473: LIST
66474: LIST
66475: LIST
66476: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66477: LD_ADDR_VAR 0 60
66481: PUSH
66482: LD_INT 0
66484: PUSH
66485: LD_INT 0
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_INT 0
66494: PUSH
66495: LD_INT 1
66497: NEG
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 1
66505: PUSH
66506: LD_INT 0
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 1
66515: PUSH
66516: LD_INT 1
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: LD_INT 1
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: LD_INT 1
66535: NEG
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 1
66546: NEG
66547: PUSH
66548: LD_INT 1
66550: NEG
66551: PUSH
66552: EMPTY
66553: LIST
66554: LIST
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: LIST
66562: LIST
66563: LIST
66564: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66565: LD_ADDR_VAR 0 61
66569: PUSH
66570: LD_INT 0
66572: PUSH
66573: LD_INT 0
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 0
66582: PUSH
66583: LD_INT 1
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: LD_INT 1
66593: PUSH
66594: LD_INT 0
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: PUSH
66601: LD_INT 1
66603: PUSH
66604: LD_INT 1
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: PUSH
66611: LD_INT 0
66613: PUSH
66614: LD_INT 1
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 1
66623: NEG
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 1
66634: NEG
66635: PUSH
66636: LD_INT 1
66638: NEG
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: LIST
66648: LIST
66649: LIST
66650: LIST
66651: LIST
66652: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66653: LD_ADDR_VAR 0 62
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: LD_INT 1
66673: NEG
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: PUSH
66679: LD_INT 1
66681: PUSH
66682: LD_INT 0
66684: PUSH
66685: EMPTY
66686: LIST
66687: LIST
66688: PUSH
66689: LD_INT 1
66691: PUSH
66692: LD_INT 1
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 0
66701: PUSH
66702: LD_INT 1
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 1
66711: NEG
66712: PUSH
66713: LD_INT 0
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PUSH
66720: LD_INT 1
66722: NEG
66723: PUSH
66724: LD_INT 1
66726: NEG
66727: PUSH
66728: EMPTY
66729: LIST
66730: LIST
66731: PUSH
66732: EMPTY
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66741: LD_ADDR_VAR 0 63
66745: PUSH
66746: LD_INT 0
66748: PUSH
66749: LD_INT 0
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 0
66758: PUSH
66759: LD_INT 1
66761: NEG
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 1
66769: PUSH
66770: LD_INT 0
66772: PUSH
66773: EMPTY
66774: LIST
66775: LIST
66776: PUSH
66777: LD_INT 1
66779: PUSH
66780: LD_INT 1
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: PUSH
66787: LD_INT 0
66789: PUSH
66790: LD_INT 1
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 1
66799: NEG
66800: PUSH
66801: LD_INT 0
66803: PUSH
66804: EMPTY
66805: LIST
66806: LIST
66807: PUSH
66808: LD_INT 1
66810: NEG
66811: PUSH
66812: LD_INT 1
66814: NEG
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: LIST
66824: LIST
66825: LIST
66826: LIST
66827: LIST
66828: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
66829: LD_ADDR_VAR 0 64
66833: PUSH
66834: LD_INT 0
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 0
66846: PUSH
66847: LD_INT 1
66849: NEG
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: PUSH
66855: LD_INT 1
66857: PUSH
66858: LD_INT 0
66860: PUSH
66861: EMPTY
66862: LIST
66863: LIST
66864: PUSH
66865: LD_INT 1
66867: PUSH
66868: LD_INT 1
66870: PUSH
66871: EMPTY
66872: LIST
66873: LIST
66874: PUSH
66875: LD_INT 0
66877: PUSH
66878: LD_INT 1
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 1
66887: NEG
66888: PUSH
66889: LD_INT 0
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 1
66898: NEG
66899: PUSH
66900: LD_INT 1
66902: NEG
66903: PUSH
66904: EMPTY
66905: LIST
66906: LIST
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: LIST
66912: LIST
66913: LIST
66914: LIST
66915: LIST
66916: ST_TO_ADDR
// end ; 1 :
66917: GO 72814
66919: LD_INT 1
66921: DOUBLE
66922: EQUAL
66923: IFTRUE 66927
66925: GO 69550
66927: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66928: LD_ADDR_VAR 0 11
66932: PUSH
66933: LD_INT 1
66935: NEG
66936: PUSH
66937: LD_INT 3
66939: NEG
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: LD_INT 3
66950: NEG
66951: PUSH
66952: EMPTY
66953: LIST
66954: LIST
66955: PUSH
66956: LD_INT 1
66958: PUSH
66959: LD_INT 2
66961: NEG
66962: PUSH
66963: EMPTY
66964: LIST
66965: LIST
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: LIST
66971: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66972: LD_ADDR_VAR 0 12
66976: PUSH
66977: LD_INT 2
66979: PUSH
66980: LD_INT 1
66982: NEG
66983: PUSH
66984: EMPTY
66985: LIST
66986: LIST
66987: PUSH
66988: LD_INT 3
66990: PUSH
66991: LD_INT 0
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 3
67000: PUSH
67001: LD_INT 1
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: LIST
67012: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67013: LD_ADDR_VAR 0 13
67017: PUSH
67018: LD_INT 3
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 3
67030: PUSH
67031: LD_INT 3
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 2
67040: PUSH
67041: LD_INT 3
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: EMPTY
67049: LIST
67050: LIST
67051: LIST
67052: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67053: LD_ADDR_VAR 0 14
67057: PUSH
67058: LD_INT 1
67060: PUSH
67061: LD_INT 3
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 0
67070: PUSH
67071: LD_INT 3
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 1
67080: NEG
67081: PUSH
67082: LD_INT 2
67084: PUSH
67085: EMPTY
67086: LIST
67087: LIST
67088: PUSH
67089: EMPTY
67090: LIST
67091: LIST
67092: LIST
67093: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67094: LD_ADDR_VAR 0 15
67098: PUSH
67099: LD_INT 2
67101: NEG
67102: PUSH
67103: LD_INT 1
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 3
67112: NEG
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 3
67123: NEG
67124: PUSH
67125: LD_INT 1
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: EMPTY
67134: LIST
67135: LIST
67136: LIST
67137: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67138: LD_ADDR_VAR 0 16
67142: PUSH
67143: LD_INT 2
67145: NEG
67146: PUSH
67147: LD_INT 3
67149: NEG
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 3
67157: NEG
67158: PUSH
67159: LD_INT 2
67161: NEG
67162: PUSH
67163: EMPTY
67164: LIST
67165: LIST
67166: PUSH
67167: LD_INT 3
67169: NEG
67170: PUSH
67171: LD_INT 3
67173: NEG
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: EMPTY
67180: LIST
67181: LIST
67182: LIST
67183: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
67184: LD_ADDR_VAR 0 17
67188: PUSH
67189: LD_INT 1
67191: NEG
67192: PUSH
67193: LD_INT 3
67195: NEG
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 0
67203: PUSH
67204: LD_INT 3
67206: NEG
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 1
67214: PUSH
67215: LD_INT 2
67217: NEG
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: LIST
67227: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
67228: LD_ADDR_VAR 0 18
67232: PUSH
67233: LD_INT 2
67235: PUSH
67236: LD_INT 1
67238: NEG
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 3
67246: PUSH
67247: LD_INT 0
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 3
67256: PUSH
67257: LD_INT 1
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: LIST
67268: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
67269: LD_ADDR_VAR 0 19
67273: PUSH
67274: LD_INT 3
67276: PUSH
67277: LD_INT 2
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 3
67286: PUSH
67287: LD_INT 3
67289: PUSH
67290: EMPTY
67291: LIST
67292: LIST
67293: PUSH
67294: LD_INT 2
67296: PUSH
67297: LD_INT 3
67299: PUSH
67300: EMPTY
67301: LIST
67302: LIST
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: LIST
67308: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
67309: LD_ADDR_VAR 0 20
67313: PUSH
67314: LD_INT 1
67316: PUSH
67317: LD_INT 3
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: LD_INT 3
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 1
67336: NEG
67337: PUSH
67338: LD_INT 2
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: EMPTY
67346: LIST
67347: LIST
67348: LIST
67349: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67350: LD_ADDR_VAR 0 21
67354: PUSH
67355: LD_INT 2
67357: NEG
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 3
67368: NEG
67369: PUSH
67370: LD_INT 0
67372: PUSH
67373: EMPTY
67374: LIST
67375: LIST
67376: PUSH
67377: LD_INT 3
67379: NEG
67380: PUSH
67381: LD_INT 1
67383: NEG
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: LIST
67393: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67394: LD_ADDR_VAR 0 22
67398: PUSH
67399: LD_INT 2
67401: NEG
67402: PUSH
67403: LD_INT 3
67405: NEG
67406: PUSH
67407: EMPTY
67408: LIST
67409: LIST
67410: PUSH
67411: LD_INT 3
67413: NEG
67414: PUSH
67415: LD_INT 2
67417: NEG
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 3
67425: NEG
67426: PUSH
67427: LD_INT 3
67429: NEG
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: EMPTY
67436: LIST
67437: LIST
67438: LIST
67439: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
67440: LD_ADDR_VAR 0 23
67444: PUSH
67445: LD_INT 0
67447: PUSH
67448: LD_INT 3
67450: NEG
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 1
67458: NEG
67459: PUSH
67460: LD_INT 4
67462: NEG
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: PUSH
67468: LD_INT 1
67470: PUSH
67471: LD_INT 3
67473: NEG
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: PUSH
67479: EMPTY
67480: LIST
67481: LIST
67482: LIST
67483: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
67484: LD_ADDR_VAR 0 24
67488: PUSH
67489: LD_INT 3
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 3
67501: PUSH
67502: LD_INT 1
67504: NEG
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 4
67512: PUSH
67513: LD_INT 1
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: EMPTY
67521: LIST
67522: LIST
67523: LIST
67524: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
67525: LD_ADDR_VAR 0 25
67529: PUSH
67530: LD_INT 3
67532: PUSH
67533: LD_INT 3
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 4
67542: PUSH
67543: LD_INT 3
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 3
67552: PUSH
67553: LD_INT 4
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: LIST
67564: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
67565: LD_ADDR_VAR 0 26
67569: PUSH
67570: LD_INT 0
67572: PUSH
67573: LD_INT 3
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 1
67582: PUSH
67583: LD_INT 4
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 1
67592: NEG
67593: PUSH
67594: LD_INT 3
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: PUSH
67601: EMPTY
67602: LIST
67603: LIST
67604: LIST
67605: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
67606: LD_ADDR_VAR 0 27
67610: PUSH
67611: LD_INT 3
67613: NEG
67614: PUSH
67615: LD_INT 0
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: PUSH
67622: LD_INT 3
67624: NEG
67625: PUSH
67626: LD_INT 1
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 4
67635: NEG
67636: PUSH
67637: LD_INT 1
67639: NEG
67640: PUSH
67641: EMPTY
67642: LIST
67643: LIST
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: LIST
67649: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
67650: LD_ADDR_VAR 0 28
67654: PUSH
67655: LD_INT 3
67657: NEG
67658: PUSH
67659: LD_INT 3
67661: NEG
67662: PUSH
67663: EMPTY
67664: LIST
67665: LIST
67666: PUSH
67667: LD_INT 3
67669: NEG
67670: PUSH
67671: LD_INT 4
67673: NEG
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 4
67681: NEG
67682: PUSH
67683: LD_INT 3
67685: NEG
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: LIST
67695: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
67696: LD_ADDR_VAR 0 29
67700: PUSH
67701: LD_INT 1
67703: NEG
67704: PUSH
67705: LD_INT 3
67707: NEG
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 0
67715: PUSH
67716: LD_INT 3
67718: NEG
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: LD_INT 1
67726: PUSH
67727: LD_INT 2
67729: NEG
67730: PUSH
67731: EMPTY
67732: LIST
67733: LIST
67734: PUSH
67735: LD_INT 1
67737: NEG
67738: PUSH
67739: LD_INT 4
67741: NEG
67742: PUSH
67743: EMPTY
67744: LIST
67745: LIST
67746: PUSH
67747: LD_INT 0
67749: PUSH
67750: LD_INT 4
67752: NEG
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 1
67760: PUSH
67761: LD_INT 3
67763: NEG
67764: PUSH
67765: EMPTY
67766: LIST
67767: LIST
67768: PUSH
67769: LD_INT 1
67771: NEG
67772: PUSH
67773: LD_INT 5
67775: NEG
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 0
67783: PUSH
67784: LD_INT 5
67786: NEG
67787: PUSH
67788: EMPTY
67789: LIST
67790: LIST
67791: PUSH
67792: LD_INT 1
67794: PUSH
67795: LD_INT 4
67797: NEG
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: LD_INT 1
67805: NEG
67806: PUSH
67807: LD_INT 6
67809: NEG
67810: PUSH
67811: EMPTY
67812: LIST
67813: LIST
67814: PUSH
67815: LD_INT 0
67817: PUSH
67818: LD_INT 6
67820: NEG
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 1
67828: PUSH
67829: LD_INT 5
67831: NEG
67832: PUSH
67833: EMPTY
67834: LIST
67835: LIST
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: LIST
67850: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
67851: LD_ADDR_VAR 0 30
67855: PUSH
67856: LD_INT 2
67858: PUSH
67859: LD_INT 1
67861: NEG
67862: PUSH
67863: EMPTY
67864: LIST
67865: LIST
67866: PUSH
67867: LD_INT 3
67869: PUSH
67870: LD_INT 0
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 3
67879: PUSH
67880: LD_INT 1
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: PUSH
67887: LD_INT 3
67889: PUSH
67890: LD_INT 1
67892: NEG
67893: PUSH
67894: EMPTY
67895: LIST
67896: LIST
67897: PUSH
67898: LD_INT 4
67900: PUSH
67901: LD_INT 0
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 4
67910: PUSH
67911: LD_INT 1
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 4
67920: PUSH
67921: LD_INT 1
67923: NEG
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: LD_INT 5
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: PUSH
67939: LD_INT 5
67941: PUSH
67942: LD_INT 1
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 5
67951: PUSH
67952: LD_INT 1
67954: NEG
67955: PUSH
67956: EMPTY
67957: LIST
67958: LIST
67959: PUSH
67960: LD_INT 6
67962: PUSH
67963: LD_INT 0
67965: PUSH
67966: EMPTY
67967: LIST
67968: LIST
67969: PUSH
67970: LD_INT 6
67972: PUSH
67973: LD_INT 1
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: LIST
67984: LIST
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
67994: LD_ADDR_VAR 0 31
67998: PUSH
67999: LD_INT 3
68001: PUSH
68002: LD_INT 2
68004: PUSH
68005: EMPTY
68006: LIST
68007: LIST
68008: PUSH
68009: LD_INT 3
68011: PUSH
68012: LD_INT 3
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 2
68021: PUSH
68022: LD_INT 3
68024: PUSH
68025: EMPTY
68026: LIST
68027: LIST
68028: PUSH
68029: LD_INT 4
68031: PUSH
68032: LD_INT 3
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 4
68041: PUSH
68042: LD_INT 4
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 3
68051: PUSH
68052: LD_INT 4
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 5
68061: PUSH
68062: LD_INT 4
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 5
68071: PUSH
68072: LD_INT 5
68074: PUSH
68075: EMPTY
68076: LIST
68077: LIST
68078: PUSH
68079: LD_INT 4
68081: PUSH
68082: LD_INT 5
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 6
68091: PUSH
68092: LD_INT 5
68094: PUSH
68095: EMPTY
68096: LIST
68097: LIST
68098: PUSH
68099: LD_INT 6
68101: PUSH
68102: LD_INT 6
68104: PUSH
68105: EMPTY
68106: LIST
68107: LIST
68108: PUSH
68109: LD_INT 5
68111: PUSH
68112: LD_INT 6
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: EMPTY
68120: LIST
68121: LIST
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: LIST
68128: LIST
68129: LIST
68130: LIST
68131: LIST
68132: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
68133: LD_ADDR_VAR 0 32
68137: PUSH
68138: LD_INT 1
68140: PUSH
68141: LD_INT 3
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 0
68150: PUSH
68151: LD_INT 3
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 1
68160: NEG
68161: PUSH
68162: LD_INT 2
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 1
68171: PUSH
68172: LD_INT 4
68174: PUSH
68175: EMPTY
68176: LIST
68177: LIST
68178: PUSH
68179: LD_INT 0
68181: PUSH
68182: LD_INT 4
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 1
68191: NEG
68192: PUSH
68193: LD_INT 3
68195: PUSH
68196: EMPTY
68197: LIST
68198: LIST
68199: PUSH
68200: LD_INT 1
68202: PUSH
68203: LD_INT 5
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 0
68212: PUSH
68213: LD_INT 5
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 1
68222: NEG
68223: PUSH
68224: LD_INT 4
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 1
68233: PUSH
68234: LD_INT 6
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 0
68243: PUSH
68244: LD_INT 6
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 1
68253: NEG
68254: PUSH
68255: LD_INT 5
68257: PUSH
68258: EMPTY
68259: LIST
68260: LIST
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
68276: LD_ADDR_VAR 0 33
68280: PUSH
68281: LD_INT 2
68283: NEG
68284: PUSH
68285: LD_INT 1
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 3
68294: NEG
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: EMPTY
68300: LIST
68301: LIST
68302: PUSH
68303: LD_INT 3
68305: NEG
68306: PUSH
68307: LD_INT 1
68309: NEG
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 3
68317: NEG
68318: PUSH
68319: LD_INT 1
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 4
68328: NEG
68329: PUSH
68330: LD_INT 0
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 4
68339: NEG
68340: PUSH
68341: LD_INT 1
68343: NEG
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 4
68351: NEG
68352: PUSH
68353: LD_INT 1
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 5
68362: NEG
68363: PUSH
68364: LD_INT 0
68366: PUSH
68367: EMPTY
68368: LIST
68369: LIST
68370: PUSH
68371: LD_INT 5
68373: NEG
68374: PUSH
68375: LD_INT 1
68377: NEG
68378: PUSH
68379: EMPTY
68380: LIST
68381: LIST
68382: PUSH
68383: LD_INT 5
68385: NEG
68386: PUSH
68387: LD_INT 1
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PUSH
68394: LD_INT 6
68396: NEG
68397: PUSH
68398: LD_INT 0
68400: PUSH
68401: EMPTY
68402: LIST
68403: LIST
68404: PUSH
68405: LD_INT 6
68407: NEG
68408: PUSH
68409: LD_INT 1
68411: NEG
68412: PUSH
68413: EMPTY
68414: LIST
68415: LIST
68416: PUSH
68417: EMPTY
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
68431: LD_ADDR_VAR 0 34
68435: PUSH
68436: LD_INT 2
68438: NEG
68439: PUSH
68440: LD_INT 3
68442: NEG
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 3
68450: NEG
68451: PUSH
68452: LD_INT 2
68454: NEG
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: LD_INT 3
68462: NEG
68463: PUSH
68464: LD_INT 3
68466: NEG
68467: PUSH
68468: EMPTY
68469: LIST
68470: LIST
68471: PUSH
68472: LD_INT 3
68474: NEG
68475: PUSH
68476: LD_INT 4
68478: NEG
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 4
68486: NEG
68487: PUSH
68488: LD_INT 3
68490: NEG
68491: PUSH
68492: EMPTY
68493: LIST
68494: LIST
68495: PUSH
68496: LD_INT 4
68498: NEG
68499: PUSH
68500: LD_INT 4
68502: NEG
68503: PUSH
68504: EMPTY
68505: LIST
68506: LIST
68507: PUSH
68508: LD_INT 4
68510: NEG
68511: PUSH
68512: LD_INT 5
68514: NEG
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: LD_INT 5
68522: NEG
68523: PUSH
68524: LD_INT 4
68526: NEG
68527: PUSH
68528: EMPTY
68529: LIST
68530: LIST
68531: PUSH
68532: LD_INT 5
68534: NEG
68535: PUSH
68536: LD_INT 5
68538: NEG
68539: PUSH
68540: EMPTY
68541: LIST
68542: LIST
68543: PUSH
68544: LD_INT 5
68546: NEG
68547: PUSH
68548: LD_INT 6
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 6
68558: NEG
68559: PUSH
68560: LD_INT 5
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 6
68570: NEG
68571: PUSH
68572: LD_INT 6
68574: NEG
68575: PUSH
68576: EMPTY
68577: LIST
68578: LIST
68579: PUSH
68580: EMPTY
68581: LIST
68582: LIST
68583: LIST
68584: LIST
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
68594: LD_ADDR_VAR 0 41
68598: PUSH
68599: LD_INT 0
68601: PUSH
68602: LD_INT 2
68604: NEG
68605: PUSH
68606: EMPTY
68607: LIST
68608: LIST
68609: PUSH
68610: LD_INT 1
68612: NEG
68613: PUSH
68614: LD_INT 3
68616: NEG
68617: PUSH
68618: EMPTY
68619: LIST
68620: LIST
68621: PUSH
68622: LD_INT 1
68624: PUSH
68625: LD_INT 2
68627: NEG
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: LIST
68637: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
68638: LD_ADDR_VAR 0 42
68642: PUSH
68643: LD_INT 2
68645: PUSH
68646: LD_INT 0
68648: PUSH
68649: EMPTY
68650: LIST
68651: LIST
68652: PUSH
68653: LD_INT 2
68655: PUSH
68656: LD_INT 1
68658: NEG
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: PUSH
68664: LD_INT 3
68666: PUSH
68667: LD_INT 1
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: LIST
68678: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
68679: LD_ADDR_VAR 0 43
68683: PUSH
68684: LD_INT 2
68686: PUSH
68687: LD_INT 2
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 3
68696: PUSH
68697: LD_INT 2
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 2
68706: PUSH
68707: LD_INT 3
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: LIST
68718: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
68719: LD_ADDR_VAR 0 44
68723: PUSH
68724: LD_INT 0
68726: PUSH
68727: LD_INT 2
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 1
68736: PUSH
68737: LD_INT 3
68739: PUSH
68740: EMPTY
68741: LIST
68742: LIST
68743: PUSH
68744: LD_INT 1
68746: NEG
68747: PUSH
68748: LD_INT 2
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: EMPTY
68756: LIST
68757: LIST
68758: LIST
68759: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68760: LD_ADDR_VAR 0 45
68764: PUSH
68765: LD_INT 2
68767: NEG
68768: PUSH
68769: LD_INT 0
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: PUSH
68776: LD_INT 2
68778: NEG
68779: PUSH
68780: LD_INT 1
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: LD_INT 3
68789: NEG
68790: PUSH
68791: LD_INT 1
68793: NEG
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: LIST
68803: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
68804: LD_ADDR_VAR 0 46
68808: PUSH
68809: LD_INT 2
68811: NEG
68812: PUSH
68813: LD_INT 2
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 2
68823: NEG
68824: PUSH
68825: LD_INT 3
68827: NEG
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: PUSH
68833: LD_INT 3
68835: NEG
68836: PUSH
68837: LD_INT 2
68839: NEG
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: PUSH
68845: EMPTY
68846: LIST
68847: LIST
68848: LIST
68849: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
68850: LD_ADDR_VAR 0 47
68854: PUSH
68855: LD_INT 2
68857: NEG
68858: PUSH
68859: LD_INT 3
68861: NEG
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 1
68869: NEG
68870: PUSH
68871: LD_INT 3
68873: NEG
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68883: LD_ADDR_VAR 0 48
68887: PUSH
68888: LD_INT 1
68890: PUSH
68891: LD_INT 2
68893: NEG
68894: PUSH
68895: EMPTY
68896: LIST
68897: LIST
68898: PUSH
68899: LD_INT 2
68901: PUSH
68902: LD_INT 1
68904: NEG
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: EMPTY
68911: LIST
68912: LIST
68913: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
68914: LD_ADDR_VAR 0 49
68918: PUSH
68919: LD_INT 3
68921: PUSH
68922: LD_INT 1
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 3
68931: PUSH
68932: LD_INT 2
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
68943: LD_ADDR_VAR 0 50
68947: PUSH
68948: LD_INT 2
68950: PUSH
68951: LD_INT 3
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 1
68960: PUSH
68961: LD_INT 3
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68972: LD_ADDR_VAR 0 51
68976: PUSH
68977: LD_INT 1
68979: NEG
68980: PUSH
68981: LD_INT 2
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 2
68990: NEG
68991: PUSH
68992: LD_INT 1
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69003: LD_ADDR_VAR 0 52
69007: PUSH
69008: LD_INT 3
69010: NEG
69011: PUSH
69012: LD_INT 1
69014: NEG
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 3
69022: NEG
69023: PUSH
69024: LD_INT 2
69026: NEG
69027: PUSH
69028: EMPTY
69029: LIST
69030: LIST
69031: PUSH
69032: EMPTY
69033: LIST
69034: LIST
69035: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69036: LD_ADDR_VAR 0 53
69040: PUSH
69041: LD_INT 1
69043: NEG
69044: PUSH
69045: LD_INT 3
69047: NEG
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 0
69055: PUSH
69056: LD_INT 3
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 1
69066: PUSH
69067: LD_INT 2
69069: NEG
69070: PUSH
69071: EMPTY
69072: LIST
69073: LIST
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: LIST
69079: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69080: LD_ADDR_VAR 0 54
69084: PUSH
69085: LD_INT 2
69087: PUSH
69088: LD_INT 1
69090: NEG
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 3
69098: PUSH
69099: LD_INT 0
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 3
69108: PUSH
69109: LD_INT 1
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: EMPTY
69117: LIST
69118: LIST
69119: LIST
69120: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
69121: LD_ADDR_VAR 0 55
69125: PUSH
69126: LD_INT 3
69128: PUSH
69129: LD_INT 2
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 3
69138: PUSH
69139: LD_INT 3
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 2
69148: PUSH
69149: LD_INT 3
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: EMPTY
69157: LIST
69158: LIST
69159: LIST
69160: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69161: LD_ADDR_VAR 0 56
69165: PUSH
69166: LD_INT 1
69168: PUSH
69169: LD_INT 3
69171: PUSH
69172: EMPTY
69173: LIST
69174: LIST
69175: PUSH
69176: LD_INT 0
69178: PUSH
69179: LD_INT 3
69181: PUSH
69182: EMPTY
69183: LIST
69184: LIST
69185: PUSH
69186: LD_INT 1
69188: NEG
69189: PUSH
69190: LD_INT 2
69192: PUSH
69193: EMPTY
69194: LIST
69195: LIST
69196: PUSH
69197: EMPTY
69198: LIST
69199: LIST
69200: LIST
69201: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69202: LD_ADDR_VAR 0 57
69206: PUSH
69207: LD_INT 2
69209: NEG
69210: PUSH
69211: LD_INT 1
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 3
69220: NEG
69221: PUSH
69222: LD_INT 0
69224: PUSH
69225: EMPTY
69226: LIST
69227: LIST
69228: PUSH
69229: LD_INT 3
69231: NEG
69232: PUSH
69233: LD_INT 1
69235: NEG
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: LIST
69245: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69246: LD_ADDR_VAR 0 58
69250: PUSH
69251: LD_INT 2
69253: NEG
69254: PUSH
69255: LD_INT 3
69257: NEG
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: LD_INT 3
69265: NEG
69266: PUSH
69267: LD_INT 2
69269: NEG
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 3
69277: NEG
69278: PUSH
69279: LD_INT 3
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: LIST
69291: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
69292: LD_ADDR_VAR 0 59
69296: PUSH
69297: LD_INT 1
69299: NEG
69300: PUSH
69301: LD_INT 2
69303: NEG
69304: PUSH
69305: EMPTY
69306: LIST
69307: LIST
69308: PUSH
69309: LD_INT 0
69311: PUSH
69312: LD_INT 2
69314: NEG
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 1
69322: PUSH
69323: LD_INT 1
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: LIST
69335: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69336: LD_ADDR_VAR 0 60
69340: PUSH
69341: LD_INT 1
69343: PUSH
69344: LD_INT 1
69346: NEG
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 2
69354: PUSH
69355: LD_INT 0
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 2
69364: PUSH
69365: LD_INT 1
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: LIST
69376: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69377: LD_ADDR_VAR 0 61
69381: PUSH
69382: LD_INT 2
69384: PUSH
69385: LD_INT 1
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 2
69394: PUSH
69395: LD_INT 2
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 1
69404: PUSH
69405: LD_INT 2
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: EMPTY
69413: LIST
69414: LIST
69415: LIST
69416: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69417: LD_ADDR_VAR 0 62
69421: PUSH
69422: LD_INT 1
69424: PUSH
69425: LD_INT 2
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 0
69434: PUSH
69435: LD_INT 2
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: LD_INT 1
69444: NEG
69445: PUSH
69446: LD_INT 1
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: LIST
69457: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69458: LD_ADDR_VAR 0 63
69462: PUSH
69463: LD_INT 1
69465: NEG
69466: PUSH
69467: LD_INT 1
69469: PUSH
69470: EMPTY
69471: LIST
69472: LIST
69473: PUSH
69474: LD_INT 2
69476: NEG
69477: PUSH
69478: LD_INT 0
69480: PUSH
69481: EMPTY
69482: LIST
69483: LIST
69484: PUSH
69485: LD_INT 2
69487: NEG
69488: PUSH
69489: LD_INT 1
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: LIST
69501: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69502: LD_ADDR_VAR 0 64
69506: PUSH
69507: LD_INT 1
69509: NEG
69510: PUSH
69511: LD_INT 2
69513: NEG
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 2
69521: NEG
69522: PUSH
69523: LD_INT 1
69525: NEG
69526: PUSH
69527: EMPTY
69528: LIST
69529: LIST
69530: PUSH
69531: LD_INT 2
69533: NEG
69534: PUSH
69535: LD_INT 2
69537: NEG
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: EMPTY
69544: LIST
69545: LIST
69546: LIST
69547: ST_TO_ADDR
// end ; 2 :
69548: GO 72814
69550: LD_INT 2
69552: DOUBLE
69553: EQUAL
69554: IFTRUE 69558
69556: GO 72813
69558: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
69559: LD_ADDR_VAR 0 29
69563: PUSH
69564: LD_INT 4
69566: PUSH
69567: LD_INT 0
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 4
69576: PUSH
69577: LD_INT 1
69579: NEG
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 5
69587: PUSH
69588: LD_INT 0
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 5
69597: PUSH
69598: LD_INT 1
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 4
69607: PUSH
69608: LD_INT 1
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 3
69617: PUSH
69618: LD_INT 0
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 3
69627: PUSH
69628: LD_INT 1
69630: NEG
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 3
69638: PUSH
69639: LD_INT 2
69641: NEG
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: PUSH
69647: LD_INT 5
69649: PUSH
69650: LD_INT 2
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 3
69659: PUSH
69660: LD_INT 3
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: PUSH
69667: LD_INT 3
69669: PUSH
69670: LD_INT 2
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 4
69679: PUSH
69680: LD_INT 3
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 4
69689: PUSH
69690: LD_INT 4
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 3
69699: PUSH
69700: LD_INT 4
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 2
69709: PUSH
69710: LD_INT 3
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 2
69719: PUSH
69720: LD_INT 2
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 4
69729: PUSH
69730: LD_INT 2
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 2
69739: PUSH
69740: LD_INT 4
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 0
69749: PUSH
69750: LD_INT 4
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: LD_INT 0
69759: PUSH
69760: LD_INT 3
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 1
69769: PUSH
69770: LD_INT 4
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 1
69779: PUSH
69780: LD_INT 5
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 0
69789: PUSH
69790: LD_INT 5
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 1
69799: NEG
69800: PUSH
69801: LD_INT 4
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 1
69810: NEG
69811: PUSH
69812: LD_INT 3
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 2
69821: PUSH
69822: LD_INT 5
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 2
69831: NEG
69832: PUSH
69833: LD_INT 3
69835: PUSH
69836: EMPTY
69837: LIST
69838: LIST
69839: PUSH
69840: LD_INT 3
69842: NEG
69843: PUSH
69844: LD_INT 0
69846: PUSH
69847: EMPTY
69848: LIST
69849: LIST
69850: PUSH
69851: LD_INT 3
69853: NEG
69854: PUSH
69855: LD_INT 1
69857: NEG
69858: PUSH
69859: EMPTY
69860: LIST
69861: LIST
69862: PUSH
69863: LD_INT 2
69865: NEG
69866: PUSH
69867: LD_INT 0
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 2
69876: NEG
69877: PUSH
69878: LD_INT 1
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 3
69887: NEG
69888: PUSH
69889: LD_INT 1
69891: PUSH
69892: EMPTY
69893: LIST
69894: LIST
69895: PUSH
69896: LD_INT 4
69898: NEG
69899: PUSH
69900: LD_INT 0
69902: PUSH
69903: EMPTY
69904: LIST
69905: LIST
69906: PUSH
69907: LD_INT 4
69909: NEG
69910: PUSH
69911: LD_INT 1
69913: NEG
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 4
69921: NEG
69922: PUSH
69923: LD_INT 2
69925: NEG
69926: PUSH
69927: EMPTY
69928: LIST
69929: LIST
69930: PUSH
69931: LD_INT 2
69933: NEG
69934: PUSH
69935: LD_INT 2
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 4
69944: NEG
69945: PUSH
69946: LD_INT 4
69948: NEG
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 4
69956: NEG
69957: PUSH
69958: LD_INT 5
69960: NEG
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 3
69968: NEG
69969: PUSH
69970: LD_INT 4
69972: NEG
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: PUSH
69978: LD_INT 3
69980: NEG
69981: PUSH
69982: LD_INT 3
69984: NEG
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 4
69992: NEG
69993: PUSH
69994: LD_INT 3
69996: NEG
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 5
70004: NEG
70005: PUSH
70006: LD_INT 4
70008: NEG
70009: PUSH
70010: EMPTY
70011: LIST
70012: LIST
70013: PUSH
70014: LD_INT 5
70016: NEG
70017: PUSH
70018: LD_INT 5
70020: NEG
70021: PUSH
70022: EMPTY
70023: LIST
70024: LIST
70025: PUSH
70026: LD_INT 3
70028: NEG
70029: PUSH
70030: LD_INT 5
70032: NEG
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: LD_INT 5
70040: NEG
70041: PUSH
70042: LD_INT 3
70044: NEG
70045: PUSH
70046: EMPTY
70047: LIST
70048: LIST
70049: PUSH
70050: EMPTY
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: LIST
70059: LIST
70060: LIST
70061: LIST
70062: LIST
70063: LIST
70064: LIST
70065: LIST
70066: LIST
70067: LIST
70068: LIST
70069: LIST
70070: LIST
70071: LIST
70072: LIST
70073: LIST
70074: LIST
70075: LIST
70076: LIST
70077: LIST
70078: LIST
70079: LIST
70080: LIST
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
70097: LD_ADDR_VAR 0 30
70101: PUSH
70102: LD_INT 4
70104: PUSH
70105: LD_INT 4
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 4
70114: PUSH
70115: LD_INT 3
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 5
70124: PUSH
70125: LD_INT 4
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 5
70134: PUSH
70135: LD_INT 5
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: PUSH
70142: LD_INT 4
70144: PUSH
70145: LD_INT 5
70147: PUSH
70148: EMPTY
70149: LIST
70150: LIST
70151: PUSH
70152: LD_INT 3
70154: PUSH
70155: LD_INT 4
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 3
70164: PUSH
70165: LD_INT 3
70167: PUSH
70168: EMPTY
70169: LIST
70170: LIST
70171: PUSH
70172: LD_INT 5
70174: PUSH
70175: LD_INT 3
70177: PUSH
70178: EMPTY
70179: LIST
70180: LIST
70181: PUSH
70182: LD_INT 3
70184: PUSH
70185: LD_INT 5
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 0
70194: PUSH
70195: LD_INT 3
70197: PUSH
70198: EMPTY
70199: LIST
70200: LIST
70201: PUSH
70202: LD_INT 0
70204: PUSH
70205: LD_INT 2
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 1
70214: PUSH
70215: LD_INT 3
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 1
70224: PUSH
70225: LD_INT 4
70227: PUSH
70228: EMPTY
70229: LIST
70230: LIST
70231: PUSH
70232: LD_INT 0
70234: PUSH
70235: LD_INT 4
70237: PUSH
70238: EMPTY
70239: LIST
70240: LIST
70241: PUSH
70242: LD_INT 1
70244: NEG
70245: PUSH
70246: LD_INT 3
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 1
70255: NEG
70256: PUSH
70257: LD_INT 2
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 2
70266: PUSH
70267: LD_INT 4
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 2
70276: NEG
70277: PUSH
70278: LD_INT 2
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 4
70287: NEG
70288: PUSH
70289: LD_INT 0
70291: PUSH
70292: EMPTY
70293: LIST
70294: LIST
70295: PUSH
70296: LD_INT 4
70298: NEG
70299: PUSH
70300: LD_INT 1
70302: NEG
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 3
70310: NEG
70311: PUSH
70312: LD_INT 0
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 3
70321: NEG
70322: PUSH
70323: LD_INT 1
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 4
70332: NEG
70333: PUSH
70334: LD_INT 1
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 5
70343: NEG
70344: PUSH
70345: LD_INT 0
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: PUSH
70352: LD_INT 5
70354: NEG
70355: PUSH
70356: LD_INT 1
70358: NEG
70359: PUSH
70360: EMPTY
70361: LIST
70362: LIST
70363: PUSH
70364: LD_INT 5
70366: NEG
70367: PUSH
70368: LD_INT 2
70370: NEG
70371: PUSH
70372: EMPTY
70373: LIST
70374: LIST
70375: PUSH
70376: LD_INT 3
70378: NEG
70379: PUSH
70380: LD_INT 2
70382: PUSH
70383: EMPTY
70384: LIST
70385: LIST
70386: PUSH
70387: LD_INT 3
70389: NEG
70390: PUSH
70391: LD_INT 3
70393: NEG
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 3
70401: NEG
70402: PUSH
70403: LD_INT 4
70405: NEG
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 2
70413: NEG
70414: PUSH
70415: LD_INT 3
70417: NEG
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 2
70425: NEG
70426: PUSH
70427: LD_INT 2
70429: NEG
70430: PUSH
70431: EMPTY
70432: LIST
70433: LIST
70434: PUSH
70435: LD_INT 3
70437: NEG
70438: PUSH
70439: LD_INT 2
70441: NEG
70442: PUSH
70443: EMPTY
70444: LIST
70445: LIST
70446: PUSH
70447: LD_INT 4
70449: NEG
70450: PUSH
70451: LD_INT 3
70453: NEG
70454: PUSH
70455: EMPTY
70456: LIST
70457: LIST
70458: PUSH
70459: LD_INT 4
70461: NEG
70462: PUSH
70463: LD_INT 4
70465: NEG
70466: PUSH
70467: EMPTY
70468: LIST
70469: LIST
70470: PUSH
70471: LD_INT 2
70473: NEG
70474: PUSH
70475: LD_INT 4
70477: NEG
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 4
70485: NEG
70486: PUSH
70487: LD_INT 2
70489: NEG
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: PUSH
70495: LD_INT 0
70497: PUSH
70498: LD_INT 4
70500: NEG
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: PUSH
70506: LD_INT 0
70508: PUSH
70509: LD_INT 5
70511: NEG
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 1
70519: PUSH
70520: LD_INT 4
70522: NEG
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 1
70530: PUSH
70531: LD_INT 3
70533: NEG
70534: PUSH
70535: EMPTY
70536: LIST
70537: LIST
70538: PUSH
70539: LD_INT 0
70541: PUSH
70542: LD_INT 3
70544: NEG
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 1
70552: NEG
70553: PUSH
70554: LD_INT 4
70556: NEG
70557: PUSH
70558: EMPTY
70559: LIST
70560: LIST
70561: PUSH
70562: LD_INT 1
70564: NEG
70565: PUSH
70566: LD_INT 5
70568: NEG
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 2
70576: PUSH
70577: LD_INT 3
70579: NEG
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 2
70587: NEG
70588: PUSH
70589: LD_INT 5
70591: NEG
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: EMPTY
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: LIST
70612: LIST
70613: LIST
70614: LIST
70615: LIST
70616: LIST
70617: LIST
70618: LIST
70619: LIST
70620: LIST
70621: LIST
70622: LIST
70623: LIST
70624: LIST
70625: LIST
70626: LIST
70627: LIST
70628: LIST
70629: LIST
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
70644: LD_ADDR_VAR 0 31
70648: PUSH
70649: LD_INT 0
70651: PUSH
70652: LD_INT 4
70654: PUSH
70655: EMPTY
70656: LIST
70657: LIST
70658: PUSH
70659: LD_INT 0
70661: PUSH
70662: LD_INT 3
70664: PUSH
70665: EMPTY
70666: LIST
70667: LIST
70668: PUSH
70669: LD_INT 1
70671: PUSH
70672: LD_INT 4
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 1
70681: PUSH
70682: LD_INT 5
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 0
70691: PUSH
70692: LD_INT 5
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 1
70701: NEG
70702: PUSH
70703: LD_INT 4
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 1
70712: NEG
70713: PUSH
70714: LD_INT 3
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 2
70723: PUSH
70724: LD_INT 5
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 2
70733: NEG
70734: PUSH
70735: LD_INT 3
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 3
70744: NEG
70745: PUSH
70746: LD_INT 0
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 3
70755: NEG
70756: PUSH
70757: LD_INT 1
70759: NEG
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: PUSH
70765: LD_INT 2
70767: NEG
70768: PUSH
70769: LD_INT 0
70771: PUSH
70772: EMPTY
70773: LIST
70774: LIST
70775: PUSH
70776: LD_INT 2
70778: NEG
70779: PUSH
70780: LD_INT 1
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: PUSH
70787: LD_INT 3
70789: NEG
70790: PUSH
70791: LD_INT 1
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 4
70800: NEG
70801: PUSH
70802: LD_INT 0
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 4
70811: NEG
70812: PUSH
70813: LD_INT 1
70815: NEG
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 4
70823: NEG
70824: PUSH
70825: LD_INT 2
70827: NEG
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 2
70835: NEG
70836: PUSH
70837: LD_INT 2
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 4
70846: NEG
70847: PUSH
70848: LD_INT 4
70850: NEG
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 4
70858: NEG
70859: PUSH
70860: LD_INT 5
70862: NEG
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 3
70870: NEG
70871: PUSH
70872: LD_INT 4
70874: NEG
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: PUSH
70880: LD_INT 3
70882: NEG
70883: PUSH
70884: LD_INT 3
70886: NEG
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 4
70894: NEG
70895: PUSH
70896: LD_INT 3
70898: NEG
70899: PUSH
70900: EMPTY
70901: LIST
70902: LIST
70903: PUSH
70904: LD_INT 5
70906: NEG
70907: PUSH
70908: LD_INT 4
70910: NEG
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 5
70918: NEG
70919: PUSH
70920: LD_INT 5
70922: NEG
70923: PUSH
70924: EMPTY
70925: LIST
70926: LIST
70927: PUSH
70928: LD_INT 3
70930: NEG
70931: PUSH
70932: LD_INT 5
70934: NEG
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 5
70942: NEG
70943: PUSH
70944: LD_INT 3
70946: NEG
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 0
70954: PUSH
70955: LD_INT 3
70957: NEG
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 0
70965: PUSH
70966: LD_INT 4
70968: NEG
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 1
70976: PUSH
70977: LD_INT 3
70979: NEG
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 1
70987: PUSH
70988: LD_INT 2
70990: NEG
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 0
70998: PUSH
70999: LD_INT 2
71001: NEG
71002: PUSH
71003: EMPTY
71004: LIST
71005: LIST
71006: PUSH
71007: LD_INT 1
71009: NEG
71010: PUSH
71011: LD_INT 3
71013: NEG
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: PUSH
71019: LD_INT 1
71021: NEG
71022: PUSH
71023: LD_INT 4
71025: NEG
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 2
71033: PUSH
71034: LD_INT 2
71036: NEG
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: PUSH
71042: LD_INT 2
71044: NEG
71045: PUSH
71046: LD_INT 4
71048: NEG
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 4
71056: PUSH
71057: LD_INT 0
71059: PUSH
71060: EMPTY
71061: LIST
71062: LIST
71063: PUSH
71064: LD_INT 4
71066: PUSH
71067: LD_INT 1
71069: NEG
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 5
71077: PUSH
71078: LD_INT 0
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 5
71087: PUSH
71088: LD_INT 1
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 4
71097: PUSH
71098: LD_INT 1
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 3
71107: PUSH
71108: LD_INT 0
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 3
71117: PUSH
71118: LD_INT 1
71120: NEG
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 3
71128: PUSH
71129: LD_INT 2
71131: NEG
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 5
71139: PUSH
71140: LD_INT 2
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: LIST
71151: LIST
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
71194: LD_ADDR_VAR 0 32
71198: PUSH
71199: LD_INT 4
71201: NEG
71202: PUSH
71203: LD_INT 0
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 4
71212: NEG
71213: PUSH
71214: LD_INT 1
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: LD_INT 3
71224: NEG
71225: PUSH
71226: LD_INT 0
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 3
71235: NEG
71236: PUSH
71237: LD_INT 1
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 4
71246: NEG
71247: PUSH
71248: LD_INT 1
71250: PUSH
71251: EMPTY
71252: LIST
71253: LIST
71254: PUSH
71255: LD_INT 5
71257: NEG
71258: PUSH
71259: LD_INT 0
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 5
71268: NEG
71269: PUSH
71270: LD_INT 1
71272: NEG
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 5
71280: NEG
71281: PUSH
71282: LD_INT 2
71284: NEG
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 3
71292: NEG
71293: PUSH
71294: LD_INT 2
71296: PUSH
71297: EMPTY
71298: LIST
71299: LIST
71300: PUSH
71301: LD_INT 3
71303: NEG
71304: PUSH
71305: LD_INT 3
71307: NEG
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 3
71315: NEG
71316: PUSH
71317: LD_INT 4
71319: NEG
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 2
71327: NEG
71328: PUSH
71329: LD_INT 3
71331: NEG
71332: PUSH
71333: EMPTY
71334: LIST
71335: LIST
71336: PUSH
71337: LD_INT 2
71339: NEG
71340: PUSH
71341: LD_INT 2
71343: NEG
71344: PUSH
71345: EMPTY
71346: LIST
71347: LIST
71348: PUSH
71349: LD_INT 3
71351: NEG
71352: PUSH
71353: LD_INT 2
71355: NEG
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: LD_INT 4
71363: NEG
71364: PUSH
71365: LD_INT 3
71367: NEG
71368: PUSH
71369: EMPTY
71370: LIST
71371: LIST
71372: PUSH
71373: LD_INT 4
71375: NEG
71376: PUSH
71377: LD_INT 4
71379: NEG
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 2
71387: NEG
71388: PUSH
71389: LD_INT 4
71391: NEG
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 4
71399: NEG
71400: PUSH
71401: LD_INT 2
71403: NEG
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: LD_INT 0
71411: PUSH
71412: LD_INT 4
71414: NEG
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 0
71422: PUSH
71423: LD_INT 5
71425: NEG
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: PUSH
71431: LD_INT 1
71433: PUSH
71434: LD_INT 4
71436: NEG
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 1
71444: PUSH
71445: LD_INT 3
71447: NEG
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 0
71455: PUSH
71456: LD_INT 3
71458: NEG
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 1
71466: NEG
71467: PUSH
71468: LD_INT 4
71470: NEG
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 1
71478: NEG
71479: PUSH
71480: LD_INT 5
71482: NEG
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 2
71490: PUSH
71491: LD_INT 3
71493: NEG
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 2
71501: NEG
71502: PUSH
71503: LD_INT 5
71505: NEG
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: PUSH
71511: LD_INT 3
71513: PUSH
71514: LD_INT 0
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 3
71523: PUSH
71524: LD_INT 1
71526: NEG
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 4
71534: PUSH
71535: LD_INT 0
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 4
71544: PUSH
71545: LD_INT 1
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 3
71554: PUSH
71555: LD_INT 1
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 2
71564: PUSH
71565: LD_INT 0
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 2
71574: PUSH
71575: LD_INT 1
71577: NEG
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 2
71585: PUSH
71586: LD_INT 2
71588: NEG
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 4
71596: PUSH
71597: LD_INT 2
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 4
71606: PUSH
71607: LD_INT 4
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: PUSH
71614: LD_INT 4
71616: PUSH
71617: LD_INT 3
71619: PUSH
71620: EMPTY
71621: LIST
71622: LIST
71623: PUSH
71624: LD_INT 5
71626: PUSH
71627: LD_INT 4
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 5
71636: PUSH
71637: LD_INT 5
71639: PUSH
71640: EMPTY
71641: LIST
71642: LIST
71643: PUSH
71644: LD_INT 4
71646: PUSH
71647: LD_INT 5
71649: PUSH
71650: EMPTY
71651: LIST
71652: LIST
71653: PUSH
71654: LD_INT 3
71656: PUSH
71657: LD_INT 4
71659: PUSH
71660: EMPTY
71661: LIST
71662: LIST
71663: PUSH
71664: LD_INT 3
71666: PUSH
71667: LD_INT 3
71669: PUSH
71670: EMPTY
71671: LIST
71672: LIST
71673: PUSH
71674: LD_INT 5
71676: PUSH
71677: LD_INT 3
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 3
71686: PUSH
71687: LD_INT 5
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: LIST
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: LIST
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
71741: LD_ADDR_VAR 0 33
71745: PUSH
71746: LD_INT 4
71748: NEG
71749: PUSH
71750: LD_INT 4
71752: NEG
71753: PUSH
71754: EMPTY
71755: LIST
71756: LIST
71757: PUSH
71758: LD_INT 4
71760: NEG
71761: PUSH
71762: LD_INT 5
71764: NEG
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 3
71772: NEG
71773: PUSH
71774: LD_INT 4
71776: NEG
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 3
71784: NEG
71785: PUSH
71786: LD_INT 3
71788: NEG
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: LD_INT 4
71796: NEG
71797: PUSH
71798: LD_INT 3
71800: NEG
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 5
71808: NEG
71809: PUSH
71810: LD_INT 4
71812: NEG
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 5
71820: NEG
71821: PUSH
71822: LD_INT 5
71824: NEG
71825: PUSH
71826: EMPTY
71827: LIST
71828: LIST
71829: PUSH
71830: LD_INT 3
71832: NEG
71833: PUSH
71834: LD_INT 5
71836: NEG
71837: PUSH
71838: EMPTY
71839: LIST
71840: LIST
71841: PUSH
71842: LD_INT 5
71844: NEG
71845: PUSH
71846: LD_INT 3
71848: NEG
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 0
71856: PUSH
71857: LD_INT 3
71859: NEG
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 0
71867: PUSH
71868: LD_INT 4
71870: NEG
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 1
71878: PUSH
71879: LD_INT 3
71881: NEG
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: LD_INT 1
71889: PUSH
71890: LD_INT 2
71892: NEG
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 0
71900: PUSH
71901: LD_INT 2
71903: NEG
71904: PUSH
71905: EMPTY
71906: LIST
71907: LIST
71908: PUSH
71909: LD_INT 1
71911: NEG
71912: PUSH
71913: LD_INT 3
71915: NEG
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 1
71923: NEG
71924: PUSH
71925: LD_INT 4
71927: NEG
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 2
71935: PUSH
71936: LD_INT 2
71938: NEG
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 2
71946: NEG
71947: PUSH
71948: LD_INT 4
71950: NEG
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: LD_INT 4
71958: PUSH
71959: LD_INT 0
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 4
71968: PUSH
71969: LD_INT 1
71971: NEG
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 5
71979: PUSH
71980: LD_INT 0
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 5
71989: PUSH
71990: LD_INT 1
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 4
71999: PUSH
72000: LD_INT 1
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 3
72009: PUSH
72010: LD_INT 0
72012: PUSH
72013: EMPTY
72014: LIST
72015: LIST
72016: PUSH
72017: LD_INT 3
72019: PUSH
72020: LD_INT 1
72022: NEG
72023: PUSH
72024: EMPTY
72025: LIST
72026: LIST
72027: PUSH
72028: LD_INT 3
72030: PUSH
72031: LD_INT 2
72033: NEG
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 5
72041: PUSH
72042: LD_INT 2
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: LD_INT 3
72051: PUSH
72052: LD_INT 3
72054: PUSH
72055: EMPTY
72056: LIST
72057: LIST
72058: PUSH
72059: LD_INT 3
72061: PUSH
72062: LD_INT 2
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 4
72071: PUSH
72072: LD_INT 3
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 4
72081: PUSH
72082: LD_INT 4
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 3
72091: PUSH
72092: LD_INT 4
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 2
72101: PUSH
72102: LD_INT 3
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 2
72111: PUSH
72112: LD_INT 2
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 4
72121: PUSH
72122: LD_INT 2
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: LD_INT 2
72131: PUSH
72132: LD_INT 4
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: PUSH
72139: LD_INT 0
72141: PUSH
72142: LD_INT 4
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: PUSH
72149: LD_INT 0
72151: PUSH
72152: LD_INT 3
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: PUSH
72159: LD_INT 1
72161: PUSH
72162: LD_INT 4
72164: PUSH
72165: EMPTY
72166: LIST
72167: LIST
72168: PUSH
72169: LD_INT 1
72171: PUSH
72172: LD_INT 5
72174: PUSH
72175: EMPTY
72176: LIST
72177: LIST
72178: PUSH
72179: LD_INT 0
72181: PUSH
72182: LD_INT 5
72184: PUSH
72185: EMPTY
72186: LIST
72187: LIST
72188: PUSH
72189: LD_INT 1
72191: NEG
72192: PUSH
72193: LD_INT 4
72195: PUSH
72196: EMPTY
72197: LIST
72198: LIST
72199: PUSH
72200: LD_INT 1
72202: NEG
72203: PUSH
72204: LD_INT 3
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 2
72213: PUSH
72214: LD_INT 5
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 2
72223: NEG
72224: PUSH
72225: LD_INT 3
72227: PUSH
72228: EMPTY
72229: LIST
72230: LIST
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
72279: LD_ADDR_VAR 0 34
72283: PUSH
72284: LD_INT 0
72286: PUSH
72287: LD_INT 4
72289: NEG
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 0
72297: PUSH
72298: LD_INT 5
72300: NEG
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: PUSH
72306: LD_INT 1
72308: PUSH
72309: LD_INT 4
72311: NEG
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 1
72319: PUSH
72320: LD_INT 3
72322: NEG
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 0
72330: PUSH
72331: LD_INT 3
72333: NEG
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 1
72341: NEG
72342: PUSH
72343: LD_INT 4
72345: NEG
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 1
72353: NEG
72354: PUSH
72355: LD_INT 5
72357: NEG
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 2
72365: PUSH
72366: LD_INT 3
72368: NEG
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: LD_INT 2
72376: NEG
72377: PUSH
72378: LD_INT 5
72380: NEG
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 3
72388: PUSH
72389: LD_INT 0
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 3
72398: PUSH
72399: LD_INT 1
72401: NEG
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 4
72409: PUSH
72410: LD_INT 0
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 4
72419: PUSH
72420: LD_INT 1
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 3
72429: PUSH
72430: LD_INT 1
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: LD_INT 2
72439: PUSH
72440: LD_INT 0
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 2
72449: PUSH
72450: LD_INT 1
72452: NEG
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: LD_INT 2
72460: PUSH
72461: LD_INT 2
72463: NEG
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: PUSH
72469: LD_INT 4
72471: PUSH
72472: LD_INT 2
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: PUSH
72479: LD_INT 4
72481: PUSH
72482: LD_INT 4
72484: PUSH
72485: EMPTY
72486: LIST
72487: LIST
72488: PUSH
72489: LD_INT 4
72491: PUSH
72492: LD_INT 3
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PUSH
72499: LD_INT 5
72501: PUSH
72502: LD_INT 4
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: PUSH
72509: LD_INT 5
72511: PUSH
72512: LD_INT 5
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: LD_INT 4
72521: PUSH
72522: LD_INT 5
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 3
72531: PUSH
72532: LD_INT 4
72534: PUSH
72535: EMPTY
72536: LIST
72537: LIST
72538: PUSH
72539: LD_INT 3
72541: PUSH
72542: LD_INT 3
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 5
72551: PUSH
72552: LD_INT 3
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 3
72561: PUSH
72562: LD_INT 5
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 0
72571: PUSH
72572: LD_INT 3
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 0
72581: PUSH
72582: LD_INT 2
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: LD_INT 1
72591: PUSH
72592: LD_INT 3
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: LD_INT 1
72601: PUSH
72602: LD_INT 4
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: PUSH
72609: LD_INT 0
72611: PUSH
72612: LD_INT 4
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PUSH
72619: LD_INT 1
72621: NEG
72622: PUSH
72623: LD_INT 3
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: PUSH
72630: LD_INT 1
72632: NEG
72633: PUSH
72634: LD_INT 2
72636: PUSH
72637: EMPTY
72638: LIST
72639: LIST
72640: PUSH
72641: LD_INT 2
72643: PUSH
72644: LD_INT 4
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: LD_INT 2
72653: NEG
72654: PUSH
72655: LD_INT 2
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PUSH
72662: LD_INT 4
72664: NEG
72665: PUSH
72666: LD_INT 0
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PUSH
72673: LD_INT 4
72675: NEG
72676: PUSH
72677: LD_INT 1
72679: NEG
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 3
72687: NEG
72688: PUSH
72689: LD_INT 0
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 3
72698: NEG
72699: PUSH
72700: LD_INT 1
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_INT 4
72709: NEG
72710: PUSH
72711: LD_INT 1
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 5
72720: NEG
72721: PUSH
72722: LD_INT 0
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 5
72731: NEG
72732: PUSH
72733: LD_INT 1
72735: NEG
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: LD_INT 5
72743: NEG
72744: PUSH
72745: LD_INT 2
72747: NEG
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: PUSH
72753: LD_INT 3
72755: NEG
72756: PUSH
72757: LD_INT 2
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: EMPTY
72765: LIST
72766: LIST
72767: LIST
72768: LIST
72769: LIST
72770: LIST
72771: LIST
72772: LIST
72773: LIST
72774: LIST
72775: LIST
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: LIST
72809: LIST
72810: ST_TO_ADDR
// end ; end ;
72811: GO 72814
72813: POP
// case btype of b_depot , b_warehouse :
72814: LD_VAR 0 1
72818: PUSH
72819: LD_INT 0
72821: DOUBLE
72822: EQUAL
72823: IFTRUE 72833
72825: LD_INT 1
72827: DOUBLE
72828: EQUAL
72829: IFTRUE 72833
72831: GO 73034
72833: POP
// case nation of nation_american :
72834: LD_VAR 0 5
72838: PUSH
72839: LD_INT 1
72841: DOUBLE
72842: EQUAL
72843: IFTRUE 72847
72845: GO 72903
72847: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
72848: LD_ADDR_VAR 0 9
72852: PUSH
72853: LD_VAR 0 11
72857: PUSH
72858: LD_VAR 0 12
72862: PUSH
72863: LD_VAR 0 13
72867: PUSH
72868: LD_VAR 0 14
72872: PUSH
72873: LD_VAR 0 15
72877: PUSH
72878: LD_VAR 0 16
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: PUSH
72891: LD_VAR 0 4
72895: PUSH
72896: LD_INT 1
72898: PLUS
72899: ARRAY
72900: ST_TO_ADDR
72901: GO 73032
72903: LD_INT 2
72905: DOUBLE
72906: EQUAL
72907: IFTRUE 72911
72909: GO 72967
72911: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
72912: LD_ADDR_VAR 0 9
72916: PUSH
72917: LD_VAR 0 17
72921: PUSH
72922: LD_VAR 0 18
72926: PUSH
72927: LD_VAR 0 19
72931: PUSH
72932: LD_VAR 0 20
72936: PUSH
72937: LD_VAR 0 21
72941: PUSH
72942: LD_VAR 0 22
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: PUSH
72955: LD_VAR 0 4
72959: PUSH
72960: LD_INT 1
72962: PLUS
72963: ARRAY
72964: ST_TO_ADDR
72965: GO 73032
72967: LD_INT 3
72969: DOUBLE
72970: EQUAL
72971: IFTRUE 72975
72973: GO 73031
72975: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
72976: LD_ADDR_VAR 0 9
72980: PUSH
72981: LD_VAR 0 23
72985: PUSH
72986: LD_VAR 0 24
72990: PUSH
72991: LD_VAR 0 25
72995: PUSH
72996: LD_VAR 0 26
73000: PUSH
73001: LD_VAR 0 27
73005: PUSH
73006: LD_VAR 0 28
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: PUSH
73019: LD_VAR 0 4
73023: PUSH
73024: LD_INT 1
73026: PLUS
73027: ARRAY
73028: ST_TO_ADDR
73029: GO 73032
73031: POP
73032: GO 73587
73034: LD_INT 2
73036: DOUBLE
73037: EQUAL
73038: IFTRUE 73048
73040: LD_INT 3
73042: DOUBLE
73043: EQUAL
73044: IFTRUE 73048
73046: GO 73104
73048: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
73049: LD_ADDR_VAR 0 9
73053: PUSH
73054: LD_VAR 0 29
73058: PUSH
73059: LD_VAR 0 30
73063: PUSH
73064: LD_VAR 0 31
73068: PUSH
73069: LD_VAR 0 32
73073: PUSH
73074: LD_VAR 0 33
73078: PUSH
73079: LD_VAR 0 34
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: LIST
73088: LIST
73089: LIST
73090: LIST
73091: PUSH
73092: LD_VAR 0 4
73096: PUSH
73097: LD_INT 1
73099: PLUS
73100: ARRAY
73101: ST_TO_ADDR
73102: GO 73587
73104: LD_INT 16
73106: DOUBLE
73107: EQUAL
73108: IFTRUE 73166
73110: LD_INT 17
73112: DOUBLE
73113: EQUAL
73114: IFTRUE 73166
73116: LD_INT 18
73118: DOUBLE
73119: EQUAL
73120: IFTRUE 73166
73122: LD_INT 19
73124: DOUBLE
73125: EQUAL
73126: IFTRUE 73166
73128: LD_INT 22
73130: DOUBLE
73131: EQUAL
73132: IFTRUE 73166
73134: LD_INT 20
73136: DOUBLE
73137: EQUAL
73138: IFTRUE 73166
73140: LD_INT 21
73142: DOUBLE
73143: EQUAL
73144: IFTRUE 73166
73146: LD_INT 23
73148: DOUBLE
73149: EQUAL
73150: IFTRUE 73166
73152: LD_INT 24
73154: DOUBLE
73155: EQUAL
73156: IFTRUE 73166
73158: LD_INT 25
73160: DOUBLE
73161: EQUAL
73162: IFTRUE 73166
73164: GO 73222
73166: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
73167: LD_ADDR_VAR 0 9
73171: PUSH
73172: LD_VAR 0 35
73176: PUSH
73177: LD_VAR 0 36
73181: PUSH
73182: LD_VAR 0 37
73186: PUSH
73187: LD_VAR 0 38
73191: PUSH
73192: LD_VAR 0 39
73196: PUSH
73197: LD_VAR 0 40
73201: PUSH
73202: EMPTY
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: PUSH
73210: LD_VAR 0 4
73214: PUSH
73215: LD_INT 1
73217: PLUS
73218: ARRAY
73219: ST_TO_ADDR
73220: GO 73587
73222: LD_INT 6
73224: DOUBLE
73225: EQUAL
73226: IFTRUE 73278
73228: LD_INT 7
73230: DOUBLE
73231: EQUAL
73232: IFTRUE 73278
73234: LD_INT 8
73236: DOUBLE
73237: EQUAL
73238: IFTRUE 73278
73240: LD_INT 13
73242: DOUBLE
73243: EQUAL
73244: IFTRUE 73278
73246: LD_INT 12
73248: DOUBLE
73249: EQUAL
73250: IFTRUE 73278
73252: LD_INT 15
73254: DOUBLE
73255: EQUAL
73256: IFTRUE 73278
73258: LD_INT 11
73260: DOUBLE
73261: EQUAL
73262: IFTRUE 73278
73264: LD_INT 14
73266: DOUBLE
73267: EQUAL
73268: IFTRUE 73278
73270: LD_INT 10
73272: DOUBLE
73273: EQUAL
73274: IFTRUE 73278
73276: GO 73334
73278: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
73279: LD_ADDR_VAR 0 9
73283: PUSH
73284: LD_VAR 0 41
73288: PUSH
73289: LD_VAR 0 42
73293: PUSH
73294: LD_VAR 0 43
73298: PUSH
73299: LD_VAR 0 44
73303: PUSH
73304: LD_VAR 0 45
73308: PUSH
73309: LD_VAR 0 46
73313: PUSH
73314: EMPTY
73315: LIST
73316: LIST
73317: LIST
73318: LIST
73319: LIST
73320: LIST
73321: PUSH
73322: LD_VAR 0 4
73326: PUSH
73327: LD_INT 1
73329: PLUS
73330: ARRAY
73331: ST_TO_ADDR
73332: GO 73587
73334: LD_INT 36
73336: DOUBLE
73337: EQUAL
73338: IFTRUE 73342
73340: GO 73398
73342: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
73343: LD_ADDR_VAR 0 9
73347: PUSH
73348: LD_VAR 0 47
73352: PUSH
73353: LD_VAR 0 48
73357: PUSH
73358: LD_VAR 0 49
73362: PUSH
73363: LD_VAR 0 50
73367: PUSH
73368: LD_VAR 0 51
73372: PUSH
73373: LD_VAR 0 52
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: LIST
73382: LIST
73383: LIST
73384: LIST
73385: PUSH
73386: LD_VAR 0 4
73390: PUSH
73391: LD_INT 1
73393: PLUS
73394: ARRAY
73395: ST_TO_ADDR
73396: GO 73587
73398: LD_INT 4
73400: DOUBLE
73401: EQUAL
73402: IFTRUE 73424
73404: LD_INT 5
73406: DOUBLE
73407: EQUAL
73408: IFTRUE 73424
73410: LD_INT 34
73412: DOUBLE
73413: EQUAL
73414: IFTRUE 73424
73416: LD_INT 37
73418: DOUBLE
73419: EQUAL
73420: IFTRUE 73424
73422: GO 73480
73424: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
73425: LD_ADDR_VAR 0 9
73429: PUSH
73430: LD_VAR 0 53
73434: PUSH
73435: LD_VAR 0 54
73439: PUSH
73440: LD_VAR 0 55
73444: PUSH
73445: LD_VAR 0 56
73449: PUSH
73450: LD_VAR 0 57
73454: PUSH
73455: LD_VAR 0 58
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: PUSH
73468: LD_VAR 0 4
73472: PUSH
73473: LD_INT 1
73475: PLUS
73476: ARRAY
73477: ST_TO_ADDR
73478: GO 73587
73480: LD_INT 31
73482: DOUBLE
73483: EQUAL
73484: IFTRUE 73530
73486: LD_INT 32
73488: DOUBLE
73489: EQUAL
73490: IFTRUE 73530
73492: LD_INT 33
73494: DOUBLE
73495: EQUAL
73496: IFTRUE 73530
73498: LD_INT 27
73500: DOUBLE
73501: EQUAL
73502: IFTRUE 73530
73504: LD_INT 26
73506: DOUBLE
73507: EQUAL
73508: IFTRUE 73530
73510: LD_INT 28
73512: DOUBLE
73513: EQUAL
73514: IFTRUE 73530
73516: LD_INT 29
73518: DOUBLE
73519: EQUAL
73520: IFTRUE 73530
73522: LD_INT 30
73524: DOUBLE
73525: EQUAL
73526: IFTRUE 73530
73528: GO 73586
73530: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
73531: LD_ADDR_VAR 0 9
73535: PUSH
73536: LD_VAR 0 59
73540: PUSH
73541: LD_VAR 0 60
73545: PUSH
73546: LD_VAR 0 61
73550: PUSH
73551: LD_VAR 0 62
73555: PUSH
73556: LD_VAR 0 63
73560: PUSH
73561: LD_VAR 0 64
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: PUSH
73574: LD_VAR 0 4
73578: PUSH
73579: LD_INT 1
73581: PLUS
73582: ARRAY
73583: ST_TO_ADDR
73584: GO 73587
73586: POP
// temp_list2 = [ ] ;
73587: LD_ADDR_VAR 0 10
73591: PUSH
73592: EMPTY
73593: ST_TO_ADDR
// for i in temp_list do
73594: LD_ADDR_VAR 0 8
73598: PUSH
73599: LD_VAR 0 9
73603: PUSH
73604: FOR_IN
73605: IFFALSE 73657
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
73607: LD_ADDR_VAR 0 10
73611: PUSH
73612: LD_VAR 0 10
73616: PUSH
73617: LD_VAR 0 8
73621: PUSH
73622: LD_INT 1
73624: ARRAY
73625: PUSH
73626: LD_VAR 0 2
73630: PLUS
73631: PUSH
73632: LD_VAR 0 8
73636: PUSH
73637: LD_INT 2
73639: ARRAY
73640: PUSH
73641: LD_VAR 0 3
73645: PLUS
73646: PUSH
73647: EMPTY
73648: LIST
73649: LIST
73650: PUSH
73651: EMPTY
73652: LIST
73653: ADD
73654: ST_TO_ADDR
73655: GO 73604
73657: POP
73658: POP
// result = temp_list2 ;
73659: LD_ADDR_VAR 0 7
73663: PUSH
73664: LD_VAR 0 10
73668: ST_TO_ADDR
// end ;
73669: LD_VAR 0 7
73673: RET
// export function EnemyInRange ( unit , dist ) ; begin
73674: LD_INT 0
73676: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
73677: LD_ADDR_VAR 0 3
73681: PUSH
73682: LD_VAR 0 1
73686: PPUSH
73687: CALL_OW 255
73691: PPUSH
73692: LD_VAR 0 1
73696: PPUSH
73697: CALL_OW 250
73701: PPUSH
73702: LD_VAR 0 1
73706: PPUSH
73707: CALL_OW 251
73711: PPUSH
73712: LD_VAR 0 2
73716: PPUSH
73717: CALL 47047 0 4
73721: PUSH
73722: LD_INT 4
73724: ARRAY
73725: ST_TO_ADDR
// end ;
73726: LD_VAR 0 3
73730: RET
// export function PlayerSeeMe ( unit ) ; begin
73731: LD_INT 0
73733: PPUSH
// result := See ( your_side , unit ) ;
73734: LD_ADDR_VAR 0 2
73738: PUSH
73739: LD_OWVAR 2
73743: PPUSH
73744: LD_VAR 0 1
73748: PPUSH
73749: CALL_OW 292
73753: ST_TO_ADDR
// end ;
73754: LD_VAR 0 2
73758: RET
// export function ReverseDir ( unit ) ; begin
73759: LD_INT 0
73761: PPUSH
// if not unit then
73762: LD_VAR 0 1
73766: NOT
73767: IFFALSE 73771
// exit ;
73769: GO 73794
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
73771: LD_ADDR_VAR 0 2
73775: PUSH
73776: LD_VAR 0 1
73780: PPUSH
73781: CALL_OW 254
73785: PUSH
73786: LD_INT 3
73788: PLUS
73789: PUSH
73790: LD_INT 6
73792: MOD
73793: ST_TO_ADDR
// end ;
73794: LD_VAR 0 2
73798: RET
// export function ReverseArray ( array ) ; var i ; begin
73799: LD_INT 0
73801: PPUSH
73802: PPUSH
// if not array then
73803: LD_VAR 0 1
73807: NOT
73808: IFFALSE 73812
// exit ;
73810: GO 73867
// result := [ ] ;
73812: LD_ADDR_VAR 0 2
73816: PUSH
73817: EMPTY
73818: ST_TO_ADDR
// for i := array downto 1 do
73819: LD_ADDR_VAR 0 3
73823: PUSH
73824: DOUBLE
73825: LD_VAR 0 1
73829: INC
73830: ST_TO_ADDR
73831: LD_INT 1
73833: PUSH
73834: FOR_DOWNTO
73835: IFFALSE 73865
// result := Join ( result , array [ i ] ) ;
73837: LD_ADDR_VAR 0 2
73841: PUSH
73842: LD_VAR 0 2
73846: PPUSH
73847: LD_VAR 0 1
73851: PUSH
73852: LD_VAR 0 3
73856: ARRAY
73857: PPUSH
73858: CALL 78532 0 2
73862: ST_TO_ADDR
73863: GO 73834
73865: POP
73866: POP
// end ;
73867: LD_VAR 0 2
73871: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
73872: LD_INT 0
73874: PPUSH
73875: PPUSH
73876: PPUSH
73877: PPUSH
73878: PPUSH
73879: PPUSH
// if not unit or not hexes then
73880: LD_VAR 0 1
73884: NOT
73885: PUSH
73886: LD_VAR 0 2
73890: NOT
73891: OR
73892: IFFALSE 73896
// exit ;
73894: GO 74019
// dist := 9999 ;
73896: LD_ADDR_VAR 0 5
73900: PUSH
73901: LD_INT 9999
73903: ST_TO_ADDR
// for i = 1 to hexes do
73904: LD_ADDR_VAR 0 4
73908: PUSH
73909: DOUBLE
73910: LD_INT 1
73912: DEC
73913: ST_TO_ADDR
73914: LD_VAR 0 2
73918: PUSH
73919: FOR_TO
73920: IFFALSE 74007
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
73922: LD_ADDR_VAR 0 6
73926: PUSH
73927: LD_VAR 0 1
73931: PPUSH
73932: LD_VAR 0 2
73936: PUSH
73937: LD_VAR 0 4
73941: ARRAY
73942: PUSH
73943: LD_INT 1
73945: ARRAY
73946: PPUSH
73947: LD_VAR 0 2
73951: PUSH
73952: LD_VAR 0 4
73956: ARRAY
73957: PUSH
73958: LD_INT 2
73960: ARRAY
73961: PPUSH
73962: CALL_OW 297
73966: ST_TO_ADDR
// if tdist < dist then
73967: LD_VAR 0 6
73971: PUSH
73972: LD_VAR 0 5
73976: LESS
73977: IFFALSE 74005
// begin hex := hexes [ i ] ;
73979: LD_ADDR_VAR 0 8
73983: PUSH
73984: LD_VAR 0 2
73988: PUSH
73989: LD_VAR 0 4
73993: ARRAY
73994: ST_TO_ADDR
// dist := tdist ;
73995: LD_ADDR_VAR 0 5
73999: PUSH
74000: LD_VAR 0 6
74004: ST_TO_ADDR
// end ; end ;
74005: GO 73919
74007: POP
74008: POP
// result := hex ;
74009: LD_ADDR_VAR 0 3
74013: PUSH
74014: LD_VAR 0 8
74018: ST_TO_ADDR
// end ;
74019: LD_VAR 0 3
74023: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
74024: LD_INT 0
74026: PPUSH
74027: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
74028: LD_VAR 0 1
74032: NOT
74033: PUSH
74034: LD_VAR 0 1
74038: PUSH
74039: LD_INT 21
74041: PUSH
74042: LD_INT 2
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: PUSH
74049: LD_INT 23
74051: PUSH
74052: LD_INT 2
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: EMPTY
74060: LIST
74061: LIST
74062: PPUSH
74063: CALL_OW 69
74067: IN
74068: NOT
74069: OR
74070: IFFALSE 74074
// exit ;
74072: GO 74121
// for i = 1 to 3 do
74074: LD_ADDR_VAR 0 3
74078: PUSH
74079: DOUBLE
74080: LD_INT 1
74082: DEC
74083: ST_TO_ADDR
74084: LD_INT 3
74086: PUSH
74087: FOR_TO
74088: IFFALSE 74119
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
74090: LD_VAR 0 1
74094: PPUSH
74095: CALL_OW 250
74099: PPUSH
74100: LD_VAR 0 1
74104: PPUSH
74105: CALL_OW 251
74109: PPUSH
74110: LD_INT 1
74112: PPUSH
74113: CALL_OW 453
74117: GO 74087
74119: POP
74120: POP
// end ;
74121: LD_VAR 0 2
74125: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
74126: LD_INT 0
74128: PPUSH
74129: PPUSH
74130: PPUSH
74131: PPUSH
74132: PPUSH
74133: PPUSH
// if not unit or not enemy_unit then
74134: LD_VAR 0 1
74138: NOT
74139: PUSH
74140: LD_VAR 0 2
74144: NOT
74145: OR
74146: IFFALSE 74150
// exit ;
74148: GO 74617
// if GetLives ( i ) < 250 then
74150: LD_VAR 0 4
74154: PPUSH
74155: CALL_OW 256
74159: PUSH
74160: LD_INT 250
74162: LESS
74163: IFFALSE 74176
// begin ComAutodestruct ( i ) ;
74165: LD_VAR 0 4
74169: PPUSH
74170: CALL 74024 0 1
// exit ;
74174: GO 74617
// end ; x := GetX ( enemy_unit ) ;
74176: LD_ADDR_VAR 0 7
74180: PUSH
74181: LD_VAR 0 2
74185: PPUSH
74186: CALL_OW 250
74190: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
74191: LD_ADDR_VAR 0 8
74195: PUSH
74196: LD_VAR 0 2
74200: PPUSH
74201: CALL_OW 251
74205: ST_TO_ADDR
// if not x or not y then
74206: LD_VAR 0 7
74210: NOT
74211: PUSH
74212: LD_VAR 0 8
74216: NOT
74217: OR
74218: IFFALSE 74222
// exit ;
74220: GO 74617
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
74222: LD_ADDR_VAR 0 6
74226: PUSH
74227: LD_VAR 0 7
74231: PPUSH
74232: LD_INT 0
74234: PPUSH
74235: LD_INT 4
74237: PPUSH
74238: CALL_OW 272
74242: PUSH
74243: LD_VAR 0 8
74247: PPUSH
74248: LD_INT 0
74250: PPUSH
74251: LD_INT 4
74253: PPUSH
74254: CALL_OW 273
74258: PUSH
74259: EMPTY
74260: LIST
74261: LIST
74262: PUSH
74263: LD_VAR 0 7
74267: PPUSH
74268: LD_INT 1
74270: PPUSH
74271: LD_INT 4
74273: PPUSH
74274: CALL_OW 272
74278: PUSH
74279: LD_VAR 0 8
74283: PPUSH
74284: LD_INT 1
74286: PPUSH
74287: LD_INT 4
74289: PPUSH
74290: CALL_OW 273
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: PUSH
74299: LD_VAR 0 7
74303: PPUSH
74304: LD_INT 2
74306: PPUSH
74307: LD_INT 4
74309: PPUSH
74310: CALL_OW 272
74314: PUSH
74315: LD_VAR 0 8
74319: PPUSH
74320: LD_INT 2
74322: PPUSH
74323: LD_INT 4
74325: PPUSH
74326: CALL_OW 273
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: PUSH
74335: LD_VAR 0 7
74339: PPUSH
74340: LD_INT 3
74342: PPUSH
74343: LD_INT 4
74345: PPUSH
74346: CALL_OW 272
74350: PUSH
74351: LD_VAR 0 8
74355: PPUSH
74356: LD_INT 3
74358: PPUSH
74359: LD_INT 4
74361: PPUSH
74362: CALL_OW 273
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: PUSH
74371: LD_VAR 0 7
74375: PPUSH
74376: LD_INT 4
74378: PPUSH
74379: LD_INT 4
74381: PPUSH
74382: CALL_OW 272
74386: PUSH
74387: LD_VAR 0 8
74391: PPUSH
74392: LD_INT 4
74394: PPUSH
74395: LD_INT 4
74397: PPUSH
74398: CALL_OW 273
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: PUSH
74407: LD_VAR 0 7
74411: PPUSH
74412: LD_INT 5
74414: PPUSH
74415: LD_INT 4
74417: PPUSH
74418: CALL_OW 272
74422: PUSH
74423: LD_VAR 0 8
74427: PPUSH
74428: LD_INT 5
74430: PPUSH
74431: LD_INT 4
74433: PPUSH
74434: CALL_OW 273
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: LIST
74447: LIST
74448: LIST
74449: LIST
74450: ST_TO_ADDR
// for i = tmp downto 1 do
74451: LD_ADDR_VAR 0 4
74455: PUSH
74456: DOUBLE
74457: LD_VAR 0 6
74461: INC
74462: ST_TO_ADDR
74463: LD_INT 1
74465: PUSH
74466: FOR_DOWNTO
74467: IFFALSE 74568
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
74469: LD_VAR 0 6
74473: PUSH
74474: LD_VAR 0 4
74478: ARRAY
74479: PUSH
74480: LD_INT 1
74482: ARRAY
74483: PPUSH
74484: LD_VAR 0 6
74488: PUSH
74489: LD_VAR 0 4
74493: ARRAY
74494: PUSH
74495: LD_INT 2
74497: ARRAY
74498: PPUSH
74499: CALL_OW 488
74503: NOT
74504: PUSH
74505: LD_VAR 0 6
74509: PUSH
74510: LD_VAR 0 4
74514: ARRAY
74515: PUSH
74516: LD_INT 1
74518: ARRAY
74519: PPUSH
74520: LD_VAR 0 6
74524: PUSH
74525: LD_VAR 0 4
74529: ARRAY
74530: PUSH
74531: LD_INT 2
74533: ARRAY
74534: PPUSH
74535: CALL_OW 428
74539: PUSH
74540: LD_INT 0
74542: NONEQUAL
74543: OR
74544: IFFALSE 74566
// tmp := Delete ( tmp , i ) ;
74546: LD_ADDR_VAR 0 6
74550: PUSH
74551: LD_VAR 0 6
74555: PPUSH
74556: LD_VAR 0 4
74560: PPUSH
74561: CALL_OW 3
74565: ST_TO_ADDR
74566: GO 74466
74568: POP
74569: POP
// j := GetClosestHex ( unit , tmp ) ;
74570: LD_ADDR_VAR 0 5
74574: PUSH
74575: LD_VAR 0 1
74579: PPUSH
74580: LD_VAR 0 6
74584: PPUSH
74585: CALL 73872 0 2
74589: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
74590: LD_VAR 0 1
74594: PPUSH
74595: LD_VAR 0 5
74599: PUSH
74600: LD_INT 1
74602: ARRAY
74603: PPUSH
74604: LD_VAR 0 5
74608: PUSH
74609: LD_INT 2
74611: ARRAY
74612: PPUSH
74613: CALL_OW 111
// end ;
74617: LD_VAR 0 3
74621: RET
// export function PrepareApemanSoldier ( ) ; begin
74622: LD_INT 0
74624: PPUSH
// uc_nation := 0 ;
74625: LD_ADDR_OWVAR 21
74629: PUSH
74630: LD_INT 0
74632: ST_TO_ADDR
// hc_sex := sex_male ;
74633: LD_ADDR_OWVAR 27
74637: PUSH
74638: LD_INT 1
74640: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
74641: LD_ADDR_OWVAR 28
74645: PUSH
74646: LD_INT 15
74648: ST_TO_ADDR
// hc_gallery :=  ;
74649: LD_ADDR_OWVAR 33
74653: PUSH
74654: LD_STRING 
74656: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74657: LD_ADDR_OWVAR 31
74661: PUSH
74662: LD_INT 0
74664: PPUSH
74665: LD_INT 3
74667: PPUSH
74668: CALL_OW 12
74672: PUSH
74673: LD_INT 0
74675: PPUSH
74676: LD_INT 3
74678: PPUSH
74679: CALL_OW 12
74683: PUSH
74684: LD_INT 0
74686: PUSH
74687: LD_INT 0
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: LIST
74694: LIST
74695: ST_TO_ADDR
// end ;
74696: LD_VAR 0 1
74700: RET
// export function PrepareApemanEngineer ( ) ; begin
74701: LD_INT 0
74703: PPUSH
// uc_nation := 0 ;
74704: LD_ADDR_OWVAR 21
74708: PUSH
74709: LD_INT 0
74711: ST_TO_ADDR
// hc_sex := sex_male ;
74712: LD_ADDR_OWVAR 27
74716: PUSH
74717: LD_INT 1
74719: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
74720: LD_ADDR_OWVAR 28
74724: PUSH
74725: LD_INT 16
74727: ST_TO_ADDR
// hc_gallery :=  ;
74728: LD_ADDR_OWVAR 33
74732: PUSH
74733: LD_STRING 
74735: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74736: LD_ADDR_OWVAR 31
74740: PUSH
74741: LD_INT 0
74743: PPUSH
74744: LD_INT 3
74746: PPUSH
74747: CALL_OW 12
74751: PUSH
74752: LD_INT 0
74754: PPUSH
74755: LD_INT 3
74757: PPUSH
74758: CALL_OW 12
74762: PUSH
74763: LD_INT 0
74765: PUSH
74766: LD_INT 0
74768: PUSH
74769: EMPTY
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: ST_TO_ADDR
// end ;
74775: LD_VAR 0 1
74779: RET
// export function PrepareApeman ( agressivity ) ; begin
74780: LD_INT 0
74782: PPUSH
// uc_side := 0 ;
74783: LD_ADDR_OWVAR 20
74787: PUSH
74788: LD_INT 0
74790: ST_TO_ADDR
// uc_nation := 0 ;
74791: LD_ADDR_OWVAR 21
74795: PUSH
74796: LD_INT 0
74798: ST_TO_ADDR
// hc_sex := sex_male ;
74799: LD_ADDR_OWVAR 27
74803: PUSH
74804: LD_INT 1
74806: ST_TO_ADDR
// hc_class := class_apeman ;
74807: LD_ADDR_OWVAR 28
74811: PUSH
74812: LD_INT 12
74814: ST_TO_ADDR
// hc_gallery :=  ;
74815: LD_ADDR_OWVAR 33
74819: PUSH
74820: LD_STRING 
74822: ST_TO_ADDR
// if agressivity = 0 then
74823: LD_VAR 0 1
74827: PUSH
74828: LD_INT 0
74830: EQUAL
74831: IFFALSE 74843
// hc_agressivity := 0 else
74833: LD_ADDR_OWVAR 35
74837: PUSH
74838: LD_INT 0
74840: ST_TO_ADDR
74841: GO 74864
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74843: LD_ADDR_OWVAR 35
74847: PUSH
74848: LD_VAR 0 1
74852: NEG
74853: PPUSH
74854: LD_VAR 0 1
74858: PPUSH
74859: CALL_OW 12
74863: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
74864: LD_ADDR_OWVAR 31
74868: PUSH
74869: LD_INT 0
74871: PPUSH
74872: LD_INT 3
74874: PPUSH
74875: CALL_OW 12
74879: PUSH
74880: LD_INT 0
74882: PPUSH
74883: LD_INT 3
74885: PPUSH
74886: CALL_OW 12
74890: PUSH
74891: LD_INT 0
74893: PUSH
74894: LD_INT 0
74896: PUSH
74897: EMPTY
74898: LIST
74899: LIST
74900: LIST
74901: LIST
74902: ST_TO_ADDR
// end ;
74903: LD_VAR 0 2
74907: RET
// export function PrepareTiger ( agressivity ) ; begin
74908: LD_INT 0
74910: PPUSH
// uc_side := 0 ;
74911: LD_ADDR_OWVAR 20
74915: PUSH
74916: LD_INT 0
74918: ST_TO_ADDR
// uc_nation := 0 ;
74919: LD_ADDR_OWVAR 21
74923: PUSH
74924: LD_INT 0
74926: ST_TO_ADDR
// hc_class := class_tiger ;
74927: LD_ADDR_OWVAR 28
74931: PUSH
74932: LD_INT 14
74934: ST_TO_ADDR
// hc_gallery :=  ;
74935: LD_ADDR_OWVAR 33
74939: PUSH
74940: LD_STRING 
74942: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
74943: LD_ADDR_OWVAR 35
74947: PUSH
74948: LD_VAR 0 1
74952: NEG
74953: PPUSH
74954: LD_VAR 0 1
74958: PPUSH
74959: CALL_OW 12
74963: ST_TO_ADDR
// end ;
74964: LD_VAR 0 2
74968: RET
// export function PrepareEnchidna ( ) ; begin
74969: LD_INT 0
74971: PPUSH
// uc_side := 0 ;
74972: LD_ADDR_OWVAR 20
74976: PUSH
74977: LD_INT 0
74979: ST_TO_ADDR
// uc_nation := 0 ;
74980: LD_ADDR_OWVAR 21
74984: PUSH
74985: LD_INT 0
74987: ST_TO_ADDR
// hc_class := class_baggie ;
74988: LD_ADDR_OWVAR 28
74992: PUSH
74993: LD_INT 13
74995: ST_TO_ADDR
// hc_gallery :=  ;
74996: LD_ADDR_OWVAR 33
75000: PUSH
75001: LD_STRING 
75003: ST_TO_ADDR
// end ;
75004: LD_VAR 0 1
75008: RET
// export function PrepareFrog ( ) ; begin
75009: LD_INT 0
75011: PPUSH
// uc_side := 0 ;
75012: LD_ADDR_OWVAR 20
75016: PUSH
75017: LD_INT 0
75019: ST_TO_ADDR
// uc_nation := 0 ;
75020: LD_ADDR_OWVAR 21
75024: PUSH
75025: LD_INT 0
75027: ST_TO_ADDR
// hc_class := class_frog ;
75028: LD_ADDR_OWVAR 28
75032: PUSH
75033: LD_INT 19
75035: ST_TO_ADDR
// hc_gallery :=  ;
75036: LD_ADDR_OWVAR 33
75040: PUSH
75041: LD_STRING 
75043: ST_TO_ADDR
// end ;
75044: LD_VAR 0 1
75048: RET
// export function PrepareFish ( ) ; begin
75049: LD_INT 0
75051: PPUSH
// uc_side := 0 ;
75052: LD_ADDR_OWVAR 20
75056: PUSH
75057: LD_INT 0
75059: ST_TO_ADDR
// uc_nation := 0 ;
75060: LD_ADDR_OWVAR 21
75064: PUSH
75065: LD_INT 0
75067: ST_TO_ADDR
// hc_class := class_fish ;
75068: LD_ADDR_OWVAR 28
75072: PUSH
75073: LD_INT 20
75075: ST_TO_ADDR
// hc_gallery :=  ;
75076: LD_ADDR_OWVAR 33
75080: PUSH
75081: LD_STRING 
75083: ST_TO_ADDR
// end ;
75084: LD_VAR 0 1
75088: RET
// export function PrepareBird ( ) ; begin
75089: LD_INT 0
75091: PPUSH
// uc_side := 0 ;
75092: LD_ADDR_OWVAR 20
75096: PUSH
75097: LD_INT 0
75099: ST_TO_ADDR
// uc_nation := 0 ;
75100: LD_ADDR_OWVAR 21
75104: PUSH
75105: LD_INT 0
75107: ST_TO_ADDR
// hc_class := class_phororhacos ;
75108: LD_ADDR_OWVAR 28
75112: PUSH
75113: LD_INT 18
75115: ST_TO_ADDR
// hc_gallery :=  ;
75116: LD_ADDR_OWVAR 33
75120: PUSH
75121: LD_STRING 
75123: ST_TO_ADDR
// end ;
75124: LD_VAR 0 1
75128: RET
// export function PrepareHorse ( ) ; begin
75129: LD_INT 0
75131: PPUSH
// uc_side := 0 ;
75132: LD_ADDR_OWVAR 20
75136: PUSH
75137: LD_INT 0
75139: ST_TO_ADDR
// uc_nation := 0 ;
75140: LD_ADDR_OWVAR 21
75144: PUSH
75145: LD_INT 0
75147: ST_TO_ADDR
// hc_class := class_horse ;
75148: LD_ADDR_OWVAR 28
75152: PUSH
75153: LD_INT 21
75155: ST_TO_ADDR
// hc_gallery :=  ;
75156: LD_ADDR_OWVAR 33
75160: PUSH
75161: LD_STRING 
75163: ST_TO_ADDR
// end ;
75164: LD_VAR 0 1
75168: RET
// export function PrepareMastodont ( ) ; begin
75169: LD_INT 0
75171: PPUSH
// uc_side := 0 ;
75172: LD_ADDR_OWVAR 20
75176: PUSH
75177: LD_INT 0
75179: ST_TO_ADDR
// uc_nation := 0 ;
75180: LD_ADDR_OWVAR 21
75184: PUSH
75185: LD_INT 0
75187: ST_TO_ADDR
// vc_chassis := class_mastodont ;
75188: LD_ADDR_OWVAR 37
75192: PUSH
75193: LD_INT 31
75195: ST_TO_ADDR
// vc_control := control_rider ;
75196: LD_ADDR_OWVAR 38
75200: PUSH
75201: LD_INT 4
75203: ST_TO_ADDR
// end ;
75204: LD_VAR 0 1
75208: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
75209: LD_INT 0
75211: PPUSH
75212: PPUSH
75213: PPUSH
// uc_side = 0 ;
75214: LD_ADDR_OWVAR 20
75218: PUSH
75219: LD_INT 0
75221: ST_TO_ADDR
// uc_nation = 0 ;
75222: LD_ADDR_OWVAR 21
75226: PUSH
75227: LD_INT 0
75229: ST_TO_ADDR
// InitHc_All ( ) ;
75230: CALL_OW 584
// InitVc ;
75234: CALL_OW 20
// if mastodonts then
75238: LD_VAR 0 6
75242: IFFALSE 75309
// for i = 1 to mastodonts do
75244: LD_ADDR_VAR 0 11
75248: PUSH
75249: DOUBLE
75250: LD_INT 1
75252: DEC
75253: ST_TO_ADDR
75254: LD_VAR 0 6
75258: PUSH
75259: FOR_TO
75260: IFFALSE 75307
// begin vc_chassis := 31 ;
75262: LD_ADDR_OWVAR 37
75266: PUSH
75267: LD_INT 31
75269: ST_TO_ADDR
// vc_control := control_rider ;
75270: LD_ADDR_OWVAR 38
75274: PUSH
75275: LD_INT 4
75277: ST_TO_ADDR
// animal := CreateVehicle ;
75278: LD_ADDR_VAR 0 12
75282: PUSH
75283: CALL_OW 45
75287: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75288: LD_VAR 0 12
75292: PPUSH
75293: LD_VAR 0 8
75297: PPUSH
75298: LD_INT 0
75300: PPUSH
75301: CALL 77437 0 3
// end ;
75305: GO 75259
75307: POP
75308: POP
// if horses then
75309: LD_VAR 0 5
75313: IFFALSE 75380
// for i = 1 to horses do
75315: LD_ADDR_VAR 0 11
75319: PUSH
75320: DOUBLE
75321: LD_INT 1
75323: DEC
75324: ST_TO_ADDR
75325: LD_VAR 0 5
75329: PUSH
75330: FOR_TO
75331: IFFALSE 75378
// begin hc_class := 21 ;
75333: LD_ADDR_OWVAR 28
75337: PUSH
75338: LD_INT 21
75340: ST_TO_ADDR
// hc_gallery :=  ;
75341: LD_ADDR_OWVAR 33
75345: PUSH
75346: LD_STRING 
75348: ST_TO_ADDR
// animal := CreateHuman ;
75349: LD_ADDR_VAR 0 12
75353: PUSH
75354: CALL_OW 44
75358: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75359: LD_VAR 0 12
75363: PPUSH
75364: LD_VAR 0 8
75368: PPUSH
75369: LD_INT 0
75371: PPUSH
75372: CALL 77437 0 3
// end ;
75376: GO 75330
75378: POP
75379: POP
// if birds then
75380: LD_VAR 0 1
75384: IFFALSE 75451
// for i = 1 to birds do
75386: LD_ADDR_VAR 0 11
75390: PUSH
75391: DOUBLE
75392: LD_INT 1
75394: DEC
75395: ST_TO_ADDR
75396: LD_VAR 0 1
75400: PUSH
75401: FOR_TO
75402: IFFALSE 75449
// begin hc_class := 18 ;
75404: LD_ADDR_OWVAR 28
75408: PUSH
75409: LD_INT 18
75411: ST_TO_ADDR
// hc_gallery =  ;
75412: LD_ADDR_OWVAR 33
75416: PUSH
75417: LD_STRING 
75419: ST_TO_ADDR
// animal := CreateHuman ;
75420: LD_ADDR_VAR 0 12
75424: PUSH
75425: CALL_OW 44
75429: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75430: LD_VAR 0 12
75434: PPUSH
75435: LD_VAR 0 8
75439: PPUSH
75440: LD_INT 0
75442: PPUSH
75443: CALL 77437 0 3
// end ;
75447: GO 75401
75449: POP
75450: POP
// if tigers then
75451: LD_VAR 0 2
75455: IFFALSE 75539
// for i = 1 to tigers do
75457: LD_ADDR_VAR 0 11
75461: PUSH
75462: DOUBLE
75463: LD_INT 1
75465: DEC
75466: ST_TO_ADDR
75467: LD_VAR 0 2
75471: PUSH
75472: FOR_TO
75473: IFFALSE 75537
// begin hc_class = class_tiger ;
75475: LD_ADDR_OWVAR 28
75479: PUSH
75480: LD_INT 14
75482: ST_TO_ADDR
// hc_gallery =  ;
75483: LD_ADDR_OWVAR 33
75487: PUSH
75488: LD_STRING 
75490: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
75491: LD_ADDR_OWVAR 35
75495: PUSH
75496: LD_INT 7
75498: NEG
75499: PPUSH
75500: LD_INT 7
75502: PPUSH
75503: CALL_OW 12
75507: ST_TO_ADDR
// animal := CreateHuman ;
75508: LD_ADDR_VAR 0 12
75512: PUSH
75513: CALL_OW 44
75517: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75518: LD_VAR 0 12
75522: PPUSH
75523: LD_VAR 0 8
75527: PPUSH
75528: LD_INT 0
75530: PPUSH
75531: CALL 77437 0 3
// end ;
75535: GO 75472
75537: POP
75538: POP
// if apemans then
75539: LD_VAR 0 3
75543: IFFALSE 75666
// for i = 1 to apemans do
75545: LD_ADDR_VAR 0 11
75549: PUSH
75550: DOUBLE
75551: LD_INT 1
75553: DEC
75554: ST_TO_ADDR
75555: LD_VAR 0 3
75559: PUSH
75560: FOR_TO
75561: IFFALSE 75664
// begin hc_class = class_apeman ;
75563: LD_ADDR_OWVAR 28
75567: PUSH
75568: LD_INT 12
75570: ST_TO_ADDR
// hc_gallery =  ;
75571: LD_ADDR_OWVAR 33
75575: PUSH
75576: LD_STRING 
75578: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
75579: LD_ADDR_OWVAR 35
75583: PUSH
75584: LD_INT 2
75586: NEG
75587: PPUSH
75588: LD_INT 2
75590: PPUSH
75591: CALL_OW 12
75595: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
75596: LD_ADDR_OWVAR 31
75600: PUSH
75601: LD_INT 1
75603: PPUSH
75604: LD_INT 3
75606: PPUSH
75607: CALL_OW 12
75611: PUSH
75612: LD_INT 1
75614: PPUSH
75615: LD_INT 3
75617: PPUSH
75618: CALL_OW 12
75622: PUSH
75623: LD_INT 0
75625: PUSH
75626: LD_INT 0
75628: PUSH
75629: EMPTY
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: ST_TO_ADDR
// animal := CreateHuman ;
75635: LD_ADDR_VAR 0 12
75639: PUSH
75640: CALL_OW 44
75644: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75645: LD_VAR 0 12
75649: PPUSH
75650: LD_VAR 0 8
75654: PPUSH
75655: LD_INT 0
75657: PPUSH
75658: CALL 77437 0 3
// end ;
75662: GO 75560
75664: POP
75665: POP
// if enchidnas then
75666: LD_VAR 0 4
75670: IFFALSE 75737
// for i = 1 to enchidnas do
75672: LD_ADDR_VAR 0 11
75676: PUSH
75677: DOUBLE
75678: LD_INT 1
75680: DEC
75681: ST_TO_ADDR
75682: LD_VAR 0 4
75686: PUSH
75687: FOR_TO
75688: IFFALSE 75735
// begin hc_class = 13 ;
75690: LD_ADDR_OWVAR 28
75694: PUSH
75695: LD_INT 13
75697: ST_TO_ADDR
// hc_gallery =  ;
75698: LD_ADDR_OWVAR 33
75702: PUSH
75703: LD_STRING 
75705: ST_TO_ADDR
// animal := CreateHuman ;
75706: LD_ADDR_VAR 0 12
75710: PUSH
75711: CALL_OW 44
75715: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
75716: LD_VAR 0 12
75720: PPUSH
75721: LD_VAR 0 8
75725: PPUSH
75726: LD_INT 0
75728: PPUSH
75729: CALL 77437 0 3
// end ;
75733: GO 75687
75735: POP
75736: POP
// if fishes then
75737: LD_VAR 0 7
75741: IFFALSE 75808
// for i = 1 to fishes do
75743: LD_ADDR_VAR 0 11
75747: PUSH
75748: DOUBLE
75749: LD_INT 1
75751: DEC
75752: ST_TO_ADDR
75753: LD_VAR 0 7
75757: PUSH
75758: FOR_TO
75759: IFFALSE 75806
// begin hc_class = 20 ;
75761: LD_ADDR_OWVAR 28
75765: PUSH
75766: LD_INT 20
75768: ST_TO_ADDR
// hc_gallery =  ;
75769: LD_ADDR_OWVAR 33
75773: PUSH
75774: LD_STRING 
75776: ST_TO_ADDR
// animal := CreateHuman ;
75777: LD_ADDR_VAR 0 12
75781: PUSH
75782: CALL_OW 44
75786: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
75787: LD_VAR 0 12
75791: PPUSH
75792: LD_VAR 0 9
75796: PPUSH
75797: LD_INT 0
75799: PPUSH
75800: CALL 77437 0 3
// end ;
75804: GO 75758
75806: POP
75807: POP
// end ;
75808: LD_VAR 0 10
75812: RET
// export function WantHeal ( sci , unit ) ; begin
75813: LD_INT 0
75815: PPUSH
// if GetTaskList ( sci ) > 0 then
75816: LD_VAR 0 1
75820: PPUSH
75821: CALL_OW 437
75825: PUSH
75826: LD_INT 0
75828: GREATER
75829: IFFALSE 75899
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
75831: LD_VAR 0 1
75835: PPUSH
75836: CALL_OW 437
75840: PUSH
75841: LD_INT 1
75843: ARRAY
75844: PUSH
75845: LD_INT 1
75847: ARRAY
75848: PUSH
75849: LD_STRING l
75851: EQUAL
75852: PUSH
75853: LD_VAR 0 1
75857: PPUSH
75858: CALL_OW 437
75862: PUSH
75863: LD_INT 1
75865: ARRAY
75866: PUSH
75867: LD_INT 4
75869: ARRAY
75870: PUSH
75871: LD_VAR 0 2
75875: EQUAL
75876: AND
75877: IFFALSE 75889
// result := true else
75879: LD_ADDR_VAR 0 3
75883: PUSH
75884: LD_INT 1
75886: ST_TO_ADDR
75887: GO 75897
// result := false ;
75889: LD_ADDR_VAR 0 3
75893: PUSH
75894: LD_INT 0
75896: ST_TO_ADDR
// end else
75897: GO 75907
// result := false ;
75899: LD_ADDR_VAR 0 3
75903: PUSH
75904: LD_INT 0
75906: ST_TO_ADDR
// end ;
75907: LD_VAR 0 3
75911: RET
// export function HealTarget ( sci ) ; begin
75912: LD_INT 0
75914: PPUSH
// if not sci then
75915: LD_VAR 0 1
75919: NOT
75920: IFFALSE 75924
// exit ;
75922: GO 75989
// result := 0 ;
75924: LD_ADDR_VAR 0 2
75928: PUSH
75929: LD_INT 0
75931: ST_TO_ADDR
// if GetTaskList ( sci ) then
75932: LD_VAR 0 1
75936: PPUSH
75937: CALL_OW 437
75941: IFFALSE 75989
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
75943: LD_VAR 0 1
75947: PPUSH
75948: CALL_OW 437
75952: PUSH
75953: LD_INT 1
75955: ARRAY
75956: PUSH
75957: LD_INT 1
75959: ARRAY
75960: PUSH
75961: LD_STRING l
75963: EQUAL
75964: IFFALSE 75989
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
75966: LD_ADDR_VAR 0 2
75970: PUSH
75971: LD_VAR 0 1
75975: PPUSH
75976: CALL_OW 437
75980: PUSH
75981: LD_INT 1
75983: ARRAY
75984: PUSH
75985: LD_INT 4
75987: ARRAY
75988: ST_TO_ADDR
// end ;
75989: LD_VAR 0 2
75993: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
75994: LD_INT 0
75996: PPUSH
75997: PPUSH
75998: PPUSH
75999: PPUSH
// if not base_units then
76000: LD_VAR 0 1
76004: NOT
76005: IFFALSE 76009
// exit ;
76007: GO 76096
// result := false ;
76009: LD_ADDR_VAR 0 2
76013: PUSH
76014: LD_INT 0
76016: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
76017: LD_ADDR_VAR 0 5
76021: PUSH
76022: LD_VAR 0 1
76026: PPUSH
76027: LD_INT 21
76029: PUSH
76030: LD_INT 3
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: PPUSH
76037: CALL_OW 72
76041: ST_TO_ADDR
// if not tmp then
76042: LD_VAR 0 5
76046: NOT
76047: IFFALSE 76051
// exit ;
76049: GO 76096
// for i in tmp do
76051: LD_ADDR_VAR 0 3
76055: PUSH
76056: LD_VAR 0 5
76060: PUSH
76061: FOR_IN
76062: IFFALSE 76094
// begin result := EnemyInRange ( i , 22 ) ;
76064: LD_ADDR_VAR 0 2
76068: PUSH
76069: LD_VAR 0 3
76073: PPUSH
76074: LD_INT 22
76076: PPUSH
76077: CALL 73674 0 2
76081: ST_TO_ADDR
// if result then
76082: LD_VAR 0 2
76086: IFFALSE 76092
// exit ;
76088: POP
76089: POP
76090: GO 76096
// end ;
76092: GO 76061
76094: POP
76095: POP
// end ;
76096: LD_VAR 0 2
76100: RET
// export function FilterByTag ( units , tag ) ; begin
76101: LD_INT 0
76103: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
76104: LD_ADDR_VAR 0 3
76108: PUSH
76109: LD_VAR 0 1
76113: PPUSH
76114: LD_INT 120
76116: PUSH
76117: LD_VAR 0 2
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: PPUSH
76126: CALL_OW 72
76130: ST_TO_ADDR
// end ;
76131: LD_VAR 0 3
76135: RET
// export function IsDriver ( un ) ; begin
76136: LD_INT 0
76138: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
76139: LD_ADDR_VAR 0 2
76143: PUSH
76144: LD_VAR 0 1
76148: PUSH
76149: LD_INT 55
76151: PUSH
76152: EMPTY
76153: LIST
76154: PPUSH
76155: CALL_OW 69
76159: IN
76160: ST_TO_ADDR
// end ;
76161: LD_VAR 0 2
76165: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
76166: LD_INT 0
76168: PPUSH
76169: PPUSH
// list := [ ] ;
76170: LD_ADDR_VAR 0 5
76174: PUSH
76175: EMPTY
76176: ST_TO_ADDR
// case d of 0 :
76177: LD_VAR 0 3
76181: PUSH
76182: LD_INT 0
76184: DOUBLE
76185: EQUAL
76186: IFTRUE 76190
76188: GO 76323
76190: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
76191: LD_ADDR_VAR 0 5
76195: PUSH
76196: LD_VAR 0 1
76200: PUSH
76201: LD_INT 4
76203: MINUS
76204: PUSH
76205: LD_VAR 0 2
76209: PUSH
76210: LD_INT 4
76212: MINUS
76213: PUSH
76214: LD_INT 2
76216: PUSH
76217: EMPTY
76218: LIST
76219: LIST
76220: LIST
76221: PUSH
76222: LD_VAR 0 1
76226: PUSH
76227: LD_INT 3
76229: MINUS
76230: PUSH
76231: LD_VAR 0 2
76235: PUSH
76236: LD_INT 1
76238: PUSH
76239: EMPTY
76240: LIST
76241: LIST
76242: LIST
76243: PUSH
76244: LD_VAR 0 1
76248: PUSH
76249: LD_INT 4
76251: PLUS
76252: PUSH
76253: LD_VAR 0 2
76257: PUSH
76258: LD_INT 4
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: LIST
76265: PUSH
76266: LD_VAR 0 1
76270: PUSH
76271: LD_INT 3
76273: PLUS
76274: PUSH
76275: LD_VAR 0 2
76279: PUSH
76280: LD_INT 3
76282: PLUS
76283: PUSH
76284: LD_INT 5
76286: PUSH
76287: EMPTY
76288: LIST
76289: LIST
76290: LIST
76291: PUSH
76292: LD_VAR 0 1
76296: PUSH
76297: LD_VAR 0 2
76301: PUSH
76302: LD_INT 4
76304: PLUS
76305: PUSH
76306: LD_INT 0
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: LIST
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: LIST
76318: LIST
76319: LIST
76320: ST_TO_ADDR
// end ; 1 :
76321: GO 77021
76323: LD_INT 1
76325: DOUBLE
76326: EQUAL
76327: IFTRUE 76331
76329: GO 76464
76331: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
76332: LD_ADDR_VAR 0 5
76336: PUSH
76337: LD_VAR 0 1
76341: PUSH
76342: LD_VAR 0 2
76346: PUSH
76347: LD_INT 4
76349: MINUS
76350: PUSH
76351: LD_INT 3
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: LIST
76358: PUSH
76359: LD_VAR 0 1
76363: PUSH
76364: LD_INT 3
76366: MINUS
76367: PUSH
76368: LD_VAR 0 2
76372: PUSH
76373: LD_INT 3
76375: MINUS
76376: PUSH
76377: LD_INT 2
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: LIST
76384: PUSH
76385: LD_VAR 0 1
76389: PUSH
76390: LD_INT 4
76392: MINUS
76393: PUSH
76394: LD_VAR 0 2
76398: PUSH
76399: LD_INT 1
76401: PUSH
76402: EMPTY
76403: LIST
76404: LIST
76405: LIST
76406: PUSH
76407: LD_VAR 0 1
76411: PUSH
76412: LD_VAR 0 2
76416: PUSH
76417: LD_INT 3
76419: PLUS
76420: PUSH
76421: LD_INT 0
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: LIST
76428: PUSH
76429: LD_VAR 0 1
76433: PUSH
76434: LD_INT 4
76436: PLUS
76437: PUSH
76438: LD_VAR 0 2
76442: PUSH
76443: LD_INT 4
76445: PLUS
76446: PUSH
76447: LD_INT 5
76449: PUSH
76450: EMPTY
76451: LIST
76452: LIST
76453: LIST
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: LIST
76459: LIST
76460: LIST
76461: ST_TO_ADDR
// end ; 2 :
76462: GO 77021
76464: LD_INT 2
76466: DOUBLE
76467: EQUAL
76468: IFTRUE 76472
76470: GO 76601
76472: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
76473: LD_ADDR_VAR 0 5
76477: PUSH
76478: LD_VAR 0 1
76482: PUSH
76483: LD_VAR 0 2
76487: PUSH
76488: LD_INT 3
76490: MINUS
76491: PUSH
76492: LD_INT 3
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: LIST
76499: PUSH
76500: LD_VAR 0 1
76504: PUSH
76505: LD_INT 4
76507: PLUS
76508: PUSH
76509: LD_VAR 0 2
76513: PUSH
76514: LD_INT 4
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: LIST
76521: PUSH
76522: LD_VAR 0 1
76526: PUSH
76527: LD_VAR 0 2
76531: PUSH
76532: LD_INT 4
76534: PLUS
76535: PUSH
76536: LD_INT 0
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: LIST
76543: PUSH
76544: LD_VAR 0 1
76548: PUSH
76549: LD_INT 3
76551: MINUS
76552: PUSH
76553: LD_VAR 0 2
76557: PUSH
76558: LD_INT 1
76560: PUSH
76561: EMPTY
76562: LIST
76563: LIST
76564: LIST
76565: PUSH
76566: LD_VAR 0 1
76570: PUSH
76571: LD_INT 4
76573: MINUS
76574: PUSH
76575: LD_VAR 0 2
76579: PUSH
76580: LD_INT 4
76582: MINUS
76583: PUSH
76584: LD_INT 2
76586: PUSH
76587: EMPTY
76588: LIST
76589: LIST
76590: LIST
76591: PUSH
76592: EMPTY
76593: LIST
76594: LIST
76595: LIST
76596: LIST
76597: LIST
76598: ST_TO_ADDR
// end ; 3 :
76599: GO 77021
76601: LD_INT 3
76603: DOUBLE
76604: EQUAL
76605: IFTRUE 76609
76607: GO 76742
76609: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
76610: LD_ADDR_VAR 0 5
76614: PUSH
76615: LD_VAR 0 1
76619: PUSH
76620: LD_INT 3
76622: PLUS
76623: PUSH
76624: LD_VAR 0 2
76628: PUSH
76629: LD_INT 4
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: LIST
76636: PUSH
76637: LD_VAR 0 1
76641: PUSH
76642: LD_INT 4
76644: PLUS
76645: PUSH
76646: LD_VAR 0 2
76650: PUSH
76651: LD_INT 4
76653: PLUS
76654: PUSH
76655: LD_INT 5
76657: PUSH
76658: EMPTY
76659: LIST
76660: LIST
76661: LIST
76662: PUSH
76663: LD_VAR 0 1
76667: PUSH
76668: LD_INT 4
76670: MINUS
76671: PUSH
76672: LD_VAR 0 2
76676: PUSH
76677: LD_INT 1
76679: PUSH
76680: EMPTY
76681: LIST
76682: LIST
76683: LIST
76684: PUSH
76685: LD_VAR 0 1
76689: PUSH
76690: LD_VAR 0 2
76694: PUSH
76695: LD_INT 4
76697: MINUS
76698: PUSH
76699: LD_INT 3
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: LIST
76706: PUSH
76707: LD_VAR 0 1
76711: PUSH
76712: LD_INT 3
76714: MINUS
76715: PUSH
76716: LD_VAR 0 2
76720: PUSH
76721: LD_INT 3
76723: MINUS
76724: PUSH
76725: LD_INT 2
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: LIST
76732: PUSH
76733: EMPTY
76734: LIST
76735: LIST
76736: LIST
76737: LIST
76738: LIST
76739: ST_TO_ADDR
// end ; 4 :
76740: GO 77021
76742: LD_INT 4
76744: DOUBLE
76745: EQUAL
76746: IFTRUE 76750
76748: GO 76883
76750: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
76751: LD_ADDR_VAR 0 5
76755: PUSH
76756: LD_VAR 0 1
76760: PUSH
76761: LD_VAR 0 2
76765: PUSH
76766: LD_INT 4
76768: PLUS
76769: PUSH
76770: LD_INT 0
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: LIST
76777: PUSH
76778: LD_VAR 0 1
76782: PUSH
76783: LD_INT 3
76785: PLUS
76786: PUSH
76787: LD_VAR 0 2
76791: PUSH
76792: LD_INT 3
76794: PLUS
76795: PUSH
76796: LD_INT 5
76798: PUSH
76799: EMPTY
76800: LIST
76801: LIST
76802: LIST
76803: PUSH
76804: LD_VAR 0 1
76808: PUSH
76809: LD_INT 4
76811: PLUS
76812: PUSH
76813: LD_VAR 0 2
76817: PUSH
76818: LD_INT 4
76820: PUSH
76821: EMPTY
76822: LIST
76823: LIST
76824: LIST
76825: PUSH
76826: LD_VAR 0 1
76830: PUSH
76831: LD_VAR 0 2
76835: PUSH
76836: LD_INT 3
76838: MINUS
76839: PUSH
76840: LD_INT 3
76842: PUSH
76843: EMPTY
76844: LIST
76845: LIST
76846: LIST
76847: PUSH
76848: LD_VAR 0 1
76852: PUSH
76853: LD_INT 4
76855: MINUS
76856: PUSH
76857: LD_VAR 0 2
76861: PUSH
76862: LD_INT 4
76864: MINUS
76865: PUSH
76866: LD_INT 2
76868: PUSH
76869: EMPTY
76870: LIST
76871: LIST
76872: LIST
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: LIST
76878: LIST
76879: LIST
76880: ST_TO_ADDR
// end ; 5 :
76881: GO 77021
76883: LD_INT 5
76885: DOUBLE
76886: EQUAL
76887: IFTRUE 76891
76889: GO 77020
76891: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
76892: LD_ADDR_VAR 0 5
76896: PUSH
76897: LD_VAR 0 1
76901: PUSH
76902: LD_INT 4
76904: MINUS
76905: PUSH
76906: LD_VAR 0 2
76910: PUSH
76911: LD_INT 1
76913: PUSH
76914: EMPTY
76915: LIST
76916: LIST
76917: LIST
76918: PUSH
76919: LD_VAR 0 1
76923: PUSH
76924: LD_VAR 0 2
76928: PUSH
76929: LD_INT 4
76931: MINUS
76932: PUSH
76933: LD_INT 3
76935: PUSH
76936: EMPTY
76937: LIST
76938: LIST
76939: LIST
76940: PUSH
76941: LD_VAR 0 1
76945: PUSH
76946: LD_INT 4
76948: PLUS
76949: PUSH
76950: LD_VAR 0 2
76954: PUSH
76955: LD_INT 4
76957: PLUS
76958: PUSH
76959: LD_INT 5
76961: PUSH
76962: EMPTY
76963: LIST
76964: LIST
76965: LIST
76966: PUSH
76967: LD_VAR 0 1
76971: PUSH
76972: LD_INT 3
76974: PLUS
76975: PUSH
76976: LD_VAR 0 2
76980: PUSH
76981: LD_INT 4
76983: PUSH
76984: EMPTY
76985: LIST
76986: LIST
76987: LIST
76988: PUSH
76989: LD_VAR 0 1
76993: PUSH
76994: LD_VAR 0 2
76998: PUSH
76999: LD_INT 3
77001: PLUS
77002: PUSH
77003: LD_INT 0
77005: PUSH
77006: EMPTY
77007: LIST
77008: LIST
77009: LIST
77010: PUSH
77011: EMPTY
77012: LIST
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: ST_TO_ADDR
// end ; end ;
77018: GO 77021
77020: POP
// result := list ;
77021: LD_ADDR_VAR 0 4
77025: PUSH
77026: LD_VAR 0 5
77030: ST_TO_ADDR
// end ;
77031: LD_VAR 0 4
77035: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
77036: LD_INT 0
77038: PPUSH
77039: PPUSH
77040: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
77041: LD_VAR 0 1
77045: NOT
77046: PUSH
77047: LD_VAR 0 2
77051: PUSH
77052: LD_INT 1
77054: PUSH
77055: LD_INT 2
77057: PUSH
77058: LD_INT 3
77060: PUSH
77061: LD_INT 4
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: LIST
77068: LIST
77069: IN
77070: NOT
77071: OR
77072: IFFALSE 77076
// exit ;
77074: GO 77159
// tmp := [ ] ;
77076: LD_ADDR_VAR 0 5
77080: PUSH
77081: EMPTY
77082: ST_TO_ADDR
// for i in units do
77083: LD_ADDR_VAR 0 4
77087: PUSH
77088: LD_VAR 0 1
77092: PUSH
77093: FOR_IN
77094: IFFALSE 77128
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
77096: LD_ADDR_VAR 0 5
77100: PUSH
77101: LD_VAR 0 5
77105: PPUSH
77106: LD_VAR 0 4
77110: PPUSH
77111: LD_VAR 0 2
77115: PPUSH
77116: CALL_OW 259
77120: PPUSH
77121: CALL 78532 0 2
77125: ST_TO_ADDR
77126: GO 77093
77128: POP
77129: POP
// if not tmp then
77130: LD_VAR 0 5
77134: NOT
77135: IFFALSE 77139
// exit ;
77137: GO 77159
// result := SortListByListDesc ( units , tmp ) ;
77139: LD_ADDR_VAR 0 3
77143: PUSH
77144: LD_VAR 0 1
77148: PPUSH
77149: LD_VAR 0 5
77153: PPUSH
77154: CALL_OW 77
77158: ST_TO_ADDR
// end ;
77159: LD_VAR 0 3
77163: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
77164: LD_INT 0
77166: PPUSH
77167: PPUSH
77168: PPUSH
// result := false ;
77169: LD_ADDR_VAR 0 3
77173: PUSH
77174: LD_INT 0
77176: ST_TO_ADDR
// if not building then
77177: LD_VAR 0 2
77181: NOT
77182: IFFALSE 77186
// exit ;
77184: GO 77324
// x := GetX ( building ) ;
77186: LD_ADDR_VAR 0 4
77190: PUSH
77191: LD_VAR 0 2
77195: PPUSH
77196: CALL_OW 250
77200: ST_TO_ADDR
// y := GetY ( building ) ;
77201: LD_ADDR_VAR 0 5
77205: PUSH
77206: LD_VAR 0 2
77210: PPUSH
77211: CALL_OW 251
77215: ST_TO_ADDR
// if not x or not y then
77216: LD_VAR 0 4
77220: NOT
77221: PUSH
77222: LD_VAR 0 5
77226: NOT
77227: OR
77228: IFFALSE 77232
// exit ;
77230: GO 77324
// if GetTaskList ( unit ) then
77232: LD_VAR 0 1
77236: PPUSH
77237: CALL_OW 437
77241: IFFALSE 77324
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77243: LD_STRING e
77245: PUSH
77246: LD_VAR 0 1
77250: PPUSH
77251: CALL_OW 437
77255: PUSH
77256: LD_INT 1
77258: ARRAY
77259: PUSH
77260: LD_INT 1
77262: ARRAY
77263: EQUAL
77264: PUSH
77265: LD_VAR 0 4
77269: PUSH
77270: LD_VAR 0 1
77274: PPUSH
77275: CALL_OW 437
77279: PUSH
77280: LD_INT 1
77282: ARRAY
77283: PUSH
77284: LD_INT 2
77286: ARRAY
77287: EQUAL
77288: AND
77289: PUSH
77290: LD_VAR 0 5
77294: PUSH
77295: LD_VAR 0 1
77299: PPUSH
77300: CALL_OW 437
77304: PUSH
77305: LD_INT 1
77307: ARRAY
77308: PUSH
77309: LD_INT 3
77311: ARRAY
77312: EQUAL
77313: AND
77314: IFFALSE 77324
// result := true end ;
77316: LD_ADDR_VAR 0 3
77320: PUSH
77321: LD_INT 1
77323: ST_TO_ADDR
// end ;
77324: LD_VAR 0 3
77328: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
77329: LD_INT 0
77331: PPUSH
// result := false ;
77332: LD_ADDR_VAR 0 4
77336: PUSH
77337: LD_INT 0
77339: ST_TO_ADDR
// if GetTaskList ( unit ) then
77340: LD_VAR 0 1
77344: PPUSH
77345: CALL_OW 437
77349: IFFALSE 77432
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
77351: LD_STRING M
77353: PUSH
77354: LD_VAR 0 1
77358: PPUSH
77359: CALL_OW 437
77363: PUSH
77364: LD_INT 1
77366: ARRAY
77367: PUSH
77368: LD_INT 1
77370: ARRAY
77371: EQUAL
77372: PUSH
77373: LD_VAR 0 2
77377: PUSH
77378: LD_VAR 0 1
77382: PPUSH
77383: CALL_OW 437
77387: PUSH
77388: LD_INT 1
77390: ARRAY
77391: PUSH
77392: LD_INT 2
77394: ARRAY
77395: EQUAL
77396: AND
77397: PUSH
77398: LD_VAR 0 3
77402: PUSH
77403: LD_VAR 0 1
77407: PPUSH
77408: CALL_OW 437
77412: PUSH
77413: LD_INT 1
77415: ARRAY
77416: PUSH
77417: LD_INT 3
77419: ARRAY
77420: EQUAL
77421: AND
77422: IFFALSE 77432
// result := true ;
77424: LD_ADDR_VAR 0 4
77428: PUSH
77429: LD_INT 1
77431: ST_TO_ADDR
// end ; end ;
77432: LD_VAR 0 4
77436: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
77437: LD_INT 0
77439: PPUSH
77440: PPUSH
77441: PPUSH
77442: PPUSH
// if not unit or not area then
77443: LD_VAR 0 1
77447: NOT
77448: PUSH
77449: LD_VAR 0 2
77453: NOT
77454: OR
77455: IFFALSE 77459
// exit ;
77457: GO 77635
// tmp := AreaToList ( area , i ) ;
77459: LD_ADDR_VAR 0 6
77463: PUSH
77464: LD_VAR 0 2
77468: PPUSH
77469: LD_VAR 0 5
77473: PPUSH
77474: CALL_OW 517
77478: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
77479: LD_ADDR_VAR 0 5
77483: PUSH
77484: DOUBLE
77485: LD_INT 1
77487: DEC
77488: ST_TO_ADDR
77489: LD_VAR 0 6
77493: PUSH
77494: LD_INT 1
77496: ARRAY
77497: PUSH
77498: FOR_TO
77499: IFFALSE 77633
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
77501: LD_ADDR_VAR 0 7
77505: PUSH
77506: LD_VAR 0 6
77510: PUSH
77511: LD_INT 1
77513: ARRAY
77514: PUSH
77515: LD_VAR 0 5
77519: ARRAY
77520: PUSH
77521: LD_VAR 0 6
77525: PUSH
77526: LD_INT 2
77528: ARRAY
77529: PUSH
77530: LD_VAR 0 5
77534: ARRAY
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
77540: LD_INT 92
77542: PUSH
77543: LD_VAR 0 7
77547: PUSH
77548: LD_INT 1
77550: ARRAY
77551: PUSH
77552: LD_VAR 0 7
77556: PUSH
77557: LD_INT 2
77559: ARRAY
77560: PUSH
77561: LD_INT 2
77563: PUSH
77564: EMPTY
77565: LIST
77566: LIST
77567: LIST
77568: LIST
77569: PPUSH
77570: CALL_OW 69
77574: PUSH
77575: LD_INT 0
77577: EQUAL
77578: IFFALSE 77631
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
77580: LD_VAR 0 1
77584: PPUSH
77585: LD_VAR 0 7
77589: PUSH
77590: LD_INT 1
77592: ARRAY
77593: PPUSH
77594: LD_VAR 0 7
77598: PUSH
77599: LD_INT 2
77601: ARRAY
77602: PPUSH
77603: LD_VAR 0 3
77607: PPUSH
77608: CALL_OW 48
// result := IsPlaced ( unit ) ;
77612: LD_ADDR_VAR 0 4
77616: PUSH
77617: LD_VAR 0 1
77621: PPUSH
77622: CALL_OW 305
77626: ST_TO_ADDR
// exit ;
77627: POP
77628: POP
77629: GO 77635
// end ; end ;
77631: GO 77498
77633: POP
77634: POP
// end ;
77635: LD_VAR 0 4
77639: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
77640: LD_INT 0
77642: PPUSH
77643: PPUSH
77644: PPUSH
// if not side or side > 8 then
77645: LD_VAR 0 1
77649: NOT
77650: PUSH
77651: LD_VAR 0 1
77655: PUSH
77656: LD_INT 8
77658: GREATER
77659: OR
77660: IFFALSE 77664
// exit ;
77662: GO 77851
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
77664: LD_ADDR_VAR 0 4
77668: PUSH
77669: LD_INT 22
77671: PUSH
77672: LD_VAR 0 1
77676: PUSH
77677: EMPTY
77678: LIST
77679: LIST
77680: PUSH
77681: LD_INT 21
77683: PUSH
77684: LD_INT 3
77686: PUSH
77687: EMPTY
77688: LIST
77689: LIST
77690: PUSH
77691: EMPTY
77692: LIST
77693: LIST
77694: PPUSH
77695: CALL_OW 69
77699: ST_TO_ADDR
// if not tmp then
77700: LD_VAR 0 4
77704: NOT
77705: IFFALSE 77709
// exit ;
77707: GO 77851
// enable_addtolog := true ;
77709: LD_ADDR_OWVAR 81
77713: PUSH
77714: LD_INT 1
77716: ST_TO_ADDR
// AddToLog ( [ ) ;
77717: LD_STRING [
77719: PPUSH
77720: CALL_OW 561
// for i in tmp do
77724: LD_ADDR_VAR 0 3
77728: PUSH
77729: LD_VAR 0 4
77733: PUSH
77734: FOR_IN
77735: IFFALSE 77842
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
77737: LD_STRING [
77739: PUSH
77740: LD_VAR 0 3
77744: PPUSH
77745: CALL_OW 266
77749: STR
77750: PUSH
77751: LD_STRING , 
77753: STR
77754: PUSH
77755: LD_VAR 0 3
77759: PPUSH
77760: CALL_OW 250
77764: STR
77765: PUSH
77766: LD_STRING , 
77768: STR
77769: PUSH
77770: LD_VAR 0 3
77774: PPUSH
77775: CALL_OW 251
77779: STR
77780: PUSH
77781: LD_STRING , 
77783: STR
77784: PUSH
77785: LD_VAR 0 3
77789: PPUSH
77790: CALL_OW 254
77794: STR
77795: PUSH
77796: LD_STRING , 
77798: STR
77799: PUSH
77800: LD_VAR 0 3
77804: PPUSH
77805: LD_INT 1
77807: PPUSH
77808: CALL_OW 268
77812: STR
77813: PUSH
77814: LD_STRING , 
77816: STR
77817: PUSH
77818: LD_VAR 0 3
77822: PPUSH
77823: LD_INT 2
77825: PPUSH
77826: CALL_OW 268
77830: STR
77831: PUSH
77832: LD_STRING ],
77834: STR
77835: PPUSH
77836: CALL_OW 561
// end ;
77840: GO 77734
77842: POP
77843: POP
// AddToLog ( ]; ) ;
77844: LD_STRING ];
77846: PPUSH
77847: CALL_OW 561
// end ;
77851: LD_VAR 0 2
77855: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
77856: LD_INT 0
77858: PPUSH
77859: PPUSH
77860: PPUSH
77861: PPUSH
77862: PPUSH
// if not area or not rate or not max then
77863: LD_VAR 0 1
77867: NOT
77868: PUSH
77869: LD_VAR 0 2
77873: NOT
77874: OR
77875: PUSH
77876: LD_VAR 0 4
77880: NOT
77881: OR
77882: IFFALSE 77886
// exit ;
77884: GO 78075
// while 1 do
77886: LD_INT 1
77888: IFFALSE 78075
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
77890: LD_ADDR_VAR 0 9
77894: PUSH
77895: LD_VAR 0 1
77899: PPUSH
77900: LD_INT 1
77902: PPUSH
77903: CALL_OW 287
77907: PUSH
77908: LD_INT 10
77910: MUL
77911: ST_TO_ADDR
// r := rate / 10 ;
77912: LD_ADDR_VAR 0 7
77916: PUSH
77917: LD_VAR 0 2
77921: PUSH
77922: LD_INT 10
77924: DIVREAL
77925: ST_TO_ADDR
// time := 1 1$00 ;
77926: LD_ADDR_VAR 0 8
77930: PUSH
77931: LD_INT 2100
77933: ST_TO_ADDR
// if amount < min then
77934: LD_VAR 0 9
77938: PUSH
77939: LD_VAR 0 3
77943: LESS
77944: IFFALSE 77962
// r := r * 2 else
77946: LD_ADDR_VAR 0 7
77950: PUSH
77951: LD_VAR 0 7
77955: PUSH
77956: LD_INT 2
77958: MUL
77959: ST_TO_ADDR
77960: GO 77988
// if amount > max then
77962: LD_VAR 0 9
77966: PUSH
77967: LD_VAR 0 4
77971: GREATER
77972: IFFALSE 77988
// r := r / 2 ;
77974: LD_ADDR_VAR 0 7
77978: PUSH
77979: LD_VAR 0 7
77983: PUSH
77984: LD_INT 2
77986: DIVREAL
77987: ST_TO_ADDR
// time := time / r ;
77988: LD_ADDR_VAR 0 8
77992: PUSH
77993: LD_VAR 0 8
77997: PUSH
77998: LD_VAR 0 7
78002: DIVREAL
78003: ST_TO_ADDR
// if time < 0 then
78004: LD_VAR 0 8
78008: PUSH
78009: LD_INT 0
78011: LESS
78012: IFFALSE 78029
// time := time * - 1 ;
78014: LD_ADDR_VAR 0 8
78018: PUSH
78019: LD_VAR 0 8
78023: PUSH
78024: LD_INT 1
78026: NEG
78027: MUL
78028: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
78029: LD_VAR 0 8
78033: PUSH
78034: LD_INT 35
78036: PPUSH
78037: LD_INT 875
78039: PPUSH
78040: CALL_OW 12
78044: PLUS
78045: PPUSH
78046: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
78050: LD_INT 1
78052: PPUSH
78053: LD_INT 5
78055: PPUSH
78056: CALL_OW 12
78060: PPUSH
78061: LD_VAR 0 1
78065: PPUSH
78066: LD_INT 1
78068: PPUSH
78069: CALL_OW 55
// end ;
78073: GO 77886
// end ;
78075: LD_VAR 0 5
78079: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
78080: LD_INT 0
78082: PPUSH
78083: PPUSH
78084: PPUSH
78085: PPUSH
78086: PPUSH
78087: PPUSH
78088: PPUSH
78089: PPUSH
// if not turrets or not factories then
78090: LD_VAR 0 1
78094: NOT
78095: PUSH
78096: LD_VAR 0 2
78100: NOT
78101: OR
78102: IFFALSE 78106
// exit ;
78104: GO 78413
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
78106: LD_ADDR_VAR 0 10
78110: PUSH
78111: LD_INT 5
78113: PUSH
78114: LD_INT 6
78116: PUSH
78117: EMPTY
78118: LIST
78119: LIST
78120: PUSH
78121: LD_INT 2
78123: PUSH
78124: LD_INT 4
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: PUSH
78131: LD_INT 3
78133: PUSH
78134: LD_INT 5
78136: PUSH
78137: EMPTY
78138: LIST
78139: LIST
78140: PUSH
78141: EMPTY
78142: LIST
78143: LIST
78144: LIST
78145: PUSH
78146: LD_INT 24
78148: PUSH
78149: LD_INT 25
78151: PUSH
78152: EMPTY
78153: LIST
78154: LIST
78155: PUSH
78156: LD_INT 23
78158: PUSH
78159: LD_INT 27
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: PUSH
78166: EMPTY
78167: LIST
78168: LIST
78169: PUSH
78170: LD_INT 42
78172: PUSH
78173: LD_INT 43
78175: PUSH
78176: EMPTY
78177: LIST
78178: LIST
78179: PUSH
78180: LD_INT 44
78182: PUSH
78183: LD_INT 46
78185: PUSH
78186: EMPTY
78187: LIST
78188: LIST
78189: PUSH
78190: LD_INT 45
78192: PUSH
78193: LD_INT 47
78195: PUSH
78196: EMPTY
78197: LIST
78198: LIST
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: LIST
78204: PUSH
78205: EMPTY
78206: LIST
78207: LIST
78208: LIST
78209: ST_TO_ADDR
// result := [ ] ;
78210: LD_ADDR_VAR 0 3
78214: PUSH
78215: EMPTY
78216: ST_TO_ADDR
// for i in turrets do
78217: LD_ADDR_VAR 0 4
78221: PUSH
78222: LD_VAR 0 1
78226: PUSH
78227: FOR_IN
78228: IFFALSE 78411
// begin nat := GetNation ( i ) ;
78230: LD_ADDR_VAR 0 7
78234: PUSH
78235: LD_VAR 0 4
78239: PPUSH
78240: CALL_OW 248
78244: ST_TO_ADDR
// weapon := 0 ;
78245: LD_ADDR_VAR 0 8
78249: PUSH
78250: LD_INT 0
78252: ST_TO_ADDR
// if not nat then
78253: LD_VAR 0 7
78257: NOT
78258: IFFALSE 78262
// continue ;
78260: GO 78227
// for j in list [ nat ] do
78262: LD_ADDR_VAR 0 5
78266: PUSH
78267: LD_VAR 0 10
78271: PUSH
78272: LD_VAR 0 7
78276: ARRAY
78277: PUSH
78278: FOR_IN
78279: IFFALSE 78320
// if GetBWeapon ( i ) = j [ 1 ] then
78281: LD_VAR 0 4
78285: PPUSH
78286: CALL_OW 269
78290: PUSH
78291: LD_VAR 0 5
78295: PUSH
78296: LD_INT 1
78298: ARRAY
78299: EQUAL
78300: IFFALSE 78318
// begin weapon := j [ 2 ] ;
78302: LD_ADDR_VAR 0 8
78306: PUSH
78307: LD_VAR 0 5
78311: PUSH
78312: LD_INT 2
78314: ARRAY
78315: ST_TO_ADDR
// break ;
78316: GO 78320
// end ;
78318: GO 78278
78320: POP
78321: POP
// if not weapon then
78322: LD_VAR 0 8
78326: NOT
78327: IFFALSE 78331
// continue ;
78329: GO 78227
// for k in factories do
78331: LD_ADDR_VAR 0 6
78335: PUSH
78336: LD_VAR 0 2
78340: PUSH
78341: FOR_IN
78342: IFFALSE 78407
// begin weapons := AvailableWeaponList ( k ) ;
78344: LD_ADDR_VAR 0 9
78348: PUSH
78349: LD_VAR 0 6
78353: PPUSH
78354: CALL_OW 478
78358: ST_TO_ADDR
// if not weapons then
78359: LD_VAR 0 9
78363: NOT
78364: IFFALSE 78368
// continue ;
78366: GO 78341
// if weapon in weapons then
78368: LD_VAR 0 8
78372: PUSH
78373: LD_VAR 0 9
78377: IN
78378: IFFALSE 78405
// begin result := [ i , weapon ] ;
78380: LD_ADDR_VAR 0 3
78384: PUSH
78385: LD_VAR 0 4
78389: PUSH
78390: LD_VAR 0 8
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: ST_TO_ADDR
// exit ;
78399: POP
78400: POP
78401: POP
78402: POP
78403: GO 78413
// end ; end ;
78405: GO 78341
78407: POP
78408: POP
// end ;
78409: GO 78227
78411: POP
78412: POP
// end ;
78413: LD_VAR 0 3
78417: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
78418: LD_INT 0
78420: PPUSH
// if not side or side > 8 then
78421: LD_VAR 0 3
78425: NOT
78426: PUSH
78427: LD_VAR 0 3
78431: PUSH
78432: LD_INT 8
78434: GREATER
78435: OR
78436: IFFALSE 78440
// exit ;
78438: GO 78499
// if not range then
78440: LD_VAR 0 4
78444: NOT
78445: IFFALSE 78456
// range := - 12 ;
78447: LD_ADDR_VAR 0 4
78451: PUSH
78452: LD_INT 12
78454: NEG
78455: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
78456: LD_VAR 0 1
78460: PPUSH
78461: LD_VAR 0 2
78465: PPUSH
78466: LD_VAR 0 3
78470: PPUSH
78471: LD_VAR 0 4
78475: PPUSH
78476: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
78480: LD_VAR 0 1
78484: PPUSH
78485: LD_VAR 0 2
78489: PPUSH
78490: LD_VAR 0 3
78494: PPUSH
78495: CALL_OW 331
// end ;
78499: LD_VAR 0 5
78503: RET
// export function Video ( mode ) ; begin
78504: LD_INT 0
78506: PPUSH
// ingame_video = mode ;
78507: LD_ADDR_OWVAR 52
78511: PUSH
78512: LD_VAR 0 1
78516: ST_TO_ADDR
// interface_hidden = mode ;
78517: LD_ADDR_OWVAR 54
78521: PUSH
78522: LD_VAR 0 1
78526: ST_TO_ADDR
// end ;
78527: LD_VAR 0 2
78531: RET
// export function Join ( array , element ) ; begin
78532: LD_INT 0
78534: PPUSH
// result := Replace ( array , array + 1 , element ) ;
78535: LD_ADDR_VAR 0 3
78539: PUSH
78540: LD_VAR 0 1
78544: PPUSH
78545: LD_VAR 0 1
78549: PUSH
78550: LD_INT 1
78552: PLUS
78553: PPUSH
78554: LD_VAR 0 2
78558: PPUSH
78559: CALL_OW 1
78563: ST_TO_ADDR
// end ;
78564: LD_VAR 0 3
78568: RET
// export function JoinUnion ( array , element ) ; begin
78569: LD_INT 0
78571: PPUSH
// result := array union element ;
78572: LD_ADDR_VAR 0 3
78576: PUSH
78577: LD_VAR 0 1
78581: PUSH
78582: LD_VAR 0 2
78586: UNION
78587: ST_TO_ADDR
// end ;
78588: LD_VAR 0 3
78592: RET
// export function GetBehemoths ( side ) ; begin
78593: LD_INT 0
78595: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
78596: LD_ADDR_VAR 0 2
78600: PUSH
78601: LD_INT 22
78603: PUSH
78604: LD_VAR 0 1
78608: PUSH
78609: EMPTY
78610: LIST
78611: LIST
78612: PUSH
78613: LD_INT 31
78615: PUSH
78616: LD_INT 25
78618: PUSH
78619: EMPTY
78620: LIST
78621: LIST
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PPUSH
78627: CALL_OW 69
78631: ST_TO_ADDR
// end ;
78632: LD_VAR 0 2
78636: RET
// export function Shuffle ( array ) ; var i , index ; begin
78637: LD_INT 0
78639: PPUSH
78640: PPUSH
78641: PPUSH
// result := [ ] ;
78642: LD_ADDR_VAR 0 2
78646: PUSH
78647: EMPTY
78648: ST_TO_ADDR
// if not array then
78649: LD_VAR 0 1
78653: NOT
78654: IFFALSE 78658
// exit ;
78656: GO 78757
// Randomize ;
78658: CALL_OW 10
// for i = array downto 1 do
78662: LD_ADDR_VAR 0 3
78666: PUSH
78667: DOUBLE
78668: LD_VAR 0 1
78672: INC
78673: ST_TO_ADDR
78674: LD_INT 1
78676: PUSH
78677: FOR_DOWNTO
78678: IFFALSE 78755
// begin index := rand ( 1 , array ) ;
78680: LD_ADDR_VAR 0 4
78684: PUSH
78685: LD_INT 1
78687: PPUSH
78688: LD_VAR 0 1
78692: PPUSH
78693: CALL_OW 12
78697: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
78698: LD_ADDR_VAR 0 2
78702: PUSH
78703: LD_VAR 0 2
78707: PPUSH
78708: LD_VAR 0 2
78712: PUSH
78713: LD_INT 1
78715: PLUS
78716: PPUSH
78717: LD_VAR 0 1
78721: PUSH
78722: LD_VAR 0 4
78726: ARRAY
78727: PPUSH
78728: CALL_OW 2
78732: ST_TO_ADDR
// array := Delete ( array , index ) ;
78733: LD_ADDR_VAR 0 1
78737: PUSH
78738: LD_VAR 0 1
78742: PPUSH
78743: LD_VAR 0 4
78747: PPUSH
78748: CALL_OW 3
78752: ST_TO_ADDR
// end ;
78753: GO 78677
78755: POP
78756: POP
// end ;
78757: LD_VAR 0 2
78761: RET
// export function GetBaseMaterials ( base ) ; begin
78762: LD_INT 0
78764: PPUSH
// result := [ 0 , 0 , 0 ] ;
78765: LD_ADDR_VAR 0 2
78769: PUSH
78770: LD_INT 0
78772: PUSH
78773: LD_INT 0
78775: PUSH
78776: LD_INT 0
78778: PUSH
78779: EMPTY
78780: LIST
78781: LIST
78782: LIST
78783: ST_TO_ADDR
// if not base then
78784: LD_VAR 0 1
78788: NOT
78789: IFFALSE 78793
// exit ;
78791: GO 78842
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
78793: LD_ADDR_VAR 0 2
78797: PUSH
78798: LD_VAR 0 1
78802: PPUSH
78803: LD_INT 1
78805: PPUSH
78806: CALL_OW 275
78810: PUSH
78811: LD_VAR 0 1
78815: PPUSH
78816: LD_INT 2
78818: PPUSH
78819: CALL_OW 275
78823: PUSH
78824: LD_VAR 0 1
78828: PPUSH
78829: LD_INT 3
78831: PPUSH
78832: CALL_OW 275
78836: PUSH
78837: EMPTY
78838: LIST
78839: LIST
78840: LIST
78841: ST_TO_ADDR
// end ;
78842: LD_VAR 0 2
78846: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
78847: LD_INT 0
78849: PPUSH
78850: PPUSH
// result := array ;
78851: LD_ADDR_VAR 0 3
78855: PUSH
78856: LD_VAR 0 1
78860: ST_TO_ADDR
// if size >= result then
78861: LD_VAR 0 2
78865: PUSH
78866: LD_VAR 0 3
78870: GREATEREQUAL
78871: IFFALSE 78875
// exit ;
78873: GO 78925
// if size then
78875: LD_VAR 0 2
78879: IFFALSE 78925
// for i := array downto size do
78881: LD_ADDR_VAR 0 4
78885: PUSH
78886: DOUBLE
78887: LD_VAR 0 1
78891: INC
78892: ST_TO_ADDR
78893: LD_VAR 0 2
78897: PUSH
78898: FOR_DOWNTO
78899: IFFALSE 78923
// result := Delete ( result , result ) ;
78901: LD_ADDR_VAR 0 3
78905: PUSH
78906: LD_VAR 0 3
78910: PPUSH
78911: LD_VAR 0 3
78915: PPUSH
78916: CALL_OW 3
78920: ST_TO_ADDR
78921: GO 78898
78923: POP
78924: POP
// end ;
78925: LD_VAR 0 3
78929: RET
// export function ComExit ( unit ) ; var tmp ; begin
78930: LD_INT 0
78932: PPUSH
78933: PPUSH
// if not IsInUnit ( unit ) then
78934: LD_VAR 0 1
78938: PPUSH
78939: CALL_OW 310
78943: NOT
78944: IFFALSE 78948
// exit ;
78946: GO 79008
// tmp := IsInUnit ( unit ) ;
78948: LD_ADDR_VAR 0 3
78952: PUSH
78953: LD_VAR 0 1
78957: PPUSH
78958: CALL_OW 310
78962: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
78963: LD_VAR 0 3
78967: PPUSH
78968: CALL_OW 247
78972: PUSH
78973: LD_INT 2
78975: EQUAL
78976: IFFALSE 78989
// ComExitVehicle ( unit ) else
78978: LD_VAR 0 1
78982: PPUSH
78983: CALL_OW 121
78987: GO 78998
// ComExitBuilding ( unit ) ;
78989: LD_VAR 0 1
78993: PPUSH
78994: CALL_OW 122
// result := tmp ;
78998: LD_ADDR_VAR 0 2
79002: PUSH
79003: LD_VAR 0 3
79007: ST_TO_ADDR
// end ;
79008: LD_VAR 0 2
79012: RET
// export function ComExitAll ( units ) ; var i ; begin
79013: LD_INT 0
79015: PPUSH
79016: PPUSH
// if not units then
79017: LD_VAR 0 1
79021: NOT
79022: IFFALSE 79026
// exit ;
79024: GO 79052
// for i in units do
79026: LD_ADDR_VAR 0 3
79030: PUSH
79031: LD_VAR 0 1
79035: PUSH
79036: FOR_IN
79037: IFFALSE 79050
// ComExit ( i ) ;
79039: LD_VAR 0 3
79043: PPUSH
79044: CALL 78930 0 1
79048: GO 79036
79050: POP
79051: POP
// end ;
79052: LD_VAR 0 2
79056: RET
// export function ResetHc ; begin
79057: LD_INT 0
79059: PPUSH
// InitHc ;
79060: CALL_OW 19
// hc_importance := 0 ;
79064: LD_ADDR_OWVAR 32
79068: PUSH
79069: LD_INT 0
79071: ST_TO_ADDR
// end ;
79072: LD_VAR 0 1
79076: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
79077: LD_INT 0
79079: PPUSH
79080: PPUSH
79081: PPUSH
// _x := ( x1 + x2 ) div 2 ;
79082: LD_ADDR_VAR 0 6
79086: PUSH
79087: LD_VAR 0 1
79091: PUSH
79092: LD_VAR 0 3
79096: PLUS
79097: PUSH
79098: LD_INT 2
79100: DIV
79101: ST_TO_ADDR
// if _x < 0 then
79102: LD_VAR 0 6
79106: PUSH
79107: LD_INT 0
79109: LESS
79110: IFFALSE 79127
// _x := _x * - 1 ;
79112: LD_ADDR_VAR 0 6
79116: PUSH
79117: LD_VAR 0 6
79121: PUSH
79122: LD_INT 1
79124: NEG
79125: MUL
79126: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
79127: LD_ADDR_VAR 0 7
79131: PUSH
79132: LD_VAR 0 2
79136: PUSH
79137: LD_VAR 0 4
79141: PLUS
79142: PUSH
79143: LD_INT 2
79145: DIV
79146: ST_TO_ADDR
// if _y < 0 then
79147: LD_VAR 0 7
79151: PUSH
79152: LD_INT 0
79154: LESS
79155: IFFALSE 79172
// _y := _y * - 1 ;
79157: LD_ADDR_VAR 0 7
79161: PUSH
79162: LD_VAR 0 7
79166: PUSH
79167: LD_INT 1
79169: NEG
79170: MUL
79171: ST_TO_ADDR
// result := [ _x , _y ] ;
79172: LD_ADDR_VAR 0 5
79176: PUSH
79177: LD_VAR 0 6
79181: PUSH
79182: LD_VAR 0 7
79186: PUSH
79187: EMPTY
79188: LIST
79189: LIST
79190: ST_TO_ADDR
// end ;
79191: LD_VAR 0 5
79195: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
79196: LD_INT 0
79198: PPUSH
79199: PPUSH
79200: PPUSH
79201: PPUSH
// task := GetTaskList ( unit ) ;
79202: LD_ADDR_VAR 0 7
79206: PUSH
79207: LD_VAR 0 1
79211: PPUSH
79212: CALL_OW 437
79216: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
79217: LD_VAR 0 7
79221: NOT
79222: PUSH
79223: LD_VAR 0 1
79227: PPUSH
79228: LD_VAR 0 2
79232: PPUSH
79233: CALL_OW 308
79237: NOT
79238: AND
79239: IFFALSE 79243
// exit ;
79241: GO 79361
// if IsInArea ( unit , area ) then
79243: LD_VAR 0 1
79247: PPUSH
79248: LD_VAR 0 2
79252: PPUSH
79253: CALL_OW 308
79257: IFFALSE 79275
// begin ComMoveToArea ( unit , goAway ) ;
79259: LD_VAR 0 1
79263: PPUSH
79264: LD_VAR 0 3
79268: PPUSH
79269: CALL_OW 113
// exit ;
79273: GO 79361
// end ; if task [ 1 ] [ 1 ] <> M then
79275: LD_VAR 0 7
79279: PUSH
79280: LD_INT 1
79282: ARRAY
79283: PUSH
79284: LD_INT 1
79286: ARRAY
79287: PUSH
79288: LD_STRING M
79290: NONEQUAL
79291: IFFALSE 79295
// exit ;
79293: GO 79361
// x := task [ 1 ] [ 2 ] ;
79295: LD_ADDR_VAR 0 5
79299: PUSH
79300: LD_VAR 0 7
79304: PUSH
79305: LD_INT 1
79307: ARRAY
79308: PUSH
79309: LD_INT 2
79311: ARRAY
79312: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
79313: LD_ADDR_VAR 0 6
79317: PUSH
79318: LD_VAR 0 7
79322: PUSH
79323: LD_INT 1
79325: ARRAY
79326: PUSH
79327: LD_INT 3
79329: ARRAY
79330: ST_TO_ADDR
// if InArea ( x , y , area ) then
79331: LD_VAR 0 5
79335: PPUSH
79336: LD_VAR 0 6
79340: PPUSH
79341: LD_VAR 0 2
79345: PPUSH
79346: CALL_OW 309
79350: IFFALSE 79361
// ComStop ( unit ) ;
79352: LD_VAR 0 1
79356: PPUSH
79357: CALL_OW 141
// end ;
79361: LD_VAR 0 4
79365: RET
// export function Abs ( value ) ; begin
79366: LD_INT 0
79368: PPUSH
// result := value ;
79369: LD_ADDR_VAR 0 2
79373: PUSH
79374: LD_VAR 0 1
79378: ST_TO_ADDR
// if value < 0 then
79379: LD_VAR 0 1
79383: PUSH
79384: LD_INT 0
79386: LESS
79387: IFFALSE 79404
// result := value * - 1 ;
79389: LD_ADDR_VAR 0 2
79393: PUSH
79394: LD_VAR 0 1
79398: PUSH
79399: LD_INT 1
79401: NEG
79402: MUL
79403: ST_TO_ADDR
// end ;
79404: LD_VAR 0 2
79408: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
79409: LD_INT 0
79411: PPUSH
79412: PPUSH
79413: PPUSH
79414: PPUSH
79415: PPUSH
79416: PPUSH
79417: PPUSH
79418: PPUSH
// if not unit or not building then
79419: LD_VAR 0 1
79423: NOT
79424: PUSH
79425: LD_VAR 0 2
79429: NOT
79430: OR
79431: IFFALSE 79435
// exit ;
79433: GO 79661
// x := GetX ( building ) ;
79435: LD_ADDR_VAR 0 4
79439: PUSH
79440: LD_VAR 0 2
79444: PPUSH
79445: CALL_OW 250
79449: ST_TO_ADDR
// y := GetY ( building ) ;
79450: LD_ADDR_VAR 0 6
79454: PUSH
79455: LD_VAR 0 2
79459: PPUSH
79460: CALL_OW 251
79464: ST_TO_ADDR
// d := GetDir ( building ) ;
79465: LD_ADDR_VAR 0 8
79469: PUSH
79470: LD_VAR 0 2
79474: PPUSH
79475: CALL_OW 254
79479: ST_TO_ADDR
// r := 4 ;
79480: LD_ADDR_VAR 0 9
79484: PUSH
79485: LD_INT 4
79487: ST_TO_ADDR
// for i := 1 to 5 do
79488: LD_ADDR_VAR 0 10
79492: PUSH
79493: DOUBLE
79494: LD_INT 1
79496: DEC
79497: ST_TO_ADDR
79498: LD_INT 5
79500: PUSH
79501: FOR_TO
79502: IFFALSE 79659
// begin _x := ShiftX ( x , d , r + i ) ;
79504: LD_ADDR_VAR 0 5
79508: PUSH
79509: LD_VAR 0 4
79513: PPUSH
79514: LD_VAR 0 8
79518: PPUSH
79519: LD_VAR 0 9
79523: PUSH
79524: LD_VAR 0 10
79528: PLUS
79529: PPUSH
79530: CALL_OW 272
79534: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
79535: LD_ADDR_VAR 0 7
79539: PUSH
79540: LD_VAR 0 6
79544: PPUSH
79545: LD_VAR 0 8
79549: PPUSH
79550: LD_VAR 0 9
79554: PUSH
79555: LD_VAR 0 10
79559: PLUS
79560: PPUSH
79561: CALL_OW 273
79565: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
79566: LD_VAR 0 5
79570: PPUSH
79571: LD_VAR 0 7
79575: PPUSH
79576: CALL_OW 488
79580: PUSH
79581: LD_VAR 0 5
79585: PPUSH
79586: LD_VAR 0 7
79590: PPUSH
79591: CALL_OW 428
79595: PPUSH
79596: CALL_OW 247
79600: PUSH
79601: LD_INT 3
79603: PUSH
79604: LD_INT 2
79606: PUSH
79607: EMPTY
79608: LIST
79609: LIST
79610: IN
79611: NOT
79612: AND
79613: IFFALSE 79657
// begin ComMoveXY ( unit , _x , _y ) ;
79615: LD_VAR 0 1
79619: PPUSH
79620: LD_VAR 0 5
79624: PPUSH
79625: LD_VAR 0 7
79629: PPUSH
79630: CALL_OW 111
// result := [ _x , _y ] ;
79634: LD_ADDR_VAR 0 3
79638: PUSH
79639: LD_VAR 0 5
79643: PUSH
79644: LD_VAR 0 7
79648: PUSH
79649: EMPTY
79650: LIST
79651: LIST
79652: ST_TO_ADDR
// exit ;
79653: POP
79654: POP
79655: GO 79661
// end ; end ;
79657: GO 79501
79659: POP
79660: POP
// end ;
79661: LD_VAR 0 3
79665: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
79666: LD_INT 0
79668: PPUSH
79669: PPUSH
79670: PPUSH
// result := 0 ;
79671: LD_ADDR_VAR 0 3
79675: PUSH
79676: LD_INT 0
79678: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
79679: LD_VAR 0 1
79683: PUSH
79684: LD_INT 0
79686: LESS
79687: PUSH
79688: LD_VAR 0 1
79692: PUSH
79693: LD_INT 8
79695: GREATER
79696: OR
79697: PUSH
79698: LD_VAR 0 2
79702: PUSH
79703: LD_INT 0
79705: LESS
79706: OR
79707: PUSH
79708: LD_VAR 0 2
79712: PUSH
79713: LD_INT 8
79715: GREATER
79716: OR
79717: IFFALSE 79721
// exit ;
79719: GO 79796
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
79721: LD_ADDR_VAR 0 4
79725: PUSH
79726: LD_INT 22
79728: PUSH
79729: LD_VAR 0 2
79733: PUSH
79734: EMPTY
79735: LIST
79736: LIST
79737: PPUSH
79738: CALL_OW 69
79742: PUSH
79743: FOR_IN
79744: IFFALSE 79794
// begin un := UnitShoot ( i ) ;
79746: LD_ADDR_VAR 0 5
79750: PUSH
79751: LD_VAR 0 4
79755: PPUSH
79756: CALL_OW 504
79760: ST_TO_ADDR
// if GetSide ( un ) = side1 then
79761: LD_VAR 0 5
79765: PPUSH
79766: CALL_OW 255
79770: PUSH
79771: LD_VAR 0 1
79775: EQUAL
79776: IFFALSE 79792
// begin result := un ;
79778: LD_ADDR_VAR 0 3
79782: PUSH
79783: LD_VAR 0 5
79787: ST_TO_ADDR
// exit ;
79788: POP
79789: POP
79790: GO 79796
// end ; end ;
79792: GO 79743
79794: POP
79795: POP
// end ;
79796: LD_VAR 0 3
79800: RET
// export function GetCargoBay ( units ) ; begin
79801: LD_INT 0
79803: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
79804: LD_ADDR_VAR 0 2
79808: PUSH
79809: LD_VAR 0 1
79813: PPUSH
79814: LD_INT 2
79816: PUSH
79817: LD_INT 34
79819: PUSH
79820: LD_INT 12
79822: PUSH
79823: EMPTY
79824: LIST
79825: LIST
79826: PUSH
79827: LD_INT 34
79829: PUSH
79830: LD_INT 51
79832: PUSH
79833: EMPTY
79834: LIST
79835: LIST
79836: PUSH
79837: LD_INT 34
79839: PUSH
79840: LD_INT 32
79842: PUSH
79843: EMPTY
79844: LIST
79845: LIST
79846: PUSH
79847: LD_INT 34
79849: PUSH
79850: LD_INT 89
79852: PUSH
79853: EMPTY
79854: LIST
79855: LIST
79856: PUSH
79857: EMPTY
79858: LIST
79859: LIST
79860: LIST
79861: LIST
79862: LIST
79863: PPUSH
79864: CALL_OW 72
79868: ST_TO_ADDR
// end ;
79869: LD_VAR 0 2
79873: RET
// export function Negate ( value ) ; begin
79874: LD_INT 0
79876: PPUSH
// result := not value ;
79877: LD_ADDR_VAR 0 2
79881: PUSH
79882: LD_VAR 0 1
79886: NOT
79887: ST_TO_ADDR
// end ;
79888: LD_VAR 0 2
79892: RET
// export function Inc ( value ) ; begin
79893: LD_INT 0
79895: PPUSH
// result := value + 1 ;
79896: LD_ADDR_VAR 0 2
79900: PUSH
79901: LD_VAR 0 1
79905: PUSH
79906: LD_INT 1
79908: PLUS
79909: ST_TO_ADDR
// end ;
79910: LD_VAR 0 2
79914: RET
// export function Dec ( value ) ; begin
79915: LD_INT 0
79917: PPUSH
// result := value - 1 ;
79918: LD_ADDR_VAR 0 2
79922: PUSH
79923: LD_VAR 0 1
79927: PUSH
79928: LD_INT 1
79930: MINUS
79931: ST_TO_ADDR
// end ;
79932: LD_VAR 0 2
79936: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
79937: LD_INT 0
79939: PPUSH
79940: PPUSH
79941: PPUSH
79942: PPUSH
79943: PPUSH
79944: PPUSH
79945: PPUSH
79946: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
79947: LD_VAR 0 1
79951: PPUSH
79952: LD_VAR 0 2
79956: PPUSH
79957: CALL_OW 488
79961: NOT
79962: PUSH
79963: LD_VAR 0 3
79967: PPUSH
79968: LD_VAR 0 4
79972: PPUSH
79973: CALL_OW 488
79977: NOT
79978: OR
79979: IFFALSE 79992
// begin result := - 1 ;
79981: LD_ADDR_VAR 0 5
79985: PUSH
79986: LD_INT 1
79988: NEG
79989: ST_TO_ADDR
// exit ;
79990: GO 80227
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
79992: LD_ADDR_VAR 0 12
79996: PUSH
79997: LD_VAR 0 1
80001: PPUSH
80002: LD_VAR 0 2
80006: PPUSH
80007: LD_VAR 0 3
80011: PPUSH
80012: LD_VAR 0 4
80016: PPUSH
80017: CALL 79077 0 4
80021: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
80022: LD_ADDR_VAR 0 11
80026: PUSH
80027: LD_VAR 0 1
80031: PPUSH
80032: LD_VAR 0 2
80036: PPUSH
80037: LD_VAR 0 12
80041: PUSH
80042: LD_INT 1
80044: ARRAY
80045: PPUSH
80046: LD_VAR 0 12
80050: PUSH
80051: LD_INT 2
80053: ARRAY
80054: PPUSH
80055: CALL_OW 298
80059: ST_TO_ADDR
// distance := 9999 ;
80060: LD_ADDR_VAR 0 10
80064: PUSH
80065: LD_INT 9999
80067: ST_TO_ADDR
// for i := 0 to 5 do
80068: LD_ADDR_VAR 0 6
80072: PUSH
80073: DOUBLE
80074: LD_INT 0
80076: DEC
80077: ST_TO_ADDR
80078: LD_INT 5
80080: PUSH
80081: FOR_TO
80082: IFFALSE 80225
// begin _x := ShiftX ( x1 , i , centerDist ) ;
80084: LD_ADDR_VAR 0 7
80088: PUSH
80089: LD_VAR 0 1
80093: PPUSH
80094: LD_VAR 0 6
80098: PPUSH
80099: LD_VAR 0 11
80103: PPUSH
80104: CALL_OW 272
80108: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
80109: LD_ADDR_VAR 0 8
80113: PUSH
80114: LD_VAR 0 2
80118: PPUSH
80119: LD_VAR 0 6
80123: PPUSH
80124: LD_VAR 0 11
80128: PPUSH
80129: CALL_OW 273
80133: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
80134: LD_VAR 0 7
80138: PPUSH
80139: LD_VAR 0 8
80143: PPUSH
80144: CALL_OW 488
80148: NOT
80149: IFFALSE 80153
// continue ;
80151: GO 80081
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
80153: LD_ADDR_VAR 0 9
80157: PUSH
80158: LD_VAR 0 12
80162: PUSH
80163: LD_INT 1
80165: ARRAY
80166: PPUSH
80167: LD_VAR 0 12
80171: PUSH
80172: LD_INT 2
80174: ARRAY
80175: PPUSH
80176: LD_VAR 0 7
80180: PPUSH
80181: LD_VAR 0 8
80185: PPUSH
80186: CALL_OW 298
80190: ST_TO_ADDR
// if tmp < distance then
80191: LD_VAR 0 9
80195: PUSH
80196: LD_VAR 0 10
80200: LESS
80201: IFFALSE 80223
// begin result := i ;
80203: LD_ADDR_VAR 0 5
80207: PUSH
80208: LD_VAR 0 6
80212: ST_TO_ADDR
// distance := tmp ;
80213: LD_ADDR_VAR 0 10
80217: PUSH
80218: LD_VAR 0 9
80222: ST_TO_ADDR
// end ; end ;
80223: GO 80081
80225: POP
80226: POP
// end ;
80227: LD_VAR 0 5
80231: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80232: LD_INT 0
80234: PPUSH
80235: PPUSH
// if not driver or not IsInUnit ( driver ) then
80236: LD_VAR 0 1
80240: NOT
80241: PUSH
80242: LD_VAR 0 1
80246: PPUSH
80247: CALL_OW 310
80251: NOT
80252: OR
80253: IFFALSE 80257
// exit ;
80255: GO 80347
// vehicle := IsInUnit ( driver ) ;
80257: LD_ADDR_VAR 0 3
80261: PUSH
80262: LD_VAR 0 1
80266: PPUSH
80267: CALL_OW 310
80271: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80272: LD_VAR 0 1
80276: PPUSH
80277: LD_STRING \
80279: PUSH
80280: LD_INT 0
80282: PUSH
80283: LD_INT 0
80285: PUSH
80286: LD_INT 0
80288: PUSH
80289: LD_INT 0
80291: PUSH
80292: LD_INT 0
80294: PUSH
80295: LD_INT 0
80297: PUSH
80298: EMPTY
80299: LIST
80300: LIST
80301: LIST
80302: LIST
80303: LIST
80304: LIST
80305: LIST
80306: PUSH
80307: LD_STRING E
80309: PUSH
80310: LD_INT 0
80312: PUSH
80313: LD_INT 0
80315: PUSH
80316: LD_VAR 0 3
80320: PUSH
80321: LD_INT 0
80323: PUSH
80324: LD_INT 0
80326: PUSH
80327: LD_INT 0
80329: PUSH
80330: EMPTY
80331: LIST
80332: LIST
80333: LIST
80334: LIST
80335: LIST
80336: LIST
80337: LIST
80338: PUSH
80339: EMPTY
80340: LIST
80341: LIST
80342: PPUSH
80343: CALL_OW 446
// end ;
80347: LD_VAR 0 2
80351: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
80352: LD_INT 0
80354: PPUSH
80355: PPUSH
// if not driver or not IsInUnit ( driver ) then
80356: LD_VAR 0 1
80360: NOT
80361: PUSH
80362: LD_VAR 0 1
80366: PPUSH
80367: CALL_OW 310
80371: NOT
80372: OR
80373: IFFALSE 80377
// exit ;
80375: GO 80467
// vehicle := IsInUnit ( driver ) ;
80377: LD_ADDR_VAR 0 3
80381: PUSH
80382: LD_VAR 0 1
80386: PPUSH
80387: CALL_OW 310
80391: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
80392: LD_VAR 0 1
80396: PPUSH
80397: LD_STRING \
80399: PUSH
80400: LD_INT 0
80402: PUSH
80403: LD_INT 0
80405: PUSH
80406: LD_INT 0
80408: PUSH
80409: LD_INT 0
80411: PUSH
80412: LD_INT 0
80414: PUSH
80415: LD_INT 0
80417: PUSH
80418: EMPTY
80419: LIST
80420: LIST
80421: LIST
80422: LIST
80423: LIST
80424: LIST
80425: LIST
80426: PUSH
80427: LD_STRING E
80429: PUSH
80430: LD_INT 0
80432: PUSH
80433: LD_INT 0
80435: PUSH
80436: LD_VAR 0 3
80440: PUSH
80441: LD_INT 0
80443: PUSH
80444: LD_INT 0
80446: PUSH
80447: LD_INT 0
80449: PUSH
80450: EMPTY
80451: LIST
80452: LIST
80453: LIST
80454: LIST
80455: LIST
80456: LIST
80457: LIST
80458: PUSH
80459: EMPTY
80460: LIST
80461: LIST
80462: PPUSH
80463: CALL_OW 447
// end ;
80467: LD_VAR 0 2
80471: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
80472: LD_INT 0
80474: PPUSH
80475: PPUSH
80476: PPUSH
// tmp := [ ] ;
80477: LD_ADDR_VAR 0 5
80481: PUSH
80482: EMPTY
80483: ST_TO_ADDR
// for i in units do
80484: LD_ADDR_VAR 0 4
80488: PUSH
80489: LD_VAR 0 1
80493: PUSH
80494: FOR_IN
80495: IFFALSE 80533
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
80497: LD_ADDR_VAR 0 5
80501: PUSH
80502: LD_VAR 0 5
80506: PPUSH
80507: LD_VAR 0 5
80511: PUSH
80512: LD_INT 1
80514: PLUS
80515: PPUSH
80516: LD_VAR 0 4
80520: PPUSH
80521: CALL_OW 256
80525: PPUSH
80526: CALL_OW 2
80530: ST_TO_ADDR
80531: GO 80494
80533: POP
80534: POP
// if not tmp then
80535: LD_VAR 0 5
80539: NOT
80540: IFFALSE 80544
// exit ;
80542: GO 80592
// if asc then
80544: LD_VAR 0 2
80548: IFFALSE 80572
// result := SortListByListAsc ( units , tmp ) else
80550: LD_ADDR_VAR 0 3
80554: PUSH
80555: LD_VAR 0 1
80559: PPUSH
80560: LD_VAR 0 5
80564: PPUSH
80565: CALL_OW 76
80569: ST_TO_ADDR
80570: GO 80592
// result := SortListByListDesc ( units , tmp ) ;
80572: LD_ADDR_VAR 0 3
80576: PUSH
80577: LD_VAR 0 1
80581: PPUSH
80582: LD_VAR 0 5
80586: PPUSH
80587: CALL_OW 77
80591: ST_TO_ADDR
// end ;
80592: LD_VAR 0 3
80596: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
80597: LD_INT 0
80599: PPUSH
80600: PPUSH
// task := GetTaskList ( mech ) ;
80601: LD_ADDR_VAR 0 4
80605: PUSH
80606: LD_VAR 0 1
80610: PPUSH
80611: CALL_OW 437
80615: ST_TO_ADDR
// if not task then
80616: LD_VAR 0 4
80620: NOT
80621: IFFALSE 80625
// exit ;
80623: GO 80667
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
80625: LD_ADDR_VAR 0 3
80629: PUSH
80630: LD_VAR 0 4
80634: PUSH
80635: LD_INT 1
80637: ARRAY
80638: PUSH
80639: LD_INT 1
80641: ARRAY
80642: PUSH
80643: LD_STRING r
80645: EQUAL
80646: PUSH
80647: LD_VAR 0 4
80651: PUSH
80652: LD_INT 1
80654: ARRAY
80655: PUSH
80656: LD_INT 4
80658: ARRAY
80659: PUSH
80660: LD_VAR 0 2
80664: EQUAL
80665: AND
80666: ST_TO_ADDR
// end ;
80667: LD_VAR 0 3
80671: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
80672: LD_INT 0
80674: PPUSH
// SetDir ( unit , d ) ;
80675: LD_VAR 0 1
80679: PPUSH
80680: LD_VAR 0 4
80684: PPUSH
80685: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
80689: LD_ADDR_VAR 0 6
80693: PUSH
80694: LD_VAR 0 1
80698: PPUSH
80699: LD_VAR 0 2
80703: PPUSH
80704: LD_VAR 0 3
80708: PPUSH
80709: LD_VAR 0 5
80713: PPUSH
80714: CALL_OW 48
80718: ST_TO_ADDR
// end ;
80719: LD_VAR 0 6
80723: RET
// export function ToNaturalNumber ( number ) ; begin
80724: LD_INT 0
80726: PPUSH
// result := number div 1 ;
80727: LD_ADDR_VAR 0 2
80731: PUSH
80732: LD_VAR 0 1
80736: PUSH
80737: LD_INT 1
80739: DIV
80740: ST_TO_ADDR
// if number < 0 then
80741: LD_VAR 0 1
80745: PUSH
80746: LD_INT 0
80748: LESS
80749: IFFALSE 80759
// result := 0 ;
80751: LD_ADDR_VAR 0 2
80755: PUSH
80756: LD_INT 0
80758: ST_TO_ADDR
// end ;
80759: LD_VAR 0 2
80763: RET
// export function SortByClass ( units , class ) ; var un ; begin
80764: LD_INT 0
80766: PPUSH
80767: PPUSH
// if not units or not class then
80768: LD_VAR 0 1
80772: NOT
80773: PUSH
80774: LD_VAR 0 2
80778: NOT
80779: OR
80780: IFFALSE 80784
// exit ;
80782: GO 80879
// result := [ ] ;
80784: LD_ADDR_VAR 0 3
80788: PUSH
80789: EMPTY
80790: ST_TO_ADDR
// for un in units do
80791: LD_ADDR_VAR 0 4
80795: PUSH
80796: LD_VAR 0 1
80800: PUSH
80801: FOR_IN
80802: IFFALSE 80877
// if GetClass ( un ) = class then
80804: LD_VAR 0 4
80808: PPUSH
80809: CALL_OW 257
80813: PUSH
80814: LD_VAR 0 2
80818: EQUAL
80819: IFFALSE 80846
// result := Insert ( result , 1 , un ) else
80821: LD_ADDR_VAR 0 3
80825: PUSH
80826: LD_VAR 0 3
80830: PPUSH
80831: LD_INT 1
80833: PPUSH
80834: LD_VAR 0 4
80838: PPUSH
80839: CALL_OW 2
80843: ST_TO_ADDR
80844: GO 80875
// result := Replace ( result , result + 1 , un ) ;
80846: LD_ADDR_VAR 0 3
80850: PUSH
80851: LD_VAR 0 3
80855: PPUSH
80856: LD_VAR 0 3
80860: PUSH
80861: LD_INT 1
80863: PLUS
80864: PPUSH
80865: LD_VAR 0 4
80869: PPUSH
80870: CALL_OW 1
80874: ST_TO_ADDR
80875: GO 80801
80877: POP
80878: POP
// end ;
80879: LD_VAR 0 3
80883: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
80884: LD_INT 0
80886: PPUSH
80887: PPUSH
80888: PPUSH
80889: PPUSH
80890: PPUSH
80891: PPUSH
80892: PPUSH
// result := [ ] ;
80893: LD_ADDR_VAR 0 4
80897: PUSH
80898: EMPTY
80899: ST_TO_ADDR
// if x - r < 0 then
80900: LD_VAR 0 1
80904: PUSH
80905: LD_VAR 0 3
80909: MINUS
80910: PUSH
80911: LD_INT 0
80913: LESS
80914: IFFALSE 80926
// min_x := 0 else
80916: LD_ADDR_VAR 0 8
80920: PUSH
80921: LD_INT 0
80923: ST_TO_ADDR
80924: GO 80942
// min_x := x - r ;
80926: LD_ADDR_VAR 0 8
80930: PUSH
80931: LD_VAR 0 1
80935: PUSH
80936: LD_VAR 0 3
80940: MINUS
80941: ST_TO_ADDR
// if y - r < 0 then
80942: LD_VAR 0 2
80946: PUSH
80947: LD_VAR 0 3
80951: MINUS
80952: PUSH
80953: LD_INT 0
80955: LESS
80956: IFFALSE 80968
// min_y := 0 else
80958: LD_ADDR_VAR 0 7
80962: PUSH
80963: LD_INT 0
80965: ST_TO_ADDR
80966: GO 80984
// min_y := y - r ;
80968: LD_ADDR_VAR 0 7
80972: PUSH
80973: LD_VAR 0 2
80977: PUSH
80978: LD_VAR 0 3
80982: MINUS
80983: ST_TO_ADDR
// max_x := x + r ;
80984: LD_ADDR_VAR 0 9
80988: PUSH
80989: LD_VAR 0 1
80993: PUSH
80994: LD_VAR 0 3
80998: PLUS
80999: ST_TO_ADDR
// max_y := y + r ;
81000: LD_ADDR_VAR 0 10
81004: PUSH
81005: LD_VAR 0 2
81009: PUSH
81010: LD_VAR 0 3
81014: PLUS
81015: ST_TO_ADDR
// for _x = min_x to max_x do
81016: LD_ADDR_VAR 0 5
81020: PUSH
81021: DOUBLE
81022: LD_VAR 0 8
81026: DEC
81027: ST_TO_ADDR
81028: LD_VAR 0 9
81032: PUSH
81033: FOR_TO
81034: IFFALSE 81135
// for _y = min_y to max_y do
81036: LD_ADDR_VAR 0 6
81040: PUSH
81041: DOUBLE
81042: LD_VAR 0 7
81046: DEC
81047: ST_TO_ADDR
81048: LD_VAR 0 10
81052: PUSH
81053: FOR_TO
81054: IFFALSE 81131
// begin if not ValidHex ( _x , _y ) then
81056: LD_VAR 0 5
81060: PPUSH
81061: LD_VAR 0 6
81065: PPUSH
81066: CALL_OW 488
81070: NOT
81071: IFFALSE 81075
// continue ;
81073: GO 81053
// if GetResourceTypeXY ( _x , _y ) then
81075: LD_VAR 0 5
81079: PPUSH
81080: LD_VAR 0 6
81084: PPUSH
81085: CALL_OW 283
81089: IFFALSE 81129
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
81091: LD_ADDR_VAR 0 4
81095: PUSH
81096: LD_VAR 0 4
81100: PPUSH
81101: LD_VAR 0 4
81105: PUSH
81106: LD_INT 1
81108: PLUS
81109: PPUSH
81110: LD_VAR 0 5
81114: PUSH
81115: LD_VAR 0 6
81119: PUSH
81120: EMPTY
81121: LIST
81122: LIST
81123: PPUSH
81124: CALL_OW 1
81128: ST_TO_ADDR
// end ;
81129: GO 81053
81131: POP
81132: POP
81133: GO 81033
81135: POP
81136: POP
// end ;
81137: LD_VAR 0 4
81141: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
81142: LD_INT 0
81144: PPUSH
81145: PPUSH
81146: PPUSH
81147: PPUSH
81148: PPUSH
81149: PPUSH
81150: PPUSH
81151: PPUSH
// if not units then
81152: LD_VAR 0 1
81156: NOT
81157: IFFALSE 81161
// exit ;
81159: GO 81689
// result := UnitFilter ( units , [ f_ok ] ) ;
81161: LD_ADDR_VAR 0 3
81165: PUSH
81166: LD_VAR 0 1
81170: PPUSH
81171: LD_INT 50
81173: PUSH
81174: EMPTY
81175: LIST
81176: PPUSH
81177: CALL_OW 72
81181: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
81182: LD_ADDR_VAR 0 8
81186: PUSH
81187: LD_VAR 0 1
81191: PUSH
81192: LD_INT 1
81194: ARRAY
81195: PPUSH
81196: CALL_OW 255
81200: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
81201: LD_ADDR_VAR 0 10
81205: PUSH
81206: LD_INT 29
81208: PUSH
81209: LD_INT 91
81211: PUSH
81212: LD_INT 49
81214: PUSH
81215: EMPTY
81216: LIST
81217: LIST
81218: LIST
81219: ST_TO_ADDR
// if not result then
81220: LD_VAR 0 3
81224: NOT
81225: IFFALSE 81229
// exit ;
81227: GO 81689
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
81229: LD_ADDR_VAR 0 5
81233: PUSH
81234: LD_INT 81
81236: PUSH
81237: LD_VAR 0 8
81241: PUSH
81242: EMPTY
81243: LIST
81244: LIST
81245: PPUSH
81246: CALL_OW 69
81250: ST_TO_ADDR
// for i in result do
81251: LD_ADDR_VAR 0 4
81255: PUSH
81256: LD_VAR 0 3
81260: PUSH
81261: FOR_IN
81262: IFFALSE 81687
// begin tag := GetTag ( i ) + 1 ;
81264: LD_ADDR_VAR 0 9
81268: PUSH
81269: LD_VAR 0 4
81273: PPUSH
81274: CALL_OW 110
81278: PUSH
81279: LD_INT 1
81281: PLUS
81282: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
81283: LD_ADDR_VAR 0 7
81287: PUSH
81288: LD_VAR 0 4
81292: PPUSH
81293: CALL_OW 250
81297: PPUSH
81298: LD_VAR 0 4
81302: PPUSH
81303: CALL_OW 251
81307: PPUSH
81308: LD_INT 4
81310: PPUSH
81311: CALL 80884 0 3
81315: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
81316: LD_VAR 0 4
81320: PPUSH
81321: CALL_OW 247
81325: PUSH
81326: LD_INT 2
81328: EQUAL
81329: PUSH
81330: LD_VAR 0 7
81334: PUSH
81335: LD_INT 2
81337: GREATER
81338: AND
81339: PUSH
81340: LD_VAR 0 4
81344: PPUSH
81345: CALL_OW 264
81349: PUSH
81350: LD_VAR 0 10
81354: IN
81355: NOT
81356: AND
81357: IFFALSE 81396
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
81359: LD_VAR 0 4
81363: PPUSH
81364: LD_VAR 0 7
81368: PUSH
81369: LD_INT 1
81371: ARRAY
81372: PUSH
81373: LD_INT 1
81375: ARRAY
81376: PPUSH
81377: LD_VAR 0 7
81381: PUSH
81382: LD_INT 1
81384: ARRAY
81385: PUSH
81386: LD_INT 2
81388: ARRAY
81389: PPUSH
81390: CALL_OW 116
81394: GO 81685
// if path > tag then
81396: LD_VAR 0 2
81400: PUSH
81401: LD_VAR 0 9
81405: GREATER
81406: IFFALSE 81614
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
81408: LD_ADDR_VAR 0 6
81412: PUSH
81413: LD_VAR 0 5
81417: PPUSH
81418: LD_INT 91
81420: PUSH
81421: LD_VAR 0 4
81425: PUSH
81426: LD_INT 8
81428: PUSH
81429: EMPTY
81430: LIST
81431: LIST
81432: LIST
81433: PPUSH
81434: CALL_OW 72
81438: ST_TO_ADDR
// if nearEnemy then
81439: LD_VAR 0 6
81443: IFFALSE 81512
// begin if GetWeapon ( i ) = ru_time_lapser then
81445: LD_VAR 0 4
81449: PPUSH
81450: CALL_OW 264
81454: PUSH
81455: LD_INT 49
81457: EQUAL
81458: IFFALSE 81486
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
81460: LD_VAR 0 4
81464: PPUSH
81465: LD_VAR 0 6
81469: PPUSH
81470: LD_VAR 0 4
81474: PPUSH
81475: CALL_OW 74
81479: PPUSH
81480: CALL_OW 112
81484: GO 81510
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
81486: LD_VAR 0 4
81490: PPUSH
81491: LD_VAR 0 6
81495: PPUSH
81496: LD_VAR 0 4
81500: PPUSH
81501: CALL_OW 74
81505: PPUSH
81506: CALL 82760 0 2
// end else
81510: GO 81612
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
81512: LD_VAR 0 4
81516: PPUSH
81517: LD_VAR 0 2
81521: PUSH
81522: LD_VAR 0 9
81526: ARRAY
81527: PUSH
81528: LD_INT 1
81530: ARRAY
81531: PPUSH
81532: LD_VAR 0 2
81536: PUSH
81537: LD_VAR 0 9
81541: ARRAY
81542: PUSH
81543: LD_INT 2
81545: ARRAY
81546: PPUSH
81547: CALL_OW 297
81551: PUSH
81552: LD_INT 6
81554: GREATER
81555: IFFALSE 81598
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
81557: LD_VAR 0 4
81561: PPUSH
81562: LD_VAR 0 2
81566: PUSH
81567: LD_VAR 0 9
81571: ARRAY
81572: PUSH
81573: LD_INT 1
81575: ARRAY
81576: PPUSH
81577: LD_VAR 0 2
81581: PUSH
81582: LD_VAR 0 9
81586: ARRAY
81587: PUSH
81588: LD_INT 2
81590: ARRAY
81591: PPUSH
81592: CALL_OW 114
81596: GO 81612
// SetTag ( i , tag ) ;
81598: LD_VAR 0 4
81602: PPUSH
81603: LD_VAR 0 9
81607: PPUSH
81608: CALL_OW 109
// end else
81612: GO 81685
// if enemy then
81614: LD_VAR 0 5
81618: IFFALSE 81685
// begin if GetWeapon ( i ) = ru_time_lapser then
81620: LD_VAR 0 4
81624: PPUSH
81625: CALL_OW 264
81629: PUSH
81630: LD_INT 49
81632: EQUAL
81633: IFFALSE 81661
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
81635: LD_VAR 0 4
81639: PPUSH
81640: LD_VAR 0 5
81644: PPUSH
81645: LD_VAR 0 4
81649: PPUSH
81650: CALL_OW 74
81654: PPUSH
81655: CALL_OW 112
81659: GO 81685
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
81661: LD_VAR 0 4
81665: PPUSH
81666: LD_VAR 0 5
81670: PPUSH
81671: LD_VAR 0 4
81675: PPUSH
81676: CALL_OW 74
81680: PPUSH
81681: CALL 82760 0 2
// end ; end ;
81685: GO 81261
81687: POP
81688: POP
// end ;
81689: LD_VAR 0 3
81693: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
81694: LD_INT 0
81696: PPUSH
81697: PPUSH
81698: PPUSH
// if not unit or IsInUnit ( unit ) then
81699: LD_VAR 0 1
81703: NOT
81704: PUSH
81705: LD_VAR 0 1
81709: PPUSH
81710: CALL_OW 310
81714: OR
81715: IFFALSE 81719
// exit ;
81717: GO 81810
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
81719: LD_ADDR_VAR 0 4
81723: PUSH
81724: LD_VAR 0 1
81728: PPUSH
81729: CALL_OW 250
81733: PPUSH
81734: LD_VAR 0 2
81738: PPUSH
81739: LD_INT 1
81741: PPUSH
81742: CALL_OW 272
81746: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
81747: LD_ADDR_VAR 0 5
81751: PUSH
81752: LD_VAR 0 1
81756: PPUSH
81757: CALL_OW 251
81761: PPUSH
81762: LD_VAR 0 2
81766: PPUSH
81767: LD_INT 1
81769: PPUSH
81770: CALL_OW 273
81774: ST_TO_ADDR
// if ValidHex ( x , y ) then
81775: LD_VAR 0 4
81779: PPUSH
81780: LD_VAR 0 5
81784: PPUSH
81785: CALL_OW 488
81789: IFFALSE 81810
// ComTurnXY ( unit , x , y ) ;
81791: LD_VAR 0 1
81795: PPUSH
81796: LD_VAR 0 4
81800: PPUSH
81801: LD_VAR 0 5
81805: PPUSH
81806: CALL_OW 118
// end ;
81810: LD_VAR 0 3
81814: RET
// export function SeeUnits ( side , units ) ; var i ; begin
81815: LD_INT 0
81817: PPUSH
81818: PPUSH
// result := false ;
81819: LD_ADDR_VAR 0 3
81823: PUSH
81824: LD_INT 0
81826: ST_TO_ADDR
// if not units then
81827: LD_VAR 0 2
81831: NOT
81832: IFFALSE 81836
// exit ;
81834: GO 81881
// for i in units do
81836: LD_ADDR_VAR 0 4
81840: PUSH
81841: LD_VAR 0 2
81845: PUSH
81846: FOR_IN
81847: IFFALSE 81879
// if See ( side , i ) then
81849: LD_VAR 0 1
81853: PPUSH
81854: LD_VAR 0 4
81858: PPUSH
81859: CALL_OW 292
81863: IFFALSE 81877
// begin result := true ;
81865: LD_ADDR_VAR 0 3
81869: PUSH
81870: LD_INT 1
81872: ST_TO_ADDR
// exit ;
81873: POP
81874: POP
81875: GO 81881
// end ;
81877: GO 81846
81879: POP
81880: POP
// end ;
81881: LD_VAR 0 3
81885: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
81886: LD_INT 0
81888: PPUSH
81889: PPUSH
81890: PPUSH
81891: PPUSH
// if not unit or not points then
81892: LD_VAR 0 1
81896: NOT
81897: PUSH
81898: LD_VAR 0 2
81902: NOT
81903: OR
81904: IFFALSE 81908
// exit ;
81906: GO 81998
// dist := 99999 ;
81908: LD_ADDR_VAR 0 5
81912: PUSH
81913: LD_INT 99999
81915: ST_TO_ADDR
// for i in points do
81916: LD_ADDR_VAR 0 4
81920: PUSH
81921: LD_VAR 0 2
81925: PUSH
81926: FOR_IN
81927: IFFALSE 81996
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
81929: LD_ADDR_VAR 0 6
81933: PUSH
81934: LD_VAR 0 1
81938: PPUSH
81939: LD_VAR 0 4
81943: PUSH
81944: LD_INT 1
81946: ARRAY
81947: PPUSH
81948: LD_VAR 0 4
81952: PUSH
81953: LD_INT 2
81955: ARRAY
81956: PPUSH
81957: CALL_OW 297
81961: ST_TO_ADDR
// if tmpDist < dist then
81962: LD_VAR 0 6
81966: PUSH
81967: LD_VAR 0 5
81971: LESS
81972: IFFALSE 81994
// begin result := i ;
81974: LD_ADDR_VAR 0 3
81978: PUSH
81979: LD_VAR 0 4
81983: ST_TO_ADDR
// dist := tmpDist ;
81984: LD_ADDR_VAR 0 5
81988: PUSH
81989: LD_VAR 0 6
81993: ST_TO_ADDR
// end ; end ;
81994: GO 81926
81996: POP
81997: POP
// end ;
81998: LD_VAR 0 3
82002: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
82003: LD_INT 0
82005: PPUSH
// uc_side := side ;
82006: LD_ADDR_OWVAR 20
82010: PUSH
82011: LD_VAR 0 1
82015: ST_TO_ADDR
// uc_nation := 3 ;
82016: LD_ADDR_OWVAR 21
82020: PUSH
82021: LD_INT 3
82023: ST_TO_ADDR
// vc_chassis := 25 ;
82024: LD_ADDR_OWVAR 37
82028: PUSH
82029: LD_INT 25
82031: ST_TO_ADDR
// vc_engine := engine_siberite ;
82032: LD_ADDR_OWVAR 39
82036: PUSH
82037: LD_INT 3
82039: ST_TO_ADDR
// vc_control := control_computer ;
82040: LD_ADDR_OWVAR 38
82044: PUSH
82045: LD_INT 3
82047: ST_TO_ADDR
// vc_weapon := 59 ;
82048: LD_ADDR_OWVAR 40
82052: PUSH
82053: LD_INT 59
82055: ST_TO_ADDR
// result := CreateVehicle ;
82056: LD_ADDR_VAR 0 5
82060: PUSH
82061: CALL_OW 45
82065: ST_TO_ADDR
// SetDir ( result , d ) ;
82066: LD_VAR 0 5
82070: PPUSH
82071: LD_VAR 0 4
82075: PPUSH
82076: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
82080: LD_VAR 0 5
82084: PPUSH
82085: LD_VAR 0 2
82089: PPUSH
82090: LD_VAR 0 3
82094: PPUSH
82095: LD_INT 0
82097: PPUSH
82098: CALL_OW 48
// end ;
82102: LD_VAR 0 5
82106: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
82107: LD_INT 0
82109: PPUSH
82110: PPUSH
82111: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
82112: LD_ADDR_VAR 0 2
82116: PUSH
82117: LD_INT 0
82119: PUSH
82120: LD_INT 0
82122: PUSH
82123: LD_INT 0
82125: PUSH
82126: LD_INT 0
82128: PUSH
82129: EMPTY
82130: LIST
82131: LIST
82132: LIST
82133: LIST
82134: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
82135: LD_VAR 0 1
82139: NOT
82140: PUSH
82141: LD_VAR 0 1
82145: PPUSH
82146: CALL_OW 264
82150: PUSH
82151: LD_INT 12
82153: PUSH
82154: LD_INT 51
82156: PUSH
82157: LD_INT 32
82159: PUSH
82160: LD_INT 89
82162: PUSH
82163: EMPTY
82164: LIST
82165: LIST
82166: LIST
82167: LIST
82168: IN
82169: NOT
82170: OR
82171: IFFALSE 82175
// exit ;
82173: GO 82273
// for i := 1 to 3 do
82175: LD_ADDR_VAR 0 3
82179: PUSH
82180: DOUBLE
82181: LD_INT 1
82183: DEC
82184: ST_TO_ADDR
82185: LD_INT 3
82187: PUSH
82188: FOR_TO
82189: IFFALSE 82271
// begin tmp := GetCargo ( cargo , i ) ;
82191: LD_ADDR_VAR 0 4
82195: PUSH
82196: LD_VAR 0 1
82200: PPUSH
82201: LD_VAR 0 3
82205: PPUSH
82206: CALL_OW 289
82210: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
82211: LD_ADDR_VAR 0 2
82215: PUSH
82216: LD_VAR 0 2
82220: PPUSH
82221: LD_VAR 0 3
82225: PPUSH
82226: LD_VAR 0 4
82230: PPUSH
82231: CALL_OW 1
82235: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
82236: LD_ADDR_VAR 0 2
82240: PUSH
82241: LD_VAR 0 2
82245: PPUSH
82246: LD_INT 4
82248: PPUSH
82249: LD_VAR 0 2
82253: PUSH
82254: LD_INT 4
82256: ARRAY
82257: PUSH
82258: LD_VAR 0 4
82262: PLUS
82263: PPUSH
82264: CALL_OW 1
82268: ST_TO_ADDR
// end ;
82269: GO 82188
82271: POP
82272: POP
// end ;
82273: LD_VAR 0 2
82277: RET
// export function Length ( array ) ; begin
82278: LD_INT 0
82280: PPUSH
// result := array + 0 ;
82281: LD_ADDR_VAR 0 2
82285: PUSH
82286: LD_VAR 0 1
82290: PUSH
82291: LD_INT 0
82293: PLUS
82294: ST_TO_ADDR
// end ;
82295: LD_VAR 0 2
82299: RET
// export function PrepareArray ( array ) ; begin
82300: LD_INT 0
82302: PPUSH
// result := array diff 0 ;
82303: LD_ADDR_VAR 0 2
82307: PUSH
82308: LD_VAR 0 1
82312: PUSH
82313: LD_INT 0
82315: DIFF
82316: ST_TO_ADDR
// if not result [ 1 ] then
82317: LD_VAR 0 2
82321: PUSH
82322: LD_INT 1
82324: ARRAY
82325: NOT
82326: IFFALSE 82346
// result := Delete ( result , 1 ) ;
82328: LD_ADDR_VAR 0 2
82332: PUSH
82333: LD_VAR 0 2
82337: PPUSH
82338: LD_INT 1
82340: PPUSH
82341: CALL_OW 3
82345: ST_TO_ADDR
// end ;
82346: LD_VAR 0 2
82350: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
82351: LD_INT 0
82353: PPUSH
82354: PPUSH
82355: PPUSH
82356: PPUSH
// sibRocketRange := 25 ;
82357: LD_ADDR_VAR 0 6
82361: PUSH
82362: LD_INT 25
82364: ST_TO_ADDR
// result := false ;
82365: LD_ADDR_VAR 0 4
82369: PUSH
82370: LD_INT 0
82372: ST_TO_ADDR
// for i := 0 to 5 do
82373: LD_ADDR_VAR 0 5
82377: PUSH
82378: DOUBLE
82379: LD_INT 0
82381: DEC
82382: ST_TO_ADDR
82383: LD_INT 5
82385: PUSH
82386: FOR_TO
82387: IFFALSE 82454
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
82389: LD_VAR 0 1
82393: PPUSH
82394: LD_VAR 0 5
82398: PPUSH
82399: LD_VAR 0 6
82403: PPUSH
82404: CALL_OW 272
82408: PPUSH
82409: LD_VAR 0 2
82413: PPUSH
82414: LD_VAR 0 5
82418: PPUSH
82419: LD_VAR 0 6
82423: PPUSH
82424: CALL_OW 273
82428: PPUSH
82429: LD_VAR 0 3
82433: PPUSH
82434: CALL_OW 309
82438: IFFALSE 82452
// begin result := true ;
82440: LD_ADDR_VAR 0 4
82444: PUSH
82445: LD_INT 1
82447: ST_TO_ADDR
// exit ;
82448: POP
82449: POP
82450: GO 82456
// end ;
82452: GO 82386
82454: POP
82455: POP
// end ;
82456: LD_VAR 0 4
82460: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
82461: LD_INT 0
82463: PPUSH
82464: PPUSH
82465: PPUSH
// if btype = b_depot then
82466: LD_VAR 0 2
82470: PUSH
82471: LD_INT 0
82473: EQUAL
82474: IFFALSE 82486
// begin result := true ;
82476: LD_ADDR_VAR 0 3
82480: PUSH
82481: LD_INT 1
82483: ST_TO_ADDR
// exit ;
82484: GO 82602
// end ; pom := GetBase ( depot ) ;
82486: LD_ADDR_VAR 0 4
82490: PUSH
82491: LD_VAR 0 1
82495: PPUSH
82496: CALL_OW 274
82500: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
82501: LD_ADDR_VAR 0 5
82505: PUSH
82506: LD_VAR 0 2
82510: PPUSH
82511: LD_VAR 0 1
82515: PPUSH
82516: CALL_OW 248
82520: PPUSH
82521: CALL_OW 450
82525: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
82526: LD_ADDR_VAR 0 3
82530: PUSH
82531: LD_VAR 0 4
82535: PPUSH
82536: LD_INT 1
82538: PPUSH
82539: CALL_OW 275
82543: PUSH
82544: LD_VAR 0 5
82548: PUSH
82549: LD_INT 1
82551: ARRAY
82552: GREATEREQUAL
82553: PUSH
82554: LD_VAR 0 4
82558: PPUSH
82559: LD_INT 2
82561: PPUSH
82562: CALL_OW 275
82566: PUSH
82567: LD_VAR 0 5
82571: PUSH
82572: LD_INT 2
82574: ARRAY
82575: GREATEREQUAL
82576: AND
82577: PUSH
82578: LD_VAR 0 4
82582: PPUSH
82583: LD_INT 3
82585: PPUSH
82586: CALL_OW 275
82590: PUSH
82591: LD_VAR 0 5
82595: PUSH
82596: LD_INT 3
82598: ARRAY
82599: GREATEREQUAL
82600: AND
82601: ST_TO_ADDR
// end ;
82602: LD_VAR 0 3
82606: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
82607: LD_INT 0
82609: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
82610: LD_VAR 0 1
82614: PPUSH
82615: LD_VAR 0 2
82619: PPUSH
82620: LD_INT 0
82622: PPUSH
82623: LD_INT 0
82625: PPUSH
82626: LD_INT 1
82628: PPUSH
82629: LD_INT 0
82631: PPUSH
82632: CALL_OW 587
// end ;
82636: LD_VAR 0 3
82640: RET
// export function CenterOnNow ( unit ) ; begin
82641: LD_INT 0
82643: PPUSH
// result := IsInUnit ( unit ) ;
82644: LD_ADDR_VAR 0 2
82648: PUSH
82649: LD_VAR 0 1
82653: PPUSH
82654: CALL_OW 310
82658: ST_TO_ADDR
// if not result then
82659: LD_VAR 0 2
82663: NOT
82664: IFFALSE 82676
// result := unit ;
82666: LD_ADDR_VAR 0 2
82670: PUSH
82671: LD_VAR 0 1
82675: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
82676: LD_VAR 0 1
82680: PPUSH
82681: CALL_OW 87
// end ;
82685: LD_VAR 0 2
82689: RET
// export function ComMoveHex ( unit , hex ) ; begin
82690: LD_INT 0
82692: PPUSH
// if not hex then
82693: LD_VAR 0 2
82697: NOT
82698: IFFALSE 82702
// exit ;
82700: GO 82755
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
82702: LD_VAR 0 2
82706: PUSH
82707: LD_INT 1
82709: ARRAY
82710: PPUSH
82711: LD_VAR 0 2
82715: PUSH
82716: LD_INT 2
82718: ARRAY
82719: PPUSH
82720: CALL_OW 428
82724: IFFALSE 82728
// exit ;
82726: GO 82755
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
82728: LD_VAR 0 1
82732: PPUSH
82733: LD_VAR 0 2
82737: PUSH
82738: LD_INT 1
82740: ARRAY
82741: PPUSH
82742: LD_VAR 0 2
82746: PUSH
82747: LD_INT 2
82749: ARRAY
82750: PPUSH
82751: CALL_OW 111
// end ;
82755: LD_VAR 0 3
82759: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
82760: LD_INT 0
82762: PPUSH
82763: PPUSH
82764: PPUSH
// if not unit or not enemy then
82765: LD_VAR 0 1
82769: NOT
82770: PUSH
82771: LD_VAR 0 2
82775: NOT
82776: OR
82777: IFFALSE 82781
// exit ;
82779: GO 82905
// x := GetX ( enemy ) ;
82781: LD_ADDR_VAR 0 4
82785: PUSH
82786: LD_VAR 0 2
82790: PPUSH
82791: CALL_OW 250
82795: ST_TO_ADDR
// y := GetY ( enemy ) ;
82796: LD_ADDR_VAR 0 5
82800: PUSH
82801: LD_VAR 0 2
82805: PPUSH
82806: CALL_OW 251
82810: ST_TO_ADDR
// if ValidHex ( x , y ) then
82811: LD_VAR 0 4
82815: PPUSH
82816: LD_VAR 0 5
82820: PPUSH
82821: CALL_OW 488
82825: IFFALSE 82905
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
82827: LD_VAR 0 2
82831: PPUSH
82832: CALL_OW 247
82836: PUSH
82837: LD_INT 3
82839: PUSH
82840: LD_INT 2
82842: PUSH
82843: EMPTY
82844: LIST
82845: LIST
82846: IN
82847: PUSH
82848: LD_VAR 0 1
82852: PPUSH
82853: CALL_OW 255
82857: PPUSH
82858: LD_VAR 0 2
82862: PPUSH
82863: CALL_OW 292
82867: OR
82868: IFFALSE 82886
// ComAttackUnit ( unit , enemy ) else
82870: LD_VAR 0 1
82874: PPUSH
82875: LD_VAR 0 2
82879: PPUSH
82880: CALL_OW 115
82884: GO 82905
// ComAgressiveMove ( unit , x , y ) ;
82886: LD_VAR 0 1
82890: PPUSH
82891: LD_VAR 0 4
82895: PPUSH
82896: LD_VAR 0 5
82900: PPUSH
82901: CALL_OW 114
// end ;
82905: LD_VAR 0 3
82909: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
82910: LD_INT 0
82912: PPUSH
82913: PPUSH
82914: PPUSH
// list := AreaToList ( area , 0 ) ;
82915: LD_ADDR_VAR 0 5
82919: PUSH
82920: LD_VAR 0 1
82924: PPUSH
82925: LD_INT 0
82927: PPUSH
82928: CALL_OW 517
82932: ST_TO_ADDR
// if not list then
82933: LD_VAR 0 5
82937: NOT
82938: IFFALSE 82942
// exit ;
82940: GO 83072
// if all then
82942: LD_VAR 0 2
82946: IFFALSE 83034
// begin for i := 1 to list [ 1 ] do
82948: LD_ADDR_VAR 0 4
82952: PUSH
82953: DOUBLE
82954: LD_INT 1
82956: DEC
82957: ST_TO_ADDR
82958: LD_VAR 0 5
82962: PUSH
82963: LD_INT 1
82965: ARRAY
82966: PUSH
82967: FOR_TO
82968: IFFALSE 83030
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
82970: LD_ADDR_VAR 0 3
82974: PUSH
82975: LD_VAR 0 3
82979: PPUSH
82980: LD_VAR 0 3
82984: PUSH
82985: LD_INT 1
82987: PLUS
82988: PPUSH
82989: LD_VAR 0 5
82993: PUSH
82994: LD_INT 1
82996: ARRAY
82997: PUSH
82998: LD_VAR 0 4
83002: ARRAY
83003: PUSH
83004: LD_VAR 0 5
83008: PUSH
83009: LD_INT 2
83011: ARRAY
83012: PUSH
83013: LD_VAR 0 4
83017: ARRAY
83018: PUSH
83019: EMPTY
83020: LIST
83021: LIST
83022: PPUSH
83023: CALL_OW 1
83027: ST_TO_ADDR
83028: GO 82967
83030: POP
83031: POP
// exit ;
83032: GO 83072
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
83034: LD_ADDR_VAR 0 3
83038: PUSH
83039: LD_VAR 0 5
83043: PUSH
83044: LD_INT 1
83046: ARRAY
83047: PUSH
83048: LD_INT 1
83050: ARRAY
83051: PUSH
83052: LD_VAR 0 5
83056: PUSH
83057: LD_INT 2
83059: ARRAY
83060: PUSH
83061: LD_INT 1
83063: ARRAY
83064: PUSH
83065: EMPTY
83066: LIST
83067: LIST
83068: PUSH
83069: EMPTY
83070: LIST
83071: ST_TO_ADDR
// end ;
83072: LD_VAR 0 3
83076: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
83077: LD_INT 0
83079: PPUSH
83080: PPUSH
// list := AreaToList ( area , 0 ) ;
83081: LD_ADDR_VAR 0 4
83085: PUSH
83086: LD_VAR 0 1
83090: PPUSH
83091: LD_INT 0
83093: PPUSH
83094: CALL_OW 517
83098: ST_TO_ADDR
// if not list then
83099: LD_VAR 0 4
83103: NOT
83104: IFFALSE 83108
// exit ;
83106: GO 83149
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
83108: LD_ADDR_VAR 0 3
83112: PUSH
83113: LD_VAR 0 4
83117: PUSH
83118: LD_INT 1
83120: ARRAY
83121: PUSH
83122: LD_INT 1
83124: ARRAY
83125: PUSH
83126: LD_VAR 0 4
83130: PUSH
83131: LD_INT 2
83133: ARRAY
83134: PUSH
83135: LD_INT 1
83137: ARRAY
83138: PUSH
83139: LD_VAR 0 2
83143: PUSH
83144: EMPTY
83145: LIST
83146: LIST
83147: LIST
83148: ST_TO_ADDR
// end ;
83149: LD_VAR 0 3
83153: RET
// export function First ( array ) ; begin
83154: LD_INT 0
83156: PPUSH
// if not array then
83157: LD_VAR 0 1
83161: NOT
83162: IFFALSE 83166
// exit ;
83164: GO 83180
// result := array [ 1 ] ;
83166: LD_ADDR_VAR 0 2
83170: PUSH
83171: LD_VAR 0 1
83175: PUSH
83176: LD_INT 1
83178: ARRAY
83179: ST_TO_ADDR
// end ;
83180: LD_VAR 0 2
83184: RET
// export function Last ( array ) ; begin
83185: LD_INT 0
83187: PPUSH
// if not array then
83188: LD_VAR 0 1
83192: NOT
83193: IFFALSE 83197
// exit ;
83195: GO 83213
// result := array [ array ] ;
83197: LD_ADDR_VAR 0 2
83201: PUSH
83202: LD_VAR 0 1
83206: PUSH
83207: LD_VAR 0 1
83211: ARRAY
83212: ST_TO_ADDR
// end ;
83213: LD_VAR 0 2
83217: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
83218: LD_INT 0
83220: PPUSH
83221: PPUSH
// result := [ ] ;
83222: LD_ADDR_VAR 0 5
83226: PUSH
83227: EMPTY
83228: ST_TO_ADDR
// if not array then
83229: LD_VAR 0 1
83233: NOT
83234: IFFALSE 83238
// exit ;
83236: GO 83350
// for i := 1 to array do
83238: LD_ADDR_VAR 0 6
83242: PUSH
83243: DOUBLE
83244: LD_INT 1
83246: DEC
83247: ST_TO_ADDR
83248: LD_VAR 0 1
83252: PUSH
83253: FOR_TO
83254: IFFALSE 83348
// if array [ i ] [ index ] = value then
83256: LD_VAR 0 1
83260: PUSH
83261: LD_VAR 0 6
83265: ARRAY
83266: PUSH
83267: LD_VAR 0 2
83271: ARRAY
83272: PUSH
83273: LD_VAR 0 3
83277: EQUAL
83278: IFFALSE 83346
// begin if indexColumn then
83280: LD_VAR 0 4
83284: IFFALSE 83320
// result := Join ( result , array [ i ] [ indexColumn ] ) else
83286: LD_ADDR_VAR 0 5
83290: PUSH
83291: LD_VAR 0 5
83295: PPUSH
83296: LD_VAR 0 1
83300: PUSH
83301: LD_VAR 0 6
83305: ARRAY
83306: PUSH
83307: LD_VAR 0 4
83311: ARRAY
83312: PPUSH
83313: CALL 78532 0 2
83317: ST_TO_ADDR
83318: GO 83346
// result := Join ( result , array [ i ] ) ;
83320: LD_ADDR_VAR 0 5
83324: PUSH
83325: LD_VAR 0 5
83329: PPUSH
83330: LD_VAR 0 1
83334: PUSH
83335: LD_VAR 0 6
83339: ARRAY
83340: PPUSH
83341: CALL 78532 0 2
83345: ST_TO_ADDR
// end ;
83346: GO 83253
83348: POP
83349: POP
// end ;
83350: LD_VAR 0 5
83354: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
83355: LD_INT 0
83357: PPUSH
// if not vehicles or not parkingPoint then
83358: LD_VAR 0 1
83362: NOT
83363: PUSH
83364: LD_VAR 0 2
83368: NOT
83369: OR
83370: IFFALSE 83374
// exit ;
83372: GO 83472
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
83374: LD_ADDR_VAR 0 1
83378: PUSH
83379: LD_VAR 0 1
83383: PPUSH
83384: LD_INT 50
83386: PUSH
83387: EMPTY
83388: LIST
83389: PUSH
83390: LD_INT 3
83392: PUSH
83393: LD_INT 92
83395: PUSH
83396: LD_VAR 0 2
83400: PUSH
83401: LD_INT 1
83403: ARRAY
83404: PUSH
83405: LD_VAR 0 2
83409: PUSH
83410: LD_INT 2
83412: ARRAY
83413: PUSH
83414: LD_INT 8
83416: PUSH
83417: EMPTY
83418: LIST
83419: LIST
83420: LIST
83421: LIST
83422: PUSH
83423: EMPTY
83424: LIST
83425: LIST
83426: PUSH
83427: EMPTY
83428: LIST
83429: LIST
83430: PPUSH
83431: CALL_OW 72
83435: ST_TO_ADDR
// if not vehicles then
83436: LD_VAR 0 1
83440: NOT
83441: IFFALSE 83445
// exit ;
83443: GO 83472
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
83445: LD_VAR 0 1
83449: PPUSH
83450: LD_VAR 0 2
83454: PUSH
83455: LD_INT 1
83457: ARRAY
83458: PPUSH
83459: LD_VAR 0 2
83463: PUSH
83464: LD_INT 2
83466: ARRAY
83467: PPUSH
83468: CALL_OW 111
// end ;
83472: LD_VAR 0 3
83476: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
83477: LD_INT 0
83479: PPUSH
83480: PPUSH
83481: PPUSH
// if not side or not area then
83482: LD_VAR 0 1
83486: NOT
83487: PUSH
83488: LD_VAR 0 2
83492: NOT
83493: OR
83494: IFFALSE 83498
// exit ;
83496: GO 83617
// tmp := AreaToList ( area , 0 ) ;
83498: LD_ADDR_VAR 0 5
83502: PUSH
83503: LD_VAR 0 2
83507: PPUSH
83508: LD_INT 0
83510: PPUSH
83511: CALL_OW 517
83515: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
83516: LD_ADDR_VAR 0 4
83520: PUSH
83521: DOUBLE
83522: LD_INT 1
83524: DEC
83525: ST_TO_ADDR
83526: LD_VAR 0 5
83530: PUSH
83531: LD_INT 1
83533: ARRAY
83534: PUSH
83535: FOR_TO
83536: IFFALSE 83615
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
83538: LD_VAR 0 5
83542: PUSH
83543: LD_INT 1
83545: ARRAY
83546: PUSH
83547: LD_VAR 0 4
83551: ARRAY
83552: PPUSH
83553: LD_VAR 0 5
83557: PUSH
83558: LD_INT 2
83560: ARRAY
83561: PUSH
83562: LD_VAR 0 4
83566: ARRAY
83567: PPUSH
83568: CALL_OW 351
83572: IFFALSE 83613
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
83574: LD_VAR 0 5
83578: PUSH
83579: LD_INT 1
83581: ARRAY
83582: PUSH
83583: LD_VAR 0 4
83587: ARRAY
83588: PPUSH
83589: LD_VAR 0 5
83593: PUSH
83594: LD_INT 2
83596: ARRAY
83597: PUSH
83598: LD_VAR 0 4
83602: ARRAY
83603: PPUSH
83604: LD_VAR 0 1
83608: PPUSH
83609: CALL_OW 244
// end ;
83613: GO 83535
83615: POP
83616: POP
// end ; end_of_file
83617: LD_VAR 0 3
83621: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
83622: LD_VAR 0 1
83626: PUSH
83627: LD_INT 200
83629: DOUBLE
83630: GREATEREQUAL
83631: IFFALSE 83639
83633: LD_INT 299
83635: DOUBLE
83636: LESSEQUAL
83637: IFTRUE 83641
83639: GO 83673
83641: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
83642: LD_VAR 0 1
83646: PPUSH
83647: LD_VAR 0 2
83651: PPUSH
83652: LD_VAR 0 3
83656: PPUSH
83657: LD_VAR 0 4
83661: PPUSH
83662: LD_VAR 0 5
83666: PPUSH
83667: CALL 36038 0 5
83671: GO 83750
83673: LD_INT 300
83675: DOUBLE
83676: GREATEREQUAL
83677: IFFALSE 83685
83679: LD_INT 399
83681: DOUBLE
83682: LESSEQUAL
83683: IFTRUE 83687
83685: GO 83749
83687: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
83688: LD_VAR 0 1
83692: PPUSH
83693: LD_VAR 0 2
83697: PPUSH
83698: LD_VAR 0 3
83702: PPUSH
83703: LD_VAR 0 4
83707: PPUSH
83708: LD_VAR 0 5
83712: PPUSH
83713: LD_VAR 0 6
83717: PPUSH
83718: LD_VAR 0 7
83722: PPUSH
83723: LD_VAR 0 8
83727: PPUSH
83728: LD_VAR 0 9
83732: PPUSH
83733: LD_VAR 0 10
83737: PPUSH
83738: LD_VAR 0 11
83742: PPUSH
83743: CALL 31946 0 11
83747: GO 83750
83749: POP
// end ;
83750: PPOPN 11
83752: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
83753: LD_VAR 0 1
83757: PPUSH
83758: LD_VAR 0 2
83762: PPUSH
83763: LD_VAR 0 3
83767: PPUSH
83768: LD_VAR 0 4
83772: PPUSH
83773: LD_VAR 0 5
83777: PPUSH
83778: CALL 35423 0 5
// end ; end_of_file
83782: PPOPN 5
83784: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
83785: LD_VAR 0 1
83789: PPUSH
83790: LD_VAR 0 2
83794: PPUSH
83795: LD_VAR 0 3
83799: PPUSH
83800: LD_VAR 0 4
83804: PPUSH
83805: LD_VAR 0 5
83809: PPUSH
83810: LD_VAR 0 6
83814: PPUSH
83815: CALL 19598 0 6
// end ;
83819: PPOPN 6
83821: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
83822: LD_INT 0
83824: PPUSH
// begin if not units then
83825: LD_VAR 0 1
83829: NOT
83830: IFFALSE 83834
// exit ;
83832: GO 83834
// end ;
83834: PPOPN 7
83836: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
83837: CALL 19485 0 0
// end ;
83841: PPOPN 1
83843: END
