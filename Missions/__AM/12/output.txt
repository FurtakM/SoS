// export JMM , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi ; export others11 ; export amCargo1 , amCargo2 ; export amCargo3 , amCargo4 , amCargo5 ; export amCargo6 , amCargo7 ; export Powell ; export Davidov ; export Kurt ; export KurtVeh ; export kurtStatus ; export secondPass ; export vehicleTeleported , tpCounter ; export warWithLegion ; export fakeInfo ; export askSiberite ; export teleportExplored ; export RuScientists , sciCounter ; export RuSolMinLevel , RuSolMaxLevel ; export ruDestroyedBuildings ; export russianTanks , russianTimeLapsers ; export ruAI ; export ruEscape ; export attackTactic ; export arabianMines ; export cratesSpawned ; export mission_prefix ; export eventVar1 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// SetBName ( rueastdepot , ryutin ) ;
   8: LD_INT 4
  10: PPUSH
  11: LD_STRING ryutin
  13: PPUSH
  14: CALL_OW 500
// SetBName ( ruwestdepot , yegorov ) ;
  18: LD_INT 6
  20: PPUSH
  21: LD_STRING yegorov
  23: PPUSH
  24: CALL_OW 500
// RuScientists = [ ] ;
  28: LD_ADDR_EXP 34
  32: PUSH
  33: EMPTY
  34: ST_TO_ADDR
// sciCounter = 0 ;
  35: LD_ADDR_EXP 35
  39: PUSH
  40: LD_INT 0
  42: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  43: LD_ADDR_EXP 38
  47: PUSH
  48: EMPTY
  49: ST_TO_ADDR
// russianTanks = [ ] ;
  50: LD_ADDR_EXP 39
  54: PUSH
  55: EMPTY
  56: ST_TO_ADDR
// russianTimeLapsers = [ ] ;
  57: LD_ADDR_EXP 40
  61: PUSH
  62: EMPTY
  63: ST_TO_ADDR
// arabianMines = [ ] ;
  64: LD_ADDR_EXP 44
  68: PUSH
  69: EMPTY
  70: ST_TO_ADDR
// kurtStatus = LoadVariable ( 06_KurtStatus_1 , 0 ) ;
  71: LD_ADDR_EXP 26
  75: PUSH
  76: LD_STRING 06_KurtStatus_1
  78: PPUSH
  79: LD_INT 0
  81: PPUSH
  82: CALL_OW 30
  86: ST_TO_ADDR
// secondPass = 0 ;
  87: LD_ADDR_EXP 27
  91: PUSH
  92: LD_INT 0
  94: ST_TO_ADDR
// teleportExplored = 0 ;
  95: LD_ADDR_EXP 33
  99: PUSH
 100: LD_INT 0
 102: ST_TO_ADDR
// attackTactic = 0 ;
 103: LD_ADDR_EXP 43
 107: PUSH
 108: LD_INT 0
 110: ST_TO_ADDR
// tpCounter = 0 ;
 111: LD_ADDR_EXP 29
 115: PUSH
 116: LD_INT 0
 118: ST_TO_ADDR
// askSiberite = 0 ;
 119: LD_ADDR_EXP 32
 123: PUSH
 124: LD_INT 0
 126: ST_TO_ADDR
// warWithLegion = 0 ;
 127: LD_ADDR_EXP 30
 131: PUSH
 132: LD_INT 0
 134: ST_TO_ADDR
// fakeInfo = 0 ;
 135: LD_ADDR_EXP 31
 139: PUSH
 140: LD_INT 0
 142: ST_TO_ADDR
// cratesSpawned = 0 ;
 143: LD_ADDR_EXP 45
 147: PUSH
 148: LD_INT 0
 150: ST_TO_ADDR
// ruAI = 0 ;
 151: LD_ADDR_EXP 41
 155: PUSH
 156: LD_INT 0
 158: ST_TO_ADDR
// ruEscape = 0 ;
 159: LD_ADDR_EXP 42
 163: PUSH
 164: LD_INT 0
 166: ST_TO_ADDR
// eventVar1 = 0 ;
 167: LD_ADDR_EXP 47
 171: PUSH
 172: LD_INT 0
 174: ST_TO_ADDR
// mission_prefix = 12_ ;
 175: LD_ADDR_EXP 46
 179: PUSH
 180: LD_STRING 12_
 182: ST_TO_ADDR
// debugMode = 0 ;
 183: LD_ADDR_EXP 48
 187: PUSH
 188: LD_INT 0
 190: ST_TO_ADDR
// PrepareNature ;
 191: CALL 15929 0 0
// PrepareDifficulty ;
 195: CALL 12343 0 0
// PrepareVehicles ;
 199: CALL 1658 0 0
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 203: LD_INT 4
 205: PPUSH
 206: LD_INT 0
 208: PPUSH
 209: LD_INT 1
 211: PPUSH
 212: LD_INT 0
 214: PPUSH
 215: CALL 1232 0 4
// PrepareAmericanHeroes ;
 219: CALL 557 0 0
// PrepareRussianCommander ;
 223: CALL 3034 0 0
// PrepareWestBase ;
 227: CALL 3546 0 0
// PrepareEastBase ;
 231: CALL 3106 0 0
// PrepareOtherRussians ;
 235: CALL 3658 0 0
// end ;
 239: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 240: LD_EXP 48
 244: PUSH
 245: LD_INT 1
 247: EQUAL
 248: IFFALSE 554
 250: GO 252
 252: DISABLE
 253: LD_INT 0
 255: PPUSH
// begin enable ;
 256: ENABLE
// fogoff ( true ) ;
 257: LD_INT 1
 259: PPUSH
 260: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 264: LD_ADDR_VAR 0 1
 268: PUSH
 269: LD_INT 22
 271: PUSH
 272: LD_INT 1
 274: PUSH
 275: EMPTY
 276: LIST
 277: LIST
 278: PUSH
 279: LD_INT 21
 281: PUSH
 282: LD_INT 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: PPUSH
 293: CALL_OW 69
 297: PUSH
 298: FOR_IN
 299: IFFALSE 315
// SetLives ( i , 1000 ) ;
 301: LD_VAR 0 1
 305: PPUSH
 306: LD_INT 1000
 308: PPUSH
 309: CALL_OW 234
 313: GO 298
 315: POP
 316: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 317: LD_ADDR_VAR 0 1
 321: PUSH
 322: LD_INT 22
 324: PUSH
 325: LD_INT 1
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 30
 337: PUSH
 338: LD_INT 0
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PUSH
 345: LD_INT 30
 347: PUSH
 348: LD_INT 1
 350: PUSH
 351: EMPTY
 352: LIST
 353: LIST
 354: PUSH
 355: EMPTY
 356: LIST
 357: LIST
 358: LIST
 359: PUSH
 360: EMPTY
 361: LIST
 362: LIST
 363: PPUSH
 364: CALL_OW 69
 368: PUSH
 369: FOR_IN
 370: IFFALSE 394
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 372: LD_VAR 0 1
 376: PPUSH
 377: CALL_OW 274
 381: PPUSH
 382: LD_INT 1
 384: PPUSH
 385: LD_INT 9999
 387: PPUSH
 388: CALL_OW 277
 392: GO 369
 394: POP
 395: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 396: LD_ADDR_VAR 0 1
 400: PUSH
 401: LD_INT 22
 403: PUSH
 404: LD_INT 1
 406: PUSH
 407: EMPTY
 408: LIST
 409: LIST
 410: PUSH
 411: LD_INT 2
 413: PUSH
 414: LD_INT 30
 416: PUSH
 417: LD_INT 0
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: PUSH
 424: LD_INT 30
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: PUSH
 439: EMPTY
 440: LIST
 441: LIST
 442: PPUSH
 443: CALL_OW 69
 447: PUSH
 448: FOR_IN
 449: IFFALSE 473
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 451: LD_VAR 0 1
 455: PPUSH
 456: CALL_OW 274
 460: PPUSH
 461: LD_INT 2
 463: PPUSH
 464: LD_INT 9999
 466: PPUSH
 467: CALL_OW 277
 471: GO 448
 473: POP
 474: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 475: LD_ADDR_VAR 0 1
 479: PUSH
 480: LD_INT 22
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: PUSH
 490: LD_INT 2
 492: PUSH
 493: LD_INT 30
 495: PUSH
 496: LD_INT 0
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PUSH
 503: LD_INT 30
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: LIST
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PPUSH
 522: CALL_OW 69
 526: PUSH
 527: FOR_IN
 528: IFFALSE 552
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 530: LD_VAR 0 1
 534: PPUSH
 535: CALL_OW 274
 539: PPUSH
 540: LD_INT 3
 542: PPUSH
 543: LD_INT 9999
 545: PPUSH
 546: CALL_OW 277
 550: GO 527
 552: POP
 553: POP
// end ; end_of_file
 554: PPOPN 1
 556: END
// export function PrepareAmericanHeroes ; var tmp , i ; begin
 557: LD_INT 0
 559: PPUSH
 560: PPUSH
 561: PPUSH
// uc_side = 1 ;
 562: LD_ADDR_OWVAR 20
 566: PUSH
 567: LD_INT 1
 569: ST_TO_ADDR
// others11 = CreateCharacterSet ( 11c_others ) union CreateCharacterSet ( 11_others ) ;
 570: LD_ADDR_EXP 14
 574: PUSH
 575: LD_STRING 11c_others
 577: PPUSH
 578: CALL_OW 31
 582: PUSH
 583: LD_STRING 11_others
 585: PPUSH
 586: CALL_OW 31
 590: UNION
 591: ST_TO_ADDR
// JMM = PrepareUnit ( 11_JMM , true ) ;
 592: LD_ADDR_EXP 1
 596: PUSH
 597: LD_STRING 11_JMM
 599: PPUSH
 600: LD_INT 1
 602: PPUSH
 603: CALL 12060 0 2
 607: ST_TO_ADDR
// SetClass ( JMM , 1 ) ;
 608: LD_EXP 1
 612: PPUSH
 613: LD_INT 1
 615: PPUSH
 616: CALL_OW 336
// PlaceHumanInUnit ( JMM , FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) [ 1 ] ) ;
 620: LD_EXP 1
 624: PPUSH
 625: LD_INT 22
 627: PUSH
 628: LD_INT 1
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PUSH
 635: LD_INT 21
 637: PUSH
 638: LD_INT 2
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: LD_INT 58
 647: PUSH
 648: EMPTY
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: LIST
 655: PPUSH
 656: CALL_OW 69
 660: PUSH
 661: LD_INT 1
 663: ARRAY
 664: PPUSH
 665: CALL_OW 52
// if TestCharacters ( 11_Lisa ) = true then
 669: LD_STRING 11_Lisa
 671: PPUSH
 672: CALL_OW 28
 676: PUSH
 677: LD_INT 1
 679: EQUAL
 680: IFFALSE 727
// begin Lisa = PrepareUnit ( 11_Lisa , true ) ;
 682: LD_ADDR_EXP 2
 686: PUSH
 687: LD_STRING 11_Lisa
 689: PPUSH
 690: LD_INT 1
 692: PPUSH
 693: CALL 12060 0 2
 697: ST_TO_ADDR
// SetClass ( Lisa , 1 ) ;
 698: LD_EXP 2
 702: PPUSH
 703: LD_INT 1
 705: PPUSH
 706: CALL_OW 336
// PlaceUnitArea ( Lisa , PlayerSpawn , false ) ;
 710: LD_EXP 2
 714: PPUSH
 715: LD_INT 4
 717: PPUSH
 718: LD_INT 0
 720: PPUSH
 721: CALL_OW 49
// end else
 725: GO 743
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 727: LD_INT 4
 729: PPUSH
 730: LD_INT 0
 732: PPUSH
 733: LD_INT 1
 735: PPUSH
 736: LD_INT 0
 738: PPUSH
 739: CALL 1232 0 4
// end ; if TestCharacters ( 11_Donaldson ) = true then
 743: LD_STRING 11_Donaldson
 745: PPUSH
 746: CALL_OW 28
 750: PUSH
 751: LD_INT 1
 753: EQUAL
 754: IFFALSE 801
// begin Donaldson = PrepareUnit ( 11_Donaldson , true ) ;
 756: LD_ADDR_EXP 3
 760: PUSH
 761: LD_STRING 11_Donaldson
 763: PPUSH
 764: LD_INT 1
 766: PPUSH
 767: CALL 12060 0 2
 771: ST_TO_ADDR
// SetClass ( Donaldson , 1 ) ;
 772: LD_EXP 3
 776: PPUSH
 777: LD_INT 1
 779: PPUSH
 780: CALL_OW 336
// PlaceUnitArea ( Donaldson , PlayerSpawn , false ) ;
 784: LD_EXP 3
 788: PPUSH
 789: LD_INT 4
 791: PPUSH
 792: LD_INT 0
 794: PPUSH
 795: CALL_OW 49
// end else
 799: GO 817
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 801: LD_INT 4
 803: PPUSH
 804: LD_INT 0
 806: PPUSH
 807: LD_INT 1
 809: PPUSH
 810: LD_INT 0
 812: PPUSH
 813: CALL 1232 0 4
// end ; if TestCharacters ( 11_Cyrus ) = true then
 817: LD_STRING 11_Cyrus
 819: PPUSH
 820: CALL_OW 28
 824: PUSH
 825: LD_INT 1
 827: EQUAL
 828: IFFALSE 875
// begin Cyrus = PrepareUnit ( 11_Cyrus , true ) ;
 830: LD_ADDR_EXP 5
 834: PUSH
 835: LD_STRING 11_Cyrus
 837: PPUSH
 838: LD_INT 1
 840: PPUSH
 841: CALL 12060 0 2
 845: ST_TO_ADDR
// SetClass ( Cyrus , 1 ) ;
 846: LD_EXP 5
 850: PPUSH
 851: LD_INT 1
 853: PPUSH
 854: CALL_OW 336
// PlaceUnitArea ( Cyrus , PlayerSpawn , false ) ;
 858: LD_EXP 5
 862: PPUSH
 863: LD_INT 4
 865: PPUSH
 866: LD_INT 0
 868: PPUSH
 869: CALL_OW 49
// end else
 873: GO 891
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 875: LD_INT 4
 877: PPUSH
 878: LD_INT 0
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 0
 886: PPUSH
 887: CALL 1232 0 4
// end ; if TestCharacters ( 11_Denis ) = true then
 891: LD_STRING 11_Denis
 893: PPUSH
 894: CALL_OW 28
 898: PUSH
 899: LD_INT 1
 901: EQUAL
 902: IFFALSE 949
// begin Denis = PrepareUnit ( 11_Denis , true ) ;
 904: LD_ADDR_EXP 6
 908: PUSH
 909: LD_STRING 11_Denis
 911: PPUSH
 912: LD_INT 1
 914: PPUSH
 915: CALL 12060 0 2
 919: ST_TO_ADDR
// SetClass ( Denis , 4 ) ;
 920: LD_EXP 6
 924: PPUSH
 925: LD_INT 4
 927: PPUSH
 928: CALL_OW 336
// PlaceUnitArea ( Denis , PlayerSpawn , false ) ;
 932: LD_EXP 6
 936: PPUSH
 937: LD_INT 4
 939: PPUSH
 940: LD_INT 0
 942: PPUSH
 943: CALL_OW 49
// end else
 947: GO 965
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
 949: LD_INT 4
 951: PPUSH
 952: LD_INT 0
 954: PPUSH
 955: LD_INT 1
 957: PPUSH
 958: LD_INT 0
 960: PPUSH
 961: CALL 1232 0 4
// end ; if TestCharacters ( 11_Frank ) = true then
 965: LD_STRING 11_Frank
 967: PPUSH
 968: CALL_OW 28
 972: PUSH
 973: LD_INT 1
 975: EQUAL
 976: IFFALSE 1023
// begin Frank = PrepareUnit ( 11_Frank , true ) ;
 978: LD_ADDR_EXP 12
 982: PUSH
 983: LD_STRING 11_Frank
 985: PPUSH
 986: LD_INT 1
 988: PPUSH
 989: CALL 12060 0 2
 993: ST_TO_ADDR
// SetClass ( Frank , 1 ) ;
 994: LD_EXP 12
 998: PPUSH
 999: LD_INT 1
1001: PPUSH
1002: CALL_OW 336
// PlaceUnitArea ( Frank , PlayerSpawn , false ) ;
1006: LD_EXP 12
1010: PPUSH
1011: LD_INT 4
1013: PPUSH
1014: LD_INT 0
1016: PPUSH
1017: CALL_OW 49
// end else
1021: GO 1039
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1023: LD_INT 4
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: LD_INT 0
1034: PPUSH
1035: CALL 1232 0 4
// end ; if TestCharacters ( 11_Cornell ) = true then
1039: LD_STRING 11_Cornell
1041: PPUSH
1042: CALL_OW 28
1046: PUSH
1047: LD_INT 1
1049: EQUAL
1050: IFFALSE 1097
// begin Cornel = PrepareUnit ( 11_Cornell , true ) ;
1052: LD_ADDR_EXP 10
1056: PUSH
1057: LD_STRING 11_Cornell
1059: PPUSH
1060: LD_INT 1
1062: PPUSH
1063: CALL 12060 0 2
1067: ST_TO_ADDR
// SetClass ( Cornel , 1 ) ;
1068: LD_EXP 10
1072: PPUSH
1073: LD_INT 1
1075: PPUSH
1076: CALL_OW 336
// PlaceUnitArea ( Cornel , PlayerSpawn , false ) ;
1080: LD_EXP 10
1084: PPUSH
1085: LD_INT 4
1087: PPUSH
1088: LD_INT 0
1090: PPUSH
1091: CALL_OW 49
// end else
1095: GO 1113
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1097: LD_INT 4
1099: PPUSH
1100: LD_INT 0
1102: PPUSH
1103: LD_INT 1
1105: PPUSH
1106: LD_INT 0
1108: PPUSH
1109: CALL 1232 0 4
// end ; tmp := UnitFilter ( others11 , [ f_sex , 1 ] ) ;
1113: LD_ADDR_VAR 0 2
1117: PUSH
1118: LD_EXP 14
1122: PPUSH
1123: LD_INT 26
1125: PUSH
1126: LD_INT 1
1128: PUSH
1129: EMPTY
1130: LIST
1131: LIST
1132: PPUSH
1133: CALL_OW 72
1137: ST_TO_ADDR
// if not tmp then
1138: LD_VAR 0 2
1142: NOT
1143: IFFALSE 1172
// begin PrepareSoldier ( sex_male , 8 ) ;
1145: LD_INT 1
1147: PPUSH
1148: LD_INT 8
1150: PPUSH
1151: CALL_OW 381
// PlaceUnitArea ( CreateHuman , PlayerSpawn , false ) ;
1155: CALL_OW 44
1159: PPUSH
1160: LD_INT 4
1162: PPUSH
1163: LD_INT 0
1165: PPUSH
1166: CALL_OW 49
// end else
1170: GO 1211
// begin PlaceUnitArea ( tmp [ 1 ] , PlayerSpawn , false ) ;
1172: LD_VAR 0 2
1176: PUSH
1177: LD_INT 1
1179: ARRAY
1180: PPUSH
1181: LD_INT 4
1183: PPUSH
1184: LD_INT 0
1186: PPUSH
1187: CALL_OW 49
// others11 := others11 diff tmp [ 1 ] ;
1191: LD_ADDR_EXP 14
1195: PUSH
1196: LD_EXP 14
1200: PUSH
1201: LD_VAR 0 2
1205: PUSH
1206: LD_INT 1
1208: ARRAY
1209: DIFF
1210: ST_TO_ADDR
// end ; Powell = PrepareUnit ( Powell , false ) ;
1211: LD_ADDR_EXP 22
1215: PUSH
1216: LD_STRING Powell
1218: PPUSH
1219: LD_INT 0
1221: PPUSH
1222: CALL 12060 0 2
1226: ST_TO_ADDR
// end ;
1227: LD_VAR 0 1
1231: RET
// export function PrepareAmericansRandom ( area , veh , spawnMode , mech ) ; var i , un , tmp , mecha ; begin
1232: LD_INT 0
1234: PPUSH
1235: PPUSH
1236: PPUSH
1237: PPUSH
1238: PPUSH
// if mech = 1 then
1239: LD_VAR 0 4
1243: PUSH
1244: LD_INT 1
1246: EQUAL
1247: IFFALSE 1484
// begin if others11 > 0 then
1249: LD_EXP 14
1253: PUSH
1254: LD_INT 0
1256: GREATER
1257: IFFALSE 1424
// begin for i := 1 to others11 - 1 do
1259: LD_ADDR_VAR 0 6
1263: PUSH
1264: DOUBLE
1265: LD_INT 1
1267: DEC
1268: ST_TO_ADDR
1269: LD_EXP 14
1273: PUSH
1274: LD_INT 1
1276: MINUS
1277: PUSH
1278: FOR_TO
1279: IFFALSE 1361
// begin if GetSkill ( others11 [ i ] , 3 ) < GetSkill ( others11 [ i + 1 ] , 3 ) then
1281: LD_EXP 14
1285: PUSH
1286: LD_VAR 0 6
1290: ARRAY
1291: PPUSH
1292: LD_INT 3
1294: PPUSH
1295: CALL_OW 259
1299: PUSH
1300: LD_EXP 14
1304: PUSH
1305: LD_VAR 0 6
1309: PUSH
1310: LD_INT 1
1312: PLUS
1313: ARRAY
1314: PPUSH
1315: LD_INT 3
1317: PPUSH
1318: CALL_OW 259
1322: LESS
1323: IFFALSE 1359
// begin mecha = others11 [ i + 1 ] ;
1325: LD_ADDR_VAR 0 9
1329: PUSH
1330: LD_EXP 14
1334: PUSH
1335: LD_VAR 0 6
1339: PUSH
1340: LD_INT 1
1342: PLUS
1343: ARRAY
1344: ST_TO_ADDR
// SetClass ( mecha , 3 ) ;
1345: LD_VAR 0 9
1349: PPUSH
1350: LD_INT 3
1352: PPUSH
1353: CALL_OW 336
// break ;
1357: GO 1361
// end ; end ;
1359: GO 1278
1361: POP
1362: POP
// if spawnMode = 1 then
1363: LD_VAR 0 3
1367: PUSH
1368: LD_INT 1
1370: EQUAL
1371: IFFALSE 1392
// PlaceUnitArea ( mecha , area , false ) else
1373: LD_VAR 0 9
1377: PPUSH
1378: LD_VAR 0 1
1382: PPUSH
1383: LD_INT 0
1385: PPUSH
1386: CALL_OW 49
1390: GO 1406
// PlaceHumanInUnit ( mecha , veh ) ;
1392: LD_VAR 0 9
1396: PPUSH
1397: LD_VAR 0 2
1401: PPUSH
1402: CALL_OW 52
// others11 = others11 diff mecha ;
1406: LD_ADDR_EXP 14
1410: PUSH
1411: LD_EXP 14
1415: PUSH
1416: LD_VAR 0 9
1420: DIFF
1421: ST_TO_ADDR
// end else
1422: GO 1482
// begin hc_name =  ;
1424: LD_ADDR_OWVAR 26
1428: PUSH
1429: LD_STRING 
1431: ST_TO_ADDR
// hc_gallery =  ;
1432: LD_ADDR_OWVAR 33
1436: PUSH
1437: LD_STRING 
1439: ST_TO_ADDR
// PrepareMechanic ( false , rand ( 7 , 9 ) ) ;
1440: LD_INT 0
1442: PPUSH
1443: LD_INT 7
1445: PPUSH
1446: LD_INT 9
1448: PPUSH
1449: CALL_OW 12
1453: PPUSH
1454: CALL_OW 383
// un = CreateHuman ;
1458: LD_ADDR_VAR 0 7
1462: PUSH
1463: CALL_OW 44
1467: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1468: LD_VAR 0 7
1472: PPUSH
1473: LD_VAR 0 2
1477: PPUSH
1478: CALL_OW 52
// end ; end else
1482: GO 1653
// begin if others11 > 0 then
1484: LD_EXP 14
1488: PUSH
1489: LD_INT 0
1491: GREATER
1492: IFFALSE 1565
// begin if spawnMode = 1 then
1494: LD_VAR 0 3
1498: PUSH
1499: LD_INT 1
1501: EQUAL
1502: IFFALSE 1527
// PlaceUnitArea ( others11 [ 1 ] , area , false ) else
1504: LD_EXP 14
1508: PUSH
1509: LD_INT 1
1511: ARRAY
1512: PPUSH
1513: LD_VAR 0 1
1517: PPUSH
1518: LD_INT 0
1520: PPUSH
1521: CALL_OW 49
1525: GO 1545
// PlaceHumanInUnit ( others11 [ 1 ] , veh ) ;
1527: LD_EXP 14
1531: PUSH
1532: LD_INT 1
1534: ARRAY
1535: PPUSH
1536: LD_VAR 0 2
1540: PPUSH
1541: CALL_OW 52
// others11 = Delete ( others11 , 1 ) ;
1545: LD_ADDR_EXP 14
1549: PUSH
1550: LD_EXP 14
1554: PPUSH
1555: LD_INT 1
1557: PPUSH
1558: CALL_OW 3
1562: ST_TO_ADDR
// end else
1563: GO 1653
// begin hc_name =  ;
1565: LD_ADDR_OWVAR 26
1569: PUSH
1570: LD_STRING 
1572: ST_TO_ADDR
// hc_gallery =  ;
1573: LD_ADDR_OWVAR 33
1577: PUSH
1578: LD_STRING 
1580: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 2 , 3 , 4 ] [ Rand ( 1 , 4 ) ] , rand ( 7 , 9 ) ) ;
1581: LD_INT 0
1583: PPUSH
1584: LD_INT 1
1586: PUSH
1587: LD_INT 2
1589: PUSH
1590: LD_INT 3
1592: PUSH
1593: LD_INT 4
1595: PUSH
1596: EMPTY
1597: LIST
1598: LIST
1599: LIST
1600: LIST
1601: PUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_INT 4
1607: PPUSH
1608: CALL_OW 12
1612: ARRAY
1613: PPUSH
1614: LD_INT 7
1616: PPUSH
1617: LD_INT 9
1619: PPUSH
1620: CALL_OW 12
1624: PPUSH
1625: CALL_OW 380
// un = CreateHuman ;
1629: LD_ADDR_VAR 0 7
1633: PUSH
1634: CALL_OW 44
1638: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
1639: LD_VAR 0 7
1643: PPUSH
1644: LD_VAR 0 2
1648: PPUSH
1649: CALL_OW 52
// end ; end ; end ;
1653: LD_VAR 0 5
1657: RET
// export function PrepareVehicles ; var veh ; begin
1658: LD_INT 0
1660: PPUSH
1661: PPUSH
// uc_side = 1 ;
1662: LD_ADDR_OWVAR 20
1666: PUSH
1667: LD_INT 1
1669: ST_TO_ADDR
// uc_nation = 1 ;
1670: LD_ADDR_OWVAR 21
1674: PUSH
1675: LD_INT 1
1677: ST_TO_ADDR
// vc_chassis = us_medium_tracked ;
1678: LD_ADDR_OWVAR 37
1682: PUSH
1683: LD_INT 3
1685: ST_TO_ADDR
// vc_engine = 3 ;
1686: LD_ADDR_OWVAR 39
1690: PUSH
1691: LD_INT 3
1693: ST_TO_ADDR
// vc_control = 3 ;
1694: LD_ADDR_OWVAR 38
1698: PUSH
1699: LD_INT 3
1701: ST_TO_ADDR
// vc_weapon = us_gatling_gun ;
1702: LD_ADDR_OWVAR 40
1706: PUSH
1707: LD_INT 4
1709: ST_TO_ADDR
// veh = CreateVehicle ;
1710: LD_ADDR_VAR 0 2
1714: PUSH
1715: CALL_OW 45
1719: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1720: LD_VAR 0 2
1724: PPUSH
1725: LD_INT 4
1727: PPUSH
1728: LD_INT 0
1730: PPUSH
1731: CALL_OW 49
// vc_weapon = us_double_gun ;
1735: LD_ADDR_OWVAR 40
1739: PUSH
1740: LD_INT 5
1742: ST_TO_ADDR
// vc_control = 1 ;
1743: LD_ADDR_OWVAR 38
1747: PUSH
1748: LD_INT 1
1750: ST_TO_ADDR
// veh = CreateVehicle ;
1751: LD_ADDR_VAR 0 2
1755: PUSH
1756: CALL_OW 45
1760: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1761: LD_VAR 0 2
1765: PPUSH
1766: LD_INT 4
1768: PPUSH
1769: LD_INT 0
1771: PPUSH
1772: CALL_OW 49
// vc_weapon = us_light_gun ;
1776: LD_ADDR_OWVAR 40
1780: PUSH
1781: LD_INT 3
1783: ST_TO_ADDR
// vc_control = 3 ;
1784: LD_ADDR_OWVAR 38
1788: PUSH
1789: LD_INT 3
1791: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
1792: LD_ADDR_OWVAR 37
1796: PUSH
1797: LD_INT 2
1799: ST_TO_ADDR
// veh = CreateVehicle ;
1800: LD_ADDR_VAR 0 2
1804: PUSH
1805: CALL_OW 45
1809: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1810: LD_VAR 0 2
1814: PPUSH
1815: LD_INT 4
1817: PPUSH
1818: LD_INT 0
1820: PPUSH
1821: CALL_OW 49
// vc_weapon = us_gatling_gun ;
1825: LD_ADDR_OWVAR 40
1829: PUSH
1830: LD_INT 4
1832: ST_TO_ADDR
// veh = CreateVehicle ;
1833: LD_ADDR_VAR 0 2
1837: PUSH
1838: CALL_OW 45
1842: ST_TO_ADDR
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1843: LD_VAR 0 2
1847: PPUSH
1848: LD_INT 4
1850: PPUSH
1851: LD_INT 0
1853: PPUSH
1854: CALL_OW 49
// end ;
1858: LD_VAR 0 1
1862: RET
// export function PowellSupport1 ; var veh , un ; begin
1863: LD_INT 0
1865: PPUSH
1866: PPUSH
1867: PPUSH
// uc_side = 1 ;
1868: LD_ADDR_OWVAR 20
1872: PUSH
1873: LD_INT 1
1875: ST_TO_ADDR
// uc_nation = 1 ;
1876: LD_ADDR_OWVAR 21
1880: PUSH
1881: LD_INT 1
1883: ST_TO_ADDR
// if TestCharacters ( 11_Brown ) = true then
1884: LD_STRING 11_Brown
1886: PPUSH
1887: CALL_OW 28
1891: PUSH
1892: LD_INT 1
1894: EQUAL
1895: IFFALSE 1942
// begin Brown = PrepareUnit ( 11_Brown , true ) ;
1897: LD_ADDR_EXP 7
1901: PUSH
1902: LD_STRING 11_Brown
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: CALL 12060 0 2
1912: ST_TO_ADDR
// SetClass ( Brown , 2 ) ;
1913: LD_EXP 7
1917: PPUSH
1918: LD_INT 2
1920: PPUSH
1921: CALL_OW 336
// PlaceUnitArea ( Brown , PlayerSpawn , false ) ;
1925: LD_EXP 7
1929: PPUSH
1930: LD_INT 4
1932: PPUSH
1933: LD_INT 0
1935: PPUSH
1936: CALL_OW 49
// end else
1940: GO 1958
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
1942: LD_INT 4
1944: PPUSH
1945: LD_INT 0
1947: PPUSH
1948: LD_INT 1
1950: PPUSH
1951: LD_INT 0
1953: PPUSH
1954: CALL 1232 0 4
// end ; if TestCharacters ( 11_Gary ) = true then
1958: LD_STRING 11_Gary
1960: PPUSH
1961: CALL_OW 28
1965: PUSH
1966: LD_INT 1
1968: EQUAL
1969: IFFALSE 2016
// begin Gary = PrepareUnit ( 11_Gary , true ) ;
1971: LD_ADDR_EXP 11
1975: PUSH
1976: LD_STRING 11_Gary
1978: PPUSH
1979: LD_INT 1
1981: PPUSH
1982: CALL 12060 0 2
1986: ST_TO_ADDR
// SetClass ( Gary , 2 ) ;
1987: LD_EXP 11
1991: PPUSH
1992: LD_INT 2
1994: PPUSH
1995: CALL_OW 336
// PlaceUnitArea ( Gary , PlayerSpawn , false ) ;
1999: LD_EXP 11
2003: PPUSH
2004: LD_INT 4
2006: PPUSH
2007: LD_INT 0
2009: PPUSH
2010: CALL_OW 49
// end else
2014: GO 2032
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2016: LD_INT 4
2018: PPUSH
2019: LD_INT 0
2021: PPUSH
2022: LD_INT 1
2024: PPUSH
2025: LD_INT 0
2027: PPUSH
2028: CALL 1232 0 4
// end ; vc_chassis = us_medium_tracked ;
2032: LD_ADDR_OWVAR 37
2036: PUSH
2037: LD_INT 3
2039: ST_TO_ADDR
// vc_engine = 3 ;
2040: LD_ADDR_OWVAR 39
2044: PUSH
2045: LD_INT 3
2047: ST_TO_ADDR
// vc_control = 1 ;
2048: LD_ADDR_OWVAR 38
2052: PUSH
2053: LD_INT 1
2055: ST_TO_ADDR
// vc_weapon = us_crane ;
2056: LD_ADDR_OWVAR 40
2060: PUSH
2061: LD_INT 13
2063: ST_TO_ADDR
// veh = CreateVehicle ;
2064: LD_ADDR_VAR 0 2
2068: PUSH
2069: CALL_OW 45
2073: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2074: LD_VAR 0 2
2078: PPUSH
2079: LD_INT 4
2081: PPUSH
2082: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2086: LD_VAR 0 2
2090: PPUSH
2091: LD_INT 4
2093: PPUSH
2094: LD_INT 0
2096: PPUSH
2097: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2101: LD_INT 4
2103: PPUSH
2104: LD_VAR 0 2
2108: PPUSH
2109: LD_INT 2
2111: PPUSH
2112: LD_INT 1
2114: PPUSH
2115: CALL 1232 0 4
// vc_weapon = 9 ;
2119: LD_ADDR_OWVAR 40
2123: PUSH
2124: LD_INT 9
2126: ST_TO_ADDR
// veh = CreateVehicle ;
2127: LD_ADDR_VAR 0 2
2131: PUSH
2132: CALL_OW 45
2136: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2137: LD_VAR 0 2
2141: PPUSH
2142: LD_INT 4
2144: PPUSH
2145: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2149: LD_VAR 0 2
2153: PPUSH
2154: LD_INT 4
2156: PPUSH
2157: LD_INT 0
2159: PPUSH
2160: CALL_OW 49
// PrepareAmericansRandom ( PlayerSpawn , veh , 2 , 1 ) ;
2164: LD_INT 4
2166: PPUSH
2167: LD_VAR 0 2
2171: PPUSH
2172: LD_INT 2
2174: PPUSH
2175: LD_INT 1
2177: PPUSH
2178: CALL 1232 0 4
// vc_control = 3 ;
2182: LD_ADDR_OWVAR 38
2186: PUSH
2187: LD_INT 3
2189: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2190: LD_ADDR_OWVAR 40
2194: PUSH
2195: LD_INT 12
2197: ST_TO_ADDR
// amCargo1 = CreateVehicle ;
2198: LD_ADDR_EXP 15
2202: PUSH
2203: CALL_OW 45
2207: ST_TO_ADDR
// amCargo2 = CreateVehicle ;
2208: LD_ADDR_EXP 16
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( amCargo1 , 4 ) ;
2218: LD_EXP 15
2222: PPUSH
2223: LD_INT 4
2225: PPUSH
2226: CALL_OW 233
// SetDir ( amCargo2 , 4 ) ;
2230: LD_EXP 16
2234: PPUSH
2235: LD_INT 4
2237: PPUSH
2238: CALL_OW 233
// PlaceUnitArea ( amCargo1 , PlayerSpawn , false ) ;
2242: LD_EXP 15
2246: PPUSH
2247: LD_INT 4
2249: PPUSH
2250: LD_INT 0
2252: PPUSH
2253: CALL_OW 49
// PlaceUnitArea ( amCargo2 , PlayerSpawn , false ) ;
2257: LD_EXP 16
2261: PPUSH
2262: LD_INT 4
2264: PPUSH
2265: LD_INT 0
2267: PPUSH
2268: CALL_OW 49
// AddCargo ( amCargo1 , 3 , 100 ) ;
2272: LD_EXP 15
2276: PPUSH
2277: LD_INT 3
2279: PPUSH
2280: LD_INT 100
2282: PPUSH
2283: CALL_OW 291
// AddCargo ( amCargo2 , 1 , 80 ) ;
2287: LD_EXP 16
2291: PPUSH
2292: LD_INT 1
2294: PPUSH
2295: LD_INT 80
2297: PPUSH
2298: CALL_OW 291
// AddCargo ( amCargo2 , 3 , 20 ) ;
2302: LD_EXP 16
2306: PPUSH
2307: LD_INT 3
2309: PPUSH
2310: LD_INT 20
2312: PPUSH
2313: CALL_OW 291
// end ;
2317: LD_VAR 0 1
2321: RET
// export function PowellSupport2 ; var veh , un ; begin
2322: LD_INT 0
2324: PPUSH
2325: PPUSH
2326: PPUSH
// uc_side = 1 ;
2327: LD_ADDR_OWVAR 20
2331: PUSH
2332: LD_INT 1
2334: ST_TO_ADDR
// uc_nation = 1 ;
2335: LD_ADDR_OWVAR 21
2339: PUSH
2340: LD_INT 1
2342: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2343: LD_ADDR_OWVAR 37
2347: PUSH
2348: LD_INT 2
2350: ST_TO_ADDR
// vc_engine = 3 ;
2351: LD_ADDR_OWVAR 39
2355: PUSH
2356: LD_INT 3
2358: ST_TO_ADDR
// vc_control = 3 ;
2359: LD_ADDR_OWVAR 38
2363: PUSH
2364: LD_INT 3
2366: ST_TO_ADDR
// vc_weapon = us_light_gun ;
2367: LD_ADDR_OWVAR 40
2371: PUSH
2372: LD_INT 3
2374: ST_TO_ADDR
// veh = CreateVehicle ;
2375: LD_ADDR_VAR 0 2
2379: PUSH
2380: CALL_OW 45
2384: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2385: LD_VAR 0 2
2389: PPUSH
2390: LD_INT 4
2392: PPUSH
2393: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2397: LD_VAR 0 2
2401: PPUSH
2402: LD_INT 4
2404: PPUSH
2405: LD_INT 0
2407: PPUSH
2408: CALL_OW 49
// vc_control = 1 ;
2412: LD_ADDR_OWVAR 38
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_chassis = us_medium_wheeled ;
2420: LD_ADDR_OWVAR 37
2424: PUSH
2425: LD_INT 2
2427: ST_TO_ADDR
// vc_weapon = us_double_gun ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 5
2435: ST_TO_ADDR
// veh = CreateVehicle ;
2436: LD_ADDR_VAR 0 2
2440: PUSH
2441: CALL_OW 45
2445: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
2446: LD_VAR 0 2
2450: PPUSH
2451: LD_INT 4
2453: PPUSH
2454: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2458: LD_VAR 0 2
2462: PPUSH
2463: LD_INT 4
2465: PPUSH
2466: LD_INT 0
2468: PPUSH
2469: CALL_OW 49
// if TestCharacters ( 11_Bobby ) = true then
2473: LD_STRING 11_Bobby
2475: PPUSH
2476: CALL_OW 28
2480: PUSH
2481: LD_INT 1
2483: EQUAL
2484: IFFALSE 2530
// begin Bobby = PrepareUnit ( 11_Bobby , true ) ;
2486: LD_ADDR_EXP 4
2490: PUSH
2491: LD_STRING 11_Bobby
2493: PPUSH
2494: LD_INT 1
2496: PPUSH
2497: CALL 12060 0 2
2501: ST_TO_ADDR
// SetClass ( Bobby , 3 ) ;
2502: LD_EXP 4
2506: PPUSH
2507: LD_INT 3
2509: PPUSH
2510: CALL_OW 336
// PlaceHumanInUnit ( Bobby , veh ) ;
2514: LD_EXP 4
2518: PPUSH
2519: LD_VAR 0 2
2523: PPUSH
2524: CALL_OW 52
// end else
2528: GO 2548
// begin PrepareAmericansRandom ( 0 , veh , 2 , 0 ) ;
2530: LD_INT 0
2532: PPUSH
2533: LD_VAR 0 2
2537: PPUSH
2538: LD_INT 2
2540: PPUSH
2541: LD_INT 0
2543: PPUSH
2544: CALL 1232 0 4
// end ; if TestCharacters ( 11_Houten ) = true then
2548: LD_STRING 11_Houten
2550: PPUSH
2551: CALL_OW 28
2555: PUSH
2556: LD_INT 1
2558: EQUAL
2559: IFFALSE 2606
// begin Houten = PrepareUnit ( 11_Houten , true ) ;
2561: LD_ADDR_EXP 9
2565: PUSH
2566: LD_STRING 11_Houten
2568: PPUSH
2569: LD_INT 1
2571: PPUSH
2572: CALL 12060 0 2
2576: ST_TO_ADDR
// SetClass ( Houten , 1 ) ;
2577: LD_EXP 9
2581: PPUSH
2582: LD_INT 1
2584: PPUSH
2585: CALL_OW 336
// PlaceUnitArea ( Houten , PlayerSpawn , false ) ;
2589: LD_EXP 9
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// end else
2604: GO 2622
// begin PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2606: LD_INT 4
2608: PPUSH
2609: LD_INT 0
2611: PPUSH
2612: LD_INT 1
2614: PPUSH
2615: LD_INT 0
2617: PPUSH
2618: CALL 1232 0 4
// end ; vc_control = 3 ;
2622: LD_ADDR_OWVAR 38
2626: PUSH
2627: LD_INT 3
2629: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2630: LD_ADDR_OWVAR 40
2634: PUSH
2635: LD_INT 12
2637: ST_TO_ADDR
// amCargo3 = CreateVehicle ;
2638: LD_ADDR_EXP 17
2642: PUSH
2643: CALL_OW 45
2647: ST_TO_ADDR
// SetDir ( amCargo3 , 4 ) ;
2648: LD_EXP 17
2652: PPUSH
2653: LD_INT 4
2655: PPUSH
2656: CALL_OW 233
// amCargo4 = CreateVehicle ;
2660: LD_ADDR_EXP 18
2664: PUSH
2665: CALL_OW 45
2669: ST_TO_ADDR
// SetDir ( amCargo4 , 4 ) ;
2670: LD_EXP 18
2674: PPUSH
2675: LD_INT 4
2677: PPUSH
2678: CALL_OW 233
// amCargo5 = CreateVehicle ;
2682: LD_ADDR_EXP 19
2686: PUSH
2687: CALL_OW 45
2691: ST_TO_ADDR
// SetDir ( amCargo5 , 4 ) ;
2692: LD_EXP 19
2696: PPUSH
2697: LD_INT 4
2699: PPUSH
2700: CALL_OW 233
// PlaceUnitArea ( amCargo3 , PlayerSpawn , false ) ;
2704: LD_EXP 17
2708: PPUSH
2709: LD_INT 4
2711: PPUSH
2712: LD_INT 0
2714: PPUSH
2715: CALL_OW 49
// PlaceUnitArea ( amCargo4 , PlayerSpawn , false ) ;
2719: LD_EXP 18
2723: PPUSH
2724: LD_INT 4
2726: PPUSH
2727: LD_INT 0
2729: PPUSH
2730: CALL_OW 49
// PlaceUnitArea ( amCargo5 , PlayerSpawn , false ) ;
2734: LD_EXP 19
2738: PPUSH
2739: LD_INT 4
2741: PPUSH
2742: LD_INT 0
2744: PPUSH
2745: CALL_OW 49
// if kurtStatus > 0 then
2749: LD_EXP 26
2753: PUSH
2754: LD_INT 0
2756: GREATER
2757: IFFALSE 2806
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2759: LD_EXP 17
2763: PPUSH
2764: LD_INT 1
2766: PPUSH
2767: LD_INT 100
2769: PPUSH
2770: CALL_OW 291
// AddCargo ( amCargo4 , 1 , 100 ) ;
2774: LD_EXP 18
2778: PPUSH
2779: LD_INT 1
2781: PPUSH
2782: LD_INT 100
2784: PPUSH
2785: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 80 ) ;
2789: LD_EXP 19
2793: PPUSH
2794: LD_INT 3
2796: PPUSH
2797: LD_INT 80
2799: PPUSH
2800: CALL_OW 291
// end else
2804: GO 2851
// begin AddCargo ( amCargo3 , 1 , 100 ) ;
2806: LD_EXP 17
2810: PPUSH
2811: LD_INT 1
2813: PPUSH
2814: LD_INT 100
2816: PPUSH
2817: CALL_OW 291
// AddCargo ( amCargo4 , 3 , 60 ) ;
2821: LD_EXP 18
2825: PPUSH
2826: LD_INT 3
2828: PPUSH
2829: LD_INT 60
2831: PPUSH
2832: CALL_OW 291
// AddCargo ( amCargo5 , 3 , 100 ) ;
2836: LD_EXP 19
2840: PPUSH
2841: LD_INT 3
2843: PPUSH
2844: LD_INT 100
2846: PPUSH
2847: CALL_OW 291
// end ; end ;
2851: LD_VAR 0 1
2855: RET
// export function PowellSupport3 ; var veh , un ; begin
2856: LD_INT 0
2858: PPUSH
2859: PPUSH
2860: PPUSH
// uc_side = 1 ;
2861: LD_ADDR_OWVAR 20
2865: PUSH
2866: LD_INT 1
2868: ST_TO_ADDR
// uc_nation = 1 ;
2869: LD_ADDR_OWVAR 21
2873: PUSH
2874: LD_INT 1
2876: ST_TO_ADDR
// PrepareAmericansRandom ( PlayerSpawn , 0 , 1 , 0 ) ;
2877: LD_INT 4
2879: PPUSH
2880: LD_INT 0
2882: PPUSH
2883: LD_INT 1
2885: PPUSH
2886: LD_INT 0
2888: PPUSH
2889: CALL 1232 0 4
// vc_chassis = us_medium_wheeled ;
2893: LD_ADDR_OWVAR 37
2897: PUSH
2898: LD_INT 2
2900: ST_TO_ADDR
// vc_engine = 3 ;
2901: LD_ADDR_OWVAR 39
2905: PUSH
2906: LD_INT 3
2908: ST_TO_ADDR
// vc_control = 3 ;
2909: LD_ADDR_OWVAR 38
2913: PUSH
2914: LD_INT 3
2916: ST_TO_ADDR
// vc_weapon = us_cargo_bay ;
2917: LD_ADDR_OWVAR 40
2921: PUSH
2922: LD_INT 12
2924: ST_TO_ADDR
// amCargo6 = CreateVehicle ;
2925: LD_ADDR_EXP 20
2929: PUSH
2930: CALL_OW 45
2934: ST_TO_ADDR
// amCargo7 = CreateVehicle ;
2935: LD_ADDR_EXP 21
2939: PUSH
2940: CALL_OW 45
2944: ST_TO_ADDR
// SetDir ( amCargo6 , 4 ) ;
2945: LD_EXP 20
2949: PPUSH
2950: LD_INT 4
2952: PPUSH
2953: CALL_OW 233
// SetDir ( amCargo7 , 4 ) ;
2957: LD_EXP 21
2961: PPUSH
2962: LD_INT 4
2964: PPUSH
2965: CALL_OW 233
// PlaceUnitArea ( amCargo6 , PlayerSpawn , false ) ;
2969: LD_EXP 20
2973: PPUSH
2974: LD_INT 4
2976: PPUSH
2977: LD_INT 0
2979: PPUSH
2980: CALL_OW 49
// PlaceUnitArea ( amCargo7 , PlayerSpawn , false ) ;
2984: LD_EXP 21
2988: PPUSH
2989: LD_INT 4
2991: PPUSH
2992: LD_INT 0
2994: PPUSH
2995: CALL_OW 49
// AddCargo ( amCargo6 , 1 , 100 ) ;
2999: LD_EXP 20
3003: PPUSH
3004: LD_INT 1
3006: PPUSH
3007: LD_INT 100
3009: PPUSH
3010: CALL_OW 291
// AddCargo ( amCargo7 , 1 , 100 ) ;
3014: LD_EXP 21
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 100
3024: PPUSH
3025: CALL_OW 291
// end ; end_of_file
3029: LD_VAR 0 1
3033: RET
// export function PrepareRussianCommander ; begin
3034: LD_INT 0
3036: PPUSH
// uc_side = 3 ;
3037: LD_ADDR_OWVAR 20
3041: PUSH
3042: LD_INT 3
3044: ST_TO_ADDR
// Davidov = PrepareUnit ( Davidov , false ) ;
3045: LD_ADDR_EXP 23
3049: PUSH
3050: LD_STRING Davidov
3052: PPUSH
3053: LD_INT 0
3055: PPUSH
3056: CALL 12060 0 2
3060: ST_TO_ADDR
// PlaceHumanInUnit ( Davidov , ruheadlab ) ;
3061: LD_EXP 23
3065: PPUSH
3066: LD_INT 3
3068: PPUSH
3069: CALL_OW 52
// RuScientists = RuScientists ^ Davidov ;
3073: LD_ADDR_EXP 34
3077: PUSH
3078: LD_EXP 34
3082: PUSH
3083: LD_EXP 23
3087: ADD
3088: ST_TO_ADDR
// SetClass ( RuScientists , 4 ) ;
3089: LD_EXP 34
3093: PPUSH
3094: LD_INT 4
3096: PPUSH
3097: CALL_OW 336
// end ;
3101: LD_VAR 0 1
3105: RET
// export function PrepareEastBase ; var i , un ; begin
3106: LD_INT 0
3108: PPUSH
3109: PPUSH
3110: PPUSH
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 3 ) ;
3111: LD_INT 3
3113: PPUSH
3114: LD_INT 3
3116: PPUSH
3117: LD_INT 121
3119: PPUSH
3120: LD_EXP 36
3124: PPUSH
3125: LD_EXP 37
3129: PPUSH
3130: CALL_OW 12
3134: PPUSH
3135: LD_INT 1
3137: PPUSH
3138: LD_INT 3
3140: PPUSH
3141: CALL 12774 0 6
// RespawnInside ( 3 , 3 , rubar2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 9 , 3 ) ;
3145: LD_INT 3
3147: PPUSH
3148: LD_INT 3
3150: PPUSH
3151: LD_INT 121
3153: PPUSH
3154: LD_EXP 36
3158: PPUSH
3159: LD_EXP 37
3163: PPUSH
3164: CALL_OW 12
3168: PPUSH
3169: LD_INT 9
3171: PPUSH
3172: LD_INT 3
3174: PPUSH
3175: CALL 12774 0 6
// RespawnInside ( 3 , 3 , rueastdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 6 ) ;
3179: LD_INT 3
3181: PPUSH
3182: LD_INT 3
3184: PPUSH
3185: LD_INT 4
3187: PPUSH
3188: LD_EXP 36
3192: PPUSH
3193: LD_EXP 37
3197: PPUSH
3198: CALL_OW 12
3202: PPUSH
3203: LD_INT 2
3205: PPUSH
3206: LD_INT 6
3208: PPUSH
3209: CALL 12774 0 6
// RespawnInside ( 3 , 3 , rufab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3213: LD_INT 3
3215: PPUSH
3216: LD_INT 3
3218: PPUSH
3219: LD_INT 112
3221: PPUSH
3222: LD_EXP 36
3226: PPUSH
3227: LD_EXP 37
3231: PPUSH
3232: CALL_OW 12
3236: PPUSH
3237: LD_INT 3
3239: PPUSH
3240: LD_INT 6
3242: PPUSH
3243: CALL 12774 0 6
// RespawnInside ( 3 , 3 , rulab2 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3247: LD_INT 3
3249: PPUSH
3250: LD_INT 3
3252: PPUSH
3253: LD_INT 47
3255: PPUSH
3256: LD_EXP 36
3260: PPUSH
3261: LD_EXP 37
3265: PPUSH
3266: CALL_OW 12
3270: PPUSH
3271: LD_INT 4
3273: PPUSH
3274: LD_INT 6
3276: PPUSH
3277: CALL 12774 0 6
// RespawnInside ( 3 , 3 , rulab3 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3281: LD_INT 3
3283: PPUSH
3284: LD_INT 3
3286: PPUSH
3287: LD_INT 129
3289: PPUSH
3290: LD_EXP 36
3294: PPUSH
3295: LD_EXP 37
3299: PPUSH
3300: CALL_OW 12
3304: PPUSH
3305: LD_INT 4
3307: PPUSH
3308: LD_INT 6
3310: PPUSH
3311: CALL 12774 0 6
// RespawnInside ( 3 , 3 , rulab4 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 6 ) ;
3315: LD_INT 3
3317: PPUSH
3318: LD_INT 3
3320: PPUSH
3321: LD_INT 135
3323: PPUSH
3324: LD_EXP 36
3328: PPUSH
3329: LD_EXP 37
3333: PPUSH
3334: CALL_OW 12
3338: PPUSH
3339: LD_INT 4
3341: PPUSH
3342: LD_INT 6
3344: PPUSH
3345: CALL 12774 0 6
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) do
3349: LD_ADDR_VAR 0 2
3353: PUSH
3354: LD_INT 22
3356: PUSH
3357: LD_INT 3
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PUSH
3364: LD_INT 30
3366: PUSH
3367: LD_INT 32
3369: PUSH
3370: EMPTY
3371: LIST
3372: LIST
3373: PUSH
3374: EMPTY
3375: LIST
3376: LIST
3377: PPUSH
3378: CALL_OW 69
3382: PUSH
3383: FOR_IN
3384: IFFALSE 3424
// RespawnInside ( 3 , 3 , i , rand ( RuSolMinlevel , RuSolMaxLevel ) , 1 , 1 ) ;
3386: LD_INT 3
3388: PPUSH
3389: LD_INT 3
3391: PPUSH
3392: LD_VAR 0 2
3396: PPUSH
3397: LD_EXP 36
3401: PPUSH
3402: LD_EXP 37
3406: PPUSH
3407: CALL_OW 12
3411: PPUSH
3412: LD_INT 1
3414: PPUSH
3415: LD_INT 1
3417: PPUSH
3418: CALL 12774 0 6
3422: GO 3383
3424: POP
3425: POP
// for i = 1 to 5 do
3426: LD_ADDR_VAR 0 2
3430: PUSH
3431: DOUBLE
3432: LD_INT 1
3434: DEC
3435: ST_TO_ADDR
3436: LD_INT 5
3438: PUSH
3439: FOR_TO
3440: IFFALSE 3539
// begin uc_side = 3 ;
3442: LD_ADDR_OWVAR 20
3446: PUSH
3447: LD_INT 3
3449: ST_TO_ADDR
// uc_nation = 3 ;
3450: LD_ADDR_OWVAR 21
3454: PUSH
3455: LD_INT 3
3457: ST_TO_ADDR
// hc_gallery =  ;
3458: LD_ADDR_OWVAR 33
3462: PUSH
3463: LD_STRING 
3465: ST_TO_ADDR
// hc_name =  ;
3466: LD_ADDR_OWVAR 26
3470: PUSH
3471: LD_STRING 
3473: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3474: LD_INT 0
3476: PPUSH
3477: LD_INT 4
3479: PPUSH
3480: LD_EXP 36
3484: PPUSH
3485: LD_EXP 37
3489: PPUSH
3490: CALL_OW 12
3494: PPUSH
3495: CALL_OW 380
// un = CreateHuman ;
3499: LD_ADDR_VAR 0 3
3503: PUSH
3504: CALL_OW 44
3508: ST_TO_ADDR
// PlaceHumanInUnit ( un , ruheadlab ) ;
3509: LD_VAR 0 3
3513: PPUSH
3514: LD_INT 3
3516: PPUSH
3517: CALL_OW 52
// RuScientists = RuScientists ^ un ;
3521: LD_ADDR_EXP 34
3525: PUSH
3526: LD_EXP 34
3530: PUSH
3531: LD_VAR 0 3
3535: ADD
3536: ST_TO_ADDR
// end ;
3537: GO 3439
3539: POP
3540: POP
// end ;
3541: LD_VAR 0 1
3545: RET
// export function PrepareWestBase ; var i , un ; begin
3546: LD_INT 0
3548: PPUSH
3549: PPUSH
3550: PPUSH
// RespawnInside ( 3 , 3 , ruwestdepot , rand ( RuSolMinlevel , RuSolMaxLevel ) , 2 , 3 ) ;
3551: LD_INT 3
3553: PPUSH
3554: LD_INT 3
3556: PPUSH
3557: LD_INT 6
3559: PPUSH
3560: LD_EXP 36
3564: PPUSH
3565: LD_EXP 37
3569: PPUSH
3570: CALL_OW 12
3574: PPUSH
3575: LD_INT 2
3577: PPUSH
3578: LD_INT 3
3580: PPUSH
3581: CALL 12774 0 6
// RespawnInside ( 3 , 3 , rulab1 , rand ( RuSolMinlevel , RuSolMaxLevel ) , 4 , 3 ) ;
3585: LD_INT 3
3587: PPUSH
3588: LD_INT 3
3590: PPUSH
3591: LD_INT 91
3593: PPUSH
3594: LD_EXP 36
3598: PPUSH
3599: LD_EXP 37
3603: PPUSH
3604: CALL_OW 12
3608: PPUSH
3609: LD_INT 4
3611: PPUSH
3612: LD_INT 3
3614: PPUSH
3615: CALL 12774 0 6
// RespawnInside ( 3 , 3 , ru_fact , rand ( RuSolMinlevel , RuSolMaxLevel ) , 3 , 6 ) ;
3619: LD_INT 3
3621: PPUSH
3622: LD_INT 3
3624: PPUSH
3625: LD_INT 21
3627: PPUSH
3628: LD_EXP 36
3632: PPUSH
3633: LD_EXP 37
3637: PPUSH
3638: CALL_OW 12
3642: PPUSH
3643: LD_INT 3
3645: PPUSH
3646: LD_INT 6
3648: PPUSH
3649: CALL 12774 0 6
// end ;
3653: LD_VAR 0 1
3657: RET
// export function PrepareOtherRussians ; var i , un , veh ; begin
3658: LD_INT 0
3660: PPUSH
3661: PPUSH
3662: PPUSH
3663: PPUSH
// uc_side = 3 ;
3664: LD_ADDR_OWVAR 20
3668: PUSH
3669: LD_INT 3
3671: ST_TO_ADDR
// uc_nation = 3 ;
3672: LD_ADDR_OWVAR 21
3676: PUSH
3677: LD_INT 3
3679: ST_TO_ADDR
// for i = 1 to 5 do
3680: LD_ADDR_VAR 0 2
3684: PUSH
3685: DOUBLE
3686: LD_INT 1
3688: DEC
3689: ST_TO_ADDR
3690: LD_INT 5
3692: PUSH
3693: FOR_TO
3694: IFFALSE 3764
// begin hc_gallery =  ;
3696: LD_ADDR_OWVAR 33
3700: PUSH
3701: LD_STRING 
3703: ST_TO_ADDR
// hc_name =  ;
3704: LD_ADDR_OWVAR 26
3708: PUSH
3709: LD_STRING 
3711: ST_TO_ADDR
// PrepareHuman ( false , 9 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3712: LD_INT 0
3714: PPUSH
3715: LD_INT 9
3717: PPUSH
3718: LD_EXP 36
3722: PPUSH
3723: LD_EXP 37
3727: PPUSH
3728: CALL_OW 12
3732: PPUSH
3733: CALL_OW 380
// un = CreateHuman ;
3737: LD_ADDR_VAR 0 3
3741: PUSH
3742: CALL_OW 44
3746: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3747: LD_VAR 0 3
3751: PPUSH
3752: LD_INT 8
3754: PPUSH
3755: LD_INT 0
3757: PPUSH
3758: CALL_OW 49
// end ;
3762: GO 3693
3764: POP
3765: POP
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
3766: LD_ADDR_VAR 0 2
3770: PUSH
3771: DOUBLE
3772: LD_INT 1
3774: DEC
3775: ST_TO_ADDR
3776: LD_INT 2
3778: PUSH
3779: LD_INT 3
3781: PUSH
3782: LD_INT 4
3784: PUSH
3785: EMPTY
3786: LIST
3787: LIST
3788: LIST
3789: PUSH
3790: LD_OWVAR 67
3794: ARRAY
3795: PUSH
3796: FOR_TO
3797: IFFALSE 3867
// begin hc_gallery =  ;
3799: LD_ADDR_OWVAR 33
3803: PUSH
3804: LD_STRING 
3806: ST_TO_ADDR
// hc_name =  ;
3807: LD_ADDR_OWVAR 26
3811: PUSH
3812: LD_STRING 
3814: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinlevel , RuSolMaxLevel ) ) ;
3815: LD_INT 0
3817: PPUSH
3818: LD_INT 4
3820: PPUSH
3821: LD_EXP 36
3825: PPUSH
3826: LD_EXP 37
3830: PPUSH
3831: CALL_OW 12
3835: PPUSH
3836: CALL_OW 380
// un = CreateHuman ;
3840: LD_ADDR_VAR 0 3
3844: PUSH
3845: CALL_OW 44
3849: ST_TO_ADDR
// PlaceUnitArea ( un , RussianBazookersSpawn , false ) ;
3850: LD_VAR 0 3
3854: PPUSH
3855: LD_INT 8
3857: PPUSH
3858: LD_INT 0
3860: PPUSH
3861: CALL_OW 49
// end ;
3865: GO 3796
3867: POP
3868: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
3869: LD_ADDR_VAR 0 2
3873: PUSH
3874: DOUBLE
3875: LD_INT 1
3877: DEC
3878: ST_TO_ADDR
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: PUSH
3893: LD_OWVAR 67
3897: ARRAY
3898: PUSH
3899: FOR_TO
3900: IFFALSE 4096
// begin vc_engine = 3 ;
3902: LD_ADDR_OWVAR 39
3906: PUSH
3907: LD_INT 3
3909: ST_TO_ADDR
// vc_control = 1 ;
3910: LD_ADDR_OWVAR 38
3914: PUSH
3915: LD_INT 1
3917: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 ] [ Rand ( 1 , 5 ) ] ;
3918: LD_ADDR_OWVAR 40
3922: PUSH
3923: LD_INT 42
3925: PUSH
3926: LD_INT 43
3928: PUSH
3929: LD_INT 44
3931: PUSH
3932: LD_INT 45
3934: PUSH
3935: LD_INT 46
3937: PUSH
3938: EMPTY
3939: LIST
3940: LIST
3941: LIST
3942: LIST
3943: LIST
3944: PUSH
3945: LD_INT 1
3947: PPUSH
3948: LD_INT 5
3950: PPUSH
3951: CALL_OW 12
3955: ARRAY
3956: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
3957: LD_OWVAR 40
3961: PUSH
3962: LD_INT 46
3964: EQUAL
3965: IFFALSE 3977
// vc_chassis = ru_heavy_tracked else
3967: LD_ADDR_OWVAR 37
3971: PUSH
3972: LD_INT 24
3974: ST_TO_ADDR
3975: GO 4004
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
3977: LD_ADDR_OWVAR 37
3981: PUSH
3982: LD_INT 22
3984: PUSH
3985: LD_INT 21
3987: PUSH
3988: EMPTY
3989: LIST
3990: LIST
3991: PUSH
3992: LD_INT 1
3994: PPUSH
3995: LD_INT 2
3997: PPUSH
3998: CALL_OW 12
4002: ARRAY
4003: ST_TO_ADDR
// veh = CreateVehicle ;
4004: LD_ADDR_VAR 0 4
4008: PUSH
4009: CALL_OW 45
4013: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4014: LD_VAR 0 4
4018: PPUSH
4019: LD_INT 3
4021: PPUSH
4022: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksWestHill , false ) ;
4026: LD_VAR 0 4
4030: PPUSH
4031: LD_INT 5
4033: PPUSH
4034: LD_INT 0
4036: PPUSH
4037: CALL_OW 49
// hc_gallery =  ;
4041: LD_ADDR_OWVAR 33
4045: PUSH
4046: LD_STRING 
4048: ST_TO_ADDR
// hc_name =  ;
4049: LD_ADDR_OWVAR 26
4053: PUSH
4054: LD_STRING 
4056: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
4057: LD_INT 0
4059: PPUSH
4060: LD_INT 3
4062: PPUSH
4063: LD_INT 10
4065: PPUSH
4066: CALL_OW 380
// un = CreateHuman ;
4070: LD_ADDR_VAR 0 3
4074: PUSH
4075: CALL_OW 44
4079: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4080: LD_VAR 0 3
4084: PPUSH
4085: LD_VAR 0 4
4089: PPUSH
4090: CALL_OW 52
// end ;
4094: GO 3899
4096: POP
4097: POP
// for i := 1 to [ 3 , 4 , 5 ] [ Difficulty ] do
4098: LD_ADDR_VAR 0 2
4102: PUSH
4103: DOUBLE
4104: LD_INT 1
4106: DEC
4107: ST_TO_ADDR
4108: LD_INT 3
4110: PUSH
4111: LD_INT 4
4113: PUSH
4114: LD_INT 5
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: LIST
4121: PUSH
4122: LD_OWVAR 67
4126: ARRAY
4127: PUSH
4128: FOR_TO
4129: IFFALSE 4276
// begin vc_engine = 3 ;
4131: LD_ADDR_OWVAR 39
4135: PUSH
4136: LD_INT 3
4138: ST_TO_ADDR
// vc_control = 3 ;
4139: LD_ADDR_OWVAR 38
4143: PUSH
4144: LD_INT 3
4146: ST_TO_ADDR
// vc_weapon = [ 42 , 43 , 44 , 45 , 46 , 49 ] [ Rand ( 1 , 5 ) ] ;
4147: LD_ADDR_OWVAR 40
4151: PUSH
4152: LD_INT 42
4154: PUSH
4155: LD_INT 43
4157: PUSH
4158: LD_INT 44
4160: PUSH
4161: LD_INT 45
4163: PUSH
4164: LD_INT 46
4166: PUSH
4167: LD_INT 49
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: LIST
4174: LIST
4175: LIST
4176: LIST
4177: PUSH
4178: LD_INT 1
4180: PPUSH
4181: LD_INT 5
4183: PPUSH
4184: CALL_OW 12
4188: ARRAY
4189: ST_TO_ADDR
// if vc_weapon = ru_heavy_gun then
4190: LD_OWVAR 40
4194: PUSH
4195: LD_INT 46
4197: EQUAL
4198: IFFALSE 4210
// vc_chassis = ru_heavy_tracked else
4200: LD_ADDR_OWVAR 37
4204: PUSH
4205: LD_INT 24
4207: ST_TO_ADDR
4208: GO 4237
// vc_chassis = [ ru_medium_tracked , ru_medium_wheeled ] [ Rand ( 1 , 2 ) ] ;
4210: LD_ADDR_OWVAR 37
4214: PUSH
4215: LD_INT 22
4217: PUSH
4218: LD_INT 21
4220: PUSH
4221: EMPTY
4222: LIST
4223: LIST
4224: PUSH
4225: LD_INT 1
4227: PPUSH
4228: LD_INT 2
4230: PPUSH
4231: CALL_OW 12
4235: ARRAY
4236: ST_TO_ADDR
// veh = CreateVehicle ;
4237: LD_ADDR_VAR 0 4
4241: PUSH
4242: CALL_OW 45
4246: ST_TO_ADDR
// SetDir ( veh , 3 ) ;
4247: LD_VAR 0 4
4251: PPUSH
4252: LD_INT 3
4254: PPUSH
4255: CALL_OW 233
// PlaceUnitArea ( veh , RussianTanksEastHill , false ) ;
4259: LD_VAR 0 4
4263: PPUSH
4264: LD_INT 6
4266: PPUSH
4267: LD_INT 0
4269: PPUSH
4270: CALL_OW 49
// end ;
4274: GO 4128
4276: POP
4277: POP
// end ; end_of_file
4278: LD_VAR 0 1
4282: RET
// export function PrepareKurt ; begin
4283: LD_INT 0
4285: PPUSH
// uc_side = 8 ;
4286: LD_ADDR_OWVAR 20
4290: PUSH
4291: LD_INT 8
4293: ST_TO_ADDR
// uc_nation = 2 ;
4294: LD_ADDR_OWVAR 21
4298: PUSH
4299: LD_INT 2
4301: ST_TO_ADDR
// vc_chassis = ar_medium_trike ;
4302: LD_ADDR_OWVAR 37
4306: PUSH
4307: LD_INT 13
4309: ST_TO_ADDR
// vc_engine = 1 ;
4310: LD_ADDR_OWVAR 39
4314: PUSH
4315: LD_INT 1
4317: ST_TO_ADDR
// vc_control = 1 ;
4318: LD_ADDR_OWVAR 38
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// vc_weapon = 24 ;
4326: LD_ADDR_OWVAR 40
4330: PUSH
4331: LD_INT 24
4333: ST_TO_ADDR
// KurtVeh = CreateVehicle ;
4334: LD_ADDR_EXP 25
4338: PUSH
4339: CALL_OW 45
4343: ST_TO_ADDR
// if kurtStatus > 0 then
4344: LD_EXP 26
4348: PUSH
4349: LD_INT 0
4351: GREATER
4352: IFFALSE 4401
// begin Kurt = PrepareUnit ( Kurt , false ) ;
4354: LD_ADDR_EXP 24
4358: PUSH
4359: LD_STRING Kurt
4361: PPUSH
4362: LD_INT 0
4364: PPUSH
4365: CALL 12060 0 2
4369: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4370: LD_EXP 25
4374: PPUSH
4375: LD_INT 4
4377: PPUSH
4378: LD_INT 0
4380: PPUSH
4381: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4385: LD_EXP 24
4389: PPUSH
4390: LD_EXP 25
4394: PPUSH
4395: CALL_OW 52
// end else
4399: GO 4478
// begin hc_name =  ;
4401: LD_ADDR_OWVAR 26
4405: PUSH
4406: LD_STRING 
4408: ST_TO_ADDR
// hc_gallery =  ;
4409: LD_ADDR_OWVAR 33
4413: PUSH
4414: LD_STRING 
4416: ST_TO_ADDR
// PrepareSoldier ( sex_male , 10 ) ;
4417: LD_INT 1
4419: PPUSH
4420: LD_INT 10
4422: PPUSH
4423: CALL_OW 381
// Kurt = CreateHuman ;
4427: LD_ADDR_EXP 24
4431: PUSH
4432: CALL_OW 44
4436: ST_TO_ADDR
// PlaceUnitArea ( KurtVeh , PlayerSpawn , false ) ;
4437: LD_EXP 25
4441: PPUSH
4442: LD_INT 4
4444: PPUSH
4445: LD_INT 0
4447: PPUSH
4448: CALL_OW 49
// PlaceHumanInUnit ( Kurt , KurtVeh ) ;
4452: LD_EXP 24
4456: PPUSH
4457: LD_EXP 25
4461: PPUSH
4462: CALL_OW 52
// SaveCharacters ( Kurt , AltKurt ) ;
4466: LD_EXP 24
4470: PPUSH
4471: LD_STRING AltKurt
4473: PPUSH
4474: CALL_OW 38
// end ; end ;
4478: LD_VAR 0 1
4482: RET
// export function PrepareLegionForPlayer ; var i , un , veh ; begin
4483: LD_INT 0
4485: PPUSH
4486: PPUSH
4487: PPUSH
4488: PPUSH
// for i = 1 to 3 do
4489: LD_ADDR_VAR 0 2
4493: PUSH
4494: DOUBLE
4495: LD_INT 1
4497: DEC
4498: ST_TO_ADDR
4499: LD_INT 3
4501: PUSH
4502: FOR_TO
4503: IFFALSE 4624
// begin uc_side = 1 ;
4505: LD_ADDR_OWVAR 20
4509: PUSH
4510: LD_INT 1
4512: ST_TO_ADDR
// uc_nation = 2 ;
4513: LD_ADDR_OWVAR 21
4517: PUSH
4518: LD_INT 2
4520: ST_TO_ADDR
// hc_gallery =  ;
4521: LD_ADDR_OWVAR 33
4525: PUSH
4526: LD_STRING 
4528: ST_TO_ADDR
// hc_name =  ;
4529: LD_ADDR_OWVAR 26
4533: PUSH
4534: LD_STRING 
4536: ST_TO_ADDR
// if kurtStatus = 0 or kurtStatus = 2 then
4537: LD_EXP 26
4541: PUSH
4542: LD_INT 0
4544: EQUAL
4545: PUSH
4546: LD_EXP 26
4550: PUSH
4551: LD_INT 2
4553: EQUAL
4554: OR
4555: IFFALSE 4572
// PrepareHuman ( false , 1 , 6 ) else
4557: LD_INT 0
4559: PPUSH
4560: LD_INT 1
4562: PPUSH
4563: LD_INT 6
4565: PPUSH
4566: CALL_OW 380
4570: GO 4585
// PrepareHuman ( false , 1 , 8 ) ;
4572: LD_INT 0
4574: PPUSH
4575: LD_INT 1
4577: PPUSH
4578: LD_INT 8
4580: PPUSH
4581: CALL_OW 380
// un = CreateHuman ;
4585: LD_ADDR_VAR 0 3
4589: PUSH
4590: CALL_OW 44
4594: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4595: LD_VAR 0 3
4599: PPUSH
4600: LD_INT 4
4602: PPUSH
4603: CALL_OW 233
// PlaceUnitArea ( un , PlayerSpawn , false ) ;
4607: LD_VAR 0 3
4611: PPUSH
4612: LD_INT 4
4614: PPUSH
4615: LD_INT 0
4617: PPUSH
4618: CALL_OW 49
// end ;
4622: GO 4502
4624: POP
4625: POP
// vc_chassis = 14 ;
4626: LD_ADDR_OWVAR 37
4630: PUSH
4631: LD_INT 14
4633: ST_TO_ADDR
// vc_engine = 3 ;
4634: LD_ADDR_OWVAR 39
4638: PUSH
4639: LD_INT 3
4641: ST_TO_ADDR
// vc_control = 1 ;
4642: LD_ADDR_OWVAR 38
4646: PUSH
4647: LD_INT 1
4649: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4650: LD_ADDR_OWVAR 40
4654: PUSH
4655: LD_INT 27
4657: PUSH
4658: LD_INT 26
4660: PUSH
4661: LD_INT 28
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: PUSH
4669: LD_INT 1
4671: PPUSH
4672: LD_INT 3
4674: PPUSH
4675: CALL_OW 12
4679: ARRAY
4680: ST_TO_ADDR
// veh = CreateVehicle ;
4681: LD_ADDR_VAR 0 4
4685: PUSH
4686: CALL_OW 45
4690: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4691: LD_VAR 0 4
4695: PPUSH
4696: LD_INT 4
4698: PPUSH
4699: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4703: LD_VAR 0 4
4707: PPUSH
4708: LD_INT 4
4710: PPUSH
4711: LD_INT 0
4713: PPUSH
4714: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4718: LD_EXP 26
4722: PUSH
4723: LD_INT 0
4725: EQUAL
4726: PUSH
4727: LD_EXP 26
4731: PUSH
4732: LD_INT 2
4734: EQUAL
4735: OR
4736: IFFALSE 4753
// PrepareHuman ( false , 3 , 6 ) else
4738: LD_INT 0
4740: PPUSH
4741: LD_INT 3
4743: PPUSH
4744: LD_INT 6
4746: PPUSH
4747: CALL_OW 380
4751: GO 4766
// PrepareHuman ( false , 3 , 8 ) ;
4753: LD_INT 0
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: LD_INT 8
4761: PPUSH
4762: CALL_OW 380
// un = CreateHuman ;
4766: LD_ADDR_VAR 0 3
4770: PUSH
4771: CALL_OW 44
4775: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
4776: LD_VAR 0 3
4780: PPUSH
4781: LD_VAR 0 4
4785: PPUSH
4786: CALL_OW 52
// vc_chassis = 14 ;
4790: LD_ADDR_OWVAR 37
4794: PUSH
4795: LD_INT 14
4797: ST_TO_ADDR
// vc_engine = 3 ;
4798: LD_ADDR_OWVAR 39
4802: PUSH
4803: LD_INT 3
4805: ST_TO_ADDR
// vc_control = 1 ;
4806: LD_ADDR_OWVAR 38
4810: PUSH
4811: LD_INT 1
4813: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4814: LD_ADDR_OWVAR 40
4818: PUSH
4819: LD_INT 27
4821: PUSH
4822: LD_INT 26
4824: PUSH
4825: LD_INT 28
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: LIST
4832: PUSH
4833: LD_INT 1
4835: PPUSH
4836: LD_INT 3
4838: PPUSH
4839: CALL_OW 12
4843: ARRAY
4844: ST_TO_ADDR
// veh = CreateVehicle ;
4845: LD_ADDR_VAR 0 4
4849: PUSH
4850: CALL_OW 45
4854: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
4855: LD_VAR 0 4
4859: PPUSH
4860: LD_INT 4
4862: PPUSH
4863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
4867: LD_VAR 0 4
4871: PPUSH
4872: LD_INT 4
4874: PPUSH
4875: LD_INT 0
4877: PPUSH
4878: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
4882: LD_EXP 26
4886: PUSH
4887: LD_INT 0
4889: EQUAL
4890: PUSH
4891: LD_EXP 26
4895: PUSH
4896: LD_INT 2
4898: EQUAL
4899: OR
4900: IFFALSE 4917
// PrepareHuman ( false , 4 , 6 ) else
4902: LD_INT 0
4904: PPUSH
4905: LD_INT 4
4907: PPUSH
4908: LD_INT 6
4910: PPUSH
4911: CALL_OW 380
4915: GO 4930
// PrepareHuman ( false , 4 , 8 ) ;
4917: LD_INT 0
4919: PPUSH
4920: LD_INT 4
4922: PPUSH
4923: LD_INT 8
4925: PPUSH
4926: CALL_OW 380
// un = CreateHuman ;
4930: LD_ADDR_VAR 0 3
4934: PUSH
4935: CALL_OW 44
4939: ST_TO_ADDR
// SetDir ( un , 4 ) ;
4940: LD_VAR 0 3
4944: PPUSH
4945: LD_INT 4
4947: PPUSH
4948: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
4952: LD_VAR 0 3
4956: PPUSH
4957: LD_VAR 0 4
4961: PPUSH
4962: CALL_OW 52
// vc_chassis = 14 ;
4966: LD_ADDR_OWVAR 37
4970: PUSH
4971: LD_INT 14
4973: ST_TO_ADDR
// vc_engine = 3 ;
4974: LD_ADDR_OWVAR 39
4978: PUSH
4979: LD_INT 3
4981: ST_TO_ADDR
// vc_control = 1 ;
4982: LD_ADDR_OWVAR 38
4986: PUSH
4987: LD_INT 1
4989: ST_TO_ADDR
// vc_weapon = [ 27 , 26 , 28 ] [ Rand ( 1 , 3 ) ] ;
4990: LD_ADDR_OWVAR 40
4994: PUSH
4995: LD_INT 27
4997: PUSH
4998: LD_INT 26
5000: PUSH
5001: LD_INT 28
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: LIST
5008: PUSH
5009: LD_INT 1
5011: PPUSH
5012: LD_INT 3
5014: PPUSH
5015: CALL_OW 12
5019: ARRAY
5020: ST_TO_ADDR
// veh = CreateVehicle ;
5021: LD_ADDR_VAR 0 4
5025: PUSH
5026: CALL_OW 45
5030: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
5031: LD_VAR 0 4
5035: PPUSH
5036: LD_INT 4
5038: PPUSH
5039: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
5043: LD_VAR 0 4
5047: PPUSH
5048: LD_INT 4
5050: PPUSH
5051: LD_INT 0
5053: PPUSH
5054: CALL_OW 49
// if kurtStatus = 0 or kurtStatus = 2 then
5058: LD_EXP 26
5062: PUSH
5063: LD_INT 0
5065: EQUAL
5066: PUSH
5067: LD_EXP 26
5071: PUSH
5072: LD_INT 2
5074: EQUAL
5075: OR
5076: IFFALSE 5093
// PrepareHuman ( false , 2 , 4 ) else
5078: LD_INT 0
5080: PPUSH
5081: LD_INT 2
5083: PPUSH
5084: LD_INT 4
5086: PPUSH
5087: CALL_OW 380
5091: GO 5106
// PrepareHuman ( false , 2 , 8 ) ;
5093: LD_INT 0
5095: PPUSH
5096: LD_INT 2
5098: PPUSH
5099: LD_INT 8
5101: PPUSH
5102: CALL_OW 380
// un = CreateHuman ;
5106: LD_ADDR_VAR 0 3
5110: PUSH
5111: CALL_OW 44
5115: ST_TO_ADDR
// SetDir ( un , 4 ) ;
5116: LD_VAR 0 3
5120: PPUSH
5121: LD_INT 4
5123: PPUSH
5124: CALL_OW 233
// PlaceHumanInUnit ( un , veh ) ;
5128: LD_VAR 0 3
5132: PPUSH
5133: LD_VAR 0 4
5137: PPUSH
5138: CALL_OW 52
// end ;
5142: LD_VAR 0 1
5146: RET
// export function PrepareAttackLegion ; var i , un ; begin
5147: LD_INT 0
5149: PPUSH
5150: PPUSH
5151: PPUSH
// for i = 1 to 4 do
5152: LD_ADDR_VAR 0 2
5156: PUSH
5157: DOUBLE
5158: LD_INT 1
5160: DEC
5161: ST_TO_ADDR
5162: LD_INT 4
5164: PUSH
5165: FOR_TO
5166: IFFALSE 5276
// begin uc_side = 8 ;
5168: LD_ADDR_OWVAR 20
5172: PUSH
5173: LD_INT 8
5175: ST_TO_ADDR
// uc_nation = 2 ;
5176: LD_ADDR_OWVAR 21
5180: PUSH
5181: LD_INT 2
5183: ST_TO_ADDR
// hc_gallery =  ;
5184: LD_ADDR_OWVAR 33
5188: PUSH
5189: LD_STRING 
5191: ST_TO_ADDR
// hc_name =  ;
5192: LD_ADDR_OWVAR 26
5196: PUSH
5197: LD_STRING 
5199: ST_TO_ADDR
// PrepareHuman ( false , [ 1 , 8 ] [ Rand ( 1 , 2 ) ] , Rand ( 6 , 8 ) ) ;
5200: LD_INT 0
5202: PPUSH
5203: LD_INT 1
5205: PUSH
5206: LD_INT 8
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: PUSH
5213: LD_INT 1
5215: PPUSH
5216: LD_INT 2
5218: PPUSH
5219: CALL_OW 12
5223: ARRAY
5224: PPUSH
5225: LD_INT 6
5227: PPUSH
5228: LD_INT 8
5230: PPUSH
5231: CALL_OW 12
5235: PPUSH
5236: CALL_OW 380
// un = CreateHuman ;
5240: LD_ADDR_VAR 0 3
5244: PUSH
5245: CALL_OW 44
5249: ST_TO_ADDR
// PlaceUnitArea ( un , LegionEnemySpawn , false ) ;
5250: LD_VAR 0 3
5254: PPUSH
5255: LD_INT 19
5257: PPUSH
5258: LD_INT 0
5260: PPUSH
5261: CALL_OW 49
// ComCrawl ( un ) ;
5265: LD_VAR 0 3
5269: PPUSH
5270: CALL_OW 137
// end ;
5274: GO 5165
5276: POP
5277: POP
// SetAttitude ( 1 , 8 , att_enemy , true ) ;
5278: LD_INT 1
5280: PPUSH
5281: LD_INT 8
5283: PPUSH
5284: LD_INT 2
5286: PPUSH
5287: LD_INT 1
5289: PPUSH
5290: CALL_OW 80
// PlaceMines ( MineField , 3 ) ;
5294: LD_INT 20
5296: PPUSH
5297: LD_INT 3
5299: PPUSH
5300: CALL 15441 0 2
// end ; end_of_file
5304: LD_VAR 0 1
5308: RET
// every 1 do var i ;
5309: GO 5311
5311: DISABLE
5312: LD_INT 0
5314: PPUSH
// begin TeleportExit ( ruteleprt , 122 , 145 ) ;
5315: LD_INT 10
5317: PPUSH
5318: LD_INT 122
5320: PPUSH
5321: LD_INT 145
5323: PPUSH
5324: CALL_OW 243
// TeleportExit ( rutp , 84 , 61 ) ;
5328: LD_INT 137
5330: PPUSH
5331: LD_INT 84
5333: PPUSH
5334: LD_INT 61
5336: PPUSH
5337: CALL_OW 243
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5341: LD_EXP 1
5345: PPUSH
5346: CALL_OW 310
5350: PPUSH
5351: CALL_OW 87
// InGameOn ;
5355: CALL_OW 8
// ComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 130 , 103 ) ;
5359: LD_INT 22
5361: PUSH
5362: LD_INT 1
5364: PUSH
5365: EMPTY
5366: LIST
5367: LIST
5368: PPUSH
5369: CALL_OW 69
5373: PPUSH
5374: LD_INT 130
5376: PPUSH
5377: LD_INT 103
5379: PPUSH
5380: CALL_OW 111
// AddComMoveXY ( i , 114 , 102 ) ;
5384: LD_VAR 0 1
5388: PPUSH
5389: LD_INT 114
5391: PPUSH
5392: LD_INT 102
5394: PPUSH
5395: CALL_OW 171
// Say ( JMM , D1-JMM-1 ) ;
5399: LD_EXP 1
5403: PPUSH
5404: LD_STRING D1-JMM-1
5406: PPUSH
5407: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5411: LD_EXP 1
5415: PPUSH
5416: CALL_OW 310
5420: PPUSH
5421: CALL_OW 87
// if IsOk ( Donaldson ) then
5425: LD_EXP 3
5429: PPUSH
5430: CALL_OW 302
5434: IFFALSE 5514
// begin Say ( Donaldson , D1-Don-1 ) ;
5436: LD_EXP 3
5440: PPUSH
5441: LD_STRING D1-Don-1
5443: PPUSH
5444: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5448: LD_EXP 1
5452: PPUSH
5453: CALL_OW 310
5457: PPUSH
5458: CALL_OW 87
// Say ( JMM , D1-JMM-2 ) ;
5462: LD_EXP 1
5466: PPUSH
5467: LD_STRING D1-JMM-2
5469: PPUSH
5470: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5474: LD_EXP 1
5478: PPUSH
5479: CALL_OW 310
5483: PPUSH
5484: CALL_OW 87
// Say ( Donaldson , D1-Don-2 ) ;
5488: LD_EXP 3
5492: PPUSH
5493: LD_STRING D1-Don-2
5495: PPUSH
5496: CALL_OW 88
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5500: LD_EXP 1
5504: PPUSH
5505: CALL_OW 310
5509: PPUSH
5510: CALL_OW 87
// end ; AddComMoveXY ( FilterAllUnits ( [ f_side , 1 ] ) , 110 , 101 ) ;
5514: LD_INT 22
5516: PUSH
5517: LD_INT 1
5519: PUSH
5520: EMPTY
5521: LIST
5522: LIST
5523: PPUSH
5524: CALL_OW 69
5528: PPUSH
5529: LD_INT 110
5531: PPUSH
5532: LD_INT 101
5534: PPUSH
5535: CALL_OW 171
// wait ( 0 0$1 ) ;
5539: LD_INT 35
5541: PPUSH
5542: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5546: LD_EXP 1
5550: PPUSH
5551: CALL_OW 310
5555: PPUSH
5556: CALL_OW 87
// wait ( 0 0$1 ) ;
5560: LD_INT 35
5562: PPUSH
5563: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5567: LD_EXP 1
5571: PPUSH
5572: CALL_OW 310
5576: PPUSH
5577: CALL_OW 87
// wait ( 0 0$1 ) ;
5581: LD_INT 35
5583: PPUSH
5584: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5588: LD_EXP 1
5592: PPUSH
5593: CALL_OW 310
5597: PPUSH
5598: CALL_OW 87
// wait ( 0 0$1 ) ;
5602: LD_INT 35
5604: PPUSH
5605: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
5609: LD_EXP 1
5613: PPUSH
5614: CALL_OW 310
5618: PPUSH
5619: CALL_OW 87
// end ;
5623: PPOPN 1
5625: END
// every 0 0$1 trigger SeeXY ( 1 , 102 , 94 ) do var i ;
5626: LD_INT 1
5628: PPUSH
5629: LD_INT 102
5631: PPUSH
5632: LD_INT 94
5634: PPUSH
5635: CALL_OW 293
5639: IFFALSE 5830
5641: GO 5643
5643: DISABLE
5644: LD_INT 0
5646: PPUSH
// begin CenterOnXY ( 102 , 94 ) ;
5647: LD_INT 102
5649: PPUSH
5650: LD_INT 94
5652: PPUSH
5653: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1-Sol1-2 ,  ) ;
5657: LD_INT 22
5659: PUSH
5660: LD_INT 1
5662: PUSH
5663: EMPTY
5664: LIST
5665: LIST
5666: PUSH
5667: LD_INT 26
5669: PUSH
5670: LD_INT 1
5672: PUSH
5673: EMPTY
5674: LIST
5675: LIST
5676: PUSH
5677: LD_INT 2
5679: PUSH
5680: LD_INT 25
5682: PUSH
5683: LD_INT 1
5685: PUSH
5686: EMPTY
5687: LIST
5688: LIST
5689: PUSH
5690: LD_INT 25
5692: PUSH
5693: LD_INT 2
5695: PUSH
5696: EMPTY
5697: LIST
5698: LIST
5699: PUSH
5700: LD_INT 25
5702: PUSH
5703: LD_INT 3
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: PUSH
5710: LD_INT 25
5712: PUSH
5713: LD_INT 4
5715: PUSH
5716: EMPTY
5717: LIST
5718: LIST
5719: PUSH
5720: LD_INT 25
5722: PUSH
5723: LD_INT 5
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PUSH
5730: LD_INT 25
5732: PUSH
5733: LD_INT 8
5735: PUSH
5736: EMPTY
5737: LIST
5738: LIST
5739: PUSH
5740: EMPTY
5741: LIST
5742: LIST
5743: LIST
5744: LIST
5745: LIST
5746: LIST
5747: LIST
5748: PUSH
5749: EMPTY
5750: LIST
5751: LIST
5752: LIST
5753: PPUSH
5754: CALL_OW 69
5758: PPUSH
5759: LD_STRING D1-Sol1-2
5761: PPUSH
5762: LD_STRING 
5764: PPUSH
5765: CALL 12157 0 3
// Say ( JMM , D1-JMM-3 ) ;
5769: LD_EXP 1
5773: PPUSH
5774: LD_STRING D1-JMM-3
5776: PPUSH
5777: CALL_OW 88
// ChangeMissionObjectives ( M1 ) ;
5781: LD_STRING M1
5783: PPUSH
5784: CALL_OW 337
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
5788: LD_ADDR_VAR 0 1
5792: PUSH
5793: LD_INT 22
5795: PUSH
5796: LD_INT 1
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PPUSH
5803: CALL_OW 69
5807: PUSH
5808: FOR_IN
5809: IFFALSE 5828
// ComMoveXY ( i , 95 , 84 ) ;
5811: LD_VAR 0 1
5815: PPUSH
5816: LD_INT 95
5818: PPUSH
5819: LD_INT 84
5821: PPUSH
5822: CALL_OW 111
5826: GO 5808
5828: POP
5829: POP
// end ;
5830: PPOPN 1
5832: END
// every 0 0$1 do var i , bazook_list , your_units , dec ;
5833: GO 5835
5835: DISABLE
5836: LD_INT 0
5838: PPUSH
5839: PPUSH
5840: PPUSH
5841: PPUSH
// begin bazook_list = FilterUnitsInArea ( RussianBazookersSpawn , [ [ f_side , 3 ] , [ f_class , 9 ] ] ) ;
5842: LD_ADDR_VAR 0 2
5846: PUSH
5847: LD_INT 8
5849: PPUSH
5850: LD_INT 22
5852: PUSH
5853: LD_INT 3
5855: PUSH
5856: EMPTY
5857: LIST
5858: LIST
5859: PUSH
5860: LD_INT 25
5862: PUSH
5863: LD_INT 9
5865: PUSH
5866: EMPTY
5867: LIST
5868: LIST
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PPUSH
5874: CALL_OW 70
5878: ST_TO_ADDR
// your_units = FilterAllUnits ( [ [ f_side , 1 ] ] ) ;
5879: LD_ADDR_VAR 0 3
5883: PUSH
5884: LD_INT 22
5886: PUSH
5887: LD_INT 1
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PUSH
5894: EMPTY
5895: LIST
5896: PPUSH
5897: CALL_OW 69
5901: ST_TO_ADDR
// enable ;
5902: ENABLE
// for i in your_units do
5903: LD_ADDR_VAR 0 1
5907: PUSH
5908: LD_VAR 0 3
5912: PUSH
5913: FOR_IN
5914: IFFALSE 6569
// begin if See ( 3 , i ) then
5916: LD_INT 3
5918: PPUSH
5919: LD_VAR 0 1
5923: PPUSH
5924: CALL_OW 292
5928: IFFALSE 6567
// begin disable ;
5930: DISABLE
// ComTimeShift ( bazook_list , 96 , 85 ) ;
5931: LD_VAR 0 2
5935: PPUSH
5936: LD_INT 96
5938: PPUSH
5939: LD_INT 85
5941: PPUSH
5942: CALL_OW 154
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5946: LD_VAR 0 2
5950: PPUSH
5951: LD_INT 96
5953: PPUSH
5954: LD_INT 85
5956: PPUSH
5957: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5961: LD_VAR 0 2
5965: PPUSH
5966: LD_INT 96
5968: PPUSH
5969: LD_INT 85
5971: PPUSH
5972: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5976: LD_VAR 0 2
5980: PPUSH
5981: LD_INT 96
5983: PPUSH
5984: LD_INT 85
5986: PPUSH
5987: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
5991: LD_VAR 0 2
5995: PPUSH
5996: LD_INT 96
5998: PPUSH
5999: LD_INT 85
6001: PPUSH
6002: CALL_OW 214
// AddComTimeShift ( bazook_list , 96 , 85 ) ;
6006: LD_VAR 0 2
6010: PPUSH
6011: LD_INT 96
6013: PPUSH
6014: LD_INT 85
6016: PPUSH
6017: CALL_OW 214
// wait ( 0 0$2 ) ;
6021: LD_INT 70
6023: PPUSH
6024: CALL_OW 67
// Say ( JMM , D1a-JMM-1 ) ;
6028: LD_EXP 1
6032: PPUSH
6033: LD_STRING D1a-JMM-1
6035: PPUSH
6036: CALL_OW 88
// Say ( Donaldson , D1a-Don-1 ) ;
6040: LD_EXP 3
6044: PPUSH
6045: LD_STRING D1a-Don-1
6047: PPUSH
6048: CALL_OW 88
// for i in FilterAllUnits ( [ f_side , 1 ] ) do
6052: LD_ADDR_VAR 0 1
6056: PUSH
6057: LD_INT 22
6059: PUSH
6060: LD_INT 1
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 69
6071: PUSH
6072: FOR_IN
6073: IFFALSE 6092
// ComMoveXY ( i , 109 , 102 ) ;
6075: LD_VAR 0 1
6079: PPUSH
6080: LD_INT 109
6082: PPUSH
6083: LD_INT 102
6085: PPUSH
6086: CALL_OW 111
6090: GO 6072
6092: POP
6093: POP
// Say ( JMM , D1a-JMM-2 ) ;
6094: LD_EXP 1
6098: PPUSH
6099: LD_STRING D1a-JMM-2
6101: PPUSH
6102: CALL_OW 88
// wait ( 0 0$10 ) ;
6106: LD_INT 350
6108: PPUSH
6109: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( JMM ) ) ;
6113: LD_EXP 1
6117: PPUSH
6118: CALL_OW 310
6122: PPUSH
6123: CALL_OW 87
// Say ( Donaldson , D1b-Don-1 ) ;
6127: LD_EXP 3
6131: PPUSH
6132: LD_STRING D1b-Don-1
6134: PPUSH
6135: CALL_OW 88
// Say ( JMM , D1b-JMM-1 ) ;
6139: LD_EXP 1
6143: PPUSH
6144: LD_STRING D1b-JMM-1
6146: PPUSH
6147: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D1b-Sol1-1 ,  ) ;
6151: LD_INT 22
6153: PUSH
6154: LD_INT 1
6156: PUSH
6157: EMPTY
6158: LIST
6159: LIST
6160: PUSH
6161: LD_INT 26
6163: PUSH
6164: LD_INT 1
6166: PUSH
6167: EMPTY
6168: LIST
6169: LIST
6170: PUSH
6171: LD_INT 2
6173: PUSH
6174: LD_INT 25
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: LD_INT 25
6186: PUSH
6187: LD_INT 2
6189: PUSH
6190: EMPTY
6191: LIST
6192: LIST
6193: PUSH
6194: LD_INT 25
6196: PUSH
6197: LD_INT 3
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 25
6206: PUSH
6207: LD_INT 4
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 25
6216: PUSH
6217: LD_INT 5
6219: PUSH
6220: EMPTY
6221: LIST
6222: LIST
6223: PUSH
6224: LD_INT 25
6226: PUSH
6227: LD_INT 8
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: EMPTY
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: PPUSH
6253: LD_STRING D1b-Sol1-1
6255: PPUSH
6256: LD_STRING 
6258: PPUSH
6259: CALL 12157 0 3
// Say ( Donaldson , D1b-Don-2 ) ;
6263: LD_EXP 3
6267: PPUSH
6268: LD_STRING D1b-Don-2
6270: PPUSH
6271: CALL_OW 88
// Say ( JMM , D1b-JMM-2 ) ;
6275: LD_EXP 1
6279: PPUSH
6280: LD_STRING D1b-JMM-2
6282: PPUSH
6283: CALL_OW 88
// dec = ShowQuery1 ;
6287: LD_ADDR_VAR 0 4
6291: PUSH
6292: CALL 12626 0 0
6296: ST_TO_ADDR
// if dec = 1 then
6297: LD_VAR 0 4
6301: PUSH
6302: LD_INT 1
6304: EQUAL
6305: IFFALSE 6411
// begin Say ( JMM , D2-JMM-1 ) ;
6307: LD_EXP 1
6311: PPUSH
6312: LD_STRING D2-JMM-1
6314: PPUSH
6315: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6319: LD_EXP 22
6323: PPUSH
6324: LD_STRING D2-Pow-1
6326: PPUSH
6327: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
6331: LD_EXP 1
6335: PPUSH
6336: LD_STRING D2a-JMM-1
6338: PPUSH
6339: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
6343: LD_EXP 22
6347: PPUSH
6348: LD_STRING D2a-Pow-1
6350: PPUSH
6351: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
6355: LD_EXP 1
6359: PPUSH
6360: LD_STRING D2a-JMM-2
6362: PPUSH
6363: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
6367: LD_EXP 22
6371: PPUSH
6372: LD_STRING D2a-Pow-2
6374: PPUSH
6375: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
6379: LD_EXP 1
6383: PPUSH
6384: LD_STRING D2a-JMM-3
6386: PPUSH
6387: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
6391: LD_EXP 22
6395: PPUSH
6396: LD_STRING D2a-Pow-3
6398: PPUSH
6399: CALL_OW 94
// secondPass = 2 ;
6403: LD_ADDR_EXP 27
6407: PUSH
6408: LD_INT 2
6410: ST_TO_ADDR
// end ; if dec = 2 then
6411: LD_VAR 0 4
6415: PUSH
6416: LD_INT 2
6418: EQUAL
6419: IFFALSE 6513
// begin Say ( JMM , D2-JMM-1 ) ;
6421: LD_EXP 1
6425: PPUSH
6426: LD_STRING D2-JMM-1
6428: PPUSH
6429: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
6433: LD_EXP 22
6437: PPUSH
6438: LD_STRING D2-Pow-1
6440: PPUSH
6441: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
6445: LD_EXP 1
6449: PPUSH
6450: LD_STRING D2b-JMM-1
6452: PPUSH
6453: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
6457: LD_EXP 22
6461: PPUSH
6462: LD_STRING D2b-Pow-1
6464: PPUSH
6465: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
6469: LD_EXP 1
6473: PPUSH
6474: LD_STRING D2c-JMM-1
6476: PPUSH
6477: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
6481: LD_EXP 22
6485: PPUSH
6486: LD_STRING D2c-Pow-1
6488: PPUSH
6489: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
6493: LD_EXP 1
6497: PPUSH
6498: LD_STRING D2c-JMM-2
6500: PPUSH
6501: CALL_OW 88
// secondPass = 2 ;
6505: LD_ADDR_EXP 27
6509: PUSH
6510: LD_INT 2
6512: ST_TO_ADDR
// end ; if dec = 3 then
6513: LD_VAR 0 4
6517: PUSH
6518: LD_INT 3
6520: EQUAL
6521: IFFALSE 6531
// secondPass = 1 ;
6523: LD_ADDR_EXP 27
6527: PUSH
6528: LD_INT 1
6530: ST_TO_ADDR
// InGameOff ;
6531: CALL_OW 9
// ruAI = 1 ;
6535: LD_ADDR_EXP 41
6539: PUSH
6540: LD_INT 1
6542: ST_TO_ADDR
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
6543: LD_INT 1
6545: PPUSH
6546: LD_INT 3
6548: PPUSH
6549: LD_INT 2
6551: PPUSH
6552: LD_INT 1
6554: PPUSH
6555: CALL_OW 80
// SaveForQuickRestart ;
6559: CALL_OW 22
// exit ;
6563: POP
6564: POP
6565: GO 6571
// end ; end ;
6567: GO 5913
6569: POP
6570: POP
// end ;
6571: PPOPN 4
6573: END
// every 1 1$0 trigger secondPass = 2 do
6574: LD_EXP 27
6578: PUSH
6579: LD_INT 2
6581: EQUAL
6582: IFFALSE 6802
6584: GO 6586
6586: DISABLE
// begin PowellSupport1 ;
6587: CALL 1863 0 0
// DialogueOn ;
6591: CALL_OW 6
// Say ( JMM , DC1-JMM-1 ) ;
6595: LD_EXP 1
6599: PPUSH
6600: LD_STRING DC1-JMM-1
6602: PPUSH
6603: CALL_OW 88
// SayRadio ( Powell , DC1-Pow-1 ) ;
6607: LD_EXP 22
6611: PPUSH
6612: LD_STRING DC1-Pow-1
6614: PPUSH
6615: CALL_OW 94
// DialogueOff ;
6619: CALL_OW 7
// wait ( 3 3$0 ) ;
6623: LD_INT 6300
6625: PPUSH
6626: CALL_OW 67
// PowellSupport2 ;
6630: CALL 2322 0 0
// DialogueOn ;
6634: CALL_OW 6
// Say ( JMM , DC2-JMM-1 ) ;
6638: LD_EXP 1
6642: PPUSH
6643: LD_STRING DC2-JMM-1
6645: PPUSH
6646: CALL_OW 88
// SayRadio ( Powell , DC2-Pow-1 ) ;
6650: LD_EXP 22
6654: PPUSH
6655: LD_STRING DC2-Pow-1
6657: PPUSH
6658: CALL_OW 94
// DialogueOff ;
6662: CALL_OW 7
// wait ( 3 3$00 ) ;
6666: LD_INT 6300
6668: PPUSH
6669: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6673: LD_INT 35
6675: PPUSH
6676: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) and not FilterUnitsInArea ( OutsideArea1 , [ f_side , 3 ] ) ;
6680: LD_INT 22
6682: PUSH
6683: LD_INT 1
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: LD_INT 2
6692: PUSH
6693: LD_INT 30
6695: PUSH
6696: LD_INT 0
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 30
6705: PUSH
6706: LD_INT 1
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PPUSH
6722: CALL_OW 69
6726: PUSH
6727: LD_INT 11
6729: PPUSH
6730: LD_INT 22
6732: PUSH
6733: LD_INT 3
6735: PUSH
6736: EMPTY
6737: LIST
6738: LIST
6739: PPUSH
6740: CALL_OW 70
6744: NOT
6745: AND
6746: IFFALSE 6673
// wait ( 0 0$10 ) ;
6748: LD_INT 350
6750: PPUSH
6751: CALL_OW 67
// Legion ;
6755: CALL 6803 0 0
// wait ( 6 6$0 ) ;
6759: LD_INT 12600
6761: PPUSH
6762: CALL_OW 67
// PowellSupport3 ;
6766: CALL 2856 0 0
// DialogueOn ;
6770: CALL_OW 6
// SayRadio ( Powell , DC3-Pow-1 ) ;
6774: LD_EXP 22
6778: PPUSH
6779: LD_STRING DC3-Pow-1
6781: PPUSH
6782: CALL_OW 94
// Say ( JMM , DC3-JMM-1 ) ;
6786: LD_EXP 1
6790: PPUSH
6791: LD_STRING DC3-JMM-1
6793: PPUSH
6794: CALL_OW 88
// DialogueOff ;
6798: CALL_OW 7
// end ;
6802: END
// export function Legion ; var i , dec1 , dec2 , tmp , tmp2 , tmp3 , crates , oil , siberite , cr , sb , payForNeutral , payForHelp , query1 , query2 ; begin
6803: LD_INT 0
6805: PPUSH
6806: PPUSH
6807: PPUSH
6808: PPUSH
6809: PPUSH
6810: PPUSH
6811: PPUSH
6812: PPUSH
6813: PPUSH
6814: PPUSH
6815: PPUSH
6816: PPUSH
6817: PPUSH
6818: PPUSH
6819: PPUSH
6820: PPUSH
// tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
6821: LD_ADDR_VAR 0 5
6825: PUSH
6826: LD_INT 22
6828: PUSH
6829: LD_INT 1
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PUSH
6836: LD_INT 21
6838: PUSH
6839: LD_INT 3
6841: PUSH
6842: EMPTY
6843: LIST
6844: LIST
6845: PUSH
6846: LD_INT 2
6848: PUSH
6849: LD_INT 30
6851: PUSH
6852: LD_INT 0
6854: PUSH
6855: EMPTY
6856: LIST
6857: LIST
6858: PUSH
6859: LD_INT 30
6861: PUSH
6862: LD_INT 1
6864: PUSH
6865: EMPTY
6866: LIST
6867: LIST
6868: PUSH
6869: EMPTY
6870: LIST
6871: LIST
6872: LIST
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: LIST
6878: PPUSH
6879: CALL_OW 69
6883: ST_TO_ADDR
// crates := 0 ;
6884: LD_ADDR_VAR 0 8
6888: PUSH
6889: LD_INT 0
6891: ST_TO_ADDR
// oil := 0 ;
6892: LD_ADDR_VAR 0 9
6896: PUSH
6897: LD_INT 0
6899: ST_TO_ADDR
// siberite := 0 ;
6900: LD_ADDR_VAR 0 10
6904: PUSH
6905: LD_INT 0
6907: ST_TO_ADDR
// payForNeutral := false ;
6908: LD_ADDR_VAR 0 13
6912: PUSH
6913: LD_INT 0
6915: ST_TO_ADDR
// payForHelp := false ;
6916: LD_ADDR_VAR 0 14
6920: PUSH
6921: LD_INT 0
6923: ST_TO_ADDR
// for i in tmp do
6924: LD_ADDR_VAR 0 2
6928: PUSH
6929: LD_VAR 0 5
6933: PUSH
6934: FOR_IN
6935: IFFALSE 7026
// begin crates := crates + GetResourceType ( GetBase ( i ) , 1 ) ;
6937: LD_ADDR_VAR 0 8
6941: PUSH
6942: LD_VAR 0 8
6946: PUSH
6947: LD_VAR 0 2
6951: PPUSH
6952: CALL_OW 274
6956: PPUSH
6957: LD_INT 1
6959: PPUSH
6960: CALL_OW 275
6964: PLUS
6965: ST_TO_ADDR
// oil := oil + GetResourceType ( GetBase ( i ) , 2 ) ;
6966: LD_ADDR_VAR 0 9
6970: PUSH
6971: LD_VAR 0 9
6975: PUSH
6976: LD_VAR 0 2
6980: PPUSH
6981: CALL_OW 274
6985: PPUSH
6986: LD_INT 2
6988: PPUSH
6989: CALL_OW 275
6993: PLUS
6994: ST_TO_ADDR
// siberite := siberite + GetResourceType ( GetBase ( i ) , 3 ) ;
6995: LD_ADDR_VAR 0 10
6999: PUSH
7000: LD_VAR 0 10
7004: PUSH
7005: LD_VAR 0 2
7009: PPUSH
7010: CALL_OW 274
7014: PPUSH
7015: LD_INT 3
7017: PPUSH
7018: CALL_OW 275
7022: PLUS
7023: ST_TO_ADDR
// end ;
7024: GO 6934
7026: POP
7027: POP
// PrepareKurt ;
7028: CALL 4283 0 0
// if not Kurt then
7032: LD_EXP 24
7036: NOT
7037: IFFALSE 7041
// exit ;
7039: GO 9084
// ComMoveXY ( KurtVeh , 144 , 111 ) ;
7041: LD_EXP 25
7045: PPUSH
7046: LD_INT 144
7048: PPUSH
7049: LD_INT 111
7051: PPUSH
7052: CALL_OW 111
// wait ( 0 0$2 ) ;
7056: LD_INT 70
7058: PPUSH
7059: CALL_OW 67
// PlaceSeeing ( 167 , 121 , 1 , - 10 ) ;
7063: LD_INT 167
7065: PPUSH
7066: LD_INT 121
7068: PPUSH
7069: LD_INT 1
7071: PPUSH
7072: LD_INT 10
7074: NEG
7075: PPUSH
7076: CALL_OW 330
// ComExitVehicle ( Kurt ) ;
7080: LD_EXP 24
7084: PPUSH
7085: CALL_OW 121
// CenterNowOnUnits ( Kurt ) ;
7089: LD_EXP 24
7093: PPUSH
7094: CALL_OW 87
// wait ( 0 0$1 ) ;
7098: LD_INT 35
7100: PPUSH
7101: CALL_OW 67
// DialogueOn ;
7105: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D3-Sol1-1 ,  ) ;
7109: LD_INT 22
7111: PUSH
7112: LD_INT 1
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: LD_INT 26
7121: PUSH
7122: LD_INT 1
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 2
7131: PUSH
7132: LD_INT 25
7134: PUSH
7135: LD_INT 1
7137: PUSH
7138: EMPTY
7139: LIST
7140: LIST
7141: PUSH
7142: LD_INT 25
7144: PUSH
7145: LD_INT 2
7147: PUSH
7148: EMPTY
7149: LIST
7150: LIST
7151: PUSH
7152: LD_INT 25
7154: PUSH
7155: LD_INT 3
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PUSH
7162: LD_INT 25
7164: PUSH
7165: LD_INT 4
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 25
7174: PUSH
7175: LD_INT 5
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: LD_INT 25
7184: PUSH
7185: LD_INT 8
7187: PUSH
7188: EMPTY
7189: LIST
7190: LIST
7191: PUSH
7192: EMPTY
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: PPUSH
7206: CALL_OW 69
7210: PPUSH
7211: LD_STRING D3-Sol1-1
7213: PPUSH
7214: LD_STRING 
7216: PPUSH
7217: CALL 12157 0 3
// if KurtStatus then
7221: LD_EXP 26
7225: IFFALSE 7325
// begin Say ( Kurt , D3-Kurt-1 ) ;
7227: LD_EXP 24
7231: PPUSH
7232: LD_STRING D3-Kurt-1
7234: PPUSH
7235: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7239: LD_EXP 1
7243: PPUSH
7244: LD_STRING D3-JMM-1
7246: PPUSH
7247: CALL_OW 88
// Say ( Kurt , D3-Kurt-2 ) ;
7251: LD_EXP 24
7255: PPUSH
7256: LD_STRING D3-Kurt-2
7258: PPUSH
7259: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7263: LD_EXP 1
7267: PPUSH
7268: LD_STRING D3-JMM-2
7270: PPUSH
7271: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7275: LD_EXP 24
7279: PPUSH
7280: LD_STRING D3-Kurt-4
7282: PPUSH
7283: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7287: LD_EXP 1
7291: PPUSH
7292: LD_STRING D3-JMM-4
7294: PPUSH
7295: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7299: LD_EXP 24
7303: PPUSH
7304: LD_STRING D3-Kurt-5
7306: PPUSH
7307: CALL_OW 88
// Say ( Kurt , D3-Kurt-5a ) ;
7311: LD_EXP 24
7315: PPUSH
7316: LD_STRING D3-Kurt-5a
7318: PPUSH
7319: CALL_OW 88
// end else
7323: GO 7421
// begin Say ( Kurt , D3-Kurt-1 ) ;
7325: LD_EXP 24
7329: PPUSH
7330: LD_STRING D3-Kurt-1
7332: PPUSH
7333: CALL_OW 88
// Say ( JMM , D3-JMM-1 ) ;
7337: LD_EXP 1
7341: PPUSH
7342: LD_STRING D3-JMM-1
7344: PPUSH
7345: CALL_OW 88
// Say ( Kurt , D3-Kurt-3 ) ;
7349: LD_EXP 24
7353: PPUSH
7354: LD_STRING D3-Kurt-3
7356: PPUSH
7357: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7361: LD_EXP 1
7365: PPUSH
7366: LD_STRING D3-JMM-3
7368: PPUSH
7369: CALL_OW 88
// Say ( Kurt , D3-Kurt-4 ) ;
7373: LD_EXP 24
7377: PPUSH
7378: LD_STRING D3-Kurt-4
7380: PPUSH
7381: CALL_OW 88
// Say ( JMM , D3-JMM-4 ) ;
7385: LD_EXP 1
7389: PPUSH
7390: LD_STRING D3-JMM-4
7392: PPUSH
7393: CALL_OW 88
// Say ( Kurt , D3-Kurt-5 ) ;
7397: LD_EXP 24
7401: PPUSH
7402: LD_STRING D3-Kurt-5
7404: PPUSH
7405: CALL_OW 88
// Say ( Kurt , D3-Kurt-5b ) ;
7409: LD_EXP 24
7413: PPUSH
7414: LD_STRING D3-Kurt-5b
7416: PPUSH
7417: CALL_OW 88
// end ; if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
7421: LD_VAR 0 8
7425: PUSH
7426: LD_INT 120
7428: PUSH
7429: LD_INT 60
7431: PUSH
7432: EMPTY
7433: LIST
7434: LIST
7435: PUSH
7436: LD_EXP 26
7440: PUSH
7441: LD_INT 1
7443: PLUS
7444: ARRAY
7445: GREATEREQUAL
7446: PUSH
7447: LD_VAR 0 10
7451: PUSH
7452: LD_INT 120
7454: PUSH
7455: LD_INT 60
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_EXP 26
7466: PUSH
7467: LD_INT 1
7469: PLUS
7470: ARRAY
7471: GREATEREQUAL
7472: AND
7473: IFFALSE 7525
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
7475: LD_ADDR_VAR 0 3
7479: PUSH
7480: LD_STRING Q2
7482: PUSH
7483: LD_STRING Q2K
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_EXP 26
7494: PUSH
7495: LD_INT 1
7497: PLUS
7498: ARRAY
7499: PPUSH
7500: LD_INT 1
7502: PUSH
7503: LD_INT 2
7505: PUSH
7506: LD_INT 3
7508: PUSH
7509: LD_INT 4
7511: PUSH
7512: EMPTY
7513: LIST
7514: LIST
7515: LIST
7516: LIST
7517: PPUSH
7518: CALL_OW 98
7522: ST_TO_ADDR
7523: GO 7569
// dec1 = SelectiveQuery ( [ Q2 , Q2K ] [ KurtStatus + 1 ] , [ 1 , 3 , 4 ] ) ;
7525: LD_ADDR_VAR 0 3
7529: PUSH
7530: LD_STRING Q2
7532: PUSH
7533: LD_STRING Q2K
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PUSH
7540: LD_EXP 26
7544: PUSH
7545: LD_INT 1
7547: PLUS
7548: ARRAY
7549: PPUSH
7550: LD_INT 1
7552: PUSH
7553: LD_INT 3
7555: PUSH
7556: LD_INT 4
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: LIST
7563: PPUSH
7564: CALL_OW 98
7568: ST_TO_ADDR
// if dec1 = 1 then
7569: LD_VAR 0 3
7573: PUSH
7574: LD_INT 1
7576: EQUAL
7577: IFFALSE 7611
// begin Say ( JMM , D3Ka-JMM-1 ) ;
7579: LD_EXP 1
7583: PPUSH
7584: LD_STRING D3Ka-JMM-1
7586: PPUSH
7587: CALL_OW 88
// Say ( Kurt , D3Ka-Kurt-1 ) ;
7591: LD_EXP 24
7595: PPUSH
7596: LD_STRING D3Ka-Kurt-1
7598: PPUSH
7599: CALL_OW 88
// warWithLegion = 1 ;
7603: LD_ADDR_EXP 30
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// end ; if dec1 = 2 then
7611: LD_VAR 0 3
7615: PUSH
7616: LD_INT 2
7618: EQUAL
7619: IFFALSE 7703
// begin Say ( JMM , D3Kb-JMM-1 ) ;
7621: LD_EXP 1
7625: PPUSH
7626: LD_STRING D3Kb-JMM-1
7628: PPUSH
7629: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
7633: LD_EXP 24
7637: PPUSH
7638: LD_STRING D3Kb-Kurt-1
7640: PPUSH
7641: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7645: LD_ADDR_VAR 0 11
7649: PUSH
7650: LD_INT 120
7652: PUSH
7653: LD_INT 60
7655: PUSH
7656: EMPTY
7657: LIST
7658: LIST
7659: PUSH
7660: LD_EXP 26
7664: PUSH
7665: LD_INT 1
7667: PLUS
7668: ARRAY
7669: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
7670: LD_ADDR_VAR 0 12
7674: PUSH
7675: LD_INT 120
7677: PUSH
7678: LD_INT 60
7680: PUSH
7681: EMPTY
7682: LIST
7683: LIST
7684: PUSH
7685: LD_EXP 26
7689: PUSH
7690: LD_INT 1
7692: PLUS
7693: ARRAY
7694: ST_TO_ADDR
// payForNeutral := true ;
7695: LD_ADDR_VAR 0 13
7699: PUSH
7700: LD_INT 1
7702: ST_TO_ADDR
// end ; if dec1 = 3 then
7703: LD_VAR 0 3
7707: PUSH
7708: LD_INT 3
7710: EQUAL
7711: IFFALSE 7946
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
7713: LD_EXP 1
7717: PPUSH
7718: LD_STRING D3Kc1-JMM-1
7720: PPUSH
7721: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
7725: LD_EXP 24
7729: PPUSH
7730: LD_STRING D3Kc1-Kurt-1
7732: PPUSH
7733: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
7737: LD_EXP 1
7741: PPUSH
7742: LD_STRING D3Kc1-JMM-2
7744: PPUSH
7745: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
7749: LD_EXP 24
7753: PPUSH
7754: LD_STRING D3Kc1-Kurt-2
7756: PPUSH
7757: CALL_OW 88
// askSiberite = 1 ;
7761: LD_ADDR_EXP 32
7765: PUSH
7766: LD_INT 1
7768: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
7769: LD_ADDR_VAR 0 4
7773: PUSH
7774: LD_STRING Q2b
7776: PPUSH
7777: LD_INT 1
7779: PUSH
7780: LD_INT 2
7782: PUSH
7783: LD_INT 3
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: PPUSH
7791: CALL_OW 98
7795: ST_TO_ADDR
// if dec2 = 1 then
7796: LD_VAR 0 4
7800: PUSH
7801: LD_INT 1
7803: EQUAL
7804: IFFALSE 7838
// begin Say ( JMM , D4a-JMM-1 ) ;
7806: LD_EXP 1
7810: PPUSH
7811: LD_STRING D4a-JMM-1
7813: PPUSH
7814: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7818: LD_EXP 24
7822: PPUSH
7823: LD_STRING D4b-Kurt-1
7825: PPUSH
7826: CALL_OW 88
// warWithLegion = 1 ;
7830: LD_ADDR_EXP 30
7834: PUSH
7835: LD_INT 1
7837: ST_TO_ADDR
// end ; if dec2 = 2 then
7838: LD_VAR 0 4
7842: PUSH
7843: LD_INT 2
7845: EQUAL
7846: IFFALSE 7880
// begin Say ( JMM , D4b-JMM-1 ) ;
7848: LD_EXP 1
7852: PPUSH
7853: LD_STRING D4b-JMM-1
7855: PPUSH
7856: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
7860: LD_EXP 24
7864: PPUSH
7865: LD_STRING D4b-Kurt-1
7867: PPUSH
7868: CALL_OW 88
// warWithLegion = 1 ;
7872: LD_ADDR_EXP 30
7876: PUSH
7877: LD_INT 1
7879: ST_TO_ADDR
// end ; if dec2 = 3 then
7880: LD_VAR 0 4
7884: PUSH
7885: LD_INT 3
7887: EQUAL
7888: IFFALSE 7946
// begin Say ( JMM , D4c-JMM-1 ) ;
7890: LD_EXP 1
7894: PPUSH
7895: LD_STRING D4c-JMM-1
7897: PPUSH
7898: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
7902: LD_EXP 24
7906: PPUSH
7907: LD_STRING D4c-Kurt-1
7909: PPUSH
7910: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
7914: LD_EXP 1
7918: PPUSH
7919: LD_STRING D4c-JMM-2
7921: PPUSH
7922: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
7926: LD_EXP 24
7930: PPUSH
7931: LD_STRING D4c-Kurt-2
7933: PPUSH
7934: CALL_OW 88
// fakeInfo = 1 ;
7938: LD_ADDR_EXP 31
7942: PUSH
7943: LD_INT 1
7945: ST_TO_ADDR
// end ; end ; if dec1 = 4 then
7946: LD_VAR 0 3
7950: PUSH
7951: LD_INT 4
7953: EQUAL
7954: IFFALSE 8992
// begin Say ( JMM , D3Kd-JMM-1 ) ;
7956: LD_EXP 1
7960: PPUSH
7961: LD_STRING D3Kd-JMM-1
7963: PPUSH
7964: CALL_OW 88
// if crates >= [ 200 , 120 ] [ KurtStatus + 1 ] and siberite >= [ 200 , 120 ] [ KurtStatus + 1 ] then
7968: LD_VAR 0 8
7972: PUSH
7973: LD_INT 200
7975: PUSH
7976: LD_INT 120
7978: PUSH
7979: EMPTY
7980: LIST
7981: LIST
7982: PUSH
7983: LD_EXP 26
7987: PUSH
7988: LD_INT 1
7990: PLUS
7991: ARRAY
7992: GREATEREQUAL
7993: PUSH
7994: LD_VAR 0 10
7998: PUSH
7999: LD_INT 200
8001: PUSH
8002: LD_INT 120
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: LD_EXP 26
8013: PUSH
8014: LD_INT 1
8016: PLUS
8017: ARRAY
8018: GREATEREQUAL
8019: AND
8020: IFFALSE 8072
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 3 , 4 ] ) else
8022: LD_ADDR_VAR 0 4
8026: PUSH
8027: LD_STRING Q2a
8029: PUSH
8030: LD_STRING Q2aK
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_EXP 26
8041: PUSH
8042: LD_INT 1
8044: PLUS
8045: ARRAY
8046: PPUSH
8047: LD_INT 1
8049: PUSH
8050: LD_INT 2
8052: PUSH
8053: LD_INT 3
8055: PUSH
8056: LD_INT 4
8058: PUSH
8059: EMPTY
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: PPUSH
8065: CALL_OW 98
8069: ST_TO_ADDR
8070: GO 8212
// if crates >= [ 120 , 60 ] [ KurtStatus + 1 ] and siberite >= [ 120 , 60 ] [ KurtStatus + 1 ] then
8072: LD_VAR 0 8
8076: PUSH
8077: LD_INT 120
8079: PUSH
8080: LD_INT 60
8082: PUSH
8083: EMPTY
8084: LIST
8085: LIST
8086: PUSH
8087: LD_EXP 26
8091: PUSH
8092: LD_INT 1
8094: PLUS
8095: ARRAY
8096: GREATEREQUAL
8097: PUSH
8098: LD_VAR 0 10
8102: PUSH
8103: LD_INT 120
8105: PUSH
8106: LD_INT 60
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: PUSH
8113: LD_EXP 26
8117: PUSH
8118: LD_INT 1
8120: PLUS
8121: ARRAY
8122: GREATEREQUAL
8123: AND
8124: IFFALSE 8172
// dec2 = SelectiveQuery ( [ Q2a , Q2aK ] [ KurtStatus + 1 ] , [ 1 , 2 , 4 ] ) else
8126: LD_ADDR_VAR 0 4
8130: PUSH
8131: LD_STRING Q2a
8133: PUSH
8134: LD_STRING Q2aK
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_EXP 26
8145: PUSH
8146: LD_INT 1
8148: PLUS
8149: ARRAY
8150: PPUSH
8151: LD_INT 1
8153: PUSH
8154: LD_INT 2
8156: PUSH
8157: LD_INT 4
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: PPUSH
8165: CALL_OW 98
8169: ST_TO_ADDR
8170: GO 8212
// begin dec2 := 0 ;
8172: LD_ADDR_VAR 0 4
8176: PUSH
8177: LD_INT 0
8179: ST_TO_ADDR
// Say ( JMM , D3Kc1-JMM-1 ) ;
8180: LD_EXP 1
8184: PPUSH
8185: LD_STRING D3Kc1-JMM-1
8187: PPUSH
8188: CALL_OW 88
// Say ( Kurt , D3Kc2-Kurt-1 ) ;
8192: LD_EXP 24
8196: PPUSH
8197: LD_STRING D3Kc2-Kurt-1
8199: PPUSH
8200: CALL_OW 88
// warWithLegion := 1 ;
8204: LD_ADDR_EXP 30
8208: PUSH
8209: LD_INT 1
8211: ST_TO_ADDR
// end ; if dec2 = 1 then
8212: LD_VAR 0 4
8216: PUSH
8217: LD_INT 1
8219: EQUAL
8220: IFFALSE 8254
// begin Say ( JMM , D5Ka-JMM-1 ) ;
8222: LD_EXP 1
8226: PPUSH
8227: LD_STRING D5Ka-JMM-1
8229: PPUSH
8230: CALL_OW 88
// Say ( Kurt , D5Ka-Kurt-1 ) ;
8234: LD_EXP 24
8238: PPUSH
8239: LD_STRING D5Ka-Kurt-1
8241: PPUSH
8242: CALL_OW 88
// warWithLegion = 1 ;
8246: LD_ADDR_EXP 30
8250: PUSH
8251: LD_INT 1
8253: ST_TO_ADDR
// end ; if dec2 = 2 then
8254: LD_VAR 0 4
8258: PUSH
8259: LD_INT 2
8261: EQUAL
8262: IFFALSE 8346
// begin Say ( JMM , D3Kb-JMM-1 ) ;
8264: LD_EXP 1
8268: PPUSH
8269: LD_STRING D3Kb-JMM-1
8271: PPUSH
8272: CALL_OW 88
// Say ( Kurt , D3Kb-Kurt-1 ) ;
8276: LD_EXP 24
8280: PPUSH
8281: LD_STRING D3Kb-Kurt-1
8283: PPUSH
8284: CALL_OW 88
// cr := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8288: LD_ADDR_VAR 0 11
8292: PUSH
8293: LD_INT 120
8295: PUSH
8296: LD_INT 60
8298: PUSH
8299: EMPTY
8300: LIST
8301: LIST
8302: PUSH
8303: LD_EXP 26
8307: PUSH
8308: LD_INT 1
8310: PLUS
8311: ARRAY
8312: ST_TO_ADDR
// sb := [ 120 , 60 ] [ KurtStatus + 1 ] ;
8313: LD_ADDR_VAR 0 12
8317: PUSH
8318: LD_INT 120
8320: PUSH
8321: LD_INT 60
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: PUSH
8328: LD_EXP 26
8332: PUSH
8333: LD_INT 1
8335: PLUS
8336: ARRAY
8337: ST_TO_ADDR
// payForNeutral := true ;
8338: LD_ADDR_VAR 0 13
8342: PUSH
8343: LD_INT 1
8345: ST_TO_ADDR
// end ; if dec2 = 3 then
8346: LD_VAR 0 4
8350: PUSH
8351: LD_INT 3
8353: EQUAL
8354: IFFALSE 8438
// begin Say ( JMM , D3Ke-JMM-1 ) ;
8356: LD_EXP 1
8360: PPUSH
8361: LD_STRING D3Ke-JMM-1
8363: PPUSH
8364: CALL_OW 88
// Say ( Kurt , D3Ke-Kurt-1 ) ;
8368: LD_EXP 24
8372: PPUSH
8373: LD_STRING D3Ke-Kurt-1
8375: PPUSH
8376: CALL_OW 88
// cr := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8380: LD_ADDR_VAR 0 11
8384: PUSH
8385: LD_INT 200
8387: PUSH
8388: LD_INT 120
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: PUSH
8395: LD_EXP 26
8399: PUSH
8400: LD_INT 1
8402: PLUS
8403: ARRAY
8404: ST_TO_ADDR
// sb := [ 200 , 120 ] [ KurtStatus + 1 ] ;
8405: LD_ADDR_VAR 0 12
8409: PUSH
8410: LD_INT 200
8412: PUSH
8413: LD_INT 120
8415: PUSH
8416: EMPTY
8417: LIST
8418: LIST
8419: PUSH
8420: LD_EXP 26
8424: PUSH
8425: LD_INT 1
8427: PLUS
8428: ARRAY
8429: ST_TO_ADDR
// payForHelp := true ;
8430: LD_ADDR_VAR 0 14
8434: PUSH
8435: LD_INT 1
8437: ST_TO_ADDR
// end ; if dec2 = 4 then
8438: LD_VAR 0 4
8442: PUSH
8443: LD_INT 4
8445: EQUAL
8446: IFFALSE 8681
// begin Say ( JMM , D3Kc1-JMM-1 ) ;
8448: LD_EXP 1
8452: PPUSH
8453: LD_STRING D3Kc1-JMM-1
8455: PPUSH
8456: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-1 ) ;
8460: LD_EXP 24
8464: PPUSH
8465: LD_STRING D3Kc1-Kurt-1
8467: PPUSH
8468: CALL_OW 88
// Say ( JMM , D3Kc1-JMM-2 ) ;
8472: LD_EXP 1
8476: PPUSH
8477: LD_STRING D3Kc1-JMM-2
8479: PPUSH
8480: CALL_OW 88
// Say ( Kurt , D3Kc1-Kurt-2 ) ;
8484: LD_EXP 24
8488: PPUSH
8489: LD_STRING D3Kc1-Kurt-2
8491: PPUSH
8492: CALL_OW 88
// askSiberite = 1 ;
8496: LD_ADDR_EXP 32
8500: PUSH
8501: LD_INT 1
8503: ST_TO_ADDR
// dec2 = SelectiveQuery ( Q2b , [ 1 , 2 , 3 ] ) ;
8504: LD_ADDR_VAR 0 4
8508: PUSH
8509: LD_STRING Q2b
8511: PPUSH
8512: LD_INT 1
8514: PUSH
8515: LD_INT 2
8517: PUSH
8518: LD_INT 3
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: LIST
8525: PPUSH
8526: CALL_OW 98
8530: ST_TO_ADDR
// if dec2 = 1 then
8531: LD_VAR 0 4
8535: PUSH
8536: LD_INT 1
8538: EQUAL
8539: IFFALSE 8573
// begin Say ( JMM , D4a-JMM-1 ) ;
8541: LD_EXP 1
8545: PPUSH
8546: LD_STRING D4a-JMM-1
8548: PPUSH
8549: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8553: LD_EXP 24
8557: PPUSH
8558: LD_STRING D4b-Kurt-1
8560: PPUSH
8561: CALL_OW 88
// warWithLegion = 1 ;
8565: LD_ADDR_EXP 30
8569: PUSH
8570: LD_INT 1
8572: ST_TO_ADDR
// end ; if dec2 = 2 then
8573: LD_VAR 0 4
8577: PUSH
8578: LD_INT 2
8580: EQUAL
8581: IFFALSE 8615
// begin Say ( JMM , D4b-JMM-1 ) ;
8583: LD_EXP 1
8587: PPUSH
8588: LD_STRING D4b-JMM-1
8590: PPUSH
8591: CALL_OW 88
// Say ( Kurt , D4b-Kurt-1 ) ;
8595: LD_EXP 24
8599: PPUSH
8600: LD_STRING D4b-Kurt-1
8602: PPUSH
8603: CALL_OW 88
// warWithLegion = 1 ;
8607: LD_ADDR_EXP 30
8611: PUSH
8612: LD_INT 1
8614: ST_TO_ADDR
// end ; if dec2 = 3 then
8615: LD_VAR 0 4
8619: PUSH
8620: LD_INT 3
8622: EQUAL
8623: IFFALSE 8681
// begin Say ( JMM , D4c-JMM-1 ) ;
8625: LD_EXP 1
8629: PPUSH
8630: LD_STRING D4c-JMM-1
8632: PPUSH
8633: CALL_OW 88
// Say ( Kurt , D4c-Kurt-1 ) ;
8637: LD_EXP 24
8641: PPUSH
8642: LD_STRING D4c-Kurt-1
8644: PPUSH
8645: CALL_OW 88
// Say ( JMM , D4c-JMM-2 ) ;
8649: LD_EXP 1
8653: PPUSH
8654: LD_STRING D4c-JMM-2
8656: PPUSH
8657: CALL_OW 88
// Say ( Kurt , D4c-Kurt-2 ) ;
8661: LD_EXP 24
8665: PPUSH
8666: LD_STRING D4c-Kurt-2
8668: PPUSH
8669: CALL_OW 88
// fakeInfo = 1 ;
8673: LD_ADDR_EXP 31
8677: PUSH
8678: LD_INT 1
8680: ST_TO_ADDR
// end ; end ; if payForNeutral or payForHelp then
8681: LD_VAR 0 13
8685: PUSH
8686: LD_VAR 0 14
8690: OR
8691: IFFALSE 8992
// begin for i in tmp do
8693: LD_ADDR_VAR 0 2
8697: PUSH
8698: LD_VAR 0 5
8702: PUSH
8703: FOR_IN
8704: IFFALSE 8990
// begin tmp2 := GetResourceType ( GetBase ( i ) , 1 ) ;
8706: LD_ADDR_VAR 0 6
8710: PUSH
8711: LD_VAR 0 2
8715: PPUSH
8716: CALL_OW 274
8720: PPUSH
8721: LD_INT 1
8723: PPUSH
8724: CALL_OW 275
8728: ST_TO_ADDR
// tmp3 := GetResourceType ( GetBase ( i ) , 3 ) ;
8729: LD_ADDR_VAR 0 7
8733: PUSH
8734: LD_VAR 0 2
8738: PPUSH
8739: CALL_OW 274
8743: PPUSH
8744: LD_INT 3
8746: PPUSH
8747: CALL_OW 275
8751: ST_TO_ADDR
// if cr then
8752: LD_VAR 0 11
8756: IFFALSE 8870
// begin if tmp2 and tmp2 < cr then
8758: LD_VAR 0 6
8762: PUSH
8763: LD_VAR 0 6
8767: PUSH
8768: LD_VAR 0 11
8772: LESS
8773: AND
8774: IFFALSE 8822
// begin SetResourceType ( GetBase ( i ) , 1 , cr - tmp2 ) ;
8776: LD_VAR 0 2
8780: PPUSH
8781: CALL_OW 274
8785: PPUSH
8786: LD_INT 1
8788: PPUSH
8789: LD_VAR 0 11
8793: PUSH
8794: LD_VAR 0 6
8798: MINUS
8799: PPUSH
8800: CALL_OW 277
// cr := cr - tmp2 ;
8804: LD_ADDR_VAR 0 11
8808: PUSH
8809: LD_VAR 0 11
8813: PUSH
8814: LD_VAR 0 6
8818: MINUS
8819: ST_TO_ADDR
// end else
8820: GO 8870
// if tmp2 > cr then
8822: LD_VAR 0 6
8826: PUSH
8827: LD_VAR 0 11
8831: GREATER
8832: IFFALSE 8870
// begin SetResourceType ( GetBase ( i ) , 1 , tmp2 - cr ) ;
8834: LD_VAR 0 2
8838: PPUSH
8839: CALL_OW 274
8843: PPUSH
8844: LD_INT 1
8846: PPUSH
8847: LD_VAR 0 6
8851: PUSH
8852: LD_VAR 0 11
8856: MINUS
8857: PPUSH
8858: CALL_OW 277
// cr := 0 ;
8862: LD_ADDR_VAR 0 11
8866: PUSH
8867: LD_INT 0
8869: ST_TO_ADDR
// end ; end ; if sb then
8870: LD_VAR 0 12
8874: IFFALSE 8988
// begin if tmp3 and tmp3 < sb then
8876: LD_VAR 0 7
8880: PUSH
8881: LD_VAR 0 7
8885: PUSH
8886: LD_VAR 0 12
8890: LESS
8891: AND
8892: IFFALSE 8940
// begin SetResourceType ( GetBase ( i ) , 3 , sb - tmp3 ) ;
8894: LD_VAR 0 2
8898: PPUSH
8899: CALL_OW 274
8903: PPUSH
8904: LD_INT 3
8906: PPUSH
8907: LD_VAR 0 12
8911: PUSH
8912: LD_VAR 0 7
8916: MINUS
8917: PPUSH
8918: CALL_OW 277
// sb := sb - tmp3 ;
8922: LD_ADDR_VAR 0 12
8926: PUSH
8927: LD_VAR 0 12
8931: PUSH
8932: LD_VAR 0 7
8936: MINUS
8937: ST_TO_ADDR
// end else
8938: GO 8988
// if tmp3 > sb then
8940: LD_VAR 0 7
8944: PUSH
8945: LD_VAR 0 12
8949: GREATER
8950: IFFALSE 8988
// begin SetResourceType ( GetBase ( i ) , 3 , tmp3 - sb ) ;
8952: LD_VAR 0 2
8956: PPUSH
8957: CALL_OW 274
8961: PPUSH
8962: LD_INT 3
8964: PPUSH
8965: LD_VAR 0 7
8969: PUSH
8970: LD_VAR 0 12
8974: MINUS
8975: PPUSH
8976: CALL_OW 277
// sb := 0 ;
8980: LD_ADDR_VAR 0 12
8984: PUSH
8985: LD_INT 0
8987: ST_TO_ADDR
// end ; end ; end ;
8988: GO 8703
8990: POP
8991: POP
// end ; end ; DialogueOff ;
8992: CALL_OW 7
// RemoveSeeing ( 167 , 121 , 1 ) ;
8996: LD_INT 167
8998: PPUSH
8999: LD_INT 121
9001: PPUSH
9002: LD_INT 1
9004: PPUSH
9005: CALL_OW 331
// ComEnterUnit ( Kurt , KurtVeh ) ;
9009: LD_EXP 24
9013: PPUSH
9014: LD_EXP 25
9018: PPUSH
9019: CALL_OW 120
// wait ( 0 0$1 ) ;
9023: LD_INT 35
9025: PPUSH
9026: CALL_OW 67
// ComMoveToArea ( KurtVeh , PlayerSpawn ) ;
9030: LD_EXP 25
9034: PPUSH
9035: LD_INT 4
9037: PPUSH
9038: CALL_OW 113
// wait ( 0 0$3 ) ;
9042: LD_INT 105
9044: PPUSH
9045: CALL_OW 67
// RemoveUnit ( Kurt ) ;
9049: LD_EXP 24
9053: PPUSH
9054: CALL_OW 64
// RemoveUnit ( KurtVeh ) ;
9058: LD_EXP 25
9062: PPUSH
9063: CALL_OW 64
// wait ( 0 0$3 ) ;
9067: LD_INT 105
9069: PPUSH
9070: CALL_OW 67
// if payForHelp then
9074: LD_VAR 0 14
9078: IFFALSE 9084
// PrepareLegionForPlayer ;
9080: CALL 4483 0 0
// end ;
9084: LD_VAR 0 1
9088: RET
// every 0 0$10 trigger warWithLegion = 1 do
9089: LD_EXP 30
9093: PUSH
9094: LD_INT 1
9096: EQUAL
9097: IFFALSE 9106
9099: GO 9101
9101: DISABLE
// PrepareAttackLegion ;
9102: CALL 5147 0 0
9106: END
// every 0 0$1 trigger IsPlaced ( amCargo1 ) and not GetCargo ( amCargo1 , 1 ) and not GetCargo ( amCargo1 , 2 ) and not GetCargo ( amCargo1 , 3 ) do
9107: LD_EXP 15
9111: PPUSH
9112: CALL_OW 305
9116: PUSH
9117: LD_EXP 15
9121: PPUSH
9122: LD_INT 1
9124: PPUSH
9125: CALL_OW 289
9129: NOT
9130: AND
9131: PUSH
9132: LD_EXP 15
9136: PPUSH
9137: LD_INT 2
9139: PPUSH
9140: CALL_OW 289
9144: NOT
9145: AND
9146: PUSH
9147: LD_EXP 15
9151: PPUSH
9152: LD_INT 3
9154: PPUSH
9155: CALL_OW 289
9159: NOT
9160: AND
9161: IFFALSE 9178
9163: GO 9165
9165: DISABLE
// SetSide ( amCargo1 , 4 ) ;
9166: LD_EXP 15
9170: PPUSH
9171: LD_INT 4
9173: PPUSH
9174: CALL_OW 235
9178: END
// every 0 0$1 trigger IsPlaced ( amCargo2 ) and not GetCargo ( amCargo2 , 1 ) and not GetCargo ( amCargo2 , 2 ) and not GetCargo ( amCargo2 , 3 ) do
9179: LD_EXP 16
9183: PPUSH
9184: CALL_OW 305
9188: PUSH
9189: LD_EXP 16
9193: PPUSH
9194: LD_INT 1
9196: PPUSH
9197: CALL_OW 289
9201: NOT
9202: AND
9203: PUSH
9204: LD_EXP 16
9208: PPUSH
9209: LD_INT 2
9211: PPUSH
9212: CALL_OW 289
9216: NOT
9217: AND
9218: PUSH
9219: LD_EXP 16
9223: PPUSH
9224: LD_INT 3
9226: PPUSH
9227: CALL_OW 289
9231: NOT
9232: AND
9233: IFFALSE 9250
9235: GO 9237
9237: DISABLE
// SetSide ( amCargo2 , 4 ) ;
9238: LD_EXP 16
9242: PPUSH
9243: LD_INT 4
9245: PPUSH
9246: CALL_OW 235
9250: END
// every 0 0$1 trigger IsPlaced ( amCargo3 ) and not GetCargo ( amCargo3 , 1 ) and not GetCargo ( amCargo3 , 2 ) and not GetCargo ( amCargo3 , 3 ) do
9251: LD_EXP 17
9255: PPUSH
9256: CALL_OW 305
9260: PUSH
9261: LD_EXP 17
9265: PPUSH
9266: LD_INT 1
9268: PPUSH
9269: CALL_OW 289
9273: NOT
9274: AND
9275: PUSH
9276: LD_EXP 17
9280: PPUSH
9281: LD_INT 2
9283: PPUSH
9284: CALL_OW 289
9288: NOT
9289: AND
9290: PUSH
9291: LD_EXP 17
9295: PPUSH
9296: LD_INT 3
9298: PPUSH
9299: CALL_OW 289
9303: NOT
9304: AND
9305: IFFALSE 9322
9307: GO 9309
9309: DISABLE
// SetSide ( amCargo3 , 4 ) ;
9310: LD_EXP 17
9314: PPUSH
9315: LD_INT 4
9317: PPUSH
9318: CALL_OW 235
9322: END
// every 0 0$1 trigger IsPlaced ( amCargo4 ) and not GetCargo ( amCargo4 , 1 ) and not GetCargo ( amCargo4 , 2 ) and not GetCargo ( amCargo4 , 3 ) do
9323: LD_EXP 18
9327: PPUSH
9328: CALL_OW 305
9332: PUSH
9333: LD_EXP 18
9337: PPUSH
9338: LD_INT 1
9340: PPUSH
9341: CALL_OW 289
9345: NOT
9346: AND
9347: PUSH
9348: LD_EXP 18
9352: PPUSH
9353: LD_INT 2
9355: PPUSH
9356: CALL_OW 289
9360: NOT
9361: AND
9362: PUSH
9363: LD_EXP 18
9367: PPUSH
9368: LD_INT 3
9370: PPUSH
9371: CALL_OW 289
9375: NOT
9376: AND
9377: IFFALSE 9394
9379: GO 9381
9381: DISABLE
// SetSide ( amCargo4 , 4 ) ;
9382: LD_EXP 18
9386: PPUSH
9387: LD_INT 4
9389: PPUSH
9390: CALL_OW 235
9394: END
// every 0 0$1 trigger IsPlaced ( amCargo5 ) and not GetCargo ( amCargo5 , 1 ) and not GetCargo ( amCargo5 , 2 ) and not GetCargo ( amCargo5 , 3 ) and not GetCargo ( amCargo5 , 2 ) do
9395: LD_EXP 19
9399: PPUSH
9400: CALL_OW 305
9404: PUSH
9405: LD_EXP 19
9409: PPUSH
9410: LD_INT 1
9412: PPUSH
9413: CALL_OW 289
9417: NOT
9418: AND
9419: PUSH
9420: LD_EXP 19
9424: PPUSH
9425: LD_INT 2
9427: PPUSH
9428: CALL_OW 289
9432: NOT
9433: AND
9434: PUSH
9435: LD_EXP 19
9439: PPUSH
9440: LD_INT 3
9442: PPUSH
9443: CALL_OW 289
9447: NOT
9448: AND
9449: PUSH
9450: LD_EXP 19
9454: PPUSH
9455: LD_INT 2
9457: PPUSH
9458: CALL_OW 289
9462: NOT
9463: AND
9464: IFFALSE 9481
9466: GO 9468
9468: DISABLE
// SetSide ( amCargo5 , 4 ) ;
9469: LD_EXP 19
9473: PPUSH
9474: LD_INT 4
9476: PPUSH
9477: CALL_OW 235
9481: END
// every 0 0$1 trigger IsPlaced ( amCargo6 ) and not GetCargo ( amCargo6 , 1 ) and not GetCargo ( amCargo6 , 2 ) and not GetCargo ( amCargo6 , 3 ) do
9482: LD_EXP 20
9486: PPUSH
9487: CALL_OW 305
9491: PUSH
9492: LD_EXP 20
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: CALL_OW 289
9504: NOT
9505: AND
9506: PUSH
9507: LD_EXP 20
9511: PPUSH
9512: LD_INT 2
9514: PPUSH
9515: CALL_OW 289
9519: NOT
9520: AND
9521: PUSH
9522: LD_EXP 20
9526: PPUSH
9527: LD_INT 3
9529: PPUSH
9530: CALL_OW 289
9534: NOT
9535: AND
9536: IFFALSE 9553
9538: GO 9540
9540: DISABLE
// SetSide ( amCargo6 , 4 ) ;
9541: LD_EXP 20
9545: PPUSH
9546: LD_INT 4
9548: PPUSH
9549: CALL_OW 235
9553: END
// every 0 0$1 trigger IsPlaced ( amCargo7 ) and not GetCargo ( amCargo7 , 1 ) and not GetCargo ( amCargo7 , 2 ) and not GetCargo ( amCargo7 , 3 ) do
9554: LD_EXP 21
9558: PPUSH
9559: CALL_OW 305
9563: PUSH
9564: LD_EXP 21
9568: PPUSH
9569: LD_INT 1
9571: PPUSH
9572: CALL_OW 289
9576: NOT
9577: AND
9578: PUSH
9579: LD_EXP 21
9583: PPUSH
9584: LD_INT 2
9586: PPUSH
9587: CALL_OW 289
9591: NOT
9592: AND
9593: PUSH
9594: LD_EXP 21
9598: PPUSH
9599: LD_INT 3
9601: PPUSH
9602: CALL_OW 289
9606: NOT
9607: AND
9608: IFFALSE 9625
9610: GO 9612
9612: DISABLE
// SetSide ( amCargo7 , 4 ) ;
9613: LD_EXP 21
9617: PPUSH
9618: LD_INT 4
9620: PPUSH
9621: CALL_OW 235
9625: END
// every 0 0$1 do var i ;
9626: GO 9628
9628: DISABLE
9629: LD_INT 0
9631: PPUSH
// begin enable ;
9632: ENABLE
// for i in FilterAllUnits ( [ f_side , 4 ] ) do
9633: LD_ADDR_VAR 0 1
9637: PUSH
9638: LD_INT 22
9640: PUSH
9641: LD_INT 4
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: PPUSH
9648: CALL_OW 69
9652: PUSH
9653: FOR_IN
9654: IFFALSE 9693
// begin ComMoveToArea ( i , PlayerSpawn ) ;
9656: LD_VAR 0 1
9660: PPUSH
9661: LD_INT 4
9663: PPUSH
9664: CALL_OW 113
// if IsInArea ( i , PlayerSpawn ) then
9668: LD_VAR 0 1
9672: PPUSH
9673: LD_INT 4
9675: PPUSH
9676: CALL_OW 308
9680: IFFALSE 9691
// RemoveUnit ( i ) ;
9682: LD_VAR 0 1
9686: PPUSH
9687: CALL_OW 64
// end ;
9691: GO 9653
9693: POP
9694: POP
// end ;
9695: PPOPN 1
9697: END
// every 0 0$1 trigger secondPass = 1 do var i , enemyVehs , dec ;
9698: LD_EXP 27
9702: PUSH
9703: LD_INT 1
9705: EQUAL
9706: IFFALSE 10145
9708: GO 9710
9710: DISABLE
9711: LD_INT 0
9713: PPUSH
9714: PPUSH
9715: PPUSH
// begin enable ;
9716: ENABLE
// enemyVehs = FilterUnitsInArea ( HillArea1 , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) ;
9717: LD_ADDR_VAR 0 2
9721: PUSH
9722: LD_INT 12
9724: PPUSH
9725: LD_INT 22
9727: PUSH
9728: LD_INT 3
9730: PUSH
9731: EMPTY
9732: LIST
9733: LIST
9734: PUSH
9735: LD_INT 21
9737: PUSH
9738: LD_INT 2
9740: PUSH
9741: EMPTY
9742: LIST
9743: LIST
9744: PUSH
9745: EMPTY
9746: LIST
9747: LIST
9748: PPUSH
9749: CALL_OW 70
9753: ST_TO_ADDR
// for i in enemyVehs do
9754: LD_ADDR_VAR 0 1
9758: PUSH
9759: LD_VAR 0 2
9763: PUSH
9764: FOR_IN
9765: IFFALSE 10143
// begin if See ( 1 , i ) then
9767: LD_INT 1
9769: PPUSH
9770: LD_VAR 0 1
9774: PPUSH
9775: CALL_OW 292
9779: IFFALSE 10141
// begin disable ;
9781: DISABLE
// DialogueOn ;
9782: CALL_OW 6
// CenterNowOnUnits ( i ) ;
9786: LD_VAR 0 1
9790: PPUSH
9791: CALL_OW 87
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
9795: LD_INT 22
9797: PUSH
9798: LD_INT 1
9800: PUSH
9801: EMPTY
9802: LIST
9803: LIST
9804: PUSH
9805: LD_INT 26
9807: PUSH
9808: LD_INT 1
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: PUSH
9815: LD_INT 2
9817: PUSH
9818: LD_INT 25
9820: PUSH
9821: LD_INT 1
9823: PUSH
9824: EMPTY
9825: LIST
9826: LIST
9827: PUSH
9828: LD_INT 25
9830: PUSH
9831: LD_INT 2
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: PUSH
9838: LD_INT 25
9840: PUSH
9841: LD_INT 3
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 25
9850: PUSH
9851: LD_INT 4
9853: PUSH
9854: EMPTY
9855: LIST
9856: LIST
9857: PUSH
9858: LD_INT 25
9860: PUSH
9861: LD_INT 5
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: LD_INT 25
9870: PUSH
9871: LD_INT 8
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: PUSH
9878: EMPTY
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: PUSH
9887: EMPTY
9888: LIST
9889: LIST
9890: LIST
9891: PPUSH
9892: CALL_OW 69
9896: PPUSH
9897: LD_STRING DT1-Sol1-1
9899: PPUSH
9900: LD_STRING DT1-FSol1-1
9902: PPUSH
9903: CALL 12157 0 3
// dec = ShowQuery2 ;
9907: LD_ADDR_VAR 0 3
9911: PUSH
9912: CALL 12700 0 0
9916: ST_TO_ADDR
// if dec = 1 then
9917: LD_VAR 0 3
9921: PUSH
9922: LD_INT 1
9924: EQUAL
9925: IFFALSE 10031
// begin Say ( JMM , D2-JMM-1 ) ;
9927: LD_EXP 1
9931: PPUSH
9932: LD_STRING D2-JMM-1
9934: PPUSH
9935: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
9939: LD_EXP 22
9943: PPUSH
9944: LD_STRING D2-Pow-1
9946: PPUSH
9947: CALL_OW 94
// Say ( JMM , D2a-JMM-1 ) ;
9951: LD_EXP 1
9955: PPUSH
9956: LD_STRING D2a-JMM-1
9958: PPUSH
9959: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-1 ) ;
9963: LD_EXP 22
9967: PPUSH
9968: LD_STRING D2a-Pow-1
9970: PPUSH
9971: CALL_OW 94
// Say ( JMM , D2a-JMM-2 ) ;
9975: LD_EXP 1
9979: PPUSH
9980: LD_STRING D2a-JMM-2
9982: PPUSH
9983: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-2 ) ;
9987: LD_EXP 22
9991: PPUSH
9992: LD_STRING D2a-Pow-2
9994: PPUSH
9995: CALL_OW 94
// Say ( JMM , D2a-JMM-3 ) ;
9999: LD_EXP 1
10003: PPUSH
10004: LD_STRING D2a-JMM-3
10006: PPUSH
10007: CALL_OW 88
// SayRadio ( Powell , D2a-Pow-3 ) ;
10011: LD_EXP 22
10015: PPUSH
10016: LD_STRING D2a-Pow-3
10018: PPUSH
10019: CALL_OW 94
// secondPass = 2 ;
10023: LD_ADDR_EXP 27
10027: PUSH
10028: LD_INT 2
10030: ST_TO_ADDR
// end ; if dec = 2 then
10031: LD_VAR 0 3
10035: PUSH
10036: LD_INT 2
10038: EQUAL
10039: IFFALSE 10133
// begin Say ( JMM , D2-JMM-1 ) ;
10041: LD_EXP 1
10045: PPUSH
10046: LD_STRING D2-JMM-1
10048: PPUSH
10049: CALL_OW 88
// SayRadio ( Powell , D2-Pow-1 ) ;
10053: LD_EXP 22
10057: PPUSH
10058: LD_STRING D2-Pow-1
10060: PPUSH
10061: CALL_OW 94
// Say ( JMM , D2b-JMM-1 ) ;
10065: LD_EXP 1
10069: PPUSH
10070: LD_STRING D2b-JMM-1
10072: PPUSH
10073: CALL_OW 88
// SayRadio ( Powell , D2b-Pow-1 ) ;
10077: LD_EXP 22
10081: PPUSH
10082: LD_STRING D2b-Pow-1
10084: PPUSH
10085: CALL_OW 94
// Say ( JMM , D2c-JMM-1 ) ;
10089: LD_EXP 1
10093: PPUSH
10094: LD_STRING D2c-JMM-1
10096: PPUSH
10097: CALL_OW 88
// SayRadio ( Powell , D2c-Pow-1 ) ;
10101: LD_EXP 22
10105: PPUSH
10106: LD_STRING D2c-Pow-1
10108: PPUSH
10109: CALL_OW 94
// Say ( JMM , D2c-JMM-2 ) ;
10113: LD_EXP 1
10117: PPUSH
10118: LD_STRING D2c-JMM-2
10120: PPUSH
10121: CALL_OW 88
// secondPass = 2 ;
10125: LD_ADDR_EXP 27
10129: PUSH
10130: LD_INT 2
10132: ST_TO_ADDR
// end ; DialogueOff ;
10133: CALL_OW 7
// exit ;
10137: POP
10138: POP
10139: GO 10145
// end ; end ;
10141: GO 9764
10143: POP
10144: POP
// end ;
10145: PPOPN 3
10147: END
// every 0 0$1 trigger vehicleTeleported = 1 do var i , vehicles ;
10148: LD_EXP 28
10152: PUSH
10153: LD_INT 1
10155: EQUAL
10156: IFFALSE 10389
10158: GO 10160
10160: DISABLE
10161: LD_INT 0
10163: PPUSH
10164: PPUSH
// begin vehicles = FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) ;
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 11
10172: PPUSH
10173: LD_INT 22
10175: PUSH
10176: LD_INT 3
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 24
10185: PUSH
10186: LD_INT 250
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: PPUSH
10197: CALL_OW 70
10201: ST_TO_ADDR
// enable ;
10202: ENABLE
// for i in vehicles do
10203: LD_ADDR_VAR 0 1
10207: PUSH
10208: LD_VAR 0 2
10212: PUSH
10213: FOR_IN
10214: IFFALSE 10387
// begin if See ( 1 , i ) and vehicleTeleported = 1 and tpCounter <= 4 then
10216: LD_INT 1
10218: PPUSH
10219: LD_VAR 0 1
10223: PPUSH
10224: CALL_OW 292
10228: PUSH
10229: LD_EXP 28
10233: PUSH
10234: LD_INT 1
10236: EQUAL
10237: AND
10238: PUSH
10239: LD_EXP 29
10243: PUSH
10244: LD_INT 4
10246: LESSEQUAL
10247: AND
10248: IFFALSE 10385
// begin disable ;
10250: DISABLE
// DialogueOn ;
10251: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1-Sol1-1 , DT1-FSol1-1 ) ;
10255: LD_INT 22
10257: PUSH
10258: LD_INT 1
10260: PUSH
10261: EMPTY
10262: LIST
10263: LIST
10264: PUSH
10265: LD_INT 26
10267: PUSH
10268: LD_INT 1
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: PUSH
10275: LD_INT 2
10277: PUSH
10278: LD_INT 25
10280: PUSH
10281: LD_INT 1
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: PUSH
10288: LD_INT 25
10290: PUSH
10291: LD_INT 2
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 25
10300: PUSH
10301: LD_INT 3
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 25
10310: PUSH
10311: LD_INT 4
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 25
10320: PUSH
10321: LD_INT 5
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: LD_INT 25
10330: PUSH
10331: LD_INT 8
10333: PUSH
10334: EMPTY
10335: LIST
10336: LIST
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: LIST
10344: LIST
10345: LIST
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: LIST
10351: PPUSH
10352: CALL_OW 69
10356: PPUSH
10357: LD_STRING DT1-Sol1-1
10359: PPUSH
10360: LD_STRING DT1-FSol1-1
10362: PPUSH
10363: CALL 12157 0 3
// Say ( JMM , DT1-JMM-1 ) ;
10367: LD_EXP 1
10371: PPUSH
10372: LD_STRING DT1-JMM-1
10374: PPUSH
10375: CALL_OW 88
// DialogueOff ;
10379: CALL_OW 7
// break ;
10383: GO 10387
// end ; end ;
10385: GO 10213
10387: POP
10388: POP
// end ;
10389: PPOPN 2
10391: END
// every 0 0$10 trigger vehicleTeleported = 1 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 251 ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_human ] ] ] ) = 0 and tpCounter do
10392: LD_EXP 28
10396: PUSH
10397: LD_INT 1
10399: EQUAL
10400: PUSH
10401: LD_INT 11
10403: PPUSH
10404: LD_INT 22
10406: PUSH
10407: LD_INT 3
10409: PUSH
10410: EMPTY
10411: LIST
10412: LIST
10413: PUSH
10414: LD_INT 24
10416: PUSH
10417: LD_INT 251
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 2
10426: PUSH
10427: LD_INT 21
10429: PUSH
10430: LD_INT 2
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: LD_INT 21
10439: PUSH
10440: LD_INT 1
10442: PUSH
10443: EMPTY
10444: LIST
10445: LIST
10446: PUSH
10447: EMPTY
10448: LIST
10449: LIST
10450: LIST
10451: PUSH
10452: EMPTY
10453: LIST
10454: LIST
10455: LIST
10456: PPUSH
10457: CALL_OW 70
10461: PUSH
10462: LD_INT 0
10464: EQUAL
10465: AND
10466: PUSH
10467: LD_EXP 29
10471: AND
10472: IFFALSE 10629
10474: GO 10476
10476: DISABLE
// begin vehicleTeleported = 2 ;
10477: LD_ADDR_EXP 28
10481: PUSH
10482: LD_INT 2
10484: ST_TO_ADDR
// DialogueOn ;
10485: CALL_OW 6
// Say ( JMM , DT1a-JMM-1 ) ;
10489: LD_EXP 1
10493: PPUSH
10494: LD_STRING DT1a-JMM-1
10496: PPUSH
10497: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT1a-Sol1-1 , DT1a-FSol1-1 ) ;
10501: LD_INT 22
10503: PUSH
10504: LD_INT 1
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 26
10513: PUSH
10514: LD_INT 1
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: PUSH
10521: LD_INT 2
10523: PUSH
10524: LD_INT 25
10526: PUSH
10527: LD_INT 1
10529: PUSH
10530: EMPTY
10531: LIST
10532: LIST
10533: PUSH
10534: LD_INT 25
10536: PUSH
10537: LD_INT 2
10539: PUSH
10540: EMPTY
10541: LIST
10542: LIST
10543: PUSH
10544: LD_INT 25
10546: PUSH
10547: LD_INT 3
10549: PUSH
10550: EMPTY
10551: LIST
10552: LIST
10553: PUSH
10554: LD_INT 25
10556: PUSH
10557: LD_INT 4
10559: PUSH
10560: EMPTY
10561: LIST
10562: LIST
10563: PUSH
10564: LD_INT 25
10566: PUSH
10567: LD_INT 5
10569: PUSH
10570: EMPTY
10571: LIST
10572: LIST
10573: PUSH
10574: LD_INT 25
10576: PUSH
10577: LD_INT 8
10579: PUSH
10580: EMPTY
10581: LIST
10582: LIST
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: LIST
10590: LIST
10591: LIST
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: LIST
10597: PPUSH
10598: CALL_OW 69
10602: PPUSH
10603: LD_STRING DT1a-Sol1-1
10605: PPUSH
10606: LD_STRING DT1a-FSol1-1
10608: PPUSH
10609: CALL 12157 0 3
// Say ( JMM , DT1a-JMM-2 ) ;
10613: LD_EXP 1
10617: PPUSH
10618: LD_STRING DT1a-JMM-2
10620: PPUSH
10621: CALL_OW 88
// DialogueOff ;
10625: CALL_OW 7
// end ;
10629: END
// every 0 0$2 trigger vehicleTeleported = 3 and FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_see , 1 ] ] ) do var i , vehicles , speaker ;
10630: LD_EXP 28
10634: PUSH
10635: LD_INT 3
10637: EQUAL
10638: PUSH
10639: LD_INT 11
10641: PPUSH
10642: LD_INT 22
10644: PUSH
10645: LD_INT 3
10647: PUSH
10648: EMPTY
10649: LIST
10650: LIST
10651: PUSH
10652: LD_INT 101
10654: PUSH
10655: LD_INT 1
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: PPUSH
10666: CALL_OW 70
10670: AND
10671: IFFALSE 10952
10673: GO 10675
10675: DISABLE
10676: LD_INT 0
10678: PPUSH
10679: PPUSH
10680: PPUSH
// begin wait ( 0 0$0.3 ) ;
10681: LD_INT 10
10683: PPUSH
10684: CALL_OW 67
// DialogueOn ;
10688: CALL_OW 6
// speaker := DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT2-Sol1-1 , DT2-FSol1-1 ) ;
10692: LD_ADDR_VAR 0 3
10696: PUSH
10697: LD_INT 22
10699: PUSH
10700: LD_INT 1
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: PUSH
10707: LD_INT 26
10709: PUSH
10710: LD_INT 1
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: PUSH
10717: LD_INT 2
10719: PUSH
10720: LD_INT 25
10722: PUSH
10723: LD_INT 1
10725: PUSH
10726: EMPTY
10727: LIST
10728: LIST
10729: PUSH
10730: LD_INT 25
10732: PUSH
10733: LD_INT 2
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: PUSH
10740: LD_INT 25
10742: PUSH
10743: LD_INT 3
10745: PUSH
10746: EMPTY
10747: LIST
10748: LIST
10749: PUSH
10750: LD_INT 25
10752: PUSH
10753: LD_INT 4
10755: PUSH
10756: EMPTY
10757: LIST
10758: LIST
10759: PUSH
10760: LD_INT 25
10762: PUSH
10763: LD_INT 5
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: PUSH
10770: LD_INT 25
10772: PUSH
10773: LD_INT 8
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: PUSH
10780: EMPTY
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: LIST
10793: PPUSH
10794: CALL_OW 69
10798: PPUSH
10799: LD_STRING DT2-Sol1-1
10801: PPUSH
10802: LD_STRING DT2-FSol1-1
10804: PPUSH
10805: CALL 12157 0 3
10809: ST_TO_ADDR
// DialogueOff ;
10810: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
10814: LD_INT 35
10816: PPUSH
10817: CALL_OW 67
// until FilterUnitsInArea ( OutsideArea1 , [ [ f_side , 3 ] , [ f_lives , 250 ] ] ) = 0 ;
10821: LD_INT 11
10823: PPUSH
10824: LD_INT 22
10826: PUSH
10827: LD_INT 3
10829: PUSH
10830: EMPTY
10831: LIST
10832: LIST
10833: PUSH
10834: LD_INT 24
10836: PUSH
10837: LD_INT 250
10839: PUSH
10840: EMPTY
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PPUSH
10848: CALL_OW 70
10852: PUSH
10853: LD_INT 0
10855: EQUAL
10856: IFFALSE 10814
// wait ( 0 0$2 ) ;
10858: LD_INT 70
10860: PPUSH
10861: CALL_OW 67
// vehicleTeleported = 4 ;
10865: LD_ADDR_EXP 28
10869: PUSH
10870: LD_INT 4
10872: ST_TO_ADDR
// DialogueOn ;
10873: CALL_OW 6
// Say ( JMM , DT2a-JMM-1 ) ;
10877: LD_EXP 1
10881: PPUSH
10882: LD_STRING DT2a-JMM-1
10884: PPUSH
10885: CALL_OW 88
// if speaker then
10889: LD_VAR 0 3
10893: IFFALSE 10936
// if GetSex ( speaker ) = 1 then
10895: LD_VAR 0 3
10899: PPUSH
10900: CALL_OW 258
10904: PUSH
10905: LD_INT 1
10907: EQUAL
10908: IFFALSE 10924
// Say ( speaker , DT2a-Sol1-1 ) else
10910: LD_VAR 0 3
10914: PPUSH
10915: LD_STRING DT2a-Sol1-1
10917: PPUSH
10918: CALL_OW 88
10922: GO 10936
// Say ( speaker , DT2a-FSol1-1 ) ;
10924: LD_VAR 0 3
10928: PPUSH
10929: LD_STRING DT2a-FSol1-1
10931: PPUSH
10932: CALL_OW 88
// Say ( Donaldson , DT2a-Don-1 ) ;
10936: LD_EXP 3
10940: PPUSH
10941: LD_STRING DT2a-Don-1
10943: PPUSH
10944: CALL_OW 88
// DialogueOff ;
10948: CALL_OW 7
// end ;
10952: PPOPN 3
10954: END
// every 0 0$1 trigger SeeXY ( 1 , 45 , 74 ) do
10955: LD_INT 1
10957: PPUSH
10958: LD_INT 45
10960: PPUSH
10961: LD_INT 74
10963: PPUSH
10964: CALL_OW 293
10968: IFFALSE 11132
10970: GO 10972
10972: DISABLE
// begin DialogueOn ;
10973: CALL_OW 6
// CenterOnXY ( 36 , 55 ) ;
10977: LD_INT 36
10979: PPUSH
10980: LD_INT 55
10982: PPUSH
10983: CALL_OW 84
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , D5-Sol1-1 , D5-FSol1- ) ;
10987: LD_INT 22
10989: PUSH
10990: LD_INT 1
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 26
10999: PUSH
11000: LD_INT 1
11002: PUSH
11003: EMPTY
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 2
11009: PUSH
11010: LD_INT 25
11012: PUSH
11013: LD_INT 1
11015: PUSH
11016: EMPTY
11017: LIST
11018: LIST
11019: PUSH
11020: LD_INT 25
11022: PUSH
11023: LD_INT 2
11025: PUSH
11026: EMPTY
11027: LIST
11028: LIST
11029: PUSH
11030: LD_INT 25
11032: PUSH
11033: LD_INT 3
11035: PUSH
11036: EMPTY
11037: LIST
11038: LIST
11039: PUSH
11040: LD_INT 25
11042: PUSH
11043: LD_INT 4
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: PUSH
11050: LD_INT 25
11052: PUSH
11053: LD_INT 5
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: LD_INT 25
11062: PUSH
11063: LD_INT 8
11065: PUSH
11066: EMPTY
11067: LIST
11068: LIST
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: EMPTY
11080: LIST
11081: LIST
11082: LIST
11083: PPUSH
11084: CALL_OW 69
11088: PPUSH
11089: LD_STRING D5-Sol1-1
11091: PPUSH
11092: LD_STRING D5-FSol1-
11094: PPUSH
11095: CALL 12157 0 3
// if warWithLegion and IsOk ( Donaldson ) then
11099: LD_EXP 30
11103: PUSH
11104: LD_EXP 3
11108: PPUSH
11109: CALL_OW 302
11113: AND
11114: IFFALSE 11128
// Say ( Donaldson , D5-Don-1 ) ;
11116: LD_EXP 3
11120: PPUSH
11121: LD_STRING D5-Don-1
11123: PPUSH
11124: CALL_OW 88
// DialogueOff ;
11128: CALL_OW 7
// end ;
11132: END
// every 0 0$1 trigger See ( 1 , ruteleprt ) or See ( 1 , rutp ) do
11133: LD_INT 1
11135: PPUSH
11136: LD_INT 10
11138: PPUSH
11139: CALL_OW 292
11143: PUSH
11144: LD_INT 1
11146: PPUSH
11147: LD_INT 137
11149: PPUSH
11150: CALL_OW 292
11154: OR
11155: IFFALSE 11299
11157: GO 11159
11159: DISABLE
// begin DialogueOn ;
11160: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , DT3-Sol1-1 , DT3-FSol1-1 ) ;
11164: LD_INT 22
11166: PUSH
11167: LD_INT 1
11169: PUSH
11170: EMPTY
11171: LIST
11172: LIST
11173: PUSH
11174: LD_INT 26
11176: PUSH
11177: LD_INT 1
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: PUSH
11184: LD_INT 2
11186: PUSH
11187: LD_INT 25
11189: PUSH
11190: LD_INT 1
11192: PUSH
11193: EMPTY
11194: LIST
11195: LIST
11196: PUSH
11197: LD_INT 25
11199: PUSH
11200: LD_INT 2
11202: PUSH
11203: EMPTY
11204: LIST
11205: LIST
11206: PUSH
11207: LD_INT 25
11209: PUSH
11210: LD_INT 3
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 25
11219: PUSH
11220: LD_INT 4
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: LD_INT 25
11229: PUSH
11230: LD_INT 5
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: PUSH
11237: LD_INT 25
11239: PUSH
11240: LD_INT 8
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: PPUSH
11261: CALL_OW 69
11265: PPUSH
11266: LD_STRING DT3-Sol1-1
11268: PPUSH
11269: LD_STRING DT3-FSol1-1
11271: PPUSH
11272: CALL 12157 0 3
// Say ( JMM , DT3-JMM-1 ) ;
11276: LD_EXP 1
11280: PPUSH
11281: LD_STRING DT3-JMM-1
11283: PPUSH
11284: CALL_OW 88
// DialogueOff ;
11288: CALL_OW 7
// ChangeMissionObjectives ( M2 ) ;
11292: LD_STRING M2
11294: PPUSH
11295: CALL_OW 337
// end ;
11299: END
// every 0 0$1 trigger ruEscape = 0 do var i ;
11300: LD_EXP 42
11304: PUSH
11305: LD_INT 0
11307: EQUAL
11308: IFFALSE 11391
11310: GO 11312
11312: DISABLE
11313: LD_INT 0
11315: PPUSH
// begin enable ;
11316: ENABLE
// for i in FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) do
11317: LD_ADDR_VAR 0 1
11321: PUSH
11322: LD_INT 10
11324: PPUSH
11325: LD_INT 22
11327: PUSH
11328: LD_INT 3
11330: PUSH
11331: EMPTY
11332: LIST
11333: LIST
11334: PUSH
11335: LD_INT 21
11337: PUSH
11338: LD_INT 2
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: PUSH
11345: LD_INT 58
11347: PUSH
11348: EMPTY
11349: LIST
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: PPUSH
11356: CALL_OW 70
11360: PUSH
11361: FOR_IN
11362: IFFALSE 11389
// if GetLives ( i ) < 1000 then
11364: LD_VAR 0 1
11368: PPUSH
11369: CALL_OW 256
11373: PUSH
11374: LD_INT 1000
11376: LESS
11377: IFFALSE 11387
// ruEscape = 1 ;
11379: LD_ADDR_EXP 42
11383: PUSH
11384: LD_INT 1
11386: ST_TO_ADDR
11387: GO 11361
11389: POP
11390: POP
// end ;
11391: PPOPN 1
11393: END
// every 0 0$1 trigger IsDying ( ruheadlab ) or IsDying ( rueastdepot ) or FilterUnitsInArea ( EscapeTriggerArea , [ f_side , 1 ] ) > 0 or ruEscape = 1 do var i , j , vehs ;
11394: LD_INT 3
11396: PPUSH
11397: CALL_OW 303
11401: PUSH
11402: LD_INT 4
11404: PPUSH
11405: CALL_OW 303
11409: OR
11410: PUSH
11411: LD_INT 22
11413: PPUSH
11414: LD_INT 22
11416: PUSH
11417: LD_INT 1
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: PPUSH
11424: CALL_OW 70
11428: PUSH
11429: LD_INT 0
11431: GREATER
11432: OR
11433: PUSH
11434: LD_EXP 42
11438: PUSH
11439: LD_INT 1
11441: EQUAL
11442: OR
11443: IFFALSE 11674
11445: GO 11447
11447: DISABLE
11448: LD_INT 0
11450: PPUSH
11451: PPUSH
11452: PPUSH
// begin ruAI = 0 ;
11453: LD_ADDR_EXP 41
11457: PUSH
11458: LD_INT 0
11460: ST_TO_ADDR
// vehs = FilterUnitsInArea ( RuEastBase , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
11461: LD_ADDR_VAR 0 3
11465: PUSH
11466: LD_INT 10
11468: PPUSH
11469: LD_INT 22
11471: PUSH
11472: LD_INT 3
11474: PUSH
11475: EMPTY
11476: LIST
11477: LIST
11478: PUSH
11479: LD_INT 21
11481: PUSH
11482: LD_INT 2
11484: PUSH
11485: EMPTY
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 58
11491: PUSH
11492: EMPTY
11493: LIST
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: LIST
11499: PPUSH
11500: CALL_OW 70
11504: ST_TO_ADDR
// ComExitBuilding ( RuScientists ) ;
11505: LD_EXP 34
11509: PPUSH
11510: CALL_OW 122
// wait ( 0 0$1 ) ;
11514: LD_INT 35
11516: PPUSH
11517: CALL_OW 67
// DialogueOn ;
11521: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
11525: LD_EXP 1
11529: PPUSH
11530: LD_STRING D6-JMM-1
11532: PPUSH
11533: CALL_OW 88
// DialogueOff ;
11537: CALL_OW 7
// if vehs > 0 then
11541: LD_VAR 0 3
11545: PUSH
11546: LD_INT 0
11548: GREATER
11549: IFFALSE 11619
// for i := 1 to RuScientists do
11551: LD_ADDR_VAR 0 1
11555: PUSH
11556: DOUBLE
11557: LD_INT 1
11559: DEC
11560: ST_TO_ADDR
11561: LD_EXP 34
11565: PUSH
11566: FOR_TO
11567: IFFALSE 11615
// ComEnterUnit ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , vehs [ i ] ) else
11569: LD_EXP 34
11573: PUSH
11574: LD_VAR 0 1
11578: ARRAY
11579: PPUSH
11580: LD_INT 3
11582: PUSH
11583: LD_INT 60
11585: PUSH
11586: EMPTY
11587: LIST
11588: PUSH
11589: EMPTY
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 72
11597: PPUSH
11598: LD_VAR 0 3
11602: PUSH
11603: LD_VAR 0 1
11607: ARRAY
11608: PPUSH
11609: CALL_OW 120
11613: GO 11566
11615: POP
11616: POP
11617: GO 11674
// ComMoveToArea ( UnitFilter ( RuScientists [ i ] , [ f_not , [ f_hastask ] ] ) , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
11619: LD_EXP 34
11623: PUSH
11624: LD_VAR 0 1
11628: ARRAY
11629: PPUSH
11630: LD_INT 3
11632: PUSH
11633: LD_INT 60
11635: PUSH
11636: EMPTY
11637: LIST
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PPUSH
11643: CALL_OW 72
11647: PPUSH
11648: LD_INT 13
11650: PUSH
11651: LD_INT 14
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 1
11660: PPUSH
11661: LD_INT 2
11663: PPUSH
11664: CALL_OW 12
11668: ARRAY
11669: PPUSH
11670: CALL_OW 113
// end ;
11674: PPOPN 3
11676: END
// every 0 0$0.3 trigger ruAI = 0 do var i , unit , veh , tmp ;
11677: LD_EXP 41
11681: PUSH
11682: LD_INT 0
11684: EQUAL
11685: IFFALSE 12057
11687: GO 11689
11689: DISABLE
11690: LD_INT 0
11692: PPUSH
11693: PPUSH
11694: PPUSH
11695: PPUSH
// begin enable ;
11696: ENABLE
// if UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) or FilterAllUnits ( [ [ f_control , control_manual ] , [ f_nation , 3 ] , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ] ) then
11697: LD_EXP 34
11701: PPUSH
11702: LD_INT 2
11704: PUSH
11705: LD_INT 95
11707: PUSH
11708: LD_INT 13
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: PUSH
11715: LD_INT 95
11717: PUSH
11718: LD_INT 14
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: LIST
11729: PPUSH
11730: CALL_OW 72
11734: PUSH
11735: LD_INT 33
11737: PUSH
11738: LD_INT 1
11740: PUSH
11741: EMPTY
11742: LIST
11743: LIST
11744: PUSH
11745: LD_INT 23
11747: PUSH
11748: LD_INT 3
11750: PUSH
11751: EMPTY
11752: LIST
11753: LIST
11754: PUSH
11755: LD_INT 2
11757: PUSH
11758: LD_INT 95
11760: PUSH
11761: LD_INT 13
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: PUSH
11768: LD_INT 95
11770: PUSH
11771: LD_INT 14
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: LIST
11782: PUSH
11783: EMPTY
11784: LIST
11785: LIST
11786: LIST
11787: PPUSH
11788: CALL_OW 69
11792: OR
11793: IFFALSE 11982
// begin unit := UnitFilter ( RuScientists , [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] ) [ 1 ] ;
11795: LD_ADDR_VAR 0 2
11799: PUSH
11800: LD_EXP 34
11804: PPUSH
11805: LD_INT 2
11807: PUSH
11808: LD_INT 95
11810: PUSH
11811: LD_INT 13
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: LD_INT 95
11820: PUSH
11821: LD_INT 14
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: PPUSH
11833: CALL_OW 72
11837: PUSH
11838: LD_INT 1
11840: ARRAY
11841: ST_TO_ADDR
// if not unit then
11842: LD_VAR 0 2
11846: NOT
11847: IFFALSE 11982
// begin tmp := FilterAllUnits ( [ [ f_or , [ f_inarea , EscapeArea1 ] , [ f_inarea , EscapeArea2 ] ] , [ f_control , control_manual ] , [ f_nation , 3 ] ] ) ;
11849: LD_ADDR_VAR 0 4
11853: PUSH
11854: LD_INT 2
11856: PUSH
11857: LD_INT 95
11859: PUSH
11860: LD_INT 13
11862: PUSH
11863: EMPTY
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 95
11869: PUSH
11870: LD_INT 14
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: PUSH
11882: LD_INT 33
11884: PUSH
11885: LD_INT 1
11887: PUSH
11888: EMPTY
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 23
11894: PUSH
11895: LD_INT 3
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: LIST
11906: PPUSH
11907: CALL_OW 69
11911: ST_TO_ADDR
// if not tmp then
11912: LD_VAR 0 4
11916: NOT
11917: IFFALSE 11921
// exit ;
11919: GO 12057
// for i in tmp do
11921: LD_ADDR_VAR 0 1
11925: PUSH
11926: LD_VAR 0 4
11930: PUSH
11931: FOR_IN
11932: IFFALSE 11980
// if IsDrivenBy ( i ) in RuScientists then
11934: LD_VAR 0 1
11938: PPUSH
11939: CALL_OW 311
11943: PUSH
11944: LD_EXP 34
11948: IN
11949: IFFALSE 11978
// begin unit := IsDrivenBy ( i ) ;
11951: LD_ADDR_VAR 0 2
11955: PUSH
11956: LD_VAR 0 1
11960: PPUSH
11961: CALL_OW 311
11965: ST_TO_ADDR
// veh := i ;
11966: LD_ADDR_VAR 0 3
11970: PUSH
11971: LD_VAR 0 1
11975: ST_TO_ADDR
// break ;
11976: GO 11980
// end ;
11978: GO 11931
11980: POP
11981: POP
// end ; end ; if not unit then
11982: LD_VAR 0 2
11986: NOT
11987: IFFALSE 11991
// exit ;
11989: GO 12057
// RuScientists = RuScientists diff unit ;
11991: LD_ADDR_EXP 34
11995: PUSH
11996: LD_EXP 34
12000: PUSH
12001: LD_VAR 0 2
12005: DIFF
12006: ST_TO_ADDR
// RemoveUnit ( unit ) ;
12007: LD_VAR 0 2
12011: PPUSH
12012: CALL_OW 64
// if veh then
12016: LD_VAR 0 3
12020: IFFALSE 12057
// begin if GetWeapon ( veh ) = 49 then
12022: LD_VAR 0 3
12026: PPUSH
12027: CALL_OW 264
12031: PUSH
12032: LD_INT 49
12034: EQUAL
12035: IFFALSE 12048
// KillUnit ( veh ) else
12037: LD_VAR 0 3
12041: PPUSH
12042: CALL_OW 66
12046: GO 12057
// RemoveUnit ( veh ) ;
12048: LD_VAR 0 3
12052: PPUSH
12053: CALL_OW 64
// end ; end ; end_of_file
12057: PPOPN 4
12059: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
12060: LD_INT 0
12062: PPUSH
12063: PPUSH
// if exist_mode then
12064: LD_VAR 0 2
12068: IFFALSE 12087
// unit := CreateCharacter ( ident ) else
12070: LD_ADDR_VAR 0 4
12074: PUSH
12075: LD_VAR 0 1
12079: PPUSH
12080: CALL_OW 34
12084: ST_TO_ADDR
12085: GO 12102
// unit := NewCharacter ( ident ) ;
12087: LD_ADDR_VAR 0 4
12091: PUSH
12092: LD_VAR 0 1
12096: PPUSH
12097: CALL_OW 25
12101: ST_TO_ADDR
// result := unit ;
12102: LD_ADDR_VAR 0 3
12106: PUSH
12107: LD_VAR 0 4
12111: ST_TO_ADDR
// end ;
12112: LD_VAR 0 3
12116: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
12117: LD_INT 0
12119: PPUSH
12120: PPUSH
// for i in charactersList do
12121: LD_ADDR_VAR 0 4
12125: PUSH
12126: LD_VAR 0 1
12130: PUSH
12131: FOR_IN
12132: IFFALSE 12150
// SaveCharacters ( i , ident ) ;
12134: LD_VAR 0 4
12138: PPUSH
12139: LD_VAR 0 2
12143: PPUSH
12144: CALL_OW 38
12148: GO 12131
12150: POP
12151: POP
// end ;
12152: LD_VAR 0 3
12156: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
12157: LD_INT 0
12159: PPUSH
12160: PPUSH
12161: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Denis , Gladstone , Cornel , Powell ] ;
12162: LD_ADDR_VAR 0 1
12166: PUSH
12167: LD_VAR 0 1
12171: PUSH
12172: LD_EXP 1
12176: PUSH
12177: LD_EXP 7
12181: PUSH
12182: LD_EXP 3
12186: PUSH
12187: LD_EXP 4
12191: PUSH
12192: LD_EXP 5
12196: PUSH
12197: LD_EXP 2
12201: PUSH
12202: LD_EXP 12
12206: PUSH
12207: LD_EXP 13
12211: PUSH
12212: LD_EXP 9
12216: PUSH
12217: LD_EXP 11
12221: PUSH
12222: LD_EXP 6
12226: PUSH
12227: LD_EXP 8
12231: PUSH
12232: LD_EXP 10
12236: PUSH
12237: LD_EXP 22
12241: PUSH
12242: EMPTY
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: DIFF
12258: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
12259: LD_ADDR_VAR 0 6
12263: PUSH
12264: LD_VAR 0 1
12268: PUSH
12269: LD_INT 1
12271: PPUSH
12272: LD_VAR 0 1
12276: PPUSH
12277: CALL_OW 12
12281: ARRAY
12282: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
12283: LD_VAR 0 6
12287: PPUSH
12288: CALL_OW 258
12292: PUSH
12293: LD_INT 1
12295: EQUAL
12296: IFFALSE 12314
// Say ( speaker , dialogMID ) else
12298: LD_VAR 0 6
12302: PPUSH
12303: LD_VAR 0 2
12307: PPUSH
12308: CALL_OW 88
12312: GO 12328
// Say ( speaker , dialogFID ) ;
12314: LD_VAR 0 6
12318: PPUSH
12319: LD_VAR 0 3
12323: PPUSH
12324: CALL_OW 88
// result := speaker ;
12328: LD_ADDR_VAR 0 4
12332: PUSH
12333: LD_VAR 0 6
12337: ST_TO_ADDR
// end ;
12338: LD_VAR 0 4
12342: RET
// export function PrepareDifficulty ; var tmp ; begin
12343: LD_INT 0
12345: PPUSH
12346: PPUSH
// if Difficulty = 1 then
12347: LD_OWVAR 67
12351: PUSH
12352: LD_INT 1
12354: EQUAL
12355: IFFALSE 12373
// begin RuSolMinLevel = 8 ;
12357: LD_ADDR_EXP 36
12361: PUSH
12362: LD_INT 8
12364: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12365: LD_ADDR_EXP 37
12369: PUSH
12370: LD_INT 10
12372: ST_TO_ADDR
// end ; if Difficulty = 2 then
12373: LD_OWVAR 67
12377: PUSH
12378: LD_INT 2
12380: EQUAL
12381: IFFALSE 12475
// begin RuSolMinLevel = 9 ;
12383: LD_ADDR_EXP 36
12387: PUSH
12388: LD_INT 9
12390: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12391: LD_ADDR_EXP 37
12395: PUSH
12396: LD_INT 10
12398: ST_TO_ADDR
// uc_nation = 3 ;
12399: LD_ADDR_OWVAR 21
12403: PUSH
12404: LD_INT 3
12406: ST_TO_ADDR
// uc_side = 3 ;
12407: LD_ADDR_OWVAR 20
12411: PUSH
12412: LD_INT 3
12414: ST_TO_ADDR
// bc_level = 10 ;
12415: LD_ADDR_OWVAR 43
12419: PUSH
12420: LD_INT 10
12422: ST_TO_ADDR
// bc_type = b_turret ;
12423: LD_ADDR_OWVAR 42
12427: PUSH
12428: LD_INT 33
12430: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12431: LD_ADDR_VAR 0 2
12435: PUSH
12436: LD_INT 86
12438: PPUSH
12439: LD_INT 34
12441: PPUSH
12442: LD_INT 2
12444: PPUSH
12445: CALL_OW 47
12449: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12450: LD_VAR 0 2
12454: PPUSH
12455: LD_INT 49
12457: PPUSH
12458: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12462: LD_INT 64
12464: PPUSH
12465: LD_INT 3
12467: PPUSH
12468: LD_INT 1
12470: PPUSH
12471: CALL_OW 322
// end ; if Difficulty = 3 then
12475: LD_OWVAR 67
12479: PUSH
12480: LD_INT 3
12482: EQUAL
12483: IFFALSE 12621
// begin RuSolMinLevel = 10 ;
12485: LD_ADDR_EXP 36
12489: PUSH
12490: LD_INT 10
12492: ST_TO_ADDR
// RuSolMaxLevel = 10 ;
12493: LD_ADDR_EXP 37
12497: PUSH
12498: LD_INT 10
12500: ST_TO_ADDR
// uc_nation = 3 ;
12501: LD_ADDR_OWVAR 21
12505: PUSH
12506: LD_INT 3
12508: ST_TO_ADDR
// uc_side = 3 ;
12509: LD_ADDR_OWVAR 20
12513: PUSH
12514: LD_INT 3
12516: ST_TO_ADDR
// bc_level = 10 ;
12517: LD_ADDR_OWVAR 43
12521: PUSH
12522: LD_INT 10
12524: ST_TO_ADDR
// bc_type = b_turret ;
12525: LD_ADDR_OWVAR 42
12529: PUSH
12530: LD_INT 33
12532: ST_TO_ADDR
// tmp = CreateAndPlaceBuildingXYD ( 86 , 34 , 2 ) ;
12533: LD_ADDR_VAR 0 2
12537: PUSH
12538: LD_INT 86
12540: PPUSH
12541: LD_INT 34
12543: PPUSH
12544: LD_INT 2
12546: PPUSH
12547: CALL_OW 47
12551: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12552: LD_VAR 0 2
12556: PPUSH
12557: LD_INT 49
12559: PPUSH
12560: CALL_OW 431
// tmp = CreateAndPlaceBuildingXYD ( 93 , 31 , 2 ) ;
12564: LD_ADDR_VAR 0 2
12568: PUSH
12569: LD_INT 93
12571: PPUSH
12572: LD_INT 31
12574: PPUSH
12575: LD_INT 2
12577: PPUSH
12578: CALL_OW 47
12582: ST_TO_ADDR
// PlaceWeaponTurret ( tmp , 49 ) ;
12583: LD_VAR 0 2
12587: PPUSH
12588: LD_INT 49
12590: PPUSH
12591: CALL_OW 431
// SetTech ( 64 , 3 , state_enabled ) ;
12595: LD_INT 64
12597: PPUSH
12598: LD_INT 3
12600: PPUSH
12601: LD_INT 1
12603: PPUSH
12604: CALL_OW 322
// SetTech ( 65 , 3 , state_enabled ) ;
12608: LD_INT 65
12610: PPUSH
12611: LD_INT 3
12613: PPUSH
12614: LD_INT 1
12616: PPUSH
12617: CALL_OW 322
// end ; end ;
12621: LD_VAR 0 1
12625: RET
// export function ShowQuery1 ; begin
12626: LD_INT 0
12628: PPUSH
// case query ( Q1 ) of 1 :
12629: LD_STRING Q1
12631: PPUSH
12632: CALL_OW 97
12636: PUSH
12637: LD_INT 1
12639: DOUBLE
12640: EQUAL
12641: IFTRUE 12645
12643: GO 12656
12645: POP
// result = 1 ; 2 :
12646: LD_ADDR_VAR 0 1
12650: PUSH
12651: LD_INT 1
12653: ST_TO_ADDR
12654: GO 12695
12656: LD_INT 2
12658: DOUBLE
12659: EQUAL
12660: IFTRUE 12664
12662: GO 12675
12664: POP
// result = 2 ; 3 :
12665: LD_ADDR_VAR 0 1
12669: PUSH
12670: LD_INT 2
12672: ST_TO_ADDR
12673: GO 12695
12675: LD_INT 3
12677: DOUBLE
12678: EQUAL
12679: IFTRUE 12683
12681: GO 12694
12683: POP
// result = 3 ; end ;
12684: LD_ADDR_VAR 0 1
12688: PUSH
12689: LD_INT 3
12691: ST_TO_ADDR
12692: GO 12695
12694: POP
// end ;
12695: LD_VAR 0 1
12699: RET
// export function ShowQuery2 ; begin
12700: LD_INT 0
12702: PPUSH
// case query ( Q1a ) of 1 :
12703: LD_STRING Q1a
12705: PPUSH
12706: CALL_OW 97
12710: PUSH
12711: LD_INT 1
12713: DOUBLE
12714: EQUAL
12715: IFTRUE 12719
12717: GO 12730
12719: POP
// result = 1 ; 2 :
12720: LD_ADDR_VAR 0 1
12724: PUSH
12725: LD_INT 1
12727: ST_TO_ADDR
12728: GO 12769
12730: LD_INT 2
12732: DOUBLE
12733: EQUAL
12734: IFTRUE 12738
12736: GO 12749
12738: POP
// result = 2 ; 3 :
12739: LD_ADDR_VAR 0 1
12743: PUSH
12744: LD_INT 2
12746: ST_TO_ADDR
12747: GO 12769
12749: LD_INT 3
12751: DOUBLE
12752: EQUAL
12753: IFTRUE 12757
12755: GO 12768
12757: POP
// result = 3 ; end ;
12758: LD_ADDR_VAR 0 1
12762: PUSH
12763: LD_INT 3
12765: ST_TO_ADDR
12766: GO 12769
12768: POP
// end ;
12769: LD_VAR 0 1
12773: RET
// export function RespawnInside ( side , nation , build , skill , class , count ) ; var i , l , un , tmp ; begin
12774: LD_INT 0
12776: PPUSH
12777: PPUSH
12778: PPUSH
12779: PPUSH
12780: PPUSH
// for i = 1 to count do
12781: LD_ADDR_VAR 0 8
12785: PUSH
12786: DOUBLE
12787: LD_INT 1
12789: DEC
12790: ST_TO_ADDR
12791: LD_VAR 0 6
12795: PUSH
12796: FOR_TO
12797: IFFALSE 12878
// begin uc_side = side ;
12799: LD_ADDR_OWVAR 20
12803: PUSH
12804: LD_VAR 0 1
12808: ST_TO_ADDR
// uc_nation = nation ;
12809: LD_ADDR_OWVAR 21
12813: PUSH
12814: LD_VAR 0 2
12818: ST_TO_ADDR
// hc_gallery =  ;
12819: LD_ADDR_OWVAR 33
12823: PUSH
12824: LD_STRING 
12826: ST_TO_ADDR
// hc_name =  ;
12827: LD_ADDR_OWVAR 26
12831: PUSH
12832: LD_STRING 
12834: ST_TO_ADDR
// PrepareHuman ( false , class , skill ) ;
12835: LD_INT 0
12837: PPUSH
12838: LD_VAR 0 5
12842: PPUSH
12843: LD_VAR 0 4
12847: PPUSH
12848: CALL_OW 380
// un = CreateHuman ;
12852: LD_ADDR_VAR 0 10
12856: PUSH
12857: CALL_OW 44
12861: ST_TO_ADDR
// PlaceHumanInUnit ( un , build ) ;
12862: LD_VAR 0 10
12866: PPUSH
12867: LD_VAR 0 3
12871: PPUSH
12872: CALL_OW 52
// end ;
12876: GO 12796
12878: POP
12879: POP
// end ;
12880: LD_VAR 0 7
12884: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout , ru_tech_list ; begin
12885: LD_INT 0
12887: PPUSH
12888: PPUSH
12889: PPUSH
12890: PPUSH
12891: PPUSH
// ru_tech_list := [ 48 , 49 , 50 , 20 , 1 , 51 , 52 , 69 , 39 , 34 , 40 , 53 , 71 , 57 , 58 , 44 , 32 , 27 , 23 , 33 , 59 , 54 , 55 , 56 , 63 , 64 , 65 , 30 , 31 , 21 , 22 , 25 ] ;
12892: LD_ADDR_VAR 0 8
12896: PUSH
12897: LD_INT 48
12899: PUSH
12900: LD_INT 49
12902: PUSH
12903: LD_INT 50
12905: PUSH
12906: LD_INT 20
12908: PUSH
12909: LD_INT 1
12911: PUSH
12912: LD_INT 51
12914: PUSH
12915: LD_INT 52
12917: PUSH
12918: LD_INT 69
12920: PUSH
12921: LD_INT 39
12923: PUSH
12924: LD_INT 34
12926: PUSH
12927: LD_INT 40
12929: PUSH
12930: LD_INT 53
12932: PUSH
12933: LD_INT 71
12935: PUSH
12936: LD_INT 57
12938: PUSH
12939: LD_INT 58
12941: PUSH
12942: LD_INT 44
12944: PUSH
12945: LD_INT 32
12947: PUSH
12948: LD_INT 27
12950: PUSH
12951: LD_INT 23
12953: PUSH
12954: LD_INT 33
12956: PUSH
12957: LD_INT 59
12959: PUSH
12960: LD_INT 54
12962: PUSH
12963: LD_INT 55
12965: PUSH
12966: LD_INT 56
12968: PUSH
12969: LD_INT 63
12971: PUSH
12972: LD_INT 64
12974: PUSH
12975: LD_INT 65
12977: PUSH
12978: LD_INT 30
12980: PUSH
12981: LD_INT 31
12983: PUSH
12984: LD_INT 21
12986: PUSH
12987: LD_INT 22
12989: PUSH
12990: LD_INT 25
12992: PUSH
12993: EMPTY
12994: LIST
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: LIST
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: ST_TO_ADDR
// for i = 1 to ru_tech_list do
13027: LD_ADDR_VAR 0 5
13031: PUSH
13032: DOUBLE
13033: LD_INT 1
13035: DEC
13036: ST_TO_ADDR
13037: LD_VAR 0 8
13041: PUSH
13042: FOR_TO
13043: IFFALSE 13119
// if GetTech ( ru_tech_list [ i ] , side ) = state_enabled and TechNationAvailable ( ru_tech_list [ i ] , nation ) = true then
13045: LD_VAR 0 8
13049: PUSH
13050: LD_VAR 0 5
13054: ARRAY
13055: PPUSH
13056: LD_VAR 0 1
13060: PPUSH
13061: CALL_OW 321
13065: PUSH
13066: LD_INT 1
13068: EQUAL
13069: PUSH
13070: LD_VAR 0 8
13074: PUSH
13075: LD_VAR 0 5
13079: ARRAY
13080: PPUSH
13081: LD_VAR 0 3
13085: PPUSH
13086: CALL_OW 482
13090: PUSH
13091: LD_INT 1
13093: EQUAL
13094: AND
13095: IFFALSE 13117
// AddComResearch ( lab , ru_tech_list [ i ] ) ;
13097: LD_VAR 0 2
13101: PPUSH
13102: LD_VAR 0 8
13106: PUSH
13107: LD_VAR 0 5
13111: ARRAY
13112: PPUSH
13113: CALL_OW 184
13117: GO 13042
13119: POP
13120: POP
// end ;
13121: LD_VAR 0 4
13125: RET
// export function RepairAndRebuildBase ( side , building , area , destroyedBuildings ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
13126: LD_INT 0
13128: PPUSH
13129: PPUSH
13130: PPUSH
13131: PPUSH
13132: PPUSH
13133: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
13134: LD_ADDR_VAR 0 8
13138: PUSH
13139: LD_VAR 0 2
13143: PPUSH
13144: CALL_OW 313
13148: ST_TO_ADDR
// engineerOkOutside = FilterUnitsInArea ( area , [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 750 ] , [ f_not , [ f_inside ] ] ] ) ;
13149: LD_ADDR_VAR 0 9
13153: PUSH
13154: LD_VAR 0 3
13158: PPUSH
13159: LD_INT 22
13161: PUSH
13162: LD_VAR 0 1
13166: PUSH
13167: EMPTY
13168: LIST
13169: LIST
13170: PUSH
13171: LD_INT 25
13173: PUSH
13174: LD_INT 2
13176: PUSH
13177: EMPTY
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 24
13183: PUSH
13184: LD_INT 750
13186: PUSH
13187: EMPTY
13188: LIST
13189: LIST
13190: PUSH
13191: LD_INT 3
13193: PUSH
13194: LD_INT 54
13196: PUSH
13197: EMPTY
13198: LIST
13199: PUSH
13200: EMPTY
13201: LIST
13202: LIST
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: PPUSH
13210: CALL_OW 70
13214: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( area , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
13215: LD_ADDR_VAR 0 6
13219: PUSH
13220: LD_VAR 0 3
13224: PPUSH
13225: LD_INT 22
13227: PUSH
13228: LD_VAR 0 1
13232: PUSH
13233: EMPTY
13234: LIST
13235: LIST
13236: PUSH
13237: LD_INT 21
13239: PUSH
13240: LD_INT 3
13242: PUSH
13243: EMPTY
13244: LIST
13245: LIST
13246: PUSH
13247: LD_INT 3
13249: PUSH
13250: LD_INT 24
13252: PUSH
13253: LD_INT 1000
13255: PUSH
13256: EMPTY
13257: LIST
13258: LIST
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: LIST
13268: PUSH
13269: EMPTY
13270: LIST
13271: PPUSH
13272: CALL_OW 70
13276: ST_TO_ADDR
// if not buildings_list and not FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 250 ] ] ) then
13277: LD_VAR 0 6
13281: NOT
13282: PUSH
13283: LD_INT 22
13285: PUSH
13286: LD_VAR 0 1
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 25
13297: PUSH
13298: LD_INT 2
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 24
13307: PUSH
13308: LD_INT 250
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: PUSH
13315: EMPTY
13316: LIST
13317: LIST
13318: LIST
13319: PPUSH
13320: CALL_OW 69
13324: NOT
13325: AND
13326: IFFALSE 13330
// exit ;
13328: GO 13512
// if buildings_list > 0 and engineerOkInside then
13330: LD_VAR 0 6
13334: PUSH
13335: LD_INT 0
13337: GREATER
13338: PUSH
13339: LD_VAR 0 8
13343: AND
13344: IFFALSE 13355
// ComExitBuilding ( engineerOkInside ) ;
13346: LD_VAR 0 8
13350: PPUSH
13351: CALL_OW 122
// if buildings_list > 0 and engineerOkOutside > 0 then
13355: LD_VAR 0 6
13359: PUSH
13360: LD_INT 0
13362: GREATER
13363: PUSH
13364: LD_VAR 0 9
13368: PUSH
13369: LD_INT 0
13371: GREATER
13372: AND
13373: IFFALSE 13393
// ComRepairBuilding ( engineerOkOutside , buildings_list [ 1 ] ) ;
13375: LD_VAR 0 9
13379: PPUSH
13380: LD_VAR 0 6
13384: PUSH
13385: LD_INT 1
13387: ARRAY
13388: PPUSH
13389: CALL_OW 130
// if buildings_list = 0 and destroyedBuildings = 0 and engineerOkOutside > 0 then
13393: LD_VAR 0 6
13397: PUSH
13398: LD_INT 0
13400: EQUAL
13401: PUSH
13402: LD_VAR 0 4
13406: PUSH
13407: LD_INT 0
13409: EQUAL
13410: AND
13411: PUSH
13412: LD_VAR 0 9
13416: PUSH
13417: LD_INT 0
13419: GREATER
13420: AND
13421: IFFALSE 13437
// ComEnterUnit ( engineerOkOutside , building ) ;
13423: LD_VAR 0 9
13427: PPUSH
13428: LD_VAR 0 2
13432: PPUSH
13433: CALL_OW 120
// if engineerOkOutside > 0 and buildings_list = 0 and destroyedBuildings > 0 then
13437: LD_VAR 0 9
13441: PUSH
13442: LD_INT 0
13444: GREATER
13445: PUSH
13446: LD_VAR 0 6
13450: PUSH
13451: LD_INT 0
13453: EQUAL
13454: AND
13455: PUSH
13456: LD_VAR 0 4
13460: PUSH
13461: LD_INT 0
13463: GREATER
13464: AND
13465: IFFALSE 13512
// ComBuild ( engineerOkOutside , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
13467: LD_VAR 0 9
13471: PPUSH
13472: LD_VAR 0 4
13476: PUSH
13477: LD_INT 1
13479: ARRAY
13480: PPUSH
13481: LD_VAR 0 4
13485: PUSH
13486: LD_INT 2
13488: ARRAY
13489: PPUSH
13490: LD_VAR 0 4
13494: PUSH
13495: LD_INT 3
13497: ARRAY
13498: PPUSH
13499: LD_VAR 0 4
13503: PUSH
13504: LD_INT 4
13506: ARRAY
13507: PPUSH
13508: CALL_OW 145
// end ;
13512: LD_VAR 0 5
13516: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
13517: LD_INT 0
13519: PPUSH
13520: PPUSH
13521: PPUSH
13522: PPUSH
13523: PPUSH
13524: PPUSH
13525: PPUSH
13526: PPUSH
13527: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) diff [ RuScientists ] ;
13528: LD_ADDR_VAR 0 6
13532: PUSH
13533: LD_INT 22
13535: PUSH
13536: LD_VAR 0 1
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 25
13547: PUSH
13548: LD_INT 4
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: PUSH
13555: LD_INT 24
13557: PUSH
13558: LD_INT 251
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: PUSH
13565: EMPTY
13566: LIST
13567: LIST
13568: LIST
13569: PPUSH
13570: CALL_OW 69
13574: PUSH
13575: LD_EXP 34
13579: PUSH
13580: EMPTY
13581: LIST
13582: DIFF
13583: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) diff [ RuScientists ] ;
13584: LD_ADDR_VAR 0 7
13588: PUSH
13589: LD_VAR 0 3
13593: PPUSH
13594: LD_INT 22
13596: PUSH
13597: LD_VAR 0 1
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 25
13608: PUSH
13609: LD_INT 4
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 50
13618: PUSH
13619: EMPTY
13620: LIST
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: PPUSH
13627: CALL_OW 70
13631: PUSH
13632: LD_EXP 34
13636: PUSH
13637: EMPTY
13638: LIST
13639: DIFF
13640: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
13641: LD_ADDR_VAR 0 10
13645: PUSH
13646: LD_VAR 0 3
13650: PPUSH
13651: LD_INT 22
13653: PUSH
13654: LD_VAR 0 1
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PUSH
13663: LD_INT 21
13665: PUSH
13666: LD_INT 1
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 3
13675: PUSH
13676: LD_INT 24
13678: PUSH
13679: LD_INT 750
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PUSH
13690: EMPTY
13691: LIST
13692: LIST
13693: LIST
13694: PPUSH
13695: CALL_OW 70
13699: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13700: LD_ADDR_VAR 0 11
13704: PUSH
13705: LD_VAR 0 2
13709: PPUSH
13710: LD_INT 22
13712: PUSH
13713: LD_VAR 0 1
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: PUSH
13722: LD_INT 21
13724: PUSH
13725: LD_INT 1
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: PUSH
13732: LD_INT 3
13734: PUSH
13735: LD_INT 24
13737: PUSH
13738: LD_INT 1000
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: PUSH
13745: EMPTY
13746: LIST
13747: LIST
13748: PUSH
13749: EMPTY
13750: LIST
13751: LIST
13752: LIST
13753: PPUSH
13754: CALL_OW 70
13758: ST_TO_ADDR
// if damageUnits > 0 and sci_list > 0 then
13759: LD_VAR 0 10
13763: PUSH
13764: LD_INT 0
13766: GREATER
13767: PUSH
13768: LD_VAR 0 6
13772: PUSH
13773: LD_INT 0
13775: GREATER
13776: AND
13777: IFFALSE 13793
// ComMoveToArea ( damageUnits , healArea ) ;
13779: LD_VAR 0 10
13783: PPUSH
13784: LD_VAR 0 2
13788: PPUSH
13789: CALL_OW 113
// if unitsToHeal > 0 and sci_listOutside > 0 then
13793: LD_VAR 0 11
13797: PUSH
13798: LD_INT 0
13800: GREATER
13801: PUSH
13802: LD_VAR 0 7
13806: PUSH
13807: LD_INT 0
13809: GREATER
13810: AND
13811: IFFALSE 13831
// ComHeal ( sci_listOutside , unitsToHeal [ 1 ] ) ;
13813: LD_VAR 0 7
13817: PPUSH
13818: LD_VAR 0 11
13822: PUSH
13823: LD_INT 1
13825: ARRAY
13826: PPUSH
13827: CALL_OW 128
// if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
13831: LD_VAR 0 10
13835: PUSH
13836: LD_INT 0
13838: EQUAL
13839: PUSH
13840: LD_VAR 0 11
13844: PUSH
13845: LD_INT 0
13847: EQUAL
13848: AND
13849: PUSH
13850: LD_VAR 0 7
13854: PUSH
13855: LD_INT 0
13857: GREATER
13858: AND
13859: IFFALSE 13964
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
13861: LD_ADDR_VAR 0 12
13865: PUSH
13866: LD_INT 22
13868: PUSH
13869: LD_VAR 0 1
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: LD_INT 21
13880: PUSH
13881: LD_INT 3
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: PUSH
13888: LD_INT 30
13890: PUSH
13891: LD_INT 8
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: EMPTY
13899: LIST
13900: LIST
13901: LIST
13902: PPUSH
13903: CALL_OW 69
13907: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
13908: LD_ADDR_VAR 0 13
13912: PUSH
13913: LD_INT 1
13915: PPUSH
13916: LD_VAR 0 12
13920: PPUSH
13921: CALL_OW 12
13925: ST_TO_ADDR
// ComEnterUnit ( UnitFilter ( sci_listOutside , [ f_not , [ f_hastask ] ] ) , tmp [ rnd ] ) ;
13926: LD_VAR 0 7
13930: PPUSH
13931: LD_INT 3
13933: PUSH
13934: LD_INT 60
13936: PUSH
13937: EMPTY
13938: LIST
13939: PUSH
13940: EMPTY
13941: LIST
13942: LIST
13943: PPUSH
13944: CALL_OW 72
13948: PPUSH
13949: LD_VAR 0 12
13953: PUSH
13954: LD_VAR 0 13
13958: ARRAY
13959: PPUSH
13960: CALL_OW 120
// end ; if FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) > 0 and IsOk ( ru_fact ) and GetSide ( ru_fact ) = 3 then
13964: LD_VAR 0 3
13968: PPUSH
13969: LD_INT 22
13971: PUSH
13972: LD_VAR 0 1
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 25
13983: PUSH
13984: LD_INT 3
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: LD_INT 24
13993: PUSH
13994: LD_INT 751
13996: PUSH
13997: EMPTY
13998: LIST
13999: LIST
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: PPUSH
14006: CALL_OW 70
14010: PUSH
14011: LD_INT 0
14013: GREATER
14014: PUSH
14015: LD_INT 21
14017: PPUSH
14018: CALL_OW 302
14022: AND
14023: PUSH
14024: LD_INT 21
14026: PPUSH
14027: CALL_OW 255
14031: PUSH
14032: LD_INT 3
14034: EQUAL
14035: AND
14036: IFFALSE 14092
// ComEnterUnit ( FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 3 ] , [ f_lives , 751 ] ] ) , ru_fact ) ;
14038: LD_VAR 0 3
14042: PPUSH
14043: LD_INT 22
14045: PUSH
14046: LD_VAR 0 1
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 25
14057: PUSH
14058: LD_INT 3
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: LD_INT 24
14067: PUSH
14068: LD_INT 751
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: PUSH
14075: EMPTY
14076: LIST
14077: LIST
14078: LIST
14079: PPUSH
14080: CALL_OW 70
14084: PPUSH
14085: LD_INT 21
14087: PPUSH
14088: CALL_OW 120
// end ;
14092: LD_VAR 0 5
14096: RET
// export function AttackNearBuildings ( side , enemySide ) ; var i , j , turretsList , enemyBuildings ; begin
14097: LD_INT 0
14099: PPUSH
14100: PPUSH
14101: PPUSH
14102: PPUSH
14103: PPUSH
// turretsList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 31 ] , [ f_btype , 32 ] , [ f_btype , 33 ] , [ f_btype , 4 ] , [ f_btype , 5 ] ] ] ) ;
14104: LD_ADDR_VAR 0 6
14108: PUSH
14109: LD_INT 22
14111: PUSH
14112: LD_VAR 0 1
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: LD_INT 30
14126: PUSH
14127: LD_INT 31
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 30
14136: PUSH
14137: LD_INT 32
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 30
14146: PUSH
14147: LD_INT 33
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 30
14156: PUSH
14157: LD_INT 4
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PUSH
14164: LD_INT 30
14166: PUSH
14167: LD_INT 5
14169: PUSH
14170: EMPTY
14171: LIST
14172: LIST
14173: PUSH
14174: EMPTY
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: PPUSH
14186: CALL_OW 69
14190: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_side , enemySide ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
14191: LD_ADDR_VAR 0 7
14195: PUSH
14196: LD_INT 22
14198: PUSH
14199: LD_VAR 0 2
14203: PUSH
14204: EMPTY
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 21
14210: PUSH
14211: LD_INT 3
14213: PUSH
14214: EMPTY
14215: LIST
14216: LIST
14217: PUSH
14218: LD_INT 58
14220: PUSH
14221: EMPTY
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: LIST
14228: PPUSH
14229: CALL_OW 69
14233: ST_TO_ADDR
// if turretsList > 0 and enemyBuildings > 0 then
14234: LD_VAR 0 6
14238: PUSH
14239: LD_INT 0
14241: GREATER
14242: PUSH
14243: LD_VAR 0 7
14247: PUSH
14248: LD_INT 0
14250: GREATER
14251: AND
14252: IFFALSE 14322
// begin for i in turretsList do
14254: LD_ADDR_VAR 0 4
14258: PUSH
14259: LD_VAR 0 6
14263: PUSH
14264: FOR_IN
14265: IFFALSE 14320
// begin for j in enemyBuildings do
14267: LD_ADDR_VAR 0 5
14271: PUSH
14272: LD_VAR 0 7
14276: PUSH
14277: FOR_IN
14278: IFFALSE 14316
// begin if GetDistUnits ( i , j ) < 20 then
14280: LD_VAR 0 4
14284: PPUSH
14285: LD_VAR 0 5
14289: PPUSH
14290: CALL_OW 296
14294: PUSH
14295: LD_INT 20
14297: LESS
14298: IFFALSE 14314
// begin ComAttackUnit ( i , j ) ;
14300: LD_VAR 0 4
14304: PPUSH
14305: LD_VAR 0 5
14309: PPUSH
14310: CALL_OW 115
// end ; end ;
14314: GO 14277
14316: POP
14317: POP
// end ;
14318: GO 14264
14320: POP
14321: POP
// end ; end ;
14322: LD_VAR 0 3
14326: RET
// export function CraneRepairBuild ( side , baseArea ) ; var i , mechTmp , vehicleTmp , crane_list , buildings_list ; begin
14327: LD_INT 0
14329: PPUSH
14330: PPUSH
14331: PPUSH
14332: PPUSH
14333: PPUSH
14334: PPUSH
// crane_list = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_weapon , ru_crane ] ] ) ;
14335: LD_ADDR_VAR 0 7
14339: PUSH
14340: LD_VAR 0 2
14344: PPUSH
14345: LD_INT 22
14347: PUSH
14348: LD_VAR 0 1
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 21
14359: PUSH
14360: LD_INT 2
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 34
14369: PUSH
14370: LD_INT 52
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: PPUSH
14382: CALL_OW 70
14386: ST_TO_ADDR
// buildings_list = FilterUnitsInArea ( baseArea , [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14387: LD_ADDR_VAR 0 8
14391: PUSH
14392: LD_VAR 0 2
14396: PPUSH
14397: LD_INT 22
14399: PUSH
14400: LD_VAR 0 1
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: PUSH
14409: LD_INT 21
14411: PUSH
14412: LD_INT 3
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: LD_INT 3
14421: PUSH
14422: LD_INT 24
14424: PUSH
14425: LD_INT 1000
14427: PUSH
14428: EMPTY
14429: LIST
14430: LIST
14431: PUSH
14432: EMPTY
14433: LIST
14434: LIST
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: LIST
14440: PUSH
14441: EMPTY
14442: LIST
14443: PPUSH
14444: CALL_OW 70
14448: ST_TO_ADDR
// if buildings_list > 0 and UnitFilter ( crane_list , [ f_lives , 750 ] ) > 0 then
14449: LD_VAR 0 8
14453: PUSH
14454: LD_INT 0
14456: GREATER
14457: PUSH
14458: LD_VAR 0 7
14462: PPUSH
14463: LD_INT 24
14465: PUSH
14466: LD_INT 750
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PPUSH
14473: CALL_OW 72
14477: PUSH
14478: LD_INT 0
14480: GREATER
14481: AND
14482: IFFALSE 14502
// ComRepairBuilding ( crane_list , buildings_list [ 1 ] ) ;
14484: LD_VAR 0 7
14488: PPUSH
14489: LD_VAR 0 8
14493: PUSH
14494: LD_INT 1
14496: ARRAY
14497: PPUSH
14498: CALL_OW 130
// end ;
14502: LD_VAR 0 3
14506: RET
// export function BuildingVehicle ( side , fabric , vehCount , weaponTab , engine , control , chassis ) ; var i ; begin
14507: LD_INT 0
14509: PPUSH
14510: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
14511: LD_INT 22
14513: PUSH
14514: LD_VAR 0 1
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: LD_INT 21
14525: PUSH
14526: LD_INT 2
14528: PUSH
14529: EMPTY
14530: LIST
14531: LIST
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: PPUSH
14537: CALL_OW 69
14541: PUSH
14542: LD_INT 18
14544: PPUSH
14545: LD_INT 22
14547: PUSH
14548: LD_VAR 0 1
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: PUSH
14557: LD_INT 21
14559: PUSH
14560: LD_INT 2
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PPUSH
14571: CALL_OW 70
14575: PUSH
14576: LD_VAR 0 3
14580: LESSEQUAL
14581: DIFF
14582: IFFALSE 14649
// for i = 1 to vehCount do
14584: LD_ADDR_VAR 0 9
14588: PUSH
14589: DOUBLE
14590: LD_INT 1
14592: DEC
14593: ST_TO_ADDR
14594: LD_VAR 0 3
14598: PUSH
14599: FOR_TO
14600: IFFALSE 14647
// AddComConstruct ( fabric , chassis , engine , control , weaponTab [ Rand ( 1 , weaponTab ) ] ) ;
14602: LD_VAR 0 2
14606: PPUSH
14607: LD_VAR 0 7
14611: PPUSH
14612: LD_VAR 0 5
14616: PPUSH
14617: LD_VAR 0 6
14621: PPUSH
14622: LD_VAR 0 4
14626: PUSH
14627: LD_INT 1
14629: PPUSH
14630: LD_VAR 0 4
14634: PPUSH
14635: CALL_OW 12
14639: ARRAY
14640: PPUSH
14641: CALL_OW 185
14645: GO 14599
14647: POP
14648: POP
// end ;
14649: LD_VAR 0 8
14653: RET
// export function AttackVehicles ( side ) ; var i , j , vehiclesOK , target1 , target2 ; begin
14654: LD_INT 0
14656: PPUSH
14657: PPUSH
14658: PPUSH
14659: PPUSH
14660: PPUSH
14661: PPUSH
// if russianTanks >= [ 3 , 4 , 4 ] [ Difficulty ] and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14662: LD_EXP 39
14666: PUSH
14667: LD_INT 3
14669: PUSH
14670: LD_INT 4
14672: PUSH
14673: LD_INT 4
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: LIST
14680: PUSH
14681: LD_OWVAR 67
14685: ARRAY
14686: GREATEREQUAL
14687: PUSH
14688: LD_EXP 40
14692: PUSH
14693: LD_INT 1
14695: PUSH
14696: LD_INT 2
14698: PUSH
14699: LD_INT 2
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: PUSH
14707: LD_OWVAR 67
14711: ARRAY
14712: GREATEREQUAL
14713: AND
14714: IFFALSE 14947
// begin repeat wait ( 0 0$3 ) ;
14716: LD_INT 105
14718: PPUSH
14719: CALL_OW 67
// for j in russianTanks do
14723: LD_ADDR_VAR 0 4
14727: PUSH
14728: LD_EXP 39
14732: PUSH
14733: FOR_IN
14734: IFFALSE 14935
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , side ] , [ f_see , 1 ] ] ) , j ) ;
14736: LD_ADDR_VAR 0 6
14740: PUSH
14741: LD_INT 81
14743: PUSH
14744: LD_VAR 0 1
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 101
14755: PUSH
14756: LD_INT 1
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PPUSH
14767: CALL_OW 69
14771: PPUSH
14772: LD_VAR 0 4
14776: PPUSH
14777: CALL_OW 74
14781: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , side ] , [ f_see , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , j ) ;
14782: LD_ADDR_VAR 0 7
14786: PUSH
14787: LD_INT 81
14789: PUSH
14790: LD_VAR 0 1
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: PUSH
14799: LD_INT 101
14801: PUSH
14802: LD_INT 1
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: PUSH
14809: LD_INT 2
14811: PUSH
14812: LD_INT 59
14814: PUSH
14815: EMPTY
14816: LIST
14817: PUSH
14818: LD_INT 21
14820: PUSH
14821: LD_INT 1
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: PUSH
14828: LD_INT 21
14830: PUSH
14831: LD_INT 2
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: PUSH
14838: EMPTY
14839: LIST
14840: LIST
14841: LIST
14842: LIST
14843: PUSH
14844: EMPTY
14845: LIST
14846: LIST
14847: LIST
14848: PUSH
14849: EMPTY
14850: LIST
14851: PPUSH
14852: CALL_OW 69
14856: PPUSH
14857: LD_VAR 0 4
14861: PPUSH
14862: CALL_OW 74
14866: ST_TO_ADDR
// if GetDistUnits ( j , target1 ) + 8 < GetDistUnits ( j , target2 ) then
14867: LD_VAR 0 4
14871: PPUSH
14872: LD_VAR 0 6
14876: PPUSH
14877: CALL_OW 296
14881: PUSH
14882: LD_INT 8
14884: PLUS
14885: PUSH
14886: LD_VAR 0 4
14890: PPUSH
14891: LD_VAR 0 7
14895: PPUSH
14896: CALL_OW 296
14900: LESS
14901: IFFALSE 14919
// ComAttackUnit ( j , target1 ) else
14903: LD_VAR 0 4
14907: PPUSH
14908: LD_VAR 0 6
14912: PPUSH
14913: CALL_OW 115
14917: GO 14933
// ComAttackUnit ( j , target2 ) ;
14919: LD_VAR 0 4
14923: PPUSH
14924: LD_VAR 0 7
14928: PPUSH
14929: CALL_OW 115
// end ;
14933: GO 14733
14935: POP
14936: POP
// until russianTanks = 0 ;
14937: LD_EXP 39
14941: PUSH
14942: LD_INT 0
14944: EQUAL
14945: IFFALSE 14716
// end ; end ;
14947: LD_VAR 0 2
14951: RET
// export function TimeLapsersAI ( side ) ; var j , nearUnit ; begin
14952: LD_INT 0
14954: PPUSH
14955: PPUSH
14956: PPUSH
// if russianTanks >= 1 and russianTimeLapsers >= [ 1 , 2 , 2 ] [ Difficulty ] then
14957: LD_EXP 39
14961: PUSH
14962: LD_INT 1
14964: GREATEREQUAL
14965: PUSH
14966: LD_EXP 40
14970: PUSH
14971: LD_INT 1
14973: PUSH
14974: LD_INT 2
14976: PUSH
14977: LD_INT 2
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: LIST
14984: PUSH
14985: LD_OWVAR 67
14989: ARRAY
14990: GREATEREQUAL
14991: AND
14992: IFFALSE 15108
// repeat wait ( 0 0$3 ) ;
14994: LD_INT 105
14996: PPUSH
14997: CALL_OW 67
// if russianTimeLapsers > 0 then
15001: LD_EXP 40
15005: PUSH
15006: LD_INT 0
15008: GREATER
15009: IFFALSE 15098
// for j in UnitFilter ( russianTimeLapsers , [ f_not , [ f_hastask ] ] ) do
15011: LD_ADDR_VAR 0 3
15015: PUSH
15016: LD_EXP 40
15020: PPUSH
15021: LD_INT 3
15023: PUSH
15024: LD_INT 60
15026: PUSH
15027: EMPTY
15028: LIST
15029: PUSH
15030: EMPTY
15031: LIST
15032: LIST
15033: PPUSH
15034: CALL_OW 72
15038: PUSH
15039: FOR_IN
15040: IFFALSE 15096
// begin nearUnit := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , side ] ) , j ) ;
15042: LD_ADDR_VAR 0 4
15046: PUSH
15047: LD_INT 81
15049: PUSH
15050: LD_VAR 0 1
15054: PUSH
15055: EMPTY
15056: LIST
15057: LIST
15058: PPUSH
15059: CALL_OW 69
15063: PPUSH
15064: LD_VAR 0 3
15068: PPUSH
15069: CALL_OW 74
15073: ST_TO_ADDR
// if nearUnit then
15074: LD_VAR 0 4
15078: IFFALSE 15094
// ComMoveUnit ( j , nearUnit ) ;
15080: LD_VAR 0 3
15084: PPUSH
15085: LD_VAR 0 4
15089: PPUSH
15090: CALL_OW 112
// end ;
15094: GO 15039
15096: POP
15097: POP
// until russianTimeLapsers = 0 ;
15098: LD_EXP 40
15102: PUSH
15103: LD_INT 0
15105: EQUAL
15106: IFFALSE 14994
// end ;
15108: LD_VAR 0 2
15112: RET
// export function IntBazooka ( side ) ; var ta , c , i , list , filter ; begin
15113: LD_INT 0
15115: PPUSH
15116: PPUSH
15117: PPUSH
15118: PPUSH
15119: PPUSH
15120: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
15121: LD_ADDR_VAR 0 6
15125: PUSH
15126: LD_INT 22
15128: PUSH
15129: LD_VAR 0 1
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: LD_INT 25
15140: PUSH
15141: LD_INT 9
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PPUSH
15152: CALL_OW 69
15156: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15157: LD_ADDR_VAR 0 7
15161: PUSH
15162: LD_INT 81
15164: PUSH
15165: LD_VAR 0 1
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: PUSH
15174: LD_INT 3
15176: PUSH
15177: LD_INT 21
15179: PUSH
15180: LD_INT 3
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: EMPTY
15188: LIST
15189: LIST
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PPUSH
15195: CALL_OW 69
15199: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
15200: LD_ADDR_VAR 0 4
15204: PUSH
15205: LD_INT 1
15207: PPUSH
15208: LD_INT 3
15210: PPUSH
15211: CALL_OW 12
15215: ST_TO_ADDR
// for i = 1 to list do
15216: LD_ADDR_VAR 0 5
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_VAR 0 6
15230: PUSH
15231: FOR_TO
15232: IFFALSE 15434
// for ta in filter do
15234: LD_ADDR_VAR 0 3
15238: PUSH
15239: LD_VAR 0 7
15243: PUSH
15244: FOR_IN
15245: IFFALSE 15430
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15247: LD_VAR 0 6
15251: PUSH
15252: LD_VAR 0 5
15256: ARRAY
15257: PPUSH
15258: LD_VAR 0 3
15262: PPUSH
15263: CALL_OW 296
15267: PUSH
15268: LD_INT 15
15270: LESSEQUAL
15271: IFFALSE 15428
// begin case c of 1 :
15273: LD_VAR 0 4
15277: PUSH
15278: LD_INT 1
15280: DOUBLE
15281: EQUAL
15282: IFTRUE 15286
15284: GO 15324
15286: POP
// ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ; 2 :
15287: LD_VAR 0 6
15291: PUSH
15292: LD_VAR 0 5
15296: ARRAY
15297: PPUSH
15298: LD_VAR 0 3
15302: PPUSH
15303: CALL_OW 250
15307: PPUSH
15308: LD_VAR 0 3
15312: PPUSH
15313: CALL_OW 251
15317: PPUSH
15318: CALL_OW 154
15322: GO 15428
15324: LD_INT 2
15326: DOUBLE
15327: EQUAL
15328: IFTRUE 15332
15330: GO 15396
15332: POP
// ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ; 3 :
15333: LD_VAR 0 6
15337: PUSH
15338: LD_VAR 0 5
15342: ARRAY
15343: PPUSH
15344: LD_VAR 0 3
15348: PPUSH
15349: CALL_OW 250
15353: PUSH
15354: LD_INT 1
15356: NEG
15357: PPUSH
15358: LD_INT 1
15360: PPUSH
15361: CALL_OW 12
15365: PLUS
15366: PPUSH
15367: LD_VAR 0 3
15371: PPUSH
15372: CALL_OW 251
15376: PUSH
15377: LD_INT 1
15379: NEG
15380: PPUSH
15381: LD_INT 1
15383: PPUSH
15384: CALL_OW 12
15388: PLUS
15389: PPUSH
15390: CALL_OW 153
15394: GO 15428
15396: LD_INT 3
15398: DOUBLE
15399: EQUAL
15400: IFTRUE 15404
15402: GO 15427
15404: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15405: LD_VAR 0 6
15409: PUSH
15410: LD_VAR 0 5
15414: ARRAY
15415: PPUSH
15416: LD_VAR 0 3
15420: PPUSH
15421: CALL_OW 115
15425: GO 15428
15427: POP
// end ; end ;
15428: GO 15244
15430: POP
15431: POP
15432: GO 15231
15434: POP
15435: POP
// end ;
15436: LD_VAR 0 2
15440: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
15441: LD_INT 0
15443: PPUSH
15444: PPUSH
15445: PPUSH
15446: PPUSH
// r := 100 ;
15447: LD_ADDR_VAR 0 5
15451: PUSH
15452: LD_INT 100
15454: ST_TO_ADDR
// x := 0 ;
15455: LD_ADDR_VAR 0 6
15459: PUSH
15460: LD_INT 0
15462: ST_TO_ADDR
// while ( x < n ) do
15463: LD_VAR 0 6
15467: PUSH
15468: LD_VAR 0 2
15472: LESS
15473: IFFALSE 15760
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
15475: LD_ADDR_VAR 0 4
15479: PUSH
15480: DOUBLE
15481: LD_INT 1
15483: DEC
15484: ST_TO_ADDR
15485: LD_VAR 0 1
15489: PPUSH
15490: LD_INT 0
15492: PPUSH
15493: CALL_OW 517
15497: PUSH
15498: LD_INT 1
15500: ARRAY
15501: PUSH
15502: FOR_TO
15503: IFFALSE 15756
// begin if r > 50 then
15505: LD_VAR 0 5
15509: PUSH
15510: LD_INT 50
15512: GREATER
15513: IFFALSE 15732
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
15515: LD_VAR 0 1
15519: PPUSH
15520: LD_INT 0
15522: PPUSH
15523: CALL_OW 517
15527: PUSH
15528: LD_INT 1
15530: ARRAY
15531: PUSH
15532: LD_VAR 0 4
15536: ARRAY
15537: PPUSH
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_INT 0
15545: PPUSH
15546: CALL_OW 517
15550: PUSH
15551: LD_INT 2
15553: ARRAY
15554: PUSH
15555: LD_VAR 0 4
15559: ARRAY
15560: PPUSH
15561: CALL_OW 458
15565: NOT
15566: IFFALSE 15716
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 8 , 0 ) ;
15568: LD_VAR 0 1
15572: PPUSH
15573: LD_INT 0
15575: PPUSH
15576: CALL_OW 517
15580: PUSH
15581: LD_INT 1
15583: ARRAY
15584: PUSH
15585: LD_VAR 0 4
15589: ARRAY
15590: PPUSH
15591: LD_VAR 0 1
15595: PPUSH
15596: LD_INT 0
15598: PPUSH
15599: CALL_OW 517
15603: PUSH
15604: LD_INT 2
15606: ARRAY
15607: PUSH
15608: LD_VAR 0 4
15612: ARRAY
15613: PPUSH
15614: LD_INT 8
15616: PPUSH
15617: LD_INT 0
15619: PPUSH
15620: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
15624: LD_ADDR_EXP 44
15628: PUSH
15629: LD_EXP 44
15633: PPUSH
15634: LD_INT 1
15636: PPUSH
15637: LD_VAR 0 1
15641: PPUSH
15642: LD_INT 0
15644: PPUSH
15645: CALL_OW 517
15649: PUSH
15650: LD_INT 1
15652: ARRAY
15653: PUSH
15654: LD_VAR 0 4
15658: ARRAY
15659: PUSH
15660: LD_VAR 0 1
15664: PPUSH
15665: LD_INT 0
15667: PPUSH
15668: CALL_OW 517
15672: PUSH
15673: LD_INT 2
15675: ARRAY
15676: PUSH
15677: LD_VAR 0 4
15681: ARRAY
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: PPUSH
15687: CALL_OW 2
15691: ST_TO_ADDR
// r := 0 ;
15692: LD_ADDR_VAR 0 5
15696: PUSH
15697: LD_INT 0
15699: ST_TO_ADDR
// x := x + 1 ;
15700: LD_ADDR_VAR 0 6
15704: PUSH
15705: LD_VAR 0 6
15709: PUSH
15710: LD_INT 1
15712: PLUS
15713: ST_TO_ADDR
// end else
15714: GO 15730
// r := r + 35 ;
15716: LD_ADDR_VAR 0 5
15720: PUSH
15721: LD_VAR 0 5
15725: PUSH
15726: LD_INT 35
15728: PLUS
15729: ST_TO_ADDR
// end else
15730: GO 15754
// r := r + rand ( 10 , 25 ) ;
15732: LD_ADDR_VAR 0 5
15736: PUSH
15737: LD_VAR 0 5
15741: PUSH
15742: LD_INT 10
15744: PPUSH
15745: LD_INT 25
15747: PPUSH
15748: CALL_OW 12
15752: PLUS
15753: ST_TO_ADDR
// end ;
15754: GO 15502
15756: POP
15757: POP
15758: GO 15463
// end ;
15760: LD_VAR 0 3
15764: RET
// export function DefendDepot ( side , build ) ; var i , j , tmpTab ; begin
15765: LD_INT 0
15767: PPUSH
15768: PPUSH
15769: PPUSH
15770: PPUSH
// tmpTab = [ ] ;
15771: LD_ADDR_VAR 0 6
15775: PUSH
15776: EMPTY
15777: ST_TO_ADDR
// if FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) > 0 then
15778: LD_INT 22
15780: PUSH
15781: LD_VAR 0 1
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 30
15792: PUSH
15793: LD_INT 32
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: EMPTY
15801: LIST
15802: LIST
15803: PPUSH
15804: CALL_OW 69
15808: PUSH
15809: LD_INT 0
15811: GREATER
15812: IFFALSE 15895
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] ] ) do
15814: LD_ADDR_VAR 0 4
15818: PUSH
15819: LD_INT 22
15821: PUSH
15822: LD_VAR 0 1
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: PUSH
15831: LD_INT 30
15833: PUSH
15834: LD_INT 32
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: PPUSH
15845: CALL_OW 69
15849: PUSH
15850: FOR_IN
15851: IFFALSE 15893
// begin for j in UnitsInside ( i ) do
15853: LD_ADDR_VAR 0 5
15857: PUSH
15858: LD_VAR 0 4
15862: PPUSH
15863: CALL_OW 313
15867: PUSH
15868: FOR_IN
15869: IFFALSE 15889
// tmpTab = tmpTab ^ j ;
15871: LD_ADDR_VAR 0 6
15875: PUSH
15876: LD_VAR 0 6
15880: PUSH
15881: LD_VAR 0 5
15885: ADD
15886: ST_TO_ADDR
15887: GO 15868
15889: POP
15890: POP
// end ;
15891: GO 15850
15893: POP
15894: POP
// end ; ComAgressiveMove ( tmpTab , GetX ( build ) , GetY ( build ) ) ;
15895: LD_VAR 0 6
15899: PPUSH
15900: LD_VAR 0 2
15904: PPUSH
15905: CALL_OW 250
15909: PPUSH
15910: LD_VAR 0 2
15914: PPUSH
15915: CALL_OW 251
15919: PPUSH
15920: CALL_OW 114
// end ;
15924: LD_VAR 0 3
15928: RET
// export function PrepareNature ; var i , un ; begin
15929: LD_INT 0
15931: PPUSH
15932: PPUSH
15933: PPUSH
// uc_side := 0 ;
15934: LD_ADDR_OWVAR 20
15938: PUSH
15939: LD_INT 0
15941: ST_TO_ADDR
// uc_nation := 0 ;
15942: LD_ADDR_OWVAR 21
15946: PUSH
15947: LD_INT 0
15949: ST_TO_ADDR
// InitHc ;
15950: CALL_OW 19
// hc_class := class_fish ;
15954: LD_ADDR_OWVAR 28
15958: PUSH
15959: LD_INT 20
15961: ST_TO_ADDR
// for i = 1 to 6 do
15962: LD_ADDR_VAR 0 2
15966: PUSH
15967: DOUBLE
15968: LD_INT 1
15970: DEC
15971: ST_TO_ADDR
15972: LD_INT 6
15974: PUSH
15975: FOR_TO
15976: IFFALSE 15995
// PlaceUnitArea ( CreateHuman , waterArea , false ) ;
15978: CALL_OW 44
15982: PPUSH
15983: LD_INT 23
15985: PPUSH
15986: LD_INT 0
15988: PPUSH
15989: CALL_OW 49
15993: GO 15975
15995: POP
15996: POP
// for i = 1 to Difficulty + 2 do
15997: LD_ADDR_VAR 0 2
16001: PUSH
16002: DOUBLE
16003: LD_INT 1
16005: DEC
16006: ST_TO_ADDR
16007: LD_OWVAR 67
16011: PUSH
16012: LD_INT 2
16014: PLUS
16015: PUSH
16016: FOR_TO
16017: IFFALSE 16126
// begin hc_sex = sex_male ;
16019: LD_ADDR_OWVAR 27
16023: PUSH
16024: LD_INT 1
16026: ST_TO_ADDR
// uc_side = 0 ;
16027: LD_ADDR_OWVAR 20
16031: PUSH
16032: LD_INT 0
16034: ST_TO_ADDR
// uc_nation = nation_nature ;
16035: LD_ADDR_OWVAR 21
16039: PUSH
16040: LD_INT 0
16042: ST_TO_ADDR
// hc_class = class_tiger ;
16043: LD_ADDR_OWVAR 28
16047: PUSH
16048: LD_INT 14
16050: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
16051: LD_ADDR_OWVAR 31
16055: PUSH
16056: LD_EXP 37
16060: PUSH
16061: LD_INT 0
16063: PUSH
16064: LD_INT 0
16066: PUSH
16067: LD_INT 0
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: LIST
16074: LIST
16075: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
16076: LD_ADDR_OWVAR 35
16080: PUSH
16081: LD_INT 5
16083: NEG
16084: PPUSH
16085: LD_INT 5
16087: PPUSH
16088: CALL_OW 12
16092: PUSH
16093: LD_OWVAR 67
16097: MUL
16098: ST_TO_ADDR
// un = CreateHuman ;
16099: LD_ADDR_VAR 0 3
16103: PUSH
16104: CALL_OW 44
16108: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16109: LD_VAR 0 3
16113: PPUSH
16114: LD_INT 24
16116: PPUSH
16117: LD_INT 0
16119: PPUSH
16120: CALL_OW 49
// end ;
16124: GO 16016
16126: POP
16127: POP
// for i = 1 to rand ( 3 , 4 ) do
16128: LD_ADDR_VAR 0 2
16132: PUSH
16133: DOUBLE
16134: LD_INT 1
16136: DEC
16137: ST_TO_ADDR
16138: LD_INT 3
16140: PPUSH
16141: LD_INT 4
16143: PPUSH
16144: CALL_OW 12
16148: PUSH
16149: FOR_TO
16150: IFFALSE 16242
// begin hc_sex = sex_male ;
16152: LD_ADDR_OWVAR 27
16156: PUSH
16157: LD_INT 1
16159: ST_TO_ADDR
// uc_side = 0 ;
16160: LD_ADDR_OWVAR 20
16164: PUSH
16165: LD_INT 0
16167: ST_TO_ADDR
// uc_nation = nation_nature ;
16168: LD_ADDR_OWVAR 21
16172: PUSH
16173: LD_INT 0
16175: ST_TO_ADDR
// hc_class = 18 ;
16176: LD_ADDR_OWVAR 28
16180: PUSH
16181: LD_INT 18
16183: ST_TO_ADDR
// hc_skills = [ 0 , 0 , 0 , 0 ] ;
16184: LD_ADDR_OWVAR 31
16188: PUSH
16189: LD_INT 0
16191: PUSH
16192: LD_INT 0
16194: PUSH
16195: LD_INT 0
16197: PUSH
16198: LD_INT 0
16200: PUSH
16201: EMPTY
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: ST_TO_ADDR
// hc_agressivity = 0 ;
16207: LD_ADDR_OWVAR 35
16211: PUSH
16212: LD_INT 0
16214: ST_TO_ADDR
// un = CreateHuman ;
16215: LD_ADDR_VAR 0 3
16219: PUSH
16220: CALL_OW 44
16224: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16225: LD_VAR 0 3
16229: PPUSH
16230: LD_INT 24
16232: PPUSH
16233: LD_INT 0
16235: PPUSH
16236: CALL_OW 49
// end ;
16240: GO 16149
16242: POP
16243: POP
// for i = 1 to rand ( 1 , 3 ) do
16244: LD_ADDR_VAR 0 2
16248: PUSH
16249: DOUBLE
16250: LD_INT 1
16252: DEC
16253: ST_TO_ADDR
16254: LD_INT 1
16256: PPUSH
16257: LD_INT 3
16259: PPUSH
16260: CALL_OW 12
16264: PUSH
16265: FOR_TO
16266: IFFALSE 16414
// begin hc_sex = sex_male ;
16268: LD_ADDR_OWVAR 27
16272: PUSH
16273: LD_INT 1
16275: ST_TO_ADDR
// uc_side = 0 ;
16276: LD_ADDR_OWVAR 20
16280: PUSH
16281: LD_INT 0
16283: ST_TO_ADDR
// uc_nation = nation_nature ;
16284: LD_ADDR_OWVAR 21
16288: PUSH
16289: LD_INT 0
16291: ST_TO_ADDR
// hc_class = class_apeman ;
16292: LD_ADDR_OWVAR 28
16296: PUSH
16297: LD_INT 12
16299: ST_TO_ADDR
// hc_skills = [ rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) , rand ( RuSolMinLevel , RuSolMaxLevel ) ] ;
16300: LD_ADDR_OWVAR 31
16304: PUSH
16305: LD_EXP 36
16309: PPUSH
16310: LD_EXP 37
16314: PPUSH
16315: CALL_OW 12
16319: PUSH
16320: LD_EXP 36
16324: PPUSH
16325: LD_EXP 37
16329: PPUSH
16330: CALL_OW 12
16334: PUSH
16335: LD_EXP 36
16339: PPUSH
16340: LD_EXP 37
16344: PPUSH
16345: CALL_OW 12
16349: PUSH
16350: LD_EXP 36
16354: PPUSH
16355: LD_EXP 37
16359: PPUSH
16360: CALL_OW 12
16364: PUSH
16365: EMPTY
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: ST_TO_ADDR
// hc_agressivity = rand ( 1 , 20 ) ;
16371: LD_ADDR_OWVAR 35
16375: PUSH
16376: LD_INT 1
16378: PPUSH
16379: LD_INT 20
16381: PPUSH
16382: CALL_OW 12
16386: ST_TO_ADDR
// un = CreateHuman ;
16387: LD_ADDR_VAR 0 3
16391: PUSH
16392: CALL_OW 44
16396: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
16397: LD_VAR 0 3
16401: PPUSH
16402: LD_INT 24
16404: PPUSH
16405: LD_INT 0
16407: PPUSH
16408: CALL_OW 49
// end ;
16412: GO 16265
16414: POP
16415: POP
// end ; end_of_file
16416: LD_VAR 0 1
16420: RET
// on UnitDestroyed ( unit ) do var i ;
16421: LD_INT 0
16423: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_human then
16424: LD_VAR 0 1
16428: PPUSH
16429: CALL_OW 255
16433: PUSH
16434: LD_INT 3
16436: EQUAL
16437: PUSH
16438: LD_VAR 0 1
16442: PPUSH
16443: CALL_OW 247
16447: PUSH
16448: LD_INT 1
16450: EQUAL
16451: AND
16452: IFFALSE 16516
// begin for i in RuScientists do
16454: LD_ADDR_VAR 0 2
16458: PUSH
16459: LD_EXP 34
16463: PUSH
16464: FOR_IN
16465: IFFALSE 16514
// if i = unit then
16467: LD_VAR 0 2
16471: PUSH
16472: LD_VAR 0 1
16476: EQUAL
16477: IFFALSE 16512
// begin RuScientists = RuScientists diff [ unit ] ;
16479: LD_ADDR_EXP 34
16483: PUSH
16484: LD_EXP 34
16488: PUSH
16489: LD_VAR 0 1
16493: PUSH
16494: EMPTY
16495: LIST
16496: DIFF
16497: ST_TO_ADDR
// sciCounter = sciCounter + 1 ;
16498: LD_ADDR_EXP 35
16502: PUSH
16503: LD_EXP 35
16507: PUSH
16508: LD_INT 1
16510: PLUS
16511: ST_TO_ADDR
// end ;
16512: GO 16464
16514: POP
16515: POP
// end ; end ;
16516: PPOPN 2
16518: END
// on UnitTeleported ( building , human ) do begin if building = ruteleprt and GetSide ( human ) = 1 and eventVar1 = 0 then
16519: LD_VAR 0 1
16523: PUSH
16524: LD_INT 10
16526: EQUAL
16527: PUSH
16528: LD_VAR 0 2
16532: PPUSH
16533: CALL_OW 255
16537: PUSH
16538: LD_INT 1
16540: EQUAL
16541: AND
16542: PUSH
16543: LD_EXP 47
16547: PUSH
16548: LD_INT 0
16550: EQUAL
16551: AND
16552: IFFALSE 16664
// begin eventVar1 = 1 ;
16554: LD_ADDR_EXP 47
16558: PUSH
16559: LD_INT 1
16561: ST_TO_ADDR
// teleportExplored = 1 ;
16562: LD_ADDR_EXP 33
16566: PUSH
16567: LD_INT 1
16569: ST_TO_ADDR
// ChangeMissionObjectives ( M2a ) ;
16570: LD_STRING M2a
16572: PPUSH
16573: CALL_OW 337
// wait ( 0 0$2 ) ;
16577: LD_INT 70
16579: PPUSH
16580: CALL_OW 67
// DialogueOn ;
16584: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , DT3a-Sol1-1 , DT3a-FSol1-1 ) ;
16588: LD_INT 22
16590: PUSH
16591: LD_INT 1
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 21
16600: PUSH
16601: LD_INT 1
16603: PUSH
16604: EMPTY
16605: LIST
16606: LIST
16607: PUSH
16608: EMPTY
16609: LIST
16610: LIST
16611: PPUSH
16612: CALL_OW 69
16616: PPUSH
16617: LD_STRING DT3a-Sol1-1
16619: PPUSH
16620: LD_STRING DT3a-FSol1-1
16622: PPUSH
16623: CALL 12157 0 3
// Say ( JMM , DT3a-JMM-1 ) ;
16627: LD_EXP 1
16631: PPUSH
16632: LD_STRING DT3a-JMM-1
16634: PPUSH
16635: CALL_OW 88
// CenterNowOnUnits ( human ) ;
16639: LD_VAR 0 2
16643: PPUSH
16644: CALL_OW 87
// Say ( JMM , DT3a-JMM-1a ) ;
16648: LD_EXP 1
16652: PPUSH
16653: LD_STRING DT3a-JMM-1a
16655: PPUSH
16656: CALL_OW 88
// DialogueOff ;
16660: CALL_OW 7
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 0 then
16664: LD_VAR 0 1
16668: PUSH
16669: LD_INT 10
16671: EQUAL
16672: PUSH
16673: LD_VAR 0 2
16677: PPUSH
16678: CALL_OW 247
16682: PUSH
16683: LD_INT 2
16685: EQUAL
16686: AND
16687: PUSH
16688: LD_VAR 0 2
16692: PPUSH
16693: CALL_OW 255
16697: PUSH
16698: LD_INT 3
16700: EQUAL
16701: AND
16702: PUSH
16703: LD_EXP 28
16707: PUSH
16708: LD_INT 0
16710: EQUAL
16711: AND
16712: IFFALSE 16729
// begin wait ( 0 0$3 ) ;
16714: LD_INT 105
16716: PPUSH
16717: CALL_OW 67
// vehicleTeleported = 1 ;
16721: LD_ADDR_EXP 28
16725: PUSH
16726: LD_INT 1
16728: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 and vehicleTeleported = 2 then
16729: LD_VAR 0 1
16733: PUSH
16734: LD_INT 10
16736: EQUAL
16737: PUSH
16738: LD_VAR 0 2
16742: PPUSH
16743: CALL_OW 247
16747: PUSH
16748: LD_INT 2
16750: EQUAL
16751: AND
16752: PUSH
16753: LD_VAR 0 2
16757: PPUSH
16758: CALL_OW 255
16762: PUSH
16763: LD_INT 3
16765: EQUAL
16766: AND
16767: PUSH
16768: LD_EXP 28
16772: PUSH
16773: LD_INT 2
16775: EQUAL
16776: AND
16777: IFFALSE 16794
// begin wait ( 0 0$3 ) ;
16779: LD_INT 105
16781: PPUSH
16782: CALL_OW 67
// vehicleTeleported = 3 ;
16786: LD_ADDR_EXP 28
16790: PUSH
16791: LD_INT 3
16793: ST_TO_ADDR
// end ; if building = ruteleprt and GetType ( human ) = unit_vehicle and GetSide ( human ) = 3 then
16794: LD_VAR 0 1
16798: PUSH
16799: LD_INT 10
16801: EQUAL
16802: PUSH
16803: LD_VAR 0 2
16807: PPUSH
16808: CALL_OW 247
16812: PUSH
16813: LD_INT 2
16815: EQUAL
16816: AND
16817: PUSH
16818: LD_VAR 0 2
16822: PPUSH
16823: CALL_OW 255
16827: PUSH
16828: LD_INT 3
16830: EQUAL
16831: AND
16832: IFFALSE 16848
// tpCounter = tpCounter + 1 ;
16834: LD_ADDR_EXP 29
16838: PUSH
16839: LD_EXP 29
16843: PUSH
16844: LD_INT 1
16846: PLUS
16847: ST_TO_ADDR
// end ;
16848: PPOPN 2
16850: END
// on VehicleConstructed ( vehicle , factory ) do begin if factory = ru_fact or factory = rufab2 then
16851: LD_VAR 0 2
16855: PUSH
16856: LD_INT 21
16858: EQUAL
16859: PUSH
16860: LD_VAR 0 2
16864: PUSH
16865: LD_INT 112
16867: EQUAL
16868: OR
16869: IFFALSE 17047
// if GetSide ( vehicle ) = 3 then
16871: LD_VAR 0 1
16875: PPUSH
16876: CALL_OW 255
16880: PUSH
16881: LD_INT 3
16883: EQUAL
16884: IFFALSE 17047
// begin if GetWeapon ( vehicle ) = 46 or GetWeapon ( vehicle ) = 45 or GetWeapon ( vehicle ) = 44 then
16886: LD_VAR 0 1
16890: PPUSH
16891: CALL_OW 264
16895: PUSH
16896: LD_INT 46
16898: EQUAL
16899: PUSH
16900: LD_VAR 0 1
16904: PPUSH
16905: CALL_OW 264
16909: PUSH
16910: LD_INT 45
16912: EQUAL
16913: OR
16914: PUSH
16915: LD_VAR 0 1
16919: PPUSH
16920: CALL_OW 264
16924: PUSH
16925: LD_INT 44
16927: EQUAL
16928: OR
16929: IFFALSE 17004
// begin russianTanks = russianTanks ^ vehicle ;
16931: LD_ADDR_EXP 39
16935: PUSH
16936: LD_EXP 39
16940: PUSH
16941: LD_VAR 0 1
16945: ADD
16946: ST_TO_ADDR
// if attackTactic = 1 or attackTactic = 0 then
16947: LD_EXP 43
16951: PUSH
16952: LD_INT 1
16954: EQUAL
16955: PUSH
16956: LD_EXP 43
16960: PUSH
16961: LD_INT 0
16963: EQUAL
16964: OR
16965: IFFALSE 16979
// ComEnterUnit ( vehicle , ruteleprt ) ;
16967: LD_VAR 0 1
16971: PPUSH
16972: LD_INT 10
16974: PPUSH
16975: CALL_OW 120
// if attackTactic = 2 then
16979: LD_EXP 43
16983: PUSH
16984: LD_INT 2
16986: EQUAL
16987: IFFALSE 17004
// ComMoveXY ( vehicle , 88 , 69 ) ;
16989: LD_VAR 0 1
16993: PPUSH
16994: LD_INT 88
16996: PPUSH
16997: LD_INT 69
16999: PPUSH
17000: CALL_OW 111
// end ; if GetWeapon ( vehicle ) = 49 then
17004: LD_VAR 0 1
17008: PPUSH
17009: CALL_OW 264
17013: PUSH
17014: LD_INT 49
17016: EQUAL
17017: IFFALSE 17047
// begin russianTimeLapsers = russianTimeLapsers ^ vehicle ;
17019: LD_ADDR_EXP 40
17023: PUSH
17024: LD_EXP 40
17028: PUSH
17029: LD_VAR 0 1
17033: ADD
17034: ST_TO_ADDR
// ComEnterUnit ( vehicle , rutp ) ;
17035: LD_VAR 0 1
17039: PPUSH
17040: LD_INT 137
17042: PPUSH
17043: CALL_OW 120
// end ; end ; end ;
17047: PPOPN 2
17049: END
// on UnitGoesToRed ( unit ) do var i ;
17050: LD_INT 0
17052: PPUSH
// begin if GetSide ( unit ) = 3 and GetType ( unit ) = unit_vehicle then
17053: LD_VAR 0 1
17057: PPUSH
17058: CALL_OW 255
17062: PUSH
17063: LD_INT 3
17065: EQUAL
17066: PUSH
17067: LD_VAR 0 1
17071: PPUSH
17072: CALL_OW 247
17076: PUSH
17077: LD_INT 2
17079: EQUAL
17080: AND
17081: IFFALSE 17199
// begin if russianTanks > 0 then
17083: LD_EXP 39
17087: PUSH
17088: LD_INT 0
17090: GREATER
17091: IFFALSE 17141
// for i in russianTanks do
17093: LD_ADDR_VAR 0 2
17097: PUSH
17098: LD_EXP 39
17102: PUSH
17103: FOR_IN
17104: IFFALSE 17139
// if i = unit then
17106: LD_VAR 0 2
17110: PUSH
17111: LD_VAR 0 1
17115: EQUAL
17116: IFFALSE 17137
// russianTanks = russianTanks diff [ unit ] ;
17118: LD_ADDR_EXP 39
17122: PUSH
17123: LD_EXP 39
17127: PUSH
17128: LD_VAR 0 1
17132: PUSH
17133: EMPTY
17134: LIST
17135: DIFF
17136: ST_TO_ADDR
17137: GO 17103
17139: POP
17140: POP
// if russianTimeLapsers > 0 then
17141: LD_EXP 40
17145: PUSH
17146: LD_INT 0
17148: GREATER
17149: IFFALSE 17199
// for i in russianTimeLapsers do
17151: LD_ADDR_VAR 0 2
17155: PUSH
17156: LD_EXP 40
17160: PUSH
17161: FOR_IN
17162: IFFALSE 17197
// if i = unit then
17164: LD_VAR 0 2
17168: PUSH
17169: LD_VAR 0 1
17173: EQUAL
17174: IFFALSE 17195
// russianTimeLapsers = russianTimeLapsers diff [ unit ] ;
17176: LD_ADDR_EXP 40
17180: PUSH
17181: LD_EXP 40
17185: PUSH
17186: LD_VAR 0 1
17190: PUSH
17191: EMPTY
17192: LIST
17193: DIFF
17194: ST_TO_ADDR
17195: GO 17161
17197: POP
17198: POP
// end ; end ;
17199: PPOPN 2
17201: END
// on LeaveVehicle ( vehicle , human ) do var i ;
17202: LD_INT 0
17204: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 3 and GetSide ( ru_fact ) = 3 and IsOk ( ru_fact ) then
17205: LD_VAR 0 2
17209: PPUSH
17210: CALL_OW 255
17214: PUSH
17215: LD_INT 3
17217: EQUAL
17218: PUSH
17219: LD_VAR 0 2
17223: PPUSH
17224: CALL_OW 257
17228: PUSH
17229: LD_INT 3
17231: EQUAL
17232: AND
17233: PUSH
17234: LD_INT 21
17236: PPUSH
17237: CALL_OW 255
17241: PUSH
17242: LD_INT 3
17244: EQUAL
17245: AND
17246: PUSH
17247: LD_INT 21
17249: PPUSH
17250: CALL_OW 302
17254: AND
17255: IFFALSE 17269
// ComEnterUnit ( human , ru_fact ) ;
17257: LD_VAR 0 2
17261: PPUSH
17262: LD_INT 21
17264: PPUSH
17265: CALL_OW 120
// if GetClass ( human ) = 4 and GetSide ( human ) = 3 and ruAI = 0 then
17269: LD_VAR 0 2
17273: PPUSH
17274: CALL_OW 257
17278: PUSH
17279: LD_INT 4
17281: EQUAL
17282: PUSH
17283: LD_VAR 0 2
17287: PPUSH
17288: CALL_OW 255
17292: PUSH
17293: LD_INT 3
17295: EQUAL
17296: AND
17297: PUSH
17298: LD_EXP 41
17302: PUSH
17303: LD_INT 0
17305: EQUAL
17306: AND
17307: IFFALSE 17369
// for i in RuScientists do
17309: LD_ADDR_VAR 0 3
17313: PUSH
17314: LD_EXP 34
17318: PUSH
17319: FOR_IN
17320: IFFALSE 17367
// if i = human then
17322: LD_VAR 0 3
17326: PUSH
17327: LD_VAR 0 2
17331: EQUAL
17332: IFFALSE 17365
// ComMoveToArea ( i , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17334: LD_VAR 0 3
17338: PPUSH
17339: LD_INT 13
17341: PUSH
17342: LD_INT 14
17344: PUSH
17345: EMPTY
17346: LIST
17347: LIST
17348: PUSH
17349: LD_INT 1
17351: PPUSH
17352: LD_INT 2
17354: PPUSH
17355: CALL_OW 12
17359: ARRAY
17360: PPUSH
17361: CALL_OW 113
17365: GO 17319
17367: POP
17368: POP
// end ;
17369: PPOPN 3
17371: END
// on EnterVehicle ( vehicle , human ) do var i , rnd ;
17372: LD_INT 0
17374: PPUSH
17375: PPUSH
// begin if GetSide ( human ) = 3 and GetClass ( human ) = 4 then
17376: LD_VAR 0 2
17380: PPUSH
17381: CALL_OW 255
17385: PUSH
17386: LD_INT 3
17388: EQUAL
17389: PUSH
17390: LD_VAR 0 2
17394: PPUSH
17395: CALL_OW 257
17399: PUSH
17400: LD_INT 4
17402: EQUAL
17403: AND
17404: IFFALSE 17546
// for i in RuScientists do
17406: LD_ADDR_VAR 0 3
17410: PUSH
17411: LD_EXP 34
17415: PUSH
17416: FOR_IN
17417: IFFALSE 17544
// if i = human then
17419: LD_VAR 0 3
17423: PUSH
17424: LD_VAR 0 2
17428: EQUAL
17429: IFFALSE 17542
// if IsOk ( rutp ) then
17431: LD_INT 137
17433: PPUSH
17434: CALL_OW 302
17438: IFFALSE 17511
// begin rnd = rand ( 1 , 2 ) ;
17440: LD_ADDR_VAR 0 4
17444: PUSH
17445: LD_INT 1
17447: PPUSH
17448: LD_INT 2
17450: PPUSH
17451: CALL_OW 12
17455: ST_TO_ADDR
// if rnd = 1 then
17456: LD_VAR 0 4
17460: PUSH
17461: LD_INT 1
17463: EQUAL
17464: IFFALSE 17478
// ComEnterUnit ( vehicle , rutp ) ;
17466: LD_VAR 0 1
17470: PPUSH
17471: LD_INT 137
17473: PPUSH
17474: CALL_OW 120
// AddComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17478: LD_VAR 0 1
17482: PPUSH
17483: LD_INT 13
17485: PUSH
17486: LD_INT 14
17488: PUSH
17489: EMPTY
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 1
17495: PPUSH
17496: LD_INT 2
17498: PPUSH
17499: CALL_OW 12
17503: ARRAY
17504: PPUSH
17505: CALL_OW 173
// end else
17509: GO 17542
// begin ComMoveToArea ( vehicle , [ EscapeArea1 , EscapeArea2 ] [ Rand ( 1 , 2 ) ] ) ;
17511: LD_VAR 0 1
17515: PPUSH
17516: LD_INT 13
17518: PUSH
17519: LD_INT 14
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 1
17528: PPUSH
17529: LD_INT 2
17531: PPUSH
17532: CALL_OW 12
17536: ARRAY
17537: PPUSH
17538: CALL_OW 113
// end ;
17542: GO 17416
17544: POP
17545: POP
// end ; end_of_file
17546: PPOPN 4
17548: END
// every 0 0$1 trigger ruAI = 1 do
17549: LD_EXP 41
17553: PUSH
17554: LD_INT 1
17556: EQUAL
17557: IFFALSE 17686
17559: GO 17561
17561: DISABLE
// begin enable ;
17562: ENABLE
// RepairAndRebuildBase ( 3 , ruwestdepot , RuWestBase , ruDestroyedBuildings ) ;
17563: LD_INT 3
17565: PPUSH
17566: LD_INT 6
17568: PPUSH
17569: LD_INT 9
17571: PPUSH
17572: LD_EXP 38
17576: PPUSH
17577: CALL 13126 0 4
// RepairAndRebuildBase ( 3 , rueastdepot , RuEastBase , ruDestroyedBuildings ) ;
17581: LD_INT 3
17583: PPUSH
17584: LD_INT 4
17586: PPUSH
17587: LD_INT 10
17589: PPUSH
17590: LD_EXP 38
17594: PPUSH
17595: CALL 13126 0 4
// CraneRepairBuild ( 3 , RuWestBase ) ;
17599: LD_INT 3
17601: PPUSH
17602: LD_INT 9
17604: PPUSH
17605: CALL 14327 0 2
// CraneRepairBuild ( 3 , RuEastBase ) ;
17609: LD_INT 3
17611: PPUSH
17612: LD_INT 10
17614: PPUSH
17615: CALL 14327 0 2
// HealUnitInBase ( 3 , RuWestHealArea , RuWestBase , rulab1 ) ;
17619: LD_INT 3
17621: PPUSH
17622: LD_INT 16
17624: PPUSH
17625: LD_INT 9
17627: PPUSH
17628: LD_INT 91
17630: PPUSH
17631: CALL 13517 0 4
// HealUnitInBase ( 3 , RuEastHealArea , RuEastBase , [ rulab2 , rulab3 , rulab4 ] ) ;
17635: LD_INT 3
17637: PPUSH
17638: LD_INT 17
17640: PPUSH
17641: LD_INT 10
17643: PPUSH
17644: LD_INT 47
17646: PUSH
17647: LD_INT 129
17649: PUSH
17650: LD_INT 135
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: LIST
17657: PPUSH
17658: CALL 13517 0 4
// AttackVehicles ( 3 ) ;
17662: LD_INT 3
17664: PPUSH
17665: CALL 14654 0 1
// IntBazooka ( 3 ) ;
17669: LD_INT 3
17671: PPUSH
17672: CALL 15113 0 1
// AttackNearBuildings ( 3 , 1 ) ;
17676: LD_INT 3
17678: PPUSH
17679: LD_INT 1
17681: PPUSH
17682: CALL 14097 0 2
// end ;
17686: END
// every 0 0$1 do
17687: GO 17689
17689: DISABLE
// begin enable ;
17690: ENABLE
// TimeLapsersAI ( 3 ) ;
17691: LD_INT 3
17693: PPUSH
17694: CALL 14952 0 1
// end ;
17698: END
// every 0 0$1 trigger IsDying ( rueastdepot ) do
17699: LD_INT 4
17701: PPUSH
17702: CALL_OW 303
17706: IFFALSE 17721
17708: GO 17710
17710: DISABLE
// DefendDepot ( 3 , rueastdepot ) ;
17711: LD_INT 3
17713: PPUSH
17714: LD_INT 4
17716: PPUSH
17717: CALL 15765 0 2
17721: END
// every 0 0$1 do
17722: GO 17724
17724: DISABLE
// begin ResAllTechs ( 3 , rulab1 , 3 ) ;
17725: LD_INT 3
17727: PPUSH
17728: LD_INT 91
17730: PPUSH
17731: LD_INT 3
17733: PPUSH
17734: CALL 12885 0 3
// ResAllTechs ( 3 , rulab2 , 3 ) ;
17738: LD_INT 3
17740: PPUSH
17741: LD_INT 47
17743: PPUSH
17744: LD_INT 3
17746: PPUSH
17747: CALL 12885 0 3
// ResAllTechs ( 3 , rulab3 , 3 ) ;
17751: LD_INT 3
17753: PPUSH
17754: LD_INT 129
17756: PPUSH
17757: LD_INT 3
17759: PPUSH
17760: CALL 12885 0 3
// ResAllTechs ( 3 , ruheadlab , 3 ) ;
17764: LD_INT 3
17766: PPUSH
17767: LD_INT 3
17769: PPUSH
17770: LD_INT 3
17772: PPUSH
17773: CALL 12885 0 3
// end ;
17777: END
// every 5 5$0 trigger secondPass = 2 and GetSide ( ru_fact ) = 3 and GetSide ( rufab2 ) = 3 and IsOk ( ru_fact ) and IsOk ( rufab2 ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_empty ] ] ] ) diff FilterUnitsInArea ( RussianOutsideVehs , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) = 0 do
17778: LD_EXP 27
17782: PUSH
17783: LD_INT 2
17785: EQUAL
17786: PUSH
17787: LD_INT 21
17789: PPUSH
17790: CALL_OW 255
17794: PUSH
17795: LD_INT 3
17797: EQUAL
17798: AND
17799: PUSH
17800: LD_INT 112
17802: PPUSH
17803: CALL_OW 255
17807: PUSH
17808: LD_INT 3
17810: EQUAL
17811: AND
17812: PUSH
17813: LD_INT 21
17815: PPUSH
17816: CALL_OW 302
17820: AND
17821: PUSH
17822: LD_INT 112
17824: PPUSH
17825: CALL_OW 302
17829: AND
17830: PUSH
17831: LD_INT 22
17833: PUSH
17834: LD_INT 3
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: PUSH
17841: LD_INT 21
17843: PUSH
17844: LD_INT 2
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: PUSH
17851: LD_INT 50
17853: PUSH
17854: EMPTY
17855: LIST
17856: PUSH
17857: LD_INT 3
17859: PUSH
17860: LD_INT 58
17862: PUSH
17863: EMPTY
17864: LIST
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: EMPTY
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: PPUSH
17876: CALL_OW 69
17880: PUSH
17881: LD_INT 18
17883: PPUSH
17884: LD_INT 22
17886: PUSH
17887: LD_INT 3
17889: PUSH
17890: EMPTY
17891: LIST
17892: LIST
17893: PUSH
17894: LD_INT 21
17896: PUSH
17897: LD_INT 2
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: PPUSH
17908: CALL_OW 70
17912: PUSH
17913: LD_INT 0
17915: EQUAL
17916: DIFF
17917: AND
17918: IFFALSE 18036
17920: GO 17922
17922: DISABLE
// begin enable ;
17923: ENABLE
// BuildingVehicle ( 3 , ru_fact , [ 3 , 4 , 4 ] [ Difficulty ] , [ 46 , 45 , 44 ] , 3 , 3 , 24 ) ;
17924: LD_INT 3
17926: PPUSH
17927: LD_INT 21
17929: PPUSH
17930: LD_INT 3
17932: PUSH
17933: LD_INT 4
17935: PUSH
17936: LD_INT 4
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: LIST
17943: PUSH
17944: LD_OWVAR 67
17948: ARRAY
17949: PPUSH
17950: LD_INT 46
17952: PUSH
17953: LD_INT 45
17955: PUSH
17956: LD_INT 44
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: LIST
17963: PPUSH
17964: LD_INT 3
17966: PPUSH
17967: LD_INT 3
17969: PPUSH
17970: LD_INT 24
17972: PPUSH
17973: CALL 14507 0 7
// if russianTimeLapsers = 0 then
17977: LD_EXP 40
17981: PUSH
17982: LD_INT 0
17984: EQUAL
17985: IFFALSE 18036
// BuildingVehicle ( 3 , rufab2 , [ 1 , 2 , 2 ] [ Difficulty ] , [ 49 , 49 ] , 3 , 3 , 24 ) ;
17987: LD_INT 3
17989: PPUSH
17990: LD_INT 112
17992: PPUSH
17993: LD_INT 1
17995: PUSH
17996: LD_INT 2
17998: PUSH
17999: LD_INT 2
18001: PUSH
18002: EMPTY
18003: LIST
18004: LIST
18005: LIST
18006: PUSH
18007: LD_OWVAR 67
18011: ARRAY
18012: PPUSH
18013: LD_INT 49
18015: PUSH
18016: LD_INT 49
18018: PUSH
18019: EMPTY
18020: LIST
18021: LIST
18022: PPUSH
18023: LD_INT 3
18025: PPUSH
18026: LD_INT 3
18028: PPUSH
18029: LD_INT 24
18031: PPUSH
18032: CALL 14507 0 7
// end ;
18036: END
// every 0 0$1 trigger arabianMines do var i ;
18037: LD_EXP 44
18041: IFFALSE 18162
18043: GO 18045
18045: DISABLE
18046: LD_INT 0
18048: PPUSH
// begin enable ;
18049: ENABLE
// for i in arabianMines do
18050: LD_ADDR_VAR 0 1
18054: PUSH
18055: LD_EXP 44
18059: PUSH
18060: FOR_IN
18061: IFFALSE 18160
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
18063: LD_INT 22
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 92
18075: PUSH
18076: LD_VAR 0 1
18080: PUSH
18081: LD_INT 1
18083: ARRAY
18084: PUSH
18085: LD_VAR 0 1
18089: PUSH
18090: LD_INT 2
18092: ARRAY
18093: PUSH
18094: LD_INT 3
18096: PUSH
18097: EMPTY
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: PUSH
18103: EMPTY
18104: LIST
18105: LIST
18106: PPUSH
18107: CALL_OW 69
18111: IFFALSE 18158
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
18113: LD_VAR 0 1
18117: PUSH
18118: LD_INT 1
18120: ARRAY
18121: PPUSH
18122: LD_VAR 0 1
18126: PUSH
18127: LD_INT 2
18129: ARRAY
18130: PPUSH
18131: LD_INT 5
18133: PPUSH
18134: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
18138: LD_ADDR_EXP 44
18142: PUSH
18143: LD_EXP 44
18147: PPUSH
18148: LD_VAR 0 1
18152: PPUSH
18153: CALL_OW 3
18157: ST_TO_ADDR
// end ; end ;
18158: GO 18060
18160: POP
18161: POP
// end ;
18162: PPOPN 1
18164: END
// every 0 0$1 trigger vehicleTeleported = 4 and tpCounter = [ 6 , 8 , 8 ] [ Difficulty ] do
18165: LD_EXP 28
18169: PUSH
18170: LD_INT 4
18172: EQUAL
18173: PUSH
18174: LD_EXP 29
18178: PUSH
18179: LD_INT 6
18181: PUSH
18182: LD_INT 8
18184: PUSH
18185: LD_INT 8
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: LIST
18192: PUSH
18193: LD_OWVAR 67
18197: ARRAY
18198: EQUAL
18199: AND
18200: IFFALSE 18218
18202: GO 18204
18204: DISABLE
// TeleportExit ( ruteleprt , 47 , 82 ) ;
18205: LD_INT 10
18207: PPUSH
18208: LD_INT 47
18210: PPUSH
18211: LD_INT 82
18213: PPUSH
18214: CALL_OW 243
18218: END
// every 2 2$0 trigger vehicleTeleported = 4 do
18219: LD_EXP 28
18223: PUSH
18224: LD_INT 4
18226: EQUAL
18227: IFFALSE 18249
18229: GO 18231
18231: DISABLE
// begin enable ;
18232: ENABLE
// attackTactic = rand ( 1 , 2 ) ;
18233: LD_ADDR_EXP 43
18237: PUSH
18238: LD_INT 1
18240: PPUSH
18241: LD_INT 2
18243: PPUSH
18244: CALL_OW 12
18248: ST_TO_ADDR
// end ; end_of_file
18249: END
// every 0 0$1 trigger RuScientists = [ ] and IsDead ( ruheadlab ) do
18250: LD_EXP 34
18254: PUSH
18255: EMPTY
18256: EQUAL
18257: PUSH
18258: LD_INT 3
18260: PPUSH
18261: CALL_OW 301
18265: AND
18266: IFFALSE 18471
18268: GO 18270
18270: DISABLE
// begin if sciCounter = 0 then
18271: LD_EXP 35
18275: PUSH
18276: LD_INT 0
18278: EQUAL
18279: IFFALSE 18305
// begin Say ( JMM , D7a-JMM-1 ) ;
18281: LD_EXP 1
18285: PPUSH
18286: LD_STRING D7a-JMM-1
18288: PPUSH
18289: CALL_OW 88
// SayRadio ( Powell , D7a-Pow-1 ) ;
18293: LD_EXP 22
18297: PPUSH
18298: LD_STRING D7a-Pow-1
18300: PPUSH
18301: CALL_OW 94
// end ; if sciCounter > 0 and sciCounter < 6 then
18305: LD_EXP 35
18309: PUSH
18310: LD_INT 0
18312: GREATER
18313: PUSH
18314: LD_EXP 35
18318: PUSH
18319: LD_INT 6
18321: LESS
18322: AND
18323: IFFALSE 18349
// begin Say ( JMM , D7b-JMM-1 ) ;
18325: LD_EXP 1
18329: PPUSH
18330: LD_STRING D7b-JMM-1
18332: PPUSH
18333: CALL_OW 88
// SayRadio ( Powell , D7b-Pow-1 ) ;
18337: LD_EXP 22
18341: PPUSH
18342: LD_STRING D7b-Pow-1
18344: PPUSH
18345: CALL_OW 94
// end ; if sciCounter = 6 then
18349: LD_EXP 35
18353: PUSH
18354: LD_INT 6
18356: EQUAL
18357: IFFALSE 18467
// begin Say ( JMM , D7c-JMM-1 ) ;
18359: LD_EXP 1
18363: PPUSH
18364: LD_STRING D7c-JMM-1
18366: PPUSH
18367: CALL_OW 88
// SayRadio ( Powell , D7c-Pow-1 ) ;
18371: LD_EXP 22
18375: PPUSH
18376: LD_STRING D7c-Pow-1
18378: PPUSH
18379: CALL_OW 94
// Say ( JMM , D7d-JMM-1 ) ;
18383: LD_EXP 1
18387: PPUSH
18388: LD_STRING D7d-JMM-1
18390: PPUSH
18391: CALL_OW 88
// SayRadio ( Powell , D7d-Pow-1 ) ;
18395: LD_EXP 22
18399: PPUSH
18400: LD_STRING D7d-Pow-1
18402: PPUSH
18403: CALL_OW 94
// Say ( JMM , D7d-JMM-2 ) ;
18407: LD_EXP 1
18411: PPUSH
18412: LD_STRING D7d-JMM-2
18414: PPUSH
18415: CALL_OW 88
// if askSiberite = 1 then
18419: LD_EXP 32
18423: PUSH
18424: LD_INT 1
18426: EQUAL
18427: IFFALSE 18443
// begin Say ( JMM , D7d-JMM-2a ) ;
18429: LD_EXP 1
18433: PPUSH
18434: LD_STRING D7d-JMM-2a
18436: PPUSH
18437: CALL_OW 88
// end else
18441: GO 18455
// begin SayRadio ( Powell , D7d-Pow-2 ) ;
18443: LD_EXP 22
18447: PPUSH
18448: LD_STRING D7d-Pow-2
18450: PPUSH
18451: CALL_OW 94
// end ; SayRadio ( Powell , D7d-Pow-2a ) ;
18455: LD_EXP 22
18459: PPUSH
18460: LD_STRING D7d-Pow-2a
18462: PPUSH
18463: CALL_OW 94
// end ; FinishMission ;
18467: CALL 18472 0 0
// end ;
18471: END
// export function FinishMission ; begin
18472: LD_INT 0
18474: PPUSH
// if teleportExplored = 1 then
18475: LD_EXP 33
18479: PUSH
18480: LD_INT 1
18482: EQUAL
18483: IFFALSE 18497
// AddMedal ( Teleport , 1 ) else
18485: LD_STRING Teleport
18487: PPUSH
18488: LD_INT 1
18490: PPUSH
18491: CALL_OW 101
18495: GO 18508
// AddMedal ( Teleport , - 1 ) ;
18497: LD_STRING Teleport
18499: PPUSH
18500: LD_INT 1
18502: NEG
18503: PPUSH
18504: CALL_OW 101
// if sciCounter > 2 then
18508: LD_EXP 35
18512: PUSH
18513: LD_INT 2
18515: GREATER
18516: IFFALSE 18530
// AddMedal ( Materials , 1 ) else
18518: LD_STRING Materials
18520: PPUSH
18521: LD_INT 1
18523: PPUSH
18524: CALL_OW 101
18528: GO 18541
// AddMedal ( Materials , - 1 ) ;
18530: LD_STRING Materials
18532: PPUSH
18533: LD_INT 1
18535: NEG
18536: PPUSH
18537: CALL_OW 101
// if sciCounter = 6 then
18541: LD_EXP 35
18545: PUSH
18546: LD_INT 6
18548: EQUAL
18549: IFFALSE 18573
// begin AddMedal ( Scientists , 1 ) ;
18551: LD_STRING Scientists
18553: PPUSH
18554: LD_INT 1
18556: PPUSH
18557: CALL_OW 101
// SaveVariable ( 1 , 12_SciDed_1 ) ;
18561: LD_INT 1
18563: PPUSH
18564: LD_STRING 12_SciDed_1
18566: PPUSH
18567: CALL_OW 39
// end else
18571: GO 18594
// begin AddMedal ( Scientists , - 1 ) ;
18573: LD_STRING Scientists
18575: PPUSH
18576: LD_INT 1
18578: NEG
18579: PPUSH
18580: CALL_OW 101
// SaveVariable ( 0 , 12_SciDed_1 ) ;
18584: LD_INT 0
18586: PPUSH
18587: LD_STRING 12_SciDed_1
18589: PPUSH
18590: CALL_OW 39
// end ; SaveVariable ( fakeInfo , 12_MainDepositFake_1 ) ;
18594: LD_EXP 31
18598: PPUSH
18599: LD_STRING 12_MainDepositFake_1
18601: PPUSH
18602: CALL_OW 39
// GiveMedals ( MAIN ) ;
18606: LD_STRING MAIN
18608: PPUSH
18609: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
18613: LD_INT 22
18615: PUSH
18616: LD_INT 1
18618: PUSH
18619: EMPTY
18620: LIST
18621: LIST
18622: PUSH
18623: LD_INT 21
18625: PUSH
18626: LD_INT 1
18628: PUSH
18629: EMPTY
18630: LIST
18631: LIST
18632: PUSH
18633: LD_INT 2
18635: PUSH
18636: LD_INT 25
18638: PUSH
18639: LD_INT 1
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 25
18648: PUSH
18649: LD_INT 2
18651: PUSH
18652: EMPTY
18653: LIST
18654: LIST
18655: PUSH
18656: LD_INT 25
18658: PUSH
18659: LD_INT 3
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 25
18668: PUSH
18669: LD_INT 4
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 25
18678: PUSH
18679: LD_INT 5
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: LD_INT 25
18688: PUSH
18689: LD_INT 8
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: LIST
18700: LIST
18701: LIST
18702: LIST
18703: LIST
18704: PUSH
18705: EMPTY
18706: LIST
18707: LIST
18708: LIST
18709: PPUSH
18710: CALL_OW 69
18714: PPUSH
18715: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
18719: LD_EXP 1
18723: PPUSH
18724: LD_EXP 46
18728: PUSH
18729: LD_STRING JMM
18731: STR
18732: PPUSH
18733: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
18737: LD_EXP 7
18741: PPUSH
18742: LD_EXP 46
18746: PUSH
18747: LD_STRING Brown
18749: STR
18750: PPUSH
18751: CALL 12117 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
18755: LD_EXP 3
18759: PPUSH
18760: LD_EXP 46
18764: PUSH
18765: LD_STRING Donaldson
18767: STR
18768: PPUSH
18769: CALL 12117 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
18773: LD_EXP 4
18777: PPUSH
18778: LD_EXP 46
18782: PUSH
18783: LD_STRING Bobby
18785: STR
18786: PPUSH
18787: CALL 12117 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
18791: LD_EXP 5
18795: PPUSH
18796: LD_EXP 46
18800: PUSH
18801: LD_STRING Cyrus
18803: STR
18804: PPUSH
18805: CALL 12117 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
18809: LD_EXP 2
18813: PPUSH
18814: LD_EXP 46
18818: PUSH
18819: LD_STRING Lisa
18821: STR
18822: PPUSH
18823: CALL 12117 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
18827: LD_EXP 12
18831: PPUSH
18832: LD_EXP 46
18836: PUSH
18837: LD_STRING Frank
18839: STR
18840: PPUSH
18841: CALL 12117 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
18845: LD_EXP 13
18849: PPUSH
18850: LD_EXP 46
18854: PUSH
18855: LD_STRING Kikuchi
18857: STR
18858: PPUSH
18859: CALL 12117 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
18863: LD_EXP 9
18867: PPUSH
18868: LD_EXP 46
18872: PUSH
18873: LD_STRING Houten
18875: STR
18876: PPUSH
18877: CALL 12117 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
18881: LD_EXP 11
18885: PPUSH
18886: LD_EXP 46
18890: PUSH
18891: LD_STRING Gary
18893: STR
18894: PPUSH
18895: CALL 12117 0 2
// EnchancedSaveCharacters ( Cornel , mission_prefix & Cornell ) ;
18899: LD_EXP 10
18903: PPUSH
18904: LD_EXP 46
18908: PUSH
18909: LD_STRING Cornell
18911: STR
18912: PPUSH
18913: CALL 12117 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
18917: LD_EXP 6
18921: PPUSH
18922: LD_EXP 46
18926: PUSH
18927: LD_STRING Denis
18929: STR
18930: PPUSH
18931: CALL 12117 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
18935: LD_EXP 8
18939: PPUSH
18940: LD_EXP 46
18944: PUSH
18945: LD_STRING Gladstone
18947: STR
18948: PPUSH
18949: CALL 12117 0 2
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Houten , Gary , Cornel ] , 12_other_survivors ) ;
18953: LD_INT 22
18955: PUSH
18956: LD_INT 1
18958: PUSH
18959: EMPTY
18960: LIST
18961: LIST
18962: PUSH
18963: LD_INT 23
18965: PUSH
18966: LD_INT 1
18968: PUSH
18969: EMPTY
18970: LIST
18971: LIST
18972: PUSH
18973: LD_INT 21
18975: PUSH
18976: LD_INT 1
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: PUSH
18983: LD_INT 2
18985: PUSH
18986: LD_INT 25
18988: PUSH
18989: LD_INT 1
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 25
18998: PUSH
18999: LD_INT 2
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: LD_INT 25
19008: PUSH
19009: LD_INT 3
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: PUSH
19016: LD_INT 25
19018: PUSH
19019: LD_INT 4
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PUSH
19026: LD_INT 25
19028: PUSH
19029: LD_INT 5
19031: PUSH
19032: EMPTY
19033: LIST
19034: LIST
19035: PUSH
19036: LD_INT 25
19038: PUSH
19039: LD_INT 8
19041: PUSH
19042: EMPTY
19043: LIST
19044: LIST
19045: PUSH
19046: EMPTY
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: PPUSH
19061: CALL_OW 69
19065: PUSH
19066: LD_EXP 1
19070: PUSH
19071: LD_EXP 7
19075: PUSH
19076: LD_EXP 3
19080: PUSH
19081: LD_EXP 4
19085: PUSH
19086: LD_EXP 5
19090: PUSH
19091: LD_EXP 2
19095: PUSH
19096: LD_EXP 12
19100: PUSH
19101: LD_EXP 8
19105: PUSH
19106: LD_EXP 13
19110: PUSH
19111: LD_EXP 6
19115: PUSH
19116: LD_EXP 9
19120: PUSH
19121: LD_EXP 11
19125: PUSH
19126: LD_EXP 10
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: DIFF
19146: PPUSH
19147: LD_STRING 12_other_survivors
19149: PPUSH
19150: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) , 12_kurt_squad ) ;
19154: LD_INT 22
19156: PUSH
19157: LD_INT 1
19159: PUSH
19160: EMPTY
19161: LIST
19162: LIST
19163: PUSH
19164: LD_INT 23
19166: PUSH
19167: LD_INT 2
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PUSH
19174: LD_INT 21
19176: PUSH
19177: LD_INT 1
19179: PUSH
19180: EMPTY
19181: LIST
19182: LIST
19183: PUSH
19184: LD_INT 2
19186: PUSH
19187: LD_INT 25
19189: PUSH
19190: LD_INT 1
19192: PUSH
19193: EMPTY
19194: LIST
19195: LIST
19196: PUSH
19197: LD_INT 25
19199: PUSH
19200: LD_INT 2
19202: PUSH
19203: EMPTY
19204: LIST
19205: LIST
19206: PUSH
19207: LD_INT 25
19209: PUSH
19210: LD_INT 3
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: PUSH
19217: LD_INT 25
19219: PUSH
19220: LD_INT 4
19222: PUSH
19223: EMPTY
19224: LIST
19225: LIST
19226: PUSH
19227: LD_INT 25
19229: PUSH
19230: LD_INT 5
19232: PUSH
19233: EMPTY
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 25
19239: PUSH
19240: LD_INT 8
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: PUSH
19247: EMPTY
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: PUSH
19256: EMPTY
19257: LIST
19258: LIST
19259: LIST
19260: LIST
19261: PPUSH
19262: CALL_OW 69
19266: PPUSH
19267: LD_STRING 12_kurt_squad
19269: PPUSH
19270: CALL_OW 38
// SaveCharacters ( others11 , 12_others ) ;
19274: LD_EXP 14
19278: PPUSH
19279: LD_STRING 12_others
19281: PPUSH
19282: CALL_OW 38
// YouWin ;
19286: CALL_OW 103
// end ; end_of_file
19290: LD_VAR 0 1
19294: RET
// every 0 0$1 trigger IsDead ( JMM ) do
19295: LD_EXP 1
19299: PPUSH
19300: CALL_OW 301
19304: IFFALSE 19316
19306: GO 19308
19308: DISABLE
// YouLost ( JMM ) ; end_of_file
19309: LD_STRING JMM
19311: PPUSH
19312: CALL_OW 104
19316: END
// every 0 0$01 do
19317: GO 19319
19319: DISABLE
// begin repeat wait ( 0 0$30 ) ;
19320: LD_INT 1050
19322: PPUSH
19323: CALL_OW 67
// if cratesSpawned < 6 then
19327: LD_EXP 45
19331: PUSH
19332: LD_INT 6
19334: LESS
19335: IFFALSE 19372
// begin CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19337: LD_INT 3
19339: PPUSH
19340: LD_INT 5
19342: PPUSH
19343: CALL_OW 12
19347: PPUSH
19348: LD_INT 21
19350: PPUSH
19351: LD_INT 1
19353: PPUSH
19354: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19358: LD_ADDR_EXP 45
19362: PUSH
19363: LD_EXP 45
19367: PUSH
19368: LD_INT 1
19370: PLUS
19371: ST_TO_ADDR
// end ; if cratesSpawned >= 6 and cratesSpawned < 12 then
19372: LD_EXP 45
19376: PUSH
19377: LD_INT 6
19379: GREATEREQUAL
19380: PUSH
19381: LD_EXP 45
19385: PUSH
19386: LD_INT 12
19388: LESS
19389: AND
19390: IFFALSE 19434
// begin wait ( 0 0$50 ) ;
19392: LD_INT 1750
19394: PPUSH
19395: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19399: LD_INT 3
19401: PPUSH
19402: LD_INT 5
19404: PPUSH
19405: CALL_OW 12
19409: PPUSH
19410: LD_INT 21
19412: PPUSH
19413: LD_INT 1
19415: PPUSH
19416: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19420: LD_ADDR_EXP 45
19424: PUSH
19425: LD_EXP 45
19429: PUSH
19430: LD_INT 1
19432: PLUS
19433: ST_TO_ADDR
// end ; if cratesSpawned >= 12 then
19434: LD_EXP 45
19438: PUSH
19439: LD_INT 12
19441: GREATEREQUAL
19442: IFFALSE 19486
// begin wait ( 1 1$40 ) ;
19444: LD_INT 3500
19446: PPUSH
19447: CALL_OW 67
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
19451: LD_INT 3
19453: PPUSH
19454: LD_INT 5
19456: PPUSH
19457: CALL_OW 12
19461: PPUSH
19462: LD_INT 21
19464: PPUSH
19465: LD_INT 1
19467: PPUSH
19468: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
19472: LD_ADDR_EXP 45
19476: PUSH
19477: LD_EXP 45
19481: PUSH
19482: LD_INT 1
19484: PLUS
19485: ST_TO_ADDR
// end ; until false ;
19486: LD_INT 0
19488: IFFALSE 19320
// end ;
19490: END
